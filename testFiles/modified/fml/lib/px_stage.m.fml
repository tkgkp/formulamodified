:!UTF-8
::(c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: px_stage.fml [12.10]
:: Utworzony: 2011/09/23
:: Autor: jerry
::======================================================================================================================
:: Zawartosc: Obsluga PX_STAGE
::======================================================================================================================


\PX_STAGE_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Kasuje PX_STAGE z PX_OPERami i PX_MATami
::   WE: PX_STAGE.ref()
::       [_b] - NUCO - usunięcie zapisów z planu strategicznego przed zmianami w przepisie planistycznym
::              1 - usunąć zapisy, 0 - standardowe działanie funkcji
::   WY: 1/0 sukces/porazka
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_PX_STAGE:=_a;
_result:=0;
_mydo:=do_state()=0;

:: NUCO - parametr do usunięcia zapisów z planu strategicznego
_force_ps:=0;
{? var_pres('_b')=type_of(0)
|| _force_ps:=_b
?};

{? _mydo || do() ?};

_can_continue:=1;

PX_STAGE.cntx_psh();
PX_STAGE.clear();
{? PX_STAGE.seek(_PX_STAGE)
||
:: Sprawdzam czy etap jest uzywany w planie czyli czy istnieja powiazane pozycje planu

:: NUCO - jeśli parametr _force_ps - to najpierw usówamy zapisy związane z planem strategicznym
   {? _force_ps
   || exec('usun_px_poz','qtpp', PX_STAGE.ref())
   ?};

   _used:=exec('used_in_plan','px_stage',PX_STAGE.ref());
   {? _used=0
   ||
::    1. Usuwanie PX_OPERow
      PX_OPER.cntx_psh();
      PX_OPER.index('UNIQALL');
      PX_OPER.prefix(PX_STAGE.ref());
      {? PX_OPER.first()
      || _deleted:='';
         {!
         |? _deleted+=$PX_OPER.ref();
::          kasujemy
            exec('PX_OPER_del','px_oper',PX_OPER.ref())
::          idziemy na poczatek
            & PX_OPER.first()
::          gdyby jednak nie zostalo skasowane, to konczymy bo bysmy sie zapetlili
            & (_deleted*$PX_OPER.ref())=0
         !};
         _can_continue:=~PX_OPER.first()
      ?};
      PX_OPER.cntx_pop()
   || _can_continue:=0
   ?};

   {? _can_continue>0
   ||
::    2. Usuwanie PX_MATow
      PX_MAT.cntx_psh();
      PX_MAT.index('UNIQALL');
      PX_MAT.prefix(PX_STAGE.ref());
      {? PX_MAT.first()
      || _deleted:='';
         {!
         |? _deleted+=$PX_MAT.ref();
::          kasujemy
            exec('PX_MAT_del','px_mat',PX_MAT.ref())
::          idziemy na poczatek
            & PX_MAT.first()
::          gdyby jednak nie zostalo skasowane, to konczymy bo bysmy sie zapetlili
            & (_deleted*$PX_MAT.ref())=0
         !};
         _can_continue:=~PX_MAT.first()
      ?};
      PX_MAT.cntx_pop()
   ?};

   {? _can_continue>0
   ||
::    3. Usuwanie punktow czasowych
      _can_continue:=exec('delete4stage','px_point',PX_STAGE.ref())
   ?}
|| _can_continue:=0
?};

{? _can_continue>0
||
:: usuwam powiazania etapu z TOPEREM, ZOPEREM, ZGPem
   _can_continue:=exec('clean_ties','px_stage',PX_STAGE.ref());

   {? _can_continue>0 & PX_STAGE.del(,1)
   || _can_continue:=1
   || _can_continue:=0; undo()
   ?}
?};
{? _can_continue>0
|| PX_VAR.PX_STAGE:=null();
   _result:=1
?};

PX_STAGE.cntx_pop();
{? _mydo || end() ?};
_result


