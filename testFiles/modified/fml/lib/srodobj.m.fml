:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: srodobj.fml
:: Utworzony: 13.10.2015
:: Autor: PJ
::======================================================================================================================
:: Zawartość: Obiekt SRDOBJ - obsługa środka trwałego
::======================================================================================================================


\srd_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła deklarujaca klasę SRDOBJ - obsługa środka trwałego
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('SRDOBJ', @.CLASS)<0
|| obj_decl('SRDOBJ',

   obj_fld('REF',"PRIVATE: ref bieżącego rekordu tabeli środków";null),
   obj_fld('TOR_D',"PUBLIC: znacznik czy obsługiwany tor dodatkowy";0),
   obj_fld('TRYB',"PUBLIC: znacznik trybu edycji (A)dd lub (E)dit";'A'),
   obj_fld('READONLY',"PUBLIC: czy brak uprawnień edycji w zakładce środków";'N'),
   obj_fld('KOMM',"PUBLIC: czy komunikaty poprzez obiekt KOMM";'N'),
   obj_fld('CHANGE',"PUBLIC: czy nastąpiła zmiana wymagająca przeliczenia amortyzacji";'N'),
   obj_fld('OKR_EWID',"PUBLIC: początek okresu od którego środek występuje w ewidencji";date(0,0,0)),
   obj_fld('FST',"PUBLIC: ref obszaru FST";null),
   obj_fld('PAR_WYDR',"PUBLIC: czy w trybie wydruków?";'N'),
   obj_meth('__init',"
         __PAR188:=PAR_SKID.get(188)='T';
         .TOR_D:=FINFO.TOR_D='T';
         1
     "),
   obj_meth('__done',""),

   obj_meth('prefixDoc',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda prefiksuje dokumenty refem bieżącego środka
::----------------------------------------------------------------------------------------------------------------------
         SRDO.index('SRDO');
         SRDO.prefix(SRST.SRSR)
     "),

   obj_meth('isEditable',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy środek jest edytowalny wprost czy też zmiany dla środka należy już wprowadzać
::       tylko poprzez dokumenty
::----------------------------------------------------------------------------------------------------------------------
         {? SRST.SRSR().Z='T' | SRST.SRSR().Z='S' || _likw:=1 || _likw:=0 ?};
         SRDO.cntx_psh();
         {? .isElement()
         || SRDO.index('DATA_E');
            _ref:=exec('get_srsr_root','fst',SRST.SRSR);
            SRDO.prefix(_ref,SRST.SRSR)
         || SRDO.index('SRDO');
            SRDO.prefix(SRST.SRSR)
         ?};
         _doc:=SRDO.size()>0;
         'środek tylko z dokumentem przyjęcia (niezadekretowanym) można poprawiać i usuwać';
         {? _doc & SRDO.size()=1 & SRDO.first() & SRDO.TYP().RODZ='P' & SRDO.K='N' || _doc:=0 ?};
         SRDO.cntx_pop();
:: weryfikacja dofinansowań
         SRZF.cntx_psh();
         SRZF.index('SRODEK');
         SRZF.prefix(SRST.SRSR);
         _dof:=SRZF.size();
         SRZF.cntx_pop();
         _amo:=.isAmort();
         {? _doc=0 & _amo=0 & _dof=0 & _likw=0 || 1 || 0 ?}
     "),

   obj_meth('isDefunct',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy bieżący środek został już zlikwidowany lub zbyty na rzecz firmy z grupy kapitałowej
::   WE: [_a] - jeżeli _a=1 to pomija kontrolę czy środek zbyty w obrębie grupy (opcja dla przypadku usuwania dokumentu
::              zbycia środka)
::----------------------------------------------------------------------------------------------------------------------
         {? _=0 || _a:=0 ?};

         {? SRSR.Z='T'
         || FUN.info('Środek zlikwidowany, wprowadzanie zmian nie jest możliwe.'@);
            1
         |? ~_a & SRSR.ZB='T'
         || FUN.info('Środek zbyty na rzecz firmy z grupy kapitałowej, wprowadzanie zmian nie jest możliwe.'@);
            1
         || 0
         ?}
   "),

   obj_meth('isAmort',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy dla bieżącego środka naliczono amortyzację w jakimkolwiek okresie
::----------------------------------------------------------------------------------------------------------------------
      _ref:=SRST.SRSR;
      SRST.cntx_psh();
      SRST.index('AMOR');
      SRST.prefix(_ref,'T');
      {? SRST.first() || _wy:=1 || _wy:=0 ?};
      SRST.cntx_pop();
      _wy
   "),

   obj_meth('isRemovable',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy środek można usunąć z bazy
::   WY: 1/0 - można lub nie można usunąć bieżący środek
::----------------------------------------------------------------------------------------------------------------------
         {? .isEditable()
         || {? SRSR.POJAZD='T'
            || {? exec('poj_srsr','samochody',SRSR.ref()) || _wy:=0 || _wy:=1 ?}
            || _wy:=1
            ?};
            {? _wy & exec('cdwar_srsr_cnt','cechy')>0 || _wy:=0 ?};
            {? _wy & exec('rem_zas_srsr','zasoby',SRSR.ref()) || _wy:=0 || _wy:=1 ?}
         || _wy:=0
         ?};
         _wy
     "),

   obj_meth('isElement',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy bieżący rekord jest elementem składowym zestawu środków
::----------------------------------------------------------------------------------------------------------------------
         {? SRST.GRP='E' || 1 || 0 ?}
   "),

   obj_meth('isSet',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy bieżący rekord jest zestawem środków
::----------------------------------------------------------------------------------------------------------------------
         {? SRST.GRP='T' || 1 || 0 ?}
   "),

   obj_meth('isSetElementsActive',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy istnieją niezlikwidowane elementy składowe bieżącego zestawu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
         _wy:=0;
         {? SRST.GRP='T'
         || _ref:=SRST.SRSR;
            {? SRST.OKRO_F<>null
            || _data:=SRST.OKRO_F().KON
            || _data:=date(SRST.ROK,SRST.OKRES,0)
            ?};
            _find:=0;
            SRSR.cntx_psh();
            SRSR.index('TREE');
            SRSR.prefix(_ref);
            {? SRSR.first()
            || {! |?
                  {? (SRSR.Z<>'T' & SRSR.ZB<>'T') | ((SRSR.Z='T' & SRSR.DES>_data) | (SRSR.ZB='T' & SRSR.DES>_data)) || _find:=1 ?};
                  _find=0 & SRSR.next()
               !}
            ?};
            SRSR.cntx_pop();
            _wy:=_find
         || FUN.emsg('Niepoprawne wywołanie metody isSetElementsActive.\n'
                     'Metoda przeznaczona jest tylko dla zestawów środków.'@)
         ?};
         _wy
   "),

   obj_meth('modRec',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda uzupełnia pola związane z danymi ostatniej modyfikacji rekordu środka
::----------------------------------------------------------------------------------------------------------------------
         SRSR.MOD_KTO:=exec('user','fst');
         SRSR.MOD_DATA:=date();
         SRSR.MOD_CZAS:=time()
   "),

   obj_meth('setField',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda ustawia w bieżącym oknie redagowania dostępność pól związanych z torem dodatkowym
::       amortyzacji, amortyzacją sezonową i inne
::----------------------------------------------------------------------------------------------------------------------
         {? SRD.TRYB='A' | SRSR.DOKPRZ=null || _enable:=0 || _enable:=1 ?};
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'DOKPRZ');
         {? SRSR.AMOR100='T' || _enable:=1 || _enable:=0 ?};
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'WARP100');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'ZALP100');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'FREQ100');
         {? FINFO.TOR_D='N' || _enable:=0 || _enable:=1 ?};
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'WARD');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'UMOD');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'NETD');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'KONDOD');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'STAD');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'WKD');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'DPLD');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'MD');
         {? SRSR.DE<>date(0,0,0) & SRSR.DE<date(2019,1,1) || _enable:=1 || _enable:=0 ?};
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'KURS_EUR');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable,, 'EURO');
         {? SRSR.BENEFIT='T' || _enable:=1 || _enable:=0 ?};
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable, EDIT_ES, 'PRCNAZ');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable, EDIT_ES, 'BENEFIT');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable, SRDO_POM, 'PSTN');
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable='+$_enable, SRDO_POM, 'PWYD');
         SRSR.efld_opt(SRSR.win_edit('?'), 'editable='+$~_enable,, 'OSOBA');
         {? SRSR.S='T' & SRSR.SCH_SEZ<>null
         || EDIT_ES.M1:=SRSR.SCH_SEZ().M1;
            EDIT_ES.M2:=SRSR.SCH_SEZ().M2;
            EDIT_ES.M3:=SRSR.SCH_SEZ().M3;
            EDIT_ES.M4:=SRSR.SCH_SEZ().M4;
            EDIT_ES.M5:=SRSR.SCH_SEZ().M5;
            EDIT_ES.M6:=SRSR.SCH_SEZ().M6;
            EDIT_ES.M7:=SRSR.SCH_SEZ().M7;
            EDIT_ES.M8:=SRSR.SCH_SEZ().M8;
            EDIT_ES.M9:=SRSR.SCH_SEZ().M9;
            EDIT_ES.M10:=SRSR.SCH_SEZ().M10;
            EDIT_ES.M11:=SRSR.SCH_SEZ().M11;
            EDIT_ES.M12:=SRSR.SCH_SEZ().M12
         || EDIT_ES.M1:='N';
            EDIT_ES.M2:='N';
            EDIT_ES.M3:='N';
            EDIT_ES.M4:='N';
            EDIT_ES.M5:='N';
            EDIT_ES.M6:='N';
            EDIT_ES.M7:='N';
            EDIT_ES.M8:='N';
            EDIT_ES.M9:='N';
            EDIT_ES.M10:='N';
            EDIT_ES.M11:='N';
            EDIT_ES.M12:='N'
         ?}
   "),

   obj_meth('copyFromSRST',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda pomocnicza dla funkcji kopiowania środka
::----------------------------------------------------------------------------------------------------------------------
         SRST.SRSR();
         SRSR.NRI:='';
         SRSR.DOKPRZ:=null;
         SRSR.MOD_CZAS:=time(0,0,0);
         SRSR.MOD_DATA:=date(0,0,0);
         SRSR.MOD_KTO:='';
         SRSR.DES:=date(0,0,0);
         SRSR.ROZ:=null;
         SRSR.Z:='N';
         SRSR.ZB:='N';
         SRSR.DOKSKR:=null;
         SRSR.DOKKSIEG:='';
         SRSR.ORG_REF:='';
         SRSR.SRSF_REF:='';
         EDIT_ES.JORG:=SRSR.JORG().SYMBOL;
         {? SRSR.P<>null
         || EDIT_ES.PRCNAZ:=SRSR.P().OSOBA().NAZWISKO;
            SRDO_POM.PSTN:=SRSR.P().ST().ST;
            SRDO_POM.PWYD:=SRSR.P().WYDZIAL().SYMBOL
         || EDIT_ES.PRCNAZ:='';
            SRDO_POM.PSTN:='';
            SRDO_POM.PWYD:=''
         ?}
   "),

   obj_meth('setFirstMonthInRegistry',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda ustala pierwszy miesiąc ewidencjonowania środka w systemie na podstawie daty eksploatacji
::----------------------------------------------------------------------------------------------------------------------
         {? SRSR.DE<>date(0,0,0) & SRSR.OKRO_F=null
         || {? SRSR.DE<=SSTALE.AR().KON_ROK & SRSR.DE>=SSTALE.AR().POCZ_ROK
            || _okres:=exec('find_okro_f','fst',SRSR.DE)
            |? SRSR.DE>SSTALE.AR().KON_ROK
            || _okres:=null
            |? SRSR.DE<SSTALE.AR().POCZ_ROK
            || _okres:=exec('find_okro_f','fst',SSTALE.AR().POCZ_ROK)
            ?};
            {? _okres<>null
            || OKRO_F.cntx_psh();
               OKRO_F.prefix();
               {? OKRO_F.seek(_okres)
               || SRSR.OKRO_F:=OKRO_F.ref();
                  {? SRSR.OKRO_F<>null || SRSR.ROK_F:=SRSR.OKRO_F().ROK || SRSR.ROK_F:=null ?}
               ?};
               OKRO_F.cntx_pop()
            ?}
         ?}
   "),

   obj_meth('addAsset',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda dodaje środek
::----------------------------------------------------------------------------------------------------------------------
         {? ~exec('czy_amor_de','fst',,,1)
         || _txt:={? OPERATOR.DEPT || 'w bieżącej j. księgowej' || 'we wszystkich j. księgowych' ?};
            FUN.emsg('Amortyzacja w bieżącym okresie (lub w kolejnych) %1 została już zadekretowana, '
                     'dołączanie nowych środków nie jest możliwe.'@[_txt]);
            return(0)
         ?};

         SRD.TRYB:='A';
         __DEPT:=0;
         _zes_amokr:=null;
         menu_txt(,'Dołącz');
         TAM.prefix();
         POMI.win_sel('WER');
         OSOBA.win_sel('SLO');
         SRDO.win_sel('WER');
         SRSR.hdr_edit();
         SRSR.hdr_edit(' <nowy>'@);

         _beyond:=1;
         _root_ref:=null;
         _root_okro:=null;
         _new_okro:=null;
:: jeżeli _a=SRST.ref to kopia bieżącego środka, jeżeli _a='G' to nowy zestaw (jeżeli _b=SRST.ref() to kopia bieżąceg
:: zestawu), jeżeli _a='E' to nowy element (jeżeli _b=SRST.ref() to kopia bieżącego elementu), w innym przypadku nowy
:: zwykły środek

:: kopia bieżącego środka
         {? _>0 & type_of(_a)=type_of(null)
         ||
:: kontrola przy próbie kopiowania nieuzupełnionego środka utworzonego w kartotece uproszczonej
            {? SRSR.U_SR='T' & (SRSR.KONPOD=null | SRSR.KONFIN=null)
            || FUN.emsg('Należy uzupełnić dane środka utworzonego w kartotece\n'
                        'uproszczonej przed jego kopiowaniem.'@);
               return(0)
            ?};

            SRSR.win_edit('RED_'+EDIT_ES.R);
            .setField();
            SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
            .copyFromSRST(_a);
            _kst:=exec('kst_obow','fst_kst',SRSR.ROK,1);
            {? _kst<>EDIT_ES.TAB_KRST || EDIT_ES.TAB_KRST:=_kst ?};
            {? SRSR.GR<>null & SRSR.GR().KST<>_kst
            || STER.KST:=_kst;
               EDIT_ES.TAB_KRST:=_kst;
               TAM.cntx_psh();
               TAM.index('KST');
               TAM.prefix(_kst,SRSR.GR().GR,);
               {? TAM.first() || SRSR.GR:=TAM.ref() || SRSR.GR:=null ?};
               TAM.cntx_pop();
               EDIT_ES.TAB_KRST:=_kst
            ?}
:: nowy zestaw lub kopia bieżącego
         |? _>0 & type_of(_a)=type_of('') & _a='G'
         ||
:: kontrola przy próbie kopiowania nieuzupełnionego zestawu utworzonego w kartotece uproszczonej
            {? _>1 & type_of(_b)=type_of(null) & SRSR.U_SR='T' & (SRSR.KONPOD=null | SRSR.KONFIN=null)
            || FUN.emsg('Należy uzupełnić dane zestawu utworzonego w kartotece\n'
                        'uproszczonej przed jego kopiowaniem.'@);
               return(0)
            ?};

            SRSR.win_edit('RED_'+EDIT_ES.R+'G');
            .setField();
            SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
            SRSR.R:=EDIT_ES.R;
            EDIT_ES.JORG:='';
            SRDO_POM.PSTN:='';
            SRDO_POM.PWYD:='';
            SRSR.OKRO_F:=null;
            SRSR.ROK_F:=null;
            SRSR.DZ:=SRSR.DE:=SSTALE.AO().POCZ;
            SRSR.GRP:='T';
            {? _>1 & type_of(_b)=type_of(null) || .copyFromSRST(_b) ?}
:: nowy element składowy lub kopia bieżącego
         |? _>0 & type_of(_a)=type_of('') & _a='E'
         || SRSR.win_edit('RED_'+EDIT_ES.R+'E');
            .setField();
            SRSR.cntx_psh();
            SRSR.prefix();
            _nat:=0;
            _root_de:=date(0,0,0);
            {? SRSR.seek(EDIT_ES.SRSR)
            || BUFR.save();
               _root_de:=SRSR.DE;
               _root_ref:=SRSR.ref();
               _root_okro:=SRSR.OKRO_F;
               {? 1+SRSR.MF().T='N' || _nat:=1 ?};
               {? ~SRSR.r_lock(1,1)
               || FUN.emsg('Zestaw zablokowany przez innego użytkownika, dodawanie elementów nie jest możliwe.'@);
                  SRSR.cntx_pop();
                  return(0)
               ?}
            || FUN.emsg('Nie znaleziono zestawu.'@);
               SRSR.cntx_pop();
               return(0)
            ?};
            SRSR.cntx_pop();

:: kontrola przy próbie kopiowania nieuzupełnionego elementu utworzonego w kartotece uproszczonej
            {? _>1 & type_of(_b)=type_of(null) & SRSR.U_SR='T' & SRSR.GRP='E' & (SRSR.KONPOD=null | SRSR.KONFIN=null)
            || FUN.emsg('Należy najpierw uzupełnić dane zestawu utworzonego w kartotece uproszczonej,\n'
                        'dopiero później można kopiować elementy zestawu.'@);
               return(0)
            ?};
            {? SRSR.Z='T'
            || FUN.emsg('Zestaw został skreślony z datą %1, dodawanie elementów nie jest możliwe.'@[$SRSR.DES]);
               return(0)
            ?};
            {? _nat || SRSR.win_edit('RED_'+EDIT_ES.R+'E_N') ?};
            SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
:: jeżeli kopiowanie to pobiera dane z bieżącego elementu
            {? _>1 & type_of(_b)=type_of(null) || .copyFromSRST(_b) ?};
:: ale część wartości pól zawsze dziedziczy z nagłówka zestawu
            SRSR.JORG:=BUFR.get('JORG');
            SRSR.ODD:=BUFR.get('ODD');
            SRSR.GR:=BUFR.get('GR');
            SRSR.PRZYCHOD:=BUFR.get('PRZYCHOD');
            SRSR.MP:=BUFR.get('MP');
            SRSR.MF:=BUFR.get('MF');
            SRSR.MD:=BUFR.get('MD');
            SRSR.KONPOD:=BUFR.get('KONPOD');
            SRSR.KONFIN:=BUFR.get('KONFIN');
            SRSR.KONDOD:=BUFR.get('KONDOD');
            SRSR.STAP:=BUFR.get('STAP');
            SRSR.STAF:=BUFR.get('STAF');
            SRSR.STAD:=BUFR.get('STAD');
            SRSR.WKP:=BUFR.get('WKP');
            SRSR.WKF:=BUFR.get('WKF');
            SRSR.WKD:=BUFR.get('WKD');
            SRSR.DPLP:=BUFR.get('DPLP');
            SRSR.DPLF:=BUFR.get('DPLF');
            SRSR.DPLD:=BUFR.get('DPLD');
            SRSR.JM:=BUFR.get('JM');
            SRSR.MAX:=BUFR.get('MAX');
            SRSR.OKE:=BUFR.get('OKE');
            SRSR.S:=BUFR.get('S');
            SRSR.SCH_SEZ:=BUFR.get('SCH_SEZ');
            SRSR.DZ:=BUFR.get('DZ');
            SRSR.DE:=BUFR.get('DE');
            SRSR.TREE:=EDIT_ES.SRSR;
            SRSR.GRP:='E';
            SRSR.KIND:='N'
:: nowy środek
         || SRSR.win_edit('RED_'+EDIT_ES.R);
            SRSR.blank();
            .setField();
            EDIT_ES.TAB_KRST:=STER.KST;
:: START: jeżeli nabycie wewnątrz grupy kapitałowej

            {? FINFO.SPR_GRP='T' & EDIT_ES.NAB_GRP='T' & EDIT_ES.SRC_REF<>'' & EDIT_ES.ORG_REF<>''
            || .getFromSyndicate();
:: przy dołączaniu z grupy założenie blokady
               {? EDIT_ES.SRSFIRMA<>null
               || SRSFIRMA.prefix();
                  {? SRSFIRMA.seek(EDIT_ES.SRSFIRMA,ref_name(EDIT_ES.SRSFIRMA))
                  || {? ~SRSFIRMA.r_lock(1,1,1)
                     || FUN.emsg('Środek nie może zostać nabyty w bieżącej firmie gdyż jest właśnie '
                                 'dołączany przez innego użytkownika.'@);
                        _beyond:=0
                     ?}
                  ?}
               ?}
            ?};
:: END: jeżeli nabycie wewnątrz grupy kapitałowej

            SRSR.R:=EDIT_ES.R;
            EDIT_ES.JORG:='';
            SRDO_POM.PSTN:='';
            SRDO_POM.PWYD:='';
            EDIT_ES.BNFTT:=null;
            SRSR.OKRO_F:=null;
            SRSR.ROK_F:=null;
            SRSR.DZ:=SRSR.DE:=SSTALE.AO().POCZ
         ?};
         SRSR.memo_set('','OPIS');
         _sref:=null;
         _new_de:=date(0,0,0);
         SRSR.efld_opt(SRSR.win_edit('?'),'editable=grayed',,'MOD_DATA');
         SRSR.efld_opt(SRSR.win_edit('?'),'editable=grayed',,'MOD_CZAS');
         SRSR.efld_opt(SRSR.win_edit('?'),'editable=grayed',,'MOD_KTO');
         {? _beyond & SRSR.edit(\"exec('chk_srsr','srodobj','ADD')\")
         || .modRec();
            SRSR.DK:=.AMOEndDate(SRSR.DE,SRSR.STAP,SRSR.WKP,1+SRSR.MP().T,SRSR.MP().MP,SRSR.MP().PL='0');
            do();
               {? SRSR.add()
               || _new_de:=SRSR.DE;
                  _new_okro:=SRSR.OKRO_F;
                  {? _root_ref<>null
                  || _zes_amokr:=exec('amor_chck','srodobj',SRSR.OKRO_F,_root_ref)
                  ?};
                  SRSR.memo_put(,'OPIS');
:: START: jeżeli nabycie wewnątrz grupy kapitałowej
                  {? FINFO.SPR_GRP='T' & EDIT_ES.NAB_GRP='T' & EDIT_ES.SRC_REF<>'' & EDIT_ES.ORG_REF<>''
                  || .setToSyndicate(SRSR.uidref(),SRSR.DZ)
                  ?};
:: END: jeżeli nabycie wewnątrz grupy kapitałowej
                  _sref:=SRSR.ref();
                  .updateRecState();
                  {? SRSR.GRP='E'
                  || _tree:=SRSR.TREE;
:: jeżeli element to odświeżenie danych wartościowych zestawu
                     .rootUpdate(_tree);
:: jeżeli element jest pojazdem to odświeżenie pola w zestawie
                     .rootVehicle(_tree)
                  ?}
               ?};
            end();
            {? _sref
            || _ref:=exec('find_state','fst',_sref,SSTALE.AR,SSTALE.AO);
               {? _ref || SRST.seek(_ref) ?}
            ?};
:: przy dołączaniu z grupy zwolnienie blokady
            {? EDIT_ES.SRSFIRMA<>null
            || SRSFIRMA.prefix();
               {? SRSFIRMA.seek(EDIT_ES.SRSFIRMA,ref_name(EDIT_ES.SRSFIRMA))
               || SRSFIRMA.r_unlock()
               ?}
            ?}
         ||
:: przy rezygnacji zwolnienie blokady
            {? FINFO.SPR_GRP='T' & EDIT_ES.SRSFIRMA<>null
            || SRSFIRMA.prefix();
               {? SRSFIRMA.seek(EDIT_ES.SRSFIRMA,ref_name(EDIT_ES.SRSFIRMA))
               || SRSFIRMA.r_unlock()
               ?}
            ?}
         ?};
:: klasyfikacja środków trwałych
         STER.KST:=exec('kst_obow','fst_kst',SSTALE.AO().RES,1);

         {? __DEPT=1
         || OPERATOR.DEPT:=null;
            __DEPT:=0
         ?};
         {? _>0 & type_of(_a)=type_of('') & _a='E'
         || SRSR.cntx_psh();
            SRSR.prefix();
            {? SRSR.seek(EDIT_ES.SRSR) || SRSR.r_unlock() ?};
            SRSR.cntx_pop()
         ?};
         {? _>0 & type_of(_a)=type_of('') & _a='E' & _zes_amokr<>null & _sref<>null & _root_ref<>null & _new_okro<>null
         || SRST.cntx_psh(); SRSR.cntx_psh(); OKRO_F.cntx_psh();
            OKRO_F.prefix(); SRSR.prefix(); _rokam:=null;
            {? OKRO_F.seek(_zes_amokr)
            || _rokam:=OKRO_F.ROK
            ?};
            SRST.index('SROD'); SRST.prefix(_root_ref,_rokam,_zes_amokr);
            {? SRST.first()
            || SRST.SRSR();
               .calcForSet()
            ?};
            .rootUpdate(_root_ref,_new_okro);
            SRST.cntx_pop(); SRSR.cntx_pop(); OKRO_F.cntx_pop()
         ?};
         {? _>0 & type_of(_a)=type_of('') & _a='E' & var_pres('_root_de')>0 & _sref<>null
            & _root_ref<>null & (_new_de<>_root_de | _new_okro<>_root_okro)
         || _odp:=FUN.ask('Data eksploatacji i/lub okres w ewidencji dodanego elementu różne od\n'@+
                          'danych zestawu.\n'@+
                          'Dodać dokument zmiany metody amortyzacji w celu skorygowania stawek?'@);
            {? _odp
            || _tmp_ref:=exec('find_state','fst',_root_ref,SSTALE.AR,SSTALE.AO);
               exec('add_dok_el','fst_ext',_tmp_ref)
            ?}
         ?};
         _sref
     "),

   obj_meth('setToSyndicate',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Formuła dla środków nabytych wewnątrz grupy kapitałowej ustawia wartości w zapisie zbycia po dodaniu nowego środka
::   WE: _a = uidref środka, _b - data przyjęcia
::----------------------------------------------------------------------------------------------------------------------
         SRSFIRMA.cntx_psh();
         SRSFIRMA.index('ORG');
         SRSFIRMA.prefix();
         {? SRSFIRMA.seek(EDIT_ES.SRSF_REF,ref_name(EDIT_ES.SRSF_REF))
         || SRSFIRMA.SRSR_D:=_a;
            SRSFIRMA.FIRMA_D:=REF.FIRMA;
            SRSFIRMA.DATA_D:=_b;
            SRSFIRMA.PRZYJETO:='T';
            SRSFIRMA.put()
         ?};
         SRSFIRMA.cntx_pop()
   "),

   obj_meth('getFromSyndicate',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Formuła dla środków nabytych wewnątrz grupy kapitałowej ustawia wartości nowego środka na podstawie danych zbycia
::----------------------------------------------------------------------------------------------------------------------
         _n_nst:='';
         _n_warp:=_n_warf:=_n_ward:=0;
         _grupa:=null;

         SRSR.ORG_REF:=EDIT_ES.ORG_REF;
         SRSR.SRSF_REF:=EDIT_ES.SRSF_REF;
         SRSR.SRC_REF:=EDIT_ES.SRC_REF;
         SRSR.cntx_psh();
         SRSR.prefix();
         {? SRSR.seek(EDIT_ES.SRC_REF,ref_name(EDIT_ES.SRC_REF))
         || _n_nst:=SRSR.NST;
            SRDO.cntx_psh();
            SRDO.prefix();
            {? SRDO.seek(EDIT_ES.SRDO_REF,ref_name(EDIT_ES.SRDO_REF))
            || _n_warp:=SRDO.WARSP_P;
               _n_warf:=SRDO.WARSP_F;
               _n_ward:=SRDO.WARSP_D;
               SRST.cntx_psh();
               SRST.use('srst'+(ref_name(EDIT_ES.SRC_REF)+4));
               SRST.index('SROD');
               SRST.prefix(SRSR.ref(),SRDO.ROK_F,SRDO.OKRO_F);
               {? SRST.first() || _grupa:=SRST.GR ?};
               SRST.cntx_pop()
            ?};
            SRDO.cntx_pop()
         ?};
         SRSR.cntx_pop();
         {? _n_nst<>'' || SRSR.NST:=_n_nst ?};
         {? _n_warp<>0 || SRSR.WARP:=_n_warp ?};
         {? _n_warf<>0 || SRSR.WARF:=_n_warf ?};
         {? _n_ward<>0 || SRSR.WARD:=_n_ward ?};
         {? _grupa<>null || SRSR.GR:=_grupa ?}

   "),

   obj_meth('addAssetPlan',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda dodaje planowany środek do planu amortyzacji
::   WE: _a = 'E' - dołączanie elementu składowego, 'G' - dołączanie zestawu, brak lub '' dołączanie zwykłego środka
::----------------------------------------------------------------------------------------------------------------------
         {? SRSP.AKCEPT='T'
         || FUN.emsg('Zaakceptowanych planów amortyzacji nie można modyfikować.'@);
            return()
         ?};

         {? SRSP.r_lock(1,1)
         ||
            {? SRSP.R='T' || EDIT_ES.NISKO:='N'
            |? SRSP.R='N' || EDIT_ES.NISKO:='T'
            ?};

            {? _>0 & _a='E' & EDIT_ES.SRSR().GRP='N'
            || FUN.emsg('Bieżący środek nie jest zestawem.'@);
               SRSP.r_unlock();
               return()
            |? (_>0 & _a='G') | _=0
            || {? SRSP.R='W'
               || {? _>0 & _a='G'
                  || _choice:=FUN.choice('Dołączyć zestaw trwały czy niskocenny?'@,,'Trwały'@,'Niskocenny'@)
                  || _choice:=FUN.choice('Dołączyć środek trwały czy niskocenny?'@,,'Trwały'@,'Niskocenny'@)
                  ?};
                  {? _choice=0 || SRSP.r_unlock(); return()
                  |? _choice=1 || EDIT_ES.R:='T'; EDIT_ES.NISKO:='N'
                  |? _choice=2 || EDIT_ES.R:='N'; EDIT_ES.NISKO:='T'
                  ?}
               || EDIT_ES.R:=SRSP.R
               ?}
            ?};

            _nat:=0;
            {? (_>0 & _a='E')
            || {? EDIT_ES.SRSR=null
               || FUN.emsg('Nie odnaleziono rekordu nadrzędnego. Nie można dodać zapisu.'@);
                  SRSP.r_unlock(); return()
               || SRSR.cntx_psh();
                  EDIT_ES.SRSR();
                  BUFR.save();
                  {? 1+EDIT_ES.SRSR().MF().T='N' || _nat:=1 ?};
                  SRSR.cntx_pop()
               ?}
            ?};

            SRD.TRYB:='A';
            __DEPT:=0;
            TAM.prefix();
            POMI.win_sel('WER');
            OSOBA.win_sel('SLO');
            SRDO.win_sel('WER');

            SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
            {? _=0 | _a=''
            || SRSR.win_edit('PLAN_'+EDIT_ES.R);
               SRSR.GRP:='N';
               SRSR.KIND:='T'
            |? _>0 & _a='G'
            || SRSR.win_edit('PLAN_'+EDIT_ES.R+'G');
               SRSR.GRP:='T';
               SRSR.KIND:='T'
            |? _>0 & _a='E'
            || {? _nat
               || SRSR.win_edit('PLAN_'+EDIT_ES.R+'EN')
               || SRSR.win_edit('PLAN_'+EDIT_ES.R+'E')
               ?};
               SRSR.TREE:=EDIT_ES.SRSR;
               SRSR.GRP:='E';
               SRSR.KIND:='N';
               SRSR.cntx_psh();
               EDIT_ES.Z_NRI:=EDIT_ES.SRSR().NRI;
               EDIT_ES.Z_NST:=EDIT_ES.SRSR().NST;
               SRSR.cntx_pop()
            ?};
            SRSR.hdr_edit();
            SRSR.hdr_edit(' <nowy>'@);

            .setField();

            SRSR.PLAN:='T';
            SRSR.R:=EDIT_ES.R;
            EDIT_ES.JORG:='';
            SRSR.OKRO_F:=null;
            SRSR.ROK_F:=null;
            SRSR.ROK:=SRSP.OD;
            SRSR.OKRES:=1;
:: data zakupu i eksploatacji nie wcześniejsza niż pierwszy rok planu
            OKRO_F.cntx_psh();
            OKRO_F.index('SRODKI');
            OKRO_F.prefix(REF.FIRMA,SRSR.ROK);
            {? OKRO_F.first()
            || {? OKRO_F.OES=0 || OKRO_F.next() ?};
               _fst:=SRD.FST;
               OKR_OBSZ.index('OKRO_F2');
               OKR_OBSZ.prefix(_fst,OKRO_F.ref());
               {? OKR_OBSZ.first()
               || SRSR.DZ:=SRSR.DE:=OKRO_F.POCZ;
                  SRSR.OKRES:=OKRO_F.OES
               || SRSR.DZ:=SRSR.DE:=date(0,0,0)
               ?}
            || SRSR.DZ:=SRSR.DE:=date(0,0,0)
            ?};
            OKRO_F.cntx_pop();

            SRSR.memo_set('','OPIS');
            {? _>0 & _a='E'
            ||
:: element czesc pol dziedziczy z zestawu
               SRSR.JORG:=BUFR.get('JORG');
               SRSR.ODD:=BUFR.get('ODD');
               SRSR.GR:=BUFR.get('GR');
               SRSR.PRZYCHOD:=BUFR.get('PRZYCHOD');
               SRSR.MP:=BUFR.get('MP');
               SRSR.MF:=BUFR.get('MF');
               SRSR.MD:=BUFR.get('MD');
               SRSR.KONPOD:=BUFR.get('KONPOD');
               SRSR.KONFIN:=BUFR.get('KONFIN');
               SRSR.KONDOD:=BUFR.get('KONDOD');
               SRSR.STAP:=BUFR.get('STAP');
               SRSR.STAF:=BUFR.get('STAF');
               SRSR.STAD:=BUFR.get('STAD');
               SRSR.WKP:=BUFR.get('WKP');
               SRSR.WKF:=BUFR.get('WKF');
               SRSR.WKD:=BUFR.get('WKD');
               SRSR.DPLP:=BUFR.get('DPLP');
               SRSR.DPLF:=BUFR.get('DPLF');
               SRSR.DPLD:=BUFR.get('DPLD');
               SRSR.JM:=BUFR.get('JM');
               SRSR.MAX:=BUFR.get('MAX');
               SRSR.OKE:=BUFR.get('OKE');
               SRSR.S:=BUFR.get('S');
               SRSR.SCH_SEZ:=BUFR.get('SCH_SEZ');
               SRSR.DZ:=SRSR.DE:=SSTALE.AO().POCZ
            ?};

            {? SRSR.edit(\"exec('chk_srsr','srodobj','ADD',2)\")
            || .modRec();
               {? _>0 & _a='E'
               || SRSR.cntx_psh();
                  SRSR.prefix()
               ?};
               SRSR.DK:=.AMOEndDate(SRSR.DE,SRSR.STAP,SRSR.WKP,1+SRSR.MP().T,SRSR.MP().MP,SRSR.MP().PL='0');
               do();
                  {? SRSR.add()
                  || SRSR.memo_put(,'OPIS');
:: jeżeli zestaw to nie ma jeszcze elementów i nie ma czego odświeżać
:: natomiast należy utworzyć 'zerowy' rejestr stanów planu amortyzacji
                     {? SRSR.GRP='T'
                     || .updatePlan(SRSR.ref())
:: jeżeli element to odświeżenie danych wartościowych zestawu w planach
                     |? SRSR.GRP='E'
                     || _t_ref:=SRSR.ref();
                        .updatePlan(SRSR.ref());
                        SRSR.cntx_psh();
                        SRSR.index('TREE');
                        SRSR.prefix(SRSR.TREE);
                        {? SRSR.first()
                        || {! |?
                             {? SRSR.ref()<>_t_ref
                             || .updatePlan(SRSR.ref())
                             ?};
                             SRSR.next()
                           !}
                        ?};
                        SRSR.cntx_pop();
                        .rootUpdatePlan(SRSR.TREE)
:: jeżeli zwykły środek to odwieża rejestr stanów
                     |? SRSR.GRP='N'
                     || .updatePlan(SRSR.ref())
                     ?}
                  ?};
               end();
               {? _>0 & _a='E' || SRSR.cntx_pop() ?}
            ?};
            SRSP.r_unlock()
         || FUN.emsg('Plan amortyzacji zablokowany przez innego użytkownika.'@)
         ?}
   "),

   obj_meth('assetsToGroup',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda umożliwia zgrupowanie środków w zestaw o ile posiadają zgodną grupę, metody amortyzacji, zestawy kont
::----------------------------------------------------------------------------------------------------------------------
         FUN.emsg('Brak funkcji.'@)
   "),

   obj_meth('groupToAssets',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda umożliwia podział zestawu na pojedyncze środki
::----------------------------------------------------------------------------------------------------------------------
         FUN.emsg('Brak funkcji.'@)
   "),

   obj_meth('extractFromGroup',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda umożliwia wydzielenie wskazanego elementu składowego z zestawu tak, by stał się osobnym środkiem
::----------------------------------------------------------------------------------------------------------------------
         FUN.emsg('Brak funkcji.'@)
   "),

   obj_meth('addSeries',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda dodaje serię środków
::   WE: [_a] - 'S' - seria środków (domyślnie), 'E' - seria elementów składowych
::       [_b] - (REF) jeśli _a to metoda kopiuje dane ze środka wskazanego refem
::----------------------------------------------------------------------------------------------------------------------
         {? ~exec('czy_amor_de','fst',,,1)
         || _txt:={? OPERATOR.DEPT || 'w bieżącej j. księgowej' || 'we wszystkich j. księgowych' ?};
            FUN.emsg('Amortyzacja w bieżącym okresie (lub w kolejnych) %1 została już zadekretowana, '
                     'dołączanie nowych środków nie jest możliwe.'@[_txt]);
            return(0)
         ?};

         _root_de:=_new_de:=date(0,0,0);
         _root_okro:=_new_okro:=null;
         _root_ref:=null;

         {? (EDIT_ES.R='T' & FINFO.NRI_T_S='') | (EDIT_ES.R='N' & FINFO.NRI_N_S='')
         || FUN.emsg('W podstawowych parametrach środków trwałych brak formuły nadającej '
                     'numer inwentarzowy dla serii środków. Dodanie serii środków nie jest możliwe.'@);
            return(0)
         ?};

         {? _=0 || _a:='S' ?};
         SRD.TRYB:='A';
         __DEPT:=0;
         TAM.prefix();
         POMI.win_sel('WER');
         OSOBA.win_sel('SLO');
         SRDO.win_sel('WER');
         {? _a='S'
         || SRSR.win_edit('RED_'+EDIT_ES.R+'S')
         |? _a='E'
         || SRSR.win_edit('RED_'+EDIT_ES.R+'S'+'E')
         ?};
         SRSR.hdr_edit();
         EDIT_ES.LICZBA:=0;
         {? _>1 & type_of(_b)=type_of(null)
         || SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
            .copyFromSRST(_a)
         || SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
            SRSR.R:=EDIT_ES.R;
            EDIT_ES.JORG:='';
            SRSR.OKRO_F:=null;
            SRSR.ROK_F:=null;
            SRSR.DZ:=SRSR.DE:=SSTALE.AO().POCZ
         ?};
         .setField();
         SRSR.memo_set('','OPIS');
         _sref:=null;
         _add:=0;
         {? _a='E' || SRSR.GRP:='E'; SRSR.KIND:='N'
         |? _a='S' || SRST.GRP:='N'; SRSR.KIND:='T'
         ?};

         _lock:=0;
         {? _a='E'
         ||
::       część wartości pól elementów zawsze dziedziczy się z nagłówka zestawu
::       dla elementów blokowany jest rekord zestawu
            SRSR.cntx_psh();
            SRSR.prefix();
            {? SRSR.seek(EDIT_ES.SRSR)
            || _root_de:=SRSR.DE;
               _root_okro:=SRSR.OKRO_F;
               _root_ref:=SRSR.ref();
               {? ~SRSR.r_lock(1,1)
               || FUN.emsg('Zestaw zablokowany przez innego użytkownika. Dołączanie elementów niemożliwe.'@);
                  SRSR.cntx_pop();
                  return(0)
               || _lock:=1
               ?};
               BUFR.save()
            || FUN.emsg('Nie znaleziono zestawu.'@);
               SRSR.cntx_pop();
               return(0)
            ?};
            SRSR.cntx_pop();

            SRSR.JORG:=BUFR.get('JORG');
            SRSR.ODD:=BUFR.get('ODD');
            SRSR.GR:=BUFR.get('GR');
            SRSR.PRZYCHOD:=BUFR.get('PRZYCHOD');
            SRSR.MP:=BUFR.get('MP');
            SRSR.MF:=BUFR.get('MF');
            SRSR.MD:=BUFR.get('MD');
            SRSR.KONPOD:=BUFR.get('KONPOD');
            SRSR.KONFIN:=BUFR.get('KONFIN');
            SRSR.KONDOD:=BUFR.get('KONDOD');
            SRSR.STAP:=BUFR.get('STAP');
            SRSR.STAF:=BUFR.get('STAF');
            SRSR.STAD:=BUFR.get('STAD');
            SRSR.WKP:=BUFR.get('WKP');
            SRSR.WKF:=BUFR.get('WKF');
            SRSR.WKD:=BUFR.get('WKD');
            SRSR.DPLP:=BUFR.get('DPLP');
            SRSR.DPLF:=BUFR.get('DPLF');
            SRSR.DPLD:=BUFR.get('DPLD');
            SRSR.JM:=BUFR.get('JM');
            SRSR.MAX:=BUFR.get('MAX');
            SRSR.OKE:=BUFR.get('OKE');
            SRSR.S:=BUFR.get('S');
            SRSR.SCH_SEZ:=BUFR.get('SCH_SEZ');
            SRSR.TREE:=EDIT_ES.SRSR
         ?};

         {? SRSR.edit(\"exec('chk_srsr','srodobj','ADD',1)\")
         || VAR_DEL.delete('SRSRREFS');
            {? EDIT_ES.OT_SER='T'
            || SRSRREFS:=obj_new(EDIT_ES.LICZBA)
            ?};
            _new_de:=SRSR.DE;
            _new_okro:=SRSR.OKRO_F;
            {! _i:=1..EDIT_ES.LICZBA
            |! {? _a<>'E'
               || _formula:=exec('nri_form','fst');
                  {? _formula<>'' || SRSR.NRI:=($(_formula))() ?}
               || SRSR.cntx_psh();
                  _nri:=EDIT_ES.SRSR().NRI;
                  {? _nri+1='.' || _nri:=_nri-1 ?};
                  SRSR.cntx_pop();
                  _nri:=_nri+'/';
                  _loop:=1;
                  _free:=0;

                  SRSR.cntx_psh();
                  SRSR.index('TREE');
                  SRSR.prefix(EDIT_ES.SRSR);
                  _chars:=2; _big:=0;
                  {? SRSR.first()
                  || {! |?
                        _pos:=SRSR.NRI*'/';
                        {? _pos & #(_pos-SRSR.NRI)>_big || _big:=#(_pos-SRSR.NRI) ?};
                        {? +(_pos-SRSR.NRI)>_chars || _chars:=+(_pos-SRSR.NRI) ?};
                        SRSR.next()
                     !}
                  ?};
                  {? _big>0
                  || _new:=_big+1;
                     {? +($_new)>_chars || _chars:=+($_new) ?};
                     _tnri:=_nri+form(_new,-_chars,0,'9')
                  || _tnri:=_nri+'001'
                  ?};
                  {! |?
                     SRSR.index('NRI');
                     SRSR.prefix('N',_tnri,);
                     {? ~SRSR.first()
                     || _loop:=0
                     || _free+=1;
                        _tnri:=_nri+form(_free,-2,0,'9')
                     ?};
                     _loop
                  !};
                  SRSR.cntx_pop();
                  SRSR.NRI:=_tnri
               ?};
               {? SRSR.NRI<>''
               || .modRec();
                  SRSR.DK:=.AMOEndDate(SRSR.DE,SRSR.STAP,SRSR.WKP,1+SRSR.MP().T,SRSR.MP().MP,SRSR.MP().PL='0');
                  do();
                     {? SRSR.add()
                     || SRSR.memo_put(,'OPIS');
                        {? _sref=null || _sref:=SRSR.ref() ?};
                        .updateRecState();
::                      jeżeli element to odświeżenie danych wartościowych zestawu
                        {? SRSR.GRP='E'
                        || _tree:=SRSR.TREE;
                           .rootUpdate(_tree)
                        ?}
                     ?};
                     {? do_state()<2
                     || {? var_press('SRSRREFS')>0
                        || SRSRREFS[_i]:=SRSR.ref()
                        ?};
                        _add+=1
                     ?};
                  end()
               ?};
               {? SRSR.GRP='E'
               || echo('Dodawanie elementów: %1 z %2'@[$_add,$EDIT_ES.LICZBA])
               || echo('Dodawanie środków: %1 z %2'@[$_add,$EDIT_ES.LICZBA])
               ?}
            !};
            {? _sref
            || _ref:=exec('find_state','fst',_sref,SSTALE.AR,SSTALE.AO);
               {? _ref || SRST.seek(_ref) ?}
            ?}
         ?};

         {? __DEPT=1
         || OPERATOR.DEPT:=null;
            __DEPT:=0
         ?};

         {? _a='E' & _lock
         || SRSR.cntx_psh();
            SRSR.prefix();
            {? SRSR.seek(EDIT_ES.SRSR) || SRSR.r_unlock() ?};
            SRSR.cntx_pop()
         ?};

         {? _add
         || {? SRSR.GRP='E' || _info:=' elementów.' || _info:=' środków.' ?};
            {? var_press('SRSRREFS')>0
            || SRSR.cntx_psh();
               SRSR.index('NRI'); SRSR.prefix(); SRSR.blank();
               _k:=1;
               _tcounter:=0;
               {! |?
                  {? var_press('['+$_k+']',SRSRREFS)>0
                  || {? SRSR.seek(SRSRREFS[_k])
                     || _tcounter:=_k; _tcounter+=1;
                        0
                     || _k+=1;
                        _k<=obj_len(SRSRREFS)
                     ?}
                  || _k+=1;
                     _k<=obj_len(SRSRREFS)
                  ?}
               !};
               SRDO.cntx_psh();
               SRDO.index('AUTO'); SRDO.prefix();
               _addot:=1;
               _rsrdo:=exec('dok_add','!fst_ewi_drda',0);
               {? _rsrdo<>null
               || {! _j:=_tcounter..obj_len(SRSRREFS)
                  |! {? var_press('['+$_j+']',SRSRREFS)>0
                     || {? SRDO.seek(_rsrdo) & SRSR.seek(SRSRREFS[_j])
                        || exec('przed_red_ot','fst',1);
                           SRDO.NR:=exec('bl_srdo_nr','fst');
                           SRDO.SYMBOL:=exec('symdok','fst');
                           {? SRSR.GRP='E'
                           || SRDO.SRSR_E:=SRSR.ref();
                              SRDO.SRSR:=exec('get_srsr_root','fst',SRSR.ref())
                           || SRDO.SRSR:=SRSR.ref()
                           ?};
                           {? SRDO.add()
                           || exec('po_red_ot','fst');
                              SRSR.DOKPRZ:=SRDO.ref();
                              SRSR.put();
                              _addot+=1
                           ?}
                        ?}
                     ?};
                     echo('Dodawanie dokumentów OT: %1 z %2'@[$_addot,$obj_len(SRSRREFS)])
                  !}
               ?};
               SRDO.cntx_pop();
               SRSR.cntx_pop();

               exec('srst_rfresh','!fst_ewi_drda');
               FUN.info('Dodano serię %1 %2\noraz serię %3 dokumentów OT.'@[$_add,_info-1,$_addot])
            || FUN.info('Dodano serię %1 %2'@[$_add,_info])
            ?}
         ?};

         VAR_DEL.delete('SRSRREFS');

         {? _a='E' & _sref<>null & _root_ref<>null & (_new_de<>_root_de | _new_okro<>_root_okro)
         || _odp:=FUN.ask('Data eksploatacji i/lub okres w ewidencji\ndodanej serii elementów różne od'@+
                          ' danych zestawu.\n'@+
                          'Dodać dokument zmiany metody amortyzacji w celu skorygowania stawek?'@);
            {? _odp
            || _tmp_ref:=exec('find_state','fst',_root_ref,SSTALE.AR,SSTALE.AO);
               exec('add_dok_el','fst_ext',_tmp_ref)
            ?}
         ?};

         EDIT_ES.OT_SER:='N'
   "),

   obj_meth('elements',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca liczbę elementów składowych zestawu środków
::   WE: _a - ref środka (SRSR.ref())
::----------------------------------------------------------------------------------------------------------------------
         {? _=0 | type_of(_a)<>type_of(null) || return(0) ?};
         SRSR.cntx_psh();
         SRSR.index('TREE');
         SRSR.prefix(_a);
         _elem:=SRSR.size();
         SRSR.cntx_pop();
         _elem
   "),

   obj_meth('rootUpdate',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda uaktualnia dane zestawu
::       _a - wskazanie na rekord nagłówkowy zestawu (SRSR.ref())
::       [_b] - wskazanie na okres od którgo należy uaktualniać dane
::       [_c] - czy usunąć znacznik naliczenia amortyzacji
::----------------------------------------------------------------------------------------------------------------------
            SRSR.cntx_psh();
            SRST.cntx_psh();
            SRSR.prefix();
            {? SRSR.seek(_a, SRSR.name())
            || {? _>=3 & type_of(_c)=type_of(1) & type_of(_b)=type_of(null)
               || .updateRecState(_b,_c)
               |? _>=2 & type_of(_b)=type_of(null)
               || .updateRecState(_b)
               || .updateRecState()
               ?}
            ?};
            SRST.cntx_pop();
            SRSR.cntx_pop()
   "),

   obj_meth('rootUpdatePlan',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda uaktualnia dane zestawu
::       _a - wskazanie na rekord nagłówkowy zestawu (SRSR.ref())
::       _b - rok od którgo należy uaktualniać dane
::       _c - okres od którgo należy uaktualniać dane
::----------------------------------------------------------------------------------------------------------------------
            SRSR.cntx_psh();
            SRST.cntx_psh();
            SRSR.prefix();
            {? SRSR.seek(_a,SRSR.name())
            || _warp:=_warf:=_ward:=0;
               _umop:=_umof:=_umod:=0;
               _netp:=_netf:=_netd:=0;
               _rok:=SRSR.ROK;
               _okres:=SRSR.OKRES;
               SRSR.cntx_psh();
               SRSR.index('TREE');
               SRSR.prefix(SRSR.ref());
               {? SRSR.first()
               || {! |?
                     {? SRSR.ROK<_rok | (SRSR.ROK=_rok & SRSR.OKRES<=_okres)
                     || _warp+=SRSR.WARP; _warf+=SRSR.WARF; _ward+=SRSR.WARD;
                        _umop+=SRSR.UMOP; _umof+=SRSR.UMOF; _umod+=SRSR.UMOD;
                        _netp+=SRSR.NETP; _netf+=SRSR.NETF; _netd+=SRSR.NETD
                     ?};
                     SRSR.next()
                  !}
               ?};
               SRSR.cntx_pop();
               SRSR.get();
               SRSR.WARP:=_warp; SRSR.WARF:=_warf; SRSR.WARD:=_ward;
               SRSR.UMOP:=_umop; SRSR.UMOF:=_umof; SRSR.UMOD:=_umod;
               SRSR.NETP:=_netp; SRSR.NETF:=_netf; SRSR.NETD:=_netd;
               {? SRSR.PLAN_NAL='T' || SRSR.PLAN_NAL:='N' ?};
               SRSR.put();
:: uaktualnienie rejestru stanów zestawu
               SRST.index('PODAT');
               SRST.prefix(SRSR.ref());
               {? SRST.first()
               || {! |?
                     _warp:=_warf:=_ward:=0;
                     _umop:=_umof:=_umod:=0;
                     _netp:=_netf:=_netd:=0;
                     _rok:=SRST.ROK;
                     _okres:=SRST.OKRES;

                     SRSR.cntx_psh();
                     SRSR.index('TREE');
                     SRSR.prefix(SRSR.ref());
                     {? SRSR.first()
                     || {! |?
                           {? SRSR.ROK<_rok | (SRSR.ROK=_rok & SRSR.OKRES<=_okres)
                           || SRST.cntx_psh();
                              SRST.index('PODAT');
                              SRST.prefix(SRSR.ref(),_rok,_okres);
::                            wyszukiwanie rekordu rejestru stanu elementu na dany okres
                              {? SRST.first()
                              || _warp+=SRST.WARP; _warf+=SRST.WARF; _ward+=SRST.WARD;
                                 _umop+=SRST.UMOP; _umof+=SRST.UMOF; _umod+=SRST.UMOD;
                                 _netp+=SRST.NETP; _netf+=SRST.NETF; _netd+=SRST.NETD
                              ?};
                              SRST.cntx_pop()
                           ?};
                           SRSR.next()
                        !}
                     ?};
                     SRSR.cntx_pop();

                     SRST.WARP:=_warp; SRST.WARF:=_warf; SRST.WARD:=_ward;
                     SRST.UMOP:=_umop; SRST.UMOF:=_umof; SRST.UMOD:=_umod;
                     SRST.NETP:=_netp; SRST.NETF:=_netf; SRST.NETD:=_netd;
:: wyzerowanie amortyzacji skoro zmiana wartości
                     SRST.AMOP:=SRST.AMOF:=SRST.AMOD:=0;
                     SRST.NAL:='N';
                     SRST.put();

                     SRST.next()
                  !}
               ?}
            ?};
            SRST.cntx_pop();
            SRSR.cntx_pop()
   "),

   obj_meth('delAsset',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa bieżący środek, zestaw lub element składowy o ile jest to możliwe
::----------------------------------------------------------------------------------------------------------------------
         SRSR.prefix();
         {? SRST.get()
         || SRST.SRSR()
         || FUN.emsg('Nie znaleziono zapisu, prawdopodobnie został usunięty.'@);
            return(0)
         ?};
         {? SRSR.GRP='T'
         || _elem:=.elements(SRSR.ref())
         || _elem:=0
         ?};
         {? .isRemovable() & _elem=0
         || {? SRST.GRP='T' || _txt:='zestaw: ' |? SRST.GRP='E' || _txt:='element składowy: ' || _txt:='środek: ' ?};
            {? FUN.ask('Usunąć %1 %2 (%3)?'@[_txt,SRST.NRI,SRST.NST])
            || _deleted:=1;
               _komunikat:='';
               _CurRef:=null;
               _tree:=SRST.SRSR().TREE;
               _okrstdel:=SRST.OKRO_F;
               {? _tree
               || _zes_amokr:=exec('amor_chck','srodobj',_okrstdel,_tree)
               ?};
               {? SRST.f_active()>0
               || SRST.cntx_psh();
                  {? SRST.f_next() | SRST.f_prev() || _CurRef:=SRST.ref() ?};
                  SRST.cntx_pop()
               || SRST.cntx_psh();
                  {? SRST.next() | SRST.prev() || _CurRef:=SRST.ref() ?};
                  SRST.cntx_pop()
               ?};
               {? SRSR.r_lock(2,1)
               || SRSR.r_unlock();
                  do();
                     {? .delRecState()
                     || TSR.cntx_psh();
                        TSR.index('TYPK');
                        TSR.prefix(SRSR.ref());
                        {? TSR.first()
                        || {! |? TSR.del() !}
                        ?};
                        TSR.cntx_pop();
                        {? SRSR.DOKPRZ<>null
                        || _refdok:=SRSR.DOKPRZ;
                           SRSR.DOKPRZ:=null;
                           SRSR.put();
                           SRSR.cntx_psh();
                           SRDO.cntx_psh();
                           SRDO.prefix();
                           {? SRDO.seek(_refdok)
                           || .delSRDZ();
                              SRDO.del()
                           ?};
                           SRDO.cntx_pop();
                           SRSR.cntx_pop()
                        ?};
:: usuwanie załączników do środka
                        exec('del_att','dok_fks',$SRSR.ref());
:: usuwanie podziałów controllingowych dla środka
                        .delKTRD(SRSR.ref());
:: usuwanie dokumentów specjalnych z podstawą amotyzacji degresywnej dla środków wprowadzonych do systemu
:: w trakcie eksploatacji
                        SRDO.cntx_psh();
                        SRDO.index('RODZAJ');
                        SRDO.prefix('X',$SRSR.ref(),);
                        {? SRDO.first() || SRDO.del() ?};
                        SRDO.cntx_pop();

                        _org_ref:=SRSR.ORG_REF;
                        _d_ref:=SRSR.uidref();
                        {? ~SRSR.del(1,1)
                        || _deleted:=0
                        ||
:: zapis informacji w globalnej tabeli zprzedaży środków w grupie kapitałowej
                           .clearSRSFIRMA(_org_ref,_d_ref)
                        ?}
                     || _deleted:=0
                     ?};
                     {? ~_deleted
                     || undo()
                     || {? _tree<>null || .rootUpdate(_tree) ?}
                     ?};
                  end()
               || _deleted:=0;
                  _komunikat:='Bieżący zapis jest zablokowany przez innego użytkownika\n'@
               ?};
               {? _deleted & _tree<>null
               || _root_ref:=_tree;
                  {? _zes_amokr<>null
                  || SRST.cntx_psh(); SRSR.cntx_psh(); OKRO_F.cntx_psh();
                     OKRO_F.prefix(); SRSR.prefix(); _rokam:=null;
                     {? OKRO_F.seek(_zes_amokr)
                     || _rokam:=OKRO_F.ROK
                     ?};
                     SRST.index('SROD');
                     {? SRSR.seek(_tree)
                     || _root_refa:=SRSR.ref()
                     || _root_refa:=null
                     ?};
                     SRST.prefix(_root_refa,_rokam,_zes_amokr);
                     {? SRST.first()
                     || SRST.SRSR();
                        .calcForSet()
                     ?};
                     SRST.cntx_pop(); SRSR.cntx_pop(); OKRO_F.cntx_pop()
                  ?}
               ?};
               {? ~_deleted
               || FUN.emsg(_komunikat+'Nie udało się usunąć wskazanego środka z rejestru.'@);
                  0
               || {? _CurRef & SRST.f_active() || SRST.f_seek(_CurRef)
                  |? _CurRef || SRST.seek(_CurRef)
                  ?};
                  1
               ?}
            ?}
         || {? SRST.GRP='E' || _txt:='elementu' || _txt:='środka' ?};
            FUN.info('Nie można usunąć wskazanego %1 (%2 - %3).\n\n'
                     'Środek lub element dla którego wprowadzono dokumenty, elementy, dofinansowanie,\n'
                     'informacje dodatkowe lub naliczono amortyzację nie może być usunięty.\n'
                     'Nie można także usunąć środka który jest pojazdem i występuje w kartotece pojazdów\n'
                     'oraz środka, który występuje jako zasób remontowy (obszar Zasoby).\n'
                     'Należy najpierw usunąć powiązania lub zlikwidować środek lub element dokumentem likwidacji.'@[_txt,SRST.NRI,SRST.NST]);
            0
         ?}
     "),

     obj_meth('delSRDZ',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: metoda usuwa wszystkie powiązania faktur zakupu z bieżącym dokumentem przyjęcia
::----------------------------------------------------------------------------------------------------------------------
         SRDZ.cntx_psh();
         SRDZ.index('SRDZ');
         SRDZ.prefix(SRDO.ref());
         {? SRDZ.first() || {! |? SRDZ.del() !} ?};
         SRDZ.cntx_pop()
     "),

     obj_meth('clearSRSFIRMA',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda po usunięciu środka nabytego wewnątrz grupy kapitałowej przywraca możliwość nabycia środka z grupy
::       _a - ref (uidref) oryginalnego środka, _b - ref (uidref) - dotychczasowego nowego środka
::----------------------------------------------------------------------------------------------------------------------
         SRSFIRMA.cntx_psh();
         SRSFIRMA.index('ORG');
         SRSFIRMA.prefix(_a,_b);
         {? SRSFIRMA.first()
         || SRSFIRMA.cntx_psh();
            SRSFIRMA.prefix();
            SRSFIRMA.DATA_D:=date(0,0,0);
            SRSFIRMA.SRSR_D:='';
            SRSFIRMA.PRZYJETO:='N';
            SRSFIRMA.put();
            SRSFIRMA.cntx_pop()
         ?};
         SRSFIRMA.cntx_pop()
     "),

     obj_meth('updateElementsPlan',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda aktualizuje elementy zestawu środków w module planów amortyzacji
::----------------------------------------------------------------------------------------------------------------------
         _tree:=SRSR.ref();
         BUFR.save();
         SRSR.cntx_psh();
         SRSR.index('TREE');
         SRSR.prefix(_tree);
         {? SRSR.first()
         || {! |?
               SRSR.JORG:=BUFR.get('JORG');
               SRSR.ODD:=BUFR.get('ODD');
               SRSR.GR:=BUFR.get('GR');
               SRSR.PRZYCHOD:=BUFR.get('PRZYCHOD');
               SRSR.MP:=BUFR.get('MP');
               SRSR.MF:=BUFR.get('MF');
               SRSR.MD:=BUFR.get('MD');
               SRSR.STAP:=BUFR.get('STAP');
               SRSR.STAF:=BUFR.get('STAF');
               SRSR.STAD:=BUFR.get('STAD');
               SRSR.WKP:=BUFR.get('WKP');
               SRSR.WKF:=BUFR.get('WKF');
               SRSR.WKD:=BUFR.get('WKD');
               SRSR.DPLP:=BUFR.get('DPLP');
               SRSR.DPLF:=BUFR.get('DPLF');
               SRSR.DPLD:=BUFR.get('DPLD');
               SRSR.KONPOD:=BUFR.get('KONPOD');
               SRSR.KONFIN:=BUFR.get('KONFIN');
               SRSR.KONDOD:=BUFR.get('KONDOD');
               SRSR.S:=BUFR.get('S');
               SRSR.SCH_SEZ:=BUFR.get('SCH_SEZ');
               SRSR.put();
               SRSR.next()
            !}
         ?};
         SRSR.cntx_pop()
     "),

     obj_meth('editAssetPlan',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda poprawia planowany środek (w planach amortyzacji)
::----------------------------------------------------------------------------------------------------------------------
         {? SRSP.AKCEPT='T'
         || FUN.emsg('Zaakceptowanych planów amortyzacji nie można modyfikować.'@);
            return()
         ?};

         {? SRSR.PLAN<>'T'
         || FUN.emsg('Środki rzeczywiste nie mogą być poprawianie w planach amortyzacji,\n'
                     'poprawianie dostępne jest tylko dla środków dodanych do planu amortyzacji\n'
                     'jako środki planowane do zakupu w zakresie czasowym planu.'@);
            return()
         ?};

         {? SRSP.r_lock(1,1)
         ||
            {? SRSR.r_lock(1,1)
            ||
               {? SRSR.R='T' || EDIT_ES.NISKO:='N'
               |? SRSR.R='N' || EDIT_ES.NISKO:='T'
               ?};

               SRD.TRYB:='E';
               EDIT_ES.R:=SRSR.R;
               __DEPT:=0;
               TAM.prefix();
               POMI.win_sel('WER');
               OSOBA.win_sel('SLO');
               SRDO.win_sel('WER');

               {? SRSR.GRP='E'
               || _tree:=SRSR.TREE;
                  SRSR.cntx_psh();
                  SRSR.prefix();
                  {? SRSR.seek(_tree,SRSR.name())
                  || EDIT_ES.SRSR:=SRSR.ref()
                  || EDIT_ES.SRSR:=null
                  ?};
                  SRSR.cntx_pop()
               || EDIT_ES.SRSR:=SRSR.ref()
               ?};

               _nat:=0;
               {? SRSR.GRP='E'
               || SRSR.cntx_psh();
                  {? EDIT_ES.SRSR=null
                  || FUN.emsg('Nie odnaleziono rekordu nadrzędnego. Nie można poprawić zapisu.'@);
                     SRSR.r_unlock();
                     SRSP.r_unlock();
                     SRSR.cntx_pop();
                     return()
                  || {? 1+EDIT_ES.SRSR().MF().T='N' || _nat:=1 ?}
                  ?};
                  SRSR.cntx_pop()
               ?};

               {? SRSR.GRP='N'
               || SRSR.win_edit('PLAN_'+EDIT_ES.R)
               |? SRSR.GRP='T'
               || SRSR.win_edit('PLAN_'+EDIT_ES.R+'G')
               |? SRSR.GRP='E'
               || {? _nat
                  || SRSR.win_edit('PLAN_'+EDIT_ES.R+'EN')
                  || SRSR.win_edit('PLAN_'+EDIT_ES.R+'E')
                  ?};
                  SRSR.cntx_psh();
                  EDIT_ES.Z_NRI:=EDIT_ES.SRSR().NRI;
                  EDIT_ES.Z_NST:=EDIT_ES.SRSR().NST;
                  SRSR.cntx_pop()
               ?};

               SRSR.hdr_edit();
               _title:=' : '+SRSR.NRI;
               SRSR.hdr_edit(_title);
               .setField();
               EDIT_ES.JORG:=SRSR.JORG().SYMBOL;
               SRSR.memo_get(,'OPIS',0);

               {? SRSR.edit(\"exec('chk_srsr','srodobj','EDIT',2)\")
               || .modRec();
                  SRSR.DK:=.AMOEndDate(SRSR.DE,SRSR.STAP,SRSR.WKP,1+SRSR.MP().T,SRSR.MP().MP,SRSR.MP().PL='0');
                  do();
                     {? SRSR.PLAN_NAL='T' || SRSR.PLAN_NAL:='N' ?};
                     {? SRSR.put()
                     || SRSR.memo_put(,'OPIS');
:: jeżeli zestaw to odświeżenie danych elementów
                        {? SRSR.GRP='T'
                        || .updateElementsPlan()
:: jeżeli element to odświeżenie danych wartościowych zestawu
                        |? SRSR.GRP='E'
                        || _t_ref:=SRSR.ref();
                           .updatePlan(SRSR.ref());
                           SRSR.cntx_psh();
                           SRSR.index('TREE');
                           SRSR.prefix(SRSR.TREE);
                           {? SRSR.first()
                           || {! |?
                                {? SRSR.ref()<>_t_ref
                                || .updatePlan(SRSR.ref())
                                ?};
                                SRSR.next()
                              !}
                           ?};
                           SRSR.cntx_pop();
                           .rootUpdatePlan(SRSR.TREE)
                        || .updatePlan(SRSR.ref())
                        ?}
                     ?};
                  end()
               ?};
               SRSR.r_unlock()
            || FUN.emsg('Bieżący środek jest zablokowany przez innego użytkownika.'@)
            ?};
            SRSP.r_unlock()
         || FUN.emsg('Plan amortyzacji zablokowany przez innego użytkownika.'@)
         ?}
     "),

     obj_meth('updatePlan',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda uaktualnia dane zwykłego planowanego środka lub elementu składowego (w planach amortyzacji)
::----------------------------------------------------------------------------------------------------------------------
         SRSR.cntx_psh();
         SRSR.prefix();
         {? SRSR.seek(_a,SRSR.name())
         || _ztree:=SRSR.TREE;
            {! _i:=SRSP.OD..SRSP.DO |!
               {? _i=SRSP.OKRO_F().RES & SRSP.OKRO_F().OES>1
               || _fmonth:=SRSP.OKRO_F().OES
               || _fmonth:=1
               ?};
               {! _j:=_fmonth..12 |!
                  SRST.cntx_psh(); SRSR.cntx_psh();
                  SRST.index('PODAT');
                  SRSR.prefix();
                  SRST.prefix(SRSR.ref(),_i,_j);
                  {? ~SRST.first() & (_i>SRSR.ROK | (_i=SRSR.ROK & _j>=SRSR.OKRES))
                  || SRST.blank();
                     SRST.SRSR:=SRSR.ref();
                     SRST.ROK:=_i;
                     SRST.OKRES:=_j;
                     _add:=1
                  || {? (_i>SRSR.ROK | (_i=SRSR.ROK & _j>=SRSR.OKRES))
                     || _add:=0
                     || _add:=-1
                     ?}
                  ?};
                  {? _add>=0
                  ||
:: wyszukuje węzeł drzewa w rejestrze stanów dla zestawu
                     _tree:=null;
                     {? _ztree<>0
                     || SRSR.cntx_psh();SRST.cntx_psh();
                        SRSR.prefix();
                        {? SRSR.seek(_ztree,SRSR.name())
                        || SRST.index('PODAT');
                           SRST.prefix(SRSR.ref(),_i,_j);
                           {? SRST.first() || _tree:=SRST.ref() ?}
                        ?};
                        SRSR.cntx_pop();SRST.cntx_pop()
                     ?};
                     .srst_from_srsr(_i,_j,_tree)
                  ?};

                  {? _add=1 || SRST.add()
                  |? _add=0 || SRST.put()
                  |? _add=-1 & SRST.size()>0
                  || SRSW.cntx_psh();
                     SRSW.index('SSRW');
                     SRSW.prefix(SRST.ref());
                     {? SRSW.first()
                     || {! |? SRSW.del() !}
                     ?};
                     SRSW.cntx_pop();
                     SRST.del()
                  ?};

:: weryfikacja czy są dokumenty, które należy uwzględnić w planach amortyzacji
                  {? _add>=0
                  || SRDO.cntx_psh();
                     {? SRSR.GRP='E'
                     || SRDO.index('DATA_E');
                        SRDO.prefix(SRSR.TREE,SRSR.ref())
                     || SRDO.index('DATA');
                        SRDO.prefix(SRSR.ref())
                     ?};
                     {? SRDO.first()
                     || {! |?
                           {? SRDO.ROK<SRST.ROK | (SRDO.ROK=SRST.ROK & SRDO.OKRES<=SRST.OKRES)
                           || .changeValue();
                              {? SRDO.Z='T' & (SRDO.ROK<SRST.ROK | (SRDO.ROK=SRST.ROK & SRDO.OKRES<SRST.OKRES))
                              || {? SRST.size()>0
                                 || SRSW.cntx_psh();
                                    SRSW.index('SSRW');
                                    SRSW.prefix(SRST.ref());
                                    {? SRSW.first()
                                    || {! |? SRSW.del() !}
                                    ?};
                                    SRSW.cntx_pop();
                                    SRST.del()
                                 ?}
                              ?}
                           ?};
                           SRDO.next()
                        !}
                     ?};
                     SRDO.cntx_pop()
                  ?};
:: obsługa metody naturalnej
                  {? 1+SRST.MF().T='N' & SRST.OKE>0
                  ||
:: jeżeli metoda liczy od następnego okresu to weryfikacja czy to nie pierwszy okres środka
                     {? ~(SRST.MF().MP=1 & (SRST.SRSR().ROK=SRST.ROK & SRST.SRSR().OKRES=SRST.OKRES))
                     || _suma:=exec('sum_zuz','fst','P',SRST.ROK,SRST.OKRES,0);
:: dla sezonowych planowane zużycie proporcjonalnie do liczby aktywnych okresów
                        {? SRST.S='T'
                        || {? .curMonth(SRST.ROK,SRST.OKRES,'F') & SRST.SCH_SEZ<>null & SRST.SCH_SEZ().LM>0
                           || SRST.PZUZ:=((SRST.MAX/SRST.OKE)*(12/SRST.SCH_SEZ().LM))$FINFO.DOKL
                           || SRST.PZUZ:=0
                           ?}
                        || SRST.PZUZ:=(SRST.MAX/SRST.OKE)$FINFO.DOKL
                        ?};
                        {? _suma+SRST.PZUZ>SRST.MAX || SRST.PZUZ:=(SRST.MAX-_suma)$FINFO.DOKL ?};
                        _licz_oke:=exec('oke_zuz','fst',SRST.ROK,SRST.OKRES);
                        {? _licz_oke>SRST.OKE
                        || SRST.AMOF:=0;
                           SRST.PZUZ:=0;
                           SRST.RZUZ:=0
                        |? _licz_oke=SRST.OKE
                        || {? _suma+SRST.PZUZ<SRST.MAX || SRST.PZUZ:=(SRST.PZUZ+(SRST.MAX-(_suma+SRST.PZUZ)))$FINFO.DOKL ?}
                        ?}
                     || SRST.PZUZ:=0
                     ?};
                     SRST.put()
                  ?};

                  SRST.cntx_pop(); SRSR.cntx_pop()
               !}
            !};
            {? SRSR.PLAN_NAL='T'
            || SRSR.PLAN_NAL:='N';
               SRSR.put()
            ?}
         ?};
         SRSR.cntx_pop()
     "),

     obj_meth('srst_from_srsr',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda pobiera dane do rekordu stanu z bieżącego bufora danych środka
::       _a - rok stanu (INT)
::       _b - okres stanu (INT)
::----------------------------------------------------------------------------------------------------------------------
         SRST.R:=SRSR.R;
         SRST.U_SR:=SRSR.U_SR;
         SRST.GRP:=SRSR.GRP;
         SRST.KIND:=SRSR.KIND;
         SRST.NRI:=SRSR.NRI;
         SRST.NST:=SRSR.NST;
         SRST.GR:=SRSR.GR;
         SRST.KONPOD:=SRSR.KONPOD;
         SRST.MP:=SRSR.MP;
         SRST.STAP:=SRSR.STAP;
         SRST.WKP:=SRSR.WKP;
         SRST.DPLP:=SRSR.DPLP;
         SRST.KONFIN:=SRSR.KONFIN;
         SRST.MF:=SRSR.MF;
         SRST.STAF:=SRSR.STAF;
         SRST.WKF:=SRSR.WKF;
         SRST.DPLF:=SRSR.DPLF;
         SRST.KONDOD:=SRSR.KONDOD;
         SRST.MD:=SRSR.MD;
         SRST.STAD:=SRSR.STAD;
         SRST.WKD:=SRSR.WKD;
         SRST.DPLD:=SRSR.DPLD;
         SRST.MAX:=SRSR.MAX;
         SRST.JM:=SRSR.JM;
         SRST.OKE:=SRSR.OKE;
         SRST.SCH_SEZ:=SRSR.SCH_SEZ;
         SRST.S:=SRSR.S;
         SRST.POM:=SRSR.POM;
         SRST.OSOBA:=SRSR.OSOBA;
         SRST.JORG:=SRSR.JORG;
         SRST.ODD:=SRSR.ODD;
         SRST.WARP:=SRSR.WARP;
         SRST.UMOP:=SRSR.UMOP;
         SRST.NETP:=SRSR.NETP;
         SRST.WARF:=SRSR.WARF;
         SRST.UMOF:=SRSR.UMOF;
         SRST.NETF:=SRSR.NETF;
         SRST.WARD:=SRSR.WARD;
         SRST.UMOD:=SRSR.UMOD;
         SRST.NETD:=SRSR.NETD;
         SRST.OSTATEK:=SRSR.OSTATEK;
         SRST.SRSR:=SRSR.ref();
         SRST.AMOP:=SRST.AMOF:=SRST.AMOD:=0;
         SRST.UMOP:=SRST.UMOF:=SRST.UMOD:=0;
         SRST.ROK:=_a;
         SRST.OKRES:=_b;
         SRST.NAL:='N';
         SRST.OKRO_F:=null;
         {? _>=3 & _c<>null || SRST.TREE:=_c ?}
     "),

     obj_meth('delAssetPlan',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa planowany środek z planu amortyzacji
::----------------------------------------------------------------------------------------------------------------------
         {? SRSP.AKCEPT='T'
         || FUN.emsg('Zaakceptowanych planów amortyzacji nie można modyfikować.'@);
            return()
         ?};

         {? SRSR.PLAN<>'T'
         || FUN.emsg('Rzeczywiste środki i elementy składowe nie mogą być usuwane z planu amortyzacji,\n'
                     'usuwanie dostępne jest tylko dla środków dodanych do planu amortyzacji\n'
                     'jako środki planowane do zakupu w zakresie czasowym planu.'@);
            return()
         ?};


         {? SRSR.GRP='T'
         || SRSR.cntx_psh();
            SRSR.index('TREE');
            SRSR.prefix(SRSR.ref());
            {? SRSR.first()
            || _elementy:=1
            || _elementy:=0
            ?};
            SRSR.cntx_pop();
            {? _elementy
            || FUN.emsg('Zestaw posiada elementy składowe, które należy usunąć przed usunięciem zestawu.'@);
               return()
            ?}
         ?};

         {? SRSR.GRP='E' || _what:='element składowy środka'@ || _what:='środek'@ ?};

         {? SRSP.r_lock(1,1,1)
         ||
            {? SRSR.r_lock(1,1,1)
            || {? ~FUN.ask('Usunąć %1 %2?'@[_what,SRSR.NRI]) || SRSR.r_unlock(); SRSP.r_unlock(); return() ?};
               SRSR.r_unlock();
               do();
:: dokumenty
                  SRDO.cntx_psh();
                  {? SRSR.GRP='E'
                  || SRDO.index('SRDOE');
                     SRDO.prefix(SRSR.TREE,SRSR.ref())
                  |? SRSR.GRP='N'
                  || SRDO.index('PODAT');
                     SRDO.prefix(SRSR.ref())
                  ?};
                  {? SRDO.first()
                  || {! |? SRDO.del() !}
                  ?};
                  SRDO.cntx_pop();
:: stany dla środków i zestawów
                  {? SRSR.GRP<>''
                  || SRST.cntx_psh();
                     SRST.index('PODAT');
                     SRST.prefix(SRSR.ref());
                     {? SRST.first()
                     || {! |?
                           SRSW.cntx_psh();
                           SRSW.index('SSRW');
                           SRSW.prefix(SRST.ref());
                           {? SRSW.first()
                           || {! |? SRSW.del() !}
                           ?};
                           SRSW.cntx_pop();
                           SRST.del()
                        !}
                     ?};
                     SRST.cntx_pop()
                  ?};
:: usuwanie środka
                  {? SRSR.GRP='E' || _root:=SRSR.TREE || _root:=null ?};
:: usuwanie podziałów controllingowych dla środka
                  .delKTRD(SRSR.ref());
                  {? ~SRSR.del(,1) || _del:=0 || _del:=1 ?};

                  {? ~_del
                  || undo()
                  ||
:: po usunięciu elementu odświeżenie
                     {? _root
                     || SRSR.cntx_psh();
                        SRSR.index('TREE');
                        SRSR.prefix(_root);
                        {? SRSR.first()
                        || {! |?
                             .updatePlan(SRSR.ref());
                             SRSR.next()
                           !}
                        ?};
                        SRSR.cntx_pop();
                        .rootUpdatePlan(_root)
                     ?}
                  ?};
               end()
            || FUN.emsg('Środek zablokowany przez innego użytkownkia.'@)
            ?};
            SRSP.r_unlock()
         || FUN.emsg('Plan amortyzacji zablokowany przez innego użytkownika.'@)
         ?}
     "),

   obj_meth('updateElements',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda uaktualnie dane elementów składowych zestawu
::   WE: [_a] - opcjonalne wskazanie na okres
::       [_b] - jeżeli _b i _b=2 to update po przejściu D->L
::----------------------------------------------------------------------------------------------------------------------
         _tree:=SRSR.ref();
         BUFR.save();
         SRSR.cntx_psh();
         SRSR.index('TREE');
         SRSR.prefix(_tree);
         {? SRSR.first()
         || {! |?
               {? ~(_>0 & type_of(_a)=type_of(null) & _a<>null)
               || SRSR.JORG:=BUFR.get('JORG');
                  SRSR.ODD:=BUFR.get('ODD');
                  SRSR.GR:=BUFR.get('GR');
                  SRSR.PRZYCHOD:=BUFR.get('PRZYCHOD');
                  SRSR.MP:=BUFR.get('MP');
                  SRSR.MF:=BUFR.get('MF');
                  SRSR.MD:=BUFR.get('MD');
                  SRSR.STAP:=BUFR.get('STAP');
                  SRSR.STAF:=BUFR.get('STAF');
                  SRSR.STAD:=BUFR.get('STAD');
                  SRSR.WKP:=BUFR.get('WKP');
                  SRSR.WKF:=BUFR.get('WKF');
                  SRSR.WKD:=BUFR.get('WKD');
                  SRSR.DPLP:=BUFR.get('DPLP');
                  SRSR.DPLF:=BUFR.get('DPLF');
                  SRSR.DPLD:=BUFR.get('DPLD');
                  SRSR.KONPOD:=BUFR.get('KONPOD');
                  SRSR.KONFIN:=BUFR.get('KONFIN');
                  SRSR.KONDOD:=BUFR.get('KONDOD');
                  SRSR.S:=BUFR.get('S');
                  SRSR.SCH_SEZ:=BUFR.get('SCH_SEZ');
                  SRSR.put()
               ?};
               {? _>=2
               || .updateRecState(_a,_b)
               |? _=1
               || .updateRecState(_a)
               || .updateRecState()
               ?};
               SRSR.next()
            !}
         ?};
         SRSR.cntx_pop()
   "),

   obj_meth('editAsset',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda umożliwia edycję danych bieżącego środka
::----------------------------------------------------------------------------------------------------------------------
         _srsr_rf:=null;
         SRD.TRYB:='E';
         __DEPT:=0;
         SRSR.prefix(); SRST.SRSR();
         {? .isEditable()
         || SRSR.prefix();
            SRST.SRSR();
            {? SRSR.U_SR='T' & SRSR.GRP='E' & (SRSR.KONPOD=null | SRSR.KONFIN=null)
            || FUN.emsg('Należy najpierw uzupełnić dane zestawu utworzonego w kartotece uproszczonej,\n'
                        'dopiero później można uzupełniać dane elementów zestawu.'@);
               return(0)
            ?};
            {? SRSR.r_lock(1,1,1)
            || {? SRSR.JORG<>null
               || EDIT_ES.JORG:=SRSR.JORG().SYMBOL
               || EDIT_ES.JORG:=''
               ?};
               TAM_DOD.cntx_psh();
               TAM_DOD.index('TAM_DOD');
               TAM_DOD.prefix(exec('firma','ustawienia'),SRSR.GR().ref());
               {? TAM_DOD.first()
               || _bnftt:=TAM_DOD.BNFTT
               || _bnftt:=null()
               ?};
               TAM_DOD.cntx_pop();
               EDIT_ES.BNFTT:=_bnftt;
               EDIT_ES.BENEFIT:={? _bnftt=null() || 'N' || 'T' ?};
               {? SRSR.P<>null
               || EDIT_ES.PRCNAZ:=SRSR.P().OSOBA().NAZWISKO;
                  SRDO_POM.PSTN:=SRSR.P().ST().ST;
                  SRDO_POM.PWYD:=SRSR.P().WYDZIAL().SYMBOL
               || EDIT_ES.PRCNAZ:='';
                  SRDO_POM.PSTN:='';
                  SRDO_POM.PWYD:=''
               ?};
               SRD.OKR_EWID:=SRSR.OKRO_F().POCZ;
               OSOBA.win_sel('SLO');
               {? SRSR.GRP='T'
               || SRSR.win_edit('RED_'+SRSR.R+'G')
               |? SRSR.GRP='E'
               || {? 1+SRSR.MF().T='N'
                  || SRSR.win_edit('RED_'+EDIT_ES.R+'E_N')
                  || SRSR.win_edit('RED_'+SRSR.R+'E')
                  ?};
                  SRSR.cntx_psh();
                  SRSR.index('TREE');
                  SRSR.prefix();
                  {? SRSR.seek(SRSR.TREE,SRSR.name())
                  || EDIT_ES.Z_NRI:=SRSR.NRI;
                     EDIT_ES.Z_NST:=SRSR.NST
                  ?};
                  SRSR.cntx_pop()
               || SRSR.win_edit('RED_'+SRSR.R)
               ?};
               SRSR.hdr_edit();
               _title:=' : '+SRSR.NRI;
               SRSR.hdr_edit(_title);
               .setField();
               SRSR.memo_get(,'OPIS');
               {? SRSR.edit(\"exec('chk_srsr','srodobj','EDIT')\")
               || .modRec();
                  SRSR.DK:=.AMOEndDate(SRSR.DE,SRSR.STAP,SRSR.WKP,1+SRSR.MP().T,SRSR.MP().MP,SRSR.MP().PL='0');
                  do();
                     {? SRSR.put()
                     || _srsr_rf:=SRSR.ref();
                        SRSR.memo_put(,'OPIS')
                     ?};
                     .updateRecState();
:: dla zestawów poprawianie własności, metod itp. w elementach składowych jeżeli takie są
                     {? SRSR.GRP='T'
                     || .updateElements()
::                   jeżeli element to odświeżenie danych wartościowych zestawu
                     |? SRSR.GRP='E'
                     || .rootUpdate(SRSR.TREE,SRSR.OKRO_F)
                     ?};
                  _end:=end();
                  {? _end=0 || _srsr_rf:=null ?}
               ?};
:: obowiązująca w bieżącym okresie klasyfikacja środków trwałych
               STER.KST:=exec('kst_obow','fst_kst',SSTALE.AO().RES,1);

               SRSR.r_unlock()
            || FUN.emsg('Bieżący zapis jest zablokowany przez innego użytkownika.'@);
               0
            ?}
         || {? SRSR.GRP='E' || _what:='elementu'
            |? SRSR.GRP='T' || _what:='zestawu'
            || _what:='środka'
            ?};
            {? PAR_SKID.get(201)='N'
            || FUN.info('Nie można poprawić wskazanego %1 (%2 %3).\n\n'
                        'Dane zapisu dla którego wprowadzono dokumenty, dofinansowanie, ulgi lub naliczono\n'
                        'amortyzację nie mogą być modyfikowane bezpośrednio. Należy wprowadzić dokument modyfikujący\n'
                        'wymagane dane.\nDane zapisu zlikwidowanego nie podlegają modyfkacjom.\n'
                        'Modyfikowalne jest jedynie pole Uwagi.'@[_what,SRST.NRI,SRST.NST]);
               _red:=exec('cr_u_red','srodobj');
               SRSR.win_edit(_red);
               {? SRSR.edit() ||  SRSR.put() ?};
               0
            || FUN.info('Dla wskazanego %1 (%2 %3) wprowadzono dokumenty, dofinansowanie, ulgi lub naliczono amortyzację.'
                        ' Wymagane dane należy zmieniać wprowadzając dokument modyfikujący.\n'
                        'Dane zapisu zlikwidowanego nie podlegają modyfkacjom.'@[_what,SRST.NRI,SRST.NST]);
               _red:=exec('create_red','srodobj');
               SRSR.win_edit(_red);
               {? SRSR.edit() || SRSR.memo_put(,'OPIS'); SRSR.put() ?}
            ?}
         ?};
         {? __DEPT=1
         || OPERATOR.DEPT:=null;
            __DEPT:=0
         ?};
         _srsr_rf
     "),

   obj_meth('showAsset',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda wyświetla bieżące dane środka
::----------------------------------------------------------------------------------------------------------------------
         SRST.SRSR();
         SRSR.memo_get(,'OPIS',0);
         {? SRST.R='S' || _r:=SRST.SRSR().R || _r:=SRST.R ?};
         SRST.win_edit('DISP_'+_r+{? SRST.GRP='T' || 'G' |? SRST.GRP='E' || 'E' || '' ?});

:: BEGIN obsługa środków sprzedanych w ramach grupy kapitałowej
         {? FINFO.SPR_GRP='T' || _enable:=1 || _enable:=0 ?};
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable,EDIT_ES,'GR_KAP');
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable,EDIT_ES,'F_GR_KAP');
         {? FINFO.SPR_GRP='T' & SRST.SRSR().ORG_REF<>''
         || _org_ref:=SRST.SRSR().ORG_REF;
            EDIT_ES.GR_KAP:='T';
            SRSR.cntx_psh();
            SRSR.prefix();
            {? SRSR.seek(_org_ref,ref_name(_org_ref))
            || EDIT_ES.F_GR_KAP:=SRSR.ODD().FIRMA().SYMBOL+' - '+SRSR.ODD().FIRMA().OPIS
            ?};
            SRSR.cntx_pop()
         || EDIT_ES.GR_KAP:='N';
            EDIT_ES.F_GR_KAP:=''
         ?};
:: END obsługa środków sprzedanych w ramach grupy kapitałowej

:: BEGIN obsługa pól związanych z amortyzacją jednorazową do 100 tys.
         {? SRSR.AMOR100='T' || _enable:=1 || _enable:=0 ?};
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable,SRSR,'WARP100');
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable,SRSR,'ZALP100');
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable,SRSR,'FREQ100');
:: END obsługa pól związanych z amortyzacją jednorazową do 100 tys.

:: BEGIN Środki będące samochodami osobowymi
         {? SRSR.SAMOCHOD='T' & SRSR.DE<>date(0,0,0) & SRSR.DE<date(2019,1,1) || _enable:=1 || _enable:=0 ?};
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable,SRSR,'KURS_EUR');
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable,SRSR,'EURO');
:: END Środki będące samochodami osobowymi

:: BEGIN Obsługa benefitów
         TAM_DOD.cntx_psh();
         TAM_DOD.index('TAM_DOD');
         TAM_DOD.prefix(exec('firma','ustawienia'),SRSR.GR().ref());
         {? TAM_DOD.first()
         || _bnftt:=TAM_DOD.BNFTT
         || _bnftt:=null()
         ?};
         TAM_DOD.cntx_pop();
         EDIT_ES.BNFTT:=_bnftt;
         EDIT_ES.BENEFIT:={? _bnftt=null() || 'N' || 'T' ?};
         SRDO_POM.PRC:=SRST.P;
         {? SRST.P<>null
         || EDIT_ES.PRCNAZ:=SRST.P().OSOBA().NAZWISKO;
            SRDO_POM.PSTN:=SRST.P().ST().ST;
            SRDO_POM.PWYD:=SRST.P().WYDZIAL().SYMBOL
         || EDIT_ES.PRCNAZ:='';
            SRDO_POM.PSTN:='';
            SRDO_POM.PWYD:=''
         ?};
         {? EDIT_ES.BENEFIT='T' || _enable:=1 || _enable:=0 ?};
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable+' editable='+$~_enable, EDIT_ES, 'BENEFIT');
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable, EDIT_ES, 'PRCNAZ');
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable, SRDO_POM, 'PSTN');
         SRST.efld_opt(SRST.win_edit('?'), 'enable='+$_enable, SRDO_POM, 'PWYD');
         SRST.efld_opt(SRST.win_edit('?'), 'editable='+$~_enable,, 'OSOBA');
:: END Obsługa benefitów

         SRST.hdr_edit();
         {? SRST.R='T' | (SRST.R='S' & SRST.SRSR().R='T')
         || {? SRST.GRP='T'
            || _rodzaj:=' trwałych'
            || _rodzaj:=' trwałego'
            ?}
         |? SRST.R='N' | (SRST.R='S' & SRST.SRSR().R='N')
         || {? SRST.GRP='T'
            || _rodzaj:=' niskocennych'
            || _rodzaj:=' niskocennego'
            ?}
         ?};
         {? (SRST.R='T' | (SRST.R='S' & SRST.SRSR().R='T')) & SRST.S='T' & SRST.SCH_SEZ<>null
         || EDIT_ES.M1:=SRST.SCH_SEZ().M1;
            EDIT_ES.M2:=SRST.SCH_SEZ().M2;
            EDIT_ES.M3:=SRST.SCH_SEZ().M3;
            EDIT_ES.M4:=SRST.SCH_SEZ().M4;
            EDIT_ES.M5:=SRST.SCH_SEZ().M5;
            EDIT_ES.M6:=SRST.SCH_SEZ().M6;
            EDIT_ES.M7:=SRST.SCH_SEZ().M7;
            EDIT_ES.M8:=SRST.SCH_SEZ().M8;
            EDIT_ES.M9:=SRST.SCH_SEZ().M9;
            EDIT_ES.M10:=SRST.SCH_SEZ().M10;
            EDIT_ES.M11:=SRST.SCH_SEZ().M11;
            EDIT_ES.M12:=SRST.SCH_SEZ().M12
         || EDIT_ES.M1:='N';
            EDIT_ES.M2:='N';
            EDIT_ES.M3:='N';
            EDIT_ES.M4:='N';
            EDIT_ES.M5:='N';
            EDIT_ES.M6:='N';
            EDIT_ES.M7:='N';
            EDIT_ES.M8:='N';
            EDIT_ES.M9:='N';
            EDIT_ES.M10:='N';
            EDIT_ES.M11:='N';
            EDIT_ES.M12:='N'
         ?};
         _hdr:='%1 w okresie: %2 %3'@[_rodzaj,SRST.OKRO_F().NAZ,SRST.OKRO_F().ROK().NAZ];
         SRST.hdr_edit(_hdr);
         SRST.display();
         SRST.hdr_edit()
     "),

   obj_meth('showEarlyAsset',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda wyświetla pierwotne dane środka
::----------------------------------------------------------------------------------------------------------------------
         SRSR.memo_get(,'OPIS',0);
         {? (5+SRSR.name())+1='r' || _red:='RED' || _red:='PLAN' ?};
         {? SRSR.R='T' & SRSR.GRP='N'
         || SRSR.win_edit(_red+'_T')
         |? SRSR.R='T' & SRSR.GRP='T'
         || SRSR.win_edit(_red+'_TG')
         |? SRSR.R='N' & SRSR.GRP='N'
         || SRSR.win_edit(_red+'_N')
         |? SRSR.R='N' & SRSR.GRP='T'
         || SRSR.win_edit(_red+'_NG')
         |? SRSR.R='T' & SRSR.GRP='E' & 1+SRSR.MF().T='N'
         || SRSR.win_edit({? _red='RED' || _red+'_TE_N' || _red+'_TEN' ?})
         |? SRSR.R='T' & SRSR.GRP='E'
         || SRSR.win_edit(_red+'_TE')
         |? SRSR.R='N' & SRSR.GRP='E'
         || SRSR.win_edit(_red+'_NE')
         ?};
         {? SRSR.R='T' || .setField() ?};
         EDIT_ES.JORG:=SRSR.JORG().SYMBOL;
         {? SRSR.GRP='E'
         || SRSR.cntx_psh();
            SRSR.prefix();
            {? SRSR.seek(SRSR.TREE,SRSR.name())
            || EDIT_ES.Z_NRI:=SRSR.NRI;
               EDIT_ES.Z_NST:=SRSR.NST
            || EDIT_ES.Z_NRI:=EDIT_ES.Z_NST:=''
            ?};
            SRSR.cntx_pop()
         ?};
         SRSR.display()
     "),

   obj_meth('showSimpleAsset',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda wyświetla dane bieżącego środka w kartotece uproszczonej
::----------------------------------------------------------------------------------------------------------------------
         SRST.SRSR();
         SRSR.memo_get(,'OPIS',0);
         SRST.win_edit('DISP_U');
         SRST.hdr_edit();
         _hdr:=' w okresie: %1 %2'@[SRST.OKRO_F().NAZ,SRST.OKRO_F().ROK().NAZ];
         SRST.hdr_edit(_hdr);
         {? SRST.R='T'
         || SRST.efld_opt('DISP_U', 'enable=1',SRSR, 'SAMOCHOD')
         || SRST.efld_opt('DISP_U', 'enable=0',SRSR, 'SAMOCHOD')
         ?};
         SRST.display();
         SRST.hdr_edit()
     "),

   obj_meth('updateValueComp',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda dodaje lub uzupełnia składnik wartości dla bieżącego rekordu stanu
::       _a - wskazanie na rekord stanu (SRST.ref)
::----------------------------------------------------------------------------------------------------------------------
         SRSW.cntx_psh();
         SRST.cntx_psh();
         SRZF.cntx_psh();
         SRSW.index('SSRW');
         SRSW.prefix();
         {? ~SRSW.find_key(_a,'W')
         || SRSW.blank();
            SRSW.SRST:=_a;
            SRSW.ROK_F:=SRSW.SRST().ROK_F;
            SRSW.OKRO_F:=SRSW.SRST().OKRO_F;
            SRSW.TYP:='W';
            _add:=1
         || _add:=0
         ?};
         {? _a<>SRST.ref()
         || SRST.prefix();
            {? SRST.seek(_a, SRST.name()) || _find:=1 || _find:=0 ?}
         || _find:=1
         ?};
         {? _find
         || SRSW.WARP:=SRST.WARP; SRSW.UMOP:=SRST.UMOP; SRSW.AMOP:=SRST.AMOP; SRSW.NETP:=SRST.NETP;
            SRSW.WARF:=SRST.WARF; SRSW.UMOF:=SRST.UMOF; SRSW.AMOF:=SRST.AMOF; SRSW.NETF:=SRST.NETF;
            SRSW.WARD:=SRST.WARD; SRSW.UMOD:=SRST.UMOD; SRSW.AMOD:=SRST.AMOD; SRSW.NETD:=SRST.NETD;
            SRSW.KONPOD:=SRST.KONPOD;
            SRSW.KONFIN:=SRST.KONFIN;
            SRSW.KONDOD:=SRST.KONDOD;
            {? SRSW.TYP='W' || SRSW.OPIS:='Własny'
            |? SRSW.TYP='D' || SRSW.OPIS:='Dofinansowanie'
            |? SRSW.TYP='U' || SRSW.OPIS:='Ulga'
            ?};
            {? _add || SRSW.add() || SRSW.put() ?};
:: dofinansowania lub ulgi
            SRZF.index('SRODEK');
            SRZF.prefix(SRST.SRSR);
            {? SRZF.first()
            || {! |?
                  {? SRZF.OKRO_F().POCZ<=SRST.OKRO_F().POCZ
                  || SRSW.index('DOFIN');
                     SRSW.prefix(SRST.ref(),SRZF.ref());
                     {? ~SRSW.first()
                     || SRSW.blank();
                        SRSW.SRST:=SRST.ref();
                        SRSW.ROK_F:=SRSW.SRST().ROK_F;
                        SRSW.OKRO_F:=SRSW.SRST().OKRO_F;
                        SRSW.SRZF:=SRZF.ref();
                        SRSW.TYP:=SRZF.TYP;
                        SRSW.add()
                     ?};

                     SRSW.WARP:=SRZF.WARP_P; SRSW.UMOP:=SRZF.WARP_P-SRZF.WARP; SRSW.NETP:=0; SRSW.AMOP:=0;
                     SRSW.WARF:=SRZF.WARP_P; SRSW.UMOF:=SRZF.WARP_P-SRZF.WARF; SRSW.NETF:=0; SRSW.AMOF:=0;
                     {? FINFO.TOR_D='T'
                     || SRSW.WARD:=SRZF.WARP_P; SRSW.UMOD:=SRZF.WARP_P-SRZF.WARD; SRSW.AMOD:=0; SRSW.NETD:=0
                     ?};
                     SRSW.KONPOD:=SRZF.KONPOD;
                     SRSW.KONFIN:=SRZF.KONFIN;
                     SRSW.KONDOD:=SRZF.KONDOD;

                     {? SRSW.TYP='W' || SRSW.OPIS:='Własny'
                     |? SRSW.TYP='D' || SRSW.OPIS:='Dofinansowanie'
                     |? SRSW.TYP='U' || SRSW.OPIS:='Ulga'
                     ?};
                     SRSW.put();

:: dokumenty zmieniające właściwości dofinansowania lub ulgi
                     {? SRSW.TYP='D' | SRSW.TYP='U'
                     || SRDO.cntx_psh();
                        SRDO.index('SRODZAJD');
                        SRDO.prefix(SRSR.ref(),'D',SRZF.ref());
                        {? SRDO.first()
                        || {! |?
                              {? SRDO.OKRO_F().KON<=SRSW.OKRO_F().KON
                              || SRSW.KONPOD:=SRDO.KONPOD;
                                 SRSW.KONFIN:=SRDO.KONFIN;
                                 SRSW.KONDOD:=SRDO.KONDOD;
                                 SRSW.put()
                              ?};
                              SRDO.next()
                           !}
                        ?};
                        SRDO.cntx_pop()
                     ?}
                  ||
:: jeżeli dofinansowanie/ulga po poprawieniu zaczyna obowiązywać później to należy usunąć wcześniejsze
:: zapisy w składnikach wartości
                     SRSW.index('DOFIN');
                     SRSW.prefix(SRST.ref(),SRZF.ref());
                     {? SRSW.first() || SRSW.del() ?}
                  ?};
                  SRZF.next()
               !};
:: jeżeli są dofinansowania lub ulgi to modyfikacja wartości własnej
:: dofinansowania i umorzenia
               SRSW.cntx_psh();
               SRSW.index('SSRW');
               SRSW.prefix(SRST.ref(),'D');
               _warp:=_warf:=_ward:=0;
               _umop:=_umof:=_umod:=0;
               {? SRSW.first()
               || {! |?
                     _warp+=SRSW.WARP; _warf+=SRSW.WARF; _ward+=SRSW.WARD;
                     _umop+=SRSW.UMOP; _umof+=SRSW.UMOF; _umod+=SRSW.UMOD;
                     SRSW.next()
                  !}
               ?};
:: ulgi
               SRSW.prefix(SRST.ref(),'U');
               {? SRSW.first()
               || {! |?
                     _warp+=SRSW.WARP; _warf+=SRSW.WARF; _ward+=SRSW.WARD;
                     _umop+=SRSW.UMOP; _umof+=SRSW.UMOF; _umod+=SRSW.UMOD;
                     SRSW.next()
                  !}
               ?};
               SRSW.prefix(SRST.ref(),'W');
               {? SRSW.first()
               || SRSW.WARP:=(SRSW.WARP-_warp)$FINFO.DOKL;
                  SRSW.WARF:=(SRSW.WARF-_warf)$FINFO.DOKL;
                  SRSW.WARD:=(SRSW.WARD-_ward)$FINFO.DOKL;

:: jeżeki powyższa korekta zmniejsza wartość własną <0 (np. w trakcie użytkownia środka
:: dodano koretkę ujemną na kwotę większą od tej stanowiącej wartość własną) to należy
:: wartość własną wyzerować a różnicą obciążyć składniki ulg i dofinansowań.
                  _r_warp:=_r_warf:=_r_ward:=0;
                  {? SRSW.WARP<0 || _r_warp:=(-1)*SRSW.WARP; SRSW.WARP+=_r_warp ?};
                  {? SRSW.WARF<0 || _r_warf:=(-1)*SRSW.WARF; SRSW.WARF+=_r_warf ?};
                  {? SRSW.WARD<0 || _r_ward:=(-1)*SRSW.WARD; SRSW.WARD+=_r_ward ?};

::                  SRSW.UMOP:=.cumulativeComp('AMOP');
::                  SRSW.UMOF:=.cumulativeComp('AMOF');
::                  SRSW.UMOD:=.cumulativeComp('AMOD');

                  SRSW.UMOP:=(SRSW.UMOP-_umop)$FINFO.DOKL;
                  SRSW.UMOF:=(SRSW.UMOF-_umof)$FINFO.DOKL;
                  SRSW.UMOD:=(SRSW.UMOD-_umod)$FINFO.DOKL;

                  SRSW.put();
                  {? _r_warp | _r_warf | _r_ward
                  || SRSW.prefix(SRST.ref());
                     {? SRSW.last() & SRSW.size()>1
                     || _mniej_p:=_mniej_f:=_mniej_d:=0;
                        _licznik:=0;
                        {! |?
                           _licznik+=1;
                           {? SRSW.TYP<>'W'
                           || {? _warp<>0
                              || _mniej_p+=((SRSW.WARP/_warp)*_r_warp)$FINFO.DOKL;
                                 SRSW.WARP-=((SRSW.WARP/_warp)*_r_warp)$FINFO.DOKL
                              ?};
                              {? _warf<>0
                              || _mniej_f+=((SRSW.WARF/_warf)*_r_warf)$FINFO.DOKL;
                                 SRSW.WARF-=((SRSW.WARF/_warf)*_r_warf)$FINFO.DOKL
                              ?};
                              {? _ward<>0
                              || _mniej_d+=((SRSW.WARD/_ward)*_r_ward)$FINFO.DOKL;
                                 SRSW.WARD-=((SRSW.WARD/_ward)*_r_ward)$FINFO.DOKL
                              ?}
                           ?};
:: ostatni rekord w pętli - wyrównanie jeżeli nie rozliczono całej wartości _r_warp
                           {? SRSW.TYP<>'W' & _licznik=SRSW.size()
                              & (_mniej_p<>_r_warp | _mniej_f<>_r_warf | _mniej_d<>_r_ward)
                           || SRSW.WARP-=_r_warp-_mniej_p;
                              SRSW.WARF-=_r_warf-_mniej_f;
                              SRSW.WARD-=_r_ward-_mniej_d
                           ?};
                           {? SRSW.TYP<>'W' || SRSW.put() ?};
                           SRSW.prev()
                        !}
                     ?}
                  ?}
               ?};
               SRSW.cntx_pop()
            ?}
         ?};
         SRZF.cntx_pop();
         SRST.cntx_pop();
         SRSW.cntx_pop()
     "),

   obj_meth('actualProc',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: zwraca procent wartości biezacego składnika w stosunku do sumy wszystkich nieumorzonych składnikow
::   WE: _a - tor amortyzacji 'P', 'F', 'D'
::----------------------------------------------------------------------------------------------------------------------
         _wy:=0;
         _wy:={? _a='P' || SRSW.WARP/SRSW.SRST().WARP
              |? _a='F' || SRSW.WARF/SRSW.SRST().WARF
              |? _a='D' || SRSW.WARD/SRSW.SRST().WARD
              ?};
         _wy
   "),

   obj_meth('updateCalcComp',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: jeżeli jest naliczona amortyzacja to przeliczenie amortyzacji i umorzenia dla składników
::----------------------------------------------------------------------------------------------------------------------
         {? SRST.NAL='T'
         || SRSW.index('SSRW');
            SRSW.prefix(SRST.ref());
            _s_amop:=_s_umop:=_s_netp:=0;
            _s_amof:=_s_umof:=_s_netf:=0;
            _s_amod:=_s_umod:=_s_netd:=0;
            {? SRSW.first()
            || {! |?
                  {? SRST.WARP>0
                  || {? 1+SRST.MP().T='D'
                     || _p2:=.PodstDegrPod();
                        {? SRSW.OKRO_F().RES=SRST.SRSR().OKRO_F().RES
                        || _p1:=SRSW.WARP
                        || _p1:=exec('get_srsw_val','fst',SRSW.SRZF,SRSW.OKRO_F().RES,'NETP');
                           {? _p1=0 & SRSW.TYP<>'W'
                           || _p1:=(SRSW.WARP-SRSW.UMOP)
                           ?}
                        ?};
                        {? _p2<>0 || _proc:=_p1/_p2 || _proc:=0 ?}
                     || _proc:=.actualProc('P')
                     ?}
                  || _proc:=0
                  ?};
                  SRSW.AMOP:=(SRST.AMOP*_proc)$FINFO.DOKL;
                  {? SRSW.TYP<>'W'
                  || _sump:=exec('sum_srsw_amor','fst',SRSW.SRZF,SRSW.OKRO_F().RES,SRSW.OKRO_F().OES,'P');
:: jeżeli dofinansowanie było w momencie wprowadzenia częściowo rozliczone
                     _sump+=SRSW.SRZF().WARP_P-SRSW.SRZF().WARP;
:: korekta jeżeli obniżono wartość umorzenia np. dokumentem K-
                     {? (_sump+SRSW.AMOP)>SRST.UMOP || _sump:=SRST.UMOP-SRST.AMOP ?};

                     {? (_sump+SRSW.AMOP)$FINFO.DOKL>SRSW.WARP || SRSW.AMOP:=(SRSW.WARP-_sump)$FINFO.DOKL ?};
                     SRSW.UMOP:=(_sump+SRSW.AMOP)$FINFO.DOKL;
                     SRSW.NETP:=(SRSW.WARP-SRSW.UMOP)$FINFO.DOKL
                  || SRSW.UMOP:=(SRST.UMOP*_proc)$FINFO.DOKL;
                     SRSW.NETP:=(SRST.NETP*_proc)$FINFO.DOKL
                  ?};
                  {? SRST.WARF>0
                  || {? 1+SRST.MF().T='D'
                     || _p2:=.PodstDegrFin();
                        {? SRSW.OKRO_F().RES=SRST.SRSR().OKRO_F().RES
                        || _p1:=SRSW.WARF
                        || _p1:=exec('get_srsw_val','fst',SRSW.SRZF,SRSW.OKRO_F().RES,'NETF');
                           {? _p1=0 & SRSW.TYP<>'W'
                           || _p1:=(SRSW.WARF-SRSW.UMOF)
                           ?}
                        ?};
                        {? _p2<>0 || _proc:=_p1/_p2 || _proc:=0 ?}
                     || _proc:=.actualProc('F')
                     ?}
                  || _proc:=0
                  ?};
                  SRSW.AMOF:=(SRST.AMOF*_proc)$FINFO.DOKL;
                  {? SRSW.TYP<>'W'
                  || _sump:=exec('sum_srsw_amor','fst',SRSW.SRZF,SRSW.OKRO_F().RES,SRSW.OKRO_F().OES,'F');
:: jeżeli dofinansowanie było w momencie wprowadzenia częściowo rozliczone
                     _sump+=SRSW.SRZF().WARP_P-SRSW.SRZF().WARF;
:: koretka jeżeli obniżono wartość umorzenia np. dokumentem K-
                     {? (_sump+SRSW.AMOF)>SRST.UMOF || _sump:=SRST.UMOF-SRST.AMOF ?};

                     {? (_sump+SRSW.AMOF)$FINFO.DOKL>SRSW.WARF || SRSW.AMOF:=(SRSW.WARF-_sump)$FINFO.DOKL ?};
                     SRSW.UMOF:=(_sump+SRSW.AMOF)$FINFO.DOKL;
                     SRSW.NETF:=(SRSW.WARF-SRSW.UMOF)$FINFO.DOKL
                  || SRSW.UMOF:=(SRST.UMOF*_proc)$FINFO.DOKL;
                     SRSW.NETF:=(SRST.NETF*_proc)$FINFO.DOKL
                  ?};
                  {? FINFO.TOR_D='T'
                  || {? SRST.WARD>0
                     || {? 1+SRST.MD().T='D'
                        || _p2:=.PodstDegrDod();
                           {? SRSW.OKRO_F().RES=SRST.SRSR().OKRO_F().RES
                           || _p1:=SRSW.WARD;
                              OKRO_F.cntx_psh();
                              {? SRSW.TYP<>'W' & SRSW.SRZF().OKRO_F().RES=SRSW.OKRO_F().RES
                              || _w:=exec('sum_srsw_do','fst',SRSW.SRST().SRSR,'W',SRSW.SRZF().OKRO_F().RES, SRSW.SRZF().OKRO_F().OES,'D');
                                 _p2-=_w
                              ?};
                              OKRO_F.cntx_pop()
                           || _p1:=exec('get_srsw_val','fst',SRSW.SRZF,SRSW.OKRO_F().RES,'NETD')
                           ?};
                           {? _p2<>0 || _proc:=_p1/_p2 || _proc:=0 ?}
                        || _proc:=.actualProc('D')
                        ?}
                     || _proc:=0
                     ?};
                     SRSW.AMOD:=(SRST.AMOD*_proc)$FINFO.DOKL;
                     {? SRSW.TYP<>'W'
                     || _sump:=exec('sum_srsw_amor','fst',SRSW.SRZF,SRSW.OKRO_F().RES,SRSW.OKRO_F().OES,'D');
:: jeżeli dofinansowanie było w momencie wprowadzenia częściowo rozliczone
                        _sump+=SRSW.SRZF().WARP_P-SRSW.SRZF().WARD;
:: korekta jeżeli obniżono wartość umorzenia np. dokumentem K-
                        {? (_sump+SRSW.AMOD)>SRST.UMOD || _sump:=SRST.UMOD-SRST.AMOD ?};

                        {? (_sump+SRSW.AMOD)$FINFO.DOKL>SRSW.WARD || SRSW.AMOD:=(SRSW.WARD-_sump)$FINFO.DOKL ?};
                        SRSW.UMOD:=(_sump+SRSW.AMOD)$FINFO.DOKL;
                        SRSW.NETD:=(SRSW.WARD-SRSW.UMOD)$FINFO.DOKL
                     || SRSW.UMOD:=(SRST.UMOD*_proc)$FINFO.DOKL;
                        SRSW.NETD:=(SRST.NETD*_proc)$FINFO.DOKL
                     ?}
                  ?};
                  SRSW.put();
                  _s_amop+=SRSW.AMOP; _s_umop+=SRSW.UMOP; _s_netp+=SRSW.NETP;
                  _s_amof+=SRSW.AMOF; _s_umof+=SRSW.UMOF; _s_netf+=SRSW.NETF;
                  _s_amod+=SRSW.AMOD; _s_umod+=SRSW.UMOD; _s_netd+=SRSW.NETD;
                  SRSW.next()
               !};

:: weryfikacja czy nie przekroczono wartości dofinansowania;
:: uzupełnienie znaczników w dofinansowaniu jeżeli rozliczono całkowicie
               SRSW.prefix(SRST.ref(),'D');
               {? SRSW.first()
               || {! |?

                     SRZF.cntx_psh(); OKRO_F.cntx_psh();
                     SRZF.prefix();
                     SRSW.SRZF();
                     _zapis:=0; _dataroz:=SRST.OKRO_F().KON;
                     {? SRSW.NETP<=0 & SRZF.ROZP<>'T'
                     || SRZF.ROZP:='T';
                        SRZF.DATA_ZP:=_dataroz;
                        _zapis:=1
                     ?};
                     {? SRSW.NETF<=0 & SRZF.ROZF<>'T'
                     || SRZF.ROZF:='T';
                        SRZF.DATA_ZF:=_dataroz;
                        _zapis:=1
                     ?};
                     {? FINFO.TOR_D='T'
                     || {? SRSW.NETD<=0 & SRZF.ROZD<>'T'
                        || SRZF.ROZD:='T';
                           SRZF.DATA_ZD:=_dataroz;
                           _zapis:=1
                        ?}
                     ?};
                     {? _zapis || SRZF.put() ?};
                     SRZF.cntx_pop(); OKRO_F.cntx_pop();

                     _change:=0;
                     {? SRSW.UMOP>SRSW.WARP
                     || _diff:=SRSW.UMOP-SRSW.WARP;
                        SRSW.AMOP:=SRSW.AMOP-_diff;
                        SRSW.UMOP:=SRSW.UMOP-_diff;
                        SRSW.NETP:=SRSW.NETP+_diff;
                        _change:=1
                     ?};
                     {? SRSW.UMOF>SRSW.WARF
                     || _diff:=SRSW.UMOF-SRSW.WARF;
                        SRSW.AMOF:=SRSW.AMOF-_diff;
                        SRSW.UMOF:=SRSW.UMOF-_diff;
                        SRSW.NETF:=SRSW.NETF+_diff;
                        _change:=1
                     ?};
                     {? FINFO.TOR_D='T' & SRSW.UMOD>SRSW.WARD
                     || _diff:=SRSW.UMOD-SRSW.WARD;
                        SRSW.AMOD:=SRSW.AMOD-_diff;
                        SRSW.UMOD:=SRSW.UMOD-_diff;
                        SRSW.NETD:=SRSW.NETD+_diff;
                        _change:=1
                     ?};
                     {? _change || SRSW.put() ?};
                     SRSW.next()
                  !}
               ?};
:: wyrównanie zaokrągleń
               _r_amop:=(SRST.AMOP-_s_amop)$FINFO.DOKL;
               _r_umop:=(SRST.UMOP-_s_umop)$FINFO.DOKL;
               _r_netp:=(SRST.NETP-_s_netp)$FINFO.DOKL;
               _r_amof:=(SRST.AMOF-_s_amof)$FINFO.DOKL;
               _r_umof:=(SRST.UMOF-_s_umof)$FINFO.DOKL;
               _r_netf:=(SRST.NETF-_s_netf)$FINFO.DOKL;
               _r_amod:=(SRST.AMOD-_s_amod)$FINFO.DOKL;
               _r_umod:=(SRST.UMOD-_s_umod)$FINFO.DOKL;
               _r_netd:=(SRST.NETD-_s_netd)$FINFO.DOKL;
               {? _r_amop | _r_umop | _r_netp | _r_amof | _r_umof | _r_netf | _r_amod | _r_umod | _r_netd
               || SRSW.prefix(SRST.ref(),'W');
                  {? SRSW.first() & (SRSW.WARP>0 | SRSW.WARF>0 | (FINFO.TOR_D='T' & SRSW.WARD>0))
                  || SRSW.AMOP:=(SRSW.AMOP+_r_amop)$FINFO.DOKL;
                     SRSW.UMOP:=(SRSW.UMOP+_r_umop)$FINFO.DOKL;
                     SRSW.NETP:=(SRSW.NETP+_r_netp)$FINFO.DOKL;
                     SRSW.AMOF:=(SRSW.AMOF+_r_amof)$FINFO.DOKL;
                     SRSW.UMOF:=(SRSW.UMOF+_r_umof)$FINFO.DOKL;
                     SRSW.NETF:=(SRSW.NETF+_r_netf)$FINFO.DOKL;
                     SRSW.AMOD:=(SRSW.AMOD+_r_amod)$FINFO.DOKL;
                     SRSW.UMOD:=(SRSW.UMOD+_r_umod)$FINFO.DOKL;
                     SRSW.NETD:=(SRSW.NETD+_r_netd)$FINFO.DOKL;
                     SRSW.put()
                  || SRSW.prefix(SRST.ref());
                     _max:=0; _tmpref:=null;
                     {! |?
                        {? SRSW.WARP>_max
                        || _max:=SRSW.WARP; _tmpref:=SRSW.ref()
                        ?};
                        SRSW.next()
                     !};
                     {? _tmpref<>null & SRSW.seek(_tmpref)
                     || SRSW.AMOP:=(SRSW.AMOP+_r_amop)$FINFO.DOKL;
                        SRSW.UMOP:=(SRSW.UMOP+_r_umop)$FINFO.DOKL;
                        SRSW.NETP:=(SRSW.NETP+_r_netp)$FINFO.DOKL;
                        SRSW.AMOF:=(SRSW.AMOF+_r_amof)$FINFO.DOKL;
                        SRSW.UMOF:=(SRSW.UMOF+_r_umof)$FINFO.DOKL;
                        SRSW.NETF:=(SRSW.NETF+_r_netf)$FINFO.DOKL;
                        SRSW.AMOD:=(SRSW.AMOD+_r_amod)$FINFO.DOKL;
                        SRSW.UMOD:=(SRSW.UMOD+_r_umod)$FINFO.DOKL;
                        SRSW.NETD:=(SRSW.NETD+_r_netd)$FINFO.DOKL;
                        SRSW.put()
                     ?}
                  ?}
               ?};
:: jeżeli w biezącym okresie umorzono całą wartość środka to należy sprawdzić
:: czy umorzono całe dofinansowanie

               {? SRST.UMOP=SRST.WARP
               || SRSW.prefix(SRST.ref(),'W');
                  {? SRSW.first() & SRSW.NETP<0
                  || _rozlicz:=-SRSW.NETP;
                     SRSW.prefix(SRST.ref());
                     {? SRSW.first()
                     || {! |?
                           {? SRSW.TYP<>'W' & _rozlicz>0
                           || {? SRSW.NETP>0
                              || _rozlicz-=SRSW.NETP;
                                 SRSW.UMOP+=SRSW.NETP;
                                 SRSW.AMOP+=SRSW.NETP;
                                 SRSW.NETP:=0;
:: zapis rozliczenia dofinansowania
                                 SRZF.cntx_psh(); OKRO_F.cntx_psh();
                                 SRZF.prefix();
                                 SRSW.SRZF();
                                 SRZF.ROZP:='T';
                                 SRZF.DATA_ZP:=SRST.OKRO_F().KON;
                                 SRZF.put();
                                 SRZF.cntx_pop(); OKRO_F.cntx_pop();

                                 SRSW.put()
                              ?}
                           |? SRSW.TYP='W'
                           || SRSW.UMOP+=SRSW.NETP;
                              SRSW.NETP:=0;
                              SRSW.put()
                           ?};
                           SRSW.next()
                        !}
                     ?}
                  ?};
:: jeżeli nierozliczone do końca dofinansowania
                  SRSW.prefix(SRST.ref());
                  {? SRSW.first()
                  || {! |?
                        {? SRSW.TYP<>'W'
                        || {? SRSW.UMOP<SRSW.WARP
                           || SRSW.AMOP+=(SRSW.WARP-SRSW.UMOP);
                              SRSW.UMOP:=SRSW.WARP;
                              SRSW.put()
                           ?};
                           SRSW.next()
                        ?}
                     !}
                  ?}
               ?};
               {? SRST.UMOF=SRST.WARF
               || SRSW.prefix(SRST.ref(),'W');
                  {? SRSW.first() & SRSW.NETF<0
                  || _rozlicz:=-SRSW.NETF;
                     SRSW.prefix(SRST.ref());
                     {? SRSW.first()
                     || {! |?
                           {? SRSW.TYP<>'W' & _rozlicz>0
                           || {? SRSW.NETF>0
                              || _rozlicz-=SRSW.NETF;
                                 SRSW.UMOF+=SRSW.NETF;
                                 SRSW.AMOF+=SRSW.NETF;
                                 SRSW.NETF:=0;
:: zapis rozliczenia dofinansowania
                                 SRZF.cntx_psh(); OKRO_F.cntx_psh();
                                 SRZF.prefix();
                                 SRSW.SRZF();
                                 SRZF.ROZF:='T';
                                 SRZF.DATA_ZF:=SRST.OKRO_F().KON;
                                 SRZF.put();
                                 SRZF.cntx_pop(); OKRO_F.cntx_pop();

                                 SRSW.put()
                              ?}
                           |? SRSW.TYP='W'
                           || SRSW.UMOF+=SRSW.NETF;
                              SRSW.NETF:=0;
                              SRSW.put()
                           ?};
                           SRSW.next()
                        !}
                     ?}
                  ?};
:: jeżeli nierozliczone do końca dofinansowania
                  SRSW.prefix(SRST.ref());
                  {? SRSW.first()
                  || {! |?
                        {? SRSW.TYP<>'W'
                        || {? SRSW.UMOF<SRSW.WARF
                           || SRSW.AMOF+=(SRSW.WARF-SRSW.UMOF);
                              SRSW.UMOF:=SRSW.WARF;
                              SRSW.put()
                           ?};
                           SRSW.next()
                        ?}
                     !}
                  ?}
               ?};
               {? FINFO.TOR_D='T'
               || {? SRST.UMOD=SRST.WARD
                  || SRSW.prefix(SRST.ref(),'W');
                     {? SRSW.first() & SRSW.NETD<0
                     || _rozlicz:=-SRSW.NETD;
                        SRSW.prefix(SRST.ref());
                        {? SRSW.first()
                        || {! |?
                              {? SRSW.TYP<>'W' & _rozlicz>0
                              || {? SRSW.NETD>0
                                 || _rozlicz-=SRSW.NETD;
                                    SRSW.UMOD+=SRSW.NETD;
                                    SRSW.AMOD+=SRSW.NETD;
                                    SRSW.NETD:=0;
:: zapis rozliczenia dofinansowania
                                    SRZF.cntx_psh(); OKRO_F.cntx_psh();
                                    SRZF.prefix();
                                    SRSW.SRZF();
                                    SRZF.ROZD:='T';
                                    SRZF.DATA_ZD:=SRST.OKRO_F().KON;
                                    SRZF.put();
                                    SRZF.cntx_pop(); OKRO_F.cntx_pop();

                                    SRSW.put()
                                 ?}
                              |? SRSW.TYP='W'
                              || SRSW.UMOD+=SRSW.NETD;
                                 SRSW.NETD:=0;
                                 SRSW.put()
                              ?};
                              SRSW.next()
                           !}
                        ?}
                     ?};
:: jeżeli nierozliczone do końca dofinansowania
                     SRSW.prefix(SRST.ref());
                     {? SRSW.first()
                     || {! |?
                           {? SRSW.TYP<>'W'
                           || {? SRSW.UMOD<SRSW.WARD
                              || SRSW.AMOD+=(SRSW.WARD-SRSW.UMOD);
                                 SRSW.UMOD:=SRSW.WARD;
                                 SRSW.put()
                              ?};
                              SRSW.next()
                           ?}
                        !}
                     ?}
                  ?}
               ?};
:: pętla propagująca dane składników wartości do przyszłych okresów
               SRSW.cntx_psh(); SRST.cntx_psh();
               SRSW.index('SSRW');
               _t_ref:=SRST.ref();
               SRSW.prefix(SRST.ref());
               {? SRSW.first()
               || {! |?
                     _t_warp:=SRSW.WARP; _t_umop:=SRSW.UMOP; _t_netp:=SRSW.NETP;
                     _t_warf:=SRSW.WARF; _t_umof:=SRSW.UMOF; _t_netf:=SRSW.NETF;
                     {? FINFO.TOR_D='T'
                     || _t_ward:=SRSW.WARD; _t_umod:=SRSW.UMOD; _t_netd:=SRSW.NETD
                     ?};
                     _t_typ:=SRSW.TYP;
                     _t_srzf:=SRSW.SRZF;
                     SRST.index('PODAT');
                     SRST.prefix(SRST.SRSR);
                     SRST.seek(_t_ref);
                     {! |?
                        {? SRST.ref()<>_t_ref
                        || SRSW.cntx_psh();
                           SRSW.index('SSRW');
                           SRSW.prefix(SRST.ref(),_t_typ);
                           {? SRSW.first()
                           || _dalej:=1;
                              {! |?
                                 {? SRSW.SRZF=_t_srzf
                                 || SRSW.WARP:=_t_warp; SRSW.UMOP:=_t_umop; SRSW.NETP:=_t_netp;SRSW.AMOP:=0;
                                    SRSW.WARF:=_t_warf; SRSW.UMOF:=_t_umof; SRSW.NETF:=_t_netf;SRSW.AMOF:=0;
                                    {? FINFO.TOR_D='T'
                                    || SRSW.WARD:=_t_ward; SRSW.UMOD:=_t_umod; SRSW.NETD:=_t_netd;SRSW.AMOD:=0
                                    ?};
                                    SRSW.put();
                                    _dalej:=0
                                 ?};
                                 _dalej & SRSW.next()
                              !}
                           ?};
                           SRSW.cntx_pop()
                        ?};
                        SRST.next()
                     !};
                     SRSW.next()
                  !}
               ?};
               SRSW.cntx_pop(); SRST.cntx_pop()
:: koniec pętli propagującej
            ?}
         ?}
   "),

   obj_meth('delValueComp',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa składniki wartości dla bieżącego rekordu stanu
::       _a - wskazanie na rekord stanu (SRST.ref)
::       [_b] - opcjonalne wskazanie na dofinansowanie lub ulgę dla którego składniki należy usunąć
::----------------------------------------------------------------------------------------------------------------------
     _wy:=1;
     SRSW.cntx_psh();
     SRSW.index('DOFIN');
     {? _>1 & type_of(_b)=type_of(null)
     || SRSW.prefix(_a,_b)
     || SRSW.prefix(_a)
     ?};
     {? SRSW.first()
     || {! |? SRSW.del() !}
     ?};
     {? SRSW.size()>0 || _wy:=0 ?};
     SRSW.cntx_pop();
     _wy
     "),

     obj_meth('delValueCompAll',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa wszystkie składniki wartości dla bieżącego środka
::       _a - wskazanie na środek (SRSR.ref)
::       [_b] - opcjonalne wskazanie na dofinansowanie lub ulgędla którego składniki należy usunąć
::----------------------------------------------------------------------------------------------------------------------
     _wy:=1;
     SRSW.cntx_psh();
     SRSW.index('SRSR');
     {? _>1 & type_of(_b)=type_of(null)
     || SRSW.prefix(_a,_b)
     || SRSW.prefix(_a)
     ?};
     {? SRSW.first()
     || {! |? SRSW.del() !}
     ?};
     {? SRSW.size()>0 || _wy:=0 ?};
     SRSW.cntx_pop();
     _wy
     "),

   obj_meth('updateRecState',"";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda uaktualnia rejestr stanów środków podczas dodawania środka, poprawiania środka
::       rejestracji dokumentów środka.
::   WE: [_a] - OKRO_F.ref() - jeżeli podano ref okresu to update zaczyna się od podanego okresu
::       [_b] - 0/1 - jeżeli podano i _b = 1 to od okresu _a należy usunąć znacznik naliczenia amortyzacji
::       [_b] - jeżeli _b i _b=2 to update po przejściu D->L
::       [_b] - jeżeli _b i _b=3 to wymuszenie działania także w okresach zamkniętych!
::       [_c] - jeżeli _c i _c=1 to specjalny tryb aktualizacji wywoływny z innej firmy w ramach konsolidacji środków
::----------------------------------------------------------------------------------------------------------------------
         {? SRSR.r_lock(1)
         || SRST.cntx_psh();
            {? _>0 & type_of(_a)=type_of(null)
            || _st_rok:=exec('find_pocz_rok','fst',_a);
               _st_okr:=exec('find_okro_nr','fst',_a)
            || _st_rok:=SRSR.ROK_F().POCZ_ROK;
               _st_okr:=SRSR.OKRO_F().NR
            ?};
            {? _<3 || _c:=0 ?};
            _fst:=SRD.FST;
            SRST.index('SROD');
            SRST.prefix(SRSR.ref());
:: w razie uszkodzenia danych o skresleniu
            {? SRSR.Z='T' & SRSR.DOKSKR=null()
            || SRSR.Z:='N';
               SRSR.put()
            ?};
::
            ROK_F.cntx_psh(); OKRO_F.cntx_psh();
            OKR_OBSZ.cntx_psh();
            ROK_F.index('ROKPOCZ');
            ROK_F.prefix(REF.FIRMA);
            {? ROK_F.find_key(_st_rok)
            || {! |?
                  OKRO_F.index('ROK');
                  OKRO_F.prefix(ROK_F.ref());
:: pomijanie okresów zamkniętych w obszarze FST
                  {? (ROK_F.POCZ_ROK=_st_rok & OKRO_F.find_key(_st_okr)) | OKRO_F.first()
                  || {! |?
                        {? OKRO_F.AMOR<>'T' | (_>=2 & _b=3)
                        || ROK_F.cntx_psh();
                           OKR_OBSZ.index('OKRO_F2');
                           OKR_OBSZ.prefix(_fst,OKRO_F.ref());
                           {? _c | OKR_OBSZ.first()
                           || _delete:=0;
                              {? ~SRST.find_key(ROK_F.ref(),OKRO_F.ref())
                              || {? SRSR.Z='N'
                                    | (SRSR.Z='T' & OKRO_F.NR=0 & SRSR.DES>=OKRO_F.ROK().POCZ_ROK)
                                    | (SRSR.Z='T' & OKRO_F.NR>0 & OKRO_F.KON<>date(0,0,0) & SRSR.DES>OKRO_F.KON)
                                    | (SRSR.Z='T' & OKRO_F.NR>0 & SRSR.DES>=OKRO_F.POCZ & SRSR.DES<=OKRO_F.KON)
                                 || SRST.blank();
                                    SRST.SRSR:=SRSR.ref();
                                    SRST.R:=SRSR.R;
                                    SRST.ROK_F:=ROK_F.ref();
                                    SRST.OKRO_F:=OKRO_F.ref();
                                    SRST.ROK:=OKRO_F.RES;
                                    SRST.OKRES:=OKRO_F.OES;
                                    SRST.add()
                                 || _delete:=-1
                                 ?}
                              || {? (SRST.SRSR().Z='T' & SRSR.DOKSKR<>null)
                                 || _dataskr:=exec('find_pocz_okr','fst',SRSR.DOKSKR().OKRO_F);
                                    _delete:=~((OKRO_F.NR=0 & _dataskr>=OKRO_F.ROK().POCZ_ROK)
                                          | (OKRO_F.NR>0 & OKRO_F.KON<>date(0,0,0) & _dataskr>OKRO_F.KON)
                                          | (OKRO_F.NR>0 & _dataskr>=OKRO_F.POCZ & _dataskr<=OKRO_F.KON))
:: jeżeli okres wcześniejszy niż okres wprowadzenia do ewidencji
                                 ?}
                              ?};
:: w przypadku środków zlikwidowanych - jeśli są to usuwa stany po dacie likwidacji - stany w latach kolejnych niż rok
:: skreslenia, stany w roku skreslenia dla okresów po dacie obowiązywania dokumentu likwidacji, stan na bz w roku
:: likwidacji. _delete=0 - odtworzenie stanu, _delete:=1 = usunięcie stanu, _delete=-1 - nic nie trzeba robić,
:: stanu brak i nie powinno go być
                              {? _delete=1
                              || {? SRST.GRP<>'T'
                                 || exec('tst_clean','fst',SRST.ref());
                                    .delValueComp(SRST.ref());
                                    SRST.del()
                                 || _tree:=SRST.ref(); _r:=SRST.R; _okro_f:=SRST.OKRO_F; _odd:=SRST.ODD;
                                    SRST.cntx_psh();
                                    SRST.index('TREE');
                                    SRST.prefix(_r,_okro_f,_odd,_tree);
                                    {? SRST.first()
                                    || {! |? exec('tst_clean','fst',SRST.ref());
                                             .delValueComp(SRST.ref());
                                             SRST.del()
                                       !};
                                       SRST.cntx_pop()
                                    || SRST.cntx_pop();
                                       exec('tst_clean','fst',SRST.ref());
                                       .delValueComp(SRST.ref());
                                       SRST.del()
                                    ?}
                                 ?}
                              |? _delete=0
                              || _par_b:={? _>=2 & _b=1 || 1 |? _>=2 & _b=2 || 2 |? _>=2 & _b=4 || 4 || 0 ?};
                                 .refreshRecState(SRST.ROK_F,SRST.OKRO_F().POCZ,_par_b)
                              ?}
                           ?};
                           ROK_F.cntx_pop()
                        ?};
                        OKRO_F.next()
                     !}
                  ?};
                  ROK_F.next()
               !}
            ?};
:: usuwanie ewentualnych stanów przed okresem wprowdzenia do ewidencji
            SRST.index('PODAT');
            SRST.prefix(SRSR.ref());
            _e_rok:=SRSR.OKRO_F().RES;
            _e_okres:=SRSR.OKRO_F().OES;
            {? SRST.first()
            || {! |?
                  {? SRST.OKRO_F().RES<_e_rok | (SRST.OKRO_F().RES=_e_rok & SRST.OKRO_F().OES<_e_okres)
                  || exec('tst_clean','fst',SRST.ref());
                     .delValueComp(SRST.ref());
                     SRST.del()
                  || SRST.next()
                  ?};
                  {? (SRST.OKRO_F().RES<_e_rok | (SRST.OKRO_F().RES=_e_rok & SRST.OKRO_F().OES<_e_okres))
                  || 1
                  || 0
                  ?}
               !}
            ?};
            ROK_F.cntx_pop(); OKRO_F.cntx_pop();
            OKR_OBSZ.cntx_pop();
            SRST.cntx_pop();
            SRSR.r_unlock()
         || 0
         ?}
     "),

   obj_meth('delRecState',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa rekord stanu dla bieżącego okresu
::   WE: _a - jeśli podane i równe 1 to usunięcie TYLKO dla bieżącego okresu
::----------------------------------------------------------------------------------------------------------------------
         {? SRSR.r_lock(1)
         || SRST.cntx_psh();
            SRST.index('SROD');
            {? _=0 || _a:=0 ?};
            {? ~_a
            || SRST.prefix(SRSR.ref())
            || SRST.prefix(SRSR.ref(),OKRO_F.ROK,OKRO_F.ref())
            ?};
            {? SRST.first()
            || {! |?
                  TST.cntx_psh();
                  TST.index('SRST');
                  TST.prefix(SRST.ref());
                  {? TST.first()
                  || {! |? TST.del() !}
                  ?};
                  TST.cntx_pop();
                  .delValueComp(SRST.ref());
                  SRST.del()
               !}
            ?};
            {? SRST.size()=0 || _wy:=1 || _wy:=0 ?};
            SRST.cntx_pop();
            SRSR.r_unlock();
            _wy
         || 0
         ?}
   "),

   obj_meth('changeValue',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda nakłada na rekord stanu zmiany wynikające z dokumentu zmiany wartości dla środka
::----------------------------------------------------------------------------------------------------------------------

:: zmiany dla dokumentów innych niż zbycie w obrębie grupy kapitałowej
         {? SRDO.TYP().P<>'S' | (SRDO.TYP().P='S' & SRDO.Z='T')
         || {? SRDO.TYP().WARP='T' || SRST.WARP+=SRDO.WARP ?};
            {? SRDO.TYP().WARP='T' & SRDO.TYP().P='+' & SRDO.WARP100>0 || SRST.WARP100+=SRDO.WARP100 ?};
            {? SRDO.TYP().WARF='T' || SRST.WARF+=SRDO.WARF ?};
            {? SRDO.TYP().WARD='T' || SRST.WARD+=SRDO.WARD ?};
            {? SRDO.TYP().UMOP='T' || SRST.UMOP+=SRDO.UMOP ?};
            {? SRDO.TYP().UMOF='T' || SRST.UMOF+=SRDO.UMOF ?};
            {? SRDO.TYP().UMOD='T' || SRST.UMOD+=SRDO.UMOD ?};
            {? SRDO.TYP().OSTATEK='T' || SRST.OSTATEK+=SRDO.OSTATEK ?};
            {? SRDO.TYP().WP='T' || SRST.WP+=SRDO.WP ?};
            {? SRDO.TYP().OKE='T' || SRST.OKE+=SRDO.OKE ?};
            {? SRDO.TYP().MAX='T' || SRST.MAX+=SRDO.MAX ?};
            {? SRDO.TYP().WARF='T' | SRDO.TYP().UMOF='T' || SRST.NETF:=SRST.NETFK:=SRST.WARF-SRST.UMOF ?};
            {? SRDO.TYP().WARP='T' | SRDO.TYP().UMOP='T' || SRST.NETP:=SRST.NETPK:=SRST.WARP-SRST.UMOP ?}
         ?};

:: obsługa zbycia wewnątrz grupy kapitałowej
         {? SRDO.TYP().P='S'
         || SRSFIRMA.cntx_psh();
            SRSR.cntx_psh();
            SRSR.prefix();
            SRSFIRMA.index('SRDO');
            SRSFIRMA.prefix(SRDO.uidref(),);
            {? ~SRSFIRMA.first()
            || SRSFIRMA.blank();
               SRSFIRMA.SRDO_REF:=SRDO.uidref();
               SRSFIRMA.FIRMA_Z:=REF.FIRMA;
               SRSFIRMA.FIRMA_D:=SRDO.FIRMA_D;
               SRSFIRMA.DATA_Z:=SRDO.DO;
               SRDO.SRSR();
               SRSFIRMA.SRSR_Z:=SRSR.uidref();
               SRSFIRMA.GRP:=SRSR.GRP;
               SRSFIRMA.ORG_REF:={? SRSR.ORG_REF<>'' || SRSR.ORG_REF || SRSR.uidref() ?};
               SRSFIRMA.add()
            ?};
            SRST.SRSR();
            SRSR.ZB:='T';
            SRSR.put();
            SRSR.cntx_pop();
            SRSFIRMA.cntx_pop();
            _zm_r:=0;
            {? SRST.GRP='T' || _zm_r:=1
            |? SRST.GRP<>'T' & SRDO.Z<>'T' || SRST.R:='S'
            ?};
            {? _zm_r & SRDO.Z<>'T' || .changeR(SRST.ref(), 'S') ?}
         ?};

         {? FINFO.TOR_D='T' & (SRDO.TYP().WARD='T' | SRDO.TYP().UMOD='T')
            & (SRDO.TYP().P<>'S' | (SRDO.TYP().P='S' & SRDO.Z='T'))
         || SRST.NETD:=SRST.NETDK:=SRST.WARD-SRST.UMOD
         ?};

         {? SRDO.Z='T' & (SRST.GRP<>'T' | (SRST.GRP='T' & SRDO.SRSR_E=null))
         || SRSR.cntx_psh();
            SRSR.prefix();
            SRST.SRSR();
            SRSR.Z:='T';
            SRSR.DES:=SRDO.DO;
            SRSR.DOKSKR:=SRDO.ref();
            SRSR.ROZ:=SRDO.ROZ;
            SRSR.put();
            SRSR.cntx_pop()
         ?};
:: jeżeli środek był powiązany z kartoteką pojazdów, to powiązany pojazd staje się nieaktywny
         {? (SRDO.Z='T' | SRDO.TYP().P='S') & (SRST.GRP<>'T' | (SRST.GRP='T' & SRDO.SRSR_E=null))
         ||  {? SRSR.POJAZD='T' & exec('poj_srsr','samochody',SRSR.ref())
            || POJAZDY.cntx_psh();
               POJAZDY.index('FIRSRSR');
               POJAZDY.prefix(REF.FIRMA,SRSR.ref());
               {? POJAZDY.first()
               || POJAZDY.A:='N';
                  POJAZDY.put()
               ?};
               POJAZDY.cntx_pop()
            ?}
         ?};
         SRST.put()
   "),

   obj_meth('changeProperty',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda nakłada na rekord stanu zmiany wynikające z dokumentu zmiany właściwości dla środka
::----------------------------------------------------------------------------------------------------------------------
         _zm_odd:=_zm_r:=0;
         {? SRDO.TYP().NRI='T'
         || {? SRST.GRP<>'E'
            || SRST.NRI:=SRDO.NRI
            || {? SRST.NRI*'/'
               || {? SRST.NRI+1='.' || SRST.NRI-=1 ?};
                  _tmp:=SRST.NRI+((+SRST.NRI)-(SRST.NRI*'/'));
                  _nri:={? SRDO.NRI+1='.' || SRDO.NRI-1 || SRDO.NRI ?};
                  SRST.NRI:=_nri+'/'+_tmp
               || SRST.NRI:=SRDO.NRI
               ?}
            ?}
         ?};
         {? SRDO.TYP().NST='T' || SRST.NST:=SRDO.NST ?};
         {? SRDO.TYP().JORG='T'
         || SRST.JORG:=SRDO.JORG;
            {? SRST.GRP='T' & SRST.ODD<>SRDO.ODD
            || _zm_odd:=1
            |? SRST.GRP<>'T'
            || SRST.ODD:=SRDO.ODD
            ?}
         ?};
         {? SRDO.TYP().OSOBA='T' || SRST.OSOBA:=SRDO.OSOBA; SRST.P:=SRDO.PRC ?};
         {? SRDO.TYP().POM='T' || SRST.POM:=SRDO.POM ?};
         {? SRDO.TYP().GR='T' || SRST.GR:=SRDO.GR ?};
         {? SRDO.TYP().R='T'
         || {? SRST.GRP='T' & SRST.R<>SRDO.R
            || _zm_r:=1
            |? (SRST.GRP='E' & BUF.get('TREE')=SRST.TREE & SRDO.SRSR_E=SRST.SRSR) | (SRST.GRP='N' | SRST.GRP='')
            || SRST.R:=SRDO.R
            ?}
         ?};
         {? SRDO.TYP().KONPOD='T' || SRST.KONPOD:=SRDO.KONPOD ?};
         {? SRDO.TYP().KONFIN='T' || SRST.KONFIN:=SRDO.KONFIN ?};
         {? SRDO.TYP().KONDOD='T' || SRST.KONDOD:=SRDO.KONDOD ?};
         SRST.put();
:: nie można zmienić wartości pola w indeksie z polem TREE_REF, stąd obejście dla ODD i R
         {? _zm_odd || .changeODD(SRST.ref(), SRDO.ODD) ?};
         {? _zm_r || .changeR(SRST.ref(), SRDO.R) ?}
   "),

   obj_meth('changeODD',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda obsługuje zmianę pola ODD dla zestawów i elementów
::   WE: _a - ref zestawu (SRST.ref) _b - ref nowej jednostki księgowej _ODD
::----------------------------------------------------------------------------------------------------------------------
         _tree:=_a; _new:=_b;
         _tmp:=tab_tmp(1,'REF','INTEGER','REF');
         _r:=SRST.R; _okro_f:=SRST.OKRO_F; _odd:=SRST.ODD;

         SRST.cntx_psh();
         SRST.index('TREE');
         SRST.prefix(_r,_okro_f,_odd,_tree);
         {? SRST.first()
         || {! |?
               _tmp.REF:=#SRST.ref();
               _tmp.add();
               SRST.cntx_psh();
               SRST.prefix();
               SRST.TREE:=null;
               SRST.put();
               SRST.cntx_pop();
               SRST.first()
            !}
         ?};
         SRST.cntx_pop();

         SRST.get();
         SRST.ODD:=_new;
         SRST.put();

         SRST.cntx_psh();
         SRST.prefix();
         {? _tmp.first()
         || {! |?
               {? SRST.seek(_tmp.REF,SRST.name())
               || SRST.TREE:=_tree;
                  SRST.ODD:=_new;
                  SRST.put()
               ?};
               _tmp.next()
            !}
         ?};
         SRST.cntx_pop()
   "),

   obj_meth('changeR',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda obsługuje zmianę pola R (rodzaj środka) dla zestawów i elementów
::   WE: _a - ref zestawu (SRST.ref) _b - nowa wartość pola R
::----------------------------------------------------------------------------------------------------------------------
         _tree:=_a; _new:=_b;
         _tmp:=tab_tmp(1,'REF','INTEGER','REF');
         _r:=SRST.R; _okro_f:=SRST.OKRO_F; _odd:=SRST.ODD;

         SRST.cntx_psh();
         SRST.index('TREE');
         SRST.prefix(_r,_okro_f,_odd,_tree);
         {? SRST.first()
         || {! |?
               _tmp.REF:=#SRST.ref();
               _tmp.add();
               SRST.cntx_psh();
               SRST.prefix();
               SRST.TREE:=null;
               SRST.put();
               SRST.cntx_pop();
               SRST.first()
            !}
         ?};
         SRST.cntx_pop();

         SRST.get();
         SRST.R:=_new;
         SRST.put();

         SRST.cntx_psh();
         SRST.prefix();
         {? _tmp.first()
         || {! |?
               {? SRST.seek(_tmp.REF,SRST.name())
               || SRST.TREE:=_tree;
                  SRST.R:=_new;
                  SRST.put()
               ?};
               _tmp.next()
            !}
         ?};
         SRST.cntx_pop()
   "),

   obj_meth('changeMethod',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda nakłada na rekord stanu zmiany wynikające z dokumentu zmiany metody amortyzacji dla środka
::----------------------------------------------------------------------------------------------------------------------
         {? SRDO.TYP().MP='T' || SRST.MP:=SRDO.MP ?};
         {? SRDO.TYP().MF='T' || SRST.MF:=SRDO.MF ?};
         {? SRDO.TYP().MD='T' || SRST.MD:=SRDO.MD ?};
         {? SRDO.TYP().STAP='T' || SRST.STAP:=SRDO.STAP ?};
         {? SRDO.TYP().STAF='T' || SRST.STAF:=SRDO.STAF ?};
         {? SRDO.TYP().STAD='T' || SRST.STAD:=SRDO.STAD ?};
         {? SRDO.TYP().WKP='T' || SRST.WKP:=SRDO.WKP ?};
         {? SRDO.TYP().WKF='T' || SRST.WKF:=SRDO.WKF ?};
         {? SRDO.TYP().WKD='T' || SRST.WKD:=SRDO.WKD ?};
         {? 1+SRST.MP().T='D' & (SRDO.TYP().STAP='T' | SRDO.TYP().WKP='T') & SRDO.DPLP<>date(0,0,0)
         || SRST.DPLP:=SRDO.DPLP
         ?};
         {? 1+SRST.MF().T='D' & (SRDO.TYP().STAF='T' | SRDO.TYP().WKF='T') & SRDO.DPLF<>date(0,0,0)
         || SRST.DPLF:=SRDO.DPLF
         ?};
         {? FINFO.TOR_D='T' & 1+SRST.MD().T='D' & (SRDO.TYP().STAD='T' | SRDO.TYP().WKD='T') & SRDO.DPLD<>date(0,0,0)
         || SRST.DPLD:=SRDO.DPLD
         ?};
         SRST.put()
   "),

   obj_meth('changeOther',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda nakłada na rekord stanu zmiany wynikające z dokumentu innych zmian dla środka
::----------------------------------------------------------------------------------------------------------------------
         {? SRDO.TYP().ULWK='T' || SRST.ULWK:=SRDO.ULWK ?};
         {? SRDO.TYP().SEZONOWY='T' || SRST.S:=SRDO.SEZ ?};
         {? SRDO.TYP().SEZONOWY='T' || SRST.SCH_SEZ:=SRDO.SCH_SEZ ?};
         SRST.put()
   "),

   obj_meth('refreshRecState',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda odświeża rekord dla bieżącego okresu w rejestrze stanów środków
::   WE: [_a] - _ROK_F
::       [_b] - początek okresu obrachunkowego (data)
::       [_c] - czy wymuszać usunięcie znacznika naliczenia amortyzacji (0/1); jeżeli _c=2
::              to sytuacja po przejściu D->L
::----------------------------------------------------------------------------------------------------------------------
         {? _<3 || _c:=0 ?};
:: zapamiętanie stanu obecnego przed odtworzeniem na podstawie stanu pierwotnego i dokumentów'
         OKRO_F.cntx_psh();
         _p_rok:=SRST.ROK;
         _p_okr:=SRST.OKRES;
         _isTree:=0;
         BUF.save();
         _trodzaj:=SRST.R:=SRSR.R;
         _todd:=SRST.ODD:=SRSR.ODD;
         SRST.U_SR:=SRSR.U_SR;
         SRST.GRP:=SRSR.GRP;
         SRST.KIND:=SRSR.KIND;
:: jeżeli element to w polu TREE wskazanie na rekord SRST zestawu z właściwego okresu
         {? SRST.KIND='N' & SRSR.TREE<>null
         || _stree:=SRSR.TREE;
            _ttree:=null;
            _okr:=SRST.OKRO_F;
            _rok:=SRST.ROK_F;
            SRSR.cntx_psh();
            SRSR.index('TREE');
            SRSR.prefix();
            {? SRSR.seek(_stree,SRSR.name())
            || SRST.cntx_psh();
               SRST.index('SROD');
               SRST.prefix(SRSR.ref(),_rok,_okr);
               {? SRST.first() || _ttree:=SRST.ref(); _trodzaj:=SRST.R; _todd:=SRST.ODD ?};
               SRST.cntx_pop()
            ?};
            SRSR.cntx_pop();
            SRST.TREE:=_ttree;
            SRST.R:=_trodzaj;
            SRST.ODD:=_todd
         ?};
         SRST.NRI:=SRSR.NRI;
         SRST.NST:=SRSR.NST;
         SRST.GR:=SRSR.GR;
         SRST.KONPOD:=SRSR.KONPOD;
         SRST.MP:=SRSR.MP;
         SRST.STAP:=SRSR.STAP;
         SRST.WKP:=SRSR.WKP;
         SRST.DPLP:=SRSR.DPLP;
         SRST.KONFIN:=SRSR.KONFIN;
         SRST.MF:=SRSR.MF;
         SRST.STAF:=SRSR.STAF;
         SRST.WKF:=SRSR.WKF;
         SRST.DPLF:=SRSR.DPLF;
         SRST.KONDOD:=SRSR.KONDOD;
         SRST.MD:=SRSR.MD;
         SRST.STAD:=SRSR.STAD;
         SRST.WKD:=SRSR.WKD;
         SRST.DPLD:=SRSR.DPLD;
         SRST.MAX:=SRSR.MAX;
         SRST.JM:=SRSR.JM;
         SRST.OKE:=SRSR.OKE;
         SRST.SCH_SEZ:=SRSR.SCH_SEZ;
         SRST.S:=SRSR.S;
         SRST.POM:=SRSR.POM;
         SRST.OSOBA:=SRSR.OSOBA;
         SRST.P:=SRSR.P;
         SRST.JORG:=SRSR.JORG;
         SRST.DZ:=SRSR.DZ;
         SRST.DE:=SRSR.DE;
         SRST.NF:=SRSR.NF;
         SRST.DES:=SRSR.DES;

:: dla zestawów środków

         {? SRST.GRP='T'
         || SRST.WARP:=SRST.UMOP:=SRST.NETP:=SRST.NETPK:=0;
            SRST.WARF:=SRST.UMOF:=SRST.NETF:=SRST.OSTATEK:=SRST.NETFK:=0;
            SRST.WARD:=SRST.UMOD:=SRST.NETD:=SRST.NETDK:=0;
            _tree:=SRST.SRSR;
            SRSR.cntx_psh();
            SRSR.index('TREE');
            SRSR.prefix(_tree);
            {? SRSR.first()
            || {! |?
                  {? SRSR.OKRO_F().POCZ<>date(0,0,0)
                  || _pocz:=SRSR.OKRO_F().POCZ
                  || _pocz:=SRSR.OKRO_F().ROK().POCZ_ROK
                  ?};
                  {? SRST.OKRO_F().OES=0 || _tmp_dt:=SRST.OKRO_F().ROK().POCZ_ROK
                  |? SRST.OKRO_F().OES=13 || _tmp_dt:=SRST.OKRO_F().ROK().KON_ROK
                  || _tmp_dt:=SRST.OKRO_F().POCZ
                  ?};
                  {? _pocz<=_tmp_dt
                  || SRST.WARP+=SRSR.WARP;
                     SRST.WARP100+=SRSR.WARP100;
                     SRST.UMOP+=SRSR.UMOP;
                     SRST.NETP+=SRSR.NETP;
                     SRST.NETPK+=SRSR.NETP;
                     SRST.WARF+=SRSR.WARF;
                     SRST.UMOF+=SRSR.UMOF;
                     SRST.NETF+=SRSR.NETF;
                     SRST.NETFK+=SRSR.NETF;
                     SRST.WARD+=SRSR.WARD;
                     SRST.UMOD+=SRSR.UMOD;
                     SRST.NETD+=SRSR.NETD;
                     SRST.NETDK+=SRSR.NETD;
                     SRST.OSTATEK+=SRSR.OSTATEK
                  ?};
                  SRSR.next()
               !}
            ?};
            SRSR.cntx_pop()
         ||
:: dla zwykłych środków i elementów składowych
            SRST.WARP:=SRSR.WARP;
            SRST.WARP100:=SRSR.WARP100;
            SRST.UMOP:=SRSR.UMOP;
::          SRST.AMOP:=0;
            SRST.NETP:=SRST.NETPK:=SRSR.NETP;
            SRST.WARF:=SRSR.WARF;
            SRST.UMOF:=SRSR.UMOF;
::          SRST.AMOF:=0;
            SRST.NETF:=SRST.NETFK:=SRSR.NETF;
            SRST.WARD:=SRSR.WARD;
            SRST.UMOD:=SRSR.UMOD;
::          SRST.AMOD:=0;
            SRST.NETD:=SRST.NETDK:=SRSR.NETD;
            SRST.OSTATEK:=SRSR.OSTATEK
         ?};

:: zapis, jeżeli zestaw lub element i zmiana w polu z indeksu z drzewem to specjalna obsługa
         {? SRST.R<>BUF.get('R') & SRSR.TREE<>null & BUF.get('TREE')<>SRST.TREE
         || SRST.put()
         |? (SRST.GRP='E' | SRST.GRP='T') & ((SRST.ODD<>BUF.get('ODD') & BUF.get('ODD')<>null)
                                            | (SRST.R<>BUF.get('R') & BUF.get('R')<>''))
         ||
            {? (SRST.ODD<>BUF.get('ODD') & BUF.get('ODD')<>null)
            || _new_o:=SRST.ODD;
               SRST.ODD:=BUF.get('ODD')
            || _new_o:=null
            ?};
            {? (SRST.R<>BUF.get('R') & BUF.get('R')<>'')
            || _new_r:=SRST.R;
               SRST.R:=BUF.get('R')
            || _new_r:=''
            ?};
            SRST.put();
            {? SRST.GRP='T'
            || {? _new_o<>null || .changeODD(SRST.ref(),_new_o) ?};
               {? _new_r<>'' || .changeR(SRST.ref(),_new_r) ?}
            ?}
         || SRST.put()
         ?};

         OKRO_F.cntx_psh();
         SRDO.cntx_psh();
:: dla elementu prefix na dokumenty zestawu, jedynie w przypadku wartościowych uwzględnia te
:: przypisane do elementu
         {? SRSR.GRP='E'
         || _ref:=exec('get_srsr_root','fst',SRSR.ref());
            SRDO.index('DATA');
            SRDO.prefix(_ref)
         || SRDO.index('DATA');
            SRDO.prefix(SRSR.ref())
         ?};
         {? SRDO.first()
         || {! |?
::             uwzględnia dokumenty obowiązujące do bieżącego w pętli włącznie
               {? _b=date(0,0,0)
               || ROK_F.cntx_psh();
                  ROK_F.prefix();
                  {? ROK_F.seek(_a)
                  || {? _p_okr=0 || _rok:=ROK_F.POCZ_ROK
                     |? _p_okr=13 || _rok:=ROK_F.KON_ROK
                     ?}
                  ?};
                  ROK_F.cntx_pop()
               ?};
               {? SRDO.OKRO_F().POCZ<=_b
                 | (_b=date(0,0,0) & ((SRST.OKRES>0 & SRDO.OKRO_F().POCZ<=_rok) | (SRST.OKRES=0 & SRDO.OKRO_F().POCZ<_rok)))
               || {? SRDO.TYP().RODZ='W' & (SRST.GRP='N' | SRST.GRP='T' | (SRST.GRP='E' & SRDO.SRSR_E=SRST.SRSR))
                  || 'zmiana wartościowa';
                     .changeValue()
                  |? SRDO.TYP().RODZ='L'
                  || 'zmiana właściwości';
                     .changeProperty()
                  |? SRDO.TYP().RODZ='I'
                  || 'dokument pozostały';
                     .changeOther()
                  |? SRDO.TYP().RODZ='M'
                  || 'zmiana metody amortyzacji';
                     .changeMethod()
                  ?}
               ?};
               SRDO.next()
            !}
         ?};
         SRDO.cntx_pop();
         OKRO_F.cntx_pop();
::       jeżeli zmieniły się pola istotne dla naliczania amortyzacji, lub wymuszono parametrem metody
::       wskaźnik naliczenia zmienia się na 'N'
         _zmiana:=0;
         {? _c<>4 & (.isChanged() | (_>=3 & _c=1)) || SRST.NAL:='N'; _zmiana:=1 ?};
:: jeżeli metoda naturalna i amortyzacja nie naliczona to należy uaktualnić planowane zużycie
:: w okresach zwykłych (nie BO i BZ)
         {? _c<>4 & SRST.GRP<>'T' & 1+SRST.MF().T='N' & SRST.OKRO_F().POCZ<>date(0,0,0)
:: & (SRST.SRSR().OKRO_F<>SRST.OKRO_F | SRST.MF().MP=0)
         || {? SRST.NAL='N' & SRST.OKE>0
            ||  VAR_DEL.delete('__tmp_zuz');
               __tmp_zuz:=exec('mapa_zuz','fst');
               _suma:=exec('sum_zuz','fst','P',SRST.ROK,SRST.OKRES,0);
               _ile:=exec('oke_zuz','fst',SRST.ROK,SRST.OKRES)-1;
:: dla sezonowych planowane zużycie proporcjonalnie do liczby aktywnych okresów
               {? __tmp_zuz.find_key(SRST.ROK,SRST.OKRES) & __tmp_zuz.CZY_NAT='T'
               ||
                  {? SRST.S='T'
                  || {? .curMonth(SRST.ROK,SRST.OKRES,'F') & SRST.SCH_SEZ<>null & SRST.SCH_SEZ().LM>0
                     || SRST.PZUZ:=((SRST.MAX/SRST.OKE)*(12/SRST.SCH_SEZ().LM))$FINFO.DOKL
                     || SRST.PZUZ:=0
                     ?}
                  || {? (SRST.OKE-_ile)>0
                     || SRST.PZUZ:=((SRST.MAX)/(SRST.OKE))$FINFO.DOKL
                     || SRST.PZUZ:=0
                     ?}
                  ?};
                  {? _suma+SRST.PZUZ>SRST.MAX || SRST.PZUZ:=SRST.MAX-_suma ?};

                  _licz_oke:=exec('oke_zuz','fst',SRST.ROK,SRST.OKRES);
                  {? _licz_oke>SRST.OKE
                  || SRST.AMOF:=0;
                     SRST.PZUZ:=0;
                     SRST.RZUZ:=0
                  |? _licz_oke=SRST.OKE
                  || {? _suma+SRST.PZUZ<SRST.MAX || SRST.PZUZ:=SRST.PZUZ+(SRST.MAX-(_suma+SRST.PZUZ)) ?}
                  ?};
:: jeżeli zmiana liczby jednostek lub liczby okresów w wyniku poprawiania to zerowanie rzeczywistego zużycia
                  {? (SRST.MAX<>BUF.get('MAX') | SRST.OKE<>BUF.get('OKE')) & SRST.RZUZ<>0
                  || SRST.RZUZ:=0
                  ?}
               || SRST.PZUZ:=SRST.RZUZ:=0
               ?};
               _zmiana:=1;
               VAR_DEL.delete('__tmp_zuz')
            ?}
         |? _c<>4 & SRST.GRP<>'T' & 1+SRST.MF().T='N' & SRST.OKRO_F().POCZ<>date(0,0,0)
            & SRST.ROK=SRSR.ROK & SRST.OKRES=SRSR.OKRES & SRST.MF().MP=1
         ||  {? SRST.PZUZ<>0
             || SRST.PZUZ:=0;
                _zmiana:=1
             ?}
         |? _c=4
         || SRST.UMOP:=BUF.get('UMOP');
            SRST.NETP:=BUF.get('NETP');
            SRST.UMOF:=BUF.get('UMOF');
            SRST.NETF:=BUF.get('NETF');
            SRST.UMOD:=BUF.get('UMOD');
            SRST.NETD:=BUF.get('NETD');
            __SRSTOF:=1; SRST.put(); __SRSTOF:=0
         ?};
::       jeżeli zmieniły się pola istotne dla naliczania amortyzacji, wskaźnik naliczenia zmienia się na N
::       i jest zapisywany
         {? _zmiana
         || .delAMO();
            {? ~(_>=3 & _c=2 ) || .delSRDO_L() ?};
            SRST.put()
         ?};
         {? SRST.GRP<>'T' || .updateValueComp(SRST.ref()) ?};
         OKRO_F.cntx_pop()
   "),

   obj_meth('isChanged',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy pola istotne dla naliczenia amortyzacji zostały zmienione
::----------------------------------------------------------------------------------------------------------------------
         _change:=0;
         {? SRST.WARP<>BUF.get('WARP') || _change:=1 ?};
         {? _change=0 & SRST.UMOP<>BUF.get('UMOP') || _change:=1 ?};
         {? _change=0 & SRST.NETP<>BUF.get('NETP') || _change:=1 ?};

         {? _change=0 & SRST.WARF<>BUF.get('WARF') || _change:=1 ?};
         {? _change=0 & SRST.UMOF<>BUF.get('UMOF') || _change:=1 ?};
         {? _change=0 & SRST.NETF<>BUF.get('NETF') || _change:=1 ?};

         {? _change=0 & SRST.WARD<>BUF.get('WARD') || _change:=1 ?};
         {? _change=0 & SRST.UMOD<>BUF.get('UMOD') || _change:=1 ?};
         {? _change=0 & SRST.NETD<>BUF.get('NETD') || _change:=1 ?};

         {? _change=0 & SRST.MP<>BUF.get('MP') || _change:=1 ?};
         {? _change=0 & SRST.STAP<>BUF.get('STAP') || _change:=1 ?};
         {? _change=0 & SRST.WKP<>BUF.get('WKP') || _change:=1 ?};

         {? _change=0 & SRST.MF<>BUF.get('MF') || _change:=1 ?};
         {? _change=0 & SRST.STAF<>BUF.get('STAF') || _change:=1 ?};
         {? _change=0 & SRST.WKF<>BUF.get('WKF') || _change:=1 ?};

         {? _change=0 & SRST.MD<>BUF.get('MD') || _change:=1 ?};
         {? _change=0 & SRST.STAD<>BUF.get('STAD') || _change:=1 ?};
         {? _change=0 & SRST.WKD<>BUF.get('WKD') || _change:=1 ?};

         {? _change=0 & SRST.S<>BUF.get('S') || _change:=1 ?};
         {? _change=0 & SRST.SCH_SEZ<>BUF.get('SCH_SEZ') || _change:=1 ?};

         {? _change=0 & SRST.MAX<>BUF.get('MAX') || _change:=1 ?};
         {? _change=0 & SRST.OKE<>BUF.get('OKE') || _change:=1 ?};

         _change
   "),

   obj_meth('setActions',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda wyłącza lub włącza akcje w oknach wertowania środków i dokumentów, zależnie od okresu
::   WE: [_a] - OKRO_F.ref()
::       [_b] - STRING, skróty akcji domyślnych dla okien wertowania stanów
::----------------------------------------------------------------------------------------------------------------------
         {? _=0 | type_of(_a)<>type_of(null) || return(0) ?};
         {? _<2 | type_of(_b)<>type_of('') || _b:='' ?};
         OKRO_F.cntx_psh();
         OKRO_F.prefix();
         {? OKRO_F.seek(_a)
         || {? OKRO_F.POCZ=date(0,0,0) & OKRO_F.KON=date(0,0,0)
            || _first:=exec('first_okr','fst',OKRO_F.ref());
               {? PAR_SKID.get(208)='N' || _tmpact:='F(O)'; _tmpsrdo:='N' || _tmpsrdo:=_tmpact:='' ?};
               {? ~_first
               || SRST.actions('WER','DWTPUOCA'+_tmpact+':DWC',_b,1);
                  SRST.actions('WER_N','DWTPUOCA'+_tmpact+':DWC',_b,1);
                  SRST.actions('WER_U','DWTPUOC:DWC',_b,1);
                  SRST.actions('DWER','DWTPUOCA'+_tmpact+':DWC',_b,1);
                  SRST.actions('DWER_O','DWTPUOCA'+_tmpact+':DWC',_b,1);
                  SRST.actions('DWER_N','DWTPUOCA'+_tmpact+':DWC',_b,1);
                  SRST.actions('DWER_N_O','DWTPUOCA'+_tmpact+':DWC',_b,1);
                  SRDO.actions('WER','DPU'+_tmpsrdo+':D',,1);
                  SRDO.actions('WER_I','DPU:D',,1);
                  SRDO.actions('WER_L','DPU:D',,1);
                  SRDO.actions('WER_M','DPU:D',,1);
                  SRDO.actions('WER_P','DPU:D',,1);
                  SRDO.actions('WER_W','DPU'+_tmpsrdo+':D',,1);
                  SRZF.actions('WER','DPU:D',,1);
                  SRZF.actions('WER_U','DPU:D',,1)
               || SRST.actions('WER','A'+_tmpact,,1);
                  SRST.actions('WER_N','A'+_tmpact,,1);
                  SRST.actions('WER_U','',,1);
                  SRST.actions('DWER','A'+_tmpact,_b,1);
                  SRST.actions('DWER_O','A'+_tmpact,_b,1);
                  SRST.actions('DWER_N','A'+_tmpact,_b,1);
                  SRST.actions('DWER_N_O','A'+_tmpact,_b,1);
                  SRDO.actions('WER','D(WAMI)PU'+_tmpsrdo+':D(WAMI)',,1);
                  SRDO.actions('WER_I','DPU:D',,1);
                  SRDO.actions('WER_L','DPU:D',,1);
                  SRDO.actions('WER_M','DPU:D',,1);
                  SRDO.actions('WER_W','DPU'+_tmpsrdo+':D',,1);
                  SRZF.actions('WER','',,1);
                  SRZF.actions('WER_U','',,1)
               ?}
            || SRST.actions('WER','',,1);
               SRST.actions('WER_N','',,1);
               SRST.actions('WER_U','',,1);
               SRST.actions('DWER','',_b,1);
               SRST.actions('DWER_O','',_b,1);
               SRST.actions('DWER_N','',_b,1);
               SRST.actions('DWER_N_O','',_b,1);
               SRDO.actions('WER','',,1);
               SRDO.actions('WER_I','',,1);
               SRDO.actions('WER_L','',,1);
               SRDO.actions('WER_M','',,1);
               SRDO.actions('WER_P','',,1);
               SRDO.actions('WER_W','',,1);
               SRZF.actions('WER','',,1);
               SRZF.actions('WER_U','',,1);
               exec('srst_cechy','fst_ext')
            ?}
         ?};
         OKRO_F.cntx_pop();
         1
   "),

   obj_meth('selectAssets',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda wyświetla kartotekę środków
::   WE: [_a] - link do rekordu SRST
::----------------------------------------------------------------------------------------------------------------------
         _select:=0;
         {! |?
::          uruchomienie specjalne: z przekazanym linkiem
            {? _select=0 & _>0 & type_of(_a)=type_of('') & +_a=48
            ||
::             jeżeli przekazano link do dokumentu środka
               _dokument:='';
               _elem:=null;
               {? ref_tab(_a)=SRDO
               || _dokument:=_a;
                  SRDO.cntx_psh(); SRSR.cntx_psh(); SRST.cntx_psh();
                  SRDO.prefix(); SRST.prefix();
                  {? SRDO.seek(_a,SRDO.name())
                  || SRST.index('SROD');
                     SRST.prefix(SRDO.SRSR,SRDO.ROK_F,SRDO.OKRO_F);
                     {? SRST.first()
                     || _a:=SRST.uidref()
                     || _a:=''
                     ?}
                  ?};
                  SRDO.cntx_pop(); SRSR.cntx_pop(); SRST.cntx_pop()
               ?};

               _set:=0;
               {? _a<>''
               || _odd:=exec('FindAndGet','#table',SRST,_a,,\"ODD\",'');
                  _okres:=exec('FindAndGet','#table',SRST,_a,,\"OKRO_F\",0);

                  {? _odd & _okres
                  || {? exec('usr_fjks','b_perm',_odd)
                     || __PARSES.setVal('JednostkaKsięgowa',_odd);
                        __PARSES.setVal('OkresRok',_okres);
                       _set:=1
                     || FUN.emsg('Brak uprawnień do jednostki księgowej związanej z przekazanym linkiem.'@)
                     ?}
                  || FUN.emsg('Nie udało się ustawić prawidłowych parametrów pracy na podstawie przekazanego linku.'@)
                  ?}
               ?};

               {? _set
               || SRST.index('OKRES');
                  _ref:=exec('getOkresRok','fst',1);
                  {? _ref
                  || .setActions(_ref);
                     SRSR.prefix();

                     _t_upr:=(exec('hasAction','users','FST_EWI_ZASA',OPERATOR.USER)
                               | exec('hasAction','users','FST_EWI_DESN',OPERATOR.USER));
                     _n_upr:=(exec('hasAction','users','FST_EWI_ZASB',OPERATOR.USER)
                               | exec('hasAction','users','FST_EWI_DESR',OPERATOR.USER));
                     _u_upr:=(exec('hasAction','users','FST_EWI_ZASD',OPERATOR.USER)
                               | exec('hasAction','users','FST_EWI_DESS',OPERATOR.USER));

                     _d_upr:=0;

                     {? SRST.seek(_a,SRST.name())
                     || _form:='';
                        {? var_pres('__DTREE') & __DTREE>0 || _prefix:='d' || _prefix:='' ?};

:: dodatkowa obsługa w przypadku linku do dokumentu środka
                        _dok_form:='';
                        {? _dokument<>''
                        || _d_upr:=(exec('hasAction','users','FST_EWI_DRDA',OPERATOR.USER)
                                  | exec('hasAction','users','FST_EWI_DRDZ',OPERATOR.USER)
                                  | exec('hasAction','users','FST_EWI_DRDF',OPERATOR.USER)
                                  | exec('hasAction','users','FST_EWI_DRDM',OPERATOR.USER)
                                  | exec('hasAction','users','FST_EWI_DRDK',OPERATOR.USER));
                           {? _d_upr
                           || SRDO.seek(_dokument,SRDO.name());
                              _dok_form:=';win_activate(\'\'zsrdo_wer\'\')'
                           ?}
                        ?};

:: dodatkowa obsługa w przypadku linku do elementu zestawu i pracy w oknie bez drzewa i bez widocznych elementów
                        {? SRST.GRP='E' & (var_pres('__DTREE')<=0 | __DTREE=0) & (var_pres('__LELEM')<=0 | __LELEM=0)
                        || _elem:=SRST.ref();
                           {? SRST.seek(SRST.TREE,SRST.name())
                           || _dok_form:=';exec(\'\'skladowe\'\',\'\'fst\'\',\'\''+$_elem+'\'\')'
                           ?}
                        ?};

                        {? SRST.R='T' & _t_upr
                        || _form:={? _dok_form<>'' || 1-_dok_form || '' ?}
                        |? SRST.R='T' & _t_upr=0 & _u_upr
                        || _form:='win_activate(\'\'zsrst_'+_prefix+'wer_u\'\')'+_dok_form
                        |? SRST.R='N'
                        || {? _n_upr
                           || _form:='win_activate(\'\'zsrst_'+_prefix+'wer_n\'\')'+_dok_form
                           |? _u_upr
                           || _form:='win_activate(\'\'zsrst_'+_prefix+'wer_u\'\')'+_dok_form
                           ?}
                        ?};

                        _win:=exec('create_win','fst');
                        exec('title','dok_fks',SRST,_win);

                        {? SRST.R='T'
                        || {? _t_upr & (_dokument='' | (_dokument<>''  & _d_upr))
                           || SRST.prefix('T');
                              {? _dokument<>'' | _elem
                              || _select:=SRST.select(,1,5,,,$_form)
                              || _select:=SRST.select(,1,5)
                              ?}
                           |? _u_upr
                           || _select:=SRST.select(,1,5,,,$_form)
                           || FUN.info('Brak uprawnień do wyświetlenia rekordu przekazanego linkiem.'@)
                           ?}
                        |? SRST.R='N'
                        || {? _n_upr
                           || SRST.prefix('N');
                              _select:=SRST.select(,1,5,,,$_form)
                           |? _u_upr
                           || _select:=SRST.select(,1,5,,,$_form)
                           || FUN.info('Brak uprawnień do wyświetlenia rekordu przekazanego linkiem.'@)
                           ?}
                        ?}
                     || FUN.info('Nie odnaleziono rekordu zgodnego z przekazanym linkiem.'@)
                     ?}
                  || FUN.info('Nie udało się ustalić obowiązującego okresu pracy dla obszaru FST.\n Należy zweryfikować '
                              'poprawność linku.'@)
                  ?}
               ?}
            ||
::             standardowe uruchamianie obszaru
               _win:=exec('create_win','fst');

               SRST.index('OKRES');
               SRST.prefix('T');
               _ref:=exec('getOkresRok','fst',1);
               {? _ref
               || .setActions(_ref);
                  SRSR.prefix();
                  _SrsrSize:=exec('srsr_size','srodobj');
                  {? _SrsrSize>0
                  || _rok:=exec('find_rok_by_okro','fst',_ref);
                     {? _rok
                     || _naz_rok:=exec('naz_rok','fst',_rok);
:: jeżeli nie ma rekordów z rejestru stanów w ostatnim roku obszaru FST roku ale są w poprzednich
:: to do systemu dodano nowy rok bez danych - należy uzupełnić rejestr stanów środków
                        SRST.cntx_psh(); SRSR.cntx_psh(); SRSW.cntx_psh();
                        SRST.index('ROK'); SRST.prefix();
                        {? SRST.first() || _all:=1 || _all:=0 ?};
                        _last:=exec('last_year_data','fst');
                        {? _all & ~_last
                        || FUN.info('W systemie istnieje nowy rok w obszarze środków trwałych.\n\n'
                                    'Nowy rok nie ma utworzonych danych w rejestrze stanów środków.\n'
                                    'System uruchomi mechanizm aktualizacji danych rejestru stanów\n'
                                    'Uwaga: operacja może być czasochłonna.'@);
                           echo('Trwa tworzenie rejestru stanów środków dla nowego roku...'@);
                           __EOKREF:=exec('last_okr_data','fst');
                           {? __EOKREF
                           || {? ~do_state() || do() ?};
                              SRSR.for_each(\"SRD.updateRecState(__EOKREF)\",1);
                              end()
                           ?};
                           echo('')
                        ?};
                        SRST.cntx_pop(); SRSR.cntx_pop(); SRSW.cntx_pop()
                     ?}
                  ?};

                  exec('title','dok_fks',SRST,_win);
                  _select:=SRST.select(,1);
                  BEER.ESC:=0
               || FUN.info('Nie udało się ustalić obowiązującego okresu pracy dla obszaru FST.\n Należy zweryfikować '
                           'ustawienia w parametrach pracy.'@)
               ?}
            ?};
            _select
         !}
   "),

   obj_meth('getValue',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Metoda zwraca wskazany rodzaj wartości dla podanego okresu i toru
::   WE: _a - wskazanie na środek [SRSR.ref()]
::       _b - rok podatkowy [INT]
::       _c - okres podatkowy [INT]
::       _d - tor amortyzacji [STRING[1]] (możliwe wartości 'P' - podatkowa, 'F' - finansowa, 'D' - dodatkowa)
::       _e - rodzaj wartości 'W' - wartość, 'U' - umorzenie, 'A' - amortyzacja, 'N' - netto
::   WY: wartość amortyzacji
::----------------------------------------------------------------------------------------------------------------------
         _wy:=0;
         SRST.cntx_psh();
         SRST.index('PODAT');
         SRST.prefix(_a,_b,_c);
         {? SRST.first()
         || {? _d='P'
            || {? _e='W' || _wy:=SRST.WARP
               |? _e='U' || _wy:=SRST.UMOP
               |? _e='A' || _wy:=SRST.AMOP
               |? _e='N' || _wy:=SRST.NETP
               ?}
            |? _d='F'
            || {? _e='W' || _wy:=SRST.WARF
               |? _e='U' || _wy:=SRST.UMOF
               |? _e='A' || _wy:=SRST.AMOF
               |? _e='N' || _wy:=SRST.NETF
               ?}
            |? _d='D'
            || {? _e='W' || _wy:=SRST.WARD
               |? _e='U' || _wy:=SRST.UMOD
               |? _e='A' || _wy:=SRST.AMOD
               |? _e='N' || _wy:=SRST.NETD
               ?}
            ?}
         ?};
         SRST.cntx_pop();
         _wy
   "),

   obj_meth('isCalcPossible',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy możliwe jest obliczanie amortyzacji dla środka (są wszystkie potrzebne dane)
::----------------------------------------------------------------------------------------------------------------------
          _data:=1;
          {? SRST.MP=null | SRST.MF=null | (FINFO.TOR_D='T' & SRST.MD=null)
          || {? SRD.KOMM='T'
             || KOMM.add('Środek: %1: Brak danych dotyczących metod amortyzacji.'@[SRST.NRI])
             || FUN.emsg('Środek: %1: Brak danych dotyczących metod amortyzacji.'@[SRST.NRI])
             ?};
             _data:=0
          ?};
          {? _data
          || {? (1+SRST.MP().T='D' | 1+SRST.MF().T='D' | (FINFO.TOR_D='T' & 1+SRST.MD().T='D'))
                & FINFO.SRST_MET=null
             || {? SRD.KOMM='T'
                || KOMM.add('W podstawowych parametrach środków trwałych '
                            'nie wskazano typu dokumentu zmiany metody obsługującego przejście z metody degresywnej '
                            'na liniową. Amortyzacja dla środka z metodą degresywną nie może być obliczona.'@)
                || FUN.emsg('W podstawowych parametrach środków trwałych '
                            'nie wskazano typu dokumentu zmiany metody obsługującego przejście z metody degresywnej '
                            'na liniową. Amortyzacja dla środka z metodą degresywną nie może być obliczona.'@)
                ?};
                _data:=0
             ?}
          ?};
          {? _data
          || {? (SRST.MF().PD='' & SRST.MF().PL='') | (SRST.MP().PD='' & SRST.MP().PL='')
                | (FINFO.TOR_D='T' & SRST.MD().PD='' & SRST.MD().PL='')
             || {? SRD.KOMM='T'
                || KOMM.add('Środek: %1: Należy uzupełnić definicje metod amortyzacji środka.'@[SRST.NRI])
                || FUN.emsg('Środek: %1: Należy uzupełnić definicje metod amortyzacji środka.'@[SRST.NRI])
                ?};
                _data:=0
             ?}
          ?};
          _data
   "),

   obj_meth('sez_miesiac_akt',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda weryfikuje czy w podanym okresie wg schematu sezonów dla środka należy obliczać amortyzację
::   WE: _a - nazwa miesiąca kalendarzowego
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
         _m:=0;
         {? _a='styczeń' & SRST.SCH_SEZ().M1='T' || _m:=1 ?};
         {? ~_m & _a='luty' & SRST.SCH_SEZ().M2='T' || _m:=1 ?};
         {? ~_m & _a='marzec' & SRST.SCH_SEZ().M3='T' || _m:=1 ?};
         {? ~_m & _a='kwiecień' & SRST.SCH_SEZ().M4='T' || _m:=1 ?};
         {? ~_m & _a='maj' & SRST.SCH_SEZ().M5='T' || _m:=1 ?};
         {? ~_m & _a='czerwiec' & SRST.SCH_SEZ().M6='T' || _m:=1 ?};
         {? ~_m & _a='lipiec' & SRST.SCH_SEZ().M7='T' || _m:=1 ?};
         {? ~_m & _a='sierpień' & SRST.SCH_SEZ().M8='T' || _m:=1 ?};
         {? ~_m & _a='wrzesień' & SRST.SCH_SEZ().M9='T' || _m:=1 ?};
         {? ~_m & _a='październik' & SRST.SCH_SEZ().M10='T' || _m:=1 ?};
         {? ~_m & _a='listopad' & SRST.SCH_SEZ().M11='T' || _m:=1 ?};
         {? ~_m & _a='grudzień' & SRST.SCH_SEZ().M12='T' || _m:=1 ?};
         _m
   "),

   obj_meth('sez_miesiac_nr',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda weryfikuje czy w podanym okresie wg schematu sezonów dla środka należy obliczać amortyzację
::       wersja dla lat nieistniejących w systemie, w przypadku obliczania planów amortyzacji
::   WE: _a - numer miesiąca
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
         _m:=0;
         {? _a=1 & SRST.SCH_SEZ().M1='T' || _m:=1 ?};
         {? ~_m & _a=2 & SRST.SCH_SEZ().M2='T' || _m:=1 ?};
         {? ~_m & _a=3 & SRST.SCH_SEZ().M3='T' || _m:=1 ?};
         {? ~_m & _a=4 & SRST.SCH_SEZ().M4='T' || _m:=1 ?};
         {? ~_m & _a=5 & SRST.SCH_SEZ().M5='T' || _m:=1 ?};
         {? ~_m & _a=6 & SRST.SCH_SEZ().M6='T' || _m:=1 ?};
         {? ~_m & _a=7 & SRST.SCH_SEZ().M7='T' || _m:=1 ?};
         {? ~_m & _a=8 & SRST.SCH_SEZ().M8='T' || _m:=1 ?};
         {? ~_m & _a=9 & SRST.SCH_SEZ().M9='T' || _m:=1 ?};
         {? ~_m & _a=10 & SRST.SCH_SEZ().M10='T' || _m:=1 ?};
         {? ~_m & _a=11 & SRST.SCH_SEZ().M11='T' || _m:=1 ?};
         {? ~_m & _a=12 & SRST.SCH_SEZ().M12='T' || _m:=1 ?};
         _m
   "),

   obj_meth('curMonth',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy w przekazanym okresie dla środka należy naliczać amotyzację
::       _a - nr roku podatkowego
::       _b - nr okresu podatkowego
::       _c - tor amortyzacji 'P'/'F'/'D'
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
         {? SRST.S='N' | (_c='F' & SRST.MF().NOSEZON='T') | (_c='P' & SRST.MP().NOSEZON='T')
         || _oes:=_b;
            {? SRST.MP().MP=1
            || _ref:=exec('find_next_okro','fst',SRST.SRSR().ROK_F,SRST.SRSR().OKRO_F().NR)
            || _ref:=null
            ?};
            _rok:=SRST.SRSR().OKRO_F().RES;
            _okres:=SRST.SRSR().OKRO_F().OES;
            {? _c='P'
            || {? SRST.MP().CZESTO='M' || 1
               |? SRST.MP().CZESTO='K' || _oes%*3=0
               |? SRST.MP().CZESTO='R' || _oes=12
               |? SRST.MP().CZESTO='J' || (SRST.MP().MP=0 & _rok=_a & _okres=_b)
                                           | (SRST.MP().MP=1 & _rok=_a & _okres+1=_b)
               ?}
            |? _c='F'
            || {? SRST.MF().CZESTO='M' || 1
               |? SRST.MF().CZESTO='K' || _oes%*3=0
               |? SRST.MF().CZESTO='R' || _oes=12
               |? SRST.MF().CZESTO='J' || _oes=1
               ?}
            |? _c='D'
            || {? SRST.MD().CZESTO='M' || 1
               |? SRST.MD().CZESTO='K' || _oes%*3=0
               |? SRST.MD().CZESTO='R' || _oes=12
               |? SRST.MD().CZESTO='J' || _oes=1
               ?}
            ?}
         || OKR_OBSZ.cntx_psh();
            _wy:=0;
            OKR_OBSZ.index('OKRO_ES');
            OKR_OBSZ.prefix(REF.FIRMA,SRD.FST,_a,_b);
            {? OKR_OBSZ.first()
            || _wy:=.sez_miesiac_akt(OKR_OBSZ.OKRO().NAZWA)
            || OKR_OBSZ.prefix(REF.FIRMA,SRD.FST);
               {? OKR_OBSZ.last()
               || {? OKR_OBSZ.OKRO_F().POCZ=date(0,0,0) || OKR_OBSZ.prev() ?};
                  {? OKR_OBSZ.OKRO_F().OES=OKR_OBSZ.OKRO_F().POCZ~2
                  || _przes:=0
                  || _przes:=OKR_OBSZ.OKRO_F().POCZ~2
                  ?};
                  _nr:={? SRST.OKRES+_przes>12 || SRST.OKRES+_przes-12 || SRST.OKRES+_przes ?};
                  _wy:=.sez_miesiac_nr(_nr);
                  {? _wy || _okres:=SRST.OKRES ?}
               ?}
            ?};
            OKR_OBSZ.cntx_pop();
            _wy
         ?}
   "),

   obj_meth('monthly',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda oblicza udział amortyzacji bieżącego okresu w amotyzacji rocznej.
::       Dla środków niesezonowych, amortyzowanych miesięcznie zawsze 1/12
::       Dla innych zależy od częstotliwości metody amortyzacji lub definicji schematu sezonów
::   WE: _a - tor amortyzacji 'P'/'F'/'D'
::----------------------------------------------------------------------------------------------------------------------
         {? SRST.S='N' | (_a='F' & SRST.MF().NOSEZON='T') | (_a='P' & SRST.MP().NOSEZON='T')
         || {? _a='P'
            || {? SRST.MP().PDM='T' & SRST.MP().MP=0
                  & (SRST.SRSR().OKRO_F().RES=SRST.ROK & SRST.SRSR().OKRO_F().OES=SRST.OKRES)
               || _dni:={? SRST.OKRO_F().KON<>date(0,0,0) || SRST.OKRO_F().KON~3 || 30 ?};
                  _dzien:=SRST.SRSR().DE~3;
                  {? SRST.SRSR().Z='T' & (SRSR.DES>=SRST.OKRO_F().POCZ & SRSR.DES<=SRST.OKRO_F().KON)
                  || _do:=SRSR.DES~3;
                     _pdm:=((_do-_dzien)+1)/_dni
                  || _pdm:=(_dni-_dzien+1)/_dni
                  ?}
               |? SRST.MP().PDM='T' & SRST.SRSR().Z='T' & SRSR.DES>=SRST.OKRO_F().POCZ & SRSR.DES<=SRST.OKRO_F().KON
               || _dni:=SRST.OKRO_F().KON~3;
                  _dzien:=SRST.SRSR().DES~3;
                  {? _dni>0 || _pdm:=_dzien/_dni || _pdm:=0 ?}
               || _pdm:=1
               ?};
               _czesto:=SRST.MP().CZESTO;
               {? _czesto='M' || 1/12 *_pdm
               |? _czesto='K' || 1/4
               |? _czesto='R' || 1
               |? _czesto='J' || 1
               ?}
            |? _a='F'
            || {? SRST.MF().PDM='T' & SRST.MF().MP=0
                  & (SRST.SRSR().OKRO_F().RES=SRST.ROK & SRST.SRSR().OKRO_F().OES=SRST.OKRES)
               || _dni:={? SRST.OKRO_F().KON<>date(0,0,0) || SRST.OKRO_F().KON~3 || 30 ?};
                  _dzien:=SRST.SRSR().DE~3;
                  {? SRST.SRSR().Z='T' & (SRSR.DES>=SRST.OKRO_F().POCZ & SRSR.DES<=SRST.OKRO_F().KON)
                  || _do:=SRSR.DES~3;
                     _pdm:=((_do-_dzien)+1)/_dni
                  || _pdm:=(_dni-_dzien+1)/_dni
                  ?}
               |? SRST.MF().PDM='T' & SRST.SRSR().Z='T' & SRSR.DES>=SRST.OKRO_F().POCZ & SRSR.DES<=SRST.OKRO_F().KON
               || _dni:=SRST.OKRO_F().KON~3;
                  _dzien:=SRST.SRSR().DES~3;
                  {? _dni>0 || _pdm:=_dzien/_dni || _pdm:=0 ?}
               || _pdm:=1
               ?};
               _czesto:=SRST.MF().CZESTO;
               {? _czesto='M' || 1/12 * _pdm
               |? _czesto='K' || 1/4
               |? _czesto='R' || 1
               |? _czesto='J' || 1
               ?}
            |? _a='D'
            || {? SRST.MD().PDM='T' & SRST.MD().MP=0
                  & (SRST.SRSR().OKRO_F().RES=SRST.ROK & SRST.SRSR().OKRO_F().OES=SRST.OKRES)
               || _dni:={? SRST.OKRO_F().KON<>date(0,0,0) || SRST.OKRO_F().KON~3 || 30 ?};
                  _dzien:=SRST.SRSR().DE~3;
                  {? SRST.SRSR().Z='T' & (SRSR.DES>=SRST.OKRO_F().POCZ & SRSR.DES<=SRST.OKRO_F().KON)
                  || _do:=SRSR.DES~3;
                     _pdm:=((_do-_dzien)+1)/_dni
                  || _pdm:=(_dni-_dzien+1)/_dni
                  ?}
               |? SRST.MD().PDM='T' & SRST.SRSR().Z='T' & SRSR.DES>=SRST.OKRO_F().POCZ & SRSR.DES<=SRST.OKRO_F().KON
               || _dni:=SRST.OKRO_F().KON~3;
                  _dzien:=SRST.SRSR().DES~3;
                  {? _dni>0 || _pdm:=_dzien/_dni || _pdm:=0 ?}
               || _pdm:=1
               ?};
               _czesto:=SRST.MD().CZESTO;
               {? _czesto='M' || 1/12 *_pdm
               |? _czesto='K' || 1/4
               |? _czesto='R' || 1
               |? _czesto='J' || 1
               ?}
            ?}
         || _m:=0;
            {? SRST.SCH_SEZ().M1='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M2='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M3='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M4='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M5='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M6='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M7='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M8='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M9='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M10='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M11='T' || _m+=1 ?};
            {? SRST.SCH_SEZ().M12='T' || _m+=1 ?};
            {? _m>0 || 1/_m || 0 ?}
         ?}
   "),

   obj_meth('cumulative',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca amortyzację narastająco dla bieżącego środka dla podanego toru amotyzacji
::   WE: _a - tor amortyzacji ('AMOP', AMOF','AMOD')
::   WY: amortyzacja narastająco
::----------------------------------------------------------------------------------------------------------------------
         _wy:=0;
         _oes:=SRST.OKRES;
         _res:=SRST.ROK;
         {? _a='AMOP'
         || _sql:='SELECT SUM(SRST.AMOP) AS SAMORT FROM SRST WHERE SRST.SRSR=:_a '
                 +'AND SRST.OKRES>=1 AND SRST.OKRES<=12 '
                 +'AND (SRST.ROK<:_b OR (SRST.ROK=:_b AND SRST.OKRES<=:_c))'
         |? _a='AMOF'
         || _sql:='SELECT SUM(SRST.AMOF) AS SAMORT FROM SRST WHERE SRST.SRSR=:_a '
                 +'AND SRST.OKRES>=1 AND SRST.OKRES<=12 '
                 +'AND (SRST.ROK<:_b OR (SRST.ROK=:_b AND SRST.OKRES<=:_c))'
         |? _a='AMOD'
         || _sql:='SELECT SUM(SRST.AMOD) AS SAMORT FROM SRST WHERE SRST.SRSR=:_a '
                 +'AND SRST.OKRES>=1 AND SRST.OKRES<=12 '
                 +'AND (SRST.ROK<:_b OR (SRST.ROK=:_b AND SRST.OKRES<=:_c))'
         ?};

         _tmp:=sql(_sql,SRST.SRSR,_res,_oes);
         {? _tmp.first() || _wy:=_tmp.SAMORT ?};

         SRDO.cntx_psh();
         {? SRST.GRP<>'E'
         || SRDO.index('SRODZAJ');
            SRDO.prefix(SRST.SRSR,'W')
         || SRDO.index('SRODZAJE');
            _root:=exec('get_srsr_root','fst',SRST.SRSR);
            SRDO.prefix(_root,SRST.SRSR,'W')
         ?};
:: NUCO - zmiana dla roku przesuniętego
         {? SRDO.first()
         || {! |?
               {? (#(4+SRDO.ROK_F().NAZ)<_res | (#(4+SRDO.ROK_F().NAZ)=_res & SRDO.OKRES<=_oes))
                  & (SRST.GRP='N' | SRST.GRP='T' | (SRST.GRP='E' & SRDO.SRSR_E=SRST.SRSR))
                  & (SRDO.TYP().P<>'S' | (SRDO.TYP().P='S' & SRDO.Z='T'))
               || {? _a='AMOP' || _wy+=SRDO.UMOP
                  |? _a='AMOF' || _wy+=SRDO.UMOF
                  |? _a='AMOD' || _wy+=SRDO.UMOD
                  ?}
               ?};
               SRDO.next()
            !}
         ?};
         SRDO.cntx_pop();
         _wy
   "),

   obj_meth('cumulativeComp',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca amortyzację narastająco dla bieżącego składnika środka dla podanego toru amotyzacji
::   WE: _a - tor amortyzacji ('AMOP', AMOF','AMOD')
::   WY: amortyzacja narastająco
::----------------------------------------------------------------------------------------------------------------------
         _wy:=0;
         _oes:=SRSW.SRST().OKRES;
         _res:=SRSW.SRST().ROK;
         _typ:=SRSW.TYP;
         _srzf:=SRSW.SRZF;

         SRSR.cntx_psh(); SRSW.cntx_psh();
         {? SRSW.prev()
         || SRSR.prefix();
            _wy:={? _a='AMOP' || SRSW.UMOP-{? _typ='W' || SRSW.SRST().SRSR().UMOP || 0 ?}
                 |? _a='AMOF' || SRSW.UMOF-{? _typ='W' || SRSW.SRST().SRSR().UMOF || 0 ?}
                 |? _a='AMOD' || SRSW.UMOD-{? _typ='W' || SRSW.SRST().SRSR().UMOD || 0 ?}
                 ?}
         || _wy:=0
         ?};
         SRSW.cntx_pop(); SRSR.cntx_pop();
         _wy
   "),


   obj_meth('calcAMOP',"";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda oblicza amotyzację bieżącego środka dla toru podatkowego
::   WE: _a - jeśli 1 to wywołanie dla el. zestawu
::----------------------------------------------------------------------------------------------------------------------
         _dalej:=1;
         _real:=(5+SRSR.name())+1='r';

         _warp_z:=_continue:=_WARP:=_wspol:=_podst:=0;
         _proceed:=1;
         _ztree:=null;
         _r:='';
         _okro_f:=_odd:=null;
         _lisr:=SRST.NETP;
         _source:=SRST.ref();
         {? _>0 & _a=1
         || SRST.cntx_psh();
            SRST.prefix();
            {? SRST.seek(SRST.TREE,ref_name(_source))
            || _warp_z:=SRST.WARP;
               _ztree:=SRST.ref();
               _r:=SRST.R;
               _okro_f:=SRST.OKRO_F;
               _odd:=SRST.ODD;
               _podst:=SRST.NETP;
               {? 1+SRST.MP().T='L'
               || _WARP:=($SRST.MP().PL)()
               |? 1+SRST.MP().T='D'
               || _WARP:=($SRST.MP().PD)()
               ?}
            ?};
            SRST.index('TREE');
            SRST.prefix(_r,_okro_f,_odd,_ztree);
            SRSR.cntx_psh();
            {? SRST.first()
            || {! |?
                  {? SRST.NETP=0
                  || _continue:=1
                  ?};
                  {? ~((SRST.ROK>SRST.SRSR().ROK | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES>SRST.SRSR().OKRES))
                     | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES=SRST.SRSR().OKRES & SRST.MP().MP=0))
                  || _podst-=SRST.NETP
                  ?};
                  SRST.next()
               !}
            ?};
            SRSR.cntx_pop();
            SRST.cntx_pop();
            {? ~_continue | SRST.NETP=0
            || _proceed:=0
            ?};
            {? _podst<=0
            || _podst:=1
            ?};
            _wspol:=_lisr/_podst
         || _proceed:=0
         ?};
         {? ~_proceed
         || _wspol:=1
         ?};

         {? SRST.SRSR().AMOR100='T'
            & ((_real & SRST.OKRO_F().ROK().POCZ_ROK<=SRST.SRSR().DE & SRST.OKRO_F().ROK().KON_ROK>=SRST.SRSR().DE)
               | (~_real & date(SRST.ROK,1,1)<=SRST.SRSR().DE & date(SRST.ROK,12,0)>=SRST.SRSR().DE))
            & (SRST.ROK>SRST.SRSR().ROK | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES>=SRST.SRSR().OKRES))
         ||
:: amortyzacja jednorazowa do 100 tys. którą należy rozliczyć w bieżącym roku (z uwzględnieniem zwiększenia z dokumentów)
            {? SRST.SRSR().FREQ100().KOD='P' & ((_real & SRST.OKRO_F=SRST.SRSR().OKRO_F)
               | (~_real & SRST.ROK=SRST.SRSR().ROK & SRST.OKRES=SRST.SRSR().OKRES))
            || SRST.UMOP:=(SRST.SRSR().UMOP+(.cumulative('AMOP')))$FINFO.DOKL;
               SRST.AMOP:=(SRST.WARP100)$FINFO.DOKL;
               SRST.UMOP:=(SRST.UMOP+SRST.AMOP)$FINFO.DOKL;
               SRST.NETP:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL;
               SRST.NETPK:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL
            |? SRST.SRSR().FREQ100().KOD='P' & ((_real & SRST.OKRO_F<>SRST.SRSR().OKRO_F)
               | (~_real & SRST.ROK=SRST.SRSR().ROK & SRST.OKRES>SRST.SRSR().OKRES))
            || _c_amop:=(.cumulative('AMOP'));
               {? SRST.SRSR().WARP100=SRST.WARP100
               || SRST.AMOP:=0
               || {? _c_amop<SRST.WARP100 || SRST.AMOP:=SRST.WARP100-_c_amop || SRST.AMOP:=0 ?}
               ?};
               SRST.UMOP:=(SRST.SRSR().UMOP+(_c_amop)+SRST.AMOP)$FINFO.DOKL;
               SRST.NETP:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL;
               SRST.NETPK:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL
            |? SRST.SRSR().FREQ100().KOD='R' & ((_real & SRST.OKRO_F().OES=12)
               | (~_real & SRST.ROK=SRST.SRSR().ROK & SRST.OKRES=12))
            || SRST.UMOP:=(SRST.SRSR().UMOP+(.cumulative('AMOP')))$FINFO.DOKL;
               {? SRST.WARP-(SRST.UMOP+SRST.SRSR().ZALP100)>0
               || SRST.AMOP:=(SRST.WARP100)$FINFO.DOKL;
                  SRST.UMOP:=(SRST.UMOP+SRST.AMOP)$FINFO.DOKL;
                  SRST.NETP:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL;
                  SRST.NETPK:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL
               || SRST.AMOP:=0
               ?}
            |? SRST.SRSR().FREQ100().KOD='K'
            || {? ((_real & SRST.OKRO_F().OES%*3=0) | (~_real & SRST.ROK=SRST.SRSR().ROK & SRST.OKRES%*3=0))
               || _count:=0;
                  {? _real || _from:=SRST.SRSR().OKRO_F().OES || _from:=SRST.SRSR().OKRES ?};
                  {? SRST.SRSR().WARP100<>SRST.WARP100
                  || _from:=SRST.OKRO_F().OES
                  ?};
                  {! _i:=_from..12 |!
                     {? _i%*3=0 || _count+=1 ?}
                  !};
                  {? _count=0 || _count+=1 ?};
                  _ile_m:=1/_count;
                  _c_amop:=.cumulative('AMOP');
                  SRST.UMOP:=(SRST.SRSR().UMOP+(_c_amop))$FINFO.DOKL;
                  {? SRST.WARP-(SRST.UMOP+SRST.SRSR().ZALP100)>0
                  || {? SRST.SRSR().WARP100=SRST.WARP100
                     || SRST.AMOP:=(SRST.SRSR().WARP100*_ile_m)$FINFO.DOKL
                     || SRST.AMOP:=((SRST.WARP100-_c_amop)*_ile_m)$FINFO.DOKL
                     ?};
                     {? (_real & SRST.OKRO_F().OES=12) | (~_real & SRST.OKRES=12)
                     || _suma:=(exec('suma_amor','fst',SRSR.ref(),SRST.ROK,'P',1,11)+SRST.AMOP)$FINFO.DOKL;
                        _teoria:=SRST.WARP100;
                        {? _suma<>_teoria || SRST.AMOP+=(_teoria-_suma) ?}
                     ?};
                     SRST.UMOP:=(SRST.UMOP+SRST.AMOP)$FINFO.DOKL;
                     SRST.NETP:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL;
                     SRST.NETPK:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL
                  || SRST.AMOP:=0
                  ?}
               || SRST.UMOP:=(SRST.SRSR().UMOP+(.cumulative('AMOP')))$FINFO.DOKL;
                  SRST.NETP:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL;
                  SRST.NETPK:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL
               ?}
            |? SRST.SRSR().FREQ100().KOD='M'
            || {? _real || _oes:=SRST.SRSR().OKRO_F().OES || _oes:=SRST.SRSR().OKRES ?};
               {? SRST.SRSR().WARP100<>SRST.WARP100
               || _oes:=SRST.OKRO_F().OES
               ?};
               _count:=(12-_oes+1);
               _ile_m:=1/_count;
               _c_amop:=.cumulative('AMOP');
               SRST.UMOP:=(SRST.SRSR().UMOP+(_c_amop))$FINFO.DOKL;
               {? SRST.WARP-(SRST.UMOP+SRST.SRSR().ZALP100)>0
               || {? SRST.SRSR().WARP100<>SRST.WARP100
                  || SRST.AMOP:=((SRST.WARP100-_c_amop)*_ile_m)$FINFO.DOKL
                  || SRST.AMOP:=(SRST.SRSR().WARP100*_ile_m)$FINFO.DOKL
                  ?};
                  {? (_real & SRST.OKRO_F().OES=12) | (~_real & SRST.OKRES=12)
                  || {? _real
                     || _suma:=(exec('suma_amor','fst',SRSR.ref(),SRST.ROK,'P',1,11)+SRST.AMOP)$FINFO.DOKL
                     || _suma:=(SRST.SRSR().UMOP+exec('suma_amor','fst',SRSR.ref(),SRST.ROK,'P',1,11)+SRST.AMOP)$FINFO.DOKL
                     ?};
                     _teoria:=SRST.WARP100;
                     {? _suma<>_teoria || SRST.AMOP+=(_teoria-_suma) ?}
                  ?};
                  SRST.UMOP:=(SRST.UMOP+SRST.AMOP)$FINFO.DOKL;
                  SRST.NETP:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL;
                  SRST.NETPK:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL
               || SRST.AMOP:=0
               ?}
            ?}
         ||
            _proc:=SRST.STAP/100;
            _ile_m:=.monthly('P');
:: korekta parametru _ile_m jeżeli niepełny pierwszy kwartał amortyzacji
            {? SRST.MP().CZESTO='K' & SRST.SRSR().ROK=SRST.ROK & (SRST.OKRES-SRST.SRSR().OKRES<=2)
            || _ile_m:=_ile_m*((SRST.OKRES-SRST.SRSR().OKRES+1-SRST.MP().MP)/3)
            ?};

            {? (SRST.ROK>SRST.SRSR().ROK | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES>SRST.SRSR().OKRES))
               | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES=SRST.SRSR().OKRES & SRST.MP().MP=0)
            || {? .curMonth(SRST.ROK,SRST.OKRES,'P')
               || _zao:=SRST.OKRES=12 & exec('full_year','fst',SRSR.ref(),SRST.ROK,'P',SRST.MP().MP)
                        & (SRST.ROK>SRST.SRSR().ROK | SRST.MP().PDM='N');
                  {? 1+SRST.MP().T='L'
                  || {? ~_proceed
                     || _WARP:=($SRST.MP().PL)()
                     ?};
                     _wkp:=SRST.WKP;
                     SRST.UMOP:=(SRST.SRSR().UMOP+(.cumulative('AMOP')))$FINFO.DOKL;
                     {? SRST.WARP-(SRST.UMOP+SRST.SRSR().ZALP100)>0
                     || SRST.AMOP:=((_WARP*(_proc*_wkp))*_ile_m*_wspol)$FINFO.DOKL;
:: jeżeli to ostatni okres roku podatkowego to wyrównanie do amortyzacji rocznej
                        {? _zao
                        || _suma:=(exec('suma_amor','fst',SRSR.ref(),SRST.ROK,'P',1,11)+SRST.AMOP)$FINFO.DOKL;
                           _teoria:=(_WARP*_proc*_wkp*_wspol)$FINFO.DOKL;
                           {? _suma<>_teoria || SRST.AMOP+=(_teoria-_suma) ?}
                        ?};
:: jeżeli środek z metodą dzienną i zlikwidowany i amortyzacja dla ostatniego okresu
                        {? SRST.SRSR().Z='T' & SRST.MP().PDM='T' & SRST.SRSR().DES>=SRST.OKRO_F().POCZ
                           & SRST.SRSR().DES<=SRST.OKRO_F().KON
                        || {? (SRST.UMOP+SRST.AMOP)$FINFO.DOKL<>(SRST.SRSR().DOKSKR().UMOP*-1)
                           || SRST.AMOP+=((SRST.SRSR().DOKSKR().UMOP*-1)-(SRST.UMOP+SRST.AMOP)$FINFO.DOKL)
                           ?}
                        ?};
                        {? (SRST.UMOP+SRST.AMOP)$FINFO.DOKL>SRST.WARP
                        || SRST.AMOP:=(SRST.WARP-(SRST.UMOP))$FINFO.DOKL;
                           SRST.UMOP:=SRST.WARP
                        || SRST.UMOP:=(SRST.UMOP+SRST.AMOP)$FINFO.DOKL
                        ?}
                     || SRST.AMOP:=0
                     ?};
                     SRST.NETP:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL;
                     SRST.NETPK:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL
                  |? 1+SRST.MP().T='D'
                  || {? ~_proceed
                     || _WARP:=($SRST.MP().PD)()
                     ?};
                     _wkp:=SRST.WKP;
                     SRST.UMOP:=(SRSR.UMOP+(.cumulative('AMOP')))$FINFO.DOKL;
                     {? SRST.WARP-(SRST.UMOP+SRST.SRSR().ZALP100)>0
                     || SRST.AMOP:=((_WARP*(_proc*_wkp))*_ile_m*_wspol)$FINFO.DOKL;
:: jeżeli to ostatni okres roku podatkowego to wyrównanie do amortyzacji rocznej
                        {? _zao
                        || _suma:=(exec('suma_amor','fst',SRSR.ref(),SRST.ROK,'P',1,11)+SRST.AMOP)$FINFO.DOKL;
                           _teoria:=(_WARP*_proc*_wkp*_wspol)$FINFO.DOKL;
                           {? _suma<>_teoria || SRST.AMOP+=(_teoria-_suma) ?}
                        ?};
:: jeżeli środek z metodą dzienną i zlikwidowany i amortyzacja dla ostatniego okresu
                        {? SRST.SRSR().Z='T' & SRST.MP().PDM='T' & SRST.SRSR().DES>=SRST.OKRO_F().POCZ
                           & SRST.SRSR().DES<=SRST.OKRO_F().KON
                        || {? (SRST.UMOP+SRST.AMOP)$FINFO.DOKL<>(SRST.SRSR().DOKSKR().UMOP*-1)
                           || SRST.AMOP+=((SRST.SRSR().DOKSKR().UMOP*-1)-(SRST.UMOP+SRST.AMOP)$FINFO.DOKL)
                           ?}
                        ?};
                        {? (SRST.UMOP+SRST.AMOP)$FINFO.DOKL>SRST.WARP
                        || SRST.AMOP:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL;
                           SRST.UMOP:=SRST.WARP
                        || SRST.UMOP:=(SRST.UMOP+SRST.AMOP)$FINFO.DOKL
                        ?}
                     || SRST.AMOP:=0
                     ?};
                     SRST.NETP:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL;
                     SRST.NETPK:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL
                  ?}
               || SRST.UMOP:=(SRSR.UMOP+(.cumulative('AMOP')))$FINFO.DOKL;
                  SRST.NETP:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL;
                  SRST.NETPK:=(SRST.WARP-SRST.UMOP)$FINFO.DOKL
               ?}
            ?}
         ?};
         _dalej
   "),

   obj_meth('calcAMOF',"";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda oblicza amortyzację bieżącego środka dla toru bilansowego
::   WE: _a - jeśli _a - równe 'P' to plan amortyzacji
::       _b - jeśli równe 1 to wywołanie dla zestawu
::----------------------------------------------------------------------------------------------------------------------
         _proc:=SRST.STAF/100;
         _ile_m:=.monthly('F');

         _warf_z:=_continue:=_WARF:=_wspol:=_podst:=0;
         _proceed:=1;
         _ztree:=null;
         _r:='';
         _okro_f:=_odd:=null;
         _lisr:=SRST.NETF;
         _source:=SRST.ref();
         {? _>1 & _b=1
         || SRST.cntx_psh();
            SRST.prefix();
            {? SRST.seek(SRST.TREE,ref_name(_source))
            || _warf_z:=SRST.WARF;
               _ztree:=SRST.ref();
               _r:=SRST.R;
               _okro_f:=SRST.OKRO_F;
               _odd:=SRST.ODD;
               _podst:=SRST.NETF;
               {? 2+SRST.MF().T='Li'
               || _WARF:=($SRST.MF().PL)()-SRST.OSTATEK
               |? 1+SRST.MF().T='N' & SRST.GRP<>'T'
               || _WARF:=($SRST.MF().PL)()
               |? 1+SRST.MF().T='D'
               || _WARF:=($SRST.MF().PD)()
               |? 2+SRST.MF().T='Le'
               || _WARF:=($SRST.MF().PL)()
               ?}
            ?};
            SRST.index('TREE');
            SRST.prefix(_r,_okro_f,_odd,_ztree);
            SRSR.cntx_psh();
            {? SRST.first()
            || {! |?
                  {? SRST.NETF=0
                  || _continue:=1
                  ?};
                  {? ~((SRST.ROK>SRST.SRSR().ROK | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES>SRST.SRSR().OKRES))
                     | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES=SRST.SRSR().OKRES & SRST.MF().MP=0))
                  || _podst-=SRST.NETF
                  ?};
                  SRST.next()
               !}
            ?};
            SRSR.cntx_pop();
            SRST.cntx_pop();
            {? ~_continue | SRST.NETF=0
            || _proceed:=0
            ?};
            {? _podst<=0
            || _podst:=1
            ?};
            _wspol:=_lisr/_podst
         || _proceed:=0
         ?};
         {? ~_proceed
         || _wspol:=1
         ?};

:: korekta parametru _ile_m jeżeli niepełny pierwszy kwartał amortyzacji
         {? SRST.MF().CZESTO='K' & SRST.SRSR().ROK=SRST.ROK & (SRST.OKRES-SRST.SRSR().OKRES<=2)
         || _ile_m:=_ile_m*((SRST.OKRES-SRST.SRSR().OKRES+1-SRST.MF().MP)/3)
         ?};
         _dalej:=1;
         {? (SRST.ROK>SRST.SRSR().ROK | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES>SRST.SRSR().OKRES))
            | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES=SRST.SRSR().OKRES & SRST.MF().MP=0)
         || {? .curMonth(SRST.ROK,SRST.OKRES,'F')
            || _zao:=SRST.OKRES=12 & exec('full_year','fst',SRSR.ref(),SRST.ROK,'F',SRST.MF().MP)
                     & (SRST.ROK>SRST.SRSR().ROK | SRST.MF().PDM='N');
               {? 2+SRST.MF().T='Li'
               || {? ~_proceed
                  || _WARF:=($SRST.MF().PL)()-SRST.OSTATEK
                  ?};
                  _wkf:=SRST.WKF;
                  SRST.AMOF:=((_WARF*(_proc*_wkf))*_ile_m*_wspol)$FINFO.DOKL;
                  SRST.UMOF:=(SRSR.UMOF+(.cumulative('AMOF')))$FINFO.DOKL;
                  {? SRST.WARF-SRST.UMOF-SRST.OSTATEK>0
                  || SRST.AMOF:=((_WARF*(_proc*_wkf))*_ile_m*_wspol)$FINFO.DOKL;
:: jeżeli to ostatni okres roku podatkowego to wyrównanie do amortyzacji rocznej
                     {? _zao
                     || _suma:=(exec('suma_amor','fst',SRSR.ref(),SRST.ROK,'F',1,11)+SRST.AMOF)$FINFO.DOKL;
                        _teoria:=(_WARF*_proc*_wkf*_wspol)$FINFO.DOKL;
                        {? _suma<>_teoria || SRST.AMOF+=(_teoria-_suma) ?}
                     ?};
:: jeżeli środek z metodą dzienną i zlikwidowany i amortyzacja dla ostatniego okresu
                     {? SRST.SRSR().Z='T' & SRST.MF().PDM='T' & SRST.SRSR().DES>=SRST.OKRO_F().POCZ
                        & SRST.SRSR().DES<=SRST.OKRO_F().KON
                     || {? (SRST.UMOF+SRST.AMOF)$FINFO.DOKL<>(SRST.SRSR().DOKSKR().UMOF*-1)
                        || SRST.AMOF+=((SRST.SRSR().DOKSKR().UMOF*-1)-(SRST.UMOF+SRST.AMOF)$FINFO.DOKL)
                        ?}
                     ?};
                     {? (SRST.UMOF+SRST.AMOF)$FINFO.DOKL>SRST.WARF-SRST.OSTATEK
                     || SRST.AMOF:=(SRST.WARF-SRST.UMOF-SRST.OSTATEK)$FINFO.DOKL;
                        SRST.UMOF:=SRST.WARF-SRST.OSTATEK
                     || SRST.UMOF:=(SRST.UMOF+SRST.AMOF)$FINFO.DOKL
                     ?}
                  || SRST.AMOF:=0
                  ?};
                  SRST.NETF:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL;
                  SRST.NETFK:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL
               |? 1+SRST.MF().T='N' & SRST.GRP<>'T'
               || {? ~_proceed
                  || _WARF:=($SRST.MF().PL)()
                  ?};
                  SRST.UMOF:=(SRSR.UMOF+(.cumulative('AMOF')))$FINFO.DOKL;
                  {? SRST.WARF-SRST.UMOF>0
                  || {? _>0 & _a='P'
                     || _proc:=SRST.PZUZ/SRST.MAX
                     || _proc:=SRST.RZUZ/SRST.MAX
                     ?};
                     SRST.AMOF:=(_WARF*_proc*_wspol)$FINFO.DOKL;
:: jeżeli to ostatni okres amortyzacji naturalnej,a rozpisano wszystkie jednostki eksploatacji
:: w tabeli zużycia to należy wyrównać ze względu na zaokrąglenia
                     _licz_oke:=exec('oke_zuz','fst',SRST.ROK,SRST.OKRES);
                     {? _>0 & _a='P'
                     || _sum_zuz:=exec('sum_zuz','fst','P',SRST.ROK,SRST.OKRES,1)
                     || _sum_zuz:=exec('sum_zuz','fst','R',SRST.ROK,SRST.OKRES,1)
                     ?};
                     {? _licz_oke=SRST.OKE & _sum_zuz=SRST.MAX
                     || {? (SRST.UMOF+SRST.AMOF)$FINFO.DOKL<SRST.WARF
                        || SRST.AMOF+=(SRST.WARF-(SRST.UMOF+SRST.AMOF))$FINFO.DOKL
                        ?}
                     ?};
                     {? (SRST.UMOF+SRST.AMOF)$FINFO.DOKL>SRST.WARF
                     || SRST.AMOF:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL;
                        SRST.UMOF:=SRST.WARF
                     || SRST.UMOF:=(SRST.UMOF+SRST.AMOF)$FINFO.DOKL
                     ?}
                  || SRST.AMOF:=0
                  ?};
                  SRST.NETF:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL;
                  SRST.NETFK:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL
               |? 1+SRST.MF().T='D'
               || {? ~_proceed
                  || _WARF:=($SRST.MF().PD)()
                  ?};
                  _wkf:=SRST.WKF;
                  SRST.UMOF:=(SRSR.UMOF+(.cumulative('AMOF')))$FINFO.DOKL;
                  {? SRST.WARF-SRST.UMOF>0
                  || SRST.AMOF:=((_WARF*(_proc*_wkf))*_ile_m*_wspol)$FINFO.DOKL;
:: jeżeli to ostatni okres roku podatkowego to wyrównanie do amortyzacji rocznej
                     {? _zao
                     || _suma:=(exec('suma_amor','fst',SRSR.ref(),SRST.ROK,'F',1,11)+SRST.AMOF)$FINFO.DOKL;
                        _teoria:=(_WARF*_proc*_wkf*_wspol)$FINFO.DOKL;
                        {? _suma<>_teoria || SRST.AMOF+=(_teoria-_suma) ?}
                     ?};
:: jeżeli środek z metodą dzienną i zlikwidowany i amortyzacja dla ostatniego okresu
                     {? SRST.SRSR().Z='T' & SRST.MF().PDM='T' & SRST.SRSR().DES>=SRST.OKRO_F().POCZ
                        & SRST.SRSR().DES<=SRST.OKRO_F().KON
                     || {? (SRST.UMOF+SRST.AMOF)$FINFO.DOKL<>(SRST.SRSR().DOKSKR().UMOF*-1)
                        || SRST.AMOF+=((SRST.SRSR().DOKSKR().UMOF*-1)-(SRST.UMOF+SRST.AMOF)$FINFO.DOKL)
                        ?}
                     ?};
                     {? (SRST.UMOF+SRST.AMOF)$FINFO.DOKL>SRST.WARF
                     || SRST.AMOF:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL;
                        SRST.UMOF:=SRST.WARF
                     || SRST.UMOF:=(SRST.UMOF+SRST.AMOF)$FINFO.DOKL
                     ?}
                  || SRST.AMOF:=0
                  ?};
                  SRST.NETF:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL;
                  SRST.NETFK:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL
               |? 2+SRST.MF().T='Le'
               || {? ~_proceed
                  || _WARF:=($SRST.MF().PL)()
                  ?};
                  SRST.AMOF:=((_WARF*_proc)*_ile_m*_wspol)$FINFO.DOKL;
                  SRST.UMOF:=(SRSR.UMOF+(.cumulative('AMOF')))$FINFO.DOKL;
                  {? SRST.WARF-SRST.UMOF>0
                  || SRST.AMOF:=((_WARF*_proc)*_ile_m*_wspol)$FINFO.DOKL;
                     _dk:=exec('kon_amor_leas','srodobj',SRST.SRSR().DE,SRST.SRSR().STAF,SRST.SRSR().WKF,SRST.SRSR().MF().MP);
                     exec('szuk_okr','okresy',_dk);
                     _dka:=ROZNE.UT_OKROD;
                     _dp:=date(SRST.ROK,SRST.OKRES,1);
                     exec('szuk_okr','okresy',_dp);
                     _dp:=ROZNE.UT_OKROD;
                     {? _dka=SRST.OKRO_F | _dka=_dp
                     || _suma:=(exec('suma_amor','fst',SRSR.ref(),SRST.ROK,'F',1,11)+SRST.AMOF)$FINFO.DOKL;
                        _teoria:=(_WARF*_proc*_wspol)$FINFO.DOKL;
                        _amof:=SRST.AMOF;
                        _lm:=((100/SRST.STAF)*12)$0;
                        {? _suma<>_teoria || SRST.AMOF+=(_teoria-_suma) ?};
                        {? _dk~2=12
                        || SRST.AMOF+=_WARF-(_amof*_lm)
                        ?}
                     ?};
:: jeżeli środek z metodą dzienną i zlikwidowany i amortyzacja dla ostatniego okresu
                     {? SRST.SRSR().Z='T' & SRST.MF().PDM='T' & SRST.SRSR().DES>=SRST.OKRO_F().POCZ
                        & SRST.SRSR().DES<=SRST.OKRO_F().KON
                     || {? (SRST.UMOF+SRST.AMOF)$FINFO.DOKL<>(SRST.SRSR().DOKSKR().UMOF*-1)
                        || SRST.AMOF+=((SRST.SRSR().DOKSKR().UMOF*-1)-(SRST.UMOF+SRST.AMOF)$FINFO.DOKL)
                        ?}
                     ?};
                     {? (SRST.UMOF+SRST.AMOF)$FINFO.DOKL>SRST.WARF
                     || SRST.AMOF:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL;
                        SRST.UMOF:=SRST.WARF
                     || SRST.UMOF:=(SRST.UMOF+SRST.AMOF)$FINFO.DOKL
                     ?}
                  || SRST.AMOF:=0
                  ?};
                  SRST.NETF:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL;
                  SRST.NETFK:=(SRST.WARF-SRST.UMOF)$FINFO.DOKL
               ?}
            || SRST.UMOF:=(SRSR.UMOF+(.cumulative('AMOF')))$FINFO.DOKL
            ?}
         ?};
         _dalej
   "),

   obj_meth('calcAMOD',"";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda oblicza amotyzację bieżącego środka dla toru dodatkowego
::   WE: _a - jeśli 1 to wywołanie dla el. zestawu
::----------------------------------------------------------------------------------------------------------------------
         _proc:=SRST.STAD/100;
         _ile_m:=.monthly('D');

         _ward_z:=_continue:=_WARD:=_wspol:=_podst:=0;
         _proceed:=1;
         _ztree:=null;
         _r:='';
         _okro_f:=_odd:=null;
         _lisr:=SRST.NETD;
         _source:=SRST.ref();
         {? _>0 & _a=1
         || SRST.cntx_psh();
            SRST.prefix();
            {? SRST.seek(SRST.TREE,ref_name(_source))
            || _ward_z:=SRST.WARD;
               _ztree:=SRST.ref();
               _r:=SRST.R;
               _okro_f:=SRST.OKRO_F;
               _odd:=SRST.ODD;
               _podst:=SRST.NETD;
               {? 1+SRST.MD().T='L'
               || _WARD:=($SRST.MD().PL)()
               |? 1+SRST.MD().T='D'
               || _WARD:=($SRST.MD().PD)()
               ?}
            ?};
            SRST.index('TREE');
            SRST.prefix(_r,_okro_f,_odd,_ztree);
            SRSR.cntx_psh();
            {? SRST.first()
            || {! |?
                  {? SRST.NETD=0
                  || _continue:=1
                  ?};
                  {? ~((SRST.ROK>SRST.SRSR().ROK | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES>SRST.SRSR().OKRES))
                      | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES=SRST.SRSR().OKRES & SRST.MD().MP=0))
                  || _podst-=SRST.NETD
                  ?};
                  SRST.next()
               !}
            ?};
            SRSR.cntx_pop();
            SRST.cntx_pop();
            {? ~_continue | SRST.NETD=0
            || _proceed:=0
            ?};
            {? _podst<=0
            || _podst:=1
            ?};
            _wspol:=_lisr/_podst
         || _proceed:=0
         ?};
         {? ~_proceed
         || _wspol:=1
         ?};

:: korekta parametru _ile_m jeżeli niepełny pierwszy kwartał amortyzacji
         {? SRST.MD().CZESTO='K' & SRST.SRSR().ROK=SRST.ROK & (SRST.OKRES-SRST.SRSR().OKRES<=2)
         || _ile_m:=_ile_m*((SRST.OKRES-SRST.SRSR().OKRES+1-SRST.MD().MP)/3)
         ?};
         _dalej:=1;
         {? (SRST.ROK>SRST.SRSR().ROK | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES>SRST.SRSR().OKRES))
            | (SRST.ROK=SRST.SRSR().ROK & SRST.OKRES=SRST.SRSR().OKRES & SRST.MD().MP=0)
         || {? .curMonth(SRST.ROK,SRST.OKRES,'D')
            || _zao:=SRST.OKRES=12 & exec('full_year','fst',SRSR.ref(),SRST.ROK,'D',SRST.MD().MP)
                     & (SRST.ROK>SRST.SRSR().ROK | SRST.MD().PDM='N');
               {? 1+SRST.MD().T='L'
               || {? ~_proceed
                  || _WARD:=($SRST.MD().PL)()
                  ?};
                  _wkd:=SRST.WKD;
                  SRST.AMOD:=((_WARD*(_proc*_wkd))*_ile_m*_wspol)$FINFO.DOKL;
                  SRST.UMOD:=(SRSR.UMOD+(.cumulative('AMOD')))$FINFO.DOKL;
                  {? SRST.WARD-SRST.UMOD>0
                  || SRST.AMOD:=((_WARD*(_proc*_wkd))*_ile_m*_wspol)$FINFO.DOKL;
:: jeżeli to ostatni okres roku podatkowego to wyrównanie do amortyzacji rocznej
                     {? _zao
                     || _suma:=(exec('suma_amor','fst',SRSR.ref(),SRST.ROK,'D',1,11)+SRST.AMOD)$FINFO.DOKL;
                        _teoria:=(_WARD*_proc*_wkd*_wspol)$FINFO.DOKL;
                        {? _suma<>_teoria || SRST.AMOD+=(_teoria-_suma) ?}
                     ?};
:: jeżeli środek z metodą dzienną i zlikwidowany i amortyzacja dla ostatniego okresu
                     {? SRST.SRSR().Z='T' & SRST.MD().PDM='T' & SRST.SRSR().DES>=SRST.OKRO_F().POCZ
                        & SRST.SRSR().DES<=SRST.OKRO_F().KON
                     || {? (SRST.UMOD+SRST.AMOD)$FINFO.DOKL<>(SRST.SRSR().DOKSKR().UMOD*-1)
                        || SRST.AMOD+=((SRST.SRSR().DOKSKR().UMOD*-1)-(SRST.UMOD+SRST.AMOD)$FINFO.DOKL)
                        ?}
                     ?};
                     {? (SRST.UMOD+SRST.AMOD)$FINFO.DOKL>SRST.WARD
                     || SRST.AMOD:=(SRST.WARD-SRST.UMOD)$FINFO.DOKL;
                        SRST.UMOD:=SRST.WARD
                     || SRST.UMOD:=(SRST.UMOD+SRST.AMOD)$FINFO.DOKL
                     ?}
                  || SRST.AMOD:=0
                  ?};
                  SRST.NETD:=(SRST.WARD-SRST.UMOD)$FINFO.DOKL;
                  SRST.NETDK:=(SRST.WARD-SRST.UMOD)$FINFO.DOKL
               |? 1+SRST.MD().T='D'
               || {? ~_proceed
                  || _WARD:=($SRST.MD().PD)()
                  ?};
                  _wkd:=SRST.WKD;
                  {? _dalej
                  || SRST.UMOD:=SRSR.UMOD+(.cumulative('AMOD'))$FINFO.DOKL;
                     {? SRST.WARD-SRST.UMOD>0
                     || SRST.AMOD:=((_WARD*(_proc*_wkd))*_ile_m*_wspol)$FINFO.DOKL;
:: jeżeli to ostatni okres roku podatkowego to wyrównanie do amortyzacji rocznej
                        {? _zao
                        || _suma:=(exec('suma_amor','fst',SRSR.ref(),SRST.ROK,'D',1,11)+SRST.AMOD)$FINFO.DOKL;
                           _teoria:=(_WARD*_proc*_wkd*_wspol)$FINFO.DOKL;
                           {? _suma<>_teoria || SRST.AMOD+=(_teoria-_suma) ?}
                        ?};
:: jeżeli środek z metodą dzienną i zlikwidowany i amortyzacja dla ostatniego okresu
                        {? SRST.SRSR().Z='T' & SRST.MD().PDM='T' & SRST.SRSR().DES>=SRST.OKRO_F().POCZ
                           & SRST.SRSR().DES<=SRST.OKRO_F().KON
                        || {? (SRST.UMOD+SRST.AMOD)$FINFO.DOKL<>(SRST.SRSR().DOKSKR().UMOD*-1)
                           || SRST.AMOD+=((SRST.SRSR().DOKSKR().UMOD*-1)-(SRST.UMOD+SRST.AMOD)$FINFO.DOKL)
                           ?}
                        ?};
                        {? (SRST.UMOD+SRST.AMOD)$FINFO.DOKL>SRST.WARD
                        || SRST.AMOD:=(SRST.WARD-SRST.UMOD)$FINFO.DOKL;
                           SRST.UMOD:=SRST.WARD
                        || SRST.UMOD:=(SRST.UMOD+SRST.AMOD)$FINFO.DOKL
                        ?}
                     || SRST.AMOD:=0
                     ?};
                     SRST.NETD:=(SRST.WARD-SRST.UMOD)$FINFO.DOKL;
                     SRST.NETDK:=(SRST.WARD-SRST.UMOD)$FINFO.DOKL
                  ?}
               ?}
            || SRST.UMOD:=(SRSR.UMOD+(.cumulative('AMOD')))$FINFO.DOKL
            ?}
         ?};
         _dalej
   "),

   obj_meth('getLin',"PRIVATE";"
         _wy:=null;
         MA.cntx_psh();
         MA.index('TYPKOD');
         {? _=2 & type_of(_a)=type_of('') & _a<>'' & type_of(_b)=type_of('') & _b<>''
         || MA.prefix('Liniowa',_b,_a);
            {? MA.first() || _wy:=MA.ref() ?}
         ?};
         MA.cntx_pop();
         _wy
   "),


   obj_meth('switchToLin',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda tworzy automatycznie dokument przejścia z amortyzacji degresywnej na liniową
::       w pierwszym okresie roku podatkowego, jeżeli z obliczeń wynika że metoda liniowa jest już
::       korzystniejsza.
::   WE: _a - tor amortyzacji 'P'/'F'/'D' (podatkowy/bilansowy/dodatkowy)
::----------------------------------------------------------------------------------------------------------------------
         SRST.cntx_psh(); SRSR.cntx_psh();
         {? SRST.GRP='E'
         || SRST.prefix();
            SRSR.prefix();
            {? ~SRST.seek(SRST.TREE,SRST.name())
            || _txt:='Nie znaleziono zestawu dla bieżącego elementu składowego.'@;
               {? SRD.KOMM='T' || KOMM.add(_txt) || FUN.emsg(_txt) ?};
               SRSR.cntx_pop(); SRSR.cntx_pop();
               return(0)
            || SRST.SRSR()
            ?}
         ?};
         _wy:=0;
:: ustalanie domyślnych metod liniowych
         _mp:=.getLin(SRST.MP().LIN,'P');
         _mf:=.getLin(SRST.MF().LIN,'F');
         _md:=.getLin(SRST.MD().LIN,'D');

         {? FINFO.SRST_MET<>null
         || {? _a='P' & FINFO.SRST_MET().MP='T' & _mp<>null
            || _dalej:=1
            |? _a='F' & FINFO.SRST_MET().MF='T' & _mf<>null
            || _dalej:=1
            |? _a='D' & FINFO.TOR_D='T' & FINFO.SRST_MET().MD='T' & _md<>null
            || _dalej:=1
            || _txt:='Środek: %1: Domyślny typ dokumentu zmiany metody amortyzacji niepoprawnie\n'
                     'skonfigurowany lub brak domyślnej metody liniowej dla jednego z torów amortyzacji.'@[SRST.NRI];
               {? SRD.KOMM='T' || KOMM.add(_txt) || FUN.emsg(_txt) ?};
               _dalej:=0
            ?}
         || _txt:='Środek: %1: Brak domyślnego typu dokumentu zmiany metody amortyzacji.'@[SRST.NRI];
            {? SRD.KOMM='T' || KOMM.add(_txt) || FUN.emsg(_txt) ?};
            _dalej:=0
         ?};

         {? _dalej
         || SRDT.cntx_psh();
            SRST.cntx_psh();
            SRDO.cntx_psh();
            EDIT_ES.cntx_psh();
            SRDT.prefix();
            FINFO.SRST_MET();
            EDIT_ES.RODZ:='M';
            SRDO.index('AUTO');
            SRDO.prefix(SRSR.ref(),SRST.ROK_F,SRST.OKRO_F,FINFO.SRST_MET,'T');
            {? ~SRDO.first()
            || _blank:=1;
               SRDO.blank();
               SRDO.OKRO_F:=SRST.OKRO_F;
               SRDO.ROK_F:=SRST.ROK_F;
               SRDO.DO:=SRST.OKRO_F().POCZ;
               SRDO.DW:=SRST.OKRO_F().POCZ;
               SRDO.ROK:=SRDO.OKRO_F().RES;
               SRDO.ODD_DOK:=SRST.ODD;
               SRDO.NR:=exec('bl_srdo_nr','fst');
               exec('be_srdo_symbol','fst');

               SRDO.UWAGI:='Wygenerowany automatycznie z powodu przejścia z metody degresywnej na liniową';

:: wartości pól z bieżącego rekordu rejestru stanu
               {? SRDO.TYP().MP='T' || SRDO.MP:=SRST.MP ?};
               {? SRDO.TYP().STAP='T' || SRDO.STAP:=SRST.STAP ?};
               {? SRDO.TYP().WKP='T' || SRDO.WKP:=SRST.WKP ?};
               {? SRDO.TYP().MP='T' || SRDO.DPLP:=SRST.DPLP ?};

               {? SRDO.TYP().MF='T' || SRDO.MF:=SRST.MF ?};
               {? SRDO.TYP().STAF='T' || SRDO.STAF:=SRST.STAF ?};
               {? SRDO.TYP().WKF='T' || SRDO.WKF:=SRST.WKF ?};
               {? SRDO.TYP().MF='T' || SRDO.DPLF:=SRST.DPLF ?};

               {? FINFO.TOR_D='T'
               || {? SRDO.TYP().MD='T' || SRDO.MD:=SRST.MD ?};
                  {? SRDO.TYP().STAD='T' || SRDO.STAD:=SRST.STAD ?};
                  {? SRDO.TYP().WKD='T' || SRDO.WKD:=SRST.WKD ?};
                  {? SRDO.TYP().MD='T' || SRDO.DPLD:=SRST.DPLD ?}
               ?};
:: automatyczny
               SRDO.AUTO:='T'
            || _blank:=0
            ?};
:: zmiany
            {? _a='P' || SRDO.MP:=_mp; SRDO.WKP:=1
            |? _a='F' || SRDO.MF:=_mf; SRDO.WKF:=1
            |? _a='D' || SRDO.MD:=_md; SRDO.WKD:=1
            ?};

            {? _blank || _wy:=SRDO.add() || _wy:=SRDO.put() ?};
            {? _wy
            || .updateRecState(SRDO.OKRO_F,2);
               {? .isSet() || .updateElements(SRDO.OKRO_F,2) ?}
            ?};
            EDIT_ES.cntx_pop();
            SRDO.cntx_pop();
            SRST.cntx_pop();
            SRDT.cntx_pop()
         ?};
         SRST.cntx_pop(); SRSR.cntx_pop();
         _wy
   "),

   obj_meth('calculation',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda oblicza amortyzację dla bieżącego środka
::   WE: _a - 1 - dla elementu zestawu podczas obl. amor. zestawu
::----------------------------------------------------------------------------------------------------------------------
         {? _=0 || _a:=0 ?};
         {? .isCalcPossible()
         || _pocz:=SRST.OKRO_F().POCZ;
            _tmpRef:=SRST.ref();
            _srsrRef:=SRST.SRSR;
            SRST.cntx_psh();
            SRST.index('POCZ');
            SRST.prefix(SRSR.ref());
            {? SRST.first()
            || _dalej:=1;
               {! |?
                  {? SRST.OKRO_F().POCZ<>date(0,0,0) & SRST.OKRO_F().POCZ<=_pocz & SRST.NAL<>'T'
                  ||
:: kontrola czy należy przejść z amortyzacji degresywnej na liniową, w kolejnych latach amortyzacji
:: w przypadku (pierwszego) elementu zestawu przejście nastąpi na poziomie zestawu (w metodzie switchToLin)
:: i dla kolejnych elementów będzie już obowiązywać metoda liniowa

                     _first:=exec('first_month_of_year','fst',SRST.OKRO_F().RES);
                     {? SRST.OKRO_F().OES=_first & SRST.ROK_F<>SRSR.ROK_F
                     || {? 1+SRST.MP().T='D'
                        || _WARP:=.PodstLinPod();
                           {? (_WARP*(SRST.STAP/100))>=(($SRST.MP().PD)()*((SRST.STAP/100)*SRST.WKP))
                           || .switchToLin('P'); SRST.get()
                           ?}
                        ?};
                        {? 1+SRST.MF().T='D'
                        || _WARF:=.PodstLinFin();
                           {? (_WARF*(SRST.STAF/100))>=(($SRST.MF().PD)()*((SRST.STAF/100)*SRST.WKF))
                           || .switchToLin('F'); SRST.get()
                           ?}
                        ?};
                        {? FINFO.TOR_D='T' & 1+SRST.MD().T='D'
                        || _WARD:=.PodstLinDod();
                           {? (_WARD*(SRST.STAD/100))>=(($SRST.MD().PD)()*((SRST.STAD/100)*SRST.WKD))
                           || .switchToLin('D'); SRST.get()
                           ?}
                        ?}
                     ?};
                     {? .calcAMOP(_a) & .calcAMOF('',_a) & (FINFO.TOR_D<>'T' | .calcAMOD(_a))
                     || SRST.NAL:='T'
                     || _dalej:=0
                     ?};
:: czasowe wyłaczenie triggera
                     __SRSTOF:=1;
                     SRST.put();
                     __SRSTOF:=0;
:: przeliczenie umorzenia i wartości netto w kolejnych okresach po okresie do którego naliczono amortyzację
:: a także ze względu na BO/BZ w każdym ostatnim okresie podatkowym roku podatkowego (12)
                     {? SRST.OKRO_F().POCZ=_pocz | SRST.OKRES=12
                     || _tmpRef:=SRST.ref();
                        SRST.cntx_psh();
                        SRST.index('PODAT');
                        SRST.prefix(SRST.SRSR);
                        {? SRST.seek(_tmpRef)
                        || {! |?
::                            {? SRST.ref()<>_tmpRef & SRST.OKRES<>0 & SRST.OKRES<>13 & exec('okr_mod','fst')
                              {? SRST.ref()<>_tmpRef & exec('okr_mod','fst',SRST.OKRO_F)
                              || .delAMO()
                              ?};
                              SRST.next()
                           !}
                        ?};
                        SRST.cntx_pop()
                     ?};
                     .updateCalcComp()
                  |? SRST.OKRO_F().POCZ>_pocz
                  || _dalej:=0
                  ?};
                  _dalej & SRST.next()
               !}
            ?};
            SRST.cntx_pop()
         ?}

   "),

   obj_meth('calculationAll',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda oblicza amortyzację dla wszystkich środków (w bieżącym okresie)
::   WE: _a - wskazanie na okres, jeśli brak _a to okres z parametrów pracy
::   WE: _b - wskazanie na jednostkę księgową
::   WY: 1- naliczono amortyzację bez problemów, <=0 - pojawiły się problemy
::----------------------------------------------------------------------------------------------------------------------
         _wy:=0;
         KOMM.init(,,'Uwagi dotyczące obliczania amortyzacji'@);
         SRD.KOMM:='T';
:: ustalenie okresu
         {? _=0 | _a=null
         || _rok:=SSTALE.AR; _rok_naz:=SSTALE.AR().NAZ;
            _okr:=SSTALE.AO; _okr_naz:=SSTALE.AO().NAZ;
            _amor:=SSTALE.AO().AMOR
         || OKRO_F.cntx_psh(); ROK_F.cntx_psh();
            OKRO_F.prefix();
            {? OKRO_F.seek(_a)
            || _rok:=OKRO_F.ROK; _rok_naz:=OKRO_F.ROK().NAZ;
               _okr:=OKRO_F.ref(); _okr_naz:=OKRO_F.NAZ;
               _amor:=OKRO_F.AMOR
            || KOMM.add('Niepoprawne dane dotyczące okresu naliczania amortyzacji. Nie znaleziono okresu.'@);
               _rok:=null; _rok_naz:='';
               _okr:=null; _okr_naz:='';
               _amor:=''
            ?};
            OKRO_F.cntx_pop(); ROK_F.cntx_pop()
         ?};
:: jednostka księgowa
         {? _b || _odd_naz:=exec('get_odd_naz','fst',_b) || _odd_naz:='' ?};

         {? _okr & _b
         || _nalicz:=_dekretuj:=0;
            SRST.cntx_psh();
            SRST.index('NAL');
            SRST.prefix(_okr,_b);
            _size:=SRST.size();
            SRST.prefix(_okr,_b,'N');
            {? _size
            || {? SRST.first() || _nalicz:=1 ?};
               {? ~_nalicz
               || SRST.prefix(_okr,_b,'T','N');
                  {? SRST.first() || _dekretuj:=1 ?}
               ?}
            || _nalicz:=-1
            ?};
            SRST.cntx_pop()
         ?};

         {? _rok<>null
         || {? _amor='T'
            || KOMM.add('Okres (%1 %2) jest zamknięty dla obszaru Środki trwałe.'@[_okr_naz,_rok_naz]);
               _wy:=-1
            || {? _nalicz=1
               || SRSR.cntx_psh(); SRST.cntx_psh();
                  {? FINFO.AMO_RODZ='B'
                  || SRST.index('ROK_R');
                     SRST.prefix(_rok,_okr,EDIT_ES.R)
                  || SRST.index('ROK');
                     SRST.prefix(_rok,_okr)
                  ?};
                  {? SRST.first()
                  ||
                     _size:=SRST.size();
                     _i:=0;
:: aby obliczać amortyzację dla środków trwałych użytkownik oprócz uprawnień do czynności obliczania amortyzacji
:: musi mieć uprawnienia do czynności przeglądania środków trwałych lub rejestracji i/lub analogiczne
:: uprawnienia do środków niskocennych
                     _upr_t:=exec('hasAction','users','FST_EWI_ZASA') | exec('hasAction','users','FST_EWI_DESN');
                     _upr_n:=exec('hasAction','users','FST_EWI_ZASB') | exec('hasAction','users','FST_EWI_DESR');
                     _upr_s:=exec('hasAction','users','FST_EWI_ZBSR');
                     {! |?
                        {? SRST.NAL<>'T' & (SRST.R='T' & _upr_t) | (SRST.R='N' & _upr_n) | (SRST.R='S' & _upr_s)
                        || {? EDIT_ES.R='' | SRST.R=EDIT_ES.R | (SRST.R<>EDIT_ES.R & _upr_t & _upr_n)
                           | (EDIT_ES.R='S' & _upr_s) | (SRST.R='S' & _upr_s)
                           || _i+=1;
                              progress((_i/_size)*100,'Trwa obliczanie amortyzacji: %1.'@[SRST.NRI],
                                       'Obliczanie amortyzacji',0);
                              {? (SRST.ODD=_b) & exec('usr_fjks','b_perm',SRST.ODD().OD)
                              || SRST.SRSR();
                                 {? SRST.GRP<>'E'
                                 || {? SRST.GRP='T'
                                    || SRD.calcForSet()
                                    || SRD.calculation()
                                    ?}
                                 ?}
                              ?}
                           ?}
                        ?};
                        SRST.next()
                     !};
                     prgs_clr()
                  ?};
                  SRST.cntx_pop(); SRSR.cntx_pop()
               |? _nalicz=-1
               || KOMM.add('W okresie (%1 %2) w j. księgowej %3 nie ma środków trwałych.'@[_okr_naz,_rok_naz,_odd_naz]);
                  _wy:=-1
               || {? _dekretuj
                  || KOMM.add('Amortyzacja w okresie (%1 %2) została już naliczona '
                              'w j. księgowej %3.'@[_okr_naz,_rok_naz,_odd_naz])
                  || KOMM.add('Amortyzacja w okresie (%1 %2) została już naliczona '
                              'i zadekretowana w j. księgowej %3.'@[_okr_naz,_rok_naz,_odd_naz])
                  ?};
                  _wy:=-1
               ?}
            ?}
         ?};
         {? ~KOMM.empty()
         || KOMM.select()
         || _wy:=1
         ?};
         SRD.KOMM:='N';
         _wy
   "),


   obj_meth('delAMO',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa amortyzację i przelicza umorzenie i wartość netto (dla bieżącego rekordu stanu SRST)
::       i składników wartości
::----------------------------------------------------------------------------------------------------------------------
         SRST.AMOP:=0;
         SRST.AMOF:=0;
         {? FINFO.TOR_D='T' || SRST.AMOD:=0 ?};
         SRST.put();

         _camop:=_camof:=_camod:=0;
         _umop_sr:=_umof_sr:=_umod_sr:=0;
         {? SRST.GRP='T'
         || SRST.cntx_psh(); SRSR.cntx_psh();
            _r:=SRST.R; _okr:=SRST.OKRO_F; _odd:=SRST.ODD; _tree:=SRST.ref();
            SRST.index('TREE');
            SRST.prefix(_r,_okr,_odd,_tree);
            {? SRST.first()
            || SRSR.prefix();
               {! |?
                  _umop_sr+=SRST.SRSR().UMOP;
                  _umof_sr+=SRST.SRSR().UMOF;
                  {? FINFO.TOR_D='T' || _umod_sr+=SRST.SRSR().UMOD ?};
                  SRST.next()
               !}
            ?};
            SRST.cntx_pop(); SRSR.cntx_pop()
         ?};

         SRSR.cntx_psh(); SRST.cntx_psh();
         {? SRST.prev()
         || SRSR.prefix();
            SRST.SRSR();
            {? SRST.GRP='T'
            || _camop:=SRST.UMOP-_umop_sr;
               _camof:=SRST.UMOF-_umof_sr;
               _camod:=SRST.UMOD-_umod_sr
            || _camop:=SRST.UMOP-SRSR.UMOP;
               _camof:=SRST.UMOF-SRSR.UMOF;
               _camod:=SRST.UMOD-SRSR.UMOD
            ?}
         || _camop:=_camof:=_camod:=0
         ?};
         SRST.cntx_pop(); SRSR.cntx_pop();

         SRST.UMOP:=SRST.SRSR().UMOP+_umop_sr+_camop;
         SRST.NETP:=SRST.WARP-SRST.UMOP;
         SRST.NETPK:=SRST.WARP-SRST.UMOP;

         SRST.UMOF:=SRST.SRSR().UMOF+_umof_sr+_camof;
         SRST.NETF:=SRST.WARF-SRST.UMOF;
         SRST.NETFK:=SRST.WARF-SRST.UMOF;

         {? FINFO.TOR_D='T'
         || SRST.UMOD:=SRST.SRSR().UMOD+_umod_sr+_camod;
            SRST.NETD:=SRST.WARD-SRST.UMOD;
            SRST.NETDK:=SRST.WARD-SRST.UMOD
         ?};
         SRST.NAL:='N';
         {? SRST.put()
         || SRSW.cntx_psh();
            SRSW.index('SSRW');
            SRSW.prefix(SRST.ref());
            {? SRSW.first()
            ||
:: obsługa korekty jeżeli było wprowadzone dofinansowanie częściowo rozliczone
               _p_ump:=_p_umf:=_p_umd:=0;

               {! |?
                  SRSW.AMOP:=0;
                  SRSW.AMOF:=0;
                  {? FINFO.TOR_D='T' || SRSW.AMOD:=0 ?};
                  SRSW.put();

                  {? SRSW.TYP='W'
                  || SRSW.UMOP:=SRSW.SRST().SRSR().UMOP+.cumulativeComp('AMOP');
                     SRSW.NETP:=SRSW.WARP-SRSW.UMOP;
                     SRSW.UMOF:=SRSW.SRST().SRSR().UMOF+.cumulativeComp('AMOF');
                     SRSW.NETF:=SRSW.WARF-SRSW.UMOF;
                     {? FINFO.TOR_D='T'
                     || SRSW.UMOD:=SRSW.SRST().SRSR().UMOD+.cumulativeComp('AMOD');
                        SRSW.NETD:=SRSW.WARD-SRSW.UMOD
                     ?}
                  || {? SRSW.SRZF<>null & SRSW.SRZF().WARP_P<>SRSW.SRZF().WARP
                     || _p_ump+=SRSW.SRZF().WARP_P-SRSW.SRZF().WARP;
                        _p_umf+=SRSW.SRZF().WARP_P-SRSW.SRZF().WARF;
                        {? FINFO.TOR_D='T' || _p_umd+=SRSW.SRZF().WARP_P-SRSW.SRZF().WARD ?}
                     ?};
                     SRSW.UMOP:=.cumulativeComp('AMOP')+_p_ump;
                     SRSW.NETP:=SRSW.WARP-SRSW.UMOP;
                     SRSW.UMOF:=.cumulativeComp('AMOF')+_p_umf;
                     SRSW.NETF:=SRSW.WARF-SRSW.UMOF;
                     {? FINFO.TOR_D='T'
                     || SRSW.UMOD:=.cumulativeComp('AMOD')+_p_umd;
                        SRSW.NETD:=SRSW.WARD-SRSW.UMOD
                     ?}
                  ?};
                  SRSW.put();
                  SRSW.next()
               !};
               {? _p_ump<>0 | _p_umf<>0 | (FINFO.TOR_D='T' & _p_umd<>0)
               || {? SRSW.find_key('W')
                  || SRSW.UMOP-=_p_ump;
                     SRSW.UMOF-=_p_umf;
                     {? FINFO.TOR_D='D' || SRSW.UMOD-=_p_umd ?};
                     SRSW.put()
                  ?}
               ?}
            ?};
            SRSW.cntx_pop()
         ?}
   "),

   obj_meth('delSRDO_L',"";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda weryfikuje czy nie istnieją dokumenty związane z przejściem D->L w bieżącym okresie,
::       wówczas je usuwa - wykorzystywana podczas usuwania naliczonej amortyzacji
::----------------------------------------------------------------------------------------------------------------------
         SRST.get();
         SRST.cntx_psh();
         SRDO.cntx_psh();
         SRDO.index('SRDO');
         SRDO.prefix(SRST.SRSR,SRST.ROK_F,SRST.OKRO_F);
         {? SRDO.first()
         || _del:=0;
            {! |?
:: usuwanie dokumentów przejścia D->L, ale nie dokumentów poinwentaryzacyjnych!
               {? SRDO.AUTO='T' & SRDO.SRXI=null & SRDO.TYP().GR<>'T' || _del:=1; SRDO.del() || SRDO.next() ?}
            !};
            {? _del
            || _from:=SRST.OKRO_F;
               .updateRecState(_from);
               {? .isSet() || .updateElements(_from) ?}
            ?}
         ?};
         SRDO.cntx_pop();
         SRST.cntx_pop();
         SRST.get()
   "),

   obj_meth('delCalculation',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa amortyzację dla bieżącego środka w bieżącym okresie lub w okresie rekordu rejestru stanu
::       jeżeli usuwanie w Tabeli amortyzacji
::----------------------------------------------------------------------------------------------------------------------
         _curRec:=SRST.ref();
         _srsr:=SRST.SRSR;
         SRST.cntx_psh();SRSR.cntx_psh();
         SRST.index('PODAT');
         SRST.prefix(_srsr);
         {? SRST.seek(_curRec)
         || {? SRST.OKRES<>0 & SRST.OKRES<>13 & exec('okr_mod','fst',SRST.OKRO_F)
            || .delAMO();
:: weryfikacja czy nie istnieją dokumenty związane z przejściem D->L w bieżącym okresie, wówczas należy je usunąć
               .delSRDO_L();
:: usunięcie amortyzacji w przyszłych okresach z przeliczeniem umorzenia i netto
               SRST.cntx_psh();
               {! |?
                  {? SRST.ref()<>_curRec & exec('okr_mod','fst',SRST.OKRO_F)
                  || .delAMO();
                     .delSRDO_L()
                  ?};
                  SRST.next()
               !};
               SRST.cntx_pop()
            ?}
         ?};
         SRST.cntx_pop();SRSR.cntx_pop()
   "),

   obj_meth('delCalcForSet',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa amortyzację dla bieżącego zestawu i elementów składowych w bieżącym okresie
::----------------------------------------------------------------------------------------------------------------------
:: uaktualnienie elementów składowych
         _ref:=SRST.ref(); _r:=SRST.R; _okro_f:=SRST.OKRO_F; _odd:=SRST.ODD;
         SRSR.cntx_psh(); SRST.cntx_psh();
         SRST.index('TREE');
         SRST.prefix(_r,_okro_f,_odd,_ref);
         {? SRST.first()
         || {! |?
               SRST.SRSR();
               .delCalculation();
               SRST.next()
            !}
         ?};
         SRST.cntx_pop(); SRSR.cntx_pop();
:: uaktualnienie dla zestawu
         SRST.get();
         .delCalculation()
   "),

   obj_meth('calcForSet',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda nalicza amortyzację dla bieżącego zestawu i elementów składowych w bieżącym okresie
::   WE: [_a] - jeżeli _a i _a='P' to naliczanie dla planu amortyzacji
::----------------------------------------------------------------------------------------------------------------------
         {? .isCalcPossible()
         || _not_nal:=0;
            _ref:=SRST.ref(); _r:=SRST.R; _okro_f:=SRST.OKRO_F; _odd:=SRST.ODD;
            _srsr:=SRST.SRSR; _rok:=SRST.ROK; _okr:=SRST.OKRES; _rok_f:=SRST.ROK_F; _nr:=SRST.OKRO_F().NR;
            SRSR.cntx_psh(); SRST.cntx_psh();
            SRSR.prefix();
            SRST.index('TREE');
:: w przypadku zestawu dla którego w bieżącym okresie nie ma elementów,
:: algorytm cofa się do poprzednich okresów zestawu i jeżeli nie jest naliczona amortyzacja to nalicza
:: (dotyczy tylko danych rzeczywistych, nie planów)
            _loop:=1;
            {! |?
               SRST.prefix(_r,_okro_f,_odd,_ref);
               {? SRST.first()
               || {! |?
                     SRST.SRSR();
                     {? _>0 & _a='P' || .calcPlan(1) || .calculation(1) ?};
                     SRST.get();
                     {? _>0 & _a='P' & SRST.NAL<>'T' || _not_nal:=1 ?};
                     SRST.next()
                  !}
               || {? _>0 & _a='P' || _loop:=0 ?}
               ?};
               {? _loop
               || OKRO_F.cntx_psh();
                  OKRO_F.index('SRODKI');
                  OKRO_F.prefix(REF.FIRMA);
                  {? OKRO_F.seek(_okro_f)
                  || {? OKRO_F.prev()
                     || _okro_f:=OKRO_F.ref();
                        _rok_f:=OKRO_F.ROK
                     || _okro_f:=null
                     ?}
                  || _okro_f:=null
                  ?};
                  OKRO_F.cntx_pop();
                  {? _okro_f
                  || SRST.cntx_psh();
                     SRST.index('SROD');
                     SRST.prefix(_srsr,_rok_f,_okro_f);
:: ref powinien zawierać refa zestawu w znalezionym okresie, w kolejnym obrocie pętli będą szukane elementy składowe
                     {? SRST.first() & SRST.NAL<>'T' || _ref:=SRST.ref() || _ref:=null ?};
                     SRST.cntx_pop()
                  ?};
                  {? _okro_f & _ref || _loop:=1 || _loop:=0 ?}
               ?};
               _loop
            !};

            SRST.index('PODAT');
            SRST.prefix(_srsr);
            {? SRST.first()
            || _dalej:=1;
               {! |?
                  {? SRST.ROK<_rok | (SRST.ROK=_rok & SRST.OKRES<=_okr)
                  || _amop:=_amof:=_amod:=0;
                     _umop:=_umof:=_umod:=0;
                     _netp:=_netf:=_netd:=0;
                     _warp:=_warf:=_ward:=0;
                     _nal:=1; _t_nal:=SRST.NAL;
                     _ref:=SRST.ref(); _r:=SRST.R; _okro_f:=SRST.OKRO_F; _odd:=SRST.ODD;
                     SRST.cntx_psh();
                     SRST.index('TREE');
                     SRST.prefix(_r,_okro_f,_odd,_ref);
                     {? SRST.first()
                     || {! |?
                           {? SRST.NAL<>'T' || _nal:=0 ?};
                           _amop+=SRST.AMOP; _amof+=SRST.AMOF; _amod+=SRST.AMOD;
                           _umop+=SRST.UMOP; _umof+=SRST.UMOF; _umod+=SRST.UMOD;
                           _netp+=SRST.NETP; _netf+=SRST.NETF; _netd+=SRST.NETD;
                           _warp+=SRST.WARP; _warf+=SRST.WARF; _ward+=SRST.WARD;
                           SRST.next()
                        !}
                     ?};
                     SRST.cntx_pop();
                     SRST.AMOP:=_amop; SRST.AMOF:=_amof; SRST.AMOD:=_amod;
                     SRST.UMOP:=_umop; SRST.UMOF:=_umof; SRST.UMOD:=_umod;
                     SRST.WARP:=_warp; SRST.WARF:=_warf; SRST.WARD:=_ward;
                     SRST.NETP:=SRST.NETPK:=_netp; SRST.NETF:=SRST.NETFK:=_netf; SRST.NETD:=SRST.NETDK:=_netd;
                     {? _t_nal<>'T'
                     || {? _nal || SRST.NAL:='T' ?};
                        __SRSTOF:=1; SRST.put(); __SRSTOF:=0
                     ?}
                  || SRST.UMOP:=_umop; SRST.UMOF:=_umof; SRST.UMOD:=_umod;
                     SRST.WARP:=_warp; SRST.WARF:=_warf; SRST.WARD:=_ward;
                     SRST.NETP:=SRST.NETPK:=_netp; SRST.NETF:=SRST.NETFK:=_netf; SRST.NETD:=SRST.NETDK:=_netd;
                     __SRSTOF:=1; SRST.put(); __SRSTOF:=0
                  ?};
                  SRST.next()
               !}
            ?};
            SRST.cntx_pop();SRSR.cntx_pop();
            {? (_>0 & _a='P') & _not_nal=0
            || SRSR.PLAN_NAL:='T';
               SRSR.put()
            ?}
         ?}
   "),

   obj_meth('delCalculationAll',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa amortyzację dla wszystkich środków (w bieżącym okresie)
::----------------------------------------------------------------------------------------------------------------------
         KOMM.init(,,'Uwagi dotyczące usuwania amortyzacji'@);
         SRD.KOMM:='T';
         {? SRST.OKRO_F().AMOR='T'
         || KOMM.add('Okres (%1 %2) jest zamknięty dla obszaru Środki trwałe.'@[SSTALE.AO().NAZ,SSTALE.AR().NAZ])
         || SRSR.cntx_psh(); SRST.cntx_psh();
            {? FINFO.AMO_RODZ='B'
            || SRST.index('ROK_R');
               SRST.prefix(SSTALE.AR,SSTALE.AO,EDIT_ES.R)
            || SRST.index('ROK');
               SRST.prefix(SSTALE.AR,SSTALE.AO)
            ?};
:: aby usuwać amortyzację dla środków trwałych użytkownik oprócz uprawnień do czynności obliczania amortyzacji
:: musi mieć uprawnienia do czynności przeglądania środków trwałych lub rejestracji i/lub analogiczne
:: uprawnienia do środków niskocennych
            _upr_t:=exec('hasAction','users','FST_EWI_ZASA') | exec('hasAction','users','FST_EWI_DESN');
            _upr_n:=exec('hasAction','users','FST_EWI_ZASB') | exec('hasAction','users','FST_EWI_DESR');
            _upr_s:=exec('hasAction','users','FST_EWI_ZBSR');
            {? SRST.first()
            || _size:=SRST.size();
               _i:=0;
               {! |?
                  {? (EDIT_ES.R='' | SRST.R=EDIT_ES.R | (SRST.R<>EDIT_ES.R & _upr_t & _upr_n)
                     | (EDIT_ES.R='S' & _upr_s) | (SRST.R='S' & _upr_s))
                     & (OPERATOR.DEPT=null | SRST.ODD=OPERATOR.DEPT)
                  || {? (SRST.R='T' & _upr_t) | (SRST.R='N' & _upr_n) | (SRST.R='S' & _upr_s)
                     || _i+=1;
                        progress((_i/_size)*100,'Trwa usuwanie amortyzacji: %1.'@[SRST.NRI],
                                 'Usuwanie amortyzacji dla firmy',0);
                        SRST.SRSR();
                        {? SRST.GRP<>'E'
                        || {? SRST.DEKRET='T'
                           || _txt:='Środek %1: amortyzacja w bieżącym okresie została już zadekretowana.'@[SRST.NRI];
                              KOMM.add(_txt)
                           || {? SRST.GRP='T'
                              || SRD.delCalcForSet()
                              || SRD.delCalculation()
                              ?}
                           ?}
                        ?}
                     ?}
                  ?};
                  SRST.next()
               !};
               prgs_clr()
            ?};
            SRST.cntx_pop(); SRSR.cntx_pop()
         ?};
         {? ~KOMM.empty()
         || KOMM.select()
         || FUN.info('Zakończono usuwanie amortyzacji w okresie: %1 %2.'@[SSTALE.AO().NAZ,SSTALE.AR().NAZ])
         ?};
         SRD.KOMM:='N'
   "),

   obj_meth('PodstLinPod',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca podstawę naliczania amortyzacji liniowej podakowej (wartość na początek roku, bez dokumentów
::       w styczniu) dla porównania wartości amortyzacji rocznej degresywnej i liniowej podczas analizy
::       czy należy już przejść na metodę liniową.
::----------------------------------------------------------------------------------------------------------------------
         _WARP:=($SRST.MP().PL)();
         SRDO.cntx_psh();
         SRDO.index('AUTO');
         SRDO.prefix(SRSR.ref(),SRST.ROK_F,SRST.OKRO_F);
         _minus:=0;
         {? SRDO.first()
         || {? SRDO.RODZ='W' || _minus+=SRDO.WARP ?};
            SRDO.next()
         ?};
         SRDO.cntx_pop();
         _WARP-=_minus;
         _WARP
   "),

   obj_meth('PodstLinFin',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca podstawę naliczania amortyzacji liniowej bilansowej (wartość na początek roku, bez dokumentów
::       w styczniu) dla porównania wartości amortyzacji rocznej degresywnej i liniowej podczas analizy
::       czy należy już przejść na metodę liniową.
::----------------------------------------------------------------------------------------------------------------------
         _WARF:=($SRST.MF().PL)();
         SRDO.cntx_psh();
         SRDO.index('AUTO');
         SRDO.prefix(SRSR.ref(),SRST.ROK_F,SRST.OKRO_F);
         _minus:=0;
         {? SRDO.first()
         || {? SRDO.RODZ='W' || _minus+=SRDO.WARF ?};
            SRDO.next()
         ?};
         SRDO.cntx_pop();
         _WARF-=_minus;
         _WARF-=SRST.OSTATEK;
         _WARF
   "),

   obj_meth('PodstLinDod',"PRIVATE";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca podstawę naliczania amortyzacji liniowej dodatkowej (wartość na początek roku, bez dokumentów
::       w styczniu) dla porównania wartości amortyzacji rocznej degresywnej i liniowej podczas analizy
::       czy należy już przejść na metodę liniową.
::----------------------------------------------------------------------------------------------------------------------
         _WARD:=($SRST.MD().PL)();
         SRDO.cntx_psh();
         SRDO.index('AUTO');
         SRDO.prefix(SRSR.ref(),SRST.ROK_F,SRST.OKRO_F);
         _minus:=0;
         {? SRDO.first()
         || {? SRDO.RODZ='W' || _minus+=SRDO.WARD ?};
            SRDO.next()
         ?};
         SRDO.cntx_pop();
         _WARD-=_minus;
         _WARD
   "),

   obj_meth('PodstDegrFin',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca podstawę naliczania amortyzacji degresywnej bilansowej (wartość netto w ostatnim
::       okresie poprzedniego roku podatkowego, jeśli to pierwszy rok to z bieżącego okresu)
::----------------------------------------------------------------------------------------------------------------------
      {? SRST.ROK=SRSR.ROK & exec('test_degr_sys','fst_kst')
      || _warf:=exec('degr_podstawa','fst_kst','F')
      || _warf:=SRSR.NETF
      ?};
:: jeżeli to pierwszy rok w ewidencji to uwzględniać także dokumenty wartościowe
      {? SRST.ROK=SRSR.ROK
      || _warf+=exec('sum_srdo_netto','fst',SRST.SRSR,SRST.ROK,SRST.OKRES,'F',SRST.GRP)
      ?};

      {? SRSR.GRP='T'
      || _okres:=SRSR.OKRES;
         _rok:=SRSR.ROK;
         _tree:=SRSR.ref();
         SRSR.cntx_psh();
         SRSR.index('TREE');
         SRSR.prefix(_tree);
         {? SRSR.first()
         || {! |?
               {? SRSR.ROK=_rok & SRSR.OKRES=_okres || _warf+=SRSR.NETF ?};
               SRSR.next()
            !}
         ?};
         SRSR.cntx_pop()
      ?};

      SRST.cntx_psh();
      SRST.index('PODAT');
      SRST.prefix(SRSR.ref(),SRST.ROK-1);
      {? SRST.last()
      || {! |?
            {? SRST.OKRES<>0 &  SRST.OKRES<>13 & (SRST.S<>'T' | .curMonth(SRST.ROK, SRST.OKRES,'F'))
            || _warf:=SRST.NETF
            ?};
            ((SRST.OKRES=0 | SRST.OKRES=13) | (SRST.S='T' & ~.curMonth(SRST.ROK, SRST.OKRES,'F'))) & SRST.prev()
         !}
      ?};
      SRST.cntx_pop();

:: jeżeli to kolejne lata to uwzględnij dokumenty wystawione na przełomie lat, z data wystawienia i operacji
:: z roku poprzedniego ale okresem obowiązywania - pierwszym w bieżącym roku. W przypadku amortyzacji degresywnej
:: ponieważ dokument wpłynie na wartość od stycznia - to byłby uwzględniony dopiero w następnym roku np. dokument
:: z datą operacji 2018/12/01 - wpłynąłby na amortyzację w styczniu 2020 roku.
      {? SRST.ROK>SRSR.ROK
      || _warf+=exec('sum_psrdo_netto','fst_ext',SRST.SRSR,SRST.ROK-1,SRST.OKRES,'F',SRST.GRP)
      ?};

      _warf
   "),

   obj_meth('PodstDegrPod',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca podstawę naliczania amortyzacji degresywnej podatkowej (wartość netto w ostatnim
::       okresie poprzedniego roku podatkowego, jeśli to pierwszy rok to z bieżącego okresu)
::----------------------------------------------------------------------------------------------------------------------
      {? SRST.ROK=SRSR.ROK & exec('test_degr_sys','fst_kst')
      || _warp:=exec('degr_podstawa','fst_kst','P')
      || _warp:=SRSR.NETP
      ?};

:: jeżeli to pierwszy rok w ewidencji to uwzględniać także dokumenty wartościowe, ale od okresu ich obowiązywania
      {? SRST.ROK=SRSR.ROK
      || _warp+=exec('sum_srdo_netto','fst',SRST.SRSR,SRST.ROK,SRST.OKRES,'P',SRST.GRP)
      ?};

      {? SRSR.GRP='T'
      || _okres:=SRSR.OKRES;
         _rok:=SRSR.ROK;
         _tree:=SRSR.ref();
         SRSR.cntx_psh();
         SRSR.index('TREE');
         SRSR.prefix(_tree);
         {? SRSR.first()
         || {! |?
               {? SRSR.ROK=_rok & SRSR.OKRES=_okres || _warp+=SRSR.NETP ?};
               SRSR.next()
            !}
         ?};
         SRSR.cntx_pop()
      ?};

      SRST.cntx_psh();
      SRST.index('PODAT');
      SRST.prefix(SRSR.ref(),SRST.ROK-1);
      {? SRST.last()
      || {! |?
            {? SRST.OKRES<>0 & SRST.OKRES<>13 & (SRST.S<>'T' | .curMonth(SRST.ROK, SRST.OKRES,'P'))
            || _warp:=SRST.NETP
            ?};
            ((SRST.OKRES=0 | SRST.OKRES=13) | (SRST.S='T' & ~.curMonth(SRST.ROK, SRST.OKRES,'P'))) & SRST.prev()
         !}
      ?};
      SRST.cntx_pop();

:: jeżeli to kolejne lata to uwzględnij dokumenty wystawione na przełomie lat, z data wystawienia i operacji
:: z roku poprzedniego ale okresem obowiązywania - pierwszym w bieżącym roku. W przypadku amortyzacji degresywnej
:: ponieważ dokument wpłynie na wartość od stycznia - to byłby uwzględniony dopiero w następnym roku np. dokument
:: z datą operacji 2018/12/01 - wpłynąłby na amortyzację w styczniu 2020 roku.
      {? SRST.ROK>SRSR.ROK
      || _warp+=exec('sum_psrdo_netto','fst_ext',SRST.SRSR,SRST.ROK-1,SRST.OKRES,'P',SRST.GRP)
      ?};

      _warp
   "),

   obj_meth('PodstDegrDod',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca podstawę naliczania amortyzacji degresywnej dodatkowej (wartość netto w ostatnim
::       okresie poprzedniego roku podatkowego, jeśli to pierwszy rok to z bieżącego okresu)
::----------------------------------------------------------------------------------------------------------------------
      {? SRST.ROK=SRSR.ROK & exec('test_degr_sys','fst_kst')
      || _ward:=exec('degr_podstawa','fst_kst','D')
      || _ward:=SRSR.NETD
      ?};

:: jeżeli to pierwszy rok w ewidencji to uwzględniać także dokumenty wartościowe (wartość netto z rejestru
:: stanów, zamiast z tabeli środków - z wartości pierwotnych)
      {? SRST.ROK=SRSR.ROK
      || _ward+=exec('sum_srdo_netto','fst',SRST.SRSR,SRST.ROK,SRST.OKRES,'D',SRST.GRP)
      ?};

      {? SRSR.GRP='T'
      || _okres:=SRSR.OKRES;
         _rok:=SRSR.ROK;
         _tree:=SRSR.ref();
         SRSR.cntx_psh();
         SRSR.index('TREE');
         SRSR.prefix(_tree);
         {? SRSR.first()
         || {! |?
               {? SRSR.ROK=_rok & SRSR.OKRES=_okres || _ward+=SRSR.NETD ?};
               SRSR.next()
            !}
         ?};
         SRSR.cntx_pop()
      ?};

      SRST.cntx_psh();
      SRST.index('PODAT');
      SRST.prefix(SRSR.ref(),SRST.ROK-1);
      {? SRST.last()
      || {! |?
            {? SRST.OKRES<>0 & SRST.OKRES<>13 & (SRST.S<>'T' | .curMonth(SRST.ROK, SRST.OKRES,'D'))
            || _ward:=SRST.NETD
            ?};
            ((SRST.OKRES=0 | SRST.OKRES=13) | (SRST.S='T' & ~.curMonth(SRST.ROK, SRST.OKRES,'D'))) & SRST.prev()
         !}
      ?};
      SRST.cntx_pop();

:: jeżeli to kolejne lata to uwzględnij dokumenty wystawione na przełomie lat, z data wystawienia i operacji
:: z roku poprzedniego ale okresem obowiązywania - pierwszym w bieżącym roku. W przypadku amortyzacji degresywnej
:: ponieważ dokument wpłynie na wartość od stycznia - to byłby uwzględniony dopiero w następnym roku np. dokument
:: z datą operacji 2018/12/01 - wpłynąłby na amortyzację w styczniu 2020 roku.
      {? SRST.ROK>SRSR.ROK
      || _ward+=exec('sum_psrdo_netto','fst_ext',SRST.SRSR,SRST.ROK-1,SRST.OKRES,'D',SRST.GRP)
      ?};

      _ward
   "),

   obj_meth('addSimpleAsset',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda dodaje środek w kartotece uproszczonej
::----------------------------------------------------------------------------------------------------------------------
         {? ~exec('czy_amor_de','fst',,,1)
         || _txt:={? OPERATOR.DEPT || 'w bieżącej j. księgowej' || 'we wszystkich j. księgowych' ?};
            FUN.emsg('Amortyzacja w bieżącym okresie (lub w kolejnych) %1 została już zadekretowana, '
                     'dołączanie nowych środków nie jest możliwe.'@[_txt]);
            return(0)
         ?};

         SRD.TRYB:='A';
          __DEPT:=0;
         menu_txt(,'Dołącz');
         TAM.prefix();
         POMI.win_sel('WER');
         OSOBA.win_sel('SLO');
         SRDO.win_sel('WER');
         SRSR.win_edit('RED_U');
         .setField();
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable=1',, 'R');
         SRSR.hdr_edit();
         SRSR.hdr_edit(' <nowy>'@);
         {? _>1 & type_of(_a)=type_of(null) & type_of(_b)=type_of('')
         || SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
            .copyFromSRST(_a);
            {? _b='G' | _b='T' || SRSR.win_edit('RED_UG')
            |? _b='E' || SRSR.win_edit('RED_UE')
            ?}
         |? _>0 & type_of(_a)=type_of('') & _a='G'
         || SRSR.win_edit('RED_UG');
            SRSR.efld_opt(SRSR.win_edit('?'), 'enable=1',, 'R');
            .setField();
            SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
            EDIT_ES.JORG:='';
            SRSR.OKRO_F:=null;
            SRSR.ROK_F:=null;
            SRSR.DZ:=SRSR.DE:=SSTALE.AO().POCZ;
            SRSR.GRP:='T';
            {? _>1 & type_of(_b)=type_of(null) || .copyFromSRST(_b) ?}
         |? _>0 & type_of(_a)=type_of('') & _a='E'
         || SRSR.win_edit('RED_UE');
            .setField();
            SRSR.cntx_psh();
            SRSR.prefix();
            {? SRSR.seek(EDIT_ES.SRSR)
            || {? SRSR.U_SR<>'T'
               || FUN.emsg('W Kartotece uproszczonej można dodawać elementy tylko dla zestawów\n'
                          +' utworzone w tej kartotece.'@);
                  SRSR.cntx_pop();
                  return(0)
               ?};
               BUFR.save()
            || FUN.emsg('Nie znaleziono zestawu.'@);
               SRSR.cntx_pop();
               return(0)
            ?};
            SRSR.cntx_pop();
            SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
:: jeżeli kopiowanie to pobiera dane z bieżącego elementu
            {? _>1 & type_of(_b)=type_of(null) || .copyFromSRST(_b) ?};
:: ale część wartości pól zawsze dziedziczy z nagłówka zestawu
            SRSR.R:=BUFR.get('R');
            SRSR.JORG:=BUFR.get('JORG');
            SRSR.ODD:=BUFR.get('ODD');
            SRSR.GR:=BUFR.get('GR');
            SRSR.PRZYCHOD:=BUFR.get('PRZYCHOD');
            SRSR.MP:=BUFR.get('MP');
            SRSR.MF:=BUFR.get('MF');
            SRSR.MD:=BUFR.get('MD');
            SRSR.KONPOD:=BUFR.get('KONPOD');
            SRSR.KONFIN:=BUFR.get('KONFIN');
            SRSR.KONDOD:=BUFR.get('KONDOD');
            SRSR.STAP:=BUFR.get('STAP');
            SRSR.STAF:=BUFR.get('STAF');
            SRSR.STAD:=BUFR.get('STAD');
            SRSR.WKP:=BUFR.get('WKP');
            SRSR.WKF:=BUFR.get('WKF');
            SRSR.WKD:=BUFR.get('WKD');
            SRSR.DPLP:=BUFR.get('DPLP');
            SRSR.DPLF:=BUFR.get('DPLF');
            SRSR.DPLD:=BUFR.get('DPLD');
            SRSR.JM:=BUFR.get('JM');
            SRSR.MAX:=BUFR.get('MAX');
            SRSR.OKE:=BUFR.get('OKE');
            SRSR.S:=BUFR.get('S');
            SRSR.SCH_SEZ:=BUFR.get('SCH_SEZ');
            SRSR.DZ:=SRSR.DE:=SSTALE.AO().POCZ;
            SRSR.TREE:=EDIT_ES.SRSR;
            SRSR.GRP:='E';
            SRSR.KIND:='N';
            {? SRSR.R='N'
            || SRSR.efld_opt(SRSR.win_edit('?'),'enable=0',,'SAMOCHOD');
               SRSR.efld_opt(SRSR.win_edit('?'),'enable=0',,'SAM_EL')
            || SRSR.efld_opt(SRSR.win_edit('?'),'enable=1',,'SAMOCHOD');
               SRSR.efld_opt(SRSR.win_edit('?'),'enable=1',,'SAM_EL')
            ?}
         || SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
            SRSR.R:='T';
            SRSR.efld_opt(SRSR.win_edit('?'),'enable=1',,'SAMOCHOD');
            SRSR.efld_opt(SRSR.win_edit('?'),'enable=1',,'SAM_EL');
            EDIT_ES.JORG:='';
            SRSR.OKRO_F:=null;
            SRSR.ROK_F:=null;
            SRSR.DZ:=SRSR.DE:=SSTALE.AO().POCZ
         ?};
         SRSR.U_SR:='T';
         SRSR.memo_set('','OPIS');
         _sref:=null;
         {? SRSR.edit(\"exec('chk_srsr','srodobj','ADD')\")
         || .modRec();
            do();
               {? SRSR.add()
               || SRSR.memo_put(,'OPIS');
                  _sref:=SRSR.ref();
                  .updateRecState()
               ?};
            end();
            {? _sref
            || _ref:=exec('find_state','fst',_sref,SSTALE.AR,SSTALE.AO);
               {? _ref || SRST.seek(_ref) ?}
            ?}
         ?};
         {? __DEPT=1
         || OPERATOR.DEPT:=null;
            __DEPT:=0
         ?};
         _sref
     "),

    obj_meth('addSimpleSeries',"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda dodaje serię środków w kartotece uproszczonej
::   WE: _a - złączenie do środka/elementu z którego należy skopiować dane
::       _b - jeżeli jest i = 'E' to seria elementów
::----------------------------------------------------------------------------------------------------------------------
         {? ~exec('czy_amor_de','fst',,,1)
         || _txt:={? OPERATOR.DEPT || 'w bieżącej j. księgowej' || 'we wszystkich j. księgowych' ?};
            FUN.emsg('Amortyzacja w bieżącym okresie (lub w kolejnych) %1 została już zadekretowana, '
                     'dołączanie nowych środków nie jest możliwe.'@[_txt]);
            return(0)
         ?};

         SRD.TRYB:='A';
         __DEPT:=0;
         TAM.prefix();
         POMI.win_sel('WER');
         OSOBA.win_sel('SLO');
         SRDO.win_sel('WER');
         {? (_>0 & type_of(_a)=type_of('') & _a='E')
            | (_>1 & type_of(_a)=type_of(null) & type_of(_b)=type_of('') & _b='E')
         || SRSR.win_edit('RED_USE');
            _typ:='E'
         || SRSR.win_edit('RED_US');
            _typ:='S'
         ?};
         .setField();
         SRSR.efld_opt(SRSR.win_edit('?'), 'enable=1',, 'R');
         SRSR.hdr_edit();
         EDIT_ES.LICZBA:=0;
         {? _>0 & type_of(_a)=type_of(null)
         || SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
            .copyFromSRST(_a)
         || SRSR.blank();
            EDIT_ES.TAB_KRST:=STER.KST;
            SRSR.R:=EDIT_ES.R;
            EDIT_ES.JORG:='';
            SRSR.OKRO_F:=null;
            SRSR.ROK_F:=null;
            SRSR.DZ:=SRSR.DE:=SSTALE.AO().POCZ
         ?};
         SRSR.U_SR:='T';
         SRSR.memo_set('','OPIS');
         _sref:=null;
         {? _typ='E' || SRSR.GRP:='E'; SRSR.KIND:='N'
         |? _typ='S' || SRST.GRP:='N'; SRSR.KIND:='T'
         ?};
         _add:=0;
:: dla elementów część danych zawsze z nagłówka zestawu
         {? _typ='E'
         || SRSR.cntx_psh();
            SRSR.prefix();
            {? SRSR.seek(EDIT_ES.SRSR)
            || BUFR.save()
            || FUN.emsg('Nie znaleziono zestawu.'@);
               SRSR.cntx_pop();
               return(0)
            ?};
            SRSR.cntx_pop();

            SRSR.JORG:=BUFR.get('JORG');
            SRSR.ODD:=BUFR.get('ODD');
            SRSR.GR:=BUFR.get('GR');
            SRSR.PRZYCHOD:=BUFR.get('PRZYCHOD');
            SRSR.MP:=BUFR.get('MP');
            SRSR.MF:=BUFR.get('MF');
            SRSR.MD:=BUFR.get('MD');
            SRSR.KONPOD:=BUFR.get('KONPOD');
            SRSR.KONFIN:=BUFR.get('KONFIN');
            SRSR.KONDOD:=BUFR.get('KONDOD');
            SRSR.STAP:=BUFR.get('STAP');
            SRSR.STAF:=BUFR.get('STAF');
            SRSR.STAD:=BUFR.get('STAD');
            SRSR.WKP:=BUFR.get('WKP');
            SRSR.WKF:=BUFR.get('WKF');
            SRSR.WKD:=BUFR.get('WKD');
            SRSR.DPLP:=BUFR.get('DPLP');
            SRSR.DPLF:=BUFR.get('DPLF');
            SRSR.DPLD:=BUFR.get('DPLD');
            SRSR.JM:=BUFR.get('JM');
            SRSR.MAX:=BUFR.get('MAX');
            SRSR.OKE:=BUFR.get('OKE');
            SRSR.S:=BUFR.get('S');
            SRSR.SCH_SEZ:=BUFR.get('SCH_SEZ');
            SRSR.TREE:=EDIT_ES.SRSR
         ?};

         {? SRSR.edit(\"exec('chk_srsr','srodobj','ADD',1)\")
         || {! _i:=1..EDIT_ES.LICZBA
            |! {? _typ<>'E'
               || _formula:=exec('nri_form','fst');
                  {? _formula<>'' || SRSR.NRI:=($(_formula))() ?}
               || SRSR.cntx_psh();
                  _nri:=EDIT_ES.SRSR().NRI;
                  {? _nri+1='.' || _nri:=_nri-1 ?};
                  SRSR.cntx_pop();
                  _nri:=_nri+'/';
                  SRSR.cntx_psh();
                  SRSR.index('TREE');
                  SRSR.prefix(EDIT_ES.SRSR);
                  {? SRSR.last()
                  || _nri+=form((#(SRSR.NRI+2)+1),-2)
                  || _nri+='01'
                  ?};
                  SRSR.cntx_pop();
                  SRSR.NRI:=_nri
               ?};

               {? SRSR.NRI<>''
               || .modRec();
                  do();
                     {? SRSR.add()
                     || SRSR.memo_put(,'OPIS');
                        {? _sref=null || _sref:=SRSR.ref() ?};
                        .updateRecState();
::                      jeżeli element to odświeżenie danych wartościowych zestawu
                        {? SRSR.GRP='E'
                        || _tree:=SRSR.TREE;
                           .rootUpdate(_tree)
                        ?}
                     ?};
                     {? do_state()<2 || _add+=1 ?};
                  end()
               ?};
               echo('Dodawanie środków: %1 z %2'@[$_add,$EDIT_ES.LICZBA])

            !};
            {? _sref
            || _ref:=exec('find_state','fst',_sref,SSTALE.AR,SSTALE.AO);
               {? _ref || SRST.seek(_ref) ?}
            ?}
         ?};
         {? __DEPT=1
         || OPERATOR.DEPT:=null;
            __DEPT:=0
         ?};
         {? _add || FUN.info('Dodano serię %1 środków.'@[$_add]) ?}
   "),

    obj_meth('editSimpleAsset',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Edycja bieżącego środka/zestawu/elementu w trybie uproszczonym
::----------------------------------------------------------------------------------------------------------------------
         SRD.TRYB:='E';
         __DEPT:=0;
         SRSR.prefix(); SRST.SRSR();
         {? .isEditable()
         || SRSR.prefix();
            SRST.SRSR();
            {? SRSR.U_SR<>'T'
            || {? SRSR.GRP='E' || _what:='elementy'
               |? SRSR.GRP='T' || _what:='zestawy'
               || _what:='środki'
               ?};
               FUN.emsg('W Kartotece uproszczonej można poprawiać tylko %1 utworzone w tej kartotece.'@[_what]);
               _u_sr:=0
            || _u_sr:=1
            ?};
            {? _u_sr & SRSR.r_lock(1)
            || {? SRSR.JORG<>null
               || EDIT_ES.JORG:=SRSR.JORG().SYMBOL
               || EDIT_ES.JORG:=''
               ?};
               OSOBA.win_sel('SLO');
               {? SRSR.GRP='T'
               || SRSR.win_edit('RED_UG')
               |? SRSR.GRP='E'
               || SRSR.win_edit('RED_UE')
               || SRSR.win_edit('RED_U')
               ?};
               SRSR.hdr_edit();
               _title:=' : '+SRSR.NRI;
               SRSR.hdr_edit(_title);
               .setField();
               SRSR.memo_get(,'OPIS');
               SRSR.efld_opt(SRSR.win_edit('?'), 'enable=0',, 'R');
               {? SRSR.edit(\"exec('chk_srsr','srodobj','EDIT')\")
               || .modRec();
                  do();
                     {? SRSR.put() || SRSR.memo_put(,'OPIS') ?};
                     .updateRecState();
                  end()
               ?};
               SRSR.r_unlock()
            ?}
         || {? SRSR.GRP='E' || _what:='elementu'
            |? SRSR.GRP='T' || _what:='zestawu'
            || _what:='środka'
            ?};
            FUN.info('Nie można poprawić wskazanego %1 (%2 - %3).\n\n'
                     'Dane środka dla którego wprowadzono dokumenty lub naliczono amortyzację\n'
                     'nie mogą być modyfikowane bezpośrednio. Należy wprowadzić dokument modyfikujący\n'
                     'wymagane dane.'@[_what,SRST.NRI,SRST.NST]);
            0
         ?};
         {? __DEPT=1
         || OPERATOR.DEPT:=null;
            __DEPT:=0
         ?}
     "),

   obj_meth('delSimpleAsset',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa środki w kartotece uproszczonej (tylko środki dodane w tej kartotece)
::----------------------------------------------------------------------------------------------------------------------
         SRSR.prefix(); SRST.SRSR();
         {? SRSR.U_SR<>'T'
         || {? SRSR.GRP='E' || _what:='elementy'
            |? SRSR.GRP='T' || _what:='zestawy'
            || _what:='środki'
            ?};
            FUN.emsg('W Kartotece uproszczonej można usuwać tylko %1 utworzone w tej kartotece.'@[_what]);
            return(0)
         ?};
         {? SRSR.GRP='T'
         || _elem:=.elements(SRSR.ref())
         || _elem:=0
         ?};
         {? .isRemovable() &_elem=0
         || {? SRSR.GRP='E' || _what:='element'
            |? SRSR.GRP='T' || _what:='zestaw'
            || _what:='środek'
            ?};
            {? FUN.ask('Usunąć %1: %2 (%3)?'@[_what,SRST.NRI,SRST.NST])
            || _deleted:=1;
               _CurRef:=null;
               {? SRST.f_active()>0
               || SRST.cntx_psh();
                  {? SRST.f_next() | SRST.f_prev() || _CurRef:=SRST.ref() ?};
                  SRST.cntx_pop()
               || SRST.cntx_psh();
                  {? SRST.next() | SRST.prev() || _CurRef:=SRST.ref() ?};
                  SRST.cntx_pop()
               ?};
               {? SRSR.r_lock(1)
               || SRSR.r_unlock();
                  do();
                     _tree:=SRST.SRSR().TREE;
                     {? .delRecState()
                     || TSR.cntx_psh();
                        TSR.index('TYPK');
                        TSR.prefix(SRSR.ref());
                        {? TSR.first()
                        || {! |? TSR.del() !}
                        ?};
                        TSR.cntx_pop();
:: usuwanie podziałów controllingowych dla środka
                        .delKTRD(SRSR.ref());
                        {? ~SRSR.del(,1) || _deleted:=0 ?}
                     || _deleted:=0
                     ?};
                     {? ~_deleted
                     || undo()
                     || {? _tree<>null || .rootUpdate(_tree) ?}
                     ?};
                  end()
               ?};
               {? SRSR.GRP='E' || _what:='elementu'
               |? SRSR.GRP='T' || _what:='zestawu'
               || _what:='środka'
               ?};
               {? ~_deleted
               || FUN.emsg('Nie udało się usunąć wskazanego %1 z rejestru.'@[_what]);
                  0
               || {? _CurRef & SRST.f_active() || SRST.f_seek(_CurRef)
                  |? _CurRef || SRST.seek(_CurRef)
                  ?};
                  1
               ?}
            ?}
         || {? SRSR.GRP='E' || _what:='elementu'
            |? SRSR.GRP='T' || _what:='zestawu'
            || _what:='środka'
            ?};
            FUN.info('Nie można usunąć wskazanego %1 (%2 - %3).\n\n'
                     'Zapis dla którego wprowadzono dokumenty, elementy lub naliczono amortyzację\n'
                     'nie może być usunięty. Nie można także usunąć środka który jest pojazdem i występuje\n'
                     'w kartotece pojazdów (obszar Zasoby). Należy najpierw usunąć powiązania lub zlikwidować\n'
                     'dokumentem likwidacji.'@[_what,SRST.NRI,SRST.NST]);
            0
         ?}
     "),

   obj_meth('isDataCompleted',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy bieżący środek jest środkiem dodanym w sposób uproszczony i ma uzupełnione dane
::       podstawowe (dla środków dodanych w sposób 'normalny' zakłada się że dane są uzupełnione od razu).
::----------------------------------------------------------------------------------------------------------------------
         {? SRST.SRSR().U_SR='T'
         || ~(SRST.SRSR().GR=null | SRST.SRSR().MP=null | SRST.SRSR().MF=null()
            | (FINFO.TOR_D='T' & SRST.SRSR().MD=null()) | SRST.SRSR().KONPOD=null | SRST.SRSR().KONFIN=null
            | (FINFO.TOR_D='T' & SRST.SRSR().KONPOD=null()))
         || 1
         ?}
   "),

   obj_meth('setPriv',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda sprawdza czy bieżący użytkownik ma uprawnienia do wskazanej parametrem _a czynności
::       i ustawia wartość pola obiektu .READONLY (T/N)
::----------------------------------------------------------------------------------------------------------------------
         _tmp:=sql('select distinct USERS.REFERENCE as REF '
                  +'from USERS join B_USRROL join B_ROLE join B_ACTROL join B_ACTION '
                  +'where B_ACTION.UID='':_a'' and B_ROLE.FIRMA=:_b order by REF',_a,REF.FIRMA);
         {? _tmp.first() & _tmp.find_key($OPERATOR.USER) || .READONLY:='N' || .READONLY:='T' ?}
   "),

   obj_meth('selPlan',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda wyświetla plany amortyzacji
::----------------------------------------------------------------------------------------------------------------------
      _win_sel:='WER';
      _grp:=SRSP.grp_make('GRP',,,,,\"exec('exit','zws','Esc')\");
      SRSP.grp_sel(_grp,,_win_sel);
      SRSP.win_sel(_grp);
      SRSP.win_edit('RED');
      SRSP.index('NAZWA');
      SRSP.prefix();
      AreaTitle.setArea('FST_EWZ');
      AreaTitle.setTabWin(SRSP,~~);
      AreaTitle.setTitle();
      SRSP.select(,1,10);
      SRSP.actions(_win_sel,'')
   "),

   obj_meth('firstSezMonth',"PUBLIC"; "
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca pierwszy okres podatkowy w ktorym naliczana jest amortyzacja sezonowa w danym roku
::       dla biezacego środka
::   WE: _a - SRSR.ref(); _b - rok podatkowy
::   WY: okres podatkowy (int)
::----------------------------------------------------------------------------------------------------------------------
   _okres:=0;
   SRST.cntx_psh();
   SRST.index('PODAT');
   SRST.prefix(_a,_b);
   {? SRST.first()
   || {! |?
         {? SRST.S='T' & SRST.SCH_SEZ<>null & SRST.SCH_SEZ().LM>0
         || OKR_OBSZ.cntx_psh();
            _wy:=0;
            OKR_OBSZ.index('OKRO_ES');
            OKR_OBSZ.prefix(REF.FIRMA,SRD.FST,_b,SRST.OKRES);
            {? OKR_OBSZ.first()
            || _wy:=.sez_miesiac_akt(OKR_OBSZ.OKRO().NAZWA);
               {? _wy || _okres:=SRST.OKRES ?}
            || OKR_OBSZ.prefix(REF.FIRMA,SRD.FST);
               {? OKR_OBSZ.last()
               || {? OKR_OBSZ.OKRO_F().POCZ=date(0,0,0) || OKR_OBSZ.prev() ?};
                  {? OKR_OBSZ.OKRO_F().OES=OKR_OBSZ.OKRO_F().POCZ~2
                  || _przes:=0
                  || _przes:=OKR_OBSZ.OKRO_F().POCZ~2
                  ?};
                  _nr:={? SRST.OKRES+_przes>12 || SRST.OKRES+_przes-12 || SRST.OKRES+_przes ?};
                  _wy:=.sez_miesiac_nr(_nr);
                  {? _wy || _okres:=SRST.OKRES ?}
               ?}
            ?};
            OKR_OBSZ.cntx_pop()
         ?};
         _wy=0 & SRST.next()
      !}
   ?};
   SRST.cntx_pop();
   _okres
   "),

   obj_meth('calcPlan',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda oblicza plan amortyzacji dla bieżącego środka
::   WE: _a - jeśli 1 to obliczanie dla zestawu
::----------------------------------------------------------------------------------------------------------------------
            {? _=0 || _a:='' ?};
            SRST.cntx_psh();
            SRST.index('PODAT');
            SRST.prefix(SRSR.ref());
            {? SRST.first()
            || {? .isCalcPossible()
               ||
                  _dalej:=1;
                  {! |?
                     {? SRST.OKRES>=1 & SRST.OKRES<=12
                     ||
:: kontrola czy należy przejść z amortyzacji degresywnej na liniową, w kolejnych latach amortyzacji
:: (nie jest wykonywana dla elementów składowych)
                        {? SRST.ROK<>SRSR.ROK
                           & ((SRST.S<>'T' & SRST.OKRES=1) | (SRST.S='T' & SRST.OKRES=.firstSezMonth(SRST.SRSR,SRST.ROK)))
                        || _deg_lin:=0;
                           {? 1+SRST.MP().T='D'
                           || {? (($SRST.MP().PL)()*(SRST.STAP/100))>(($SRST.MP().PD)()*((SRST.STAP/100)*SRST.WKP))
                              || _mp:=.getLin(SRST.MP().LIN,'P');
                                 SRST.MP:=_mp;
                                 SRST.put();
                                 {? SRST.GRP='E'
                                 || SRST.cntx_psh();
                                    SRST.prefix();
                                    {? SRST.seek(SRST.TREE,SRST.name())
                                    || SRST.MP:=_mp; SRST.put()
                                    ?};
                                    SRST.cntx_pop()
                                 ?};
                                 _deg_lin:=1
                              ?}
                           ?};
                           {? 1+SRST.MF().T='D'
                           || {? (($SRST.MF().PL)()*(SRST.STAF/100))>(($SRST.MF().PD)()*((SRST.STAF/100)*SRST.WKF))
                              || _mf:=.getLin(SRST.MF().LIN,'F');
                                 SRST.MF:=_mf;
                                 SRST.put();
                                 {? SRST.GRP='E'
                                 || SRST.cntx_psh();
                                    SRST.prefix();
                                    {? SRST.seek(SRST.TREE,SRST.name())
                                    || SRST.MF:=_mf; SRST.put()
                                    ?};
                                    SRST.cntx_pop()
                                 ?};
                                 _deg_lin:=1
                              ?}
                           ?};
                           {? FINFO.TOR_D='T' & 1+SRST.MD().T='D'
                           || {? (($SRST.MD().PL)()*(SRST.STAD/100))>(($SRST.MD().PD)()*((SRST.STAD/100)*SRST.WKD))
                              || _md:=.getLin(SRST.MD().LIN,'D');
                                 SRST.MD:=_md;
                                 SRST.put();
                                 {? SRST.GRP='E'
                                 || SRST.cntx_psh();
                                    SRST.prefix();
                                    {? SRST.seek(SRST.TREE,SRST.name())
                                    || SRST.MD:=_md; SRST.put()
                                    ?};
                                    SRST.cntx_pop()
                                 ?};
                                 _deg_lin:=1
                              ?}
                           ?};
:: jeżeli zmiana D->L to propaguje metodę liniową w rejestrze stanów w przyszłych okresach
                           {? _deg_lin
                           || _t_mp:=SRST.MP;
                              _t_mf:=SRST.MF;
                              {? FINFO.TOR_D='T' || _t_md:=SRST.MD ?};
                              SRST.cntx_psh();
                              {? SRST.next()
                              || {! |?
                                    SRST.MP:=_t_mp;
                                    SRST.MF:=_t_mf;
                                    {? FINFO.TOR_D='T' || SRST.MD:=_t_md ?};
                                    SRST.put();
                                    {? SRST.GRP='E'
                                    || SRST.cntx_psh();
                                       SRST.prefix();
                                       {? SRST.seek(SRST.TREE,SRST.name())
                                       || SRST.MP:=_t_mp;
                                          SRST.MF:=_t_mf;
                                          {? FINFO.TOR_D='T' || SRST.MD:=_t_md ?};
                                          SRST.put()
                                       ?};
                                       SRST.cntx_pop()
                                    ?};
                                    SRST.next()
                                 !}
                              ?};
                              SRST.cntx_pop();
                              SRST.get()
                           ?}
                        ?};
                        {? .calcAMOP(_a) & .calcAMOF('P',_a) & (FINFO.TOR_D<>'T' | .calcAMOD(_a))
                        || SRST.NAL:='T'
                        || _dalej:=0
                        ?};
:: zapis naliczonej amortyzacji
                        _dalej & SRST.put()
                     ?};
                     SRST.next()
                  !}
               ?}
            ?};
            SRST.cntx_pop();
            SRSR.PLAN_NAL:='T';
            SRSR.put()
   "),

   obj_meth('maski',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda otwiera tabele z odpowiednia maską danych rzeczywistych lub danych z planu amortyzacji
::   WE: _a - znak maski
::----------------------------------------------------------------------------------------------------------------------
         {? SRST.name()<>'srst'+_a+REF.FIRMA().SYMBOL
         || SRST.use('srst'+_a+REF.FIRMA().SYMBOL)
         ?};
         {? SRSR.name()<>'srsr'+_a+REF.FIRMA().SYMBOL
         || SRSR.use('srsr'+_a+REF.FIRMA().SYMBOL)
         ?};
         {? SRSW.name()<>'srsw'+_a+REF.FIRMA().SYMBOL
         || SRSW.use('srsw'+_a+REF.FIRMA().SYMBOL)
         ?};
         {? SRZF.name()<>'srzf'+_a+REF.FIRMA().SYMBOL
         || SRZF.use('srzf'+_a+REF.FIRMA().SYMBOL)
         ?};
         {? SRZD.name()<>'srzd'+_a+REF.FIRMA().SYMBOL
         || SRZD.use('srzd'+_a+REF.FIRMA().SYMBOL)
         ?};
         {? SRDO.name()<>'srdo'+_a+REF.FIRMA().SYMBOL
         || SRDO.use('srdo'+_a+REF.FIRMA().SYMBOL)
         ?};
         {? SRDT.name()<>'srdt'+_a+REF.FIRMA().SYMBOL
         || SRDT.use('srdt'+_a+REF.FIRMA().SYMBOL)
         ?};
         {? SRDZ.name()<>'srdz'+_a+REF.FIRMA().SYMBOL
         || SRDZ.use('srdz'+_a+REF.FIRMA().SYMBOL)
         ?};
         {? TSK.name()<>'typl'+_a+REF.FIRMA().SYMBOL
         || TSK.use('typl'+_a+REF.FIRMA().SYMBOL)
         ?};
         {? TSR.name()<>'typp'+_a+REF.FIRMA().SYMBOL
         || TSR.use('typp'+_a+REF.FIRMA().SYMBOL)
         ?};
         {? TST.name()<>'typs'+_a+REF.FIRMA().SYMBOL
         || TST.use('typs'+_a+REF.FIRMA().SYMBOL)
         ?}
   "),

   obj_meth('generuj',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda generuje dane dla planu amortyzacji
::----------------------------------------------------------------------------------------------------------------------
         {? SRSP.AKCEPT='T'
         || FUN.emsg('Planów zaakceptowanych nie można ponownie generować.'@);
            return()
         ?};
         {? SRSP.r_lock(1,1)
         ||
:: weryfikacja czy w okresie źródłowym naliczono amortyzację
            _naliczono:=1;
            SRSR.cntx_psh();SRST.cntx_psh();
            SRSR.use('srsrr'+REF.FIRMA().SYMBOL);
            SRST.use('srstr'+REF.FIRMA().SYMBOL);
            SRSR.prefix(); SRST.prefix();
            ODD.cntx_psh();
            ODD.index('ODDZIALY');
            ODD.prefix(REF.FIRMA);
            {? ODD.first()
            || {! |?
                  _naliczono:=exec('czy_nal_amor','fst',SRSP.OKRO_F,ODD.ref());
                  _naliczono & ODD.next()
               !}
            ?};
            ODD.cntx_pop();
            SRSR.cntx_pop();SRST.cntx_pop();
            {? ~_naliczono
            || _okres:=SRSP.OKRO_F().NAZ+' '+SRSP.OKRO_F().ROK().NAZ;
               FUN.emsg('W okresie źródłowym (%1) dla planu amortyzacji nie naliczono amortyzacji dla wszystkich\n'
                        'środków trwałych. Wygenerowanie danych dla planu nie jest możliwe.'@[_okres]);
               SRSP.r_unlock();
               return()
            ?};
:: weryfikacja czy są wygenerowane dane
            SRSR.cntx_psh();
            SRSR.use('srsr'+SRSP.MASKA+REF.FIRMA().SYMBOL);
            SRSR.prefix();
            {? SRSR.size()>0 || _size:=1 || _size:=0 ?};
            SRSR.cntx_pop();

            {? SRSP.GEN='T' | _size=1
            || {? FUN.ask('Dla bieżącego planu amortyzacji istnieją wygenerowane dane. Ponowne generowanie oznacza ich usunięcie\n'
                          '(zostaną usunięte środki, elementy i dokumenty dodane w planie amortyzacji).\n\n'
                          'Czy wygenerować dane ponownie?'@)
               || {? ~exec('delete_dpob','fst')
                  || FUN.emsg('Proces usuwania danych planu amortyzacji nie powiódł się, generowanie przerwane.'@);
                     return()
                  ?}
               || return()
               ?}
            ?};
            SRSR.cntx_psh(); SRST.cntx_psh();
            SRSR.use('srsr'+'r'+REF.FIRMA().SYMBOL);
            SRST.use('srst'+'r'+REF.FIRMA().SYMBOL);
            SRSR.index('KIND');
            SRSR.prefix();
            _size:=SRSR.size();
            {? SRSP.R<>'W'
            || SRST.cntx_psh();
               SRST.index('OKRES_W');
               SRST.prefix(SRSP.R,SRSP.OKRO_F);
               _size_o:=SRST.size();
               SRST.cntx_pop()
            || _size_o:=_size
            ?};
            _licznik:=0;
            _ref:=null;
            {? SRSR.first() & _size_o
            || progress(0,'Trwa generowanie danych'@,'Plan amortyzacji'@,0);
               {! |?
:: jeżeli środek dodany nie w sposób uproszczony, lub z uzupełnionymi danymi
:: jeżeli środek zwykły lub zestaw
                  _licznik+=1;
                  _procent:=ceil((_licznik/_size)*100);
                  {? _procent>100 || _procent:=100 ?};
                  _txt:='Trwa generowanie danych... %1 %%'@[form(_procent)];
                  progress(_procent,_txt,'Plan amortyzacji'@,0);
                  {? SRSR.GRP<>'E' & (SRSR.U_SR<>'T' | (SRSR.U_SR='T' & SRSR.KONPOD<>null & SRSR.GR<>null))
                  || SRST.index('PODAT');
                     SRST.prefix(SRSR.ref());
                     {? SRST.first() & (SRSP.R='W' | SRSP.R=SRST.R)
                     || {? ~SRST.find_key(SRSP.OKRO_F().RES,SRSP.OKRO_F().OES)
                        || SRST.first();
                           {? SRST.OKRO_F().RES>=SRSP.OD & SRST.OKRO_F().RES<=SRSP.DO
                           || _dalej:=1
                           || _dalej:=0
                           ?}
                        || _dalej:=1
                        ?};
                        {? _dalej & SRST.R='S' || _dalej:=0 ?};
                        {? _dalej
                        || _srsr:=SRSR.ref();
                           _txt_sr:=$SRSR.ref();
                           _srst:=SRST.ref();
                           _gr:=SRST.GR;
                           _nri:=SRST.NRI;
                           _nst:=SRST.NST;
                           _de:=SRSR.DE;
                           _jorg:=SRST.JORG;
                           _odd:=SRST.ODD;
:: dane wartościowe z rejestru stanów z okresu z którego pochodzą dane planu
                           _warp:=SRST.WARP;
                           _warf:=SRST.WARF;
                           _ward:=SRST.WARD;
                           _umop:=SRST.UMOP;
                           _umof:=SRST.UMOF;
                           _umod:=SRST.UMOD;
                           _netp:=SRST.NETP;
                           _netf:=SRST.NETF;
                           _netd:=SRST.NETD;
                           _amop:=SRST.AMOP;
                           _amof:=SRST.AMOF;
                           _amod:=SRST.AMOD;

                           SRSR.cntx_psh();
                           SRSR.use('srsr'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                           SRSR.prefix();
                           SRSR.DOKPRZ:=null;
                           SRSR.DOKSKR:=null;
                           SRSR.GR:=_gr;
                           SRSR.NRI:=_nri;
                           SRSR.NST:=_nst;
                           SRSR.DE:=_de;
                           SRSR.JORG:=_jorg;
                           SRSR.ODD:=_odd;
                           SRSR.WARP:=_warp;
                           SRSR.WARF:=_warf;
                           SRSR.WARD:=_ward;
                           SRSR.UMOP:=_umop-_amop;
                           SRSR.UMOF:=_umof-_amof;
                           SRSR.UMOD:=_umod-_amod;
                           SRSR.NETP:=_netp+_amop;
                           SRSR.NETF:=_netf+_amof;
                           SRSR.NETD:=_netd+_amod;
                           {? SRSR.add()
                           || _ref:=SRSR.ref();
                              _txt_ref:=$SRSR.ref()
                           || _ref:=null;
                              _txt_ref:=''
                           ?};
                           SRSR.cntx_pop();
:: jeżeli zestaw to uzupełnienie o elementy składowe w masce planu
                           {? _ref & SRSR.GRP='T'
                           || VAR_DEL.delete('__PLELEM');
                              __PLELEM:=tab_tmp(1,'NRI','STRING[20]','NRI',
                                               'REF_E','STRING[16]','Element');
                              SRSR.cntx_psh(); SRST.cntx_psh();
                              SRSR.use('srsr'+'r'+REF.FIRMA().SYMBOL);
                              SRSR.index('TREE'); SRSR.prefix(_srsr);
                              {? SRSR.first()
                              || {! |?
                                    SRST.index('PODAT');
                                    SRST.prefix(SRSR.ref());
                                    {? SRST.first() & (SRST.find_key(SRSP.OKRO_F().RES,SRSP.OKRO_F().OES)
                                       | (SRST.OKRO_F().RES>=SRSP.OD & SRST.OKRO_F().RES<=SRSP.DO))
                                    || _gr:=SRST.GR;
                                       _nri:=SRST.NRI;
                                       _nst:=SRST.NST;
                                       _de:=SRSR.DE;
                                       _jorg:=SRST.JORG;
                                       _odd:=SRST.ODD;
:: dane wartościowe z rejestru stanów z okresu z którego pochodzą dane planu
                                       _warp:=SRST.WARP;
                                       _warf:=SRST.WARF;
                                       _ward:=SRST.WARD;
                                       _umop:=SRST.UMOP;
                                       _umof:=SRST.UMOF;
                                       _umod:=SRST.UMOD;
                                       _netp:=SRST.NETP;
                                       _netf:=SRST.NETF;
                                       _netd:=SRST.NETD;
                                       _amop:=SRST.AMOP;
                                       _amof:=SRST.AMOF;
                                       _amod:=SRST.AMOD;
                                       SRSR.cntx_psh();
                                       SRSR.use('srsr'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                       SRSR.prefix();
                                       SRSR.DOKPRZ:=null;
                                       SRSR.DOKSKR:=null;
                                       SRSR.TREE:=_ref;
                                       SRSR.GR:=_gr;
                                       SRSR.NRI:=_nri;
                                       SRSR.NST:=_nst;
                                       SRSR.DE:=_de;
                                       SRSR.JORG:=_jorg;
                                       SRSR.ODD:=_odd;
                                       SRSR.WARP:=_warp;
                                       SRSR.WARF:=_warf;
                                       SRSR.WARD:=_ward;
                                       SRSR.UMOP:=_umop-_amop;
                                       SRSR.UMOF:=_umof-_amof;
                                       SRSR.UMOD:=_umod-_amod;
                                       SRSR.NETP:=_netp+_amop;
                                       SRSR.NETF:=_netf+_amof;
                                       SRSR.NETD:=_netd+_amod;
::                      dodanie elementu w masce planu
                                       {? SRSR.add()
                                       || __PLELEM.NRI:=SRSR.NRI;
                                          __PLELEM.REF_E:=$SRSR.ref();
                                          __PLELEM.add()
                                       ?};
                                       SRSR.cntx_pop()
                                    ?};
                                    SRSR.next()
                                 !}
                              ?};
                              SRST.cntx_pop(); SRSR.cntx_pop()
                           ?};

                           {? _ref
                           || {! |?
                                 {? SRST.ROK>=SRSP.OD & SRST.ROK<=SRSP.DO & (SRST.OKRES>=1 & SRST.OKRES<=12)
                                 || SRST.cntx_psh(); SRSR.cntx_psh();
                                    SRSR.use('srsr'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                    SRST.use('srst'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                    SRSR.prefix(); SRST.prefix();
                                    SRST.SRSR:=_ref;
                                    SRST.AMOP:=SRST.AMOF:=SRST.AMOD:=0;
                                    SRST.UMOP:=SRST.UMOF:=SRST.UMOD:=0;
                                    SRST.NETP:=SRST.NETF:=SRST.NETD:=0;
                                    SRST.NAL:='N';
:: w planach wskazanie na okres zawsze null - gdyż i tak dla lat z przyszłości nie ma okresów w systemie
                                    SRST.OKRO_F:=null;
                                    SRST.add();
                                    _grp_ref:=SRST.ref();
                                    SRST.cntx_pop(); SRSR.cntx_pop();
::                               uzupełnienie rejestru stanów elementów
                                    {? SRST.GRP='T'
                                    || _t_r:=SRST.R; _t_okr:=SRST.OKRO_F; _t_odd:=SRST.ODD;
                                       SRST.cntx_psh();
                                       SRST.index('TREE');
                                       SRST.prefix(_t_r,_t_okr,_t_odd,SRST.ref());
                                       {? SRST.first()
                                       || {! |?
                                             {? __PLELEM.find_key(SRST.NRI)
                                             || SRST.cntx_psh(); SRSR.cntx_psh();
                                                SRSR.use('srsr'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                                SRST.use('srst'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                                SRSR.prefix(); SRST.prefix();
                                                {? SRSR.seek(__PLELEM.REF_E)
                                                || SRST.SRSR:=SRSR.ref();
                                                   SRST.TREE:=_grp_ref;
                                                   SRST.AMOP:=SRST.AMOF:=SRST.AMOD:=0;
                                                   SRST.UMOP:=SRST.UMOF:=SRST.UMOD:=0;
                                                   SRST.NETP:=SRST.NETF:=SRST.NETD:=0;
                                                   SRST.NAL:='N';
                                                   SRST.OKRO_F:=null;
                                                   SRST.add()
                                                ?};
                                                SRST.cntx_pop(); SRSR.cntx_pop()
                                             ?};
                                             SRST.next()
                                          !}
                                       ?};
                                       SRST.cntx_pop()
                                    ?}
                                 ?};
                                 SRST.next()
                              !};
                              {? SRST.last() & SRST.ROK<SRSP.DO
                              || {! |? {? SRST.OKRES=0 | SRST.OKRES=13 || SRST.prev() || 0 ?} !};
                                 {! _i:=(SRST.ROK+1)..SRSP.DO |!
                                    {! _j:=1..12 |!
                                       SRST.cntx_psh(); SRSR.cntx_psh();
                                       SRSR.use('srsr'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                       SRST.use('srst'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                       SRSR.prefix(); SRST.prefix();
                                       SRST.SRSR:=_ref;
                                       SRST.AMOP:=SRST.AMOF:=SRST.AMOD:=0;
                                       SRST.UMOP:=SRST.UMOF:=SRST.UMOD:=0;
                                       SRST.NETP:=SRST.NETF:=SRST.NETD:=0;
                                       SRST.PZUZ:=0;
                                       SRST.ROK:=_i;
                                       SRST.OKRES:=_j;
                                       SRST.NAL:='N';
                                       SRST.OKRO_F:=null;
                                       SRST.add();
                                       _grp_ref:=SRST.ref();
                                       SRST.cntx_pop(); SRSR.cntx_pop();
::                                     uzupełnienie rejestru stanów elementów w okresach planowanych (nie istniejących w systemie)
                                       {? SRST.GRP='T'
                                       || _r:=SRST.R;_okro:=SRST.OKRO_F;_odd:=SRSR.ODD;
                                          SRST.cntx_psh();
                                          SRST.index('TREE');
                                          SRST.prefix(_r,_okro,_odd,SRST.ref());
                                          {? SRST.first()
                                          || {! |?
                                                {? __PLELEM.find_key(SRST.NRI)
                                                || SRST.cntx_psh(); SRSR.cntx_psh();
                                                   SRSR.use('srsr'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                                   SRST.use('srst'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                                   SRSR.prefix(); SRST.prefix();
                                                   {? SRSR.seek(__PLELEM.REF_E)
                                                   || SRST.SRSR:=SRSR.ref();
                                                      SRST.TREE:=_grp_ref;
                                                      SRST.AMOP:=SRST.AMOF:=SRST.AMOD:=0;
                                                      SRST.UMOP:=SRST.UMOF:=SRST.UMOD:=0;
                                                      SRST.NETP:=SRST.NETF:=SRST.NETD:=0;
                                                      SRST.PZUZ:=0;
                                                      SRST.ROK:=_i;
                                                      SRST.OKRES:=_j;
                                                      SRST.NAL:='N';
                                                      SRST.OKRO_F:=null;
                                                      SRST.add()
                                                   ?};
                                                   SRST.cntx_pop(); SRSR.cntx_pop()
                                                ?};
                                                SRST.next()
                                             !}
                                          ?};
                                          SRST.cntx_pop()
                                       ?}
                                    !}
                                 !}
                              ?}
                           ?};
:: uzupełnienie o dokumenty
                           {? _ref & _srsr
                           || SRDO.cntx_psh();
                              SRDT.cntx_psh();
                              SRDO.use('srdo'+'r'+REF.FIRMA().SYMBOL);
                              SRDO.index('SRODZAJ');
                              SRDO.prefix(_srsr,'W');
                              {? SRDO.first()
                              || {! |?
                                    {? SRDO.ROK>=SRSP.OD & SRDO.ROK<=SRSP.DO
                                       & (SRDO.ROK>SRSP.OKRO_F().RES | (SRDO.ROK=SRSP.OKRO_F().RES & SRDO.OKRES>SRSP.OKRO_F().OES))
                                    || SRDT.use('srdt'+'r'+REF.FIRMA().SYMBOL);
                                       SRDT.prefix();
                                       _typ:=SRDO.TYP().TYP;
                                       _typ_ref:=null;
                                       SRDT.cntx_psh();
                                       SRDT.use('srdt'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                       SRDT.index('TYP');
                                       SRDT.prefix(_typ,);
                                       {? SRDT.first()
                                       || _typ_ref:=SRDT.ref()
                                       || {? SRDT.add()
                                          || _typ_ref:=SRDT.ref()
                                          ?}
                                       ?};
                                       {? _typ_ref
                                       || SRDO.cntx_psh(); SRSR.cntx_psh();
                                          SRDO.use('srdo'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                          SRSR.use('srsr'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                          SRDO.prefix();
                                          SRDO.SRSR:=_ref;
                                          SRDO.TYP:=_typ_ref;
                                          SRDO.PLAN:='N';
                                          SRDO.SRXI:=null;
                                          SRDO.SRZF:=null;
                                          SRDO.trig_off('*','*');
                                          SRDO.add();
                                          SRDO.trig_on('*','*');
                                          SRDO.cntx_pop(); SRSR.cntx_pop()
                                       ?};
                                       SRDT.cntx_pop()
                                    ?};
                                    SRDO.next()
                                 !}
                              ?};

:: jeżeli środek z metodą degresywną wprowadzany w trakcie roku z umorzeniem to ma ukryty dokument z danymi na BO
:: ktory należy przenieść do maski planu by naliczała się amortyzacja w pierwszym roku ewidencji w systemie
                              SRDO.use('srdo'+'r'+REF.FIRMA().SYMBOL);
                              SRDO.index('RODZAJ');
                              SRDO.prefix('X',_txt_sr,);
                              {? SRDO.first()
                              || SRDO.use('srdo'+SRSP.MASKA+REF.FIRMA().SYMBOL);
                                 SRDO.prefix();
                                 SRDO.SYMBOL:=_txt_ref;
                                 SRDO.add()
                              ?};

                              SRDT.cntx_pop();
                              SRDO.cntx_pop()
                           ?}
                        ?}
                     ?}
                  ?};
                  SRSR.next()
               !};
               prgs_clr()
            || FUN.emsg('Brak środków w kartotece, wygenerowanie danych planu nie jest możliwe.'@)
            ?};
            SRSR.cntx_pop(); SRST.cntx_pop();
            SRSR.index('KIND');
            SRSR.prefix('T');
            {? SRSR.size()>0 || SRSP.GEN:='T' || SRSP.GEN:='N' ?};
            SRSP.put();

            SRSP.r_unlock()
         || FUN.emsg('Plan amortyzacji zablokowany przez innego użytkownika.'@)
         ?};
         1
   "),

   obj_meth('liczPlan',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: Naliczanie planu amortyzacji
::----------------------------------------------------------------------------------------------------------------------
         {? SRSP.r_lock(1,1)
         ||
            SRSR.cntx_psh();SRST.cntx_psh();
            SRSR.index('NRI');
            SRSR.prefix();
            {? SRSR.first()
            || SRD.KOMM:='T';
               KOMM.init(100,,'Uwagi dotyczące obliczania planu amortyzacji.'@);
               _licznik:=1;
               _size:=SRSR.size();
               _txt:='Trwa naliczanie planowanej amortyzacji'@;
               progress(0,_txt,'Plan amortyzacji'@,0);
               {! |?
                  _licznik+=1;
                  _procent:=ceil((_licznik/_size)*100);
                  {? _procent>100 || _procent:=100 ?};
                  _txt:='Trwa naliczanie planowanej amortyzacji... %1 %%'@[form(_procent)];
                  progress(_procent,_txt,'Plan amortyzacji'@,0);
                  {? SRSR.PLAN_NAL<>'T'
                  || {? SRSR.GRP='N' || SRD.calcPlan(0)
                     |? SRSR.GRP='T'
                     ||
                        SRST.cntx_psh(); SRSR.cntx_psh();
                        SRST.index('PODAT');
                        SRST.prefix(SRSR.ref());
                        {? SRST.last() || SRD.calcForSet('P') ?};
                        SRST.cntx_pop(); SRSR.cntx_pop()
                     ?}
                  ?};
                  SRSR.next()
               !};
               prgs_clr();
               SRD.KOMM:='N';
               {? ~KOMM.empty() || KOMM.select() ?}
            ?};
            SRSR.cntx_pop();SRST.cntx_pop();
            SRSR.index('KIND');
            SRSR.prefix('T');
            SRSP.r_unlock()
         || FUN.emsg('Plan amortyzacji został zablokowany przez innego użytkownika.'@)
         ?};
         1
   "),

   obj_meth('selInw',"PUBLIC";"
         SRXI.index('NUMER');
         SRXI.prefix();
         SRXI.first();
       _win_sel:='WER';
       _grp:=SRXI.grp_make('GRP',,,,,\"exec('exit','zws')\");
       SRXI.grp_sel(_grp,,_win_sel);
       SRXI.win_sel(_grp);
       SRXI.win_edit('RED');
       AreaTitle.setTabWin(SRXI,~~);
       AreaTitle.setArea('FST_INP');
       AreaTitle.setTitle();
       SRXI.select(,1,10);
       SRXI.actions(_win_sel,'')
   "),

   obj_meth('getCurUlga',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: Zwraca wartość ulgi dla bieżącego okresu i bieżącego środka
:: WE: _a - tor amortyzacji 'P'/'F'/'D'
::----------------------------------------------------------------------------------------------------------------------
      _suma:=0;
      SRSW.cntx_psh();
      SRSW.index('SSRW');
      SRSW.prefix(SRST.ref(),'U');
      {? SRSW.first()
      || {! |?
            {? _a='P' || _suma+=SRSW.AMOP
            |? _a='F' || _suma+=SRSW.AMOF
            |? _a='D' || _suma+=SRSW.AMOD
            ?};
            SRSW.next()
         !}
      ?};
      SRSW.cntx_pop();
      _suma
   "),

   obj_meth('rootVehicle',"PRIVATE"; "
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda odświeża dla zestawu san pola "czy zestaw zawiera pojazdy" po każdej zmianie elementów zestawu
::       _a - wskazanie na rekord zestawu - SRSR.ref
::----------------------------------------------------------------------------------------------------------------------
         SRSR.cntx_psh();
         SRSR.prefix();
         {? SRSR.seek(_a,SRSR.name())
         || _pojazd:=0;
            SRSR.cntx_psh();
            SRSR.index('TREE');
            SRSR.prefix(_a);
            {? SRSR.first()
            || {! |?
                  {? SRSR.POJAZD='T' || _pojazd:=1 ?};
                  SRSR.next()
               !}
            ?};
            SRSR.cntx_pop();
            {? _pojazd || SRSR.POJAZD:='T' || SRSR.POJAZD:='N' ?};
            SRSR.put()
         ?};
         SRSR.cntx_pop()
   "),

   obj_meth('delKTRD',"PRIVATE";"
         KTRD.cntx_psh();
         KTRD.index('KTRD');
         {? _>0 & type_of(_a)=type_of(null) & _a<>null
         || KTRD.prefix(_a)
         || KTRD.prefix(SRSR.ref())
         ?};
         {? KTRD.first()
         || {! |? KTRD.del() !}
         ?};
         KTRD.cntx_pop()
   "),

   obj_meth('refreshAssets',"PUBLIC";"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda odświeża widok rejestru stanów środków w bieżącym okresie
::       _a - wskazanie na okres (OKRO_F.ref())
::----------------------------------------------------------------------------------------------------------------------
         {? _a
         || {? EDIT_ES.R<>''
            || {? var_press('__LELEM') & __LELEM>0
               || SRST.index('OKRES_W');
                  {? OPERATOR.DEPT<>null
                  || SRST.prefix(EDIT_ES.R,SSTALE.AO,OPERATOR.DEPT().OD,)
                  || SRST.prefix(EDIT_ES.R,SSTALE.AO)
                  ?}
               || SRST.index('OKRES');
                  {? OPERATOR.DEPT<>null
                  || SRST.prefix('T',EDIT_ES.R,_a,OPERATOR.DEPT().OD,)
                  || SRST.prefix('T',EDIT_ES.R,_a)
                  ?}
               ?}
            || {? var_press('__LELEM') & __LELEM>0
               || SRST.index('OKR_O_W');
                  {? OPERATOR.DEPT<>null
                  || SRST.prefix(SSTALE.AO,OPERATOR.DEPT)
                  || SRST.prefix(SSTALE.AO)
                  ?}
               || SRST.index('OKR_O');
                  {? OPERATOR.DEPT<>null
                  || SRST.prefix('T',_a,OPERATOR.DEPT)
                  || SRST.prefix('T',_a)
                  ?}
               ?}
            ?};
            .setActions(_a);
            _rok:=exec('find_rok_by_okro','fst',_a);
            SRST.cntx_psh();
            SRST.index('SROD');
            SRST.prefix();
            {? SRST.find_key(SRD.REF,_rok,_a)
            || _ref:=SRST.ref();
               EDIT_ES.PRCNAZ:=SRST.P().OSOBA().NAZWISKO;
               SRDO_POM.PSTN:=SRST.P().ST().ST;
               SRDO_POM.PWYD:=SRST.P().WYDZIAL().SYMBOL

            || _ref:=null
            ?};
            SRST.cntx_pop();

            {? _ref || SRST.seek(_ref) || SRST.first() ?};

:: odświeżanie w oknie drzewa klasyfikacji środków
            {? OPERATOR.DEPT=null
            || TST.index('MAIN')
            || TST.index('MAIN_O')
            ?};
            {? TSK.TREE<>null
            || {? OPERATOR.DEPT=null
               || TST.prefix(SSTALE.AO,TSK.TREE,TSK.ref())
               || TST.prefix(SSTALE.AO,OPERATOR.DEPT,TSK.TREE,TSK.ref())
               ?}
            || {? OPERATOR.DEPT=null
               || TST.prefix(SSTALE.AO,#TSK.ref())
               || TST.prefix(SSTALE.AO,OPERATOR.DEPT,#TSK.ref())
               ?}
            ?};

            exec('title','dok_fks',SRST)
         || FUN.info('Nie udało się ustalić obowiązującego okresu pracy. Należy zweryfikować\n'
                     'ustawienia w parametrach pracy.'@)
         ?}
   "),

   obj_meth('AMOEndDate',"PRIVATE"; "
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zwraca planowaną datę końca amortyzacji dla podanych parametrów
::   WE: _a - data wprowadzenia do eksploatacji
::       _b - stawka
::       _c - korekta stawki
::       _d - rodzaj metody amortyzacji ('L' - liniowa, 'D' - degresywna)
::       _e - miesiąc rozpoczęcia amortyzacji (0 - bieżący, 1 - następny)
::       _f - czy bez naliczania amortyzacji, np. dla środków niskocennych (1/0)
::   WY: data końca amortyzacji
::----------------------------------------------------------------------------------------------------------------------
        _zero:=_data:=date(0,0,0);
        {? _<6 || return(_zero) ?};
        {? type_of(_a)<>type_of(_zero) ||return(_zero) ?};
        {? type_of(_b)<>1 || return(_zero) ?};
        {? type_of(_c)<>1 || return(_zero) ?};
        {? type_of(_d)<>2 || return(_zero) ?};
        {? _a=date(0,0,0) || return(_zero) ?};
        {? _b=0 || return(_zero) ?};
        {? _f || return(_zero) ?};
        {? _c=0 || _c:=1 ?};
        {? ~('LD'*_d) || return(_zero) ?};
        _data:=exec('data_kon_amor','srodobj',_a,_b,_c,_e,_d='D');
        _data
   "),

   obj_meth('assetToGroup',"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda zmienia środek trwały w zestaw
::----------------------------------------------------------------------------------------------------------------------
         {? SRST.GRP='N'
         || SRSR.win_edit('TO_GRP');
            SRSR.blank();
            SRST.SRSR();
            {? SRSR.U_SR='T' & (SRSR.KONPOD=null | SRSR.KONFIN=null)
            || FUN.emsg('Należy uzupełnić dane środka utworzonego w kartotece\n'
                        'uproszczonej przed jego konwersją na zestaw.'@);
               return(0)
            ?};
            _nst1:=SRSR.NST;
            _ref1:=SRSR.ref();
            OKRO_F.cntx_psh();
            _okrondx:=OKRO_F.ndx_tmp(,,'ROK','FIRMA',,'AMOR',,,'RES',,,'OES',,);
            OKRO_F.index(_okrondx); OKRO_F.prefix(REF.FIRMA,'N');
            _nalam:=0; _okrof:=null; _rokf:=null;
            {? OKRO_F.last()
            || SRST.cntx_psh(); SRST.index('SROD');
               SRSR.cntx_psh();
               {! |?
                  _okrof:=OKRO_F.ref();
                  _rokf:=OKRO_F.ROK;
                  SRST.prefix(_ref1,_rokf,_okrof);
                  {? SRST.first() & SRST.NAL='T'
                  || _nalam:=1
                  ?};
                  OKRO_F.prev & ~_nalam
               !};
               SRSR.cntx_pop();
               SRST.cntx_pop()
            ?};
            OKRO_F.ndx_drop(_okrondx);
            OKRO_F.cntx_pop();
            {? SRSR.edit(\"chk_rec()\")
            || {? ~do_state() || do() ?};
               _nst2:=SRSR.NST;
               SRSR.NRI:=(SRSR.NRI-1)+'/001';
               SRSR.GRP:='E';
               SRSR.KIND:='N';
               SRSR.NST:=_nst1;
               {? ~SRSR.put() || undo() ?};
               .updateRecState();
               {? SRSR.seek(_ref1) || 1 || undo() ?};
               SRSR.NRI:=(SRSR.NRI-4)+'.';
               SRSR.GRP:='T';
               SRSR.KIND:='T';
               SRSR.DOKPRZ:=null;
               SRSR.DOKSKR:=null;
               SRSR.BENEFIT:='N';
               SRSR.NF:='';
               SRSR.AMOR100:='N';
               SRSR.WARP100:=0;
               SRSR.ZALP100:=0;
               SRSR.FREQ100:=null;
               SRSR.JM:=null;
               SRSR.OKE:=0;
               SRSR.MAX:=0;
               SRSR.POJAZD:='N';
               SRSR.SAMOCHOD:='N';
               SRSR.SAM_EL:='N';
               SRSR.EURO:=0;
               SRSR.KURS_EUR:=0;
               SRSR.WARPELNA:=0;
               SRSR.UMOP:=0;
               SRSR.NETP:=0;
               SRSR.WARP:=0;
               SRSR.WARF:=0;
               SRSR.UMOF:=0;
               SRSR.NETF:=0;
               SRSR.OSTATEK:=0;
               SRSR.WARD:=0;
               SRSR.UMOD:=0;
               SRSR.NETD:=0;
               SRSR.NST:=_nst2;
               {? ~SRSR.add() || undo() ?};
               _ref2:=SRSR.ref();
               .updateRecState();
               SRSR.blank();
               {? SRSR.seek(_ref1) || 1 ?};
               SRSR.TREE:=_ref2;
               {? ~SRSR.put() || undo() ?};
               .updateRecState();
               _mask:=ref_name(_ref2);
               SRDO.cntx_psh();
               SRDO.use('srdo'+(4-_mask));
               SRDO.index('S1'); SRDO.prefix();
               {? SRDO.find_tab('first','SRSR',,'=',_ref1)
               || {! |?
                     SRDO.SRSR_E:=_ref1;
                     SRDO.SRSR:=_ref2;
                     {? ~SRDO.put() || undo() ?};
                     SRDO.find_tab('first','SRSR',,'=',_ref1)
                  !}
               ?};
               SRDO.cntx_pop();
               {? SRSR.seek(_ref1)
               || .updateRecState()
               ?};
               {? SRSR.seek(_ref2)
               || .updateRecState()
               ?};
               .rootVehicle(_ref2);
               .rootUpdate(_ref2);
               .rootUpdatePlan(_ref2);
               {? _nalam & _okrof & _rokf
               || SRST.cntx_psh();
                  SRST.index('SROD'); SRST.prefix(_ref2,_rokf,_okrof);
                  {? SRST.first()
                  || .calcForSet()
                  ?};
                  SRST.cntx_pop()
               ?};
               {? SRSR.seek(_ref1) || 1 ?};
               end();
               exec('memo_asset_ch','srodobj','KZ',_ref1,_nst1);
               exec('memo_asset_ch','srodobj','KZ',_ref2,_nst1)
            ?}
         || FUN.info('Funkcja dostępna tylko dla środków niebędących elementami zestawu'@)
         ?}
   "),

   obj_meth('addToGroup',"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda dodaje / przenosi środek do istniejącego zestawu
::----------------------------------------------------------------------------------------------------------------------
      {? SRST.GRP='N' | SRST.GRP='E'
      || SRST.SRSR();
         {? SRSR.U_SR='T' & (SRSR.KONPOD=null | SRSR.KONFIN=null)
         || FUN.emsg('Należy uzupełnić dane środka utworzonego w kartotece\n'
                     'uproszczonej przed jego dołączeniem do zestawu.'@);
            return(0)
         ?};
         _nrit:=_nrid:='';
         _nstt:=_nstd:='';
         _refp:=SRSR.ref();
         _nrip:=SRSR.NRI;
         _nstp:=SRSR.NST;
         _reft:=SRSR.TREE;
         _rodz:='';
         {? cur_win(1,1)='WER' | cur_win(1,1)='DWER'
         || _rodz:='T'
         || _rodz:='N'
         ?};
         SRSR.cntx_psh();
         _wingrp:=exec('srsr_win','fst');
         exec('filtr_zestawy','fst',_rodz);
         VAR_DEL.delete('grp_choose');
         grp_choose:=1;
         SRSR.win_act(_wingrp,0,'Formuła','Wybierz',,,,\"SRSR.get(); grp_choose:=0; sel_exit()\");
         SRSR.actions(_wingrp,,'W',1);
         SRSR.win_sel(_wingrp);
         SRSR.select();
         _refd:=SRSR.ref();
         SRSR.f_clear();
         SRSR.cntx_pop();
         {? grp_choose
         || VAR_DEL.delete('grp_choose');
            return(0)
         || VAR_DEL.delete('grp_choose')
         ?};
         {? ~exec('chk_el','srodobj',_refd,_refp)
         || FUN.info('Nie można dołączyć środka do wybranego zestawu'@);
            return(0)
         ?};
         OKRO_F.cntx_psh();
         _okrondx:=OKRO_F.ndx_tmp(,,'ROK','FIRMA',,'AMOR',,,'RES',,,'OES',,);
         OKRO_F.index(_okrondx); OKRO_F.prefix(REF.FIRMA,'N');
         _nalam1:=0; _nalam2:=0; _okrof1:=null; _rokf1:=null; _okrof2:=null; _rokf2:=null;
         _nalamt:=0; _okroft:=null; _rokft:=null;
         {? OKRO_F.last()
         || SRST.cntx_psh(); SRST.index('SROD');
            SRSR.cntx_psh();
            {! |?
               _okrof1:=OKRO_F.ref();
               _rokf1:=OKRO_F.ROK;
               SRST.prefix(_refp,_rokf1,_okrof1);
               {? SRST.first() & SRST.NAL='T'
               || _nalam1:=1
               ?};
               OKRO_F.prev & ~_nalam1
            !};
            {? OKRO_F.last
            || {! |?
                  _okrof2:=OKRO_F.ref();
                  _rokf2:=OKRO_F.ROK;
                  SRST.prefix(_refd,_rokf2,_okrof2);
                  {? SRST.first() & SRST.NAL='T'
                  || _nalam2:=1
                  ?};
                  OKRO_F.prev & ~_nalam2
               !}
            ?};
            {? _reft<>null & OKRO_F.last()
            || {! |?
                  _okroft:=OKRO_F.ref();
                  _rokft:=OKRO_F.ROK;
                  SRST.prefix(_reft,_rokft,_okroft);
                  {? SRST.first() & SRST.NAL='T'
                  || _nalamt:=1
                  ?};
                  OKRO_F.prev & ~_nalamt
               !}
            ?};
            SRSR.cntx_pop();
            SRST.cntx_pop()
         ?};
         OKRO_F.ndx_drop(_okrondx);
         OKRO_F.cntx_pop();
         {? ~((_rokf1=_rokf2) & (_okrof1=_okrof2))
         || FUN.info('Nie można dołączyć środka do wybranego zestawu - amortyzacja naliczona w różnych okresach'@);
            return(0)
         ?};
         {? ~do_state() || do() ?};
         {? SRSR.seek(_refp) || 1 || undo() ?};
         SRSR.GRP:='E';
         SRSR.KIND:='N';
         SRSR.TREE:=_refd;
         SRSR.NRI:='';
         {? SRSR.NRI=''
         || SRSR.cntx_psh();
            SRSR.seek(_refd);
            _nri:=_nrid:=SRSR.NRI;
            _nstd:=SRSR.NST;
            {? _nri+1='.' || _nri:=_nri-1 ?};
            SRSR.cntx_pop();
            _nri:=_nri+'/';
            SRSR.cntx_psh();
            SRSR.index('TREE');
            SRSR.prefix(_refd);
            _big:=0; _chars:=2;
            {? SRSR.first()
            || {! |?
                  _pos:=SRSR.NRI*'/';
                  {? +(_pos-SRSR.NRI)>_chars || _chars:=+(_pos-SRSR.NRI) ?};
                  {? _pos & #(_pos-SRSR.NRI)>_big || _big:=#(_pos-SRSR.NRI) ?};
                  SRSR.next()
               !}
            ?};
            {? _big>0
            || _new:=_big+1;
               {? +($_new)>_chars || _chars:=+($_new) ?};
               _nri+=form(_new,-_chars,0,'9')
            || _nri+='001'
            ?};
            SRSR.cntx_pop();
            {? _nri<>'' || SRSR.NRI:=_nri ?}
         ?};
         {? ~SRSR.put() || _okok:=0; undo() || _okok:=1 ?};
         .updateRecState();
         _mask:=ref_name(_refd);
         {? _reft=null
         || SRDO.cntx_psh();
            SRDO.use('srdo'+(4-_mask));
            SRDO.index('S1'); SRDO.prefix();
            {? SRDO.find_tab('first','SRSR',,'=',_refp)
            || {! |?
                  SRDO.SRSR_E:=_refp;
                  SRDO.SRSR:=_refd;
                  {? ~SRDO.put() || undo() ?};
                  SRDO.find_tab('first','SRSR',,'=',_refp)
               !}
            ?};
            SRDO.cntx_pop()
         || SRDO.cntx_psh();
            SRDO.use('srdo'+(4-_mask));
            _ndx:=SRDO.ndx_tmp(,,'SRSR_E',,,'SYMBOL',,);
            SRDO.index(_ndx); SRDO.prefix(_refp);
            {? SRDO.first()
            || {! |?
                  SRDO.SRSR_E:=_refp;
                  SRDO.SRSR:=_refd;
                  {? ~SRDO.put() || undo() ?};
                  SRDO.next()
               !}
            ?};
            SRDO.cntx_pop()
         ?};
         .rootVehicle(_refd);
         .rootUpdate(_refd);
         .rootUpdatePlan(_refd);
         {? _reft<>null
         || {? SRSR.seek(_reft)
            || _nrit:=SRSR.NRI;
               _nstt:=SRSR.NST
            ?};
            .rootVehicle(_reft);
            .rootUpdate(_reft);
            .rootUpdatePlan(_reft)
         ?};
         {? _nalam2 & _okrof2 & _rokf2
         || SRST.cntx_psh();
            SRST.index('SROD'); SRST.prefix(_refd,_rokf2,_okrof2);
            {? SRST.first()
            || .calcForSet()
            ?};
            SRST.cntx_pop()
         ?};
         {? _nalamt & _okroft & _rokft & _reft
         || SRST.cntx_psh();
            SRST.index('SROD'); SRST.prefix(_reft,_rokft,_okroft);
            {? SRST.first()
            || .calcForSet()
            ?};
            SRST.cntx_pop()
         ?};
         end();
         {? _okok
         || {? _reft=null
            || exec('memo_asset_ch','srodobj','S',_refp,_nrip);
               exec('memo_asset_ch','srodobj','ZD',_refd,_nri)
            || exec('memo_asset_ch','srodobj','E',_refp,_nstt,_nrit);
               exec('memo_asset_ch','srodobj','ZD',_refd,_nri);
               exec('memo_asset_ch','srodobj','ZU',_reft,_nstp,_nrip,_nrid)
            ?}
         ?}
      ?}
   "),

   obj_meth('groupToAsset',"
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda usuwa zestaw, ustawiając jego el. jako środek
::----------------------------------------------------------------------------------------------------------------------
   {? SRST.GRP='T'
   || _stan:=SRST.ref();
      SRST.SRSR();
      {? SRSR.U_SR='T' & (SRSR.KONPOD=null | SRSR.KONFIN=null)
      || FUN.emsg('Należy uzupełnić dane zestawu środków utworzonego w kartotece\n'
                  'uproszczonej przed jego wycofaniem.'@);
         return(0)
      ?};
      _ref_del:=SRSR.ref();
      _nazw:=SRSR.NST;
      _ref_el:=null;
      SRSR.cntx_psh();
      SRSR.index('TREE'); SRSR.prefix(_ref_del);
      _sizet:=SRSR.size();
      {? _sizet<>1
      || FUN.info('Nie można wycofać zestawu, którego liczba elementów jest różna od 1'@); SRSR.cntx_pop();
         return(0)
      || {? SRSR.first() || _ref_el:=SRSR.ref() ?}
      ?};
      SRSR.cntx_pop();
      {? ~FUN.ask('Czy na pewno wycofać zestaw %1?'@[_nazw])
      || return(0)
      ?};
      OKRO_F.cntx_psh();
      _okrondx:=OKRO_F.ndx_tmp(,,'ROK','FIRMA',,'AMOR',,,'RES',,,'OES',,);
      OKRO_F.index(_okrondx); OKRO_F.prefix(REF.FIRMA,'N');
      _nalam:=0; _okrof:=null; _rokf:=null;
      {? OKRO_F.last()
      || SRST.cntx_psh(); SRST.index('SROD');
         SRSR.cntx_psh();
         {! |?
            _okrof:=OKRO_F.ref();
            _rokf:=OKRO_F.ROK;
            SRST.prefix(_ref_del,_rokf,_okrof);
            {? SRST.first() & SRST.NAL='T'
            || _nalam:=1
            ?};
            OKRO_F.prev & ~_nalam
         !};
         SRSR.cntx_pop();
         SRST.cntx_pop()
      ?};
      OKRO_F.ndx_drop(_okrondx);
      OKRO_F.cntx_pop();
      {? ~do_state() || do() ?};
      SRSR.cntx_psh();
      SRSR.index('S1'); SRSR.prefix(); SRSR.blank();
      {? SRSR.seek(_ref_el)
      || SRSR.TREE:=0;
         SRSR.NRI:=(SRSR.NRI-4);
         SRSR.GRP:='N';
         SRSR.KIND:='T';
         {? ~SRSR.put() || undo() ?};
         .updateRecState()
      ?};
      _mask:=ref_name(_ref_el);
      SRDO.cntx_psh();
      SRDO.use('srdo'+(4-_mask));
      SRDO.index('S1'); SRDO.prefix();
      {? SRDO.find_tab('first','SRSR_E',,'=',_ref_el)
      || {! |?
            SRDO.SRSR_E:=null;
            SRDO.SRSR:=_ref_el;
            {? ~SRDO.put() || undo() ?};
               SRDO.find_tab('first','SRSR_E',,'=',_ref_el)
         !}
      ?};
      SRDO.cntx_pop();
      .rootVehicle(_ref_del);
      .rootUpdate(_ref_del);
      .rootUpdatePlan(_ref_del);
       OKRO_F.cntx_psh();
      _okrondx:=OKRO_F.ndx_tmp(,,'ROK','FIRMA',,'AMOR',,,'RES',,,'OES',,);
      OKRO_F.index(_okrondx); OKRO_F.prefix(REF.FIRMA,'N');
      {? OKRO_F.last()
      || SRSR.cntx_psh();
         {? SRSR.seek(_ref_el)
         || {! |?
               .delRecState(1);
               OKRO_F.prev()
            !}
         ?};
         {? OKRO_F.last()
         || {? SRSR.seek(_ref_del)
            || {! |?
                  .delRecState(1);
                  OKRO_F.prev()
               !}
            ?}
         ?};
         SRSR.cntx_pop()
      ?};
      OKRO_F.ndx_drop(_okrondx);
      OKRO_F.cntx_pop();
      {? SRSR.seek(_ref_del) & SRSR.count=0
      || {? ~SRSR.del(,1) || undo() || SRSR.seek(_ref_el) ?}
      ?};
      SRSR.NRI+='.';
      {? ~SRSR.put() || undo() ?};
      .updateRecState();
      SRST.cntx_psh();
      SRST.index('SROD'); SRST.prefix(_ref_el,SSTALE.AR,SSTALE.AO);
      _akt:=_stan;
      {? SRST.first()
      || _akt:=SRST.ref()
      ?};
      SRST.cntx_pop();
      {? _nalam & _okrof & _rokf
      || SRST.cntx_psh();
         SRST.index('SROD'); SRST.prefix(_ref_el,_rokf,_okrof);
         {? SRST.first()
         || .calculation()
         ?};
         SRST.cntx_pop()
      ?};
      SRSR.cntx_pop();
      end();
      exec('memo_asset_ch','srodobj','KS',_ref_el,_nazw);
      {? SRST.seek(_akt) || 1 ?}
   ?}
   ")
   )
?}


