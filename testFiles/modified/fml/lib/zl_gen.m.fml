:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zl_gen.fml
:: Utworzony: 25.06.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Obsługa generowania zleceń - część biblioteczna czynności TTE_PZL_DZWE, TTE_PZL_DZLG
::            Wyświetlanie i aktualizacja powiązań ze źródłem (tabela ZLZAM)
::            Plik biblioteczny - wspólna obsługa dla czynności obszaru roboczego TTE_PZL
::======================================================================================================================


\gen_zlec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.41]
:: OPIS: Uniwersalna formuła generująca zlecenie na podstawie przekazanych parametrów
::   WE: _args
::   WY: null() - porażka, zlecenia nie udało się dodać
::       ZL.ref - sukces, dodano zlecenie
::  OLD: \gen_zlec/zl.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _args:=_a
|| _args:=exec('gen_zlec_a','zl_gen')
?};

:: Sprawdzam czy wymagane parametry zostały przekazane
{? _args.KTM=''
|| FUN.wdrerror('Argument: %1 nie został przekazany do formuły: %2.'@['KTM','gen_zlec\\zl_gen.fml']);
   return(null())
?};
::{? _args.DTR=date(0,0,0)
::|| FUN.wdrerror('Argument: %1 nie został przekazany do formuły: %2.'@['DTR','gen_zlec\\zl_gen.fml']);
::   return(null())
::?};
{? _args.ILOSC=-1
|| FUN.wdrerror('Argument: %1 nie został przekazany do formuły: %2.'@['ILOSC','gen_zlec\\zl_gen.fml']);
   return(null())
?};
{? _args.ZTP=null()
|| FUN.wdrerror('Argument: %1 nie został przekazany do formuły: %2.'@['ZTP','gen_zlec\\zl_gen.fml']);
   return(null())
?};

{? _args.PL_DATA=date(0,0,0)
|| _args.PL_DATA:=_args.DTR
?};

_ok:=1;
_result:=null();
_can_continue:=1;

PROJEKTY.cntx_psh();
M.cntx_psh();
M.clear();

ZL.clear();
::ZL.last();
ZL.blank();

:: Przypisanie typu zlecenia
ZL.TYP:=_args.ZTP;
{? _args.PL_DIR=-10
|| _args.PL_DIR:=ZL.TYP().PL_DIR
?};

{? ZL.TYP().KOD_ZLC='' | ZL.TYP().KOD_ZLP=''
|| {? VAR.GRUPA='T'
   || KOMM.add('Funkcja niedostępna — typ zlecenia \'%1\' nie ma określonego sposobu numeracji.'@[ZL.TYP().TYP],2)
   || FUN.emsg('Funkcja niedostępna — typ zlecenia nie ma określonego sposobu numeracji.'@)
   ?};
   M.cntx_pop();
   PROJEKTY.cntx_pop();
   return(null())
?};

:: Przypisanie ilości na zleceniu
ZL.IL:=_args.ILOSC;
ZL.IL0:=ZL.IL;

:: W zależności, czy generowanie w strukturze zlecenia niezależnego
{? _args.ZL_NAD=null()
|| ZL.NRNZL:=0;
   ZL.NRPZL:=0;
   ZL.LEVEL:=0;
   ZL.TREE:=0
|| ZL.NRNZL:=exec('FindAndGet','#table',ZL,_args.ZL_NAD,,"UNRZL",0);
   ZL.NRPZL:=ZL.NRNZL;
   ZL.LEVEL:=1;
   ZL.TREE:=#exec('FindAndGet','#table',ZL,_args.ZL_NAD)
?};
ZL.NODE:=exec('node','zl_head');

ZL.OPIS:=_args.OPIS;
{? _args.OPIS*'Generowane z analizy wykonania'>0
|| _txt:='~analiza wykonania'
|? _args.OPIS*'Generowane z zam'>0
|| _txt:='~zamówienie'
|? _args.OPIS*'Generowane z planu sprzedaży'>0
|| _txt:='~plan sprzedaży'
|? _args.OPIS*'Generowane z planu dostaw'>0
|| _txt:='~plan dostaw'
|? _args.OPIS*'Generowane ze stanów magazynowych'>0
|| _txt:=exec('zpwyd_sm','zl_gen')
|| _txt:='~plan produkcji'
?};
ZL.UWAGI:=_args.UWAGI;

ZPWYD.prefix();
ZPWYD.index('ZPWYD_PW');
{? ZPWYD.find_key(_txt)
|| ZL.PWYD:=ZPWYD.ref()
|| ZPWYD.PWYD:=_txt;
   ZPWYD.add();
   ZL.PWYD:=ZPWYD.ref()
?};

ZL.OD:=date();
ZL.STAN:='N';
ZL.NSTAN:=ZL.STAN+'_';
::ZL.GENRP:={? ZL.RODZAJ<>'N' & ZL.RODZAJ<>'O' || 'T'||'N' ?};

POM.TAB:='ZL';
exec('add_grnr','numery','ZLC');
exec('add_grnr','numery','ZLP');
POM.TYPDOK:={? ZL.NRNZL=0 || ZL.TYP().KOD_ZLC || ZL.TYP().KOD_ZLP ?};

ZL.SYM:='~'+$ZL.tm_stamp();
exec('ust_znac','zl_head');
exec('set_rodz_tex','zl_head');
{? ZL.add() & ZL.r_lock(1,1,1)
||
   ZL.SYM:='';
   ZL.memo_set(_args.OPIS_DOD,'OPIS_DOD');
   ZL.memo_put(,'OPIS_DOD')

|| _can_continue:=0
?};

{? _can_continue>0
||
   {? ZL.TREE=0 || ZL.NODE:=exec('node','zl_head'); ZL.put() ?};
   ZL.NR:=0;
   ZL.NR:=exec('numer_new','numery',{? _args.DIALOG_WOL_NR || 'N' || 'PACZKA' ?});
   exec('znak','numery','ZL',1);

   {? exec('enabled','zl_uslugi')
   || M.index('MATKTM');
      M.prefix(_args.KTM,)
   || M.index('RODZ');
      M.prefix('T',_args.KTM,)
   ?};
   {? M.first()
   || ZL.KTM:=M.ref();
      ZL.POWOL:=OPERATOR.USER;
      ZL.SCEAN:=exec('blzl_sce','kody_kresk');
      ZL.ZLEAN:=exec('blzl2sce','kody_kresk');

::    Ustawienie kontrahenta na zleceniu
      {? _args.KH=''
      || ZL.KH:=null()
      || ZL.KH:=exec('FindAndGet','#table','KH',_args.KH,,,null())
      ?};

::    Terminy realizacji
      ZL.DTR:=_args.DTR;
      ZL.PL_DATA:=_args.PL_DATA;
      ZL.PL_TIME:=_args.PL_TIME;
      ZL.NSTAN:=ZL.STAN+'_';

::    Zasady planowania
      ZL.PL_DIR:=_args.PL_DIR;
      ZL.PL_FORCE:=_args.PL_FORCE;

::    Karta technologiczna
      {? _args.TKTL=null()
      || ZL.KTL:=exec('wyb_ktl','zl_gen',1,1)
      || ZL.KTL:=_args.TKTL
      ?};
      {? ZL.KTL=null()
      || ZL.SRCTECH:='N'
      || ZL.SRCTECH:='T'
      ?};

::    Cecha na produkcie zlecenia (zlecenie będzie produkowało wyroby z tą cechą)
      {? _args.DK_C<>''
      || ZL.DK_C:=exec('FindAndGet','#table',DK_C,_args.DK_C,,,null())
      ?};

::    Ilość do optymalnej serii
      {? _args.SERIA>0
      || ZL.IL:=ceil(ZL.IL/ZL.KTL().SERIA)*ZL.KTL().SERIA;
         ZL.IL0:=ZL.IL
      ?};

      _pf:=0;
      {? _args.COMPLEX<>'N' & _args.RODZAJ=''
      || _pf:=exec('czy_pf','tech_mater',ZL.KTL)
      ?};

      ZL.GRP_KEY:=_args.GRP_KEY;

::    Projekt
      {? _args.PROJEKTY<>null() & exec('zl_proj_inherit','zl_gen',_args.PROJEKTY)
      || ZL.PROJEKTY:=_args.PROJEKTY
      ?};

      {?
::         VAR.A_ZLNAD=null() &
         _pf>0 & VAR.GRUPA<>'T' & _args.RODZAJ='' & _args.COMPLEX='P'
      || {? _args.DIALOG>0
         || _cmplx:=FUN.ask(
                  'Technologia %1 wer. %2 na wyrób %3'
                  ' zawiera półfabrykaty.\nCzy utworzyć zlecenie złożone?'@[ZL.KTL().NRK,ZL.KTL().WER,ZL.KTM().KTM]
               )
         || _cmplx:=0
         ?};
         {? _cmplx>0
         || _arch:=exec('chk_pf_arch','zl_head',ZL.KTL,_args.DIALOG);
            {? _arch>0
            || _cmplx:=0
            ?}
         ?};

         {? _cmplx>0
         || ZL.RODZAJ:='Z';
            ZL.TREE_TYP:='Z';
            ZL.GENLIM:='P';
            ZL.GENPRZEW:='P';
            ZL.AUTGENZL:='T'
         || ZL.RODZAJ:='P';
            ZL.TREE_TYP:='P';
            ZL.GENLIM:='N';
            ZL.GENPRZEW:='N';
            ZL.AUTGENZL:='N'
         ?}
      |?
::         VAR.A_ZLNAD=null() &
         _args.RODZAJ='Z' | _args.COMPLEX='T'
      || ZL.RODZAJ:='Z';
         ZL.TREE_TYP:='Z';
         ZL.GENLIM:='P';
         ZL.GENPRZEW:='P';
         ZL.AUTGENZL:='T'
      || ZL.RODZAJ:='P';
         ZL.TREE_TYP:='P';
         ZL.GENLIM:='P';
         ZL.GENPRZEW:='P';
         ZL.AUTGENZL:='N'
      ?};

::    Obsługa pola ZL.RP
      {? M.RODZ='T' & (exec('is_podzlec4mag','zl_link')>0 | exec('is_main_podzlec','zl_link'))>0
      || ZL.RP:='T'
      ?};

      SLO.index('KOD');

::    Przypisywanie wydziału
      {? ZL.PROJEKTY<>null() & ZL.PROJEKTY().UD_SKL<>null()
      ||
         UD_SKL.cntx_psh();
         SLO.cntx_psh();
         SLO.index('SL');
         SLO.prefix(XINFO.SLWYDZIA,PROJEKTY.UD_SKL().SYMBOL,);
         {? SLO.first()
         || ZL.JORG:=SLO.ref()
         || _msg:='Błąd konfiguracji systemu.'@+'\n\n'+'Nie znaleziono wydziału: %1.'@[PROJEKTY.UD_SKL().SYMBOL];
            {? VAR.GRUPA='T'
            || KOMM.add(_msg)
            || FUN.emsg(_msg)
            ?}
         ?};
         SLO.cntx_pop();
         UD_SKL.cntx_pop()
      ||
         {? ZL.TYP().WYD<>null()
         || ZL.JORG:=ZL.TYP().WYD
         ||
            _wydzial:=exec('wydzialy','tech_common',_args.TKTL);
            _ii:=obj_len(_wydzial);
            {? _ii=0
            || ZL.JORG:=ST.A_WYD
            |? _ii=1
            || ZL.JORG:=_wydzial[1]
            || ZL.JORG:=null()
            ?};
            {? ZL.JORG=null() & ZL.KTL<>null() || ZL.JORG:=ZL.KTL().JORG ?};
            {? ZL.JORG=null() || ZL.JORG:=ST.A_WYD ?}
         ?}
      ?};

:: NUCO - Zmiana symbolu zlecenie generowanego automatycznie - dodanie symbolu wydziału
      exec('symbol_zl','qtte');

      _mg:=_args.MG;
::    Jeżeli wtyczka zwróci niepuste złączenie, to ma większą moc niż standardowa obsługa
      {? Plugin.runnable('ZL_MG_ZLEC_001')
      || _res:=Plugin.run('ZL_MG_ZLEC_001',ZL.ODDZ,ZL.KTM,ZL.JORG);
         {? type_of(_res)=type_of(MG.ref()) & _res<>null()
         || {? ZL.ODDZ=exec('FindAndGet','#table',MG,_res,,"MG.ODDZ",'')
            || _mg:=_res
            ?}
         ?}
      ?};
      ZL.MG:=_mg;
      {? ZL.MG=null() || ZL.MG:={? ZL.ODDZ=ZL.TYP().MG().ODDZ || ZL.TYP().MG || null() ?} ?};
      {? ZL.MG=null() || ZL.MG:=exec('ustmwyd','zl_common',ZL.ODDZ,ZL.JORG,0) ?};
         exec('ust_znac','zl_head');
         exec('set_rodz_tex','zl_head');
::    Wtyczka na wypełnienie konta kosztowego
      {? Plugin.runnable('ZL_KONTO_001')
      || _kk:=Plugin.run('ZL_KONTO_001',ZL.ODDZ,ZL.JORG);
         {? type_of(_kk)=type_of(KK.ref()) & _kk<>null()
         || ZL.KK:=_kk
         ?}
      ?};
         {? _can_continue>0
         || {? ZL.put()
            || VAR.A_ZLEC:=ZL.ref();
               {? VAR.GRUPA='T' | _args.DIALOG>0
            || _kind:='????';
               {? ZL.RODZAJ='P'
               || _kind:='pojedyncze'@
               |? ZL.RODZAJ='Z'
               || _kind:='z podzleceniami na półfabrykaty'@
               |? ZL.RODZAJ='N'
               || _kind:='z podzleceniami niezależnymi'@
               ?};
               KOMM.add('Wygenerowano zlecenie %1 o symbolu: %2'@[_kind,ZL.SYM],13)
               ?};
               {? ZL.f_active()>1
               || {? VAR.GRUPA='T' | _args.DIALOG>0
               || KOMM.add(' '+'Uwaga. W celu podglądu zlecenia należy odświeżyć filtr.'@,3)
                  ?}
               |? ZL.f_active()>0
               || ZL.f_add()
               ?};
               {? ZAKR.ZTP_WP<>'' & ~exec('ctrl_zl','zl_view',ZL.ref())
               || {? VAR.GRUPA='T' | _args.DIALOG>0
               || KOMM.add(' '+'Uwaga. W celu podglądu zlecenia należy zmienić aktualny zakres zleceń.'@,3)
                  ?}
               ?};
               exec('zl2obj','px_obj');
               exec('add_zwar_pos','zl_common','_n',0)
            || _can_continue:=0
            ?}
         ?}
   || _msg:='Materiał: %1. Brak w słowniku materiału o podanym identyfikatorze'@[_args.KTM];
      {? VAR.GRUPA='T'
      || KOMM.add(_msg,14)
      || FUN.emsg(_msg)
      ?};
      _can_continue:=0
   ?}
?};
{? _can_continue>0
||
   {? ZL.SCEAN<>'' & ZL.KTM().IDMOB='Z' || exec('mkodkadd','kody_kresk',ZL.KTM,ZL.SCEAN,$ZL.ref()) ?};

:: Dodałem zlecenie - odblokowuję rekord
   {? ZL.STAN='O' || exec('ZK_N_4_ZL_aKC','zamsiw_nag',ZL.ref(),'T') ?};
   ZL.r_unlock()
||
:: Nie udało sie dodać zlecenia - sprzątam
   POM.TAB:='ZL';
   exec('add_grnr','numery','ZLC');
   exec('add_grnr','numery','ZLP');
   POM.TYPDOK:={? ZL.NRNZL=0 || ZL.TYP().KOD_ZLC || ZL.TYP().KOD_ZLP ?};

   numer:=ZL.NR;
   oldnumer:=1;
   ZL.del();
   exec('nr_old','numery')
?};

{? _can_continue>0
|| _zlec:=ZL.ref();
   {? exec('zl_lock','zl_common',,,1)
   || exec('add_zlzam','zl_gen',_zlec,_args.ILOSC,#ZL.KTM);
      _il_manual:=ZL.IL-_args.ILOSC;
      {? _il_manual>0 || exec('add_zleczam','zl_gen',ZL.ref(),_il_manual) ?};
      exec('openmask','zl_common',ZL.ref());
      exec('zl_unlock','zl_common')
   ?}
?};
M.cntx_pop();
PROJEKTY.cntx_pop();

{? _can_continue>0
|| _result:=ZL.ref()
?};
_result


\zkp2args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Generuję/aktualizuję tablicę z argumentami dla funkcji generujących zlecenie na postawie
::       aktualnego rekordu pozycji zamówienia ZK_P
::   WE: [_a] - wynik działania exec('auto_args','zl_gen')
::   WY: _args - argumenty dla funkcji generującej, wynik działania exec('auto_args','zl_gen')
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _args:=_a
|| _args:=exec('auto_args','zl_gen')
?};

_args.GRUPA:=0;
_args.DIALOG:=1;
_args.SRC_REF:=$ZK_P.ref();
_args.M:=$ZK_P.M;
_args.KTM:=ZK_P.M().KTM;
_args.M_ATR:=ZK_P.M().M_ATR;
_args.SYMBOL:=ZK_P.N().SYM;
_args.POZ:=ZK_P.POZ;
_args.IL_ZAM:=ZK_P.ILZ;
_args.IL_WYTW:=ZK_P.ILP-ZK_P.ILRB;
{? exec('get','#params',500223)='T' || _args.MG:=ZK_P.MG ?};
ZLZAM.index('ZMZL');
ZLZAM.prefix($ZK_P.ref());
_args.IL_ZL:=0;
{? ZLZAM.first()
|| {!
   |? _args.IL_ZL+=ZLZAM.ILZL;
      REZ.index('ZLZAM');
      REZ.prefix(ZLZAM.ref(),'B');
      {? REZ.first()
      || {!
         |? _args.IL_WYTW+=REZ.ILR;
            REZ.next()
         !}
      ?};
      ZLZAM.next()
   !}
?};
_args.IL_REZ:=ZK_P.ILRB;
_args.KH_REF:=$ZK_P.N().KH;
_args.KH_NAZ:=ZK_N.KH().NAZ;
_args.KH_KOD:=KH.KOD;
_args.DTR:=ZK_P.DT;
_args.PL_DATA:=ZK_P.PL_DATA;
_args.PL_TIME:=ZK_P.PL_TIME;

:: NUCO - Jeśłi zlecenie jest planowane na termin późniejszy niż dziś to przestawiamy termin na kolejny dzień
{? _args.PL_DATA<=date()
|| _args.PL_DATA:=_args.DTR;
   _args.PL_TIME:=time(0,0,0)
?};
:: Zlecenia planujemy zawsze zgodnie z parametrem na typie zlecenia
:: _args.PL_DIR:={? ZK_P.PL_DIR=0 || -10 || ZK_P.PL_DIR ?};
_args.PL_DIR:=-10;
:: Zlecenia zawsze są kontynuowane po przekroczeniu terminu
::_args.PL_FORCE:=ZK_P.PL_FORCE;
_args.PL_FORCE:='T';
:: NUCO - koniec zmian

_args.DK_C:=$ZK_P.DK_C;
_args.JM_SYM:=M.J().KOD;
_args.TKTL:=null();
{? ZLEC.GRP=4
|| _args.TKTL:=exec('wyb_ktl','zl_gen',0)
?};
_args.ZTP:=null();
::exec('FindAndGet','#table',ZL,VAR.A_ZLNAD,,"TYP",null());
_args.MERGE:=1;
::(VAR.A_ZLNAD=null());
_args.COMPLEX:='P';
::(VAR.A_ZLNAD=null());
_args.GRP_KEY:='';
_args.PROJEKTY:=ZK_P.PROJEKTY;
:: NUCO - zmiana w opisie zlecenia do zamóienia
_args.OPIS:='Generowane z zam.: %1 p. %2'@[ZK_N.SYM,$ZK_P.POZ];
_args.UWAGI:=ZK_P.U;
{? var_press('OPIS_DOD',_args)>100 || obj_del(_args.OPIS_DOD) ?};
_args.OPIS_DOD:='';

_par:=exec('get','#params',500222,2);
{? (_par+1='T' & +ZK_P.N().memo_txt(,1,'UW')>0 ) | (1+_par='T' & +ZK_P.N().OP>0)
|| _args.OPIS_DOD:=fopen(null,'uw',,,1)
?};

{? 1+_par='T' & +ZK_P.N().OP>0
|| {?  var_press('OPIS_DOD',_args)>100
   || _str:='Uwagi z nagłówka zamówienia:\n'+ZK_P.N().OP;
      _args.OPIS_DOD.fwrite(_str)
   || _args.OPIS_DOD:='Uwagi z nagłówka zamówienia:\n'+ZK_P.N().OP
   ?}
?};

{? _par+1='T' & +ZK_P.N().memo_txt(,1,'UW')>0
|| _str:='Dodatkowy opis z nagłówka zamówienia:';
   _args.OPIS_DOD.fwrite(_str);
   {? +ZK_P.N().memo_txt(,1,'UW')>255
   || _tmp:=ZK_P.N().memo_get('r','UW',0);
      {!
      |? (_txt:=fread(_tmp))<>'\n'
      |! _args.OPIS_DOD.fwrite(_txt)
      !}
   || _args.OPIS_DOD.fwrite(ZK_P.N().memo_txt(,1,'UW'))
   ?}
?};
_args