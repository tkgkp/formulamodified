:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku:  po_plan.fml [17.00]
:: Utworzony: 14-10-2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Zbiór różnych funkcji dla planu operacyjnego
::======================================================================================================================


\gettechdata
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2011]
:: OPIS: Zasilenie procedury wbudowanej gettechdata@po_plope
::   WE: _a - :RS
::       _b - STRING[1] - typ zrodla: 'T'echnologia, technologia 'Z'lecenia, 'P' przewodnik
::       _c - $M.ref()
::       _d - SQL ref - ref zrodla pochodzenia danych czyli $TKTL.ref(), $ZGH.ref()
::       _e - REAL - planowana ilosc
::       _f - SQL ref - ref planowanego obiektu - $ZL.ref(), $ZK_P.ref()
::       _g - STRING[10] - typ planowanego obiektu: 'ZL_P', 'ZK_P'
::       _f - STRING[255] - nazwa przewodnika planistycznego
::  OLD: \gettechdata/pl_okr3.fml
::----------------------------------------------------------------------------------------------------------------------
:: nie sprawdzamy przekazanych argumentow!
_rs:=_a;
_t_z:=_b;
_m_ref:=_c;
_source:=_d;
_il:=_e;
_obj_ref:=_f;
_obj_typ:=_g;
_plpart:=_h;

_ndx_def:=_rs.index('?');

ZGH.cntx_psh(); ZGH.clear();
ZGP.cntx_psh(); ZGP.clear();
NASZGP.cntx_psh();
ZL.cntx_psh(); ZL.clear();
M.cntx_psh();
M.clear();

:: Wszystkim tabelom dotyczacym technologii robie cnxt_psh
exec('tktl_cntx_psh','tech_common');

:: numer operacji w procesie
_num:=0;

:: calkowity czas procesu
_alltime:=0;

_root:=null();

:: Minimalny czas rozpoczecia wspolny dla wszystkich operacji - z planu strategicznego
_mps_min:='';

:: Maksymalny czas zakonczenia wspolny dla wszystkich operacji - z planu strategicznego
_mps_max:='';

_mainver:=exec('get_mainversion','px_ver');
{? _obj_typ='ZL_P'
||
   {? exec('zl_plannedSQL','px_obj',_obj_ref,_mainver)>0
   || _tm_start:=exec('zlec_start_sql','px_tie',_obj_ref);
      _tm_end:=exec('zlec_end_sql','px_tie',_obj_ref);
      {? _tm_start>0
      || _mps_min:=exec('to_string','#tm_stamp',_tm_start)
      ?};
      {? _tm_end>0
      || _mps_max:=exec('to_string','#tm_stamp',_tm_end)
      ?}
   ?}
?};
{? _obj_typ='ZK_P'
|| {? exec('zkp_plannedSQL','px_obj',_obj_ref,_mainver)>0
   || _tm_start:=exec('zkp_start_sql','px_tie',_obj_ref);
      _tm_end:=exec('zkp_end_sql','px_tie',_obj_ref);
      {? _tm_start>0
      || _mps_min:=exec('to_string','#tm_stamp',_tm_start)
      ?};
      {? _tm_end>0
      || _mps_max:=exec('to_string','#tm_stamp',_tm_end)
      ?}
   ?}
?};
{? _obj_typ='ZGP'
|| _tm_start:=exec('zgp_start_sql','px_tie',_obj_ref);
   _tm_end:=exec('zgp_end_sql','px_tie',_obj_ref);
   {? _tm_start>0
   || _mps_min:=exec('to_string','#tm_stamp',_tm_start)
   ?};
   {? _tm_end>0
   || _mps_max:=exec('to_string','#tm_stamp',_tm_end)
   ?}
?};

{? _t_z='T'
||
:: Wymyslam maske na podstawie pola z sql_refem
   _msk:=form((8+_source)+3);

:: Otwieram wlasciwa maske dla tabel z technologia
   exec('tktl_use','tech_common',_msk);

   TKTLW.index('REF');
   TKTLW.prefix(BIT.sqlint(_source),BIT.sqlint(_m_ref));
   TKTL.clear();
   {? TKTLW.first() & TKTL.seek(_source) & M.seek(_m_ref)
   ||
      VAR.A_KTL:=TKTL.ref();
      exec('start_tpar','tech_param',M.ref());

      _rs.blank();
      _rs.TYP:='C';
      _rs.SYM:='Całość';
      _rs.NAZWA:='Całość';
      _rs.LEVEL:=0;
      _rs.PAR:=0;
      _rs.add();
      _root:=_rs.ref();
      _rs.ID:=#_rs.ref();
      _rs.put();
      _par_c:=_rs.ID;

::    kolejnosc operacji wg zlozonosci
      _toper:=tab_tmp(1,
         'NUM','INTEGER','Numer',
         'REF','INTEGER','#TOPER.ref()',
         'REF_SQL', 'STRING[16]', '$TOPER.ref()'
      );

      __formulka:="
         TOPER.cntx_psh();
         TOPER.index('ANNN');
         TOPER.prefix('T','N',_b,_c);
         {? TOPER.first()
         || {!
            |?
               {? TOPER.PZ='P' & tpar.calc(TOPER.EXIST)
               || _a.REF:=#TOPER.ref();
                  _a.REF_SQL:=$TOPER.ref();
                  _a.add();
                  _a.NUM:=#_a.ref();
                  _a.put()
               ?};
               __formulka(_a,_b,TOPER.UNROP);
               TOPER.next()
            !}
         ?};
         TOPER.cntx_pop()
      ";
      __formulka(_toper,TKTL.ref(),0);
      &__formulka;

      _toper.clear();
      TOPER.clear();

      {? _toper.first()
      ||
         _offset:=0;
         _duration:=0;
         {!
         |?
            {? TOPER.seek(_toper.REF,)
            ||
               _num+=1;

               _coef:=_il/TKTL.XJM;
               _rs.blank();
               _rs.TYP:='O';
               {? TOPER.WEW='T'
               ||
                  _rs.SYM:=TOPER.OPER().KOD;
                  _rs.NAZWA:=TTOPER.NA;
                  _rs.COOP:='N'
               ||
                  _rs.SYM:=TOPER.TTOUT().KOD;
                  _rs.NAZWA:=TTOUT.NA;
                  _rs.COOP:='T'
               ?};
               _rs.LEVEL:=1;
               _rs.PAR:=_par_c;

::             Uwaga: przeliczenie, jezeli technologia parametryzowana
               _mtime:={? TOPER.FMTIME<>'' || tpar.calc(TOPER.FMTIME) || TOPER.MTIME ?};
               _ntime:={? TOPER.FNTIME<>''|| tpar.calc(TOPER.FNTIME) || TOPER.NTIME ?};
:: NUCO - zmiana - pominięcie czasu transportu w planie operacyjnym
               {? TOPER.PLACE().WYD().KOD<>'MSU'
               || _ttm:=0
               || _ttm:={? TOPER.FTTM<>''|| tpar.calc(TOPER.FTTM) || TOPER.TTM ?}
               ?};
               _nko:={? TOPER.FNKO<>''|| tpar.calc(TOPER.FNKO) || TOPER.NKO ?};
               _exist:={? TOPER.EXIST<>'' || tpar.calc(TOPER.EXIST) || 1 ?};
               {? TOPER.WEW='T'
               || _rs.DURATION:={? _mtime=0 || _ntime || _mtime ?}*60*{? TOPER.FIX_NORM='T' || 1 || _coef ?}
               ||
::                czas dla kooperacji
                  _rs.DURATION:=TOPER.DAYS_K*exec('coef_dg','px_kont',TOPER.PX_KONT,0,0)*60*_coef
               ?};
               _rs.OFFSET_P:=_offset;
               _rs.OFFSET_O:=(_ttm-_nko)*60;
               _duration+=_rs.DURATION + _ttm*60*_coef - _nko*60*_coef;
               _rs.REF_RES:='';

::             obsluga TPZ
               TOPER.cntx_psh();
               TOPER.index('TPZ');
               TOPER.prefix('T',TOPER.UNROP);
               {? TOPER.first()
               ||
                  _rs.TP:={? TOPER.FNTIME<>''|| tpar.calc(TOPER.FNTIME) || TOPER.NTIME ?}*60;
                  _rs.TPDEF:=_rs.TP
               ?};
               TOPER.cntx_pop();

::             Granice czasowe z planu strategicznego
               {? _mps_min<>''
               || _rs.TM_MIN:=_mps_min;
                  _rs.SYM_MIN:=exec('bound_sym_mps','px_tie')
               ?};
               {? _mps_max<>''
               || _rs.TM_MAX:=_mps_max;
                  _rs.SYM_MAX:=exec('bound_sym_mps','px_tie')
               ?};

::             Granice czasowe dla kooperacji - w przypadku TOPERow zawsze 'Brak' czyli nie bedzie sie dalo zaplanowac
::             takiego zlecenia/zamowienia
               {? TOPER.WEW='N'
               || _rs.TM_MIN:='Brak';
                  _rs.TM_MAX:='Brak'
               ?};

               {? _obj_typ='ZL_P'
               || _rs.INFO1:='ZL: ';
                  _rs.INFO1+=exec('FindAndGet','#table',ZL,_obj_ref,,"SYM",'');
                  _rs.INFO1+=' '+_plpart
               |? _obj_typ='ZK_P'
               || _rs.INFO1:='ZM: ';
                  _rs.INFO1+=exec('FindAndGet','#table',ZK_P,_obj_ref,,"ZK_P.N().SYM",'');
                  _rs.INFO1+=' '+_plpart
               ?};
               _rs.INFO2:=_rs.SYM+' / '+M.KTM;
               _rs.KTM:=M.KTM;
:: NUCO - zmiana dodanie nazwy indeksu materiałowego w zmiennej INFO3
               _rs.INFO3:=M.N;
::               _rs.INFO3:='';
               _rs.PLO_SYM:=_rs.INFO1;
               _rs.PLO_OPIS:=_rs.SYM;
               M.cntx_psh();
               M.clear();
               {? M.seek(_m_ref)
               || _rs.KOLOR_M:=M.KOLOR;
                  _rs.KOLOR_G:=M.MGR().KOLOR
               ?};
               M.cntx_pop();
               _rs.KOLOR_TO:=TOPER.OPER().KOLOR;

               _tktl:=TOPER.NRK;
               TACTTLS.cntx_psh();
               TACTTLS.index('AKNROP');

::               _util:=exec('FindAndGet','#table',TKTL,_tktl,,"TYP().UTIL",'');
::             W pierwszej kolejności sprawdza czy są NPU do operacji, jak nie ma, to sprawdza czy są do karty
               {? 1
::                  _util='O'
               || TACTTLS.prefix('T',_tktl,TOPER.ref())
::               || TACTTLS.prefix('T',_tktl)
               ?};
               {? TACTTLS.size()>0
               || _rs.NPU:='T'
               || TACTTLS.prefix('T',_tktl,null());
                  {? TACTTLS.size()>0
                  || _rs.NPU:='T'
                  ?}
               ?};
               TACTTLS.cntx_pop();

               _rs.TOPER:=$TOPER.ref();
               _rs.NUM:=_num;
               _rs.ID_NEXT:='';
               {? _exist>0
               || _rs.add();
                  _rs.ID:=#_rs.ref();
                  _rs.put();
                  _par_o:=_rs.ID;
                  _duration:=_rs.DURATION;
                  _offset+=_duration;
                  _alltime+=_duration;
                  _tp_dur:=_rs.TP;
                  _tz_dur:=_rs.TZ;

::                Zasoby do operacji
::                Uwaga: operacje kooperacyjne uwzgledniane sa bez zasobow
                  {? TOPER.WEW='T'
                  ||
                     _resources:=exec('get_resources','po_plan',$TOPER.ref(),_il,,'TOPER');
                     _resources.prefix();
                     {? _resources.first()
                     || {!
                        |?
                           _rs.blank();
                           _rs.TYP:='R';
                           _rs.LEVEL:=2;
                           _rs.PAR:=_par_o;
                           _rs.SYM:=_resources.SYM;
                           _rs.NAZWA:=_resources.NAZWA;
                           _rs.REF_RES:=_resources.REF_RES;
                           _rs.ALERT:=_resources.ALERT;
                           _rs.DURATION:=_resources.DURATION;
                           _rs.OFFSET_O:=_resources.OFFSET_O;
                           _rs.TP:=_tp_dur;
                           _rs.TPDEF:=_rs.TP;
                           _rs.TZ:=_tz_dur;
                           _rs.TZDEF:=_rs.TZ;
                           _rs.DEFAULT:=_resources.DEFAULT;
                           {? _resources.ZAM_WHAT='ZAMIENNIK'
                           || _rs.ZAM:=1
                           ?};
                           _rs.add();
                           _rs.ID:=#_rs.ref();
                           _rs.put();
                           _resources.next()
                        !}
                     ?};
                     obj_del(_resources)
                  ?}
               ?}
            ?};
            _toper.next()
         !};
::       Jesli granice czasowe z planu strategicznego podane to pierwszej i ostatniej operacji
::       ustawiam żądane czasy rozpoczęcia lub zakończenia
         {? _mps_min<>'' & _mps_max<>''
         || _rs.cntx_psh();
            _ndx_tmp:=_ndx:=_rs.ndx_tmp(,,'TYP',,,'TOPER',,);
            _rs.index(_ndx_tmp);
            {? _toper.first()
            || _rs.prefix('O',_toper.REF_SQL);
               {? _rs.first()
               || _rs.TM_REQ_S:=_mps_min;
                  _rs.put()
               ?}
            ?};
            {? _toper.last()
            || _rs.prefix('O',_toper.REF_SQL);
               {? _rs.first()
               || _rs.TM_REQ_E:=_mps_max;
                  _rs.put()
               ?}
            ?};
            _rs.cntx_pop()
         ?}
      ?};
      exec('stop_tpar','tech_param')
   ?}
|? _t_z='Z'
||
:: Wymyslam maske na podstawie pola z sql_refem
   _msk:=form((8+_source)+3);

:: Otwieram wlasciwa maske dla tabel z technologia
   exec('tktl_use','tech_common',_msk);
   TKTL.clear();
   {? TKTL.seek(_source)
   ||
      exec('start_tpar','tech_param',TKTL.KTM,TKTL.ref());
      _rs.blank();
      _rs.TYP:='C';
      _rs.SYM:='Całość';
      _rs.NAZWA:='Całość';
      _rs.LEVEL:=0;
      _rs.PAR:=0;
      _rs.add();
      _root:=_rs.ref();
      _rs.ID:=#_rs.ref();
      _rs.put();
      _par_c:=_rs.ID;

::    kolejnosc operacji wg zlozonosci
      _toper:=tab_tmp(1,
         'NUM','INTEGER','Numer',
         'REF','INTEGER','#TOPER.ref()',
         'REF_SQL', 'STRING[16]', '$TOPER.ref()'
      );

      __formulka:="
         TOPER.cntx_psh();
         TOPER.index('NNN');
         TOPER.prefix(_b,_c);
         {? TOPER.first()
         || {!
            |?
               {? TOPER.PZ='P' & TOPER.TPZ='N'
               || _a.REF:=#TOPER.ref();
                  _a.REF_SQL:=$TOPER.ref();
                  _a.add();
                  _a.NUM:=#_a.ref();
                  _a.put()
               ?};
               __formulka(_a,_b,TOPER.UNROP);
               TOPER.next()
            !}
         ?};
         TOPER.cntx_pop()
      ";
      __formulka(_toper,TKTL.ref(),0);
      &__formulka;

      _toper.clear();
      TOPER.clear();
      {? _toper.first()
      ||
         _offset:=0;
         _duration:=0;
         {!
         |?
            {? TOPER.seek(_toper.REF,)
            ||
               _num+=1;

               _coef:=_il/TKTL.XJM;
               _rs.blank();
               _rs.TYP:='O';
               {? TOPER.WEW='T'
               ||
                  _rs.SYM:=TOPER.OPER().KOD;
                  _rs.NAZWA:=TTOPER.NA;
                  _rs.COOP:='N'
               ||
                  _rs.SYM:=TOPER.TTOUT().KOD;
                  _rs.NAZWA:=TTOUT.NA;
                  _rs.COOP:='T'
               ?};
               _rs.LEVEL:=1;
               _rs.PAR:=_par_c;
               {? TOPER.WEW='T'
               || _rs.DURATION:={? TOPER.MTIME=0 || TOPER.NTIME || TOPER.MTIME ?}*60*{? TOPER.FIX_NORM='T' || 1 || _coef ?}
               ||
::                czas dla kooperacji
                  _rs.DURATION:=TOPER.DAYS_K*exec('coef_dg','px_kont',TOPER.PX_KONT,0,0)*60*_coef
               ?};
               _exist:={? TOPER.EXIST<>'' || tpar.calc(TOPER.EXIST) || 1 ?};
               _rs.OFFSET_P:=_offset;
:: NUCO - zmiana - pominięcie czasu transportu w planie operacyjnym
               {? TOPER.PLACE().WYD().KOD<>'MSU'
               || _rs.OFFSET_O:=(-TOPER.NKO)*60
               || _rs.OFFSET_O:=(TOPER.TTM-TOPER.NKO)*60
               ?};
               _duration+=_rs.DURATION - TOPER.NKO*60*_coef;
::               _duration+=_rs.DURATION + TOPER.TTM*60*_coef - TOPER.NKO*60*_coef;
               _rs.REF_RES:='';
::             obsluga TPZ
               TOPER.cntx_psh();
               TOPER.index('TPZ');
               TOPER.prefix('T',TOPER.UNROP);
               {? TOPER.first()
               ||
                  _rs.TP:=TOPER.NTIME*60;
                  _rs.TPDEF:=_rs.TP
               ?};
               TOPER.cntx_pop();

::             Granice czasowe z planu strategicznego
               {? _mps_min<>''
               || _rs.TM_MIN:=_mps_min;
                  _rs.SYM_MIN:=exec('bound_sym_mps','px_tie')
               ?};
               {? _mps_max<>''
               || _rs.TM_MAX:=_mps_max;
                  _rs.SYM_MAX:=exec('bound_sym_mps','px_tie')
               ?};

::             Granice czasowe dla kooperacji - w przypadku TOPERow zawsze 'Brak' czyli nie bedzie sie dalo zaplanowac
::             takiego zlecenia
               {? TOPER.WEW='N'
               || _rs.TM_MIN:='Brak';
                  _rs.TM_MAX:='Brak'
               ?};

               _ktm:='';
               {? _obj_typ='ZL_P'
               || _ktm:=exec('FindAndGet','#table',ZL,_obj_ref,,"ZL.KTM().KTM",'');
                  _rs.INFO1:='ZL: ';
                  _rs.INFO1+=exec('FindAndGet','#table',ZL,_obj_ref,,"SYM",'');
                  _rs.INFO1+=' '+_plpart
               |? _obj_typ='ZK_P'
               || _ktm:=exec('FindAndGet','#table',ZK_P,_obj_ref,,"ZK_P.M().KTM",'');
                  _rs.INFO1:='ZM: ';
                  _rs.INFO1+=exec('FindAndGet','#table',ZK_P,_obj_ref,,"ZK_P.N().SYM",'');
                  _rs.INFO1+=' '+_plpart
               ?};
               _rs.KTM:=_ktm;
               _rs.INFO2:=_rs.SYM+' / '+_ktm;
               _rs.INFO3:='';

               _rs.PLO_SYM:=_rs.INFO1;
               _rs.PLO_OPIS:=_rs.SYM;
               M.cntx_psh();
               M.clear();
               {? M.seek(_m_ref)
               || _rs.KOLOR_M:=M.KOLOR;
                  _rs.KOLOR_G:=M.MGR().KOLOR;
:: NUCO - dodanie dodatkowego opisu dla indeksu - nazwa indeksu
                  _rs.INFO3:=M.N
               ?};
               M.cntx_pop();
               _rs.KOLOR_TO:=TOPER.OPER().KOLOR;

               TACTTLS.cntx_psh();

               _tktl:=TOPER.NRK;
::               _util:=exec('FindAndGet','#table',TKTL,_tktl,,"TYP().UTIL",'');
::             W pierwszej kolejności sprawdza czy są NPU do operacji, jak nie ma, to sprawdza czy są do karty
               {? 1
::                  _util='O'
               || TACTTLS.prefix('T',_tktl,TOPER.ref())
::               || TACTTLS.prefix('T',_tktl)
               ?};
               {? TACTTLS.size()>0
               || _rs.NPU:='T'
               || TACTTLS.prefix('T',_tktl,null());
                  {? TACTTLS.size()>0
                  || _rs.NPU:='T'
                  ?}
               ?};
               TACTTLS.cntx_pop();

               _rs.TOPER:=$TOPER.ref();
               _rs.NUM:=_num;
               _rs.ID_NEXT:='';
               {? _exist>0
               ||
                  _rs.add();
                  _rs.ID:=#_rs.ref();
                  _rs.put();
                  _par_o:=_rs.ID;
                  _duration:=_rs.DURATION;
                  _offset+=_duration;
                  _alltime+=_duration;
                  _tp_dur:=_rs.TP;
                  _tz_dur:=_rs.TZ;

::                Zasoby do operacji
::                Uwaga: operacje kooperacyjne uwzgledniane sa bez zasobow
                  {? TOPER.WEW='T'
                  ||
                     _resources:=exec('get_resources','po_plan',$TOPER.ref(),_il,,'TOPER');
                     _resources.prefix();
                     {? _resources.first()
                     || {!
                        |?
                           _rs.blank();
                           _rs.TYP:='R';
                           _rs.LEVEL:=2;
                           _rs.PAR:=_par_o;
                           _rs.SYM:=_resources.SYM;
                           _rs.NAZWA:=_resources.NAZWA;
                           _rs.REF_RES:=_resources.REF_RES;
                           _rs.ALERT:=_resources.ALERT;
                           _rs.DURATION:=_resources.DURATION;
                           _rs.OFFSET_O:=_resources.OFFSET_O;
                           _rs.TP:=_tp_dur;
                           _rs.TPDEF:=_rs.TP;
                           _rs.TZ:=_tz_dur;
                           _rs.TZDEF:=_rs.TZ;
                           _rs.DEFAULT:=_resources.DEFAULT;
                           {? _resources.ZAM_WHAT='ZAMIENNIK'
                           || _rs.ZAM:=1
                           ?};
                           _rs.add();
                           _rs.ID:=#_rs.ref();
                           _rs.put();
                           _resources.next()
                        !}
                     ?};
                     obj_del(_resources)
                  ?}
               ?}
            ?};
            _toper.next()
         !};
::       Jesli granice czasowe z planu strategicznego podane to pierwszej i ostatniej operacji
::       ustawiam żądane czasy rozpoczęcia lub zakończenia
         {? _mps_min<>'' & _mps_max<>''
         || _rs.cntx_psh();
            _ndx_tmp:=_ndx:=_rs.ndx_tmp(,,'TYP',,,'TOPER',,);
            _rs.index(_ndx_tmp);
            {? _toper.first()
            || _rs.prefix('O',_toper.REF_SQL);
               {? _rs.first()
               || _rs.TM_REQ_S:=_mps_min;
                  _rs.put()
               ?}
            ?};
            {? _toper.last()
            || _rs.prefix('O',_toper.REF_SQL);
               {? _rs.first()
               || _rs.TM_REQ_E:=_mps_max;
                  _rs.put()
               ?}
            ?};
            _rs.cntx_pop()
         ?}
      ?};
      exec('stop_tpar','tech_param')
   ?}
|? _t_z='P'
||
   _ndx_zgp:=_rs.ndx_tmp(,,'ZGP',,);
   {? ZGH.seek(_source)
   ||
::    Podczytanie zlecenia
      ZGH.ZLEC();

      _rs.blank();
      _rs.TYP:='C';
      _rs.SYM:='Całość';
      _rs.NAZWA:='Całość';
      _rs.LEVEL:=0;
      _rs.PAR:=0;
      _rs.add();
      _root:=_rs.ref();
      _rs.ID:=#_rs.ref();
      _rs.put();
      _par_c:=_rs.ID;

      {? ZL.NRNZL<>0
      || ZGP.index('PNRPP')
      || ZGP.index('NRPP')
      ?};
      ZGP.prefix(ZGH.ref(),'N');
      {? ZGP.first()
      ||
         _offset:=0;
         _duration:=0;
         _argszgp:=exec('zgp2techdata_a','po_plan');
         _argszgp.PARENT:=_par_c;
         _argszgp.MPS_MIN:=_mps_min;
         _argszgp.MPS_MAX:=_mps_max;
         {? _il>0
         || _argszgp.COEF:=_il/ZGP.ILOSC
         ?};

         {!
         |? {? ZGP.PLANUJ='T'
            || exec('zgp2techdata','po_plan',_argszgp,_rs,_ndx_zgp)
            ?};
            ZGP.next()
         !};
         _alltime:=_argszgp.ALLTIME
      ?};
::    Jesli granice czasowe z planu strategicznego podane to pierwszej i ostatniej operacji
::    ustawiam żądane czasy rozpoczęcia lub zakończenia
      {? _mps_min<>'' & _mps_max<>''
      || _rs.cntx_psh();
         _ndx_tmp:=_ndx:=_rs.ndx_tmp(,,'TYP',,,'ZGP',,);
         _rs.index(_ndx_tmp);
         {? ZGP.first()
         || _rs.prefix('O',$ZGP.ref());
            {? _rs.first()
            || _rs.TM_REQ_S:=_mps_min;
               _rs.put()
            ?}
         ?};
         {? ZGP.last()
         || _rs.prefix('O',$ZGP.ref());
            {? _rs.first()
            || _rs.TM_REQ_E:=_mps_max;
               _rs.put()
            ?}
         ?};
         _rs.cntx_pop()
      ?}
   ?}
?};

_rs.clear();
{? _rs.seek(_root) || _rs.DURATION:=_alltime; _rs.put() ?};

_ndx:=_rs.ndx_tmp(,,'TYP',,,'TOPER',,,'ZOPER',,,'ZGP',,);
_rs.index(_ndx);

:: Petla do nadawania wartosci dla pola _rs.ID_NEXT - dla kazdej operacji wyznaczamy liste nastepnikow
_rs.prefix('O');
{? _rs.first()
|| {!
   |?
      {? _rs.TOPER<>''
      || _id_next:='';
         _rs.cntx_psh();
         NASTOPER.index('OPNAST');
         NASTOPER.prefix('T',BIT.sqlint(_rs.TOPER));
         {? NASTOPER.first()
         || {!
            |?
               _rs.prefix('O',$NASTOPER.NRNAST);
               {? _rs.first()
               || _id_next+=$_rs.ID+';'
               ?};
               NASTOPER.next()
            !}
         ?};
         _rs.cntx_pop();
         _rs.ID_NEXT:=_id_next
      |? _rs.ZGP<>''
      || _id_next:='';
         _rs.cntx_psh();
         NASZGP.index('OPNAST');
         NASZGP.prefix(BIT.sqlint(_rs.ZGP));
         {? NASZGP.first()
         || {!
            |?
               _rs.prefix('O','','',$NASZGP.NRNAST);
               {? _rs.first()
               || _id_next+=$_rs.ID+';'
               ?};
               NASZGP.next()
            !}
         ?};
         _rs.cntx_pop();
         _rs.ID_NEXT:=_id_next
      ?};
      {? _rs.ID_NEXT='' || _rs.ID_NEXT:='-1;' ?};
      _rs.put();
      _rs.next()
   !}
?};

:: Obsluga kooperacji - nastepnikom i poprzednikom kooperacji nadajemy max i minimalne czasy
_rs.prefix('O');
{? _rs.first()
|| {!
   |?
      {? _rs.ZGP<>''
      || _rs.cntx_psh();
         NASZGP.index('OPNAST');
         NASZGP.prefix(BIT.sqlint(_rs.ZGP));
         {? NASZGP.first()
         || {!
            |?
::             Ustawiam sie na biezacej operacji
               NASZGP.OPER();
               {? ZGP.WEW='N'
               ||
::                jesli biezaca operacja jest kooperacja to nastepnej ustawiam minimalny czas rozpoczecia
                  _rs.prefix('O','','',$NASZGP.NRNAST);
                  {? _rs.first()
                  || _tm_min:=exec('to_string','#tm_stamp',ZGP.TMENDK);
                     _rs.TM_MIN:=_tm_min;
                     _rs.TM_REQ_S:=_tm_min;
                     _rs.SYM_MIN:='Kooperacja';
                     {? ZGP.KONTRAH<>null()
                     || _rs.SYM_MIN+=' z: '+ZGP.KONTRAH().KOD
                     ?};
                     _rs.put()
                  ?}
               ?};

::             Ustawiam sie na nastepnej operacji
               NASZGP.NRNAST();
               {? ZGP.WEW='N'
               ||
::                jesli nastepna operacja jest kooperacja to poprzedniej ustawiam maksymalny czas zakonczenia
                  _rs.prefix('O','','',$NASZGP.OPER);
                  {? _rs.first()
                  || _tm_max:=exec('to_string','#tm_stamp',ZGP.TMSTARTK);
                     _rs.TM_MAX:=_tm_max;
                     _rs.TM_REQ_E:=_tm_max;
                     _rs.SYM_MAX:='Kooperacja';
                     {? ZGP.KONTRAH<>null()
                     || _rs.SYM_MAX+=' z: '+ZGP.KONTRAH().KOD
                     ?};
                     _rs.put()
                  ?}
               ?};
               NASZGP.next()
            !}
         ?};
         _rs.cntx_pop()
      ?};
      _rs.next()
   !}
?};

_rs.clear();
_rs.index(_ndx_def);

:: Wszystkim tabelom dotyczacym technologii robie cnxt_pop
exec('tktl_cntx_pop','tech_common');

M.cntx_pop();
ZGH.cntx_pop();
ZGP.cntx_pop();
NASZGP.cntx_pop();
ZL.cntx_pop();
~~


\zgp2techdata
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Dodaje do paczki technologicznej Planu operacyjnego informacje o ZGPie
::       Kontekst pracy - rekord ZGP
::   WE: _a - _args
::       _b - ResultSet ktory wypelniac
::       _c - STRING - identyfikator indeksu tymczasowego w ResultSet - sortowanie po $ZGP.ref()
::  OLD: \zgp2techdata/pl_okr3.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _args:=_a
|| _args:=exec('zgp2techdata_a','po_plan')
?};
_rs:=_b;
_ndx:=_c;

ZGP.cntx_psh();
NASZGP.cntx_psh();
NASZGP.index('NASTOP');
ZLIM.cntx_psh();

:: Jezeli ZGP ma poprzedniki i nie zostaly one jeszcze dodane do RSa to je dodaje rekurencyjnie
_rs.cntx_psh();
_rs.index(_ndx);
NASZGP.prefix(ZGP.ref());
{? NASZGP.first()
||
   {!
   |?
::    Podczytanie ZGP - stoje na poprzedniku
      NASZGP.OPER();

::    Sprawdzam czy ten ZGP jest juz w ResultSet
      _rs.prefix($ZGP.ref());
      {? _rs.size()=0
      ||
::       REKURENCJA
         exec('zgp2techdata','po_plan',_args,_rs,_ndx)
      ?};
      NASZGP.next()
   !};
   ~~
?};
NASZGP.cntx_pop();
ZGP.cntx_pop();

ZGH.cntx_psh();
ZL.cntx_psh();
M.cntx_psh();
_rs.clear();

_rs.prefix($ZGP.ref());
{? _rs.size()=0
||
   _args.NUM+=1;

   _rs.blank();
   _rs.TYP:='O';
   {? ZGP.WEW='T'
   || _rs.COOP:='N'
   || _rs.COOP:='T'
   ?};
   _rs.ILOSC:=ZGP.ILOSC;
   _rs.SYM:=$ZGP.NRP+'. '+ZGP.OPIS;
   _rs.NAZWA:='';
   _rs.LEVEL:=1;
   _rs.PAR:=_args.PARENT;
   {? ZGP.WEW='T'
   || _rs.DURATION:={? ZGP.MTIME=0 || ZGP.NTIME || ZGP.MTIME ?}*60*{? ZGP.FIX_NORM='T' || 1 || _args.COEF ?}
   ||
::    czas dla kooperacji
      _rs.DURATION:=(ZGP.TMENDK-ZGP.TMSTARTK)/exec('minute','#tm_stamp')
   ?};
   _rs.OFFSET_P:=_args.OFFSET_P;
:: NUCO - zmiana - pominięcie czasu transportu w planie operacyjnym
  {? ZGP.PLACE().WYD().KOD<>'MSU'
  || _rs.OFFSET_O:=(-ZGP.NKO)*60
  || _rs.OFFSET_O:=(ZGP.TTM-ZGP.NKO)*60
  ?};
   _rs.REF_RES:='';
:: obsluga TPZ
   ZGP.cntx_psh();
   ZGP.index('TPZ');
   ZGP.prefix('T',ZGP.UID);
   {? ZGP.first()
   ||
      _rs.TP:=ZGP.NTIME*60
   ?};
   ZGP.cntx_pop();

:: obsluga TPZ domyślnego
   {? ZGP.TOPER<>null()
   ||

      TOPER.cntx_psh();
      TOPER.index('TPZ');
      TOPER.prefix('T',ZGP.TOPER().UNROP);
      {? TOPER.first()
      ||
         {? ZGP.ZL().TYP().TECH='T'
         ||
::          Zlecenie z własną technologią, norma TPZ przeliczona
            _rs.TPDEF:=TOPER.NTIME*60
         ||
::          Zlecenie bez własnej technologii trzeba przeliczyć czas TPZ
            {? TOPER.FNTIME<>''
            || exec('start_tpar','tech_param',ZL.KTM,ZGP.ZL().KTL);
                _rs.TPDEF:=tpar.calc(TOPER.FNTIME)*60
            ||  _rs.TPDEF:=TOPER.NTIME*60
            ?}
         ?}
      ?};
      TOPER.cntx_pop()
   ?};

:: Granice czasowe z planu strategicznego
   {? _args.MPS_MIN<>''
   || _rs.TM_MIN:=_args.MPS_MIN;
      _rs.SYM_MIN:=exec('bound_sym_mps','px_tie')
   ?};
   {? _args.MPS_MAX<>''
   || _rs.TM_MAX:=_args.MPS_MAX;
      _rs.SYM_MAX:=exec('bound_sym_mps','px_tie')
   ?};

:: Obsluga kooperacji - przekazuje ramy czasowe operacji kooperacyjnej
   {? ZGP.WEW='N'
   || _coop_ok:=1;
      {? ZGP.TMSTARTK>0
      || _tm_str:=exec('to_string','#tm_stamp',ZGP.TMSTARTK);
         _rs.TM_REQ_S:=_tm_str;
         _rs.TM_MIN:=_tm_str
      || _rs.TM_MIN:='Brak';
         _coop_ok:=0
      ?};
      {? ZGP.TMENDK>0
      || _tm_str:=exec('to_string','#tm_stamp',ZGP.TMENDK);
         _rs.TM_REQ_E:=_tm_str;
         _rs.TM_MAX:=_tm_str
      || _rs.TM_MAX:='Brak';
         _coop_ok:=0
      ?};

      {? _coop_ok>0
      ||
         {? ZGP.KOOP_AKC<>'T'
         || _rs.TM_REQ_S:='';
            _rs.TM_REQ_E:='';
            _rs.TM_MIN:='Brak akc.';
            _rs.TM_MAX:='Brak akc.'
         ?}
      ?}
   ?};

:: Obsluga grup operacji
   _rs.IN_GROP:=ZGP.PL_GRP;
:: Obsluga grup operacji - zwracam najwczesniej zaplanowana grupe do ktorej nalezy zgp
   _grop_first:=exec('grop_first4zgp','po_ogr',ZGP.ref());
   {? _grop_first<>null()
   || _rs.GR_STA_R:=$_grop_first;
      _rs.GR_STA_S:=exec('FindAndGet','#table',GROP,_grop_first,,"KOD+' '+OPIS",'')
   ?};
:: Obsluga grup operacji - zwracam najpozniej zaplanowana grupe do ktorej nalezy zgp
   _grop_last:=exec('grop_last4zgp','po_ogr',ZGP.ref());
   {? _grop_last<>null()
   || _rs.GR_END_R:=$_grop_last;
      _rs.GR_END_S:=exec('FindAndGet','#table',GROP,_grop_last,,"KOD+' '+OPIS",'')
   ?};

   _rs.INFO1:='ZL: ';
   _rs.INFO1+=ZGP.NRZLP().NRPRZ;
   _rs.INFO2:=ZGP.OPIS+' / '+ZGP.NRZLP().ZLEC().KTM().KTM;
:: NUCO - Dodanie opisu dodatkowego - nazwa indeksu
     _rs.INFO3:=M.N;
::   _rs.INFO3:='';
   _rs.KTM:=M.KTM;
   _rs.PLO_SYM:=_rs.INFO1;
   _rs.PLO_OPIS:=ZGP.OPIS;
   _rs.KOLOR_M:=ZGP.NRZLP().ZLEC().KTM().KOLOR;
   _rs.KOLOR_G:=M.MGR().KOLOR;
   _rs.KOLOR_TO:=ZGP.TOPER().OPER().KOLOR;

:: Występowanie limitów
   exec('openmask','zl_common',ZGP.ZL);
   ZLIM.index('ZGP_KM');
   ZLIM.prefix(ZGP.ref());
   {? ZLIM.size()>0
   || _rs.LIMITY:='T'
   || _rs.LIMITY:='N'
   ?};

:: Występowanie NPU
   _tktl:=ZGP.ZL().TKTL;
   {? _tktl=null()
   || _tktl:=ZGP.ZL().KTL
   ?};
   TACTTLS.cntx_psh();
   TACTTLS.index('AKNROP');
::   _util:=exec('FindAndGet','#table',TKTL,_tktl,,"TYP().UTIL",'');
:: W pierwszej kolejności sprawdza czy są NPU do operacji, jak nie ma, to sprawdza czy są do karty
   {? 1
::      _util='O'
   || TACTTLS.prefix('T',_tktl,ZGP.TOPER)
::   || TACTTLS.prefix('T',_tktl)
   ?};
   {? TACTTLS.size()>0
   || _rs.NPU:='T'
   || {? ZGP.TOPER<>null()
      || TACTTLS.prefix('T',_tktl,null());
         {? TACTTLS.size()>0
         || _rs.NPU:='T'
         ?}
      ?}
   ?};
   TACTTLS.cntx_pop();

   _rs.ZGP:=$ZGP.ref();
   _rs.ZGH:=$ZGP.NRZLP;
   _rs.NUM:=_args.NUM;
   _rs.ID_NEXT:='';
   _rs.add();
   _rs.ID:=#_rs.ref();
   _rs.put();
   _par_o:=_rs.ID;
   _duration:=_rs.DURATION;
   _args.OFFSET_P+=_duration;
   _args.ALLTIME+=_duration;
   _tp_dur:=_rs.TP;
   _tz_dur:=_rs.TZ;
   _tp_def:=_rs.TPDEF;

:: Zasoby do operacji
:: Uwaga: operacje kooperacyjne uwzgledniane sa bez zasobow
   {? ZGP.WEW='T' & ZGP.PL_GRP<>'T'
   ||

      _tktl:=null();
      {? ZL.RTKTL<>''
      || _tktl:=exec('FindAndGet','#table',TKTL,ZL.RTKTL,,,null())
      |? ZL.RKTL<>''
      || _tktl:=exec('FindAndGet','#table',TKTL,ZL.RKTL,,,null())
      ?};

      exec('start_tpar','tech_param',M.ref(),_tktl);

      _resources:=exec('get_resources','po_plan',$ZGP.ref(),ZGP.ILOSC,,'ZGP');
      _resources.prefix();
      {? _resources.first()
      || {!
         |?
            _rs.cntx_psh();
            _rs.clear();
            _rs.blank();
            _rs.TYP:='R';
            _rs.LEVEL:=2;
            _rs.PAR:=_par_o;
            _rs.SYM:=_resources.SYM;
            _rs.NAZWA:=_resources.NAZWA;
            _rs.REF_RES:=_resources.REF_RES;
            _rs.ALERT:=_resources.ALERT;
            _rs.DURATION:=_resources.DURATION*_args.COEF;
            _rs.OFFSET_O:=_resources.OFFSET_O;
            _rs.TP:=_tp_dur;
            _rs.TPDEF:=_tp_def;
            _rs.TZ:=_tz_dur;
            _rs.DEFAULT:=_resources.DEFAULT;
            {? _resources.ZAM_WHAT='ZAMIENNIK'
            || _rs.ZAM:=1
            ?};
            _rs.add();
            _rs.ID:=#_rs.ref();
            _rs.put();
            _rs.cntx_pop();
            _resources.next()
         !}
      ?};
      obj_del(_resources)
   ?}
?};
_rs.cntx_pop();

ZGH.cntx_pop();
ZL.cntx_pop();
M.cntx_pop();
ZLIM.cntx_pop();
~~


\get_resources
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2011]
:: OPIS: zwraca zasoby do operacji
::   WE: _a - $TOPER.ref(), $ZGP.ref(), $TECHZAMS.ref()
::       _b - ILOŚĆ planowana/zaplanowana
::       [_c] - tab_tmp - tabela tymczasowa do której dodawać
::       [_d] - STRING - akronim tabeli ktorej dotyczy _a (TOPER, ZGP, TECHZAMS) - domyslnie TOPER
::       [_e] - INTEGER 0/[1] - dla wywołań rekurencyjnych - czy uzupełniać pole DEFAULT które spowoduje
::                              utworzenie pozycji planu podczas planowania
::  OLD: \get_resources/pl_okr3.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;

_ilosc:=_b;

{? var_pres('_c')>100
|| _res:=_c
||
   _res:=tab_tmp(3,
   'TYP','STRING[1]','Typ',
   'REF_RES','STRING[16]','$PL_RES.ref()',
   'SYM','STRING[50]','Symbol zasobu',
   'NAZWA','STRING[100]','Nazwa zasobu',
   'ALERT','STRING[1]','Alert, jeżeli brak zasobu',
   'REF','STRING[16]','$ref() zasobu',
   'DURATION','REAL','Czas trwania w minutach',
   'OFFSET_O','REAL','Odstęp od poprzedniej operacji',
   'TECHZAMS','STRING[16]','Wskazanie na zamiennik operacji',
   'ZAM_WHAT','STRING[30]','Tekst mówiący czy zamiennik czy zamiennik stanowiska',
   'DEFAULT', 'STRING[1]', 'Czy zasob domyslny (dla gniazd)'
   )
?};

_tab:='TOPER';
{? var_pres('_d')=type_of('')
|| _tab:=_d
?};

_default:=1;
{? var_pres('_e')=type_of(0)
|| _default:=_e
?};

_oper:=($_tab)();
PL_RES.cntx_psh();
TWRKPLC.cntx_psh();
TWRKZBR.cntx_psh();
LPROD.cntx_psh();
TKTL.cntx_psh();

_oper.cntx_psh();
_oper.clear();
{? _oper.seek(_ref)
||
   _coef:=1;
   _exist:=1;
   {? _tab='ZGP'
   ||
      _coef:=_ilosc/_oper.ILOSC
   ||
::    Podczytanie technologii
      _oper.NRK();
      _coef:=_ilosc/TKTL.XJM
   ?};
   {? _tab='TOPER'
   || _exist:={? _oper.EXIST<>'' || tpar.calc(_oper.EXIST) || 1 ?}
   ?};
   _wew:='T';
   {? _tab<>'TECHZAMS'
   || _wew:=_oper.WEW
   ?};


   {? _exist>0
   ||
      PL_RES.index('TYP');
::    1. Stanowisko -------------------------------------------------------------------------------------------------------
      _chk_stan:=0;
      {? _tab='ZGP'
      || {? ZGP.GRUPA=null()
         || _chk_stan:=1
         ?}
      || {? _oper.GRPOJ='S'
         || _chk_stan:=1
         ?}
      ?};

      _res.blank();
      {? _default>0
      || _res.DEFAULT:='?'
      || _res.DEFAULT:='N'
      ?};

      {? _tab='TECHZAMS'
      || _res.ZAM_WHAT:='ZAMIENNIK';
         _res.DEFAULT:='N'
      ?};

      {? _tab<>'ZGP'
      ||
::       Operacja technologii lub zamiennnik
         {? _wew='T'
         ||
::          Operacja wewnętrzna
            _fix_norm:={? _tab='TOPER' || _oper.FIX_NORM || _oper.TOPER().FIX_NORM ?};
            _ntime:={? _oper.FNTIME<>'' || tpar.calc(_oper.FNTIME)$5 || _oper.NTIME ?};
            _mtime:={? _oper.FMTIME<>'' || tpar.calc(_oper.FMTIME)$5 || _oper.MTIME ?};
:: NUCO - zmiana - pominięcie czasu transportu w planie operacyjnym
            {? _oper.TOPER().PLACE().WYD().KOD<>'MSU'
            || _ttm:=0
            || _ttm:={? _oper.FTTM<>'' || tpar.calc(_oper.FTTM)$5 || _oper.TTM ?}
            ?};
            _nko:={? _oper.FNKO<>'' || tpar.calc(_oper.FNKO)$5 || _oper.NKO ?};
            _res.DURATION:={? _mtime=0 || _ntime || _mtime ?}*60*{? _fix_norm='T' || 1 || _coef ?};
            _res.OFFSET_O:=(_ttm-_nko)*60
         ||
::          Kooperacja
            {? _tab='TOPER'
            || _res.DURATION:=_oper.DAYS_K*exec('coef_dg','px_kont',_oper.PX_KONT,0,0)*60*_coef
            ?}
         ?}
      ||
::       Pozycja przewodnika
         {? _wew='T'
         ||
::          Operacja wewnętrzna
            _res.DURATION:={? _oper.MTIME=0 || _oper.NTIME || _oper.MTIME ?}*60*{? _oper.FIX_NORM='T' || 1 || _coef ?};
:: NUCO - zmiana - pominięcie czasu transportu w planie operacyjnym
            {? _oper.TOPER().PLACE().WYD().KOD<>'MSU'
            || _res.OFFSET_O:=(-_oper.NKO)*60
            || _res.OFFSET_O:=(_oper.TTM-_oper.NKO)*60
            ?}
         ||
::          Kooperacja
            _res.DURATION:=(_oper.TMENDK-_oper.TMSTARTK)/exec('minute','#tm_stamp')
         ?};
         {? exec('is_zamiennik','zl_guide')=1
         ||
::          To jest wątek gdy ZGP jest już umieszczony na zamienniku
            _res.ZAM_WHAT:='ZAMIENNIK';
            _res.OFFSET_O:=exec('zamiennik_offset','zl_guide')
         ?}
      ?};

      {? _chk_stan>0
      ||
         _res.TYP:='S';
         _res.SYM:=_oper.PLACE().KOD;
         _res.NAZWA:=_oper.PLACE().NA;
         _res.REF:=$_oper.PLACE;
         PL_RES.prefix('S',$_oper.PLACE);
         {? PL_RES.first()
         || _res.REF_RES:=$PL_RES.ref();
            _res.ALERT:=''
         || _res.REF_RES:='';
            _res.ALERT:='R'
         ?};
         _can_add:=0;
         _res.cntx_psh();
         _res.prefix(_res.TYP,_res.REF_RES);
         {? _res.size()=0
         || _can_add:=1
         ?};
         _res.cntx_pop();
         {? _can_add>0
         || _res.add()
         ?}
      ?};
::    2. Gniazdo ----------------------------------------------------------------------------------------------------------
      _chk_gnd:=0;
      {? _tab='ZGP'
      || {? ZGP.GRUPA<>null()
         || _chk_gnd:=1
         ?}
      || {? _oper.GRPOJ='G'
         || _chk_gnd:=1
         ?}
      ?};

      {? _chk_gnd>0
      || _res.TYP:='G';
         _res.SYM:=_oper.GRUPA().SYMBOL;
         _res.NAZWA:=TWRKZBR.NAZWA;
         _res.REF:=$_oper.GRUPA;
         PL_RES.prefix('G',$_oper.GRUPA);
         {? PL_RES.first()
         || _res.REF_RES:=$PL_RES.ref();
            _res.ALERT:=''
         || _res.REF_RES:='';
            _res.ALERT:='R'
         ?};
         _can_add:=0;
         _res.cntx_psh();
         _res.prefix(_res.TYP,_res.REF_RES);
         {? _res.size()=0
         || _can_add:=1
         ?};
         _res.cntx_pop();
         {? _can_add>0
         || _res.add()
         ?};
         TWRKZPO.index('GRUPA');
         TWRKZPO.prefix(TWRKZBR.ref());
         {? TWRKZPO.first()
         || {!
            |? _res.TYP:='S';
               _res.SYM:=TWRKZPO.ELEMENT().KOD;
               _res.NAZWA:=TWRKZPO.ELEMENT().NA;
               _res.REF:=$TWRKZPO.ELEMENT;
               _res.ZAM_WHAT:='ZAM. - ELEMENT GNIAZDA';

               {? _tab='ZGP'
               || {? ZGP.PLACE=TWRKZPO.ELEMENT & _default>0
                  || _res.DEFAULT:='T'
                  || _res.DEFAULT:='N'
                  ?}
               || {? _oper.TWRKPLG=TWRKZPO.ref() & _default>0
                  || _res.DEFAULT:='T'
                  || _res.DEFAULT:='N'
                  ?}
               ?};

               PL_RES.prefix('S',$TWRKZPO.ELEMENT);
               {? PL_RES.first()
               || _res.REF_RES:=$PL_RES.ref();
                  _res.ALERT:=''
               || _res.REF_RES:='';
                  _res.ALERT:='R'
               ?};
               _can_add:=0;
               _res.cntx_psh();
               _res.prefix(_res.TYP,_res.REF_RES);
               {? _res.size()=0
               || _can_add:=1
               ?};
               _res.cntx_pop();
               {? _can_add>0
               || _res.add()
               ?};
               TWRKZPO.next()
            !}
         ?}
      ?};
::    3. Pracownicy zgodni pod wzgledem zawodow z operacja ----------------------------------------------------------------
      {? _tab<>'TECHZAMS'
      ||
         _prac:=tab_tmp(1,
            'REF','STRING[16]','$ref() zasobu',
            'SYM','STRING[50]','Symbol zasobu',
            'NAZWA','STRING[100]','Nazwa zasobu'
         );
         _zawod:=null();
         {? _tab='ZGP'
         || _zawod:=_oper.TOPER().OPER().ZAWOD
         || _zawod:=_oper.OPER().ZAWOD
         ?};

         {? _zawod<>null()
         || P.index('PRACOZAW');
            P.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,_zawod);
            {? P.first()
            || {!
               |?
                  _can_add:=1;
                  {? _can_add>0
                  ||
                     _prac.REF:=$P.ref();
                     _prac.SYM:=P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE;
                     _prac.NAZWA:=P.ST().ST;
                     _prac.add()
                  ?};
                  P.next()
               !}
            ?}
         ?};
         {? _prac.first()
         || _it:=0;
            {!
            |?
               _res.TYP:='P';
               _res.SYM:=_prac.SYM;
               _res.NAZWA:=_prac.NAZWA;
               _res.REF:=_prac.REF;
               PL_RES.prefix('P',_prac.REF);
               {? PL_RES.first()
               || _res.REF_RES:=$PL_RES.ref();
                  _res.ALERT:=''
               || _res.REF_RES:='';
                  _res.ALERT:='R'
               ?};
               {? _it=0
               || _res.DEFAULT:='?'
               || _res.DEFAULT:='N'
               ?};
               _can_add:=0;
               _res.cntx_psh();
               _res.prefix(_res.TYP,_res.REF_RES);
               {? _res.size()=0
               || _can_add:=1
               ?};
               _res.cntx_pop();
               {? _can_add>0
               || _res.add()
               ?};
               _it+=1;
               _prac.next()
            !}
         ?};
::       4. Brygady, jezeli w ich skladzie sa pracownicy ---------------------------------------------------------------------
         _bryg:=tab_tmp(1,
            'REF','STRING[16]','$ref() zasobu',
            'SYM','STRING[50]','Symbol zasobu',
            'NAZWA','STRING[100]','Nazwa zasobu'
         );
         {? _prac.first()
         || {!
            |?
               ZLBS.index('PODB');
               _p_ref:=exec('FindAndGet','#table',P,_prac.REF,,,null());
               {? _p_ref<>null()
               ||
                  ZLBS.prefix(_p_ref);
                  {? ZLBS.first()
                  || {!
                     |?
                        _bryg.prefix($ZLBS.BR);
                        {? ~_bryg.first()
                        ||
                           _bryg.REF:=$ZLBS.BR;
                           _bryg.SYM:=ZLBS.BR().KOD;
                           _bryg.NAZWA:=ZLBR.NAZ;
                           _bryg.add()
                        ?};
                        ZLBS.next()
                     !}
                  ?}
               ?};
               _prac.next()
            !}
         ?};
         _bryg.clear();
         {? _bryg.first()
         || {!
            |?
               _res.TYP:='B';
               _res.SYM:=_bryg.SYM;
               _res.NAZWA:=_bryg.NAZWA;
               _res.REF:=_bryg.REF;
               PL_RES.prefix('B',_bryg.REF);
               {? PL_RES.first()
               || _res.REF_RES:=$PL_RES.ref();
                  _res.ALERT:=''
               || _res.REF_RES:='';
                  _res.ALERT:='R'
               ?};
               _can_add:=0;
               _res.cntx_psh();
               _res.prefix(_res.TYP,_res.REF_RES);
               {? _res.size()=0
               || _can_add:=1
               ?};
               _res.cntx_pop();
               {? _can_add>0
               || _res.add()
               ?};
               _bryg.next()
            !}
         ?};
         obj_del(_bryg);
         obj_del(_prac)
      ?};

::    Zamienniki operacji
      _toper:=null();
      {? _tab='TOPER'
      || _toper:=_oper.ref()
      |? _tab='ZGP'
      || _toper:=_oper.TOPER
      ?};

      {? _toper<>null()
      ||
         {? exec('is_zamiennik','tech_oper',_toper)=0
         ||
            TECHZAMS.cntx_psh();
            TECHZAMS.index('ATL');
            TECHZAMS.prefix('T',_toper);
            {? TECHZAMS.first()
            || {!
               |?
::                !!! REKURENCJA !!!
                  exec('get_resources','po_plan',$TECHZAMS.ref(),_ilosc,_res,'TECHZAMS',0);
                  TECHZAMS.next()
               !}
            ?};
            TECHZAMS.cntx_pop()
         ?};
         ~~
      ?};

      {? _tab='ZGP'
      || _toper:=_oper.TOPER;

         {? _toper<>null()
         ||
            {? exec('is_zamiennik','zl_guide',_oper)=1
            ||
::             Pobieram dla ZGPa, który mógł być już zamieniony oryginalne zasoby z operacji technologicznej
::             !!! REKURENCJA !!!
               exec('get_resources','po_plan',$_toper,_ilosc,_res,'TOPER',0)
            ?}
         ?}
      ?};
      ~~
   ?}
?};
TKTL.cntx_pop();
PL_RES.cntx_pop();
TWRKPLC.cntx_pop();
TWRKZBR.cntx_pop();
LPROD.cntx_pop();
_oper.cntx_pop();
_res


\ploper_to_rs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [2011]
:: OPIS: Dodaje aktualnego PL_OPERa do RS'a przekazanego w argumencie
::   WE: _a - :RS
::   WY: 0 / 1
::  OLD: \ploper_to_rs/pl_okr3.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>0
|| _tab:=_a
|| return()
?};
PL_PART.cntx_psh();
M.cntx_psh();
ZL.cntx_psh();
TTOPER.cntx_psh();
TOPER.cntx_psh();
MGR.cntx_psh();
ZGP.cntx_psh();
ZLIM.cntx_psh();
REM_ZGL.cntx_psh();
REM_PLAN.cntx_psh();
PL_EVENR.cntx_psh();
PL_EVENT.cntx_psh();
_tab.blank();
_tab.REF:=$PL_OPER.ref;
_tab.PLPART:=$PL_OPER.PL_PART;
_tab.DURATION:=PL_OPER.DURATION;
_tab.STARTD:=PL_OPER.STARTD;
_tab.ENDD:=PL_OPER.ENDD;
_tab.STARTT:=PL_OPER.STARTT;
_tab.ENDT:=PL_OPER.ENDT;
_tab.TP:=PL_OPER.TP;
_tab.TZ:=PL_OPER.TZ;
_tab.SYMBOL:=PL_OPER.SYMBOL;
_tab.OPIS:=PL_OPER.OPIS;
_tab.KOLOR:=PL_OPER.KOLOR;
_tab.OFFSET_P:=PL_OPER.OFFSET_P;
_tab.OFFSET_O:=PL_OPER.OFFSET_O;
_tab.OFFSET_U:=PL_OPER.OFFSET_U;
_tab.MINDATE:=PL_OPER.MINDATE;
_tab.MAXDATE:=PL_OPER.MAXDATE;
_tab.MINTIME:=PL_OPER.MINTIME;
_tab.MAXTIME:=PL_OPER.MAXTIME;
_tab.WHO_ADD:=PL_OPER.WHO_ADD;
_tab.WHO_MOD:=PL_OPER.WHO_MOD;
_tab.WYK:=PL_OPER.WYK;
_tab.TOPER:=PL_OPER.RTOPER;
_tab.PLANNED:=PL_OPER.PLANNED;
{? PL_OPER.TM_START>0
|| _tab.PL_START:=exec('to_string','#tm_stamp',PL_OPER.TM_START)
?};
{? PL_OPER.TM_END>0
|| _tab.PL_END:=exec('to_string','#tm_stamp',PL_OPER.TM_END)
?};
_tab.TYP:=PL_OPER.TYP;
::pozwalam na przesuwanie operacji tylko dla zwyklych operacji i rezerwacji
{? _tab.TYP='O' | _tab.TYP='R'
|| _tab.MOVEABLE:=1
|| _tab.MOVEABLE:=0
?};
_tab.ILOSC:=PL_OPER.ILOSC;
_tab.ZGP:=$PL_OPER.ZGP;
{? PL_OPER.ZGP<>null() & PL_OPER.PL_PART<>null & PL_OPER.PL_PART().ZL<>null()
|| exec('openmask','zl_common',PL_OPER.PL_PART().ZL);
   ZLIM.index('ZGP_KM');
   ZLIM.prefix(PL_OPER.ZGP);
   {? ZLIM.size()>0
   || _tab.LIMITY:='T'
   || _tab.LIMITY:='N'
   ?};
   ~~
?};

_tktl:=null();

{? PL_OPER.PL_PART().ZL<>null()
||
   _tktl:=PL_OPER.PL_PART().ZL().TKTL;
   {? _tktl=null()
   || _tktl:=PL_OPER.PL_PART().ZL().KTL
   ?}
|? PL_OPER.PL_PART().TKTL<>null()
|| _tktl:=PL_OPER.PL_PART().TKTL
?};
_toper:=null();
{? PL_OPER.ZGP<>null()
|| _toper:=PL_OPER.ZGP().TOPER
?};
{? _toper=null()
|| _toper:=PL_OPER.TOPER
?};

{? _tktl<>null() & _toper<>null()
||
   TACTTLS.cntx_psh();
   TACTTLS.index('AKNROP');

::   _util:=exec('FindAndGet','#table',TKTL,_tktl,,"TYP().UTIL",'');
   {? 1
::      _util='O'
   || TACTTLS.prefix('T',_tktl,_toper)
::   || TACTTLS.prefix('T',_tktl)
   ?};
   {? TACTTLS.size()>0
   || _tab.NPU:='T'
   || {? _toper<>null()
      || TACTTLS.prefix('T',_tktl,null());
         {? TACTTLS.size()>0
         || _tab.NPU:='T'
         ?}
      ?}
   ?};
   TACTTLS.cntx_pop()
?};

{? PL_OPER.ZGP<>null()
|| _tab.IL_NAPR:=exec('count_napr4zgp','braki',PL_OPER.ZGP)
?};

_tab.GROUPKEY:=PL_OPER.GROUPKEY;
_tab.PREVS:=exec('count_prevs_ope','po_plan',PL_OPER.ref());
_tab.NEXTS:=exec('count_nexts_ope','po_plan',PL_OPER.ref());
_tab.SYM_MIN:=PL_OPER.SYM_MIN;
_tab.SYM_MAX:=PL_OPER.SYM_MAX;
_tab.TERMIN:=exec('get_plpart_term','po_plan',PL_OPER.PL_PART);
_tab.NUM:=PL_OPER.NUM;
_tab.KTM:=PL_OPER.PL_PART().M().KTM;
_tab.JM:=M.J().KOD;
_tab.PL_SPLIT:=$PL_OPER.PL_SPLIT;
{? PL_OPER.TOPER<>null()
|| _tab.KOLOR_T:=PL_OPER.TOPER().OPER().KOLOR
|? PL_OPER.ZGP<>null()
|| _tab.KOLOR_T:=PL_OPER.ZGP().TOPER().OPER().KOLOR
?};
_tab.KOLOR_M:=M.KOLOR;
_tab.KOLOR_G:=M.MGR().KOLOR;

_tab.INFO1:=PL_OPER.SYMBOL;
{? _tab.KTM<>''
|| _tab.INFO2:=PL_OPER.OPIS+' / '+_tab.KTM;
:: NUCO - zmiana dodanie opisu - nazwa indeksu
   _tab.INFO3:=PL_OPER.PL_PART().M().N
|| _tab.INFO2:=PL_OPER.OPIS;
:: NUCO - zmiana dodanie opisu - nazwa indeksu
   _tab.INFO3:=''
?};
:: _tab.INFO3:='';
_tab.SINGLE:=PL_OPER.SINGLE;
_tab.PL_EVENR:=$PL_OPER.PL_EVENR;
{? PL_OPER.PL_EVENR<>null()
|| _tab.PL_EVENT:=$PL_OPER.PL_EVENR().PL_EVENT;
   _tab.EVE_TRYB:=PL_EVENR.PL_EVENT().PL_TRYB;
   {? PL_EVENR.PL_EVENT().TM_MAX=0
   || _tab.EVE_BT:='T'
   ?};
   _tab.EVE_EAT:=exec('get','#params',500330,type_of(''));
   _tab.EVE_USE:=PL_EVENR.USABLE
?};
ZGP.cntx_pop();
TTOPER.cntx_pop();
TOPER.cntx_pop();
MGR.cntx_pop();
ZL.cntx_pop();
PL_PART.cntx_pop();
M.cntx_pop();
ZLIM.cntx_pop();
REM_ZGL.cntx_pop();
REM_PLAN.cntx_pop();
PL_EVENR.cntx_pop();
PL_EVENT.cntx_pop();
~~

