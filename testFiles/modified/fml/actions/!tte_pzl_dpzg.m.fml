:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_dpzg.fml
:: Utworzony: 26.10.2015
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_DPZG - Generacja przewodników zlecenia
::======================================================================================================================




\generuj_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Generuj' w oknie wertowania przewodników, uruchamia czynność
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_top_level:=exec('top_level','zl_link',_env.ZL);
_top_rodzaj:=exec('FindAndGet','#table',ZL,_top_level,,"RODZAJ",'');
ZL.cntx_psh();

{? _top_rodzaj='Z' & _top_level=_env.ZL
||
   _can_continue:=1;

   {? exec('subzlec_exist','zl_link',_top_level)>0
   || _can_continue:=FUN.ask('Generować przewodniki dla wszystkich podzleceń zlecenia złożonego: %1?'@[_env.BUF_ZL.SYM])
   || _can_continue:=0;
      FUN.emsg('Nie można generować przewodników do zlecenia: %1 ponieważ nie ma podzleceń.'@[_env.BUF_ZL.SYM])
   ?};
   {? _can_continue>0
   ||
::    Sprawdzam czy jakiekolwiek podzlecenie ma zakończoną technologię
      _fml:="
         _result:=1;
         {? ZL.STAT_T='N'
         || _result:=0
         ?};
         _result
      ";
      _args_chk1:=exec('for_each_args','zl_common');
      _args_chk1.ZL:=exec('main_podzlec','zl_link',_env.ZL);
      _args_chk1.FORMULA:=_fml;
      _args_chk1.EXPECTED:=0;
      exec('for_each_tree','zl_common',_args_chk1);

      {? _args_chk1.RESULT=0
      || FUN.emsg('Żadnemu z podzleceń nie zakończono redagowania technologii. Generowanie przewodników niemożliwe.'@);
         _can_continue:=0
      ?};

      _fml:="
         _ile:=exec('ile','zl_guide',ZL.ref(),ZL.IL);
         _ile
      ";
      _args_chk2:=exec('for_each_args','zl_common');
      _args_chk2.ZL:=exec('main_podzlec','zl_link',_env.ZL);
      _args_chk2.FORMULA:=_fml;
      _args_chk2.EXPECTED:=0;
      exec('for_each_tree','zl_common',_args_chk2);
      {? _args_chk2.RESULT=0
      || FUN.emsg('Żadnemu z podzleceń nie pozostała ilość do podzielenia na przewodniki. Generowanie przewodników niemożliwe.'@);
         _can_continue:=0
      ?};

      {? _can_continue>0
      ||
         KOMM.init(250,,'Generowanie przewodników'@);
         _fml:="
            _ile:=exec('ile','zl_guide',ZL.ref(),ZL.IL);
            _args:=exec('mp_run_a','#b__box');
            _args.ACT_UID:='TTE_PZL_DPZG';
            _args.GRUPA:='T';
            _args.UIDREF:=ZL.uidref();
            _args.AKCJA:='GENERUJ';
            _args.PROC_START:='T';
            _args.CONTEXT:=obj_new('RESULT');
            _args.CONTEXT.RESULT:=1;
            {? _ile>0
            || _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
               exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZL.ref());
               exec('mp_run','#b__box',_args)
            ?};
            _args.CONTEXT.RESULT
         ";

         _args_gen:=exec('for_each_args','zl_common');
         _args_gen.ZL:=exec('main_podzlec','zl_link',ZL.ref());
         _args_gen.FORMULA:=_fml;
         _args_gen.EXPECTED:=1;
         exec('for_each_tree','zl_common',_args_gen);
         KOMM.select()
      ?}
   ?}
||
:: NUCO - weryfikacja czy karta jest kartą domyślną
   {? ~exec('is_default_tech','tech_common', ZL.KTL, ZL.KTM)
   || _can_continue:=FUN.ask('Karta technologiczna zlecenia nie jest domyślną kartą dla indeksu: %1\nCzy chcesz kontynuować generowanie przewodników?'@[ZL.KTM().KTM])
   || _can_continue:=FUN.ask('Generować przewodniki dla zlecenia: %1?'@[_env.BUF_ZL.SYM])
   ?};
:: NUCO - weryfikacja czy są fantomy
   _ktl:=ZL.TKTL;
   {? _ktl=null()
   || _ktl:=ZL.KTL
   ?};
   {? _can_continue & (_ktl=null | ~exec('czy_fantom','qtpp',_ktl))
   || FUN.error('Karta technologiczna zawiera fantomy lub nie można jej odnaleźć, generowanie nie jest możliwe');
     _can_continue:=0
   ?};

   {? _can_continue>0
   ||
      _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:='TTE_PZL_DPZG';
      _args.UIDREF:=ZL.uidref();
      _args.AKCJA:='GENERUJ';
      _args.PROC_START:='T';
      _args.CONTEXT:=obj_new('RESULT');
      _args.CONTEXT.RESULT:=0;
      _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

      exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZL.ref());

      exec('mp_run','#b__box',_args)
   ?}
?};
ZL.cntx_pop();
~~

