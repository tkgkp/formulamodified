:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_eotw.fml
:: Utworzony: 08.08.2019
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_EOTW - Awaryjne otwarcie zlecenia
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Formuła główna czynności Awaryjne otwarcie zlecenia (TTE_PZL_EOTW)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

_uid:='TTE_PZL_EOTW';

::# permissions=ODDZ
::# condition=Czy zlecenie w przygotowaniu, act_uid=, auto=N, formula=exec('czy_zlecenie_nowe','%gate',_a.ZL)
::# condition=Czy zlecenie otwarte, act_uid=, auto=N, formula=exec('czy_zlecenie_zaakceptowane','%gate',_a.ZL)
::# condition=Czy zlecenie proste, act_uid=, auto=N, formula=exec('czy_zlecenie_proste','%gate',_a.ZL)
::# condition=Czy zlecenie złożone, act_uid=, auto=N, formula=exec('czy_zlecenie_zlozone','%gate',_a.ZL)
::# condition=Czy zlecenie niezależne, act_uid=, auto=N, formula=exec('czy_zlecenie_niezalezne','%gate',_a.ZL)
::# condition=Czy zlecenie warsztatowe, act_uid=, auto=N, formula=exec('czy_zlecenie_warsztatowe','%gate',_a.ZL)

:: PARAMETRY WE:
::# kind=WE, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N, keyref=T
{? var_pres('ZL',_in)<>type_of(~~) & var_pres('ZL',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2'@@['ZL',_uid];
   FUN.error(_msg);
   _mp.error(_msg);
   return()
?};
{? var_pres('ZL',_in)=type_of(~~) || _in.ZL:=null() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};

_result:=0;
_can_continue:=1;

ZL.cntx_psh(); ZL.clear();

_clean_result:=params_exec('clean','!tte_pzl_eotw');
_can_continue:=_clean_result.RESULT;
_zl:=_clean_result.ZL;

{? _can_continue>0
||
:: Jeśli nadal null to patrzę czy zlecenie przekazane kontekstem
   {? _zl=null() & type_of(_context)>100 & var_pres('ZL',_context)=type_of(null())
   || _zl:=_context.ZL
   ?}
?};
{? _can_continue>0
||
:: Jeśli nadal null to pytam
   {? _zl=null()
   || _msg:='Błędna konfiguracja procesu — czynność %1 nie może być uruchamiana z pulpitu.'@@[_uid];
      FUN.emsg(_msg);
      _mp.error(_msg);
      ZL.cntx_pop();
      return()
   ?}
?};

{? _can_continue>0 & _zl<>null()
|| _can_continue:=ZL.seek(_zl)
|| _can_continue:=0
?};
{? _can_continue>0
||
   _mp.keyRef(ZL.uidref());

   _ask:=1;
   _komm:=1;
   {? _mp.isAutoRun()
   || _ask:=0
   ?};
   {? _mp.isGroup()
   || _ask:=0;
      _komm:=0
   ?};

:: WSTĘPNA WALIDACJA
:: Sprawdzane zamknięcia
   {? ZL.STAN<>'Z'
   || _can_continue:=0;
      {? _komm || KOMM.init(250,,'Awaryjne otwarcie zlecenia'@) ?};
      exec('komm_add','zl_common','Zlecenie nie jest zamknięte.'@);
      {? _komm || KOMM.select() ?};
      _mp.cancel()
   ?}
?};

:: Przyczyna, o ile wynika z kontekstu wywołania
{? _can_continue>0 & type_of(_context)>100 & var_pres('CAUSE',_context)=type_of('')
|| _cause:=_context.CAUSE
|| _cause:=''
?};

{? _can_continue>0
||
:: Faktyczne awaryjne otwarcie: automatycznie z procesu
:: - w przypadku niezgodności wyświetla raport w KOMM i zostaje na TODO
   {? _mp.isAutoRun()
   ||
:: NUCO - otwarcie zlecenia niezależnego jeśli takowe jest - przed wskazanym zleceniem
      exec('otw_zlec','qprocesy',ZL.ref(),0,0,0,_cause);
      _result:=exec('zl_otworz','!tte_pzl_eotw',ZL.ref(),0,1,0,_cause)

:: Faktyczne awaryjne otwarcie: przycisk w oknie TODO, funkcja w oknie selekcji zleceń
   |? _mp.akcja()='OTWÓRZ' | _mp.pathProc()>0
   ||
:: NUCO - otwarcie zlecenia niezależnego jeśli takowe jest - przed wskazanym zleceniem
      exec('otw_zlec','qprocesy',ZL.ref(),0,0,0,_cause);
      _result:=exec('zl_otworz','!tte_pzl_eotw',ZL.ref(),~_mp.isGroup(),~_mp.isGroup(),_cause)

:: Obsługa z TODO - wyświetlam okno umożliwiające podglądy różnych rzeczy ze zlecenia
:: Faktyczne otwarcie dopiero po uruchomieniu funkcji 'Otwórz awaryjnie' w tym oknie
   |? _mp.pathTodo()
   ||
      {? _can_continue>0
      ||
         DK_C.cntx_psh();
         _btn2:=exec('obj_ntab_set','#array',,
            'txt','text=%1,align=end,display=1'['Otwórz awaryjnie'@],
            'fml',"exec('action_restore','!tte_pzl_eotw')"
         );
         _red:=exec('zl_display_red_full','zl_head','Awaryjne otwarcie zlecenia %1'@[ZL.SYM],,,_btn2,1,1,1);
         ZL.win_edit(_red);
         exec('ustaw_pola','zl_head');
         exec('procent','zl_head');
         _mp.keep();
         ZL.display();
         DK_C.cntx_pop();
         ~~
      ?}
   ?};

   {? _result>0 | _mp.isMicro()
   || _mp.save(exec('kind_out','#b_port'),'ZL',ZL.ref());
      _mp.done()
   || _mp.cancel()
   ?}
?};
ZL.cntx_pop();
~~

