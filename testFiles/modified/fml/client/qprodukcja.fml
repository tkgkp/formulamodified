:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: qprodukcja.fml
:: Utworzony: 13.08.2020
:: Autor: PeKa
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obslugi zmian w qdef.fml
::======================================================================================================================


\drukuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO]
:: OPIS: Wydruki etykiet wywolywane z roznych miejsc
::   WE: _a - domyślnie 1, 0 - etykieta operacji w toku
::       _b - symbol partii z ekiosku
::       _c - parametr okresla drukowania odpowiedniej etykiety z kiosku
::       _d - ilosc etykiet
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};
{? _>=2 || {? type_of(_b)<>2 || _b:='' ?} || _b:='' ?};
{? _>=3 || {? type_of(_c)<>2 || _c:='' ?} || _c:='' ?};
{? _>=4 || {? type_of(_d)<>1 || _d:=0 ?} || _d:=0 ?};
{? var_press('tabp')>100 || obj_del(tabp) ?};
VAR_DEL.delete('__nazwa','tabacr');
tabacr:=2-!cur_tab();
{? tabacr='ND' | tabacr='DK'
||
"wydruk z poziomu naglowka dokumentu magazynowego (etykieta na przyjeciu dostawy";
   tabp:=sql('select distinct
               M.KTM,
               M.N,
               ND.D,
               DK_L.TW,
               DK.IL,
               DK.IL ILOSC,
               JM.KOD JMIAR,
               EANL.KOD LOK,
               KH.KOD,
               KH.SKR,
               DK.SCEAN,
               SPACE(100) as NCD,
               SPACE(1) as PARTIA,
               DK_C.WAR02 BC,
               DK_C.WAR01 QKJ,
               TYPYDOK.T as TYP,
               M_OPAKOW.POJ as POJOPK,
               M.DOKL as DOKLIL,
               DK.REFERENCE as REF
                from DK_L
                 left join DK using (DK_L.DK,DK.REFERENCE)
                 left join M using (DK.M,M.REFERENCE)
                 left join M_OPAKOW using (M_OPAKOW.M,M.REFERENCE)
                 left join JM using (M.J,JM.REFERENCE)
                 left join ND using (DK.N,ND.REFERENCE)
                 left join TYPYDOK using (ND.TYP,TYPYDOK.REFERENCE)
                 left join KH using(ND.KH,KH.REFERENCE)
                 left join EANL using(DK_L.LOK,EANL.REFERENCE)
                 left join DK_C using(DK_C.REFERENCE,DK.DK_C)
                where DK.N=\':_a\' order by 1,2,3',$ND.ref);
   _ety:="exec('druk','qprodukcja',{? tabp.TYP='PLP' | tabp.TYP='PW' | tabp.TYP='RP'  || 'WYROBY' || 'DOSTAWA' ?})"
|? tabacr='SC'
||
"wydruk z poziomu identyfikatorow dla stanow wg dostaw (etykieta jako dodruk uszkodzonej";
    tabp:=sql('select
               M.KTM,
               M.N,
               DK.DOST as D,
               DK.TW,
               DK.IL as IL,
               DK.IL as ILOSC,
               JM.KOD as JMIAR,
               KH.KOD,
               KH.SKR,
               DK.SCEAN,
               DK_C.WAR02 as BC,
               DK_C.WAR01 as QKJ,
               SPACE(100) as NCD,
               SPACE(1) as PARTIA,
               TYPYDOK.T as TYP,
               SPACE(10) as LOK,
               M_OPAKOW.POJ as POJOPK,
               M.DOKL as DOKLIL,
               DK.REFERENCE as REF
                from @DK
                 left join DK_C using (DK.DK_C,DK_C.REFERENCE)
                 left join M using (DK.M,M.REFERENCE)
                 left join M_OPAKOW using (M_OPAKOW.M,M.REFERENCE)
                 left join JM using (DK.JM,JM.REFERENCE)
                 left join @ND using (DK.N,ND.REFERENCE)
                 left join TYPYDOK using (ND.TYP,TYPYDOK.REFERENCE)
                 left join KH using (ND.KH,KH.REFERENCE)
                where DK.REFERENCE=\':_a\'',SC.SRDK);
    _ety:="exec('druk','qprodukcja',{? tabp.TYP='PLP' | tabp.TYP='PW' | tabp.TYP='RP' || 'WYROBY' || 'DOSTAWA' ?})"
|? tabacr='SLD'
||
"wydruk z poziomu identyfikatorow dla stanow wg wymiarow (etykieta jako dodruk uszkodzonej";
    tabp:=sql('select
               M.KTM,
               M.N,
               DK.DOST as D,
               to_date(:_b) as TW,
               DK.IL as IL,
               DK.IL as ILOSC,
               JM.KOD JMIAR,
               '':_c'' as LOK,
               KH.KOD,
               KH.SKR,
               DK.SCEAN,
               DK_C.WAR02 as BC,
               DK_C.WAR01 as QKJ,
               SPACE(100) as NCD,
               SPACE(1) as PARTIA,
               TYPYDOK.T as TYP,
               M_OPAKOW.POJ as POJOPK,
               M.DOKL as DOKLIL,
               DK.REFERENCE as REF
                from @DK
                 left join DK_C using (DK.DK_C,DK_C.REFERENCE)
                 left join M using (DK.M,M.REFERENCE)
                 left join M_OPAKOW using (M_OPAKOW.M,M.REFERENCE)
                 left join JM using (DK.JM,JM.REFERENCE)
                 left join @ND using (DK.N,ND.REFERENCE)
                 left join TYPYDOK using (ND.TYP,TYPYDOK.REFERENCE)
                 left join KH using (ND.KH,KH.REFERENCE)
                where DK.SCEAN=\':_a\' and DK.PLUS=''T'' and DK.SRDK=DK.PRDK',SLD.SCEAN,SLD.SL().TW,SLD.SL().EANL().KOD);
    _ety:="exec('druk','qprodukcja',{? tabp.TYP='PLP' | tabp.TYP='PW' | tabp.TYP='RP' || 'WYROBY' || 'DOSTAWA' ?})"
|? tabacr='EANN'
||
"wydruk z poziomu okna operacji mobilnych (etykieta dla nawazkarni - pozycje z bufora operacji wydania surowca";
    tabp:=sql('select
               M.KTM,
               M.N,
               EANP.TW,
               EANP.ILS as IL,
               EANP.ILS as ILOSC,
               EANP.SCEAN,
               JM.KOD JMIAR,
               M.DOKL as DOKLIL,
               (select DK_C.WAR01 as KJX from @DK left join @DK_C using(DK.DK_C,DK_C.REFERENCE)
               where DK.SCEAN=EANP.SCEAN and DK.PLUS=''T'' and DK.SRDK=DK.PRDK) as QKJ,
               SPACE(100) as NCD
                from @EANP
                 left join M using (EANP.M,M.REFERENCE)
                 left join JM using (M.J,JM.REFERENCE)
                 left join EANN using (EANP.EANN,EANN.REFERENCE)
                where EANN.REFERENCE=\':_a\' and EANP.ILS>0',$EANN.ref);
   _ety:="exec('druk','qprodukcja','NAWAZKA')"
|? tabacr='tabplp'
||
"wydruk z poziomu edycji rejestracji produkcji dla zaznaczonych rekordów";
   _sel:=tabplp.sel_aget();
   {? _sel.size()=0
   || _sel.REF:=#tabplp.ref();
      _sel.add()
   ?};
   _sel2:=sql('select DK.REFERENCE as DK_REF from DK where 1=0');
   {? _sel.first()
   || {!
      |? {? tabplp.seek(_sel.REF)
         || _sel2.DK_REF:=tabplp.DK_REF;
            _sel2.add
         ?};
         _sel.next()
      !}
   ?};
   tabp:=sql('select distinct
               M.KTM,
               M.N,
               ND.D,
               DK.TW,
               DK.IL,
               DK.IL ILOSC,
               JM.KOD JMIAR,
               SPACE(10) as LOK,
               KH.KOD,
               KH.SKR,
               DK.SCEAN,
               SPACE(100) as NCD,
               DK_C.WAR02 BC,
               DK_C.WAR01 QKJ,
               TYPYDOK.T as TYP,
               M_OPAKOW.POJ as POJOPK,
               M.DOKL as DOKLIL,
               DK.REFERENCE as REF
                from DK
                 left join M using (DK.M,M.REFERENCE)
                 left join M_OPAKOW using (M_OPAKOW.M,M.REFERENCE)
                 left join JM using (M.J,JM.REFERENCE)
                 left join ND using (DK.N,ND.REFERENCE)
                 left join TYPYDOK using (ND.TYP,TYPYDOK.REFERENCE)
                 left join KH using(ND.KH,KH.REFERENCE)
                 left join DK_C using(DK.DK_C,DK_C.REFERENCE)
                where DK.N=\':_a\' and DK.REFERENCE in (select :_b.DK_REF from :_b)
                order by 1,2,3'
                ,$ND.ref,_sel2);
   _ety:="exec('druk','qprodukcja',{? tabp.TYP='PLP' | tabp.TYP='PW' | tabp.TYP='RP' || 'WYROBY' || 'DOSTAWA' ?})"
|? tabacr='ZPARN' | tabacr='USERS'
||
" wywolanie z kiosku - podmiana na usera logowania a nie usera kiosku";
   _usert:=OPERATOR.EKIOSK().KOD;
   _userk:=OPERATOR.USER().KOD;
   {? _usert<>_userk
   || {? USERS.find_key(_usert,) & USERS.AKT='T' || OPERATOR.USER:=USERS.ref() ?}
   ?};
"szukam wlasciwej parti wybranej z combo boxa na kiosku";
    {? _b<>''
    || _partia:=exec('FindInSet','#table','ZPARN','SYM',_b,_b,"ZPARN.ref")
    || _partia:=ZPARN.ref
    ?};
"wydruk z poziomu partii produkcyjnych";
    {? _a=0
    ||
" etykieta operacji w toku";
       tabp:=sql('select distinct
               M.KTM,
               M.N,
               ZPARN.IL,
               ZPARN.IL as ILOSC,
               ZPARN.ZPEAN as SCEAN,
               ZPARN.SYM as PARTIA,
               DK_C.WAR02 as BC,
               ZPARN.TW as TW,
               ZPARN.SYM as QKJ,
               SPACE(100) as NCD,
               JM.KOD JMIAR,
               M.DOKL as DOKLIL,
               M_OPAKOW.POJ as POJOPK,
               ZL.SYM,
               ZGH.NRPRZ,
               SPACE(1) as KOD,
               SPACE(1) as SKR,
               PROD_REJ.STARTD as D
                from ZPARN
                 left join ZL using(ZPARN.ZL,ZL.REFERENCE)
                 left join ZGH using (ZPARN.ZGH,ZGH.REFERENCE)
                 left join PROD_REJ using(PROD_REJ.ZGH,ZGH.REFERENCE)
                 left join M using (ZL.KTM,M.REFERENCE)
                 left join M_OPAKOW using (M_OPAKOW.M,M.REFERENCE)
                 left join JM using (M.J,JM.REFERENCE)
                 left join ZGP using(PROD_REJ.ZGP, ZGP.REFERENCE)
                 left join DK_C using(ZPARN.DK_C,DK_C.REFERENCE)
                where ZPARN.REFERENCE=\':_a\' and ZGP.TPZ=''N''',$_partia)
    ||
       tabp:=sql('select distinct
                  M.KTM,
                  M.N,
                  ZPARN.IL,
                  ZPARN.IL as ILOSC,
                  ZPARN.ZPEAN as SCEAN,
                  ZPARN.SYM as PARTIA,
                  DK_C.WAR02 as BC,
                  ZPARN.TW as TW,
                  ZPARN.SYM as QKJ,
                  SPACE(100) as NCD,
                  JM.KOD JMIAR,
                  M.DOKL as DOKLIL,
                  M_OPAKOW.POJ as POJOPK,
                  ZL.SYM,
                  ZGH.NRPRZ,
                  SPACE(1) as KOD,
                  SPACE(1) as SKR,
                  PROD_REJ.STARTD as D,
                  SPACE(40) as UZYT,
                  SPACE(16) as SURID,
                  SPACE(20) as STANOWISKO,
                  SPACE(50) as PRODUKT
                   from ZPARN
                    left join ZL using(ZPARN.ZL,ZL.REFERENCE)
                    left join ZGH using (ZPARN.ZGH,ZGH.REFERENCE)
                    left join PROD_REJ using(PROD_REJ.ZGH,ZGH.REFERENCE)
                    left join M using (ZL.KTM,M.REFERENCE)
                    left join M_OPAKOW using (M_OPAKOW.M,M.REFERENCE)
                    left join JM using (M.J,JM.REFERENCE)
                    left join ZGP using(PROD_REJ.ZGP, ZGP.REFERENCE)
                    left join DK_C using(ZPARN.DK_C,DK_C.REFERENCE)
                   where ZPARN.REFERENCE=\':_a\' and ZGP.TPZ=''N''',$_partia)
    ?};
   _ety:="exec('druk','qprodukcja','WYROBY')"
|| FUN.info('Wydruk z tego miejsca niemożliwy.\nProszę skontaktować się z Administarotem systemu.')
?};

tabp.for_each("{? tabacr<>'EANN'
               || {? tabp.POJOPK<>0
                  || tabp.IL:=ceil(tabp.IL/tabp.POJOPK)
                  || tabp.IL:=1
                  ?};
                  tabp.put()
               || tabp.IL:=1;
                  tabp.put
               ?}");

tabp.first();
_winsel:=tabp.mk_sel('Lista do wydruku etykiet','P',0,'etykiety',1);
{? tabacr='ZPARN' | tabacr='USERS'
|| tabp.win_fld(_winsel,,'SYM',,,15,,1,'Zlecenie');
   tabp.win_fld(_winsel,,'NRPRZ',,,15,,1,'Przewodnik')
?};
tabp.win_fld(_winsel,,'KTM',,,15,,1,'KTM');
tabp.win_fld(_winsel,,'N',,,50,,1,'Nazwa');
{? tabacr<>'ZPARN' | tabacr<>'USERS' || tabp.win_fld(_winsel,,'D',,,10,,1,'Data') ?};
tabp.win_fld(_winsel,,'ILOSC',,,10,,1,'Ilość');
tabp.win_fld(_winsel,,'JMIAR',,,6,,1,'Jm');
{? tabacr<>'ZPARN' & tabacr<>'USERS' || tabp.win_fld(_winsel,,'LOK',,,10,,1,'Lokalizacja')?};
tabp.win_fld(_winsel,,'TW',,,10,,1,'Termin ważności.');
tabp.win_fld(_winsel,,'BC',,,20,,1,'PD / Batch code');
tabp.win_fld(_winsel,,'QKJ',,,10,,1,'Partia produkcyjna / Numer KJ');
tabp.win_fld(_winsel,,'IL',,,5,0,,'Liczba etykiet');
tabp.win_fld(_winsel,,'SCEAN',,,16,,1,'Identyfikator');
tabp.win_act(_winsel,,'Szukaj');
tabp.win_act(_winsel,,'Formuła','Popraw',,,"exec('pop_zb','qprodukcja')",,1,1,"exec('pop_zb','qprodukcja')");
tabp.win_act(_winsel,,'Usuń');
tabp.win_act(_winsel,,'Formuła','Wydruk',,'Wydruk etykiet',_ety,,0,1,_ety);
tabp.win_btn(_winsel,'text=Wydruk,btn_label_align=center,panel=right','menu:W',,,,,,'noempty');

tabp.win_sel(_winsel);
_okno:=tabp.mk_edit('Etykiety');
{? tabacr<>'EANN' || tabp.win_efld(_okno,tabp,'ILOSC','ILOSC','ILOSC',20,,,'Ilość w kartonie/palecie') ?};
tabp.win_efld(_okno,tabp,'IL','IL','IL',20,0,,'Ilość etykiet');
tabp.win_edit(_okno);
tabp.prefix();
{? tabacr<>'EANN' & tabacr<>'ZPARN' & tabacr<>'USERS'
||
   _dl:={? tabp.TYP='PLP' | tabp.TYP='PW' || 50 || 60 ?};
   {? tabp.first
   || {!
      |? STR.split(tabp.N);
         tabp.N:=STR.line(_dl);
         tabp.NCD:=STR.line(_dl);
         tabp.put;
         tabp.next
      !}
   ?}
?};
{? tabacr='USERS' & _c=''
|| _ile_prod:=$exec('get_value','#desktop','','ctr_menu_end','il_na_etyk@menu_end');
   _ile_etykiet:=$exec('get_value','#desktop','','ctr_menu_end','fld_il_ety@menu_end');
   _data_produkcji:=exec('get_value','#desktop','','ctr_menu_end','data_prod@menu_end');
   {? _ile_etykiet<>''
   || tabp.IL:=#_ile_etykiet
   || tabp.IL:=1
   ?};
   {? _ile_prod<>''
   || tabp.ILOSC:=#_ile_prod
   ?};
   {? +_data_produkcji
   || tabp.D:=exec('str2date','#convert',_data_produkcji)
   || tabp.D:=date()
   ?};
   tabp.put;
   exec('druk','qprodukcja','WYROBY');
:: przywrocenie usera po wydruku
   {? _userk<>_usert
   || {? USERS.find_key(_userk,) & USERS.AKT='T' || OPERATOR.USER:=USERS.ref() ?}
   ?}
|? tabacr='USERS' & _c='nawazka'
|| {? _d>0
   || tabp.IL:=_d
   || _ile_etykiet:=$exec('get_value','#desktop','','ctr_menu_sur','fld_il_naw@menu_end');
      {? _ile_etykiet<>''
      || tabp.IL:=#_ile_etykiet
      || tabp.IL:=1
      ?}
   ?};
   tabp.N:=__ENV_REJ.TAB.M;
   tabp.KTM:=__ENV_REJ.TAB.KTM;
   tabp.ILOSC:=__ENV_REJ.TAB_N.IL;
   tabp.SURID:=__ENV_REJ.TAB.SCEAN;
   tabp.STANOWISKO:=PROD_REJ.RES_SYM;
   tabp.NRPRZ:=exec('FindAndGet','#table',ZLIM,__ENV_REJ.TAB.ZLIMREF,,"ZLIM.ZGP().NRPRZ().NRPRZ",'');
   tabp.UZYT:=VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE;
   tabp.D:=date();
   tabp.PRODUKT:=exec('FindAndGet','#table',ZL,__ENV_REJ.TAB.ZLREF,,"KTM().KTM",'');
   tabp.put;
   exec('druk','qprodukcja','NAWAZKA');
:: przywrocenie usera po wydruku
   {? _userk<>_usert
   || {? USERS.find_key(_userk,) & USERS.AKT='T' || OPERATOR.USER:=USERS.ref() ?}
   ?}
|| tabp.select()
?};
{? var_press('tabp')>100 || obj_del(tabp) ?};
VAR_DEL.delete('__nazwa','tabacr');
~~


\druk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO_MOM]
:: OPIS: Wydruk etykiet w zaleznosci o przekazanego kodu etykiey
::   WE: _a - kod etykiety
::      [_b] - konkretny typ drukarki
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>2 || _b:='' ?} || _b:='' ?};
:: PeKa - jesli uzytkownik ma wskazana etykiete w paramrtrach wydrukow to pobieram i nadpisuje ta z przeakazanego wydruku
_parety:=sql('select URZ_LAB.KOD as ETYKIETA from PARWYD join URZ_LAB where PARWYD.USER=:_a',OPERATOR.USER).ETYKIETA;
{? cli_ver()='jterm' & _a<>'' & _parety<>''
|| _a:=_parety
?};
_wyn:=1;
:: Sprawdzenie parametrow
{? _wyn=1
|| {? PAR_WYDR.TYPDR=null
   || FUN.emsg('Brak ustawionego typu drukarki w parametrach pracy.');
      _wyn:=0
   ?}
?};
{? _wyn=1
|| URZ_LAB.index('URZ_LAB');
   URZ_LAB.prefix(PAR_WYDR.TYPDR().URZ_KOM,_a,_a);
   {? URZ_LAB.first
   || PAR_WYDR.URZ_LAB:=URZ_LAB.ref
   || FUN.emsg('Brak zdefiniowanej etykiety o kodzie '+'_a'+' dla drukarki '+PAR_WYDR.TYPDR().NAZWA);
      _wyn:=0
   ?}
?};
{? _wyn & tabp.sel_size=0
:: wydruk etykiety dla pojedynczego rekordu - drukowana ilosc ustalona przez usera albo automatycznie w tabeli tabp
|| {! a:=1..tabp.IL
   |! exec('druk','kody_kresk',_b) !}
||    tabp.cntx_psh();
:: wydruk etykiety dla grupy rekordow - drukowana ilosc ustalona przez usera albo automatycznie w tabeli tabp
      {? tabp.first
      || {!
         |? {? tabp.sel_mark=1
            || {! a:=1..tabp.IL |! exec('druk','kody_kresk') !};
               tabp.sel_del
            ?};
            _next:=tabp.next;
            _urz_lab:=PAR_WYDR.URZ_LAB;
            {? _a='WYROBY' & _next & tabp.sel_mark=1
            ||
:: wydruk etykiety oznaczajaca przerwe miedzy etykietami (kolejna etykieta z tabeli)
               URZ_LAB.cntx_psh();
               URZ_LAB.index('URZ_LAB');
               URZ_LAB.prefix(PAR_WYDR.TYPDR().URZ_KOM,'WYROBY_PRZERWA','WYROBY_PRZERWA');
               {? URZ_LAB.first
               || PAR_WYDR.URZ_LAB:=URZ_LAB.ref;
                  exec('druk','kody_kresk')
               ?};
               URZ_LAB.cntx_pop();
               PAR_WYDR.URZ_LAB:=_urz_lab
            ?};
            _next
         !}
      ?};
      tabp.cntx_pop()
?};
_wyn


\partia_przewodnik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('action_args','!tte_pzl_dgpa');
_args.AKCJA:='WERTUJ_ZGH';
_args.ZGH:=PROD_REJ.ZGH;
exec('action_brigde','!tte_pzl_dgpa',_args);
~~


\partia_zlecenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('action_args','!tte_pzl_dgpa');
_args.AKCJA:='WERTUJ_ZL';
_args.ZL:=PROD_REJ.ZL;
exec('action_brigde','!tte_pzl_dgpa',_args);
~~


\generuj_zlecenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO]
:: OPIS: Generuje widok powolywania zlecenia na podstawie pozycji z planu strategicznego
::   WE: [_a] - tryb pracy: 1 - (domyślnie) lista zleceń, 2 - podzlecenie zlecenia złożonego, 3 - zamówienie, 4 - plan strategiczny
::       [_b] - ZL.ref() - zlecenie nadrzędne (wymagane dla trybu 2)
::       [_c] - ZK_N.ref() - zamówienie (wymagane dla trybu 3)
::       [_d] - ZK_P.ref - zaplanowana pozyjca w Planie strategicznym
::   WY: wynik "__ZMP.select()" - obecnie _tab.select()
::  OLD: \zlisty/zlecenia.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _tryb:=_a || _tryb:=1 ?};
{? var_pres('_b')=type_of(null()) || _zl_nad:=_b || _zl_nad:=null() ?};
{? var_pres('_c')=type_of(null()) || _zk_n:=_c || _zk_n:=null() ?};
{? var_pres('_d')=type_of(null()) || _zk_p:=_d || _zk_p:=null() ?};

{? _tryb=2 & _zl_nad=null() || FUN.error('(zlisty/!tte_pzl_dzwe.fml) Zlecenie nadrzędne musi być podane.'); return() ?};
{? _tryb=3 & _zk_n=null() || FUN.error('(zlisty/!tte_pzl_dzwe.fml) Zamówienie musi być podane.'); return() ?};
{? (_tryb=1 & _zk_p<>null() & exec('planned_mainver','px_obj')=0) | (_tryb=1 & _zk_p=null())
|| FUN.error('Generowanie zlecenia możliwe wyłącznie dla pozycji zamówienia umieszczonej w kolejce planu.');
   return()
?};

_result:=0;

{? ~exec('sprdt','zl_head') || return(_result) ?};

{? _tryb=2
|| VAR.A_ZLNAD:=_zl_nad
|| VAR.A_ZLNAD:=null()
?};

set_help(exec('set_help','#help','TTE_PZL_DZWE'));

ZL.cntx_psh(); ZGH.cntx_psh(); ZGP.cntx_psh(); ZLIM.cntx_psh();
exec('tktl_cntx_psh','tech_common');
_zam:=exec('get','#params',500213,2)+exec('get','#params',500215,2);
{? _zam=''
|| FUN.info(
      'Brak wskazanych typów zamówień w parametrach systemu.\n'
      'Należy uzupełnić parametr aplikacyjny %1 lub %2.'@['500213','500215']
   )
|| _zam:=gsub(_zam,' ',',');
   _msk:=ST.ODDZ+'__';
   exec('openz','open_tab',_msk);
   _tab:=sql('
      select
         ZK_P.REFERENCE as REF,
         ZK_P.POZ,
         M.KTM as KOD,
         M.N as NAZ,
         M.REFERENCE as M_REF,
         ZK_P.ILRB as IL_REZ,
         ZK_P.ILZ as IL_ZAM,
         ZK_P.ILP as IL_POZ,
         (ZK_P.ILP-ZK_P.ILRB) as IL_WYTW,
         sum(ZLZAM.ILZL) as IL_ZL,
         ZK_N.SYM,
         ZK_P.DT as DTR,
         ZK_P.PL_DATA as PL_DATA,
         ZK_P.PL_TIME as PL_TIME,
         ZK_N.KH as KH,
         KH.KOD as KH_K,
         KH.SKR as KH_S,
         KH.NAZ as KH_N,
         KH.REFERENCE as KH_REF,
         HAN.KOD as HAN_K,
         HAN.NAZ as HAN_N,
         PROJEKTY.SYM as PROJEKT,
         M.REFERENCE as T,
         JM.KOD as JM,
         DK_C.M_ATR as ATR,
         DK_C.REFERENCE as DK_C,
         SPACE(20) as WAR01,
         SPACE(20) as WAR02,
         SPACE(20) as WAR03,
         SPACE(20) as WAR04,
         SPACE(20) as WAR05,
         SPACE(20) as WAR06,
         SPACE(20) as WAR07,
         SPACE(20) as WAR08,
         SPACE(20) as WAR09,
         SPACE(20) as WAR10,
         SPACE(1) as POTW_T,
         SPACE(1) as PLAN_OP,
         SPACE(1) as PLAN_ST,
::       Rodzaj zamówienia
         TYPYZAM.R as ZAM_R,
::       Limit źródłowy pozycji zamówienia
         ZK_P.ZLIM as ZLIM,
::       Zlecenie źródłowe
         SPACE(20) as ZL,
::       Znacznik, czy zlecenie źródłowe powstało jako kopia albo na skutek podziału innego zlecenia
         SPACE(1) as ZL_COPY,
::       Przewodnik źródłowy
         SPACE(30) as ZGH,
::       Pozycja przewodnika źródłowego
         0 as ZGP,
::       data pozpoczecia zlecenia, aby zdazyc na planowany termin realizacji
         ZK_P.PL_DATA as QPDP
      from ZK_P
         join M using(ZK_P.M,M.REFERENCE)
         join ZK_N using(ZK_P.N,ZK_N.REFERENCE)
         left join HAN using(ZK_N.HAN,HAN.REFERENCE)
         join TYPYZAM using(ZK_N.T,TYPYZAM.REFERENCE)
         join JM using(M.J,JM.REFERENCE)
         left join KH using(ZK_N.KH,KH.REFERENCE)
         left join ZLZAM using(ZK_P.REFERENCE,ZLZAM.ZAMPOZ)
         left join DK_C using(ZK_P.DK_C,DK_C.REFERENCE)
         left join PROJEKTY using(ZK_P.PROJEKTY,PROJEKTY.REFERENCE)
      where '+{? _zk_p=null() | _tryb<>1 || '' || 'ZK_P.REFERENCE=:_c and ' ?}+
            '(M.R=\'W\' or M.R=\'P\') and ZK_N.AKC=\'T\' and ZK_N.A=\'A\' and ZK_P.TOP=1 and ZK_N.STAN<>\'ZRE\'
            and '':_a'' LIKE ''%''||TYPYZAM.T||''%''
      group by ZK_P.REFERENCE, ZK_P.POZ, M.KTM, M.N, ZK_P.ILZ, ZK_P.ILP, ZK_P.ILRB, ZK_N.SYM, ZK_P.PL_DATA, ZK_P.PL_TIME,
            ZK_P.DT, ZK_N.KH, KH.KOD, KH.SKR, KH.NAZ, KH.REFERENCE, HAN.KOD, HAN.NAZ, PROJEKTY.SYM,
            M.REFERENCE, JM.KOD, DK_C.M_ATR, DK_C.REFERENCE, TYPYZAM.R, ZK_P.ZLIM
      order by KOD, PL_DATA, PL_TIME',_zam,_zk_n,_zk_p
   );

   {? type_of(_tab)=type_of(~~) || exec('err_sql','#sql'); return() ?};

   _korlim:=exec('get','#params',500221,2);

:: Ustalenie wartości dodatkowych pól
   {? _tab.first()
   || {!
      |? ZLZAM.index('ZMZL');
         ZLZAM.prefix(_tab.REF);
         {? ZLZAM.first()
         || {!
            |? REZ.index('ZLZAM');
               REZ.prefix(ZLZAM.ref(),'B');
               {? REZ.first()
               || {!
                  |? _tab.IL_REZ-=REZ.ILR;
                     _tab.IL_WYTW+=REZ.ILR;
                     REZ.next()
                  !}
               ?};
               ZLZAM.next()
            !}
         ?};

::       Ustawianie wartości atrybutów
         {? _tab.DK_C<>''
         ||
            {? var_pres('_buffer')>100
            || obj_del(_buffer)
            ?};
            DK_C.cntx_psh();
            DK_C.use(8+_tab.DK_C);
            DK_C.clear();
            {? DK_C.seek(BIT.sqlint(_tab.DK_C),)
            || _buffer:=exec('buffer','mat_atr');
               _buffer.get_dkc();
               _buffer.set_tab(_tab)
            ?};
            DK_C.cntx_pop()
         ?};

::       Ustawianie danych źródłowych: zlecenie, przewodnik, pozycja (dla zamówień wewnętrznych limitowych)
         {? _tab.ZAM_R='W' & _tab.ZLIM<>''
         || _args:=obj_new('ZL','ZL_COPY','ZGH','ZGP');
            exec('FindAndGet','#table',ZLIM,_tab.ZLIM,,"
                  _args:=_b;
                  _args.ZL:=ZGP().ZL().SYM;
                  _args.ZL_COPY:={? ZL.IDSRC='' || 'N' || 'T' ?};
                  _args.ZGH:=ZGP().NRZLP().NRPRZ;
                  _args.ZGP:=ZGP().NRP;
                  ~~
               ",,_args
            );
            _tab.ZL:=_args.ZL;
            _tab.ZL_COPY:=_args.ZL_COPY;
            _tab.ZGH:=_args.ZGH;
            _tab.ZGP:=_args.ZGP;
            obj_del(_args)
         || _tab.ZL:='';
            _tab.ZL_COPY:='N';
            _tab.ZGH:='';
            _tab.ZGP:=0
         ?};

::       Zmniejszenie ilości do wytworzenia o korekty limitów
         {? _korlim='N' & _tab.ZAM_R='W' & _tab.ZLIM<>''
         || ZLIM.use(ref_name(_tab.ZLIM));
            ZLIM.prefix();
            {? ZLIM.seek(_tab.ZLIM)
            || ZLIM.index('ZKK');
               ZLIM.prefix(ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.NR);
               {? ZLIM.first()
               || {!
                  |? {? ZLIM.AKC='T'
                     || _tab.IL_WYTW-=ZLIM.LIL
                     ?};
                     ZLIM.next()
                  !}
               ?}
            ?}
         ?};

::       Ustawianie znacznika planowania operacyjnego
         {? exec('zam_planned','po_plan',_tab.REF)>0
         || _tab.PLAN_OP:='T'
         || _tab.PLAN_OP:='N'
         ?};

::       Ustawianie znacznika planowania strategicznego
         {? exec('zkp_pxed_sql','px_tie',_tab.REF)>0
         || _tab.PLAN_ST:='T'
         || _tab.PLAN_ST:='N'
         ?};
::       Ustawianie daty rozpoczecia zlecenia, aby zdazyc na termin realizacji zamowienia
         _tab.QPDP:=exec('qpdp','qprodukcja',_tab.REF);
::       Ustawianie znacznika dostępności technologii
         _potw:=exec('potw_t','!tte_pzl_dzwe',_tab.M_REF);
         {? _potw=1
         || _tab.POTW_T:='T'
         |? _potw=0
         || _tab.POTW_T:='P'
         || _tab.POTW_T:='N'
         ?};

::         _tab.IL_ZL-=_ujil;
         _tab.put();
         {? _tab.IL_ZL>=_tab.IL_WYTW
         || _tab.del()
         || _tab.next()
         ?}
      !}
   ?};

   _tab.fld_attr('REF',2);
   _tab.fld_attr('T',2);
   _tab.fld_attr('KH',2);

:: Okno
   _wer:=_tab.mk_sel(
      {? _zk_n=null()
      || 'Pozycje zamówień do wytworzenia'
      || 'Pozycje zamówienia %1 do wytworzenia'[exec('record','#to_string',_zk_n)]
      ?},
      'P',,'#zlisty'+$(_zk_n=null()),1,2,,,'U'
   );

:: Pola
   _tab.win_fld(_wer,,'KOD',,,20,,,'Kod produktu'@,,'Indeks materiałowy'@);
   _tab.win_fld(_wer,,'NAZ',,,25,,,'Nazwa produktu'@,,'Nazwa materiału'@);
   _tab.win_fld(_wer,,'IL_ZAM',,,12,4,,'Zamówione'@,,'Zamówiona ilość'@);
   _tab.win_fld(_wer,,'IL_POZ',,,12,4,,'Do realizacji'@,,'Ilość do realizacji'@);
   _tab.win_fld(_wer,,'IL_REZ',,,12,4,,'Rezerwacje'@,,'Ilość zarezerwowana'@);
   _tab.win_fld(_wer,,'IL_WYTW',,,12,4,,'Do wytworzenia'@,,'Ilość do wytworzenia'@);
   _tab.win_fld(_wer,,'IL_ZL',,,12,4,,'Zlecone'@,,'Ilość zlecona'@);
   _tab.win_fld(_wer,,'JM',,,6,,,'jm'@,,'Jednostka miary'@);
   {? _zk_n=null() || _tab.win_fld(_wer,,'SYM',,,,,,'Zamówienie'@,,'Symbol zamówienia'@) ?};
   _tab.win_fld(_wer,,'POZ',,,4,,,'Poz.'@,,'Numer pozycji na zamówieniu'@);
   _tab.win_fld(_wer,,'QPDP',,,-10,,,'Start produkcji'@,,'Planowany termin rozpoczęcia produkcji'@);
   _tab.win_fld(_wer,,'PL_DATA',,,-10,,,'Termin realizacji'@,,'Planowany termin realizacji'@);
   _tab.win_fld(_wer,,'PLAN_ST',,,-6,,,'Plan strategiczny'@,,'Czy zamówienie znajduje się w planie strategicznym? (T/N)'@,2,,"\'T\'","\'N\'");
   _tab.win_fld(_wer,,'PLAN_OP',,,-6,,,'Plan operacyjny'@,,'Czy zamówienie znajduje się w planie operacyjnym? (T/N)'@,2,,"\'T\'","\'N\'");
   _tab.win_fld(_wer,,'POTW_T',,,-6,,,'Technologia'@,,'Czy technologia jest dostępna?(T-tak, N-brak, P-niezatwierdzona lub archiwalna)'@,2,,"\'T\'","\'N\'","\'P\'");

:: Akcje
   {? _tryb=1 | _tryb=4
   || _tab.win_act(_wer,0,'Formuła','Generuj'@@,,'Nowe zlecenie'@,
         "_args_zl:=params_exec('action_zmp_generate','!tte_pzl_dzwe')",,1,
         1,"params_exec('action_generate_bg','!tte_pzl_dzwe')","params_exec('action_generate_ag','!tte_pzl_dzwe')",'G'
      );
      task_attach('TTE_PZL_DZWE')
   |? _tryb=2
   || _tab.win_act(_wer,0,'Formuła','Generuj'@@,,'Nowe zlecenie'@,
         "_args_zl:=params_exec('action_zmpz_generate','!tte_pzl_dzwe')",,1,
         1,"params_exec('action_generate_bg','!tte_pzl_dzwe')","params_exec('action_generate_ag','!tte_pzl_dzwe')",'G'
      );
      task_attach('TTE_PZL_DZWE')
   |? _tryb=3
   || _tab.win_act(_wer,0,'Formuła','Generuj'@@,,'Nowe zlecenie'@,
         "_args_zl:=params_exec('action_zkn_generate','!tte_pzl_dzwe')",,1,
         1,"params_exec('action_generate_bg','!tte_pzl_dzwe')","params_exec('action_generate_ag','!tte_pzl_dzwe')",'G'
      );
      task_attach('TTE_PZL_DZWE')
   ?};
   {? _zk_n<>null()
   || _tab.win_act(_wer,0,'Formuła','Zakończ'@@,,,"sel_exit()",,,,,,'Z');
      _tab.win_act(_wer,1,'Formuła','Zakończ'@@,,,"sel_exit()",,1,,,,'Z')
   ?};
   _tab.win_act(_wer,0,'Formuła','Lista zle&ceń'@@,,'Lista zleceń wygenerowanych do pozycji zamówienia'@,
      "params_exec('zl_do_zmp','!tte_pzl_dzwe')",,,,,,'C');
   _tab.win_act(_wer,0,'Formuła','Su&ma'@@,,'Podsumowanie ilości z zaznaczonych pozycji'@,
      "params_exec('zmp_sum','!tte_pzl_dzwe')",,,1,
      "params_exec('zmp_sum_bg','!tte_pzl_dzwe')","params_exec('zmp_sum_ag','!tte_pzl_dzwe')",'M');
   _tab.win_act(_wer,,'Menu','Fu&nkcje'@@,,'Funkcje dodatkowe'@,,,,,,,'N');
   _tab.win_act(_wer,,'Formuła','Analiza'@@,'#N','Analiza dostępności materiału w czasie'@,
      "params_exec('zmp_analiza_b','!tte_pzl_dzwe')","params_exec('zmp_analiza_a','!tte_pzl_dzwe')",,1,
      "params_exec('zmp_analiza_bg','!tte_pzl_dzwe')","params_exec('zmp_analiza_ag','!tte_pzl_dzwe')",'A');
   _tab.win_act(_wer,0,'Szukaj');
   _tab.win_act(_wer,0,'Kolejność');
   _tab.win_act(_wer,0,'Formuła','Legenda'@@,,,"exec('legenda','color','ZAMPOZ#01')",,,,,,'L');
   _tab.win_act(_wer,,'Rekord',,,,"Color.rekprzed('ZAMPOZ#01#01')");
   _formula:="
      ZK_P.cntx_psh();
      ZK_P.clear();
      {? ZK_P.seek(BIT.sqlint(cur_tab(1,1).REF),)
      || exec('wys_pozy','zamsiw_poz',1)
      ?};
      ZK_P.cntx_pop();
      ~~
   ";
   _tab.win_act(_wer,,'Wyświetl',,,,_formula);

:: Przyciski
   {? _zk_n<>null() || _tab.win_btn(_wer,'text=%1,icon=xwin16.png:23,panel=bottom,align=begin'['Zakończ'@],'menu:Z') ?};

   _formula:="
      {? cur_tab(1,1).ATR<>''
      || 'xwin16.png:50'
      || exec('pusta','#icon')
      ?}
   ";
   _tab.win_fml(_wer,,'POZ',,'ICON_BEFORE',_formula);

   _tab.win_sel(_wer);

   _filter:=exec('get','#params',500220,2);
   {? _tab.f_set(,,'IL_ZAM<>IL_ZL'+{? _filter<>'' || ' and '+_filter || '' ?})
   ||
::    Otwieram bieżącą maskę technologii
      exec('tktl_use','tech_common');

::    Środowisko generatora z pozycji zamówień
      _env_zlisty:=exec('env_zlisty','!tte_pzl_dzwe',_tab);

      params_set('env_zlisty',_env_zlisty);
      {? _tab.select()
      || _result:=1
      |? _tryb=3 & _tab.size()=0
      || _result:=1
      ?}
   ?}
?};
ZL.cntx_pop(); ZGH.cntx_pop(); ZGP.cntx_pop(); ZLIM.cntx_pop();
exec('tktl_cntx_pop','tech_common');
_result


\qpdp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO]
:: OPIS: Odszukuje date min zaplanowana w pozycjach kolejki
::   WE: _a - ZK_P.ref() - ref pozycji zamowienia do sprawdzenia
::   WY: Data MIN
::----------------------------------------------------------------------------------------------------------------------
_zkp:=exec('FindAndGet','#table',ZK_P,_a,,,null());
_result:=date(0,0,0);

PX_OBJ.cntx_psh();
PX_POZ.cntx_psh();

PX_OBJ.index('ZK_P');
PX_OBJ.prefix(ref_name(_zkp),_zkp);
{? PX_OBJ.first()
|| _mainver:=exec('get_mainversion','px_ver');
   PX_POZ.index('TM_VOBJ');
   PX_POZ.prefix(_mainver,PX_OBJ.ref());
   {? PX_POZ.first()
   || _result:=PX_POZ.DATE_MIN
   ?}
?};
PX_POZ.cntx_pop();
PX_OBJ.cntx_pop();
_result


\zl_dolacz_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? przeniesione z pliku zl_head(i zmienione dla potrzeb cichego generowaniani zlecenia niezależnego)
:: OPIS: Dołącza nagłówek zlecenia niezależnego i ustawia status nagłówka i technologii na zakończony
::   WE: _a - rodzaj zlecenia: 'P'rodukcyjne, 'W'arsztatowe
::       [_b] - typ zlecenia: ZTP.ref()
::       _c   - tablica z parametrami dla zlecenia _args_gen:=exec('gen_zlec_a','zl_gen')
::   WY: ZL.ref() / null()
::  OLD: \zl_b_dod/zlecenia.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') || _wp:=_a || FUN.info('Brak parametru _a.'@); return() ?};
{? var_pres('_b')=type_of(null()) || _ztp:=_b || _ztp:=null() ?};
{? var_pres('_c')>100 || _args_gen:=_c || _args_gen:=exec('gen_zlec_a','zl_gen') ?};

_zl_top:=exec('top_level','zl_link',null());

_res:=null();


VAR.A_ZLNAD:=null();
VAR.LEVEL:=0;

_atrmjs:=ATR.MJS;
ATR.MJS:='ZL';
{! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !};

{? ~exec('sprdt','zl_head') || return(_res) ?};

{? _ztp<>null()
|| ~~
|| _ztp:=exec('ztp_select','zl_head',_wp,1)
?};

{? _ztp<>null() || VAR.A_TPZL:=_ztp || return(_res) ?};

VAR.A_TPZL:=_ztp;

{? 1+VAR.A_TPZL().TYP='~'
|| FUN.emsg('Funkcja niedostępna — zastrzeżony typ zlecenia.'@);
   return(0)
?};

{? VAR.A_TPZL().KOD_ZLC=''
|| FUN.emsg('Funkcja niedostępna — typ zlecenia nie ma określonego sposobu numeracji.'@);
   return(0)
?};

{? VAR.A_TPZL().WP='P' & VAR.A_TPZL().KOD_ZLP=''
|| FUN.emsg('Funkcja niedostępna — typ zlecenia nie ma określonego sposobu numeracji podzleceń.'@);
   return(0)
?};

exec('tktl_use','tech_common');

POM.TYPDOK:=ZTP.KOD_ZLC;
POM.TAB:='ZL';

{? ST.AR=0
|| ST.AR:=date()~1
?};

exec('add_grnr','numery','ZLC');
exec('add_grnr','numery','ZLP');

_sprawdz:=1;
_a_stan:=VAR.A_STAN;
_a_hid:=VAR.A_HIDDEN;
_ok:=1; _add_wyd:=0;

_red:=exec('mk_edit','zl_head',_wp,'N');
exec('add_btn','zl_head',_red,1,1);
exec('set_dict','zl_head');
ZL.win_edit(_red);

ZL.cntx_psh();
ZL.prefix();
_new_zl:=0;
_old_unrzl:=VAR.A_UNRZL;

ZL.blank(1); ZL.blank();
ZL.RODZAJ:='N';
ZL.TREE_TYP:='N';

:: UWAGA - ODDZIAŁ PRZYPISANY NA SZTYWNO DLA POTRZEB NUCO
{? ZL.ODDZ=''
|| ZL.ODDZ:='w'
?};

VAR.A_UNRZL:=_old_unrzl;

ZL.MG:={? ZL.ODDZ=ZTP.MG().ODDZ || ZTP.MG || null() ?};
{? ZL.MG=null() || ZL.MG:=exec('ustmwyd','zl_common',ZL.ODDZ,ZL.JORG,0) ?};
{? ZL.ODDZ<>ZL.MG().ODDZ || ZL.MG:=null() ?};
ZL.LEVEL:=VAR.LEVEL;
ZL.TREE:=0;
ZL.NRPZL:=0;
ZL.NRNZL:=exec('FindAndGet','#table',ZL,_zl_top,,"UNRZL",0);

{? ZL.TREE || ZL.NODE:=exec('node','zl_head') ?};

:: PROJEKTY dla zlecenia złożonego
{? _args_gen.PROJEKTY<>null()
|| ZL.PROJEKTY:=_args_gen.PROJEKTY
?};

exec('ust_znac','zl_head');
exec('set_rodz_tex','zl_head');
ZL.SYM:='~'+$ZL.tm_stamp();
{? _ok & ZL.add() & exec('zl_lock','zl_common',,'N')
|| ZL.memo_set('','OPIS_DOD');
   ZL.memo_put(,'OPIS_DOD');
   _new_zl:=#ZL.ref();
   {? ZL.TREE=0
   || ZL.NODE:=exec('node','zl_head')
   ?};
   ZL.put();
   exec('slo_m_ok','material','T',0,,'W');
   exec('filter','material','WP');
   MG.f_clear();

   exec('ustaw_pola','zl_head');

   exec('openmask','zl_common',ZL.ref());
   ZL.get();
   ZL.SYM:='';

  _buffer:=exec('buffer','zl_head'); _buffer.get();
   _args:=obj_new('buffer','sprawdz','edit'); _args.buffer:=_buffer; _args.sprawdz:=_sprawdz; _args.edit:=1;
   params_set('args',_args);

:: ZLECENIE PRODUKCYJNE
   {? VAR.FILTER='T' || ZL.KTM:=FILTER.KTM ?};
   _valid:="exec('valid_add','zl_head','P')";
   exec('efld_opt','zl_head',_red);
   menu_txt(,'Dołącz');
   _args.buffer.STAT_N:=ZL.STAT_N;

   {? _args_gen.ZTP<>null() & _args_gen.DIALOG_WOL_NR=0
   || ZL.KH:={? _args_gen.KH<>'' || exec('FindAndGet','#table',KH,_args_gen.KH) || null() ?};
      ZL.PL_DATA:=_args_gen.PL_DATA;
      ZL.PL_TIME:=_args_gen.PL_TIME;
      ZL.PL_DIR:=_args_gen.PL_DIR;
      ZL.PL_FORCE:=_args_gen.PL_FORCE;
      ZL.DTR:=_args_gen.DTR;
      ZL.MG:=Plugin.run('ZL_MG_PODZLEC_001',ZL.ODDZ,exec('FindAndGet','#table',M,_args_gen.KTM),ZL.JORG);
      ZL.NR:=0;
      ZL.NR:=exec('numer_new','numery','PACZKA');
      exec('znak','numery','ZL',1);
      ZL.OPIS:=_args_gen.OPIS;
      ZL.memo_set(_args_gen.OPIS_DOD,'OPIS_DOD');
      _ok:=1
   || {? ZL.edit(_valid) || _ok:=1 || _ok:=0 ?}
   ?};
   {? _ok
   || ZL.IL0:=ZL.IL;
      ZL.STAT_N:='T';
      ZL.STAT_T:='T';
      exec('set_rodz_tex','zl_head');
      ZL.SCEAN:=exec('blzl_sce','kody_kresk');
      ZL.ZLEAN:=exec('blzl2sce','kody_kresk');
::       Dołączenie cechy dostawy
      {? (1+ZL.MG().TYP)='D' & ATR.FLAG_ED & ATR.FLAG<>1
      || exec('akcepatr','mat_atr',0,1)
      ?};
      {? ZL.put()
      || ZL.memo_put(,'OPIS_DOD');
         {? ZL.SCEAN<>'' & ZL.KTM().IDMOB='Z' || exec('mkodkadd','kody_kresk',ZL.KTM,ZL.SCEAN,$ZL.ref()) ?};
         VAR.A_ZLEC:=ZL.ref();
         {? ZL.NRNZL=0
         || {? ZL.f_active()=1
            || ZL.f_add()
            |? ZL.f_active()>=2
            || ZL.f_rfresh()
            ?}
         ?};

         exec('add_zleczam','zl_gen',ZL.ref(),ZL.IL);
:: TODO: ZLECENIA_ZŁOŻONE
::            exec('ae_join','zlec4');
         exec('zl2obj','px_obj');

         exec('add_zwar_pos','zl_common','_n',0);
         exec('zl_unlock','zl_common',,'N');
         _res:=ZL.ref()
      ||
         oldnumer:=1;
         numer:=ZL.NR;
         exec('nr_old','numery');
         exec('zl_unlock','zl_common',,'N');
         ZL.del();
         _res:=null()
      ?}
   ||
      oldnumer:=1;
      numer:=ZL.NR;
      exec('nr_old','numery');
      exec('zl_unlock','zl_common',,'N');
      ZL.del();
      _res:=null()
   ?};

:: Przywracam tytuł i akcje w słowniku materiałów
   exec('filter_clear','material')
?};
ZL.cntx_pop();
{? _res & _new_zl || exec('findadzl','zl_head',_new_zl) ?};
VAR.A_STAN:=_a_stan;
VAR.A_HIDDEN:=_a_hid;
_res


\zlecenie_proces
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [merit 20xx]
:: OPIS: Uruchamia proces generowwania zleceń poprzez uruchomienie sygnału.
::   WE: _a - PX_OBJ.ref dla którego ma być uruchomione zlecenie złożone ze podzleceniami niezależnymi.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('ZK_P','ZK_N');
_args.ZK_P:=null();
_args.ZK_N:=null();
_mainver:=exec('get_mainversion','px_ver');
_px_obj_ref:=_a;

exec('FindAndGet','#table',PX_OBJ,_px_obj_ref,,"_b.ZK_P:=PX_OBJ.ZK_P;_b.ZK_N:=PX_OBJ.ZK_N;1",0,_args);

:: Sprawdzenie czy można utworzyć zlecenie w danym roku
{? ~exec('sprdt','zl_head') || return() ?};

:: Sprawdzenie czy pozycja zamówienia jest w planie (funkcja w kontekście tabeli PX_OBJ)
{?  _args.ZK_P=null() & _args.ZK_N=null()
|| FUN.error('Generowanie zlecenia możliwe wyłącznie dla pozycji lub całości zamówienia sprzedaży.');
   return()
:: Planowanie pozycji zamówienia
|?  _args.ZK_P<>null()
|| _px_grp:=sql('select PX_CONN.PX_GRP from @PX_CONN join PX_OBJ where PX_OBJ.ZK_P=\':_a\'',$_args.ZK_P).PX_GRP;
   _tab:=sql('select PX_OBJ.ZK_P
               from @PX_CONN join PX_OBJ using (PX_CONN.PX_OBJ,PX_OBJ.REFERENCE)
              where PX_CONN.PX_GRP=\':_a\' and PX_CONN.PX_OBJ is not null
           order by ZK_P',_px_grp);
   {? _tab.size()>1
   || _opcja:=FUN.choice('Pozycja zamówienia występuje w planie strategicznym jako element grupy.\n'+
                    'Czy powołać zlecenie dla wszystkich elementów grupy?',1, 'Zbiorczo dla grupy','Tylko ta pozycja zamówienia');
      {? _opcja=1
      || _tab.first();
         _zkp_ref:=_tab.ZK_P;
         {!
         |? exec('add','#bulk',ZK_P,'GEN_ZLEC',_zkp_ref+_tab.ZK_P);
            _tab.next()
         !};
         _args.ZK_P:=exec('FindAndGet','#table',ZK_P,_zkp_ref)
      |? _opcja<>2
      || return()
      ?}
   ?};
:: Sprawdzenie czy zamówienie ma już wygenerowane zlecenia i czy można jeszcze coś wygenerować
   ZLZAM.cntx_psh();
   ZLZAM.index('ZMZL');
   ZLZAM.prefix($_args.ZK_P);
   _IL_ZL:=0;
   _IL_WYTW:=exec('FindAndGet','#table',ZK_P,_args.ZK_P,,"ZK_P.ILP-ZK_P.ILRB",0);
   {? ZLZAM.first()
   || {!
      |? _IL_ZL+=ZLZAM.ILZL;
         REZ.index('ZLZAM');
         REZ.prefix(ZLZAM.ref(),'B');
         {? REZ.first()
         || {!
            |? _IL_WYTW+=REZ.ILR;
               REZ.next()
            !}
         ?};
         ZLZAM.next()
      !}
   ?};
   ZLZAM.cntx_pop();
   {? _IL_WYTW-_IL_ZL<=0
   || FUN.error('Dla pozycji zamówienia wygenerowano już zlecenia na całą zamawianą ilość wyrobu.\n'+
                'Zlecenia nie będą generowane !');
      return()
   ?};

:: Sprawdzam czy pozycja jest w planie strategicznym
   {? exec('obj_inside_ver','px_obj',_px_obj_ref,_mainver)=0
   || FUN.error('Pozycja %1 zamówienia, nie znajduje się w kolejce planu strategicznego.\n\nZlecenia nie będą generowane.'@[$ZK_P.POZ]);
         return()
   ?};

:: Sprawdzenie kompletności i występowanie fantomów w składzie surowców karty
   {? exec('fantom_zk_p','qtpp',_args.ZK_P)=0
   || {? FUN.ask('Czy wyświetlić strukturę zamawianego produktu ?')
      || _ktm:=exec('FindAndGet','#table',ZK_P,_args.ZK_P,,"M",null());
         {? _ktm<>null()
         || _dtktl:=exec('dflt_ktl','tech_prod',_ktm);
            {? _dtktl<>null()
            || VAR.A_KTL:=_dtktl;
               exec('sur_all','tech_mater')
            || FUN.error('Brak domyślnej technologii dla pozycji zamówienia')
            ?}
         || FUN.error('Nie odnaleziono KTM w kartotece materiałowej')
         ?}
      ?};
      return()
   ?};
:: Sprawdzenie czy nie uruchomiono już zadania TODO dla tej pozycji zamówienia
::   {? exec('record_keyrefed','#b__box',PX_OBJ.ZK_P().uidref(),'ZWS_MAN_UALL')
::  || FUN.error('Dla pozycji zamówienia wygenerowano już dyspozycję powołania zlecenia.\n'+
::                'Zlecenie nie będzie generowane !');
::     return()
::   ?};

   _par:=obj_new(1);
   _par[1]:=obj_new('PARAMETR','VALUE');
   _par[1].PARAMETR:='POZ_ZAMOWIENIA';
   _par[1].VALUE:=_args.ZK_P;
   exec('force_signal','#b__box','ZAM_PZL_ZAM_ZLN',,_par);
   FUN.info('Uruchomiono proces generowania zleceń dla wyrobu: '+PX_OBJ.M().KTM+'\n'+
            'Proszę zaczekać do jego zakończenia, przed wprowadzaniem zmian w wygenerowanych zleceniach !')
:: Planowanie całego zamówienia
|? _args.ZK_N<>null()
|| _ok:=1;
   Cntx.psh(ZK_P,ZK_N);
   ZK_P.use('zkpoz'+((8+$_args.ZK_N)+3));
   ZK_P.index('ZAM');
   Cntx.clr(ZK_P);
   ZK_P.prefix(_args.ZK_N);
   {? ZK_P.first()
   || {!
      |?
:: Sprawdzenie czy zamówienie ma już wygenerowane zlecenia i czy można jeszcze coś wygenerować
         {? _ok
         || ZLZAM.cntx_psh();
            ZLZAM.index('ZMZL');
            ZLZAM.prefix($ZK_P.ref);
            _IL_ZL:=0;
            _IL_WYTW:=ZK_P.ILP-ZK_P.ILRB;
            {? ZLZAM.first()
            || {!
               |? _IL_ZL+=ZLZAM.ILZL;
                  REZ.index('ZLZAM');
                  REZ.prefix(ZLZAM.ref(),'B');
                  {? REZ.first()
                  || {!
                     |? _IL_WYTW+=REZ.ILR;
                        REZ.next()
                     !}
                  ?};
                  ZLZAM.next()
               !}
            ?};
            ZLZAM.cntx_pop();
            {? _IL_WYTW-_IL_ZL<=0
            || FUN.error('Dla pozycji zamówienia wygenerowano już zlecenia na całą zamawianą ilość wyrobu.\n\n'+
                         'Zlecenia nie będą generowane !');
               _ok:=0
            ?}
         ?};
:: Sprawdzam czy pozycja jest w planie strategicznym
         _px_obj:=sql('select PX_OBJ.REFERENCE as REF from PX_OBJ where PX_OBJ.ZK_P=:_a',ZK_P.ref).REF;
         {? _px_obj<>''
         || _px_obj_ref:=exec('FindAndGet','#table',PX_OBJ,_px_obj,,"PX_OBJ.ref",null);
            {? _px_obj_ref=null | exec('obj_inside_ver','px_obj',_px_obj_ref,_mainver)=0
            || FUN.error('Pozycja %1 zamówienia, nie znajduje się w kolejce planu strategicznego.\n\nZlecenia nie będą generowane.'@[$ZK_P.POZ]);
               _ok:=0
            ?}
         || _ok:=0
         ?};

:: Sprawdzenie kompletności i występowanie fantomów w składzie surowców karty
         {? _ok & exec('fantom_zk_p','qtpp',ZK_P.ref())=0
         || _ok:=0
         ?};

:: Sprawdzenie czy nie uruchomiono już zadania TODO dla tej pozycji zamówienia
::         {? _ok & exec('record_keyrefed','#b__box',ZK_P.uidref(),'ZWS_MAN_UALL')
::         || FUN.error('Dla pozycji zamówienia wygenerowano już dyspozycję powołania zlecenia.\n\n'+
::                      'Zlecenie nie będzie generowane !');
::           _ok:=0
::         ?};
         ZK_P.next() & _ok=1
      !}
   ?};
   Cntx.pop(ZK_P,ZK_N);
   {? _ok
   ||
      _par:=obj_new(1);
      _par[1]:=obj_new('PARAMETR','VALUE');
      _par[1].PARAMETR:='ZK_N';
      _par[1].VALUE:=_args.ZK_N;
      exec('force_signal','#b__box','NUCO_PX_OBJ_ZK_N',,_par);
      FUN.info('Uruchomiono proces generowania zleceń dla pozycji zamówiemnia '+PX_OBJ.ZK_N().SYM+'\n'+
               'Proszę zaczekać do jego zakończenia, przed wprowadzaniem zmian w wygenerowanych zleceniach !')
   || FUN.error('Nie udało się przygotować zadania do generowania zleceń.\n\n'+
                'Proszę uruchomić poszczególne pozycje zamówienia!')
   ?}
?};
~~


\edit_zparn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.42 NUCO]
:: OPIS: Edycja wartości w polach QTW i QPD tabeli ZPARN.
:: UWAGA: - formuła nie jest uruchamiana - edycja w STD
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ed:=ZPARN.mk_edit('Edycja wartości'@,,'zparnqedit');
ZPARN.win_esep(_ed,'Dane'@);
ZPARN.win_efld(_ed,,'QTW',,,10,,,'Termin ważności'@,,'Termin ważności partii'@);
ZPARN.win_efld(_ed,,'QPD',,,30,,,'Numer batch code'@,,'Nr partii wymagany przez odbiorcę'@);
:: ZPARN.efld_opt(_ed,'mark=1',,'QTW');
exec('ok_esc','#window',ZPARN,_ed);
ZPARN.win_edit(_ed);
{? ZPARN.edit(
      "  {? ZPARN.QTW<>date(0,0,0) & ZPARN.QTW<=PROD_REJ.STARTD
         || FUN.emsg('Data w polu \"Termin ważności\" nie może być wcześniejsza niż %1'@[$(date()+1)]);
            'QTW'
         || 1
         ?}
      "
   )
|| ZPARN.put(1)
?};
~~


\pop_zb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO_MOM]
:: OPIS: Okno z mozliwoscia zmiany danych przed wydrukiem
::----------------------------------------------------------------------------------------------------------------------
{? tabp.sel_size=0
|| {? tabp.edit
   || {? tabp.IL>=0
      || tabp.put
      ?}
   ?}
|| undefine();
   {? define('IL',0,'Dla zaznaczonych rekordów');
      def_edit(,'Podaj ilość zamawianą')
   ||
      tabp.cntx_psh();
      {? DEFINE.IL>=0
      || {? tabp.first
         || {!
            |? {? tabp.sel_mark=1
               || tabp.IL:=DEFINE.IL;
                  tabp.put;
                  tabp.sel_del
               ?};
               tabp.next
            !}
         ?}
      ?};
      tabp.cntx_pop()
   ?}
?}


\czy_wyst_rwz_kj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Formuła dla czynnośći ręcznej w procesie rejestracji raportu produkcyjnego
::       Pytanie czy wystawić dokument pobrania próbek, a jeśli tak to na jaką ilość.
::   WE: parametr czynnośći p1 - ND wskazanie na raport produkcyjny
::   WY:
::        0 - rezygnacja z obsługi - trafi na TODO
::        1 - ok - kontynuacja procesu
::        wyjście w parametrach wjściowych czynnośći out.OUT
::        0 - nie tworzymy dokumetu RWZ, >0 - tworzymy RWZ na ilość zapisaną w tabeli qtab_rp
::MOD: SITEK dodanie wyboru uwag ze slownika pod F3
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_out:=params_get().out;
VAR_DEL.delete('qtab_rp','qres');

qres:=0;
{? var_pres('p01',_in)<>type_of(~~)
|| _nd:=_in.p01;
::   Ilość na raporcie produkcyjnym
   qtab_rp:=sql('select DK.REFERENCE as DK_REF,
                    ND.REFERENCE as ND_REF,
                    DK.IL as IL_RP,
                    DK_C.WAR01 as PARTIA,
                    M.KTM,
                    M.N,
                    JM.KOD as JM,
                    DK.IL as ILNARWZ,
                    DK.IL as IL_RWZ,
                    ZL.SYM as ZL_SYM,
                    ZGH.NRPRZ as NRPRZ,
                    DK.UWAGI
               from @DK join @ND
                        join @DK_C using(DK.DK_C,DK_C.REFERENCE)
                        join M using(DK.M, M.REFERENCE)
                        join @ZL using(DK.ZL, ZL.REFERENCE)
                        join @ZGP using(DK.ZGP, ZGP.REFERENCE)
                        join @ZGH using(ZGP.NRPRZ, ZGH.REFERENCE)
                        join JM using(DK.JM, JM.REFERENCE)
              where DK.N=:_a and DK.Z=\'T\'', _nd);
   {? qtab_rp.first()
   || {!
      |? _il_na_rwz:=sql('select DK.PRDK as DK_REF,
                                 sum(DK.IL) as ILNARWZ
                            from @DK join @ND
                                     join TYPYDOK using (ND.TYP, TYPYDOK.REFERENCE)
                           where DK.PRDK=\':_a\' and TYPYDOK.T=\'RWZ\'
                        group by DK.PRDK', qtab_rp.DK_REF).ILNARWZ;
        qtab_rp.ILNARWZ:=_il_na_rwz;
        qtab_rp.IL_RWZ:=0;
        qtab_rp.put();
        qtab_rp.next()
      !};
      _wer:=qtab_rp.mk_sel('Lista pozycji zaraportowanych dla wybranego przewodnika'@,,,'#rejestrwzprod',1,1,,,'U');
      qtab_rp.win_fld(_wer,,'NRPRZ',,,20,,1,'Przewodnik'@);
      qtab_rp.win_fld(_wer,,'KTM',,,20,,1,'Indeks'@);
      qtab_rp.win_fld(_wer,,'N',,,30,,1,'Nazwa'@);
      qtab_rp.win_fld(_wer,,'IL_RP',,,-15,ST.DOKL,1,'Ilość RP'@);
      qtab_rp.win_fld(_wer,,'ILNARWZ',,,-15,ST.DOKL,1,'Ilość RWZ'@);
      qtab_rp.win_fld(_wer,,'PARTIA',,,30,,1,'Partia'@);
      qtab_rp.win_fld(_wer,,'IL_RWZ',,,-15,ST.DOKL,0,'Ilość próbek'@);
      qtab_rp.win_fld(_wer,,'JM',,,5,,1,'jm'@);
      qtab_rp.win_fld(_wer,,'UWAGI',,,30,,0,'Opis'@);
      _fb:="{? (qtab_rp.IL_RP-qtab_rp.ILNARWZ)<qtab_rp.IL_RWZ
            || FUN.error('Zbyt duża ilość probek !!!');
               0
            || 1
            ?}";
      qtab_rp.fld_fml('IL_RWZ','AFTER_EDIT',_fb);
::MOD: SITEK dodanie wyboru uwag ze slownika pod F3
      _fb:="SLO.win_sel('EDKON');
            SLO.index('SL');
            _ref:=exec('FindInSet','#table','SLU','NAZ','POLE_O_W_ND');
            SLO.prefix(_ref);
            {? SLO.select()
             || qtab_rp.UWAGI:=SLO.TR
             || 0
            ?}";
      qtab_rp.fld_fml('UWAGI','F3',_fb);
      qtab_rp.win_act(_wer,,'Popraw',,,,,,1);
      _fb:="{? sql('select sum(:_a.IL_RWZ) as IL from :_a',qtab_rp).IL>0
            || sel_exit();qres:=1
            || FUN.error('Nie wprowadzono ilości pobranych próbek !!!');
               0
            ?}";
      qtab_rp.win_act(_wer,,'Formuła','&Generuj'@@,,,_fb,,,,,,'G');
      _fb:="{? FUN.ask('Rezygnujesz z utworzenia dokumentu pobrania próbek.\n'+
                       'Czy mam przerwać proces pobrania próbek?')
            || sel_exit()
            || 0
            ?}";
      qtab_rp.win_act(_wer,,'Formuła','&Anuluj'@@,,,_fb,,,,,,'A');
      qtab_rp.win_sel(_wer);
      _res:=qtab_rp.select()
   || FUN.info('Brak zaraportowanej ilości, wystawienie RWZ nie jest możliwe')
   ?}
|| FUN.error('Brak lub błędny parametr dla czynności tworzenia RWZ (pobrania próbek KJ)')
?};

_res:=qres;

VAR_DEL.delete('qres');
_res


\zmiana_il_rwz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Ziana ilości dla skopiowanego dokumentu RWZ (formuła dla czynności ręcznej w procesie pobierania próbek)
::   WE: p01 - ND.ref - dokument skopiowany
::             UWAGA wymagane jest istnienie tabeli qtab_rp zawierającej dane związne z pobranymi próbkami
::                   tabela tworzona w exec('czy_wyst_rwz_kj','qprodukcja')
::   WY: 1 - OK, 0 - coś poszło nie tak
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_out:=params_get().out;
_res:=1;
_opis:='';

:: debug();
{? var_pres('p01',_in)<>type_of(~~)
|| _nd:=_in.p01;
   {? var_pres('qtab_rp')<0
   || FUN.error('Brak tabeli z informacjami o próbkach dla KJ');
      _res:=-1
   || qtab_rp.first();
      {!
      |? _ref_dk:=sql('select DK.REFERENCE as DK_REF from @DK where DK.N=:_a and DK.PRDK=\':_b\'', _nd, qtab_rp.DK_REF).DK_REF;
         {? _ref_dk<>''
         || exec('FindAndGet','#table',DK,_ref_dk,,
                  "{? qtab_rp.IL_RWZ>0
                   || DK.IL:=qtab_rp.IL_RWZ;
                      DK.WAR:=(DK.IL*DK.C)$2;
                      DK.IL2:=DK.IL*DK.WS2;
                      DK.UWAGI:=qtab_rp.UWAGI;
                      DK.put();
                      DK_L.cntx_psh();
                      DK_L.index('DK');
                      DK_L.prefix(DK.ref(),null);
                      {? DK_L.first()
                      || DK_L.IL:=DK.IL; DK_L.IL2:=DK.IL2; DK_L.put()
                      ?};
                      DK_L.cntx_pop()
                   || params_exec('usun_dk','magdok_poz',1)
                   ?}",0)
         || FUN.error('Nie odnaleziono pozycji RWZ do uaktualnienia ilości');
            _res:=-1
         ?};
         _opis+={? +qtab_rp.UWAGI>0 || qtab_rp.UWAGI+'; ' || '' ?};
         qtab_rp.next()
      !};
      {? +_opis>0
      || exec('FindAndGet','#table',ND,_nd,,$('ND.O:=\''+_opis+'\'; ND.put'),0)
      ?}
   ?}
||  FUN.error('Brak lub błędny parametr dla czynności tworzenia RWZ (pobrania próbek KJ)');
   _res:=-1
?};
_res


\rp_rwz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja uruchamia proces wydania próbek na RWZ bezpośrednio z nagłówka raportu produkcyjnego
::   WE: Funkcja pracuje tylko jeśli aktualna tabela to ND i aktualny dokument to RP
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? 2-!cur_tab()='ND' & ND.TYP().T='RP'
|| _par:=obj_new(1);
   _par[1]:=obj_new('PARAMETR','VALUE');
   _par[1].PARAMETR:='ND';
   _par[1].VALUE:=ND.ref();
   exec('force_signal','#b__box','NUCO_RPO_RWZ',,_par)
|| FUN.emsg('Funkcja możliwa do wykonania tylko dla dokumentu RP')
?};
~~


\zl_napraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Operacja naprawcza do zlecenia
::   WE: _a - ZL.uidref - rekord kluczowy dla którego zostały wygenerowane operacje naprawcze.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::_par:=obj_new(1);
::_par[1]:=obj_new('PARAMETR','VALUE');
::_par[1].PARAMETR:='ZL';
::_par[1].VALUE:=ZL.ref();
::exec('force_signal','#b__box','NUCO_RPO_NAPR',,_par);

_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TTE_PZL_DGBR';
_args.UIDREF:=_a;
exec('mp_run','#b__box',_args);
~~


\wycena_cennik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja do wyceny wyrobu gotowego na podstawie cennika.
::   WE: _a - M.ref - ref materiału do wycen
::   WY: 0 - nie odnaleziono lub błąd wyceny (np. podwójna wycena) >0 - cena z cennika
::----------------------------------------------------------------------------------------------------------------------
_m_ref:=_a;
_res:=0;
{? _m_ref<>null()
|| _tab:=sql('select TAP.CEN as CENA
             from @TAP join TAR using(TAP.TAR,TAR.REFERENCE)
            where TAR.ODDZ=\'w\' and TAR.SD=\'D\' and TAP.M=:_a
                  and (TAP.OD<=to_date(:_b) and (TAP.DO is null or TAP.DO>=to_date(:_b)))
          ', _m_ref, date());
   {? _tab.first()
   || {? _tab.size()=1
      || _res:=_tab.CENA
      || _res=0
      ?}
   || _res:=0
   ?}
?};

_res


\prac_bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [21.14]
:: OPIS: Zmiana sposobu wykonania czynności z BRYGADY na PRACOWNIKA lub PRACOWNIKA na BRYGADĘ (kontrola czy TPZ)
::   WE:  Wykonanie w kontekscie bazy PROD_REJ
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_operacja_grupowa:=PROD_REJ.sel_size()>0;
_tpz:=exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,"ZGP.TPZ",'');
_sposob:=exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,"ZGP.BRYG", 'N');

{? _tpz='T'
|| {? ~_operacja_grupowa
   || FUN.info('Dla operacji typu TPZ nie mozna zmienić sposobu wykonywania.')
   ?};
   return()
|? PROD_REJ.BRYG='T'
|| {? ~_operacja_grupowa
   || FUN.info('Do operacji przypisano brygadę, zmiana sposobu wykonania nie jest możliwa.')
   ?};
   return()
|? PROD_REJ.PRAC='T'
|| {? ~_operacja_grupowa
   || FUN.info('Do operacji przypisano pracownika, zmiana sposobu wykonania nie jest możliwa.')
   ?};
   return()
|? PROD_REJ.START<>'N' | PROD_REJ.A<>'T'
|| {? ~_operacja_grupowa
   || FUN.info('Operacja była jest bądź była już wykonywana, zmiana sposobu wykonania nie jest możliwa.')
   ?};
   return()
|? _tpz='N'
|| {? _sposob='N'
   || {? _operacja_grupowa | FUN.ask('Czy zmienić sposób wykonania operacji z PRACOWNIKA na BRYGADĘ ?')
      || exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,"ZGP.BRYG:='T';ZGP.put()",0)
      ?}
   || {? _operacja_grupowa | FUN.ask('Czy zmienić sposób wykonania operacji z BRYGADY na PRACOWNIKA ?')
      || exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,"ZGP.BRYG:='N';ZGP.put()",0)
      ?}
   ?}
|| {? ~_operacja_grupowa
   || FUN.info('Nie można określić typu operacji - modyfikacja nie jest możliwa.')
   ?};
   return()
?}


\dwykzgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [21.14]
:: OPIS: Drukowanie kartek produkcyjnych w obszarze wykonań
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('rep_exec','#b_report','TTE_PZL_XXXX','wyk_zgp*','Wydruki przewodników',1);
~~


\akc2kj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Wywołanie procesu informującego wydział KJ o zarejestrowaniu dokumentu przychodowego do celów pobrania próbek (wykluczenie magazynu MAP)
::   WE: Pracuje w kontekście nagłówka dokumentu magazynowego
::   WY: 1 - zawsze - OK
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new(1);
_par[1]:=obj_new('PARAMETR','VALUE');
_par[1].PARAMETR:='ND';
_par[1].VALUE:=ND.ref();
{? exec('FindAndGet','#table',ND,_par[1].VALUE,,"ND.TYP().Z='T'&ND.TYP().P='T'&ND.MAG().SYM<>'MAP' ",0)
||
exec('force_signal','#b__box','NUCO_ZKM_PRY_KJ',,_par)
?};
1


\analiza_partii
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Przygotowuje tabelę dla potrzeb analizy surowcowej partii wyrobu
::   WE: _a - $ZPARN.ref
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__tab_sur','__ref_prod');
:: Zapis związany z wyrobem - informacje podstawowe dokumenty przyjęcia/zwrotu
_tab_rp:=sql('select
                    ZPARN.SYM SYM_PAR,
                    ND.SYM SYM_DOK,
                    DK.P POZ_DOK,
                    DK.PLUS,
                    ND.D DATA_DOK,
                    M.KTM,
                    M.N,
                    DK.SCEAN,
                    DK_C.ZPARN,
                    ZPARN.SYM SYM_PARS,
                    DK_C.WAR01 W01_PART,
                    DK_C.WAR02 W02_PD,
                    DK.TW,
                    JM.KOD JM,
                    DK.IL,
                    \'00-00-00-00-00-00-00-00-00-00\' as POZYCJA,
                    \'00\' P1,
                    \'00\' P2,
                    \'00\' P3,
                    \'00\' P4,
                    \'00\' P5,
                    \'00\' P6,
                    \'00\' P7,
                    \'00\' P8,
                    \'00\' P9,
                    \'00\' P10,
                    DK.WF as WSP,
                    DK.IL as IL2,
                    ZPARN.REFERENCE as ZPARN_REF
               from @DK
                    join DK_C
                    join @ND
                    join M using(DK.M,M.REFERENCE)
                    join JM using(DK.JM,JM.REFERENCE)
                    join ZPARN using(DK_C.ZPARN, ZPARN.REFERENCE)
              where DK_C.ZPARN=\':_a\' and DK.ZL is not null',
                    _a);
:: Zapisy dotyczące rozliczeia surowców (poziom I)
__tab_sur:=sql('select
                    cast(null as TREE_REF_TYPE) TREE_REF,
                    ZPARN.SYM SYM_PAR,
                    ND.SYM SYM_DOK,
                    DK.P POZ_DOK,
                    DK.PLUS,
                    ND.D DATA_DOK,
                    M.KTM,
                    M.N,
                    DK.SCEAN,
                    DK_C.ZPARN,
                    ZPARN_S.SYM SYM_PARS,
                    DK_C.WAR01 W01_PART,
                    DK_C.WAR02 W02_PD,
                    DK.TW,
                    JM.KOD JM,
                    ZPARS.IL,
                    \'01-00-00-00-00-00-00-00-00-00\' as POZYCJA,
                    \'01\' P1,
                    \'00\' P2,
                    \'00\' P3,
                    \'00\' P4,
                    \'00\' P5,
                    \'00\' P6,
                    \'00\' P7,
                    \'00\' P8,
                    \'00\' P9,
                    \'00\' P10,
                    DK.WF as WSP,
                    DK.IL as IL2,
                    ZPARN.REFERENCE as ZPARN_REF
       from @ZPARS
            join ZPARN using(ZPARS.PARTIA,ZPARN.REFERENCE)
            join M using(ZPARS.KTM,M.REFERENCE)
            join @DK using(ZPARS.SQLDOK,DK.REFERENCE)
            join JM using(DK.JM,JM.REFERENCE)
            join DK_C using(DK.DK_C,DK_C.REFERENCE)
            left join ZPARN as ZPARN_S using(DK_C.ZPARN,ZPARN_S.REFERENCE)
            join @ND
      where ZPARS.PARTIA=\':_a\'
      order by TREE_REF, SYM_PAR
          ',_a,1);

:: Nadanie unikatowych numerów na poziomie I
{? __tab_sur.first()
|| _i:=1;
   {!|? __tab_sur.POZYCJA:=form(_i,-2)+(2-__tab_sur.POZYCJA);
         __tab_sur.put; _i+=1;
         __tab_sur.next()
   !}
?};

:: q_sel(__tab_sur);

:: Dodanie informacji do tabeli __tab_sur o produkcie który sprawdzamy
{? _tab_rp.first()
|| {!
   |? __tab_sur.TREE_REF:=0;
      __tab_sur.SYM_PAR:=_tab_rp.SYM_PAR;
      __tab_sur.SYM_DOK:=_tab_rp.SYM_DOK;
      __tab_sur.POZ_DOK:=_tab_rp.POZ_DOK;
      __tab_sur.PLUS:=_tab_rp.PLUS;
      __tab_sur.DATA_DOK:=_tab_rp.DATA_DOK;
      __tab_sur.KTM:=_tab_rp.KTM;
      __tab_sur.N:=_tab_rp.N;
      __tab_sur.SCEAN:=_tab_rp.SCEAN;
      __tab_sur.ZPARN:='';
      __tab_sur.SYM_PARS:=_tab_rp.SYM_PARS;
      __tab_sur.W01_PART:=_tab_rp.W01_PART;
      __tab_sur.W02_PD:=_tab_rp.W02_PD;
      __tab_sur.TW:=_tab_rp.TW;
      __tab_sur.JM:=_tab_rp.JM;
      __tab_sur.IL:=_tab_rp.IL;
      __tab_sur.WSP:=1;
      __tab_sur.IL2:=_tab_rp.IL;
      __tab_sur.POZYCJA:=_tab_rp.POZYCJA;
      __tab_sur.add();
      _tab_rp.next()
   !}
?};
__ref_prod:=__tab_sur.ref();

__tab_sur.for_each("{? __tab_sur.ref()<>__ref_prod & __tab_sur.POZYCJA<>'00-00-00-00-00-00-00-00-00-00'|| __tab_sur.TREE_REF:=__ref_prod; __tab_sur.put ?}");

:: Dodanie zapisów w przypadku występowania półproduktów
_tab_sur:=sql('select :_a.*,:_a.REFERENCE as REF_SUR from :_a where :_a.ZPARN<>\'\'',__tab_sur);
{? _tab_sur.first()
|| {!
   |? __tab_sur.seek(_tab_sur.REF_SUR);
      {? _tab_sur.JM<>'kg'
      || _tab_ref:=sql('select ZPARN.REFERENCE as REF, ZPARN.IL as SUM_IL from
                        @ZPARN where SYM=\':_a\'',_tab_sur.SYM_PARS)
      || _tab_ref:=sql('SELECT sum(ZPARS.IL) as SUM_IL FROM
                        @ZPARS JOIN ZPARN USING(ZPARS.PARTIA,ZPARN.REFERENCE)
                        WHERE ZPARN.SYM=\':_a\' group by ZPARS.PARTIA',
                        _tab_sur.SYM_PARS)
      ?};
      {? _tab_ref.first()
      || {? _tab_sur.JM<>'kg'
         || _ref_zparn:=_tab_ref.REF;
            _ref:=exec('FindAndGet','#table','ZPARN',_ref_zparn,,"ref",null);
            _temp:=exec('get_ilosc_rp','zl_partie',_ref)
         || _temp:=_tab_ref.SUM_IL
         ?}
      || _ref_zparn:=null();
         _ref:=exec('FindAndGet','#table','ZPARN',_ref_zparn,,"ref",null);
         _temp:=exec('get_ilosc_rp','zl_partie',_ref)
      ?};
      {? _temp<>0
      || _wsp:=_tab_sur.IL/_temp
      || _wsp:=0
      ?};
      exec('analiza_sur','qprodukcja', _tab_sur.ZPARN,2,_tab_sur.POZYCJA,__tab_sur.ref(),_wsp);
      &_tab_ref;
      _tab_sur.next()
   !}
?};

:: Dodanie informacjio poziomie zagłębienia surowca
{? __tab_sur.first()
|| {!|? __tab_sur.P1:=2+__tab_sur.POZYCJA;
        __tab_sur.P2:=2+(3-__tab_sur.POZYCJA);
        __tab_sur.P3:=2+(6-__tab_sur.POZYCJA);
        __tab_sur.P4:=2+(9-__tab_sur.POZYCJA);
        __tab_sur.P5:=2+(12-__tab_sur.POZYCJA);
        __tab_sur.P6:=2+(15-__tab_sur.POZYCJA);
        __tab_sur.P7:=2+(18-__tab_sur.POZYCJA);
        __tab_sur.P8:=2+(21-__tab_sur.POZYCJA);
        __tab_sur.P9:=2+(24-__tab_sur.POZYCJA);
        __tab_sur.P10:=__tab_sur.POZYCJA+2;
        __tab_sur.put;
        __tab_sur.next()
   !}
?};

:: Czy wyświetlić w formie drzewa
{? ~FUN.ask('Czy wyświetlić analizę w formie struktury hierarchicznej')
|| params_set('RAP_ID','Analiza partii wyrobu');
   exec('m_sql','#sql','LMG_MAG_ZSQL','Stan magazynu')
|| _winsel:=__tab_sur.mk_sel('Analiza parti produktu'@,'P',0,'#partia_prod',,,,1);
:: mod:sitek wywalalo sie dla liczby wierszy > 150 || _winsel:=__tab_sur.mk_sel('Analiza parti produktu'@,'P',0,'#partia_prod',,,__tab_sur.size(),1);
::   exec('rozl_skladowych','qprodukcja');
   __tab_sur.win_fld(_winsel,,'KTM',,,15,,1,'KTM'@);
   __tab_sur.win_fld(_winsel,,'N',,,25,,1,'Nazwa'@);
   __tab_sur.win_fld(_winsel,,'JM',,,5,,1,'jm'@);
   __tab_sur.win_fld(_winsel,,'IL2',,,-10,4,1,'Ilość'@);
   __tab_sur.win_fld(_winsel,,'SYM_PAR',,,22,,1,'Partia'@);
   __tab_sur.win_fld(_winsel,,'SCEAN',,,20,,1,'Identyfikator partii'@);
   __tab_sur.win_fld(_winsel,,'TW',,,10,,1,'Termin ważności'@);
   __tab_sur.win_fld(_winsel,,'SYM_DOK',,,15,,1,'Symbol dokumentu'@);
   __tab_sur.win_act(_winsel,,'Formuła','&Zwiń/rozwiń'@@,,,"exec('zwin_rozwin','#tree')",,1,,,,'Z');
   __tab_sur.win_act(_winsel,0,'Rekord',,,,"~__tab_sur.TREE_REF",,1);
   __tab_sur.win_act(_winsel,0,'Szukaj');
   __tab_sur.win_act(_winsel,0,'Kolejność');
   __tab_sur.tr_fml(_winsel,,"{? _a || {? __tab_sur.TREE_REF=0 || 1 || _a ?} || _a ?}");
   __tab_sur.win_sel(_winsel);
   __tab_sur.select()
?};
__tab_sur


\analiza_sur
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [21.14]
:: OPIS: Dodaje surowce dla poszczególnych półproduktów (funkcja rekurencyjna) do tabeli __tab_sur
::   WE: _a - $ZPARN.ref,
::       _b - liczba - poziom zagłębienia,
::       _c - aktualna pozycja - '00-01-01-00-01-01..'
::       _d - ref pozycji produktu/półproduktu
::       _e - wspolczynnik ilosci
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab_sur:=sql('select
                    ZPARN.SYM SYM_PAR,
                    ND.SYM SYM_DOK,
                    DK.P POZ_DOK,
                    DK.PLUS,
                    ND.D DATA_DOK,
                    M.KTM,
                    M.N,
                    DK.SCEAN,
                    DK_C.ZPARN,
                    ZPARN_S.SYM SYM_PARS,
                    DK_C.WAR01 W01_PART,
                    DK_C.WAR02 W02_PD,
                    DK.TW,
                    JM.KOD JM,
                    ZPARS.IL,
                    \'00-00-00-00-00-00-00-00-00-00\' as POZYCJA,
                    \'01\' P1,
                    \'00\' P2,
                    \'00\' P3,
                    \'00\' P4,
                    \'00\' P5,
                    \'00\' P6,
                    \'00\' P7,
                    \'00\' P8,
                    \'00\' P9,
                    \'00\' P10,
                    DK.WF as WSP,
                    DK.IL as IL2,
                    ZPARN.REFERENCE as ZPARN_REF
       from @ZPARS
            join ZPARN using(ZPARS.PARTIA,ZPARN.REFERENCE)
            join M using (ZPARS.KTM,M.REFERENCE)
            join @DK using(ZPARS.SQLDOK,DK.REFERENCE)
            join JM using(DK.JM,JM.REFERENCE)
            join DK_C using(DK.DK_C,DK_C.REFERENCE)
            left join ZPARN as ZPARN_S using(DK_C.ZPARN,ZPARN_S.REFERENCE)
            join @ND
      where ZPARS.PARTIA=\':_a\'
          ',_a,_b);
:: q_sel(_tab_sur);
_tab_ref:='';
{? _tab_sur.first()
|| _i:=1;
   {!
   |? __tab_sur.TREE_REF:=_d;
      __tab_sur.SYM_PAR:=_tab_sur.SYM_PAR;
      __tab_sur.SYM_DOK:=_tab_sur.SYM_DOK;
      __tab_sur.POZ_DOK:=_tab_sur.POZ_DOK;
      __tab_sur.PLUS:=_tab_sur.PLUS;
      __tab_sur.DATA_DOK:=_tab_sur.DATA_DOK;
      __tab_sur.KTM:=_tab_sur.KTM;
      __tab_sur.N:=_tab_sur.N;
      __tab_sur.SCEAN:=_tab_sur.SCEAN;
      __tab_sur.ZPARN:=_tab_sur.ZPARN;
      __tab_sur.SYM_PARS:=_tab_sur.SYM_PARS;
      __tab_sur.W01_PART:=_tab_sur.W01_PART;
      __tab_sur.W02_PD:=_tab_sur.W02_PD;
      __tab_sur.TW:=_tab_sur.TW;
      __tab_sur.JM:=_tab_sur.JM;
      __tab_sur.IL:=_tab_sur.IL;
      __tab_sur.WSP:=_e;
      __tab_sur.IL2:=_e*_tab_sur.IL;
      __tab_sur.POZYCJA:=(((_b-1)*3)+_c)+form(_i,-2)+'-'+((_b*3)-_tab_sur.POZYCJA);
      __tab_sur.add();
      {? _tab_sur.ZPARN<>'' & _a<>_tab_sur.ZPARN
      || &_tab_ref;
         {? _tab_sur.JM<>'kg'
         || _tab_ref:=sql('select ZPARN.REFERENCE as REF, ZPARN.IL as SUM_IL from
                           @ZPARN where SYM=\':_a\'',_tab_sur.SYM_PARS)
         || _tab_ref:=sql('SELECT sum(ZPARS.IL) as SUM_IL FROM
                        @ZPARS JOIN ZPARN USING(ZPARS.PARTIA,ZPARN.REFERENCE)
                        WHERE ZPARN.SYM=\':_a\' group by ZPARS.PARTIA',
                        _tab_sur.SYM_PARS)
         ?};
         {? _tab_ref.first()
         || {? _tab_sur.JM<>'kg'
            || _ref_zparn:=_tab_ref.REF;
               _ref:=exec('FindAndGet','#table','ZPARN',_ref_zparn,,"ref",null);
               _temp:=exec('get_ilosc_rp','zl_partie',_ref)
            || _temp:=_tab_ref.SUM_IL
            ?}
         || _ref_zparn:=null();
            _ref:=exec('FindAndGet','#table','ZPARN',_ref_zparn,,"ref",null);
            _temp:=exec('get_ilosc_rp','zl_partie',_ref)
         ?};
         {? _temp<>0
         || _wsp:=(_e*_tab_sur.IL)/_temp
         || _wsp:=0
         ?};
         exec('analiza_sur','qprodukcja',_tab_sur.ZPARN,_b+1,__tab_sur.POZYCJA,__tab_sur.ref(),_wsp)
      ?};
      _i+=1;
      _tab_sur.next()
   !}
?};
::q_sel(__tab_sur);
1


\dodaj_rp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja dodaje do ostatniejoperacji przewodnika dokument RP jeśli nie jest przypisany
::   WE: Funkcja wywoływana tylko na pozycji ZGP (wymaga ustawienia na konkretną pozycję ZGP)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZGP.cntx_psh();
{? ZGP.NRPRZ().ILGEN>0
|| FUN.error('Do przewodnika wystawiono już dokumenty RP, modyfikacje operacji nie są możliwe')
|? ZGP.TPZ='T'
|| FUN.error('Do operacji TPZ nie można przypisa dokumentu RP')
|| {? ZGP.DOK<>null()
   || {? FUN.ask('Do pozycji jest już przypisany dikumetn RP.\nCzy chcesz go usunąć?')
      || ZGP.DOK:=null();
         ZGP.put();
         {? cur_tab()=PROD_REJ
         || PROD_REJ.RP:='N';
            PROD_REJ.put()
         ?}
      ?}
   || _mg:=ZGP.ZL().MG;
      {? _mg=null() || return(1) ?};
      _InPDOK:=exec('get_RDOK','magdok_prod',_mg,1);
      {? _InPDOK=null() || return(1) ?};
      _tab:=sql('select ZGP.NRP from ZGP where ZGP.NRPRZ=:_a and ZGP.DOK is not null',ZGP.NRPRZ);
      {? _tab.size()=0
      || ZGP.DOK:=_InPDOK;
         ZGP.put();
         {? cur_tab()=PROD_REJ
         || PROD_REJ.RP:='T';
            PROD_REJ.put()
         ?};
         FUN.info('Przypisano dokument RP do operacji przewodnika: '+ZGP.NRPRZ().NRPRZ+'-'+($_tab.NRP))
      || FUN.error('Brak możliwości przypisania RP do pozycji.\n Raport został już przypisany do pozycji przewodnika nr '+ ZGP.NRPRZ().NRPRZ+'-'+($_tab.NRP) +'\n'+
                   ' Aby przypisać RP do wybranej operacji, najpierw usuń przypisanie dokumentu RP z wskazanej operacji.')
      ?}
   ?}
?};
ZGP.cntx_pop();
1


\analiza_pwt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja dla XFunkcje NUCO - w obszarze produkcja - wyświetlenie produkcji w toku
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
undefine();

ST.DOKL:=5;

{? define('DO_DATY',date,'Data naliczenia wartość produkcji w toku');
   define('WYDZIAL','*','Wydział do naliczenia produkcji w toku');
   def_edit(,'Podaj parametry PwT')
|| {? DEFINE.WYDZIAL='*'
   || DEFINE.WYDZIAL:='%'
   ?};
   exec('pwt','qprodukcja',1,DEFINE.WYDZIAL,DEFINE.DO_DATY)
?};
1


\pwt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Analiza produkcji w toku
::   WE: _a - 0 - wylicz wartości, 1 (domyślnie) - wyświetl informacje
::       _b - symbol wydziału np. 'MSU' lub brak (domyślnie) - wyliczenia dla całości produkcji
::       _c - data na którą ma być wyliczona wartość produkcji w toku, domyślnie date() - data uruchomienia funkcji
::   WY: wartość produkcji w toku wg. zadanych parametrów startowych
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _wyswietl:=_a || _wyswietl:=1 ?};
{? var_pres('_b')=type_of('') || _wydzial:=_b || _wydzial:='%' ?};
{? var_pres('_c')=type_of(date()) || _na_dzien:=_c || _na_dzien:=date() ?};

_result:=0;

VAR_DEL.delete('tab_zlec','dokumenty','tab_zlim','wer','wer2', 'wer_dok');

:: Przygotowanie danych
tab_zlec:=sql('select ZL.REFERENCE as REFERENC,
                       ZL.SYM as SYM,
                       ZL.ST_Z as ST_Z,
                       SLO.KOD as WYD,
                       M.KTM as ZL_KTM,
                       M.N as ZL_N,
                       JM.KOD as ZL_JM,
                       ZL.IL as IL,
                       ZL.ILDOK as ILDOK,
                       ZL.ILWYK as ILWYK,
                       ZL.DO as DO,
                       ZL.DAT_ZAM as DAT_ZAM,
                       ZL.DTR as DTR,
                       ZL.ILWYK as PWT,
                       ZL.ILWYK as WAR_SUR,
                       ZL.ILWYK as WAR_RP,
                       0 as ST_N
                  from ZL join M join JM using(M.J,JM.REFERENCE) join SLO using (ZL.JORG,SLO.REFERENCE)
                 where ( ZL.DO>=to_date(:_a) or ZL.DO is null) and (ZL.OD<=to_date(:_a) or ZL.OD is null)
                        and SLO.KOD like \':_b\'
               ',_na_dzien, _wydzial);

dokumenty:=sql('select ZL.REFERENCE as ZL_REF,
                      TYPYDOK.T as TYP,
                      DK.M as M_REF,
                      ND.Z as ZAK,
                       ND.D,
                       ND.SYM,
                       DK.P as POZ,
                       M.KTM,
                       M.N,
                       JM.KOD as JM,
                       (case when TYPYDOK.T in (\'ZWZL\',\'ZWRP\') then -DK.IL else DK.IL end) as IL,
                       (case when TYPYDOK.T in (\'ZWZL\',\'ZWRP\') then -DK.WAR else DK.WAR end) as WAR,
                       (case when ND.Z=\'N\' then DK.WAR else 0 end) as WAR_N
                  from @DK join @ND join TYPYDOK join ZL using(DK.ZL,ZL.REFERENCE) join JM using(DK.JM, JM.REFERENCE)
                      join M using(DK.M,M.REFERENCE)
                 where ND.ZL is not null and ND.D>to_date(:_b) and ND.D<=to_date(:_a)
                       and ND.ZL in (select REFERENC from :_c)
               order by 1,2,3
               ',_na_dzien, date(2021,08,01),tab_zlec);


tab_zlim:=sql('select ZLIM.ZLEC as ZL_REF,
                       ZLIM.KTM as M_REF,
                       M.KTM,
                       M.N,
                       sum(ZLIM.LIL) as LIL,
                       sum(ZLIM.LIL) as POB,
                      sum(ZLIM.LIL) as WPOB,
                      sum(ZLIM.LIL) as PWT,
                      sum(ZLIM.LIL) as IL_PWT,
                      sum(ZLIM.LIL) as WPOB_N
                 from @ZLIM join M using(ZLIM.KTM,M.REFERENCE)
                where ZLIM.ZLEC in (select REFERENC from :_a) and ZLIM.KOR=0
             group by ZLIM.ZLEC,ZLIM.KTM,M.KTM,M.N
             order by 1,2
               ', tab_zlec);

{? tab_zlec.first()
|| {!
   |? _usun:=0;
:: Określienie czy zlecenie było otwarte na datę wykonywania analizy na podstawie dziennika
      _dziennik:=sql('select ZWAR.DT, ZWAR.KIND from ZWAR where ZWAR.ZL=\':_a\' and ZWAR.DT<=to_date(:_b)
                      ',tab_zlec.REFERENC,_na_dzien);
      {? _dziennik.first()
      || {!
         |? {? _dziennik.KIND='oz'
            || _usun:=1
            |? _dziennik.KIND='ZO'
            || _usun:=0
            ?};
            _dziennik.next()
         !}
      ?};
      &_dziennik;
      {? ~_usun
      || _rp:=sql('select sum(IL) as SIL,
                           sum(WAR) as SWAR
                       from :_a where :_a.ZL_REF=\':_b\' and (:_a.TYP=\'RP\' or :_a.TYP=\'ZWRP\')
                     ',dokumenty,tab_zlec.REFERENC);
         _ilwyk:=_rp.SIL;
         _warwyk:=_rp.SWAR;
         _suma_pwt:=0;
         _suma_swar:=0;
         tab_zlim.prefix();
         tab_zlim.prefix(tab_zlec.REFERENC);
         {? tab_zlim.first()
         || {!
            |? _rw:=sql('select sum(IL) as SIL, sum(WAR) as SWAR
                              from :_a
                             where :_a.ZL_REF=\':_b\' and (:_a.TYP=\'RWZL\' or :_a.TYP=\'ZWZL\') and :_a.M_REF=\':_c\'
                           ',dokumenty,tab_zlim.ZL_REF,tab_zlim.M_REF);
                tab_zlim.IL_PWT:={? _ilwyk>=tab_zlec.IL
                                     || 0
                                  |? _ilwyk=0
                                    || {? _rw.SIL>tab_zlim.LIL || _rw.SIL || tab_zlim.LIL ?}
                                    || _rw.SIL-(tab_zlim.LIL*_ilwyk/tab_zlec.IL)
                                  ?};
                {? tab_zlim.IL_PWT<0 || tab_zlim.IL_PWT:=0 ?};
                _cena:={? _rw.SIL=0 || 0 || _rw.SWAR/_rw.SIL ?};
                tab_zlim.PWT:={? _ilwyk>=tab_zlec.IL
                                  || 0
                               |? _ilwyk=0
                                  || _rw.SWAR
                                  || _rw.SWAR-(tab_zlim.LIL*_cena*_ilwyk/tab_zlec.IL)
                               ?};
                {? tab_zlim.PWT<0 || tab_zlim.PWT:=0 ?};
                _suma_swar+=_rw.SWAR;
                _suma_pwt+=tab_zlim.PWT;
               tab_zlim.POB:=_rw.SIL;
               tab_zlim.WPOB:=_rw.SWAR;
               tab_zlim.put();
               &_rw;
               tab_zlim.next()
            !}
         ?};
         _st_n:={? sql('select sum(WAR_N) as SWAR_N
                       from :_a where :_a.ZL_REF=\':_b\'
                     ',dokumenty,tab_zlec.REFERENC).SWAR_N>0
                || 1
                || 0
                ?};
         {? _suma_swar=0 & _ilwyk=0 & _st_n=0
         || &_rp;
            tab_zlec.del()
         || tab_zlec.PWT:=_suma_pwt;
            tab_zlec.WAR_SUR:=_suma_swar;
            tab_zlec.ILWYK:=_ilwyk;
            tab_zlec.WAR_RP:=_warwyk;
            tab_zlec.PWT:=_suma_pwt;
            tab_zlec.ST_N:=_st_n;
            tab_zlec.put();
            &_rp;
            tab_zlec.next()
         ?}
      || tab_zlec.del()
      ?}
   !}
?};

:: Wyliczenie produkcji w toku
_result:=sql('select sum(:_a.PWT) from :_a', tab_zlec);

{? _wyswietl
|| wer:=tab_zlec.mk_sel('Warość na produkcji w toku'@+' — '+'oddział: %1'@[ST.ODDZ_KOD],'T',0,'#qprodstat',1,,,,'U');
   tab_zlec.win_fld(wer,,'WYD',,,3,,,'Wydział'@,,'Wydział'@);
   tab_zlec.win_fld(wer,,'SYM',,,20,,,'Zlecenie'@,,'Symbol zlecenia'@);
   tab_zlec.win_fld(wer,,'ST_Z',,,1,,,'S'@,,'Status zlecenia'@);
   tab_zlec.win_fld(wer,,'ZL_KTM',,,15,,,'Kod prod.'@,,'Kod produktu'@);
   tab_zlec.win_fld(wer,,'ZL_N',,,30,,,'Nazwa prod.'@,,'Nazwa produktu'@);
   tab_zlec.win_fld(wer,,'IL',,,-15,ST.DOKL,,'Ilość pl.'@,,'Ilość planowana'@);
   tab_zlec.win_fld(wer,,'ILWYK',,,-15,ST.DOKL,,'Ilość wyk.'@,,'Ilość wykonana'@);
   tab_zlec.win_fld(wer,,'WAR_RP',,,-15,2,,'Wartość wyk.'@,,'Wartość zarejestrowanych produktów'@);
   tab_zlec.win_fld(wer,,'WAR_SUR',,,-15,2,,'Wartość pob. sur.'@,,'Wartość pobranych surowców'@);
   tab_zlec.win_fld(wer,,'PWT',,,-15,2,,'Wartość PwT'@,,'Wartość produkcji w toku'@);
   tab_zlec.prefix();
   _fb:="{? cur_tab(1,1).ST_N=1
         || {? var_pres('Color')>0 || Color.fnd_kol('PD_AP#01#03') || '' ?}
         || ~~
         ?}";
   tab_zlec.win_act(wer,,'Rekord',,,,_fb);
   _fb:="VAR.A_ZLEC:=exec('FindAndGet','#table',ZL,tab_zlec.REFERENC,,\"ref()\",null());
         params_exec('pozrap','magdok_prod',,,0);
         1
        ";
   tab_zlec.win_act(wer,,'Formuła','&Dokumenty zlecenia'@@,,,_fb,,,,,,'D');
   _btn:=tab_zlec.win_btn(wer,'text='+'&Dokumenty zlecenia'@,'menu:D',,,0,,,'noempty');
   tab_zlec.btn_sopt(wer,_btn,'tooltip='+'Wyświetla dokumenty zlecenia'@);

   _fb:="exec('dziennik','qprodukcja',tab_zlec.REFERENC)";
   tab_zlec.win_act(wer,,'Formuła','Dz&iennik zlecenia'@@,,,_fb,,,,,,'I');
   _btn:=tab_zlec.win_btn(wer,'text='+'Dz&iennik zlecenia'@,'menu:I',,,0,,,'noempty');
   tab_zlec.btn_sopt(wer,_btn,'tooltip='+'Wyświetla dziennik zlecenia'@);

   _fb:="{? tab_zlec.sel_size()>0
         || FUN.info('Funkcja niedostępna przy zaznaczonych rekordach')
         || tab_zlec.f_clear(1);
            tab_zlec.f_set(,,'WAR_SUR=0 and ILWYK>0');
            tab_zlec.first()
         ?}
        ";
   tab_zlec.win_act(wer,,'Formuła','&Zlecenia bez RWZL'@@,,,_fb,,,,,,'Z');
   _btn:=tab_zlec.win_btn(wer,'text='+'&Zlecenia z RP bez RWZL'@,'menu:Z',,,0,,,'noempty');
   tab_zlec.btn_sopt(wer,_btn,'tooltip='+'Wyświetla zlecenia z RP bez RWZL'@);

   _fb:="{? tab_zlec.sel_size()>0
         || FUN.info('Funkcja niedostępna przy zaznaczonych rekordach')
         || tab_zlec.f_clear(1);
            tab_zlec.f_set(,,'ST_N=1');
            tab_zlec.first()
         ?}
        ";
   tab_zlec.win_act(wer,,'Formuła','Zle. z nieza&kończonymi dokum.'@@,,,_fb,,,,,,'K');
   _btn:=tab_zlec.win_btn(wer,'text='+'Zle. z nieza&kończonymi dokum.'@,'menu:K',,,0,,,'noempty');
   tab_zlec.btn_sopt(wer,_btn,'tooltip='+'Wyświetla zlecenia posiadające dokumenty niezakończone.'@);

   _fb:="{? tab_zlec.sel_size()>0
         || FUN.info('Funkcja niedostępna przy zaznaczonych rekordach')
         || tab_zlec.f_clear(1);
            tab_zlec.first()
         ?}
        ";
   tab_zlec.win_act(wer,,'Formuła','&Wszystkie zlecenia'@@,,,_fb,,,,,,'W');
   _btn:=tab_zlec.win_btn(wer,'text='+'&Wszystkie zlecenia'@,'menu:W',,,0,,,'noempty');
   tab_zlec.btn_sopt(wer,_btn,'tooltip='+'Wyświetla wszystkie zlecenia'@);
   _fb:="{? tab_zlec.sel_size()>0
         || FUN.info('Funkcja niedostępna przy zaznaczonych rekordach')
         || tab_zlec.f_clear(1);
            tab_zlec.f_set(,,'PWT>0');
            tab_zlec.first()
         ?}
        ";
   tab_zlec.win_act(wer,,'Formuła','&Niezerowa PwT'@@,,,_fb,,,,,,'N');
   _btn:=tab_zlec.win_btn(wer,'text='+'&Niezerowa PwT'@,'menu:N',,,0,,,'noempty');
   tab_zlec.btn_sopt(wer,_btn,'tooltip='+'Wyświetla zlecenia z niezerową wartością produkcji w toku'@);

   wer2:=tab_zlim.mk_sel('Pobrania surowców do zlecenia','N',0,'#qprodlimit',1,,,,'U');
   tab_zlim.win_fld(wer2,,'KTM',,,15,,,'Kod sur.'@,,'Kod produktu'@);
   tab_zlim.win_fld(wer2,,'N',,,30,,,'Nazwa sur.'@,,'Nazwa produktu'@);
   tab_zlim.win_fld(wer2,,'LIL',,,-15,ST.DOKL,,'Ilość plan.'@,,'Ilość planowana'@);
   tab_zlim.win_fld(wer2,,'POB',,,-15,ST.DOKL,,'Ilość pobr.'@,,'Ilość pobrana'@);
   tab_zlim.win_fld(wer2,,'WPOB',,,-15,2,,'Wartość pobr.'@,,'Wartość pobrana'@);
   tab_zlim.win_fld(wer2,,'IL_PWT',,,-15,ST.DOKL,,'Ilość PwT.'@,,'Ilość produkcji'@);
   tab_zlim.win_fld(wer2,,'PWT',,,-15,2,,'Wartość PwT'@,,'Wartość produkcji w toku'@);

   _poz_zlec:=tab_zlec.grp_make();
   tab_zlec.grp_sel(_poz_zlec,,wer,,"tab_zlim.prefix();
                                  tab_zlim.prefix(tab_zlec.REFERENC);
                                  tab_zlim.first();
                                  grp_disp(tab_zlim,wer2)",,,,,,,,'maximized_with_title','gprodstat');
   tab_zlec.grp_splt(_poz_zlec,'panel0','horizontal','dolny',25);
   tab_zlec.grp_sel(_poz_zlec,tab_zlim,wer2,,,,,,,,,,'maximized_with_title');

   tab_zlec.win_sel(_poz_zlec);
   tab_zlec.select()
?};

VAR_DEL.delete('tab_zlec','dokumenty','tab_zlim','wer','wer2', 'wer_dok');
_result


\usun_zl_px_sygnal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO]
:: OPIS: Usunięcie zlecenia produkcyjnego z planu strategicznego, funkcja uruchamiana z obszaru zleceń
::       uruchamia proces usunięcia zlecenia na którym "stoimy".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_zlec:=ZL.ref();

_par:=obj_new(1);
_par[1]:=obj_new('PARAMETR','VALUE');
_par[1].PARAMETR:='ZL';
_par[1].VALUE:=_zlec;
exec('force_signal','#b__box','NUCO_US_ZL_PX',,_par);
1


\dodaj_zl_px_sygnal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO]
:: OPIS: Dodanie zlecenia produkcyjnego do planu strategicznego, funkcja uruchamiana z obszaru zleceń
::       uruchamia proces planowania zlecenia na którym "stoimy".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_zlec:=ZL.ref();

_par:=obj_new(1);
_par[1]:=obj_new('PARAMETR','VALUE');
_par[1].PARAMETR:='ZL';
_par[1].VALUE:=_zlec;
exec('force_signal','#b__box','ZLECENIE_DO_PLANU',,_par);

1


\zlim_realizacja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Okno pozycji limitów do zlecenia wraz ze stanem pobrania surowców
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__limit','limit');

limit:=sql('select ZLIM.REFERENCE as REF,ZGH.NRPRZ,ZL.SYM, M.KTM, M.N, ZLIM.LIL, ZLIM.IL_RAW, ZLIM.LIMIT, ZLIM.AUTO,JM.KOD as JM
       from @ZLIM
       left join ZL using(ZLIM.ZLEC,ZL.REFERENCE)
       left join M using(ZLIM.KTM,M.REFERENCE)
       left join JM using(M.J,JM.REFERENCE)
       left join ZGP using(ZLIM.ZGP, ZGP.reference)
       left join ZGH using(ZGP.NRPRZ, ZGH.reference)
       where ZLIM.ZLEC=:_a and M.KTM<>\'07-0023-000001\'
       order by KTM',ZL.ref);

limit.for_each("_tmp:=exec('zlim_pob_il','zl_limit',limit.REF);limit.IL_RAW:=_tmp.IL; limit.put()");

__limit:=sql('select SYM, KTM, N, JM, SUM(LIL) as SUMAL, SUM(IL_RAW) as SUMAP, LIMIT, AUTO
       from :_a
       group by SYM,KTM,N,JM,LIMIT,AUTO
       order by KTM',limit);

_sWin:=__limit.mk_sel('Pobrania surowców do zlecenia '+__limit.SYM,'P',,'#zlim_swin',,,,,'U','T');
__limit.win_sel(_sWin);
__limit.win_fld(_sWin,,'SYM'    ,     ,          ,   , 15 , ,'Zlecenie',,'Wskazanie na zlecenie, którego dotyczy limit',,1);
__limit.win_fld(_sWin,,'KTM'     ,     ,          ,   20,  , ,'Indeks',,'Wskazanie na towar (surowiec), którego dotyczy limit',,1);
__limit.win_fld(_sWin,,'N'     ,     ,          ,   40,  , ,'Nazwa',,'Wskazanie na towar (surowiec), którego dotyczy limit',,1);
__limit.win_fld(_sWin,,'JM'     ,     ,          ,   8,  , ,'Jm.',,'Jednostka miary',,1);
__limit.win_fld(_sWin,,'SUMAL'     ,          ,          , 10, 4, ,'Norma brutto',,'Limit ilościowy',,1);
__limit.win_fld(_sWin,,'SUMAP'     ,          ,          , 10, 4, ,'Ilość pobrana',,'Limit pobrany',,1);
::__limit.win_fld(_sWin,,'LIMIT'   ,          ,          ,  1,  , ,'Limit/nielimit',,'Znacznik, czy surowciec: limitowany - T, nielimitowany - N',,1);
__limit.win_fld(_sWin,,'AUTO'    ,          ,          ,  1,  , ,'Automatyczny',,'Znacznik, czy limit wygenerowany automatycznie',,1);
__limit.win_act(_sWin, ,'Kolejność' );
__limit.win_act(_sWin, ,'Szukaj');
__limit.fld_fml('SUMAP','BEFORE_DISPLAY',"{? __limit.SUMAP<__limit.SUMAL
                                          || '255:0:0,'
                                          |? __limit.SUMAP>__limit.SUMAL
                                          || '0:162:255'
                                          |? __limit.SUMAP=__limit.SUMAL
                                          || '21:176:32,'
                                          ?}");
__limit.select;
VAR_DEL.delete('__limit','limit')


\limity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [21.14]
:: OPIS: Rozliczenie limitów z poziomu okienka partie produkcyjne
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------

:: Weryfikacja czy jesteśmy w obszarze wykonań
{? AreaTitle.getTitle()*'Wykonania produkcji'>0
|| __qzparn:=ZPARN.ref();
   __qzgp:=PROD_REJ.ZGP;
   ZGP.cntx_psh();
   ZGP.clear();
   {? ZGP.seek(PROD_REJ.ZGP)
   || exec('action_zgp_lim','zl_limit')
   ?};
   ZGP.cntx_pop();
   VAR_DEL.delete('__qzgp','__qzparn')
|| FUN.info('Funkcja dostępna z obszaru Wykonia produkcji')
?};
1


\zlecenie_px_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_2226]
:: OPIS: Wywołanie procesu generowania zleceń na podstawie pozycji planu strategicznego
::       Narazie tylko dla jednej pozycji - jeśli pozycja planu strategicznego ma więcej niż jedną pozycje nie generujemy
::   WE: uruchamiane w kontekście tabeli PX_GRPS/PX_GRP
::   WY:
::----------------------------------------------------------------------------------------------------------------------

_one_ver:=exec('is_one_version','px_param');
_ref:='';
_cur_tab:=cur_tab(1,1);
{? var_pres('PX_GRP',_cur_tab)>0
|| _px_grp:=_cur_tab.PX_GRP;
   {? type_of(_px_grp)=type_of(null)
   || _ref:=$_px_grp
   |? type_of(_px_grp)=type_of('')
   || _ref:=_px_grp
   ?}
?};

PX_GRP.cntx_psh();
PX_GRP.prefix();
{? _ref<>'' & PX_GRP.seek(_ref)
|| PX_CONN.cntx_psh();
   PX_CONN.index('PX_GRP');
   PX_CONN.prefix(PX_GRP.ref());
   {? PX_CONN.first()
   || {? PX_CONN.size()=1
      || exec('zlecenie_proces','qprodukcja',PX_CONN.PX_OBJ)
      || FUN.emsg('Pozycja planu składa się z wielu zamówień, brak możliwości generowania zleceń zborczych.\n'+
                  'Uruchom generowanie zleceń dla poszczególnych pozycji zamówień')
      ?}
   || FUN.emsg('Nie odnaleziono zamówienia do zaplanowania')
   ?};
   PX_CONN.cntx_pop()
|| FUN.emsg('Nie odnaleziono pozycji planu do zaplanowania')
?};
PX_GRP.cntx_pop();
1


\dziennik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_2226]
:: OPIS: Wyświetlenie dziennika zlecenia dla tabeli produkcja w toku
::   WE: _a - $ZL.ref
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_zlec:=exec('FindAndGet','#table',ZL,_a,,,null);
ZWAR.cntx_psh();
ZWAR.index('ZDG');
ZWAR.prefix(_zlec);
ZWAR.win_sel('SLO');
ZWAR.win_edit('RED');
ZWAR.select();
ZWAR.cntx_pop();
~~


\akt_plan_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_2226]
:: OPIS: Aktualizacja terminów dla zleceń po zmiane terminu na zamówieniu sprzedaży
::   WE: _a - ZK_P.ref(),
::      [_b] - 1/0 dialog (1-domyślnie) wyświetlać komunikaty
::      [_c] - 1/0 force (0-domyślnie) aktualizacja mimo niewykrycia zmian w datach
::   WY: 1 - ok, 0- nie OK
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_zk_p_ref:=null();

{? _>1 & var_pres('_b')=type_of(0)
|| _dialog:=_b
|| _dialog:=1
?};

{? _>0 & var_pres('_a')=type_of(null())
|| _zk_p_ref:=_a
|| {? _dialog || FUN.error('Błednie przekazany parametr pozycji zamówienia!') ?};
   _result:=0
?};

{? _>2 & var_pres('_c')=type_of(0)
|| _force:=_c
|| _force:=0
?};

{? _result & _zk_p_ref<>null()
|| _zk_p:=sql('select ZK_P.PL_DATA, ZK_P.PL_TIME, ZK_P.PL_DIR, ZK_P.DT as DTR, 1 as DNI, ZK_P.M
                 from @ZK_P
                where ZK_P.REFERENCE=:_a
              ', _zk_p_ref);
   _zlzam:=sql('select ZLZAM.ZL as REF_ZL, ZL.NRNZL, ZL.SYM
                  from ZLZAM join ZL using(ZLZAM.ZL,ZL.REFERENCE)
                 where ZLZAM.ZAMPOZ=\':_a\'
               ', $_zk_p_ref);
   {? _zlzam.first() & _zk_p.PL_DATA>=date() & _zk_p.DTR>=date()
   || _zl_sym:='';
      {!
      |? _zl:=sql('select ZL.UNRZL, ZL.REFERENCE as REF_ZL, ZL.DTR, ZL.PL_DATA, ZL.PL_TIME, ZL.PL_DIR, ZL.SYM, ZL.STAN, ZL.KTM
                     from ZL
                     where ZL.NRNZL=:_a
                  ',_zlzam.NRNZL);
         {? _zl.first()
         || {!
            |? _update:=0;
:: Ustalenie ogólnego czasu trwania zlecenia - dla potrzeb określenia daty początku zlecenia
               _time:=sql('select sum(ZGP.MTIME) as SMT from ZGP where ZGP.ZL=\':_a\' and ZGP.TPZ=\'N\'',_zl.REF_ZL).SMT +
                      sql('select sum(ZGP.NTIME) as STPZ from ZGP where ZGP.ZL=\':_a\' and ZGP.TPZ=\'T\'',_zl.REF_ZL).STPZ;
               {? _time>0
               || _zk_p.DNI:=((_time/24)+1)$0; _zk_p.put()
               || _zk_p.DNI:=1; _zk_p.put()
               ?};

:: Dla zleceń niezamkniętych (STAN<>Z) zmieniamy zawsze termin realizacji
               {? _zl.STAN<>'Z' & ( _zl.DTR<>_zk_p.DTR | _force )
               || exec('FindAndGet','#table',ZL,_zl.REF_ZL,,"DTR:=_b.DTR;ZL.put()",0,_zk_p);
                  _zl_sym+=' '+_zl.SYM+',\n'
               ?};

:: Aktualizacja zlecenia na zamawiany wyrób
               {? _zl.STAN='N' & _zl.KTM=_zk_p.M & (_zl.PL_DATA<>_zk_p.PL_DATA | _force)
               || {? exec('FindAndGet','#table',ZL,_zl.REF_ZL,,
                          " PL_DATA:=_b.PL_DATA;
                            PL_DATA:=exec('dzienRob','kalendarz',PL_DATA,1,1,1,-1);
                            {? PL_DATA<date || PL_DATA:=date() ?};
                            STARTD:=PL_DATA-_b.DNI;
                            STARTD:=exec('dzienRob','kalendarz',STARTD,1,1,1,-1);
                            {? STARTD<date() || STARTD:=date() ?};
                            ENDD:=PL_DATA;
                            ZL.put()
                          ",0,_zk_p)
                  || _update:=1
                  ?}
:: Aktualizacja zleceń na półwyroby
               |? _zl.STAN='N'& (_zl.PL_DATA<>_zk_p.PL_DATA | _force)
               || {? exec('FindAndGet','#table',ZL,_zl.REF_ZL,,
                          " _odstep:=7;
                            {? ',MMO,MSU'*JORG().KOD>0
                            || _odstep:=14
                            ?};
                            PL_DATA:=_b.PL_DATA-_odstep;
                            PL_DATA:=exec('dzienRob','kalendarz',PL_DATA,1,1,1,-1);
                            {? PL_DATA<date || PL_DATA:=date() ?};
                            STARTD:=PL_DATA-_b.DNI;
                            STARTD:=exec('dzienRob','kalendarz',STARTD,1,1,1,-1);
                            {? STARTD<date() || STARTD:=date() ?};
                            ENDD:=PL_DATA;
                            ZL.put()
                          ",0,_zk_p)
                  || _update:=1
                  ?}
               ?};
:: Aktualizacja po naniesieniu zmian na zleceniu
               {? _update & _zl.STAN='N'
               || exec('akt_zgh_plany','zl_guide',exec('FindAndGet','#table',ZL,_zl.REF_ZL,,,null));
                  _zl_sym+=' '+_zl.SYM+',\n'
               ?};
               _zl.next()
            !}
         ?};
         &_zl;
         _zlzam.next()
      !};
:: Informacja o zaktualizowanych zleceniach
      {? _dialog & _zl_sym<>''
      || FUN.info('Zaktualizowano zlecenia:\n%1'@[_zl_sym] )
      ?}
   || {? _dialog || FUN.info('Brak zleceń powiązanych z poprawianą pozycją zamówienia') ?}
   ?}
|| {? _dialog || FUN.error('Błednie przekazany parametr pozycji zamówienia!') ?};
   _result:=0
?};

_result