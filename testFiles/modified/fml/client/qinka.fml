:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: qinka.fml
:: Utworzony: 20.05.2022
:: Autor: PeKa
:: Systemy:
::======================================================================================================================
:: Zawartość: Fomuly do obslugi inki i pokrewnych
::======================================================================================================================


\import_zalacznikow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Importuje zalczniki pdf z katalogow na serwerze do tabeli zalcznikow materialow
::----------------------------------------------------------------------------------------------------------------------
:: tabelka, ktora zostanie napelniona sciezkami do plikow do dalszej obrobki
VAR_DEL.delete('__import');
__import:=tab_tmp(1
::      REF
       ,'REFM' ,'STRING[16]','Ref materiału'
::      Indeks materiałowy
       ,'KTM'     ,'STRING[50]' ,'Indeks podstawowy'
::      Nazwa indeksu materiałowego
       ,'N'       ,'STRING[100]','Nazwa postawowa'
::      Sciezka
       ,'PATH'   ,'STRING[255]','Sciezka do pliku'
::      DATA
       ,'DATA' ,'DATE','Data pliku'
::      UWAGI
       ,'UWAGI' ,'STRING[255]','Uwagi'
::      JEZYK
       ,'JEZYK' ,'STRING[2]','Wersja jezykowa'
::      Nazwa pliku
       ,'NAZWA' ,'STRING[255]','Nazwa pliku'
::      Status danych do importu
       ,'STATUS' ,'STRING[1]','Status'
::      Status danych do importu
       ,'ZAM' ,'STRING[1]','Czy zamiennik?'
::      Dostawca surowca - kod
       ,'KHKOD' ,'STRING[10]','Dostawca - kod'
::      Dostawca surowca - nazwa
       ,'KHSKR' ,'STRING[10]','Dostawca - skrót'
::      Zamiennik surowca - kod u dostawcy
       ,'KTMD' ,'STRING[50]','Zamiennik - kod'
::      Zamiennik surowca - nazwa u dostawcy
       ,'ND' ,'STRING[100]','Zamiennik - nazwa'
       );
:: buduje tabele materialow z grupy 07 do wyszukiwania nazwa katalogow zgodnych z nazwa indeksu
_mat:=sql('select M.REFERENCE as MREF, M.KTM, M.N, M.OPIST from M join MGR where M.A=\'T\' and  MGR.KOD like \'07-%\'');
:: progress
_size:=_mat.size();
_licz:=0;
{? _mat.first
||
   {!
   |?
:: progress
      _licz+=1;
      _prgs:=100*_licz/_size;
      progress(_prgs,'\nTrwa analiza plików MSDS/TDS (%1\%)\n'@[$int(_prgs)],'Analiza załączników...'@);
:: zmiana '/' na '-' z uwagi na ograniczenia w windows do nazwy katalogu
      _mat.N:=gsub(_mat.N,'/','-');
      _katalog:='/data/SUROWCE/'+_mat.N;
      {? fexists(_katalog,0)
      || _DIR:=fdir(_katalog,1,0);
         {? _DIR.first()
         ||
:: wariant kiedy istnieje plik MSDS, ale bez opisu wersji jezykowej
            _pdf:=sql('select * from :_a
                           where UPPER(NAME) like \'MSDS%\'
                                 and (UPPER(NAME) not like \'MSDS%$_PL$_%\' ESCAPE \'$\' and UPPER(NAME) not like \'MSDS%$_EN$_%\' ESCAPE \'$\')
                                 and TYPE=\'f\'
                           order by NAME,MOD_DATE'
                     ,_DIR);
            {? _pdf.last()
            || _uwagi:='Plik nie posiada określonej wersji wersji językowej. Dane przed importem należy poprawić.';
               exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'',_pdf.NAME,'B')
            ?};
            &_pdf;
:: wariant kiedy istnieje plik TDS, ale bez opisu wersji jezykowej
            _pdf:=sql('select * from :_a
                           where UPPER(NAME) like \'TDS%\'
                                 and (UPPER(NAME) not like \'TDS%$_PL$_%\' ESCAPE \'$\' and UPPER(NAME) not like \'TDS%$_EN$_%\' ESCAPE \'$\')
                                 and TYPE=\'f\'
                           order by NAME,MOD_DATE'
                     ,_DIR);
            {? _pdf.last()
            || _uwagi:='Plik nie posiada określonej wersji wersji językowej. Dane przed importem należy poprawić.';
               exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'',_pdf.NAME,'B')
            ?};
            &_pdf;
:: odszukanie wersji jezykowej MSDS EN wedlug ostatniej daty pliku
            _pdf:=sql('select * from :_a where UPPER(NAME) like \'MSDS$_%$_EN$_%\' ESCAPE \'$\' and TYPE=\'f\' order by NAME,MOD_DATE',_DIR);
            {? _pdf.last()
            || _uwagi:='Plik gotowy do importu';
               exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'EN',_pdf.NAME,'T')
            || _uwagi:='Odnaleziono katalog z nazwą indeksu, jednak nie zawiera plików MSDS do importu w wersji jezykowej EN';
               exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,'',date(0,0,0),_uwagi,'','','N')
            ?};
            &_pdf;
:: odszukanie wersji jezykowej TDS EN wedlug ostatniej daty pliku
            _pdf:=sql('select * from :_a where UPPER(NAME) like \'TDS$_%$_EN$_%\' ESCAPE \'$\' and TYPE=\'f\' order by NAME,MOD_DATE',_DIR);
            {? _pdf.last()
            || _uwagi:='Plik gotowy do importu';
               exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'EN',_pdf.NAME,'T')
            || _uwagi:='Odnaleziono katalog z nazwą indeksu, jednak nie zawiera plików TDS do importu w wersji jezykowej EN';
               exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,'',date(0,0,0),_uwagi,'','','N')
            ?};
            &_pdf;
:: odszukanie wersji jezykowej MSDS PL wedlug ostatniej daty pliku
            _pdf:=sql('select * from :_a where UPPER(NAME) like \'MSDS$_%$_PL$_%\' ESCAPE \'$\' and TYPE=\'f\' order by NAME,MOD_DATE',_DIR);
            {? _pdf.last()
            || _uwagi:='Plik gotowy do importu';
               exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'PL',_pdf.NAME,'T')
            || _uwagi:='Odnaleziono katalog z nazwą indeksu, jednak nie zawiera plików MSDS do importu w wersji jezykowej PL';
               exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,'',date(0,0,0),_uwagi,'','','N')
            ?};
            &_pdf;
:: odszukanie wersji jezykowej TDS PL wedlug ostatniej daty pliku
            _pdf:=sql('select * from :_a where UPPER(NAME) like \'TDS$_%$_PL$_%\' ESCAPE \'$\' and TYPE=\'f\' order by NAME,MOD_DATE',_DIR);
            {? _pdf.last()
            || _uwagi:='Plik gotowy do importu';
               exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'PL',_pdf.NAME,'T')
            || _uwagi:='Odnaleziono katalog z nazwą indeksu, jednak nie zawiera plików TDS do importu w wersji jezykowej PL';
               exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,'',date(0,0,0),_uwagi,'','','N')
            ?};
            &_pdf
         || _uwagi:='Odnaleziono katalog z nazwą indeksu, jednak ścieżka do pliku jest zbyt długa. Pliki należy dodać ręcznie';
            exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,'',date(0,0,0),_uwagi,'','','N')
         ?};
         &_DIR
      || _uwagi:='Nie dopasowano nazwy katalogu do nazwy indeksu materialowego';
         exec('log_importu','qinka',_mat.KTM,_mat.N,_mat.MREF,'',date(0,0,0),_uwagi,'','','N')
      ?};
      _mat.next()
   !};
   prgs_clr()
?};
:: obsluga zamiennikow
_mdost:=sql('select
                  M.REFERENCE as MREF,
                  M.KTM as ZKTM,
                  M.N as ZN,
                  M.OPIST,
                  KH.SKR,
                  KH.KOD,
                  MKODK.KTM as KTMD,
                  MKODK.N as ND
             from MDOST
                  left join M using(MDOST.M, M.reference)
                  left join MGR using(M.MGR,MGR.reference)
                  left join MKODK using(MDOST.MKODK,MKODK.reference)
                  left join KH using(MDOST.KH,KH.reference)
             where
                  M.A=\'T\' and
                  MGR.KOD like \'07-%\' and
                  MKODK.N<>\'\''
           );
:: progress
_size:=_mdost.size();
_licz:=0;
{? _mdost.first()
|| {!
   |?
:: progress
      _licz+=1;
      _prgs:=100*_licz/_size;
      progress(_prgs,'\nTrwa analiza plików MSDS/TDS (%1\%)\n'@[$int(_prgs)],'Analiza załączników dla zamienników...'@);
:: zmiana '/' na '-' z uwagi na ograniczenia w windows do nazwy katalogu
      _mdost.ND:=gsub(_mdost.ND,'/','-');
      _katalog:='/data/SUROWCE/'+_mdost.ND;
      {? fexists(_katalog,0)
      || _DIR:=fdir(_katalog,1,0);
         {? _DIR.first()
         ||
:: wariant kiedy istnieje plik MSDS, ale bez opisu wersji jezykowej
            _pdf:=sql('select * from :_a
                           where UPPER(NAME) like \'MSDS%\'
                                 and (UPPER(NAME) not like \'MSDS%$_PL$_%\' ESCAPE \'$\' and UPPER(NAME) not like \'MSDS%$_EN$_%\' ESCAPE \'$\')
                                 and TYPE=\'f\'
                           order by NAME,MOD_DATE'
                     ,_DIR);
            {? _pdf.last()
            || _uwagi:='Plik nie posiada określonej wersji wersji językowej. Dane przed importem należy poprawić.';
               exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mdost.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'',_pdf.NAME,'B'
                   ,'T',_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
            ?};
            &_pdf;
:: wariant kiedy istnieje plik TDS, ale bez opisu wersji jezykowej
            _pdf:=sql('select * from :_a
                           where UPPER(NAME) like \'TDS%\'
                                 and (UPPER(NAME) not like \'TDS%$_PL$_%\' ESCAPE \'$\' and UPPER(NAME) not like \'TDS%$_EN$_%\' ESCAPE \'$\')
                                 and TYPE=\'f\'
                           order by NAME,MOD_DATE'
                     ,_DIR);
            {? _pdf.last()
            || _uwagi:='Plik nie posiada określonej wersji wersji językowej. Dane przed importem należy poprawić.';
               exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mdost.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'',_pdf.NAME,'B'
                     ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
            ?};
            &_pdf;
:: odszukanie wersji jezykowej MSDS EN wedlug ostatniej daty pliku
            _pdf:=sql('select * from :_a where UPPER(NAME) like \'MSDS$_%$_EN$_%\' ESCAPE \'$\' and TYPE=\'f\' order by NAME,MOD_DATE',_DIR);
            {? _pdf.last()
            || _uwagi:='Plik gotowy do importu';
               exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mdost.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'EN',_pdf.NAME,'ZT'
                     ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
            || _uwagi:='Odnaleziono katalog z nazwą indeksu, jednak nie zawiera plików MSDS do importu w wersji jezykowej EN';
               exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mdost.MREF,'',date(0,0,0),_uwagi,'','','N'
                     ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
            ?};
            &_pdf;
:: odszukanie wersji jezykowej TDS EN wedlug ostatniej daty pliku
            _pdf:=sql('select * from :_a where UPPER(NAME) like \'TDS$_%$_EN$_%\' ESCAPE \'$\' and TYPE=\'f\' order by NAME,MOD_DATE',_DIR);
            {? _pdf.last()
            || _uwagi:='Plik gotowy do importu';
               exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mdost.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'EN',_pdf.NAME,'ZT'
                     ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
            || _uwagi:='Odnaleziono katalog z nazwą indeksu, jednak nie zawiera plików TDS do importu w wersji jezykowej EN';
               exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mdost.MREF,'',date(0,0,0),_uwagi,'','','N'
                     ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
            ?};
            &_pdf;
:: odszukanie wersji jezykowej MSDS PL wedlug ostatniej daty pliku
            _pdf:=sql('select * from :_a where UPPER(NAME) like \'MSDS$_%$_PL$_%\' ESCAPE \'$\' and TYPE=\'f\' order by NAME,MOD_DATE',_DIR);
            {? _pdf.last()
            || _uwagi:='Plik gotowy do importu';
               exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mdost.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'PL',_pdf.NAME,'ZT'
                     ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
            || _uwagi:='Odnaleziono katalog z nazwą indeksu, jednak nie zawiera plików MSDS do importu w wersji jezykowej PL';
               exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mdost.MREF,'',date(0,0,0),_uwagi,'','','N'
                     ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
            ?};
            &_pdf;
:: odszukanie wersji jezykowej TDS PL wedlug ostatniej daty pliku
            _pdf:=sql('select * from :_a where UPPER(NAME) like \'TDS$_%$_PL$_%\' ESCAPE \'$\' and TYPE=\'f\' order by NAME,MOD_DATE',_DIR);
            {? _pdf.last()
            || _uwagi:='Plik gotowy do importu';
               exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mat.MREF,_pdf.DIR+'/'+_pdf.NAME,_pdf.MOD_DATE,_uwagi,'PL',_pdf.NAME,'T'
                     ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
            || _uwagi:='Odnaleziono katalog z nazwą indeksu, jednak nie zawiera plików TDS do importu w wersji jezykowej PL';
               exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mdost.MREF,'',date(0,0,0),_uwagi,'','','N'
                     ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
            ?};
            &_pdf
         || _uwagi:='Odnaleziono katalog z nazwą indeksu, jednak ścieżka do pliku jest zbyt długa. Pliki należy dodać ręcznie';
            exec('log_importu','qinka',_mdost.ZKTM,_mdost.N,_mdost.MREF,'',date(0,0,0),_uwagi,'','','N'
                  ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
         ?};
         &_DIR
      || _uwagi:='Nie dopasowano nazwy katalogu do nazwy indeksu materialowego wg zamiennika';
         exec('log_importu','qinka',_mdost.ZKTM,_mdost.ZN,_mdost.MREF,'',date(0,0,0),_uwagi,'','','N'
               ,{? _mdost.ND<>'' || 'T' || 'N' ?},_mdost.KOD,_mdost.SKR,_mdost.KTMD,_mdost.ND)
      ?};
      _mdost.next()
   !};
   prgs_clr()
?};
__import


\log_importu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Napelniam tabele logow importu (nie są kontrolowane przekazywane parametry - podane w wywolaniu)
::   WE: _a - ktm
::       _b - nazwa
::       _c - ref materialu
::       _d - sciezka pliku lub opis
::       _e - data pliku lub pusta
::       _f - uwagi do importu
::       _g - wersja jezykowa
::       _h - nazwa pliku
::       _i - status danych do importu (T - do importu, N - nie importuje, B - bledne dane, A - aktualizacja)
::       [_j] - czy zamiennik? T/N
::       [_k] - kod dostawcy
::       [_l] - skrót dostawcy
::       [_m] - ktm zamiennika u dostawcy
::       [_n] - nazwa zamiennika u dostawcy
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _>=10 || {? type_of(_j)<>2 || _j:='N' ?} || _j:='N' ?};
{? _>=11 || {? type_of(_k)<>2 || _k:='' ?} || _k:='' ?};
{? _>=12 || {? type_of(_l)<>2 || _l:='' ?} || _l:='' ?};
{? _>=13 || {? type_of(_m)<>2 || _m:='' ?} || _m:='' ?};
{? _>=14 || {? type_of(_n)<>2 || _n:='' ?} || _n:='' ?};
__import.blank();
__import.KTM:=_a;
__import.N:=_b;
__import.REFM:=_c;
__import.PATH:=_d;
__import.DATA:=_e;
__import.UWAGI:=_f;
__import.JEZYK:=_g;
__import.NAZWA:=_h;
__import.STATUS:=_i;
__import.ZAM:=_j;
:: jesli nie jest to zamiennik to sprawdzam, czy posiada informacji o domyslnym dostawcy, aby pobrac dla niego dostawce
{? _j='N'
|| _dost:=sql('select MDOST.KH as KHREF from MDOST where MDOST.M=\':_a\' and MDOST.D=\'T\'',_c);
   _kh:=exec('FindAndGet','#table',KH,_dost.KHREF,,"__import.KHKOD:=KH.KOD;__import.KHSKR:=KH.SKR",'');
   {? _kh=''
   || __import.KHKOD:=_k;
      __import.KHSKR:=_l
   ?}
|| __import.KHKOD:=_k;
   __import.KHSKR:=_l
?};
__import.KTMD:=_m;
__import.ND:=_n;
__import.add()


\import_dokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Tworzenie zapisow DOKUM z podpieciem zalacznika pod odszukany indeks
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: tworze tabele z odszukanymi danymi w katalogach sieciowych NUCO
exec('import_zalacznikow','qinka');
:: analiza danych przed ponownym importem - dane, które już występują w DOKUM usuwam z tabeli do importu
{? __import.first
|| {!
   |?
      _del:=0;
      {? __import.STATUS='T' & (__import.NAZWA * '\'')=0
      || {? sql('select LOK, DATA from DOKUM where REFSQL=\':_a\' and LOK like \'%:_b\' and DATA=to_date(:_c)',__import.REFM,__import.NAZWA,__import.DATA).size>0
:: weryfikacja czy plik z tabeli danych do importu juz jest w dokum o tej samej nazwie i dacie pliku, jesli jest to usuwam z tabeli __import
         || _del:=__import.del
:: jesli plik istnieje w dokum, ale w tabeli import jest plik o nowszej dacie to wykonuje dodanie pliku i zminiam status, aby pokazac nową ikone
         |? sql('select LOK, DATA from DOKUM where REFSQL=\':_a\' and LOK like \'%:_b\' and to_date(:_c) > DATA',__import.REFM,__import.NAZWA,__import.DATA).size>0
         || __import.STATUS:='A';
            __import.UWAGI:='Nowsza wersja pliku';
            __import.put
         ?}
      || {? __import.NAZWA * '\''
         || __import.STATUS:='N';
            __import.UWAGI:='Plik zawiera niedozwolone znaki w jego nazwie.';
            __import.put()
         ?}
      ?};
:: kontroluje czy del sie powiodl, aby wykonywac nexta tylko wtedy kiedy del nie zwrocil 0
      {? _del || 1 || __import.next() ?}
   !}
?};

{? type_of(__import)=type_of(SYSLOG)
||
   _sWin:=__import.mk_sel('Lista indeksów surowcowych','P',,'#__import_swin',,,,,'U','T');
   __import.win_sel(_sWin);
   __import.win_fld(_sWin,,'KTM'     ,          ,          ,-15,  , ,'Indeks podstawowy',,'KTM',,1);
   __import.win_fld(_sWin,,'N'       ,          ,          ,30,  , ,'Nazwa podstawowa',,'N',,1);
   __import.win_fld(_sWin,,'KTMD'       ,          ,       ,-15,  , ,'Indeks zamiennika',,'KTM',,1);
   __import.win_fld(_sWin,,'ND'       ,          ,         ,30,  , ,'Nazwa zamiennika',,'N',,1);
   __import.win_fld(_sWin,,'KHSKR'       ,          ,       ,10,  , ,'Dostawca',,,,1);
   __import.win_fld(_sWin,,'JEZYK'      ,          ,          , 5,, ,'Wersja językowa',,'JEZYK',,1);
   __import.win_fld(_sWin,,'NAZWA'      ,          ,          , 30,, ,'Nazwa załącznika',,,,1);
   __import.win_fld(_sWin,,'DATA'      ,          ,          , 5,, ,'Data załącznika',,,,1);
   __import.win_fld(_sWin,,'STATUS'      ,          ,          , 5,, ,'Status',,,,1);
   __import.win_fld(_sWin,,'UWAGI'      ,          ,          , 50,, ,'Uwagi',,'HELP',,1);
   __import.win_act(_sWin, ,'Usuń',,,,$'cur_tab(1,1).count()=0',,,1,$'cur_tab(1,1).count()=0');
   _generuj:=" {? __import.first & sql('select STATUS from :_a where STATUS=\''T\'' or :_a.STATUS=\''A\''',__import).size
               ||
                  {!
                  |?
                     {? __import.STATUS='T' | __import.STATUS='A'
                     || _plik:=fopen(__import.PATH,'br',0,1,1);
                        POM.TAB:='DOKUM';
                        POM.TYPDOK:='SYS';
                        DOKUM.prefix();
                        DOKUM.blank();
                        DOKUM.NR:=exec('numer_new','numery','PACZKA');
                        DOKUM.REFSQL:=__import.REFM;
                        DOKUM.NAZWA:=__import.NAZWA;
                        DOKUM.DATA:=__import.DATA;
                        DOKUM.LOK:=__import.PATH;
                        DOKUM.AUTOADD:='T';
                        DOKUM.STAT_REJ:=__import.STATUS;
                        {? __import.KHKOD<>''
                        || DOKUM.KH:=exec('FindInSet','#table','KH','KOD1',__import.KHKOD)
                        ?};
                        {? __import.JEZYK<>''
                        || _jezyk:={? __import.JEZYK='EN' || 'ANG' || 'POL' ?};
                           _slu:=exec('FindInSet','#table','SLU','NAZ','Języki obce',,,1);
                           DOKUM.JEZYK:=exec('FindInSet','#table','SLO','SL',_jezyk,_slu,,1)
                        ?};
                        {? DOKUM.add()
                        || exec('znak','numery','DOKUM');
                           DOKUM.bl_put('DOKUM',_plik,,,__import.NAZWA)
                        ?};
                        fclose(_plik);
                        obj_del(_plik)
                     ?};
                     __import.next
                  !};
                  sel_exit()
               || FUN.info('Brak plików spełniających kryteria importu.')
               ?}
              ";
   __import.win_act(_sWin, ,'Formuła','Importuj pliki MSDS/TDS',,,_generuj,,1);
   __import.win_act(_sWin, ,'Formuła','Legenda'@@,,,"exec('legenda','color','__msds#01')",,,,,,'L');
   __import.win_act(_sWin, ,'Kolejność' );
   __import.win_act(_sWin, ,'Szukaj');

   __import.win_fml(_sWin,,'UWAGI',,'ICON_BEFORE',"{? __import.STATUS='N'
                                                   || 'xwin16.png:6'
                                                   |? __import.STATUS='T'
                                                   || 'xwin16.png:1'
                                                   |? __import.STATUS='B'
                                                   || 'xwin16.png:5'
                                                   |? __import.STATUS='A'
                                                   || 'xwin16.png:7'
                                                   || '' ?}");

   __import.select(0)
?};
~~


\msds_zip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Formula tworzy paczke zip dla wybranego KTM wyrobu (z zalacznikami MSDS) w wybranym wariancie jezykowym
::----------------------------------------------------------------------------------------------------------------------
_wyn:=FUN.choice('Czy utowrzyć paczkę ZIP z plikami MSDS?'+
                  '\nJeśli dedydujesz się na uruchomienie funkcji to należy wskazać jeden z poniższych wariantów:',
                  ,'Wersja &angielska','Wersja &polska','Wersja a&ngielska + TDS','Wersja p&olska + TDS',,' - Generator paczki zip z plikami MSDS');

{? _wyn || exec('przygotuj_dane','qinka',_wyn) ?};
_wyn


\przygotuj_dane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Funkcja zbiera dane, ktore trafiaja do paczki zip MSDS
::   WE: _a - wersja jezykowa
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('___msds');
{?  var_pres('__msds')>0  || &__msds ?};
__msds:=tab_tmp(1
::      REFM
       ,'REFM' ,'STRING[16]','Ref materiału'
::      REFD
       ,'REFD' ,'STRING[16]','Ref dokum'
::      Indeks materiałowy
       ,'KTM'     ,'STRING[50]' ,'Indeks'
::      Nazwa indeksu materiałowego
       ,'N'       ,'STRING[100]','Nazwa'
::      DATA
       ,'DATA' ,'DATE','Data pliku'
::      UWAGI
       ,'UWAGI' ,'STRING[255]','Uwagi'
::      JEZYK
       ,'JEZYK' ,'STRING[3]','Wersja jezykowa'
::      Nazwa pliku
       ,'NAZWA' ,'STRING[100]','Nazwa pliku'
::      Dostawca surowca - kod
       ,'KHKOD' ,'STRING[10]','Dostawca - kod'
::      Dostawca surowca - nazwa
       ,'KHSKR' ,'STRING[10]','Dostawca - skrót'
       );


:: Funkcja na podstawie Karty technologiczne->Analizy->Struktura produktu (na koncu zwracam liste surowcow z grupy 07)
:: wykorzystalem stadanerdowe rozbieranie karty do listy surowcowej

:: ustalam refa karty na podstawie ktorej szukam surowcow
::_rodzaj:=FUN.choice('Proszę wskazać na podstawie jakich danych przygotować paczkę ZIP z plikami MSDS',
::                  ,'Karta domyślna','Wybór karty',,,,' - Generator paczki zip z plikami MSDS');
_rodzaj:=1;
{? _rodzaj=1
|| _kt:=sql('select REFERENCE as REF from TKTL where TKTL.KTM=\':_a\' and DEFAULT=\'T\'',$M.ref).REF;
   {? _kt<>''
   || _tktl:=exec('FindAndGet','#table',TKTL,_kt,,"TKTL.ref",null)
   || FUN.emsg('Brak domyślnej karty technologicznej dla indeksu %1.\nUtworzenie paczki zip niemożliwe.\nProszę o kontakt do działu IT.'[M.KTM]);
      _tktl:=null()
   ?}
:: przypadek nieobsluzony - ustalono z PS ze szukamy zawsze karty domyslnej
::|? _rodzaj=2
::|| _kt:=sql('select TKTL.NRK, TKTL.WER, TKTL.OPIS, REFERENCE as REF from TKTL where TKTL.KTM=\':_a\'',$M.ref);
::   {? _kt.size()>0
::   || exec('select','#table',_kt)
::   ?}
|| _tktl:=null()
?};

{? _tktl<>null
||
::----------------------------------------------------------------------------------------------------------------------
:: deklaracja klasy SURX
::----------------------------------------------------------------------------------------------------------------------
   exec('surx_decl','tech_mater');
::----------------------------------------------------------------------------------------------------------------------
:: inicjowanie obiektu klasy SURX i selekcja listy surowcow technologii
::----------------------------------------------------------------------------------------------------------------------
   VAR_DEL.delete('__SUR');
   exec('env_create','tech_structure',1);
   _env:=__ENV_STR;
   {? var_press('TAB',__ENV_STR.CHECK) > 0 || _env.CHECK.TAB.erase ?};
   {? var_pres('__SUR') > 0 || obj_del(__SUR) ?};
   __SUR:=obj_new(@.CLASS.SURX,_tktl,'T',0,,1);
:: odszukania surowcow elemtntarynych
   {? __SUR.TAB.first()
   || exec('add_sur','qinka',_a,__SUR.TAB,0)
   ?};
   obj_del(__SUR);
   exec('env_delete','tech_structure');
:: jesli udalo sie napelnic tabele z zalacznikami to buduje okno i wyswietlam wyniki
   {? type_of(__msds)=type_of(SYSLOG)
   ||
      _sWin:=__msds.mk_sel('Lista indeksów surowcowych dla '+M.KTM+' - '+M.N,'P',,'#__msds_swin',,,,,'U','T');
      __msds.win_sel(_sWin);
      __msds.win_fld(_sWin,,'KTM'     ,          ,          , 20,  , ,'Indeks',,'KTM',,1);
      __msds.win_fld(_sWin,,'N'       ,          ,          ,30,  , ,'Nazwa',,'N',,1);
      __msds.win_fld(_sWin,,'JEZYK'      ,          ,          , 5,, ,'Wersja językowa',,'JEZYK',,1);
      __msds.win_fld(_sWin,,'NAZWA'      ,          ,          , 100,, ,'Nazwa załącznika',,,,1);
      __msds.win_fld(_sWin,,'DATA'      ,          ,          , 10,, ,'Data załącznika',,,,1);
      __msds.win_fld(_sWin,,'KHSKR'      ,          ,          , 10,, ,'Dostawca',,,,1);
      __msds.win_fld(_sWin,,'UWAGI'      ,          ,          , 30,, ,'Uwagi',,,,1);
      __msds.win_act(_sWin, ,'Usuń',,,,$'cur_tab(1,1).count()=0',,,1,$'cur_tab(1,1).count()=0');
      _generuj:="{? __msds.first()
                 ||  exec('myDIALOG','object');
                     {? _nazwa:=gsub(form(date(),,2),'.','')+'_'+gsub(form(time,,3),':','')+'_KTM_'+gsub(M.KTM,'-','_');
                        (_dest:=myDIALOG.SaveFile('Pliki eksportu w formacie '@+' (*.zip)|*.zip','',_nazwa))<>''
                     || _ok:=0;
:: tutaj kod, ktory odpowiada za towrzenie paczki zip
                        _temp:=fmk_tmp_dir();
                        {? type_of('_temp')=type_of(~~) || return() ?};
                        _sep:=exec('sep','#file',2);
                        _zip_name:=_temp.get_path()+_sep+'zipfile.zip';
                        {!
                        |?
                           DOKUM.cntx_psh;
                           DOKUM.clear();
                           {? DOKUM.seek(__msds.REFD)
                           || _file_name:=_temp.get_path()+_sep+DOKUM.bl_info('DOKUM','NAME');
                              DOKUM.bl_get('DOKUM',_file_name);
                              _ok+=fpack_add(_zip_name,_file_name)
                           ?};
                           DOKUM.cntx_pop();
                           __msds.next
                        !};
                        {? _ok
                        || {? ~fcopy(_zip_name,'@'+_dest+'.zip',0,0,0)
                           || FUN.emsg('Nie udało się zapisać paczki we wsazanym miejscu na dysku.\nProszę o kontakt do działu IT.')
                           || FUN.info('Utworzono paczkę zip we wskazanym miejscu na dysku.')
                           ?}
                        || FUN.error('Tworzenie paczki zip nie powiodło się.\nProszę o kontakt do działu IT.')
                        ?};
                        sel_exit()
                     ?}
                 ?}";
      __msds.win_act(_sWin, ,'Formuła','Generuj paczkę zip',,,_generuj,,1);
      __msds.win_act(_sWin, ,'Kolejność' );
      __msds.win_act(_sWin, ,'Szukaj');

      __msds.win_fml(_sWin,,'UWAGI',,'ICON_BEFORE',"{? __msds.UWAGI<>'' || '__mwa.png:32' || '' ?}");

      __msds.select(0)
   ?}
:: analiza tabeli do funkcji tworzacej paczke zip
|| FUN.emsg('Wybrany indeks nie posiada karty technologicznej')
?};
~~


\add_zip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Tworzy archiwum zip z zawartością pola BLOB o akronimie acr tabeli tab, zwraca je w postaci obiektu plikowego
::   WE: _a - alias tabeli
::       _b - akronim pola BLOB
::       _c - nazwa pliku
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_acr:=_b;
::02-1769-000005
::_tmp:=fmk_tmp_dir;
::_sciezka:=_tmp.get_path;
::DOKUM.bl_get('DOKUM', _sciezka+'/'+DOKUM.NAZWA);
::fpack_add('/tmp/test1.zip',_sciezka)

_temp:=fmk_tmp_dir();
{? type_of('_temp')=type_of(~~) || return() ?};

_sep:=exec('sep','#file',2);

_file_name:=_temp.get_path()+_sep+_tab.bl_info(_acr,'NAME');
_tab.bl_get(_acr,_file_name);

_zip_name:=_temp.get_path()+_sep+'zipfile.zip';
fpack_add(_zip_name,__file_name)


\add_sur
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: petla po surowcach w celu napelnieniu tabeli wystwietlanej dla usera
::   WE: _a - wersja jezykowa
::       _b - indeks do dalszego poszukiwania struktury surowca karty bez powiazania jak karta domyslna/ lub tabela jesli c=0
::       _c - poszukuje nizszego poziomu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: posiadając strukture karty poszukuje nizszych poziomow poprzez odszukanie czy dany indeks z grupy 07 posiada karte
{? _c=0
|| _surowce:=sql('select distinct :_a.PT_S as Indeks, :_a.PT_N as Nazwa from :_a where SUBSTR(:_a.PT_S,1,2)=\'07\'',_b);
   exec('add_msds','qinka',_a,_surowce)
||
:: jesli tutaj jestem to znaczy ze obrabiam indeks posiadajacy karte i dekopomuje go na surowce elementarne (uwaga rekurencja)
   _mat:=exec('FindInSet','#table','M','MATKTM',_b,_b);
   _tktl:=exec('dflt_ktl','tech_prod',_mat);
   {? _tktl<>null()
   || {? var_pres('__SUR')>0 || obj_del(__SUR) ?};
      __SUR:=obj_new(@.CLASS.SURX,_tktl,'T',0,,1);
      _dalsze_surowce:=sql('select distinct :_a.PT_S as Indeks, :_a.PT_N as Nazwa from :_a where SUBSTR(:_a.PT_S,1,2)=\'07\'',__SUR.TAB);
      exec('add_msds','qinka',_a,_dalsze_surowce,1)
   ?}
?};
1


\add_msds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Funkcja napelania tabele z zalacznikami (UWAGA - rekurencja)
::   WE: _a - wersja jezykowa
::       _b - tabela surowcow
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_surowce:=_b;
{? _surowce.first
|| {!
   |?
:: jesli indeks posiada karte to szukam surowcow w niej uzytych
      _mat:=exec('FindInSet','#table','M','MATKTM',_surowce.INDEKS,_surowce.INDEKS);
      _tktl:=exec('dflt_ktl','tech_prod',_mat);
:: jesli indeks nie posiada swojej karty to dodaje go to tabeli wynikowej, dodatkowo kontroluje czy juz nie mam takiego w tabeli
:: potrzebuje tylko unikalne indeksy
      {? _tktl=null()
      ||
         {? sql('select * from :_a where :_a.KTM=\':_b\'',__msds,_surowce.INDEKS).size=0
         ||
            _del:=0;
            __msds.blank(1);
            __msds.KTM:=_surowce.INDEKS;
            __msds.N:=_surowce.NAZWA;
            __msds.REFM:=sql('select REFERENCE as REF from M where KTM=\':_a\'',__msds.KTM).REF;
            __msds.JEZYK:={? _a=1 | _a=3 || 'ANG' || 'POL' ?};
            _dost:=sql('select MDOST.KH as KHREF from MDOST where MDOST.M=\':_a\' and MDOST.D=\'T\'',__msds.REFM);
            _kh:=exec('FindAndGet','#table',KH,_dost.KHREF,,"__msds.KHKOD:=KH.KOD;__msds.KHSKR:=KH.SKR",'');
            {? _kh=''
            ||
:: jesli nie ma domyslnego kontrahenta to szukam pierwszy zalacznik z listy bez przypisanego kontrahenta
               _dokum:=sql('select DOKUM.REFERENCE as REF, DOKUM.NAZWA, DOKUM.DATA, DOKUM.DOKUM, DOKUM.CZAS
                           from DOKUM join SLO using(DOKUM.JEZYK,SLO.reference)
                           where DOKUM.REFSQL=\':_a\'
                           and SLO.KOD=\':_b\'
                           and UPPER(NAZWA) like \'MSDS$_%\' ESCAPE \'$\'
                           order by DATA,CZAS',__msds.REFM,__msds.JEZYK)
            ||
:: jesli jest domuslny to szukam zalcznika z dokladnoscia do kontrahenta
               _dokumkh:=exec('FindAndGet','#table',KH,_dost.KHREF,,"ref",null);
               _dokum:=sql('select DOKUM.REFERENCE as REF, DOKUM.NAZWA, DOKUM.DATA, DOKUM.DOKUM, DOKUM.CZAS
                           from DOKUM join SLO using(DOKUM.JEZYK,SLO.reference)
                           where DOKUM.REFSQL=\':_a\'
                           and SLO.KOD=\':_b\'
                           and DOKUM.KH=\':_c\'
                           and UPPER(NAZWA) like \'MSDS$_%\' ESCAPE \'$\'
                           order by DATA,CZAS',__msds.REFM,__msds.JEZYK,$_dokumkh)
            ?};
            {? _dokum.last
            || DOKUM.cntx_psh;
               DOKUM.clear();
               {? DOKUM.seek(_dokum.REF)
               || _name:=DOKUM.bl_info('DOKUM','NAME')
               ?};
               DOKUM.cntx_pop;
               __msds.NAZWA:=_name;
               __msds.DATA:=_dokum.DATA;
               __msds.REFD:=_dokum.REF

            || __msds.UWAGI:='UWAGA - Brak pliku MSDS do exportu'
            ?};
            __msds.add;
            &_dokum;&_dost;
:: dodatkowa petla dla plikow TDS - zalezy od wybranego wariantu
            {? _a=3 | _a=4
            ||
               _del:=0;
               __msds.blank(1);
               __msds.KTM:=_surowce.INDEKS;
               __msds.N:=_surowce.NAZWA;
               __msds.REFM:=sql('select REFERENCE as REF from M where KTM=\':_a\'',__msds.KTM).REF;
               __msds.JEZYK:={? _a=3 || 'ANG' || 'POL' ?};
               _dost:=sql('select MDOST.KH as KHREF from MDOST where MDOST.M=\':_a\' and MDOST.D=\'T\'',__msds.REFM);
               _kh:=exec('FindAndGet','#table',KH,_dost.KHREF,,"__msds.KHKOD:=KH.KOD;__msds.KHSKR:=KH.SKR",'');
               {? _kh=''
               ||
:: jesli nie ma domyslnego kontrahenta to szukam pierwszy zalacznik z listy bez przypisanego kontrahenta
                  _dokum:=sql('select DOKUM.REFERENCE as REF, DOKUM.NAZWA, DOKUM.DATA, DOKUM.DOKUM, DOKUM.CZAS
                              from DOKUM join SLO using(DOKUM.JEZYK,SLO.reference)
                              where DOKUM.REFSQL=\':_a\'
                              and SLO.KOD=\':_b\'
                              and UPPER(NAZWA) like \'TDS$_%\' ESCAPE \'$\'
                              order by DATA,CZAS',__msds.REFM,__msds.JEZYK)
               ||
:: jesli jest domuslny to szukam zalcznika z dokladnoscia do kontrahenta
                  _dokumkh:=exec('FindAndGet','#table',KH,_dost.KHREF,,"ref",null);
                  _dokum:=sql('select DOKUM.REFERENCE as REF, DOKUM.NAZWA, DOKUM.DATA, DOKUM.DOKUM, DOKUM.CZAS
                              from DOKUM join SLO using(DOKUM.JEZYK,SLO.reference)
                              where DOKUM.REFSQL=\':_a\'
                              and SLO.KOD=\':_b\'
                              and DOKUM.KH=\':_c\'
                              and UPPER(NAZWA) like \'TDS$_%\' ESCAPE \'$\'
                              order by DATA,CZAS',__msds.REFM,__msds.JEZYK,$_dokumkh)
               ?};
               {? _dokum.last
               || DOKUM.cntx_psh;
                   DOKUM.clear();
                  {? DOKUM.seek(_dokum.REF)
                  || _name:=DOKUM.bl_info('DOKUM','NAME')
                  ?};
                  DOKUM.cntx_pop;
                  __msds.NAZWA:=_name;
                  __msds.DATA:=_dokum.DATA;
                  __msds.REFD:=_dokum.REF

               || __msds.UWAGI:='UWAGA - Brak pliku TDS do exportu'
               ?};
               __msds.add;
               &_dokum;&_dost
            ?}
         || _del:=0
         ?}
      ||
:: jesli indeks posiada karte to przekazuje go do dalszej obrobki (uwaga rekurencja)
         exec('add_sur','qinka',_a,_surowce.INDEKS,1);
:: obrobiony indeks posiadajacy karte usuwam
         _del:=_surowce.del
      ?};
:: kontroluje czy del sie powiodl, aby wykonywac nexta tylko wtedy kiedy nie del zwrocil 0
      {? _del || 1 || _surowce.next() ?}
   !}
?};
1


\zlecmsds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO_22.26]
:: OPIS: Na podstawie zlecenia odszukanie powiązanych surowcow uzytych do produkcji wyrobu
::----------------------------------------------------------------------------------------------------------------------
{? var_press('prod')>100 || obj_del(prod) ?};
:: tabela raportów produkcji dla danego wyrobu
prod:=sql('select
            distinct ZL.OD,
                     M.KTM,
                     M.N,
                     ZL.OPIS,
                     ZL.SYM as ZLSYM,
                     ZL.NRNZL
                from @DK
                left join M using (DK.M, M.reference)
                left join @ND using(DK.N, ND.reference)
                left join ZL using (DK.ZL, ZL.reference)
                left join TYPYDOK using (ND.TYP, TYPYDOK.reference)
               where DK.M=:_a and TYPYDOK.T=\'RP\' order by 1 DESC',M.ref);
:: odszukanie zlecenia zbiorczego dla wyrobu na potrzeby funkji, która odszuka liste surowców wydanych do danego RP
{? prod.first()
|| {!
   |?
      {? prod.ZLSYM<>''
      || _zl:=exec('FindInSet','#table','ZL','SYM',prod.ZLSYM,);
         ZLZAM.cntx_psh;
         ZLZAM.index('ZLPD');
         ZLZAM.prefix(_zl,'Z');
         {? ZLZAM.first
         || exec('FindAndGet','#table',ZK_P,ZLZAM.ZAMPOZ,,"prod.OPIS:='Kontrahent: '+ZK_P.KH().KOD+' - '+ZK_P.KH().SKR",'');
            _zkn:=exec('FindAndGet','#table',ZK_P,ZLZAM.ZAMPOZ,,"N",'');
            exec('FindAndGet','#table',ZK_N,_zkn,,"prod.OPIS+=' (Zam. Merit: '+ZK_N.SYM+' ,Zam. klienta: '+ZK_N.ZAM_KL+')'",'');
            prod.put
         ?};
         ZLZAM.cntx_pop
      ?};
      prod.next()
   !}
?};
:: okno z wynikami
_sWin:=prod.mk_sel('','P',,'#prod_swin',,,,,'U','T',,,,'html_maximized');
prod.win_sel(_sWin);
prod.win_fld(_sWin,,'OD'     ,          ,          , 10,  , ,'Data zlecenia',,'KTM',,1);
prod.win_fld(_sWin,,'ZLSYM'   ,          ,          , 20,  , ,'Symbol zlecenia',,'ZLSYM',,1);
prod.win_fld(_sWin,,'OPIS'    ,          ,          ,70,  , ,'Opis ze zlecenia',,'OPIS',,1);
prod.win_fld(_sWin,,'KTM'     ,          ,          , 20,  , ,'Indeks wyrobu',,'KTM',,1);
prod.win_fld(_sWin,,'N'       ,          ,          ,50,  , ,'Nazwa wyrobu',,'N',,1);
prod.win_act(_sWin, ,'Kolejność' );
prod.win_act(_sWin, ,'Szukaj');
_formula:="exec('zlecmsds_zip','qinka')";
prod.win_act(_sWin, ,'Formuła','Surowce do &paczki MSDS/TDS',,,_formula,,1);
prod.select



\zlecmsds_zip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Formula tworzy paczke zip dla wybranego KTM wyrobu (z zalacznikami MSDS) w wybranym wariancie jezykowym
::----------------------------------------------------------------------------------------------------------------------
_wyn:=FUN.choice('Czy utowrzyć paczkę ZIP z plikami MSDS?'+
                  '\nJeśli dedydujesz się na uruchomienie funkcji to należy wskazać jeden z poniższych wariantów:',
                  ,'Wersja &angielska','Wersja &polska','Wersja a&ngielska + TDS','Wersja p&olska + TDS',,' - Generator paczki zip z plikami MSDS');

{? _wyn || exec('przygotuj_dane_zlec','qinka',_wyn) ?};
_wyn


\przygotuj_dane_zlec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Funkcja zbiera dane, ktore trafiaja do paczki zip MSDS
::   WE: _a - wersja jezykowa
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('___msds');
{?  var_pres('__msds')>0  || &__msds ?};
__msds:=tab_tmp(1
::      REFM
       ,'REFM' ,'STRING[16]','Ref materiału'
::      REFD
       ,'REFD' ,'STRING[16]','Ref dokum'
::      Indeks materiałowy
       ,'KTM'     ,'STRING[50]' ,'Indeks'
::      Nazwa indeksu materiałowego
       ,'N'       ,'STRING[100]','Nazwa'
::      DATA
       ,'DATA' ,'DATE','Data pliku'
::      UWAGI
       ,'UWAGI' ,'STRING[255]','Uwagi'
::      JEZYK
       ,'JEZYK' ,'STRING[3]','Wersja jezykowa'
::      Nazwa pliku
       ,'NAZWA' ,'STRING[100]','Nazwa pliku'
::      Dostawca surowca - kod
       ,'KHKOD' ,'STRING[10]','Dostawca - kod'
::      Dostawca surowca - nazwa
       ,'KHSKR' ,'STRING[10]','Dostawca - skrót'
::      Dostawca surowca - ref
       ,'KHPRDK' ,'STRING[16]','Dostawca - ref'
::      Dostawca surowca - symbol dokumentu
       ,'SYMPRDK' ,'STRING[20]','Symbol dok źródłowego'
       );


:: odszukanie partii powiązanych ze zleceniem
_zl:=exec('FindInSet','#table','ZL','SYM',prod.ZLSYM,);
_zparn:=sql('select ZPARN.REFERENCE as REF from ZPARN where ZPARN.ZL=:_a',_zl);

:: moze powstac kilka partii do zlecenia wyrobu, dlatego konieczna petla
{? _zparn.first>0
||
:: wykorzystanie funkcji analizy partii do zebrania listy surowcow
   {!
   |?
      _surowce:=exec('analiza_partii','qinka',_zparn.REF);
      {? _surowce.first>0
      || exec('add_msds_zlec','qinka',_a,_surowce,0)
      ?};
:: jesli udalo sie napelnic tabele z zalacznikami to buduje okno i wyswietlam wyniki
      {? type_of(__msds)=type_of(SYSLOG)
      ||
         _sWin:=__msds.mk_sel('Lista indeksów surowcowych dla '+M.KTM+' - '+M.N,'P',,'#zlecmsds',,,,,'U','T');
         __msds.win_sel(_sWin);
         __msds.win_fld(_sWin,,'KTM'     ,          ,          , 20,  , ,'Indeks',,'KTM',,1);
         __msds.win_fld(_sWin,,'N'       ,          ,          ,30,  , ,'Nazwa',,'N',,1);
         __msds.win_fld(_sWin,,'JEZYK'      ,          ,          , 5,, ,'Wersja językowa',,'JEZYK',,1);
         __msds.win_fld(_sWin,,'NAZWA'      ,          ,          , 100,, ,'Nazwa załącznika',,,,1);
         __msds.win_fld(_sWin,,'DATA'      ,          ,          , 10,, ,'Data załącznika',,,,1);
         __msds.win_fld(_sWin,,'KHSKR'      ,          ,          , 10,, ,'Dostawca',,,,1);
         __msds.win_fld(_sWin,,'SYMPRDK'      ,          ,          , 20,, ,'Dostawa źródłowa',,,,1);
         __msds.win_fld(_sWin,,'UWAGI'      ,          ,          , 30,, ,'Uwagi',,,,1);
         __msds.win_act(_sWin, ,'Usuń',,,,$'cur_tab(1,1).count()=0',,,1,$'cur_tab(1,1).count()=0');
         _generuj:="{? __msds.first()
                    ||  exec('myDIALOG','object');
                        {? _nazwa:=gsub(form(date(),,2),'.','')+'_'+gsub(form(time,,3),':','')+'_KTM_'+gsub(M.KTM,'-','_');
                           (_dest:=myDIALOG.SaveFile('Pliki eksportu w formacie '@+' (*.zip)|*.zip','',_nazwa))<>''
                        || _ok:=0;
:: tutaj kod, ktory odpowiada za towrzenie paczki zip
                           _temp:=fmk_tmp_dir();
                           {? type_of('_temp')=type_of(~~) || return() ?};
                           _sep:=exec('sep','#file',2);
                           _zip_name:=_temp.get_path()+_sep+'zipfile.zip';
                           {!
                           |?
                              DOKUM.cntx_psh;
                              DOKUM.clear();
                              {? DOKUM.seek(__msds.REFD)
                              || _file_name:=_temp.get_path()+_sep+DOKUM.bl_info('DOKUM','NAME');
                                 DOKUM.bl_get('DOKUM',_file_name);
                                 _ok+=fpack_add(_zip_name,_file_name)
                              ?};
                              DOKUM.cntx_pop();
                              __msds.next
                           !};
                           {? _ok
                           || {? ~fcopy(_zip_name,'@'+_dest+'.zip',0,0,0)
                              || FUN.emsg('Nie udało się zapisać paczki we wsazanym miejscu na dysku.\nProszę o kontakt do działu IT.')
                              || FUN.info('Utworzono paczkę zip we wskazanym miejscu na dysku.')
                              ?}
                           || FUN.error('Tworzenie paczki zip nie powiodło się.\nProszę o kontakt do działu IT.')
                           ?};
                           sel_exit()
                        ?}
                    ?}";
         __msds.win_act(_sWin, ,'Formuła','Generuj paczkę zip',,,_generuj,,1);
         __msds.win_act(_sWin, ,'Kolejność' );
         __msds.win_act(_sWin, ,'Szukaj');

         __msds.win_fml(_sWin,,'UWAGI',,'ICON_BEFORE',"{? __msds.UWAGI<>'' || '__mwa.png:32' || '' ?}")
      ?};
      &_surowce;
      _zparn.next
   !};
   __msds.select(0)
:: analiza tabeli do funkcji tworzacej paczke zip
|| FUN.emsg('Wybrany indeks nie posiada rozliczonych surowców do powiązanego zlecenia produkcyjnego.')
?};
~~


\add_msds_zlec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [21.37]
:: OPIS: Funkcja napelania tabele z zalacznikami
::   WE: _a - wersja jezykowa
::       _b - tabela surowcow
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_surowce:=_b;
{? _surowce.first
|| {!
   |?
:: do listy trafiaja surowce, ktore wystapily na liscie surowcow do zlecenia, moga byc dwa razy jesli pochodzily od
:: roznych dostawcow z uwagi na zamienniki
      _mat:=exec('FindInSet','#table','M','MATKTM',_surowce.INDEKS,_surowce.INDEKS);
      {? sql('select * from :_a where :_a.KTM=\':_b\' and :_a.KHPRDK=\':_c\'',__msds,_surowce.INDEKS,_surowce.KHPRDK).size=0
      ||
         _del:=0;
         __msds.blank(1);
::         {? _surowce.INDEKS='07-0010-000606' || debug() ?};
         __msds.KTM:=_surowce.INDEKS;
         __msds.N:=_surowce.NAZWA;
         __msds.KHPRDK:=_surowce.KHPRDK;
         __msds.SYMPRDK:=_surowce.SYMPRDK;
         __msds.REFM:=sql('select REFERENCE as REF from M where KTM=\':_a\'',__msds.KTM).REF;
         __msds.JEZYK:={? _a=1 | _a=3 || 'ANG' || 'POL' ?};
         _kh:=exec('FindAndGet','#table',KH,_surowce.KHPRDK,,"__msds.KHKOD:=KH.KOD;__msds.KHSKR:=KH.SKR",'');
         _dokumkh:=exec('FindAndGet','#table',KH,_surowce.KHPRDK,,"ref",null);
         _dokum:=sql('select DOKUM.REFERENCE as REF, DOKUM.NAZWA, DOKUM.DATA, DOKUM.DOKUM, DOKUM.CZAS
                     from DOKUM join SLO using(DOKUM.JEZYK,SLO.reference)
                     where DOKUM.REFSQL=\':_a\'
                     and SLO.KOD=\':_b\'
                     and DOKUM.KH=\':_c\'
                     and UPPER(NAZWA) like \'MSDS$_%\' ESCAPE \'$\'
                     order by DATA,CZAS',__msds.REFM,__msds.JEZYK,$_dokumkh);
         {? _dokum.last
         || DOKUM.cntx_psh;
            DOKUM.clear();
            {? DOKUM.seek(_dokum.REF)
            || _name:=DOKUM.bl_info('DOKUM','NAME')
            ?};
            DOKUM.cntx_pop;
            __msds.NAZWA:=_name;
            __msds.DATA:=_dokum.DATA;
            __msds.REFD:=_dokum.REF

         || __msds.UWAGI:='UWAGA - Brak pliku MSDS do exportu'
         ?};
         __msds.add;
         &_dokum;
:: dodatkowa petla dla plikow TDS - zalezy od wybranego wariantu
         {? _a=3 | _a=4
         ||
            _del:=0;
            __msds.blank(1);
            __msds.KTM:=_surowce.INDEKS;
            __msds.N:=_surowce.NAZWA;
            __msds.KHPRDK:=_surowce.KHPRDK;
            __msds.SYMPRDK:=_surowce.SYMPRDK;
            __msds.REFM:=sql('select REFERENCE as REF from M where KTM=\':_a\'',__msds.KTM).REF;
            __msds.JEZYK:={? _a=3 || 'ANG' || 'POL' ?};
            _kh:=exec('FindAndGet','#table',KH,_surowce.KHPRDK,,"__msds.KHKOD:=KH.KOD;__msds.KHSKR:=KH.SKR",'');
            _dokumkh:=exec('FindAndGet','#table',KH,_surowce.KHPRDK,,"ref",null);
            _dokum:=sql('select DOKUM.REFERENCE as REF, DOKUM.NAZWA, DOKUM.DATA, DOKUM.DOKUM, DOKUM.CZAS
                        from DOKUM join SLO using(DOKUM.JEZYK,SLO.reference)
                        where DOKUM.REFSQL=\':_a\'
                        and SLO.KOD=\':_b\'
                        and DOKUM.KH=\':_c\'
                        and UPPER(NAZWA) like \'TDS$_%\' ESCAPE \'$\'
                        order by DATA,CZAS',__msds.REFM,__msds.JEZYK,$_dokumkh);
            {? _dokum.last
            || DOKUM.cntx_psh;
                DOKUM.clear();
               {? DOKUM.seek(_dokum.REF)
               || _name:=DOKUM.bl_info('DOKUM','NAME')
               ?};
               DOKUM.cntx_pop;
               __msds.NAZWA:=_name;
               __msds.DATA:=_dokum.DATA;
               __msds.REFD:=_dokum.REF

            || __msds.UWAGI:='UWAGA - Brak pliku TDS do exportu'
            ?};
            __msds.add;
            &_dokum
         ?}
      || _del:=0
      ?};
:: kontroluje czy del sie powiodl, aby wykonywac nexta tylko wtedy kiedy nie del zwrocil 0
      {? _del || 1 || _surowce.next() ?}
   !}
?};
1


\analiza_partii
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP
::  MOD: PeKa - wykorzystałem formule analizy partii od strony dostaw magazynowych
:: OPIS: Przygotowuje tabelę dla potrzeb analizy surowcowej partii wyrobu
::   WE: _a - $ZPARN.ref
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__tab_sur','__ref_prod');
:: Zapis związany z wyrobem - informacje podstawowe dokumenty przyjęcia/zwrotu
_tab_rp:=sql('select
                    ZPARN.SYM SYM_PAR,
                    ND.SYM SYM_DOK,
                    DK.P POZ_DOK,
                    DK.PLUS,
                    ND.D DATA_DOK,
                    M.KTM,
                    M.N,
                    DK.SCEAN,
                    DK_C.ZPARN,
                    ZPARN.SYM SYM_PARS,
                    DK_C.WAR01 W01_PART,
                    DK_C.WAR02 W02_PD,
                    DK.TW,
                    JM.KOD JM,
                    DK.IL,
                    \'00-00-00-00-00-00-00-00-00-00\' as POZYCJA,
                    \'00\' P1,
                    \'00\' P2,
                    \'00\' P3,
                    \'00\' P4,
                    \'00\' P5,
                    \'00\' P6,
                    \'00\' P7,
                    \'00\' P8,
                    \'00\' P9,
                    \'00\' P10
               from @DK
                    join DK_C
                    join @ND
                    join M using(DK.M,M.REFERENCE)
                    join JM using(DK.JM,JM.REFERENCE)
                    join ZPARN using(DK_C.ZPARN, ZPARN.REFERENCE)
              where DK_C.ZPARN=\':_a\' and DK.ZL is not null',
                    _a);
:: Zapisy dotyczące rozliczeia surowców (poziom I)
__tab_sur:=sql('select
                    cast(null as TREE_REF_TYPE) TREE_REF,
                    ZPARN.SYM SYM_PAR,
                    ND.SYM SYM_DOK,
                    DK.P POZ_DOK,
                    DK.PLUS,
                    ND.D DATA_DOK,
                    M.KTM,
                    M.N,
                    DK.SCEAN,
                    DK_C.ZPARN,
                    ZPARN_S.SYM SYM_PARS,
                    DK_C.WAR01 W01_PART,
                    DK_C.WAR02 W02_PD,
                    DK.TW,
                    JM.KOD JM,
                    ZPARS.IL,
                    DK.PRDK,
                    SPACE(20) as KHPRDK,
                    SPACE(20) as SYMPRDK,
                    \'01-00-00-00-00-00-00-00-00-00\' as POZYCJA,
                    \'01\' P1,
                    \'00\' P2,
                    \'00\' P3,
                    \'00\' P4,
                    \'00\' P5,
                    \'00\' P6,
                    \'00\' P7,
                    \'00\' P8,
                    \'00\' P9,
                    \'00\' P10
       from @ZPARS
            join ZPARN using(ZPARS.PARTIA,ZPARN.REFERENCE)
            join M using(ZPARS.KTM,M.REFERENCE)
            join @DK using(ZPARS.SQLDOK,DK.REFERENCE)
            join JM using(DK.JM,JM.REFERENCE)
            join DK_C using(DK.DK_C,DK_C.REFERENCE)
            left join ZPARN as ZPARN_S using(DK_C.ZPARN,ZPARN_S.REFERENCE)
            join @ND
      where ZPARS.PARTIA=\':_a\'
      order by TREE_REF, SYM_PAR
          ',_a,1);

:: Nadanie unikatowych numerów na poziomie I
{? __tab_sur.first()
|| _i:=1;
   {!|? __tab_sur.POZYCJA:=form(_i,-2)+(2-__tab_sur.POZYCJA);
         __tab_sur.put; _i+=1;
         __tab_sur.next()
   !}
?};

:: q_sel(__tab_sur);

:: Dodanie informacji do tabeli __tab_sur o produkcie który sprawdzamy
{? _tab_rp.first()
||    __tab_sur.TREE_REF:=0;
      __tab_sur.SYM_PAR:=_tab_rp.SYM_PAR;
      __tab_sur.SYM_DOK:=_tab_rp.SYM_DOK;
      __tab_sur.POZ_DOK:=_tab_rp.POZ_DOK;
      __tab_sur.PLUS:=_tab_rp.PLUS;
      __tab_sur.DATA_DOK:=_tab_rp.DATA_DOK;
      __tab_sur.KTM:=_tab_rp.KTM;
      __tab_sur.N:=_tab_rp.N;
      __tab_sur.SCEAN:=_tab_rp.SCEAN;
      __tab_sur.ZPARN:='';
      __tab_sur.SYM_PARS:=_tab_rp.SYM_PARS;
      __tab_sur.W01_PART:=_tab_rp.W01_PART;
      __tab_sur.W02_PD:=_tab_rp.W02_PD;
      __tab_sur.TW:=_tab_rp.TW;
      __tab_sur.JM:=_tab_rp.JM;
      __tab_sur.IL:=_tab_rp.IL;
      __tab_sur.POZYCJA:=_tab_rp.POZYCJA;
      __tab_sur.add()
?};
__ref_prod:=__tab_sur.ref();

__tab_sur.for_each("{? __tab_sur.ref()<>__ref_prod || __tab_sur.TREE_REF:=__ref_prod; __tab_sur.put ?}");

:: Dodanie zapisów w przypadku występowania półproduktów
_tab_sur:=sql('select :_a.*,:_a.REFERENCE as REF_SUR from :_a where :_a.ZPARN<>\'\'',__tab_sur);
{? _tab_sur.first()
|| {!
   |? __tab_sur.seek(_tab_sur.REF_SUR);
      exec('analiza_sur','qinka', _tab_sur.ZPARN,2,_tab_sur.POZYCJA,__tab_sur.ref());
      _tab_sur.next()
   !}
?};

:: Dodanie informacjio poziomie zagłębienia surowca
{? __tab_sur.first()
|| {!|? __tab_sur.P1:=2+__tab_sur.POZYCJA;
        __tab_sur.P2:=2+(3-__tab_sur.POZYCJA);
        __tab_sur.P3:=2+(6-__tab_sur.POZYCJA);
        __tab_sur.P4:=2+(9-__tab_sur.POZYCJA);
        __tab_sur.P5:=2+(12-__tab_sur.POZYCJA);
        __tab_sur.P6:=2+(15-__tab_sur.POZYCJA);
        __tab_sur.P7:=2+(18-__tab_sur.POZYCJA);
        __tab_sur.P8:=2+(21-__tab_sur.POZYCJA);
        __tab_sur.P9:=2+(24-__tab_sur.POZYCJA);
        __tab_sur.P10:=__tab_sur.POZYCJA+2;
        __tab_sur.put;
        __tab_sur.next()
   !}
?};
_surowce:=sql('select :_a.KTM as INDEKS,
                      :_a.N as NAZWA,
                      :_a.KHPRDK,
                      :_a.PRDK,
                      :_a.SYMPRDK,
                      :_a.SCEAN
                 from :_a where SUBSTR(:_a.KTM,1,2)=\'07\' and :_a.SYM_PARS=\'\'',__tab_sur);
{? _surowce.first()
|| {!
   |?
::      {? _surowce.INDEKS='07-0010-000606' || debug() ?};
      {? _surowce.PRDK<>''
      || _nd:=exec('FindAndGet','#table',DK,_surowce.PRDK,,"DK.N",'');
         _surowce.SYMPRDK:=exec('FindAndGet','#table',ND,_nd,,"ND.SYM",'');
         _surowce.KHPRDK:=exec('FindAndGet','#table',DK,_surowce.PRDK,,"$DK.KH",'');
         _surowce.put
      ?};
:: jesli kontrahent jest pusty, bo pochodzi dokumentu np. MP to szukam jeszcze przez SCEAN
      {? _surowce.KHPRDK=''
      ||
::         {? _surowce.INDEKS='07-0010-000606' || debug() ?};
         _scean:=sql('select DK.PRDK
                           from @DK
                           where DK.SCEAN=\':_a\' and DK.KH is not null',_surowce.SCEAN);
         {? _scean.PRDK<>''
         ||
            _nd:=exec('FindAndGet','#table',DK,_scean.PRDK,,"DK.N",'');
            _surowce.SYMPRDK:=exec('FindAndGet','#table',ND,_nd,,"ND.SYM",'');
            _surowce.KHPRDK:=exec('FindAndGet','#table',DK,_scean.PRDK,,"$DK.KH",'');
            _surowce.put
         ?};
         &_scean
      ?};
      _surowce.next()
   !}
?};
_surowce


\analiza_sur
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [21.14]
::  MOD: PeKa - wykorzystałem formule analizy partii od strony dostaw magazynowych
:: OPIS: Dodaje surowce dla poszczególnych półproduktów (funkcja rekurencyjna) do tabeli __tab_sur
::   WE: _a - $ZPARN.ref,
::       _b - liczba - poziom zagłębienia,
::       _c - aktualna pozycja - '00-01-01-00-01-01..'
::       _d - ref pozycji produktu/półproduktu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab_sur:=sql('select
                    ZPARN.SYM SYM_PAR,
                    ND.SYM SYM_DOK,
                    DK.P POZ_DOK,
                    DK.PLUS,
                    ND.D DATA_DOK,
                    M.KTM,
                    M.N,
                    DK.SCEAN,
                    DK_C.ZPARN,
                    ZPARN_S.SYM SYM_PARS,
                    DK_C.WAR01 W01_PART,
                    DK_C.WAR02 W02_PD,
                    DK.TW,
                    JM.KOD JM,
                    ZPARS.IL,
                    DK.PRDK,
                    \'00-00-00-00-00-00-00-00-00-00\' as POZYCJA,
                    \'01\' P1,
                    \'00\' P2,
                    \'00\' P3,
                    \'00\' P4,
                    \'00\' P5,
                    \'00\' P6,
                    \'00\' P7,
                    \'00\' P8,
                    \'00\' P9,
                    \'00\' P10
       from @ZPARS
            join ZPARN using(ZPARS.PARTIA,ZPARN.REFERENCE)
            join M using (ZPARS.KTM,M.REFERENCE)
            join @DK using(ZPARS.SQLDOK,DK.REFERENCE)
            join JM using(DK.JM,JM.REFERENCE)
            join DK_C using(DK.DK_C,DK_C.REFERENCE)
            left join ZPARN as ZPARN_S using(DK_C.ZPARN,ZPARN_S.REFERENCE)
            join @ND
      where ZPARS.PARTIA=\':_a\'
          ',_a,_b);
:: q_sel(_tab_sur);
{? _tab_sur.first()
|| _i:=1;
   {!
   |? __tab_sur.TREE_REF:=_d;
      __tab_sur.SYM_PAR:=_tab_sur.SYM_PAR;
      __tab_sur.SYM_DOK:=_tab_sur.SYM_DOK;
      __tab_sur.POZ_DOK:=_tab_sur.POZ_DOK;
      __tab_sur.PLUS:=_tab_sur.PLUS;
      __tab_sur.DATA_DOK:=_tab_sur.DATA_DOK;
      __tab_sur.KTM:=_tab_sur.KTM;
      __tab_sur.N:=_tab_sur.N;
      __tab_sur.SCEAN:=_tab_sur.SCEAN;
      __tab_sur.ZPARN:=_tab_sur.ZPARN;
      __tab_sur.SYM_PARS:=_tab_sur.SYM_PARS;
      __tab_sur.W01_PART:=_tab_sur.W01_PART;
      __tab_sur.W02_PD:=_tab_sur.W02_PD;
      __tab_sur.TW:=_tab_sur.TW;
      __tab_sur.JM:=_tab_sur.JM;
      __tab_sur.IL:=_tab_sur.IL;
      __tab_sur.PRDK:=_tab_sur.PRDK;
      __tab_sur.POZYCJA:=(((_b-1)*3)+_c)+form(_i,-2)+'-'+((_b*3)-_tab_sur.POZYCJA);
      __tab_sur.add();
      {? _tab_sur.ZPARN<>'' & _a<>_tab_sur.ZPARN
      || exec('analiza_sur','qinka',_tab_sur.ZPARN,_b+1,__tab_sur.POZYCJA,__tab_sur.ref())
      ?};
      _i+=1;
      _tab_sur.next()
   !}
?};
::q_sel(__tab_sur);
1