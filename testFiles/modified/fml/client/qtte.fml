:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: qtte.fml
:: Utworzony: 28.08.2020
:: Autor: areKc
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obslugi funkcji dla klienta w dziedzinie Produkcja.
::======================================================================================================================


\AnalizaBrakujacychSurowcowGrupa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.14 NUCO]
:: OPIS: Analiza brakujących surowców do wykonania produkcji dla zaznaczonej grupy pozycji.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('AnalizaSurowcowTab','qtte');
_repeat:='';

_TMP:=PROD_REJ.sel_aget();
{? _TMP.first()
|| exec('AnalizaSurowcowBegin','qtte');
   _size:=_TMP.size();
   _cnt:=0;
   {!
   |? {? PROD_REJ.seek(_TMP.REF,)
      || _repeat:=exec('AnalizaSurowcow','qtte',_TAB,_repeat)
      ?};
      progress(int(100*(_cnt+=1)/_size),'Trwa analiza dostępności materiałów.'@,'Przetwarzanie danych'@);
      _TMP.next()
   !};
   prgs_clr();
   exec('AnalizaSurowcowEnd','qtte');
   _TMP.first();
   PROD_REJ.seek(_TMP.REF,)
?};

exec('AnalizaSurowcowSel','qtte',_TAB);
~~


\AnalizaBrakujacychSurowcow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.14 NUCO]
:: OPIS: Analiza brakujących surowców do wykonania produkcji dla pojednczej pozycji.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~PROD_REJ.sel_size()
|| _TAB:=exec('AnalizaSurowcowTab','qtte');
   exec('AnalizaSurowcowBegin','qtte');
   exec('AnalizaSurowcow','qtte',_TAB,'~');
   exec('AnalizaSurowcowEnd','qtte');
   exec('AnalizaSurowcowSel','qtte',_TAB)
?};
~~


\AnalizaSurowcowTab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.14 NUCO]
:: OPIS: Analiza brakujących surowców do wykonania produkcji tabela z danymi.
::   WE:
::   WY: _TAB - [TABLE] - Tablica przechowująca dane z analizy brakujących surowców.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(3,
   'NRPRZ','STRING[30]','Numer przewodnika'@,
   'ZL','STRING[20]','Symbol zlecenia'@,
   'KTM','STRING[50]','Kod materiału'@,
   'N','STRING[100]','Nazwa materiału'@,
   'JM','STRING[10]','Jednostka miary'@,
   'ILW','REAL','Ilość wymagana'@,
   'DW','DATE','Data wymagana'@,
   'TW','TIME','Czas wymagany'@,
   'ILM','REAL','Ilość dostępna na wymagany termin'@,
   'DM','DATE','Data dostępności'@,
   'TM','TIME','Czas dostępności'@,
   'DD','DATE','Data dostawy'@,
   'TD','TIME','Czas dostawy'@,
   'DOSTEPNY','INTEGER','Dostępny na wymagany termin'@,
   'XD','REAL','Wymagana dostępność — tm_stamp'@,
   'XM','REAL','Możliwa dostępność — tm_stamp'@,
   'XW','REAL','Możliwa dostawa — tm_stamp'@
)


\AnalizaSurowcowSel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.14 NUCO]
:: OPIS: Analiza brakujących surowców do wykonania produkcji wyświetlenie tabela z danymi.
::   WE: _a - [TABLE] - Tablica przechowująca dane z analizy brakujących surowców.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;

:: Zakres wyświetanych danych.
_TMP:=tab_tmp(,'ZAKRES','STRING[1]','Zakres wyświetlanych danych'@);
_TMP.ZAKRES:='B';
_wp:=_TMP.mk_edit('Paramety wyświetlania'@);
_TMP.win_esep(_wp,'Dane podstawowe'@);
_TMP.win_efld(_wp,,
   'ZAKRES',,,,,,
   'Zakres wyświetlania'@,,
   'Zakres wyświetlanych danych'@,
   'radio-buttons',,'Wszystkie',"'W'",'Brakujące',"'B'"
);
exec('ok_esc','#window',_TMP,_wp);
_TMP.win_edit(_wp);
{? _TMP.edit()
|| {? _TMP.ZAKRES='B'
   || _TAB.index(_TAB.ndx_tmp(,,'DOSTEPNY',,));
      _TAB.prefix(0)
   ?};

   _ws:=_TAB.mk_sel('Analiza dostępności materiałów'@,'P',,'brakujacesur',,,25,,'U');
   _TAB.win_fld(_ws,,'DOSTEPNY',,,-3,,,'Ok'@,,'Oznacza, czy surowiec jest dostępny na wymagany termin'@,2,,"1","0");
   _TAB.win_fld(_ws,,'ZL',,,20,,1,'Zlecenie'@,,'Symbol zlecenia'@);
   _TAB.win_fld(_ws,,'NRPRZ',,,20,,1,'Przewodnik'@,,'Numer przewodnika'@);
   _TAB.win_fld(_ws,,'KTM',,,15,,1,'Kod surowca'@,,'Kod materiału'@);
   _TAB.win_fld(_ws,,'N',,,25,,1,'Nazwa surowca'@,,'Nazwa materiału'@);
   _TAB.win_fld(_ws,,'JM',,,5,,1,'Jednostka miary'@,,'Jednostka miary'@);
   _TAB.win_fld(_ws,,'ILW',,,-15,ST.DOKL,,'Ilość'@);
   _TAB.win_fld(_ws,,'DW',,,-10,,,'Data wymagana'@,,'Wymagana dostępność — data'@);
   _TAB.win_fld(_ws,,'TW',,,-8,,,'Czas wymagany'@,,'Wymagana dostępność — godzina'@);
   _TAB.win_fld(_ws,,'ILM',,,-15,ST.DOKL,,'Dostępne na wymagany termin'@,,'Ilość dostępna na wymagany termin'@);
   _TAB.win_fld(_ws,,'DM',,,-10,,,'Data dostępności'@,,'Możliwa dostępność — data'@);
   _TAB.win_fld(_ws,,'TM',,,-8,,,'Czas dostępności'@,,'Możliwa dostępność — godzina'@);
   _TAB.win_fld(_ws,,'DD',,,-10,,,'Data dostawy'@,,'Możliwa dostawa — data'@);
   _TAB.win_fld(_ws,,'TD',,,-8,,,'Czas dostawy'@,,'Możliwa dostawa — godzina'@);

   _TAB.win_act(_ws,,'Formuła','Szczegóły'@,,'Informacje szczegółowe'@,
      "  _tab:=cur_tab();
         _skip:=__ENV_AN.SKIP;
         _insert:=__ENV_AN.INSERT;

         M.cntx_psh();
         M.index('ARODZ');
         M.prefix('T','T',_tab.KTM,);
         {? M.first()
         || _args:=exec('pda_a','plan_dostaw');
            _args.M:=M.ref();
            _args.TM_STAMP:=SYSLOG.tm_stamp();
            _args.IL:=_tab.ILW;
            _args.DW:=_tab.DW;
            _args.TW:=_tab.TW;

            _skip.prefix(_tab.ref());
            {? _skip.first()
            || {!
               |? _args.skip_add(_skip.REF);
                  _skip.next()
               !}
            ?};

            _insert.prefix(_tab.ref());
            {? _insert.first()
            || {!
               |? _args.insert_add(_insert.REF,_insert.D,_insert.T,_insert.IL);
                  _insert.next()
               !}
            ?};
            _args.DISP:=1;
            exec('pda','plan_dostaw',_args)
         ?};
         M.cntx_pop()

      ",,,,,,'S'
   );
   _TAB.win_act(_ws,,'Formuła','Legenda'@,,,"exec('legenda','color','PD_AP#01','@PD_AP#XW')",,,,,,'L');
   _TAB.win_act(_ws,,'Kolejność');
   _TAB.win_act(_ws,,'Rekord',,,,"exec('rekprzed','color','PD_AP#01')
");

   _TAB.win_sel(_ws);
   _TAB.select()
?};

:: Usunięcie środowiska dla analiz.
exec('env_delete','plan_dostaw');
~~


\AnalizaSurowcowBegin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.14 NUCO]
:: OPIS: Analiza brakujących surowców do wykonania produkcji odłożenie kontekstów, ustalenie indeksów i prefix'ów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Odłożenie kontekstów do tabel
_row:=PROD_REJ.ref();
ZL.cntx_psh();
M.cntx_psh();
JM.cntx_psh();
ZGH.cntx_psh();
ZGP.cntx_psh();
ZLIM.cntx_psh();
PROD_REJ.cntx_psh();
:: Ustalenie indeksów do sortowania tabel.
ZGP.index('STATUS');
::Ustalenie prefix'ów.
PROD_REJ.prefix();
:: Utworzenie środowiska dla analiz.
exec('env_create','plan_dostaw');
~~


\AnalizaSurowcowEnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.14 NUCO]
:: OPIS: Analiza brakujących surowców do wykonania produkcji przywrócenie.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PROD_REJ.cntx_pop();
ZLIM.cntx_pop();
ZGP.cntx_pop();
ZGH.cntx_pop();
JM.cntx_pop();
M.cntx_pop();
ZL.cntx_pop();
~~


\AnalizaSurowcow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.14 NUCO]
:: OPIS: Analiza brakujących surowców do wykonania produkcji.
::   WE: _a - [TABLE] - Tablica przechowująca dane z analizy brakujących surowców.
::       _b - [STRING] - Symbol poprzednio analizowanego przewodnika (w celu uniknięcia powtórzenia analizy)
::                       Jeżeli '~' to bez sprawdzania symbolu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_repeat:=_b;
:: Zapisanie inforamcji bez powielania dla przewodników.
{? exec('is_pdbuf','plan_dostaw')
   &
   (_repeat='~' | PROD_REJ.ZGH().NRPRZ<>_repeat)
|| _TAB.ZL:=PROD_REJ.ZL().SYM;
   _repeat:=_TAB.NRPRZ:=ZGH.NRPRZ;
   ZGP.prefix(ZGH.ref());
   {? ZGP.first()
   || _skip_add:=
         "  __ENV_AN.SKIP.TAB:=_a;
            __ENV_AN.SKIP.REF:=_b;
            __ENV_AN.SKIP.add()
         ";
      _insert_add:=
         "  __ENV_AN.INSERT.TAB:=_a;
            __ENV_AN.INSERT.REF:=_b;
            __ENV_AN.INSERT.D:=_c;
            __ENV_AN.INSERT.T:=_d;
            __ENV_AN.INSERT.IL:=_e;
            __ENV_AN.INSERT.add()
         ";
:: Surowce nielimitowane.
:: Przypisanie wartości pól po analizie stanów na podstwie \nlim_analiza_b z zl_limit.fml.
      exec('openmask','zl_common',ZL.ref());
      ZLIM.index('ZGP_KM');
      ZLIM.prefix(ZGP.ref(),'N');
      {? ZLIM.first()
      || {!
         |? _TAB.KTM:=ZLIM.KTM().KTM;
            _TAB.N:=M.N;
            _TAB.JM:=M.J().KOD;
            _args:=exec('pda_a','plan_dostaw');
            _args.M:=ZLIM.KTM;
            _args.TM_STAMP:=SYSLOG.tm_stamp();
            {? exec('create','#tm_stamp',ZL.PL_DATA,ZL.PL_TIME)>=SYSLOG.tm_stamp()
            || _args.DK:=ZL.PL_DATA;
               _args.TK:=ZL.PL_TIME
            ?};
            _TAB.ILW:=_args.IL:=ZLIM.LIL-exec('zlim_pob_il','zl_limit',$ZLIM.ref()).IL;
            _TAB.DW:=_args.DW:=ZLIM.STARTD;
            _TAB.TW:=_args.TW:=ZLIM.STARTT;
            _TAB.XW:=exec('create','#tm_stamp',_TAB.DW,_TAB.TW);
            _args.DISP:=0;
            _args.skip_add($ZLIM.ref());
            _res:=exec('pda','plan_dostaw',_args);
            _argse:=exec('an_add_a','plan_dostaw');
            _argse.M:=_args.M;
            _argse.IL:=_args.IL;
            _argse.DW:=_args.DW;
            _argse.TW:=_args.TW;
            _TAB.DOSTEPNY:=_argse.DOSTEPNY:=_res.DOSTEPNY;
            _TAB.ILM:=_argse.IL_DOST:=_res.IL_DOST;
            _TAB.DM:=_argse.DM:=_res.NA_KIEDY;
            _TAB.TM:=*0;
            _TAB.XM:=exec('create','#tm_stamp',_TAB.DM,_TAB.TM);
            _argse.skip_add($ZLIM.ref());
            _dt:=exec('mdost_first','plan_dostaw',M.ref(),_TAB.DW);
            _TAB.DD:=_dt.DATE;
            _TAB.TD:=_dt.TIME;
            _TAB.XD:=exec('create','#tm_stamp',_TAB.DD,_TAB.TD);
            {? _TAB.add()
            || {? _args.SKIP.first()
               || {!
                  |? _skip_add(_TAB.ref(),_args.SKIP.REF);
                     _args.SKIP.next()
                  !}
               ?};
               {? _args.INSERT.first()
               || {!
                  |? _insert_add(_TAB.ref(),_args.INSERT.REF,_args.INSERT.D,_args.INSERT.T,_args.INSERT.IL);
                     _args.INSERT.next()
                  !}
               ?}
            ?};
            obj_del(_args);
            obj_del(_argse);
            obj_del(_res);
            obj_del(_dt);
            ZLIM.next()
         !}
      ?};
:: Surowce limitowane.
      _zlim:=exec('kart_lim','zl_limit',9,ZGP.NRZLP().ZLEC,'',,ZGP.ref());
:: Przypisanie wartości pól po analizie stanów na podstwie \zlim_analiza_b z zl_limit.fml.
:debug();
      {? _zlim.first()
      || {!
         |? {? _zlim.ZM='M' & _zlim.SO='S' & _zlim.X_KIND='P'
            || M.clear();
               ZL.clear();
               {? M.seek(_zlim.M_REF,) & ZL.seek(_zlim.ZL_REF,)
               || _TAB.KTM:=M.KTM;
                  _TAB.N:=M.N;
                  _TAB.JM:=M.J().KOD;
                  _args:=exec('pda_a','plan_dostaw');
                  _args.M:=M.ref();
                  _args.TM_STAMP:=SYSLOG.tm_stamp();
                  {? exec('create','#tm_stamp',ZL.PL_DATA,ZL.PL_TIME)>=SYSLOG.tm_stamp()
                  || _args.DK:=ZL.PL_DATA;
                     _args.TK:=ZL.PL_TIME
                  ?};
                  _il:=exec('sum_il','zl_limit',_zlim.REF,0);
                  _TAB.ILW:=_args.IL:={? _zlim.SO='S' || _il || -_il ?}-exec('zlim_pob_il','zl_limit',_zlim.REF).IL;
                  {? _args.IL<>0
                  || _TAB.DW:=_args.DW:=_zlim.STARTD;
                     _TAB.TW:=_args.TW:=_zlim.STARTT;
                     _TAB.XW:=exec('create','#tm_stamp',_TAB.DW,_TAB.TW);
                     _args.DISP:=0;
                     {? _zlim.ZK_P_QRF<>''
                     || _args.skip_add(_zlim.ZK_P_QRF);
                        REZ.index('ZK_P');
                        REZ.prefix(BIT.sqlint(_zlim.ZK_P_QRF));
                        {? REZ.first()
                        || {!
                           |? _args.skip_add($REZ.ref());
                              REZ.next()
                           !}
                        ?}
                     ?};
                     _args.skip_add(_zlim.REF);
                     _res:=exec('pda','plan_dostaw',_args);
                     _argse:=exec('an_add_a','plan_dostaw');
                     _argse.M:=_args.M;
                     _argse.IL:=_args.IL;
                     _argse.DW:=_args.DW;
                     _argse.TW:=_args.TW;
                     _TAB.DOSTEPNY:=_argse.DOSTEPNY:=_res.DOSTEPNY;
                     _TAB.ILM:=_argse.IL_DOST:=_res.IL_DOST;
                     _TAB.DM:=_argse.DM:=_res.NA_KIEDY;
                     _TAB.TM:=*0;
                     _TAB.XM:=exec('create','#tm_stamp',_TAB.DM,_TAB.TM);
                     {? _zlim.ZK_P_QRF<>''
                     || _argse.skip_add(_zlim.ZK_P_QRF);
                        REZ.index('ZK_P');
                        REZ.prefix(BIT.sqlint(_zlim.ZK_P_QRF));
                        {? REZ.first()
                        || {!
                           |? _argse.skip_add($REZ.ref());
                              REZ.next()
                           !}
                        ?}
                     ?};
                     _argse.skip_add(_zlim.REF);
                     _dt:=exec('mdost_first','plan_dostaw',M.ref(),_TAB.DW);
                     _TAB.DD:=_dt.DATE;
                     _TAB.TD:=_dt.TIME;
                     _TAB.XD:=exec('create','#tm_stamp',_TAB.DD,_TAB.TD);
                     {? _TAB.add()
                     || {? _args.SKIP.first()
                        || {!
                           |? _skip_add(_TAB.ref(),_args.SKIP.REF);
                              _args.SKIP.next()
                           !}
                        ?};
                        {? _args.INSERT.first()
                        || {!
                           |? _insert_add(_TAB.ref(),_args.INSERT.REF,_args.INSERT.D,_args.INSERT.T,_args.INSERT.IL);
                              _args.INSERT.next()
                           !}
                        ?}
                     ?};
                     obj_del(_argse);
                     obj_del(_res);
                     obj_del(_dt)
                  ?};
                  obj_del(_args)
               ?}
            ?};
            _zlim.next()
         !}
      ?};
      &_zlim
   ?}
?};
_repeat


\symbol_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_DEV]
:: OPIS: Zmienia symbol zlecenia - uwzględniając wydział. Praca w kontekście ZL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod_wyd:=ZL.JORG().KOD;

{? (ZL.SYM+(+_kod_wyd))<>_kod_wyd
|| ZL.SYM:=ZL.SYM+'/'+_kod_wyd;
   ZL.put()
?};
1


\zm_przewodniki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja ma za zadanie na bierzącym zleceniu usunąć (o ile to możliwe) i ponownie wygenerować/zaakceptować
::       zapotrzebowania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_ZLIMp:=params_get().env.env_limit.ZLIMp;
{? ZGH.size()
|| _old_zgh:=ZGH.ref()
|| _old_zgh:=null()
?};

_zl:=VAR.A_ZLEC;

params_exec('action_delete','!tte_pzl_dprz');

:: Jeśli udało się usunąć to generujemy nowe
{? exec('FindAndGet','#table',ZGH,_old_zgh,,"0",1)
|| params_exec('generuj_action','!tte_pzl_dpzg');
   ZGH.cntx_psh();
   {? ZL.RODZAJ='P'
   || ZGH.index('ZLNR');
      ZGH.prefix(_zl)
   || ZGH.index('UID_VIEW');
      ZGH.prefix(exec('FindAndGet','#table',ZL,_zl,,"uidref()",''))
   ?};
   {? ZGH.first()
   || params_exec('action_end_all','!tte_pzl_dprz');
      _generuj:=1
   || _generuj:=0
   ?};
   ZGH.cntx_pop();
   {? _generuj>0
   || _result:=exec('zlim_gen4__Z','zl_limit','T',_zl,_ZLIMp);
      params_exec('action_end','!tte_pzl_dlim')
   || FUN.info('Zlecenie musi mieć co najmniej jeden przewodnik, aby generować limity.'@)
   ?}
?};
~~


\zgh_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Usówa wszystkie przewodniki dla podanego zlecenia
::   WE: _a - ZL.ref
::   WY: 1 - udało się usunąć, 0 coś poszło nie tak
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_result:=1;

{? ZL.seek(_zl)
|| ZGH.cntx_psh();
   ZGH.index('ZLNR');
   ZGH.prefix(_zl);

   {? ZGH.first()
   || {!
      |?
:: Usunięcie powiązań pomiędzy limitami
         exec('del_zgh_limity_zkpz','qprocesy',ZGH.ref);
:: Usunięcie przewodnikó wraz z limietami
         _result:=exec('przp_us','zl_guide',1);
         {? ~_result ||  ZGH.next() || ZGH.size()>0 ?}
      !}
   ?};
   ZGH.cntx_pop()
?};
_result


\tktl_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO]
:: OPIS: Funkcja ma za zadanie skopiować technologie na nową wersję dla potrzeb procesu zmiany surowca
::   WE: _in.p01 - TKTL.ref
::   WY: 1 - kopia się udała
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;

{? var_pres('p01',_in)=type_of(null())
|| _tktl:=_in.p01
|? var_pres('p01',_in)=type_of('')
|| _tktl:=exec('FindAndGet','#table',TKTL,_in.p01,,,null())
|| _tktl:=null
?};

_out.OUT:=null();

{? _tktl<>null()
|| exec('tktl_cntx_psh','tech_common');
   exec('tktl_use','tech_common',ref_name(_tktl)+3);
   {? var_pres('DocLib')<=0 || exec('declare','tech_doc') ?};
   _args:=exec('args_copy','tech_arch');
::   Ustawienie parametrów kopiowania
   {? TKTL.seek(_tktl)
   || _args.TKTL_SRC:=_tktl;
      _args.DST_SYM:=TKTL.NRK;
      _args.DST_WER:=exec('find_wer','tech_head','T',TKTL.NRK,TKTL.WER);
      _args.DST_TORW:='T';
      _args.MASK_SRC:=ref_name(_tktl)+3;
      _args.DELETE:=0;
      _args.DIR:='KARTOTEKA';
      _args.TRANS:=1;
      _args.COPY_OPER:=1;
      _args.COPY_NAST:=1;
      _args.COPY_SUR:=1;
      _args.COPY_NPU:=1;
      _args.COPY_UAT:=1;
      _args.COPY_PROD:=1;
      _args.COPY_KTM:=1;
      _args.COPY_DOK:=1;
      _args.COPY_ZATW:=0;
      _args.COPY_KALK:=0;
      _args.COPY_ACT:=1;
      _args.TPAR_ASK:=0;
      _args.TPAR_EDITED:=0;
      _args.STATUS_COPY:=1;
      _args.SUR_UPDATE:=0;
      _args.XJMP_UPDATE:=0;
      _args.SUR_ONLY:=0;
      _result:=exec('tktl_copy','tech_arch',_args);
:: Zapisanie parametru wyjściowego - TKTL utworzonej technologii
      _out.OUT:=_args.TKTL_DST;
      _mp.save(,_out);
::      Ustawienie nowej karty jako domyślnej jeśli była
      {? TKTL.DEFAULT='T'& _result & _args.TKTL_DST<>null() & TKTL.seek(_args.TKTL_DST)
      || TKTLW.index('REF');
         TKTLW.prefix(TKTL.ref(),TKTL.KTM);
         {? TKTLW.first()
         || exec('tktlw_default','tech_prod',0)
         ?}
      |? _result=0
      || _mp.error('Nie udało się skopiować technologii.')
      ?}
   ?};
   exec('tktl_cntx_pop','tech_common')
|| _mp.error('Nie odnaleziono technologii do skopiowania.')
?};

_result


\tktl_arch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO]
:: OPIS: Funkcja ma za zadanie zarchiwizować kartę technologiczną przekazaną parametrem p01 procesu, bez pytań
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

_in:=params_get().in;
_mp:=params_get().mp;

{? var_pres('p01',_in)=type_of(null())
|| _tktl:=_in.p01
|| _tktl:=null()
?};

{? _tktl<>null()
|| exec('tktl_cntx_psh','tech_common');
   exec('tktl_use','tech_common',ref_name(_tktl)+3);
   {? var_pres('DocLib')<=0 || exec('declare','tech_doc') ?};
   {? TKTL.seek(_tktl)
   || _ref:=exec('tktl_arch_act','!tte_tec_data',TKTL.ref(),_mp,-1);
      {? _ref<>null()
      || _result:=1
      || _mp.error('Błąd przy próbie archiwizacji karty technologicznej')
      ?}
   || _mp.error('Nie odnaleziono karty do archiwizacji')
   ?}
|| _mp.error('Nie odnaleziono karty do archiwizacji')
?};
_result


\czy_zgh_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Rejestracja przewodnika - akcja 'Usuń' weryfikacja możliwości usunięcia przewodników zlecenia
::  WE: _a - ZL.ref
::  WY:  1 - można usunąć, 0 - nie można
::  OLD: \zgh_usun_gpr/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_result:=0;

ZGH.cntx_psh();
ZGH.index('ZLNR');
ZGH.prefix(_zl);

{? ZGH.first()
|| _ilosc:=ZGH.size();
   _ilosc_oddane:=0;
   _ilosc_zakonczone:=0;
   _tab:=sql('select ZGH.REFERENCE as REF from ZGH where ZGH.ZLEC=:_a',_zl);
   ZGH.prefix();
   {? _tab.first()
   || {!
      |? {? ZGH.seek(_tab.REF,)
         || {? ZGH.STAN='T' || _ilosc_oddane+=1
            |? ZGH.STAT_REJ='T' || _ilosc_zakonczone+=1
            ?}
         ?};
         _tab.next()
      !}
   ?};

   _result:={? ZL.STAN='Z'
            || FUN.info('Nie można usunąć przewodników — zlecenie zamknięte.'@);
               0

            |? (ZL.TYP().WP='W' | ZL.TYP().TECH='N') & ZL.STAT_N='N'
            || FUN.info('Nie można usunąć przewodników — nie zakończono rejestrowania nagłówka zlecenia.'@);
               0

            |? (ZL.STAT_N='N' | ZL.STAT_T='N') & ZL.TYP().TECH='T'
            || FUN.info('Nie można usunąć przewodników — nie zakończono rejestrowania technologii zlecenia.'@);
               0

            |? _ilosc_oddane>=_ilosc
            || FUN.info('Nie można usunąć przewodników — wszyskie zaznaczone przewodniki są oddane.'@);
               0
            || 1
            ?};
:: Sprawdzenie czy przewodniki zostały zaplanowane operacyjnie, jeśli tak to nic nie usówamy
    {? _result
    || ZGH.prefix(_zl);
       _il:=0;
       ZGH.first();
       {!
       |? _il+=exec('zgh_planned','po_plan',ZGH.ref());
          _il=0 & ZGH.next
       !};
       {? _il>0
       || _result:=0
       ?}
    ?}
|| _result:=0
?};

ZGH.cntx_pop();

_result


\usun_zlzam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_2226]
:: OPIS: Usunięcie połączenia zlecenia z zamówieniem od strony zleceń
::       Wymagazne jest aby zlecenie było zamknięte połączenie nie jest zupełnie usówana
::       - jedynie zmieniany jest połączenie na pozycje.
::   WE: ZL.ref
::   WY:
::----------------------------------------------------------------------------------------------------------------------

_zl:=_a;
_usun:=0;

{? _zl<>null() & exec('FindAndGet','#table',ZL,_zl,,"@.ZL.STAN='Z'",0)
|| _tab:=sql('select ZLZAM.REFERENCE as REF, ZK_N.SYM as SYM, ZK_P.POZ as POZ
                from ZLZAM join ZK_P using(ZLZAM.ZAMPOZ,ZK_P.REFERENCE)
                           join ZK_N using(ZK_P.N,ZK_N.REFERENCE)
               where ZLZAM.ZL=:_a',_zl);
   {? _tab.first()
   || {? FUN.ask('UWAGA !!! Czy napewno chcesz usunąc powiązanie zlecenia z pozycjami zamówień sprzedaży?')
      || {!
         |? _usun:=exec('FindAndGet','#table',ZLZAM,_tab.REF,,"ZLZAM.del()",0);
            _tab.next()
         !}
      ?}
   ?};
   {? _usun
   || exec('add_zwar_pos','zl_common','mz',0,'Usunięto powiązanie z zamówieniem %1 p. %2'@[_tab.SYM,$_tab.POZ],_zl);
      FUN.info('Usunięto powiązania zlecenia z pozycją zamówienia')
   ?}
|| FUN.error('Zlecenie nie jest zleceniem zamkniętym.\nUsunięcie powiązań z pozycją zamówienia nie jest możliwe.')
?};
1


\gen_pow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_2226]
:: OPIS: Generowanie powiązań dla karty technologicznej
::   WE: _a - TKTL.ref
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tktl:=_a;

{? _tktl<>null()
|| exec('er_tab','tech_oper',_tktl);
   exec('gen_pow','tech_oper',_tktl)
?};
1


\AnalizaWykonaniaProdukcji
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_2226]
:: OPIS: Funkcja analizuje dane dotyczące zaplanowania i wykonania produkcji w zakresie dat
::   WE: _a - (date) - data od
::       _b - (date) - data do
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _>1
|| _data_od:=_a;
   _data_do:=_b
|| _data_od:=date()-1;
   _data_do:=date()
?};

:: parametry analizy

_PAR:=tab_tmp(,'WYD','STRING[20]','Symbol wydziału',
                'DOD','DATE','Data od',
                'DDO','DATE','Data do');

_ed:=_PAR.mk_edit('Parametry do bilansowania');
_PAR.win_efld(_ed,,'WYD',,,,,0);
_PAR.win_efld(_ed,,'DOD',,,,,0);
_PAR.win_efld(_ed,,'DDO',,,,,0);

_btn:=_PAR.win_ebtn(_ed,'text=&OK, icon=xwin16.png:13',"'key:F2'");
_PAR.win_ebtn(_ed,'text=&Anuluj, icon=xwin16.png:14',"'key:Esc'");
_PAR.btn_opt(_btn, 'default=1');
_PAR.win_edit(_ed);
_PAR.blank();
_PAR.WYD:=ST.WYD().SYMBOL;
_PAR.DOD:=_data_od;
_PAR.DDO:=_data_do;
_PAR.add();

{? ~_PAR.edit()
|| return(0)
?};

{? _PAR.WYD='' | _PAR.WYD='*'
|| _PAR.WYD:='%'
?};


VAR_DEL.delete('tab_zap','tab_wyk','tpz');
tpz:=0;

tab_zap:=sql('select ZGH.NRPRZ,
                  ZGP.NRP,
                  ZGP.TPZ,
                  ZGP.OPIS,
                  ZGP.STARTD as ZAP_STD,
                  ZGP.STARTT as ZAP_STT,
                  ZGP.STARTD as WYK_STD,
                  ZGP.STARTT as WYK_STT,
                  TWRKPLC.KOD,
                  ZGP.ILOSC as ZAP_IL,
                  ZGP.IL as WYK_IL,
                  0 as IL_OPER,
                  0 as IL_OWYK,
                  ZGP.ILGEN as RP_IL,
                  ZGP.NTIME as ZAP_NCZ,
                  ZGP.MTIME as ZAP_MCZ,
                  ZGP.NTIME as WYK_NCZ,
                  ZGP.MTIME as WYK_MCZ,
                  ZGP.MTIME as WYK_PCZ,
                  CASE
                   WHEN ZGP.MTIME=0 THEN 1
                   ELSE (ZGP.NTIME/ZGP.MTIME)
                  END as ZAP_ETAT,
                  KH.SKR as SKR_KH,
                  M.KTM as KTM_WYR,
                  M.N as N_WYR,
                  SLO.KOD as WYDZIAL,
                  SPACE(75) as BATCHCOD,
                  SPACE(75) as ST_WYK,
                  1 as ZMIANA,
                  CASE
                   WHEN ZGP.DOK is null THEN \'N\'
                   ELSE \'T\'
                  END as RP,
                  ZGP.REFERENCE as ZGP_REF,
                  \'T\' as PLAN,
                  EXTRACT(MONTH FROM ZGP.STARTD) as NRTYG
             from ZGP join ZGH using(ZGP.NRPRZ,ZGH.REFERENCE)
                      join ZL using(ZGP.ZL,ZL.REFERENCE)
                      join TWRKPLC
                      join M using(ZGP.M,M.REFERENCE)
                      left join KH using(ZL.KH,KH.REFERENCE)
                      join SLO using(ZL.JORG,SLO.REFERENCE)
           where (ZGP.STARTD>to_date(:_a) OR (ZGP.STARTD=to_date(:_a) AND ZGP.STARTT>to_time(\'5:59:00\')))
                  AND (ZGP.STARTD<=to_date(:_b) OR (ZGP.STARTD=to_date(:_c) AND ZGP.STARTT<to_time(\'6:00:00\')))
                  AND ZL.PLAN_PO=\'T\'
                  AND SLO.KOD like \':_d\'
                  '
         ,_PAR.DOD,_PAR.DDO,_PAR.DDO+1, _PAR.WYD);
{? tab_zap.first()
|| tab_wyk:=sql('select
                      ZLGD.REFERENCE     as "ZLGDREF"
                     ,ZLGD.ZGP           as "ZGP_REF"
                     ,ZLGD.BP            as "B_P"
                     ,SPACE(40)          as "BRYGADA"
                     ,ZLGD.B          as "B_REF"
                     ,SPACE(60)            as "P"
                     ,ZLGD.P         as "P_REF"
                     ,ZLGD.IL_N          as "IL_N"
                     ,ZLGD.TIME          as "TIME"
                     ,ZLGD.DT            as "DT"
                     ,ZLGD.IL            as "IL"
                     ,ZLGD.NTIME         as "NTIME"
                     ,ZLGD.TIME_P        as "TIME_P"
                     ,ZLGD.ILGEN         as "ILGEN"
                     ,ZLGD.ZMIANA        as "ZMIANA"
                     ,ZLGD.DT        as "STARTD"
                     ,ZLGD.STARTT        as "STARTT"
                     ,ZLGD.DT          as "ENDD"
                     ,ZLGD.ENDT          as "ENDT"
                     ,ZLGD.OK            as "OK"
                     ,SPACE(25)         as "ZPARN"
                     ,SPACE(25)         as "BATCHCOD"
                     ,ZLGD.ZPARN     as "ZPARNREF"
                     ,SPACE(25)        as "PLACE"
                     ,ZLGD.PLACE       as "PLACEREF"
                     ,SPACE(1)         as "RP"
                     ,0                as "NR_OP"
                     ,SPACE(1)         as "TPZ"
                     ,SPACE(25)        as "ST_WYK"
                     ,SPACE(255)       as "UW_ZLEC"
                     ,SPACE(50)        as "UW_PART"
                  from
                     ZLGD
                  where
                     1=0');
:: Uzupełnienie danych o wykonaniach produkcji
   _f_zlgd:=" tab_wyk.ZLGDREF:=$ZLGD.ref();
           tab_wyk.ZGP_REF:=$(@.ZLGD.ZGP);
           tab_wyk.B_P:=@.ZLGD.BP;
           tab_wyk.BRYGADA:=@.ZLGD.B().NAZ;
           tab_wyk.B_REF:=$(@.ZLGD.B);
           tab_wyk.P:=@.ZLGD.P().OSOBA().PIERWSZE+' '+@.ZLGD.P().OSOBA().NAZWISKO;
           tab_wyk.P_REF:=$(@.ZLGD.P);
           tab_wyk.IL_N:=@.ZLGD.IL_N;
           tab_wyk.TIME:=@.ZLGD.TIME;
           tab_wyk.DT:=@.ZLGD.DT;
           tab_wyk.IL:=@.ZLGD.IL;
           tab_wyk.NTIME:=@.ZLGD.NTIME;
           tab_wyk.TIME_P:=@.ZLGD.TIME_P;
           tab_wyk.ILGEN:=@.ZLGD.ILGEN;
           tab_wyk.ZMIANA:=@.ZLGD.ZMIANA;
           tab_wyk.STARTD:=@.ZLGD.STARTD().DATA;
           tab_wyk.STARTT:=@.ZLGD.STARTT;
           tab_wyk.ENDD:=@.ZLGD.ENDD().DATA;
           tab_wyk.ENDT:=@.ZLGD.ENDT;
           tab_wyk.OK:=@.ZLGD.OK;
           tab_wyk.ZPARN:=@.ZLGD.ZPARN().SYM;
           tab_wyk.BATCHCOD:=@.ZLGD.ZPARN().DK_C().WAR02;
           tab_wyk.ST_WYK:=@.ZLGD.PLACE().KOD;
           tab_wyk.ZPARNREF:=$(@.ZLGD.ZPARN);
           tab_wyk.PLACE:=@.ZLGD.PLACE().KOD;
           tab_wyk.PLACEREF:=$(@.ZLGD.PLACE);
           tab_wyk.TPZ:=@.ZLGD.ZGP().TPZ;
           tab_wyk.NR_OP:=@.ZLGD.ZGP().NRP;
           tab_wyk.UW_ZLEC:=@.ZLGD.ZL().UWAGI;
           tab_wyk.UW_PART:=@.ZLGD.ZPARN().QPD;
           {? ZLGD.ZGP().DOK<>null()
           || tab_wyk.RP:='T'
           || tab_wyk.RP:='N'
           ?};
           tab_wyk.add()
           ";
   {!
   |? _tab_tym:=sql('select ZLGD.REFERENCE as REF from @ZLGD where ZLGD.ZGP=\':_a\'', tab_zap.ZGP_REF);
      {? _tab_tym.first()
      || {!
         |? exec('FindAndGet','#table',ZLGD,_tab_tym.REF,,_f_zlgd,0);
            _tab_tym.next()
         !}
      ?};
      &_tab_tym;
      tab_zap.next()
   !};

:: Uzupełnienie tabeli wykonań i planów o rekordy z wykonań niezaplanowanych w analizowanym okresie
   _tab_tym:=sql('select ZLGD.REFERENCE as REF,
                         ZLGD.ZGP as ZGP_REF,
                         ZLGD.DT
                    from @ZLGD
                         join ZGP using(ZLGD.ZGP,ZGP.REFERENCE)
                         join ZL using(ZGP.ZL,ZL.REFERENCE)
                         join SLO using(ZL.JORG,SLO.REFERENCE)
                         join DATY using(ZLGD.STARTD,DATY.REFERENCE)
                   where (DATY.DATA>to_date(:_a) or (DATY.DATA=to_date(:_a) and ZLGD.STARTT>=to_time(\'06:00:00\')))
                         and (DATY.DATA<=to_date(:_b) or (DATY.DATA=to_date(:_e) and ZLGD.STARTT<=to_time(\'06:00:00\')))
                         and ZLGD.REFERENCE not in(select :_c.ZLGDREF from :_c)
                         and ZL.PLAN_PO=\'T\' and SLO.KOD like \':_d\''
                 ,_PAR.DOD, _PAR.DDO, tab_wyk, _PAR.WYD, _PAR.DDO+1);

:: Dodawanie rekordów
  _f_zgp:="tab_zap.blank();
            tab_zap.NRPRZ:=ZGP.NRPRZ().NRPRZ;
            tab_zap.NRP:=ZGP.NRP;
            tab_zap.TPZ:=ZGP.TPZ;
            tab_zap.OPIS:=ZGP.OPIS;
            tab_zap.NRTYG:=exec('WeekNumber','daty',ZGP.STARTD);
            tab_zap.ZAP_STD:=ZGP.STARTD;
            tab_zap.ZAP_STT:=ZGP.STARTT;
            tab_zap.WYK_STD:=date(0,0,0);
            tab_zap.WYK_STT:=time(0,0,0);
            tab_zap.KOD:=ZGP.PLACE().KOD;
            tab_zap.ZAP_IL:=ZGP.ILOSC;
            tab_zap.WYK_IL:=ZGP.IL;
            tab_zap.IL_OPER:=0;
            tab_zap.IL_OWYK:=0;
            tab_zap.RP_IL:=ZGP.ILGEN;
            tab_zap.ZAP_NCZ:=ZGP.NTIME;
            tab_zap.ZAP_MCZ:=ZGP.MTIME;
            tab_zap.WYK_NCZ:=0;
            tab_zap.WYK_MCZ:=0;
            tab_zap.WYK_PCZ:=0;
            tab_zap.ZAP_ETAT:={? ZGP.MTIME<>0 || ZGP.NTIME/ZGP.MTIME || 1 ?};
            tab_zap.SKR_KH:=ZGP.KONTRAH().SKR;
            tab_zap.KTM_WYR:=ZGP.ZL().KTM().KTM;
            tab_zap.N_WYR:=ZGP.ZL().KTM().N;
            tab_zap.WYDZIAL:=ZGP.ZL().JORG().KOD;
            tab_zap.ZMIANA:=1;
            tab_zap.RP:={? ZGP.DOK=null() || 'N' || 'T' ?};
            tab_zap.ZGP_REF:=$ZGP.ref();
            tab_zap.PLAN:='N';
            tab_zap.add()
           ";
  {? _tab_tym.first()
  || {!
     |? {? ~(sql('select :_a.NRP from :_a where :_a.ZGP_REF=\':_b\'',tab_zap,_tab_tym.ZGP_REF).first)
        || exec('FindAndGet','#table',ZGP,_tab_tym.ZGP_REF,,_f_zgp,0)
        ?};
        exec('FindAndGet','#table',ZLGD,_tab_tym.REF,,_f_zlgd,0);
        _tab_tym.next()
     !}
  ?};

  &_tab_tym;

::  Uzupełnienie danych w głównej tabeli planowania
   tab_zap.first();
   {!
   |?
:: Data i czas wykonania
       _tab_tym:=sql('select :_a.ENDD as STD, :_a.ENDT as STT, :_a.DT
                         from :_a
                        where :_a.ZGP_REF=\':_b\' and :_a.TPZ=\'N\'
                     order by 1,2'
                           , tab_wyk, tab_zap.ZGP_REF);
       {? _tab_tym.last()
       || tab_zap.WYK_STT:=_tab_tym.STT;
          tab_zap.WYK_STD:={? _tab_tym.STD<>date(0,0,0) || _tab_tym.STD || _tab_tym.DT ?}
       ?};
       &_tab_tym;

:: Ilość na raportach produkcyjnych
       tab_zap.RP_IL:=sql('select sum(:_a.ILGEN) as RP_IL from :_a where :_a.ZGP_REF=\':_b\' and :_a.TPZ=\'N\''
                           , tab_wyk, tab_zap.ZGP_REF).RP_IL;
:: Ilość wykonana
       tab_zap.WYK_IL:=sql('select sum(:_a.IL) as S_IL from :_a where :_a.ZGP_REF=\':_b\' and :_a.TPZ=\'N\''
                           , tab_wyk, tab_zap.ZGP_REF).S_IL;
:: Czas wykonania
       tab_zap.WYK_NCZ:=sql('select sum(:_a.TIME) as NCZ from :_a where :_a.ZGP_REF=\':_b\' and :_a.TPZ=\'N\''
                           , tab_wyk, tab_zap.ZGP_REF).NCZ;
:: Norma proporcjonalna
       tab_zap.WYK_PCZ:=sql('select min(:_a.TIME_P) as PCZ from :_a where :_a.ZGP_REF=\':_b\' and :_a.TPZ=\'N\''
                           , tab_wyk, tab_zap.ZGP_REF).PCZ;
       tab_zap.ZMIANA:={? tab_zap.ZAP_STT>=time(6,0,0) & tab_zap.ZAP_STT<time(14,0,0)
                       || 1
                       |? tab_zap.ZAP_STT>=time(14,0,0) & tab_zap.ZAP_STT<time(22,0,0)
                       || 2
                       || 3
                       ?};
:: Zebranie informacji o wszystkich batchcode dla wykonań
      _tab_tym:=sql('select distinct :_a.BATCHCOD from :_a where :_a.ZGP_REF=\':_b\' and :_a.TPZ=\'N\' and :_a.BATCHCOD<>\'\'', tab_wyk, tab_zap.ZGP_REF);
      _batch_code:='';
      _przecinek:='';
      {? _tab_tym.first()
      || {!
         |? _batch_code+=_przecinek+_tab_tym.BATCHCOD;
            _przecinek:=', ';
            _tab_tym.next()
         !}
      ?};
      &_tab_tym;
      tab_zap.BATCHCOD:=_batch_code;
:WW: Zebranie informacji o wszystkich stanowiskach, na których wykonanano produkt
      _tab_tym:=sql('select distinct :_a.PLACE from :_a where :_a.ZGP_REF=\':_b\' and :_a.TPZ=\'N\' and :_a.PLACE<>\'\'',tab_wyk, tab_zap.ZGP_REF);
      _stanowisko_wyk:='';
      _przecinek:='';
      {? _tab_tym.first()
      || {!
         |? _stanowisko_wyk+=_przecinek+_tab_tym.PLACE;
            _przecinek:=', ';
            _tab_tym.next()
         !}
      ?};
      &_tab_tym;
      tab_zap.ST_WYK:=_stanowisko_wyk;
:WW: Koniec
      tab_zap.put();
      tab_zap.next()
   !}
|| FUN.emsg('W zadanych parametrach nie odnaleziono zaplanowanych pozycji przewodników produkcyjnych');
   return(0)
?};

_tab_zap_ndx:=tab_zap.ndx_tmp(,,'TPZ',,,'WYDZIAL',,,'ZAP_STD',,,'ZAP_STT',,);
tab_zap.index(_tab_zap_ndx);

_tab_wyk_ndx:=tab_wyk.ndx_tmp(,,'ZGP_REF',,,'TPZ',,,'DT',,,'TIME',,);
tab_wyk.index(_tab_wyk_ndx);

:: Prezentacja okienka z planami i informacjami o wykonaniu
_sWin:=tab_zap.mk_sel('','P',,'#tab_zap_swin',,,,,'U','T');
tab_zap.win_sel(_sWin);
tab_zap.win_fld(_sWin,,'PLAN' ,          ,          ,  8,  , ,'Plan?',,'Czy pozycja wykonana w ramach planu',,1);
tab_zap.win_fld(_sWin,,'WYDZIAL' ,          ,          ,  8,  , ,'Wydział',,'WYDZIAL',,1);
tab_zap.win_fld(_sWin,,'NRTYG'   ,          ,          ,  3,  , ,'Tydzień',,'NRTYG',,1);
tab_zap.win_fld(_sWin,,'ZAP_STD' ,          ,          , 10,  , ,'Data pl.',,'ZAP_STD',,1);
tab_zap.win_fld(_sWin,,'ZAP_STT' ,          ,          ,  8,  , ,'Czas pl.',,'ZAP_STT',,1);
tab_zap.win_fld(_sWin,,'ZMIANA'  ,          ,          ,  2,  , ,'Zmiana',,'ZMIANA',,1);
tab_zap.win_fld(_sWin,,'KOD'     ,          ,          , 10,  , ,'Stanowisko pl.',,'KOD',,1);
tab_zap.win_fld(_sWin,,'ST_WYK'  ,          ,          , 10,  , ,'Stanowisko wyk.',,'WYK',,1);
tab_zap.win_fld(_sWin,,'NRPRZ'   ,          ,          , 10,  , ,'Przewodnik',,'NRPRZ',,1);
tab_zap.win_fld(_sWin,,'NRP'     ,          ,          ,  2,  , ,'NRP',,'Poz.',,1);
tab_zap.win_fld(_sWin,,'OPIS'    ,          ,          , 10,  , ,'Operacja',,'OPIS',,1);
tab_zap.win_fld(_sWin,,'KTM_WYR' ,          ,          , 10,  , ,'Indeks wyr.',,'KTM_WYR',,1);
tab_zap.win_fld(_sWin,,'TPZ'     ,          ,          ,  1,  , ,'TPZ',,'TPZ',,1);
tab_zap.win_fld(_sWin,,'RP'      ,          ,          ,  1,  , ,'RP',,'RP',,1);
tab_zap.win_fld(_sWin,,'BATCHCOD',          ,          ,  5,  , ,'Batch code',,'Batch code',,1);

tab_zap.win_fld(_sWin,,'WYK_STD' ,          ,          , 10,  , ,'Data wyk.',,'WYK_STD',,1);
tab_zap.win_fld(_sWin,,'WYK_STT' ,          ,          ,  8,  , ,'Czas wyk.',,'WYK_STT',,1);
tab_zap.win_fld(_sWin,,'ZAP_IL'  ,          ,          ,  8, 2, ,'Il. pl.',,'ZAP_IL',,1);
tab_zap.win_fld(_sWin,,'WYK_IL'  ,          ,          ,  8, 2, ,'Il. wyk.',,'WYK_IL',,1);
tab_zap.win_fld(_sWin,,'RP_IL'   ,          ,          ,  8, 2, ,'Il. RP',,'RP_IL',,1);
tab_zap.win_fld(_sWin,,'ZAP_NCZ' ,          ,          ,  8, 2, ,'Nor. pl.',,'ZAP_NCZ',,1);
tab_zap.win_fld(_sWin,,'ZAP_MCZ' ,          ,          ,  8, 2, ,'Nor. pl.m.',,'ZAP_MCZ',,1);
tab_zap.win_fld(_sWin,,'WYK_NCZ' ,          ,          ,  8, 2, ,'Wyk. nor.',,'WYK_NCZ',,1);
tab_zap.win_fld(_sWin,,'WYK_PCZ' ,          ,          ,  8, 2, ,'Wyk. prop.',,'WYK_PCZ',,1);
tab_zap.win_fld(_sWin,,'ZAP_ETAT',          ,          ,  8, 2, ,'Etat. pl.',,'ZAP_ETAT',,1);
tab_zap.win_fld(_sWin,,'SKR_KH'  ,          ,          , 10,  , ,'Kontrahent',,'SKR_KH',,1);
tab_zap.win_fld(_sWin,,'N_WYR'   ,          ,          ,100,  , ,'Nazwa wyr.',,'N_WYR',,1);

tab_zap.win_act(_sWin, ,'Kolejność' );
tab_zap.win_act(_sWin, ,'Szukaj');

_fb:="tab_zap.NRTYG:=exec('WeekNumber','daty',tab_zap.ZAP_STD)
      ";
tab_zap.fld_fml('NRTYG','BEFORE_DISPLAY',_fb);

_fm:="{? tab_zap.ZAP_IL<=tab_zap.WYK_IL
      || '|button-ok,30:215:96'
      |? tab_zap.ZAP_IL>tab_zap.WYK_IL & tab_zap.WYK_IL>0
      || '|button-ok,30:96:215'
      || '|button-remove,215:30:30'
      ?}
   ";
tab_zap.win_fml(_sWin,tab_zap,'ZAP_IL',,'ICON_BEFORE',_fm,2);

_fm:="{? tab_zap.WYK_STD=tab_zap.ZAP_STD
      || '|symbol-download,30:215:96'
      |? tab_zap.WYK_STD>tab_zap.ZAP_STD
      || '|arrow-last,215:30:30'
      |? tab_zap.WYK_STD=date(0,0,0)
      || '|empty'
      || '|arrow-goto-next,30:120:120'
      ?}
   ";
tab_zap.win_fml(_sWin,tab_zap,'WYK_STD',,'ICON_BEFORE',_fm,2);

_fm:="{? tab_zap.PLAN='N'
      || '|button-error,215:30:30'
      || '|circle-twoway,30:215:96'
      ?}
   ";
tab_zap.win_fml(_sWin,tab_zap,'PLAN',,'ICON_BEFORE',_fm,2);

_fm:="{? tpz=0
      || tab_zap.prefix('N');
         tpz:=1
      || tab_zap.prefix();
         tpz:=0
      ?}";
tab_zap.win_act(_sWin,0,'Formuła','&TPZ',,'Pokaż/ukryj TPZ',_fm,,,0);

_fm:=" tab_wyk.prefix();
       tab_wyk.prefix(tab_zap.ZGP_REF,{? tpz=1 || 'N' || '' ?}) ;
       tab_wyk.first();
       tab_wyk.select();
       1
     ";
tab_zap.win_act(_sWin,0,'Formuła','&Wykonania',,'Pokaż rejestracje wykonań',_fm,,,0);

_fm:=" ZGP.cntx_psh();
       ZGP.prefix();
       {? ZGP.seek(tab_zap.ZGP_REF)
       || VAR.A_ZLEC:=ZGP.ZL;
          exec('pozrap','magdok_prod',1,1,0,,3)
       ?};
       ZGP.cntx_pop()
     ";
tab_zap.win_act(_sWin,0,'Formuła','Dokumenty &Magazynowe',,'Podgląd dokumentów magazynowych',_fm,,,0);

:: Tabela wtkonań - okienko z danymi

_sWin_wyk:=tab_wyk.mk_sel('','P',,'#tab_wyk_swin_w',,,,,'U','T');
tab_wyk.win_sel(_sWin_wyk);
tab_wyk.win_fld(_sWin_wyk,,'B_P'     ,          ,          ,  1,  , ,'B/P',,'Brygada/Pracownik',,1);
tab_wyk.win_fld(_sWin_wyk,,'BRYGADA' ,          ,          , 40,  , ,'Brygada',,'BRYGADA',,1);
tab_wyk.win_fld(_sWin_wyk,,'P'       ,          ,          , 40,  , ,'Pracownik',,'P',,1);
tab_wyk.win_fld(_sWin_wyk,,'DT'      ,          ,          , 10,  , ,'Data',,'DT',,1);
tab_wyk.win_fld(_sWin_wyk,,'IL'      ,          ,          , 10, 2, ,'Il. wyk.',,'IL',,1);
tab_wyk.win_fld(_sWin_wyk,,'ILGEN'   ,          ,          , 10, 2, ,'Il. RP',,'ILGEN',,1);
tab_wyk.win_fld(_sWin_wyk,,'TIME_P'  ,          ,          , 10, 2, ,'Czas prop.',,'TIME_P',,1);
tab_wyk.win_fld(_sWin_wyk,,'TIME'    ,          ,          , 10, 2, ,'Czas przep.',,'TIME',,1);
tab_wyk.win_fld(_sWin_wyk,,'ZMIANA'  ,          ,          ,  1,  , ,'Zmiana',,'ZMIANA',,1);
tab_wyk.win_fld(_sWin_wyk,,'STARTD'  ,          ,          , 10,  , ,'Data roz.',,'STARTD',,1);
tab_wyk.win_fld(_sWin_wyk,,'STARTT'  ,          ,          ,  8,  , ,'Czas roz.',,'STARTT',,1);
tab_wyk.win_fld(_sWin_wyk,,'ENDD'    ,          ,          , 10,  , ,'Data zak.',,'ENDD',,1);
tab_wyk.win_fld(_sWin_wyk,,'ENDT'    ,          ,          ,  8,  , ,'Czas zak.',,'ENDT',,1);
tab_wyk.win_fld(_sWin_wyk,,'ZPARN'   ,          ,          , 25,  , ,'Partia',,'ZPARN',,1);
tab_wyk.win_fld(_sWin_wyk,,'BATCHCOD',          ,          , 20,  , ,'Batch code',,'Batch code',,1);
tab_wyk.win_fld(_sWin_wyk,,'PLACE'   ,          ,          , 25,  , ,'Stanowisko',,'PLACE',,1);
tab_wyk.win_fld(_sWin_wyk,,'RP'      ,          ,          ,  1,  , ,'RP',,'RP',,1);
tab_wyk.win_fld(_sWin_wyk,,'TPZ'     ,          ,          ,  1,  , ,'TPZ',,'TPZ',,1);
tab_wyk.win_fld(_sWin_wyk,,'UW_ZLEC' ,          ,          , 20,  , ,'Uwagi do zleceń',,'UW_ZLEC',,1);
tab_wyk.win_fld(_sWin_wyk,,'UW_PART' ,          ,          , 20,  , ,'Uwagi do partii',,'UW_PART',,1);
tab_wyk.win_act(_sWin_wyk, ,'Kolejność' );
tab_wyk.win_act(_sWin_wyk, ,'Szukaj');

_sEdt_wyk:=tab_wyk.mk_edit('',,'#tab_wyk_swin_w');
::tab_wyk.win_edit(_sEdt_wyk);

tab_zap.select();

1

\popraw_uw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [22.26]
:: OPIS: Umożliwia poprawę pola uwagi (PD) do partii produktu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=1;

_choice:=1;
_select:=ZPARN.sel_size()<>0;

{? _choice=1 & _can_continue>0 & ZPARN.ZL().STAN<>'Z'
|| ZPARN.cntx_psh();
   _sel:=ZPARN.sel_aget();
   ZPARN.sel_adel();
   {? _sel.size(); _sel.first() || ZPARN.prefix(); ZPARN.seek(_sel.REF,) ?};
   _flag:=ATR.FLAG;
   _edfl:=ATR.FLAG_ED;
   _atrmjs:=ATR.MJS;
   ATR.MJS:='ZPARN';
   ATR.M_ATR:=ZPARN.KTM().M_ATR;
   ATR.UZUP:=exec('wz_uzup','mat_atr',ATR.M_ATR);
   ATR.FLAG_ED:={? (1+ZPARN.ZL().MG().TYP)='D' || 2 || 0 ?};
   ATR.FLAG:={? ATR.FLAG_ED & ZPARN.KTM().M_ATR<>null() || 2 || 0 ?};
   {? ZPARN.DK_C<>null() & ZPARN.DK_C().M_ATR<>null()
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZPARN.DK_C().WAR'+form(_i,-2,,'99')))() !}
   || {! _i:=1..10 |! {? ZPARN.ZL().KTM().M_ATR=ZPARN.KTM().M_ATR & ZPARN.ZL().DK_C<>null()
                      || ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZPARN.ZL().DK_C().WAR'+form(_i,-2,,'99')))()
                      || ($('ATR.WAR'+form(_i,-2,,'99')))():=''
                      ?}
      !}
   ?};
   ZPARN.DK_C().SYM;
   ZPARN.KTM().M_ATR().SYM;
   ZPARN.win_edit('REDM');
   ZPARN.efld_opt('REDM','editable=0',,'SYM');
   {? ZPARN.edit("__CHK.record(ZPARN,,'KTM')")
   || _sel.clear();
      {? _sel.first()
      || {? (1+ZPARN.ZL().MG().TYP)='D' & ATR.FLAG_ED & ATR.FLAG<>1 || exec('akcepatr','mat_atr',0,1) ?};
         {? ZPARN.DK_C=ZPARN.ZL().DK_C || ZPARN.DK_C:=null() ?};
         ZPARN.put(1);
         _opis:=ZPARN.OPIS;
         _dk_c:=ZPARN.DK_C;
         _tw:=ZPARN.TW;
         {!
         |? {? ZPARN.prefix(); ZPARN.seek(_sel.REF,)
             & ~(exec('zlec_planned','po_plan',$ZPARN.ZL)>0)
             & exec('chk_depend','zl_partie',ZPARN.ref,-1,1)<>0
            || ZPARN.OPIS:=_opis;
               ZPARN.TW:=_tw;
               ZPARN.DK_C:=_dk_c;
               ZPARN.put(1)
            ?};
            _sel.next()
         !}
      || {? (1+ZPARN.ZL().MG().TYP)='D' & ATR.FLAG_ED & ATR.FLAG<>1 || exec('akcepatr','mat_atr',0,1) ?};
         {? ZPARN.DK_C=ZPARN.ZL().DK_C || ZPARN.DK_C:=null() ?};
         ZPARN.put(1)
      ?}
   ?};
   ZPARN.efld_opt('REDM','editable=1',,'SYM');
   ZPARN.cntx_pop();
   obj_del(_sel);
   ATR.MJS:=_atrmjs;
   ATR.FLAG_ED:=_edfl;
   ATR.FLAG:=_flag
|| FUN.info('Zlecenie: '+ZPARN.ZL().SYM+' zostało zamknięte. Operacja niedostępna.')
?};
~~
