:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: qlsp.fml [12.51]
:: Utworzony: 16-12-2020
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Funkcje do obsługi dodatkowych funkcji w obszarze sprzedaży.
::======================================================================================================================


\tr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.42 NUCO]
:: OPIS: Tłumaczenia w na dokumentach sprzedaży.
::   WE: _a [STRING] - Kod do wyszukania.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod:=_a;
_tmp:=PARAM_W.JEZYK;
PARAM_W.JEZYK:=null();
_prefix:=exec('tr','tlumaczenia',_kod);
SLO.index('SL');
SLO.prefix(XINFO.SLJEZYK,'ANG');
{? XINFO.SLJEZYK<>null() & SLO.first()
|| PARAM_W.JEZYK:=SLO.ref()
?};
_surfix:=exec('tr','tlumaczenia',_kod);
_tmp==PARAM_W.JEZYK;
_prefix+'/ '+_surfix


\pdms
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.42 NUCO]
:: OPIS: Łączenie pozycji na wydruku faktury sprzedaży.
::   WE: _a [REFERENCE] - Wskazanie na nagłówek faktury.
::       _b [STRING] - Czy łączyć pozycje [T/N]
::       _c [STRING] - Wybrany język ANG - angielski, RU - rosyjski i inne.
::   WY: _TAB [TABLE] - Tabela z pozycjami do wydruku faktury.
::----------------------------------------------------------------------------------------------------------------------
_faks:=_a;
_join:=_b;
_lang:=_c;

_TAB:=tab_tmp(2,
   'DOK','STRING[16]','Dokument',
   'POZ','INTEGER','Poz',
   'KOD','STRING[20]','Kod',
   'NAZ','STRING[255]','Nazwa',
   'NAZ2','STRING[255]','Nazwa',
   'TR','STRING[80]','Opis',
   'PKWIU','STRING[20]','PKWIU',
   'IL','REAL','Ilość',
   'DOKL','INTEGER','Dokladnosc',
   'JM','STRING[5]','j.m.',
   'CENA_RB','REAL','Cena przed rab',
   'CENAW','REAL','Cena walutowa',
   'CENA','REAL','Cena',
   'WAR','REAL','Wartość netto',
   'WARW','REAL','Wartość wal',
   'RAB','REAL','Rabat',
   'WAR_RB','REAL','War rb',
   'WAR_RB_W','REAL','War rbw',
   'WAR_P','REAL','War p',
   'STVAT','STRING[5]','Stawka VAT',
   'KWVAT','REAL','Kwota VAT',
   'KWVAT_W','REAL','Kwota VATw',
   'KWVAT_P','REAL','Kwota VATp',
   'WART_BRT','REAL','Wartosc brutto',
   'WAR_BRTP','REAL','WAR_BRTP',
   'WAR_BRTW','REAL','Wartosc brutto wa'
);

_ndxDP:=_TAB.ndx_tmp(,1,'DOK',,0,'POZ',,0);
_ndxDK:=_TAB.ndx_tmp(,1,'DOK',,0,'KOD',,0,'CENA_RB',,0,'CENAW',,0,'CENA',,0,'STVAT',,0);

_winsel:=_TAB.mk_sel('','P',0);
_TAB.win_fld(_winsel,,'DOK',,,16,,1,'DOK');
_TAB.win_fld(_winsel,,'POZ',,,10,,1,'POZ');
_TAB.win_fld(_winsel,,'KOD',,,20,,1,'KOD');
_TAB.win_fld(_winsel,,'IL',,,20,4,1,'IL');
_TAB.win_fld(_winsel,,'CENA',,,20,4,1,'CENA');
_TAB.win_sel(_winsel);

FAP.index('FAP');
FAP.prefix(_faks);
{? _join='T'
|| _TAB.index(_ndx_DP);
   {? FAP.first()
   || {? -PARAM_W.ZAM='t'
      || _zam:=exec('tr','tlumaczenia','1000148');
         _X_Xp:=sql(
            'select ZK_RP.M, ZK_N.ZAM_KL SYM, ZK_RP.ILR ILOSC '
            'from @ZK_RN '
               'join @ZK_N using (ZK_RN.N, ZK_N.REFERENCE) '
               'join @ZK_P using (ZK_P.N, ZK_N.REFERENCE) '
               'join @ZK_RP using (ZK_RP.N, ZK_RN.REFERENCE) '
            'where ZK_RN.FAKS=\':_a\' '
            'group by ZK_RP.M, ZK_N.ZAM_KL,ZK_RP.ILR order by 1',
            $FAP.FAKS
         )
      ?};
      {!
      |? _TAB.blank();
         _TAB.DOK:=$_faks;
         _TAB.POZ:=FAP.POZ;
         {?  PARAM_W.DR_DUPL='T'
         || _TAB.KOD:=FAP.MX;
            _nazwa:=exec('nazwalp','qlsp',FAP.M,_lang);
            _TAB.NAZ:=(255+_nazwa);
            _TAB.NAZ2:=(255-_nazwa)
         || _TAB.KOD:=FAP.M().KTM;
            _nazwa:=exec('nazwalp','qlsp',FAP.M,_lang);
            _TAB.NAZ:=(255+_nazwa);
            _TAB.NAZ2:=(255-_nazwa)
         ?};
         {? -PARAM_W.ZAM='t'
         || _X_Xp.prefix($FAP.M);
            {? _X_Xp.first()
            || _zm:=_zam1:='';
               _sep:=' ';
               {!
               |? {? _zm<>_X_Xp.SYM
                  || _zm:=_X_Xp.SYM;
                     _zam1+=_sep+_X_Xp.SYM;
                     _sep:=', '
                  ?};
                  _X_Xp.next()
               !};
               _TAB.NAZ2+='; '+_zam +_zam1
            ?}
         ?};
         _TAB.DOKL:=FAP.M().MGR().DOKL;
         _TAB.TR:=FAP.U;
         _TAB.PKWIU:=FAP.M().PKWIU().KOD;
         _TAB.IL:=FAP.IL;
         _TAB.JM:=FAP.M().J().KOD;
         _TAB.CENA_RB:=FAP.CPR$ST.DOKL_C;
         _TAB.CENAW:=FAP.CWAL$ST.DOKL_C;
         _TAB.CENA:=FAP.CN$ST.DOKL_C;
         _TAB.RAB:=FAP.RAB;
         _TAB.WAR:=FAP.WN$2;
         _TAB.WARW:=FAP.WWAL$2;
         _TAB.WAR_P:=FAP.WWAL_P$2;
         _TAB.STVAT:=FAP.SV().KOD;
         _TAB.KWVAT:=FAP.WV$2;
         _TAB.KWVAT_W:=FAP.VWAL$2;
         _TAB.KWVAT_P:=FAP.VWAL_P$2;
         _TAB.WART_BRT:=FAP.WB$2;
         _TAB.WAR_BRTW:=FAP.BWAL$2;
         _TAB.WAR_BRTP:=FAP.BWAL_P$2;
         _TAB.add();
         FAP.next()
      !}
   ?}
|| {? FAP.first()
   || {? -PARAM_W.ZAM='t'
      || _zam:=exec('tr','tlumaczenia','1000148');
         _X_Xp:=sql(
            'select ZK_RP.M, ZK_N.ZAM_KL SYM, ZK_RP.ILR ILOSC '
            'from @ZK_RN '
               'join @ZK_N using (ZK_RN.N, ZK_N.REFERENCE) '
               'join @ZK_P using (ZK_P.N, ZK_N.REFERENCE) '
               'join @ZK_RP using (ZK_RP.N, ZK_RN.REFERENCE) '
            'where ZK_RN.FAKS=\':_a\' '
            'group by ZK_RP.M, ZK_N.ZAM_KL,ZK_RP.ILR order by 1',
            $FAP.FAKS
         )
      ?};

      _TAB.index(_ndxDK);
      {!
      |? _ktm:={? PARAM_W.DR_DUPL='T' || 7+FAP.MX || 7+FAP.M().KTM ?};
         _TAB.prefix($_faks,_ktm,FAP.CPR,FAP.CWAL,FAP.CN,FAP.SV().KOD);
         {? _TAB.first()
         || _TAB.IL+=FAP.IL;
            _TAB.WAR+=FAP.WN$2;
            _TAB.WARW+=FAP.WWAL$2;
            _TAB.WAR_P+=FAP.WWAL_P$2;
            _TAB.KWVAT+=FAP.WV$2;
            _TAB.KWVAT_W+=FAP.VWAL$2;
            _TAB.KWVAT_P+=FAP.VWAL_P$2;
            _TAB.WART_BRT+=FAP.WB$2;
            _TAB.WAR_BRTW+=FAP.BWAL$2;
            _TAB.WAR_BRTP+=FAP.BWAL_P$2;
            _TAB.put()
         || _TAB.blank();
            _TAB.DOK:=$_faks;
            _TAB.POZ:=exec('pdmspoz','qlsp',_TAB,_ndxDP,$_faks);
            {? PARAM_W.DR_DUPL='T'
            || _TAB.KOD:=7+FAP.MX;
               _nazwa:=exec('nazwalp','qlsp',FAP.M,_lang);
               _TAB.NAZ:=(255+_nazwa);
               _TAB.NAZ2:=(255-_nazwa)
            || _TAB.KOD:=7+FAP.M().KTM;
               _nazwa:=exec('nazwalp','qlsp',FAP.M,_lang);
               _TAB.NAZ:=(255+_nazwa);
               _TAB.NAZ2:=(255-_nazwa)
            ?};
            {? -PARAM_W.ZAM='t'
            || _X_Xp.prefix($FAP.M);
               {? _X_Xp.first()
               || _zm:=_zam1:='';
                  _sep:=' ';
                  {!
                  |? {? _zm<>_X_Xp.SYM
                     || _zm:=_X_Xp.SYM;
                        _zam1+=_sep+_X_Xp.SYM;
                        _sep:=', '
                     ?};
                     _X_Xp.next()
                  !};
                  _TAB.NAZ2+='; '+_zam+_zam1
               ?}
            ?};

            _TAB.TR:=FAP.U;
            _TAB.PKWIU:=FAP.M().PKWIU().KOD;
            _TAB.IL:=FAP.IL;
            _TAB.DOKL:=FAP.M().MGR().DOKL;
            _TAB.JM:=FAP.M().J().KOD;
            _TAB.CENA_RB:=FAP.CPR$ST.DOKL_C;
            _TAB.CENAW:=FAP.CWAL$ST.DOKL_C;
            _TAB.CENA:=FAP.CN$ST.DOKL_C;
            _TAB.RAB:=FAP.RAB;
            _TAB.WAR:=FAP.WN$2;
            _TAB.WAR_P:=FAP.WWAL_P$2;
            _TAB.WARW:=FAP.WWAL$2;
            _TAB.STVAT:=FAP.SV().KOD;
            _TAB.KWVAT:=FAP.WV$2;
            _TAB.KWVAT_W:=FAP.VWAL$2;
            _TAB.KWVAT_P:=FAP.VWAL_P$2;
            _TAB.WART_BRT:=FAP.WB$2;
            _TAB.WAR_BRTW:=FAP.BWAL$2;
            _TAB.WAR_BRTP:=FAP.BWAL_P$2;
            _TAB.add()
         ?};
         FAP.next()
      !}
   ?}
?};
_TAB.ndx_drop();
_TAB


\pdmspoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.42 NUCO]
:: OPIS: Łączenie pozycji na wydruku faktury sprzedaży.
::   WE: _a [REFERENCE] - Wskazanie na pozycję tabeli z połączonymi pozycjami.
::       _b [STRING] - Indeks dla dziedziny tabeli.
::       _c [STRING] - Wskazanie pozycji w tabeli z połączonymi pozycjami.
::   WY: _poz [INTEGER] - ustalony numer połączonej pozycji.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_ndx:=_b;
_faks:=_c;

_TAB.cntx_psh();
_TAB.index(_ndx);
_TAB.prefix(_faks);
{? _TAB.last()
|| _poz:=_TAB.POZ+1
|| _poz:=1
?};
_TAB.cntx_pop();
_poz


\nazwalp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.42 NUCO]
:: OPIS: Wyszukiwanie nazwy pozycji na wydruku faktury sprzedaży.
::   WE: _a [REFERENCE] - Wskazanie na materiału z pozycji dokumentu
::       _b [INTEGER] - Nazwa w języku: ANG - angielskim, RU - rosyjski, dla pozostałych w języku polskim.
::       [_c] [INTEGER] - Tekst nazwy gdy brak tłumaczenia nazwy: 1 - napis 'brak danych', 0 - pusty string
::       [_d] [INTEGER] - Czy wyświetlać komunikat o braku tłumacenia nazwy: 1 - tak, 0 - nie
::       [_e] [INTEGER} - Kontrahent do wyszukiwania tłumaczenia nazwy.
::   WY: _name [STRING] - Nazwa do pozycji faktury.
::----------------------------------------------------------------------------------------------------------------------
_stuff:=_a;
_lang:=_b;
_empty:={? var_pres('_c')=1 || _c ?};
_message:={? var_pres('_d')=1 || _d || 1 ?};
_kh_name:={? var_pres('_e')=1 || _e || KH.ref() ?};
_name:='';
M.cntx_psh();
M.prefix();
TRANSLAT.cntx_psh();
TRANSLAT.index('KOD');
{? _lang='ANG'
|| MKODK.index('UNIK');
   MKODK.prefix(_kh_name,_stuff);
   {? MKODK.first()
   || {? _empty
      || _name:=form(MKODK.N);
         {? _name=''
         || _name:='Brak danych'
         ?}
      || _name:={? M.seek(_stuff) || M.N || '' ?}+' '+form(MKODK.N)
      ?}
   ?};
   SLO.index('SL');
   SLO.prefix(XINFO.SLJEZYK,'ANG');
   {? _name='' & SLO.first()
   || TRANSLAT.index('M');
      TRANSLAT.prefix(_stuff,SLO.ref());
      {? XINFO.SLJEZYK<>null() & SLO.first() & TRANSLAT.first()
      || {? _empty
         || _name:=form(TRANSLAT.T);
            {? _name=''
            || _name:='Brak danych'
            ?}
         || _name:=M.N+' '+form(TRANSLAT.T)
         ?}
      || {? _empty
         || _name:='Brak danych'
         || {? _message
            || FUN.emsg('Brak nazwy angielskiej: %1'@[M.KTM])
            ?};
            _name:=M.N
         ?}
      ?}
    ?}
|? _lang='RU'
|| SLO.index('SL');
   SLO.prefix(XINFO.SLJEZYK,'ROS');
   {? _name='' & SLO.first()
   || TRANSLAT.index('M');
      TRANSLAT.prefix(_stuff,SLO.ref());
      {? XINFO.SLJEZYK<>null() & SLO.first() & TRANSLAT.first()
      || {? _empty
         || _name:=form(TRANSLAT.T);
            {? _name=''
            || _name:='Brak danych'
            ?}
         || _name:=M.N+' '+form(TRANSLAT.T)
         ?}
      || {? _empty
         || _name:='Brak danych'
         || {? _message
            || FUN.emsg('Brak nazwy rosyjskiej: %1'@[M.KTM])
            ?};
             _name:=M.N
         ?}
      ?}
   ?}
|| {? M.seek(_stuff) || _name:=M.N ?}
?};
TRANSLAT.cntx_pop();
M.cntx_pop();
_name


\il_wg_opk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [20.42 NUCO]
:: OPIS: Obliczenie ilości wg opakowań zbiorczych produktu.
::   WE:
::   WY: _il [REAL] - ilość wg opakowań zbiorczych.
::----------------------------------------------------------------------------------------------------------------------
_il:=ZK_P.ILZ;

M.cntx_psh();
M_OPAKOW.cntx_psh();
M_OPAKOW.index('M_OPAKOW');
M_OPAKOW.prefix(ZK_P.M);
{? M_OPAKOW.first()
|| _reszta:=_il%*M_OPAKOW.POJ;
   {? _reszta
   || _opk:=_il%M_OPAKOW.POJ;
      {? FUN.ask('%1\n%2\n%3\n%4'
            [  'Wprowadzona ilość:',
               ' - %1 pełnych opakowań'[$_opk],
               ' - pozostała ilość: %1 %2'[$_reszta,ZK_P.JM().KOD],
               'Czy uzupełnić do pełnych opakowań?'
            ]
         )
      || _opk+=1;
         _il:=_opk*M_OPAKOW.POJ
      ?}
   ?}
|| FUN.emsg('%1\n%2'
      [  'Nie zdefiniowano ilości opakowań zbiorczych.',
         'Zosatła przyjęta ilość wprowadzona na pozycji zamówienia.'
      ]
   )
?};
M_OPAKOW.cntx_pop();
M.cntx_pop();
_il


\dod_pdcz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [RR.xx]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('PDCZ');
PDCZ:=tab_tmp(1,'ZAM','INTEGER','ZAM',
                'LP','INTEGER','LP',
                'KOD','STRING[28]','Kod',
                'NAZ','STRING[100]','Naz',
                'IL_KAR','REAL','IL_KAR',
                'IL','REAL','IL',
                'SZT','REAL','SZT',
                'WKN','REAL','WKN',
                'WKB','REAL','WKB',
                'RWN','REAL','RWN',
                'RWP','REAL','RWP',
                'RWB','REAL','RWB');
pdcz1:=PDCZ.ndx_tmp(,,'ZAM',,0,'LP',,0);
PDCZ.index(pdcz1);
ZK_P.cntx_psh();
ZK_P.index('ZAM');
ZK_P.prefix(_a);
{? ZK_P.first
|| {!
   |? PDCZ.prefix(#_a,ZK_P.POZ);
      {? ~PDCZ.first ||
         PDCZ.blank;
         PDCZ.ZAM:=#_a;
         PDCZ.LP:=ZK_P.POZ;
         PDCZ.KOD:=ZK_P.M().KTM;
         PDCZ.NAZ:=ZK_P.M().N;
         opak:=exec('il_opak','qjoko',ZK_P.M,ZK_P.ILP,ZK_P.M().KTM);
         pal:=exec('il_pal','qjoko',ZK_P.M,ZK_P.ILP,ZK_P.M().KTM);
          {? opak<>0
          || PDCZ.IL_KAR:={? ZK_P.ILP-reszta>0 || ((ZK_P.ILP-reszta)/opak) || reszta:=0;1 ?};
             PDCZ.IL:=opak;
             PDCZ.SZT:=PDCZ.IL*((ZK_P.ILP-reszta)/opak);
             PDCZ.WKN:=PDCZ.SZT*ZK_P.M().WN;
             PDCZ.WKB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn;
             PDCZ.RWN:={? pal<>0 || (PDCZ.IL_KAR/pal)$2 || 0 ?};
             PDCZ.RWP:={? pal<>0 || 100-(frac(PDCZ.IL_KAR/pal)*100)$0 || 0 ?};
             PDCZ.RWB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn+{? pal<>0 || ((PDCZ.IL_KAR/pal)#0)*wp+{?frac(PDCZ.IL_KAR/pal)<>0 || 1 || 0 ?}*wp || 0 ?};
             PDCZ.add
          || FUN.emsg('Brak informacji o opakowaniu. Pozycja :'+form(ZK_P.POZ))
          ?};
          {? reszta
          ||
             PDCZ.blank;
             PDCZ.ZAM:=#_a;
             PDCZ.LP:=ZK_P.POZ;
             PDCZ.KOD:=ZK_P.M().KTM;
             PDCZ.NAZ:=ZK_P.M().N;
             PDCZ.IL_KAR:=1;
             PDCZ.IL:=opak;
             PDCZ.SZT:=PDCZ.IL*(reszta/opak);
             PDCZ.WKN:=PDCZ.SZT*ZK_P.M().WN;
             PDCZ.WKB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn;
             PDCZ.RWN:=PDCZ.RWP:=0;
             PDCZ.RWB:=PDCZ.WKN+PDCZ.WKB;
             PDCZ.add()
          ?}
      ?};
      ZK_P.next !}
?};
ZK_P.cntx_pop();
1


\il_opak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [RR.xx]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
wn:=0;
_wynik:=0;
reszta:=0;
M_OPAKOW.cntx_psh();
M_OPAKOW.index('M_OPAKOW');
M_OPAKOW.prefix(_a);
{? M_OPAKOW.first
|| {!
   |? {? M_OPAKOW.OPAKOW().KTM<>'04-0060-000001'
      || {? M_OPAKOW.POJ<=0
         || _wynik:=0
         || reszta:=_b%*M_OPAKOW.POJ;
            _wynik:=M_OPAKOW.POJ;
            wn:=M_OPAKOW.OPAKOW().WN
         ?}
      ?};
      M_OPAKOW.next
   !}
|| _wynik:=0
?};
M_OPAKOW.cntx_pop();
_wynik


\il_pal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [RR.xx]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
wp:=0;
_wynik:=0;
M_OPAKOW.cntx_psh();
M_OPAKOW.index('M_OPAKOW');
M_OPAKOW.prefix(_a);
{? M_OPAKOW.first
|| {!
   |? {? M_OPAKOW.OPAKOW().KTM='04-0060-000001'
      || {? M_OPAKOW.POJ<=0
         || _wynik:=0
         || _wynik:=M_OPAKOW.POJ;
            wp:=M_OPAKOW.OPAKOW().WN
         ?}
      ?};
      M_OPAKOW.next
   !}
|| _wynik:=0
?};
M_OPAKOW.cntx_pop();
_wynik


\dod_pdcz_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [RR.xx]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? __lista_zam = ''
||
   VAR_DEL.delete('PDCZ');
   lp:=0;
   PDCZ:=tab_tmp(1,'ZAM','INTEGER','ZAM',
                   'LP','INTEGER','LP',
                   'KOD','STRING[28]','Kod',
                   'NAZ','STRING[100]','Naz',
                   'IL_KAR','REAL','IL_KAR',
                   'IL','REAL','IL',
                   'SZT','REAL','SZT',
                   'WKN','REAL','WKN',
                   'WKB','REAL','WKB',
                   'RWN','REAL','RWN',
                   'RWP','REAL','RWP',
                   'RWB','REAL','RWB',
                   'MAT','INTEGER','Materiał');
pdcz1:=PDCZ.ndx_tmp(,,'KOD',,0,'LP',,0);
PDCZ.index(pdcz1)
?};
ZK_P.cntx_psh();
ZK_P.index('ZAM');
ZK_P.prefix(_a);
{? ZK_P.first
  ||
 {!|? PDCZ.prefix(ZK_P.M().KTM);
      {? ~PDCZ.first ||
         lp+=1;
         PDCZ.blank;
         PDCZ.ZAM:=#_a;
         PDCZ.LP:=lp;
         PDCZ.KOD:=ZK_P.M().KTM;
         PDCZ.NAZ:=ZK_P.M().N;
         PDCZ.MAT:=#ZK_P.M;
         opak:=exec('il_opak','qjoko',ZK_P.M,ZK_P.ILP,ZK_P.M().KTM);
         pal:=exec('il_pal','qjoko',ZK_P.M,ZK_P.ILP,ZK_P.M().KTM);
          {? opak<>0
           ||         PDCZ.IL_KAR:=(ZK_P.ILP/opak);
                      PDCZ.IL:=opak;
                      PDCZ.SZT:=ZK_P.ILP;
                      PDCZ.WKN:=ZK_P.ILP*ZK_P.M().WN;
                      PDCZ.WKB:=ZK_P.ILP*ZK_P.M().WN+PDCZ.IL_KAR*wn;
                      PDCZ.RWN:={? pal<>0 || (PDCZ.IL_KAR/pal)$2 || 0 ?};
                      PDCZ.RWP:={? pal<>0 || 100-(frac(PDCZ.IL_KAR/pal)*100)$0 || 0 ?};
                      PDCZ.RWB:=ZK_P.ILP*ZK_P.M().WN+PDCZ.IL_KAR*wn+{? pal<>0 || ((PDCZ.IL_KAR/pal)#0)*wp+{?frac(PDCZ.IL_KAR/pal)<>0 || 1 || 0 ?}*wp || 0 ?};
                      PDCZ.add
          || FUN.emsg('Brak informacji o opkaowaniu. Pozycja :'+form(ZK_P.POZ))
          ?}
      ||
             opak:=exec('il_opak','qjoko',ZK_P.M,ZK_P.ILP+PDCZ.SZT,ZK_P.M().KTM);
             pal:=exec('il_pal','qjoko',ZK_P.M,ZK_P.ILP+PDCZ.SZT,ZK_P.M().KTM);
          {? opak<>0
          ||
             PDCZ.IL_KAR:=((PDCZ.SZT+ZK_P.ILP)/opak);
             PDCZ.IL:=opak;
             PDCZ.SZT+=ZK_P.ILP;
             PDCZ.WKN:=PDCZ.SZT*ZK_P.M().WN;
             PDCZ.WKB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn;
             PDCZ.RWN:={? pal<>0 || (PDCZ.IL_KAR/pal)$2 || 0 ?};
             PDCZ.RWP:={? pal<>0 || 100-(frac(PDCZ.IL_KAR/pal)*100)$0 || 0 ?};
             PDCZ.RWB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn+{? pal<>0 || ((PDCZ.IL_KAR/pal)#0)*wp+{?frac(PDCZ.IL_KAR/pal)<>0 || 1 || 0 ?}*wp || 0 ?};
             PDCZ.put
          ?}
      ?};
      ZK_P.next
 !};
  lp:=0;PDCZ.clear();
  {? PDCZ.first
  ||
     {!|?
            M.cntx_psh;
            opak:=exec('il_opak','qjoko',{? M.clear();M.index('MATKTM');M.find_key(PDCZ.KOD)|| M.ref() || null ?},PDCZ.SZT,PDCZ.KOD);
            pal:=exec('il_pal','qjoko',{? M.clear();M.index('MATKTM');M.find_key(PDCZ.KOD)|| M.ref() || null ?},PDCZ.SZT,PDCZ.KOD);
            M.cntx_pop;
            lp+=1;
            PDCZ.LP:=lp;
            PDCZ.IL_KAR:={? PDCZ.SZT-reszta>0 || ((PDCZ.SZT-reszta)/opak) || reszta:=0;1 ?};
            PDCZ.IL:=opak;
            PDCZ.SZT:=PDCZ.IL*((PDCZ.SZT-reszta)/opak);
            PDCZ.WKN:=PDCZ.SZT*ZK_P.M().WN;
            PDCZ.WKB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn;
            PDCZ.RWN:={? pal<>0 || (PDCZ.IL_KAR/pal)$2 || 0 ?};
            PDCZ.RWP:={? pal<>0 || 100-(frac(PDCZ.IL_KAR/pal)*100)$0 || 0 ?};
            PDCZ.RWB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn+{? pal<>0 || ((PDCZ.IL_KAR/pal)#0)*wp+{?frac(PDCZ.IL_KAR/pal)<>0 || 1 || 0 ?}*wp || 0 ?};
            PDCZ.put;
            {? reszta
            ||
               lp+=1;
               PDCZ.LP:=lp;
               PDCZ.LP:=ZK_P.POZ;
               PDCZ.MAT:=#ZK_P.M;
               PDCZ.IL_KAR:=1;
               PDCZ.IL:=opak;
               PDCZ.SZT:=reszta;
               PDCZ.WKN:=PDCZ.SZT*ZK_P.M().WN;
               PDCZ.WKB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn;
               PDCZ.RWN:=PDCZ.RWP:=0;
               PDCZ.RWB:=PDCZ.WKN+PDCZ.WKB;
               PDCZ.add()
            ?};
            PDCZ.next()
     !}
  ?}
?};
ZK_P.cntx_pop();
1


\dod_pdcz_dr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [RR.xx]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('PDCZ');
PDCZ:=tab_tmp(1,'ZAM','INTEGER','ZAM',
                'LP','INTEGER','LP',
                'KOD','STRING[28]','Kod',
                'NAZ','STRING[100]','Naz',
                'IL_KAR','REAL','IL_KAR',
                'IL','REAL','IL',
                'SZT','REAL','SZT',
                'WKN','REAL','WKN',
                'WKB','REAL','WKB',
                'RWN','REAL','RWN',
                'RWP','REAL','RWP',
                'RWB','REAL','RWB',
                'MAT','INTEGER','Materiał');
pdcz1:=PDCZ.ndx_tmp(,,'ZAM',,0,'LP',,0);
PDCZ.index(pdcz1);
ZK_P.cntx_psh();
ZK_P.index('ZAM');
ZK_P.prefix(_a);
{? ZK_P.first
  ||
 {!|? PDCZ.prefix(#_a,ZK_P.POZ);
      {? (ZK_P.A='A' & ZK_P.TOP=1 & ZK_P.ILP>0)
       & ~PDCZ.first ||
         PDCZ.blank;
         PDCZ.ZAM:=#_a;
         PDCZ.LP:=ZK_P.POZ;
         PDCZ.KOD:=ZK_P.M().KTM;
         PDCZ.NAZ:=ZK_P.M().N;
         PDCZ.MAT:=#ZK_P.M;
         opak:=exec('il_opak','qjoko',ZK_P.M,ZK_P.ILP,ZK_P.M().KTM);
         pal:=exec('il_pal','qjoko',ZK_P.M,ZK_P.ILP,ZK_P.M().KTM);
           {? opak<>0
           ||         PDCZ.IL_KAR:={? ZK_P.ILP-reszta>0 || ((ZK_P.ILP-reszta)/opak) || reszta:=0;1 ?};
                      PDCZ.IL:=opak;
                      PDCZ.SZT:=PDCZ.IL*((ZK_P.ILP-reszta)/opak);
                      PDCZ.WKN:=PDCZ.SZT*ZK_P.M().WN;
                      PDCZ.WKB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn;
                      PDCZ.RWN:={? pal<>0 || (PDCZ.IL_KAR/pal)$2 || 0 ?};
                      PDCZ.RWP:={? pal<>0 || 100-(frac(PDCZ.IL_KAR/pal)*100)$0 || 0 ?};
                      PDCZ.RWB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn+{? pal<>0 || ((PDCZ.IL_KAR/pal)#0)*wp+{?frac(PDCZ.IL_KAR/pal)<>0 || 1 || 0 ?}*wp || 0 ?};
                      PDCZ.add
          || FUN.emsg('Brak informacji o opkaowaniu. Pozycja :'+form(ZK_P.POZ))
          ?};
          {? reszta
          ||
             PDCZ.blank;
             PDCZ.ZAM:=#_a;
             PDCZ.LP:=ZK_P.POZ;
             PDCZ.KOD:=ZK_P.M().KTM;
             PDCZ.NAZ:=ZK_P.M().N;
             PDCZ.MAT:=#ZK_P.M;
             PDCZ.IL_KAR:=1;
             PDCZ.IL:=opak;
             PDCZ.SZT:=PDCZ.IL*(reszta/opak);
             PDCZ.WKN:=PDCZ.SZT*ZK_P.M().WN;
             PDCZ.WKB:=PDCZ.SZT*ZK_P.M().WN+PDCZ.IL_KAR*wn;
             PDCZ.RWN:=PDCZ.RWP:=0;
             PDCZ.RWB:=PDCZ.WKN+PDCZ.WKB;
             PDCZ.add()
          ?}
      ?};
      ZK_P.next !}
?};
ZK_P.cntx_pop();
1


\pob_pal_inf_mat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PGor [JOKO]
:: OPIS: Ilosc palet do wyrobu w oparciu o przekazana ilosc
::   WE: _a - #M.ref()
::       _b - ilosc
::   WY: _ilosc
::----------------------------------------------------------------------------------------------------------------------
_ilosc:=0;
_dalej:=1;
_mat:=_a;
_ilo:=_b;
M.cntx_psh();
M_OPAKOW.cntx_psh();
M_OPAKOW.index('M_OPAKOW');
M_OPAKOW.prefix(_mat);
{? M_OPAKOW.first()
||
   {!
   |?
      {? -M_OPAKOW.OPAKOW().N*'paleta'>0 &
         _ilo>0 &
         M_OPAKOW.POJ>0
      || _ilosc:=_ilo/M_OPAKOW.POJ;
         _dalej:=0
      ?};
      _dalej=1 &
      M_OPAKOW.next()
   !}
?};
M_OPAKOW.cntx_pop();
M.cntx_pop();
_ilosc


\real2date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [RR.xx]
:: OPIS:
::   WE:
::   WY:
:: pobranie ilosci zrealizowanej zamowienia sprzedazy na dzien
:: wywolywana w raporcie zkzam_rl.rpm
:: _a - data badania stanu realizacji
:: _b - pozycja zamowienia
::----------------------------------------------------------------------------------------------------------------------
_ilosc:=0;
{? var_pres('_a')=4 & var_pres('_b')=1 & _b
|| ZK_RP.cntx_psh();
   ZK_RP.index('NPOZ');
   ZK_RP.prefix(ZK_N.ref,_b);
   {? ZK_RP.first()
   || {!
      |? {? ZK_RP.N().DR<=_a
         || _ilosc+=ZK_RP.ILR
         ?};
         ZK_RP.next()
      !}
   ?};
   ZK_RP.cntx_pop()
?};
_ilosc


\stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [RR.xx]
:: OPIS:
::   WE:
::   WY:
:: Stan towaru, razem na wszystkich magazynach
:: _a - M.ref
:: _b - na dzien
::----------------------------------------------------------------------------------------------------------------------
stanIl:=stanWar:=0;
{? var_pres('_a')=7 & _a & var_pres('_b')=4 & #_b
|| SM.cntx_psh();
   SM.index('SMM');
   SM.prefix(_a);
   {? SM.first()
   || {!
      |? exec('stan_zest','magazyn_stan',SM.MAG,_a,_b,1,"stanIl","stanWar");
         SM.next()
      !}
   ?};
   SM.cntx_pop()
?};
stanIl


\orders2item
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS: Symbole zamówienia klienta do pozycji faktury.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_orders:='';

_TAB:=sql('
   select distinct
      ZK_RP.M, ZK_N.ZAM_KL
   from @ZK_RP
      join @ZK_RN using (ZK_RP.N, ZK_RN.REFERENCE)
      join @ZK_N using (ZK_RN.N, ZK_N.REFERENCE)
   where
      ZK_RP.M=:_b and ZK_RN.FAKS=:_a
   group by
      ZK_RP.M, ZK_N.ZAM_KL
   order by 1',
   FAP.FAKS,FAP.M
);
{? _TAB.first()
|| _orders+='Zamówienie';
   {? FAP.FAKS().T().UE='T' | FAP.FAKS().T().EXPORT='T'
   || _orders+='/Order'
   ?};
   _orders+=':';
   {!
   |? _orders+=' %1,'[_TAB.ZAM_KL];
      _TAB.next()
   !};
   _orders:=_orders-1
?};

_orders


\inf_dod_poz_fak_spr_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS: Symbole zamówienia klienta do pozycji faktury sprzedaży podczas akceptacji dokumentu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FAP.cntx_psh();
FAP.index('FAP');
FAP.prefix(FAKS.ref());
{? FAP.first()
|| FAKSO.cntx_psh();
   {!
   |? exec('inf_dod','fakso',-1,'fakpo','P');

      FAP.next()
   !};
   FAKSO.cntx_pop()
?};
FAP.cntx_pop();
1


\orders2invoice
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS: Symbole zamówienia klienta do faktury.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_orders:='';

_TAB:=sql('
   select distinct
      ZK_N.ZAM_KL
   from @ZK_RN
      join @ZK_N using (ZK_RN.N, ZK_N.REFERENCE)
   where
      ZK_RN.FAKS=:_a
   group by
      ZK_N.ZAM_KL
   order by 1',
   FAKS.ref()
);
{? _TAB.first()
|| _orders+='Zamówienia';
   {? FAKS.T().UE='T' | FAKS.T().EXPORT='T'
   || _orders+='/Orders'
   ?};
   _orders+=':';
   {!
   |? _orders+=' %1,'[_TAB.ZAM_KL];
      _TAB.next()
   !};
   _orders:=_orders-1
?};

_orders


\shipping_plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS: Utworzenie i wyświetlenie planu wysyłki na podstawie zamówień sprzedaży i informacji dodatkowych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=exec('par_wydr_ddp','pkd','Parametry zestawienia planu wysyłek',
   "  {? cur_tab().OD<>#0 & cur_tab().DO<>#0
      || {? cur_tab().OD>cur_tab().DO
         || FUN.emsg('Niepoprawny zakres dat');
            'OD'
         || 1
         ?}
      || 1
      ?}
   ",
   date()-365,'Od daty'@,,
   date()+7,'Do daty'@
);

{? ~_par.first()
|| return(~~)
?};

_from:=_par.OD;
_to:=_par.DO;

_TAB:=sql('
   select
      ZK_P.DT as DT,
      M.KTM||\' \'||M.N as M,
      ZK_N.SYM as SYM,
      ZK_N.ZAM_KL as ZAM_KL,
      ZK_P.POZ as POZ,
      KH.KOD||\' \'||KH.NAZ as KH,
      KH_ODB.KOD||\' \'||KH_ODB.NAZ as KH_ODB,
      KH_MSC.NAZ as KH_MSC,
      cast (ZK_P.ILP as real_type) as ILP,
      cast(null as real_type) as ILD,
      cast(null as real_type) as DIFF,
      \'N\' as PR,
      M.DOKL as DOKL,
      ZK_P.REFERENCE as ZK_P,
      space(255) as TD,
      \'N\' as MR,
      ZK_P.U as UWAGI,
      \'N\' as WYBOR,
      M.REFERENCE as KTM
   from
      ZK_P
         left join
      M using (ZK_P.M,M.reference)
         left join
      ZK_N using (ZK_P.N,ZK_N.reference)
         left join
      TYPYZAM using (ZK_N.T,TYPYZAM.reference)
         left join
      KH using (ZK_N.KH,KH.reference)
         left join
      KH_ODB using (ZK_N.ODB,KH_ODB.reference)
         left join
      KH_MSC using (ZK_N.KH_MSC,KH_MSC.reference)
   where
      TYPYZAM.R=\'Z\'
         and
      ZK_N.A=\'A\'
         and
      ZK_N.AKC=\'T\'
         and
      ZK_N.STAN<>\'ZRE\'
         and
      (ZK_P.DT>=to_date(:_a) and ZK_P.DT<=to_date(:_b))
         and
      ZK_P.ILP>0
   order by 3',
   _from,_to
);

_FAKSO:=tab_tmp(1,
   'ZK_P','STRING[20]','Wskazanie na pozycję zamówienia',
   'ILP','STRING[255]','Ilość próbek',
   'TD','STRING[255]','Termin dostawy próbek',
   'MD','STRING[255]','Miejsce dostawy próbek',
   'DO','STRING[255]','Do kogo wysłać próbki',
   'UWAGI','STRING[255]','Uwagi'
);

ZK_N.cntx_psh();
ZK_P.cntx_psh();
ZK_P.prefix();
FAKSO.cntx_psh();
FAKSO.use((FAKSO.name()-2)+'__');
{? ZK_P.first()
|| {!
   |? _sample:=0;
:: Sprawdzenie czy są próbki do wysłania.
      FAKSO.index('ZK_P');
      FAKSO.prefix(ZK_P.ref());
      {? FAKSO.first()
      || {!
         |? _sample:=+FAKSO.O;
            ~_sample & FAKSO.next()
         !}
      ?};

:: Zebranie informacji o próbkach do wysłania.
      {? _sample
      || {? FAKSO.first()
         || _FAKSO.ZK_P:=$ZK_P.ref();
            _add:=0;
            _d0:=date(0,0,0);
            {!
            |? {? FAKSO.T*'Ilość próbek:'
               || _FAKSO.ILP:=FAKSO.O;
                  _add:=_FAKSO.add(1)
               |? _add & FAKSO.T*'Termin realizacji:'
               || _FAKSO.TD:=FAKSO.O;
                  _FAKSO.put(1)
               |? _add & FAKSO.T*'Miesce dostawy:'
               || _FAKSO.MD:=FAKSO.O;
                  _FAKSO.put(1)
               |? _add & FAKSO.T*'Do kogo:'
               || _FAKSO.DO:=FAKSO.O;
                  _FAKSO.put(1)
               |? _add & FAKSO.T*'Uwagi:'
               || _FAKSO.UWAGI:=FAKSO.O;
                  _FAKSO.put(1)
               ?};
               FAKSO.next()
            !}
         ?}
      ?};
      ZK_P.next()
   !}
?};
FAKSO.cntx_pop();

:: Dodanie pozycji z próbkami.
{? _FAKSO.first()
|| ZK_P.prefix();
   {!
   |? _ok:=0;
      {? +_FAKSO.TD=10
      || _date:=_d0;
         {? #(4+_FAKSO.TD)
         || _year:=#(4+_FAKSO.TD);
            _month:=#(5-_FAKSO.TD-3);
            _day:=#(_FAKSO.TD+2)
         |? #(_FAKSO.TD+4)
         || _year:=#(2+_FAKSO.TD);
            _month:=#(3+_FAKSO.TD-5);
            _day:=#(_FAKSO.TD+4)
         ?};
         {? ZK_P.seek(_FAKSO.ZK_P,) & (_year>=ZK_P.N().DP~1 &_year<=ZK_N.DT~1)
            &
            (_month>=1 & _month<=12)
            &
            (_day>=1 & _day<=date(_year,_month,0)~3)
         || _date:=date(_year,_month,_day);
            {? _date>=_from & _date<=_to
            || _ok:=1
            ?}
         ?}
      ?};
      {? _ok & +_FAKSO.ILP & ZK_P.seek(_FAKSO.ZK_P,)
      || _TAB.DT:=ZK_P.DT;
         _TAB.M:='%1 %2'[ZK_P.M().KTM,M.N];
         _TAB.SYM:=ZK_P.N().SYM;
         _TAB.ZAM_KL:=ZK_N.ZAM_KL;
         _TAB.POZ:=ZK_P.POZ;
         _TAB.KH:='%1 %2'[ZK_N.KH().KOD,ZK_N.KH().NAZ];
         _TAB.KH_ODB:='%1 %2'[ZK_N.ODB().KOD,ZK_N.ODB().NAZ];
         _TAB.KH_MSC:=KH_MSC.NAZ;
         _TAB.PR:='T';
         _TAB.ILP:=#_FAKSO.ILP;
         _TAB.TD:=_FAKSO.TD;
         _TAB.KH_MSC:=_FAKSO.MD;
         _TAB.KH_ODB:=_FAKSO.DO;
         _TAB.DIFF:=0;
         _TAB.ILD:=0;
         _TAB.DOKL:=M.DOKL;
         _TAB.ZK_P:=$ZK_P.ref();
         _TAB.UWAGI:=_FAKSO.UWAGI;
         _TAB.add(1)
      ?};
      _FAKSO.next()
   !}
?};

{? _TAB.first()
|| {!
   |? {? ZK_P.seek(_TAB.ZK_P,)
      || exec('zwr_stan','magazyn_stan',ZK_P.M,{? ZK_P.MG || 1 || 4 ?},ZK_P.MG,0);
         _TAB.ILD:=BEER.SD;
         _TAB.DIFF:=_TAB.ILD-_TAB.ILP;
         {? _TAB.ILP>0
         || {? _TAB.DIFF>=0
            || _TAB.MR:='T'
            |? _TAB.ILD>0
            || _TAB.MR:='C'
            ?}
         ?};
         {? form(_TAB.TD)=''
         || _TAB.TD:=$ZK_P.DT
         ?};
         _TAB.put()
      ?};
      _TAB.next()
   !};
   _TAB.first()
?};
ZK_P.cntx_pop();
ZK_N.cntx_pop();

_dokl:=sql('select max(:_a.DOKL) as DOKL from :_a',_TAB).DOKL;

_ws:=_TAB.mk_sel('Plan wysyłek'@,,,'#planwysyl',,,,,'U',,,,,'maximized');
_TAB.win_fld(_ws,,'PR',,,-5,,1,'Próbka'@,,'Próbka prodkutu [T/N]'@,2,,"\'T\'","\'N\'");
_TAB.win_fld(_ws,,'MR',,,-5,,1,'Do zrealizowania'@,,'Możliwa realizacja wysyłki [T/N/C]'@,2,,"\'T\'","\'N\'","\'C\'");
_TAB.win_fld(_ws,,'DT',,,-11,,1,'Termin realizacji'@,,'Termin realizacji zamówienia'@);
_TAB.win_fld(_ws,,'TD',,,-11,,1,'Termin dostawy'@,,'Termin planowanej dostawy'@);
_TAB.win_fld(_ws,,'M',,,25,,1,'Produkt'@,,'Produkt do wysyłki'@);
_TAB.win_fld(_ws,,'SYM',,,-15,,1,'Symbol zamówienia'@,,'Symbol zamówienia w programie'@);
_TAB.win_fld(_ws,,'ZAM_KL',,,-15,,1,'Zamówienie klienta'@,,'Symbol zamówienia klienta'@);
_TAB.win_fld(_ws,,'POZ',,,-3,0,1,'Pozycja'@,,'Pozycja zamówienia'@);
_TAB.win_fld(_ws,,'KH',,,20,,1,'Kontrahent'@,,'Kontrahent'@);
_TAB.win_fld(_ws,,'KH_ODB',,,20,,1,'Odbiorca'@,,'Odbiorca zamówienia'@);
_TAB.win_fld(_ws,,'KH_MSC',,,20,,1,'Miejsce dostawy'@,,'Miejsce dostawy'@);
_TAB.win_fld(_ws,,'UWAGI',,,20,,1,'Uwagi'@,,'Uwagi do pozycji zamówienia'@);
_TAB.win_fld(_ws,,'ILP',,,-15,_dokl,1,'Ilość do realizacji'@,,'Ilość pozostała do realizacji'@);
_TAB.win_fld(_ws,,'ILD',,,-15,_dokl,1,'Ilość dostępna'@,,'Ilość dostępna do realizacji'@);
_TAB.win_fld(_ws,,'WYBOR',,,-5,,1,'Do realizacji'@,,'Pozycja do realizacji [T/N]'@,2,,"\'T\'","\'N\'");
_TAB.win_act(_ws,,'Formuła','Wybierz'@,,'Wybór do wydruku pozycji planu wysyłek'@,
   " exec('select_for_shipping','qlsp',cur_tab(),cur_win())
   ",,,1,,,'W'
);
_TAB.win_act(_ws,,'Formuła','P&omiń'@,,'Pominięcie na wydruku pozycji planu wysyłek'@,
   " exec('skip_for_shipping','qlsp',cur_tab(),cur_win())
   ",,,1,,,'O'
);
_TAB.win_act(_ws,,'Formuła','Druku&j'@,,'Drukowanie wybranych pozycji planu wysyłek'@,
   " exec('print_shipping_plan','qlsp',cur_tab(),cur_win())
   ",,,1,,,'J'
);
_TAB.win_act(_ws,,'Kolejność');
_TAB.win_act(_ws,,'Szukaj');
_TAB.win_act(_ws,,'Rekord',,,,"exec('br_shipping_plan','qlsp',cur_tab(),cur_win())");

_TAB.win_btn(_ws,'text=%1'['Wybierz'],'menu:W');
_TAB.win_btn(_ws,'text=%1'['Pomiń'],'menu:O');
_TAB.win_btn(_ws,'text=%1'['Drukuj'],'menu:J');


_TAB.index(_TAB.ndx_tmp(,1,'DT',,,'SYM',,,'PR',,));
_TAB.win_sel(_ws);
_TAB.select(,1);
_TAB.ndx_drop();
~~


\string2date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS:  Zamiana tekstu na datę jeśli się uda.
::   WE: _a [STRING] - tekst do zamiany w formacie rrrr(sep)mm(sep)dd
::       _b [INTEGER] - (0/1)jeżeli nie uda się ustalić daty to w wyniku funkcji data zerowa/bieżąca
::   WY: _date - ustalona data
::----------------------------------------------------------------------------------------------------------------------
_txt:=_a;
_date:=#0;
{? var_pres('_b')=type_of(0) & _b=1
|| _date:=date()
?};
{? +_txt=0
|| return(_date)
?};

{? #(8+_txt)=0
|| _sep:=(5+_txt)+1;
   {? +_sep
   || _txt:=gsub(_txt,_sep,'')
   ?}
?};

_year:=#(4+_txt);
{? _year
|| _month:=#(2+(4-_txt));
   {? _month>0 & _month<13
   || _day:=#(2+(6-_txt));
      {? _day>0 & (_day<=date(_year,_month,0)~1)
      || _date:=date(_year,_month,_day)
      ?}
   ?}
?};
_date


\shipping_place
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS: Miejsce dostawy do informacji dodatkowych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_msc:='';
_be_add:=
   "  KH_MSC.blank();
      KH_MSC.KH:=KH.ref();
      {? KH_MSC.edit()
      || KH_MSC.add(1);
         {? KH_MSC.f_active()
         || KH_MSC.f_rfresh()
         ?}
      ?}
   ";
KH.cntx_psh();
ZK_P.N().KH();
KH_MSC.cntx_psh();
KH_MSC.index('KH_NAZ');
KH_MSC.prefix(KH.ref());
_ws:=KH_MSC.mk_sel('Miejsca dostawy',,,'#shippingpl',,,,,'U');
KH_MSC.win_fld(_ws,,'NAZ',,,50,,1,'Nazwa',,'Nazwa miejsca dostawy');
KH_MSC.win_fld(_ws,,'MIASTO',,,30,,1,'Miasto',,'Miasto dostawy');
KH_MSC.win_fld(_ws,,'UL',,,30,,1,'Ulica',,'Ulica dostawy');
KH_MSC.win_fld(_ws,,'TEL',,,20,,1,'Telefon',,'Telefon kontaktowy');
KH_MSC.win_act(_ws,,'Formuła','Wybierz',,,"sel_exit()",,1,,,,'W');
KH_MSC.win_act(_ws,1,'Formuła','Dołącz',,,_be_add,,1,,,,'D');
KH_MSC.win_act(_ws,0,'Formuła','Dołącz',,,_be_add,,,,,,'D');
KH_MSC.win_act(_ws,1,'Formuła','K&opiuj z kontrahenta',,,
   "  exec('kh_msc','kontrahent',0);
      exec('copy_kh_msc','kontrahent')
   ",,,,,,'O'
);
KH_MSC.win_act(_ws,0,'Formuła','K&opiuj z kontrahenta',,,
   "  exec('kh_msc','kontrahent',0);
      exec('copy_kh_msc','kontrahent')
   ",,,,,,'O'
);
KH_MSC.win_act(_ws,,'Popraw');
KH_MSC.win_act(_ws,,'Usuń');
KH_MSC.win_act(_ws,,'Kolejność');
KH_MSC.win_sel(_ws);
KH_MSC.win_edit('RED');


{? -(1+menu_txt)='p'
|| {? KH_MSC.select()
   || _msc:=KH_MSC.NAZ
   ?}
?};
KH_MSC.cntx_pop();
KH.cntx_pop();
_msc


\select_for_shipping
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS: Akcja wybierz do wysyłki dla pozycji planu wysyłek.
::   WE: _a [TABLE] - Tabela przechowująca dane.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_TAB.WYBOR:='T';
_TAB.put();
~~


\skip_for_shipping
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS: Akcja pomiń do wysyłki dla pozycji planu wysyłek.
::   WE: _a [TABLE] - Tabela przechowująca dane.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_TAB.WYBOR:='N';
_TAB.put();
~~


\print_shipping_plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS: Akcja drukuj dla wybranych pozycji planu wysyłek.
::   WE: _a [TABLE] - Tabela przechowująca dane.
::       _b - wskazanie na okno wertowania.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new('TAB');
_par.TAB:=_a;
params_set('TAB',_par.TAB);
rep_exec('lsp_plwys*');
~~


\br_shipping_plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS: Funkcja wykonywana przed wyświetleniem/odświeżeniem rekordu.
::   WE: _a [TABLE] - Tabela przechowująca dane.
::       _b - wskazanie na okno wertowania.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_win:=_b;

{? _TAB.ILD
|| {? _TAB.WYBOR='T'
   || _actions:='W'
   || _actions:='O'
   ?}
|| _actions:='WO'
?};
_TAB.cntx_psh();
{? ~_TAB.find_tab(1,'WYBOR',,'=','T')
|| _actions+='J'
?};
_TAB.cntx_pop();

_TAB.actions_grayed(_win,_actions)


\czy_wniosek_zkn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja sprawdza czy można uruchomić wniosek o akceptacje zamóienia sprzedaży na podstawie statusów pozycji
::       zamówień uzupełnianych w procesie NUCO_SPR_ZAM_OBG lub w obszarze zamówień sprzedaży
::       Statusy = T-potwierdzony, A-automatycznie uzupełniony w procesie (nie było wymagane potwierdzenie)
::   WE: _a - ZK_N.ref()
::   WY: 1 - uruchomić, 0 - nie uruchamiać
::----------------------------------------------------------------------------------------------------------------------
_result:=1;

_tab:=sql('select ZK_P.*, QGRP5.GRP5 as GRP5, M.KTM as KTM
           from @ZK_P join M left join QGRP5
           where ZK_P.N=:_a
          ',_a);
{? _tab.first()
|| {!
   |? {? 3+_tab.KTM='02-' | 3+_tab.KTM='01-'
      || {? _tab.GRP5='Sucha'
         || {? ~((_tab.QSTA_PS='T'|_tab.QSTA_PS='A')&(_tab.QSTA_MD='T'|_tab.QSTA_MD='A'))
            || _result:=0
            ?}
         |? _tab.GRP5='Mokra'
         || {? ~((_tab.QSTA_PM='T'|_tab.QSTA_PM='A')&(_tab.QSTA_MD='T'|_tab.QSTA_MD='A'))
            || _result:=0
            ?}
         || {? ~((_tab.QSTA_PM='T'|_tab.QSTA_PM='A') &(_tab.QSTA_PS='T' | _tab.QSTA_PS='A')&(_tab.QSTA_MD='T'|_tab.QSTA_MD='A'))
                | (_tab.QSTA_PM='' & _tab.QSTA_PS='')
            || _result:=0
            ?}
         ?}
      ?};
      _tab.next() & _result=1
   !}
?};

_result


\zk_p_key
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Formuła tworzy klucze grpkey dla pozycji zamówienia, dla których należy wykonać weryfikacje kart technologicznych
::       wywoływana w czynności procesu NUCO_SPR_ZAM_OBG
::   WE:  [_a] - ref SQL-owy ZK_N
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ar:='';

{? var_pres('_a')=type_of('')
|| _ar:=_a
?};

_mp:=params_get().mp;
_in:=params_get().in;

{? _in.ITEM<>''
|| _ar:=_in.ITEM
?};

_mp.grpkey();

_tab:=sql('select ZK_P.REFERENCE as REF, M.KTM
             from @ZK_P join M using(ZK_P.M,M.REFERENCE)
            where ZK_P.N=\':_a\'
          ', _ar);
{? _tab.first()
|| {!
   |? {? _tab.REF<>'' &  (3+_tab.KTM='02-' |  3+_tab.KTM= '01-')
      || _mp.grpkeyAdd(_tab.REF)
      ?};
     _tab.next()
   !}
?};
_mp.done();
~~


\czy_karty_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Formuła wyświetla zapytanie czy zweryfikowano/dodano wszystkie karty tech. dla pozycji zamówienia
::       wywoływana w porcesie  NUCO_SPR_ZAM_OBG
::   WE: _a - typ akceptacji - możliwe warianty 'PM', 'PS', 'MD'
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_txt:='';
_wyb:=0;

_ar:=null();

_mp:=params_get().mp;
_in:=params_get().in;

:: w p01 powinien być podpięty argument z zawartością PK_Z.ref() lub $PK_Z.ref()
{? var_pres('p01',_in)=type_of(null())
|| _ar:=_in.p01
|? var_pres('p01',_in)=type_of('')
|| _ar:=exec('FindAndGet','#table',ZK_P,_in.p01,,"ref()",null())
?};

{? _ar=null()
|| 'Błąd argumentu w procesie NUCO_SPR_ZAM_OBG - czy_karty_ok'
|| _txt:=sql('select (\'Zamówienie nr. \' || ZK_N.SYM || \', pozycja nr \' || to_string(ZK_P.POZ)) as POZ
                from @ZK_P join @ZK_N
               where ZK_P.REFERENCE=:_a
             ', _ar).POZ;
   {!
   |? _wyb:=FUN.choice('Czy potwierdzasz weryfikacje kart technologicznych dla pozycji zamówienia?',3,'Tak','Pokaż pozycję zam.',,,'Nie','@'+_txt);
      {? _wyb=0
      || FUN.info('Nie wykonano żadnego działania.\n
                   Zadanie weryfikacji karty technologicznej pozostanie na liście do wykonania.');
         _result:=0;
         0
      |? _wyb=1
      || FUN.info('Pozycja została oznaczona jako zweryfikowana, a zadanie zostało usunięte z listy do wykonania.');
         _fo:='QSTA_'+_a+':=\'T\';QSTD_'+_a+':=date(); put()';
         exec('FindAndGet','#table',ZK_P,_ar,,$_fo,0);
         _result:=1;
         0
      |? _wyb=2
      || params_exec('czy_karty_display_todo','qlsp',_ar);
         1
      || 1
      ?}
   !}
?};

_result


\czy_karty_opis_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Formuła wyświetla zapytanie czy zweryfikowano/dodano wszystkie karty tech. dla pozycji zamówienia
::       wywoływana w porcesie  NUCO_SPR_ZAM_OBG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_txt:='';

_ar:=null();

_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));

:: w p01 powinien być podpięty argument z zawartością PK_Z.ref() lub $PK_Z.ref()
{? var_pres('p01',_in)=type_of(null())
|| _ar:=_in.p01
|? var_pres('p01',_in)=type_of('')
|| _ar:=exec('FindAndGet','#table',ZK_P,_in.p01,,"ref()",null())
?};

{? _ar=null()
|| 'Błąd argumentu w procesie NUCO_SPR_ZAM_OBG - czy_karty_opis_todo'@@
|| _txt:=sql('select (M.KTM || \', zamówienie nr. \' || ZK_N.SYM || \',poz. \' || to_string(ZK_P.POZ)) as POZ
                from @ZK_P join @ZK_N join M using (ZK_P.M,M.REFERENCE)
               where ZK_P.REFERENCE=:_a
             ', _ar).POZ;
   _result:='Utwórz/zweryfikuj kartę techn. dla indeksu: %1'@@[_txt]
?};

_result


\czy_karty_display_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Formuła wyświetla pozycje zamówienia dla której mają być zweryfikowane karty technologiczne
::       wywoływana w porcesie  NUCO_SPR_ZAM_OBG
::   WE: [_a] - ZK_P.ref() lub $ZK_P.ref
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;

_ar:=null();

{? var_pres('_a')=type_of(null())
|| _ar:=_a
|? var_pres('_a')=type_of('')
|| _ar:=exec('FindAndGet','#table',ZK_P,_a,,"ref()",null())
?};

_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));

:: w p01 może być podpięty argument z zawartością PK_Z.ref() lub $PK_Z.ref()
{? var_pres('p01',_in)=type_of(null())
|| _ar:=_in.p01
|? var_pres('p01',_in)=type_of('')
|| _ar:=exec('FindAndGet','#table',ZK_P,_in.p01,,"ref()",null())
?};

{? _ar<>null()
|| ZK_P.cntx_psh();
   ZK_N.cntx_psh();
   ZK_P.use('zkpozw__');
   ZK_N.use('zknagw__');
   {? ZK_P.seek(_ar)
   || ATR.MJS:='ZK_P';
      ZK_P.win_edit('DISPZ');
      ZK_P.display()
   || FUN.emsg('Nie odnaleziono pozycji zamówienia, brak możliwości wyświetlenia szczegółów')
   ?};
   ZK_P.cntx_pop();
   ZK_N.cntx_pop()

|| FUN.emsg('Nie podano poprawnie informacji o pozycji zamówienia, brak możliwości wyświetlenia szczegółów')
?};

_result


\rodzaj_prod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja weryfikuje rodzaj produkcji jaki jest potrzebny dla przekazanej pozycji zamówienia i porównuje z argumentem _b
::       wywoływana w porcesie  NUCO_SPR_ZAM_OBG
::   WE:  _a - ZK_P.ref(), _b - rodzaj do porównania 'M' - mokra, 'S' - sucha
::   WY:  1 - jeśli porównanie pozyytywne lub produkcja mieszana lub nieokreślona, 0 jeśli porównanie negatywne
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_zk_p:=_a;
_rp:=_b;

{? _zk_p<>null()
:: Mamy pozycje - określamy do której grupy technologów wysłać zadanie
|| _rp_m:=exec('FindAndGet','#table',ZK_P,_zk_p,,"M().GRP5().GRP5",'');
   {? _rp='M' & _rp_m='Mokra'
   || _result:=1
   |? _rp='S' & _rp_m='Sucha'
   || _result:=1
   || _result:=0
   ?}
:: Brak określenia rodzaju produkcji - wysyłamy zadanie do obu grup technologów
|| _result:=0
?};

_result


\czy_tech
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Sprawdza czy dla podanej pozycji ZK_P jest technologia
::   WE: _a - ZK_P.ref() lub $ZK_P.ref()
::   WY: 1-jest technologia 0-nie ma
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_m_ref:=exec('FindAndGet','#table', ZK_P, _a,,"M", null());
VAR.A_KTL:=null();

{? _m_ref<>null()
|| VAR.A_KTL:=exec('getdefaulttech','tech_common',_m_ref,0)
?};

{? VAR.A_KTL<>null
||

::----------------------------------------------------------------------------------------------------------------------
:: deklaracja klast TPAr
::----------------------------------------------------------------------------------------------------------------------
   exec('Tpar_decl','tech_param');
::----------------------------------------------------------------------------------------------------------------------
:: deklaracja klasy SURX
::----------------------------------------------------------------------------------------------------------------------
   exec('surx_decl','tech_mater');
::----------------------------------------------------------------------------------------------------------------------
:: inicjowanie obiektu klasy SURX i selekcja listy surowcow technologii
::----------------------------------------------------------------------------------------------------------------------
   VAR_DEL.delete('__SUR','__Fazy');
   __Fazy:=0;
   exec('env_create','tech_structure',1);
   _env:=__ENV_STR;
   {? var_pres('TAB',__ENV_STR.CHECK) > 0 || _env.CHECK.TAB.erase ?};
   __SUR:=obj_new(@.CLASS.SURX,VAR.A_KTL,'T',__Fazy,,VAR.A_KTL().XJM);
   {? _env.CHECK.TAB.size()=0
   || _result:=1
   ?}
?};
_result


\uzup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Uzupełnienie pól w pozycji zamówienia - potwierdzenia obiegu (nie ma konieczności weryfikacji
::       uzupełnienie literą N - niedotyczy
::   WE: _a - ZK_N.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=1;

_tab:=sql('select ZK_P.REFERENCE as REF, QGRP5.GRP5 as GRP5, M.KTM as KTM
           from @ZK_P join M join QGRP5
           where ZK_P.N=:_a
          ',_a);
{? _tab.first()
|| {!
   |? {? 3+_tab.KTM='02-' | 3+_tab.KTM='01-'
      || {? _tab.GRP5='Sucha'
         || exec('FindAndGet','#table',ZK_P,_tab.REF,,"QSTA_PM:='N';QSTD_PM:=date();QSTA_PS:='';QSTD_PS:=date(0,0,0);
                                                       QSTA_MD:='';QSTD_MD:=date(0,0,0);ZK_P.put()",1)
         |? _tab.GRP5='Mokra'
         || exec('FindAndGet','#table',ZK_P,_tab.REF,,"QSTA_PS:='N';QSTD_PS:=date();QSTA_PM:='';QSTD_PM:=date(0,0,0);
                                                       QSTA_MD:='';QSTD_MD:=date(0,0,0);ZK_P.put()",1)
         || exec('FindAndGet','#table',ZK_P,_tab.REF,,"QSTA_PM:=QSTA_PS:='';QSTD_PM:=QSTD_PS:=date(0,0,0);
                                                       QSTA_MD:='';QSTD_MD:=date(0,0,0);ZK_P.put()",1)
         ?}
      || exec('FindAndGet','#table',ZK_P,_tab.REF,,"QSTA_MA:=QSTA_PM:=QSTA_PS:='N';QSTD_MA:=QSTD_PM:=QSTD_PS:=date();ZK_P.put()",1)
      ?};
      _tab.next()
   !}
?};

_result


\czy_md
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Sprawdzenie czy wysyłać e-mail do MasterData o konieczności uzupełnienia kart technologicznych
::   WE: _a-ZK_N.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

_tab:=sql('select ZK_P.M from @ZK_P where ZK_P.N=:_a', _a);

{? _tab.first()
|| {!
   |? _m_ref:=exec('FindAndGet','#table',M,_tab.M,,"ref()",null());
      {? exec('is_tech','tech_common',_m_ref)=0
      || _result:=1
      ?};
      _tab.next & _result=0
   !}
?};

_result


\czy_ps
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Sprawdzenie czy wysyłać e-mail do produkcji suchej o konieczności uzupełnienia kart technologicznych
::   WE: _a-ZK_N.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

_tab:=sql('select ZK_P.M from @ZK_P join M join QGRP5
            where ZK_P.N=:_a and (M.KTM like \'01-%\' or M.KTM like\'02-%\') and QGRP5.GRP5<>\'Mokra\'', _a);

{? _tab.first()
|| _result:=1
?};

_result


\czy_pm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Sprawdzenie czy wysyłać e-mail do produkcji mokrej o konieczności uzupełnienia kart technologicznych
::   WE: _a-ZK_N.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

_tab:=sql('select ZK_P.M from @ZK_P join M join QGRP5
            where ZK_P.N=:_a and (M.KTM like \'01-%\' or M.KTM like\'02-%\') and QGRP5.GRP5<>\'Sucha\'', _a);

{? _tab.first()
|| _result:=1
?};

_result


\akc_tech
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [21.14]
:: OPIS: Akceptacja (technolodzy) pozycji zamowienie z poziomu obszaru - okienko pozycji zamówienia sprzedaży
::   WE: praca w kontekście pozycji zamówienia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('czy_rola','qprocesy','Administrator weryfikacji kart technologicznych poz. zamówień')
|| _wyb:=0;
   _czy_potw:=3+ZK_P.M().KTM='02-' | 3+ZK_P.M().KTM='01-';

   _rodzaj_prod:=ZK_P.M().GRP5().GRP5;
   {? _rodzaj_prod='Sucha'
   || _ps:='T';_pm:='N'
   |? _rodzaj_prod='Mokra'
   || _ps:='N';_pm:='T'
   || _ps:='T';_pm:='T'
   ?};

   _dalej:=1;
   {? ZK_P.N().S='T'
   || FUN.emsg('Zamówienie zostało już zaakceptowane, zmina stanu weryfikacji kart techn. nie jest mozliwa.');
      _dalej:=0
   |? ~_czy_potw
   || FUN.emsg('Pozycja zamówienia nie wymaga potwierdzenia weryfikacji kart technologicznych');
      _dalej:=0
   |? ZK_P.QSTA_PM=_pm & ZK_P.QSTA_PS=_ps
   || FUN.emsg('Weryfikacji kart technologicznych dla pozycji zamówienia została już potwierdzona przez Technologów')
   || _wyb:=FUN.choice('Czy potwierdzić weryfikację/utworzenie kart technologicznych dla pozycji zamówienia?',1,
                 'Tak potwierdzam',,,,'Rezygnacja ze zmiany','Potwierdzenie - Technolodzy' );
      {? _wyb=1
      || ZK_P.QSTA_PM:=_pm;ZK_P.QSTA_PS:=_ps;
         ZK_P.QSTD_PM:=ZK_P.QSTD_PS:=date()
      || _dalej:=0
      ?};
      ZK_P.put()
   ?};
::    Jeśl wszystko ok to automatycznie uruchamiam akceptacje MasterData
   {? _dalej
   || _wyb:=0;
      {? ZK_P.QSTA_PM<>_pm | ZK_P.QSTA_PS<>_ps
      || FUN.emsg('Karta nie została zweryfikowana przez Technologow, weryfikacja MasterData nie jest możliwa')
      |? ZK_P.QSTA_MD<>''
      || FUN.emsg('Weryfikacj kart tech. dla pozycji zamówienia została już potwierdzona lub potwierdzenie nie jest wymagane.')
      || _wyb:=FUN.choice('Czy potwierdzić weryfikację/utworzenie kart technologicznych dla pozycji zamówienia?',1,
                    'Tak potwierdzam',,,,'Rezygnacja ze zmiany','Potwierdzenie - MasterData' );
         {? _wyb=1
         || ZK_P.QSTA_MD:='T';
            ZK_P.QSTD_MD:=date()
         ?};
         ZK_P.put();
:: Po akceptacji przez MasterData sygnał do umieszczenia pozycji w pl. strat.
         _par:=obj_new(1);
         _par[1]:=obj_new('PARAMETR','VALUE');
         _par[1].PARAMETR:='ZK_P';
         _par[1].VALUE:=ZK_P.ref();
         exec('force_signal','#b__box','NUCO_ZK_P_DO_PLANU',,_par)
      ?}
   ?}
|| FUN.emsg('Nie posiadasz uprawnień do zmiany statusu weryfikacji pozycji zamówień.')
?};
1


\akc_md
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [21.14]
:: OPIS: Akceptacja (MasterData) pozycji zamowienie z poziomu obszaru - okienko pozycji zamówienia sprzedaży
::   WE: praca w kontekście pozycji zamówienia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('czy_rola','qprocesy','Administrator weryfikacji kart technologicznych poz. zamówień')
|| _wyb:=0;
   _czy_potw:=3+ZK_P.M().KTM='02-' | 3+ZK_P.M().KTM='01-';

   _rodzaj_prod:=ZK_P.M().GRP5().GRP5;
   {? _rodzaj_prod='Sucha'
   || _ps:='T';_pm:='N'
   |? _rodzaj_prod='Mokra'
   || _ps:='N';_pm:='T'
   || _ps:='T';_pm:='T'
   ?};

   {? ZK_P.N().S='T'
   || FUN.emsg('Zamówienie zostało już zaakceptowane, zmina stanu weryfikacji kart techn. nie jest mozliwa.')
   |? ~_czy_potw
   || FUN.emsg('Pozycja zamówienia nie wymaga potwierdzenia weryfikacji kart technologicznych')
   |? ZK_P.QSTA_PM<>_pm | ZK_P.QSTA_PS<>_ps
   || FUN.emsg('Karta nie została zweryfikowana przez Technologow, weryfikacja MasterData nie jest możliwa')
   |? ZK_P.QSTA_MD<>''
   || FUN.emsg('Weryfikacj kart tech. dla pozycji zamówienia została już potwierdzona lub potwierdzenie nie jest wymagane.')
   || _wyb:=FUN.choice('Czy potwierdzić weryfikację/utworzenie kart technologicznych dla pozycji zamówienia?',1,
                 'Tak potwierdzam',,,,'Rezygnacja ze zmiany','Potwierdzenie - MasterData' );
      {? _wyb=1
      || ZK_P.QSTA_MD:='T';
         ZK_P.QSTD_MD:=date()
      ?};
      ZK_P.put();
:: Po akceptacji przez MasterData sygnał do umieszczenia pozycji w pl. strat.
      _par:=obj_new(1);
      _par[1]:=obj_new('PARAMETR','VALUE');
      _par[1].PARAMETR:='ZK_P';
      _par[1].VALUE:=ZK_P.ref();
      exec('force_signal','#b__box','NUCO_ZK_P_DO_PLANU',,_par)
   ?}
|| FUN.emsg('Nie posiadasz uprawnień do zmiany statusu weryfikacji pozycji zamówień.')
?};
1


\czy_edokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Formuła sprawdza na podstawie parametru czy dokument EDOKUM istnieje i czy obieg nie został zamknięty
::   WE: _a - EDOKUM.uidref()
::   WY: 1 - istnieje i nie jest zamknięty, 0 - nie istnieje bądź obieg został zamknięty.
::----------------------------------------------------------------------------------------------------------------------
_edokum:=_a;
_result:=exec('FindAndGet','#table',EDOKUM,_edokum,,"ZAM<>'T'",0);
_result


\akc_zk_n_force
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO]
:: OPIS: Funkcja uruchamiana w okienku listy zamówień sprzedaży pozwala na akceptacje zamówienia mimo niezakończonego
::       obiegu wniosku. Funkcja może być wykonana tylko dla zamówień o statusie zakończona redakcja i stanie zamówienia
::       pozwalającym na jego przynajmniej częściową realizacje. Funkcja nie usówa wniosku z obiegu, ale jeśli są
::       uruchomione zadania weryfikacji przez masterdata i/lub technologów to stara się je posprzątać poprzez uruchomienie
::       sygnału do zakończenia procesu NUCO_SPR_ZAM_OBG (co najmniej wersja f)
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------

{? ~exec('czy_rola','qprocesy','Akceptujący zamówienia sprzedaży poza obiegiem wniosku')
|| FUN.emsg('Nie posiadasz uprawnień do akceptacji zamówienia poza obiegiem.')
|? ZK_N.STAT_REJ='N'
|| FUN.error('Rejestracja zamówienia nie jest zakończona, akceptacja nie jest możliwa')
|? ZK_N.STAT_REJ='A'
|| FUN.error('Zamówienie zostało anulowane, akceptacja nie jest możliwa')
|? ZK_N.STAT_REJ='T' | ZK_N.AKC='T'
|| FUN.error('Zamówienie jest już zaakceptowanie, ponowna akceptacja nie jest możliwa')
|? ZK_N.STAN*'REA'=0
|| FUN.error('Brak możliwości realizacji pozycji zamówienia.\nAkceptacja poza obiegiem nie jest możliwa')
|? ZK_N.OBI_POW='' & ZK_N.STAT_REJ='Z' & ZK_N.AKC<>'T'
:: Standardowa akcja akceptacji
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LSP_ZKN_ERZA';
   _params.UIDREF:=ZK_N.uidref();
   _params.AKCJA:='Akceptuj';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZK_N',ZK_N.ref());
   exec('mp_run','#b__box',_params)

|? ZK_N.STAT_REJ='Z' & ZK_N.OBI_POW<>''
:: Akceptacja poza obiegiem wniosku
|| FUN.info('AKCEPTACJA POZA OBIEGIEM\n'+
            'Uwaga zamówienie które chcesz zaakceptować ma uruchomiony obieg wniosku,\n'+
            'po akceptacji wniosek NADAL będzie w obiegu. Jeśli chcesz zrezygnować z dalszego\n'+
            'obiegu wniosku, wykonaj ręczne zakończenie obiegu w obszarze Obiegi wniosków.\n\n'+
            'UWAGA - pozycje zamówienia nie zostaną umieszczone w planie strategicznym !');
   {? FUN.ask('Czy zaakceptować zamówienie mimo niezakończonego obiegu wniosku?')
:: Akceptacja zamówienia
   || _obi_pow:=ZK_N.OBI_POW;
      ZK_N.OBI_POW:='';
      ZK_N.put();
      _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='LSP_ZKN_ERZA';
      _params.UIDREF:=ZK_N.uidref();
      _params.AKCJA:='Akceptuj';
      _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZK_N',ZK_N.ref());
      exec('mp_run','#b__box',_params);
      ZK_N.get();
      {? ZK_N.AKC<>'T'
      || ZK_N.OBI_POW:=_obi_pow;
         ZK_N.put()
      ||
:: Zamówienie zaakceptowane - uruchomienie sygnału do zakończenia realizacji procesu obsługi zamówienia sprzedaży
:: jeśli został uruchomiony wcześniej - NUCO_SPR_ZAM_OBG - co najmniej wersja f
         _par:=obj_new(1);
         _par[1]:=obj_new('PARAMETR','VALUE');
         _par[1].PARAMETR:='ZK_N';
         _par[1].VALUE:=ZK_N.ref();
         exec('force_signal','#b__box','NUCO_ZKN_AKC_SPR_OB','N',_par)
      ?}
   ?}
|| FUN.error('Błąd w określeniu stanu rejestracji zamówienia, akceptacja nie jest możliwa')
?};
~~


\stan_zatwierdzen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO]
:: OPIS: Funkcja wyświetla stan akceptacji master data/technolodzy dla pozycji zamówień
::   WE: _a - ZK_N.ref lub $ZK_N.ref, [_b] - ZK_P.ref - dla konkretnego zk_p
::   WY:
::----------------------------------------------------------------------------------------------------------------------

zk_n:='';
{? var_pres('_a')=type_of(null())
|| _zk_n:=$_a
|? var_pres('_a')=type_of('')
|| _zk_n:=_a
|| FUN.emsg('Błąd wywołania funkcji - błędny parametr _a');
   return(0)
?};

_war_zk_p:='';
_zk_p:='';
{? _>1
|| _war_zk_p:=' and ZK_P.REFERENCE=\':_b\'';
   {? var_pres('_b')=type_of(null())
   || _zk_p:=$_b
   |? var_pres('_b')=type_of('')
   || _zk_p:=_b
   || FUN.emsg('Błąd wywołania funkcji - błędny parametr _b');
      return(0)
   ?}
?};

_tab:=sql('select ZK_P.POZ,
                  M.KTM,
                  M.N,
                  ZK_P.ILZ,
                  JM.KOD,
                  ZK_P.QSTA_PS,
                  ZK_P.QSTD_PS,
                  ZK_P.QSTA_PM,
                  ZK_P.QSTD_PM,
                  ZK_P.QSTA_MD,
                  ZK_P.QSTD_MD
             from ZK_P join M
                       join JM using(ZK_P.JM, JM.REFERENCE)
            where ZK_P.N=\':_a\''+_war_zk_p+
            'order by 1', _zk_n, _zk_p);
_sWin:=_tab.mk_sel('','P',,'#_tab_swin',,,,,'U','T');
::_tab.win_sel(_sWin);
_tab.win_fld(_sWin, ,'POZ'     ,          ,          ,  4,  , ,'Poz.',,'POZ',,1);
_tab.win_fld(_sWin, ,'KTM'     ,          ,          , 50,  , ,'KTM',,'KTM',,1);
_tab.win_fld(_sWin, ,'N'       ,          ,          ,100,  , ,'Nazwa',,'N',,1);
_tab.win_fld(_sWin, ,'ILZ'     ,          ,          , 10, 2, ,'Ilość zam.',,'ILZ',,1);
_tab.win_fld(_sWin, ,'KOD'     ,          ,          , 10,  , ,'jm.',,'Jednostka miary',,1);
_tab.win_fld(_sWin, ,'QSTA_PS' ,          ,          ,  ,  , ,'T-PS',,'Status akceptacji technolodzy - PS',2,1,"'T'","''","'N'");
_tab.win_fld(_sWin, ,'QSTD_PS' ,          ,          , 10,  , ,'D.T-PS',,'Data akceptacj technolodzy - PS',,1);
_tab.win_fld(_sWin, ,'QSTA_PM' ,          ,          ,  ,  , ,'T-PM',,'Status akceptacji technolodzy - PM',2,1,"'T'","''","'N'");
_tab.win_fld(_sWin, ,'QSTD_PM' ,          ,          , 10,  , ,'D.T-PM',,'Data akceptacji technolodzy - PM',,1);
_tab.win_fld(_sWin, ,'QSTA_MD' ,          ,          ,  ,  , ,'MD',,'Status akceptacji MasterData',2,1,"'T'","''","'A'");
_tab.win_fld(_sWin, ,'QSTD_MD' ,          ,          , 10,  , ,'D.MD',,'Data akceptacji MasterData',,1);
_tab.win_act(_sWin, ,'Kolejność' );
_tab.win_act(_sWin, ,'Szukaj');
_fb:="{? cur_tab(1,1).QSTA_PS='N' & cur_tab(1,1).QSTA_PM='N' & cur_tab(1,1).QSTA_MD='N'
      || {? var_pres('Color')>0 || Color.fnd_kol('ST_SRC#03') || '' ?}
      |? (cur_tab(1,1).QSTA_PS='N'|cur_tab(1,1).QSTA_PS='T') & (cur_tab(1,1).QSTA_PM='N'|cur_tab(1,1).QSTA_PM='T') & (cur_tab(1,1).QSTA_MD='N'|cur_tab(1,1).QSTA_MD='T'|cur_tab(1,1).QSTA_MD='A')
      || {? var_pres('Color')>0 || Color.fnd_kol('ST_SRC#01') || '' ?}
      || {? var_pres('Color')>0 || Color.fnd_kol('ST_SRC#02') || '' ?}
      ?}";
_tab.win_act(_sWin,,'Rekord',,,,_fb);

_sEdt:=_tab.mk_edit('',,'#_tab_swin');
::_tab.win_edit(_sEdt);
_tab.win_efld(_sEdt, ,'POZ'     ,          ,          ,  4,  , ,'POZ',,'POZ',,);
_tab.win_efld(_sEdt, ,'KTM'     ,          ,          , 50,  , ,'KTM',,'KTM',,);
_tab.win_efld(_sEdt, ,'N'       ,          ,          ,100,  , ,'N',,'N',,);
_tab.win_efld(_sEdt, ,'ILZ'     ,          ,          , 10, 2, ,'ILZ',,'ILZ',,);
_tab.win_efld(_sEdt, ,'KOD'     ,          ,          , 10,  , ,'KOD',,'KOD',,);
_tab.win_efld(_sEdt, ,'QSTA_PS' ,          ,          ,  1,  , ,'QSTA_PS',,'QSTA_PS',,);
_tab.win_efld(_sEdt, ,'QSTD_PS' ,          ,          , 10,  , ,'QSTD_PS',,'QSTD_PS',,);
_tab.win_efld(_sEdt, ,'QSTA_PM' ,          ,          ,  1,  , ,'QSTA_PM',,'QSTA_PM',,);
_tab.win_efld(_sEdt, ,'QSTD_PM' ,          ,          , 10,  , ,'QSTD_PM',,'QSTD_PM',,);
_tab.win_efld(_sEdt, ,'QSTA_MD' ,          ,          ,  1,  , ,'QSTA_MD',,'QSTA_MD',,);
_tab.win_efld(_sEdt, ,'QSTD_MD' ,          ,          , 10,  , ,'QSTD_MD',,'QSTD_MD',,);

_tab.win_sel(_sWin);
_tab.win_edit(_sEdt);
_tab.select;
~~


\select_plan_zkn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Funkcja, która pokazuje jak zaplanowane są poszczególne pozycje zamówienia/zamówień
::----------------------------------------------------------------------------------------------------------------------

_env:=params_get().env;
params_set(params_get());

exec('select_plan_zkn_init','qlsp');
_tab:=_env.PX.TAB;

_zk_n:=ZK_N.ref();
PX_VAR.ZNACZNIK:=exec('txt_plan_nul','px_param');

_mainversion:=exec('get_mainversion','px_ver');

{? ZK_P.sel_size()=0 || _tab.erase() ?};

ZK_N.cntx_psh(); ZK_P.cntx_psh();
SM.cntx_psh();
_can_add:=0;
{? ZK_P.M().RODZ='T' & 'PW'*ZK_P.M().R>0
|| _can_add:=1
?};

{? _can_add>0
||
   _tab.blank();
   _tab.SYM:=ZK_N.SYM;
   _tab.DP:=ZK_N.DP;
   _tab.R:=ZK_N.R;
   _tab.M:=ZK_N.M;
   _tab.POZ:=ZK_P.POZ;
   _tab.ZKP_REF:=$ZK_P.ref();
   _tab.ZKN_REF:=$ZK_N.ref();
   _tab.KTM:=ZK_P.M().KTM;
   _tab.M_REF:=$M.ref();
   _tab.KTM_NAZ:=M.N;
   _tab.DT:=ZK_P.DT;
   _tab.ILZ:=ZK_P.ILP-ZK_P.ILRB;
   _tab.IL:=ZK_P.ILZ;
   _tab.DIR:=ZK_P.PL_DIR;
   _tab.KOLOR:=ZK_N.KOLOR;
   _tab.KH_KOD:=ZK_N.KH().KOD;
   _tab.KH_SKR:=ZK_N.KH().SKR;
   _tab.QSTA_PS:=ZK_P.QSTA_PS;
   _tab.QSTA_PM:=ZK_P.QSTA_PM;
   _tab.QSTA_MD:=ZK_P.QSTA_MD;
   _tab.STAT_REJ:=ZK_N.STAT_REJ;
   _tab.ZKPUID:=ZK_P.uidref;
:: nie wiem czego, ale nie zawsze mozna bylo odczytac uidref dla zk_n, dlatego tworze go od nowa
   _tab.ZKNUID:=':'+ZK_N.IDADD+$ZK_P.N;
   _tab.ILZPX:=exec('zkp_planned','px_obj',ZK_P.ref(),_mainversion);
   _tab.ILZPO:=exec('zam_planned','po_plan',$ZK_P.ref());
   {? _tab.ILZPX
   || _res:=exec('ps_dane','qlsp',ZK_P.ref(),_mainversion);
      _tab.DIR:=_res[1];
      _tab.TPS:=_res[2];
      _tab.OBJREF:=_res[3];
      _tab.PX_GRP:=_res[4]
   ?};

   {? ZK_P.RODZ='Z'
   ||
::          Zamówienie sprzedaży
      exec('zwr_stan','magazyn_stan',ZK_P.M,4,null(),0);
      _tab.SM:=BEER.SD
   |? ZK_P.RODZ='W'
   ||
::          Zamówienie wewnętrzne
      exec('zwr_stan','magazyn_stan',ZK_P.M,10,null(),0);
      _tab.SM:=BEER.SD
   ?};
   ZLZAM.index('ZMZL');
   ZLZAM.prefix($ZK_P.ref());
   {? ZLZAM.first()
   || _tab.TPO:=ZLZAM.ZL().ENDD;
      exec('procent','zl_head');
      _tab.WYK:=VAR.REAL1;
:: werfikacja czy jakies ze zlecen ma zapisy robocizny (uznaje, ze produkcja jest w toku)
      _zlref:=sql('select REFERENCE as REF from ZL where ST_N=\'T\' and ZL.KTL is not null and ZL.NODE=\':_a\'',ZL.NODE);
      {? _zlref.first()
      || {!
         |? _wyn:=sql('select ZLGD.REFERENCE as REF from @ZLGD where ZLGD.ZL=\':_a\'',_zlref.REF).first;
            ~_wyn & _zlref.next
         !}
      || _wyn:=0
      ?};
      _tab.PWT:={? _wyn || 'T' || 'N' ?};
      _tab.DSTART:=sql('select min(ZL.STARTD) as DSTART from ZL where ZL.NODE=\':_a\' and ZL.RODZAJ=\'P\'', ZL.NODE).DSTART;
      &_zlref;
:: napelenie innych pol
      {!
      |? _tab.ILZL+=ZLZAM.ZL().IL;
         _tab.ILDOK+=ZLZAM.ZL().ILDOK;
         _px:=exec('zl_planned','px_obj',ZLZAM.ZL,_mainversion);
         _po:=exec('zlec_planned','po_plan',$ZLZAM.ZL);
         {? _po>0
         || _tab.ILZLPL:=1;
            _tab.ILZPO:=_po
         |? _px>0
         || _tab.ILZLPL:=1;
            _tab.ILZPX:=_px
         ?};
         ZLZAM.next()
      !}
   ?};
   _tab.T:={? #_tab.TPO || exec('WeekNumber','daty',_tab.TPO) |? #_tab.TPS || exec('WeekNumber','daty',_tab.TPS) || 0 ?};
   _tab.OP:={? #_tab.TPO
            || {? _tab.DT<_tab.TPO
               || 'T~'+$(_tab.TPO-_tab.DT)
               || 'N'
               ?}
            |? #_tab.TPS
            || {? _tab.DT<_tab.TPS
               || 'T~'+$(_tab.TPS-_tab.DT)
               || 'N'
               ?}
            || 'N'
            ?};
   _tab.BPS:={? (_tab.STAT_REJ<>'N' | _tab.STAT_REJ<>'A') & _tab.ILZPX=0 & _tab.ILZL=0 || 'T' || 'N' ?};
:: na rekord uzupelnian znacznik czy pozycja przeliczona
   {? _tab.ILZPX=0 | _tab.ILZL>0
   || _tab.PSP:=''
   || _px_obj:=exec('get_zkp_object','px_obj',ZK_P.ref);
      _wyn:=sql('select * from PX_POZ where PX_POZ.PX_OBJ=:_a',_px_obj).first();
      {? _wyn || _tab.PSP:='T' || _tab.PSP:='N' ?}
   ?};

   {? _tab.ILZ>0
   || _tab.add()
   ?}
?};
ZK_N.cntx_pop(); ZK_P.cntx_pop();
SM.cntx_pop();

{? ZK_P.sel_size()=0
|| _tab.hdr_sel();
   _tab.hdr_sel('Pozycje zamówienia'@);
   {? _tab.size()>0
   || _tab.select()
   || FUN.info(exec('msg_zkn_empty','px_plan',1))
   ?}
?};
~~


\select_plan_zkn_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Funkcja, która pokazuje jak zaplanowane są poszczególne pozycje zamówienia/zamówień (przed grupą rekordów)
::----------------------------------------------------------------------------------------------------------------------

params_set(params_get());

:: Usunięcie informacji o strukturze PX - zbudowanie nowej dla celów analizy planu produkcji
{? var_pres('PX', params_get().env)>=100
|| obj_del(params_get().env.PX)
?};

exec('select_plan_zkn_init','qlsp');
params_get().env.PX.TAB.erase();
1


\select_plan_zkn_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Funkcja, która pokazuje jak zaplanowane są poszczególne pozycje zamówienia/zamówień (po grupie rekordów)
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
params_set(params_get());
_tab:=_env.PX.TAB;
_tab.hdr_sel();
_tab.hdr_sel('Pozycje zamówień'@);
{? _tab.size()>0
|| _tab.select()
||
   FUN.info(exec('msg_zkn_empty','px_plan',2))
?};

:: Usunięcie informacji o strukturze PX - tak aby wersja standardowa mogła działać standardowo ;)
obj_del(_env.PX);

~~


\select_plan_zkn_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
::  OPIS: Inicjuje środowisko
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

{? var_pres('PX',_env)<100
|| _env.PX:=obj_new('TAB','WER','TAB_WDR','WER_WDR','INFZAM');
   _env.PX.TAB_WDR:=tab_tmp(1
      ,'MAG','STRING[8]',''
      ,'OP','STRING[255]',''
      ,'IL','REAL',''
   );
   _env.PX.WER_WDR:=_env.PX.TAB_WDR.mk_sel('Ilość w drodze'@,'T',,'#zam_planaccx3',,,,,'U');
   _env.PX.TAB_WDR.win_fld(_env.PX.WER_WDR,,'MAG',,,8,,1,'Magazyn'@);
   _env.PX.TAB_WDR.win_fld(_env.PX.WER_WDR,,'OP',,,40,,1,'Informacje'@);
   _env.PX.TAB_WDR.win_fld(_env.PX.WER_WDR,,'IL',,,18,3,1,'Ilość w drodze'@);
   _env.PX.TAB_WDR.win_sel(_env.PX.WER_WDR);

   _tab:=_env.PX.TAB:=tab_tmp(2
      ,'DP','DATE','Data przyjęcia'@
      ,'R','INTEGER','Rok'@
      ,'M','INTEGER','Miesiąc'@
      ,'SYM','STRING[20]','Zamówienie'@
      ,'POZ','INTEGER','Pozycja'@
      ,'ZKP_REF','STRING[16]','$ZK_P.ref()'
      ,'ZKN_REF','STRING[16]','$ZK_N.ref()'
      ,'M_REF','STRING[16]','$M.ref()'
      ,'KTM','STRING[50]','Indeks'@
      ,'KTM_NAZ','STRING[200]','Nazwa indeksu'@
      ,'DT','DATE','Termin klienta'@
      ,'TPS','DATE','Plan start'@
      ,'TPO','DATE','Zlec. koniec'@
      ,'DSTART','DATE','Zlec. start'@
      ,'D','REAL','W drodze'@
      ,'T','INTEGER','Tydzień realizacji'@
      ,'IL','REAL','Ilość zamówiona'@
      ,'ILZ','REAL','Ilość pozostała'@
      ,'SM','REAL','W magazynach'@
      ,'DIR','INTEGER','Zwrot'@
      ,'KOLOR','STRING[11]','Kolor'@
      ,'KH_KOD','STRING[20]','Kod kontrahenta'@
      ,'KH_SKR','STRING[20]','Skrót kontrahenta'@
      ,'QSTA_PS','STRING[1]','Prod. Sucha'@
      ,'QSTA_PM','STRING[1]','Prod. Mokra'@
      ,'QSTA_MD','STRING[1]','Prod. MasterData'@
      ,'STAT_REJ','STRING[1]','Status zamówienia'@
      ,'ZKPUID','STRING[48]','ZK_P.uidref()'@
      ,'ZKNUID','STRING[48]','ZK_N.uidref()'@
      ,'ILZPX','REAL','W kolejce PS.'@
      ,'ILZPO','REAL','W planie oper.'@
      ,'OBJREF','INTEGER','Obiekt planowany w PS'@
      ,'PX_GRP','STRING[16]','Obiekt grupujący w PS'@
      ,'ILZL','REAL','Zlecone'@
      ,'ILZLPL','INTEGER','Zlec i Plan'@
      ,'ILDOK','REAL','Ilość RP'@
      ,'OP','STRING[18]','Opóźnione~dni'@
      ,'BPS','STRING[1]','Brak w planie str.'@
      ,'PWT','STRING[1]','Produkcja w toku'@
      ,'WYK','REAL','\% Wyk. RP'@
      ,'PSP','STRING[1]','Przeliczona'@
   );

   _formula:="{? fld()=0 || 'empty=1' || 'empty=0' ?}";
   _tab.fld_fml('ILZPX','DISPLAY_FORMAT',_formula);
   _tab.fld_fml('ILZPO','DISPLAY_FORMAT',_formula);
   _tab.fld_fml('ILZL','DISPLAY_FORMAT',_formula);
   _tab.fld_fml('ILZLPL','DISPLAY_FORMAT',_formula);
   _tab.fld_fml('SM','DISPLAY_FORMAT',_formula);
   _tab.fld_fml('ILDOK','DISPLAY_FORMAT',_formula);

   _wer:=_env.PX.WER:=_tab.mk_sel(,,,'#plan_zkn',,,,,'U',,,,,'html_maximized');
   _tab.win_fld(_wer,,'DP',,,-10);
   _tab.win_fld(_wer,,'R',,,-5);
   _tab.win_fld(_wer,,'M',,,-7);
   _tab.win_fld(_wer,,'KH_SKR',,,-8);
   _tab.win_fld(_wer,,'SYM',,,-13);
   _tab.win_fld(_wer,,'POZ',,,-5);
   _tab.win_fld(_wer,,'KTM',,,-15);
   _tab.win_fld(_wer,PX_VAR,'ZNACZNIK',,,-5,,,'Zwrot'@);
   _tab.win_fld(_wer,,'DT',,,-10);
   _tab.win_fld(_wer,,'TPS',,,-10);
   _tab.win_fld(_wer,,'TPO',,,-10);
   _tab.win_fld(_wer,,'DSTART',,,-10);
   _tab.win_fld(_wer,,'T',,,-5,,,'Tyd. real.');
   _tab.win_fld(_wer,,'IL',,,-13,2);
   _tab.win_fld(_wer,,'ILZ',,,-13,2);
   _tab.win_fld(_wer,,'ILZPX',,,-13,2);
   _tab.win_fld(_wer,,'ILZPO',,,-13,2);
   _tab.win_fld(_wer,,'ILZL',,,-13,2);
   _tab.win_fld(_wer,,'ILZLPL',,,-5,,,,,,2,,"1","0");
   _tab.win_fld(_wer,,'ILDOK',,,-13,2);
   _tab.win_fld(_wer,,'WYK',,,8,2,,'\% Wyk RP');
   _tab.win_fld(_wer,,'SM',,,-13,2);

:: Plan strategiczny
   _tab.win_act(_wer,,'Menu','&Plan strategiczny'@,,,,,,,,,'P');
   _btn:=_tab.win_btn(_wer,'text=%1,panel=right,align=begin'['&Plan strategiczny'@],'Menu');
   _formula:="
      _tab:=tab_tmp(1,'REF','INTEGER','#ZK_P.ref()');
      _tab.REF:=BIT.sqlint(cur_tab(1,1).ZKP_REF);
      _tab.add();
      exec('select_any_core','px_plan',,ZK_P,_tab);
      ~~
   ";
   _formula_bg:="
      _tab:=tab_tmp(1,'REF','INTEGER','#ZK_P.ref()');
      _sel:=cur_tab(1,1).sel_aget();
      {? _sel.first()
      || {!
         |? _zkp:=exec('FindAndGet','#table',cur_tab(1,1),_sel.REF,,\"ZKP_REF\",'');
            _tab.REF:=BIT.sqlint(_zkp);
            _tab.add();
            _sel.next()
         !};
         exec('select_any_core','px_plan',,ZK_P,_tab)
      ?};
      cur_tab(1,1).sel_adel();
      0
   ";
   _tab.win_act(_wer,,'Formuła','&Podgląd planu'@@,'#P',,_formula,,,1,_formula_bg,,'P');
   _tab.btn_menu(_wer,_btn,'menu:PP');
   task_attach('TPP_PPS_PPLA');
   task_attach('TPP_PPS_DPLA');
   _formula:="{? exec('zk_p2ps','qlsp',cur_tab(1,1).ZKP_REF)
              || cur_tab(1,1).ILZPX:=cur_tab(1,1).ILZ;
                 cur_tab(1,1).put()
              ?}";
   _tab.win_act(_wer,,'Formuła','&Umieść w planie'@@,'#P',,_formula,,,0,,,'U');
   _tab.btn_menu(_wer,_btn,'menu:PU');
   task_attach('TPP_PPS_DPLA');
   _formula:=" _zk_p:=exec('FindAndGet','#table',ZK_P,cur_tab(1,1).ZKP_REF,,,null());
              {? exec('usun_zk_p','qtpp',_zk_p)
              || cur_tab(1,1).ILZPX:=0;
                 cur_tab(1,1).put()
              ?}";
   _tab.win_act(_wer,,'Formuła','U&suń z planu'@@,'#P',,_formula,,,0,,,'S');
   _tab.btn_menu(_wer,_btn,'menu:PS');
   task_attach('TPP_PPS_DPLA');
   _formula:="{? cur_tab(1,1).PX_GRP='' & cur_tab(1,1).ILZPX>0
              || _res:=exec('ps_dane','qlsp',cur_tab(1,1).ZKP_REF);
                 cur_tab(1,1).OBJREF:=_res[3];
                 cur_tab(1,1).PX_GRP:=_res[4];
                 cur_tab(1,1).put()
              ?};
              {? cur_tab(1,1).PX_GRP='' & cur_tab(1,1).ILZPX>0
              || FUN.info('Pozcyja zamówienia nie została jeszcze umieszczona w kolejce.\nGenerowanie zleceń będzie możliwe maksymalnie za 3 minuty.')
              || exec('zlecenie_px_grp','qprodukcja');
                 _ilzl:=0;
                 ZLZAM.cntx_psh();
                 ZLZAM.index('ZMZL');
                 ZLZAM.prefix(cur_tab(1,1).ZKP_REF);
                 {? ZLZAM.first()
                 || {!
                    |? _ilzl+=ZLZAM.ILZL;
                       ZLZAM.next()
                    !}
                 ?};
                 ZLZAM.cntx_pop();
                 cur_tab(1,1).ILZL:=_ilzl;
                 {? cur_tab(1,1).ILZL>0
                 || cur_tab(1,1).OBJREF:=0
                 ?};
                 cur_tab(1,1).put()
              ?}";
   _tab.win_act(_wer,,'Formuła','&Generuj zlecenia'@@,'#P',,_formula,,,0,,,'G');
   _tab.btn_menu(_wer,_btn,'menu:PG');
   task_attach('TPP_PPS_DPLA');

::   _formula:="_grp:=null();
::              {? cur_tab(1,1).PX_GRP<>''
::              || _grp:=exec('FindAndGet','#table',PX_GRP,cur_tab(1,1).PX_GRP,,,null())
::              ?};
::              {? _grp=null()
::              || FUN.info('Pozcyja zamówienia nie jest umieszczona w kolejce.\nPrzeliczenie nie będzie możliwe.')
::              || _args:=exec('fast_replan_a','px_logix');
::                 _args.PX_GRP:=_grp;
::                 _can_continue:=exec('grp_fast_replan','px_logix',_args);
::                 {? _can_continue
::                 || cur_tab(1,1).PSP:='T';
::                    cur_tab(1,1).put()
::                 ?}
::              ?}";
::   _tab.win_act(_wer,,'Formuła','P&rzelicz plan'@@,'#P',,_formula,,,1,,,'R');
::   _tab.btn_menu(_wer,_btn,'menu:PR');
::   task_attach('TPP_PPS_DPLA');


:: Zlecenia
   _formula:="
      ZK_P.cntx_psh();
      ZK_P.prefix();
      {? ZK_P.seek(cur_tab(1,1).ZKP_REF)
      || exec('zk_p_zl','qlsp',ZK_P.ref)
      || FUN.emsg('Nie znaleziono pozycji zamówienia.'@)
      ?};
      ZK_P.cntx_pop()
   ";
   _tab.win_act(_wer,,'Formuła','&Zlecenia'@@,,,_formula,,,,,,'Z');
   _tab.win_btn(_wer,'text=%1,panel=right,align=begin'['&Zlecenia'@],'menu:Z');
   task_attach('TTE_PZL_PZLE');
   task_attach('TTE_PZL_DZWE');
   _formula:="
      {? cur_tab(1,1).OBJREF
      || \"surowce wg planu strategicznego\";
         PX_VAR.VIE_VER:=exec('get_mainversion','px_ver');
         exec('select','px_sur',cur_tab(1,1).OBJREF,0)
      || \"jesli jest zlecenie to szukam surowce wg analizy zlecenia\";
         ZLZAM.cntx_psh;
         ZLZAM.index('ZMZL');
         ZLZAM.prefix(cur_tab(1,1).ZKP_REF);
         {? ZLZAM.first()
         || ZL.cntx_psh;
            _zlnode:=ZLZAM.ZL().NODE;
            _ndx:=ZL.ndx_tmp(,1,'NODE',,);
            ZL.index(_ndx);
            ZL.prefix(_zlnode);
            {? ZL.first()
            || params_exec('zl_analizas_b','qlsp')
            ?};
            ZL.cntx_pop
         ?};
         ZLZAM.cntx_pop
      ?};
      ~~
   ";
   _tab.win_act(_wer,,'Formuła','S&urowce'@@,,,_formula,,,,,,'U');
   _tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Surowce'@],'menu:U');
   task_attach('TPP_PPS_PPLA');
   task_attach('TPP_PPS_DPLA');
   _formula:="params_exec('disp_all_zam','lsp',cur_tab(1,1).ZKNUID)";
   _tab.win_act(_wer,,'Formuła','Po&wiązane zamówienie'@@,,,_formula,,,,,,'W');
   _tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Po&wiązane zamówienie'@],'menu:W');
   _formula:="
      ZK_N.cntx_psh();
      ZK_P.cntx_psh();
      ZK_N.prefix();
      {? ZK_N.seek(cur_tab(1,1).ZKN_REF)
      || exec('pow_zk_n','powdok')
      || FUN.info('Nie znaleziono zamówienia.'@)
      ?};
      ZK_N.cntx_pop();
      ZK_P.cntx_pop()
   ";
   _tab.win_act(_wer,,'Formuła','Powiązane &dokumenty'@@,,,_formula,,,,,,'D');
   _tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Powiązane &dokumenty'@],'menu:D');
   _formula:="
      BEER.MENU_PTH+='RR';
      BEER.SZ:='S';
      BEER.ZK_N:=exec('FindAndGet','#table',ZK_N,cur_tab(1,1).ZKN_REF,,\"ref\",null);
      BEER.WG:=ZK_N.WG;
      exec('init_zaz','zamsiw_rea','ZK_RN');
      MG.f_clear();
      ZK_RN.index('ZAM');
      ZK_RN.prefix(BEER.ZK_N);
      {? ZK_RN.first()
      || _rodzaj:=ZK_N.T().R;
         {? _rodzaj='Z' & ZK_RN.last()
         || {!
            |? {? ZK_RN.FAKS<>''
               || ZK_RN.SFK:=exec('FindAndGet','#table',FAKS,ZK_RN.FAKS,,\"SYM\",ZK_RN.SFK);
                  ZK_RN.DFK:=exec('FindAndGet','#table',FAKS,ZK_RN.FAKS,,\"DW\",date(0,0,0));
                  ZK_RN.put(1)
               ?};
               ZK_RN.prev()
            !}
         ?};
         _wer:='WER'+{? _rodzaj='Z' || '' || 'W' ?};
         ZK_RN.win_sel(_wer);
         ZK_RN.win_fml(_wer,,'SWZ',,'ICON_BEFORE',exec('zkrn_nd_sym_ib','zamsiw_rea'));
         {? _rodzaj='Z'
         || ZK_RN.win_fml(_wer,,'SFK',,'ICON_BEFORE',exec('zkrn_faks_sym_ib','zamsiw_rea'))
         ?};
         ZK_RN.select()
      || FUN.info('Zamówienie nie było realizowane.'@)
      ?};
      exec('done_zaz','zamsiw_rea');
      BEER.MENU_PTH-=2;
      ''
   ";
   _tab.win_act(_wer,,'Formuła','Po&wiązane &realizacje'@@,,,_formula,,,,,,'R');
   _tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Po&wiązane &realizacje'@],'menu:R');
   _tab.win_act(_wer,,'Menu','Z&adania'@,,,,,,,,,'A');
::   _btn:=_tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Z&adania'@],'Menu');
   _formula:="params_exec('todo_select','#b__box',cur_tab(1,1).ZKNUID)";
   _tab.win_act(_wer,,'Formuła','&Nagłówka zamówienia'@@,'#A',,_formula,,,,,,'N');
   _formula:="params_exec('todo_select','#b__box',cur_tab(1,1).ZKPUID)";
   _tab.win_act(_wer,,'Formuła','&Pozycji zamówienia'@@,'#A',,_formula,,,,,,'P');
   _formula:="params_exec('stan_zatwierdzen','qlsp',cur_tab(1,1).ZKN_REF,cur_tab(1,1).ZKP_REF)";
   _tab.win_act(_wer,,'Formuła','&Statusy obiegu'@@,'#A',,_formula,,,,,,'S');
   _formula:="params_exec('sm_dost','magazyn_stan'
                  ,exec('FindAndGet','#table',ZK_P,cur_tab(1,1).ZKP_REF,,\"MG\",null)
                  ,exec('FindAndGet','#table',ZK_P,cur_tab(1,1).ZKP_REF,,\"M\",null))
             ";
   _tab.win_act(_wer,,'Formuła','Stan &magazynowy'@@,,,_formula,,,,,,'M');
   _tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Stan &magazynowy'@],'menu:M');
:: ikony
   _tab.win_fml(_wer,_tab,'SYM',,'ICON_BEFORE',"{? cur_tab(1,1).STAT_REJ='T' || exec('zaakceptowany','icon')
                                                |? cur_tab(1,1).STAT_REJ='Z' || exec('zarejestrowany','icon')
                                                |? cur_tab(1,1).STAT_REJ='A' || exec('anulowany','icon')
                                                |? cur_tab(1,1).STAT_REJ='N' || exec('pusta','#icon')
                                                || exec('pusta','#icon')
                                                ?}
               ");
   _tab.win_fml(_wer,_tab,'DT',,'ICON_BEFORE',
     "_zk_p:=exec('FindAndGet','#table',ZK_P,cur_tab(1,1).ZKP_REF,,,null());
      _pltw:=exec('FindAndGet','#table',ZK_P,_zk_p,,\"PL_DATA\" ,null());
      _psdt:=_pltw>=date;
      {? cur_tab(1,1).BPS=\'T\'
      || {? _psdt=0
         || '|calendar-21'
         || exec('pusta','#icon')
         ?}
      || exec('pusta','#icon')
      ?}
   ");
   _tab.win_fml(_wer,_tab,'ILZPX',,'ICON_BEFORE',
        "_zk_p:=exec('FindAndGet','#table',ZK_P,cur_tab(1,1).ZKP_REF,,,null());
         _mat:=exec('FindAndGet','#table',ZK_P,_zk_p,,\"M\" ,null());
         _dtktl_s:=exec('dflt_ktl','tech_prod',_mat);
         {? cur_tab(1,1).BPS=\'T\'
         || {? (_dtktl_s<>null() & exec('czy_tex_ok','qtpp',_dtktl_s))=0
            || 'xwin16.png:187'
            || exec('pusta','#icon')
            ?}
         || exec('pusta','#icon')
         ?}
   ");
:: kolorowanie pola
   _tab.fld_fml('DT','BEFORE_DISPLAY',"{? #cur_tab(1,1).TPO & #cur_tab(1,1).DT<#cur_tab(1,1).TPO
                                         | #cur_tab(1,1).TPS & #cur_tab(1,1).DT<#cur_tab(1,1).TPS
                                        || '0:0:0,255:0:0'
                                        || ''
                                        ?}");
   _tab.fld_fml('WYK','BEFORE_DISPLAY',"{? cur_tab(1,1).PWT='T' || '0:0:0,0:180:75' || '' ?}");

   _formula:="

::    Bazuje na formułce exec('il_wdr','zamsiw_rea')
      VAR_DEL.delete('INFZAM');
      INFZAM:=tab_tmp(4
         ,'TREE','TREE_REF',''
         ,'LP','INTEGER',''
         ,'NR','INTEGER',''
         ,'SZ','INTEGER',''
         ,'OP','STRING[255]',''
         ,'IL','REAL',''
         ,'REF','STRING[20]',''
         ,'ICO','STRING[16]',''
         ,'IL2','REAL',''
      );
      _tab_wdr:=params_get().env.PX.TAB_WDR;
      _tab_wdr.erase();
      M.cntx_psh();
      M.clear();
      {? M.seek(cur_tab(1,1).M_REF,)
      ||
         exec('tree_del','#tree',INFZAM,0);
         exec('pob_dane2','magazyn_stan',M.ref(),2);
         _ndx:=INFZAM.ndx_tmp(,,'LP',,,'NR',,,'SZ',,);
         INFZAM.index(_ndx);
         INFZAM.prefix(9,2);
         {? INFZAM.first()
         ||
            _sum:=0;
            {!
            |? _sz:=INFZAM.SZ;
               INFZAM.cntx_psh();
               INFZAM.prefix(9,1,_sz);
               {? INFZAM.first()
               || _mag:=(INFZAM.OP*' ')-INFZAM.OP
               ?};
               INFZAM.cntx_pop();

               _tab_wdr.blank();
               _tab_wdr.MAG:=_mag;
               _tab_wdr.OP:=INFZAM.OP;
               _tab_wdr.IL:=INFZAM.IL;
               _tab_wdr.add();

               _sum+=_tab_wdr.IL;

               INFZAM.next()
            !};

            _tab_wdr.blank();
            _tab_wdr.MAG:='~~';
            _tab_wdr.OP:='   S U M A:';
            _tab_wdr.IL:=_sum;
            _tab_wdr.add()
         ?}
      ?};
      _tab_wdr.select();
      M.cntx_pop();
      VAR_DEL.delete('INFZAM')
   ";

   _tab.win_act(_wer,,'Kolejność');

   _formula:="
      {? _a
      || _tab:=cur_tab(1,1);
         _grayed:=':';
         {? _tab.sel_size()=0
         ||
            ZK_RN.cntx_psh;
            ZK_RN.index('ZAM');
            ZK_RN.prefix(exec('FindAndGet','#table',ZK_N,cur_tab(1,1).ZKN_REF,,\"ref\",null));
            {? ~ZK_RN.first()
            || _grayed:='R'+_grayed
            ?};
            ZK_RN.cntx_pop;
            {? _tab.ILZPX=0
            || _grayed:='P(P)P(G)P(S)'+_grayed
            || _grayed:='P(U)'+_grayed
            ?};
            {? _tab.OBJREF=0
            || _grayed:='P(P)P(G)P(S)'+_grayed
            ?};
            {? _tab.ILZL=0
            || _grayed:='Z'+_grayed
            || _grayed:='P(U)P(G)P(S)'+_grayed
            ?};
            {? _tab.OBJREF=0 & _tab.ILZL=0
            || _grayed:='U'+_grayed
            ?};
            {? _tab.ILZPO=0
            || _grayed:='O(O)'+_grayed
            ?}
         ?};
         _tab.actions_grayed(cur_win(1,1),_grayed);

         {? _tab.OBJREF=0 & _tab.ILZPX>0
         ||  _res:=exec('ps_dane','qlsp',_tab.ZKP_REF);
             _tab.OBJREF:=_res[3];
             _tab.PX_GRP:=_res[4];
             _tab.put()
         ?};
         ~~
      ?};
:: na rekord uzupelnian znacznik czy pozycja przeliczona
      {? cur_tab(1,1).ILZPX=0 | cur_tab(1,1).ILZL>0
      || cur_tab(1,1).PSP:=''
      || _zk_p:=exec('FindAndGet','#table',ZK_P,cur_tab(1,1).ZKP_REF,,,null());
         _px_obj:=exec('get_zkp_object','px_obj',_zk_p);
         _wyn:=sql('select * from PX_POZ where PX_POZ.PX_OBJ=:_a',_px_obj).first();
         {? _wyn || cur_tab(1,1).PSP:='T' || cur_tab(1,1).PSP:='N' ?}
      ?};
      cur_tab(1,1).put;
      {? cur_tab(1,1).BPS=\'T\'
      || Color.fnd_kol('QZKP#01#01')
      |? cur_tab(1,1).IL=cur_tab(1,1).ILZ
      || Color.fnd_kol('ZKP#01#02')
      || Color.fnd_kol('ZKP#01#03')
      ?}
   ";
   _tab.win_act(_wer,,'Rekord',,,,_formula);
   _formula:="
      ZK_P.cntx_psh();
      ZK_P.prefix();
      {? ZK_P.seek(cur_tab(1,1).ZKP_REF)
      || params_exec('wys_pozy','zamsiw_poz')
      || FUN.emsg('Nie znaleziono pozycji zamówienia.'@)
      ?};
      ZK_P.cntx_pop();
      ~~
   ";
   _tab.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','ZKP#01#02','ZKP#01#03','QZKP#01#01')",,,,,,'L');
   _tab.win_act(_wer,,'Wyświetl',,,,_formula);

   _tab.win_sel(_wer)
?};
~~


\ps_dane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa
:: OPIS: Szuka planowanego obiektu i zwraca potrzebne informacje w postaci tabeli
::   WE: _a - ZK_P.ref() - pozycja zamowienia klienta
::   WY: tabela 1-kierunek planowania, 2-planowana data realizacji, 3-#ref objektu planowanego, 4-$ref obiektu grupującego
::----------------------------------------------------------------------------------------------------------------------
_res:=obj_new(4); _res[1]:=0; _res[2]:=date(0,0,0); _res[3]:=0; _res[4]:='';

{? var_pres('_a')=type_of(null()) || _zkp:=_a
|? var_pres('_a')=type_of('') || _zkp:=exec('FindAndGet','#table',ZK_P,_a,,,null())
|| _zkp:=null()
?};

:: Szukam obiektu planowanego
PX_OBJ.cntx_psh();
PX_OBJ.index('ZK_P');
PX_OBJ.prefix(ref_name(_zkp),_zkp);
{? PX_OBJ.first()
|| _res[1]:=PX_OBJ.DIR;
   _res[2]:=PX_OBJ.PLANENDD().DATA;
   _res[3]:=#PX_OBJ.ref;
   _mainver:=exec('get_mainversion','px_ver');
   _res[4]:=$exec('get_first_grp','px_obj',_mainver,PX_OBJ.ref())
?};
PX_OBJ.cntx_pop();
_res


\zk_p_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa
:: OPIS: lista zleceń do wybranej pozycji zamówienia
::   WE: _a - ZK_P.ref
::----------------------------------------------------------------------------------------------------------------------

:: szukam zlecenia wyrobu - na jego podstawie wyswietlam liste zlecen powiazanych
ZLZAM.cntx_psh;
ZLZAM.index('ZMZL');
ZLZAM.prefix($_a);
{? ZLZAM.first()
|| _zl:=ZLZAM.ZL
|| _zl:=null
?};
ZLZAM.cntx_pop;


ZL.cntx_psh();

_wer:=ZL.mk_sel('Zlecenia do pozycji zamówienia'@,'P',,'#zlzampoz',20,10,10,,'U',,,,,'html_maximized');
ZL.win_fld(_wer,,'SYM',,,-15,,,'Symbol'@);
ZL.win_fld(_wer,,'OPIS',,,-45,,,'Opis'@);
ZL.win_fld(_wer,,'KTM','KTM',,-13,,,'Kod produktu'@);
ZL.win_fld(_wer,,'KTM','N',,-40,,,'Nazwa produktu'@);
ZL.win_fld(_wer,,'STAN',,,-4,,,'Stan'@,,'Stan zlecenia: N-w przygotowaniu, Otwarte, Zamknięte'@);
ZL.win_fld(_wer,VAR1,'STAT_PL',,,-4,,,'Plan'@,,'Status planowania zlecenia'@);
ZL.win_fld(_wer,PX_VAR,'CONFIRM',,,-5,,,'Zwrot'@);
ZL.win_fld(_wer,,'IL',,,10,2,,'Zlecono'@);
ZL.win_fld(_wer,,'ILDOK',,,-12,2,,'Wykonano (RP)'@);
ZL.win_fld(_wer,VAR,'REAL1',,,-8,2,,'\% Wyk dok.'@,,'\%Wykonania wg dokumentów'@);
ZL.win_fld(_wer,,'ENDD',,,-10,,,'Koniec produkcji'@);
_formula:="params_exec('zl_analizas_b','qlsp')";
ZL.win_act(_wer,,'Formuła','&Analiza zapotrzebowań'@@,,,_formula,,,,,,'A');
ZL.win_btn(_wer,'text=%1,panel=right,align=begin'['Analiza zapotrzebowań'@],'menu:A');
ZL.win_act(_wer,,'Formuła','Pobrania &surowców'@@,,,"exec('zlim_realizacja','qprodukcja')",,,,,,'S');
ZL.win_btn(_wer,'text=%1,panel=right,align=begin'['Pobrania &surowców'@],'menu:S');
ZL.win_act(_wer,,'Formuła','&Dokumenty magazynowe'@@,,,"params_exec('pozrap','magdok_prod',,,0)",,,,,,'D');
ZL.win_btn(_wer,'text=%1,panel=right,align=begin'['&Dokumenty magazynowe'@],'menu:D');
ZL.win_act(_wer,,'Formuła','&Rejetracja wykonań'@@,,,"params_exec('godz_sel','zl_wyk')",,,,,,'R');
ZL.win_btn(_wer,'text=%1,panel=right,align=begin'['&Rejetracja wykonań'@],'menu:R');
_formula:="params_exec('sm_dost','magazyn_stan',ZL.MG,ZL.KTM)";
ZL.win_act(_wer,,'Formuła','Stan &magazynowy'@@,,,_formula,,,,,,'M');
ZL.win_btn(_wer,'text=%1,panel=right,align=begin'['Stan &magazynowy'@],'menu:M');
_formula:="
      M.cntx_psh();
      M.clear();
      {? M.seek(ZL.KTM) || exec('info_zam','magazyn_stan',5) ?};
      M.cntx_pop()
";
ZL.win_act(_wer,,'Formuła','Szcz&egóły stanu'@@,,,_formula,,,,,,'E');
ZL.win_btn(_wer,'text=%1,panel=right,align=begin'['Szcz&egóły stanu'@],'menu:E');
ZL.win_act(_wer,,'Menu','P&odgląd planu'@,,,,,,,,,'O');
_btn:=ZL.win_btn(_wer,'text=%1,panel=right,align=begin'['P&odgląd planu'@],'Menu');
_formula_bg:="
   _sel:=ZL.sel_aget();
   _tab:=tab_tmp(1,'REF','INTEGER','#ZL.ref()');
   {? _sel.first()
   || {!
      |? _tab.REF:=#ZL.ref;
         _tab.add();
         _sel.next()
      !}
   ?};
   exec('select_any_core','px_plan',,ZL,_tab);
   ZL.sel_adel();
   0
";
ZL.win_act(_wer,,'Formuła','Plan strategiczny'@@,'#O',,"exec('select_zl','px_plan')",,,1,_formula_bg,,'P');
ZL.btn_menu(_wer,_btn,'menu:OP');
task_attach('TPP_PPS_PPLA');
task_attach('TPP_PPS_DPLA');
_formula:="
   exec('zl_utilization','po_plan',0,ZL.ref)
";
ZL.win_act(_wer,,'Formuła','Plan &operacyjny'@@,'#O',,_formula,,,,,,'O');
ZL.btn_menu(_wer,_btn,'menu:OO');
task_attach('TPP_PPO_PPPL');
task_attach('TPP_PPO_DPPL');
_formula:="exec('todo_select','#b__box',ZL.uidref())";
ZL.win_act(_wer,,'Formuła','Zadan&ia'@@,,,_formula,,,,,,'I');

:: Kolorowanie
:: jesli jakiekolwiek zlecenie z grupy zlecen ma zarejestrowane wykonanie to oznaczam, ze zlecenie jest w trakcie wykonywania
_formula:="
   {? ZL.KTL<>null
   || _zlgd:=sql('select ZLGD.REFERENCE as REF, ZLGD.ZAK from @ZLGD join ZL where ZLGD.ZL=:_a and ZL.ST_N=\\':_b\\'',ZL.ref,'T');
      {? _zlgd.REF<>''
      || {? _zlgd.ZAK='N'
         || '0:0:0,0:116:173'
         || '0:0:0,0:180:75'
         ?}
      || ''
      ?}
   || ''
   ?}
";
ZL.fld_fml('ILDOK','BEFORE_DISPLAY',_formula);
ZL.win_act(_wer,,'Kolejność');
ZL.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','#ZL#02','#ZL#03','#ZL#05')",,,,,,'L');
ZL.win_act(_wer,,'Rekord',,,,"
   {? ZL.size=0
   || VAR.A_ZLEC:=null()
   || VAR.A_ZLEC:=ZL.ref;
      PX_VAR.CONFIRM:={? ZL.PL_DIR=-1
                       || exec('txt_plan_bck','px_param')
                       |? ZL.PL_DIR=1
                       || exec('txt_plan_fwd','px_param')
                       || exec('txt_plan_nul','px_param')
                       ?};
      exec('procent','zl_head');
      {? _a
      || _grayed:=':';
         {? ZL.PLAN_PO='N'
         || _grayed:='O(O)'+_grayed
         ?};
         {? ZL.IL=0
         || _grayed:='S'+_grayed;
            _grayed:='O(O)'+_grayed;
            _grayed:='O(P)'+_grayed
         ?};
         {? ZL.PLAN_PX='N'
         || {? ZL.sel_size()=0 || _grayed:='O(P)'+_grayed ?}
         || {? ZL.sel_size()=0 || _grayed:='Z'+_grayed ?}
         ?};
         {? ZL.MG=null()
         || _grayed:='M'+_grayed
         ?};
         ZL.actions_grayed(cur_win(1,1),_grayed)
      ?}
   ?};
   ~~
",,0);
ZL.win_act(_wer,,'Wyświetl',,,,"
   {? ZL.ref<>null()
   || exec('zl_display','zl_head')
   ?};
   ~~
");
_fi:="exec('icon_stan','zl_head')";
ZL.win_fml(_wer,,'STAN',,'ICON_BEFORE',_fi);
_fi:="params_exec('icon_stat_pl','zl_head')";
ZL.win_fml(_wer,VAR1,'STAT_PL',,'ICON_BEFORE',_fi);
_fi:="exec('icon_ktm','zl_head')";
ZL.win_fml(_wer,,'OPIS',,'ICON_BEFORE',_fi);
ZL.win_sel(_wer);

ZAKR.ZTP_WP:='P';

_zlnode:=exec('FindAndGet','#table',ZL,_zl,,"NODE",'');
_ndx:=ZL.ndx_tmp(,1,'NODE',,);
ZL.index(_ndx);
ZL.prefix(_zlnode);
ZL.first();
ZL.select();
ZL.ndx_drop(_ndx);

ZL.cntx_pop();
~~


\zl_analizas_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Analiza dostępności surowców w czasie - akcja 'przed' dla tabeli ZL
::       analizie podlegają tylko surowce produktów w ilości nie zleconej
::----------------------------------------------------------------------------------------------------------------------
{? ZL.sel_size()>0 || return() ?};

ZL.cntx_psh();

{? ZL.RODZAJ='N' & exec('subzlec_exist','zl_link',ZL.ref())=0
|| FUN.info('Zlecenie niezależne %1 bez podzleceń nie podlega analizie.'@[ZL.SYM]);
   _can_continue:=0
|| exec('env_create','tech_structure',1);
:: NUCO - dodano mozliwosc wybrania terminu wymagalnosci
   _can_continue:=exec('edit_params','qlsp',0,0,0);
   q_analiza_zlec:=1
?};
_env:=__ENV_STR;
::  Rozpoczynam pętle
_exit:=1;
{!
|?
   {? var_pres('TAB',__ENV_STR.STRUCT)>0 || __ENV_STR.STRUCT.TAB.erase() ?};
   {? var_pres('TAB',__ENV_STR.SELECTED)>0 || __ENV_STR.SELECTED.TAB.erase() ?};
   {? var_pres('ELEMENT',__ENV_STR.STRUCT)>0 || __ENV_STR.STRUCT.ELEMENT.erase() ?};
   {? var_pres('TAB',__ENV_STR.CHECK) > 0 || _env.CHECK.TAB.erase() ?};

   {? _can_continue>0
   || {? var_pres('_tab')>0 || obj_del(_tab) ?};
      _tab:=_env.SELECTED.TAB;
::    Zlecenie niezależne zamieniane na jego elementy (bezwarunkowo)
      {? ZL.RODZAJ='N'
      || ZL.cntx_psh();
         ZL.prefix();
         ZL.index('NRNZL');
         ZL.prefix(ZL.UNRZL);
         {? ZL.first()
         || {!
            |? _tab.REF:=#ZL.ref();
               _tab.OMIT:='N';
               _tab.add();
               ZL.next()
            !}
         ?};
         ZL.cntx_pop()

::    Zlecenie złożone zamieniane na montażowe (o ile już są podzlecenia)
      |? ZL.RODZAJ='Z' & exec('subzlec_exist','zl_link',ZL.ref())>0
      || ZL.cntx_psh();
         ZL.prefix();
         ZL.index('NRNZL');
         ZL.prefix(ZL.UNRZL,1);
         {? ZL.first()
         || {!
            |? {? ZL.TREE_TYP='M'
               || _tab.REF:=#ZL.ref();
                  _tab.OMIT:='N';
                  _tab.add()
               ?};
               ZL.next()
            !}
         ?};
         ZL.cntx_pop()

      || _tab.REF:=#ZL.ref();
         _tab.OMIT:='N';
         _tab.add()
      ?};
      exec('zl_analizas_core','zl_common')
   ?};
:: Wyświetlam tabelę z problemami i uzupełniam tabelę zamienników
   _ok:=1;
   {? _env.CHECK.TAB.size()>0
   || _env.CHECK.TAB.win_sel(_env.CHECK.WERA);
      _ok:=exec('tktl_chck_sel','tech_structure');
      {? _ok=0 || _exit:=0 ?}
   || _exit:=0
   ?};
   _exit
!};
:: Koniec petli

{? _ok
|| exec('cumulate','tech_structure');
   exec('select','tech_structure')
?};
ZL.cntx_pop();

:: NUCO - usunięcie zmiennej sterującej
VAR_DEL.delete('q_analiza_zlec');
~~


\edit_params
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Redagowanie parametrów
::   WE: _a - wariant redagowania: dostępna ilość
::       _b - wariant redagowania: dostępna data
::       _c - wariant redagowania: dostępny drill
::  MOD: SITEK - wyswietlanie dla jakiego KTMu ustawiamy ilosc i dw
::       [_d] - opcjonalny - opis dla jakiego ktmu ustawiamy ilosc i dw
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _v_il:=_a || _v_il:=0 ?};
{? var_pres('_b')=type_of(0) || _v_dw:=_b || _v_dw:=0 ?};
{? var_pres('_c')=type_of(0) || _v_drill:=_c || _v_drill:=0 ?};
{? var_pres('_d')>0 || _v_label:=_d || _v_label:='' ?};
params_set('v_il',_v_il,'v_dw',_v_dw,'v_drill',_v_drill,'v_label',_v_label);

_env:=__ENV_STR;

_tab:=tab_tmp(
   ,'IL','REAL','Ilość'@
   ,'DW','DATE','Termin wymagany'@
   ,'DRILL','INTEGER','Zakres analizy'@
   ,'TAB','STRING[8]','Miejsce wywołania'@
);

_red:=_tab.mk_edit('Analiza surowców'@,,'#editparams'+$_v_il+$_v_dw+$_v_drill);
_tab.win_esep(_red,'Parametry analizy'@);
{? _v_label <> '' || _tab.win_esep(_red,'%1'[_v_label]) ?};
{? _v_il || _tab.win_efld(_red,,'IL',,,15,ST.DOKL); _tab.efld_opt(_red,'mark=1',,'IL') ?};
{? _v_dw || _tab.win_efld(_red,,'DW',,,12); _tab.efld_opt(_red,'mark=1',,'DW') ?};
{? _v_drill
|| _tab.win_efld(_red,,'DRILL',,,,,,,,,'radio-buttons',
      ,'Tylko surowce na pierwszym poziomie'@,"0"
      ,'Surowce na wszystkich poziomach'@,"1"
   )
?};
exec('ok_esc','#window',_tab,_red);
:: PK - funkcja po przerobce dostepna rowniez od strony zlecen
_tab.TAB:=2-!cur_tab;
_tab.win_edit(_red);
_chk:="
   _tab:=cur_tab(1,1);
   _args:=params_get();
   _chk:={? _args.v_il || {? exec('itsPositive','#field',1,,_tab.IL) || '' || 'IL' ?} || '' ?};
   _chk:=
      {? _chk='' & _args.v_dw
      || {?  _tab.TAB='ZL'
         || {? _tab.DW<>date(0,0,0) & _tab.DW<date() || FUN.info('Data nie może być wcześniejsza niż dzisiejsza.'@); _chk:='DW' || _chk ?}
         || {? _tab.DW<date() || FUN.info('Data nie może być wcześniejsza niż dzisiejsza.'@); _chk:='DW' || _chk ?}
         ?}
      || _chk
      ?};
   _chk
";

_tab.IL:=_env.PARAMS.IL;
_tab.DW:=_env.PARAMS.DW;
_tab.DRILL:=_env.PARAMS.DRILL;
{? _tab.IL | #_tab.DW
|| _edited:=_tab.edit(_chk);
   {? _edited
   || {? _v_il || _env.PARAMS.IL:=_tab.IL || _env.PARAMS.IL:=0 ?};
      {? _v_dw || _env.PARAMS.DW:=_tab.DW || _env.PARAMS.DW:=date() ?};
      {? _v_drill || _env.PARAMS.DRILL:=_tab.DRILL || _env.PARAMS.DRILL:=1 ?}
   ?}
|| _edited:=1
?};
_edited


\zk_p2ps
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [22.26 NUCO]
:: OPIS: Umieszczenie pozycji zamówienia w planie strategicznym
::   WE: _a - ZK_P.ref lub $ZK_P.ref()
::       [_b] - 1-komunikaty (domyślnie), 0 - bez komunikatów
::   WY: 1 - udało się umieścić w planie, 0 - coś poszło nie tak
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_zk_p:=null();
_dialog:=1;

{? var_pres('_a')=type_of(null()) || _zk_p:=_a ?};
{? var_pres('_a')=type_of('') || _zk_p:=exec('FindAndGet','#table',ZK_P,_a,,,null())?};
{? _>1 & var_pres('_b')=type_of(0) || _dialog:=_b ?};

{? _zk_p<>null()
|| _zk_n:=exec('FindAndGet','#table',ZK_P,_zk_p,,"N" ,null);
   {? _zk_n<>null & exec('FindAndGet','#table',ZK_N,_zk_n,,"ZK_N.STAT_REJ<>'N'",0)
   || {? exec('FindAndGet','#table',ZK_P,_zk_p,,"PL_DATA" ,date(0,0,0))>date()
      || _mat:=exec('FindAndGet','#table',ZK_P,_zk_p,,"M" ,null());
         _dtktl_s:=exec('dflt_ktl','tech_prod',_mat);
         {? _dtktl_s<>null() & exec('czy_tex_ok','qtpp',_dtktl_s)
         || _par:=obj_new(1);
            _par[1]:=obj_new('PARAMETR','VALUE');
            _par[1].PARAMETR:='ZK_P';
            _par[1].VALUE:=_zk_p;
            exec('force_signal','#b__box','NUCO_ZK_P_DO_PLANU',,_par);
            _result:=1
         || {? _dialog || FUN.error('Karta technologiczna jest niekompletna.\nPozycji nie można umieścić w planie strategicznym') ?}
         ?}
      || {? _dialog || FUN.error('Wewnętrzny termin realizacji późniejszy niż obecna data.\nPlanowanie obiektu nie jest możliwe.') ?}
      ?}
   || {? _dialog || FUN.error('Redakcja zamówienia nie została zakończona.\nPlanowanie obiektu nie jest możliwe.') ?}
   ?}
|| {? _dialog || FUN.error('Nie odnaleziono pozycji zamówienia.\nPozycji nie można umieścić w planie strategicznym') ?}
?};

_result


\analiza_dostaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [22.26 NUCO]
:: OPIS: Analiza dostaw na podstawie informacji z kartoteki stanów materiałowych wykonywana dla  zaznaczonych rekordów
::       Lub rekordu na którym znajduje się kursor
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('tab_sc', 'tab_sd');
{? SM.sel_size()=0
|| FUN.info('Musisz zaznaczyć co najmniej jeden rekord aby uruchomić analizę');
   return(0)
?};

_tab_sm:=SM.sel_aget();
_tab_m:=sql('select M.REFERENCE as M
                  from M
                 where 1=0
              order by M');

{? _tab_sm.first()
|| {!
   |? _ref:=exec('FindAndGet','#table',SM,_tab_sm.REF,_tab_sm.DBMASK,"$(@.SM.M)",'');
      {? _ref<>''
      || {? ~_tab_m.find_key(_ref)
         || _tab_m.M:=_ref;
            _tab_m.add()
         ?}
      ?};
      _tab_sm.next()
   !};
   {? _tab_m.first()
   || tab_sc:=sql('select SC.REFERENCE as SC_REF,
                           SC.S,
                           SC.D,
                           to_date(\'0000/00/00\') as DT,
                           SC.PRDK,
                           SC.SRDK,
                           SC.SCEAN,
                           SC.TW,
                           SC.C as CEANA,
                           SC.C*SC.S as WAR_STAN,
                           SC.WAR01 as ATRYBUT1,
                           SC.WAR02 as ATRYBUT2,
                           SC.WAR03 as ATRYBUT3,
                           M.KTM,
                           M.N,
                           M.REFERENCE as M_REF,
                           SC.S as PZ,
                           SC.S as ROZCHOD,
                           SC.S as PRZYCHOD,
                           JM.KOD JM_KOD,
                           MG.SYM as MG,
                           SPACE(16) as REF_PZ,
                           SPACE(30) as SYM_DOK,
                           SPACE(30) as SYM_DOKP,
                           SPACE(10) as SKR,
                           SPACE(50) as NAZ,
                           SPACE(1) as Z
                      from @SC
                           join M using(SC.M,M.REFERENCE)
                           join MG using(SC.MAG,MG.REFERENCE)
                           join JM using(M.J,JM.REFERENCE)
                     where SC.M in (select M from :_a) and SC.A=\'T\' and MG.SYM not like \'X%\'
                  order by M_REF, KTM, N, SCEAN',
                   _tab_m
                  );
      tab_sc.index(tab_sc.ndx_tmp(,1,'SCEAN',,,'MG',,));
      {? tab_sc.first()
      || {!
         |? _temp:=exec('znajdz_prdk','qlsp',tab_sc.PRDK);
:: Pierwotny dokument, pierwotna pozycja - zewnętrzny - jeśli się da odnaleźć
            {? _temp.SYM<>''
            || tab_sc.SYM_DOKP:=_temp.SYM;
               tab_sc.SKR:=_temp.SKR;
               tab_sc.NAZ:=_temp.NAZ;
               tab_sc.PZ:=_temp.IL;
               tab_sc.Z:=_temp.Z;
               tab_sc.DT:=_temp.DT
            ?};
            _nd:=exec('FindAndGet','#table',DK,tab_sc.SRDK,,"@.DK.N",null());
            {? _nd<>null()
            || tab_sc.SYM_DOK:=exec('FindAndGet','#table',ND,_nd,,"@.ND.SYM",'')
            ?};
            tab_sc.PRZYCHOD:=exec('FindAndGet','#table',DK,tab_sc.SRDK,,"@.DK.IL",0);
            tab_sc.ROZCHOD:=tab_sc.PRZYCHOD-tab_sc.S;
            tab_sc.put();
            &_temp;
            tab_sc.next()
         !};

         tab_sd:=sql('select :_a.M_REF,
                              :_a.KTM,
                              :_a.N,
                              :_a.SCEAN as ID_DOST,
                              :_a.JM_KOD,
                              SPACE(10) as SKR,
                              SPACE(60) as NAZ,
                              min(:_a.DT) as DT,
                              sum(:_a.S) as STAN,
                              min(:_a.PZ) as PRZYCH_P,
                              sum(:_a.PRZYCHOD) as PRZYCHOD,
                              sum(:_a.WAR_STAN) as WAR_STAN,
                              sum(:_a.PRZYCHOD - :_a.S) as ROZCHOD
                         from :_a
                     group by M_REF, KTM, N, SCEAN, JM_KOD, SKR, NAZ
                     having sum(:_a.S)>0
                     order by ID_DOST
                      ', tab_sc
                     );
         {? tab_sd.first()
         || {!
            |? tab_sd.SKR:=sql('select :_a.SKR from :_a where :_a.SCEAN=\':_b\' and :_a.SKR<>\'\'',tab_sc,tab_sd.ID_DOST).SKR;
               tab_sd.NAZ:=sql('select :_a.NAZ from :_a where :_a.SCEAN=\':_b\' and :_a.NAZ<>\'\'',tab_sc,tab_sd.ID_DOST).NAZ;
               tab_sd.DT:=sql('select :_a.D from :_a where :_a.SCEAN=\':_b\' and :_a.NAZ<>\'\'',tab_sc,tab_sd.ID_DOST).D;
               {? tab_sd.ROZCHOD<0 || tab_sd.ROZCHOD:=0 ?};
               tab_sd.put();
               tab_sd.next()
            !}
         ?};

         _sWin:=tab_sd.mk_sel('','P',,'#tab_sd_swin',,,,,'U','T');
         tab_sd.win_sel(_sWin);
         tab_sd.win_fld(_sWin,,'KTM'     ,          ,          , 15,  , ,'KTM',,'KTM',,1);
         tab_sd.win_fld(_sWin,,'N'       ,          ,          , 30,  , ,'Nazwa indeksu',,'N',,1);
         tab_sd.win_fld(_sWin,,'ID_DOST' ,          ,          , 20,  , ,'Kod dostawy',,'ID_DOST',,1);
         tab_sd.win_fld(_sWin,,'DT'     ,          ,          , 10,  , ,'Data dost.',,'DT',,1);
         tab_sd.win_fld(_sWin,,'SKR'     ,          ,          , 10,  , ,'Skr. KH',,'SKR',,1);
::         tab_sd.win_fld(_sWin,,'MG'     ,          ,          , 10,  , ,'Magazyn',,'MG',,1);
         tab_sd.win_fld(_sWin,,'PRZYCH_P',          ,          , 10, 4, ,'Il. pierwotna',,'Ilość na pierwotnym dokumencie przychodowym',,1);
         tab_sd.win_fld(_sWin,,'PRZYCHOD',          ,          , 10, 4, ,'Przychód',,'Ilość przychodu dostawy na magazyb',,1);
         tab_sd.win_fld(_sWin,,'ROZCHOD' ,          ,          , 10, 4, ,'Rozchód',,'Rozchód na magazynie',,1);
         tab_sd.win_fld(_sWin,,'STAN'    ,          ,          , 10, 4, ,'Akt. stan',,'Stan aktualny na magazynie',,1);
         tab_sd.win_fld(_sWin,,'JM_KOD'  ,          ,          , 5,  , ,'j.m.',,'JM_KOD',,1);
         tab_sd.win_fld(_sWin,,'WAR_STAN',          ,          , 10, 2, ,'Wartość akt. st.',,'Wartość stanu aktualnego',,1);

         tab_sd.win_act(_sWin, ,'Kolejność' );
         tab_sd.win_act(_sWin, ,'Szukaj');
         _fm:="tab_sc.prefix();
               tab_sc.prefix(tab_sd.ID_DOST);
               tab_sc.first;
               tab_sc.select()
               ";
         tab_sd.win_act(_sWin, ,'Formuła','Dostawy',,,,_fm,1,0,);

         _sWin_sc:=tab_sc.mk_sel('','P',,'#tab_sc_swin_s',,,,,'U','T');
         tab_sc.win_sel(_sWin_sc);
         tab_sc.win_fld(_sWin_sc,,'MG'      ,          ,          ,  8,  , ,'Magazyn',,'MG',,1);
::tab_sc.win_fld(_sWin_sc,,'KTM'     ,          ,          , 50,  , ,'KTM',,'KTM',,1);
::tab_sc.win_fld(_sWin_sc,,'N'       ,          ,          ,100,  , ,'N',,'N',,1);
         tab_sc.win_fld(_sWin_sc,,'SCEAN'   ,          ,          , 30,  , ,'Kod dostawy',,'SCEAN',,1);
         tab_sc.win_fld(_sWin_sc,,'D'       ,          ,          , 10,  , ,'Data dost.',,'D',,1);
         tab_sc.win_fld(_sWin_sc,,'SYM_DOK' ,          ,          , 30,  , ,'Dok. przych.',,'SYM_DOK',,1);
         tab_sc.win_fld(_sWin_sc,,'PRZYCHOD',          ,          , 10, 2, ,'Przychod',,'PZ',,1);
         tab_sc.win_fld(_sWin_sc,,'ROZCHOD' ,          ,          , 10, 2, ,'Rozchód',,'Rozchód z magazynu',,1);
         tab_sc.win_fld(_sWin_sc,,'S'       ,          ,          , 10, 2, ,'Stan',,'S',,1);
         tab_sc.win_fld(_sWin_sc,,'TW'      ,          ,          , 10,  , ,'TW',,'TW',,1);
         tab_sc.win_fld(_sWin_sc,,'JM_KOD'  ,          ,          , 10,  , ,'j.m.',,'JM_KOD',,1);
         tab_sc.win_fld(_sWin_sc,,'CEANA'   ,          ,          , 10, 2, ,'Cena',,'CEANA',,1);
         tab_sc.win_fld(_sWin_sc,,'WAR_STAN',          ,          , 10, 2, ,'Wartość',,'WAR_STAN',,1);
         tab_sc.win_fld(_sWin_sc,,'SYM_DOKP',          ,          , 30,  , ,'Pierwotny dok.',,'SYM_DOKP',,1);
         tab_sc.win_fld(_sWin_sc,,'PZ'      ,          ,          , 10, 2, ,'Il. pierwotna',,'PZ',,1);
         tab_sc.win_act(_sWin_sc, ,'Szukaj');

         _sEdt_sc:=tab_sc.mk_edit('',,'#tab_sc_swin_s');
         tab_sc.win_edit(_sEdt_sc);
         tab_sc.win_efld(_sEdt_sc,,'S'       ,          ,          , 10, 2, ,'S',,'S',,);
         tab_sc.win_efld(_sEdt_sc,,'D'       ,          ,          , 10,  , ,'D',,'D',,);
         tab_sc.win_efld(_sEdt_sc,,'SCEAN'   ,          ,          , 30,  , ,'SCEAN',,'SCEAN',,);
         tab_sc.win_efld(_sEdt_sc,,'TW'      ,          ,          , 10,  , ,'TW',,'TW',,);
         tab_sc.win_efld(_sEdt_sc,,'CEANA'   ,          ,          , 10, 2, ,'CEANA',,'CEANA',,);
         tab_sc.win_efld(_sEdt_sc,,'WAR_STAN',          ,          , 10, 2, ,'WAR_STAN',,'WAR_STAN',,);
         tab_sc.win_efld(_sEdt_sc,,'KTM'     ,          ,          , 50,  , ,'KTM',,'KTM',,);
         tab_sc.win_efld(_sEdt_sc,,'N'       ,          ,          ,100,  , ,'N',,'N',,);
         tab_sc.win_efld(_sEdt_sc,,'PZ'      ,          ,          , 10, 2, ,'PZ',,'PZ',,);
         tab_sc.win_efld(_sEdt_sc,,'JM_KOD'  ,          ,          , 10,  , ,'JM_KOD',,'JM_KOD',,);
         tab_sc.win_efld(_sEdt_sc,,'MG'      ,          ,          ,  8,  , ,'MG',,'MG',,);
         tab_sc.win_efld(_sEdt_sc,,'SYM_DOK' ,          ,          , 30,  , ,'SYM_DOK',,'SYM_DOK',,);
         tab_sc.win_efld(_sEdt_sc,,'SYM_DOKP',          ,          , 30,  , ,'SYM_DOKP',,'SYM_DOKP',,);



         tab_sd.select()
      || FUN.info('Brak zapisów do wyświetlenia')
      ?}
   || FUN.info('Brak zapisów do wyświetlenia')
   ?}
|| FUN.info('Brak zapisów do wyświetlenia')
?};

1


\znajdz_prdk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_2226]
:: OPIS: Funkcja odszukuje pierwotny dokument zewnętrzny, lub pierwszy dokument przychodowy w firmie dla podanej dostawy
::   WE: $DK.ref ref pozycji dostawy w postaci SQL
::   WY: tablica z danymi o dokumencie pierwotnym:
::       _.PRDK - ref dokumentu
::       _.SYM  - symbol dokumentu pierwotnego
::       _.SYM_DOK - symbol dokumentu dostawy na magazynie
::       _.Z    - czy dokument zewnętrzny - T/N
::       _.MG   - Symbol magazynu
::       _.SKR  - Skr. kontrahenta
::       _.NAZ  - Nazwa kontrahenta
::       _.DT  - Data dokumentu
::----------------------------------------------------------------------------------------------------------------------
_prdk:=_a;

_res:=obj_new('PRDK','SYM','SYM_DOK','Z','MG','IL','SKR','NAZ','DT');
_res.PRDK:=_res.SYM:=_res.SYM_DOK:=_res.Z:=_res.MG:=_res.SKR:=_res.NAZ:='';
_res.IL:=0;
_res.DT:=date(0,0,0);

{? _prdk<>''
|| _temp:=sql('select MG.SYM MG,
                      ND.SYM SYM,
                      ND.D as DT,
                      KH.SKR,
                      KH.NAZ,
                      TYPYDOK.Z,
                      TYPYDOK.P,
                      DK.ZP,
                      DK.PRDK,
                      DK.SRDK,
                      DK.IL
                 from @DK join @ND using(DK.N,ND.REFERENCE)
                          join TYPYDOK using(ND.TYP,TYPYDOK.REFERENCE)
                          left join KH using(DK.KH,KH.REFERENCE)
                          join MG using(ND.MAG,MG.REFERENCE)
                where DK.REFERENCE=\':_a\'
                          ', _prdk);
   {? _temp.first()
   || {? _temp.PRDK=_temp.SRDK
      || _wyn:=_temp
      || _wyn:=exec('znajdz_prdk','qlsp',_temp.PRDK)
      ?};
      {? _wyn.PRDK<>''
      || _res.PRDK:=_wyn.PRDK;
         _res.SYM:=_wyn.SYM;
         _res.Z:=_wyn.Z;
         _res.MG:=_wyn.MG;
         _res.SKR:=_wyn.SKR;
         _res.NAZ:=_wyn.NAZ;
         _res.DT:=_wyn.DT;
         _res.IL:=_wyn.IL
      || _res.PRDK:=_temp.PRDK;
         _res.SYM:=_temp.SYM;
         _res.Z:=_temp.Z;
         _res.MG:=_temp.MG;
         _res.SKR:=_temp.SKR;
         _res.NAZ:=_temp.NAZ;
         _res.DT:=_temp.DT;
         _res.IL:=_temp.IL
      ?};
      _res.SYM_DOK:=_temp.SYM
   ?}
?};
_res