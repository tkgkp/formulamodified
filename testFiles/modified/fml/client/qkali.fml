:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: qkali.fml
:: Utworzony: 09.11.2020
:: Autor: JB
:: Systemy: MERIT 20.42 - Kadry i płace
::======================================================================================================================
:: Zawartość:
::    Plik zawiera formuły NUCO dla obszaru kadrowo-płacowego
::======================================================================================================================



\zatrudnienie_przyg
::----------------------------------------------------------------------------------------------------------------------
::  UTW:
:: OPIS: Ustala date przygotowania
::   WE: _a [SYSLOG] - rekord tabeli H
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a.PRZYG


\zatrudnienie_procprem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JB [20.42]
:: OPIS: wykorzystanie:
::       - wydruk umowy o pracę wewnętrzny - w pkd_zaswumowaopracq.rpm jako SW4
::       - wydruk umowy o pracę zewnętrzny poprzez nowy mechnizm szablonów dokumentów: zestaw danych zatrudnienie,
::         nowe pole QPROCENTPREMII - NUCO - procent premii z kartoteki stałych składników listy płac.
::   WE: _a [SYSLOG] - rekord tabeli H
::   WY: procent premii ze stałych składników listy na dzień rozpoczęcia umowy
::----------------------------------------------------------------------------------------------------------------------

{? var_pres('__QPROCENTPREMII')>0
|| {? __QPROCENTPREMII<>0 || return(0) ?}
?};

_H:=_a;

_premia:='';
_jest:=0;
LSS.cntx_psh(); P.cntx_psh(); OSOBA.cntx_psh();
LSS.index('PROPOZYC');
LSS.prefix(_H.P, 75);
{? LSS.first()
|| {!|?
     {? (LSS.OD=date(0,0,0) | LSS.OD<=_H.OD) & (LSS.DO=date(0,0,0) | LSS.DO>=_H.OD)
     || _jest:=1;
        _premia+=form(LSS.KW,,2)+' % ,'
     ?};
     LSS.next()
   !}
?};

:: dla małego p, nie ma LSS
{? ~_jest
||
   VAR_DEL.delete('__TPARRH','__TPARRH_WIN');
   __TPARRH:=tab_tmp(1,'PRPREM'   ,'REAL'   ,'Procent premii');
   __TPARRH.blank();
   __TPARRH_WIN:=__TPARRH.mk_edit(_H.P().OSOBA().NAZWISKO+' '+_H.P().OSOBA().PIERWSZE,);
   __TPARRH.win_efld(__TPARRH_WIN,,'PRPREM');
   __TPARRH.win_edit(__TPARRH_WIN);
   _btn1:=__TPARRH.win_ebtn(__TPARRH_WIN,'text="%1",icon="xwin16.png:13",btn_label_align=center,panel=bottom,align=end,edit=1'['OK'@@],'key:F2');
   __TPARRH.btn_eopt(__TPARRH_WIN,_btn1,'tooltip="%1"'['Zatwierdzenie okienka'@]);
   _btn2:=__TPARRH.win_ebtn(__TPARRH_WIN,'text="%1",icon="xwin16.png:14",btn_label_align=center,panel=bottom,align=end,edit=1'['Anuluj'@@],'key:Esc');
   __TPARRH.btn_eopt(__TPARRH_WIN,_btn2,'tooltip="%1"'['Zamknięcie okienka'@]);

   _premia+={? __TPARRH.edit()
            || _jest:=1; form(__TPARRH.PRPREM,,2)+' % ,'
            ?};

   VAR_DEL.delete('__TPARRH','__TPARRH_WIN')
?};

{? _jest
|| _premia:='procent premii regulaminowej do '+_premia;
   _premia:=_premia-1
?};

{? exec('rep_set','rap_zew','PXX_ZASWUMPR')='T'
|| {? _jest || _premia:='- '+_premia ?}
?};

LSS.cntx_pop(); P.cntx_pop(); OSOBA.cntx_pop();

{? var_pres('__QPROCENTPREMII')>0
|| __QPROCENTPREMII+=1
?};

_premia


\zatrudnienie_kwota_li_nuco
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JB [20.42]
:: OPIS: wykorzystanie:
::       - wydruk umowy o pracę zewnętrzny poprzez nowy mechnizm szablonów dokumentów: zestaw danych zatrudnienie,
::         nowe pole QH_S1_LICZBOWO_NUCO- NUCO - liczbowo, dodane brutto w opisie
:: OPIS: Wypisuje przekazane wynagrodzenie dla podanego pracownika w postaci liczbowej.
::   WE: _a [tablica nazwana lub STRING] - drugi składnik płacowy
::   WY: przekazane wynagrodzenie pracownika w postaci liczbowej
::----------------------------------------------------------------------------------------------------------------------
_kwota:=_a;

{? type_of(_kwota)>100 ||  '- płaca zasadnicza brutto'+(18-_kwota.Liczbowo) || _kwota ?}


\zlerachq_datawydr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JB [20.42]
:: OPIS: wykorzystanie:
::       - wydruk rachunku do umowy cywilnoprawnej - w p_zlerachq.rpi
::       okno dialogowe: czy drukować datę wykonania wydruku, jeśli tak - jaką
::   WE:
::   WY: data wykonania wydruku, w tym zerowa jako brak daty na wydruku
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__TPARRH','__TPARRH_WIN');
__TPARRH:=tab_tmp(1,'CZYD','INTEGER',''
                    ,'D'   ,'DATE'   ,'Data wykonania wydruku');

__TPARRH.blank();
__TPARRH.CZYD:=1;
__TPARRH.D:=date();

__TPARRH_WIN:=__TPARRH.mk_edit('Parametry wydruku',);
__TPARRH.win_efld(__TPARRH_WIN,,'D');
__TPARRH.win_efld(__TPARRH_WIN,,'CZYD',,,,,,,,,'check-box',
                                               'check_label="Czy drukować datę wykonania wydruku?"',
                                               "1",
                                               "0");
__TPARRH.win_edit(__TPARRH_WIN);
__TPARRH.fld_fml('CZYD','AFTER_EDIT',"{? __TPARRH.CZYD
                                      || __TPARRH.efld_opt(__TPARRH_WIN,\'enable=1\',__TPARRH,\'D\')
                                      || __TPARRH.efld_opt(__TPARRH_WIN,\'enable=0\',__TPARRH,\'D\')
                                      ?}");
_btn1:=__TPARRH.win_ebtn(__TPARRH_WIN,'text="%1",icon="xwin16.png:13",btn_label_align=center,panel=bottom,align=end,edit=1'['OK'@@],'key:F2');
__TPARRH.btn_eopt(__TPARRH_WIN,_btn1,'tooltip="%1"'['Zatwierdzenie okienka'@]);
_btn2:=__TPARRH.win_ebtn(__TPARRH_WIN,'text="%1",icon="xwin16.png:14",btn_label_align=center,panel=bottom,align=end,edit=1'['Anuluj'@@],'key:Esc');
__TPARRH.btn_eopt(__TPARRH_WIN,_btn2,'tooltip="%1"'['Zamknięcie okienka'@]);

 _datwydr:={? __TPARRH.edit()
           ||{? __TPARRH.CZYD || __TPARRH.D || date(0,0,0) ?}
           || date()
           ?};

VAR_DEL.delete('__TPARRH','__TPARRH_WIN');
_datwydr


\koszt_kadr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JB [20.42]
:: OPIS: wykorzystanie:
::       - zapytanie sql w płacach: Płaca zasadnicza i premia - NUCO
::         jako Parametr 3: Tabela z danymi F 0 exec('koszt_kadr','qkali', PAR_SQL.PAR2D)
::   WE: _a - data podana jako parametr 2 w zapytaniu sql
::   WY: tabela do wykazania w zapytaniu
::----------------------------------------------------------------------------------------------------------------------
_tabP:=exec('dostepne_p','schemat','PPL',__F_ZATR.P,'*');

H.cntx_psh; P.cntx_psh;
H.index('_HISTKOD');
P.index('F_ZATR');
P.prefix();

_tab :=tab_tmp(6,'LP','INTEGER','Lp.',
                 'SYMBOL','STRING[16]','JednOrg',
                 'STN','STRING['+$MS.fld_len('STN','ST')+']','Stanowisko',
                 'NAZWISKO','STRING['+$MS.fld_len('OSOBA','NAZWISKO')+']','Nazwisko',
                 'PIERWSZE','STRING['+$MS.fld_len('OSOBA','PIERWSZE')+']','Imię',
                 'PESEL','STRING[11]','Pesel',
                 'MSC','STRING[2]','Miesiąc',
                 'OSOB','INTEGER','Osoby',
                 'ETAT','REAL','Etaty',
                 'PLEC','STRING[1]','Płeć',
                 'PLACA','REAL','Płaca',
                 'PROC','REAL','Procent',
                 'PREMIA','REAL','Premia',
                 'RAZEM','REAL','Razem');

_data:=_a;
echo('Przetwarzanie danych: '+$_data);

{? _tabP.first()
|| {!|?
     {? P.seek(BB.sqlint(_tabP.REF),)
     || {? P.DZA>date(0,0,0)
        ||
          H.prefix(P.ref,'Z');
          {? H.find_le(_data)
          || {? H.OD<=_data & (H.DO<=date(0,0,0) | H.DO>=_data)
             || _tab.NAZWISKO :=H.P().OSOBA().NAZWISKO;
                _tab.PIERWSZE:=H.P().OSOBA().PIERWSZE;
                _tab.STN    :=H.ST().ST;
                _tab.SYMBOL :=H.P().WYDZIAL().SYMBOL;
                _tab.OSOB   := 1;
                _tab.ETAT   := H.WY;
                _tab.PLEC   :=H.P().OSOBA().PLEC;
                _tab.PLACA:=H.S1;
                _tab.PROC :=FUNKCJE.S(75);
                _tab.PREMIA:=(H.S1*0.01*_tab.PROC)$2;
                _tab.MSC:=form(_data~2,-2);
                _tab.RAZEM:=_tab.PLACA+_tab.PREMIA;
                _tab.add
             ?}
          ?}
       ?}
     ?};

    _tabP.next()
   !}
?};
echo();

P.cntx_pop;
H.cntx_pop;

_tab


\bdo_przepisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JB [20.42]
:: OPIS: przepisanie badań lekarskich z KART_DOD do BDO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BDO.cntx_psh();
BDO.prefix();
BDS.cntx_psh();
KART_DOD.cntx_psh();
KART_DOD.prefix();
KART_DEF.cntx_psh();
KART_DEF.prefix();
OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
P.prefix();
SLO_KOD.cntx_psh();
SLO_KOD.prefix();
F_ZATR.cntx_psh();
F_ZATR.prefix();
_ok:=1;
:: Zdjęcie odłożonych kontekstów:
_cntxPop:="F_ZATR.cntx_pop();
           SLO_KOD.cntx_pop();
           P.cntx_pop();
           OSOBA.cntx_pop();
           KART_DEF.cntx_pop();
           KART_DOD.cntx_pop();
           BDS.cntx_pop();
           BDO.cntx_pop()";

_tabN:='KART_DOD';
:: Ustawiam odpowiedni prefiks:
KART_DEF.index('SYMBOL');
KART_DEF.prefix('BADANIE',);
{? ~KART_DEF.first()
|| _cntxPop;
   return(0)
?};
KART_DOD.index('KART_DOD');
KART_DOD.prefix(exec('ref_firma','ustawienia'), KART_DEF.ref());
P.index('OSOBA');

:: Przechodzę po tabeli KART_DOD:
{? KART_DOD.first()
|| {!
   |? P.prefix(KART_DOD.OSOBA);
::    Przechodzę po wszystkich pracownikach danej osoby i dla każdego tworzę zapis
      {? P.first()
      || {!
         |?
           {? P.F_ZATR().KOD='P' & P.ZA='T'
           ||
            _ok:=1;

::NIE:
::1   ID   IDADD   IDADD   Identyfikator systemowy   IDPUT
::14   Klucz grupujący   GRP_KEY   STRING[11]   Klucz grupujący
::15   Znacznik modyfikacji rekordu   IDPUT   IDPUT   Znacznik modyfikacji rekordu
::--
::5   Numer orzeczenia   NRO   STRING[20]   Numer orzeczenia lekarskiego
::9   Data utraty zdolności   DTUZ   DATE   Data utraty zdolności wykonywania dotychczasowej pracy   0000/00/00
::10   Okres pracy na innym stanowisku   OPNIS   _SYSMEMO   Okres pracy na innym stanowisku
::11   Uwagi lekarza   UWAGI   _SYSMEMO   Uwagi lekarza

::TAK:
::2   Pracownik   P   _P   Pracownik   pracowni00000001
::--
::3   Data skierowania   DTS   DATE   Data skierowania na badania   2019/08/09
::6   Data orzeczenia   DTO   DATE   Data orzeczenie lekarskiego   2019/08/09
::13   Data zmiany   DTZ   DATE   Pole techniczne do ustalania kolejności zdarzeń   2019/08/09
::--
::4   Typ badania   TYP   _SLO_KOD   Typ badania (wstępne/okresowe/kontrolne)   slo_kod 00000065
::--
::8   Data następnego badania   DTNB   DATE   Data następnego badania   0000/00/00
::7   Wynik orzeczenia   WYNIK   _S_ZUS   Wynik orzeczenia lekarskiego
::--
::12   Adnotacje   ADNOT   _SYSMEMO   Adnotacje i uwagi
::------

            BDO.blank(1);
            BDO.P:=P.ref();
            BDO.DTS:=BDO.DTO:=BDO.DTZ:=KART_DOD.OD;
            BDO.TYP:=BDO.TYP:=exec('FindInSet','#table','SLO_KOD','KOD',KART_DOD.KT,_slo:=exec('slo_typ','ext_slo','BADLEKT'),,0);
            BDO.DTNB:=KART_DOD.DO;
            BDO.WYNIK:="S_ZUS.cntx_psh();S_ZUS.index('S_ZUS');
                        S_ZUS.prefix('BADLEKO','21');
                        _ret:={? S_ZUS.first() || S_ZUS.ref() || null ?};
                        S_ZUS.cntx_pop();
                        _ret"();

            BDO.cntx_psh();
            BDO.index('PDTO');
            BDO.prefix(BDO.P,BDO.DTO);
::          {? BDO.first()
::          || _txt:='Istnieje już takie badanie lekarskie: '+BDO.DTO$1;
::             _txt+=', dla pracownika: '+$BDO.P().IP+' '+P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE;
::             _txt+='. Rekordu nie dodano.';
::             msg(_txt);
::             _ok*=0
::          ?};
            {? BDO.P
            || {? _ok
               || {? ~BDO.add(1)
                  || _txt:='Nie dodano badania lekarskiego: '+BDO.DTO$1;
                     _txt+=', dla pracownika: '+$BDO.P().IP+' '+P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+'.';
                     FUN.emsg(_txt);
                     _ok*=0
                  || BDO.memo_set(KART_DOD.OPIS,'ADNOT');
                     BDO.memo_put(,'ADNOT');

::                   tworzenie wpisu dla stanowiska BDS - z H na dzień daty orzeczenia
::                   BDO   Badanie   Wskazanie na badanie lekarskie   _BDO
::                   STN   Stanowisko   Wskazanie na stanowisko   _STN
::                   IDADD   ID   Identyfikator systemowy   STRING[31]

                     H.cntx_psh();
                     H.use('_hist');
                     H.index('_HISTKOD');
                     H.prefix(P.ref(),'Z');

                     {? BDO.DTO<P.DZA
                     ||
                     {? H.first()
                     || BDS.blank(1);
                        BDS.BDO:=BDO.ref();
                        BDS.STN:=H.ST;
                        BDS.add()
                     ?}
                     ||
                     {? (H.find_le(BDO.DTO) & (H.DO=date(0,0,0) | BDO.DTO<=H.DO))
                     || BDS.blank(1);
                        BDS.BDO:=BDO.ref();
                        BDS.STN:=H.ST;
                        BDS.add()
                     ?}
                     ?};
                     H.cntx_pop()

                  ?}
               ?}
             || _txt:='Nie dodano badania lekarskiego: '+BDO.DTO$1+', brak pracownika. Rekordu nie dodano.';
                FUN.emsg(_txt)
            ?};
            BDO.cntx_pop()

           ?};
           P.next()
         !}
      ?};

      KART_DOD.next()
   !}
?};
_cntxPop();

1


\absences_errors
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc
:: OPIS:
::   WE:
::   WY:
::  OLD: \absences_errors/qtesty.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(1,'PRAC','STRING[100]','Pracownik');

OSOBA.cntx_psh();
N.cntx_psh();
N.index('NIEOPRAC');
NW.cntx_psh();
NW.index('CHW');
P.cntx_psh();
P.index('PRACONAZ');
P.prefix(exec('ref_firma','ustawienia'),'P');

{? P.first()
|| {!
   |? N.prefix(P.ref());
_osoba:=P.OSOBA().NAZWISKO;
      {? N.last() & N.OD~1=2022
      || {!
         |? NW.prefix(N.ref());
            {? NW.first()
            || _chp:=NW.CHP;
               NW.cntx_psh();
               NW.index('CHP');
               NW.prefix(_chp);
               {? NW.size()>1
               || NW.last();
                  {!
                  |? _period:=(NW.CHW().OD~1)*12+(NW.CHW().OD~2);
                     {? NW.prev()
                     || {? NW.CHW().OD~1<2022
                        || {? _period-((NW.CHW().OD~1)*12+(NW.CHW().OD~2))>1
                           || _TAB.PRAC:='%1 %2'[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE];
debug;
                              _TAB.add()
                           ?};
                           0
                        || 1
                        ?}
                     ?}
                  !}
               ?};
               NW.cntx_pop()
            ?};
            N.prev() & N.OD~1=2022
         !}
      ?};
      P.next()
   !}
?};

P.cntx_pop();
NW.ndx_drop();
NW.cntx_pop();
N.cntx_pop();
OSOBA.cntx_pop();
exec('select','#table',_TAB);
~~



\spr_mr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JB [21.37]
:: OPIS:
::----------------------------------------------------------------------------------------------------------------------

::redagowana
{? N.NB().RN=32
||
   _nref:=N.ref();
   _jest_mac:=0;
   N.cntx_psh();
   N.index('NIEOBECN');
   N.prefix('N',P.ref());
   {? N.first()
   || {? N.seek(_nref,)
      ||
::       jeżeli poprzednie N to zas.mac 100% swiadczenia
         {!|?
           {? N.NB().RN=5 & N.PROC=100
           || _jest_mac:=1
           ?};
           N.prev() & ~_jest_mac
         !}
      ?}
   ?};
   N.cntx_pop();

   {? _jest_mac
   || N.cntx_psh();
      N.index('NIEOBECN');
      N.prefix('N',P.ref());
      {? N.first()
      || {? N.seek(_nref,)
         ||
      {!|?
        {? N.NB().RN=32
        || N.prev()
        || N.next();
::         pierwsza N o kodzie 32
           _tyg:=_dni:=0;
           {!|?
             {? N.NB().RN=32
             || _od:=N.OD;
                _do:=N.DO;
                _tyg+=(_do-_od+1)%7;
                _dni+=(_do-_od+1)%*7;
                {? _tyg<=6 & N.PROC<>100
                || msg('32- Urlop rodzicielski '+$N.OD+' - '+$N.DO+':\n\n'+
                       $_tyg+' tygodni, '+$_dni+' dni, '+$N.PROC+' % świadczenia','UWAGA')
                ?};
                {? _tyg>6 & N.PROC<>60
                ||  msg('32- Urlop rodzicielski '+$N.OD+' - '+$N.DO+':\n\n'+
                       $_tyg+' tygodni, '+$_dni+' dni, '+$N.PROC+' % świadczenia','UWAGA')
                ?}
             ?};
             N.next()
           !};
           0
        ?}
      !}
      ?}
      ?};
      N.cntx_pop()
   ?}
?}


\long_absences
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [22.26 NUCO]
:: OPIS: Ustalenie listy osób, które są na długich nieobecnościach lub kończy się umowa o pracę.
::   WE: _a
::   WY: _TAB [TABLE] - tabela z listą osób spełniających kryterium zestawienia.
::----------------------------------------------------------------------------------------------------------------------
_date:=date();
_period:=30;
_op:=obj_new(8);
_op[1]:='Zakończenie współpracy.';
_op[2]:='Urlop macierzyński.';
_op[3]:='Choroba 100%.';
_op[4]:='Świadczenie rehabilitacyjne.';
_op[5]:='Urlop rodzicielski.';
_op[6]:='Urlop ojcowski.';
_op[7]:='Świadczenie wypadkowe';
_op[8]:='Służba wojskowa';

:: Pracownicy zwolnieni z umową na czas nieokreślony oraz z długimi nieobecnościami.
_TAB:=sql('
/*             koniec współpracy */
   select
      OSOBA.PIERWSZE as IMIE, OSOBA.NAZWISKO as NAZWISKO, P.T as ID, max(H_UM.DO) as DT, \':_c\' as OPIS
   from P
      join OSOBA using (P.OSOBA,OSOBA.reference)
      join H_UM using (H_UM.P,P.reference)
      join F_ZATR using (P.F_ZATR,F_ZATR.reference)
      join RU using (H_UM.RU,RU.reference)
   where
      F_ZATR.KOD=\'P\'
         and
      H_UM.DO>to_date(:_a)
         and
      ((RU.K=\'C\' and H_UM.DO is not null) or (RU.K<>\'C\' and H_UM.DO<to_date(:_b)))
   group by
      OSOBA.PIERWSZE,OSOBA.NAZWISKO,P.T,\':_c\'
/*             urlop macierzyński */
   union
   select
      OSOBA.PIERWSZE as IMIE, OSOBA.NAZWISKO as NAZWISKO, P.T as ID, max(N.DO) as DT, \':_d\' as OPIS
   from N
      join P using (N.P,P.reference)
      join OSOBA using (P.OSOBA,OSOBA.reference)
      join F_ZATR using (P.F_ZATR,F_ZATR.reference)
      join R using (N.NB,R.reference)
   where
      F_ZATR.KOD=\'P\' and P.ZA=\'T\' and N.DO>to_date(:_a) and R.RN=5
   group by
      OSOBA.PIERWSZE,OSOBA.NAZWISKO,P.T,\':_d\'
/*             choroba 100% */
   union
   select
      OSOBA.PIERWSZE as IMIE, OSOBA.NAZWISKO as NAZWISKO, P.T as ID, max(N.DO) as DT, \':_e\' as OPIS
   from N
      join P using (N.P,P.reference)
      join OSOBA using (P.OSOBA,OSOBA.reference)
      join F_ZATR using (P.F_ZATR,F_ZATR.reference)
      join R using (N.NB,R.reference)
   where
      F_ZATR.KOD=\'P\' and P.ZA=\'T\' and N.DO>to_date(:_a) and R.RN in (7,9)
   group by
      OSOBA.PIERWSZE,OSOBA.NAZWISKO,P.T,\':_e\'
/*             świadczenie rehabilitacyjne */
   union
   select
      OSOBA.PIERWSZE as IMIE, OSOBA.NAZWISKO as NAZWISKO, P.T as ID, max(N.DO) as DT, \':_f\' as OPIS
   from N
      join P using (N.P,P.reference)
      join OSOBA using (P.OSOBA,OSOBA.reference)
      join F_ZATR using (P.F_ZATR,F_ZATR.reference)
      join R using (N.NB,R.reference)
   where
      F_ZATR.KOD=\'P\' and P.ZA=\'T\' and N.DO>to_date(:_a) and R.RN in (19,20,23)
   group by
      OSOBA.PIERWSZE,OSOBA.NAZWISKO,P.T,\':_f\'
/*             Urlop rodzicielski */
   union
   select
      OSOBA.PIERWSZE as IMIE, OSOBA.NAZWISKO as NAZWISKO, P.T as ID, max(N.DO) as DT, \':_g\' as OPIS
   from N
      join P using (N.P,P.reference)
      join OSOBA using (P.OSOBA,OSOBA.reference)
      join F_ZATR using (P.F_ZATR,F_ZATR.reference)
      join R using (N.NB,R.reference)
   where
      F_ZATR.KOD=\'P\' and P.ZA=\'T\' and N.DO>to_date(:_a) and R.RN=32
   group by
      OSOBA.PIERWSZE,OSOBA.NAZWISKO,P.T,\':_g\'
/*             Urlop ojcowski */
   union
   select
      OSOBA.PIERWSZE as IMIE, OSOBA.NAZWISKO as NAZWISKO, P.T as ID, max(N.DO) as DT, \':_h\' as OPIS
   from N
      join P using (N.P,P.reference)
      join OSOBA using (P.OSOBA,OSOBA.reference)
      join F_ZATR using (P.F_ZATR,F_ZATR.reference)
      join R using (N.NB,R.reference)
   where
      F_ZATR.KOD=\'P\' and P.ZA=\'T\' and N.DO>to_date(:_a) and R.RN=28
   group by
      OSOBA.PIERWSZE,OSOBA.NAZWISKO,P.T,\':_h\'
/*             Świadczenie wypadkowe */
   union
   select
      OSOBA.PIERWSZE as IMIE, OSOBA.NAZWISKO as NAZWISKO, P.T as ID, max(N.DO) as DT, \':_i\' as OPIS
   from N
      join P using (N.P,P.reference)
      join OSOBA using (P.OSOBA,OSOBA.reference)
      join F_ZATR using (P.F_ZATR,F_ZATR.reference)
      join R using (N.NB,R.reference)
   where
      F_ZATR.KOD=\'P\' and P.ZA=\'T\' and N.DO>to_date(:_a) and R.RN=17
   group by
      OSOBA.PIERWSZE,OSOBA.NAZWISKO,P.T,\':_i\'
/*             Służba wojskowa */
   union
   select
      OSOBA.PIERWSZE as IMIE, OSOBA.NAZWISKO as NAZWISKO, P.T as ID, max(N.DO) as DT, \':_j\' as OPIS
   from N
      join P using (N.P,P.reference)
      join OSOBA using (P.OSOBA,OSOBA.reference)
      join F_ZATR using (P.F_ZATR,F_ZATR.reference)
      join R using (N.NB,R.reference)
   where
      F_ZATR.KOD=\'P\' and P.ZA=\'T\' and N.DO>to_date(:_a) and R.RN in (15,7068)
   group by
      OSOBA.PIERWSZE,OSOBA.NAZWISKO,P.T,\':_j\'
   ',_date,_date+_period,_op[1],_op[2],_op[3],_op[4],_op[5],_op[6],_op[7],_op[8]
);

{? _TAB.first()
|| _EMAIL:=tab_tmp(,'ODB','STRING[100]','Odbiorca e-mail');
   _EMAIL.erase();

:: Ustalenie adresów e-mail do powiadomień - rola "Adm-powiadomienia".
   _role:=spli_str('Adm-powiadomienia',',');
   B_ROLE.cntx_psh();
   B_ROLE.prefix();
   B_USRROL.cntx_psh();
   B_USRROL.index('UNIK');
   USERS.cntx_psh();
   {! _ii:=1 .. obj_len(_role)
   |! {? B_ROLE.seek(exec('FindInSet','#table','B_ROLE','UNIK',_role[_ii],REF.FIRMA,,1))
      || B_USRROL.prefix(REF.FIRMA,B_ROLE.ref());
         {? B_USRROL.first()
         || {!
            |? _email:=B_USRROL.USERS().EMAIL;
               {? +_email
               || _EMAIL.ODB:=_email;
                  _EMAIL.add(1)
               ?};
               B_USRROL.next()
            !}
         ?}
      ?}
   !};
   B_ROLE.cntx_pop();
   B_USRROL.cntx_pop();
   USERS.cntx_pop();

:: Generowanie powiadomień e-mail.
   {? _EMAIL.first()
   || {!
      |? {? var_pres('_args')>0 || obj_del(_args) ?};
         _args:=exec('add_email_a','#mailbox');
         _args.RCV:=_EMAIL.ODB;
         _args.SUB:='Lista pracowników z kończącymi się umowami lub długimi nieobecnościami.';
         _args.BODYT:=exec('body_txt','qkali',_TAB);
         _args.BODYH:=exec('body_html','qkali',_TAB);
         exec('add_email','#mailbox',_args);
         _EMAIL.next()
      !}
   ?}
?};
1


\body_txt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO 22.26]
:: OPIS: Treść powiadomienia w formacie tekstowym.
::   WE: _a [TABLE] - tabela z komunikatami
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_lp:=0;
_BODY:=tab_tmp(1,
   'LP','INTEGER','Lp',
   'TEKST','STRING[255]','Tekst'
);
_LP:=0;
_add:=
   "  _LP:=_b;
      _BODY:=_c;
      _LP+=1;
      _BODY.LP:=_LP;
      _BODY.TEKST:=_a;
      _BODY.add()
   ";

_TAB.first();
_add('%1 %2 %3 %4 %5'
      [form('Lp',5),form('Nazwisko i imię',40),form('Identyfikator',15),form('Data zakończenia',20),form('Uwagi',30)],
   _LP,_BODY
);
{!
|? _lp+=1;
   _add('%1 %2 %3 %4 %5'
      [form(_lp,5,0),form('%1 %2'[_TAB.NAZWISKO,_TAB.IMIE],40),form(_TAB.ID,15),form(_TAB.DT$1,20),form(_TAB.OPIS,30)],
      _LP,_BODY
   );
   _TAB.next()
!};
_BODY


\body_html
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO 22.26]
:: OPIS: Treść powiadomienia w formacie html.
::   WE: _a [TABLE] - tabela z komunikatami
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_lp:=0;
_BODY:=tab_tmp(1,
      'LP','INTEGER','Lp',
      'TEKST','STRING[255]','Tekst'
   );
   _LP:=0;
   _add:=
      "  _LP:=_b;
         _BODY:=_c;
         _LP+=1;
         _BODY.LP:=_LP;
         _BODY.TEKST:=_a;
         _BODY.add()
      ";

_TAB.first();
_add('</h4>',_LP,_BODY);
_add('<style>.r{ text-align:right; white-space: nowrap;}</style>',_LP,_BODY);
_add('<table width="100%" border="1" cellspacing="0" cellpading="0" style="empty-cells: show;">',_LP,_BODY);
_add('
   <tr class="head">
      <td>Lp</td>
      <td>Nazwisko i imię</td>
      <td>Identyfikator</td>
      <td>Data zakończenia</td>
      <td>Uwagi</td>',
   _LP,_BODY
);
{!
|? _lp+=1;
   _add('
      <tr class="head">
         <td>%1</td>
         <td>%2</td>
         <td>%3</td>
         <td>%4</td>
         <td>%5</td>'
            [$_lp,'%1 %2'[_TAB.NAZWISKO,_TAB.IMIE],_TAB.ID,_TAB.DT$1,_TAB.OPIS],
      _LP,
      _BODY
   );
   _TAB.next()
!};
_add('</table>',_LP,_BODY);
_BODY


\plf_nadg_kor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Rozliczenie godzin - korekta
::   WE: _a - miesiąc korygowany
::       _b - w roku
::       _c - nominalna liczba godzin
::----------------------------------------------------------------------------------------------------------------------
{? _<3 || return(~~) ?};
_rok:=_a;
_mc:=_b;
_godz:=_godz_nr:=_c;
debug;
_fun_LK:="{! _ind:=_a.._b |! FUNKCJE.LK(_ind,,,1) !}";
_fun_LK(1120,1122);
_fun_LK(2120,2122);
_fun_LK(3120,3122);

:: Wartość wypłaconego wynagrodzenia za godziny nadliczbowe.
_val:=FUNKCJE.L(120,,0); 
{? _val
|| FUNKCJE.LK(2120,,_val)
?};
:: Wartość wypłaconego dodatku za godziny nadliczbowe.
_val:=FUNKCJE.L(121,,0); 
{? _val
|| FUNKCJE.LK(2121,,_val)
?};
:: Wartość wypłaconego dodatku za godziny nocne.
_val:=FUNKCJE.L(122,,0); 
{? _val
|| FUNKCJE.LK(2122,,_val)
?};

G.cntx_psh();
G.use('godz'+$O.R);
G.index('MSCDKW');
G.prefix(P.ref,O.M,'G');
H.cntx_psh;
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');

{? G.first() & H.last()
|| VAR_DEL.delete('sta_pom');
   sta_pom:=obj_new(4);
   {!
   |? {? _godz>0 & H.find_le(G.D)
      || _kod:=G.K().RN;
         _hsx:=exec('hsx','lista_licz',G.D);
         _S1:=_hsx.S1;
:: NUCO - premia regulaminowa
         _S1+=(_hsx.S1*FUNKCJE.S(75)/100)$2;
         _S2:=_hsx.S2;
         _S3:=_hsx.S3;
         _S4:=_hsx.S4;
         obj_del(_hsx);
         &_hsx;

:: Godziny nadliczbowe 50% i 100%
         {? _kod=55 | _kod=56 
         || _val:=((_S1+_S2+_S3)/_godz)$2*G.G$2;
            _val1:=(_S1/_godz)$2*G.G$2;
            {?_val
            ||
:: Wyliczenie stawki minimalnej dla jednej godziny
               _minimum:=exec('minkraj_komornik','lista_licz',G.D,,1,G.D);
:: Wyrownanie do minimalnego zatrudnienia
               _minimum:=_minimum*G.G$2;
               {? _val<_minimum
               || _val:=_minimum
               ?}
            ?};
            _val1:={? _kod=55|| 0.5 || 1?}*_val1$2;

            _val1+=FUNKCJE.LK(3121,G.KK);
            FUNKCJE.LK(3121,G.KK,_val1);

            _val+=FUNKCJE.LK(3120,G.KK);
            FUNKCJE.LK(3120,G.KK,_val)
         ?};

:: Godziny nocne
         {? _kod=57
         || _nk:=exec('ust_nk','lista_licz',G.D,'NK');
            _pdgn:=20;
            _pr_noc:=exec('ust_nk','lista_licz',G.D,'PDGN');
            {? _pr_noc & _pr_noc>_pdgn
            || _pdgn:=_pr_noc
            ?};
            _pdgn:=_pdgn/100;
:: ustawienie kalendarza z listy plac
            exec('kal_list','personel');
:: _godz_nr - poprawna wartość nomilnej liczby godzin roboczych w miesiącu korygowanym
            _val:=((_nk/_godz_nr)$2*_pdgn$2)*G.G$2;
            _val+=FUNKCJE.LK(3122,G.KK);
            FUNKCJE.LK(3122,G.KK,_val)
         ?}
      ?};
      G.next()
   !};
   VAR_DEL.delete('sta_pom')
?};

:: Wartość koreky wynagrodzenia za godziny nadliczbowe.
_obl:=FUNKCJE.L(3120);
_wypl:=FUNKCJE.L(2120);
{? _obl>_wypl
|| FUNKCJE.LK(1120,,_obl-_wypl) 
?};
:: Wartość koreky dodatku za godziny nadliczbowe.
_obl:=FUNKCJE.L(3121);
_wypl:=FUNKCJE.L(2121);
{? _obl>_wypl
|| FUNKCJE.LK(1121,,_obl-_wypl) 
?};
:: Wartość koreky dodatku za godziny nocne.
_obl:=FUNKCJE.L(3122);
_wypl:=FUNKCJE.L(2122);
{? _obl>_wypl
|| FUNKCJE.LK(1122,,_obl-_wypl) 
?};

H.cntx_pop();
G.cntx_pop();
~~