:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: qlmg.fml
:: Utworzony: 07.05.2021
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Formuły klienckie z obszaru LMG
::======================================================================================================================


\infdod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [12.30]
:: OPIS: Odczytuje dane z informacji dodatkowycj
::   WE: _a - akronim tabeli
::       _b - DK.refsql z tabeli do odczytania,
::       _c - poszukiwane dane w tytule (np '% RWZ')
::   WY: _wyn - zwracana wartość FAKSO.O
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';

_fakso:=sql('select * from @FAKSO where FAKSO.'+_a+'=\''+_b+'\' and FAKSO.T like \''+_c+'\'');

{? _fakso.first()
|| _wyn:=_fakso.O
|| exec('FindAndGet','#table',DK,_b,"exec('dodaj_infd','qlmg',DK.ref())",'')
?};

_wyn


\dodaj_infd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO MOM]
:: OPIS: Dodaje informacje dodatkowe dla wybranego typu dokumentu (nie aktualizuje, nie nadpisuje już istniejących
::       uzupełnia jeśl barkuje
::   WE: _a - ref dk dla kturego należy uzupełnić informacje
::   WY:
::  OLD: \dodaj_infd/qmagkop.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:=_a;
_ind:='TYM';
_pol:='DK.N().TYP';
_ref:='DK';
_typ:='P';

ND.cntx_psh(); ND.use('nagdo'+((8+($_a))+3)); ND.prefix();
DK.cntx_psh(); DK.use('dokma'+((8+($_a))+3)); DK.prefix();

_maska:='fakto'+(DK.name+3);

:: Informacje dodatkowe - dotychczasowe
FAKSO.cntx_psh();
FAKSO.use(_maska);
FAKSO.index(_ref);
FAKSO.prefix(_fld);
FAKSO.first();

POM.TYPYDOK:=null();
FAKSO.cntx_psh();
FAKSO.use('faktodef');
_ok:=0;
_faksos:=';';
FAKSO.index(_ind);
FAKSO.prefix(($_pol)());
:: Czy są definicje dla tego typu dokumentu - jeśli tak - pentla i uzupełnienie informacji o zdefiniowane
:: Nie zmieniamy już istniejących
{? FAKSO.first()
|| _czy_def:=1;
   {!
   |? {? _typ=FAKSO.MW
      || _faksos+=$FAKSO.LP+';';
         _tytul:=FAKSO.T;
         _opis:=FAKSO.O;
         _or:=FAKSO.OR;
         _prn:=FAKSO.PRN;
         _gd:=FAKSO.GD;
         _log:=FAKSO.LOG;
         FAKSO.cntx_psh();
         FAKSO.use(_maska);
         _ndx_tmp:=FAKSO.ndx_tmp( ,,'DK',,,'T',,,'T',,);
         FAKSO.index(_ndx_tmp);
         FAKSO.clear();
         FAKSO.prefix(_fld,_tytul,_tytul);
         {? ~FAKSO.size()
         || _war:=($_log)();
            {? type_of(_war)<>1 || _war:=0 ?};
            {? _log='' | _war
            ||($('FAKSO.'+_ref))():=_fld;
              {? FAKSO.OR='F' || FAKSO.O:='' ?};
                 FAKSO.PRN:=_prn;
                 FAKSO.GD:=_gd;
                 FAKSO.OR:=_or;
                 FAKSO.TYPYDOK:=FAKSO.TYPYSP:=FAKSO.TYPYZAM:=null();
                 _ok+=FAKSO.add(1)
             ?}
         ?};
         FAKSO.ndx_drop(_ndx_tmp); &_ndx_tmp;
         FAKSO.cntx_pop();
         FAKSO.next()
      || FAKSO.next()
      ?}
   !}
?};

FAKSO.cntx_pop();
DK.cntx_pop();
ND.cntx_pop();
''


\pop_zb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [NUCO]
:: OPIS: Funkcja do obsługi akcji Popraw w wydruku "A1. Etykiety do dokumentu".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? tabp.sel_size=0
|| {? tabp.edit()
   || {? tabp.IL>=0 || tabp.put() ?}
   ?}
|| undefine();
   define('IL',0,'Dla zaznaczonych rekordów');
   {? def_edit(,'Podaj ilość zamawianą')
   || tabp.cntx_psh();
      {? DEFINE.IL>=0
      || {? tabp.first()
         || {!
            |? {? tabp.sel_mark()=1
               || tabp.IL:=DEFINE.IL;
                  tabp.put();
                  tabp.sel_del()
               ?};
               tabp.next ()
            !}
         ?}
      ?};
      tabp.cntx_pop()
   ?}
?}


\stany_pd_tw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO]
:: OPIS: Tworzy tabelę do zapytania SQL 30. Stany magazynowe według atrybutów dostawy/terminu ważności (rez.,dost.)
::   WE: _a - MG.SYM
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('
   select
   0 as LP,
   M.KTM as KTM,
   M.N as NAZWA,
   JM.KOD as JM,
   SC.S as STAN,
   (select sum(REZ.ILR) from REZ where REZ.M=SC.M and REZ.SC=SC.SRDK ) as REZ,
   SC.WAR02 as PARTIA,
   SC.WAR01 as KJX,
   SC.TW as TW
   from
     @SC
     join M using(SC.M,M.REFERENCE)
     join JM using(M.J,JM.REFERENCE)
     join MG using(SC.MAG,MG.REFERENCE)
   where SC.S<>0 AND MG.SYM=\':_a\'
   order by 2',
   _a
)


\fir_0013
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [NUCO]
:: OPIS: Przeniesienie zapytania sql z pliku fir_0013.sql z Xpertis.
::       Zapytania wykorzystane w parametrach zapytania magazynowego "13z. ZUŻYCIE w okresie".
::   WE: _a [STRING] - wybrany magazyn.
::       _b [DATE] - data do.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('
   select
      0 as LP,
      M.KTM as Indeks,
      M.N as Nazwa,
      M.REFERENCE as Mat_Ref,
      JM.KOD as JedM,
      MG.SYM Magazyn,
      max(case when TYPYDOK.DN<>\'T\' and TYPYDOK.DK=\'N\' then ND.D else cast(null as DATE_TYPE) end) as OST_OPER,
      sum(DK.IL) Ilosc,
      sum(DK.WAR) Wartosc
   from  @DK
      join @ND using (DK.N, ND.REFERENCE)
      join MG using (ND.MAG, MG.REFERENCE)
      join M using (DK.M, M.REFERENCE)
      join JM using (M.J, JM.REFERENCE)
      join TYPYDOK using (ND.TYP,TYPYDOK.REFERENCE)
      left join MGR using (M.MGR, MGR.REFERENCE)
   where
      M.RODZ=\'T\' and ND.Z=\'T\' and DK.PLUS=\'T\' and ND.D<to_date(:_b) and MG.SYM like \':_a%\'
   group by
      M.KTM,M.N,M.REFERENCE,JM.KOD,MG.SYM
UNION ALL
   select
      0 as LP,
      M.KTM as Indeks,
      M.N as Nazwa,
      M.REFERENCE as Mat_Ref,
      JM.KOD as JedM,
      MG.SYM Magazyn,
      max(case when TYPYDOK.DN<>\'T\' and TYPYDOK.DK=\'N\' then ND.D else cast(null as DATE_TYPE) end) as OST_OPER,
      sum(-DK.IL) Ilosc,
      sum(-DK.WAR) Wartosc
   from  @DK
      join @ND using (DK.N, ND.REFERENCE)
      join MG using (ND.MAG, MG.REFERENCE)
      join M using (DK.M, M.REFERENCE)
      join JM using (M.J, JM.REFERENCE)
      join TYPYDOK using (ND.TYP,TYPYDOK.REFERENCE)
      left join MGR using (M.MGR, MGR.REFERENCE)
   where
      M.RODZ=\'T\' and ND.Z=\'T\' and DK.PLUS=\'N\' and ND.D<to_date(:_b) and MG.SYM like \':_a%\'
   group by
      M.KTM,M.N,M.REFERENCE,JM.KOD,MG.SYM
   order by 2',
   _a,_b
)


\sel_pdc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Utworzenie tabeli tymczasowej dla listu przewozowego i jej wyświetlenie.
::----------------------------------------------------------------------------------------------------------------------
{? ND.TYP().P='N' | ND.TYP().Z='T'
|| _par:=exec('tab_pdc','qlmg');
   params_set('par',_par);
   _QPDC:=_par.QPDC;
   _QPDC.index(_par.qpdc_nlk);
   _QPDC.prefix($ND.ref());
   {? ~_QPDC.first() & ND.Z='N'
   || {? FUN.ask('%1\n%2'['Brak pozycji.'@,'Generować automatycznie ?'@],'',1)
      || exec('genpdc','qlmg')
      ?}
   ?};
   _QPDC.first();
   _QPDC.select()
|| FUN.emsg('Funkcja dotyczy tylko dokumentów rozchodowych zewnętrznych.'@)
?};
~~


\tab_pdc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: utworzenie tabeli tymczasowej dla listu przewozowego.
::----------------------------------------------------------------------------------------------------------------------
:: Tabela.
_QPDC:=tab_tmp(1,
   'ND','STRING[16]','Dokument magazynowy',
   'LP','INTEGER','Lp',
   'R','STRING[1]','Rodzaj',
   'KOD','STRING[16]','Kod towarowy',
   'KTM','STRING[50]','KTM',
   'N','STRING[100]','Nazwa',
   'PKGS','REAL','Ilość opakowań',
   'QPCS','REAL','Ilość w opakowaniu',
   'TPCS','REAL','Ilość całkowita',
   'KGS','REAL','Waga netto',
   'GKGS','REAL','Waga brutto',
   'SER','STRING[16]','Partia',
   'QSER_TXT','STRING[40]','Partia',
   'REFND','STRING[16]','Ref zrodlowy dolaczanego rekordu',
   'DLUG','REAL','Dlugość',
   'SZER','REAL','Szerokość',
   'WYS','REAL','Wysokość',
   'UWPAL','STRING[255]','Zawartość',
   'TW','STRING[10]','Termin ważności'
);

:: Formuły do pola.
_be:="{? cur_tab().R='P' || 1 || 0 ?}";
_bd:="{? cur_tab().R='P' || '' || exec('findfnv','#color') ?}";
_QPDC.fld_fml('KTM','F3',"exec('f3_kod','qlmg',params_get().par.QPDC)");
_QPDC.fld_fml('KTM','AFTER_EDIT',"exec('ae_kod','qlmg',params_get().par.QPDC)");
_QPDC.fld_fml('R','AFTER_EDIT',"win_disp()");
_QPDC.fld_fml('DLUG','BEFORE_EDIT',_be);
_QPDC.fld_fml('SZER','BEFORE_EDIT',_be);
_QPDC.fld_fml('WYS','BEFORE_EDIT',_be);
_QPDC.fld_fml('UWPAL','BEFORE_EDIT',_be);
_QPDC.fld_fml('DLUG','BEFORE_DISPLAY',_bd);
_QPDC.fld_fml('SZER','BEFORE_DISPLAY',_bd);
_QPDC.fld_fml('WYS','BEFORE_DISPLAY',_bd);
_QPDC.fld_fml('UWPAL','BEFORE_DISPLAY',_bd);
:: Indeksy.
_qpdc_nlk:=_QPDC.ndx_tmp('',,'ND',,,'LP',,,'KOD',,);
_qpdc_nk:=_QPDC.ndx_tmp('',,'ND',,,'KOD',,);

:: Okno wertowania.
_qpdcwer:=_QPDC.mk_sel('List przewozowy'@,,,'#qpdcwer',,,,,'U');
_QPDC.win_fld(_qpdcwer,,'LP',,,5,,1);
_QPDC.win_fld(_qpdcwer,,'KTM',,,20,,1);
_QPDC.win_fld(_qpdcwer,,'N',,,20,,1);
_QPDC.win_fld(_qpdcwer,,'PKGS',,,10,2,1);
_QPDC.win_fld(_qpdcwer,,'QPCS',,,10,2,1);
_QPDC.win_fld(_qpdcwer,,'TPCS',,,10,2,1);
_QPDC.win_fld(_qpdcwer,,'KGS',,,10,2,1);
_QPDC.win_fld(_qpdcwer,,'GKGS',,,10,2,1);
_QPDC.win_fld(_qpdcwer,,'QSER_TXT',,,10,,1);
_QPDC.win_fld(_qpdcwer,,'TW',,,10,,1);
:: Akcje w oknie - dziedzina pusta.
_QPDC.win_act(_qpdcwer,1,'Formuła','Dołącz'@,,,"params_set(params_get()); exec('add_qpdc','qlmg')");
_QPDC.win_act(_qpdcwer,1,'Formuła','Generuj'@,,,"params_set(params_get()); exec('genpdc','qlmg')",,1);
_QPDC.win_act(_qpdcwer,1,'Formuła','Generuj z &TW'@,,'Generowanie pozycji z uwzględnieniem terminu ważności'@,
   "params_set(params_get()); exec('genpdc','qlmg',1)"
);
_QPDC.win_act(_qpdcwer,1,'Formuła','generuj z Innego'@,,,"params_set(params_get()); exec('genpdc1','qlmg')");
:: Akcje w oknie - dziedzina niepusta.
_QPDC.win_act(_qpdcwer,0,'Formuła','Dołącz'@,,,"params_set(params_get()); exec('add_qpdc','qlmg')");
_QPDC.win_act(_qpdcwer,0,'Formuła','Popraw'@,,,"params_set(params_get()); exec('edit_qpdc','qlmg')");
_QPDC.win_act(_qpdcwer,0,'Formuła','Usuń'@,,,"params_set(params_get()); exec('del_qpdc','qlmg')");
_QPDC.win_act(_qpdcwer,0,'Formuła','Generuj'@,,,"params_set(params_get()); exec('genpdc','qlmg')",,1);
_QPDC.win_act(_qpdcwer,0,'Formuła','Generuj z &TW'@,,'Generowanie pozycji z uwzględnieniem terminu ważności'@,
   "params_set(params_get()); exec('genpdc','qlmg',1)"
);
_QPDC.win_act(_qpdcwer,0,'Formuła','generuj z Innego'@,,,"params_set(params_get()); exec('genpdc1','qlmg')");
_QPDC.win_act(_qpdcwer,0,'Menu','drukuJ'@);
_QPDC.win_act(_qpdcwer,0,'Formuła','drukuJ'@,'drukuJ'@,,"params_set(params_get()); rep_exec('lmg_listp*')");
_QPDC.win_act(_qpdcwer,0,'Formuła','drukuj PDF'@,'drukuJ'@,,"params_set(params_get()); exec('druk_pdf','qlmg')");
_QPDC.win_act(_qpdcwer,0,'Formuła','Lista WZ'@,,,"params_set(params_get()); exec('lista_wz','qlmg')");
_QPDC.win_sel(_qpdcwer);

:: Okno edycji.
_qpdcedit:=_QPDC.mk_edit('Pozycja listu przewozowego'@,,'#lpqpdcedit1');
_QPDC.win_efld(_qpdcedit,,'LP',,,5,,1);
_QPDC.win_efld(_qpdcedit,,'KTM');
_QPDC.win_efld(_qpdcedit,,'N',,,,,1);
_QPDC.win_efld(_qpdcedit,,'R',,,,,,,,,'radio-buttons',,'Normalne'@,"'N'",'Paleta'@,"'P'");
_QPDC.win_efld(_qpdcedit,,'PKGS',,,10,0);
_QPDC.win_efld(_qpdcedit,,'QPCS',,,10,0);
_QPDC.win_efld(_qpdcedit,,'TPCS',,,10,0);
_QPDC.win_efld(_qpdcedit,,'KGS',,,10,2);
_QPDC.win_efld(_qpdcedit,,'GKGS',,,10,2);
_QPDC.win_efld(_qpdcedit,,'QSER_TXT',,,10);
_QPDC.win_esep(_qpdcedit,'Wymiary i zawartość palety'@);
_QPDC.win_efld(_qpdcedit,,'DLUG',,,10);
_QPDC.win_efld(_qpdcedit,,'SZER',,,10);
_QPDC.win_efld(_qpdcedit,,'WYS',,,10);
_QPDC.win_efld(_qpdcedit,,'UWPAL',,,100);
exec('ok_esc','#window',_QPDC,_qpdcedit);
_QPDC.win_edit(_qpdcedit);

::
_QPDCP:=tab_tmp(2,
   'QPDC','STRING[16]','',
   'SYM','STRING[20]',''
);
_qpdcp:=_QPDCP.index('?');
_qpdcpwer:=_QPDCP.mk_sel('Lista WZ',,,'#lpd1',,,,,'U');
_QPDCP.win_fld(_qpdcpwer,,'SYM',,,20);
_QPDCP.win_sel(_qpdcpwer);

:: Obiekt do obsługi tabel z informacjami do listu przewozowego.
_par:=obj_new('QPDC','qpdc_nlk','qpdc_nk','qpdcwer','qpdcedit','QPDCP','qpdcp','qpdcpwer','ask_tw');
_par.QPDC:=_QPDC;
_par.qpdc_nlk:=_qpdc_nlk;
_par.qpdc_nk:=_qpdc_nk;
_par.qpdcwer:=_qpdcwer;
_par.qpdcedit:=_qpdcedit;
_par.QPDCP:=_QPDCP;
_par.qpdcp:=_qpdcp;
_par.qpdcpwer:=_qpdcpwer;
_par.ask_tw:=0;
_par


\f3_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: F3 dla pola _QPDC.KTM.
::----------------------------------------------------------------------------------------------------------------------
_QPDC:=_a;
_ktm:=fld();
M.cntx_psh();
_wer:=M.win_sel('?');
M.win_sel('SEL');
M.index('MATKTM');
M.prefix();
M.find_key(_ktm,);
{? M.select(,1,10)
|| fld(M.KTM);
   _QPDC.KOD:=$M.ref();
   _QPDC.N:=M.N
?};
M.win_sel(_wer);
M.cntx_pop();
1


\ae_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: po edycji pola _QPDC.KTM.
::----------------------------------------------------------------------------------------------------------------------
_QPDC:=_a;
_ktm:=fld();
_ret:=0;
M.cntx_psh();
M.win_sel('SEL');
M.index('MATKTM');
M.prefix();
M.prefix(_ktm,);
{? M.first()
|| fld(M.KTM);
   _QPDC.KTM:=M.KTM;
   _QPDC.KOD:=$M.ref();
   _QPDC.N:=M.N;
   _ret:=1
|| FUN.info('Błędy KTM: %1'@[fld()])
?};
M.cntx_pop();
_ret


\genpdc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Generowanie pozycji listu przewozowego.
::   WE: [_a] - generowanie pozycji listu przewozowego z uwzględnieniem terminu ważności.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_par:=params_get().par;
{? var_pres('_a')=type_of(0)
|| _par.ask_tw:=_a
|| _par.ask_tw:=0
?};
_QPDC:=_par.QPDC;
_QPDCP:=_par.QPDCP;

:: Kasowanie zawartości tabel do obsługi listu przewozowego.
_QPDC.index(_par.qpdc_nk);
_QPDC.prefix($ND.ref());
{? _QPDC.first
|| {? FUN.ask('%1\n%2'
      ['Funkcja powoduje usuniecie i ponowne naliczenie pozycji listu przewowowego.'@,'Kontynuować?'@],,1
      )
   || _QPDCP.index(_par.qpdcp);
      {!
      |? _QPDCP.prefix($_QPDC.ref());
         {? _QPDCP.first()
         || {! |? _QPDCP.del() !}
         ?};
         _QPDC.del()
      !}
   ?}
?};

:: Generowanie pozycji listu przewozowego z pozycji dokumentu magazynowego.
DK.cntx_psh();
DK.index('DOKMAG');
DK.prefix(ND.ref());
{? DK.first()
|| {!
   |? _partia:=
         {? DK.DK_C<>null()
         || {? DK.DK_C().WAR02=''
            || DK.DK_C().SYM
            || DK.DK_C().WAR02
            ?}
         || ''
         ?};
      {? _par.ask_tw
      || _tw:=DK.TW
      || _tw:=''
      ?};
      _il:=exec('iloscwz','qlmg',ND.ref(),DK.M,DK.P,_partia,_tw);
      {? _il<>-1
      || _QPDC.prefix($ND.ref(),$DK.M);
         {? _QPDC.last() & _QPDC.QSER_TXT=_partia & {? _par.ask_tw || _QPDC.TW=_tw$1 || 1 ?}
         || _il+=_QPDC.TPCS;
            _pom:=exec('il_opak','qlmg',DK.M,_il);
            _opak:=_pom.wynik;
            _reszta:=_pom.reszta;
            _wn:=_pom.wn;
            {? _opak<>0
            || _QPDC.PKGS:={? _il-_reszta>0 || ((_il-_reszta)/_opak) || _rest:=0; 1 ?};
               _QPDC.QPCS:=_opak;
               _QPDC.TPCS:=_QPDC.QPCS*((_il-_reszta)/_opak);
               _QPDC.KGS:=(_QPDC.TPCS*DK.M().WN)$2;
               _QPDC.GKGS:=(_QPDC.TPCS*DK.M().WN+_QPDC.PKGS*_wn)$2;
               _QPDC.QSER_TXT:=_partia;
               {? _QPDC.put()
               || exec('dodpow','qlmg',$_QPDC.ref(),ND.SYM)
               ?}
            || FUN.emsg('Brak infomacji o opakowaniu w pozycji: %1 %2'@[form(DK.P),DK.M().KTM])
            ?}
         || _QPDC.blank();
            _pom:=exec('il_opak','qlmg',DK.M,_il);
            _opak:=_pom.wynik;
            _reszta:=_pom.reszta;
            _wn:=_pom.wn;
            {? _opak<>0
            || _QPDC.blank();
               _QPDC.ND:=$ND.ref();
               _QPDC.REFND:=$ND.ref();
               _QPDC.R:='N';
               _QPDC.LP:=exec('bllppdc','qlmg');
               _QPDC.KOD:=$DK.M;
               _QPDC.KTM:=DK.M().KTM;
               _QPDC.N:=DK.M().N;
               _QPDC.PKGS:={? _il-_reszta>0 || ((_il-_reszta)/_opak) || _reszta:=0; 1 ?};
               _QPDC.QPCS:=_opak;
               _QPDC.TPCS:=_QPDC.QPCS*((_il-_reszta)/_opak);
               _QPDC.KGS:=(_QPDC.TPCS*DK.M().WN)$2;
               _QPDC.GKGS:=(_QPDC.TPCS*DK.M().WN+_QPDC.PKGS*_wn)$2;
               _QPDC.QSER_TXT:=_partia;
               _QPDC.TW:={? ~_par.ask_tw || '' |? _tw=date(0,0,0) || 'Brak' || _tw$1 ?};
               {? _QPDC.add()
               || exec('dodpow','qlmg',$_QPDC.ref(),ND.SYM)
               ?}
            || FUN.emsg('Brak infomacji o opakowaniu w pozycji: %1 %2'@[form(DK.P),DK.M().KTM])
            ?}
         ?};
         {? _reszta
         || _QPDC.blank();
            _QPDC.ND:=$ND.ref();
            _QPDC.R:='N';
            _QPDC.LP:=exec('bllppdc','qlmg');
            _QPDC.KOD:=$DK.M;
            _QPDC.KTM:=DK.M().KTM;
            _QPDC.N:=DK.M().N;
            _QPDC.PKGS:=1;
            _QPDC.QPCS:=_opak;
            _QPDC.TPCS:=_QPDC.PKGS*_opak*(_reszta/_opak);
            _QPDC.KGS:=(_QPDC.TPCS*DK.M().WN)$2;
            _QPDC.GKGS:=(_QPDC.TPCS*DK.M().WN+_QPDC.PKGS*_wn)$2;
            _QPDC.QSER_TXT:=_partia;
            _QPDC.TW:={? ~_par.ask_tw || '' |? _tw=date(0,0,0) || 'Brak' || _tw$1 ?};
            {? _QPDC.add()
            || exec('dodpow','qlmg',$_QPDC.ref(),ND.SYM)
            ?}
         ?};
        obj_del(_pom)
      ?};
      DK.next()
   !}
?};
DK.cntx_pop();
_QPDC.index(_par.qpdc_nlk);
_QPDC.first();
~~


\iloscwz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Ilość na WZ'kach.
::   WE: _a [REFERENCE] - Wskazanie nagłowka dokumentu magazynowego.
::       _b [REFERENCE] - Wskazanie na indeks materiałowy.
::       _c [INTEGER] - Nr pozycji w dokumencie magazynowym.
::       _d [STRING] - Symbol partii z dostawy.
::       [_e] - Termin ważności.
::----------------------------------------------------------------------------------------------------------------------
_il:=0;
_ask_tw:=var_pres('_e')=type_of(date());

DK.cntx_psh();
DK.index('DOKMAG');
DK.prefix(_a);
{? DK.first()
|| {!
   |? _partia:=
         {? DK.DK_C<>null()
         || {? DK.DK_C().WAR02=''
            || DK.DK_C().SYM
            || DK.DK_C().WAR02
            ?}
         || ''
         ?};
      _tw:=DK.TW;

      {? DK.M=_b & _partia=_d & {? _ask_tw || _tw=_e || 1 ?}
      || {? DK.P>=_c || _il+=DK.IL
         |? DK.P<_c  || _il:=-1
         ?}
      ?};
      ( _il<>-1 & DK.next() )
   !}
?};
DK.cntx_pop();
_il


\il_opak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Ustalenie ilości opakowań i ilości bez opakowań.
::----------------------------------------------------------------------------------------------------------------------
_pom:=obj_new('wn','wynik','reszta');
{! _ii:=1 .. obj_len(_pom)
|! _pom[_ii]:=0
!};

M_OPAKOW.cntx_psh();
M_OPAKOW.index('M_OPAKOW');
M_OPAKOW.prefix(_a);
{? M_OPAKOW.first()
|| {!
   |? {? M_OPAKOW.OPAKOW().KTM<>'04-0060-000001'
      || {? M_OPAKOW.POJ<=0
         || _pom.wynik:=0
         || _pom.reszta:=_b%*M_OPAKOW.POJ;
            _pom.wynik:=M_OPAKOW.POJ;
            _pom.wn:=M_OPAKOW.OPAKOW().WN
         ?}
      ?};
      M_OPAKOW.next()
   !}
?};
M_OPAKOW.cntx_pop();
_pom


\dodpow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Wskazanie na powiązanie z dokumentem magazynowym
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get().par;
_QPDCP:=_par.QPDCP;
_QPDCP.cntx_psh();
_QPDCP.index(_par.qpdcp);
_QPDCP.prefix(_a,_b);
{? ~_QPDCP.first()
|| _QPDCP.blank();
   _QPDCP.QPDC:=_a;
   _QPDCP.SYM:=_b;
   _QPDCP.add()
?};
_QPDCP.cntx_pop();
~~


\bllppdc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Ustalenie kolejnego numeru pozycji.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_par:=params_get().par;
_QPDC:=_par.QPDC;
_lp:=1;

_QPDC.cntx_psh();
_QPDC.index(_par.qpdc_nlk);
_QPDC.prefix($ND.ref());
{? _QPDC.last ()
|| _lp:=_QPDC.LP+1
?};
_QPDC.cntx_pop();
_lp


\add_qpdc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Dodanie rekordu do tabeli _QPDC.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_par:=params_get().par;
_QPDC:=_par.QPDC;

_QPDC.blank();
_QPDC.ND:=$ND.ref();
_QPDC.REFND:=$ND.ref();
_QPDC.R:='N';
_QPDC.LP:=exec('bllppdc','qlmg');
{? _QPDC.edit()
|| {? _QPDC.add()
   || exec('dodpow','qlmg',$_QPDC.ref(),ND.SYM)
   ?}
?};
~~


\edit_qpdc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: edycja pozycji listu przewozowego.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_par:=params_get().par;
_QPDC:=_par.QPDC;

_QPDC.win_edit(_par.qpdcedit);
{? _QPDC.edit()
|| _QPDC.put()
?};
~~


\del_qpdc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Usunięcie pozycji z listu przewozowego.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_par:=params_get().par;
_QPDC:=_par.QPDC;
_QPDCP:=_par.QPDCP;

{? FUN.ask('Czy usunąć pozycję numer: %1\nKTM: %2\nNazwa: %3?'@[form(_QPDC.LP,,,'00'),_QPDC.KTM,_QPDC.N])
|| _QPDCP.prefix($_QPDC.ref());
   {? _QPDCP.first()
   || {! |? _QPDCP.del() !}
   ?};
   {? _QPDC.del() & _QPDC.next()
   || _QPDC.prev();
      _ref:=_QPDC.ref();
      {!
      |? _QPDC.LP-=1;
         _QPDC.put();
         _QPDC.next()
      !};
      _QPDC.seek(_ref)
   ?}
?};
~~


\genpdc1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Generowanie pozycji z listu przewozowego z innego listu.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_par:=params_get().par;
_QPDC:=_par.QPDC;

_QPDC.cntx_psh();
ND.cntx_psh();
exec('gen_dod','qlmg',ND.MAG,ND.TYP,ND.ref(),ND.SYM);
ND.cntx_pop();
_QPDC.cntx_pop();
_QPDC.first();
~~


\gen_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Generowanie pozycji z listu przewozowego z innego listu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_par:=params_get().par;
_QPDC:=_par.QPDC;
_kh:=ND.KH;
_odb:=ND.KH_ODB;

undefine();
define('NRWZ',0,'Numer WZ'@);
define('MAG',ND.MAG().SYM,'Magazyn'@,,8);
define('TW','N','Termin ważności?'@,'Generowanie wg terminu ważności[T/N]'@,1,2);
_btn:=def_btn('text=%1,icon=xwin16.png:13'['OK'@],'key:F2');
def_bopt(_btn,'default=1');
def_btn('text=%1,icon=xwin16.png:14'['Anuluj'@],'key:Esc');

ND.cntx_psh();
MG.cntx_psh();
{? def_edit(
      "  _result:=chk_rec();
         {? _result=''
         || {? ~('TNtn'*DEFINE.TW)
            || FUN.emsg('W polu \"Termin ważności\" należy wprowadzić wartość T lub N'@);
               _result:='TW'
            ?}
         ?};
         _result
      ",
      'Podaj'
   )
|| _par.ask_tw:=-DEFINE.TW='t';
   MG.index('MAG');
   MG.prefix(ST.ODDZ,DEFINE.MAG);
   {? MG.first()
   || ND.index('NAGDOK');
      ND.prefix(ST.AR,ST.AM,MG.ref(),_b,DEFINE.NRWZ);
      {? ND.first()
      || _sym:=ND.SYM;
         _refnd:=ND.ref();
         {? ND.KH=_kh & ND.KH_ODB=_odb & ND.SYM<>_d
         || DK.cntx_psh();
            _QPDC.cntx_psh();
            _QPDC.index(_par.qpdc_nk);
            _QPDC.prefix($_c);
            DK.index('DOKMAG');
            DK.prefix(ND.ref());
            {? DK.first()
            || {!
               |? _partia:=
                     {? DK.DK_C<>null()
                     || {? DK.DK_C().WAR02=''
                        || DK.DK_C().SYM
                        || DK.DK_C().WAR02
                        ?}
                     || ''
                     ?};
                  {? _par.ask_tw
                  || _tw:=DK.TW
                  || _tw:=''
                  ?};
                  _il:=exec('iloscwz','qlmg',ND.ref(),DK.M,DK.P,_partia,_tw);
                  {? _il<>-1
                  || _QPDC.prefix($_c,$DK.M);
                     {? _QPDC.first() & _QPDC.QSER_TXT=_partia & {? _par.ask_tw || _QPDC.TW=_tw$1 || 1 ?}
                     || _il+=_QPDC.TPCS;
                        _pom:=exec('il_opak','qlmg',DK.M,_il);
                        _opak:=_pom.wynik;
                        _reszta:=_pom.reszta;
                        _wn:=_pom.wn;
                        {? _opak<>0
                        || _QPDC.PKGS:={? _il-_reszta>0 || ((_il-_reszta)/_opak) || _reszta:=0; 1 ?};
                           _QPDC.QPCS:=_opak;
                           _QPDC.TPCS:=((_il-_reszta)/_opak)*_QPDC.QPCS;
                           _QPDC.KGS:=(_QPDC.TPCS*DK.M().WN)$2;
                           _QPDC.GKGS:=(_QPDC.TPCS*DK.M().WN+_QPDC.PKGS*_wn)$2;
                           _QPDC.QSER_TXT:=_partia;
                           {? _QPDC.put()
                           || exec('dodpow','qlmg',$_QPDC.ref(),_sym)
                           ?}
                        || FUN.emsg('Brak infomacji o opkaowaniu w pozycji: %1 %2'@[form(DK.P),DK.M().KTM]);
                           {? FUN.ask('Wpisać informację o powiązanych WZ do listu przewozowego'@,,1,'Nie'@,'Tak'@)
                           ||  exec('dodpow','qlmg',$_QPDC.ref(),_sym)
                           ?}
                        ?}
                     || _QPDC.blank();
                        _pom:=exec('il_opak','qlmg',DK.M,_il);
                        _opak:=_pom.wynik;
                        _reszta:=_pom.reszta;
                        _wn:=_pom.wn;
                        {? _opak<>0
                        || _QPDC.blank();
                           _QPDC.ND:=$_c;
                           _QPDC.REFND:=$_refnd;
                           _QPDC.LP:=exec('bllppdc1','qlmg',_c);
                           _QPDC.R:='N';
                           _QPDC.KOD:=$DK.M;
                           _QPDC.KTM:=DK.M().KTM;
                           _QPDC.N:=DK.M().N;
                           _QPDC.PKGS:={? _il-_reszta>0 || ((_il-_reszta)/_opak) || _reszta:=0; 1 ?};
                           _QPDC.QPCS:=_opak;
                           _QPDC.TPCS:=((_il-_reszta)/_opak)*_QPDC.QPCS;
                           _QPDC.KGS:=(_QPDC.TPCS*DK.M().WN)$2;
                           _QPDC.GKGS:=(_QPDC.TPCS*DK.M().WN+_QPDC.PKGS*_wn)$2;
                           _QPDC.QSER_TXT:=_partia;
                           _QPDC.TW:={? ~_par.ask_tw || '' |? _tw=date(0,0,0) || 'Brak' || _tw$1 ?};
                           {? _QPDC.add()
                           || exec('dodpow','qlmg',$_QPDC.ref(),_sym)
                           ?}
                        || FUN.emsg('Brak infomacji o opkaowaniu w pozycji: %1 %2'@[form(DK.P),DK.M().KTM]);
                           {? FUN.ask('Wpisać informację o powiązanych WZ do listu przewozowego'@,,1,'Nie'@,'Tak'@)
                           ||  exec('dodpow','qlmg',$_QPDC.ref(),_sym)
                           ?}
                        ?}
                     ?};
                     {? _reszta
                     || _QPDC.blank();
                        _QPDC.ND:=$_c;
                        _QPDC.LP:=exec('bllppdc1','qlmg',_c);
                        _QPDC.R:='N';
                        _QPDC.KOD:=$DK.M;
                        _QPDC.KTM:=DK.M().KTM;
                        _QPDC.N:=DK.M().N;
                        _QPDC.PKGS:=1;
                        _QPDC.QPCS:=_opak;
                        _QPDC.TPCS:=_QPDC.PKGS*_opak*(_reszta/_opak);
                        _QPDC.KGS:=(_QPDC.TPCS*DK.M().WN)$2;
                        _QPDC.GKGS:=(_QPDC.TPCS*DK.M().WN+_QPDC.PKGS*_wn)$2;
                        _QPDC.QSER_TXT:=_partia;
                        _QPDC.TW:={? ~_par.ask_tw || '' |? _tw=date(0,0,0) || 'Brak' || _tw$1 ?};
                        {? _QPDC.add()
                        || exec('dodpow','qlmg',$_QPDC.ref(),ND.SYM)
                        ?}
                     ?};
                     obj_del(_pom)
                  ?};
                  DK.next()
               !}
            ?};
            _QPDC.cntx_pop();
            DK.cntx_pop()
         || {? ND.SYM=_d
            || FUN.info('Ten dokument jest już dodany.'@)
            || FUN.info('Inny kontrahent lub odbiorca.'@)
            ?}
         ?}
      || FUN.emsg('Brak WZ numer: %1 w magazynie: %2'@[form(DEFINE.NRWZ),DEFINE.MAG])
      ?}
   || FUN.emsg('Brak magazynu: %1'@[DEFINE.MAG])
   ?}
?};
ND.cntx_pop();
MG.cntx_pop();
~~


\bllppdc1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Ustalenie kolejnego numeru pozycji.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_par:=params_get().par;
_QPDC:=_par.QPDC;
_lp:=1;

_QPDC.cntx_psh();
_QPDC.index(_par.qpdc_nlk);
_QPDC.prefix($_a);
{? _QPDC.last()
|| _lp:=_QPDC.LP+1
?};
_QPDC.cntx_pop();
_lp


\druk_pdf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: drukowanie listu przewozowego do PDF.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_wyn:=null();

NRDOK.index('NRDOK');
NRDOK.prefix('SYS','');
{? ~NRDOK.first()
|| _ok:=0;
   FUN.info('Nie zdefiniowano numeracji SYS dla dokumentów powiązanych.'@)
?};

POLA.NAZ_WYDR:='';

_symb:=exec('str_to_pth','#string',ND.SYM);
_file:='List przewozowy '+_symb+'.pdf';
_wydr:=rep_exec('lmg_listp*',,,_file,1);

{? POLA.NAZ_WYDR<>'' & _wydr=1
|| _wyn:=exec('save_dok','dokum','ND',_file,POLA.NAZ_WYDR,ND.SYM,ND.KH().EM)
?};
_wyn


\lista_wz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: lista dokumentów WZ do packing listy.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_par:=params_get().par;
_QPDC:=_par.QPDC;
_QPDCP:=_par.QPDCP;

_QPDCP.index(_par.qpdcp);
_QPDCP.prefix($_QPDC.ref());
_QPDCP.select();
~~


\zam_kl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Ustalenie symbolu zamówienia sprzedaży.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<0 || _c:=1 ?};
_sym:='';
{? #_a<>0
|| ZK_RN.cntx_psh();
   ZK_RN.index('ND');
   ZK_RN.use('zkhin'+ST.ODDZ+'__');
   ZK_RN.prefix($_a,_b);
   {? ZK_RN.first()
   || {? _c
      || _sym:=ZK_RN.N().SYM
      || _sym:=ZK_RN.N().ZAM_KL
      ?}
   ?};
   ZK_RN.cntx_pop()
?};
_sym


\memo_zkn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO_MOM]
:: OPIS: Ustalenie treści w polu uwagi z nagłówka zamówienia.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_memo:='';
{? #_a<>0
|| ZK_RN.cntx_psh();
   ZK_RN.index('ND');
   ZK_RN.use('zkhin'+ST.ODDZ+'__');
   ZK_RN.prefix($_a,_b);
   {? ZK_RN.first()
   || ZK_RN.N();
      _memo:=ZK_N.memo_txt(0,1,'UW')
   ?};
   ZK_RN.cntx_pop()
?};
_memo


\zam_kl2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Ustalenie symboli zamówienia sprzedaży.
::----------------------------------------------------------------------------------------------------------------------
_sym:=_sep:='';

ND.cntx_psh();
ND.index(ND.ndx_tmp(,,'SYM',,0,'SYM',,0));
ND.prefix(_b,_b);
{? ND.first() & ND.size()=1
|| _a:=ND.ref()
|| _a:=null()
?};
ND.ndx_drop();
ND.cntx_pop();

{? #_a<>0
|| ZK_RN.cntx_psh();
   ZK_RN.index('ND');
   ZK_RN.use('zkhin'+ST.ODDZ+'__');
   ZK_RN.prefix($_a,_b);
   {? ZK_RN.first()
   || {!
      |? ZK_RP.cntx_psh();
         ZK_RP.index('POZR');
         ZK_RP.use('zkhip'+ST.ODDZ+'__');
         ZK_RP.prefix(ZK_RN.ref());
         {? ZK_RP.first()
         || {!
            |? {? $ZK_RP.M=_c
               || _sym+=_sep+ZK_RN.N().ZAM_KL;
                  _sep:='; ';
                  0
               || ZK_RP.next()
               ?}
            !}
         ?};
         ZK_RP.cntx_pop();
         ZK_RN.next()
      !}
   ?};
   ZK_RN.cntx_pop()
?};
_sym


\nazwalp_new
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [NUCO]
:: OPIS: Ustalenie symboli zamówienia sprzedaży.
::       _a - ref materialu
::       _b - jaka nazwa - 0 - polska, 1 - ang
::       _c - co gdy brak tlumaczenia: 1 - napis 'brak danych', 0 - pusty string
::       _d - czy wyswietlac komunikat: 1 - tak, 0 - nie
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<>1 || _c:=0 ?};
{? var_pres('_d')<>1 || _d:=1 ?};
{? var_pres('_e')<0 || _e:=null() ?};
_nazwa:='';
M.clear();
TRANSLAT.cntx_psh();
TRANSLAT.index('KOD');
M.seek(_a);
{? _b=0
|| {? M.seek(_a) || _nazwa:=M.N ?}
|? _b=1
|| MKODK.index('UNIK');
   MKODK.prefix(_e,M.ref());
   {? MKODK.first()
   || {? _c
      || _nazwa:=form(MKODK.KTM)+' - '+form(MKODK.N);
         {? _nazwa='' || _nazwa:='Brak danych' ?}
      || _nazwa:={? _b=0 || M.N || '' ?}+' '+form(MKODK.KTM)+' - '+form(MKODK.N)
      ?}
   ?};
   SLO.index('SL');
   SLO.prefix(XINFO.SLJEZYK,'ANG');
   {? _nazwa='' & SLO.first()
   || TRANSLAT.index('M');
      TRANSLAT.prefix(M.ref(),SLO.ref());
      {? XINFO.SLJEZYK<>null() & SLO.first() & TRANSLAT.first()
      || {? _c
         || _nazwa:=form(TRANSLAT.T);
            {? _nazwa='' || _nazwa:='Brak danych' ?}
         || _nazwa:=M.N+' '+form(TRANSLAT.T)
         ?}
      || {? _c
         || _nazwa:='Brak danych'
         || {? _d || FUN.emsg('Brak nazwy angielskiej: %1'[M.KTM]) ?};
            _nazwa:=M.N
         ?}
      ?}
   ?}
|? _b=2
|| SLO.index('SL');
   SLO.prefix(XINFO.SLJEZYK,'ROS');
   {? _nazwa='' & SLO.first()
   || TRANSLAT.index('M');
      TRANSLAT.prefix(M.ref(),SLO.ref());
      {? XINFO.SLJEZYK<>null() & SLO.first() & TRANSLAT.first()
      || {? _c
         || _nazwa:=form(TRANSLAT.T);
            {? _nazwa='' || _nazwa:='Brak danych' ?}
            || _nazwa:={? _b=0 || M.N || '' ?}+' '+form(TRANSLAT.T)
            ?}
         || {? _c
            || _nazwa:='Brak danych'
            || {? _d || FUN.emsg('Brak nazwy rosyjskiej: %1'[M.KTM]) ?};
                _nazwa:=M.N
            ?}
        ?}
    ?}
?};
TRANSLAT.cntx_pop();
_nazwa


\wyc_mw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Weryfikacja możliwości wycofania dokumentu MW (procedura sprawdza czy dokument MP został zaakceptowany i czy
::       jest na magazynie głównym (niewydziałowym). Jeśli tak to zwraca 0 - brak możliwości odakeptowania MW.
::   WE: Procedura wywoływana przy ontroli możliwości wycofania (nagłówek dokumentu magazynwoego).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_qmp:=sql('select ND.STAT_REJ, MG.W, ND.SYM from @ND join MG using (ND.MAG,MG.REFERENCE) where ND.NDSQL=\':_a\'',$ND.ref());
{? _qmp.first()
|| {? _qmp.W='N'
   || {? _qmp.STAT_REJ<>'N'
      || _result:=0;
         FUN.emsg('Dokument MW nie może być wycofany.\n'+
                  'Odakceptuj najpierw dokument MP - %1'[_qmp.SYM])
      ?}
   ?}
?};
_result


\rozl_prod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS:  Funkcja rozchoduje całość stanu z magazynu i przygotowuje dokument przesunięcia na wskazany magazyn
::        Tworzony jest dokument MW z pozycjami pochodzącymi z magazynu, na który wykonywane jest przesunięcie.
::        (zwrot materiałów do magazynu z którego zostały przesunięte)
::   WE: _a MG.SYM (magazyn z)
::       _b MG.SYM (magazyn do)
::       _c '' - lista magazynów np. ',XSUR1,XSUR2,' dodatkowo branych pod uwagę przy przesunięciu.
::   WY: _wyn - ref utworzonego dokumentu.
::----------------------------------------------------------------------------------------------------------------------
_dialog:=0;

_data_dok:=date();
ST.AR:=_data_dok~1;
ST.AM:=_data_dok~2;
ST.ODDZ:='w';

:: Zapamiętanie kontekstu baz MAGAZYNOWYCH
exec('mag_psh','open_tab');

:: Otwarcie masek MAGAZYNOWYCH
exec('mag_open','open_tab',ST.ODDZ,form(ST.AR)+2);

:: Obiekt z uwagami
{? var_pres('QKOMM')<100
|| exec('JCQ_decl','#message');
   QKOMM:=obj_new(@.CLASS.JCQ)
?};
QKOMM.init(250,,'Tworzenie dokumentu MW.'@);

{? var_press('_a')<0 | var_press('_a')<>type_of('') | _a=''
|| {? _dialog
   || QKOMM.add('Brak lub błędny typ parametru [magazyn z] przy tworzeniu nagłówka dokumentu MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

{? var_press('_b')<0 | var_press('_b')<>type_of('') | _b=''
|| {? _dialog
   || QKOMM.add('Brak lub błędny typ parametru [magazyn do] przy tworzeniu nagłówka dokumentu MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

{? var_press('_c')<0 | var_press('_c')<>type_of('')
|| _mag_dod:=''
|| _mag_dod:=_c
?};

:: Ustalenie magazynu dla dokumentu
_mg_z:=_a;
_mg_z_ref:=exec('FindInSet','#table','MG','MAGAZYNY',_mg_z,_mg_z,"MG.ref()",1,,null());
{?  _mg_z_ref=null()
|| {? _dialog
   || QKOMM.add('Nie odnaleziono magazynu (Z) przy tworzeniu nagłówka dokumentu XBO');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

:: Ustalenie magazynu do którego należy utworzyć dokument
_mg_do:=_b;
_mg_do_ref:=exec('FindInSet','#table','MG','MAGAZYNY',_mg_do,_mg_do,"MG.ref()",1,,null());
{? _mg_do_ref=null()
|| {? _dialog
   || QKOMM.add('Nie ustalono magazynu (DO) przy tworzeniu nagłówka dokumentu XBO');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

:: Ustalenie typu dokumentu
_typ_dok_ref:=exec('FindInSet','#table','TYPYDOK','TYP','MW','MW',"TYPYDOK.ref()",1,,null());
{?  _typ_dok_ref=null()
|| {? _dialog
   || QKOMM.add('Nie odnaleziono typu dokumentu MW przy tworzeniu nagłówka');
      QKOMM.select()
    ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

:: Sprawdzenie czy jest co przenosić na bazie SL/SLD
_sld_eanl:=sql('select SLD.SCEAN,
                       SLD.IL,
                       SL.EANL,
                       SL.TW,
                       SL.M,
                       SL.MG
                  from @SLD join @SL
                 where SL.MG=:_a
              order by SL.M, SLD.SCEAN, SL.TW
              ',_mg_z_ref);
{? _sld_eanl.size()=0
|| {? _dialog
   || QKOMM.add('Brak stanu wg. wymiaró na magazynie do wydania na MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};

REZ.cntx_psh();
REZ.use('rezzw__');
_rezerwacje:=sql('select *
                    from REZ
                   where REZ.MG=:_a and REZ.SC<>\'\' and REZ.TYP=\'T\'
                order by REZ.SC
               ',_mg_z_ref);
REZ.cntx_pop();

_sc:=sql('select *
            from @SC
           where SC.MAG=:_a and SC.S>0
        order by SC.M, SC.SRDK, SC.SCEAN
           ', _mg_z_ref);

{? _sc.size()=0
|| {? _dialog
   || QKOMM.add('Brak stanu na magazynie do wydania na MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};


:: Weryfikacja czy dostawa pochodzi z magazynu na który chcemy przesunąć stan
_sc.clear();
{? _sc.first()
|| {!
   |? _usun:=1;
      {? _sc.D<date(2021,10,1)
      || _nd:=exec('FindAndGet','#table',DK,_sc.SRDK,,"DK.N",null());
         {? _nd<>null()
         || _dok_pow:=exec('FindAndGet','#table',ND,_nd,,"ND.NDSQL",'');
            {? _dok_pow<>''
            || {? exec('FindAndGet','#table',ND,_dok_pow,,"ND.MAG",null())=_mg_do_ref
                  | _mag_dod*(','+exec('FindAndGet','#table',ND,_dok_pow,,"ND.MAG().SYM",'-')+',')>0

               || _usun:=0
               ?}
            ?}
         ?}
      ?};
      {? _usun
      || _sc.del()
      || _sc.next()
      ?}
   !}
?};

:: _nieunikalne:=exec('nieunikalny_scean','qxbo');

:: odjęcie rezerwacji
{? _rezerwacje.first()
|| {!
   |? _sc.clear();
      _sc.prefix(_rezerwacje.M, _rezerwacje.SC);
      {? _sc.first()
      || _sc.S:=_sc.S-_rezerwacje.ILR;
::         _nunik:=sql('select :_a.SCEAN from :_a where :_a.SCEAN=\':_b\'',_nieunikalne,_sc.SCEAN).first();
         {? _sc.S<=0
         || _sc.del()
         || _sc.put()
         ?}
      ?};
      _rezerwacje.next()
   !}
?};
_sc.clear();
{? _sc.size()=0
|| {? _dialog
   || QKOMM.add('Po odjęciu rezerwacji brak stanu na magazynie do wydania na MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};

DK.clear();
ND.clear();

:: Tworzenie nagłówka dokumentu
_nd_ref:=exec('addnag','magdok_nag',_mg_z_ref,_data_dok~1,_data_dok~2,_typ_dok_ref,'N',,_data_dok,,,,,,,,,0);

:: Jeśli powstał nagłówek to tworzymy pozycje dokumentu
{? _nd_ref<>null()
|| {? ND.seek(_nd_ref)
   ||
::    Uzupełnienie magazynu do którego przenosimy stan
      ND.MD:=_mg_do_ref;
      ND.put();
      _sc.first();
::    Petla po stanach magazynowych + weryfikacja rezerwacji
      {!
      |? _m_ref:=exec('FindAndGet','#table',M,_sc.M);
         _dk_c_ref:=exec('FindAndGet','#table',DK_C,_sc.DK_C);
         _stats_ref:=exec('FindAndGet','#table',STATS,_sc.STATS);
::      Dodawanie pozycji dokumentu
        {? (_dk_ref:=exec('adddk','magdok_poz',_nd_ref,_m_ref,_sc.S,_sc.C,_sc.D,,,,,,,,7
                                        ,_sc.RDK,_sc.NDK,_dk_c_ref,_sc.SRDK,_sc.PRDK,,,,,,_stats_ref,_sc.SCEAN,_sc.TW))<>null()
        || DK.clear();
           {? DK.seek(_dk_ref)
           || _sld_eanl.clear();
              _sld_eanl.prefix(_sc.M,_sc.SCEAN,_sc.TW);
              _rozpisz:=DK.IL;
              {? _sld_eanl.first()
              || {!
                 |? EANX.EANL:=exec('FindAndGet','#table',EANL,_sld_eanl.EANL);
                    EANX.TW:=_sld_eanl.TW;
                    {? _sld_eanl.IL>=_rozpisz
                    || _sld_eanl.IL:=_sld_eanl.IL-_rozpisz;
                       _sld_eanl.put();
                       _ilosc:=_rozpisz;
                       _rozpisz:=0
                    || _ilosc:=_sld_eanl.IL;
                       _rozpisz:=_rozpisz-_sld_eanl.IL;
                       _sld_eanl.IL:=0;
                       _sld_eanl.put()
                    ?};
::                  Dodanie pozycji DK_L
                    exec('add2dk_l','magdok_wspolne',DK.ref(),null,EANX.EANL,null,EANX.TW,date(0,0,0),
                                                     _ilosc,DK.N().MAG,DK.M,,,,,,,_sld_eanl.SCEAN,_sc.SRDK);
                    _rozpisz>0 & _sld_eanl.next()
                 !}
              ?};
              {? _rozpisz>0
              || {? _dialog
                 || QKOMM.sect_beg('%1 - nie udało się rozpisać całej ilości na wymiarach'@[DK.M().KTM]);
                    QKOMM.add('ID: %1 ; Ilość - %2 ; Lokalizacja - ???'@[DK.SCEAN,$DK.IL])
                 ?};
                 DK_L.cntx_psh();
                 DK_L.index('DK');
                 DK_L.clear();
                 DK_L.prefix(DK.ref);
                 {? DK_L.first()
                 || {!
                    |? {? _dialog
                       || QKOMM.add('ID: %1 ; Ilość - %2 ; Lokalizacja - %3'@[DK_L.SCEAN,$DK_L.IL, DK_L.LOK().KOD])
                       ?};
                       DK_L.del
                    !}
                 ?};
                 {? _dialog
                 || QKOMM.sect_end()
                 ?};
                 DK_L.cntx_pop();
::               Ponieważ rekord nie jest do końca rozpisany musi być skasowany
                 params_exec('usun_dk','magdok_poz',1)
              ?}
           ?}
        || {? _dialog
           || QKOMM.add('Nie udało się dodać pozycji do dokumentu')
           ?}
        ?};
        _sc.next()
      !};
::    Sprawdzam czy jest choć jedna pozycja - jeśli nie usówam nagłówek
      {? ~(sql('select DK.P from DK where DK.N=:_a',_nd_ref).first())
      ||  {? ND.seek(_nd_ref)
          || _nd_ref:=null();
             ND.del()
          ?}
      ?};
::    Aktualizacja nagłówka dokumentu
      exec('dk_sum','magdok_wspolne',ND.ref())
   || _nd_ref:=null()
   ?}
|| {? _dialog
   || QKOMM.add('Nie udało się dodać nagłówka dokumentu XBO')
   ?}
?};

:: Wyświetlenie dodatkowych informacji
{? _dialog
|| QKOMM.select()
?};


:: Przywracanie kontekstu tabel MAGAZYNOWYCH
exec('mag_pop','open_tab');

_nd_ref


\wydaj_calosc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS:  Funkcja rozchoduje całość stanu z magazynu na dokument wskazany parametrem
::   WE: _a MG.SYM (magazyn z)
::       _b - dpmyślnie 'RW' - typ dokumentu
::   WY: _wyn - ref utworzonego dokumentu.
::----------------------------------------------------------------------------------------------------------------------
_dialog:=0;

undefine();
define('DT',date,'Data dokumentu');
{? ~def_edit(,'Podaj datę dokumentu (z aktualnego miesiąca)')
|| return(0)
|| _data_dok:=DEFINE.DT
?};


ST.AR:=_data_dok~1;
ST.AM:=_data_dok~2;
ST.ODDZ:='w';

:: Zapamiętanie kontekstu baz MAGAZYNOWYCH
exec('mag_psh','open_tab');

:: Otwarcie masek MAGAZYNOWYCH
exec('mag_open','open_tab',ST.ODDZ,form(ST.AR)+2);

:: Obiekt z uwagami
{? var_pres('QKOMM')<100
|| exec('JCQ_decl','#message');
   QKOMM:=obj_new(@.CLASS.JCQ)
?};
QKOMM.init(250,,'Tworzenie dokumentu MW.'@);

{? var_press('_a')<0 | var_press('_a')<>type_of('') | _a=''
|| {? _dialog
   || QKOMM.add('Brak lub błędny typ parametru [magazyn z] przy tworzeniu nagłówka dokumentu MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

{? var_press('_b')<0 | var_press('_b')<>type_of('')
|| _typ_dok:='RW'
|| _typ_dok:=_b
?};

:: Ustalenie magazynu dla dokumentu
_mg_z:=_a;
_mg_z_ref:=exec('FindInSet','#table','MG','MAGAZYNY',_mg_z,_mg_z,"MG.ref()",1,,null());
{?  _mg_z_ref=null()
|| {? _dialog
   || QKOMM.add('Nie odnaleziono magazynu (Z) przy tworzeniu nagłówka dokumentu XBO');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

:: Ustalenie typu dokumentu
_typ_dok_ref:=exec('FindInSet','#table','TYPYDOK','TYP',_typ_dok,_typ_dok,"TYPYDOK.ref()",1,,null());
{?  _typ_dok_ref=null()
|| {? _dialog
   || QKOMM.add('Nie odnaleziono typu dokumentu MW przy tworzeniu nagłówka');
      QKOMM.select()
    ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

:: Sprawdzenie czy jest co przenosić na bazie SL/SLD
_sld_eanl:=sql('select SLD.SCEAN,
                       SLD.IL,
                       SL.EANL,
                       SL.TW,
                       SL.M,
                       SL.MG
                  from @SLD join @SL
                 where SL.MG=:_a
              order by SL.M, SLD.SCEAN, SL.TW
              ',_mg_z_ref);
{? _sld_eanl.size()=0
|| {? _dialog
   || QKOMM.add('Brak stanu wg. wymiaró na magazynie do wydania na MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};

REZ.cntx_psh();
REZ.use('rezzw__');
_rezerwacje:=sql('select *
                    from REZ
                   where REZ.MG=:_a and REZ.SC<>\'\' and REZ.TYP=\'T\'
                order by REZ.SC
               ',_mg_z_ref);
REZ.cntx_pop();

_sc:=sql('select SC.*,M.KTM as M_KTM,M.N as M_N
            from @SC
            join M using(SC.M,M.REFERENCE)
           where SC.MAG=:_a and SC.S>0
        order by SC.M, SC.SRDK, SC.SCEAN
           ', _mg_z_ref);

{? _sc.size()=0
|| {? _dialog
   || QKOMM.add('Brak stanu na magazynie do wydania na MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};


:: Weryfikacja i usunięcie rekordów które chcemy zachować.
_sc.clear();
{? _sc.first()
|| {!
   |? _usun:=0;
      {? (3+_sc.M_KTM='01-') & (2+_sc.M_N='m.'|2+_sc.M_N='M.')
      || _usun:=1
      ?};
      {? _usun
      || _sc.del()
      || _sc.next()
      ?}
   !}
?};

:: odjęcie rezerwacji
{? _rezerwacje.first()
|| {!
   |? _sc.clear();
      _sc.prefix(_rezerwacje.M, _rezerwacje.SC);
      {? _sc.first()
      || _sc.S:=_sc.S-_rezerwacje.ILR;
::         _nunik:=sql('select :_a.SCEAN from :_a where :_a.SCEAN=\':_b\'',_nieunikalne,_sc.SCEAN).first();
         {? _sc.S<=0
         || _sc.del()
         || _sc.put()
         ?}
      ?};
      _rezerwacje.next()
   !}
?};
_sc.clear();
{? _sc.size()=0
|| {? _dialog
   || QKOMM.add('Po odjęciu rezerwacji brak stanu na magazynie do wydania na RW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};

DK.clear();
ND.clear();

:: Tworzenie nagłówka dokumentu
_nd_ref:=exec('addnag','magdok_nag',_mg_z_ref,_data_dok~1,_data_dok~2,_typ_dok_ref,'N',,_data_dok,,,,,,,,,0);

:: Jeśli powstał nagłówek to tworzymy pozycje dokumentu
{? _nd_ref<>null()
|| {? ND.seek(_nd_ref)
   || _sc.first();
::    Petla po stanach magazynowych + weryfikacja rezerwacji
      {!
      |? _m_ref:=exec('FindAndGet','#table',M,_sc.M);
         _dk_c_ref:=exec('FindAndGet','#table',DK_C,_sc.DK_C);
         _stats_ref:=exec('FindAndGet','#table',STATS,_sc.STATS);
::      Dodawanie pozycji dokumentu
        {? (_dk_ref:=exec('adddk','magdok_poz',_nd_ref,_m_ref,_sc.S,_sc.C,_sc.D,,,,,,,,7
                                        ,_sc.RDK,_sc.NDK,_dk_c_ref,_sc.SRDK,_sc.PRDK,,,,,,_stats_ref,_sc.SCEAN,_sc.TW))<>null()
        || DK.clear();
           {? DK.seek(_dk_ref)
           || DK.IL2:=DK.IL;
              DK.WS2:=1;
              DK.put();
              _sld_eanl.clear();
              _sld_eanl.prefix(_sc.M,_sc.SCEAN,_sc.TW);
              _rozpisz:=DK.IL;
              {? _sld_eanl.first()
              || {!
                 |? EANX.EANL:=exec('FindAndGet','#table',EANL,_sld_eanl.EANL);
                    EANX.TW:=_sld_eanl.TW;
                    {? _sld_eanl.IL>=_rozpisz
                    || _sld_eanl.IL:=_sld_eanl.IL-_rozpisz;
                       _sld_eanl.put();
                       _ilosc:=_rozpisz;
                       _rozpisz:=0
                    || _ilosc:=_sld_eanl.IL;
                       _rozpisz:=_rozpisz-_sld_eanl.IL;
                       _sld_eanl.IL:=0;
                       _sld_eanl.put()
                    ?};
::                  Dodanie pozycji DK_L
                    exec('add2dk_l','magdok_wspolne',DK.ref(),null,EANX.EANL,null,EANX.TW,date(0,0,0),
                                                     _ilosc,DK.N().MAG,DK.M,,,,,,,_sld_eanl.SCEAN,_sc.SRDK);
                    _rozpisz>0 & _sld_eanl.next()
                 !}
              ?};
              {? _rozpisz>0
              || {? _dialog
                 || QKOMM.sect_beg('%1 - nie udało się rozpisać całej ilości na wymiarach'@[DK.M().KTM]);
                    QKOMM.add('ID: %1 ; Ilość - %2 ; Lokalizacja - ???'@[DK.SCEAN,$DK.IL])
                 ?};
                 DK_L.cntx_psh();
                 DK_L.index('DK');
                 DK_L.clear();
                 DK_L.prefix(DK.ref);
                 {? DK_L.first()
                 || {!
                    |? {? _dialog
                       || QKOMM.add('ID: %1 ; Ilość - %2 ; Lokalizacja - %3'@[DK_L.SCEAN,$DK_L.IL, DK_L.LOK().KOD])
                       ?};
                       DK_L.del
                    !}
                 ?};
                 {? _dialog
                 || QKOMM.sect_end()
                 ?};
                 DK_L.cntx_pop();
::               Ponieważ rekord nie jest do końca rozpisany musi być skasowany
                 params_exec('usun_dk','magdok_poz',1)
              ?}
           ?}
        || {? _dialog
           || QKOMM.add('Nie udało się dodać pozycji do dokumentu')
           ?}
        ?};
        _sc.next()
      !};
::    Sprawdzam czy jest choć jedna pozycja - jeśli nie usówam nagłówek
      {? ~(sql('select DK.P from DK where DK.N=:_a',_nd_ref).first())
      ||  {? ND.seek(_nd_ref)
          || _nd_ref:=null();
             ND.del()
          ?}
      ?};
::    Aktualizacja nagłówka dokumentu
      exec('dk_sum','magdok_wspolne',ND.ref())
   || _nd_ref:=null()
   ?}
|| {? _dialog
   || QKOMM.add('Nie udało się dodać nagłówka dokumentu XBO')
   ?}
?};

:: Wyświetlenie dodatkowych informacji
{? _dialog
|| QKOMM.select()
?};


:: Przywracanie kontekstu tabel MAGAZYNOWYCH
exec('mag_pop','open_tab');

_nd_ref


\usun_z_rw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja wyświetla zapisane w EANN dokumenty i jednego z listy usówa zgodne pozycje (lub zmniejsza ilości na poz
::       Dokumentu na którym aktualnie jest wykonywana.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------

VAR_DEL.delete('q_il_poz');


:: Kilka zabezpieczeń
{? cur_tab()<>ND
|| FUN.error('Nie jesteś ustawiony na nagłówku dokumentu magazynowego, wykonanie funkcji jest niemożliwe');
   return(0)
?};

{? ND.Z<>'N'
|| FUN.error('Redakcja dokumentu jest zakończona, wykonanie funkcji jest niemożliwe');
   return(0)
?};

:: Wyświetlenie tabeli EANN
ST.ODDZ:='w';
EANN.cntx_psh();
EANP.cntx_psh();
exec('openean','open_tab',ST.ODDZ+'__');
EANN.index('SYM');
EANN.prefix('I');
EANN.last();
EANP.index('EANN');
EANP.prefix(EANN.ref);
EANP.first();
EANN.win_sel('GRP');
EANN.actions('WYB','Rr:Rr');
EANN.select();
{? FUN.ask('Czy chcesz uzgodnić pozycje dokumentu %1 z inwentaryzacją %2?'[ND.SYM,EANN.SYM])
|| ND.cntx_psh();
   DK.cntx_psh();
   DK_L.cntx_psh();
   EANP.clear();
   EANP.prefix(EANN.ref());
   _form:=" _il_z_inw:=q_il_z;
            DK_L.cntx_psh();
            DK_L.index('DK');
            DK_L.prefix(DK.ref(),null);
            {? DK_L.first()
            || {!|?
                  {? DK_L.LOK=EANP.LOKZ
                  || {? DK_L.IL>_il_z_inw
                     || DK_L.IL:=DK_L.IL-_il_z_inw;
                        _il_z_inw:=0;
                        DK_L.IL2:=DK_L.IL;
                        DK_L.put()
                     || _il_z_inw:=_il_z_inw-DK_L.IL;
                        DK_L.del()
                     ?}
                  ?};
                  DK_L.next() & _il_z_inw>0
               !}
            ?};
            DK_L.cntx_pop();
            'Ograniczenie ilości do rozliczenia z DK do pobranej z wkazanej na EANP lokalizacji';
            _il_z_inw:=q_il_z-_il_z_inw;
            {? DK.IL>_il_z_inw
            || DK.IL:=DK.IL-_il_z_inw;
               _il_z_inw:=0;
               DK.WAR:=(DK.IL*DK.C)$2;
               DK.IL2:=DK.IL*DK.WS2;
               DK.put()
           || _il_z_inw:=_il_z_inw-DK.IL;
              params_exec('usun_dk','magdok_poz',1)
           ?};
           q_il_z:=_il_z_inw;
           1";
   {? EANP.first() & EANN.TXT1=''
   || {!
      |? q_il_z:=EANP.ILS;
         _dk_poz:=sql('select DK.DOST, DK.REFERENCE as REF, DK.IL from DK where DK.N=:_a and DK.SCEAN=:_b',ND.ref(),EANP.SCEAN);
         {? _dk_poz.last()
         || {!
            |? exec('FindAndGet','#table',DK,_dk_poz.REF,,_form,0);
               _dk_poz.prev() & q_il_z<>0
            !}
         ?};
::       Ilość jaką udało się usunąć z RW
         EANP.WAGANT:=EANP.ILS-q_il_z;
         EANP.put();
         &_dk_poz;
         EANP.next()
      !};
      exec('aktu_poz','magdok_poz')
   ?};
   EANN.TXT1:='Uzgodniono z RW'; EANN.put();
   ND.cntx_pop();
   DK.cntx_pop();
   DK_L.cntx_pop()
?};
EANN.actions('WYB');
EANN.cntx_pop();
EANP.cntx_pop();
VAR_DEL.delete('q_il_poz');
~~


\wydaj_reszte
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS:  Funkcja rozchoduje stan dla ilości zaokrąglanych do pełnych - magazynu na dokument wskazany parametrem
::   WE: _a MG.SYM (magazyn z)
::       _b - dpmyślnie 'RW' - typ dokumentu
::   WY: _wyn - ref utworzonego dokumentu.
::----------------------------------------------------------------------------------------------------------------------
_dialog:=0;

_data_dok:=date(2021,10,05);
ST.AR:=_data_dok~1;
ST.AM:=_data_dok~2;
ST.ODDZ:='w';

:: Zapamiętanie kontekstu baz MAGAZYNOWYCH
exec('mag_psh','open_tab');

:: Otwarcie masek MAGAZYNOWYCH
exec('mag_open','open_tab',ST.ODDZ,form(ST.AR)+2);

:: Obiekt z uwagami
{? var_pres('QKOMM')<100
|| exec('JCQ_decl','#message');
   QKOMM:=obj_new(@.CLASS.JCQ)
?};
QKOMM.init(250,,'Tworzenie dokumentu MW.'@);

{? var_press('_a')<0 | var_press('_a')<>type_of('') | _a=''
|| {? _dialog
   || QKOMM.add('Brak lub błędny typ parametru [magazyn z] przy tworzeniu nagłówka dokumentu MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

{? var_press('_b')<0 | var_press('_b')<>type_of('')
|| _typ_dok:='RW'
|| _typ_dok:=_b
?};

:: Ustalenie magazynu dla dokumentu
_mg_z:=_a;
_mg_z_ref:=exec('FindInSet','#table','MG','MAGAZYNY',_mg_z,_mg_z,"MG.ref()",1,,null());
{?  _mg_z_ref=null()
|| {? _dialog
   || QKOMM.add('Nie odnaleziono magazynu (Z) przy tworzeniu nagłówka dokumentu XBO');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

:: Ustalenie typu dokumentu
_typ_dok_ref:=exec('FindInSet','#table','TYPYDOK','TYP',_typ_dok,_typ_dok,"TYPYDOK.ref()",1,,null());
{?  _typ_dok_ref=null()
|| {? _dialog
   || QKOMM.add('Nie odnaleziono typu dokumentu MW przy tworzeniu nagłówka');
      QKOMM.select()
    ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

:: Sprawdzenie czy jest co przenosić na bazie SL/SLD
_sld_eanl:=sql('select SLD.SCEAN,
                       SLD.IL,
                       SL.EANL,
                       SL.TW,
                       SL.M,
                       SL.MG
                  from @SLD join @SL
                 where SL.MG=:_a
              order by SL.M, SLD.SCEAN, SL.TW
              ',_mg_z_ref);
{? _sld_eanl.size()=0
|| {? _dialog
   || QKOMM.add('Brak stanu wg. wymiaró na magazynie do wydania na MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};

REZ.cntx_psh();
REZ.use('rezzw__');
_rezerwacje:=sql('select *
                    from REZ
                   where REZ.MG=:_a and REZ.SC<>\'\' and REZ.TYP=\'T\'
                order by REZ.SC
               ',_mg_z_ref);
REZ.cntx_pop();

_sc:=sql('select SC.*,M.KTM as M_KTM,M.N as M_N, JM.KOD as JM
            from @SC
            join M using(SC.M,M.REFERENCE)
            join JM using(M.J,JM.REFERENCE)
           where SC.MAG=:_a and SC.S>0
        order by SC.M, SC.SRDK, SC.SCEAN
           ', _mg_z_ref);

{? _sc.size()=0
|| {? _dialog
   || QKOMM.add('Brak stanu na magazynie do wydania na MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};


:: Przeliczenie jednostek, ilości do wydania, usunięcie niepotrzebnych zapisów.

:: NUCO - Dodanie zaokrąglenia jednostek typu szt. do pełnych (zawsze w górę)
_q_lista_jm:=exec('get_w','#params',999006,type_of(''));

_sc.clear();
{? _sc.first() & _q_lista_jm<>''
|| {!
   |? _usun:=1;
     {? _q_lista_jm*(','+_sc.JM+',')>0
     || _sc.S:=_sc.S-int(_sc.S);
        _sc.put();
        {? _sc.S>0
        || _usun:=0
        ?}
     ?};
     {? _usun
     || _sc.del()
     || _sc.next()
     ?}
   !}
|| {? _dialog
   || QKOMM.add('Brak parametru 999006 - brak możliwości dalszej pracy');
      QKOMM.select()
   ?}
?};

:: odjęcie rezerwacji
{? _rezerwacje.first()
|| {!
   |? _sc.clear();
      _sc.prefix(_rezerwacje.M, _rezerwacje.SC);
      {? _sc.first()
      || _sc.S:=_sc.S-_rezerwacje.ILR;
::         _nunik:=sql('select :_a.SCEAN from :_a where :_a.SCEAN=\':_b\'',_nieunikalne,_sc.SCEAN).first();
         {? _sc.S<=0
         || _sc.del()
         || _sc.put()
         ?}
      ?};
      _rezerwacje.next()
   !}
?};
_sc.clear();
{? _sc.size()=0
|| {? _dialog
   || QKOMM.add('Po odjęciu rezerwacji brak stanu na magazynie do wydania na MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};

DK.clear();
ND.clear();

:: Tworzenie nagłówka dokumentu
_nd_ref:=exec('addnag','magdok_nag',_mg_z_ref,_data_dok~1,_data_dok~2,_typ_dok_ref,'N',,_data_dok,,,,,,,,,0);

:: Jeśli powstał nagłówek to tworzymy pozycje dokumentu
{? _nd_ref<>null()
|| {? ND.seek(_nd_ref)
   || _sc.first();
::    Petla po stanach magazynowych + weryfikacja rezerwacji
      {!
      |? _m_ref:=exec('FindAndGet','#table',M,_sc.M);
         _dk_c_ref:=exec('FindAndGet','#table',DK_C,_sc.DK_C);
         _stats_ref:=exec('FindAndGet','#table',STATS,_sc.STATS);
::      Dodawanie pozycji dokumentu
        {? (_dk_ref:=exec('adddk','magdok_poz',_nd_ref,_m_ref,_sc.S,_sc.C,_sc.D,,,,,,,,7
                                        ,_sc.RDK,_sc.NDK,_dk_c_ref,_sc.SRDK,_sc.PRDK,,,,,,_stats_ref,_sc.SCEAN,_sc.TW))<>null()
        || DK.clear();
           {? DK.seek(_dk_ref)
           || DK.IL2:=DK.IL;
              DK.WS2:=1;
              DK.put();
              _sld_eanl.clear();
              _sld_eanl.prefix(_sc.M,_sc.SCEAN,_sc.TW);
              _rozpisz:=DK.IL;
              {? _sld_eanl.first()
              || {!
                 |? EANX.EANL:=exec('FindAndGet','#table',EANL,_sld_eanl.EANL);
                    EANX.TW:=_sld_eanl.TW;
                    {? _sld_eanl.IL>=_rozpisz
                    || _sld_eanl.IL:=_sld_eanl.IL-_rozpisz;
                       _sld_eanl.put();
                       _ilosc:=_rozpisz;
                       _rozpisz:=0
                    || _ilosc:=_sld_eanl.IL;
                       _rozpisz:=_rozpisz-_sld_eanl.IL;
                       _sld_eanl.IL:=0;
                       _sld_eanl.put()
                    ?};
::                  Dodanie pozycji DK_L
                    exec('add2dk_l','magdok_wspolne',DK.ref(),null,EANX.EANL,null,EANX.TW,date(0,0,0),
                                                     _ilosc,DK.N().MAG,DK.M,,,,,,,_sld_eanl.SCEAN,_sc.SRDK);
                    _rozpisz>0 & _sld_eanl.next()
                 !}
              ?};
              {? _rozpisz>0
              || {? _dialog
                 || QKOMM.sect_beg('%1 - nie udało się rozpisać całej ilości na wymiarach'@[DK.M().KTM]);
                    QKOMM.add('ID: %1 ; Ilość - %2 ; Lokalizacja - ???'@[DK.SCEAN,$DK.IL])
                 ?};
                 DK_L.cntx_psh();
                 DK_L.index('DK');
                 DK_L.clear();
                 DK_L.prefix(DK.ref);
                 {? DK_L.first()
                 || {!
                    |? {? _dialog
                       || QKOMM.add('ID: %1 ; Ilość - %2 ; Lokalizacja - %3'@[DK_L.SCEAN,$DK_L.IL, DK_L.LOK().KOD])
                       ?};
                       DK_L.del
                    !}
                 ?};
                 {? _dialog
                 || QKOMM.sect_end()
                 ?};
                 DK_L.cntx_pop();
::               Ponieważ rekord nie jest do końca rozpisany musi być skasowany
                 params_exec('usun_dk','magdok_poz',1)
              ?}
           ?}
        || {? _dialog
           || QKOMM.add('Nie udało się dodać pozycji do dokumentu')
           ?}
        ?};
        _sc.next()
      !};
::    Sprawdzam czy jest choć jedna pozycja - jeśli nie usówam nagłówek
      {? ~(sql('select DK.P from DK where DK.N=:_a',_nd_ref).first())
      ||  {? ND.seek(_nd_ref)
          || _nd_ref:=null();
             ND.del()
          ?}
      ?};
::    Aktualizacja nagłówka dokumentu
      exec('dk_sum','magdok_wspolne',ND.ref())
   || _nd_ref:=null()
   ?}
|| {? _dialog
   || QKOMM.add('Nie udało się dodać nagłówka dokumentu XBO')
   ?}
?};

:: Wyświetlenie dodatkowych informacji
{? _dialog
|| QKOMM.select()
?};


:: Przywracanie kontekstu tabel MAGAZYNOWYCH
exec('mag_pop','open_tab');

_nd_ref


\dodaj_rw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja wyświetla zapisane w EANN dokumenty i jednego z listy usówa zgodne pozycje (lub zmniejsza ilości na poz
::       Dokumentu na którym aktualnie jest wykonywana.
::   WE: Wersja uproszczona bez lokalizacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------

VAR_DEL.delete('q_il_poz');


:: Kilka zabezpieczeń
{? cur_tab()<>ND
|| FUN.error('Nie jesteś ustawiony na nagłówku dokumentu magazynowego, wykonanie funkcji jest niemożliwe');
   return(0)
?};

{? ND.Z<>'N'
|| FUN.error('Redakcja dokumentu jest zakończona, wykonanie funkcji jest niemożliwe');
   return(0)
?};

:: Wyświetlenie tabeli EANN
ST.ODDZ:='w';
EANN.cntx_psh();
EANP.cntx_psh();
exec('openean','open_tab',ST.ODDZ+'__');
EANN.index('SYM');
EANN.prefix('I');
EANN.last();
EANP.index('EANN');
EANP.prefix(EANN.ref);
EANP.first();
EANN.win_sel('GRP');
EANN.actions('WYB','Rr:Rr');
EANN.select();
{? FUN.ask('Czy chcesz uzgodnić pozycje dokumentu %1 z inwentaryzacją %2?'[ND.SYM,EANN.SYM])
|| ND.cntx_psh();
   DK.cntx_psh();
   DK_L.cntx_psh();
   DK_L.index('DK');
   EANP.clear();
   EANP.prefix(EANN.ref());
   _form:="{? DK.IL>q_il_z
           || DK.IL:=DK.IL-q_il_z;
              q_il_z:=0;
              DK.WAR:=(DK.IL*DK.C)$2;
              DK.IL2:=DK.IL*DK.WS2;
              DK.put();
              DK_L.clear();
              DK_L.prefix(DK.ref);
              {? DK_L.first()
              || DK_L.IL:=DK.IL;
                 DK_L.put()
              ?}
           || q_il_z:=q_il_z-DK.IL;
              params_exec('usun_dk','magdok_poz',1)
           ?};
           1";
   {? EANP.first() & EANN.TXT1=''
   || {!
      |? {? EANP.GS1=''
         || q_il_z:=EANP.ILS;
            _dk_poz:=sql('select DK.DOST, DK.REFERENCE as REF, DK.IL from DK where DK.N=:_a and DK.SCEAN=:_b',ND.ref(),EANP.SCEAN);
            {? _dk_poz.last()
            || {!
               |? exec('FindAndGet','#table',DK,_dk_poz.REF,,_form,0);
                  _dk_poz.prev() & q_il_z<>0
               !}
            ?};
::       Ilość jaką udało się usunąć z RW
            EANP.WAGANT:=q_il_z;
            EANP.GS1:='x';
            EANP.put();
            &_dk_poz
         ?};
         EANP.next()
      !};
      exec('aktu_poz','magdok_poz')
   ?};
   EANN.TXT1:='Uzgodniono z RW'; EANN.put();
   ND.cntx_pop();
   DK.cntx_pop();
   DK_L.cntx_pop()
?};
EANN.actions('WYB');
EANN.cntx_pop();
EANP.cntx_pop();
VAR_DEL.delete('q_il_poz');
~~


\usun_z_rw2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja wyświetla zapisane w EANN dokumenty i usuówa je z RW - wersja uproszczona
::   WE: Wersja uproszczona bez lokalizacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------

VAR_DEL.delete('q_il_poz');


:: Kilka zabezpieczeń
{? cur_tab()<>ND
|| FUN.error('Nie jesteś ustawiony na nagłówku dokumentu magazynowego, wykonanie funkcji jest niemożliwe');
   return(0)
?};

{? ND.Z<>'N'
|| FUN.error('Redakcja dokumentu jest zakończona, wykonanie funkcji jest niemożliwe');
   return(0)
?};

:: Wyświetlenie tabeli EANN
ST.ODDZ:='w';
EANN.cntx_psh();
EANP.cntx_psh();
exec('openean','open_tab',ST.ODDZ+'__');
EANN.index('SYM');
EANN.prefix('I');
EANN.last();
EANP.index('EANN');
EANP.prefix(EANN.ref);
EANP.first();
EANN.win_sel('GRP');
EANN.actions('WYB','Rr:Rr');
EANN.select();
{? FUN.ask('Czy chcesz uzgodnić pozycje dokumentu %1 z inwentaryzacją %2?'[ND.SYM,EANN.SYM])
|| ND.cntx_psh();
   DK.cntx_psh();
   DK_L.cntx_psh();
   DK_L.index('DK');
   EANP.clear();
   EANP.prefix(EANN.ref());
   _form:="{? DK.IL>q_il_z
           || DK.IL:=DK.IL-q_il_z;
              q_il_z:=0;
              DK.WAR:=(DK.IL*DK.C)$2;
              DK.IL2:=DK.IL*DK.WS2;
              DK.put();
              DK_L.clear();
              DK_L.prefix(DK.ref);
              {? DK_L.first()
              || DK_L.IL:=DK.IL;
                 DK_L.put()
              ?}
           || q_il_z:=q_il_z-DK.IL;
              params_exec('usun_dk','magdok_poz',1)
           ?};
           1";
   {? EANP.first() & EANN.TXT1=''
   || {!
      |? {? EANP.GS1='' & EANP.SCEAN<>''
         || q_il_z:=EANP.ILS;
            _dk_poz:=sql('select DK.DOST, DK.REFERENCE as REF, DK.IL from DK where DK.N=:_a and DK.SCEAN=:_b',ND.ref(),EANP.SCEAN);
            {? _dk_poz.last()
            || {!
               |? exec('FindAndGet','#table',DK,_dk_poz.REF,,_form,0);
                  _dk_poz.prev() & q_il_z<>0
               !}
            ?};
::       Ilość jaką udało się usunąć z RW
            EANP.WAGANT:=q_il_z;
            EANP.GS1:='x';
            EANP.put();
            &_dk_poz
         ?};
         EANP.next()
      !};
      exec('aktu_poz','magdok_poz')
   ?};
   EANN.TXT1:='Uzgodniono z RW'; EANN.put();
   ND.cntx_pop();
   DK.cntx_pop();
   DK_L.cntx_pop()
?};
EANN.actions('WYB');
EANN.cntx_pop();
EANP.cntx_pop();
VAR_DEL.delete('q_il_poz');
~~


\dodaj_reo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja wyświetla zapisane w EANN dokumenty i tworzy zapisy DK_L do aktulnej reorganizacji
::   WE: Wersja uproszczona bez lokalizacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Kilka zabezpieczeń
{? cur_tab()<>DK_L
|| FUN.error('Nie jesteś ustawiony na pozycjach reorganizacji, wykonanie funkcji jest niemożliwe');
   return(0)
?};

{? DK_LN.AKC<>'N'
|| FUN.error('Redakcja reorganizacji jest zakończona, wykonanie funkcji jest niemożliwe');
   return(0)
?};

:: Wyświetlenie tabeli EANN
ST.ODDZ:='w';
EANN.cntx_psh();
EANP.cntx_psh();
exec('openean','open_tab',ST.ODDZ+'__');
EANN.index('SYM');
EANN.prefix('I');
EANN.last();
EANP.index('EANN');
EANP.prefix(EANN.ref);
EANP.first();
EANN.win_sel('GRP');
EANN.actions('WYB','Rr:Rr');
EANN.select();
{? FUN.ask('Czy chcesz dodać pozycje do reorganizacji z dnia: %1 z inwentaryzacją %2?'[$DK_LN.D+' - '+$DK_LN.TM,EANN.SYM])
|| ND.cntx_psh();
   DK.cntx_psh();
   DK_L.cntx_psh();
   DK_L.index('DK');
   EANP.clear();
   EANP.prefix(EANN.ref());
   {? EANP.first() & EANN.TXT1='Uzgodniono z RW'
   || {!
      |? {? EANP.GS1='x'
         || EANP.ILS;
            _sc:=sql('select SC.SRDK from SC where SC.MAG=:_a and SC.M=:_b and SC.SCEAN=\':_c\'',DK_LN.MG,EANP.M,EANP.SCEAN);
            _dostawa:={? _sc.size()=1
                      || _sc.SRDK
                      || ''
                      ?};
             exec('add2dk_l','magdok_wspolne',null,DK_LN.ref()
                               ,DK_LN.MG().EANL,EANP.LOKZ,EANP.TW,EANP.TW,EANP.ILS
                               ,DK_LN.MG,EANP.M,,,,,,,EANP.SCEAN,{? _dostawa<>'' || _dostawa ?});
            {? _dostawa=''
::            Bez konkretnej dostawy - do uzupełnienia ręcznie
            || EANP.GS1:='x+r'
::            Odnaleziono odpowiednią dostawę
            || EANP.GS1:='x+r+d'
            ?};
            &_sc;
            EANP.put()
         ?};
         EANP.next()
      !}
   ?};
   EANN.TXT1:='Uzgodniono z RW i umieszczono na reorganizacji z dnia: '+$DK_LN.D+' - '+$DK_LN.TM; EANN.put();
   ND.cntx_pop();
   DK.cntx_pop();
   DK_L.cntx_pop()
?};
EANN.actions('WYB');
EANN.cntx_pop();
EANP.cntx_pop();
~~


\wydaj_mw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS:  Funkcja rozchoduje stan magazynowy na dokumencie MW - dla potrzeb przesunięć na koniec roku
::   WE: _a MG.SYM (magazyn z)
::       [_b] - dpmyślnie 'MW' - typ dokumentu
::       [_c] - dodatkowy warunek w postaci stringu np. 'M.KTM like \'02-%\'' domyślnie '1=1'
::   WY: _wyn - ref utworzonego dokumentu.
::----------------------------------------------------------------------------------------------------------------------
_dialog:=0;

undefine();
define('DT',date,'Data dokumentu');
{? ~def_edit(,'Podaj datę dokumentu (z aktualnego miesiąca)')
|| return(0)
|| _data_dok:=DEFINE.DT
?};


ST.AR:=_data_dok~1;
ST.AM:=_data_dok~2;
ST.ODDZ:='w';

:: Zapamiętanie kontekstu baz MAGAZYNOWYCH
exec('mag_psh','open_tab');

:: Otwarcie masek MAGAZYNOWYCH
exec('mag_open','open_tab',ST.ODDZ,form(ST.AR)+2);

:: Obiekt z uwagami
{? var_pres('QKOMM')<100
|| exec('JCQ_decl','#message');
   QKOMM:=obj_new(@.CLASS.JCQ)
?};
QKOMM.init(250,,'Tworzenie dokumentu MW.'@);

{? var_press('_a')<0 | var_press('_a')<>type_of('') | _a=''
|| {? _dialog
   || QKOMM.add('Brak lub błędny typ parametru [magazyn z] przy tworzeniu nagłówka dokumentu MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

{? var_press('_b')<0 | var_press('_b')<>type_of('')
|| _typ_dok:='MW'
|| _typ_dok:=_b
?};

{? var_press('_c')<0 | var_press('_c')<>type_of('')
|| _warunek:='1=1'
|| _warunek:=_c
?};

:: Ustalenie magazynu dla dokumentu
_mg_z:=_a;
_mg_z_ref:=exec('FindInSet','#table','MG','MAGAZYNY',_mg_z,_mg_z,"MG.ref()",1,,null());
{?  _mg_z_ref=null()
|| {? _dialog
   || QKOMM.add('Nie odnaleziono magazynu (Z) przy tworzeniu nagłówka dokumentu XBO');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

:: Ustalenie typu dokumentu
_typ_dok_ref:=exec('FindInSet','#table','TYPYDOK','TYP',_typ_dok,_typ_dok,"TYPYDOK.ref()",1,,null());
{?  _typ_dok_ref=null()
|| {? _dialog
   || QKOMM.add('Nie odnaleziono typu dokumentu MW przy tworzeniu nagłówka');
      QKOMM.select()
    ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null())
?};

:: Sprawdzenie czy jest co przenosić na bazie SL/SLD
_sld_eanl:=sql('select SLD.SCEAN,
                       SLD.IL,
                       SL.EANL,
                       SL.TW,
                       SL.M,
                       SL.MG
                  from @SLD join @SL
                 where SL.MG=:_a
              order by SL.M, SLD.SCEAN, SL.TW
              ',_mg_z_ref);
{? _sld_eanl.size()=0
|| {? _dialog
   || QKOMM.add('Brak stanu wg. wymiaró na magazynie do wydania na MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};

REZ.cntx_psh();
REZ.use('rezzw__');
_rezerwacje:=sql('select *
                    from REZ
                   where REZ.MG=:_a and REZ.SC<>\'\' and REZ.TYP=\'T\'
                order by REZ.SC
               ',_mg_z_ref);
REZ.cntx_pop();

_sc:=sql('select SC.*,M.KTM as M_KTM,M.N as M_N
            from @SC
            join M using(SC.M,M.REFERENCE)
           where SC.MAG=:_a and SC.S>0 and :_b
        order by SC.M, SC.SRDK, SC.SCEAN
           ', _mg_z_ref, _warunek);

{? _sc.size()=0
|| {? _dialog
   || QKOMM.add('Brak stanu na magazynie do wydania na MW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};


:: Weryfikacja i usunięcie rekordów które chcemy zachować.
::_sc.clear();
::{? _sc.first()
::|| {!
::   |? _usun:=0;
::      {? (3+_sc.M_KTM='01-') & (2+_sc.M_N='m.'|2+_sc.M_N='M.')
::      || _usun:=1
::      ?};
::      {? _usun
::      || _sc.del()
::      || _sc.next()
::      ?}
::   !}
::?};

:: odjęcie rezerwacji
{? _rezerwacje.first()
|| {!
   |? _sc.clear();
      _sc.prefix(_rezerwacje.M, _rezerwacje.SC);
      {? _sc.first()
      || _sc.S:=_sc.S-_rezerwacje.ILR;
::         _nunik:=sql('select :_a.SCEAN from :_a where :_a.SCEAN=\':_b\'',_nieunikalne,_sc.SCEAN).first();
         {? _sc.S<=0
         || _sc.del()
         || _sc.put()
         ?}
      ?};
      _rezerwacje.next()
   !}
?};
_sc.clear();
{? _sc.size()=0
|| {? _dialog
   || QKOMM.add('Po odjęciu rezerwacji brak stanu na magazynie do wydania na RW');
      QKOMM.select()
   ?};
:: Przywracanie kontekstu tabel MAGAZYNOWYCH
   exec('mag_pop','open_tab');
   return(null)
?};

DK.clear();
ND.clear();

:: Tworzenie nagłówka dokumentu
_nd_ref:=exec('addnag','magdok_nag',_mg_z_ref,_data_dok~1,_data_dok~2,_typ_dok_ref,'N',,_data_dok,,,,,,,,,0);

:: Jeśli powstał nagłówek to tworzymy pozycje dokumentu
{? _nd_ref<>null()
|| {? ND.seek(_nd_ref)
   || _sc.first();
::    Petla po stanach magazynowych + weryfikacja rezerwacji
      {!
      |? _m_ref:=exec('FindAndGet','#table',M,_sc.M);
         _dk_c_ref:=exec('FindAndGet','#table',DK_C,_sc.DK_C);
         _stats_ref:=exec('FindAndGet','#table',STATS,_sc.STATS);
::      Dodawanie pozycji dokumentu
        {? (_dk_ref:=exec('adddk','magdok_poz',_nd_ref,_m_ref,_sc.S,_sc.C,_sc.D,,,,,,,,7
                                        ,_sc.RDK,_sc.NDK,_dk_c_ref,_sc.SRDK,_sc.PRDK,,,,,,_stats_ref,_sc.SCEAN,_sc.TW))<>null()
        || DK.clear();
           {? DK.seek(_dk_ref)
           || DK.IL2:=DK.IL;
              DK.WS2:=1;
              DK.put();
              _sld_eanl.clear();
              _sld_eanl.prefix(_sc.M,_sc.SCEAN,_sc.TW);
              _rozpisz:=DK.IL;
              {? _sld_eanl.first()
              || {!
                 |? EANX.EANL:=exec('FindAndGet','#table',EANL,_sld_eanl.EANL);
                    EANX.TW:=_sld_eanl.TW;
                    {? _sld_eanl.IL>=_rozpisz
                    || _sld_eanl.IL:=_sld_eanl.IL-_rozpisz;
                       _sld_eanl.put();
                       _ilosc:=_rozpisz;
                       _rozpisz:=0
                    || _ilosc:=_sld_eanl.IL;
                       _rozpisz:=_rozpisz-_sld_eanl.IL;
                       _sld_eanl.IL:=0;
                       _sld_eanl.put()
                    ?};
::                  Dodanie pozycji DK_L
                    exec('add2dk_l','magdok_wspolne',DK.ref(),null,EANX.EANL,null,EANX.TW,date(0,0,0),
                                                     _ilosc,DK.N().MAG,DK.M,,,,,,,_sld_eanl.SCEAN,_sc.SRDK);
                    _rozpisz>0 & _sld_eanl.next()
                 !}
              ?};
              {? _rozpisz>0
              || {? _dialog
                 || QKOMM.sect_beg('%1 - nie udało się rozpisać całej ilości na wymiarach'@[DK.M().KTM]);
                    QKOMM.add('ID: %1 ; Ilość - %2 ; Lokalizacja - ???'@[DK.SCEAN,$DK.IL])
                 ?};
                 DK_L.cntx_psh();
                 DK_L.index('DK');
                 DK_L.clear();
                 DK_L.prefix(DK.ref);
                 {? DK_L.first()
                 || {!
                    |? {? _dialog
                       || QKOMM.add('ID: %1 ; Ilość - %2 ; Lokalizacja - %3'@[DK_L.SCEAN,$DK_L.IL, DK_L.LOK().KOD])
                       ?};
                       DK_L.del
                    !}
                 ?};
                 {? _dialog
                 || QKOMM.sect_end()
                 ?};
                 DK_L.cntx_pop();
::               Ponieważ rekord nie jest do końca rozpisany musi być skasowany
                 params_exec('usun_dk','magdok_poz',1)
              ?}
           ?}
        || {? _dialog
           || QKOMM.add('Nie udało się dodać pozycji do dokumentu')
           ?}
        ?};
        _sc.next()
      !};
::    Sprawdzam czy jest choć jedna pozycja - jeśli nie usówam nagłówek
      {? ~(sql('select DK.P from DK where DK.N=:_a',_nd_ref).first())
      ||  {? ND.seek(_nd_ref)
          || _nd_ref:=null();
             ND.del()
          ?}
      ?};
::    Aktualizacja nagłówka dokumentu
      exec('dk_sum','magdok_wspolne',ND.ref())
   || _nd_ref:=null()
   ?}
|| {? _dialog
   || QKOMM.add('Nie udało się dodać nagłówka dokumentu XBO')
   ?}
?};

:: Wyświetlenie dodatkowych informacji
{? _dialog
|| QKOMM.select()
?};


:: Przywracanie kontekstu tabel MAGAZYNOWYCH
exec('mag_pop','open_tab');

_nd_ref


\pop_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Funkcja umożliwia poprawienie kontrahenta na dokumencie magazynowym zewnętrznym, przychodowym
::       w celu uzgodnienia dokumentów z przesłaną fakturą zakupową. Wywoływana w oknie WERP tabeli ND (X)Funkcje NUCO
::       Funkcja dostępna tylko dla użytkownika posiadającego rolę "Zmiana kontrahenta"
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;

:: Obiekt z uwagami
{? var_pres('QKOMM')<100
|| exec('JCQ_decl','#message');
   QKOMM:=obj_new(@.CLASS.JCQ)
?};
QKOMM.init(250,,'Zmiana kontrahenta na dokumencie magazynowym.'@);

::Weryfikacja czy jest możliwa zmiana kontrahenta
{? ND.Z<>'T'
|| _ok:=0;
   QKOMM.add('Dokument nie jest zakończony - popraw kontrahenta standardową funkcją POPRAW')
?};

{? exec('sprdk2fp','magdok_wspolne',ND.ref(),'Z',1)<>1
   | exec('sprdk2fp','magdok_wspolne',ND.ref(),'E',1)<>1
|| _ok:=0;
   QKOMM.add('Dokument powiązany z fakturą zakupu - zmiana kontrahenta nie jest możliwa')
?};

{? ND.ZAK='T'
|| _ok:=0;
   QKOMM.add('Dokument %1 jest zaksięgowany - zmiana kontrahenta nie jest możliwa'[ND.SYM])
?};

{? exec('user_role_chk','dokum',OPERATOR.USR_KOD,'Korekta kontrahenta PZ')=0
|| _ok:=0;
   QKOMM.add('Brak uprawnień do korekty kontrahenta na zaakceptowanym dokumencie')
?};

{? ND.TYP().T<>'PZ'
|| _ok:=0;
   QKOMM.add('Dokument nie jest typu PZ - zmiana kontrahenta nie jest możliwa')
?};


{? _ok=0
|| QKOMM.select();
   return(0)
?};

:: główna funkcja zmiany kontrahenta
ROZNE.KH_WYB:=ND.KH;
:: zmienna potrzebna dla edycji pola KH_WYB
ROZNE.ZAKR_ROZ:=2;

_edit:=ROZNE.mk_edit('Zmiana kontrahenta',0);
ROZNE.win_efld(_edit,,'KH_WYB','KOD','KOD1',,,0,'Kod kontrahenta:');
ROZNE.win_efld(_edit,,'KH_WYB','NAZ',,,,1,'Nazwa kontrahenta:');
ROZNE.win_edit(_edit);
{? ROZNE.edit() & ROZNE.KH_WYB<>null() & ND.KH<>ROZNE.KH_WYB
|| ND.KH:=ROZNE.KH_WYB;
   ND.put();
   DK.cntx_psh();
   DK.index('DOKMAG');
   DK.prefix(ND.ref);
   {? DK.first()
   || {!|? DK.KH:=DK.N().KH; DK.put(); DK.next() !}
   ?};
   FUN.info('Zmienono kontrahenta dla dokumntu %1 na %2.'[ND.SYM, ND.KH().KOD]);
   DK.cntx_pop()
|| FUN.info('Zrezygnowano ze zmiany kontrahenta dla dokumntu %1'[ND.SYM]);
   _ok:=0
?};

_ok


\walid_mw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_2226]
:: OPIS: Walidacja dokumentów mw jeśli magazyn docelowy jest magazynem wydziałowym to wszystkie pozycje muszą mieć
::       dostawy o statusie zgodnym
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=1;

{? ND.MD().W='T'
|| _tab_dk:=sql('select DK.P from DK join STATS where DK.N=:_a and STATS.KIND<>\'Z\'', ND.ref);
   {? _tab_dk.first()
   || _poz:='';
      {!
      |? _poz+=$_tab_dk.P+', ';
         _tab_dk.next()
      !};
      FUN.emsg('Niedozwolone jest przesunięcie na magazyn produkcyjny dostaw ze statusem innym niż zgodny.\n'+
               'Pozycje nr: '+_poz+'posiadają dostawy o statusach nie pozwalających na zakończenie redakcji dokumentu');
      _result:=0
   ?}
?};
:: Zmiany Sitek
{? ND.MD().W='N'
|| _tab_dk:=sql('select DK.P, M.KTM from DK join M using (DK.M,M.REFERENCE) where DK.N=:_a', ND.ref);
   {? _tab_dk.first()
   || _poz:='';
      {!
      |? _ktm:=2+_tab_dk.KTM;
         _mg:=ND.MD().SYM;
         {? (_mg='SUR' | _mg='SUR2' | _mg='SUR4') & _ktm<>'07'
         || _poz+='Pozycja nr: '+$_tab_dk.P+' - '+$_tab_dk.KTM+'\n'
         |? _mg='MAP' & _ktm<>'05'
         || _poz+='Pozycja nr: '+$_tab_dk.P+' - '+$_tab_dk.KTM+'\n'
         |? _mg='MAT' & _ktm<>'04'
         || _poz+='Pozycja nr: '+$_tab_dk.P+' - '+$_tab_dk.KTM+'\n'
         |? _mg='ZAO' & _ktm<>'03'
         || _poz+='Pozycja nr: '+$_tab_dk.P+' - '+$_tab_dk.KTM+'\n'
         |? (_mg='POL1' | _mg='POL2' | _mg='POL3' | _mg='POL4') & _ktm<>'01'
         || _poz+='Pozycja nr: '+$_tab_dk.P+' - '+$_tab_dk.KTM+'\n'
         ?};
         _tab_dk.next()
      !};
      {? _poz<>''
      || FUN.emsg('Niedozwolone jest przesunięcie na magazyn główny '+ND.MD().SYM+' poniższych indeksów:\n'+
               _poz+
            '1. Usuń powyższe pozycje i spróbuj ponownie zaakceptować dokument przesunięcia.\n'+
            '2. Powyższe pozycje powinny zostać przesunięte na inny magazyn główny.');
         _result:=0
     ?}
   ?}
?};
_result



\arch_zk_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00] - na podstawie archiwizuj z pliku !lmg_zam_dazs
:: OPIS: Zamówienie wewnętrzne - Archiwizacja zamówienia wewnętrznego
::       Wykorzystywane w procesie wymaga aby na p1 - znalazł się ZK_N.ref lub $ZK_N.ref do archiwizacji
::   WE:
::       params_get()
::  OLD: \zam_arch/zk2.fml
::----------------------------------------------------------------------------------------------------------------------

exec('declare','tech_doc');

_mp:=params_get().mp;
_in:=params_get().in;
_out:=params_get().out;

_zk_n:=null();

{? var_pres('p01',_in)=type_of('')
|| _zk_n:=exec('FindAndGet','#table',Z_KP,_in.p01,,null())
|? var_pres('p01',_in)=type_of(null())
|| _zk_n:=_in.p01
?};

_result:=0;

:: czynność serwisowa
{? _zk_n<>null()
|| exec('openz_psh','open_tab');
   _oddz:='w';
   _today:=date();
   ST.ODDZ:='w';
   exec('openz','open_tab',_oddz+'__');
   ZK_N.cntx_psh();
   ZK_N.clear();
   {? ZK_N.seek(_zk_n)
   || {? ZK_N.r_lock(1,1,1,#_zk_n,ref_name(_zk_n)) & (ZK_N.seek(_zk_n);ZK_N.r_unlock();1)
      || _old:=ZK_N.uidref();
         _result:=(_new:=exec('zam_arch','zamsiw_wspolne'))<>'';
         exec('uidref_update','#b__box',_old,exec('FindAndGet','#table',ZK_N,_new,,"uidref()",''))
      ?}
   ?};
   ZK_N.cntx_pop()
?};
exec('openz_pop','open_tab');
_mp.done();
_result

