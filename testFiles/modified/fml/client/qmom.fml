:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: qmom.fml
:: Utworzony: 06.02.2019
:: Autor: PeKa
:: Systemy: EMAG
::======================================================================================================================
:: Zawartość: Formuly zwiazane z obsluga urzadzen mobilnych
::======================================================================================================================
:: Scenariusz uruchomnienia:
:: 1. Wykonać exec('tech_przn_lok','qmom') - zmiany w lokalizacjach
:: 2. Wykonać exec('lok_tech','qmom') - dodanie lokalizacji technicznej do magazynów z lolkalizacjami
:: 3. Wykonać exec('kop_sl','qmom') - kopia aktualnej bazy SL do maski technicznej - pozwoli na zachowanie danych
::    o lokalizacjach i stanach z przed przeniesienia - dodatkowa funkcja wyświetlająca dane z przed przeniesienia
::    dla wybranego magazynu i materiału
:: 4. Wykonać exec('usun','qmom') - usunięcie wszystkich zapisów z DK_L i DL_LN
:: 5  Wykonać funkcję - exec('uzup_m','qmom') - funkcja uzupełnia odpowiednie parametry dla bazy M na podstawie
::    informacji z SM (czy towar występuje w magazynie) dla magazynów - lista do uzupełnienia.
:: 6. Wykonać exec('nadaj_scean','qmom') - nadanie kodu identyfikacyjnego dla wszystkich dostaw znajdujących się
::    aktualnie na stanie wszystkich magazynów
:: 7. Wykonaj exec('analiza','qmom') - nadaje termin ważności dla dostaw SC, DK dla dostaw dla których można
::    go jednoznacznie określić oraz nadaje lokalizację jesli można ją jednoznacznie określić.
:: 8. Wykonać exec('sc_dkl','qmom') - zbudowanie DKL na podstawie SC
::    Zmiana funkcji odtwarzającej stany wg. wymiarów w mag_fun.m.fml - Odtwarzanie stanów wg. wymiarów - odtwarzanie ma na celu umieszczenie
::    wszystkich towarów o stanie nie zerowym, lokalizacji 000-XXX (gdzie XXX jest lokalizacją techniczną do przepisania stanów
::    UWAGA PRZED URUCHOMIENIEM ZMIENIĆ DATE STARTU MOM
:: x. exec('hist_lok','qmom') - pokazuje okienko z historycznym stanem lokalizacji na podstawie bazy sl (technicznej)
:: x. Zmienić datę w mag_fun.m.fml formuła odtw_sl - tak aby formuła nie usuwała i nie tworzyła danych z przed przejścia
::    na wersje MOM
:: x. Zmienić datę w mag_fun.m.fml formuła wyc_dok - tak aby formuła nie usuwała akceptacji z przed przejścia
::    na wersje MOM
:: x. Dodanie urządzeń mobilnych oraz użytkowników
:: x. Dodanie IDADD - parametry operacji mobilnych
:: x. zmiana parametrów dokuentów rozchodowych na nie fifo
:: x. przydzielenie uprawnień dla użytkownik w sekcji kwalifikacja dostaw
:: x. ustawić domyślne statusy do magazynów
:: x. dodać zdarzenie do alerta QAKC_PZ exec('add_alert','qtech')
::

\qdruk_ety
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO_MOM]
:: OPIS: Wydruk etykiety dla dostawy
::----------------------------------------------------------------------------------------------------------------------
:: w wydruku ustalane miejsce wywołania
rep_exec('dokm_01aq')


\tech_przn_lok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO MOM]
:: OPIS: Zmiana kodów oraz kodów kreskowych dla lokalizacji, weryfikacja unikalnośici kodów,
::       dezaktywacja wszystkich lokalizacji, aktywacja odpowiednich lokalizacji wg. stanów lokalizacji
:: Lista do uruchomienia : 1
::----------------------------------------------------------------------------------------------------------------------
EANL.index('EAN');
EANL.clear();
SL.index('EANL');
SL.clear();

_formula:="
           {? EANL.EAN=''
           || EANL.EAN:=EANL.KOD
           ?};
           _be:=EANL.EAN;
           {? EANL.EAN<>''
           ||
              EANL.EAN:=gsub(EANL.EAN,'#','');
              EANL.EAN:=gsub(EANL.EAN,'///','/');
              EANL.EAN:=gsub(EANL.EAN,'//','/');
              EANL.EAN:=gsub(EANL.EAN,'.','');
              EANL.EAN:=gsub(EANL.EAN,' ','');
              EANL.EAN:=gsub(EANL.EAN,'WSTRZYMANE','WST,');
              EANL.EAN:=gsub(EANL.EAN,(EANL.MG().SYM+' - '),'');
              EANL.EAN:=gsub(EANL.EAN,(EANL.MG().SYM+'-'),'');
              {? EANL.EAN+1='/'
              || EANL.EAN:=EANL.EAN-1
              ?};
              {? EANL.EAN=''
              || EANL.EAN:='bzk'
              ?};
              {? EANL.ref()<>EANL.MG().EANL
              || EANL.AKT:='N';
                 EANL.EAN:=EANL.MG().SYM+' - '+EANL.EAN
              || EANL.AKT:='T';
                 EANL.EAN:=EANL.MG().SYM
              ?};
              EANL.KOD:=EANL.EAN;
              SL.clear();
              SL.index('EANL');
              SL.prefix(EANL.MG,EANL.ref);
              {? SL.first & EANL.ref()<>EANL.MG().EANL
              || EANL.AKT:='T';
                 EANL.EAN:=(+(EANL.MG().SYM+' - ')) - EANL.EAN
              ?};

              {? EANL.put(1)=0 | (sql('select EAN from EANL where EAN=\\':_a\\' and EANL.AKT=\\'T\\'',EANL.EAN)).size()>1
              || {!|?
                 EANL.EAN:='#'+EANL.EAN;
                 EANL.KOD:='#'+EANL.KOD;
                 EANL.put(1)=0 | (sql('select EAN from EANL where EAN=\\':_a\\' and EANL.AKT=\\'T\\'',EANL.EAN)).size()>1
                !}
              ?}
           ?}
          ";
:: pierwsze przypisanie
EANL.for_each(_formula,1);
:: weryfikacja aktywności
EANL.for_each(_formula,1);
1


\przenies_lok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [12.51]
:: OPIS: Weryfikuje i przenosi jedną lokalizację z miejsca do miejsca
::   WE: _a - lokalizacja do przeniesienie EANL.ref
::       _b - magazyn na jaki należy przenieść lokalizację
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_zmiana:=0;

{? EANL.seek(_a)
|| _eanl_kod:=exec('rb_nosp','#string',exec('repl_substr','#string',EANL.KOD,(' - '+EANL.MG().SYM),' '));
   {? _eanl_kod<>''
   || EANL.index('MG');
      MG.seek(_b);
      EANL.prefix('N',_b,_eanl_kod+' - '+MG.SYM, _eanl_kod+' - '+MG.SYM);
      {? EANL.first()
      || EANL.prefix();
         EANL.AKT:='T';
         EANL.EAN:=_eanl_kod;
         {? EANL.put(1)
         || _zmiana:=1
         ?}
      || EANL.prefix('T',_b,_eanl_kod+' - '+MG.SYM,_eanl_kod+' - '+MG.SYM);
         {? EANL.first()
         || FUN.info('Lokalizacja którą próbujesz przenieść jest już powiązana z tym magazynem')
         || EANL.blank();
            EANL.MG:=MG.ref();
            EANL.OP:=EANL.KOD:=_eanl_kod+' - '+MG.SYM;
            EANL.EAN:=_eanl_kod;
            EANL.AKT:='T';
            {? EANL.add(1)
            || _zmiana:=1
            ?}
         ?}

      ?};
      {? _zmiana
      || EANL.prefix();
         EANL.seek(_a);
         EANL.EAN:=_eanl_kod+' - '+EANL.MG().SYM;
         EANL.AKT:='N';
         EANL.put(1)
      ?}
   || FUN.info('Błąd przy przeniesieniu - błędny kod kreskowy lokalizacji')
   ?}
|| FUN.info('Błąd przy przeniesieniu - błędny parametr EANL.ref')
?}


\druk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO_MOM]
:: OPIS: Wydruk etykiet w zaleznosci o przekazanego kodu etykiey
::   WE: _a - kod etykiety
::      [_b] - konkretny typ drukarki
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>2 || _b:='' ?} || _b:='' ?};
:: PeKa - jesli uzytkownik ma wskazana etykiete w paramrtrach wydrukow to pobieram i nadpisuje ta z przeakazanego wydruku
_parety:=sql('select URZ_LAB.KOD as ETYKIETA from PARWYD join URZ_LAB where PARWYD.USER=:_a',OPERATOR.USER).ETYKIETA;
{? cli_ver()='jterm' & _a<>'' & _parety<>''
|| _a:=_parety
?};
_wyn:=1;
:: Sprawdzenie parametrow
{? _wyn=1
|| {? PAR_WYDR.TYPDR=null
   || FUN.emsg('Brak ustawionego typu drukarki w parametrach pracy.');
      _wyn:=0
   ?}
?};
{? _wyn=1
|| URZ_LAB.index('URZ_LAB');
   URZ_LAB.prefix(PAR_WYDR.TYPDR().URZ_KOM,_a,_a);
   {? URZ_LAB.first
   || PAR_WYDR.URZ_LAB:=URZ_LAB.ref
   || FUN.emsg('Brak zdefiniowanej etykiety o kodzie '+'_a'+' dla drukarki '+PAR_WYDR.TYPDR().NAZWA);
      _wyn:=0
   ?}
?};
{? _wyn & tabp.sel_size=0
:: wydruk etykiety dla pojedynczego rekordu - drukowana ilosc ustalona przez usera albo automatycznie w tabeli tabp
|| {! a:=1..tabp.IL
   |! exec('druk','kody_kresk',_b) !}
||    tabp.cntx_psh();
:: wydruk etykiety dla grupy rekordow - drukowana ilosc ustalona przez usera albo automatycznie w tabeli tabp
      {? tabp.first
      || {!
         |? {? tabp.sel_mark=1
            || {! a:=1..tabp.IL |! exec('druk','kody_kresk') !};
               tabp.sel_del
            ?};
            _next:=tabp.next;
            _urz_lab:=PAR_WYDR.URZ_LAB;
            {? _a='WYROBY' & _next & tabp.sel_mark=1
            ||
:: wydruk etykiety oznaczajaca przerwe miedzy etykietami (kolejna etykieta z tabeli)
               URZ_LAB.cntx_psh();
               URZ_LAB.index('URZ_LAB');
               URZ_LAB.prefix(PAR_WYDR.TYPDR().URZ_KOM,'WYROBY_PRZERWA','WYROBY_PRZERWA');
               {? URZ_LAB.first
               || PAR_WYDR.URZ_LAB:=URZ_LAB.ref;
                  exec('druk','kody_kresk')
               ?};
               URZ_LAB.cntx_pop();
               PAR_WYDR.URZ_LAB:=_urz_lab
            ?};
            _next
         !}
      ?};
      tabp.cntx_pop()
?};
_wyn


\ustaw_zaznaczenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP []
:: OPIS: tworzy bądź usówa tabelę z zaznaczeniem rekordów dla tebel M w menu użytkownika
::   WE: _a = 1 - tworzy tabelę, 0 - usówa tabelę
::   WY:
::----------------------------------------------------------------------------------------------------------------------

VAR_DEL.delete('__sel_m');

{? _a=1
|| __sel_m:=M.sel_aget()
?};
1


\kop_sl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO MOM]
:: OPIS: kopjuje bazę SL z aktualnej maski do maski techniczne (zapis archiwalny dla potrzeb analizy stanów wg. lokalizacji)
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------

SL.clear();
SL.f_clear();
_maska_aktualna:=SL.name();
_maska_techniczna:='stl__kop';
:: utworzenie bufora tabeli
_sl_buf:=exec('sl_buf','qmom');
{? SL.first()
|| _il:=0;
    {! |?
         SL.cntx_psh();
         _sl_buf.get();
         SL.use(_maska_techniczna);
         SL.blank();
         _sl_buf.setf();
         SL.add();
         _il+=1;
         echo('Dodano rekordów: '+$_il);
         SL.cntx_pop();
         SL.next()
    !}
?}


\sl_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO MOM]
:: OPIS:  Bufor tabeli SL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::               SL.ref()
_buffer:=$("obj_new('Ref'
::  _MG          Magazyn //Magazyn
                   ,'MG'
::  _M           Materiał //Indeks materiałowy
                   ,'M'
::  _EANL        Lokalizacja //Lokalizacja
                   ,'EANL'
::  DATE         Termin ważności //Termin ważności
                   ,'TW'
::  REAL         Ilość //Ilość na stanie wg wymiarów
                   ,'IL'
::  _JM          Jednostka miary //Jednostka miary
                   ,'JM'
::  _PAL         Paleta //Paleta
                   ,'PAL'
::  metoda          czyszczenie bufora blank(), gdy podany parametr ~~, to bl_void()
                   ,'blank'
::  metoda          czyszczenie bufora typem pustym bl_void()
                   ,'bl_void'
::  metoda          czyszczenie bufora za pomocą bufora tabeli bl_table()
                   ,'bl_table'
::  metoda          _buffer.get() - pobieranie zawartości bufora
                   ,'get'
::  metoda          _buffer.set() - pola<>~~ nanoszone do tabeli
                   ,'set'
::  metoda          _buffer.setf() - wszystkie pola nanoszone do tabeli
                   ,'setf'
::  metoda          _buffer.cntx_get(ref()/#ref()[,maska]) - wczytuje bufor podanych parametrów
                   ,'cntx_get'
::  metoda          _buffer.memo_put() - zapisuje wszystkie pola sys_memo tabeli
                   ,'memo_put'
::  metoda          _buffer.ref() - zwraca wartosc .Ref
                   ,'ref'
                   "+{? var_pres('_a')=3 & form(_a)<>'' || ","+_a || "" ?}+"
                   )");
_buffer:=_buffer();

:: metody - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_buffer.blank:="
                {? var_pres('_a')=0   || .bl_void()
                |? var_pres('_a')>100 || .bl_table(_a)
                || .bl_table(SL)
                ?}
               ";

_buffer.bl_void:="
                  .MG:=~~;
                  .M:=~~;
                  .EANL:=~~;
                  .TW:=~~;
                  .IL:=~~;
                  .JM:=~~;
                  .PAL:=~~;
                  .Ref:=null();
                  1
                 ";

_buffer.bl_table:="
                  _tab:=SL;
                  _tab.cntx_psh();
                  _tab.blank(1);
                  .get(SL,1);
                  _tab.cntx_pop();
                  _tab.get();
                  .Ref:=null();
                   1
                  ";

_buffer.get:="
              _db:={? var_pres('_b')=type_of(0) || _b || 0 ?};
              .MG:=SL.MG;
              .M:=SL.M;
              .EANL:=SL.EANL;
              .TW:=SL.TW;
              .IL:=SL.IL;
              .JM:=SL.JM;
              .PAL:=SL.PAL;
              .Ref:=SL.ref();
              (.)
             ";

_buffer.set:="
              {? .MG<>~~         || SL.MG:=.MG ?};
              {? .M<>~~          || SL.M:=.M ?};
              {? .EANL<>~~       || SL.EANL:=.EANL ?};
              {? .TW<>~~         || SL.TW:=.TW ?};
              {? .IL<>~~         || SL.IL:=.IL ?};
              {? .JM<>~~         || SL.JM:=.JM ?};
              {? .PAL<>~~        || SL.PAL:=.PAL ?};
              ~~
             ";

_buffer.setf:="
               SL.MG:=.MG;
               SL.M:=.M;
               SL.EANL:=.EANL;
               SL.TW:=.TW;
               SL.IL:=.IL;
               SL.JM:=.JM;
               SL.PAL:=.PAL;
               ~~
              ";

_buffer.cntx_get:="
                   _tab:=SL;
                   {? type_of(_a)=7 || _ref:=#_a; _mask:=ref_name(_a)
                   |? type_of(_a)=1 || _ref:=_a;  _mask:={? var_pres('_b')=2 || _b || _tab.name() ?}
                   || .blank(~~); return(.)
                   ?};
                   _tab.cntx_psh();
                   {? {? _tab.name()<>_mask
                      || _tab.use(_mask)
                      || 1
                      ?}
                   || _tab.prefix();
                      {? _tab.seek(_ref,)
                      || .get()
                      || .blank(~~)
                      ?}
                   || .blank(~~)
                   ?};
                   _tab.cntx_pop();
                   (.)
                  ";

_buffer.memo_put:="
                   ~~
                  ";

_buffer.ref:=".Ref";
:: czyszczenie bufora
_buffer.blank(~~);

:: zwracam bufor
_buffer


\lok_tech
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO MOM]
:: OPIS: Dodaje do koażdego magazynu lokalizację techniczną - 000-MAG (lokalizacja do rozpisania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EANL.clear();
EANL.f_clear();
EANL.index('EAN');
MG.clear();
MG.f_clear();
{? MG.first()
|| {! |?
         _kod:='000-'+MG.SYM;
         EANL.prefix(_kod,_kod);
         {? ~EANL.first()
         || EANL.clear();
            EANL.blank();
            EANL.KOD:=EANL.EAN:=_kod;
            EANL.AKT:='T';
            EANL.MG:=MG.ref();
            EANL.add()
         ?};
         _kod:='PROD-'+MG.SYM;
         EANL.prefix(_kod,_kod);
         {? ~EANL.first()
         || EANL.clear();
            EANL.blank();
            EANL.KOD:=EANL.EAN:=_kod;
            EANL.AKT:='T';
            EANL.MG:=MG.ref();
            EANL.add()
         ?};
         MG.next()
   !}
?}


\usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO MOM]
:: OPIS: Usunięcie wszystkich zapisów z bazy DK_L i DK_L.N
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_maski_dkl:=DK_L.names();
_maski_ndkl:=DK_LN.names();

_maski_dkl.first();
{!|? DK_L.use(_maski_dkl.NAME);
     DK_L.erase();
     echo('Usuwam tabelę - '+_maski_dkl.NAME);
     _maski_dkl.next()
!};

_maski_ndkl.first();
{!|? DK_LN.use(_maski_ndkl.NAME);
     DK_LN.erase();
     echo('Usuwam tabelę - '+_maski_ndkl.NAME);
     _maski_ndkl.next()
!};
:: Przywrócenie standardowych zapisów na M
:: Usunięcie kodów kreskowych
MKODK.erase();
:: Przywrócenie standardowych zapisów na M
M.prefix();
M.for_each(" M.IDMOB:='';
             M.CZY_TW:='N';
             M.SETW:='W';
             M.KODK:=M.KTM;
             M.put();
             e???xec('m_kody_akt','tkod',M.ref(),M.KTM,M.N,M.KODK)",1);

SLD.use('sld__wzb');
SLD.erase();
SL.use('stl__wzb');
SL.erase();

:: Wyczyszczenie bazy SC i DK
_maski:=SC.names();

{? _maski.first()
|| {!
   |? SC.use(_maski.NAME);
      SC.index('MG_DKC');
      SC.clear();
      {? SC.find_tab('first','S',,'>',0)
      || {!
         |? {? SC.SRDK=SC.PRDK
            || exec('FindAndGet','#table',DK,SC.PRDK,,"DK.SCEAN:='';DK.TW:=date(0,0,0); DK.put()",1)
            || exec('FindAndGet','#table',DK,SC.SRDK,,"DK.SCEAN:='';DK.TW:=date(0,0,0); DK.put()",1)
            ?};
            SC.SCEAN:=SC.WAR10:='';
            SC.TW:=date(0,0,0);
            SC.put();
            SC.find_tab('next','S',,'>',0)
         !}
      ?};
      echo('Usuwam tabelę - '+_maski.NAME);
      _maski.next()
   !}
?};
1


\m_param
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [12.51]
:: OPIS: Funkcja zmienia parametry na M tak aby był TW - wg. dostaw, dodaje kod kreskowy jeśli nie ma, typ identyfikatora
::       dla urządzeń mobilnych na D
::   WE: _a - M.ref
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? M.seek(_a)
|| M.IDMOB:='D';
   M.CZY_TW:='T';
   M.SETW:='P';
   {? M.KODK=''
   || M.KODK:=M.KTM
   ?};
   M.put()
?};
1


\autodruk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO MOM]
:: OPIS: Funkcja drukuje automatycznie etykiete na drukarce etykiet (naważkarnia) - po wpisaniu pozycji na urządzeniu MOM
::   WE: _a - $EANP.ref
::       _b - nazwa etykiety
::       _c - nazwa drukarki
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_eanp:=_a;
{? var_press('tabp')>100 || obj_del(tabp) ?};
tabp:=sql('select
            M.KTM,
            M.N,
            EANP.TW,
            EANP.ILS as IL,
            EANP.ILS as ILOSC,
            EANP.SCEAN,
            JM.KOD JMIAR,
            SPACE(30) as QKJ,
            SPACE(60) as NCD
          from @EANP
           left join M using (EANP.M,M.REFERENCE)
           left join JM using (M.J,JM.REFERENCE)
          where EANP.REFERENCE=\':_a\'',_eanp);
{? tabp.first()
|| tabp.for_each("tabp.IL:=1;tabp.put");
   _dl:=45;
   {? tabp.first || {! |? STR.split(tabp.N); tabp.N:=STR.line(_dl); tabp.NCD:=STR.line(_dl); tabp.put; tabp.next !} ?};
   exec('druk','qmom',_b,_c)
?};
1


\inf_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [NUCO_MOM]
:: OPIS: Funkcja do kolorowania rekordow na rekord przed w informacji dodatkowej
::       Dodane akcje do wyszarzania na rekord dla odpowiednich dokumentow
::       Wynikiem jest kolor rekordu
::----------------------------------------------------------------------------------------------------------------------
{? BEER.MSK='dokma' & TYPYDOK.T='PLP' & FAKSO.DK().Z='T' & FAKSO.T='Numer zamówienia' & prot_key()<>'wdrożenia'
||
   FAKSO.actions_grayed('WERF','UA')
|? BEER.MSK='dokma' & TYPYDOK.T='PLP' & FAKSO.DK().Z='T' & FAKSO.T<>'Numer zamówienia' & prot_key()<>'wdrożenia'
||
   FAKSO.actions_grayed('WERF','PUA')
|? BEER.MSK='nagdo' & TYPYDOK.T='PLP' & prot_key()<>'wdrożenia'
||
   FAKSO.actions_grayed('WERF','PA')
|? BEER.MSK='dokma' & (TYPYDOK.T='PW' | TYPYDOK.T='RWZ' | TYPYDOK.T='RWKM')
||
   FAKSO.actions_grayed('WERF','PUA')
||
   FAKSO.actions_grayed('WERF')
?};
{? FAKSO.MW='N' || 'INFD#01#01' ?}


\del_mkodk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [12.51]
:: OPIS: Usówa SCEAN w bazie MKODK
::   WE: _a - materiał
::       _b - SCEAN do poprawienia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
MKODK.cntx_psh();
MKODK.index('BEZ');
MKODK.prefix(_a,_b,_b);
{? MKODK.first()
|| {!
   |? MKODK.del()
   !}
?};
MKODK.cntx_pop();
1


\wyswietl_kopsl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO MOM]
:: OPIS: Wyświetla kopie SL na podstawei stanu na którym aktualnie jest ustawiony kontekst bazy SL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SL.cntx_psh();
_mg:=SL.MG;
_m:=SL.M;
SL.use('stl__kop');
SL.index('MG');
SL.prefix();
SL.prefix(_mg,_m);
{? SL.first()
|| SL.select()
|| FUN.info('Brak danych historycznych na temat tej pozycji')
?};
SL.cntx_pop()


\zmien_lok_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO MOM]
:: OPIS: Zmiana lokalizacji do dla reorganizacji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EANL.cntx_psh();
EANL.index('MG');
_ok:=1;
_kod_kreskowy:=exec('rb_nosp','#string',exec('repl_substr','#string',EANP.LOKDO().KOD,(' - '+EANP.LOKDO().MG().SYM),' '));
_kod_kreskowy:=_kod_kreskowy+' - '+EANP.LOKZ().MG().SYM;

{? _kod_kreskowy<>''
|| EANL.prefix('T',EANP.LOKZ().MG,_kod_kreskowy,_kod_kreskowy);
   {? EANL.first()
   || EANP.LOKDO:=EANL.ref();
      EANP.put();
      _ok:=0
   || EANL.prefix();
      EANL.prefix('T',EANP.LOKZ().MG)
   ?}
?};

EANL.win_sel('SLO');
{? _ok & EANL.select()
|| EANP.LOKDO:=EANL.ref();
   EANP.put()
?};
EANL.cntx_pop();
1


\odsw_sc_sld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [12.51]
:: OPIS: Odświeża okienko __sc_sld - stany wg identyfikatora dla okienka grupowego _sc
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? __sc_scean.first()
|| __sc_scean.erase()
?};
_tab:=sql('select SLD.SCEAN, SL.TW, EANL.KOD, SLD.IL, EANL.REFERENCE as EANL_R
           from SLD join SL using(SLD.SL,SL.REFERENCE) join EANL using (SL.EANL,EANL.REFERENCE)
           where SL.MG=:_b and SL.M=:_c and SLD.SCEAN=\':_a\'',
           __sc.SCEAN, ST.MAG, material);
{? _tab.first()
|| {!
   |? __sc_scean.blank();
      __sc_scean.SCEAN:=_tab.SCEAN;
      __sc_scean.TW:=_tab.TW;
      __sc_scean.EANL:=_tab.KOD;
      __sc_scean.EANL_R:=_tab.EANL_R;
      __sc_scean.IL:=_tab.IL;
      __sc_scean.add();
      _tab.next()
   !}
?};
__sc_scean.first();
grp_disp(__sc_scean,__sc_sld);
1


\druk_plik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa
:: OPIS: Drukowanie w linuksie etykiet
::   WE: _b - STRING - nazwa sterownika czyli drukarki etykiet w cups
::       _b - STRING - plik z rozszerzeniem
::       _c - STRING - sciezka do pliku
::       _d - STRING - logi - plik logow
::       _e - STRING - logi - identyfikator dowolny np. numer czytnika mobilnego
::       _f - STRING - logi - dodatkowa informacja np. kod etykiety
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::_file:='etykieta.txt';
::_etykieta:=_a;
::on_error(2);
::_out:=fopen(_file,'w',1);
::on_error(0);
::fwrite(_out,_etykieta);
::fclose(_out);
::
::_driver:=_b;
::_sciezka:=pth_dir(_file);


_filename:='etykieta.txt';
_etykieta:=_a;
_driver:=_b;
_sep:=exec('sep','#file');
_filepath:=tmp_dir()+_sep+_filename;

_file:=fopen('@'+_filepath,'w',0);
on_error(0);
fwrite(_file,_etykieta);
fclose(_file);

_cmd:='@/usr/bin/lp -d '+_driver+' -o raw '+_filepath;
::_cmd:='sh -c "/usr/bin/lp -d '+_driver+' -o raw '+_sciezka+'/'+_file+'"';
system(_cmd,1);
1


\key_rw_kj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TP [NUCO_TEST]
:: OPIS: Zbieranie informacji o dokumentach mobilnych dla których powinien zostać utworzony dokument RWZ
::       dla potrzeb pobrania próbek dla KJ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------

_mp:=params_get().mp;
_in:=params_get().in;

::  ZLECENIE - może też przyjść w parametrze wejściowym ITEM
{? _in.ITEM<>''
|| _ar:=_in.ITEM
?};

_mp.grpkey();

_tab_1:=sql('select EANN.REFERENCE as EANN_REF, USERS.REFERENCE as USER_REF from @EANN join USERS
               where EANN.TYP=\'W\' and EANN.STAN=\'Z\' and EANN.AKT=\'T\'');
{? _tab_1.first()
|| {!
   |? _users:=exec('FindAndGet','#table',USERS,_tab_1.USER_REF,,"USERS.ref()",null());
      _uid_ref:=exec('FindAndGet','#table',EANN,_tab_1.EANN_REF,,"EANN.uidref()",'');
      {? _users<>null()
      || _ok:=exec('chk_role','#b__box',_users,'LMG_BAD_PKWA')&exec('record_keyrefed','#b__box',_uid_ref,'LMO_MOB_DWYD')=0;
         {? _ok
         || _mp.grpkeyAdd(_tab_1.EANN_REF)
         ?}
      ?};
      _tab_1.next()
   !}
?};
_mp.done();
~~
