:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: tran_exp.fml (dawniej skid_tre.fml)
:: Utworzony: 13.11.2014
:: Autor: MB
::======================================================================================================================
:: Zawartość: Funkcje do obsługi transferu danych - eksport danych z wersji 12.41
::======================================================================================================================


\start
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy menu z wyborem formuł wykorzystywanych podczas zmiany Xpertis na Merit.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
popup(1,'Przygotowanie i eksport danych',
   'Wykonanie formuł walidacyjnych',,"exec('start_wal','tran_vlb')",
   'Przygotowanie danych i skryptów kopiujących',,"exec('start','tran_cp')",
   '--',,"~~",
   'Eksport uprawnień do elementów schematów danych',,"exec('export','ud_upr_i')",
   'Eksport uprawnień w postaci ról użytkowników',,"exec('start','tran_upr')"
);
~~


\export_jf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uruchamia wszystkie formuły eksportujace - dla wersji jednofirmowej
::----------------------------------------------------------------------------------------------------------------------
:: walidacja danych przed eksportem
{? ~exec('start_wal','tran_vlb',1) || return(0) ?};
:: zmiana wpisów dla innych firm o ile istnieją w danych
{? ~REF.WFIRM
|| {? ~exec('jednfirm','tran_exp') || return(0) ?}
?};

exec('export_all','tran_exp');
exec('export','tran_exp')


\transfer_prep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [12.51]
:: OPIS: Uruchamia formuły przygotowujące do transferu
::  OLD: \transfer_jf/tran_exp.fml
::----------------------------------------------------------------------------------------------------------------------
:: walidacja danych przed eksportem
{? ~exec('start_wal','tran_vlb',1) || return(0) ?};
:: zmiana wpisów dla innych firm o ile istnieją w danych
{? ~REF.WFIRM
|| {? ~exec('jednfirm','tran_exp') || return(0) ?}
?};

exec('export_all_prep','tran_exp');
exec('export_prep','tran_exp')


\transfer_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [12.51]
:: OPIS: Uruchamia wszystkie formuły eksportujace
::----------------------------------------------------------------------------------------------------------------------
:: walidacja danych przed eksportem
:{? ~exec('start_wal','tran_vlb',1) || return(0) ?};

exec('export_all','tran_exp');
exec('export','tran_exp')


\export_prep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Uruchamia wszystkie formuły naprawcze - dla konkretnych firm - wielokrotnie
::       Uwaga! Nie wskazane jest uruchamianie wielokrotne w jednej firmie exec('napraw_p','tran_exp')
::----------------------------------------------------------------------------------------------------------------------
_czyKALI:=(exec('get_par','skid_akt',7)='T');
{? _czyKALI
:: zdecydowano o wyłączeniu dodatkowego pytania
:: & FUN.ask('Czy wykonać wszystkie formuły naprawcze i aktualizacje Xpertis Kadry i płace?')
|| exec('napraw_p','tran_exp')
:: Formuła zmieniająca definicje parametrów przed przeniesieniem ich do Merit - w całości przeniesiona do Merit
?};

:: formuły naprawcze i aktualizacje Xpertis Środki trwałe oraz Bankowość elektroniczna
_czyestr:=exec('czy_estra','tran_exp');
:: sprawdzenie czy w systemie występuje Xpertis Środki trwałe
{? _czyestr
|| exec('es_napraw','tran_exp')
?};
exec('hb_napraw','tran_exp');
1


\export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uruchamia wszystkie formuły eksportujące - dla konkretnych firm - wielokrotnie
::       Uwaga! Nie wskazane jest uruchamianie wielokrotne w jednej firmie exec('napraw_p','tran_exp')
::----------------------------------------------------------------------------------------------------------------------
:: Wykonanie formuł walidacyjnych i naprawczych
:exec('export_prep','tran_exp');
_czyKALI:=(exec('get_par','skid_akt',7)='T');
_czyestr:=exec('czy_estra','tran_exp');

exec('i_users','tran_exp');
exec('user','tran_exp',2);
{? _czyKALI
|| exec('r_kd','tran_exp')
?};
exec('giodo','tran_exp');
{? _czyKALI
|| exec('stn','tran_exp');
   exec('h_um','tran_exp')
?};
exec('del_anhz','tran_exp');
exec('del_kktl','tran_exp');
exec('fo','tran_exp');
exec('info','tran_exp');
exec('poczta','tran_exp');
exec('ud_sch','tran_exp');
exec('kst_map','tran_exp');
exec('kst_wid_exp','tran_exp');
exec('zal_pobh','tran_exp');
exec('map_okr_es','tran_exp');
{? _czyestr
|| exec('es_okres_export','tran_exp');
   exec('es_sied_export','tran_exp');
   exec('es_amor_export','tran_exp');
   exec('es_atrusee_exp','tran_exp');
   exec('es_atrwyre_exp','tran_exp');
   exec('es_atrdefwd_help','tran_exp');
   exec('es_atrdefwd_exp','tran_exp');
   exec('es_typd_export','tran_exp');
   exec('es_tpdp_export','tran_exp');
   exec('es_dew_export','tran_exp');
   exec('es_adok_gen','tran_exp');
   exec('es_adok_export','tran_exp');
   exec('es_dokp_gen','tran_exp');
   exec('es_dokp_export','tran_exp');
   exec('es_doku_gen','tran_exp');
   exec('es_doku_export','tran_exp');
   exec('es_zmia_gen','tran_exp');
   exec('es_zmia_export','tran_exp');
   exec('es_elp_export','tran_exp');
   exec('es_ktrwp_export','tran_exp');
   exec('es_pomi_export','tran_exp');
   exec('es_sez_export','tran_exp');
   exec('es_stany_gen','tran_exp');
   exec('es_srsr_export','tran_exp');
   exec('es_stany_export','tran_exp');
   exec('es_skld_gen','tran_exp');
   exec('es_skld_export','tran_exp');
   exec('es_tsr_export','tran_exp');
   exec('es_zf_export','tran_exp');
   exec('es_zfsr_gen','tran_exp');
   exec('es_zfsr_export','tran_exp');
   exec('es_zfsrodp_exp','tran_exp');
   exec('es_zskon_export','tran_exp');
   exec('es_kkosz_export','tran_exp');
   exec('es_rtypy_export','tran_exp');
   exec('es_xi_export','tran_exp');
   exec('es_ina_export','tran_exp');
   exec('es_inw_export','tran_exp');
   exec('es_std_export','tran_exp');
   exec('es_ste_export','tran_exp');
   exec('es_sam_export','tran_exp')
?};
exec('pd','tran_exp');
exec('samn2TRA','tran_exp');
exec('zsb_dok','tran_exp');
exec('za_test','tran_exp');
exec('UPPOJ','tran_exp');
exec('prj2TRA','tran_exp');

:: formuły naprawcze portal HR
exec('napraw_h','tran_exp');
1


\export_all_prep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Uruchamia wszystkie formuły naprawcze - dla wszystkich firm - jednokrotnie
::----------------------------------------------------------------------------------------------------------------------
exec('chg_users_lock','tran_exp');
exec('edokum_firma','tran_exp');
1


\export_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uruchamia wszystkie formuły eksportujace - dla wszystkich firm - jednokrotnie
::----------------------------------------------------------------------------------------------------------------------
:: Wykonanie formuł walidacyjnych i naprawczych
:exec('export_all_prep','tran_exp');

exec('user','tran_exp',1);
exec('usersdep','tran_exp');
exec('k_podwer','tran_exp');
exec('k_harm_h','tran_exp');
exec('k_rap_u','tran_exp');
exec('k_role_u','tran_exp');
exec('k_raport','tran_exp');
exec('k_harm_p','tran_exp');
exec('edokum','tran_exp');
exec('es_typy_export','tran_exp');
exec('edidef','tran_exp');
1


\es_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Eksport danych Estry
::----------------------------------------------------------------------------------------------------------------------
exec('map_okr_es','tran_exp');
exec('es_typy_export','tran_exp');
exec('es_okres_export','tran_exp');
exec('es_sied_export','tran_exp');
exec('es_amor_export','tran_exp');
exec('es_atrusee_exp','tran_exp');
exec('es_atrwyre_exp','tran_exp');
exec('es_atrdefwd_help','tran_exp');
exec('es_atrdefwd_exp','tran_exp');
exec('es_typd_export','tran_exp');
exec('es_tpdp_export','tran_exp');
exec('es_dew_export','tran_exp');
exec('es_adok_gen','tran_exp');
exec('es_adok_export','tran_exp');
exec('es_dokp_gen','tran_exp');
exec('es_dokp_export','tran_exp');
exec('es_doku_gen','tran_exp');
exec('es_doku_export','tran_exp');
exec('es_zmia_gen','tran_exp');
exec('es_zmia_export','tran_exp');
exec('es_elp_export','tran_exp');
exec('es_ktrwp_export','tran_exp');
exec('es_pomi_export','tran_exp');
exec('es_sez_export','tran_exp');
exec('es_stany_gen','tran_exp');
exec('es_srsr_export','tran_exp');
exec('es_stany_export','tran_exp');
exec('es_skld_gen','tran_exp');
exec('es_skld_export','tran_exp');
exec('es_tsr_export','tran_exp');
exec('es_zf_export','tran_exp');
exec('es_zfsr_gen','tran_exp');
exec('es_zfsr_export','tran_exp');
exec('es_zfsrodp_exp','tran_exp');
exec('es_zskon_export','tran_exp');
exec('es_kkosz_export','tran_exp');
exec('es_rtypy_export','tran_exp');
exec('es_xi_export','tran_exp');
exec('es_ina_export','tran_exp');
exec('es_inw_export','tran_exp');
exec('es_std_export','tran_exp');
exec('es_sam_export','tran_exp')


\i_users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Eksport użytkowników portalowych (powiązań z tabelami systemu: OSOBA, KH).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=sql(
   'select I_USERS.LOGIN, I_USERS.OSOBA, I_USERS.KH '+
   'from I_USERS '+
   'where (I_USERS.OSOBA is not null) or (I_USERS.KH is not null) '+
   'order by 1'
);
_TAB.export('i_users.tra',1,,,,
   'LOGIN',,1,,
   'OSOBA',,2,,
   'KH',,3,
)


\user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uruchamia formuły eksportujace dla tabel I_USERS
::   WE: _a - w firmach 1-jednokrotnie 2-wielokrotnie
::----------------------------------------------------------------------------------------------------------------------
{? _a=2
|| exec('i_log','tran_exp')
|? _a=1
|| exec('k_harm_u','tran_exp')
?}


\i_log
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Eksport rekordów I_LOG
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
_kod:={? REF.WFIRM || REF.FIRMA().SYMBOL || '' ?};
FIRMA.cntx_pop();
_f:=fopen('i_log'+_kod+'.tra','w',1);
{? _f
|| I_LOG.prefix();
   {? I_LOG.first()
   || {!
      |? fwrite(_f,I_LOG.I_USERS().LOGIN+'@'+$#I_LOG.ref());
         I_LOG.next()
      !}
   ?};
   fclose(_f);
   echo()
?}


\r_kd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Eksport informacji o umieszczaniu rubryk na wydrukach.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
R.cntx_psh();
R.prefix();
{? ~R.export('r_kd.tra',0,%1+';','UTF-8,pth,header',,'RN',,1,,'KD',,2,)
|| FUN.info('Eksport tabeli rubryk płacowych nie powiódł się.\nProcedurę należy powtórzyć.')
?};
R.cntx_pop();
~~


\giodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Eksport pól opisowych tabeli GIODO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
_kod:={? REF.WFIRM || '_'+REF.FIRMA().SYMBOL || '' ?};
FIRMA.cntx_pop();

_sql:=
   'select GIODO.REFERENCE REF, GIODO.OPIS1, GIODO.OPIS2, GIODO.OPIS3 '+
   'from GIODO '+
   'where GIODO.OPIS1<>\'\' or GIODO.OPIS2<>\'\' or GIODO.OPIS3<>\'\' '+
   'order by 1';
_tab:=sql(_sql);
:_tab.export('giodo.tra',0,%1+';','UTF-8,pth,header',,
_tab.export('giodo'+_kod+'.tra',0,%1+';','UTF-8,pth,header',,
   'REF',,1,,
   'OPIS1',,2,,
   'OPIS2',,3,,
   'OPIS3',,4,
);
~~


\stn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Eksport kolumny RP tabeli STN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_BUF:=sql(
   'select STN.REFERENCE as REF, RP.KOD as KOD, RP.O as O '+
   'from STN join RP using(STN.RP,RP.REFERENCE)'
);
_BUF.export(STN.name()+'.tra',0,%1+';','UTF-8,pth,header',,
   'REF',,1,,
   'KOD',,2,,
   'O',,3,
);
~~


\h_um
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Eksport kolumn PODPIS, PRZEDST, MIEJSCE tabeli H_UM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
_kod:={? REF.WFIRM || '_'+REF.FIRMA().SYMBOL || '' ?};
FIRMA.cntx_pop();

_BUF:=sql(
   'select '+
   '  Q.REFERENCE as REF, '+
   '  Q.PODPIS as PODPIS, '+
   '  Q.PRZEDST as PRZEDST, '+
   '  Q.MIEJSCE as MIEJSCE '+
   'from '+
   '  H_UM as Q'
);
:_BUF.export(H_UM.name()+'.tra',0,%1+';','UTF-8,pth,header',,
_BUF.export(H_UM.name()+_kod+'.tra',0,%1+';','UTF-8,pth,header',,
   'REF',,1,,
   'PODPIS',,2,1,
   'PRZEDST',,3,,
   'MIEJSCE',,4,
);
~~


\del_anhz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Usuwa analizy zleceń powiązane z planami okresowymi, ponieważ od wersji
::       17.00 nie ma już tabeli PL_OKR która wchodziła w unikalny klucz indeksowy ANZH
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=1;
_result:=0;

ANZH.cntx_psh();
ANZH.index('ZRO');
{? ANZH.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      ANZH.cntx_psh();
      {? ANZH.next()
      || _ref_nxt:=ANZH.ref()
      ?};
      ANZH.cntx_pop();

      {? ANZH.PL_OKR<>null()
      || exec('anzh_del','zlecanal',ANZH.ref(),1);
         _can_continue:=ANZH.del(,1)
      ?};

      {? _ref_nxt<>null()
      || _next:=ANZH.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};
ANZH.cntx_pop();
_result


\fo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Eksportuje parametry FO
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
::FIRMA.cntx_psh();
::_kod:={? REF.WFIRM || '_'+REF.FIRMA().SYMBOL || '' ?};
::FIRMA.cntx_pop();

_sql:=
   'select FO.NR, FO.NAZ, FO.TR, FO.USERS '+
   'from FO '+
   'where FO.USERS IS NULL '+
   'order by NR';
_tab:=sql(_sql);
_tab.export('fo_def_xpertis.tra',0,%1+';','UTF-8,pth,noheader',,
:_tab.export('fo_def_xpertis'+_kod+'.tra',0,%1+';','UTF-8,pth,noheader',,
   'NR',,1,,
   'NAZ',,2,,
   'TR',,3,
);
~~


\k_harm_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Eksport rekordów K_HARM_U
::----------------------------------------------------------------------------------------------------------------------
_f:=fopen('k_harm_u.tra','w',1);
{? _f
|| K_HARM_U.prefix();
   {? K_HARM_U.first()
   || {!
      |? fwrite(_f,K_HARM_U.K_USERS().I_USERS().LOGIN+'@'+$#K_HARM_U.K_HARM_P);
         K_HARM_U.next()
      !}
   ?};
   fclose(_f);
   K_HARM_U.erase();
   echo()
?};
~~


\del_kktl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Usuwa kalkulacje technologii "budżetowe", ponieważ od wersji
::       17.00 nie ma już pola KKTL.ASB które wchodziło w unikalny klucz indeksowy KKTL
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=1;
_result:=0;

KKTL.cntx_psh();
KKTL.index('KZ');
{? KKTL.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      KKTL.cntx_psh();
      {? KKTL.next()
      || _ref_nxt:=KKTL.ref()
      ?};
      KKTL.cntx_pop();

      _ref_my:=KKTL.ref();
      {? KKTL.ASB='B'
      || exec('kalk_del','tex_kalk',_ref_my);
         _can_continue:=~KKTL.seek(_ref_my)
      ?};

      {? _ref_nxt<>null()
      || _next:=KKTL.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};
KKTL.cntx_pop();
_result


\poczta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Eksportuje i (usuwa) zawartość tabeli POCZTA (zadania i zdarzenia)
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('
   select POCZTA.PE, FIRMA.SYMBOL as FIRMA, POCZTA.KOD, POCZTA.OPIS, POCZTA.TRYB
   from POCZTA join FIRMA
   where POCZTA.PE=''E'' or POCZTA.PE=''Z''
   order by 1, 2, 3
');
_tab.export('poczta.tra',0,%1+';','UTF-8,pth,noheader',,
   'PE',,1,,
   'FIRMA',,2,,
   'KOD',,3,,
   'OPIS',,4,,
   'TRYB',,5,
);
~~


\ud_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Eksportuje informacje o domyślnych schematach danych.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=sql('select distinct UD_SYS.UD_SCH as REF from UD_SYS where UD_SYS.UD_SCH is not null');

_TAB.export(UD_SCH.name()+'.tra',0,%1+';','UTF-8,pth,header',,
   'REF',,1,
);
~~


\info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Eksportuje parametry INFO do zaimportowania do FO
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('
   select FO.NR, FO.NAZ, FO.TR
   from FO
   where 0=1
   order by NR
');
_tab.NR:=500604; _tab.NAZ:='INFO.TIMEDOK'; _tab.TR:=$INFO.TIMEDOK; _tab.add();
_tab.NR:=500015; _tab.NAZ:='INFO.KLIM'; _tab.TR:=''''+INFO.KLIM+''''; _tab.add();
_tab.NR:=500016; _tab.NAZ:='INFO.KZZLILM'; _tab.TR:=''''+INFO.KZZLIM+''''; _tab.add();
_tab.NR:=500017; _tab.NAZ:='INFO.MGO().SYM'; _tab.TR:=''''+INFO.MGO().SYM+''''; _tab.add();
_tab.NR:=500603; _tab.NAZ:='INFO.RKG().RN'; _tab.TR:=$INFO.RKG().RN; _tab.add();
_tab.NR:=500711; _tab.NAZ:='INFO.WYCENA'; _tab.TR:=''''+INFO.WYCENA+''''; _tab.add();
_tab.NR:=500605; _tab.NAZ:='INFO.ROZAK'; _tab.TR:=''''+INFO.ROZAK+''''; _tab.add();
_tab.NR:=100900; _tab.NAZ:='XINFO.DIA_PATH'; _tab.TR:=''''+XINFO.DIA_PATH+''''; _tab.add();
_tab.NR:=700502; _tab.NAZ:='INFO.POLWOSN'; _tab.TR:=''''+INFO.POLWOSN+''''; _tab.add();
_tab.NR:=700503; _tab.NAZ:='INFO.ODZAMSN'; _tab.TR:=''''+INFO.ODZAMSN+''''; _tab.add();
_tab.export('fo_info_xpertis.tra',0,%1+';','UTF-8,pth,noheader',,
   'NR',,1,,
   'NAZ',,2,,
   'TR',,3,
);
~~


\usersdep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Eksportuje USERSDEP
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('select USERSDEP.USERS, USERSDEP.DEPT, USERSDEP.FIRMA from USERSDEP');
_tab.export('usersdep_xpertis.tra',0,%1+';','UTF-8,pth,noheader',,
            'USERS',,1,,
            'DEPT',,2,,
            'FIRMA',,3,
           );
~~


\k_podwer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Eksportuje K_PODWER
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('select FORMULA.NAZWA as K_PODWER, FORMULA.FORMULA as USERS from FORMULA where 1=0');
K_PODWER.prefix();
{? K_PODWER.first()
|| {! |?
      {? K_PODWER.K_USERS().I_USERS
      || _tab.K_PODWER:=$K_PODWER.ref();
         _tab.USERS:=K_PODWER.K_USERS().I_USERS().LOGIN;
         _tab.add()
      ?};
      K_PODWER.next()
   !}
?};
_tab.export('k_podwer_xpertis.tra',0,%1+';','UTF-8,pth,noheader',,
            'K_PODWER',,1,,
            'USERS',,2,
            );
~~


\k_harm_h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Eksportuje K_HARM_H
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('select FORMULA.NAZWA as K_HARM_H, FORMULA.FORMULA as USERS from FORMULA where 1=0');
K_HARM_H.prefix();
{? K_HARM_H.first()
|| {! |?
      {? K_HARM_H.K_USERS().I_USERS
      || _tab.K_HARM_H:=$K_HARM_H.ref();
         _tab.USERS:=K_HARM_H.K_USERS().I_USERS().LOGIN;
         _tab.add()
      ?};
      K_HARM_H.next()
   !}
?};
_tab.export('k_harm_h_xpertis.tra',0,%1+';','UTF-8,pth,noheader',,
            'K_HARM_H',,1,,
            'USERS',,2,
            );
~~


\k_rap_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Eksportuje K_RAP_U
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('select FORMULA.NAZWA as K_RAP_U, FORMULA.FORMULA as USERS from FORMULA where 1=0');
K_RAP_U.prefix();
{? K_RAP_U.first()
|| {! |?
      {? K_RAP_U.K_USERS().I_USERS
      || _tab.K_RAP_U:=$K_RAP_U.ref();
         _tab.USERS:=K_RAP_U.K_USERS().I_USERS().LOGIN;
         _tab.add()
      ?};
      K_RAP_U.next()
   !}
?};
_tab.export('k_rap_u_xpertis.tra',0,%1+';','UTF-8,pth,noheader',,
            'K_RAP_U',,1,,
            'USERS',,2,
            );
~~


\k_role_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Eksportuje K_ROLE_U
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('select FORMULA.NAZWA as K_ROLE_U, FORMULA.FORMULA as USERS from FORMULA where 1=0');
K_ROLE_U.prefix();
{? K_ROLE_U.first()
|| {! |?
      {? K_ROLE_U.K_USERS().I_USERS
      || _tab.K_ROLE_U:=$K_ROLE_U.ref();
         _tab.USERS:=K_ROLE_U.K_USERS().I_USERS().LOGIN;
         _tab.add()
      ?};
      K_ROLE_U.next()
   !}
?};
_tab.export('k_role_u_xpertis.tra',0,%1+';','UTF-8,pth,noheader',,
            'K_ROLE_U',,1,,
            'USERS',,2,
            );
~~


\k_raport
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Eksportuje K_RAPORT
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('select FORMULA.NAZWA as K_RAPORT, FORMULA.FORMULA as USERS from FORMULA where 1=0');
K_RAPORT.prefix();
{? K_RAPORT.first()
|| {! |?
      {? K_RAPORT.KTO_UTW().I_USERS
      || _tab.K_RAPORT:=$K_RAPORT.ref();
         _tab.USERS:=K_RAPORT.KTO_UTW().I_USERS().LOGIN;
         _tab.add()
      ?};
      K_RAPORT.next()
   !}
?};
_tab.export('k_raport_xpertis.tra',0,%1+';','UTF-8,pth,noheader',,
            'K_RAPORT',,1,,
            'USERS',,2,
            );
~~


\k_harm_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Eksportuje K_HARM_P
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('select FORMULA.NAZWA as K_HARM_P, '+
          'FORMULA.FORMULA as USERS1, '+
          'FORMULA.FORMULA as USERS2, '+
          'FORMULA.FORMULA as USERS3, '+
          'FORMULA.FORMULA as USERS4 '+
          'from FORMULA where 1=0');
K_HARM_P.prefix();
{? K_HARM_P.first()
|| {! |?
      _add:=0;
      _tab.blank();
      _tab.K_HARM_P:=$K_HARM_P.ref();
      {? K_HARM_P.KTO_UZU().I_USERS
      || _add:=1;
         _tab.USERS1:=K_HARM_P.KTO_UZU().I_USERS().LOGIN
      ?};
      {? K_HARM_P.KTO_AKC().I_USERS
      || _add:=1;
         _tab.USERS2:=K_HARM_P.KTO_AKC().I_USERS().LOGIN
      ?};
      {? K_HARM_P.UZU().I_USERS
      || _add:=1;
         _tab.USERS3:=K_HARM_P.UZU().I_USERS().LOGIN
      ?};
      {? K_HARM_P.AKC().I_USERS
      || _add:=1;
         _tab.USERS4:=K_HARM_P.AKC().I_USERS().LOGIN
      ?};
      {? _add || _tab.add() ?};
      K_HARM_P.next()
   !}
?};
_tab.export('k_harm_p_xpertis.tra',0,%1+';','UTF-8,pth,noheader',,
            'K_HARM_P',,1,,
            'USERS1',,2,,
            'USERS2',,3,,
            'USERS3',,4,,
            'USERS4',,5,
            );
~~


\napraw_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Przygotowanie danych obszaru "Personel".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Jeżeli eksport został uruchomiony z systemu innego niż Kali - nie mamy dostępu do pliku s_zus.txt.
:: Tworzymy więc pusty plik, aby nie pokazał się komunikat o jego braku, a dane zostaną zaimportowane w Mericie.
_s_zus:=obj_new('fn','byl');
_s_zus.fn:='s_zus.txt';
{? ~(_s_zus.byl:=fexists(_s_zus.fn,1))
|| {? _fh:=fopen(_s_zus.fn,'w',1)
   || fclose(_fh)
   ?}
?};
:: mechanim M. Piekarskiego - obejście
__upd_cmd:='nie test';
__upd_wynik:=0;
:: Zaczniemy od zbiorczego importu wszystkich nowych i niezbędnych rubryk. Formuła jest wywołana z parametrem _c=1,
:: ponieważ chcemy mieć pewność, że rubryki będą w 100% standardowe. Dzięki temu nie powinny pojawiać się
:: komunikaty o ewentualnych konfliktach.
:: Jeżeli poprawka polegała tylko na dodaniu nowej rubryki (lub kilku), to zostanie zakomentowana.

:: 07.06.2023 liste rubryk do importu uzupelniamy automatycznie o wszystkie formuly o kodzie wiekszym niz 7000, na
:: podstawie pliku rubryki.dfg w systemie
_all_r:='';
{? _r_file:=fopen('rubryki.dfg','r',1)
|| {!
   |? (_wiersz:=fread(_r_file))<>'\n'
   |! _tab:=spli_str(_wiersz,';');
      {? _tab[1]<>'Kod' & #_tab[1]>=7000
      || _all_r+=_tab[1]+','
      ?};
      &_tab
   !};
   fclose(_r_file)
?};

{? _all_r<>'' & (_all_r+1)=',' || _all_r:=_all_r-1 ?};
_ret:=exec('r_imp','formuly','g',
::    \rubryki, które powinny być w Merit a nie są o kodzie > niz 7000
      '51,52,73,99,120,121,123,124,521,528,534,536,538,540,541,543,769,788,949,963,984,'+_all_r
      ,1,1
   );

{? _ret<>''
|| FUN.emsg(
      'Aktualizacja słownika rubryk płacowych nie powiodła się.\n'+
      _ret+'\n\n'+
      'Dalsze formuły naprawcze NIE będą wykonywane.\n'+
      'Usuń przyczynę niepowodzenia i spróbuj ponownie.'
   );
   return()
?};
exec('rubobj','rubobj');
{? var_pres('RUB')<0
|| RUB:=obj_new(CLASS.RUB)
?};
RUB.fill();

:: Żeby nie było kłopotów z atrybutami - podciągnijmy je wszystkie.
exec('defaults','rubobj');

VAR_DEL.delete('errorobl'); errorobl:=1;
exec('kali_01','napraw_p');
exec('kali_02','napraw_p');
exec('kali_03','napraw_p');
exec('kali_04','napraw_p');
exec('kali_05','napraw_p');
::exec('kali_06','napraw_p');
exec('add_attr','rubobj',9,99,'Ryczałt samochodowy',1,
   'Ryczałt samochodowy w całości stanowi przychód do opodatkowania i do ZUS.',,7007);
exec('add_use','rubobj',99,7007);

exec('kali_07','napraw_p');
exec('kali_08','napraw_p');
exec('kali_09','napraw_p');
exec('kali_10','napraw_p');
::exec('kali_11','napraw_p');
exec('add_use','rubobj',63141,7008,7009);
exec('add_use','rubobj',10012,7008,7009,7010);

exec('kali_12','napraw_p');
exec('kali_13','napraw_p');
exec('kali_14','napraw_p');
::exec('kali_15','napraw_p');
exec('add_attr','rubobj',5,58,'ZUS bez podatku',1,
   'Informacje o składkach i podstawach ZUS, które nie zostały ujęte w przychodzie do opodatkowania,'+
   ' nie są uwzględniane w PIT.',,7020,7021);
exec('add_use','rubobj',58,7020,7021);
exec('add_attr','rubobj',58,581,'Podstawa ZUS bez podatku',1,
   'Informacje o podstawach ZUS, które nie zostały ujęte w przychodzie do opodatkowania,'+
   ' nie są uwzględniane w PIT.',,7020);
exec('add_use','rubobj',581,7020);
exec('add_attr','rubobj',58,582,'Składki ZUS bez podatku',1,
   'Informacje o składkach ZUS, które nie zostały ujęte w przychodzie do opodatkowania,'+
   ' nie są uwzględniane w PIT.',,7021);
exec('add_use','rubobj',582,7021);

exec('kali_16','napraw_p');
exec('kali_17','napraw_p');
exec('kali_18','napraw_p');
exec('kali_19','napraw_p');
exec('kali_20','napraw_p');
::exec('kali_21','napraw_p'); Rubryka dodana na początku.

::exec('kali_22','napraw_p'); exec('kali_41','napraw_p'); exec('kali_46','napraw_p')
_tab:=obj_new(6);
_tab[1]:=7051; _tab[2]:=7041; _tab[3]:=7055; _tab[4]:=7053; _tab[5]:=7006; _tab[6]:=7059;
PAR_POKR.cntx_psh();
PAR_POKR.index('PAR_POKR');
PAR_POKR.prefix();
{! _ind:=1 .. obj_len(_tab)
|! {? ~PAR_POKR.find_key(_tab[_ind])
   || PAR_POKR.blank();
      PAR_POKR.R:=RUB.ref[_tab[_ind]];
      PAR_POKR.RP:='S';
      PAR_POKR.RZ:='T';
      PAR_POKR.PTZO:='T';
      PAR_POKR.add(1)
   ?}
!};
PAR_POKR.cntx_pop();
obj_del(_tab);
::kali_41
exec('add_use','rubobj',10022,7050,7051,7040,7041,7052,7053,7054,7055);
exec('add_use','rubobj',6313102,7050,7051,7040,7041,7052,7053,7054,7055);
exec('add_use','rubobj',6522,7051,7041,7053,7055);
exec('add_use','rubobj',6523,7050,7040,7052,7054);
exec('add_use','rubobj',48,7050,7051,7040,7041,7052,7053,7054,7055);
exec('add_use','rubobj',46,7050,7040,7052,7054);
::kali_22
exec('add_use','rubobj',10022,7006);
exec('add_use','rubobj',6313102,7006);
exec('add_use','rubobj',6522,7006);
exec('add_attr','rubobj',4,48,'Składniki do brutto o kodzie większym niż 500',1,'',,7006);
exec('add_use','rubobj',48,7006);
::kali_46
exec('add_use','rubobj',10022,7058,7059);
exec('add_use','rubobj',6313102,7058,7059);
exec('add_use','rubobj',6522,7059);
exec('add_use','rubobj',6523,7058);
exec('add_use','rubobj',48,7058,7059);
exec('add_use','rubobj',46,7058);
:: Użycia dodatku za przekroczenia średniotygodniowe rozliczane jako premie okresowe
exec('add_attr','rubobj',4,49,'Premie',1,'',,7006,7055,7053,7059,7041,7051);
exec('add_use','rubobj',49,7006,7055,7053,7059,7041,7051);
exec('add_attr','rubobj',49,491,'Premie okresowe',1,'',,7006,7055,7053,7059,7041,7051);
exec('add_use','rubobj',491,7006,7055,7053,7059,7041,7051);
exec('add_attr','rubobj',491,4911,'Premie okresowe automatycznie zakładane',1,'',,7006,7055,7053,7059,7041,7051);
exec('add_use','rubobj',4911,7006,7055,7053,7059,7041,7051);

exec('kali_23','napraw_p');
::exec('pkzp','napraw_p'); Poprawka dotyczy funkcjonalności, która nie występuje w Mericie.
::exec('bhp','napraw_p'); Poprawka dotyczy funkcjonalności, która nie występuje w Mericie.
exec('kali_24','napraw_p');
::exec('kali_25','napraw_p'); Rubryka dodana na początku.
exec('kali_26','napraw_p');
:exec('kali_27','napraw_p');
exec('add_use','rubobj',551,7017);

::exec('akt_24','napraw_p'); Wywołanie przeniesione do Merita, ale rubryka 7018 i niektóre atrybuty są dodawane
exec('add_attr','rubobj',19,198,'Limit godzin opieki (Art. 188) - Dyscyplina pracy',1,'',16,13);
exec('add_use','rubobj',198,16,13);
exec('add_attr','rubobj',19,199,'Nieobecności na część dnia',1,
     'Nieobecności rejestrowane na część dnia'
     ,,1,11,13,22,24);
exec('add_use','rubobj',199,1,11,13,22,24);

::exec('akt_26','napraw_p'); Wywołanie przeniesione do Merita.
::exec('kali_28','napraw_p'); Rubryka dodana na początku.
::exec('akt_32','napraw_p'); Wywołanie przeniesione do Merita.
::exec('akt_35','napraw_p'); Wywołanie przeniesione do Merita.
::exec('kali_29','napraw_p'); Funkcjonalność przeniesiona do \pdz/tran_vlb.fml
exec('kali_30','napraw_p');
::exec('kali_31','napraw_p'); Funkcjonalność przeniesiona do \zc_info/tran_vlb.fml
exec('kali_32','napraw_p');
exec('kali_33','napraw_p');
::exec('kali_34','napraw_p'); Rubryka dodana na początku.
exec('kali_35','tran_exp');
exec('kali_36','napraw_p');
exec('kali_37','napraw_p');
exec('kali_38','napraw_p');
exec('kali_39','napraw_p');
exec('kali_40','tran_exp');
::exec('kali_41','napraw_p'); Formuła połączona z kali_22
exec('kali_42','napraw_p');
exec('kali_43','napraw_p');
exec('kali_44','napraw_p');
::exec('kali_46','napraw_p'); Formuła połączona z kali_22
exec('kali_47','napraw_p');
::exec('zkl_01','napraw_p'); Poprawka dotyczy funkcjonalności, która nie występuje w Mericie.
::exec('kali_48','napraw_p');  Rubryka dodana na początku.
exec('kali_49','napraw_p');
::exec('kali_50','napraw_p'); Funkcjonalność przeniesiona do \prem_okr/tran_vlb.fml
::exec('kali_51','napraw_p'); Rubryki dodane na początku

:: TODO - do wyjaśnienia
::exec('zkl_1241_31','napraw_p');

:: \kali_52
exec('add_use','rubobj',1003,64,65);

::bazuje na tabeli dodanej w 12.51 trzeba sprawdzić czy wogóle tabela istnieje w przypadku przejścia z 12.41
{? var_pres('RD_OKR')>0
|| exec('akt_71','aktp1251')
?};

:: \kali_53
exec('add_attr','rubobj',6522,65221,'Składniki wynagrodzenia za okresy miesięczne',1,
   'Pozycja 11 zaświadczenia.',,
   135,175,177,436,437,438,439,442,443,444,7031
);
exec('add_use','rubobj',65221,135,175,177,436,437,438,439,442,443,444,7031);
exec('add_attr','rubobj',6522,65222,'Składniki wynagrodzenia za inne okresy',1,
   'Pozycja 14 zaświadczenia.',,
   7006,7041,7051,7053,7055,7059
);
exec('add_use','rubobj',65222,7006,7041,7051,7053,7055,7059);

exec('kali_54','napraw_p');
:: \kali_55
exec('add_use','rubobj',6313108,436,437,438,439,442,443,444);
exec('add_attr','rubobj',63,633,'GUS Z-02',1,'');
exec('add_attr','rubobj',633,6331,'Wydatki na doskonalenie, kształcenie kadr',1,
   'Wydatki na doskonalenie, kształcenie i przekwalifikowanie kadr');
exec('add_attr','rubobj',633,6332,'Wydatki na delegacje służbowe',1,
   'Wydatki na delegacje służbowe');
exec('add_attr','rubobj',633,6333,'Dobrowolne składki na ubezpieczenia społeczne',1,
   'Dobrowolne składki na ubezpieczenia społeczne');
exec('add_attr','rubobj',6333,63331,'w tym składki na prac. systemy emer.-rent.',1,
   '  w tym składki na pracownicze systemy emerytalno-rentowe');
exec('add_attr','rubobj',633,6334,'Wydatki związane z BHP',1,
   'Wydatki związane z bezpieczeństwem i higieną pracy');
exec('add_attr','rubobj',633,6335,'Zakładowy fundusz świadczeń socjalnych',1,
   'Zakładowy fundusz świadczeń socjalnych (odpis w koszty)');
exec('add_attr','rubobj',633,6336,'Świadczenia o charakterze rzeczowym',1,
   'Świadczenia o charakterze rzeczowym');
exec('add_attr','rubobj',633,6337,'Pozostałe wydatki',1,'Pozostałe wydatki');

:: \kali_56
exec('add_attr','rubobj',652,6524,'Nie ujmowane w podstawie chorobowego',1,
   'Pozycja 11 zaświadczenia.');

exec('kali_57','napraw_p');
exec('kali_58','napraw_p');

:: \kali_59
exec('add_attr','rubobj',211,2116,'W całości potrącany na roszczenia niealimentacyjne',1,
      'Rubryki stanowiące w całości podstawę do wszystkich potrąceń oprócz alimentacyjnych');

:: \kali_60
exec('add_attr','rubobj'
   ,65221
   ,652211
   ,'Składniki wynagrodzenia miesięczne - urlop'
   ,1
   ,'Pozycja 11 zaświadczenia.'
   ,,436,437,438,439,442,443
);
exec('add_use','rubobj',652211,436,437,438,439,442,443);

exec('kali_61','napraw_p');

:: \kali_62 - rubryki zaimportowano na początku formuły
exec('add_attr','rubobj',1323,13231,'Służba wojskowa',1,'');
exec('add_use','rubobj',13231,15);
exec('add_attr','rubobj',1323,13232,'Ćwiczenia wojskowe',1,'Urlop bezpłatny udzielany na okres ćwiczeń wojskowych');
exec('add_uses','rubobj',7068,1,11,13,15,132,134,152,1323,13232);
exec('add_uses','rubobj',7068,14,14151);

:: \kali_63
exec('add_attr','rubobj',4,401,'Rozliczenie godzin pracy',1,'');
exec('add_use','rubobj',401,123,7006,7050,7051,7040,7041,7052,7053,7058,7059,7054,7055,125,126,135,120,121);
exec('add_attr','rubobj',401,4011,'Nie wliczane do minimalnego wynagrodzenia',1,
   'Wynagrodzenia i dodatki za przepracowane nadgodziny, które nie są doliczane przy wyliczeniu dopełnienia do minimalnego wynagrodzenia');
exec('add_use','rubobj',4011,123,7006,7050,7051,7040,7041,7052,7053,7058,7059,7054,7055,125,126,135,120,121);
RA_DEF.cntx_psh();
RA_DEF.index('RODZAJ');
RA_DEF.prefix('S');
{? RA_DEF.find_key(4011)
|| exec('use_add','rubobj',RA_DEF.ref(),RUB.ref[122],date(2016,1,1))
?};
RA_DEF.cntx_pop();

:: \kali_64
exec('add_uses','rubobj',7034,1,13,16,161,131,19,194,199,1942,19421);
exec('add_attr','rubobj',131,1313,'Dopełnienie do wymiaru - wigilia',1,
   'Na podstawie Art. 9. 1. dotyczącym zmniejszenia wymiaru czasu pracy w wigilię i wiel. sobotę.'
);
exec('add_use','rubobj',1313,7034);
exec('add_uses','rubobj',7061,4,48,6,65,652,100,1002,6522,10023,65221,100231);

exec('kali_65','napraw_p');
exec('kali_66','napraw_p');

:: \kali_67
exec('add_attr','rubobj',43,432,'Składniki do podstawy ekwiwalentu bez uzupełnienia',1,
   'Składniki w kwocie wypłaconej wliczane do podstawy ekwiwalentu bez uzupełniania o nieobecności. '+
   '\nWymagane jest zaznaczenie składnika płacowego jako wliczany do ekwiwalentu.'+
   '\nPobierane są tylko składniki, które są zaznaczone jako wliczane w kwocie wypłaconej.'
);

exec('kali_68','napraw_p');
exec('kali_69','napraw_p');

:: \kali_70
exec('add_uses','rubobj',7071,100,1002,10026,100262);

::exec('kali_71','napraw_p'); Poprawka dotyczy funkcjonalności, która nie występuje w Mericie.
::exec('kali_72','napraw_p'); Rubryki dodane na początku

exec('kali_73','napraw_p');

::exec('akt_04','napraw_p');        Aktualizację wzorców PIT'2018 zrobimy w Mericie.
::exec('akt_1251_27','napraw_p');   Aktualizację wynikającą z ustalenia 12 XI 2018 świętem, chyba możemy pominąć.
::exec('akt_1251_30','napraw_p');   Aktualizację wzorców PIT'2019 zrobimy w Mericie.
::exec('akt_1251_29','napraw_p');   Aktualizację "RIA" + "ustanie stosunku pracy" zrobimy w Mericie.

::exec('akt_1251_22','napraw_p');   Aktualizacja - Zaświadczenie ERP-7
exec('add_attr','rubobj',100261,1002611,'Świadczenia wypłacone - zasiłki',1,
     'Świadczenia wypłacone, uwzględnione przy przygotowaniu danych do RP-7.',
     ,465,468,510,512,514,516,523,529);
exec('add_attr','rubobj',100261,1002612,'Świadczenia wypłacone - rehabilitacyjne',1,
     'Świadczenia wypłacone, uwzględnione przy przygotowaniu danych do RP-7.',
     ,531,533);
exec('add_attr','rubobj',100262,1002621,'Wyrównania wypłaconych świadczeń - zasiłki',1,
     'Wyrównania świadczeń, uwzględnione przy przygotowaniu danych do RP-7.',
     ,467,469,470,511,513,515,517,524,530,532,7017,7018,7071);
exec('add_attr','rubobj',100262,1002622,'Wyrównania wypłaconych świadczeń - rehabilitacyjne',1,
     'Wyrównania świadczeń, uwzględnione przy przygotowaniu danych do RP-7.',
     ,537);
exec('add_attr','rubobj',1002,10027,'Składniki wypłacone obok wynagrodzenia',1,
     'Kwoty składników wynagrodzenia za dany rok kalendarzowy, wypłaconych obok wynagrodzenia za czas niezdolności do '+
     'pracy,\n zasiłku chorobowego, macierzyńskiego, opiekuńczego, świadczenia rehabilitacyjnego, które w okresie '+
     'pobierania tego wynagrodzenia lub\n zasiłku nie stanowiły podstawy wymiaru składek na ubezpieczenie społeczne/ '+
     'ubezpieczenia emerytalne i rentowe');
exec('add_attr','rubobj',1002,10028,'Przychód z ubezpioeczeniem wypadkowym',1,
     'Kwoty przychodu należnego za dany rok kalendarzowy, który nie stanowił podstawy wymiaru składek na\n '+
     'ubezpieczenia emerytalne i rentowe, a stanowił podstawę wymiaru składek na ubezpieczenie wypadkowe');
exec('add_attr','rubobj',1002,10029,'Inne należności',1,
     'Kwoty innych wypłaconych należności, które nie zostały wykazane w kolumnach 2–6 i ich rodzaj – o ile są one '+
     'wliczane do podstawy wymiaru świadczeń. Przykład:\nkwota rekompensaty wypłaconej pracownikowi z tytułu podwyżki '+
     'cen na artykuły żywnościowe, opał i energię, która była wypłacana obok wynagrodzenia lub zasiłku z '+
     'ubezpieczenia społecznego w okresie od 1 września 1981 r. do 30 czerwca 1987 r.,\n'+
     'kwota rekompensaty pieniężnej ustalonej z tytułu okresowego niepodwyższania płac w sferze budżetowej.');
exec('add_use','rubobj',191,3,5,25,26,27,28,32,33);

::exec('akt_1251_43','napraw_p');   Aktualizacja usunięcie imion ojca, matki zrobimy w Mericie.
::exec('kali_74','napraw_p');       Zmiana położenia rubryki płacowej 970 - zrobimy w Mericie.

::exec('akt_1251_19','napraw_p');   Aktualizacja ZKL 12.51_19 - Ankiety zrobimy w Mericie.

::exec('kali_75','napraw_p');       Poprawka dotyczy funkcjonalności, która nie występuje w Mericie. Nowa rola
::                                  uwzględniona w tran_upr.fml
::exec('kali_76','napraw_p');       Poprawka przeniesiona do formuł walidacyjnych przed transferem
::exec('kali_77','napraw_p');       Poprawka dotyczy exec('akt_1251_29','napraw_p'); które robione jest w Mericie.

::exec('zkl_02','napraw_p')         Poprawa błędu związanego z ankietą typu Ocena po aktualizacji 12.51_19 -
::                                  zrobimy w Mericie (w ramach pba_act)

::exec('akt_1251_26','napraw_p');   Aktualizacja 1251_26 - Pracownicze Plany Kapitałowe - zrobimy w Mericie

::\akt_1251_37                      Aktualizacja 12.51_37 - eTeczka. - częściowo w Xpertis (większa część po stronie
::                                                                     Merit).
exec('akt_1251_37','aktp1251');

::exec('akt_1251_54','napraw_p');   Aktualizacja 1251_54 - Pracownicze Plany Kapitałowe - nowelizacja - zrobimy w Mericie

exec('akt_1251_55','aktp1251');

:: \kali_80
exec('add_attr','rubobj',901,9016,'ZP: składki społeczne od zwolnionego przychodu',1,
   'Składki społeczne od zwolnionego przychodu płacone przez pracownika',,7098);

:: \ppk_01                          Zrobimy w Mericie

:: \kali_81                         Aktualizacja 12.51_71 - Rozwiazanie korygujące dla obsługi zwolnionego przychodu
exec('kali_81','aktp1251');

::exec('ppk01','napraw_p');         Poprawka do ppk - zrobimy w Mericie

:: \akt_1251_65                     Aktualizacja PPK 12.51_65 - tutaj tylko rubryki i atrybuty, reszta po stronie
::                                                              merita
exec('add_attr','rubobj',72,726,'Wpłaty zwiększające przychód',1);
   exec('add_attr','rubobj',726,7261,'Wpłata podstawowa opłacana przez podmiot zatr.',1,,,7088);
   exec('add_attr','rubobj',726,7262,'Wpłata dodatkowa opłacana przez podmiot zatr.',1,,,7089);
:: uruchamiamy tylko jeśli def zawiera odpowiednie struktury i napraw nie był wykonywany
{? exec('jest_a65','aktp1251') & (var_press('POD_WMW',KST_PPK)<0)
|| exec('akt_1251_65','aktp1251')
?};

:: \test_0006 Przygotowuje listę rachunków, dla których są a nie powinny być naliczone wpłaty PPK.
:: wywołanie przeniesione do tran_vlb.fml

:: \ppk_03 ER/WRT/XP/12.51/1912/0024 Procentowe wysokości wpłat poza okresami obowiązywania umów
:: wywołanie przeniesione do tran_vlb.fml

:: \ppk_04 PR/WRT/XP/12.51/1912/0030
exec('ppk_04','napraw_p');

:: \akt_1251_66 AK_12.51_66 Deklaracje PIT za 2019 od 1 stycznia 2020
::    - zrobimy po stronie Merit

:: \kali_82 ER/WRT/XP/12.51/2001/0028 AK_12.51_66: PIT-11 brak w xml wartości dla pozycji 62 i 63 dla wiersza 7.
::       Prawa autorskie i inne prawa, o których mowa w art.18 ustawy
::    - to samo co \akt_1251_66, zrobimy po stronie Merit

:: \akt_1251_67 Aktualizacja: Zmiana ustalania zaliczki na podtatek dochodowy zgodnie z roporządzeniem MF.
exec('add_attr','rubobj',9,903,'Zmiana progu podatkowego',1);
exec('add_attr','rubobj',903,9031,'% podatku II próg',1,,,7115);
exec('add_attr','rubobj',903,9032,'Dochód I próg podatkowy',1,,,7116);
exec('add_attr','rubobj',903,9033,'Dochód II próg podatkowy',1,,,7117);

:: \korekta_ZP_2020 - funkcja straciła aktualność - nie przenoszone

:: \ppk_prz_zas_rh - Lista osób, które miały policzony składnik Przychód - wpł. PPK na wypłacie zasiłku.
:: wywołanie przeniesione do tran_vlb.fml

:: \kali_83 - ER/WRT/XP/12.51/2003/0026 Zaświadczenie płatnika składek ZUS Z-3 - błąd w przypadku urlopu
::       w jednym miesiącu nieprawidłowe odejmowanie urlopu od miesięcznego wynagrodzenia brutto
::       dla pracownika o stawka godzinowa
exec('kali_83','napraw_p');

:: \akt_1251_83 - Aktualizacja: Dodatkowy zasilek opiekunczy, przestój, kwarantanna
exec('akt_1251_83','aktp1251');

exec('kali_84','napraw_p');

:: \ppk_1251_90 - Aktualizacja: Tarcza antykryzysowa - wsparcie w ewidencji - PPK.
::                Na Mericie tego nie ma
exec('akt_1251_90','aktp1251');

exec('kali_85','napraw_p');

:: \akt_1251_95 - Tarcza - zwiększenie kwoty wolnej od potrąceń komorniczych.
exec('add_attr','rubobj',211,2117,'Zwiększenie ochrony minimalnego wynagrodzenia.',1,,,825,827);

:: \ppk_1251_96 - Aktualizacja PPK 12.51_96
::                Wykonamy po stronie merit

exec('kali_86','napraw_p');

:: \kali_87
:: import rubryk jest robiony z aktualnego pliku, będzie poprawna kolejność

:: \kali_88
exec('add_attr','rubobj',193,1932,'Nieobecności z możliwością przekroczenia limitu',1,
            'Nieobecności urlopowe, których wprowadzenie (na portalu) będzie możliwe pomimo przekroczenia limitu.',,11);
exec('add_attr','rubobj',193,1933,'Nieobecności wymagające ustalenia limitów',1,
            'Nieobecności, dla których złożenie wniosku (na portalu) bez założonych limitów nie jest możliwe.');


:: \ppk_05 - tylko jeśli ppk jest już w xpertis
{? exec('jest','aktp1251')
|| exec('ppk_05','napraw_p')
?};

:: \kali_89
exec('kali_89','napraw_p');

:: \kali_90 - po stronie merit

:: \kali_91 - po stronie merit w zadaniu manualnym \czysc_osoba

:: \akt_1251_86 - Mechanizm eksportu danych z Xpertis do Merit
exec('imex_rep','aktp1251');

:: \kali_92
exec('add_attr','rubobj',15,153,'Bez dopełnienia potrącenia dla całego miesiąca',1,
   'Jeżeli nie wprowadzono nieobecności kalendarzowych we wszystkie dni miesiąca,\n'+
   'wynagrodzenie zostanie naliczone nawet wtedy, gdy nieobecność wypełnia wszystkie dni robocze w miesiącu.');

:: \ppk_06     - po stronie merita formuła o tej samej nazwie

:: \kali_93
exec('add_uses','rubobj',7120,100231);
exec('add_uses','rubobj',7121,100232);

:: \akt_1251_101 - AK_12.51_101 Deklaracje PIT za 2020 zmiany w schematach e-deklaracji PIT od lipca 2020
::                 zrobimy po stronie merit

:: \kali_94
:: import rubryk jest robiony z aktualnego pliku, będzie poprawna kolejność

:: kali_95
exec('kali_95','napraw_p');

:: \ppk_1251_108
exec('add_attr','rubobj',7,76,'Świadczenia niepieniężne',,
   'Jeżeli suma świadczeń niepieniężnych wchodzących w skład podstawy\nemerytalno-rentowej będzie równa wyliczonej'+
   ' podstawie PPK nie zostaną naliczone\nskładki PPK zatrudnionego.');
   exec('add_attr','rubobj',76,761,'Świadczenia socjalne',,
      'Świadczenia socjalne wchodzące w skład podstawy emerytalno-rentowej.',,746);
   exec('add_attr','rubobj',76,762,'Pozostałe świadczenia',,
      'Pozostałe świadczenia wchodzące w skład podstawy emerytalno-rentowej.',,7007);
exec('add_attr','rubobj',7,75,'Korekty składników wynagrodzenia',1);
   exec('add_attr','rubobj',75,750,'Korekta podstawy wpłat',1,,,7110);
   exec('add_attr','rubobj',75,751,'Korekta wpłaty podstawowej opłacanej przez firmę',1,,,7111);
   exec('add_attr','rubobj',75,752,'Korekta wpłaty dodatkowej opłacanej przez firmę',1,,,7112);
   exec('add_attr','rubobj',75,753,'Korekta wpłaty podstawowej opłacanej przez osobę',1,,,7113);
   exec('add_attr','rubobj',75,754,'Korekta wpłaty dodatkowej opłacanej przez osobę',1,,,7114);
{? exec('jest','aktp1251') & exec('jest_a108','aktp1251')
|| exec('ppk_1251_108','aktp1251')
?};

:: \kali_96
exec('kali_96','napraw_p');

::\kali_97
exec('kali_97','aktp1251');

:: \ppk_07
{? exec('jest','aktp1251')
|| exec('ppk_07','napraw_p')
?};

:: \kali_98
exec('kali_98','napraw_p');

:: \akt_1251_104 - Aktualizacja formularza tylko PIT-11 oraz e-deklaracji za rok 2020 od 18.11.2020
::                 zrobimy po stronie merit

:: \akt_1251_115 - Aktualizacja formularzy PIT oraz e-deklaracji za rok 2020 zmiany 18.11.2020 oraz 28.12.2020
::                 zrobimy po stronie merit

:: \akt_1251_118 - Aktualizacja formularzy IFT-1R oraz e-deklaracji za rok 2020 zmiany 28.12.2020
::                 zrobimy po stronie merit

:: \kali_99
exec('kali_99','napraw_p');

:: \kali_100 - będzie podciągnięta najnowsza wersja e-deklaracji po stronie merit

:: \kali_101 - będzie podciągnięta najnowsza wersja e-deklaracji po stronie merit

:: \akt_1251_129 - Aktualizacja GUS Z-02 za rok 2020  - dodanie atrybutu na potrzeby tego sprawozdania o nieobecnosciach
exec('akt_1251_129','napraw_p');

:: \12.51_126 - Aktualizacja Izolacja
::              tylko rubryki i atrybuty reszta po stronie merit
exec('add_attr','rubobj',1211,12114,'Izolacja',1,,,7126);
exec('add_uses','rubobj',7125,14,15,16,19,123,126,129,151,162,191,192);
exec('add_uses','rubobj',7125,195,196,1223,1293,1921,12231,14313);
exec('add_attr','rubobj',12211,122114,'Izolacja',1,,,7125);
exec('add_uses','rubobj',7126,14,15,16,19,100,126,129,151,161,191,192);
exec('add_uses','rubobj',7126,195,196,1001,1293,1921,10011,14331,100112);

:: \zkl_03 - Wypełnienie pola ZO_CEL.ZO_PROG
exec('zkl_03','napraw_p');

:: \kali_102
exec('kali_102','napraw_p');

:: \kali_103
exec('add_attr','rubobj',197,1972,'Brak przenoszenia limitu na kolejny rok',1,'');

:: \kali_104 (ER/WRT/XP/21.14/2109/0016)
exec('add_use','rubobj',642,7090,7091);

:: \*/ak_122.fml - Aktualizacja PIT-4R, PIT-8AR, PIT-11 za rok 2021
::                 zrobimy po stronie merit

:: \kali_105
exec('add_uses','rubobj',7068,1,19,194,1942,19421,19422,1943,19431);

:: \akt_1251_140 - Aktualizacja: Aktualizacja wprowadzonych nieobecności o kodzie 4 po 2022.1.1
::                 Zrobimy po stronie Merit

:: \akt_1251_139 - Aktualizacja: Polski Ład
::                 Tylko rubryki i atrybuty reszta po stronie merit
exec('add_attr','rubobj',9,905,'UKŚ: Ulga z dochodu - dla klasy średniej',1);
      exec('add_attr','rubobj',905,9051,'UKŚ: Przychód do wyliczenia ulgi',1,
         'Przychód podlegający specjalnej uldze z dochodu dla klasy średniej',,7140);
      exec('add_attr','rubobj',905,9052,'UKŚ: Ulga z dochodu',1,
         'Ulga z dochodu dla średniozarabiających',,7141,7142);
         exec('add_attr','rubobj',9052,90521,'UKŚ: Ulga z dochodu',1,
            'Ulga z dochodu dla średniozarabiających',,7141);
         exec('add_attr','rubobj',9052,90522,'UKŚ: korekta ulgi z dochodu',1,
            'Korekta ulgi z dochodu dla średniozarabiających',,7142);
      exec('add_attr','rubobj',905,9053,'UKŚ: Rubryki niestanowiące przychodu dla ulgi',1,
         'Rubryki niestanowiące przychodu dla ulgi z dochodu',,
         510,511,512,513,514,515,516,517,523,524,529,530,531,532,537,7017);
exec('add_attr','rubobj',9,906,'ZDR: składka zdrowotna - informacje podatkowe',1,
   'ZDR: składka zdrowotna - informacje podatkowe',,7143,7144,7145,7146);
   exec('add_attr','rubobj',906,9061,'ZDR: nominalna podstawa opodatkowania',1,
      'ZDR: Informacje podatkowe - nominalna ulga podatkowa',,7145);
   exec('add_attr','rubobj',906,9062,'ZDR: nominalna ulga podatkowa',1,
      'ZDR: Informacje podatkowe - nominalna ulga podatkowa',,7144);
   exec('add_attr','rubobj',906,9063,'ZDR: nominalne koszty uzyskania',1,
      'ZDR: Informacje podatkowe - nominalne koszty uzyskania',,7143);
   exec('add_attr','rubobj',906,9064,'ZDR: nominalna zaliczka na podatek',1,
      'ZDR: Informacje podatkowe - składka zdrowotna',,7146);
   exec('add_attr','rubobj',906,9065,'ZDR: Dochód I próg',1,
      'ZDR: Część dochodu przypadająca na I próg podatkowy.',,7147);
   exec('add_attr','rubobj',906,9066,'ZDR: Dochód II próg',1,
      'ZDR: Część dochodu przypadająca na II próg podatkowy.',,7148);
exec('add_attr','rubobj',901,9018,'ZP: brak zwolnienia przychodu art.21 ust.1 pkt 152 ',1,
   'Składniki płacowe niebędące przychodem podlegającym zwolnieniu od podatku zgodnie z art.21 ust.1 pkt 152 ustawy',,
   510,511,512,513,514,515,516,517,523,524,529,530,531,532,537,7017);
exec('add_attr','rubobj',901,9019,'ZP: brak zwolnienia przychodu art.21 ust.1 pkt 153 ',1,
   'Składniki płacowe niebędące przychodem podlegającym zwolnieniu od podatku zgodnie z art.21 ust.1 pkt 153 ustawy',,
   510,511,512,513,514,515,516,517,523,524,529,530,531,532,537,7017);
exec('add_attr','rubobj',901,90101,'ZP: brak zwolnienia przychodu art.21 ust.1 pkt 154 ',1,
   'Składniki płacowe niebędące przychodem podlegającym zwolnieniu od podatku zgodnie z art.21 ust.1 pkt 154 ustawy',,
   510,511,512,513,514,515,516,517,523,524,529,530,531,532,537,7017);
exec('add_attr','rubobj',901,90102,'ZP: Informacje istotne dla rozliczenia rocznego',1,
   'ZP: Informacje istotne dla rozliczenia rocznego - informacje podatkowe PIT',,
   7094,7098);

:: \ppk_zc_wn_zus
:: Zrobimy po stronie Merit

:: \akt_1251_149 - Aktualizacja: Korekta podatku
::                 Zrobimy po stronie Merit

:: \kali_106
:: Zrobimy po stronie Merit

:: \pomoc_ak_140
:: Zrobimy po stronie Merit

:: \akt_1251_146 - Aktualizacja: Formularze ZUS
::                 Zrobimy po stronie Merit

:: \akt_1251_150 - Aktualizacja: Polski Ład - korekta podatku
::                 Tylko rubryki i atrybuty reszta po stronie merit
exec('add_attr','rubobj',906,9067,'ZDR: składka zdrowotna do odliczenia',1,
      'ZDR: składka zdrowotna do odliczenia od zaliczki wyliczonej wg zasad na dzień 31.12.2021r.',,7149);
exec('add_attr','rubobj',9,907,'Dodatkowe informacje podatkowe',1,
      'Dodatkowe informacje podatkowe potrzebne do naliczenia zaliczki na podatek wg zasad 31.12.2021r.',
         ,7170,7171,7172,7173,7174,7175,7176,7177);
   exec('add_attr','rubobj',907,9071,'OLD: Koszty uzyskania przychodu',1,
         'OLD: Koszty uzyskania przychodu',,7173,7178);
      exec('add_attr','rubobj',9071,90711,'OLD: Koszty uzyskania wg zasad 31.12.2021r.',1,
         'OLD: Koszty uzyskania wyliczone wg zasad na dzień 31.12.2021r.',,7178);
      exec('add_attr','rubobj',9071,90712,'OLD: Koszty uzyskania PA wg zasad 31.12.2021r.',1,
         'OLD: Koszty uzyskania dla praw autorskich wg zasad 31.12.2021r.',,7173);
   exec('add_attr','rubobj',907,9072,'OLD: Ulga podatkowa wg zasad 31.12.2021r.',1,
         'OLD: Ulga podatkowa wyliczona wg zasad na dzień  31.12.2021r.',,7179);
   exec('add_attr','rubobj',907,9073,'Zaliczka na podatek wg zasad 31.12.2021r.',1,
         'OLD: zaliczka na podatek wg zasad 31.12.2021r.',,7171);
   exec('add_attr','rubobj',907,9074,'Zaliczka na podatek od 2022r.',1,
         'Zaliczka na podatek od 2022r.',,7172);
   exec('add_attr','rubobj',907,9075,'OLD: Dochód I próg wg zasad 31.12.2021r.',1,
         'OLD: Dochód I próg wyliczony wg zasad na dzień 31.12.2021r.',,7175);
   exec('add_attr','rubobj',907,9076,'OLD: Dochód II próg wg zasad 31.12.2021r.',1,
         'OLD: Dochód II próg wyliczony wg zasad na dzień 31.12.2021r.',,7176);
   exec('add_attr','rubobj',907,9077,'Nadwyżka wyliczonej zaliczki na podatek',1,
         'Nadwyżka wyliczonej zaliczki na podatek',,7170);
   exec('add_attr','rubobj',907,9078,'Różnica ujemna do rozliczenia',1,
         'Różnica ujemna do zwrotu zaliczki na podatek',,7174);
   exec('add_attr','rubobj',907,9079,'OLD: nominalna zaliczka na podatek',1,
         'OLD: nominalna zaliczka na podatek wyliczona wg zasad na dzień 31.12.2021r.',,7177);

:: \kali_107
:: Zrobimy po stronie Merit

:: \kali_108
exec('kali_108','napraw_p');

:: \akt_1251_154 - Aktualizacja: Pakiet mobilności - rozliczenie diet kierowców
::                 Tylko rubryki i atrybuty reszta po stronie merit
exec('add_attr','rubobj',9,902,'Oddelegowania do pracy za granicą',1,
      'Kwoty obniżające podstawę opodatkowania za dochody uzyskane podczas oddelegowania do pracy za granicą.');
   exec('add_attr','rubobj',902,9026,'Kwota diet pomniejszająca podstawę emeryt. i rent.',1,
         'Kwota diet pomniejszająca podstawę emerytalną i rentową.',,7191);
   exec('add_attr','rubobj',902,9027,'Kwota diet pomniejszająca podstawę chor. i wyp.',1,
         'Kwota diet pomniejszająca podstawę chorobową i wypadkową.',,7192);
   exec('add_attr','rubobj',902,9028,'Kwota diet pomniejszająca podstawę ubezp. zdrowot.',1,
         'Kwota diet pomniejszająca podstawę ubezpieczenia zdrowotnego.',,7193);
   exec('add_attr','rubobj',902,9029,'Kwota diet pomniejszająca podstawę FP i FGŚP',1,
         'Kwota diet pomniejszająca podstawę FP i FGŚP.',,7194);
   exec('add_attr','rubobj',902,90201,'Kwota diet pomniejszająca podstawę PPK',1,
         'Kwota diet pomniejszająca podstawę PPK.',,7196);
   exec('add_attr','rubobj',902,90202,'Rubryki nie stanowiące przychodu do odliczeń',1,
         'Rubryki nie stanowiące przychodu do odliczeń.',,
         510,511,512,513,514,515,516,517,523,524,529,530,531,532,537,7017);
   exec('add_attr','rubobj',902,90203,'Kwota diet obniżająca przychód',1,
         'Kwota diet obniżająca przychód.',,7197);
   exec('add_attr','rubobj',902,90204,'Składki niestanowiące obniżenia podstawy opodat.',1,
         'Składki niestanowiące obniżenia podstawy opodatkowania.',,7195);
exec('add_use','rubobj',9053,7197);
exec('add_attr','rubobj',906,9068,'Kwota diet pomniejszająca przychód',1,
     'Kwota diet pomniejszająca przychód.',,7198);
exec('add_attr','rubobj',906,9069,'Składki niestanowiące obniżenia podstawy opodat.',1,
     'Składki niestanowiące obniżenia podstawy opodatkowania.',,7199);
{? exec('jest','aktp1251') & exec('jest_a154','aktp1251')
|| exec('akt_1251_154','aktp1251')
?};

:: \ppk_08
exec('add_attr','rubobj',7,77,'Zwroty wpłat',1,'Zwroty wpłat PPK.');
   exec('add_attr','rubobj',77,771,'Zwrot składek PPK firma - wyksięgowanie kosztów',1,
        'Zwrot składek PPK firma - wyksięgowanie kosztów.',,7190);

:: \ppk_09
exec('add_attr','rubobj',77,772,'Kwoty zwrotów składek PPK firma - wyksięg. kosztów',1,
     'Kwoty zwrotów składek PPK firma - wyksięgowanie kosztów.');
   exec('add_attr','rubobj',772,7721,'Kwota zwrotu składek podstawowych PPK firma',1,
        'Kwota zwrotu składek podstawowych PPK firma - wyksięgowanie kosztów.',,7201);
   exec('add_attr','rubobj',772,7722,'Kwota zwrotu składek dodatkowych PPK firma',1,
        'Kwota zwrotu składek dodatkowych PPK firma - wyksięgowanie kosztów.',,7202);

:: \kali_109
:: Import rubryk jest robiony z aktualnego pliku, zostaną zaimportowane poprawne znaczniki

:: \akt_1251_147 - Aktualizacja: Formularze PIT za rok 2022
::                 Tylko rubryki i atrybuty reszta po stronie merit
exec('add_attr','rubobj',100,1006,'Składki na związki zawodowe odliczane od dochodu',1,
  'Składki członkowskie na rzecz związków zawodowych pobrane przez płatnika, podlegające odliczeniu od dochodu, '+
  '\no których mowa w art. 26 ust. 1 pkt 2c ustawy wykazywane na PIT-11 od 2022 roku.');

:: \akt_1251_158 - Aktualizacja: Polski Ład - zmiany od 1 lipca
exec('add_attr','rubobj',55,552,'Zasiłki macierzyńskie',1,
   'Zasiłki macierzyńskie.',,523,524,7017);
exec('add_attr','rubobj',901,90103,'ZP: Przychód z zasiłku macierzyńskiego',1,
   'Przychód z zasiłku macierzyńskiego.',,7184);
exec('add_attr','rubobj',901,90104,'ZP: Przychód ze stosunku pracy',1,
   'Przychód ze stosunku pracy i pokrewnych.',,7182);
exec('add_attr','rubobj',901,90105,'ZP: Przychód z umowy zlecenia',1,
   'Przychód z umowy zlecenia.',,7183);
exec('add_use','rubobj',90102,7182,7183,7184);

:: \kali_110
:: Import rubryk jest robiony z aktualnego pliku, zostanie zaimportowana dodatkowa rubryka

:: \kali_111
exec('add_attr','rubobj',902,90206,'Składniki niestanowiące przychodu do proporcji',1,
     'Składniki, które wchodzą do postawy opodatkowania ale nie wchodzą do podstawy ubezpieczeń i nie są zasiłkami. '
     'Składniki te służą do pomniejszenia przychodu używanego do proporcjonalnego wyliczenia '
     'składek niestanowiących obniżenia podstawy opodatkowania.',,655,771,779,7093,7109);

:: \kali_112
exec('add_attr','rubobj',5612,56122,'Podstawa Emerytalno-Rentowa (korekta)',1,
     'Podstawa Emerytalno-Rentowa (korekta)',,7217);

:: \kali_113
_tip_1:="
   'Składniki z atrybutem '+form(_a,,,'99')+', które powinny być uwzględnione w podstawie, '+
   'w kwocie pomniejszonej proporcjonalnie o liczbę dni nieobecności w stosunku do liczby '+
   'dni kalendarzowych miesiąca listy płac.\nNieobecności powodujące pomniejszenie są '+
   'określone w atrybucie '+form(_b,,,'99')+'.'
";
_tip_2:="
   'Nieobecności powodujące pomniejszenie podstawy o część kwoty składników z atrybutem '+
   form(_a,,,'99')+'. Kwota pomniejszenia jest proporcjonalna do łącznej liczby dni nieobecności '+
   ' w stosunku do liczby dni kalendarzowych listy płac.'
";
_tip_3:="
   'Podstawa zostanie zmieniona o sumę składników z przypisanym atrybutem.'
";
_txt_1:='Składnik dla bieżącej listy płac';
_txt_2:='Składnik dla poprzednich list płac';
exec('add_attr','rubobj',100,1007,'Składniki pomniejszane w podstawach ubezp.',,
   'Powiązane atrybuty umożliwiają zmianę podstaw składek/wpłat. Pewne składniki wynagrodzenia wypłacane '+
   'w stałej kwocie nie powinny być wliczane w pełnej wysokości w podstawach w przypadku wystąpienia '+
   'określonych nieobecności. W podstawach powinny być uwzględnione tylko do wysokości proporcjonalnej '+
   'do czasu, w którym pracownik nie był nieobecny z określonych powodów.'
);
   exec('add_attr','rubobj',1007,10071,'Ubezpieczenie emerytalno-rentowe',,
      'Powiązane atrybuty umożliwiają określenie, które składniki mają być uwzględniane proporcjonalnie '+
      'do czasu nieobecności w podstawie składek na ubezpieczenie emerytalno-rentowe.'
   );
      exec('add_attr','rubobj',10071,100711,'Pomniejszane składniki płacowe',,_tip_1(100711,100712));
      exec('add_attr','rubobj',10071,100712,'Nieobecności powodujące pomniejszenie',,_tip_2(100711),,
         3,5,28,32
      );
      exec('add_attr','rubobj',10071,100713,'Składniki zmieniające podstawę ubezpieczenia',,_tip_3());
         exec('add_attr','rubobj',100713,1007131,_txt_1,,_tip_3(),,7211);
         exec('add_attr','rubobj',100713,1007132,_txt_2,,_tip_3(),,7219);
   exec('add_attr','rubobj',1007,10072,'Ubezpieczenie chorobowe i wypadkowe',,
      'Powiązane atrybuty umożliwiają określenie, które składniki mają być uwzględniane proporcjonalnie '+
      'do czasu nieobecności w podstawach składek na ubezpieczenie chorobowe i wypadkowe.'
   );
      exec('add_attr','rubobj',10072,100721,'Pomniejszane składniki płacowe',,_tip_1(100721,100722));
      exec('add_attr','rubobj',10072,100722,'Nieobecności powodujące pomniejszenie',,_tip_2(100721),,
         3,5,28,32
      );
      exec('add_attr','rubobj',10072,100723,'Składniki zmieniające podstawę ubezpieczenia',,_tip_3());
         exec('add_attr','rubobj',100723,1007231,_txt_1,,_tip_3(),,7212);
         exec('add_attr','rubobj',100723,1007232,_txt_2,,_tip_3(),,7220);
   exec('add_attr','rubobj',1007,10073,'Składki na FP i FGŚP',,
      'Powiązane atrybuty umożliwiają określenie, które składniki mają być uwzględniane proporcjonalnie '+
      'do czasu nieobecności w podstawach składek na Fundusz Pracy i Fundusz Gwarantowanych Świadczeń Pracowniczych.'
   );
      exec('add_attr','rubobj',10073,100731,'Pomniejszane składniki płacowe',,_tip_1(100731,100732));
      exec('add_attr','rubobj',10073,100732,'Nieobecności powodujące pomniejszenie',,_tip_2(100731),,
         3,5,28,32
      );
      exec('add_attr','rubobj',10073,100733,'Składniki zmieniające podstawę ubezpieczenia',,_tip_3());
         exec('add_attr','rubobj',100733,1007331,_txt_1,,_tip_3(),,7213);
         exec('add_attr','rubobj',100733,1007332,_txt_2,,_tip_3(),,7223);
   exec('add_attr','rubobj',1007,10074,'Wpłaty na PPK',,
      'Powiązane atrybuty umożliwiają określenie, które składniki mają być uwzględniane proporcjonalnie '+
      'do czasu nieobecności w podstawie wpłat na Pracowniczy Plan Kapitałowy.'
   );
      exec('add_attr','rubobj',10074,100741,'Pomniejszane składniki płacowe',,_tip_1(100741,100742));
      exec('add_attr','rubobj',10074,100742,'Nieobecności powodujące pomniejszenie',,_tip_2(100741),,
         3,5,28,32
      );
      exec('add_attr','rubobj',10074,100743,'Składniki zmieniające podstawę wpłat',,_tip_3());
         exec('add_attr','rubobj',100743,1007431,_txt_1,,_tip_3(),,7214);
         exec('add_attr','rubobj',100743,1007432,_txt_2,,_tip_3(),,7221);
   exec('add_attr','rubobj',1007,10075,'Ubezpieczenie zdrowotne',,
      'Powiązane atrybuty umożliwiają określenie, które składniki mają być uwzględniane proporcjonalnie '+
      'do czasu nieobecności w podstawie składek na ubezpieczenie zdrowotne.'
   );
      exec('add_attr','rubobj',10075,100751,'Pomniejszane składniki płacowe',,_tip_1(100751,100752));
      exec('add_attr','rubobj',10075,100752,'Nieobecności powodujące pomniejszenie',,_tip_2(100751),,
         3,5,28,32
      );
      exec('add_attr','rubobj',10075,100753,'Składniki zmieniające podstawę ubezpieczenia',,_tip_3());
         exec('add_attr','rubobj',100753,1007531,_txt_1,,_tip_3(),,7218);
         exec('add_attr','rubobj',100753,1007532,_txt_2,,_tip_3(),,7222);

:: \kali_114
exec('add_attr','rubobj',902,90207,'Kwota diet za czas oddelegowania do pracy za gran.',1,
     'Kwota diet za czas oddelegowania do pracy za granicą.',,7074);

:: \akt_1251_134
_exe1:='exec(\'add_attr\',\'rubobj\',1971,19711,\'Limit dni\',1,,2,';
_exe1+=RUB.sys_sql(197);
_exe1+=')';
_exe2:='exec(\'add_attr\',\'rubobj\',1971,19712,\'Limit godzin\',1,,16,';
_exe2+=RUB.sys_sql(198);
_exe2+=')';

RA_DEF.index('RODZAJ');
RA_DEF.prefix('S');
RA_VAL.index('UNIQUE');
RA_USE.index('RA_USE');
{? RA_DEF.find_key(197)
|| RA_VAL.prefix(RA_DEF.ref);
  {? RA_VAL.first
  || {!
     |? RA_VAL.del()
     !}
  ?}

?};

{? RA_DEF.find_key(198)
|| RA_VAL.prefix(RA_DEF.ref);
   {? RA_VAL.first
   || {!
      |? RA_VAL.del()
      !}
   ?};
   RA_USE.prefix(RA_DEF.ref);
   {? RA_USE.first
   || {!
      |? RA_USE.del()
      !}
   ?};
   RA_DEF.del()
?};

:: aktualizacja atrybutów rubryk
exec('add_attr','rubobj',111,1113,'Dodatkowy',1,,,7132);
exec('add_uses','rubobj',7132,14,16,19,100,113,161,192,193,194,199);
exec('add_uses','rubobj',7132,1001,1924,1932,1942,10011,14350,19421,100112);

exec('add_attr','rubobj',11,117,'Rehabilitacyjny',1);
   exec('add_attr','rubobj',117,1171,'Urlop rehabilitacyjny',1,,,7133);
exec('add_uses','rubobj',7133,11,14,15,16,19,100,117,152,161,192,193,194,197,199);
exec('add_uses','rubobj',7133,1001,1171,1923,1931,1942,10011,14350,19421,100112);

exec('mod_attr','rubobj',197,19,197,'Kontrola dyscypliny pracy');
exec('add_attr','rubobj',197,1971,'Limity opieki (Art. 188)',1,,,13);

($_exe1)();
($_exe2)();
exec('add_attr','rubobj',197,1973,'Limity urlopu rehabilitacyjnego',1,,,7133);
   exec('add_attr','rubobj',1973,19731,'Limit dni',1,,21,7133);

exec('add_attr','rubobj',42,427,'Wynagrodzenie za urlop rehabilitacyjny',1,,,7134);
exec('add_uses','rubobj',7134,6,9,48,63,65,100,631,652,904,1002,6313,6522,9044);
exec('add_uses','rubobj',7134,10023,63131,65221,100231,652211,6313108);

:: \kali_115
RA_DEF.cntx_psh();
RA_USE.cntx_psh();
RA_DEF.index('RODZAJ');
RA_DEF.prefix('S');
RA_USE.index('RA_USE');
{? RA_DEF.find_key(14151)
|| RA_USE.prefix(RA_DEF.ref(),RUB.ref[7068]);
   {? RA_USE.first()
   || RA_USE.del()
   ?}
?};
exec('add_uses','rubobj',7068,14,14111);
RA_USE.cntx_pop();
RA_DEF.cntx_pop();

:: \akt_1251_173
:: po stronie Merit

:: \akt_1251_167
exec('add_attr','rubobj',9,908,'Ulgi podatkowe - pozostałe',1,
   'Ulgi podatkowe - pozostałe',,7230,7231);
   exec('add_attr','rubobj',908,9081,'Zwolnienie z podatku - art.31c',1,
      'Zwolnienie z podstawy opodatkowania - art.31c',,7230);
      exec('add_attr','rubobj',9081,90811,'Zwolnienie z podatku',1,
         'Zwolnienie z podstawy opodatkowania - art.31c.',,7230);
      exec('add_attr','rubobj',9081,90812,'Rozliczenie',1,
         'Dane wprowadzone do rozliczenia.',,7230);
   exec('add_attr','rubobj',908,9082,'Dodatkowa UP - wspólne rozliczenie',1,
      'Dodatkowa UP - wspólne rozliczenie',,7231);

:: \akt_1251_179
:: po stronie Merit

:: \kali_116
exec('add_attr','rubobj',9081,90813,'Składki ZUS',1,
    'Kwota składek przypadająca na zwolnienie z podatku art.31c',,7232);
exec('add_use','rubobj',90812,7232);

:: \kali_117
exec('kali_117','napraw_p');

:: \ppk_1251_PPK01
exec('ppk_1251_PPK01','napraw_p');

:: \pit_1251_PIT01
:: po stronie Merit

:: \kali_118
:: po stronie Merit

:: \kali_119
:: poprawka do funkcji naprawczej z akt_1251_167 ktorej czescu po stronie xpertis nie ma w transferze

:: \PL001_1251
:: po stronie Merit

:: \kali_120
exec('kali_120','napraw_p');

:: \kali_121
exec('kali_121','napraw_p');

:: \kali_122
exec('kali_122','napraw_p');

:: z aktualizacji PZD01 tylko rybryki i atrybuty, reszta zmian bedzie wykonana po stronie Merita jako aktualizacja
:: \rub/ak_pzd01.fml
exec('add_attr','rubobj',81,816,'Praca poza siedzibą firmy',1);
   exec('add_attr','rubobj',816,8161,'Ilość godzin stałej pracy zdalnej',1,
      'Ilość godzin stałej pracy zdalnej',,7138);
   exec('add_attr','rubobj',816,8162,'Ilość godzin pracy poza siedzibą',1,
      'Ilość godzin pracy poza siedzibą firmy.',,7135);
exec('add_attr','rubobj',,103,'Praca zdalna',1);
   exec('add_attr','rubobj',103,1031,'Wypłata',1,'Wypłata dodatku za pracę zdalną',,7224,7225);
   exec('add_attr','rubobj',103,1032,'Suma godzin do wyliczeń',1,'Suma godzin do wyliczeń',,7233,7234);
   exec('add_attr','rubobj',1032,10321,'Suma godzin do wyliczeń bieżący miesiąc',1,
      'Suma godzin do wyliczeń bieżący miesiąc.',,7233);
   exec('add_attr','rubobj',1032,10322,'Suma godzin do wyliczeń poprzedni miesiąc',1,
      'Suma godzin do wyliczeń poprzedni miesiąc.',,7234);

:: \kali_123
exec('add_attr','rubobj',10321,103211,'Suma godzin do wyliczeń bieżący miesiąc',1,
      'Suma godzin do wyliczeń bieżący miesiąc.',,7233);
exec('add_attr','rubobj',10321,103212,'Suma dni do wyliczeń bieżący miesiąc',1,
      'Suma dni do wyliczeń bieżący miesiąc.',,7235);
exec('add_attr','rubobj',10322,103221,'Suma godzin do wyliczeń poprzedni miesiąc',1,
      'Suma godzin do wyliczeń poprzedni miesiąc.',,7234);
exec('add_attr','rubobj',10322,103222,'Suma dni do wyliczeń poprzedni miesiąc',1,
      'Suma dni do wyliczeń poprzedni miesiąc.',,7236);

:: aktualizacja NRU01
:: \e_slo_pdst_praw/aknru01.fml po stronie merita
:: \e_h_um_pola/aknru01.fml po stronie merita
{? exec('upgrade1251_nru01','aktp1251')
|| exec('e_xr_ds_excel','aktp1251')
?};
exec('add_attr','rubobj',19,1902,'Nieobecności przedłużające umowę',1,
    'Nieobecności usprawiedliwione przedłużające umowę o pracę.',,7215,11);
exec('add_attr','rubobj',131,1318,'Siła wyższa',1,
   'Zwolnienie od pracy z powodu działania siły wyższej.',0.5,7216);
exec('add_attr','rubobj',197,1974,'Limity dla siły wyższej',1,
   'Zwolnienie od pracy z powodu działania siły wyższej.',,7216);
   exec('add_attr','rubobj',1974,19741,'Limit dni',1,
      'Limit dni zwolnienia od pracy z powodu działania siły wyższej.',2,7216);
   exec('add_attr','rubobj',1974,19742,'Limit godzin',1,
      'Limit godzin zwolnienia od pracy z powodu działania siły wyższej.',16,7216);
exec('add_attr','rubobj',197,1975,'Limity urlopu opiekuńczego',1,
   'Bezpłatny urlop opiekuńczy w celu zapewnienia osobistej opieki lub wsparcia osób.',,7215);
   exec('add_attr','rubobj',1975,19751,'Limit dni',1,
      'Limit dni bezpłatnego urlopu opiekuńczego w celu zapewnienia osobistej opieki lub wsparcia osób.',5,7215);
exec('add_attr','rubobj',19,1904,'Ręczna modyfikacja procentu świadczenia',1,
   'Możliwa ręczna zmiana procentu świadczenia.',,7216);
exec('add_use','rubobj',161,7216);
exec('add_use','rubobj',152,7215,7216);
exec('add_use','rubobj',199,7216);
exec('add_use','rubobj',1931,7216,7215);
exec('add_use','rubobj',1923,7216,7215);
exec('add_use','rubobj',100112,7216);
exec('add_use','rubobj',14350,7216);
exec('add_use','rubobj',19421,7215,7216);
exec('add_attr','rubobj',45,455,'Siła wyższa',1,
   'Wynagrodzenie za nieobecność typu: siła wyższa',,7228,7229);
exec('add_attr','rubobj',455,4551,'Wynagrodzenie - siła wyższa',1,
   'Wynagrodzenie za nieobecność typu: siła wyższa',,7228);
exec('add_attr','rubobj',455,4552,'Korekta - siła wyższa',1,
   'Korekta wynagrodzenia za nieobecność typu: siła wyższa',,7229);
exec('add_use','rubobj',48,7228,7229);
exec('add_attr','rubobj',11,118,'Siła wyższa',1,
   'Zwolnienie od pracy z powodu działania siły wyższej.',,7216);
   exec('add_attr','rubobj',118,1181,'Nieobecność siła wyższa',1,
      'Zwolnienie od pracy z powodu działania siły wyższej.',,7216);
exec('add_attr','rubobj',11,119,'Opiekuńczy',1,
   'Urlop opiekuńczy.',,7215);
   exec('add_attr','rubobj',119,1191,'Urlop opiekuńczy',1,
      'Urlop opiekuńczy.',,7215);
RA_DEF.cntx_psh();
RA_DEF.index('RODZAJ');
RA_DEF.prefix('S');
_dtUst:=date(2023,4,26);
{? RA_DEF.find_key(1296)
|| exec('use_add','rubobj',RA_DEF.ref(),RUB.ref[32],_dtUst,'N');
   exec('use_add','rubobj',RA_DEF.ref(),RUB.ref[33],_dtUst,'N')
?};
{? RA_DEF.find_key(1291)
|| exec('use_add','rubobj',RA_DEF.ref(),RUB.ref[32],_dtUst,'T');
   exec('use_add','rubobj',RA_DEF.ref(),RUB.ref[33],_dtUst,'T')
?};
RA_DEF.cntx_pop();

:: aktualizacja PZDO2 po stronie merit

&__upd_cmd;
&__upd_wynik;
VAR_DEL.delete('errorobl');
{? ~_s_zus.byl
|| ferase(_s_zus.fn,1)
?};
~~


\edokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Transfer dokumentów w obiegu - wersja 12.41
::----------------------------------------------------------------------------------------------------------------------
:: Usuwanie rozszerzonych wydatków
EDOKUM.cntx_psh(); ETYPY.cntx_psh(); EDOK_ZAL.cntx_psh(); EVAT.cntx_psh(); EDOKOS.cntx_psh(); EDOKLOG.cntx_psh();
_maski1:=EDOKUM.names();
{? _maski1.first()
|| {! |?
      EDOKUM.use('skid_v'+(_maski1.NAME+2)); EDOKUM.prefix();
      {? EDOKUM.first()
      || EDOK_ZAL.use('edokzl'+(EDOKUM.name()+2)); EDOK_ZAL.index('WAL'); EDOK_ZAL.prefix(EDOKUM.ref);
         EVAT.use('skid_a'+(EDOKUM.name()+2));
         EDOKOS.use('skid_y'+(EDOKUM.name()+2));
         EDOKLOG.use('skid_d'+(EDOKUM.name()+2));
         {! |?
            EDOK_ZAL.index('WAL'); EDOK_ZAL.prefix(EDOKUM.ref());
            {? EDOK_ZAL.first()
            || {! |?
                  {? EDOK_ZAL.EDOKUMF
                  || EDOKUM.cntx_psh();
                     _maska:=ref_name(EDOK_ZAL.EDOKUMF)+2;
                     do();

                     EVAT.cntx_psh(); EVAT.use('skid_a'+_maska);
                     EVAT.index('EDOKUM'); EVAT.prefix(EDOK_ZAL.EDOKUMF);
                     {? EVAT.first()
                     || {! |?
                           _delr:=EVAT.del(,1);
                           {? _delr=1 || 0 |? _delr=0 || undo(); 0 || 1 ?}
                        !}
                     ?};
                     EVAT.cntx_pop();

                     EDOKOS.cntx_psh(); EDOKOS.use('skid_y'+_maska);
                     EDOKOS.index('EDOKUM'); EDOKOS.prefix(EDOK_ZAL.EDOKUMF);
                     {? EDOKOS.first()
                     || {! |?
                           _delr:=EDOKOS.del(,1);
                           {? _delr=1 || 0 |? _delr=0 || undo(); 0 || 1 ?}
                        !}
                     ?};
                     EDOKOS.cntx_pop();

                     EDOK_ZAL.cntx_psh(); EDOK_ZAL.use('edokzl'+_maska);
                     EDOK_ZAL.index('ROZLICZ'); EDOK_ZAL.prefix(EDOK_ZAL.EDOKUMF);
                     {? EDOK_ZAL.first()
                     || {! |?
                           _delr:=EDOK_ZAL.del(,1);
                           {? _delr=1 || 0 |? _delr=0 || undo(); 0 || 1 ?}
                        !}
                     ?};
                     EDOK_ZAL.index('EDOKUMF'); EDOK_ZAL.prefix(EDOK_ZAL.EDOKUMF);
                     {? EDOK_ZAL.first()
                     || {! |?
                           EDOK_ZAL.EDOKUMF:=null();
                           EDOK_ZAL.cntx_psh();
                           EDOK_ZAL.prefix();
                           {? EDOK_ZAL.put()
                           || EDOK_ZAL.cntx_pop();
                              _next:=EDOK_ZAL.next()
                           || undo();
                     EDOK_ZAL.cntx_pop();
                              _next:=0
                           ?};
                           _next
                        !}
                     ?};
                     EDOK_ZAL.cntx_pop();

                     EDOKUMZ.cntx_psh(); EDOKUMZ.use('skid_n'+_maska);
                     EDOKUMZ.index('NAZWA'); EDOKUMZ.prefix(EDOK_ZAL.EDOKUMF,);
                     {? EDOKUMZ.first()
                     || {! |?
                           _delr:=EDOKUMZ.del(,1);
                           {? _delr=1 || 0 |? _delr=0 || undo(); 0 || 1 ?}
                        !}
                     ?};
                     EDOKUMZ.cntx_pop();

                     _dok:=EDOK_ZAL.EDOKUMF; _nam:=ref_name(EDOK_ZAL.EDOKUMF);
                     EDOK_ZAL.EDOKUMF:=null;
                     {? ~EDOK_ZAL.put() || undo() ?};
                     {? EDOKUM.seek(#_dok,_nam,1)
                     || EDOKLOG.index('DISP'); EDOKLOG.prefix(EDOKUM.ref());
                        {? EDOKLOG.first() || {! |? EDOKLOG.del() !} ?};
                        {? exec('pismo_obieg','tran_exp')
                        || {? ~EDOKUM.del(,1) || undo() ?}
                        || undo()
                        ?}
                     || undo()
                     ?};
                     end();
                     EDOKUM.cntx_pop()
                  ?};
                  EDOK_ZAL.next()
               !}
            ?};
            EDOKUM.next()
         !}
      ?};
      _maski1.next()
   !}
?};
obj_del(_maski1);

:: poprawianie typów - by były unikalne i widoczne po transferze
ETYPY.cntx_psh();
_ind:=ETYPY.ndx_tmp(,1,'TYPOBIEG',,0,'NAZWA',,0);
_ind1:=ETYPY.ndx_tmp(,1,'SKID_MB',,0);
ETYPY.index(_ind1); ETYPY.prefix();
{? ETYPY.first()
|| {! |?
      ETYPY.cntx_psh(); ETYPY.index(_ind); ETYPY.prefix(ETYPY.TYPOBIEG,ETYPY.NAZWA,);
      {? ETYPY.size()>1
      || _i:=1;
         {! |?
            _naz_old:=ETYPY.NAZWA;
            ETYPY.cntx_psh(); ETYPY.prefix();
            ETYPY.NAZWA:='*'+$_i+ETYPY.NAZWA; ETYPY.put();
            ETYPY.prefix(ETYPY.TYPOBIEG,ETYPY.NAZWA,);
            _dalej:=(ETYPY.size()=1);
            {? ~_dalej || ETYPY.prefix(); ETYPY.NAZWA:=_naz_old; ETYPY.put() ?};
            ETYPY.cntx_pop();
            _i+=1; ~_dalej
         !}
      |? (1+ETYPY.NAZWA)<>'*'
      || ETYPY.prefix(); ETYPY.NAZWA:='*'+ETYPY.NAZWA; ETYPY.put()
      ?};
      ETYPY.cntx_pop();
      ETYPY.next()
   !}
?};
ETYPY.ndx_drop();
ETYPY.cntx_pop();

:: eksport typów
EDOKUM.cntx_pop(); ETYPY.cntx_pop(); EDOK_ZAL.cntx_pop(); EVAT.cntx_pop(); EDOKOS.cntx_pop(); EDOKLOG.cntx_pop();
_tab:=sql('select ETYPY.REFERENCE as REF, ETYPY.ROK, ETYPY.ODD, '+
          'ETYPY.DOM_REJ, ETYPY.DOM_RDOK, ETYPY.DOM_RKOR, ETYPY.DOM_RVAT, ETYPY.DOMGRVAT, ETYPY.AUTOKSIE '+
          ' from ETYPY where 1=0');
ETYPY.cntx_psh(); ETYPY.prefix();
{? ETYPY.first()
|| {! |?
      _tab.REF:=$ETYPY.ref();
      _tab.ROK:=$ETYPY.ROK;
      _tab.ODD:=$ETYPY.ODD;
      _tab.DOM_REJ:=$ETYPY.DOM_REJ;
      _tab.DOM_RDOK:=$ETYPY.DOM_RDOK;
      _tab.DOM_RKOR:=$ETYPY.DOM_RKOR;
      _tab.DOM_RVAT:=$ETYPY.DOM_RVAT;
      _tab.DOMGRVAT:=$ETYPY.DOMGRVAT;
      _tab.AUTOKSIE:=$ETYPY.AUTOKSIE;
      _tab.add();
      ETYPY.next()
   !}
?};
ETYPY.cntx_pop();
_tab.export('etypy.tra',0,'@','UTF-8,pth,noheader',,
            'REF',,1,,
            'ROK',,2,,
            'ODD',,3,,
            'DOM_REJ',,4,,
            'DOM_RDOK',,5,,
            'DOM_RKOR',,6,,
            'DOM_RVAT',,7,,
            'DOMGRVAT',,8,,
            'AUTOKSIE',,9,
           );

:: Eksport użytkowników w EDOKOS
_tab1:=sql('select FORMULA.NAZWA as REF, FORMULA.FORMULA as USERS from FORMULA where 1=0');
EDOKOS.cntx_psh();
_maski2:=EDOKOS.names();
{? _maski2.first()
|| {! |?
      EDOKOS.use(_maski2.NAME); EDOKOS.prefix();
      {? EDOKOS.first()
      || {! |?
            {? EDOKOS.EOSOBY().I_USERS
            || _tab1.USERS:=EDOKOS.EOSOBY().I_USERS().LOGIN;
               _tab1.REF:=$EDOKOS.ref();
               _tab1.add()
            ?};
            EDOKOS.next()
         !}
      ?};
      _maski2.next()
   !}
?};
obj_del(_maski2);
EDOKOS.cntx_pop();
_tab1.export('edokos.tra',0,'@','UTF-8,pth,noheader',,
             'REF',,1,,
             'USERS',,2,
            );

:: Eksport użytkowników i nazwy etapu w EDOKLOG
_tab2:=sql('select FORMULA.NAZWA as REF, FORMULA.FORMULA as USERS, FORMULA.FORMULA as ETAP from FORMULA where 1=0');
EDOKLOG.cntx_psh(); SCH_OBE.cntx_psh();
_maski3:=EDOKLOG.names();
{? _maski3.first()
|| {! |?
      EDOKLOG.use(_maski3.NAME); EDOKLOG.prefix();
      {? EDOKLOG.first()
      || {! |?
            {? EDOKLOG.OPERATOR().I_USERS
            || _tab2.USERS:=EDOKLOG.OPERATOR().I_USERS().LOGIN;
               _tab2.REF:=$EDOKLOG.ref();
               _tab2.ETAP:=EDOKLOG.SCH_OBE().NAZWA;
               _tab2.add()
            ?};
            EDOKLOG.next()
         !}
      ?};
      _maski3.next()
   !}
?};
obj_del(_maski3);
EDOKLOG.cntx_pop(); SCH_OBE.cntx_pop();
_tab2.export('edoklog.tra',0,'@','UTF-8,pth,noheader',,
             'REF',,1,,
             'USERS',,2,,
             'ETAP',,3,
            )


\pismo_obieg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [12.10]
:: OPIS: Odblokowanie pisma po usunięciu dokumentu
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=1;
{? EDOKUM.SEKRET<>''
|| _zwrot:=0;
   _ref:=BB.sqlint(EDOKUM.SEKRET); _nam:=form(EDOKUM.SEKRET-8);
   SEKRET.cntx_psh(); SEKRET.use(_nam); SEKRET.prefix();
   {? _ref<>0 & _nam<>'' & SEKRET.seek(_ref,_nam)
   || {? SEKRET.r_lock(1,1)
      || SEKRET.DKEY:=date(0,0,0); SEKRET.KEYT:=time(0,0,0); SEKRET.KEYUSER:=null;
         SEKRET.DEND:=date(0,0,0); SEKRET.ENDT:=time(0,0,0); SEKRET.ENDUSER:=null;
         SEKRET.AKC:=SEKRET.POTW:=SEKRET.END:=SEKRET.O:=SEKRET.ZGL:='N';
         SEKRET.STATUS:=SEKRET.TYP().REJ;
         SEKRET.EDOKUM1:='';
         {? SEKRET.put()
         || EDOKUM.cntx_psh(); EDOKUM.prefix();
            EDOKUM.SEKRET:='';
            {? EDOKUM.put() || _zwrot:=1 ?};
            EDOKUM.cntx_pop()
         ?};
         SEKRET.r_unlock()
      ?}
   ?};
   SEKRET.cntx_pop()
?};
_zwrot


\es_srsr_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport danych środków z tabel tymczasowych
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - wartości pierwotne, zapis.','Trwa eksport danych',1);
{? ~var_pres('__SRSR') || return() ?};
_symbol:=REF.FIRMA().SYMBOL;

{? __SRSR.first()
|| _f:=fopen('srsr_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         _wiersz:=exec('es_w_srsr','tran_exp');
         fwrite(_f,_wiersz);
         __SRSR.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_srsr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport danych środków, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$__SRSR.ID+_s+__SRSR.NRI+_s+__SRSR.NST+_s+__SRSR.GRP+_s+__SRSR.R+_s;
_wiersz+=$__SRSR.ROK+_s+$__SRSR.OKRES+_s+$__SRSR.DZ+_s+$__SRSR.DE+_s+__SRSR.GR+_s;
_wiersz+=__SRSR.PRZYCHOD+_s+__SRSR.JORG+_s+__SRSR.ODD+_s+__SRSR.NF+_s+__SRSR.ROZ+_s;
_wiersz+=$__SRSR.DES+_s+__SRSR.U+_s+__SRSR.S+_s+__SRSR.SCH_SEZ+_s+$__SRSR.EURO+_s;
_wiersz+=$__SRSR.KURS_EUR+_s+__SRSR.POJAZD+_s+__SRSR.SAMOCHOD+_s+$__SRSR.WARPELNA+_s+$__SRSR.WP+_s;
_wiersz+=__SRSR.POM_ODD+_s+__SRSR.POM_SIE+_s+__SRSR.POM_S+_s+__SRSR.OSOBA_N+_s+__SRSR.OSOBA_P+_s;
_wiersz+=__SRSR.DOKPRZ+_s+__SRSR.DOKSKR+_s+__SRSR.FKS+_s+__SRSR.DOKKSIEG+_s+__SRSR.MP+_s;
_wiersz+=$__SRSR.WKP+_s+$__SRSR.WARP+_s+$__SRSR.UMOP+_s+$__SRSR.NETP+_s+$__SRSR.STAP+_s;
_wiersz+=$__SRSR.DPLP+_s+__SRSR.KONPOD+_s+__SRSR.MF+_s+$__SRSR.WKF+_s+$__SRSR.WARF+_s;
_wiersz+=$__SRSR.UMOF+_s+$__SRSR.NETF+_s+$__SRSR.STAF+_s+$__SRSR.DPLF+_s+__SRSR.KONFIN+_s;
_wiersz+=__SRSR.JM+_s+$__SRSR.MAX+_s+$__SRSR.OKE+_s+$__SRSR.OSTATEK+_s+__SRSR.Z+_s;
_wiersz+=__SRSR.AMOR100+_s+$__SRSR.WARP100+_s+$__SRSR.ZALP100+_s+__SRSR.FREQ100+_s;
_wiersz+=__SRSR.MOD_KTO+_s+$__SRSR.MOD_DATA+_s+$__SRSR.MOD_CZAS+_s+$__SRSR.ULGA+_s+__SRSR.SAM_EL+_s+__SRSR.TAB_KRST;
_wiersz


\es_adok_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Generowanie tabeli tymczasowej z dokumentami zmiany metod amortyzacji (ADOK)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dokumenty zmiany metody amortyzacji, przygotowanie.','Trwa eksport danych',1);
ADOK.cntx_psh(); SROD.cntx_psh(); SKLD.cntx_psh();
_symbol:=REF.FIRMA().SYMBOL;
_TADOK:=ADOK.names();

{? _TADOK.first()
|| {! |?
      {? _TADOK.NAME+4='xxxx' | _TADOK.NAME+4='plan' | _TADOK.NAME+4='____'
      || _TADOK.del()
      || _TADOK.next()
      ?}
   !}
?};

VAR_DEL.delete('__ADOK');
__ADOK:=tab_tmp(2,'ID','INTEGER','ID',
                  'DW','DATE','DW',
                  'DPLF','DATE','DPLF',
                  'DPLP','DATE','DPLP',
                  'DO','DATE','DO',
                  'MF_RODZ','STRING[1]','MF_RODZ',
                  'MF_K','STRING[3]','MF_K',
                  'OKRES','INTEGER','OKRES',
                  'MOD_CZAS','TIME','MOD_CZAS',
                  'MOD_DATA','DATE','MOD_DATA',
                  'MOD_KTO','STRING[20]','MOD_KTO',
                  'MP_RODZ','STRING[1]','MP_RODZ',
                  'MP_K','STRING[3]','MP_K',
                  'ND','STRING[20]','ND',
                  'ROK','INTEGER','ROK',
                  'STAFIN','REAL','STAFIN',
                  'STAWKA','REAL','STAWKA',
                  'WKF','REAL','WKF',
                  'WKP','REAL','WKP');

{? _TADOK.first()
|| {! |?
      ADOK.use(_TADOK.NAME);
      SROD.use('srod'+(_TADOK.NAME+4));
      SKLD.use('skld'+(_TADOK.NAME+4));
      ADOK.prefix();
      {? ADOK.first()
      || {! |?
            {? ~__ADOK.find_key(ADOK.ST().ID,ADOK.DW)
            || __ADOK.blank();
               __ADOK.ID:=ADOK.ST().ID;
               __ADOK.DW:=ADOK.DW;
               __ADOK.DPLF:=ADOK.DPLF;
               __ADOK.DPLP:=ADOK.DPLP;
               __ADOK.DO:=ADOK.DO;
               __ADOK.MF_RODZ:=ADOK.MF().RODZAJ;
               __ADOK.MF_K:=ADOK.MF().K;
               __ADOK.OKRES:=ADOK.MO;
               __ADOK.MOD_CZAS:=ADOK.MOD_CZAS;
               __ADOK.MOD_DATA:=ADOK.MOD_DATA;
               __ADOK.MOD_KTO:=ADOK.MOD_KTO;
               __ADOK.MP_RODZ:=ADOK.MP().RODZAJ;
               __ADOK.MP_K:=ADOK.MP().K;
               __ADOK.ND:={? ADOK.ND<>'' || ADOK.ND || ADOK.DOT().S ?};
               __ADOK.ROK:=ADOK.AR;
               __ADOK.STAFIN:=ADOK.STAFIN;
               __ADOK.STAWKA:=ADOK.STAWKA;
               __ADOK.WKF:=ADOK.WKF;
               __ADOK.WKP:=ADOK.WKP;
               __ADOK.add()
            ?};
            ADOK.next()
         !}
      ?};
      _TADOK.next()
   !}
?};
ADOK.cntx_pop(); SROD.cntx_pop(); SKLD.cntx_pop()


\es_adok_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport dokumentów zmiany metod amortyzacji (z tabeli tymczasowej __ADOK)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dokumenty zmiany metody amortyzacji, zapis.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
_f:=fopen('adok_'+_symbol+'.tra','Uw',1);
{? _f
|| {? __ADOK.first()
   || {! |?
         _wiersz:=exec('es_w_adok','tran_exp');
         fwrite(_f,_wiersz);
         __ADOK.next()
      !}
   ?};
   fclose(_f);
   &_f
?}


\es_w_adok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli ADOK, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$__ADOK.ID+_s+$__ADOK.DW+_s+$__ADOK.DPLF+_s+$__ADOK.DPLP+_s;
_wiersz+=$__ADOK.DO+_s+__ADOK.MF_RODZ+_s+__ADOK.MF_K+_s+$__ADOK.OKRES+_s+$__ADOK.MOD_CZAS+_s;
_wiersz+=$__ADOK.MOD_DATA+_s+__ADOK.MOD_KTO+_s+__ADOK.MP_RODZ+_s+__ADOK.MP_K+_s+__ADOK.ND+_s;
_wiersz+=$__ADOK.ROK+_s+$__ADOK.STAFIN+_s+$__ADOK.STAWKA+_s+$__ADOK.WKF+_s+$__ADOK.WKP;
_wiersz


\es_amor_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport amortyzacji (AMOR)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - amortyzacja.','Trwa eksport danych',1);
AMOR.cntx_psh(); SROD.cntx_psh(); SKLD.cntx_psh();

_symbol:=REF.FIRMA().SYMBOL;
_AMOR:=AMOR.names();

{? _AMOR.first()
|| {! |?
      {? _AMOR.NAME+4='xxxx' | _AMOR.NAME+4='plan' | _AMOR.NAME+4='____'
      || _AMOR.del()
      || _AMOR.next()
      ?}
   !}
?};

{? _AMOR.first()
|| {! |?
      AMOR.use(_AMOR.NAME);
      _maska:={? (_AMOR.NAME-4)+1 = 'r'
              || 'srod'+(_AMOR.NAME+4)
              || 'srodplan'
              ?};
      SROD.use(_maska);
      AMOR.prefix();
      SROD.prefix();
      {? AMOR.first()
      || _f:=fopen(_AMOR.NAME+'_'+_symbol+'.tra','Uw',1);
         {? _f
         || {! |?
               _wiersz:=exec('es_w_amor','tran_exp');
               fwrite(_f,_wiersz);
               AMOR.next()
            !};
            fclose(_f);
            &_f
         ?}
      ?};
      _AMOR.next()
   !}
?};
AMOR.cntx_pop(); SROD.cntx_pop(); SKLD.cntx_pop()


\es_w_amor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli AMOR, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$AMOR.ST().ID+_s+$AMOR.A1+_s+$AMOR.A2+_s+$AMOR.A3+_s+$AMOR.A4+_s+$AMOR.A5+_s+$AMOR.A6+_s;
_wiersz+=$AMOR.A7+_s+$AMOR.A8+_s+$AMOR.A9+_s+$AMOR.A10+_s+$AMOR.A11+_s+$AMOR.A12+_s;
_wiersz+=$AMOR.A13+_s+$AMOR.A14+_s+$AMOR.A15+_s+$AMOR.A16+_s+$AMOR.A17+_s+$AMOR.A18+_s;
_wiersz+=$AMOR.A19+_s+$AMOR.A20+_s+$AMOR.A21+_s+$AMOR.A22+_s+$AMOR.A23+_s+$AMOR.A24;
_wiersz


\es_dokp_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Przygotowania listy dokumentów pozostałych (DOKP)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dokumenty pozostałe, przygotowanie.','Trwa eksport danych',1);
DOKP.cntx_psh(); SROD.cntx_psh(); SKLD.cntx_psh();

_symbol:=REF.FIRMA().SYMBOL;
_TDOKP:=DOKP.names();

{? _TDOKP.first()
|| {! |?
      {? _TDOKP.NAME+4='xxxx' | _TDOKP.NAME+4='plan' | _TDOKP.NAME+4='____'
      || _TDOKP.del()
      || _TDOKP.next()
      ?}
   !}
?};

VAR_DEL.delete('__DOKP');

__DOKP:=tab_tmp(3,'ID','INTEGER','ID',
                  'DW','DATE','DW',
                  'T','STRING[2]','T',
                  'ND','STRING[30]','ND',
                  'KST','STRING[1]','KST',
                  'GR','STRING[15]','GR',
                  'MOD_CZAS','TIME','MOD_CZAS',
                  'MOD_DATA','DATE','MOD_DATA',
                  'MOD_KTO','STRING[20]','MOD_KTO',
                  'OPI','STRING[40]','OPI',
                  'SEZ','STRING[1]','SEZ',
                  'SCH_SEZ','STRING[20]','SCH_SEZ',
                  'WKF','REAL','WKF',
                  'WKP','REAL','WKP',
                  'BLOK','STRING[1]','BLOK');

{? _TDOKP.first()
|| {! |?
      DOKP.use(_TDOKP.NAME);
      SROD.use('srod'+(_TDOKP.NAME+4));
      DOKP.prefix();
      {? DOKP.first()
      || {! |?
:: eksport tylko w przypadku zmiany grupy, zmian amortyzacji sezonowej lub zmiany blokady amortyzacji
            {? ~__DOKP.find_key(DOKP.ST().ID,DOKP.DW,DOKP.T)
               & (DOKP.SGR<>DOKP.GR | DOKP.SEZ_OLD<>DOKP.SEZ_NEW | DOKP.SCH_NEW<>DOKP.SCH_OLD | DOKP.BLOK<>DOKP.SBLOK)
            || __DOKP.blank();
               __DOKP.ID:=DOKP.ST().ID;
               __DOKP.DW:=DOKP.DW;
               __DOKP.ND:=DOKP.ND;
               __DOKP.KST:=DOKP.GR().KST().KST;
               {? DOKP.SGR<>DOKP.GR
               || __DOKP.GR:=DOKP.GR().GR
               || __DOKP.GR:=''
               ?};
               __DOKP.MOD_CZAS:=DOKP.MOD_CZAS;
               __DOKP.MOD_DATA:=DOKP.MOD_DATA;
               __DOKP.MOD_KTO:=DOKP.MOD_KTO;
               __DOKP.OPI:=DOKP.OPI;
               {? DOKP.SEZ_OLD<>DOKP.SEZ_NEW
               || __DOKP.SEZ:=DOKP.SEZ_NEW;
                  __DOKP.SCH_SEZ:=DOKP.SCH_NEW().KOD
               || __DOKP.SEZ:='';
                  __DOKP.SCH_SEZ:=''
               ?};
               __DOKP.T:=DOKP.T;
               __DOKP.WKF:=DOKP.WKF;
               __DOKP.WKP:=DOKP.WKP;
               {? DOKP.BLOK<>DOKP.SBLOK
               || __DOKP.BLOK:=DOKP.BLOK
               || __DOKP.BLOK:=''
               ?};
               {? __DOKP.BLOK<>'' | __DOKP.SEZ<>'' | __DOKP.GR<>''
               || __DOKP.add()
               ?}
            ?};
            DOKP.next()
         !}
      ?};
      _TDOKP.next()
   !}
?};
DOKP.cntx_pop(); SROD.cntx_pop(); SKLD.cntx_pop()


\es_dokp_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Export listy dokumentów pozostałych (DOKP)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dokumenty pozostałe.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
_f:=fopen('dokp_'+_symbol+'.tra','Uw',1);
{? _f
|| {? __DOKP.first()
   || {! |?
         _wiersz:=exec('es_w_dokp','tran_exp');
         fwrite(_f,_wiersz);
         __DOKP.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_dokp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli DOKP, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$__DOKP.ID+_s+$__DOKP.DW+_s+__DOKP.T+_s+__DOKP.ND+_s+__DOKP.KST+_s;
_wiersz+=__DOKP.GR+_s+$__DOKP.MOD_CZAS+_s+$__DOKP.MOD_DATA+_s+__DOKP.MOD_KTO+_s;
_wiersz+=__DOKP.OPI+_s+__DOKP.SEZ+_s+__DOKP.SCH_SEZ+_s;
_wiersz+=$__DOKP.WKF+_s+$__DOKP.WKP+_s+__DOKP.BLOK;
_wiersz


\es_doku_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Generowanie listy dokumentów wartościowych (DOKU)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dokumenty wartościowe, przygotowanie.','Trwa eksport danych',1);
DOKU.cntx_psh(); SROD.cntx_psh(); SKLD.cntx_psh();
SKLD.prefix();
_symbol:=REF.FIRMA().SYMBOL;
_TDOKU:=DOKU.names();

{? _TDOKU.first()
|| {! |?
      {? _TDOKU.NAME+4='xxxx' | _TDOKU.NAME+4='plan' | _TDOKU.NAME+4='____'
      || _TDOKU.del()
      || _TDOKU.next()
      ?}
   !}
?};

VAR_DEL.delete('__DOKU');

__DOKU:=tab_tmp(3,'ID','INTEGER','ID',
                  'ROK','INTEGER','AR',
                  'ND','STRING[20]','ND',
                  'REFSQL','STRING[16]','REFESQL',
                  'ARK','INTEGER','ARK',
                  'DO','DATE','DO',
                  'DOKKSIEG','STRING[16]','DOKKSIEG',
                  'DW','DATE','DW',
                  'INW','INTEGER','INW',
                  'MAX','REAL','MAX',
                  'OKRES','INTEGER','OKRES',
                  'MOD_CZAS','TIME','MOD_CZAS',
                  'MOD_DATA','DATE','MOD_DATA',
                  'MOD_KTO','STRING[20]','MOD_KTO',
                  'OKE','INTEGER','OKE',
                  'OPI','STRING[100]','OPI',
                  'OSTATEK','REAL','OTATEK',
                  'P','STRING[1]','P',
                  'PRZYCHOD','STRING[15]','PRZYCHOD',
                  'ROZ','STRING[15]','ROZ',
                  'T','STRING[2]','T',
                  'ULGA','REAL','ULGA',
                  'UMOF','REAL','UMOF',
                  'UMOP','REAL','UMOP',
                  'UWAGI','STRING[40]','UWAGI',
                  'W','STRING[1]','W',
                  'WARP','REAL','WARP',
                  'WARF','REAL','WARF',
                  'Z','STRING[1]','Z',
                  'ELNRI','STRING[18]','ELNRI');

{? _TDOKU.first()
|| {! |?
      DOKU.use(_TDOKU.NAME);
      SROD.use('srod'+(_TDOKU.NAME+4));
      SKLD.use('skld'+(_TDOKU.NAME+4));
      DOKU.prefix();
      {? DOKU.first()
      || {! |?
            {? ~__DOKU.find_key(DOKU.ST().ID,DOKU.AR,DOKU.ND,)
            || __DOKU.blank(1);
               __DOKU.ID:=DOKU.ST().ID;
               __DOKU.ROK:=DOKU.AR;
               __DOKU.ND:={? DOKU.ND<>'' || DOKU.ND || DOKU.DOT().S ?};
               __DOKU.REFSQL:=$DOKU.ref();
               __DOKU.ARK:=DOKU.ARK;
               __DOKU.DO:=DOKU.DO;
               __DOKU.DOKKSIEG:=DOKU.DOKKSIEG;
               __DOKU.DW:=DOKU.DW;
               __DOKU.INW:=DOKU.INW;
               __DOKU.MAX:=DOKU.MAX;
               __DOKU.OKRES:=DOKU.MO;
               __DOKU.MOD_CZAS:=DOKU.MOD_CZAS;
               __DOKU.MOD_DATA:=DOKU.MOD_DATA;
               __DOKU.MOD_KTO:=DOKU.MOD_KTO;
               __DOKU.OKE:=DOKU.OKE;
               __DOKU.OPI:=DOKU.OPI;
               __DOKU.OSTATEK:=DOKU.OSTATEK;
               __DOKU.P:=DOKU.P;
               __DOKU.PRZYCHOD:=DOKU.RP().R;
               __DOKU.ROZ:=DOKU.RR().R;
               __DOKU.T:=DOKU.T;
               __DOKU.ULGA:=DOKU.ULGA;
               __DOKU.UMOF:=DOKU.UMOF;
               __DOKU.UMOP:=DOKU.UMOP;
               __DOKU.UWAGI:=DOKU.UWAGI;
               __DOKU.W:=DOKU.W;
               __DOKU.ELNRI:={? DOKU.EL<>null || DOKU.EL().NRI || '' ?};
               __DOKU.WARP:=DOKU.WAR1+DOKU.WAR2;
               __DOKU.WARF:=DOKU.WARF;
               __DOKU.Z:=DOKU.Z;
               __DOKU.add()
            ?};
            DOKU.next()
         !}
      ?};
      _TDOKU.next()
   !}
?};
DOKU.cntx_pop(); SROD.cntx_pop(); SKLD.cntx_pop()


\es_doku_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport listy dokumentów wartościowych (__DOKU)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dokumenty wartościowe, zapis.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
_f:=fopen('doku_'+_symbol+'.tra','Uw',1);
{? _f
|| {? __DOKU.first()
   || {! |?
         _wiersz:=exec('es_w_doku','tran_exp');
         fwrite(_f,_wiersz);
         __DOKU.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_doku
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli DOKU, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$__DOKU.ID+_s+$__DOKU.ROK+_s+__DOKU.ND+_s+$__DOKU.ARK+_s+$__DOKU.DO+_s+__DOKU.DOKKSIEG+_s;
_wiersz+=$__DOKU.DW+_s+$__DOKU.INW+_s+$__DOKU.MAX+_s+$__DOKU.OKRES+_s+$__DOKU.MOD_CZAS+_s;
_wiersz+=$__DOKU.MOD_DATA+_s+__DOKU.MOD_KTO+_s+$__DOKU.OKE+_s+__DOKU.OPI+_s+$__DOKU.OSTATEK+_s;
_wiersz+=__DOKU.P+_s+__DOKU.PRZYCHOD+_s+__DOKU.ROZ+_s+__DOKU.T+_s;
_wiersz+=$__DOKU.ULGA+_s+$__DOKU.UMOF+_s+$__DOKU.UMOP+_s+__DOKU.UWAGI+_s+$__DOKU.W+_s+$__DOKU.WARP+_s;
_wiersz+=$__DOKU.WARF+_s+__DOKU.Z+_s+__DOKU.REFSQL+_s+__DOKU.ELNRI;
_wiersz


\es_elp_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport przesunięć elementów środków (ELP)
::----------------------------------------------------------------------------------------------------------------------
ELP.cntx_psh(); DOKU.cntx_psh(); SROD.cntx_psh(); SKLD.cntx_psh();

_symbol:=REF.FIRMA().SYMBOL;
_ELP:=ELP.names();

{? _ELP.first()
|| {! |?
      {? _ELP.NAME+4='xxxx' | _ELP.NAME+4='plan' | _ELP.NAME+4='____'
      || _ELP.del()
      || _ELP.next()
      ?}
   !}
?};

{? _ELP.first()
|| {! |?
      ELP.use(_ELP.NAME);
      SROD.use('srod'+(_ELP.NAME+4));
      SKLD.use('skld'+(_ELP.NAME+4));
      DOKU.use('dokw'+(_ELP.NAME+4));
      ELP.prefix();
      {? ELP.first()
      || _f:=fopen(_ELP.NAME+'_'+_symbol+'.tra','Uw',1);
         {? _f
         || {! |?
               _wiersz:=exec('es_w_elp','tran_exp');
               fwrite(_f,_wiersz);
               ELP.next()
            !};
            fclose(_f);
            &_f
         ?}
      ?};
      _ELP.next()
   !}
?};

ELP.cntx_pop(); DOKU.cntx_pop(); SROD.cntx_pop(); SKLD.cntx_pop()


\es_w_elp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli ELP, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$ELP.ELD().ST().ID+_s+ELP.ELD().NRI+_s+$ELP.ELU().ST().ID+_s;
_wiersz+=$ELP.LE().DW+_s+ELP.LE().ND+_s+ELP.LE().T+_s;
_wiersz+=$ELP.ME().DW+_s+ELP.ME().ND+_s+ELP.ME().T+_s;
_wiersz


\es_ktrwp_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport podziałów kontrolingowych środków (KTRWP)
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_KTRWP:=KTRWP.names();


{? _KTRWP.first()
|| {! |?
      KTRWP.use(_KTRWP.NAME);
      KTRWP.prefix();
      {? KTRWP.first()
      || _f:=fopen(_KTRWP.NAME+'_'+_symbol+'.tra','Uw',1);
         {? _f
         || {! |?
               _wiersz:=exec('es_w_ktrwp','tran_exp');
               fwrite(_f,_wiersz);
               KTRWP.next()
            !};
            fclose(_f);
            &_f
         ?}
      ?};
      _KTRWP.next()
   !}
?}


\es_w_ktrwp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli KTRWP, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$KTRWP.ref()+_s+$KTRWP.SROD_ID+_s+$KTRWP.DOKU;
_wiersz


\es_skld_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Generowanie tymczasowej tabeli elementów środków (SKLD)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - elementy środków, przygotowanie.','Trwa eksport danych',1);
SKLD.cntx_psh(); SROD.cntx_psh();
_symbol:=REF.FIRMA().SYMBOL;
_TSKLD:=SKLD.names();

{? _TSKLD.first()
|| {! |?
      {? _TSKLD.NAME+4='xxxx' | _TSKLD.NAME+4='plan' | _TSKLD.NAME+4='____'
      || _TSKLD.del()
      || _TSKLD.next()
      ?}
   !}
?};

VAR_DEL.delete('__SKLD');
__SKLD:=tab_tmp(2,'ID','INTEGER','ID',
                  'NRI','STRING[20]','NRI',
                  'DE','DATE','DE',
                  'DSE','DATE','DSE',
                  'DZ','DATE','DZ',
                  'ME','STRING[20]','ME',
                  'MOD_CZAS','TIME','MOD_CZAS',
                  'MOD_DATA','DATE','MOD_DATA',
                  'MOD_KTO','STRING[20]','MOD_KTO',
                  'NF','STRING[25]','NF',
                  'NRST','STRING[15]','NRST',
                  'NST','STRING[40]','NST',
                  'OPI','STRING[100]','OPI',
                  'WARF','REAL','WARF',
                  'WARP','REAL','WARP'
               );

{? _TSKLD.first()
|| {! |?
      SKLD.use(_TSKLD.NAME);
      SROD.use('srod'+(_TSKLD.NAME+4));
      SKLD.prefix();
      {? SKLD.first()
      || {! |?
            {? ~__SKLD.find_key(SKLD.ST().ID,SKLD.NRI)
            || __SKLD.blank();
               __SKLD.ID:=SKLD.ST().ID;
               __SKLD.NRI:=SKLD.NRI;
               __SKLD.DE:=SKLD.DE;
               __SKLD.DSE:=SKLD.DSE;
               __SKLD.DZ:=SKLD.DZ;
               __SKLD.ME:=SKLD.ME;
               __SKLD.MOD_CZAS:=SKLD.MOD_CZAS;
               __SKLD.MOD_DATA:=SKLD.MOD_DATA;
               __SKLD.MOD_KTO:=SKLD.MOD_KTO;
               __SKLD.NF:=SKLD.NF;
               __SKLD.NRST:=SKLD.NRST;
               __SKLD.NST:=SKLD.NST;
               __SKLD.OPI:=SKLD.OPI;
               __SKLD.WARF:=SKLD.WARF;
               __SKLD.WARP:=SKLD.WARP;
               __SKLD.add()
            || _put:=0;
               {? __SKLD.DSE<>SKLD.DSE || __SKLD.DSE:=SKLD.DSE; _put:=1 ?};
               {? _put || __SKLD.put() ?}
            ?};
            SKLD.next()
         !}
      ?};
      _TSKLD.next()
   !}
?};


SKLD.cntx_pop(); SROD.cntx_pop()


\es_skld_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport elementów środków (SKLD)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - elementy środków, zapis.','Trwa eksport danych',1);
{? ~var_pres('__SKLD') || return() ?};
_symbol:=REF.FIRMA().SYMBOL;

{? __SKLD.first()
|| _f:=fopen('skld_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         _wiersz:=exec('es_w_skld','tran_exp');
         fwrite(_f,_wiersz);
         __SKLD.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_skld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli SKLD, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$__SKLD.ID+_s+__SKLD.NRI+_s+$__SKLD.DE+_s+$__SKLD.DSE+_s+$__SKLD.DZ+_s+__SKLD.ME+_s;
_wiersz+=$__SKLD.MOD_CZAS+_s+$__SKLD.MOD_DATA+_s+__SKLD.MOD_KTO+_s+__SKLD.NF+_s+__SKLD.NRST+_s;
_wiersz+=exec('at','tran_exp',__SKLD.NST)+_s+__SKLD.OPI+_s+$__SKLD.WARF+_s+$__SKLD.WARP;
_wiersz


\es_zfsr_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Generowanie listy dofinansowań do środków (ZFSR)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dofinansowania do środków, przygotowanie.','Trwa eksport danych',1);
SROD.cntx_psh(); DOKU.cntx_psh(); ZFSR.cntx_psh(); ZF.cntx_psh();

_symbol:=REF.FIRMA().SYMBOL;
_TZFSR:=ZFSR.names();

{? _TZFSR.first()
|| {! |?
      {? _TZFSR.NAME+4='xxxx' | _TZFSR.NAME+4='plan' | _TZFSR.NAME+4='____'
      || _TZFSR.del()
      || _TZFSR.next()
      ?}
   !}
?};

VAR_DEL.delete('__ZFSR');
__ZFSR:=tab_tmp(2,'ID','INTEGER','ID',
                  'AUTOID','STRING[16]','AUTOID',
                  'ZF_NAME','STRING[30]','ZF_NAME',
                  'DATA','DATE','DATA',
                  'DOKU_AR','INTEGER','DOKU_AR',
                  'DOKU_ND','STRING[30]','DOKU_ND',
                  'ZF_UMOWA','STRING[30]','ZF_UMOWA',
                  'DATA_ZF','DATE','DATA_ZF',
                  'DATA_ZP','DATE','DATA_ZP',
                  'DOKU_DW','DATE','DOKU_DW',
                  'DOKU_T','STRING[2]','DOKU_T',
                  'KWOTA','REAL','KWOTA',
                  'KWOTA_P','REAL','KWOTA_P',
                  'OKRES','INTEGER','OKRES',
                  'ROZF','STRING[1]','ROZF',
                  'ROZP','STRING[1]','ROZP',
                  'KONFIN','STRING[35]','KONFIN',
                  'KONPOD','STRING[35]','KONPOD');

{? _TZFSR.first()
|| {! |?
      ZFSR.use(_TZFSR.NAME);
      SROD.use('srod'+(_TZFSR.NAME+4));
      DOKU.use('dokw'+(_TZFSR.NAME+4));
      ZFSR.prefix(); SROD.prefix(); DOKU.prefix();
      {? ZFSR.first()
      || {! |?
            {? ~__ZFSR.find_key(ZFSR.SROD().ID,ZFSR.AUTOID)
            || __ZFSR.blank(1);
               __ZFSR.ID:=ZFSR.SROD().ID;
               __ZFSR.AUTOID:=ZFSR.AUTOID;
               __ZFSR.ZF_NAME:=ZFSR.ZF().ZF;
               __ZFSR.DATA:=ZFSR.DATA;
               __ZFSR.DOKU_AR:=ZFSR.DOKU().AR;
               __ZFSR.DOKU_ND:=ZFSR.DOKU().ND;
               __ZFSR.ZF_UMOWA:=ZFSR.ZF().UMOWA;
               __ZFSR.DATA_ZF:=ZFSR.DATA_ZF;
               __ZFSR.DATA_ZP:=ZFSR.DATA_ZP;
               __ZFSR.DOKU_DW:=ZFSR.DOKU().DW;
               __ZFSR.DOKU_T:=ZFSR.DOKU().T;
               __ZFSR.KWOTA:=ZFSR.KWOTA;
               __ZFSR.KWOTA_P:=ZFSR.KWOTAP;
               __ZFSR.OKRES:=ZFSR.MO;
               __ZFSR.ROZF:=ZFSR.ROZF;
               __ZFSR.ROZP:=ZFSR.ROZP;
               __ZFSR.KONFIN:=ZFSR.ZSKONF().KOD;
               __ZFSR.KONPOD:=ZFSR.ZSKONP().KOD;
               __ZFSR.add()
            ?};
            ZFSR.next()
         !}
      ?};
      _TZFSR.next()
   !}
?};
SROD.cntx_pop(); DOKU.cntx_pop(); ZFSR.cntx_pop(); ZF.cntx_pop()


\es_zfsr_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.41]
:: OPIS: Export wygenerowanej listy dofinansowań do środków
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dofinansowania do środków, zapis.','Trwa eksport danych',1);
{? ~var_pres('__ZFSR') || return() ?};
_symbol:=REF.FIRMA().SYMBOL;

_f:=fopen('zfsr_'+_symbol+'.tra','Uw',1);
{? _f
|| {? __ZFSR.first()
   || {! |?
         _wiersz:=exec('es_w_zfsr','tran_exp');
         fwrite(_f,_wiersz);
         __ZFSR.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_zfsr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli ZFSR, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$__ZFSR.ID+_s+__ZFSR.AUTOID+_s+__ZFSR.ZF_NAME+_s+$__ZFSR.DATA+_s+$__ZFSR.DOKU_AR+_s;
_wiersz+=__ZFSR.DOKU_ND+_s+__ZFSR.ZF_UMOWA+_s+$__ZFSR.DATA_ZF+_s+$__ZFSR.DATA_ZP+_s+$__ZFSR.DOKU_DW+_s;
_wiersz+=__ZFSR.DOKU_T+_s+$__ZFSR.KWOTA+_s+$__ZFSR.KWOTA_P+_s+$__ZFSR.OKRES+_s+__ZFSR.ROZF+_s;
_wiersz+=__ZFSR.ROZP+_s+__ZFSR.KONFIN+_s+__ZFSR.KONPOD;
_wiersz


\es_atrusee_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Wykorzystanie cech dodatkowych dla środków (ATRUSE_E)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - cechy dodatkowe, zapis.','Trwa eksport danych',1);
ATRUSE_E.cntx_psh(); SROD.cntx_psh(); DOKU.cntx_psh();

_symbol:=REF.FIRMA().SYMBOL;
_ATRUSEE:=ATRUSE_E.names();

{? _ATRUSEE.first()
|| {! |?
      {? _ATRUSEE.NAME+4='xxxx' | _ATRUSEE.NAME+4='plan' | _ATRUSEE.NAME+4='____'
      || _ATRUSEE.del()
      || _ATRUSEE.next()
      ?}
   !}
?};

{? _ATRUSEE.first()
|| _f:=fopen('eat'+'_'+_symbol+'.tra','Uw',1);
   {! |?
      ATRUSE_E.use(_ATRUSEE.NAME);
      SROD.use('srod'+(_ATRUSEE.NAME+4));
      DOKU.use('dokw'+(_ATRUSEE.NAME+4));
      ATRUSE_E.prefix();
      {? ATRUSE_E.first()
      || {? _f
         || {! |?
               _wiersz:=exec('es_w_atrusee','tran_exp');
               fwrite(_f,_wiersz);
               ATRUSE_E.next()
            !}
         ?}
      ?};
      _ATRUSEE.next()
   !};
   fclose(_f);
   &_f
?};
ATRUSE_E.cntx_pop(); SROD.cntx_pop(); DOKU.cntx_pop()


\es_w_atrusee
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli ATRUSE_E, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$ATRUSE_E.SROD().ID+_s+ATRUSE_E.CECHA().SYSTEM+_s+ATRUSE_E.CECHA().TYP_CECH+_s+ATRUSE_E.CECHA().AKRONIM+_s;
_wiersz+=$ATRUSE_E.DOKU+_s+$ATRUSE_E.ATRDEFWD+_s+ATRUSE_E.WARS+_s;
_wiersz+=$ATRUSE_E.WARR+_s+ATRUSE_E.KON+_s+ATRUSE_E.WAL().KOD+_s+ATRUSE_E.WAL().SLU().NAZ+_s+$ATRUSE_E.SUM+_s;
_wiersz+=$ATRUSE_E.SUMW+_s+$ATRUSE_E.KURS+_s+ATRUSE_E.ID+_s+ATRUSE_E.TID+_s+$ATRUSE_E.DO+_s+$ATRUSE_E.TP+_s;
_wiersz+=$ATRUSE_E.DATA_R+_s+ATRUSE_E.OP+_s+ATRUSE_E.ROZDZ+_s+ATRUSE_E.SLO().KOD+_s+ATRUSE_E.SLO().SLU().NAZ;
_wiersz+=_s+$ATRUSE_E.ref();
_wiersz


\es_zmia_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Generowanie listy dokumentów zmiany miejsca do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dokumenty zmiany miejsca, przygotowanie.','Trwa eksport danych',1);
SROD.cntx_psh(); ZMIA.cntx_psh();
_symbol:=REF.FIRMA().SYMBOL;
_TZMIA:=ZMIA.names();

{? _TZMIA.first()
|| {! |?
      {? _TZMIA.NAME+4='xxxx' | _TZMIA.NAME+4='plan' | _TZMIA.NAME+4='____'
      || _TZMIA.del()
      || _TZMIA.next()
      ?}
   !}
?};

VAR_DEL.delete('__ZMIA');

__ZMIA:=tab_tmp(2,'ID','INTEGER','ID',
                  'DW','DATE','DW',
                  'DO','DATE','DO',
                  'OKRES','INTEGER','OKRES',
                  'SD','STRING[25]','SD',
                  'JORG','STRING[16]','JORG',
                  'POM_ODD','STRING[8]','POM_ODD',
                  'POM_SIE','STRING[10]','POM_SIE',
                  'POM_S','STRING[10]','POM_S',
                  'OSOBA_N','STRING[30]','OSOBA_N',
                  'OSOBA_P','STRING[30]','OSOBA_P',
                  'ROK','INTEGER','ROK',
                  'KONPOD','STRING[35]','KONPOD',
                  'KONFIN','STRING[35]','KONFIN',
                  'ODD','STRING[8]','ODD',
                  'NRI','STRING[20]','NRI',
                  'INW','INTEGER','INW',
                  'ARK','INTEGER','ARK',
                  'TYP','STRING[2]','TYP'
);

{? _TZMIA.first()
|| {! |?
      ZMIA.use(_TZMIA.NAME);
      SROD.use('srod'+(_TZMIA.NAME+4));
      ZMIA.index('ZMIK');
      ZMIA.prefix();
      {? ZMIA.first()
      || {! |?
::            {? ~__ZMIA.find_key(ZMIA.ST().ID,ZMIA.DW)
::            ||
               __ZMIA.ID:=ZMIA.ST().ID;
               __ZMIA.DW:=ZMIA.DW;
               __ZMIA.DO:=ZMIA.DO;
               __ZMIA.OKRES:=ZMIA.MO;
               __ZMIA.SD:={? ZMIA.SD<>'' || ZMIA.SD || ZMIA.DOT().S ?};
               __ZMIA.JORG:=ZMIA.JORG().SYMBOL;
               __ZMIA.POM_ODD:=ZMIA.POM().ODD().OD;
               __ZMIA.POM_SIE:=ZMIA.POM().SIED().S;
               __ZMIA.POM_S:=ZMIA.POM().S;
               __ZMIA.OSOBA_N:=ZMIA.PRAC().NAZWISKO;
               __ZMIA.OSOBA_P:=ZMIA.PRAC().PIERWSZE;
               __ZMIA.ROK:=ZMIA.DOT().AR;
               __ZMIA.KONPOD:=ZMIA.KONPOD().KOD;
               __ZMIA.KONFIN:=ZMIA.KONFIN().KOD;
               __ZMIA.ODD:=ZMIA.ODD().OD;
               __ZMIA.NRI:=ZMIA.NRI;
               __ZMIA.INW:=ZMIA.INW;
               __ZMIA.ARK:=ZMIA.ARK;
               __ZMIA.TYP:=ZMIA.DOT().TYP().TYP;
               __ZMIA.add();
::            ?};
            ZMIA.next()
         !}
      ?};
      _TZMIA.next()
   !}
?};
SROD.cntx_pop(); ZMIA.cntx_pop()


\es_zmia_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport dokumentów zmiany miejsca użytkowania (z tabeli tymczasowej __ZMIA)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dokumenty zmiany miejsca, zapis.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
_f:=fopen('zmia_'+_symbol+'.tra','Uw',1);
{? _f
|| {? __ZMIA.first()
   || {! |?
         _wiersz:=exec('es_w_zmia','tran_exp');
         fwrite(_f,_wiersz);
         __ZMIA.next()
      !}
   ?};
   fclose(_f);
   &_f
?}


\es_w_zmia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli ZMIA, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$__ZMIA.ID+_s+$__ZMIA.DW+_s+$__ZMIA.DO+_s+$__ZMIA.OKRES+_s+__ZMIA.SD+_s+__ZMIA.JORG+_s;
_wiersz+=__ZMIA.POM_ODD+_s+__ZMIA.POM_SIE+_s+__ZMIA.POM_S+_s+__ZMIA.OSOBA_N+_s+__ZMIA.OSOBA_P+_s;
_wiersz+=$__ZMIA.ROK+_s+__ZMIA.KONPOD+_s+__ZMIA.KONFIN+_s+__ZMIA.ODD+_s+__ZMIA.NRI+_s+$__ZMIA.INW+_s+$__ZMIA.ARK+_s;
_wiersz+=__ZMIA.TYP;
_wiersz


\es_zskon_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - zestawy kont kosztowych (ZSKON)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - zestawy kont kosztowych, zapis.','Trwa eksport danych',1);
ZSKON.cntx_psh();

_symbol:=REF.FIRMA().SYMBOL;
ZSKON.prefix();
{? ZSKON.first()
|| _f:=fopen('zeskont_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         KKOSZ.cntx_psh();
         KKOSZ.index('KONTO');
         KKOSZ.prefix(ZSKON.ref());
         {? KKOSZ.first() || _export:=1 || _export:=0 ?};
         KKOSZ.cntx_pop();
         {? _export
         || _wiersz:=exec('es_w_zskon','tran_exp');
            fwrite(_f,_wiersz)
         ?};
         ZSKON.next()
      !};
      fclose(_f);
      &_f
   ?}
?};
ZSKON.cntx_pop()


\es_w_zskon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli ZSKON, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=ZSKON.KOD+_s+ZSKON.RODZ+_s+ZSKON.KOM;
_wiersz


\es_sam_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - samochody służbowe
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - samochody służbowe.','Trwa eksport danych',1);
SAM.cntx_psh();

_symbol:=REF.FIRMA().SYMBOL;
SAM.prefix();
{? SAM.first()
|| _f:=fopen('samid_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         {? SAM.WLASNY='T'
         || _wiersz:=exec('es_w_samid','tran_exp');
            fwrite(_f,_wiersz)
         ?};
         SAM.next()
      !};
      fclose(_f);
      &_f
   ?}
?};
SAM.cntx_pop();
prgs_clr()


\es_w_samid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli SAM, identyfikatory środka, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$SAM.ref()+_s+$SAM.ID_SROD().ID;
_wiersz


\es_pomi_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - Pomieszczenia (POMI)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dane pomieszczeń.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
POMI.prefix();
{? POMI.first()
|| _f:=fopen('pomiesz_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         {? POMI.S<>''
         || _wiersz:=exec('es_w_pomi','tran_exp');
            fwrite(_f,_wiersz)
         ?};
         POMI.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_pomi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli POMI, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=POMI.O+_s+POMI.ODD().OD+_s+POMI.S+_s+POMI.SIED().S;
_wiersz


\es_sied_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - Siedziby (SIED) w każdej firmie
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dane siedzib','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
SIED.prefix();
{? SIED.first()
|| _f:=fopen(SIED.name()+'_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         _wiersz:=exec('es_w_sied','tran_exp');
         fwrite(_f,_wiersz);
         SIED.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_sied
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli SIED, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=SIED.S+_s+SIED.TEL+_s+SIED.ODD().OD+_s+SIED.AM+_s+SIED.AU+_s+SIED.KP+_s+SIED.N;
_wiersz


\es_zf_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - źródła finansowania (ZF)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - źródła finansowania.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
ZF.prefix();
{? ZF.first()
|| _f:=fopen('zrodfin_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         _wiersz:=exec('es_w_zf','tran_exp');
         fwrite(_f,_wiersz);
         ZF.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_zf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli ZF, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$ZF.DATA+_s+ZF.OPIS+_s+$ZF.PKD+_s+ZF.UMOWA+_s+ZF.ZF+_s+ZF.ZSKONP().KOD+_s+ZF.ZSKONF().KOD;
_wiersz


\es_dew_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - dokumenty ewidencyjne (DEW)
::  OLD: \es_dew_export/transfer.fml
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - dokumenty ewidencyjne.','Trwa eksport danych',1);
DEW.cntx_psh();

_tab:=sql('select distinct SROD.DOT, SROD.ID from @SROD where SROD.DOT is not null '
         +'and (SROD.REFERENCE like \'srod1%\' or SROD.REFERENCE like \'srod2%\') order by SROD.DOT');

_symbol:=REF.FIRMA().SYMBOL;
DEW.prefix();
{? DEW.first()
|| _f:=fopen('dok_ewid_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
:: wiele środków mogło mieć ten sam dokument przyjęcia - w takim przypadku są wielokrotnie eksportowane
:: a po imporcie będą osobnymi dokumentami przyjęcia w systemie Merit ze zmienionym symbolem
         _tab.prefix($DEW.ref());
         {? DEW.TYP().TYP='OT' & DEW.TYP().TAB='SROD' & _tab.first()
         || {! |?
               _wiersz:=exec('es_w_dew','tran_exp',$_tab.ID);
               fwrite(_f,_wiersz);
               _tab.next()
            !}
         ?};
         DEW.next()
      !};
      fclose(_f);
      &_f
   ?}
?};
DEW.cntx_pop()


\es_w_dew
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli DEW, formuła pomocnicza
::   WE: _a - parametr do doklejenia do eksportowanego wiersza z danymi
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$DEW.AR+_s+$DEW.DO+_s+$DEW.DW+_s+DEW.I+_s+DEW.INW().S+_s+DEW.KOMISJA+_s+DEW.KOMU+_s+$DEW.MOD_CZAS+_s;
_wiersz+=$DEW.MOD_DATA+_s+DEW.MOD_KTO+_s+$DEW.NR+_s+DEW.ODD().OD+_s+DEW.ODD_ACT().OD+_s+DEW.ORZ_KOM+_s;
_wiersz+=DEW.PODSTAWA+_s+DEW.PRZ_KOM+_s+DEW.RD+_s+DEW.S+_s+DEW.TAB+_s+DEW.TYP().ND+_s+DEW.ZRODLO().S+_s+DEW.TYP().TYP+_s+_a;
_wiersz


\es_atrwyre_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Wyróżniki dla cech dodatkowych dla środków (ATR_WYRE)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - wyróżniki dla cech dodatkowych, zapis.','Trwa eksport danych',1);
ATR_WYRE.cntx_psh(); ATRUSE_E.cntx_psh();

_symbol:=REF.FIRMA().SYMBOL;
_ATR_WYRE:=ATR_WYRE.names();

{? _ATR_WYRE.first()
|| {! |?
      {? _ATR_WYRE.NAME+4='xxxx' | _ATR_WYRE.NAME+4='plan' | _ATR_WYRE.NAME+4='____'
      || _ATR_WYRE.del()
      || _ATR_WYRE.next()
      ?}
   !}
?};

{? _ATR_WYRE.first()
|| _f:=fopen('ewr'+'_'+_symbol+'.tra','Uw',1);
   {! |?
      ATR_WYRE.use(_ATR_WYRE.NAME);
      ATRUSE_E.use('eat_'+(_ATR_WYRE.NAME+4));
      ATR_WYRE.prefix();
      {? ATR_WYRE.first()
      || {? _f
         || {! |?
               _wiersz:=exec('es_w_atrwyre','tran_exp');
               fwrite(_f,_wiersz);
               ATR_WYRE.next()
            !}
         ?}
      ?};
      _ATR_WYRE.next()
   !};
   fclose(_f);
   &_f
?};
ATR_WYRE.cntx_pop(); ATRUSE_E.cntx_pop()


\es_w_atrwyre
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli ATR_WYRE, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$ATR_WYRE.ATRUSE+_s+$ATR_WYRE.KW+_s+$ATR_WYRE.LP+_s+ATR_WYRE.SLO().KOD+_s+ATR_WYRE.SLO().SLU().NAZ;
_wiersz+=_s+ATR_WYRE.SLU().GDZIE+_s+ATR_WYRE.SLU().SLU().NAZ;
_wiersz


\es_typy_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - typy środków trwałych (klasyfikacja dodatkowa) (TYPY)
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
TYPY.prefix();
{? TYPY.first()
|| _f:=fopen('typy_sro_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         _wiersz:=exec('es_w_typy','tran_exp');
         fwrite(_f,_wiersz);
         TYPY.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_typy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli TYPY, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$TYPY.NR().RODZ+_s+TYPY.NAZ+_s+TYPY.TYP;
_wiersz


\es_tsr_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - przypisanie środków do typów (klasyfikacja dodatkowa) (TSR)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - klasyfikacje dodatkowe środków, przygotowanie.','Trwa eksport danych',1);
SROD.cntx_psh(); TSR.cntx_psh();

VAR_DEL.delete('__TSR');
__TSR:=tab_tmp(3,'ID','INTEGER','ID',
                 'K_NAZ','STRING[60]','K_NAZ',
                 'TYP','STRING[20]','TYP'
               );
_symbol:=REF.FIRMA().SYMBOL;
_TSR:=TSR.names();
{? _TSR.first()
|| {! |?
      {? _TSR.NAME+4='xxxx' | _TSR.NAME+4='plan' | _TSR.NAME+4='____'
      || _TSR.del()
      || _TSR.next()
      ?}
   !}
?};

{? _TSR.first()
|| {! |?
      TSR.use(_TSR.NAME);
      SROD.use('srod'+(_TSR.NAME+4));
      TSR.prefix();
      SROD.prefix();
      {? TSR.first()
      || {! |?
            {? ~__TSR.find_key(TSR.SROD().ID,TSR.TYP().NR().RODZ,TSR.TYP().TYP)
            || __TSR.blank();
               __TSR.ID:=TSR.SROD().ID;
               __TSR.K_NAZ:=TSR.TYP().NR().RODZ;
               __TSR.TYP:=TSR.TYP().TYP;
               __TSR.add()
            ?};
            TSR.next()
         !}
      ?};
      _TSR.next()
   !}
?};

_f:=fopen('tsr_'+_symbol+'.tra','Uw',1);
{? _f
|| {? __TSR.first()
   || {! |?
         _wiersz:=exec('es_w_tsr','tran_exp');
         fwrite(_f,_wiersz);
         __TSR.next()
      !}
   ?};
   fclose(_f);
   &_f
?};
SROD.cntx_pop(); TSR.cntx_pop()


\es_w_tsr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli TSR, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$__TSR.ID+_s+__TSR.K_NAZ+_s+__TSR.TYP;
_wiersz


\es_zfsrodp_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Odpisy amortyzacyjne wynikające z dotacji dla środków (ZFSR_ODP)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - rozliczenia dofinansowań, zapis.','Trwa eksport danych',1);
ZFSR_ODP.cntx_psh();
_symbol:=REF.FIRMA().SYMBOL;

VAR_DEL.delete('__sm_odp','__sm_odf');
ZFSR_ODP.index('ZFSR_ID');
ZFSR_ODP.prefix();
_f:=fopen('zfdotodp_'+_symbol+'.tra','Uw',1);
{? _f & ZFSR_ODP.first()
|| _zfsr_id:=ZFSR_ODP.ZFSR_ID;
   __sm_odp:=__sm_odf:=0;
   {! |?
      {? _zfsr_id<>ZFSR_ODP.ZFSR_ID || __sm_odp:=0; __sm_odf:=0; _zfsr_id:=ZFSR_ODP.ZFSR_ID ?};
      __sm_odp+=ZFSR_ODP.KWOTA_P;
      __sm_odf+=ZFSR_ODP.KWOTA_F;
      _wiersz:=exec('es_w_zfsrodp','tran_exp');
      fwrite(_f,_wiersz);
      ZFSR_ODP.next()
   !};
   fclose(_f);
   &_f
?};
ZFSR_ODP.cntx_pop()


\es_w_zfsrodp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli ZFSR_ODP, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_id:=0; _kw_df:=0;
ZFSR.cntx_psh();
SROD.cntx_psh();
ZFSR.use(8+ZFSR_ODP.ZFSR_ID);
ZFSR.prefix();
ZFSR.index('AUTOID');
SROD.use('srod'+(ZFSR.name()+4));
ZFSR.prefix(ZFSR_ODP.ZFSR_ID,);
{? ZFSR.first() || _id:=ZFSR.SROD().ID; _kw_df:=ZFSR.KWOTA ?};
SROD.cntx_pop();
ZFSR.cntx_pop();
_wiersz:=$_id+_s+ZFSR_ODP.ZFSR_ID+_s+$ZFSR_ODP.AM+_s+$ZFSR_ODP.AR+_s+$ZFSR_ODP.KWOTA_F+_s+$ZFSR_ODP.KWOTA_P+_s;
_wiersz+=$__sm_odp+_s+$__sm_odf+_s+$_kw_df;
_wiersz


\es_sez_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport SEZ i wartości w złączonych tabelach SROD i DOKP
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - sezony amortyzacji.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
SEZ.cntx_psh();
SEZ.index('KOD');
SEZ.prefix();
{? SEZ.first()
|| _f:=fopen('sez'+'_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         fwrite(_f,SEZ.KOD+'@'+SEZ.OPIS+'@'+$SEZ.LM+'@'+SEZ.M1+'@'+SEZ.M2+'@'+SEZ.M3+'@'+SEZ.M4
                          +'@'+SEZ.M5+'@'+SEZ.M6+'@'+SEZ.M7+'@'+SEZ.M8+'@'+SEZ.M9+'@'+SEZ.M10+'@'+SEZ.M11+'@'+SEZ.M12);
         SEZ.next()
      !};
      fclose(_f)
   ?}
?};
SEZ.cntx_pop()


\es_kkosz_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - konta kosztowe środków trwałych (KKOSZ)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - konta kosztowe.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
KKOSZ.prefix();
{? KKOSZ.first()
|| _f:=fopen(KKOSZ.name()+'_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         _wiersz:=exec('es_w_kkosz','tran_exp');
         fwrite(_f,_wiersz);
         KKOSZ.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_kkosz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli KKOSZ, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=KKOSZ.KONTO().SYM+_s+KKOSZ.ZESTAW().KOD+_s+KKOSZ.ZESTAW().RODZ+_s+$KKOSZ.PR;
_wiersz


\es_rtypy_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - klasyfikacje środków trwałych (klasyfikacja dodatkowa) (RTYPY)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - definicje klasyfikacji dodatkowych.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
RTYPY.prefix();
{? RTYPY.first()
|| _f:=fopen('rodz_typ_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         _wiersz:=exec('es_w_rtypy','tran_exp');
         fwrite(_f,_wiersz);
         RTYPY.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_rtypy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli RTYPY, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$RTYPY.NR+_s+RTYPY.RODZ;
_wiersz


\es_std_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - inwentaryzacja (STD)
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_STD:=STD.names();
{? _STD.first()
|| {! |?
      STD.use(_STD.NAME);
      STD.prefix();
      {? STD.first()
      || _f:=fopen(STD.name()+'_'+_symbol+'.tra','Uw',1);
         {? _f
         || {! |?
               _wiersz:=exec('es_w_std','tran_exp');
               fwrite(_f,_wiersz);
               STD.next()
            !};
            fclose(_f);
            &_f
         ?}
      ?};
      _STD.next()
   !}
?}


\es_w_std
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli STD, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
{? STD.NKOD<>null
|| _mNKOD:=ref_name(STD.NKOD);
   {? NKOD.name()<>_mNKOD || NKOD.use(_mNKOD); NKOD.prefix() ?}
?};
{? STD.PKOD<>null
|| _mPKOD:=ref_name(STD.PKOD);
   {? PKOD.name()<>_mPKOD || PKOD.use(_mPKOD); PKOD.prefix() ?}
?};
_wiersz:=STD.JORG().SYMBOL+_s+STD.NRI+_s+exec('at','tran_exp',STD.NST)+_s+STD.GR+_s+$STD.DZ+_s+$STD.WARP+_s+STD.ODD().OD+_s;
_wiersz+=STD.POM().SIED().S+_s+STD.POM().S+_s+STD.PRAC().NAZWISKO+_s+STD.PRAC().PIERWSZE+_s+STD.ST+_s;
_wiersz+=STD.R+_s+STD.NF+_s+$STD.NR+_s+STD.UWAGI+_s+STD.DOKU+_s+STD.ZMIA+_s+$STD.NKOD+_s+STD.NKOD().NAZWA+_s;
_wiersz+=$STD.NKOD().DATA+_s+$STD.PKOD().NKOD+_s+STD.PKOD().STR1+_s+$STD.WARF+_s+STD.ZMJ+_s+STD.ZMP+_s;
_wiersz+=STD.ZMO+_s+$STD.ID;
_wiersz


\es_inw_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - inwentaryzacja (INW)
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_INW:=INW.names();
{? _INW.first()
|| {! |?
      INW.use(_INW.NAME);
      INW.prefix();
      {? INW.first()
      || _f:=fopen(INW.name()+'_'+_symbol+'.tra','Uw',1);
         {? _f
         || {! |?
               _wiersz:=exec('es_w_inw','tran_exp');
               fwrite(_f,_wiersz);
               INW.next()
            !};
            fclose(_f);
            &_f
         ?}
      ?};
      _INW.next()
   !}
?}


\es_w_inw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli INW, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
{? INW.NKOD<>null
|| _mNKOD:=ref_name(INW.NKOD);
   {? NKOD.name()<>_mNKOD || NKOD.use(_mNKOD); NKOD.prefix() ?}
?};
{? INW.PKOD<>null
|| _mPKOD:=ref_name(INW.PKOD);
   {? PKOD.name()<>_mPKOD || PKOD.use(_mPKOD); PKOD.prefix() ?}
?};
_wiersz:=INW.JORG().SYMBOL+_s+$INW.NRA+_s+INW.NRI+_s+exec('at','tran_exp',INW.NST)+_s+INW.GR+_s+$INW.DZ+_s+$INW.WARP+_s+$INW.POZ+_s;
_wiersz+=INW.ODD().OD+_s+INW.POM().SIED().S+_s+INW.POM().S+_s+INW.PRAC().NAZWISKO+_s+INW.PRAC().PIERWSZE+_s;
_wiersz+=INW.R+_s+INW.NF+_s+INW.NKOD().NAZWA+_s+$INW.NKOD().DATA+_s+$INW.ID+_s+$INW.PKOD().NKOD+_s+INW.PKOD().STR1;
_wiersz


\es_ina_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - inwentaryzacja (INA)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - arkusze inwentaryzacjne.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
_INA:=INA.names();
{? _INA.first()
|| {! |?
      INA.use(_INA.NAME);
      INA.prefix();
      {? INA.first()
      || _f:=fopen(INA.name()+'_'+_symbol+'.tra','Uw',1);
         {? _f
         || {! |?
               _wiersz:=exec('es_w_ina','tran_exp');
               fwrite(_f,_wiersz);
               INA.next()
            !};
            fclose(_f);
            &_f
         ?}
      ?};
      _INA.next()
   !}
?}


\es_w_ina
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli INA, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$INA.NR+_s+$INA.ODD().OD+_s+INA.JORG().SYMBOL+_s+INA.POM().SIED().S+_s+INA.POM().S+_s+INA.KOR+_s+INA.STATUS;
_wiersz


\es_xi_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - inwentaryzacja (XI)
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - inwentaryzcje.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
XI.index('XINUMER');
XI.prefix('I');
{? XI.first()
|| _f:=fopen(XI.name()+'_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         _wiersz:=exec('es_w_xi','tran_exp');
         fwrite(_f,_wiersz);
         XI.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_xi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli XI, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$XI.NR+_s+$XI.DO+_s+$XI.DW+_s+XI.TYP+_s+XI.R+_s+XI.SNR+_s+XI.ODD().OD+_s+XI.Z;
_wiersz


\es_okres_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - inwentaryzacja (XI)
::----------------------------------------------------------------------------------------------------------------------
_wy:=1;
_symbol:=REF.FIRMA().SYMBOL;

{? exec('estra_zero','tran_exp')
|| _rok:=exec('estra_rok','tran_exp')
|| _rok:=0
?};

OKR_ES.index('OKRESYRM');
OKR_ES.prefix();
{? OKR_ES.find_key(VAR.AR,VAR.AM)
|| {? OKR_ES.first()
   || _f:=fopen('okresy_'+_symbol+'.tra','Uw',1);
      {? _f
      || {! |?
            {? _rok=0 | OKR_ES.AR>=_rok
            || _wiersz:=exec('es_w_okres','tran_exp');
               fwrite(_f,_wiersz)
            ?};
            OKR_ES.next()
         !};
         fclose(_f);
         &_f
      ?}
   ?}
?}


\es_w_okres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli OKR_ES, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$OKR_ES.AR+_s+$OKR_ES.AM+_s+OKR_ES.AMOR+_s+OKR_ES.KST().KST+_s+OKR_ES.ZK;
_wiersz


\es_stany_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Generowanie wartości pierwotnych i stanów środów w wersji 12.41
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - generowanie wartości pierwotnych i rejestru stanów.','Trwa eksport danych',1);
SROD.cntx_psh(); SKLD.cntx_psh(); DOKU.cntx_psh(); ADOK.cntx_psh(); ZMIA.cntx_psh(); DOKP.cntx_psh();
ZFSR.cntx_psh();

VAR_DEL.delete('__SRSR','__SRST');
_symbol:=REF.FIRMA().SYMBOL;
_SROD:=SROD.names();
:: usunięcie masek technicznych i maski planów
{? _SROD.first()
|| {! |?
      {? _SROD.NAME+4='xxxx' | _SROD.NAME+4='plan' | _SROD.NAME+4='____' | _SROD.NAME+4='krp0' | #(_SROD.NAME+4)<1990
      || _SROD.del()
      || _SROD.next()
      ?}
   !}
?};
:: tabela tymczasowa na wartości pierwotne:
__SRSR:=tab_tmp(1,'ID','INTEGER','ID',
                  'NRI','STRING[20]','NRI',
                  'NST','STRING[100]','NST',
                  'GRP','STRING[1]','GRP',
                  'R', 'STRING[1]','R',
                  'ROK','INTEGER','ROK',
                  'OKRES','INTEGER','OKRES',
                  'DZ','DATE','DZ',
                  'DE','DATE','DE',
                  'GR','STRING[15]','GR',
                  'PRZYCHOD','STRING[15]','PRZYCHOD',
                  'JORG','STRING[16]','JORG',
                  'ODD','STRING[8]','ODD',
                  'NF','STRING[50]','NF',
                  'ROZ','STRING[15]','ROZCHOD',
                  'DES','DATE','DES',
                  'U','STRING[100]','U',
                  'S','STRING[1]','S',
                  'SCH_SEZ','STRING[35]','SCH_SEZ',
                  'EURO','REAL','EURO',
                  'KURS_EUR','REAL','KURS_EUR',
                  'POJAZD','STRING[1]','POJAZD',
                  'SAMOCHOD','STRING[1]','SAMOCHOD',
                  'WARPELNA','REAL','WARPELNA',
                  'WP','REAL','WP',
                  'POM_ODD','STRING[8]','POM_ODD',
                  'POM_SIE','STRING[15]','POM_SIE',
                  'POM_S','STRING[10]','POM_S',
                  'OSOBA_N','STRING[30]','OSOBA_N',
                  'OSOBA_P','STRING[30]','OSOBA_P',
                  'DOKPRZ','STRING[30]','DOKPRZ',
                  'DOKSKR','STRING[30]','DOKSKR',
                  'FKS','STRING[1]','FKS',
                  'DOKKSIEG','STRING[48]','DOKKSIEG',
                  'MP','STRING[3]','MP',
                  'WKP','REAL','WKP',
                  'WARP','REAL','WARP',
                  'UMOP','REAL','UMOP',
                  'NETP','REAL','NETP',
                  'STAP','REAL','STAP',
                  'DPLP','DATE','DPLP',
                  'KONPOD','STRING[35]','KONPOD',
                  'MF','STRING[3]','MF',
                  'WKF','REAL','WKF',
                  'WARF','REAL','WARF',
                  'UMOF','REAL','UMOF',
                  'NETF','REAL','NETF',
                  'STAF','REAL','STAF',
                  'DPLF','DATE','DPLF',
                  'KONFIN','STRING[35]','KONFIN',
                  'JM','STRING[20]','JM',
                  'MAX','REAL','MAX',
                  'OKE','INTEGER','OKE',
                  'OSTATEK','REAL','OSTATEK',
                  'Z','STRING[1]','Z',
                  'AMOR100','STRING[1]','AMOR100',
                  'WARP100','REAL','WARP100',
                  'ZALP100','REAL','ZALP100',
                  'FREQ100','STRING[1]','FREQ100',
                  'MOD_DATA','DATE','MOD_DATA',
                  'MOD_CZAS','TIME','MOD_CZAS',
                  'MOD_KTO','STRING[20]','MOD_KTO',
                  'ULGA','REAL','ULGA',
                  'SAM_EL','STRING[1]','SAM_EL',
                  'TAB_KRST','STRING[1]','TAB_KRST'
               );

__SRST:=tab_tmp(1,'ID','INTEGER','ID',
                  'ROK','INTEGER','ROK',
                  'OKRES','INTEGER','OKRES',
                  'WARP','REAL','WARP',
                  'UMOP','REAL','UMOP',
                  'AMOP','REAL','AMOP',
                  'NETP','REAL','NETP',
                  'KONPOD','STRING[35]','KONPOD',
                  'MP','STRING[3]','MP',
                  'STAP','REAL','STAP',
                  'WKP','REAL','WKP',
                  'DPLP','DATE','DPLP',
                  'WARF','REAL','WARF',
                  'UMOF','REAL','UMOF',
                  'AMOF','REAL','AMOF',
                  'NETF','REAL','NETF',
                  'KONFIN','STRING[35]','KONFIN',
                  'MF','STRING[3]','MF',
                  'STAF','REAL','STAF',
                  'WKF','REAL','WKF',
                  'DPLF','DATE','DPLF',
                  'OSTATEK','REAL','OSTATEK',
                  'MAX','REAL','MAX',
                  'JM','STRING[15]','JM',
                  'OKE','INTEGER','OKE',
                  'S','STRING[1]','S',
                  'SCH_SEZ','STRING[20]','SCH_SEZ',
                  'POM_ODD','STRING[8]','POM_ODD',
                  'POM_SIE','STRING[15]','POM_SIE',
                  'POM_S','STRING[10]','POM_S',
                  'OSOBA_N','STRING[30]','OSOBA_N',
                  'OSOBA_P','STRING[30]','OSOBA_P',
                  'JORG','STRING[16]','JORG',
                  'ODD','STRING[8]','ODD',
                  'PZUZ','REAL','PZUZ',
                  'RZUZ','REAL','RZUZ',
                  'SZUZ','STRING[1]','SZUZ',
                  'DEKRET','STRING[1]','DEKRET',
                  'NF','STRING[50]','NF',
                  'GR','STRING[15]','GR',
                  'TAB_KRST','STRING[1]','TAB_KRST',
                  'R', 'STRING[1]','R');

_tmp_ar:=KONST.AR;
_tmp_am:=KONST.AM;
__var_ko:=exec('get_par','skid_akt',80);

{? _SROD.first()
|| {! |?
      SROD.use(_SROD.NAME);
:: ustalenie kontekstu - okres i rok
      exec('czytaj','stalesys',,KONST);
      KONST.AM:=1;
      KONST.AR:=#(_SROD.NAME+4);
      CONS.KALI:=exec('get_par','skid_akt',7);
      {? CONS.KALI='' || CONS.KALI:='N' ?};
      exec('varinit','tran_exp');
      exec('ini_kst','varinit');
:: otwarcie masek dodatkowych tabel
      AMOR.use('amor'+$VAR.AR);
      DOKU.use('dokw'+$VAR.AR);
      DOKP.use('dokp'+$VAR.AR);
      ELP.use('elp'+$VAR.AR);
      ADOK.use('adok'+$VAR.AR);
      SKLD.use('skld'+$VAR.AR);
      ZMIA.use('zmia'+$VAR.AR);
      TSR.use('typp'+$VAR.AR);
      ZFSR.use('zfsr'+$VAR.AR);

      _licznik:=0;
      SROD.prefix();
      _size:=SROD.size();
      {? SROD.first()
      || {! |?
            _t_srod:=SROD.ref();
            _licznik+=1;
            _info:='rok - '+$KONST.AR+' - '+$_licznik+'/'+$_size+' ('+SROD.NRI+')';
            progress(,'Środki trwałe - generowanie wartości pierwotnych i rejestru stanów: '+_info,'Trwa eksport danych',1);
            {? ~__SRSR.find_key(SROD.ID)
            || __SRSR.blank(1);
               __SRSR.ID:=SROD.ID;
               __SRSR.NRI:=SROD.NRI;
               __SRSR.NST:=exec('at','tran_exp',SROD.NST);
               SKLD.index('SKLD');
               SKLD.prefix(SROD.ODD,SROD.ref());
               {? SKLD.first() || __SRSR.GRP:='T' || __SRSR.GRP:='N' ?};
               __SRSR.R:=SROD.R;
               __SRSR.ROK:=VAR.ARP;
               __SRSR.OKRES:=VAR.AMP;
               __SRSR.DZ:=SROD.DZ;
               __SRSR.DE:=SROD.DE;
:: jeżeli srodek dodany pozniej niz pierwszy okres roku to modyfikacja okresu
               {? SROD.DE~1=VAR.AR & (SROD.DE~2+KONST.MP)>VAR.AM
               || __SRSR.OKRES:=(SROD.DE~2)+KONST.MP
               ?};
:: jezeli srodek dodany w roku wczesniejszym niz rok daty eksploatacji to modyfikacja rok i okresu
               {? SROD.DE~1>VAR.AR
               || __SRSR.ROK:=SROD.DE~1;
                  __SRSR.OKRES:=SROD.DE~2
               ?};
               __SRSR.GR:=SROD.GR().GR;
               __SRSR.PRZYCHOD:=SROD.RP().R;
               __SRSR.JORG:=SROD.JORG().SYMBOL;
               __SRSR.ODD:=SROD.ODD().OD;
               __SRSR.NF:=SROD.NF;
               __SRSR.ROZ:=SROD.RR().R;
               __SRSR.DES:=SROD.DSE;
               __SRSR.U:=SROD.U;
               __SRSR.S:=SROD.S;
               __SRSR.SCH_SEZ:=SROD.SCH_SEZ().KOD;
               __SRSR.EURO:=SROD.EURO;
               __SRSR.KURS_EUR:=SROD.KURS_EU;
               __SRSR.POJAZD:=SROD.POJAZD;
               __SRSR.SAMOCHOD:=SROD.SAMOCHOD;
               __SRSR.WARPELNA:=SROD.WARPELNA;
               __SRSR.WP:=SROD.WP;
               __SRSR.POM_ODD:=SROD.POM().ODD().OD;
               __SRSR.POM_SIE:=SROD.POM().SIED().S;
               __SRSR.POM_S:=SROD.POM().S;
               __SRSR.OSOBA_N:=SROD.PRAC().NAZWISKO;
               __SRSR.OSOBA_P:=SROD.PRAC().PIERWSZE;
               __SRSR.DOKPRZ:=SROD.DOT().S;
               __SRSR.DOKSKR:=SROD.DSEW().S;
               __SRSR.FKS:=SROD.FIKS;
               __SRSR.DOKKSIEG:=SROD.DOKKSIEG;
               __SRSR.MP:=SROD.MP().K;
               __SRSR.WKP:=SROD.WKP;
               __SRSR.WARP:=SROD.WAR1+SROD.WAR2;
               __SRSR.ULGA:=SROD.ULGA;
               __SRSR.UMOP:=SROD.UMOP;
               __SRSR.NETP:=SROD.NETP;
               __SRSR.STAP:=SROD.STAWKA;
               __SRSR.DPLP:=SROD.DPLP;
               __SRSR.KONPOD:=SROD.KONPOD().KOD;
               __SRSR.MF:=SROD.MF().K;
               __SRSR.WKF:=SROD.WKF;
               __SRSR.WARF:=SROD.WARF;
               __SRSR.UMOF:=SROD.UMOF;
               __SRSR.NETF:=SROD.NETF;
               __SRSR.STAF:=SROD.STAFIN;
               __SRSR.DPLF:=SROD.DPLP;
               __SRSR.KONFIN:=SROD.KONFIN().KOD;
               __SRSR.JM:=SROD.JM().KOD;
               __SRSR.MAX:=SROD.MAX;
               __SRSR.OKE:=SROD.OKE;
               __SRSR.OSTATEK:=SROD.OSTATEK;
               __SRSR.Z:=SROD.Z;
               __SRSR.MOD_KTO:=SROD.MOD_KTO;
               __SRSR.MOD_DATA:=SROD.MOD_DATA;
               __SRSR.MOD_CZAS:=SROD.MOD_CZAS;
               {? var_pres('WARP100',SROD)>0 & var_pres('ZALP100',SROD)>0 & var_pres('WARP100',DOKU)>0
               || freq100:='';
                  __SRSR.WARP100:=SROD.WARP100;
                  {? __SRSR.WARP100=0 || __SRSR.WARP100:=exec('es_njp_doku','tran_exp') ?};
                  __SRSR.ZALP100:=SROD.ZALP100;
                  {? __SRSR.WARP100<>0 | __SRSR.ZALP100<>0
                  || {? freq100<>''
                     || __SRSR.FREQ100:=freq100
                     || __SRSR.FREQ100:={? SROD.MP().T='J' || SROD.MP().CZESTO ?}
                     ?};
                     {? __SRSR.FREQ100='J' || __SRSR.FREQ100:='P' ?};
                     {? __SRSR.FREQ100='' || __SRSR.AMOR100:='N' || __SRSR.AMOR100:='T' ?}
                  ?}
               ?};
               {? var_pres('SAM_EL',SROD)>0
               || __SRSR.SAM_EL:={? SROD.SAM_EL=1 || 'T' || 'N' ?}
               || __SRSR.SAM_EL:='N'
               ?};
               __SRSR.TAB_KRST:=SROD.GR().KST().KST;
               __SRSR.add();

               _memo:=SROD.memo_txt(,1,'OPIS');
               {? _memo<>''
               || _m:=fopen('sr_m_'+_symbol+'_'+$SROD.ID+'.tra','w',1);
                  {? _m
                  || fwrite(_m,_memo);
                     fclose(_m);
                     &_m
                  ?}
               ?}
            || _put:=0;
               {? __SRSR.GRP<>'T'
               || SKLD.index('SKLD');
                  SKLD.prefix(SROD.ODD,SROD.ref());
                  {? SKLD.first() || __SRSR.GRP:='T'; _put:=1 ?}
               ?};
:: uaktualnienie pól z nazwą, numerem fabrycznym, danymi ostatniej modyfikacji i znacznikiem skreślenia
               {? exec('at','tran_exp',SROD.NST)<>__SRSR.NST || __SRSR.NST:=exec('at','tran_exp',SROD.NST); _put:=1 ?};
               {? SROD.NF<>__SRSR.NF || __SRSR.NF:=SROD.NF; _put:=1 ?};
               {? SROD.MOD_KTO<>__SRSR.MOD_KTO || __SRSR.MOD_KTO:=SROD.MOD_KTO; _put:=1 ?};
               {? SROD.MOD_DATA<>__SRSR.MOD_DATA || __SRSR.MOD_DATA:=SROD.MOD_DATA; _put:=1 ?};
               {? SROD.MOD_CZAS<>__SRSR.MOD_CZAS || __SRSR.MOD_CZAS:=SROD.MOD_CZAS; _put:=1 ?};
               {? SROD.DSEW().S<>__SRSR.DOKSKR || __SRSR.DOKSKR:=SROD.DSEW().S; _put:=1 ?};
               {? SROD.RR().R<>__SRSR.ROZ || __SRSR.ROZ:=SROD.RR().R; _put:=1 ?};
               {? SROD.DSE<>__SRSR.DES || __SRSR.DES:=SROD.DSE; _put:=1 ?};
               {? SROD.Z<>__SRSR.Z || __SRSR.Z:=SROD.Z; _put:=1 ?};
               {? _put || __SRSR.put() ?}
            ?};

            KONST.cntx_psh();
            VAR.cntx_psh();
:: uzupelnienie stanow dla każdego okresu roku
            {! _i:=1..12
            |!
               KONST.AM:=_i;
               {? __SRSR.ROK<KONST.AR | (__SRSR.ROK=KONST.AR & __SRSR.OKRES<=KONST.AM)
               || exec('varinit','tran_exp');
                  exec('ini_kst','varinit');
                  __SRST.blank();
                  __SRST.ID:=__SRSR.ID;
                  __SRST.ROK:=VAR.AR;
                  __SRST.OKRES:=VAR.AM;
                  ZUMT.index('ZUMR');
                  ZUMT.prefix(VAR.AR,SROD.ODD,SROD.NRI);
                  ZUMT.first();
:: obliczenie wartosci zmiennych
                  exec('narastaj','tran_exp');
                  __SRST.R:=SROD.R;
                  __SRST.WARP:=VAR.WARP;
                  __SRST.UMOP:=VAR.UMOP+__SRSR.ULGA;
                  AMOR.index('AMOR'); AMOR.prefix(_t_srod);
                  {? AMOR.first()
                  || __SRST.AMOP:=($('AMOR.A'+$VAR.AM))();
                     __SRST.AMOF:=($('AMOR.A'+$(VAR.AM+12)))()
                  ?};
                  __SRST.NETP:=VAR.NETP;
                  __SRST.KONPOD:=VAR.KONPOD().KOD;
                  __SRST.MP:=VAR.MPOD().K;
                  __SRST.STAP:=VAR.STAWKA;
                  __SRST.WKP:=VAR.WKP;
                  __SRST.DPLP:=VAR.DPLP;
                  __SRST.WARF:=VAR.WARF;
                  __SRST.UMOF:=VAR.UMOF;
                  __SRST.NETF:=VAR.NETF;
                  __SRST.KONFIN:=VAR.KONFIN().KOD;
                  __SRST.MF:=VAR.MFIN().K;
                  __SRST.STAF:=VAR.STAFIN;
                  __SRST.WKF:=VAR.WKF;
                  __SRST.DPLF:=VAR.DPLF;
                  __SRST.OSTATEK:=VAR.OSTATEK;
                  __SRST.MAX:=VAR.MAX;
                  __SRST.JM:=VAR.JM().KOD;
                  {? VAR.MFIN().K='NAT' & VAR.JM=null || __SRST.JM:=SROD.JM().KOD ?};
                  __SRST.OKE:=VAR.OKE;
                  __SRST.S:=SROD.S;
                  __SRST.SCH_SEZ:=SROD.SCH_SEZ().KOD;
                  __SRST.POM_ODD:=VAR.POM().ODD().OD;
                  __SRST.POM_SIE:=VAR.POM().SIED().S;
                  __SRST.POM_S:=VAR.POM().S;
                  __SRST.OSOBA_N:=VAR.PRAC().NAZWISKO;
                  __SRST.OSOBA_P:=VAR.PRAC().PIERWSZE;
                  __SRST.JORG:=SROD.JORG().SYMBOL;
                  __SRST.ODD:=SROD.ODD().OD;
                  {? SROD.MF().T='N'
                  || __SRST.PZUZ:=($('ZUMT.Z'+$(VAR.AM)))();
                     __SRST.RZUZ:=($('ZUMT.A'+$(VAR.AM)))();
                     __SRST.SZUZ:=($('ZUMT.R'+$(VAR.AM)))()
                  ?};
                  __SRST.DEKRET:='N';
:: test czy okres zamknięty lub czy istnieje dokument ksiegowy z dekretem amortyzacji POD i FIN
:: w takich przypadkach pole powinno przyjąć wartość 'T'
                 OKR_ES.cntx_psh();
                 OKR_ES.index('OKRESYRM');
                 OKR_ES.prefix(VAR.AR, VAR.AM);
                 {? OKR_ES.first() & OKR_ES.AMOR='T' || __SRST.DEKRET:='T' ?};
                 OKR_ES.cntx_pop();
                 {? __SRST.DEKRET<>'T'
                 || DOK.cntx_psh();
                    {? __OKRES.find_key(VAR.AR,VAR.AM)
                    || _okr_dok:=__OKRES.REF
                    || _okr_dok:=0
                    ?};
                    {? _okr_dok<>0
                    || OKRO_F.cntx_psh(); ROK_F.cntx_psh();
                       OKRO_F.prefix(); ROK_F.prefix();
                       {? OKRO_F.seek(_okr_dok,OKRO_F.name())
                       || DOK.use('doku'+OKRO_F.ROK().KOD+form(OKRO_F.NR, -2));
                          DOK.index('DOKZRODL'); DOK.prefix('EP','EP');
                          {? DOK.first()
                          || DOK.prefix('EF','EF');
                             {? DOK.first()
                             || __SRST.DEKRET:='T'
                             ?}
                          ?}
                       ?};
                       ROK_F.cntx_pop(); OKRO_F.cntx_pop()
                    ?};
                    DOK.cntx_pop()
                 ?};
                  __SRST.NF:=SROD.NF;
                  __SRST.GR:=SROD.GR().GR;
                  __SRST.TAB_KRST:=SROD.GR().KST().KST;
                  __SRST.add()
               ?}
            !};
            KONST.cntx_pop();
            VAR.cntx_pop();

            SROD.next()
         !}
      ?};
      _SROD.next()
   !}
?};

{? KONST.AM<>_tmp_am | KONST.AR<>_tmp_ar
|| KONST.AM:=_tmp_am;
   KONST.AR:=_tmp_ar;
   exec('varinit','tran_exp');
   exec('ini_kst','varinit')
?};

__SRST.cntx_psh();
__SRST.prefix();
__DOKU.prefix();
{? __SRST.first() & __DOKU.first()
|| {! |?
      {? __DOKU.W='T' & __DOKU.ELNRI=''
      || __SRST.prefix(__DOKU.ID);
         {? __SRST.first()
         || {! |?
               {? __SRST.ROK>__DOKU.ROK | (__SRST.ROK=__DOKU.ROK & __SRST.OKRES>__DOKU.OKRES)
               || __SRST.del()
               || __SRST.next()
               ?}
            !}
         ?}
      ?};
      __DOKU.next()
   !}
?};
__SRST.cntx_pop();

:: jeżeli sytuacja z Estrą wdrożoną przed Fiksem to uruchamiany mechanizm obcinania danych do roku startu Fiksa
{? exec('estra_zero','tran_exp')
|| _rok:=exec('estra_rok','tran_exp');
   {? _rok>0
   || echo('Aktualizacja danych pierowotnych na podstawie pierwszego roku w Fiksie...');
      __SRST.cntx_psh();
      _idx_t1:=__SRST.ndx_tmp(,,'ID',,,'ROK',,,'OKRES',,);
      _ndx:=__SRST.index('?');
      __SRST.index(_idx_t1);
      __SRSR.cntx_psh();
      {? __SRSR.first()
      || {! |?
            __SRST.prefix(__SRSR.ID,_rok-1,12);
            {? __SRST.first()
            || __SRSR.UMOP:=__SRST.UMOP;
               __SRSR.NETP:=__SRST.NETP;
               __SRSR.UMOF:=__SRST.UMOF;
               __SRSR.NETF:=__SRST.NETF;
               __SRSR.ROK:=_rok;
               __SRSR.OKRES:=1;
               __SRSR.put()
            ?};
            __SRSR.next()
         !}
      ?};
      __SRST.ndx_drop(_idx_t1);

      echo('Czyszczenie danych środków pochodzących sprzed wdrożenia Fiksa...');
      __SRST.index(_ndx);
      __SRST.prefix();
      {? __SRST.first()
      || {! |?
           {? __SRST.ROK<_rok
           || __SRST.del()
           || __SRST.next()
           ?}
         !}
      ?};
      __SRSR.cntx_pop();
      __SRST.cntx_pop();
      echo('')
   ?}
?};

:: możliwość wizualnej kontroli tabeli środków i rejestru stanów przed eksportem
:: odbezpieczyć w razie wątpliwości co do eksportowanych danych
{? var_pres('__STANY')>0 & __STANY=1 & __SRSR.first() & FUN.ask('Wyświetlić środki i wygenerowany rejestr stanów środków?')
|| _run:=user(11);
   _czy_m:=((1+_run)='O' | #(2+_run)>=17 | (1+_run)='R');
   {? _czy_m
   || _win:=__SRSR.mk_sel(,,0,'__srsr',5,5,24,,'U')
   || _win:=__SRSR.mk_sel(,,0,'__srsr',5,5,24)
   ?};
   __SRSR.win_fld(_win,,'ID',,,5,,,'ID',,'Identyfikator wewnętrzny środka');
   __SRSR.win_fld(_win,,'NRI',,,18,,,'NRI',,'Nr inwentarzowy');
   __SRSR.win_fld(_win,,'NST',,,25,,,'OKRES',,'Nazwa');
   __SRSR.win_fld(_win,,'GR',,,10,,,'GR',,'Grupa');
   __SRSR.win_fld(_win,,'DZ',,,10,,,'DZ',,'Data zakupu');
   __SRSR.win_fld(_win,,'DE',,,10,,,'DE',,'Data eksploatacji');
   __SRSR.win_sel(_win);

   {? _czy_m
   || _winst:=__SRST.mk_sel(,,0,'__srst',5,5,24,,'U')
   || _winst:=__SRST.mk_sel(,,0,'__srst',5,5,24)
   ?};
   __SRST.win_fld(_winst,,'ID',,,5,,,'ID',,'Identyfikator wewnętrzny środka');
   __SRST.win_fld(_winst,,'ROK',,,4,,,'ROK',,'Rok');
   __SRST.win_fld(_winst,,'OKRES',,,5,,,'OKRES',,'Okres');
   __SRST.win_fld(_winst,,'MP',,,5,,,'MP',,'Metoda podatkowa');
   __SRST.win_fld(_winst,,'STAP',,,10,2,,'STAP',,'Stawka podatkowa');
   __SRST.win_fld(_winst,,'WARP',,,10,2,,'WARP',,'Wartość podatkowa');
   __SRST.win_fld(_winst,,'UMOP',,,10,2,,'UMOP',,'Umorzenie podatkowe');
   __SRST.win_fld(_winst,,'AMOP',,,10,2,,'AMOP',,'Amortyzacja podatkowe');
   __SRST.win_fld(_winst,,'NETP',,,10,2,,'NETP',,'Netto podatkowe');
   __SRST.win_fld(_winst,,'MF',,,5,,,'MF',,'Metoda finansowa');
   __SRST.win_fld(_winst,,'STAF',,,10,2,,'STAF',,'Stawka finansowa');
   __SRST.win_fld(_winst,,'WARF',,,10,2,,'WARF',,'Wartość finansowa');
   __SRST.win_fld(_winst,,'UMOF',,,10,2,,'UMOF',,'Umorzenie finansowa');
   __SRST.win_fld(_winst,,'AMOF',,,10,2,,'AMOF',,'Amortyzacja finansowa');
   __SRST.win_fld(_winst,,'NETF',,,10,2,,'NETF',,'Netto finansowa');
   __SRST.win_sel(_winst);

   __SRSR.win_act(_win,,'Formuła','Stany',,,,"__SRST.prefix(__SRSR.ID);
                                              __SRST.hdr_sel();
                                              __SRST.hdr_sel(__SRSR.NRI+' - '+__SRSR.NST);
                                              __SRST.select()
                                             ",1);
   __SRSR.select();
   __SRST.prefix()
?};

VAR_DEL.delete('freq100');
SROD.cntx_pop(); SKLD.cntx_pop(); DOKU.cntx_pop(); ADOK.cntx_pop(); ZMIA.cntx_pop(); DOKP.cntx_pop();
ZFSR.cntx_pop()


\es_njp_doku
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [17.14_01]
:: OPIS: Formula zwraca wartosc jednorazowego umorzenia na podstawie wystawionego dokumentu
::   WY: wartosc jednorazowego umorzenia
::----------------------------------------------------------------------------------------------------------------------
_wy:=0;
DOKU.cntx_psh(); ADOK.cntx_psh();
ADOK.index('ADOKM');
ADOK.prefix(SROD.ref(),VAR.AR);
_jest:=0;
{? ADOK.first() || {!|? {? ADOK.MP().T='J' || freq100:=ADOK.MP().CZESTO ;_jest:=1 ?}; ~_jest & ADOK.next() !} ?};
{? _jest
|| DOKU.index('DOKW'); DOKU.prefix(SROD.ref(),VAR.AR);
   {? DOKU.first() || {!|? {? DOKU.WARP100 || _wy:=DOKU.WARP100 ?}; _wy=0 & DOKU.next() !} ?}
?};
ADOK.cntx_pop(); DOKU.cntx_pop();
_wy


\es_stany_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport rejestru stanow srodkow z tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - rejestr stanów, zapis.','Trwa eksport danych',1);
{? ~var_pres('__SRST') || return() ?};
_symbol:=REF.FIRMA().SYMBOL;

{? __SRST.first()
|| _f:=fopen('srst_'+_symbol+'.tra','Uw',1);
   {? _f
   || {! |?
         _wiersz:=exec('es_w_srst','tran_exp');
         fwrite(_f,_wiersz);
         __SRST.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_srst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport rejestru stanow srodkow, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$__SRST.ID+_s+$__SRST.ROK+_s+$__SRST.OKRES+_s+$__SRST.WARP+_s+$__SRST.UMOP+_s;
_wiersz+=$__SRST.AMOP+_s+$__SRST.NETP+_s+__SRST.KONPOD+_s+__SRST.MP+_s+$__SRST.STAP+_s;
_wiersz+=$__SRST.WKP+_s+$__SRST.DPLP+_s+$__SRST.WARF+_s+$__SRST.UMOF+_s+$__SRST.AMOF+_s;
_wiersz+=$__SRST.NETF+_s+__SRST.KONFIN+_s+__SRST.MF+_s+$__SRST.STAF+_s+$__SRST.WKF+_s;
_wiersz+=$__SRST.DPLF+_s+$__SRST.OSTATEK+_s+$__SRST.MAX+_s+__SRST.JM+_s+$__SRST.OKE+_s;
_wiersz+=__SRST.S+_s+__SRST.SCH_SEZ+_s+__SRST.POM_ODD+_s+__SRST.POM_SIE+_s+__SRST.POM_S+_s;
_wiersz+=__SRST.OSOBA_N+_s+__SRST.OSOBA_P+_s+__SRST.JORG+_s+__SRST.ODD+_s+$__SRST.PZUZ+_s;
_wiersz+=$__SRST.RZUZ+_s+__SRST.SZUZ+_s+__SRST.DEKRET+_s+__SRST.NF+_s+__SRST.GR+_s+__SRST.TAB_KRST+_s+__SRST.R;
_wiersz


\es_typd_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.41]
:: OPIS: Eksport typów dokumentów wartościowych
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - typy dokumentów wartościowych.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
TPD.cntx_psh();
TPD.index('TYPDOK');
TPD.prefix();
_f:=fopen('typdok_'+_symbol+'.tra','Uw',1);
{? _f & TPD.first()
|| {! |?
      _wiersz:=exec('es_w_typd','tran_exp');
      fwrite(_f,_wiersz);
      TPD.next()
   !};
   fclose(_f);
   &_f
?};
TPD.cntx_pop()


\es_w_typd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.41]
:: OPIS: Procedura pomocniczna do eksportu typów dokumentów
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
{? TPD.WAR1='T' | TPD.WAR2='T' || _WARP:='T' || _WARP:='N' ?};
_wiersz:=TPD.T+_s+TPD.N+_s+_WARP+_s+TPD.WARF+_s+TPD.UMOP+_s+TPD.UMOF+_s;
_wiersz+=TPD.RR().R+_s+TPD.RP().R+_s+TPD.W+_s+TPD.P;
_wiersz


\es_tpdp_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.41]
:: OPIS: Eksport typów dokumentów pozostałych
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - typy dokumentów pozostałych.','Trwa eksport danych',1);
_symbol:=REF.FIRMA().SYMBOL;
TPDP.cntx_psh();
TPDP.index('TYPDOKP');
TPDP.prefix();
_f:=fopen('typdokp_'+_symbol+'.tra','Uw',1);
{? _f & TPDP.first()
|| {! |?
      _wiersz:=exec('es_w_tpdp','tran_exp');
      fwrite(_f,_wiersz);
      TPDP.next()
   !};
   fclose(_f);
   &_f
?};
TPDP.cntx_pop()


\es_w_tpdp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Procedura pomocnicza do eksportu typów dokumentów pozostałych
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=TPDP.T+_s+TPDP.N+_s+TPDP.GR+_s+TPDP.WKP+_s+TPDP.WKF+_s+TPDP.SEZONOWY;
_wiersz


\zal_pobh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Odpisuje informacje o użytkownikach dla historii pobrań załączników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
_kod:={? REF.WFIRM || '_'+REF.FIRMA().SYMBOL || '' ?};
FIRMA.cntx_pop();

_BUF:=sql(
   'select ZAL_POBH.REFERENCE as ZAL_POBH, I_USERS.LOGIN as WEBLOGIN '+
   'from ZAL_POBH join I_USERS using (ZAL_POBH.I_USERS,I_USERS.REFERENCE)'
);

:_BUF.export(ZAL_POBH.name()+'.tra',0,%1+';','UTF-8,pth,header',,
_BUF.export(ZAL_POBH.name()+_kod+'.tra',0,%1+';','UTF-8,pth,header',,
   'ZAL_POBH',,1,,
   'WEBLOGIN',,2,
)


\es_ste_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport - inwentaryzacja elementów (STE)
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_STE:=STE.names();
{? _STE.first()
|| {! |?
      STE.use(_STE.NAME);
      STD.use((3+STD.name())+(_STE.NAME+5));
      STD.prefix();
      STE.prefix();
      {? STE.first()
      || _f:=fopen(STE.name()+'_'+_symbol+'.tra','Uw',1);
         {? _f
         || {! |?
               _wiersz:=exec('es_w_ste','tran_exp');
               fwrite(_f,_wiersz);
               STE.next()
            !};
            fclose(_f);
            &_f
         ?}
      ?};
      _STE.next()
   !}
?}


\es_w_ste
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Eksport tabeli STE, formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=$STE.ST().ID+_s+STE.NRI+_s+STE.NST+_s+STE.NF+_s+$STE.DZ+_s+$STE.WARP+_s+$STE.WARF+_s;
_wiersz+=STE.NRST+_s+STE.STATUS+_s+$STE.NKOD+_s+$STE.PKOD;
_wiersz


\test_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.14]
:: OPIS: Test czy trzeba naprawić SROD.ID i ID_SROD
::----------------------------------------------------------------------------------------------------------------------
SROD.cntx_psh(); ID_SROD.cntx_psh();
_names:=SROD.names();
{? ~_names.first() || SROD.cntx_pop; ID_SROD.cntx_pop; return(0) ?};

{! |?
   {? _names.NAME()+4='xxxx' | _names.NAME()+4='____'
   || _names.del()
   || _names.next()
   ?}
!};

_bledne_id:=0;
_brak_id:=0;
_wiele_id:=0;
_nieunikalny:=0;

:: test brakow w ID_SROD
ID_SROD.index('ID_SROD');
ID_SROD.prefix();
{? _names.first()
|| {! |?
      SROD.use(_names.NAME);
      SROD.index('SRNI');
      SROD.prefix();
      {? SROD.first()
      || {! |?
            {? ~ID_SROD.find_key(SROD.ID)
            || _brak_id:=1
            ||
:: jezeli dane popsute na poziomie zgodności SROD i ID_SROD
               {? ID_SROD.NRI<>SROD.NRI
               || _bledne_id:=1
               ?}
            ?};
            (_bledne_id=0 | _brak_id=0) & SROD.next()
         !}
      ?};
      (_bledne_id=0 | _brak_id=0) & _names.next()
   !}
?};

ID_SROD.index('ID_SROD');
ID_SROD.prefix();
{? ID_SROD.first()
|| {! |?
      echo('ID: '+$ID_SROD.ID+', MASKA: '+_names.NAME);
      _names.first();
      {! |?
         SROD.use(_names.NAME());
         SROD.index('SRID');
         SROD.prefix(ID_SROD.ID);
         {? SROD.first() & SROD.size()>1
         || _wiele_id:=1
         ?};
         _wiele_id=0 & _names.next()
      !};
      _wiele_id=0 & ID_SROD.next()
   !}
?};
SROD.cntx_pop(); ID_SROD.cntx_pop();

::Sprawdzenie unikalności ID środków trwałych
_srod:=sql('select ODD, NRI, ID from @SROD');

{? _srod.size()>0
|| _i_srod:=_srod.ndx_tmp('',1,'ODD',,0,'ODD',,0,'NRI',,0, 'NRI',,0, 'ID',,0);
   _srod.index(_i_srod);
   _srod.prefix();
   {? _srod.first()
   || {!
      |? _srod.prefix(_srod.ODD,_srod.ODD,_srod.NRI,_srod.NRI,_srod.ID);
         _t_size:=_srod.size();
         _srod.prefix(_srod.ODD,_srod.ODD,_srod.NRI,_srod.NRI,);
         {? _t_size<>_srod.size()
         || _nieunikalny:=1
         ?};
         {! |? _srod.del() !};
         _srod.prefix();
         _nieunikalny=0 & _srod.first()
      !}
   ?};
   _srod.ndx_drop(_i_srod)
?};

_bledne_id | _brak_id | _wiele_id | _nieunikalny


\id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.14]
:: OPIS: Naprawa SROD.ID i ID_SROD
::----------------------------------------------------------------------------------------------------------------------
{? exec('test_id','tran_exp')
|| {? ~FUN.ask('Wykryto niespójne dane w tabeli SROD i ID_SROD. Uruchomić procedurę naprawczą?')
   || return(0)
   ?}
|| return(1)
?};

SROD.cntx_psh(); ID_SROD.cntx_psh();
_names:=SROD.names();
{? ~_names.first() || SROD.cntx_pop(); ID_SROD.cntx_pop(); return(0) ?};

{! |?
   {? _names.NAME()+4='xxxx' | _names.NAME()+4='____'
   || _names.del()
   || _names.next()
   ?}
!};

:: uzupelnienie brakow w ID_SROD
echo('Uzupełnianie braków w tabeli ID_SROD...');
ID_SROD.index('ID_SROD');
ID_SROD.prefix();
{? _names.first()
|| {! |?
      SROD.use(_names.NAME);
      SROD.index('SRNI');
      SROD.prefix();
      {? SROD.first()
      || {! |?
            {? SROD.ID=0
            || _odd:=SROD.ODD().OD;
               _nri:=SROD.NRI;
               _find_id:=0;
::             test czy w kolejnych latach ID jest <> 0
               _rok:=#(SROD.name()+4);
               {? _rok<>0
               || _dalej:=1;
                  _rok+=1;
                  {! |?
                     _maska:='srod'+$(_rok);
                     _names.cntx_psh();
                     SROD.cntx_psh();
                     {? _names.find_key(_maska,)
                     || SROD.use(_maska);
                        SROD.index('SRNI');
                        SROD.prefix();
                        {? SROD.find_key(_odd,_odd,_nri,_nri) & SROD.ID<>0
                        || _find_id:=SROD.ID
                        ?}
                     || _dalej:=0
                     ?};
                     SROD.cntx_pop();
                     _names.cntx_pop();
                     _rok+=1;
                     _find_id=0 & _dalej
                  !};
                  {? _find_id
                  || SROD.ID:=_find_id;
                     SROD.put()
                  ?}
               ?};
::             jeżeli nie znaleziono to test czy w porzednich latach ID jest <> 0
               {? _find_id=0
               || _rok:=#(SROD.name()+4);
                  {? _rok<>0
                  || _dalej:=1;
                     _rok-=1;
                     {! |?
                        _maska:='srod'+$(_rok);
                        _names.cntx_psh();
                        SROD.cntx_psh();
                        {? _names.find_key(_maska,)
                        || SROD.use(_maska);
                           SROD.index('SRNI');
                           SROD.prefix();
                           {? SROD.find_key(_odd,_odd,_nri,_nri) & SROD.ID<>0
                           || _find_id:=SROD.ID
                           ?}
                        || _dalej:=0
                        ?};
                        SROD.cntx_pop();
                        _names.cntx_pop();
                        _rok+=1;
                        _find_id=0 & _dalej
                     !};
                     {? _find_id
                     || SROD.ID:=_find_id;
                        SROD.put()
                     ?}
                  ?}
               ?};
::             jeżeli nadal nie znaleziono to dodaje nowe ID
               {? _find_id=0
               || ID_SROD.cntx_psh();
                  ID_SROD.index('ID_SROD');
                  ID_SROD.prefix();
                  {? ID_SROD.last()
                  || _new_id:=ID_SROD.ID+1
                  || _new_id:=1
                  ?};
                  ID_SROD.cntx_pop();
                  ID_SROD.blank(1);
                  ID_SROD.ID:=_new_id;
                  ID_SROD.Z:=SROD.Z;
                  ID_SROD.POJAZD:=SROD.POJAZD;
                  ID_SROD.DE:=SROD.DE;
                  ID_SROD.DSE:=SROD.DSE;
                  ID_SROD.NST:=SROD.NST;
                  ID_SROD.NRI:=SROD.NRI;
                  ID_SROD.UD_SKL:=SROD.JORG;
                  ID_SROD.GR:=SROD.GR;
                  ID_SROD.PRAC:=SROD.PRAC;
                  ID_SROD.ODD:=SROD.ODD;
                  ID_SROD.add();
                  _nri:=SROD.NRI;
                  _odd:=SROD.ODD().OD;
                  SROD.cntx_psh(); _names.cntx_psh();
                  {? _names.first()
                  || {! |?
                        SROD.use(_names.NAME);
                        SROD.index('SRNI');
                        SROD.prefix();
                        {? SROD.find_key(_odd,_odd,_nri,_nri) & SROD.ID<>_new_id
                        || SROD.ID:=_new_id;
                           SROD.put()
                        ?};
                        _names.next()
                     !}
                  ?};
                  SROD.cntx_pop(); _names.cntx_pop()
               ?}
            |? ~ID_SROD.find_key(SROD.ID)
            || ID_SROD.cntx_psh();
               ID_SROD.blank(1);
               ID_SROD.ID:=SROD.ID;
               ID_SROD.Z:=SROD.Z;
               ID_SROD.POJAZD:=SROD.POJAZD;
               ID_SROD.DE:=SROD.DE;
               ID_SROD.DSE:=SROD.DSE;
               ID_SROD.NST:=SROD.NST;
               ID_SROD.NRI:=SROD.NRI;
               ID_SROD.UD_SKL:=SROD.JORG;
               ID_SROD.GR:=SROD.GR;
               ID_SROD.PRAC:=SROD.PRAC;
               ID_SROD.ODD:=SROD.ODD;
               ID_SROD.add();
               ID_SROD.cntx_pop()
            ||
:: jezeli dane popsute na poziomie zgodności SROD i ID_SROD
               {? ID_SROD.NRI<>SROD.NRI & ID_SROD.NRI=''
               || ID_SROD.NRI:=SROD.NRI;
                  ID_SROD.NST:=SROD.NST;
                  ID_SROD.ODD:=SROD.ODD;
                  ID_SROD.DE:=SROD.DE;
                  ID_SROD.DSE:=SROD.DSE;
                  ID_SROD.POJAZD:=SROD.POJAZD;
                  ID_SROD.UD_SKL:=SROD.JORG;
                  ID_SROD.GR:=SROD.GR;
                  ID_SROD.PRAC:=SROD.PRAC;
                  ID_SROD.put()
               |? ID_SROD.NRI<>SROD.NRI & ID_SROD.NRI<>''
               || _nri:=SROD.NRI;
                  _odd:=SROD.ODD().OD;
                  _dalej:=1;
                  _new_id:=0;

                  ID_SROD.cntx_psh();
                  SROD.cntx_psh(); _names.cntx_psh();
                  {? _names.first()
                  || {!
                     |? SROD.use(_names.NAME);
                        SROD.index('SRNI');
                        SROD.prefix();
                        {? SROD.find_key(_odd,_odd,_nri,_nri) & ID_SROD.find_key(SROD.ID) & ID_SROD.NRI=_nri
                        || _new_id:=ID_SROD.ID;
                           _dalej:=0
                        ?};
                        _dalej & _names.next()
                     !}
                  ?};
                  SROD.cntx_pop(); _names.cntx_pop();
                  ID_SROD.cntx_pop();

                  {? _dalej
                  || ID_SROD.cntx_psh();
                     exec('add_id','srodki');
                     ID_SROD.Z:=SROD.Z;
                     ID_SROD.POJAZD:=SROD.POJAZD;
                     ID_SROD.DE:=SROD.DE;
                     ID_SROD.DSE:=SROD.DSE;
                     ID_SROD.NST:=SROD.NST;
                     ID_SROD.NRI:=SROD.NRI;
                     ID_SROD.UD_SKL:=SROD.JORG;
                     ID_SROD.GR:=SROD.GR;
                     ID_SROD.PRAC:=SROD.PRAC;
                     ID_SROD.ODD:=SROD.ODD;
                     ID_SROD.put();
                     _new_id:=ID_SROD.ID;
                     ID_SROD.cntx_pop()
                  ?};

                  SROD.cntx_psh(); _names.cntx_psh();
                  {? _new_id<>0 & _names.first()
                  || {! |?
                        SROD.use(_names.NAME);
                        SROD.index('SRNI');
                        SROD.prefix();
                        {? SROD.find_key(_odd,_odd,_nri,_nri) & _new_id<>SROD.ID
                        || SROD.ID:=_new_id;
                           SROD.put()
                        ?};
                        _names.next()
                     !}
                  ?};
                  SROD.cntx_pop(); _names.cntx_pop()
               ?}
            ?};
            SROD.next()
         !}
      ?};
      _names.next()
   !}
?};

:: rozwiązanie problemu w przypadku wielu ID środka w tabeli SROD i pasujących w ID_SROD
_idx:=ID_SROD.ndx_tmp(,, 'ODD','OD',0, 'NRI',,0, 'Z',,0);

ID_SROD.cntx_psh();
ID_SROD.index(_idx);
_srod:=sql('select NRI, ID, ODD from @SROD');
{? _srod.size()>0
|| _i_srod:=_srod.ndx_tmp('',1,'ODD',,0, 'ODD',,0,'NRI',,0, 'NRI',,0, 'ID',,0);
   _srod.index(_i_srod);
   _srod.prefix();
   {? _srod.first()
   || {!
      |? ODD.cntx_psh();
         ODD.prefix(); ODD.seek(BIT.sqlint(_srod.ODD));
         _odd:=ODD.OD;
         ODD.cntx_pop();
         _new_id:=0;
         _srod.prefix(_srod.ODD,_srod.ODD,_srod.NRI,_srod.NRI,_srod.ID);
         _t_size:=_srod.size();
         _srod.prefix(_srod.ODD,_srod.ODD,_srod.NRI,_srod.NRI,);
         {? _t_size<>_srod.size()
         || {? _srod.first()
            || ID_SROD.prefix(_odd,_srod.NRI,'T');
               {? ID_SROD.first() || _new_id:=ID_SROD.ID || _new_id:=_srod.ID ?};
               SROD.cntx_psh(); _names.cntx_psh();
               {? _new_id<>0 & _names.first()
               || {!
                  |? SROD.use(_names.NAME);
                     SROD.index('SRNI');
                     SROD.prefix();
                     {? SROD.find_key(_odd,_odd,_srod.NRI,_srod.NRI) & _new_id<>SROD.ID
                     || SROD.ID:=_new_id;
                        SROD.put()
                     ?};
                     _names.next()
                  !}
               ?};
               SROD.cntx_pop(); _names.cntx_pop()
            ?}
         ?};
         {! |? _srod.del() !};
         _srod.prefix();
         _srod.first()
      !}
   ?};
   _srod.ndx_drop(_i_srod)
?};
ID_SROD.cntx_pop();

:: rozwiazanie problemu podwajania SROD.ID

ID_SROD.index('ID_SROD');
ID_SROD.prefix();
{? ID_SROD.first()
|| {! |?
      echo('ID: '+$ID_SROD.ID+', MASKA: '+_names.NAME);
      _names.first();
      {! |?
         SROD.use(_names.NAME());
         SROD.index('SRID');
         SROD.prefix(ID_SROD.ID);
         {? SROD.first() & SROD.size()>1
         || {! |?
               echo('ID: '+$ID_SROD.ID+', NRI: '+SROD.NRI+', MASKA: '+_names.NAME);
               {? ~(SROD.NRI=ID_SROD.NRI)
               || ID_SROD.cntx_psh();
                  ID_SROD.index(_idx);
                  ID_SROD.prefix(SROD.ODD().OD,SROD.NRI,);
                  {? ID_SROD.first() & ID_SROD.NRI=SROD.NRI
                  || SROD.cntx_psh();
                     SROD.prefix();
                     SROD.ID:=ID_SROD.ID;
                     SROD.put();
                     SROD.cntx_pop()
                  || ID_SROD.prefix();
                     exec('add_id','srodki');
                     ID_SROD.Z:=SROD.Z;
                     ID_SROD.POJAZD:=SROD.POJAZD;
                     ID_SROD.DE:=SROD.DE;
                     ID_SROD.DSE:=SROD.DSE;
                     ID_SROD.NST:=SROD.NST;
                     ID_SROD.NRI:=SROD.NRI;
                     ID_SROD.UD_SKL:=SROD.JORG;
                     ID_SROD.GR:=SROD.GR;
                     ID_SROD.PRAC:=SROD.PRAC;
                     ID_SROD.ODD:=SROD.ODD;
                     ID_SROD.put();
                     SROD.cntx_psh();
                     SROD.prefix();
                     SROD.ID:=ID_SROD.ID;
                     SROD.put();
                     SROD.cntx_pop()
                  ?};
                  ID_SROD.cntx_pop()
               ?};
               SROD.next()
            !}
         ?};
         _names.next()
      !};
      ID_SROD.next()
   !}
?};
ID_SROD.ndx_drop(_idx);
SROD.cntx_pop(); ID_SROD.cntx_pop()


\es_pre_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Formuła kontrolna dla środków trwałych przed rozpoczęciem eksportu
::   WY: 1/0 - kontynuować czy przerwać eksport
::----------------------------------------------------------------------------------------------------------------------
_return:=1;

:: kontrola systemu, w którym uruchomiono eksport danych
{? _return
|| {? FL.SYSTEM<>'ESTRA'
   || _return:=FUN.ask('Eksport danych uruchomiono w systemie innym niż Xpertis Środki trwałe\n'
                      +'co nie jest zalecane. W razie potrzeby można uruchomić procedurę eksportu danych\n'
                      +'samych Środków trwałych ponownie we właściwym systemie, wywołując formułę:\n\n'
                      +' exec(\'es_export\',\'tran_exp\').\n\n'
                      +'Kontynuować mimo tego problemu?' )
   ?}
?};

:: kontrola zamknięcia okresów Estry
{? _return
|| _open:=0;
   OKR_ES.index('OKRESYRM');
   OKR_ES.prefix();
   {? OKR_ES.find_key(VAR.AR,VAR.AM) & OKR_ES.prev()
   || {! |?
         {? OKR_ES.AMOR='N' || _open+=1 ?};
         OKR_ES.prev()
      !}
   ?};
   {? _open>0
   || _return:=FUN.ask('Wśród okresów poprzedzających bieżący znaleziono otwarte okresy w systemie\n'
                      +'Xpertis Środki trwałe. Zalecane jest zamknięcie wszystkich okresów poprzedzających\n'
                      +'okres w którym wykonywany jest eksport danych. Kontynuować mimo tego problemu?')
   ?}
?};

:: kontrola środków wykorzystujących metody amortyzacji nieobsługiwane w Merit
{? _return
|| _sql:='SELECT NRI FROM SROD JOIN MA USING (SROD.MF, MA.REFERENCE) WHERE MA.T=\'P\' OR MA.T=\'S\'';
   _tmp:=sql(_sql);
   {? _tmp.first()
   || _return:=FUN.ask('Środki trwałe w analizowanym systemie Xpertis korzystają z metod amortyzacji finansowej\n'
                      +'(Progresywna lub SOYD), które nie są obsługiwane w systemie Merit, takie środki nie zostaną\n'
                      +'poprawnie przetransferowane. Kontynuować mimo tego problemu?')
   ?}
?};

:: kontrola czy Estra nie została wdrożona z przesunięciem okresów w stosunku do roku kalendarzowego
{? _return
|| {? exec('jest','stalesys',KONST) & KONST.MP<>0
   || _return:=FUN.ask('W analizowanym systemie Xpertis okresy środków trwałych są przesunięte w stosunku\n'
                      +'do okresów kalendarzowych. Taka sytuacja nie jest obsługiwana przez mechanizm transferu.\n'
                      +'Kontynuować mimo tego problemu?')
   ?}
?};

:: kontrola czy w danych są elementy nie przenoszone przez transfer, które zostaną utracone
:: np. środki w budowie, załączniki
{? _return
|| _msg:='';
   INW_SROD.prefix();
   {? INW_SROD.first()
   || _msg+='W systemie znajdują się dane środków trwałych w budowie. Informacje\n'
           +'o środkach w budowie nie są przenoszone do systemu Merit.\n\n'
   ?};
   FOTO.prefix();
   {? FOTO.first()
   || _msg+='W systemie znajdują się załączniki podpięte pod środki trwałe np. fotografie.\n'
           +'Załączniki nie są przenoszone do systemu Merit.\n'
   ?};
   {? +_msg
   || _msg+='\nKontynuować mimo tego problemu?';
      _return:=FUN.ask(_msg)
   ?}
?};

:: kontrola czy najwcześniejsze okresy Estry nie są wcześniejsze niż pierwsze okresy obrachunkowe Fiksa
{? _return
|| OKR_ES.index('OKRESYRM');
   OKR_ES.prefix();
   {? OKR_ES.first()
   || {? exec('jest','stalesys',KONST)
      || _rok:=OKR_ES.AR;
         _mies:=OKR_ES.AM+KONST.MP;
         {? _mies<=0
         || _rok-=1;
            _mies+=12
         |? _mies>12
         || _rok+=1;
            _mies-=12
         ?};
         {? exec('okresrok','tech_es',date(_rok,_mies,1),1)=null
         || _return:=FUN.ask('W analizowanym systemie Xpertis moduł Środki trwałe został wdrożony wcześniej niż moduł\n'
                            +'Finanse i księgowość. Taka sytuacja nie jest obsługiwana przez mechanizm transferu.\n'
                            +'Kontynuować mimo tego problemu?')
         ?}
      ?}
   ?}
?};

_return


\_sys2dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy obiekt ułatwiający translację nazwy systemu Xpertis na dziedzinę Merit i vice versa.
::   WE:
::   WY: referencja tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(
:  tabela i klucze
   'TAB','key',
:  metody
   'find_sys',
   'sys4dom',
   'dom4sys',
   'next'
);

_obj.TAB:=_TAB:=tab_tmp(,
   'SYS','STRING[8]','System',
   'DOM','STRING[3]','Dziedzina'
);
_obj.key:=obj_new('SYS','DOM');
_obj.key.SYS:=_obj.TAB.index('?');
_obj.key.DOM:=_obj.TAB.ndx_tmp(,,'DOM',,,'SYS',,);

: systemy dla dziedziny
_obj.find_sys:="
   .TAB.prefix();
   .TAB.find_tab(,'SYS',,'=',_a)
";
: systemy dla dziedziny
_obj.sys4dom:="
   .TAB.index(.key.DOM);
   .TAB.prefix(_a,);
   .TAB.first()
";
: dziedziny dla systemu
_obj.dom4sys:="
   .TAB.index(.key.SYS);
   .TAB.prefix(_a,);
   .TAB.first()
";
: kolejny krok iteracji
_obj.next:=".TAB.next()";

_add:="_a.SYS:=_b; _a.DOM:=_c; _a.add()";

_add(_TAB,'CONTROL', 'CTR');
_add(_TAB,'EMAG',    'LMG');
_add(_TAB,'EMAG',    'LSP');
_add(_TAB,'EMAG',    'LZK');
_add(_TAB,'ESTRA',   'FST');
_add(_TAB,'FIKS',    'FKS');
_add(_TAB,'HOMEBANK','HBN');
_add(_TAB,'IF',      'KON');
_add(_TAB,'KALI',    'PKD');
_add(_TAB,'KALI',    'PPL');
_add(_TAB,'KASA',    'KAS');
_add(_TAB,'OBIEGI',  'OBE');
_add(_TAB,'OBIEGI',  'OBG');
_add(_TAB,'PRODUKCJ','TPP');
_add(_TAB,'PRODUKCJ','TTE');
_add(_TAB,'RCP',     'PRC');
_add(_TAB,'WYPOSAZ', 'WYP');
_add(_TAB,'ZKL',     'PBA');
_add(_TAB,'ZKL',     'POC');
_add(_TAB,'ZKL',     'PSZ');
_add(_TAB,'PPK',     'PPK');
_add(_TAB,'ZDO',     'ROD');
_add(_TAB,'EDP',     'PED');

_obj


\kst_map
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Naprawa potencjalnych błędów w mapie stałych systemu.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
KST_MAP.cntx_psh();
KST_DEF.clear();

_kst_def:=null;

: ustal definicję stałej na podstawie KST_PAR.SLBANK
{? KST_MAP.find_tab(,
      'KST_ZES','SYMBOL','=','KST_PAR',
      'SYMBOL',,'=','SLBANK'
   )
|| _kst_def:=KST_MAP.KST_DEF
|| KST_MAP.cntx_pop();
   return()
?};

: czy definicja XINFO.SLBANK jest niezgodna z KST_PAR.SLBANK?
{? KST_MAP.find_tab(,
      'KST_ZES','SYMBOL','=','XINFO',
      'SYMBOL',,'=','SLBANK',
      'KST_DEF',,'<>',
      _kst_def
   )
||
:  aktualizuj błędną definicję
   KST_MAP.KST_DEF:=_kst_def;
   KST_MAP.put()
?};

KST_MAP.cntx_pop();
~~


\kst_wid_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Odpisuje w pliku zawartość tabeli KST_WID.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('KST_WID')<>type_of(SYSLOG)
|| return()
?};

_MAP:=exec('_sys2dom','tran_exp');

_OUT:=sql(
   'select :_a.DOM as DOM, W.NUMER as NUMER, Z.SYMBOL as KST_ZES, M.SYMBOL as KST_MAP '+
   'from KST_WID as W join '+
   '     KST_SYS as S using(W.KST_SYS,S.REFERENCE) join '+
   '     KST_MAP as M using(W.KST_MAP,M.REFERENCE) join '+
   '     KST_ZES as Z using(M.KST_ZES,Z.REFERENCE), '+
   '     :_a '+
   'where S.SYSTEM=:_a.SYS '+
   'order by DOM, KST_ZES, NUMER',
   _MAP.TAB
);

_OUT.export('kst_wl.tra',,'|','Mazovia',,
   'DOM',,1,,
   'KST_ZES',,2,,
   'KST_MAP',,3,,
   'NUMER',,4,
);

obj_del(_OUT);
~~


\es_maski
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Maski dla formuł naprawczych
::----------------------------------------------------------------------------------------------------------------------
{? SROD.name()<>'srod'+$VAR.AR || SROD.use('srod'+$VAR.AR) ?};
{? AMOR.name()<>'amor'+$VAR.AR || AMOR.use('amor'+$VAR.AR) ?};
{? DOKU.name()<>'dokw'+$VAR.AR || DOKU.use('dokw'+$VAR.AR) ?};
{? DOKP.name()<>'dokp'+$VAR.AR || DOKP.use('dokp'+$VAR.AR) ?};
{? ELP.name()<>'elp'+$VAR.AR || ELP.use('elp'+$VAR.AR) ?};
{? ADOK.name()<>'adok'+$VAR.AR || ADOK.use('adok'+$VAR.AR) ?};
{? SKLD.name()<>'skld'+$VAR.AR || SKLD.use('skld'+$VAR.AR) ?};
{? ZMIA.name()<>'zmia'+$VAR.AR || ZMIA.use('zmia'+$VAR.AR) ?};
{? TSR.name()<>'typp'+$VAR.AR || TSR.use('typp'+$VAR.AR) ?};
{? ZFSR.name()<>'zfsr'+$VAR.AR || ZFSR.use('zfsr'+$VAR.AR) ?}


\es_napraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Formuły naprawcze
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','stalesys',,KONST);
exec('varinit', 'varinit');
exec('ini_kst', 'varinit');
:: otwarcie masek tabel
{? VAR.AR>0
|| exec('es_maski','tran_exp');
   exec('estra_01','tran_exp');
   exec('estra_02','napraw_f');
   exec('estra_04','napraw_f');
   exec('estra_05','napraw_f');
   exec('estra_06','tran_exp');
   exec('estra_07','tran_exp');
   VAR.cntx_psh();
   VAR.AR:=2018;
   exec('es_maski','tran_exp');
   exec('estra_08','napraw_f');
   VAR.cntx_pop()
?}


\hb_napraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Formuły uzupełniające dane dotyczące Bankowości elektronicznej
::----------------------------------------------------------------------------------------------------------------------
SLU.cntx_psh();
SLU.index('WZORZEC');
SLU.prefix('fiks','~Płatności ZUS',);
{? ~SLU.first()
||  SLU.blank();
    SLU.SYSTEM:='T';
    SLU.NAZ:='~Płatności ZUS';
    SLU.WZ:='fiks';
    SLU.OP:='Rodzaje płatności ZUS';
    SLU.DL:=4;
    SLU.prefix();
    SLU.add(1)
?};
SLU.cntx_pop();
exec('home_03','napraw_f')


\map_okr_es
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Formuła przygotowuje mapę okresów Estra - Fiks
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__OKRES');
__OKRES:=tab_tmp(2,'AR','INTEGER','ROK',
                   'AM','INTEGER','OKR',
                   'REF','INTEGER','REF');

OKR_ES.cntx_psh();
OKR_ES.index('OKRESYRM');
{? OKR_ES.first()
|| {! |?
      _ref:=exec('okresrok','tech_es',date(OKR_ES.AR,OKR_ES.AM,1),1);
      __OKRES.blank();
      __OKRES.AR:=OKR_ES.AR;
      __OKRES.AM:=OKR_ES.AM;
      __OKRES.REF:=#_ref;
      __OKRES.add();
      OKR_ES.next()
   !}
?};
OKR_ES.cntx_pop()


\varinit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: init: inicjacja zmiennej VAR
::----------------------------------------------------------------------------------------------------------------------
VAR.blank();
_rok:=VAR.AR:=KONST.AR;
VAR.AM:=KONST.AM;
VAR.P:=KONST.MP;
_mies:=VAR.AM+VAR.P;
{? _mies<= 0
|| _rok-=1;
   _mies+= 12
|? _mies>12
|| _rok+=1;
   _mies-=12
?};
VAR.ARP:=_rok;
VAR.AMP:=_mies;
_mies:=VAR.P+1;
_rok:=VAR.AR;
{? _mies<=0
|| _rok-=1;
   _mies+=12
?};
VAR.RP:=_rok;
VAR.MP:=_mies;
VAR.KWK:=KONST.W;
CONS.FORM_NRI:=KONST.FORM_NRI;
CONS.FORM_NR2:=KONST.FORM_NR2;
CONS.RS:=KONST.RS;
CONS.OR:=KONST.OR;
CONS.RZ:=KONST.RZ;
CONS.E:=KONST.E;
CONS.NAROD:=KONST.NAROD;
{? __OKRES.find_key(VAR.AR,VAR.AM)
|| OKRO_F.cntx_psh(); ROK_F.cntx_psh();
   OKRO_F.prefix(); ROK_F.prefix();
   {? OKRO_F.seek(__OKRES.REF,OKRO_F.name())
   || VAR.OKRO_F:=OKRO_F.ref();
      VAR.ROK_F:=OKRO_F.ROK
   ?};
   OKRO_F.cntx_pop(); ROK_F.cntx_pop()
|| _date:=date(VAR.ARP,VAR.AMP,0);
   VAR.OKRO_F:=exec('okresrok','tech_es',_date,1);
   VAR.ROK_F:=VAR.OKRO_F().ROK
?};
{? VAR.ROK_F<>null & VAR.OKRO_F<>null
|| VAR.KONTROL:=__var_ko
|| VAR.KONTROL:='F'
?};
1


\estra_01
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1502/0010
::       Formula naprawcza przelicza odpis z dotacji w ostatnim okresie biezacego roku
::  OLD: \estra_01/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:=VAR.AR;
_mie:=VAR.AM;
_zmiana:=0;
s17:=0;
VAR_DEL.delete('global','globalp','globalf');
global:=globalp:=globalf:=0;
SROD.cntx_psh();
AMOR.cntx_psh();
ZFSR.cntx_psh();
ZFSR_ODP.cntx_psh();
VAR.cntx_psh();
_names:=SROD.names();
{? _names.first()
|| {! |?
      {? _names.NAME<>'srodplan' & _names.NAME<>'srod___' & _names.NAME<>'srodxxxx' & #(_names.NAME+4)>KONST.RZ
      || _zmiana:=1;
         KONST.AR:=#(_names.NAME+4);
         KONST.AM:=12;
         exec('PRZ_OP','estra');
         exec('PRZ_AO','estra');
         exec('varinit','varinit');
         exec('ini_kst','varinit');
         KONST.AO:=~-(date(VAR.ARP, VAR.AMP, 1)$8);
         exec('utwmies','utwmies');
         exec('openbaz','openbaz');
         SROD.use(_names.NAME); SROD.prefix();
         AMOR.use('amor'+(SROD.name()+4)); AMOR.prefix();
         ZFSR.use('zfsr'+(SROD.name()+4)); ZFSR.index('KONFIN');ZFSR.prefix();
         ZFSR_ODP.prefix();
         {? ZFSR.first()
         || SROD.for_each("exec('narastaj','narasta');
                           ZFSR.index('KONFIN'); ZFSR.prefix(SROD.ref());
                           {? ZFSR.first() & AMOR.first()
                           || exec('danezdop','danezdok',12);
                              exec('danezdof','danezdok',12);
                              global:=globalf:=globalp:=0;
                              {! |?
                                 {? (VAR.ARP>ZFSR.DATA~1 | (ZFSR.DATA~1=VAR.ARP & VAR.AM>=ZFSR.MO)) & VAR.WARP>0 & VAR.WARF>0
                                 || _uzup:=0;
                                    global:=globalp;
                                    {? ZFSR.DOKU=null & ZFSR.DATA~1=VAR.ARP & VAR.AM=ZFSR.MO
                                    || _uzup:=exec('uzup_pre','dotacje','P')
                                    ?};
                                    _wyn:=exec('uzup_dot','dotacje','P',_uzup+($('AMOR.A'+$VAR.AM))(),ZFSR.AUTOID,VAR.AR,VAR.AM,((ZFSR.KWOTAP/VAR.WARP)*100),ZFSR.KWOTAP,0);
                                    {? _wyn='T' || ZFSR.DATA_ZP:=date(VAR.ARP,VAR.AMP,0) || ZFSR.DATA_ZP:=date(0,0,0) ?};
                                    globalp:=global;
                                    _uzup:=0;
                                    global:=globalf;
                                    {? ZFSR.DOKU=null & ZFSR.DATA~1=VAR.ARP & VAR.AM=ZFSR.MO
                                    || _uzup:=exec('uzup_pre','dotacje','F')
                                    ?};
                                    _wyn:=exec('uzup_dot','dotacje','F',_uzup+($('AMOR.A'+$(VAR.AM+12)))(),ZFSR.AUTOID,VAR.AR,VAR.AM,((ZFSR.KWOTAP/VAR.WARF)*100),ZFSR.KWOTAP,0);
                                    {? _wyn='T' || ZFSR.DATA_ZF:=date(VAR.ARP,VAR.AMP,0) || ZFSR.DATA_ZF:=date(0,0,0) ?};
                                    globalf:=global;
                                    global:=0;
                                    ZFSR.put()
                                 ?};
                                 ZFSR.next()
                              !}
                        ?}
                       ")
         ?}
      ?};
      _names.next()
   !}
?};
{? _zmiana
|| KONST.AR:=_rok;
   KONST.AM:=_mie;
   exec('PRZ_OP','estra');
   exec('PRZ_AO','estra');
   exec('varinit','varinit');
   exec('ini_kst','varinit');
   KONST.AO:=~-(date(VAR.ARP, VAR.AMP, 1)$8);
   exec('utwmies','utwmies');
   exec('openbaz','openbaz')
?};
VAR.cntx_pop();
ZFSR_ODP.cntx_pop();
ZFSR.cntx_pop();
AMOR.cntx_pop();
SROD.cntx_pop();
VAR_DEL.delete('global','globalp','globalf');
1


\estra_06
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.51]
:: OPIS: Aktualizacja 12.51_1 - pazdziernik 2017
::       Nowa klasyfikacja srodkow trwałych - import danych
::  OLD: \estra_06/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~(var_pres('SGR',SROD)>0)
|| return(0)
?};

{? ~fexists('tam_2018.dfg',1)
|| return(0)
?};

{? ~fexists('tamk_2018.dfg',1)
|| return(0)
?};

TAB_KRST.cntx_psh();
TAB_KRST.index('TABKRST');
TAB_KRST.prefix(2018);
{? TAB_KRST.first() || _find:=1 || _find:=0 ?};
TAB_KRST.cntx_pop();
{? _find || return(1) ?};

_krst:=_oldkrst:=null;
TAB_KRST.cntx_psh(); TAB_KONW.cntx_psh(); TAM.cntx_psh();

TAB_KRST.index('TABKRST');
TAB_KRST.prefix(2018);
{? TAB_KRST.first()
|| exec('ini_kst','varinit');
   {? STER.KONW_OK<>'N'
   || TAB_KRST.cntx_pop(); TAB_KONW.cntx_pop(); TAM.cntx_pop();
      return(0)
   || {? ~FUN.ask('W systemie istnieje już klasyfikacja obowiązująca od 2018 roku.\n'
                +'Usunąć istniejące dane i wykonać import?'@)
      || TAB_KRST.cntx_pop(); TAB_KONW.cntx_pop(); TAM.cntx_pop();
         return(0)
      || TAB_KONW.index('TAB_KONW');
         TAB_KONW.prefix(2018);
         {? TAB_KONW.first()
         || {! |? TAB_KONW.del() !}
         ?};
         TAM.index('KST');
         TAM.prefix(TAB_KRST.ref());
         {? TAM.first()
         || {! |? TAM.del() !}
         ?};
         STER.NKST:=null;
         {? TAB_KRST.count()=0 || TAB_KRST.del() ?}
      ?}
   ?}
?};

TAB_KRST.cntx_psh();
TAB_KRST.index('TAB_KRST');
TAB_KRST.prefix();
{? TAB_KRST.last()
|| _kst:=%(%TAB_KRST.KST + 1);
   _oldkrst:=TAB_KRST.ref()
|| _kst:='A'
?};
TAB_KRST.cntx_pop();

TAB_KRST.AR:=2018;
TAB_KRST.O:='Klasyfikacja środków trwałych od 1.01.2018 r.';
TAB_KRST.KST:=_kst;
{? TAB_KRST.add()
|| _krst:=TAB_KRST.ref()
|| TAB_KRST.cntx_pop(); TAB_KONW.cntx_pop(); TAM.cntx_pop();
   return(0)
?};

_sep:='@'; _wy:=0;

_f:=fopen('tam_2018.dfg','ur',1);
{? _f
|| TAB.cntx_psh();
   TAB.prefix();
   TAB.index('POZ');
   {! |? (_line:=fread(_f))<>'\n'
   |! {? form(_line)<>''
      || _tmp:=spli_str(_line,_sep);
         TAM.blank(1);
         TAM.KST:=TAB_KRST.ref();
         {? form(_tmp[1])<>'' & TAB.find_key(form(_tmp[1])) || TAM.BIL:=TAB.ref() ?};
         TAM.GR:=form(_tmp[2]);
         TAM.NGS:=form(_tmp[4]);
         TAM.S:=#form(_tmp[5]);
         TAM.WD:=#form(_tmp[6]);
         TAM.add(1);
         {? var_pres('_tmp')>0 || obj_del(_tmp) ?}
      ?}
   !};
   fclose(_f);
   TAB.cntx_pop();

   _k:=fopen('tamk_2018.dfg','ur',1);
   {? _k
   || TAB_KONW.cntx_psh();
      TAB_KONW.index('TAB_KONW');
      TAB_KONW.prefix(2018);
      {? ~TAB_KONW.first()
      ||
:: uzupelnienie tabeli konwersji o wszystkie grupy z dotychczasowej klasyfikacji w bazie TAM systemu Estra
:: w roku 2017
         TAM.index('KST');
         TAM.prefix(_oldkrst);
         {? TAM.first()
         || {! |?
               TAB_KONW.blank();
               TAB_KONW.AR:=2018;
               TAB_KONW.SGR:=TAM.ref();
               TAB_KONW.add();
               TAM.next()
            !}
         ?};

         TAB_KONW.index('SGR');
         {! |? (_line:=fread(_k))<>'\n'
         |! {? form(_line)<>''
            || _tmp:=spli_str(_line,_sep);
:: W pliku tamk_2018.dfg polu 1 - grupa przed 2018, w polu 2 - grupa od 2018
               TAB_KONW.prefix(2018,_tmp[1],);
               {? TAB_KONW.first()
               || TAM.index('KST');
                  TAM.prefix(_krst);
                  {? |_tmp[2]<>'' & TAM.find_key(_tmp[2])
                  || TAB_KONW.GR:=TAM.ref();
                     TAB_KONW.put()
                  ?}
               ?};
               {? var_pres('_tmp')>0 || obj_del(_tmp) ?}
            ?}
         !};
         STER.NKST:=_krst
      ?};
      TAB_KONW.cntx_pop();
      fclose(_k)
   ?};
   TAM.first();
   _wy:=1
?};

TAB_KRST.cntx_pop(); TAB_KONW.cntx_pop(); TAM.cntx_pop()


\estra_07
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.51]
:: OPIS: ER/WRT/XP/12.51/1802/0008
::       Nieaktualne stawki amortyzacji w aktualizacji 12.51_06
::  OLD: \estra_07/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
_sep:='@';

TAB.cntx_psh();
TAB.index('POZ');
TAB.prefix();
{? ~TAB.find_key('S5') || TAB.POZ:='S5'; TAB.O:='Inwentarz żywy'; TAB.add() ?};
TAB.cntx_pop();

TAM.cntx_psh(); TAB_KRST.cntx_psh();
TAB_KRST.index('TABKRST');
TAB_KRST.prefix(2018);
{? TAB_KRST.first()
|| TAM.index('KST');
   TAM.prefix(TAB_KRST.ref());
   _f:=fopen('tam_2018.dfg','ur',1);
   {? _f
   || TAB.cntx_psh();
      TAB.index('POZ');
      TAB.prefix();
      {! |? (_line:=fread(_f))<>'\n'
      |! {? form(_line)<>''
         || _tmp:=spli_str(_line,_sep);
            {? TAM.find_key(form(_tmp[2]))
            || TAM.S:=#form(_tmp[5]);
               TAM.NGS:=form(_tmp[4]);
               TAM.WD:=#form(_tmp[6]);
               {? form(_tmp[1])<>'' & TAB.find_key(form(_tmp[1])) || TAM.BIL:=TAB.ref() ?};
               TAM.put(1)
            || TAM.blank(1);
               TAM.KST:=TAB_KRST.ref();
               {? form(_tmp[1])<>'' & TAB.find_key(form(_tmp[1])) || TAM.BIL:=TAB.ref() ?};
               TAM.GR:=form(_tmp[2]);
               TAM.NGS:=form(_tmp[4]);
               TAM.S:=#form(_tmp[5]);
               TAM.WD:=#form(_tmp[6]);
               TAM.add(1)
            ?};
            {? var_pres('_tmp')>0 || obj_del(_tmp) ?}
         ?}
      !};
      TAB.cntx_pop();
      fclose(_f);
      {? TAM.find_key('853-1.') & TAM.count()=0 || TAM.del() ?};
      {? TAM.find_key('853-2.') & TAM.count()=0 || TAM.del() ?}
   ?}
?};
TAB_KRST.cntx_pop(); TAM.cntx_pop()


\kali_35
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: KOD BŁĘDU: PR/WRT/XP/12.41/1606/0029
::       Zmiana interpretacji doby niedzielnej - aktualizacja zapisów w otwartych okresach rozliczeniowych
::   WE:
::   WY:
::  OLD: \kali_35/napraw_p.fml
::----------------------------------------------------------------------------------------------------------------------
exec('init','edit_kal');
VAR_DEL.delete('TABWS');
TABWS:=tab_tmp(1,
   'DATA','DATE','Data badania',
   'VAL_CUR','STRING[2]','Bieżąca wartość TYP+TYPWS',
   'VAL_SUG','STRING[2]','Sugerowana wartość TYP+TYPWS',
   'VAL_ALL','STRING[60]','Dopuszczalne wartości pól TYP+TYPWS',
   'GPW','STRING[1]','Warstwa',
   'OPIS_D','STRING[35]','Opis dnia',
   'OPIS','STRING[255]','Opis rekordu',
   'TAB','STRING[8]','Nazwa tabeli',
   'REF','INTEGER','Nr rekordu'
);
_win:=TABWS.mk_sel('Tytuł okna',,,,,,,,'U');
TABWS.win_fld(_win,,'DATA');
TABWS.win_fld(_win,,'OPIS_D',,,10);
TABWS.win_fld(_win,,'VAL_CUR',,,10);
TABWS.win_fld(_win,,'VAL_SUG',,,10);
TABWS.win_fld(_win,,'VAL_ALL',,,30);
TABWS.win_fld(_win,,'GPW',,,5);
TABWS.win_fld(_win,,'OPIS',,,30);
TABWS.win_fld(_win,,'TAB',,,10);
TABWS.win_act(_win,,'Kolejność');

TABWS.win_act(_win,,'Formuła','Zmień sugestie',,,,
            "
            {? var_press('__val_glob')<0
            || _value:=exec('askTypValue','napraw_p',(1+TABWS.VAL_CUR),TABWS.DATA);
               _typ:=TABWS.VAL_CUR+TABWS.VAL_ALL
            || _value:=__val_glob;
               _typ:=__typ_glob
            ?};
            {? ~(type_of(_value)=0) & TABWS.VAL_CUR+TABWS.VAL_ALL=_typ
            || TABWS.VAL_SUG:=_value;
               TABWS.put()
            ?}
            ",,1,
            "
            FUN.info('Uwaga zmiana sugestii nastąpi tylko dla rekordów z wybranej grupy o typie dnia: '+(1+TABWS.VAL_CUR)+' - '+TABWS.VAL_ALL+'\n'+
                     'Należy wybrać podtyp na który nastąpi zmiana.');
            __val_glob:=exec('askTypValue','napraw_p',(1+TABWS.VAL_CUR),TABWS.DATA);
            __typ_glob:=TABWS.VAL_CUR+TABWS.VAL_ALL
            ",
            "
            &__val_glob;
            &__typ_glob
            ");
TABWS.win_act(_win,,'Formuła','Akceptuj sugestie',,,,
            "
            {? |TABWS.VAL_SUG<>''
            || TABWS.VAL_CUR:=TABWS.VAL_SUG;
               _tab:=($(TABWS.TAB))();
               _tab.cntx_psh();
               _tab.prefix();
               {? _tab.seek(TABWS.REF,)
               || _tab.TYP:=(1+TABWS.VAL_SUG);
                  {? +TABWS.VAL_SUG>1 || _tab.TYPWS:=TABWS.VAL_SUG+1 ?};
                  {? _tab.put()
                  || TABWS.del()
                  ?}
               ?};
               _tab.cntx_pop()
            ?}
            ",,1);
TABWS.win_act(_win,,'Formuła','Napraw',,,,
            "
            _value:=exec('askTypValue','napraw_p',(1+TABWS.VAL_CUR),TABWS.DATA);
            {? type_of(_value)=0
            || 0
            || TABWS.VAL_CUR:=_value;
               _tab:=($(TABWS.TAB))();
               _tab.cntx_psh();
               _tab.prefix();
               {? _tab.seek(TABWS.REF,)
               || _tab.TYP:=(1+_value);
                  {? +_value>1 || _tab.TYPWS:=_value+1 ?};
                  {? _tab.put()
                  || TABWS.del()
                  ?}
               ?};
               _tab.cntx_pop()
            ?}
            ",1);
TABWS.win_sel(_win);

A_OKRP.cntx_psh();
A_OKR.cntx_psh();
OSOBA.cntx_psh();
P.cntx_psh();
KAL_BUFF.cntx_psh();
KAL_DEF.cntx_psh();
KAL_NAZW.cntx_psh();

A_OKRP.index('A_OKPP');
A_OKR.index('A_OKRZ');
A_OKR.prefix('O');
KAL_BUFF.index('OKRPRDT');
KAL_DEF.index('KAL_DATA');
KAL_NAZW.index('KAL_NAZW');
_gpw:=obj_new(2);
_gpw[1]:='G'; _gpw[2]:='P';

{? A_OKR.first()
|| _size:=A_OKR.size();
   _licz:=0;
   {!
   |? _licz+=1;
      _prgs:=100*_licz/_size;
      A_OKRP.prefix(A_OKR.ref());
      {? A_OKRP.first()
      || {!
         |? A_OKRP.P();
            {! _ind:=1..2
            |! KAL_BUFF.prefix(_gpw[_ind],A_OKR.ref,A_OKRP.P);
               {? KAL_BUFF.first()
               || {!
                  |? exec('sprawdz_typws','napraw_p',KAL_BUFF);
                     KAL_BUFF.next()
                  !}
               ?}
            !};
            _prac:=form($A_OKR.OD+' - '+$A_OKR.DO+'('+A_OKR.NAZ().NAZ+') - '+
            A_OKRP.P().OSOBA().NAZWISKO+' '+A_OKRP.P().OSOBA().PIERWSZE+' ['+form(P.T)+']',105);
            progress(_prgs,_prac,'Trwa uzupełnianie danych w otwartych okresach rozliczeniowych');
            KAL_NAZW.prefix(%255+$A_OKRP.P,);
            {? KAL_NAZW.first()
            || KAL_DEF.prefix(KAL_NAZW.ref);
               {? KAL_DEF.first()
               || {!
                  |? {? KAL_DEF.DATA>=A_OKRP.OD & KAL_DEF.DATA<=A_OKRP.DO
                     || exec('sprawdz_typws','napraw_p',KAL_DEF)
                     ?};
                     KAL_DEF.next()
                  !}
               ?}
            ?};
            A_OKRP.next()
         !}
      ?};
      A_OKR.next()
   !};
   prgs_clr()
?};

{? TABWS.size()
|| FUN.info('Nie udało się zmienić typu dnia na dopuszczalną wartość we wszystkich wpisach w kalendarzu.\n'+
            'Zostanie wyświetlona lista dni, dla których należy ręcznie ustalić odpowiedni typ.');
   TABWS.select()
?};

VAR_DEL.delete('TABWS');
P.cntx_pop();
OSOBA.cntx_pop();
KAL_BUFF.cntx_pop();
KAL_DEF.cntx_pop();
KAL_NAZW.cntx_pop();
A_OKRP.cntx_pop();
A_OKR.cntx_pop();
1


\kali_40
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: KOD BŁĘDU: ER/WRT/XP/12.41/1609/0014
::       Dodanie korekt "zerowych"
::   WE:
::   WY:
::  OLD: \kali_40/napraw_p.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_buffer')>100 || obj_del(_buffer) ?};
_buffer:=exec('buffer','kal_korh');

KAL_KORH.cntx_psh();
_ndx:=KAL_KORH.ndx_tmp('',1,'KAL_KORN','P',0,
                            'KAL_KORN','A_OKR',0,
                            'DATA',,0,
                            'KAL_KORN','WERSJA',0);
KAL_KORH.index(_ndx);

KAL_BUFF.cntx_psh();
P.cntx_psh();
P.prefix();
A_OKRP.cntx_psh();
A_OKRP.index('A_OKPP');
A_OKRP.prefix();
{? A_OKRP.first()
|| PROGRESS.set(A_OKRP.size(),'Trwa aktualizacja korekt planowania...');
   {!
   |? _p_ref:=A_OKRP.P;
      _okr_ref:=A_OKRP.OKR;
      _korn_ref:=exec('korZeroExist','kal_korn',_p_ref,_okr_ref);
      _zerowa:=(~_korn_ref);
      {? _zerowa & P.seek(_p_ref) & P.GRAFIK='T'
      ||
::       zalozenie transakcji
         _mydo:=do_state()=0;
         {? _mydo || do() ?};
         _korn_ref:=exec('korekta_start','kal_korn',,_p_ref,_okr_ref,'Plan pierwotny',_zerowa);
         {? _korn_ref
         || _dzien:=A_OKRP.OD;
         _do:=A_OKRP.DO;

         {!
         |? _exist:=exec('exist','kal_korh',_p_ref,_okr_ref,_dzien);
            _first:={? _exist
                    || KAL_KORH.index('PRACOKR');
::                     wyszukujemy pierwszą korektę
                       KAL_KORH.prefix(_p_ref,_okr_ref,_dzien);
                       KAL_KORH.first()
                    |? _exist=null()
                    || KAL_BUFF.index('PRZNODT');
::                     wyszukujemy dzień w buforze planowania
                       KAL_BUFF.prefix(_p_ref,'P','T',_dzien);
                       KAL_BUFF.first()
                    || 0
                    ?};

            {? _first
            || {? var_pres('_tab')>100 || obj_del(_tab) ?};
               _tab:={? _exist || KAL_KORH || KAL_BUFF ?};
                  _buffer.blank(_buffer);
                  _buffer.STATUS:=_tab.STATUS;
                  _buffer.CZAS:=_tab.CZAS;
                  _buffer.DATA:=_tab.DATA;
                  _buffer.DATAW:=_tab.DATAW;
                  _buffer.KONIEC:=_tab.KONIEC;
                  _buffer.OPIS:=_tab.OPIS;
                  _buffer.POCZATEK:=_tab.POCZATEK;
                  _buffer.RODZAJ:=_tab.RODZAJ;
                  _buffer.TYP:=_tab.TYP;
                  _buffer.TYPWS:=_tab.TYPWS;
                  exec('add','kal_korh',_p_ref,_okr_ref,_buffer,_zerowa)
            ?};
           _dzien+=1;
           _dzien<=_do
            !}
         ?};
         exec('korekta_koniec','kal_korn',_p_ref,_okr_ref,_zerowa);
         {? _mydo || end() ?}
      ?};
::    sprawdzenie czy korekta zawiera pozycje, jeśli nie to kasujemy
      {? _korn_ref
      || {? exec('isKorZeroEmpty','kal_korn',_korn_ref)
         || exec('delete','kal_korn',_korn_ref)
         ?}
      ?};
      PROGRESS.next();
      A_OKRP.next()
   !};
   PROGRESS.close()
?};
A_OKRP.cntx_pop();
P.cntx_pop();
KAL_BUFF.cntx_pop();
KAL_KORH.cntx_pop();
KAL_KORH.ndx_drop(_ndx);
1


\pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: aktualizuje formuły planu dostaw
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::FORMULA.cntx_psh();
::FORMULA.index('FORMULA4');
:: formuły bufora planu dostaw
PD_BUF_D.cntx_psh();
PD_BUF_D.prefix();
PD_BUF_D.for_each("PD_BUF_D.A:='N'; PD_BUF_D.put()");
PD_BUF_D.cntx_pop();
::FORMULA.prefix('2',);
::_loop:=FORMULA.first();
::{!
::|? _loop
::|!
::   {? FORMULA.count() & FORMULA.FORMULA*',\'pd_buf\','
::   || FORMULA.FORMULA:=gsub(FORMULA.FORMULA,',\'pd_buf\',',',\'%plan_dostaw\',');
::      FORMULA.FORMULA:='return;'+FORMULA.FORMULA;
::      FORMULA.put()
::   ?};
::   _loop:=FORMULA.next()
::!};

:: formuły planu dostaw
PD_D.cntx_psh();
PD_D.prefix();
PD_D.for_each("PD_D.A:='N'; PD_D.put()");
PD_D.cntx_pop()
::FORMULA.prefix('3',);
::_loop:=FORMULA.first();
::{!
::|? _loop
::|!
::   {? FORMULA.count() & FORMULA.FORMULA*'\',\'pd_df\','
::   || {? FORMULA.FORMULA*'uzu_zi' | FORMULA.FORMULA*'uzu_min' | FORMULA.FORMULA*'uzu_brak' | FORMULA.FORMULA*'uzu_atr'
::      || FORMULA.FORMULA:=gsub(FORMULA.FORMULA,',\'pd_df\',',',\'%plan_dostaw\',')
::      || FORMULA.FORMULA:=gsub(FORMULA.FORMULA,'\',\'pd_df\',','_pl\',\'%plan_dostaw\',')
::      ?};
::      FORMULA.FORMULA:='return;'+FORMULA.FORMULA;
::      FORMULA.put()
::   ?};
::
::   _loop:=FORMULA.next()
::!};
::FORMULA.cntx_pop()


\narastaj
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Obliczenie watrości umorzenia, netta i amortyzacji finansowej i podatkowej
::       dla wybranego środka trwałego.
::       Wypełniane są odpowiednie pola zmiennej VAR.
::   WY: 0 / 1
::  OLD: \narastaj/narasta.fml
::----------------------------------------------------------------------------------------------------------------------
{? SROD.size()=0
|| exec('var_blank','narasta');
   return(0)
?};
_l_mies := {? SROD.DE < date(VAR.RP, VAR.MP, 1)
              || 1
           || VAR.D:=SROD.DE;
           exec('licznik', 'licznik')
           ?};

VAR.WAR1 := VAR.WAR2 := VAR.ULGA := 0;
VAR.WARP := VAR.UMOP := VAR.NETP := 0;
VAR.WARF := VAR.UMOF := VAR.NETF := 0;
VAR.AMO1 := VAR.AMO2 := 0; VAR.WARPELNA:=0;
{? var_pres('WARP100',VAR)>0  || VAR.WARP100:=0 ?};
{? var_pres('ZALP100',VAR)>0  || VAR.ZALP100:=0 ?};
VAR.KURS_EU:=0;

VAR.NRI:= SROD.NRI;
VAR.OKE:= SROD.OKE;
VAR.MAX:= SROD.MAX;
VAR.OSTATEK:=SROD.OSTATEK;
VAR.WKP:=SROD.WKP;
VAR.WKF:=SROD.WKF;
VAR.MPOD:=SROD.MP;
VAR.MFIN:=SROD.MF;
VAR.DPLP:=SROD.DPLP;
VAR.DPLF:=SROD.DPLF;
VAR.STAWKA:=SROD.STAWKA;
VAR.STAFIN:=SROD.STAFIN;
VAR.POM:=SROD.POM;
VAR.PRAC:=SROD.PRAC;
VAR.KONFIN:=SROD.KONFIN;
VAR.KONPOD:=SROD.KONPOD;
VAR.WARPELNA:=SROD.WARPELNA;
VAR.KURS_EU:=SROD.KURS_EU;
VAR.MAP:=SROD.MP().T;
VAR.MAF:=SROD.MF().T;

{? _l_mies <= VAR.AM
   || VAR.WAR1:=SROD.WAR1;
      VAR.WAR2:=SROD.WAR2;
      VAR.UMOP:=SROD.UMOP;
      VAR.ULGA:=SROD.ULGA;
      VAR.WARF:=SROD.WARF;
      VAR.UMOF:=SROD.UMOF;
      {? var_pres('WARP100',VAR)>0 & var_pres('WARP100',SROD)>0
      || {? VAR.ARP=SROD.DE~1 & SROD.MP().T='J' & SROD.WARP100>0
         || VAR.WARP100:=SROD.WARP100
         ?}
      ?};
      {? var_pres('ZALP100',VAR)>0 & var_pres('ZALP100',SROD)>0
      || VAR.ZALP100:=SROD.ZALP100
      ?};
      DOKU.index('DOKW');
      DOKU.prefix(SROD.ref(), VAR.AR);
      {? DOKU.first()
      || {! |? {? (DOKU.W<>'T' & DOKU.DW<=date(VAR.ARP, VAR.AMP, 0) & DOKU.MO<=VAR.AM) | (DOKU.W='T' & DOKU.MO=VAR.AM)
                || VAR.WAR1+=DOKU.WAR1;
                   VAR.WAR2+=DOKU.WAR2;
                   VAR.UMOP+=DOKU.UMOP;
                   VAR.ULGA+=DOKU.ULGA;
                   VAR.WARF+=DOKU.WARF;
                   VAR.UMOF+=DOKU.UMOF;
                   VAR.OKE+=DOKU.OKE;
                   VAR.MAX+=DOKU.MAX;
                   {? var_pres('WARP100',VAR)>0 & var_pres('WARP100',DOKU)>0
                   || {? DOKU.WARP100>0 || VAR.WARP100:=DOKU.WARP100 ?}
                   ?};
                   VAR.OSTATEK+=DOKU.OSTATEK
               ?};
               DOKU.next()
         !}
      ?};
      ADOK.index('ADOKW');
      ADOK.prefix(SROD.ref(), VAR.AR);
      {? ADOK.last()
       || {? ADOK.MO<=VAR.AM
           || VAR.WKP:=ADOK.WKP;
              VAR.WKF:=ADOK.WKF;
              VAR.MPOD:=ADOK.MP;
              VAR.MFIN:=ADOK.MF;
              VAR.DPLP:=ADOK.DPLP;
              VAR.DPLF:=ADOK.DPLF;
              VAR.STAWKA:=ADOK.STAWKA;
              VAR.STAFIN:=ADOK.STAFIN;
              VAR.MAP:=ADOK.MP().T;
              VAR.MAF:=ADOK.MF().T
          ?}
      ?};
      ZMIA.index('ZMIM');
      ZMIA.prefix(SROD.ref());
      {? ZMIA.first()
      || {! |? {? ZMIA.MO>VAR.AM
               || VAR.POM:=ZMIA.SPOM;
                  VAR.PRAC:=ZMIA.SPRAC;
                  VAR.KONFIN:=ZMIA.OLD_FIN;
                  VAR.KONPOD:=ZMIA.OLD_POD;
                  0
               |? ZMIA.MO=VAR.AM
               || VAR.POM:=ZMIA.POM;
                  VAR.PRAC:=ZMIA.PRAC;
                  VAR.KONFIN:=ZMIA.KONFIN;
                  VAR.KONPOD:=ZMIA.KONPOD;
                  {? ZMIA.next
                  || {? ZMIA.MO=VAR.AM
                     || 1
                     || 0
                     ?}
                  ?}
               |? ZMIA.MO<VAR.AM
               || VAR.POM:=ZMIA.POM;
                  VAR.PRAC:=ZMIA.PRAC;
                  VAR.KONFIN:=ZMIA.KONFIN;
                  VAR.KONPOD:=ZMIA.KONPOD;
                  ZMIA.next
               ?}
         !}
      ?};
      AMOR.prefix(SROD.ref());
      {? VAR.AM=13 || _zmtn:=1; VAR.AM:=12 || _zmtn:=0 ?};
      {? AMOR.first()
         || {! _i := 1 .. VAR.AM
               |! VAR.UMOP += ($('AMOR.A'+$_i))();
                  VAR.AMO1 += ($('AMOR.A'+$_i))();
                  VAR.UMOF += ($('AMOR.A'+$(_i + 12)))();
                  VAR.AMO2 += ($('AMOR.A'+$(_i + 12)))()
            !}
      ?};
      {? _zmtn || VAR.AM:=13 ?};
      VAR.WARP := (VAR.WAR1 + VAR.WAR2)$KONST.DOKL;
      {? var_pres('ZALP100',VAR)>0 || _zal_100:=VAR.ZALP100 || _zal_100:=0 ?};
      VAR.UMOP := (VAR.UMOP + VAR.ULGA + _zal_100)$KONST.DOKL;
      VAR.NETP := VAR.WARP - VAR.UMOP;
      VAR.ULGA := VAR.ULGA$KONST.DOKL;
      VAR.WARF := VAR.WARF$KONST.DOKL;
      VAR.UMOF := VAR.UMOF$KONST.DOKL;
      VAR.NETF := VAR.WARF - VAR.UMOF;
      VAR.AMO1 := VAR.AMO1$KONST.DOKL;
      VAR.AMO2 := VAR.AMO2$KONST.DOKL
?};
UD_POM.JORG := SROD.JORG().SYMBOL;
{? SROD.Z='T'
|| 1
|| {? VAR.NETP=0 & VAR.NETF=0 & VAR.WARP=VAR.UMOP & VAR.WARF=VAR.UMOF || 2 || 0 ?}
?}


\samn2TRA
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Przenosi dane z tabeli SAMN do plików samn.tra, samnk.tra
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
_kod:={? REF.WFIRM || REF.FIRMA().SYMBOL || '' ?};
FIRMA.cntx_pop();

_fname:='samn'+_kod+'.tra';
_gname:='samnk'+_kod+'.tra';
_sep:=';';

_file:={? fexists(_fname,1) || 0 || fopen(_fname,'w',1,1) ?};
_gile:={? fexists(_gname,1) || 0 || fopen(_gname,'w',1,1) ?};

{? _file & _gile
|| SAMN.clear();
   {? SAMN.first()
   || {!
      |? _war:=$SAMN.SAM+_sep+
               $SAMN.OD+_sep+
               $SAMN.PAL+_sep+
               $SAMN.POJB+_sep+
               $SAMN.NORM+_sep+
               $SAMN.NORM100+_sep+
               $SAMN.NORMZ+_sep+
               $SAMN.NORP+_sep+
               $SAMN.NORP100+_sep+
               $SAMN.NORPZ+_sep+
                SAMN.RJ+_sep+
               $SAMN.MTKM+_sep+
               $SAMN.NA+_sep+
               $SAMN.DODP+_sep+
                SAMN.DODPR+_sep+
               $SAMN.WSPZ+_sep+
               $SAMN.PAL2+_sep+
               $SAMN.POJBD+_sep+
               $SAMN.NORM2+_sep+
               $SAMN.NORM2100+_sep+
               $SAMN.NORMZ2+_sep+
               $SAMN.NORP2+_sep+
               $SAMN.NORP2100+_sep+
               $SAMN.NORPZ2+_sep+
                SAMN.RJ2+_sep+
               $SAMN.MTKM2+_sep+
               $SAMN.NA2+_sep+
               $SAMN.DODD+_sep+
                SAMN.DODPR2+_sep+
               $SAMN.WSPZ2+_sep+
               $SAMN.PR_DOD_P+_sep+
               $SAMN.PR_DOD_D+_sep+
                SAMN.ND+_sep+
               $SAMN.ref()+_sep;
         fwrite(_file,_war);
         SAMK.index('SAMN2');
         SAMK.prefix(SAMN.ref());
         {? SAMK.first()
         || {!
            |? _ref:=SAMK.ref(); _oki:=SAMK.next();
               SAMK.cntx_psh();
               SAMK.prefix();
               {? SAMK.seek(_ref)
               || fwrite(_gile,$SAMN.ref()+_sep+$SAMK.ref()+_sep);
                  SAMK.SAMN:=null();
                  SAMK.put(1)
               ?};
               SAMK.cntx_pop();
               _oki
            !}
         ?};
         SAMN.del()
      !}
   ?}
?};
{? _file || fclose(_file) ?};
{? _gile || fclose(_gile) ?};
~~


\zsb_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Eksportuje zawartość tabeli ZSB_DOK
::----------------------------------------------------------------------------------------------------------------------
::FIRMA.cntx_psh();
::_kod:={? REF.WFIRM || '_'+REF.FIRMA().SYMBOL || '' ?};
::FIRMA.cntx_pop();

_tab:=sql('
   select
      ZSB_DOK.REFERENCE as REF,
      ZASOB as PROJZAS
   from ZSB_DOK
   order by 1, 2
');
_tab.export('zsb_dok.tra',0,%1+';','UTF-8,pth,noheader',,
:_tab.export('zsb_dok'+_kod+'.tra',0,%1+';','UTF-8,pth,noheader',,
   'REF',,1,,
   'PROJZAS',,2,
);
~~


\za_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Eksportuje informacje pola OPCJA tabeli ZA_TEST.
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
_kod:={? REF.WFIRM || '_'+REF.FIRMA().SYMBOL || '' ?};
FIRMA.cntx_pop();

{? var_pres('ZA_NOTAO')>0
|| _TAB:=sql('select ZA_TEST.REFERENCE as REF, ZA_TEST.OPCJA from ZA_TEST where ZA_TEST.OPCJA is not null')
|| _TAB:=tab_tmp(1,'REF','STRING[16]','Ref','OPCJA','STRING[16]','Ref opcji')
?};

:_TAB.export(ZA_TEST.name()+'.tra',0,%1+';','UTF-8,pth,header',,
_TAB.export(ZA_TEST.name()+_kod+'.tra',0,%1+';','UTF-8,pth,header',,
   'REF',,1,,
   'OPCJA',,2,
);
~~


\jednfirm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Przenosi dane z tabeli SAMN do plików samn.tra, samnk.tra
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
FIRMA.cntx_psh();
FIRMA.index('SYMBOL');
FIRMA.prefix();
{? FIRMA.first()
|| {!
   |? {? (FIRMA.TYP='S' | FIRMA.SYMBOL='000') & FIRMA.Z='N' & REF.FIRMA<>FIRMA.ref()
      || {? _res>0
          | ~_res & FUN.ask('Ponieważ transfer dotyczy wersji jednofirmowej,\n'+
                              'zapisy dotyczące innych firm nie będą brane pod uwagę.\n\n'
                              'Czy system został uruchomiony we właściwej firmie,\ndla której chcesz przenieść dane?')
         || FIRMA.Z:=-~FIRMA.Z;
            {? FIRMA.put(1) || _res:=1 || _res:=-2 ?}
         || _res:=-1
         ?}
      ?};
      _res>=0 & FIRMA.next()
   !}
?};
FIRMA.cntx_pop();
_res:={? _res<0 || 0 || 1 ?};
_res


\UPPOJ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: zapisy o odpadach dla tabeli UPPOJ
::----------------------------------------------------------------------------------------------------------------------
UPPOJ.cntx_psh();
UPPOJ.index('UM');
UPPOJ.prefix();
{? UPPOJ.first()
|| {!
   |? {? UPPOJ.ODP<>null()
      || UPPOJ.UP_SRC:=$UPPOJ.ODP;
         UPPOJ.put(1)
      ?};
      UPPOJ.next()
   !}
?};
UPPOJ.cntx_pop();
~~


\czy_estra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [19.22]
:: OPIS: sprawdzenie, czy należy wykonać formuły dla ESTRY
::----------------------------------------------------------------------------------------------------------------------
_jest:=0;
SROD.cntx_psh();
_SROD:=SROD.names();
:: usunięcie masek technicznych i maski planów
{? _SROD.first()
|| {! |?
      {? _SROD.NAME+4='xxxx' | _SROD.NAME+4='plan' | _SROD.NAME+4='____' | _SROD.NAME+4='krp0' | #(_SROD.NAME+4)<1990
      || _SROD.del()
      || _SROD.next()
      ?}
   !}
?};
{? _SROD.first()
|| {! |?
      SROD.use(_SROD.NAME);
      SROD.prefix();
      {? SROD.size()>0 || _jest:=1 ?};
      ~_jest & _SROD.next()
   !}
?};
SROD.cntx_pop();
_jest


\zm_param
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.22]
:: OPIS: Zmiana parametrów przed przeniesieniem ich do Merit
::UWAGA: Formuła w całości przeniesiona do wykonania w Merit
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Atrybuty rubryk - zmiana numerów na zgodne z Merit. - Wykonanie po stronie Merit exec('zm_param','transfer1')
:: Zmiana danych w karcie podatkowej na zgodne z Merit. - Wykonanie po stronie Merit exec('KP','transfer1')
:: Zmiana pozycji składnika w karcie podatkowej na zgodną z Merit. - Wykonanie po stronie Merit exec('KP','transfer1')
~~


\at
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [19.22]
:: OPIS: Zmiana @ na {a} i odwrotnie
::   WE: _a - tekst do przetworzenia
::----------------------------------------------------------------------------------------------------------------------
{? _a*'@' || gsub(_a,'@','{a}')
|? _a*'{a}' || gsub(_a,'{a}','@')
|| _a
?}


\estra_zero
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [19.22]
:: OPIS: kontrola czy najwcześniejsze okresy Estry nie są wcześniejsze niż pierwsze okresy obrachunkowe Fiksa
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_wy:=0;
OKR_ES.index('OKRESYRM');
OKR_ES.prefix();
{? OKR_ES.first()
|| {? exec('jest','stalesys',KONST)
   || _rok:=OKR_ES.AR;
      _mies:=OKR_ES.AM+KONST.MP;
      {? _mies<=0
      || _rok-=1;
         _mies+=12
      |? _mies>12
      || _rok+=1;
         _mies-=12
      ?};

      OKRO_F.cntx_psh();
      OKRO_F.index('FIRMA_NR');
      OKRO_F.prefix(REF.FIRMA);
      {? OKRO_F.first() || _fiks:=1 || _fiks:=0 ?};
      OKRO_F.cntx_pop();

      {? _fiks & exec('okresrok','tech_es',date(_rok,_mies,1),1)=null
      || _wy:=1
      ?}
   ?}
?};
_wy


\estra_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [19.22]
:: OPIS: Jeżeli Estra po transferze musi wystartować w roku Fiksa to formuła zwraca rok startu
::   WY: rok startu Estry
::----------------------------------------------------------------------------------------------------------------------
_wy:=0;
OKR_ES.index('OKRESYRM');
OKR_ES.prefix();
{? OKR_ES.first()
|| {? exec('jest','stalesys',KONST)
   || {! |?
         _rok:=OKR_ES.AR;
         _mies:=OKR_ES.AM+KONST.MP;
         {? _mies<=0
         || _rok-=1;
            _mies+=12
         |? _mies>12
         || _rok+=1;
            _mies-=12
         ?};

         {? exec('okresrok','tech_es',date(_rok,_mies,1),1)<>null
         || _wy:=OKR_ES.AR
         ?};

         ~_wy & OKR_ES.next()
      !}
   ?}
?};
_wy


\chg_users_lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [20.42]
:: OPIS: Zmienia znacznik USERS.LOCK dla użytkowników posiadającym uprawnienia do jednostek księgowych
::       tylko w systemie PPK
::----------------------------------------------------------------------------------------------------------------------
_tabtmp:=sql('select USERSF.USERS, USERS.KOD, USERSF.LOCK, ODD.OD, USERSDEP.SYSTEM, USERSF.FIRMA  from USERSF '
             'join USERS join USERSDEP join ODD using (ODD.REFERENCE,USERSDEP.DEPT) where USERSF.LOCK=\'N\' order by '
             'USERSF.USERS');
_user:='';
{? _tabtmp.first()
|| {!
   |? _user:=_tabtmp.USERS;
      {? _tabtmp.SYSTEM<>'PPK'
      || {? _tabtmp.first()
         || {! |? {? _user=_tabtmp.USERS || _tabtmp.del || _tabtmp.next() ?} !}
         ?};
         _tabtmp.first()
      ?};
      _tabtmp.next()
   !}
?};
USERS.cntx_psh();
USERS.prefix();
_user:='';
{? _tabtmp.first()
|| {!
   |? {? _tabtmp.SYSTEM='PPK' & _user<>_tabtmp.USERS
      || _user:=_tabtmp.USERS;
         {? USERS.seek(_tabtmp.USERS)
         || exec('get_usersf','skid_usr');
            exec('put_usersf','skid_usr',,,,,'T');
            USERS.put()
         ?}
      ?};
      _tabtmp.next()
   !}
?};
USERS.cntx_pop();
1


\napraw_h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [21.37]
:: OPIS: Przygotowanie danych obszaru "PortalHR".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: czy mamy defa i fml'e
{? exec('is_por','aktp1251',1) & fexists('akt_121.fml', 1)
||
:: \*/ak_121.fml - Xpertis Portal HR
   {? exec('test_zui_l','ak_121')=1 || exec('exec_zui_l','ak_121') ?};
   {? exec('test_zui_g','ak_121')=1 || exec('exec_zui_g','ak_121') ?};
   {? exec('test_por_l','ak_121')=1 || exec('exec_por_l','ak_121') ?};
   {? exec('test_por_g','ak_121')=1 || exec('exec_por_g','ak_121') ?};
   {? exec('test_l','ak_121')=1 || exec('exec_l','ak_121') ?};
   {? exec('test_g','ak_121')=1 || exec('exec_g','ak_121') ?};

:: \*/ak_155.fml - Xpertis Portal HR
   {? exec('test_por_l','ak_152')=1 || exec('exec_por_l','ak_152') ?};
   {? exec('test_por_g','ak_152')=1 || exec('exec_por_g','ak_152') ?};

:: czy mamy napraw_h.fml
   {? fexists('napraw_h.fml', 1)
   ||
::    \por_01/napraw_h.fml - PR/WRT/XP/12.51/2107/0030 - Obługa nowego przycisku: Aplikacje->Dodatkowe
      {? exec('por_01','napraw_h',1)=1 || exec('por_01','napraw_h',0) ?};
::    \por_02/napraw_h.fml - ER/WRT/XP/12.51/2202/0048 - Brak danych podstawowych pracownika w portalu - w zależności
::                           od rodzaju umowy.
      {? exec('por_02','napraw_h',1)=1 || exec('por_02','napraw_h',0) ?};
::    \por_03_01/napraw_h.fml - ER/WRT/XP/12.51/2202/0068 Portal HR - poprawka zbiorcza (naprawa danych).
      {? exec('por_03_01','napraw_h',1)=1 || exec('por_03_01','napraw_h',0) ?};
::    \por_03_02/napraw_h.fml - ER/WRT/XP/12.51/2202/0068 Portal HR - poprawka zbiorcza (zadanie manualne).
      {? exec('por_03_02','napraw_h',1)=1 || exec('por_03_02','napraw_h',0) ?};
::    \por_04/napraw_h.fml - ER/WRT/XP/12.51/2202/0026 - Wniosek o zatrudnienie - stanowisko nie jest przypisane do
::                           wybranej jednostki organizacyjnej.
      {? exec('por_04','napraw_h',1)=1 || exec('por_04','napraw_h',0) ?};
::    \por_05_02/napraw_h.fml - ER/WRT/XP/21.37/2208/0028 : Benefity - synchronizacja załączników (naprawa danych w SYNC_ID).
::       Formuła naprawcza do wywołania w dowolnym module - jednofirmowa (wywoływana w każdej firmie).
      {? exec('por_05_02','napraw_h',1)=1 || exec('por_05_02','napraw_h',0) ?};
::    \por_05_01/napraw_h.fml - ER/WRT/XP/21.37/2208/0028 : Benefity - synchronizacja załączników (import komunikatów).
::       Formuła naprawcza do wywołania WYŁĄCZNIE w module ZUI - wielofirmowa (wywoływana tylko raz).
      {? exec('por_05_01','napraw_h',1)=1 || exec('por_05_01','napraw_h',0) ?};
::    \por_06/napraw_h.fml - ER/WRT/XP/12.51/2211/0058:
::       Kłopoty z typami / podtypami nieobecności (wysyłanie nieobecności i limitów / odbieranie wniosków urlopowych).
      {? exec('por_06','napraw_h',1)=1 || exec('por_06','napraw_h',0) ?};
::    \por_07*/napraw_h.fml - ER/WRT/XP/12.51/2209/0048: ER/WRT/XP/22.26/2209/0048 : Po aktualizacji AK/WRT/XP/22.26/2209/22.26_04
::       przestały działać definicje wniosków zawierające pola słownikowe (brak pozycji słowników).
::    Zostanie wykonane po stronie merit bo latwiej tam kontrolowac kolejnosc wykonania w kontekscie
::    lokalne, globalne

::    \por_08/napraw_h.fml - ER/WRT/XP/12.51/2209/0038: Błąd w synchronizacji po usunięciu pracownika.
::       Formuła naprawcza do wywołania WYŁĄCZNIE w module ZUI - wielofirmowa (wywoływana tylko raz).
      {? exec('por_08','napraw_h',1)=1 || exec('por_08','napraw_h',0) ?};
::    \por_09*/napraw_h.fml - ER/WRT/XP/12.51/2211/0059: Pusta lista nieobecności pracowników podwładnych + nieustanna synchronizacja
::       wniosków urlopowych (na podstawie ER/WRT/XP/22.26/2211/0056).
      {? exec('por_09_01','napraw_h',1)=1 || exec('por_09_01','napraw_h',0) ?};
      {? exec('por_09_02','napraw_h',1)=1 || exec('por_09_02','napraw_h',0) ?};
      {? exec('por_09_03','napraw_h',1)=1 || exec('por_09_03','napraw_h',0) ?};
      {? exec('por_09_zui','napraw_h',1)=1 || exec('por_09_zui','napraw_h',0) ?};
::    \por_10/napraw_h.fml - ER/WRT/XP/12.51/2210/0044: Możliwe pozostawienie na portalu rekordu usuniętego w ERP-ie
::       (na podstawie: ER/WRT/XP/22.26/2210/0072)
      {? exec('por_10','napraw_h',1)=1 || exec('por_10','napraw_h',0) ?};
::    \por_11/napraw_h.fml - ER/WRT/XP/12.51/2303/0032: Nieprawidłowo ustalana wartość pola __ModifiedDate_cloud dla komunikatów
::       chr_PersonWorkScheduleModify (na podstawie: ER/WRT/XP/22.26/2303/0006)
      {? exec('por_11','napraw_h',1)=1 || exec('por_11','napraw_h',0) ?};
::    \por_12/napraw_h.fml - ER/WRT/XP/12.51/2304/0040: Ponowne wysłanie majla rejestrującego Z Xpertis wyświetla nadmiarowy komunikat
::       Formuła globalna Xpertis.
      {? exec('por_12','napraw_h',1)=1 || exec('por_12','napraw_h',0) ?}
   ?}
?};
1


\prj2TRA
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [23.25]
:: OPIS: Przenosi dane z tabeli PROJEKTY do plików prj.tra
::----------------------------------------------------------------------------------------------------------------------
_fname:='prj.tra';
_sep:=';';

_file:={? fexists(_fname,1) || 0 || fopen(_fname,'w',1,1) ?};

{? _file
|| PROJEKTY.clear();
   {? PROJEKTY.first()
   || {!
      |? _war:=$PROJEKTY.NAZWA+_sep+
               $PROJEKTY.TYP+_sep+
               $PROJEKTY.STATUS+_sep;
         fwrite(_file,_war);
         PROJEKTY.next()
      !}
   ?}
?};
{? _file || fclose(_file) ?};
~~


\es_atrdefwd_help
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PBS [23.25]
:: OPIS: Formuła pomocnicza do eksportu danych tabeli ATRDEFWD
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - wartości domyślne cech, przygotowanie.','Trwa eksport danych',1);
ATRDEFWD.cntx_psh(); SROD.cntx_psh(); DOKU.cntx_psh();
VAR_DEL.delete('__DEFWDSROD');
__DEFWDSROD:=tab_tmp(,'REFSQL','STRING[16]','REFSQL',
                      'ID','INTEGER','ID',
                      'DOKUREF','STRING[16]','DOKUREF');
{? ATRDEFWD.first()
|| {! |?
      __DEFWDSROD.blank();
      {? 4+ATRDEFWD.MASKA='srod'
      || __DEFWDSROD.REFSQL:=$ATRDEFWD.ref();
         {? 8+ATRDEFWD.SQLREF=ATRDEFWD.MASKA
         || SROD.use(ATRDEFWD.MASKA); SROD.index('SRNI'); SROD.prefix();
            {? SROD.seek(ATRDEFWD.SQLREF)
            || __DEFWDSROD.ID:=SROD.ID;
               __DEFWDSROD.DOKUREF:='';
               __DEFWDSROD.add()
            ?}
         ?}
      |? 4+ATRDEFWD.MASKA='dokw'
      || __DEFWDSROD.REFSQL:=$ATRDEFWD.ref();
         DOKU.use(ATRDEFWD.MASKA); DOKU.index('DOKW'); DOKU.prefix();
         {? DOKU.seek(ATRDEFWD.SQLREF)
         || __DEFWDSROD.ID:=0;
            __DEFWDSROD.DOKUREF:=$DOKU.ref();
            __DEFWDSROD.add()
         ?}
      ?};
      ATRDEFWD.next()
   !}
?};
ATRDEFWD.cntx_pop(); SROD.cntx_pop(); DOKU.cntx_pop()


\es_atrdefwd_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PBS [23.25]
:: OPIS: Warości domyślne cech
::----------------------------------------------------------------------------------------------------------------------
progress(,'Środki trwałe - wartości domyślne cech, zapis.','Trwa eksport danych',1);
{? ~var_pres('__DEFWDSROD') || return() ?};
_symbol:=REF.FIRMA().SYMBOL;
_f:=fopen('atrdefwd_'+_symbol+'.tra','Uw',1);
{? _f
|| {? __DEFWDSROD.first()
   || {! |?
         _wiersz:=exec('es_w_atrdefwd','tran_exp');
         fwrite(_f,_wiersz);
         __DEFWDSROD.next()
      !};
      fclose(_f);
      &_f
   ?}
?}


\es_w_atrdefwd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PBS [23.25]
:: OPIS: Eksport tabeli ATRDEFWD dla środków trwałych - formuła pomocnicza
::----------------------------------------------------------------------------------------------------------------------
_s:='@';
_wiersz:=__DEFWDSROD.REFSQL+_s+$__DEFWDSROD.ID+_s+__DEFWDSROD.DOKUREF;
_wiersz


\edidef
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Eksport definicji EDI w formacie new xml
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fname:='edidef.tra';
_sep:=';';

{? var_pres('ISTXML')<>type_of(FIRMA) || return(~~) ?};

_file:={? fexists(_fname,1) || 0 || fopen(_fname,'w',1,1) ?};

{? _file
||
   ISTXML.cntx_psh();
   ISTDEF.cntx_psh();
   ISTDEF.index('K');
   ISTDEF.prefix();
   _loop:=ISTDEF.first();
   {!
   |? _loop
   |!
      {? ISTDEF.FORMAT='N'
      ||
         ISTXML.index('TREE');
         ISTXML.prefix(#ISTDEF.ref());
         {? ISTXML.first()
         ||
            _fname:='edidef_%1_%2'['xsd',form(ISTDEF.K,,,'99')];
            exec('def_exp','tran_exp',_fname,ISTDEF.ref(),'tra');
            _war:=$ISTDEF.ref()+_sep+_fname+_sep;
            fwrite(_file,_war)
         ?}
      ?};
      _loop:=ISTDEF.next()
   !};
   ISTDEF.cntx_pop();
   ISTXML.cntx_pop()
?};
{? _file || fclose(_file) ?};
~~


\def_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Definicja xml - eksportuj
::   WE: _a - file name
::       _b - ISTDEF.ref()
::       [_c] - ext
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fname:=_a;
EDI_Z.C:=_b;
_ext:={? var_pres('_c')=type_of('') || _c || 'dem' ?};

_wg_pth:=_fname<>'';
_file:='';

:: zakres importu
_choice:={? _wg_pth || 3 || 0 ?};
{? _wg_pth=0
||
   _fname:='edidef_%1_%2'['xsd',form(ISTDEF.K,,,'99')];
   ISTXML.cntx_psh();
   ISTXML.index('TREE');
   ISTXML.prefix(EDI_Z.C);
   {? ISTXML.first()
   || _choice:=FUN.choice('Należy wybrać zakres eksportu.'@,,'Struktura'@,'Formuły'@)
   ?};
   ISTXML.cntx_pop();
   {? ~_choice || return() ?};
   _fname:=
      {? _choice=1
      || myDIALOG.SaveFile('Pliki dem (*_xsd.dem)|*_xsd.dem','',_fname)
      |? _choice=2
      || myDIALOG.SaveFile('Pliki dem (*_form.dem)|*_form.dem','',_fname)
      || ''
      ?};
   {? _fname='' || return() ?};
:: usunięcie rozszerzenia
   _wsk:=0;
   {! _ii:=+_fname // -1..1
   |!
      {? _wsk=0 & (_ii+_fname+1)='.' || _wsk:=_ii ?}
   !};
   {? _wsk || _fname:=(_wsk-1)+_fname ?};
:: usunięcie przyrostka _xsd lub _form
   {? _choice=1
   || {? (_fname+4)='_xsd' || _fname-=4 ?}
   |? _choice=2
   || {? (_fname+5)='_form' || _fname-=5 ?}
   ?};
   {? _fname='' || return() ?}
?};
:: eksport struktury
{? _choice=3 | _choice=1
||
   {? _wg_pth=0 & _choice=1 & 1+_fname<>'@' || _fname:='@'+_fname ?};
   _file:='%1_xsd.%2'[_fname,_ext];
   {? _choice=1 & fexists(_file)
   || {? ~FUN.ask('Istnieje już plik:\n%1\nNadpisać zawartość pliku?'@[_file]) || return() ?}
   ?};
   _xsd:=fopen(_file,'uw!',_wg_pth,,1);
   {? ~_xsd.is_open()
   ||
      FUN.info(exec('msg','edison','ERR_FOPEN')+_file+'.');
      return(0)
   ?};
   _env:=obj_new('DEF','HASH','T','VAL','ID');
   _env.DEF:=EDI_Z.C;
:: #e z definicji
   _env.HASH:=exec('def_hash','edi_xml',_env.DEF,0,'',~~);
   _env.T:=exec('xml_t','edi_xml');
   _env.VAL:=~~;
   _env.ID:=_file;
   params_set('env',_env);
   _T:=_env.T;
:: eksport struktury
:: zapis w tabeli przejściowej
   {? exec('t_write','edi_xml','XSD',_env.DEF,0,_T,0,'',~~,~~)=1
   ||
:: zapis do pliku
      exec('xml_twrite','edi_xml',_xsd,_T,0,'',1)
   ?}
?};
:: eksport formuł
{? _choice=3 | _choice=2
||
   {? _wg_pth=0 & _choice=2 & 1+_fname<>'@' || _fname:='@'+_fname ?};
   _file:='%1_form.%2'[_fname,_ext];
   {? _choice=2 & fexists(_file)
   || {? ~FUN.ask('Istnieje już plik:\n%1\nNadpisać zawartość pliku?'@[_file]) || return() ?}
   ?};
   _form:=fopen(_file,'Uw',_wg_pth,,1);
   {? _form.is_open()
   ||
      ISTXML.cntx_psh();
      ISTXML.index('TREE');
      ISTXML.prefix(EDI_Z.C);
      _Hash:=exec('def_hash','edi_xml',EDI_Z.C,0,'',~~);
      _loop:=_Hash.first();
      {!
      |? _loop
      |!
         {? ISTXML.seek(_Hash.REF,)
         ||
            {? ISTXML.F_START<>'' || fwrite(_form,_Hash.HASH+'_f_start__'+ISTXML.F_START) ?};
            {? ISTXML.F_END<>'' || fwrite(_form,_Hash.HASH+'_f_end____'+ISTXML.F_END) ?};
            {? ISTXML.IS_FLD<>'' || fwrite(_form,_Hash.HASH+'_is_fld___'+ISTXML.IS_FLD) ?};
            {? ISTXML.F_TEXT<>'' || fwrite(_form,_Hash.HASH+'_f_text___'+ISTXML.F_TEXT) ?}
         ?};
         _loop:=_Hash.next()
      !};
      ISTXML.cntx_pop()
   ?}
?}


\edokum_firma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [23.25]
:: OPIS: Uzupełnia pole EDOKUM.FIRMA dla potrzeb aktualizacji ukrytych złączeń
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('FIRMA',EDOKUM)>0
|| EDOKUM.cntx_psh();
   _maski:=EDOKUM.names();
   {? _maski.first()
   || EDOKUM.trig_off('*','*');
      {!
      |? _firma:=null();
         EDOKUM.use(_maski.NAME); EDOKUM.prefix();
         {? EDOKUM.name()+2<>'__'
         || ROK_F.cntx_psh(); ROK_F.index('KODG'); ROK_F.prefix(EDOKUM.name()+2);
            {? ROK_F.first()
            || _firma:=ROK_F.FIRMA
            ?};
            ROK_F.cntx_pop()
         ?};
         {? _firma<>null() & EDOKUM.first()
         || {!
            |? {? EDOKUM.FIRMA=null() || EDOKUM.FIRMA:=_firma; EDOKUM.put() ?};
               EDOKUM.next()
            !}
         ?};
         _maski.next()
      !};
      EDOKUM.trig_on('*','*')
   ?};
   EDOKUM.cntx_pop()
?};
1


:Sign Version 2.0 jowisz:1045 2023/08/29 11:08:38 02f3861af7031bab034719185d5758d67170642709c0dda6ee4a341ee1775f376ba03eeef66997f0881e494e7ab5c8563bf151888b9decfa303721e5dae402a5a5b621d36aff485f0094428858a157e8807518596e5169deb37e7d698d06b0e2d40f638c54a66915edcd178fc62f7ee888417a5a62f4a58bbf44c30532d4e11f
