:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: upgrade.fml
:: Utworzony: 13.02.2017
:: Autor: [rr]
::======================================================================================================================
:: Zawartość:
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr][17.14]
:: OPIS: Główna formuła upgrade-ów
::----------------------------------------------------------------------------------------------------------------------
:: aktualizacja dziedzin produktowych
exec('add_domain','#b_action');
:: lista kolejnych wersji upgrade-ów
_ver:='1714.1728.1742.1802.1822.1842.1902.1922.1942.2014.2042.2114.2137.2226.2325';
:: aktualizacje
:: UWAGA: dopisywać chronologicznie wg daty emisji
:: 19.22_03 - wymagany split payment
{? var_pres('SP_WYM',MPKW)=27 || _ver+='.1922_03' ?};

:: 19.42_08 - PPK
{? var_pres('PPK_POD')=type_of(SYSLOG) || _ver+='.1942_08' ?};

:: 19.42_09 - BLP
{? var_pres('S_VAT',KH)=27 || _ver+='.1942_09' ?};

:: 19.42_04 - PIT 2020
{? var_pres('KOR_RODZ',VAT_DEK)>0 || _ver+='.1942_04' ?};

::19.42_03 - VAT-7 (20)
{? exec('exists','#window',VAT_DEK,'VAT75') || _ver+='.1942_03' ?};

:: 20.14_03 - Korekta CIT za złe długi
{? var_pres('SYSTEM',POMOC)>0 || _ver+='.2014_03' ?};

:: 20.14_01 - JPKV7
{? var_pres('JPK_GTU',DOK)>0 || _ver+='.2014_01' ?};

:: 20.14_11 - Wersje raportów PPK
{? exec('jest_a11','ppk') || _ver+='.2014_11' ?};

:: 20.14_07 - ZATORY
{? var_pres('WIELKOSC',XINFO)>0 || _ver+='.2014_07' ?};

:: 20.42_04 - Zasiłki oraz tabela H_STAT
{? var_pres('H_STAT',@)>0  || _ver+='.2042_04' ?};

:: 20.42_05 - PPK V
{? exec('jest_a05','ppk') || _ver+='.2042_05' ?};

:: 20.42_06 - Formularze PIT XI 2020 zmiana długości pola VAT_VER.WIERSZ z 80 na 120 znaków
{?  MS.fld_len(VAT_VER,'WIERSZ')=120 || _ver+='.2042_06' ?};

:: 20.42_07 - SLIM VAT
 _ver+='.2042_07';

:: 20.42_08 - Formularze PIT XII 2020 zmiana długości pola VAT_VER.WIERSZ z 80 na 120 znaków
{?  MS.fld_len(VAT_VER,'WIERSZ')=120 || _ver+='.2042_08' ?};

:: 20.42_02 - HR Portal
{? var_pres('WNIOSEK',BIPKAT)=26 || _ver+='.2042_02' ?};

:: 20.42_16 - Urzedy skarbowe
{? var_pres('US_JPK',KST)>0 || _ver+='.2042_16' ?};

:: 21.14_08 - Nowe obowiązki związane z pakietem e-commerce
_ver+='.2114_08';

:: 21.14_02 - Formularze PIT 2021
{? var_pres('PDOF1',VAT_DEK)>0 || _ver+='.2114_02' ?};

:: 21.14_07 - Uproszczenia JPK_V7
 _ver+='.2114_07';

:: 21.14_05 - HR Portal 2.0
{? var_pres('SAMOUCZ',BIPKAT)=27 || _ver+='.2114_05' ?};

:: 21.37_05 - VIU-DO
{? var_pres('B_VIUDO',FINFO)>0 || _ver+='.2137_05' ?};

:: 21.37_06 - EDP 2
{? var_pres('OSOBA',ZAOMEDA)=26 || _ver+='.2137_06' ?};

:: 21.37_02 - Polski Ład
{? var_pres('OS_ZWPOZ',@)>0 || _ver+='.2137_02' ?};

:: 21.37_09 - BDO - zmiany w obsłudze Kart ewidencji odpadów
{? var_pres('LOSS',KEOP)>0 || _ver+='.2137_09' ?};

:: 21.37_01 - Paperless HR
{? var_pres('HASH',EDOKUMZ)=27 || _ver+='.2137_01' ?};

:: 21.37_12 - Polski Ład
_ver+='.2137_12';

:: 21.37_08 - Nowa wersja JPK_V7 (2)
{? var_press('DATA_ZAP',VAT_PS) || _ver+='.2137_08' ?};

:: 21.37_13 - Polski Ład (etap II)
{? var_pres('P_NPOD',@)>0 || _ver+='.2137_13' ?};

:: 21.37_14 - KSeF
{? var_pres('BL_NAME',XINFO)>0 || _ver+='.2137_14' ?};

:: 21.37_11 - PIT 2022
{? var_pres('ZP152',VAT_POZ)>0 & var_pres('ZP153',VAT_POZ)>0 & var_pres('ZP154',VAT_POZ)>0 || _ver+='.2137_11' ?};

:: 21.37_20, 22.26_05 - Aktualizacja PPK VI
{? var_pres('POP_ZAW',KST_PPK)>0 || _ver+='.2137_20.2226_05' ?};

:: 22.26_04 - HR Portal wielofirmowy
{? var_pres('ID_ERP',PORTALU)>0 || _ver+='.2226_04' ?};

:: 22.26_09 - JPK_WB i JPK_KR dla całego roku
_ver+='.2226_09';

:: 22.26_15 - Faktury fiskalne
_ver+='.2226_15';

:: 22.26_06 - Polski Ład (styczeń 2023)
_ver+='.2226_06';

:: 22.26_pl001 - Polski Ład od 1 stycznia 2023
_ver+='.2226_pl001';

:: 22.26_fwob1 - Faktury walutowe
{? var_pres('DOK_VAT',ETYPY)>0 || _ver+='.2226_fwob1' ?};

:: 22.26_CIT01 - Formularz deklaracji CIT8(32) obowiązujący od 2023
{? var_pres('PAR12',VAT_DEK)>0 || _ver+='.2226_CIT01' ?};

:: 22.26_ksef1 - KSEF - korekty na pozycjach, BL azure, obsługa tokenów, inne
{? var_pres('KSEF_ERR',DOK)>0 || _ver+='.2226_ksef1' ?};

:: 22.26_PZD01 - Praca zdalna i kontrola trzeźwości (etap 1)
{? exec('is_pzd01','ppsf') || _ver+='.2226_pzd01' ?};

:: 22.26_RNU01 - Rozliczenie nowych urlopów
_ver+='.2226_rnu01';

:: 22.26_NRU1 - Nowe rodzaje urlopów
{? exec('upgrade2226_nru01','wnioski_urlopowe') || _ver+='.2226_nru01' ?};

:: 22.26_pzd02 - Praca zdalna i kontrola trzeźwości (etap 2)
{? exec('is_pzd02','ppsf') || _ver+='.2226_pzd02' ?};

:: 22.26_ZUS01 - Kody ZUS od 2023.08.05
_ver+='.2226_zus01';

:: 23.25_aku01 - Praca zdalna, Kontrola trzeźwości, Nowe rodzaje urlopów
{? exec('is_pzd02','ppsf') || _ver+='.2325_aku01' ?};

:: 23.25_ZUS01 - Kody ZUS od 2023.08.05
_ver+='.2325_zus01';

:: 23.25_KSEF2 - KSEF - implementacja struktur logicznych FA(2)
{? exec('upgrade2325_ksef2','zbl') || _ver+='.2325_ksef2' ?};

:: 22.26_PZD03 - Praca zdalna (HR Portal)
{? exec('is_pzd03','ppsf') || _ver+='.2226_pzd03' ?};

:: 22.26_NRU02 - Nowe rodzaje urlopów (HR Portal) [wystarczą zmiany z NRU01]
{? exec('upgrade2226_nru01','wnioski_urlopowe') || _ver+='.2226_nru02' ?};

:: 23.25_APO01 - Praca zdalna, Nowe rodzajue urlopów (HR Portal)
{? exec('is_pzd03','ppsf') || _ver+='.2325_apo01' ?};

:: 23.25_GVO01 - Ewidencja operacji wewnątrz grupy VAT
{? var_pres('J_GV_POZ')>0 || _ver+='.2325_gvo01' ?};

:: 23.25_BLBC1 - Integracja z usługą BusinessCheck
{? exec('upgrade2325_blbc1','zbl') || _ver+='.2325_blbc1' ?};

:: 23.25_PMO01 - Pakiet mobilności: ZUS i zaliczka na podatek dla kierowców.
_ver+='.2325_pmo01';

:: 23.25_PIT03 - Aktualizacja wzorów zeznań podatkowych PIT.
_ver+='.2325_pit03';

:: 23.25_HUB01 - Merit_HUB
{? var_pres('MERITHUB',DOK)>0 || _ver+='.2325_hub01' ?};

:: 23.25_JST01 - KSeF KSEF - Jednostki samorządu terytorialnego
{? exec('upgrade2325_jst01','zbl') || _ver+='.2325_jst01' ?};

:: 23.25_CIT01 - CIT-8 (33)
{? var_pres('VAT_DEKS')>0 || _ver+='.2325_cit01' ?};

:: Jeżeli wersja robocza to dopisujemy wersje z '.rrxx', jeśli nie to poniżej pusty string _work:='';
:: _work:='.rrxx';
_work:='';
_ver+=_work;
:: korekta aktualizacji z dużymi literami
exec('corUP2LOW','upgrade');
:: uwzględnia dodatkowo wersje zadań wdrożeniowych
_ver:=exec('splitVER','#upgrade',_ver);

_tabver:=spli_str(_ver,'.');
_len:=obj_len(_tabver);
_version:=exec('getVersion','#upgrade');
_aktver:=gsub(exec('verINFiles','#upgrade'),'.','');
_startver:='';
:: transfer skokowy z systemu Xpertis
{? (5+_version)='12.41'
||
:: ustalenie wersji transferu skokowego - pierwszy transfer skokowy zaimplementowano w wersji 18.42
   _startver:={? (+_version)=11 || (2+(6-_version))+(_version+2) || '1842' ?};
   __UPG.add_head('upgrade_1700');
   __UPG.add_head('upgradexpertis',_startver,_aktver<>_startver);
   {? _startver='1842' || _startver:='1843' ?}
?};
{! _i.._len
|! {? _startver='' | _startver<=_tabver[_i]
   || {? (1+_tabver[_i])='q'
      || __UPG.add_head('qupgrade%1'[1-_tabver[_i]],,,1)
      |? (1+_tabver[_i])='Q'
      || __UPG.add_head('qupgrade%1'[1-_tabver[_i]],,,-1)
      || __UPG.add_head('upgrade_%1'[_tabver[_i]])
      ?}
   ?}
!};
:: wyłączenie zadań
__UPG.act_off();
obj_del(_tabver);
~~


\roleActions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przypisuje czynności do ról.
::   WE: _a STRING - lista nazw ról oddzielonych przecinkami
::       _b STRING - lista kodów czynności oddzielonych przecinkami
::   WY: 1 - pełen sukces, 0 - wystąpił jakikolwiek problem
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | _a=''
|| __UPG.msg('Błędny argument _a formuły roleActions w pliku upgrade.fml.');
   __UPG.msg('Wymagana lista nazw ról oddzielonych przecinkami.');
   return(-1)
|? var_pres('_b')<>type_of('') | _b=''
|| __UPG.msg('Błędny argument _b formuły roleActions w pliku upgrade.fml');
   __UPG.msg('Wymagana lista kodów czynności oddzielonych przecinkami.');
   return(-1)
?};

:: role
_role:=spli_str(_a,',');

:: weryfikacja istnienia czynności
_act_sym:=spli_str(_b,',');
_act_cnt:=obj_len(_act_sym);
_act_ref:=obj_new(_act_cnt);
{! _ii:=1.._act_cnt
|! {? (_act_ref[_ii]:=exec('ref','#b_action',_act_sym[_ii]))=null
   || __UPG.msg('Nie znaleziono czynności "%1".'[_act_sym[_ii]])
   ?}
!};

:: przypisz czynności do ról
_status:=1;
{! _ni:=1..obj_len(_role)
|! _ref:=exec('ref','#b_role',_role[_ni]);
   {? _ref<>null()
   || __UPG.msg('Rola "%1" już istnieje.' [_role[_ni]])
   |? (_ref:=exec('ref','#b_role',_role[_ni],,1))<>null()
   || __UPG.msg('Rola "%1" została utworzona.' [_role[_ni]])
   ?};
   {? _ref=null()
   || __UPG.msg('Utworzenie roli "%1" nie powiodło się.'[_role[_ni]])
   || {! _mi:=1.._act_cnt
      |! {? _act_ref[_mi]<>null
         || {? exec('add_actrol_one','#b_role',_role[_ni],_act_sym[_mi])
            || __UPG.msg('Roli "%1" nadano uprawnienia do czynności "%2".'[_role[_ni],_act_sym[_mi]])
            || __UPG.msg('Nadanie roli "%1" uprawnień do czynności "%2" nie powiodło się.'[_role[_ni],_act_sym[_mi]]);
               _status:=0
            ?}
         ?}
      !}
   ?}
!};
_status


\actionRoleAction
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
::   WE: [_a] - czynność, której trzeba znaleźć role
::       [_b] - lista czynności, wg których znajduje się role
:: OPIS: Formuła dodaje czynność [_a] do ról, które mają jakąś czynność z listy [_b]
::----------------------------------------------------------------------------------------------------------------------
{? _<2 | _a='' | _b=''
|| return(0)
 ?};
_uid:=_a;
_cr:=_b;

_ROLE:=sql(
   'select distinct B_ROLE.NAME '
   'from B_ACTROL join B_ACTION using (B_ACTROL.B_ACTION,B_ACTION.REFERENCE) '
                 'join B_ROLE using (B_ACTROL.B_ROLE,B_ROLE.REFERENCE) '
   'where B_ACTROL.FIRMA=:_a and B_ACTION.UID in (:_b) '
   'order by 1',
   exec('ref_firma','ustawienia'),_cr
);

{? type_of(_ROLE)=type_of(~~)
|| __UPG.msg('Przygotowanie listy ról, do których należy dodać czynność %1 nie powiodło się.' [_uid]);
   return(0)
?};

{? _ROLE.first()
|| _ret:=1;
   {!
   |? {? exec('add_actrol_one','#b_role',_ROLE.NAME,_uid)
      || __UPG.msg('Czynność %1 przypisano do roli "%2".'[_uid,_ROLE.NAME])
      || __UPG.msg('Przypisanie czynności %1 do roli "%2" nie powiodło się.'[_uid,_ROLE.NAME]);
         _ret:=-1
      ?};
      _ROLE.next()
   !};
   _ret
|| __UPG.msg('W firmie %1 brak ról z uprawnieniami do czynności %2.'[REF.FIRMA().SYMBOL,_cr]);
   1
?}


\roleActionsDel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Usuwa czynności z ról (odebranie uprawnień).
::   WE: _a STRING - lista nazw ról oddzielonych przecinkami
::       _b STRING - lista kodów czynności oddzielonych przecinkami
::   WY: 1 - pełen sukces, 0 - wystąpił jakikolwiek problem
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | _a=''
|| __UPG.msg('Błędny argument _a formuły roleActionsDel w pliku upgrade.fml.');
   __UPG.msg('Wymagana lista nazw ról oddzielonych przecinkami.');
   return(-1)
|? var_pres('_b')<>type_of('') | _b=''
|| __UPG.msg('Błędny argument _b formuły roleActionsDel w pliku upgrade.fml');
   __UPG.msg('Wymagana lista kodów czynności oddzielonych przecinkami.');
   return(-1)
?};

:: role
_role:=spli_str(_a,',');

:: weryfikacja istnienia czynności
_act_sym:=spli_str(_b,',');
_act_cnt:=obj_len(_act_sym);
_act_ref:=obj_new(_act_cnt);
{! _ii:=1.._act_cnt
|! {? (_act_ref[_ii]:=exec('ref','#b_action',_act_sym[_ii]))=null
   || __UPG.msg('Nie znaleziono czynności "%1".'[_act_sym[_ii]])
   ?}
!};

:: przypisz czynności do ról
_status:=1;
{! _ni:=1..obj_len(_role)
|! {? exec('ref','#b_role',_role[_ni])=null()
   || __UPG.msg('Nie znaleziono roli "%1".'[_role[_ni]])
   || {! _mi:=1.._act_cnt
      |! {? _act_ref[_mi]<>null
         || _exec:=exec('del_actrol_one','#b_role',_role[_ni],_act_sym[_mi]);
            {? _exec=1
            || __UPG.msg('Roli "%1" odebrano uprawnienia do czynności "%2".'[_role[_ni],_act_sym[_mi]])
            |? _exec=0
            || __UPG.msg('Odebranie roli "%1" uprawnień do czynności "%2" nie powiodło się.'[_role[_ni],_act_sym[_mi]]);
               _status:=0
            ?}
         ?}
      !}
   ?}
!};
_status


\procesy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH & TMR [22.26]
:: OPIS: Import procesów
::   WE:  _a [STRING] - wersja importowanych procesów np '22.26'
::       [_b][STRING] - lista symboli procesów do sprawdzenia oddzielona przecinkami
::                       (zakładamy, że symbole należą do tej samej dziedziny i są zgodne z parametrem _c)
::       [_c][STRING] - prefix importowanych symboli
::       [_d][NUMBER] - czy prefiksować wersją procesu okno importu? (0 - nie / [1] - tak)
::       [_e][NUMBER] - czy dezaktywować stare procesy? (0 - nie / [1] - tak)
::       [_f][NUMBER] - czy pytać o zakończenie zadania? (0 - nie / [1] - tak)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wersja:='';
{? var_pres('_a')=type_of('')
|| _wersja:=_a
?};
{? _wersja=''
|| FUN.emsg('Aby zaimportować procesy konieczne jest podanie wersji.'@)
?};

   _proc_sym:={? var_pres('_b')=type_of('') || _b || '' ?};
 _prefix_sym:={? var_pres('_c')=type_of('') || _c || '' ?};
_isPrefixVer:={? var_pres('_d')=type_of(0)  || _d || 1  ?};
   _deactive:={? var_pres('_e')=type_of(0)  || _e || 1  ?};
        _ask:={? var_pres('_f')=type_of(0)  || _f || 1  ?};

_PROC:=tab_tmp(,
   'SYMBOL','STRING[100]','Symbol procesu'
);

_list:=spli_str(_proc_sym,',');

{! _ind:=1 .. obj_len(_list)
|! {? +_list[_ind]
   || _PROC.SYMBOL:=_list[_ind];
      _PROC.add()
   ?}
!};


_can_continue:=1;
_result:=-1;
{? exec('interm','#system')>0
|| FUN.emsg(exec('interm_nacc_msg','#system'))
||
   B_PROC.cntx_psh();
   B_PROC.index('AKT');
   {? B_PROC.f_active() || B_PROC.f_clear() ?};
   B_PROC.f_set(,,'B_PROC.MICRO=\'N\' and B_PROC.ACTIVE=\'T\' and B_PROC.FIRMA=:_a and '
                  'B_PROC.SYMBOL in (select :_b.SYMBOL from :_b) and B_PROC.VER<\':_c\''
                  ,REF.FIRMA,_PROC,_wersja);

   _break:=0;
   {? _deactive & B_PROC.f_first()
   ||
      {!
      |?
         _choice:=FUN.choice('Znaleziono aktywne procesy %1* w wersji wcześniejszej niż %2 wymagające dezaktywacji.'
                             [_prefix_sym,_wersja],,'Wyświetl procesy'@,'Pomiń ten krok'@);
         {? _choice=0
         || _can_continue:=0;
            _break:=1
         |? _choice=1
         ||
            _title:='Procesy: %1*'@[_prefix_sym];
            _wid:='#rpobrksel';

            _wer:=B_PROC.mk_sel(_title,'P',0,_wid,1,1,,,'U');

            B_PROC.win_fld(_wer,,'SYMBOL',,,20,,,'Symbol'@,0);
            B_PROC.win_fld(_wer,,'VER',,,20,,,'Wersja'@,0);
            _formula:="
               exec('set_active','#b_proc',,'N');
               ~~
            ";
            B_PROC.win_act(_wer,0,'Formuła','&Dezaktywuj'@@,,,_formula,,1,,,,'U');
            B_PROC.win_btn(_wer,'text=%1,panel=right,align=begin'['Dezaktywuj'@],'menu:U');
            B_PROC.win_act(_wer,,'Kolejność');
            B_PROC.win_sel(_wer);
            B_PROC.select()
         |? _choice=2
         || _break:=1
         ?};
         B_PROC.f_set(,,'B_PROC.MICRO=\'N\' and B_PROC.ACTIVE=\'T\' and B_PROC.FIRMA=:_a and '
                  'B_PROC.SYMBOL in (select :_b.SYMBOL from :_b) and B_PROC.VER<=\':_c\''
                  ,REF.FIRMA,_PROC,_wersja);
         B_PROC.f_first() & _break=0
      !}
   ?};
   {? B_PROC.f_active() || B_PROC.f_clear() ?};
   B_PROC.cntx_pop();

   _break:=0;
   {!
   |?
      _choice:=FUN.choice('Wymagany import procesów: %1 w wersji równej lub wyższej: %2.'@[_prefix_sym,_wersja],,
                          'Importuj...'@,'Pomiń ten krok'@);
      {? _choice=0
      || _can_continue:=0;
         _break:=1
      |? _choice=1
      || _env_imex:=exec('env_imex','#b_export');
         _env_imex.PREFIX_SYM:=_prefix_sym;
         {? _isPrefixVer
         || _env_imex.PREFIX_VER:=_wersja
         ?};
         _env:=exec('env','#b_design');
         params_set('env_imex',_env_imex,'env',_env);
         B_PROC.cntx_psh();
         exec('import_group_prepare2','#b_export');
         B_PROC.cntx_pop();
         _break:=1;
         ~~
      |? _choice=2
      || _break:=1
      ?};
      _break=0
   !};
   ~~
?};

{? _can_continue>0
|| _can_continue:={? _ask
                  || FUN.ask('Czy wszystkie kroki zostały wykonane prawidłowo i zakończyć zadanie?'@)
                  || _choice=1
                  ?}
?};

{? _can_continue>0
|| _result:=1
?};
_result


\excel_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Import parametryzacji przez Excel
::   WE: _a - STRING - identyfikatory importów lub nazwy plików które zaimportować separowane przecinkiem np.
::                     'B_ROLE,USERS,magazyn.xlsx,TER'
::       _b - INTEGER - wskazany tryb importu: 1 - nadpisuj istniejace, 0 - dodaj brakujace
::   WY: 0 - porażka
::       1 - sukces
::       -1 - użytkownik zrezygnował
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_lista:=_a;
_mode:=_b;
_result:=exec('import_init','#excel_imex',,,_mode,,,,_lista);
::exec('export_init','#excel_imex',,,,,,_lista);
_result


\corUP2LOW
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Koryguje zapisy dużymi literami na małe
::----------------------------------------------------------------------------------------------------------------------
UPG_HEAD.cntx_psh();
UPG_HEAD.prefix();
UPG_HEAD.for_each("{? (UPG_HEAD.SYMBOL+6)='_FWOB1'
                   || UPG_HEAD.SYMBOL:=gsub(UPG_HEAD.SYMBOL,'_FWOB1','_fwob1');
                      UPG_HEAD.VERSION:=gsub(UPG_HEAD.VERSION,'_FWOB1','_fwob1');
                      UPG_HEAD.put(1)
                   |? (UPG_HEAD.SYMBOL+6)='_PL001'
                   || UPG_HEAD.SYMBOL:=gsub(UPG_HEAD.SYMBOL,'_PL001','_pl001');
                      UPG_HEAD.VERSION:=gsub(UPG_HEAD.VERSION,'_PL001','_pl001');
                      UPG_HEAD.put(1)
                   ?}",0);
UPG_HEAD.cntx_pop();
UPG_TASK.cntx_psh();
UPG_TASK.prefix();
UPG_TASK.for_each("{? (UPG_TASK.FORM+8)='_FWOB1'')'
                   || UPG_TASK.FORM:=gsub(UPG_TASK.FORM,'_FWOB1'')','_fwob1'')');
                      UPG_TASK.SYSTEM:=gsub(UPG_TASK.SYSTEM,'_FWOB1','_fwob1');
                      UPG_TASK.put(1)
                   |? (UPG_TASK.FORM+8)='_PL001'')'
                   || UPG_TASK.FORM:=gsub(UPG_TASK.FORM,'_PL001'')','_pl001'')');
                      UPG_TASK.SYSTEM:=gsub(UPG_TASK.SYSTEM,'_PL001','_pl001');
                      UPG_TASK.put(1)
                   ?}",0);
UPG_TASK.cntx_pop();
~~

:Sign Version 2.0 jowisz:1045 2024/02/20 12:44:29 b6029b287b4d84d8e638dfa818c1370700dd29e30afaf537767cddc4f28ea12c25ffe2ab60b5ba4d6882d45b9cc0a0c820eb33ebd995c2d12bb9acf690db1a225dacdcd98ed0c7be5e5561f16d00e02df894cb84c427dccd7c5ea58ccbaba79623627e2e0a9e6d8618cd8bbdf5ef1621639139eee4af2720f2a17099fc6641c0
