:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: transfer.fml
:: Utworzony: 13.11.2014
:: Autor: MB
::======================================================================================================================
:: Zawartość: Funkcje do obsługi transferu danych z wersji 12.41
::======================================================================================================================

\start
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Tworzy menu z wyborem formuł wykorzystywanych podczas zmiany Xpertis na Merit.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
popup(1,'Aktualizacja i import danych',
   'Aktualizacja danych - w konfiguracji "jedna firma"',,"exec('transfer_jf','transfer')",
   '--',,"~~",
   'Import uprawnień do elementów schematów danych',,"exec('import','ud_upr_i')",
   'Import ról użytkowników',,"exec('import','tran_upr')",
   'Aktualizacja uprawnień użytkowników do form współpracy',,"exec('users_fz','transfer')",
   '--',,"~~",
   'Przygotowanie skryptów kopiujących pliki danych',,"exec('start','tran_cp')"
);
~~


\transfer_jf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uruchamia wszystkie formuły transferujace - dla wersji jednofirmowej
::----------------------------------------------------------------------------------------------------------------------
exec('transfer_all','transfer');
exec('transfer','transfer');
exec('start_wal','tran_vla');
~~


\transfer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uruchamia wszystkie formuły transferujace - dla konkretnych firm - wielokrotnie
::----------------------------------------------------------------------------------------------------------------------
exec('user','transfer',2);

exec('firma_p','transfer',0);

exec('rap_zew','transfer');
exec('AFORM','transfer');
exec('KFORM','transfer');
exec('TKTL','transfer');
exec('TMAT','transfer',TMAT);
exec('TMAT','transfer',TCHMAT);
exec('ZL','transfer');
exec('TTOPER','transfer');
exec('PL_OPER','transfer');
exec('PX_NAST','transfer');
exec('PX_STAGE','transfer');
exec('PX_WYK','transfer');
exec('ZGP','transfer');
exec('ZLIM','transfer');
exec('TOPER','transfer');
exec('BADSEH','transfer');
exec('BADH','transfer');
exec('ZLGD','transfer');
exec('ZLGB','transfer');
exec('PROD_REJ','transfer');
exec('PL_WYK','transfer');
exec('KPOZK','transfer');
exec('ANZP','transfer');
exec('ZWAR','transfer');
exec('NASZGP','transfer');
exec('ZGH','transfer');
exec('KAP','transfer');
exec('ZLZAM','transfer');
exec('warlog_fml','transfer');
::exec('ud_his','transfer');
exec('giodo','transfer');
exec('NRDOK','transfer');
:: UWAGA - zadania p,h,h2n muszą być wykonane w tym miejscu mimo że tabele są globalne
exec('p','transfer');
exec('h','transfer');
exec('h2n','transfer');
exec('h_um_h','transfer');
exec('is_wypl','transfer');
exec('graktzat','transfer');
exec('pit12o_zalacz','transfer');
exec('tzl','transfer');
exec('jpk','transfer',1);
exec('vat_dek_rokf','transfer');
exec('logiSTAT_REJ','transfer');
exec('slowniki','transfer');
exec('okr_firma','transfer');
exec('okr_add','transfer');
exec('faks_pola','transfer');
exec('nd_pola','transfer');
exec('dok_pola','transfer');
exec('fiks_23','transfer');
exec('fiks_24','transfer');
exec('fiks_28','transfer');
exec('fiks_33','transfer');
exec('sym_zew','transfer',2);
exec('trn_vat_ps','transfer');
exec('kasa_ident2','transfer');
exec('vat_sr','transfer');
exec('zal_pobh','transfer');
exec('add_pwn','transfer');
exec('pop_pwn','transfer');
exec('es_import','transfer');
exec('ktrwn','transfer');
exec('POZPG','transfer1');
exec('NORMWSP','transfer1');
exec('KARO','transfer1');
exec('POLWO','transfer1');
exec('PWOPOZ','transfer1');
exec('OSNODZ','transfer1');
exec('ODZAM','transfer1');
exec('ODZAMPT','transfer1');
exec('szk','transfer1');
exec('kwaldost','transfer1');
exec('fst_set_p','transfer1');
exec('dok_jpk_fix','transfer1');
exec('prtfis','transfer1');

:: Formuły przeniesione z \transfer_all, które powinny być wykonane wielokrotnie dla każdej firmy
exec('za_test','transfer1');
exec('zalacz','transfer');
exec('edidef','transfer1');

:: Formuły wykonywane po uzupełnieniu pola FIRMA
:: Formuły przeniesione do \transfer_all/transfer.fml
~~


\transfer_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uruchamia wszystkie formuły transferujace - dla wszystkich firm - jednokrotnie
::  ORG: \PRC_stale/upgrade_1802.fml
::UWAGA: Formuła nie powinna być uruchamiana wielokrotnie!
::----------------------------------------------------------------------------------------------------------------------
exec('init_wer','#stalesys');

::  ORG: \PRC_stale/upgrade_1802.fml
::  Uzupełnienie widoku stałych systemu
:: TODO - przyjrzeć się mechanizmowi stałych systemu (konfiguracja, historia).
::exec('imp_def','#stalesys');
::

exec('trn_rs','transfer');
exec('i_users','transfer');
exec('user','transfer',1);
exec('userHTML','transfer');

exec('zm_param','transfer1');
exec('KP','transfer1');
exec('formula_formula','transfer');
exec('formula_g','transfer');
exec('an','transfer');
exec('dok','transfer');
exec('edek','transfer');
exec('atrdef','transfer');
exec('kom','transfer');
exec('k__poz','transfer');
exec('par_nag','transfer');
exec('ser_nag','transfer');
exec('defa','transfer');
exec('vatdekrodz','transfer');
exec('okr','transfer');
exec('params_upd','transfer1');
exec('params_del','transfer');
exec('params_set','transfer');
exec('jpk','transfer',0);
exec('udt','transfer');
exec('k_harm_w','transfer');
exec('con_rodf','transfer');
exec('k_role','transfer');
exec('formula','transfer');
exec('ezal','transfer');
exec('ezalpoz','transfer');
exec('color_trn','transfer');
exec('auto_fml','transfer');
exec('dek_fml','transfer');
exec('kor_zb','transfer');
exec('slo_zalpoz','transfer');
exec('usersdep','transfer');
exec('k_podwer','transfer');
exec('k_harm_h','transfer');
exec('k_rap_u','transfer');
exec('k_role_u','transfer');
exec('k_raport','transfer');
exec('k_harm_p','transfer');
exec('sym_zew','transfer',1);
exec('modeler','transfer');
exec('etypy_podz','transfer');
exec('obiegi_01','transfer');
exec('obiegi_02','transfer');
exec('obiegi_03','transfer');
exec('obiegi_04','transfer');
exec('fiks_01','transfer');
exec('fiks_02','transfer');
exec('fiks_04','transfer');
exec('fiks_05','transfer');
exec('fiks_06','transfer');
exec('fiks_07','transfer');
exec('fiks_08','transfer');
exec('fiks_09','transfer');
exec('fiks_15','transfer');
exec('fiks_16','transfer');
exec('fiks_17','transfer');
exec('fiks_18','transfer');
exec('fiks_20','transfer');
exec('fiks_21','transfer');
exec('fiks_22','transfer');
exec('fiks_25','transfer');
exec('fiks_26','transfer');
exec('fiks_26a','transfer');
exec('fiks_29','transfer');
exec('fiks_30','transfer');
exec('fiks_31','transfer');
exec('fiks_32','transfer');
exec('fiks_34','transfer');
exec('fiks_35','transfer');
exec('fiks_36','transfer');
exec('fiks_37','transfer');
exec('dok_rej','transfer');
exec('fiks_39','transfer');
exec('fiks_40','transfer');
exec('fiks_41','transfer');
exec('fiks_42','transfer');
exec('fiks_44','transfer');
exec('fiks_45','transfer1');
exec('fiks_46','transfer1');
exec('fiks_47','transfer1');
exec('fiks_48','transfer1');
exec('fiks_49','transfer1');
exec('fiks_50','transfer1');
exec('fiks_51','transfer1');
exec('fiks_52','transfer1');
exec('fiks_53','transfer1');
exec('fiks_54','transfer1');
exec('fiks_55','transfer1');
exec('fiks_56','transfer1');
exec('fiks_59','transfer1');
exec('fiks_60','transfer1');
exec('fiks_61','transfer1');
exec('fiks_62','transfer1');
exec('fiks_63','transfer1');
exec('fiks_64','transfer1');
exec('fiks_65','transfer1');
exec('fiks_67','transfer1');
exec('fiks_68','transfer1');
exec('fiks_69','transfer1');
exec('fiks_70','transfer1');
exec('fiks_71','transfer1');
exec('fiks_72','transfer1');
exec('fiks_73','transfer1');
exec('fiks_74','transfer1');
exec('fiks_75','transfer1');
exec('fiks_76','transfer1');
exec('fiks_77','transfer1');
exec('fiks_78','transfer1');
exec('fiks_79','transfer1');
exec('fiks_80','transfer1');
exec('hb_01','transfer');
exec('control_02','transfer');
exec('control_03','transfer');
exec('vat_sr','transfer');
exec('edokum','transfer');
exec('es_g_import','transfer');
exec('ma_fin_bil','transfer');
exec('ma_lin','transfer');
exec('es_metody','transfer');
exec('r_kdx','transfer');
exec('r_imp','transfer');
exec('r_sys_std','transfer1');
exec('rubatr','transfer');
exec('dek_nag','transfer1');
exec('dek_poz','transfer1');
exec('dek_nag_sys','transfer1');
exec('SLO_platn','transfer1');
exec('edimp','transfer');
:exec('za_test','transfer1');
exec('napraw_walut','transfer1');
exec('alg_par_wyl','transfer1');
exec('formula_popraw','transfer1');
exec('slo_rodz','transfer1');
exec('os_us','transfer1');
exec('add_ire','transfer1');
exec('upd_poz_wal','transfer1');
exec('espr_i_podat','transfer1');
exec('etypy_atr_g1r','transfer1');
exec('fiks_81','transfer1');
exec('fiks_82','transfer1');
exec('nbp_spec_imp','transfer1');

:: Formuły przeniesione z \transfer, które powinny być wykonane tylko raz dla wszystkich firm
:: Zadanie 12.51_177 Transfer wielofirmowy
exec('firma_p','transfer',1);
exec('fun_wer_sys','#stalesys');
exec('konta_przelewowe','transfer',R);
exec('konta_przelewowe','transfer',RG);
exec('M','transfer');
exec('stn','transfer');
exec('p_info_bl_kc','transfer');
exec('kart_def_std','transfer');
exec('rd','transfer');
exec('ud_sch','transfer');
exec('ud_def','transfer');
exec('f_zatr','transfer');
exec('kal_def_gr','transfer');
exec('osoba','transfer');
exec('zc','transfer');
exec('o_p','transfer');
exec('ds','transfer');
exec('os_pab_zalacz','transfer');
exec('psto_ud_skl','transfer');
exec('n','transfer');
exec('par_pokr_r_rx','transfer');
exec('kom_os_splata','transfer');
exec('umlojn','transfer');
exec('url_wnio','transfer');
exec('fiks_03','transfer');
exec('fiks_43','transfer');
exec('control_04','transfer');
exec('RODZO','transfer');
exec('ezal_numer','transfer1');
exec('update_np_dok','transfer1');
exec('zz_kryt','transfer1');
exec('staz','transfer1');

:: Formuły wymagane do uruchomienia po uzupełnieniu pola FIRMA
exec('napraw_p_akt_24','transfer');
exec('rh_fill','transfer1');
::exec('napraw_p_akt_26','transfer'); Zakładamy, że klienci mają jednak aktualne wzorce e-Deklaracji.
::exec('napraw_p_akt_32','transfer'); - zostaje zastąpione przez \h_um_fill
exec('h_um_fill','transfer1');
exec('r_marg','transfer1');

~~


\i_users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.14]
:: OPIS: Formuła importuje dane użytkowników wyłącznie portalowych (z tabeli I_USERS).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fn:='i_users.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_TAB:=tab_tmp(1,
   'LOGIN','STRING[100]','WebLogin',
   'OSOBA','STRING[16]','Wskazanie OSOBA',
   'KH','STRING[16]','Wskazanie KH'
);

_TAB.import(_fn,1,1,,,,
   'LOGIN',,1,,
   'OSOBA',,2,,
   'KH',,3,
);
{? ~_TAB.first()
|| return()
?};

KH.cntx_psh();
KH.prefix();
OSOBA.cntx_psh();
OSOBA.prefix();
USERS.cntx_psh();
USERS.index('WEBLOGIN');
USERS.prefix();

_step:=0;
_size:=_TAB.size();
{!
|? _step+=1;
   progress(100*_step/_size,'Import użytkowników internetowych:\n%1'@ [_TAB.LOGIN],FUN.TYT);
   {? USERS.find_key(_TAB.LOGIN,)
   || _put:=0;
      {? USERS.OSOBA=null() & _TAB.OSOBA<>'' & OSOBA.seek(_TAB.OSOBA)
      || USERS.OSOBA:=OSOBA.ref();
         _put+=1
      ?};
      {? USERS.KH=null() & _TAB.KH<>'' & KH.seek(_TAB.KH)
      || USERS.KH:=KH.ref();
         _put+=1
      ?};
      {? _put
      || USERS.put()
      ?}
   ?};
   _TAB.next()
!};
prgs_clr();

USERS.cntx_pop();
OSOBA.cntx_pop();
KH.cntx_pop();

1


\user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uruchamia wszystkie formuły transferujace tabele USERS
::   WE: _a - w firmach 1-jednokrotnie 2-wielokrotnie
::----------------------------------------------------------------------------------------------------------------------
{? _a=2
|| exec('i_log','transfer')
|? _a=1
|| exec('k_harm_u','transfer')
?}


\i_log
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uruchamia formuły transferujace tabele I_USER
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
_kod:={? REF.WFIRM || REF.FIRMA().SYMBOL || '' ?};
FIRMA.cntx_pop();
_fn:='i_log'+_kod+'.tra';
{? ~fexists(_fn,1)
|| _files:=files('i_log???.tra');
   _size:=_files.size();
   obj_del(_files);
   {? ~_size || FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]) ?};
   return(0)
?};
_f:=fopen(_fn,'r',1);
{? _f
|| USERS.index('WEBLOGIN'); USERS.prefix();
   I_LOG.prefix();
   {? (_line:=fread(_f))<>'\n'
   || {? _line<>''
      || _tab:=spli_str(_line,'@');
         {? obj_len(_tab)=2 & #_tab[1]<>0 & #_tab[2]<>0 & USERS.find_key(_tab[1],) & I_LOG.seek(#_tab[2],)
         || I_LOG.USERS:=USERS.ref();
            I_LOG.put()
         ?};
         &_tab
      ?};
      1
   ?};
   fclose(_f)
?}


\k_harm_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uruchamia formuły transferujace tabele K_HARM_U
::----------------------------------------------------------------------------------------------------------------------
_fn:='k_harm_u.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};
_f:=fopen(_fn,'r',1);
{? _f
|| USERS.index('WEBLOGIN'); USERS.prefix();
   K_HARM_U.prefix();
   {? (_line:=fread(_f))<>'\n'
   || {? _line<>''
      || _tab:=spli_str(_line,'@');
         {? obj_len(_tab)=2 & #_tab[1]<>0 & #_tab[2]<>0 & USERS.find_key(_tab[1],) & K_HARM_P.seek(#_tab[2],)
         || K_HARM_U.USERS:=USERS.ref();
            K_HARM_U.K_HARM_P:=K_HARM_P.ref();
            K_HARM_U.add(1)
         ?};
         &_tab
      ?};
      1
   ?};
   fclose(_f)
?}


\r_kdx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
::  MOD: ARTSLO [20.42]
:: OPIS: Uzupełnienie nowych pól w tabeli R na podstawie pliku eksportu z Xpertis. Reszta przeniesiona do
::       \r_sys_std/transfer1.fml w wyniku poprawki ER/WRT/XP/20.42/2104/0037
::  ORG: \r/upgrade_1902.fml
::----------------------------------------------------------------------------------------------------------------------
:: Weryfikujemy, czy mamy licencję na PPL.
:: Po stronie Xpertis zakładamy, że parametr 7 jest ustawiony na wartość 'N' przez co pomijamy zadania naprawcze.
{? ~exec('lic','#b_domain','PPL')
|| return(~~)
?};

_msg:="{? var_pres('__kom')=var_pres('JCQ',@.CLASS) || exec('add_kom','#message',_a,4,'rkdx') || FUN.info(_a) ?}";

_fn:='r_kd.tra';
_fnl:=pth_dir(_fn)+{? sys_name(0)='U_LINUX' || '/' || '\\' ?}+_fn;
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fnl]);
   return(0)
?};

_src:=tab_tmp(1,'RN','INTEGER','Kod','KD','STRING[1]','Wydruk');

{? ~_src.import(_fn,,,%1+';','UTF-8,pth,header',,'RN',,1,,'KD',,2,)
|| _msg('Import pliku %1 nie powiódł się. Procedurę należy powtórzyć.'@[_fnl]);
   return()
?};

_err:=0;
R.cntx_psh();
R.trig_off('*','*');
R.index('RUBKOD');
R.prefix();
_prg_start:=_dn:=R.first();
{? _prg_start || FUN.prg_start(R.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _dn & ~_err
|! _put:=0;
   {? _src.find_key(R.RN)
   || {? R.KDL='' || R.KDL:={? '*L'*_src.KD || 'T' || 'N' ?}; _put+=1 ?};
      {? R.KDZ='' || R.KDZ:={? '*Z'*_src.KD || 'T' || 'N' ?}; _put+=1 ?};
      {? _put || _err+=~R.put() ?}
::   Jeśli nie mamy danej rubryki z Xpertis, to ona i tak została już zaimportowana po stronie Merit na czysto
::   || _err+=1
   ?};
   FUN.prg_next();
   _dn:=R.next()
!};
{? _prg_start || FUN.prg_stop() ?};
R.trig_on('*','*');
R.cntx_pop();

{? _err
|| _msg('Uzupełnienie nowych pól w tabeli rubryk nie powiodło się.\nProcedurę należy powtórzyć.'@)
?};
1


\rap_zew
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Zmiany związane z raportami zewnętrznymi.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
XR_PAR.erase();
XR_INS.erase();
XR_TMP.erase();
XR_DEF.erase();
exec('reg_reps','rap_zew');
1


\an
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Zmiana wartości pola AN.STAN
::----------------------------------------------------------------------------------------------------------------------
_tab:=AN.names();
{? _tab.first()
|| {!
   |? AN.use(_tab.NAME);
      AN.prefix();
      AN.for_each("{? AN.STAN='B' || AN.STAN:='T'; AN.put() || AN.STAN:='N'; AN.put() ?}",1);
      _tab.next()
   !}
?};
1


\konta_przelewowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Zmiana nazw wybranych rubryk (również w polu NOTA typu SYS_MEMO).
::   WE: _a - uchwyt do tabeli R lub RG
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: Pomijamy wykonanie dla firmy 000
FIRMA.cntx_psh();
{? REF.WFIRM & REF.FIRMA().SYMBOL='000'
|| FIRMA.cntx_pop();
   return(~~)
?};
FIRMA.cntx_pop();

{? ~(var_pres('_a')=var_pres('R') & (_a=R | _a=RG))
|| _txt:='Zmiana nazw wybranych rubryk nie była możliwa. Procedurę należy powtórzyć.';
   {? var_pres('__kom')=var_pres('JCQ',@.CLASS)
   || exec('add_kom','#message',_txt,4,'Przelewy wynagrodzenia - konta')
   || FUN.info(_txt)
   ?};
   &_txt;
   return()
?};

_buf:=tab_tmp(1,
   'RN','INTEGER','Nr rubryki',
   'RTB','STRING[20]','Nazwa "stara"',
   'RTA','STRING[20]','Nazwa "nowa"'
);
_add:="_a.blank(); _a.RN:=_b; _a.RTB:=_c; _a.RTA:=_d; _a.add()";

_add(_buf,994,'Konto "osobiste"','Konto 1');
_add(_buf,995,'Karta kredytowa','Konto 2');
_add(_buf,996,'Konto "wspólne"','Konto 3');

_memo:='NOTA';

_tab:=_a;
_tab.cntx_psh();
_tab.index('RUBKOD');
_tab.prefix();
{? _buf.first()
|| {!
   |? {? _tab.find_key(_buf.RN) & _tab.RT=_buf.RTB
      || _tab.RT:=_buf.RTA;
         _tab.put();
         {? var_pres(_memo,_tab)>0 & _tab.memo_get(,_memo) & _tab.memo_key(_buf.RTB,,_memo)
         || _fin:=_tab.memo_get('r',_memo);
            {? _fin.is_open()
            || _fout:=fopen(null(),'Uw',,1,1);
               {? _fout.is_open()
               || {!
                  |? _linia:=_fin.fread();
                     _linia<>'\n'
                  |! _fout.fwrite(gsub(_linia,_buf.RTB,_buf.RTA))
                  !};
                  _tab.memo_put(_fout,_memo);
                  _fout.fclose()
               ?};
               obj_del(_fout);
               _fin.fclose()
            ?};
            obj_del(_fin)
         ?}
      ?};
      _buf.next()
   !}
?};
_tab.cntx_pop();
~~


\formula_formula
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Zmiana treści formuł z tabeli FORMULA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FORMULA.cntx_psh();
FORMULA.index('FORMULA4');
FORMULA.clear();
_prg_start:=_dalej:=FORMULA.first();
{? _prg_start || FUN.prg_start(FORMULA.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _dalej
|! _put:=0;
   _tb:=FORMULA.FORMULA;
   _ta:=gsub(_tb,'exec(\'czytaj\',\'stalesys\'','exec(\'czytaj\',\'#stalesys\'');
   {? _tb<>_ta
   || FORMULA.FORMULA:=_ta;
      _put+=1
   ?};
   {? FORMULA.RODZAJ='P' & FORMULA.SKROT='SK' &
      FORMULA.NAZWA='kw. ogr. rocznej podst. wym. skł. na ubezp. emeryt. i rent.'
   || FORMULA.NAZWA:='kwoty ograniczenia rocznej podstawy wymiaru składek na ubezpieczenie emerytalne i rentowe';
      _put+=1
   ?};
   {? FORMULA.RODZAJ='2' | FORMULA.RODZAJ='3'
   || _tb:=FORMULA.FORMULA;
      _ta:=gsub(_tb,'\'pd_buf\'','\'%plan_dostaw\'');
      {? _ta*'\'uzu_'>0
      || _ta:=gsub(_ta,'\',\'pd_df\'','\',\'%plan_dostaw\'')
      || _ta:=gsub(_ta,'\',\'pd_df\'','_pl\',\'%plan_dostaw\'')
      ?};
      {? _tb<>_ta
      || FORMULA.FORMULA:=_ta;
         _put+=1
      ?}
   ?};
   {? FORMULA.RODZAJ='^' | FORMULA.RODZAJ='%'
   || _tb:=FORMULA.FORMULA;
      _ta:=gsub(_tb,'\'mws_form\'','\'%mws_form\'');
      {? _tb<>_ta
      || FORMULA.FORMULA:=_ta;
         _put+=1
      ?}
   ?};
   {? FORMULA.RODZAJ='N'
   || _tb:=FORMULA.FORMULA;
      _ta:=gsub(_tb,',\'nr_dok\'',',\'%kasa\'');
      {? _tb<>_ta
      || FORMULA.FORMULA:=_ta;
         _put+=1
      ?}
   ?};
   {? _put
   || FORMULA.put()
   ?};
   FUN.prg_next();
   _dalej:=FORMULA.next()
!};
{? _prg_start || FUN.prg_stop() ?};
FORMULA.cntx_pop();
~~


\AFORM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Modyfikacja pola AFORM.FRS
::----------------------------------------------------------------------------------------------------------------------
AFORM.cntx_psh();
AFORM.clear();
{? AFORM.first()
|| FUN.prg_start(AFORM.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? _put:=0;
      _fb:=AFORM.FRS;
      _fa:=gsub(_fb,'exec(\'drill_mat\',\'zlecanal\')','exec(\'drill_mat\',\'%drill_kalk_zl\')');
      _fa:=gsub(_fa,'exec(\'drill_rob\',\'zlecanal\')','exec(\'drill_rob\',\'%drill_kalk_zl\')');
      _fa:=gsub(_fa,'exec(\'drill_usl\',\'zlecanal\')','exec(\'drill_usl\',\'%drill_kalk_zl\')');
      _fa:=gsub(_fa,'exec(\'drill_utl\',\'zlecanal\')','exec(\'drill_utl\',\'%drill_kalk_zl\')');
      _fa:=gsub(_fa,'exec(\'drill_wrk\',\'zlecanal\')','exec(\'drill_wrk\',\'%drill_kalk_zl\')');
      {? _fb<>_fa
      || AFORM.FRS:=_fa;
         _put:=1
      ?};
      {? AFORM.DSP=''
      || AFORM.DSP:='N';
         _put:=1
      ?};
      {? _put || AFORM.put() ?};
      FUN.prg_next();
      AFORM.next()
   !};
   FUN.prg_stop()
?};
AFORM.cntx_pop();
~~


\KFORM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Modyfikacja pola KFORM.FRS
::----------------------------------------------------------------------------------------------------------------------
KFORM.cntx_psh();
KFORM.clear();
{? KFORM.first()
|| FUN.prg_start(KFORM.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? _fb:=KFORM.FRS;
      _fa:=gsub(_fb,'exec(\'drill_mat\',\'tex_kalk\')','exec(\'drill_mat\',\'%drill_kalk_tkw\')');
      _fa:=gsub(_fa,'exec(\'drill_rob\',\'tex_kalk\')','exec(\'drill_rob\',\'%drill_kalk_tkw\')');
      _fa:=gsub(_fa,'exec(\'drill_usl\',\'tex_kalk\')','exec(\'drill_usl\',\'%drill_kalk_tkw\')');
      _fa:=gsub(_fa,'exec(\'drill_utl\',\'tex_kalk\')','exec(\'drill_utl\',\'%drill_kalk_tkw\')');
      _fa:=gsub(_fa,'exec(\'drill_wrk\',\'tex_kalk\')','exec(\'drill_wrk\',\'%drill_kalk_tkw\')');
      {? _fb<>_fa
      || KFORM.FRS:=_fa;
         KFORM.put()
      ?};
      FUN.prg_next();
      KFORM.next()
   !};
   FUN.prg_stop()
?};
KFORM.cntx_pop();
~~


\TMAT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnienie pola TMAT.PRZ (TCHMAT.PRZ)
::   WE: _a - tabela (TMAT albo TCHMAT)
::----------------------------------------------------------------------------------------------------------------------
_formula:="
   _tab:=_a;
   _tmat:=_tab=TMAT;
   _tab.prefix();
   {? _tab.first()
   || {!
      |? _put:=0;
         {? _tab.PRZ=0
         || {? _tab.COEF=0
            || _tab.PRZ:=0
            || _tab.PRZ:=1/_tab.COEF
            ?};
            _put:=1
         ?};
         {? _tmat & _tab.ROZ<>'T' || _tab.ROZ:='N' ?};
         {? _put || _tab.put() ?};
         _tab.next()
      !}
   ?};
   ~~
";
exec('for_each_mask','#table',_a,_formula,,,,,1);
~~


\p_info_bl_kc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wypełnienie pola P_INFO.BL_KC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P_INFO.cntx_psh();
P_INFO.prefix();
P_INFO.for_each("{? P_INFO.BL_KC='' || P_INFO.BL_KC:='N'; P_INFO.put() ?}",1);
P_INFO.cntx_pop();
~~


\kart_def_std
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Uzupełnienie nowych pól w definicji kartotek dodatkowych, synchronizacja kategorii z SLO_KOD (poprzez
::       triggery).
::   WE:
::   WY:
::  ORG: \szkolbhp/upgrade_1728.fml
::----------------------------------------------------------------------------------------------------------------------
KART_DEF.cntx_psh();
KART_DEF.index('SYMBOL');
KART_DEF.prefix();
{? KART_DEF.first()
|| FUN.prg_start(KART_DEF.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? _put:=0;
      KART_DEF.memo_get(,'F3');
      {? KART_DEF.NAZWA=''
      || KART_DEF.NAZWA:=KART_DEF.OPIS;
         KART_DEF.OPIS:='Opis';
         _put+=1
      ?};
      {? KART_DEF.WER='ODDO'
:        Od dnia, Do dnia, Opis (ze szczególnym uwzględnieniem kartoteki KART_NIP)
      || _dow:=KART_DEF.SYMBOL<>'KART_NIP' & KART_DEF.SYMBOL<>'PODW_OCH' & KART_DEF.SYMBOL<>'WYR_TARC';
         {? KART_DEF.OPISW<>0 || KART_DEF.OPISW:=0; _put+=1 ?};
         {? KART_DEF.ODW<>1 || KART_DEF.ODW:=1; _put+=1 ?};
         {? KART_DEF.DOW<>_dow || KART_DEF.DOW:=_dow; _put+=1 ?};
         {? KART_DEF.KT<>'' || KART_DEF.KT:=''; _put+=1 ?};
         {? KART_DEF.KTW<>0 || KART_DEF.KTW:=0; _put+=1 ?}
      |? KART_DEF.WER='KTOD'
:        Kategoria, Od dnia, Opis
      || {? KART_DEF.OPISW<>0 || KART_DEF.OPISW:=0; _put+=1 ?};
         {? KART_DEF.ODW<>1 || KART_DEF.ODW:=1; _put+=1 ?};
         {? KART_DEF.DO<>'' || KART_DEF.DO:=''; _put+=1 ?};
         {? KART_DEF.DOW<>0 || KART_DEF.DOW:=0; _put+=1 ?};
         {? KART_DEF.KTW<>1 || KART_DEF.KTW:=1; _put+=1 ?}
      |? KART_DEF.WER='KART'
:        Pełna kartoteka
      || {? KART_DEF.OPISW<>0 || KART_DEF.OPISW:=0; _put+=1 ?};
         {? KART_DEF.ODW<>1 || KART_DEF.ODW:=1; _put+=1 ?};
         {? KART_DEF.DOW<>1 || KART_DEF.DOW:=1; _put+=1 ?};
         {? KART_DEF.KTW<>1 || KART_DEF.KTW:=1; _put+=1 ?}
      ?};
      {? KART_DEF.CZYWART='_'
      || {? KART_DEF.WARTOSCW<>0 || KART_DEF.WARTOSCW:=0; _put+=1 ?};
         {? KART_DEF.WARTOSC=''
         || KART_DEF.WARTOSC:=
               {? KART_DEF.SYMBOL='BADANIE'  || 'Koszt badania'
               |? KART_DEF.SYMBOL='SZKOLBHP' || 'Koszt szkolenia'
               |? KART_DEF.SYMBOL='WYR_KAR'  || 'Kwota'
               |? KART_DEF.SYMBOL='PODW_MAC' || 'Kwota'
               |? KART_DEF.SYMBOL='PODW_OCH' || 'Procent zwiększenia'
               || 'Wartość liczbowa'
               ?};
            _put+=1
         ?}
      || {? KART_DEF.CZYWART<>'' || KART_DEF.CZYWART:=''; _put+=1 ?};
         {? KART_DEF.WARTOSCW<>0 || KART_DEF.WARTOSCW:=0; _put+=1 ?};
         {? KART_DEF.WARTOSC<>'' || KART_DEF.WARTOSC:=''; _put+=1 ?}
      ?};
      {? KART_DEF.SYMBOL='DOD_KWAL'
      || KART_DEF.OPISW:=1;
         KART_DEF.ODW:=KART_DEF.DOW:=0;
         _put+=1
      ?};
      {? _put
      || KART_DEF.put()
      ?};
::    Jeżeli pole notatnikowe nie jest puste, to zapis wykonujemy zawsze. Uruchamia to wyzwalacza, który na podstawie
::    treści notatki tworzy odpowiednie pozycje słownika.
      {? KART_DEF.memo_txt(,,'F3')<>''
      || KART_DEF.memo_put(,'F3')
      ?};
      FUN.prg_next();
      KART_DEF.next()
   !};
   FUN.prg_stop()
?};
KART_DEF.cntx_pop();
~~


\ZL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnienie pól tabeli ZL
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
ZL.prefix();
ZL.for_each("
   _put:=0;
   {? ZL.MOD='' || ZL.MOD:='N'; _put:=1 ?};
:: Status rejestracji nagłówka dla zlecenia w przygotowaniu zależny od ZL.ZMASK
:: (jakikolwiek znak='0' oznacza zakończenie)
   {? ZL.STAT_N=''
   || {? ZL.STAN='N'
      || {? ZL.ZMASK*'0'<>0 || ZL.STAT_N:='T' || ZL.STAT_N:='N' ?}
      || ZL.STAT_N:='T'
      ?};
      _put:=1
   ?};
:: Status rejestracji technologii dla zlecenia w przygotowaniu zależny od ZL.ZMASK
:: (drugi znak='0' oznacza zakończenie)
   {? ZL.STAT_T=''
   || {? ZL.STAN='N'
      || {? (1+(1-ZL.ZMASK))='0' || ZL.STAT_T:='T' || ZL.STAT_T:='N' ?}
      || ZL.STAT_T:='T'
      ?};
      _put:=1
   ?};
   {? ZL.INTERZL='' || ZL.INTERZL:='N'; _put:=1 ?};
:: Wymuszenie trigera aktualizującego pola ZL.R, ZL.MGR
   {? ZL.TYP().WP='P' & (ZL.R='' | ZL.MGR=null()) || _put:=1 ?};
   {? ZL.RODZAJ='Z' & ZL.INTERZL='N'
   || _interzlec:=exec('interzlec','zl_guide',ZL.ref());
      {? _interzlec.first() || ZL.INTERZL:='T'; _put:=1 ?};
      obj_del(_interzlec)
   ?};
   {? _put || ZL.put() ?}
",1);
ZL.cntx_pop();
~~


\ZWAR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnienie pól tabeli ZWAR
::----------------------------------------------------------------------------------------------------------------------
ZWAR.cntx_psh(); ZL.cntx_psh();
ZWAR.prefix();
ZWAR.for_each("
  _put:=0;
  {? ZWAR.WP='' || ZWAR.WP:=ZWAR.ZL().TYP().WP; _put:=1 ?};
  {? _put || ZWAR.put() ?}
",1);
ZWAR.cntx_pop(); ZL.cntx_pop();
~~


\add_pwn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła tworzy nagłówki wyciągów (PWN) na podstawie pozycji wyciągów (PW)
::----------------------------------------------------------------------------------------------------------------------
PW.cntx_psh();
PWN.cntx_psh();
PWB.cntx_psh();
PWB.prefix();
_pw:=PW.names();
{? _pw.first()
|| FUN.prg_start(_pw.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      {? _pw.NAME+4='xxxx' | #(_pw.NAME+4)>0
      || PW.use(_pw.NAME);
         PWN.use('pn'+(_pw.NAME+4));
         PW.prefix();
         PWN.index('STATUS');
         PWN.prefix();
         {? PW.first()
         || VAR_DEL.delete('__TWYC');
            __TWYC:=tab_tmp(1,'NRW','STRING[20]','Nr wyciągu',
                              'REF','INTEGER','Ref',
                              'RBL','STRING[50]','Rachunek',
                              'PLIK','INTEGER','Plik');
            {! |?
               {? ~(__TWYC.find_key(PW.NRW) & __TWYC.NRW=PW.NRW)
               || __TWYC.NRW:=PW.NRW;
                  __TWYC.REF:=#PW.ref();
                  __TWYC.RBL:=exec('rb_nosp','#string',PW.RBL);
                  __TWYC.PLIK:=#PW.PLIK;
                  __TWYC.add()
               ?};
               PW.next()
            !};
            {? __TWYC.first()
            || {! |?
                  {? ~PWN.find_key('N',__TWYC.RBL,__TWYC.NRW)
                  || PWN.blank();
                     PWN.STATUS:='N';
                     PWN.NRW:=__TWYC.NRW;
                     {? PW.seek(__TWYC.REF,PW.name()) || PWN.BL:=PW.BL ?};
                     PWN.RBL:=exec('rb_nosp','#string',__TWYC.RBL);
                     {? PWB.seek(__TWYC.PLIK,PWB.name()) || PWN.PLIK:=PW.PLIK ?};
                     PWN.add()
                  ?};
                  __TWYC.next()
               !}
            ?};
            VAR_DEL.delete('__TWYC');
            {? PWN.first()
            || PW.for_each("{? PW.PWN=null
                            || PWN.index('PWN');
                               PWN.prefix(PW.BL,PW.RBL,PW.NRW);
                               {? PWN.first()
                               || PW.PWN:=PWN.ref();
                                  PW.put()
                               ?}
                           ?}")
            ?}
         ?}
      ?};
      FUN.prg_next();
      _pw.next()
   !};
   FUN.prg_stop()
?};
PWB.cntx_pop();
PW.cntx_pop();
PWN.cntx_pop();
1


\pop_pwn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła uzupełnia nagłówki wyciągów (PWN) na podstawie pozycji wyciągów (PW)
::----------------------------------------------------------------------------------------------------------------------
PW.cntx_psh();
PWN.cntx_psh();
_pwn:=PWN.names();
{? _pwn.first()
|| FUN.prg_start(_pwn.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      {? _pwn.NAME+4='xxxx' | #(_pwn.NAME+4)>0
      || PWN.use(_pwn.NAME);
         PW.use('pw'+(_pwn.NAME+4));
         PW.prefix();
         PWN.prefix();
         {? PWN.first()
         || {! |?
               {? PWN.STATUS='' || PWN.STATUS:='N' ?};
               {? PWN.PLIK=null | PWN.ODD=null
               || PW.index('PWN');
                  PW.prefix(PWN.ref());
                  {? PW.first()
                  || {? PWN.PLIK=null || PWN.PLIK:=PW.PLIK ?};
                     {? PWN.ODD=null || PWN.ODD:=PW.ODD ?};
                     PWN.put()
                  ?}
               ?};
               PWN.next()
            !}
         ?}
      ?};
      FUN.prg_next();
      _pwn.next()
   !};
   FUN.prg_stop()
?};
PW.cntx_pop();
PWN.cntx_pop();
1


\rd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Uzupełnienie nowych pól w tabeli RD (w miarę możliwości).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RD.cntx_psh();
RD.clear();
RD.for_each(
   "  _put:=0;
      {? RD.PLEC=''
      || {? +RD.PESEL=11
         || RD.PLEC:={? #(1+(9-RD.PESEL))%*2 || 'M' || 'K' ?};
            _put+=1
         |? RD.IM<>''
         || RD.PLEC:={? -(RD.IM+1)='a' || 'K' || 'M' ?};
            _put+=1
         ?}
      ?};
      {? RD.ADRINNY=''
      || RD.ADRINNY:='N';
         _put+=1
      ?};
      {? RD.DZPRZYSP=''
      || RD.DZPRZYSP:='N';
         _put+=1
      ?};
      {? RD.ODROS=''
      || RD.ODROS:='N';
         _put+=1
      ?};
      {? _put
      || RD.put()
      ?}
   ",1);
RD.cntx_pop();
~~


\zalacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Uzupełnienie nowych pól w tabeli ZALACZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
P.prefix();
H_UM.cntx_psh();
H_UM.prefix();
H.cntx_psh();
H.prefix();
ZC.cntx_psh();
ZC.prefix();
RH.cntx_psh();
RH.prefix();

ZAOMEDA.cntx_psh();
ZAOMEDA.index('NAG');
ZAOMEDA.prefix();
ZALACZ.cntx_psh();
ZALACZ.trig_off('*','*');
ZALACZ.f_clear();
ZALACZ.clear();
ZALACZ.index('TYP_ZAL');
ZALACZ.f_set(,,'FIRMA=:_a',exec('ref_firma','ustawienia'));
{? ZALACZ.f_first()
|| FUN.prg_start(ZALACZ.f_size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? _put:=0;
      {? ZALACZ.OSOBA=null & ZALACZ.P<>null
      || ZALACZ.OSOBA:=ZALACZ.P().OSOBA;
         _put+=1
      ?};
      {? ZALACZ.NAG=''
      || _TAB:=($ZALACZ.RODZAJ)();
         {? _TAB=H_UM | _TAB=H | _TAB=ZC | _TAB=RH
         || _ref:=($('ZALACZ.'+ZALACZ.RODZAJ))();
            {? _ref<>null & _TAB.seek(_ref)
            || ZALACZ.NAG:=_TAB.uidref()
            ?}

         |? ZALACZ.SQLREF*'bhp_s '=1
::          BHP_S nie ma w Merit, skierowania na badania
::          są zamieniane na załączniki współpracownika
         || ZALACZ.RODZAJ:='P';
            _put+=1

         |? ZALACZ.SQLREF<>''
         || obj_del(_TAB);
            _TAB:=ref_tab(ZALACZ.SQLREF);
            _TAB.cntx_psh();
            _TAB.use(ref_name(ZALACZ.SQLREF));
            _TAB.prefix();
            {? _TAB.seek(ZALACZ.SQLREF)
            || ZALACZ.NAG:=_TAB.uidref()
            ?};
            _TAB.cntx_pop()
         ?};
         obj_del(_TAB);
         _put+=(ZALACZ.NAG<>'')
      ?};
      {? ZALACZ.TYP_ZAL=null
      || ZALACZ.TYP_ZAL:=exec('slo_naz','ext_slo',exec('slo_typ','ext_slo','ZAL'),'_NIEUZUPEŁNIONY_');
         _put+=1
      ?};
      {? ZALACZ.LOK='' & ZALACZ.ZAL_NAME<>''
      || ZALACZ.LOK:=ZALACZ.ZAL_NAME;
         _put+=1
      ?};
      {? ZALACZ.WWW=''
      || ZALACZ.WWW:='T';
         _put+=1
      ?};
      {? ZALACZ.WWWE=''
      || ZALACZ.WWWE:='T';
         _put+=1
      ?};
      {? ZALACZ.WWWS=''
      || ZALACZ.WWWS:='N';
         _put+=1
      ?};
      {? ZALACZ.IDADD=''
      || ZALACZ.IDADD:=$ZALACZ.tm_stamp();
         _put+=1
      ?};
      {? ZALACZ.RODZAJ<>'P' & ZALACZ.RODZAJ<>'OSOBA' & ZALACZ.SQLREF='' & var_pres(ZALACZ.RODZAJ,ZALACZ)=26
      || ZALACZ.SQLREF:=$($('ZALACZ.'+ZALACZ.RODZAJ))();
         _put+=1
      ?};
      {? _put | ZALACZ.HASH='' | ZALACZ.SIZE=0
      || {? ZALACZ.ZAL<>null
         || _maska:=form(8+(ZALACZ.NAG+16));
            {? (ZALACZ.RODZAJ='H_UM' & _maska='h_u_') | (ZALACZ.RODZAJ='H' & _maska='_his_')
            || ZALACZ.WWW:='N'
            ?};
            ZALACZ.ZAL_NAME:=ZALACZ.bl_info('ZAL','NAME');
            ZALACZ.SIZE:=ZALACZ.bl_info('ZAL','SIZE');
            ZALACZ.HASH:=exec('hash','#blob',ZALACZ.ZAL)
         ?};
         ZALACZ.put()
      ?};
      FUN.prg_next();
      ZALACZ.f_next()
   !};
   FUN.prg_stop()
?};
ZALACZ.trig_on('*','*');
ZALACZ.cntx_pop();
ZAOMEDA.cntx_pop();

RH.cntx_pop();
ZC.cntx_pop();
H.cntx_pop();
H_UM.cntx_pop();
P.cntx_pop();
~~


\ud_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnienie informacji w tabeli UD_SCH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
UD_SCH.cntx_psh();
UD_SCH.index('UD_SCH');
UD_SCH.clear();
_prg_start:=_loop:=UD_SCH.first();
{? _prg_start || FUN.prg_start(UD_SCH.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|! _mod:=0;
   {? UD_SCH.BLOKADA=''
   || UD_SCH.BLOKADA:='N';
      _mod:=1
   ?};
   {? UD_SCH.AKTYWNY=''
   || UD_SCH.AKTYWNY:='T';
      _mod:=1
   ?};
   {? UD_SCH.DOMYSLNY=''
   || UD_SCH.DOMYSLNY:='T';
      _mod:=1
   ?};
   {? UD_SCH.UWAGI=''
   || UD_SCH.UWAGI:=UD_SCH.OPIS;
      _mod:=1
   ?};
   {? UD_SCH.REKORD=0
   || UD_SCH.REKORD:=#UD_SCH.ref();
      _mod:=1
   ?};
   {? UD_SCH.DATA=date(0,0,0)
   || UD_SCH.DATA:=date();
      _mod:=1
   ?};
   {? UD_SCH.UWAGI=''
   || UD_SCH.UWAGI:=exec('ud_sch_uwagi_wp','schemat');
      _mod:=1
   ?};
   {? _mod
   || UD_SCH.put()
   ?};
   FUN.prg_next();
   _loop:=UD_SCH.next()
!};
{? _prg_start || FUN.prg_stop() ?};

_fn:=UD_SCH.name()+'.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   UD_SCH.cntx_pop();
   return(0)
?};

_BUF:=tab_tmp(1,
   'REF','STRING[16]','Schemat'
);
_BUF.import(_fn,1,1,%1+';','UTF-8,pth,header',,
   'REF',,1,
);
_prg_start:=_loop:=_BUF.first();
{? _prg_start || FUN.prg_start(_BUF.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|! {? UD_SCH.seek(_BUF.REF)
   || UD_SCH.DOMYSLNY:='T';
      UD_SCH.put()
   ?};
   FUN.prg_next();
   _loop:=_BUF.next()
!};
{? _prg_start || FUN.prg_stop() ?};

UD_SCH.cntx_pop();
UD_SCH.get();
~~


\ud_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnienie informacji w tabeli UD_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
UD_DEF.cntx_psh();
UD_DEF.clear();
UD_DEF.f_set(,,'UD_DEF.UD_DEF=0');
_prg_start:=_loop:=UD_DEF.f_first();
{? _prg_start || FUN.prg_start(UD_DEF.f_size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|! UD_DEF.put();
   FUN.prg_next();
   _loop:=UD_DEF.f_next()
!};
{? _prg_start || FUN.prg_stop() ?};
UD_DEF.f_clear();
UD_DEF.cntx_pop();
~~


\ud_his
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przeniesienie zapisów historycznych do schematów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: kopiowanie drzewek
: _a - wskazanie nagłówka
: _b - wskazanie rodzica
: _c - wskazanie schematu
: _d - wskazanie rodzica
: _e - formuła kopiująca
_copy:="
   UD_DEFHI.cntx_psh();
   UD_DEFHI.index('TREESYM');
   UD_DEFHI.prefix(_a,_b);
   _loop:=UD_DEFHI.first();
   {!
   |? _loop
   |! {? UD_DEFHI.UD_DEFHI=_b
      || UD_DEF.index('PODTEC');
         UD_DEF.prefix(_c);
         _ref:=null;
         {? UD_DEF.find_key(UD_DEFHI.UD_SKL)
         || _ref:=UD_DEF.ref()
         || UD_DEF.blank(1);
            UD_DEF.UD_SCH:=_c;
            UD_DEF.UD_DEF:=_d;
            UD_DEF.UD_SKL:=UD_DEFHI.UD_SKL;
            UD_DEF.UD_POZ:=UD_DEFHI.UD_POZ;
            {? UD_DEF.add()
            || _ref:=UD_DEF.ref()
            ?}
         ?};
         {? _ref<>null
         || _e(_a,UD_DEFHI.ref(),_c,_ref,_e)
         ?}
      ?};
      _loop:=UD_DEFHI.next()
   !};
   UD_DEFHI.cntx_pop()
";

UD_SCH.cntx_psh();
UD_SCH.clear();
UD_DEF.cntx_psh();
UD_DEF.clear();

UD_DEFHN.cntx_psh();
UD_DEFHN.index('DATAWER');
UD_DEFHN.prefix();
_prg_start:=_loop:=UD_DEFHN.first();
{? _prg_start || FUN.prg_start(UD_DEFHN.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|! _typ:=UD_DEFHN.UD_SCH().UD_TYP;
:  kopiowanie nagłówka
   UD_SCH.blank(1);
   UD_SCH.UD_TYP:=_typ;
   UD_SCH.DATA:=UD_DEFHN.DATA;
   UD_SCH.UWAGI:=UD_DEFHN.OPIS;
   UD_SCH.UD_SCH:=UD_DEFHN.UD_SCH;
   _jest:=UD_SCH.find_rec();
   {? ~_jest
   || UD_SCH.blank();
      UD_SCH.UD_TYP:=_typ;
      UD_SCH.AKTYWNY:='N';
      UD_SCH.DATA:=UD_DEFHN.DATA;
      UD_SCH.UWAGI:=UD_DEFHN.OPIS;
      UD_SCH.UD_SCH:=UD_DEFHN.UD_SCH;
      _jest:=UD_SCH.add()
   ?};
   {? _jest
:     kopiowanie definicji schematu
   || _copy(UD_DEFHN.ref(),0,UD_SCH.ref(),0,_copy)
   ?};
   FUN.prg_next();
   _loop:=UD_DEFHN.next()
!};
{? _prg_start || FUN.prg_stop() ?};
UD_DEFHN.cntx_pop();

UD_DEF.cntx_pop();
UD_SCH.cntx_pop();
~~


\giodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przepisanie opisów z pól tekstowych do pola typu SYS_MEMO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Pomijamy wykonanie dla firmy 000
FIRMA.cntx_psh();
{? REF.WFIRM & REF.FIRMA().SYMBOL='000'
|| FIRMA.cntx_pop();
   return(~~)
?};
_kod:={? REF.WFIRM || '_'+REF.FIRMA().SYMBOL || '' ?};
FIRMA.cntx_pop();

_fn:='giodo'+_kod+'.tra';
{? ~fexists(_fn,1)
|| __UPG.msg('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_TAB:=tab_tmp(1,
   'REF','STRING[16]','SQL-ref',
   'OPIS1','STRING[255]','Opis 1',
   'OPIS2','STRING[255]','Opis 2',
   'OPIS3','STRING[255]','Opis 3'
);
_TAB.import(_fn,1,1,%1+';','UTF-8,pth,header',,
   'REF',,1,,
   'OPIS1',,2,,
   'OPIS2',,3,,
   'OPIS3',,4,
);
{? ~_TAB.first()
|| return()
?};

_kod:=exec('kod','giodo');

_step:=0;
_size:=_TAB.size();
GIODO.cntx_psh();
GIODO.clear();
{!
|? _step+=1;
   progress(100*_step/_size,'Import danych GIODO ...'@,FUN.TYT);
   _txt:=
      _TAB.OPIS1+
      {? _TAB.OPIS2<>'' | _TAB.OPIS3<>''
      || '\n'+_TAB.OPIS2+{? _TAB.OPIS3<>'' || '\n'+_TAB.OPIS3 || '' ?}
      || ''
      ?};
   {? _txt<>'' & GIODO.seek(_TAB.REF) & GIODO.memo_line('OPIS')='\n' &
      exec('kod_opis','giodo',_kod) & _txt<>SKID.GIOOPIS
   || GIODO.memo_set(_txt,'OPIS');
      GIODO.memo_put(,'OPIS')
   ?};
   _TAB.next()
!};
GIODO.cntx_pop();
prgs_clr();
~~


\stn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Aktualizacja kolumny RP tabeli STN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Weryfikujemy, czy mamy licencję na dziedziny Kadr i płac.
:: Po stronie Xpertis zakładamy, że parametr 7 jest ustawiony na wartość 'N' przez co pomijamy zadania naprawcze.
{? ~exec('lic','#b_domain','PKD') & ~exec('lic','#b_domain','PPL')
|| return(~~)
?};

_fn:=STN.name()+'.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_BUF:=tab_tmp(1,
   'REF','STRING[16]','Stanowisko',
   'KOD','STRING[1]','Kod',
   'O','STRING[40]','Opis'
);
_BUF.import(_fn,1,1,%1+';','UTF-8,pth,header',,
   'REF',,1,,
   'KOD',,2,,
   'O',,3,
);
{? _BUF.size()=0
|| return()
?};

_typ:=exec('slo_typ','ext_slo','RODZPRAC');

STN.cntx_psh();
STN.clear();
_loop:=_BUF.first();
{!
|? _loop
|! {? STN.seek(_BUF.REF) & STN.RP=null()
   || STN.RP:=exec('kod_ref','ext_slo',_typ,_BUF.KOD,_BUF.O);
      STN.put()
   ?};
   _loop:=_BUF.next()
!};
STN.cntx_pop();
~~


\NRDOK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Transfer tabeli NRDOK (zmiana lokalizacji formuł numerujących dokumenty)
::----------------------------------------------------------------------------------------------------------------------
NRDOK.index('NRDOK');
NRDOK.prefix('ZLP',);
{? NRDOK.first()
|| _fb:=NRDOK.F;
   _fa:=gsub(_fb,'exec(\'nrnzl\',\'zlec3\'','exec(\'nrnzl\',\'zl_head\'');
   NRDOK.F:=_fa;
   NRDOK.put()
?};
:: usunięcie pola SYS z grupy numeracji
NRDOK.index('NRDOK_AB');
NRDOK.prefix('FAKS',);
{? NRDOK.first()
|| FUN.prg_start(NRDOK.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? _nrsys:='000000';
      {! _i:=1..6 |! {? ($('NRDOK.P'+form(_i)))()='SYS' || _nrsys:=((_i-1)+_nrsys)+'1'+(_i-_nrsys) ?} !};
      {! |? (_wsk:=_nrsys*'1'; _wsk)
      |! _ok:=1;
         NR.use('numer'+(-NRDOK.TYP));
::       Walidacja kilku systemów
         _buf:=sql('select distinct NR.P'+form(_wsk)+' from NR');
         _any:=_buf.size()>1;
         obj_del(_buf);
         {? ~_any
         || do();
            _ndx:=NR.ndx_tmp(,,'NR',,);
            NR.index(_ndx);
            NR.prefix();
            {? NR.first()
            || {!
               |? {! _i:=(_wsk+1)..6 |! ($('NR.P'+form(_i-1)))():=($('NR.P'+form(_i)))() !};
                  {? ~NR.put(1) || _ok:=0; undo() ?};
                  NR.next()
               !}
            ?};
            {? _ok
            || {! _i:=(_wsk+1)..6 |! ($('NRDOK.P'+form(_i-1)))():=($('NRDOK.P'+form(_i)))() !};
               NRDOK.put(1)
            ?};
            NR.ndx_drop(_ndx);
            end()
         ?};
         _nrsys:=_wsk-_nrsys
      !};
      FUN.prg_next();
      NRDOK.next()
   !};
   FUN.prg_stop()
?};
~~


\edek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Transfer pól E_DEK.SYSTEM, ISTDEF.SYSTEM, ALG_PAR.SYSTEM
::----------------------------------------------------------------------------------------------------------------------
TrFml:=1;
E_DEK.prefix();
E_DEK.for_each("
   {? E_DEK.SYSTEM='FIKS'
   || E_DEK.SYSTEM:='FKS'
   |? E_DEK.SYSTEM='KALI'
   || E_DEK.SYSTEM:='PPL'
   ?};
   E_DEK.put()
",1);
ISTDEF.prefix();
ISTDEF.for_each("
   {? ISTDEF.SYSTEM='FIKS'
   || ISTDEF.SYSTEM:='FKS';
      ISTDEF.put()
   |? ISTDEF.SYSTEM='KALI'
   || ISTDEF.SYSTEM:='PPL';
      ISTDEF.put()
   ?}
",1);
VAT_VER.prefix();
VAT_VER.for_each("
   {? VAT_VER.SYSTEM='FIKS'
   || VAT_VER.SYSTEM:='FKS'
   |? VAT_VER.SYSTEM='KALI'
   || VAT_VER.SYSTEM:='PPL'
   ?};
   VAT_VER.put(1)
",1);
ALG_PAR.prefix();
ALG_PAR.for_each("
   {? ALG_PAR.SYSTEM='FIKS'
   || ALG_PAR.SYSTEM:='FKS'
   |? ALG_PAR.SYSTEM='KALI'
   || ALG_PAR.SYSTEM:='PPL'
   ?};
   ALG_PAR.put(1)
",1);
VAR_DEL.delete('TrFml')


\kom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uzupełnienie KOM.CZY_WYR
::----------------------------------------------------------------------------------------------------------------------
KS.index('SYM');
KS.prefix();
KS_W.index('LP');
KOM.index('SYS');
{? KS.first()
|| FUN.prg_start(KS.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? KS_W.prefix(KS.ref());
      {? KS_W.first()
      || KOM.prefix(KS.ref());
         {? KOM.first()
         || {!
            |? KOM.CZY_WYR:=1;
               KOM.put();
               KOM.next()
            !}
         ?}
      ?};
      FUN.prg_next();
      KS.next()
   !};
   FUN.prg_stop()
?}


\f_zatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnienie informacji w tabeli F_ZATR.
::----------------------------------------------------------------------------------------------------------------------
F_ZATR.cntx_psh();
F_ZATR.prefix();
F_ZATR.for_each("
   {? F_ZATR.DOCELOWA=''
   || F_ZATR.DOCELOWA:='T';
      F_ZATR.put()
   ?}
",1);
F_ZATR.cntx_pop();
~~


\p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Aktualizacja tabeli P.
::  ORG: \edi_ka_P_KIN/upgrade_1742.fml
::  ORG: \aktualizuj_p_kk/upgrade_1742.fml
::----------------------------------------------------------------------------------------------------------------------
P_KK.cntx_psh();
P_KK.index('OD');
P.clear();
:: W formule poniżej, P.put() wykonujemy zawsze w celu uruchomienia odpowiednich wyzwalaczy. Nie ma zatem potrzeby
:: badania wartości pola P.KIN czy P.KK.
P.for_each("
   P.KIN:='T';
   P_KK.prefix(P.ref());
   _nkk:={? P_KK.find_le(date()) || P_KK.KK || null() ?};
   P.KK:=_nkk;
   P.put()
",1);
P_KK.cntx_pop();
~~


\osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Aktualizacja tabeli OSOBA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
OSOBA.clear();
OSOBA.for_each("OSOBA.put()",1)


\zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Aktualizacja tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC.clear();
ZC.for_each("ZC.put()",1)


\h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Aktualizacja kolumn tabeli H.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Weryfikujemy, czy mamy licencję na dziedziny Kadr i płac.
:: Po stronie Xpertis zakładamy, że parametr 7 jest ustawiony na wartość 'N' przez co pomijamy zadania naprawcze.
{? ~exec('lic','#b_domain','PKD') & ~exec('lic','#b_domain','PPL')
|| return(~~)
?};
:: Pomijamy wykonanie dla firmy 000
FIRMA.cntx_psh();
{? REF.WFIRM & REF.FIRMA().SYMBOL='000'
|| FIRMA.cntx_pop();
   return(~~)
?};
_kod:={? REF.WFIRM || '_'+REF.FIRMA().SYMBOL || '' ?};
FIRMA.cntx_pop();

_fn:=H_UM.name()+_kod+'.tra';
{? ~fexists(_fn,1)
|| __UPG.msg('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_BUF:=sql(
   'select '
   '  Q.REFERENCE as REF, '
   '  Q.PODPIS as PODPIS, '
   '  Q.PRZEDST as PRZEDST, '
   '  Q.MIEJSCE as MIEJSCE '
   'from '
   '  H as Q '
   'where '
   '  0=1'
);
_BUF.import(_fn,1,1,%1+';','UTF-8,pth,header',,
   'REF',,1,,
   'PODPIS',,2,1,
   'PRZEDST',,3,,
   'MIEJSCE',,4,
);
{? _BUF.size()=0
|| return()
?};

TRIG_OFF.H:='T';

P.cntx_psh();
H_UM.cntx_psh();
H.cntx_psh();

H_UM.clear();
_loop:=_BUF.first();
progress(,'Uzupełnienie kolumn w tabeli %1.'@['H'],FUN.TYT,1);
{!
|? _loop
|! {? H_UM.seek(_BUF.REF)
   || H.index('HISTUM');
      H.prefix(H_UM.ref());
      _loop:=H.first();
      {!
      |? _loop
      |! {? H_UM.OD=H.OD || H.PODPIS:=_BUF.PODPIS ?};
         H.PRZEDST:=_BUF.PRZEDST;
         H.MIEJSCE:=_BUF.MIEJSCE;
::       jeżeli wyzwalacz nie jest wykonywany to podczytanie P nie jest wymagane
::         H.UMOWA().P();
         H.put();
         _loop:=H.next()
      !}
   ?};
   _loop:=_BUF.next()
!};
prgs_clr();
H.cntx_pop();
H_UM.cntx_pop();
P.cntx_pop();

TRIG_OFF.H:='';
~~


\h2n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przenosi informacje o nieobecnościach z tabeli H do tabeli N.
::----------------------------------------------------------------------------------------------------------------------
:: Weryfikujemy licencję na Kadry, po stronie Xpertis parametr 7 jest ustawiony na wartość 'N'.
{? ~exec('lic','#b_domain','PKD') & ~exec('lic','#b_domain','PPL')
|| return(~~)
?};

:: Pomijamy wykonanie dla firmy 000
FIRMA.cntx_psh();
{? REF.WFIRM & REF.FIRMA().SYMBOL='000'
|| FIRMA.cntx_pop();
   return(~~)
?};
FIRMA.cntx_pop();

TRIG_OFF.KAL_BUFF:='T';

exec('__RUB','object');
exec('RAPLS','object');
exec('add_attr','rubatr',13,138,'Służba wojskowa');
exec('add_attr','rubatr',14,14121,'121 - urlop wychowawczy',2,'','121',3);
exec('add_use','rubatr',14121,3);
exec('add_attr','rubatr',192,1925,'Urlop wychowawczy',1,'',,3);
exec('add_use','rubatr',1925,3);
exec('add_use','rubatr',138,15);
exec('add_use','rubatr',14151,15);
exec('add_use','rubatr',19422,3,15);
exec('add_use','rubatr',19431,3,15);

_mk_buf:="obj_new('B','O','W')";
_r:=obj_new('T','N');
_r.T:=_mk_buf();
_r.N:=_mk_buf();

:: część modyfikująca zapisy w tabeli R przeniesiona do wykanania w transfer_all w \r_imp/transfer.fml
:: (żeby dobrze oznaczyło się pole SYSTEM
R.cntx_psh();
R.index('RUBKOD');
R.prefix();
{? R.find_key(2)
|| _r.N.B:=R.ref()
|| FUN.emsg('Nie znaleziono rubryki opisującej urlop bezpłatny.'@);
   R.cntx_pop();
   return()
?};
{? R.find_key(25)
|| _r.T.B:=R.ref()
|| FUN.emsg('Nie znaleziono rubryki opisującej urlop bezpłatny udzielony na wniosek pracodawcy.'@);
   R.cntx_pop();
   return()
?};
{? R.find_key(15)
|| _r.N.O:=_r.T.O:=R.ref()
|| FUN.emsg('Nie znaleziono rubryki opisującej służbę wojskową.'@);
   R.cntx_pop();
   return()
?};
{? R.find_key(3)
|| _r.N.W:=_r.T.W:=R.ref()
|| FUN.emsg('Nie znaleziono rubryki opisującej urlop wychowawczy.'@);
   R.cntx_pop();
   return()
?};
R.cntx_pop();

_info:='Przeniesienie wybranych informacji z przebiegu zatrudnienia do nieobecności'@;

N.cntx_psh();
N.clear();
H.cntx_psh();
H.clear();
: przeniesienie nieobecności w całości
_step:=0;
_size:=H.size();
_loop:=H.first();
{!
|? _loop
|! _step+=1;
   progress(100*_step/_size,_info+' [1/5]',FUN.TYT);
   _kz:=H.KZ().KZ;
   {? _kz<>'Z'
   || H.P();
      {? ('BOW'*_kz)=0
      || P.OSOBA();
         FUN.emsg(
            'Dla pracownika %1  %2 (%3)\n'
            'znaleziono przebieg zatrudnienia o nieobsługiwanym kodzie \'%4\'.'@
            [OSOBA.NAZWISKO,OSOBA.PIERWSZE,form(P.T),_kz]
         );
         _loop:=H.next()
      || N.blank();
         N.P:=H.P;
         N.NB:=($('_a.'+{? H.WN='T' || 'T' || 'N' ?}+'.'+_kz))(_r);
         N.OD:=H.OD;
         N.DO:=H.DO;
         N.NK:=N.DO-N.OD+1;
         N.LT:='TRANSFER';
         N.KDSW:=H.KDSW;
         N.ROK:=N.OD~1;
         N.MC:=N.OD~2;
         do();
         {? N.add() & H.del(,1)
         || _loop:=1;
            end()
         || undo();
            end();
            FUN.emsg(
               'Dla pracownika '+OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE+' ('+form(P.T)+')\n'+
               'nie powiodło się przeniesienie nieobecności z dnia '+H.DO$4+'.'
            );
            _loop:=H.next()
         ?}
      ?}
   || _loop:=H.next()
   ?}
!};
prgs_clr();
H.cntx_pop();

exec('__KAL','object');

: obsługa przeniesionych nieobecności
N.clear();
_key:=N.ndx_tmp(,,'LT',,,'P',,,'OD',,);
N.index(_key);
N.prefix('TRANSFER');

: podział na miesiące
_step:=0;
_size:=N.size();
_loop:=N.first();
{!
|? _loop
|! _step+=1;
   progress(100*_step/_size,_info+' [2/5]',FUN.TYT);
   do();
   {!
   |? (N.OD~1<>N.DO~1 | N.OD~2<>N.DO~2) & do_state()=1
   |! _div:=date(N.OD~1,N.OD~2,0);
      _do:=N.DO;
      N.DO:=_div;
      N.NK:=N.DO-N.OD+1;
      N.NRG_AUTO:='T';
      {? N.put()
      || N.OD:=_div+1;
         N.DO:=_do;
         N.NK:=N.DO-N.OD+1;
         N.ROK:=N.OD~1;
         N.MC:=N.OD~2;
         {? ~N.add()
         || undo()
         ?}
      || undo()
      ?}
   !};
   end();
   _loop:=N.next()
!};
prgs_clr();

: uzupełnienie czasu pracy wynikającego z kalendarza
: powtórne wywołanie na potrzeby uzupełnienia po podziale
: (tylko dla nieobecności poprawnie podzielonych na miesiące)
_err:=__KAL.no_err(1);
_step:=0;
_size:=N.size();
_loop:=N.first();
{!
|? _loop
|! _step+=1;
   progress(100*_step/_size,_info+' [3/5]',FUN.TYT);
   {? (N.NR=0 | N.NG=0) & N.OD~1=N.DO~1 & N.OD~2=N.DO~2
   || __KAL.set_cal(N.P().KAL,N.OD~1,1);
      exec('n_czas','nieobecnosc',1);
      N.put()
   ?};
   _loop:=N.next()
!};
prgs_clr();
__KAL.no_err(_err);

: uzupełnienie informacji o rozliczeniu na liście płac
: powtórne wywołanie na potrzeby uzupełnienia po podziale
O.cntx_psh();
O.index('LISTYPLA');
LS.cntx_psh();
N.clear();
N.f_set(,,'LT=\'TRANSFER\'');
_step:=0;
_size:=N.f_size();
_loop:=N.f_first();
{!
|? _loop
|! _step+=1;
   progress(100*_step/_size,_info+' [4/5]',FUN.TYT);
   O.prefix(exec('ref_firma','ustawienia'),N.P().F_ZATR().KOD);
   _max:=0;
   {? O.last()
   || _max:=O.R*12+O.M
   ?};
   O.prefix(exec('ref_firma','ustawienia'),N.P().F_ZATR().KOD,N.ROK,N.MC);
   {? O.first()
   || _loop:=1;
      {!
      |? _loop
      |! echo(O.LT+' ...');
         LS.use(-O.LT);
         LS.index('PRACNRRU');
         LS.prefix(N.P,N.NB().RN);
         _loop:=LS.first();
         _sum:=0;
         {!
         |? _loop
         |! _sum+=LS.KW;
            _loop:=LS.next()
         !};
         {? _sum & _sum={? N.NB().RN=3 || N.NK || N.NR ?}
         || N.LT:=~O.LT;
            N.put()
         ?};
         _loop:=O.next()
      !};
      echo()
   |? _max<(N.ROK*12+N.MC)
   || N.LT:='';
      N.put()
   ?};
   _loop:=N.f_next()
!};
prgs_clr();

: usunięcie znacznika 'TRANSFER' dla przyszłych nieobecności
: w przeciwnym wypadku nie rozliczyłyby się na listach płac
N.f_rfresh();
_step:=0;
_size:=N.f_size();
_loop:=N.f_first();
{!
|? _loop
|! _step+=1;
   progress(100*_step/_size,_info+' [5/5]',FUN.TYT);
   {? date()~1<=N.DO~1 & date()~2<=N.DO~2
   || N.LT:='';
      N.put()
   ?};
   _loop:=N.f_next()
!};
prgs_clr();
N.f_clear();

: porządki
LS.cntx_pop();
O.cntx_pop();
N.cntx_pop();
N.ndx_drop(_key);

TRIG_OFF.KAL_BUFF:='';
~~


\h_um_h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Kopiuje umowy współpracy do "brudnopisu".
::       Sprostowanie:
::          Formuła jedynie przepisuje wybrane pola z tabeli H_UM do tabeli H. "Brudnopis" NIE jest tworzony,
::          a parametr 180 jest WYŁĄCZANY.
::----------------------------------------------------------------------------------------------------------------------
P.clear();

H.cntx_psh();
H_UM.cntx_psh();
H.use('_his_');
H_UM.use('h_u_');

H.clear();
H.erase();
H_UM.clear();
H_UM.erase();

H_UM.cntx_pop();
H.cntx_pop();

TRIG_OFF.KAL_BUFF:='T';
BIPNAG.trig_off('*','*');

: uzupełnienie brakujących a wymaganych danych
: jeśli wcześniej nie zostały uzupełnione, to teraz będą przypisane:
: - data przygotowania (PRZYG) <= OD
: - data zawarcia (PODPIS) <= OD
: - przedstawiciel (PRZEDST) <= '?'
: - adres (OS_ADRES) <= exec('szukaj','osoba',,H.OD)
OSOBA.cntx_psh();
P.cntx_psh();
H.cntx_psh();
H.use('_hist');
H.clear();
H.for_each("
   H.P().OSOBA();
   _mod:=0;
   _zdate:=date(0,0,0);
   {? H.PODPIS=_zdate
   || H.PODPIS:=H.OD;
      _mod+=1
   ?};
   {? H.PRZYG=_zdate
   || H.PRZYG:=H.OD;
      {? H.PODPIS<H.PRZYG
      || H.PRZYG:=H.PODPIS
      ?};
      _mod+=1
   ?};
   {? H.PRZEDST=''
   || H.PRZEDST:='?';
      _mod+=1
   ?};
   {? H.OS_ADRES=null
   || H.OS_ADRES:=exec('szukaj','osoba',,H.OD);
      {? H.OS_ADRES=null
      || _typ:='CKI';
         {!
         |? _typ<>'' & H.OS_ADRES=null()
         |! H.OS_ADRES:=exec('szukaj','osoba',1+_typ,H.OD);
            _typ:=1-_typ
         !}
      ?};
      {? H.OS_ADRES<>null
      || _mod+=1
      ?}
   ?};
   {? _mod
   || H.put()
   ?}
",1);
BIPNAG.trig_on('*','*');
TRIG_OFF.KAL_BUFF:='';
H.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();

:: Obsługa parametru 180.
PARAMS.cntx_psh();
PARAMS.index('FIRMA');
PARAMS.prefix();
{! _lp:=1 .. 2
|! _firma:={? _lp=1 || null() || exec('ref_firma','ustawienia') ?};
   {? PARAMS.find_key(_firma,180) & PARAMS.TRESC<>'N'
   || PARAMS.TRESC:='N';
      PARAMS.put();
::    Po zmianie wartości parametru uaktualnijmy zawartość tabeli PARAMETR, z której korzysta obiekt PAR_SKID.
      {? _lp=2
      || exec('get_par','#parametr',180,1)
      ?}
   ?}
!};
PARAMS.cntx_pop();
::{? -PAR_SKID.get(180)='t'
::|| F_ZATR.cntx_psh();
::   F_ZATR.prefix();
::   P.for_each("{? P.F_ZATR().KOD='P' || exec('h_um_pull','pracownik',P.ref()) ?}",1);
::   F_ZATR.cntx_pop()
::?};

1


\o_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Aktualizacja kryteriów list płac. Uzupełnienie danych w tabeli O_P.
::   WE:
::   WY:
::  ORG: \O_P/upgrade_2114.fml
::----------------------------------------------------------------------------------------------------------------------
exec('__F_ZATR','object');
__F_ZATR.mod('P');

KT.clear();
KT.for_each("
   _kt:=KT.K;
   {? _kt*'listplac'<>0
   || KT.K:=gsub(_kt,'listplac','lista_plac');
      KT.put()
   ?}
",1);

:: ER/WRT/XP/22.26/2305/0003 - Tabela O_P po transferze wielofirmowym wypełniona tylko dla F001
_RS:=sql(
   'select distinct LS.O, LS.P '
   'from @LS join P using (LS.P,P.REFERENCE) join F_ZATR using (P.F_ZATR,F_ZATR.REFERENCE) '
   'where F_ZATR.KOD=\'P\''
);
{? type_of(_RS)<>type_of(SYSLOG) | ~_RS.first()
|| return()
?};

exec('dekl','lista_plac');

O_P.cntx_psh();
O_P.clear();
O_P.index('UNIQUE');

O.cntx_psh();
O.f_clear();
O.clear();

P.cntx_psh();
P.f_clear();
P.clear();

_loop:=1;
_size:=_RS.size();
_cnt:=0;
{!
|? _loop
|! progress(100*_cnt/_size,'Trwa uzupełnianie danych...'@,FUN.TYT);
   {? O.seek(_RS.O) & P.seek(_RS.P)
   || {? ~O_P.find_key(O.ref(),P.ref())
      || O_P.blank(1);
         O_P.O:=O.ref();
         O_P.P:=P.ref();
         O_P.LS:='T';
         O_P.KT:={? FUNKCJE.TESTKRYT() || 'T' || 'N' ?};
         O_P.BL:='N';
         O_P.add()
      |? O_P.find_key(O.ref(),P.ref()) & (O_P.KT='' | O_P.LS='' | O_P.BL='')
      || O_P.LS:='T';
         O_P.KT:={? FUNKCJE.TESTKRYT() || 'T' || 'N' ?};
         O_P.BL:='N';
         O_P.put()
      ?}
   ?};
   _loop:=_RS.next()
!};
prgs_clr();

P.cntx_pop();
O.cntx_pop();
O_P.cntx_pop();
~~


\ds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zmiany wymagane przez funkcje obsługi tabeli DS
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Weryfikujemy licencję na Kadry, po stronie Xpertis parametr 7 jest ustawiony na wartość 'N'.
{? ~exec('lic','#b_domain','PKD') & ~exec('lic','#b_domain','PPL')
|| return(~~)
?};

:: Pomijamy wykonanie dla firmy 000
FIRMA.cntx_psh();
{? REF.WFIRM & REF.FIRMA().SYMBOL='000'
|| FIRMA.cntx_pop();
   return(~~)
?};
FIRMA.cntx_pop();

RA_VAL.cntx_psh();
RA_VAL.index('RA_VAL');
RA_VAL.prefix('S',197);
{? RA_VAL.first()
|| {!
   |? RA_VAL.del()
   !}
?};
RA_VAL.cntx_pop();

exec('mod_attr','rubatr',197,19,197,'Kontrola dyscypliny pracy');
   exec('add_attr','rubatr',197,1971,'Limity opieki (Art. 188)',1,'',,13);
   exec('add_use','rubatr',1971,13);
      exec('add_attr','rubatr',1971,19711,'Limit dni',1,'',2,13);
      exec('add_use','rubatr',19711,13);
      exec('add_attr','rubatr',1971,19712,'Limit godzin',1,'',16,13);
      exec('add_use','rubatr',19712,16,13);

:: pozbywamy się atrybutu 198 bo zastąpiony jest przez 19712, przepisujemy tam przypięte rubryki
RA_DEF.cntx_psh();
RA_DEF.index('RODZAJ');
RA_DEF.prefix('S',198);
{? RA_DEF.first()
|| RA_USE.cntx_psh;
   RA_USE.index('RA_USE');
   RA_USE.prefix(RA_DEF.ref());
   _loop:=RA_USE.first();
   {!
   |? _loop
   |! RA_DEF.cntx_psh();
      exec('add_use','rubatr',19712,RA_USE.R().RN);
      RA_DEF.cntx_pop();
      _loop:={? RA_USE.del || 1 ||  RA_USE.next() ?}
   !};
   RA_USE.cntx_pop;
   RA_VAL.cntx_psh();
   RA_VAL.index('UNIQUE');
   RA_VAL.prefix(RA_DEF.ref());
   _loop:=RA_VAL.first();
   {!
   |? _loop
   |! _loop:={? RA_VAL.del || 1 ||  RA_VAL.next() ?}
   !};
   RA_VAL.cntx_pop();
   RA_GRPP.cntx_psh();
   RA_GRPP.index('RA_DEF');
   RA_GRPP.prefix(RA_DEF.ref());
   _loop:=RA_GRPP.first();
   {!
   |? _loop
   |! _loop:={? RA_GRPP.del || 1 ||  RA_GRPP.next() ?}
   !};
   RA_GRPP.cntx_pop();
   RA_DEF.del()
?};
RA_DEF.cntx_pop();
~~


\is_wypl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnienie danych w tabeli IS_WYPL i IS_ROZL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
IS_WYPL.clear();
IS_WYPL.for_each("IS_WYPL.put()",1);
~~


\kal_def_gr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Uzupełnienie pola KAL_DEF.GR po zmianie typu z REAL na TIME.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: ze względu na sprawdzanie pola TYPWS oraz synchronizację do portaluHR, która na tym etapie jest niepożądana
:: wyłączamy triggery tabeli KAL_DEF (chcemy przepisać wszystko co było w Xpertisie w takim stanie jaki był)
KAL_DEF.trig_off('*','*');
KAL_ROK.cntx_psh();
KAL_ROK.prefix();
KAL_ROK.for_each("exec('akt_rok','kaledit',KAL_ROK.NAZWA,KAL_ROK.ROK)",1);
KAL_ROK.cntx_pop();
:: przywracamy triggery tabeli KAL_DEF
KAL_DEF.trig_on('*','*')


\es_metody
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Modyfikacje pola MA.T i modyfikacja pól MA.PL, MA.PD, MA.N
::----------------------------------------------------------------------------------------------------------------------
MA.prefix();
MA.for_each("{? MA.T='L' || MA.T:='Liniowa'
             |? MA.T='D' || MA.T:='Degresywna'
             |? MA.T='N' || MA.T:='Naturalna'
             |? MA.T='R' || MA.T:='Przyspieszona'
             |? MA.T='J' || MA.T:='Jednorazowa'
             ?};
             {? MA.RODZAJ='F'
             || {? 1+MA.T='L' & MA.K<>'UJF' & MA.K<>'UJB' & MA.K<>'BNB' & MA.K<>'BNF' & MA.K<>'ZAF' & MA.K<>'ZAB'
                   & MA.PL<>'SRST.WARF' || MA.PL:='SRST.WARF'
                |? 1+MA.T='L' & MA.K='UJF' & MA.PL<>'SRST.WARF*12000' || MA.PL:='SRST.WARF*12000'
                |? 1+MA.T='L' & (MA.K='ZAF' | MA.K='ZAB') || MA.PL:='0'
                |? 1+MA.T='D' & MA.PD<>'SRD.PodstDegrFin()' || MA.PD:='SRD.PodstDegrFin()' ; MA.PL:='SRST.WARF'
                |? 1+MA.T='N' & MA.PL<>'SRST.WARF' || MA.PL:='SRST.WARF'
                ?};
                MA.cntx_psh(); MA.index('MA'); MA.prefix(); _found:=0;
                {? MA.K='LIF' & ~MA.find_key('LIB') || MA.cntx_pop(); _found:=1; MA.K:='LIB' ?};
                {? MA.K='UJF' & ~MA.find_key('UJB') || MA.cntx_pop(); _found:=1; MA.K:='UJB' ?};
                {? MA.K='BNF' & ~MA.find_key('BNB') || MA.cntx_pop(); _found:=1; MA.K:='BNB' ?};
                {? MA.K='ZAF' & ~MA.find_key('ZAB') || MA.cntx_pop(); _found:=1; MA.K:='ZAB' ?};
                {? MA.K='LDF' & ~MA.find_key('LDB') || MA.cntx_pop(); _found:=1; MA.K:='LDB' ?};
                {? MA.K='DFR' & ~MA.find_key('DFB') || MA.cntx_pop(); _found:=1; MA.K:='DFB' ?};
                {? ~_found || MA.cntx_pop() ?}
             |? MA.RODZAJ='P'
             || {? 1+MA.T='L' & MA.K<>'UJP' & MA.K<>'BNP' & MA.K<>'ZAP' & MA.PL<>'SRST.WARP' || MA.PL:='SRST.WARP'
                |? 1+MA.T='L' & MA.K='UJP' & MA.PL<>'SRST.WARP*12000' || MA.PL:='SRST.WARP*12000'
                |? 1+MA.T='L' & MA.K='ZAP' || MA.PL:='0'
                |? 1+MA.T='D' & MA.PD<>'SRD.PodstDegrPod()' || MA.PD:='SRD.PodstDegrPod()'; MA.PL:='SRST.WARP'
                ?}
             ?};
             {? MA.NOSEZON='' || MA.NOSEZON:='N' ?};
             MA.put()",1)


\es_sez_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: import schematów sezonów amortyzacji
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_fn:='sez_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
||
   return(0)
?};

progress(,'Import schematów sezonów amortyzacji...'@,'Trwa import danych'@,1);

SEZ.cntx_psh();
SEZ.index('KOD');
SEZ.prefix();
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      _tab:=spli_str(_wiersz,'@');
      {? obj_len(_tab)>1 & ~SEZ.find_key(REF.FIRMA,_tab[1])
      || SEZ.blank();
         SEZ.FIRMA:=REF.FIRMA;
         SEZ.KOD:=_tab[1];
         SEZ.OPIS:=_tab[2];
         SEZ.LM:=#_tab[3];
         SEZ.M1:=_tab[4];
         SEZ.M2:=_tab[5];
         SEZ.M3:=_tab[6];
         SEZ.M4:=_tab[7];
         SEZ.M5:=_tab[8];
         SEZ.M6:=_tab[9];
         SEZ.M7:=_tab[10];
         SEZ.M8:=_tab[11];
         SEZ.M9:=_tab[12];
         SEZ.M10:=_tab[13];
         SEZ.M11:=_tab[14];
         SEZ.M12:=_tab[15];
         SEZ.add(1)
      ?};
      obj_del(_tab)
   !};
   fclose(_f)
?};
SEZ.cntx_pop()


\k__poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1509/0043
::       Usuwa nadmiarowe rekordy w tabeli K__POZ
::----------------------------------------------------------------------------------------------------------------------
_tab:=K__POZ.names();
{? _tab.first()
|| FUN.prg_start(_tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? K__POZ.use(_tab.NAME);
      K__POZ.index('K__NAG');
      K__POZ.prefix();
      K__WAR.use('yx'+(_tab.NAME+6));
      K__WAR.index('K__POZ');
      {? K__POZ.first()
      || K__POZ.K__NAG();
         _maska:=exec('maska','control')-2;
         {!
         |? _del:=0;
            {? K__POZ.WART=0 & K__POZ.WART_N=0 & K__POZ.WART_NB=0
            || K__WAR.prefix(K__POZ.ref());
               {? ~K__WAR.first()
               || _del:=K__POZ.del(,1)
               ?}
            ?};
            {? _del=0
            || _new:=_maska+form(K__POZ.OKRES().NR,-2);
               {? 2-_tab.NAME<>_new
               || K__POZ.cntx_psh();
                  K__POZ.use('yb'+_new);
                  K__POZ.prefix();
                  _ref:={? K__POZ.add() || K__POZ.ref() || null ?};
                  K__POZ.cntx_pop();
                  {? _ref
                  || K__WAR.prefix(K__POZ.ref());
                     {? K__WAR.first()
                     || {!
                        |? K__WAR.cntx_psh();
                           K__WAR.use('yx'+_new);
                           K__WAR.prefix();
                           K__WAR.K__POZ:=_ref;
                           K__WAR.add();
                           K__WAR.cntx_pop();
                           K__WAR.del()
                        !}
                     ?};
                     _del:=K__POZ.del(,1);
                     {? _del
                     || _del=2
                     || K__POZ.next()
                     ?}
                  ?}
               || K__POZ.next()
               ?}
            || _del=2
            ?}
         !}
      ?};
      FUN.prg_next();
      _tab.next()
   !};
   FUN.prg_stop()
?};
1


\es_import_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import i modyfikacje danych środków trwałych (globalne i dla firmy)
::----------------------------------------------------------------------------------------------------------------------
exec('es_g_import','transfer');
exec('es_import','transfer')


\es_clear
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.14]
:: OPIS:
::----------------------------------------------------------------------------------------------------------------------
exec('es_init','transfer');
TST.erase; TSR.erase; TSK.erase;
SRSR.prefix();
SRSR.for_each("SRSR.DOKPRZ:=null; SRSR.DOKSKR:=null; SRSR.put");
SAM.prefix();
SAM.for_each("SAM.SRSR:=null; SAM.put");
_KTRWP:=KTRWP.names();
{? _KTRWP.first()
|| {! |?
      KTRWP.use(_KTRWP.NAME);
      KTRWP.prefix();
      KTRWP.for_each("{? KTRWP.SRDO<>null || KTRWP.SRDO:=null; KTRWP.put() ?}");
      _KTRWP.next()
   !}
?};
KTRD.erase();
SRXD.erase;
SRDZ.erase();
ZASOB_ZM.erase();
NRKRTSIM.erase();
POJAZDY.erase();
SAM.erase();
SRDO.erase; SRDT.erase;
SRSW.erase;
SRZF.for_each("SRZF.SRDO:=null; SRZF.put()");
SRZF.erase; SRZD.erase;
SRST.erase; SRSR.erase();
KKOSZ.erase();
SRDT.erase();
SRXA.erase;SRXP.erase;SRXN.erase;SRXI.erase();
MA.prefix();
MA.for_each("{? MA.RODZAJ='F'
             || {? MA.K='LIB' || MA.K:='LIF'
                |? MA.K='UJB' || MA.K:='UJF'
                |? MA.K='BNB' || MA.K:='BNF'
                |? MA.K='ZAB' || MA.K:='ZAF'
                |? MA.K='LDB' || MA.K:='LDF'
                |? MA.K='DFB' || MA.K:='DFR'
                ?};
                MA.put()
             ?}
           ");
:: czyszczenie okresów FST
_obszar:=exec('szuk_b_dom','parses','FST');
OKR_OBSZ.cntx_psh();
OKR_OBSZ.index('OKRO_ES');
OKR_OBSZ.prefix(REF.FIRMA,_obszar);
{? OKR_OBSZ.first()
|| {! |? OKR_OBSZ.del() !}
?};
OKR_OBSZ.cntx_pop()


\es_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Ustawienia zmiennych i obiektów dla środków trwałych
::----------------------------------------------------------------------------------------------------------------------
exec('maski','srodobj');
exec('SRD','object');
exec('BUF','object');
exec('BUFR','object');
exec('BUFSP','object');
exec('KOMM','#object');
exec('STR','#object');
SRD.FST:=exec('szuk_b_dom','parses','FST')


\es_g_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import i modyfikacje danych środków trwałych (globalnie)
::----------------------------------------------------------------------------------------------------------------------
exec('es_init','transfer');
exec('es_par205','transfer')


\es_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import i modyfikacje danych środków trwałych (dla każdej firmy)
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('es_pre_test','transfer') || return(0) ?};
exec('es_init','transfer');
exec('kk_transfer','transfer');
exec('es_sez_import','transfer');
exec('es_sied_import','transfer');
exec('es_pomi_import','transfer');
exec('MA_NJP','transfer');
exec('es_zskon_import','transfer');
exec('es_kkosz_import','transfer');
exec('srdt_new','transfer');
exec('es_typd_import','transfer');
exec('es_srsr_import','transfer');
exec('es_srst_import','transfer');
exec('es_srsr','transfer');
exec('es_srst','transfer');
exec('es_okresy_read','transfer');
exec('okr_add','transfer');
exec('es_okresy_import','transfer');
exec('es_ppst_init','transfer');
exec('es_stany_uzup','transfer');
exec('es_klas_import','transfer');
exec('es_tsr_import','transfer');
exec('es_adok_import','transfer');
exec('es_adok','transfer');
exec('es_zmia_import','transfer');
exec('es_zmia','transfer');
exec('es_skld_import','transfer');
exec('es_skld','transfer');
exec('es_doku_import','transfer');
exec('es_doku','transfer');
exec('es_dokp_import','transfer');
exec('es_dokp','transfer');
exec('es_dew_import','transfer');
exec('es_zf_import','transfer');
exec('es_zfsr_import','transfer');
exec('es_zfsr','transfer');
exec('es_zfsrodp','transfer');
exec('srzd_rfresh','transfer');
exec('es_stany_nal','transfer');
exec('uzup_bo','transfer');
exec('es_samid_import','transfer');
exec('es_ktrwp_import','transfer');
exec('parwyd_uzup','transfer');
exec('es_xi_import','transfer');
exec('es_ina_loop','transfer');
exec('es_std_loop','transfer');
exec('es_uz_dokinw','transfer');
exec('es_dok_fks','transfer1');
exec('std_srdo','transfer');
exec('grupa1','transfer');
exec('es_atr_erase','transfer1');
exec('es_atruse_import','transfer1');
exec('es_atruse','transfer1');
exec('es_wyre_import','transfer1');
exec('es_wyre','transfer1');
exec('es_atrdefwd_import','transfer1');
exec('es_atrdefwd_update','transfer1');
exec('es_atrdef','transfer1');
prgs_clr();
1


\kk_transfer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Transfer tabeli KK, modyfikacja pola SYSTEM i FIRMA (dla firmy 001)
::----------------------------------------------------------------------------------------------------------------------
KK.prefix();
KK.for_each(
   "  _put:=1;
      {? KK.SYSTEM='ESTRA' | KK.SYSTEM='F' || KK.SYSTEM:='FST'
      |? KK.SYSTEM='KALI' || KK.SYSTEM:='PPL'
      |? KK.SYSTEM='EMAG' || KK.SYSTEM:='LMG'
      || _put:=0
      ?};
      {? KK.FIRMA=null || KK.FIRMA:=REF.FIRMA; _put:=1 ?};
      {? _put || KK.put() ?}
   ",1
)


\graktzat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Import definicji grupowej aktualizacji zatrudnienia.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fn:='grupetat.txt';
{? ~fexists(_fn,1)
|| return(0)
?};

exec(,'_misc');
{? var_pres('MS')<>type_of(@.CLASS.MISC)
|| MS:=obj_new(@.CLASS.MISC)
?};

_tab:=tab_tmp(1,
   'NA','STRING[40]','Nazwa',
   'T1','STRING[2]', 'Typ',
   'K1','REAL',      'Wartość',
   'T2','STRING[2]', 'Typ',
   'K2','REAL',      'Wartość',
   'T3','STRING[2]', 'Typ',
   'K3','REAL',      'Wartość',
   'ZR','STRING[1]', 'Rodzaj',
   'ZP','INTEGER',   'Precyzja'
);

MS.import(_fn,_tab);
{? ~_tab.first()
|| return()
?};

_nz:='**';
GRAKTZAT.cntx_psh();
GRAKTZAT.index('NAZWA');
GRAKTZAT.prefix(REF.FIRMA);
_prg_start:=_tab.size();
{? _prg_start || FUN.prg_start(_tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? {? ~GRAKTZAT.find_key(_tab.NA,)
   || GRAKTZAT.blank();
      GRAKTZAT.NAZWA:=_tab.NA;
      {! _lp:=1 .. 3
      |! _txw:=($('_a.T'+$_lp))(_tab);
         {? _txw<>_nz
         || ($('GRAKTZAT.S'+$_lp+'A:=_a'))(_txw);
            ($('GRAKTZAT.S'+$_lp+'W:=_a'))(($('_a.K'+$_lp))(_tab));
            ($('GRAKTZAT.S'+$_lp+'Z:=_a'))(_tab.ZR);
            ($('GRAKTZAT.S'+$_lp+'P:=_a'))(_tab.ZP)
         ?}
      !};
      GRAKTZAT.add()
   ?};
   FUN.prg_next();
   _tab.next()
!};
{? _prg_start || FUN.prg_stop() ?};
GRAKTZAT.cntx_pop();
~~


\par_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Transfer tabeli PAR_NAG
::----------------------------------------------------------------------------------------------------------------------
PAR_NAG.cntx_psh();
_tab:=PAR_NAG.names();
{? _tab.first()
|| {!
   |? PAR_NAG.use(_tab.NAME); PAR_NAG.prefix();
      PAR_NAG.for_each("{? (PAR_NAG.TYP='K' | PAR_NAG.TYP='S' | PAR_NAG.TYP='F') & PAR_NAG.ST_REJ='' & PAR_NAG.ZN<>''
                        || {? PAR_NAG.ZN='Z'
                           || PAR_NAG.ST_REJ:=PAR_NAG.ST_AKC:=PAR_NAG.ST_DEK:='T'
                           |? PAR_NAG.ZN='T'
                           || PAR_NAG.ST_REJ:='T'; PAR_NAG.ST_AKC:=PAR_NAG.ST_DEK:='N'
                           || PAR_NAG.ST_REJ:=PAR_NAG.ST_AKC:=PAR_NAG.ST_DEK:='N'
                           ?};
                           PAR_NAG.put()
                        ?}
                       ",1);
      _tab.next()
   !}
?};
PAR_NAG.cntx_pop();
1


\ser_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Transfer tabeli SER_NAG
::----------------------------------------------------------------------------------------------------------------------
SER_NAG.cntx_psh(); SER_NAG.prefix();
SER_NAG.for_each("{? SER_NAG.ST_AKC='' || SER_NAG.ST_AKC:='N' ?};
                  {? SER_NAG.ST_DEK='' || SER_NAG.ST_DEK:='N' ?};
                  {? SER_NAG.ST_POT='' || SER_NAG.ST_POT:='N' ?};
                  {? SER_NAG.REJ || SER_NAG.ST_DEK:=SER_NAG.ST_AKC:='T' ?};
                  {? SER_NAG.ID<>'' || SER_NAG.ST_AKC:='T' ?};
                  SER_NAG.put()
                 ",1);
SER_NAG.cntx_pop();
1


\dokum_to_zalacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła transferująca wybrane załączniki personelowe z tabeli DOKUM do tabeli ZALACZ.
::       Formuła wewnętrzna - poprawność parametrów nie jest weryfikowana.
::   WE: _a [TABLE]  - Uchwyt tabeli, z którą związane są załączniki.
::       _b [NUMBER] - Czy załaczniki są związane z pracownikiem?
::                     Zakładamy, że wszystkie załączniki personelowe są związane z odpowiednim rekordem tabeli OSOBA.
::       _c [STRING] - Nazwa typu załącznika.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_czyP:=_b;
_nazwa:=_c;

_typ:=exec('slo_naz','ext_slo','ZAL',_nazwa);

_TAB.cntx_psh();
_TAB.prefix();
{? _TAB.first()
|| {? _czyP
   || OSOBA.cntx_psh();
      OSOBA.prefix()
   ?};
   ZALACZ.cntx_psh();
   ZALACZ.index('NAG');
   ZALACZ.clear();
   DOKUM.cntx_psh();
   DOKUM.index('DOKUM');
   _firma:=exec('ref_firma','ustawienia');
   FUN.prg_start(_TAB.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? DOKUM.prefix(_firma,$_TAB.ref(),);
      {? DOKUM.first()
      || do();
         {!
         |? ZALACZ.blank();
            ZALACZ.ZAL:=DOKUM.DOKUM;
            ZALACZ.DATA:=DOKUM.DATA;
            ZALACZ.ZAL_NAME:=DOKUM.KR_OP;
            ZALACZ.TYP_ZAL:=_typ;
            ZALACZ.RODZAJ:=2-!_TAB;
            ZALACZ.OSOBA:=_TAB.OSOBA;
            {? _czyP
            || ZALACZ.P:=_TAB.OSOBA().P
            ?};
            ZALACZ.NAG:=_TAB.uidref();
            ZALACZ.add();
            {? var_pres('IDADD',DOKUM)=39
            || _uid:=DOKUM.uidref(); _rr:=DOKUM.del(); exec('dokumlog_del','zbl_dok',_uid)
            || _rr:=DOKUM.del()
            ?};
            _rr
         !};
         end()
      ?};
      FUN.prg_next();
      _TAB.next()
   !};
   FUN.prg_stop();
   DOKUM.cntx_pop();
   ZALACZ.cntx_pop();
   {? _czyP
   || OSOBA.cntx_pop()
   ?}
?};
_TAB.cntx_pop();
~~


\pit12o_zalacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Tranfer załączników dla tabeli PIT12O.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('dokum_to_zalacz','transfer',PIT12O,0,'Oświadczenie PIT-12')


\os_pab_zalacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Tranfer załączników dla tabeli OS_PAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('dokum_to_zalacz','transfer',OS_PAB,0,'Oświadczenie dotyczące kosztów z praw autorskich')


\es_par205
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Usuwa zbędny w nowej wersji parametr 205
::----------------------------------------------------------------------------------------------------------------------
exec('del','transfer',,205)


\psto_ud_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PT [17.00]
:: OPIS: Wypełnienie pola złączeniowego UD_SKL w tabeli PSTO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PSTO.cntx_psh();
PSTO.prefix();
PSTO.for_each("{? PSTO.UD_SKL=null || PSTO.UD_SKL:=PSTO.STO().UD_SKL; PSTO.put ?}",1);
PSTO.cntx_pop();
~~


\n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Uzupełnienie nowych pól w tabeli N.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
TRIG_OFF.N:='T';

_formula:='';
{? var_pres('PARTDAY',N)>0
|| _formula+="{? N.PARTDAY='' || N.PARTDAY:='N'; _put+=1 ?}; "
?};
{? var_pres('NRG_AUTO',N)>0
|| _formula+="{? N.NRG_AUTO='' || N.NRG_AUTO:='T'; _put+=1 ?}; "
?};
{? _formula<>''
|| _formula:="_put:=0; "+_formula+"{? _put || N.put() ?}";
   N.cntx_psh();
   N.prefix();
   N.for_each($_formula,1);
   N.cntx_pop()
?};

TRIG_OFF.N:='';
~~


\par_pokr_r_rx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Uzupełnienie nowych pól w tabeli PAR_POKR (wyzwalacz zrobi to co trzeba).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PAR_POKR.cntx_psh();
PAR_POKR.prefix();
PAR_POKR.for_each("PAR_POKR.put()",1);
PAR_POKR.cntx_pop();
~~


\defa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uzupełnienie pola DEFA.LM_OPIS
::----------------------------------------------------------------------------------------------------------------------
DEFA.prefix();
DEFA.for_each("DEFA.put()",1);
~~


\vatdekrodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [17.00]
:: OPIS: Zmiana w polu RODZAJ deklaracji dla VAT-27 i VAT-7
::----------------------------------------------------------------------------------------------------------------------
VAT_DEK.cntx_psh();
VAT_DEK.index('VAT_DEK');
VAT_DEK.prefix();
{? VAT_DEK.first
|| FUN.prg_start(VAT_DEK.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? {? VAT_DEK.STATUS=''
      || BPMN.SYM_DOM:=VAT_DEK.NR().SYSTEM;
         VAT_DEK.STATUS:=exec('edek_stat','transfer')
      ?};
      {? VAT_DEK.TYP='VAT27' & VAT_DEK.RODZAJ='I'
      || VAT_DEK.RODZAJ:='M'; VAT_DEK.put()
      |? VAT_DEK.TYP='VAT7D' & VAT_DEK.RODZAJ='D'
      || VAT_DEK.RODZAJ:='Q'; VAT_DEK.put()
      || VAT_DEK.put()
      ?};
      FUN.prg_next();
      VAT_DEK.next()
   !};
   FUN.prg_stop()
?};
VAT_DEK.cntx_pop();
~~


\edek_stat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Zwraca status e-deklaracji
::----------------------------------------------------------------------------------------------------------------------
_typ:=VAT_DEK.TYP;
{? _typ+4='_KOR' || _typ:=_typ-4 ?};
_stat:='A';
E_DEK.cntx_psh();
E_DEK.index('E_DEK');
E_DEK.prefix(BPMN.SYM_DOM,_typ,VAT_DEK.ref());
{? E_DEK.first()
|| {!
   |? {? E_DEK.AKC='W' & _stat='A' || _stat:='W'
      |? E_DEK.AKC='T' & _stat<>'T' || _stat:='T'
      ?};
      E_DEK.next()
   !}
?};
E_DEK.cntx_pop();
_stat


\fiks_07
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1508/0044
::       Korekta deklaracji VAT-7 w wersji 15 - błąd 408 przy pobieraniu UPO
::  OLD: \fiks_05/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.index('VER_NR'); VAT_VER.prefix('FKS','VAT7','VAT7',15);
{? VAT_VER.first()
|| ISTDEF.index('DATA'); ISTDEF.prefix('FKS','D','VAT7',VAT_VER.ref());
   {? ISTDEF.first()
   || ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref());
      {? ISTDEFS.find_key('Deklaracja',)
      || ISTDEFI.index('ISTDEFS');
         ISTDEFI.prefix(ISTDEFS.ref(),'xmlns:zzu',);
         {? ~ISTDEFI.first()
         || ISTDEFI.index('LP'); ISTDEFI.prefix(ISTDEFS.ref());
            {? ISTDEFI.last()
            || ISTDEFI.LP:=ISTDEFI.LP+1;
               ISTDEFI.NAZ:='xmlns:zzu';
               ISTDEFI.REGULY:='\'http://crd.gov.pl/xml/schematy/dziedzinowe/mf/2011/10/07/eD/ORDZU/\'';
               ISTDEFI.add()
            ?}
         ?}
      ?}
   ?}
?}


\fiks_06
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1508/0050
::       E-deklaracje VAT-7, VAT-7D - niewłaściwe ujęcie kwot w załaczniakch VAT-ZZ, VAT-ZT, NAD-ZP
::  OLD: \fiks_06/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_06a','transfer','VAT7',15,'vzz:P_9',54);
exec('fiks_06a','transfer','VAT7',15,'vzt:P_10',55);

exec('fiks_06a','transfer','VAT7D',5,'vzz:P_9',57);
exec('fiks_06a','transfer','VAT7D',5,'vzt:P_10',58);

exec('fiks_06a','transfer','VAT7D',6,'vzz:P_9',60);
exec('fiks_06a','transfer','VAT7D',6,'vzt:P_10',61);
exec('fiks_06a','transfer','VAT7D',6,'znzp:P_8',57);
1


\fiks_06a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Formula pomocnicza do fiks_06
::   WE: _a - typ deklaracji
::       _b - nr deklaracji
::       _c - pozyca deklaracji
::       _d - nr pola
::  OLD: \fiks_06a/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.index('VER_NR'); VAT_VER.prefix('FKS',_a,_a,_b);
{? VAT_VER.first()
|| ISTDEF.index('DATA'); ISTDEF.prefix('FKS','D',_a,VAT_VER.ref());
   {? ISTDEF.first()
   || ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref());
      {? ISTDEFS.find_key(_c,)
      || ISTDEFS.REGULY:='exec(\'poz_edek\',\'xml\','+$_d+')';
         ISTDEFS.put()
      ?}
   ?}
?}


\fiks_15
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1609/0011
::       JPK Wykryte błędy odnośnie plików JPK_FA, JPK_WB skutkujące negatywnym wynikiem weryfikacji w aplikacji MF
::  OLD: \fiks_15/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','FA',null(),date(2016,03,11));
{? ISTDEF.first()
|| ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref);
   {? ISTDEFS.find_key(29)
   || ISTDEFS.REGULY:='exec(\'fa_datad\',\'jpk\')';
      ISTDEFS.put
   ?};
   {? ISTDEFS.find_key(31)
   || ISTDEFS.REGULY:='exec(\'fa_ele\',\'jpk\')';
      ISTDEFS.put
   ?};
   {? ISTDEFS.find_key(33)
   || ISTDEFS.REGULY:='exec(\'fa_ele\',\'jpk\')';
      ISTDEFS.put
   ?}
?};
ISTDEF.prefix('FKS','J','WB',null(),date(2016,03,11));
{? ISTDEF.first()
|| ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref);
   {? ISTDEFS.find_key(12)
   || ISTDEFS.REGULY:='exec(\'wb_dataop\',\'jpk\')';
      ISTDEFS.put
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\fiks_16
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1609/0051
::       JPK: JPK_VAT - pole DataSprzedazy wypełnione błędną wartością 0000/00/00
::  OLD: \fiks_16/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','VAT',null(),date(2016,03,11));
{? ISTDEF.first()
|| ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref);
   {? ISTDEFS.find_key(30)
   || ISTDEFS.REGULY:='{? VAT_PS.DATA<>VAT_PS.DATA2 & VAT_PS.DATA2<>date(0,0,0) || STR.gsub($VAT_PS.DATA2,\'/\',\'-\') || \'\' ?}';
      ISTDEFS.put
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\fiks_17
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1609/0059
::       JPK: JPK_FA Błędnie wyświetlana ilość dla przypadku więcej niż 2 miejsca po przecinku
::  OLD: \fiks_17/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','FA',null(),date(2016,03,11));
{? ISTDEF.first()
|| ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref);
   {? ISTDEFS.find_key(14)
   || ISTDEFS.LICZ:=6;
      ISTDEFS.put
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\fiks_18
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1609/0063
::       Zaimportowane przelewy wypadają z filtra "znikają"
::  OLD: \fiks_18/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
PW.cntx_psh(); _names:=PW.names();
{? _names.first()
|| {! |?
      PW.use(_names.NAME); PW.prefix();
      echo('Przetwarzanie tabeli PW maska %1 ...'@[_names.NAME]);
      PW.for_each("PW.put()");
      _names.next()
   !}
?};
PW.cntx_pop();
echo();
~~


\kom_os_splata
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Aktualizacja nowego pola KOM_OS.SPLATA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KOM_OS.trig_off('*','*');
KOM_OS.cntx_psh();
KOM_OS.prefix();
KOM_SP.cntx_psh();
KOM_SP.index('KOM_SP');
KOM_OS.for_each("
   _splata:=0;
   KOM_SP.prefix(KOM_OS.ref());
   {? KOM_SP.first()
   || {!
      |? _splata+=KOM_SP.KW;
         KOM_SP.next()
      !}
   ?};
   {? KOM_OS.SPLATA<>_splata
   || KOM_OS.SPLATA:=_splata;
      KOM_OS.put()
   ?}
",1);
KOM_SP.cntx_pop();
KOM_OS.cntx_pop();
KOM_OS.trig_on('*','*');
~~


\control_02
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1411/0030
::       Aktualizacja modulu e-deklaracji - usuwanie wpisow z settings.xml
::  OLD: \control_02/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
_f:=fopen('settings.xml','ur',1);
{? _f
|| _txt:='';
   _save:=0;
   {!
   |? _lin:=fread(_f);
      {? _lin<>'\n'
      || {? -_lin*'<cryptoproviders>'
         || _save:=1
         ?};
         {? _save
         || _txt+=_lin
         ?};
         1
      ?}
   !};
   fclose(_f);
   _dll:='';
   {!
   |? _p1:=(-_txt)*'<hardwareprovider>';
      {? _p1
      || _p2:=(-_txt)*'</hardwareprovider>';
         {? _p2
         || _v:=exec('xml2val','xml',(_p2-_p1)+(_p1-_txt),'URI');
            {? _v+4='.dll'
            || _dll+=_v+';'
            ?};
            _txt:=_p2-_txt;
            1
         ?}
      ?}
   !};
   exec('czytaj','#stalesys',,XINFO);
   XINFO.EDEK_DLL:=_dll-1;
   exec('zapisz','#stalesys',1,XINFO)
?};
1


\control_03
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1509/0043
::       Nadmiarowe rekordy w tabeli K__POZ
::  OLD: \control_03/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=K__POZ.names();
{? _tab.first()
|| FUN.prg_start(_tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? K__POZ.use(_tab.NAME);
      K__POZ.index('K__NAG');
      K__POZ.prefix();
      K__WAR.use('yx'+(_tab.NAME+6));
      K__WAR.index('K__POZ');
      {? K__POZ.first()
      || {!
         |? {? K__POZ.WART=0 & K__POZ.WART_N=0 & K__POZ.WART_NB=0
            || K__WAR.prefix(K__POZ.ref());
               {? ~K__WAR.first()
               || K__POZ.del()
               || K__POZ.next()
               ?}
            || K__POZ.next()
            ?}
         !}
      ?};
      FUN.prg_next();
      _tab.next()
   !};
   FUN.prg_stop()
?};
1


\control_04
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [17.00]
:: OPIS: kod - ER/WRT/XP/12.41/1601/0053
::  OLD: \control_04/napraw_f.fml
::       Model Personel a wersja wielofirmowa
::----------------------------------------------------------------------------------------------------------------------
UD_TYP.cntx_psh();
UD_SCH.cntx_psh();
UD_DEF.cntx_psh();
UD_POW.cntx_psh();

UD_SKL.clear();
UD_POW.clear();

UD_POW.index('SQL');
UD_DEF.index('PODTEC');UD_DEF.clear();
UD_TYP.index('SYMBOL'); UD_TYP.prefix();
{? UD_TYP.find_key('STANPRAC','STANPRAC')
|| _ud_typ:=UD_TYP.ref
|| _ud_typ:=exec('dodaj_ud_typ','schemat','STANPRAC','Pracownicy w controllingu',,'N','N')
?};
{? _ud_typ
|| {? var_pres('tab')>100 || &tab ?};
   tab:=sql('
      select OSOBA.NAZWISKO N, OSOBA.PIERWSZE I, OSOBA.PESEL, P.IP IP, P.REFERENCE P_REF, 0 NEW,
         UD_SKL.SYMBOL WYDZIAL, STN.ST ST, 0 RODZIC, F_ZATR.KOD F_ZATR
      from P join OSOBA join UD_SKL using(P.WYDZIAL,UD_SKL.REFERENCE) join STN join F_ZATR
      where P.ZA=\'T\' and P.FIRMA=:_a',
      exec('ref_firma','ustawienia')
   );
   UD_POW.index('SQL');
   {? tab.first()
   || FUN.prg_start(tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
      {!
      |? _sym:=tab.N+' '+tab.I;
         _dalej:=0;
         UD_POW.prefix(_ud_typ,tab.P_REF);
         {? UD_POW.first()
         || {!
            |? {? _sym=(+_sym)+UD_POW.OPIS
               || _dalej:=1;
                  {? 3+((2+(UD_POW.SYMBOL*'IP_'))-UD_POW.SYMBOL)<>REF.FIRMA().SYMBOL
                  || _new:={? tab.F_ZATR='P' || '' || tab.F_ZATR+'_' ?}+'IP_'+REF.FIRMA().SYMBOL+(('00000000'+$tab.IP)+8);
                     UD_SKL.index('SYMBOL'); UD_SKL.prefix(_ud_typ,UD_POW.SYMBOL);
                     {? UD_SKL.first() || _rskl:=UD_SKL.ref() ?};
                     UD_SKL.prefix();
                     {? UD_SKL.seek(_rskl)
                     || UD_SKL.SYMBOL:=_new; UD_SKL.put();
                         UD_DEF.index('SKLREF'); UD_DEF.prefix(_rskl);
                         {? UD_DEF.first() ||  UD_DEF.SYMBOL:=_new; UD_DEF.put() ?};
                         UD_POW.SYMBOL:=UD_SKL.SYMBOL;
                         UD_POW.put()
                     ?}
                  ?}
               ?};
               _dalej=0 & UD_POW.next()
            !}
         ?};
         FUN.prg_next();
         tab.next()
      !};
      FUN.prg_stop()
   ?};
   VAR_DEL.delete('tab')
?};
UD_TYP.cntx_pop();
UD_SCH.cntx_pop();
UD_POW.cntx_pop();
UD_DEF.cntx_pop();
1


\umlojn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Aktualizacja nowego pola UMLOJN.SPLATA (wykorzystanie wyzwalaczy).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
UMLOJN.cntx_psh();
UMLOJN.clear();
UMLOJN.for_each("UMLOJN.put()",1);
UMLOJN.cntx_pop();
~~


\ZGP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Nawija brakujące pola tabeli ZGP
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \ZGP/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

:: Wyłączam triggery
TRIG_OFF.ZGP:='T';
{? exec('get','#params',500611,2)='T'
|| exec('trig_ZGP','prod_rej',0)
?};

PX_STAGE.cntx_psh();
ZGP.cntx_psh();
ZGP.index('RTOPER');
ZGP.clear();
{? ZGP.first()
|| {!
   |?
      {? ZGP.PX_STAGE<>null()
      || ZGP.PX_STAGE();
         {? ZGP.TTM<>0 & PX_STAGE.TTM=0
         || PX_STAGE.TTM:=ZGP.TTM
         ?};
         {? ZGP.NKO<>0 & PX_STAGE.NKO=0
         || PX_STAGE.NKO:=ZGP.NKO
         ?}
      ?};

      {? ZGP.UID=''
      || ZGP.UID:=exec('uid','#blank')
      ?};
      {? ZGP.ILOSC=0
      || ZGP.ILOSC:=ZGP.NRZLP().ILNPRZ
      ?};
      {? ZGP.NAPRAW=''
      || ZGP.NAPRAW:='N'
      ?};
      {? ZGP.PLANUJ=''
      || ZGP.PLANUJ:='T'
      ?};
      {? ZGP.KONTROLA=''
      || ZGP.KONTROLA:='N'
      ?};
      {? ZGP.KJ_BAD=''
      || ZGP.KJ_BAD:='N'
      ?};
      _can_continue:=ZGP.put();
      ZGP.next() & _can_continue>0
   !}
?};
ZGP.cntx_pop();

:: Nawijam nowe pole do powiązania TPZtów
_ndx:=ZGP.ndx_tmp('',1,'TPZ',,,'NRPRZ',,,'NRZLP',,,'TPZREF',,);
{? _can_continue>0 & ZGP.first()
|| {!
   |?
      {? ZGP.TPZ<>'T'
      ||
         _uid:=ZGP.UID;
         ZGP.cntx_psh();
         ZGP.index(_ndx);
         ZGP.prefix('T',ZGP.NRPRZ,ZGP.NRZLP,ZGP.NRP);
         {? ZGP.first()
         || ZGP.UID_TPZ:=_uid;
            _can_continue:=ZGP.put()
         ?};
         ZGP.cntx_pop()
      ?};
      ZGP.next() & _can_continue>0
   !}
?};
ZGP.ndx_drop(_ndx);
PX_STAGE.cntx_pop();

:: Włączam triggery
TRIG_OFF.ZGP:='';
{? exec('get','#params',500611,2)='T'
|| exec('trig_ZGP','prod_rej',1)
?};

{? _can_continue>0
|| _result:=1
?};
_result


\TTOPER
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Nawija brakujące pola dla tabeli TTOPER
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \TTOPER/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

TTOPER.cntx_psh();
TTOPER.index('KOD');
TTOPER.clear();
{? TTOPER.first()
|| {!
   |? {? TTOPER.KOLOR='' || TTOPER.KOLOR:=exec('kolor_rand','#color') ?};
      {? TTOPER.KONTROLA='' || TTOPER.KONTROLA:='N' ?};
      {? TTOPER.KJ_BAD='' || TTOPER.KJ_BAD:='N' ?};
      {? TTOPER.FIX_NORM='' || TTOPER.FIX_NORM:='N' ?};
      {? TTOPER.BRYG='' || TTOPER.BRYG:='N' ?};
      {? TTOPER.PL_GRP='' || TTOPER.PL_GRP:='N' ?};
      {? TTOPER.WYK_FAST='' || TTOPER.WYK_FAST:='N' ?};
      {? TTOPER.NO_START='' || TTOPER.NO_START:='N' ?};
      _can_continue:=TTOPER.put();
      TTOPER.next() & _can_continue>0
   !}
?};
TTOPER.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\M
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Nawija brakujące pola dla tabeli M
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \M/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

M.cntx_psh();
M.index('MATKTM');
M.clear();
{? M.first()
|| {!
   |? {? M.KOLOR=''
      || M.KOLOR:=exec('kolor_rand','#color')
      ?};
      {? M.RODZO<>null & M.MGRP=null()
      || _mgrp:=exec('mgrp4rodzo','transfer',M.RODZO);
         {? exec('FindAndGet','#table',MGRP,_mgrp,,"MGR",null)<>M.MGR & M.MGR<>null()
         || M.MGRP:=_mgrp
         ?}
      ?};
      {? M.ABSTORE='' || M.ABSTORE:='N' ?};
      {? M.SETW='' || M.SETW:='W' ?};
      _can_continue:=M.put();
      M.next() & _can_continue>0
   !}
?};
M.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\PL_OPER
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Nawija brakujące pola tabeli PL_OPER
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \PL_OPER/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

PL_OPER.cntx_psh();
PL_OPER.index('TM_START');
PL_OPER.clear();
{? PL_OPER.first()
|| {!
   |? {? PL_OPER.UID=''|| PL_OPER.UID:=exec('uid','#blank') ?};
      {? PL_OPER.SINGLE='' || PL_OPER.SINGLE:='N' ?};
      _can_continue:=PL_OPER.put();
      PL_OPER.next() & _can_continue>0
   !}
?};
PL_OPER.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\ZLIM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Nawija brakujące pola tabeli ZLIM
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \ZLIM/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_formula:="
   _result:=0;
   _can_continue:=1;
   ZLIM.cntx_psh();
   ZLIM.index('RTMAT');
   ZLIM.clear();
   {? ZLIM.first()
   || {!
      |? _put:=0;
         {? ZLIM.UID=''
         || ZLIM.UID:=exec('uid','#blank');
            {? ZLIM.ZLEC().GENLIM='N' & ZLIM.ZLDOD<>null()
            || ZLIM.ZLEC==ZLIM.ZLDOD
            ?};
            _put:=1
         ?};
         {? ZLIM.ROZ<>'T' || ZLIM.ROZ:='N'; _put:=1 ?};
         _can_continue:={? _put || ZLIM.put() || 1 ?};
         ZLIM.next() & _can_continue>0
      !}
   ?};
   ZLIM.cntx_pop();
   {? _can_continue>0
   || _result:=1
   ?};
   _result
";
exec('for_each_mask','#table',ZLIM,_formula,,,,1,1)


\TOPER
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [12.46]
:: OPIS: Nawija brakujące pola tabeli TOPER
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \TOPER/skid_trn.fml
::  ORG: \TOPER/upgrade_2014.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

_names:=TOPER.names();

PX_STAGE.cntx_psh();
TOPER.cntx_psh();
{? _names.first()
|| FUN.prg_start(_names.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |?
      TOPER.use(_names.NAME);
      TOPER.index('UNROP');
      TOPER.prefix();
      {? TOPER.first()
      || {!
         |? _put:=0;
            {? TOPER.KONTROLA=''
            || TOPER.KONTROLA:='N';
               _put:=1
            ?};
            {? TOPER.KJ_BAD=''
            || TOPER.KJ_BAD:='N';
               _put:=1
            ?};
            {? TOPER.PX_STAGE<>null()
            || TOPER.PX_STAGE();
               {? TOPER.TTM<>0 & PX_STAGE.TTM=0
               || PX_STAGE.TTM:=TOPER.TTM;
                  _put:=1
               ?};
               {? TOPER.NKO<>0 & PX_STAGE.NKO=0
               || PX_STAGE.NKO:=TOPER.NKO;
                  _put:=1
               ?}
            ?};
            {? TOPER.FIX_NORM=''
            || TOPER.FIX_NORM:='N';
               _put:=1
            ?};
            {? _put || _can_continue:=TOPER.put() ?};
            _can_continue>0 & TOPER.next()
         !}
      ?};

::    ER/WRT/XP/12.41/1606/0027
      {? _can_continue>0
      || TOPER.index('TPZ');
         TOPER.prefix('T');
         {? TOPER.first()
         || {!
            |? TOPER.cntx_psh();
               TOPER.index('UNROP');
               TOPER.prefix(TOPER.TPZREF);
               {? TOPER.first()
               || _pfaz:=TOPER.PFAZ
               || _pfaz:=null()
               ?};
               TOPER.cntx_pop();
               {? TOPER.PFAZ<>_pfaz
               || TOPER.PFAZ:=_pfaz;
                  _can_continue:=TOPER.put()
               ?};
               _can_continue>0 & TOPER.next()
            !}
         ?}
      ?};

      FUN.prg_next();
      _can_continue>0 & _names.next()
   !};
   FUN.prg_stop()
?};
TOPER.cntx_pop();
PX_STAGE.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\BADSEH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnia brakujące pola w tabeli BADSEH
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \BADSEH/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;
BADSEH.cntx_psh();
BADSEH.index('NN');
BADSEH.prefix();
{? BADSEH.first()
|| {!
   |? {? BADSEH.TYP=''
      || BADSEH.TYP:='M'
      ?};
      _can_continue:=BADSEH.put();
      BADSEH.next() & _can_continue>0
   !}
?};
BADSEH.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\BADH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Uzupełnia brakujące pola w tabeli BADH
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \BADH/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;
_msk:=BADH.names();
_msk.clear();
BADH.trig_off('*','*');
BADH.cntx_psh();
ZLGD.cntx_psh();
ZLGD.prefix();
{? _msk.first()
|| {!
   |? BADH.use(_msk.NAME);
      BADH.index('NR');
      BADH.prefix();
      {? BADH.first()
      || {!
         |? _put:=0;
            {? BADH.TYP='' || BADH.TYP:='M'; _put:=1 ?};
            {? BADH.ZLGD<>null() & BADH.MZLGD='' || BADH.MZLGD:=ref_name(BADH.ZLGD); _put:=1 ?};
            {? BADH.ZLGD<>null() & BADH.TYP='C'
            || _mask:=ref_name(BADH.ZLGD);
               {? ZLGD.name()<>_mask || ZLGD.use(_mask); ZLGD.prefix() ?};
               {? ZLGD.seek(BADH.ZLGD)
               || BADH.MAD_DT:=ZLGD.DT;
                  BADH.MAD_USER:=ZLGD.USER;
                  _put:=1
               ?}
            ?};
            {? _put || _can_continue:=BADH.put() ?};
            BADH.next() & _can_continue>0
         !}
      ?};
      _msk.next()
   !}
?};
BADH.cntx_pop();
ZLGD.cntx_pop();
BADH.trig_on('*','*');
{? _can_continue>0 || _result:=1 ?};
_result


\ZLGD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Uzupełnia brakujące pola w tabeli ZLGD
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::  OLD: \ZLGD/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

PROD_REJ.cntx_psh();
:: Wyłączam triggery
TRIG_OFF.ZLGD:='T';
{? exec('get','#params',500611,2)='T'
|| exec('trig_ZLGD','prod_rej',0)
?};

_formula:="

   _result:=0;
   _can_continue:=1;

   ZLGD.cntx_psh();
   ZLGD.index('ZPARN');
   ZLGD.prefix();
   {? ZLGD.first()
   || {!
      |? _put:=0;
         {? ZLGD.ZAK=''
         || ZLGD.ZAK:='T';
            _put:=1
         ?};
         {? ZLGD.KJ_DONE=''
         || ZLGD.KJ_DONE:='T';
            _put:=1
         ?};
         {? ZLGD.P=null() & ZLGD.OS_VIEW<>null()
         || ZLGD.P:=exec('OS_VIEW2P','transfer',ZLGD.OS_VIEW);
            _put:=1
         ?};
         {? _put>0
         || _can_continue:=ZLGD.put()
         ?};
         {? ZLGD.ZGP<>null()
          & (PROD_REJ.index('ZGP'); PROD_REJ.prefix('ZL',ZLGD.ZGP); PROD_REJ.first() & PROD_REJ.START<>'T')
         || PROD_REJ.START:='T';
            PROD_REJ.put()
         |? ZLGD.GROP<>null()
          & (PROD_REJ.index('GROP'); PROD_REJ.prefix('ZL',ZLGD.GROP); PROD_REJ.first() & PROD_REJ.START<>'T')
         || PROD_REJ.START:='T';
            PROD_REJ.put()
         ?};
         ZLGD.next() & _can_continue>0
      !}
   ?};
   ZLGD.cntx_pop();
   {? _can_continue>0
   || _result:=1
   ?};
   _result
";

_result:=exec('for_each_mask','#table',ZLGD,_formula,,,,1,1);

:: Włączam triggery
TRIG_OFF.ZLGD:='';
{? exec('get','#params',500611,2)='T'
|| exec('trig_ZLGD','prod_rej',1)
?};
PROD_REJ.cntx_pop();
_result


\PROD_REJ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Uzupełnia brakujące pola w tabeli PROD_REJ
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::  OLD: \PROD_REJ/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
PROD_REJ.cntx_psh();
PROD_REJ.prefix();
_result:=PROD_REJ.for_each("
   _put:=0;
   {? PROD_REJ.KONTROLA=''
   || PROD_REJ.KONTROLA:='N';
      _put:=1
   ?};
   {? PROD_REJ.KJ_BAD=''
   || PROD_REJ.KJ_BAD:='N';
      _put:=1
   ?};
   {? _put || PROD_REJ.put() ?};
   ~~
",1);
PROD_REJ.cntx_pop();
_result


\PL_WYK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Uzupełnia brakujące pola w tabeli PL_WYK
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \PL_WYK/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;
PL_WYK.cntx_psh();
PL_WYK.index('TM_START');
PL_WYK.prefix();

:: Wyłączam triggery
TRIG_OFF.PL_WYK:='T';
{? exec('get','#params',500612,2)='T'
|| exec('trig_PL_WYK','prod_rej',0)
?};

{? PL_WYK.first()
|| {!
   |? _put:=0;
      {? PL_WYK.KJ_DONE=''
      || PL_WYK.KJ_DONE:='N';
         _put:=1
      ?};
      {? PL_WYK.P=null() & PL_WYK.OS_VIEW<>null()
      || PL_WYK.P:=exec('OS_VIEW2P','transfer',PL_WYK.OS_VIEW);
         _put:=1
      ?};
      {? _put>0
      || _can_continue:=PL_WYK.put()
      ?};
      PL_WYK.next() & _can_continue>0
   !}
?};

:: Włączam triggery
TRIG_OFF.PL_WYK:='';
{? exec('get','#params',500612,2)='T'
|| exec('trig_PL_WYK','prod_rej',1)
?};

PL_WYK.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\KPOZK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.46]
:: OPIS: Nawija brakujące pola tabeli KPOZK
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \KPOZK/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

KPOZK.cntx_psh();
KPOZK.index('KR');
KPOZK.clear();
{? KPOZK.first()
|| {!
   |? {? KPOZK.MANUAL=''
      || KPOZK.MANUAL:='N'
      ?};
      _can_continue:=KPOZK.put();
      KPOZK.next() & _can_continue>0
   !}
?};
KPOZK.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\ANZP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.46]
:: OPIS: Nawija brakujące pola tabeli ANZP
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \ANZP/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

ANZP.cntx_psh();
ANZP.index('NRARUB');
ANZP.clear();
{? ANZP.first()
|| {!
   |? {? ANZP.MANUAL=''
      || ANZP.MANUAL:='N'
      ?};
      _can_continue:=ANZP.put();
      ANZP.next() & _can_continue>0
   !}
?};
ANZP.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Transfer tabeli OKR
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
OKR.cntx_psh();
OKR.prefix(); OKR.for_each("OKR.ZAM:={? OKR.ZAM='TAK' || 'TTTT' || 'NNNN' ?}; OKR.put()",1);
OKR.cntx_pop()


\ma_fin_bil
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Zmiana nazwy metody amortyzacji 'finansowej' na 'bilansową'
::----------------------------------------------------------------------------------------------------------------------
MA.cntx_psh();
MA.prefix();
MA.for_each("MA.N:=gsub(MA.N,'finansowej','bilansowej');
             MA.N:=gsub(MA.N,'finansowa','bilansowa');
             MA.N:=gsub(MA.N,'finansowe','bilansowe');
             MA.N:=gsub(MA.N,'Finansowej','Bilansowej');
             MA.N:=gsub(MA.N,'Finansowa','Bilansowa');
             MA.N:=gsub(MA.N,'Finansowe','Bilansowe');
             MA.put()
            ",1);
MA.cntx_pop()


\atrdef
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Transfer tabeli ATRDEF, modyfikacja pola SYSTEM
::----------------------------------------------------------------------------------------------------------------------
ATRDEF.prefix();

:: usunięcie niepotrzebnych definicji cech
{? ATRDEF.first()
|| FUN.prg_start(ATRDEF.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? _del:=0;
      {? ATRDEF.SYSTEM='RCP' | ATRDEF.SYSTEM='ZKL'
      || {? ATRDEF.count()=0
         || _del:=1
         ?}
      ?};
      FUN.prg_next();
      {? _del || ATRDEF.del() || ATRDEF.next() ?}
   !};
   FUN.prg_stop()
?};

ATRDEF.for_each("
   {? ATRDEF.SYSTEM='KALI'
   || _cecha:=ATRDEF.TYP_CECH;
      _akr:=ATRDEF.AKRONIM;
      ATRDEF.cntx_psh();
      ATRDEF.index('TYP');
      ATRDEF.prefix('PPL',_cecha,_akr);
      {? ATRDEF.first()
      || ATRDEF.del()
      ?};
      ATRDEF.cntx_pop();
      ATRDEF.SYSTEM:='PPL'
   ?};
   ATRDEF.put()
",1)


\PX_NAST
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wszystkim przepisom nawija brakujące powiązania PX_NAST
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
:: Uzupełniam PX_NAST dla zleceń
ZL.cntx_psh();
ZL.index('TSYM');
ZL.prefix();
{? ZL.first()
|| {!
   |? {? ZL.RODZAJ<>'Z'
::    zlecen nadrzednych nie bierzemy pod uwage tylko proste i warsztatowe
      || exec('zgp2stage','px_nast',ZL.ref(),1,0)
      ?};
      ZL.next()
   !}
?};
ZL.cntx_pop();

:: Uzupełniam PX_NAST dla kart technologicznych
:: PxTex potrzebny do importu - jesli nie ma to tworze
{? var_pres('PxTex')<100
|| PxTex:=exec('PxTex_Create','px_tex',exec('get','#params',8055,1,OPERATOR.USER))
?};

PX_TEX.cntx_psh();
PX_TEX.index('ASYM');
PX_TEX.prefix('T');
{? PX_TEX.first()
||
   _impargs:=exec('import_toper_a','px_oper');
   _impargs.Complex:='T';
   _impargs.SIMULATE:=1;
   _impargs.SIM_FML:="

      _what:=_a;
      _args:=_b;

      _px_stage:=null();
      _result:=0;
      {? _what='PX_STAGE'
      ||
         _can_continue:=1;
         PX_STAGE.cntx_psh();
         {? _args.PX_TEXd<>null()
         || PX_STAGE.index('TEX_NR');
            PX_STAGE.prefix(_args.PX_TEXd,PX_STAGE.NR)
         |? _args.TKTLdest<>null()
         || PX_STAGE.index('TKTL_NR');
            PX_STAGE.prefix($_args.TKTLdest,PX_STAGE.NR)
         || _can_continue:=0
         ?};
         {? _can_continue>0
         || {? PX_STAGE.first()
            || _px_stage:=PX_STAGE.ref()
            ?};
            PX_STAGE.cntx_pop();
            PX_STAGE.prefix();
            _result:=PX_STAGE.seek(_px_stage)
         || PX_STAGE.cntx_pop()
         ?}
      || _result:=1
      ?};
      _result
   ";
   {!
   |?
      _impargs.NRNOP:=0;
      _impargs.Lp:=0;
      _impargs.Qcoef:=1;
      _impargs.STAGE_1:=1;
      _impargs.RECUR:=0;
      _impargs.LAST_STG:=null();
      _impargs.LAST_NR:=-1;
      _impargs.TKTLorg:=null();
      _impargs.IS_POLF:=0;
      _impargs.nToper:=null();

      {? PX_TEX.TKTL<>null() & PX_TEX.TKTL().TORW='T'
      ||
         {? var_pres('_nast')>100
         || obj_del(_nast)
         ?};
         _nast:=exec('pxnasttab','px_nast');
         {? PX_TEX.TKTL<>null()
         || _impargs.PX_TEXd:=null();
            _impargs.TKTLdest:=PX_TEX.TKTL;

::          Sprawdzam czy ilość TOPERów i PX_STAGE w technologii się zgadza,
::          jeśli tak to mamy do czynienia z przepisem prostym, w przeciwnym wypadku przepis złożony
            _size_stage:=0;
            _size_toper:=0;
            PX_STAGE.cntx_psh();
            PX_STAGE.index('TKTL_NR');
            PX_STAGE.prefix($PX_TEX.TKTL);
            _size_stage:=PX_STAGE.size();
            PX_STAGE.cntx_pop();

            TOPER.cntx_psh();
            TOPER.index('PZ');
            TOPER.prefix('T','N','P',PX_TEX.TKTL);
            _size_toper:=TOPER.size();
            TOPER.cntx_pop();
            {? _size_stage>_size_toper
            || _impargs.Complex:='T'
            || _impargs.Complex:='N'
            ?}
         || _impargs.PX_TEXd:=PX_TEX.ref();
            _impargs.TKTLdest:=null();
            _impargs.Complex:='N'
         ?};
         _impargs.TKTLsrc:=PX_TEX.TKTL;
         exec('import_toper','px_oper',_impargs,_nast);
         exec('importtoper','px_nast',_nast,TKTL.ref());
         PX_TEX.next()
      ?}
   !}
?};
PX_TEX.cntx_pop();
~~


\PX_STAGE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Nawija brakujące pola w tabeli PX_STAGE
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
PX_STAGE.clear();
PX_STAGE.for_each("PX_STAGE.put()");
~~


\params_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Usunięcie nieużywanych parametrów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametry 2-7 czy jest systemach
{! _par:=2..7
|! exec('del','transfer',,_par)
!};
exec('del','transfer',,11);
exec('del','transfer',,19);
{! _par:=21..24
|! exec('del','transfer',,_par)
!};
exec('del','transfer',,29,30,31);
exec('del','transfer',,43,48);
{! _par:=51..61
|! exec('del','transfer',,_par)
!};
exec('del','transfer',,64,65);
exec('del','transfer',,71,78,89);
:: 182 - Kadry i płace: kontrola unikalności kodu i jednostki księgowej zleceniobiorcy.
:: 183 - Kadry i płace: lista pracowników ze zmianą zakresu danych
:: 184 - Kadry i płace: powiadom z wyprzedzeniem o końcu umowy o pracę.
:: 185 - Kadry i płace: początek okresu kontroli nieaktualnych badań i szkoleń.
:: 186 - Kadry i płace: koniec okresu kontroli nieaktualnych badań i szkoleń.
:: 187 - Kadry i płace: powiadom z wyprzedzeniem o przekroczeniu 4 miesięcy choroby
exec('del','transfer',,182,183,184,185,186,187);

:: Dekretacje z poszczególnych systemów
{! _par:=300..306
|! exec('del','transfer',,_par)
!};

:: parametry remontów i projektów
{! _par:=101..103
|! exec('del','transfer',,_par)
!};

{! _par:=112..113
|! exec('del','transfer',,_par)
!};

{! _par:=115..118
|! exec('del','transfer',,_par)
!};

{! _par:=120..124
|! exec('del','transfer',,_par)
!};

:: parametry Środków trwałych
exec('del','transfer',,205);
exec('del','transfer',,206);
{! _par:=201..203
|! exec('del','transfer',,_par)
!};

:: parametry dot. przelewów
exec('del','transfer',,67);
{! _par:=220..222
|! exec('del','transfer',,_par)
!};

exec('del','transfer',,31);
exec('del','transfer',,460);

:: Funkcjonalność ZKL-a została już częściowo przeniesiona - nie ma potrzeby usuwania wszystkich tych parametrów.
exec('del','transfer',,399);
::{! _par:=399..426
::|! exec('del','transfer',,_par)
::!};
exec('del','transfer',,420,423,424,425,426,428,429,430);

exec('del','transfer',,192,196,198,199,231,245,249,257,260);
{! _par:=453..456
|! exec('del','transfer',,_par)
!};

exec('del','transfer',,289);

exec('del','transfer',,17,65,88,94,463,464,466,467,468,469,470,471,493,495);

~~


\params_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Ustawienie nazw parametrów
::  ORG: \par_skid/upgrade_1714.fml
::  ORG: \skid_par/upgrade_1802.fml
::  ORG: \skid_par/upgrade_1842.fml
::----------------------------------------------------------------------------------------------------------------------
exec('PAR_SKID','object');
PAR_SKID.set(9,1,1,'','T','Dopuszczalne waluty państw z unii walutowej');
PAR_SKID.set(11,1,1,'','N','Aktualizacja formuł potransferowych','''T - uruchamiana na starcie systemu'',''N - uruchamiana z obszaru roboczego''');

PAR_SKID.set(27,1,1,_opt:='WINDYK','T','Automatyczne wchodzenie w pozycje ostatniej analizy w działaniach windykacyjnych','''T'',''N''');
PAR_SKID.set(33,1,1,'','T','Wyświetlanie i wydruk kwot zapisów i obrotów kont wg podanego kursu');
PAR_SKID.set(35,1,1,'','T','Dostępnie wyróżniki klasyfikacyjne');
PAR_SKID.set(36,1,1,'','T','Dostępna redakcja wyróżników podczas dekretowania');
PAR_SKID.set(37,1,1,'','N','Data zapisu rozrachunku zgodna z datą dokumentu (T - tak, N - zgodna z datą zapisu)','''T'',''N''');
PAR_SKID.set(38,1,1,'','N','Dozwolony termin płatności mniejszy niż data dokumentu','''T'',''N''');
PAR_SKID.set(39,5,1,'','W','Dwuwalutowość na wydrukach',
                      '''T - zawsze informacje w drugiej walucie'',
                      ''N - brak informacji w drugiej walucie'',
                      ''W - na życzenie opertora informacje w drugiej walucie'''
);
PAR_SKID.set(44,5,1,'','T','Zmiana  znacznika generowania noty odsetkowej przy akceptacji kompensaty',
                      '''T - zawsze zmieniać'',
                       ''Z - zmieniać w zależności od terminu płatności rozrachunku'',
                       ''N - nigdy nie zmieniać''');
PAR_SKID.set(45,1,1,'','N','Grupowanie dekretów przelewowych po opisie');
PAR_SKID.set(47,1,1,'','T','Uwzględniać zwłokę w płatności od rozrachunków nadpłaconych');
PAR_SKID.set(49,5,1,'','B','Uwzględnienie przeterminowanych należności/zobowiązań w deklaracji VAT',
                      '''B - nie uwzględniać'',
                       ''N - tylko należności'',
                       ''Z - tylko zobowiązania'',
                       ''W - należności i zobowiązania''');
PAR_SKID.set(50,2,0,'','0','Sprawozdania finansowe - aktalizacja: parametr zastrzeżony - wartość 0/1/2');
::PAR_SKID.set(64,5,1,'','N','Generowanie subkonta dla kontrahenta','''T - tak'',''N - nie'',''P - pytaj''');
PAR_SKID.set(64,5,1,'','KH.KOD','Sposób generowania subkonta',
   '''KH.KOD - wg kodu kontrahenta'',''AUTONR - kolejny numer'''
);
PAR_SKID.set(65,1,1,'','T','Dostępny mechanizm subkont');
PAR_SKID.set(66,1,1,'','T','Redakcja rachunku bankowego podczas dekretowania');
PAR_SKID.set(68,1,1,'','T','Dostępne tworzenie przelewów walutowych');
PAR_SKID.set(72,5,1,'','1','Sprawdzanie wystąpienia symbolu dokumentu źródłowego',
   '\'12 - 12 okresów wstecz i naprzód\','+
   '\'11 - 11 okresów wstecz i naprzód\','+
   '\'10 - 10 okresów wstecz i naprzód\','+
   '\' 9 -  9 okresów wstecz i naprzód\','+
   '\' 8 -  8 okresów wstecz i naprzód\','+
   '\' 7 -  7 okresów wstecz i naprzód\','+
   '\' 6 -  6 okresów wstecz i naprzód\','+
   '\' 5 -  5 okresów wstecz i naprzód\','+
   '\' 4 -  4 okresów wstecz i naprzód\','+
   '\' 3 -  3 okresów wstecz i naprzód\','+
   '\' 2 -  2 okresów wstecz i naprzód\','+
   '\' 1 -  1 okresów wstecz i naprzód\','+
   '\' 0 - bieżący miesiąc'','' B - brak kontroli''');
PAR_SKID.set(80,1,0,'','N','Dostępna ewidencja podziałów controllingowych');
PAR_SKID.set(81,1,0,'','T','Akceptacja podziałów dla controllingu przy kończeniu rejestracji dokumentów źródłowych?');
PAR_SKID.set(82,1,0,'','N','E-dokumenty i załączniki dla zaksięgowanych dokumentów');
PAR_SKID.set(83,1,0,'','N','Prewskaźnik do obliczeń VAT do odliczenia','''T'',''N''');
PAR_SKID.set(84,1,0,'','T','Wykazywanie wartości netto dla stawek z zerową wartością VAT w deklaracji VAT','''T'',''N''');
PAR_SKID.set(112,5,1,'','E','Controlling: Typ arkusza do budżetowania','''E - arkusz MS Excel'',''G - arkusz Google''');
PAR_SKID.set(113,1,0,'','N','Dekretacja z logistyki: usuwanie GTU oraz Procedur dla typów jpk określonych w uproszczeniach do JPK od dnia 01.07.2021','''T'',''N''');
PAR_SKID.set(210,5,1,'','D','Finanse: optymalizacja dekretacji według dokumentów i kont lub według kont','''D - według dokumentów i kont'',''K - według kont''');
PAR_SKID.set(308,1,1,'','T','Uwzględniać datę dostawy towaru w rejestracji i dekretacji sprzedaży');
PAR_SKID.set(318,1,1,'','T','Personel: Planowanie czasu pracy - dopuszczalna praca w niedziele','''T'',''N''');
PAR_SKID.set(319,1,1,'','T','Personel: Planowanie czasu pracy - dopuszczalna praca w święta','''T'',''N''');
PAR_SKID.set(457,5,1,'','N','Podpowiadać uwagi przy akceptacji dokumentu w obiegu z poprzedniej akceptacji','''T - Tak'',''N - Nie''');

::  ORG: \skid_par/upgrade_1802.fml  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_zkl:='Zarządzanie kapitałem ludzkim: ';
::PAR_SKID.set(399,1,0,'','N',_zkl+'aktywne','''T'',''N''');
PAR_SKID.set(400,1,0,'','T',_zkl+'jednorodne kompetencje profili ocen','''T'',''N''');
PAR_SKID.set(401,1,0,'','T',_zkl+'globalne typy ocen','''T'',''N''');
PAR_SKID.set(402,1,0,'','N',_zkl+'lokalne typy ocen dla kompetencji','''T'',''N''');
PAR_SKID.set(403,1,0,'','N',_zkl+'lokalne typy ocen dla profili','''T'',''N''');
PAR_SKID.set(404,1,0,'','T',_zkl+'globalne metody oceny','''T'',''N''');
PAR_SKID.set(405,1,0,'','N',_zkl+'lokalne metody oceny dla kompetencji','''T'',''N''');
PAR_SKID.set(406,1,0,'','N',_zkl+'lokalne metody oceny dla profili','''T'',''N''');
PAR_SKID.set(407,1,0,'','T',_zkl+'globalne wartości ocen','''T'',''N''');
PAR_SKID.set(408,1,0,'','N',_zkl+'lokalne wartości ocen dla kompetencji','''T'',''N''');
PAR_SKID.set(409,1,0,'','N',_zkl+'zmiana wartości dla kompetencji','''T'',''N''');
PAR_SKID.set(410,1,0,'','N',_zkl+'zmiana opisów dla kompetencji','''T'',''N''');
PAR_SKID.set(411,1,0,'','N',_zkl+'lokalne wartości ocen dla stanowisk','''T'',''N''');
PAR_SKID.set(412,1,0,'','N',_zkl+'zmiana wartości dla stanowisk','''T'',''N''');
PAR_SKID.set(413,1,0,'','N',_zkl+'zmiana opisów dla stanowisk','''T'',''N''');
PAR_SKID.set(414,1,0,'','N',_zkl+'lokalne wartości ocen dla profili','''T'',''N''');
PAR_SKID.set(415,1,0,'','N',_zkl+'zmiana wartości dla profili','''T'',''N''');
PAR_SKID.set(416,1,0,'','N',_zkl+'zmiana opisów dla profili','''T'',''N''');
PAR_SKID.set(417,1,0,'','SP',_zkl+'domyślna metoda oceny');
PAR_SKID.set(418,1,0,'','N',_zkl+'domyślnie z oceną opisową','''T'',''N''');
PAR_SKID.set(419,1,0,'','N',_zkl+'zmiana domyślnego rodzaju profilu','''T'',''N''');
::PAR_SKID.set(420,2,0,'','7',_zkl+'powiadom z wyprzedzeniem o zakończeniu sesji ocen');
PAR_SKID.set(421,1,0,'','N',_zkl+'przeglądanie profili według rodzaju');
PAR_SKID.set(422,1,0,'','T',_zkl+'kopiowanie kompetencji tylko z profili bazowych');
::PAR_SKID.set(423,2,0,'','0',_zkl+'il. dni przed datą ważności szkolenia dla której pracownik może zostać zapisany');
::PAR_SKID.set(424,2,0,'','7',_zkl+'na ile dni przed datą rozpoczęcia szkolenia pracownik ma potwierdzić uczestnictwo');
::PAR_SKID.set(425,2,0,'','7',_zkl+'na ile dni przed datą potwierdzenia szkolenia wysłać monit');
::PAR_SKID.set(426,2,0,'','7',_zkl+'powiadom z wyprzedzeniem o zakończeniu planowania zatrudnienia');
PAR_SKID.set(427,1,0,'','T',_zkl+'wskazanie na wartość oczekiwaną na formularzu ocen');
::PAR_SKID.set(428,1,0,'','T',_zkl+'filtrowanie kompetencji celów');
::PAR_SKID.set(429,1,0,'','T',_zkl+'filtrowanie kompetencji obszarów rozwojowych');
::PAR_SKID.set(430,1,0,'','T',_zkl+'automatyczne przesuwanie pracownika z listy rezerwowej na podstawową');
__UPG.msg('Utworzenie listy parametrów wykorzystywanych w dziedzinach: POC, PBA, PSZ.');

::  ORG: \skid_par/upgrade_1842.fml  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: było już w 17.00
PAR_SKID.set(197,1,0,'','N','Personel: wysyłanie e-maili o zatrudnieniu lub zwolnienu pracownika','''T'',''N''');

:: doszło w 17.14 a nie było w upgrade_1714.fml
PAR_SKID.set(330,1,1,'','N',
   'Personel: Sposób liczenia terminów (m.in. do stażu, urlopu) zgodny z potocznym pojęciem roku i miesiąca?'
   ,'''T'',''N'''
);
PAR_SKID.ae_set(330,"
   _fld:=~-fld();
   {? FUN.ask('Czy przeliczyć okresy zatrudnienia według wybranego sposobu liczenia terminów?'@)
   || {? var_pres('__KAL')>0 || obj_del(__KAL) ?};
      exec('__KAL','object');
      __KAL.set330(_fld='T');
      STAZ.cntx_psh();
      STAZ.prefix();
      STAZ.for_each(\"exec('akt_hist','staz')\");
      STAZ.cntx_pop();
      PARAMETR.TRESC:=_fld
   ?};
   1
");

:: doszło w 17.42 a nie było w upgrade_1742.fml
PAR_SKID.set(258,1,1,'','N','Personel: rachunki z umów cywilnoprawnych wypłacane na listach płac ','''T'',''N''');
PAR_SKID.set(331,5,1,'','?','Personel: Sposób wyboru pliku z podpisem',
   '\'? - pytaj użytkownika\','+
   '\'S - szukaj pliku na serwerze\','+
   '\'L - szukaj pliku na końcówce użytkownika\''
);

:: doszło w 18.02 a nie było w upgrade_1802.fml
PAR_SKID.set(186,2,0,'','14','Personel: koniec okresu kontroli nieaktualnych badań do widoku miesięcznego');
PAR_SKID.set(252,1,1,'','N',
   'Personel: czy weryfikować pracowników z zerowym planowaniem czasu pracy?','''T'',''N'''
);
PAR_SKID.set(254,1,1,'','T',
   'Personel: Automatyczna kwalifikacja danych o godzinach przepracowanych na podstawie WE/WY','''T'',''N'''
);
PAR_SKID.set(255,1,1,'','T',
   'Personel: Automatyczna kwalifikacja zapisów WE/WY dla poprzedniej/następnej doby roboczej','''T'',''N'''
);
PAR_SKID.set(316,1,1,'','N',
   'Personel: wyliczana wartość dopełnienia średniotygodniowego dla okresu rozliczeniowego','''T'',''N'''
);
PAR_SKID.set(317,1,1,'','N',
   'Personel: Delegowanie na wydział - pobieranie oddelegowań z wydziałów podrzędnych','''T'',''N'''
);
PAR_SKID.set(323,1,1,'','T',
   'Personel: Weryfikować tydzień pracy od początku okresu? (N - weryfikacja od daty zatrudnienia)','''T'',''N'''
);
PAR_SKID.set(324,1,1,'','T',
   'Personel: Kontrolować 35 godz. nieprzerwany odpoczynek tygodniowy, w okresie rozpoczynającym się od niedzieli?',
   '''T'',''N'''
);
PAR_SKID.set(325,1,1,'','N',
   'Personel: Kontrolować 35 godz. nieprzerwany odpoczynek tyg., dołączając porzedzającą sobotę?','''T'',''N'''
);
PAR_SKID.set(326,1,1,'','T',
   'Personel: Uwzględniać w weryfikacji (planowanie, grafiki), czas nieobecności jako czas odpoczynku dobowego?',
   '''T'',''N'''
);
PAR_SKID.set(327,1,1,'','T','Personel: Wstępna weryfikacja (planowanie, grafiki) czasu pracy?','''T'',''N''');
PAR_SKID.set(328,1,1,'','T','Personel: Możliwe planowanie z nachodzeniem na wolną niedzielę?','''T'',''N''');
PAR_SKID.set(329,1,1,'','T','Personel: Możliwe planowanie z nachodzeniem na wolne święto?','''T'',''N''');

:: doszło w 18.22 a nie było w upgrade_1822.fml
PAR_SKID.set(320,1,1,'','N',
   'Personel: Uwzględniać w Harmonogramach ustawę o ograniczeniu handlu w niedzielę?','''T'',''N'''
);
PAR_SKID.set(325,1,1,'','N',
   'Personel: Kontrolować 35 godz. nieprzerwany odpoczynek tyg., dołączając poprzedzającą sobotę?','''T'',''N'''
);

:: doszło w 18.42
PAR_SKID.set(259,1,1,'','N',
   'Personel: Czy wyliczać potrącenia komornicze zgodnie z miesiącem podatkowym listy?','''T'',''N'''
);
PAR_SKID.set(261,1,1,'','N','Personel: ewidencja i rozliczanie oddelegowania do pracy za granicą','''T'',''N''');
PAR_SKID.set(353,1,1,'','N','Personel: Planowanie i rozliczanie czasu pracy na obiektach kosztowych','''T'',''N''');

__UPG.msg('Utworzenie listy parametrów wykorzystywanych w dziedzinach: PPL, PKD, PRC.');
~~


\tzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
::  MOD: ARTSLO [19.42]
:: OPIS: Uzupełnienie słownika typów płatności elektronicznej
::  ORG: \tzl_ppl_ppk/upgrade_1942.fml
::----------------------------------------------------------------------------------------------------------------------
TZL.prefix();
_fun:="TZL.KOD:=_a; TZL.OPIS:=_b; TZL.add(1)";
_fun('FKS: Zaliczki','Przelewy z zaliczek pracowniczych');
_fun('FKS: Rozrachunki','Przelewy do rozrachunków');
_fun('FKS: Zaliczki','Przelewy z zaliczek pracowniczych');
_fun('HBN: Prosty','Przelewy jednorazowe');
_fun('HBN: US','Przelewy jednorazowe dla US/UC');
_fun('HBN: ZUS','Przelewy jednorazowe dla ZUS');
_fun('PPL: Komornik','Przelewy z płac potrąceń komorniczych');
_fun('PPL: Płace','Przelewy z płac dla pracowników');
_fun('PPL: Umowy','Przelewy z umów zleceń dla zleceniobiorców');
_fun('PPL: US','Przelewy z płac dla US');
_fun('PPL: ZUS_FEP','Przelewy z płac dla ZUS: FEP');
_fun('PPL: ZUS_FPFG','Przelewy z płac dla ZUS: FP i FGSP');
_fun('PPL: ZUS_U_SP','Przelewy z płac dla ZUS: ubezp. społ.');
_fun('PPL: ZUS_U_ZD','Przelewy z płac dla ZUS: ubezp. zdrow.');
_fun('PPL: PPK','Przelewy wpłat na PPK')


\synchro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Uzupełnia znaczniki stosowania triggerów
::----------------------------------------------------------------------------------------------------------------------
SYNC_DEF.clear();
SYNC_DEF.for_each("_put:=0;
                   {? ~(';TN'*SYNC_DEF.TR_ADD>1) || SYNC_DEF.TR_ADD:='T'; _put:=1 ?};
                   {? ~(';TN'*SYNC_DEF.TR_PUT>1) || SYNC_DEF.TR_PUT:='T'; _put:=1 ?};
                   {? ~(';TN'*SYNC_DEF.TR_DEL>1) || SYNC_DEF.TR_DEL:='T'; _put:=1 ?};
                   {? _put || SYNC_DEF.put(1) ?}");
~~


\rubatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Uzupełnienie atrybutów rubryk.
::   WE:
::   WY:
::  ORG: \rubatr/upgrade_1714.fml
::  ORG: \rubatr/upgrade_1728.fml
::  ORG: \rubatr/upgrade_1742.fml
::  ORG: \add_rub_graf/upgrade_1802.fml
::  ORG: \rubatr/upgrade_1822.fml
::  ORG: \oddelegowania_skl_plac/upgrade_1842.fml
::  ORG: \rubatr/upgrade_1902.fml
::  ORG: \rubatr/upgrade_1922.fml
::  ORG: \rubatr/upgrade_1942.fml
::  ORG: \atrybuty_PPK/upgrade_1942_08.fml
::  ORG: \akt_atrybut/upgrade_2042.fml
::  ORG: \atrybuty/upgrade_2042.fml
::  ORG: \atrybuty/upgrade_2114.fml
::  ORG: \rubryki_placowe/upgrade_2137.fml
::  ORG: \rubryki_placowe/upgrade_2137_02.fml
::  ORG: \rubryki_placowe/upgrade_2137_11.fml
::  ORG: \rubryki_placowe/upgrade_2137_13.fml
::  ORG: \rubryki_placowe/upgrade_2226.fml
::  ORG: \rubryki_placowe_ppk/upgrade_2226.fml
::  ORG: \atr_pak_mob/upgrade_2226.fml
::  ORG: \rubryki_ER23020080/upgrade_2226.fml
::----------------------------------------------------------------------------------------------------------------------
:: Weryfikujemy, czy mamy licencję na PPL, żeby wykluczyć ryzyko importu nowych atrybutów na pustą tabelę (błędy).
:: Po stronie Xpertis zakładamy, że parametr 7 jest ustawiony na wartość 'N' przez co pomijamy zadania naprawcze.
{? ~exec('lic','#b_domain','PPL')
|| return(~~)
?};
:: Pomijamy wykonanie dla firmy 000
FIRMA.cntx_psh();
{? REF.WFIRM & REF.FIRMA().SYMBOL='000'
|| FIRMA.cntx_pop();
   return(~~)
?};
FIRMA.cntx_pop();

exec('__RUB','object');
__RUB.fill();
R.cntx_psh();
R.index('RUBKOD');
R.prefix();
:: - Powyżej: wstęp

:: Żeby nie było kłopotów z atrybutami - podciągnijmy je wszystkie (szczególnie w przypadku wersji wielofirmowej).
exec('defaults','rubatr');

::  OLD: \akt_24/napraw_p.fml
:: dodanie nowych atrybutów
exec('add_attr','rubatr',19,198,'Limit godzin opieki (Art. 188) - Dyscyplina pracy',1,'',16,13);
exec('add_use','rubatr',198,16,13);

:: modyfikacja opisu atrybutów
exec('mod_attr','rubatr',197,19,197,'Limit dni opieki (Art. 188) - Dyscyplina pracy');
exec('mod_attr','rubatr',198,19,198,'Limit godzin opieki (Art. 188) - Dyscyplina pracy');
exec('mod_attr','rubatr',1162,116,1162,'Opieka - Art. 188');
exec('mod_attr','rubatr',425,42,425,'Wyn. opieka Art. 188');

:: dodanie atrybutu określającego, które nieobecności mogą być wprowadzane na część dnia
exec('add_attr','rubatr',19,199,'Nieobecności na część dnia',1,
     'Nieobecności rejestrowane na część dnia'
     ,,1,11,13,22,24);
exec('add_use','rubatr',199,1,11,13,22,24);

::  OLD: \akt_32/napraw_p.fml
exec('add_attr','rubatr',13,135,'Zwolnienie ze świadczenia pracy',1,'',,7030);
exec('add_use','rubatr',135,7030);
exec('add_use','rubatr',13,7030);
exec('add_use','rubatr',1,7030);
exec('add_use','rubatr',19421,7030);
exec('add_use','rubatr',1942,7030);

exec('add_use','rubatr',48,7031);
exec('add_use','rubatr',6522,7031);
exec('add_use','rubatr',10023,7031);

::
exec('add_attr','rubatr',193,1932,'Nieobecności z możliwością przekroczenia limitu',1,
   'Nieobecności urlopowe, których wprowadzenie (na portalu) będzie możliwe pomimo przekroczenia limitu',,11);
exec('add_use','rubatr',1932,11);
exec('rubatr','upgrade_1714');
exec('rubatr','upgrade_1728');

::  ORG: \rubatr/upgrade_1742.fml
::       === Xpertis\kali_49/napraw_p.fml
::       === Xpertis\kali_52/napraw_p.fml
::       === Xpertis\kali_55/napraw_p.fml
::       === Xpertis\kali_56/napraw_p.fml
: Zaświadczenie do celów emerytalnych
exec('add_attr','rubatr',6,66,'Zaświadczenie do celów emerytalnych',1,'',500,465,467,650);
exec('add_use','rubatr',66,500,465,467,650);
exec('add_attr','rubatr',66,661,'Składniki przychodu do zaświadczenia',1,'',,500);
exec('add_use','rubatr',661,500);
exec('add_attr','rubatr',66,662,'Składniki wykluczone z przychodu',1,'');
exec('add_attr','rubatr',66,663,'Składniki wynagrodzenia za chorobę',1,'',,465,467,650);
exec('add_use','rubatr',663,465,467,650);

::  ORG: \add_rub_graf/upgrade_1802.fml
exec('add_use','rubatr',10022,7006,7050,7051,7040,7041,7052,7053,7054,7055,7058,7059);
exec('add_use','rubatr',6313102,7006,7050,7051,7040,7041,7052,7053,7054,7055,7058,7059);
exec('add_use','rubatr',6522,7006,7051,7041,7053,7055);
exec('add_use','rubatr',6523,7050,7040,7052,7054);
exec('add_use','rubatr',48,7006,7050,7051,7040,7041,7052,7053,7054,7055,7058,7059);
exec('add_use','rubatr',46,7050,7040,7052,7054,7058);

::  ORG: \rubatr/upgrade_1822.fml
::       === X\kali_59/napraw_p.fml
::       === X\kali_60/napraw_p.fml
:: Poprawka SPIS ER/WRT/XP/12.51/1802/0004 - Składnik wyrównania do wynagrodzenia minimalnego, nie jest uwzględniany
::  w podstawie wynagrodzenia chorobowego
:: [Import rubryk odbywa się globalnie w \r_imp.]

:: Poprawka SPIS ER/WRT/XP/12.51/1705/0002 === Xpertis\kali_62/napraw_p.fml
:: Poprawka SPIS ER/WRT/XP/12.51/1801/0014 === Xpertis\kali_59/napraw_p.fml

:: Aktualizacja - Ograniczenie handlu w niedzielę === Xpertis\kali_64/napraw_p.fml

:: Aktualizacja - dodanie możliwości rejestracji podstawy FP w innych firmach zlecone przez firma Banach
:: [Import rubryk odbywa się globalnie w \r_imp.]

::Poprawka SPIS ER/WRT/XP/12.51/1803/0004 === Xpertis\kali_63/napraw_p.fml

:: \rubatr/upgrade_1842.fml === Xpertis\kali_67/napraw_p.fml

::  ORG: \oddelegowania_skl_plac/upgrade_1842.fml
exec('add_attr','rubatr',9,901,'Oddelegowania do pracy za granicą',1,
   'Kwoty obniżające podstawę opodatkowania za dochody uzyskane podczas oddelegowania do pracy za granicą.'
);
exec('add_attr','rubatr',901,9011,
  'Kwota za noclegi obniżająca podstawę opodatkowania',1,
  'Kwota za noclegi, obniżająca podstawę opodatkowania za dochody uzyskane podczas oddelegowania do pracy za granicą.'
);
exec('add_attr','rubatr',901,9012,
  'Kwota z diet obniżająca podstawę opodatkowania',1,
  'Kwota z diet, obniżająca podstawę opodatkowania za dochody uzyskane podczas oddelegowania do pracy za granicą.'
);
exec('add_attr','rubatr',901,9013,
  'Kwota ze zwrotu kosztów przeniesienia służbowego',1,
  'Kwota do ze zwrotu kosztów przeniesienia służbowego do 200% wynagrodzenia należnego w miesiącu przeniesienia, '
  'obniżająca podstawę opodatkowania za dochody uzyskane podczas oddelegowania do pracy za granicą.'
);
exec('add_use','rubatr',9011,7076);
exec('add_use','rubatr',9012,7077);
exec('add_use','rubatr',9013,7078);

::  ORG: \rubatr/upgrade_1902.fml
exec('add_attr','rubatr',100,1005,'Inne składniki wynagrodzenia wykazywane do ZUS',1,
   'Inne składniki wynagrodzenia wykazywane w raportach do ZUS.'
);
exec('add_attr','rubatr',1005,10051,'Wypłacane obok wynagrodzenia lub zasiłku',1,
   'Przychód wypłacony obok wynagrodzenia lub zasiłku za czas niezdolności do pracy, który nie stanowił '+
   'podstawy wymiaru składek na ubezpieczenia emerytalne i rentowe.'
);

::  ORG: \rubatr/upgrade_1902.fml - tylko jeden bo reszta dodana po stronie xpertis'a
exec('add_attr','rubatr',19,19001,'Okres wyrażony w tygodniach',1,'',,5,26,27,28,32,33);

::  ORG: \start_PPK/upgrade_1922.fml - aktualizacja 19.22_04 PPK
::  OLD: \akt_1251_26/napraw_p.fml
::  OLD: \akt_1251_54/napraw_p.fml
exec('add_attr','rubatr',,7,'Pracowniczy Plan Kapitałowy',1);
   exec('add_attr','rubatr',7,70,'Podstawa wpłat',1,,,7087);
   exec('add_attr','rubatr',7,71,'Procent wpłaty',1);
      exec('add_attr','rubatr',71,710,'Wpłata podstawowa opłacana przez podmiot zatr.',1,,,7083);
      exec('add_attr','rubatr',71,711,'Wpłata dodatkowa opłacana przez podmiot zatr.',1,,,7084);
      exec('add_attr','rubatr',71,712,'Wpłata podstawowa opłacana przez osobę zatr.',1,,,7085);
      exec('add_attr','rubatr',71,713,'Wpłata dodatkowa opłacana przez osobę zatr.',1,,,7086);
   exec('add_attr','rubatr',7,72,'Kwota wpłaty',1);
      exec('add_attr','rubatr',72,720,'Wpłata podstawowa opłacana przez podmiot zatr.',1,,,7088);
      exec('add_attr','rubatr',72,721,'Wpłata dodatkowa opłacana przez podmiot zatr.',1,,,7089);
      exec('add_attr','rubatr',72,722,'Wpłata podstawowa opłacana przez osobę zatr.',1,,,7090);
      exec('add_attr','rubatr',72,723,'Wpłata dodatkowa opłacana przez osobę zatr.',1,,,7091);
      exec('add_attr','rubatr',72,724,'Wpłaty opłacane przez podmiot zatr.',1);
         exec('add_attr','rubatr',724,7241,'Wpłata podstawowa opłacana przez podmiot zatr.',1,,,7088);
         exec('add_attr','rubatr',724,7242,'Wpłata dodatkowa opłacana przez podmiot zatr.',1,,,7089);
      exec('add_attr','rubatr',72,725,'Wpłaty opłacane przez osobę zatr.',1);
         exec('add_attr','rubatr',725,7251,'Wpłata podstawowa opłacana przez osobę zatr.',1,,,7090);
         exec('add_attr','rubatr',725,7252,'Wpłata dodatkowa opłacana przez osobę zatr.',1,,,7091);
   exec('add_attr','rubatr',7,73,'Nagrody i premie z dochodu po opodatkowaniu',1);
   exec('add_attr','rubatr',7,79,'Formuły i wydruki',1);
      exec('add_attr','rubatr',79,790,'Indywidualnie określany procent wpłaty',1,,,7084,7085);
         exec('add_attr','rubatr',790,7901,'Procent wpłaty zawsze indywidualny',1,,,7086);

::  ORG: \atrybuty_PPK/upgrade_1942.fml
exec('add_use','rubatr',7,7092,7093);
exec('add_attr','rubatr',7,74,'Kwota nadpłaty',1,'Składniki płacowe będące nadpłatą do PPK',,7092,7093);
exec('add_attr','rubatr',74,741,'Nadpłaty - zatrudniony',1,'Nadpłacone wpłaty do PPK ze środków zatrudnionego',,7092);
exec('add_attr','rubatr',74,742,'Nadpłaty - firma',1,'Nadpłacone wpłaty do PPK ze środków podmiotu zatrudniającego',,7093);

::  ORG: \atrybuty_sumujace/upgrade_1942.fml
exec('add_use','rubatr',3,7005,7017,7018,7071,7090,7091,7092);
exec('add_attr','rubatr',3,33,'Sumowane składniki płacowe',1,
   'Składniki płacowe sumowane na listach płac',,7005,7017,7018,7071,7090,7091,7092);
exec('add_attr','rubatr',33,331,'Zasiłki ZUS razem z kodem większym niż 650',1,
   'Suma zasiłków wypłacanych przez ZUS z kodem składnika większym niż 650',,7017,7018,7071);
exec('add_attr','rubatr',33,332,'Dodatki razem z kodem większym niż 740',1,
   'Suma dodatkowych składników płacowych z kodem większym niż 740');
exec('add_attr','rubatr',33,333,'Potrącenia razem z kodem większym niż 950',1,
   'Składniki płacowe wchodzące do sumy potrąceń z kodem większym niż 950',,7005,7090,7091);
exec('add_attr','rubatr',33,334,'Składniki do netto z kodem większym niż 990',1,
   'Składniki płacowe do netto z kodem większym niż 990',,7092);

::  ORG: \nowe_skladniki_listy_plac/upgrade_1942.fml
exec('add_use','rubatr',4,7100,7101,7102);
exec('add_use','rubatr',48,7100,7101,7102);
exec('add_use','rubatr',49,7100,7101,7102);
exec('add_use','rubatr',491,7100,7101,7102);
exec('add_attr','rubatr',491,4912,'Przyznawane premie okresowe',1,'Przyznawane premie okresowe',,7100,7101,7102);
exec('add_use','rubatr',6,7100,7101,7102);
exec('add_use','rubatr',63,7100,7101,7102);
exec('add_use','rubatr',631,7100,7101,7102);
exec('add_use','rubatr',6311,7100,7101,7102);
exec('add_use','rubatr',63111,7102);
exec('add_use','rubatr',63112,7101);
exec('add_use','rubatr',63113,7100);
exec('add_use','rubatr',3,7103,7104);
exec('add_use','rubatr',33,7103,7104);
exec('add_use','rubatr',332,7103,7104);
exec('add_use','rubatr',6335,7103,7104,7105,7106,7107);

::  ORG: \atrybuty_PPK/upgrade_1942_08.fml
exec('add_attr','rubatr',72,726,'Wpłaty zwiększające przychód',1);
   exec('add_attr','rubatr',726,7261,'Wpłata podstawowa opłacana przez podmiot zatr.',1,,,7088);
   exec('add_attr','rubatr',726,7262,'Wpłata dodatkowa opłacana przez podmiot zatr.',1,,,7089);

::  ORG: \rubatr/upgrade_1942.fml
exec('add_attr','rubatr',193,1933,'Nieobecności wymagające ustalenia limitów',1,
   'Nieobecności, dla których złożenie wniosku (na portalu) bez założonych limitów nie jest możliwe');

::  ORG: \rubatr/upgrade_20xx.fml
exec('add_attr','rubatr',193,1934,'Nieobecności wymagające wprowadzenia komentarza',1,
      'Nieobecności, dla których złożenie wniosku (na portalu) bez wprowadzenia komentarza (przyczyny)'
      ' nie jest możliwe',,12);

:: Poprawka SPIS ER/WRT/XP/20.14/2008/0002 Oddelegowanie, opodatkowanie poza PL, rozliczenia z ZUS
::  ORG: \rubryka_7124/upgrade_2014.fml
exec('add_attr','rubatr',901,9014,'Kwota przychodu opodatkowanego za granicą',1,
  'Kwota przychodu opodatkowanego za granicą',,7081);
exec('add_attr','rubatr',901,9015,'Skladki ZUS od przychodu opodatkowanego za granicą',1,
  'Skladki ZUS płacone przez pracownika od przychodu opodatkowanego za granicą, nie są wykazywane na PIT-11',,7124);

:: \akt_2014_04/upgrade_2014.fml - zmiana atrybutu 137 na 138 bo na xpertisie dodano 137 (o dziwo wczesniej wogole
::                                  nie uwzgledniono 137 na X2M mimo ze był od poczatku merita)
exec('add_attr','rubatr',13,138,'Służba wojskowa');
exec('add_use','rubatr',138,15);

::  ORG: \akt_atrybut/upgrade_2042.fml
exec('add_attr','rubatr',,8,'Rozliczenie czasu przepracowanego',1,,,
   48,54,55,56,57,58,63,64,65,66,67,68,69,7011,7015,7016,7026,7027,7028,7029);
exec('add_use','rubatr',8,7035,7036,7037,7038,7056,7057);
exec('add_attr','rubatr',8,81,'Godziny przepracowane',1,,,48,54,55,56,58,63,64,65,67,68,69);
   exec('add_attr','rubatr',81,811,'Praca zaplanowana',1,,,54);
   exec('add_attr','rubatr',81,812,'Przekroczenia dobowe',1,,,48,55,56,63);
      exec('add_attr','rubatr',812,8121,'Nadgodziny',1,,,55,56);
      exec('add_attr','rubatr',812,8122,'Odbiory',1,,,63);
      exec('add_attr','rubatr',812,8123,'Odpracowania',1,,,48);
   exec('add_attr','rubatr',81,813,'Potencjalne przekroczenia średniotygodniowe',1,,,58,65);
   exec('add_attr','rubatr',81,814,'Ponadwymiarowe',1,,,64);
   exec('add_attr','rubatr',81,815,'Dopełnienia',1,,,67,68,69);
exec('add_attr','rubatr',8,82,'Rozliczenie wynagrodzenia i dodatków',1,,,
   48,54,55,56,57,58,63,64,65,66,67,68,69,7011,7015,7016,7026,7027,7028,7029);
exec('add_use','rubatr',82,7035,7036,7037,7038,7056,7057);
   exec('add_attr','rubatr',82,821,'Wynagrodzenie miesięczne',1,,,48,54,55,56,57,63,64,65,67,68,69,7015,7016);
      exec('add_attr','rubatr',821,8211,'Praca wg planu',1,,,54);
      exec('add_attr','rubatr',821,8212,'Przekroczenia dobowe',1,,,48,55,56,63,7015,7016);
      exec('add_attr','rubatr',8212,82121,'Nadgodziny',1,,,55,56,7015,7016);
         exec('add_attr','rubatr',82121,821211,'Nadgodziny 50%',1,,,55,7015);
         exec('add_attr','rubatr',82121,821212,'Nadgodziny 100%',1,,,56,7016);
      exec('add_attr','rubatr',8212,82122,'Odbiory',1,,,63);
      exec('add_attr','rubatr',8212,82123,'Odpracowania',1,,,48);
      exec('add_attr','rubatr',821,8213,'Potencjalne przekroczenia średniotygodniowe',1,,,65);
      exec('add_attr','rubatr',821,8214,'Ponadwymiarowe',1,,,64);
      exec('add_attr','rubatr',821,8215,'Dopełnienia',1,,,67,68,69);
         exec('add_attr','rubatr',8215,82151,'Wynagrodzenie',1,,,67);
         exec('add_attr','rubatr',8215,82152,'Dodatek 50%',1,,,68);
         exec('add_attr','rubatr',8215,82153,'Dodatek 100%',1,,,69);
      exec('add_attr','rubatr',821,8216,'Nocne',1,,,57);

   exec('add_attr','rubatr',82,822,'Dodatki okresowe',1,,,58,66,7011,7026,7027,7028,7029,7035,7036,7037,7038,7056,7057);
      exec('add_attr','rubatr',822,8221,'Przekroczenia średniotygodniowe',1,,,58,66,7011);
      exec('add_attr','rubatr',822,8222,'Dzień wolny',1,,,7037,7038);
      exec('add_attr','rubatr',822,8223,'Dzień świąteczny',1,,,7028,7029);
      exec('add_attr','rubatr',822,8224,'Godziny ponadwymiarowe',1,,,7026,7027,7035,7036,7056,7057);

exec('add_attr','rubatr',193,1934,'Nieobecności wymagające wprowadzenia komentarza',1,
   'Nieobecności, dla których złożenie wniosku (na portalu) bez wprowadzenia komentarza (przyczyny)'
   ' nie jest możliwe',,12);

exec('add_use','rubatr',19421,3,15);

::  ORG: \atrybuty/upgrade_2042.fml
exec('add_attr','rubatr',8,83,'Kwalifikacja godzin',1);
   exec('add_attr','rubatr',83,831,'Obsługa godzin firmowych',1);
      exec('add_attr','rubatr',831,8311,'Wprowadzenie godzin do kwalifikacji',1,
         'Wprowadzenie firmowych godzin do kwalifikacji.');
      exec('add_attr','rubatr',831,8312,'Rozliczane poprzez zamknięcie miesiąca',1);
      exec('add_attr','rubatr',831,8313,'Rozliczane poprzez zamknięcie okresu',1);
   exec('add_attr','rubatr',83,832,'Przenoszenie godzin do rozliczenia',1,,,
      1,48,54,55,56,57,63,64,65,66,67,68,69);
   exec('add_use','rubatr',832,7011,7015,7016,7026,7027,7028,7029,7035,7036,7037,7038,7056,7057);
      exec('add_attr','rubatr',832,8321,'Podczas zamykania rozliczenia miesiąca',1,,,
         48,54,55,56,57,63,64,65,67,68,69,7015,7016);
         exec('add_attr','rubatr',8321,83211,'Weryfikacja danych w kartotece godzin',1,
            'Usuwanie danych w kartotece godzin, które są jeszcze nierozliczone na liście płac w celu uniknięcia '
            'duplikacji zapisów.',,48,54,55,56,57,63,64,65,67,68,69,7015,7016);
      exec('add_attr','rubatr',832,8322,'Podczas zamykania rozliczenia okresu',1,,,
         66,7011,7026,7027,7028,7029,7035,7036,7037,7038,7056,7057);
         exec('add_attr','rubatr',8322,83221,'Weryfikacja danych w kartotece godzin',1,
            'Usuwanie danych w kartotece godzin, które są jeszcze nierozliczone na liście płac w celu uniknięcia '
            'duplikacji zapisów.',,66,7011,7026,7027,7028,7029,7035,7036,7037,7038,7056,7057);

::  ORG: \atrybuty/upgrade_2114.fml
exec('add_use','rubatr',49,150);
exec('add_attr','rubatr',49,492,'Premie miesięczne',1,'',,150);
   exec('add_attr','rubatr',492,4921,'Premia',1,'',,150);

exec('add_attr','rubatr',6,68,'Raporty BI',1,'',,500);
   exec('add_attr','rubatr',68,681,'Brutto',1,'',,500);

exec('add_attr','rubatr',454,4543,'Korekty dodatków',1,'',,106,107);
   exec('add_attr','rubatr',4543,45431,'Korekta dodatek funkcyjny/brygadzistowski',1,'',,106);
   exec('add_attr','rubatr',4543,45432,'Korekta dodatek stały',1,'',,107);

exec('add_attr','rubatr',401,4012,'Wynagrodzenia i dodatki',1,'');
exec('add_use','rubatr',4012,120,121,122,123,124,125,126,7006,7040,7041,7050,7051,7052,7053,7054,7055,7058,7059);
   exec('add_attr','rubatr',4012,40121,'Miesięczne',1,'',,120,121,122,123,124,125,126,7040,7050,7052,7054,7058);
      exec('add_attr','rubatr',40121,401211,'Wynagrodzenia',1,'',,120,123,125,7040,7050,7052,7058);
         exec('add_attr','rubatr',401211,4012111,'Wynagrodzenie miesięczne',1,'',,120,123,125);
         exec('add_attr','rubatr',401211,4012112,'Wynagrodzenie okres miesięczny',1,'',,7040,7050,7052,7058);
      exec('add_attr','rubatr',40121,401212,'Dodatki',1,'',,121,126,7054);
         exec('add_attr','rubatr',401212,4012121,'Dodatki miesięczne',1,'',,121,126);
         exec('add_attr','rubatr',401212,4012122,'Dodatki okres miesięczny',1,'',,7054);
      exec('add_attr','rubatr',40121,401213,'Nocne',1,'',,122);
      exec('add_attr','rubatr',40121,401214,'Szkodliwe',1,'',,124);
   exec('add_attr','rubatr',4012,40122,'Okres dłuższy niż miesiąc',1,'',,7006,7041,7051,7053,7055,7059);
         exec('add_attr','rubatr',40122,401221,'Wynagrodzenia',1,'',,7006,7041,7051,7053,7059);
         exec('add_attr','rubatr',40122,401222,'Dodatki',1,'',,7055);

exec('add_attr','rubatr',,101,'Algorytmy obliczeniowe',1,'');
   exec('add_attr','rubatr',101,1011,'Proces naliczania listy płac',1,'');
      exec('add_attr','rubatr',1011,10111,'Rozliczenie wynagrodzeń i dodatków za godziny',1,'');
         exec('add_attr','rubatr',10111,101111,'Usunięcie istniejących danych na liście płac',1,'',,
            48,54,55,56,57,58,63,64,65,66,67,68,69,120,121,122,123,125,126);
            exec('add_use','rubatr',101111,7001,7006,7008,7009,7010,7011,7015,7016,7026,7027,7028,7029,7035,7036);
            exec('add_use','rubatr',101111,7041,7050,7051,7052,7053,7054,7055,7056,7057,7058,7059,7037,7038,7040);
         exec('add_attr','rubatr',10111,101112,'Zmiana wyliczenia nominalnej płacy zasadniczej',1,'',,
            55,56,58,64,66,68,69,7008,7009,7015,7016);

   exec('add_attr','rubatr',1011,10112,'Wynagrodzenie, dodatek, ekwiwalent urlopowy');
      exec('add_attr','rubatr',10112,101121,'Liczba godzin przepracowanych',1,'',,
         48,54,55,56,57,58,59,63,64,65,66,67,68,69);
         exec('add_use','rubatr',101121,7008,7009,7010,7027,7028,7036,7037,7056);
      exec('add_attr','rubatr',101121,1011211,'Rozliczenie na podstawie kalendarza',1,'',,
         55,56,58,64,68,69,7008,7009);
      exec('add_attr','rubatr',101121,1011212,'Rozliczenie na podstawie godzin przepracowanych',1,'',,
         48,54,55,56,58,63,64,65,67,68,69,7008,7009,7010);
      exec('add_attr','rubatr',101121,1011213,'Godziny opisujące wynagrodzenie zasadnicze',1,'',,48,54,63,65,67);
      exec('add_attr','rubatr',101121,1011214,'Godziny obliczone na listach podanego miesiąca',1,
         'Godziny przepracowane obliczone na listach podanego miesiąca. '
         'Do wartości atrybutu dla każdego składnika płacowego należy wprowadzić numer tablicy. '
         'Dla godzin niestandardowych obsługiwanych wtyczką należy do wartości dodać +100.',,
        55,56,57,58,59,64,66,68,69,7008,7009,7027,7028,7036,7037,7056);
         exec('add_attr','rubatr',1011214,10112141,'Liczba nadgodz.  50%',1,'',1,55);
         exec('add_attr','rubatr',1011214,10112142,'Liczba nadgodz. 100%',1,'',2,56);
         exec('add_attr','rubatr',1011214,10112143,'L. godz. w dni wolne',1,'',4,58);
         exec('add_attr','rubatr',1011214,10112144,'L.g. dod. 100 etat',1,'',8,69);
         exec('add_attr','rubatr',1011214,10112145,'L.g. dop. do etatu',1,'',5,64);
         exec('add_attr','rubatr',1011214,10112146,'L.g. dod. 50 etat',1,'',7,68);
         exec('add_attr','rubatr',1011214,10112147,'L.g. dod. śr. tygod.',1,'',6,66);
         exec('add_attr','rubatr',1011214,10112148,'L. nadg. akord 50%',1,'',10,7008);
         exec('add_attr','rubatr',1011214,10112149,'L. nadg. akord 100%',1,'',11,7009);
         exec('add_attr','rubatr',1011214,101121401,'L.g. ponad wym. mc.',1,'',12,7027);
         exec('add_attr','rubatr',1011214,101121402,'L.g. wyn dni W5 mc',1,'',13,7037);
         exec('add_attr','rubatr',1011214,101121403,'L.g. pnd wym dni mc',1,'',14,7036);
         exec('add_attr','rubatr',1011214,101121404,'L.g.SW/SN mc',1,'',15,7028);
         exec('add_attr','rubatr',1011214,101121405,'L.g. pnd normę mc',1,'',16,7056);

   exec('add_attr','rubatr',10112,101122,'Wynagrodzenia dodatkowo przeliczane');
      exec('add_attr','rubatr',101122,1011221,'Dodatkowe wynagrodzenia za godziny przepracowane',1,'Dodatkowe wynagrodzenia za godziny przepracowane',,
         120,121,123,125,126,7040,7050,7052,7054,7058);
      exec('add_attr','rubatr',101122,1011222,'Dodatek za pracę porze nocnej',1,'',,122);
      exec('add_attr','rubatr',101122,1011223,'Wynagrodzenia z przebiegu zatrudnienia',1,'',,100,101,102,103,110);
      exec('add_attr','rubatr',101122,1011224,'Wynagrodzenie przestojowe',1,'',,7120,7121);

::  ORG: \rubryki_placowe/upgrade_2137.fml
exec('add_attr','rubatr',4,402,'Dodatki',1,,,7129);
   exec('add_attr','rubatr',402,4021,'Dodatki stażowe',1,,,7129);
      exec('add_attr','rubatr',4021,40211,'Wypłacane w całości',1,,,7129);
exec('add_attr','rubatr',5,59,'Pozostałe informacje',1,,,7130,7131);
   exec('add_attr','rubatr',59,591,'Podstawa pomniejszana o nieobecności',1,,,7130,7131);
      exec('add_attr','rubatr',591,5911,'Pomniejszenie wg dni kalendarzowych',1,,,7130);
         exec('add_attr','rubatr',5911,59111,'Podstawa składek ZUS',1,,,7130);
         exec('add_attr','rubatr',5911,59112,'Podstawa zdrowotna',1,,,7131);
exec('add_uses','rubatr',7129,48,6313101);

exec('add_attr','rubatr',111,1113,'Dodatkowy',1,,,7132);
exec('add_uses','rubatr',7132,14,16,19,100,113,161,192,193,194,199);
exec('add_uses','rubatr',7132,1001,1924,1932,1942,10011,14350,19421,100112);

exec('add_attr','rubatr',11,117,'Rehabilitacyjny',1);
   exec('add_attr','rubatr',117,1171,'Urlop rehabilitacyjny',1,,,7133);
exec('add_uses','rubatr',7133,11,14,15,16,19,100,117,152,161,192,193,194,197,199);
exec('add_uses','rubatr',7133,1001,1171,1923,1931,1942,10011,14350,19421,100112);

exec('add_attr','rubatr',197,1973,'Limity urlopu rehabilitacyjnego',1,,,7133);
   exec('add_attr','rubatr',1973,19731,'Limit dni',1,,21,7133);

exec('add_attr','rubatr',42,427,'Wynagrodzenie za urlop rehabilitacyjny',1,,,7134);
exec('add_uses','rubatr',7134,6,9,63,65,100,631,652,904,1002,6313,6522,9044);
exec('add_uses','rubatr',7134,48,10023,63131,65221,100231,652211,6313108);

exec('add_uses','rubatr',7135,8,83,832,8321,83211);

exec('add_attr','rubatr',211,2118,'Dodatkowe składniki bez potrąceń',1);
   exec('add_attr','rubatr',2118,21181,'Indywidualne składniki bez potrąceń',1);

::  ORG: \atrybut_cwiczenia/upgrade_2114.fml
::  ORG: \atrybut_cwiczenia/upgrade_2137.fml
exec('add_uses','rubatr',7068,1,19,194,1942,19421,19422,1943,19431);

::  ORG: \rubryki_placowe/upgrade_2137_13.fml
exec('add_attr','rubatr',907,90701,'OLD: informacje podatkowe narastająco przed 2022r.',1,
   'OLD: nominalna zaliczka na podatek wyliczona wg zasad na dzień 31.12.2021r.',,7180);
exec('add_attr','rubatr',907,90702,'Informacje podatkowe narastająco po 2021r.',1,
   'Informacje podatkowe narastająco wyliczane wg zasasad od 2022r.',,7181);

::  ORG: \rubryki_placowe/upgrade_2226.fml
exec('add_use','rubatr',48,7158);
exec('add_use','rubatr',1011223,7158);
exec('add_attr','rubatr',111,1114,'Urlop oddelegowanie',1,,,7157);
exec('add_use','rubatr',193,7157);
exec('add_attr','rubatr',,102,'Oddelegowanie zagraniczne',1,'');
exec('add_attr','rubatr',102,1021,'Przychód opodatkowany zagraniczny',1);
   exec('add_attr','rubatr',1021,10211,'Wynagrodzenia opodatkowane zagraniczne',1,,,7160,7162);
   exec('add_attr','rubatr',1021,10212,'Dodatki opodatkowane zagraniczne',1,'Dodatki opodatkowane zagraniczne');
exec('add_attr','rubatr',102,1022,'Podstawa ubezpieczeń zagranicznych',1);
   exec('add_attr','rubatr',1022,10221,'Wynagrodzenia - podstawa ubez. zagranicznych',1,
      'Wynagrodzenia - podstawa ubezpieczeń zagranicznych.',,7161,7162);
   exec('add_attr','rubatr',1022,10222,'Dodatki - podstawa ubez. zagranicznych',1,
      'Dodatki - podstawa ubezpieczeń zagranicznych.');
exec('add_use','rubatr',333,7151,7152,7154);
exec('add_attr','rubatr',102,1023,'Podstawa ubezpieczeń zdrowotnych zagranicznych',1);
   exec('add_attr','rubatr',1023,10231,'Wynagrodzenia - podstawa ubez. zdr. zagranicznych',1,
      'Wynagrodzenia - podstawa ubezpieczeń zdrowotnych zagranicznych.',,7161,7162);
   exec('add_attr','rubatr',1023,10232,'Dodatki - podstawa ubez. zdr. zagranicznych',1,
      'Dodatki - podstawa ubezpieczeń zdrowotnych zagranicznych.');
exec('add_attr','rubatr',102,1024,'Wynagrodzenie oddelegowań zagranicznych',1,,,7158);
exec('add_attr','rubatr',102,1025,'Wynagrodzenia jednocześnie krajowe i zagraniczne',1,
   'Wynagrodzenia jednocześnie krajowe i zagraniczne wyliczane wg proporcji ilości dni pracy w oddelegowaniu.');
exec('add_attr','rubatr',102,1026,'Przychód opodatkowany w Polsce',1,'Przychód opodatkowany w Polsce.');
   exec('add_attr','rubatr',1026,10261,'Wynagrodzenia opodatkowane w Polsce',1,
      'Wynagrodzenia z oddelegowań opodatkowane w Polsce.',,7159,7161);
   exec('add_attr','rubatr',1026,10262,'Dodatki opodatkowane w Polsce',1,
      'Dodatki z oddelegowań opodatkowane w Polsce.');

exec('add_attr','rubatr',901,90105,'Kwota diet obniżająca przychód zagraniczny',1,
      'Kwota diet obniżająca przychód zagraniczny.',,7166);

exec('add_attr','rubatr',1011214,101121406,'L.g. dod. odb. 50%',1,'',17,7015);
exec('add_attr','rubatr',1011214,101121407,'L.g. dod. odb. 100%',1,'',18,7016);

::  ORG: \atr_pak_mob/upgrade_2226.fml
exec('add_attr','rubatr',901,90107,'Kwota diet za czas oddelegowania do pracy za gran.',1,
     'Kwota diet za czas oddelegowania do pracy za granicą.',,7074);
exec('add_attr','rubatr',901,90108,'Kwota diet kierowcy (pakiet mobilności)',1,
     'Kwota diet kierowcy (pakiet mobilności).',,7204);

::  ORG: \rubryki_ER23020080/upgrade_2226.fml
exec('add_use','rubatr',19421,7156,7157);

::  ORG: \rubryki_placowe/upgrade_2226_pzd01.fml
exec('add_use','rubatr',332,7224,7225);
exec('add_use','rubatr',101111,7224,7225,7135,7138,7233,7234,7235,7236);

:: - Poniżej: zakończenie
R.cntx_pop();

~~


\firma_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnia zawartość kolumny FIRMA tabelach
::   WE: _a [INTEGER] - 0 lub brak wykonać dla każdej firmy, w przeciwnym razie wykonać raz
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of(0) || _a || 1 ?};
{? _a
|| TRIG_OFF.KAL_BUFF:='T';

   _czyKALI:=exec('lic','#b_domain','PKD') | exec('lic','#b_domain','PPL');
   _firma:=exec('ref_firma','ustawienia');
:: Kalendarze
   exec('firma_p_akt','transfer',KAL_NAZW);
   exec('firma_p_akt','transfer',KAL_WZOR);

:: Kalendarze - definicja
:: ze względu na sprawdzanie pola TYPWS oraz synchronizację do portaluHR, która na tym etapie jest niepożądana
:: wyłączamy triggery tabeli KAL_DEF (chcemy przepisać wszystko co było w Xpertisie w takim stanie jaki był)
   KAL_DEF.trig_off('*','*');
:: ER/WRT/XP/22.26/2305/0006 - Tabela KAL_DEF po transferze wielofirmowym wypełniona tylko dla F001
:: _nazwa:='kal_d'+($REF.FIRMA+2);
   KAL_NAZW.cntx_psh();
   KAL_NAZW.clear();
   KAL_ROK.cntx_psh();
   KAL_ROK.clear();
   KAL_DEF.cntx_psh();
   KAL_DEF.use('kal_def');
   KAL_DEF.prefix();
   _prg_start:=_loop:=KAL_DEF.first();
   {? _prg_start || FUN.prg_start(KAL_DEF.size(),'Uzupełnienie danych w tabeli %1.'@['KAL_DEF']) ?};
   {!
   |? _loop
   |! _nazwa:='kal_d'+($KAL_DEF.ROK().NAZWA().FIRMA+2);
      KAL_DEF.cntx_psh();
      KAL_DEF.use(_nazwa);
      KAL_DEF.clear();
      _ok:=KAL_DEF.add(1);
      KAL_DEF.cntx_pop();
      FUN.prg_next();
      _loop:=(_ok & KAL_DEF.del())
   !};
   {? _prg_start || FUN.prg_stop() ?};
   KAL_DEF.cntx_pop();
   KAL_ROK.cntx_pop();
   KAL_NAZW.cntx_pop();
:: przywracamy triggery tabeli KAL_DEF
   KAL_DEF.trig_on('*','*');
:: Powołanie obiektów: __KAL i MASK wykorzystywanych w wyzwalaczach.
   exec('__KAL','object',~_czyKALI);
   exec('MASK','object');
:: Listy zestawień zbiorczych
   ZB_LISTY.cntx_psh();
   ZB_LISTY.clear();
   ZB_LISTY.for_each("
      {? ZB_LISTY.LISTA=ZB_LISTY.OPIS().LISTA
      || ZB_LISTY.del()
      ?}
   ",1);
   ZB_LISTY.cntx_pop();
:: Uzupełnienie zawartości kolumny FIRMA tabel
   exec('firma_p_akt','transfer',POZWORG,_firma);
   exec('firma_p_akt','transfer',P,_firma);
   exec('firma_p_akt','transfer',STAZ,_firma);
   exec('firma_p_akt','transfer',P_INFO,_firma);
   exec('firma_p_akt','transfer',P_NSKL,_firma);
   exec('firma_p_akt','transfer',KART_DOD,_firma);
   exec('firma_p_akt','transfer',FM,_firma);
   exec('firma_p_akt','transfer',O,_firma);
   exec('firma_p_akt','transfer',KT,_firma);
   exec('firma_p_akt','transfer',KK,_firma);
   exec('firma_p_akt','transfer',KU,_firma);
   exec('firma_p_akt','transfer',OS_N,_firma);
   exec('firma_p_akt','transfer',KOM_OS,_firma);
   exec('firma_p_akt','transfer',PAR_POKR,_firma);
   exec('firma_p_akt','transfer',PROGPREM,_firma);
   exec('firma_p_akt','transfer',ZALACZ,_firma);
   exec('firma_p_akt','transfer',ZALICZ,_firma);
   exec('firma_p_akt','transfer',NEZLA,_firma);
   exec('firma_p_akt','transfer',OS_ZWPOD,_firma);
   exec('firma_p_akt','transfer',BIPKAT,_firma);
   exec('firma_p_akt','transfer',BIPKSN,_firma);
   exec('firma_p_akt','transfer',BIPNAG,_firma);
   exec('firma_p_akt','transfer',BIPODB,_firma);
   exec('firma_p_akt','transfer',BIPPYTN,_firma);
   exec('firma_p_akt','transfer',BIPULP,_firma);
   exec('firma_p_akt','transfer',BNFTP,_firma);
   exec('firma_p_akt','transfer',BNFTT,_firma);
   exec('firma_p_akt','transfer',GSPN,_firma);
   exec('firma_p_akt','transfer',GSPP,_firma);
   exec('firma_p_akt','transfer',GSWN,_firma);
   exec('firma_p_akt','transfer',GSXW,_firma);
   exec('firma_p_akt','transfer',OS_ZWPKW,_firma);
   exec('firma_p_akt','transfer',OS_ZWPOZ,_firma);
   exec('firma_p_akt','transfer',OS_ZWSLO,_firma);
   exec('firma_p_akt','transfer',OS_ZWZAL,_firma);
::exec('firma_p_akt','transfer',P_NPOD,_firma);

:: Struktura zależności służbowych
:: !!! Sprawdzić czy działa w Merit, jeśli tak uzupełnić schemat.fml
exec('firma_stz_akt','transfer',_firma);
:: Obsługa anomalii
   exec('firma_p_mod','transfer',G);
   exec('firma_p_mod','transfer',N);
   exec('firma_p_mod','transfer',RH);
   exec('firma_p_mod','transfer',ZC_INFO);
   exec('firma_p_mod','transfer',ZB_LISTY);

:: Dorobek naukowy i punkty za publikację
   OS_DNAUK.cntx_psh();
   P_DNAUK.cntx_psh();
   P_DNAUK.clear();
   P_DNAUK.for_each("
      P_DNAUK.PUNKTY:=P_DNAUK.OS_DNAUK().PUNKTY;
      P_DNAUK.put()
   ",1);
   P_DNAUK.cntx_pop();
   OS_DNAUK.cntx_pop();
   P_NPOD.clear();
   P_NPOD.f_clear();
   P_NPOD.for_each("{? P_NPOD.FIRMA=null() || P_NPOD.FIRMA:=P_NPOD.P().FIRMA; P_NPOD.put() ?}",1);
:   prgs_clr();
   TRIG_OFF.KAL_BUFF:=''
||
:: na końcu, po wykonaniu wszystkich aktualizacji
   {? exec('jest_lic','phr_tab')
   || exec('create_doks','phr_dane')
   ?}
?};
~~


\firma_p_akt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnia zawartość kolumny FIRMA tabeli
::   WE: _a - alias tabeli
::       _b - referencja wiersza tabeli FIRMA, domyślnie bieżąca
::       _c - akronim kolumny, domyślnie 'FIRMA'
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_b')=type_of(null) & _b<>null || _b || exec('ref_firma','ustawienia') ?};
_col:={? var_pres('_c')=type_of('') & _c<>'' || _c || 'FIRMA' ?};

:progress(,'Uzupełnienie kolumny %1 w tabeli %2.'@[_col,2-!_a],FUN.TYT,1);

:: Przed uzupełnieniem wartości kolumny FIRMA wyłączane są wszystkie wyzwalacze. Właściwie wyłączane powinny być tylko
:: wyzwalacze 'put' (czyli 'put przed' i 'put po'), ale w obecnym silniku może prowadzić to do błędu (jeżeli tabela
:: nie ma zdefiniowanego żadnego wyzwalacza 'put').

_a.cntx_psh();
_a.trig_off('*','*');
_MASK:=_a.names();
_prg_start:=_loop:=_MASK.first();
{? _prg_start || FUN.prg_start(_MASK.size(),'Uzupełnienie kolumny %1 w tabeli %2.'@[_col,2-!_a]) ?};
{!
|? _loop
|! _a.use(_MASK.NAME);
   {? _a.f_active()
   || _a.f_clear()
   || _a.clear()
   ?};
   _a.f_set(,,'%1.%2 is null'[2-!_a,_col]);
   _loop:=_a.f_first();
   {!
   |? _loop
   |! ($('_a.%1:=_b;_a.put()'[_col]))(_a,_ref);
      _loop:=_a.f_next()
   !};
   _a.f_clear();
   FUN.prg_next();
   _loop:=_MASK.next()
!};
{? _prg_start || FUN.prg_stop() ?};
_a.trig_on('*','*');
_a.cntx_pop();
~~


\firma_p_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Aktualizuje kolumnę anomalii FIRMA tabeli. Zakłada się istnienie wyzwalacza "przed poprawieniem" odpowiedzial-
::       nego za pielęgnowanie anomalii.
::   WE: _a - alias tabeli
::       _b - akronim kolumny, domyślnie 'FIRMA'
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_col:={? var_pres('_b')=type_of('') & _b<>'' || _b || 'FIRMA' ?};

:progress(,'Uzupełnienie kolumny %1 w tabeli %2.'@[_col,2-!_a],FUN.TYT,1);

_a.cntx_psh();
_MASK:=_a.names();
_prg_start:=_loop:=_MASK.first();
{? _prg_start || FUN.prg_start(_MASK.size(),'Uzupełnienie kolumny %1 w tabeli %2.'@[_col,2-!_a]) ?};
{!
|? _loop
|! _a.use(_MASK.NAME);
   {? _a.f_active()
   || _a.f_clear()
   || _a.clear()
   ?};
   _a.f_set(,,'%1.%2 is null'[2-!_a,_col]);
   _loop:=_a.f_first();
   {!
   |? _loop
   |! ($'_a.put()')(_a);
      _loop:=_a.f_next()
   !};
   _a.f_clear();
   FUN.prg_next();
   _loop:=_MASK.next()
!};
{? _prg_start || FUN.prg_stop() ?};
_a.cntx_pop();
~~


\firma_stz_akt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Uzupełnia pole FIRMA w tabeli STZ
::   WE: _a - referencja wiersza tabeli FIRMA, domyślnie bieżąca
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_firma:={? var_pres('_a')=type_of(null()) & _a<>null() || _a || exec('ref_firma','ustawienia') ?};
_STZ:=tab_tmp_out_tr(1,
   'STZ','TREE_REF',,
   'UD_SKL','STRING[16]',,
   'STN','STRING[16]',,
   'POZWORG','STRING[16]',
);

_add1:=
   "  _add:=_a;
      _STZ:=_b;
      _parrent1:=_c;
      _parrent2:=_d;
      _ret:=0;
      STZ.cntx_psh();
      STZ.prefix(null(),_parrent1);
      {? STZ.first()
      || {!
         |? _STZ.blank();
            _STZ.STZ:=_parrent2;
            _STZ.UD_SKL:=$STZ.UD_SKL;
            _STZ.STN:=$STZ.STN;
            _STZ.POZWORG:=$STZ.POZWORG;
            _ret+=_STZ.add();
            _ret+=_add(_add,_STZ,#STZ.ref(),#_STZ.ref());
            STZ.del()
         !}
      ?};
      STZ.cntx_pop();
      _ret
   ";
_add2:=
   "  _add:=_a;
      _STZ:=_b;
      _parrent1:=_c;
      _parrent2:=_d;
      _firma:=_e;
      _ret:=0;
      _STZ.cntx_psh();
      _STZ.prefix(_parrent1);
      {? _STZ.first()
      || {!
         |? STZ.blank(1);
            {? ~REF.WFIRM || STZ.FIRMA:=_firma ?};
            STZ.STZ:=_parrent2;
            {? _STZ.UD_SKL<>''
            || {? UD_SKL.seek(_STZ.UD_SKL)
               || STZ.UD_SKL:=UD_SKL.ref();
                  {? REF.WFIRM
                  || _firmaJO:=exec('firma4ud_skl','schemat',UD_SKL.UD_TYP().SYMBOL,,UD_SKL.SYMBOL);
                     STZ.FIRMA:={? _firmaJO.STATUS='OK' || _firmaJO.VAL || _firma ?};
                     &_firmaJO
                  ?}
               || undo()
               ?}
            ?};
            {? _STZ.STN<>''
            || {? STN.seek(_STZ.STN)
               || STZ.STN:=STN.ref()
               || undo()
               ?}
            ?};
            {? _STZ.POZWORG<>''
            || {? POZWORG.seek(_STZ.POZWORG)
               || STZ.POZWORG:=POZWORG.ref()
               || undo()
               ?}
            ?};
            _ret+=STZ.add();
            _ret+=_add(_add,_STZ,#_STZ.ref(),#STZ.ref(),_firma);
            _STZ.next()
         !}
      ?};
      _STZ.cntx_pop();
      _ret
   ";

STZ.cntx_psh();
STZ.index('ST');
STZ.prefix();
do();
_i1:=_add1(_add1,_STZ,0,0);
{? _i1
|| UD_SKL.cntx_psh();
   UD_SKL.prefix();
   UD_TYP.cntx_psh();
   UD_TYP.clear();
   STN.cntx_psh();
   STN.prefix();
   POZWORG.cntx_psh();
   POZWORG.prefix();
   _i2:=_add2(_add2,_STZ,0,0,_firma);
   POZWORG.cntx_pop();
   STN.cntx_pop();
   UD_SKL.cntx_pop();
   UD_TYP.cntx_pop();
   {? _i1<>_i2
   || undo()
   ?}
?};
end();
STZ.cntx_pop();
1


\url_wnio
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Uzupełnia pole OPIS wartością pola TYTUL - w nowej wersji pole TYTUL nie jest już prezentowane
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:="
   _new_title:='<PRZENIESIONO>';
   _opis:=form(URL_WNIO.TYTUL);
   {? (_opis<>_new_title)
   || _opis+'\n';
      _opis+=URL_WNIO.memo_txt(,,'OPIS');
      URL_WNIO.memo_set(_opis,'OPIS');
      {? URL_WNIO.memo_put(,'OPIS')
      || URL_WNIO.TYTUL:=_new_title;
         URL_WNIO.put()
      ?}
   ?}
";

URL_WNIO.for_each(_fml,1);
~~


\jpk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Formuły transfrowe dla JPK
::   WE: _a - dla każdej firmy? 1-tak 0-nie
::  OLD: \jpk/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| exec('dok_kh2','transfer');
   exec('jpk_nag','transfer')
|| exec('dok_kh','transfer1');
   exec('edok_kh','transfer');
   exec('jpk_log','transfer');
   exec('uzup_jpk','transfer')
?};
~~


\dok_kh2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Uzupełnienie danych o kontrahencie - zawieszone rozliczeia VAT - dla każdej firmy
::  OLD: \dok_kh2/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
DOK.cntx_psh();
ROZLVAT.cntx_psh();
ROZLVAT.index('DOK'); ROZLVAT.prefix();
{? ROZLVAT.first()
|| FUN.prg_start(ROZLVAT.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? _name:=ref_name(ROZLVAT.DOK);
      DOK.use(_name);
      DOK.prefix();
      {? ROZLVAT.DOK().KH_FULL<>''
      || ROZLVAT.KH:=DOK.KH_FULL;
         ROZLVAT.put()
      ?};
      FUN.prg_next();
      ROZLVAT.next()
   !};
   FUN.prg_stop()
?};
ROZLVAT.cntx_pop();
DOK.cntx_pop()


\jpk_log
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Transfer na potrzeby JPK dla tabel logistycznych
::  OLD: \jpk_log/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
TYPYDOK.prefix();
TYPYDOK.for_each("
   _put:=0;
   {? TYPYDOK.JPK=''
   || TYPYDOK.JPK:=
         {? TYPYDOK.P='T' & TYPYDOK.Z='T' & TYPYDOK.DN='N' || 'PZ'
         |? TYPYDOK.P='N' & TYPYDOK.Z='T'
            | TYPYDOK.P='T' & TYPYDOK.Z='T' & TYPYDOK.DN='T' || 'WZ'
         |? TYPYDOK.P='N' & TYPYDOK.Z='N' & TYPYDOK.T<>'MM' || 'RW'
         |? TYPYDOK.P='N' & TYPYDOK.Z='N' & TYPYDOK.T='MM' || 'MM'
         || ''
         ?};
      _put:=1
   ?};
   {? TYPYDOK.ZLEC=''
   || TYPYDOK.ZLEC:='N';
      _put:=1
   ?};
   {? _put || TYPYDOK.put() ?}
",1);
TYPYSP.prefix();
TYPYSP.for_each("
   _put:=0;
   {? TYPYSP.JPK=''
   || TYPYSP.JPK:='T';
      _put:=1
   ?};
   {? TYPYSP.BL=''
   || TYPYSP.BL:='N';
      _put:=1
   ?};
   {? _put || TYPYSP.put(1) ?}
",1)


\edok_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Uzupelnienie nowych pol dokumentow w obiegu
::  OLD: \edok_kh/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
EDOKUM.cntx_psh();
echo('Pobieranie informacji o maskach tabeli EDOKUM ...'@);
_tab:=EDOKUM.names();
{? _tab.first()
|| echo('Zliczanie rekordów EDOKUM ...'@);
   _size:=0; _lp:=0;
   {!
   |? {? _tab.SIZE<>-1
      || _size+=_tab.SIZE
      || EDOKUM.use(_tab.NAME);
         EDOKUM.index('ID');
         EDOKUM.prefix();
         _size+=EDOKUM.size()
      ?};
      _tab.next()
   !};
   PROGRESS.set(_size,'Uzupełnianie danych kontrahenta w dokumentach w obiegu'@);
   _tab.first();
   KH.index('SKR');
   KH.prefix();
   {!
   |? EDOKUM.use(_tab.NAME);
      EDOKUM.index('ID');
      EDOKUM.prefix();
      {? EDOKUM.first()
      || echo('Uzupełnianie danych kontrahenta w dokumentach w obiegu: %1'@[_tab.NAME]);
         {!
         |? PROGRESS.next();
            {? EDOKUM.KHKH
            || {? KH.seek(EDOKUM.KHKH)
               || EDOKUM.KH_FULL:=KH.NAZ_P;
                  EDOKUM.MIASTO:=KH.MIASTO;
                  EDOKUM.UL:=KH.UL;
                  EDOKUM.POCZ:=KH.POCZ;
                  EDOKUM.DOM:=KH.DOM;
                  EDOKUM.LOKAL:=KH.LOKAL;
                  EDOKUM.KPOCZ:=KH.KPOCZ;
                  EDOKUM.put()
               ?}
            ?};
            EDOKUM.next()
         !}
      ?};
      _tab.next()
   !};
   PROGRESS.close();
   echo()
?};
&_tab;
EDOKUM.cntx_pop()


\jpk_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Uzupelnia pola tabeli JPK
::  OLD: \jpk_nag/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
JPK.prefix();
JPK.for_each("
   _put:=0;
   {? JPK.OKRES=''
   || JPK.OKRES:=exec('okres2','jpk',JPK.OD);
      _put+=1
   ?};
   {? JPK.STAT=''
   || JPK.STAT:='N';
      _put+=1
   ?};
   {? JPK.CYKL=''
   || JPK.CYKL:={? JPK.TYP='VAT' || 'T' || 'N' ?};
      _put+=1
   ?};
   _put+=JPK.STATOPIS='';
   {? _put || JPK.put() ?}
",1)


\uzup_jpk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: Uzupelnienie pol zwiazanych z JPK dla szczegolow pozycji deklaracji VAT
::       dla deklaracji VAT utworzonych po 1 lipca 2016
::  OLD: \uzup_jpk/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_DEK.cntx_psh;
VAT_PS.cntx_psh;
PVAT.cntx_psh();
DVAT.cntx_psh();
VPOZ.cntx_psh();
_ind:=VAT_DEK.ndx_tmp(,1,'TYP',,,'OKRES',,);
VAT_DEK.index(_ind);
VAT_DEK.prefix('VAT7');
{? VAT_DEK.first
|| FUN.prg_start(VAT_DEK.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? {? date(#(4+VAT_DEK.OKRES),#(VAT_DEK.OKRES+2),1)>=date(2016,7,1)
      || VAT_PS.use('vat_ps'+VAT_DEK.ROK().KOD);
         VAT_PS.index('PVAT_REF');
         VAT_PS.prefix(VAT_DEK.ref);
         {? VAT_PS.first
         || {!
            |? {? VAT_PS.ADRES=''
               || {? 4+VAT_PS.PVAT_REF='pvat'
                  ||
                     _maska:=4-(VAT_PS.PVAT_REF-8);
                     PVAT.use('pvat'+_maska);
                     DVAT.use('dvat'+_maska);
                     PVAT.prefix();
                     {? PVAT.seek(BB.sqlint(VAT_PS.PVAT_REF),) & exec('sha1','#to_sha1','PVAT',2+VAT_PS.SHA)=VAT_PS.SHA
                     || PVAT.DVAT();
                        VAT_PS.ADRES:={? DVAT.UL<>'' || DVAT.UL || '' ?}+
                                      {? DVAT.MIASTO<>'' || ', '+DVAT.MIASTO || '' ?}+
                                      {? DVAT.POCZ<>'' || ', '+DVAT.POCZ || '' ?};
                        VAT_PS.KH:=DVAT.KH;
                        _typ:=exec('vat_ps_typ','fks_ved');
                        VAT_PS.DATA2:={? _typ='Z' || DVAT.DAT4 || DVAT.DAT5 ?};
                        VAT_PS.TYP_OPER:=_typ;
                        VAT_PS.put
                     ?}
                  ?}
               ?};
               VAT_PS.next
            !}
         ?}
      ?};
      FUN.prg_next();
      VAT_DEK.next
   !};
   FUN.prg_stop()
?};
VAT_DEK.ndx_drop(_ind);
VPOZ.cntx_pop();
PVAT.cntx_pop();
DVAT.cntx_pop();
VAT_PS.cntx_pop();
VAT_DEK.cntx_pop()


\ma_lin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Uzupelnia pole MA.LIN
::----------------------------------------------------------------------------------------------------------------------
MA.cntx_psh();
MA.prefix();
MA.for_each("{? 1+MA.T='D' & MA.LIN='' & MA.CZESTO='M'
             || MA.LIN:={? MA.RODZAJ='P' || 'LIP' |? MA.RODZAJ='F' || 'LIB' |? MA.RODZAJ='D' || 'LID' ?}
             |? 1+MA.T<>'D'
             || MA.LIN:=''
             ?};
             MA.put()",1);
MA.cntx_pop()


\NASZGP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnia brakujące pola w tabeli NASZGP
::----------------------------------------------------------------------------------------------------------------------
NASZGP.cntx_psh(); ZGP.cntx_psh(); ZGH.cntx_psh();
NASZGP.prefix();

NASZGP.for_each("
   NASZGP.ZGH_OPER:=NASZGP.OPER().NRZLP().NRPRZ;
   NASZGP.ZGH_NAST:=NASZGP.NRNAST().NRZLP().NRPRZ;
   NASZGP.put()
");

NASZGP.cntx_pop(); ZGP.cntx_pop(); ZGH.cntx_pop();
~~


\k_harm_w
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uzupełnia tabelę K_HARM_W
::----------------------------------------------------------------------------------------------------------------------
K_HARM_W.erase();
K_HARM_P.prefix();
K_HARM_P.for_each("{? K_HARM_P.AKTYWNY='T' || exec('trig_khw','ctr_bha',1,1) ?}",1);
K_HARM_U.prefix();
K_HARM_U.for_each("exec('trig_khw','ctr_bha',2,1)",1);
K_HARM_H.prefix();
K_HARM_H.for_each("exec('trig_khw','ctr_bha',3,1)",1);
~~


\ZGH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnia brakujące pola w tabeli ZGH
::----------------------------------------------------------------------------------------------------------------------
ZGH.cntx_psh();
ZL.cntx_psh();
ZGH.prefix();
ZL.prefix();
ZGH.trig_off('*','*');

_result:=ZGH.for_each("
   _zmask:=ZGH.ZLEC().ZMASK;
   _stat_rej:={? ((4+_zmask)+1)='0' || 'T' || 'N' ?};
   _stat_l:={? ((3+_zmask)+1)='0' || 'T' || 'N' ?};
   _put:=0;
   {? ZGH.UID='' || ZGH.UID:=exec('uid','#blank'); _put:=1 ?};
   {? ZGH.UID_VIEW='' || ZGH.UID_VIEW:=exec('FindAndGet','#table',ZL,exec('top_level','zl_link',ZGH.ZLEC),,\"uidref()\",''); _put:=1 ?};
   {? ZGH.STAT_REJ='' || ZGH.STAT_REJ:=_stat_rej; _put:=1 ?};
   {? ZGH.STAT_L='' || ZGH.STAT_L:=_stat_l; _put:=1 ?};
   {? ZGH.GEN_L='' || ZGH.GEN_L:=ZGH.STAT_L; _put:=1 ?};
   {? ZGH.GEN_N='' || ZGH.GEN_N:=ZGH.STAT_L; _put:=1 ?};
   {? ZGH.W_FIRST='' || ZGH.W_FIRST:='N'; _put:=1 ?};
   {? ZGH.W_LAST='' || ZGH.W_LAST:='N'; _put:=1 ?};
   {? ZGH.BRAKI=''
   || exec('update_braki','zl_common',ZGH.ref(),,,ZGH)
   ?};
   {? ZGH.PROBLEM=''
   || ZGH.PROBLEM:='N';
      _put:=1
   ?};
   {? ZGH.KTM=null()
   || ZGH.KTM:=ZGH.ZLEC().KTM;
      _put:=1
   ?};
   {? ZGH.KH=null()
   || ZGH.KH:=ZGH.ZLEC().KH;
      {? ZGH.KH<>null()
      || _put:=1
      ?}
   ?};
   {? ZGH.DT=date(0,0,0)
   || _date:=10+ZGH.IDADD;
      ZGH.DT:=date(#(4+_date),#(2+(5-_date)),#(_date+2));
      _put:=1
   ?};
   {? _put || ZGH.put() ?}
",1);

ZGH.cntx_pop();
ZL.cntx_pop();
ZGH.trig_on('*','*');
_result


\con_rodf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uaktualnienie danych w tabeli CON_RODF
::----------------------------------------------------------------------------------------------------------------------
exec('add_rodf','!ctr_pdm_patd');
CON_RODF.index('UNIK2'); CON_RODF.prefix(27);
{? CON_RODF.first()
|| CON_FUN.for_each("
      {? CON_FUN.CON_RODF=CON_RODF.ref()
      || do();
         exec('conf_usu1','!ctr_pdm_patd',CON_FUN.ref());
         exec('conf_usup','!ctr_pdm_patd');
         {? ~CON_FUN.del(,1) || undo() ?};
         end()
      ?}
   ",1);
   CON_RODF.del()
?}


\del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła usuwa wskazane parametry. Do zastosowań transferowych.
::   WE:  [_a] [REFERENCE] - Wskazanie firmy, w której będą usuwane parametry. Pominięcie parametru oznacza, że
::                           parametry będą usuwane ze wszystkich firm.
::         _b  [NUMBER]    - Numer usuwanego parametru.
::        [_c] [NUMBER]    - Kolejny numer usuwanego parametru.
::        [_d] [NUMBER]    - Kolejny numer usuwanego parametru.
::        [_e] [NUMBER]    - Kolejny numer usuwanego parametru.
::        [_f] [NUMBER]    - Kolejny numer usuwanego parametru.
::        [_g] [NUMBER]    - Kolejny numer usuwanego parametru.
::   WY: Status operacji:
::       0 - Błędne parametry.
::       1 - Operacja wykonana prawidłowo.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=FIRMA
|| _jf:=1;
   _firma:=_a
|| _jf:=0
?};
{? _<2
|| return(0)
?};

_err:=0;
_number:=type_of(0);
PARAMS.cntx_psh();
PARAMS.index('UNIQ');
{! _lp:=2 .. _
|! {? type_of(_[_lp])<>_number
   || _err+=1
   || {? _jf
      || PARAMS.prefix(_[_lp],_firma)
      || PARAMS.prefix(_[_lp])
      ?};
      {? PARAMS.first()
      || {!
         |? PARAMS.del()
         !}
      ?}
   ?}
!};
PARAMS.cntx_pop();
_err=0


\OS_VIEW2P
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Znajduje dla danego OS_VIEW odpowiadającego mu pracownika
::   WE: _a - OS_VIEW.ref()
::   WY: P.ref()
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _os_view:=_a || return(null()) ?};

_pracownik:=null();

OS_VIEW.cntx_psh();
OS_VIEW.prefix();
{? OS_VIEW.seek(_os_view)
||
:: Pracownicy etatowi
   {? OS_VIEW.SOURCE='P' & OS_VIEW.P<>null()
   || _pracownik:=OS_VIEW.P

:: Zleceniobiorcy - pracownik z umowy
   |? OS_VIEW.SOURCE='Z' & OS_VIEW.ZC<>null()
   || _pracownik:=OS_VIEW.ZC().P

:: Inni pracownicy - założenie, że są pracownikami tymczasowymi
   |? OS_VIEW.SOURCE='I'
   || P.cntx_psh();
      P.index('PRACOSOB');
      P.prefix(REF.FIRMA,'T',OS_VIEW.OSOBA);
      {? P.last()
      || _pracownik:=P.ref()
      ?};
      P.cntx_pop()
   ?}
?};
OS_VIEW.cntx_pop();

_pracownik


\KAP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnienie pól w tabeli KAP - karty pracy
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

:: Wyłączam triggery
TRIG_OFF.KAP:='T';
{? exec('get','#params',500611,2)='T'
|| exec('trig_KAP','prod_rej',0)
?};

_formula:="
   _result:=0;
   _can_continue:=1;

   KAP.cntx_psh();
   KAP.index('S1');
   KAP.prefix();
   {? KAP.first()
   || {!
      |? _put:=0;
         {? KAP.P=null() & KAP.OS_VIEW<>null()
         || KAP.P:=exec('OS_VIEW2P','transfer',KAP.OS_VIEW);
            _put:=1
         ?};
         {? _put>0
         || _can_continue:=KAP.put()
         ?};
         KAP.next() & _can_continue>0
      !}
   ?};
   KAP.cntx_pop();
   {? _can_continue>0
   || _result:=1
   ?};
   _result
";

_result:=exec('for_each_mask','#table',KAP,_formula,,,,1,1);

:: Włączam triggery
TRIG_OFF.KAP:='';
{? exec('get','#params',500611,2)='T'
|| exec('trig_KAP','prod_rej',1)
?};
_result


\ZLGB
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnia brakujące pola w tabeli ZLGB
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

_formula:="
   _result:=0;
   _can_continue:=1;

   ZLGB.cntx_psh();
   ZLGB.index('OS_VIEW');
   ZLGB.prefix();
   {? ZLGB.first()
   || {!
      |? _put:=0;
         {? ZLGB.P=null() & ZLGB.OS_VIEW<>null()
         || ZLGB.P:=exec('OS_VIEW2P','transfer',ZLGB.OS_VIEW);
            _put:=1
         ?};
         {? _put>0
         || _can_continue:=ZLGB.put()
         ?};
         ZLGB.next() & _can_continue>0
      !}
   ?};
   ZLGB.cntx_pop();
   {? _can_continue>0
   || _result:=1
   ?};
   _result
";

_result:=exec('for_each_mask','#table',ZLGB,_formula,,,,1,1);

_result


\k_role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Uzupełnienie pól tabeli K_INSMBN, K_ROLE, K_HARM
::  ORG: \k_harm/upgrade_1802.fml
::       \k_role/upgrade_1802.fml
::----------------------------------------------------------------------------------------------------------------------
K_ROLE.prefix();
K_ROLE.for_each("
   {? K_ROLE.TYPE='' || K_ROLE.TYPE:='O' ?};
   {? K_ROLE.AREA='' || K_ROLE.AREA:='CTR' ?};
   K_ROLE.put()
",1);
K_INSMBN.prefix();
K_INSMBN.for_each("
   {? K_INSMBN.KLIK=''
   || K_INSMBN.KLIK:=K_INSMBN.WART_NAR:='N';
      K_INSMBN.put()
   ?}
",1);
K_HARM.prefix();
K_HARM.for_each("{? K_HARM.STAT_NAZ='' | K_HARM.ROK_OD=null | K_HARM.ROK_DO=null || K_HARM.put() ?};
                 {? K_HARM.ARKUSZ='' || K_HARM.ARKUSZ:='E'; K_HARM.put() ?}
               ",1);
K_HARM_W.prefix();
K_HARM_W.for_each("
   {? K_HARM_W.K_HARM=null
   || K_HARM_W.K_HARM:=K_HARM_W.K_HARM_P().K_HARM;
      K_HARM_W.put()
   ?}
",1);
1


\formula
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Usuwa zbędne formuły sprawozdań definiowalnych i odakceptowuje je
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('tabFML','tabDEL');
tabFML:=sql('select REFERENCE as REF, SKROT from FORMULA where RODZAJ=\'#\' order by 2');
_fml:="
   {? tabFML.find_key(_a,)
   || tabFML.del()
   ?}
";
exec('add_alg','sprfin',_fml);
tabDEL:=sql('select ALG_PAR.REFERENCE as REF, W_ALGPAR.REFERENCE as REF2 from ALG_PAR left join @W_ALGPAR where FORMULA in (select REF from :_a) order by 1',tabFML);
ALG_PAR.prefix();
{? tabDEL.first()
|| FUN.prg_start(tabDEL.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? tabDEL.prefix(tabDEL.REF,);
      {? tabDEL.first()
      || {!
         |? {? tabDEL.REF2<>''
            || W_ALGPAR.use(7+tabDEL.REF2);
               W_ALGPAR.prefix();
               {? W_ALGPAR.seek(BIT.sqlint(tabDEL.REF2),)
               || W_ALGPAR.del()
               ?}
            ?};
            tabDEL.next()
         !};
         {? ALG_PAR.seek(BIT.sqlint(tabDEL.REF),)
         || {? ALG_PAR.DEFW().GRUPA().AKC='T'
            || GR_SIK.AKC:='N';
            GR_SIK.put();
               __UPG.msg('Wycofano akceptację sprawozdania: '+GR_SIK.SKROT+' firmy: '+GR_SIK.FIRMA().SYMBOL+'.')
            ?};
            ALG_PAR.del()
         ?}
      ?};
      tabDEL.prefix();
      FUN.prg_next();
      tabDEL.next()
   !};
   FUN.prg_stop()
?};
FORMULA.prefix();
{? tabFML.first()
|| FUN.prg_start(tabFML.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? {? FORMULA.seek(BIT.sqlint(tabFML.REF),)
      || FORMULA.del();
         __UPG.msg('Usunięto formułę: '+FORMULA.SKROT+' sprawozdania definiowalnego.')
      ?};
      FUN.prg_next();
      tabFML.next()
   !};
   FUN.prg_stop()
?};
VAR_DEL.delete('tabFML','tabDEL')


\ezal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Transfer tabeli EZAL
::----------------------------------------------------------------------------------------------------------------------
EZAL.cntx_psh(); EZAL.prefix();
EZAL.for_each("EZAL.KASA:={? EZAL.KASPRZEL='K' || 'T' || 'N' ?};
               EZAL.PRZELEW:={? EZAL.KASPRZEL='P' || 'T' || 'N' ?};
               EZAL.OBIEGI:='N';
               EZAL.put()
              ",1);
EZAL.cntx_pop();
1


\ezalpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Transfer tabeli EZALPOZ
::----------------------------------------------------------------------------------------------------------------------
EZALPOZ.cntx_psh(); EZALPOZ.prefix();
EZALPOZ.for_each("{? (4+EZALPOZ.POCH)='KALI'
                  || EZALPOZ.POCH:=STR.gsub(EZALPOZ.POCH,'KALI','PPL'); EZALPOZ.put()
                  ?}
                 ",1);
EZALPOZ.cntx_pop();
1


\color_trn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Transfer kolorów
::----------------------------------------------------------------------------------------------------------------------
exec('init','color');
KOLTMP.cntx_psh(); KOLTMP.index('INDEX1'); KOLTMP.prefix();
{? KOLTMP.first() || {! |? KOLTMP.del() !} ?};
exec('init','color');
KOLTMP.cntx_pop();
KOLIKO.cntx_psh(); KOLIKO.index('INDEX1');
KOLIKO.prefix();
{? KOLIKO.lock(2)
|| {? KOLIKO.first() || {! |? KOLIKO.del() !} ?};
   KOLIKO.unlock()
?};
exec('ini_leg','color');
KOLIKO.cntx_pop()


\auto_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Zmiana formuł schematów dokumentów (formuły automatycznej rejestracji)
::  ORG: \autoksie/upgrade_1742.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('FmlConv','fNew');
FmlConv:=tab_tmp(1,
   'O','STRING[255]',,
   'N','STRING[255]',
);
_add:="
   FmlConv.O:=_a;
   FmlConv.N:=_b;
   FmlConv.add()
";
fNew:="
   _str:='';
   {? FmlConv.first()
   || _zm:=0;
      {!
      |? {? _a*FmlConv.O>0
         || _zm:=1;
            _a:=STR.gsub(_a,FmlConv.O,FmlConv.N)
         ?};
         FmlConv.next()
      !};
      {? _zm
      || _str:=_a
      ?}
   ?};
   _str
";
_chg:="
   Tab:=($_a)();
   Tget:=_a+'.'+_b;
   Tset:=_a+'.'+_b+':=_a';
   Tab.prefix();
   Tab.for_each(\"
      _val:=($Tget)();
      {? _val<>''
      || _new:=fNew(_val);
         {? _new<>''
         || ($Tset)(_new);
            Tab.put()
         ?}
      ?}
   \");
   VAR_DEL.delete('Tab','Tget','Tset')
";
_add('\'auto_poz\',\'auto_poz\'','\'auto_poz\',\'fks_auto\'');
_add('\'kwota\',\'auto_poz\'','\'kwota\',\'%fks_vat\'');
_add('\'kwotapl\',\'auto_poz\'','\'kwotapl\',\'%fks_vat\'');
_add('\'pre_euro\',\'euro\'','\'pre_euro\',\'%fks_vat\'');
_add('\'euro\',\'euro\'','\'euro\',\'fks_auto\'');
_add(',\'storno\'',',\'fks_auto\'');
_add(',\'rozlicz\'',',\'fks_auto\'');
_add(',\'roz_krs\'',',\'fks_auto\'');
_add('\'auto_krs\',\'auto_krs\'','\'auto_krs\',\'fks_auto\'');
_add(',\'auto_roz\'',',\'fks_auto\'');
_add('\'pre_akrs\',\'auto_krs\'','\'pre_akrs\',\'%fks_vat\'');
_add('\'pre_rkrs\',\'automat\'','\'pre_rkrs\',\'%fks_vat\'');
_add('\'r_kurs\',\'automat\'','\'r_kurs\',\'fks_auto\'');
_add('\'p_223\',\'vat_auto\'','\'p_221\',\'%fks_vat\'');
_add(',\'vat_auto\'',',\'%fks_vat\'');
_chg('AUTOKSIE','FORMPOCZ');
FORM.for_each("
   _val:=FORM.memo_txt(,1);
   {? _val<>''
   || _new:=fNew(_val);
      {? _new<>''
      || FORM.memo_set(_new);
         FORM.memo_put()
      ?}
   ?}
",1);
_chg('FORM','KMA');
_chg('FORM','KWN');
VAR_DEL.delete('FmlConv','fNew');
AUTOKSIE.prefix();
AUTOKSIE.for_each("
   {? AUTOKSIE.A='T'
   || {? ~exec('auto_fml2','transfer')
      || AUTOKSIE.A:='N';
         AUTOKSIE.ZAA:='';
         AUTOKSIE.DAKC:=date(0,0,0);
         AUTOKSIE.put()
      ?}
   ?};
   {? AUTOKSIE.WYR='' || AUTOKSIE.WYR:='N'; AUTOKSIE.put() ?}
",1)


\auto_fml2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.14]
:: OPIS: Sprawdzenie czy poprawna formula w schemacie dokumentu
::  OLD: \auto_fml2/transfer.fml
::----------------------------------------------------------------------------------------------------------------------
_dalej:=1;
_ok:=exec('chk_exec','#file',AUTOKSIE.FORMPOCZ);
{? ~_ok.OK
|| _dalej:=0
?};
&_ok;
{? _dalej
|| FORM.cntx_psh();
   FORM.index('AUTOKSIE'); FORM.prefix(AUTOKSIE.ref());
   {? FORM.first()
   || {!
      |? _fml:=FORM.memo_txt(,1,'FML');
         _ok:=exec('chk_exec','#file',_fml);
         {? ~_ok.OK
         || _dalej:=0
         ?};
         &_ok;
         _dalej & FORM.next()
      !}
   ?};
   FORM.cntx_pop()
?};
_dalej


\kor_zb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: uzupełnia pole FAKS_KZF.FAK_TYP
::----------------------------------------------------------------------------------------------------------------------
FAKS_KZF.cntx_psh();
FAKS_KZF.clear();
FAKS_KZF.for_each("_put:=0;
                   {? FAKS_KZF.FAK_TYP=null() & FAKS_KZF.FAK<>''
                   || FAKS_KZF.FAK_TYP:=exec('FindAndGet','#table',FAKS,FAKS_KZF.FAK,,\"T\",null());
                      _put:=1
                   ?};
                   {? FAKS_KZF.FAKS_UID=''
                   ||
                      FAKS_KZF.FAKS_UID:=exec('FindAndGet','#table',FAKS,FAKS_KZF.FAKS,,\"FAKS.uidref()\",'');
                      _put:=1
                   ?};
                   {? _put || FAKS_KZF.put(1) ?}
                   ",1);
FAKS_KZF.cntx_pop();
~~


\vat_dek_rokf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [17.00]
:: OPIS: Transfer tabeli VAT_DEK w Personel-PPL pole VATT_DEK.ROK przypisanie wartosci null()
::       Uzupełnienie nowych pól w tabeli VAT_DEK
::  ORG: dołączono \vat_dek_2114_02/upgrade_2114_02.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_DEK.trig_off('*','*');
VAT_DEK.prefix();
VAT_DEK.for_each("_put:=0;
                  _typ:=VAT_DEK.TYP;
                  {? 5+_typ='PIT11' | 4+_typ='IFT1' | _typ='PIT40' | _typ='PIT4R' | _typ='PIT8AR' | 5+_typ='PIT8C'
                  || VAT_DEK.ROK:=null(); _put+=1
                  ?};
                  {? VAT_DEK.PDOF1='' || VAT_DEK.PDOF1:='N'; _put+=1 ?};
                  {? VAT_DEK.PDOF2='' || VAT_DEK.PDOF2:='N'; _put+=1 ?};
                  {? VAT_DEK.PDOF3='' || VAT_DEK.PDOF3:='N'; _put+=1 ?};
                  {? VAT_DEK.PDOF4='' || VAT_DEK.PDOF4:='N'; _put+=1 ?};
                  {? VAT_DEK.PDOF5='' || VAT_DEK.PDOF5:='N'; _put+=1 ?};
                  {? VAT_DEK.PDOF6='' || VAT_DEK.PDOF6:='N'; _put+=1 ?};
                  {? _put
                  || VAT_DEK.put(1)
                  ?}",1);
VAT_DEK.trig_on('*','*');
~~


\slo_zalpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Usuwa pozycję ZalPoz ze słownika rodzajów kwot do dekretacji VAT
::----------------------------------------------------------------------------------------------------------------------
SLU.cntx_psh();
SLU.index('NAZ'); SLU.prefix('~RODZAJE KWOT');
{? SLU.first()
|| SLO.index('SL'); SLO.prefix(SLU.ref(),'ZalPoz');
   {? SLO.first()
   || DEK.prefix();
      AV.prefix();
      DEK.for_each("
         {? DEK.RODZK=SLO.ref()
         || DEK.AV().A:='N';
            AV.put();
            DEK.del()
         ?}
      ",1);
      {? SLO.count()=0
      || SLO.del()
      ?}
   ?}
?};
SLU.cntx_pop();
1


\banorg_kor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Korekta pola ID w tabeli BANORG, banki dodawane ręcznie powinny mieć IB >=100000
::----------------------------------------------------------------------------------------------------------------------
BANORG.cntx_psh();
BANORG.prefix();
BANORG.for_each("{? BANORG.ID>=10000
                 || BANORG.ID:=100000+BANORG.ID-10000;
                    BANORG.put()
                 ?}");
BANORG.cntx_pop()


\logiSTAT_REJ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: ustawia znacznik STAT_REJ dla tabel logistycznych: ND, FAKS, ZK_N, ZD_NAG, OFE, DK_LN, INN
::----------------------------------------------------------------------------------------------------------------------
exec('psh_cntx','powdok');

:: tabele ND, DK_LN, INN
_msk:=ND.names();
_msk.clear();
{? _msk.first()
|| {!
   |? _odd:=1+(_msk.NAME+3);
      _rok:=1-(_msk.NAME+3);
      exec('mag_open','open_tab',_odd,_rok);
      echo('Aktualizacja: dokumenty magazynowe ... %1'@[(_msk.NAME+3)]);
      ND.for_each("_put:=0;
       {? ND.STAT_REJ='' || {? ND.Z='T' || ND.STAT_REJ:='T' || ND.STAT_REJ:='N' ?}; _put:=1 ?};
       {? ND.EDI_R='' || _put:=1; ND.EDI_R:='N' ?};
       {? ND.EDI_W='' || _put:=1; ND.EDI_W:='N' ?};
       {? ND.INTRAKC='' || _put:=1; ND.INTRAKC:={? ND.IST_TYP='' | ND.Z='N' || 'N' || 'T' ?} ?};
       {? ND.INN='' & ~((';INW+;INW-;PRC+;PRC-;'*(';%1;'[ND.TYP().T]))>0) || ND.INN:='N'; _put:=1 ?};
       {? _put || ND.put(1) ?}");
      DK_LN.for_each("{? DK_LN.STAT_REJ=''
                      || {? DK_LN.AKC='T'
                         || DK_LN.STAT_REJ:='T'
                         || DK_LN.STAT_REJ:='N'
                         ?};
                         DK_LN.put(1)
                      ?}");
      echo();
      _msk.next()
   !}
?};
obj_del(_msk);

:: tabele: INN
VAR_DEL.delete('__li_p','__li_m','__lp_p','__lp_m','__linw');
__li_p:=exec('FindInSet','#table','TYPYDOK','TYP','INW+','INW+');
__li_m:=exec('FindInSet','#table','TYPYDOK','TYP','INW-','INW-');
__lp_p:=exec('FindInSet','#table','TYPYDOK','TYP','PRC+','PRC+');
__lp_m:=exec('FindInSet','#table','TYPYDOK','TYP','PRC-','PRC-');

_msk:=INN.names();
_msk.clear();
{? _msk.first()
|| {!
   |? _odd:=1+(_msk.NAME+3);
      _rok:=1-(_msk.NAME+3);
      __linw:=_msk.NAME<>'inw_nwyc';
      exec('inw_open','open_tab',_odd,_rok);
      echo('Aktualizacja: inwentaryzacja/przecena ... %1'@[(_msk.NAME+3)]);
      INN.for_each("
        _put:=0;
        {? INN.STAT_REJ='' || {? INN.D<>date(0,0,0) || INN.STAT_REJ:='T' || INN.STAT_REJ:='N' ?}; _put:=1 ?};
        {? INN.TYP_P=null() |  INN.TYP_M=null()
        || {? __linw
           || INN.TYP_P:=__li_p; INN.TYP_M:=__li_m; _put:=1
           || INN.TYP_P:=__lp_p; INN.TYP_M:=__lp_m; _put:=1
           ?}
        ?};
        {? INN.INP_R<>'' || exec('FindAndGet','#table',ND,INN.INP_R,,\"INN:='T';put(1)\") ?};
        {? INN.INR_R<>'' || exec('FindAndGet','#table',ND,INN.INR_R,,\"INN:='T';put(1)\") ?};
        {? _put || INN.put() ?}");
      echo();
      _msk.next()
   !}
?};
obj_del(_msk);
VAR_DEL.delete('__li_p','__li_m','__lp_p','__lp_m','__linw');

:: tabele: FAKS
_msk:=FAKS.names();
_msk.clear();
{? _msk.first()
|| {!
   |? _odd:=1+(_msk.NAME+3);
      _rok:=1-(_msk.NAME+3);
      exec('fak_open','open_tab',_odd,_rok);
      echo('Aktualizacja: sprzedaż/zakupy ... %1'@[(_msk.NAME+3)]);
      FAKS.for_each("_put:=0;
                     {? FAKS.STAT_REJ=''
                     || {? FAKS.AKC='T'
                        || FAKS.STAT_REJ:='T'
                        || FAKS.STAT_REJ:='N'
                        ?};
                        _put:=1
                     ?};
                     {? FAKS.PLISTA='' || FAKS.PLISTA:='N'; _put:=1 ?};
                     {? FAKS.KSEF_ERR='' || FAKS.KSEF_ERR:='N'; _put:=1 ?};
                     {? _put || FAKS.put(1) ?}
                     ");
      echo();
      _msk.next()
   !}
?};
obj_del(_msk);

:: tabele: ZK_N
_msk:=ZK_N.names();
_msk.clear();
{? _msk.first()
|| {!
   |? exec('openz','open_tab',_msk.NAME+3);
      echo('Aktualizacja: zamówienia sprzedaży/wewnętrzne ... %1'@[(_msk.NAME+3)]);
      ZK_N.for_each("{? ZK_N.STAT_REJ=''
                     || {? ZK_N.AKC='T'
                        || ZK_N.STAT_REJ:='T'
                        || ZK_N.STAT_REJ:='N'
                        ?};
                        ZK_N.put(1)
                     ?}");
      echo();
      _msk.next()
   !}
?};
obj_del(_msk);

:: tabele: ZD_NAG
_msk:=ZD_NAG.names();
_msk.clear();
{? _msk.first()
|| {!
   |? exec('openzd','open_tab',_msk.NAME+3);
      echo('Aktualizacja: zamówienia dostaw ... %1'@[(_msk.NAME+3)]);
      ZD_NAG.for_each("_put:=0;
                       {? ZD_NAG.STAT_REJ=''
                       || {? (';AOCMZQ'*ZD_NAG.STAN)>1
                          || ZD_NAG.STAT_REJ:='T'
                          || ZD_NAG.STAT_REJ:='N'
                          ?};
                          _put:=1
                       ?};
                       {? ZD_NAG.PR=0
                       || ZD_NAG.PR:=exec('obl_limi','zamdst_nag',ZD_NAG.ref());
                          _put:=1
                       ?};
                       {? _put || ZD_NAG.put(1) ?}");
      echo();
      _msk.next()
   !}
?};
obj_del(_msk);

:: tabele OFE
OFE.prefix();
OFE.for_each("{? OFE.STAT_REJ=''
              || {? exec('FindInSet','#table','OFP','OFE',OFE.ref())=null()
                 || OFE.STAT_REJ:='N'
                 || OFE.STAT_REJ:='T'
                 ?};
                 OFE.put(1)
              ?}",1);

exec('pop_cntx','powdok');
~~


\PX_WYK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnia brakujące pola tabeli PX_WYK
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

PX_WYK.cntx_psh();
PX_WYK.index('PX_VER');
PX_WYK.clear();
{? PX_WYK.first()
|| {!
   |? _put:=0;
      {? PX_WYK.ZAK=''
      || PX_WYK.ZAK:='N';
         _put:=1
      ?};
      {? _put || _can_continue:=PX_WYK.put() ?};
      PX_WYK.next() & _can_continue>0
   !}
?};
PX_WYK.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\ZLZAM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnia brakujące pola tabeli ZLZAM
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

ZLZAM.cntx_psh();
ZLZAM.index('ZLZM');
ZLZAM.clear();
{? ZLZAM.first()
|| FUN.prg_start(ZLZAM.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? _put:=0;
      {? (5+ZLZAM.ZAMPOZ)='zkpoz'
      || ZLZAM.PL_DATA:=exec('FindAndGet','#table',ZK_P,ZLZAM.ZAMPOZ,,"PL_DATA",date(0,0,0));
         ZLZAM.PL_TIME:=exec('FindAndGet','#table',ZK_P,ZLZAM.ZAMPOZ,,"PL_TIME",time(0,0,0));
         _put:=1
      ?};
      {? _put || _can_continue:=ZLZAM.put() ?};
      FUN.prg_next();
      ZLZAM.next() & _can_continue>0
   !};
   FUN.prg_stop()
?};
ZLZAM.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\TKTL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uzupełnia brakujące pola tabeli TKTL
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------

TKTL.trig_off('*','*');
_formula:="
   _result:=0;
   _can_continue:=1;

   TKTL.cntx_psh();
   TKTL.index('ASTN');
   TKTL.prefix();
   {? TKTL.first()
   || {!
      |? _put:=0;
         {? TKTL.TORW='Z'
         || {? (1+(1-TKTL.ZL().ZMASK))='0'
            || TKTL.STAT_N:='T';
               TKTL.STAT_O:='T';
               TKTL.STAT_S:='T';
               TKTL.STAT_P:='T'
            || TKTL.STAT_N:='N';
               TKTL.STAT_O:='N';
               TKTL.STAT_S:='N';
               TKTL.STAT_P:='N'
            ?};
            _put:=1
         || {? TKTL.STAT_N=''
            || {? TKTL.STAN='N' || TKTL.STAT_N:='N' || TKTL.STAT_N:='T' ?};
               _put:=1
            ?};
            {? TKTL.STAT_O=''
            || {? TKTL.STAN='T' || TKTL.STAT_O:='T' || {? (1+(2-TKTL.TMASK))='0' || TKTL.STAT_O:='T' || TKTL.STAT_O:='N' ?} ?};
               _put:=1
            ?};
            {? TKTL.STAT_S=''
            || {? TKTL.STAN='T' || TKTL.STAT_S:='T' || {? (1+(1-TKTL.TMASK))='0' || TKTL.STAT_S:='T' || TKTL.STAT_S:='N' ?} ?};
               _put:=1
            ?};
            {? TKTL.STAT_P=''
            || {? TKTL.STAN='T' || TKTL.STAT_P:='T' || {? (1+(3-TKTL.TMASK))='0' || TKTL.STAT_P:='T' || TKTL.STAT_P:='N' ?} ?};
               _put:=1
            ?}
         ?};
         {? TKTL.IMP_ERR=''
         || TKTL.IMP_ERR:='N';
            _put:=1
         ?};
         {? TKTL.IMPROVE=''
         || TKTL.IMPROVE:='N';
            _put:=1
         ?};
         {? _put || _can_continue:=TKTL.put() ?};
         TKTL.next() & _can_continue>0
      !}
   ?};
   TKTL.cntx_pop();

   {? _can_continue>0
   || _result:=1
   ?};
   _result
";

_result:=exec('for_each_mask','#table',TKTL,_formula,,,,1,1);
TKTL.trig_on('*','*');
_result


\poczta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetla informacje o parametryzacji zdarzeń i zadań w systemie Xpertis
::----------------------------------------------------------------------------------------------------------------------
_filename0:='poczta.tra';
_filename1:='poczta1.tra';

_poczta:=sql('
   select POCZTA.PE, FIRMA.SYMBOL as FIRMA, POCZTA.KOD, POCZTA.OPIS, POCZTA.TRYB, '' '' as OK
   from POCZTA join FIRMA
   where 1=2
   order by 1, 2, 3
');

_can_continue:=0;

:: Sprawdzam czy na serwerze jest plik
{? fexists(_filename1,1)
|| _filename:=_filename1;
   _poczta.import(_filename1,,1,%1+';','UTF-8',,
      'PE',,1,,
      'FIRMA',,2,,
      'KOD',,3,,
      'OPIS',,4,,
      'TRYB',,5,,
      'OK',,6,
   );
   _can_continue:=1
|? fexists(_filename0,1)
|| _filename:=_filename0;
   _poczta.import(_filename0,,1,%1+';','UTF-8',,
      'PE',,1,,
      'FIRMA',,2,,
      'KOD',,3,,
      'OPIS',,4,,
      'TRYB',,5,
   );
   _can_continue:=1
|| FUN.emsg('Brak pliku: %1'@[_filename0])
?};

{? _can_continue>0
||
   {? _poczta.first()
   ||
      _var:=tab_tmp(1,
         'X','STRING[1]','X',
         'OPIS','SYS_MEMO',''
      );
      _var.blank();
      _var.X:='X';
      _var.memo_set(
         'Informacja:\n\n'
         'Dla każdego aktywnego zadania z systemu Xpertis należy zdefiniować proces spełniający\n'
         'podobną funkcjonalność wykorzystując dostępne czynności serwisowe.\n\n'
         'Dla każdego zdarzenia z systemu Xpertis należy wykorzystać dostępne czynności wysłania\n'
         'albo zdarzenia wysłania (pośrednie lub końcowe).\n\n'
         'Tryb przetwarzania dla zadań:\n'
         '- N - wyłączone\n'
         '- D - dzienny\n'
         '- T - tygodniowy\n'
         '- M - miesięczny'
      ,'OPIS');
      _var.add();
      _opis:=_var.mk_edit(,,'opis');
      _var.win_efld(_opis,,'OPIS',,,89,-10);

      _save:="
         _tab:=sql('
            select :_a.PE, :_a.FIRMA, :_a.KOD, :_a.OPIS, :_a.TRYB, :_a.OK
            from :_a
            order by 1, 2, 3
         ',cur_tab(1,1));
         _tab.export('poczta1.tra',0,%1+';','UTF-8,pth,noheader',,
            'PE',,1,,
            'FIRMA',,2,,
            'KOD',,3,,
            'OPIS',,4,,
            'TRYB',,5,,
            'OK',,6,
         );
         ~~
      ";

      _werz:=_poczta.mk_sel(,'P',,'pocztawerz',,,,,'U');
      _poczta.win_fld(_werz,,'FIRMA',,,,,,'Firma'@);
      _poczta.win_fld(_werz,,'KOD',,,,,,'Kod'@);
      _poczta.win_fld(_werz,,'OPIS',,,,,,'Opis'@);
      _poczta.win_fld(_werz,,'TRYB',,,-5,,,'Tryb przetwarzania'@);
      _poczta.win_fld(_werz,,'OK',,,,,,'OK'@,,,2,,"'T'","' '");
      _poczta.win_act(_werz,,'Usuń',,,,,,,1);
      _poczta.win_act(_werz,,'Formuła','P&otwierdź'@@,,,"cur_tab(1,1).OK:='T';cur_tab(1,1).put()",,1,,,,'O');
      _poczta.win_act(_werz,,'Formuła','Zapisz'@@,,,_save,,,,,,'Z');
      _poczta.win_btn(_werz,'text=%1'['Usuń'@],'menu:U');
      _poczta.win_btn(_werz,'text=%1'['P&otwierdź'@],'menu:O');
      _poczta.win_btn(_werz,'text=%1,panel=bottom'['Zapisz'@],'menu:Z');
      _were:=_poczta.mk_sel(,'P',,'pocztawere',,,,,'U');
      _poczta.win_fld(_were,,'FIRMA',,,,,,'Firma'@);
      _poczta.win_fld(_were,,'KOD',,,,,,'Kod'@);
      _poczta.win_fld(_were,,'OPIS',,,,,,'Opis'@);
      _poczta.win_fld(_were,,'TRYB',,,-5,,,'Aktywne'@);
      _poczta.win_fld(_were,,'OK',,,,,,'OK'@,,,2,,"'T'","' '");
      _poczta.win_act(_were,,'Usuń',,,,,,,1);
      _poczta.win_act(_were,,'Formuła','P&otwierdź'@@,,,"cur_tab(1,1).OK:='T';cur_tab(1,1).put()",,1,,,,'O');
      _poczta.win_act(_were,,'Formuła','Zapisz'@@,,,_save,,,,,,'Z');
      _poczta.win_btn(_were,'text=%1'['Usuń'@],'menu:U');
      _poczta.win_btn(_were,'text=%1'['P&otwierdź'@],'menu:O');
      _poczta.win_btn(_were,'text=%1,panel=bottom'['Zapisz'@],'menu:Z');
      _grp:=_poczta.grp_make('Zadania i zdarzenia z systemu Xpertis'@,"grp_edisp(params_get().var,params_get().opis)",'pocztagrp',,,,,'normal');
      _poczta.grp_sel(_grp,,_werz,'Zadania'@,,,,,"params_get().tab.prefix('Z')");
      _poczta.grp_sel(_grp,,_were,'Zdarzenia'@,,,,,"params_get().tab.prefix('E')");
      _poczta.grp_splt(_grp,,'horizontal','opis',25);
      _poczta.grp_edit(_grp,_var,_opis,,,,,,'maximized');
      _poczta.win_sel(_grp);

      params_set('tab',_poczta,'var',_var,'opis',_opis);
      _poczta.select()
   ?}
?};
~~


\slowniki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Naprawa słowników użytkownika
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,INFO,'SLWYDZIA',XINFO,'SLWYDZIA');
{? XINFO.SLWYDZIA=null() || XINFO.SLWYDZIA:=INFO.SLWYDZIA().SLU ?};
exec('zapisz','#stalesys',1,XINFO,'SLWYDZIA')


\okr_firma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Uzupełnianie pola OKR.FIRMA
::----------------------------------------------------------------------------------------------------------------------
OKR.cntx_psh(); OKR.prefix();
OKR.for_each("{? ~OKR.FIRMA || OKR.FIRMA:=REF.FIRMA; OKR.put() ?}",1);
OKR.cntx_pop()


\okr_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Napełnia tabele OKRO i OKR_OBSZ po transferze (tylko po transferze!)
::       Formuła uruchamiana dla każdej firmy oddzielnie.
::----------------------------------------------------------------------------------------------------------------------
_fks:=exec('szuk_b_dom','transfer','FKS');
_ctr:=exec('szuk_b_dom','transfer','CTR');
_obg:=exec('szuk_b_dom','transfer','OBG');
_lmg:=exec('szuk_b_dom','transfer','LMG');
_lsp:=exec('szuk_b_dom','transfer','LSP');
_lzk:=exec('szuk_b_dom','transfer','LZK');
_fst:=exec('szuk_b_dom','transfer','FST');
_kas:=exec('szuk_b_dom','transfer','KAS');

OKR_OBSZ.cntx_psh();
:: FKS
:: sprawdza czy jest BO w pierwszym roku bo tylko tak mógł być fiks
OKR_OBSZ.index('UNIK1'); OKR_OBSZ.prefix(REF.FIRMA,_fks);
{? ~OKR_OBSZ.first() & _fks
|| OKRO_F.cntx_psh();
   OKRO_F.index('FIRMA_NR'); OKRO_F.prefix(REF.FIRMA);
   {? OKRO_F.first()
   || ROK_F.cntx_psh(); ROK_F.prefix();
      DOK.use('doku'+OKRO_F.ROK().KOD+form(OKRO_F.NR,-2)); DOK.prefix();
      _ok:=DOK.first();
      ROK_F.index('ROKPOCZ'); ROK_F.prefix(REF.FIRMA);
      {? _ok
      || OKRO_F.ROK()
      || ROK_F.first();
         _o:=ROK_F.mk_sel('Rok'@,'P',,'rok_f_sel',,,,,'P','T');
         ROK_F.win_fld(_o,,'NAZ');
         ROK_F.win_fld(_o,,'ZAM',,,,,,,,,2,,"'T'","'N'");
         ROK_F.win_act(_o,,'Formuła','Wybierz rok początkowy obszaru FKS'@@,,,"sel_exit()",,1,,,,'W');
         ROK_F.win_sel(_o)
      ?};
      {? _ok | ROK_F.select(,1)
      || _okres:=null;
         OKRO_F.cntx_psh(); OKRO_F.index('ROK'); OKRO_F.prefix(ROK_F.ref());
         {? OKRO_F.first() || _okres:=OKRO_F.ref() ?};
         OKRO_F.cntx_pop();
         {? _okres & OKRO_F.seek(_okres)
         || FUN.prg_start(OKRO_F.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
            {! |?
               OKRO_F.cntx_psh();
               _pocz:=date(0,0,0);
               {? (OKRO_F.NAZ='Bilans otwarcia' & OKRO_F.next()) | (OKRO_F.NAZ='Bilans zamknięcia' & OKRO_F.prev()) |
                  OKRO_F.POCZ<>date(0,0,0)
               || _pocz:=OKRO_F.POCZ;
                   exec('rok_add','transfer',_pocz~1)
               ?};
               OKRO_F.cntx_pop();
               {? _pocz<>date(0,0,0)
               || exec('add_okr_obsz','transfer',_pocz,_fks,OKRO_F.ref(),null)
               ?};
               FUN.prg_next();
               OKRO_F.next()
            !};
            FUN.prg_stop()
         ?}
      ?};
      ROK_F.cntx_pop()
   ?};
   OKRO_F.cntx_pop()
?};

:: CTR
:: sprawdza czy jest K__NAG lub K_HARM
OKR_OBSZ.index('UNIK1'); OKR_OBSZ.prefix(REF.FIRMA,_ctr);
{? ~OKR_OBSZ.first()
|| _generuj:=0;
   ROK_F.cntx_psh(); ROK_F.index('ROKPOCZ'); ROK_F.prefix(REF.FIRMA);
   {? ROK_F.first()
   || FUN.prg_start(ROK_F.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
      {! |?
         {? ~_generuj
         || K__NAG.cntx_psh();
            K__NAG.index('ROK'); K__NAG.prefix(REF.FIRMA,ROK_F.ref());
            _generuj:=K__NAG.first();
            {? ~_generuj
            || K_HARM.cntx_psh();
               K_HARM.index('ROKPOCZ'); K_HARM.prefix(REF.FIRMA,ROK_F.ref());
               _generuj:=K_HARM.first();
               {? ~_generuj
               || K_HARM.index('ROKKON'); K_HARM.prefix(REF.FIRMA,ROK_F.ref());
                  _generuj:=K_HARM.first()
               ?};
               K_HARM.cntx_pop()
            ?};
            K__NAG.cntx_pop()
         ?};
         {? _generuj
         || OKRO_F.cntx_psh(); OKRO_F.index('ROK'); OKRO_F.prefix(ROK_F.ref());
            {? OKRO_F.first()
            || {! |?
                  OKRO_F.cntx_psh();
                  _pocz:=date(0,0,0);
                  {? (OKRO_F.NAZ='Bilans otwarcia' & OKRO_F.next()) | (OKRO_F.NAZ='Bilans zamknięcia' & OKRO_F.prev()) |
                     OKRO_F.POCZ<>date(0,0,0)
                  || _pocz:=OKRO_F.POCZ;
                     exec('rok_add','transfer',_pocz~1)
                  ?};
                  OKRO_F.cntx_pop();
                  {? _pocz<>date(0,0,0)
                  || exec('add_okr_obsz','transfer',_pocz,_ctr,OKRO_F.ref(),null)
                  ?};
                  OKRO_F.next()
               !}
            ?};
            OKRO_F.cntx_pop()
         ?};
         FUN.prg_next();
         ROK_F.next()
      !};
      FUN.prg_stop()
   ?};
   ROK_F.cntx_pop()
?};

:: OBG
:: sprawdza czy jest EDOKUM
OKR_OBSZ.index('UNIK1'); OKR_OBSZ.prefix(REF.FIRMA,_obg);
{? ~OKR_OBSZ.first()
|| _generuj:=0;
   ROK_F.cntx_psh(); ROK_F.index('ROKPOCZ'); ROK_F.prefix(REF.FIRMA);
   {? ROK_F.first()
   || FUN.prg_start(ROK_F.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
      {! |?
         {? ~_generuj
         || EDOKUM.cntx_psh();
            EDOKUM.use('skid_v'+($(ROK_F.POCZ_ROK~1)+2)); EDOKUM.prefix();
            _generuj:=EDOKUM.first();
            EDOKUM.cntx_pop()
         ?};
         {? _generuj
         || OKRO_F.cntx_psh(); OKRO_F.index('ROK'); OKRO_F.prefix(ROK_F.ref());
            {? OKRO_F.first()
            || {! |?
                  OKRO_F.cntx_psh();
                  _pocz:=date(0,0,0);
                  {? (OKRO_F.NAZ='Bilans otwarcia' & OKRO_F.next()) | (OKRO_F.NAZ='Bilans zamknięcia' & OKRO_F.prev()) |
                     OKRO_F.POCZ<>date(0,0,0)
                  || _pocz:=OKRO_F.POCZ;
                     exec('rok_add','transfer',_pocz~1)
                  ?};
                  OKRO_F.cntx_pop();
                  {? _pocz<>date(0,0,0)
                  || exec('add_okr_obsz','transfer',_pocz,_obg,OKRO_F.ref(),null)
                  ?};
                  OKRO_F.next()
               !}
            ?};
            OKRO_F.cntx_pop()
         ?};
         FUN.prg_next();
         ROK_F.next()
      !};
      FUN.prg_stop()
   ?};
   ROK_F.cntx_pop()
?};

:: LMG, LSP, LZK
:: sprawdza czy jest OKR
OKR_OBSZ.index('UNIK1'); OKR_OBSZ.prefix(REF.FIRMA);
{? ~OKR_OBSZ.find_key(_lmg) & ~OKR_OBSZ.find_key(_lsp) & ~OKR_OBSZ.find_key(_lzk)
|| OKR.cntx_psh(); OKR.index('OKR'); OKR.prefix(REF.FIRMA);
   {? OKR.first()
   || FUN.prg_start(OKR.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
      {! |?
         exec('rok_add','transfer',OKR.ROK);
         exec('add_okr_obsz','transfer',date(OKR.ROK,OKR.MC,1),_lmg,null,OKR.ref());
         exec('add_okr_obsz','transfer',date(OKR.ROK,OKR.MC,1),_lsp,null,OKR.ref());
         exec('add_okr_obsz','transfer',date(OKR.ROK,OKR.MC,1),_lzk,null,OKR.ref());
         FUN.prg_next();
         OKR.next()
      !};
      FUN.prg_stop()
   ?};
   OKR.cntx_pop()
?};

:: FST
:: sprawdza czy jest środek trwały i __OKRE_ES
OKR_OBSZ.index('UNIK1'); OKR_OBSZ.prefix(REF.FIRMA,_fst);
{? var_press('__OKRE_ES')>0 & ~OKR_OBSZ.first()
|| _generuj:=0;
   ROK_F.cntx_psh(); ROK_F.index('ROKPOCZ'); ROK_F.prefix(REF.FIRMA);
   {? ROK_F.first()
   || FUN.prg_start(ROK_F.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
      {! |?
         {? ~_generuj
         || {? SRSR.name()='srsr'+'r'+REF.FIRMA().SYMBOL
            || SRSR.cntx_psh();
               SRSR.prefix();
               _generuj:=SRSR.first();
               SRSR.cntx_pop()
            ?}
         ?};
         {? _generuj
         || OKRO_F.cntx_psh(); OKRO_F.index('ROK'); OKRO_F.prefix(ROK_F.ref());
            {? OKRO_F.first()
            || {! |?
                  OKRO_F.cntx_psh();
                  _pocz:=date(0,0,0);
                  {? (OKRO_F.NAZ='Bilans otwarcia' & OKRO_F.next()) | (OKRO_F.NAZ='Bilans zamknięcia' & OKRO_F.prev()) |
                     OKRO_F.POCZ<>date(0,0,0)
                  || _pocz:=OKRO_F.POCZ;
                     exec('rok_add','transfer',_pocz~1)
                  ?};
                  OKRO_F.cntx_pop();
                  {? _pocz<>date(0,0,0) & (__OKRE_ES.find_key(OKRO_F.RES,OKRO_F.OES) |
                     OKRO_F.NAZ='Bilans otwarcia' | OKRO_F.NAZ='Bilans zamknięcia')
                  || exec('add_okr_obsz','transfer',_pocz,_fst,OKRO_F.ref(),null)
                  ?};
                  OKRO_F.next()
               !}
            ?};
            OKRO_F.cntx_pop()
         ?};
         FUN.prg_next();
         ROK_F.next()
      !};
      FUN.prg_stop()
   ?};
   ROK_F.cntx_pop()
?};

:: KAS
:: sprawdza czy są zapisy w tabeli RAPORT
OKR_OBSZ.index('UNIK1'); OKR_OBSZ.prefix(REF.FIRMA,_kas);
{? ~OKR_OBSZ.first()
|| _generuj:=0;
   ROK_F.cntx_psh(); ROK_F.index('ROKPOCZ'); ROK_F.prefix(REF.FIRMA);
   {? ROK_F.first()
   || FUN.prg_start(ROK_F.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
      {! |?
         {? ~_generuj
         || RAPORT.cntx_psh();
            STANKAS.cntx_psh();
            STANKAS.index('KOD'); STANKAS.prefix();
            {? STANKAS.first()
            || {! |?
                  RAPORT.use('krp'+form(STANKAS.KOD,-3)+(form(ROK_F.KOD)+2)); RAPORT.prefix();
                  _generuj:=RAPORT.first();
                  ~_generuj & STANKAS.next()
               !}
            ?};
            STANKAS.cntx_pop(); RAPORT.cntx_pop()
         ?};
         {? _generuj
         || OKRO_F.cntx_psh(); OKRO_F.index('ROK'); OKRO_F.prefix(ROK_F.ref());
            {? OKRO_F.first()
            || {! |?
                  OKRO_F.cntx_psh();
                  _pocz:=date(0,0,0);
                  {? (OKRO_F.NAZ='Bilans otwarcia' & OKRO_F.next()) | (OKRO_F.NAZ='Bilans zamknięcia' & OKRO_F.prev()) |
                     OKRO_F.POCZ<>date(0,0,0)
                  || _pocz:=OKRO_F.POCZ;
                     exec('rok_add','transfer',_pocz~1)
                  ?};
                  OKRO_F.cntx_pop();
                  {? _pocz<>date(0,0,0)
                  || exec('add_okr_obsz','transfer',_pocz,_kas,OKRO_F.ref(),null)
                  ?};
                  OKRO_F.next()
               !}
            ?};
            OKRO_F.cntx_pop()
         ?};
         FUN.prg_next();
         ROK_F.next()
      !};
      FUN.prg_stop()
   ?};
   ROK_F.cntx_pop()
?};
OKR_OBSZ.cntx_pop();
1


\szuk_b_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Wyszukuje obszaru o podanym symbolu
::   WE: _a - symbol obszaru
::   WY: ref obszaru
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=null;
B_DOMAIN.cntx_psh(); B_DOMAIN.index('SYMBOL'); B_DOMAIN.prefix(_a,);
{? B_DOMAIN.first() || _zwrot:=B_DOMAIN.ref() ?};
B_DOMAIN.cntx_pop();
_zwrot


\rok_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Dodaje całe lata do tabeli OKRO
::   WE: _a - numer roku
::----------------------------------------------------------------------------------------------------------------------
OKRO.cntx_psh();
OKRO.index('UNIK'); OKRO.prefix(REF.FIRMA,_a);
{? ~OKRO.first()
|| do();
   {! _i:=1..12
   |! OKRO.blank(1);
      OKRO.FIRMA:=REF.FIRMA;
      OKRO.ROK:=_a;
      OKRO.NR_OKR:=_i;
      OKRO.NAZWA:={? _i=1 || 'styczeń'@
                  |? _i=2 || 'luty'@
                  |? _i=3 || 'marzec'@
                  |? _i=4 || 'kwiecień'@
                  |? _i=5 || 'maj'@
                  |? _i=6 || 'czerwiec'@
                  |? _i=7 || 'lipiec'@
                  |? _i=8 || 'sierpień'@
                  |? _i=9 || 'wrzesień'@
                  |? _i=10 || 'październik'@
                  |? _i=11 || 'listopad'@
                  || 'grudzień'@
                  ?};
      OKRO.DATA_OD:=date(_a,_i,1);
      OKRO.DATA_DO:=date(_a,_i,0);
      {? ~OKRO.add(1) || undo() ?}
   !};
   end()
?};
OKRO.cntx_pop()


\add_okr_obsz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Dodaje rekordy do tabeli OKR_OBSZ
::   WE: _a - data początku okresu
::       _b - ref obszaru (B_DOMAIN)
::       _c - ref OKRO_F
::       _d - ref OKR
::----------------------------------------------------------------------------------------------------------------------
_okro:=exec('szuk_okro','transfer',_a);
{? _okro
|| OKR_OBSZ.cntx_psh();
   OKR_OBSZ.index('UNIK'); OKR_OBSZ.prefix();
   _dalej:={? _c=null || ~OKR_OBSZ.find_key(_okro,_b) || ~OKR_OBSZ.find_key(_okro,_b,_c) ?};
   {? _dalej
   || OKR_OBSZ.blank(1);
      OKR_OBSZ.OKRO:=_okro;
      OKR_OBSZ.B_DOMAIN:=_b;
      OKR_OBSZ.OKRO_F:=_c;
      OKR_OBSZ.OKR:=_d;
      OKR_OBSZ.add(1)
   ?};
   OKR_OBSZ.cntx_pop()
?}


\szuk_okro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Szuka okresu na podaną datę w bieżącej firmie
::   WE: _a - data
::   WY: ref OKRO
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=null;
OKRO.cntx_psh();
OKRO.index('POCZ'); OKRO.prefix(REF.FIRMA);
{? type_of(_a)=type_of(date()) & _a<>date(0,0,0)
|| _pocz:=date(_a~1,_a~2,1);
   {? OKRO.find_key(_pocz) & _a>=OKRO.DATA_OD & _a<=OKRO.DATA_DO || _zwrot:=OKRO.ref() ?}
?};
OKRO.cntx_pop();
_zwrot


\usersdep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Importuje USERSDEP
::----------------------------------------------------------------------------------------------------------------------
_fn:='usersdep_xpertis.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_tab:=sql('select USERSDEP.USERS, USERSDEP.DEPT, USERSDEP.FIRMA from USERSDEP where 1=0');
_tab.import('usersdep_xpertis.tra',0,0,%1+';','UTF-8,pth,noheader',,
            'USERS',,1,,
            'DEPT',,2,,
            'FIRMA',,3,
           );
USERS.cntx_psh(); USERS.prefix();
ODD.cntx_psh(); ODD.prefix();
FIRMA.cntx_psh(); FIRMA.prefix();
USERSDEP.cntx_psh(); USERSDEP.index('UNIK');
{? _tab.first()
|| FUN.prg_start(_tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      {? _tab.USERS<>'' & _tab.DEPT<>'' & _tab.FIRMA<>'' &
         USERS.seek(_tab.USERS,form(_tab.USERS-8),1) &
         ODD.seek(_tab.DEPT,form(_tab.DEPT-8),1) &
         FIRMA.seek(_tab.FIRMA,form(_tab.FIRMA-8),1)
      || USERSDEP.prefix(FIRMA.ref(),USERS.ref(),ODD.ref());
         {? ~USERSDEP.first()
         || USERSDEP.USERS:=USERS.ref();
            USERSDEP.DEPT:=ODD.ref();
            USERSDEP.FIRMA:=FIRMA.ref();
            USERSDEP.add(1)
         ?}
      ?};
      FUN.prg_next();
      _tab.next()
   !};
   FUN.prg_stop()
?};
USERS.cntx_pop(); ODD.cntx_pop(); FIRMA.cntx_pop(); USERSDEP.cntx_pop();
~~


\k_podwer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Modyfikuje K_PODWER
::----------------------------------------------------------------------------------------------------------------------
_fn:='k_podwer_xpertis.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_tab:=sql('select K_PODWER.REFERENCE as K_PODWER, USERS.WEBLOGIN as USERS from K_PODWER '+
          'join USERS using(USERS.REFERENCE,K_PODWER.USERS) where 1=0');
_tab.import('k_podwer_xpertis.tra',0,0,%1+';','UTF-8,pth,noheader',,
            'K_PODWER',,1,,
            'USERS',,2,
            );
K_PODWER.cntx_psh(); K_PODWER.prefix();
USERS.cntx_psh(); USERS.index('WEBLOGIN'); USERS.prefix();
{? _tab.first()
|| FUN.prg_start(_tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      {? _tab.K_PODWER<>'' & _tab.USERS<>'' &
         USERS.find_key(_tab.USERS,) &
         K_PODWER.seek(_tab.K_PODWER,form(_tab.K_PODWER-8),1)
      || K_PODWER.USERS:=USERS.ref(); K_PODWER.put(1)
      ?};
      FUN.prg_next();
      _tab.next()
   !};
   FUN.prg_stop()
?};
K_PODWER.cntx_pop(); USERS.cntx_pop();
~~


\k_harm_h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Modyfikuje K_HARM_H
::----------------------------------------------------------------------------------------------------------------------
_fn:='k_harm_h_xpertis.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_tab:=sql('select K_HARM_H.REFERENCE as K_HARM_H, USERS.WEBLOGIN as USERS from K_HARM_H '+
          'join USERS using(USERS.REFERENCE,K_HARM_H.USERS) where 1=0');
_tab.import('k_harm_h_xpertis.tra',0,0,%1+';','UTF-8,pth,noheader',,
            'K_HARM_H',,1,,
            'USERS',,2,
            );
K_HARM_H.cntx_psh(); K_HARM_H.prefix();
USERS.cntx_psh(); USERS.index('WEBLOGIN'); USERS.prefix();
{? _tab.first()
|| FUN.prg_start(_tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      {? _tab.K_HARM_H<>'' & _tab.USERS<>'' &
         USERS.find_key(_tab.USERS,) &
         K_HARM_H.seek(_tab.K_HARM_H,form(_tab.K_HARM_H-8),1)
      || K_HARM_H.USERS:=USERS.ref(); K_HARM_H.put(1)
      ?};
      FUN.prg_next();
      _tab.next()
   !};
   FUN.prg_stop()
?};
K_HARM_H.cntx_pop(); USERS.cntx_pop();
~~


\k_rap_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Modyfikuje K_RAP_U
::----------------------------------------------------------------------------------------------------------------------
_fn:='k_rap_u_xpertis.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_tab:=sql('select K_RAP_U.REFERENCE as K_RAP_U, USERS.WEBLOGIN as USERS from K_RAP_U '+
          'join USERS using(USERS.REFERENCE,K_RAP_U.USERS) where 1=0');
_tab.import('k_rap_u_xpertis.tra',0,0,%1+';','UTF-8,pth,noheader',,
            'K_RAP_U',,1,,
            'USERS',,2,
            );
K_RAP_U.cntx_psh(); K_RAP_U.prefix();
USERS.cntx_psh(); USERS.index('WEBLOGIN'); USERS.prefix();
{? _tab.first()
|| FUN.prg_start(_tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      {? _tab.K_RAP_U<>'' & _tab.USERS<>'' &
         USERS.find_key(_tab.USERS,) &
         K_RAP_U.seek(_tab.K_RAP_U,form(_tab.K_RAP_U-8),1)
      || K_RAP_U.USERS:=USERS.ref(); K_RAP_U.put(1)
      ?};
      FUN.prg_next();
      _tab.next()
   !};
   FUN.prg_stop()
?};
K_RAP_U.cntx_pop(); USERS.cntx_pop();
~~


\k_role_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Modyfikuje K_ROLE_U
::----------------------------------------------------------------------------------------------------------------------
_fn:='k_role_u_xpertis.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_tab:=sql('select K_ROLE_U.REFERENCE as K_ROLE_U, USERS.WEBLOGIN as USERS from K_ROLE_U '+
          'join USERS using(USERS.REFERENCE,K_ROLE_U.USERS) where 1=0');
_tab.import('k_role_u_xpertis.tra',0,0,%1+';','UTF-8,pth,noheader',,
            'K_ROLE_U',,1,,
            'USERS',,2,
            );
K_ROLE_U.cntx_psh(); K_ROLE_U.prefix();
USERS.cntx_psh(); USERS.index('WEBLOGIN'); USERS.prefix();
{? _tab.first()
|| FUN.prg_start(_tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      {? _tab.K_ROLE_U<>'' & _tab.USERS<>'' &
         USERS.find_key(_tab.USERS,) &
         K_ROLE_U.seek(_tab.K_ROLE_U,form(_tab.K_ROLE_U-8),1)
      || K_ROLE_U.USERS:=USERS.ref(); K_ROLE_U.put(1)
      ?};
      FUN.prg_next();
      _tab.next()
   !};
   FUN.prg_stop()
?};
K_ROLE_U.cntx_pop(); USERS.cntx_pop();
~~


\k_raport
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Modyfikuje K_RAPORT
::----------------------------------------------------------------------------------------------------------------------
_fn:='k_raport_xpertis.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_tab:=sql('select K_RAPORT.REFERENCE as K_RAPORT, USERS.WEBLOGIN as USERS from K_RAPORT '+
          'join USERS using(USERS.REFERENCE,K_RAPORT.KTO_UTW) where 1=0');
_tab.import('k_raport_xpertis.tra',0,0,%1+';','UTF-8,pth,noheader',,
            'K_RAPORT',,1,,
            'USERS',,2,
            );
K_RAPORT.cntx_psh(); K_RAPORT.prefix();
USERS.cntx_psh(); USERS.index('WEBLOGIN'); USERS.prefix();
{? _tab.first()
|| FUN.prg_start(_tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      {? _tab.K_RAPORT<>'' & _tab.USERS<>'' &
         USERS.find_key(_tab.USERS,) &
         K_RAPORT.seek(_tab.K_RAPORT,form(_tab.K_RAPORT-8),1)
      || K_RAPORT.KTO_UTW:=USERS.ref(); K_RAPORT.put(1)
      ?};
      FUN.prg_next();
      _tab.next()
   !};
   FUN.prg_stop()
?};
K_RAPORT.cntx_pop(); USERS.cntx_pop();
~~


\k_harm_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Modyfikuje K_HARM_P
::----------------------------------------------------------------------------------------------------------------------
_fn:='k_harm_p_xpertis.tra';
{? ~fexists(_fn,1)
|| FUN.info('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_tab:=sql('select K_HARM_P.REFERENCE as K_HARM_P,'+
          ' USERS.WEBLOGIN as USERS1, '+
          ' USERS.WEBLOGIN as USERS2, '+
          ' USERS.WEBLOGIN as USERS3, '+
          ' USERS.WEBLOGIN as USERS4'+
          ' from K_HARM_P join USERS using(USERS.REFERENCE,K_HARM_P.KTO_UZU) where 1=0');
_tab.import('k_harm_p_xpertis.tra',0,0,%1+';','UTF-8,pth,noheader',,
            'K_HARM_P',,1,,
            'USERS1',,2,,
            'USERS2',,3,,
            'USERS3',,4,,
            'USERS4',,5,
            );
K_HARM_P.cntx_psh(); K_HARM_P.prefix();
USERS.cntx_psh(); USERS.index('WEBLOGIN'); USERS.prefix();
{? _tab.first()
|| FUN.prg_start(_tab.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      {? _tab.K_HARM_P<>'' & K_HARM_P.seek(_tab.K_HARM_P,form(_tab.K_HARM_P-8),1)
      || {? _tab.USERS1<>'' & USERS.find_key(_tab.USERS1,)
         || K_HARM_P.KTO_UZU:=USERS.ref()
         ?};
         {? _tab.USERS2<>'' & USERS.find_key(_tab.USERS2,)
         || K_HARM_P.KTO_AKC:=USERS.ref()
         ?};
         {? _tab.USERS3<>'' & USERS.find_key(_tab.USERS3,)
         || K_HARM_P.UZU:=USERS.ref()
         ?};
         {? _tab.USERS4<>'' & USERS.find_key(_tab.USERS4,)
         || K_HARM_P.AKC:=USERS.ref()
         ?};
         K_HARM_P.put(1)
      ?};
      FUN.prg_next();
      _tab.next()
   !};
   FUN.prg_stop()
?};
K_HARM_P.cntx_pop(); USERS.cntx_pop();
~~


\faks_pola
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [14.10]
:: OPIS: Przejście z FAKS.POLA na FAKSPOLA
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('POLA',FAKS)<0 & var_pres('POLAFAKS')<0 || return() ?};

FAKS.cntx_psh();
FAKSPOLA.cntx_psh();
_Names:=FAKS.names();
_prg_start:=_loop:=_Names.first();
{? _prg_start || FUN.prg_start(_Names.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|!
   FAKS.use(_Names.NAME);
   FAKS.prefix();
   _loop:=FAKS.first();
   {!
   |? _loop
   |!
      {? FAKS.POLA
      ||
         FAKSPOLA.use((FAKSPOLA.name()-3)+(FAKS.name()+3));
         FAKSPOLA.index('UNIK');
         FAKSPOLA.prefix(FAKS.ref());
         {? ~FAKSPOLA.first()
         || exec('buf_fill','transfer','FAKS','POLA','POLAFAKS',exec('polafaks','transfer'));
            FAKSPOLA.REK:=FAKS.ref();
            FAKSPOLA.MK:=POLAFAKS.MK;
            FAKSPOLA.SAMFAK:=POLAFAKS.SAMFAK;
            FAKSPOLA.OO:=POLAFAKS.OO;
            FAKSPOLA.ZW:=POLAFAKS.ZW;
            FAKSPOLA.PZW_PRZE:=POLAFAKS.PZW_PRZE;
            FAKSPOLA.PZW_DUE:=POLAFAKS.PZW_DUE;
            FAKSPOLA.PZW_INNA:=POLAFAKS.PZW_INNA;
            FAKSPOLA.EGZ:=POLAFAKS.EGZ;
            FAKSPOLA.EGZ_NAZ:=POLAFAKS.EGZ_NAZ;
            FAKSPOLA.EGZ_ADR:=POLAFAKS.EGZ_ADR;
            FAKSPOLA.PP:=POLAFAKS.PP;
            FAKSPOLA.PP_NAZ:=POLAFAKS.PP_NAZ;
            FAKSPOLA.PP_ADR:=POLAFAKS.PP_ADR;
            FAKSPOLA.PP_ID:=POLAFAKS.PP_ID;
            FAKSPOLA.NST_DATA:=POLAFAKS.NST_DATA;
            FAKSPOLA.NST_KM:=POLAFAKS.NST_KM;
            FAKSPOLA.NST_GODZ:=POLAFAKS.NST_GODZ;
            FAKSPOLA.TT:=POLAFAKS.TT;
            FAKSPOLA.USL_TUR:=POLAFAKS.USL_TUR;
            FAKSPOLA.UDS:=POLAFAKS.UDS;
            FAKSPOLA.UDS_OPIS:=POLAFAKS.UDS_OPIS;
            {? FAKSPOLA.NST_RODZ='' & FAKSPOLA.NST_DATA<>date(0,0,0)
            || FAKSPOLA.NST_RODZ:=exec('nst_ladowy','jpk_log')
            ?};
            FAKSPOLA.add()
         ?}
      ?};
      _loop:=FAKS.next()
   !};
   FUN.prg_next();
   _loop:=_Names.next()
!};
{? _prg_start || FUN.prg_stop() ?};
FAKSPOLA.cntx_pop();
FAKS.cntx_pop()


\nd_pola
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [14.10]
:: OPIS: Przejście z ND.POLA na ND.DOST_ODB
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('POLA',ND)<0 || return() ?};

ND.cntx_psh();
_Names:=ND.names();
_prg_start:=_loop:=_Names.first();
{? _prg_start || FUN.prg_start(_Names.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|!
   ND.use(_Names.NAME);
   ND.prefix();
   _loop:=ND.first();
   {!
   |? _loop
   |!
      {? ND.POLA
      ||
         exec('buf_fill','transfer','ND','POLA','POLAND',exec('poland','transfer'));
         ND.DOST_ODB:=POLAND.DOST_ODB;
         ND.put()
      ?};
      _loop:=ND.next()
   !};
   FUN.prg_next();
   _loop:=_Names.next()
!};
{? _prg_start || FUN.prg_stop() ?};
ND.cntx_pop()


\dok_pola
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [14.10]
:: OPIS: Przejście z DOK.POLA na DOKPOLA
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('POLA',DOK)<0 | var_pres('POLAFAKS')<0 || return() ?};

DOK.cntx_psh();
DOKPOLA.cntx_psh();
_Names:=DOK.names();
_prg_start:=_loop:=_Names.first();
{? _prg_start || FUN.prg_start(_Names.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|!
   DOK.use(_Names.NAME);
   DOK.prefix();
   _loop:=DOK.first();
   {!
   |? _loop
   |!
      {? DOK.POLA
      ||
         DOKPOLA.use((DOKPOLA.name()-4)+(DOK.name()+4));
         DOKPOLA.index('UNIK');
         DOKPOLA.prefix(DOK.ref());
         {? ~DOKPOLA.first()
         || exec('buf_fill','transfer','DOK','POLA','POLAFAKS',exec('polafaks','transfer'));
            DOKPOLA.REK:=DOK.ref();
            DOKPOLA.MK:=POLAFAKS.MK;
            DOKPOLA.SAMFAK:=POLAFAKS.SAMFAK;
            DOKPOLA.OO:=POLAFAKS.OO;
            DOKPOLA.ZW:=POLAFAKS.ZW;
            DOKPOLA.PZW_PRZE:=POLAFAKS.PZW_PRZE;
            DOKPOLA.PZW_DUE:=POLAFAKS.PZW_DUE;
            DOKPOLA.PZW_INNA:=POLAFAKS.PZW_INNA;
            DOKPOLA.EGZ:=POLAFAKS.EGZ;
            DOKPOLA.EGZ_NAZ:=POLAFAKS.EGZ_NAZ;
            DOKPOLA.EGZ_ADR:=POLAFAKS.EGZ_ADR;
            DOKPOLA.PP:=POLAFAKS.PP;
            DOKPOLA.PP_NAZ:=POLAFAKS.PP_NAZ;
            DOKPOLA.PP_ADR:=POLAFAKS.PP_ADR;
            DOKPOLA.PP_ID:=POLAFAKS.PP_ID;
            DOKPOLA.NST_DATA:=POLAFAKS.NST_DATA;
            DOKPOLA.NST_KM:=POLAFAKS.NST_KM;
            DOKPOLA.NST_GODZ:=POLAFAKS.NST_GODZ;
            DOKPOLA.TT:=POLAFAKS.TT;
            DOKPOLA.USL_TUR:=POLAFAKS.USL_TUR;
            DOKPOLA.UDS:=POLAFAKS.UDS;
            DOKPOLA.UDS_OPIS:=POLAFAKS.UDS_OPIS;
            DOKPOLA.add()
         ?}
      ?};
      _loop:=DOK.next()
   !};
   FUN.prg_next();
   _loop:=_Names.next()
!};
{? _prg_start || FUN.prg_stop() ?};
DOKPOLA.cntx_pop();
DOK.cntx_pop()


\pola
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [14.10]
:: OPIS: Pola i ich wartości
::   WE:
::   WY:
::  OLD: \pola/polatab.fml
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(1
   ,'AKRONIM'  ,'STRING[8]'   ,''
   ,'DOKL'     ,'INTEGER'     ,''
   ,'FORMULA1' ,'STRING[255]' ,''
   ,'FORMULA2' ,'STRING[255]' ,'')


\pole_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [14.10]
:: OPIS: Dodanie pola
::   WE: _a - Uchwyt do tabeli zwracanej przez exec('tab','tabpol')
::       _b - Akronim pola
::       _c - Wartość
::       _d - Dokładność liczby
::   WY:
::  OLD: \pole_add/polatab.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab:=_a;
_Tab.blank(1);
_Tab.AKRONIM:=_b;
_Tab.DOKL:={? var_press('_d')=type_of(0) || _d || 0 ?};
_formula:=exec('convert','transfer',_e,_Tab.DOKL);
_Tab.FORMULA1:=255+_formula;
_Tab.FORMULA2:=255-_formula;
_Tab.add()


\convert
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [14.10]
:: OPIS: Konwersja wartości na formułę
::   WE: _a - wartość do konwersji
::       _b - dokładność liczby/długość ciągu znaków
::   WY: formuła
::  OLD: \convert/polatab.fml
::----------------------------------------------------------------------------------------------------------------------
_wart:=_a;
_dokl:=_b;

{? type_of(_wart)=type_of(0)
|| form(_wart,,_dokl,'9.')
|| exec('val2fml','#convert',_wart,type_of(_wart))
?}


\buf_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [14.10]
:: OPIS: Wypełnienie pól zmiennej _c wartościami z pola _b tabeli _a wg definicji _d
::   WE: _a - Tabela - akronim
::       _b - Pole - akronim
::       _c - Zmienna
::       _d - Uchwyt do tabeli zwracanej przez exec('tab','tabpol')
::   WY:
::  OLD: \buf_fill/polatab.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab:=_a;
_fld:=_b;
_Buf:=_c;
_Pola:=_d;

_sep:='^';

_loop:=_Pola.first();
{!
|? _loop
|!
   ($(_Buf+'.'+_Pola.AKRONIM))():=($(_Pola.FORMULA1+_Pola.FORMULA2))();
   _loop:=_Pola.next()
!};

FAKS.cntx_psh();

_change:=0;

{? ($(_Tab+'.'+_fld))()=null() & _Tab='DOK'
|| {? 1+DOK.DOKZRODL='D'
   || _ref:=#(4-DOK.DOKZRODL);
      {? _ref
      || _maska:=(FAKS.name()-3)+(3+(1-DOK.DOKZRODL));
         FAKS.use(_maska);
         FAKS.prefix();
         {? FAKS.seek(_ref,)
         || _Tab:='FAKS';
            _change:=1
         ?}
      ?}
   ?}
?};

{? ($(_Tab+'.'+_fld))()<>null()
|| _file:=fopen(($(_Tab+'.'+_fld))(),'r',,,1);

   {? _file.is_open()
   ||
      ($(_Buf+'.blank()'))();
      {!
      |? (_line:=fread(_file,); _line<>'\n')
      |!
         _wsk:=_line*_sep;
         _akronim:=(_wsk-1)+_line;
         ($(_Buf+'.'+_akronim))():=($(_wsk-_line))()
      !};
      fclose(_file)
   ?}
?};

{? _change & FAKS.SZ='S'
|| {? POLAFAKS.OO<>FAKS.NDVAT | POLAFAKS.TT<>FAKS.DO_UE
   || POLAFAKS.OO:={? FAKS.NDVAT='O' || 'T' || 'N' ?};
      POLAFAKS.TT:=FAKS.DO_UE
   ?}
?};

FAKS.cntx_pop()


\polafaks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Deklaracja dodatkowych pól
::   WE:
::   WY:
::  OLD: \polafaks/jpk_log.fml
::----------------------------------------------------------------------------------------------------------------------
_Pola:=exec('pola','transfer');
exec('pole_add','transfer',_Pola,'MK','STRING',1,'N');
exec('pole_add','transfer',_Pola,'SAMFAK','STRING',1,'N');
exec('pole_add','transfer',_Pola,'OO','STRING',1,'N');
exec('pole_add','transfer',_Pola,'ZW','STRING',1,'N');
exec('pole_add','transfer',_Pola,'PZW_PRZE','STRING',255,'');
exec('pole_add','transfer',_Pola,'PZW_DUE','STRING',255,'');
exec('pole_add','transfer',_Pola,'PZW_INNA','STRING',255,'');
exec('pole_add','transfer',_Pola,'EGZ','STRING',1,'N');
exec('pole_add','transfer',_Pola,'EGZ_NAZ','STRING',255,'');
exec('pole_add','transfer',_Pola,'EGZ_ADR','STRING',255,'');
exec('pole_add','transfer',_Pola,'PP','STRING',1,'N');
exec('pole_add','transfer',_Pola,'PP_NAZ','STRING',255,'');
exec('pole_add','transfer',_Pola,'PP_ADR','STRING',255,'');
exec('pole_add','transfer',_Pola,'PP_ID','STRING',50,'');
exec('pole_add','transfer',_Pola,'NST_DATA','DATE',10,date(0,0,0));
exec('pole_add','transfer',_Pola,'NST_KM','STRING',50,'');
exec('pole_add','transfer',_Pola,'NST_GODZ','STRING',50,'');
exec('pole_add','transfer',_Pola,'TT','STRING',1,'N');
exec('pole_add','transfer',_Pola,'USL_TUR','STRING',1,'N');
exec('pole_add','transfer',_Pola,'UDS','STRING',1,'N');
exec('pole_add','transfer',_Pola,'UDS_OPIS','STRING',100,'');
_Pola


\poland
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Deklaracja dodatkowych pól
::   WE:
::   WY:
::  OLD: \poland/jpk_log.fml
::----------------------------------------------------------------------------------------------------------------------
_Pola:=exec('pola','transfer');
exec('pole_add','transfer',_Pola,'DOST_ODB','STRING',255,'');
_Pola


\obiegi_01
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.30]
:: OPIS: kod - ER/WRT/XP/12.30/1406/0076
::       Diety - błędny zapis ilości posiłków
::  OLD: \obiegi_01/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
EDOKUMD.cntx_psh();
EDOKUM.cntx_psh();
_names:=EDOKUMD.names();
{? _names.first()
|| FUN.prg_start(_names.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      EDOKUMD.use(_names.NAME);
      EDOKUM.use('skid_v'+(EDOKUMD.name+2));
      EDOKUM.prefix();
      EDOKUMD.index('DELEG');
      EDOKUMD.prefix();
      {? EDOKUMD.first()
      || {! |?
            {? (EDOKUMD.DNI=0 | EDOKUMD.DNI>9) & ((EDOKUMD.KOLACJA & EDOKUMD.W_KOL)
               | (EDOKUMD.OBIAD & EDOKUMD.W_OBI) | (EDOKUMD.SNIAD & EDOKUMD.W_SNI))
            || _put:=0;
               {? EDOKUMD.DNI=0
               || EDOKUMD.cntx_psh();
                  _dni:=exec('licz_dni','transfer');
                  EDOKUMD.cntx_pop();
                  {? _dni<>EDOKUMD.DNI || EDOKUMD.DNI:=_dni; _put:=1 ?}
               ?};
               {? EDOKUMD.SNIAD & EDOKUMD.W_SNI & EDOKUMD.LICZ_SNI<>EDOKUMD.DNI
               || EDOKUMD.LICZ_SNI:=EDOKUMD.DNI$0;
                  _put:=1
               ?};
               {? EDOKUMD.OBIAD & EDOKUMD.W_OBI & EDOKUMD.LICZ_OBI<>EDOKUMD.DNI
               || EDOKUMD.LICZ_OBI:=EDOKUMD.DNI$0;
                  _put:=1
               ?};
               {? EDOKUMD.KOLACJA & EDOKUMD.W_KOL & EDOKUMD.LICZ_KOL<>EDOKUMD.DNI
               || EDOKUMD.LICZ_KOL:=EDOKUMD.DNI$0;
                  _put:=1
               ?};
               {? _put || EDOKUMD.put() ?}
            ?};
            EDOKUMD.next()
         !}
      ?};
      FUN.prg_next();
      _names.next()
   !};
   FUN.prg_stop()
?};
EDOKUM.cntx_pop();
EDOKUMD.cntx_pop();
1


\obiegi_02
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1603/0073
::       usuniecie blednych zapisow z EDOKOS dla zadekretowanych dokumentow
::----------------------------------------------------------------------------------------------------------------------
EDOKOS.cntx_psh(); EDOKUM.cntx_psh();
_maski:=EDOKUM.names();
_ndx1:=EDOKOS.ndx_tmp(,1,'EDOKUM',,0,'STATUS',,0);
_ndx2:=EDOKUM.ndx_tmp(,1,'STDEKRD',,0);
{? _maski.first()
|| FUN.prg_start(_maski.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? _rok:=(_maski.NAME+2);
      EDOKUM.use('skid_v'+_rok);
      EDOKOS.use('skid_y'+_rok);
      EDOKOS.index(_ndx1);
      EDOKUM.index(_ndx2);
      {?  EDOKUM.find_ge(1)
      || {! |? EDOKOS.prefix(EDOKUM.ref,'N');
               {? EDOKOS.first()
               || {! |? EDOKOS.del() !}
               ?};
               EDOKUM.next()
         !}
      ?};
      FUN.prg_next();
      _maski.next()
   !};
   FUN.prg_stop()
?};
EDOKOS.ndx_drop(_ndx1); EDOKUM.ndx_drop(_ndx2);
obj_del(_maski);
EDOKOS.cntx_pop(); EDOKUM.cntx_pop();
1


\licz_dni
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.30]
:: OPIS: kod - ER/WRT/XP/12.30/1406/0076
::       Diety - błędny zapis ilości posiłków - formula pomocniczna
::  OLD: \licz_dni/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_dni:=0;
{? EDOKUMD.CZY_DIET & ((EDOKUMD.Z_CZY_G='Z' & EDOKUMD.DATA_OD<>date(0,0,0) & EDOKUMD.DATA_DO<>date(0,0,0))
   | (EDOKUMD.Z_CZY_G='G'))
|| exec('czytaj','#stalesys',{? EDOKUMD.DATA_OD<>date(0,0,0) || EDOKUMD.DATA_OD || EDOKUMD.EDOKUM().DOP ?},XINFO);
   {? EDOKUMD.Z_CZY_G='Z'
   || _tmp_dni:=EDOKUMD.DATA_DO-EDOKUMD.DATA_OD;
      _godz:=_tmp_dni*24+((EDOKUMD.GODZ_DO~1)-(EDOKUMD.GODZ_OD~1));
      _tmp_min:=((EDOKUMD.GODZ_DO~2)-(EDOKUMD.GODZ_OD~2));
      _tmp_sec:=((EDOKUMD.GODZ_DO~3)-(EDOKUMD.GODZ_OD~3));
      _godz+=(_tmp_min/60)+(_tmp_sec/60/60)
   |? EDOKUMD.Z_CZY_G='G'
   || _godz:=EDOKUMD.L_G
   ?};
   {? EDOKUMD.KRAJ().SYM='PL'
   || {? _godz<8 || _dni:=0
      |? _godz>=8 & _godz<=12 || _dni:=0.5
      |? _godz>12 & _godz<=24 || _dni:=1
      |? _godz>24
      || _dni:=_godz%24;
         _tmp_g:=_godz-(_dni*24);
         {? _tmp_g>0 || {? _tmp_g<=8 || _dni+=0.5 || _dni+=1 ?} ?}
      ?}
   || {? EDOKUMD.KRAJ<>null & EDOKUMD.KRAJ().SYM<>'PL'
      || _doba:=exec('stawki_zagr','transfer',EDOKUMD.KRAJ().SYM,EDOKUMD.EDOKUM().DATA_OD,'D');
         {? _doba<>0
         || {? _godz>0 & _godz<=8 || _dni:=(1/3)
            |? _godz>8 & _godz<=12 || _dni:=0.5
            |? _godz>12 & _godz<=24 || _dni:=1
            |? _godz>24
            || _dni:=_godz%24;
               _tmp_g:=_godz-(_dni*24);
               {? _tmp_g>0
               || {? _tmp_g<=8 || _dni+=(1/3) |? _tmp_g<=12 || _dni+=0.5 || _dni+=1 ?}
               ?}
            ?}
         ?}
      ?}
   ?};
   exec('czytaj','#stalesys',,XINFO)
?};
_dni


\stawki_zagr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.30]
:: OPIS: Zwraca stawke diety zagranicznej lub stawke ryczaltu za nocleg
::   WE: _a - symbol kraju
::       _b - data dla ktorej formula ma zwrocic obowiazujace stawki
::       _c - typ stawki 'D' - dieta, 'N' - ryczałt za nocleg, domyslnie, jesli nie podano to 'D'
::  OLD: \stawki_zagr/skid_dob.fml
::----------------------------------------------------------------------------------------------------------------------
{? _<3 || _c:='D' ?};
_stawka:=0;
DIETZAGR.index('KRAJ');
DIETZAGR.prefix(_a);
{? DIETZAGR.first()
|| {? _b<>date(0,0,0)
   || _od:=_b
   || _od:=date()
   ?};
   {! |?
        {? DIETZAGR.OD<_od
        || {? _c='D' || _stawka:=DIETZAGR.STAWKA
           |? _c='N' || _stawka:=DIETZAGR.RYCZ_NOC
           ?};
           DIETZAGR.next()
        || 0
        ?}
   !}
?};
_stawka


\fiks_01
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.30]
:: OPIS: kod - ER/WRT/XP/12.30/1307/0062
::       Deklaracja VAT-7D – rozbieżność pomiędzy wydrukiem a e-deklaracją oraz inne błedy.
::  OLD: \fiks_01/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_01a','transfer',5,53);
exec('fiks_01a','transfer',4,63)


\fiks_01a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.30]
:: OPIS: Formula pomocnicza do fiks_01
::  OLD: \fiks_01a/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.index('VER_NR'); VAT_VER.prefix('FKS','VAT7D','VAT7D',_a);
{? VAT_VER.first()
|| ISTDEF.index('DATA'); ISTDEF.prefix('FKS','D','VAT7D',VAT_VER.ref());
   {? ISTDEF.first()
   || ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref());
      {? ISTDEFS.find_key('P_'+$_b,)
      || ISTDEFS.REGULY:='{? exec(\'poz_edek\',\'xml\','+$(_b+1)+')<>\'0\' || \'1\' || \'2\' ?}';
         ISTDEFS.put()
      ?};
      {? ISTDEFS.find_key('CelZlozenia')
      || ISTDEFS.REGULY:='{? VAT_DEK.TYP=\'VAT7D\' || \'1\' || \'2\' ?}';
         ISTDEFS.put()
      ?}
   ?}
?};
1


\fiks_04
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.30]
:: OPIS: kod - PR/WRT/XP/12.30/1402/0128
::       Kontrola godzin diet - formuła przy akceptacji.
::       Formula naprawcza dodaje definicje formuly do tabeli dla biezacej firmy.
::  OLD: \fiks_04/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
SCH_FORM.cntx_psh();
SCH_FORM.prefix();
SCH_FORM.TYP:='E';
SCH_FORM.SKROT:='GODZINY_DEL_DIET';
SCH_FORM.NAZWA:='Zgodność liczby godzin delegacji i diet';
SCH_FORM.SYSTEM:='N';
SCH_FORM.TRESC:='exec(\'godz_del_diet\',\'%obg_akc\')';
SCH_FORM.FIRMA:=REF.FIRMA;
_wy:=SCH_FORM.add(1);
SCH_FORM.cntx_pop();
_wy


\fiks_05
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.30]
:: OPIS: kod - ER/WRT/XP/12.30/1311/0033
::       Sprawozdania finansowe - definiowanie algorytmow - kontrola algorytmow
::  OLD: \fiks_05/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
OKRO_F_G.index('ROK_F'); OKRO_F_G.prefix();
ALG_PAR.prefix();
W_ALGPAR.cntx_psh();
echo('Przetwarzanie tabeli ALG_PAR'@);
ALG_PAR.for_each("
   {? ALG_PAR.FIRMA<>REF.GRUPA & ALG_PAR.FIRMA().TYP='S' & ALG_PAR.ROK().PLAN_GR='T' & ALG_PAR.DEFW().GRUPA().FIRMA=REF.GRUPA
   || _del:=0;
      {? OKRO_F_G.find_key(ROK_F.ref())
      || ALG_PAR.cntx_psh();
         ALG_PAR.index('ALG_PAR1');
         ALG_PAR.prefix(REF.GRUPA,ALG_PAR.DEFW,ALG_PAR.GR_KOL,OKRO_F_G.ROK_F_G().NAZ,);
         ALG_PAR.LP:=0;
         ALG_PAR.ROK:=null;
         ALG_PAR.FIRMA:=null;
         _del:=~ALG_PAR.find_rec();
         ALG_PAR.cntx_pop()
      || _del:=1
      ?};
      {? _del
      || W_ALGPAR.use('walg_'+ROK_F.KOD);
         W_ALGPAR.index('W_ALGPAR');
         W_ALGPAR.prefix(ALG_PAR.ref());
         {? W_ALGPAR.first() || {! |? W_ALGPAR.del !} ?};
         ALG_PAR.cntx_psh();
         ALG_PAR.index('ALG_PAR1');
         ALG_PAR.prefix(ALG_PAR.FIRMA,ALG_PAR.DEFW,ALG_PAR.GR_KOL,ALG_PAR.ROK().NAZ,);
         {? ALG_PAR.count()>0
         || _tab:=ALG_PAR.testlink(,ALG_PAR.count());
            {? _tab.first()
            || {!
               |? _exec:=_tab.TABELA+'.cntx_psh();'+_tab.TABELA+'.use(\'\''+_tab.MASKA+'\'\');'+_tab.TABELA+'.prefix();'+
                  '{? '+_tab.TABELA+'.seek('+$_tab.REF+',) || '+_tab.TABELA+'.del() ?};'+_tab.TABELA+'.cntx_pop()';
                  ($_exec)();
                  _tab.next()
               !}
            ?};
            &_tab
         ?};
         {? ALG_PAR.del()
         || _lp:=1;
            {? ALG_PAR.first()
            || {!
               |? ALG_PAR.LP:=_lp; _lp+=1;
                  ALG_PAR.put();
                  ALG_PAR.next()
               !}
            ?}
         ?};
         ALG_PAR.cntx_pop()
      ?}
   ?}
");
W_ALGPAR.cntx_pop();
echo();
1


\fiks_03
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: kod - ER/WRT/XP/12.30/1401/0056
::       Start zerowy - brak wypelnienia pola forma zatrudnienia w wzorcach slowników.
::  OLD: \fiks_03/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
RS.cntx_psh(); RS.index('TAB_POLE'); RS.prefix();
F_ZATR.cntx_psh(); F_ZATR.index('UNIQUE'); F_ZATR.prefix();
{? ~F_ZATR.find_key('P') | ~F_ZATR.find_key('Z')
|| exec('dod_f_zatr','f_zatr');
   F_ZATR.index('UNIQUE'); F_ZATR.prefix()
?};
{? RS.find_key('SLO_OSOB','SLO_OSOB','ID','ID','Pracownik','Pracownik') & RS.F_ZATR=null()
|| {? F_ZATR.find_key('P')
   || RS.F_ZATR:=F_ZATR.ref()
   ?};
   RS.put()
?};
{? RS.find_key('SLO_OSOB','SLO_OSOB','ID','ID','Zleceniobiorca','Zleceniobiorca') & RS.F_ZATR=null()
|| {? F_ZATR.find_key('Z')
   || RS.F_ZATR:=F_ZATR.ref()
   ?};
   RS.put()
?};
F_ZATR.cntx_pop();
RS.cntx_pop();
1


\fiks_08
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.30]
:: OPIS: kod - ER/WRT/XP/12.30/1409/0023
::       Subkonta kontrahentów a wielofirmowość
::  OLD: \fiks_06/skid_trn.fml
::  ORG: \skid_rbk/upgrade_1742.fml
::       \RBK_VAT/upgrade_1822.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.cntx_psh();
SKID_RBK.prefix();
{? SKID_RBK.first()
|| echo('Przetwarzanie tabeli SKID_RBK'@);
   SKID_RBK.for_each("{? SKID_RBK.TAB='KH2'
                      || _ref:=SKID_RBK.ref();
                         _refn:=SKID_RBK.SKID_RBK;
                         _firma:='';
                         {? SKID_RBK.seek(_refn,SKID_RBK.name()) & SKID_RBK.TAB+4='INFO'
                         || _firma:=3+SKID_RBK.TAB;
                            {? SKID_RBK.seek(_ref)
                            || SKID_RBK.TAB:=_firma+'KH2';
                               SKID_RBK.put()
                            ?}
                         ?}
                      ?};
                      {? SKID_RBK.AKTYWNY='' || SKID_RBK.AKTYWNY:='T'; SKID_RBK.put() ?};
                      {? SKID_RBK.VAT='' || SKID_RBK.VAT:='N'; SKID_RBK.put() ?}
                     ");
   echo()
?};
SKID_RBK.cntx_pop();
1


\sym_zew
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [12.41]
:: OPIS: Odtwarzanie symboli zewnetrznych dokumentow
::   WE: _a - 1 - jednokrotnie dla dowolnej firmy
::            2 - wielokrotnie - dla wszystkich firm
::  OLD: \sym_zew/skid_trn.fml
::  OLD: \fiks_03/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| OP.cntx_psh(); _names2:=OP.names();
   {? _names2.first()
   || _size:=_names2.size();
      {! |?
         OP.use(_names2.NAME); OP.prefix();
         OP.for_each("OP.put()");
         echo('Tabela OP maska %1'@[_names2.NAME],'Pozostało: %1'@[$_size]); _size-=1;
         _names2.next()
      !}
   ?};
   OP.cntx_pop();

   SER_POZ.cntx_psh(); _names3:=SER_POZ.names();
   {? _names3.first()
   || {! |?
         echo('Przetwarzanie tabeli SER_POZ maska %1 ...'@[_names3.NAME]);
         SER_POZ.use(_names3.NAME); SER_POZ.prefix();
         SER_POZ.for_each("SER_POZ.put()");
         _names3.next()
      !}
   ?};
   SER_POZ.cntx_pop();

   WIND_OP.cntx_psh(); _names4:=WIND_OP.names();
   {? _names4.first()
   || {! |?
         echo('Przetwarzanie tabeli WIND_OP maska %1 ...'@[_names4.NAME]);
         WIND_OP.use(_names4.NAME); WIND_OP.prefix();
         WIND_OP.for_each("WIND_OP.put()");
         _names4.next()
      !}
   ?};
   WIND_OP.cntx_pop();

   PAR_POZ.cntx_psh(); _names5:=PAR_POZ.names();
   {? _names5.first()
   || {! |?
         echo('Przetwarzanie tabeli PAR_POZ maska %1 ...'@[_names5.NAME]);
         PAR_POZ.use(_names5.NAME); PAR_POZ.prefix();
         PAR_POZ.for_each("PAR_POZ.put()");
         _names5.next()
      !}
   ?};
   PAR_POZ.cntx_pop();

   PAR_NAG.cntx_psh(); _names7:=PAR_NAG.names();
   {? _names7.first()
   || {! |?
         echo('Przetwarzanie tabeli PAR_NAG maska %1 ...'@[_names7.NAME]);
         PAR_NAG.use(_names7.NAME); PAR_NAG.prefix();
         PAR_NAG.for_each("PAR_NAG.put()");
         _names7.next()
      !}
   ?};
   PAR_NAG.cntx_pop();
   echo();
   DOK_REJ.cntx_psh(); DOK_REJ.prefix();
   DOK_REJ.for_each("{? DOK_REJ.EDSYMZEW<>'T' || DOK_REJ.EDSYMZEW:='N'; DOK_REJ.put() ?}",1);
   DOK_REJ.cntx_pop()
|| PB_OP.cntx_psh(); _names1:=PB_OP.names();
   {? _names1.first()
   || {! |?
         PB_OP.use(_names1.NAME); PB_OP.prefix();
         echo('Przetwarzanie tabeli PB_OP maska %1 ...'@[_names1.NAME]);
         PB_OP.for_each("PB_OP.put()");
         _names1.next()
      !}
   ?};
   PB_OP.cntx_pop();

   PW_OP.cntx_psh(); _names2:=PW_OP.names();
   {? _names2.first()
   || {! |?
         PW_OP.use(_names2.NAME); PW_OP.prefix();
         echo('Przetwarzanie tabeli PW_OP maska %1 ...'@[_names2.NAME]);
         PW_OP.for_each("PW_OP.put()");
         _names2.next()
      !}
   ?};
   PW_OP.cntx_pop();

   PB.cntx_psh(); _names3:=PB.names();
   {? _names3.first()
   || {! |?
         PB.use(_names3.NAME); PB.prefix();
         echo('Przetwarzanie tabeli PB maska %1 ...'@[_names3.NAME]);
         PB.for_each("PB.put()");
         _names3.next()
      !}
   ?};
   PB.cntx_pop();

   PW.cntx_psh(); _names4:=PW.names();
   {? _names4.first()
   || {! |?
         PW.use(_names4.NAME); PW.prefix();
         echo('Przetwarzanie tabeli PW maska %1 ...'@[_names4.NAME]);
         PW.for_each("PW.put()");
         _names4.next()
      !}
   ?};
   PW.cntx_pop();

   P_PZ.cntx_psh(); _names5:=P_PZ.names();
   {? _names5.first()
   || {! |?
         P_PZ.use(_names5.NAME); P_PZ.prefix();
         echo('Przetwarzanie tabeli P_PZ maska %1 ...'@[_names5.NAME]);
         P_PZ.for_each("P_PZ.put()");
         _names5.next()
      !}
   ?};
   P_PZ.cntx_pop();
   echo()
?};
1


\trn_vat_ps
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Aktualizuje VAT_PS.SHA
::  OLD: \trn_vat_ps/skid_trn.fml
::  ORG: \vat_ps/upgrade_1728.fml
::----------------------------------------------------------------------------------------------------------------------
_maski:=VAT_PS.names();
{? _maski.first()
|| VAT_PS.cntx_psh();
   PVAT.cntx_psh();
   VPOZ.cntx_psh();
   {!
   |? echo('Aktualizacja VAT_PS z maski %1'@[_maski.NAME]);
      VAT_PS.use(_maski.NAME);
      VAT_PS.index('VAT_PS');
      VAT_PS.prefix();
      {? VAT_PS.first()
      || {!
         |? {? VAT_PS.SHA=''
            || {? 4+VAT_PS.PVAT_REF='pvat'
               || PVAT.use(VAT_PS.PVAT_REF-8);
                  PVAT.prefix();
                  {? PVAT.seek(BB.sqlint(VAT_PS.PVAT_REF),)
                  || VAT_PS.SHA:=exec('sha1','#to_sha1','PVAT');
                     VAT_PS.put()
                  ?}
               |? VAT_PS.PVAT_REF<>''
               || VPOZ.use(VAT_PS.PVAT_REF-8);
                  VPOZ.prefix();
                  {? VPOZ.seek(BB.sqlint(VAT_PS.PVAT_REF),)
                  || VAT_PS.SHA:=exec('sha1','#to_sha1','VPOZ');
                     VAT_PS.put()
                  ?}
               ?}
            ?};
            VAT_PS.next()
         !}
      ?};
      _maski.next()
   !};
   VPOZ.cntx_pop();
   PVAT.cntx_pop();
   VAT_PS.cntx_pop();
   echo()
?};
1


\modeler
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Importuje niezbędne elementy modelera
::----------------------------------------------------------------------------------------------------------------------
_txt:='Importowanie niezbędnych elementów dla Modelera.'@;
KOMM.init(250,,_txt);

FUN.prg_start(10,_txt,,,1);
_tab_opt_idadd:=exec('tab_optimize_idadd','#b_action');
exec('stat_list','#bi_stat');
FUN.prg_next();
exec('fill_tab','#b_type',0);
FUN.prg_next();
exec('add_domain','#b_action');
FUN.prg_next();
exec('imp_act','#b_action',0,,0);
FUN.prg_next();
exec('import','#b_port',0,,_tab_opt_idadd);
FUN.prg_next();
exec('import','#b_perm',0);
FUN.prg_next();
exec('import','#parses',0);
FUN.prg_next();
exec('import','#b_cond',0);
FUN.prg_next();
exec('fill_all','#b_dane',0);
FUN.prg_next();
exec('import_hash','#b_action');
FUN.prg_stop();
::KOMM.select();
~~


\kasa_ident2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: kod - ER/WRT/XP/12.30/1306/0011
::       Poprawa tresci formuly w zmiennej dla formul IDENT2 dla systemu kasa
::  OLD: \kasa_ident2/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
_tr_old:='EZALPOZ.index(\'ZRODLO\'); EZALPOZ.prefix($POZDOK.ref(),$POZDOK.ref());'+
         '{? EZALPOZ.first() || EZALPOZ.EZAL().SYM ||\'\' ?}';
WARLOG.cntx_psh();
WARLOG.index('KKOD'); WARLOG.prefix('S','IDENT2','IDENT2');
{? WARLOG.first() & WARLOG.FO=_tr_old
|| WARLOG.FO:='EZALPOZ.index(\'ZRODLO\'); EZALPOZ.prefix(REF.FIRMA,$POZDOK.ref(),$POZDOK.ref());'+
              '{? EZALPOZ.first() || EZALPOZ.EZAL().SYM ||\'\' ?}';
   WARLOG.put()
?};
WARLOG.cntx_pop();
1


\hb_01
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.30]
:: OPIS: kod - ER/WRT/XP/12.30/1404/0093
::       System nie rozpoznaje rachunku bankowego licencjobiorcy podczas dodawania wyciągu bankowego
::  OLD: \hb_01/skid_trn.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.cntx_psh();
SKID_RBK.prefix();
exec('RB','object');
SKID_RBK.for_each("
                  _put:=0;
                  {? SKID_RBK.BANK=null & SKID_RBK.N<>'' & SKID_RBK.KRAJ<>null
                  || SKID_RBK.BANK:=RB.getrbank(4,SKID_RBK.N,SKID_RBK.KRAJ().KODISO);
                     {? SKID_RBK.BANK<>null || _put:=1 ?}
                  ?};
                  {? SKID_RBK.WAL=null & SKID_RBK.KRAJ<>null
                  || {? SKID_RBK.KRAJ().WAL<>null
                     || SKID_RBK.WAL:=SKID_RBK.KRAJ().WAL;
                        _put:=1
                     ?}
                  ?};
                  {? _put || SKID_RBK.put() ?}
                 ",1);
SKID_RBK.cntx_pop();
1


\etypy_podz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1410/0017
::       Bledne wartosci w polu ETYPY.ED_PODZ
::  OLD: \etypy_podz/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
TYPOBIEG.cntx_psh(); TYPOBIEG.prefix();
ETYPY.cntx_psh(); ETYPY.index('UNIK'); ETYPY.prefix();
{? ETYPY.first()
|| FUN.prg_start(ETYPY.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |?
      {? OBIEGI.TYPOBIEG().NAZWA='Obieg wniosków' & (ETYPY.CZY_WAR=0 | ETYPY.CZY_WAR=1)
      || ETYPY.ED_PODZ:='N'; ETYPY.put()
      ?};
      FUN.prg_next();
      ETYPY.next()
   !};
   FUN.prg_stop()
?};
ETYPY.cntx_pop(); TYPOBIEG.cntx_pop()


\obiegi_03
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1505/0066
::       usuniecie nieaktualnych wartosci stawek za 1 km przebiegu pobieranych do wyliczenia kilometrowki
::  OLD: \obiegi_01/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
SAMDELEG.index('RODZAJ');
SAMDELEG.prefix();
{? SAMDELEG.first
|| {! |? {? SAMDELEG.DATA=date(2012,1,1)
         || SAMDELEG.del
         || SAMDELEG.next
         ?}
   !}
?};
SAMDELTY.index('RODZAJ');
SAMDELTY.prefix();
{? SAMDELTY.find_key('OSOBOWY_DO_900','OSOBOWY_DO_900')
|| SAMDELEG.RODZAJ:=SAMDELTY.ref();
   SAMDELEG.STAWKA:=0.5214;
   SAMDELEG.DATA:=date(2007,11,14);
   SAMDELEG.add(1)
?};
{? SAMDELTY.find_key('OSOBOWY_POW_900','OSOBOWY_POW_900')
|| SAMDELEG.RODZAJ:=SAMDELTY.ref();
   SAMDELEG.STAWKA:=0.8358;
   SAMDELEG.DATA:=date(2007,11,14);
   SAMDELEG.add(1)
?};
{? SAMDELTY.find_key('MOTOCYKL','MOTOCYKL')
|| SAMDELEG.RODZAJ:=SAMDELTY.ref();
   SAMDELEG.STAWKA:=0.2302;
   SAMDELEG.DATA:=date(2007,11,14);
   SAMDELEG.add(1)
?};
{? SAMDELTY.find_key('MOTOROWER','MOTOROWER')
|| SAMDELEG.RODZAJ:=SAMDELTY.ref();
   SAMDELEG.STAWKA:=0.1382;
   SAMDELEG.DATA:=date(2007,11,14);
   SAMDELEG.add(1)
?};
1


\obiegi_04
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.51]
:: OPIS: kod - ER/WRT/XP/12.51/1901/0018
::       Rodzaje pojazdów do ewidencji przebiegu
::----------------------------------------------------------------------------------------------------------------------
SAMDELTY.index('RODZAJ');
SAMDELTY.prefix();
{? SAMDELTY.first
|| {! |? {? SAMDELTY.RODZAJ='OSOBOWY_DO_900'
         || SAMDELTY.OPIS:='Dla sam. osob. z silnikiem o poj. skok. do 900 cm3';
            SAMDELTY.put()
         |? SAMDELTY.RODZAJ='OSOBOWY_POW_900'
         || SAMDELTY.OPIS:='Dla sam. osob. z silnikiem o poj. skok. > 900 cm3';
            SAMDELTY.put()
         ?};
         SAMDELTY.next()
    !}
?};
1


\fiks_02
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1503/0058
::       e-deklaracje dla CIT-8 pozycje 93, 96
::  OLD: \fiks_02/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_02a','transfer',92,
   'P92:=exec(\'poz_edek_plus\',\'xml\'); P93:=exec(\'poz_edek_plus\',\'xml\',93);'+
   '{? P92=\'\' || {? P93=\'\' || \'0\' || \'\' ?} || P92 ?}'
);
exec('fiks_02a','transfer',93,'_r:=P93; &P92; &P93; _r');
exec('fiks_02a','transfer',95,
   'P95:=exec(\'poz_edek_plus\',\'xml\'); P96:=exec(\'poz_edek_plus\',\'xml\',96);'+
   '{? P95=\'\' || {? P96=\'\' || \'0\' || \'\' ?} || P95 ?}'
);
exec('fiks_02a','transfer',96,'_r:=P96; &P95; &P96; _r');
1


\fiks_02a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Formula pomocnicza do fiks_02
::   WE: _a - nr pozycji deklaracji
::       _b - tresc formuly
::  OLD: \fiks_02a/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.index('VER_NR'); VAT_VER.prefix('FKS','CIT8','CIT8',21);
{? VAT_VER.first()
|| ISTDEF.index('DATA'); ISTDEF.prefix('FKS','D','CIT8',VAT_VER.ref());
   {? ISTDEF.first()
   || ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref());
      {? ISTDEFS.find_key('P_'+$_a,)
      || ISTDEFS.REGULY:=_b;
         ISTDEFS.put()
      ?}
   ?}
?}


\czy_rach_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.41]
:: OPIS: Formula sprawdza czy rachunek z parametru _a jest rachunkiem kontrahenta z parametru _b
::   WE: _a - ref rachunku bankowego SKID_RBK.ref
::       _b - ref kontrahneta KH.ref
::   WY: 1 - _a rachunek jest rachunkiem kontrahenta z par _b, 0 - w p.p.
::  OLD: \czy_rach_kh/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.cntx_psh();
SKID_RBK.index('TAB');
SKID_RBK.prefix(RACHBANK.FIRMA,'KH','KH',#_b);
_wyn:=SKID_RBK.seek(_a);
SKID_RBK.cntx_pop();
_wyn


\fiks_20
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1507/0044
::       e-deklaracje dla CIT-8 pozycje 35, 36
::  OLD: \fiks_04/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_02a','transfer',35,
   'P35:=exec(\'poz_edek_plus\',\'xml\'); P36:=exec(\'poz_edek_plus\',\'xml\',36);'+
   '{? P35=\'\' || {? P36=\'\' || \'0\' || \'\' ?} || P35 ?}'
);
exec('fiks_02a','transfer',36,'_r:=P36; &P35; &P36; _r');
1


\fiks_21
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1508/0044
::       Korekta deklaracji VAT-7 w wersji 15 - błąd 408 przy pobieraniu UPO
::  OLD: \fiks_05/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.index('VER_NR'); VAT_VER.prefix('FKS','VAT7','VAT7',15);
{? VAT_VER.first()
|| ISTDEF.index('DATA'); ISTDEF.prefix('FKS','D','VAT7',VAT_VER.ref());
   {? ISTDEF.first()
   || ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref());
      {? ISTDEFS.find_key('Deklaracja',)
      || ISTDEFI.index('ISTDEFS');
         ISTDEFI.prefix(ISTDEFS.ref(),'xmlns:zzu',);
         {? ~ISTDEFI.first()
         || ISTDEFI.index('LP'); ISTDEFI.prefix(ISTDEFS.ref());
            {? ISTDEFI.last()
            || ISTDEFI.LP:=ISTDEFI.LP+1;
               ISTDEFI.NAZ:='xmlns:zzu';
               ISTDEFI.REGULY:='\'http://crd.gov.pl/xml/schematy/dziedzinowe/mf/2011/10/07/eD/ORDZU/\'';
               ISTDEFI.add()
            ?}
         ?}
      ?}
   ?}
?};
1


\fiks_22
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1508/0050
::       E-deklaracje VAT-7, VAT-7D - niewłaściwe ujęcie kwot w załaczniakch VAT-ZZ, VAT-ZT, NAD-ZP
::  OLD: \fiks_06/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_06a','transfer','VAT7',15,'vzz:P_9',54);
exec('fiks_06a','transfer','VAT7',15,'vzt:P_10',55);

exec('fiks_06a','transfer','VAT7D',5,'vzz:P_9',57);
exec('fiks_06a','transfer','VAT7D',5,'vzt:P_10',58);

exec('fiks_06a','transfer','VAT7D',6,'vzz:P_9',60);
exec('fiks_06a','transfer','VAT7D',6,'vzt:P_10',61);
exec('fiks_06a','transfer','VAT7D',6,'znzp:P_8',57);
1


\fiks_22a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Formula pomocnicza do fiks_06
::   WE: _a - typ deklaracji
::       _b - nr deklaracji
::       _c - pozyca deklaracji
::       _d - nr pola
::  OLD: \fiks_06a/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.index('VER_NR'); VAT_VER.prefix('FKS',_a,_a,_b);
{? VAT_VER.first()
|| ISTDEF.index('DATA'); ISTDEF.prefix('FKS','D',_a,VAT_VER.ref());
   {? ISTDEF.first()
   || ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref());
      {? ISTDEFS.find_key(_c,)
      || ISTDEFS.REGULY:='exec(\'poz_edek\',\'xml\','+$_d+')';
         ISTDEFS.put()
      ?}
   ?}
?}


\fiks_23
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.41]
:: OPIS: Ujecie korekt faktury dla potrzeb CIT od stycznia 2016
::       Formula dodaje zmienna dla formul ktora mozna wykorzystac do parametryzacji dekretacji.
::  OLD: \fiks_07/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
WARLOG.cntx_psh();
WARLOG.index('KKOD');
WARLOG.prefix();
WARLOG.KOD:='RODZ_KOR';
WARLOG.OPIS:='Rodzaj korekty - czy rozliczane w bieżącym okresie';
WARLOG.FO:='exec(\'spr_przycz_kor\',\'%fks_dekr_dziedz\')';
WARLOG.DV:='N';
WARLOG.RKW:='D';
WARLOG.TD:='S';
WARLOG.SO:='P';
WARLOG.RODZ:='L';
WARLOG.add(1);
WARLOG.cntx_pop();
1


\fiks_24
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: Zmiana w polu RODZAJ deklaracji dla VAT-27
::  OLD: \fiks_08/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_DEK.cntx_psh();
VAT_DEK.index('VAT_DEK');
VAT_DEK.prefix();
{? VAT_DEK.first
|| FUN.prg_start(VAT_DEK.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {! |? {? VAT_DEK.TYP='VAT27' & VAT_DEK.RODZAJ='I'
         || VAT_DEK.RODZAJ:='M'; VAT_DEK.put()
         |? VAT_DEK.TYP='VAT7D' & VAT_DEK.RODZAJ='D'
         || VAT_DEK.RODZAJ:='Q'; VAT_DEK.put()
         ?};
         FUN.prg_next();
         VAT_DEK.next()
   !};
   FUN.prg_stop()
?};
VAT_DEK.cntx_pop();
1


\fiks_25
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1603/0037
::       Uzupelnienie znacznika zapisu wartości pola 'Adres do aktualizacji' w definicji stałej
::  OLD: \fiks_09/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
KST_DEF.index('SYMBOL');
KST_DEF.prefix('HTTPPATH','HTTPPATH');
{? KST_DEF.first()
|| KST_DEF.ZAPIS:=KST_DEF.WSPOLNA:='T';
   KST_DEF.put()
?}


\fiks_26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1604/0039
::       E-deklaracje VAT-7 (16), VAT-7D (7) - niewłaściwe ujęcie kwot w załącznikach VAT-ZZ, VAT-ZT, NAD-ZP
::  OLD: \fiks_10/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_06a','transfer','VAT7',16,'vzz:P_9',55);
exec('fiks_06a','transfer','VAT7',16,'vzt:P_10',56);

exec('fiks_06a','transfer','VAT7D',7,'vzz:P_9',61);
exec('fiks_06a','transfer','VAT7D',7,'vzt:P_10',62);

exec('fiks_06a','transfer','VAT7D',7,'znzp:P_8',58);
1


\fiks_26a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1702/0066
::       Powtórzony bład  ER/WRT/XP/12.41/1604/0039 w e-deklaracji VAT(17)
::  OLD: \fiks_21/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_06a','transfer','VAT7',17,'vzz:P_9',57);
exec('fiks_06a','transfer','VAT7',17,'vzt:P_10',58);
1


\fiks_28
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1608/0029
::       JPK - pobieranie UPO z bramki produkcyjnej - błąd 506 przy ustalaniu czasu w sekcji: Pobranie UPO
::  OLD: \fiks_12/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
_tmpdir:=fmk_tmp_dir(0);
{? type_of(_tmpdir) <> type_of(~~)
|| _pth:=_tmpdir.get_path
|| FUN.emsg('Nie udało się utworzyć katalogu tymczasowego po stronie serwera.'@);
   return()
?};
fnUpo:=_pth+'/upo.xml';
JPK.prefix();
JPK.for_each("
   {? JPK.STAT='T' & JPK.T_UPO=time(0,0,0)
   || {? JPK.bl_get('UPO',fnUpo,0)
      || exec('set_upo_date','!fks_jpk_eexp',exec('read','!fks_jpk_eexp',fnUpo));
         JPK.put()
      ?}
   ?}
",1);
{? fexists(fnUpo,0)
|| ferase(fnUpo,0)
?};
1


\fiks_29
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1608/0037
::       JPK_VAT - NrIdWystawcy dla kontrahentów indywidualnych i zagranicznych (zakupy)
::  OLD: \fiks_14/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','VAT',null(),date(2016,03,11));
{? ISTDEF.first()
|| ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref);
   {? ISTDEFS.find_key(80)
   || ISTDEFS.WYM:='T';
      ISTDEFS.REGULY:='{? VAT_PS.KH=\'\' || \'brak nazwy kontrahenta\' || VAT_PS.KH ?}';
      ISTDEFS.put
   ?};
   {? ISTDEFS.find_key(81)
   || ISTDEFS.WYM:='T';
      ISTDEFS.REGULY:='{? VAT_PS.ADRES=\'\' || \'brak adresu kontrahenta\' || VAT_PS.ADRES ?}';
      ISTDEFS.put
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\fiks_30
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1609/0011
::       JPK Wykryte błędy odnośnie plików JPK_FA, JPK_WB skutkujące negatywnym wynikiem weryfikacji w aplikacji MF
::  OLD: \fiks_15/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','FA',null(),date(2016,03,11));
{? ISTDEF.first()
|| ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref);
   {? ISTDEFS.find_key(29)
   || ISTDEFS.REGULY:='exec(\'fa_datad\',\'jpk\')';
      ISTDEFS.put
   ?};
   {? ISTDEFS.find_key(31)
   || ISTDEFS.REGULY:='exec(\'fa_ele\',\'jpk\')';
      ISTDEFS.put
   ?};
   {? ISTDEFS.find_key(33)
   || ISTDEFS.REGULY:='exec(\'fa_ele\',\'jpk\')';
      ISTDEFS.put
   ?}
?};
ISTDEF.prefix('FKS','J','WB',null(),date(2016,03,11));
{? ISTDEF.first()
|| ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref);
   {? ISTDEFS.find_key(12)
   || ISTDEFS.REGULY:='exec(\'wb_dataop\',\'jpk\')';
      ISTDEFS.put
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\fiks_31
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1609/0051
::       JPK: JPK_VAT - pole DataSprzedazy wypełnione błędną wartością 0000/00/00
::  OLD: \fiks_16/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','VAT',null(),date(2016,03,11));
{? ISTDEF.first()
|| ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref);
   {? ISTDEFS.find_key(30)
   || ISTDEFS.REGULY:='{? VAT_PS.DATA<>VAT_PS.DATA2 & VAT_PS.DATA2<>date(0,0,0) || STR.gsub($VAT_PS.DATA2,\'/\',\'-\') || \'\' ?}';
      ISTDEFS.put
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\fiks_32
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1609/0059
::       JPK: JPK_FA Błędnie wyświetlana ilość dla przypadku więcej niż 2 miejsca po przecinku
::  OLD: \fiks_17/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','FA',null(),date(2016,03,11));
{? ISTDEF.first()
|| ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref);
   {? ISTDEFS.find_key(14)
   || ISTDEFS.LICZ:=6;
      ISTDEFS.put
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\fiks_33
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1609/0063
::       Zaimportowane przelewy wypadają z filtra "znikają"
::  OLD: \fiks_18/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
PW.cntx_psh(); _names:=PW.names();
{? _names.first()
|| {! |?
      PW.use(_names.NAME); PW.prefix();
      echo('Przetwarzanie tabeli PW maska %1 ...'@[_names.NAME]);
      PW.for_each("PW.put()");
      _names.next()
   !}
?};
PW.cntx_pop();
echo();
1


\fiks_34
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1701/0018
::       JPK - Błąd w schemacie JPK_VAT (2) od stycznia 2017
::  OLD: \fiks_20/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','VAT',null,date(2017,1,1));
{? ISTDEF.first()
|| ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref,'AdresPodmiotu');
   {? ISTDEFS.first()
   || ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),#ISTDEFS.ref());
      {? ISTDEFS.first()
      || {!
         |? {? 4+ISTDEFS.OPIS='etd:'
            || ISTDEFS.OPIS:='tns:'+(4-ISTDEFS.OPIS);
               ISTDEFS.put()
            ?};
            ISTDEFS.next()
         !}
      ?}
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\vat_sr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Uzupełnienie pol zwiazanych z aktualizacja 12.41_50 - Korekta roczna VAT przy zastosowaniu prewskaznika
::   WE: [_a] - gdy 1 uzupełnia tylko VAT_SR.C_PROC
::----------------------------------------------------------------------------------------------------------------------
all:=_=0;
{? var_press('PROC_PR',VAT_SR)>0
|| VAT_KW.prefix();
   {? all
   || VAT_KW.for_each("
         {? VAT_KW.PROC_PR=0
         || VAT_KW.PROC_PR:=100;
            VAT_KW.put()
         ?}
      ",1)
   ?};
   VAT_SR.prefix();
   VAT_SR.for_each("
      _put:=0;
      {? all
      || {? VAT_SR.PROC_PR=0
         || VAT_SR.PROC_PR:=100;
            _put:=1
         ?};
         {? VAT_SR.OKRES_S<>null & VAT_SR.PROC_PR2=0
         || VAT_SR.PROC_PR2:=100;
            _put:=1
         ?}
      ?};
      {? var_press('C_PROC',VAT_SR)>0 & ~VAT_SR.C_PROC
      || VAT_SR.C_PROC:=1;
         _put:=1
      ?};
      {? _put || VAT_SR.put() ?}
   ",1);
   {? all
   || ROK_F.prefix();
      ROK_F.for_each("
         {? ROK_F.PREWSK=0
         || ROK_F.PREWSK:=100;
            ROK_F.put()
         ?}
      ",1)
   ?}
?};
VAR_DEL.delete('all')


\edokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Transfer dokumentów w obiegu - wersja 17.14
::  ORG: \etypy/upgrade_1728.fml
::       \edokum_edi/upgrade_1728.fml
::       \etypy/upgrade_1742.fml
::       \edokum/upgrade_1742.fml
::----------------------------------------------------------------------------------------------------------------------
:: usunięcie starej numeracji i dołączenie nowej
NRDOK.cntx_psh(); NRDOK.index('NRDOK'); NRDOK.prefix('DOB',);
{? NRDOK.first()
|| NR.cntx_psh(); NR.use('numer'+(-NRDOK.TYP)); NR.index('NR'); NR.prefix();
   {? NR.first() || {! |? NR.del() !} ?};
   NR.cntx_pop();
   NRDOK.del()
?};
NRDOK.prefix(); NRDOK.blank(1);
NRDOK.TYP:='DOB';
NRDOK.OP:='Numeracja dokumentów w obiegu';
NRDOK.AB:='EDOKUM';
NRDOK.F:=$"(4+EDOKUM.ROK_F().NAZ)+'/'+(('0000000000'+$EDOKUM.NR)+10)";
NRDOK.MAXN:=1;
NRDOK.WOL_NR:='N';
NRDOK.P1:='ROK_F';
NRDOK.P2:='TYPOBIEG';
NRDOK.add(1);
NRDOK.cntx_pop();

:: pola ETYPY
ETYPY.cntx_psh(); ETYPY.prefix();
ETYPY.for_each("{? ETYPY.CZY_ZALP='' || ETYPY.CZY_ZALP:='N'; ETYPY.ETYPZAL:=null() ?};
                {? ETYPY.RODZ_DOK='' || ETYPY.RODZ_DOK:='Z' ?};
                {? ETYPY.FAKT_ZAL='' || ETYPY.FAKT_ZAL:='N' ?};
                {? ETYPY.TYPOBIEG().NAZWA='Obieg delegacji' || ETYPY.CZY_PRAC:=1 ?};
                ETYPY.CZY_PLAN:=1; ETYPY.put()
               ",1);
ETYPY.cntx_pop();

:: import ETYPY - dekretacja
{? fexists('etypy.tra',1)
|| ETYPY.cntx_psh(); ETYPY.prefix();
   ETYPYFIR.cntx_psh(); ETYPYFIR.index('UNIK');
   FIRMA.cntx_psh(); FIRMA.prefix();
   ROK_F.cntx_psh(); ROK_F.prefix();
   ODD.cntx_psh(); ODD.prefix();
   REJ.cntx_psh(); REJ.prefix();
   DOK_REJ.cntx_psh(); DOK_REJ.prefix();
   VAT_REJ.cntx_psh(); VAT_REJ.prefix();
   GR_VAT.cntx_psh(); GR_VAT.prefix();
   _f:=fopen('etypy.tra','r',1);
   {? _f
   || {! |?
         (_wiersz:=fread(_f))<>'\n'
      |! _tab:=spli_str(_wiersz,'@');
         {? obj_len(_tab)>=9 & _tab[1]<>'' & _tab[2]<>'' & _tab[3]<>'' &
            (_tab[4]<>'' | _tab[5]<>'' | _tab[6]<>'' | _tab[7]<>'' | _tab[8]<>'') &
            ETYPY.seek(BB.sqlint(_tab[1]),ETYPY.name(),1) &
            ROK_F.seek(BB.sqlint(_tab[2]),ROK_F.name(),1) &
            ODD.seek(BB.sqlint(_tab[3]),ODD.name(),1)
         || ETYPYFIR.prefix(ETYPY.ref(),ROK_F.FIRMA,ROK_F.ref(),ODD.ref());
            {? ~ETYPYFIR.first()
            || ETYPYFIR.blank(1);
               ETYPYFIR.ETYPY:=ETYPY.ref();
               ETYPYFIR.FIRMA:=ROK_F.FIRMA;
               ETYPYFIR.ODD:=ODD.ref();
               ETYPYFIR.ROK_F:=ROK_F.ref();
               {? _tab[4]<>'' & REJ.seek(BB.sqlint(_tab[4]),REJ.name(),1)
               || ETYPYFIR.DOM_REJ:=REJ.ref();
                  {? _tab[5]<>'' & DOK_REJ.seek(BB.sqlint(_tab[5]),DOK_REJ.name(),1)
                  || ETYPYFIR.DOM_RDOK:=DOK_REJ.ref()
                  ?};
                  {? _tab[6]<>'' & DOK_REJ.seek(BB.sqlint(_tab[6]),DOK_REJ.name(),1)
                  || ETYPYFIR.DOM_RKOR:=DOK_REJ.ref()
                  ?}
               ?};
               {? _tab[7]<>'' & VAT_REJ.seek(BB.sqlint(_tab[7]),VAT_REJ.name(),1)
               || ETYPYFIR.DOM_RVAT:=VAT_REJ.ref()
               ?};
               {? _tab[8]<>'' & GR_VAT.seek(BB.sqlint(_tab[8]),GR_VAT.name(),1)
               || ETYPYFIR.DOMGRVAT:=GR_VAT.ref()
               ?};
               {? _tab[9]<>'' & AUTOKSIE.seek(BB.sqlint(_tab[9]),AUTOKSIE.name(),1)
               || ETYPYFIR.AUTOKSIE:=AUTOKSIE.ref()
               ?};
               ETYPYFIR.add(1)
            ?}
         ?};
         &_tab
      !};
      fclose(_f)
   ?};
   ETYPY.cntx_pop(); ETYPYFIR.cntx_pop(); FIRMA.cntx_pop(); ROK_F.cntx_pop(); ODD.cntx_pop();
   REJ.cntx_pop(); DOK_REJ.cntx_pop(); VAT_REJ.cntx_pop(); GR_VAT.cntx_pop()
?};

:: import EDOKOS - użytkownicy
{? fexists('edokos.tra',1)
|| USERS.cntx_psh(); USERS.index('WEBLOGIN'); USERS.prefix();
   EDOKOS.cntx_psh();
   _f1:=fopen('edokos.tra','r',1);
   {? _f1
   || {! |?
         (_wiersz:=fread(_f1))<>'\n'
      |! _tab1:=spli_str(_wiersz,'@');
         {? obj_len(_tab1)>1 & _tab1[1]<>'' & _tab1[2]<>'' & USERS.find_key(_tab1[2],)
         || EDOKOS.use(form(($_tab1[1])-8)+8); EDOKOS.prefix();
            {? EDOKOS.seek(BB.sqlint(_tab1[1]),EDOKOS.name(),1)
            || EDOKOS.USERS:=USERS.ref(); EDOKOS.put()
            ?}
         ?};
         &_tab1
      !};
      fclose(_f1)
   ?};
   EDOKOS.cntx_pop(); USERS.cntx_pop()
?};

:: import EDOKLOG - użytkownicy
{? fexists('edoklog.tra',1)
|| USERS.cntx_psh(); USERS.index('WEBLOGIN'); USERS.prefix();
   EDOKLOG.cntx_psh();
   _f2:=fopen('edoklog.tra','r',1);
   {? _f2
   || {! |?
         (_wiersz:=fread(_f2))<>'\n'
      |! _tab2:=spli_str(_wiersz,'@');
         {? obj_len(_tab2)>1 & _tab2[1]<>'' & _tab2[2]<>'' & USERS.find_key(_tab2[2],)
         || EDOKLOG.use(form(($_tab2[1])-8)+8); EDOKLOG.prefix();
            {? EDOKLOG.seek(BB.sqlint(_tab2[1]),EDOKLOG.name(),1)
            || EDOKLOG.USERS:=USERS.ref();
               {? obj_len(_tab2)>2 & _tab2[3]<>'' || EDOKLOG.B_PRELS:=_tab2[3] ?};
               EDOKLOG.put()
            ?}
         ?};
         &_tab2
      !};
      fclose(_f2)
   ?};
   EDOKLOG.cntx_pop(); USERS.cntx_pop()
?};

:: przeniesienie dokumentów
EDOKUM.cntx_psh();
_maski:=EDOKUM.names();
{? _maski.first()
|| _dob:=tab_tmp(1,'REF_OLD','STRING[16]','Ref poprzedniego EDOKUM',
                   'REF_NEW','STRING[16]','Ref obecnego EDOKUM'
                );
   _edr:=tab_tmp(1,'REF_OLD','STRING[16]','Ref poprzedniego EDOKRZAP',
                   'REF_NEW','STRING[16]','Ref obecnego EDOKRZAP'
                );
   {! |?
      EDOKUM.use('skid_v'+(_maski.NAME+2)); EDOKUM.prefix();
      EDOKUM.cntx_psh();
      EDOKUM.for_each("{? EDOKUM.EDI='' || EDOKUM.EDI:='N'; EDOKUM.put() ?};
                       {? EDOKUM.LOG_PRZ='' || EDOKUM.LOG_PRZ:='N'; EDOKUM.put() ?};
                       {? EDOKUM.ZD_NAG<>''
                       || {? (5+EDOKUM.ZD_NAG)='zdnag'
                          || EDOKUM.DOK_POW:=exec('FindAndGet','#table',ZD_NAG,EDOKUM.ZD_NAG,,\"OBI_POW:=@.EDOKUM.uidref();EZAPOT:=$@.EDOKUM.ref();put(1);uidref()\",'');
                             {? EDOKUM.DOK_POW<>'' || EDOKUM.LOG_PRZ:='T' ?};
                             EDOKUM.put()
                          |? (5+EDOKUM.ZD_NAG)='zknag'
                          || EDOKUM.DOK_POW:=exec('FindAndGet','#table',ZK_N,EDOKUM.ZD_NAG,,\"OBI_POW:=@.EDOKUM.uidref();EZAPOT:=$@.EDOKUM.ref();put(1);uidref()\",'');
                             {? EDOKUM.DOK_POW<>'' || EDOKUM.LOG_PRZ:='T' ?};
                             EDOKUM.put()
                          ?}
                       ?};
                       {? EDOKUM.FAKS<>''
                       || {? (5+EDOKUM.FAKS)='faktu'
                          || EDOKUM.DOK_POW:=exec('FindAndGet','#table',FAKS,EDOKUM.FAKS,,\"OBI_POW:=@.EDOKUM.uidref();EDOKUM:=$@.EDOKUM.ref();put(1);uidref()\",'');
                             {? EDOKUM.DOK_POW<>'' || EDOKUM.LOG_PRZ:='T' ?};
                             EDOKUM.put()
                          ?}
                       ?}
                      ");
      EDOKUM.cntx_pop();
      {? EDOKUM.first()
      || echo('Przetwarzanie tabeli EDOKUM maska %1 ...'@[EDOKUM.name()]);
         rok_dob:=firm_dob:=null; rok_mas:='';
         exec('ustal_dane_dob','transfer');
         {? rok_dob & firm_dob & rok_mas<>''
         || {! |?
               {? EDOKUM.ZAM='0' | #EDOKUM.ZAM>0
               || _old_ed:=EDOKUM.ref(); _new_ed:=null;
                  EDOKUM.memo_get(,'UW_OPDL');
                  do();
                  EDOKUM.cntx_psh(); EDOKUM.use('skid_v'+rok_mas); EDOKUM.prefix();
                  EDOKUM.FIRMA:=firm_dob;
                  EDOKUM.ROK_F:=rok_dob;
                  EDOKUM.ZAM:='T';
                  EDOKUM.KASPRZEL:='K';
                  EDOKUM.PLACE:='N';
                  EDOKUM.BUDZ_AKT:='N';
                  {? EDOKUM.add()
                  || {? (5+EDOKUM.ZD_NAG)='zdnag'
                     || exec('FindAndGet','#table',ZD_NAG,EDOKUM.ZD_NAG,,"OBI_POW:=@.EDOKUM.uidref();EZAPOT:=$@.EDOKUM.ref();put(1);uidref()",'')
                     |? (5+EDOKUM.ZD_NAG)='zknag'
                     || exec('FindAndGet','#table',ZK_N,EDOKUM.ZD_NAG,,"OBI_POW:=@.EDOKUM.uidref();EZAPOT:=$@.EDOKUM.ref();put(1);uidref()",'')
                     |? (5+EDOKUM.FAKS)='faktu'
                     || exec('FindAndGet','#table',FAKS,EDOKUM.FAKS,,"OBI_POW:=@.EDOKUM.uidref();EDOKUM:=$@.EDOKUM.ref();put(1);uidref()",'')
                     ?};
                     EDOKUM.memo_put(,'UW_OPDL');
                     _new_ed:=EDOKUM.ref();
                     _dob.REF_OLD:=$_old_ed;
                     _dob.REF_NEW:=$_new_ed;
                     _dob.add()
                  ?};
                  EDOKUM.cntx_pop();
                  {? _new_ed
                  || EDOKLOG.cntx_psh(); EDOKLOG.use('skid_d'+(_maski.NAME+2));
                     EDOKLOG.index('DISP'); EDOKLOG.prefix(_old_ed);
                     {? EDOKLOG.first()
                     || {! |?
                           EDOKLOG.memo_get(,'UW_DL');
                           EDOKLOG.cntx_psh(); EDOKLOG.use('skid_d'+rok_mas); EDOKLOG.prefix();
                           EDOKLOG.EDOKUM:=_new_ed;
                           {? EDOKLOG.add() || EDOKLOG.memo_put(,'UW_DL') ?};
                           EDOKLOG.cntx_pop();
                           EDOKLOG.next()
                        !}
                     ?};
                     EDOKLOG.cntx_pop();
                     EDOKOS.cntx_psh(); EDOKOS.use('skid_y'+(_maski.NAME+2));
                     EDOKOS.index('EDOKUM'); EDOKOS.prefix(_old_ed);
                     {? EDOKOS.first()
                     || {! |?
                           EDOKOS.memo_get(,'UW_DL');
                           EDOKOS.cntx_psh(); EDOKOS.use('skid_y'+rok_mas); EDOKOS.prefix();
                           EDOKOS.EDOKUM:=_new_ed;
                           {? EDOKOS.add() || EDOKOS.memo_put(,'UW_DL') ?};
                           EDOKOS.cntx_pop();
                           EDOKOS.next()
                        !}
                     ?};
                     EDOKOS.cntx_pop();
                     EVAT.cntx_psh(); EVAT.use('skid_a'+(_maski.NAME+2));
                     EVAT.index('EDOKUM'); EVAT.prefix(_old_ed);
                     {? EVAT.first()
                     || {! |?
                           EVAT.cntx_psh(); EVAT.use('skid_a'+rok_mas); EVAT.prefix();
                           EVAT.EDOKUM:=_new_ed; EVAT.add();
                           EVAT.cntx_pop();
                           EVAT.next()
                        !}
                     ?};
                     EVAT.cntx_pop();
                     EDOKUMD.cntx_psh(); EDOKUMD.use('bdiety'+(_maski.NAME+2));
                     EDOKUMD.index('DELEG'); EDOKUMD.prefix(_old_ed);
                     {? EDOKUMD.first()
                     || {! |?
                           EDOKUMD.cntx_psh(); EDOKUMD.use('bdiety'+rok_mas); EDOKUMD.prefix();
                           EDOKUMD.EDOKUM:=_new_ed; EDOKUMD.add();
                           EDOKUMD.cntx_pop();
                           EDOKUMD.next()
                        !}
                     ?};
                     EDOKUMD.cntx_pop();
                     EDOKUMP.cntx_psh(); EDOKUMP.use('skidpu'+(_maski.NAME+2));
                     EDOKUMP.index('CHRONO'); EDOKUMP.prefix(_old_ed);
                     {? EDOKUMP.first()
                     || {! |?
                           EDOKUMP.cntx_psh(); EDOKUMP.use('skidpu'+rok_mas); EDOKUMP.prefix();
                           EDOKUMP.EDOKUM:=_new_ed; EDOKUMP.add();
                           EDOKUMP.cntx_pop();
                           EDOKUMP.next()
                        !}
                     ?};
                     EDOKUMP.cntx_pop();
                     EDOKUMZ.cntx_psh(); EDOKUMZ.use('skid_n'+(_maski.NAME+2));
                     EDOKUMZ.index('DISP'); EDOKUMZ.prefix(_old_ed);
                     {? EDOKUMZ.first()
                     || {! |?
                           EDOKUMZ.cntx_psh(); EDOKUMZ.use('skid_n'+rok_mas); EDOKUMZ.prefix();
                           EDOKUMZ.DOKUM:=_new_ed; EDOKUMZ.add();
                           EDOKUMZ.cntx_pop();
                           EDOKUMZ.next()
                        !}
                     ?};
                     EDOKUMZ.cntx_pop();
                     EDOK_ATR.cntx_psh(); EDOK_ATR.use('edokat'+(_maski.NAME+2));
                     EDOK_ATR.index('REKKOLED'); EDOK_ATR.prefix(_old_ed);
                     {? EDOK_ATR.first()
                     || {! |?
                           EDOK_ATR.cntx_psh(); EDOK_ATR.use('edokat'+rok_mas); EDOK_ATR.prefix();
                           EDOK_ATR.EDOKUM:=_new_ed; EDOK_ATR.add();
                           EDOK_ATR.cntx_pop();
                           EDOK_ATR.next()
                        !}
                     ?};
                     EDOK_ATR.cntx_pop();
                     EDOK_ZAL.cntx_psh(); EDOK_ZAL.use('edokzl'+(_maski.NAME+2));
                     EDOK_ZAL.index('WAL'); EDOK_ZAL.prefix(_old_ed);
                     {? EDOK_ZAL.first()
                     || {! |?
                           EDOK_ZAL.cntx_psh(); EDOK_ZAL.use('edokzl'+rok_mas); EDOK_ZAL.prefix();
                           EDOK_ZAL.EDOKUM:=_new_ed; EDOK_ZAL.add();
                           EDOK_ZAL.cntx_pop();
                           EDOK_ZAL.next()
                        !}
                     ?};
                     EDOK_ZAL.cntx_pop();
                     EPODZ.cntx_psh(); EPODZ.use('skid_j'+(_maski.NAME+2));
                     EPODZ.index('EDOKUM'); EPODZ.prefix(_old_ed);
                     {? EPODZ.first()
                     || {! |?
                           EPODZ.cntx_psh(); EPODZ.use('skid_j'+rok_mas); EPODZ.prefix();
                           EPODZ.EDOKUM:=_new_ed; EPODZ.add();
                           EPODZ.cntx_pop();
                           EPODZ.next()
                        !}
                     ?};
                     EPODZ.cntx_pop();
                     EDOKRZAP.cntx_psh(); EDOKRZAP.use('skid_q'+(_maski.NAME+2));
                     EDOKRZAP.index('EDOKUM'); EDOKRZAP.prefix(_old_ed);
                     {? EDOKRZAP.first()
                     || {! |?
                           _old_edr:=$EDOKRZAP.ref();
                           EDOKRZAP.cntx_psh(); EDOKRZAP.use('skid_q'+rok_mas); EDOKRZAP.prefix();
                           EDOKRZAP.EDOKUM:=_new_ed;
                           {? EDOKRZAP.add()
                           || _edr.REF_OLD:=_old_edr;
                              _edr.REF_NEW:=$EDOKRZAP.ref();
                              _edr.add()
                           ?};
                           EDOKRZAP.cntx_pop();
                           EDOKRZAP.next()
                        !}
                     ?};
                     EDOKRZAP.cntx_pop()
                  ?};
                  end()
               ?};
               {? EDOKUM.ZAM=''
               || EDOKUM.ZAM:='N';
                  EDOKUM.put(1)
               ?};
               EDOKUM.next()
            !}
         ?}
      ?};
      _maski.next()
   !}
?};
EDOKUM.cntx_pop();

:: przepięcie podziałów i realizacji zapotrzebowań
EDOKRZAP.cntx_psh(); EDOKUM.cntx_psh();
_maski1:=EDOKRZAP.names();
{? _maski1.first()
|| {! |?
      EDOKRZAP.use('skid_q'+(_maski1.NAME+2)); EDOKRZAP.index('EDOKUM'); EDOKRZAP.prefix();
      EDOKUM.use('skid_v'+(_maski1.NAME+2)); EDOKUM.prefix();
      {? EDOKRZAP.first()
      || {! |?
            _seek:=0;
            {? EDOKRZAP.EDOKUM
            || EDOKUM.cntx_psh(); EDOKUM.use(ref_name(EDOKRZAP.EDOKUM)); EDOKUM.prefix();
               {? EDOKRZAP.EDOKUM().FIRMA<>null & EDOKRZAP.EZAPOT
               || _dob.prefix($EDOKRZAP.EZAPOT);
                  {? _dob.first()
                  || _ref:=BB.sqlint(_dob.REF_NEW); _nam:=form(_dob.REF_NEW-8);
                     {? _ref<>0 & _nam<>''
                     || EDOKUM.cntx_psh(); EDOKUM.use(_nam); EDOKUM.prefix();
                        {? EDOKUM.seek(_ref,_nam)
                        || EDOKRZAP.EZAPOT:=EDOKUM.ref(); _seek:=EDOKRZAP.put()
                        ?};
                        EDOKUM.cntx_pop()
                     ?}
                  ?}
               ?};
               EDOKUM.cntx_pop()
            ?};
            {? ~_seek || EDOKRZAP.EZAPOT:=null; EDOKRZAP.put() ?};
            EDOKRZAP.next()
         !}
      ?};
      _maski1.next()
   !}
?};
obj_del(_maski1);

:: przepięcie refów w EDOKRZAP i EPODZ
EDOKRZAP.cntx_pop(); EDOKUM.cntx_pop();
EPODZ.cntx_psh(); EDOKUM.cntx_psh();
_maski2:=EPODZ.names();
{? _maski2.first()
|| {! |?
      EPODZ.use('skid_j'+(_maski2.NAME+2)); EPODZ.index('EDOKUM'); EPODZ.prefix();
      EDOKUM.use('skid_v'+(_maski2.NAME+2)); EDOKUM.prefix();
      {? EPODZ.first()
      || {! |?
            _seek:=_firma:=0;
            EDOKUM.cntx_psh();
            {? EPODZ.EDOKUM
            || EDOKUM.use(ref_name(EPODZ.EDOKUM)); EDOKUM.prefix();
               _firma:=(EPODZ.EDOKUM().FIRMA<>null)
            ?};
            EDOKUM.cntx_pop();
            {? _firma  & EPODZ.EZAPOT
            || _dob.prefix($EPODZ.EZAPOT);
               {? _dob.first()
               || _ref:=BB.sqlint(_dob.REF_NEW); _nam:=form(_dob.REF_NEW-8);
                  {? _ref<>0 & _nam<>''
                  || EDOKUM.cntx_psh(); EDOKUM.use(_nam); EDOKUM.prefix();
                     {? EDOKUM.seek(_ref,_nam)
                     || EPODZ.EZAPOT:=EDOKUM.ref(); _seek:=EPODZ.put()
                     ?};
                     EDOKUM.cntx_pop()
                  ?}
               ?}
            ?};
            {? ~_seek || EPODZ.EZAPOT:=null; EPODZ.put() ?};
            _seek:=0;
            {? _firma & EPODZ.EDOKRZAP
            || _edr.prefix($EPODZ.EDOKRZAP);
               {? _edr.first()
               || _ref:=BB.sqlint(_edr.REF_NEW); _nam:=form(_edr.REF_NEW-8);
                  {? _ref<>0 & _nam<>''
                  || EDOKRZAP.cntx_psh(); EDOKRZAP.use(_nam); EDOKRZAP.prefix();
                     {? EDOKRZAP.seek(_ref,_nam)
                     || EPODZ.EDOKRZAP:=EDOKRZAP.ref(); _seek:=EPODZ.put()
                     ?};
                     EDOKRZAP.cntx_pop()
                  ?}
               ?}
            ?};
            {? ~_seek || EPODZ.EDOKRZAP:=null; EPODZ.put() ?};
            EPODZ.next()
         !}
      ?};
      _maski2.next()
   !}
?};
obj_del(_maski2);
EPODZ.cntx_pop(); EDOKUM.cntx_pop();

:: usunięcie zbędnych dokumentów
EDOKUM.cntx_psh(); POZF.cntx_psh();
EDOKUMW.cntx_psh(); EVAT.cntx_psh(); EPODZ.cntx_psh(); EDOKOS.cntx_psh(); EDOKGR.cntx_psh();
EDOKLOG.cntx_psh(); EDOKUMZ.cntx_psh(); EDOKRZAP.cntx_psh(); EDOK_ATR.cntx_psh();
EDOKUMP.cntx_psh(); EDOKUMD.cntx_psh(); EDOK_ZAL.cntx_psh(); EDOKPAR.cntx_psh();
{? _maski.first()
|| {! |?
      EDOKUM.use('skid_v'+(_maski.NAME+2)); EDOKUM.prefix();
      {? EDOKUM.first()
      || {! |?
            {? EDOKUM.ZAM='0' | #EDOKUM.ZAM>0
            || EDOKUMW.use('skidv1'+(_maski.NAME+2)); EDOKUMW.index('UNIK1'); EDOKUMW.prefix(EDOKUM.ref());
               {? EDOKUMW.first() || {! |? EDOKUMW.del() !} ?};
               EVAT.use('skid_a'+(_maski.NAME+2)); EVAT.index('EDOKUM'); EVAT.prefix(EDOKUM.ref());
               {? EVAT.first() || {! |? EVAT.del() !} ?};
               EPODZ.use('skid_j'+(_maski.NAME+2)); EPODZ.index('EDOKUM'); EPODZ.prefix(EDOKUM.ref());
               {? EPODZ.first() || {! |? EPODZ.del() !} ?};
               EDOKOS.use('skid_y'+(_maski.NAME+2)); EDOKOS.index('EDOKUM'); EDOKOS.prefix(EDOKUM.ref());
               {? EDOKOS.first() || {! |? EDOKOS.del() !} ?};
               EDOKGR.use('skid_c'+(_maski.NAME+2)); EDOKGR.index('UNIK'); EDOKGR.prefix(EDOKUM.ref());
               {? EDOKGR.first() || {! |? EDOKGR.del() !} ?};
               EDOKLOG.use('skid_d'+(_maski.NAME+2)); EDOKLOG.index('DISP'); EDOKLOG.prefix(EDOKUM.ref());
               {? EDOKLOG.first() || {! |? EDOKLOG.del() !} ?};
               EDOKUMZ.use('skid_n'+(_maski.NAME+2)); EDOKUMZ.index('DISP'); EDOKUMZ.prefix(EDOKUM.ref());
               {? EDOKUMZ.first() || {! |? EDOKUMZ.del() !} ?};
               EDOKRZAP.use('skid_q'+(_maski.NAME+2)); EDOKRZAP.index('EDOKUM'); EDOKRZAP.prefix(EDOKUM.ref());
               {? EDOKRZAP.first() || {! |? EDOKRZAP.del() !} ?};
               EDOK_ATR.use('edokat'+(_maski.NAME+2)); EDOK_ATR.index('REKKOLED'); EDOK_ATR.prefix(EDOKUM.ref());
               {? EDOK_ATR.first() || {! |? EDOK_ATR.del() !} ?};
               EDOKUMP.use('skidpu'+(_maski.NAME+2)); EDOKUMP.index('CHRONO'); EDOKUMP.prefix(EDOKUM.ref);
               {? EDOKUMP.first() || {! |? EDOKUMP.del() !} ?};
               EDOKPAR.use('skidh_'+(_maski.NAME+2)); EDOKPAR.index('UNIK'); EDOKPAR.prefix(EDOKUM.ref());
               {? EDOKPAR.first() || {! |? EDOKPAR.del !} ?};
               POZF.use('pozf__'+(_maski.NAME+2)); POZF.index('EDOKUM'); POZF.prefix(EDOKUM.ref());
               {? POZF.first() || {! |? POZF.del() !} ?};
               EDOKUMD.use('bdiety'+(_maski.NAME+2)); EDOKUMD.index('DELEG'); EDOKUMD.prefix(EDOKUM.ref);
               {? EDOKUMD.first() || {! |? EDOKUMD.del() !} ?};
               {? EDOKUM.DOKUM<>''
               || DOKUM.cntx_psh(); DOKUM.prefix();
                  _ref:=BB.sqlint(EDOKUM.DOKUM); _nam:=form(EDOKUM.DOKUM-8);
                  {? _ref<>0 & _nam<>'' & DOKUM.seek(_ref,_nam)
                  || DOKUM.EDOKUMR:=''; DOKUM.put()
                  ?};
                  DOKUM.cntx_pop()
               ?};
               EDOK_ZAL.use('edokzl'+(_maski.NAME+2)); EDOK_ZAL.index('WAL'); EDOK_ZAL.prefix(EDOKUM.ref);
               {? EDOK_ZAL.first()
               || {! |?
                     EDOKUMZ.cntx_psh(); EVAT.cntx_psh();
                     EDOKUM.cntx_psh(); EDOKUM.prefix();
                     EDOKUMZ.index('WYDATEK'); EDOKUMZ.prefix(EDOK_ZAL.ref());
                     EDOKOS.cntx_psh(); EDOKOS.index('EDOKUM');
                     {? EDOKUMZ.first()
                     || {! |?
                           _delr:=EDOKUMZ.del(,1);
                           {? _delr=1 || 0 |? _delr=0 || undo(); 0 || 1 ?}
                        !}
                     ?};
                     EDOKUMZ.cntx_pop(); EVAT.cntx_pop(); EDOKUM.cntx_pop(); EDOKOS.cntx_pop();
                     _delr:=EDOK_ZAL.del(,1);
                     {? _delr=1 || 0 |? _delr=0 || undo(); 0 || 1 ?}
                  !}
               ?};
               _typ:=EDOKUM.TYP; _nr:=EDOKUM.NR; _delr:=EDOKUM.del(,1);
               {? ~_delr || undo() ?};
               end();
               {? _delr=1 || 0 || 1 ?}
            |? EDOKUM.DEL_PLAN<>''
            || _dob.prefix(EDOKUM.DEL_PLAN);
               EDOKUM.DEL_PLAN:={? _dob.first() || _dob.REF_NEW || '' ?};
               EDOKUM.put(); EDOKUM.next()
            || EDOKUM.next()
            ?}
         !}
      ?};
      _maski.next()
   !}
?};
EDOKUM.cntx_pop(); POZF.cntx_pop();
EDOKUMW.cntx_pop(); EVAT.cntx_pop(); EPODZ.cntx_pop(); EDOKOS.cntx_pop(); EDOKGR.cntx_pop();
EDOKLOG.cntx_pop(); EDOKUMZ.cntx_pop(); EDOKRZAP.cntx_pop(); EDOK_ATR.cntx_pop();
EDOKUMP.cntx_pop(); EDOKUMD.cntx_pop(); EDOK_ZAL.cntx_pop(); EDOKPAR.cntx_pop();
obj_del(_maski);

DOK.cntx_psh();
_maski3:=DOK.names();
{? _maski3.first()
|| {! |?
      DOK.use(_maski3.NAME); DOK.index('PR'); DOK.prefix();
      {? DOK.first()
      || {! |?
            {? DOK.EDOKUM<>''
            || _dob.prefix(DOK.EDOKUM);
               DOK.EDOKUM:={? _dob.first() || _dob.REF_NEW || '' ?};
               DOK.put()
            ?};
            DOK.next()
         !}
      ?};
      _maski3.next()
   !}
?};
obj_del(_maski3);
DOK.cntx_pop();
echo();
VAR_DEL.delete('rok_dob','firm_dob','rok_mas')


\ustal_dane_dob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Ustala rok i firmę dla dokumentu w obiegu
::----------------------------------------------------------------------------------------------------------------------
_maska:=EDOKUM.name()+2;
{? _maska<>'__'
|| ROK_F.cntx_psh(); ROK_F.index('KODG'); ROK_F.prefix(_maska);
   {? ROK_F.first()
   || rok_mas:=($(ROK_F.POCZ_ROK~1)+2);
      rok_dob:=ROK_F.ref();
      firm_dob:=ROK_F.FIRMA
   ?};
   ROK_F.cntx_pop()
?};
1


\es_zskon_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import - zestawy kont kosztowych (ZSKON)
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:=ZSKON.name()+'_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import zestawów kont kosztowych środków trwałych...'@,'Trwa import danych'@,1);

ZSKON.cntx_psh();
ZSKON.index('KOD');
ZSKON.prefix();
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         {? ~ZSKON.find_key(REF.FIRMA,_tmp[2],_tmp[1])
         || ZSKON.blank(1);
            ZSKON.FIRMA:=REF.FIRMA;
            ZSKON.KOD:=_tmp[1];
            ZSKON.KOM:=_tmp[3];
            ZSKON.RODZ:=_tmp[2];
            ZSKON.add()
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
ZSKON.cntx_pop()


\find_zskon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Wyszukiwanie zestawów kont
::   WE: _a - rodzaj, _b - kod
::   WY: ref zestawu kont
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
ZSKON.cntx_psh();
ZSKON.index('KOD');
ZSKON.prefix(REF.FIRMA,_a,_b);
{? ZSKON.first() || _ref:=ZSKON.ref() ?};
ZSKON.cntx_pop();
_ref


\find_kk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Wyszukiwanie konta (KK)
::   WE: _a - symbol
::   WY: KK.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
KK.cntx_psh();
KK.index('KONTASYS');
KK.prefix(REF.FIRMA,'FST',_a);
{? KK.first() || _ref:=KK.ref() ?};
KK.cntx_pop();
_ref


\es_kkosz_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import - konta kosztowe środków trwałych (KKOSZ)
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:=KKOSZ.name()+'_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import kont kosztowych środków...'@,'Trwa import danych'@,1);

KKOSZ.cntx_psh();
:: usuwa błędne definicje kont kosztowych
KKOSZ.index('KONTO');
KKOSZ.prefix(null);
{? KKOSZ.first()
|| {! |? KKOSZ.del() !}
?};
KKOSZ.index('KONTO');
KKOSZ.prefix();
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         _zestaw:=exec('find_zskon','transfer',_tmp[3],_tmp[2]);
         {? _zestaw<>null &  |_tmp[1]<>'' & ~KKOSZ.find_key(_zestaw,_tmp[1],)
         || KKOSZ.blank(1);
            KKOSZ.KONTO:=exec('find_kk','transfer',_tmp[1]);
            KKOSZ.PR:=#(gsub(_tmp[4],',','.'));
            KKOSZ.ZESTAW:=_zestaw;
            KKOSZ.add()
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
KKOSZ.cntx_pop()


\find_odd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Wyszukiwanie j,. ksiegowych
::   WE: _a - kod j. ksiegowej
::   WY: ref j. ksiegowej
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
ODD.cntx_psh();
ODD.index('ODDZIALY');
ODD.prefix(REF.FIRMA,_a,_a);
{? ODD.first() || _ref:=ODD.ref() ?};
ODD.cntx_pop();
_ref


\find_sie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Wyszukiwanie siedzib
::   WE: _a - ref j. ksiegowej, _b - kod siedziby
::   WY: ref siedziby
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
SIED.cntx_psh();
SIED.index('UNIK');
SIED.prefix(REF.FIRMA,_a,_b);
{? SIED.first() || _ref:=SIED.ref() ?};
SIED.cntx_pop();
_ref


\es_sied_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import - Pomieszczenia (SIED) w bieżącej firmie
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie pola firma (tabela siedziba.mdb jest przenoszona z pierwszej firmy, dla pozostałych
:: uzupełnia się na podstawie pliku tekstowego z eksportu danych)
SIED.for_each("{? SIED.FIRMA=null || SIED.FIRMA:=REF.FIRMA; SIED.put(1) ?}");

_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:=SIED.name()+'_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import siedzib...'@,'Trwa import danych'@,1);

SIED.cntx_psh();
SIED.index('UNIK');
SIED.prefix();
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         _odd:=exec('find_odd','transfer',_tmp[3]);
         {? _odd<>null & ~SIED.find_key(REF.FIRMA,_odd,_tmp[1])
         || SIED.blank(1);
            SIED.FIRMA:=REF.FIRMA;
            SIED.ODD:=_odd;
            SIED.S:=_tmp[1];
            SIED.AM:=_tmp[4];
            SIED.AU:=_tmp[5];
            SIED.KP:=_tmp[6];
            SIED.N:=_tmp[7];
            SIED.TEL:=_tmp[2];
            SIED.add()
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
SIED.cntx_pop()


\es_pomi_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import - Pomieszczenia (POMI) w bieżącej firmie
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie pola firma (tabela jest przenoszona z pierwszej firmy, dla pozostałych
:: uzupełnia się na podstawie pliku tekstowego z eksportu danych)
POMI.for_each("{? POMI.FIRMA=null || POMI.FIRMA:=REF.FIRMA; POMI.put(1) ?}");

_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:=POMI.name()+'_'+_symbol+'.tra';
{? ~fexists(_fn,1)  | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import pomieszczeń...'@,'Trwa import danych'@,1);

POMI.cntx_psh();
POMI.index('UNIK');
POMI.prefix();
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         _odd:=exec('find_odd','transfer',_tmp[2]);
         _sie:=exec('find_sie','transfer',_odd,_tmp[4]);
         {? _odd<>null & _sie<>null & ~POMI.find_key(REF.FIRMA,_odd,_sie,_tmp[3])
         || POMI.blank(1);
            POMI.FIRMA:=REF.FIRMA;
            POMI.S:=_tmp[3];
            POMI.ODD:=_odd;
            POMI.SIED:=_sie;
            POMI.O:=_tmp[1];
            POMI.add()
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
POMI.for_each("{? POMI.FIRMA=null || POMI.FIRMA:=REF.FIRMA; POMI.put() ?}");
POMI.cntx_pop()


\MA_NJP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Uzupełnienie tabeli częstotliwości rozliczania amortyzacji jednorazowej
::  OLD: \MA_NJP/upgrade_17xx.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('MAF')<=0 || return(0) ?};
MAF.index('KOD');
MAF.prefix('P');
{? ~MAF.first()
|| MAF.blank();
   MAF.KOD:='P';
   MAF.OPIS:='W miesiącu wprowadzenia';
   MAF.add()
?};
MAF.prefix('M');
{? ~MAF.first()
|| MAF.blank();
   MAF.KOD:='M';
   MAF.OPIS:='Miesięcznie';
   MAF.add()
?};
MAF.prefix('K');
{? ~MAF.first()
|| MAF.blank();
   MAF.KOD:='K';
   MAF.OPIS:='Kwartalnie';
   MAF.add()
?};
MAF.prefix('R');
{? ~MAF.first()
|| MAF.blank();
   MAF.KOD:='R';
   MAF.OPIS:='Na koniec roku';
   MAF.add()
?};
MAF.prefix();
_result:=MAF.size()=4;
_result


\es_samid_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import wskazań na środki trwałe do bazy samochodów (wykorzystywanej w delegacjach)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 || return(0) ?};

_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='samid_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Uzupełnianie bazy samochodów...'@,'Trwa import danych'@,1);

SAM.cntx_psh();
SAM.index('WLASNY');
SAM.prefix();
__SRSR.prefix();

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         _ref:=_tmp[1];
         _id:=#_tmp[2];
         {? _ref<>'' & _id<>0
         || {? SAM.seek(_tmp[1]) & SAM.WLASNY='T' & __SRSR.find_key(_id) & SRSR.seek(__SRSR.REF)
            || SAM.SRSR:=SRSR.ref();
               SAM.put()
            ?}
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
SAM.cntx_pop()


\es_klas_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import klasyfikacji dodatkowych i typów (środki trwałe)
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='rodz_typ_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import klasyfikacji dodatkowych środków...'@,'Trwa import danych'@,1);

TSK.cntx_psh();
TSK.use('typlr'+_symbol);
TSK.index('MAIN');
TSK.prefix();
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         {? ~TSK.find_key(null,_tmp[2])
         || TSK.blank(1);
            TSK.NAZ:=_tmp[2];
            TSK.OPIS:=_tmp[2];
            TSK.add()
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
&_f;

_fn:='typy_sro_'+_symbol+'.tra';
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         {? TSK.find_key(null,_tmp[1])
         || _kl:=TSK.ref();
            {? ~TSK.find_key(_kl,_tmp[3])
            || TSK.blank(1);
               TSK.TREE:=_kl;
               TSK.NAZ:=_tmp[3];
               TSK.OPIS:=_tmp[2];
               TSK.add()
            ?}
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
TSK.cntx_pop()


\es_tsr_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import przypisań środków do klasyfikacji dodatkowych (po imporcie środków i rejestru stanów)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 || return(0) ?};

_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='tsr_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import informacji o klasyfikacjach dodatkowych środków...'@,'Trwa import danych'@,1);

TSR.cntx_psh(); SRSR.cntx_psh(); TSK.cntx_psh();
TSR.use('typpr'+_symbol); SRSR.use('srsrr'+_symbol); TSK.use('typlr'+_symbol);
TST.use('typsr'+_symbol); TST.index('SRST'); TST.prefix();
TSR.index('TYPK'); TSR.prefix();
SRSR.index('KIND'); SRSR.prefix();
__SRSR.prefix();

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         TSK.index('MAIN');
         TSK.prefix();
         {? TSK.find_key(null,_tmp[2])
         || _kl:=TSK.ref();
            {? TSK.find_key(_kl,_tmp[3])
            || _ref:=null;
               {? __SRSR.find_key(#_tmp[1])
               || {? SRSR.seek(__SRSR.REF,SRSR.name())
                  || TSR.blank(1);
                     TSR.SRSR:=SRSR.ref();
                     TSR.TYP:=TSK.ref();
                     {? TSR.add()
                     || SRST.cntx_psh();
                        SRST.index('SROD');
                        SRST.prefix(SRSR.ref());
                        {? SRST.first()
                        || {! |?
                              {? ~TST.find_key(SRST.ref(),TSK.ref())
                              || TST.SRST:=SRST.ref();
                                 TST.TSK:=TSK.ref();
                                 TST.CLASS:=TST.TSK().TREE;
                                 TST.ODD:=TST.SRST().ODD;
                                 TST.JORG:=TST.SRST().JORG;
                                 TST.OSOBA:=TST.SRST().OSOBA;
                                 TST.POM:=TST.SRST().POM;
                                 TST.GR:=TST.SRST().GR;
                                 TST.add()
                              ?};
                              {? TST.SRST().OKRO_F=SSTALE.AO || _widoczny:=1 ?};
                              SRST.next()
                           !}
                        ?};
                        SRST.cntx_pop()
                     ?}
                  ?}
               ?}
            ?}
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
SRSR.cntx_pop(); TSK.cntx_pop(); TSR.cntx_pop()


\fiks_35
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1703/0031
::       błąd e-deklaracji VAT 7 w przypadku wystąpienia załącznika VAT-ZD
::  OLD: \fiks_22/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_35a','transfer',17,69)


\fiks_35a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: Formula pomocnicza do fiks_35
::  OLD: \fiks_22a/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.index('VER_NR'); VAT_VER.prefix('FKS','VAT7','VAT7',_a);
{? VAT_VER.first()
|| ISTDEF.index('DATA'); ISTDEF.prefix('FKS','D','VAT7',VAT_VER.ref());
   {? ISTDEF.first()
   || ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref());
      {? ISTDEFS.find_key('P_'+$_b,)
      || ISTDEFS.REGULY:='{? exec(\'vat_zd_size\',\'fks_ved\',\'N\') || \'1\' || 0 ?}';
         ISTDEFS.put()
      ?}
   ?}
?};
1


\es_srst_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import tabeli rejestru stanów środków do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='srst_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import pliku %1 do tabeli tymczasowej...'@[_fn],'Trwa import danych'@,1);

VAR_DEL.delete('__SRST');
__SRST:=tab_tmp(1,'ID','INTEGER','ID',
                  'ROK','INTEGER','ROK',
                  'OKRES','INTEGER','OKRES',
                  'WARP','REAL','WARP',
                  'UMOP','REAL','UMOP',
                  'AMOP','REAL','AMOP',
                  'NETP','REAL','NETP',
                  'KONPOD','STRING[35]','KONPOD',
                  'MP','STRING[3]','MP',
                  'STAP','REAL','STAP',
                  'WKP','REAL','WKP',
                  'DPLP','DATE','DPLP',
                  'WARF','REAL','WARF',
                  'UMOF','REAL','UMOF',
                  'AMOF','REAL','AMOF',
                  'NETF','REAL','NETF',
                  'KONFIN','STRING[35]','KONFIN',
                  'MF','STRING[3]','MF',
                  'STAF','REAL','STAF',
                  'WKF','REAL','WKF',
                  'DPLF','DATE','DPLF',
                  'OSTATEK','REAL','OSTATEK',
                  'MAX','REAL','MAX',
                  'JM','STRING[15]','JM',
                  'OKE','INTEGER','OKE',
                  'S','STRING[1]','S',
                  'SCH_SEZ','STRING[20]','SCH_SEZ',
                  'POM_ODD','STRING[8]','POM_ODD',
                  'POM_SIE','STRING[15]','POM_SIE',
                  'POM_S','STRING[10]','POM_S',
                  'OSOBA_N','STRING[30]','OSOBA_N',
                  'OSOBA_P','STRING[30]','OSOBA_P',
                  'JORG','STRING[16]','JORG',
                  'ODD','STRING[8]','ODD',
                  'PZUZ','REAL','PZUZ',
                  'RZUZ','REAL','RZUZ',
                  'SZUZ','STRING[1]','SZUZ',
                  'DEKRET','STRING[1]','DEKRET',
                  'NF','STRING[50]','NF',
                  'GR','STRING[15]','GR',
                  'TAB_KRST','STRING[1]','TAB_KRST',
                  'R', 'STRING[1]','R');

__SRSR.prefix();

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         __SRST.ID:=#_tmp[1];
         {? __SRSR.find_key(__SRST.ID)
         || _nri:=__SRSR.NRI
         || _nri:=''
         ?};
         __SRST.ROK:=#_tmp[2];
         __SRST.OKRES:=#_tmp[3];
         progress(,'Import rejestru stanów do tabeli tymczasowej, środek: %1.'@[_nri],'Trwa import danych'@,1);
         __SRST.WARP:=#(gsub(_tmp[4],',','.'));
         __SRST.UMOP:=#(gsub(_tmp[5],',','.'));
         __SRST.AMOP:=#(gsub(_tmp[6],',','.'));
         __SRST.NETP:=#(gsub(_tmp[7],',','.'));
         __SRST.KONPOD:=_tmp[8];
         __SRST.MP:=_tmp[9];
         __SRST.STAP:=#(gsub(_tmp[10],',','.'));
         __SRST.WKP:=#(gsub(_tmp[11],',','.'));
         __SRST.DPLP:=exec('str2date','transfer',_tmp[12]);
         __SRST.WARF:=#(gsub(_tmp[13],',','.'));
         __SRST.UMOF:=#(gsub(_tmp[14],',','.'));
         __SRST.AMOF:=#(gsub(_tmp[15],',','.'));
         __SRST.NETF:=#(gsub(_tmp[16],',','.'));
         __SRST.KONFIN:=_tmp[17];
         __SRST.MF:=_tmp[18];
         __SRST.STAF:=#(gsub(_tmp[19],',','.'));
         __SRST.WKF:=#(gsub(_tmp[20],',','.'));
         __SRST.DPLF:=exec('str2date','transfer',_tmp[21]);
         __SRST.OSTATEK:=#(gsub(_tmp[22],',','.'));
         __SRST.MAX:=#(gsub(_tmp[23],',','.'));
         __SRST.JM:=_tmp[24];
         __SRST.OKE:=#(gsub(_tmp[25],',','.'));
         __SRST.S:=_tmp[26];
         __SRST.SCH_SEZ:=_tmp[27];
         __SRST.POM_ODD:=_tmp[28];
         __SRST.POM_SIE:=_tmp[29];
         __SRST.POM_S:=_tmp[30];
         __SRST.OSOBA_N:=_tmp[31];
         __SRST.OSOBA_P:=_tmp[32];
         __SRST.JORG:=_tmp[33];
         __SRST.ODD:=_tmp[34];
         __SRST.PZUZ:=#(gsub(_tmp[35],',','.'));
         __SRST.RZUZ:=#(gsub(_tmp[36],',','.'));
         __SRST.SZUZ:=_tmp[37];
         __SRST.DEKRET:=_tmp[38];
         __SRST.NF:=_tmp[39];
         __SRST.GR:=_tmp[40];
         __SRST.TAB_KRST:=_tmp[41];
         __SRST.R:=_tmp[42];
         __SRST.add()
      ?};
      obj_del(_tmp)
   !};
   fclose(_f)
?}


\es_srst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Utworzenie tabeli SRST na podstawie wcześniej wczytanych danych
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 | var_pres('__SRST')<=0 || return (0) ?};

SRST.cntx_psh(); SRSR.cntx_psh();
SRST.prefix(); SRSR.prefix();
{? __SRST.first()
|| {! |?
         _id:=__SRST.ID;
         _ref:=null;
         {? __SRSR.find_key(_id)
         || {? SRSR.seek(__SRSR.REF)
            || _ref:=SRSR.ref()
            ?}
         ?};
         {? _ref
         || progress(,'Import rejestru stanów środka: %1'@[SRSR.NRI],'Trwa import danych'@,1);
            SRST.blank(1);
            SRST.KIND:=SRSR.KIND;
            SRST.GRP:=SRSR.GRP;
            SRST.SRSR:=_ref;
            SRST.R:=__SRST.R;
            SRST.ROK:=__SRST.ROK;
            SRST.OKRES:=__SRST.OKRES;
            SRST.ROK_F:=null;
            SRST.OKRO_F:=null;
            SRST.NRI:=SRST.SRSR().NRI;
            SRST.NST:=SRST.SRSR().NST;
            SRST.ODD:=SRST.SRSR().ODD;
            SRST.DZ:=SRST.SRSR().DZ;
            SRST.DE:=SRST.SRSR().DE;
            TAM.cntx_psh(); TAB_KRST.cntx_psh();
            TAB_KRST.index('TAB_KRST');
            TAB_KRST.prefix(__SRST.TAB_KRST);
            {? TAB_KRST.first()
            || TAM.index('KST');
               TAM.prefix(TAB_KRST.ref(),__SRST.GR,);
               SRST.GR:={? TAM.first() || TAM.ref() || null ?}
            ?};
            TAM.cntx_pop(); TAB_KRST.cntx_pop();
            SRST.WARP:=__SRST.WARP;
            SRST.UMOP:=__SRST.UMOP;
            SRST.AMOP:=__SRST.AMOP;
            SRST.NETP:=__SRST.NETP;
            {? __SRST.KONPOD<>''
            || ZSKON.index('KOD');
               ZSKON.prefix(REF.FIRMA,'P',__SRST.KONPOD);
               SRST.KONPOD:={? ZSKON.first() || ZSKON.ref() || null ?}
            || SRST.KONPOD:=null
            ?};
            MA.index('MA');
            MA.prefix(__SRST.MP,);
            SRST.MP:={? MA.first() || MA.ref() || null ?};
            SRST.STAP:=__SRST.STAP;
            SRST.WKP:=__SRST.WKP;
            SRST.DPLP:=__SRST.DPLP;
            SRST.WARF:=__SRST.WARF;
            SRST.UMOF:=__SRST.UMOF;
            SRST.AMOF:=__SRST.AMOF;
            SRST.NETF:=__SRST.NETF;
            {? __SRST.KONFIN<>''
            || ZSKON.index('KOD');
               ZSKON.prefix(REF.FIRMA,'F',__SRST.KONFIN);
               SRST.KONFIN:={? ZSKON.first() || ZSKON.ref() || null ?}
            || SRST.KONFIN:=null
            ?};
            MA.index('MA');
            MA.prefix(__SRST.MF,);
            SRST.MF:={? MA.first() || MA.ref() || null ?};
            {? SRST.MF=null & (__SRST.MF='LIF' | __SRST.MF='UJF' | __SRST.MF='LDF' | __SRST.MF='BNF' | __SRST.MF='DFR')
            || {? __SRST.MF='LIF'
               || MA.prefix('LIB',)
               |? __SRST.MF='UJF'
               || MA.prefix('UJB',)
               |? __SRST.MF='LDF'
               || MA.prefix('LDB',)
               |? __SRST.MF='BNF'
               || MA.prefix('BNB',)
               |? __SRST.MF='DFR'
               || MA.prefix('DFB',)
               ?};
               SRST.MF:={? MA.first() || MA.ref() || null ?}
            ?};
            SRST.STAF:=__SRST.STAF;
            SRST.WKF:=__SRST.WKF;
            SRST.DPLF:=__SRST.DPLF;
            SRST.OSTATEK:=__SRST.OSTATEK;
            SRST.MAX:=__SRST.MAX;
            {? __SRST.JM<>''
            || JM.index('KOD');
               JM.prefix(__SRST.JM,__SRST.JM);
               SRST.JM:={? JM.first() || JM.ref() || null ?}
            || SRST.JM:=null
            ?};
            SRST.OKE:=__SRST.OKE;
            SRST.S:=__SRST.S;
            {? form(__SRST.SCH_SEZ)<>''
            || SEZ.index('KOD');
               SEZ.prefix(REF.FIRMA,__SRST.SCH_SEZ,);
               SRST.SCH_SEZ:={? SEZ.first() || SEZ.ref() || null ?}
            || SRST.SCH_SEZ:=null
            ?};
            SRST.POM:=null;
            {? __SRST.POM_ODD<>'' & __SRST.POM_SIE<>'' & __SRST.POM_S<>''
            || _oddp:=exec('find_odd','transfer',__SRST.POM_ODD);
               SIED.index('UNIK');
               SIED.prefix(REF.FIRMA,_oddp,__SRST.POM_SIE);
               {? SIED.first()
               || POMI.index('UNIK');
                  POMI.prefix(REF.FIRMA,_oddp,SIED.ref(),__SRST.POM_S);
                  SRST.POM:={? POMI.first() || POMI.ref() || null ?}
               ?}
            ?};
            {? __SRST.OSOBA_N<>'' & __SRST.OSOBA_P<>''
            || OSOBA.index('OSOBA');
               OSOBA.prefix(__SRST.OSOBA_N,__SRST.OSOBA_P);
               SRST.OSOBA:={? OSOBA.first() || OSOBA.ref() || null ?}
            || SRST.OSOBA:=null
            ?};
            UD_TYP.index('SYMBOL');
            UD_TYP.prefix('PODZORG','PODZORG');
            {? UD_TYP.first()
            || UD_SKL.index('SYMBOL');
               UD_SKL.prefix(UD_TYP.ref(),__SRST.JORG,__SRST.JORG);
               {? UD_SKL.first() || SRST.JORG:=UD_SKL.ref() ?}
            || SRST.JORG:=null
            ?};
            SRST.ODD:=exec('find_odd','transfer',__SRST.ODD);
            SRST.PZUZ:=__SRST.PZUZ;
            SRST.RZUZ:=__SRST.RZUZ;
            SRST.SZUZ:=__SRST.SZUZ;
            SRST.DEKRET:=__SRST.DEKRET;
            SRST.NF:=__SRST.NF;
            SRST.NAL:='T';

            {? SRST.add()
            ||
:: jeżeli zestaw to dodanie rekordu z głównym elementem składowym
               {? SRST.GRP='T'
               || _srsr:=SRST.SRSR;
                  _tree_rf:=null;
                  SRSR.cntx_psh();
                  SRSR.index('TREE');
                  SRSR.prefix(_srsr);
                  {? SRSR.first() || _tree_rf:=SRSR.ref(); _nri:=SRSR.NRI ?};
                  SRSR.cntx_pop();
                  {? _tree_rf
                  || SRST.GRP:='E';
                     SRST.KIND:='N';
                     SRST.TREE:=SRST.ref();
                     SRST.SRSR:=_tree_rf;
                     SRST.NRI:=_nri;
                     SRST.add()
                  ?}
               ?}
            ?}
         ?};
         __SRST.next()
   !}
?};
SRST.cntx_pop(); SRSR.cntx_pop()


\es_pre_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Testy poprawności plików z kluczowymi danymi środków trwałych (środki, elementy, dokumenty)
::   WY: 1/0 - pliki poprawne/niepoprawne
::----------------------------------------------------------------------------------------------------------------------
_plik:=_msg:='';
_return:=1;
_symbol:=REF.FIRMA().SYMBOL;
_fn:='srsr_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,65) || _msg+=_fn+', ' ?};
_fn:='srst_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,42) || _msg+=_fn+', ' ?};
_fn:='skld_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,15) || _msg+=_fn+', ' ?};
_fn:='samid_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,2) || _msg+=_fn+', ' ?};
_fn:='okresy_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,5) || _msg+=_fn+', ' ?};
_fn:='doku_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,30) || _msg+=_fn+', ' ?};
_fn:='dokp_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,15) || _msg+=_fn+', ' ?};
_fn:='dok_ewid_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,23) || _msg+=_fn+', ' ?};
_fn:='adok_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,19) || _msg+=_fn+', ' ?};
_fn:='zfsr_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,18) || _msg+=_fn+', ' ?};
_fn:='zmia_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,19) || _msg+=_fn+', ' ?};
_fn:=ZSKON.name()+'_'+_symbol+'.tra';
{? ~exec('es_test_file','transfer',_fn,3) || _msg+=_fn+', ' ?};

{? +_msg
|| FUN.emsg('Znaleziono pliki z danymi środków trwałych o niepoprawnej strukturze:\n\n %1'
            '\n\nImport środków nie będzie mógł być przeprowadzony poprawnie, procedurę należy powtórzyć.'@[_msg]);
   _return:=0
?};
_return


\es_size_file
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Formuła zwraca wielkość pliku
::   WE: _a - nazwa pliku
::   WY: wielkość pliku
::----------------------------------------------------------------------------------------------------------------------
{? _=0 | type_of(_a)<>type_of('') | _a='' || return(0) ?};
_return:=0;
_f:=fopen(_a,'br',1);
{? _f
|| _return:=fgetsize(_f);
   fclose(_f)
?};
_return


\es_test_file
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Test zgodności pliku, tylko jeżeli plik istnieje
::   WE: _a - nazwa pliku, _b- oczekiwana liczba pól, _c - separator pól
::   WY: 1/0 - plik zgodny lub niezgodny z oczekiwaniem
::----------------------------------------------------------------------------------------------------------------------
{? _<2 || return(0) ?};
{? _<3 || _c:='@' ?};
_return:=0;
{? exec('es_size_file','transfer',_a)>0
|| _f:=fopen(_a,'Ur',1);
   {? _f
   || _wiersz:=fread(_f);
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_c);
         {? obj_len(_tmp)=_b || _return:=1 ?};
         obj_del(_tmp)
      ?};
      fclose(_f)
   || _return:=1
   ?}
|| _return:=1
?};
_return


\es_srsr_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import tabeli wartości pierwotnych środków do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='srsr_'+_symbol+'.tra';

:: jeżeli brak pliku lub plik pusty formuła zwraca 0
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import pliku %1 do tabeli tymczasowej...'@[_fn],'Trwa import danych'@,1);

VAR_DEL.delete('__SRSR');
:: tabela tymczasowa na wartości pierwotne:
__SRSR:=tab_tmp(1,'ID','INTEGER','ID',
                  'NRI','STRING[20]','NRI',
                  'O_NRI','STRING[20]','O_NRI',
                  'NST','STRING[100]','NST',
                  'GRP','STRING[1]','GRP',
                  'R', 'STRING[1]','R',
                  'ROK','INTEGER','ROK',
                  'OKRES','INTEGER','OKRES',
                  'DZ','DATE','DZ',
                  'DE','DATE','DE',
                  'GR','STRING[15]','GR',
                  'PRZYCHOD','STRING[15]','PRZYCHOD',
                  'JORG','STRING[16]','JORG',
                  'ODD','STRING[8]','ODD',
                  'NF','STRING[50]','NF',
                  'ROZ','STRING[15]','ROZCHOD',
                  'DES','DATE','DES',
                  'U','STRING[100]','U',
                  'S','STRING[1]','S',
                  'SCH_SEZ','STRING[35]','SCH_SEZ',
                  'EURO','REAL','EURO',
                  'KURS_EUR','REAL','KURS_EUR',
                  'POJAZD','STRING[1]','POJAZD',
                  'SAMOCHOD','STRING[1]','SAMOCHOD',
                  'WARPELNA','REAL','WARPELNA',
                  'WP','REAL','WP',
                  'POM_ODD','STRING[8]','POM_ODD',
                  'POM_SIE','STRING[15]','POM_SIE',
                  'POM_S','STRING[10]','POM_S',
                  'OSOBA_N','STRING[30]','OSOBA_N',
                  'OSOBA_P','STRING[30]','OSOBA_P',
                  'DOKPRZ','STRING[30]','DOKPRZ',
                  'DOKSKR','STRING[30]','DOKSKR',
                  'FKS','STRING[1]','FKS',
                  'DOKKSIEG','STRING[48]','DOKKSIEG',
                  'MP','STRING[3]','MP',
                  'WKP','REAL','WKP',
                  'WARP','REAL','WARP',
                  'UMOP','REAL','UMOP',
                  'NETP','REAL','NETP',
                  'STAP','REAL','STAP',
                  'DPLP','DATE','DPLP',
                  'KONPOD','STRING[35]','KONPOD',
                  'MF','STRING[3]','MF',
                  'WKF','REAL','WKF',
                  'WARF','REAL','WARF',
                  'UMOF','REAL','UMOF',
                  'NETF','REAL','NETF',
                  'STAF','REAL','STAF',
                  'DPLF','DATE','DPLF',
                  'KONFIN','STRING[35]','KONFIN',
                  'JM','STRING[20]','JM',
                  'MAX','REAL','MAX',
                  'OKE','INTEGER','OKE',
                  'OSTATEK','REAL','OSTATEK',
                  'Z','STRING[1]','Z',
                  'REF','STRING[16]','REFSQL',
                  'AMOR100','STRING[1]','AMOR100',
                  'WARP100','REAL','WARP100',
                  'ZALP100','REAL','ZALP100',
                  'FREQ100','STRING[1]','FREQ100',
                  'MOD_DATA','DATE','MOD_DATA',
                  'MOD_CZAS','TIME','MOD_CZAS',
                  'MOD_KTO','STRING[20]','MOD_KTO',
                  'ULGA','REAL','ULGA',
                  'SAM_EL','STRING[1]','SAM_EL',
                  'TAB_KRST','STRING[1]','TAB_KRST'
               );

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         __SRSR.blank(1);
         __SRSR.ID:=#_tmp[1];
         __SRSR.NRI:=_tmp[2];
         __SRSR.NST:=exec('at','transfer',_tmp[3]);
         __SRSR.GRP:=_tmp[4];
         __SRSR.R:=_tmp[5];
         __SRSR.ROK:=#_tmp[6];
         __SRSR.OKRES:=#_tmp[7];
         __SRSR.DZ:=exec('str2date','transfer',_tmp[8]);
         __SRSR.DE:=exec('str2date','transfer',_tmp[9]);
         __SRSR.GR:=_tmp[10];
         __SRSR.PRZYCHOD:=_tmp[11];
         __SRSR.JORG:=_tmp[12];
         __SRSR.ODD:=_tmp[13];
         __SRSR.NF:=_tmp[14];
         __SRSR.ROZ:=_tmp[15];
         __SRSR.DES:=exec('str2date','transfer',_tmp[16]);
         __SRSR.U:=_tmp[17];
         __SRSR.S:=_tmp[18];
         __SRSR.SCH_SEZ:=_tmp[19];
         __SRSR.EURO:=#(gsub(_tmp[20],',','.'));
         __SRSR.KURS_EUR:=#(gsub(_tmp[21],',','.'));
         __SRSR.POJAZD:=_tmp[22];
         __SRSR.SAMOCHOD:=_tmp[23];
         __SRSR.WARPELNA:=#(gsub(_tmp[24],',','.'));
         __SRSR.WP:=#(gsub(_tmp[25],',','.'));
         __SRSR.POM_ODD:=_tmp[26];
         __SRSR.POM_SIE:=_tmp[27];
         __SRSR.POM_S:=_tmp[28];
         __SRSR.OSOBA_N:=_tmp[29];
         __SRSR.OSOBA_P:=_tmp[30];
         __SRSR.DOKPRZ:=_tmp[31];
         __SRSR.DOKSKR:=_tmp[32];
         __SRSR.FKS:=_tmp[33];
         __SRSR.DOKKSIEG:=_tmp[34];
         __SRSR.MP:=_tmp[35];
         __SRSR.WKP:=#(gsub(_tmp[36],',','.'));
         __SRSR.WARP:=#(gsub(_tmp[37],',','.'));
         __SRSR.UMOP:=#(gsub(_tmp[38],',','.'));
         __SRSR.NETP:=#(gsub(_tmp[39],',','.'));
         __SRSR.STAP:=#(gsub(_tmp[40],',','.'));
         __SRSR.DPLP:=exec('str2date','transfer',_tmp[41]);
         __SRSR.KONPOD:=_tmp[42];
         __SRSR.MF:=_tmp[43];
         __SRSR.WKF:=#(gsub(_tmp[44],',','.'));
         __SRSR.WARF:=#(gsub(_tmp[45],',','.'));
         __SRSR.UMOF:=#(gsub(_tmp[46],',','.'));
         __SRSR.NETF:=#(gsub(_tmp[47],',','.'));
         __SRSR.STAF:=#(gsub(_tmp[48],',','.'));
         __SRSR.DPLF:=exec('str2date','transfer',_tmp[49]);
         __SRSR.KONFIN:=_tmp[50];
         __SRSR.JM:=_tmp[51];
         __SRSR.MAX:=#(gsub(_tmp[52],',','.'));
         __SRSR.OKE:=#(gsub(_tmp[53],',','.'));
         __SRSR.OSTATEK:=#(gsub(_tmp[54],',','.'));
         __SRSR.Z:=_tmp[55];
         __SRSR.AMOR100:=_tmp[56];
         __SRSR.WARP100:=#(gsub(_tmp[57],',','.'));
         __SRSR.ZALP100:=#(gsub(_tmp[58],',','.'));
         __SRSR.FREQ100:=_tmp[59];
         __SRSR.MOD_DATA:=exec('str2date','transfer',_tmp[61]);
         __SRSR.MOD_CZAS:=exec('str2time','#convert',_tmp[62]);
         __SRSR.MOD_KTO:=_tmp[60];
         __SRSR.ULGA:=#(gsub(_tmp[63],',','.'));
         __SRSR.SAM_EL:=_tmp[64];
         __SRSR.REF:='';
         __SRSR.TAB_KRST:=_tmp[65];
         __SRSR.add();
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
:: przenumerowanie powielonych NRI
_tab1:=sql('select ODD, NRI, count(*) ILE from :_a group by ODD, NRI having count(*)>1', __SRSR);
{? _tab1.first()
||
   __SRSR.cntx_psh();
:: środek który ma najświeższą datę zakupu zostaje z oryginalnym numerem, starsze zostają przenumerowane
   __SRSR.index(__SRSR.ndx_tmp(,, 'ODD',,, 'NRI',,, 'DZ',,));
   {!|? __SRSR.prefix(_tab1.ODD, _tab1.NRI);
        {? __SRSR.last()
        || {? __SRSR.prev()
           || _ii:=1;
              {!|? __SRSR.cntx_psh();
                   {? __SRSR.prev()
                   || _nast:=__SRSR.ref
                   || _nast:=null
                   ?};
                   __SRSR.cntx_pop();
                   _nnri:={? __SRSR.NRI+1='.' || (__SRSR.NRI-1)+'/'+$_ii+'.' || __SRSR.NRI+'/'+$_ii ?};
                   __SRSR.O_NRI:=__SRSR.NRI;
                   __SRSR.NRI:=_nnri;
                   __SRSR.cntx_psh();
                   __SRSR.prefix();
                   __SRSR.put();
                   _ii+=1;
                   __SRSR.cntx_pop();
                   {? _nast<>null
                   || __SRSR.seek(_nast)
                   || 0
                   ?}
              !}
           ?}
        ?};
        _tab1.next()
   !};
   __SRSR.cntx_pop()
?};
obj_del(_tab1);
1


\es_srsr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Utworzenie tabeli SRSR na podstawie wcześniej wczytanych danych
::  ORG: \srsr_zb/upgrade_1742.fml
::       \SRSR_AMOR100/upgrade_1742.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 || return (0) ?};

{? var_pres('MAF')>0
|| MAF.cntx_psh();
   MAF.index('KOD');
   MAF.prefix()
?};
SRSR.cntx_psh();
SRSR.index('NRI_O');
SRSR.prefix();
SRSR.trig_b('add',"");

{? __SRSR.first()
|| {! |?
         _odd:=exec('find_odd','transfer',__SRSR.ODD);
         {? ~SRSR.find_key(_odd,'T',__SRSR.NRI,)
         || progress(,'Import środka: %1'@[__SRSR.NRI],'Trwa import danych'@,1);
            SRSR.blank(1);
            SRSR.NRI:=__SRSR.NRI;
            SRSR.NST:=__SRSR.NST;
            SRSR.GRP:=__SRSR.GRP;
            SRSR.R:=__SRSR.R;
            SRSR.KIND:='T';
            SRSR.ROK:=__SRSR.ROK;
            SRSR.OKRES:=__SRSR.OKRES;
            SRSR.ROK_F:=null;
            SRSR.OKRO_F:=null;
            SRSR.DZ:=__SRSR.DZ;
            SRSR.DE:=__SRSR.DE;
            TAM.cntx_psh(); TAB_KRST.cntx_psh();
            TAB_KRST.index('TAB_KRST');
            TAB_KRST.prefix(__SRSR.TAB_KRST);
            {? TAB_KRST.first()
            || TAM.index('KST');
               TAM.prefix(TAB_KRST.ref(),__SRSR.GR,);
               SRSR.GR:={? TAM.first() || TAM.ref() || null ?}
            ?};
            TAM.cntx_pop(); TAB_KRST.cntx_pop();
            PRZYCHOD.index('PRZYCHOR');
            PRZYCHOD.prefix(__SRSR.PRZYCHOD,__SRSR.PRZYCHOD);
            SRSR.PRZYCHOD:={? PRZYCHOD.first() || PRZYCHOD.ref() || null ?};
            UD_TYP.index('SYMBOL');
            UD_TYP.prefix('PODZORG','PODZORG');
            {? UD_TYP.first()
            || UD_SKL.index('SYMBOL');
               UD_SKL.prefix(UD_TYP.ref(),__SRSR.JORG,__SRSR.JORG);
               {? UD_SKL.first() || SRSR.JORG:=UD_SKL.ref() ?}
            ?};
            SRSR.ODD:=_odd;
            SRSR.NF:=__SRSR.NF;
            ROZ.index('ROZCHODR');
            ROZ.prefix(__SRSR.ROZ,__SRSR.ROZ);
            SRSR.ROZ:={? ROZ.first() || ROZ.ref() || null ?};
            SRSR.DES:=__SRSR.DES;
            SRSR.U:=__SRSR.U;
            {? __SRSR.O_NRI<>''
            || SRSR.U:='Oryginalny nri: '+__SRSR.O_NRI+'. '+SRSR.U
            ?};
            SRSR.S:=__SRSR.S;
            {? form(__SRSR.SCH_SEZ)<>''
            || SEZ.index('KOD');
               SEZ.prefix(REF.FIRMA,__SRSR.SCH_SEZ,);
               SRSR.SCH_SEZ:={? SEZ.first() || SEZ.ref() || null ?}
            || SRSR.SCH_SEZ:=null
            ?};
            SRSR.EURO:=__SRSR.EURO;
            SRSR.KURS_EUR:=__SRSR.KURS_EUR;
            SRSR.POJAZD:=__SRSR.POJAZD;
            SRSR.SAMOCHOD:=__SRSR.SAMOCHOD;
            SRSR.WARPELNA:=__SRSR.WARPELNA;
            SRSR.WP:=__SRSR.WP;
            SRSR.POM:=null();
            {? __SRSR.POM_ODD<>'' & __SRSR.POM_SIE<>'' & __SRSR.POM_S<>''
            || _oddp:=exec('find_odd','transfer',__SRSR.POM_ODD);
               SIED.index('UNIK');
               SIED.prefix(REF.FIRMA,_oddp,__SRSR.POM_SIE);
               {? SIED.first()
               || POMI.index('UNIK');
                  POMI.prefix(REF.FIRMA,_oddp,SIED.ref(),__SRSR.POM_S);
                  SRSR.POM:={? POMI.first() || POMI.ref() || null ?}
               ?}
            ?};
            {? __SRSR.OSOBA_N<>'' & __SRSR.OSOBA_P<>''
            || OSOBA.index('OSOBA');
               OSOBA.prefix(__SRSR.OSOBA_N,__SRSR.OSOBA_P);
               SRSR.OSOBA:={? OSOBA.first() || OSOBA.ref() || null ?}
            || SRSR.OSOBA:=null
            ?};
            {? __SRSR.DOKPRZ<>''
            || SRDO.index('RODZAJ');
               SRDO.prefix('P',__SRSR.DOKPRZ);
               SRSR.DOKPRZ:={? SRDO.first() || SRDO.ref() || null ?}
            || SRSR.DOKPRZ:=null
            ?};
            {? __SRSR.DOKSKR<>''
            || SRDO.cntx_psh();
               SRDO.blank(1);
               SRDO.RODZ:='W';
               SRDO.SYMBOL:=__SRSR.DOKSKR;
               {? SRDO.find_rec() & SRDO.SYMBOL=__SRSR.DOKSKR || _srdoref:=SRDO.ref() || _srdoref:=null ?};
               SRDO.cntx_pop();
               SRSR.DOKSKR:=_srdoref
            || SRSR.DOKSKR:=null
            ?};
            SRSR.FKS:=__SRSR.FKS;
            SRSR.DOKKSIEG:=__SRSR.DOKKSIEG;
            MA.index('MA');
            MA.prefix(__SRSR.MP,);
            SRSR.MP:={? MA.first() || MA.ref() || null ?};
            SRSR.WKP:=__SRSR.WKP;
            SRSR.WARP:=__SRSR.WARP;
            SRSR.UMOP:=__SRSR.UMOP+__SRSR.ULGA;
            SRSR.NETP:=__SRSR.NETP;
            SRSR.STAP:=__SRSR.STAP;
            SRSR.DPLP:=__SRSR.DPLP;
            {? __SRSR.KONPOD<>''
            || ZSKON.index('KOD');
               ZSKON.prefix(REF.FIRMA,'P',__SRSR.KONPOD);
               SRSR.KONPOD:={? ZSKON.first() || ZSKON.ref() || null ?}
            || SRSR.KONPOD:=null
            ?};
            MA.index('MA');
            MA.prefix(__SRSR.MF,);
            SRSR.MF:={? MA.first() || MA.ref() || null ?};
            {? SRSR.MF=null & (__SRSR.MF='LIF' | __SRSR.MF='UJF' | __SRSR.MF='LDF' | __SRSR.MF='BNF' | __SRSR.MF='DFR')
            || {? __SRSR.MF='LIF'
               || MA.prefix('LIB',)
               |? __SRSR.MF='UJF'
               || MA.prefix('UJB',)
               |? __SRSR.MF='LDF'
               || MA.prefix('LDB',)
               |? __SRSR.MF='BNF'
               || MA.prefix('BNB',)
               |? __SRSR.MF='DFR'
               || MA.prefix('DFB',)
               ?};
               SRSR.MF:={? MA.first() || MA.ref() || null ?}
            ?};
            SRSR.WKF:=__SRSR.WKF;
            SRSR.WARF:=__SRSR.WARF;
            SRSR.UMOF:=__SRSR.UMOF;
            SRSR.NETF:=__SRSR.NETF;
            SRSR.STAF:=__SRSR.STAF;
            SRSR.DPLF:=__SRSR.DPLF;
            {? __SRSR.KONFIN<>''
            || ZSKON.index('KOD');
               ZSKON.prefix(REF.FIRMA,'F',__SRSR.KONFIN);
               SRSR.KONFIN:={? ZSKON.first() || ZSKON.ref() || null ?}
            || SRSR.KONFIN:=null
            ?};
            JM.index('KOD');
            JM.prefix(__SRSR.JM,__SRSR.JM);
            SRSR.JM:={? JM.first() || JM.ref() || null ?};
            SRSR.MAX:=__SRSR.MAX;
            SRSR.OKE:=__SRSR.OKE;
            SRSR.OSTATEK:=__SRSR.OSTATEK;
            SRSR.Z:=__SRSR.Z;
            {? var_pres('AMOR100',SRSR)>0 & var_pres('WARP100',SRSR)>0 & var_pres('ZALP100',SRSR)>0
               & var_pres('FREQ100',SRSR)>0 & var_pres('MAF')>0
            || SRSR.AMOR100:=__SRSR.AMOR100;
               {? SRSR.AMOR100='T'
               || SRSR.WARP100:=__SRSR.WARP100;
                  SRSR.ZALP100:=__SRSR.ZALP100;
                  SRSR.FREQ100:={? MAF.find_key(__SRSR.FREQ100) || MAF.ref || null() ?}
               ?}
            ?};
            SRSR.MOD_KTO:=__SRSR.MOD_KTO;
            SRSR.MOD_DATA:=__SRSR.MOD_DATA;
            SRSR.MOD_CZAS:=__SRSR.MOD_CZAS;
            SRSR.ZB:='N';
            {? SRSR.AMOR100='' || SRSR.AMOR100:='N' ?};
            SRSR.SAM_EL:=__SRSR.SAM_EL;
            {? SRSR.add()
            || __SRSR.REF:=$SRSR.ref();
               __SRSR.put();
:: jeżeli zestaw to dodawany jest główny element składowy
               {? SRSR.GRP='T'
               || SRSR.TREE:=SRSR.ref();
                  SRSR.GRP:='E';
                  SRSR.KIND:='N';
                  SRSR.NRI:={? SRSR.NRI+1='.' || (SRSR.NRI-1)+'/Z' || SRSR.NRI+'/Z' ?};
                  SRSR.ZB:='N';
                  SRSR.AMOR100:='N';
                  SRSR.add()
               ?}
            ?}
         ?};
         __SRSR.next()
   !}
?};
SRSR.trig_b('add',"exec('trig_b_srsr_add','fst_ext')");
{? var_pres('MAF')>0 || MAF.cntx_pop() ?};
SRSR.cntx_pop()


\es_dew_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dokumentów przyjęcia z danej tabeli DEW do tabeli SRDO
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='dok_ewid_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

{? var_pres('__SRSR')<=0 || return(0) ?};
__SRSR.prefix();

progress(,'Import dokumentów OT...'@,'Trwa import danych'@,1);
SRDO.cntx_psh();
SRDO.index('RODZAJ');
SRDO.prefix();
_f:=fopen(_fn,'Ur',1);
_sr_okro:=_sr_rok:=null;
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         _id:=#_tmp[23];
         _ref:=null;
         {? __SRSR.find_key(_id)
         || {? SRSR.seek(__SRSR.REF)
            || _ref:=SRSR.ref();
               _sr_okro:=SRSR.OKRO_F;
               _sr_rok:=SRSR.ROK_F
            ?}
         ?};

         {? _ref & _tmp[22]='OT'
         || {? _tmp[18]<>''
            ||
:: jeżeli symbol dla rodzaju zmiany się powtarza to modyfikacja symbolu
               SRDO.cntx_psh();
               SRDO.index('RODZAJ');
               SRDO.prefix('P',_tmp[18],);
               _s_tmp:='';
               {? SRDO.first()
               || _loop:=1;
                  {! |?
                     _s_tmp:=_tmp[18]+' ('+$_loop+')';
                     SRDO.prefix('P',_s_tmp,);
                     {? ~SRDO.first() || _loop:=0 || _loop+=1 ?};
                     _loop
                  !}
               ?};
               SRDO.cntx_pop();
               SRDO.blank(1);
               SRDO.SRSR:=_ref;
:: jeżeli zestaw środków to przypisanie dokumentu OT do elementu utworzonego automatycznie z numerem inwentarzowym
:: zakońcoznym na '/Z' - ten element jest odpowiednikiem środka z Xpertis
               _ref_ez:=null;
               {? SRDO.SRSR().GRP='T'
               || SRSR.cntx_psh();
                  SRSR.index('TREE');
                  SRSR.prefix(_ref);
                  {? SRSR.first()
                  || _loop:=1;
                     {! |?
                        {? SRSR.GRP='E' & SRSR.NRI+2='/Z'
                        || SRDO.SRSR_E:=SRSR.ref();
                           _ref_ez:=SRSR.ref();
                           _loop:=0
                        ?};
                        _loop & SRSR.next()
                     !}
                  ?};
                  SRSR.cntx_pop()
               ?};
               {? _s_tmp='' || SRDO.SYMBOL:=_tmp[18] || SRDO.SYMBOL:=_s_tmp ?};
               SRDO.ROK:=#_tmp[1];
               SRDO.TYP:=exec('find_srdt','transfer',_tmp[22]);
               SRDO.RODZ:='P';
               SRDO.NR:=exec('bl_srdo_nr','fst');
               SRDO.DO:=exec('str2date','transfer',_tmp[2]);
               SRDO.DW:=exec('str2date','transfer',_tmp[3]);
               SRDO.KOMISJA:=_tmp[6];
               SRDO.MOD_KTO:=_tmp[10];
               SRDO.ORZ_KOM:=_tmp[14];
               SRDO.PODSTAWA:=_tmp[15];
               SRDO.PRZ_KOM:=_tmp[16];
               {? SRDO.DO<>date(0,0,0)
               || SRDO.OKRO_F:=exec('find_okro_f','fst',SRDO.DO);
                  {? SRDO.OKRO_F<>null
                  || SRDO.ROK_F:=SRDO.OKRO_F().ROK
                  || SRDO.OKRO_F:=_sr_okro;
                     SRDO.ROK_F:=_sr_rok
                  ?};
                  {? SRDO.OKRO_F<>null
                  || SRDO.MOD_CZAS:=exec('str2time','#convert',_tmp[8]);
                     SRDO.MOD_DATA:=exec('str2date','transfer',_tmp[9]);
                     {? SRDO.add()
                     || {? SRSR.GRP<>'T'
                        || SRSR.DOKPRZ:=SRDO.ref();
                           SRSR.put()
                        || SRSR.cntx_psh();
                           SRSR.prefix();
                           {? SRSR.seek(_ref_ez,SRSR.name())
                           || SRSR.DOKPRZ:=SRDO.ref();
                              SRSR.put()
                           ?};
                           SRSR.cntx_pop()
                        ?}
                     ?}
                  ?}
               ?}
            ?}
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
SRDO.cntx_pop()


\find_okro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Wyszukuje rok obrachunkowy na podstawie numeru roku i okresu
::   WE: _a - rok (INT), _b - okres [INT]
::   WY: OKRO_F
::----------------------------------------------------------------------------------------------------------------------
_okro_f:=null;
OKRO_F.cntx_psh();
OKRO_F.index('SRODKI');
OKRO_F.prefix(REF.FIRMA,_a,_b);
{? OKRO_F.first() || _okro_f:=OKRO_F.ref() ?};
OKRO_F.cntx_pop();
_okro_f


\es_okresy_read
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Wczytanie okresów FST
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='okresy_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};
VAR_DEL.delete('__OKRE_ES');
__OKRE_ES:=tab_tmp(2,'ROK','INTEGER','ROK',
                     'OKRES','INTEGER','OKRES',
                     'KRST','STRING[1]','KRST',
                     'AMOR','STRING[1]','AMOR'
               );
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         __OKRE_ES.blank();
         __OKRE_ES.ROK:=#_tmp[1];
         __OKRE_ES.OKRES:=#_tmp[2];
         __OKRE_ES.AMOR:=_tmp[3];
         TAB_KRST.index('TAB_KRST');
         TAB_KRST.prefix(_tmp[4]);
         {? TAB_KRST.first() || __OKRE_ES.KRST:=TAB_KRST.KST || __OKRE_ES.KRST:='' ?};
         __OKRE_ES.add();
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?}


\es_okresy_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Utworzenie okresów FST
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
progress(,'Tworzenie okresów obszaru FST...'@,'Trwa import danych'@,1);

OKRO_F.cntx_psh(); ROK_F.cntx_psh(); OKRO.cntx_psh(); OKR_OBSZ.cntx_psh();
ROK_F.index('ROKPOCZ');
ROK_F.prefix();

{? var_pres('__OKRE_ES')>0 & __OKRE_ES.first()
|| ROK_F.index('ROKPOCZ');
   ROK_F.prefix(REF.FIRMA);
:: jeżeli w systemie brak lat obrachunkowych
   exec('lic','zam_okr_rok');
   _obszar:=exec('szuk_b_dom','parses','FST');
   {? ~ROK_F.first()
   || _c_rok:=__OKRE_ES.ROK;
      exec('fin_rok','!zws_par_aokr','FST',__OKRE_ES.ROK,__OKRE_ES.OKRES,12);
      {! |?
         {? __OKRE_ES.ROK>_c_rok
         || exec('fin_rok','!zws_par_aokr','FST',__OKRE_ES.ROK,__OKRE_ES.OKRES,12);
            OKRO_F.cntx_psh();
            OKRO_F.index('SRODKI');
            OKRO_F.prefix(REF.FIRMA,__OKRE_ES.ROK,__OKRE_ES.OKRES);
            {? OKRO_F.first() & OKRO_F.POCZ<>date(0,0,0)
            || exec('add_okr_obsz','transfer',OKRO_F.POCZ,_obszar,OKRO_F.ref(),null)
            ?};
            OKRO_F.cntx_pop()
         ?};
         __OKRE_ES.next()
      !}
   ||
:: jeżeli są lata obrachunkowe to weryfikacja i uzupełnienie brakujących
      {! |?
         ROK_F.index('NAZWA');
         ROK_F.prefix(REF.FIRMA,$__OKRE_ES.ROK);
         {? ~ROK_F.first()
         || exec('fin_rok','!zws_par_aokr','FST',__OKRE_ES.ROK,__OKRE_ES.OKRES,12)
         ?};
         __OKRE_ES.next()
      !}
   ?};
:: uuzpelnienie lat podatkowych w OKRO_F
   exec('set_okr_srodki','!zws_par_aokr');

:: ewentualne uzupełnienie OKR_OBSZ
   {? __OKRE_ES.first()
   || {! |?
         OKRO_F.cntx_psh(); OKR_OBSZ.cntx_psh();
         OKR_OBSZ.index('OKRO_ES');
         OKRO_F.index('SRODKI');
         OKRO_F.prefix(REF.FIRMA,__OKRE_ES.ROK,__OKRE_ES.OKRES);
         OKR_OBSZ.prefix(REF.FIRMA,_obszar,__OKRE_ES.ROK,__OKRE_ES.OKRES);
         {? OKRO_F.first() & OKRO_F.POCZ<>date(0,0,0) & ~OKR_OBSZ.first()
         || exec('add_okr_obsz','transfer',OKRO_F.POCZ,_obszar,OKRO_F.ref(),null)
         ?};
         OKRO_F.cntx_pop(); OKR_OBSZ.cntx_pop();
         __OKRE_ES.next()
      !}
   ?};

:: zamykanie okresów jeżeli były zamknięte w wersji 12.41
   __OKRE_ES.first();
   {!
   |? OKRO_F.index('SRODKI');
      OKRO_F.prefix(REF.FIRMA,__OKRE_ES.ROK,__OKRE_ES.OKRES);
      {? OKRO_F.first() & (__OKRE_ES.AMOR='T' | OKRO_F.ZAM='T')
      || OKRO_F.AMOR:='T';
         OKRO_F.put()
      ?};
      __OKRE_ES.next()
   !}
?};
OKRO_F.cntx_pop(); ROK_F.cntx_pop(); OKRO.cntx_pop(); OKR_OBSZ.cntx_pop()


\es_stany_uzup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Uzupełnienie powiązań środków i rejestru stanów z okresami obrachunkowymi
::----------------------------------------------------------------------------------------------------------------------
progress(,'Uzupełnianie rejestru środków i stanów środków...'@,'Trwa import danych'@,1);

SRSR.cntx_psh(); SRST.cntx_psh();
SRSR.index('NRI');
SRSR.prefix();
{? SRSR.first()
|| {! |?
      {? SRSR.ROK_F=null
      || OKRO_F.index('SRODKI');
         OKRO_F.prefix(REF.FIRMA,SRSR.ROK,SRSR.OKRES);
         {? OKRO_F.first()
         || SRSR.OKRO_F:=OKRO_F.ref();
            SRSR.ROK_F:=OKRO_F.ROK;
            SRSR.put()
         ?}
      ?};
      SRSR.next()
   !}
?};

_tmptree:=tab_tmp(1,'REF','INTEGER','REF');

SRST.index('SRST');
SRST.prefix();
{? SRST.first()
|| {! |?
      {? SRST.ROK_F=null
      || OKRO_F.index('SRODKI');
         OKRO_F.prefix(REF.FIRMA,SRST.ROK,SRST.OKRES);
         {? OKRO_F.first()
         || {? SRST.GRP='T'
            || _tmptree.erase();
               _r:=SRST.R; _okr:=SRST.OKRO_F; _odd:=SRST.ODD; _tree:=SRST.ref();
               SRST.cntx_psh();
               SRST.index('TREE');
               SRST.prefix(_r,_okr,_odd,_tree);
               {? SRST.first()
               || {! |?
                    _tmptree.REF:=#SRST.ref();
                    _tmptree.add();
                    SRST.cntx_psh();
                    SRST.prefix();
                    SRST.TREE:=null;
                    SRST.put();
                    SRST.cntx_pop();
                    SRST.next()
                  !}
               ?};
               SRST.cntx_pop()
            ?};

            SRST.get();
            SRST.OKRO_F:=_t_okro:=OKRO_F.ref();
            SRST.ROK_F:=OKRO_F.ROK;
            SRST.put();

            SRST.cntx_psh();
            SRST.prefix();
            {? SRST.GRP='T' & _tmptree.first()
            || {! |?
                  {? SRST.seek(_tmptree.REF,SRST.name())
                  || SRST.TREE:=_tree;
                     SRST.OKRO_F:=_t_okro;
                     SRST.put()
                  ?};
                  _tmptree.next()
               !}
            ?};
            SRST.cntx_pop()
         ?}
      ?};
      SRST.next()
   !}
?};
:: uzupełnienie dokumentów przejścia D->L dla środków z metodą degresywną
exec('czytaj','#stalesys',,FINFO);
{? SRSR.first()
|| {! |?
      {? 1+SRSR.MP().T='D' | 1+SRSR.MF().T='D' | (FINFO.TOR_D='T' & 1+SRSR.MD().T='D')
      || _add:=0;
         SRST.index('PODAT');
         SRST.prefix(SRSR.ref());
         {? SRST.first()
         || {! |?
               {? SRST.OKRES=1 & SRSR.DPLP~1=SRST.ROK & ((1+SRSR.MP().T='D' & 1+SRST.MP().T='L')
                                | (1+SRSR.MF().T='D' & 1+SRST.MF().T='L')
                                | (FINFO.TOR_D='T' & 1+SRSR.MD().T='D' & 1+SRST.MD().T='L'))
               || _mp:=SRD.getLin(SRST.MP().LIN,'P');
                  _mf:=SRD.getLin(SRST.MF().LIN,'F');
                  _md:=SRD.getLin(SRST.MD().LIN,'D');

                  {? ~_mp
                  || MA.index('MA');
                     MA.prefix('LIP',);
                     {? MA.first() || _mp:=MA.ref() ?}
                  ?};
                  {? ~_mf
                  || MA.index('MA');
                     MA.prefix('LIB',);
                     {? MA.first() || _mf:=MA.ref() ?}
                  ?};
                  {? ~_mf
                  || MA.index('MA');
                     MA.prefix('LIF',);
                     {? MA.first() || _mf:=MA.ref() ?}
                  ?};
                  {? FINFO.TOR_D='T' & ~_md
                  || MA.index('MA');
                     MA.prefix('LID',);
                     {? MA.first() || _md:=MA.ref() ?}
                  ?};
                  _dalej:=0;
                  {? FINFO.SRST_MET<>null
                  || {? (FINFO.SRST_MET().MP='T' & _mp<>null) & (FINFO.SRST_MET().MF='T' & _mf<>null)
                        & (FINFO.TOR_D<>'T' | (FINFO.SRST_MET().MD='T' & _md<>null))
                     || _dalej:=1
                     ?}
                  ?};
                  {? _dalej
                  || SRDT.cntx_psh();
                     SRST.cntx_psh();
                     SRDO.cntx_psh();
                     EDIT_ES.cntx_psh();
                     SRDT.prefix();
                     FINFO.SRST_MET();
                     EDIT_ES.RODZ:='M';
                     SRDO.index('AUTO');
                     SRDO.prefix(SRSR.ref(),SRST.ROK_F,SRST.OKRO_F,FINFO.SRST_MET,'T');
                     {? ~SRDO.first()
                     || SRDO.blank();
                        SRDO.OKRO_F:=SRST.OKRO_F;
                        SRDO.ROK_F:=SRST.ROK_F;
                        SRDO.DO:=SRST.OKRO_F().POCZ;
                        SRDO.DW:=SRST.OKRO_F().POCZ;
                        SRDO.ROK:=SRDO.OKRO_F().RES;
                        SRDO.ODD_DOK:=SRST.ODD;
                        SRDO.NR:=exec('bl_srdo_nr','fst');
                        exec('be_srdo_symbol','fst');
                        SRDO.UWAGI:='Wygenerowany automatycznie z powodu przejścia z metody degresywnej na liniową';
                        {? SRDO.TYP().MP='T' || SRDO.MP:=SRST.MP ?};
                        {? SRDO.TYP().STAP='T' || SRDO.STAP:=SRST.STAP ?};
                        {? SRDO.TYP().WKP='T' || SRDO.WKP:=SRST.WKP ?};
                        {? SRDO.TYP().MP='T' || SRDO.DPLP:=SRST.DPLP ?};
                        {? SRDO.TYP().MF='T' || SRDO.MF:=SRST.MF ?};
                        {? SRDO.TYP().STAF='T' || SRDO.STAF:=SRST.STAF ?};
                        {? SRDO.TYP().WKF='T' || SRDO.WKF:=SRST.WKF ?};
                        {? SRDO.TYP().MF='T' || SRDO.DPLF:=SRST.DPLF ?};
                        {? FINFO.TOR_D='T'
                        || {? SRDO.TYP().MD='T' || SRDO.MD:=SRST.MD ?};
                           {? SRDO.TYP().STAD='T' || SRDO.STAD:=SRST.STAD ?};
                           {? SRDO.TYP().WKD='T' || SRDO.WKD:=SRST.WKD ?};
                           {? SRDO.TYP().MD='T' || SRDO.DPLD:=SRST.DPLD ?}
                        ?};
                        SRDO.AUTO:='T'
                     || _blank:=0
                     ?};
                     SRDO.MP:=_mp; SRDO.MF:=_mf; SRDO.MD:=_md;
                     _add:=SRDO.add();
                     SRDT.cntx_pop();
                     SRST.cntx_pop();
                     SRDO.cntx_pop();
                     EDIT_ES.cntx_pop()
                  ?}
               ?};
               ~_add & SRST.next()
            !}
         ?}
      ?};
      SRSR.next()
   !}
?};

SRSR.cntx_pop(); SRST.cntx_pop()


\uzup_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [19.02]
:: OPIS: Formuła uuzpełnia brak okresów BO/BZ
::----------------------------------------------------------------------------------------------------------------------
progress(,'Uzupełnianie rejestru stanów - okresy BO/BZ...'@,'Trwa import danych'@,1);

SRSR.cntx_psh(); SRST.cntx_psh();
exec('maski','srodobj');
_sql:='select distinct OKRO_F.RES as ROK from OKRO_F join ROK_F where ROK_F.FIRMA =:_a order by ROK';
_lata:=sql(_sql,REF.FIRMA);
SRSR.index('NRI'); SRSR.prefix('T');
{? SRSR.first()
|| {? _lata.first()
   || {! |?
         OKR_OBSZ.cntx_psh();
         SRD.FST:=exec('szuk_b_dom','parses','FST');
         OKR_OBSZ.index('OKRO_ES');
         OKR_OBSZ.prefix(REF.FIRMA,SRD.FST,_lata.ROK);
         {? OKR_OBSZ.first() || _napraw:=1 || _napraw:=0 ?};
         OKR_OBSZ.cntx_pop();
         {? _napraw
         || SRSR.first();
            {! |?
               SRST.index('PODAT');
               SRST.prefix(SRSR.ref());
               {? SRSR.DE~1<_lata.ROK & ~SRST.find_key(_lata.ROK,0) & (SRSR.Z='N' | SRSR.DES~1>=_lata.ROK)
               || {? SRST.find_key(_lata.ROK-1,12)
                  || __SRSTOF:=1;
                     SRST.ROK:=_lata.ROK;
                     SRST.OKRES:=0;
                     OKRO_F.cntx_psh();
                     OKRO_F.index('SRODKI');
                     OKRO_F.prefix(REF.FIRMA,_lata.ROK,0);
                     {? OKRO_F.first()
                     || SRST.OKRO_F:=OKRO_F.ref();
                        SRST.ROK_F:=OKRO_F.ROK;
                        SRST.AMOP:=SRST.AMOF:=SRST.AMOD:=0;
                        SRST.add()
                     ?};
                     OKRO_F.cntx_pop();
                     __SRSTOF:=0
                  ?}
               ?};
               {? ~SRST.find_key(_lata.ROK,13)
                  & (SRSR.Z='N' | (SRSR.DES~1>_lata.ROK | (SRSR.DES~1=_lata.ROK & SRSR.DES~2=12)))
               || {? SRST.find_key(_lata.ROK,12)
                  || __SRSTOF:=1;
                     SRST.ROK:=_lata.ROK;
                     SRST.OKRES:=13;
                     OKRO_F.cntx_psh();
                     OKRO_F.index('SRODKI');
                     OKRO_F.prefix(REF.FIRMA,_lata.ROK,13);
                     {? OKRO_F.first()
                     || SRST.OKRO_F:=OKRO_F.ref();
                        SRST.ROK_F:=OKRO_F.ROK;
                        SRST.AMOP:=SRST.AMOF:=SRST.AMOD:=0;
                        SRST.add()
                     ?};
                     OKRO_F.cntx_pop();
                     __SRSTOF:=0
                  ?}
               ?};
               SRSR.next()
            !}
         ?};
         _lata.next()
      !}
   ?}
?};

:: elementy
SRSR.index('NRI'); SRSR.prefix('N');
{? SRSR.first()
|| {? _lata.first()
   || {! |?
         OKR_OBSZ.cntx_psh();
         SRD.FST:=exec('szuk_b_dom','parses','FST');
         OKR_OBSZ.index('OKRO_ES');
         OKR_OBSZ.prefix(REF.FIRMA,SRD.FST,_lata.ROK);
         {? OKR_OBSZ.first() || _napraw:=1 || _napraw:=0 ?};
         OKR_OBSZ.cntx_pop();
         {? _napraw
         || SRSR.first();
            {! |?
               SRST.index('PODAT');
               SRST.prefix(SRSR.ref());
               {? SRSR.DE~1<_lata.ROK & ~SRST.find_key(_lata.ROK,0) & (SRSR.Z='N' | SRSR.DES~1>=_lata.ROK)
               || {? SRST.find_key(_lata.ROK-1,12)
                  || __SRSTOF:=1;
                     SRST.ROK:=_lata.ROK;
                     SRST.OKRES:=0;
                     OKRO_F.cntx_psh();
                     OKRO_F.index('SRODKI');
                     OKRO_F.prefix(REF.FIRMA,_lata.ROK,0);
                     {? OKRO_F.first()
                     || SRST.OKRO_F:=OKRO_F.ref();
                        SRST.ROK_F:=OKRO_F.ROK;
                        SRST.AMOP:=SRST.AMOF:=SRST.AMOD:=0;

                        _ref:=SRST.SRSR().TREE;
                        SRST.cntx_psh();
                        SRST.index('PODAT');
                        SRST.prefix(_ref,_lata.ROK,0);

                        {? SRST.first() || _t_srst:=SRST.ref() || _t_srst:=null ?};
                        SRST.cntx_pop();
                        SRST.cntx_psh(); SRSR.cntx_psh();
                        SRST.clear(); SRSR.clear();
                        SRST.TREE:=_t_srst;
                        SRST.add();
                        SRST.cntx_pop(); SRSR.cntx_pop()

                     ?};
                     OKRO_F.cntx_pop();
                     __SRSTOF:=0
                  ?}
               ?};
               {? ~SRST.find_key(_lata.ROK,13)
                  & (SRSR.Z='N' | (SRSR.DES~1>_lata.ROK | (SRSR.DES~1=_lata.ROK & SRSR.DES~2=12)))
               || {? SRST.find_key(_lata.ROK,12)
                  || __SRSTOF:=1;
                     SRST.ROK:=_lata.ROK;
                     SRST.OKRES:=13;
                     OKRO_F.cntx_psh();
                     OKRO_F.index('SRODKI');
                     OKRO_F.prefix(REF.FIRMA,_lata.ROK,13);
                     {? OKRO_F.first()
                     || SRST.OKRO_F:=OKRO_F.ref();
                        SRST.ROK_F:=OKRO_F.ROK;
                        SRST.AMOP:=SRST.AMOF:=SRST.AMOD:=0;

                        _ref:=SRST.SRSR().TREE;
                        SRST.cntx_psh();
                        SRST.index('PODAT');
                        SRST.prefix(_ref,_lata.ROK,13);

                        {? SRST.first() || _t_srst:=SRST.ref() || _t_srst:=null ?};
                        SRST.cntx_pop();
                        SRST.cntx_psh(); SRSR.cntx_psh();
                        SRST.clear(); SRSR.clear();
                        SRST.TREE:=_t_srst;
                        SRST.add();
                        SRST.cntx_pop(); SRSR.cntx_pop()

                     ?};
                     OKRO_F.cntx_pop();
                     __SRSTOF:=0
                  ?}
               ?};
               SRSR.next()
            !}
         ?};
         _lata.next()
      !}
   ?}
?};
SRSR.cntx_pop(); SRST.cntx_pop()


\es_stany_nal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Formuła uzupełnia znacznik naliczenia amortyzacji w rejestrze stanów
::       oraz uzupełnia tabelę składników wartości o składnik własny
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__OKRE_ES')<=0 || return(0) ?};

progress(,'Uzupełnianie rejestru stanów...'@,'Trwa import danych'@,1);

SRST.cntx_psh();
SRST.prefix();
__OKRE_ES.prefix();
SRST.for_each(" {? __OKRE_ES.find_key(SRST.ROK,SRST.OKRES)
                || {? __OKRE_ES.AMOR='T'
                   || {? SRST.NAL<>'T' || SRST.NAL:='T'; SRST.put() ?}
                   || {? SRST.NAL<>'N' || SRST.NAL:='N'; SRST.put() ?}
                   ?};
                   SRSW.index('SSRW');
                   SRSW.prefix(SRST.ref(),'D');
                   _amop:=_amof:=_warp:=_warf:=_umop:=_umof:=_netp:=_netf:=0;
                   {? SRSW.first()
                   || {! |?
                         _amop+=SRSW.AMOP; _amof+=SRSW.AMOF;
                         _warp:=SRSW.WARP; _warf:=SRSW.WARF;
                         _umop:=SRSW.UMOP; _umof:=SRSW.UMOF;
                         SRSW.next()
                      !}
                   ?};
                   SRSW.prefix(SRST.ref(),'W');
                   {? ~SRSW.first()
                   || SRSW.blank(1);
                      SRSW.SRST:=SRST.ref();
                      SRSW.TYP:='W';
                      SRSW.ROK_F:=SRST.ROK_F;
                      SRSW.OKRO_F:=SRST.OKRO_F;
                      SRSW.AMOP:=SRST.AMOP-_amop;
                      SRSW.AMOF:=SRST.AMOF-_amof;
                      SRSW.KONPOD:=SRST.KONPOD;
                      SRSW.KONFIN:=SRST.KONFIN;
                      SRSW.NETP:=SRST.NETP-_netp;
                      SRSW.NETF:=SRST.NETF-_netf;
                      SRSW.WARP:=SRST.WARP-_warp;
                      SRSW.WARF:=SRST.WARF-_warf;
                      SRSW.UMOP:=SRST.UMOP-_umop;
                      SRSW.UMOF:=SRST.UMOF-_umof;
                      SRSW.add()
                   || SRSW.ROK_F:=SRST.ROK_F;
                      SRSW.OKRO_F:=SRST.OKRO_F;
                      SRSW.AMOP:=SRST.AMOP-_amop;
                      SRSW.AMOF:=SRST.AMOF-_amof;
                      SRSW.KONPOD:=SRST.KONPOD;
                      SRSW.KONFIN:=SRST.KONFIN;
                      SRSW.NETP:=SRST.NETP-_netp;
                      SRSW.NETF:=SRST.NETF-_netf;
                      SRSW.WARP:=SRST.WARP-_warp;
                      SRSW.WARF:=SRST.WARF-_warf;
                      SRSW.UMOP:=SRST.UMOP-_umop;
                      SRSW.UMOF:=SRST.UMOF-_umof;
                      SRSW.put()
                   ?}
                ?}");
SRST.cntx_pop()


\es_skld_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import danych elementów środków do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
exec('es_skld_import','transfer1')


\es_skld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Utworzenie elementów składowych SRSR na podstawie wcześniej wczytanych danych z tabeli SKLD
::  ORG: \srsr_zb/upgrade_1742.fml
::       \SRSR_AMOR100/upgrade_1742.fml
::----------------------------------------------------------------------------------------------------------------------
exec('es_skld','transfer1')


\srdt_new
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Formuła tworzy lub uzupełnia standardowe typy dokumentów obowiązyjące w wersji 17.00
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
{? SRDT.name+3<>_symbol || SRDT.use('srdtr'+_symbol) ?};
SRDT.index('TYP');
SRDT.prefix();

:: DK
{? ~SRDT.find_key('DK')
|| SRDT.blank();
   SRDT.TYP:='DK';
   SRDT.RODZ:='D';
   SRDT.O_RODZ:='Właśc. dofinan./ulgi';
   SRDT.NAZWA:='Zmiana k. koszt. dofin./ulgi';
   SRDT.KONPOD:='T';
   SRDT.KONFIN:='T';
   SRDT.KONDOD:='N';
   SRDT.add()
|| SRDT.RODZ:='D';
   SRDT.O_RODZ:='Właśc. dofinan./ulgi';
   SRDT.NAZWA:='Zmiana k. koszt. dofin./ulgi';
   SRDT.KONPOD:='T';
   SRDT.KONFIN:='T';
   SRDT.KONDOD:='N';
   SRDT.put()
?};

:: SE
{? ~SRDT.find_key('SE')
|| SRDT.blank();
   SRDT.TYP:='SE';
   SRDT.RODZ:='I';
   SRDT.O_RODZ:='Inna';
   SRDT.NAZWA:='Zmiana sezonów amortyzacji';
   SRDT.SEZONOWY:='T';
   SRDT.add()
|| SRDT.RODZ:='I';
   SRDT.O_RODZ:='Inna';
   SRDT.NAZWA:='Zmiana sezonów amortyzacji';
   SRDT.SEZONOWY:='T';
   SRDT.put()
?};

:: MG
{? ~SRDT.find_key('MG')
|| SRDT.blank();
   SRDT.TYP:='MG';
   SRDT.RODZ:='L';
   SRDT.O_RODZ:='Właściwość';
   SRDT.NAZWA:='Zmiana grupy środka';
   SRDT.GR:='T';
   SRDT.add()
|| SRDT.RODZ:='L';
   SRDT.O_RODZ:='Właściwość';
   SRDT.NAZWA:='Zmiana grupy środka';
   SRDT.GR:='T';
   SRDT.put()
?};

:: MT
{? ~SRDT.find_key('MT')
|| SRDT.blank();
   SRDT.TYP:='MT';
   SRDT.RODZ:='L';
   SRDT.O_RODZ:='Właściwość';
   SRDT.NAZWA:='Zmiana miejsca użytkowania';
   SRDT.JORG:='T';
   SRDT.OSOBA:='T';
   SRDT.KONPOD:='T';
   SRDT.KONFIN:='T';
   SRDT.POM:='T';
   SRDT.add()
|| SRDT.RODZ:='L';
   SRDT.O_RODZ:='Właściwość';
   SRDT.NAZWA:='Zmiana miejsca użytkowania';
   SRDT.JORG:='T';
   SRDT.OSOBA:='T';
   SRDT.KONPOD:='T';
   SRDT.KONFIN:='T';
   SRDT.POM:='T';
   SRDT.put()
?};

:: PU
{? ~SRDT.find_key('PU')
|| SRDT.blank();
   SRDT.TYP:='PU';
   SRDT.RODZ:='L';
   SRDT.O_RODZ:='Właściwość';
   SRDT.NAZWA:='Przypisanie użytkownikowi';
   SRDT.OSOBA:='T';
   SRDT.add()
|| SRDT.RODZ:='L';
   SRDT.O_RODZ:='Właściwość';
   SRDT.NAZWA:='Przypisanie użytkownikowi';
   SRDT.OSOBA:='T';
   SRDT.put()
?};

:: MA
{? ~SRDT.find_key('MA')
|| SRDT.blank();
   SRDT.TYP:='MA';
   SRDT.RODZ:='M';
   SRDT.O_RODZ:='Metoda amortyzacji';
   SRDT.NAZWA:='Zmiana metody amortyzacji';
   SRDT.MP:='T';
   SRDT.STAP:='T';
   SRDT.WKP:='T';
   SRDT.MF:='T';
   SRDT.STAF:='T';
   SRDT.WKF:='T';
   SRDT.add()
|| SRDT.RODZ:='M';
   SRDT.O_RODZ:='Metoda amortyzacji';
   SRDT.NAZWA:='Zmiana metody amortyzacji';
   SRDT.MP:='T';
   SRDT.STAP:='T';
   SRDT.WKP:='T';
   SRDT.MF:='T';
   SRDT.STAF:='T';
   SRDT.WKF:='T';
   SRDT.put()
?};

:: MX
{? ~SRDT.find_key('MX')
|| SRDT.blank();
   SRDT.TYP:='MX';
   SRDT.RODZ:='M';
   SRDT.O_RODZ:='Metoda amortyzacji';
   SRDT.NAZWA:='Zmiana metody D->L';
   SRDT.MP:='T';
   SRDT.MF:='T';
   SRDT.add()
|| SRDT.RODZ:='M';
   SRDT.O_RODZ:='Metoda amortyzacji';
   SRDT.NAZWA:='Zmiana metody D->L';
   SRDT.MP:='T';
   SRDT.MF:='T';
   SRDT.put()
?};

:: OT
{? ~SRDT.find_key('OT')
|| SRDT.blank();
   SRDT.TYP:='OT';
   SRDT.RODZ:='P';
   SRDT.O_RODZ:='Przyjęcie środka';
   SRDT.NAZWA:='Przyjęcie środka';
   SRDT.add()
|| SRDT.RODZ:='P';
   SRDT.O_RODZ:='Przyjęcie środka';
   SRDT.NAZWA:='Przyjęcie środka';
   SRDT.put()
?};

:: K+
{? ~SRDT.find_key('K+')
|| SRDT.blank();
   SRDT.TYP:='K+';
   SRDT.RODZ:='W';
   SRDT.O_RODZ:='Wartość';
   SRDT.NAZWA:='Korekta dodatnia';
   SRDT.P:='+';
   PRZYCHOD.cntx_psh();
   PRZYCHOD.index('PRZYCHOR');
   PRZYCHOD.prefix('ZW_WAR_ST','ZW_WAR_ST');
   {? PRZYCHOD.first() || SRDT.PRZYCHOD:=PRZYCHOD.ref() ?};
   PRZYCHOD.cntx_pop();
   SRDT.WARP:='T';
   SRDT.WARF:='T';
   SRDT.UMOP:='T';
   SRDT.UMOF:='T';
   SRDT.add()
|| SRDT.RODZ:='W';
   SRDT.O_RODZ:='Wartość';
   SRDT.NAZWA:='Korekta dodatnia';
   SRDT.P:='+';
   PRZYCHOD.cntx_psh();
   PRZYCHOD.index('PRZYCHOR');
   PRZYCHOD.prefix('ZW_WAR_ST','ZW_WAR_ST');
   {? PRZYCHOD.first() || SRDT.PRZYCHOD:=PRZYCHOD.ref() ?};
   PRZYCHOD.cntx_pop();
   SRDT.WARP:='T';
   SRDT.WARF:='T';
   SRDT.UMOP:='T';
   SRDT.UMOF:='T';
   SRDT.put()
?};

:: K-
{? ~SRDT.find_key('K-')
|| SRDT.blank();
   SRDT.TYP:='K-';
   SRDT.RODZ:='W';
   SRDT.O_RODZ:='Wartość';
   SRDT.NAZWA:='Korekta ujemna';
   SRDT.P:='-';
   ROZ.cntx_psh();
   ROZ.index('ROZCHODR');
   ROZ.prefix('ZW_WAR_ST','ZW_WAR_ST');
   {? ROZ.first() || SRDT.ROZ:=ROZ.ref() ?};
   ROZ.cntx_pop();
   SRDT.WARP:='T';
   SRDT.WARF:='T';
   SRDT.UMOP:='T';
   SRDT.UMOF:='T';
   SRDT.add()
|| SRDT.RODZ:='W';
   SRDT.O_RODZ:='Wartość';
   SRDT.NAZWA:='Korekta ujemna';
   SRDT.P:='-';
   ROZ.cntx_psh();
   ROZ.index('ROZCHODR');
   ROZ.prefix('ZW_WAR_ST','ZW_WAR_ST');
   {? ROZ.first() || SRDT.ROZ:=ROZ.ref() ?};
   ROZ.cntx_pop();
   SRDT.WARP:='T';
   SRDT.WARF:='T';
   SRDT.UMOP:='T';
   SRDT.UMOF:='T';
   SRDT.put()
?};

:: LT
{? ~SRDT.find_key('LT')
|| SRDT.blank();
   SRDT.TYP:='LT';
   SRDT.RODZ:='W';
   SRDT.O_RODZ:='Wartość';
   SRDT.NAZWA:='Likwidacja środka';
   SRDT.P:='-';
   SRDT.Z:='T';
   ROZ.cntx_psh();
   ROZ.index('ROZCHODR');
   ROZ.prefix('LIKWIDACJA','LIKWIDACJA');
   {? ROZ.first() || SRDT.ROZ:=ROZ.ref() ?};
   ROZ.cntx_pop();
   SRDT.WARP:='T';
   SRDT.WARF:='T';
   SRDT.UMOP:='T';
   SRDT.UMOF:='T';
   SRDT.add()
|| SRDT.RODZ:='W';
   SRDT.O_RODZ:='Wartość';
   SRDT.NAZWA:='Likwidacja środka';
   SRDT.P:='-';
   SRDT.Z:='T';
   ROZ.cntx_psh();
   ROZ.index('ROZCHODR');
   ROZ.prefix('LIKWIDACJA','LIKWIDACJA');
   {? ROZ.first() || SRDT.ROZ:=ROZ.ref() ?};
   ROZ.cntx_pop();
   SRDT.WARP:='T';
   SRDT.WARF:='T';
   SRDT.UMOP:='T';
   SRDT.UMOF:='T';
   SRDT.put()
?}


\es_typd_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Import - typy dokumentów wartościowych (SRDT) w bieżącej firmie
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='typdok_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import typów dokumentów wartościowych...'@,'Trwa import danych'@,1);

SRDT.cntx_psh();
SRDT.index('TYP');
SRDT.prefix();
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         {? ~SRDT.find_key(_tmp[1])
         || SRDT.blank(1);
            SRDT.TYP:=_tmp[1];
            SRDT.RODZ:='W';
            SRDT.R:='N';
            SRDT.O_RODZ:='Wartość';
            SRDT.NAZWA:=_tmp[2];
            SRDT.P:=_tmp[10];
            SRDT.Z:=_tmp[9];
            {? SRDT.P='+'
            || PRZYCHOD.cntx_psh();
               PRZYCHOD.index('PRZYCHOR');
               PRZYCHOD.prefix(_tmp[8],_tmp[8]);
               {? PRZYCHOD.first() || SRDT.PRZYCHOD:=PRZYCHOD.ref() ?};
               PRZYCHOD.cntx_pop()
            |? SRDT.P='-'
            || ROZ.cntx_psh();
               ROZ.index('ROZCHODR');
               ROZ.prefix(_tmp[7],_tmp[7]);
               {? ROZ.first() || SRDT.ROZ:=ROZ.ref() ?};
               ROZ.cntx_pop()
            ?};
            SRDT.WARP:=_tmp[3];
            SRDT.WARF:=_tmp[4];
            SRDT.UMOP:=_tmp[5];
            SRDT.UMOF:=_tmp[6];
            SRDT.add()
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
SRDT.cntx_pop()


\es_adok_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dokumentów zmiany metody amortyzacji (dawniej ADOK) do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='adok_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import pliku %1 do tabeli tymczasowej...'@[_fn],'Trwa import danych'@,1);

VAR_DEL.delete('__ADOK');
__ADOK:=tab_tmp(2,'ID','INTEGER','ID',
                  'DW','DATE','DW',
                  'DPLF','DATE','DPLF',
                  'DPLP','DATE','DPLP',
                  'DO','DATE','DO',
                  'MF_RODZ','STRING[1]','MF_RODZ',
                  'MF_K','STRING[3]','MF_K',
                  'OKRES','INTEGER','OKRES',
                  'MOD_CZAS','TIME','MOD_CZAS',
                  'MOD_DATA','DATE','MOD_DATA',
                  'MOD_KTO','STRING[20]','MOD_KTO',
                  'MP_RODZ','STRING[1]','MP_RODZ',
                  'MP_K','STRING[3]','MP_K',
                  'ND','STRING[20]','ND',
                  'ROK','INTEGER','ROK',
                  'STAFIN','REAL','STAFIN',
                  'STAWKA','REAL','STAWKA',
                  'WKF','REAL','WKF',
                  'WKP','REAL','WKP');

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         __ADOK.ID:=#_tmp[1];
         __ADOK.DW:=exec('str2date','transfer',_tmp[2]);
         __ADOK.DPLF:=exec('str2date','transfer',_tmp[3]);
         __ADOK.DPLP:=exec('str2date','transfer',_tmp[4]);
         __ADOK.DO:=exec('str2date','transfer',_tmp[5]);
         __ADOK.MF_RODZ:=_tmp[6];
         __ADOK.MF_K:=_tmp[7];
         __ADOK.OKRES:=#_tmp[8];
         __ADOK.MOD_CZAS:=exec('str2time','#convert',_tmp[9]);
         __ADOK.MOD_DATA:=exec('str2date','transfer',_tmp[10]);
         __ADOK.MOD_KTO:=_tmp[11];
         __ADOK.MP_RODZ:=_tmp[12];
         __ADOK.MP_K:=_tmp[13];
         __ADOK.ND:=_tmp[14];
         __ADOK.ROK:=#_tmp[15];
         __ADOK.STAFIN:=#(gsub(_tmp[16],',','.'));
         __ADOK.STAWKA:=#(gsub(_tmp[17],',','.'));
         __ADOK.WKF:=#(gsub(_tmp[18],',','.'));
         __ADOK.WKP:=#(gsub(_tmp[19],',','.'));
         __ADOK.add()
      ?};
      obj_del(_tmp)
   !};
   fclose(_f)
?}


\find_srdt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Formuła wyszukuje i zwraca typ dokumentu
::   WE: Kod typu dokumentu
::   WY: SRDT.ref()
::----------------------------------------------------------------------------------------------------------------------
SRDT.cntx_psh();
SRDT.index('TYP');
SRDT.prefix(_a,);
{? SRDT.first() || _wy:=SRDT.ref() || _wy:=null ?};
SRDT.cntx_pop();
_wy


\find_okro_f
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Formuła wyszukuje okres obrachunkowy dla podanego okresu i roku podatkowego
::   WE: _a - _rok podatkowy, _b - okres podatkowy
::   WY: OKRO_F.ref()
::----------------------------------------------------------------------------------------------------------------------
_wy:=null;
OKRO_F.cntx_psh();
OKRO_F.index('SRODKI');
OKRO_F.prefix(REF.FIRMA,_a,_b);
{? OKRO_F.first() || _wy:=OKRO_F.ref() ?};
OKRO_F.cntx_pop();
_wy


\find_ma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Formuła wyszukuje metodę amortyzacji na podstawie rodzaju i kodu
::   WE: _a - rodzaj, _b - kod
::   WY: MA.ref()
::----------------------------------------------------------------------------------------------------------------------
_wy:=null;
MA.cntx_psh();
MA.index('MA_RODZ');
_kod:={? _a='F'
      || {? _b='LIF' || 'LIB'
         |? _b='UJF' || 'UJB'
         |? _b='BNF' || 'BNB'
         |? _b='ZAF' || 'ZAB'
         |? _b='LDF' || 'LDB'
         |? _b='DFR' || 'DFB'
         || _b
         ?}
      || _b
      ?};
MA.prefix(_a,_kod);
{? MA.first() || _wy:=MA.ref() ?};
MA.cntx_pop();
_wy


\es_adok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dokumentów zmiany metody amortyzacji z tabeli tymczasowej do tabeli SRDO
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 | var_pres('__ADOK')<=0 || return(0) ?};

SRDO.cntx_psh(); SRSR.cntx_psh();
SRDO.prefix(); SRSR.prefix();
__SRSR.prefix();
SRDO.index('RODZAJ');
SRDO.prefix();

{? __ADOK.first()
|| {! |?
      _id:=__ADOK.ID;
      _ref:=null;
      {? __SRSR.find_key(_id)
      || {? SRSR.seek(__SRSR.REF)
         || _ref:=SRSR.ref()
         ?}
      ?};
      {? _ref
      || progress(,'Import dokumentu zmiany metody: %1'@[__ADOK.ND],'Trwa import danych'@,1);
:: jeżeli symbol dla rodzaju zmiany się powtarza to modyfikacja symbolu
         SRDO.cntx_psh();
         SRDO.index('RODZAJ');
         SRDO.prefix('M',__ADOK.ND,);
         {? SRDO.first()
         || _loop:=1;
            {! |?
               _tmp:=__ADOK.ND+'('+$_loop+')';
               SRDO.prefix('M',_tmp,);
               {? ~SRDO.first() || _loop:=0; __ADOK.ND:=_tmp || _loop+=1 ?};
               _loop
            !}
         ?};
         SRDO.cntx_pop();

         SRDO.blank(1);
         SRDO.SRSR:=_ref;
         SRDO.TYP:=exec('find_srdt','transfer','MA');
         SRDO.RODZ:='M';
         SRDO.SYMBOL:=__ADOK.ND;
         SRDO.ROK:=__ADOK.ROK;
:: dokumenty w systemie Merit muszą mieć nowe unikalne nr w obrębie typu i roku
         SRDO.NR:=exec('bl_srdo_nr','fst');
         SRDO.DO:=__ADOK.DO;
         SRDO.DW:=__ADOK.DW;
         SRDO.OKRES:=__ADOK.OKRES;
         {? SRDO.ROK<>0 & SRDO.OKRES<>0
         || SRDO.OKRO_F:=exec('find_okro_f','transfer',SRDO.ROK,SRDO.OKRES)
         || SRDO.OKRO_F:=exec('find_okro_f','fst',SRDO.DO)
         ?};
         SRDO.DPLF:=__ADOK.DPLF;
         SRDO.DPLP:=__ADOK.DPLP;
         SRDO.ROK_F:={? SRDO.OKRO_F<>null || SRDO.OKRO_F().ROK || null ?};
         SRDO.MP:=exec('find_ma','transfer',__ADOK.MP_RODZ,__ADOK.MP_K);
         SRDO.MF:=exec('find_ma','transfer',__ADOK.MF_RODZ,__ADOK.MF_K);
         SRDO.STAP:=__ADOK.STAWKA;
         SRDO.STAF:=__ADOK.STAFIN;
         SRDO.WKP:=__ADOK.WKP;
         SRDO.WKF:=__ADOK.WKF;
         SRDO.MOD_CZAS:=__ADOK.MOD_CZAS;
         SRDO.MOD_DATA:=__ADOK.MOD_DATA;
         SRDO.MOD_KTO:=__ADOK.MOD_KTO;
         SRDO.add()
      ?};
      __ADOK.next()
   !}
?};
SRDO.cntx_pop(); SRSR.cntx_pop()


\es_zmia_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dokumentów zmiany miejsca użytkowania (dawniej ZMIA) do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='zmia_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
||
:: FUN.info('Brak dostępu do pliku %1.'@[_fn]);
   return(0)
?};

progress(,'Import pliku %1 do tabeli tymczasowej...'@[_fn],'Trwa import danych'@,1);

VAR_DEL.delete('__ZMIA');
__ZMIA:=tab_tmp(2,'ID','INTEGER','ID',
                  'DW','DATE','DW',
                  'DO','DATE','DO',
                  'OKRES','INTEGER','OKRES',
                  'SD','STRING[25]','SD',
                  'JORG','STRING[16]','JORG',
                  'POM_ODD','STRING[8]','POM_ODD',
                  'POM_SIE','STRING[10]','POM_SIE',
                  'POM_S','STRING[10]','POM_S',
                  'OSOBA_N','STRING[30]','OSOBA_N',
                  'OSOBA_P','STRING[30]','OSOBA_P',
                  'ROK','INTEGER','ROK',
                  'KONPOD','STRING[35]','KONPOD',
                  'KONFIN','STRING[35]','KONFIN',
                  'ODD','STRING[8]','ODD',
                  'NRI','STRING[20]','NRI',
                  'INW','INTEGER','INW',
                  'ARK','INTEGER','ARK',
                  'TYP','STRING[2]','TYP',
                  'REF','STRING[16]','REF'
);

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         __ZMIA.ID:=#_tmp[1];
         __ZMIA.DW:=exec('str2date','transfer',_tmp[2]);
         __ZMIA.DO:=exec('str2date','transfer',_tmp[3]);
         __ZMIA.OKRES:=#_tmp[4];
         __ZMIA.SD:=_tmp[5];
         __ZMIA.JORG:=_tmp[6];
         __ZMIA.POM_ODD:=_tmp[7];
         __ZMIA.POM_SIE:=_tmp[8];
         __ZMIA.POM_S:=_tmp[9];
         __ZMIA.OSOBA_N:=_tmp[10];
         __ZMIA.OSOBA_P:=_tmp[11];
         __ZMIA.ROK:=#_tmp[12];
         __ZMIA.KONPOD:=_tmp[13];
         __ZMIA.KONFIN:=_tmp[14];
         __ZMIA.ODD:=_tmp[15];
         __ZMIA.NRI:=_tmp[16];
         __ZMIA.INW:=#_tmp[17];
         __ZMIA.ARK:=#_tmp[18];
         __ZMIA.TYP:=_tmp[19];
         __ZMIA.REF:='';
         __ZMIA.add()
      ?};
      obj_del(_tmp)
   !};
   fclose(_f)
?}


\es_zmia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dokumentów zmiany miejsca użytkowania z tabeli tymczasowej do tabeli SRDO
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 | var_pres('__ZMIA')<=0 || return(0) ?};

SRDO.cntx_psh(); SRSR.cntx_psh(); SRST.cntx_psh();
SRDO.prefix(); SRSR.prefix(); SRST.prefix();
__SRSR.prefix();

{? __ZMIA.first()
|| {! |?
      _id:=__ZMIA.ID;
      _ref:=null;
      {? __SRSR.find_key(_id)
      || {? SRSR.seek(__SRSR.REF)
         || _ref:=SRSR.ref();
            SRDO.blank(1);
            SRDO.SRSR:=_ref;
            SRDO.TYP:=exec('find_srdt','transfer',__ZMIA.TYP);
            SRDO.ROK:=__ZMIA.ROK;
            SRDO.OKRES:=__ZMIA.OKRES;
            {? SRDO.ROK<>0 & SRDO.OKRES<>0
            || SRDO.OKRO_F:=exec('find_okro_f','transfer',SRDO.ROK,SRDO.OKRES)
            || SRDO.OKRO_F:=exec('find_okro_f','fst',SRDO.DO)
            ?};
            SRDO.ROK_F:={? SRDO.OKRO_F<>null || SRDO.OKRO_F().ROK || null ?};
            SRST.index('SROD');
            SRST.prefix(SRSR.ref(),SRDO.ROK_F,SRDO.OKRO_F);
            {? SRST.first()
            ||
:: uzupełnienie na podstawie rejestru stanu jeżeli pole obsługiwane wg definicji typu
               {? SRDO.TYP().NRI='T' || SRDO.NRI:=SRST.NRI ?};
               {? SRDO.TYP().NST='T' || SRDO.NST:=SRST.NST ?};
               {? SRDO.TYP().JORG='T' || SRDO.JORG:=SRST.JORG; SRDO.ODD:=SRST.ODD ?};
               {? SRDO.TYP().OSOBA='T' || SRDO.OSOBA:=SRST.OSOBA ?};
               {? SRDO.TYP().POM='T' || SRDO.POM:=SRST.POM ?};
               {? SRDO.TYP().GR='T' || SRDO.GR:=SRST.GR ?};
               {? SRDO.TYP().R='T' || SRDO.R:=SRST.R ?};
               {? SRDO.TYP().KONPOD='T' || SRDO.KONPOD:=SRSR.KONPOD ?};
               {? SRDO.TYP().KONFIN='T' || SRDO.KONFIN:=SRST.KONFIN ?}
            ?}
         ?}
      ?};

      {? _ref
      || progress(,'Import dokumentu zmiany miejsca użytkowania %1'@[__ZMIA.SD],'Trwa import danych'@,1);
:: jeżeli symbol dla rodzaju zmiany się powtarza to modyfikacja symbolu
         SRDO.cntx_psh();
         SRDO.index('RODZAJ');
         SRDO.prefix('L',__ZMIA.SD,);
         {? SRDO.first()
         || _loop:=1;
            {! |?
               _tmp:=__ZMIA.SD+'('+$_loop+')';
               SRDO.prefix('L',_tmp,);
               {? ~SRDO.first() || _loop:=0; __ZMIA.SD:=_tmp || _loop+=1 ?};
               _loop
            !}
         ?};
         SRDO.cntx_pop();
         SRDO.SYMBOL:=__ZMIA.SD;
         SRDO.RODZ:='L';
:: dokumenty w systemie Merit muszą mieć nowe unikalne nr w obrębie typu i roku
         SRDO.NR:=exec('bl_srdo_nr','fst');
         SRDO.DO:=__ZMIA.DW;
         SRDO.DW:=__ZMIA.DO;
         {? SRDO.ROK<>0 & SRDO.OKRES<>0
         || SRDO.OKRO_F:=exec('find_okro_f','transfer',SRDO.ROK,SRDO.OKRES)
         || SRDO.OKRO_F:=exec('find_okro_f','fst',SRDO.DO)
         ?};
         SRDO.ROK_F:={? SRDO.OKRO_F<>null || SRDO.OKRO_F().ROK || null ?};
         UD_TYP.index('SYMBOL');
         UD_TYP.prefix('PODZORG','PODZORG');
         {? UD_TYP.first()
         || UD_SKL.index('SYMBOL');
            UD_SKL.prefix(UD_TYP.ref(),__ZMIA.JORG,__ZMIA.JORG);
            {? UD_SKL.first()
            || SRDO.JORG:=UD_SKL.ref();
               SKIDXODD.index('UD_SKL');
               SKIDXODD.prefix(SRDO.JORG);
               {? SKIDXODD.first() || SRDO.ODD:=SKIDXODD.ODD ?}
            ?}
         || SRDO.JORG:=null
         ?};
         SRDO.POM:=null();
         {? __ZMIA.POM_ODD<>'' & __ZMIA.POM_SIE<>'' & __ZMIA.POM_S<>''
         || _oddp:=exec('find_odd','transfer',__ZMIA.POM_ODD);
            SIED.index('UNIK');
            SIED.prefix(REF.FIRMA,_oddp,__ZMIA.POM_SIE);
            {? SIED.first()
            || POMI.index('UNIK');
               POMI.prefix(REF.FIRMA,_oddp,SIED.ref(),__ZMIA.POM_S);
               SRDO.POM:={? POMI.first() || POMI.ref() || null ?}
            ?}
         ?};
         {? __ZMIA.OSOBA_N<>'' & __ZMIA.OSOBA_P<>''
         || OSOBA.index('OSOBA');
            OSOBA.prefix(__ZMIA.OSOBA_N,__ZMIA.OSOBA_P);
            SRDO.OSOBA:={? OSOBA.first() || OSOBA.ref() || null ?}
         || SRDO.OSOBA:=null
         ?};
         {? __ZMIA.KONPOD<>''
         || ZSKON.index('KOD');
            ZSKON.prefix(REF.FIRMA,'P',__ZMIA.KONPOD);
            SRDO.KONPOD:={? ZSKON.first() || ZSKON.ref() || null ?}
         || SRDO.KONPOD:=null
         ?};
         {? __ZMIA.KONFIN<>''
         || ZSKON.index('KOD');
            ZSKON.prefix(REF.FIRMA,'F',__ZMIA.KONFIN);
            SRDO.KONFIN:={? ZSKON.first() || ZSKON.ref() || null ?}
         || SRDO.KONFIN:=null
         ?};
         {? __ZMIA.NRI<>'' || SRDO.NRI:=__ZMIA.NRI ?};
         SRDO.AUTO:='N';
         SRDO.PLAN:='N';
         {? SRDO.add()
         || __ZMIA.REF:=$SRDO.ref();
            __ZMIA.put()
         ?}
      ?};
      __ZMIA.next()
   !}
?};
SRDO.cntx_pop(); SRSR.cntx_pop(); SRST.cntx_pop()


\es_doku_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dokumentów wartościowych (dawniej DOKU) do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='doku_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
||
:: FUN.info('Brak dostępu do pliku %1.'@[_fn]);
   return(0)
?};

progress(,'Import pliku %1 do tabeli tymczasowej...'@[_fn],'Trwa import danych'@,1);
VAR_DEL.delete('__DOKU');

__DOKU:=tab_tmp(3,'ID','INTEGER','ID',
                  'ROK','INTEGER','AR',
                  'ND','STRING[20]','ND',
                  'REFSQL','STRING[16]','REFSQL',
                  'ARK','INTEGER','ARK',
                  'DO','DATE','DO',
                  'DOKKSIEG','STRING[16]','DOKKSIEG',
                  'DW','DATE','DW',
                  'INW','INTEGER','INW',
                  'MAX','REAL','MAX',
                  'OKRES','INTEGER','OKRES',
                  'MOD_CZAS','TIME','MOD_CZAS',
                  'MOD_DATA','DATE','MOD_DATA',
                  'MOD_KTO','STRING[20]','MOD_KTO',
                  'OKE','INTEGER','OKE',
                  'OPI','STRING[100]','OPI',
                  'OSTATEK','REAL','OTATEK',
                  'P','STRING[1]','P',
                  'PRZYCHOD','STRING[15]','PRZYCHOD',
                  'ROZ','STRING[15]','ROZ',
                  'T','STRING[2]','T',
                  'ULGA','REAL','ULGA',
                  'UMOF','REAL','UMOF',
                  'UMOP','REAL','UMOP',
                  'UWAGI','STRING[40]','UWAGI',
                  'W','STRING[1]','W',
                  'WARP','REAL','WARP',
                  'WARF','REAL','WARF',
                  'Z','STRING[1]','Z',
                  'REF','STRING[16]','REF',
                  'ELNRI','STRING[18]','ELNRI');

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         __DOKU.ID:=#_tmp[1];
         __DOKU.ROK:=#_tmp[2];
         __DOKU.ND:=_tmp[3];
         __DOKU.REFSQL:=_tmp[29];
         __DOKU.ARK:=#_tmp[4];
         __DOKU.DO:=exec('str2date','transfer',_tmp[5]);
         __DOKU.DOKKSIEG:=_tmp[6];
         __DOKU.DW:=exec('str2date','transfer',_tmp[7]);
         __DOKU.INW:=#_tmp[8];
         __DOKU.MAX:=#(gsub(_tmp[9],',','.'));
         __DOKU.OKRES:=#_tmp[10];
         __DOKU.MOD_CZAS:=exec('str2time','#convert',_tmp[11]);
         __DOKU.MOD_DATA:=exec('str2date','transfer',_tmp[12]);
         __DOKU.MOD_KTO:=_tmp[13];
         __DOKU.OKE:=#(gsub(_tmp[14],',','.'));
         __DOKU.OPI:=_tmp[15];
         __DOKU.OSTATEK:=#(gsub(_tmp[16],',','.'));
         __DOKU.P:=_tmp[17];
         __DOKU.PRZYCHOD:=_tmp[18];
         __DOKU.ROZ:=_tmp[19];
         __DOKU.T:=_tmp[20];
         __DOKU.ULGA:=#(gsub(_tmp[21],',','.'));
         __DOKU.UMOF:=#(gsub(_tmp[22],',','.'));
         __DOKU.UMOP:=#(gsub(_tmp[23],',','.'));
         __DOKU.UWAGI:=_tmp[24];
         __DOKU.W:=_tmp[25];
         __DOKU.WARP:=#(gsub(_tmp[26],',','.'));
         __DOKU.WARF:=#(gsub(_tmp[27],',','.'));
         __DOKU.Z:=_tmp[28];
         __DOKU.REF:='';
         __DOKU.ELNRI:=_tmp[30];
         __DOKU.add()
      ?};
      obj_del(_tmp)
   !};
   fclose(_f)
?}


\nd_doku
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [19.22]
:: OPIS: Formuła modyfikuje symbol dokumentu tak by zachować unikalność w Merit
::   WE: proponowany symbol dokumentu
::   WY: symbol dokumentu - po zmianach, jeżeli były konieczne
::----------------------------------------------------------------------------------------------------------------------
SRDO.cntx_psh();
SRDO.index('RODZAJ');
SRDO.prefix('W',_a,);
{? SRDO.first()
|| _loop:=1;
   {! |?
      _tmp:=_a+' ('+$_loop+')';
      SRDO.prefix('W',_tmp,);
      {? ~SRDO.first() || _loop:=0; _a:=_tmp || _loop+=1 ?};
      _loop
   !}
?};
SRDO.cntx_pop();
_a


\es_doku
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dokumentów wartościowych z tabeli tymczasowej do tabeli SRDO
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 | var_pres('__DOKU')<=0 || return(0) ?};

SRDO.cntx_psh(); SRSR.cntx_psh(); SRST.cntx_psh();
SRDO.prefix(); SRSR.prefix(); SRST.prefix();
__SRSR.prefix();

{? __DOKU.first()
|| {! |?
      _id:=__DOKU.ID;
      _ref:=_ref_e:=null;
      {? __SRSR.find_key(_id)
      || {? SRSR.seek(__SRSR.REF)
         || _ref:=SRSR.ref();
            _tmp_nri:=SRSR.NRI;
            {? _tmp_nri+1='.' || _tmp_nri-=1 ?};
:: jeżeli zestaw to dokument musi być przypisany także do elementu składowego 'Z'
            {? SRSR.GRP='T'
            || SRSR.cntx_psh();
               SRSR.index('TREE');
               SRSR.prefix(_ref);
               {? SRSR.first()
               || {! |?
                     {? SRSR.NRI=_tmp_nri+'/Z' || _ref_e:=SRSR.ref() ?};
                     _ref_e=null & SRSR.next()
                  !}
               ?};
               SRSR.cntx_pop()
            ?}
         ?}
      ?};

      {? _ref
      || progress(,'Import dokumentu wartościowego: %1'@[__DOKU.ND],'Trwa import danych'@,1);
:: jeżeli symbol dla rodzaju zmiany się powtarza to modyfikacja symbolu
         {? _ref_e=null
         || _nd:=exec('nd_doku','transfer',__DOKU.ND)
         || _nd:=__DOKU.ND +' (Z)';
            _nd:=exec('nd_doku','transfer',_nd)
         ?};
         SRDO.blank(1);
         SRDO.SRSR:=_ref;
         SRDO.SRSR_E:=_ref_e;
         SRDO.TYP:=exec('find_srdt','transfer',__DOKU.T);
         SRDO.ROK:=SRDO.ROKP:=__DOKU.ROK;
         SRDO.OKRES:=__DOKU.OKRES;
         {? SRDO.ROK<>0 & SRDO.OKRES<>0
         || SRDO.OKRO_F:=exec('find_okro_f','transfer',SRDO.ROK,SRDO.OKRES)
         || SRDO.OKRO_F:=exec('find_okro_f','fst',SRDO.DO)
         ?};
         SRDO.ROK_F:={? SRDO.OKRO_F<>null || SRDO.OKRO_F().ROK || null ?};
         SRDO.NR:=exec('bl_srdo_nr','fst');
         SRDO.SYMBOL:=_nd;
         SRDO.RODZ:='W';
:: dokumenty w systemie Merit muszą mieć nowe unikalne nr w obrębie typu i roku
         SRDO.DO:=__DOKU.DO;
         SRDO.DW:=__DOKU.DW;
         SRDO.MOD_CZAS:=__DOKU.MOD_CZAS;
         SRDO.MOD_DATA:=__DOKU.MOD_DATA;
         SRDO.MOD_KTO:=__DOKU.MOD_KTO;
         SRDO.AUTO:='N';
         SRDO.PLAN:='N';
         SRDO.DOKKSIEG:=__DOKU.DOKKSIEG;
         SRDO.WARP:=__DOKU.WARP;
         SRDO.WARF:=__DOKU.WARF;
         SRDO.UMOP:=__DOKU.UMOP;
         SRDO.UMOF:=__DOKU.UMOF;
         SRDO.OSTATEK:=__DOKU.OSTATEK;
         SRDO.OKE:=__DOKU.OKE;
         SRDO.MAX:=__DOKU.MAX;
         SRDO.P:=__DOKU.P;
         {? __DOKU.PRZYCHOD<>''
         || PRZYCHOD.cntx_psh();
            PRZYCHOD.index('PRZYCHOR');
            PRZYCHOD.prefix(__DOKU.PRZYCHOD,__DOKU.PRZYCHOD);
            {? PRZYCHOD.first() || SRDO.PRZYCHOD:=PRZYCHOD.ref() ?};
            PRZYCHOD.cntx_pop()
         ?};
         {? __DOKU.ROZ<>''
         || ROZ.cntx_psh();
            ROZ.index('ROZCHODR');
            ROZ.prefix(__DOKU.ROZ,__DOKU.ROZ);
            {? ROZ.first() || SRDO.ROZ:=ROZ.ref() ?};
            ROZ.cntx_pop()
         ?};
         SRDO.Z:=__DOKU.W;
         SRDO.UWAGI:=__DOKU.UWAGI;
         {? SRDO.add()
         || __DOKU.REF:=$SRDO.ref();
            __DOKU.put();
            SRDO.cntx_psh();
            _my_okr:=SRDO.OKRO_F;
::             jeżeli w Xpertis zlikwidowano środek z elementami w Merit trzeba wystawić dokumenty dla każdego elementu
            {? SRDO.SRSR().GRP='T' &  SRDO.SYMBOL*'LE' & _ref_e<>null
            || SRSR.cntx_psh();
               SRSR.index('TREE');
               SRSR.prefix(_ref);
               {? SRSR.first()
               || _licznik:=1;
                  {! |?
                     {? SRSR.NRI+2<>'/Z' & SRSR.NRI=__DOKU.ELNRI
                     || SRDO.SRSR_E:=SRSR.ref();
                        SRDO.NR:=exec('bl_srdo_nr','fst');
                        _symbol:=SRDO.SYMBOL;
                        SRDO.SYMBOL:=__DOKU.ND;
                        SRDO.WARP:=SRDO.WARF:=SRDO.WARD:=0;
                        SRDO.UMOP:=SRDO.UMOF:=SRDO.UMOD:=0;
                        {? SRDO.add()
                        || SRSR.DOKSKR:=SRDO.ref;
                           SRSR.put()
                        ?};
                        SRDO.SYMBOL:=_symbol;
                        _licznik+=1
                     ?};
                     SRSR.next()
                  !}
               ?};
               SRSR.cntx_pop()
            ?};
            SRDO.cntx_pop();
:: dokument dla rekordu zestawu
            {? SRDO.SRSR().GRP='T' & SRDO.SYMBOL*'LT' & SRDO.Z='T'
            || _nd:=exec('nd_doku','transfer',__DOKU.ND);
               SRDO.SRSR_E:=null;
               SRDO.SYMBOL:=_nd;
               SRDO.NR:=exec('bl_srdo_nr','fst');
               SRDO.WARP:=SRDO.WARF:=SRDO.WARD:=0;
               SRDO.UMOP:=SRDO.UMOF:=SRDO.UMOD:=0;
               SRDO.add()
            ?}
         ?}
      ?};
      __DOKU.next()
   !}
?};

SRSR.index('RNRI');
SRSR.prefix();
{? SRSR.first()
|| {! |?
      {? SRSR.GRP<>'T' & SRSR.Z='T'
      || SRST.index('PODAT');
         SRST.prefix(SRSR.ref());
         {? SRST.first()
         || {! |?
               {? SRSR.DOKSKR<>null & (SRST.ROK>SRSR.DOKSKR().OKRO_F().RES
                  | (SRST.ROK=SRSR.DOKSKR().OKRO_F().RES & SRST.OKRES>SRSR.DOKSKR().OKRO_F().OES))
               || SRSW.index('SSRW');
                  SRSW.prefix(SRST.ref());
                  {? SRSW.first() || {! |? SRSW.del() !} ?};
                  {? SRST.count()=0 || SRST.del() || SRST.next() ?}
               || SRST.next()
               ?}
            !}
         ?}
      ?};
      SRSR.next()
   !};
   SRSR.first();
   {! |?
      {? SRSR.GRP='T' & SRSR.Z='T'
      || SRST.index('PODAT');
         SRST.prefix(SRSR.ref());
         {? SRST.first()
         || {! |?
               {? SRSR.DOKSKR<>null & (SRST.ROK>SRSR.DOKSKR().OKRO_F().RES
                  | (SRST.ROK=SRSR.DOKSKR().OKRO_F().RES & SRST.OKRES>SRSR.DOKSKR().OKRO_F().OES))
               || SRSW.index('SSRW');
                  SRSW.prefix(SRST.ref());
                  {? SRSW.first() || {! |? SRSW.del() !} ?};
                  {? SRST.count()=0 || SRST.del() || SRST.next() ?}
               || SRST.next()
               ?}
            !}
         ?}
      ?};
      SRSR.next()
   !}
?};

SRDO.cntx_pop(); SRSR.cntx_pop(); SRST.cntx_pop()


\es_zf_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import źródeł finansowania środków trwałych (źródła dotacji)
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='zrodfin_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
||
:: FUN.info('Brak dostępu do pliku %1.'@[_fn]);
   return(0)
?};

progress(,'Import źródeł finansowania środków...'@,'Trwa import danych'@,1);

SRZD.cntx_psh();
SRZD.index('SRZD');
SRZD.prefix();

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         {? ~SRZD.find_key(_tmp[5],)
         || SRZD.blank(1);
            SRZD.NAZWA:=_tmp[5];
            SRZD.UMOWA:=_tmp[4];
            SRZD.DATA:=exec('str2date','transfer',_tmp[1]);
            SRZD.OPIS:=_tmp[2];
            {? _tmp[6]<>''
            || ZSKON.index('KOD');
               ZSKON.prefix(REF.FIRMA,'P',_tmp[6]);
               SRZD.KONPOD:={? ZSKON.first() || ZSKON.ref() || null ?}
            || SRZD.KONPOD:=null
            ?};
            {? _tmp[7]<>''
            || ZSKON.index('KOD');
               ZSKON.prefix(REF.FIRMA,'F',_tmp[7]);
               SRZD.KONFIN:={? ZSKON.first() || ZSKON.ref() || null ?}
            || SRZD.KONFIN:=null
            ?};
            SRZD.PKD:=#(gsub(_tmp[3],',','.'));
:: pole WKD do uzupełnienia w trakcie importu ZFSR_ODP
            SRZD.WKD:=0;
            SRZD.add()
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
SRZD.cntx_pop()


\zal_pobh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Uzupełnia kolumnę USER tabeli ZAL_POBH na podstawie zawartości pliku tekstowego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Pomijamy wykonanie dla firmy 000
FIRMA.cntx_psh();
{? REF.WFIRM & REF.FIRMA().SYMBOL='000'
|| FIRMA.cntx_pop();
   return(~~)
?};
_kod:={? REF.WFIRM || '_'+REF.FIRMA().SYMBOL || '' ?};
FIRMA.cntx_pop();

_fn:=ZAL_POBH.name()+_kod+'.tra';
{? ~fexists(_fn,1)
|| __UPG.msg('Brak dostępu do pliku %1.\nProcedurę należy powtórzyć.'@[_fn]);
   return(0)
?};

_BUF:=tab_tmp(1,
   'ZAL_POBH','STRING[16]','Rekord',
   'WEBLOGIN','STRING[100]','Użytkownika'
);
_BUF.import(_fn,1,1,%1+';','UTF-8,pth,header',,
   'ZAL_POBH',,1,,
   'WEBLOGIN',,2,
);
{? _BUF.size()=0
|| return()
?};

USERS.cntx_psh();
USERS.index('WEBLOGIN');
USERS.prefix();
ZAL_POBH.cntx_psh();
ZAL_POBH.clear();
_prg_start:=_loop:=_BUF.first();
{? _prg_start || FUN.prg_start(_BUF.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|! {? ZAL_POBH.seek(_BUF.ZAL_POBH) & ZAL_POBH.USER=null() & USERS.find_key(_BUF.WEBLOGIN,)
   || ZAL_POBH.USER:=USERS.ref();
      ZAL_POBH.put()
   ?};
   FUN.prg_next();
   _loop:=_BUF.next()
!};
{? _prg_start || FUN.prg_stop() ?};
ZAL_POBH.cntx_pop();
USERS.cntx_pop();
~~


\es_zfsr_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dofinansowań z pliku tekstowego do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='zfsr_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import pliku %1 do tabeli tymczasowej...'@[_fn],'Trwa import danych'@,1);

VAR_DEL.delete('__ZFSR');

__ZFSR:=tab_tmp(2,'ID','INTEGER','ID',
                  'AUTOID','STRING[16]','AUTOID',
                  'ZF_NAME','STRING[30]','ZF_NAME',
                  'DATA','DATE','DATA',
                  'DOKU_AR','INTEGER','DOKU_AR',
                  'DOKU_ND','STRING[30]','DOKU_ND',
                  'ZF_UMOWA','STRING[30]','ZF_UMOWA',
                  'DATA_ZF','DATE','DATA_ZF',
                  'DATA_ZP','DATE','DATA_ZP',
                  'DOKU_DW','DATE','DOKU_DW',
                  'DOKU_T','STRING[2]','DOKU_T',
                  'KWOTA','REAL','KWOTA',
                  'KWOTA_P','REAL','KWOTA_P',
                  'OKRES','INTEGER','OKRES',
                  'ROZF','STRING[1]','ROZF',
                  'ROZP','STRING[1]','ROZP',
                  'KONFIN','STRING[35]','KONFIN',
                  'KONPOD','STRING[35]','KONPOD',
                  'REF','STRING[16]','REF');

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         __ZFSR.ID:=#_tmp[1];
         __ZFSR.AUTOID:=_tmp[2];
         __ZFSR.ZF_NAME:=_tmp[3];
         __ZFSR.DATA:=exec('str2date','transfer',_tmp[4]);
         __ZFSR.DOKU_AR:=#_tmp[5];
         __ZFSR.DOKU_ND:=_tmp[6];
         __ZFSR.ZF_UMOWA:=_tmp[7];
         __ZFSR.DATA_ZF:=exec('str2date','transfer',_tmp[8]);
         __ZFSR.DATA_ZP:=exec('str2date','transfer',_tmp[9]);
         __ZFSR.DOKU_DW:=exec('str2date','transfer',_tmp[10]);
         __ZFSR.DOKU_T:=_tmp[11];
         __ZFSR.KWOTA:=#(gsub(_tmp[12],',','.'));
         __ZFSR.KWOTA_P:=#(gsub(_tmp[13],',','.'));
         __ZFSR.OKRES:=#_tmp[14];
         __ZFSR.ROZF:=_tmp[15];
         __ZFSR.ROZP:=_tmp[16];
         __ZFSR.KONFIN:=_tmp[17];
         __ZFSR.KONPOD:=_tmp[18];
         __ZFSR.add()
      ?};
      obj_del(_tmp)
   !};
   fclose(_f)
?}


\es_zfsr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dofinansowań z tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 | var_pres('__DOKU')<=0 | var_pres('__ZFSR')<=0 || return(0) ?};

SRZF.cntx_psh(); SRSR.cntx_psh(); SRST.cntx_psh(); SRDO.cntx_psh();
SRZF.prefix(); SRSR.prefix(); SRST.prefix(); SRDO.prefix();
__SRSR.prefix();
__DOKU.prefix();

{? __ZFSR.first()
|| {! |?
      _id:=__ZFSR.ID;
      _ref:=null;
      {? __SRSR.find_key(_id)
      || {? SRSR.seek(__SRSR.REF)
         || _ref:=SRSR.ref()
         ?}
      ?};

      {? _ref
      || progress(,'Import dofinansowania: %1 do środka: %2'@[__ZFSR.ZF_NAME,SRSR.NRI],'Trwa import danych'@,1);
         SRZF.blank();
         SRZF.SRSR:=_ref;
         SRZD.index('SRZD');
         SRZD.prefix(__ZFSR.ZF_NAME,);
         {? SRZD.first()
         || SRZF.SRZD:=SRZD.ref();
            SRZF.NAZWA:=__ZFSR.ZF_NAME;
            SRZF.DATA:=__ZFSR.DATA;
            SRZF.DATA_ZF:=__ZFSR.DATA_ZF;
            SRZF.DATA_ZP:=__ZFSR.DATA_ZP;
            {? __ZFSR.KONPOD<>''
            || ZSKON.index('KOD');
               ZSKON.prefix(REF.FIRMA,'P',__ZFSR.KONPOD);
               SRZF.KONPOD:={? ZSKON.first() || ZSKON.ref() || null ?}
            || SRZF.KONPOD:=null
            ?};
            {? __ZFSR.KONFIN<>''
            || ZSKON.index('KOD');
               ZSKON.prefix(REF.FIRMA,'F',__ZFSR.KONFIN);
               SRZF.KONFIN:={? ZSKON.first() || ZSKON.ref() || null ?}
            || SRZF.KONFIN:=null
            ?};
            SRZF.OKRO_F:=exec('find_okro_f','fst',SRZF.DATA);
            SRZF.ROK_F:=SRZF.OKRO_F().ROK;
            SRZF.ROZF:=__ZFSR.ROZF;
            SRZF.ROZP:=__ZFSR.ROZP;
            SRZF.TYP:='D';
            SRZF.WARP_P:=__ZFSR.KWOTA_P;
            SRZF.WARP:=__ZFSR.KWOTA;
            SRZF.WARF:=__ZFSR.KWOTA;
            {? __ZFSR.DOKU_AR<>0 & __ZFSR.DOKU_ND<>''
            || {? __DOKU.find_key(__ZFSR.ID,__ZFSR.DOKU_AR,__ZFSR.DOKU_ND)
               || {? SRDO.seek(__DOKU.REF) || SRZF.SRDO:=SRDO.ref() ?}
               ?}
            ?};

            {? SRZF.add()
            || __ZFSR.REF:=$SRZF.ref();
               __ZFSR.put();
               {? SRZF.OKRO_F<>null
               ||
::                SRD.updateRecState(SRZF.OKRO_F,3)
                  {? SRZF.SRSR().GRP<>'T'
                  || SRST.cntx_psh();
                     SRST.index('PODAT');
                     SRST.prefix(SRZF.SRSR);
                     {? SRST.first()
                     || {! |?
                           {? SRST.ROK>SRZF.OKRO_F().RES | (SRST.ROK=SRZF.OKRO_F().RES & SRST.OKRES>=SRZF.OKRO_F().OES)
                           || SRD.updateValueComp(SRST.ref())
                           ?};
                           SRST.next()
                        !}
                     ?};
                     SRST.cntx_pop()
                  ?}
               ?}
            ?}
         ?}
      ?};
      __ZFSR.next()
   !}
?};
SRZF.cntx_pop(); SRSR.cntx_pop(); SRST.cntx_pop(); SRDO.cntx_pop()


\es_zfsrodp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import historii odpisów amortyzacyjnych z dofinansowań
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 || return(0) ?};

_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='zfdotodp_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import historii rozliczeń dofinansowań...'@,'Trwa import danych'@,1);

SRSW.cntx_psh();
SRSW.use('srswr'+_symbol);
SRSW.index('PODAT');
SRSW.prefix();
SRZF.prefix();
__SRSR.prefix();
__ZFSR.prefix();

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         _id:=#_tmp[1];
         _ref:=null;
::         {? __SRSR.find_key(_id)
::         || {? SRSR.seek(__SRSR.REF)
::            || _ref:=SRSR.ref()
::            ?}
::         ?};
         {? __ZFSR.find_key(_id,_tmp[2])
         || {? SRZF.seek(__ZFSR.REF,SRZF.name())
            || _ref:=SRZF.ref()
            ?}
         ?};
         {? _ref
         || _rok:=#_tmp[4];
            _okres:=#_tmp[3];
            {? SRSW.find_key(_ref,_rok,_okres)
            || SRSW.AMOP:=#(gsub(_tmp[5],',','.'));
               SRSW.AMOF:=#(gsub(_tmp[6],',','.'));
               SRSW.UMOP:=#(gsub(_tmp[7],',','.'));
               SRSW.NETP:=SRSW.WARP-SRSW.UMOP;
               SRSW.UMOF:=#(gsub(_tmp[8],',','.'));
               SRSW.NETF:=SRSW.WARF-SRSW.UMOF;
               SRSW.put()
            ?}
         ?};
         obj_del(_tmp)
      ?}
   !};
   fclose(_f)
?};
SRSW.cntx_pop()


\es_ppst_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Uzupełnienie podstawowych parametrów środków trwałych
::----------------------------------------------------------------------------------------------------------------------
progress(,'Uzupełnianie podstawowych parametrów środków trwałych...'@,'Trwa import danych'@,1);

exec('czytaj','#stalesys',,FINFO);
FINFO.DOKL:=2;
FINFO.W:=3500;
FINFO.NRI_T:='exec(\'get_new_nr\',\'fst\')';
FINFO.NRI_N:='exec(\'get_new_nr\',\'fst\')';
FINFO.NRI_T_S:='exec(\'get_new_nr\',\'fst\')';
FINFO.NRI_N_S:='exec(\'get_new_nr\',\'fst\')';
FINFO.LIMIT_EU:=20000;
FINFO.TOR_D:='N';
FINFO.SRST_MET:=exec('find_srdt','transfer','MX');
FINFO.SRXI_LT:=exec('find_srdt','transfer','LT');
FINFO.SRXI_MT:=exec('find_srdt','transfer','MT');
exec('zapisz','#stalesys',1,FINFO,'DOKL');
exec('zapisz','#stalesys',1,FINFO,'W');
exec('zapisz','#stalesys',1,FINFO,'NRI_T');
exec('zapisz','#stalesys',1,FINFO,'NRI_N');
exec('zapisz','#stalesys',1,FINFO,'NRI_T_S');
exec('zapisz','#stalesys',1,FINFO,'NRI_N_S');
exec('zapisz','#stalesys',1,FINFO,'LIMIT_EU');
exec('zapisz','#stalesys',1,FINFO,'TOR_D');
exec('zapisz','#stalesys',1,FINFO,'SRST_MET');
exec('zapisz','#stalesys',1,FINFO,'SRXI_LT');
exec('zapisz','#stalesys',1,FINFO,'SRXI_MT');
exec('zapisz','#stalesys',1,FINFO,'ZAS_MT')


\es_dokp_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dokumentów pozostałych
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_s:='@';
_fn:='dokp_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
||
:: FUN.info('Brak dostępu do pliku %1.'@[_fn]);
   return(0)
?};

progress(,'Import pliku %1 do tabeli tymczasowej...'@[_fn],'Trwa import danych'@,1);

VAR_DEL.delete('__DOKP');

__DOKP:=tab_tmp(3,'ID','INTEGER','ID',
                  'DW','DATE','DW',
                  'T','STRING[2]','T',
                  'ND','STRING[30]','ND',
                  'KST','STRING[1]','KST',
                  'GR','STRING[15]','GR',
                  'MOD_CZAS','TIME','MOD_CZAS',
                  'MOD_DATA','DATE','MOD_DATA',
                  'MOD_KTO','STRING[20]','MOD_KTO',
                  'OPI','STRING[40]','OPI',
                  'SEZ','STRING[1]','SEZ',
                  'SCH_SEZ','STRING[20]','SCH_SEZ',
                  'WKF','REAL','WKF',
                  'WKP','REAL','WKP',
                  'BLOK','STRING[1]','BLOK');

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      {? form(_wiersz)<>''
      || _tmp:=spli_str(_wiersz,_s);
         __DOKP.ID:=#_tmp[1];
         __DOKP.DW:=exec('str2date','transfer',_tmp[2]);
         __DOKP.T:=_tmp[3];
         __DOKP.ND:=_tmp[4];
         __DOKP.KST:=_tmp[5];
         __DOKP.GR:=_tmp[6];
         __DOKP.MOD_CZAS:=exec('str2time','#convert',_tmp[7]);
         __DOKP.MOD_DATA:=exec('str2date','transfer',_tmp[8]);
         __DOKP.MOD_KTO:=_tmp[9];
         __DOKP.OPI:=_tmp[10];
         __DOKP.SEZ:=_tmp[11];
         __DOKP.SCH_SEZ:=_tmp[12];
         __DOKP.WKF:=#(gsub(_tmp[13],',','.'));
         __DOKP.WKP:=#(gsub(_tmp[14],',','.'));
         __DOKP.BLOK:=_tmp[15];
         __DOKP.add()
      ?};
      obj_del(_tmp)
   !};
   fclose(_f)
?}


\es_dokp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import dokumentów pozostałych z tabeli tymczasowej do tabeli SRDO
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 | var_pres('__DOKP')<=0 || return(0) ?};

SRDO.cntx_psh(); SRSR.cntx_psh();
SRDO.prefix(); SRSR.prefix();
__SRSR.prefix();
SRDO.index('RODZAJ');
SRDO.prefix();

{? __DOKP.first()
|| {! |?
      _id:=__DOKP.ID;
      _ref:=null;
      {? __SRSR.find_key(_id)
      || {? SRSR.seek(__SRSR.REF)
         || _ref:=SRSR.ref()
         ?}
      ?};
      {? _ref
      || progress(,'Import dokumentu pozostałego: %1'@[__DOKP.ND],'Trwa import danych'@,1);
:: tylko zmiana grupy lub zmiana znacznika blokady amortyzacji lub zmiana amortyzacji sezonowej
:: jeżeli symbol dla rodzaju zmiany się powtarza to modyfikacja symbolu
         {? __DOKP.SEZ='T' | __DOKP.GR<>'' | __DOKP.BLOK<>''
         || SRDO.cntx_psh();
            SRDO.index('RODZAJ');
            {? __DOKP.SEZ='T'
            || SRDO.prefix('I',__DOKP.ND,);
               {? SRDO.first()
               || _loop:=1;
                  {! |?
                     _tmp:=__DOKP.ND+'('+$_loop+')';
                     SRDO.prefix('I',_tmp,);
                     {? ~SRDO.first() || _loop:=0; __DOKP.ND:=_tmp || _loop+=1 ?};
                     _loop
                  !}
               ?}
            |? __DOKP.GR<>''
            || SRDO.prefix('L',__DOKP.ND,);
               {? SRDO.first()
               || _loop:=1;
                  {! |?
                     _tmp:=__DOKP.ND+'('+$_loop+')';
                     SRDO.prefix('L',_tmp,);
                     {? ~SRDO.first() || _loop:=0; __DOKP.ND:=_tmp || _loop+=1 ?};
                     _loop
                  !}
               ?}
            |? __DOKP.BLOK<>''
            || SRDO.prefix('M',__DOKP.ND,);
               {? SRDO.first()
               || _loop:=1;
                  {! |?
                     _tmp:=__DOKP.ND+'('+$_loop+')';
                     SRDO.prefix('M',_tmp,);
                     {? ~SRDO.first() || _loop:=0; __DOKP.ND:=_tmp || _loop+=1 ?};
                     _loop
                  !}
               ?}
            ?};
            SRDO.cntx_pop();

            SRDO.blank(1);
            SRDO.SRSR:=_ref;
            {? __DOKP.SEZ='T'
            || SRDO.TYP:=exec('find_srdt','transfer','SE')
            |? __DOKP.GR<>''
            || SRDO.TYP:=exec('find_srdt','transfer','MG')
            |? __DOKP.BLOK<>''
            || SRDO.TYP:=exec('find_srdt','transfer','MA')
            ?};
            {? __DOKP.SEZ='T' || SRDO.RODZ:='I'
            |? __DOKP.GR<>'' || SRDO.RODZ:='L'
            |? __DOKP.BLOK<>'' || SRDO.RODZ:='M'
            ?};
            SRDO.SYMBOL:=__DOKP.ND;
            SRDO.DO:=__DOKP.DW;
            SRDO.DW:=__DOKP.DW;
            SRDO.OKRO_F:=exec('find_okro_f','fst',SRDO.DW);
            SRDO.ROK_F:={? SRDO.OKRO_F<>null || SRDO.OKRO_F().ROK || null ?};
            {? SRDO.OKRO_F<>null
            || SRDO.ROK:=SRDO.OKRO_F().RES;
               SRDO.OKRES:=SRDO.OKRO_F().OES
            ?};
:: dokumenty w systemie Merit muszą mieć nowe unikalne nr w obrębie typu i roku
            SRDO.NR:=exec('bl_srdo_nr','fst');

            {? __DOKP.SEZ='T'
            || SRDO.SEZ:='T';
               SEZ.cntx_psh();
               {? form(__DOKP.SCH_SEZ)<>''
               || SEZ.index('KOD');
                  SEZ.prefix(REF.FIRMA,__DOKP.SCH_SEZ,);
                  SRDO.SCH_SEZ:={? SEZ.first() || SEZ.ref() || null ?}
               || SRDO.SCH_SEZ:=null
               ?};
               SEZ.cntx_pop()
            |? __DOKP.GR<>''
            || TAM.cntx_psh();
               TAM.index('KST');
               TAB_KRST.cntx_psh();
               TAB_KRST.index('TAB_KRST');
               TAB_KRST.prefix(__DOKP.KST);
               {? TAB_KRST.first() || _ref_kst:=TAB_KRST.ref() || _ref_kst:=null ?};
               TAB_KRST.cntx_pop();
               {? _ref_kst<>null
               || TAM.prefix(_ref_kst,__DOKP.GR,);
                  SRDO.GR:={? TAM.first() || TAM.ref() || null ?}
               ?};
               TAM.cntx_pop()
            |? __DOKP.BLOK<>''
            || SRDO.MP:=exec('find_ma','transfer','P','ZAP');
               SRDO.MF:=exec('find_ma','transfer','F','ZAB');
               SRST.cntx_psh();
               SRST.index('SROD');
               SRST.prefix(_ref,SRDO.ROK_F,SRDO.OKRO_F);
               {? SRST.first()
               || SRDO.STAP:=SRST.STAP;
                  SRDO.STAF:=SRST.STAF;
                  SRDO.WKP:=SRST.WKP;
                  SRDO.WKF:=SRST.WKF
               ?};
               SRST.cntx_pop()
            ?};
            SRDO.MOD_CZAS:=__DOKP.MOD_CZAS;
            SRDO.MOD_DATA:=__DOKP.MOD_DATA;
            SRDO.MOD_KTO:=__DOKP.MOD_KTO;
            SRDO.add()
         ?}
      ?};
      __DOKP.next()
   !}
?};
SRDO.cntx_pop(); SRSR.cntx_pop()


\r_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.14]
:: OPIS: Formuła importuje wszystkie rubryki, które doszły (w dowolnej poprawce, aktualizacji). Ponieważ import wykoany
::       będzie w jednym miejscu, to ewentualne komunikaty wyświetlone zostaną również wyłącznie raz.
::   WE:
::   WY:
::  ORG: \rubryki_pop/upgrade_1728.fml
::  ORG: \add_rub_graf/upgrade_1802.fml
::  ORG: \rubatr/upgrade_1822.fml
::  ORG: \stawkaDZ/upgrade_1822.fml
::  ORG: \oddelegowania_skl_plac/upgrade_1842.fml
::  ORG: \rubryki_placowe/upgrade_2137_02.fml
::  ORG: \rubryki_placowe/upgrade_2226.fml
::----------------------------------------------------------------------------------------------------------------------
:: Weryfikujemy, czy mamy licencję na PPL, żeby wykluczyć ryzyko importu nowych rubryk na pustą tabelę (błędy).
:: Po stronie Xpertis zakładamy, że parametr 7 jest ustawiony na wartość 'N' przez co pomijamy zadania naprawcze.
{? ~exec('lic','#b_domain','PPL')
|| return(~~)
?};
:: Pomijamy wykonanie dla firmy 000
FIRMA.cntx_psh();
{? REF.WFIRM & REF.FIRMA().SYMBOL='000'
|| FIRMA.cntx_pop();
   return(~~)
?};
FIRMA.cntx_pop();
_all_r:='';
_all_r_tb:=sql('select RN from :_a where RN>=7000',exec('_r_import2','rubryki','g').TAB);
_loop:=_all_r_tb.first();
{!
|? _loop
|! _all_r+=$_all_r_tb.RN+',';
   _loop:=_all_r_tb.next()
!};
{? _all_r<>'' & (_all_r+1)=',' || _all_r:=_all_r-1 ?};
exec('import','rubryki','g',
   '13,443,500,754'
::  ORG: \add_rub_graf/upgrade_1802.fml
   ',120,121,123'
::  ORG: \rubatr/upgrade_1822.fml - część wykonana w X\kali_64/napraw_p.fml
   ',499'
::  ORG: \rubryki_placowe/upgrade_2137.fml
   ',780,784,'+_all_r+
   '',1,1,'nreq_rub_akt,akt_rub_lst'
);

_mk_buf:="obj_new('B','O','W')";
_r:=obj_new('T','N');
_r.T:=_mk_buf();
_r.N:=_mk_buf();

R.cntx_psh();
R.index('RUBKOD');
R.prefix();
{? R.find_key(2)
|| {? R.RK<>'N'
   || R.RK:='N';
      R.put()
   ?}
|| FUN.emsg('Nie znaleziono rubryki opisującej urlop bezpłatny.'@);
   R.cntx_pop();
   return()
?};
{? R.find_key(25)
|| _r.T.B:=R.ref();
   {? R.RK<>'N'
   || R.RK:='N';
      R.put()
   ?}
|| FUN.emsg('Nie znaleziono rubryki opisującej urlop bezpłatny udzielony na wniosek pracodawcy.'@);
   R.cntx_pop();
   return()
?};
{? R.find_key(15)
|| {? R.RK<>'N'
   || R.RK:='N';
      R.put()
   ?}
|| FUN.emsg('Nie znaleziono rubryki opisującej służbę wojskową.'@);
   R.cntx_pop();
   return()
?};
{? R.find_key(3)
|| {? R.RK<>'N'
   || R.RK:='N';
      R.put()
   ?}
|| FUN.emsg('Nie znaleziono rubryki opisującej urlop wychowawczy.'@);
   R.cntx_pop();
   return()
?};
R.cntx_pop();
~~


\napraw_p_akt_24
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.14]
:: OPIS: Funkcja naprawcza dla aktualizacji 12.41_24.
::   WE:
::   WY:
::  OLD: \akt_24/napraw_p.fml
::  ORG: \NWU/upgrade_1728.fml
::       \nwu/upgrade_2042.fml
::       \s_zus/upgrade_2226.fml / \kali_118/napraw_p.fml (xpertis)
::----------------------------------------------------------------------------------------------------------------------
:: Zmiany dotyczące atrybutów przeniesiono do \rubatr.
:: ++++ Aktualizacja związana z Art. 188 ++++

:: usunięcie informacji z KAL_BUFFa o nieobecności 13 (art 188)
{? var_pres('PARTDAY',N)>0
|| exec('clear188KalBuff','transfer')
?};

:: zaktualizowanie pola PARTDAY nieobecności i wniosków urlopowych
:: [Aktualizacja pola N.PARTDAY została przeniesiona do formuły \n.]

:: MIX
_formula:='';
{? var_pres('PARTDAY',NWU)>0
|| _formula+="{? NWU.PARTDAY='' || NWU.PARTDAY:='N'; _put+=1 ?}; "
?};
{? var_pres('PLW',NWU)>0
|| _formula+="{? NWU.PLW='' || NWU.PLW:='N'; _put+=1 ?}; "
?};
::       \nwu/upgrade_2042.fml
_formula+="{? NWU.CREATOR=null() || NWU.CREATOR:=NWU.P; _put+=1 ?}; ";
:: Uzupełnienie pola NWU.NG
_formula+="
   {? NWU.NG=0
   || _cal:=NWU.P().KAL;
      __KAL.NO_ERR:=1;
      __KAL.set_cal({? _cal || _cal || 'standard' ?},NWU.OD~1,1);
      __KAL.NO_ERR:=0;
      NWU.NG:=__KAL.w_hours(NWU.OD,NWU.DO);
      _put+=1
   ?}; ";
{? _formula<>''
|| exec('__KAL','object');
   _formula:="_put:=0; "+_formula+"{? _put || NWU.put() ?}";
   P.cntx_psh();
   P.prefix();
   NWU.cntx_psh();
   NWU.index('DATA');
   NWU.prefix();
   NWU.trig_off('*','*');
   NWU.for_each($_formula,1);
   NWU.trig_on('*','*');
   NWU.cntx_pop();
   P.cntx_pop()
?};

:: aktualizacja rubryk
:: exec('import','rubryki','g','7018'); - wykonane wcześniej
:: bez potwierdzenia przez użytkownika
::exec('import','rubryki','g','13,443,500,754',1); - wykonane wcześniej
:: Aktualizacja pozostalych pozycji slownika
:: ponieważ w Xpertisie zawartość słownika zus ma inne kody dla rekordów wykorzystywanych do rozwiązania stosunku
:: pracy musimy je przed aktualizacją przenazwać (dotyczy akt 12.51_29)
S_ZUS.for_each("
   {? S_ZUS.KOD='K'
   || S_ZUS.KOD:='USPKOD'
   |? S_ZUS.KOD='T'
   || S_ZUS.KOD:='USPPPRAK'
   |? S_ZUS.KOD='U'
   || S_ZUS.KOD:='USPSTR'
   ?}
",1);
exec('s_zus_import','personel',0);
:: Uzupełnienie pola S_ZUS.LINIA (jeżeli istnieje).
{? var_pres('LINIA',S_ZUS)=27
|| S_ZUS.for_each("
      {? S_ZUS.LINIA=''
      || _linia:=S_ZUS.memo_txt(0,1,'OPIS');
         {? +_linia>255
         || _linia:=(252+_linia)+'...'
         ?};
         {? S_ZUS.LINIA<>_linia
         || S_ZUS.LINIA:=_linia;
            S_ZUS.put()
         ?}
      ?}
   ",1)
?};

:: Dodanie wartosci do stalej KST.MIN_MAC
exec('kst_war_add','#stalesys','KST.MIN_MAC','1000.00',date(2016,1,1));
:: Uzupelnienie pola RH.KOR wartoscia 'N' -> przeniesione do \rh_fill/transfer1.fml
1


\napraw_p_akt_32
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Dodanie zwolnienia ze świadczenia pracy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Zmiany dotyczące rubryk przeniesiono do \r_imp.
:: Zmiany dotyczące atrybutów przeniesiono do \rubatr.
{? var_pres('WYM_UZAS',H_UM)>0
|| H_UM.clear();
   H_UM.for_each("{? H_UM.WYM_UZAS='' || H_UM.WYM_UZAS:='N'; H_UM.put(1) ?}",1)
?};
1


\fiks_36
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1703/0062
::       kod - ER/WRT/XP/12.41/1705/0017
::       błędny symbol dokumentu JPK_VAT
::  OLD: \fiks_26/napraw_f.fml
::  OLD: \fiks_28/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','VAT',null,date(2017,1,1));
{? ISTDEF.first()
|| ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref,'DowodSprzedazy');
   {? ISTDEFS.first()
   || ISTDEFS.REGULY:='VAT_PS.SYM_ZEW';
      ISTDEFS.TYPFLD:='STRING[35]';
      ISTDEFS.put()
   ?};
   ISTDEFS.prefix(ISTDEF.ref,'DowodZakupu');
   {? ISTDEFS.first()
   || ISTDEFS.REGULY:='VAT_PS.SYM_ZEW';
      ISTDEFS.TYPFLD:='STRING[35]';
      ISTDEFS.put()
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\fiks_37
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1703/0055
::       Deklaracja VATUE w wersji 4 dla osoby fizycznej wymagane dodatkowe pole NIP
::  OLD: \fiks_25/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_37a','transfer',4,'POD');
exec('fiks_37a','transfer',4,'PODK')


\fiks_37a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: Formula pomocnicza do fiks_37
::  OLD: \fiks_25a/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.index('VER_NR'); VAT_VER.prefix('FKS',_b,_b,_a);
{? VAT_VER.first()
|| ISTDEF.index('DATA'); ISTDEF.prefix('FKS','D',_b,VAT_VER.ref());
   {? ISTDEF.first()
   || ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref());
      {? ISTDEFS.find_key('etd:OsobaFizyczna')
      || _ref:=ISTDEFS.ref();
         ISTDEFS.index('DRZEWO');
         ISTDEFS.prefix(ISTDEFS.ISTDEF,#_ref);
         {? ISTDEFS.first()
         || {! |? {? ISTDEFS.OPIS='etd:PESEL'
                  || ISTDEFS.del
                  |? ISTDEFS.OPIS='etd:NIP'
                  || ISTDEFS.REGULY:='STR.gsub(XINFO.NIP,\'-\',\'\')';
                     ISTDEFS.WYM:='T';
                     ISTDEFS.put();
                     ISTDEFS.next()
                  || ISTDEFS.next()
                  ?}
            !}
         ?}
      ?}
   ?}
?};
1


\dok_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: Uzupełnienia wartości tabeli DOK_REJ
::  OLD: \fiks_23/napraw_f.fml
::  ORG: \dok_rej_zaksr/upgrade_1742.fml
::----------------------------------------------------------------------------------------------------------------------
DOK_REJ.prefix();
DOK_REJ.for_each("_put:=0;
                  {? form(DOK_REJ.CZY_ROZL)='' || DOK_REJ.CZY_ROZL:='N'; _put:=1 ?};
                  {? DOK_REJ.ZAK_SR='' || DOK_REJ.ZAK_SR:='N'; _put:=1 ?};
                  {? DOK_REJ.JPK_EGTU='' || DOK_REJ.JPK_EGTU:='T'; _put:=1 ?};
                  {? DOK_REJ.JPK_EPRO='' || DOK_REJ.JPK_EPRO:='T'; _put:=1 ?};
                  {? _put || DOK_REJ.put() ?}
                 ",1);
1


\fiks_39
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: kod - PR/WRT/XP/12.41/1703/0043
::       Agregacja pozycji VAT na potrzeby JPK_VAT
::  OLD: \fiks_24/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','VAT',null,date(2017,1,1));
{? ISTDEF.first()
|| ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref,'R',);
   {? ISTDEFS.first()
   || {!
      |? {? ISTDEFS.REGULY='$VAT_PS.ref()+$VAT_PS.crc()'
         || ISTDEFS.REGULY:='VAT_PS.get();$VAT_PS.ref()+$VAT_PS.crc()';
            ISTDEFS.put()
         ?};
         ISTDEFS.next()
      !}
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\fiks_40
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.41]
:: OPIS: kod - ER/WRT/XP/12.41/1704/0010
::       Błąd w strukturze deklaracji CIT_8
::  OLD: \fiks_27/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.index('VER_NR'); VAT_VER.prefix('FKS','CIT8','CIT8',24);
{? VAT_VER.first()
|| ISTDEF.index('DATA'); ISTDEF.prefix('FKS','D','CIT8',VAT_VER.ref());
   {? ISTDEF.first()
   || ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref());
      {? ISTDEFS.find_key('P_66',)
      || {? ISTDEFS.seek(ISTDEFS.TREE,) & ISTDEFS.OPIS='grupa'
         || ISTDEFS.WYM:='N';
            ISTDEFS.HIDDEN:='T';
            ISTDEFS.put()
         ?}
      ?}
   ?}
?}


\fiks_42
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.51]
:: OPIS: ER/WRT/XP/12.51/1802/0038
::       e-deklaracja CIT 8 (25)
::  OLD: \fiks_30/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_42a','transfer',99,'_r:=P99; &P98; &P99; _r');
1


\fiks_42a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.51]
:: OPIS: Formula pomocnicza do fiks_30
::   WE: _a - nr pozycji deklaracji
::       _b - tresc formuly
::  OLD: \fiks_30a/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.index('VER_NR'); VAT_VER.prefix('FKS','CIT8','CIT8',25);
{? VAT_VER.first()
|| ISTDEF.index('DATA'); ISTDEF.prefix('FKS','D','CIT8',VAT_VER.ref());
   {? ISTDEF.first()
   || ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref());
      {? ISTDEFS.find_key('P_'+$_a,)
      || ISTDEFS.REGULY:=_b;
         ISTDEFS.put()
      ?}
   ?}
?}


\fiks_41
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [12.51]
:: OPIS: kod - ER/WRT/XP/12.51/1711/0044
::       Uzupełnianie pola JPK.FIRMA
::  OLD: \fiks_29/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh(); FIRMA.index('SYMBOL'); FIRMA.prefix('001','001');
{? FIRMA.first()
|| JPK.cntx_psh(); JPK.prefix();
   JPK.for_each("{? ~JPK.FIRMA || JPK.FIRMA:=FIRMA.ref(); JPK.put() ?}",1);
   JPK.cntx_pop()
?};
FIRMA.cntx_pop();
1


\fiks_43
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.51]
:: OPIS: ER/WRT/XP/12.51/1803/0038
::       TYTUŁ: Błędny opis na sprawozdaniu finansowym i deklaracji CIT-8/O wersja 25
::  OLD: \fiks_31/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
GR_SIK.cntx_psh(); DEFW.cntx_psh();
GR_SIK.index('SYSSKROT'); GR_SIK.prefix(REF.FIRMA,'FKS');
{? GR_SIK.find_key('CIT-8/O_25') & GR_SIK.AKC<>'T'
|| DEFW.index('GRUPA');
   DEFW.prefix(GR_SIK.ref(),'25');
   {? DEFW.first
   || DEFW.NAZWA:='Dotacje otrzymane z budżetu państwa - wolne od podatku na podst.art.17ust.1pkt47';
      DEFW.put()
   ?}
?};
GR_SIK.cntx_pop(); DEFW.cntx_pop();
1


\fiks_44
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.51]
:: OPIS: ER/WRT/XP/12.51/1804/0003
::       CIT (25) wiersze 103 i 104
::  OLD: \fiks_31/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
exec('fiks_42a','transfer',103,'exec(\'poz_edek_plus\',\'xml\',103)');
exec('fiks_42a','transfer',104,'exec(\'poz_edek_plus\',\'xml\',104)');
1


\es_ktrwp_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [1700]
:: OPIS: Import danych do uzupełnienia tabeli KTRWP
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SRSR')<=0 || return(0) ?};

_symbol:=REF.FIRMA().SYMBOL;
_s:='@';

progress(,'Import podziałów controllingowych dla środków trwałych...'@,'Trwa import danych'@,1);
KTRWP.cntx_psh();
__SRSR.prefix();
SRSR.prefix();
SRDO.prefix();

{? var_pres('__DOKU')>0 & __DOKU.first()
|| _idx:=__DOKU.ndx_tmp(,,'REFSQL',,);
   __DOKU.index(_idx);
   _doku:=1
|| _doku:=0
?};

_TKTRWP:=KTRWP.names();
{? _TKTRWP.first()
|| {! |?
      {? _TKTRWP.NAME+2<>'__'
      || KTRWP.use(_TKTRWP.NAME);
         _fn:=_TKTRWP.NAME+'_'+_symbol+'.tra';
         {? fexists(_fn,1) & exec('es_size_file','transfer',_fn)>0
         || _f:=fopen(_fn,'Ur',1);
            {? _f
            || {! |? (_wiersz:=fread(_f))<>'\n' |!
                  {? form(_wiersz)<>''
                  || _tmp:=spli_str(_wiersz,_s);
                     {? KTRWP.seek(_tmp[1],KTRWP.name())
                     || {? __SRSR.find_key(#_tmp[2]) & SRSR.seek(__SRSR.REF)
                        || KTRWP.SROD_ID:=SRSR.uidref();
                           {? _doku & _tmp[3]<>''
                           || {? __DOKU.find_key(_tmp[3]) & SRDO.seek(__DOKU.REF) || KTRWP.SRDO:=SRDO.ref() ?}
                           ?};
                           KTRWP.put()
                        ?}
                     ?};
                     obj_del(_tmp)
                  ?}
               !}
            ?}
         ?}
      ?};
      _TKTRWP.next()
   !}
?};
KTRWP.cntx_pop()


\formula_g
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.14]
:: OPIS: Zmiana formuł kontrolnych rejestrów księgowych
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('TabON');
TabON:=tab_tmp(2,
   'O','STRING[255]',,
   'N','STRING[255]',
);
_add:="TabON.O:=_a; TabON.N:=_b; TabON.add()";
_add($"'oblicz_f','auto'",$"'oblicz_f','dok_fks'");
_add($"'pozf_vat','spr_dok'",$"'pozf_vat','%fks_spr_dok'");
_add($"'kon_kon','spr_dok'",$"'kon_kon','%fks_spr_dok'");
_add($"'kon_pocz','spr_dok'",$"'kon_pocz','%fks_spr_dok'");
_add($"'kr_kon','spr_dok'",$"'kr_kon','%fks_spr_dok'");
_add($"'kr_pocz','spr_dok'",$"'kr_pocz','%fks_spr_dok'");
_add($"'kr_poz','spr_dok'",$"'kr_poz','%fks_spr_dok'");
_add($"'vat_kon','spr_dok'",$"'vat_kon','%fks_spr_dok'");
_add($"'brt_pocz','spr_dok'",$"'brt_pocz','%fks_spr_dok'");
_add($"'vat_pocz','spr_dok'",$"'vat_pocz','%fks_spr_dok'");
_add($"'vat_poz','spr_dok'",$"'vat_poz','%fks_spr_dok'");
_add($"'kon_poz','spr_dok'",$"'kon_poz','%fks_spr_dok'");
_add($"'spr_stvat','spr_dok'",$"'spr_stvat','%fks_spr_dok'");
_add($"'jpk_upr','spr_dok'",$"'jpk_upr','dok_fks1'");
_add($"'jpk_proc_ee','spr_dok'",$"'jpk_proc_ee','dok_fks1'");
FORMULA.cntx_psh();
FORMULA.index('FORMULA4');
FORMULA.prefix('G');
{? FORMULA.first()
|| FUN.prg_start(FORMULA.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]);
   {!
   |? {? TabON.first()
      || {!
         |? FORMULA.FORMULA:=STR.gsub(FORMULA.FORMULA,TabON.O,TabON.N);
            TabON.next()
         !}
      ?};
      FORMULA.put();
      FUN.prg_next();
      FORMULA.next()
   !};
   FUN.prg_stop()
?};
FORMULA.cntx_pop();
VAR_DEL.delete('TabON');
1


\userHTML
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.14]
:: OPIS: Zmiana kodu usera html
::----------------------------------------------------------------------------------------------------------------------
USERS.index('USR_KKOD');
{? USERS.find_key('html',)
|| USERS.KOD:='html1241';
   USERS.put(1)
?};
~~


\dek_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.14]
:: OPIS: Zmiana formuł w schematach VAT
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('TabON');
TabON:=tab_tmp(2,
   'O','STRING[255]',,
   'N','STRING[255]',
);
_add:="TabON.O:=_a; TabON.N:=_b; TabON.add()";
_add($"'p_701','vat_auto'",$"'p_701','%fks_vat'");
_add($"'wdt','vat_auto'",$"'wdt','%fks_vat'");
_add($"'wdt2','vat_auto'",$"'wdt2','%fks_vat'");
_add($"'wnt','vat_auto'",$"'wnt','%fks_vat'");
_add($"'wnt2','vat_auto'",$"'wnt2','%fks_vat'");
DEK.prefix();
AV.prefix();
DEK.for_each("
   {? TabON.first()
   || {!
      |? DEK.KONTO:=STR.gsub(DEK.KONTO,TabON.O,TabON.N);
         TabON.next()
      !}
   ?};
   DEK.put();
   _ok:=exec('chk_exec','#file',DEK.KONTO);
   {? ~_ok.OK & AV.seek(DEK.AV)
   || AV.A:='N';
      AV.ZAA:='';
      AV.DAKC:=date(0,0,0);
      AV.put()
   ?};
   &_ok
",1);
VAR_DEL.delete('TabON');
1


\warlog_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.14]
:: OPIS: Zmiana formuł w zmiennych dla formuł schematów dziedzinowych
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('TabON');
TabON:=tab_tmp(2,
   'O','STRING[255]',,
   'N','STRING[255]',
);
_add:="TabON.O:=_a; TabON.N:=_b; TabON.add()";
_add($"'kontotxt','ksg'",$"'kontotxt','%fks_dekr_dziedz'");
_add($"'fak_war','ksg_form'",$"'fak_war','%fks_dekr_dziedz'");
_add($"'fak_zal','ksg_form'",$"'fak_zal','%fks_dekr_dziedz'");
_add($"'fap_dk','ksg_form'",$"'fap_dk','%fks_dekr_dziedz'");
_add($"'kurs','ksg_form'",$"'kurs','%fks_dekr_dziedz'");
_add($"'kurs_dekret','ksg_form'",$"'kurs_dekret','%fks_dekr_dziedz'");
_add($"'stvat','ksg_form'",$"'stvat','%fks_dekr_dziedz'");
_add($"'waluta','ksg_form'",$"'waluta','%fks_dekr_dziedz'");
WARLOG.prefix();
WARLOG.for_each("
   {? TabON.first()
   || {!
      |? WARLOG.FO:=STR.gsub(WARLOG.FO,TabON.O,TabON.N);
         TabON.next()
      !}
   ?};
   WARLOG.put()
");
VAR_DEL.delete('TabON');
1


\trn_rs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.14]
:: OPIS: Transfer słowników uzytkownika o wzorcu 'fiks'
::----------------------------------------------------------------------------------------------------------------------
SLU.cntx_psh(); SLU.prefix();
SLU.for_each("{? SLU.WZ='fiks' || SLU.WZ:='prosty'; SLU.put() ?}");
SLU.cntx_pop();
1


\udt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.14]
:: OPIS: Uzupełnienie nowych pól w tabeli UDT
::----------------------------------------------------------------------------------------------------------------------
UDT.prefix();
{? UDT.first()
|| POM.TAB:='UDT';
   POM.TYPDOK:='UDT';
   POM.NRT:=0;
   _ok:=1;
   NRDOK.cntx_psh();
   NRDOK.index('NRDOK');
   NRDOK.prefix(POM.TYPDOK,'');
   {? ~NRDOK.first()
   || exec('add_grnr','numery','UDT')
   ?};
   {? NRDOK.first()
   || __Lp:=0;
      UDT.for_each("
         {? UDT.NR=0
         || _sym:=UDT.SYM;
            UDT.NR:=exec('numer_new','numery',,,0);
            exec('znak','numery','UDT');
            {? _sym<>''
            || UDT.SYM:=_sym
            ?}
         ?};
         {? UDT.ID_KSG=0
         || UDT.ID_KSG:=(__Lp+=1)
         ?};
         {? UDT.STATUSOP=''
         || UDT.STATUSOP:={? UDT.ZAK='N'
                          || 'Aktywna'
                          |? UDT.ZAK='X'
                          || 'Anulowana'
                          |? UDT.ZAK='T'
                          || 'Zakończona'
                          || ''
                          ?}
         ?};
         UDT.put()
      ",1)
   || _ok:=0
   ?};
   NRDOK.cntx_pop();
   _ok
|| 1
?}


\ktrwn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.14]
:: OPIS: Uzupełnienie KTRWN.FIRMA
::----------------------------------------------------------------------------------------------------------------------
KTRWN.prefix();
KTRWN.for_each("
   {? KTRWN.FIRMA=null
   || KTRWN.FIRMA:=ROK_F.FIRMA;
      KTRWN.put(1)
   ?}
",1);
1


\parwyd_uzup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Uzupełnienie parametrów urządzeń użytkownika admin
::----------------------------------------------------------------------------------------------------------------------
USERS.cntx_psh();
PARWYD.cntx_psh();
USERS.index('USR_KKOD');
USERS.prefix('szef');
{? USERS.first() || _szef:=USERS.ref() || _szef:=null ?};
USERS.prefix('admin');
{? USERS.first() || _admin:=USERS.ref() || _admin:=null ?};
{? _szef & _admin
|| PARWYD.index('USER');
   PARWYD.prefix(_szef);
   {? PARWYD.first()
   || _p0:=1;
      _p1:=PARWYD.FILE_FRM;
      _p2:=PARWYD.FILEFIND;
      _p3:=PARWYD.FONTKRES;
      _p4:=PARWYD.DRIVER;
      _p5:=PARWYD.TYPDR;
      _p6:=PARWYD.TYPKOL;
      _p7:=PARWYD.URZ_LAB
   || _p0:=0
   ?};
   {? _p0=1
   || PARWYD.prefix(_admin);
      {? ~PARWYD.first()
      || _add:=1;
         PARWYD.blank();
         PARWYD.USER:=_admin
      || _add:=0
      ?};
      PARWYD.FILE_FRM:=_p1;
      PARWYD.FILEFIND:=_p2;
      PARWYD.FONTKRES:=_p3;
      PARWYD.DRIVER:=_p4;
      PARWYD.TYPDR:=_p5;
      PARWYD.TYPKOL:=_p6;
      PARWYD.URZ_LAB:=_p7;
      {? _add || PARWYD.add() || PARWYD.put() ?}
   ?}
?};
PARWYD.cntx_pop();
USERS.cntx_pop()


\srzd_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Formuła odświeża wartość wykorzystanej kwoty dofinansowania w źródle finansowania
::   WE: _a - wskazanie na źródło finansowania do odświeżenia
::----------------------------------------------------------------------------------------------------------------------
{? _=0 | type_of(_a)<>type_of(null) || return ?};
SRZD.cntx_psh(); SRZF.cntx_psh();
SRZD.prefix();
{? SRZD.seek(_a,SRZD.name())
|| _kwota:=0;
   SRZF.index('SRZD');
   SRZF.prefix(SRZD.ref());
   {? SRZF.first()
   || {! |?
         _kwota+=SRZF.WARP_P;
         SRZF.next()
      !}
   ?};
   SRZD.WKD:=_kwota;
   SRZD.put()
?};
SRZD.cntx_pop(); SRZF.cntx_pop()


\srzd_rfresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Odświeżenie wykorzystanej kwoty źródła dofinansowania
::----------------------------------------------------------------------------------------------------------------------
SRZD.cntx_psh();
SRZD.index('SRZD');
SRZD.prefix();
SRZD.for_each("exec('srzd_update','transfer',SRZD.ref())",1);
SRZD.cntx_pop()


\es_xi_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Formuła importuje nagłówki inwentaryzacji
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_fn:='xinwent_'+_symbol+'.tra';
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0
|| return(0)
?};

progress(,'Import inwentaryzacji...'@,'Trwa import danych'@,1);

SRXI.cntx_psh();
SRXI.index('NUMER');
SRXI.prefix();
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      _tab:=spli_str(_wiersz,'@');
      {? obj_len(_tab)>1 & ~SRXI.find_key(#_tab[1])
      || SRXI.blank();
         SRXI.NR:=#_tab[1];
         SRXI.DW:=exec('str2date','transfer',_tab[2]);
         SRXI.DZ:=exec('str2date','transfer',_tab[3]);
         SRXI.OKRO_F:=exec('find_okro_f','fst',SRXI.DW);
         {? SRXI.OKRO_F<>null
         || SRXI.ROK_F:=SRXI.OKRO_F().ROK
         ?};
         SRXI.DS:=exec('str2date','transfer',_tab[2]);
         SRXI.R:=_tab[5];
         SRXI.ODD:=exec('find_odd','transfer',_tab[7]);
         SRXI.STATUS:=_tab[8];
         SRXI.OPIS:='';
         SRXI.add()
      ?};
      obj_del(_tab)
   !};
   fclose(_f)
?};
SRXI.cntx_pop()


\es_ina_loop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Pętla po plikach arkuszy wg maski inwentaryzacji
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
SRXI.cntx_psh();
SRXI.prefix();
{? SRXI.first()
|| {! |?
      _plik:='ina'+(('00000'+$SRXI.NR)+5)+'_'+_symbol+'.tra';
      exec('es_ina_import','transfer',_plik);
      SRXI.next()
   !}
?};
SRXI.cntx_pop()


\es_ina_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Formuła importuje nagłówki arkuszy inwentaryzacyjnych
::   WE: _a - nazwa pliku
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_fn:=_a;
{? ~fexists(_fn,1)  | exec('es_size_file','transfer',_fn)=0 || return(0) ?};

progress(,'Import arkuszy inwentaryzacji...'@,'Trwa import danych'@,1);

SRXA.cntx_psh();
SRXA.index('SRXI');
SRXA.prefix();
_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      _tab:=spli_str(_wiersz,'@');
      {? obj_len(_tab)>1 & ~SRXA.find_key(SRXI.ref(),#_tab[1])
      || SRXA.blank();
         SRXA.NR:=#_tab[1];
         {? _tab[3]<>''
         || UD_TYP.index('SYMBOL');
            UD_TYP.prefix('PODZORG','PODZORG');
            {? UD_TYP.first()
            || UD_SKL.index('SYMBOL');
               UD_SKL.prefix(UD_TYP.ref(),_tab[3],_tab[3]);
               {? UD_SKL.first() || SRXA.JORG:=UD_SKL.ref() ?}
            ?}
         ?};
         {? _tab[2]<>'' || SRXA.ODD:=exec('find_odd','transfer',_tab[2]) ?};
         {? SRXA.ODD<>null & _tab[4]<>'' & _tab[5]<>''
         || SIED.index('UNIK');
            SIED.prefix(REF.FIRMA,SRXA.ODD,_tab[4]);
            {? SIED.first()
            || POMI.index('UNIK');
               POMI.prefix(REF.FIRMA,SRXA.ODD,SIED.ref(),_tab[5]);
               SRXA.POM:={? POMI.first() || POMI.ref() || null ?}
            ?}
         ?};
         SRXA.SRXI:=SRXI.ref();
         SRXA.STATUS:={? _tab[7]='A' || 'N' |? _tab[7]='Z' || 'T' || 'N' ?};
         SRXA.add()
      ?};
      obj_del(_tab)
   !};
   fclose(_f)
?};
SRXA.cntx_pop()


\es_std_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Import pozycji arkuszy spisowych
::   WE: _a - Nazwa pliku
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_fn:=_a;
{? ~fexists(_fn,1)  | exec('es_size_file','transfer',_fn)=0 || return(0) ?};

progress(,'Import pozycji arkuszy inwentaryzacji nr %1...'@[$SRXI.NR],'Trwa import danych'@,1);

VAR_DEL.delete('__STD');
__STD:=tab_tmp(2,'NR','INTEGER','INW_NR',
                 'ID','INTEGER','ID',
                 'REF','STRING[16]','REF');

SRXD.cntx_psh();
SRXD.index('SRXINRI');
SRXD.prefix();

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      _tab:=spli_str(_wiersz,'@');
      {? obj_len(_tab)>1 & ~SRXD.find_key(SRXI.ref(),_tab[2])
      || SRXD.blank();
         SRXD.NRI:=_tab[2];
         SRXD.SRXI:=SRXI.ref();
         SRXA.cntx_psh();
         SRXA.index('SRXI');
         SRXA.prefix(SRXI.ref(),#_tab[15]);
         {? SRXA.first() || SRXD.SRXA:=SRXA.ref() ?};
         SRXA.cntx_pop();
         SRXD.GRP:='N';
         SRXD.GR:=_tab[4];
         SRXD.DZ:=exec('str2date','transfer',_tab[5]);
         SRXD.KIND:='T';
         {? _tab[1]<>''
         || UD_TYP.index('SYMBOL');
            UD_TYP.prefix('PODZORG','PODZORG');
            {? UD_TYP.first()
            || UD_SKL.index('SYMBOL');
               UD_SKL.prefix(UD_TYP.ref(),_tab[1],_tab[1]);
               {? UD_SKL.first()
               || SRXD.JORG:=SRXD.JORG_N:=UD_SKL.ref();
                  SKIDXODD.index('UD_SKL');
                  SKIDXODD.prefix(SRXD.JORG);
                  {? SKIDXODD.first() || SRXD.ODD:=SRXD.ODD_N:=SKIDXODD.ODD ?}
               ?}
            ?}
         ?};
         {? _tab[7]<>'' || SRXD.ODD:=exec('find_odd','transfer',_tab[7]) ?};
         SRXD.NF:=_tab[14];
         SRXD.NST:=exec('at','transfer',_tab[3]);
         {? _tab[10]<>'' & _tab[11]<>''
         || OSOBA.index('OSOBA');
            OSOBA.prefix(_tab[10],_tab[11]);
            SRXD.OSOBA:={? OSOBA.first() || OSOBA.ref() || null ?}
         || SRXD.OSOBA:=null
         ?};
         {? SRXD.ODD<>null & _tab[8]<>'' & _tab[9]<>''
         || SIED.index('UNIK');
            SIED.prefix(REF.FIRMA,SRXD.ODD,_tab[8]);
            {? SIED.first()
            || POMI.index('UNIK');
               POMI.prefix(REF.FIRMA,SRXD.ODD,SIED.ref(),_tab[9]);
               SRXD.POM:={? POMI.first() || POMI.ref() || null ?}
            ?}
         ?};
         SRXD.DOK_L:=_tab[18];
         SRXD.DOK_W:=_tab[17];
         SRXD.JORG_M:=_tab[25];
         SRXD.OSOBA_M:=_tab[27];
         SRXD.POM_M:=_tab[26];
         SRXD.WARP:=#(gsub(_tab[6],',','.'));
         SRXD.WARF:=#(gsub(_tab[24],',','.'));
         {? _tab[12]='Z'
         || {? SRXD.JORG_M='T' | SRXD.ODD_M='T' | SRXD.OSOBA_M='T' | SRXD.POM_M='T'
            || SRXD.STATUS:='P'
            || SRXD.STATUS:='T'
            ?}
         |? _tab[12]='N' || SRXD.STATUS:='Z'
         |? _tab[12]='D' || SRXD.STATUS:='D'
         |? _tab[12]='W' || SRXD.STATUS:='N'
         || SRXD.STATUS:='N'
         ?};
         {? SRXD.add()
         || {? ~__STD.find_key(SRXI.NR,#_tab[28])
            || __STD.NR:=SRXI.NR;
               __STD.ID:=#_tab[28];
               __STD.REF:=$SRXD.ref();
               __STD.add()
            || __STD.REF:=$SRXD.ref();
               __STD.put()
            ?};
            {? _tab[16]<>''
            || SRXD.memo_set(_tab[16],'UWAGI');
               SRXD.memo_put(,'UWAGI')
            ?}
         ?}
      ?};
      obj_del(_tab)
   !};
   fclose(_f)
?};
SRXD.cntx_pop()


\es_std_loop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Pętla po plikach arkuszy wg maski inwentaryzacji
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
SRXI.cntx_psh();
SRXI.prefix();
{? SRXI.first()
|| {! |?
      _plik:='stn'+(('00000'+$SRXI.NR)+5)+'_'+_symbol+'.tra';
      exec('es_std_import','transfer',_plik);
      _plik:='ins'+(('00000'+$SRXI.NR)+5)+'_'+_symbol+'.tra';
      exec('es_inw_import','transfer',_plik);
      _plik:='ste'+(('00000'+$SRXI.NR)+5)+'_'+_symbol+'.tra';
      exec('es_ste_import','transfer',_plik);
      SRXI.next()
   !}
?};
SRXI.cntx_pop()


\es_inw_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Import pozycji arkuszy z danymi z natury
::   WE: _a - Nazwa pliku
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_fn:=_a;
{? ~fexists(_fn,1)  | exec('es_size_file','transfer',_fn)=0 || return(0) ?};

progress(,'Import pozycji arkuszy inwentaryzacji nr %1...'@[$SRXI.NR],'Trwa import danych'@,1);

SRXD.cntx_psh();
SRXD.index('SRXINRI');
SRXD.prefix();

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      _tab:=spli_str(_wiersz,'@');
      {? obj_len(_tab)>1 & SRXD.find_key(SRXI.ref(),_tab[3])
      ||
         {? _tab[1]<>''
         || UD_TYP.index('SYMBOL');
            UD_TYP.prefix('PODZORG','PODZORG');
            {? UD_TYP.first()
            || UD_SKL.index('SYMBOL');
               UD_SKL.prefix(UD_TYP.ref(),_tab[1],_tab[1]);
               {? UD_SKL.first()
               || SRXD.JORG_N:=UD_SKL.ref();
                  SKIDXODD.index('UD_SKL');
                  SKIDXODD.prefix(SRXD.JORG_N);
                  {? SKIDXODD.first() || SRXD.ODD_N:=SKIDXODD.ODD ?}
               ?}
            ?}
         ?};
         {? _tab[9]<>'' || SRXD.ODD:=exec('find_odd','transfer',_tab[9]) ?};
         {? _tab[12]<>'' & _tab[13]<>''
         || OSOBA.index('OSOBA');
            OSOBA.prefix(_tab[12],_tab[13]);
            SRXD.OSOBA_N:={? OSOBA.first() || OSOBA.ref() || null ?}
         || SRXD.OSOBA_N:=null
         ?};
         {? SRXD.ODD<>null & _tab[10]<>'' & _tab[11]<>''
         || SIED.index('UNIK');
            SIED.prefix(REF.FIRMA,SRXD.ODD_N,_tab[10]);
            {? SIED.first()
            || POMI.index('UNIK');
               POMI.prefix(REF.FIRMA,SRXD.ODD_N,SIED.ref(),_tab[11]);
               SRXD.POM_N:={? POMI.first() || POMI.ref() || null ?}
            ?}
         ?};
         SRXD.put()
      ?};
      obj_del(_tab)
   !};
   fclose(_f)
?};
SRXD.cntx_pop()


\es_uz_dokinw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Formuła uzupełnia powiązania dokumentów właściwości i wartościowych z inwentaryzacjami
::----------------------------------------------------------------------------------------------------------------------
SRDO.cntx_psh();
SRDO.prefix();
SRXI.index('NUMER');
SRXI.prefix();
{? var_pres('__ZMIA')>0
|| progress(,'Aktualizacja danych dokumentów poinwentaryzacyjnych...'@,'Trwa import danych'@,1);
   __ZMIA.prefix();
   __ZMIA.for_each("{? __ZMIA.INW<>0
                    || {? SRDO.seek(__ZMIA.REF,SRDO.name())
                       || {? SRXI.find_key(__ZMIA.INW)
                          || SRDO.SRXI:=SRXI.ref();
                             SRDO.put()
                          ?}
                       ?}
                  ?}")
?};
{? var_pres('__DOKU')>0
|| progress(,'Aktualizacja danych dokumentów poinwentaryzacyjnych...'@,'Trwa import danych'@,1);
   __DOKU.prefix();
   __DOKU.for_each("{? __DOKU.INW<>0
                    || {? SRDO.seek(__DOKU.REF,SRDO.name())
                       || {? SRXI.find_key(__DOKU.INW)
                          || SRDO.SRXI:=SRXI.ref();
                             SRDO.put()
                          ?}
                       ?}
                    ?}")
?};
SRDO.cntx_pop()


\es_ste_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Import elementów składowych do inwentaryzacji
::   WE: _a - nazwa importowanego pliku
::----------------------------------------------------------------------------------------------------------------------
_symbol:=REF.FIRMA().SYMBOL;
_fn:=_a;
{? ~fexists(_fn,1) | exec('es_size_file','transfer',_fn)=0 || return(0) ?};

progress(,'Import pozycji arkuszy elementów inwentaryzacji nr %1...'@[$SRXI.NR],'Trwa import danych'@,1);

SRXD.cntx_psh();
SRXD.index('SRXINRI');
SRXD.prefix();
__STD.prefix();

_f:=fopen(_fn,'Ur',1);
{? _f
|| {! |? (_wiersz:=fread(_f))<>'\n' |!
      _tab:=spli_str(_wiersz,'@');
      {? obj_len(_tab)>1 & ~SRXD.find_key(SRXI.ref(),_tab[2])
      || SRXD.cntx_psh();
         SRXD.prefix();
         {? __STD.find_key(SRXI.NR,#_tab[1]) & __STD.REF<>'' & SRXD.seek(__STD.REF,SRXD.name())
         || _ref:=SRXD.ref();
            _srxa:=SRXD.SRXA;
            _gr:=SRXD.GR;
            _odd:=SRXD.ODD;
            _odd_n:=SRXD.ODD_N;
            _odd_m:=SRXD.ODD_M;
            _jorg:=SRXD.JORG;
            _jorg_n:=SRXD.JORG_N;
            _jorg_m:=SRXD.JORG_M;
            _pom:=SRXD.POM;
            _pom_n:=SRXD.POM_N;
            _pom_m:=SRXD.POM_M;
            _oso:=SRXD.OSOBA;
            _oso_n:=SRXD.OSOBA_N;
            _oso_m:=SRXD.OSOBA_M
         || _ref:=null
         ?};
         SRXD.cntx_pop();

         {? _ref
         || SRXD.blank();
            SRXD.NRI:=_tab[2];
            SRXD.TREE:=_ref;
            SRXD.SRXI:=SRXI.ref();
            SRXD.SRXA:=_srxa;
            SRXD.GRP:='E';
            SRXD.GR:=_gr;
            SRXD.DZ:=exec('str2date','transfer',_tab[5]);
            SRXD.KIND:='N';
            SRXD.JORG:=_jorg;
            SRXD.JORG_N:=_jorg_n;
            SRXD.JORG_M:=_jorg_m;
            SRXD.ODD:=_odd;
            SRXD.ODD_N:=_odd_n;
            SRXD.ODD_M:=_odd_m;
            SRXD.OSOBA:=_oso;
            SRXD.OSOBA_N:=_oso_n;
            SRXD.OSOBA_M:=_oso_m;
            SRXD.POM:=_pom;
            SRXD.POM_N:=_pom_n;
            SRXD.POM_M:=_pom_m;
            SRXD.NF:=_tab[4];
            SRXD.NST:=_tab[3];
            SRXD.WARP:=#(gsub(_tab[6],',','.'));
            SRXD.WARF:=#(gsub(_tab[7],',','.'));
            {? _tab[9]='Z'
            || {? SRXD.JORG_M='T' | SRXD.ODD_M='T' | SRXD.OSOBA_M='T' | SRXD.POM_M='T'
               || SRXD.STATUS:='P'
               || SRXD.STATUS:='T'
               ?}
            |? _tab[9]='N' || SRXD.STATUS:='Z'
            |? _tab[9]='D' || SRXD.STATUS:='D'
            |? _tab[9]='W' || SRXD.STATUS:='N'
            || SRXD.STATUS:='N'
            ?};
            SRXD.add()
         ?}
      ?};
      obj_del(_tab)
   !};
   fclose(_f)
?};
SRXD.cntx_pop()


\dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.14]
:: OPIS: Aktualizacja pól tabeli DOK
::----------------------------------------------------------------------------------------------------------------------
_names:=DOK.names();
{? _names.first()
|| _lp:=0;
   _max:=_names.size();
   VAR_DEL.delete('FldTab');
   FldTab:=obj_new(4);
   FldTab[1]:='ZAR';
   FldTab[2]:='ZAA';
   FldTab[3]:='KSIEGOWY';
   FldTab[4]:='SYSTEM';
   {!
   |? echo('Tabela DOK maska: %1 [%2/%3]'@[_names.NAME,$(_lp+=1),$_max]);
      DOK.use(_names.NAME);
      DOK.index('ZAR');
      DOK.prefix();
      {? DOK.find_key('FIKS') |
         DOK.find_key('EMAG') |
         DOK.find_key('KALI') |
         DOK.find_key('ESTRA') |
         DOK.find_key('OBIEGI') |
         DOK.find_key('KASA') |
         DOK.find_key('PRODUKCJA')
      || DOK.for_each("
            _put:=0;
            {! _ii:=1..obj_len(FldTab)
            |! _fld:=FldTab[_ii];
               _val:=($('DOK.'+_fld))();
               _poz:=_val*':';
               {? _poz
               || _sys:=_poz+_val-1;
                  _val:=_poz-_val
               || _sys:=_val;
                  _val:=''
               ?};
               _nsys:={? _sys='FIKS'
                      || 'FKS'
                      |? _sys='ESTRA'
                      || 'FST'
                      |? _sys='OBIEGI'
                      || 'OBG'
                      |? _sys='KALI'
                      || 'PPL'
                      |? _sys='EMAG' | _sys='FAKTURY' | _sys='UMOWY' | _sys='WYPOSAZ'
                      || {? 1+DOK.DOKZRODL='M'
                         || 'LMG'
                         |? 1+DOK.DOKZRODL='P' | 1+DOK.DOKZRODL='K'
                         || 'LSP'
                         |? 1+DOK.DOKZRODL='D'
                         || _new:='LSP';
                            FAKS.cntx_psh();
                            FAKS.use('faktu'+(3+(1-DOK.DOKZRODL)));
                            FAKS.prefix();
                            _ref:=#(4-DOK.DOKZRODL);
                            {? FAKS.seek(_ref,)
                            || {? FAKS.T().ZAK='T'
                               || _new:='LZK'
                               ?}
                            ?};
                            FAKS.cntx_pop();
                            _new
                         || ''
                         ?}
                      |? _sys='KASA'
                      || 'KAS'
                      |? _sys='PRODUKCJA'
                      || 'TTE'
                      || ''
                      ?};
               {? _nsys<>''
               || ($('DOK.'+_fld+':=_a'))(_nsys+{? _poz || ':'+_val || '' ?});
                  _put:=1
               ?}
            !};
            {? _put
            || DOK.put()
            ?}
         ")
      ?};
      _names.next()
   !};
   VAR_DEL.delete('FldTab')
?};
echo();
1


\std_srdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.14]
:: OPIS: Uzupełnianie powiązań między pozycjami arkusza inwentaryzacyjnego a dokumentami poinwentaryzacyjnymi
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__DOKU')>0 & __DOKU.first()
|| progress(,'Aktualizacja danych pozycji arkuszy inwentaryzacyjnych...'@,'Trwa import danych'@,1);
   SRDO.cntx_psh(); SRSR.cntx_psh();
   SRDO.prefix(); SRSR.prefix();
   {! |?
:: czy jest dokument i jest związany z inwentaryzacją?
      {? SRDO.seek(__DOKU.REF,8+__DOKU.REF)
      || _sr_nri:=SRDO.SRSR().NRI;
         {? __DOKU.INW<>0 & __DOKU.ARK<>0 &  _sr_nri<>''
         || SRXI.cntx_psh();
            SRXI.index('NUMER');
            SRXI.prefix();
            {? SRXI.find_key(__DOKU.INW)
            || SRXA.cntx_psh();
               SRXA.index('SRXI');
               SRXA.prefix(SRXI.ref(),__DOKU.ARK);
               {? SRXA.first()
               || SRXD.cntx_psh();
                  SRXD.index('NRI');
                  SRXD.prefix(SRXA.ref(),_sr_nri,);
                  {? SRXD.first()
                  || SRXD.SRDO:=SRDO.ref();
                     SRXD.put()
                  ?};
                  SRXD.cntx_pop()
               ?};
               SRXA.cntx_pop()
            ?};
            SRXI.cntx_pop()
         ?}
      ?};
      __DOKU.next()
   !};
   SRDO.cntx_pop(); SRSR.cntx_pop()
?};

{? var_pres('__ZMIA')>0 & __ZMIA.first()
|| progress(,'Aktualizacja danych pozycji arkuszy inwentaryzacyjnych...'@,'Trwa import danych'@,1);
   SRDO.cntx_psh(); SRSR.cntx_psh();
   SRDO.prefix(); SRSR.prefix();
   {! |?
:: czy jest dokument i jest związany z inwentaryzacją?
      {? SRDO.seek(__ZMIA.REF,8+__ZMIA.REF)
      || _sr_nri:=SRDO.SRSR().NRI;
         {? __ZMIA.INW<>0 & __ZMIA.ARK<>0 &  _sr_nri<>''
         || SRXI.cntx_psh();
            SRXI.index('NUMER');
            SRXI.prefix();
            {? SRXI.find_key(__ZMIA.INW)
            || SRXA.cntx_psh();
               SRXA.index('SRXI');
               SRXA.prefix(SRXI.ref(),__ZMIA.ARK);
               {? SRXA.first()
               || SRXD.cntx_psh();
                  SRXD.index('NRI');
                  SRXD.prefix(SRXA.ref(),_sr_nri,);
                  {? SRXD.first()
                  || SRXD.SRDO:=SRDO.ref();
                     SRXD.put()
                  ?};
                  SRXD.cntx_pop()
               ?};
               SRXA.cntx_pop()
            ?};
            SRXI.cntx_pop()
         ?}
      ?};
      __ZMIA.next()
   !};
   SRDO.cntx_pop(); SRSR.cntx_pop()
?}


\clear188KalBuff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Funkcja czyści z KAL_BUFFa informacje o nieobecnościach 13 - opieka (art. 188)
::----------------------------------------------------------------------------------------------------------------------
exec('__RUB','object');
VAR_DEL.delete('__kod_188');
__kod_188:=0;
{? __RUB.sys_rub(1162).first()
|| __kod_188:=__RUB.sys_rub(1162).RN
?};

_formula:="
   {? KAL_BUFF.NB=$__kod_188
   || KAL_BUFF.NH:='';
      KAL_BUFF.NB:='';
      KAL_BUFF.put()
   ?}
";

{? __kod_188
|| KAL_BUFF.cntx_psh();
   KAL_BUFF.prefix();
   exec('for_each','#table',KAL_BUFF,_formula);
   KAL_BUFF.cntx_pop()
?};
VAR_DEL.delete('__kod_188')


\grupa1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.14]
:: OPIS: Uzupełnienie pola TAM.GR1
::----------------------------------------------------------------------------------------------------------------------
TAM.cntx_psh();
TAM.prefix();
TAM.for_each("{? TAM.GR1='' || TAM.GR1:=1+TAM.GR; TAM.put() ?}",1);
TAM.cntx_pop()


\RODZO
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.42]
:: OPIS: Zamiana RODZO na MGRP
::----------------------------------------------------------------------------------------------------------------------
RODZO.cntx_psh();
MGRP.cntx_psh();
MGRP.index('KOD');
RODZO.for_each("
   _add:=0;
   MGRP.prefix(8+RODZO.KOD,8+RODZO.KOD);
   {? ~MGRP.first()
   || _add:=1;
      MGRP.blank(1);
      MGRP.MGR:=exec('mgr4rodzo','transfer',RODZO.ref());
      MGRP.KOD:=RODZO.KOD;
      MGRP.NAZ:=RODZO.NAZ
   ?};
   MGRP.WYPOS:='T';
   MGRP.M_ATR:=RODZO.M_ATR;
   MGRP.M:=RODZO.M;
   MGRP.DCU:=RODZO.DCU;
   MGRP.TOLER:=RODZO.TOLER;
   MGRP.ZWROT:=RODZO.ZWROT;
   MGRP.CTRLIL:=RODZO.CTRLIL;
   {? _add
   || MGRP.prefix();
      MGRP.add()
   || MGRP.put()
   ?}
",1);
MGRP.cntx_pop();
RODZO.cntx_pop()


\mgrp4rodzo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.42]
:: OPIS: Zwraca rekord MGRP dla podanego rekordu RODZO
::   WE: _a - RODZO.ref
::   WY: MGRP.ref()
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _rodzo:=_a || return(null()) ?};
_result:=null();
MGRP.cntx_psh();
RODZO.cntx_psh();
RODZO.prefix();
{? RODZO.seek(_rodzo)
|| _ndx:=MGRP.ndx_tmp(,,'WYPOS',,,'KOD',,,'KOD',,);
   MGRP.index(_ndx);
   MGRP.prefix('T',8+RODZO.KOD,8+RODZO.KOD);
   {? MGRP.first()
   || _result:=MGRP.ref()
   ?};
   MGRP.ndx_drop(_ndx)
?};
RODZO.cntx_pop();
MGRP.cntx_pop();
_result


\mgr4rodzo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.42]
:: OPIS: Ustala grupę materiałową dla zapisu w RODZO. Jeżeli to możliwe, to na podstawie PAKASORT, w przeciwnym wypadku
::       będzie to grupa 'Wyposażenie'
::   WE: _a - RODZO.ref
::   WY: MGR.ref()
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
MGR.cntx_psh();
PAKASORT.cntx_psh();
MGR.index('KOD');
PAKASOP.cntx_psh();
PAKASOP.index('S1');
PAKASOP.prefix(_a);
{? PAKASOP.first()
|| MGR.prefix('T',PAKASOP.PAKASORT().SYM);
   {? MGR.first()
   || _result:=MGR.ref()
   || MGR.blank();
      MGR.RODZ:='T';
      MGR.KOD:=PAKASOP.PAKASORT().SYM;
      MGR.NAZ:=PAKASOP.PAKASORT().NAZ;
      MGR.add();
      _result:=MGR.ref()
   ?}
|| MGR.prefix('T','WYPOSAŻE');
   {? MGR.first()
   || _result:=MGR.ref()
   || MGR.blank();
      MGR.RODZ:='T';
      MGR.KOD:='WYPOSAŻE';
      MGR.NAZ:='Wyposażenie';
      MGR.add();
      _result:=MGR.ref()
   ?}
?};
PAKASOP.cntx_pop();
PAKASORT.cntx_pop();
MGR.cntx_pop();
_result


\mgr4pakasort
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.42]
:: OPIS: Ustala grupę materiałową dla zapisu w PAKASORT
::   WE: _a - PAKASORT.ref()
::   WY: MGR.ref()
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _pakasort:=_a || return(null()) ?};
_result:=null();
MGR.cntx_psh();
MGR.index('KOD');
PAKASORT.cntx_psh();
PAKASORT.prefix();
{? PAKASORT.seek(_a)
|| MGR.prefix('T',PAKASORT.SYM);
   {? MGR.first()
   || _result:=MGR.ref()
   ?}
?};
PAKASORT.cntx_pop();
MGR.cntx_pop();
_result


\rozmlt2war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.42]
:: OPIS:
::   WE: _a - ODZAMPT.ref
::       _b - [INTEGER] - numer pozycji
::   WY: [STRING] - wartość pozycji
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) || _odzampt:=_a || return(~~) ?};
_wyn:=obj_new(10);
_zwroc:=0;
ODZAMPT.cntx_psh();
ODZAMPT.prefix();
M_ATR.cntx_psh();
M_ATR.prefix();
ROZMLT.cntx_psh();
ROZMLT.index('OW');
{? ODZAMPT.seek(_a)
|| {? M_ATR.seek(ODZAMPT.RODZO().M_ATR)
   || {! _it:=1..10
      |! _tat:=($('M_ATR.SL_'+form(_it,-2,,'99')))();
         {? _tat<>null()
         || ROZMLT.prefix(ODZAMPT.ref(),_tat);
            {? ROZMLT.first()
            || _wyn[_it]:=ROZMLT.WAR;
               _zwroc:=1
            || _wyn[_it]:=''
            ?}
         || _wyn[_it]:=''
         ?}
      !}
   ?}
?};
ROZMLT.cntx_pop();
ODZAMPT.cntx_pop();
M_ATR.cntx_pop();
{? _zwroc
|| _wyn
|| ~~
?}


\str2date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Lokalna wersja formuły str2date dla przyspieszenia importu środków
::   WE: _a - wczytany tekst z datą
::   WY: data
::----------------------------------------------------------------------------------------------------------------------
_rr:=#(4+_a); _a:=5-_a; _mm:=#(2+_a); _a:=3-_a; _dd:=#(2+_a);
{? _rr>0 & _mm>=1 & _mm<=12 & _dd>=1 & _dd<=31 || date(_rr,_mm,_dd) || date(0,0,0) ?}


\fiks_09
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [12.51]
:: OPIS: kod - ER/WRT/XP/12.51/1812/0029
::       JPK_FA - w walucie - gdy brak dokumentów
::  OLD: \fiks_40/napraw_f.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEF.index('DATA');
ISTDEF.prefix('FKS','J','FA',null,date(2016,3,11));
{? ISTDEF.first()
|| ISTDEFS.index('OPIS'); ISTDEFS.prefix(ISTDEF.ref,'P_6');
   {? ISTDEFS.first()
   || ISTDEFS.REGULY:='{? JpkDane & DOK.DOP<>DOK.DTO || STR.gsub($DOK.DOP,\'/\',\'-\') || \'\' ?}';
      ISTDEFS.put()
   ?};
   ISTDEFS.prefix(ISTDEF.ref,'P_23');
   {? ISTDEFS.first()
   || ISTDEFS.REGULY:='{? POLAFAKS.TT=\'T\' | (JpkDane & DOK.RVAT().RVAT().KVAT().SYM=\'_WWspNat\') || \'true\' || \'false\' ?}';
      ISTDEFS.put()
   ?}
?};
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
1


\edimp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.22]
:: OPIS: Transfer definicji intrastat, komunikatów EDI, mechanizmu importu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.cntx_psh();
:: definicje intrastat
ISTDEF.index('LP');
ISTDEF.prefix('EMAG','I');

_prg_start:=_loop:=ISTDEF.first();
{? _prg_start || FUN.prg_start(ISTDEF.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|!
   ISTDEF.cntx_psh();
   ISTDEF.prefix();
   ISTDEF.SYSTEM:='';
   ISTDEF.put();
   ISTDEF.cntx_pop();
   FUN.prg_next();
   _loop:=ISTDEF.first()
!};
{? _prg_start || FUN.prg_stop() ?};
:: komunikaty edi
ISTDEF.index('K');

ISTDEF.prefix('EMAG','E');
_prg_start:=_loop:=ISTDEF.first();
{? _prg_start || FUN.prg_start(ISTDEF.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|!
   ISTDEF.cntx_psh();
   ISTDEF.prefix();
   ISTDEF.SYSTEM:='ZWS';
   ISTDEF.put();
   ISTDEF.cntx_pop();
   FUN.prg_next();
   _loop:=ISTDEF.first()
!};
{? _prg_start || FUN.prg_stop() ?};

ISTDEF.prefix('ZBL','E');
_prg_start:=_loop:=ISTDEF.first();
{? _prg_start || FUN.prg_start(ISTDEF.size(),'FORMUŁA: %1/%2'[form_stack().file,form_stack().name]) ?};
{!
|? _loop
|!
   ISTDEF.cntx_psh();
   ISTDEF.prefix();
   ISTDEF.SYSTEM:='ZWS';
   ISTDEF.TM_STAM:=exec('convert_xp2merit','edi_def',ISTDEF.TM_STAM);
   ISTDEF.put();
   ISTDEF.cntx_pop();
   FUN.prg_next();
   _loop:=ISTDEF.first()
!};
{? _prg_start || FUN.prg_stop() ?};
ISTDEF.cntx_pop();

:: mechanizm importów
:: przypisanie wszystkich definicji do dziedziny ZWS
:: nadmiarowe przypisania są usuwane
EDI_S.cntx_psh();
EDI_S.prefix();
EDI_S.for_each("{? EDI_S.SYSTEM<>'ZWS' || EDI_S.SYSTEM:='ZWS'; {? ~EDI_S.put(1) || EDI_S.del() ?} ?}",1);
EDI_S.cntx_pop()


\users_fz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Aktualizacja uprawnień użytkowników do form współpracy.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? ~FUN.ask(
      'Zaleca się aby funkcja była wykonana po uzupełnieniu danych użytkowników systemu\n'
      'a w szczególności ich statusu dostępu z wykorzystaniem programu jTerm.\n\n'
      'Czy kontynuować działanie?'@
   )
|| return(0)
?};

USERS_FZ.cntx_psh();
USERS_FZ.clear();
:: uzupełnij dane
USERS_FZ.for_each("
   _mod:=0;
   {? USERS_FZ.FIRMA=null
   || USERS_FZ.FIRMA:=exec('ref_firma','#firma');
      _mod+=1
   ?};
   {? USERS_FZ.DOSTEP=''
   || USERS_FZ.DOSTEP:='N';
      _mod+=1
   ?};
   {? _mod
   || USERS_FZ.put()
   ?}
");

_firma:=exec('ref_firma','#firma');
USERS_FZ.index('UNIQUE');
F_ZATR.cntx_psh();
F_ZATR.index('UNIQUE');
USERS.cntx_psh();
USERS.prefix();
_loop:=USERS.first();
_size:=USERS.size();
_cnt:=0;
{!
|? _loop
|! progress((_cnt+=1)*100/_size,'Proszę czekać. Trwa aktualizacja uprawnień do form współpracy...'@,FUN.TYT);
   {? USERS.JTERM='T'
   || USERS_FZ.prefix(_firma,USERS.ref());
      _loop:=F_ZATR.first();
      {!
      |? _loop
      |! {? USERS_FZ.find_key(F_ZATR.ref())
         || {? USERS_FZ.DOSTEP='?'
            || USERS_FZ.DOSTEP:='T';
               USERS_FZ.put()
            ?}
         || USERS_FZ.blank();
            USERS_FZ.FIRMA:=_firma;
            USERS_FZ.USERS:=USERS.ref();
            USERS_FZ.F_ZATR:=F_ZATR.ref();
            USERS_FZ.DOSTEP:='T';
            USERS_FZ.add()
         ?};
         _loop:=F_ZATR.next()
      !}
   ?};
   _loop:=USERS.next()
!};
prgs_clr();
USERS.cntx_pop();
F_ZATR.cntx_pop();
USERS_FZ.cntx_pop();
1


\at
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [19.22]
:: OPIS: Zmiana @ na {a} i odwrotnie
::   WE: _a - tekst do przetworzenia
::  OLD: \at/tran_exp.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a*'@' || gsub(_a,'@','{a}')
|? _a*'{a}' || gsub(_a,'{a}','@')
|| _a
?}


\sort
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Sortowanie tabel
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_run:=obj_new(2);
_run[1]:="
   echo(_c);
   _a.cntx_psh();
   _num:=_a.ndx_num();
   {! _ii:=1.._num
   |! _a.index(_a.ndx_acr(_ii));
      _a.first()
   !};
   _a.cntx_pop()
";
_run[2]:="
   _exe:=_b(_a);
   _MDB:=_a.names();
   _loop:=_MDB.first();
   _size:=$_MDB.size();
   {! _ii:=1
   |? _loop
   |! _a.cntx_psh();
      _a.use(_MDB.NAME);
      echo(_c,'%1/%2'[$_ii,_size]);
      _exe(_a);
      _a.cntx_pop();
      _loop:=_MDB.next()
   !}
";
_exe:="
   _exe:='{|%1|!'[!_a];
   _num:=_a.ndx_num();
   {! _ii:=1.._num
   |! _exe+='index(\\\'%1\\\');first;'[_a.ndx_acr(_ii)]
   !};
   _exe+='~~|}';
   $_exe
";

_num:=tab_num();
{! _ii:=1.._num
|! {? tab_real(_ii)
   || _acr:=tab_acr(_ii);
      {? 3+_acr<>'SYS'
      || _TAB:=($_acr)();
         _txt:='Odtwarzanie indeksów tabeli %1'@[_acr];
         _run[(_TAB.name(1)*'?'<>0)+1](_TAB,_exe,_txt);
         obj_del(_TAB)
      ?}
   ?}
!};
echo()

:Sign Version 2.0 jowisz:1045 2024/01/09 12:46:36 69fb0ffd06924a80106e8af2b137271ec9683498b26384a9523a54f656d68e95992b669086ead51a059b7724f587923338e2677e8a2a259466f39403562c4db5971536e024aa0d539b294ce6c86375f81cebaf14c23bcc4465cd40a6e77297ca903d08e4107197b18d6a4602a0db9d4007a18913ea557c4ce140d95a06b23548
