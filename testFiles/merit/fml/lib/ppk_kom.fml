:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_wnu.fml [12.51]
:: Utworzony: 2019/04/23
:: Autor: jaws
:: Systemy: PPK
::======================================================================================================================
:: Zawartość: Formuły odpowiedzialne za obsługę kartoteki komunikatów.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed modyfikacją (dołączenie/poprawienie) wiersza tabeli PPK_KOM.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
{? PPK_KOM.PPK_UCZ<>null
|| PPK_UCZ.cntx_psh();
   PPK_KOM.FIRMA:=PPK_KOM.PPK_UCZ().FIRMA;
   PPK_KOM.OSOBA:=PPK_KOM.PPK_UCZ().OSOBA;
   PPK_KOM.PPK_UMO:=PPK_KOM.PPK_UCZ().PPK_UMO;
   PPK_UCZ.cntx_pop()
?};
1


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "przed dołącz" tabeli PPK_KOM.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_kom')


\_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po dołącz" tabeli PPK_KOM.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? PPK_KOM.PPK_UCZ=null
:: komunikat dla osoby
|| return()
?};

{? PPK_KOM.PRZ_STAT='N'
:: aktualizuj liczbę oczekujących komunikatów
|| exec('akt_ucz','ppk_kom',PPK_KOM.PPK_UCZ)
?};
~~


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "przed popraw" tabeli PPK_KOM.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_kom')


\_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po popraw" tabeli PPK_KOM.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? PPK_KOM.PPK_UCZ=null
:: komunikat dla osoby
|| return()
?};

{? PPK_KOM.PRZ_STAT<>bfld('PRZ_STAT')
:: aktualizuj liczbę oczekujących komunikatów
|| exec('akt_ucz','ppk_kom',PPK_KOM.PPK_UCZ)
?};
~~


\_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po usuń" tabeli PPK_KOM.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? PPK_KOM.PPK_UCZ=null
:: komunikat dla osoby
|| return()
?};

:: aktualizuj liczbę oczekujących komunikatów
exec('akt_ucz','ppk_kom',bfld('PPK_UCZ'));
~~


\akt_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Aktualizuje informacje redundantne w tabeli PPK_UCZ.
::   WE: _a _PPK_UCZ - wskazanie uczestnika planu
::   WY: wynik operacji put dla tabeli PPK_UCZ lub 1 jeśli aktualizacja nie była wymagana
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;

_ret:=0;
PPK_UCZ.cntx_psh();
PPK_UCZ.prefix();
{? PPK_UCZ.seek(_ref)
|| _prz:=PPK_UCZ.KOM_PRZ;
   PPK_UCZ.KOM_PRZ:=0;
   PPK_KOM.cntx_psh();
   PPK_KOM.index('UCZ_DATA');
   PPK_KOM.prefix(_ref);
   _loop:=PPK_KOM.first();
   {!
   |? _loop
   |! PPK_UCZ.KOM_PRZ+=(PPK_KOM.PRZ_STAT='N');
      _loop:=PPK_KOM.next()
   !};
   PPK_KOM.cntx_pop();
   {? PPK_UCZ.KOM_PRZ<>_prz
   || _ret:=PPK_UCZ.put()
   || _ret:=1
   ?}
?};
PPK_UCZ.cntx_pop();
_ret


\krd_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji pola PPK_KRD tabeli PPK_KOM.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? -menu_txt()='dołącz' | exec('tresc_be','ppk_kom')=0
|| _ref:={? PPK_KOM.TYP='U' || PPK_KOM.PPK_UCZ || PPK_KOM.OSOBA ?};
   PPK_KOM.memo_set(exec('tresc','ppk_kom',PPK_KOM.PPK_KRD,_ref),'TRESC')
?};
1


\tresc_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed wyświetleniem pola TRESC w wierszu tabeli PPK_KOM.
::   WE:
::   WY: 0/1 - zawartość pola widoczna/ukryta
::----------------------------------------------------------------------------------------------------------------------
PPK_KOM.PPK_KRD().EDYCJA='T';
1


\tresc_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed edycją pola TRESC w wierszu tabeli PPK_KOM.
::   WE:
::   WY: 0/1 - zawartość pola widoczna/ukryta
::----------------------------------------------------------------------------------------------------------------------
PPK_KOM.PPK_KRD().EDYCJA='T'


\dod_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Dołącz" okienek tabeli PPK_KOM.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab()=PPK_UCZ
:: dodawanie z listy uczestników
|| {? exec('nie_akt','ppk_ucz')
   || return(0)
   ?}
?};
1


\dod_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po akcji "Dołącz" okienek tabeli PPK_KOM.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('akc_a','ppk_kom');
~~


\usu_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po akcji "Usuń" okienek tabeli PPK_KOM.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('akc_a','ppk_kom',1);
~~


\pop_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po akcji "Popraw" okienek tabeli PPK_KOM.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('pow_stop','ppk_kom');
exec('akc_a','ppk_kom');
~~


\pow_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Powiadom" okienek tabeli PPK_KOM.
::   WE: _a [INTEGER] - wyświetlanie komunikatów: 0/1 - wyłączone/włączone (domyślnie 1)
::   WY: 0/1 - wykonanie zasadniczej akcji (blokada/wykonanie)
::----------------------------------------------------------------------------------------------------------------------
exec('pow_init','ppk_kom');
{? cur_tab(1,1).sel_size()=0
|| {? exec('email','ppk_ucz',PPK_KOM.OSOBA,PPK_KOM.DATA)=''
   || __PPKKOM.EMAIL:='N'
   || __PPKKOM.PRINT:='N'
   ?};
   {? __PPKKOM.edit()
   || {? __PPKKOM.PRALL='T'
      || __PPKKOM.EMAIL:='N';
         __PPKKOM.PRINT:='T'
      ?}
   || exec('pow_stop','ppk_kom');
      return(0)
   ?}
?};
1


\pow_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Akcja "Powiadom" okienek tabeli PPK_KOM.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_email:=0;
{? __PPKKOM.EMAIL='T' & exec('email','ppk_ucz',PPK_KOM.OSOBA,PPK_KOM.DATA)<>''
:: powiadomienie wysyłane pocztą elektroniczną
|| {? PPK_KOM.PRZ_STAT='N' | __PPKKOM.AGAIN='T'
   || __PPKREF.TYP:='E';
      __PPKREF.NUM+=1;
      __PPKREF.REF:=PPK_KOM.ref();
      __PPKREF.add()
   ?};
   _email:=1
?};

{? (~_email & __PPKKOM.PRINT='T') | __PPKKOM.PRALL='T'
:: powiadomienia dostarczane w postaci wydruku
|| {? PPK_KOM.PRZ_STAT='N' | __PPKKOM.AGAIN='T'
   || __PPKREF.TYP:='P';
      __PPKREF.NUM+=1;
      __PPKREF.REF:=PPK_KOM.ref();
      __PPKREF.add()
   ?}
?};

{? cur_tab(1,1).sel_size()=0
|| params_set(params_get());
   exec('powiadom','ppk_kom',1);
   exec('pow_stop','ppk_kom');
   exec('akc_a','ppk_kom')
?};
~~


\pow_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Powiadom" dla wielu wierszy okienek tabeli PPK_KOM.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pow_init','ppk_kom');
{? ~__PPKKOM.edit()
|| exec('pow_stop','ppk_kom');
   return(0)
?};
1


\pow_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po akcji "Przekaż informację" dla wielu wierszy okienek tabeli PPK_KOM.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('powiadom','ppk_kom',0);
exec('pow_stop','ppk_kom');
exec('akc_a','ppk_kom');
~~


\pow_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy struktury potrzebne dla obsługi powiadomień.
::   WE:
::   WY: alias tabeli
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__PPKKOM')=type_of(SYSLOG)
|| return(__PPKKOM)
?};

:: tabelka parametrów
__PPKKOM:=tab_tmp(1,
   'PRALL','STRING[1]','Wymuś drukowanie',
   'EMAIL','STRING[1]','Wyślij e-list',
   'PRINT','STRING[1]','Drukuj powiadomienie',
   'AGAIN','STRING[1]','Powiadom ponownie'
);

:: funkcjonalność pól
_nprall:="cur_tab().PRALL='N'";
__PPKKOM.fld_fml('EMAIL','BEFORE_EDIT',_nprall);
__PPKKOM.fld_fml('EMAIL','BEFORE_DISPLAY',_nprall);
__PPKKOM.fld_fml('PRINT','BEFORE_EDIT',_nprall);
__PPKKOM.fld_fml('PRINT','BEFORE_DISPLAY',_nprall);
__PPKKOM.fld_fml('PRALL','AFTER_EDIT',"win_disp()");

__PPKKOM.PRALL:='N';
__PPKKOM.EMAIL:='T';
__PPKKOM.PRINT:='T';
__PPKKOM.AGAIN:='N';

_wnd:=__PPKKOM.mk_edit('Powiadom',0,'#ppk_kom_pow');
__PPKKOM.win_efld(_wnd,,'PRALL',,,,,,,,,'check-box',,"'T'","'N'");
__PPKKOM.win_efld(_wnd,,'EMAIL',,,,,,,,,'check-box',,"'T'","'N'");
__PPKKOM.win_efld(_wnd,,'PRINT',,,,,,,,,'check-box',,"'T'","'N'");
__PPKKOM.win_efld(_wnd,,'AGAIN',,,,,,,,,'check-box',,"'T'","'N'");
__PPKKOM.win_edit(_wnd);
exec('ok_esc','#window',__PPKKOM,_wnd);

__PPKREF:=tab_tmp(2,
   'TYP','STRING[1]','Typ',
   'NUM','INTEGER','Lp',
   'REF','INTEGER','Ref'
);

__PPKKOM


\pow_stop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Usuwa struktury potrzebne dla obsługi powiadomień.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? PPK_KOM.sel_size()>0
|| return()
?};

{? var_pres('__PPKKOM')=type_of(SYSLOG)
|| obj_del(__PPKKOM);
   &__PPKKOM
?};
{? var_pres('__PPKREF')=type_of(SYSLOG)
|| obj_del(__PPKREF);
   &__PPKREF
?};
~~


\umo_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła przed akcją "Wybierz umowę" okienek tabeli PPK_KOM.
::   WE:
::   WY: 0/1 - umowa nie została wskazana/wybrano inną umowę
::----------------------------------------------------------------------------------------------------------------------
exec('wyb_umo','ppk')


\umo_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła po akcji "Wybierz umowę" okienek tabeli PPK_KOM.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
grp_disp(PPK_KOM,'KON',1,1);
~~


\akc_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po wykonaniu akcji. Odświeża zawartość listy uczestników i ewentualny filtr.
::   WE: [_a][INTEGER] - Czy akcja usuń?: 0/1 - pozostałe/usuń, domyślnie: 0 - pozostałe
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_usun:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? cur_tab()=PPK_UCZ
|| _par:=params_get();
   {? type_of(_par)>100 & var_pres('wnd',_par)>100
   || grp_disp(PPK_UCZ,_par.wnd.main)
   ?}
?};
{? ~_usun & PPK_KOM.sel_size()=0
|| {? PPK_KOM.f_active()
   || PPK_KOM.f_rfresh()
   ?}
?};
~~


\rek_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji wiersza tabeli PPK_KOM.
::   WE: _a INTEGER - rodzaj edycji: 0/1 - dołączenie/poprawianie
::   WY: 1 w przypadku gdy rekord jest poprawny, akronim wymaganego pola lub 0 gdy doszło do powielenia klucza.
::----------------------------------------------------------------------------------------------------------------------
{? PPK_KOM.PPK_UCZ<>null
:: uzupełnij przed kontrolą poprawności
|| PPK_KOM.OSOBA:=PPK_KOM.PPK_UCZ().OSOBA
?};

_chk:=__CHK.table(PPK_KOM,-menu_txt()='popraw',,'TYP','OSOBA','DATA','PPK_KRD');
{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & _chk=0)
|| return(_chk)
?};

:: weryfikacja spójności dat
_zd:=date(0,0,0);
PPK_KOM.PPK_UCZ();
PPK_UCZ.PPK_UMO();
{? PPK_KOM.DATA<PPK_UCZ.OD | PPK_KOM.DATA<PPK_UCZ.OD |
   (PPK_UCZ.DO<>_zd & PPK_UCZ.DO<PPK_KOM.DATA) |
   (PPK_UMO.DO<>_zd & PPK_UMO.DO<PPK_KOM.DATA)
|| FUN.info('Data komunikatu musi zawierać się w okresie uczestnictwa osoby w planie kapitałowym.'@);
   return('DATA')
?};

1


\ppk_dzb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wstawia do okna obszaru panele zawierające dostępne dla użytkownika komunikaty.
::   WE: _b TABLE - alias tabeli obszaru roboczego
::       _a STRING - akronim okienka obszaru roboczego
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_wnd:=_b;

_mode:='maximized_with_title';
:: panele obsługi komunikatów
_TAB.grp_sel(_wnd,PPK_KOM,'KON','Komunikaty dla uczestników'@,,,,,
:: przed obsługą
   "exec('sel_u_bs','ppk_kom')",,,,
:: tryb
   _mode
);
_TAB.grp_sel(_wnd,PPK_KOM,'KON','Komunikaty dla osób'@,,,,,
:: po obsłudze
   "exec('sel_o_bs','ppk_kom')",,,,
:: tryb
   _mode
);

:: wszystkie modyfikacje domyślnego działania należy "odwołać" w formule sel_a
:: zmiana domyślnej funkcjonalności kartoteki
PPK_KOM.fld_fml('PPK_UCZ','BLANK',"null");
~~


\sel_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po zamknięciu panelu obsługi komunikatów. Przywrócenie domyślnej funkcjonalności kartotek.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: odtworzenie domyślnej funkcjonalności pól
PPK_KOM.fld_fml('OSOBA','AFTER_EDIT',"*");
PPK_KOM.fld_fml('OSOBA','PATTERN',"*");
PPK_KOM.fld_fml('PPK_UCZ','BLANK',"*");
PPK_KOM.fld_fml('TYP','BLANK',"*");
PPK_KRD.fld_fml('RODZAJ','BLANK',"*");

:: redakcja i wyszukiwanie z uwzględnieniem osoby
PPK_KOM.win_edit('RED_U');
PPK_KOM.win_patt('WZO_U');

PPK_KOM.sel_adel();
PPK_KOM.f_clear();
OSOBA.f_clear();
~~


\sel_u_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed obsługą okienka tabeli PPK_KOM w zakładce komunikatów dla uczestnika.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: słownik rodzajów komunikatów dla uczestnika
PPK_KRD.fld_fml('RODZAJ','BLANK',"'U'");
:: typ komunikatu dla uczestnika
PPK_KOM.fld_fml('TYP','BLANK',"'U'");

:: redakcja i wyszukiwanie z uwzględnieniem osoby
PPK_KOM.win_edit('RED_O');
PPK_KOM.win_patt('WZO_O');

:: po wskazaniu osoby
PPK_KOM.fld_fml('OSOBA','AFTER_EDIT',"
   _ok:=1;
   PPK_KOM.PPK_UCZ:=null;
   PPK_UCZ.cntx_psh();
   PPK_UCZ.index('UNIQUE');
   PPK_UCZ.prefix(KST_PPK.PPK_UMO);
   {? PPK_UCZ.find_key(PPK_KOM.OSOBA)
   || PPK_KOM.PPK_UCZ:=PPK_UCZ.ref();
      {? exec('nie_akt','ppk_ucz')
      || _ok:=0
      ?}
   ?};
   PPK_UCZ.cntx_pop();
   _ok
");

:: dostępne osoby
PPK_KOM.fld_fml('OSOBA','PATTERN',"
   OSOBA.f_set(
      'NAZWISKO,PIERWSZE,PESEL',,
      'OSOBA.REFERENCE in ('+exec('osoba_qr','ppk','_a')+') and '+
      'OSOBA.REFERENCE in ('+exec('ucz_qr','ppk','_f')+')',
::    argumenty zapytania ograniczającego zakres danych
      exec('ref_firma','ustawienia'),
      exec('szukaj_udb_sys','schemat','PPK','PODZORG'),
      OPERATOR.USER,
      exec('domyslny','schemat','PODZORG'),
      '\\\'%\\\'',
      KST_PPK.PPK_UMO
   );
   ''
");

:: Usunięcie zaznaczeń, aby można było bezpiecznie ustawić filtr po przejściu z zakładki:
{? PPK_KOM.sel_size()<>0 || PPK_KOM.sel_adel() ?};

:: lista komunikatów
PPK_KOM.f_set(
:: sortuj od najnowszych i zgodnie z danymi osoby
   'DATA^,OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',,
:: tylko komunikaty uczestników, pokaż związane z wybraną umową,
:: ukryj komunikaty osób, do których użytkownik nie ma dostępu
   'PPK_KOM.PPK_UCZ is not null and PPK_KOM.PPK_UMO=:_f and '+
   'PPK_KOM.OSOBA in ('+exec('osoba_qr','ppk')+')',
:: argumenty zapytania ograniczającego zakres danych
   exec('ref_firma','ustawienia'),
   exec('szukaj_udb_sys','schemat','PPK','PODZORG'),
   OPERATOR.USER,
   exec('domyslny','schemat','PODZORG'),
   '\'%\'',
   KST_PPK.PPK_UMO
);
~~


\sel_o_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed obsługą okienka tabeli PPK_KOM w zakładce komunikatów dla osób.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: słownik rodzajów komunikatów dla osoby
PPK_KRD.fld_fml('RODZAJ','BLANK',"'O'");
:: typ komunikatu dla osoby
PPK_KOM.fld_fml('TYP','BLANK',"'O'");

:: redakcja i wyszukiwanie z uwzględnieniem osoby
PPK_KOM.win_edit('RED_O');
PPK_KOM.win_patt('WZO_O');

:: po wskazaniu osoby
PPK_KOM.fld_fml('OSOBA','AFTER_EDIT',"
   PPK_KOM.PPK_UCZ:=null;
   1
");

:: dostępne osoby
PPK_KOM.fld_fml('OSOBA','PATTERN',"
   OSOBA.f_set(
      'NAZWISKO,PIERWSZE,PESEL',,
      'OSOBA.REFERENCE in ('+exec('osoba_qr','ppk','_a')+') and '+
      'OSOBA.REFERENCE not in ('+exec('ucz_qr','ppk','_f')+')',
::    argumenty zapytania ograniczającego zakres danych
      exec('ref_firma','ustawienia'),
      exec('szukaj_udb_sys','schemat','PPK','PODZORG'),
      OPERATOR.USER,
      exec('domyslny','schemat','PODZORG'),
      '\\\'%\\\'',
      KST_PPK.PPK_UMO
   );
   ''
");

:: Usunięcie zaznaczeń, aby można było bezpiecznie ustawić filtr po przejściu z zakładki:
{? PPK_KOM.sel_size()<>0 || PPK_KOM.sel_adel() ?};

:: lista komunikatów
PPK_KOM.f_set(
:: sortuj od najnowszych i zgodnie z danymi osoby
   'DATA^,OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',,
:: ukryj komunikaty uczestników, pokaż związane z wybraną umową,
:: ukryj komunikaty osób, do których użytkownik nie ma dostępu
   'PPK_KOM.PPK_UCZ is null and PPK_KOM.PPK_UMO=:_f and '+
   'PPK_KOM.OSOBA in ('+exec('osoba_qr','ppk')+')',
:: argumenty zapytania ograniczającego zakres danych
   exec('ref_firma','ustawienia'),
   exec('szukaj_udb_sys','schemat','PPK','PODZORG'),
   OPERATOR.USER,
   exec('domyslny','schemat','PODZORG'),
   '\'%\'',
   KST_PPK.PPK_UMO
);
~~


\tresc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Zwraca treść komunikatu dla uczestnika lub osoby
::   WE: _a _PPK_KRD - wskazanie wiersza tabeli PPK_KRD
::       _b [_PPK_UCZ]/[_OSOBA] - wskazanie uczestnika planu lub osoby
::   WY: treść komunikatu ustalona na podstawie jego rodzaju
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_krd:=_a;
_ref:={? var_pres('_b')=type_of(null) & _b<>null || _b || null ?};

:: wartość zwracana
_txt:='';

PPK_KRD.cntx_psh();
PPK_KRD.prefix();
{? PPK_KRD.seek(_krd)
|| _tresc:=PPK_KRD.memo_txt(,1,'TRESC');
   {? PPK_KRD.FORMULA='T'
   || {? _ref=null
::       bez wskazania
      || _txt:=($_tresc)()

      |? $_ref*PPK_UCZ.name()=1
::       dla uczestnika planu
      || PPK_UCZ.cntx_psh();
         PPK_UCZ.prefix();
         {? PPK_UCZ.seek(_ref)
         || _txt:=($_tresc)(_ref)
         ?};
         PPK_UCZ.cntx_pop()

      |? $_ref*OSOBA.name()=1
::       dla osoby
      || OSOBA.cntx_psh();
         OSOBA.prefix();
         {? OSOBA.seek(_ref)
         || _txt:=($_tresc)(_ref)
         ?};
         OSOBA.cntx_pop()
      ?}

   || _txt:=_tresc
   ?}
?};
PPK_KRD.cntx_pop();

:: treść komunikatu
_txt


\dodaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy komunikat dla uczestnika/osoby.
::   WE: _a [REFERENCE] - wskazanie uczestnika/osoby (_PPK_UCZ/_OSOBA)
::       _b [STRING] - symbol rodzaju komunikatu
::       _c [DATE] - data komunikatu
::       _d [STRING] - czy komunikat utworzony automatycznie (domyślnie 'N')
::       _e [STRING] - treść komunikatu
::   WY: wskazanie utworzonego zapisu lub null
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;
_typ:=
   {? $_ref*PPK_UCZ.name() || 'U'
   |? $_ref*OSOBA.name() || 'O'
   || '?'
   ?};
_krd:=exec('szukaj','ppk_krd',_typ,_b);
_data:=_c;
_auto:={? var_pres('_d')=type_of('') || _d || '' ?};
_tresc:=
   {? var_pres('_e')<>type_of('')
   || exec('tresc','ppk_kom',_krd,_ref)
   || _e
   ?};

{? _krd=null
|| return(null)
?};

_ret:=null;
PPK_KOM.cntx_psh();
PPK_KOM.prefix();
PPK_KOM.blank();
PPK_KOM.TYP:=_typ;
{? _typ='O'
|| PPK_KOM.OSOBA:=_ref
|| PPK_KOM.PPK_UCZ:=_ref
?};
PPK_KOM.PPK_KRD:=_krd;
PPK_KOM.DATA:=_data;
PPK_KOM.AUTO:=_auto;
{? PPK_KOM.add()
|| PPK_KOM.memo_set(_tresc,'TRESC');
   PPK_KOM.memo_put(,'TRESC');
   _ret:=PPK_KOM.ref()
?};
PPK_KOM.cntx_pop();

_ret


\przekaz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Aktualizuje informacje o przekazaniu bieżącego komunikatu.
::   WE: _a STRING - przekazany e-listem: T/N
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_KOM.PRZ_DATA:=date();
PPK_KOM.PRZ_STAT:='T';
PPK_KOM.PRZ_LIST:=_a;
PPK_KOM.put()


\powiadom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Obsługa wybranych powiadomień. Wymagane istnienie tabeli o aliasie przechowywanym w zmiennej __PPKREF
::   WE: _a [INTEGER] - wyświetlanie komunikatów: 0/1 - wyłączone/włączone (domyślnie 1)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_msg:=(var_pres('_a')<>type_of(0) | _a<>0);
_TAB:=__PPKREF;

:: e-listy
PPK_KOM.cntx_psh();
PPK_KOM.prefix();
_TAB.prefix('E');
_loop:=_TAB.first();
{!
|? _loop
|! {? PPK_KOM.seek(_TAB.REF,)
   || exec('wyslij','ppk_kom',PPK_KOM.ref(),_msg)
   ?};
   _loop:=_TAB.next()
!};
PPK_KOM.cntx_pop();

:: wydruk
_TAB.prefix('P');
{? _TAB.first()
|| rep_exec('ppk_xpowiadomienie')
?};
~~


\wyslij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wysyła powiadomienie pocztą elektroniczną
::   WE: _a _PPK_KOM - wskazanie wiersza tabeli PPK_KOM
::       _b [INTEGER] - wyświetlanie komunikatów: 0/1 - wyłączone/włączone (domyślnie 1)
::   WY: 0/1 - porażka/sukces
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_kom:=_a;
_msg:=(var_pres('_b')<>type_of(0) | _b<>0);
_ret:=0;

PPK_KOM.cntx_psh();
PPK_KOM.prefix();
{? PPK_KOM.seek(_kom)
:: wyślij powiadomienie
|| PPK_KOM.OSOBA();
   {? (_email:=exec('email','ppk_ucz',PPK_KOM.OSOBA,PPK_KOM.DATA))<>''
   || _arg:=exec('add_email_a','#mailbox');
      _arg.SUB:=PPK_KOM.PPK_KRD().OPIS;
      _arg.RCV:=_email;
      _arg.BODYH:=exec('tre_kom','ppk_eml');
      _ret:=exec('add_email','#mailbox',_arg);
      {? _ret<>0
      || exec('przekaz','ppk_kom','T')
      |? _ret=0 & _msg
      || FUN.emsg('Dodanie wiadomości do kolejki wysyłania nie powiodło się.'@)
      ?}
   || {? _msg
      || FUN.emsg('Brak adresu poczty elektronicznej.\nWiadomość nie została wysłana.'@)
      ?}
   ?}
?};
PPK_KOM.cntx_pop();
_ret


\zap_kom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Tworzenie zapisu informacji z PPK dla osób zatrudnionych.
::   WE: _a [DATE] - Data komunikatu.
::       _b [STRING] - Rodzaj komunikatu.
::       _c [STRING] - Symbol komunikatu.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_dt:=_a;
_rodzaj:=_b;
_symbol:=_c;

_PARRAP:=exec('parrap_b','ppk_uza',1);

_ret:=obj_new('ref','new');
_ret.ref:=null();
_ret.new:=0;

{? _PARRAP.GEN_KOM='T'
|| PPK_KOM.cntx_psh();
   PPK_KRD.cntx_psh();
   PPK_KRD.index('SYMBOL');
   PPK_KRD.prefix(_rodzaj,_symbol);
   {? PPK_KRD.first()
   || {? _rodzaj='O'
      || _ucz:=null();
         PPK_KOM.index('OS_KRD');
         PPK_KOM.prefix(exec('firma','ustawienia'),OSOBA.ref(),PPK_KRD.ref())
      || _ucz:=PPK_UCZ.ref();
         PPK_KOM.index('UCZ_KRD');
         PPK_KOM.prefix(_ucz,_symbol,_dt)
      ?};
      {? PPK_KOM.first()
      || _ret.ref:=PPK_KOM.ref()
      || PPK_KOM.blank();
         PPK_KOM.TYP:=_rodzaj;
         PPK_KOM.OSOBA:=OSOBA.ref();
         PPK_KOM.PPK_UMO:=PPK_UMO.ref();
         PPK_KOM.PPK_UCZ:=_ucz;
         PPK_KOM.PPK_KRD:=PPK_KRD.ref();
         PPK_KOM.DATA:=_dt;
         PPK_KOM.AUTO:='T';
         PPK_KOM.memo_set(
            exec('tresc','ppk_kom',PPK_KOM.PPK_KRD,{? _rodzaj='O' || PPK_KOM.OSOBA || PPK_KOM.PPK_UCZ ?}),
            'TRESC'
         );
         {? PPK_KOM.add(1)
         || _ret.ref:=PPK_KOM.ref();
            _ret.new:=1;
            PPK_KOM.memo_put(,'TRESC');
::         trzeba by było wyszukać czy uczestnik ma dostęp do portalu (I_USERS?)
::         na razie zostawiamy samo wysyłanie mailem
::         {? PPK_KOM.PPK_KRD().PORTAL='T'
::         || PPK_KOM.PRZ_DATA:=date();
::            PPK_KOM.put(1)
::         ?};
            {? exec('fun_perm','ppk') & _PARRAP.GEN_MAIL='T'
            || exec('wyslij','ppk_kom',PPK_KOM.ref(),0)
            ?};
            1
         ?}
      ?}
   ?};
   PPK_KRD.cntx_pop();
   PPK_KOM.cntx_pop()
?};

_ret


\szukaj_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła sprawdza, czy dla wskazanego uczestnika istnieje już komunikat o podanych parametrach.
::   WE:  _a  [REFERENCE] - Wskazanie uczestnika (PPK_UCZ).
::        _b  [STRING]    - Symbol komunikatu.
::        _c  [DATE]      - Data komunikatu.
::       [_d] [STRING]    - Treść komunikatu.
::   WY: ~~ przy błędnym wywołaniu oraz null lub wskazanie znalezionego komunikatu.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & ref_tab(_a)=PPK_UCZ
|| _ucz:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & exec('szukaj','ppk_krd','U',_b)
|| _krd:=_b
|| return()
?};
{? var_pres('_c')=type_of(date())
|| _dt:=_c
|| return()
?};
_tresc:={? var_pres('_d')=type_of('') || _d || ~~ ?};

_ref:=null();
PPK_KOM.cntx_psh();
PPK_KOM.index('UCZ_KRD');
PPK_KOM.prefix(_ucz,_krd,_dt);
{? PPK_KOM.first()
|| {? _tresc=~~
   || _ref:=PPK_KOM.ref()
   || {!
      |? {? PPK_KOM.memo_txt(,1,'TRESC')=_tresc
         || _ref:=PPK_KOM.ref();
            0
         || PPK_KOM.next()
         ?}
      !}
   ?}
?};
PPK_KOM.cntx_pop();
_ref


\szukaj_os
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Formuła sprawdza, czy dla wskazanej osoby istnieje już komunikat o podanych parametrach.
::   WE:  _a  [REFERENCE] - Wskazanie osoby (OSOBA).
::        _b  [STRING]    - Symbol komunikatu.
::       [_c] [DATE]      - Data komunikatu.
::       [_d] [STRING]    - Treść komunikatu.
::   WY: ~~ przy błędnym wywołaniu oraz null lub wskazanie znalezionego komunikatu.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & ref_tab(_a)=OSOBA
|| _osoba:=_a
|| return()
?};
{? var_pres('_b')<>type_of('')
|| return()
|| _krd:=exec('szukaj','ppk_krd','O',_b)
?};
_dt:={? var_pres('_c')=type_of(date())|| _c || ~~ ?};
_tresc:={? var_pres('_d')=type_of('') || _d || ~~ ?};

_ref:=null();
PPK_KOM.cntx_psh();
PPK_KOM.index('OS_KRD');
PPK_KOM.prefix(exec('firma','ustawienia'),_osoba,_krd);
{? PPK_KOM.first()
|| {!
   |? {? (_dt=~~ | PPK_KOM.DATA=_dt) & (_tresc=~~ | PPK_KOM.memo_txt(,1,'TRESC')=_tresc)
      || _ref:=PPK_KOM.ref();
         0
      || PPK_KOM.next()
      ?}
   !}
?};
PPK_KOM.cntx_pop();
_ref


\gr_dodaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wprowadza komunikaty dla wybranej grupy uczestników.
::   WE: _a [OBJECT] - wskazanie obiektu zwracane przez formułę exec('gr_param','ppk_kom')
::       _b [OBJECT] - wskazanie obiektu zwracane przez formułę exec('gr_param','ppk_ucz')
::       _c [FORMULA/STRING] - treść formuły odpowiedzialnej za uzupełnienie komunikatu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par_kom:=_a;
_par_ucz:=_b;
_wykonaj:=
   {? var_pres('_c')=type_of('') || $_c
   |? var_pres('_c')=type_of("") || _c
   || "1"
   ?};

:: pobierz informacje o komunikacie
_kom:=exec('gr_ustaw','ppk_kom',_par_kom);
{? _kom.USTAW=0
|| return()
?};

:: wybierz spośród dostępnych uczestników
_ucz:=exec('gr_wybor','ppk_ucz',_par_ucz);
{? _ucz.WYBOR=0
|| return()
?};

:: skrócone odwołania
_LISTA:=_ucz.LISTA;
_TRESC:=_kom.TRESC;

_LISTA.f_set(,,'WYBRANY=\'T\'');
_size:=_LISTA.f_size();
{? _size=0
|| return()
?};

_ppk_krd:=null;
PPK_KRD.cntx_psh();
{? PPK_KRD.seek(_TRESC.PPK_KRD,,1)
|| _ppk_krd:=PPK_KRD.ref()
?};
PPK_KRD.cntx_pop();
{? _ppk_krd=null
|| return()
?};

OSOBA.cntx_psh();
OSOBA.prefix();
PPK_UCZ.cntx_psh();
PPK_UCZ.prefix();
PPK_KOM.cntx_psh();
PPK_KOM.index('UCZ_DATA');

:: parametry wprowadzania komunikatu
_par:=obj_new('TRESC','STATUS','INFO');
_par.TRESC:=_TRESC;
_cnt:=0;

:: przetwarzaj wybrane
_loop:=_LISTA.f_first();
{!
|? _loop
|! progress(100*(_cnt+=1)/_size,'Trwa rejestrowanie komunikatów...'@,FUN.TYT);
   {? PPK_UCZ.seek(_LISTA.PPK_UCZ)
   || PPK_UCZ.OSOBA();
::    parametry zmienne
      _par.STATUS:=~~;
      _par.INFO:='';
      _new:=null;
      _fnd:=0;

      do();
      PPK_KOM.prefix(PPK_UCZ.ref(),_TRESC.DATA);
      {? PPK_KOM.find_key(_TRESC.SYMBOL,)
      || _par.INFO:='Komunikat już istnieje.'@;
         _par.STATUS:=-1
      ?};

      PPK_KOM.blank();
      PPK_KOM.TYP:=_TRESC.RODZAJ;
      PPK_KOM.PPK_UCZ:=PPK_UCZ.ref();
      PPK_KOM.PPK_KRD:=_ppk_krd;
      PPK_KOM.DATA:=_TRESC.DATA;
      _txt:=
         {? _TRESC.FORMULA<>'T'
         || _TRESC.memo_txt(,1,'TRESC')
         || _ref:={? PPK_KOM.TYP='U' || PPK_KOM.PPK_UCZ || PPK_KOM.OSOBA ?};
            exec('tresc','ppk_kom',PPK_KOM.PPK_KRD,_ref)
         ?};
      PPK_KOM.memo_set(_txt,'TRESC');
      {? PPK_KOM.add() & PPK_KOM.memo_put(,'TRESC')
      || {? type_of(_par.STATUS)=0
         || _par.STATUS:=1
         ?};
         _new:=PPK_KOM.ref();
         _wykonaj(_par);
         end()
      || undo();
         _par.STATUS:=0;
         _par.INFO:='Utworzenie komunikatu nie powiodło się.'@
      ?};
      end();

      _LISTA.STATUS:=
         {? type_of(_par.STATUS)=type_of(0)
         || {? _par.STATUS<0 || 'ostrzeżenie'@
            |? _par.STATUS=0 || 'błąd'@
            || 'sukces'@
            ?}
         |? type_of(_par.STATUS)=type_of('')
         || _par.STATUS
         || 'nieznany'@
         ?};
      _LISTA.memo_set(_par.INFO,'INFO');
      {? _LISTA.put() & _LISTA.memo_put(,'INFO')
::       zapisz dane pozwalające wysłać komunikat
      || _txt:='{ "POWIADOM": %1, "PPK_KOM": %2 }'
            [json_value(type_of(_par.STATUS)=type_of(0) & _par.STATUS>0),json_value(_new)];
         _LISTA.memo_set(_txt,'DANE');
         _LISTA.memo_put(,'DANE')
      ?}

   || _LISTA.STATUS:='błąd';
      _LISTA.memo_set('Nie znaleziono uczestnika.'@,'INFO');
      _LISTA.put() & _LISTA.memo_put(,'INFO')
   ?};
   _loop:=_LISTA.f_next()
!};

PPK_KOM.cntx_pop();
PPK_UCZ.cntx_pop();
OSOBA.cntx_pop();
prgs_clr();

:: okno raportu wykonania
_wnd:=exec('gr_oknor','ppk_ucz',_LISTA);

:: obsługa raportu wykonania
_LISTA.win_act(_wnd,,'Formuła','Powiadom'@,,,
   "  _TAB:=cur_tab(1,1);
      _TAB.cntx_psh();
      _txt:=_TAB.memo_txt(,1,'DANE');
      _obj:=json_parse(_txt);
      _ret:=0;
      {? _obj.POWIADOM<>0
      || {? PPK_KOM.seek(_obj.PPK_KOM,,1)
::          ustal komunikat do wysłania
         || PPK_KOM.OSOBA();
            _ret:=exec('pow_b','ppk_kom')
         ?}
      ?};
      _TAB.cntx_pop();
      _ret
   ",
   "exec('pow_a','ppk_kom')",,1,
   "exec('pow_gb','ppk_kom')",
   "exec('pow_ga','ppk_kom')"
);
_LISTA.win_act(_wnd,,'Rekord',,,,"
   {? _a=0 || return() ?};
   _TAB:=cur_tab(1,1);
   _TAB.cntx_psh();
   _aid:='P';
   {? PPK_UCZ.seek(_TAB.PPK_UCZ,,1)
   || _txt:=_TAB.memo_txt(,1,'DANE');
      _obj:=json_parse(_txt);
      {? _obj.POWIADOM<>0
      || {? PPK_KOM.seek(_obj.PPK_KOM,,1)
::          ustalono komunikat
         || _aid:=''
         ?}
      ?}
   ?};
   _TAB.cntx_pop();
   _TAB.actions_grayed(cur_win(1,1),_aid)
");
exec('gr_akcje','ppk_ucz',_LISTA,_wnd);
:: przyciski dla głównych akcji okienka
_LISTA.win_btn(_wnd,'text=%1'['Powiadom'@],'menu:P');

:: wyświetl raport
PPK_KOM.cntx_psh();
_LISTA.win_sel(_wnd);
_LISTA.f_first();
_LISTA.select();
PPK_KOM.cntx_pop();
~~


\gr_ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Pobiera informacje niezbędne do wprowadzenia komunikatu.
::   WE: _a [OBJECT] - wskazanie obiektu zwracane przez formułę exec('gr_param','ppk_kom')
::   WY: wskazanie tablicy zawierającej:
::          USTAW INTEGER - 0/1 - zrezygnowano/zatwierdzono
::          POWIADOM TABLE - alias tabeli zawierającej informacje o komunikacie
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_krd:=null;

_ret:=obj_new('USTAW','TRESC');
_ret.USTAW:=0;
_ret.TRESC:=~~;

{? _par.SYMBOL<>''
|| PPK_KRD.cntx_psh();
   {? (_krd:=exec('szukaj','ppk_krd',_par.RODZAJ,_par.SYMBOL))=null
   || FUN.emsg('Nie znaleziono rodzaju komunikatu o kodzie "%1".'@[_par.SYMBOL]);
      PPK_KRD.cntx_pop();
      return(_ret)
   |? PPK_KRD.seek(_krd,,1)=0
   || FUN.error('Wiersz o wskazaniu "%1" nie istnieje.'@[$_krd]);
      PPK_KRD.cntx_pop();
      return(_ret)
   ?};
   PPK_KRD.cntx_pop()
?};

_BUF:=exec('gr_bufor','ppk_kom',_krd,_par.EXT_TAB);
:: parametry zawsze istniejące
_BUF.RODZAJ:=_par.RODZAJ;
_BUF.DATA:=_par.DATA;
:: dodatkowe parametry
(_par.EXT_VAL)(_BUF);
_BUF.add();

_dalej:=1;
{? _par.EDYCJA<>0
|| _BUF.fld_fml('SYMBOL','AFTER_EDIT',"
      _BUF:=cur_tab(1,1);
      _wnd:=cur_win(1,1);
      _test:=1;
      {? _BUF.SYMBOL<>''
      || PPK_KRD.cntx_psh();
         PPK_KRD.index('SYMBOL');
         PPK_KRD.prefix(_BUF.RODZAJ);
         {? PPK_KRD.find_key(_BUF.SYMBOL)
         || _BUF.PPK_KRD:=$PPK_KRD.ref();
            _BUF.SYMBOL:=PPK_KRD.SYMBOL;
            _BUF.OPIS:=PPK_KRD.OPIS;
            _BUF.EDYCJA:=PPK_KRD.EDYCJA;
            _BUF.FORMULA:=PPK_KRD.FORMULA;
            _txt:=
               {? PPK_KRD.FORMULA<>'T'
               || PPK_KRD.memo_txt(,1,'TRESC')
               || ''
               ?};
            _BUF.memo_set(_txt,'TRESC');
            _BUF.efld_opt(_wnd,'enable=%1'[$(_BUF.FORMULA<>'T')],,'TRESC');
            win_disp()
         || _BUF.OPIS:='';
            _BUF.EDYCJA:='';
            _BUF.FORMULA:='';
            win_disp();
            FUN.emsg('Brak pozycji w słowniku.'@);
            _test:=0
         ?};
         PPK_KRD.cntx_pop()
      || _BUF.OPIS:=''
      ?};
      _test
   ");
   _BUF.fld_fml('SYMBOL','F3',"
      _BUF:=cur_tab(1,1);
      _val:=exec('wybierz','ppk_krd',_BUF.RODZAJ,_BUF.SYMBOL);
      {? _val.ref<>null
      || _BUF.OPIS:=_val.OPIS;
         _BUF.SYMBOL:=_val.SYMBOL;
         _BUF.FORMULA:=_val.FORMULA;
         _BUF.SYMBOL
      ?}
   ");
   _BUF.fld_fml('TRESC','BEFORE_DISPLAY',"
      _BUF:=cur_tab(1,1);
      _BUF.efld_opt(cur_win(1,1),
         'enable=%1,editable=%2'[$(_BUF.SYMBOL<>'' & _BUF.FORMULA<>'T'),$(_BUF.EDYCJA='T')],,
         'TRESC'
      )
   ");

:: utwórz i ustaw okienko edycji parametrów
   _BUF.win_edit(exec('gr_oknor','ppk_kom',_BUF,_par.EXT_WND));

   _dalej:=_BUF.edit($("
      _chk:=exec('gr_test','ppk_kom',cur_tab(1,1));
      {? (type_of(_chk)=type_of('') & _chk<>'') |
         (type_of(_chk)=type_of(0) & _chk=0)
      || return(_chk)
      ?};
      "+"
      _chk:=($('"+_par.TEST+"'))(cur_tab(1,1));
      {? (type_of(_chk)=type_of('') & _chk<>'') |
         (type_of(_chk)=type_of(0) & _chk=0)
      || return(_chk)
      ?};
      1
   "))
?};

{? _dalej & _BUF.put() & _BUF.memo_put(,'TRESC')
|| _par.SYMBOL:=_BUF.SYMBOL;
   _par.TRESC:=_BUF;
   _ret.TRESC:=_BUF;
   _ret.USTAW:=1
?};

_ret


\gr_param
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy tablicę parametrów edytora komunikatu.
::   WE:
::   WY: wskazanie tablicy nazwanej o strukturze:
::       RODZAJ [STRING] - rodzaj komunikatu
::       SYMBOL [STRING] - symbol komunikatu
::       DATA [DATE] - data utworzenia
::       EDYCJA [INTEGER] - edycja danych komunikatu
::       TEST [FORMULA/STRING] - treść formuły dodatkowo sprawdzającej poprawność danych
::       EXT_TAB [OBJECT] - wskazanie tablicy zawierającej definicje dodatkowych pól
::       EXT_VAL [FORMULA/STRING] - treść formuły uzupełniającej dodatkowe pola
::       EXT_WND [FORMULA/STRING] - treść formuły wstawiającej dodatkowe pola
::       OBJ [ANY] - dane dowolnego przeznaczenia
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new(
:: parametry wejściowe
   'RODZAJ','SYMBOL','DATA',
   'EDYCJA','TEST','EXT_TAB','EXT_VAL','EXT_WND',
:: parametry wewnętrzne
   'TRESC','OBJ'
);

_par.RODZAJ:='U';
_par.SYMBOL:='';
_par.DATA:=date();
_par.EDYCJA:=1;
_par.TEST:="1";
_par.EXT_TAB:=~~;
_par.EXT_VAL:="~~";
_par.EXT_WND:="~~";
_par.TRESC:=~~;
_par.OBJ:=~~;

_par


\gr_bufor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy alias tabeli tymczasowej zawierającej informacje o wprowadzanym komunikacie.
::   WE: _a _PPK_KRD - wskazanie rodzaju komunikatu
::       _b [OBJECT] - wskazanie tablicy zawierającej definicje dodatkowych kolumn
::   WY: alias tabeli tymczasowej lub ~~ jeśli nie udało się jej utworzyć
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_krd:=_a;

_fml:="tab_tmp(1,
   'PPK_KRD','STRING[16]','Rodzaj komunikatu'@,
   'RODZAJ','STRING[%1]'[$MS.fld_len(PPK_KRD,'RODZAJ')],MS.name(PPK_KRD,'RODZAJ'),
   'SYMBOL','STRING[%1]'[$MS.fld_len(PPK_KRD,'SYMBOL')],MS.name(PPK_KRD,'SYMBOL'),
   'OPIS','STRING[%1]'[$MS.fld_len(PPK_KRD,'OPIS')],MS.name(PPK_KRD,'OPIS'),
   'DATA','DATE','Data utworzenia'@,
   'EDYCJA','STRING[1]',MS.name(PPK_KRD,'EDYCJA'),
   'FORMULA','STRING[1]',MS.name(PPK_KRD,'FORMULA'),
   'TRESC','SYS_MEMO','Treść'@
";

{? var_pres('_b')>=100
:: dodatkowe kolumny
|| _str:=type_of('');
   _def:=_b;
   _len:=obj_len(_def);
   {! _ii:=1.._len
   |! _fml+=',';
      {? var_pres('['+$_ii+']',_def)=_str
      || _fml+='\''+_def[_ii]+'\''
      ?}
   !}
?};

:: utwórz tabelę
_BUF:=($(_fml+")"))();

{? _krd<>null
|| PPK_KRD.cntx_psh();
   {? PPK_KRD.seek(_krd,,1)
   || _BUF.PPK_KRD:=$PPK_KRD.ref();
      _BUF.RODZAJ:=PPK_KRD.RODZAJ;
      _BUF.SYMBOL:=PPK_KRD.SYMBOL;
      _BUF.OPIS:=PPK_KRD.OPIS;
      _BUF.FORMULA:=PPK_KRD.FORMULA
   ?};
   PPK_KRD.cntx_pop()
?};

_BUF


\gr_oknor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy okienko redagowania tabeli tymczasowej zawierającej informacje o komunikacie.
::   WE: _a TABLE - alias tabeli tymczasowej zawierającej dane komunikatu zwracanej przez exec('gr_bufor','ppk_kom')
::       _b [FORMULA/STRING] - treść formuły wstawiającej dodatkowe pola, wywoływanej z argumentami: _a alias tabeli,
::          _b akronim okienka
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;
_ext:=
:: dodatkowe kolumny
   {? var_pres('_b')=type_of('') || $_b
   |? var_pres('_b')=type_of("") || _b
   || ""
   ?};

_tit:=
   {? _BUF.PPK_KRD<>''
   || _tit:='%1 (%2)'[_BUF.OPIS,_BUF.SYMBOL]
   || 'Komunikat'@
   ?};
_wnd:=_BUF.mk_edit(_tit,0,'#gr_ppk_kom');

_BUF.win_efld(_wnd,,'DATA',,,,,,,,MS.comment(PPK_KOM,'DATA'));
{? _BUF.PPK_KRD=''
|| _BUF.win_efld(_wnd,,'SYMBOL',,,10,,,,,MS.comment(PPK_KRD,'SYMBOL'),,'F3_button=1');
   _BUF.win_efld(_wnd,,'OPIS',,,40,,1,,,MS.comment(PPK_KRD,'OPIS'))
?};
{? _BUF.FORMULA<>'T'
|| _BUF.win_efld(_wnd,,'TRESC',,,40,-5,,,,MS.comment(PPK_KOM,'TRESC'))
?};
:: dodatkowe pola
_ext(_BUF,_wnd);
:: standardowe przyciski
exec('ok_esc','#window',_BUF,_wnd,,,,,,'Tworzenie komunikatów zgodnych z podanym wzorcem'@,'Utwórz'@);

_wnd


\gr_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy komunikatu dla grupy uczestników.
::   WE: _a TABLE - alias tabeli zawierającej informacje o wniosku zwracanej przez exec('gr_bufor','ppk_kom')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;

__CHK.validate(_BUF,
   "_a.record(_b,,'DATA','SYMBOL')",
   "  {? _b.FORMULA<>'T' & _b.EDYCJA='T'
      || {? (_chk:=_a.record(_b,0,'TRESC'))<>''
         || {? ~FUN.ask('Nie podano treści komunikatu.\nCzy na pewno kontynuować?'@)
            || return(_chk)
            ?}
         ?}
      ?};
      1
   "
)


:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:35 bea0fead85e948e03610e497d0591e6990ee1ec71c147c8468c09f802498d1a4613bed51891150b7374548b673fb886979ce83e127ee1ae6a1fcd50b47129aba8510ee1153f97da7b29090e125ed6b87b31a86ed3414647e695f078650641afe2bd25232432c97064722e27c55f682b055f39ee6f7f83d7f13336823acd4a31c
