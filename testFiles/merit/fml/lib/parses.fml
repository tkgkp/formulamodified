:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: parses.fml
:: Utworzony: 15.01.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość:  Formuły do obsługi indywidualnych parametrów pracy użytkownika - parametry sesji.
::
::             Plik składa się dwóch części.
::             1. Formuła \define zawiera definicje wszystkich parametrów.
::             2. Kolejne formuły, o nazwach zgodnych z nazwami odpowiednich pól tabeli PARSES służą do obsługi
::                tych pól. Do formuł tych przekazywany jest parametr będący kodem akcji. Dostępne kody:
::                   'BE' - Przed redagowaniem pola.
::                   'F3' - Obsługa klawisza F3 - wybór.
::                   'AE' - Po redagowaniu pola.
::
::             Kolejne formuły są wynikiem niezrozumienia powyższych założeń.
::
::======================================================================================================================


\define
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Główna formuła definiująca indywidualne parametry pracy użytkownika - parametry sesji.
::   WE: _a - Obiekt klasy ParSes.
::   WY: Obiekt klasy ParSes.
::----------------------------------------------------------------------------------------------------------------------
_ps:=_a;

:: --------------------------------------------------------------------------------------------------------------------
:: PERSONEL
::    PKD - Kadry
::    PPL - Płace
::    PRC - Czas pracy
::    PSZ - Szkolenia
::    POC - Oceny
::    PRE - Rekrutacja
::    PBA - Ankiety
:: --------------------------------------------------------------------------------------------------------------------
{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='F_ZATR';
_par.NAME:='Forma współpracy'@;
_par.PERM:='F_ZATR';
_par.WIN:='F_ZATR';
_par.required:="";
_par.value:="PARSES.F_ZATR";
_par.args:="
   _ret:=obj_new('REF','KOD','OPIS','TYP','DOCELOWA');
   _ret.REF:=null();
   _ret.KOD:=_ret.OPIS:=_ret.TYP:=_ret.DOCELOWA:='';
   _ret
";
_par.setVal:="
   _ret:=0;
   {? var_pres('_c')=type_of(_a.args(_b))
   || PARSES.F_ZATR:=null();
      F_ZATR.cntx_psh();
      F_ZATR.index('KOD');
      F_ZATR.prefix();
      {? (var_pres('REF',_c)=type_of(null()) & _c.REF<>null() & F_ZATR.seek(_c.REF)) |
         (var_pres('KOD',_c)=type_of('') & _c.KOD<>'' & F_ZATR.find_key('T',_c.KOD,))
      || PARSES.F_ZATR:=F_ZATR.ref()
      ?};
      F_ZATR.cntx_pop();
      _ret:=1
   ?};
   _ret
";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.REF:=PARSES.F_ZATR;
   _ret.KOD:=PARSES.F_ZATR().KOD;
   _ret.OPIS:=F_ZATR.OPIS;
   _ret.TYP:=F_ZATR.TYP;
   _ret.DOCELOWA:=F_ZATR.DOCELOWA;
   _ret
";
_par.valid:="";
_par.afterChange:="
   OPERATOR.F_ZATR:={? PARSES.F_ZATR || exec('dest','f_zatr',PARSES.F_ZATR,'KOD') || '' ?};
   __F_ZATR.mod(OPERATOR.F_ZATR);
   {? _c<>2 & VAR.JESTLIST
   || _a.getBuf(_b).ZAMKLIST();
      PARSES.O:=''
   ?}
";
_par.prolog:="
   exec('__F_ZATR','object');
   F_ZATR.cntx_psh();
   exec('filtruj','f_zatr','T','OPIS');
   {? PARSES.F_ZATR<>null() & ~exec('dostepny_u','f_zatr',,,PARSES.F_ZATR)
   || PARSES.F_ZATR:=null();
      PARSES.put()
   ?};
   _buf:=_a.getBuf(_b);
   _buf.F_ZATR:=null();
   _buf.LISTA:=_a.isEdited('ListaPłac');
   _buf.HARM:=0;
::   _a.isEdited('OkresRozliczeniowy-Harmonogramy');
   exec('__HARM','object');
   _a.setBuf(_b,_buf)
";
_par.epilog:="F_ZATR.f_clear(); F_ZATR.cntx_pop()";
_par.beforeService:="
   _buf:=_a.getBuf(_b);
   {? _buf.HARM
   || _buf.setHarmEnable()
   ?}
";
_par.needChange:="
   exec('__F_ZATR','object');
   F_ZATR.cntx_psh();
   _ret:=__F_ZATR.upr(PARSES.F_ZATR().KOD);
   F_ZATR.cntx_pop();
   ~_ret
";
_par.BUFFER:=obj_new('F_ZATR','LISTA','HARM','setHarmEnable','OTWOLIST','ZAMKLIST');
_par.BUFFER.setHarmEnable:="
      _sval:=$(PARSES.F_ZATR().KOD='P');
      PARSES.efld_opt(__PARSES.WE,'enable='+_sval,,'HARMOD');
      PARSES.efld_opt(__PARSES.WE,'enable='+_sval,,'HARMDO');
      PARSES.efld_opt(__PARSES.WE,'enable='+_sval,,'HARMNAZ')
";
_par.BUFFER.OTWOLIST:="exec('otworz','lista_plac')";
_par.BUFFER.ZAMKLIST:="exec('zamknij','lista_plac')";
_ps.addPar(_par);
::_ps.addDom(_par.ID,'PKD','PPL','PRC','PPK','POR');

:: --------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='JednostkaOrganizacyjna';
_par.NAME:='Jednostka organizacyjna'@;
_par.PERM:='UD_SKL';
_par.WIN:='DEPTSYM';
_par.required:="'DEPTSYM'";
_par.value:="PARSES.DEPTSYM";
_par.args:="
   _ret:=obj_new('REF','SYMBOL');
   _ret.REF:=null();
   _ret.SYMBOL:='';
   _ret
";
_par.setVal:="
   _ret:=0;
   {? var_pres('_c')=type_of(_a.args(_b))
   || _sch:=exec('domyslny','schemat','PODZORG');
      UD_DEF.cntx_psh();
      _ok:=1;
      {? var_pres('REF',_c)=type_of(null()) & _c.REF<>null()
      || UD_DEF.index('PODTEC');
         UD_DEF.prefix(_sch,_c.REF)
      |? var_pres('SYMBOL',_c)=type_of('') & _c.SYMBOL<>''
      || UD_DEF.index('SCHSYM');
         UD_DEF.prefix(_sch,_c.SYMBOL,)
      || _ok:=0
      ?};
      {? _ok & UD_DEF.first()
      || PARSES.DEPTSYM:=UD_DEF.SYMBOL
      ?};
      UD_DEF.cntx_pop()
   ?};
   _ret
";
_par.getVal:="
   _ret:=_a.args(_b);
   _sch:=exec('domyslny','schemat','PODZORG');
   UD_DEF.cntx_psh();
   UD_DEF.index('SCHSYM');
   UD_DEF.prefix(_sch,PARSES.DEPTSYM,);
   {? UD_DEF.first()
   || _ret.REF:=UD_DEF.UD_SKL;
      _ret.SYMBOL:=UD_DEF.SYMBOL
   ?};
   UD_DEF.cntx_pop();
   _ret
";
_par.valid:="__CHK.record(PARSES,,'DEPTSYM')";
_par.afterChange:="
   OPERATOR.PERM:=_a.getBuf(_b).REF;
   {? _c<>2 & VAR.JESTLIST
   || _a.getBuf(_b).ZAMKLIST();
      PARSES.O:=''
   ?}
";
_par.prolog:="
   _ref:=null();
   _symbol:='';
   {? PARSES.DEPTSYM<>''
   || _sch:=exec('domyslny','schemat','PODZORG');
      UD_DEF.cntx_psh();
      UD_DEF.index('SCHSYM');
      UD_DEF.prefix(_sch,PARSES.DEPTSYM,);
      {? UD_DEF.first()
      || _ref:=UD_DEF.UD_SKL;
         _symbol:=UD_DEF.SYMBOL
      || PARSES.DEPTSYM:=''
      ?};
      UD_DEF.cntx_pop()
   ?};
   _buf:=_a.getBuf(_b);
   _buf.REF:=_ref;
   _buf.SYMBOL:=_symbol;
   _buf.LISTA:=_a.isEdited('ListaPłac');
   _a.setBuf(_b,_buf)
";
_par.epilog:="";
_par.BUFFER:=obj_new('REF','SYMBOL','LISTA','OTWOLIST','ZAMKLIST');
_par.BUFFER.OTWOLIST:="exec('otworz','lista_plac')";
_par.BUFFER.ZAMKLIST:="exec('zamknij','lista_plac')";
_ps.addPar(_par);
::_ps.addDom(_par.ID,'PKD','PPK','PPL','PRC','POR');

:: --------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='ZakresDanych';
_par.NAME:='Przeglądanie kartoteki osobowej'@;
_par.WIN:='VIEW';
_par.required:="'-VIEW'";
_par.value:="PARSES.VIEW";
_par.args:="''";
_par.setVal:="
   {? var_pres('_c')=type_of('') & (_c='T' | _c='N' | _c='W')
   || PARSES.VIEW:=_c;
      1
   ?}
";
_par.getVal:="PARSES.VIEW";
_par.valid:="__CHK.record(PARSES,,'VIEW')";
_par.afterChange:="";
_par.prolog:="";
_par.epilog:="";
_ps.addPar(_par);
_ps.addDom(_par.ID,'PKD','PPL','PRC');

:: --------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='ListaPłac';
_par.NAME:='Lista płac'@;
_par.WIN:='O';
_par.required:="";
_par.value:="PARSES.O";
_par.args:="
   _ret:=obj_new('REF','F_ZATRREF','F_ZATR','R','M','TREF','T','RP','MP','RU','MU','LT','DK','DR','GR','Z');
   _ret.REF:=null();
   _ret.F_ZATRREF:=null();
   _ret.F_ZATR:='';
   _ret.R:=_ret.M:=_ret.RP:=_ret.MP:=_ret.RU:=_ret.MU:=0;
   _ret.TREF:=null();
   _ret.T:='';
   _ret.LT:='';
   _ret.Z:='';
   _ret.DK:=_ret.DR:=_ret.GR:=0;
   _ret
";
_par.setVal:="
   _ret:=0;
   {? var_pres('_c')=type_of(_a.args(_b))
   || O.cntx_psh();
      O.clear();
      {? (var_pres('REF',_c)=type_of(null()) & _c.REF<>null() & O.seek(_c.REF)) |
         (var_pres('F_ZATR',_c)=type_of('') &
          var_pres('R',_c)=type_of(0) & var_pres('M',_c)=type_of(0) &
          var_pres('T',_c)=type_of('') & (
            O.index('LISTYPLA');
            O.find_key(exec('ref_firma','ustawienia'),_c.F_ZATR,_c.R,_c.M,_c.T))
          )
      || PARSES.O:=~-O.LT
      |? var_pres('REF',_c)=type_of(null()) & _c.REF=null()
      || PARSES.O:=''
      ?};
      O.cntx_pop()
   ?};
   _ret
";
_par.getVal:="
   _ret:=_a.args(_b);
   {? PARSES.O<>''
   || O.cntx_psh();
      O.index('LISTYPZN');
      O.prefix(exec('ref_firma','ustawienia'),-PARSES.O,);
      {? O.first()
      || _ret.REF:=O.ref();
         _ret.F_ZATRREF:=O.F_ZATR;
         _ret.F_ZATR:=O.F_ZATR().KOD;
         _ret.R:=O.R;
         _ret.M:=O.M;
         _ret.RP:=O.RP;
         _ret.MP:=O.MP;
         _ret.RU:=O.RU;
         _ret.MU:=O.MU;
         _ret.TREF:=O.T;
         _ret.T:=O.T().T;
         _ret.LT:=O.LT;
         _ret.DK:=O.DK;
         _ret.DR:=O.DR;
         _ret.GR:=O.GR;
         _ret.Z:=O.Z
      ?};
      O.cntx_pop()
   ?};
   _ret
";
_par.valid:="__CHK.record(PARSES,,'O')";
_par.afterChange:="
   _buf:=_a.getBuf(_b);
   {? PARSES.O=''
   || _buf.ZAMKLIST()
   |? _buf.REF<>VAR.O
   || O.prefix();
      {?  O.seek(_buf.REF)
      || _buf.OTWOLIST()
      || _buf.ZAMKLIST()
      ?}
   ?}
";
_par.prolog:="
   O.cntx_psh();
   O.index('LISTYPZN');
   O.prefix(exec('ref_firma','ustawienia'));
   O.win_sel('WER');
   {? PARSES.O<>'' & O.find_key(-PARSES.O,)
   || _ref:=O.ref();
      _lt:=~-O.LT
   || _ref:=null();
      _lt:=''
   ?};
   _buf:=_a.getBuf(_b);
   _buf.REF:=_ref;
   _buf.LT:=_lt;
   _buf.F_ZATR:=_a.isEdited('F_ZATR');
   _buf.DEPT:=_a.isEdited('JednostkaOrganizacyjna');
   _a.setBuf(_b,_buf);

   1
";
_par.epilog:="O.cntx_pop()";
_par.BUFFER:=obj_new('REF','LT','F_ZATR','DEPT','OTWOLIST','ZAMKLIST');
_par.BUFFER.OTWOLIST:="exec('otworz','lista_plac')";
_par.BUFFER.ZAMKLIST:="exec('zamknij','lista_plac')";
_ps.addPar(_par);
_ps.addDom(_par.ID,'PKD','PPL');

:: --------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='OkresRozliczeniowy_Harmonogramy';
_par.NAME:='Harmonogramy — okres rozliczeniowy'@;
_par.WIN:='HARM';
_par.required:="";
_par.value:="PARSES.HARMOD$1+'|'+PARSES.HARMDO$1+'|'+PARSES.HARMNAZ";
_par.args:="
   _ret:=obj_new('REF');
   _ret.REF:=null();
   _ret
";
_par.setVal:="
   _ret:=0;
   {? var_pres('_c')=type_of(_a.args(_b))
   || A_OKR.cntx_psh();
      A_OKR.clear();
      {? (var_pres('REF',_c)=type_of(null()) & _c.REF<>null() & A_OKR.seek(_c.REF))
      || PARSES.HARMOD:=A_OKR.OD;
         PARSES.HARMDO:=A_OKR.DO;
         PARSES.HARMNAZ:=A_OKR.NAZ().NAZ
      |? var_pres('REF',_c)=type_of(null()) & _c.REF=null()
      || PARSES.HARMOD:=date(0,0,0);
         PARSES.HARMDO:=date(0,0,0);
         PARSES.HARMNAZ:=''
      ?};
      A_OKR.cntx_pop()
   ?};
   _ret
";
_par.getVal:="
   _ret:=_a.args(_b);
   A_OKR.cntx_psh();
   {? PARSES.HARMOD<>date(0,0,0) & PARSES.HARMDO<>date(0,0,0) & PARSES.HARMNAZ<>'' &
      A_OKR.find_key(PARSES.HARMOD,PARSES.HARMDO,PARSES.HARMNAZ,)
   || _ret.REF:=A_OKR.ref()
   ?};
   A_OKR.cntx_pop();
   _ret
";
_par.valid:="__CHK.record(PARSES,,'HARMOD')";
_par.afterChange:="
   {? PARSES.HARMOD=date(0,0,0)
   || __HARM.wylacz_okres()
   || _buf:=_a.getBuf(_b);
      {? _buf.OKR_REF<>null() & A_OKR.seek(_buf.OKR_REF)
      || __HARM.ustaw_okres()
      || __HARM.wylacz_okres()
      ?}
   ?}
";
:  prolog
:  Formuła wykona się wyłącznie wtedy, gdy użytkownik będzie miał dostęp do obszaru PRC.
:  W takiej sytuacji obiekt __HARM i tak zostanie powołany.
_par.prolog:="
   exec('__HARM','object');
   A_OKR.cntx_psh();
   A_OKR.index('A_OKR');
   A_OKR.prefix();
   A_OKR.win_sel('SLO');
   {? PARSES.HARMOD<>date(0,0,0) & PARSES.HARMDO<>date(0,0,0) & PARSES.HARMNAZ<>'' &
      A_OKR.find_key(PARSES.HARMOD,PARSES.HARMDO,PARSES.HARMNAZ,)
   || _ref:=A_OKR.ref()
   || _ref:=null()
   ?};
   _buf:=_a.getBuf(_b);
   _buf.OD:=PARSES.HARMOD;
   _buf.OKR_REF:=_ref;
   _buf.F_ZATR:=_a.isEdited('F_ZATR');
   _a.setBuf(_b,_buf)
";
_par.epilog:="A_OKR.cntx_pop()";
_par.BUFFER:=obj_new('OD','OKR_REF','F_ZATR');
_ps.addPar(_par);
_ps.addDom(_par.ID,'PRC');

:: ---------------------------------------------------------------------------------------------------------------------
:: LOGISTYKA, PRODUKCJA, WYPOSAŻENIE, UMOWY, REMONTY
:: ---------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='OddzialLogProd';
_par.NAME:='Oddział'@;
_par.WIN:='ODDZ';
_par.required:="'ODDZ.KOD'";
_par.value:="PARSES.ODDZ";
_par.args:="
   _ret:=obj_new('REF','KOD','NAZ','WW','TW','ODD');
   _ret.REF:=null();
   _ret.KOD:='';
   _ret.NAZ:='';
   _ret.WW:='';
   _ret.TW:='';
   _ret.ODD:=null();
   _ret";
_par.setVal:="
   _ret:=0;
   _arg:=
      {? var_pres('_c')=type_of(_a.args(_b))
::    przekazano tablicę
      || {? var_pres('REF',_c)=type_of(null()) & _c.REF || _c:=_c.REF
         |? var_pres('KOD',_c)=type_of('') & _c.KOD<>'' || _c:=_c.KOD
         || ~~
         ?}
::    przekazano ODDZ.ref() lub ODDZ.KOD
      || _c
      ?};
   {? var_pres('_arg')=type_of('')
:: ODDZ.KOD
   || PARSES.ODDZ:=exec('FindInSet','#table','ODDZ','KOD2',_c,_c);
      _ret:=1
   |? var_pres('_arg')=type_of(null())
:: ODDZ.ref()
   || PARSES.ODDZ:=_arg;
      _ret:=1
   ?};
   {? _ret
   ||
::    zadbanie o PARSES.MG, PARSES.STS, PARSES.STZ
      exec('po_parses_logfld','parses','ODDZ')
   ?};
   _ret";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.REF:=PARSES.ODDZ;
   {? _ret.REF
   || _ret.KOD:=PARSES.ODDZ().KOD;
      _ret.NAZ:=ODDZ.NAZ;
      _ret.WW:=ODDZ.WW;
      _ret.TW:=ODDZ.TW;
      _ret.ODD:=ODDZ.ODD
   ?};
   _ret";
_par.valid:="
   _ret:=__CHK.record(PARSES,,'ODDZ');
   {? _ret=''
   || {? ~exec('usr_upr','b_perm','ODDZ',PARSES.ODDZ,OPERATOR.USER)
      || FUN.info('Brak uprawnień do oddziału %1.'@ [exec('record','#to_string',PARSES.ODDZ)]);
         _ret:='ODDZ'
      ?}
   ?};
   _ret
   ";
_par.prolog:="
   {? _c=1 || exec('filtroddz','parses') ?};
   1
";
_par.afterChange:="
   ST.ODDZ_REF:=PARSES.ODDZ;
   ST.ODDZ_KOD:=ST.ODDZ:=PARSES.ODDZ().KOD;
   {? PARSES.ROK & _a.isChanged('OkresRok')=0
   || exec('open_tabele','open_tab','L',PARSES.ODDZ().KOD,form(PARSES.ROK-2000,,0,'99'))
   ?}
";
_par.needChange:="
   {? PARSES.MG & PARSES.ODDZ().KOD<>PARSES.MG().ODDZ
      | PARSES.STS & PARSES.ODDZ().KOD<>PARSES.STS().ODDZ
      | PARSES.STZ & PARSES.ODDZ().KOD<>PARSES.STZ().ODDZ
   || return(1)
   ?};
   _ret:=exec('usr_upr','b_perm','ODDZ',PARSES.ODDZ,OPERATOR.USER);
   ~_ret";
_par.epilog:="{? _c=1 || ODDZ.f_clear() ?}";

_ps.addPar(_par);
_ps.addDom(_par.ID,'LMG','LMO','LSP','LSS','LZK','TPP','TTE','WYP','LUM','TRE','LUO');

::----------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='Magazyn';
_par.NAME:='Magazyn'@;
_par.WIN:='MG';
_par.required:="
   B_PERM.index('NAME');
   B_PERM.prefix('LMG');
   {? B_PERM.first()
   || B_PERM_U.index('USER');
      B_PERM_U.prefix(REF.FIRMA,OPERATOR.USER,B_PERM.ref());
      {? B_PERM_U.first()
      || 'MG'
      || ''
      ?}
   || ''
   ?}";
_par.value:="PARSES.MG";
_par.args:="
   _ret:=obj_new('REF','SYM');
   _ret.REF:=null();
   _ret.SYM:='';
   _ret";
_par.setVal:="
   _ret:=0;
   _arg:=
      {? var_pres('_c')=type_of(_a.args(_b))
::    przekazano tablicę
      || {? var_pres('REF',_c)=type_of(null()) & _c.REF || _c:=_c.REF
         |? var_pres('SYM',_c)=type_of('') & _c.SYM<>'' || _c:=_c.SYM
         || ~~
         ?}
::    przekazano MG.ref() lub MG.SYM
      || _c
      ?};
   {? var_pres('_arg')=type_of('')
:: MG.SYM
   || PARSES.MG:=exec('FindInSet','#table','MG','MAGAZYNY',_c,_c);
      _ret:=1
   |? var_pres('_arg')=type_of(null())
:: MG.ref()
   || PARSES.MG:=_c;
      _ret:=1
   ?};
   _ret";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.REF:=PARSES.MG;
   {? _ret.REF
   || _ret.SYM:=PARSES.MG().SYM
   ?};
   _ret";
_par.valid:="
   _res:='';
   {? PARSES.MG & exec('FindInSet','#table','USERS_UP','MAG',PARSES.MG,OPERATOR.USER,,0,'MG')=null()
   || _res:='MG'
   || B_PERM.index('NAME');
      B_PERM.prefix('LMG');
      {? B_PERM.first()
      || B_PERM_U.index('USER');
         B_PERM_U.prefix(REF.FIRMA,OPERATOR.USER,B_PERM.ref());
         {? B_PERM_U.first()
         || _res:=__CHK.record(PARSES,,'MG')
         ?}
      ?}
   ?};
   {? _res='' & PARSES.MG().SKL='T' & exec('FindInSet','#table','T2MG','T',PARSES.MG,,,,,null())=null()
   || FUN.info('Magazyn typu SKŁAD CELNY wymaga przypisania typów dokumentów.\nWybór niemożliwy.'@);
      _res:='MG'
   ?};
   _res
   ";
_par.prolog:="
   {? PARSES.MG & PARSES.ODDZ().KOD<>PARSES.MG().ODDZ || PARSES.MG:=null() ?};
   {? _c=1
   || {? BPMN.TYP_MG='' & _a.AREA='LMG_OPK' || BPMN.TYP_MG:='O'
      |? BPMN.TYP_MG='' & _a.AREA='LMO_PAL' || BPMN.TYP_MG:='P'
      ?};
      exec('filtrmg','parses')
   ?};
   {? PARSES.MG<>null() & MG.f_active() & ~MG.f_seek(PARSES.MG)
   || PARSES.MG:=null();
      PARSES.put()
   ?};
   1
";
_par.afterChange:="
   {? PARSES.MG<>ST.MAG || VAR_DEL.delete('__sc','__sumsc','__sc_sel','__sc_grp','__sc_sum','__sc_sew') ?};
   ST.MAG:=PARSES.MG;
   ST.MAG_SYM:=ST.MAG().SYM;
   exec('usuprmag','parses')";
_par.needChange:="
   {? (_a.AREA='LMG_OPK' & PARSES.MG().MG_OPAK='') | (_a.AREA='LMO_PAL' & PARSES.MG().PAL<>'T')
   || PARSES.MG:=null(); PARSES.put()
   ?};
   ~exec('FindInSet','#table','USERS_UP','MAG',PARSES.MG,OPERATOR.USER,,0,'MG')<>null()
";
_par.epilog:="{? _c=1 || MG.f_clear() ?}";

_ps.addPar(_par);
_ps.addDom(_par.ID,'LMG','LMO','TPP','TTE','WYP');

::----------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='StSprzedazy';
_par.NAME:='Stanowisko sprzedaży'@;
_par.WIN:='STS';
_par.required:="{? exec('get','#params',2102,2,OPERATOR.USER)='T' || 'STS' || '' ?}";
_par.value:="PARSES.STS";
_par.args:="
   _ret:=obj_new('REF','ODDZ','KOD','NAZ','KSG','SZ','MGR');
   _ret.REF:=null();
   _ret.ODDZ:='';
   _ret.KOD:='';
   _ret.NAZ:='';
   _ret.KSG:='';
   _ret.SZ:='';
   _ret.MGR:='';
   _ret";
_par.setVal:="
   _ret:=0;
   _arg:=
      {? var_pres('_c')=type_of(_a.args(_b))
::    przekazano tablicę
      || {? var_pres('REF',_c)=type_of(null()) & _c.REF || _c:=_c.REF
         |? var_pres('KOD',_c)=type_of('') & _c.KOD<>'' || _c:=_c.KOD
         || ~~
         ?}
::    przekazano STS.ref() lub STS.KOD
      || _c
      ?};
   _null:=0;
   {? var_pres('_arg')=type_of('')
:: ustalenie STS.ref na podstawie STS.KOD
   || _null:={? _c='' || 1 || -1 ?};
      _arg:=exec('FindInSet','#table','STS','K',_c)
   ?};
   {? var_pres('_arg')=type_of(null())
   || {? _null=0 & _arg=null() | _null=1
      || {? exec('get','#params',2102,2,OPERATOR.USER)='N'
::       zerowanie parametru jeśli nie jest wymagany
         || PARSES.STS:=null();
            _ret:=1
         ?}
      || {? exec('usr_upr','b_perm','STS',_arg,OPERATOR.USER)
::       użytkownik ma uprawnienia
         || _oddz:=exec('FindAndGet','#table',STS,$_arg,,\"STS.ODDZ\",null());
            _oddz_ref:=exec('FindInSet','#table','ODDZ','KOD2',_oddz,_oddz);
            {? _oddz_ref & PARSES.ODDZ=_oddz_ref
::          ustawiony jest oddział zgodny z oddziałem stanowiska
            || PARSES.STS:=_arg;
               _ret:=1
            ?}
         ?}
      ?}
   ?};
   _ret";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.REF:=PARSES.STS;
   {? _ret.REF
   || _ret.ODDZ:=PARSES.STS().ODDZ;
      _ret.KOD:=STS.KOD;
      _ret.NAZ:=STS.NAZ;
      _ret.KSG:=STS.KSG;
      _ret.SZ:=STS.SZ;
      _ret.MGR:=STS.MGR
   ?};
   _ret";
_par.valid:="
   _ret:='';
   {? exec('get','#params',2102,2,OPERATOR.USER)='T'
   || _ret:=__CHK.record(PARSES,,'STS');
      {? _ret=''
      || _user:=OPERATOR.USER;
         {? exec('FindInSet','#table','USERS_UP','STS',PARSES.STS,_user,,0,'STS')=null()
         || FUN.info('Brak uprawnień do stanowiska sprzedaży %1.'@[exec('record','#to_string',PARSES.STS)]);
            _ret:='STS'
         ?};
         _ret
      ?}
   ?};
   _ret";
_par.prolog:="
   {? PARSES.STS & PARSES.ODDZ().KOD<>PARSES.STS().ODDZ || PARSES.STS:=null() ?};
   {? _c=1 || exec('filtrsts','parses') ?};
   1
";
_par.afterChange:="
   ST.STS:=PARSES.STS;
   ST.STS_KOD:=ST.STS().KOD;
   {? PARSES.MG<>ST.MAG || VAR_DEL.delete('__sc','__sumsc','__sc_sel','__sc_grp','__sc_sum','__sc_sew') ?};
   ST.MAG:=PARSES.MG;
   ST.MAG_SYM:=PARSES.MG().SYM";
_par.needChange:="
   _user:=OPERATOR.USER;
   _ret:=
      {? exec('get','#params',2102,2,_user)='T'
      || exec('FindInSet','#table','USERS_UP','STS',PARSES.STS,_user,,0,'STS')<>null()
      || 1
      ?};
   ~_ret";
_par.epilog:="{? _c=1 || STS.f_clear() ?}";
_ps.addPar(_par);
_ps.addDom(_par.ID,'LMG','LSP','LSS','LUM');

::----------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='StZakupu';
_par.NAME:='Stanowisko zakupu'@;
_par.WIN:='STZ';
_par.required:="{? exec('get','#params',6102,2,OPERATOR.USER)='T' || 'STZ' || '' ?}";
_par.value:="PARSES.STZ";
_par.args:="
   _ret:=obj_new('REF','ODDZ','KOD','NAZ','KSG','SZ','MGR');
   _ret.REF:=null();
   _ret.ODDZ:='';
   _ret.KOD:='';
   _ret.NAZ:='';
   _ret.KSG:='';
   _ret.SZ:='';
   _ret.MGR:='';
   _ret";
_par.setVal:="
   _ret:=0;
   _arg:=
      {? var_pres('_c')=type_of(_a.args(_b))
::    przekazano tablicę
      || {? var_pres('REF',_c)=type_of(null()) & _c.REF || _c:=_c.REF
         |? var_pres('KOD',_c)=type_of('') & _c.KOD<>'' || _c:=_c.KOD
         || ~~
         ?}
::    przekazano STS.ref() lub STS.KOD
      || _c
      ?};
   _null:=0;
   {? var_pres('_arg')=type_of('')
:: ustalenie STS.ref na podstawie STS.KOD
   || _null:={? _c='' || 1 || -1 ?};
      _arg:=exec('FindInSet','#table','STS','K',_c)
   ?};
   {? var_pres('_arg')=type_of(null())
   || {? _null=0 & _arg=null() | _null=1
      || {? exec('get','#params',6102,2,OPERATOR.USER)='N'
::       zerowanie parametru jeśli nie jest wymagany
         || PARSES.STZ:=null();
            _ret:=1
         ?}
      || {? exec('usr_upr','b_perm','STZ',_arg,OPERATOR.USER)
::       użytkownik ma uprawnienia
         || _oddz:=exec('FindAndGet','#table',STS,$_arg,,\"STS.ODDZ\",null());
            _oddz_ref:=exec('FindInSet','#table','ODDZ','KOD2',_oddz,_oddz);
            {? _oddz_ref & PARSES.ODDZ=_oddz_ref
::          ustawiony jest oddział zgodny z oddziałem stanowiska
            || PARSES.STZ:=_arg;
               _ret:=1
            ?}
         ?}
      ?}
   ?};
   _ret";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.REF:=PARSES.STZ;
   {? _ret.REF
   || _ret.ODDZ:=PARSES.STZ().ODDZ;
      _ret.KOD:=STS.KOD;
      _ret.NAZ:=STS.NAZ;
      _ret.KSG:=STS.KSG;
      _ret.SZ:=STS.SZ;
      _ret.MGR:=STS.MGR
   ?};
   _ret";
_par.valid:="
   _ret:='';
   {? exec('get','#params',6102,2,OPERATOR.USER)='T'
   || _ret:=__CHK.record(PARSES,,'STZ');
      {? _ret=''
      || _user:=OPERATOR.USER;
         {? exec('FindInSet','#table','USERS_UP','STZ',PARSES.STZ,_user,,0,'STZ')=null()
         || FUN.info('Brak uprawnień do stanowiska zakupu %1.'@[exec('record','#to_string',PARSES.STZ)]);
            _ret:='STZ'
         ?};
         _ret
      ?}
   ?};
   _ret";
_par.prolog:="
   {? PARSES.STZ & PARSES.ODDZ().KOD<>PARSES.STZ().ODDZ || PARSES.STZ:=null() ?};
   {? _c=1 || exec('filtrstz','parses') ?}
";
_par.afterChange:="
   ST.STZ:=PARSES.STZ;
   ST.STZ_KOD:=ST.STZ().KOD;
   {? PARSES.MG<>ST.MAG || VAR_DEL.delete('__sc','__sumsc','__sc_sel','__sc_grp','__sc_sum','__sc_sew') ?};
   ST.MAG:=PARSES.MG;
   ST.MAG_SYM:=PARSES.MG().SYM";
_par.needChange:="
   _user:=OPERATOR.USER;
   _ret:=
      {? exec('get','#params',6102,2,_user)='T'
      || exec('FindInSet','#table','USERS_UP','STZ',PARSES.STZ,_user,,0,'STZ')<>null()
      || 1
      ?};
   ~_ret";
_par.epilog:="{? _c=1 || STS.f_clear() ?}";

_ps.addPar(_par);
_ps.addDom(_par.ID,'LZK');

::----------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='WydzialProd';
_par.NAME:='Wydział'@;
_par.WIN:='WYD';
_par.required:="{? exec('auth_domain2','#b__box','TTE,TPP,WYP','M,W') || 'A_WYD.KOD' || '' ?}";
_par.value:="PARSES.A_WYD";
_par.args:="
   _ret:=obj_new('REF_SLO','REF_UD_SKL','SYMBOL');
   _ret.REF_SLO:=null();
   _ret.REF_UD_SKL:=null();
   _ret.SYMBOL:='';
   _ret
";
_par.setVal:="
   _ret:=0;
:: Ustawienie na podstawie przekazanego złączenia - typu _SLO
   {? var_pres('_c')=type_of(null()) & _c<>null() & ref_name(_c)=SLO.name()
   || SLO.cntx_psh();
      SLO.index('SL');
      SLO.prefix(XINFO.SLWYDZIA);
      {? SLO.seek(_c)
      || PARSES.A_WYD:=_c;
         _ret:=1
      ?};
      SLO.cntx_pop()
:: Ustawienie na podstawie przekazanego złączenia - typu UD_SKL
   |? var_pres('_c')=type_of(null()) & _c<>null() & ref_name(_c)=UD_SKL.name()
   || _sch:=exec('domyslny','schemat','PODZORG');
      UD_DEF.cntx_psh();
      UD_DEF.index('PODTEC');
      UD_DEF.prefix(_sch,_c);
      {? UD_DEF.first()
      || SLO.cntx_psh();
         SLO.index('SL');
         SLO.prefix(XINFO.SLWYDZIA,UD_DEF.UD_SKL().SYMBOL,);
         {? SLO.first()
         || PARSES.A_WYD:=SLO.ref();
            _ret:=1
         ?};
         SLO.cntx_pop()
      ?};
      UD_DEF.cntx_pop()
:: Ustawienie na podstawie przekazanego tekstu
   |? var_pres('_c')=type_of('') & _c<>''
   || SLO.cntx_psh();
      SLO.index('SL');
      SLO.prefix(XINFO.SLWYDZIA,_c,);
      {? SLO.first()
      || PARSES.A_WYD:=SLO.ref();
         _ret:=1
      ?};
      SLO.cntx_pop()
:: Ustawienie na podstawie przekazanego złączenia _c.REF_SLO
   |? var_pres('_c')=type_of(_a.args(_b)) & var_pres('REF_SLO',_c)=type_of(null()) &
      _c.REF_SLO<>null() & ref_name(_c.REF_SLO)=SLO.name()
   || SLO.cntx_psh();
      SLO.index('SL');
      SLO.prefix(XINFO.SLWYDZIA);
      {? SLO.seek(_c.REF_SLO)
      || PARSES.A_WYD:=_c.REF_SLO;
         _ret:=1
      ?};
      SLO.cntx_pop()
:: Ustawienie na podstawie przekazanego złączenia _c.REF_UD_SKL
   |? var_pres('_c')=type_of(_a.args(_b)) & var_pres('REF_UD_SKL',_c)=type_of(null()) &
      _c.REF_UD_SKL<>null() & ref_name(_c.REF_UD_SKL)=UD_SKL.name()
   || _sch:=exec('domyslny','schemat','PODZORG');
      UD_DEF.cntx_psh();
      UD_DEF.index('PODTEC');
      UD_DEF.prefix(_sch,_c.REF_UD_SKL);
      {? UD_DEF.first()
      || SLO.cntx_psh();
         SLO.index('SL');
         SLO.prefix(XINFO.SLWYDZIA,UD_DEF.UD_SKL().SYMBOL,);
         {? SLO.first()
         || PARSES.A_WYD:=SLO.ref();
            _ret:=1
         ?};
         SLO.cntx_pop()
      ?};
      UD_DEF.cntx_pop()
:: Ustawienie na podstawie przekazanego symbolu _c.SYMBOL
   |? var_pres('_c')=type_of(_a.args(_b)) & var_pres('SYMBOL',_c)=type_of('') & _c.SYMBOL<>''
   || SLO.cntx_psh();
      SLO.index('SL');
      SLO.prefix(XINFO.SLWYDZIA,_c.SYMBOL,);
      {? SLO.first()
      || PARSES.A_WYD:=SLO.ref();
         _ret:=1
      ?};
      SLO.cntx_pop()
   ?};
   _ret
";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.REF_SLO:=PARSES.A_WYD;
   _ret.REF_UD_SKL:=null();
   _ret.SYMBOL:=PARSES.A_WYD().KOD;
   {? _ret.SYMBOL<>''
   || _sch:=exec('domyslny','schemat','PODZORG');
      UD_DEF.cntx_psh();
      UD_DEF.index('SCHSYM');
      UD_DEF.prefix(_sch,_ret.SYMBOL,);
      {? UD_DEF.first()
      || _ret.REF_UD_SKL:=UD_DEF.UD_SKL
      ||
::       Nie znaleziono elementu dokładnie - następuje próba wyszukania pierwszego elementu po prefiksie
         UD_DEF.prefix(_sch,_ret.SYMBOL);
         {? UD_DEF.first()
         || _ret.REF_UD_SKL:=UD_DEF.UD_SKL
         || FUN.info(
               'Nie znaleziono elementu \'\'%1\'\' struktury organizacyjnej — '
               'należy sprawdzić konfigurację słownika wydziałów.'@
               [_ret.SYMBOL]
            )
         ?}
      ?};
      UD_DEF.cntx_pop()
   ?};
   _ret
";
_par.valid:="__CHK.record(PARSES,,'A_WYD')";
_par.prolog:="
   {? _c=1
   || exec('czytaj','#stalesys',,XINFO,'SLWYDZIA');
      {? XINFO.SLWYDZIA=null()
      || FUN.info('Nie wybrano słownika wydziałów w parametrach pracy systemu.'@); 0
      || 1
      ?}
   || 1
   ?}
";
_par.afterChange:="
   {? PARSES.A_WYD<>null()
   || ST.A_WYD:=PARSES.A_WYD;
      ST.WYD:=null();
      _sch:=exec('domyslny','schemat','PODZORG');
      UD_DEF.cntx_psh();
      UD_DEF.index('SCHSYM');
      UD_DEF.prefix(_sch,PARSES.A_WYD().KOD,);
      {? UD_DEF.first()
      || ST.WYD:=UD_DEF.UD_SKL
      ||
::       Nie znaleziono elementu dokładnie - następuje próba wyszukania pierwszego elementu po prefiksie
         UD_DEF.prefix(_sch,PARSES.A_WYD().KOD);
         {? UD_DEF.first()
         || ST.WYD:=UD_DEF.UD_SKL
         || FUN.info(
               'Nie znaleziono elementu \'\'%1\'\' struktury organizacyjnej — '
               'należy sprawdzić konfigurację słownika wydziałów.'@
               [PARSES.A_WYD().KOD]
            )
         ?}
      ?};
      UD_DEF.cntx_pop()
   ?};
   ~~
";
_par.epilog:="";
_ps.addPar(_par);
_ps.addDom(_par.ID,'TPP','TTE','WYP','TRE');

::----------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='StFiskalne';
_par.NAME:='Stanowisko fiskalne'@;
_par.WIN:='FIS';
_par.required:="''";
_par.value:="PARSES.FIS";
_par.args:="
   _ret:=obj_new('REF','KOD','AS','PORT','MDEV','K1','K2','K3','TYPFISK','A','B','C','D','E','F','ZW','ASKDRPAR'
      ,'FOOTER','HEADER','MODE');
   _ret.REF:=null();
   _ret.KOD:='';
   _ret.AS:=_ret.PORT:=_ret.MDEV:=_ret.MODE:=_ret.TYPFISK:='';
   _ret.K1:=_ret.K2:=_ret.K3:='';
   _ret.A:=_ret.B:=_ret.C:=_ret.D:=_ret.E:=_ret.F:=_ret.ZW:=null();
   _ret.ASKDRPAR:='';
   _ret.FOOTER:=_ret.HEADER:='';
   _ret";
_par.setVal:="
   _ret:=0;
   _arg:=
      {? var_pres('_c')=type_of(_a.args(_b))
::    przekazano tablicę
      || {? var_pres('REF',_c)=type_of(null()) & _c.REF || _c:=_c.REF
         |? var_pres('KOD',_c)=type_of('') & _c.KOD<>'' || _c:=_c.KOD
         || ~~
         ?}
::    przekazano FIS.ref() lub FIS.KOD
      || _c
      ?};
   _null:=0;
   {? var_pres('_arg')=type_of('')
:: ustalenie FIS.ref na podstawie FIS.KOD
   || _null:={? _c='' || 1 || -1 ?};
      _arg:=exec('FindInSet','#table','FIS','K',_c,_c)
   ?};
   {? var_pres('_arg')=type_of(null())
   || {? _null=0 & _arg=null() | _null=1
      ||
::       zerowanie parametru
         PARSES.FIS:=null();
         _ret:=1
      ||
::       ustawiony jest oddział zgodny z oddziałem stanowiska
         PARSES.FIS:=_arg;
         _ret:=1
      ?}
   ?};
   _ret";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.REF:=PARSES.FIS;
   {? _ret.REF
   || _ret.KOD:=PARSES.FIS().KOD;
      _ret.AS:=FIS.AS; _ret.PORT:=FIS.PORT; _ret.MDEV:=FIS.MDEV; _ret.MODE:=FIS.MODE; _ret.TYPFISK:=FIS.TYPFISK;
      _ret.K1:=FIS.K1; _ret.K2:=FIS.K2; _ret.K3:=FIS.K3;
      _ret.A:=FIS.A; _ret.B:=FIS.B; _ret.C:=FIS.C; _ret.D:=FIS.D; _ret.E:=FIS.E; _ret.F:=FIS.F; _ret.ZW:=FIS.ZW;
      _ret.ASKDRPAR:=FIS.ASKDRPAR;
      _ret.FOOTER:=FIS.FOOTER; _ret.HEADER:=FIS.HEADER
   ?};
   _ret";
_par.valid:="''";
_par.prolog:="
   {? _c=1 || FIS.prefix() ?};
   1";
_par.afterChange:="
   ST.FIS:=PARSES.FIS";
_par.needChange:="";
_par.epilog:="{? _c>0 || exec('fis2oz','fis',OPERATOR.USER().KOD,PARSES.FIS,1) ?}";
_ps.addPar(_par);
_ps.addDom(_par.ID,'LSP','LSS');

:: --------------------------------------------------------------------------------------------------------------------
:: Kasa
:: --------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='StKasowe';
_par.NAME:='Stanowisko kasowe'@;
_par.WIN:='STANKAS';
_par.required:="'STANKAS'";
_par.value:="PARSES.STANKAS";
_par.args:="
   _ret:=obj_new('REF','KOD','NAZWA');
   _ret.REF:=null();
   _ret.KOD:='';
   _ret.NAZWA:='';
   _ret";
_par.setVal:="
   _ret:=0;
   _arg:=
      {? var_pres('_c')=type_of(_a.args(_b))
::    przekazano tablicę
      || {? var_pres('REF',_c)=type_of(null()) & _c.REF || _c:=_c.REF
         |? var_pres('KOD',_c)=type_of(0) & _c.KOD<>0 || _c:=_c.KOD
         || ~~
         ?}
::    przekazano STANKAS.ref() lub STANKAS.KOD
      || _c
      ?};
   _null:=0;
   {? var_pres('_arg')=type_of(0)
:: ustalenie STANKAS.ref na podstawie STANKAS.KOD
   || _null:={? _c=0 || 1 || -1 ?};
      _arg:=exec('FindInSet','#table','STANKAS','KOD',_c)
   ?};
   {? var_pres('_arg')=type_of(null())
   || {? _null=0 & _arg=null() | _null=1
      ||
::       zerowanie parametru jeśli nie jest wymagany
         PARSES.STANKAS:=null();
         _ret:=1
      || {? exec('FindInSet','#table','KUSERUPR','KU_ST',_arg,OPERATOR.USER)<>null()
         || PARSES.STANKAS:=_arg;
            _ret:=1
         ?}
      ?}
   ?};
   _ret";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.REF:=PARSES.STANKAS;
   {? _ret.REF
   || _ret.KOD:=PARSES.STANKAS().KOD;
      _ret.NAZWA:=STANKAS.NAZWA
   ?};
   _ret";
_par.valid:="
   _ret:=__CHK.record(PARSES,,'STANKAS');
   {? _ret=''
   || {? ~exec('usr_upr_stankas','b_perm',PARSES.STANKAS,OPERATOR.USER)
      || FUN.info('Brak uprawnień do stanowiska kasowego %1.'@[exec('record','#to_string',PARSES.STANKAS)]);
         _ret:='STANKAS'
      ?}
   ?};
   _ret";
_par.prolog:="
   STANKAS.win_dict('WER2');
   {? _c=1 || exec('filtstankas','parses') ?}
";
_par.afterChange:="
   USRCONST.STANKAS:=exec('FindInSet','#table','KUSERUPR','KU_ST',PARSES.STANKAS,OPERATOR.USER);
   ST.STANKAS:=PARSES.STANKAS;
   exec('ustaw_zmienne','parses',_a,_a.isEdited('OkresRodzaj'));
   {? PARSES.ROK & _a.isChanged('OkresRok')=0 | _a.isChanged('StKasowe')
   || exec('open_tabele','open_tab','W',PARSES.ODDZ().KOD ,form(PARSES.ROK-2000,-2,0,'99'))
   ?}";
_par.needChange:="
   _ret:=
      {? PARSES.STANKAS
      || exec('FindInSet','#table','KUSERUPR','KU_ST',PARSES.STANKAS,OPERATOR.USER)<>null
      || 1
      ?};
   ~_ret";
_par.epilog:="{? _c=1 || STANKAS.f_clear() ?}";

_ps.addPar(_par);
_ps.addDom(_par.ID,'KAS');

:: --------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='Mkasa';
_par.NAME:='Multikasa'@;
_par.WIN:='MKASA';
_par.required:="";
_par.value:="PARSES.MKASA";
_par.args:="
   _ret:=obj_new('REF','NAZ');
   _ret.REF:=null();
   _ret.NAZ:='';
   _ret";
_par.setVal:="
   _ret:=0;
   _arg:=
      {? var_pres('_c')=type_of(_a.args(_b))
::    przekazano tablicę
      || {? var_pres('REF',_c)=type_of(null()) & _c.REF || _c:=_c.REF
         |? var_pres('NAZ',_c)=type_of('') & _c.NAZ<>'' || _c:=_c.NAZ
         || ~~
         ?}
::    przekazano MKASA.ref() lub MKASA.NAZ
      || _c
      ?};
   _null:=0;
   {? var_pres('_arg')=type_of('')
:: ustalenie MKASA.ref na podstawie MKASA.NAZ
   || _null:={? _c='' || 1 || -1 ?};
      _arg:=exec('FindInSet','#table','MKASA','NAZ',_c)
   ?};
   {? var_pres('_arg')=type_of(null())
   || {? _null=0 & _arg=null() | _null=1
      ||
::       zerowanie parametru jeśli nie jest wymagany
         PARSES.MKASA:=null();
         _ret:=1
      || {? exec('FindInSet','#table','MKASAUPR','UNIK',_arg,OPERATOR.USER)<>null()
         || PARSES.MKASA:=_arg;
            _ret:=1
         ?}
      ?}
   ?};
   _ret";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.REF:=PARSES.MKASA;
   {? _ret.REF
   || _ret.NAZ:=PARSES.MKASA().NAZ
   ?};
   _ret";
_par.valid:="
   _ret:='';
   {? ~exec('usr_upr_mkasa','b_perm',PARSES.MKASA,OPERATOR.USER)
   || FUN.info('Brak uprawnień do multikasy %1.'@[exec('record','#to_string',PARSES.MKASA)]);
      _ret:='MKASA'
   ?};
   _ret";
_par.prolog:="
   _wer:=MKASA.mk_sel('Multikasy'@,,1,'mkasa_parses',,,,,'P');
   MKASA.win_dict(_wer);
   {? _c=1 || exec('filtmkasa','parses') ?}
";
_par.afterChange:="
   USRCONST.MKASA:=exec('FindInSet','#table','MKASAUPR','UNIK',PARSES.MKASA,OPERATOR.USER)";
_par.needChange:="
   _ret:=
      {? PARSES.MKASA
      || exec('FindInSet','#table','MKASAUPR','UNIK',PARSES.MKASA,OPERATOR.USER)<>null
      || 1
      ?};
   ~_ret";
_par.epilog:="{? _c=1 || MKASA.f_clear() ?}";

_ps.addPar(_par);
_ps.addDom(_par.ID,'KAS');

:: --------------------------------------------------------------------------------------------------------------------
:: FINANSE
:: --------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='OkresRodzaj';
_par.NAME:='Rodzaj okresu'@;
_par.WIN:='OKRES_R';
_par.required:="'OKRO.NAZWA,ROK,-OKRO_R'";
_par.value:="$PARSES.OKRO+PARSES.OKRO_R+$PARSES.ROK_F";
_par.args:="_ret:=obj_new('OBSZAR','OKRO_F','OKRO_E','OKRO_C','OKRO_O',
                          'OKR','AR','AM','MASKA','DATA','OKRO','OKRO_R','NAZWA','ROK_BO');
            _ret.OKRO_F:=_ret.OKRO_E:=_ret.OKRO_C:=_ret.OKRO_O:=_ret.OKR:=null;
            _ret.MASKA:='';
            _ret.DATA:=date(0,0,0);
            _ret.AM:=_ret.AR:=0;
            _ret.NAZWA:='';
            _ret.ROK_BO:='';
            _ret";
_par.setVal:="_ret:=0;
:: jeżeli przekazano tablicę i jawnie podano OKRO.ref() oraz rodzaj okresu (W / O / Z).
              {? var_pres('_c')=type_of(_a.args(_b)) &
                 var_pres('OKRO',_c)=type_of(null()) & _c.OKRO<>null() & ref_tab(_c.OKRO)=OKRO &
                 var_pres('OKRO_R',_c)=type_of('') & (_c.OKRO_R='W' | _c.OKRO_R='O' | _c.OKRO_R='Z')
              || PARSES.OKRO:=_c.OKRO;
                 PARSES.OKRO_R:=_c.OKRO_R;
                 _ret:=1
:: jeżeli przekazano tablicę I wypełniony obszar
              |? var_pres('_c')=type_of(_a.args(_b)) & var_pres('OBSZAR',_c)=type_of('') & _c.OBSZAR<>''
              || _obszar:=exec('szuk_b_dom','parses',_c.OBSZAR);
                 OKR_OBSZ.cntx_psh();
:: dla FKS i pokrewnych na podstawie złączenia do OKRO_F
                 {? (_c.OBSZAR='FKS' | _c.OBSZAR='CTR' | _c.OBSZAR='OBG' | _c.OBSZAR='KAS' | _c.OBSZAR='KON')
                    & var_pres('OKRO_F',_c)=type_of(null()) & _c.OKRO_F<>null
                 || OKR_OBSZ.index('OKRO_F4');
                    OKR_OBSZ.prefix(_c.OKRO_F);
                    {? OKR_OBSZ.first()
                    || PARSES.OKRO:=OKR_OBSZ.OKRO;
                       OKRO_F.cntx_psh();
                       OKRO_F.prefix();
                       {? OKRO_F.seek(_c.OKRO_F)
                       || {? OKRO_F.POCZ=date(0,0,0) & OKRO_F.NR=0
                          || PARSES.OKRO_R:='O'
                          |? OKRO_F.POCZ=date(0,0,0) & OKRO_F.NR>0
                          || PARSES.OKRO_R:='Z'
                          || PARSES.OKRO_R:='W'
                          ?}
                       ?};
                       OKRO_F.cntx_pop();
                       _ret:=1
                    ?}
:: dla FKS i pokrewnych jeżeli przekazano maskę tabeli DOK
                 |? (_c.OBSZAR='FKS' | _c.OBSZAR='CTR' | _c.OBSZAR='OBG' | _c.OBSZAR='KAS' | _c.OBSZAR='KON')
                    & var_pres('MASKA',_c)=type_of('') & _c.MASKA<>''
                 || _rok:=2+(_c.MASKA+4);
                    _mc:=#(_c.MASKA+2);
                    OKRO.cntx_psh();
                    ROK_F.cntx_psh();
                    OKRO_F.cntx_psh();
                    ROK_F.index('KOD');
                    ROK_F.prefix(REF.FIRMA,_rok);
                    {? ROK_F.first()
                    || OKRO_F.index('ROK');
                       OKRO_F.prefix(ROK_F.ref(),_mc);
                       {? OKRO_F.first()
                       || OKR_OBSZ.index('OKRO_F4');
                          OKR_OBSZ.prefix(OKRO_F.ref());
                          {? OKR_OBSZ.first()
                          || PARSES.OKRO:=OKR_OBSZ.OKRO;
                             {? OKRO_F.POCZ=date(0,0,0) & OKRO_F.NR=0
                             || PARSES.OKRO_R:='O'
                             |? OKRO_F.POCZ=date(0,0,0) & OKRO_F.NR>0
                             || PARSES.OKRO_R:='Z'
                             || PARSES.OKRO_R:='W'
                             ?};
                             _ret:=1
                          ?}
                       ?}
                    ?};
                    ROK_F.cntx_pop();
                    OKRO_F.cntx_pop();
                    OKRO.cntx_pop()
:: dla LMG i pokrewnych na podstawie złączenia do OKR
                 |? (_c.OBSZAR='LMG' | _c.OBSZAR='LMO' | _c.OBSZAR='LSP' | _c.OBSZAR='LZK' | _c.OBSZAR='LUM')
                    & var_pres('OKR',_c)=type_of(null()) & _c.OKR<>null()
                 || OKR_OBSZ.index('OKR3');
                    OKR_OBSZ.prefix(_c.OKR);
                    {? OKR_OBSZ.first()
                    || PARSES.OKRO:=OKR_OBSZ.OKRO;
                       PARSES.OKRO_R:='W';
                       _ret:=1
                    || PARSES.OKRO:=OKRO.ref();
                       PARSES.OKRO_R:='W';
                       _ret:=1
                    ?}
:: dla LMG i pokrewnych na podstawie roku i nr miesiaca
                 |? (_c.OBSZAR='LMG' | _c.OBSZAR='LMO' | _c.OBSZAR='LSP' | _c.OBSZAR='LZK' | _c.OBSZAR='LUM')
                    & var_pres('AR',_c)=type_of(1) & _c.AR<>0
                    & var_pres('AM',_c)=type_of(1) & _c.AM<>0
                 || _obs:={? _c.OBSZAR='LMO' || 'LMG' || _c.OBSZAR ?};
                    OKR_OBSZ.index('OKR');
                    OKR_OBSZ.prefix(REF.FIRMA,exec('szuk_b_dom','parses',_obs),_c.AR,_c.AM);
                    {? OKR_OBSZ.first()
                    || PARSES.OKRO:=OKR_OBSZ.OKRO;
                       PARSES.OKRO_R:='W';
                       _ret:=1
                    || PARSES.OKRO:=OKRO.ref();
                       PARSES.OKRO_R:='W';
                       _ret:=1
                    ?}
:: dla obszaru LMG i pokrewnych na podstawie daty
                 |? (_c.OBSZAR='LMG' | _c.OBSZAR='LMO' | _c.OBSZAR='LSP' | _c.OBSZAR='LZK' | _c.OBSZAR='LUM')
                    & var_pres('DATA',_c)=type_of(date()) & _c.DATA<>date(0,0,0)
                 || _wyn:=null;
                    OKRO_F.cntx_psh();
                    OKRO_F.index('FIRMA_NR'); OKRO_F.prefix(REF.FIRMA);
                    {? OKRO_F.first()
                    || {! |?
                          {? (_c.DATA>=OKRO_F.POCZ & _c.DATA<=OKRO_F.KON) || _wyn:=OKRO_F.ref() ?};
                          _wyn=null & OKRO_F.next()
                       !};
                       {? _wyn
                       || OKR_OBSZ.index('OKRO_F4');
                          OKR_OBSZ.prefix(OKRO_F.ref());
                          {? OKR_OBSZ.first()
                          || PARSES.OKRO:=OKR_OBSZ.OKRO;
                             {? OKRO_F.POCZ=date(0,0,0) & OKRO_F.NR=0
                             || PARSES.OKRO_R:='O'
                             |? OKRO_F.POCZ=date(0,0,0) & OKRO_F.NR>0
                             || PARSES.OKRO_R:='Z'
                             || PARSES.OKRO_R:='W'
                             ?};
                             _ret:=1
                          ?}
                       ?}
                    ?};
                    OKRO_F.cntx_pop()
                 ?};
                 OKR_OBSZ.cntx_pop()
:: jeżeli przekazano parametr prosty
              |? var_pres('_c')=type_of(null())
              || {? var_pres('_c')=type_of(null()) & _c<>null() & ref_name(_c)=OKR.name()
                 || OKR_OBSZ.index('OKR3');
                    OKR_OBSZ.prefix(_c);
                    {? OKR_OBSZ.first()
                    || PARSES.OKRO:=OKR_OBSZ.OKRO;
                       PARSES.OKRO_R:='W';
                       _ret:=1
                    ?}
                 |? var_pres('_c')=type_of(null()) & _c<>null() & ref_name(_c)=OKRO_F.name()
                 || OKR_OBSZ.index('OKRO_F4');
                    OKR_OBSZ.prefix(_c);
                    {? OKR_OBSZ.first()
                    || PARSES.OKRO:=OKR_OBSZ.OKRO;
                       OKRO_F.cntx_psh();
                       OKRO_F.prefix();
                       {? OKRO_F.seek(_c)
                       || {? OKRO_F.POCZ=date(0,0,0) & OKRO_F.NR=0
                          || PARSES.OKRO_R:='O'
                          |? OKRO_F.POCZ=date(0,0,0) & OKRO_F.NR>0
                          || PARSES.OKRO_R:='Z'
                          || PARSES.OKRO_R:='W'
                          ?}
                       ?};
                       OKRO_F.cntx_pop();
                       _ret:=1
                    ?}
                 ?}
              ?};
              {? _ret
              || OKRO.cntx_psh(); PARSES.ROK:=PARSES.OKRO().ROK; OKRO.cntx_pop() ?};
              _ret";
_par.getVal:=
   "  _ret:=_a.args(_b);
      _ret.OKRO_F:=exec('zwr_obs_okres','parses','FKS',PARSES.OKRO,PARSES.OKRO_R);
      _ret.OKRO_E:=exec('zwr_obs_okres','parses','FST',PARSES.OKRO,PARSES.OKRO_R);
      _ret.OKRO_C:=exec('zwr_obs_okres','parses','CTR',PARSES.OKRO,PARSES.OKRO_R);
      _ret.OKRO_O:=exec('zwr_obs_okres','parses','OBG',PARSES.OKRO,PARSES.OKRO_R);
      _ret.OKR:=exec('zwr_obs_okres','parses','LMG',PARSES.OKRO);
      _ret.OKRO:=PARSES.OKRO;
      _ret.OKRO_R:=PARSES.OKRO_R;
      {? _ret.OKRO_R='O' | _ret.OKRO_R='Z'
      || {? PARSES.ROK_F<>null()
         || _ret.ROK_BO:=PARSES.ROK_F().NAZ
         ?}
      ?};
      OKRO.cntx_psh();
      _ret.NAZWA:=PARSES.OKRO().NAZWA+' '+$OKRO.ROK;
      OKRO.cntx_pop();
      _ret";
_par.valid:="{? PARSES.OKRO_R='W'
             || __CHK.record(OKRESY,,'PAR_OKR','PAR_ROK')
             || __CHK.record(OKRESY,,'PAR_ROK')
             ?}";
_par.BUFFER:=obj_new('AE');
_par.afterChange:="
   _buf:=_a.getBuf(_b);
   {? _buf.AE=~~
   || _buf.AE:=_b;
      _a.setBuf(_b,_buf)
   ?};
   {? _b='OkresRok'
   || exec('ustaw_zmienne','parses',_a,_buf.AE='OkresRodzaj');
      exec('open_tabele','open_tab','W',PARSES.ODDZ().KOD ,form(PARSES.ROK-2000,-2,0,'99'),
      {? type_of(_a.AREA)=type_of('') & _a.AREA='LSP_FAK' || 'sp' || 'dk' ?});
      {? _c=2 || exec('set_par_fin','parses') ?}
   ?}
";
:  prolog
_par.prolog:="";
_ps.addPar(_par);
_ps.addDom(_par.ID,'FKS','FST','CTR','OBG','OBE','KON');

:: --------------------------------------------------------------------------------------------------------------------

_par.ID:='OkresRok';
_par.NAME:='Okres'@;
_par.WIN:='OKRES';
_ps.addPar(_par);
_ps.addDom(_par.ID,'FKS','FST','LMG','LMO','LSP','LSS','LZK','TPP','TTE','CTR','OBG','OBE','KAS','KON','WYP','LUM','TRE','LTR','LUO');

:: --------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='JednostkaKsięgowa';
_par.NAME:='Jednostka księgowa'@;
_par.WIN:='ODD';
_par.required:="'ODD'";
_par.value:="PARSES.ODD_ZAK+$PARSES.ODD";
_par.args:="_ret:=obj_new('REF','KOD','ODD_ZAK');
            _ret.REF:=null();
            _ret.KOD:=_ret.ODD_ZAK:='';
            _ret
            ";
_par.setVal:="
   _ret:=0;
   _ref:=null;
   _kod:=_zak:='';
   {? var_pres('_c')=type_of(_a.args(_b))
   || {? var_pres('REF',_c)=type_of(null()) & _c.REF || _ref:=_c.REF ?};
      {? var_pres('KOD',_c)=type_of('') & _c.KOD<>'' || _kod:=_c.KOD ?};
      {? var_pres('ODD_ZAK',_c)=type_of('') & _c.ODD_ZAK<>'' || _zak:=_c.ODD_ZAK ?};
      {? _ref=null() & _kod<>''
      || _ref:=exec('FindInSet','#table','ODD','ODDZIALY',_kod,REF.FIRMA)
      ?};
      {? _zak='' & _ref<>null || _zak:='J'
      |? _zak='' & _ref=null || _zak:='W'
      ?}
   |? var_pres('_c')=type_of(null()) & ref_name(_c)=ODD.name()
   || ODD.cntx_psh();
      ODD.prefix();
      {? ODD.seek(_c)
      || _ref:=_c;
         _zak:='J'
      ?};
      ODD.cntx_pop()
   ?};
   {? (_ref<>null & exec('usr_fjks','b_perm',_ref)) | (_zak='W' & exec('usr_fjks_any','b_perm'))
   || PARSES.ODD:=_ref;
      PARSES.ODD_ZAK:=_zak;
      _ret:=1
   ?};
   _ret";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.ODD_ZAK:=PARSES.ODD_ZAK;
   {? _ret.ODD_ZAK='J'
   || _ret.REF:=PARSES.ODD;
      _ret.KOD:=PARSES.ODD().OD
   ?};
   _ret";
_par.valid:="{? PARSES.ODD_ZAK='J' || __CHK.record3(PARSES,'ODD','Jednostka księgowa - Skrót') || '' ?}";
_par.afterChange:="
   OPERATOR.DEPT:={? PARSES.ODD_ZAK='W' || null || PARSES.ODD ?};
   {? _c=2 || exec('set_par_fin','parses') ?}
";
_par.needChange:="
   _out:=0;
   {? PARSES.ODD_ZAK='' || PARSES.ODD_ZAK:='W' ?};
   {? PARSES.ODD_ZAK='W'
   || _out:=~Perm.hasFull('FJKS')
   |? PARSES.ODD_ZAK='J'
   || _out:=~exec('usr_fjks','b_perm',PARSES.ODD().OD)
   ?};
   _out
";
_par.prolog:="";
_par.epilog:="";
_ps.addPar(_par);
_ps.addDom(_par.ID,'FKS','HBN','FST','OBG','KON');

:: --------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='GrupaObiegu';
_par.NAME:='Dokumenty w obiegu z grupy'@;
_par.WIN:='ETYP_GRP';
_par.required:="";
_par.value:="$PARSES.ETYP_GRP";
_par.args:="_ret:=obj_new('REF','KOD');
            _ret.REF:=null();
            _ret.KOD:='';
            _ret
            ";
_par.setVal:="
   _ret:=0;
   _ref:=null;
   _kod:='';
   {? var_pres('_c')=type_of(_a.args(_b))
   || {? var_pres('REF',_c)=type_of(null()) & _c.REF || _ref:=_c.REF ?};
      {? var_pres('KOD',_c)=type_of('') & _c.KOD<>'' || _kod:=_c.KOD ?};
      {? _ref=null() & _kod<>''
      || _ref:=exec('FindInSet','#table','ETYP_GRP','N',_kod,REF.FIRMA)
      ?}
   |? var_pres('_c')=type_of(null()) & ref_name(_c)=ETYP_GRP.name()
   || ETYP_GRP.cntx_psh();
      ETYP_GRP.prefix();
      {? ETYP_GRP.seek(_c)
      || _ref:=_c
      ?};
      ETYP_GRP.cntx_pop()
   ?};
   {? (_ref<>null & exec('usr_fjks','b_perm',_ref)) | (_zak='W' & exec('usr_fjks_any','b_perm'))
   || PARSES.ETYP_GRP:=_ref;
      _ret:=1
   ?};
   _ret";
_par.getVal:="
   _ret:=_a.args(_b);
   _ret.REF:=PARSES.ETYP_GRP;
   {? _ret.REF
   || _ret.REF:=PARSES.ETYP_GRP;
      _ret.KOD:=PARSES.ETYP_GRP().N
   ?};
   _ret";
_par.valid:="''";
_par.afterChange:="";
_par.needChange:="";
_par.prolog:="
   {? _c=1 || exec('filtretyp_grp','parses') ?};
   1
";
_par.epilog:="";
_ps.addPar(_par);
_ps.addDom(_par.ID,'OBG','OBE');

:: --------------------------------------------------------------------------------------------------------------------

{? var_pres('_par')>100 || obj_del(_par) ?};
_par:=_ps.args();
_par.ID:='AktywnaWaluta';
_par.NAME:='Aktywna waluta'@;
_par.WIN:='WAL';
_par.required:="'WAL.KOD'";
_par.value:="PARSES.WAL";
_par.args:="_ret:=obj_new('REF','KOD');
            _ret.REF:=null();
            _ret.KOD:='';
            _ret";
_par.setVal:="_ret:=0;
              {? var_pres('_c')=type_of(_a.args(_b))
              || SLO.cntx_psh();
                 SLO.index('SL');
                 SLO.prefix();
                 {? (var_pres('REF',_c)=type_of(null()) & _c.REF<>null() & SLO.seek(_c.REF)) |
                    (var_pres('KOD',_c)=type_of('') & _c.KOD<>'' & SLO.find_key(FINFO.SLWAL,_c.KOD,))
                 || PARSES.WAL:=SLO.ref();
                    _ret:=1
                 ?};
                 SLO.cntx_pop()
              |? var_pres('_c')=type_of(null()) & ref_name(_c)=SLO.name()
              || SLO.cntx_psh();
                 SLO.prefix();
                 {? _c<>null & SLO.seek(_c)
                 || PARSES.WAL:=SLO.ref();
                    _ret:=1
                 ?};
                 SLO.cntx_pop()
              ?};
              _ret";
_par.getVal:="_ret:=_a.args(_b);
              _ret.REF:=PARSES.WAL;
              _ret.KOD:=PARSES.WAL().KOD;
              _ret";
_par.valid:="__CHK.record(PARSES,,'WAL')";
_par.afterChange:="
   SSTALE.WAL:=PARSES.WAL;
   {? _c=2 || exec('set_par_fin','parses') ?}
";
:  prolog
_par.prolog:="
   {? _c=1
   || exec('czytaj','#stalesys',,XINFO,'SLWAL');
      {? XINFO.SLWAL=null
      || FUN.info('Nie wybrano słownika walut w parametrach pracy systemu.'@); 0
      || 1
      ?}
   || 1
   ?}
";
_par.epilog:="";
_ps.addPar(_par);
_ps.addDom(_par.ID,'FKS','HBN','KON');

:: --------------------------------------------------------------------------------------------------------------------
:: Budowa okna z zakładkami.
:: --------------------------------------------------------------------------------------------------------------------

_ps.win_etab('Ewidencje finansowe i Zarządzanie'@);
_ps.win_epar('OkresRodzaj','OkresRok','JednostkaKsięgowa','GrupaObiegu','AktywnaWaluta');
_ps.win_etab('Logistyka i Produkcja'@);
_ps.win_epar('OkresRodzaj','OkresRok');
_ps.win_epar('OddzialLogProd','Magazyn','StSprzedazy','StZakupu','WydzialProd','StFiskalne');
_ps.win_epar('StKasowe','Mkasa');
_ps.win_etab('Personel'@);
_ps.win_epar('F_ZATR','JednostkaOrganizacyjna','ZakresDanych','ListaPłac','OkresRozliczeniowy_Harmonogramy');

_ps

:: --------------------------------------------------------------------------------------------------------------------
:: --------------------------------------------------------------------------------------------------------------------
:: Formuły obsługi pól zmiennej PARSES
:: --------------------------------------------------------------------------------------------------------------------
:: --------------------------------------------------------------------------------------------------------------------


\fzatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuły związane z obsługą pola PARSES.F_ZATR (forma zatrudnienia).
::   WE: _a  - kod obsługiwanej akcji:
::             BE - Przed redagowaniem.
::             AE - Po redagowaniu.
::   WY: Zależy od kodu obsługiwanej akcji.
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') || _a || '' ?};
_ps:=params_get().ParSes;
_id:='F_ZATR';
_buf:=_ps.getBuf(_id);

{? _akcja='BE'
|| _buf.F_ZATR:=PARSES.F_ZATR;
   _ps.setBuf(_id,_buf);
   1

|? _akcja='AE'
|| {? _buf.F_ZATR<>PARSES.F_ZATR
   || {? _buf.LISTA
      || PARSES.O:=''
      ?};
      {? _buf.HARM
      || PARSES.HARMOD:=PARSES.HARMDO:=date(0,0,0);
         PARSES.HARMNAZ:='';
         _buf.setHarmEnable()
      ?}
   ?};
:: Pozwólmy na wyjście z pola, nawet gdy nie jest wypełnione.
   1
?}


\deptsym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuły związane z obsługą pola PARSES.DEPTSYM (jednostka organizacyjna).
::   WE: _a  - kod obsługiwanej akcji:
::             BE - Przed redagowaniem.
::             F3 - Słownik/wybór.
::             AE - Po redagowaniu.
::   WY: Zależy od kodu obsługiwanej akcji.
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') || _a || '' ?};
_ps:=params_get().ParSes;
_id:='JednostkaOrganizacyjna';
_buf:=_ps.getBuf(_id);

{? _akcja='BE'
|| _buf.SYMBOL:=PARSES.DEPTSYM;
   _ps.setBuf(_id,_buf);
   1

|? _akcja='F3'
|| exec('ud_def_symbol_f3','schemat','PODZORG',,,2)

|? _akcja='AE'
|| _buf.LISTA:=_ps.isEdited('ListaPłac');
   _ref:=exec('ud_skl_symbol_ae','schemat','PODZORG',,2);
   UD_SKL.cntx_psh();
   UD_SKL.clear();
   {? UD_SKL.seek(_ref)
   || PARSES.DEPTSYM:=UD_SKL.SYMBOL
   ?};
   UD_SKL.cntx_pop();

   {? _buf.SYMBOL<>PARSES.DEPTSYM & _buf.LISTA
   || PARSES.O:=''
   ?};
   _buf.SYMBOL:=PARSES.DEPTSYM;
   _buf.REF:=_ref;
   _ps.setBuf(_id,_buf);
   PARSES.DEPTSYM='' | _ref<>null()
?}


\o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuły związane z obsługą pola PARSES.O (lista płac).
::   WE: _a - kod obsługiwanej akcji:
::             BE - Przed redagowaniem.
::             F3 - Słownik/wybór.
::             AE - Po redagowaniu.
::       _b - dodatkowy argument wywołania akcji zależny od kontekstu i akcji
::   WY: Zależy od kodu obsługiwanej akcji.
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') || _a || '' ?};
_ps:=params_get().ParSes;
_id:='ListaPłac';
_buf:=_ps.getBuf(_id);

_f_zatr:=PARSES.F_ZATR().KOD;

{? _akcja='BE'
|| {? _f_zatr=''
   || FUN.info('Przed redagowaniem symbolu listy płac należy uzupełnić formę współpracy.'@);
      0
   || 1
   ?}

|? _akcja='F3'
|| _lt:=fld();
   {? _lt='L'
   || _lt:=''
   ?};
:: w argumencje _b może być określone wyłączenie ukrywania akcji
:: tak będzie w przypadku pracy z widokiem uproszczonym obszarów
   _aid:='ZMOR';
   {? var_pres('_b')=type_of('')
   || _aid:=_b
   ?};
   _lt:=exec('select','lista_plac','PPL',_f_zatr,'*',_lt,_aid,1).LT;
   {? _lt<>''
   || _lt
   || 1
   ?}

|? _akcja='AE'
|| _buf.REF:=null();
   _buf.LT:='';
   _cfg:=1;
   {? PARSES.O='L'
   || PARSES.O:=''
   || _ref:=null();
      O.cntx_psh();
      O.index('FFZLT');
      O.prefix(exec('ref_firma','ustawienia'),_f_zatr,);
      {? O.find_key(-PARSES.O)
      || PARSES.O:=~-O.LT;
         _ref:=O.ref()
      ?};
      O.cntx_pop();
      {? _ref<>null()
      || _def:=exec('ud_def_firma','schemat','PODZORG');
         exec('filtruj_o','schemat','PPL',_def.REF,_f_zatr,'*');
         {? O.f_seek(_ref)
         || _buf.REF:=O.ref();
            _buf.LT:=~-O.LT
         || _cfg:=0
         ?};
         _ps.setBuf(_id,_buf)
      ?}
   ?};
   {? PARSES.O='' | _buf.REF<>null()
   || 1
   |? _cfg=0
   || FUN.emsg(
         'W ustawieniach programu nie określono jednostki organizacyjnej właściwej dla firmy.\n'
         'Wybór listy płac nie jest możliwy. Należy uzupełnić parametryzację programu.'@
      )
   || FUN.emsg('Lista o symbolu %1 nie istnieje.'@ [PARSES.O]);
      0
   ?}
?}


\harmod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuły związane z obsługą pola PARSES.HARMOD (okres rozliczeniowy - harmonogramowanie - data od).
::   WE: _a - kod obsługiwanej akcji:
::             BE - Przed redagowaniem.
::             F3 - Słownik/wybór.
::             AE - Po redagowaniu.
::   WY: Zależy od kodu obsługiwanej akcji.
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') || _a || '' ?};
_ps:=params_get().ParSes;
_id:='OkresRozliczeniowy_Harmonogramy';
_buf:=_ps.getBuf(_id);

{? _akcja='BE'
|| _buf.OD:=PARSES.HARMOD;
   1
|? _akcja='F3'
|| {? _buf.OKR_REF<>null()
   || A_OKR.seek(_buf.OKR_REF)
   |? PARSES.HARMOD<>date(0,0,0)
   || A_OKR.find_ge(PARSES.HARMOD)
   || A_OKR.first()
   ?};
   A_OKR.win_edit('RED');
   A_OKRN.actions('WER','W');
   {? A_OKR.select(,1,-1,{? exec('chk_role','#b__box',OPERATOR.USER,'PRC_CZP_DOKR') || '' || 'dpu:d' ?})
   || PARSES.HARMOD:=A_OKR.OD;
      PARSES.HARMDO:=A_OKR.DO;
      PARSES.HARMNAZ:=A_OKR.NAZ().NAZ;
      _buf.OD:=PARSES.HARMOD;
      _buf.OKR_REF:=A_OKR.ref();
      _ps.setBuf(_id,_buf);
      win_disp();
      PARSES.HARMOD
   || PARSES.HARMOD:=PARSES.HARMDO:=_buf.OD:=date(0,0,0);
      PARSES.HARMNAZ:='';
      _buf.OKR_REF:=null();
      _ps.setBuf(_id,_buf);
      win_disp()
   ?}
|? _akcja='AE'
|| {? PARSES.HARMOD=date(0,0,0)
   || PARSES.HARMDO:=date(0,0,0);
      PARSES.HARMNAZ:='';
      _buf.OKR_REF:=null();
      _ps.setBuf(_id,_buf);
      1
   || {? A_OKR.seek(_buf.OKR_REF,,1)
      || PARSES.HARMOD:=A_OKR.OD;
         PARSES.HARMDO:=A_OKR.DO;
         PARSES.HARMNAZ:=A_OKR.NAZ().NAZ;
         win_disp();
         _buf.OKR_REF:=A_OKR.ref();
         _ps.setBuf(_id,_buf);
         _ret:=1
      || PARSES.HARMOD:=PARSES.HARMDO:=_buf.OD:=date(0,0,0);
         PARSES.HARMNAZ:='';
         _buf.OKR_REF:=null();
         _ps.setBuf(_id,_buf);
         _ret:=0
      ?};
      _ret
   ?}
?}


\st_oddz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: ST.ODDZ
::  OLD: \st_oddz/defin.fml
::----------------------------------------------------------------------------------------------------------------------
ST.ODDZ


\st_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: ST.AR
::  OLD: \st_ar/defin.fml
::----------------------------------------------------------------------------------------------------------------------
ST.AR


\st_am
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: ST.AM
::  OLD: \st_am/defin.fml
::----------------------------------------------------------------------------------------------------------------------
ST.AM


\par_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: obiekt zawierający stałe dla parametrów
::----------------------------------------------------------------------------------------------------------------------
obj_decl('PARAM',
   obj_fld('REJ_UP',''),
   obj_fld('REJ_PL',''),
   obj_fld('DKR_UP',''),
   obj_fld('DNE_PR',''),
   obj_fld('DNE_ZW',''),
   obj_fld('KON_BW',''),
   obj_fld('KON_PB',''),
   obj_fld('KON_WK',''),
   obj_fld('OPR_NZ',''),
   obj_fld('OPR_ZB',''),
   obj_fld('OPR_PM',''),
   obj_fld('OPR_WK',''),
   obj_fld('OKR_BO','Bilans otwarcia'),
   obj_fld('OKR_BZ','Bilans zamknięcia'),
   obj_fld('DOK_BO','Bilans otwarcia'),
   obj_meth('__init',"
   _a.REJ_UP:='N';
   _a.REJ_PL:='T';
   _a.DKR_UP:='N';
   _a.DNE_PR:='próbne';
   _a.DNE_ZW:='końcowe';
   _a.KON_BW:='Bilansowe i wynikowe';
   _a.KON_PB:='Pozabilansowe';
   _a.KON_WK:='Wszystkie konta';
   _a.OPR_NZ:='Należności';
   _a.OPR_ZB:='Zobowiązania';
   _a.OPR_PM:='Pomocnicze';
   _a.OPR_WK:='Wszystkie'"))


\tst_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??
:: OPIS: Po redakcji pola AR tabeli STALE. Sprawdza wypełnienie.
::  OLD: \tst_okr/dok_zrd.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()=0
|| FUN.info('Niewypełnione pole "Rok bilansowy".'@); 0
|| 1
?}


\pocz_try
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: tryb przetwarzanych danych
::----------------------------------------------------------------------------------------------------------------------
PAR.DNE_PR


\pocz_ope
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: zakres przegladanych operacji
::----------------------------------------------------------------------------------------------------------------------
PAR.OPR_WK


\pocz_wal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.00]
:: OPIS: waluta wiodąca w KS, domyślnie jest to waluta narodowa z FINFO
::  OLD: \pocz_wal/fiks.fml
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,FINFO);
{? FINFO.NAROD<>0 || FINFO.NAROD(); SLO.ref() || 0 ?}


\pored_okro_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [17.00]
:: OPIS: Formuła po redakcji PARSES.ROK sprawdza czy jest zdefiniowany rok w tabeli OKRO
::----------------------------------------------------------------------------------------------------------------------
OKRO.cntx_psh();
_nazwa:=PARSES.OKRO().NAZWA;
OKRO.index('ROK');
OKRO.prefix(REF.FIRMA,1);
{? ~OKRO.find_key(PARSES.ROK)
|| FUN.info('W słowniku okresów brak zdefiniowanych okresów dla roku: %1'@[$PARSES.ROK]);
   _wy:=0
|| PARSES.OKRO:=OKRO.ref();
   _wy:=1
?};
OKRO.cntx_pop();
{? _wy
|| OKRO.cntx_psh();
   OKRO.index('NAZ');
   OKRO.prefix(REF.FIRMA);
   {? OKRO.find_key(PARSES.ROK,_nazwa)
   || PARSES.OKRO:=OKRO.ref()
   || FUN.info('W słowniku okresów brak okresu %1 dla roku: %2'
              '. Przyjęto za obowiązujący pierwszy okres roku.'@[_nazwa,$PARSES.ROK])
   ?};
   OKRO.cntx_pop()
?};
_wy


\prred_par_okro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [17.00]
:: OPIS: Formuła przed redakcją pola OKRESY.PAR_OKR
::----------------------------------------------------------------------------------------------------------------------
var_pres('OkroRodz')<=0 | PARSES.OKRO_R='W'


\dsp_parses_okro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Na wyświetl dla pola OKRESY.PAR_OKR
::----------------------------------------------------------------------------------------------------------------------
OKRESY.PAR_OKR:=PARSES.OKRO().NAZWA; 1


\f3_parses_okro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Na F3 dla pola OKRESY.PAR_OKR
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')<>''
|| exec('env_wt_core','#web_srv');
   OKRESY.PAR_ROK:={? PARSES.ROK || $PARSES.ROK || '0' ?}
?};
_zn_okr:=0;
OKRO.index('NAZ'); OKRO.prefix(REF.FIRMA);
{? OKRESY.PAR_OKR<>'' & #OKRESY.PAR_ROK
|| _zn_okr:=OKRO.find_key(#OKRESY.PAR_ROK,OKRESY.PAR_OKR)
|| exec('szuk_okr','okresy',date());
   {? ROZNE.UT_OKROD
   || ROZNE.UT_OKROD();
      OKRO.index('POCZ'); OKRO.prefix(REF.FIRMA,OKRO_F.POCZ,OKRO_F.KON);
      _zn_okr:=OKRO.first()
   ?}
?};
OKRO.index('UNIK'); OKRO.prefix(REF.FIRMA);
{? ~_zn_okr || OKRO.first() ?};
{? app_info('web_sesid')=''
|| OKRO.win_sel('WYB_OKRO');
   {? OKRO.select(,1,,{? __PARSES.DOMAIN=~~ || 'L' || '' ?})
   || PARSES.OKRO:=OKRO.ref(); OKRESY.PAR_OKR:=PARSES.OKRO().NAZWA;
      PARSES.ROK:=PARSES.OKRO().ROK; OKRESY.PAR_ROK:=$PARSES.ROK
   ?};
   OKRESY.PAR_OKR
|| PARSES.web_cntx_save(1);
   OKRO.web_select('WYBOKROW',,1)
?}


\ae_parses_okro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Po redakcji OKRESY.PAR_OKR
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')<>'' || exec('env_wt_core','#web_srv') ?};
_zwrot:=1;
OKRO.cntx_psh();
{? OKRESY.PAR_OKR=''
|| FUN.info('Nie wprowadzono nazwy okresu.'@); _zwrot:=0
|? PARSES.ROK
|| OKRO.index('NAZ'); OKRO.prefix(REF.FIRMA,PARSES.ROK,OKRESY.PAR_OKR);
   {? OKRO.first()
   || PARSES.OKRO:=OKRO.ref()
   || FUN.info('Nie znaleziono okresu o podanej nazwie.'@);
      PARSES.OKRO:=null; _zwrot:=0
   ?}
|| OKRO.index('NAZ_OKR'); OKRO.prefix(REF.FIRMA,OKRESY.PAR_OKR);
   {? OKRO.first()
   || PARSES.OKRO:=OKRO.ref(); PARSES.ROK:=PARSES.OKRO().ROK; OKRESY.PAR_ROK:=$PARSES.ROK
   || FUN.info('Nie znaleziono okresu o podanej nazwie.'@);
      PARSES.OKRO:=null; _zwrot:=0
   ?}
?};
{? _zwrot & var_press('DOMAIN',__PARSES)>0 & ~exec('is_okr_dom','#b__box',PARSES.OKRO,__PARSES.DOMAIN)
|| win_disp();
   FUN.info('Brak okresu %1 dla dziedziny \'%2\'.'@
      [PARSES.OKRO().NAZWA+' '+$OKRO.ROK,exec('name','#b_domain',__PARSES.DOMAIN)]);
   _zwrot:=0
?};
OKRO.cntx_pop();
_zwrot


\ten_okro_txt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [17.00]
:: OPIS: Formuła na Wybierz w okienku wertowania 'ROK' tabeli OKRO
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')=''
|| sel_exit()
|| PARSES.web_cntx_load(1);
   PARSES.OKRO:=OKRO.ref(); OKRESY.PAR_OKR:=PARSES.OKRO().NAZWA;
   PARSES.ROK:=PARSES.OKRO().ROK; OKRESY.PAR_ROK:=$PARSES.ROK;
   OKRO.web_close();
   web_top_update(1)
?}


\szuk_b_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Wyszukuje obszaru o podanym symbolu
::   WE: _a - symbol obszaru
::   WY: ref obszaru
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=null;
B_DOMAIN.cntx_psh(); B_DOMAIN.index('SYMBOL'); B_DOMAIN.prefix(_a,);
{? B_DOMAIN.first() || _zwrot:=B_DOMAIN.ref() ?};
B_DOMAIN.cntx_pop();
_zwrot


\zwr_obs_okres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [17.00]
:: OPIS: Formuła ustawia okres dla obszaru z parametru _a
::   WE: _a - obszar
::       _b - okres z tab. OKRO
::       _c - rodzaj okresu uzywany dla systemow z BO i BZ
::   WY: ref odpowiedniego okresu
::----------------------------------------------------------------------------------------------------------------------
_wy:=null();
_obszar:=exec('szuk_b_dom','parses',_a);
OKRO.cntx_psh(); OKR_OBSZ.cntx_psh();
OKRO.index('UNIK'); OKRO.prefix();
OKR_OBSZ.index('UNIK'); OKR_OBSZ.prefix();
{? OKR_OBSZ.find_key(_b,_obszar)
|| {? _a='FKS' | _a='FST' | _a='CTR' | _a='OBG' | _a='KAS'
   || _wy:=OKR_OBSZ.OKRO_F;
      {? _c='W' & OKR_OBSZ.OKRO_F().POCZ=date(0,0,0) & OKR_OBSZ.next()
      || _wy:=OKR_OBSZ.OKRO_F
      |? _c='O' | _c='Z'
      || OKRO_F.cntx_psh();
         OKRO_F.index('ROK');
         OKRO_F.prefix(PARSES.ROK_F);
         {? _c='O' & OKRO_F.first() || _wy:=OKRO_F.ref()
         |? _c='Z' & OKRO_F.last() || _wy:=OKRO_F.ref()
         ?};
         OKRO_F.cntx_pop()
      ?}
   |? _a='LMG' | _a='LMO' | _a='LSP' | _a='LZK' | _a='LUM'
   || _wy:=OKR_OBSZ.OKR
   ?}
?};
OKRO.cntx_pop(); OKR_OBSZ.cntx_pop();
_wy


\ustaw_zmienne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Ustawia zmienne na podstawie PARSES
::   WE: _a - wskazanie na obiekt ParSes
::       _b - rodzaj okresu ze zmiennej
::----------------------------------------------------------------------------------------------------------------------
OKRO.cntx_psh(); OKRO_F.cntx_psh(); ROK_F.cntx_psh();
{? PARSES.ODDZ
|| ST.ODDZ_KOD:=ST.ODDZ:=PARSES.ODDZ().KOD
|| ST.ODDZ_KOD:=ST.ODDZ:=''
?};
SSTALE.AOKRO:=PARSES.OKRO;
SSTALE.AOKRO_R:={? _b || PARSES.OKRO_R || 'W' ?};
ST.ROK:=form(SSTALE.AOKRO().ROK-2000,,0,'99');
:: ustawia stałe dla wszystkich obszarów na podstawie stałej globalnej OKRO
{? (_okro_f:=exec('zwr_obs_okres','parses','FKS',SSTALE.AOKRO,SSTALE.AOKRO_R); _okro_f<>null()) |
   (_okro_f:=exec('zwr_obs_okres','parses','FST',SSTALE.AOKRO,SSTALE.AOKRO_R); _okro_f<>null()) |
   (_okro_f:=exec('zwr_obs_okres','parses','CTR',SSTALE.AOKRO,SSTALE.AOKRO_R); _okro_f<>null()) |
   (_okro_f:=exec('zwr_obs_okres','parses','OBG',SSTALE.AOKRO,SSTALE.AOKRO_R); _okro_f<>null()) |
   (_okro_f:=exec('zwr_obs_okres','parses','KAS',SSTALE.AOKRO,SSTALE.AOKRO_R); _okro_f<>null()) |
   (_okro_f:=exec('zwr_obs_okres','parses','KON',SSTALE.AOKRO,SSTALE.AOKRO_R); _okro_f<>null())
|| SSTALE.AO:=OKRESY.OKRO_F:=ROZNE.OKRKON:=_okro_f;
   SSTALE.AR:=ROZNE.ROKKON:=OKRESY.OKRO_F().ROK;
   BILANSP.ASYNT:=SSTALE.AR().SYNT;
   BILANSP.ASEP:=SSTALE.AR().SEP;
   BILANSP.AROK:=SSTALE.AR;
   APARAM.ROK:=SSTALE.AOKRO().ROK;
   USRCONST.ROK:=SSTALE.AR;
   APARAM.STANKAS:={? USRCONST.STANKAS=0
                   || 0
                   || USRCONST.STANKAS().STANKAS().KOD
                   ?};
   APARAM.MASKA:={? APARAM.STANKAS=0
                 || USRCONST.ROK(); '_____'
                 || form(APARAM.STANKAS,-3)+(form(USRCONST.ROK();ROK_F.KOD)+2)
                 ?}
|| SSTALE.AR:=SSTALE.AO:=null
:: jesli nie ma pasującego okresu finansowego to ustawiamy sie na ostatnim
::   OKRO_F.cntx_psh(); OKRO_F.index('KON'); OKRO_F.prefix(REF.FIRMA);
::   {? OKRO_F.last()
::   || SSTALE.AO:=OKRESY.OKRO_F:=ROZNE.OKRKON:=OKRO_F.ref();
::      SSTALE.AR:=ROZNE.ROKKON:=OKRO_F.ROK;
::      BILANSP.ASYNT:=SSTALE.AR().SYNT;
::      BILANSP.ASEP:=SSTALE.AR().SEP
::   ?};
::   OKRO_F.cntx_pop()
?};
:: stale dla obszaru logistycznego
{? (_okr:=exec('zwr_obs_okres','parses','LMG',SSTALE.AOKRO); _okr<>null()) |
   (_okr:=exec('zwr_obs_okres','parses','LSP',SSTALE.AOKRO); _okr<>null()) |
   (_okr:=exec('zwr_obs_okres','parses','LZK',SSTALE.AOKRO); _okr<>null())
|| ST.OKR_REF:=_okr;
   ST.AR:=ST.OKR_REF().ROK;
   ST.AM:=ST.OKR_REF().MC;
   ST.OKR:=ST.OKR_REF().NAZ
?};
OKRO.cntx_pop(); OKRO_F.cntx_pop(); ROK_F.cntx_pop();
1


\pr_parses_logfld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: przed wyborem pól st.sprzedaży, st.zakupu, magazynu
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='STS'
|| BEER.SZ:='S';
   exec('filtrsts','parses')
|? _fld='STZ'
|| BEER.SZ:='Z';
   exec('filtrstz','parses')
|? _fld='MG'
|| exec('filtrmg','parses')
|? _fld='ODDZ'
|| exec('filtroddz','parses')
?};
1


\po_parses_logfld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: po wyborze oddziału, magazynu, st.sprzedaży, st.zakupu
::   WE: [_a] - PARSES.ODDZ
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _fld:=_a;
   _cur_afld:=0
|| _fld:=cur_afld();
   _cur_afld:=1
?};
{? _fld='ODDZ'
|| {? PARSES.MG<>null() & PARSES.MG().ODDZ<>PARSES.ODDZ().KOD
   || PARSES.MG:=null();
      {? ~_cur_afld
      || __PARSES.setVal('Magazyn',null(),1)
      ?}
   ?};
   {? PARSES.STS<>null() & PARSES.STS().ODDZ<>PARSES.ODDZ().KOD
   || PARSES.STS:=null();
      {? ~_cur_afld
      || __PARSES.setVal('StSprzedazy',null(),1)
      ?}
   ?};
   {? PARSES.STZ<>null() & PARSES.STZ().ODDZ<>PARSES.ODDZ().KOD
   || PARSES.STZ:=null();
      {? ~_cur_afld
      || __PARSES.setVal('StZakupu',null(),1)
      ?}
   ?}
|? _fld='MG'
|| {? PARSES.ODDZ=null() & PARSES.MG<>null()
   || PARSES.ODDZ:=exec('FindInSet','#table','ODDZ','KOD',PARSES.MG().ODDZ)
   ?}
|? _fld='STS'
|| {? PARSES.ODDZ=null() & PARSES.STS<>null()
   || PARSES.ODDZ:=exec('FindInSet','#table','ODDZ','KOD',PARSES.STS().ODDZ)
   ?}
|? _fld='STZ'
|| {? PARSES.ODDZ=null() & PARSES.STZ<>null()
   || PARSES.ODDZ:=exec('FindInSet','#table','ODDZ','KOD',PARSES.STZ().ODDZ)
   ?}
?};
1


\usuprmag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: uprawnienia dla wszystkich magazynow przepisuje dla danego usera
::  OLD: \usuprmag/rezerw.fml
::----------------------------------------------------------------------------------------------------------------------
USERS.cntx_psh();
{? (USERS.clear(); USERS.seek(OPERATOR.USER); USERS.r_lock(1,1,1))
|| BUFMG.index('US');
   BUFMG.prefix(OPERATOR.USER);
   {? BUFMG.first() || {! |? BUFMG.del() !} ?};

:: zamowienia sprzedazy opcja: 2,4
   _nie:=1;
   USERS_UP.index('MG');
   USERS_UP.prefix(OPERATOR.USER,'ZAM');
   {? USERS_UP.first()
   || {!
      |? {? USERS_UP.MG().PAL<>'T'
         || BUFMG.blank();
            BUFMG.US:=OPERATOR.USER;
            BUFMG.MG:=USERS_UP.MG;
            BUFMG.TYP:=2;
            BUFMG.NRK:=USERS_UP.NR;
            BUFMG.add(1);
            _nie:=0
         ?};
         USERS_UP.next()
      !}
   ?};
   USERS_UP.index('MG');
   USERS_UP.prefix(null,'ZAM');
   {? USERS_UP.first()
   || {!
      |? BUFMG.blank();
         BUFMG.US:=OPERATOR.USER;
         BUFMG.MG:=USERS_UP.MG;
         BUFMG.TYP:=4;
         BUFMG.NRK:=USERS_UP.NR;
         BUFMG.add(1);
         {? _nie & USERS_UP.MG().PAL<>'T'
         || BUFMG.blank();
            BUFMG.US:=OPERATOR.USER;
            BUFMG.MG:=USERS_UP.MG;
            BUFMG.TYP:=2;
            BUFMG.NRK:=USERS_UP.NR;
            BUFMG.add(1)
         ?};
         USERS_UP.next()
      !}
   ?};

:: zamowienia wewnetrzne opcja: 9,10
   _nie:=1;
   USERS_UP.index('MG');
   USERS_UP.prefix(OPERATOR.USER,'ZAW');
   {? USERS_UP.first()
   || {!
      |? {? USERS_UP.MG().PAL<>'T'
         || BUFMG.blank();
            BUFMG.US:=OPERATOR.USER;
            BUFMG.MG:=USERS_UP.MG;
            BUFMG.TYP:=9;
            BUFMG.NRK:=USERS_UP.NR;
            BUFMG.add(1);
            _nie:=0
         ?};
         USERS_UP.next()
      !}
   ?};
   USERS_UP.index('MG');
   USERS_UP.prefix(null,'ZAW');
   {? USERS_UP.first()
   || {!
      |? BUFMG.blank();
         BUFMG.US:=OPERATOR.USER;
         BUFMG.MG:=USERS_UP.MG;
         BUFMG.TYP:=10;
         BUFMG.NRK:=USERS_UP.NR;
         BUFMG.add(1);
         {? _nie & USERS_UP.MG().PAL<>'T'
         || BUFMG.blank();
            BUFMG.US:=OPERATOR.USER;
            BUFMG.MG:=USERS_UP.MG;
            BUFMG.TYP:=9;
            BUFMG.NRK:=USERS_UP.NR;
            BUFMG.add(1)
         ?};
         USERS_UP.next()
      !}
   ?};

:: magazyny + magazyn bez skladow celnych i paletowych opcja: 3 i 7
   USERS_UP.index('MG');
   USERS_UP.prefix(OPERATOR.USER,'MG');
   {? USERS_UP.first()
   || {!
      |? BUFMG.blank();
         BUFMG.US:=OPERATOR.USER;
         BUFMG.MG:=USERS_UP.MG;
         BUFMG.TYP:=3;
         BUFMG.add(1);
         {? USERS_UP.MG().PAL='N' & USERS_UP.MG().SKL='N'
         || BUFMG.blank();
            BUFMG.US:=OPERATOR.USER;
            BUFMG.MG:=USERS_UP.MG;
            BUFMG.TYP:=7;
            BUFMG.add(1)
         ?};
         USERS_UP.next()
      !}
   ?};

:: magazyny + magazyn dla surowcow: 5,6
   _par:=exec('get','#params',500002,2);
   MG.cntx_psh();
   MG.index('MAG');
   MG.prefix();
   {? MG.first()
   || {!
      |? BUFMG.blank();
         BUFMG.US:=OPERATOR.USER;
         BUFMG.MG:=MG.ref();
         BUFMG.TYP:=5;
         BUFMG.add(1);
         {? _par*MG.SYM>0
         || BUFMG.blank();
            BUFMG.US:=OPERATOR.USER;
            BUFMG.MG:=MG.ref();
            BUFMG.TYP:=6;
            BUFMG.add(1)
         ?};
         MG.next()
      !}
   ?};
   MG.cntx_pop();
   USERS.r_unlock()
?};
USERS.cntx_pop();
~~


\parses_wal_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła przed redakcją aktywnej waluty w parametrach pracy
::----------------------------------------------------------------------------------------------------------------------
{? FINFO.SLWAL || FINFO.SLWAL().SLU() ?};
1


\a_wyd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuły związane z obsługą pola PARSES.A_WYD (wydział)
::   WE: _a  - kod obsługiwanej akcji:
::             BE - Przed redagowaniem
::   WY: Zależy od kodu obsługiwanej akcji.
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') || _a || '' ?};

{? _akcja='BE'
|| exec('jakislw','wzorce')

|| ~~
?}


\filtrmg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Ustawia filtr dla magazynu
::----------------------------------------------------------------------------------------------------------------------
MG.prefix();
MG.f_clear();
MG.f_set('SYM,NAZ','join USERS_UP'
 ,'USERS_UP.USERS=:_a and USERS_UP.AKR=\'MG\' and (\"MG\".ODDZ=\':_b\' or \':_b\'=\'\')'
 +{? BPMN.TYP_MG='R' || ' and \"MG\".SL=\'T\''
  |? BPMN.TYP_MG='P' || ' and \"MG\".PAL=\'T\''
  |? BPMN.TYP_MG='O' || ' and \"MG\".MG_OPAK<>\'\''
  |? BPMN.TYP_MG='D' || ' and (\"MG\".TYP=\'DOSTAWY\' or \"MG\".TYP=\'DOSTEWI\')'
  |? BPMN.TYP_MG='K' || ' and \"MG\".KOOP=\'T\''
  |? BPMN.TYP_MG='W' || ' and (\"MG\".TYP=\'DOSTAWY\' or \"MG\".TYP=\'DOSTEWI\') and \"MG\".KOOP=\'N\' and \"MG\".PAL=\'N\' and \"MG\".SKL=\'N\''
  || ''
  ?}
 ,OPERATOR.USER,PARSES.ODDZ().KOD);
:: sprawdzenie stanu w magazynach typu DOSTAWY, DOSTEWI
{? BPMN.TYP_MG='D'
|| {? MG.f_first()
   || {!
      |? {? ~exec('sprStanSC','parses',MG.ref())
         || MG.f_del()
         || MG.f_next()
         ?}
      !};
      MG.f_first()
   ?}
?};
~~


\filtrsts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Ustawia filtr dla stanowisk sprzedaży
::----------------------------------------------------------------------------------------------------------------------
STS.prefix();
STS.f_clear();
STS.f_set('KOD,NAZ','join USERS_UP using(USERS_UP.STS,STS.REFERENCE)'
 ,'USERS_UP.USERS=:_a and USERS_UP.AKR=\'STS\' and (\"STS\".ODDZ=\':_b\'  or \':_b\'=\'\')'
 ,OPERATOR.USER,PARSES.ODDZ().KOD);
~~


\filtrstz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Ustawia filtr dla stanowisk sprzedaży
::----------------------------------------------------------------------------------------------------------------------
STS.prefix();
STS.f_clear();
STS.f_set('KOD,NAZ','join USERS_UP using(STS.REFERENCE,USERS_UP.STZ)'
 ,'USERS_UP.USERS=:_a and USERS_UP.AKR=\'STZ\' and (\"STS\".ODDZ=\':_b\' or \':_b\'=\'\')'
 ,OPERATOR.USER,PARSES.ODDZ().KOD);
~~


\filtroddz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Ustawia filtr dla oddziału
::----------------------------------------------------------------------------------------------------------------------
ODDZ.prefix();
ODDZ.f_clear();
ODDZ.f_set('KOD,NAZ','join USERS_UP'
 ,'USERS_UP.USERS=:_a and USERS_UP.AKR=\'ODDZ\''
 ,OPERATOR.USER);
~~


\filtretyp_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AFI] [17.00]
:: OPIS: Ustawia filtr dla grup obiegu
::----------------------------------------------------------------------------------------------------------------------
ETYP_GRP.prefix();
ETYP_GRP.f_clear();
ETYP_GRP.f_set('N,NAZ',
      'left join USERSOGR using(USERSOGR.OGRP,ETYP_GRP.REFERENCE)',
      '(:_a=1 or USERSOGR.USERS=:_b) and ETYP_GRP.FIRMA=:_c',Perm.hasFull('OGRP'),OPERATOR.USER,REF.FIRMA);
1


\bv_odd_zak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed wyświetleniem PARSES.ODD_ZAK
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')<>'' || return('') ?};
{? ~Perm.hasFull('FJKS')
|| PARSES.ODD_ZAK:='J';
   {? PARSES.ODD
   || USERSDEP.cntx_psh();
      USERSDEP.index('USERSDEP'); USERSDEP.prefix(REF.FIRMA,OPERATOR.USER,PARSES.ODD().OD,);
      _has:=USERSDEP.first();
      USERSDEP.cntx_pop();
      {? ~_has || PARSES.ODD:=null ?}
   ?}
?};
_enable:=PARSES.ODD_ZAK='J';
PARSES.efld_opt(__PARSES.WE,'enable='+$_enable,PARSES,'ODD','OD');
PARSES.efld_opt(__PARSES.WE,'enable='+$_enable,PARSES,'ODD','N');
''


\be_odd_zak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed redakcją PARSES.ODD_ZAK
::----------------------------------------------------------------------------------------------------------------------
Perm.hasFull('FJKS')


\ae_odd_zak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Po redakcji PARSES.ODD_ZAK
::----------------------------------------------------------------------------------------------------------------------
{? PARSES.ODD_ZAK='W' || PARSES.ODD:=null ?};
{? app_info('web_sesid')=''
|| win_disp()
|| {? PARSES.ODD_ZAK='J'
   || PARSES.web_efld_opt('WEB01',,'mark=1, enable=1, editable=1',PARSES,'ODD')
   || PARSES.web_efld_opt('WEB01',,'mark=0, enable=0, editable=0',PARSES,'ODD')
   ?}
?};
1


\be_parses_odd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed redakcją PARSES.ODD
::----------------------------------------------------------------------------------------------------------------------
{? PARSES.ODD_ZAK='J'
|| ODD.prefix();
   ODD.f_clear();
   ODD.f_set('OD,N',
         'left join USERSDEP using(USERSDEP.DEPT,ODD.REFERENCE)',
         '(:_a=1 or USERSDEP.USERS=:_b) and ODD.FIRMA=:_c',Perm.hasFull('FJKS'),OPERATOR.USER,REF.FIRMA);
   1
|| ODD.prefix();
   ODD.f_clear();
   0
?}


\be_okro_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed redakcją PARSES.ROK
::----------------------------------------------------------------------------------------------------------------------
params_get().ParSes.isEdited('OkresRodzaj') & PARSES.OKRO_R<>'W'


\ae_parses_okro_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Po redakcji PARSES.OKRO_R
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')=''
|| win_disp()
|| _enable:=(PARSES.OKRO_R='W');
   PARSES.web_efld_opt('WEB01',,'mark='+$_enable+', enable='+$_enable,OKRESY,'PAR_OKR');
   {? PARSES.OKRO_R='W'
   || PARSES.web_efld_opt('WEB01',,'mark=0, enable=1, editable=0',OKRESY,'PAR_ROK')
   || PARSES.web_efld_opt('WEB01',,'mark=1, enable=1, editable=1',OKRESY,'PAR_ROK')
   ?}
?};
1


\bv_parses_okro_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Po redakcji PARSES.OKRO_R
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')<>'' || return('') ?};
_enable:=PARSES.OKRO_R='W';
PARSES.efld_opt(__PARSES.WE,'enable='+$_enable+',mark='+$_enable,OKRESY,'PAR_OKR');
''


\set_par_fin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Ustawia parametry dziedziny FKS
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__FKSROZ')>0 & __FKSROZ=1
|| _an:=OP.AN;
   _tz:=OP.TZ;
   _sym:=OP.SYM;
   _do:=OP.DO;
   _st:=OP.STAN;
   _usym:=OP.SYM_ROK;
   _p:=ROZNE.PREFIX; ROZNE.PREFIX:='';
   _m:=ROZNE.MASKA; ROZNE.MASKA:='';
   exec('zakr_op','rozrach');
   {? POMOC.STAN='W' | POMOC.STAN=''
   || OP.find_key(_an,_tz,_sym,_do)
   || OP.find_key(_an,_tz,_sym,_usym,_do)
   ?};
   ROZNE.PREFIX:=_p;
   ROZNE.MASKA:=_m;
   exec('op_przeglad1','rozrach')
?}


\sttypy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: Wartosc poczatkowa ND.TYP
::  OLD: \sttypy/magazyn.fml
::----------------------------------------------------------------------------------------------------------------------
ST.TYPYDOK


\st_mag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: przypisanie wartosci zmiennej
::  OLD: \st_mag/magazyn.fml
::----------------------------------------------------------------------------------------------------------------------
ST.MAG


\monthok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: kontrola czy data jest z bieżącego m-ca
::   WE: [_a] - data ... domyslnie fld()
::   WY: 1/0
::  OLD: \monthok/defin.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1  || {? type_of(_a)<>4 || _a:=fld() ?}  || _a:=fld()  ?};

_wyn:=1;
{? _a<date(ST.AR,ST.AM,1) | _a>date(ST.AR,ST.AM,0)
|| FUN.info('Data musi pochodzić z miesiąca: %1.'@ [date(ST.AR,ST.AM,1)$8]);
   _wyn:=0
?};
_wyn


\yearok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2011]
:: OPIS: kontrola czy zgodny rok
::   WE: [_a] - data
::   WY: 1/0
::  OLD: \yearok/defin.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1  || {? type_of(_a)<>4 || _a:=fld() ?}  || _a:=fld()  ?};

_wyn:=1;
{? _a~1<>ST.AR
|| FUN.info('Data musi pochodzić z bieżącego roku: %1.'@[$ST.AR]);
   _wyn:=0
?};
_wyn


\bv_okro_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed wyświetleniem OKRESY.PAR_ROK
::----------------------------------------------------------------------------------------------------------------------
OKRESY.PAR_ROK:={? PARSES.OKRO_R='W'
                || $PARSES.ROK
                || PARSES.ROK_F().NAZ
                ?};
~~


\f3_okro_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Klawisz F3 pola OKRESY.PAR_ROK
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')=''
|| ROK_F.cntx_psh();
   ROK_F.index('NAZWA'); ROK_F.prefix(REF.FIRMA);
   {? ~ROK_F.find_key(fld()) || ROK_F.first() ?};
   ROK_F.index('ROKPOCZ'); ROK_F.prefix(REF.FIRMA);
   _o:=ROK_F.mk_sel('Rok'@,'P',,'rok_f_sel',,,,,'P','T');
   ROK_F.win_fld(_o,,'NAZ');
   ROK_F.win_fld(_o,,'ZAM',,,,,,,,,2,,"'T'","'N'");
   ROK_F.win_act(_o,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
   ROK_F.win_sel(_o);
   {? ROK_F.select(,1,5)
   || _sym:=ROK_F.NAZ
   || _sym:=0
   ?};
   ROK_F.cntx_pop();
   _sym
|| exec('env_wt_core','#web_srv');
   PARSES.web_cntx_save(1);
   ROK_F.index('NAZWA'); ROK_F.prefix(REF.FIRMA);
   {? ~ROK_F.find_key(OKRESY.PAR_ROK) || ROK_F.first() ?};
   ROK_F.web_select('ROKWWW',,1)
?}


\wyb_okro_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Wybór roku - WWW
::----------------------------------------------------------------------------------------------------------------------
PARSES.web_cntx_load(1);
PARSES.ROK_F:=ROK_F.ref();
ROK_F.web_close();
web_top_fld_update(1,1);
1


\ae_okro_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Po redakcji OKRESY.PAR_ROK
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')<>'' || exec('env_wt_core','#web_srv') ?};
{? OKRESY.PAR_ROK=''
|| PARSES.ROK_F:=null; 1
|| ROK_F.cntx_psh(); ROK_F.index('NAZWA'); ROK_F.prefix(REF.FIRMA,OKRESY.PAR_ROK);
   {? ROK_F.first()
   || OKRESY.PAR_ROK:=ROK_F.NAZ;
      PARSES.ROK_F:=ROK_F.ref();
      _ok:=1
   || FUN.info('Nie znaleziono roku %1.'@[OKRESY.PAR_ROK]);
      _ok:=0
   ?};
   ROK_F.cntx_pop();
   _ok
?}


\bobs_parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Przed obsługą tabeli PARSES
::----------------------------------------------------------------------------------------------------------------------
exec('env_wt_core','#web_srv');
1


\filtstankas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Ustawia filtr dla stanowisk kasowych
::----------------------------------------------------------------------------------------------------------------------
STANKAS.prefix();
STANKAS.f_clear();
STANKAS.f_set('KOD,NAZWA','join KUSERUPR using(STANKAS.REFERENCE,KUSERUPR.STANKAS)'
 ,'KUSERUPR.KU=:_a '
 ,OPERATOR.USER);
~~


\filtmkasa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Ustawia filtr dla multikas
::----------------------------------------------------------------------------------------------------------------------
MKASA.prefix();
MKASA.f_clear();
MKASA.f_set('NAZ','join MKASAUPR using(MKASA.REFERENCE,MKASAUPR.MKASA)'
 ,'MKASAUPR.USER=:_a '
 ,OPERATOR.USER);
~~


\filtrfzatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: wesos [19.42]
:: OPIS: Ustawia filtr dla form zatrudnienia
::----------------------------------------------------------------------------------------------------------------------
F_ZATR.prefix();
F_ZATR.f_clear();
F_ZATR.f_set('KOD','join USERS_FZ using(F_ZATR.REFERENCE,USERS_FZ.F_ZATR)'
 ,'USERS_FZ.USERS=:_a '
 ,OPERATOR.USER);
~~


\sprStanSC
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: sprawdza stan SC na danym magazynie
::   WE: _a - magazyn
::   WY: 1-jest stan 0-nie ma
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_mg:=BEER.MG;
BEER.MG:=_a;
OKR.cntx_psh();
SC.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.last()
|| {!
   |? SC.use('stc__'+BEER.MG().ODDZ+($OKR.ROK+2));
      _wyn+=exec('FindInSet','#table','SC','SC',BEER.MG)<>null();
      ~_wyn & OKR.prev()
   !}
?};
OKR.cntx_pop();
SC.cntx_pop();
BEER.MG:=_mg;
_wyn


\br_okro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Rekord przed tabeli OKRO
::----------------------------------------------------------------------------------------------------------------------
_domamin:={? var_press('DOMAIN',__PARSES)>0 || __PARSES.DOMAIN || '' ?};
{? _domamin<>''
|| {? _domamin='TTE' | _domamin='WYP' | _domamin='LMO' | _domamin='LUM' | _domamin='TRE' | _domamin='LTR' | _domamin='LUO'
   || _domamin:='LMG'
   ?};
   _status:=exec('status','okresy',OKRO.ref(),_domamin);
   {? _status=0
   || Color.fnd_kol('OKRO#02#01')
   |? _status=1
   || Color.fnd_kol('OKRO#02#00')
   |? _status=2
   || Color.fnd_kol('OKRO#02#02')
   || ''
   ?}
|| ''
?}


\legenda_okro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Akcja legenda okna tabeli OKRO
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','OKRO#02')

:Sign Version 2.0 jowisz:1045 2023/11/17 08:02:38 20024ea7757f94c816620ae83f81c2bf4deb4d75c0316e65ec43219cff3486c4b599c031636dfc1b9410f55ffb51aff6ba7cc6acdccd7d8cc425774cd78180c33f0b3d0538c0f206f4b137d0648a3b3447047f8e96184efa378801792a3d4c93072859fe8bf842a90d4cb11fbc508848d9fa8d9881e0e0a6084a763e7aeb90bc
