:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_kwn.fml [12.51]
:: Utworzony: 2019/04/25
:: Autor: jaws
:: Systemy: PPK
::======================================================================================================================
:: Zawartość: Formuły odpowiedzialne za obsługę tabeli korekt wpłat.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed dołączeniem lub poprawieniem wiersza tabeli PPK_KWN.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('data_kor_ae','ppk_kwn');
{? PPK_KWN.P<>null()
|| P.cntx_psh();
   PPK_KWN.OSOBA:=PPK_KWN.P().OSOBA;
   P.cntx_pop()
?};
1


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli PPK_KWN.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_kwn') & exec('_chk','ppk_kwn',0)


\_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po dołącz" tabeli PPK_KWN.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

exec('__RUB','object');

_R:=__RUB.sys_rub(72);
{? _R.first()
|| _pominietePod:=_pominieteDod:=0;
   R.prefix();
   _par:=exec('gen_par','ppk_rpl');
   _par.OSOBA:=PPK_KWN.OSOBA;
   _par.R:=PPK_KWN.R;
   _par.M:=PPK_KWN.M;
   _par.DATA:=PPK_KWN.DATA_KOR;
:: pobierz kwoty zarejestrowanych do tej pory zwrotów
   _zwr:=exec('g100_zw','ppk_rpl',_par);
   PPK_KWK.cntx_psh();
   PPK_KWK.prefix();
   _rFir:=__RUB.sys_sql(724);
   _rFirPod:=__RUB.sys_sql(7241);
   _rFirDod:=__RUB.sys_sql(7242);
   {!
   |? {? R.seek(_R.R,)
      || PPK_KWK.blank(1);
         PPK_KWK.PPK_KWN:=PPK_KWN.ref();
         PPK_KWK.R:=R.ref();
         {? PPK_KWN.TYP='Z' & PPK_KWN.RODZAJ='P'
::          dla zwrotu pracodawcy uzupełnij kwoty
         || PPK_POD.cntx_psh();
            PPK_POD.index('UNIQUE');
            LS.cntx_psh();
            O.cntx_psh();
            O.index('LISTYUBZ');
            O.prefix(exec('ref_firma','ustawienia'),PPK_KWN.R,PPK_KWN.M);
::          przeglądaj listy osoby wg miesiąca ubezpieczeniowego
            _loop:=O.first();
            {!
            |? _loop
            |! LS.use(-O.LT);
               LS.index('OSOBAKOD');
               LS.prefix(exec('ref_firma','ustawienia'),PPK_KWN.OSOBA,R.RN);
::             uwzględnij wszystkie wpłaty osoby
               _loop:=LS.first();
               {!
               |? _loop
               |! {? {? LS.RH=null
                     || {? O.D<>date(0,0,0)
                        || O.D<=PPK_KWN.DATA_KOR
                        || 1
                        ?}
                     || LS.RH().DWY<=PPK_KWN.DATA_KOR
                     ?}
                  || _pomin:=0;
::                   Sprawdzam czy rubryka dotyczy wpłat pracodawcy:
                     {? (','+_rFir+',')*(','+$R.RN+',')
                     || PPK_POD.prefix(LS.P,LS.O,LS.RH);
::                      Do tej listy wyliczenia istnieje przychód którego nie należy uwzględniać:
                        {? PPK_POD.first() & PPK_POD.POD_LICZ='N'
                        || _pomin:=1
                        ?}
                     ?};
                     {? ~_pomin
                     || PPK_KWK.KW+=LS.KW
                     || {? (','+_rFirPod+',')*(','+$R.RN+',')
                        || _pominietePod+=LS.KW
                        |? (','+_rFirDod+',')*(','+$R.RN+',')
                        || _pominieteDod+=LS.KW
                        ?}
                     ?}
                  ?};

                  _loop:=LS.next()
               !};

               _loop:=O.next()
            !};
            O.cntx_pop();
            LS.cntx_pop();
            PPK_POD.cntx_pop()
         ?};
::       pomniejsz kwotę o sumę zwrotów zarejestrowanych do dnia nowego zwrotu
         {? __RUB.sys_attr(PPK_KWK.R,720,_par.DATA) || PPK_KWK.KW+=_zwr.FIR_POD
         |? __RUB.sys_attr(PPK_KWK.R,721,_par.DATA) || PPK_KWK.KW+=_zwr.FIR_DOD
         |? __RUB.sys_attr(PPK_KWK.R,722,_par.DATA) || PPK_KWK.KW+=_zwr.UCZ_POD
         |? __RUB.sys_attr(PPK_KWK.R,723,_par.DATA) || PPK_KWK.KW+=_zwr.UCZ_DOD
         ?};
         PPK_KWK.add()
      ?};
      _loop:=_R.next()
   !};
   {? _pominietePod | _pominieteDod
   || _addPom:=
         "PPK_KWK.blank(1);
          PPK_KWK.PPK_KWN:=PPK_KWN.ref();
          PPK_KWK.R:=exec('FindInSet','#table','R','RUBKOD',__RUB.sys_kod(_a),,,,,null());
          PPK_KWK.KW:=_b;
          {? PPK_KWK.R<>null()
          || PPK_KWK.add()
          ?}
         ";
      _addPom(7721,_pominietePod);
      _addPom(7722,_pominieteDod)
   ?};
   PPK_KWK.cntx_pop()
?};
~~


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli PPK_KWN.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_kwn') & exec('_chk','ppk_kwn',1)


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli PPK_KWN.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',PPK_KWK,'UNIQUE',PPK_KWN.ref())


\_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PPK_KWN.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(PPK_KWN,
:: Pola nieredagowalne - formuła musi zwrócić 0/1.
   "_a.record(_b,,'FIRMA','OSOBA','TYP','DATA_KOR')",
   "_a.in_set(_b,'TYP',,'Z','R','W')",
:: Pola redagowalne
   $("_a.table(_b,"+$_put+",,'R','M')"),
   "  {? PPK_KWN.R<1999 | PPK_KWN.R>9999
      || _a.err_fld(_b,'DATA_KOR',1)
      |? PPK_KWN.M<1 | PPK_KWN.M>12
      || _a.err_fld(_b,'DATA_KOR',1)
      || _chk:=''
      ?};
      _chk
   ",
   "  {? PPK_KWN.TYP='Z'
      || {? (_chk:=_a.record(PPK_KWN,,'DATA_WYP'))<>''
         || return(_chk)
         ?};
         {? PPK_KWN.DATA_WYP<date(PPK_KWN.R,PPK_KWN.M,1)
         || _chk:='DATA_WYP';
            _a.err_fld(_b,_chk,1)
         ?};
         _chk

      || {? (_chk:=_a.record(_b,,'P'))<>''
::          Pole P nie jest w oknie - formuła zwraca 0.
         || return(0)
         |? (_chk:=_a.record(_b,,'RU','MU'))<>''
         || return(_chk)
         ?};
         {? PPK_KWN.RU<1999 | PPK_KWN.RU>9999
         || _chk:='RU';
            _a.err_fld(_b,_chk,1)
         |? PPK_KWN.MU<1 | PPK_KWN.MU>12
         || _chk:='MU';
            _a.err_fld(_b,_chk,1)
         ?};
         _chk
      ?}
   "
)


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wskazanie aktualnej korekty wpłat.
::   WE:
::   WY: Wskazanie wiersza tabeli PPK_KWN
::----------------------------------------------------------------------------------------------------------------------
PPK_KWN.ref()


\dod_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Po dołączeniu do niepustej dziedziny w okienku WERO tabeli PPK_KWN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPK_KWN.TYP='Z' & PPK_KWN.RODZAJ='P'
|| PPK_KWN.cntx_psh();
   PPK_KWN.index('O_MSC_T');
   PPK_KWN.prefix(PPK_KWN.FIRMA,PPK_KWN.OSOBA,PPK_KWN.R,PPK_KWN.M,'Z');
   {? PPK_KWN.size()>1
   || FUN.info(
         'W przypadku wielu wyrównań w trakcie tego samego miesiąca\n'
         'zalecane jest zweryfikowanie zaproponowanych kwot.'@
      )
   ?};
   PPK_KWN.cntx_pop()
?};
exec('akc_a','ppk_kwn')


\akc_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po dołączeniu/poprawieniu/usunięciu w okienkach tabeli PPK_KWN.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? PPK_KWN.f_active()
|| PPK_KWN.f_rfresh()
?};
0


\wpl_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Obsługa akcji "Wpłaty" okienka WER tabeli PPK_KWN.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_KWK.cntx_psh();
PPK_KWK.index('RN');
PPK_KWK.prefix(PPK_KWN.ref());
PPK_KWK.win_sel('WERP');
PPK_KWK.select();
PPK_KWK.cntx_pop();
~~


\rek_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji wiersza tabeli PPK_KWN.
::   WE:
::   WY: 1 w przypadku gdy rekord jest poprawny, akronim wymaganego pola lub 0 gdy doszło do powielenia klucza.
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('_chk','ppk_kwn',-menu_txt()='popraw')


\ppk_dzb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wstawia do okna obszaru panele zawierające dostępne dla użytkownika korekty.
::   WE: _b TABLE - alias tabeli obszaru roboczego
::       _a STRING - akronim okienka obszaru roboczego
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_wnd:=_b;

_mode:='maximized_with_title';
:: panel obsługi korekt wpłat
_TAB.grp_sel(_wnd,PPK_KWN,'WER','Zwroty wpłat'@,,,,,
:: przed obsługą
   "exec('sel_u_bs','ppk_kwn')",,,,
:: tryb
   _mode
);
~~


\sel_u_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Przed obsługą okienka tabeli PPK_KWN w zakładce zwrotów wpłat.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_KWN.win_edit('REDO');

PPK_KWN.prefix();
PPK_KWN.f_set(
:: sortuj od najnowszych i zgodnie z danymi osoby
   'DATA_WYP^,OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',,
   'PPK_KWN.OSOBA in ('+exec('osoba_qr','ppk')+') and TYP=\'Z\'',
:: argumenty zapytania ograniczającego zakres danych
   exec('ref_firma','ustawienia'),
   exec('szukaj_udb_sys','schemat','PPK','PODZORG'),
   OPERATOR.USER,
   exec('domyslny','schemat','PODZORG'),
   '\'%\''
)


\kor_usu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Usunięcie zapisów z tabeli korekt dla konkretnego pracownika i konkretnej listy płac
::   WE: [_a] - znak listy płac - domyślnie bieżąca lista
::----------------------------------------------------------------------------------------------------------------------
_lista:=
   {? var_pres('_a')<>type_of('')
   || 'L'+FUNKCJE.ZNLISTY()
   || _a
   ?};

PPK_KWN.index('P_LT');
PPK_KWN.prefix(P.ref,_lista,'T');
{? PPK_KWN.first
|| {!
   |? PPK_KWN.del(,1)=2
   !}
?};
1


\lista_wycofane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pk [12.51]
:: OPIS: Wybór listy plac do wycofania.
::   WE: _a - rok
::       _b - miesiąc
::   WY: ref listy lub null
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_rok:=_a;
_msc:=_b;

{? _rok<1900
|| FUN.emsg('Podano błędny rok rozliczenia.'@);
   return()
|? _msc<1 | _msc>12
|| FUN.emsg('Podano błędny miesiąc rozliczenia.'@);
   return()
?};

_lt:=exec('x_lt_f3','lista_plac','N');
{? type_of(_lt)<>type_of('') | _lt=''
|| return()
?};

O.cntx_psh();
O.index('LISTYPZN');
O.prefix(exec('ref_firma','ustawienia'));
{? O.find_key(-_lt,)
|| {? O.RU<>_rok | O.MU<>_msc
   || FUN.emsg('Wybrana lista musi pochodzić z okresu rozliczenia.'@);
      O.cntx_pop();
      return()
   ?}
?};
O.cntx_pop();

_lt


\wycofaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pk [12.51]
:: OPIS: Wycofanie składek dla konkretnego etatu bądź zleceniobiorcy.
::   WE:
::   WY: 1 - sukces
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
P.prefix();
{? P.seek(REF.P)
|| _lista:=P.F_ZATR().KOD<>'Z'
|| P.cntx_pop(); return(0)
?};
P.cntx_pop();
{? ~exec('wycofanie_nag','ppk_kwn',_lista) || return(0) ?};

PPK_KWK.index('RN');
PPK_KWK.prefix(PPK_KWN.ref());
{? PPK_KWK.first
|| {!
   |? _skladka:=exec('suma_skl_prac','ppk',PPK_KWK.R().RN,PPK_KWN.R,PPK_KWN.M);
      {? _skladka>0
      || PPK_KWK.KW:=_skladka*-1;
         PPK_KWK.put()
      ?};
      PPK_KWK.next()
   !}
?};
1


\wycofanie_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wycofanie składek pobranych po blokadzie - nagłówek.
::       Zwrot nadpłaconych składek z PPK.
::   WE: _a - dla listy płac
::       [_b] - STRING - Z - zwrot; inne - wycofanie
::   WY: 1 - zakończone powodzeniem
::----------------------------------------------------------------------------------------------------------------------
_lista:={? var_pres('_a')=type_of(0) || _a ?};
_zwrot:={? var_pres('_b')=type_of('') || _b='Z' ?};

{? ~_zwrot
|| {? ~FUN.ask(
         'Zadaniem wybranej funkcji jest wycofanie nadpłaconych składek do PPK.\n'+
         'Należy wprowadzić rok i miesiąc wycofanych składek dla miesiąca nadpłaty.'
      )
   || return(0)
   ?}
?};

PPK_WNU.cntx_psh();

:: Podpowiedź dla roku i miesiąca na podstawie zgłoszonego wniosku o rezygnacje
{? _zwrot
|| PPK_KWN.RU:=PPK_KWN.R;
   PPK_KWN.MU:=PPK_KWN.M
|| PPK_KWN.blank();
   PPK_KWN.P:=P.ref();
   PPK_WNU.index('UMO_WRD');
   PPK_WNU.prefix(PPK_UCZ.PPK_UMO,P.OSOBA,'DRZW');
   {? PPK_WNU.last()
   || PPK_KWN.DATA_KOR:=PPK_WNU.DATA;
      PPK_KWN.R:=PPK_KWN.RU:=PPK_WNU.DATA~1;
      PPK_KWN.M:=PPK_KWN.MU:=PPK_WNU.DATA~2
   || PPK_KWN.DATA_KOR:=date();
      PPK_KWN.R:=PPK_KWN.RU:=date()~1;
      PPK_KWN.M:=PPK_KWN.MU:=date()~2
   ?}
?};
_okno:=PPK_KWN.win_edit('?');
_win_acr:=PPK_KWN.mk_edit({? _zwrot || 'Zwrot'@ || 'Korekta'@ ?},,'ppk_kwn_wz');
PPK_KWN.win_efld(_win_acr,,'DATA_KOR',,,10);
PPK_KWN.win_efld(_win_acr,,'R',,,10,,1);
PPK_KWN.win_efld(_win_acr,,'M',,,10,,1);
PPK_KWN.efld_opt(_win_acr,'mark=1',,'DATA_KOR');
{? _zwrot
|| PPK_KWN.win_efld(_win_acr,,'RU',,,8);
   PPK_KWN.win_efld(_win_acr,,'MU',,,8);
   PPK_KWN.efld_opt(_win_acr,'mark=1',,'RU');
   PPK_KWN.efld_opt(_win_acr,'mark=1',,'MU');
   {? _lista
   || PPK_KWN.win_efld(_win_acr,,'LT',,,8);
      PPK_KWN.fld_fml('LT','F3',"exec('lista_wycofane','ppk_kwn',PPK_KWN.RU,PPK_KWN.MU)");
      PPK_KWN.efld_opt(_win_acr,'mark=1',,'LT')
   ?}
?};
exec('ok_esc','#window',PPK_KWN,_win_acr,,,,,,,exec('text_red_ok','#window'));
PPK_KWN.win_edit(_win_acr);

_wyn:=0;
{? PPK_KWN.edit($
      {? _zwrot
      || {? _lista
         || "_wyn:=__CHK.record(PPK_KWN,,'DATA_KOR','RU','MU','LT');"
         || "_wyn:=__CHK.record(PPK_KWN,,'DATA_KOR','RU','MU');"
         ?}+
         "  {? _wyn='' & date(PPK_KWN.R,PPK_KWN.M,1)>date(PPK_KWN.RU,PPK_KWN.MU,1)
            || FUN.emsg('Okres rozliczeniowy nie może być wcześniejszy od okresu składkowego.'@);
               PPK_KWN.LT:='';
               _wyn:='DATA_KOR'
            ?};
            _wyn
         "
      || $"__CHK.record(PPK_KWN,,'DATA_KOR','RU','MU')"
      ?}
   )
|| _wyn:=1;
   {? ~_zwrot
   || PPK_KWN.TYP:='W';
      _wyn:=PPK_KWN.add()
   ?}
?};
PPK_KWN.win_edit(_okno);
PPK_KWN.win_edel(_win_acr);
PPK_WNU.cntx_pop();
_wyn


\mod_kwn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Obsługa akcji "Popraw - przed" w tabeli PPK_KWN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('spr_kwn','ppk_kwn',menu_txt)


\del_kwn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Na akcję usuń przed dla tabeli PPK_KWN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('spr_kwn','ppk_kwn',menu_txt)


\spr_kwn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Weryfikacja czy nastąpiło rozliczenie korekty.
::   WE: _a - STRING - nazwa akcji
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kom:={? var_pres('_a')=type_of('') || _a || '' ?};
{? PPK_KWN.O
|| FUN.emsg(
      'Korekta została rozliczona na liście płac: %1.\n'
      'Akcja: "%2" jest niedozwolona.'@[~PPK_KWN.O().LT,_kom]
   );
   0
|? PPK_KWN.RH
|| FUN.emsg(
      'Korekta została rozliczona na rachunku z dnia: %1.\n'
      'Akcja: "%2" jest niedozwolona.'@[$PPK_KWN.RH().DRA,_kom]
   );
   0
|| 1
?}


\add_O_RH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wprowadzenie złączenia naturalnego do listy i rachunku. Kontekst listy płac musi być ustalony.
::   WE: _a - STRING - Typ
::   WY: Ilośc dodanych złączeń
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a') = type_of('') || _a || return(0) ?};
_znlisty:=O.LT;
_lista:=O.ref();

_rh:={? O.F_ZATR().KOD='Z' || RH.ref || null ?};
_znlisty:=~(-_znlisty);
_wynik:=0;
PPK_KWN.cntx_psh();
{? _rh
|| PPK_KWN.index('P_T_MSC');
   PPK_KWN.prefix(P.ref,_typ,O.RU,O.MU);
   {? PPK_KWN.first()
   || {!
      |? {? PPK_KWN.O=_lista & PPK_KWN.RH=_rh
         || _wynik+=1
         |? _rh & PPK_KWN.RH=null
         || PPK_KWN.O:=_lista;
            PPK_KWN.RH:=_rh;
            PPK_KWN.LT:=~-O.LT;
            _wynik+=PPK_KWN.put()
         ?};
         PPK_KWN.next()
      !}
   ?}
|| PPK_KWN.index('P_LT');
   PPK_KWN.prefix(P.ref,_znlisty,_typ);
   {? PPK_KWN.first()
   || {!
      |? {? PPK_KWN.O=_lista & PPK_KWN.RH=null
         || _wynik+=1
         |? PPK_KWN.RH=null & ~_rh
         || PPK_KWN.O:=_lista;
            PPK_KWN.RH:=null;
            _wynik+=PPK_KWN.put()
         ?};
         PPK_KWN.next()
      !}
   ?}
?};
PPK_KWN.cntx_pop();
_wynik


\del_O_RH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wykasowanie złączenia naturalnego do listy. Kontekst listy płac musi być ustalony.
::   WE: _a - P.ref
::       _b - O.ref
::       [_c] - RH.ref
::       [_d] - STRING - rodzaj korekty
::   WY: Ilość wykonanych wymazań złączeń
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_d')=type_of('') || _d || '' ?};
_RH_ref:={? var_pres('_c')=type_of(null) || _c || null ?};
_P_ref:=_a;
_O_ref:=_b;
_wynik:=0;

PPK_KWN.cntx_psh();
PPK_KWN.index('ORH');
{!
|? PPK_KWN.prefix(_P_ref,_O_ref,_RH_ref,_typ);
   PPK_KWN.first()
|! PPK_KWN.prefix();
   PPK_KWN.RH:=PPK_KWN.O:=null;
   {? _RH_ref || PPK_KWN.LT:='' ?};
   _wynik+=PPK_KWN.put()
!};
PPK_KWN.cntx_pop();
_wynik


\zwrot_nadp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Przypisanie zwrotu do konkretnego pracownika i listy.
::   WE:
::   WY: Powodzenie akcji
::----------------------------------------------------------------------------------------------------------------------
{? PPK_KWN.LT<>''
|| FUN.emsg('Pozycja została już przypisana do rozliczenia.\nAkcja niedostepna.'@);
   return(0)
?};
{? ~FUN.ask(
      'Zadaniem wybranej funkcji jest zwrot nadpłaconych składek do PPK.\n'
      'Należy dla konkretnej formy współpracy wprowadzić rok i miesiąc rozliczenia zwrotu.'
      'oraz wybrać listę płac, na której zostaną przekazane nadpłacone składki.'@
   )
|| return(0)
?};
_P_ref:=exec('wyb_p','ppk_ucz',PPK_KWN.OSOBA);
_kom:="FUN.emsg('%1\nAkcja została anulowana.'@[_a],'Uwaga'@)";
{? ~_P_ref
|| _kom('Nie został wybrany pracownik, któremu należy dokonać zwrotu środków.'@);
   return(0)
?};
PPK_KWN.cntx_psh();
PPK_KWN.prefix();
P.cntx_psh();
P.prefix();
{? P.seek(_P_ref)
|| _lista:=P.F_ZATR().KOD<>'Z'
|| PPK_KWN.cntx_pop();
   P.cntx_pop();
   return(0)
?};
_wyn:=
   {? exec('wycofanie_nag','ppk_kwn',_lista,'Z')
   || PPK_KWN.P:=_P_ref;
      PPK_KWN.put()
   ?};
PPK_KWN.cntx_pop();
P.cntx_pop();
_wyn


\spr_is_O_RH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Sprawdzenie czy istnieje korekta rozliczona na liście bądź rachunku.
::   WE:  _a - P.ref
::        _b - O.ref
::       [_c] - RH.ref
::   WY: 1 - jest złączenie
::----------------------------------------------------------------------------------------------------------------------
_P_ref:=_a;
_O_ref:=_b;
_RH_ref:={? var_pres('_c')=type_of(null) || _c || null ?};

PPK_KWN.cntx_psh();
PPK_KWN.index('ORH');
PPK_KWN.prefix(_P_ref,_O_ref,_RH_ref);
_wynik:=PPK_KWN.first();
PPK_KWN.cntx_pop();
_wynik


\rodzaj_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wartość początkowa pola RODZAJ tabeli PPK_KWN zależna od typu korekty/zwrotu.
::   WE:
::   WY: P dla typu Z, '' wpp
::----------------------------------------------------------------------------------------------------------------------
{? PPK_KWN.TYP='Z' || 'P' || '' ?}


\rodzaj_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji pola RODZAJ tabeli PPK_KWN.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? PPK_KWN.TYP='Z' & PPK_KWN.RODZAJ='I'
|| PPK_KWN.TYTUL:='-'
?};
1


\tytul_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wartość początkowa pola TYTUL tabeli PPK_KWN zależna od rodzaju korekty/zwrotu.
::   WE:
::   WY: P dla typu Z, '' wpp
::----------------------------------------------------------------------------------------------------------------------
{? PPK_KWN.RODZAJ='P' || '-' || '' ?}


\tytul_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed redakcją pola TYTUL tabeli PPK_KWN.
::   WE:
::   WY: 0/1 - pole zablokowane/dostępne do edycji
::----------------------------------------------------------------------------------------------------------------------
PPK_KWN.TYP='Z' & PPK_KWN.RODZAJ<>'I'


\rek_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Rekord - przed" w oknie WERP tabeli PPK_KWN.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('rekprzed','color','PPK_KWN#01#')



\legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Legenda - przed" w oknie WERP tabeli PPK_KWN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PPK_KWN#01');
~~


\wysw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Wyświetl - przed" w oknie WERP tabeli PPK_KWN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPK_KWN.PPK_RDA=null()
:: jeszcze nie uwzględnione na raporcie
|| PPK_KWN.display()

|| PPK_RPL.cntx_psh();
   PPK_RPL.prefix();
   PPK_RDA.cntx_psh();
   PPK_RDA.prefix();
   PPK_KWN.cntx_psh();

:: podczytaj dane zestawu raportów
   PPK_KWN.PPK_RDA().PPK_RPL();

:: wyświetl dane w dedykowanym oknie (pierwsza zakładka dane PPK_KWN, druga PPK_RPL)
   _wnd:=PPK_KWN.mk_edit({? PPK_KWN.TYP='Z' || 'Zwrot/wyrównanie'@ || 'Korekta'@ ?});
   PPK_KWN.win_etab(_wnd,
      {? PPK_KWN.TYP='Z'
      || {? PPK_KWN.RODZAJ='P' || 'Wyrównanie'@
         |? PPK_KWN.RODZAJ='I' || 'Zwrot'@
         || 'Dane podstawowe'@
         ?}
      || 'Dane podstawowe'@
      ?}
   );
   PPK_KWN.win_ewin(_wnd,,{? PPK_KWN.TYP='Z' || 'REDO' || 'REDP' ?});
   PPK_KWN.win_etab(_wnd,'Raport'@);
   PPK_KWN.win_ewin(_wnd,PPK_RPL,'POP');
   PPK_KWN.win_edit(_wnd);
   PPK_KWN.display();

:: porządki
   PPK_KWN.cntx_pop();
   PPK_RDA.cntx_pop();
   PPK_RPL.cntx_pop();
   PPK_KWN.win_edel(_wnd)
?}


\data_kor_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Po edycji pola DATA_KOR. Na podstawie podanej daty aktualizowane są nieedytowalne pola R i M.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
PPK_KWN.R:=PPK_KWN.DATA_KOR~1;
PPK_KWN.M:=PPK_KWN.DATA_KOR~2;
1


:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:38 1291877ba23b6f4b06e07f90cb11beea134974ae9f15ad5e1285266f24dc5a4b4cc3380f92eee4877c7e63885babc70c8aea323f67324b41a3d7f4ec4e8e6ee28987bca41ef5817f2d1ff965b3311bfe0c72a5017c932dbee68318603143cf9735623d747567dd7907ca91d21a020b1ab04e12af6161784f598597f05e055118
