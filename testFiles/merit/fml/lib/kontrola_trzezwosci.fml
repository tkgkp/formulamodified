:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: kontrola_trzezwosci.fml
:: Utworzony: 17.08.2022
:: Autor: MicKoc
::======================================================================================================================
:: Zawartość: Funkcje obsługi Kontroli trzeźwości
::======================================================================================================================


\ustaw_zmienne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Ustawienie zmiennych
::   WE: [_a] [TABELA] - Tabela, brak to ustawienie zmiennych KOT
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(SYSLOG)
|| _TAB:=_a;
:: czy jednostka mierzalma (T/N)
   _jm_typ:={? _TAB.KOT_JM || _TAB.KOT_JM().TYP || '' ?};

   {? _TAB=KOTLIMIT | _TAB=KOT_TEST
   || {? _jm_typ='T'
      || _TAB.fld_fml('WYNIK','BEFORE_EDIT',"1");
         _TAB.fld_fml('TEST','BEFORE_EDIT',"''");
         _mark:={? _TAB=KOT_TEST & KOT_TEST.ODMOWA='T' || 0 || 1 ?};
         _editable:={? _mark || '1' || 'grayed' ?};
         _TAB.efld_opt(_TAB.win_edit('?'),'editable=%1,mark=%2'[_editable,$_mark],,'WYNIK');
         _TAB.efld_opt(_TAB.win_edit('?'),'editable=grayed,mark=0',,'TEST');
         _TAB.TEST:=''
      |? _jm_typ='N'
      || _TAB.fld_fml('WYNIK','BEFORE_EDIT',"0");
         _TAB.fld_fml('TEST','BEFORE_EDIT',"'T'");
         _TAB.efld_opt(_TAB.win_edit('?'),'editable=grayed,mark=0',,'WYNIK');
         _mark:={? _TAB=KOT_TEST & KOT_TEST.ODMOWA='T' || 0 || 1 ?};
         _editable:={? _mark || '1' || 'grayed' ?};
         _TAB.efld_opt(_TAB.win_edit('?'),'editable=%1,mark=%2'[_editable,$_mark],,'TEST');
         _TAB.WYNIK:=0
      || _TAB.fld_fml('WYNIK','BEFORE_EDIT',"0");
         _TAB.fld_fml('TEST','BEFORE_EDIT',"''");
         _TAB.efld_opt(_TAB.win_edit('?'),'editable=grayed,mark=0',,'WYNIK');
         _TAB.efld_opt(_TAB.win_edit('?'),'editable=grayed,mark=0',,'TEST');
         _TAB.WYNIK:=0;
         _TAB.TEST:=''
      ?};
      {? _TAB=KOT_TEST
      || KOT_TEST.fld_fml('WYNIK','AFTER_EDIT',"
            exec('kot_test_wynik_ae','!pkd_ezk_orkt')
         ");
         KOT_TEST.fld_fml('TEST','AFTER_EDIT',"
            exec('kot_test_wynik_ae','!pkd_ezk_orkt')
         ");
         _mark:=KOT_TEST.ODMOWA<>'T';
         KOT_TEST.efld_opt(KOT_TEST.win_edit('?'),'mark=%1'[$_mark],,'KOT_URZA','NAZ')
      ?};
      _TAB.fld_fml('WYNIK','DISPLAY_FORMAT',"
         {? cur_tab(1,1).KOT_JM().TYP='T'
         || 'alignment=right'
         || 'alignment=left'
         ?}
      ")
   ?}
?};
1


\kot_urza_zalaczniki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Załączniki do urządzeń
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('KOT_URZA_BLB');
exec('blb','kontrola_trzezwosci');
KOT_URZA_BLB:=obj_new(
   @.CLASS.KOT_BLB,
   KOT_URZA,
   KOT_PLKU,
   'KOT_URZA',
   'ZAL',
   'kot_urza_blb',
   'Załączniki do urządzeń',
   {? exec('interm','#system') || 'dnd' || '' ?}
);
_gr:=KOT_URZA.grp_make('Urządzenia do badań'@,,'kot_urza_blb_gr',1,1,,);
_ar:=KOT_URZA_BLB.refreshf();
KOT_URZA.grp_sel(_gr,,'WER',,_ar,,,10);
KOT_URZA.grp_splt(_gr,,'horizontal','new',);
KOT_URZA_BLB.grpctr(KOT_URZA,_gr);
KOT_URZA.win_sel(_gr);
KOT_URZA.actions('WER','A');
KOT_URZA.select();
VAR_DEL.delete('KOT_URZA_BLB')


\blb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Obsługa załączników
:: ~OST: INFILECHOOSER
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('KOT_BLB',@.CLASS)<0
|| obj_decl('KOT_BLB',
      obj_fld('TAB', ~~),
      obj_fld('BREF', ~~),
      obj_fld('BTAB', ~~),
      obj_fld('BBLOB', ~~),
      obj_fld('Cond', ~~),
      obj_fld('FormBlPut', ~~),
      obj_fld('Self', ~~),
      obj_fld('win', ''),
      obj_fld('win_id',''),
      obj_fld('actblobs', ~~),
      obj_fld('w_ident',''),
      obj_fld('w_title',''),
      obj_fld('exclude',''),
      obj_fld('dir_sep',''),
      obj_fld('BLIST', ~~),
      obj_fld('initc',"
         THIS.getblobs()
      "),
      obj_fld('callb',"
         {? ctr_info('action_id')='dnd'
         || {? ~exec('interm','#system')
            || _tab0:=ctr_call(':'+THIS.win_id,'ctr_id','getDroppedFiles');
               THIS.addblobs(_tab0);
               THIS.getblobs()
            ?}
         |? ctr_info('action_id')='add'
         || {? exec('interm','#system')
            || _refresh:=0;
               _tmp_dir:=fmk_tmp_dir(0);
               {? type_of(_tmp_dir)<>type_of(~~)
               || _pth:=_tmp_dir.get_path();
                  _file:=dlg_upload(_pth,,'.pdf',0);
                  _tmpTab:=tab_tmp(1,'FILENAME','STRING[255]',,'DIR','STRING[255]',);
                  _tmpTab.FILENAME:=_file;
                  _tmpTab.DIR:=_pth;
                  _tmpTab.add();
                  {? _file<>''
                  || THIS.addblobs(&_tmpTab);
                     THIS.getblobs()
                  ?}
               ?}
            || ctr_set('!application', 'filechooser','reset');
               ctr_set('!application', 'filechooser','setMultiSelectionEnabled', 1);
               _open:=ctr_call('!application', 'filechooser','showOpenDialog');
               {? _open
               || _tab0:=ctr_call('!application', 'filechooser','getSelectedFiles');
                  THIS.addblobs(_tab0);
                  THIS.getblobs()
               ?}
            ?}
         |? ctr_info('action_id')='del'
         || {? FUN.ask('Czy usunąć zaznaczone załączniki?'@)
            || _tab1:=ctr_call(':'+THIS.win_id,'ctr_id','getCurrActionItems');
               THIS.dellist(_tab1);
               THIS.getblobs()
            ?}
         |? ctr_info('action_id')='save'
         || {? exec('interm','#system')
            || _tab1:=ctr_call(':'+THIS.win_id,'ctr_id','getCurrActionItems');
               THIS.BTAB.cntx_psh();
               THIS.BTAB.clear();
               {? _tab1.first()
               || {? THIS.BTAB.seek(_tab1.INT_DATA,)
                  || exec('bl_save','#blob',THIS.BTAB,THIS.BBLOB)
                  ?}
               ?};
               THIS.BTAB.cntx_pop()
            || {? (_dir:=THIS.get_dir())<>''
               || _tab1:=ctr_call(':'+THIS.win_id,'ctr_id','getCurrActionItems');
                  THIS.savelist(_tab1, _dir);
                  THIS.getblobs()
               ?}
            ?}
         |? ctr_info('action_id')='view'
         || _tab1:=ctr_call(':'+THIS.win_id,'ctr_id','getCurrActionItems');
            THIS.view(_tab1)
         |? ctr_info('action_id')='edit'
         || _tab1:=ctr_call(':'+THIS.win_id,'ctr_id','getCurrActionItems');
            THIS.edit(_tab1)
         ?}
      "),

      obj_meth('__init',"
         .dir_sep:=exec('sep','#file',{? exec('interm','#system') || 2 || 0 ?});
         .Self:=_a;
         .TAB:=_b;
         .BTAB:=_c;
         .BREF:=_d;
         .BBLOB:=_e;

         {? var_pres(.BREF,.BTAB)<>26
         || FUN.error('Niepoprawne pole złączeniowe przekazane do __init','Klasa KOT_BLB');
            obj_del(.BTAB);
            return
         ?};

         {? var_pres(.BBLOB,.BTAB)<>33
         || FUN.error('Niepoprawne pole typu BLOBRAW przekazane do __init','Klasa KOT_BLB');
            obj_del(.BTAB);
            return
         ?};

         .TAB.blank(1);
         .BTAB.blank(1);
         {? .TAB.name(1)<>($('{| _a |! ' + .BREF + '().name(1)|}'))(.BTAB)
         || FUN.error('Niepoprawne pole złączeniowe przekazane do __init','Klasa KOT_BLB');
            obj_del(.BTAB);
            return
         ?};

         .w_ident:=_f;
         {? _>6 & type_of(_g)=type_of('')
         || .w_title:=_g
         || .w_title:='Załączniki'
         ?};
         {? _>7 & type_of(_h)=type_of('')
         || .exclude:=','+_h+','
         || .exclude:=''
         ?};
         .actblobs:=obj_new(1);
         .win:=.TAB.mk_ctr(.w_title,.w_ident,1,1,60,6);
         .win_id:=-(1-.win);
         {? .exclude*',add,' | .exclude*',dnd,'
         || .TAB.win_cctr(.win,'ctr_id','@filelistpanel')
         || .TAB.win_cctr(.win,'ctr_id','@filelistpanel','dnd')
         ?};
         .TAB.win_ctr(.win)
      ",type_of(SYSLOG),type_of(SYSLOG),type_of(''),type_of(''),type_of('')),

      obj_meth('__init',"
         FUN.error('Niepoprawne argumenty przekazane do __init','Klasa KOT_BLB')
      "),

      obj_meth('getblobs',"
         _active:=.TAB.get() & (.TAB.sel_size() | (~.TAB.f_active() | .TAB.f_get()));
         _tab:=tab_tmp(1,
            'NAME','STRING[160]','Nazwa' ,
            'SIZE','INTEGER','Rozmiar',
            'MOD_DATE','DATE','Data modyfikacji',
            'INT_DATA','INTEGER',,
            'STR_DATA','STRING[10]',);
         _tab.blank();
         .BTAB.prefix(.TAB.ref());
         {? _active & .BTAB.first()
         || {! |?
               {? {? var_pres('Cond',.)=type_of('') || ($(.Cond))() || 1 ?}
               || _tab.NAME:=.BTAB.bl_info(.BBLOB,'NAME');
                  _tab.SIZE:=.BTAB.bl_info(.BBLOB,'SIZE');
                  _tab.MOD_DATE:=.BTAB.bl_info(.BBLOB,'MODIFY_DATE');
                  _tab.INT_DATA:=#.BTAB.ref;
                  _tab.add()
               ?};
               .BTAB.next()
            !}
         ?};
         obj_del(.actblobs);
         .actblobs:=_tab;
         ctr_tab('files_data',':'+.win_id,'ctr_id','',_tab);
         ctr_call(':'+.win_id,'ctr_id','updateItems','files_data');
         {? ~_active
         || ctr_call(':'+.win_id,'ctr_id','setEnabled',0)
         || ctr_call(':'+.win_id,'ctr_id','setEnabled',1)
         ?}
      "),

      obj_meth('addblobs',"
         {? ~_a.first() || return ?};
         {! |?
            .BTAB.blank();
            ($(!.Self.BTAB+'.'+.BREF+':= _a'))(.TAB.ref);
            do;
            {? var_pres('FormBlPut',.)=type_of('') || ($(.FormBlPut))() ?};
            .BTAB.add();
            .BTAB.bl_put(.BBLOB,'@'+_a.DIR+ .dir_sep +_a.FILENAME,,,,);
            {? var_pres('FormBlPut',.)=type_of('') || ($(.FormBlPut))(); .BTAB.put() || 1 ?};
            end;
            _a.next()
         !}
      "),

      obj_meth('initwin',"
         _form:=$.callb;
         _form:=gsub(_form,'THIS',!.Self);
         .TAB.win_cfml(.win,'ctr_id','CONTROL_CALLBACK',$_form);
         _form:=$(!.Self+'.initf()');
         .TAB.win_cfml(.win,'ctr_id','CONTROL_INIT',_form)
      "),

      obj_meth('grpctr',"
         .initwin();
         _a.grp_ctr(_b,.TAB,.win,.win_id,,,,,,,,,,'maximized_with_title')
      "),

      obj_meth('initf', "
         {? ~(.exclude*',add,')  || ctr_set(,'ctr_id','addAction','add','&Dodaj','',0,0) ?};
         {? ~(.exclude*',del,')  || ctr_set(,'ctr_id','addAction','del','&Usuń','',2,0) ?};
         {? ~(.exclude*',view,') || ctr_set(,'ctr_id','addAction','view','&Przeglądaj','',1,1) ?};
         {? ~(.exclude*',edit,') || ctr_set(,'ctr_id','addAction','edit','&Redaguj','',1,0) ?};
         {? ~(.exclude*',save,') || ctr_set(,'ctr_id','addAction','save','&Zapisz','',2,0) ?};
         ctr_call(,'ctr_id','initToolbar')
      "),

      obj_meth('refreshf', "
         $gsub('THIS.getblobs()','THIS',!.Self)
      "),

      obj_meth('dellist',"
         .BTAB.cntx_psh();
         .BTAB.clear();
         {? _a.first()
         || {! |?
               {? .BTAB.seek(_a.INT_DATA,)
               || .BTAB.del()
               ?};
               _a.next()
            !}
         ?};
         .BTAB.cntx_pop()
      "),

      obj_meth('savelist',"
         .BTAB.cntx_psh();
         .BTAB.clear();
         {? _a.first()
         || {! |?
               {? .BTAB.seek(_a.INT_DATA,)
               || _file:=.BTAB.bl_info(.BBLOB, 'NAME');
                  {? _b+1<>.dir_sep
                  || _dir_sep:=.dir_sep
                  || _dir_sep:=''
                  ?};
                  {? ~fexists('@'+_b+_dir_sep+_file,) |
                     FUN.ask('Plik %1 już istnieje. Czy zapisać?'@[_file])
                  || .BTAB.bl_get(.BBLOB,'@'+_b+_dir_sep+_file)
                  ?}
               || FUN.info('Załącznik został usunięty.'@)
               ?};
               _a.next()
            !}
         ?};
         .BTAB.cntx_pop()
      "),

      obj_meth('view',"
         .BTAB.cntx_psh();
         .BTAB.clear();
         {? _a.first()
         || {? .BTAB.seek(_a.INT_DATA,)
            || .BTAB.bl_view(.BBLOB)
            || .Self.getblobs();
               FUN.info('Załącznik został usunięty.'@)
            ?}
         ?};
         .BTAB.cntx_pop()
      "),

      obj_meth('edit',"
         .BTAB.cntx_psh();
         .BTAB.clear();
         {? _a.first()
         || {? .BTAB.seek(_a.INT_DATA,)
            || .BTAB.bl_edit(.BBLOB)
            || .Self.getblobs();
               FUN.info('Załącznik został usunięty.'@)
            ?}
         ?};
         .BTAB.cntx_pop()
      "),

      obj_meth('control',"
         .initwin();
         _form:=$.initc;
         _form:=gsub(_form,'THIS',!.Self);
         .TAB.control(,,$_form)
      "),

      obj_meth('get_dir',"
         ctr_set('!application', 'filechooser','reset');
         ctr_set('!application', 'filechooser','setFileSelectionMode','DIRECTORIES_ONLY');
         ctr_set('!application', 'filechooser','setDialogTitle', 'Wybór katalogu');
         _ret:=ctr_call('!application', 'filechooser','showSaveDialog');
         {? _ret
         || return(ctr_call('!application', 'filechooser','getSelectedFile'))
         || ''
         ?}
      "),
   )
?}


\wyzwalacze
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Formuły wyzwalaczy
::   WE: _a [TABELA] - tabela
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a=KOT_TEST
|| {? KOT_TEST.KOT_URZA
   || KOT_TEST.KOT_JM:=KOT_TEST.KOT_URZA().KOT_JM;
      KOT_TEST.KOT_RODZ:=KOT_TEST.KOT_JM().KOT_RODZ
   || KOT_TEST.KOT_JM:=KOT_TEST.KOT_RODZ:=null()
   ?};

:: określenie stanu trzeźwości
   _wynik:=null();
   {? KOT_TEST.WYNIK_D<>#0 & KOT_TEST.ODMOWA<>'T'
   || KOTLIMIT.cntx_psh();
      _jm_typ:=KOT_TEST.KOT_JM().TYP;
      {? _jm_typ='N'
      || KOTLIMIT.index('TEST');
         KOTLIMIT.prefix(KOT_TEST.KOT_JM().JM().KOD,KOT_TEST.TEST);
         {? +KOT_TEST.TEST & KOTLIMIT.first()
         || _wynik:=KOTLIMIT.STAN
         ?}
      || KOTLIMIT.index('WYNIK');
         KOTLIMIT.prefix(KOT_TEST.KOT_JM().JM().KOD,);
         {? KOTLIMIT.find_le(KOT_TEST.WYNIK)
         || _wynik:=KOTLIMIT.STAN
         ?}
      ?};
      KOTLIMIT.cntx_pop()
   ?};
   KOT_TEST.KOTLIMIT:=_wynik;

:: wpisanie daty terminu przetwarzania informacji
   {? KOT_TEST.WYNIK_D=#0
   || KOT_TEST.PD_DATA:=#0
   |? KOT_TEST.CZY_PD<>'T'
   || KOT_TEST.PD_DATA:=exec('data_plus_rok','kontrola_trzezwosci',KOT_TEST.DATA)
   ?};

:: określenie czy pracownika jest dopuszczony do pracy
   _dopuszczony:=exec('czy_dopuszczony','kontrola_trzezwosci',KOT_TEST.KOTLIMIT,KOT_TEST.KOT_JM().JM);
   KOT_TEST.OK:={? KOT_TEST.ODMOWA<>'T' & KOT_TEST.WYNIK_D<>#0 || {? _dopuszczony=1 || 'T' || 'N' ?} || '' ?}
?}


\data_plus_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Rok później niż data
::   WE: _a [DATE] - Data
::   WY: Data rok później
::----------------------------------------------------------------------------------------------------------------------
_data:={? var_pres('_a')=type_of(#0) & _a>#0 || _a || return(#0) ?};

_rk:=_a~1+1;
_mc:=_a~2;
_dz:=_a~3;
{? _dz>date(_rk,_mc,0)~3 || _dz:=date(_rk,_mc,0)~3 ?};
date(_rk,_mc,_dz)


\czy_dopuszczony
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Czy dopuszczony do pracy
::   WE: _a [REFERENCE] - Stan trzeźwości SLO_KOD
::       _b [REFERENCE] - Jednostka miary
::   WY: -1/0/1 - błąd/nie dopuszczony/dopuszczony do pracy
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a & var_pres('_b')=type_of(null()) & _b
|| _ret:=0;
   KOTLIMIT.cntx_psh();
   KOTLIMIT.index('UNIQ');
   KOTLIMIT.prefix(_a,_b);
   _ret:=KOTLIMIT.first() & KOTLIMIT.OK='T';
   KOTLIMIT.cntx_pop()
|| _ret:=-1
?};
_ret


\kot_urza_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Interfejs wyboru urządzenia
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new('grp');
_par.grp:=KOT_URZA.grp_make('Urządzenia do badań'@,,'#kot_urza_grp',,,,,'maximized');
Cntx.psh(KOT_JM,KOT_URZA);
Cntx.clr(KOT_JM,KOT_URZA);
_fb:="KOT_URZA.index('AKT_JM');
      KOT_URZA.prefix('T',);
      KOT_URZA.actions('WER','W',,1)
";
KOT_URZA.grp_sel(_par.grp,,'WER','Wszystkie'@,,,,,_fb,,,,'maximized_with_title');
KOT_URZA.index('AKT_LP');
KOT_URZA.prefix('T',);
Cntx.pop(KOT_JM,KOT_URZA);
_par


\dodaj_nagane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Dołącza naganę
::   WE:
::   WY: Wskazanie na naganę lub null
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();
EDIT_VAR.KART_DEF:='WYR_KAR';
{? _def:=exec('kart_def','kart_dod',EDIT_VAR.KART_DEF)
|| KART_DOD.index('KART_DOD');
   KART_DOD.prefix(exec('ref_firma','#firma'),_def,OSOBA.ref);
   KART_DOD.blank();
   KART_DOD.KART_DEF:=_def;
   KART_DOD.KT:='!';
   KART_DOD.OD:=KOT_TEST.DATA;
   KART_DOD.DO:=exec('data_plus_rok','kontrola_trzezwosci',KOT_TEST.DATA);
   KART_DOD.OPIS:=exec('opis_nagany','kontrola_trzezwosci');
   {? KART_DOD.add()
   || _ret:=KART_DOD.ref()
   ?};
   KART_DOD.prefix();
   KART_DOD.f_set(,,'KART_DOD.REFERENCE=:_a',_ret);
   _ws:=exec('mk_sel','kart_dod','PKD_DOS_PRKD','PKD_DOS_PPKD',,'');
   KART_DOD.win_sel(_ws);
   KART_DOD.win_edit(__WND.EDIT.get(KART_DOD,'WYR_KAR'));
   KART_DOD.hdr_sel(': %1 %2'@[OSOBA.NAZWISKO,OSOBA.PIERWSZE]);
   KART_DOD.select(,,,'DU');
   KART_DOD.hdr_sel();
   KART_DOD.f_clear()
?};
_ret


\opis_nagany
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Treśc opisu nagany
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Badanie przeprowadzone %1 o godz. %2'[
   $KOT_TEST.DATA,
   $KOT_TEST.GODZ
]


\popraw_nagane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Aktualizacja nagany
::   WE: _a [REF] - Wskazanie na naganę
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
{? var_pres('_a')<>type_of(null()) & ~_a || return(_ret) ?};
KART_DOD.cntx_psh();
KART_DOD.prefix();
{? KART_DOD.seek(_a)
|| KART_DOD.OPIS:=exec('opis_nagany','kontrola_trzezwosci');
   _ret:=KART_DOD.put()
?};
KART_DOD.cntx_pop();
_ret


\usun_nagane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Usunięcie nagany
::   WE: _a [REF] - Wskazanie na naganę
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
{? var_pres('_a')<>type_of(null()) & ~_a || return(_ret) ?};
KART_DOD.cntx_psh();
KART_DOD.prefix();
_ret:=KART_DOD.seek(_a) & KART_DOD.del(,1);
KART_DOD.cntx_pop();
_ret


\teczki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Numery teczek pracownika w dniu badania
::   WE: _a [REF] - Wskazanie na OSOBA
::       _b [DATE] - data badania
::   WY: nr teczek lub pusty
::----------------------------------------------------------------------------------------------------------------------
_ret:='';
{? var_pres('_a')<>type_of(null()) || return(_ret) ?};
{? var_pres('_b')<>type_of(date()) || return(_ret) ?};
{? _b<=#0 || return(_ret) ?};
P.cntx_psh();
P.index('OSOBA');
P.prefix(_a,exec('ref_firma','ustawienia'));
{? P.first()
|| {!
   |? {? P.DZA<=_b & (P.DZ>=_b | P.DZ=#0)
      || _ret+=form(P.T)+', '
      ?};
      P.next()
   !}
?};
P.cntx_pop();
_ret-=2

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:29 a9d62960c36a5b3046ba1666b1c99b164cfb0bca1dbc351d4fcaf52eb7cb2c69c308e2b6595d312e4d47847ab659d8560b1d864fcd65d046209ea60f11307c00398badebd0e850d64f1808709921a5db6c54501438d13b1a12fc2efe5b2294433c919d6881dff64491f4620632a4a17c2d00be06d362254414d95ff9c4da74f1
