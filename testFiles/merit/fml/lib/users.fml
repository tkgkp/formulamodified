:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: users.fml [17.00]
:: Utworzony: 12.11.2014
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły do obsługi tabeli USERS i SYSUSERS (synchronizacja)
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca obiekt nazwany - bufor tabeli USERS
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_buf:=exec('USERS','buffer');
_buf


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Funkcja dodająca rekord do tabeli USERS
::   WE: _a - obj_new - tablica nazwana bedaca buforem tabeli exec('buffer','users')
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(null) ?};

_result:=0;
:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};

USERS.cntx_psh();
USERS.index('USR_GUID');
:: Jeśli jeszcze takiego nie ma, to go dodaje
USERS.prefix(_buffer.GUID,_buffer.KOD);
{? USERS.first()=0
|| USERS.blank();
   _buffer.set();
   USERS.USERID:=USERS.KOD;
   USERS.NAME:=USERS.DANE;
   {? USERS.add()>0
   || _buffer.get();
      USERS.memo_put(,'DESC');
      USERS.memo_put(,'FOOT');
      _result:=1
   || undo()
   ?}
?};
USERS.cntx_pop();
{? _mydo || end() ?};
_result


\put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Funkcja aktualizująca rekord tabeli USERS
::   WE: _a - obj_new - tablica nazwana będąca buforem tabeli exec('buffer','users')
::       [_b] - USERS.ref który aktualizować lub bieżący rekord jeśli nie podane
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100 || _a || return(null) ?};

_ref:=null();
{? var_pres('_b')=type_of(SYSLOG.ref())
|| _ref:=_b
?};

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};

USERS.cntx_psh();
{? _ref<>null()
|| USERS.clear();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};
{? _can_continue>0
||
   {? USERS.DANE<>_buffer.DANE & USERS.KOD<>'admin'
   ||
      _userid:='';
      {? USERS.GUID<>''
      || _userid:=USERS.GUID
      || _userid:=USERS.KOD
      ?};

      {? _userid<>''
      ||
::       Zmieniła się nazwa użytkownika - trzeba to też nawinąć w tabeli SYSSUSER
         _sysobj:=exec(,'__sysusr');
         SYSSUSER.cntx_psh();
         _sysusr:=_sysobj.getUser(_userid);
         {? var_pres('_sysusr')>100
         || _sysusr.Descr:=_buffer.DANE;
            _sysobj.putUser(_sysusr)
         ?};
         SYSSUSER.cntx_pop();
         SYSSUSER.get()
      ?}
   ?};
   _buffer.set();
   _result:=exec('users_put','#users');
   {? _result>0 & type_of(_buffer.DESC)=type_of('')
   || _result:=USERS.memo_put(,'DESC')
   ?};
   {? _result>0 & type_of(_buffer.FOOT)=type_of('')
   || _result:=USERS.memo_put(,'FOOT')
   ?}
?};
USERS.cntx_pop();
{? _result<=0
|| undo()
?};
{? _mydo || end() ?};
_result


\mk_edit_others
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Tworzy tymczasowe okno redagowania innych / ogólnych danych
::   WE: _a - [0]/1 - [inne dane] / ogólne dane
::   WY: STRING - akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_dane:=0;
{? var_pres('_a')=type_of(0)
|| _dane:=1
?};

:: Czy użytkownik jest osobą odpowiadającą na pytania zadawane na portalu?
:: Jeżeli tak, to blokujemy możliwość zmiany zawartości pola USERS.OSOBA.
_oo:=exec('prefix','#table',BIPPYTO,,'first',,'UNIQ',USERS.ref());

{? _dane
|| _tytul:='Dane użytkownika'@
|| _tytul:='Dodatkowe informacje'@
?};
_red:=USERS.mk_edit(_tytul,,'#users_other',,,'html_maximized');

{? _dane
|| USERS.win_esep(_red,'Użytkownik'@);
   USERS.win_efld(_red,,'KOD',,,30,,1);
   USERS.win_efld(_red,,'DANE',,,30,,1)
?};
USERS.win_esep(_red,'Kontrahent'@);
USERS.win_efld(_red,,'KH','SKR','SKR',30,,,'Skrót'@);
USERS.win_efld(_red,,'KH','NAZ',,60,,,'Nazwa'@);
USERS.win_esep(_red,'Osoba'@);
USERS.win_efld(_red,,'OSOBA','NAZWISKO','OSOBA',30,,_oo,'Nazwisko'@);
USERS.win_efld(_red,,'OSOBA','PIERWSZE',,30,,,'Imię'@);
USERS.win_esep(_red,'Handlowiec'@);
USERS.win_efld(_red,,'HAN','KOD','KOD',30,,,'Kod'@);
USERS.win_efld(_red,,'HAN','NAZ',,30,,,'Nazwa'@);

USERS.win_esep(_red,'Inne dane'@);
USERS.win_efld(_red,,'EMAIL',,,63,,,'E-mail'@);
USERS.win_efld(_red,,'FOOT',,,63,-3,,'Stopka e-mail'@);
USERS.win_efld(_red,,'DESC',,,63,-3,,'Opis użytkownika'@);
USERS.win_efld(_red,,'TEL',,,63,-3,,'Telefon'@);
USERS.win_esep(_red,'Parametry wydruku z urządzenia'@);
USERS.win_efld(_red,URZ_URZ,'URZ','NAZWA','URZKAT',30,,0,'Drukarka'@);
USERS.win_efld(_red,URZ_URZ,'URZ_LAB','KOD','URZ_LAB',30,,0,'Wzorzec etykiety'@);

exec('ok_esc','#window',USERS,_red);

_red


\struct2buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wypełnia bufor tabeli USERS na podstawie struktury systemowej reprezentującej rekord SYSSUSER
::   WE: _a - wypełniona stuktura systemowa reprezentująca SYSSUSER - .newUser() z pliku __sysuser
::       [_b] - obj_new - bufor tabeli USERS
::   WY: obj_new - bufor tabeli USERS - wynik działania exec('buffer','users')
::----------------------------------------------------------------------------------------------------------------------
_struct:=_a;

_buffer:=~~;
{? var_pres('_b')>100
|| _buffer:=_b
|| _buffer:=exec('buffer','users');
   _buffer.DESC:='';
   _buffer.FOOT:=''
?};

_buffer.GUID:=_struct.Guid;
_buffer.KOD:=_struct.Login;
_buffer.DANE:=_struct.Descr;

:: Ustawiam znacznik czy użytkownik może się logować przez portal
{? _struct.Auth.Web.Active>0 | _struct.Auth.Ldap.WebActive>0
|| _buffer.PORTAL:='T'
|| _buffer.PORTAL:='N'
?};

:: Zawsze aktualizujemy WEBLOGIN, bo wyłączenie uwierzytelniania po stronie systemowej
:: czasami usuwa też WEBLOGIN
_buffer.WEBLOGIN:=_struct.Auth.Web.Login;

:: Ustawiam znacznik czy użytkownik może się logować do jterma
{? _struct.Auth.Pass.Active>0 | _struct.Auth.Cert.Active>0 | _struct.Auth.Ldap.Active>0
|| _buffer.JTERM:='T'
|| _buffer.JTERM:='N'
?};

:: Ustawiam znacznik czy użytkownik może się logować przez LDAP
_buffer.LDAP:='N';
{? _struct.Auth.Ldap.Active>0 | _struct.Auth.Ldap.WebActive>0
|| _buffer.LDAP:='T'
?};

:: Ustawiam znacznik czy użytkownik może się logować CAS
{? _struct.Auth.Cas.Active>0
|| _buffer.CAS:='T'
|| _buffer.CAS:='N'
?};

:: Zawsze aktualizujemy CASUID, bo wyłączenie uwierzytelniania po stronie systemowej
:: czasami usuwa też CASUID
_buffer.CASUID:=_struct.Auth.Cas.UserId;

:: Ustawiam znacznik czy użytkownik jest specjalny
_buffer.SUPER:='N';
{? _struct.Superuser>0
|| _buffer.SUPER:='T'
?};
_buffer


\buffer2struct
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wypełnia strukturę systemowej reprezentującą rekord SYSSUSER na podstawie bufora tabeli USERS
::   WE: _a - obj_new - bufor tabeli USERS - wynik działania exec('buffer','users')
::       [_b] - obj_new - systemowy obiekt do obsługi SYSSUSER
::   WY: obj_new - wypełniona stuktura systemowa reprezentująca SYSSUSER - .newUser() z pliku __sysuser
::----------------------------------------------------------------------------------------------------------------------
_buffer:=_a;

_sysobj:=1;
{? var_pres('_b')>100
|| _sysobj:=_b
||
:: Pobieram obiekt systemowy do obsługi SYSSUSER
   _sysobj:=exec(,'__sysusr',1)
?};

:: Pobieram strukture dla nowego użytkownika
_struct:=_sysobj.blankUser();

_struct.Login:=_buffer.KOD;
_struct.Descr:=_buffer.DANE;

{? _buffer.PORTAL='T' & _buffer.WEBLOGIN<>''
|| _struct.Auth.Web.Active:=1;
   _struct.Auth.Web.Login:=_buffer.WEBLOGIN
?};

{? _buffer.JTERM='T' | _buffer.JTERM=''
|| _struct.Auth.Pass.Active:=1
?};
_struct


\synchronize
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Synchronizuje tabele USERS na podstawie SYSSUSER
::   WY: 0 - sukces
::       1 - porażka
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=1;
_result:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};

:: Pobieram obiekt systemowy do obsługi SYSSUSER
_sysobj:=exec(,'__sysusr',1);

USERS.cntx_psh();
USERS.index('USR_GUID');
SYSSUSER.cntx_psh();
SYSSUSER.clear();

:: 1. Aktualizacja użytkowników istniejących lub usuwanie tych których już nie ma w SYSSUSER
USERS.prefix();
{? USERS.first()
|| {!
   |?
      _next:=0;
      _ref_nxt:=null();
      USERS.cntx_psh();
      {? USERS.next()
      || _ref_nxt:=USERS.ref()
      ?};
      USERS.cntx_pop();

      exec('synchronize_one','users',,_sysobj);

      {? _ref_nxt<>null()
      || _next:=USERS.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};

:: 2. Dodawanie nowych użytkowników z SYSSUSER
SYSSUSER.clear();
{? SYSSUSER.first()
||
   {!
   |? _can_continue:=exec('synchronize_one_syss','users',,_sysobj);
      {? _can_continue<=0
      || _result:=0;
         undo()
      ?};
      SYSSUSER.next()
   !}
?};
SYSSUSER.cntx_pop();
USERS.cntx_pop();
USERS.get();

{? _mydo || end() ?};
_result


\synchronize_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Synchronizuje pojedyńczego użytkownika aplikacyjnego
::   WE: [_a] - USERS.ref lub bieżący rekord
::       [_b] - obj_new - systemowy obiekt do obsługi użytkowników
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(USERS.ref())
|| _ref:=_a
?};

_sysobj:=~~;
{? var_pres('_b')>100
|| _sysobj:=_b
|| _sysobj:=exec(,'__sysusr',1)
?};

_result:=0;
_can_continue:=1;
SYSSUSER.cntx_psh();
B_USRROL.cntx_psh();
B_USRROL.index('USER');
USERS.cntx_psh();
{? _ref<>null()
|| USERS.prefix();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _userid:=~~;
   {? USERS.GUID<>''
   ||
::    Jeśli identyfikator na USERze wypełniony to szukam w SYSSUSERS na jego podstawie
      {? exec('find_syssuser','users',USERS.GUID)>0
      || _userid:=SYSSUSER.ref()
      || _userid:=USERS.KOD
      ?}
   || _userid:=USERS.KOD
   ?};

   _sysusr:=_sysobj.getUser(_userid);
   {? var_pres('_sysusr')>100
   || {? USERS.GUID=_sysusr.Guid | USERS.KOD='admin'
      ||
         _buffer_before:=exec('buffer','users');
         _buffer_before.get(1);

         _xpertis:='N';
::       Aktualizacja czy użytkownik ma jakieś role przypisane
          B_USRROL.prefix(REF.FIRMA,USERS.ref());
         {? B_USRROL.size()>0
         || _xpertis:='T'
         ?};
         _buffer:=exec('buffer','users');
         _buffer.get(1);
         _buffer.AKT:='T';
         _buffer.XPERTIS:=_xpertis;
         _buffer.GUID:=_sysusr.Guid;

         exec('struct2buffer','users',_sysusr,_buffer);
         _compare:=exec('compare','#table',_buffer_before,_buffer,1);
         {? _compare=0
         || _can_continue:=exec('put','users',_buffer)
         ?}
      ?}
   ||
::    Brak takiego usera w SYSSUSER
::    Probuje usunac uzytkownika jestli to mozliwe
      _deleted:=exec('delete','#users',USERS.ref());
::    Jeśli nie udało sie usunąć to dezaktywuje
      {? _deleted=0
      || exec('deactivate','users')
      ?}
   ?}
?};
USERS.cntx_pop();
B_USRROL.cntx_pop();
SYSSUSER.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\synchronize_one_syss
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Synchronizuje jednego użytkownika systemowego
::   WE: [_a] - SYSSUSER.ref lub bieżący użytkownik
::       [_b] - obj_new - systemowy obiekt do obsługi użytkowników
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSSUSER.ref())
|| _ref:=_a
?};

_sysobj:=~~;
{? var_pres('_b')>100
|| _sysobj:=_b
|| _sysobj:=exec(,'__sysusr',1)
?};

_result:=0;
_can_continue:=1;

SYSSUSER.cntx_psh();
{? _ref<>null()
|| SYSSUSER.prefix();
   {? SYSSUSER.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
:: Pobieram systemowy obiekt reprezentujący SYSSUSERa
   _sysusr:=_sysobj.getUser(SYSSUSER.ref);

:: Sprawdzam czy istnieje już taki użytkownik aplikacyjny
   USERS.cntx_psh();
   USERS.prefix(_sysusr.Guid);
   {? USERS.first()=0
   ||
::    Nie ma takiego użytkownika - zakładam go
      {? var_pres('_buffer')>100
      || obj_del(_buffer)
      ?};
      _buffer:=exec('struct2buffer','users',_sysusr);
      _buffer.AKT:='T';
      _buffer.XPERTIS:='N';
      _can_continue:=exec('add','users',_buffer)
   ?};
   USERS.cntx_pop()
?};
SYSSUSER.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\deactivate
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Dezaktyuwuje podanego użytkownika
::   WE: [_a] - USERS.ref - użytkownik lub bieżący rekord
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

USERS.cntx_psh();
{? _ref<>null()
|| USERS.clear();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| USERS.AKT:='N';
   _can_continue:=exec('users_put','#users');

   {? _can_continue>0
   ||
::    Usuwam użytkownikowi uprawnienia do ról i danych
      exec('clean_role','#users');
      exec('upr_usr_del','schemat',USERS.ref());
      exec('clean_zws_params','#params',USERS.ref());
      ~~
   ?}
?};
USERS.cntx_pop();
USERS.get();
{? _can_continue>0
|| _result:=1
?};
_result


\resurrection
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Funkcja przywraca danego użytkownika z USERS do SYSSUSER
::   WE: [_a] - USERS.ref lub bieżący rekord
::       [_b] - INTEGER - obsługa komunikatów -  0 - do obiektu __XLS_VALID
::                                              [1]: na ekran
::                                               2: do KOMMa
::       [_c] - TABLE - tabela której sprawdzać zaznaczenie, domyślnie cur_tab
::       [_d] - INTEGER - czy wykonywać aktualizację uwierzytelniania
::       [_e] - INTEGER - 0/1 - czy wykonywać synchronizację
::   WY:  0 - nie przywrócono użytkownika
::        1 - przywrócono użytkownika
::       -1 - przywrócono użytkownika, ale były jakieś ostrzeżenia
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};
_dialog:=1;
{? var_pres('_b')=type_of(0)
|| _dialog:=_b
?};

:: jesli akcja grupowa to komunikaty i tak zawsze do KOMM
_tab:=~~;
{? var_pres('_c')>100
|| _tab:=_c
|| _tab:=cur_tab(1,1)
?};
_auth:=1;
{? var_pres('_d')=type_of(0)
|| _auth:=_d
?};
_synchro:=1;
{? var_pres('_e')=type_of(0)
|| _synchro:=_e
?};

{? _tab.sel_size()>0
|| _dialog:=2
?};


_result:=0;
_can_continue:=1;

:: Pobieram obiekt systemowy do obsługi SYSSUSER
{? _dialog=0
|| _sysobj:=exec(,'__sysusr');
:: Wyłączenie komunikatów
   _sysobj.showMessages(0);
   ~~
|| _sysobj:=exec(,'__sysusr',1)
?};

USERS.cntx_psh();
{? _ref<>null()
|| USERS.clear();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   USERS.get();
:: Sprawdzam czy nie ma przypadkiem już takiego SYSSUSERa
   _sysusr:=_sysobj.getUser(USERS.KOD);
   {? var_pres('_sysusr')>100
   || _can_continue:=0;
      _msg:='Użytkownik: %1 znajduje się już na serwerze.'@[USERS.KOD];
      {? _dialog=0
      || __XLS_VALID.MSG:=_msg
      |? _dialog=1
      || FUN.emsg(_msg)
      |? _dialog=2
      || KOMM.add(_msg,2)
      ?}
   || _can_continue:=1
   ?};
   {? _can_continue>0
   ||
::    Pobieram bufor tabeli USERS
      _buffer:=exec('buffer','users');
      _buffer.get();

::    Na podstawie bufora generuję strukturę systemową do obsługi SYSSUSER
      _struct:=exec('buffer2struct','users',_buffer,_sysobj);

::    Resetuje haslo na takie jak login i wymuszam jego zmianę podczas najbliższego logowania
      {? USERS.JTERM='N' & USERS.PORTAL='N'
      || USERS.JTERM:='T'
      ?};
      {? _auth>0
      || {? USERS.JTERM='T' | USERS.JTERM=''
         || _struct.Auth.Pass.Password:=USERS.KOD;
            _struct.Auth.Pass.ForceChange:=1
         ?};

         {? USERS.PORTAL='T'
         || _struct.Auth.Web.Password:=USERS.WEBLOGIN
         ?}
      ||
         {? USERS.JTERM='T' | USERS.JTERM=''
         || _struct.Auth.Pass.Active:=0
         ?};
         {? USERS.PORTAL='T' | USERS.PORTAL=''
         || _struct.Auth.Web.Active:=0
         ?}
      ?};
      _newusr:=~~;
::    Dodaje użytkownika do SYSSUSER
      _result:=_sysobj.addUser(_struct,1);
::    Jeśli udało sie dodać do SYSSUSER to USERowi nadpisuje GUID
      {? _result<>0
      || _guid:='';
         _newusr:=_sysobj.getUser(USERS.KOD);
         {? var_pres('_newusr')>100
         || _guid:=_newusr.Guid
         ?};
         USERS.GUID:=_guid;
         exec('users_put','#users')
      ||
         _msg:='Nie powiodło się dodanie użytkownika: %1 na serwerze.'@[USERS.KOD];
         {? _dialog=0
         || __XLS_VALID.MSG:=_msg
         |? _dialog=1
         || FUN.emsg(_msg)
         |? _dialog=2
         || KOMM.add(_msg,2)
         ?}
      ?};

::    Po dodaniu użytkownika wykonuję synchronizacje
      {? _synchro>0
      || exec('synchronize_one','users',,_sysobj)
      ?};
      ~~
   ?}
?};
USERS.cntx_pop();
USERS.get();
_result


\resurr_act
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Akcja przywrócenia użytkownika nieaktywnego do SYSSUSER w oknie wertowania USERS
::   WY:  0 - nie przywrócono użytkownika
::        1 - przywrócono użytkownika
::       -1 - przywrócono użytkownika, ale były jakieś ostrzeżenia
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

:: jesli akcja grupowa to komunikaty do KOMM
_dialog:=1;
{? cur_tab(1,1).sel_size()>0
|| _dialog:=2
?};

{? USERS.AKT='N'
||
   {? _dialog=1
   || _msg:='Czy przywrócić użytkownika: %1 do aktywnych użytkowników na serwerze?\n\n'
            'Przywróconemu użytkownikowi zostanie nadane hasło takie jak login\n'
            'i w przypadku dostępu jTerm będzie wymagana zmiana hasła podczas pierwszego logowania.'@[USERS.KOD];
      _can_continue:=FUN.ask(_msg)
   ?};

   {? _can_continue>0
   ||
      _result:=exec('resurrection','users',,_dialog);

      _msg:='';
      {? _result=0
      || _msg:='Dodanie użytkownika: %1 na serwer aplikacji nie powiodło się.'@[USERS.KOD];
         {? _dialog=1
         || FUN.emsg(_msg)
         |? _dialog=2
         || KOMM.add(_msg,2)
         ?}
      ?}
   ?}
|| FUN.emsg('Użytkownik: %1 jest już aktywny.'@[USERS.KOD])
?};
_result


\resurr_act_gr1
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Akcja grupa przed przywrócenia użytkownika nieaktywnego do SYSSUSER w oknie wertowania USERS
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);

_msg:='Zaznaczonych użytkowników: %1. Czy przywrócić ich wszystkich do aktywnych użytkowników na serwerze?\n\n'
      'Przywróconym użytkownikom zostanie nadane hasło takie jak login\n'
      'i w przypadku dostępu jTerm będzie wymagana zmiana hasła podczas pierwszego logowania.\n'@[$_tab.sel_size()];

{? FUN.ask(_msg)
|| _result:=1;
   KOMM.init(250,,'Przywracanie użytkowników na serwer aplikacji'@)
?};
_result


\resurr_act_gr2
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Akcja grupa przed przywrócenia użytkownika nieaktywnego do SYSSUSER w oknie wertowania USERS
::----------------------------------------------------------------------------------------------------------------------
KOMM.select(,,,,,0);
~~


\add_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Akcja dodawania nowego użytkownika w oknie wertowania USERS
::   WE: [_a] - dane użytkownika (domyślnie brak)
::       [_b] - login użytkownika (domyslnie brak)
::       [_c] - T/N - dialog
::   WY: null - porażka
::       ref USERS - sukces
::----------------------------------------------------------------------------------------------------------------------
_newref:=null();
_descr:='';
_login:='';
_dialog:='T';
{? var_pres('_a')=type_of('') || _descr:=_a ?};
{? var_pres('_b')=type_of('') || _login:=_b ?};
{? var_pres('_c')=type_of('') & (_c='T' | _c='N') || _dialog:=_c ?};

SYSSUSER.cntx_psh();
_oldusr:=SYSSUSER.GUID;

:: Pobieram obiekt systemowy do obsługi SYSSUSER
_sysobj:=exec(,'__sysusr',1);

SYSSUSER.blank(1);

{? +form(_descr+_login)
|| _usr:=_sysobj.blankUser();
   _usr.Login:=_login;
   _usr.Descr:=_descr;
   {? _dialog='T'
   || _result:=_sysobj.XPass.newUser(_usr)
   || _result:=_sysobj.addUser(_usr)
   ?}
|| _result:=_sysobj.XPass.newUser()
?};

_newusr:='';
{? _result<>0
|| _newusr:=SYSSUSER.GUID
?};

{? _newusr<>''
||
:: Uruchamiam synchronizacje
   exec('synchronize_one_syss','users',,_sysobj)
?};

:: Ustawiam się na rekordzie który dodałem
{? _newusr<>''
|| _newref:=exec('FindInSet','#table','USERS','USR_GUID',_newusr);
   {? _newusr<>_oldusr || USERS.seek(_newref) ?}
?};
SYSSUSER.cntx_pop();
_newref


\delete_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Akcja usuwania użytkownika w oknie wertowania USERS
::   WE: [_a] - INTEGER - 0/[1]/2 - tryb wyświetlania komunikatów: 0 - brak, 1 - na ekran, 2 - do KOMMa
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_dialog:=1;
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
?};

_result:=0;
_can_continue:=1;
_viewport:=null();

_tab:=cur_tab(1,1);
_group:=0;
{? _tab.sel_size()>0
|| _group:=1;
   _dialog:=2
?};

USERS.cntx_psh();
{? USERS.prev()
|| _viewport:=USERS.ref()
?};
USERS.cntx_pop();

{? USERS.AKT='T' & USERS.GUID<>''
||
:: Pobieram obiekt systemowy do obsługi SYSSUSER
   _sysmsg:=1;
   {? _dialog<>1
   || _sysmsg:=0
   ?};
   _sysobj:=exec(,'__sysusr',_sysmsg);

:: Jesli użytkownik znajduje się w SYSSUSER to najpierw usuwam go stamtąd a następnie robię synchro
   SYSSUSER.cntx_psh();
   _sysusr:=_sysobj.getUser(USERS.GUID);
   {? var_pres('_sysusr')>100
   || {? _sysmsg>0
      || _result:=_sysobj.XPass.deleteUser(_sysusr)
      || _result:=_sysobj.delUser(_sysusr)
      ?};
      {? _result=0 & _dialog=2
      || {? _sysobj.LastErrorMessage<>''
         || _msg:='Błąd usunięcia użytkownika: %1 z serwera: %2'@[USERS.KOD,_sysobj.LastErrorMessage]
         || _msg:='Usunięcie z serwera użytkownika: %1 zakończone niepowodzeniem.'@[USERS.KOD]
         ?};
         KOMM.add(_msg,2,,1)
      ?}
   ?};

   {? _result<>0 & exec('find_syssuser','users',USERS.GUID)=0
   ||
::    Jeśli na pewno nie ma już takiego SYSSUSERA to usuwamm użytkownikowi uprawnienia do rol
      exec('clean','#users',USERS.ref());

::    Sprawdzam czy można usunąć użytkownika po stronie aplikacyjnej
      {? exec('can_delete','#users')>0
      || {? exec('delete','#users',USERS.ref())>0
         ||
::          Jeżeli usunąłem użytkownika to ustawiam się na poprzednim rekordzie żeby mi widok nie skakał
            USERS.seek(_viewport)
         ?}
      || _msg:='Użytkownik: %1 został usunięty z serwera, ale ze względu na powiązania \n'
               'nie został usunięty z aplikacji. Zamiast tego nastąpiła jego dezaktywacja.'@[USERS.KOD];
         {? _dialog=1
         || FUN.emsg(_msg)
         |? _dialog=2
         || KOMM.add(_msg,2,,1)
         ?};
         exec('synchronize_one','users',,_sysobj)
      ?}
   ?};
   SYSSUSER.cntx_pop()
||
:: Jeśli użytkownika nie ma w SYSSUSER to usuwam go tylko z USERS
   {? _dialog=1
   || _msg:='Czy usunąć użytkownika: %1?'@[USERS.KOD];
      _can_continue:=FUN.ask(_msg)
   ?};

   {? _can_continue>0
   ||
      exec('clean','#users',USERS.ref());

::    Sprawdzam czy można usunąć użytkownika
      _can_continue:=exec('can_delete','#users');

      {? _can_continue>0
      || _result:=exec('delete','#users',USERS.ref())
      || _msg:='Użytkownik: %1 powiązany w systemie. Usunięcie niemożliwe.'@[USERS.KOD];
         {? _dialog=1
         || _choice:=FUN.choice(_msg,,'Szczegóły...'@,,,,'Zamknij'@);
            {? _choice=1
            || _testlink:=USERS.testlink();
               _testlink.first();
               exec('select','#table',_testlink)
            ?}
         |? _dialog=2
         || KOMM.add(_msg,2,,1)
         ?};
         exec('synchronize_one','users')
      ?}
   ?}
?};
_result


\delete_action_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Akcja usuń grupa przed w oknie wertowania tabeli USERS
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczono: %1 użytkowników. Czy usunąć ich wszystkich?'@[$_tab.sel_size()])
|| _result:=1;
   sel_nchk();
   KOMM.init(250,,'Usuwanie użytkowników'@,'')
?};
_result


\delete_action_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Akcja usuń grupa po w oknie wertowania tabeli USERS
::----------------------------------------------------------------------------------------------------------------------
KOMM.select(,,,,,0);
exec('synchronize','users');
~~


\popraw_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Akcja poprawiania użytkownika w oknie wertowania USERS
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

{? USERS.AKT='T'
||
:: Pobieram obiekt systemowy do obsługi SYSSUSER
   _sysobj:=exec( ,'__sysusr', 1);

:: Jeśli użytkownik znajduje się w SYSSUSER to wykonuje poprawienie systemowe
   _sysusr:=_sysobj.getUser(USERS.GUID);
   {? var_pres('_sysusr')>100
   || _result:=_sysobj.XPass.editUser(_sysusr)
   ?};
   {? _result>0
   || exec('synchronize_one','users',,_sysobj)
   ?}
||
:: Jeśli użytkownika nie ma w SYSSUSER to komunikat i do widzenia
   _msg:='Użytkownik: %1 jest nieaktywny. Poprawianie niedozwolone.'@[USERS.KOD];
   FUN.emsg(_msg);
   ~~
?};
_result


\find_syssuser
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [17.00]
:: OPIS: Na podstawie przekazanego GUIDa ustawia sie na SYSSUSERze
::   WE: _a - IDTIME - USERS.GUID
::   WY: 0 - brak SYSSUSERa o takim GUID
::       1 - znaleziono SYSSUSERa o podanym GUID
::----------------------------------------------------------------------------------------------------------------------
_guid:=_a;

_result:=0;

SYSSUSER.index('GUID');
SYSSUSER.prefix(_guid);
{? SYSSUSER.first()
|| _result:=1
?};
SYSSUSER.clear();
_result


\others_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Akcja uzupełniania innych danych użytkownika w oknie wertowania USERS
::----------------------------------------------------------------------------------------------------------------------
:: Deklaruję potrzebne obiekty
{? var_pres('PAR_SKID')<100
|| exec('par_decl','#parametr');
   PAR_SKID:=obj_new(@.CLASS.PAR_CL)
?};
exec('load_par','#parametr');
__PAR188:=0;

:: Ustawiam okna
KH.win_sel('WER');
KH.actions('WER','W');
OSOBA.win_sel('SLO');
HAN.win_sel('SLO');
HAN.actions('SLO','dpu:dpu');

{? USERS.AKT<>'N'
||
   USERS.memo_get(,'DESC',0);
   USERS.memo_get(,'FOOT',0);

   _et_ref:=null();
:: urządzenie do wydruku etykiet
   EANX.IDURZ:=USERS.uidref();
   URZ_URZ.index('IDURZ');
   URZ_URZ.prefix(EANX.IDURZ);
   {? URZ_URZ.first() || _et_ref:=URZ_URZ.ref(); URZ_URZ.get() || URZ_URZ.blank() ?};

:: Tworzę okno redagowania
   _red:=exec('mk_edit_others','users');
   USERS.win_edit(_red);
   _valid:="
      _result:='';
      {? USERS.OSOBA<>null() & exec('_osoba_unique','users',USERS.OSOBA,USERS.ref())=0
      || _msg:='Wskazana osoba [%1] jest już przypisana do innego użytkownika.'@
            [exec('record','#to_string',USERS.OSOBA)];
         FUN.emsg(_msg);
         _result:='OSOBA'
      |? URZ_URZ.URZ<>null() & URZ_URZ.URZ_LAB=null()
      || _msg:='Wskazano urządzenie drukujące.\nWymagane podanie wzorca wydruku etykiety.'@;
         FUN.emsg(_msg);
         _result:='URZ_LAB'
      ?};
      _result
   ";
   {? USERS.edit(_valid)
   || {? exec('users_put','#users')
      || USERS.memo_put(,'DESC');
         USERS.memo_put(,'FOOT');
         _new_et:=_et_ref=null();
         {? URZ_URZ.URZ<>null() & URZ_URZ.URZ_LAB<>null()
         || URZ_URZ.DOM:='T';{? _new_et || URZ_URZ.add(1) || URZ_URZ.put(1) ?}
         |? _et_ref<>null() & URZ_URZ.seek(_et_ref)
         || URZ_URZ.del()
         ?}
      ?}
   ?}
|| FUN.emsg('Akcja niedostępna dla nieaktywnego użytkownika.'@)
?};
KH.actions('WER');
HAN.actions('SLO');
~~


\display
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Akcja wyświetl użytkownika w oknie wertowania USERS
::----------------------------------------------------------------------------------------------------------------------
_pokazano:=0;
{? USERS.AKT='T'
:: Pobieram obiekt systemowy do obsługi SYSSUSER
|| _sysobj:=exec(, '__sysusr', 1);
   SYSSUSER.cntx_psh();
   _userid:=~~;
   {? USERS.GUID<>''
   || _userid:=USERS.GUID
   || _userid:=USERS.KOD
   ?};
  _sysusr:=_sysobj.getUser(_userid);
   {? var_pres('_sysusr')>100
:: Pobieram obiekt systemowy do obsługi SYSSUSER
   || _pokazano:=1;
      _sysobj.XPass.__displayUserSummary(_sysusr, 'display')
   ?};
   SYSSUSER.cntx_pop()
?};
{? ~_pokazano
|| _red0:=USERS.win_edit('?');
   _red:=exec('mk_edit_others','users',1);
   USERS.win_edit(_red);
   USERS.display();
   USERS.win_edit(_red0)
?};
~~


\after_rfr_users
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Po odświeżeniu okna z użytkownikami (po zmianie zaznaczonego rekordu)
::----------------------------------------------------------------------------------------------------------------------
exec('hid_actions','users');
Perm.setUser(USERS.ref());
grp_disp(Perm.getUserPermTab(),Perm.userWin4(),1);
~~


\br_users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Rekord przed tabeli USERS
::----------------------------------------------------------------------------------------------------------------------
USER.PERM_SET:=Perm.allPermSet(USERS.ref());

VAR.PORTAL2:=exec('FindInSet','#table','USERSF','UNIK',USERS.ref(),REF.FIRMA,"USERSF.PORTAL2",,,'N');

VAR.STRING2:='N';
{? USERS.AKT='T'
||
:: Nawijam pole czy użytkownik zalogowany
   {? exec('is_logged','#users',USERS.ref())>0
   || VAR.STRING2:='T'
   ?};
:: Ustawiam się na SYSSUSERSE
   exec('find_syssuser','users',USERS.GUID)
||
   SYSSUSER.blank(1)
?};
''


\can_config_login
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Sprawdza czy można uruchomić akcje dotyczące uwierzytelniania dla zaznaczonego użytkownika
::   WE: [_a] - czy wyświetlać dialogi: [1]/0
::   WY: 0 - brak dostępu
::       1 - jest dostęp
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_dialog:={? var_pres('_a')=type_of(0) || _a || 1 ?};
{? USERS.AKT='T'
|| _result:=1
|| {? _dialog>0 || FUN.emsg('Akcja niedostępna dla nieaktywnego użytkownika.'@) ?}
?};
_result


\hid_actions
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Wyszarza akcje w oknie wertowania tabeli USERS
::----------------------------------------------------------------------------------------------------------------------
_selected:=(USERS.sel_size()>0);

_hid_actions:='C(U)';
_wer:=cur_win(1,1);

:: Gdy zaznaczono rekordy
{? _selected
|| _hid_actions+='';
:: Portal: W(P(K)) i W(P(Y)) obecnie zawsze niedostępne
:: MFA W(M(W)) - niedostępne (włącz zawarte w akcji Konfiguruj)
   USERS.actions(_wer,'W(P(KY)M(W))',,1);
   USERS.actions_grayed(_wer,_hid_actions)

|? USERS.AKT='T'
||
:: Pobieram obiekt systemowy do obsługi SYSSUSER
   {? var_pres('__sysobj')>100
   || _sysobj:=__sysobj
   || _sysobj:=exec(,'__sysusr',1)
   ?};

:: Pobieram systemowy obiekt reprezentujący SYSSUSERa
   {? var_pres('_sysusr')>100
   || obj_del(_sysusr)
   ?};
   _user:=_sysobj.getUser(SYSSUSER.ref);

:: dostępność akcji na podstawie metod logowania
   {? _user.Auth.Pass.Active
   || _hid_actions+='W(H(W))'
   || _hid_actions+='W(H(K))W(H(Y))W(H(O))';
     {? SYSSUSER.PASSWORD=''
     || _hid_actions+='W(H(U))'
     ?}
   ?};
   {? _user.Auth.Ldap.Active | _user.Auth.Ldap.WebActive>0
   || _hid_actions+='W(A(W))'
   || _hid_actions+='W(A(K))W(A(Y))';
      {? SYSSUSER.LDAPGUID=''
      || _hid_actions+='W(A(U))'
      ?}
   ?};
   {? _user.Auth.Cert.Active
   || _hid_actions+='W(C(W))'
   || _hid_actions+='W(C(K))W(C(Y))';
      {? SYSSUSER.CERTSN=''
      || _hid_actions+='W(C(U))'
      ?}
   ?};
   {? _user.Auth.Web.Active
   || _hid_actions+='W(W(W))'
   || _hid_actions+='W(W(K))W(W(Y))W(W(O))';
      {? SYSSUSER.WEBLOGIN=''
      || _hid_actions+='W(W(U))'
      ?}
   ?};
   {? _user.Auth.Cas.Active
   || _hid_actions+='W(S(W))'
   || _hid_actions+='W(S(K))W(S(Y))W(S(O))';
      {? SYSSUSER.CASUID=''
      || _hid_actions+='W(S(U))'
      ?}
   ?};
   {? _user.Auth.Mfa.Active
   || _hid_actions+='W(M(W))'
   || _hid_actions+='W(M(K))W(M(Y))W(M(O))';
      {? _sysobj.getUserData('mfa',_user,1)=''
      || _hid_actions+='W(M(U))'
      ?}
   ?};

   {? exec('user_active','ekioski',USERS.ref())
   || _hid_actions+='W(E(W))'
   || _hid_actions+='W(E(K))W(E(Y))';
      {? ~exec('user_present','ekioski',USERS.ref())
      || _hid_actions+='W(E(U))'
     ?}
   ?};
   {? exec('user_active','magazyn_mob',USERS.ref())
   || _hid_actions+='W(O(W))'
   || _hid_actions+='W(O(K))W(O(Y))';
      {? ~exec('user_present','magazyn_mob',USERS.ref())
      || _hid_actions+='W(O(U))'
     ?}
   ?};
:: Portal: W(P(K)) i W(P(Y)) obecnie zawsze niedostępne
:: _hid_actions+='W(P(KY))';
:: Portal: W(P(WKYU))
   _portal2:=exec('FindInSet','#table','USERSF','UNIK',USERS.ref(),REF.FIRMA,"USERSF.PORTAL2",,,'N');
   {? _portal2='T'
   || _hid_actions+='W(P(W))'
   |? _portal2='X'
   || _hid_actions+='W(P(KY))'
   || _hid_actions+='W(P(KYU))'
   ?};

   {? 0 & sec_superuser()
   ||
     USERS.actions_grayed(_wer);
     USERS.actions_grayed(_wer, _hid_actions)
   ||
::    Wyszarzanie funkcji odblokowania konta (uwierzytelnianie hasłem)
      _grayed:='';
      _auth_pass:=_user.Auth.Pass;

      {? _auth_pass.Active & _auth_pass.BadLogins>0
      ||
::       wyznaczam liczbe blednych logowan
         _badlogin := 0;
         SYSSUHIS.cntx_psh();
         SYSSUHIS.index('DATA');
         SYSSUHIS.prefix(_user.Guid,_sysobj.CONST.HISTORY.ENTRY.BAD_LOGIN,_sysobj.CONST.HISTORY.AUTH_TYPE.PASS,);
         {? SYSSUHIS.last()
         || _badlogin:=SYSSUHIS.size();
            _lastbad_dt:=_sysobj.Lib.getDateTime(SYSSUHIS.STAMP)
         ?};
         SYSSUHIS.cntx_pop();

         {? _badlogin<=_auth_pass.BadLogins
         || _grayed+='W(H(O))'
         |? _auth_pass.LockTimeout>0
         || _unlock_dt:=_sysobj.Lib.getDateTime(_lastbad_dt.Date,_lastbad_dt.Time+_auth_pass.LockTimeout);
            _now_dt:=_sysobj.Lib.getDateTime();
            {? _now_dt.DateTime>=_unlock_dt.DateTime & _auth_pass.AdminUnlock=0
            || _grayed+='W(H(O))'
            ?}
         ?}
      || _grayed+='W(H(O))'
      ?};
::    Wyszarzanie funkcji odblokowania konta (uwierzytelnianie webowe)
      _auth_web:=_user.Auth.Web;
      {? _auth_web.Active & _auth_web.BadLogins>0
      ||
::       wyznaczam liczbe blednych logowan
         _badlogin:=0;
         SYSSUHIS.cntx_psh();
         SYSSUHIS.index('DATA');
         SYSSUHIS.prefix(_user.Guid,_sysobj.CONST.HISTORY.ENTRY.BAD_LOGIN,_sysobj.CONST.HISTORY.AUTH_TYPE.WEB,);
         {? SYSSUHIS.last()
         || _badlogin:=SYSSUHIS.size();
            _lastbad_dt1:=_sysobj.Lib.getDateTime(SYSSUHIS.STAMP)
         ?};
         SYSSUHIS.cntx_pop();

         {? _badlogin<=_auth_web.BadLogins
         || _grayed+='W(W(O))'
         |? _auth_web.LockTimeout>0
         || _unlock_dt:=_sysobj.Lib.getDateTime(_lastbad_dt1.Date,_lastbad_dt1.Time+_auth_web.LockTimeout);
            _now_dt:=_sysobj.Lib.getDateTime();
            {? _now_dt.DateTime>=_unlock_dt.DateTime & _auth_web.AdminUnlock=0
            || _grayed+='W(W(O))'
            ?}
         ?}
      || _grayed+='W(W(O))'
      ?};
      {? USERS.WEBLOGIN=''
      || _grayed+='W(P(I))'
      ?};
      USERS.actions_grayed(_wer,_grayed);
      USERS.actions(_wer, _hid_actions,,1)
   ?}
|| _hid_actions+='W';
   USERS.actions(_wer, _hid_actions,,1);
   _hid_actions+='GF';
   USERS.actions_grayed(_wer,_hid_actions)
?};
~~


\hist_log
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Akcja Historia logowań użytkownika
::  TAG: <UŻYTKOWNIK><LISTA><HISTORIA>
::----------------------------------------------------------------------------------------------------------------------
I_LOG.clear();
I_LOG.for_each("{? I_LOG.TYPE='' || I_LOG.TYPE:='W'; I_LOG.put(1) ?}");
exec('act_i_usr','users',USERS.KOD);

EANX.MIDADD:='U'+USERS.IDADD;
EANX.STATUS:='____';
_ff:="
::   exec('dsk_set_status','magazyn_mob','status@panel');
   exec('load','#desktop','selektor','lmg_log.dsk',,,,,,0);
   exec('set_name','#desktop','','selektor','status@panel','Zakres informacji'@);
   ~~
";

_sel:=I_LOG.grp_make('Historia logowań użytkownika: %1 - %2'@[USERS.KOD,USERS.DANE],_ff,'#log_history');

_form:="
   I_LOG.index('DISP');
   I_LOG.prefix(USERS.ref(),'M')
";
I_LOG.grp_sel(_sel,,'WER','Jterm'@,"",,,,_form,,,,'maximized');

_form:="
   I_LOG.index('DISP');
   I_LOG.prefix(USERS.ref(),'W')
";
I_LOG.grp_sel(_sel,,'WER','Webterm'@,"",,,,_form,,,,'maximized');

_form:="
   I_LOG.index('DISP');
   I_LOG.prefix(USERS.ref(),'P')
";
I_LOG.grp_sel(_sel,,'WER','Portal HR'@,"",,,,_form,,,,'maximized');

_form:="
   I_LOG.index('DISP');
   I_LOG.prefix(USERS.ref(),'E')
";
I_LOG.grp_sel(_sel,,'WER','E-kioski'@,"",,,,_form,,,,'maximized');

_form:="
   EANLOG.use('elog'+EANX.STATUS);
   EANLOG.index('IDUSR');
   EANLOG.prefix(USERS.IDADD,);

   _data_id:=$SYSLOG.tm_stamp();
   _tab:=exec('dsk_get_status','magazyn_mob');
   exec('fetch_data','#desktop',_data_id,'selektor',_tab,'KOD,NAZWA','');
   exec('grab_data','#desktop','','selektor','status@panel',_data_id,0,EANX.STATUS);
   ~~
";
I_LOG.grp_sel(_sel,EANLOG,'WER','Urządzenia mobilne'@,"",,,20,_form,,,,'maximized','WER');
I_LOG.tab_splt(_sel,'tab0','horizontal','zakres',',90%');
exec('create','#desktop',I_LOG,'selektor',_sel,1,1,1);

I_LOG.win_sel(_sel);
I_LOG.select()


\manage_auth
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Uruchamia MacroPASSową konfigurację dostępu odpowiedniego typu z odpowiednią akcją
::   WE: _a - STRING - akcja
::       _b - STRING - rodzaj dostępu
::   WY: 0/1/-1
::----------------------------------------------------------------------------------------------------------------------
_mode:=_a;
_action:=_b;

_result:=0;
_grp:={? USERS.sel_size()>0 || 1 || 0 ?};

:: Pobieram obiekt systemowy do obsługi SYSSUSER
_sysobj:=exec(,'__sysusr',1);
{? _grp>0
||
:: Dla akcji grupowej przygotowanie tabeli z refami SYSUSER
   USERS.cntx_psh();
   USERS.prefix();
   _tabsel:=USERS.sel_aget();
   _systab:=tab_tmp(,'REF','INTEGER','#SYSUSER.ref()');
   {? _tabsel.first()
   || {!
      |?
         _next:=0;
         _ref_nxt:=null();
         _added:=0;
         _tabsel.cntx_psh();
         {? _tabsel.next()
         || _ref_nxt:=_tabsel.ref()
         ?};
         _tabsel.cntx_pop();
         {? USERS.seek(_tabsel.REF) & exec('can_config_login','users',0)>0
         || _sysusr:=_sysobj.getUser(USERS.GUID);
            {? type_of(_sysusr)>100
            || _systab.REF:=#_sysusr.Ref;
               _added:=_systab.add()
            ?};
            {? var_pres('_sysusr')>100 || obj_del(_sysusr) ?}
         ?};
         {? _added=0
         || _tabsel.del()
         ?};
         {? _ref_nxt<>null()
         || _next:=_tabsel.seek(_ref_nxt)
         ?};
         _next>0
      !}
   ?};
   USERS.cntx_pop()
|| _sysusr:=_sysobj.getUser(USERS.GUID)
?};
{? var_pres('_sysusr')>100 | var_pres('_systab')>100
|| {? _mode='pass'
   || _result:=_sysobj.XPass.manageAuthPass(_sysusr,_action)
   |? _mode='ldap'
   || _result:=_sysobj.XPass.manageAuthLdap(_sysusr,_action)
   |? _mode='cert'
   || _result:=_sysobj.XPass.manageAuthCert(_sysusr,_action)
   |? _mode='web'
   || exec('message','portal_engine');
      _result:=_sysobj.XPass.manageAuthWeb(_sysusr,_action)
   |? _mode='cas'
   || _result:=_sysobj.XPass.manageAuthCas(_sysusr,_action)
   |? _mode='mfa'
   || _result:=_sysobj.XPass.manageAuthMfa({? _grp>0 || _systab || _sysusr ?},_action)
   ?}
?};
{? _result>0
|| {? _grp>0
   ||
::    Synchronizacja wszystkich zaznaczonych użytkowników
      USERS.cntx_psh();
      USERS.prefix();
      {? _tabsel.first()
      || {!
         |?
            {? USERS.seek(_tabsel.REF)
            || exec('synchronize_one','users',,_sysobj)
            ?};
            _tabsel.next()
         !}
      ?};
      USERS.cntx_pop()
   || exec('synchronize_one','users',,_sysobj)
   ?}
?};
{? _grp>0
|| USERS.sel_adel();
   _result:=0
?};
_result


\act_i_usr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Aktualizuje I_LOG-a
::   WE: _a - kod użytkownika
::----------------------------------------------------------------------------------------------------------------------
_ch:=%255;
_tab:=obj_new('TYP','DAT','TIM');
_tab.TYP:=obj_new(8);
_tab.DAT:=obj_new(8);
_tab.TIM:=obj_new(8);

_tab.TYP[1]:='inlog';
_tab.TYP[2]:='outlog';
_tab.TYP[3]:='inlogw';
_tab.TYP[4]:='outlogw';
_tab.TYP[5]:='I';
_tab.TYP[6]:='O';
_tab.TYP[7]:='i';
_tab.TYP[8]:='o';

_msk:=SYSLOG.names();
_msl:=SYSSLG.names();

SYSLOG.cntx_psh();
SYSSLG.cntx_psh();
USERS.cntx_psh();
I_LOG.cntx_psh();
_usr:=exec('users','#users',_a);

_tab.DAT[1]:=_tab.DAT[2]:=_tab.DAT[3]:=_tab.DAT[4]:=_tab.DAT[5]:=_tab.DAT[6]:=_tab.DAT[7]:=_tab.DAT[8]:=date(0,0,0);
_tab.TIM[1]:=_tab.TIM[2]:=_tab.TIM[3]:=_tab.TIM[4]:=_tab.TIM[5]:=_tab.TIM[6]:=_tab.TIM[7]:=_tab.TIM[8]:=time(0,0,0);

I_LOG.index('OPIS');
I_LOG.prefix(_usr,'M','Zarejestrowanie');
{? I_LOG.last()
|| _tab.DAT[1]:=_tab.DAT[5]:=I_LOG.DATA_LOG;
   _tab.TIM[1]:=_tab.TIM[5]:=I_LOG.CZAS_LOG
?};
I_LOG.prefix(_usr,'M','Wyrejestrowanie');
{? I_LOG.last()
|| _tab.DAT[2]:=_tab.DAT[6]:=I_LOG.DATA_LOG;
   _tab.TIM[2]:=_tab.TIM[6]:=I_LOG.CZAS_LOG
?};
I_LOG.prefix(_usr,'W','Zarejestrowanie');
{? I_LOG.last()
|| _tab.DAT[3]:=_tab.DAT[7]:=I_LOG.DATA_LOG;
   _tab.TIM[3]:=_tab.TIM[7]:=I_LOG.CZAS_LOG
?};
I_LOG.prefix(_usr,'W','Wyrejestrowanie');
{? I_LOG.last()
|| _tab.DAT[4]:=_tab.DAT[8]:=I_LOG.DATA_LOG;
   _tab.TIM[4]:=_tab.TIM[8]:=I_LOG.CZAS_LOG
?};

:: tabela SYSLOG
_msk.clear();
{? _msk.first()
|| {!
   |? SYSLOG.use(_msk.NAME);
      _ndx:=SYSLOG.ndx_tmp('',0,'MUTATCOD',,0,'MUTATCOD',,0,'COMMAND',,0,'MUTATDAT',,1,'MUTATTIM',,1);
      {! _i:=1..4
      |! SYSLOG.index(_ndx);
         SYSLOG.prefix(_a,_a,_tab.TYP[_i],);
         {? SYSLOG.first()
         || {!
            |? {? (SYSLOG.MUTATDAT>_tab.DAT[_i]) | (SYSLOG.MUTATDAT>=_tab.DAT[_i] & SYSLOG.MUTATTIM>=_tab.TIM[_i])
               ||
                  _typ_logowania:='';
                  {? SYSLOG.COMMAND+1='w'
                  || _typ_logowania:='W'
                  || _typ_logowania:='M'
                  ?};
                  I_LOG.index('USERS');
                  I_LOG.prefix(_usr,_typ_logowania,SYSLOG.MUTATDAT,SYSLOG.MUTATTIM);
                  {? ~I_LOG.first()
                  || I_LOG.prefix();
                     I_LOG.blank();
                     I_LOG.USERS:=_usr;
                     I_LOG.DATA_LOG:=SYSLOG.MUTATDAT;
                     I_LOG.CZAS_LOG:=SYSLOG.MUTATTIM;
                     I_LOG.TYPE:=_typ_logowania;
                     _dane:=exec('descr2dane','users',SYSLOG.DESCR);
                     I_LOG.ID_LOG:=form(_dane[1],,,'99');
                     I_LOG.IP_LOG:=form(_dane[2],,,'99');
                     I_LOG.OK_LOG:='T';
                     I_LOG.OPIS:={? _i=1 | _i=3
                                 || 'Zarejestrowanie użytkownika. '+_dane[3]+_dane[4]
                                 || 'Wyrejestrowanie użytkownika. '+_dane[3]+_dane[4]
                                 ?};
                     I_LOG.add(1);
                     obj_del(_dane)
                  ?};
                  SYSLOG.next()
               || 0
               ?}
            !}
         ?}
      !};
      SYSLOG.ndx_drop(_ndx);
      _msk.next()
   !}
?};
:: tabela SYSSLG
_msl.clear();
{? _msl.first()
|| {!
   |? SYSSLG.use(_msl.NAME);
      _ndx:=SYSSLG.ndx_tmp('',0,'MUTATCOD',,0,'MUTATCOD',,0,'COMMAND',,0,'IDADD',,1);
      {! _i:=5..8
      |! SYSSLG.index(_ndx);
         SYSSLG.prefix(_a,_a,_tab.TYP[_i],);
         {? SYSSLG.first()
         || {!
            |? _mutatdat:=exec('str2date','#convert',10+SYSSLG.IDADD);
               _mutattim:=exec('str2time','#convert',8+(11-SYSSLG.IDADD));
               {? (_mutatdat>_tab.DAT[_i]) | (_mutatdat>=_tab.DAT[_i] & _mutattim>=_tab.TIM[_i])
               || _LOG:=sysslg_pos(SYSSLG.ref());
                  _descr:={? _LOG.first() || _LOG.ASTRING || '' ?};
                  _typ_logowania:='';
                  {? _i>6
                  || _typ_logowania:='W'
                  || _typ_logowania:='M'
                  ?};
                  I_LOG.index('USERS');
                  I_LOG.prefix(_usr,_typ_logowania,_mutatdat,_mutattim);
                  {? ~I_LOG.first()
                  || I_LOG.prefix();
                     I_LOG.blank();
                     I_LOG.USERS:=_usr;
                     I_LOG.DATA_LOG:=_mutatdat;
                     I_LOG.CZAS_LOG:=_mutattim;
                     I_LOG.TYPE:=_typ_logowania;
                     I_LOG.OK_LOG:='T';
                     _dane:=exec('descr2dane','users',_descr,1);
                     I_LOG.ID_LOG:=form(_dane[1],,,'99');
                     I_LOG.IP_LOG:=form(_dane[2],,,'99');
                     I_LOG.OK_LOG:='T';
                     I_LOG.OPIS:={? _i=5 | _i=7
                                 || 'Zarejestrowanie użytkownika. '+_dane[3]+_dane[4]
                                 || 'Wyrejestrowanie użytkownika. '+_dane[3]+_dane[4]
                                 ?};
                     I_LOG.add(1);
                     obj_del(_dane)
                  ?};
                  obj_del(_LOG);
                  SYSSLG.next()
               || 0
               ?}
            !}
         ?}
      !};
      SYSSLG.ndx_drop(_ndx);
      _msl.next()
   !}
?};

SYSLOG.cntx_pop();
SYSSLG.cntx_pop();
USERS.cntx_pop();
I_LOG.cntx_pop();
obj_del(_msk);
obj_del(_msl);
obj_del(_tab.TYP);
obj_del(_tab.DAT);
obj_del(_tab.TIM);
obj_del(_tab);
~~


\ldap_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Parametry połączenia dla Active Directory
::----------------------------------------------------------------------------------------------------------------------
_sysobj:=exec(,'__sysusr',1);

{? _sysobj.LdapMgmt.adSetupDialog()
|| _sysobj.setLdapUri(_sysobj.LdapMgmt.AdUri)
?};
~~


\descr2dane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Konwertuje dane podane w polu SYSLOG.DESCR
::   WE: _a - wartość pola SYSLOG.DESCR
::       [_b] - 1-wg SYSSLG, 0(domyślny) wg SYSLOG-a
::   WY: tablica danych
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a;
_tryb:={? var_pres('_b')=type_of(0) || _b || 0 ?};

_ch:=%255;
_wyn:=obj_new(4);
{! _i..4 |! _wyn[_i]:='' !};

{? _tryb
|| _wsk:=_buf*'ip=';
   {? _wsk
   || _wyn[1]:=(_wsk-1)+_buf;
      _buf:=(_wsk+2)-_buf;
      _wsk:=_buf*'tty=';
      {? _wsk
      || _wyn[2]:=(_wsk-1)+_buf;
         _wyn[3]:=(_wsk-1)-_buf;
         _buf:=_wyn[3];
         _wsk:=_buf*'client=';
         {? _wsk
         || _wyn[3]:=(_wsk-1)+_buf;
            _buf:=(_wsk-1)-_buf;
            _wyn[4]:=' '+_buf
         ?}
      ?}
   ?}
|| {!
   |? _wsk:=_buf*_ch;
      {? _wsk>0
      || _war:=(_wsk-1)+_buf;
         _buf:=_wsk-_buf
      || _war:=_buf
      ?};
      {? (3+_war)='ip='     || _wyn[2]:=3-_war
      |? (4+_war)='tty='    || _wyn[3]:=_war
      |? (7+_war)='client=' || _wyn[4]:=' '+_war
      || _wyn[1]:=_war
      ?};
      _wsk>0
   !}
?};
_wyn


\name
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: zwraca kod użytkownika
::   WY: kod użytkownika
::  OLD: \name/skid_usr.fml
::----------------------------------------------------------------------------------------------------------------------
app_info('app_user')


\get_usersf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2011]
:: OPIS: Szuka i podczytuje rekord USERSF
::  OLD: \get_usersf/skid_usr.fml
::----------------------------------------------------------------------------------------------------------------------
USERSF.index('UNIK');
USERSF.prefix(REF.S_FIRMA);
{? ~USERSF.find_key(USERS.ref())
|| USERSF.blank(1);
   USERSF.USERS:=USERS.ref();
   USERSF.DEPT:=exec('ud_skl_firma','schemat','PODZORG');
   USERSF.VIEW:='W';
   USERSF.FIRMA:=REF.S_FIRMA;
   USERSF.TOP:='T';
   USERSF.ALL_RB:=USERSF.LOCK:=exec('bl_lock','users');
   USERSF.ALL_PROJ:='N';
   USERSF.F_ZATR:='P';
   USERSF.PORTAL2:='N';
   USERSF.KSEF_DL:='N';
   USERSF.KSEF_UL:='N';
   USERSF.PORTAL2E:='N';
   USERSF.UPR_SYNC:='';
   USERSF.BLK_SYNC:='N';
   {? ~USERSF.add()
   || return(null)
   ?}
?};

: sprawdź, czy na pewno ustawiona domyślna jednostka
: (powinna być zawsze ze względu na uprawnienia)
{? ~USERSF.DEPT
|| USERSF.DEPT:=exec('ud_skl_firma','schemat','PODZORG');
   USERSF.put()
?};

USERSF.ref()


\put_usersf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2011]
:: OPIS: Ustawia rekord w USERSF
::   WE: [_a] - wartość pola PERM
::       [_b] - wartość pola DEPT
::       [_c] - wartość pola VIEW
::       [_d] - wartość pola TOP
::       [_e] - wartość pola LOCK
::       [_f] - wartość pola ALL_RB
::       [_g] - wartość pola ALL_PROJ
::       [_h] - wartość pola F_ZATR
::       [_i] - wartość pola EODD
::       [_j] - wartość pola LANGUAGE
::       [_k] - wartość pola PORTAL2
::       [_l] - wartość pola KSEF_DL
::       [_m] - wartość pola KSEF_UL
::       [_n] - wartość pola PORTAL2E
::       [_o] - wartość pola UPR_SYNC
::       [_p] - wartość pola BLK_SYNC
::  OLD: \put_usersf/skid_usr
::----------------------------------------------------------------------------------------------------------------------
{? exec('get_usersf','users')
|| {? var_pres('_a')=type_of(null) || USERSF.PERM:=_a ?};
   {? var_pres('_b')=type_of(null) || USERSF.DEPT:=_b ?};
   {? var_pres('_c')=type_of('') || USERSF.VIEW:=_c ?};
   {? var_pres('_d')=type_of('') || USERSF.TOP:=_d ?};
   {? var_pres('_e')=type_of('') || USERSF.LOCK:=_e ?};
   {? var_pres('_f')=type_of('') || USERSF.ALL_RB:=_f ?};
   {? var_pres('_g')=type_of('') || USERSF.ALL_PROJ:=_g ?};
   {? var_pres('_h')=type_of('') || USERSF.F_ZATR:=_h ?};
   {? var_pres('_i')=type_of(null) || USERSF.EODD:=_i ?};
   {? var_pres('_j')=type_of(null) || USERSF.LANGUAGE:=_j ?};
   {? var_pres('_k')=type_of('') || USERSF.PORTAL2:=_k ?};
   {? var_pres('_l')=type_of('') || USERSF.KSEF_DL:=_l ?};
   {? var_pres('_m')=type_of('') || USERSF.KSEF_UL:=_m ?};
   {? var_pres('_n')=type_of('') || USERSF.PORTAL2E:=_n ?};
   {? var_pres('_o')=type_of('') || USERSF.UPR_SYNC:=_o ?};
   {? var_pres('_p')=type_of('') || USERSF.BLK_SYNC:=_p ?};
   USERSF.put()
?}


\bl_lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wartość początkowa pola LOCK w profilu użytkownika. W zależności od aplikacji i nazwy
::       uprzywilejowanej grupy uzytkownikow.
::----------------------------------------------------------------------------------------------------------------------
{? exec('protkey','users',prot_key())
|| 'N'
|| 'T'
?}


\protkey
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [8.10]
:: OPIS: Formuła sprawdza, czy w parametrze _a jest nazwa grupy uprzywilejowanej
::       np. możliwe uruchomienie debuggera, nazw grup może być więcej
::  OLD: \protkey/skid_usr.fml
::----------------------------------------------------------------------------------------------------------------------
_a='wdrożenia'


\sel_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: wyświetlenie i redakcja uprawnien użytkowników
::   WE: _a - akronim bazy
::       _b - akronim pola
::   WY: 0/1 wynik funkcji select()
::  OLD: \sel_upr/defin.fml
::----------------------------------------------------------------------------------------------------------------------
_uu_ref:=null;
_fndx:='USERS_UP.ndx_tmp(,,\'USERS\',,,\'AKR\',,';
{? _a<>'ODDZ'
|| _fndx+=',\''+_a+'\',\'ODDZ\','
?};
_fndx+=',\''+_a+'\',\''+_b+'\',';
_fndx+=')';
_ndx:=($_fndx)();

{? _a='ODDZ' || _fld_val:=ST.ODDZ_KOD
|? _a='STS'  || _fld_val:=ST.STS_KOD
|? _a='STZ'  || _fld_val:=ST.STZ_KOD
|? _a='MG'   || _fld_val:=ST.MAG_SYM
?};

USERS_UP.index(_ndx);
{? _a<>'ODDZ'
|| USERS_UP.prefix(OPERATOR.USER,_a,ST.ODDZ_KOD,_fld_val);
   {? USERS_UP.first() || _uu_ref:=USERS_UP.ref() ?};
   USERS_UP.prefix(OPERATOR.USER,_a,ST.ODDZ_KOD);
   USERS_UP.win_sel(_a);
   _wyn:=USERS_UP.select(,USERS_UP.seek(_uu_ref),10,'DUPdup:Dd');
   USERS_UP.ndx_drop(_ndx)
|| ODDZ.win_sel('SEL');
   ODDZ.index('KOD');
   ODDZ.prefix();
   _wyn:=ODDZ.select()
?};
_wyn


\spr_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: sprawdza zgodność z uprawnieniami
::   WE: _a - akronim tabeli dla której sprawdzamy uprawnienia
::       _b - [REFERNCE] wartość pola do sprawdzania (ref)
::       _b - [STRING] - dostępne tylko dla _a='ODDZ' wartość pola do sprawdzenia
::       [_c] - komunikat(domyślnie)-1 brak komunikatu-0
::   WY: 0/1 czy uprawnione w przypadku _b typu [STRING] sprawdza czy dany oddział istnieje
::  OLD: \spr_upr/defin.fml
::----------------------------------------------------------------------------------------------------------------------
_typ:=var_pres('_b')=type_of(SYSLOG.ref());
_ref:={? _typ || _b || null() ?};
{? _>=3 || {? type_of(_c)<>1 || _c:=1 ?} || _c:=1 ?};
_wyn:=0;
{? _a='ODDZ' & _ref=null() & ~_typ
|| ODDZ.index('KOD');
   ODDZ.prefix(_b,);
   {? ODDZ.first()
   || _wyn:=1
   || {? _c || FUN.info('Brak oddziału o podanym kodzie.'@) ?}
   ?}
|| USERS_UP.index(_a);
   {? _a='MG'
   || USERS_UP.prefix(OPERATOR.USER,_a,ST.ODDZ_KOD,_ref)
   || USERS_UP.prefix(OPERATOR.USER,{? _a='MAG' || 'MG' || _a ?},_ref)
   ?};
   {? USERS_UP.first()
   || _wyn:=1
   || {? _c
      || {? _a='ODDZ'
         || FUN.info('Brak uprawnień do oddziału %1.'@[exec('record','#to_string',_b)])
         |? _a='MAG' | _a='MG'
         || FUN.info('Brak uprawnień do magazynu %1.'@[exec('record','#to_string',_b)])
         || FUN.info('Brak uprawnień do %1.'@[exec('record','#to_string',_b)])
         ?}
      ?}
   ?}
?};
_wyn


\bl_akr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: wartość pola USER.AKR
::  OLD: \bl_akr/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
USER.AKR


\nodouble
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: sprawdza czy wartość pola nie jest zdublowana w bieżącej dziedzinie tabeli USERS_UP
::   WY: 1/0
::  OLD: \nodouble/defin.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;

:: czy sprawdzac
_chk:=1;

_user:=OPERATOR.USER;
_value:=($('USERS_UP.'+cur_afld))();
_ind:=USERS_UP.index('?');

{? POM.TYPDOK=''
|| _prf:=cur_afld()
|| _prf:=POM.TYPDOK
?};

:: dla Popraw jesli przed i po redakcji ta sama wartosc _chk:=0 <- nie sprawdzac
{? -(1+menu_txt())='p'
||
   {? var_pres(cur_afld,@.POMOC)>0
   || _chk:=( ($('POMOC.'+cur_afld()))()<>_value )
   ?}
?};

{? _chk=1
||
   {? _value<>null
   ||
      USERS_UP.cntx_psh();
      _ndx:=USERS_UP.ndx_tmp(,,'USERS',,,'AKR',,,cur_afld,,);
      USERS_UP.index(_ndx);
      USERS_UP.prefix(_user,_prf,_value);
      {? USERS_UP.first()
      ||
         _txt:={? _ind='STZ' || ' stanowiska zakupów'@
               |? _ind='STS' || ' stanowiska sprzedaży'@
               |? (3+_ind)='MAG' || ' magazynu'@
               |? (3+_ind)='ODD' || ' oddziału'@
               |? _ind='TR_RODZ' || ' kategori transportu'@
               || ''
               ?};
         FUN.info('Podany %1 już dodano do uprawnień.'@[cur_nfld()+_txt]);
         _wyn:=0
     ?};
      USERS_UP.ndx_drop(_ndx);
      USERS_UP.cntx_pop()
   ||
      FUN.info('Niewypełnione pole.'@);
      _wyn:=0
   ?}
?};
_wyn


\blnrusmg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [12.30]
:: OPIS: wartość początkowa pola USERS_UP.NR
::  OLD: \blnrusmg/zk.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? POM.TYPDOK='ZAM' | POM.TYPDOK='ZAW'
|| USERS_UP.cntx_psh();
   USERS_UP.index('MGNR');
   USERS_UP.prefix(OPERATOR.USER,POM.TYPDOK);
   _wyn:={? USERS_UP.last() || USERS_UP.NR || 0 ?}+1;
   USERS_UP.cntx_pop()
?};
_wyn


\dispusmg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: podgląd na parametry magazynu
::  OLD: \dispusmg/defin.fml
::----------------------------------------------------------------------------------------------------------------------
USERS_UP.cntx_psh();
MG.cntx_psh();
MG.clear();
{? MG.seek(USERS_UP.MG) || MG.display() ?};
MG.cntx_pop();
USERS_UP.cntx_pop();
~~


\llog_pocz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: dodaje zapis do tabeli L_LOG
::   WE: _a - ref (w postaci SQL)
::       _b - opis
::   WY: ref rekordu
::  OLD: \llog_pocz/user.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
L_LOG.prefix();
L_LOG.blank();
L_LOG.USER:=app_info('app_user');
L_LOG.DAT_OD:=date();
L_LOG.TIM_OD:=time();
L_LOG.REF:=_a;
L_LOG.OPIS:=_b;
{? L_LOG.add() || _wyn:=L_LOG.ref ?};
_wyn


\llog_kon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: konczy zapis do tabeli L_LOG
::   WE: _a - ref rekordu
::  OLD: \llog_kon/user.fml
::----------------------------------------------------------------------------------------------------------------------
L_LOG.prefix();
{? L_LOG.seek(_a)
||
   L_LOG.DAT_DO:=date();
   L_LOG.TIM_DO:=time();
   L_LOG.TIME:=time(0,0,0);
   _il:=L_LOG.DAT_OD-L_LOG.DAT_DO;
   {? _il>1
   || {! _i:=2.._il |! L_LOG.TIME+=time(24,0,0) !};
      L_LOG.TIME+=L_LOG.TIM_DO;
      L_LOG.TIME+=time(24,0,0)-L_LOG.TIM_OD

   || L_LOG.TIME:=L_LOG.TIM_DO-L_LOG.TIM_OD
   ?};
   L_LOG.put()
?};
''


\get_domains
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca listę obszarów w których użytkownik może coś robić, czyli ma uprawnienia do chociaż jednej czynności
::       danego obszaru
::   WE: [_a] - USERS.ref lub aktualny rekord
::       [_b] - FIRMA.ref lub aktualna firma
::   WY: tab_tmp - tabela zawierająca listę dziedzin produktowych
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};
_firma:=REF.FIRMA;
{? var_pres('_b')=type_of(FIRMA.ref())
|| _firma:=_b
?};

_result:=tab_tmp(1,
:: 'POLE','TYP','Nazwa w oknie',
   'REF','STRING[16]','Ref obszaru',
   'SYMBOL','STRING[3]','Symbol obszaru'
);
_can_continue:=1;

USERS.cntx_psh();
{? _ref<>null()
|| USERS.clear();
   {? USERS.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   B_DOMAIN.cntx_psh();
   B_ACTION.cntx_psh();
   B_USRROL.cntx_psh();
   B_USRROL.index('USER');
   B_ACTROL.cntx_psh();
   B_ACTROL.index('UNIK');
   B_USRROL.prefix(_firma,USERS.ref());
   {? B_USRROL.first()
   ||
::    Iterujemy po rolach użytkownika
      {!
      |?
         B_ACTROL.prefix(_firma,B_USRROL.B_ROLE);
         {? B_ACTROL.first()
         ||
::          Iterujemy po czynnościach roli
            {!
            |?
               B_ACTROL.B_ACTION();
               {? B_ACTION.B_DOMAIN<>null()
               || _result.prefix($B_ACTION.B_DOMAIN);
                  {? _result.size()=0
                  || _result.blank();
                     _result.REF:=$B_ACTION.B_DOMAIN;
                     _result.SYMBOL:=B_ACTION.B_DOMAIN().SYMBOL;
                     _result.add()
                  ?}
               ?};
               B_ACTROL.next()
            !}
         ?};
         B_USRROL.next()
      !}
   ?};
   B_ACTROL.cntx_pop();
   B_USRROL.cntx_pop();
   B_ACTION.cntx_pop();
   B_DOMAIN.cntx_pop();
   ~~
?};
_result.clear();
USERS.cntx_pop();
_result


\spr_upr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2006]
:: OPIS: sprawdzanie uprawnien dla refa tabeli podanej w parametrze
::   WE: _a  - akronim tabeli dla ktorej sprawdzamy uprawnienia
::       _b  - ref danej tabeli
::       [_c] - komunikat jaki ma sie pokazac '-'-powoduje nie wyswietlenie komunikatu
::       [_d] - ewentualnie akronim bazy
::   WY: 1/0
::  OLD: \spr_upr2/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=3  || {? type_of(_c)<>2 || _c:='' ?} || _c:='' ?};
{? _>=4  || {? type_of(_d)<>2 || _d:=_a ?} || _d:=_a ?};

_wyn:=0;

{? _b<>null
||
   USERS_UP.cntx_psh();
   USERS.cntx_psh();
   USERS.index('USR_KKOD');
   USERS.prefix(10+OPERATOR.USER().KOD,10+OPERATOR.USER().KOD);
   USERS.first();
   USERS_UP.index(_a);
   {? _a='MG'
   || {? _d='ZAM' | _d='ZAW'
      || USERS_UP.index('MG');
         USERS_UP.prefix(USERS.ref,_d,ST.ODDZ_KOD,_b);
         {? ~USERS_UP.first()
         || USERS_UP.index('MG');
            USERS_UP.prefix(USERS.ref,_d,ST.ODDZ_KOD);
            {? ~USERS_UP.first()
            || USERS_UP.index('MG');
               USERS_UP.prefix(null,_d,ST.ODDZ_KOD,_b)
            || USERS_UP.prefix(USERS.ref,_d,ST.ODDZ_KOD,_b)
            ?}
         ?}
      || USERS_UP.prefix(USERS.ref,_d,ST.ODDZ_KOD,_b)
      ?}
   || USERS_UP.prefix(USERS.ref,_d,_b)
   ?};
   {? USERS_UP.first()
   || _wyn:=1
   || {? _c='-'
      || ''
      |? _c=''
      ||
         {? var_pres('__kom')>100
         || exec('add_kom','#message','Brak uprawnień dla wybranej pozycji.'@,7)
         || FUN.info('Brak uprawnień dla wybranej pozycji.'@)
         ?}
      ||
         {? var_pres('__kom')>100
         || exec('add_kom','#message',_c,7)
         || FUN.info(_c)
         ?}
      ?}
   ?};
   USERS.cntx_pop();
   USERS_UP.cntx_pop()
?};
_wyn


\stss
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2009+]
:: OPIS: zwraca refy stanowisk do których ma uprawnienia uzytkownik _[1]
::   WE: _[1]-USERS.ref
::       _[2]-'STS' lub 'STZ'
::       [_[3]]-0-KOD, 1-REFERENCE
::       [_[4]]-0-ograniczona długość wyniku, 1-nieograniczona długość wyniku
::   WY: patrz opis
::  OLD: \stss/wydruki.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_[3]')<>type_of(1) || _[3]:=1 ?};
{? var_pres('_[4]')<>type_of(1) || _[4]:=0 ?};

_wyn:='1=1';
{? {? _[2]='STS' || exec('get','#params',2102,2,OPERATOR.USER)='T' || exec('get','#params',6102,2,OPERATOR.USER)='T' ?}
|| USERS_UP.cntx_psh();
   USERS_UP.index(3+_[2]); USERS_UP.prefix(_[1],3+_[2]); _comma:='';
   {? USERS_UP.first()
   || _wyn:={? _[3] || 'FAKS.STS' || 'STS.KOD'?}+' in (';
      {!
      |? _txt:=_comma+'\''+$($('USERS_UP.'+_[2]+{? _[3] || '' || '().KOD' ?}))()+'\'';
         {? _[4] | +(_wyn+_txt)<150 || _wyn+=_txt ?};
         _comma:=',';
         USERS_UP.next()
      !};
      _wyn+=')'
   || _wyn:='1=0'
   ?};
   USERS_UP.cntx_pop()
?};
_wyn


\spr_uprr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy dany uzytkownki ma prawo do skladania rezerwacji tymczasowych
::   WE: [_a] - gdzie sprawdzane 0-(domyslnie) zamowienia 1-tabela SM stan danego magazynu
::   WY: ma lub nie ma praw
::  OLD: \spr_uprr/pommag.fml
::----------------------------------------------------------------------------------------------------------------------
{?_>=1 || {? type_of(_a)<>1 || _a:=0 ?} ||_a:=0 ?};
_wyn:=0;
{? ST.MAG().PAL<>'T' & exec('chk_role','#b__box',OPERATOR.USER,'LMG_MAG_DRTY')
|| {? _a
   ||
::    wg uprawinionych magazynow
      USERS_UP.cntx_psh;
      USERS_UP.index('MG');
      USERS_UP.prefix(OPERATOR.USER,'MG',ST.ODDZ_KOD);
      _wyn:=USERS_UP.find_key(ST.MAG);
      USERS_UP.cntx_pop
   ||
::    wg maagzynow dla zamowien
      USERS_UP.cntx_psh;
      USERS_UP.index('MG');
      USERS_UP.prefix(OPERATOR.USER,'ZAM',ST.ODDZ_KOD);
      _wyn:=USERS_UP.find_key(ST.MAG);
      {? ~_wyn
      ||
::       parametry globalne
         USERS_UP.index('MG');
         USERS_UP.prefix(null,'ZAM',ST.ODDZ_KOD);
         _wyn:=USERS_UP.find_key(ST.MAG)
      ?};
      USERS_UP.cntx_pop
   ?}
?};
_wyn


\spr_magu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy uprawnione magazyny sa uslugowe
::   WE: [_a] 0(domyslnie)-zamowienia sprzedazy 1-zamowienia wewnetrzne
::   WY: string z kodami magazynow oddzielany znakiem ^ lub pusty string
::  OLD: \spr_magu/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

_wyn:='';
MG.cntx_psh();
USERS_UP.index('MG');
USERS_UP.prefix(OPERATOR.USER,'ZA'+{? ~_a || 'M' || 'W' ?},ST.ODDZ_KOD);
{? USERS_UP.first()
|| {!
   |?
      {? USERS_UP.MG().U='T'  || _wyn+=USERS_UP.MG().SYM+'^' ?};
      USERS_UP.next()
   !}
||
:: uprawnienia globalne
   USERS_UP.index('MG');
   USERS_UP.prefix(null,'ZA'+{? ~_a || 'M' || 'W' ?},ST.ODDZ_KOD);
   {? USERS_UP.first()
   || {!
      |?
         {? USERS_UP.MG().U='T'  || _wyn+=USERS_UP.MG().SYM+'^' ?};
         USERS_UP.next()
      !}
   ?}
?};
MG.cntx_pop();
_wyn


\dommgzam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: ustawienie magazynu domyslnego
::  OLD: \dommgzam/defin.fml
::----------------------------------------------------------------------------------------------------------------------
_dom:=USERS_UP.DOM;
_oddz:=USERS_UP.MG().ODDZ;
{? USERS_UP.DOM='T' & FUN.ask('Usunąć magazyn domyślny w oddziale %1?'@[USERS_UP.MG().ODDZ])
||
   USERS_UP.DOM:='N'
|? USERS_UP.DOM<>'T' & FUN.ask('Ustawić magazyn jako domyślny w oddziale %1?'@[USERS_UP.MG().ODDZ])
||
   USERS_UP.DOM:='T'
?};
{? _dom<>USERS_UP.DOM
||
   {? USERS_UP.DOM='T'
   ||
      USERS_UP.cntx_psh;
      {? USERS_UP.first
      ||
         {!
         |?
            {? USERS_UP.DOM='T' & USERS_UP.MG().ODDZ=_oddz
            ||
               USERS_UP.DOM:='N';
               USERS_UP.put;
               0
            ||
               USERS_UP.next
            ?}
         !}
      ?};
      USERS_UP.cntx_pop
   ?};
   USERS_UP.put
?}


\deluszam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: usuniecie uprawnien dla uzytkownikow wg magazynu zamowien
::   WE: _a - magazyn
::       [_b] - 0(domyslnie)-zamowienia sprzedazy 1-zamowienia wewnetrzne
::  OLD: \deluszam/defin.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};

USERS_UP.cntx_psh;
USERS_UP.clear;
USERS_UP.index('USM');
USERS_UP.prefix('ZA'+{? ~_b || 'M' || 'W' ?},_a);
{? USERS_UP.first || {! |? {? USERS_UP.USERS=null || USERS_UP.next || USERS_UP.del ?} !} ?};
USERS_UP.cntx_pop;
1


\uszamusr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: uzytkownicy wg magazynu
::  OLD: \uszamusr/defin.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1,'KOD','STRING[10]',''
       ,'DANE','STRING[30]',''
       ,'SQL','STRING[16]','');
_sel_tab:=_tab.mk_sel('Wg uprawnień użytkowników.'@,'P',,'tab_tmp_uszam');

_tab.win_fld(_sel_tab,,'KOD',,,10,,1,'Kod'@);
_tab.win_fld(_sel_tab,,'DANE',,,30,,1,'Dane'@);
_tab.win_sel(_sel_tab);

_mg:=USERS_UP.MG;
_akr:=USERS_UP.AKR;
USERS_UP.cntx_psh;
USERS_UP.index('USM');
USERS_UP.prefix(_akr,_mg);
{? USERS_UP.first
|| {!
   |? {? USERS_UP.USERS<>null
      || _tab.clear;
         _tab.blank();
         _tab.KOD:=USERS_UP.USERS().KOD;
         _tab.DANE:=USERS_UP.USERS().DANE;
         _tab.SQL:=$USERS_UP.USERS;
         _tab.add(1)
      ?};
      USERS_UP.next
   !}
?};
USERS_UP.cntx_pop;
_tab.clear;
{? _tab.first
|| _tab.select
|| FUN.info('Brak ograniczeń uprawnień użytkowników dla magazynu: %1.'@[USERS_UP.MG().SYM])
?};
1


\po_domus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: po polu domyslny magazyn
::  OLD: \po_domus/defin.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:={? (1+menu_txt())='D' || null || USERS_UP.ref() ?};
{? USERS_UP.DOM=''
|| FUN.info('Należy określić wartość pola: \"Domyślny dla EDI\"'@); 'DOM'
|? USERS_UP.DOM='T'
|| _oddz:=USERS_UP.MG().ODDZ;
   USERS_UP.cntx_psh();
   {? USERS_UP.first()
   || {!
      |? {? (_ref=null | USERS_UP.ref()<>_ref) & USERS_UP.MG().ODDZ=_oddz
         || USERS_UP.DOM:='N';
            USERS_UP.put(1)
         ?};
         USERS_UP.next()
      !}
   ?};
   USERS_UP.cntx_pop();
   1
|| 1
?}


\usersWithAction
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Zwraca tabele z lista uzytkowników posiadających uprawnienia do czynności
::   WE: _a - Czynność - napis lub tablica napisów
::       _b - firma
::   WY: tabela z $USERS.ref
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)=type_of('')
|| sql(
      'select distinct USERS.REFERENCE as REF '+
      'from USERS join B_USRROL join B_ROLE join B_ACTROL join B_ACTION '+
      'where B_ACTION.UID=\':_a\' and B_ROLE.FIRMA=:_b',_a,_b
   )
|? type_of(_a)>100
|| _str:='';
   {! _i:=1..obj_len(_a)
   |! _str+={? _str<>'' || ',' || '' ?}+'(\''+_a[_i]+'\')'
   !};
   sql(
      'select distinct USERS.REFERENCE as REF '+
      'from USERS join B_USRROL join B_ROLE join B_ACTROL join B_ACTION '+
      'where B_ACTION.UID in VALUES :_a and B_ROLE.FIRMA=:_b',_str,_b
   )
?}


\hasAction
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Czy użytkownik ma dostęp do czynności
::   WE:  _a  - UID czynności lub lista czynności oddzielona przecinkiem
::       [_b] - użytkownik (USERS.ref)
::       [_c] - firma
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<=0 || _b:=OPERATOR.USER ?};
{? var_press('_c')>0
|| _firma:=REF.FIRMA;
   REF.FIRMA:=_c
?};
_ret:=exec('chk_role','#b__box',_b,_a);
{? var_press('_c')>0
|| REF.FIRMA:=_firma
?};
_ret


\hasArea
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [19.22]
:: OPIS: Czy użytkownik ma dostęp do którejkolwiek z aktywnych czynności z obszaru
::   WE:  _a  - symbol obszaru
::       [_b] - użytkownik (USERS.ref) - domyślnie OPERATOR.USER
::       [_c] - firma - domyślnie REF.FIRMA
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
{? var_pres('_b')<=0 || _b:=OPERATOR.USER ?};
{? var_pres('_c')>0
|| _firma:=REF.FIRMA;
   REF.FIRMA:=_c
?};
B_ACTION.cntx_psh();
B_ACTION.index('UNIK'); B_ACTION.prefix(_a);
{? B_ACTION.first()
|| {!
   |? _ret:=exec('chk_role','#b__box',_b,B_ACTION.UID);
      _ret=0 & B_ACTION.next()
   !}
?};
B_ACTION.cntx_pop();
{? var_pres('_c')>0
|| REF.FIRMA:=_firma
?};
_ret


\getWebUser
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Ustawia użytkownika na podstawie loginu internetowego
::   WE: _a - login webowy
::   WY: czy udało się znaleźć użytkownika
::----------------------------------------------------------------------------------------------------------------------
exec('getWebUser','#users',_a)


\getUser
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Ustawia użytkownika na podstawie loginu internetowego
::   WE: _a - login webowy
::   WY: czy udało się znaleźć użytkownika
::----------------------------------------------------------------------------------------------------------------------
USERS.index('USR_AKOD'); USERS.prefix('T',_a,);
USERS.first()


\user_control
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Konfiguracja uwierzytelniania na serwerze kostek OLAP controllingu
::----------------------------------------------------------------------------------------------------------------------
USERS.win_edit('CON_PASS');
exec('ae_con_ad','control');
POMOC.HASLO1:=POMOC.HASLO2:=USERS.WIN_PASS;
{? USERS.edit("
   {? USERS.CON_AD='T'
   || __CHK.record2(USERS,'WINLOGIN','Login')
   || _r:=__CHK.record3(
         USERS,'WINLOGIN','Login',
         POMOC,'HASLO1','Hasło',
         POMOC,'HASLO2','Powtórzone hasło'
      );
      {? _r=''
      || {? POMOC.HASLO1<>POMOC.HASLO2
         || FUN.info('Wprowadzono różne hasła.'@);
            _r:='HASLO2'
         ?}
      ?};
      _r
   ?}
")
|| {? USERS.CON_AD='N' & 1+POMOC.HASLO1<>'α'
   || exec('Crypto','object');
      USERS.WIN_PASS:='α'+Crypto.encAES(POMOC.HASLO1)
   |? USERS.CON_AD='T'
   || USERS.WIN_PASS:=''
   ?};
   exec('users_put','#users')
?}


\tabuprmg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: tabela aktualnych uprawnien do magazynu
::   WE: _a - ref user-a
::       _b - typ zamowienia
::   WY: tabela dostepnych magazynow lub 0 gdy nie magazynow
::  OLD: \tabuprmg/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
:: uprawnienia do magazynow
USERS_UP.prefix();
USERS_UP.index('MG');
USERS_UP.prefix(_a,_b,ST.ODDZ_KOD);
{? USERS_UP.first()
|| _ile:=USERS_UP.size();
   _mag:=obj_new(_ile);
   _i:=0;
   {!
   |? {? ~exec('czyinw_a','magazyn_inw',USERS_UP.MG)
       & {? BEER.ZK_N().MG=null || USERS_UP.MG().PAL<>'T' || 1 ?}
      || _i+=1;
         _mag[_i]:=USERS_UP.MG
      ?};
      USERS_UP.next()
   !};
   _ile:=_i;
   {? _ile>0 & _ile<obj_len(_mag)
   || _buf:=obj_new(_ile); {! _i:=1.._ile |! _buf[_i]:=_mag[_i] !};
      obj_del(_mag); _mag:=_buf; obj_del(_buf)
   ?}
||
:: parametry globalne
   USERS_UP.index('MG');
   USERS_UP.prefix(null,_b,ST.ODDZ_KOD);
   {? USERS_UP.first()
   || _ile:=USERS_UP.size();
      _mag:=obj_new(_ile);
      _i:=0;
      {!
      |? {? ~exec('czyinw_a','magazyn_inw',USERS_UP.MG)
          & {? BEER.ZK_N().MG=null || USERS_UP.MG().PAL<>'T' || 1 ?}
         || _i+=1;
            _mag[_i]:=USERS_UP.MG
         ?};
         USERS_UP.next()
      !};
      _ile:=_i;
      {? _ile>0 & _ile<obj_len(_mag)
      || _buf:=obj_new(_ile); {! _i:=1.._ile |! _buf[_i]:=_mag[_i] !};
         obj_del(_mag); _mag:=_buf; obj_del(_buf)
      ?}
   || _ile:=0
   ?}
?};

{? _ile=0
|| _wyn:=obj_new(1);
   _wyn[1]:=null
|| _wyn:=_mag
?};
_wyn


\zawusupr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: sprawdza czy uprawnienia podanego uzytkownika zawieraja sie w uprawnieniach drugiego
::   WE: _a - ref usera
::       _b - ref drugiego usera
::       _c - typ zamowienia dla first usera Z-sprzedazy W-wewnetrzne
::       _d - typ zamowienia dla two usera Z-sprzedazy W-wewnetrzne
::   WY: 1-tak 0-bardzo nam przykro, ale niestety nie
::  OLD: \zawusupr/rezerw.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_typ1:={? _c='Z' || 2 || 9 ?};
_typ2:={? _d='Z' || 2 || 9 ?};
USERS.cntx_psh();
BUFMG.index('US');
BUFMG.prefix(_a,_typ1);
{? BUFMG.first()
|| {!
   |? {? BUFMG.MG().ODDZ=ST.ODDZ_KOD
      || _mag:=BUFMG.MG;
         BUFMG.cntx_psh();
         BUFMG.index('US');
         BUFMG.prefix(_b,_typ2,_mag);
         _wyn:=BUFMG.first();
         BUFMG.cntx_pop()
      ?};
      ~_wyn & BUFMG.next()
   !}
?};
USERS.cntx_pop();
_wyn


\find_usr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009]
:: OPIS: szuka usera po jego loginie
::   WE: _a - login user-a
::  OLD: \find_usr/ean.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a='' || null || exec('FindInSet','#table','EANU','USER',_a,_a) ?}


\upr_wys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: wyswietlenie i redakcja uprawnien uzytkownikow
::   WE: _a - akronim bazy
::       [_b] - akronim operacji
::       [_c] - okienko selekcji
::       [_d] - czy akcja Ten
::       [_e] - ustaw na magazynie
::       [_f] - tylko z bieżącego oddziału
::   WY: jesli _c<>'' wowczas czy dokonano sel_exit na okienku selekcji
::  OLD: \upr_wys/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>2 || _b:='' ?} || _b:='' ?};
{? _>=3 || {? type_of(_c)<>2 || _c:='' ?} || _c:='' ?};
{? _>=4 || {? type_of(_d)<>1 || _d:=0 ?} || _d:=0 ?};
{? _>=5 || {? type_of(_e)<>7 || _e:=null ?} || _e:=null ?};
_f:={? var_pres('_f')=type_of(0) || _f || 0 ?};

POM.ODDZ:='';
_acr:={? _b<>'' || _b || _a ?};

USER.AKR:=_acr;
($(_a+'.win_sel(''SLO'')'))();

USERS_UP.win_sel({? _c='' || _a || _c ?});
_dod:={? _a='MG' & (_b='ZAM' | _b='ZAW') || 'NR' || '' ?};
USERS_UP.index(_a+_dod);
{? _f
|| USERS_UP.prefix(USERS.ref(),_acr,ST.ODDZ_KOD)
|| USERS_UP.prefix(USERS.ref(),_acr)
?};
USERS_UP.first();
{? _e<>null
|| {? _f
   || USERS_UP.find_key(_e)
   || USERS_UP.find_key(ST.ODDZ_KOD,_e)
   ?}
?};
_default:=USERS_UP.actions({? _c='' || _a || _c ?},{? ~_d || 'T' || '' ?},{? ~_d || 'd:d' || 'T' ?});

{? _b='ZAM' | _b='ZAW'
||
   _win_dict:=USERS_UP.mk_edit('Uprawnienia'@,0);
   USERS_UP.win_efld(_win_dict,,'MG','SYM','*',8,,,'Symbol magazynu'@);
   USERS_UP.win_patt(_win_dict);
   USERS_UP.hdr_sel(' (realizacja zamówień)'@)
?};
USERS_UP.actions(USERS_UP.win_sel('?'),,'W');
_wyn:=USERS_UP.select(,1,);
{? _b='ZAM' | _b='ZAW'
||
   USERS_UP.win_patt();
   USERS_UP.hdr_sel('')
?};
USERS_UP.actions({? _c='' || _a || _c ?},,_default);
USERS_UP.cntx_psh();
exec('usuprmag','parses');
USERS_UP.cntx_pop();
{? _c=''
|| ''
|| _wyn
?}


\osoba2user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła udostępnia wskazanie (aktywnego) użytkownika związanego z osobą.
::   WE:  _a  [REFERENCE] - Wskazanie osoby.
::       [_b] [NUMBER]    - Czy uwzględniać użytkowników nieaktywnych:
::                          0 - Nie, analizowani będą tylko użytkownicy aktywni.
::                          1 - Tak, znaleziony zostanie nawet nieaktywny uzytkownik.
::   WY: null() lub wskazanie użytkownika.
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();

{? var_pres('_a')=type_of(_ret) & _a<>_ret & ref_tab(_a)=OSOBA
|| _osoba:=_a
|| return(_ret)
?};
_all:=var_pres('_b')=type_of(0) & _b;

OSOBA.cntx_psh();
OSOBA.prefix();
{? OSOBA.seek(_a)
|| USERS.cntx_psh();
   USERS.index('OSOBA');
   {? _all
   || USERS.prefix(OSOBA.ref())
   || USERS.prefix(OSOBA.ref(),'T',)
   ?};
   {? USERS.first()
   || _ret:=USERS.ref()
   ?};
   USERS.cntx_pop()
?};
OSOBA.cntx_pop();
_ret


\users_putbefore
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Trigger na USERS - put przed
::----------------------------------------------------------------------------------------------------------------------
exec('users_act','zastepstwa');

::{? USERS.OSOBA<>null() & exec('_osoba_unique','users',USERS.OSOBA,USERS.ref())=0
::|| undo('Wskazana osoba [%1] jest już przypisana do innego użytkownika.'@
::      [exec('record','#to_string',USERS.OSOBA)]
::   );
::   return(0)
::?};

1


\oddz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: zwraca kody oddziałów do których ma uprawnienia uzytkownik _[1]
::   WE: _[1]-USERS.ref
::       [_[2]]-0-ograniczona długość wyniku, 1-nieograniczona długość wyniku
::       [_[3]]- akronim TAB.ODDZ albo inaczej, bo kto wie jak kto sobie pole oddzial ochrzcil
::   WY: patrz opis
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_[2]')<>type_of(1) || _[2]:=0 ?};
{? var_pres('_[3]')<>type_of('') || _[3]:='FAKS.ODDZ' ?};

_wyn:='1=1';
USERS_UP.cntx_psh();
USERS_UP.index('ODDZ'); USERS_UP.prefix(_[1],'ODDZ'); _comma:='';
{? USERS_UP.first()
|| _wyn:=_[3]+' in (';
   {!
   |? _txt:=_comma+'\''+$($('USERS_UP.ODDZ().KOD'))()+'\'';
      {? _[2] | +(_wyn+_txt)<150 || _wyn+=_txt ?};
      _comma:=',';
      USERS_UP.next()
   !};
   _wyn+=')'
|| _wyn:='1=0'
?};
USERS_UP.cntx_pop();
_wyn


\getADUser
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Ustawia użytkownika na podstawie GUID AD
::   WE: _a - GUID uzytkownika
::   WY: czy udało się znaleźć użytkownika
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_sys:=exec(,'__sysusr',1);
{? var_press('_sys')>0
|| _u:=_sys.getLdapUser(_a);
   {? var_press('_u')>0
   || USERS.index('USR_GUID'); USERS.prefix(_u.Guid,);
      _ok:=USERS.first()
   ?}
?};
_ok


\google
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.02]
:: OPIS: Edycja konta Google
::----------------------------------------------------------------------------------------------------------------------
USERS.win_edit('GOOGLE');
{? USERS.edit()
|| USERS.put()
?}


\add_auto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.42]
:: OPIS: Dodawania nowego użytkownika
::   WE: _a - dane użytkownika
::       _b - login użytkownika
::   WY: null - porażka
::       ref USERS - sukces
::----------------------------------------------------------------------------------------------------------------------
_newref:=null();
_descr:='';
_login:='';
{? var_pres('_a')=type_of('') || _descr:=_a ?};
{? var_pres('_b')=type_of('') || _login:=_b ?};

SYSSUSER.cntx_psh();
_oldusr:=SYSSUSER.GUID;

:: Pobieram obiekt systemowy do obsługi SYSSUSER
_sysobj:=exec(,'__sysusr',1);

SYSSUSER.blank(1);

{? +form(_descr+_login)
|| _usr:=_sysobj.blankUser();
   _usr.Login:=_login;
   _usr.Descr:=_descr;
   _usr.Auth.Pass.Active:=0;
   _result:=_sysobj.addUser(_usr)
?};

_newusr:='';
{? _result<>0
|| _newusr:=SYSSUSER.GUID
?};

:: Uruchamiam synchronizacje
exec('synchronize','users');

:: Ustawiam się na rekordzie który dodałem
{? _newusr<>''
|| _newref:=exec('FindInSet','#table','USERS','USR_GUID',_newusr);
   {? _newusr<>_oldusr || USERS.seek(_newref) ?}
?};
SYSSUSER.cntx_pop();
_newref


\users_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Eksport użytkowników, ról do excela
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_funpar:=obj_new(3);
_funpar[1]:='ZWS_USERS';
_funpar[2]:='ZWS_USRUPR';
_funpar[3]:='ZWS_USRAD';

USERS.cntx_psh();
exec('export_init','#excel_imex',_funpar,1);
USERS.cntx_pop();
~~



\users_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS:
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_funpar:=obj_new(3);
_funpar[1]:='ZWS_USERS';
_funpar[2]:='ZWS_USRUPR';
_funpar[3]:='ZWS_USRAD';
USERS.cntx_psh();
exec('import_init','#excel_imex',_funpar);
USERS.cntx_pop();
~~


\filter_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Zakłada filtr na użytkowników sprawdzajacy czy użytkownicy mają uprawnienia
::       do wszystkich przekazanych identyfikatorów czynności
::   WE: _a - STRING - identyfikatory czynności separowane kropką np. 'ZPR_PRO_MODE.ZPR_PRO_MODW'
::       [_b] - STRING - pole z kolejnością, domyślnie: 'DANE'
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_actions:=_a;
_sort:='DANE';
{? var_pres('_b')=type_of('')
|| _sort:=_b
?};
USERS.index('USR_AKOD');
USERS.prefix('T');
_uid:=spli_str(_actions,'.');
_tab_usr:=tab_tmp(1,
   'USERS','STRING[16]','Ref SQL USERS'
);
{! _lp:=1 .. obj_len(_uid)
|!
   {? USERS.first()
   || {!
      |? {? exec('chk_role','#b__box',USERS.ref(),_uid[_lp])>0
         || _tab_usr.prefix($USERS.ref());
            {? _tab_usr.first()=0
            || _tab_usr.blank();
               _tab_usr.USERS:=$USERS.ref();
               _tab_usr.add()
            ?}
         ?};
         USERS.next()
      !}
   ?}
!};
_tab_usr.prefix();
_where:='USERS.REFERENCE in (select :_a.USERS from :_a)';
USERS.prefix();
USERS.f_set(_sort,'',_where,_tab_usr);
~~


\pau__tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Tworzy tablicę z konfiguracją na potrzeby prezentacji propozycji kont internetowych dla współpracowników.
::   WE:
::   WY: tablica zawierająca konfigurację
::----------------------------------------------------------------------------------------------------------------------
:: wartość zwracana
_usr:=obj_new('TABLE','key');
_usr.key:=obj_new('PK','OSOBA','LOGIN');

:: bufor danych
_BUF:=tab_tmp(1,
:: wskazania na zapisy powiązane
   'OSOBA',   'STRING[16]','Wskazanie osoby'@,
   'USERS',   'STRING[16]','Wskazanie użytkownika'@,
:: dane osoby/współpracownika
   'NAZWISKO','STRING[%1]'[$MS.fld_len(OSOBA,'NAZWISKO')],'Nazwisko'@,
   'PIERWSZE','STRING[%1]'[$MS.fld_len(OSOBA,'PIERWSZE')],'Imię'@,
   'UD_SKL',  'STRING[90]','Jednostka organizacyjna'@,
   'EMAIL',   'STRING[%1]'[$MS.fld_len(USERS,'EMAIL')],'Adres poczty elektronicznej'@,
:: zgodnie z informacjami z Działu Technologii
   'WEBLOGIN','STRING[40]','Identyfikator użytkownika'@,
   'WEBNAME', 'STRING[40]','Nazwa użytkownika'@,
   'PASSWORD','STRING[40]','Hasło dostępu'@,
   'LDAPGUID','STRING[64]','Ldap GUID'@,
   'LOGIN'   ,'STRING[10]','Login dla LDAP'@,
:: dodatkowe informacje
   'CREATED', 'STRING[1]', 'Konto utworzone'@,
   'ACTIVE',  'STRING[1]', 'Konto aktywne'@,
   'USED',    'STRING[1]', 'Konto wykorzystywane'@,
:: sposób autentykacji
   'OF365',   'STRING[1]', MS.name(USERS,'OF365'),
   'LOG2',    'STRING[1]', MS.name(USERS,'LOG2'),
:: zmiana danych istniejących użytkowników
   'NEWLOGIN','STRING[40]','Sugerowany identyfikator'@,
   'NEWEMAIL','STRING[40]','Sugerowany adres poczty'@,
   'NEEDUPD', 'STRING[1]', 'Wymaga zmiany'@
);

_BUF.fld_fml('CREATED','BLANK',"'N'");
_BUF.fld_fml('ACTIVE','BLANK',"'N'");
_BUF.fld_fml('USED','BLANK',"'N'");
_BUF.fld_fml('OF365','BLANK',"'N'");
_BUF.fld_fml('LOG2','BLANK',"'N'");
_BUF.fld_fml('NEEDUPD','BLANK',"'N'");

:: ustal wynik
_usr.TABLE:=_BUF;
_usr.key.PK:=_BUF.index('?');
_usr.key.OSOBA:=_BUF.ndx_tmp('Nazwisko, Imię, Jednostka org.'@,0,'NAZWISKO',,,'PIERWSZE',,,'UD_SKL',,);
_usr.key.LOGIN:=_BUF.ndx_tmp('Identyfikator użytkownika'@,0,'WEBLOGIN',,);

_usr


\pau__wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Tworzy okienka pozwalające manipulować danymi potrzebnymi do stworzenia kont współpracowników z dostępem przez
::       przeglądarkę.
::   WE: _a [_TABLE] - alias tabeli tymczasowej
::       _b [OBJECT] - wskazanie obiektu konfiguracji ról
::   WY: tablica nazwana o strukturze:
::          WER - akronim okienka wertowania
::          RED - akronim okienka selekcji
::          WZO - akronim okienka wzorca
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_ctx:=_b;
_por:=_ctx.por;

:: wartość zwracana
_ret:=obj_new('GRP','WER','RED','WZO');
_ret.WER:=exec('pau__wnd_sel','users',_TAB,'#pau_wer',_por);
_ret.RED:=exec('pau__wnd_red','users',_TAB,'redakcja','#pau_red',_por);
_ret.WZO:=exec('pau__wnd_red','users',_TAB,'wzorzec','#pau_wzo',_por);

_mode:='maximized_with_title';
_wnd:=_TAB.grp_make('Konta internetowe'@,
:: przed otwarciem
   "  _ctx:=params_get().context;
      _TAB:=_ctx.cfg.TABLE;
      _wnd:=_ctx.wnd;
      _TAB.actions(_wnd.WER,'D:D',,1);
      _TAB.actions(_wnd.SEL,'D:D',,1);
      ~~
   ",
:: identyfikator
   '#pau_grp'
);
:: lista użytkowników
_TAB.grp_sel(_wnd,,_ret.WER,,
:: po odświeżeniu
   "  _par:=params_get();
      params_set(_par);
      _ctx:=_par.context;
      _cfg:=_ctx.cfg;
      _wnd:=_ctx.wnd;
      _TAB:=_cfg.TABLE;
      _USR:=cur_tab(1,1);
      _cfg.OWNER:=
         {? grp_empty('USERS')=0
         || #_USR.ref()
         ?};
      grp_disp(_TAB,_wnd.SEL,1);
      grp_disp(_TAB,_wnd.WER);
      ~~
   ",,,
:: wysokość
   20,,,,,
:: tryb, identyfikator
   _mode,'USERS'
);
:: lista wybranych ról
_TAB.grp_splt(_wnd,,'horizontal','bottom');
_TAB.grp_sel(_wnd,_ctx.cfg.TABLE,_ctx.wnd.WER,,
:: po odświeżeniu
   "params_exec('pau_role_xxx_ar','users')",,,,
:: przed obsługą
   "params_exec('pau_role_xxx_bs','users',_a,'T')",,,,
:: tryb
   _mode
);
:: lista dostępnych ról
_TAB.grp_splt(_wnd,'bottom','vertical','right');
_TAB.grp_sel(_wnd,_ctx.cfg.TABLE,_ctx.wnd.SEL,,
:: po odświeżeniu
   "params_exec('pau_role_xxx_ar','users')",,,,
:: przed obsługą
   "params_exec('pau_role_xxx_bs','users',_a,'N')",,,,
:: tryb
   _mode
);
_ret.GRP:=_wnd;

_ret


\pau__wnd_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Tworzy okieno wertowania kont współpracowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       _b [STRING] - identyfikator okienka
::       [_c] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: akronim tymczasowego okienka wertowania
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_wid:=_b;
_por:=(var_pres('_c')=type_of(0) & _c<>0);

_utworz:='Utworzenie konta dla współpracownika'@;
_aktywuj:='Włączenie dostępu do witryny pracowniczej'@;
_wylacz:='Wyłączenie dostępu do witryny pracowniczej'@;
_zmien:='Aktualizacja do zalecanych wartości'@;
_popraw:='Poprawienie bieżącego zapisu'@;
_usun:='Usunięcie bieżącego zapisu'@;
_autent:='Ustawienie dodatkowego sposobu uwierzytelniania';
_wyslij:='Wysłanie hasła dostępu na konto poczty elektronicznej'@;

:: utwórz widok umożliwiający zmianę zaproponowanych informacji
_wnd:=_TAB.mk_sel('Konta współpracowników'@,'P',0,_wid,,,,,'U');

:: kolumny widoku
_TAB.win_fld(_wnd,,'CREATED',,,-3,,,'Utworzone [T/N]'@,,exec('fldLabel','#field',_TAB,'CREATED'),2,,"'T'","'N'");
_TAB.win_fld(_wnd,,'ACTIVE',,,-3,,,'Aktywne [T/N]'@,,exec('fldLabel','#field',_TAB,'ACTIVE'),2,,"'T'","'N'");
_TAB.win_fld(_wnd,,'USED',,,-3,,,'Wykorzystywane [T/N]'@,,exec('fldLabel','#field',_TAB,'USED'),2,,"'T'","'N'");
_TAB.win_fld(_wnd,,'NAZWISKO',,,-20,,,,,exec('fldLabel','#field',_TAB,'NAZWISKO'));
_TAB.win_fld(_wnd,,'PIERWSZE',,,{? _por<>0 || -17 || -20 ?},,,,,exec('fldLabel','#field',_TAB,'PIERWSZE'));
_TAB.win_fld(_wnd,,'UD_SKL',,,-16,,,,,exec('fldLabel','#field',_TAB,'UD_SKL'));
_TAB.win_fld(_wnd,,'WEBNAME',,,-30,,,,,exec('fldLabel','#field',_TAB,'WEBNAME'));
_TAB.win_fld(_wnd,,'EMAIL',,,-20,,,,,exec('fldLabel','#field',_TAB,'EMAIL'));
_TAB.win_fld(_wnd,,'WEBLOGIN',,,-20,,,,,exec('fldLabel','#field',_TAB,'WEBLOGIN'));
:: bez portalu identyfikatory są generowane jak dotychczas i "Zmień" jest zędne
:: dla portalu hasło jest zbędna informacją, będzie wygenerowane i wysłane na adres
{? _por
|| _TAB.win_fld(_wnd,,'NEEDUPD',,,-3,,,'Do zmiany [T/N]'@,,exec('fldLabel','#field',_TAB,'NEEDUPD'),2,,"'T'","'N'")
|| _TAB.win_fld(_wnd,,'PASSWORD',,,-20,,,,,exec('fldLabel','#field',_TAB,'PASSWORD'))
?};

:: dodaj funkcjonalność
:: akcja "Utwórz" (domyślna, grupowa)
:: - dostępna tylko wtedy, gdy znacznik "Utworzone" jest wyłączony
:: - tworzy konto użytkownika internetowego zgodnie z danymi w bieżącym wierszu
:: - synchronizuje dane w tabeli USERS
:: - łączy osobę z użytkownikiem
_TAB.win_act(_wnd,,'Formuła','U&twórz'@@,,_utworz,
   $'params_exec(\'pau_utworz_b\',\'users\',cur_tab(1,1),%1)'[$_por],
   $'params_exec(\'pau_utworz_a\',\'users\',cur_tab(1,1),%1)'[$_por],
   1,1,,
   "params_exec('synchronize','users')",'T'
);

:: akcja "Aktywuj" (grupowa)
:: - dostępna tylko wtedy, gdy znacznik "Utworzone" jest włączony i znacznik "Aktywne" wyłączony
:: - ustawia konto użytkownika internetowego jako aktywne
:: - synchronizuje dane w tabeli USERS
_TAB.win_act(_wnd,,'Formuła','Aktywuj'@@,,_aktywuj,
   $'params_exec(\'pau_aktywuj_b\',\'users\',cur_tab(1,1),%1)'[$_por],
   $'params_exec(\'pau_aktywuj_a\',\'users\',cur_tab(1,1),%1)'[$_por],
   ,1,,
   "params_exec('synchronize','users')",'A'
);

:: akcja "Wyłącz" (grupowa)
:: - dostępna tylko wtedy, gdy znacznik "Utworzone" jest włączony i znacznik "Aktywne" włączony
:: - ustawia konto użytkownika internetowego jako nieaktywne
:: - synchronizuje dane w tabeli USERS
_TAB.win_act(_wnd,,'Formuła','Wyłącz'@@,,_wylacz,
   $'params_exec(\'pau_wylacz_b\',\'users\',cur_tab(1,1),%1)'[$_por],
   $'params_exec(\'pau_wylacz_a\',\'users\',cur_tab(1,1),%1)'[$_por],
   ,1,,
   "params_exec('synchronize','users')",'W'
);

{? ~_por
:: akcja "Wyślij" (grupowa)
|| _TAB.win_act(_wnd,,'Formuła','W&yślij'@@,,_wyslij,
      $'params_exec(\'pau_wyslij_b\',\'users\',cur_tab(1,1),%1)'[$_por],
      $'params_exec(\'pau_wyslij_a\',\'users\',cur_tab(1,1),%1)'[$_por],,
      1,,,'Y'
   )
?};

{? _por<>0
:: akcja "Zmień"
:: - dostępna tylko wtedy, gdy znacznik "Do zmiany" jest wyłączony
:: - aktualizuje dane użytkownika nowymi wartościami
:: - synchronizuje dane w tabeli USERS
|| _TAB.win_act(_wnd,,'Formuła','Zmień'@@,,_zmien,
      $'params_exec(\'pau_zmien_b\',\'users\',cur_tab(1,1),%1)'[$_por],
      $'params_exec(\'pau_zmien_a\',\'users\',cur_tab(1,1),%1)'[$_por],
      ,1,,
      "params_exec('synchronize','users')",'Z'
   )
?};

:: akcja "Popraw" (standardowa)
:: - dostępna tylko wtedy, gdy znacznik "Wykorzystane" jest wyłączony
:: - udostępnia dane użytkownika do edycji
:: - synchronizuje dane w tabeli USERS
_TAB.win_act(_wnd,,'Popraw',,,_popraw,
   $'params_exec(\'pau_popraw_b\',\'users\',cur_tab(1,1),%1)'[$_por],
   $'params_exec(\'pau_popraw_a\',\'users\',cur_tab(1,1),%1)'[$_por]
);

:: akcja "Usuń" (dedykowana)
:: - dostępna tylko wtedy, gdy znacznik "Wykorzystane" jest wyłączony
:: - wymaga potwierdzenia usunięcia konta współpracownika
:: - usuwa konto użytkownika internetowego
:: - synchronizuje dane w tabeli USERS
_TAB.win_act(_wnd,,'Formuła','Usuń'@@,,_usun,
   $'params_exec(\'pau_usun_b\',\'users\',cur_tab(1,1),%1)'[$_por],
   $'params_exec(\'pau_usun_a\',\'users\',cur_tab(1,1),%1)'[$_por],,,,,'U'
);

{? _por<>0
:: akcja "Uwierzytelnianie" (grupowa)
:: - ustawia dodatkowy sposób autentykacji
|| _TAB.win_act(_wnd,,'Formuła','Uwie&rzytelnianie'@@,,_autent,
      $'params_exec(\'pau_autent\',\'users\',cur_tab(1,1),%1)'[$_por],,,1,
      $'params_exec(\'pau_autent\',\'users\',cur_tab(1,1),%1)'[$_por],,'R'
   )
?};

:: akcja "Wyświelt" (dedykowana)
_TAB.win_act(_wnd,,'Wyświetl',,,,,
   $'params_exec(\'pau_wyswietl_a\',\'users\',cur_tab(1,1),%1)'[$_por]
);

:: akcja "Szukaj" (standardowa)
_TAB.win_act(_wnd,,'Szukaj');

:: akcja "Kolejność" (standardowa)
_TAB.win_act(_wnd,,'Kolejność');

:: akcja "Rekord" (standardowa)
:: dla bieżącego rekordu:
::    - aktualizuje ustawienia znaczników
::    - włącza/deaktywuje akcje menu
:: po edycji rekordu
::    - sprawdza wypełnienie pól
::    - weryfikuje dane użytkownika
_TAB.win_act(_wnd,,'Rekord',,,,
   $'params_exec(\'pau_rekord_b\',\'users\',cur_tab(1,1),cur_win(1,1),_a,%1)'[$_por],
   $'params_exec(\'pau_rekord_a\',\'users\',cur_tab(1,1),%1)'[$_por]
);

:: dodaj przyciski
_TAB.win_btn(_wnd,'text=%1'['U&twórz'@@],'menu:T');
_TAB.win_btn(_wnd,'text=%1'['Aktywuj'@@],'menu:A');
_TAB.win_btn(_wnd,'text=%1'['Wyłącz'@@],'menu:W');
{? ~_por
|| _TAB.win_btn(_wnd,'text=%1'['W&yślij'@@],'menu:Y')
?};
{? _por<>0
|| _TAB.win_btn(_wnd,'text=%1'['Zmień'@@],'menu:Z')
?};
_TAB.win_btn(_wnd,'text=%1'['Popraw'@@],'menu:P');
_TAB.win_btn(_wnd,'text=%1'['Usuń'@@],'menu:U');

_wnd


\pau__wnd_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Tworzy okieno redakcji konta współpracownika.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       _b [STRING] - określenie rodzaju tworzonego okienka: redakcja, wzorzec, widok
::       _c [STRING] - identyfikator okienka
::       [_d] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: akronim tymczasowego okienka redakcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_mod:=_b;
_wid:=_c;
_por:=(var_pres('_d')=type_of(0) & _d<>0);

:: okienko redakcji danych konta współpracownika
_wnd:=_TAB.mk_edit('Konto współpracownika'@,,_wid,,,'html_maximized');

:: dane współpracownika - pola statyczne
exec('pau__fld_empl','users',_TAB,_wnd);

:: dane konta - pola edytowalne
_TAB.win_esep(_wnd,'Dane konta'@);
_TAB.win_efld(_wnd,,'WEBNAME',,,30,,,,,exec('fldLabel','#field',_TAB,'WEBNAME'));
_TAB.win_efld(_wnd,,'EMAIL',,,30,,,,,exec('fldLabel','#field',_TAB,'EMAIL'));
{? _mod='redakcja'
:: przycisk dla pola dostępny tylko w okienku edycji danych
|| _TAB.fld_ebtn(_wnd,'text=%1'['Generuj'@],$(
      '_pwd:=exec(\'pau_gen_email\',\'users\',cur_tab(1,1),1,%1);'
      '{? _pwd<>\'\' || _pwd || fld() ?}'
      [$_por]
   ))
?};
{? _por<>0
|| _TAB.win_efld(_wnd,,'NEWEMAIL',,,30,,,,,exec('fldLabel','#field',_TAB,'NEWEMAIL'))
?};
_TAB.win_efld(_wnd,,'WEBLOGIN',,,30,,,,,exec('fldLabel','#field',_TAB,'WEBLOGIN'));
{? _mod='redakcja'
:: przycisk dla pola dostępny tylko w okienku edycji danych
|| _TAB.fld_ebtn(_wnd,'text=%1'['Generuj'@],$(
      'exec(\'pau_gen_login\',\'users\',cur_tab(1,1),1,%1)'
      [$_por]
   ))
?};
{? _por<>0
|| _TAB.win_efld(_wnd,,'NEWLOGIN',,,30,,,,,exec('fldLabel','#field',_TAB,'NEWLOGIN'))
?};
{? _por=0 & (_mod='redakcja' | _mod='widok')
:: dla portalu hasło jest zbędna informacją, będzie wygenerowane i wysłane na adres
|| _TAB.win_efld(_wnd,,'PASSWORD',,,30,,,,,exec('fldLabel','#field',_TAB,'PASSWORD'))
?};
{? _por=0 & _mod='redakcja'
:: przycisk dla pola dostępny tylko w okienku edycji danych
|| _TAB.fld_ebtn(_wnd,'text=%1'['Generuj'@],"exec('pau_gen_pass','users',cur_tab(1,1))")
?};

:: sposób uwierzytelniania - znaczniki
exec('pau__fld_auth','users',_TAB,_wnd);

:: blok znaczników stanu
_TAB.win_esep(_wnd,'Status konta'@);
_TAB.win_efld(_wnd,,'CREATED',,,,,,,,exec('fldLabel','#field',_TAB,'CREATED'),'check-box',
   'check_label="%1"'['Tak, utworzono konto.'@],"'T'","'N'","''"
);
_TAB.win_efld(_wnd,,'ACTIVE',,,,,,,,exec('fldLabel','#field',_TAB,'ACTIVE'),'check-box',
   'check_label="%1"'['Tak, aktywowano konto.'@],"'T'","'N'","''"
);
_TAB.win_efld(_wnd,,'USED',,,,,,,,exec('fldLabel','#field',_TAB,'USED'),'check-box',
   'check_label="%1"'['Tak, użytkownik zalogował się.'@],"'T'","'N'","''"
);

:: standardowe przyciski na dole okienka
exec('ok_esc','#window',_TAB,_wnd,,,,,,,exec('text_red_ok','#window'));

_wnd


\pau__fld_auth
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Dodaje do okienka blok pól określających sposób autentykacji.
::   WE: _a [_TABLE] - alias tabeli
::       _b [STRING] - akronim okienka
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_wnd:=_b;

:: sposób uwierzytelniania
_TAB.win_esep(_wnd,'Uwierzytelnianie'@);
_TAB.win_efld(_wnd,,'OF365',,,,,,'Office 365'@,,exec('fldLabel','#field',_TAB,'OF365'),'check-box',
   'check_label="%1"'['Tak, z wykorzystaniem Microsoft Office 365.'@],"'T'","'N'"
);
_TAB.win_efld(_wnd,,'LOG2',,,,,,'Dwuskładnikowe'@,,exec('fldLabel','#field',_TAB,'LOG2'),'check-box',
   'check_label="%1"'['Tak, wykorzystuj logowanie dwuskładnikowe.'@],"'T'","'N'"
);

_TAB.fld_fml('OF365','AFTER_EDIT',"
   _TAB:=cur_tab(1,1);
   {? _TAB.OF365='T'
   || _TAB.LOG2:='N'
   ?};
   1
");

_TAB.fld_fml('LOG2','AFTER_EDIT',"
   _TAB:=cur_tab(1,1);
   {? _TAB.LOG2='T'
   || _TAB.OF365:='N'
   ?};
   1
");

~~


\pau__opt_auth
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Ustawia stan znaczników dla określenia sposobu dodatkowej autentykacji.
::   WE: _a [_TABLE] - alias tabeli z kolumnami OF365 i LOG2
::       _b [STRING] - akronim okienka redakcji
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_wnd:=_b;

_state:='editable=%1,enable=%1'[$(_TAB.NEEDUPD='N')];
_TAB.efld_opt(_wnd,_state,,'OF365');
_TAB.efld_opt(_wnd,_state,,'LOG2');
~~


\pau__fld_empl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Dodaje do okienka blok pól określających współpracownika.
::   WE: _a [_TABLE] - alias tabeli
::       _b [STRING] - akronim okienka
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_wnd:=_b;

:: dane współpracownika
_TAB.win_esep(_wnd,'Dane podstawowe'@);
_TAB.win_efld(_wnd,,'NAZWISKO',,,30,,,,,exec('fldLabel','#field',_TAB,'NAZWISKO'));
_TAB.win_efld(_wnd,,'PIERWSZE',,,30,,,,,exec('fldLabel','#field',_TAB,'NAZWISKO'));
_TAB.win_efld(_wnd,,'UD_SKL',,,30,,,,,exec('fldLabel','#field',_TAB,'UD_SKL'));

~~


\pau__role_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy i udostępnia do edycji tabelę wybranych ról.
::   WE: [_a] [INTEGER] - ograniczenie zakresu
::       [_b] [OBJECT] - wskazanie na obiekt zawierający dane użytkowników
::       [_c] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: wskazanie konfiguracji wybranych ról lub ~~ w przypadku rezygnacji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_pfx:={? var_pres('_a')=type_of(0) || _a || -1 ?};
_usr:={? var_pres('_b')>100 || _b || ~~ ?};
_por:=(var_pres('_c')=type_of(0) & _c<>0);
_ret:=~~;

_cfg:=exec('pau__role_tab','users',_pfx);
_BUF:=_cfg.TABLE;
_BUF.index(_cfg.key.CHOSEN);

_wnd:=exec('pau__role_wnd','users',_BUF,_por);
_BUF.win_sel(_wnd.GRP);
_BUF.win_edit(_wnd.RED);

_ctx:=obj_new('master','cfg','wnd','por');
_ctx.master:=_usr;
_ctx.cfg:=_cfg;
_ctx.wnd:=_wnd;
_ctx.por:=_por;
params_set('context',_ctx);

_BUF.fld_fml('OWNER','BLANK',$$_pfx);
{? _BUF.select()
|| _ret:=_ctx
?};
_BUF.fld_fml('OWNER','BLANK',"");

_ret


\pau__role_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy tablicę z konfiguracją na potrzeby prezentacji propozycji ról użytkowników internetowych.
::   WE: [_a] [INTEGER] - ograniczenie zakresu
::   WY: tablica zawierająca konfigurację
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_pfx:={? var_pres('_a')=type_of(0) || _a || -1 ?};

:: wartość zwracana
_cfg:=obj_new('TABLE','key','SELECTED','OWNER');
_cfg.key:=obj_new('PK','FK_INT','FK_SQL','CHOSEN');

:: bufor danych
_BUF:=tab_tmp(1,
:: identyfikator systemowy
   'IDADD',   'IDADD','Identyfikator'@,
:: ograniczenie zakresu
   'OWNER',   'INTEGER','Właściciel'@,
   'CHOSEN',  'STRING[1]','Wybrana'@,
   'DEFAULT', 'STRING[1]','Domyślna'@,
:: informacje o roli
   'NAME',    'STRING[%1]'[$MS.fld_len(B_ROLE,'NAME')],MS.name(B_ROLE,'NAME'),
   'ROLE_INT','INTEGER','Numer wiersza'@,
   'ROLE_SQL','STRING[16]','Wskazanie wiersza'@
);

:: ustal wynik
_cfg.TABLE:=_BUF;
_cfg.key.PK:=_BUF.index('?');
_cfg.key.FK_INT:=_BUF.ndx_tmp(,1,'ROLE_INT',,);
_cfg.key.FK_SQL:=_BUF.ndx_tmp(,1,'ROLE_SQL',,);
_cfg.key.CHOSEN:=_BUF.ndx_tmp('Rola'@,0,'OWNER',,,'CHOSEN',,,'NAME',,);
_cfg.SELECTED:=tab_tmp(2,
   'SIDE','STRING[1]','Strona'@,
   'REF', 'INTEGER',  'Wiersz'@
);
_cfg.OWNER:=_pfx;

:: uzupełnij dane
_BUF.blank(1);
_BUF.OWNER:=_pfx;
_BUF.CHOSEN:='N';
_BUF.DEFAULT:='T';
B_ROLE.cntx_psh();
B_ROLE.index('UNIK');
B_ROLE.prefix(exec('ref_firma','ustawienia'));
_loop:=B_ROLE.first();
{!
|? _loop
|! _BUF.NAME:=B_ROLE.NAME;
   _BUF.ROLE_INT:=#B_ROLE.ref();
   _BUF.ROLE_SQL:=$B_ROLE.ref();
   _BUF.add();
   _loop:=B_ROLE.next()
!};
B_ROLE.cntx_pop();
_BUF.first();

_cfg


\pau__role_wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy panel pozwalający wskazać domyślne role użytkowników.
::   WE: _a [_TABLE] - alias tabeli tymczasowej
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: tablica nazwana o strukturze:
::          WER - akronim okienka wertowania
::          RED - akronim okienka selekcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

:: wartość zwracana
_ret:=obj_new('WER','SEL','RED','GRP','BTN');
_ret.BTN:=obj_new('ADD','DEL');

:: obsługa zawartości
_add:="params_exec('pau_role_zmien_a','users','N')";
_del:="params_exec('pau_role_zmien_a','users','T')";
_nck:="sel_nchk()";
_com_act:="
   _a.win_act(_b,0,'Formuła','Dalej'@,,,$'sel_exit()',,,,,,'D',,'target=window');
   _a.win_act(_b,1,'Formuła','Dalej'@,,,$'sel_exit()',,,,,,'D',,'target=window');
   _a.win_act(_b,,'Szukaj');
   _a.win_act(_b,,'Kolejność');
   ~~
";

:: okno wybranych ról
_wnd:=_TAB.mk_sel('Wybrane role'@,'P',0,'#pau_role_wer',,,,,'U');
_TAB.win_fld(_wnd,,'NAME',,,{? _por<>0 || 60 || 70 ?},,,,,MS.comment(B_ROLE,'NAME'));
_TAB.win_fld(_wnd,,'DEFAULT',,,-3,,,,,,2,,"'T'","'N'");
_TAB.win_act(_wnd,,'Formuła','Usuń'@,,,_del,,1,1,_nck,_del,'U');
_TAB.win_act(_wnd,,'Rekord',,,,"params_exec('pau_role_rekord_b','users',_a,'T')");
_com_act(_TAB,_wnd);
_ret.WER:=_wnd;

:: okno dostępnych ról
_wnd:=_TAB.mk_sel('Dostępne role'@,'P',0,'#pau_role_sel',,,,,'U');
_TAB.win_fld(_wnd,,'NAME',,,{? _por<>0 || 57 || 67 ?},,,,,MS.comment(B_ROLE,'NAME'));
_TAB.win_act(_wnd,,'Formuła','Przypisz'@,,,_add,,1,1,_nck,_add,'P');
_TAB.win_act(_wnd,,'Formuła','Usuń'@,,,_del,,1,1,_nck,_del,'U');
_TAB.win_act(_wnd,,'Rekord',,,,"params_exec('pau_role_rekord_b','users',_a,'N')");
_com_act(_TAB,_wnd);
_ret.SEL:=_wnd;

:: przyciski "przerzucania" ról między okienkami
_ret.BTN.ADD:=_TAB.win_btn(_wnd,'text=%1,panel=left,align=begin'['<<<'],'menu:P');
_ret.BTN.DEL:=_TAB.win_btn(_wnd,'text=%1,panel=left,align=begin'['>>>'],'menu:U');

:: okno podglądu/wyszukiwania roli
_wnd:=_TAB.mk_edit('Rola użytkownika'@,0,'#pau_role_red');
_TAB.win_efld(_wnd,,'NAME',,,40,,,,,MS.comment(B_ROLE,'NAME'));
exec('ok_esc','#window',_TAB,_wnd);
_ret.RED:=_wnd;

:: panel wyboru ról
_mode:='maximized_with_title';
_wnd:=_TAB.grp_make('Role użytkowników'@,
:: przed otwarciem
   "  _par:=params_get();
      params_set(_par);
      _ctx:=_par.context;
      grp_disp(_ctx.cfg.TABLE,_ctx.wnd.SEL)
   ",
:: identyfikator
   '#pau_role_grp'
);
:: lista wybranych ról
_TAB.grp_sel(_wnd,,_ret.WER,,
:: po odświeżeniu
   "params_exec('pau_role_xxx_ar','users')",,,,
:: przed obsługą
   "params_exec('pau_role_xxx_bs','users',_a,'T')",,,,
:: tryb
   _mode
);
:: lista dostępnych ról
_TAB.grp_splt(_wnd,,'vertical','right');
_TAB.grp_sel(_wnd,,_ret.SEL,,
:: po odświeżeniu
   "params_exec('pau_role_xxx_ar','users')",,,,
:: przed obsługą
   "params_exec('pau_role_xxx_bs','users',_a,'N')",,,,
:: tryb
   _mode
);
_ret.GRP:=_wnd;

_ret


\pau_role_xxx_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Po odświeżeniu listy dostępnych ról.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ctx:=params_get().context;
_cfg:=_ctx.cfg;
_TAB:=_cfg.TABLE;
_wnd:=_ctx.wnd;
_btn:=_ctx.wnd.BTN;

:: status dla przycisku zależny od dostępnych rekordów
_state:="'state=%1'[{? grp_empty(_a,_b)=0 || 'normal' || 'grayed' ?}]";

_TAB.cntx_psh();
:: stan dla <<<
_TAB.prefix(_cfg.OWNER,'N');
_TAB.btn_sopt(_wnd.SEL,_btn.ADD,_state(_TAB,_wnd.SEL));
:: stan dla >>>
_TAB.prefix(_cfg.OWNER,'T');
_TAB.btn_sopt(_wnd.SEL,_btn.DEL,_state(_TAB,_wnd.WER));
_TAB.cntx_pop();
~~


\pau_role_xxx_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed obsługą okienek wybranych i dostępnych ról.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::       _b STRING - ograniczenie zakresu: T - wybrane, N - dostępne
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mod:=_a;
_dom:=_b;

_cfg:=params_get().context.cfg;
_TAB:=_cfg.TABLE;
{? _cfg.OWNER=0
:: zablokuj okienko
|| return('#disable')
?};

_TAB.prefix(_cfg.OWNER,_dom);
{? _mod=0
|| _TAB.first();
   {? _TAB.sel_size()>0
   || _TAB.sel_adel()
   ?}
?};
~~


\pau_role_rekord_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Formuła przed akcji "rekord" okienek przypisanych i dostępnych ról.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};
_pfx:=_b;

_ctx:=params_get().context;
_SEL:=_ctx.cfg.SELECTED;
_TAB:=_ctx.cfg.TABLE;
_BTN:=_ctx.wnd.BTN;

_SEL.prefix(_pfx);
{? _SEL.first()
|| {! |? _SEL.del() !}
?};

_SEL.blank(1);
_SEL.SIDE:=_pfx;
{? _TAB.sel_size()=0
|| _SEL.REF:=#_TAB.ref();
   _SEL.add()
|| _CUR:=_TAB.sel_aget();
   _loop:=_CUR.first();
   {!
   |? _loop
   |! _SEL.REF:=_CUR.REF;
      _SEL.add();
      _loop:=_CUR.next()
   !}
?};
~~


\pau_role_zmien_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Usuwa/przypisuje role.
::   WE: _a STRING - określenie "strony": T - wybrane, N - dostępne
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_pfx:=_a;
_val:={? _pfx='T' || 'N' || 'T' ?};

_par:=params_get();
params_set(_par);

_ctx:=_par.context;
_TAB:=_ctx.cfg.TABLE;
_SEL:=_ctx.cfg.SELECTED;
_USR:=_ctx.master.TABLE;
_usr:=_ctx.cfg.OWNER;

{? _TAB.sel_size()>0
|| return()
?};

_firma:=exec('ref_firma','ustawienia');
_buf:=exec('buffer','#b_usrrol');
_buf.FIRMA:=_firma;

B_USRROL.cntx_psh();
USERS.cntx_psh();
_USR.cntx_psh();
_TAB.cntx_psh();
_TAB.clear();
_SEL.prefix(_pfx);
_loop:=_SEL.first();
{!
|? _loop
|! {? _TAB.seek(_SEL.REF,)
   || _TAB.CHOSEN:=_val;
      do();
      {? _TAB.put() & _usr>0
::       zmień role istniejącego użytkownika
      || {? _USR.seek(_usr,,1) & USERS.seek(_USR.USERS,,1)
         || {? _TAB.CHOSEN='T'
::             nadaj rolę
            || _buf.USERS:=USERS.ref();
               _buf.B_ROLE:=exec('ref','#b_role',_TAB.NAME);
               {? exec('add','#b_usrrol',_buf,,0)<>null
::                wymagane ze względu na widoki ról
               || exec('synchronize','users')
               || undo()
               ?}
            |? _TAB.CHOSEN='N'
::             odbierz rolę
            || B_USRROL.index('WER3');
               B_USRROL.prefix(_firma,USERS.ref());
               {? B_USRROL.find_key(_TAB.NAME,)
::                odbierz użytkownikowi rolę
               || {? exec('delete','#b_usrrol',B_USRROL.ref(),0)=0
::                   błąd przy usuwaniu roli
                  || undo()
                  ?}
               ?}
            ?}
         ?}
      ?};
      end()
   ?};
   _loop:=_SEL.del()
!};
:: odśwież "przeciwny" widok
{? cur_win(1,1)=_ctx.wnd.WER
|| grp_disp(_TAB,_ctx.wnd.SEL)
|| grp_disp(_TAB,_ctx.wnd.WER)
?};
_TAB.cntx_pop();
_USR.cntx_pop();
USERS.cntx_pop();
B_USRROL.cntx_pop();
~~


\pau_portal_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed akcjami listy użytkowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: wynik sprawdzenia warunku wykonania zasadniczej akcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

{? _por<>0
|| _TAB.EMAIL<>'' &
   exec('mail_ok','#email',_TAB.EMAIL)<>0 &
   exec('mail_ok','#email',_TAB.WEBLOGIN)<>0
|| 1
?}


\pau_utworz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Przed akcją "Utwórz" listy kont współpracowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: wynik sprawdzenia warunku wykonania zasadniczej akcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

_TAB.CREATED='N' & _TAB.WEBLOGIN<>'' & exec('pau_portal_b','users',_TAB,_por)


\pau_utworz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Po akcji "Utwórz" listy kont współpracowników. Tworzy konto użytkownika internetowego zgodnie z danymi w
::       bieżącym wierszu, synchronizuje dane w tabeli USERS, łączy osobę z użytkownikiem.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

_ctx:=params_get().context;
_CFG:=_ctx.cfg.TABLE;
_CFG.index(_ctx.cfg.key.CHOSEN);

_firma:=exec('ref_firma','ustawienia');
_buf:=exec('buffer','#b_usrrol');
_buf.FIRMA:=_firma;

USERS.cntx_psh();
USERS.index('USR_GUID');
USERS.prefix();
OSOBA.cntx_psh();
OSOBA.prefix();
:: ustal osobę
{? OSOBA.seek(_TAB.OSOBA)
|| _sys:=exec(,'__sysusr');
:: spróbuj utworzyć konto użytkownika internetowego
   {? _sys.addWebUser(_TAB.WEBLOGIN,_TAB.WEBNAME,_TAB.PASSWORD,0,1)<>0
   || _usr:=_sys.getWebUser(_TAB.WEBLOGIN);
      {? +|_TAB.WEBLOGIN & type_of(_usr)<>type_of(~~)
::       synchronizuj zawartość tabel
      || {? +|_usr.Auth.Web.Login || _usr.Auth.Web.Active:=0 || _usr.Auth.Ldap.WebActive:=0 ?};
::       zapisz informacje
         _sys.putUser(_usr);
         {? _TAB.sel_size()=0
         || exec('synchronize','users');
::          połącz osobę z kontem użytkownika
            {? USERS.find_tab(,'GUID',,'=',_usr.Guid)
            || {? exec('_osoba_unique','users',OSOBA.ref(),USERS.ref())>0
               || USERS.OSOBA:=OSOBA.ref()
               ?};
               USERS.EMAIL:=_TAB.EMAIL;
               USERS.OF365:=_TAB.OF365;
               USERS.LOG2:=_TAB.LOG2;
               USERS.PORTAL:='N';
               USERS.PORTAL2:='N';
               {? USERS.put()
               || _buf.USERS:=USERS.ref();
                  _CFG.cntx_psh();
                  _CFG.prefix(#_TAB.ref(),'T');
                  _loop:=_CFG.first();
                  {!
                  |? _loop
                  |! _buf.B_ROLE:=exec('ref','#b_role',_CFG.NAME);
                     exec('add','#b_usrrol',_buf,,0);
                     _loop:=_CFG.next()
                  !};
                  _CFG.cntx_pop()
               ?}
            ?}
         || USERS.blank();
            USERS.GUID:=_usr.Guid;
            USERS.KOD:=_usr.Login;
            USERS.DANE:=_usr.Descr;
            {? exec('_osoba_unique','users',OSOBA.ref(),null())>0
            || USERS.OSOBA:=OSOBA.ref()
            ?};
            USERS.EMAIL:=_TAB.EMAIL;
            USERS.OF365:=_TAB.OF365;
            USERS.LOG2:=_TAB.LOG2;
            USERS.PORTAL:='N';
            USERS.PORTAL2:='N';
            USERS.WEBLOGIN:={? +|_usr.Auth.Web.Login || _usr.Auth.Web.Login || '' ?};
            {? USERS.add()
            || _buf.USERS:=USERS.ref();
               _CFG.cntx_psh();
               _CFG.prefix(#_TAB.ref(),'T');
               _loop:=_CFG.first();
               {!
               |? _loop
               |! _buf.B_ROLE:=exec('ref','#b_role',_CFG.NAME);
                  exec('add','#b_usrrol',_buf,,0);
                  _loop:=_CFG.next()
               !};
               _CFG.cntx_pop()
            ?}
         ?};
         _TAB.CREATED:='T';
         _TAB.put()
      ?}
   ?}
?};
OSOBA.cntx_pop();
USERS.cntx_pop();

:: na zakończenie modyfikacji
exec('pau_xxx_a','users',_TAB);
~~


\pau_aktywuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Przed akcją "Aktywuj" listy kont współpracowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: wynik sprawdzenia warunku wykonania zasadniczej akcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

_TAB.CREATED='T' & _TAB.ACTIVE='N' &
exec('pau_portal_b','users',_TAB,_por) &
{? _por<>0 || exec('is_active','portal_engine') || 1 ?}


\pau_aktywuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Po akcji "Aktywuj" listy kont współpracowników. Ustawia konto użytkownika internetowego jako aktywne,
::       synchronizuje dane w tabeli USERS.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

:: aktywuj dostęp przez internet
exec('setWebUserActive','users',_TAB.WEBLOGIN,1,_TAB.sel_size()=0,_por);

:: na zakończenie modyfikacji
exec('pau_xxx_a','users',_TAB);
~~


\pau_wylacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Przed akcją "Wyłącz" listy kont współpracowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: wynik sprawdzenia warunku wykonania zasadniczej akcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

_TAB.CREATED='T' & _TAB.ACTIVE='T'


\pau_wylacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Po akcji "Wyłącz" listy kont współpracowników. Ustawia konto użytkownika internetowego jako nieaktywne,
::       synchronizuje dane w tabeli USERS.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

:: wyłącz dostęp przez internet
exec('setWebUserActive','users',_TAB.WEBLOGIN,0,_TAB.sel_size()=0,_por);

:: na zakończenie modyfikacji
exec('pau_xxx_a','users',_TAB);
~~


\pau_zmien_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed akcją "Zmień" listy kont współpracowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: wynik sprawdzenia warunku wykonania zasadniczej akcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

_TAB.NEEDUPD='T'


\pau_zmien_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Po akcji "Zmień" listy kont współpracowników. Zmienia dane użytkownika na poprawne, synchronizuje dane w tabeli
::       USERS.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);
_usr:=~~;
{? _TAB.CREATED='T'
|| _sys:=exec(,'__sysusr');
   _usr:=_sys.getWebUser(_TAB.WEBLOGIN);
   {? type_of(_usr)=type_of(~~)
   || _usr:=_sys.getUser(_TAB.WEBLOGIN)
   ?}
?};
{? ~+|_TAB.WEBLOGIN | type_of(_usr)=type_of(~~)
|| return()
?};

{? _TAB.NEWLOGIN<>'' || _TAB.WEBLOGIN:=_TAB.NEWLOGIN ?};
{? _TAB.NEWEMAIL<>'' || _TAB.EMAIL:=_TAB.NEWEMAIL ?};

_done:=0;
{? _TAB.NEWLOGIN<>''
|| _usr.Auth.Web.Login:=_TAB.WEBLOGIN;
   {? _sys.putUser(_usr,1,0)<>0
   || exec('synchronize','users');
      USERS.cntx_psh();
      USERS.clear();
      USERS.index('USR_GUID');
      {? USERS.find_tab(,'GUID',,'=',_usr.Guid)
::       aktualizuj dane użytkownika
      || {? _TAB.NEWEMAIL<>''
         || USERS.EMAIL:=_TAB.NEWEMAIL
         ?};
         {? USERS.put()
         || _done:=1
         ?}
      ?};
      USERS.cntx_pop()
   ?}
|? _TAB.NEWEMAIL<>''
|| USERS.cntx_psh();
   USERS.clear();
   USERS.index('USR_GUID');
   {? USERS.find_tab(,'GUID',,'=',_usr.Guid)
::    aktualizuj adres użytkownika
   || USERS.EMAIL:=_TAB.NEWEMAIL;
      {? USERS.put()
      || _done:=1
      ?}
   ?};
   USERS.cntx_pop()
?};

{? _done<>0
|| _TAB.NEWLOGIN:='';
   _TAB.NEWEMAIL:='';
   _TAB.NEEDUPD:='N';
   _TAB.put()
?};

:: na zakończenie modyfikacji
exec('pau_xxx_a','users',_TAB);
~~


\pau_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Przed akcją "Popraw" listy kont współpracowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: wynik sprawdzenia warunku wykonania zasadniczej akcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

:: czy konto zostało użyte?
{? _TAB.USED<>'N'
|| return(0)
?};

_acc:=(_TAB.CREATED='N');
_wnd:=_TAB.win_edit('?');

:: ustaw domyślne opcje pól
exec('pau_opcje_pol','users',_TAB,_wnd,1);
:: zmień dostępność pól zależnie od stanu konta
{? _por<>0
|| exec('pau__opt_auth','users',_TAB,_wnd);
   _state:='editable=0,enable=%1'[$(_TAB.NEEDUPD='T' & _TAB.NEWEMAIL<>'')];
   _TAB.efld_opt(_wnd,_state,,'NEWEMAIL');
   _state:='editable=0,enable=%1'[$(_TAB.NEEDUPD='T' & _TAB.NEWLOGIN<>'')];
   _TAB.efld_opt(_wnd,_state,,'NEWLOGIN')
|| _state:='enable=%1'[$(_TAB.CREATED='N')];
   _TAB.efld_opt(_wnd,_state,,'PASSWORD')
?};
1


\pau_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Po akcji "Popraw" listy kont współpracowników. Synchronizuje dane w tabeli USERS.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

{? _TAB.CREATED='T'
|| _sys:=exec(,'__sysusr');
   _usr:=_sys.getWebUser(_TAB.WEBLOGIN);
   {? type_of(_usr)=type_of(~~)
   || _usr:=_sys.getUser(_TAB.WEBLOGIN)
   ?};
   {? +|_TAB.WEBLOGIN & type_of(_usr)<>type_of(~~)
::    aktualizuj konto
   || _usr.Descr:=_TAB.WEBNAME;
      {? +|_usr.Auth.Web.Login || _usr.Auth.Web.Password:=_TAB.PASSWORD ?};
      {? _sys.putUser(_usr,1,0)<>0
::       aktualizacja powiodła się
      || exec('synchronize','users');
         USERS.cntx_psh();
         USERS.clear();
         USERS.index('USR_GUID');
         {? USERS.find_tab(,'GUID',,'=',_usr.Guid)
::          aktualizuj dane użytkownika
         || USERS.EMAIL:=_TAB.EMAIL;
            USERS.OF365:=_TAB.OF365;
            USERS.LOG2:=_TAB.LOG2;
            USERS.put()
         ?};
         USERS.cntx_pop()
      ?}
   ?}
?};

:: na zakończenie modyfikacji
exec('pau_xxx_a','users',_TAB);
~~


\pau_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Przed akcją "Popraw" listy kont współpracowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: wynik sprawdzenia warunku wykonania zasadniczej akcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

_TAB.USED='N'


\pau_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Po akcji "Usuń" listy kont współpracowników. Usuwa konto użytkownika internetowego, synchronizuje dane w tabeli
::       USERS.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

{? ~FUN.ask('Czy na pewno usunąć konto współpracownika?'@)
:: rezygnacja
|| return()
?};

_del:=1;
_sys:=exec(,'__sysusr');
:: znajdź konto współpracownika
_usr:=_sys.getWebUser(_TAB.WEBLOGIN);
{? type_of(_usr)=type_of(~~)
|| _usr:=_sys.getUser(_TAB.WEBLOGIN)
?};
{? +|_TAB.WEBLOGIN & type_of(_usr)<>type_of(~~)
:: usuń konto internetowe
|| {? _sys.delUser(_usr)<>0
::    synchronizuj zawartość tabel
   || exec('synchronize','users')
   || _del:=0
   ?}
?};

{? _del<>0
|| {? _TAB.del(,1)<>0
::    na zakończenie modyfikacji
   || exec('pau_xxx_a','users',_TAB)
   ?}
|| FUN.emsg('Usunięcie konta współpracownika nie powiodło się.'@)
?};
~~


\pau_autent
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Obsługa akcji "Uwierzytelnianie".
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: 0/1 - czy pozostawić zaznaczone wiersze (Tak/Nie)
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

{? _TAB.sel_size()=0
|| sel_add()
?};

_TAB.cntx_psh();
_SEL:=_TAB.sel_aget();
exec('pau_autent_%1'[{? _SEL.size()=1 || '1' || 'x' ?}],'users',_TAB,_SEL);
_TAB.cntx_pop();

_TAB.sel_size()=0


\pau_autent_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Obsługa akcji "Uwierzytelnianie" dla bieżącego wiersza.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       _b [_TABLE] - alias tabeli zawierającej wybrane wiersze z tabeli _a
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_SEL:=_b;

{? (_chk:=exec('pau_autent_chk','users',_TAB))<0
|| exec('pau_autent_msg','users',_chk);
   _TAB.sel_adel();
   return()
?};

_prolog:="
   _a.cntx_psh();
   _a.win_edit(_b);
   USERS.cntx_psh();
   USERS.prefix();
   exec('pau_opcje_pol','users',_a,_b,1);
   ~~
";
_epilog:="
   _a.cntx_pop();
   _a.win_edel(_b);
   _a.sel_adel();
   USERS.cntx_pop();
   ~~
";

_wnd:=_TAB.mk_edit(menu_txt(),0,'#pau_autent_1');
:: dane współpracownika - pola statyczne
exec('pau__fld_empl','users',_TAB,_wnd);
:: sposób uwierzytelniania - znaczniki
exec('pau__fld_auth','users',_TAB,_wnd);
:: standardowe przyciski na dole okienka
exec('ok_esc','#window',_TAB,_wnd,,,,,,,exec('text_red_ok','#window'));

_prolog(_TAB,_wnd);

{? ~_TAB.edit()
|| _epilog(_TAB,_wnd);
   return()
?};

{? _TAB.put() & USERS.seek(_TAB.USERS,,1)
:: spróbuj zaktualizować dane użytkownika
|| USERS.OF365:=_TAB.OF365;
   USERS.LOG2:=_TAB.LOG2;
   USERS.put()
?};

_epilog(_TAB,_wnd);
~~


\pau_autent_x
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Obsługa akcji "Uwierzytelnianie" dla bieżącego wiersza.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       _b [_TABLE] - alias tabeli zawierającej wybrane wiersze z tabeli _a
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_SEL:=_b;

_BUF:=tab_tmp(,
:: sposób autentykacji
   'OF365','STRING[1]',MS.name(USERS,'OF365'),
   'LOG2', 'STRING[1]',MS.name(USERS,'LOG2')
);
_wnd:=_BUF.mk_edit(menu_txt(),0,'#pau_autent_x');
:: sposób uwierzytelniania - znaczniki
exec('pau__fld_auth','users',_BUF,_wnd);
:: standardowe przyciski na dole okienka
exec('ok_esc','#window',_BUF,_wnd,,,,,,,exec('text_red_ok','#window'));

_BUF.OF365:='N';
_BUF.LOG2:='N';
_BUF.win_edit(_wnd);
{? ~_BUF.edit()
|| return()
?};

_TAB.cntx_psh();
USERS.cntx_psh();
USERS.prefix();
_loop:=_SEL.first();
{!
|? _loop
|! {? _TAB.seek(_SEL.REF,,1)
   || {? exec('pau_autent_chk','users',_TAB)>=0
      || _TAB.OF365:=_BUF.OF365;
         _TAB.LOG2:=_BUF.LOG2;
         _TAB.sel_del();
         {? _TAB.put() & USERS.seek(_TAB.USERS,,1)
         || USERS.OF365:=_TAB.OF365;
            USERS.LOG2:=_TAB.LOG2;
            USERS.put()
         ?}
      ?}
   ?};
   _loop:=_SEL.next()
!};
USERS.cntx_pop();
_TAB.cntx_pop();

~~


\pau_autent_
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

_TAB.edit()


\pau_autent_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Sprawdzenie, czy dla użytkownika można ustawić dodatkową autentykację.
::   WE: _a [_TABLE] - alias tabeli zawierającej dane użytkownika
::   WY: -2 - brak identyfikatora na portalu
::       -1 - niepoprawny identyfikator
::        1 - dane poprawne
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

{? _TAB.WEBLOGIN='' || -1
|? exec('mail_ok','#email',_TAB.WEBLOGIN)=0 || -2
|| 1
?}


\pau_autent_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: "Uwierzytelnianie" - wyświetla komunikat właściwy dla kodu błędu.
::   WE: _a [INTEGER] - kod błędu
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_err:=_a;

FUN.emsg(
   {? _err=-1
   || 'Użytkownik nie ma określonego identyfikatora.'@
   |? _err=-2
   || 'Identyfikator użytkownika nie jest poprawnym adresem poczty elektronicznej.'@
   || 'Wystąpił niezidentyfikowany błąd.'@
   ?}
);
~~


\pau_wyswietl_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Po akcji "Wyświetl" listy kont współpracowników.
::   WE: _a _TABLE - alias tabeli zawierającej informacje o kontach współpracowników
::       _b [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

_org:=_a.win_edit('?');
:: utwórz i wyświetl dostosowane okienko redakcji
_wnd:=exec('pau__wnd_red','users',_TAB,'widok','#pau_wid',_por);
:: zmień widoczność pól zależnie od stanu konta
{? _por<>0
|| exec('pau__opt_auth','users',_TAB,_wnd);
   _state:='enable=%1'[$(_TAB.NEEDUPD='T')];
   _TAB.efld_opt(_wnd,_state,,'NEWEMAIL');
   _TAB.efld_opt(_wnd,_state,,'NEWLOGIN')
|| _state:='enable=%1'[$(_TAB.CREATED='N')];
   _TAB.efld_opt(_wnd,_state,,'PASSWORD')
?};

_TAB.win_edit(_wnd);
_TAB.display();
_TAB.win_edit(_org);
_TAB.win_edel(_wnd);
0


\pau_rekord_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Przed akcją "Rekord" listy kont współpracowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       _b [STRING] - akronim okienka z listą kont współpracowników
::       _c [INTEGER] - tryb odrysowywania
::       [_d] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_wnd:=_b;
_cur:=_c;
_por:=(var_pres('_d')=type_of(0) & _d<>0);

_TAB.get();
:: wstępnie wyłącz znaczniki
_created:=_TAB.CREATED;
_active:=_TAB.ACTIVE;
_used:=_TAB.USED;
_TAB.CREATED:='N';
_TAB.ACTIVE:='N';
_TAB.USED:='N';

:: dane użytkownika
_sys:=exec(,'__sysusr');
_usr:=_sys.getWebUser(_TAB.WEBLOGIN);
{? +|_TAB.WEBLOGIN & type_of(_usr)<>type_of(~~)
:: znaleziono konto
|| _TAB.CREATED:='T';
:: czy konto jest aktywne?
   {? _usr.Auth.Web.Active<>0 | _usr.Auth.Ldap.WebActive
   || _TAB.ACTIVE:='T'
   ?};
:: czy konto zostało użyte (zalogowano się)?
   {? _por<>0
   || USERS.cntx_psh();
      {? USERS.seek(_TAB.USERS,,1)
      || _portal2:=exec('FindInSet','#table','USERSF','UNIK',USERS.ref(),REF.FIRMA,"USERSF.PORTAL2",,,'N');
         _TAB.USED:=_portal2
      ?};
      USERS.cntx_pop()
   |? _usr.Auth.Web.LastLogin.Date<>#0 | _usr.Auth.Ldap.LastLogin.Date<>#0
   || _TAB.USED:='T'
   ?}
?};
:: aktualizuj statusy
{? _created<>_TAB.CREATED |
   _active<>_TAB.ACTIVE |
   _used<>_TAB.USED
|| _TAB.put()
?};

:: zabezpiecz przed migotaniem menu
{? _cur=0 || return() ?};

:: zależnie od statusów wyłącz akcje
_aid:='';
{? _TAB.sel_size()<=1
|| {? exec('pau_utworz_b','users',_TAB,_por)=0  || _aid+='T' ?};
   {? exec('pau_aktywuj_b','users',_TAB,_por)=0 || _aid+='A' ?};
   {? exec('pau_wylacz_b','users',_TAB,_por)=0  || _aid+='W' ?};
   {? exec('pau_zmien_b','users',_TAB,_por)=0   || _aid+='Z' ?};
   {? exec('pau_popraw_b','users',_TAB,_por)=0  || _aid+='P' ?};
   {? exec('pau_usun_b','users',_TAB,_por)=0    || _aid+='U' ?};
   {? exec('pau_wyslij_b','users',_TAB,_por)=0  || _aid+='Y' ?}
?};
_TAB.actions_grayed(_wnd,_aid);
~~


\pau_rekord_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Przed akcją "Rekord" listy kont współpracowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: wynik sprawdzenia poprawności danych
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

:: sprawdź wypełnienie wymaganych pól
{? (_chk:=__CHK.record(_TAB,,'WEBNAME','WEBLOGIN'))<>''
|| return(_chk)
?};

_chk:=1;
_TAB.cntx_psh();
_ref:=_TAB.ref();
{? (_TAB.find_tab(,'WEBLOGIN',,'=',_TAB.WEBLOGIN) & _TAB.ref()<>_ref) |
   type_of(exec(,'__sysusr').getWebUser(_TAB.WEBLOGIN))<>type_of(~~)
|| FUN.emsg('Użytkownik o podanym identyfikatorze już istnieje.'@);
   _chk:='WEBLOGIN'
|? exec('mail_ok','#email',_TAB.EMAIL)=0
|| FUN.emsg('"%1" nie jest poprawnym adresem poczty elektronicznej.'@[_TAB.EMAIL]);
   _chk:='EMAIL'
|? _por<>0 & exec('mail_ok','#email',_TAB.WEBLOGIN)=0
|| FUN.emsg('"%1" nie jest poprawnym adresem poczty elektronicznej.'@[_TAB.WEBLOGIN]);
   _chk:='WEBLOGIN'
?};
_TAB.cntx_pop();

_chk


\pau_xxx_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Po każdej akcji modyfikującej dane na liście kont współpracowników - odświeżenie ewentualnych filtrów.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

{? _TAB.f_active() & _TAB.sel_size()=0
|| _TAB.f_rfresh()
?};
~~


\pau_gen_email
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja przycisku dla pola EMAIL.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       _b [INTEGER] - tryb działania: 0 tworzenie nowego, 1 ponowne generowanie
::       [_c] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: adres poczty elektronicznej
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_mod:=_b;
_por:=(var_pres('_c')=type_of(0) & _c<>0);

exec('getPersonEmail','users',_TAB.NAZWISKO,_TAB.PIERWSZE,_TAB,_mod,_por)


\pau_gen_login
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja przycisku dla pola WEBLOGIN.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       _b [INTEGER] - tryb działania: 0 tworzenie nowego, 1 ponowne generowanie
::       [_c] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: identyfikator dostępu do konta internetowego
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_mod:=_b;
_por:=(var_pres('_c')=type_of(0) & _c<>0);

exec('getPersonWebLogin','users',_TAB.NAZWISKO,_TAB.PIERWSZE,_TAB,_mod,_por)


\pau_gen_pass
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja przycisku dla pola PASSWORD.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: hasło dostępu do konta internetowego
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

{? _por<>0
:: licencja na dziedzinę POR
:: hasło dostępu jest zbędne
|| return('')
?};

exec('getPersonPassword','users',_TAB.NAZWISKO,_TAB.PIERWSZE,_por)


\pau_opcje_pol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Ustawia opcje pól w okienku redakcji danych konta współpracownika.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       _b [STRING] - akronim okienka redagowania
::       _c [INTEGER] - tryb: 0 przywrócenie stanu "czystego", 1 ustalenie porządanych opcji
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_wnd:=_b;
_mod:=_c;

:: opcje dla pól
_edit:='editable=%1'[{? _mod<>0 || 'grayed' || '1' ?}];
_mark:='mark=%1'[$_mod];

:: ustal opcje wyświetlania
_TAB.efld_opt(_wnd,_edit,,'NAZWISKO');
_TAB.efld_opt(_wnd,_edit,,'PIERWSZE');
_TAB.efld_opt(_wnd,_edit,,'UD_SKL');
_TAB.efld_opt(_wnd,_mark,,'WEBNAME');
_TAB.efld_opt(_wnd,_mark,,'WEBLOGIN');
_TAB.efld_opt(_wnd,_edit,,'CREATED');
_TAB.efld_opt(_wnd,_edit,,'ACTIVE');
_TAB.efld_opt(_wnd,_edit,,'USED');
~~


\groupCreate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Tworzy użytkowników internetowych dla wybranych osób.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: warunek dalszego działania to jednoznaczność użytkownik<->osoba
_TMP:=sql(
   'select USERS.OSOBA, count(*) '
   'from USERS '
   'where USERS.OSOBA is not null '
   'group by USERS.OSOBA '
   'having count(*)>1',
   exec('ref_firma','ustawienia')
);
{? _TMP.first()<>0
:: powielenie
|| {? FUN.ask(
         'Znaleziono niejednoznaczne przypisania osób do użytkowników.\n'
         'Działanie funkcji zostanie przerwane.\n\n'
         'Czy wyświetlić listę nieprawidłowo przypisanych osób?'
      )
   || _REP:=sql(
         'select NAZWISKO, PIERWSZE, PESEL '
         'from OSOBA join :_a using (OSOBA.REFERENCE,:_a.OSOBA) '
         'order by NAZWISKO, PIERWSZE, PESEL',
         _TMP
      );
      _col:="_a.win_fld(_b,,_c,,,,,,MS.name(OSOBA,_c),,MS.comment(OSOBA,_c))";
      _wnd:=_REP.mk_sel('Wielokrotnie przypisane osoby'@,'P',,'#users_osoba',,,,,'U');
      _col(_REP,_wnd,'NAZWISKO');
      _col(_REP,_wnd,'PIERWSZE');
      _col(_REP,_wnd,'PESEL');
      _REP.win_act(_wnd,,'Kolejność');
      _REP.win_sel(_wnd);
      _REP.select()
   ?};
   return()
?};
obj_del(_TMP);

exec('czytaj','#stalesys',,XINFO,'POR_CONF','POR0TNNT','POR_TNNT');
:: formuła obsługuje konfiguracje z i bez portalu
_por:=exec('lic_or','#b_domain','POR');
{? _por<>0 & exec('is_active','portal_engine')=0 & ~FUN.ask(
      'Połączenie z portalem pracowniczym nie jest skonfigurowane.\n'
      'Aktywowanie kont współpracowników nie będzie możliwe.\n\n'
      'Czy kontynuować działanie?'
   )
|| return()
?};

{? _por<>0
:: znaleziono licencję dla dziedziny POR
:: wymagana nazwa domeny poczty elektronicznej
|| _dom:=REF.FIRMA().EMAILDOM;
   _txt:=
      {? _dom=''
      || 'Brak informacji "%1" dla firmy "%2".'@
         [MS.name(FIRMA,'EMAILDOM'),FIRMA.SYMBOL]
      |? exec('mail_ok','#email','x@%1'[_dom])=0
      || '"%1" nie jest poprawną nazwą domeny poczty elektronicznej.'@
         [_dom]
      || ''
      ?};
   {? _txt<>''
   || FUN.emsg(_txt);
      return()
   ?};
   exec('message','portal_engine')
?};

:: określ kryteria ograniczenia zakresu
_args:=exec('wybierz_args','pracownik');
_args.DOMAIN:='PKD';
_args.UD_SCH:=exec('domyslny','schemat','PODZORG');
_args.UD_SKL:=exec('ud_skl_firma','schemat','PODZORG');
_args.F_ZATR:='*T';
_args.VIEW:='W';
_args.WIELU:=1;

:: wybierz pracowników z listy dostępnych
_sel:=exec('wybierz','pracownik',_args);
{? ~_sel.P.first()
|| return()
?};

:: przygotuj listę osób, dla których mają być utworzone konta
_cfg:=exec('pau__tab','users');
_USR:=_cfg.TABLE;
_USR.index(_cfg.key.PK);

:: wybierz role wspólne dla wszystkich użytkowników
_ctx:=exec('pau__role_ini','users',-1,_cfg,_por);
{? type_of(_ctx)=type_of(~~)
|| return()
?};
_DEF:=_ctx.cfg.TABLE;
_DEF.prefix(-1,'T');

:: zarządzanie użytkownikami
_sys:=exec(,'__sysusr');

USERS.cntx_psh();
USERS.index('OSOBA');
USERS.prefix();
OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
P.prefix();

:: przetwarzaj wybrane rekordy
_text:='Proszę czekać. Trwa przetwarzanie wybranych zapisów...'@;
_loop:=_sel.P.first();
_size:=_sel.P.size();
{! _cnt:=1
|? _loop
|! progress(int(100*_cnt/_size),_text,FUN.TYT);
:: ustal kontekst pracownika
   {? P.seek(_sel.P.SQL)
   || P.OSOBA();
      _ud_skl:=P.WYDZIAL().SYMBOL;
::    aktualizuj listę użytkowników
      {? ~_USR.find_key($P.OSOBA)
::       nowy użytkownik
      || _add:=1;
         _USR.blank();
         _USR.OSOBA:=$OSOBA.ref();
         _USR.NAZWISKO:=OSOBA.NAZWISKO;
         _USR.PIERWSZE:=OSOBA.PIERWSZE;
         _USR.UD_SKL:=_ud_skl;
         {? USERS.find_key(P.OSOBA)
::          użytkownik istnieje
         || _uid:=USERS.GUID;
            _USR.USERS:=$USERS.ref();
            _USR.EMAIL:=USERS.EMAIL;
            _USR.OF365:=USERS.OF365;
            _USR.LOG2:=USERS.LOG2;
            _usr:=_sys.getWebUser(USERS.WEBLOGIN);
            {? type_of(_usr)=type_of(~~)
            || _usr:=_sys.getUser(USERS.GUID)
            ?};
            {? type_of(_usr)<>type_of(~~)
::             znaleziono konto
            || _USR.WEBNAME:=_usr.Descr;
               _USR.WEBLOGIN:={? +|_usr.Auth.Web.Login || _usr.Auth.Web.Login || _usr.Auth.Ldap.Login ?};
               _USR.PASSWORD:='';
               _USR.CREATED:='T';
               _USR.ACTIVE:={? _usr.Auth.Web.Active | _usr.Auth.Ldap.WebActive || 'T' || 'N' ?};
               _USR.LDAPGUID:=_usr.Auth.Ldap.Guid;
               _USR.LOGIN:=_usr.Auth.Ldap.Login;
               {? _por<>0
               || _portal2:=exec('FindInSet','#table','USERSF','UNIK',USERS.ref(),REF.FIRMA,"USERSF.PORTAL2",,,'N');
                  _USR.USED:=_portal2
               |? _usr.Auth.Web.LastLogin.Date<>#0 | _usr.Auth.Ldap.LastLogin.Date<>#0
               || _USR.USED:='T'
               ?};
               obj_del(_usr)
            ||
::             jest konto osoby, ale bez loginu
::             takiego użytkownika pomijamy
               _add:=0
            ?};
            {? _USR.USED='T'
::             konto w użyciu
            || _USR.PASSWORD:=''
            ?}
         ||
::          brak użytkownika właściwego dla osoby, utwórz konto
            _USR.WEBNAME:='%1 %2'[_USR.NAZWISKO,_USR.PIERWSZE];
            _USR.WEBLOGIN:=exec('pau_gen_login','users',_USR,0,_por);
            _USR.PASSWORD:=exec('pau_gen_pass','users',_USR,_por);
            _USR.EMAIL:=exec('pau_gen_email','users',_USR,0,_por);
            _usr:=_sys.getWebUser(_USR.WEBLOGIN);
            {? type_of(_usr)=type_of(~~)
            || _usr:=_sys.getUser(USERS.GUID)
            ?};
            {? type_of(_usr)<>type_of(~~)
            || obj_del(_usr);
               _USR.cntx_psh();
               _exists:=
                  _USR.find_tab(,'WEBLOGIN',,'=',_USR.WEBLOGIN) |
                  USERS.find_tab(,'WEBLOGIN',,'=',_USR.WEBLOGIN);
               _USR.cntx_pop();
               {? _exists<>0
               || _USR.WEBLOGIN:=''
               ?}
            ?};
            {? _por<>0 & _USR.EMAIL=''
            || {? exec('mail_ok','#email',_USR.WEBLOGIN)<>0
::                użyj identyfikatora jako adresu pocztowego
               || _USR.EMAIL:=_USR.WEBLOGIN
               ?}
            ?}
         ?};
         {? _add<>0
         || _USR.add()
         ?}
      ||
::       jest już użytkownik, dodaj informację o jednostce
         {? (','+_USR.UD_SKL+',')*(','+_ud_skl+',')=0
         || _USR.UD_SKL+=','+_ud_skl;
            _USR.put()
         ?}
      ?}
   ?};
   _loop:=_sel.P.next()
!};

P.cntx_pop();
OSOBA.cntx_pop();

:: zweryfikuj poprawność identyfikatorów:
:: - utworzone z założenia sa zgodne z POR
:: - istniejące mogą wymagać aktualizacji
_text:='%1\n%2'[
   'Zakończono przetwarzanie wybranych zapisów.'@,
   'Proszę czekać. Trwa weryfikowanie identyfikacji użytkowników...'@
];
_USR.f_set(,,'USERS<>\'\' and WEBLOGIN<>EMAIL');
_loop:=(_por<>0 & _USR.f_first());
_size:=_USR.f_size();
{! _cnt
|? _loop
|! progress(int(100*_cnt/_size),_text,FUN.TYT);
   {? exec('mail_ok','#email',_USR.WEBLOGIN)=0
::    identyfikator nie jest poprawnym adresem pocztowym
   || {? _USR.EMAIL<>'' & exec('mail_ok','#email',_USR.EMAIL)<>0
      ||
::       spróbuj wykorzystać adres pocztowy
         _usr:=_sys.getWebUser(_USR.EMAIL);
         {? type_of(_usr)=type_of(~~)
         ||
::          wykorzystaj adres
            _USR.NEWLOGIN:=_USR.EMAIL
         ||
::          generuj, ponieważ jest już konto o loginie takim jak adres
            _USR.NEWLOGIN:=exec('pau_gen_login','users',_USR,0,_por);
            obj_del(_usr)
         ?}
      ||
::       wymagane utworzenie nowego identyfikatora
         _USR.NEWLOGIN:=exec('pau_gen_login','users',_USR,0,_por)
      ?};
      _USR.NEEDUPD:='T'
   ?};

   {? _USR.EMAIL=''
::    uzupełnij adres
   || {? _USR.NEWLOGIN<>'' & exec('mail_ok','#email',_USR.NEWLOGIN)<>0
      || _USR.NEWEMAIL:=_USR.NEWLOGIN;
         _USR.NEEDUPD:='T'

      |? exec('mail_ok','#email',_USR.WEBLOGIN)<>0
      || _USR.NEWEMAIL:=_USR.WEBLOGIN;
         _USR.NEEDUPD:='T'
      ?}
   ?};

   {? _USR.NEEDUPD='T'
::    wymaga zmiany
   || _USR.put()
   ?};
   _loop:=_USR.f_next()
!};
_USR.f_clear();

:: popraw formę list jednostek
:: uzupełnij role użytkowników
_firma:=exec('ref_firma','ustawienia');
_usrol:=exec('buffer','#b_usrrol');
_usrol.FIRMA:=_firma;
_URC:=_ctx.cfg.TABLE;
_URC.prefix();
B_USRROL.cntx_psh();
B_USRROL.index('WER3');

_text:='%1\n%2\n%3'[
   'Zakończono przetwarzanie wybranych zapisów.'@,
   'Zakończono weryfikowanie identyfikacji użytkowników.'@,
   'Proszę czekać. Trwa przypisywanie ról użytkownikom...'@
];
_URC.f_set(,,'OWNER=-1');
_loop:=_USR.first();
_size:=_USR.size();
{! _cnt
|? _loop
|! progress(int(100*_cnt/_size),_text,FUN.TYT);
:: główny koszt, to ewentualne dodanie ról
   {? _USR.UD_SKL*','<>0
::    dodaj separujące spacje
   || _USR.UD_SKL:=gsub(_USR.UD_SKL,',',', ');
      _USR.put()
   ?};
   _usr:=null;
   {? USERS.seek(_USR.USERS,,1)
   || _usr:=USERS.ref()
   ?};
   B_USRROL.prefix(_firma,_usr);
:: nanieś role z konfiguracji
   _loop:=_URC.f_first();
   {!
   |? _loop
   |! _URC.OWNER:=#_USR.ref();
      _URC.DEFAULT:=_URC.CHOSEN;
      {? B_USRROL.find_key(_URC.NAME,)
::       rola już przypisana
      || _URC.CHOSEN:='T'
      |? _usr<>null & _URC.CHOSEN='T'
::       przypisz użytkownikowi rolę
      || _usrol.USERS:=_usr;
         _usrol.B_ROLE:=exec('ref','#b_role',_URC.NAME);
         exec('add','#b_usrrol',_usrol,,0)
      ?};
      _URC.add();
      _loop:=_URC.f_next()
   !};
   _loop:=_USR.next()
!};

:: porządki
prgs_clr();
_URC.f_clear();
USERS.cntx_pop();
B_USRROL.cntx_pop();

{? _por<>0 & _USR.find_tab(,'NEEDUPD',,'=','T')
|| FUN.emsg(
      'Znaleziono użytkowników z nieprawidłowym identyfikatorem lub adresem poczty elektronicznej.\n\n'
      'Dla użytkowników o niepoprawnych danych znacznik "%1" ustawiono na wartość "T".'@
      ['Do zmiany'@]
   )
?};

:: dodaj interfejs użytkownika
_wnd:=exec('pau__wnd','users',_USR,_ctx);
_USR.win_edit(_wnd.RED);
_USR.win_patt(_wnd.WZO);
_USR.win_sel(_wnd.GRP);

:: wyświetl przygotowane informacje
params_set('context',_ctx);
_USR.index(_cfg.key.OSOBA);
_USR.first();
_USR.select();
~~


\setWebUserActive
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Aktywuje/wyłącza konto internetowe.
::   WE: _a STRING - identyfikator dostępu internetowego
::       _b INTEGER - 0 wyłącz, 1 aktywuj
::       _c [INTEGER] - 0 tylko aktywuj, <>0 dodatkowo synchronizuj USERS
::       _d [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: 0 porażka, 1 sukces
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_uid:=_a;
_act:=_b;
_sch:=(var_pres('_c')=type_of(0) & _c<>0);
_por:=(var_pres('_d')=type_of(0) & _d<>0);

_result:=0;
:: dane użytkownika
_sys:=exec(,'__sysusr');
_usr:=_sys.getWebUser(_uid);
{? type_of(_usr)=type_of(~~)
|| _usr:=_sys.getUser(_uid)
?};
{? type_of(_usr)<>type_of(~~)
:: znaleziono użytkownika
|| {? +|_usr.Auth.Web.Login || _usr.Auth.Web.Active:=_act || _usr.Auth.Ldap.WebActive:=_act ?};
   _result:=_sys.putUser(_usr,1,0);
   {? _result<>0 & _sch<>0
   || _result:=exec('synchronize','users')
   ?}
?};
_result


\getPersonEmail
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Tworzy adres poczty elektronicznej współpracownika.
::   WE: _a [STRING] - nazwisko osoby
::       _b [STRING] - imię osoby
::       _c [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       _d [INTEGER] - tryb działania: 0 tworzenie nowego, 1 ponowne generowanie
::       [_e] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: hasło dostępu
::UWAGA: można zrealizować jako wtyczkę
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_naz:=STR.maz2nop(_a);
_pim:=STR.maz2nop(_b);
_TAB:=_c;
_mod:=_d;
_por:=(var_pres('_e')=type_of(0) & _e<>0);

_eml:='';
_loop:=1;

{! _cnt:=0..99
|? {? _loop
::    spróbuj użyć wtyczki do uzyskania adresu poczty internetowej
   || (_eml:=Plugin.run('USERS_T_EMAIL_001',_naz,_pim,_eml,_cnt))=''
   ?}
|! _eml:=form(-_eml);
   _exists:=0;
   _TAB.cntx_psh();
   _ref:={? _mod<>0 || _TAB.ref() || null ?};
   {? _TAB.find_tab(,'EMAIL',,'=',_eml) & _TAB.ref()<>_ref
   || _exists:=1
   ?};
   _TAB.cntx_pop();
   {? _exists=0
   || _loop:=0
   || _eml:=''
   ?}
!};

_eml


\getPersonWebLogin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Tworzy identyfikator użytkownika internetowego.
::   WE: _a [STRING] - nazwisko osoby
::       _b [STRING] - imię osoby
::       _c [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       _d [INTEGER] - tryb działania: 0 tworzenie nowego, 1 ponowne generowanie
::       [_e] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: identyfikator użytkownika
::UWAGA: można zrealizować jako wtyczkę
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_naz:=STR.maz2nop(_a);
_pim:=STR.maz2nop(_b);
_TAB:=_c;
_mod:=_d;
_por:=(var_pres('_e')=type_of(0) & _e<>0);

_sys:=exec(,'__sysusr');
_dom:={? _por<>0 || '@'+REF.FIRMA().EMAILDOM || '' ?};

_fnl:=3;
_lnl:=5;
_uid:=_uidLDAP:='';
{? +|_TAB.LDAPGUID & +|_TAB.LOGIN
|| _uidLDAP:=_TAB.LOGIN
?};
{! _cnt:=0..99
|!
:: spróbuj użyć wtyczki do uzyskania identyfikatora konta
   {? (_uid:=Plugin.run('USERS_T_WEBLOGIN_001',_naz,_pim,_uid,_cnt))=''
   || {? +|_uidLDAP
      || _uid:=_uidLDAP
      || {? _cnt=0
         || _uid:='%1%2%3%4'[_fnl+_pim,_lnl+_naz,'',_dom]
         || _uid:='%1%2%3%4'[_fnl+_pim,(_lnl-+$_cnt)+_naz,$_cnt,_dom]
         ?}
      ?}
   ?};
   _uid:=form(-_uid);
   _exists:=0;
   _TAB.cntx_psh();
   _ref:={? _mod<>0 || _TAB.ref() || null ?};
   {? _TAB.find_tab(,'WEBLOGIN',,'=',_uid) & _TAB.ref()<>_ref
   || _exists:=1
   || _usr:=_sys.getWebUser(_uid);
      {? type_of(_usr)=type_of(~~)
      || _usr:=_sys.getUser(_uid)
      ?};
      {? type_of(_usr)=type_of(~~)
      || _TAB.cntx_pop();
         return(_uid)
      || obj_del(_usr);
         _exists:=1
      ?}
   ?};
   _TAB.cntx_pop();
   {? _exists=0
   || return(_uid)
   |? +|_uidLDAP
   || return(_uidLDAP)
   || _uid:=''
   ?}
!};

_uid


\getPersonPassword
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Tworzy hasło dostępu do konta internetowego.
::   WE: _a [STRING] - nazwisko osoby
::       _b [STRING] - imię osoby
::       [_c] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: hasło dostępu
::UWAGA: można zrealizować jako wtyczkę
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_naz:=_a;
_pim:=_b;
_por:=(var_pres('_c')=type_of(0) & _c<>0);

{? _por<>0
:: licencja na dziedzinę POR
:: hasło dostępu jest zbędne
|| return('')
?};

:: spróbuj użyć wtyczki do uzyskania hasła dostępu
{? (_haslo:=Plugin.run('USERS_T_PASSWORD_001',_naz,_pim))=''
:: wygeneruj hasło domyślną metodą
|| -exec('gen_id','#id',8,0)
|| _haslo
?}


\web_passwd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.02]
:: OPIS: zmiana hasła - webterm
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_passwd();
1


\han_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Max [11.22]
:: OPIS: Podpowiadanie handlowca na podstawie loginu użytkownika
::  OLD: \han_blank/firma.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=null();
_kto:=(username()*'~'-1)+username();
HAN.clear();
HAN.index('KOD');
HAN.prefix(_kto,);
{? HAN.first()
|| _res:=HAN.ref()
|| HAN.prefix();
   HAN.blank();
   HAN.KOD:=_kto;
   HAN.NAZ:=userdata();
   {? HAN.add(1) || _res:=HAN.ref() ?}
?};
_res


\kontakty_konfiguracja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Wysyła mail z konfiguracją kontaktów do użytkownika
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~FUN.ask('Czy wysłać mail z konfiguracją kontaktów do użytkownika %1?'@[USERS.DANE])
||
   return()
?};
_from:='';
_sender:='';
_replyto:='';
_email:=USERS.EMAIL;
{? _email=''
||
   FUN.info('Brak adresu e-mail.'@);
   return()
?};
_url:=REF.FIRMA().URL-8;
_url_mwa:=REF.FIRMA().URL_MWA;
{? _url=''
||
   FUN.info('Do wysłania maila konfiguracyjnego wymagane jest wypełnienie adresu WebTerm dla firmy, '+
            'w której kontekście aktualnie pracuje użytkownik.'@);
   return()
?};
_inet:=inet_get('https://');
_url_exe:=_url+'/addons/'+_inet.url_encode('Outlook2MeritStart.exe');
_firma:=REF.FIRMA().SYMBOL;
_wybfi:={? FUN.ask('Czy użytkownik może wybrać firmę podczas przesyłania kontaktów?'@) || 'TAK' || 'NIE' ?};
_sub:='Mail konfiguracyjny dodatku Outlook Merit';
_bodyt:=
   'To jest mail konfiguracyjny systemu Merit Kontakty'
   '\nAdres: %1'
   '\nFirma: %2'
   '\nWybór firmy: %3'
   '\nInstalator: %4'[_url_mwa,_firma,_wybfi,_url_exe];
_bodyh:=
   '<p>Adres: %1'
   '<br>Firma: %2'
   '<br>Wybór firmy: %3'
   '<h1>Dodatek MS Outlook: [[BODY_BUTTON(%4,Dodatek MS Outlook,Dodatek MS Outlook)]]<h1>'
   ''[_url_mwa,_firma,_wybfi,_url_exe];
::MSO.cntx_psh();
::MSO.index('FIRMA');
::MSO.prefix('N',REF.FIRMA);
::_attach_exist:=0;
::{? MSO.last()
::|| _attach_exist:=1
::|| MSO.prefix('T');
::   _attach_exist:=MSO.last()
::?};
::{? _attach_exist
::||
::   _attach:=tab_tmp(1
::      ,'PTH','STRING[1]',''
::      ,'BLOB','BLOBRAW','');
::   _blob:=fopen(MSO.MSO_P,'r',,,1);
::   _name:=MSO.bl_info('MSO_P','NAME');
::   {? _blob.is_open()
::   ||
::      _attach.blank(1);
::      {? _attach.add() || _attach.bl_put('BLOB',_blob,,,_name) ?}
::   ?}
::?};
::MSO.cntx_pop();
::{? _attach_exist=0
::||
::   FUN.info('Brak dodatku do MS Outlook.'@);
::   return()
::?};

_args:=exec('add_email_a','#mailbox');
_args.FROM:=_from;
_args.SENDER:=_sender;
_args.REPLYTO:=_replyto;
_args.RCV:=exec('email_rcv','!zpr_snd_doku',_email);
_args.SUB:=_sub;
_args.BODYT:=_bodyt;
_args.BODYH:=_bodyh;
_args.TEMPLATE:='template_info.htm';
::_args.ATTACH:=_attach;
_args.SOURCE:=$USERS.ref();
_result:=exec('add_email','#mailbox',_args)


\portal_on
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Ustawia współpracę z portalem, o ile brak to zakłada użytkownika portalu
::----------------------------------------------------------------------------------------------------------------------
_selected:=(USERS.sel_size()>0);

{? ~_selected
|| KOMM.init(,,'Synchronizacja kont użytkowników na portalu'@);
   exec('czytaj_conf','portal_engine')
?};

{? ~_selected
|| KOMM.init(,,'Włączanie kont użytkowników na portalu'@);
   exec('portal_sync','users')
?};

{? exec('is_active','portal_engine',1)=0
|| ~~
|? USERS.AKT='N'
|| KOMM.msg(
      'Aby włączyć konto użytkownika %1 (%2) na portalu, musi być on aktywny.'@[USERS.DANE,USERS.KOD],
      1
   )
|? exec('FindInSet','#table','USERSF','UNIK',USERS.ref(),REF.FIRMA,"USERSF.PORTAL2",,,'N')='T'
|| KOMM.msg(
      'Użytkownik %1 (%2) ma już skonfigurowane konto na portalu'@[USERS.DANE,USERS.KOD],
      0
   )
|? USERS.PORTAL='N' | USERS.WEBLOGIN=''
|| KOMM.msg(
      'Aby włączyć konto użytkownika %1 (%2) na portalu, należy włączyć logowanie webowe.'@[USERS.DANE,USERS.KOD],
      0
   )
|? exec('mail_ok','#email',USERS.WEBLOGIN)=0
|| KOMM.msg(
      'Aby włączyć konto użytkownika %1 (%2) na portalu, login webowy musi być poprawnym adresem e-mail.'@
      [USERS.DANE,USERS.KOD],
      0
   )
|| {? _selected |
      FUN.ask(
         'Czy włączyć konto użytkownika %1 (%2) na portalu?'@[USERS.DANE,USERS.KOD]+
         '\n\n'+
         exec('portal_config_comment','users')
      )
   || _args:=obj_new('uidref','ext','action');
      _args.uidref:=USERS.uidref();
      _args.ext:='';
      _args.action:='on';
      _log_level:=-1;
      _result:=exec('run_mwac','sync_mwa','PORTAL_CFG','sl_TenantUserModify',0,_log_level,_args);
      {? type_of(_result)=type_of(0) & _result=0
      || KOMM.error('Nie włączono konta użytkownika %1 (%2) na portalu.'@[USERS.DANE,USERS.KOD],0)
      || exec('put_usersf','users',,,,,,,,,,,'T');
::            FIRMA.cntx_psh();
::            {? XINFO.POR_CONF='W'
::            || FIRMA.index('SYMBOL');
::               FIRMA.prefix();
::               {? FIRMA.first()
::               || {!
::                  |? {? FIRMA.A='T'
::                     || _args.ext:=FIRMA.uidref();
::                        _result:=exec('run_mwac','sync_mwa',
::                           'PORTAL_CFG','csl_TenantUserCompanyModify',0,_log_level,_args)
::                     ?};
::                     FIRMA.next()
::                  !}
::               ?}
::            || FIRMA.prefix();
::               {? FIRMA.seek(REF.FIRMA)
::               || _args.ext:=FIRMA.uidref();
::                  _result:=exec('run_mwac','sync_mwa',
::                    'PORTAL_CFG','csl_TenantUserCompanyModify',0,exec('log_level','users'),_args)
::               ?}
::            ?};
::            FIRMA.cntx_pop();
         KOMM.msg('Włączono konto użytkownika %1 (%2) na portalu.'@[USERS.DANE,USERS.KOD],0)
      ?}
   ?}
?};

{? ~_selected
|| KOMM.select()
?}


\portal_on_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Ustawia współpracę z portalem - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj_conf','portal_engine');
{? exec('is_active','portal_engine',1) &
   FUN.ask(
      'Czy włączyć konta zaznaczonych użytkowników na portalu?'@+
      '\n\n'+
      exec('portal_config_comment','users')
   )
|| KOMM.init(,,'Synchronizacja kont użytkowników na portalu'@);
   exec('portal_sync','users');
   KOMM.init(,,'Włączanie kont użytkowników na portalu'@);
   1
|| 0
?}


\portal_on_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Ustawia współpracę z portalem - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\portal_off
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wyłącza współpracę z portalem, użytkownik pozostaje powiązany
::----------------------------------------------------------------------------------------------------------------------
_selected:=(USERS.sel_size()>0);

{? ~_selected
|| KOMM.init(,,'Synchronizacja kont użytkowników na portalu'@);
   exec('czytaj_conf','portal_engine')
?};

{? ~_selected
|| KOMM.init(,,'Wyłączanie kont użytkowników na portalu'@);
   exec('portal_sync','users')
?};

{? exec('is_active','portal_engine',1)
|| _tab:=exec('get_id','#sync_id','PORTAL_USERS_ID',USERS.uidref());
   {? var_pres('_tab')>100 & _tab.first()
   || {? exec('portal_firma_is','users')
      || KOMM.msg('Użytkownik ma skonfigurowany dostęp do firm, nie można wyłączyć dostępu.'@,0)
      |? _selected | FUN.ask('Czy wyłączyć konto użytkownika %1 (%2) na portalu?'@[USERS.DANE,USERS.KOD])
      || _args:=obj_new('uidref','action');
         _args.uidref:=USERS.uidref();
         _args.action:='off';
         _log_level:=-1;
         _result:=exec('run_mwac','sync_mwa','PORTAL_CFG','sl_TenantUserModify',0,_log_level,_args);
         {? type_of(_result)=type_of(0) & _result=0
         || KOMM.error('Nie udało się wyłączyć konta użytkownika %1 (%2) na portalu.'@[USERS.DANE,USERS.KOD],0)
         || exec('put_usersf','users',,,,,,,,,,,'X');
::          _result:=exec('run_mwac','sync_mwa',
::             'PORTAL_CFG','csl_TenantUserCompanyDelete',0,_log_level,USERS.uidref());
            KOMM.msg('Wyłączono konto użytkownika %1 (%2) na portalu.'@[USERS.DANE,USERS.KOD],0)
         ?}
      ?}
   || exec('put_usersf','users',,,,,,,,,,,'N');
      KOMM.msg(
         'Użytkownik %1 (%2) nie ma skonfigurowanego konta na portalu.'@[USERS.DANE,USERS.KOD],
         0
      )
   ?}
?};

{? ~_selected
|| KOMM.select()
?}


\portal_off_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wyłącza współpracę z portalem - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj_conf','portal_engine');
{? exec('is_active','portal_engine',1) &
   FUN.ask(
      'Czy wyłączyć konta zaznaczonych użytkowników na portalu?'@+
      '\n\n'+
      exec('portal_config_comment','users')
   )
|| KOMM.init(,,'Synchronizacja kont użytkowników na portalu'@);
   exec('portal_sync','users');
   KOMM.init(,,'Wyłączanie kont użytkowników na portalu'@);
   1
|| 0
?}


\portal_off_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wyłącza współpracę z portalem - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\portal_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Usuwa użytkownika portalu
::----------------------------------------------------------------------------------------------------------------------
_selected:=(USERS.sel_size()>0);

{? ~_selected
|| KOMM.init(,,'Usuwanie kont użytkowników na portalu'@);
   exec('czytaj_conf','portal_engine')
?};

{? ~_selected
|| exec('portal_sync','users')
?};

{? exec('is_active','portal_engine',1)
|| _tab:=exec('get_id','#sync_id','PORTAL_USERS_ID',USERS.uidref());
   {? var_pres('_tab')>100 & _tab.first()
   || {? exec('portal_firma_is','users')
      || KOMM.msg('Użytkownik ma skonfigurowany dostęp do firm, nie można usunąć dostępu.'@,0)
      |? _selected |
         FUN.ask(
            'Czy usunąć konto użytkownika %1 (%2) na portalu?\n\n'
            'Uwaga: Konto zostanie usunięte tylko wtedy, gdy nie będzie\n'
            'z nim powiązanych żadnych danych na portalu.'@[USERS.DANE,USERS.KOD]
         )
      || _log_level:=-1;
         _result:=exec('run_mwac','sync_mwa','PORTAL_CFG','sl_TenantUserDelete',0,_log_level,USERS.uidref());
         {? type_of(_result)=type_of(0) & _result=0
         || KOMM.error('Nie usunięto konta użytkownika %1 (%2) na portalu.'@[USERS.DANE,USERS.KOD],0)
         || exec('put_usersf','users',,,,,,,,,,,'N');
::            _result:=exec('run_mwac','sync_mwa',
::            'PORTAL_CFG','csl_TenantUserCompanyDelete',0,_log_level,USERS.uidref());
            KOMM.msg('Usunięto konto użytkownika %1 (%2) na portalu.'@[USERS.DANE,USERS.KOD],0)
         ?}
      || _selected:=1
      ?}
   || exec('put_usersf','users',,,,,,,,,,,'N');
      KOMM.msg(
         'Użytkownik %1 (%2) nie ma skonfigurowanego konta na portalu.'@[USERS.DANE,USERS.KOD],
         0
      )
   ?}
?};

{? ~_selected
|| KOMM.select()
?}


\portal_del_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Usuwa użytkowników portalu - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj_conf','portal_engine');
{? exec('is_active','portal_engine',1) &
   FUN.ask(
      'Czy usunąć konta zaznaczonych użytkowników na portalu?\n\n'
      'Uwaga: Konta zostaną usunięte tylko wtedy, gdy nie będzie\n'
      'z nimi powiązanych żadnych danych na portalu.'@
   )
|| exec('portal_sync','users');
   KOMM.init(,,'Usuwanie kont użytkowników na portalu'@);
   1
|| 0
?}


\portal_del_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Usuwa użytkowników portalu - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\portal_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Konfiguracja użytkownika portalowego - wskazanie firm do których ma dostęp
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj_conf','portal_engine');
{? exec('is_active','portal_engine',1)
||
   _ref_sfirma:=REF.S_FIRMA;

:: W konfiguracji wielofirmowej zbieramy wszystkie firmy (obecnie nie jest używana)
   {? XINFO.POR_CONF='W'
   || _wer:=USERSF.mk_sel(
         'Dostęp do firm w portalu dla użytkownika: %1 (%2)'@[USERS.KOD,USERS.WEBLOGIN],,,'#portalconfig',,,10,,'U'
      );
      USERSF.win_fld(_wer,,'FIRMA','SYMBOL',,,,,'Firma'@);
      USERSF.win_fld(_wer,,'FIRMA','OPIS',,,,,'');
      USERSF.win_fld(_wer,,'PORTAL2',,,,,,,,,2,,"'T'","'N'");
      _formula:="exec('portal_firma_on','users')";
      USERSF.win_act(_wer,,'Formuła','Włącz dostęp'@,,,_formula,,,,,,'W');
      _formula:="exec('portal_firma_off','users')";
      USERSF.win_act(_wer,,'Formuła','W&yłącz dostęp'@,,,_formula,,,,,,'Y');
      _formula:="
         {? _a
         || _grayed:=':';
            FIRMA.cntx_psh();
            {? USERSF.FIRMA().EWID<>'T' || _grayed:='WY'+_grayed
            |? USERSF.PORTAL2='T' || _grayed:='W'+_grayed
            || _grayed:='Y'+_grayed
            ?};
            FIRMA.cntx_pop();
            USERSF.actions_grayed(cur_win(1,1),_grayed)
         ?};
         ~~
      ";
      USERSF.win_act(_wer,,'Rekord',,,,_formula);
      USERSF.win_btn(_wer,'text=%1,panel=right'['Włącz dostęp'@],'menu:W');
      USERSF.win_btn(_wer,'text=%1,panel=right'['W&yłącz dostęp'@],'menu:Y');
      USERSF.win_sel(_wer);

      FIRMA.cntx_psh();
      FIRMA.index('OPIS');
      FIRMA.prefix();
      {? FIRMA.first()
      || {!
         |? {? FIRMA.A='T' & FIRMA.EWID='T'
            || REF.S_FIRMA:=FIRMA.ref();
               exec('get_usersf','users')
            ?};
            FIRMA.next()
         !}
      ?};
      FIRMA.cntx_pop();

      USERSF.index('USER');
      USERSF.prefix(USERS.ref());

      USERSF.select()

:: W konfiguracji jednofirmowej obsługa firmy bieżącej
   || REF.S_FIRMA:=REF.FIRMA;
      {? exec('get_usersf','users')
      || _choice:=FUN.choice(
            'Ustawić dostęp do portalu w firmie %1?'@[REF.S_FIRMA().SYMBOL]+
            '\n\n'+exec('portal_reconfig_comment','users'),
            {? USERSF.PORTAL2='T' || 1 || 2 ?},'Włącz dostęp'@,'W&yłącz dostęp'@,'Odśwież dane'@
         );
         {? _choice>0
         || {? _choice=1
            || exec('portal_firma_on','users')
            |? _choice=2
            || exec('portal_firma_off','users')
            |? _choice=3
            || exec('portal_refresh','users')
            ?}
         ?}
      ?}
   ?};

   REF.S_FIRMA:=_ref_sfirma
?};
~~


\portal_firma_is
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Sprawdza, czy użytkownik ma skonfigurowane konto w firmie na portalu
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
USERSF.cntx_psh();
USERSF.index('USER');
USERSF.prefix(USERS.ref());
{? USERSF.first()
|| {!
   |? {? USERSF.PORTAL2='T' || _result:=1 ?};
      USERSF.next()
   !}
?};
USERSF.cntx_pop();
_result


\portal_firma_on
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Włącza dostęp użytkownika w firmie na portalu
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
{? USERSF.FIRMA().EWID<>'T'
|| FUN.info('Firma %1 nie jest ewidencyjna.'@[USERSF.FIRMA().SYMBOL]);
   FIRMA.cntx_pop();
   return(~~)
?};
FIRMA.cntx_pop();
KOMM.init(,,'Włączenie'@);

_args:=obj_new('uidref');
_args.uidref:=USERSF.uidref();

_log_level:=-1;

_result:=exec('run_mwac','sync_mwa',
   'PORTAL_CFG','csl_TenantUserCompanyModify',0,_log_level,_args
);

{? type_of(_result)=type_of(0) & _result=0
|| FUN.info('Nie włączono firmy.'@)
|| USERSF.PORTAL2:='T';
   USERSF.put()
?};

::KOMM.select();
~~


\portal_firma_off
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wyłącza dostęp użytkownika w firmie na portalu
::----------------------------------------------------------------------------------------------------------------------
KOMM.init(,,'Wyłączanie'@);

_log_level:=-1;

_result:=exec('run_mwac','sync_mwa',
   'PORTAL_CFG','csl_TenantUserCompanyDelete',0,_log_level,USERSF.uidref()
);

{? type_of(_result)=type_of(0) & _result=0
|| FUN.info('Nie wyłączono firmy.'@)
|| USERSF.PORTAL2:='N';
   USERSF.put()
?};

::KOMM.select();
~~


\zmien_jezyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Zmiana języka użytkownika
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_Tab:=lang_language_list();
_Tab.blank();
_Tab.add();
_Tab.find_key(USERS.LANG);
_wer:=_Tab.mk_sel('Języki'@,,0,'users_lang');
_Tab.win_fld(_wer,,'ID',,,2,,,'Identyfikator'@);
_Tab.win_fld(_wer,,'DESCR',,,50,,,'Opis'@);
_Tab.win_act(_wer,,'Formuła','Wybierz'@,,,"sel_exit()",,1);
_Tab.win_sel(_wer);
{? _Tab.select(,1,1)
||
   USERS.LANG:=_Tab.ID;
   USERS.put()
?}


\unlock_account
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja administracyjne odblokowuje konto uzytkownika
::   WE: _a - sposób uwierzytelnienia: 0 - 'Hasło', 1 - 'Webowe'
::----------------------------------------------------------------------------------------------------------------------
:: Pobieram obiekt systemowy do obsługi SYSSUSER
_sysobj:=exec(, '__sysusr', 1);
_type:=_a;
SYSSUSER.cntx_psh();
_userid:=~~;
{? USERS.GUID<>''
|| _userid:=USERS.GUID
|| _userid:=USERS.KOD
?};
_sysusr:=_sysobj.getUser(_userid);
{? var_pres('_sysusr')>100
||
   _auth:={? _type=1
          || _sysusr.Auth.Web
          || _sysusr.Auth.Pass
          ?};

    {? _auth.Active=0
    || _txt:={? _type=1
             || 'Uwierzytelnianie webowe nie jest aktywne dla użytkownika \'%1\'.'@[USERS.KOD]
             || 'Uwierzytelnianie hasłem nie jest aktywne dla użytkownika \'%1\'.'@[USERS.KOD]
             ?};
       FUN.info(_txt);
       SYSSUSER.cntx_pop();
       return()
    |? _auth.BadLogins=0
    || _txt:={? _type=1
             || 'Użytkownik webowy \'%1\' nie ma zdefiniowanej maksymalnej ilości błędnych logowań '
                ' dla uwierzytelniania webowego.'@[_auth.Login]
             || 'Użytkownik \'%1\' nie ma zdefiniowanej maksymalnej ilości błędnych logowań '
                'dla uwierzytelniania standardowego (hasłem).'@[USERS.KOD]
             ?};
       FUN.info(_txt);
       SYSSUSER.cntx_pop();
       return()
    ?};

    {? _auth.AdminUnlock
    || _txt:={? _type=1
             || 'Konto użytkownika jest aktualnie odblokowane.\n'
                'Czy chcesz zablokować konto użytkownika webowego·\'%1\'?'@[_auth.Login]
             || 'Konto użytkownika jest aktualnie odblokowane.\n'
                'Czy chcesz zablokować konto użytkownika \'%1\'?'@[USERS.KOD]
             ?}
    || _txt:={? _type=1
             || 'Po odblokowaniu konta użytkownik będzie mógł zalogować się ponownie.\n'
                'Czy chcesz odblokować konto użytkownika webowego \'%1\'?'@[_auth.Login]
             || 'Po odblokowaniu konta użytkownik będzie mógł zalogować się ponownie.\n'
                'Czy chcesz odblokować konto użytkownika \'%1\'?'@[USERS.KOD]
             ?}
    ?};

    {? FUN.ask(_txt)
    || _auth.AdminUnlock:=~_auth.AdminUnlock;
       _sysobj.putUser(_sysusr, 1)
    ?}
?};
SYSSUSER.cntx_pop();
~~


\ldap_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.42]
:: OPIS: Import użytkowników z Active Directory
::----------------------------------------------------------------------------------------------------------------------
_su := exec(, '__sysusr');

{? _su.__isWebTerm('XPass.importAdUsers') || return(0) ?};
{? ~_su.XPass.__isValid() || return(0) ?};
{? ~_su.__isActionAvailable('add', _su.blankUser()) || return(0) ?};

_su.XPass.__managerMode('begin');

params_set('THIS', _su.XPass);
_su.XPass.AdUsers.Table.win_sel(_su.XPass.AdUsers.Win.Select.Import);
_xx:=_su.XPass.AdUsers.Table.select();

_su.XPass.__managerMode('end');

exec('synchronize','users');

~~


\_osoba_unique
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła sprawdza unikalność osoby. Dokładniej: sprawdza, czy wskazana osoba jest związana wyłącznie z jednym
::       aktywnym użytkownikiem.
::   WE:  _a  [REFERENCE] - Wskazanie osoby.
::       [_b] [REFERENCE] - Wskazanie poprawianego rekordu tabeli USERS lub null() dla rekordu dołączanego
::   WY: 1 - Osoba unikalna;
::       0 - Brak unikalności lub błędny parametr wywołania.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=OSOBA
|| _osoba:=_a
|| return('')
?};
_users:={? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=USERS || _b || null() ?};

_ret:=1;
USERS.cntx_psh();
USERS.index('OSOBA');
USERS.prefix(_osoba);
{? USERS.first()
|| {!
   |? {? USERS.ref()<>_users
      || _ret:=0
      || USERS.next()
      ?}
   !}
?};
USERS.cntx_pop();
_ret


\ip_unique
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Formuła sprawdza unikalność identyfikatora pracownika. Dokładniej: sprawdza, czy wskazany identyfikator
::       jest związana wyłącznie z jednym aktywnym użytkownikiem.
::   WE:  _a  [STRING] - Identyfikator pracownika (kod kreskowy).
::       [_b] [REFERENCE] - Wskazanie poprawianego rekordu tabeli USERS lub null() dla rekordu dołączanego
::   WY: 1 - Identyfikator unikalny;
::       0 - Brak unikalności.
::----------------------------------------------------------------------------------------------------------------------
_ip:={? var_pres('_a')=type_of('') || _a || return(1) ?};
_users:={? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=USERS || _b || null() ?};

_ret:=1;
USERS.cntx_psh();
USERS.index('IP');
USERS.prefix(_ip,);
{? USERS.first()
|| {!
   |? {? USERS.ref()<>_users
      || _ret:=0
      || USERS.next()
      ?}
   !}
?};
USERS.cntx_pop();
_ret


\clean_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Usuwa wszystkich użytkowników i uprawnienia procesowe (do ról, czynności)
::   WE: [_a] - FIRMA.ref - firma w której usuwać, jeżeli nie podane to wartosć bieżąca z REF.FIRMA
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_firma:=null();
{? var_pres('_a')=type_of(FIRMA.ref())
|| _firma:=_a
|| _firma:=REF.FIRMA
?};

USERS.cntx_psh();

_result:=0;
_msg:='Czy usunąć wszystkich użytkowników w firmie: %1?\n\n'
      'Usuwane są także:\n\n'
      '1. Uprawnienia ról do czynności\n'
      '2. Uprawnienia użytkowników do ról\n'
      '3. Historia uprawnień ról\n'
      '4. Role\n'
      '5. Uniwersalne parametry (użytkowników)'@[exec('record','#to_string',_firma)];
_can_continue:=FUN.ask(_msg);

{? _can_continue>0
||
   {? _firma=null()
   || FUN.emsg('Nie podano firmy dla której przeprowadzić czyszczenie'@);
      _can_continue:=0
   ?};

   {? OPERATOR.USER().KOD<>'admin'
   || FUN.emsg('Tylko admin może używać tej funkcji.'@);
      _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _msg:='Na pewno? Akcja jest nieodwracalna.';
   _can_continue:=FUN.ask(_msg)
?};

{? _can_continue>0
||

   KOMM.init(250,,'Czyszczenie użytkowników i uprawnień do ról i czynności'@);
   do();
   B_USRROL.cntx_psh();
   B_ACTROL.cntx_psh();
   USERS.cntx_psh();
   B_ROLE.cntx_psh();

   _title:='Czyszczenie użytkowników'@;
   progress(,'Usuwanie powiązań: role->czynności...'@,_title,1);
   B_ACTROL.index('UNIK');
   B_ACTROL.prefix(_firma);
   {? B_ACTROL.first()
   || {!
      |? _can_continue:=exec('actrol_del_core','#b_role',B_ACTROL.ref());
         B_ACTROL.first() & _can_continue>0
      !}
   ?};

   {? _can_continue>0
   || progress(,'Usuwanie powiązań: użytkownicy->role...'@,_title,1);
      B_USRROL.index('UNIK');
      B_USRROL.prefix(_firma);
      {? B_USRROL.first()
      || {!
         |? _can_continue:=exec('delete','#b_usrrol',B_USRROL.ref(),2);
            B_USRROL.first() & _can_continue>0
         !}
      ?}
   ?};

   {? _can_continue>0
   || progress(,'Usuwanie użytkowników...'@,_title,1);
      USERS.index('USR_GUID');
      USERS.prefix();
      {? USERS.first()
      || {!
         |? _next:=0;
            _ref_nxt:=null();
            USERS.cntx_psh();
            {? USERS.next()
            || _ref_nxt:=USERS.ref()
            ?};
            USERS.cntx_pop();

            exec('delete_action','users',2);

            {? _ref_nxt<>null()
            || _next:=USERS.seek(_ref_nxt)
            ?};
            _next>0 & _can_continue>0
         !}
      ?}
   ?};

   {? _can_continue>0
   || progress(,'Usuwanie historii uprawnień...'@,_title,1);
      _can_continue:=exec('clear_history','#b_history',_firma)
   ?};

   {? _can_continue>0
   || B_ROLE.index('UNIK');
      B_ROLE.prefix(_firma);
      progress(,'Usuwanie ról...'@,_title,1);
      {? B_ROLE.first()
      || {!
         |? _next:=0;
            _ref_nxt:=null();
            B_ROLE.cntx_psh();
            {? B_ROLE.next()
            || _ref_nxt:=B_ROLE.ref()
            ?};
            B_ROLE.cntx_pop();

            exec('delete_act','#b_role',2);

            {? _ref_nxt<>null()
            || _next:=B_ROLE.seek(_ref_nxt)
            ?};
            _next>0 & _can_continue>0
         !}
      ?}
   ?};

   B_ROLE.cntx_pop();
   USERS.cntx_pop();
   B_ACTROL.cntx_pop();
   B_USRROL.cntx_pop();

   {? _can_continue<=0
   || undo()
   ?};
   end();

   prgs_clr();

   KOMM.select();

   {? _can_continue=0
   || FUN.emsg('Czyszczenie zakończone niepowodzeniem.'@)
   ?};
   exec('synchronize','users');
   ~~
?};

{? _can_continue>0
|| _result:=1
?};
USERS.cntx_pop();
USERS.get();
_result


\osoba2weblogin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Formuła udostępnia weblogin użytkownika związanego z osobą.
::   WE:  _a  [REFERENCE] - Wskazanie osoby.
::       [_b] [NUMBER]    - Czy uwzględniać użytkowników nieaktywnych:
::                          0 - Nie, analizowani będą tylko użytkownicy aktywni. Wartość domyślna.
::                          1 - Tak, znaleziony zostanie nawet nieaktywny uzytkownik.
::   WY: _ret [STRING] - '' lub weblogin użytkownika.
::----------------------------------------------------------------------------------------------------------------------
_ret:='';
{? var_pres('_a')<>7
|| return(_ret)
?};
_all:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_userRef:=exec('osoba2user','users',_a,_all);
USERS.cntx_psh();
{? USERS.seek(_userRef,,1)
|| _ret:=USERS.WEBLOGIN
?};
USERS.cntx_pop();

_ret


\portal_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zarządzanie użytkownikami "portalowymi"
::----------------------------------------------------------------------------------------------------------------------
:: Ustalenie treści linku
_params:=params_get();
{? type_of(_params)>0 & var_pres('LINK',_params)=type_of('')
|| _link:=_params.LINK
|| _link:=''
?};

exec('czytaj','#stalesys',,XINFO,'POR_CONF');
_por_conf:=XINFO.POR_CONF;
_firma:={? _por_conf='J' || REF.FIRMA || null() ?};

:: Czy pokazywać widok rozszerzony z blokadami?
_ext_blok:=0;

USERS.cntx_psh(); USERSF.cntx_psh();

_wer:=exec('portal_usersf_wer','users');

_env:=obj_new('PORTALL_INFO','PORTALU_CFG');
_env.PORTALU_CFG:=obj_new('act','send');
_env.PORTALU_CFG.act:=0;
_env.PORTALU_CFG.send:=0;
_env.PORTALL_INFO:=obj_new('tab','red');
_tab:=_env.PORTALL_INFO.tab:=exec('portall_info_tab','portal_engine');
_red:=_env.PORTALL_INFO.red:=exec('portall_info_red','portal_engine',_tab);
exec('portall_info_load','portal_engine',_tab,_firma);

_grp:=USERSF.grp_make('Użytkownicy portalowi'@,
   "grp_edisp(params_get().env.PORTALL_INFO.tab,params_get().env.PORTALL_INFO.red)",'userportalg',,,,,'html_maximized'
);
_after_refresh:="
   _tab:=params_get().env.PORTALL_INFO.tab;
   _red:=params_get().env.PORTALL_INFO.red;
   exec('portall_info_load','portal_engine',_tab,REF.FIRMA);
   grp_edisp(_tab,_red)
";
USERSF.grp_sel(_grp,,_wer,,_after_refresh,,,,,,,,'maximized');
::USERSF.grp_splt(_grp,,'horizontal','licencje',20);
USERSF.grp_splt(_grp,,'vertical','licencje',',80%');
USERSF.grp_edit(_grp,_tab,_red);
USERSF.win_sel(_grp);

USERSF.index('PORTAL');
USERSF.prefix(_firma,'T');

params_set('env',_env);

{? _link<>''
|| {? USERSF.seek(_link)
   || USERSF.select(,1,10)
   || FUN.info('Użytkownik o identyfikatorze %1 nie został odnaleziony.'@[_link]);
      break()
   ?}
|| USERSF.select()
?};

USERS.cntx_pop(); USERSF.cntx_pop();
~~


\portal_lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_04]
:: OPIS: Blokuje/odblokowuje dostęp pracownika/kierownika/obiegi
::   WE: _a - licencja 'prac', 'kier', 'seod'
::       _b - 1 - blokuje, 0 - odblokuje
::----------------------------------------------------------------------------------------------------------------------
_lic:=_a;
_lock:=_b;

($('USERS.PX%1'[~-_lic]))():=_lock;
USERS.put();
~~


\portal_color
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Kolorowanie użytkowników portalowych
::----------------------------------------------------------------------------------------------------------------------
USERSF.USERS();
{? USERSF.BLK_SYNC='T'
|| 'USERS#02#02'
|? USERS.PMPRAC<>USERS.P2PRAC | USERS.PMKIER<>USERS.P2KIER | USERS.PMSEOD<>USERS.P2SEOD
|| 'USERS#02#01'
|| ''
?}


\refresh_users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Odświeża tabelę uprawnień użytkowników do funkcjonalności portalowych
::----------------------------------------------------------------------------------------------------------------------
exec('run_mwac','sync_mwa','PORTAL_CFG','rgt_OprGrupyTenantUserGet',1);
~~


\portal_sync
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Synchronizuje status użytkowników z portalu
::   WE: [_a] - opcja wywołania:
::            [0] - tylko pobranie danych USERS,
::            1 - wysyłanie zawartości tabeli P w celu wymuszenia założenia/modyfikacji kont użytkowników
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _option:=_a || _option:=0 ?};

USERS.cntx_psh(); USERSF.cntx_psh();

_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='ZUI_CLI_AGER';
_args.AKCJA:='UruchomBezdialogowo';
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

{? _option=1
|| exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'PD','PORTAL');
   exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'TAB','P');
   exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'TYPE',exec('mwac_type_send','synchro'));
   exec('mp_run','#b__box',_args)
?};

exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'PD','PORTAL_CFG');
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'TAB','USERS');
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'TYPE',exec('mwac_type_receive','synchro'));
exec('mp_run','#b__box',_args);

USERS.cntx_pop(); USERSF.cntx_pop();
~~


\portal_enable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Włącza logowanie użytkownika na portalu
::----------------------------------------------------------------------------------------------------------------------
_selected:=(USERSF.sel_size()>0);

{? ~_selected
|| KOMM.init(,,'Synchronizacja kont użytkowników na portalu'@);
   exec('czytaj_conf','portal_engine')
?};

{? ~_selected
|| KOMM.init(,,'Włączanie logowania użytkowników na portalu'@);
   exec('portal_sync','users')
?};

{? exec('is_active','portal_engine',1)
||
:: Podczytanie rekordu użytkownika
   USERSF.USERS();
   _tab:=exec('get_id','#sync_id','PORTAL_USERS_ID',USERS.uidref());
   {? var_pres('_tab')>100 & _tab.first()
   || {? _selected |
         FUN.ask(
            'Czy włączyć logowanie użytkownika %1 (%2) na portalu?'@
            [USERS.DANE,USERS.KOD]
         )
      || _args:=obj_new('uidref','action');
         _args.uidref:=USERS.uidref();
         _args.action:='enable';
         _log_level:=-1;
         _result:=exec('run_mwac','sync_mwa','PORTAL_CFG','sl_TenantUserModify',0,_log_level,_args);
         {? type_of(_result)=type_of(0) & _result=0
         || KOMM.error(
               'Nie udało się włączyć logowania użytkownika %1 (%2) na portalu.'@
               [USERS.DANE,USERS.KOD],0
            )
         || USERSF.PORTAL2E:='T';
            {? USERSF.put()
            || KOMM.msg(
                  'Włączono logowanie użytkownika %1 (%2) na portalu.'@
                  [USERS.DANE,USERS.KOD],0
               )
            ?}
         ?}
      ?}
   || USERSF.cntx_psh();
      USERSF.prefix();
      USERSF.PORTAL2:='N';
      USERSF.PORTAL2E:='N';
      USERSF.put();
      USERSF.cntx_pop();
      KOMM.msg(
         'Użytkownik %1 (%2) nie ma skonfigurowanego konta na portalu.'@
         [USERS.DANE,USERS.KOD],0
      )
   ?}
?};

{? ~_selected
|| KOMM.select()
?}


\portal_enable_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Włącza logowanie użytkownika na portalu - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj_conf','portal_engine');
{? exec('is_active','portal_engine',1) & FUN.ask('Czy włączyć logowanie zaznaczonych użytkowników na portalu?'@)
|| KOMM.init(,,'Synchronizacja kont użytkowników na portalu'@);
   exec('portal_sync','users');
   KOMM.init(,,'Włączanie logowania użytkowników na portalu'@);
   1
|| 0
?}


\portal_enable_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Włącza logowanie użytkownika na portalu - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\portal_disable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Wyłącza logowanie użytkownika na portalu
::----------------------------------------------------------------------------------------------------------------------
_selected:=(USERSF.sel_size()>0);

{? ~_selected
|| KOMM.init(,,'Synchronizacja kont użytkowników na portalu'@);
   exec('czytaj_conf','portal_engine')
?};

{? ~_selected
|| KOMM.init(,,'Wyłączanie logowania użytkowników na portalu'@);
   exec('portal_sync','users')
?};

{? exec('is_active','portal_engine',1)
||
:: Podczaytanie rekordu użytkownika
   USERSF.USERS();
   _tab:=exec('get_id','#sync_id','PORTAL_USERS_ID',USERS.uidref());
   {? var_pres('_tab')>100 & _tab.first()
   || {? _selected |
         FUN.ask(
            'Czy wyłączyć logowanie użytkownika %1 (%2) na portalu?'@
            [USERS.DANE,USERS.KOD]
         )
      || _args:=obj_new('uidref','action');
         _args.uidref:=USERS.uidref();
         _args.action:='disable';
         _log_level:=-1;
         _result:=exec('run_mwac','sync_mwa','PORTAL_CFG','sl_TenantUserModify',0,_log_level,_args);
         {? type_of(_result)=type_of(0) & _result=0
         || KOMM.error(
               'Nie udało się wyłączyć logowania użytkownika %1 (%2) na portalu.'@
               [USERS.DANE,USERS.KOD],0
            )
         || USERSF.PORTAL2E:='N';
            {? USERSF.put()
            || KOMM.msg(
                  'Wyłączono logowanie użytkownika %1 (%2) na portalu.'@
                  [USERS.DANE,USERS.KOD],0
               )
            ?}
         ?}
      ?}
   || USERSF.cntx_psh();
      USERSF.prefix();
      USERSF.PORTAL2:='N';
      USERSF.PORTAL2E:='N';
      USERSF.put();
      USERSF.cntx_pop();
      KOMM.msg(
         'Użytkownik %1 (%2) nie ma skonfigurowanego konta na portalu.'@
         [USERS.DANE,USERS.KOD],0
      )
   ?}
?};

{? ~_selected
|| KOMM.select()
?}


\portal_disable_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Wyłącza logowanie użytkownika na portalu - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj_conf','portal_engine');
{? exec('is_active','portal_engine',1) & FUN.ask('Czy wyłączyć logowanie zaznaczonych użytkowników na portalu?'@)
|| KOMM.init(,,'Synchronizacja kont użytkowników na portalu'@);
   exec('portal_sync','users');
   KOMM.init(,,'Wyłączanie logowania użytkowników na portalu'@);
   1
|| 0
?}


\portal_disable_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Wyłącza logowanie użytkownika na portalu - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\portal_grayed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Wyszarzanie akcji w oknie użytkowników portalu (w ramach akcji rekord przed)
::   WE: _a - parametr systemowy
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _wer:=cur_win(1,1);
   _selected:=(USERSF.sel_size()>0);
   _grayed:=':';
   {? ~_selected
   || USERSF.USERS();
      _grayed:={? USERSF.PORTAL2E='T' || 'O(W)'|| 'O(Y)' ?}+_grayed;
      _grayed:={? USERS.PXPRAC || 'P(B)F(P(B))' || 'P(O)F(P(O))' ?}+_grayed;
      _grayed:={? USERS.PXKIER || 'E(B)F(E(B))' || 'E(O)F(E(O))' ?}+_grayed;
      _grayed:={? USERS.PXSEOD || 'B(B)F(B(B))' || 'B(O)F(B(O))' ?}+_grayed;
      _grayed:={? USERSF.BLK_SYNC='T' || '' || 'Y' ?}+_grayed
   ?};
   USERSF.actions_grayed(_wer,_grayed)
?};
~~


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Wybór aktywnego użytkownika
::   WY: USERS.ref lub null jeżeli zrezygnowano z wyboru
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

_result:=null();

USERS.cntx_psh();
USERS.win_sel('SLO');
USERS.hdr_sel('');
USERS.index('USR_AKOD');
USERS.prefix('T');
{? USERS.select()
|| _result:=USERS.ref()
?};
USERS.cntx_pop();
_result


\pau_wyslij_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Przed akcją "Wyślij" listy kont współpracowników.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: wynik sprawdzenia warunku wykonania zasadniczej akcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);
_TAB.CREATED='T' & _TAB.ACTIVE='T' & +|_TAB.PASSWORD & exec('mail_ok','#email',_TAB.EMAIL)<>0


\pau_wyslij_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Po akcji "Wyślij" listy kont współpracowników. Wysyła powiadomienie o haśle tymczasowym na wskazany
::       adres e-mail.
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);
_arg:=exec('add_email_a','#mailbox');
_arg.SUB:='Dane dostępowe';
_arg.RCV:=_TAB.EMAIL;
_arg.BODYH:=exec('pau_mail_tekst','users',_TAB,_por);
_ret:=exec('add_email','#mailbox',_arg);
{? _ret=0
|| FUN.emsg('Dodanie wiadomości do kolejki wysyłania nie powiodło się.'@)
?};
~~


\pau_mail_tekst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Treść wiadomości
::   WE: _a [_TABLE] - alias tabeli zawierającej informacje o kontach współpracowników
::       [_b] [INTEGER] - 0*/1 - jest licencja na dziedzinę POR
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_por:=(var_pres('_b')=type_of(0) & _b<>0);

'<center><h4>'+
'W dniu %1 o godzinie %2 wygenerowano dane dostępowe dla: %3 %4'
   [date()$6,time()$1,_TAB.NAZWISKO,_TAB.PIERWSZE]+
'</h4></center>'
'<p style="font-size:120%%;"><br>%1:&nbsp;%2</p>'['Login',_TAB.WEBLOGIN]+
'<p style="font-size:120%%;">%1:&nbsp;%2</p>'['Hasło pierwszego logowania',_TAB.PASSWORD]+
'<br>'
'%1'
'<br>'
'<br>'
'%2'
[
'Podczas pierwszego logowania system wymusi zmianę hasła na docelowe.',
'Ta wiadomość została wygenerowana automatycznie - prosimy na nią nie odpowiadać.'
]


\user_prop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Akcja "Właściwości" użytkownika
::----------------------------------------------------------------------------------------------------------------------
_tb_ref:=tab_tmp(1, 'REF', 'INTEGER', 'REF');
_grupa:=0;
_il_zm:=0;
_msg:='';
{? USERS.sel_size()>0
|| _grupa:=1;
   USERS.cntx_psh();
   {? USERS.first()
   || {!
      |? {? USERS.sel_mark() & exec('find_syssuser','users',USERS.GUID)
         || _tb_ref.REF:=SYSSUSER.ref();
            _tb_ref.add()
         ?};
         USERS.next()
      !}
   ?};
   USERS.cntx_pop();
   {? _tb_ref.size()=0
   || _msg:='Wszyscy wybrani użytkownicy są nieaktywny. Poprawianie niedozwolone.'@
   ?}
|| {? exec('find_syssuser','users',USERS.GUID)
   || _tb_ref.REF:=SYSSUSER.ref();
      _tb_ref.add()
   || _msg:='Użytkownik: %1 jest nieaktywny. Poprawianie niedozwolone.'@[USERS.KOD]
   ?}
?};
{? _tb_ref.size()>0
|| _sysobj:=exec(,'__sysusr',1);
   _il_zm:=_sysobj.XPass.editUserProperties(_tb_ref);
   {? _grupa & _il_zm>0
   || USERS.sel_adel()
   ?}
|| FUN.emsg(_msg)
?};
0


\usmgrrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Prametry rezeracji dla grupy materiałowej
::----------------------------------------------------------------------------------------------------------------------
_beerus:=BEER.US;
_beerodg:=BEER.ODG;
_pomocrodz:=POMOC.RODZ;
BEER.US:=USERS.ref();
BEER.ODG:=null();
POMOC.RODZ:='T';
USERREZ.index('USERS');
USERREZ.prefix(BEER.US);
USERREZ.win_sel('USMGR');
USERREZ.select();
BEER.US:=_beerus;
BEER.ODG:=_beerodg;
POMOC.RODZ:=_pomocrodz;
~~


\mgrusrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Prametry rezeracji dla grupy materiałowej
::----------------------------------------------------------------------------------------------------------------------
_beerus:=BEER.US;
_beerodg:=BEER.ODG;
_pomocrodz:=POMOC.RODZ;
BEER.US:=null();
BEER.ODG:=MGR.ref();
POMOC.RODZ:='T';
USERREZ.index('MGR');
USERREZ.prefix(BEER.ODG);
USERREZ.win_sel('MGRUS');
USERREZ.select();
BEER.US:=_beerus;
BEER.ODG:=_beerodg;
POMOC.RODZ:=_pomocrodz;
~~


\chk_userrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Walidacja danych
::   WE: _a - miejsce: 1-użytkownik-grupa 2-użytkownik-domyślne 3-grupa 4-grupowe
::       _b - ref poprawianego rekordu
::   WY: OK-pusty string lub akronim pola
::----------------------------------------------------------------------------------------------------------------------
_res:='';
{? _a=1 & USERREZ.MGR=null()
|| FUN.info('Dla uprawnień do rezerwacji należy podać grupę materiałową.'@);
   _res:='MGR'
|? _a=3 & USERREZ.USERS=null()
|| FUN.info('Dla uprawnień do rezerwacji należy użytkownika.'@);
   _res:='USERS'
|? USERREZ.LDNI<0
|| FUN.info('Liczba dni dla rezerwacji musi być liczbą większą lub równą zero.'@);
   _res:='LDNI'
|? (_a%*2)
  & (_ref:=exec('FindInSet','#table','USERREZ','UNIK',USERREZ.MGR,USERREZ.USERS,,,,null()); _ref<>null() & _ref<>_b)
|| FUN.info('Dodano już uprawnienie o danych:\nużytkownik: %1,\ngrupa: %2.'@[USERREZ.USERS().KOD,USERREZ.MGR().KOD]);
   _res:={? _a=1 || 'MGR' || 'USERS' ?}
?};
_res


\add_usmgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Dodanie uprawnień do rezerwacji
::----------------------------------------------------------------------------------------------------------------------
USERREZ.blank();
USERREZ.win_edit('REDUS');
USERREZ.hdr_edit(': %1-%2'[BEER.US().KOD,BEER.US().DANE]);
{? USERREZ.edit("exec('chk_userrez','users',1,null())") || USERREZ.add(1) ?};
1


\mod_usmgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Modyfikacja uprawnień do rezerwacji
::----------------------------------------------------------------------------------------------------------------------
USERREZ.get();
{? USERREZ.MGR<>null()
|| USERREZ.win_edit('REDUS');
   USERREZ.hdr_edit(': %1-%2'[BEER.US().KOD,BEER.US().DANE]);
   {? USERREZ.edit("exec('chk_userrez','users',1,USERREZ.ref())") || USERREZ.put(1) ?}
|| USERREZ.win_edit('REDDEL');
   USERREZ.hdr_edit(': %1-%2'[BEER.US().KOD,BEER.US().DANE]);
   {? USERREZ.edit("exec('chk_userrez','users',2,USERREZ.ref())") || USERREZ.put(1) ?}
?};
1


\dom_usmgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Domyślne uprawnienia do rezerwacji
::----------------------------------------------------------------------------------------------------------------------
_refdom:=exec('FindInSet','#table','USERREZ','UNIK',null(),BEER.US,,,,null());
{? _refdom=null()
|| USERREZ.blank();
   USERREZ.win_edit('REDDEL');
   USERREZ.hdr_edit(': %1-%2'[BEER.US().KOD,BEER.US().DANE]);
   {? USERREZ.edit("exec('chk_userrez','users',2,null())") || USERREZ.add(1) ?}
|? FUN.ask('Wprowadzono już domyślne uprawnienia, czy chcesz je poprawić?'@)
|| USERREZ.cntx_psh();
   USERREZ.prefix();
   {? USERREZ.seek(_refdom) || exec('mod_usmgr','users') ?};
   USERREZ.cntx_pop()
?};
1


\add_mgrus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Dodanie uprawnień do rezerwacji
::----------------------------------------------------------------------------------------------------------------------
{? BEER.ODG().RODZ<>'T'
|| FUN.info('Uprawnienia dotyczą wyłącznie grup materiałowych.\n'
            'Dołączenie uprawnień dla grupy %1-%2 niemożliwe.'@[BEER.ODG().KOD,BEER.ODG().NAZ])
|| USERREZ.blank();
   USERREZ.win_edit('REDMGR');
   USERREZ.hdr_edit(': %1-%2'[BEER.ODG().KOD,BEER.ODG().NAZ]);
   {? USERREZ.edit("exec('chk_userrez','users',3,null())") || USERREZ.add(1) ?}
?};
1


\mod_mgrus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Modyfikacja uprawnień do rezerwacji
::----------------------------------------------------------------------------------------------------------------------
USERREZ.get();
USERREZ.win_edit('REDMGR');
USERREZ.hdr_edit(': %1-%2'[BEER.ODG().KOD,BEER.ODG().NAZ]);
{? USERREZ.edit("exec('chk_userrez','users',3,USERREZ.ref())") || USERREZ.put(1) ?};
1


\bl_usrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Wartość początkowa pola USERS
::----------------------------------------------------------------------------------------------------------------------
BEER.US


\bl_mgrrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Wartość początkowa pola USERS
::----------------------------------------------------------------------------------------------------------------------
BEER.ODG


\off365
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MW] [22.26]
:: OPIS: Znaczniki logowania przez Office 365 i wieloskładnikowego logowania do portalu HR
::----------------------------------------------------------------------------------------------------------------------
_red0:=USERS.win_edit('?');
{? USERS.sel_size()>0
|| _zmiana:=0;
   _il_zm:=0;
   _uzyt_ok:=0;
   USERS.win_edit('O365_0');
   USERS.cntx_psh();
   USERS.blank();
   exec('us_of365_log2_editable','users');
   {? USERS.edit()
   || _zmiana:=1;
      _of365:=USERS.OF365;
      {? _of365='T'
      || _log2:='N'
      || _log2:=USERS.LOG2
      ?};
      {? USERS.first()
      || {!
         |? {? USERS.sel_mark()
            || {? USERS.WEBLOGIN<>'' & exec('mail_ok','#email',USERS.WEBLOGIN)
               || _uzyt_ok:=1;
                  {? USERS.OF365<>_of365 | USERS.LOG2<>_log2
                  || _il_zm+=1;
                     USERS.OF365:=_of365;
                     USERS.LOG2:=_log2;
                     USERS.put()
                  ?}
               ?}
            ?};
            USERS.next()
         !}
      ?}
   ?};
   USERS.cntx_pop();
   {? _zmiana
   || _msg:='';
      {? ~_uzyt_ok
      || _msg:='Żaden z wybranych użytkowników nie ma loginu webowego w postaci adresu e-mail. Zmiana niedozwolona.'@
      || _msg:='Liczba zmienionych pozycji: %1.'@[$_il_zm]
      ?};
      FUN.emsg(_msg);
      USERS.sel_adel()
   ?}
|| _weblogin:=USERS.WEBLOGIN;
   {? _weblogin<>'' & exec('mail_ok','#email',_weblogin)
   || USERS.win_edit(exec('mk_edit_o365','users'));
      exec('us_of365_log2_editable','users');
      _valid:="
         _valid:=1;
::         {? USERS.EMAIL<>'' & exec('mail_ok','#email',USERS.EMAIL)=0
::         || FUN.info('Niepoprawny adres e-mail.'@);
::            _valid:=0
::         |? USERS.OF365='T' & USERS.EMAIL=''
::         || _choice:=FUN.choice(
::               'W przypadku uwierzytelniania kontem Office 365 zalacane jest podanie adresu e-mail.'@,1,
::               'Zapisz'@,,,,'Wróć do redakcji'@
::            );
::            {? _choice=0 || _valid:='EMAIL' ?}
::         ?};
         _valid
      ";
      {? USERS.edit(_valid)
      || USERS.put()
      ?}
   || {? _weblogin=''
      || _msg:='Użytkownik nie ma loginu webowego.'@
      || _msg:='Użytkownik ma nieprawidłowy login webowy "%1".'@[_weblogin]
      ?};
      _msg+='\n'+'Login webowy musi być w postaci adresu e-mail. Zmiana niedozwolona.'@;
      FUN.emsg(_msg)
   ?}
?};
USERS.win_edit(_red0);
0


\grp_usmgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Dodanie uprawnień do rezerwacji
::----------------------------------------------------------------------------------------------------------------------
USERREZ.cntx_psh();
USERREZ.blank();
USERREZ.win_edit('REDMGR');
USERREZ.hdr_edit(': %1-%2'[BEER.US().KOD,BEER.US().DANE]);
USERREZ.efld_opt('REDMGR','editable=0',,'USERS');
{? USERREZ.edit("exec('chk_userrez','users',4,null())")
|| VAR_DEL.delete('__zatw');
   __zatw:=0;
   _tab:=tab_tmp(1,'SYM','STRING[8]','Symbol'
         ,'NAZ','STRING[40]','Nazwa'
         ,'ACCESS','STRING[1]','Wybrano'
         ,'REF','STRING[16]','Ref SQL');

   MGR.cntx_psh();
   MGR.index('KOD');
   MGR.prefix('T');
   {? MGR.first()
   || {!
      |? _tab.blank();
         _tab.SYM:=MGR.KOD;
         _tab.NAZ:=MGR.NAZ;
         _tab.REF:=$MGR.ref();
         _tab.ACCESS:='N';
         _tab.add(1);
         MGR.next()
      !}
   ?};
   MGR.cntx_pop();

   _sel:=_tab.mk_sel('Wybór grupy materiałowej'@,'P',,'usrez_mgr',,,,,'U');
   _tab.win_fld(_sel,,'ACCESS',,,,,,,,'Czy wybrano [T/N]?'@,2,,"'T'","'N'");
   _tab.win_fld(_sel,,'SYM');
   _tab.win_fld(_sel,,'NAZ');

   _formula:="_tab:=cur_tab(); _tab.ACCESS:='T'; _tab.put()";
   _tab.win_act(_sel,,'Formuła','&Wybierz'@@,,,_formula,,1,1,,,'W');
   _tab.win_btn(_sel,'text='+'&Wybierz'@+',panel=right,align=begin','menu:W',,,,,,'noempty');
   _formula:="_tab:=cur_tab(); _tab.ACCESS:='N'; _tab.put()";
   _tab.win_act(_sel,,'Formuła','&Odbierz'@@,,,_formula,,,1,,,'O');
   _tab.win_btn(_sel,'text='+'&Odbierz'@+',panel=right,align=begin','menu:O',,,,,,'noempty');
   _formula:="__zatw:=1; sel_exit()";
   _tab.win_act(_sel,,'Formuła','&Akceptuj'@@,,,_formula,,,,,,'A');
   _tab.win_btn(_sel,'text='+'&Akceptuj'@+',btn_label_align=center,panel=bottom,align=end','menu:A',,,,,,'noempty');
   _tab.win_btn(_sel,'text='+'A&nuluj'@+',btn_label_align=center,panel=bottom,align=end','key:Esc');
   _tab.win_act(_sel,,'Kolejność',);
:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
   'Czy zakończyć wybór grup materiałowych?'@; 'Uwaga. Wprowadzone zmiany nie zostaną uwzględnione.'@;
   _tab.win_act(_sel,,'Okienko',,,,,"
      {? ~__zatw
      || FUN.ask('Czy zakończyć wybór grup materiałowych?'@+'\n'+'Uwaga. Wprowadzone zmiany nie zostaną uwzględnione.'@)
      || 1
      ?}");
   _tab.win_act(_sel,,'Rekord',,,,"
         _tab:=cur_tab();
         {? _tab.ACCESS='T' | _tab.sel_size()
         || _tab.actions(_tab.win_sel('?'),,'O',1)
         || _tab.actions(_tab.win_sel('?'),,'W',1)
         ?}
      ");
   _tab.win_sel(_sel);
   {? _tab.select()
   || _tab.clear();
      {? _tab.first()
      || {!
         |? {? _tab.ACCESS='T'
            || USERREZ.MGR:=exec('FindAndGet','#table',MGR,_tab.REF,,,null());
               USERREZ.add(1)
            ?};
            _tab.next()
         !}
      ?}
   ?};
   VAR_DEL.delete('__zatw');
   obj_del(_tab)
?};
USERREZ.efld_opt('REDMGR','editable=1',,'USERS');
USERREZ.cntx_pop();
1


\grp_mgrus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Dodanie grupy uprawnień do rezerwacji
::----------------------------------------------------------------------------------------------------------------------
{? BEER.ODG().RODZ<>'T'
|| FUN.info('Uprawnienia dotyczą wyłącznie grup materiałowych.\n'
            'Dołączenie uprawnień dla grupy %1-%2 niemożliwe.'@[BEER.ODG().KOD,BEER.ODG().NAZ])
|| USERREZ.blank();
   USERREZ.win_edit('REDUS');
   USERREZ.hdr_edit(': %1-%2'[BEER.ODG().KOD,BEER.ODG().NAZ]);
   USERREZ.efld_opt('REDUS','editable=0',,'MGR');
   {? USERREZ.edit("exec('chk_userrez','users',4,null())")
   || VAR_DEL.delete('__zatw');
   __zatw:=0;
   _tab:=tab_tmp(1,'SYM','STRING[8]','Symbol'
         ,'NAZ','STRING[50]','Nazwa'
         ,'ACCESS','STRING[1]','Wybrano'
         ,'REF','STRING[16]','Ref SQL');

   USERS.cntx_psh();
   USERS.index('USR_AKOD');
   USERS.prefix('T');
   {? USERS.first()
   || {!
      |? _tab.blank();
         _tab.SYM:=USERS.KOD;
         _tab.NAZ:=USERS.DANE;
         _tab.REF:=$USERS.ref();
         _tab.ACCESS:='N';
         _tab.add(1);
         USERS.next()
      !}
   ?};
   USERS.cntx_pop();

   _sel:=_tab.mk_sel('Wybór użytkowników'@,'P',,'usrez_us',,,,,'U');
   _tab.win_fld(_sel,,'ACCESS',,,,,,,,'Czy wybrano [T/N]?'@,2,,"'T'","'N'");
   _tab.win_fld(_sel,,'SYM');
   _tab.win_fld(_sel,,'NAZ');

   _formula:="_tab:=cur_tab(); _tab.ACCESS:='T'; _tab.put()";
   _tab.win_act(_sel,,'Formuła','&Wybierz'@@,,,_formula,,1,1,,,'W');
   _tab.win_btn(_sel,'text='+'&Wybierz'@+',panel=right,align=begin','menu:W',,,,,,'noempty');
   _formula:="_tab:=cur_tab(); _tab.ACCESS:='N'; _tab.put()";
   _tab.win_act(_sel,,'Formuła','&Odbierz'@@,,,_formula,,,1,,,'O');
   _tab.win_btn(_sel,'text='+'&Odbierz'@+',panel=right,align=begin','menu:O',,,,,,'noempty');
   _formula:="__zatw:=1; sel_exit()";
   _tab.win_act(_sel,,'Formuła','&Akceptuj'@@,,,_formula,,,,,,'A');
   _tab.win_btn(_sel,'text='+'&Akceptuj'@+',btn_label_align=center,panel=bottom,align=end','menu:A',,,,,,'noempty');
   _tab.win_btn(_sel,'text='+'A&nuluj'@+',btn_label_align=center,panel=bottom,align=end','key:Esc');
   _tab.win_act(_sel,,'Kolejność',);
:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
   'Czy zakończyć wybór użytkowników?'@; 'Uwaga. Wprowadzone zmiany nie zostaną uwzględnione.'@;
   _tab.win_act(_sel,,'Okienko',,,,,"
      {? ~__zatw
      || FUN.ask('Czy zakończyć wybór użytkowników?'@+'\n'+'Uwaga. Wprowadzone zmiany nie zostaną uwzględnione.'@)
      || 1
      ?}");
   _tab.win_act(_sel,,'Rekord',,,,"
         _tab:=cur_tab();
         {? _tab.ACCESS='T' | _tab.sel_size()
         || _tab.actions(_tab.win_sel('?'),,'O',1)
         || _tab.actions(_tab.win_sel('?'),,'W',1)
         ?}
      ");
   _tab.win_sel(_sel);
   {? _tab.select()
   || _tab.clear();
      {? _tab.first()
      || {!
         |? {? _tab.ACCESS='T'
            || USERREZ.USERS:=exec('FindAndGet','#table',USERS,_tab.REF,,,null());
               USERREZ.add(1)
            ?};
            _tab.next()
         !}
      ?}
   ?};
   VAR_DEL.delete('__zatw');
   obj_del(_tab)
   ?};
   USERREZ.efld_opt('REDUS','editable=1',,'MGR')
?};
1


\us_of365_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MW] [22.26]
:: OPIS: Po redagowaniu USERS.OF365
::----------------------------------------------------------------------------------------------------------------------
exec('us_of365_log2_editable','users');
~~


\us_log2_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MW] [22.26]
:: OPIS: Po redagowaniu USERS.LOG2
::----------------------------------------------------------------------------------------------------------------------
exec('us_of365_log2_editable','users');
~~


\us_of365_log2_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MW] [22.26]
:: OPIS: Ustawienie możliwości edycji USERS.OF365 i USERS.LOG2
::----------------------------------------------------------------------------------------------------------------------
_red:=USERS.win_edit('?');
{? USERS.OF365='T'
|| {? USERS.LOG2<>'N'
   || USERS.LOG2:='N'
   ?};
   USERS.efld_opt(_red,'editable=grayed',,'LOG2')
|| USERS.efld_opt(_red,'editable=1',,'LOG2')
?};
{? USERS.LOG2='T'
|| {? USERS.OF365<>'N'
   || USERS.OF365:='N'
   ?};
   USERS.efld_opt(_red,'editable=grayed',,'OF365')
|| USERS.efld_opt(_red,'editable=1',,'OF365')
?};
~~


\admin_ask_mail
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Pyta użytkownika w roli 'Administrator' o podanie swojego adresu e-mail
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

_result:=1;

USERS.cntx_psh();
B_ROLE.cntx_psh();
B_USRROL.cntx_psh();
B_USRROL.index('WER3');
_is_admin:=0;
_is_modelator:=0;
B_USRROL.prefix(REF.FIRMA,OPERATOR.USER,'Administrator',);
{? B_USRROL.first()
|| _is_admin:=1
?};
{? exec('chk_role','#b__box',OPERATOR.USER,'ZPR_PRO_MODE')
|| _is_modelator:=1
?};
{? exec('chk_role','#b__box',OPERATOR.USER,'ZPR_PRO_MODW')
|| _is_modelator:=1
?};
{? _is_admin>0 & _is_modelator>0
||
:: Użytkownik jest w roli Administratora i może modelować
   {? OPERATOR.USER().EMAIL=''
   || _result:=0;
::    Administrator nie podał maila
      _tab:=tab_tmp(1,
         'VAL','STRING[255]','String'@,
         'NAME','SYS_MEMO','Podpowiedź'

      );
      _tab.blank();

      _msg:='Proszę podać swój adres e-mail.\n\n'
            'Ten dialog wyświetlił się ponieważ posiadasz rolę: \'%1\' i masz uprawnienia do modelowania procesów.\n'
            'Na adres ten system %2 może wysyłać wiadomości z niektórych procesów administracyjnych\n'
            'np. jeżeli nie uda się utworzenie kopii zapasowej itp.'@['Administrator',exec('nazwa','#system')];
      _tab.memo_set(_msg,'NAME');

      _edit:=_tab.mk_edit(FUN.TYT,0,'#editadminmail');
      _tab.win_efld(_edit,_tab,'NAME',,,100,-4,1,'',1);
      _tab.win_efld(_edit,_tab,'VAL',,,100,0,,'Adres e-mail'@);
      _tab.efld_opt(_edit, 'mark=1',,'VAL');
      _valid:="
         {? cur_tab(1,1).VAL=''
         || FUN.emsg('Proszę podać adres e-mail'@);
            return('VAL')
         ?};
         {? exec('mail_ok','#email',cur_tab(1,1).VAL)=0
         || FUN.emsg('Niepoprawny adres e-mail.'@);
            return('VAL')
         ?};
         ''
      ";
      exec('ok_esc','#window',_tab,_edit);
      _tab.win_edit(_edit);

      {? _tab.edit(_valid)
      || USERS.EMAIL:=_tab.VAL;
         _result:=USERS.put()
      ?}
   ?}
?};
B_ROLE.cntx_pop();
B_USRROL.cntx_pop();
USERS.cntx_pop();
USERS.get();
_result


\portal_unblock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Odblokowuje wysyłkę uprawnień użytkownika
::----------------------------------------------------------------------------------------------------------------------
{? USERSF.sel_size()>0 | FUN.ask('Czy odblokować wysyłkę uprawnień użytkownika?'@)
|| USERSF.BLK_SYNC:='N';
   USERSF.put()
?};
~~


\portal_unblock_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Odblokowuje wysyłkę uprawnień użytkownika - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Czy odblokować wysyłkę uprawnień zaznaczonych użytkowników?'@)


\portal_unblock_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Odblokowuje wysyłkę uprawnień użytkownika - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
~~


\portalu_sync
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Aktualizuje i wysyła uprawnienie jednego lub grupy użytkowników
::       - wołane z okna wertowania USERSF
::----------------------------------------------------------------------------------------------------------------------
_selected:=(USERSF.sel_size()>0);

_cfg:=params_get().env.PORTALU_CFG;

{? ~_selected
|| {? USERSF.BLK_SYNC='T'
   || _ask:=FUN.ask(
         'Czy zaktualizować uprawnienia użytkownika %1 do funkcjonalności Portal HR?\n'
         'Uprawnienia nie zostaną wysłane — użytkownik jest zablokowany.\n\n'
         'Uwaga:\n'
         'Aktualizacja danych może być czasochłonna.'@
         [USERS.WEBLOGIN]
      );
      _cfg.act:=_ask;
      _cfg.send:=0
   ||
      _cfg.act:=0;
      _cfg.send:=0;

      _choice:=FUN.multichoice(
         'Czy zsynchronizować uprawnienia użytkownika %1 do funkcjonalności Portal HR?\n\n'
         'Uwaga:\n'
         'Aktualizacja danych może być czasochłonna.'@
         [USERS.WEBLOGIN]
         ,,,,9
         ,'text=%1;selected=T'['Zostaną zaktualizowane uprawnienia wskazanego użytkownika.'@]
         ,'text=%1;selected=T'['Zostaną wysłane uprawnienia wskazanego użytkownika.'@]
      );

      {? +_choice[1]>0
      ||
         {? +_choice[2]>0 || _cfg.act:=1 ?};
         {? +_choice[3]>0 || _cfg.send:=1 ?}
      ?}
   ?}
?};

{? ~_selected & _cfg.act>0
|| KOMM.init(,,'Aktualizacja uprawnień'@);
   exec('process_receive','sync_mwa','PORTAL_CFG',-1,,'PORTALU',1,0,'sl_TenantUserRightsGet')
?};

{? _cfg.act>0
|| exec('portalu_update','#portal',0,USERSF.USERS)
?};

{? _cfg.send>0
|| exec('portalu_send','portal_engine',0,USERSF.USERS().WEBLOGIN)
?};

{? ~_selected & (_cfg.act>0 | _cfg.send>0)
|| {? _cfg.send>0
   || progress(,'Proszę czekać, trwa odświeżanie danych.'@,FUN.TYT,1);
::======================================================================================================================
::    Awaryjne naprawienie licencji - do usunięcia w wersji docelowej
      exec('portall_repair','portal_engine');
::======================================================================================================================
      exec('portall_sync','portal_engine');
      exec('portal_sync','users');
      exec('portall_info_load','portal_engine',params_get().env.PORTALL_INFO.tab,REF.FIRMA);
      prgs_clr()
   ?};
   grp_edisp(params_get().env.PORTALL_INFO.tab,params_get().env.PORTALL_INFO.red)
?}


\portalu_sync_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Aktualizuje i wysyła uprawnienie jednego lub grupy użytkowników
::       - wołane z okna wertowania USERSF przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
_cfg:=params_get().env.PORTALU_CFG;

_cfg.act:=0;
_cfg.send:=0;

_choice:=FUN.multichoice(
   'Czy zsynchronizować uprawnienia użytkowniów do funkcjonalności Portal HR?\n\n'
   'Uwaga:\n'
   'Aktualizacja danych może być czasochłonna.'@
   ,,,,9
   ,'text=%1;selected=T'['Zostaną zaktualizowane uprawnienia zaznaczonych użytkowników.'@]
   ,'text=%1;selected=T'['Zostaną wysłane uprawnienia zaznaczonych użytkowników.'@]
);

{? +_choice[1]>0
||
   KOMM.init('Wysyłanie uprawnień na portal.'@);
   sel_nchk();

   {? +_choice[2]>0 || _cfg.act:=1 ?};
   {? +_choice[3]>0 || _cfg.send:=1 ?};

   exec('process_receive','sync_mwa','PORTAL_CFG',-1,,'PORTALU',1,0,'sl_TenantUserRightsGet')
?};

_cfg.act>0 | _cfg.send>0


\portalu_sync_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Aktualizuje i wysyła uprawnienie jednego lub grupy użytkowników
::       - wołane z okna wertowania USERSF po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
_cfg:=params_get().env.PORTALU_CFG;

::KOMM.select();

{? _cfg.send>0
|| progress(,'Proszę czekać, trwa odświeżanie danych.'@,FUN.TYT,1);
::======================================================================================================================
:: Awaryjne naprawienie licencji - do usunięcia w wersji docelowej
   exec('portall_repair','portal_engine');
::======================================================================================================================
   exec('portall_sync','portal_engine');
   exec('portal_sync','users');
   exec('portall_info_load','portal_engine',params_get().env.PORTALL_INFO.tab,REF.FIRMA);
   prgs_clr()
?};
grp_edisp(params_get().env.PORTALL_INFO.tab,params_get().env.PORTALL_INFO.red);
~~


\resend_reg_mail
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Wzbudza ponowną wysyłkę maila rejestracyjnego
::----------------------------------------------------------------------------------------------------------------------
_selected:=(USERSF.sel_size()>0);

_args:=obj_new('uidref','ext','action');
_args.uidref:=USERS.uidref();
_args.ext:='';
{? _selected
|| _args.action:=''
|| _args.action:=~~;
:: Przekierowanie nie jest obsługiwane przez API (mimo obecności odpowiedniego pola w encji)
::   _tab:=tab_tmp(1
::      ,'VAL','STRING[255]','Adres przekierowania'@
::      ,'HEADER','STRING[255]','Uwaga'@
::   );
::   _tab.VAL:='';
::   _tab.HEADER:=
::      'Jeżeli nie podasz adresu przekierowania, mail zostanie wysłany na dotychczasowy adres: %1'@[USERS.WEBLOGIN];
::   _red:=_tab.mk_edit(FUN.TYT,0,'redirectedit');
::   _tab.win_efld(_red,,'VAL',,,100);
::   _tab.win_efld(_red,,'HEADER',,,100,,1);
::   _tab.efld_opt(_red,'editable=grayed',,'HEADER');
::   exec('ok_esc','#window',_tab,_red);
::   _tab.win_edit(_red);
::   _valid:="
::      {? exec('mail_ok','#email',cur_tab(1,1).VAL)
::      || 1
::      || FUN.emsg('Niepoprawny adres e-mail.'@);
::         0
::      ?}
::   ";
::   {? _tab.edit(_valid)
::   || _args.action:=_tab.VAL
::   ?};
   {? FUN.ask('Czy wysłać ponownie mail rejestracyjny do wybranego użytkownika?'@)
   || _args.action:=''
   ?}
?};
_log_level:=-1;
{? type_of(_args.action)=type_of('')
|| {? ~_selected || KOMM.init(,,'Ponowna wysyłka maila rejestracyjnego'@) ?};
   exec('run_mwac','sync_mwa','PORTAL_CFG','chr_PersonResendRegMailModify',-1,_log_level,_args);
   {? ~_selected || KOMM.select() ?}
?};
~~


\resend_reg_mail_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Wzbudza ponowną wysyłkę maila rejestracyjnego - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy wysłać ponownie maile rejestracyjne do wybranych użytkowników?'@)
|| KOMM.init(,,'Ponowna wysyłka maili rejestracyjnych'@);
   1
|| 0
?}


\resend_reg_mail_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Wzbudza ponowną wysyłkę maila rejestracyjnego - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select()


\portal_usersf_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Zarządzanie użytkownikami "portalowymi" - okno selekcji USERSF
::   WY: akronim okna
::----------------------------------------------------------------------------------------------------------------------
_seod:=exec('lic','#b_domain','SEO');

:: Czy pokazywać widok rozszerzony z blokadami?
_ext_blok:=0;

USERS.fld_fml('PMPRAC','DISPLAY_FORMAT',"{? fld()=0;1 || 'empty=1' || 'empty=0' ?}");
USERS.fld_fml('P2PRAC','DISPLAY_FORMAT',"{? fld()=0;1 || 'empty=1' || 'empty=0' ?}");
USERS.fld_fml('PMKIER','DISPLAY_FORMAT',"{? fld()=0;1 || 'empty=1' || 'empty=0' ?}");
USERS.fld_fml('P2KIER','DISPLAY_FORMAT',"{? fld()=0;1 || 'empty=1' || 'empty=0' ?}");
{? _seod
|| USERS.fld_fml('PMSEOD','DISPLAY_FORMAT',"{? fld()=0;1 || 'empty=1' || 'empty=0' ?}");
   USERS.fld_fml('P2SEOD','DISPLAY_FORMAT',"{? fld()=0;1 || 'empty=1' || 'empty=0' ?}")
?};

_wer:=USERSF.mk_sel('Użytkownicy portalowi'@,'P',,'usersportal',,,,,'U',,,,,,,'on');
USERSF.win_fld(_wer,,'USERS','KOD');
USERSF.win_fld(_wer,,'USERS','DANE');
USERSF.win_fld(_wer,,'USERS','WEBLOGIN',,30);
USERSF.win_fld(_wer,,'PORTAL2E',,,-6,,,'Logowanie włączone'@,,,2,,"'T'","'N'");
USERSF.win_fld(_wer,,'USERS','PMPRAC',,-6,,,'ERP Pracownik'@);
USERSF.win_fld(_wer,,'USERS','P2PRAC',,-6,,,'Portal Pracownik'@);
{? _ext_blok
|| USERSF.win_fld(_wer,USERS,'PXPRAC',,,-6,,,'Blokada Prac.'@,,'Blokada funkcjonalności Pracownik'@,2,,"1","0")
?};
USERSF.win_fld(_wer,,'USERS','PMKIER',,-6,,,'ERP Kierownik'@);
USERSF.win_fld(_wer,,'USERS','P2KIER',,-6,,,'Portal Kierownik'@);
{? _ext_blok
|| USERSF.win_fld(_wer,USERS,'PXKIER',,,-6,,,'Blokada Kier.'@,,'Blokada funkcjonalności Kierownik'@,2,,"1","0")
?};
{? _seod
|| USERSF.win_fld(_wer,,'USERS','PMSEOD',,-6,,,'ERP Obiegi'@);
   USERSF.win_fld(_wer,,'USERS','P2SEOD',,-6,,,'Portal Obiegi'@);
   {? _ext_blok
   || USERSF.win_fld(_wer,USERS,'PXSEOD',,,-6,,,'Blokada Ob.'@,,'Blokada funkcjonalności Obiegi'@,2,,"1","0")
   ?}
?};
USERSF.win_fld(_wer,,'BLK_SYNC',,,-6,,,'Błąd wysyłki'@,,
   'Błąd wysyłki uprawnień ze względu na ograniczoną liczbę licencji'@,2,,"'T'","'N'"
);

:: Akcje, przyciski
USERSF.win_act(_wer,,'Menu','L&ogowanie'@@,,,,,,,,,'O');
USERSF.win_act(_wer,,'Formuła','Włącz'@@,'#O',,"exec('portal_enable','users')",,,1,
   "exec('portal_enable_gb','users')","exec('portal_enable_ga','users')",'W');
USERSF.win_act(_wer,,'Formuła','W&yłącz'@@,'#O',,"exec('portal_disable','users')",,,1,
   "exec('portal_disable_gb','users')","exec('portal_disable_ga','users')",'Y');

{? _ext_blok
|| USERSF.win_act(_wer,,'Menu','Dostęp &pracownika'@@,,,,,,,,,'P');
   _btn:=USERSF.win_btn(_wer,'text=%1'['Dostęp &pracownika'@],'Menu');
   _formula:="exec('portal_lock','users','prac',1)";
   USERSF.win_act(_wer,,'Formuła','Blokuj'@@,'#P',,_formula,,,1,,,'B');
   USERSF.btn_menu(_wer,_btn,'menu:PB');
   _formula:="exec('portal_lock','users','prac',0)";
   USERSF.win_act(_wer,,'Formuła','Odblokuj'@@,'#P',,_formula,,,1,,,'O');
   USERSF.btn_menu(_wer,_btn,'menu:PO');

   USERSF.win_act(_wer,,'Menu','Dostęp ki&erownika'@@,,,,,,,,,'E');
   _btn:=USERSF.win_btn(_wer,'text=%1'['Dostęp ki&erownika'@],'Menu');
   _formula:="exec('portal_lock','users','kier',1)";
   USERSF.win_act(_wer,,'Formuła','Blokuj'@@,'#E',,_formula,,,1,,,'B');
   USERSF.btn_menu(_wer,_btn,'menu:EB');
   _formula:="exec('portal_lock','users','kier',0)";
   USERSF.win_act(_wer,,'Formuła','Odblokuj'@@,'#E',,_formula,,,1,,,'O');
   USERSF.btn_menu(_wer,_btn,'menu:EO');

   {? _seod
   || USERSF.win_act(_wer,,'Menu','Dostęp o&biegi'@@,,,,,,,,,'B');
      _btn:=USERSF.win_btn(_wer,'text=%1'['Dostęp o&biegi'@],'Menu');
      _formula:="exec('portal_lock','users','seod',1)";
      USERSF.win_act(_wer,,'Formuła','Blokuj'@@,'#B',,_formula,,,1,,,'B');
      USERSF.btn_menu(_wer,_btn,'menu:BB');
      _formula:="exec('portal_lock','users','seod',0)";
      USERSF.win_act(_wer,,'Formuła','Odblokuj'@@,'#B',,_formula,,,1,,,'O');
      USERSF.btn_menu(_wer,_btn,'menu:BO')
   ?}
?};

::USERS.win_act(_wer,,'Formuła','Odśwież',,,"exec('refresh_users','users')");
USERSF.win_act(_wer,,'Formuła','Uprawnienia'@@,,'Uprawnienia użytkownika do funkcjonalności portalu'@,
   "exec('portalu_tree','portal_engine',USERS.WEBLOGIN)",,,,,,'U'
);
USERSF.win_act(_wer,,'Formuła','Synchronizuj upra&wnienia'@@,,
   'Zaktualizuj i wyślij uprawnienia użytkownika'@,
   "params_exec('portalu_sync','users')",,,1,
   "params_exec('portalu_sync_gb','users')","params_exec('portalu_sync_ga','users')",'W'
);
USERSF.win_act(_wer,,'Formuła','Odblokuj w&ysyłkę uprawnień'@@,,'Odblokuj wysyłkę uprawnień użytkownika po błędzie'@,
   "exec('portal_unblock','users')",,,1,"exec('portal_unblock_gb','users')","exec('portal_unblock_ga','users')",'Y'
);
_formula:="
   exec('portall_select','portal_engine');
   exec('portall_info_load','portal_engine',params_get().env.PORTALL_INFO.tab,REF.FIRMA);
   grp_edisp(params_get().env.PORTALL_INFO.tab,params_get().env.PORTALL_INFO.red);
   ~~
";
USERSF.win_act(_wer,0,'Formuła','Li&cencje'@@,,,_formula,,,,,,'C');
USERSF.win_act(_wer,1,'Formuła','Li&cencje'@@,,,_formula,,,,,,'C');
USERSF.win_act(_wer,0,'Menu','Funkcje'@@,,,,,,,,,'F');
USERSF.win_act(_wer,1,'Menu','Funkcje'@@,,,,,,,,,'F');
{? _ext_blok=0
|| USERSF.win_act(_wer,,'Menu','Dostęp &pracownika'@@,'#F',,,,,,,,'P');
   _formula:="exec('portal_lock','users','prac',1)";
   USERSF.win_act(_wer,,'Formuła','Blokuj'@@,'#FP',,_formula,,,1,,,'B');
   _formula:="exec('portal_lock','users','prac',0)";
   USERSF.win_act(_wer,,'Formuła','Odblokuj'@@,'#FP',,_formula,,,1,,,'O');

   USERSF.win_act(_wer,,'Menu','Dostęp ki&erownika'@@,'#F',,,,,,,,'E');
   _formula:="exec('portal_lock','users','kier',1)";
   USERSF.win_act(_wer,,'Formuła','Blokuj'@@,'#FE',,_formula,,,1,,,'B');
   _formula:="exec('portal_lock','users','kier',0)";
   USERSF.win_act(_wer,,'Formuła','Odblokuj'@@,'#FE',,_formula,,,1,,,'O');

   {? _seod
   || USERSF.win_act(_wer,,'Menu','Dostęp o&biegi'@@,'#F',,,,,,,,'B');
      _formula:="exec('portal_lock','users','seod',1)";
      USERSF.win_act(_wer,,'Formuła','Blokuj'@@,'#FB',,_formula,,,1,,,'B');
      _formula:="exec('portal_lock','users','seod',0)";
      USERSF.win_act(_wer,,'Formuła','Odblokuj'@@,'#FB',,_formula,,,1,,,'O')
   ?};
   USERSF.win_act(_wer,,'Formuła','--X','#F')
?};

USERSF.win_act(_wer,,'Formuła','Wyślij ponownie mail rejestracyjny'@,'#F',,
   "exec('resend_reg_mail','users')",,,1,"exec('resend_reg_mail_gb','users')","exec('resend_reg_mail_ga','users')",'W'
);
USERSF.win_act(_wer,,'Formuła','--Y','#F');

_formula:="
   {? FUN.ask(
         'Czy zaktualizować listę użytkowników portalowych?\n\n'
         'UWAGA:\n'
         'Jest to funkcja techniczna, która częściowo zastępuje procesy ZUI_POR* w zakresie obsługi użytkowników.\n'
         'Aktualizacja danych może być czasochłonna.'@
      )
   || KOMM.init(,,'Aktualizacja użytkowników'@);
      exec('portal_sync','users',1);
      KOMM.select()
   ?};
   ~~
";
USERSF.win_act(_wer,0,'Formuła','Aktualizuj użytkowników'@@,'#F','Aktualizuje listę użytkowników portalowych'@,
   _formula,,,,,,'A'
);
USERSF.win_act(_wer,1,'Formuła','Aktualizuj użytkowników'@@,'#F','Aktualizuje listę użytkowników portalowych'@,
   _formula,,,,,,'A'
);
USERSF.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','USERS#02')",,,,,,'L');
USERSF.win_act(_wer,,'Rekord',,,,"exec('portal_grayed','users',_a); exec('rekprzed','color','USERS#02')");

USERSF.win_btn(_wer,'text=%1'['Uprawnienia'@],'menu:U');
USERSF.win_btn(_wer,'text=%1'['Synchronizuj upra&wnienia'@],'menu:W');
USERSF.win_btn(_wer,'text=%1'['Odblokuj w&ysyłkę'@],'menu:Y');
_btn:=USERSF.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Li&cencje'@],'menu:C');
USERSF.btn_sopt(_wer,_btn,'tooltip=%1'['Zarządzaj licencjami portalowymi'@]);
_btn:=USERSF.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Aktualizuj użytkowników'@],'menu:FA');
USERSF.btn_sopt(_wer,_btn,'tooltip=%1'['Aktualizuj listę użytkowników portalowych'@]);

:: Linki
USERSF.win_link(_wer,"
   _a:=obj_new('LINK');
   _a.LINK:=USERSF.uidref();
   _a
");

:: Ikony
_fb:="
   {? USERS.PMPRAC>0
   || 'xwin16.png:38'
   |? USERS.P2PRAC<>USERS.PMPRAC
   || 'xwin16.png:184'
   || exec('pusta','#icon')
   ?}
";
USERSF.win_fml(_wer,,'USERS','PMPRAC','ICON_BEFORE',_fb);
_fb:="
   {? USERS.P2PRAC>0
   || 'xwin16.png:38'
   |? USERS.P2PRAC<>USERS.PMPRAC
   || 'xwin16.png:184'
   || exec('pusta','#icon')
   ?}
";
USERSF.win_fml(_wer,,'USERS','P2PRAC','ICON_BEFORE',_fb);
_fb:="
   {? USERS.PMKIER>0
   || 'xwin16.png:38'
   |? USERS.P2KIER<>USERS.PMKIER
   || 'xwin16.png:184'
   || exec('pusta','#icon')
   ?}
";
USERSF.win_fml(_wer,,'USERS','PMKIER','ICON_BEFORE',_fb,2);
_fb:="
   {? USERS.P2KIER>0
   || 'xwin16.png:38'
   |? USERS.P2KIER<>USERS.PMKIER
   || 'xwin16.png:184'
   || exec('pusta','#icon')
   ?}
";
USERSF.win_fml(_wer,,'USERS','P2KIER','ICON_BEFORE',_fb,2);
_fb:="
   {? USERS.PMSEOD>0
   || 'xwin16.png:38'
   |? USERS.P2SEOD<>USERS.PMSEOD
   || 'xwin16.png:184'
   || exec('pusta','#icon')
   ?}
";
USERSF.win_fml(_wer,,'USERS','PMSEOD','ICON_BEFORE',_fb,2);
_fb:="
   {? USERS.P2SEOD>0
   || 'xwin16.png:38'
   |? USERS.P2SEOD<>USERS.PMSEOD
   || 'xwin16.png:184'
   || exec('pusta','#icon')
   ?}
";
USERSF.win_fml(_wer,,'USERS','P2SEOD','ICON_BEFORE',_fb,2);

_wer


\portal_config_comment
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Dodatkowy komentarz wyświetlany w oknach zarządzania użytkownikami portalowymi
::----------------------------------------------------------------------------------------------------------------------
'Funkcja do użycia w przypadku, gdy wymagany jest dostęp użytkownika,\n'
'który nie jest powiązany z zatrudnieniem w firmie (np. dostęp do wniosków).'@


\mk_edit_o365
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Definicja okiekna redagowania parametrów uwierzytelniania użytkownika
::----------------------------------------------------------------------------------------------------------------------
:: Zastępnik okna USERS.O365
_red:=USERS.mk_edit('Portal HR — parametry uwierzytelniania'@,0,'usersqo365',28,4,'','','lumen');
USERS.win_efld(_red,,'WEBLOGIN',,,50,,1,'Login'@);
USERS.win_efld(_red,,'CASUID',,,50,,1);
USERS.win_efld(_red,,'OF365',,,3,0,0,'Uwierzytelnienie kontem Office 365'@,0,'','check-box','left_label=0,check_label=""',"'T'","'N'");
USERS.win_efld(_red,,'LOG2',,,3,0,0,'Uwierzytelnienie wieloskładnikowe'@,0,'','check-box','left_label=0,check_label=""',"'T'","'N'");
_btn1:=USERS.win_ebtn(_red,'text="%1",panel=bottom,align=end,edit=1'['Zapisz'@],'key:F2');
USERS.btn_eopt(_red,_btn1,'tooltip="%1"'['Zapisz dane z możliwością powrotu do edycji'@]);
_btn2:=USERS.win_ebtn(_red,'text="%1",panel=bottom,align=end,edit=1'['Anuluj'@],'key:Esc');
USERS.btn_eopt(_red,_btn2,'tooltip="%1"'['Anuluj zmiany i zamknij okno'@]);
_red


\wt_cas_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [TS] [23.25]
:: OPIS: Parametry połączenia dla Active Directory
::----------------------------------------------------------------------------------------------------------------------
_sysobj:=exec(,'__sysusr',1);
_sysobj.XPass.setupWebCas();
~~


\mfa_user_manage
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Zarządzanie uwierzytelnieniem wieloskładnikowym przez użytkownika
::----------------------------------------------------------------------------------------------------------------------
_sysobj:=exec(,'__sysusr');
_user:=_sysobj.getUser();
{? _sysobj.getUserData('mfa',_user,1)=''
|| exec('mfa_config','__mfa')
|| _choice:=FUN.choice('Obsługa uwierzytelnienia wieloskładnikowego'@,1,'Konfiguracja'@,'Usuń'@);
   {? _choice=1
   || exec('mfa_config','__mfa')
   |? _choice=2
   || exec('mfa_delete','__mfa')
   ?}
?};
~~


\portal_reconfig_comment
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Dodatkowy komentarz wyświetlany w oknach zarządzania użytkownikami portalowymi
::----------------------------------------------------------------------------------------------------------------------
'Funkcje \'Włącz dostęp\' i \'Wyłącz dostęp\' do użycia w przypadku, gdy wymagany jest dostęp użytkownika,\n'
'który nie jest powiązany z zatrudnieniem w firmie (np. dostęp do wniosków).\n\n'
'Funkcja \'Odśwież dane\' umożliwia zmodyfikowanie danych takiego użytkownika, np. adresu e-mail.'@


\portal_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Odświeżenie danych użytkownika
::----------------------------------------------------------------------------------------------------------------------
KOMM.init(,,'Odświeżenie konta użytkownika na portalu'@);

exec('czytaj_conf','portal_engine');

{? exec('is_active','portal_engine',1)=0
|| ~~
||
   exec('portal_sync','users');

   {? FUN.ask('Czy odświeżyć konto użytkownika na portalu?'@)
   || _args:=obj_new('uidref','ext','action');
      _args.uidref:=USERS.uidref();
      _args.ext:='';
      _args.action:='refresh';
      _log_level:=-1;
      _result:=exec('run_mwac','sync_mwa','PORTAL_CFG','sl_TenantUserModify',0,_log_level,_args);
      {? type_of(_result)=type_of(0) & _result=0
      || KOMM.error('Nie odświeżono konta użytkownika %1 (%2) na portalu.'@[USERS.DANE,USERS.KOD],0)
      ?}
   ?}
?};

KOMM.select();
~~

:Sign Version 2.0 jowisz:1045 2023/11/28 14:14:52 7dc792c86f417f3c4c28e89d3baac4700fe150308f828ace004bd019e53932960d8ece7b428533ee4f18d380157eeecd1fc1725971fa23cd0d0c2a42f5d35638f83218c982cb52af6a88825e50aa9b795ac70a4a122f99d15d1978fd75cfd7ebb911db0f95a19befc424aeb6a5379ff73d899925781a3efdbd74150601677be8
