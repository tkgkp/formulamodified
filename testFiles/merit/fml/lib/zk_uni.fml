:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zk_uni.fml [8.70]
:: Utworzony: 2005/07/18
:: Autor: GS
::======================================================================================================================
:: Zawartość: Funkcje wykorzystywane przy tworzeniu zestawienia uniwersalnego
::======================================================================================================================


\create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Tworzy definicje kreatora zestawień uniwersalnych, wczytuje poprzednie ustawienia, przygotowuje dane do wydruku
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__ZK_UNI');
__ZK_UNI:=obj_new(13);
__ZK_UNI[11]:=0;
__ZK_UNI[12]:=0;

_max:='maximized_with_title';
ZK_UNI.win_edit('RED');
_fml:='tab_tmp(1';
{! _ii:=1 .. ZK_UNI.fld_num()
|! _fml+=',\''+(_acr:=ZK_UNI.fld_acr(_ii))+'\''+
         ',\'STRING['+$MS.fld_len('ZK_UNI',_acr)+']\''+
         ',\''+ZK_UNI.fld_name(_ii)+'\''
!};
_fml+=')';

__ZK_UNI[1]:=($_fml)();

_wnd:=__ZK_UNI[1].mk_sel('Zdefiniowane zestawienia'@,'N',0,'#zk_uni1',,,,,'U',,,,,'maximized');
__ZK_UNI[1].win_fld(_wnd,,'NAZWA',,,60,,,,1);
_adpr:=
   "  ZK_UNI.blank();
      exec('zk_uni_efld_opt','zk_uni','*',ZK_UNI,ZK_UNI.win_edit('?'));
      ZK_UNI.edit(\"exec('zk_uni_ae','zk_uni',0)\")
   ";
_adpo:=
   "  exec('set_fld','zk_uni',__ZK_UNI[1],ZK_UNI);
      __ZK_UNI[12]+=__ZK_UNI[1].add()
   ";
__ZK_UNI[1].win_act(_wnd,1,'Formuła','Dołącz'@@,,'Dodanie nowej definizji zestawienia.'@,_adpr,_adpo,1,,,,'D');
__ZK_UNI[1].win_act(_wnd,,'Formuła','Dołącz'@@,,'Dodanie nowej definizji zestawienia.'@,_adpr,_adpo,,,,,'D');
__ZK_UNI[1].win_act(_wnd,,'DołączS',,,,$('{? '+_adpr+' || '+_adpo+' ?}; 0'));
__ZK_UNI[1].win_act(_wnd,,'Formuła','&Popraw'@@,,'Poprawienie definicji zestawienia.'@,
   "  exec('set_fld','zk_uni',ZK_UNI,__ZK_UNI[1]);
      exec('zk_uni_efld_opt','zk_uni','*',ZK_UNI,ZK_UNI.win_edit('?'));
      ZK_UNI.edit(\"exec('zk_uni_ae','zk_uni',1)\")
   ",
   "  exec('set_fld','zk_uni',__ZK_UNI[1],ZK_UNI);
      __ZK_UNI[12]+=__ZK_UNI[1].put()
   ",,,,,'P'
);
__ZK_UNI[1].win_act(_wnd,,'Formuła','&Usuń'@@,,'Usunięcie definicji zestawienia.'@,
   "  FUN.ask('Czy usunąć bieżący wiersz?'@)
   ",
   "  {? __ZK_UNI[2].first() || {!|? __ZK_UNI[2].del() !} ?};
      __ZK_UNI[12]+=__ZK_UNI[1].del(1,1);
      0
   ",,,,,'U'
);
__ZK_UNI[1].win_act(_wnd,,'Formuła','Druku&j'@@,,'Wydruk zestawienia.'@,"sel_exit()",,1,,,,'J',,'icon=print');
_editb:="
   _tab:='__ZK_UNI';
   _act:='edit';
   _lck:=0;
   BULK.index('UNIQUE');
   {? BULK.find_key(_tab,_act)
   || {? BULK.r_lock(1,1)
      || BULK.WARTOSC:=OPERATOR.USER().DANE;
         BULK.put()
      || FUN.emsg(
            'Definicja sprawozdania jest edytowana przez użytkownika '+BULK.WARTOSC+'.\n'+
            'Współbieżna modyfikacja zapisów nie jest możliwa.'
         );
         0
      ?}
   || BULK.blank();
      BULK.TABELA:=_tab;
      BULK.OPERACJA:=_act;
      BULK.WARTOSC:=OPERATOR.USER().DANE;
      {? BULK.add()
      || BULK.r_lock(1,1)
      || FUN.ask(
            'Utworzenie znacznika blokady zapisu nie powiodło się.\n'
            'Czy mimo to umożliwić edycję definicji sprawozdania?'@
         )
      ?}
   ?}
";
_edita:="
   exec('refresh','zk_uni',__ZK_UNI);
   __ZK_UNI[11]:=1
";
__ZK_UNI[1].win_act(_wnd,,'Formuła','&Edytuj'@@,,'Zmiana definicji sprawozdania.'@,_editb,_edita,,,,,'E');
__ZK_UNI[1].win_act(_wnd,1,'Formuła','&Edytuj'@@,,'Zmiana definicji sprawozdania.'@,_editb,_edita,,,,,'E');
_stopb:="
   exec('release','zk_uni');
   1
";
_stopa:="
   exec('cfg_save','zk_uni',__ZK_UNI,__ZK_UNI[13]);
   __ZK_UNI[11]:=__ZK_UNI[12]:=0
";
__ZK_UNI[1].win_act(_wnd,,'Formuła','&Zapisz'@@,,'Kończy zmiany definicji sprawozdania.'@,_stopb,_stopa,,,,,'Z');
__ZK_UNI[1].win_act(_wnd,1,'Formuła','&Zapisz'@@,,'Kończy zmiany definicji sprawozdania.'@,_stopb,_stopa,,,,,'Z');
__ZK_UNI[1].win_act(_wnd,,'Wyświetl',,,,
   "  exec('set_fld','zk_uni',ZK_UNI,__ZK_UNI[1]);
      exec('zk_uni_efld_opt','zk_uni','*',ZK_UNI,ZK_UNI.win_edit('?'))
   ",
   "  ZK_UNI.display()
   "
);
__ZK_UNI[1].win_btn(_wnd,'text=%1,panel=right,align=begin'['Dołącz'@],'menu:D');
__ZK_UNI[1].win_btn(_wnd,'text=%1,panel=right,align=begin'['Popraw'@],'menu:P',,,,,,'noempty');
__ZK_UNI[1].win_btn(_wnd,'text=%1,panel=right,align=begin'['Usuń'@],'menu:U',,,,,,'noempty');
__ZK_UNI[1].win_btn(_wnd,'text=%1,panel=right,align=begin'['Druku&j'@],'menu:J',,,,,,'noempty');
__ZK_UNI[1].win_btn(_wnd,'text=%1,panel=bottom,align=end'['Anuluj'@],'key:Esc');
__ZK_UNI[1].win_sel(_wnd);

__ZK_UNI[3]:=tab_tmp(2,
   'SET','STRING[1]','Uwzględnione?',
   'NR','INTEGER','Numer',
   'NAME','STRING[40]','Nazwa pola',
   'TABLE','STRING[8]','Akronim tabeli',
   'FIELD','STRING[8]','Akronim pola',
   'J_TAB','STRING[8]','Akronim tabeli',
   'J_FLD','STRING[8]','Akronim pola',
   'ID','STRING[8]','Identyfikator'
);

_wnd:=__ZK_UNI[3].mk_sel('Dostępne pola do wydruku'@,'N',0,'#zk_uni3',,,,,'U',,,,,'maximized');
__ZK_UNI[3].win_fld(_wnd,,'NAME',,,40,,,'Nazwa pola'@,1);
__ZK_UNI[3].win_act(_wnd,,'Formuła','Przenieś'@@,,'Wybór pola do okna z polami uwzględnionymi na wydruku'@,
   "  exec('test_buf','zk_uni',__ZK_UNI)
   ",
   "  __ZK_UNI[2].DEF:=__ZK_UNI[1].ID;
      __ZK_UNI[2].SET:=__ZK_UNI[2].size()+1;
      __ZK_UNI[2].NAME:=__ZK_UNI[3].NAME;
      __ZK_UNI[2].ID:=__ZK_UNI[3].ID;
      __ZK_UNI[2].add();
      __ZK_UNI[2].first();
      __ZK_UNI[3].clear();
      __ZK_UNI[3].SET:='T';
      __ZK_UNI[3].put();
      __ZK_UNI[3].prefix('N');
      __ZK_UNI[12]:=1;
      grp_disp(__ZK_UNI[2],__ZK_UNI[2].win_sel('?'))
   ",1,,,,'P'
);
__ZK_UNI[3].win_btn(_wnd,'text=%1,panel=right,align=begin'['Przenieś'@],'menu:P',,,,,,'noempty');
__ZK_UNI[3].win_sel(_wnd);

__ZK_UNI[2]:=tab_tmp(2,
   'DEF','STRING[8]','Zestawienie',
   'SET','INTEGER','Kolejność',
   'NAME','STRING[40]','Nazwa pola',
   'ID','STRING[8]','Identyfikator'
);
_wnd:=__ZK_UNI[2].mk_sel('Uwzględniane pola do wydruku'@,'N',0,'#zk_uni2',,,,,'U',,,,,'maximized');
__ZK_UNI[2].win_fld(_wnd,,'NAME',,,40,,,'Nazwa pola'@,1);
__ZK_UNI[2].win_act(_wnd,,'Formuła','Usuń'@@,,'Usunięcie kolumny z wydruku.'@,
   "  FUN.ask('Czy usunąć bieżący wiersz?'@)
   ",
   "  __ZK_UNI[3].clear();
      __ZK_UNI[3].blank(1);
      __ZK_UNI[3].ID:=__ZK_UNI[2].ID;
      {? __ZK_UNI[3].find_rec()
      || __ZK_UNI[3].SET:='N';
         {? __ZK_UNI[3].put()
         || _del:=__ZK_UNI[2].del(,1);
            {? _del=2 | (_del=3 & __ZK_UNI[2].next())
            || __ZK_UNI[2].cntx_psh();
               {!
               |? __ZK_UNI[2].SET-=1;
                  __ZK_UNI[2].put();
                  __ZK_UNI[2].next()
               !};
               __ZK_UNI[2].cntx_pop()
            ?}
         ?}
      ?};
      __ZK_UNI[3].prefix('N');
      __ZK_UNI[3].first();
      __ZK_UNI[12]:=1;
      grp_disp(__ZK_UNI[3],__ZK_UNI[3].win_sel('?'))
   ",1,,,,'U'
);
__ZK_UNI[2].win_act(_wnd,,'Formuła','&Do góry'@@,,'Przesunięcie kolumny na wcześniejszą pozycję wydruku.'@,
   "  {? __ZK_UNI[2].SET>1
      || _ref:=__ZK_UNI[2].ref();
         __ZK_UNI[2].prev();
         __ZK_UNI[2].SET+=1;
         __ZK_UNI[2].put();
         __ZK_UNI[2].seek(_ref);
         __ZK_UNI[2].SET-=1;
         {? __ZK_UNI[2].put()
         || __ZK_UNI[12]:=1
         ?}
      ?}
   ",,,,,,'D'
);
__ZK_UNI[2].win_act(_wnd,,'Formuła','&W dół'@@,,'Przesunięcie pola na kolejną pozycję wydruku.'@,
   "  {? __ZK_UNI[2].SET<__ZK_UNI[2].size()
      || _ref:=__ZK_UNI[2].ref();
         __ZK_UNI[2].next();
         __ZK_UNI[2].SET-=1;
         __ZK_UNI[2].put();
         __ZK_UNI[2].seek(_ref);
         __ZK_UNI[2].SET+=1;
         {? __ZK_UNI[2].put()
         || __ZK_UNI[12]:=1
         ?}
      ?}
   ",,,,,,'W'
);
__ZK_UNI[2].win_btn(_wnd,'text=%1,panel=right,align=begin'['Do góry'@],'menu:D',,,,,,'noempty');
__ZK_UNI[2].win_btn(_wnd,'text=%1,panel=right,align=begin'['W dół'@],'menu:W',,,,,,'noempty');
__ZK_UNI[2].win_btn(_wnd,'text=%1,panel=right,align=begin'['Usuń'@],'menu:U',,,,,,'noempty');
__ZK_UNI[2].win_sel(_wnd);

__ZK_UNI[13]:='zk_uni.txt';
exec('cfg_flds','zk_uni',__ZK_UNI[3]);
exec('cfg_load','zk_uni',__ZK_UNI,__ZK_UNI[13]);

_grupa:=__ZK_UNI[1].grp_make('Zestawienia uniwersalne'@,,'zk_uni',,,
   "  {? __ZK_UNI[12] & FUN.ask('Czy zachować wprowadzone zmiany?'@)
      || exec('cfg_save','zk_uni',__ZK_UNI,__ZK_UNI[13])
      ?};
      exec('release','zk_uni');
      1
   "
);
__ZK_UNI[1].grp_sel(_grupa,__ZK_UNI[1],__ZK_UNI[1].win_sel('?'),,
   $("exec('refresh','zk_uni',__ZK_UNI);
      exec('grp_disp','zk_uni',__ZK_UNI);
      _off:='E:E';
      {? ~__ZK_UNI[11]
      || _off:='DPUZ:DZ'
      ?};
      __ZK_UNI[1].actions_grayed("+'\''+__ZK_UNI[1].win_sel('?')+'\''+",_off)
   "),,,,,,,,_max
);
__ZK_UNI[1].grp_splt(_grupa,,'vertical','p1');
__ZK_UNI[1].grp_sel(_grupa,__ZK_UNI[2],__ZK_UNI[2].win_sel('?'),,
   "  _off:='';
      {? ~__ZK_UNI[11]
      || _off:='DWU:D'
      ?};
      __ZK_UNI[2].actions_grayed(__ZK_UNI[2].win_sel('?'),_off)
   ",,,,,,,,_max);
__ZK_UNI[1].grp_splt(_grupa,,'vertical','p2');
__ZK_UNI[1].grp_sel(_grupa,__ZK_UNI[3],__ZK_UNI[3].win_sel('?'),,
   "  _off:='';
      {? ~__ZK_UNI[11]
      || _off:='P'
      ?};
      __ZK_UNI[3].actions_grayed(__ZK_UNI[3].win_sel('?'),_off)
   ",,,,,,,,_max);
__ZK_UNI[1].win_sel(_grupa);

_do:=__ZK_UNI[1].select();
{? _do
|| exec('process','zk_uni',__ZK_UNI)
|| exec('kill','zk_uni')
?}


\release
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Zwalnia blokadę edycji.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_tab:='__ZK_UNI';
_act:='edit';
_lck:=0;
BULK.index('UNIQUE');
{? BULK.find_key(_tab,_act)
|| BULK.r_unlock()
?};
~~


\refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Ponownie odczytuje konfiguracje
::   WE: _a - alias do obiektu przechowujacego definicje zestawienia
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a[11]<>0
|| return()
?};
_id:=_a[1].ID;
_a[1].clear();
_a[1].erase();
_a[2].clear();
_a[2].erase();
exec('cfg_load','zk_uni',_a,_a[13]);
_a[1].blank(1);
_a[1].ID:=_id;
_a[1].find_rec();
~~


\zk_uni_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli ZK_UNI.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(ZK_UNI)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld=''
|| ZK_UNI.efld_opt(_we,'mark=1',,'NAZWA')
?};

{? _fld='' | _fld='POMIN'
|| _sval:=$(ZK_UNI.POMIN='T');
   ZK_UNI.efld_opt(_we,'enable=%1' [_sval],,'POM_BEZP');
   ZK_UNI.efld_opt(_we,'enable=%1' [_sval],,'POM_WYCH');
   ZK_UNI.efld_opt(_we,'enable=%1' [_sval],,'POM_WOJS')
?};

1


\zk_uni_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Weryfikuje poprawność danych definicji zestawienia (musi być podana
::       nazwa jednoznacznie identyfikujaca zestawienie)
::   WE: Tryb pracy:
::          0 - Dołączanie [domyślnie];
::          1 - Poprawianie;
::   WY: 1 - dane sa poprawne
::       'NAZWA' - pominięto nazwę zestawienia lub zestawienie o takiej nazwie już zostało zdefiniowane
::  OLD: \spr_opis/zk_uni.fml
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

{? (_chk:=__CHK.record(ZK_UNI,,'NAZWA'))<>''
|| return(_chk)
?};

_ref:={? _put || __ZK_UNI[1].ref() || null() ?};
__ZK_UNI[1].cntx_psh();
__ZK_UNI[1].blank(1);
__ZK_UNI[1].NAZWA:=ZK_UNI.NAZWA;
{? __ZK_UNI[1].find_rec() & __ZK_UNI[1].NAZWA=ZK_UNI.NAZWA & __ZK_UNI[1].ref()<>_ref
|| FUN.emsg('Zestawienie o podanej nazwie już istnieje.'@);
   _chk:='NAZWA'
?};
__ZK_UNI[1].cntx_pop();
{? _chk<>''
|| return(_chk)
?};

{? ZK_UNI.POMIN='N'
|| ZK_UNI.POM_BEZP:=ZK_UNI.POM_WYCH:=ZK_UNI.POM_WOJS:='N'
?};

''


\grp_disp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Funkcja odpowiedzialna za odrysowanie zawartości okienka kreatora (odświeżanie list wybranych i dostępnych pól)
::   WE: _a - alias do obiektu przechowującego definicje zestawień
::----------------------------------------------------------------------------------------------------------------------
_a[3].cntx_psh();
_a[3].clear();
{!
|? _a[3].last() & _a[3].SET='T'
|! _a[3].SET:='N';
   _a[3].put()
!};
_a[3].cntx_pop();

_a[2].prefix(_a[1].ID);
{? _a[2].first()
|| _a[3].clear();
   {!
   |? {? exec('find_fld','zk_uni',_a)
      || _a[3].SET:='T';
         _a[3].put()
      ?};
      _a[2].next()
   !}
?};
_a[3].prefix({? _a[1].ref() || 'N' || 'T' ?});
_a[3].first();
_a[2].first();

grp_disp(_a[2],_a[2].win_sel('?'),1);
grp_disp(_a[3],_a[3].win_sel('?'),1)


\find_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Wyszukuje w buforze __ZK_UNI[3] zapis odpowiadający bieżącemu zapisowi w buforze __ZK_UNI[2]
::   WE: _a - alias do obiektu przechowującego definicje zestawień
::   WY: zgodny z wynikiem działania metody find_rec dla tabeli
::----------------------------------------------------------------------------------------------------------------------
_a[3].blank(1);
_a[3].ID:=_a[2].ID;
_a[3].find_rec()


\test_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Sprawdza, czy dla wybranych pól nie została przekroczona dopuszczalna
::       dlugość klucza porządkujacego (przyjete ograniczenie 250 bajtów)
::   WE: _a - alias do obiektu przechowującego definicje zestawień
::   WY: 0 - dopuszczalna dlugość została przekroczona
::       1 - jest jeszcze "miejsce" na wybrane pole
::----------------------------------------------------------------------------------------------------------------------
_get:="
    _tab:={? _a.J_TAB='' || _a.TABLE || _a.J_TAB ?};
    _fld:={? _a.J_FLD='' || _a.FIELD || _a.J_FLD ?};
    {? MS.fld_type(_tab,_fld)=type_of('')
    || MS.fld_len(_tab,_fld)
    || 12
    ?}";
_len:=_get(_a[3]);
_a[3].cntx_psh();
_a[3].prefix('T');
{? _a[3].first()
|| {! |? _len+=_get(_a[3]); _a[3].next() !}
?};
_a[3].cntx_pop();
{? _len>250
|| _fld:=
       {? +_a[3].NAME>22
       || form(_a[3].NAME,19)+'...'
       || _a[3].NAME
       ?};
   FUN.info('\nŁączna długość pól do uwzględnienia w zestawieniu\nprzekroczyłaby dopuszczalną, maksymalną wartość.'@+
            '\n(pole "%1" nie będzie dodane)\n'@[_fld]);
   0
|| 1
?}


\set_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Przepisuje wartości pól obiektów
::   WE: _a - alias do obiektu docelowego
::       _b - alias do obiektu zródłowego
::----------------------------------------------------------------------------------------------------------------------
{! _n:=1.._a.fld_num() |! _a[_n]:=_b[_n] !}


\key_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Funkcja pomocnicza - generuje losowy ciag znakow
::   WE: _a - dlugosc generowanego ciagu
::   WY: ciag losowo wybranych wielkich liter
::----------------------------------------------------------------------------------------------------------------------
_key:='';
{! _n:=1.._a |!
   _key+=%(65+rand*25)
!};
_key


\get_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Zwraca unikalną wartość klucza dla zapisu w buforze __ZK_UNI[1]
::       (formuła hash'ująca)
::   WY: ośmioznakowy unikalny kod zapisu
::----------------------------------------------------------------------------------------------------------------------
__ZK_UNI[1].cntx_psh();
{!
|? __ZK_UNI[1].blank(1);
   _key:=exec('key_gen','zk_uni',8);
   __ZK_UNI[1].ID:=_key;
   __ZK_UNI[1].find_rec()
!};
__ZK_UNI[1].cntx_pop();
_key


\zk_uni_pomin_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Po redagowaniu pola ZK_UNI.POMIN.
::  OLD: \uni_pom/zk_uni.fml
::----------------------------------------------------------------------------------------------------------------------
exec('zk_uni_efld_opt','zk_uni')


\zk_unit_pom_x_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Po redagowaniu pól: ZK_UNI.POM_BEZP, ZK_UNI.POM_WYCH, ZK_UNI.POM_WOJS.
::  OLD: \set_pom/zk_uni.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZK_UNI.POM_BEZP+ZK_UNI.POM_WYCH+ZK_UNI.POM_WOJS='NNN'
|| ZK_UNI.POMIN:='N';
   exec('zk_uni_efld_opt','zk_uni')
?};
1


\cfg_flds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Wypełnia listę pól dostępnych dla zestawień
::   WE: _a - alias do bufora __ZK_UNI[3]
::----------------------------------------------------------------------------------------------------------------------
exec('add_flds','zk_uni',_a,'OSOBA','NAZWISKO');
: exec('add_flds','zk_uni',_a,'OSOBA','RODOWE');
exec('add_flds','zk_uni',_a,'OSOBA','PIERWSZE');
exec('add_flds','zk_uni',_a,'OSOBA','DRUGIE');
: exec('add_flds','zk_uni',_a,'OSOBA','OJCIEC');
: exec('add_flds','zk_uni',_a,'OSOBA','MATKA');
exec('add_flds','zk_uni',_a,'OSOBA','PLEC');
: exec('add_flds','zk_uni',_a,'OSOBA','UR_DATA');
exec('add_flds','zk_uni',_a,'OSOBA','UR_MIEJ');
exec('add_flds','zk_uni',_a,'OSOBA','OBCY');
exec('add_flds','zk_uni',_a,'OSOBA','KARTA');
: exec('add_flds','zk_uni',_a,'OSOBA','NAROD');
exec('add_flds','zk_uni',_a,'OSOBA','OBYWATEL');
: exec('add_flds','zk_uni',_a,'OSOBA','DOWOD');
: exec('add_flds','zk_uni',_a,'OSOBA','ORG_DOW');
: exec('add_flds','zk_uni',_a,'OSOBA','PASZPORT');
: exec('add_flds','zk_uni',_a,'OSOBA','ORG_PASZ');
: exec('add_flds','zk_uni',_a,'OSOBA','PESEL');
: exec('add_flds','zk_uni',_a,'OSOBA','NIP');
exec('add_flds','zk_uni',_a,'OSOBA','US','US','NU');
exec('add_flds','zk_uni',_a,'OSOBA','WYK','WYK','WK');
:exec('add_flds','zk_uni',_a,'OSOBA','ZAW','ZAW','ZD');

exec('add_flds','zk_uni',_a,'P','T',,,'Numer teczki');
exec('add_flds','zk_uni',_a,'P','ZA',,,'Czy zatrudniony?');
exec('add_flds','zk_uni',_a,'P','DZA');
exec('add_flds','zk_uni',_a,'P','FNA','SLO_NAZ','NAZWA');
exec('add_flds','zk_uni',_a,'P','ZAW','ZAW','ZD');
: exec('add_flds','zk_uni',_a,'P','KAL','KAL_NAZW','NAZWA');
exec('add_flds','zk_uni',_a,'P','KIN');
exec('add_flds','zk_uni',_a,'P','CO');
exec('add_flds','zk_uni',_a,'P','DC');
exec('add_flds','zk_uni',_a,'P','DS');
exec('add_flds','zk_uni',_a,'P','DU');
exec('add_flds','zk_uni',_a,'P','DZ');
exec('add_flds','zk_uni',_a,'P','USPKOD','S_ZUS','KOD');
exec('add_flds','zk_uni',_a,'P','KK','KK','SYM');

exec('add_flds','zk_uni',_a,'H','WY',,,'Wymiar zatrudniania');
: exec('add_flds','zk_uni',_a,'H','WYM');
: exec('add_flds','zk_uni',_a,'H','WYL');
exec('add_flds','zk_uni',_a,'H','KA',,,'Kategoria zaszeregowania');
exec('add_flds','zk_uni',_a,'H','KADOD',,,'Kategoria dodatku funkcyjnego');
exec('add_flds','zk_uni',_a,'H','WYDZIAL','UD_SKL','SYMBOL','Jednostka organizacyjna');
exec('add_flds','zk_uni',_a,'H','ST','STN','ST');
exec('add_flds','zk_uni',_a,'H','S1',,,'Płaca zasadnicza / stawka godzinowa');
exec('add_flds','zk_uni',_a,'H','S2',,,'Dodatek funkcyjny / brygadzistowski');
exec('add_flds','zk_uni',_a,'H','S3',,,'Dodatek');
: exec('add_flds','zk_uni',_a,'H','KZ','H_ZM','KZ');
exec('add_flds','zk_uni',_a,'H','RU','RU','K','Rodzaj umowy o pracę');
exec('add_flds','zk_uni',_a,'H','CP','CP','S','Charakter pracy')


\add_flds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Funkcja pomocnicza - dodaje definicje pola tabeli do listy dostępnych pól
::   WE: _a - alias do bufora __ZK_UNI[3]
::       _b - akronim tabeli
::       _c - akronim pola
::       _d - akronim tabeli złączeniowej (opcjonalny)
::       _e - akronim pola w złączeniu (opcjonalny)
::       _f - nazwa pola wyświetlana na liście (opcjonalnie, jeśli pominięta,
::            to przyjęta będzie określona w definicji systemu)
::----------------------------------------------------------------------------------------------------------------------
: akronim tabeli używanej w polu złączeniowym
{? var_press('_d')<>type_of('') || _d:='' ?};
: akronim pola reprezentującego złączenie
{? var_press('_e')<>type_of('') || _e:='' ?};
: określenie nazwy pola z definicji systemu
{? var_press('_f')<>type_of('')
|| _f:='';
   {| ($_b)() |! {! _ii:=1..fld_num() |? _f='' |! {? fld_acr(_ii)=_c || _f:=fld_name(_ii) ?} !} |}
?};
: dodaj do zestawu definicję pola
exec('new_fld','zk_uni',_a,'N',_a.size+1,_f,_b,_c,_d,_e)


\new_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Funkcja pomocnicza - ustawia wartości pol bufora __ZK_UNI[3] zgodnie z przekazanymi przez kolejne argumenty
::       (dla pola ID generowany jest unikalny klucz)
::   WE: _a - alias do bufora __ZK_UNI[3]
::       _b... - wartości pól następujących po polu ID w buforze __ZK_UNI[3]
::----------------------------------------------------------------------------------------------------------------------
{!
|? _a.blank(1);
   _a.ID:=exec('key_gen','zk_uni',8);
   _a.find_rec()
!};
{! _arg:=2.._
|! _a[_arg-1]:=_[_arg]
!};
_a.add()


\cfg_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Wczytuje z pliku tekstowego definicje zestawien
::   WE: _a - alias do obiektu przechowujacego definicje zestawienia
::       _b - nazwa pliku
::----------------------------------------------------------------------------------------------------------------------
_a[3].cntx_psh();
_a[3].clear();
{? _handle:=fopen(_b,'r',1)
|| {!
   |? (_fml:=fread(_handle))<>'\n'
   |! ($_fml)(_a)
   !};
   fclose(_handle)
?};
_a[3].cntx_pop();
~~


\cfg_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Zapisuje definicje zestawień do pliku tekstowego
::   WE: _a - alias do obiektu przechowującego definicje zestawienia
::       _b - nazwa pliku
::----------------------------------------------------------------------------------------------------------------------
{? _handle:=fopen(_b,'w',1)
|| {! _ii:=1..obj_len(_a)
   |! {? var_press('['+$_ii+']',_a)=type_of(SYSLOG)
      || _a[_ii].cntx_psh()
      ?}
   !};
   {? _a[1].first()
   || {!
      |? _set:='';
         {! _ii:=1.._a[1].fld_num()
         |! _set+='_a[1].'+_a[1].fld_acr(_ii)+':=\''+_a[1][_ii]+'\';'
         !};
         _set+='_a[1].add()';
         fwrite(_handle,_set);
         _a[1].next()
      !}
   ?};
   _a[3].clear();
   _a[2].clear();
   {? _a[2].first()
   || {!
      |? _a[3].blank(1);
         _a[3].ID:=_a[2].ID;
         {? _a[3].find_rec()
         || fwrite(_handle,
               '{?_a[3].find_tab(,'
               '\'TABLE\',,\'=\',\''+_a[3].TABLE+'\','+
               '\'FIELD\',,\'=\',\''+_a[3].FIELD+'\','+
               '\'J_TAB\',,\'=\',\''+_a[3].J_TAB+'\','+
               '\'J_FLD\',,\'=\',\''+_a[3].J_FLD+'\''+
               ') ||'+
               '_a[2].DEF:=\''+_a[2].DEF+'\';'+
               '_a[2].SET:='+$_a[2].SET+';'+
               '_a[2].NAME:=_a[3].NAME;'+
               '_a[2].ID:=_a[3].ID;'+
               '_a[2].add()'+
               '?}'
            )
         ?};
         _a[2].next()
      !}
   ?};
   {! _ii:=1..obj_len(_a)
   |! {? var_press('['+$_ii+']',_a)=type_of(SYSLOG)
      || _a[_ii].cntx_pop()
      ?}
   !};
   fclose(_handle)
?}


\process
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Przygotowuje dane do wydrukowania
::   WE: _a - alias do obiektu przechowującego definicje zestawień
::----------------------------------------------------------------------------------------------------------------------
_fml:='tab_tmp(1,\'LP\',\'INTEGER\',\'\'';
_add:='H.P().OSOBA().NAZWISKO';
_sel:='';
_jestKK:=0;
{? _a[2].first()
|| _a[3].clear();
   {!
   |? {? exec('find_fld','zk_uni',_a)
      || _jestKK:=0;
         _acr:='G'+$_a[2].SET;
         {? _a[3].TABLE='P' & _a[3].FIELD='KK'
         || _jestKK:=1;
            _add+=';_a.'+_acr+':='+'exec(\'kk_hist\',\'zk_uni\',P.ref,_b)'
         || _add+=';_a.'+_acr+':='+_a[3].TABLE+'.'+_a[3].FIELD
         ?};
         _sel+=_acr+',';
         _tab:={? _a[3].J_TAB<>''
               || {? ~_jestKK || _add+='().'+_a[3].J_FLD ?};
                  _a[3].J_TAB
               || _a[3].TABLE
               ?};
         _fld:={? _a[3].J_TAB<>'' || _a[3].J_FLD || _a[3].FIELD ?};
         _type:=MS.fld_type(_tab,_fld);
         _fml+=',\''+_acr+'\',\''+
               {? _type=type_of('')
               || 'STRING['+$MS.fld_len(_tab,_fld)+']'
               |? _type=type_of(0)
               || {? ~MS.fld_real(_tab,_fld)
                  || 'INTEGER'
                  || 'REAL'
                  ?}
               |? _type=type_of(date())
               || 'DATE'
               |? _type=type_of(time())
               || 'TIME'
               || FUN.info('\n%1\n'['Błąd w konstrukcji sprawozdania.'@]);
                  exec('kill','zk_uni');
                  return()
               ?}+'\',\''+_a[2].NAME+'\''
      ?};
      _a[2].next()
   !}
|| FUN.info('\n%1\n'['Nie określono pól dla zestawienia.'@]);
   exec('kill','zk_uni');
   return
?};
_fml+=',\'WY\',\'REAL\',\'Wymiar\')';
_a[4]:=($_fml)();

_add+='; _a.WY:=H.RWY; _a.add()';
_add:=$_add;

:: pobranie daty zestawienia
_TAB:=exec('par_wydr_ddp','pkd',PAR_WYDR.TITLE,,date(),'Data zestawienia'@);
{? ~_TAB.size()
|| exec('kill','zk_uni');
   return()
?};
_data:=dt:=_TAB.OD;

P.cntx_psh();
P.index('PRACOSOW');
P.prefix(exec('ref_firma','ustawienia'));
{? P.first()
|| _PRAC:={? _a[1].FILTER='T'
          || exec('wybierz_parses','pracownik','PKD').P
          || exec('dostepne_p','schemat','PKD',__F_ZATR.P)
          ?};
   _test_url:="_test:=1;
               {? _b='T'
               || N.prefix('N',P.ref());
                  {? N.find_le(_a) & N.DO>=_a
                  || {? (_c='T' & __RUB.sys_attr(N.NB,112,N.OD))
                        |
                        (_d='T' & __RUB.sys_attr(N.NB,114,N.OD))
                        |
                        (_e='T' & __RUB.sys_attr(N.NB,1323,N.OD))
                     || _test:=0
                     ?}

                  ?}
               ?};
               _test";

   {? _PRAC.first()
   || P_KK.cntx_psh();
      N.cntx_psh();
      N.index('NIEOBECN');
      H.cntx_psh();
      H.index('_HISTKOD');
      {!
      |? {? P.seek({? _a[1].FILTER='T' || _PRAC.SQL || _PRAC.REF ?}) & P.DZA<=_data & (P.DZ=#0 | _data<=P.DZ)
         || {? _test_url(_data,_a[1].POMIN,_a[1].POM_BEZP,_a[1].POM_WYCH,_a[1].POM_WOJS)
            || H.prefix(P.ref,'Z');
               {? H.find_le(_data) || _add(_a[4],_data) ?}
            ?}
         ?};
         _PRAC.next()
      !};
      N.cntx_pop();
      H.cntx_pop;
      P_KK.cntx_pop()
   ?}
?};
P.cntx_pop();
_a[5]:=sql( 'select '+_sel+'count(*) OSOBY, sum(WY) ETATY  from :_a  group by '+(_sel-1), _a[4])


\kill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.70]
:: OPIS: Zwalnia zasoby przydzielone na potrzeby zestawienia uniwersalnego
::----------------------------------------------------------------------------------------------------------------------
{? var_press('__ZK_UNI')>=100
|| {! _ii:=1..obj_len(__ZK_UNI)
   |! {? var_press('['+$_ii+']',__ZK_UNI)=type_of(SYSLOG) || obj_del(__ZK_UNI[_ii]) ?}
   !};
   obj_del(__ZK_UNI);
   &__ZK_UNI;
   undefine()
?}


\kk_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.30]
:: OPIS: Funkcja wyszukuje historię konta kosztów na podaną datę, jeśli nie ma danych w historii
::       pobiera aktualne konto kosztów z tabeli pracownika
::   WE: _a - P.ref - ref pracownika, jeśli nie podano pobierany jest P.ref
::       _b - DATE - data do ustalenia historii konta kosztów, jeśli nie podano to bieżąca data
::   WY: Symbol konta kosztów KK.SYM
::---------------------------------------------------------------------------------------------------------------------
{? var_press('_a')<>type_of(null()) || _a:=P.ref() ?};
{? var_press('_b')<>type_of(date()) || _b:=date() ?};
_pref:=_a;
_data:=_b;
P_KK.index('OD');
P_KK.prefix(P.ref());
{? P_KK.find_le(_data)
|| P_KK.KK().SYM
|| P.KK().SYM
?}

:Sign Version 2.0 jowisz:1045 2023/10/11 07:44:35 c538d1a305ccc0f4f244ac309cb93c8464aae0cd4fbe3387543c030b18bff0be8ffb22c8bc5ec0e0a3fec41ed756c696d4c644cee3ebfb4f60e893f5af161057c53e3caa927f40ce60b66f1918a27be975c9ed65234ccee1a9d14f9a683fa0eb6fd6543162b8d7522ea9f061b6889ef1bf30da8b2845bc4c113c38a8784be7b7
