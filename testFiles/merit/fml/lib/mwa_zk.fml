:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_zk.fml
:: Utworzony: 16.10.2018
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły do obsługi zamówień (sprzedaży i wewnętrznych) przez MacroWebAPI
::======================================================================================================================


\serialize_zk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Formuła pomocnicza do serializacji zamówień do XML
::       Kontekst wywołania: ustawiona dziedzina tabeli ZK_N
::   WE: _a - obiekt???
::       _b - JSON z błędami
::       _c - 1-ograniczenie dziedziny wg filtra, 0-ograniczenie dziedziny wg prefiksu (domyślnie)
::----------------------------------------------------------------------------------------------------------------------
_filter:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_resp:=fopen(null(),'Uw',,1,1);

:: Ograniczenie dziedziny za pomocą filtra
{? _filter
|| _ZK_N:=sql('select * from ZK_N join filter_of(ZK_N)');
   _data:="
      params_set(params_get());
      _pozycje:=\"
         ZK_P.index('NAG');
         ZK_P.prefix(BIT.sqlint(params_get().ZK_N.REFERENC));
         ZK_P.xml_records(params_get().resp,,'pozycja','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
            ,'REFERENCE',,'IDADD',
            ,'POZ',,'M',,'M:M_KTM','KTM','ILZ',,'CENA',,'WS2',,'J2:J2_KOD','KOD'
         );
         ''
      \";
      params_get().ZK_N.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
         ,'pozycje',_pozycje
         ,'DP',,'DT',
         ,'REFERENC:REFERENCE',,'IDADD',,'IDPUT',
         ,'T',,'ZAM_KL',,'KH',,'KHCLIENT',,'HAN',,'ODDZ',,'UW',,'MG',,'MGSYM',,'TP',
         ,'ODBID',,'ODB',,'OSOB',,'OSOBID',,'IDABSTOR',
      );
      ''
   "

:: Ograniczenie dziedziny za pomocą prefiksu
|| _ZK_N:=ZK_N;
   _data:="
      params_set(params_get());
      _pozycje:=\"
         ZK_P.index('NAG');
         ZK_P.prefix(ZK_N.ref());
         ZK_P.xml_records(params_get().resp,,'pozycja','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
            ,'REFERENCE',,'IDADD',
            ,'POZ',,'M',,'M:M_KTM','KTM','ILZ',,'CENA',,'WS2',,'J2:J2_KOD','KOD'
         );
         ''
      \";
      ZK_N.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
         ,'pozycje',_pozycje
         ,'DP',,'DT',
         ,'REFERENCE',,'IDADD',,'IDPUT',
         ,'T',,'ZAM_KL',,'KH',,'KHCLIENT',,'HAN',,'ODDZ',,'UW',,'MG',,'MGSYM',,'TP',
         ,'ODBID',,'ODB',,'OSOB',,'OSOBID',,'IDABSTOR',
      );
      ''
   "
?};

_result:="
   json_tparse(params_get().json).json_tconvert(params_get().resp,,,,'result','p',,'noheader=1,nodata=1,indentation=1');
   ''
";

_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('resp',_resp,'json',_b,'ZK_N',_ZK_N);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
   ,'',_result
);

_resp


\read_zks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Odczytuje wszystkie zamówienia sprzedaży
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_idput:=exec('get_option','mwapi',_par,'IDPUT').value;
_oddz:=exec('get_option','mwapi',_par,'Oddz').value;
{? _oddz='' || _oddz:='c' ?};

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

{? ~exec('chk_oddz','mwapi',_oddz)
||
   mwa_status(400)
?};

{? exec('authorized','mwa_zk',_par) & ~_wsenv.has_errors()
||
   _date:=date();
   __PARSES.setVal('OddzialLogProd',_oddz);
   _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LSP';
   _args.AR:=_date~1;
   _args.AM:=_date~2;
   __PARSES.setVal('OkresRok',_args);
   __PARSES.setEnv('LSP_ZKN_DRZK');

::   _wsenv.add_info('Lista zamówień sprzedaży z oddziału %1.'@[_oddz]);
::   _wsenv.add_info('Znacznik czasowy większy niż %1.'@[_idput]);

   {? _idput<>''
   || ZK_N.prefix();
      ZK_N.f_set('T(R),KH,ZAM_KL',,'1TYPYZAM.R=\'Z\' and ZK_N.IDPUT>=\':_a\'',_idput);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_zk','mwa_zk',_par,_resp,1);
      ZK_N.f_clear()
   || ZK_N.index('ZAM_KL');
      ZK_N.prefix('Z');
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_zk','mwa_zk',_par,_resp,0)
   ?}
||
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result


\read_zk_idadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Odczytuje zamówienie na podstawie pola IDADD
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_oddz:=exec('get_option','mwapi',_par,'Oddz').value;
{? _oddz='' || _oddz:='c' ?};
_idadd:=exec('get_option','mwapi',_par,'IDADD').value;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

{? ~exec('chk_oddz','mwapi',_oddz)
||
   mwa_status(400)
?};

{? exec('authorized','mwa_zk',_par) & ~_wsenv.has_errors()
||
   _date:=date();
   __PARSES.setVal('OddzialLogProd',_oddz);
   _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LSP';
   _args.AR:=_date~1;
   _args.AM:=_date~2;
   __PARSES.setVal('OkresRok',_args);
   __PARSES.setEnv('LSP_ZKN_DRZK');

   ZK_N.index('IDADD');
   ZK_N.prefix();
   {? +_idadd=31 & ZK_N.find_key(_idadd)
   || ZK_N.prefix(ZK_N.IDADD);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_zk','mwa_zk',_par,_resp)
   || _msg:='Nieprawidłowa wartość parametru %1 [%2].'@['"IDADD"',_idadd];
      mwa_status(400,_msg);
      _wsenv.add_error(_msg);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   ?}
||
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result


\set_buffers
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Ustala zawartość bufora nagłówka i tablicy buforów pozycji zamówienia (funkcja dedykowana)
::   WE: _a - [FILE] lub [TEXT] zawiera analizowany XML
::       _b - request method
::   WY: obj_new('ZK_N','POZ') - bufor nagłówka i tablica buforów pozycji
::----------------------------------------------------------------------------------------------------------------------
_xml:=_a;
_method:=_b;
_buffers:=obj_new('ZK_N','POZ');
_buffers.ZK_N:=exec('ZK_N','buffer',"'Odb_KOD','ABS_S_C'");
_buffers.ZK_N.blank(); _buffers.ZK_N.UW:=_buffers.ZK_N.ABS_S_C:='';

_tab:=xml_tparse(_xml);

:: Podgląd drzewka - do włączenia dla debugowania
::_wer:=_tab.mk_sel(,'P',1,'qwerty',,,,1);
::_tab.win_sel(_wer);
::_tab.select();
_tab.cntx_psh();
_dos:=0;
{?_tab.find_tab(,'NAME',,'=','Dos')
||
   _dos:=1;
   _tab.prefix(_tab.ref());
   {? _tab.first()
   ||
      _tab.prefix(_tab.ref());
      _tab.first()
   ?};
   {!|?
      {? type_of(_c)=2 & _c='ABSTOREB2B' & _tab.NAME='CN' & (#_tab.VAL=0) || _dos:=0 ?};
      {? type_of(_c)=2 & _c='ABSTOREB2C' & _tab.NAME='CB' & (#_tab.VAL=0) || _dos:=0 ?};
      _tab.next()
   !}
?};

_tab.cntx_pop();

{? _tab.find_tab(,'NAME',,'=',_method+'Request')
||
:: Pętla po zawartości parametru 'Zam'
   _tab.cntx_psh();
   {? _tab.find_tab(,'NAME',,'=','Zam')
   || _tab.prefix(_tab.ref());
      {? _tab.first()
      || {!
         |?
::          Pola tabeli ZK_N (nagłówek zamówienia)
            {? _tab.NAME<>'pozycje'
            || exec('set_field','mwapi',_tab,ZK_N,_buffers.ZK_N)

::          Pozycje
            || _tab.cntx_psh();
               _tab.prefix(_tab.ref());
               _buffers.POZ:=obj_new(_tab.size()+_dos); _it:=0;
               {? _tab.first()
               || {!
                  |? _it+=1;
                     {? _tab.NAME='pozycja'
                     || _buffers.POZ[_it]:=exec('ZK_P','buffer',"'M_KTM','J2_KOD'");
                        _buffers.POZ[_it].blank();
                        _buffers.POZ[_it].M_KTM:='';
                        _buffers.POZ[_it].J2_KOD:='';
                        _tab.cntx_psh();
                        _tab.prefix(_tab.ref());
                        {? _tab.first()
                        || {!
                           |?
::                            Pola tabeli ZK_P (pozycja zamówienia)
                              exec('set_field','mwapi',_tab,ZK_P,_buffers.POZ[_it]);
                              _tab.next()
                           !}
                        ?};
                        _tab.cntx_pop()
                     ?};
                     _tab.next()
                  !}
               ?};
               _tab.cntx_pop()
            ?};
            _tab.next()
         !}
      ?}
   ?};
   _tab.cntx_pop();
:: Pozycja dostawy
   _tab.cntx_psh();
   {? _tab.find_tab(,'NAME',,'=','Dos') & _dos
   ||
      _tab.prefix(_tab.ref());
      _tab.first();
      {? var_press('_it')=1
      ||
         _it+=1;
         _buffers.POZ[_it]:=exec('ZK_P','buffer',"'M_KTM','J2_KOD'");
         _buffers.POZ[_it].blank();
         _buffers.POZ[_it].M_KTM:='';
         _buffers.POZ[_it].J2_KOD:='';
         _tab.cntx_psh();
         _tab.prefix(_tab.ref());
         {? _tab.first()
         || {!
            |?
               exec('set_field','mwapi',_tab,ZK_P,_buffers.POZ[_it]);
               _tab.next()
            !}
         ?};
         _buffers.POZ[_it].ILZ:=1;
         _buffers.POZ[_it].POZ:=_it;
         VAR_DEL.delete('__ABS_DOS');
         __ABS_DOS:=_buffers.POZ[_it].M_KTM;
         {? type_of(_c)=2 & _c='ABSTOREB2B' || _buffers.POZ[_it].M_KTM:=exec('param_get','abs_conf', 800122, 2) ?};
         {? type_of(_c)=2 & _c='ABSTOREB2C' || _buffers.POZ[_it].M_KTM:=exec('param_get','abs_conf', 800222, 2) ?};
         _tab.cntx_pop()
      ?}
   ?};
   _tab.cntx_pop()
?};
_buffers


\create_zks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Dodaje zamówienie sprzeaży
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

_name_conf:=~(-exec('get_option','mwapi',_par,'Name_conf').value);
_oddz:=exec('get_option','mwapi',_par,'Oddz').value;
:wartość do wyłączenia niektórych zabezpieczeń

:: Ustala zawartość pól nagłówka zamówienia i pozycji (zapis do tablic buforowych)
_buffers:=exec('set_buffers','mwa_zk',_par.DATA,_par.METHOD,_name_conf);

:: Uzupełnia pola w tablicy buforowej
params_exec('update_buffers','mwa_zk',_buffers,_name_conf,_oddz);

::maska tabeli
_mask:='zknag'+_buffers.ZK_N.ODDZ+'__';

:: Kontrola blokowania rekordu kontrahenta - musi być przed transakcją
KH.cntx_psh();
KH.prefix();
{? KH.seek(_buffers.ZK_N.KH)
|| {? KH.r_lock(1,1,1)
   || KH.r_unlock()
   || FUN.emsg('Kontrahent jest redagowany.'@)
   ?}
?};
KH.cntx_pop();

{? ~_wsenv.has_errors()
||
   {? exec('create_chk','mwa_zk',_name_conf,_buffers)
   ||
::    parametry pracy dla czynności
      __PARSES.setVal('OddzialLogProd',_buffers.ZK_N.ODDZ);
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LZK';
      _args.AR:=_buffers.ZK_N.DP~1;
      _args.AM:=_buffers.ZK_N.DP~2;
      __PARSES.setVal('OkresRok',_args);
      obj_del(_args);
::    uruchomienie czynności, czynność jest kończona
      _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:='LSP_ZKN_DRZK';
      _args.AKCJA:='DołączMWA';
      _args.PROC_START:='T';
      _args.QUIET:='T';
      _context:=obj_new('PARAMS','BUFFERS');
      _context.PARAMS:=obj_new('NAME_CONF');
      _context.PARAMS.NAME_CONF:=_name_conf;
      _context.BUFFERS:=_buffers;
      _args.CONTEXT:=_context;
      exec('mp_run','#b__box',_args)
   ?}
?};

:Dodanie miejsca dostaw do kontrahenta (B2B i B2C)
{? (_name_conf='ABSTOREB2B' | _name_conf='ABSTOREB2C') & _wsenv.IDADD<>''
||
   ZK_N.cntx_psh();
   ZK_N.use(_mask);
   ZK_N.index('IDADD');
   ZK_N.prefix(_wsenv.IDADD);
   {? ZK_N.first()
   ||
      _kh:=ZK_N.KH
   ?};
   ZK_N.cntx_pop();

   KH.cntx_psh();
   {? var_pres('_kh')=7
   ||
      _option_msc:=exec('get_option','mwapi',_par,'Kh_msc');
      {? _option_msc.fields<>''
      ||
         _msc:=exec('add_msc','mwa_zk',_kh,_option_msc);
         exec('add_kh_msc','mwa_zk',_wsenv.IDADD,_msc, _mask,_name_conf)
      ?}
   ?};
   KH.cntx_pop()
?};

::Dodanie załączników
{? ~_wsenv.has_errors() & _wsenv.IDADD<>''
||
   exec('add_dokum','mwa_zk', _wsenv.IDADD,_par.DATA,_mask,_wsenv)
?};

{? ~_wsenv.has_errors() & _wsenv.IDADD<>''
||
   ZK_N.cntx_psh();
   ZK_N.index('IDADD');
   ZK_N.prefix(_wsenv.IDADD);
   ZK_N.first();
   mwa_status(201);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_zk','mwa_zk',_par,_resp);
   ZK_N.cntx_pop()
||
   mwa_status(400);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
VAR_DEL.delete('__ABS_DOS');
_result


\create_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.22]
:: OPIS: sprawdzenie poprawności danych
::   WE: _a - nazwa konfiguracji
::       _b - buffers
::   WY: [0/1]
::----------------------------------------------------------------------------------------------------------------------
_name_conf:=_a;
_buffers:=_b;
_ZK_N:=_buffers.ZK_N;

_return:=1;

ZK_N.cntx_psh();

{? _ZK_N.Odb_KOD<>''
||
   {? type_of(_buffers.ZK_N.ODB)=0
   ||
      FUN.emsg('Nieprawidłowy kod odbiorcy kontrahenta.'@); _return:=0
   ?}
?};

{? type_of(_ZK_N.ODB)=7 & _ZK_N.ODB
||
   _kh:=_ZK_N.KH;
   _odb:=ZK_N.ODB:=_ZK_N.ODB;
   _odb_kh:=ZK_N.ODB().KH;
   {? _ZK_N.KH=null() || _kh:=_ZK_N.KH:=_odb_kh ?};
   {? _return & _odb_kh & _kh<>_odb_kh || FUN.emsg('Odbiorca innego kontrahenta.'@); _return:=0 ?};
   {? _ZK_N.OSOB
   ||
      _osob:=ZK_N.OSOB:=_ZK_N.OSOB;
      _osob_kh:=ZK_N.OSOB().KH;
      {? _return & _osob_kh & _kh<>_osob_kh || FUN.emsg('Osoba kontaktowa innego kontrahenta.'@); _return:=0 ?};
      {? _return & _osob & _odb & (_name_conf='ABSTOREB2B'|_name_conf='ABSTOREB2C')
      ||
         KH_OSOBO.cntx_psh();
         KH_OSOBO.index('OSOBA');
         KH_OSOBO.prefix(_osob,_odb);
         {? ~KH_OSOBO.first() || FUN.emsg('Osoba kontaktowa innego odbiorcy.'@); _return:=0 ?};
         KH_OSOBO.cntx_pop()
      ?}
   ?}
?};

{? _return
||
   ZK_N.T:=_ZK_N.T;
   {? ZK_N.T & ZK_N.T().R<>'Z' || FUN.emsg('Nieprawidłowy typ zamówienia.'@); _return:=0 ?}
?};

ZK_N.cntx_pop();

_return


\prolog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła startowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('prolog','mwapi',_par);
~~


\epilog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Fomuła końcowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
exec('epilog','mwapi');
~~


\authorized
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Sprawdza uprawnienia do odglądania zamówień
::----------------------------------------------------------------------------------------------------------------------
{? exec('authorized','#b__box','LSP_ZKN','LSP')
|| 1
|| _msg:='Brak uprawnień do przeglądania zamówień.'@;
   mwa_status(401,_msg);
   _wsenv:=exec('wsenv','#mwapi');
   _wsenv.add_error(_msg);
   0
?}


\update_buffers
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Uzupełnia pola w tablicy buforowej
::   WE: _a - _buffers
::       _b - Name_conf
::       _c - Oddz
::----------------------------------------------------------------------------------------------------------------------
_buffers:=_a;
_name_conf:=_b;
_oddz:=_c;

_wsenv:=exec('wsenv','#mwapi');

:: ustalenie oddziału
{? _buffers.ZK_N.ODDZ=''
|| _oddz:=
      {? _name_conf='ABSTOREB2B' || exec('get','#params',800108)
      |? _name_conf='ABSTOREB2C' || exec('get','#params',800208)
      || _oddz
      ?};
   _buffers.ZK_N.ODDZ:=_oddz
?};

:: ustalenie magazynu
{? exec('chk_oddz','mwapi',_buffers.ZK_N.ODDZ)
||
   _oddz:=_buffers.ZK_N.ODDZ;
   {? (_name_conf='ABSTOREB2C' | _name_conf='ABSTOREB2B')
         &
      _buffers.ZK_N.MG=null() & _buffers.ZK_N.MGSYM=''
   ||
      FUN.emsg('Nie podano magazynu.'@)

   |? _name_conf='ABSTOREB2C' & _buffers.ZK_N.MGSYM='DEFAULT'
   ||
      _mgsym:=spli_str(exec('get','#params',800209),',');
      {? obj_len(_mgsym)=1 & _mgsym[1]=''
      ||
::       800209 - brak magazynów
         FUN.emsg('Nie określono magazynu lub magazynów w parametrze 800209, w oddziale %1.'@[_oddz])
      |? obj_len(_mgsym)=1 & _mgsym[1]<>''
      ||
         _buffers.ZK_N.MGSYM:=_mgsym[1]
      |? obj_len(_mgsym)=2 & _mgsym[1]<>'' & _mgsym[2]=''
      ||
::       800209 - jeden magazyn
::       kontrola istnienia magazynu w systemie w \spr_nzam/zamsiw_nag.fml
::       kontrola uprawnień do magazynu w \add_zkn/edi_form.fml
         _buffers.ZK_N.MGSYM:=_mgsym[1]

      |? obj_len(_mgsym)>1
      ||
::       800209 - wiele magazynów
::       wyznaczenie magazynu domyślnego
         _buffers.ZK_N.MGSYM:='';
         _dMg:='';
         USERS_UP.index('DOM');
         USERS_UP.prefix(OPERATOR.USER,'ZAM',_oddz);
         _user:={? USERS_UP.first() || OPERATOR.USER || null() ?};
         USERS_UP.prefix(_user,'ZAM',_oddz,'T');
         {? USERS_UP.first() || _dMg:=USERS_UP.MG().SYM ?};
         {? _dMg=''
         ||
            FUN.emsg('Brak domyślnego magazynu.'@)
         ||
            _size:=obj_len(_mgsym);
            {! _ii:=1.._size
            |!
               {? _mgsym[_ii]=_dMg
               ||
                  _buffers.ZK_N.MGSYM:=_dMg
               ?}
            !};
            {? _buffers.ZK_N.MGSYM=''
            ||
               FUN.emsg('Brak domyślnego magazynu na liście magazynów podanych w parametrze 800209.'@)
            ?}
         ?}
      ?}
   ?};
   {? var_press('__ABS_DOS')=2
   ||
      _trz:=exec('FindInSet','#table','TR_ZEWN','KOD',__ABS_DOS,,,1,,);
     {? type_of(_trz)=0
     ||
        FUN.emsg('Nieprawidłowy indeks dostawy.'@)
     ?}
   ?};
:: Przypisanie odbiorcy
   {? ~_buffers.ZK_N.ODB & type_of(_buffers.ZK_N.Odb_KOD) & _buffers.ZK_N.KH
   ||
      _buffers.ZK_N.ODB:=exec('FindInSet','#table','KH_ODB','KH_ODB',_buffers.ZK_N.Odb_KOD,_buffers.ZK_N.KH,,1,,)
   ?};
:: Przypisanie statusu
   {? type_of(_buffers.ZK_N.ABS_S_C)=2 & _buffers.ZK_N.ABS_S_C<>''
   ||
      _buffers.ZK_N.ABS_SCON:=_buffers.ZK_N.ABS_STA:=exec('abs_s_c','abstore_fun',_buffers.ZK_N.ABS_S_C)
   ?};
:: Ustalenie materiałów na pozycjach zamówienia wg KTM
   {! _it:=1.. obj_len(_buffers.POZ)
   |! {? _buffers.POZ[_it].M=null()
      || _buffers.POZ[_it].M:=exec('FindInSet','#table','M','MATKTM',_buffers.POZ[_it].M_KTM,,,1)
      ?};
      {? _buffers.POZ[_it].M=null()
      || _wsenv.add_error('Nie znaleziono indeksu pozycji.'@)
      ?};
      {? _name_conf='ABSTOREB2B' || _buffers.POZ[_it].CENA:=_buffers.POZ[_it].CN
      |? _name_conf='ABSTOREB2C' || _buffers.POZ[_it].CENA:=_buffers.POZ[_it].CB
      ?};
:: Przypisanie jednostek dodatkowych
      {? ~_wsenv.has_errors()
      ||
         {? (_buffers.POZ[_it].WS2=0 | (_buffers.POZ[_it].J2_KOD=''& _buffers.POZ[_it].J2=null()))
         & _buffers.POZ[_it].M<> null()
         ||
            _buffers.POZ[_it].WS2:=1;
            _buffers.POZ[_it].J2:=exec('FindAndGet','#table',M,_buffers.POZ[_it].M,,"M.J",'')
         ||
            {? _buffers.POZ[_it].J2=null()
            ||
               _buffers.POZ[_it].J2:=
               exec('FindInSet','#table','JM','KOD',_buffers.POZ[_it].J2_KOD,_buffers.POZ[_it].J2_KOD,,1,,)
            ?};
            {? type_of(_buffers.POZ[_it].J2)<>7
            ||
               _wsenv.add_error('Nieprawidłowy kod jednostki dodatkowej.'@)
            ?};
            {? _buffers.POZ[_it].WS2<=0
            ||
               _wsenv.add_error('Współczynnik przeliczenia jednostki dodatkowej powinien być większy od 0.'@)
            ||
               {? (_name_conf='ABSTOREB2B' | _name_conf='ABSTOREB2C') & exec('czyJS','jm',_buffers.POZ[_it].M)
               || _buffers.POZ[_it].WS2:=1/_buffers.POZ[_it].WS2;
                  _buffers.POZ[_it].IL2:=_buffers.POZ[_it].WS2*_buffers.POZ[_it].ILZ
               |? (_name_conf='ABSTOREB2B' | _name_conf='ABSTOREB2C') & ~exec('czyJS','jm',_buffers.POZ[_it].M)
               || _buffers.POZ[_it].CN:=_buffers.POZ[_it].CN/_buffers.POZ[_it].WS2;
                  _buffers.POZ[_it].CB:=_buffers.POZ[_it].CB/_buffers.POZ[_it].WS2;
                  _buffers.POZ[_it].CENA:=_buffers.POZ[_it].CENA/_buffers.POZ[_it].WS2;
                  _buffers.POZ[_it].IL2:=_buffers.POZ[_it].ILZ/_buffers.POZ[_it].WS2
               ?}
            ?}
         ?}
      ?}
   !}
?};
~~


\add_kh_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.14]
:: OPIS: Formuła dodaje miejsce dostawy dla zamówienia
:: WE: _a- ZK_N.IDADD
::     _b- KH_MSC.ref()
::     _c- maska ZK_N
::     _d-_name_conf
::----------------------------------------------------------------------------------------------------------------------
ZK_N.cntx_psh();
ZK_N.use(_c);
ZK_N.index('IDADD');
ZK_N.prefix(_a);
{? ZK_N.first()
||
::Rodzaj dostawy
   _trz_r:=null;
   {? var_press('__ABS_DOS')=2 & __ABS_DOS<>''
   ||
      _wmsc:=0;
      _trz_r:=exec('FindInSet','#table','TR_ZEWN','KOD',__ABS_DOS,,,1,,)
   ?};
::Rodzaj dostawy
   KH_MSC.cntx_psh();
   KH_MSC.prefix();
   {? KH_MSC.seek(_b)
   ||
      ZK_N.KH_MSC:=KH_MSC.ref();
      ZK_N.TR_ZEWN:=_trz_r;
      {? ~(var_press('__ABS_DOS')=2
      & __ABS_DOS<>''
      & var_press('_d')=2
      & (__ABS_DOS=exec('param_get','abs_conf', 800123, 2)&_d='ABSTOREB2B')
      | (__ABS_DOS=exec('param_get','abs_conf', 800223, 2)&_d='ABSTOREB2C'))
      ||
         ZK_N.TRN:='T'
      ?};
      ZK_N.put()
   ?};
   KH_MSC.cntx_pop()
?};
ZK_N.cntx_pop()


\add_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.14]
:: OPIS: Formuła dodaje miejsce dostawy dla kontrahenta
:: WE: _a- KH.ref()
::     _b-('get_option','mwapi')
::----------------------------------------------------------------------------------------------------------------------
::Rodzaj dostawy
_wyn:=null();
_trz:=null;
{? var_press('__ABS_DOS')=2 & __ABS_DOS<>''
||
   _wmsc:=0;
   _trz:=exec('FindInSet','#table','TR_ZEWN','KOD',__ABS_DOS,,,1,,);
   {? type_of(_trz)<>0
   ||
      _wmsc:=exec('FindAndGet','#table',TR_ZEWN,_trz,,"TR_ZEWN.WYB_MSC",0)
   ?};
   {? _wmsc || _a:=null || _trz:=null ?}
?};
::Rodzaj dostawy
_fields_kh:='KH'+_b.fields;
KH.blank();
exec('set_fields','mwapi',_fields_kh);
KH_MSC.cntx_psh();
_ndx_k:=KH_MSC.ndx_tmp(,,'KH',,,'MIASTO',,,'UL',,,'DOM',,,'LOKAL',,,'TR_ZEWN',,);
KH_MSC.index(_ndx_k);
KH_MSC.prefix(_a,KH.MIASTO,KH.UL,KH.DOM,KH.LOKAL,_trz);
{? ~KH_MSC.first()
||
   KH_MSC.prefix();
   KH_MSC.blank();
   KH_MSC.KH:=_a;
   KH_MSC.NAZ:= KH.NAZ_P;
   KH_MSC.KRAJ:=KH.KRAJ;
   KH_MSC.MIASTO:=KH.MIASTO;
   KH_MSC.UL:=KH.UL;
   KH_MSC.DOM:=KH.DOM;
   KH_MSC.LOKAL:=KH.LOKAL;
   KH_MSC.POCZ:=KH.POCZ;
   KH_MSC.TEL:=KH.TEL;
   KH_MSC.EMAIL:=KH.EM;
   KH_MSC.UWAGI:=KH.U;
   KH_MSC.KPOCZ:=KH.KPOCZ;
   KH_MSC.GLN:=KH.GLN;
   KH_MSC.TR_ZEWN:=_trz;

   {? KH_MSC.NAZ='' || KH_MSC.NAZ:=KH_MSC.MIASTO+', '+KH_MSC.UL ?};
   {? KH_MSC.add() || _wyn:=KH_MSC.ref() ?}
||
   {? KH_MSC.TEL='' & KH.TEL<>'' || KH_MSC.TEL:=KH.TEL; KH_MSC.put() ?};
   _wyn:=KH_MSC.ref()
?};
KH_MSC.ndx_drop(_ndx_k);
KH_MSC.cntx_pop();
_wyn


\add_dokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Dodanie załączników do zamówienia
:: WE: _a- IDADD zamówienia
::     _b- analizowany XML
::     _c- maska ZK_N
::     _d- _wsenv
::----------------------------------------------------------------------------------------------------------------------
{? REF.FIRMA=null()
|| REF.FIRMA:=exec('firma_ref','#firma',app_info('app_ident'))
?};
_wsenv:=_d;

ZK_N.cntx_psh();
ZK_N.use(_c);
ZK_N.index('IDADD');
ZK_N.prefix(_a);
{? ~ZK_N.first() || ZK_N.cntx_pop(); return(~~) ?};

_tab:=xml_tparse(_b);
_tab.cntx_psh();
{?_tab.find_tab(,'NAME',,'=','Dok')
||
   _wer:=_tab.mk_sel(,'P',1,'qwerty',,,,1);
   _tab.win_sel(_wer);
   _tab.select();
   _tab.prefix(_tab.ref());
   {? _tab.first()
   ||
      POM.TAB:='DOKUM';
      POM.TYPDOK:='SYS';
      exec('add_grnr','numery','SYS');

      {!|?
         _tab.cntx_psh();
         _tab.prefix(_tab.ref());
         _licz:=0;
         {? _tab.first()
         ||
            _licz+=1;
            _nazwa:='';
            {? var_pres('_dokum')>100 || obj_del(_dokum) ?};
            _dokum:='';
            {!|?
               {? _tab.NAME='NAZWA' || _nazwa:=_tab.VAL ?};
               {? _tab.NAME='DOKUM' || _dokum:={? _tab.VTRUNC='T'|| fopen(_tab.BVAL,'br',,,1)|| _tab.VAL ?} ?};
               _tab.next()
            !};

            do();
            DOKUM.cntx_psh();
            DOKUM.prefix();
            DOKUM.blank();
            DOKUM.FIRMA:=REF.FIRMA;
            DOKUM.REFSQL:=$ZK_N.ref();
            DOKUM.NR:=exec('numer_new','numery','PACZKA');
            DOKUM.SYM:=form(DOKUM.NR,-8,,'99');
            {? DOKUM.add() & _nazwa<>''
            || exec('znak','numery','DOKUM');
               {? +_nazwa>64
               || _wyn:=
                  DOKUM.bl_put('DOKUM',exec('decode','mwa_outlook',_dokum),,,
                  55+_nazwa+$_licz+(_nazwa+exec('revert','#string',_nazwa)*'.'))
               || _wyn:=
                  DOKUM.bl_put('DOKUM',exec('decode','mwa_outlook',_dokum),,,_nazwa)
               ?}
            || undo();_wsenv.add_info('Nie dodano załącznika %1.'@[_nazwa]);_wyn:=0
            ?};
            {? _wyn
            ||
               DOKUM.NAZWA:=DOKUM.bl_info('DOKUM','NAME');
               _extension:=DOKUM.bl_info('DOKUM','EXTENSION');
               {? _extension<>'' & ';bmp;jpg;jpeg;png;tif;tiff;pdf;'*_extension
               ||
                  DOKUM.DOKUMI:=DOKUM.DOKUM
               ?};
               DOKUM.put();

               DOKUMZ.cntx_psh();
               DOKUMZ.prefix();
               DOKUMZ.blank();
               DOKUMZ.DOK:=DOKUM.ref();
               {? exec('upgrade2325_blbc1','zbl')
               || DOKUMZ.REFSQL:=DOKUM.REFSQL
               ?};
               DOKUMZ.KR_OP:=DOKUM.bl_info('DOKUM','NAME');
               DOKUMZ.NAZWA:=DOKUM.bl_info('DOKUM','NAME');
               DOKUMZ.DOKUM:=DOKUM.DOKUM;
               {? DOKUMZ.add()
               || _wsenv.add_info('Dodano załącznik %1.'@[_nazwa])
               || undo();_wsenv.add_info('Nie dodano załącznika %1.'@[_nazwa])
               ?};
               DOKUMZ.cntx_pop()
            ?};
            DOKUM.cntx_pop();
            end()
         ?};
         _tab.cntx_pop();
         _tab.next()
      !}
   ?}
?};

_tab.cntx_pop();
ZK_N.cntx_pop()








:Sign Version 2.0 jowisz:1045 2023/09/27 10:38:09 178a754c586b4f285b8a974e9da588514d522bef64bb8a99015e8f4c7be9e935d4e31354eae6fe8eb69225e37376b8477e05c22fb9336df0f30dd770138bf5dea1d017a2ddb9e962107dac77baac9d37db4b7d6f65afb738722d8587adb53b84946fe4ac1fe324539d4744eaedb2d55988af473cddaa74ce718be0c438afe37a
