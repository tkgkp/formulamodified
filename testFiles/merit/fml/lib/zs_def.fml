:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zs_def.fml [20.42]
:: Utworzony: 16.07.2019
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły obsługujące definicje zależności służbowych.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed dołączeniem lub poprawieniem wiersza tabeli ZS_DEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustal poziom i wyznacz ścieżkę
_def:=exec('czytaj','zs_def',ZS_DEF.ZS_DEF);
ZS_DEF.SCIEZKA:=_def.SCIEZKA+_def.TOKEN;
ZS_DEF.POZIOM:=_def.POZIOM+1;

:: zweryfikuj zgodność
{? ZS_DEF.P<>null
|| P.cntx_psh();
   OSOBA.cntx_psh();
   ZS_DEF.P().OSOBA();
   ZS_DEF.OSOBA:=OSOBA.ref();
   ZS_DEF.NAZWA:='%1 %2 (%3)'[OSOBA.NAZWISKO,OSOBA.PIERWSZE,P.T];
   ZS_DEF.OK:=
      {? ZS_DEF.WYDZIAL=P.WYDZIAL &
         ZS_DEF.POZWORG=P.POZWORG &
         ZS_DEF.ST=P.ST &
         ZS_DEF.ZA=P.ZA
      || 'T'
      || 'N'
      ?};
   OSOBA.cntx_pop();
   P.cntx_pop()
?}


\_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(ZS_DEF,
   $("_a.table(_b,"+$_mode+",,'ZS_TYP','TOKEN','P','OK')"),
   "_a.in_set(_b,'OK',,'T','N')"
)


\_tgen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Generuje unikalny w całej grupie token.
::   WE:
::   WY: token
::----------------------------------------------------------------------------------------------------------------------
:: ustal unikalny identyfikator
_uid:='';
ZS_DEF.cntx_psh();
ZS_DEF.index('TOKEN');
{!
|? _uid:=exec('gen_id','#id',5);
   ZS_DEF.find_key(_uid)
!};
ZS_DEF.cntx_pop();
_uid


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZS_DEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustal token unikalny w całej grupie
ZS_DEF.TOKEN:=exec('_tgen','zs_def');

:: wartości początkowe
exec('akualizuj_p','zs_def');

exec('_modb','zs_def') & exec('_chk','zs_def',0)


\_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Wyzwalacz "po dołącz" tabeli ZS_DEF.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? ZS_DEF.ZS_DEF<>0
:: wskazano przełożonego
|| ZS_DEF.cntx_psh();
   ZS_DEF.clear();
   {? ZS_DEF.seek(ZS_DEF.ZS_DEF)
::    przypisanie przełożonego
   || ZS_DEF.LICZ_POD+=1;
      {? ZS_DEF.put()=0
::       wycofaj wszystkie zmiany
      || undo('Błąd zapisu wiersza %1 tabeli ZS_DEF.'[$#ZS_DEF.ref()])
      ?}
   || undo('Brak dostępu do wiersza %1 tabeli ZS_DEF.'[$ZS_DEF.ZS_DEF])
   ?};
   ZS_DEF.cntx_pop()
?};
~~


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZS_DEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustal liczbę podwładnych
ZS_DEF.cntx_psh();
ZS_DEF.index('TREE');
ZS_DEF.prefix(ZS_DEF.ZS_TYP,#ZS_DEF.ref());
_pod:=ZS_DEF.size();
ZS_DEF.cntx_pop();

ZS_DEF.LICZ_POD:=_pod;
ZS_DEF.LISC:={? _pod=0 || 'T' || 'N' ?};

exec('_modb','zs_def') & exec('_chk','zs_def',1)


\_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Wyzwalacz "po popraw" tabeli ZS_DEF.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? ZS_DEF.ZS_DEF<>bfld('ZS_DEF')
:: zmiana przełożonego
|| {? bfld('ZS_DEF')<>0
::    wskazano przełożonego
   || ZS_DEF.cntx_psh();
      ZS_DEF.clear();
      {? ZS_DEF.seek(bfld('ZS_DEF'))
::       odłączenie od przełożonego
      || {? ~ZS_DEF.put(1)
::          wycofaj wszystkie zmiany
         || undo(exec('err_rec_mod','#message',ZS_DEF.ref()))
         ?}
      || undo(exec('err_rec_acc','#message',bfld('ZS_DEF'),ZS_DEF))
      ?};
      ZS_DEF.cntx_pop()
   ?};
   {? do_state()<>1
   || return()
   ?};
   {? ZS_DEF.ZS_DEF<>0
::    wskazano przełożonego
   || ZS_DEF.cntx_psh();
      ZS_DEF.clear();
      {? ZS_DEF.seek(ZS_DEF.ZS_DEF)
::       przypisanie przełożonego
      || {? ~ZS_DEF.put(1)
::          wycofaj wszystkie zmiany
         || undo(exec('err_rec_mod','#message',ZS_DEF.ref()))
         ?}
      || undo(exec('err_rec_acc','#message',ZS_DEF.ZS_DEF,ZS_DEF))
      ?};
      ZS_DEF.cntx_pop()
   ?};
   {? do_state()<>1
   || return()
   ?}
?};

{? ZS_DEF.LISC<>'T' &
   (ZS_DEF.POZIOM<>bfld('POZIOM') | ZS_DEF.SCIEZKA<>bfld('SCIEZKA'))
:: aktualizuj poziomy i/lub scieżki podwładnych
|| _poziom:=ZS_DEF.POZIOM+1;
   ZS_DEF.cntx_psh();
   ZS_DEF.index('TREE');
   ZS_DEF.prefix(ZS_DEF.ZS_TYP,#ZS_DEF.ref());
   _loop:=ZS_DEF.first();
   {!
   |? _loop
   |! ZS_DEF.POZIOM:=_poziom;
      {? ZS_DEF.put(1)
      || _loop:=ZS_DEF.next()
      || undo(exec('err_rec_mod','#message',ZS_DEF.ref()));
         _loop:=0
      ?}
   !};
   ZS_DEF.cntx_pop();
   {? do_state()<>1
   || return()
   ?}
?};

{? ZS_DEF.OK<>bfld('OK')
:: zmiana weryfikacji
|| ZS_TYP.cntx_psh();
   ZS_TYP.prefix();
   ZS_DEF.ZS_TYP();
   {? ~ZS_TYP.put(1)
::    wycofaj wszystkie zmiany
   || undo(exec('err_rec_mod','#message',ZS_TYP.ref()))
   ?};
   ZS_TYP.cntx_pop();
   {? do_state()<>1
   || return()
   ?}
?};

{? ZS_DEF.P<>bfld('P')
:: zmiana współpracownika
|| exec('akualizuj_p','zs_def');
   {? ~ZS_DEF.put(1)
::    wycofaj wszystkie zmiany
   || undo(exec('err_rec_mod','#message',ZS_DEF.ref()))
   ?}
?};
~~


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli ZS_DEF.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
{? ZS_DEF.LISC='T' | exec('get','#bulk',ZS_TYP,'del',$ZS_DEF.ZS_TYP)
:: brak podwładnych lub hurtowe usuwanie zależności danego typu
|| return(1)
?};

_zs_def:=ZS_DEF.ZS_DEF;
_test:=1;

ZS_DEF.cntx_psh();
ZS_DEF.clear();
ZS_DEF.f_set('IDADD',,
:: filtrowanie z wykorzystaniem indeksu TREE
   'ZS_DEF.ZS_TYP=:_a and ZS_DEF.ZS_DEF=:_b',
   ZS_DEF.ZS_TYP,#ZS_DEF.ref()
);
_loop:=ZS_DEF.f_first();
{!
|? _loop & _test
|! ZS_DEF.ZS_DEF:=_zs_def;
   _test:=ZS_DEF.put();
   _loop:=ZS_DEF.f_next()
!};
ZS_DEF.f_clear(1);
ZS_DEF.cntx_pop();

_test


\_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Wyzwalacz po usunięciu wiersza tabeli ZS_DEF.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? exec('get','#bulk',ZS_TYP,'del',$bfld('ZS_TYP'))
:: hurtowe usuwanie zależności danego typu
|| return()
?};

{? bfld('ZS_DEF')<>0
:: wskazano przełożonego
|| ZS_DEF.cntx_psh();
   ZS_DEF.clear();
   {? ZS_DEF.seek(bfld('ZS_DEF'))
::    odłączenie od przełożonego
   || {? ~ZS_DEF.put()
::       wycofaj wszystkie zmiany
      || undo(exec('err_rec_mod','#message',bfld('ZS_DEF'),ZS_DEF))
      ?}
   || undo(exec('err_rec_acc','#message',bfld('ZS_DEF'),ZS_DEF))
   ?};
   ZS_DEF.cntx_pop()
?};

{? bfld('OK')='N'
:: zmiana weryfikacji
|| ZS_TYP.cntx_psh();
   ZS_TYP.prefix();
   ZS_TYP.seek(bfld('ZS_TYP'));
   {? ~ZS_TYP.put(1)
::    wycofaj wszystkie zmiany
   || undo(exec('err_rec_mod','#message',ZS_TYP.ref()))
   ?};
   ZS_TYP.cntx_pop()
?};
~~


\buf_utwórz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy i ustawia wartościami domyślnymi bufor danych dla wiersza tabeli ZS_DEF.
::   WE:
::   WY: wskazanie tablicy nazwanej o strukturze:
::          REF - wskazanie wiersza w tabeli ZS_DEF
::          ZS_TYP - wskazanie wiersza w tabeli ZS_TYP
::          REF_NAD - wskazanie wiersza nadrzędnego
::          ZS_DEF - numer wiersza nadrzędnego
::          POZIOM - poziom w strukturze zależności
::          LICZ_POD - liczba podwładnych
::          LISC - T - liść, N - węzeł
::          TOKEN - unikalny identyfikator
::          SCIEZKA - ścieżka do elementu
::          NAZWA - nazwa prezentowana w oknie
::          P - wskazanie współpracownika
::          OSOBA - wskazanie osoby
::          WYDZIAL - zapamiętana jednostka organizacyjna
::          POZWORG - zapamiętana pozycja w organizacji
::          ST - zapamiętane stanowisko
::          ZA - zapamiętany znacznik zatrudnienia
::          OK - znacznik weryfikacji zależności
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new(
   'REF','ZS_TYP','REF_NAD','ZS_DEF',
   'POZIOM','LICZ_POD','LISC',
   'TOKEN','SCIEZKA','NAZWA',
   'P','OSOBA','WYDZIAL','POZWORG','ST','ZA','OK'
);
_ret.REF:=null;
_ret.REF_NAD:=null;
_ret.ZS_TYP:=null;
_ret.ZS_DEF:=0;
_ret.POZIOM:=0;
_ret.LICZ_POD:=0;
_ret.LISC:='';
_ret.TOKEN:='';
_ret.SCIEZKA:='';
_ret.NAZWA:='';
_ret.P:=null;
_ret.OSOBA:=null;
_ret.WYDZIAL:=null;
_ret.POZWORG:=null;
_ret.ST:=null;
_ret.ZA:='';
_ret.OK:='';

_ret


\buf_ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Wypełnia bufor danych wiersza tabeli ZS_DEF bieżącymi wartościami.
::   WE: _a OBJECT - wskazanie tablicy nazwanej bufora (patrz buf_utwórz)
::   WY: _a
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ret:=_a;

_ret.REF:=ZS_DEF.ref();
_ret.ZS_TYP:=ZS_DEF.ZS_TYP;
_ret.ZS_DEF:=ZS_DEF.ZS_DEF;
{? _ret.ZS_DEF<>0
|| ZS_DEF.cntx_psh();
   {? ZS_DEF.seek(_ret.ZS_DEF,,1)
   || _ret.REF_NAD:=ZS_DEF.ref()
   ?};
   ZS_DEF.cntx_pop()
?};
_ret.POZIOM:=ZS_DEF.POZIOM;
_ret.LICZ_POD:=ZS_DEF.LICZ_POD;
_ret.LISC:=ZS_DEF.LISC;
_ret.TOKEN:=ZS_DEF.TOKEN;
_ret.SCIEZKA:=ZS_DEF.SCIEZKA;
_ret.NAZWA:=ZS_DEF.NAZWA;
_ret.P:=ZS_DEF.P;
_ret.OSOBA:=ZS_DEF.OSOBA;
_ret.WYDZIAL:=ZS_DEF.WYDZIAL;
_ret.POZWORG:=ZS_DEF.POZWORG;
_ret.ST:=ZS_DEF.ST;
_ret.ZA:=ZS_DEF.ZA;
_ret.OK:=ZS_DEF.OK;

_ret


\czytaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy tablicę nazwaną i wypełnia ją wartościami ze wskazanego wiersza.
::   WE: _a INTEGER/_ZS_DEF
::   WY: wskazanie tablicy nazwanej (patrz buf_utworz)
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('buf_utwórz','zs_def');
{? var_pres('_a')=type_of(0)
|| {? _a<=0
   || return(_ret)
   ?}
|? var_pres('_a')=type_of(null)
|| {? _a=null | ref_tab(_a)<>ZS_DEF
   || return(_ret)
   ?}
|| return(_ret)
?};

ZS_DEF.cntx_psh();
{? ZS_DEF.seek(_a,,1)
|| exec('buf_ustaw','zs_def',_ret)
?};
ZS_DEF.cntx_pop();

_ret


\szukaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Odnajduje współpracownika w strukturze zależności służbowych.
::   WE: _a _P - wskazanie współpracownika
::       _b [STRING/_SLO_KOD] - symbol lub wskazanie typu zależności służbowych, typ domyślny jeśli brak lub innego typu
::       _c [INTEGER] - typ zwracanego wyniku: różny od zera - wskazanie tablicy nazwanej, wpp referencja
::       _d [INTEGER] - zachowanie kontekstu: różny od zera - pomiń zachowanie i odtworzenie konteksu, wpp zachowuj
::   WY: zależnie od _b: wskazanie wiersza lub tablicy nazwanej o strukturze definiowanej w buf_utworz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;
_typ:=
   {? (var_pres('_b')=type_of('') & _b<>'') |
      (var_pres('_b')=type_of(null) & _b<>null)
   || exec('szukaj','zs_typ',_b)
   || exec('domyslny','zs_typ')
   ?};
_ext:=(var_pres('_c')=type_of(0) & _c<>0);
_ctx:=(var_pres('_d')<>type_of(0) | _d=0);

:: wartość zwracana
_ret:=null;
{? _ext<>0
:: rozszerzona
|| _ret:=exec('buf_utwórz','zs_def')
?};

{? _ctx<>0
|| ZS_DEF.cntx_psh()
?};
:: szukaj zależności
ZS_DEF.index('UNIQUE');
ZS_DEF.prefix(_typ);
{? ZS_DEF.find_key(_ref)
:: znaleziono
|| {? _ext=0
   || _ret:=ZS_DEF.ref()
   || exec('buf_ustaw','zs_def',_ret)
   ?}
?};
{? _ctx<>0
|| ZS_DEF.cntx_pop()
?};

_ret


\wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Umożliwia wybór współpracownika ze struktury (wybór wiersza tabeli ZS_DEF)
::   WE: _a [STRING/_SLO_KOD] - symbol lub wskazanie typu zależności służbowych, typ domyślny jeśli brak lub innego typu
::       _b [_P/_ZS_DEF] - wskazanie współpracownika lub zależności
::       _c [INTEGER] - typ zwracanego wyniku: różny od zera - wskazanie tablicy nazwanej, wpp referencja
::       _d [INTEGER] - czy ograniczyć zakres wyświetlanych rekordów (0/1)
::   WY: zależnie od _c: wskazanie wiersza lub tablicy nazwanej o strukturze definiowanej w buf_utworz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_typ:=
   {? var_pres('_a')=type_of('') | var_pres('_a')=type_of(null)
   || exec('szukaj','zs_typ',_a,1)
   || exec('domyslny','zs_typ',1)
   ?};
_ref:=null;
_ext:=(var_pres('_c')=type_of(0) & _c<>0);

:: wartość zwracana
_ret:=null;
{? _ext<>0
:: rozszerzona
|| _ret:=exec('buf_utwórz','zs_def')
?};

{? var_pres('_b')=type_of(null) & _b<>null
:: wiersz do ustawienia
|| {? ref_tab(_b)=P
::    współpracownik
   || _kod:=
         {? _typ.ZS_TYP=0
         || _typ.SLO_KOD
         || _typ.KOD_NAD
         ?};
      _ref:=exec('szukaj','zs_def',_b,_kod)

   |? ref_tab(_b)=ZS_DEF
::    zależność
   || _ref:=_b
   ?}
?};

ZS_DEF.cntx_psh();
ZS_DEF.index('TREE');
ZS_DEF.prefix(_typ.REF);
ZS_DEF.seek(_ref);
ZS_DEF.win_sel('WYB');
:: ograniczenie zakresu wyświetlanych rekordów
_ogr:={? var_pres('_d')=type_of(0) || _d || 0 ?};
{? _ogr
|| ZS_DEF.tr_root('WYB',1,#ZS_DEF.ref())
?};
{? ZS_DEF.select(,1)
:: wybrano
|| {? _ext=0
   || _ret:=ZS_DEF.ref()
   || exec('buf_ustaw','zs_def',_ret)
   ?}
?};
ZS_DEF.cntx_pop();
_ret


\akualizuj_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Aktualizuje anomalie na podstawie danych współpracownika.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? ZS_DEF.P=null
|| return()
?};

P.cntx_psh();
ZS_DEF.P();
ZS_DEF.OSOBA:=P.OSOBA;
ZS_DEF.WYDZIAL:=P.WYDZIAL;
ZS_DEF.ST:=P.ST;
ZS_DEF.POZWORG:=P.POZWORG;
ZS_DEF.ZA:=P.ZA;
ZS_DEF.OK:='T';
P.cntx_pop();
~~


\aktualizuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Aktualizuje zależności współpracownika po zmianie danych osobowych lub numeru teczki.
::   WE: _a _P/_OSOBA/_ZS_TYP - wskazanie współpracownika, osoby lub typu zależności
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;
_key:='';
{? ref_tab(_ref)=OSOBA  || _key:='FK_1'
|? ref_tab(_ref)=P      || _key:='FK_2'
|? ref_tab(_ref)=ZS_TYP || _key:='UNIQUE'
|| return()
?};

ZS_DEF.cntx_psh();
ZS_DEF.index(_key);
ZS_DEF.prefix(_ref);
_loop:=ZS_DEF.first();
{!
|? _loop
|! ZS_DEF.put();
   _loop:=ZS_DEF.next()
!};
ZS_DEF.cntx_pop();
~~


\dnd_def_pod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Obsługa przeciągnij-upuść w obrębie okna podwładnych.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_SRC:=dnd_info('dropped_records');
_dst:=dnd_info('dest_record');

:: _dst zawsze musi być określone upuszczenie uchwyconych zależności na pustym obszarze
:: to w rzeczywistości przypisanie bezpośredniego podwładnego bieżącemu współpracownikowi
{? _dst=null
|| ZS_DEF.cntx_psh();
   ZS_DEF.index('UNIQUE');
   ZS_DEF.prefix(ZS_TYP.ref());
   {? ZS_DEF.find_key(REF.P)
   || _dst:=ZS_DEF.ref()
   ?};
   ZS_DEF.cntx_pop()
?};

{? _dst<>null
|| exec('dnd_def','zs_def',_SRC,_dst)
?};
~~


\dnd_def_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Obsługa przeciągnij-upuść w obrębie okna zależności służbowych.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_SRC:=dnd_info('dropped_records');
_dst:=dnd_info('dest_record');

:: działanie z możliwością _dst=null
exec('dnd_def','zs_def',_SRC,_dst);
~~


\dnd_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Ogólna obsługa przeciągnij-upuść definicji zależności służbowych.
::   WE: _a TABLE - alias tabeli zawierającej informacje o uchwyconych rekordach
::       _b _ZS_DEF - wskazanie wiersza docelowego (może być null)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_SRC:=_a;
_dst:=_b;

_info:='Anulowano zmiany w zależnościach służbowych.'@;
_test:='';

{? _dst<>null
|| {? ZS_DEF.seek(_dst,,1)
::    ustalono wiersz docelowy
   || {? ~exec('dostepny_ud_skl','schemat',,'PKD',ZS_DEF.P().WYDZIAL)
::       brak uprawnienia do jednostki org. nie pozwala na zmiany
      || _test:=exec('dnd_err','zs_def',2,P.WYDZIAL().SYMBOL)
      ?}
   || _test:=exec('dnd_err','zs_def',1,$_dst)
   ?};
   {? _test<>''
::    zakończ działanie
   || FUN.emsg('%1\n\n%2'[_info,_test]);
      return()
   ?}
?};

do();
_pdef:=0;
_loop:=_SRC.first();
{!
|? _loop
|! {? ZS_DEF.seek(_SRC.REF,,1)
::    ustalono wiersz źródłowy
   || _chk_perm:=0;
::    na życzenie wyłączono sprawdzanie uprawnień
::    (dostęp do jednostki poprzedniego przełożonego)
      {? _chk_perm<>0 & ZS_DEF.ZS_DEF<>0 & ZS_DEF.ZS_DEF<>_pdef
::       jest przełożony inny niż zweryfikowany
      || _pdef:=ZS_DEF.ZS_DEF;
         ZS_DEF.cntx_psh();
         {? ZS_DEF.seek(ZS_DEF.ZS_DEF,,1)
::          ustalono aktualnego bezpośredniego przełożonego
         || {? ~exec('dostepny_ud_skl','schemat',,'PKD',ZS_DEF.P().WYDZIAL)
::             brak uprawnienia do jednostki org. nie pozwala na zmiany
            || _test:=exec('dnd_err','zs_def',2,P.WYDZIAL().SYMBOL)
            ?}
         || _test:=exec('dnd_err','zs_def',1,$ZS_DEF.ZS_DEF)
         ?};
         ZS_DEF.cntx_pop()
      ?};
      {? _test=''
      || {? exec('dostepny_ud_skl','schemat',,'PKD',ZS_DEF.P().WYDZIAL)
::          uprawnienia pozwalają na wprowadzenie zmiany
         || ZS_DEF.ZS_DEF:=#_dst;
            {? ~ZS_DEF.put(1)
::             błąd zapisu (zazwyczaj naruszenie hierarchii)
            || _test:=exec('dnd_err','zs_def',3,ZS_DEF.NAZWA)
            ?}
         || _test:=exec('dnd_err','zs_def',2,P.WYDZIAL().SYMBOL)
         ?}
      ?}
   || _test:=exec('dnd_err','zs_def',1,$_SRC.REF)
   ?};
   _loop:=(_test='' & _SRC.next())
!};
{? _test<>''
:: wycofaj
|| undo()
?};
end();
{? _test<>''
:: wycofano zmiany
|| FUN.emsg('%1\n\n%2'[_info,_test])
?};
~~


\dnd_err
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Zwraca opis przyczyny anulowania operacji dnd.
::   WE: _a INTEGER - kod błędu
::       _b STRING - informacja dodatkowa
::   WY: opis przyczyny anulowania operacji
::----------------------------------------------------------------------------------------------------------------------
{? _a=1 || 'Nie znaleziono wiersza o numerze %1.'@[_b]
|? _a=2 || 'Brak dostępu do jednostki organizacyjnej "%1".'@[_b]
|? _a=3 || 'Błąd zapisu zależności %1.'@[_b]
|| ''
?}


\dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Akcja "Dołącz" okienka tabeli ZS_DEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=exec('wybierz_args','pracownik');
_arg.DOMAIN:='PKD';
_arg.F_ZATR:='*T';
:: wybierz wielu współpracowników
_P:=exec('wybierz','pracownik',_arg).P;

{? _P.size()=0
:: nie wybrano
|| return()
?};

_typ:=ZS_TYP.ref();
_def:=
   {? ~exec('dom_empty','#table',ZS_DEF)
   || ZS_DEF.ref()
   || null
   ?};
_BUF:=exec('sprawdz_buf','zs_def');

P.cntx_psh();
OSOBA.cntx_psh();
ZS_DEF.cntx_psh();
_loop:=_P.first();
{!
|? _loop
|! {? P.seek(_P.SQL,,1)
   || P.OSOBA();
      _BUF.blank();
      _chk:=exec('sprawdz_mod','zs_def',P.ref(),_def);
      _BUF.NAZWA:='%1 %2 (%3)'[OSOBA.NAZWISKO,OSOBA.PIERWSZE,P.T];
      _BUF.WYBRANY:={? _chk.OK || 'T' || 'N' ?};
      _BUF.memo_set(_chk.TXT,'TXT');
      _BUF.SQL:=_P.SQL;
      _BUF.TOKEN:=_chk.TOKEN;
      _BUF.ZS_DEF:=$_chk.ZS_DEF;
      _BUF.PRZ_POD:=_chk.PRZ_POD;
      _BUF.add() & _BUF.memo_put(,'TXT');
      obj_del(_chk)
   ?};
   _loop:=_P.next()
!};

_cnt:=1;
_BUF.f_clear();
{? _BUF.find_tab(,'WYBRANY',,'=','N')
:: znaleziono zależności
|| {? _BUF.size()>1
   || _cnt:=_BUF.select()
   || _chk:=exec('sprawdz_arg','zs_def');
      _chk.TXT:=_BUF.memo_txt(,1,'TXT');
      _chk.PRZ_POD:=_BUF.PRZ_POD;
      {? exec('sprawdz_pyt','zs_def',_chk)
::       zmień istniejącą zależność
      || _BUF.PRZ_POD:=_chk.PRZ_POD;
         _BUF.WYBRANY:='T';
         _cnt:=_BUF.put()
      ?}
   ?}
?};

{? _cnt<>0 & _BUF.first()
:: zmień strukturę zależności
|| do();
   ZS_DEF.index('TOKEN');
   _loop:=1;
   {!
   |? do_state()=1 & _loop
   |! {? _BUF.WYBRANY='T' & P.seek(_BUF.SQL,,1)
      || {? ZS_DEF.find_key(_BUF.TOKEN,)
::          przesuń podwładnego
         || _old:=ZS_DEF.ZS_DEF;
            ZS_DEF.ZS_DEF:=#_def;
            {? ZS_DEF.put() & ZS_DEF.LICZ_POD<>0 & _BUF.PRZ_POD<>'T'
::             podwładni zostają z poprzednim przełożonym współpracownika
            || _cur:=#ZS_DEF.ref();
               ZS_DEF.cntx_psh();
               ZS_DEF.index('TREE');
               ZS_DEF.prefix(ZS_DEF.ZS_TYP);
               {!
               |? ZS_DEF.find_key(_cur)
               |! ZS_DEF.ZS_DEF:=_old;
                  {? ~ZS_DEF.put()
                  || undo()
                  ?}
               !};
               ZS_DEF.cntx_pop()
            ?}
         || ZS_DEF.blank(1);
            ZS_DEF.ZS_TYP:=_typ;
            ZS_DEF.ZS_DEF:=_def;
            ZS_DEF.P:=P.ref();
::          dodaj podwładnego
            {? ~ZS_DEF.add(1)
            || undo()
            ?}
         ?}
      ?};
      _loop:=_BUF.next()
   !};
   end()
?};

:: porządki
ZS_DEF.cntx_pop();
OSOBA.cntx_pop();
P.cntx_pop();
obj_del(_BUF);
obj_del(_P);
~~


\dolacz_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Akcja "Dołącz" okienka tabeli P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_typ:=ZS_TYP.ref();
_def:=
   {? grp_empty(ZS_DEF,'WER')=0
   || ZS_DEF.ref()
   || null
   ?};

:: dodaj
ZS_DEF.blank();
ZS_DEF.ZS_TYP:=_typ;
ZS_DEF.ZS_DEF:=#_def;
ZS_DEF.P:=P.ref();
ZS_DEF.add();

:: wróć na pozycję
ZS_DEF.seek(_def);

{? P.sel_size()=0
:: odśwież filtr
|| P.f_rfresh()
?};
~~


\dolacz_pgb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed akcją "Dołącz" dla grupy rekordów okienka tabeli P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
sel_nchk()


\dolacz_pga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Po akcji "Dołącz" dla grupy rekordów okienka tabeli P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: odrysuj zawartość
P.f_rfresh();
~~


\popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Akcja "Popraw" okienka tabeli ZS_DEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=exec('wybierz_args','pracownik');
_arg.DOMAIN:='PKD';
_arg.F_ZATR:='*T';
_arg.WIELU:=0;
:: wybierz tylko jednego współpracownika
_P:=exec('wybierz','pracownik',_arg).P;

{? _P.first()=0
:: nie wybrano
|| return()
?};

P.cntx_psh();
{? P.seek(_P.SQL,,1) & ZS_DEF.P<>P.ref()
|| _chk:=exec('sprawdz_mod','zs_def',P.ref(),ZS_DEF.ref());
   {? _chk.OK=1 | exec('sprawdz_pyt','zs_def',_chk)<>0
::    przesuń pracownika w strukturze zależności
   || do();
      _def:=#ZS_DEF.ref();
      {? _chk.ZS_DEF<>null
      || ZS_DEF.cntx_psh();
         {? _chk.PRZ_POD='T'
::          przenieś podwładnych
         || ZS_DEF.index('TREE');
            ZS_DEF.prefix(ZS_DEF.ZS_TYP);
            {!
            |? do_state()=1 & ZS_DEF.find_key(#_chk.ZS_DEF)
            |! ZS_DEF.ZS_DEF:=_def;
               {? ~ZS_DEF.put()
               || undo()
               ?}
            !}
         ?};
         {? do_state()=1 & ZS_DEF.seek(_chk.ZS_DEF,,1)
         || {? ~ZS_DEF.del(,1)
            || undo()
            ?}
         ?};
         ZS_DEF.cntx_pop();
         ZS_DEF.get()
      ?};
      {? do_state()=1
::       zamień współpracownika
      || ZS_DEF.P:=P.ref();
         {? ~ZS_DEF.put()
         || undo()
         ?}
      ?};
      _done:=(do_state()=1);
      end();

      {? _done=1 & ZS_DEF.LICZ_POD<>0 &
         exec('lic_or','#b_domain','POR')
::       synchronizuj dane portalu
      || ZS_DEF.trig_off('put','*');
         ZS_DEF.cntx_psh();
         ZS_DEF.index('TREE');
         ZS_DEF.prefix(ZS_DEF.ZS_TYP,#ZS_DEF.ref());
         _loop:=ZS_DEF.first();
         {!
         |? _loop
         |! ZS_DEF.put(,1);
            _loop:=ZS_DEF.next()
         !};
         ZS_DEF.cntx_pop();
         ZS_DEF.trig_on('put','*')
      ?}
   ?}
?};
P.cntx_pop();
~~


\usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Akcja "Usuń" okiek tabeli ZS_DEF i okna NAD tabeli ZS_TYP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: stała częśc pytania o potwierdzenie usunięcia współpracownika z zależności
_txt:='Czy usunąć współpracownika %1 z zależności służbowych?'@[ZS_DEF.NAZWA];

{? ZS_DEF.LICZ_POD<>0
:: usunięcie przełożonego
|| {? ZS_DEF.ZS_DEF=0
   || _txt+='\n%1'['Bezpośredni podwłani nie będą mieli określonego przełożonego.'@]
   || ZS_DEF.cntx_psh();
      {? ZS_DEF.seek(ZS_DEF.ZS_DEF,,1)
::       informacja o nowym przełożonym podwładnych
      || _txt+='\n%1'['Bezpośrednim przełożonym podwładnych będzie %1.'@[ZS_DEF.NAZWA]]
      ?};
      ZS_DEF.cntx_pop()
   ?}
?};

{? FUN.ask(_txt)
:: usuń zależność
|| _ref:=exec('ref_po_usun','zs_def',ZS_DEF.ref());
   {? ZS_DEF.del() & _ref
   || ZS_DEF.seek(_ref,,1)
   ?}
?};
~~


\usun_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Akcja "Usuń" okienka tabeli P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: ER/WRT/XP/21.14/2110/0051
exec('usun_a','zs_def');
:: odrysuj zawartość
P.f_rfresh();
~~


\ref_po_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Ustala wskazanie wiersza w tabeli ZS_DEF, który ma stać się aktywny po jego usunięciu.
::   WE: _a _ZS_DEF - wskazanie wiersza, dla którego ma być ustalona pozycja po usunięciu
::   WY: wskazanie wiersza do ustawienia
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;

_new:=null;
ZS_DEF.cntx_psh();
ZS_DEF.prefix();
{? ZS_DEF.seek(_ref)
|| _token:=ZS_DEF.TOKEN;
   {? ZS_DEF.seek(ZS_DEF.ZS_DEF,)
   || {? ZS_DEF.LICZ_POD=1
      || _new:=ZS_DEF.ref()
      || ZS_DEF.index('TREE');
         ZS_DEF.prefix(ZS_DEF.ZS_TYP,#ZS_DEF.ref());
         {? ZS_DEF.find_tab(,'TOKEN',,'<>',_token)
         || _new:=ZS_DEF.ref()
         ?}
      ?}
   ?}
?};
ZS_DEF.cntx_pop();
_new


\podwladni_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Formuła akcji "Podwładni" okienka WER tabeli ZS_DEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('show_pod','stanprac');
~~


\przelozeni_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Formuła akcji "Przełożeni" okienka WER tabeli ZS_DEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: wyznacz i pokaż przełożonych z uwzględnieniem nieobecności
exec('show_kier','stanprac',,,,,,1);
~~


\zastepcy_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Formuła akcji "Zastępcy" okienka WER tabeli ZS_DEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
P_PZ.cntx_psh();
P_PZ.index('P_PZ2');
P_PZ.prefix('Z',ZS_TYP.SLO_KOD,ZS_DEF.P);
P_PZ.win_edit('RED_ZASP');
P_PZ.win_sel('ZS_DEF');

P_PZ.hdr_sel(' '+ZS_DEF.NAZWA);
P_PZ.select();
P_PZ.hdr_sel();

P_PZ.cntx_pop();
~~


\weryfikuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Formuła akcji "Weryfikuj" okienek tabeli ZS_DEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(1,
   'NUMER',   'INTEGER',   'Lp.'@,
   'ZMIANA',  'STRING[1]', 'Zmiana'@,
   'OPIS',    'STRING[80]','Opis'@,
   'AKTUALNA','STRING[80]','Dane współpracownika'@,
   'WARTOSC', 'STRING[80]','Zarejestrowana wartość'@
);

:: uzupełnij informacje
_add:="
   {? _c='' & _d=''
   || return()
   ?};
   _a.NUMER:=_a.size()+1;
   _a.ZMIANA:={? _c=_d || 'N' || 'T' ?};
   _a.OPIS:=_b;
   _a.AKTUALNA:=_c;
   _a.WARTOSC:=_d;
   _a.add()
";
_add(_TAB,MS.name(P,'WYDZIAL'),P.WYDZIAL().SYMBOL,ZS_DEF.WYDZIAL().SYMBOL);
_add(_TAB,MS.name(P,'ST'),P.ST().ST,ZS_DEF.ST().ST);
_add(_TAB,MS.name(P,'POZWORG'),P.POZWORG().KOD,ZS_DEF.POZWORG().KOD);
_add(_TAB,MS.name(P,'ZA'),P.ZA,ZS_DEF.ZA);

_hdr:='%1: %2'[menu_txt(),ZS_DEF.NAZWA];
_wnd:=_TAB.mk_sel(_hdr,'N',,'#zs_def_wsel',10,10,5);
:: główne i jedyne dostępne kolumny widoku - techniczne będą ukryte
_TAB.win_fld(_wnd,,'ZMIANA',,,-3,,,,,'Zmiana [T/N]'@,2,,"'T'","'N'");
_TAB.win_fld(_wnd,,'OPIS',,,-30);
_TAB.win_fld(_wnd,,'AKTUALNA',,,-40);
_TAB.win_fld(_wnd,,'WARTOSC',,,-40);
:: obsługa zmian informacji o współpracy
_TAB.win_act(_wnd,,'Formuła','Aktualizuj'@,,,"
   exec('akualizuj_p','zs_def');
   ZS_DEF.cntx_psh();
   ZS_DEF.prefix();
   ZS_DEF.put();
   ZS_DEF.cntx_pop();
   sel_exit()
");
:: przyciski dla głównych akcji okienka
_TAB.win_btn(_wnd,'text=%1,icon=xwin16.png:13,panel=bottom'['Aktualizuj'@],'menu:A');
_TAB.win_btn(_wnd,'text=%1,icon=xwin16.png:14,panel=bottom'['Anuluj'@],'key:Esc');
:: ustaw i wyświetl okienko
_TAB.win_sel(_wnd);
_TAB.select();
~~


\wyswietl_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed akcją "Wyświetl" prezentującą formularz pracownika.
::   WE:
::   WY: 0/1 - nie można wyświetlić szczegułów/szczegóły mogą być wyświetlone
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
{? ~exec('dostepny_ud_skl','schemat',,'PKD',P.WYDZIAL)
:: brak dostępu do jednostki organizacyjnej współpracownika
|| FUN.emsg('Brak dostępu do jednostki organizacyjnej "%1".'@[P.WYDZIAL().SYMBOL]);
   _ret:=0
?};
_ret


\wyswietl_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Dedykowana akcja "Wyświetl" prezentująca formularz pracownika.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('p_bw','pracownik');
~~


\okienko_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed wyświetleniem okienka tabeli ZS_DEF.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
OSOBA.cntx_psh();
P.cntx_psh();
1


\okienko_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Podczas zamykania okienka tabeli ZS_DEF.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
OSOBA.cntx_pop();
P.cntx_pop();
1


\rekord_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Rekord przed - ustalenie pozycji kursora w tabelach P i OSOBA.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ZS_DEF.P().OSOBA();
~~


\sprawdz_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy okienko pozwalające podjąć decyzję o dodaniu współpracowników do struktury zależności.
::   WE:
::   WY: alias tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
_BUF:=tab_tmp(1,
   'NAZWA','STRING[%1]'[$MS.fld_len(ZS_DEF,'NAZWA')],MS.name(ZS_DEF,'NAZWA'),
   'WYBRANY','STRING[1]','Wybrany'@,
   'TXT','SYS_MEMO','Komentarz'@,
   'SQL','STRING[16]','Pracownik'@,
   'TOKEN','STRING[%1]'[$MS.fld_len(ZS_DEF,'TOKEN')],MS.name(ZS_DEF,'TOKEN'),
   'ZS_DEF','STRING[16]','Zależność'@,
   'PRZ_POD','STRING[1]','Razem z podwładnymi'@
);
_wnd:=_BUF.mk_sel('Zależności służbowe'@,'P',,'#zs_def_dsel',,,,,'U');
:: główne i jedyne dostępne kolumny - techniczne będą ukryte
_BUF.win_fld(_wnd,,'WYBRANY',,,-3,,,,,'Wybrany [T/N]'@,2,,"'T'","'N'");
_BUF.win_fld(_wnd,,'PRZ_POD',,,-3,,,,,'Razem z podwładnymi [T/N]'@,2,,"'T'","'N'","''");
_BUF.win_fld(_wnd,,'NAZWA',,,-40,,,,,MS.comment(ZS_DEF,'NAZWA'));
_BUF.win_fld(_wnd,,'TXT',,,-40,,,,,'Dodatkowe informacje'@);
:: obsługa listy współpracowników
_BUF.win_act(_wnd,,'Formuła','Wybierz'@,,,"cur_tab(1,1).WYBRANY:='T'","cur_tab(1,1).put()",,1);
_BUF.win_act(_wnd,,'Formuła','Pomiń'@,,,"cur_tab(1,1).WYBRANY:='N'","cur_tab(1,1).put()",,1);
_BUF.win_act(_wnd,,'Popraw','P&odwładni'@);
_BUF.win_act(_wnd,,'Formuła','Dalej'@,,,,"sel_exit()",,,,,'D',,'target=window');
_BUF.win_act(_wnd,,'Wyświetl',,,,"
   _BUF:=cur_tab(1,1);
   _TXT:=_BUF.memo_txt(,1,'TXT');
   _OK:=
      {? _BUF.WYBRANY='T'
      || {? _BUF.ZS_DEF=''
         || 'Współpracownik będzie dodany do struktury zależności.'@
         || 'Zależności współpracownika zostaną zmienione.'@
         ?}
      || {? _BUF.ZS_DEF=''
         || 'Współpracownik nie będzie dodany do struktury zależności.'@
         || 'Zależności współpracownika nie zostaną zmienione.'@
         ?}
      ?};
   _TXT:=
      {? _TXT<>''
      || '%1\n\n%2'[_TXT,_OK]
      || _OK
      ?};
   {? _BUF.WYBRANY='T'
   || FUN.info(_TXT)
   || FUN.emsg(_TXT)
   ?}
");
_BUF.win_act(_wnd,,'Rekord',,,,"
   {? _a=0 || return() ?};
   _BUF:=cur_tab(1,1);
   _aid:=
      {? _BUF.sel_size()>0 || ''
      |? _BUF.WYBRANY='T'  || 'W'
      |? _BUF.WYBRANY='N'  || 'P'
      || 'WPD'
      ?};
   {? _BUF.PRZ_POD='' | _BUF.WYBRANY='N'
   || _aid+='O'
   ?};
   _BUF.cntx_psh();
   {? ~_BUF.find_tab(,'WYBRANY',,'=','T')
   || _aid+='D'
   ?};
   _BUF.cntx_pop();
   _BUF.actions_grayed(cur_win(1,1),_aid)
");
:: przyciski dla głównych akcji okienka
_BUF.win_btn(_wnd,'text=%1'['Wybierz'@],'menu:W');
_BUF.win_btn(_wnd,'text=%1'['Pomiń'@],'menu:P');
_BUF.win_btn(_wnd,'text=%1,icon=xwin16.png:13,panel=bottom'['Dalej'@],'menu:D');
_BUF.win_btn(_wnd,'text=%1,icon=xwin16.png:14,panel=bottom'['Anuluj'@],'key:Esc');
:: ustaw okienko przeglądania
_BUF.win_sel(_wnd);

_wnd:=_BUF.mk_edit('Podwładni'@,,'#zs_def_dred');
_BUF.win_esep(_wnd,'Zależności służbowe'@);
:: jedyne pole edycji pozwalające określić "los" podwładnych
_BUF.win_efld(_wnd,,'PRZ_POD',,,,,,'Podwładni'@,,,'radio-buttons',,
   'Pozostaw z przełożonym współpracownika.'@,"'N'",
   'Przenieś razem ze współpracownikiem.'@,"'T'"
);
:: dodaj standardowe przyciski
exec('ok_esc','#window',_BUF,_wnd,,,,,,,exec('text_red_ok','#window'));
:: ustaw okienko redakcji
_BUF.win_edit(_wnd);

_BUF


\sprawdz_arg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy tablicę nazwaną dla formuł sprawdz_*.
::   WE:
::   WY: wskazanie tablicy nazwanej o strukturze:
::       OK - operacja dołączenia/poprawienia może być natychmiast wykonana
::       TXT - tekst informacji/pytania o potwierdzenie wykonania operacji
::       TOKEN - unikalny identyfikator poprzedniej zależności służbowej
::       ZS_DEF - wskazanie poprzedniej zależności służbowej
::       PRZ_POD - przenieś podwładnych razem z przełożonym
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('OK','TXT','TOKEN','ZS_DEF','PRZ_POD');
_ret.OK:=1;
_ret.TXT:='';
_ret.TOKEN:='';
_ret.ZS_DEF:=null;
_ret.PRZ_POD:='';
_ret


\sprawdz_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Sprawdza, czy pracownik może być umieszczony/przesunięty w strukturze zależności.
::   WE: _a _P - wskazanie pracownika
::       _b _ZS_DEF - wskazanie zależności
::   WY: wskazanie tablicy nazwanej tworzonej przez sprawdz_arg
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('sprawdz_arg','zs_def');

P.cntx_psh();
ZS_DEF.cntx_psh();
{? P.seek(_a,,1) & ZS_DEF.seek(_b,,1)
|| _ref:=ZS_DEF.ref();
   ZS_DEF.index('UNIQUE');
   ZS_DEF.prefix(ZS_DEF.ZS_TYP);
   {? ZS_DEF.find_key(P.ref())
::    współpracownik już uwzględniony w zależnościach
   || _nazwa:=ZS_DEF.NAZWA;
      _licz_pod:=ZS_DEF.LICZ_POD;
      _ret.ZS_DEF:=ZS_DEF.ref();
      _ret.TOKEN:=ZS_DEF.TOKEN;
      _ret.TXT:='Współpracownik jest uwzględniony w zależnościach służbowych.'@;
      {? ZS_DEF.ZS_DEF=0
::       brak przełożonego
      || {? ZS_DEF.LICZ_POD<>0
::          podwładni nie będą mieli przełożonego
         || _ret.TXT+='\n%1'['Podwładni %1 nie będą mieli przełożonego.'@[_nazwa]];
::          niech użytkownik zadecyduje co z podwładnymi
            _ret.PRZ_POD:='N'
         ?}
      |? ZS_DEF.seek(ZS_DEF.ZS_DEF,,1)
::       współpracownik jest czyimś podwładnym
      || _ret.TXT+='\n%1'['%1 jest podwładnym %2.'@[_nazwa,ZS_DEF.NAZWA]];
         {? _licz_pod<>0
::          zmiana przełożonego podwładnych
         || _ret.TXT+='\n%1'['Przełożonym podwładnych %1 będzie %2.'@[_nazwa,ZS_DEF.NAZWA]];
::          niech użytkownik zadecyduje co z podwładnymi
            _ret.PRZ_POD:='N'
         ?}
      ?}
   ?}
?};
ZS_DEF.cntx_pop();
P.cntx_pop();

_ret.OK:=(_ret.TXT='');
_ret


\sprawdz_pyt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Wyświetla okno dialogowe z potwierdzeniem przesunięcia w strukturze zależności.
::   WE: _a OBJECT - wskazanie tablicy nazwanej, wyniku sprawdz_mod
::   WY: wynik FUN.choice() lub FUN.ask() zależnie od liczby podwładnych
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_chk:=_a;

_TXT:='%1\n\n%2'[_a.TXT,'Czy na pewno przesunąć współpracownika na wskazaną pozycję?'@];

{? _chk.PRZ_POD<>''
:: co z podwładnymi współpracownika?
|| _dec:=FUN.choice(_TXT,,'Tak, &razem z podwładnymi'@,'Tak, &bez podwładnych'@);
   {? _dec=1 || _chk.PRZ_POD:='T'
   |? _dec=2 || _chk.PRZ_POD:='N'
   ?};
   _dec

|| FUN.ask(_TXT)
?}


\widok_testowy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Tworzy i wyświetla okienko testowe zależności.
::   WE: _a STRING - kod zależności służbowej
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_wnd:=ZS_DEF.mk_sel('Test'@,'P',,'#zs_def_test',,,,1);
ZS_DEF.win_fld(_wnd,,'TOKEN',,,-20);
ZS_DEF.win_fld(_wnd,,'SCIEZKA',,,-40);
ZS_DEF.win_fld(_wnd,,'NAZWA',,,-40);
ZS_DEF.win_fld(_wnd,,'POZIOM',,,-3);
ZS_DEF.win_fld(_wnd,,'LICZ_POD',,,-3);
ZS_DEF.win_fld(_wnd,,'LISC',,,-3);

ZS_DEF.cntx_psh();
ZS_DEF.index('TREE');
ZS_DEF.prefix(exec('szukaj','zs_typ',_a));
ZS_DEF.win_sel(_wnd);
ZS_DEF.select();
ZS_DEF.cntx_pop();
ZS_DEF.win_del(_wnd);
~~


\ustal_sciezka_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Weryfikuje ścieżki w zależnościach wszystkich typów.
::   WE:
::   WY: 0/1 - błąd/sukces
::----------------------------------------------------------------------------------------------------------------------
_val:=1;
ZS_TYP.cntx_psh();
ZS_TYP.index('UNIQUE');
ZS_TYP.prefix(exec('ref_firma','ustawienia'));

_loop:=ZS_TYP.first();
{!
|? _loop & _val
|! {? ZS_TYP.ZS_TYP=0
   || _val:=exec('ustal_sciezka_def','zs_def',ZS_TYP.ref())
   ?};
   _loop:=ZS_TYP.next()
!};

ZS_TYP.cntx_pop();
_val


\ustal_sciezka_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Weryfikuje ścieżki w zależnościach danego typu.
::   WE: _a _ZS_TYP - wskazanie typu zależności
::   WY: 0/1 - błąd/sukces
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;

_val:=1;
ZS_DEF.cntx_psh();
ZS_DEF.index('UNIQUE');
ZS_DEF.prefix(_ref);

_loop:=ZS_DEF.first();
{!
|? _loop & _val
|! _org:=ZS_DEF.SCIEZKA;
   exec('_modb','zs_def');
   {? ZS_DEF.SCIEZKA<>_org
   || _val:=ZS_DEF.put()
   ?};
   _loop:=ZS_DEF.next()
!};

ZS_DEF.cntx_pop();
_val


\akc_przelozeni
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Formuła zwraca referencję wiersza tabeli ZS_DEF do którego należy dodać przełożonego.
::   WE: [_a] - 0/1 - czy należy pobrać rekord występujący najwyżej w hierarchii zależności dla pracownika
::   WY: ~~ lub referencja rekordu tabeli ZS_DEF
::----------------------------------------------------------------------------------------------------------------------
_up:={? var_pres('_a')=type_of(1) || _a || 0 ?};
ref:=null();
{? _up
|| ZS_DEF.cntx_psh();
   ZS_DEF.index('UNIQUE');
   ZS_DEF.prefix(ZS_TYP.ref(),REF.P);
   {? ZS_DEF.first()
   || _ref:=ZS_DEF.ref()
   || ZS_DEF.cntx_pop();
      return()
   ?};
   ZS_DEF.cntx_pop()
|| _kod:=exec('slo_kod','zs_typ');
   _ref:=exec('wybierz','zs_def',_kod,REF.P,,1)
?};
_ref


\akc_param
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Formuła tworzy tablicę zaznaczonych rekordów tabeli ZS_DEF, które mają ulec zmianie.
::   WE:
::   WY: ~~ lub referencja rekordu tabeli ZS_DEF
::----------------------------------------------------------------------------------------------------------------------
_P:=cur_tab(1,1).sel_aget();
:: jeżeli nie ma zaznaczonych rekordów to dodawany jest do tabeli rekord tabeli aktualnie przechowywany w buforze
{? cur_tab(1,1).sel_size()=0
|| _P.REF:=cur_tab(1,1).ref();
   _P.add()
?};
_P


\zmien_str_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Formuła na akcje w menu Przesuń okienka tabeli ZS_DEF.
::   WE: [_a] - 0/1 - informacja o wykonywaniu akcji "Zaznaczone do bieżącego zapisu" lub "Na poziom główny"
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_up:={? var_pres('_a')=type_of(1) || _a || 0 ?};
_size:=cur_tab(1,1).sel_size()=0;
_typ:=ZS_TYP.ref();

:: parametryzacja - zebranie tablicy zapisów do zmiany
_P:=exec('akc_param','zs_def');

:: parametryzacja - wybór rekordu do którego będą przypisani podwładni
_ref:=exec('akc_przelozeni','zs_def',_up);
{? var_pres('_ref')<>type_of(ZS_DEF.ref()) | _ref=null()
|| return()
?};

:: wykonanie formuły przenoszącej wybrane rekordy i ustawienie się na pierwszym z nich
{? _P.first()
|| _reference:=_P.REF;
   exec('zmien_zal','zs_def',cur_tab(1,1),_P,_typ,_ref);
   {? _up || ZS_DEF.seek(_reference) ?}
?};
obj_del(_P);
~~


\zmien_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Formuła umożliwiająca zmianę w strukturze zależności tabeli ZS_DEF.
::   WE: _a - tabela, względem której wykonywane będą zmiany (drzewo)
::       _b - tablica pracowników do przeniesienia
::       _c - referencja do ZS_TYP
::       [_d] - referencja do ZS_DEF
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_P:=_b;
_typ:=_c;
_ref:={? var_pres('_d')=type_of(ZS_TYP.ref()) || _d || 0 ?};

ZS_DEF.cntx_psh();
P.cntx_psh();
OSOBA.cntx_psh();
_def:=
   {? ~exec('dom_empty','#table',ZS_DEF)
   || {? _ref || _ref || ZS_DEF.ref() ?}
   || null
   ?};
_BUF:=exec('sprawdz_buf','zs_def');
_tab.sel_adel();

_errMsg:='Nie można wykonać przeniesienia rekordów.'@ + '\n';
_errMsg+='Nastąpiła próba utworzenia zależności między przełożonym a podwładnym, który jest tym samym pracownikiem.'@;

_loop:=_P.first();
{!
|? _loop
|! {? ZS_DEF.seek(_P.REF) & P.seek(ZS_DEF.P,,1)
   || P.OSOBA();
      _BUF.blank();
      _chk:=exec('sprawdz_mod','zs_def',P.ref(),_def);
      _BUF.NAZWA:='%1 %2 (%3)'[OSOBA.NAZWISKO,OSOBA.PIERWSZE,P.T];
      _BUF.WYBRANY:={? _chk.OK || 'T' || 'N' ?};
      _BUF.memo_set(_chk.TXT,'TXT');
      _BUF.SQL:=$P.ref();
      _BUF.TOKEN:=_chk.TOKEN;
      _BUF.ZS_DEF:=$_chk.ZS_DEF;
      _BUF.PRZ_POD:=_chk.PRZ_POD;
      _BUF.add() & _BUF.memo_put(,'TXT');
      obj_del(_chk)
   ?};
   _loop:=_P.next()
!};

_cnt:=1;
_BUF.f_clear();
{? _BUF.find_tab(,'WYBRANY',,'=','N')
:: znaleziono zależności
|| {? _BUF.size()>1
   || _cnt:=_BUF.select()
   || _chk:=exec('sprawdz_arg','zs_def');
      _chk.TXT:=_BUF.memo_txt(,1,'TXT');
      _chk.PRZ_POD:=_BUF.PRZ_POD;
      {? exec('sprawdz_pyt','zs_def',_chk)
::       zmień istniejącą zależność
      || _BUF.PRZ_POD:=_chk.PRZ_POD;
         _BUF.WYBRANY:='T';
         _cnt:=_BUF.put()
      ?}
   ?}
?};

:: sprawdzenie czy wsród wybranych pracowników znajduje się pracownik, któremu użytkownik chce przypisać podwładnych
{? _BUF.first()
|| {!|?
      {? _BUF.ZS_DEF=$_ref
      || FUN.info(_errMsg);
         OSOBA.cntx_pop();
         P.cntx_pop();
         ZS_DEF.cntx_pop();
         return()
      ?};
      _BUF.next()
   !}
?};
_info:='Anulowano zmiany w zależnościach służbowych.'@;
_test:='';
_err:=0;
{? _cnt<>0 & _BUF.first()
:: zmień strukturę zależności
|| do();
   ZS_DEF.index('TOKEN');
   _loop:=1;
   {!
   |? do_state()=1 & _loop
   |! {? _BUF.WYBRANY='T' & P.seek(_BUF.SQL,,1)
      || {? ZS_DEF.find_key(_BUF.TOKEN,)
::          przesuń podwładnego
         || _old:=ZS_DEF.ZS_DEF;
            ZS_DEF.ZS_DEF:=#_def;
            _test:=ZS_DEF.NAZWA;
            {? ~ZS_DEF.put(1)
            || _err:=1;
               undo()
            ?};
            {? do_state()=1 & ZS_DEF.LICZ_POD<>0 & _BUF.PRZ_POD<>'T'
::             podwładni zostają z poprzednim przełożonym współpracownika
            || _cur:=#ZS_DEF.ref();
               ZS_DEF.cntx_psh();
               ZS_DEF.index('TREE');
               ZS_DEF.prefix(ZS_DEF.ZS_TYP);
               {!
               |? ZS_DEF.find_key(_cur)
               |! ZS_DEF.ZS_DEF:=_old;
                  _test:=ZS_DEF.NAZWA;
                  {? ~ZS_DEF.put()
                  || _err:=1;
                     undo()
                  ?}
               !};
               ZS_DEF.cntx_pop()
            ?}
         || ZS_DEF.blank(1);
            ZS_DEF.ZS_TYP:=_typ;
            ZS_DEF.ZS_DEF:=_def;
            ZS_DEF.P:=P.ref();
::          dodaj podwładnego
            {? ~ZS_DEF.add(1)
            || _err:=1;
               undo()
            ?}
         ?}
      ?};
      _loop:=_BUF.next()
   !};
   end()
?};
{? _err
|| _test:=exec('dnd_err','zs_def',3,_test);
   FUN.info('%1\n%2'[_info,_test])
?};
:: porządki
OSOBA.cntx_pop();
P.cntx_pop();
ZS_DEF.cntx_pop();
obj_del(_BUF);
~~


\zs_def_przesun_0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Akcja "Przenieś > Na poziom główny".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
exec('ud_def_przesun','schemat',"null")


\zs_def_przesun_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Przed "Przenieś > Do wybranego zapisu".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
exec('ud_def_przesun','schemat',"exec('wybierz','zs_def',ZS_DEF.ZS_TYP().SLO_KOD)")


\zs_def_update_idput
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IGPTASZE [12.51]
:: OPIS: Formuła aktualizuje znaczniki modyfikacji przełożonego oraz podwładnych w tabli ZS_DEF.
::   WE:  _a [REFERENCE]    - ref pracownika
::   WY: Liczba zaktualizowanych rekordów lub -1 w przypadku błędnego wywołania formuły.
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)<>type_of(null()) || return(-1) ?};
_ret:=0;
ZS_DEF.cntx_psh();
ZS_DEF.index('FK_2');
ZS_DEF.prefix(_a);
{? ZS_DEF.first()
|| ZS_DEF.trig_off('*','*');
   _sciezka:=ZS_DEF.SCIEZKA+ZS_DEF.TOKEN;
   _ret+=ZS_DEF.put(,1);
   ZS_DEF.index('SCIEZKA');
   ZS_DEF.prefix(_sciezka);
   {? ZS_DEF.first()
   || {!
      |? {? ZS_DEF.P().PORTAL='T' || _ret+=ZS_DEF.put(,1) ?};
         ZS_DEF.next()
      !}
   ?};
   ZS_DEF.trig_on('*','*')
?};
ZS_DEF.cntx_pop();
_ret

:Sign Version 2.0 jowisz:1045 2024/01/18 11:22:40 65db22504706e207b8f820e4d667cb860c951dd3a8814fb49dc7c91298084514e246766a37980c1074f8bc56d9e4defe0976f63e88c0b9f6df3166fa3425e9f3f77eb801f849c61157e2cabc9d8814eb99b1ae30fb8010a8763ac74ac68a10c827e261066098918d7762915bd9c69593604008e09e22e636d294fda646a98757
