:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: pkd.fml
:: Utworzony: 10.03.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły oraz obszary robocze dziedziny PKD.
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła inicjująca dla dziedziny PKD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BPMN.SYM_DOM:='PKD';
exec('czytaj','#stalesys',,KST,KST_PAR,XINFO);

:: Zmienna optymalizująca dostęp do parametru 188.
__PAR188:=PAR_SKID.get(188)='T';

:: Przeglądanie osób (czynność z dziedziny PKD), może odbywać się na rzecz procesu związanego np. z logistyką.
:: Tylko jawne wskazanie w procesie pozwala na jego identyfikację jako "personelowego".
:: Zmienna poniżej służy optymalizacji dostępu do tej informacji.
{? var_pres('__PERSONEL')<>type_of(0)
|| __PERSONEL:=0
?};

exec('__F_ZATR','object');
exec('RB','object');
exec('__WND','object');
exec('__KAL','object');
exec('__RUB','object');
exec('FUNKCJE','object');
exec('__STALE','object');
exec('MASK','object');
exec('dekl_sarray','#array');
exec('Icon','#object');

:: obsługa dedykowanych pól zależnych od dziedziny produktu
_wyd_f3:="exec('ud_def_symbol_f3','schemat','PODZORG',,'PKD')";
_wyd_ae:="exec('edit_var_h_wyd_ae','pracownik','PKD')";

EDIT_VAR.fld_fml('H_WYD','F3',_wyd_f3);
EDIT_VAR.fld_fml('H_WYD','AFTER_EDIT',_wyd_ae);
P_IPOD.fld_fml('PROC','DISPLAY_FORMAT',"'out_prec=2'");

: Lista płac.
SEEK.O:=__PARSES.getVal('ListaPłac').REF;
{? SEEK.O<>null()
|| SEEK.O();
   exec('otworz','lista_plac')
?};

:: obiekt do wyliczenia zwolnienia z przychodu
exec('__ZW_PRZ','object');

~~


\dsk_set_callback
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiada za ustawienie wartości wskazanych elementów pulpitu.
::   WE: _a - \
::       ...   > Pełne identyfikatory elementów panelu.
::       _? - /
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_set:="exec('set_value','#desktop','','selektor',_a,_b)";

{! _lp:=1 .. _
|! _el:=_[_lp];
   {? _el='schCB@panel'
   || _set(_el,$P_FILTER.UD_SCH)

   |? _el='formCB@panel'
   || _set(_el,$P_FILTER.F_ZATR)

   |? _el='statusCB@panel'
   || _set(_el,P_FILTER.STATUS)

   |? _el='listaTXT@panel'
   || _set(_el,exec('o','areatitle'))
   ?}
!};
win_activate(_par.cfg.nav.main)


\dsk_get_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca dane dla selektora schematów.
::   WY: alias do tabeli tymczasowej zawierającej listę schematów.
::----------------------------------------------------------------------------------------------------------------------
sql(
   'select S.REFERENCE as REF, S.SYMBOL as SYMBOL, S.OPIS as OPIS '+
   'from UD_SCH as S where S.UD_TYP=:_a and S.AKTYWNY=\'T\' '+
   'order by OPIS',
   exec('szukaj_ud_typ','schemat','PODZORG')
)


\dsk_get_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca dane dla selektora form współpracy. Formuła wykorzystywana również, przez akcję Dołącz w PKD_ZAT.
::   WE:  _a  [STRING] - typ formy współpracy: T - docelowa, N - przejściowa
::       [_b] [NUMBER] - czy tworzyć pozycję "Wszystkie dostępne": 0-Nie / 1-Tak [domyślnie]
::   WY: alias do tabeli tymczasowej zawierającej listę form współpracy.
::----------------------------------------------------------------------------------------------------------------------
_docelowa:=_a;
_all:={? var_pres('_b')=type_of(0) || _b || 1 ?};

_rs:=sql('select 0 as LP, F.REFERENCE as REF, F.KOD as KOD, F.OPIS as OPIS from F_ZATR as F where 0=1');
{? _all
|| _rs.OPIS:='Wszystkie dostępne';
   _rs.add()
?};

exec('filtruj','f_zatr',_docelowa,'OPIS');
_loop:=F_ZATR.f_first();
{!
|? _loop
|! _rs.LP+=1;
   _rs.REF:=$F_ZATR.ref();
   _rs.KOD:=F_ZATR.KOD;
   _rs.OPIS:=spli_str(F_ZATR.OPIS,'-')[1];
   _rs.add();
   _loop:=F_ZATR.f_next()
!};

_rs


\dsk_get_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca dane dla selektora statusu.
::   WY: alias do tabeli tymczasowej zawierającej listę statusów.
::----------------------------------------------------------------------------------------------------------------------
_rs:=sql('select 0 as LP, S.SYSTEM as KOD, S.NAZWA as NAZWA from SLO_KOD as S where 0=1');

_rs.KOD:='W';
_rs.NAZWA:='Wszyscy'@;
_rs.add();

_rs.LP+=1;
_rs.KOD:='T';
_rs.NAZWA:='Zatrudnieni / aktywni'@;
_rs.add();

_rs.LP+=1;
_rs.KOD:='N';
_rs.NAZWA:='Zwolnieni / archiwalni'@;
_rs.add();

_rs


\dsk_callback_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Reakcja na wybór schematu w selektorze.
::----------------------------------------------------------------------------------------------------------------------
UD_SCH.prefix();
{? UD_SCH.seek(exec('get_value','#desktop','','selektor','schCB@panel'))
|| P_FILTER.UD_SCH:=UD_SCH.ref()
?};
win_activate(params_get().cfg.nav.side)


\dsk_callback_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Reakcja na wybór formy współpracy w selektorze.
::----------------------------------------------------------------------------------------------------------------------
_ref:=exec('get_value','#desktop','','selektor','formCB@panel');

P_FILTER.F_ZATR:=null();
F_ZATR.prefix();
{? _ref<>'' & F_ZATR.seek(_ref)
|| P_FILTER.F_ZATR:=F_ZATR.ref()
?};

_id:='F_ZATR';
_args:=__PARSES.args(_id);
_args.REF:=P_FILTER.F_ZATR;
__PARSES.setVal(_id,_args);

_cfg:=params_get().cfg;
_cfg.tab_refresh:=1;

:: Specyficzna obsługa obszarów roboczych.
{? _cfg.area='PKD_EZK'
|| exec('set_enabled','#desktop','','selektor','przyciskRap@panel',_args.REF<>null());
   exec('set_enabled','#desktop','','selektor','przyciskGrp@panel',_args.REF<>null())
?};

win_activate(_cfg.nav.main)


\dsk_callback_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Reakcja na wybór statusu w selektorze.
::----------------------------------------------------------------------------------------------------------------------
P_FILTER.STATUS:=exec('get_value','#desktop','','selektor','statusCB@panel');

__PARSES.setVal('ZakresDanych',P_FILTER.STATUS);

win_activate(params_get().cfg.nav.main)


\run_cond_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła uprawnień dla czynności, które w sposób pośredni dotyczą współpracownika.
::       Dokładniej: jeden z parametrów wejściowych jest jednoznacznie powiązany z rekordem tabeli P.
::       Formuła decyduje o tym, czy dany użytkownik może uruchomić bieżącą instancję czynności.
::       Formuła może pobrać parametry za pomocą funkcji params_get(). W jej wyniku otrzymuje tablicę nazwaną
::       z następującymi elementami:
::          user    – USERS.ref() – użytkownik, dla którego są sprawdzane uprawnienia;
::          user_r  - USERS.ref() lub ~~ - użytkownik zastępowany.
::          mp      – obiekt Menadżera Procesów;
::          in      – parametry wejściowe czynności.
::   WE: [_a] [STRING] - Akronim parametru wejściowego, który będzie służył do określenia powiązania z tabelą P
::                       [domyślnie: 'P'].
::       [_b] [STRING] - Formuła (w postaci tekstu), której zadaniem jest podczytanie rekordu tabeli P, po znalezieniu
::                       rekordu wskazanego przez parametr wejściowy o akronimie przekazanym w _a [domyślnie: ''].
::                       Wynikiem formuły musi być 0/1.
::                       Uwaga: poprawność formuły nie jest weryfikowana.
::       [_c] [STRING] - Lista (oddzielona przecinkami) tabel, dla których będą chronione bufory.
::                       Uwaga: poprawność elementów listy nie jest weryfikowana.
::   WY: 0 - Użytkownik nie ma uprawnień do wykonania bieżącej instancji czynności.
::       1 - Użytkownik ma uprawnienia do wykonania bieżącej instancji czynności.
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_ts:=type_of('');

_acr:={? var_pres('_a')=_ts || _a || 'P' ?};
_getP:={? var_pres('_b')=_ts || _b || '' ?};
_tabs:={? var_pres('_c')=type_of('') || _c || '' ?};

_par:=params_get();
_user:=_par.user;
_mp:=_par.mp;
_in:=_par.in;

{? var_pres(_acr,_in)<>type_of(null())
:: Nieprawidłowy akronim parametru wejściowego lub nieprawidłowy typ.
:: Gdyby nie fakt, że formuła ma być bezdialogowa, to należałoby wyświetlić odpowiedni komunikat.
:: Jedyne jednak co możemy, to zwrócić 0 i zabronić wszystkim użytkownikom uruchomienia tej instancji czynności.
:: Może taka sytuacja zwróci uwagę programisty / testera i formuła zostanie prawidłowo wywołana.
|| return(_ret)
?};

_val:=($('_a.'+_acr))(_in);
{? _val<>null()
|| _TAB:=ref_tab(_val);
   _TAB.cntx_psh();
   _wm:=ref_name(_val);
   {? _TAB.name()<>_wm
   || _TAB.use(_wm)
   ?};
   _TAB.prefix();
   {? _TAB<>P
   || _tabs+=',P'
   ?};
   _taba:=spli_str(_tabs,',');
   _psh:=_pop:='';
   {! _lp:=1 .. obj_len(_taba)
   |! {? _taba[_lp]<>''
      || _psh:=_psh+'%1.cntx_psh(); %1.prefix(); ' [_taba[_lp]];
         _pop:='%1.cntx_pop(); ' [_taba[_lp]]+_pop
      ?}
   !};
   {? _psh<>''
   || ($(_psh-2))()
   ?};
   {? _TAB.seek(_val) & (_getP='' | ($_getP)())
::    Udało się znaleźć rekord związany z pracownikiem - przejdźmy do właściwych testów.
   || _ret:=
::       Dla formy współpracy przetwarzanego pracownika musi istnieć możliwość uruchomienia bieżącej czynności.
         exec('dostepna_a','f_zatr',P.F_ZATR,_mp.buf_act.Ref) &
::       Użytkownik weryfikowany musi mieć uprawnienia do formy współpracy przetwarzanego pracownika.
         exec('dostepny_u','f_zatr',P.FIRMA,_user,P.F_ZATR) &
::       Użytkownik weryfikowany musi mieć uprawnienia do jednostki organizacyjnej przetwarzanego pracownika.
         exec('dostepny_ud_skl','schemat',_user,_mp.buf_act.B_DOMAIN,P.WYDZIAL)

::    Komentarz o zwijaniu:
::    Jeżeli jest jakiś problem z parametrem wejściowym (np. rekord został usunięty), to na uruchomienie czynności
::    pozwólmy każdemu. Tylko w ten sposób możemy sprawić, aby czynność zwinęła się.
   || _ret:=1
   ?};
   {? _pop<>''
   || ($(_pop-2))()
   ?};
   _TAB.cntx_pop()

:: Patrz 'Komentarz o zwijaniu'.
|| _ret:=1
?};

_ret


\zws_dos
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Główna formuła obszaru roboczego ZWS_DOS - Dane osobowe.
::       Konfiguracja okna, zakładek i sposobu działania znajduje sie w formule \zws_dos_config.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('init','pkd');
__PERSONEL:=exec('lic','#b_domain','PKD');

:: Najpierw kilka zmiennych, które będą wykorzystywane w widoku. Chcemy, aby zmienne te były dostępna już na etapie
:: tworzenia widoku - stąd "wstępny" params_set() ...
_kod:=exec('kod','giodo');
_kart_def:=exec('params_kart_def','kart_dod');
_tzalacz:=exec('tzalacz_create','zalacz');
:: Ustalenie treści linku i ustawienie domyślnych parametrów pracy
_params:=params_get();
{? type_of(_params)>0 & var_pres('LINK',_params)
|| _link:=_params.LINK
|| _link:=''
?};
:: jesli istnieje, przekaz link do konfiguracji okienka (potrzebne do aktywowania wlasciwego okienka)
params_set(
   'kod',_kod,
   'kart_def',_kart_def,
   'tzalacz',_tzalacz,
   'link',_link
);
:: ... teraz parametryzacja widoku ...
_cfg:=params_exec('zws_dos_config','pkd');
:: ... i ostateczny params_set() - z pełnym kompletem.
params_set(
   'kod',_kod,
   'kart_def',_kart_def,
   'tzalacz',_tzalacz,
   'cfg',_cfg,
   'link',_link
);

{? _link<>'' & ref_tab(_link)=OSOBA
|| _fzatr:=__PARSES.args('F_ZATR');
   _jednostka:=__PARSES.args('JednostkaOrganizacyjna');
   _firma:=exec('firma','ustawienia');
   _user:=exec('operatorUser','#users');
   _skl:=exec('plaski_ud_def','schemat',,'PKD','PODZORG',exec('ref_firma','ustawienia'));
   USERS_FZ.cntx_psh();
   USERS_FZ.index('DOSTEP');
   USERS_FZ.prefix('T',_firma,_user);
   USERS_FZ.first();
   _ret:=USERS_FZ.F_ZATR().KOD;
   USERS_FZ.cntx_pop();
:: jesli _ret=0 to return
   _fzatr.KOD:=_ret;
   _skl.first();
   _jednostka.SYMBOL:=_skl.SYMBOL;
   __PARSES.setVal('F_ZATR',_fzatr);
   __PARSES.setVal('JednostkaOrganizacyjna',_jednostka)
?};

OSOBA.cntx_psh();
OSOBA.index('OSOBA');
OSOBA.prefix();
OSOBA.win_sel(_cfg.window);
OSOBA.win_edit('RED');
OSOBA.win_patt('WZO');

($_cfg.prolog)();
AreaTitle.setTabWin(OSOBA,_cfg.window);
AreaTitle.setTitle();
{? _link<>''
|| exec('zwsdosLinkselect','pkd',_link)
|| OSOBA.select()
?};
($_cfg.epilog)();
OSOBA.cntx_pop()


\zws_dos_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła konfigurująca informacje o danych prezentowanych w obszarze roboczym ZWS_DOS. Przyjęte założenia:
::          - Istnieje czynność pozwalająca na modyfikację kartoteki stowarzyszonej. Czynność ta obsługuje akcje:
::             - START     - wejście do okienka (uruchomienie procesu i pozostawienie go na liście zadań);
::             - STOP      - wyjście z okienka (przerwanie procesu);
::             - ZAKOŃCZ   - obsługa akcji/przycisku Zakończ (zakończenie czynności).
::          - Może istnieć czynność pozwalająca na przeglądanie kartoteki stowarzyszonej.
::   WE:
::   WY: Tablica elementów nazwanych z konfiguracją.
::----------------------------------------------------------------------------------------------------------------------
: okienko główne obszaru - kontener do wstawiania zakładek
_wnd:=OSOBA.grp_make(,
   "  params_set(params_get());
      {? params_get().link<>''
      || exec('zwsdosLinkactivate','pkd')
      ?}
   ",
   'zws_dos',,,
   "exec('exit','zws')",
,);

_id:='zws_dos_osoba';
OSOBA.grp_sel(_wnd,OSOBA,'WER',,
:  po odświeżeniu
   "  params_set(params_get());
      exec('pkd_refresh','pkd');
      _ga:={? exec('osoba_x_bd','osoba') || '' || 'PUNY' ?};
      OSOBA.actions_grayed('WER',_ga)
   ",
:  położenie i wysokość
   ,,,
:  przed obsługą
   "  params_set(params_get());
     _link:=params_get().link;
      {? _link<>'' & ~exec('osoba_x_bd','osoba')
      || FUN.emsg('Nie masz uprawnień do przeglądania danych wyszukanego użytkownika','Uwaga!')
      ?};
      params_exec('x_main_bs','pkd',_a)",
:  po obsłudze
   "params_exec('x_main_as','pkd',_a)",
:  utrwalenie,  aktywacja, wypełnienie
   ,,'maximized',
   _id
);
OSOBA.grp_splt(_wnd,,'horizontal','bottom',18);

: przygotuj konfigurację obszaru roboczego
_cfg:=exec('pkd_conf','pkd','ZWS_DOS',OSOBA,_wnd,_id);

: dołącz kolejne zakładki
exec('pkd_conf_os_adres','pkd',_cfg);
exec('pkd_conf_pko','pkd',_cfg);
exec('pkd_conf_os_us','pkd',_cfg);
exec('pkd_conf_p_info','pkd',_cfg);
exec('pkd_conf_rd','pkd',_cfg);
exec('pkd_conf_staz','pkd',_cfg);
exec('pkd_conf_os_szkol','pkd',_cfg);
exec('pkd_conf_kart_dod_szkolbhp','pkd',_cfg);
exec('pkd_conf_zj','pkd',_cfg);
exec('pkd_conf_projgd','pkd',_cfg);
exec('pkd_conf_kart_dod_wyr_kar','pkd',_cfg);
exec('pkd_conf_upr_zawo','pkd',_cfg);
exec('pkd_conf_kart_dod_dod_kwal','pkd',_cfg);
exec('pkd_conf_kart_dod_xxxxxxxx','pkd',_cfg);
exec('pkd_conf_woj','pkd',_cfg);
exec('pkd_conf_os_tyt','pkd',_cfg);
exec('pkd_conf_os_dnauk','pkd',_cfg);
exec('pkd_conf_giodo','pkd',_cfg);
exec('pkd_conf_emer_ren','pkd',_cfg);
exec('pkd_conf_zalacz_z','pkd',_cfg,OSOBA);
:: Obecnie "Dokumentacja pracownicza" z poziomu OSOBA nie jest obsługiwana.
::exec('pkd_conf_zalacz_d','pkd',_cfg,OSOBA);

: finalizuj konfigurację obszaru
exec('pkd_conf_end','pkd',_cfg);

: konfiguracja
_cfg


\zws_dos_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz" w obszarze ZWS_DOS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('pkd_xxx_akcja','pkd','ZWS_DOS_PRDO','DOŁĄCZ');
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,
   'PERSONEL',{? var_pres('__PERSONEL')=type_of(0) & __PERSONEL || 'TAK' || 'NIE' ?}
);
exec('mp_run','#b__box',_params);
{? REF.OSOBA<>null()
|| REF.OSOBA()
?}


\zws_dos_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw" w obszarze ZWS_DOS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('pkd_xxx_akcja','pkd','ZWS_DOS_PRDO','POPRAW',OSOBA);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,
   'PERSONEL',{? var_pres('__PERSONEL')=type_of(0) & __PERSONEL || 'TAK' || 'NIE' ?}
);
_context:=obj_new('OSOBA');
_context.OSOBA:=OSOBA.ref();
_params.CONTEXT:=_context;
exec('mp_run','#b__box',_params)


\zws_dos_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń" w obszarze ZWS_DOS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
OSOBA.cntx_psh();
_cur:=OSOBA.uidref();
_new:={? OSOBA.next() | OSOBA.prev() || OSOBA.uidref() || null() ?};
OSOBA.cntx_pop();

_params:=exec('pkd_xxx_akcja','pkd','ZWS_DOS_PRDO','USUŃ',OSOBA);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,
   'PERSONEL',{? var_pres('__PERSONEL')=type_of(0) & __PERSONEL || 'TAK' || 'NIE' ?}
);
_context:=obj_new('OSOBA');
_context.OSOBA:=OSOBA.ref();
_params.CONTEXT:=_context;
exec('mp_run','#b__box',_params);

OSOBA.seek(_cur) | OSOBA.seek(_new)


\pkd_zat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Główna formuła obszaru roboczego PKD_ZAT - Zatrudnienie pracownika.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('init','pkd');
__PERSONEL:=1;

UD_TYP.cntx_psh();
UD_SCH.cntx_psh();

{? ~exec('domyslny','schemat','PODZORG')
|| UD_SCH.cntx_pop();
   UD_TYP.cntx_pop();
   return()
?};

: ignoruj status aktywności współpracownika
__PARSES.setVal('ZakresDanych','W');
: filtruj dla rekordów, w których proces zatrudnienia się nie zakończył
F_ZATR.cntx_psh();
F_ZATR.index('KOD');
F_ZATR.prefix('N',~__PARSES.getVal('F_ZATR').KOD);
{? F_ZATR.first()
|| P_FILTER.F_ZATR:=F_ZATR.ref()
?};
F_ZATR.cntx_pop();

H.cntx_psh();
H.use('_his_');
H_ODDE.cntx_psh();
H_ODDE.use('h_odde_');
H_UM.cntx_psh();
exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));

_loop:=1;
{!
|? _loop
|!
:: parametryzacja widoku obszaru roboczego
   _cfg:=exec('pkd_zat_config','pkd');
   params_set('cfg',_cfg);
   P.cntx_psh();
   P.win_sel(_cfg.window);
   ($_cfg.prolog)();
   AreaTitle.setTabWin(P,_cfg.window);
   AreaTitle.setTitle();
   _loop:=P.select();
   ($_cfg.epilog)();
   P.cntx_pop();
   P.win_del(_cfg.window);
   obj_del(_cfg)
!};

H_UM.cntx_pop();
H_ODDE.cntx_pop();
H.cntx_pop();
exec('otworz_h_um','pracownik');

UD_SCH.cntx_pop();
UD_TYP.cntx_pop();

~~


\pkd_zat_dsk_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła przygotowuje tłumaczenia dla kontrolki pkd_zat.dsk.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('elements_table','#desktop');
_add:="_a.blank(); _a.ID_SYS:=_b; _a.NAME:=_c; _a.add()";

_add(_TAB,'schCB@panel','Schemat'@);
_add(_TAB,'formCB@panel','Forma współpracy'@);

_TAB


\pkd_zat_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła tworząca interfejs użytkownika dla obszaru roboczego ZAT w dziedzinie PKD.
::   WY: tablica elementów nazwanych z konfiguracją.
::----------------------------------------------------------------------------------------------------------------------
_inTerm:=
   {? ~exec('interm','#system')
   || exec('pxx_widok_uproszczony','pkd','PKD_ZAT')
   || 1
   ?};

_main:='';
_side:='';
_mode:='maximized';

{? ~_inTerm
||
   _main:='PKD_ZAT';
   _side:='NAW_MIN';
:  okienko główne obszaru - kontener do wstawiania zakładek
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "  exec('load','#desktop','selektor','pkd_zat.dsk',,,,,exec('pkd_zat_dsk_pl','pkd'),1);
         params_exec('stdor_bf','pkd','N',exec('tmp4dest','f_zatr',__PARSES.getVal('F_ZATR').KOD,'KOD'));
         grp_disp(UD_DEF,'NAW_MIN',1,1);
         1
      ",
:     identyfikator
      'or_zat_ezk',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdor_oc','pkd')
         ?}
      ",,,
::    rozkład
      'jterm'
   );

:  utwórz selektor firmy jako kontrolkę
   exec('create','#desktop',P,'selektor',_wnd,2);

:  drzewko struktury organizacyjnej
   P.grp_splt(_wnd,,'horizontal','panel');
   P.grp_sel(_wnd,UD_DEF,_side,,
:     po odświeżeniu
      "params_exec('stdor_def_ar','pkd')",
:     położenie i wysokość
      ,,18,
:     przed obsługą
      "params_exec('stdor_def_bs','pkd',_a)",
:     po obsłudze
      "params_exec('stdor_def_as','pkd',_a)",
:     utrwalenie, aktywacja, wypełnienie
      0,0,_mode,
:     identyfikator
      _side
   );

:  lista osób zatrudnianych we wskazanej jednostce
   P.grp_splt(_wnd,'panel','vertical','right')
||
   _main:='PKD_ZATI';
   _side:='';
:  okienko główne obszaru - kontener do wstawiania zakładek
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "  params_exec('stdin_bf','pkd','N',P_FILTER.F_ZATR);
         1
      ",
:     identyfikator
      'or_zat_ezk',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdin_oc','pkd')
         ?}
      "
   )
?};
: lista osób zatrudnianych we wskazanej jednostce
P.grp_sel(_wnd,P,_main,,
:  po odświeżeniu
      "  params_set(_par:=params_get());
         _ag:='';
         {? exec('dest','f_zatr',P.F_ZATR,'KOD')='z'
::       Dla Zleceniobiorców ukrywamy "Druku&j" i "&Zatrudnij".
         || _ag:='JZ'

         || _enable:=1;
::       Zakładamy, że akcja "&Zatrudnij" będzie dostępna. Sytuację może zmienić istnienie procesu innego niż
::       PKD_ZAT_PRUM - Rejestracja umowy o pracę.
            B_KEYREF.cntx_psh();
            B_KEYREF.index('KEYREF');
            B_KEYREF.prefix(P.uidref());
            _again:=B_KEYREF.first();
            {!
            |? _enable & _again
            |! {? B_KEYREF.UID_ACT='PKD_ZAT_PRUM'
               || _again:=B_KEYREF.next()
               || _enable:=0
               ?}
            !};
            B_KEYREF.cntx_pop();
            {? ~_enable
            || _ag:='Z'
            ?}
         ?};
         {? exec('ses_get','xfilter',_par.cfg.nav.main).SES=null
         || _wfa:={? cur_win(1,1)='PKD_ZATI' || 'C(W)C(I)' || 'W' ?};
            _ag:='%1%2:%1'[_wfa,_ag]
         ?};
         P.actions_grayed(_par.cfg.nav.main,_ag);
         params_exec('stdor_p_ar','pkd')
      ",
:  położenie i wysokość
      ,,18,
:  przed obsługą
      "params_exec('stdor_p_bs','pkd',_a)",
:  po obsłudze
      "params_exec('stdor_p_as','pkd',_a)",
:  utrwalenie, aktywacja, wypełnienie
      0,0,_mode,
:  identyfikator
      _main,
:  główne
      1
);

: obszar zakładek kartotek stowarzyszonych
P.grp_splt(_wnd,,'horizontal','bottom');

: przygotuj konfigurację obszaru roboczego
_cfg:=exec('pkd_conf','pkd','PKD_ZAT',P,_wnd,_main,_side);
_cfg.final:='N';

_num:=0;
_sym:='PKD_ZAT';
: dołącz kolejne zakładki
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_os_adres','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_pko','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_os_us','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_bdo','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_kart_dod_szkolbhp','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_zat_h_odde','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
{? exec('is_active','gp_api')
|| exec('pkd_conf_p_gp','pkd',_cfg);
   Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg)
?};
{? exec('is_pzd02','ppsf')
|| exec('pkd_conf_ppsf_zds','pkd',_cfg);
   Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
   exec('pkd_conf_ppsf_adr','pkd',_cfg);
   Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
   exec('pkd_conf_ppsf_po','pkd',_cfg);
   Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg)
?};

: finalizuj konfigurację obszaru
exec('pkd_conf_end','pkd',_cfg);

: konfiguracja
_cfg


\pkd_xxx_akcja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ogólna obsługa akcji obszaru roboczych PKD_xxx.
::   WE:  _a  [STRING] - Identyfikator czynności.
::       [_b] [STRING] - Nazwa akcji do uruchomienia.
::       [_c] [TABLE]  - Uchwyt tabeli rekordu kluczowego.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=exec('mp_run_a','#b__box');
_par.ACT_UID:=_a;
{? var_pres('_b')=type_of('')
|| _par.AKCJA:=_b
?};

{? var_pres('_c')=type_of(SYSLOG)
|| _par.UIDREF:=_c.uidref();
   _par.PROC_START:='N'
|| _par.PROC_START:='T'
?};

_par.PORTS_IN:=exec('portsIn','#b__box',_par.ACT_UID);

_par


\pkd_zat_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Dołącz" obszaru PKD_ZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_f_zatr:='';

{? P_FILTER.F_ZATR=null()
: W selektorze wybrano "Wszystkie dostępne" - na coś trzeba się zdecydować.
|| _TAB:=exec('dsk_get_form','pkd','N',0);
   {? _TAB.first()
   || {!
      |? _act:=exec('f_zatr2act','wspolpraca',exec('tmp2dest','f_zatr',_TAB.KOD,'KOD'));
:        Czy dla danej formy współpracy czynność typu "nawiąż współpracę" może być uruchamiana przez bieżącego
:        użytkownika?
         {? _act<>'' & exec('chk_role','#b__box',OPERATOR.USER,_act)
         || _TAB.next()
         || _TAB.del()
         ?}
      !}
   ?};
   {? _TAB.size()=1 & _TAB.first()
:     Użytkownik ma dostęp tylko do jednej formy - "wybór" jest zbędny.
   || _f_zatr:=_TAB.KOD
:     Użytkownik musi wskazać formę, dla której będzie "nawiązywał współpracę".
   || _TAB.index(_TAB.ndx_tmp('Opis',,'OPIS',,));
      _dh:=_TAB.size()+1;
      {? _dh<5
      || _dh:=5
      |? _dh>30
      || _dh:=30
      ?};
      _ws:=_TAB.mk_sel('Formy współpracy'@,,,'f_zatr_wyb',,,_dh,,'U');
      _TAB.win_fld(_ws,,'OPIS',,,,,,MS.name(F_ZATR,'OPIS'),,MS.comment(F_ZATR,'OPIS'));
      _TAB.win_act(_ws,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
      _TAB.win_act(_ws,,'Szukaj');
      _TAB.win_act(_ws,,'Kolejność');
      _TAB.win_sel(_ws);
      {? _TAB.select()
      || _f_zatr:=_TAB.KOD
      || return()
      ?}
   ?}

:  W selektorze wskazana jest konkretna forma
|| F_ZATR.cntx_psh();
   F_ZATR.prefix();
   {? F_ZATR.seek(P_FILTER.F_ZATR)
   || _f_zatr:=F_ZATR.KOD
   ?};
   F_ZATR.cntx_pop()
?};

_act:=exec('f_zatr2act','wspolpraca',exec('tmp2dest','f_zatr',_f_zatr,'KOD'));
{? _act=''
|| FUN.info('Forma współpracy [%1] nie jest obsługiwana.'@[_f_zatr]);
   return()
?};

_par:=exec('pkd_xxx_akcja','pkd',_act,'DOŁĄCZ');
_par.CONTEXT:=exec('pkd_zat_cntx','pkd',null());
exec('portsInSet','#b__box',_par.PORTS_IN,_par.ACT_UID,'OSOBA',null());
exec('mp_run','#b__box',_par);
{? P.f_active()>0
|| P.f_rfresh()
?};
~~


\pkd_zat_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Popraw" obszaru PKD_ZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_act:=exec('f_zatr2act','wspolpraca',exec('dest','f_zatr',P.F_ZATR,'KOD'));

_par:=exec('pkd_xxx_akcja','pkd',_act,'POPRAW',P);
_ref:=exec('zatr_ref','pkd',P.ref());
_par.CONTEXT:=exec('pkd_zat_cntx','pkd',_ref);
exec('portsInSet','#b__box',_par.PORTS_IN,_par.ACT_UID,'OSOBA',P.OSOBA);
exec('mp_run','#b__box',_par);
{? P.f_active()>0
|| P.f_rfresh()
?};
~~


\pkd_zat_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Usuń" obszaru PKD_ZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_act:=exec('f_zatr2act','wspolpraca',exec('dest','f_zatr',P.F_ZATR,'KOD'));

_par:=exec('pkd_xxx_akcja','pkd',_act,'USUŃ',P);
_ref:=exec('zatr_ref','pkd',P.ref());
_par.CONTEXT:=exec('pkd_zat_cntx','pkd',_ref);
exec('portsInSet','#b__box',_par.PORTS_IN,_par.ACT_UID,'OSOBA',P.OSOBA);
exec('mp_run','#b__box',_par);
{? P.f_active()>0
|| P.f_rfresh()
?};
~~


\pkd_zat_umowa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Drukuj" obszaru PKD_ZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
H_UM.cntx_psh();
H_UM.index('OD');
H_UM.prefix(P.ref);
{? H_UM.first()
|| _par:=exec('pkd_xxx_akcja','pkd','PKD_ZAT_PDUM','DRUKUJ',H_UM);
   exec('portsInSet','#b__box',_par.PORTS_IN,_par.ACT_UID,'H_UM',H_UM.ref);
:  wykonaj czynność PKD_ZAT_PDUM
   exec('mp_run','#b__box',_par);
   {? P.f_active()>0
   || P.f_rfresh()
   ?}
?};
H_UM.cntx_pop();
~~


\pkd_zat_angaz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Zatrudnij" obszaru PKD_ZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:  ustal angaż właściwy dla pracownika
_ref:=exec('zatr_ref','pkd',P.ref);
H.cntx_psh();
H.prefix();
{? H.seek(_ref)
|| _par:=exec('pkd_xxx_akcja','pkd','PKD_ZAT_PRUM','',H);
   exec('portsInSet','#b__box',_par.PORTS_IN,_par.ACT_UID,'H',_ref);
:  wykonaj czynność PKD_ZAT_PRUM
   exec('mp_run','#b__box',_par);
   {? P.f_active()>0
   || P.f_rfresh()
   ?}
?};
H.cntx_pop();
~~


\pkd_zat_widok_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Zmiana widoku uproszczony/rozbudowany.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pxx_widok_zmien','pkd','PKD_ZAT')


\pkd_zat_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wyświetl".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_act:=exec('f_zatr2act','wspolpraca',exec('dest','f_zatr',P.F_ZATR,'KOD'));

_par:=exec('pkd_xxx_akcja','pkd',_act,'WYŚWIETL',P);
_ref:=exec('zatr_ref','pkd',P.ref());
_par.CONTEXT:=exec('pkd_zat_cntx','pkd',_ref);
exec('portsInSet','#b__box',_par.PORTS_IN,_par.ACT_UID,'OSOBA',P.OSOBA);
exec('mp_run','#b__box',_par);
~~


\pkd_zat_cntx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy kontekst do wywołania PKD_ZAT_PZAT.
::   WE: _a - wskazanie na przebieg zatrudnienia
::   WY: wskazanie na uzupełnioną tablicę nazwaną
::----------------------------------------------------------------------------------------------------------------------
_cntx:=obj_new('H');
_cntx.H:=_a;
_cntx


\zatr_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na przebieg zatrudnienia właściwy dla pracownika wybranego w obszarze.
::   WE: _a - wskazanie pracownika
::   WY: wskazanie przebiegu
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(_a,'Z');
{? H.first()
|| _ref:=H.ref()
?};
H.cntx_pop();
_ref


\pkd_ezk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Główna formuła obszaru roboczego PKD_EZK - Zdarzenia kadrowe.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('init','pkd');
__PERSONEL:=1;

UD_TYP.cntx_psh();
UD_SCH.cntx_psh();

{? ~exec('domyslny','schemat','PODZORG')
|| UD_SCH.cntx_pop();
   UD_TYP.cntx_pop();
   return()
?};

:: Najpierw kilka zmiennych, które będą wykorzystywane w widoku. Chcemy, aby zmienne te były dostępna już na etapie
:: tworzenia widoku - stąd "wstępny" params_set() ...
_kart_def:=exec('params_kart_def','kart_dod');
_fld:=exec('n_params','nieobecnosc');
_tzalacz:=exec('tzalacz_create','zalacz');
_pdodinf:=exec('obj_ntab_set','#array',,
   'SLO_TYP',exec('slo_typ','ext_slo','P_DODINF'),
   'SLO_KOD',null()
);
_ppsfNo:=obj_new('PPSF_NO');

:: Ustalenie treści linku i ustawienie domyślnych parametrów pracy
_params:=params_get();
{? type_of(_params)>0 & var_pres('LINK',_params)
|| _link:=_params.LINK
|| _link:=''
?};

params_set(
   'kart_def',_kart_def,
   'fld',_fld,
   'tzalacz',_tzalacz,
   'pdodinf',_pdodinf,
   'ppsfNo',_ppsfNo
);

H.cntx_psh();
H.use('_hist');
H_ODDE.cntx_psh();
H_ODDE.use('h_oddet');
H_UM.cntx_psh();
exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));

:: ewentualna naprawa nieobecności jeśli zawierają błędy
exec('repair_nkor','pracownik');

_loop:=1;
{!
|? _loop
|!
:: parametryzacja widoku obszaru roboczego
   _cfg:=params_exec('pkd_ezk_config','pkd');
:: ostateczne parametry
   params_set(
      'kart_def',_kart_def,
      'fld',_fld,
      'tzalacz',_tzalacz,
      'pdodinf',_pdodinf,
      'ppsfNo',_ppsfNo,
      'cfg',_cfg,
      'link',_link
   );
   P.cntx_psh();
   P.win_sel(_cfg.window);
   ($_cfg.prolog)();
   AreaTitle.setTabWin(P,_cfg.window);
   AreaTitle.setTitle();
   _loop:={? _link<>''
          || exec('pkdezkLinkSelect','pkd',_link)
          || P.select()
          ?};
   ($_cfg.epilog)();
   P.cntx_pop();
   P.win_del(_cfg.window);
   obj_del(_cfg)
!};

H_UM.cntx_pop();
H_ODDE.cntx_pop();
H.cntx_pop();
exec('otworz_h_um','pracownik');
obj_del(_ppsfNo);

UD_SCH.cntx_pop();
UD_TYP.cntx_pop();

~~


\pkd_ezk_dsk_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła przygotowuje tłumaczenia dla kontrolki pkd_ezk.dsk.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('elements_table','#desktop');
_add:="_a.blank(); _a.ID_SYS:=_b; _a.NAME:=_c; _a.add()";

_add(_TAB,'schCB@panel','Schemat'@);
_add(_TAB,'statusCB@panel','Status'@);
_add(_TAB,'formCB@panel','Forma współpracy'@);
_add(_TAB,'przyciskRap@panel','Zestawienia i raporty'@);
_add(_TAB,'przyciskGrp@panel','Operacje grupowe'@);

_TAB


\pkd_ezk_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła tworząca interfejs użytkownika dla obszaru roboczego EZK w dziedzinie PKD.
::   WY: tablica elementów nazwanych z konfiguracją.
::----------------------------------------------------------------------------------------------------------------------
_inTerm:=
   {? ~exec('interm','#system')
   || exec('pxx_widok_uproszczony','pkd','PKD_EZK')
   || 1
   ?};

_main:='';
_side:='';
_mode:='maximized';

:  okienko główne obszaru - kontener do wstawiania zakładek
{? _inTerm=0
||
   _main:='PKD_EZK';
   _side:='NAW_MIN';
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "  exec('load','#desktop','selektor','pkd_ezk.dsk',,,,,exec('pkd_ezk_dsk_pl','pkd'),1);
         params_exec('stdor_bf','pkd','T');
         grp_disp(UD_DEF,'NAW_MIN',1,1);
         {? params_get().link<>''
         || exec('pkdezkLinkActivate','pkd')
         ?};
         1
      ",
:     identyfikator
      'or_pkd_ezk',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdor_oc','pkd')
         ?}
      ",,,
::    rozkład
      'jterm'
   );

:  utwórz selektor firmy jako kontrolkę
   exec('create','#desktop',P,'selektor',_wnd,2);

:  drzewko struktury organizacyjnej
   P.grp_splt(_wnd,,'horizontal','panel');
   P.grp_sel(_wnd,UD_DEF,_side,,
:     po odświeżeniu
      "params_exec('stdor_def_ar','pkd')",
:     położenie i wysokość
      ,,15,
:     przed obsługą
      "params_exec('stdor_def_bs','pkd',_a)",
:     po obsłudze
      "params_exec('stdor_def_as','pkd',_a)",
:     utrwalenie, aktywacja, wypełnienie
      0,0,_mode,
:     identyfikator
      _side
   );

   P.grp_splt(_wnd,'panel','vertical','right')
||
   _main:='PKD_EZKI';
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "params_exec('stdin_bf','pkd','T')",
:     identyfikator
      'in_pkd_ezk',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdin_oc','pkd')
         ?}
      "
   )
?};

: lista pracowników zatrudnionych we wskazanej jednostce
P.grp_sel(_wnd,P,_main,,
:  po odświeżeniu
   "  params_exec('stdor_p_ar','pkd');
      _main:=params_get().cfg.nav.main;
      {? cur_win(1,1)='PKD_EZK'
      || _arg:=P_FILTER.F_ZATR;
         exec('set_enabled','#desktop','','selektor','przyciskRap@panel',_arg<>null());
         exec('set_enabled','#desktop','','selektor','przyciskGrp@panel',_arg<>null())
      ?};
      _div:=':';
      _aid:={? exec('dest','f_zatr',P.F_ZATR,'KOD')='P' || '' || 'CZ' ?};
      {? exec('ses_get','xfilter',_main).SES=null
      || _act:={? cur_win(1,1)='PKD_EZKI' || 'J(W)' || 'W' ?};
         {? __PARSES.getVal('F_ZATR').KOD=''|| _act+='J(R)J(G)'?};
         _aid:='%1%2%3%1'[_act,_aid,_div];
         _div:=''
      || _act:={? __PARSES.getVal('F_ZATR').KOD='' || 'J(R)J(G)' || '' ?};
         _aid:='%1%2%3%1'[_act,_aid,_div];
         _div:=''
      ?};
      {? exec('interm','#system')
      || _act:='J(I)';
         {? __PARSES.getVal('F_ZATR').KOD=''|| _act+='J(R)J(G)'?};
         _aid:='%1%2%3%1'[_act,_aid,_div];
         _div:=''
      ?};
      P.actions_grayed(_main,_aid)
   ",
:  położenie i wysokość
   ,,15,
:  przed obsługą
   "params_exec('stdor_p_bs','pkd',_a)",
:  po obsłudze
   "params_exec('stdor_p_as','pkd',_a)",
:  utrwalenie, aktywacja, wypełnienie
   0,0,_mode,
:  identyfikator
   _main,
:  główne
   1
);

: obszar zakładek kartotek stowarzyszonych
P.grp_splt(_wnd,,'horizontal','bottom');

: przygotuj konfigurację obszaru roboczego
_cfg:=exec('pkd_conf','pkd','PKD_EZK',P,_wnd,_main,_side);
_cfg.final:='T';

_num:=0;
_sym:='PKD_EZK';
: dołącz kolejne zakładki
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_h_um','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_h_um','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_h_odde','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_bnftp','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_n','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_os_n','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_nwu','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_kart_url','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_url_plan','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_ds','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_dodinf','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_bi','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_os_adres','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_pko','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_os_us','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_ipod','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_os_zwpod','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_os_zwzal','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_info','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_kart_dod_szkolbhp','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_bdo','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_r_wzcz','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_lss','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_kk','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_pz_nad','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_pz_pod','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_pz_zas','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_po','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_rd','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_staz','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_os_szkol','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_zj','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_umlojn','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_kart_dod_wyr_kar','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_kart_dod_dod_kwal','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_kart_dod_xxxxxxxx','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_szkolenia','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_os_tyt','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_dnauk','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_zalacz_z','pkd',_cfg,P);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_zalacz_d','pkd',_cfg,P);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_status','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_wyn_wsp','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
{? exec('is_active','gp_api')
|| exec('pkd_conf_p_gp','pkd',_cfg);
   Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg)
?};
exec('pkd_conf_ppsf_ktr','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_ppsf','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_ppsf_zds','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_ppsf_adr','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_ppsf_po','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);

: finalizuj konfigurację obszaru
exec('pkd_conf_end','pkd',_cfg);

: konfiguracja
_cfg


\pkd_ezk_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Popraw" obszaru PKD_EZK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('p_popraw','pracownik')


\pkd_ezk_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Usuń" obszaru PKD_EZK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('p_usun','pracownik')


\pkd_ezk_staz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Oblicz staż" obszaru PKD_EZK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('oblicz','staz',,1)


\pkd_ezk_zwolnij_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zwolnij" obszaru PKD_EZK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=exec('pkd_xxx_akcja','pkd','PKD_EZK_ORZW','ZWOLNIJ',P);

exec('portsInSet','#b__box',_par.PORTS_IN,_par.ACT_UID,'P',P.ref());
exec('mp_run','#b__box',_par);
{? P.f_active()>0
|| P.f_rfresh()
?};
~~


\pkd_ezk_widok_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Zmiana widoku uproszczony/rozbudowany.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pxx_widok_zmien','pkd','PKD_EZK')


\stdor_bf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed wypełnieniem okna obszaru roboczego EZK dziedziny PKD.
::   WE:  _a  [STRING] - typ formy współpracy: T - docelowa, N - przejściowa
::       [_b] [STRING] - początkowa forma współpracy
::----------------------------------------------------------------------------------------------------------------------
: przekaż dalej parametry
_par:=params_get();
params_set(_par);

: wartości dla filtrów i ograniczenia zakresu
_val:=obj_new('FIRMA','UD_SCH','F_ZATR','STATUS');
_par.cfg.val:=_val;
_val.FIRMA:=REF.FIRMA;
_val.UD_SCH:=exec('domyslny','schemat','PODZORG');
_val.F_ZATR:=
   {? var_pres('_b')=type_of('') & __F_ZATR.upr(_b)
   || USERS_FZ.F_ZATR
   || __PARSES.getVal('F_ZATR').REF
   ?};
_val.STATUS:=__PARSES.getVal('ZakresDanych');

UD_DEF.cntx_psh();
UD_DEF.index('SYMBOL');
UD_DEF.prefix(P_FILTER.UD_SCH);

P.cntx_psh();
P.index('PRACONAZ');

_RS:=exec('dsk_get_form','pkd',_a);
_RS.blank(1);
_RS.REF:=$_val.F_ZATR;
{? ~_RS.find_rec()
|| _val.F_ZATR:=null()
?};

: początkowy stan selektorów
P_FILTER.FIRMA:=_val.FIRMA;
P_FILTER.UD_SCH:=_val.UD_SCH;
P_FILTER.F_ZATR:=_val.F_ZATR;
P_FILTER.STATUS:=_val.STATUS;
1


\stdin_bf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Przed wypełnieniem okna obszaru roboczego EZK dziedziny PKD w wersji uproszczonej.
::   WE:  _a  [STRING] - typ formy współpracy: T - docelowa, N - przejściowa
::       [_b] [STRING] - początkowa forma współpracy
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
P.index('PRACONAZ');

: ustal domyśny schemat i element drzewa
_sch:=exec('domyslny','schemat','PODZORG');
_skl:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
_def:=exec('szukaj_ud_def','schemat',_sch,_skl).REF;

: początkowy stan selektorów
P_FILTER.FIRMA:=exec('ref_firma','ustawienia');
P_FILTER.UD_SCH:=_sch;
P_FILTER.UD_DEF:=_def;
P_FILTER.F_ZATR:={? var_pres('_b')>0 || _b || __PARSES.getVal('F_ZATR').REF ?};
P_FILTER.STATUS:=__PARSES.getVal('ZakresDanych');
1


\stdor_oc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przy zamknięciu okna obszaru roboczego EZK dziedziny PKD.
::----------------------------------------------------------------------------------------------------------------------
UD_DEF.cntx_pop();
P.cntx_pop();
1


\stdin_oc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Przy zamknięciu okna obszaru roboczego EZK dziedziny PKD w wersji uproszczonej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.cntx_pop();
1


\stdor_sel_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą panelu selektora w oknie obszaru roboczego EZK dziedziny PKD.
::       Jeśli użytkownik aktywuje selektor, to przechodzi on automatycznie w tryb edycji, co pozwala na zmianę schematu
::       danych i/lub formy współpracy. Po zatwierdzeniu zmian zależnie od zmienionej wartości aktywowane jest drzewko
::       struktury lub lista pracowników. Jeśli użytkownik zrezygnował ze zmiany lub nie zmienił ustawień, to aktywowane
::       będzie ostatnie z wybranych okien drzewko/lista.
::   WE: 0 - wywołana przez grp_disp, nie zero - wywołana przez aktywowanie
::----------------------------------------------------------------------------------------------------------------------
: przekaż dalej parametry
_par:=params_get();
params_set(_par);

: skrócone odwołania
_nav:=_par.cfg.nav;
_val:=_par.cfg.val;

: zapamiętaj ustawienia selektorów
_val.UD_SCH:=P_FILTER.UD_SCH;
_val.F_ZATR:=P_FILTER.F_ZATR;

{? _a
|| F_ZATR.f_rfresh();
   {? ~edit_start("__CHK.record(P_FILTER,,'UD_SCH','F_ZATR')=''")
   || P_FILTER.UD_SCH:=_val.UD_SCH;
      P_FILTER.F_ZATR:=_val.F_ZATR;
      win_activate(_nav.curr);
      return()
   ?};
:  zależnie od zmienionych ustawień wybierz okno:
:  schemat drzewa - drzewko struktury
:  forma współpracy - lista pracowników
:  brak zmian - ostatnio aktywne okno (drzewko/lista)
   _id:=
      {? _val.UD_SCH<>P_FILTER.UD_SCH || _nav.side
      |? _val.F_ZATR<>P_FILTER.F_ZATR || _nav.main
      || _nav.curr
      ?};
:  wymuś filtrowanie
   {? _id=_nav.main
   || grp_disp(P,_id,1,1)
   ?};
:  aktywuj wybrane okno
   win_activate(_id)
?}


\stdor_def_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu drzewa struktury w oknie obszaru EZK dziedziny PKD.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
P_FILTER.UD_DEF:=
   {? grp_empty(cur_tab(1,1),cur_win(1,1))=0
   || UD_DEF.ref()
   || null
   ?};
grp_disp(P,_par.cfg.nav.main,1,1)


\stdor_def_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą drzewa struktury w oknie obszaru EZK dziedziny PKD.
::   WE: 0 - wywołana przez grp_disp, nie zero - wywołana przez aktywowanie
::----------------------------------------------------------------------------------------------------------------------
UD_DEF.prefix(P_FILTER.UD_SCH);

: odcięcie drzewka do poziomu jednostki określonej w parametrach sesji
exec('ud_def_root','schemat','NAW_MIN',P_FILTER.UD_SCH,__PARSES.getVal('JednostkaOrganizacyjna').REF);
~~


\stdor_def_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po obsłudze drzewa struktury w oknie obszaru EZK dziedziny PKD.
::   WE: 0 - wywołana przez grp_disp, nie zero - wywołana przez aktywowanie
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _nav:=params_get().cfg.nav;
   _nav.curr:=_nav.side
?}


\stdor_p_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu listy pracowników w oknie obszarów EZK i ZAT dziedziny PKD.
::----------------------------------------------------------------------------------------------------------------------
: przekaż dalej parametry
_par:=params_get();
params_set(_par);

: pielęgnacja filtra
exec('stdor_p_ar_ext','pkd');

: ustaw kontekst przeglądania
: pokaż/ukryj zakładki czynności
{? ~exec('dom_empty','#table',P)
|| REF.P:=P.ref;
   REF.OSOBA:=P.OSOBA;

   {? _par.cfg.tab_refresh | P_FILTER.F_ZATR=null()
:     Jeżeli wymagane jest odświeżenie zakładek lub forma współpracy ustawiona na "Wszystkie dostępne",
:     to należy ponownie ustalić, które zakładki powinny byc widoczne, a które nie.
   || _par.cfg.tab_refresh:=0;
:     Status (obecnie) Aktywnej Zakładki.
      _saz:=0;
:     Pierwsza Aktywna Zakładka (gdyby obecnie aktywna miała zostać ukryta).
      _paz:=0;
      F_ZATRA.cntx_psh();
      F_ZATRA.index('ACT_SYM');
      F_ZATRA.prefix(P.F_ZATR);
      _map:=_par.cfg.map;
      _map.cntx_psh();
      {? _map.first()
      || {!
         |? _on:=
               (_map.MOD & _map.ACT_MOD<>'' & F_ZATRA.find_key(_map.ACT_MOD,)) |
               (_map.VIEW & _map.ACT_VIEW<>'' & F_ZATRA.find_key(_map.ACT_VIEW,));
            {? _on & ~_paz
            || _paz:=_map.NRTAB
            ?};
            {? _on=_map.HIDDEN
::             Jest zmiana widoczności zakładki ..
            || {? _on
               || tab_show(_map.NRTAB,'bottom')
               || tab_hide(_map.NRTAB,,'bottom')
               ?};
               _map.HIDDEN:=~_on;
               _map.put()
            ?};
            {? _map.NRTAB=_par.cfg.atab
            || _saz:=_on
            ?};
            _map.next()
         !}
      ?};
      _map.cntx_pop();
      F_ZATRA.cntx_pop();
      {? _saz
      || _atab:=_par.cfg.atab
      || _atab:=_paz;
         _par.cfg.atab:=_paz
      ?};
      tab_sel(_atab,'bottom')
   ?}

|| tab_hide(,1,'bottom');
:: Skoro ukrywamy wszystkie zakładki, to odnotujmy to poprzez ustawienie flagi HIDDDEN.
   _map:=_par.cfg.map;
   _map.cntx_psh();
   {? _map.first()
   || {!
      |? {? ~_map.HIDDEN
         || _map.HIDDEN:=1;
            _map.put()
         ?};
         _map.next()
      !}
   ?};
   _map.cntx_pop();
:: Brak pracowników w dziedzinie może być skutkiem nałożenia filtra użytkownika. W takim wypadku musimy zagwarantować
:: odświeżenie zakładek.
   _par.cfg.tab_refresh:=1;
   REF.P:=REF.OSOBA:=null()
?};

: odrysuj obszar zakładek
exec('pkd_refresh','pkd')


\stdor_p_ar_ext
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rozszerzenie formuły po odświeżeniu o sprawdzenie, czy nie zaszły zmiany na liście pracowników na skutek
::       działań w innych instancjach (zatrudnienie, zwolnienie, przeszeregowanie) - odświeżenie filtra.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Jeżeli w oknie zaznaczony jest co najmniej jeden rekord, nie wolno nam (technologicznie) odświeżyć widoku.
:: Oznacza to, że nie zobaczymy nowych rekordów, które zostały dodane na innym stanowisku.
:: Nie aktualizujemy wartości zmiennej EDIT_VAR.P_LM - odświeżenie "nie minie nas", zostanie jednak wykonany
:: później. Nie zmienia to faktu, że w przeglądanym oknie będą się odświeżały wartości rekordów po których chodzimy.
{? P.sel_size()
|| return()
?};

_lm:=exec('last_mod_get','#table',P);
{? EDIT_VAR.P_LM<>_lm
|| EDIT_VAR.P_LM:=_lm;
   P.f_rfresh();
   win_disp()
?};
~~


\stdor_p_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą listy pracowników w oknie obszaru EZK dziedziny PKD.
::   WE: 0 - wywołana przez grp_disp, nie zero - wywołana przez aktywowanie
::----------------------------------------------------------------------------------------------------------------------
{? ~_a
|| params_exec('x_main_bs','pkd',_a)
?};

_ses:=exec('ses_get','xfilter',cur_win(1,1));
:: _def:={? (UD_DEF.f_active()<>0 & UD_DEF.f_size()) | UD_DEF.size() || UD_DEF.ref() || null ?};

exec('filtruj_p','schemat',
   BPMN.SYM_DOM,
   P_FILTER.UD_DEF,
   P_FILTER.F_ZATR().KOD,
   params_get().cfg.final,
   P_FILTER.STATUS,
   _ses.JOIN,
   _ses.WHERE
);

exec('stdor_p_bs_ext','pkd');
{? _a
|| params_exec('x_main_bs','pkd',_a)
?}


\stdor_p_bs_ext
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Unikanie nadmiarowego odświeżania filtra przy pierwszym wejściu do obszaru.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.P_LM:=exec('last_mod_get','#table',P);
~~


\stdor_p_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po obsłudze listy pracowników w oknie obszaru EZK dziedziny PKD.
::   WE: 0 - wywołana przez grp_disp, nie zero - wywołana przez aktywowanie
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _nav:=params_get().cfg.nav;
   _nav.curr:=_nav.main;
   params_exec('x_main_as','pkd',_a)
?}


\ext_conf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Dodatkowe potwierdzenie usunięcia rekordu tabeli P (pracownika/zleceniobiorcy/...).
::   WE:
::   WY: Wynik potwierdzenia:
::       1 - Dane mogą być usunięte.
::       0 - Dane nie mogą być usunięte.
::  OLD: \ext_conf/util.fml
::----------------------------------------------------------------------------------------------------------------------
_key:=P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' '+form(P.T);
_len:=+_key;
_type:='STRING['+$_len+']';
_tab:=tab_tmp(1,'PATTERN',_type,,'CONFIRM',_type,,'COMMENT','SYS_MEMO',);
_tab.PATTERN:=_key;
_tab.memo_set('%1\n%2\n%3'[
   'Zapisy powiązane ze współpracownikiem zostaną usunięte.'@,
   'Operacja będzie wykonana po przepisaniu tekstu:'@,
   _key
],'COMMENT');

_wnd:=_tab.mk_edit('Weryfikacja usunięcia danych'@);
_tab.win_esep(_wnd,'Uwaga'@);
_tab.win_efld(_wnd,,'COMMENT',,,50,-5,1);
_tab.win_efld(_wnd,,'CONFIRM',,,50);
exec('ok_esc','#window',_tab,_wnd,,,,,,'Potwierdzenie usunięcia danych'@,'Usuń'@);
_tab.win_edit(_wnd);

_ret:=0;
{? _tab.edit()
|| {? _tab.PATTERN<>_tab.CONFIRM
   || FUN.info('Operacja usunięcia danych nie będzie wykonana.\nPodany klucz jest niezgodny ze wzorcem.'@)
   || _ret:=1
   ?}
?};
_ret


\pkd_ezk_parametry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Główna formuła - Zakres danych (kadry).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? __PARSES.editPar('F_ZATR','JednostkaOrganizacyjna','ZakresDanych')
|| _sch:=exec('domyslny','schemat','PODZORG');
   _skl:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
   P_FILTER.UD_DEF:=exec('szukaj_ud_def','schemat',_sch,_skl).REF;
   P_FILTER.F_ZATR:=__PARSES.getVal('F_ZATR').REF;
   P_FILTER.STATUS:=__PARSES.getVal('ZakresDanych');
   P_FILTER.F_ZATR();

:: odrysuj okienko obszaru
   params_exec('pxx_odrysuj','pkd')
?}


\pkd_ezk_akcje_grupowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Główna formuła obszaru roboczego PKD_GRP - Operacje grupowe (kadry).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

:: zachowaj stan filtra i tabel
_nfo:=exec('get','#filter',P);
OSOBA.cntx_psh();
P.cntx_psh();

exec('xxx_grp_act','personel',_set,'PKD_GRP_AZAT','Przebieg zatrudnienia'@,
   'Zmiana warunków zatrudnienia'@);
exec('xxx_grp_act','personel',_set,'PKD_GRP_EXIM','Import przeszeregowań'@,
   'Przygotowanie danych i import przeszeregowań'@);
exec('xxx_grp_act','personel',_set,'PKD_GRP_SERP','Wydruk aneksów i przeszeregowań'@,
   'Generowanie wydruków aneksów i przeszeregowań'@);
exec('xxx_grp_act','personel',_set,'ZWS_PAR_PZSL','Zależności służbowe'@,
   'Redagowanie zależności służbowych współpracowników'@);
exec('xxx_grp_act','personel',_set,'PKD_GRP_ADYS','Dyscyplina pracy'@,
   'Zakładanie lub aktualizacja limitów wskazanej nieobecności w wybranym roku'@);
exec('xxx_grp_act','personel',_set,'PKD_GRP_ASSW','Stałe składniki'@,
   'Grupowe wprowadzanie stałych składników'@);
exec('xxx_grp_act','personel',_set,'PKD_GRP_AURL','Karty urlopowe'@,
   'Zakładanie lub aktualizacja kart urlopowych w wybranym roku'@);
exec('xxx_grp_act','personel',_set,'PKD_GRP_ARSZ','Szkolenia'@,
   'Wprowadzanie informacji o szkoleniach pracowników'@);
exec('xxx_grp_act','personel',_set,'PKD_ZES_ZGIO','Generowanie załączników'@,,,
   "params_exec('generowanie_zal','pkd');''"
);
exec('xxx_grp_act','personel',_set,'PKD_EZK_ORNN','Nieobecności bez kalendarza'@,
   'Przeglądanie nieobecności bez kalendarza'@,,
   "params_exec('nbk','nieobecnosc','PKD'); ''"
);
exec('xxx_grp_act','personel',_set,'PKD_GRP_EZLA','Zwolnienia lekarskie e-ZLA'@,
   'Przeglądanie i import zwolnień lekarskich e-ZLA'@,,,__F_ZATR.upr('Z') & __F_ZATR.upr('P'));
exec('xxx_grp_act','personel',_set,'ZWS_UPR_USER','Konta internetowe'@,
   'Zarządzanie kontami współpracowników'@,,
   "params_exec('groupCreate','users'); ''"
);
_sym:='PED_GRP_XXXX';
_set.add_grp('Dokumentacja pracownicza'@,_sym);
exec('xxx_grp_act','personel',_set,'PED_GRP_AZIP','Eksport dokumentacji pracowniczej'@,,,,,_sym);
exec('xxx_grp_act','personel',_set,'PED_MTD_VIEW','Metadane'@,,,,,_sym);
exec('xxx_grp_act','personel',_set,'PED_GRP_AIDP','Import dokumentacji pracowniczej'@,,,,~exec('interm','#system')
   ,_sym);
exec('xxx_grp_act','personel',_set,'PKD_GRP_AWCP','Wzorce czasu pracy'@,
   'Wprowadzanie wzorców czasu pracy'@);
exec('xxx_grp_act','personel',_set,'PKD_EZK_ORWN','Wnioski urlopowe'@,
   'Wprowadzanie nieobecności na podstawie wniosków urlopowych'@,,
   "params_exec('nwu_to_n','pkd');''"
);
exec('xxx_grp_act','personel',_set,'PEP_GRP_DOKU','Dokumenty Paperless HR'@,
   'Przygotowanie dokumentów'@);
exec('xxx_grp_act','personel',_set,'PKD_GRP_AWSP','Import współczynników do wynagrodzenia'@,
   'Importowanie współczynników do wynagrodzenia z pliku'@);
exec('xxx_grp_act','personel',_set,'PKD_GRP_AGPP',,'Zarządzanie grupami uprawnień współpracowników'@,,,
   exec('is_active','gp_api') & exec('no_limit','gp_api','PKD',0)
);
exec('xxx_grp_act','personel',_set,'PKD_EZK_ORBL','Przenoszenie badań z kartotek dodatkowych'@,
   'Przenoszenie badań lekarskich z kartotek dodatkowych'@,,
   "params_exec('kart_dod2bdo','kart_dod');''"
);
{? exec('is_pzd01','ppsf')
|| exec('xxx_grp_act','personel',_set,'PKD_GRP_BTWY','Wyniki kontroli trzeźwości'@,
      'Ewidencja wyników badań przeprowadzonej kontroli trzeźwości'@
   );
   exec('xxx_grp_act','personel',_set,'PKD_GRP_BTGB','Generowanie badań kontroli trzeźwości'@,
      'Grupowe generowanie badań kontroli trzeźwości'@
   )
?};

_set.run('Operacje grupowe'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();
exec('set','#filter',P,_nfo);

exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\pkd_ezk_raporty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Główna formuła - Zestawienia i raporty (kadry).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

:: zachowaj stan filtra i tabel
_nfo:=exec('get','#filter',P);
OSOBA.cntx_psh();
P.cntx_psh();

exec('xxx_grp_act','personel',_set,'PKD_ZES_ORKA','Kartoteki kadrowe'@);

::  Zaświadczenia kadrowe
_state:=__F_ZATR.P='P';
exec('xxx_grp_act','personel',_set,'PKD_ZES_ORZA','Zaświadczenia kadrowe'@,,,,_state);

:: Zestawienia kadrowe
_state:=__F_ZATR.P='P';
exec('xxx_grp_act','personel',_set,'PKD_ZES_ORZE','Zestawienia kadrowe'@,'Wydruki zestawień kadrowych'@,,,_state);

:: Wydruki z karty urlopowej
_state:=__F_ZATR.P='P';
exec('xxx_grp_act','personel',_set,'PKD_ZES_KURL','Karta urlopowa'@,'Wydruki z karty urlopowej'@,,,_state);

:: Słowniki
exec('xxx_grp_act','personel',_set,'PKD_ZES_ORSL','Słowniki'@);

:  Zapytania SQL
exec('xxx_grp_act','personel',_set,'PKD_EZK_OSQL','Zapytania SQL'@);

:: Raporty rozliczeniowe
_state:=__F_ZATR.P='P';
exec('xxx_grp_act','personel',_set,'PKD_ZES_ZRPF','Raporty rozliczeniowe PFRON'@,,,,_state);

:: Sprawozdania statystyczne
_state:=__F_ZATR.P='P';
exec('xxx_grp_act','personel',_set,'PKD_ROZ_ZSST','Sprawozdania statystyczne GUS'@,,,,_state);

:  Raporty zgłoszeniowe ZUS
_state:=(__F_ZATR.P='P' | __F_ZATR.P='Z');
exec('xxx_grp_act','personel',_set,'PKD_ZES_ZUBE','Raporty ZUS'@,'Raporty zgłoszeniowe ZUS'@,,,_state);

:: Zaświadczenia inne
_state:=__F_ZATR.P<>'P';
exec('xxx_grp_act','personel',_set,'PKD_ZES_INNE','Zaświadczenia inne'@,,,,_state);

:: Raporty kontrolne
exec('xxx_grp_act','personel',_set,'PKD_ZES_RAPK','Raporty kontrolne'@);

::Analizy BI dla kadr
exec('xxx_grp_act','personel',_set,'BIQ_PER_PKDA','Analizy BI'@);

_set.run('Zestawienia i raporty'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();
exec('set','#filter',P,_nfo);

exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\pkd_conf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Budowa struktur do obsługi czynności zakładkowych.
::   WE:  _a  [STRING] - Symbol obszaru roboczego.
::        _b  [TABLE]  - Alias do tabeli, dla której tworzone będą elementy interfejsu.
::        _c  [STRING] - Akronim okienka, do którego będą dodawane zakładki.
::        _d  [STRING] - Identyfikator "głównego" nawigatora.
::       [_e] [STRING] - Identyfikator "bocznego" nawigatora, [domyślnie: ''].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_cfg:=obj_new(
:  Tabela z licencjami.
   'lic',
:  Symbol obsługiwanego obszaru roboczego.
   'area',
:  Alias tabeli - właściciela okna.
   'table',
:  Akronim okna grupowego.
   'window',
:  Tablica nazwana, której elementy przechowują identyfikatory okien: głównego, bocznego, bieżącego.
   'nav',
:  Formuła wykonywana przed wyświetleniem okna grupowego, "uzupełniana" przez każdą zakładkę.
   'prolog',
:  Formuła wykonywana po zakończeniu wyświetlania okna grupowego.
   'epilog',
:  Tryb wyświetlania okien w zakładkach.
   'mode',
:  Czy należy odświeżyć (ustalić) widoczność zakładek na podstawie formy współpracy bieżącego rekordu? [0/1]
:  Flaga jest ustawiana na 1 przy starcie okna grupowego.
   'tab_refresh',
:  Tabela tymczasowa z definicjami wszystkich zakładek.
   'map',
:  Tablica nazwana zawierająca uchwyt do tabeli i akronim okna głównego. Tablica jest wypełniana (w formule
:  "Po obsłudze") jeżeli okno wymaga odrysowania. Z taką sytuacją mamy do czynienia jeżeli w oknie głównym zaznaczymy
:  kilka rekordów a następnie przechodzimy do sekcji zakładek. Zakładka jest związana z "bieżącym" rekordem -
:  zaznaczenia mogą być mylące.
   'disp',
:  "Formuła" do użycia w akcji "Przed obsługą" okien zakładek.
   'bs',
:  "Formuła" do użycia w akcji "Po obsłudze" okien zakładek.
   'as',
:  Formuła, która dodaje kolejną zakładkę - rekord do tabeli "table".
   'init',
:  Tablica nazwana, której elementy przechowują wyróżniki akcji "Zakończ" dla pustej i niepustej dziedziny oraz
:  informację o wyszarzeniu tych akcji.
   'done',
:  Nr obsługiwanej zakładki.
   'ctab',
:  Nr aktywnej zakładki.
   'atab',
:  Czy współpracownicy z docelowych form współpracy? [T/N]
   'final',
:  Tablica nazwana do obsługi selektorów.
   'val',
:  Element do specyficznej obsługi obszaru. Wykorzystywany w: EZK, PPL.
   'extra'
);
exec('proenv','#b_proman');
_cfg.lic:=__proenv.DOM_LIC;
_cfg.area:=_a;
_cfg.table:=_b;
_cfg.window:=_c;
_cfg.ctab:=_cfg.atab:=1;

_nav:=obj_new('main','side','curr');
_cfg.nav:=_nav;
_nav.main:=_d;
_nav.curr:=_d;
_nav.side:='';
{? var_pres('_e')=type_of('') & _e<>''
|| _nav.side:=_e
?};

_cfg.mode:='maximized';

_cfg.prolog:="params_set(params_get());";
_cfg.epilog:="";

_cfg.tab_refresh:=1;

_cfg.map:=tab_tmp(1,
   'NRTAB',    'INTEGER',     'Nr zakładki',
   'TABLE',    'STRING[10]',  'Akronim tabeli',
   'INDEX',    'STRING[10]',  'Akronim indeksu',
   'WINDOW',   'STRING[10]',  'Akronim okna',
   'DONE_NE',  'STRING[20]',  'Wyróżnik akcji "Zakończ" dla niepustej dziedziny',
   'DONE_E',   'STRING[20]',  'Wyróżnik ackji "Zakończ" dla pustej dziedziny',
   'ACT_MOD',  'STRING[12]',  'Czynność modyfikacji',
   'ACT_VIEW', 'STRING[12]',  'Czynność przegladania',
   'KEY_TAB',  'STRING[10]',  'Tabela dla wartości kluczowej',
   'MOD',      'INTEGER',     'Możliwa modyfikacja?',
   'MOD_PROC', 'INTEGER',     'Czy czynność modyfikująca jest procesowa?',
   'VIEW',     'INTEGER',     'Możliwe przeglądanie?',
   'KEY_ARR',  'STRING[255]', 'Tablica wartości dodatkowych rekordów kluczowych',
   'HIDDEN',   'INTEGER',     'Zakładka ukryta? [0/1]',
   'PROCVER',  'INTEGER',     'Tryb obsługi procesowości'
);

_cfg.disp:=obj_new('on','TAB','ws','AGET');
_cfg.disp.on:=0;

: Formuła okna w grupie "przed obsługą".
: WE: _a  [TABLE] - Mapa z zakładkami (patrz powyżej struktura _cfg.map).
:    [_b] [RULE]  - Dodatkowa formuła (użytkownika) dla danej zakładki.
_cfg.bs:=
   '"params_set(_par:=params_get());\n'
    '_cfg:=_par.cfg;\n'
    '_cfg.ctab:="+$_a.NRTAB+";\n'
    '{? _a\n'
    '|| _cfg.atab:=_cfg.ctab;\n'
    '   {? _cfg.disp.on\n'
    '   || grp_disp(_cfg.disp.TAB,_cfg.disp.ws,0,1);\n'
    '      _cfg.disp.on:=0\n'
    '   ?}\n'
    '?};\n'
    '{? REF.OSOBA=null()\n'
    '|| return(\'#disable\')\n'
    '?};\n'
    '_map:=_cfg.map;\n'
    '{? _map.find_key(_cfg.ctab)\n'
    '|| ($_map.TABLE)().index(_map.INDEX)\n'
    '?};\n"+'
   '{? var_pres(\'_b\')=type_of($\'\') & _b<>$\'\' || 1-form(\'x\'+_b)+";\n\n" || \'\' ?}+'
   '{? _a.MOD '
   '|| "exec(\'pkd_done_state\',\'pkd\');\n'
       '{? _a & ~_cfg.done.state & _map.PROCVER=0\n|| exec(\'pkd_run\',\'pkd\',\'START\')\n?}" '
   '|| "~~" '
   '?}';

: Formuła okna w grupie "po obsłudze".
: WE: _a [TABLE] - Mapa z zakładkami (patrz powyżej struktura _cfg.map).
:    [_b] [RULE]  - Dodatkowa formuła (użytkownika) dla danej zakładki.
_cfg.as:=
:: Jeżeli zakładka związana była z czynnością z innej dziedziny, to wykonywane formuły mogły zmienić wartość pola
:: BPMN.SYM_DOM - przywróćmy "prawidłową" wartość (obowiązującą w chwili definiowania widoku).
   '"BPMN.SYM_DOM:=\''+BPMN.SYM_DOM+'\';\n'
   'params_set(_par:=params_get());\n'
   '_cfg:=_par.cfg;\n'
   '_cfg.ctab:="+$_a.NRTAB+";\n'
   '{? REF.OSOBA=null()\n'
   '|| return()\n'
   '?};\n'
   '_map:=_cfg.map;\n'
   '{? _a & _map.find_key(_cfg.ctab) & (_ndx:=($_map.TABLE)().index(\'?\'))<>_map.INDEX\n'
   '|| _map.INDEX:=_ndx;\n'
   '   _map.put()\n'
   '?};\n"+'
   '{? var_pres(\'_b\')=type_of($\'\') & _b<>$\'\' || 1-form(\'x\'+_b)+";\n\n" || \'\' ?}+'
   '{? _a.MOD'
   '|| "{? _a & ~_cfg.done.state & _map.PROCVER=0\n|| exec(\'pkd_run\',\'pkd\',\'STOP\')\n?}"'
   '|| "~~"'
   '?}';

: Uwaga - ze zdefiniowanych powyżej formuł "bs" i "as" NIE korzystają lub korzystają w sposób niestandardowy:
:  exec('pkd_conf_h_um','pkd');
:  exec('ppl_conf_zc','ppl');

_cfg.init:="
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła tworząca zapis w buforze konfiguracji zakładek.
::   WE:  _a  [ARRAY]  - Uchwyt tablicy z konfiguracją, w szczególności z tabelą - mapą zakładek.
::        _b  [TABLE]  - Uchwyt tabeli - właściciela okna wertowania.
::       [_c] [STRING] - Akronim indeksu, który będzie ustawiany przed obsługą okna [domyślnie: bieżący].
::        _d  [STRING] - Akronim okna wertowania.
::       [_e] [STRING] - Wyróżnik akcji "Zakończ" dla niepustej dziedziny [domyślnie:Z].
::       [_f] [STRING] - Wyróżnik akcji "Zakończ" dla pustej dziedziny [domyślnie:Z].
::       [_g] [STRING] - Identyfikator czynności typu "rejestracja".
::       [_h] [STRING] - Identyfikator czynności typu "przeglądanie".
::       [_i] [TABLE]  - Uchwyt tabeli "kluczowej" [domyślnie:OSOBA].
::       [_j] [STRING] - Formuła, której wynikiem jest tablica zawierająca wartości wszystkich rekordów kluczowych.
::       [_k] [NUMBER] - Tryb obsługi procesowości:
::                         0 - Wejście w zakładkę uruchamia czynność (akcje 'START', 'STOP') [domyślnie].
::                         1 - Czynność uruchamiana jest poprzez akcje w oknie wertowania.
::   WY: Status operacji:
::       0 - Zakładka nie została dodana (najprawdopodobniej ze względu na uprawnienia).
::       1 - Zakładka została dodana.
::----------------------------------------------------------------------------------------------------------------------
   _map:=_a.map;
   _nrtab:=_map.size()+1;
   _map.blank();
   _map.NRTAB:=_nrtab;
   _map.TABLE:=!_b;
   _map.INDEX:={? var_pres('_c')=type_of('') & _c<>'' || _c || _b.index('?') ?};
   _map.WINDOW:=_d;
   _map.DONE_NE:={? var_pres('_e')=type_of('') || _e || 'Z' ?};
   _map.DONE_E:={? var_pres('_f')=type_of('') || _f || 'Z' ?};
   B_DOMAIN.cntx_psh();
   B_ACTION.cntx_psh();
   B_ACTION.index('UNIK');
   B_ACTION.prefix();
   _a.lic.prefix();
   {? var_pres('_g')=type_of('') &
      B_ACTION.find_key(_g,) & B_ACTION.AKT='T' & _a.lic.find_key(B_ACTION.B_DOMAIN().SYMBOL,)
   || _map.ACT_MOD:=_g
   ?};
   {? var_pres('_h')=type_of('') &
      B_ACTION.find_key(_h,) & B_ACTION.AKT='T' & _a.lic.find_key(B_ACTION.B_DOMAIN().SYMBOL,)
   || _map.ACT_VIEW:=_h
   ?};
   B_ACTION.cntx_pop();
   B_DOMAIN.cntx_pop();
   _map.KEY_TAB:=!{? var_pres('_i')=type_of(SYSLOG) || _i || OSOBA ?};
   _map.MOD:={? _map.ACT_MOD<>'' || exec('chk_role','#b__box',OPERATOR.USER,_map.ACT_MOD) ?};
   _map.MOD_PROC:=_map.MOD & exec('is_proces','#b_action',_map.ACT_MOD);
   _map.VIEW:=_map.MOD | {? _map.ACT_VIEW<>'' || exec('chk_role','#b__box',OPERATOR.USER,_map.ACT_VIEW) ?};
   {? var_pres('_j')=type_of('')
   || _map.KEY_ARR:=_j
   ?};
   _map.PROCVER:={? var_pres('_k')=type_of(0) || _k ?};
   {? _map.VIEW
   || _map.add()
   ?}
";

_cfg.done:=obj_new('noempty','empty','state');
_cfg.done.empty:=_cfg.done.noempty:='';
_cfg.done.state:=1;

_cfg


\pkd_conf_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Finalizuje konfigurację obszaru
::   WE: _a - wskazanie tablicy konfiguracji obszaru
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a.prolog:=exec('text2print','#string',_a.prolog)+' ~~';
_a.epilog:=exec('text2print','#string',_a.epilog)+' ~~';
~~


\pkd_conf_cntx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za odłożenie na stos konteksu tabeli związanej z aktualnie prezentowaną zakładką.
::   WE: _a [STRING] - Kod akcji do wykonania (psh/pop).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | (_a<>'psh' & _a<>'pop')
|| return(0)
?};

_ret:=0;

_par:=params_get();
{? obj_ntab(_par) &
   var_pres('cfg',_par)>100 & obj_ntab(_par.cfg) &
   var_pres('atab',_par.cfg)=type_of(0) & var_pres('map',_par.cfg)>100
|| _map:=_par.cfg.map;
   _map.cntx_psh();
   {? _ret:=_map.find_key(_par.cfg.atab)
   || {? _a='psh'
      || ($_map.TABLE)().cntx_psh()
      || ($_map.TABLE)().cntx_pop()
      ?}
   ?};
   _map.cntx_pop()
?};

_ret


\x_main_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła związana z zaznaczonymi rekordami w oknie głównym. Do wywołania w akcji "Przed obsługą" w ramach
::       mechanizmu "katarynki zakładkowej" - wymaga odpowiedniego środowiska, które NIE jest weryfikowane.
::   WE: _a [NUMBER] - Parametr systemowy zgodny ze specyfikacją akcji:
::                      0 - Odrysowanie.
::                      1 - Aktywacja.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Komentarze w bieżącej formule są związane z celowym wyłączeniem kodu, na który świat nie jest jeszcze gotowy ...
_TAB:=cur_tab(1,1);
_disp:=params_get().cfg.disp;
{? _a
|| ~~
::   {? type_of(_disp.AGET)>100
::   || _TAB.cntx_psh();
::      _again:=_disp.AGET.first();
::      {!
::      |? _again
::      |! {? _TAB.seek(_disp.AGET.REF,)
::         || sel_add()
::         ?};
::         _again:=_disp.AGET.next()
::      !};
::      _TAB.cntx_pop()
::   ?}
|? _TAB.sel_size()
||
::   {? type_of(_disp.AGET)>100
::   || obj_del(_disp.AGET)
::   ?};
::   _disp.AGET:=_TAB.sel_aget();
   _TAB.sel_adel()
?}


\x_main_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła związana z zaznaczonymi rekordami w oknie głównym. Do wywołania w akcji "Po obsłudze" w ramach
::       mechanizmu "katarynki zakładkowej" - wymaga odpowiedniego środowiska, które NIE jest weryfikowane.
::   WE: _a [NUMBER] - Parametr systemowy zgodny ze specyfikacją akcji:
::                      0 - Odrysowanie.
::                      1 - Aktywacja.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _disp:=params_get().cfg.disp;
   _TAB:=cur_tab(1,1);
   {? (_disp.on:=_TAB.sel_size())>0
   || {? type_of(_disp.TAB)>100
      || obj_del(_disp.TAB)
      ?};
      _disp.TAB:=_TAB;
      _disp.ws:=cur_win(1,1)
   ?}
?}


\pkd_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wykonywana po odświeżeniu okienek WER tabel OSOBA i P (po zmianie aktywnego rekordu). Odświeża okna
::       kartotek stowarzyszonych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_map:=_par.cfg.map;
_map.cntx_psh();
{? _map.find_key(_par.cfg.atab)
|| grp_disp(($_map.TABLE)(),_map.WINDOW,1,0)
?};
_map.cntx_pop()


\pkd_run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła uruchamia wskazaną akcję związaną z czynnością.
::   WE: _a - Kod akcji do uruchomienia.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_cfg:=_par.cfg;
_map:=_cfg.map;
: ustal miejsce wywołania
{? ~_map.find_key(_cfg.ctab)
|| return()
?};

: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:=_map.ACT_MOD;
_params.PROC_START:='N';
_params.AKCJA:=_a;
_params.GRUPA:='N';

: uruchom czynność
{? _map.MOD_PROC
|| _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);

   {? _map.KEY_TAB=!OSOBA
   || _params.UIDREF:=OSOBA.uidref();
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'OSOBA',OSOBA.ref())

   |? _map.KEY_TAB=!P
   || _params.UIDREF:=P.uidref();
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'P',P.ref())

   |? _map.KEY_TAB=!O_P
   || _params.UIDREF:=O_P.uidref();
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'P',O_P.P);
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'O',O_P.O)

   || return()
   ?};

   _file_name:='!'+(-~_params.ACT_UID);
   {? exec('is_fun','#file',_file_name,'setPorts')
   || exec('setPorts',_file_name,_params)
   ?};
:: dodatkowe ustalenie keyRefów - jeśli mamy więcej niż 1 keyRefa
   {? _map.KEY_ARR<>''
   || _params.UIDREF:=($_map.KEY_ARR)()
   ?};

   exec('mp_run','#b__box',_params)

|| exec('np_run','#b__box',_params)
?};

{? _a='ZAKOŃCZ'
|| win_activate(_cfg.nav.main)
?}


\pkd_done_state
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiada za ustawienie stanu akcji/przycisku "Zakończ".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_cfg:=_par.cfg;
_map:=_cfg.map;
_done:=_cfg.done;
_map.cntx_psh();
{? _map.find_key(_cfg.ctab) & _map.MOD
|| {? _map.KEY_ARR<>''
   || _keys:=($_map.KEY_ARR)()
   || _keys:=($_map.KEY_TAB)().uidref()
   ?};
   {? _done.state:=exec('done_state','pkd',_map.ACT_MOD,_keys)
   || _done.noempty:=_map.DONE_NE;
      _done.empty:=_map.DONE_E
   || _done.noempty:=_done.empty:=''
   ?};
   {? _map.DONE_NE+_map.DONE_E<>''
   || _aid:=spli_str(($_map.TABLE)().actions_grayed(_map.WINDOW),':');
      _cnd:="_a<>'' & _b*_a=0";
      {? _cnd(_done.noempty,_aid[1])
      || _done.noempty+=_aid[1]
      ?};
      {? obj_len(_aid)>1
      || {? _cnd(_done.empty,_aid[2])
         || _done.empty+=_aid[2]
         ?}
      ?};
      ($_map.TABLE)().actions_grayed(_map.WINDOW,_done.noempty+':'+_done.empty)
   ?}
?};
_map.cntx_pop();
~~


\done_state
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustala, czy akcja "Zakończ" jest dostępna.
::   WE: _a [STRING]       - Identyfikator czynności.
::       _b [STRING/ARRAY] - Identyfikator lub tablica z identyfikatorami rekordów kluczowych.
::   WY: 1 - akcja niedostępna (przycisk będzie ukryty), 0 - akcja dostępna
::----------------------------------------------------------------------------------------------------------------------
_uid:=_a;
{? var_pres('_b')=type_of('')
|| _key_arr:=obj_new(1);
   _key_arr[1]:=_b
|? var_pres('_b')=type_of(obj_new(1))
|| _key_arr:=_b
|| return(1)
?};
exec('get_bi_prel2run','#b__box',_uid,_key_arr)=null()


\pkd_conf_os_adres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia adresy wybranej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'RODZAJX' || 'RODZAJ' ?};
{? ~_a.init(_a,OS_ADRES,_ind,'WER','Z','Z','ZWS_DOS_PRDA','ZWS_DOS_PPDA')
|| return()
?};

_a.prolog+=
   "  OS_ADRES.cntx_psh();
      OS_ADRES.win_edit('RED');
      OS_ADRES.win_patt('SZUK');
   ";
_a.epilog+="OS_ADRES.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Adresy'@,"",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=OS_ADRES.index('?');
         OS_ADRES.index('OD');
         OS_ADRES.prefix(OSOBA.ref());
         OS_ADRES.index('RODZAJ');
         OS_ADRES.prefix(OSOBA.ref());
         OS_ADRES.index('RODZAJX');
         OS_ADRES.prefix(OSOBA.ref());
         OS_ADRES.index(_ndx);
         OS_ADRES.prefix(OSOBA.ref());
         exec('os_adres_cfg','osoba','BLANK','OSOBA')
      "),
   $($_a.as)(_a.map,"exec('os_adres_cfg','osoba','BLANK')"),
   ,,_a.mode,'adr'
)


\pkd_conf_rd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje o rodzinie wybranej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,RD,'_RODZINA','WER','Z','Z','PKD_DOS_PRRO','PKD_DOS_PPRD')
|| return()
?};

_a.prolog+=
   "  RD.cntx_psh();
      RD.win_edit('RED');
      RD.win_patt('RED');
      RD.win_fml('WER',,'NA',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
      RD.fld_fml('STNP','BLANK',""exec('rd_stnp_bl','osoba')"");
      RD.fld_fml('ZCZA','AFTER_EDIT',""exec('rd_zcza_ae','osoba')"");
   ";
_a.epilog+="RD.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Rodzina'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=RD.index('?');
         RD.index('_RODZINA');
         RD.prefix(OSOBA.ref());
         RD.index(_ndx);
         RD.prefix(OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode,'rdz'
)


\pkd_conf_pko
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia rachunki wybranej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,PKO,'_PKO','WER','Z','Z','PKD_DOS_PRRB','PKD_DOS_PPRB')
|| return()
?};

_a.prolog+=
   "  PKO.cntx_psh();
      PKO.win_edit('RED');
      PKO.win_patt('RED');
   ";
_a.epilog+="PKO.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Rachunki bankowe'@,"",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=PKO.index('?');
         PKO.index('_PKO');
         PKO.prefix(OSOBA.ref());
         PKO.index(_ndx);
         PKO.prefix(OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode,'pko'
)


\pkd_conf_os_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje o urzędach skarbowych wybranej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'ODX' || 'OD' ?};
{? ~_a.init(_a,OS_US,_ind,'WER','Z','Z','PKD_DOS_PRUS','PKD_DOS_PPUS')
|| return()
?};

_a.prolog+=
   "  OS_US.cntx_psh();
      OS_US.win_edit('RED');
   ";
_a.epilog+="OS_US.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Urzędy skarbowe'@,"",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=OS_US.index('?');
         OS_US.index('OD');
         OS_US.prefix(OSOBA.ref());
         OS_US.index('ODX');
         OS_US.prefix(OSOBA.ref());
         OS_US.index(_ndx);
         OS_US.prefix(OSOBA.ref());
         exec('os_adres_cfg','osoba','BLANK','OSOBA')
      "),
   $($_a.as)(_a.map,"exec('os_adres_cfg','osoba','BLANK')"),
   ,,_a.mode,'os_us'
)


\pkd_conf_os_tyt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia tytuły naukowe wybranej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'UNIQX' || 'UNIQ' ?};
{? ~_a.init(_a,OS_TYT,_ind,'WER','Z','Z','PKD_DOS_PRTN','PKD_DOS_PPTN')
|| return()
?};

_a.prolog+=
   "  OS_TYT.cntx_psh();
      OS_TYT.win_edit('RED');
      OS_TYT.win_patt('SZUK');
   ";
_a.epilog+="OS_TYT.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Tytuły naukowe'@,"",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=OS_TYT.index('?');
         OS_TYT.index('NDX1');
         OS_TYT.prefix(OSOBA.ref());
         OS_TYT.index('NDX2');
         OS_TYT.prefix(OSOBA.ref());
         OS_TYT.index('UNIQ');
         OS_TYT.prefix(OSOBA.ref());
         OS_TYT.index('UNIQX');
         OS_TYT.prefix(OSOBA.ref());
         OS_TYT.index(_ndx);
         OS_TYT.prefix(OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_p_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje ubezpieczeniowe danej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'ODX' || 'OD' ?};
{? ~_a.init(_a,P_INFO,_ind,'WER','Z','Z','PKD_DOS_PRDU','PKD_DOS_PPDU')
|| return()
?};

_a.prolog+=
   "  P_INFO.cntx_psh();
      P_INFO.win_edit('RED');
   ";
_a.epilog+="P_INFO.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Dane ubezpieczeniowe'@,"",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=P_INFO.index('?');
         P_INFO.index('ST');
         P_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         P_INFO.index('OD');
         P_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         P_INFO.index('ODX');
         P_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         P_INFO.index(_ndx);
         P_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode,'p_info'
)


\pkd_conf_os_dnauk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia dorobek naukowy wybranej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'OSTYPDX' || 'OSTYPDT' ?};
{? ~_a.init(_a,OS_DNAUK,_ind,'WER','Z','Z','PKD_DOS_PRPN','PKD_DOS_PPPN')
|| return()
?};

_a.prolog+=
   "  OS_DNAUK.cntx_psh();
      OS_DNAUK.actions('WER','W',,1);
      OS_DNAUK.win_edit('RED');
      OS_DNAUK.win_patt('RED');
   ";
_a.epilog+="OS_DNAUK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Dorobek naukowy'@,"",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=OS_DNAUK.index('?');
         OS_DNAUK.index('OSDTTYP');
         OS_DNAUK.prefix(OSOBA.ref());
         OS_DNAUK.index('OSTYPDT');
         OS_DNAUK.prefix(OSOBA.ref());
         OS_DNAUK.index('OSTYPDX');
         OS_DNAUK.prefix(OSOBA.ref());
         OS_DNAUK.index(_ndx);
         OS_DNAUK.prefix(OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_zj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia znajomość języków obcych wybranej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,ZJ,'JEZYK','WER','Z','Z','PKD_DOS_PRJO','PKD_DOS_PPJO')
|| return()
?};

_a.prolog+=
   "  ZJ.cntx_psh();
      ZJ.win_edit('RED');
      ZJ.win_patt('RED');
      ZJ.win_fml('WER',,'JO','NAZWA','ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");

   ";
_a.epilog+="ZJ.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Znajomość języków'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=ZJ.index('?');
         ZJ.index('ZNJEZ');
         ZJ.prefix(OSOBA.ref());
         ZJ.index(_ndx);
         ZJ.prefix(OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_woj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje wojskowe danej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,WOJ,'_WOJSKO','WER','Z','Z','PKD_DOS_PRWO','PKD_DOS_PPWO')
|| return()
?};

_a.prolog+=
   "  WOJ.cntx_psh();
      WOJ.win_edit('RED');
   ";
_a.epilog+="WOJ.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Dane wojskowe'@,"",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=WOJ.index('?');
         WOJ.index('_WOJSKO');
         WOJ.prefix(OSOBA.ref());
         WOJ.index(_ndx);
         WOJ.prefix(OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_staz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia poprzednie zatrudnienie wybranej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || '_STAZEX' || '_STAZE' ?};
{? ~_a.init(_a,STAZ,_ind,'WER','Z','Z','PKD_DOS_PRSW','PKD_DOS_PPSW',OSOBA)
|| return()
?};

_a.prolog+=
   "  STAZ.cntx_psh();
      STAZ.win_edit('RED');
      STAZ.win_fml('WER',,'F',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   ";
_a.epilog+="STAZ.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Okresy zatrudnienia'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=STAZ.index('?');
         STAZ.index('_STAZE');
         STAZ.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         STAZ.index('_STAZEX');
         STAZ.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         STAZ.index('_STAZEPR');
         STAZ.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         STAZ.index(_ndx);
         STAZ.prefix(exec('ref_firma','ustawienia'),OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode,'staz'
)


\pkd_conf_os_szkol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje o ukończonych szkołach danej osoby.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'PRIOX' || 'PRIO' ?};
{? ~_a.init(_a,OS_SZKOL,_ind,'WER','Z','Z','PKD_DOS_PRWY','PKD_DOS_PPWY')
|| return()
?};

_a.prolog+=
   "  OS_SZKOL.cntx_psh();
      OS_SZKOL.win_edit('RED');
      OS_SZKOL.win_fml('WER',,'OD',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   ";
_a.epilog+="OS_SZKOL.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wykształcenie'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=OS_SZKOL.index('?');
         OS_SZKOL.index('OD');
         OS_SZKOL.prefix(OSOBA.ref());
         OS_SZKOL.index('DO');
         OS_SZKOL.prefix(OSOBA.ref());
         OS_SZKOL.index('PRIO');
         OS_SZKOL.prefix(OSOBA.ref());
         OS_SZKOL.index('PRIOX');
         OS_SZKOL.prefix(OSOBA.ref());
         OS_SZKOL.index(_ndx);
         OS_SZKOL.prefix(OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode,'szkol'
)


\pkd_conf_emer_ren
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: Udostępnia informacje o wprowadzonych emeryturach i rentach.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'EMER_REX' || 'EMER_REN' ?};
{? ~_a.init(_a,EMER_REN,_ind,'WER','Z','Z','PKD_DOS_PRER','PKD_DOS_PPER')
|| return()
?};

_a.prolog+=
   "  EMER_REN.cntx_psh();
      EMER_REN.win_edit('RED');
      EMER_REN.win_patt('RED');
   ";
_a.epilog+="EMER_REN.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Przyznane emerytury/renty'@,"",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=EMER_REN.index('?');
         EMER_REN.index('EMER_REN');
         EMER_REN.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         EMER_REN.index('EMER_REX');
         EMER_REN.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         EMER_REN.index(_ndx);
         EMER_REN.prefix(exec('ref_firma','ustawienia'),OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_giodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje o operacjach na danych osobowych.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'GIODOSOX' || 'GIODOSOB' ?};
{? ~_a.init(_a,GIODO,_ind,'WEROS',,,'ZWS_DOS_PRGI','ZWS_DOS_PPGI')
|| return()
?};

_a.prolog+=
   "  GIODO_ED.TYP:='osoba';
      GIODO.cntx_psh();
      GIODO.win_edit('RED');
      GIODO.win_patt('SZUK');
   ";
_a.epilog+=
   "  GIODO.cntx_pop();
      GIODO_ED.TYP:='';
   ";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Operacje na danych osobowych'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=GIODO.index('?');
         GIODO.index('GIODOSOB');
         GIODO.prefix(OSOBA.ref());
         GIODO.index('GIODOSOX');
         GIODO.prefix(OSOBA.ref());
         GIODO.index(_ndx);
         GIODO.prefix(OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_p_ipod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje podatkowe danego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'ODX' || 'OD' ?};

{? ~_a.init(_a,P_IPOD,_ind,'WER','Z','Z','PKD_EZK_ORDP','PKD_EZK_OPDP',P)
|| return()
?};

_a.prolog+=
   "  P_IPOD.cntx_psh();
      P_IPOD.win_edit('RED');
      P_IPOD.win_fml('WER',,'OD',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   ";
_a.epilog+="P_IPOD.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Dane podatkowe'@,,,,,
   $($_a.bs)(_a.map,
      "  {? _a
         || P_IPOD.win_edit({? __PARSES.getVal('F_ZATR').KOD='Z' || 'RED_FZ' || 'RED' ?})
         ?};
         _ndx:=P_IPOD.index('?');
::       nałożenie prefiksu na indeks (musi być taki sam, aby go było widać)
::       po to aby było można go widać w menu Kolejność
         P_IPOD.index('OD');
         P_IPOD.prefix(P.ref());
         P_IPOD.index('ODX');
         P_IPOD.prefix(P.ref());
         P_IPOD.index(_ndx);
         P_IPOD.prefix(P.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_h_um
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia umowy współpracy wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wer:={? PAR_SKID.get(180)='T' || 'WER_PD' || 'WER_PR' ?};
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'ODX' || 'OD' ?};

{? ~_a.init(_a,H_UM,_ind,_wer,'Z','Z','PKD_EZK_RPZA','PKD_EZK_PPZA',P)
|| return()
?};

_a.prolog+="
   H_UM.cntx_psh();
   exec('otworz_h_um','pracownik','h_um');
   H.cntx_psh();
   H.use(exec('h_name','pracownik'));
   H.index('HISTUM');
   exec('pkd_conf_h_um_icon','pkd');
   {? PAR_SKID.get(261)='N' || H.actions('"+_wer+"','O') ?};
";
_a.epilog+="
   H.actions('"+_wer+"','');
   H_UM.cntx_pop();
   exec('otworz_h_um','pracownik');
   H.cntx_pop();
";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Umowy o pracę'@,
   $("params_set(params_get());"+
     "H_UM.actions_grayed('"+_wer+"',exec('pkd_conf_h_um_act','pkd'));"+
     "grp_disp(H,'"+_wer+"',1,0)"
   ),
   ,,3,
   $($_a.bs)(_a.map,
      "  _ndx:=H_UM.index('?');
::       nałożenie prefiksu na indeks (musi być taki sam, aby go było widać)
::       po to aby było można go widać w menu Kolejność
         H_UM.index('OD');
         H_UM.prefix(P.ref());
         H_UM.index('ODX');
         H_UM.prefix(P.ref());
         H_UM.index(_ndx);
         H_UM.prefix(P.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode,'umprac'
);

_a.table.tab_splt(_a.window,,'horizontal','bottom');
_a.table.grp_sel(_a.window,H,_wer,,
   $("params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _lm:=exec('last_mod_get','#table',P);
      {? EDIT_VAR.P_LM<>_lm
      || EDIT_VAR.P_LM:=_lm;
         grp_disp(P,_cfg.nav.main,0)
      ?};"+
     "H.actions_grayed('"+_wer+"',exec('pkd_conf_h_act','pkd'))"
   ),,,,
   $("params_set(_par:=params_get());
      _cfg:=_par.cfg;
::    parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
      _ind:={? PAR_SKID.get(236)='T' || 'HISTUMX' || 'HISTUM' ?};
      H.index(_ind);

      H.prefix(H_UM.ref());
      {? _a
      || exec('pkd_done_state','pkd');
         {? _cfg.disp.on
         || grp_disp(_cfg.disp.TAB,_cfg.disp.ws,0,1);
            _cfg.disp.on:=0
         ?}
      ?};
      {? REF.OSOBA=null() | grp_empty("+_a.map.TABLE+",'"+_a.map.WINDOW+"')
      || return('#disable')
      ?};
      {? _a & ~_cfg.done.state
      || exec('pkd_run','pkd','START')
      ?}
   "),
   "  params_set(_par:=params_get());
      {? _a & ~_par.cfg.done.state
      || exec('pkd_run','pkd','STOP')
      ?}
   ",
   ,,_a.mode
)


\pkd_conf_h_um_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustala ikonki dla kolumn okienek tabeli H_UM i H
::----------------------------------------------------------------------------------------------------------------------
: ikonka spinaczki dla zapisów, które mają załączniki
_fml:="exec('x_zalacz_icon','zalacz')";
H_UM.win_fml('WER_PD',,'OD',,'ICON_BEFORE',_fml);
H_UM.win_fml('WER_PR',,'OD',,'ICON_BEFORE',_fml);
H_UM.win_fml('WER_PT',,'OD',,'ICON_BEFORE',_fml);
H_UM.win_fml('WERZ',,'OD',,'ICON_BEFORE',_fml);

H.win_fml('WER_PD',,'OD',,'ICON_BEFORE',_fml);
H.win_fml('WER_PR',,'OD',,'ICON_BEFORE',_fml);
H.win_fml('WER_PT',,'OD',,'ICON_BEFORE',_fml);
H.win_fml('WERZ',,'OD',,'ICON_BEFORE',_fml);

: wizualizacja typu umowy
_fml:="
   _kod:=H_UM.RU().K;
   'xwin16.png:'+
   {? _kod='A' || '120'
   |? _kod='B' || '118'
   |? _kod='C' || '111'
   |? _kod='D' || '63'
   |? _kod='E' || '33'
   |? _kod='X' || '185'
   || '110'
   ?}
";
H_UM.win_fml('WER_PD',,'RU','K','ICON_BEFORE',_fml);
H_UM.win_fml('WER_PR',,'RU','K','ICON_BEFORE',_fml);
H_UM.win_fml('WER_PT',,'RU','K','ICON_BEFORE',_fml);
~~


\pkd_conf_h_um_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca listę akcji do wyłączenia dla przeglądania kartoteki w obszarze pkd w trybie bezpośredniem.
::   WY: identyfikatory akcji
::----------------------------------------------------------------------------------------------------------------------
_act:='';
_d0:=date(0,0,0);
: Blokowane akcje:

{? H_UM.name()<>'h_um' | (H_UM.EKW=0 & H_UM.EKW_NSP=0)
:  Ekwiwalent dla brudnopisu i braku podanych godzin
|| _act+='T'
?};

{? exec('h_um_mod_pos','pracownik',H_UM.ref(),H_UM.P)<>3
:  Usuń, jeśli zawarto tylko jedną umowę
|| _act+='U'
?};

H_UM.cntx_psh();
H_UM.index('OD');
H_UM.prefix(P.ref());
{? H_UM.last() & H_UM.DO=_d0
:  Dołącz, jeśli ostatnia umowa nie została zakończona
|| _act+='D'
?};
H_UM.cntx_pop();

{? H_UM.DO=_d0
:  Rozwiązanie umowy
|| _act+='E'
?};

{? exec('done_state','pkd','PKD_EZK_RPZA',P.uidref())
:  Zakończ, jeżeli mikroczynność
|| _act+='Z'
?};

{? H_UM.P_ZAS=null
:: brak zastępowanego współpracownika
|| _act+='O'
?};

_act


\pkd_conf_h_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca listę akcji do wyłączenia dla przeglądania kartoteki w obszarze PKD w trybie bezpośredniem.
::   WY: identyfikatory akcji
::----------------------------------------------------------------------------------------------------------------------
_act:='';
: zablokuj akcje
_pos:=exec('h_mod_pos','pracownik',H.ref(),H.UMOWA);
{? _pos<>3
|| _act+='U'
?};
{? _pos<2
|| {? exec('is_pzd02','ppsf')
   || PPSF_H.cntx_psh();
      PPSF_H.index('PRAC_AKT');
      PPSF_H.prefix();
      _wh:=''+"
         PPSF_H.P=:_a and
         PPSF_H.AKT='T' and
         PPSF_H.DRUK_U='T' and
         PPSF_H.ORIGIN='U' and
         (PPSF_H.OD<=to_date(:_c) or to_date(:_c) is null) and
         (PPSF_H.DO>=to_date(:_b) or PPSF_H.DO is null)
      ";
      _ret:=PPSF_H.f_set(,,_wh,P.ref(),H.OD,H.DO) & PPSF_H.f_first();
      PPSF_H.cntx_pop();
      PPSF_H.f_clear();
      {? ~_ret
      || _act+='J(A)'
      ?}
   || _act+='J(A)'
   ?}
?};
{? exec('done_state','pkd','PKD_EZK_RPZA',P.uidref())
|| _act+='Z'
?};
:: Dezaktywacja akcji "Oddelegowanie"
{? PAR_SKID.get(261)='T'
|| {? ~(H.ODDEL='T' | exec('czy_jest_H_ODDE','oddelegowanie'))
   || _act+='O'
   ?}
?};

_act


\pkd_conf_lss
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia składniki wynagrodzenia wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,LSS,'PROPOZYC','WER','Z','Z','PKD_EZK_ORSW','PKD_EZK_OPSW',P)
|| return()
?};

_a.prolog+="
   LSS.cntx_psh();
   LSS.win_edit('RED');
   LSS.win_patt('WZO');
";
_a.epilog+="LSS.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Stałe składniki wynagrodzenia'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=LSS.index('?');
      LSS.index('PROPOZYC');
      LSS.prefix(P.ref());
      LSS.index(_ndx);
      LSS.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_r_wzcz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje o wzorcach czasu pracy pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'R_WZWNDX' || 'R_WZWND' ?};
{? ~_a.init(_a,R_WZCZ,_ind,'KAL','Z','Z','PKD_EZK_ORKA','PKD_EZK_OPKA',P)
|| return()
?};

_a.prolog+="R_WZCZ.cntx_psh();";
_a.epilog+="R_WZCZ.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wzorce czasu pracy'@,,,,,
   $($_a.bs)(_a.map,
      "  R_WZCZ.prefix(P.name(),P.ref(),'N','N');
         {? ~R_WZCZ.size()
         || exec('dod_kal_czesc','kaledit',P)
         ?};
         R_WZCZ.win_edit('KAL');
         {? _a
         || exec('r_wzcz_fld_fml','kaledit',P);
            __KAL.set_cal(P.KAL)
         ?}
      "),
   $($_a.as)(_a.map,"exec('r_wzcz_fld_fml','kaledit')"),
   ,,_a.mode
)
:: !!! - Obsługa grafików.
:: Wertowanie tabeli R_WZCZ w 12.41 odbywało się w pętli, dla której kod poniżej był warunkiem wyjścia/powtórzenia.
::R_WZCZ.index('R_WZCZ');
::R_WZCZ.prefix(P.name(),P.ref());
::{? R_WZCZ.first()
::|| _wyn:=0;
::   {!
::   |? {? R_WZCZ.GRAFIK='T'
::      || KAL_ROK.index('KAL_ROK');
::         KAL_ROK.prefix(P.KAL);
::         {? ~KAL_ROK.first()
::         || FUN.emsg(
::               'Istnieje wzorzec typu "Grafik" od: '+$R_WZCZ.OD+'.\n'+
::               'Nie zdefiniowano kalendarza typu grafik, akcja: "Grafik" dla takiego wzorca.'
::            );
::            _wyn:=1;
::            0
::         || R_WZCZ.next()
::         ?}
::      || R_WZCZ.next()
::      ?}
::   !};
::   _wyn
::|| 0
::?}


\pkd_conf_bdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje o badaniach lekarskich pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'PDTOX' || 'PDTO' ?};
{? ~_a.init(_a,BDO,_ind,'WER','Z',,'PKD_EZK_ORBL','PKD_EZK_OPBL',P)
|| return()
?};

_a.prolog+=
   "  BDO.cntx_psh();
      BDO.win_edit('RED');
      BDO.win_patt('RED');
      BDO.win_fml('WER',,'DTO',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
      BDS.cntx_psh();
   ";
_a.epilog+=
   "  BDS.cntx_pop();
      BDO.cntx_pop();
   ";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Badania lekarskie'@,
   "params_set(params_get()); grp_disp(BDS,'WER')",,,,
   $($_a.bs)(_a.map,
      "  SLO_TYP.cntx_psh();
         SLO_TYP.prefix();
         _ndx:=BDO.index('?');
         BDO.index('PDTO');
         BDO.prefix(P.ref());
         BDO.index('PDTOX');
         BDO.prefix(P.ref());
         BDO.index(_ndx);
         BDO.prefix(P.ref())
      "),
   $($_a.as)(_a.map,"SLO_TYP.cntx_pop()"),
   ,,_a.mode,'badlek'
);

_a.table.tab_splt(_a.window,,'vertical','bds',',66%');
_a.table.grp_sel(_a.window,BDS,'WER',,,,,,
   "  {? grp_empty(BDO,'WER')
      || return('#disable')
      ?};
      BDS.index('ST');
      BDS.prefix(BDO.ref())
   ",,,,
   _a.mode
)


\pkd_conf_p_dnauk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje o punktach do premii naukowej pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,P_DNAUK,'PDT','WER','Z','Z','PKD_EZK_ORPN','PKD_EZK_OPPN',P)
|| return()
?};

_a.prolog+="P_DNAUK.cntx_psh();";
_a.epilog+="P_DNAUK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Punkty za publikacje'@,"",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=P_DNAUK.index('?');
         P_DNAUK.index('PDT');
         P_DNAUK.prefix(P.ref());
         P_DNAUK.index(_ndx);
         P_DNAUK.prefix(P.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje o nieobecnościach.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ndx:={? PAR_SKID.get(236)='T' || 'NIEOBECX' || 'NIEOBECN' ?};
{? ~_a.init(_a,N,_ndx,'WER','Z','Z','PKD_EZK_ORNN','PKD_EZK_OPNN',P)
|| return()
?};

_a.prolog+=
   "  N.cntx_psh();
      N.win_edit('RED');
      N.win_patt('WZO');
      exec('n_nb_icon','nieobecnosc','WER');
      exec('n_nb_icon','nieobecnosc','WYCOFANE');
   ";
_a.epilog+="N.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Nieobecności'@,
   "params_set(params_get()); exec('n_ar','nieobecnosc')",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=N.index('?');
         N.index('NIEOBECX');
         N.prefix('N',P.ref());
         N.index('NIEOBECN');
         N.prefix('N',P.ref());
         N.index(_ndx);
         N.prefix('N',P.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode,'nieob'
)


\pkd_conf_kart_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia kartotekę dodatkową - część wspólna.
::   WE: _a [ARRAY]  - Bufor konfiguracji..
::       _b [STRING] - Akronim kartoteki dodatkowej.
::       _c [STRING] - Tytuł zakładki.
::       _d [STRING] - Identyfikator czynności typu rejestracja.
::       _e [STRING] - Identyfikator czynności typu przeglądanie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kdef:=_b;
_ktyt:=_c;
{? (_def:=exec('kart_def','kart_dod',_kdef))=null()
|| return()
?};

_act_mod:=_d;
_act_view:=_e;

_done:="params_set(params_get()); exec('kart_dod_zb','kart_dod')";
{? (_ws:=exec('mk_sel','kart_dod',_act_mod,_act_view,_done,''))=''
|| return()
?};

_acr:=_kdef;
_we:=exec('mk_edit','kart_dod');
: Obiekt __WND jest używany do zapamiętania okna na czas pracy z oknem grupowym. Ponieważ konfiguracja kartoteki
: dodatkowej (kolumn, opisów) mogła ulec zmianie - okno budujemy zawsze od początku.
__WND.EDIT.put(KART_DOD,_acr,_we);
_ind:={? PAR_SKID.get(236)='T' || 'KART_DOX' || 'KART_DOD' ?};
{? ~_a.init(_a,KART_DOD,_ind,_ws,'Z','Z',_act_mod,_act_view)
|| return()
?};

_a.prolog+="KART_DOD.cntx_psh();";
_a.epilog+="KART_DOD.cntx_pop();";

: Przy prefiksowaniu ref() jest traktowany jak liczba. Dlatego też wskazanie na kartotekę dodatkową (_def)
: w prefiksie (poniżej) zamieniane jest na liczbę.
: Konieczność budowania formuły pociągnęło za sobą konieczność użycia operatora $ (zamiany napisu na formułę).
_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,_ktyt,"",,,,
   $($_a.bs)(_a.map,$(
      "  exec('kart_def','kart_dod','"+_kdef+"');
         _firma:=exec('ref_firma','ustawienia');
         KART_DOD.win_edit(__WND.EDIT.get(KART_DOD,'"+_acr+"'));
         _ndx:=KART_DOD.index('?');
         KART_DOD.index('KART_DOD');
         KART_DOD.prefix(_firma,"+$#_def+",OSOBA.ref());
         KART_DOD.index('KART_DOX');
         KART_DOD.prefix(_firma,"+$#_def+",OSOBA.ref());
         KART_DOD.index(_ndx);
         KART_DOD.prefix(_firma,"+$#_def+",OSOBA.ref())
      ")),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_kart_dod_szkolbhp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia kartotekę dodatkową BHP i PPOŻ.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pkd_conf_kart_dod','pkd',_a,'SZKOLBHP','Szkolenia BHP i PPOŻ'@,'PKD_DOS_PRSZ','PKD_DOS_PPSZ')


\pkd_conf_kart_dod_wyr_kar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia kartotekę dodatkową wyróżnień i kar.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pkd_conf_kart_dod','pkd',_a,'WYR_KAR','Wyróżnienia i kary'@,'PKD_DOS_PRWK','PKD_DOS_PPWK')


\pkd_conf_kart_dod_dod_kwal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia kartotekę dodatkową wyróżnień i kar.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pkd_conf_kart_dod','pkd',_a,'DOD_KWAL','Dodatkowe kwalifikacje'@,'PKD_DOS_PRKW','PKD_DOS_PPKW')


\pkd_conf_upr_zawo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia uprawnienia zawodowe osoby
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'OUD' || 'OUS' ?};
{? ~_a.init(_a,UPR_ZAWO,_ind,'WER','Z','Z','PKD_DOS_PRUZ','PKD_DOS_PPUZ')
|| return()
?};

_a.prolog+=
   "  UPR_ZAWO.cntx_psh();
      UPR_ZAWO.win_edit('RED');
      UPR_ZAWO.win_patt('RED');
      UPR_ZAWO.win_fml('WER',,'UPR_ZAWK','SYMBOL','ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   ";
_a.epilog+="UPR_ZAWO.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Uprawnienia zawodowe'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=UPR_ZAWO.index('?');
         UPR_ZAWO.index('OUN');
         UPR_ZAWO.prefix(OSOBA.ref());
         UPR_ZAWO.index('OUS');
         UPR_ZAWO.prefix(OSOBA.ref());
         UPR_ZAWO.index('OUD');
         UPR_ZAWO.prefix(OSOBA.ref());
         UPR_ZAWO.index(_ndx);
         UPR_ZAWO.prefix(OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode,'uprzawo'
)


\pkd_conf_ds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia dyscyplinę pracy wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ndx:={? PAR_SKID.get(236)='T' || 'DYSCYPLX' || 'DYSCYPLI' ?};
{? ~_a.init(_a,DS,_ndx,'WER','Z','Z','PKD_EZK_ORDS','PKD_EZK_OPDS',P)
|| return()
?};

_a.prolog+="
   DS.cntx_psh();
   DS.win_edit('RED');
   DS.win_patt('WZO');
";
_a.epilog+="DS.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Dyscyplina pracy'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=DS.index('?');
      DS.index('DYSCYPLI');
      DS.prefix(P.ref());
      DS.index('DYSCYPLX');
      DS.prefix(P.ref());
      DS.index(_ndx);
      DS.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_kart_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia karty urlopowe wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ndx:={? PAR_SKID.get(236)='T' || 'PRAC_ROX' || 'PRAC_ROK' ?};
{? ~_a.init(_a,KART_URL,_ndx,'WER','Z','Z','PKD_EZK_ORKU','PKD_EZK_OPKU',P)
|| return()
?};

_a.prolog+="
   KART_URL.cntx_psh();
   KART_URL.win_edit('RED');

";
_a.epilog+="KART_URL.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Karty urlopowe'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=KART_URL.index('?');
      KART_URL.index('PRAC_ROK');
      KART_URL.prefix(P.ref());
      KART_URL.index('PRAC_ROX');
      KART_URL.prefix(P.ref());
      KART_URL.index(_ndx);
      KART_URL.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_umlojn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia kartotekę umów lojalnościowych wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ndx:={? PAR_SKID.get(236)='T' || 'DTX' || 'DTU' ?};
{? ~_a.init(_a,UMLOJN,_ndx,'WER','Z','Z','PKD_EZK_ORUL','PKD_EZK_OPUL',P)
|| return()
?};

_a.prolog+="
   UMLOJN.cntx_psh();
   UMLOJN.win_edit('RED');
   UMLOJN.win_fml('WER',,'DTU',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
";
_a.epilog+="UMLOJN.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Umowy lojalnościowe'@,,,,,
   $($_a.bs)(_a.map,"
      _ndx:=UMLOJN.index('?');
      UMLOJN.index('DTX');
      UMLOJN.prefix(P.ref());
      UMLOJN.index('DTU');
      UMLOJN.prefix(P.ref());
      UMLOJN.index(_ndx);
      UMLOJN.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_p_kk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje o historii konta kosztów.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ndx:={? PAR_SKID.get(236)='T' || 'OX' || 'OD' ?};
{? ~_a.init(_a,P_KK,_ndx,'WER','Z','Z','PKD_EZK_ORHK','PKD_EZK_OPHK',P)
|| return()
?};

_a.prolog+=
   "  P_KK.cntx_psh();
      P_KK.win_edit('RED');
   ";
_a.epilog+="P_KK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Konta kosztów'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=P_KK.index('?');
         P_KK.index('OX');
         P_KK.prefix(P.ref());
         P_KK.index('OD');
         P_KK.prefix(P.ref());
         {? ~P_KK.size() & P.KK<>null()
         || melody();
            P_KK.blank();
            P_KK.OD:=P.DZA;
            P_KK.KK:=P.KK;
            P_KK.add()
         ?};
         P_KK.index(_ndx);
         P_KK.prefix(P.ref());
         BPMN.KK_DOM:='PPL'
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_p_pz_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia kartotekę zastępców pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'WIDOK_PD' || 'WIDOK_P' ?};
{? ~_a.init(_a,P_PZ,_ind,'ZAS_P','Z','Z','PKD_EZK_ORZS','PKD_EZK_OPZS',P)
|| return()
?};

_a.prolog+="P_PZ.cntx_psh();";
_a.epilog+="P_PZ.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Zastępcy'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=P_PZ.index('?');
      P_PZ.index('WIDOK_P');
      P_PZ.prefix('Z',REF.P);
      P_PZ.index('WIDOK_PD');
      P_PZ.prefix('Z',REF.P);
      P_PZ.index(_ndx);
      P_PZ.prefix('Z',REF.P)
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_p_pz_nad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Udostępnia kartotekę podwładnych pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,ZS_TYP,'TREE','NAD',,,'PKD_EZK_ORLN','PKD_EZK_OPLN',P)
|| return()
?};

_a.prolog+="params_exec('wnd_bo','zs_lib');";
_a.epilog+="params_exec('wnd_oc','zs_lib');";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Przełożeni'@,
   "params_exec('zs_typ_nad_ar','zs_lib')",,,,
   $($_a.bs)(_a.map),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_p_pz_pod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia kartotekę podwładnych pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,ZS_TYP,'TREE','NAW',,,'PKD_EZK_ORLP','PKD_EZK_OPLP',P)
|| return()
?};

_a.prolog+="
   params_exec('wnd_bo','zs_lib');
";
_a.epilog+="
   params_exec('wnd_oc','zs_lib');
   exec('def_dnd_setup','zs_lib','POD',0);
";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Podwładni'@,
   "params_exec('zs_typ_naw_ar','zs_lib')",,,,
   $($_a.bs)(_a.map),
   $($_a.as)(_a.map),
   ,,_a.mode
);

_a.table.tab_splt(_a.window,,'vertical','right');
_a.table.grp_sel(_a.window,ZS_DEF,'POD',,
   "  _par:=params_get();
      params_set(_par);
      _cfg:=_par.cfg;
      exec('zs_def_pod_ar','zs_lib')
   ",,,,
   "  _par:=params_get();
      params_set(_par);
      _cfg:=_par.cfg;
      {? _a & ~_cfg.done.state
      || exec('pkd_run','pkd','START')
      ?};
      exec('zs_def_pod_bs','zs_lib',_a)
   ",
   "  _par:=params_get();
      params_set(_par);
      _cfg:=_par.cfg;
      {? _a & ~_cfg.done.state
      || exec('pkd_run','pkd','STOP')
      ?}
   ",,,_a.mode
)


\pkd_conf_p_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia kartotekę pełnionych obowiązków.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,P_PO,'WIDOK','WER','Z','Z','PKD_EZK_OROB','PKD_EZK_OPOB',P)
|| return()
?};

_a.prolog+="P_PO.cntx_psh();";
_a.epilog+="P_PO.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Pełnione obowiązki'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=P_PO.index('?');
      P_PO.index('P_PO');
      P_PO.prefix(REF.P);
      P_PO.index(_ndx);
      P_PO.prefix(REF.P)
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_szkolenia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Udostępnia kartotekę szkoleń dla pracowników.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,SZK_PRAC,'PRAC_SZK','WER','Z','Z','PKD_EZK_ORSZ','PKD_EZK_OPSZ',P)
|| return()
?};
_a.prolog+="SZK_PRAC.cntx_psh();SZK_PRAC.win_edit('RED');SZK_PRAC.hdr_sel(':'+OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE);";
_a.prolog+="SZK_PRAC.fld_fml(\'P\',\'BLANK\',\"P.ref\");SZK_PRAC.fld_fml(\'SZKOL\',\'BLANK\',\"null\");";
_a.prolog+="SZK_OPIS.cntx_psh();SZK_OPIS.win_dict('SLO');SZK_OPIS.win_edit('WER');";
_a.epilog+="SZK_PRAC.cntx_pop();SZK_OPIS.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Szkolenia pracownika'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=SZK_PRAC.index('?');
      SZK_PRAC.index('PRAC_DAT');
      SZK_PRAC.prefix(REF.P);
      SZK_PRAC.index(_ndx);
      SZK_PRAC.prefix(REF.P);
      UMLOJN.cntx_psh()
   "),
   $($_a.as)(_a.map,"UMLOJN.f_clear(); UMLOJN.cntx_pop()"),
   ,,_a.mode
)


\pkd_conf_url_plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia kartoteki związane z planami urlopowymi.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ndx:={? PAR_SKID.get(236)='T' || 'ROX' || 'ROK' ?};
{? ~_a.init(_a,URL_PLAN,_ndx,'WER','','',,'PKD_EZK_OPPU',P)
|| return()
?};

_a.prolog+=
   "  URL_PLAN.cntx_psh();
      URL_POZ.cntx_psh();
   ";

_a.epilog+=
   "  URL_POZ.cntx_pop();
      URL_PLAN.cntx_pop();
   ";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Plany urlopowe'@,
   "grp_disp(URL_POZ,'WER')",,,,
   $($_a.bs)(_a.map,"
      _ndx:=URL_PLAN.index('?');
      URL_PLAN.index('ROK');
      URL_PLAN.prefix(REF.P,'A',);
      URL_PLAN.index('ROX');
      URL_PLAN.prefix(REF.P,'A',);
      URL_PLAN.index(_ndx);
      URL_PLAN.prefix(REF.P,'A',)
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
);
_a.table.tab_splt(_a.window,,'horizontal','url_poz',5);
_a.table.grp_sel(_a.window,URL_POZ,'WER',,,,,,
   "  URL_POZ.index({? PAR_SKID.get(236)='T' || 'URL_POX' || 'URL_POZ' ?});
      _ref:={? grp_empty(URL_PLAN,'WER') || null() || URL_PLAN.ref() ?};
      URL_POZ.prefix(_ref);
      {? ~_ref
      || return('#disable')
      ?}
   ",
   "")


\pkd_conf_h_odde
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.42]
:: OPIS: Udostępnia kartoteki związane z oddelegowaniami do pracy za granicą.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'PODX' || 'POD' ?};
{? PAR_SKID.get(261)='N' | ~_a.init(_a,H_ODDE,_ind,'WER',,,'PKD_EZK_OROD','PKD_EZK_OPOD',P)
|| return()
?};

_a.prolog+=
   "  P.cntx_psh();
      OSOBA.cntx_psh();
      H_ODDE.cntx_psh();
      H_ODDP.cntx_psh();
      H_ODDA.cntx_psh();
      H_ODDR.cntx_psh();
      H_ODDE.win_edit('RED');
      H_ODDE.actions('WER',{? PAR_SKID.get(180)='N' || 'd:d' || 'dpU:d' ?});
   ";
_a.epilog+=
   "  P.cntx_pop();
      OSOBA.cntx_pop();
      H_ODDE.cntx_pop();
      H_ODDP.cntx_pop();
      H_ODDA.cntx_pop();
      H_ODDR.cntx_pop();
   ";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Oddelegowania za granicę'@,
   "  grp_disp(H_ODDP,'WER');
      P.seek(REF.P,)
   ",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=H_ODDE.index('?');
         H_ODDE.index('POD');
         H_ODDE.prefix(P.ref());
         H_ODDE.index('PODX');
         H_ODDE.prefix(P.ref());
         H_ODDE.index(_ndx);
         H_ODDE.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode,'oddel'
);

_a.table.tab_splt(_a.window,,'horizontal','pozycje',7);
_a.table.grp_sel(_a.window,H_ODDP,'WER',,,,,,
   "  H_ODDP.efld_opt('RED','enable=1,editable=grayed',,'NOM');
      H_ODDP.efld_opt('RED','enable=1,editable=1',,'DNI');
      H_ODDP.efld_opt('RED','enable=1,editable=1',,'WAL','SYM');
      H_ODDP.efld_opt('RED','enable=1,editable=1',,'ST');
      H_ODDP.efld_opt('RED','enable=1,editable=1',,'KW');
      H_ODDP.efld_opt('RED','enable=1,editable=grayed',,'LT');
      _ndx:={? PAR_SKID.get(236)='T' || 'H_ODDEX' || 'H_ODDE' ?};
      _ref:={? grp_empty(H_ODDE,'WER') || null() || H_ODDE.ref() ?};
      H_ODDP.index('H_ODDE'+{? PAR_SKID.get(236)='T' || '' || 'X' ?});
      H_ODDP.prefix(_ref);
      H_ODDP.index(_ndx);
      H_ODDP.prefix(_ref);
      {? ~_ref
      || return('#disable')
      ?}
   ",,,,_a.mode
)


\pkd_conf_zat_h_odde
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Udostępnia kartoteki związane z oddelegowaniami do pracy za granicą podczas zatrudnienia pracownika.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'PODX' || 'POD' ?};

{? PAR_SKID.get(261)='N' | ~_a.init(_a,H_ODDE,_ind,'WER',,,'PKD_EZK_OROD','PKD_EZK_OPOD',P)
|| return()
?};

_a.prolog+=
   "  P.cntx_psh();
      OSOBA.cntx_psh();
      H.cntx_psh();
      H_UM.cntx_psh();
      H_ODDE.cntx_psh();
      H_ODDA.cntx_psh();
      H_ODDR.cntx_psh();
      H_ODDE.win_edit('RED');
      H_ODDE.fld_fml('H','BLANK',\"H.ref()\");
      H_ODDE.actions('WER',{? PAR_SKID.get(180)='N' || 'd:d' || 'dpU:d' ?});
   ";
_a.epilog+=
   "  H_ODDE.fld_fml('H','BLANK',\"*\");
      P.cntx_pop();
      OSOBA.cntx_pop();
      H.cntx_pop();
      H_UM.cntx_pop();
      H_ODDE.cntx_pop();
      H_ODDA.cntx_pop();
      H_ODDR.cntx_pop();
   ";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Oddelegowania za granicę'@,
   "  _gray:='dpu:d';
      H_UM.index('OD');
      H_UM.prefix(P.ref());
      {? H_UM.first()
      || H.index('HISTUM');
         H.prefix(H_UM.ref());
         {? H.first() & H.ODDEL='T'
         || _gray:={? H_ODDE.size()>1 || '' || 'u' ?}
         ?}
      ?};
      H_ODDE.actions_grayed('WER',_gray);

      P.seek(REF.P,)
   ",,,,
   $($_a.bs)(_a.map,
      "  H_ODDE.prefix(P.ref());
         _ind:=H_ODDE.index('?');
         H_ODDE.index('POD');
         H_ODDE.prefix(P.ref());
         H_ODDE.index('PODX');
         H_ODDE.prefix(P.ref());
         H_ODDE.index(_ind);
         H_ODDE.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_kart_dod_xxxxxxxx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia kartoteki dodatkowe osoby (nie-systemowe).
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Specyficzna prezentacja kartotek dodatkowych wymaga specyficznego podejścia.
_act_mod:='PKD_DOS_PRKD';
_act_view:='PKD_DOS_PPKD';

_ok:=0;
B_DOMAIN.cntx_psh();
B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
{? B_ACTION.find_key(_act_mod,) & B_ACTION.AKT='T' & exec('lic','#b_domain',B_ACTION.B_DOMAIN().SYMBOL)
|| _ok+=1
?};
{? B_ACTION.find_key(_act_view,) & B_ACTION.AKT='T' & exec('lic','#b_domain',B_ACTION.B_DOMAIN().SYMBOL)
|| _ok+=1
?};
B_ACTION.prefix();
B_ACTION.cntx_pop();
B_DOMAIN.cntx_pop();
{? _ok<2
|| return(0)
?};

{? exec('chk_role','#b__box',OPERATOR.USER,_act_mod)=0 & exec('chk_role','#b__box',OPERATOR.USER,_act_view)=0
|| return()
?};

_key_arr:='_tab:=obj_new(2); _tab[1]:=OSOBA.uidref(); _tab[2]:=KART_DEF.uidref(); _tab';
_ind:={? PAR_SKID.get(236)='T' || 'KART_DOX' || 'KART_DOD' ?};
{? ~_a.init(_a,KART_DOD,_ind,'WER','Z','Z',_act_mod,_act_view,OSOBA,_key_arr)
|| return()
?};

_a.table.grp_sel(_a.window,KART_DEF,'SEL','Kartoteki dodatkowe'@,
   "  params_set(_par:=params_get());
      _kart_def:=_par.kart_def;
      _kart_def.REF:=KART_DEF.ref();
      _kart_def.SYMBOL:=EDIT_VAR.KART_DEF:=KART_DEF.SYMBOL;
      _acr:=EDIT_VAR.KART_DEF;
      {? (_we:=__WND.EDIT.get(KART_DOD,_acr))=''
      || _we:=exec('mk_edit','kart_dod');
         __WND.EDIT.put(KART_DOD,_acr,_we)
      ?};
      KART_DOD.win_edit(_we);
      {? cur_tab(1,0)=KART_DEF & REF.OSOBA<>null()
      || grp_disp(KART_DOD,'WER')
      ?}
   ",,,,
   "  _kart_def:=params_get().kart_def;
      KART_DEF.prefix();
      KART_DEF.sel_adel();
      exec('f_set_nosys','kart_dod');
      KART_DEF.win_edit('RED');
      {? KART_DEF.SYMBOL<>_kart_def.SYMBOL
      || KART_DEF.f_find(_kart_def.SYMBOL,) | KART_DEF.f_first()
      ?}
   ",
   "KART_DEF.f_clear()",,,
   _a.mode
);

KART_DEF.win_sopt('SEL','select_record_checkbox=0');

_a.table.tab_splt(_a.window,,'vertical','kart_dod',',35%');

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,,
   "",,,,
   $($_a.bs)(_a.map,"
      _ct:=cur_tab(1,0);
      {? _ct<>KART_DEF
      || grp_disp(KART_DEF,'SEL',_ct=KART_DOD,1)
      ?};
      {? grp_empty(KART_DEF,'SEL')
      || return('#disable')
      ?};
      exec('format_kolumn','kart_dod',1);
      _firma:=exec('ref_firma','ustawienia');
      _ndx:=KART_DOD.index('?');
      KART_DOD.index('KART_DOD');
      KART_DOD.prefix(_firma,KART_DEF.ref(),OSOBA.ref());
      KART_DOD.index('KART_DOX');
      KART_DOD.prefix(_firma,KART_DEF.ref(),OSOBA.ref());
      KART_DOD.index(_ndx);
      KART_DOD.prefix(_firma,KART_DEF.ref(),OSOBA.ref())
   "),
   $($_a.as)(_a.map,"exec('format_kolumn','kart_dod')"),
   ,1,_a.mode
);

~~


\pkd_conf_nwu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia kartotekę wniosków o urlop.
::       Czynność jest obsługiwana w szczególny sposób, ze względu na odmienne od pozostałych czynności założenia.
::       * Okno z wnioskami prezentowane jest jako zakładka w obszarze (podobnie jak w przypadku innych czynności).
::       * Parametrem wejściowym nie jest ani P ani OSOBA tylko NWU. To oznacza, że:
::          - Wejście w zakładkę nie może uruchamiać czynności.
::          - W oknie wertowania brak jest akcji Zakończ.
::          - Tabalą rekordu kluczowego jest NWU, czego nasz mechanizm nie obsługuje.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'DATAX' || 'DATA' ?};
{? ~_a.init(_a,NWU,_ind,'WER','','','PKD_EZK_ORWN',,NWU,,1)
|| return()
?};

_a.prolog+="
   NWU.cntx_psh();
   NWU.win_fml('WER',,'D',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
";
_a.epilog+="NWU.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wnioski o urlop'@,
      $("_ag:='';"+
        "{? NWU.N<>null() | NWU.OS_N<>null()"+
        "|| _ag+='UWO'"+
        "|? NWU.AZ<>'T' & ~NWU.sel_size()"+
        "|| _ag+='WO'"+
        "|? exec('lic','#b_domain','POR')"+
        "|| _ag+='O'"+
        "?};"+
        "NWU.actions_grayed('"+_a.map.WINDOW+"',_ag)"
      ),,,,
   $($_a.bs)(_a.map,
      "  _ndx:=NWU.index('?');
::       nałożenie prefiksu na indeks (musi być taki sam, aby go było widać)
::       po to aby było można go widać w menu Kolejność
         NWU.index('OD');
         NWU.prefix(P.ref());
         NWU.index('ROD');
         NWU.prefix(P.ref());
         NWU.index('ZDATA');
         NWU.prefix(P.ref());
         NWU.index('DATA');
         NWU.prefix(P.ref());
         NWU.index('DATAX');
         NWU.prefix(P.ref());
         NWU.index(_ndx);
         NWU.prefix(P.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode,'wnurl'
)


\pkd_conf_projgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Udostępnia godziny projektowe.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'OSOBAX' || 'OSOBA' ?};
{? ~_a.init(_a,PROJGD,_ind,'WER4OS','Z','Z','PKD_DOS_PRGP','PKD_DOS_PPGP')
|| return()
?};

_a.prolog+=
   "  PROJGD.cntx_psh();
      PROJGD.use('pj_g%1' [$(date()~1)+4]);
      PROJGD.win_edit('RED4OS');
      PROJGD.win_patt('RED4OS');
   ";
_a.epilog+="PROJGD.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Godziny projektowe'@,"",,,,
   $($_a.bs)(_a.map,"
         _ndx:=PROJGD.index('?');
         PROJGD.index('OSOBA');
         PROJGD.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         PROJGD.index('OSOBAX');
         PROJGD.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         PROJGD.index(_ndx);
         PROJGD.prefix(exec('ref_firma','ustawienia'),OSOBA.ref())
         "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_zalacz_z
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Udostępnia kartotekę załączników w formie załączników (dla pracownika lub osoby).
::   WE: _a [ARRAY] - Bufor konfiguracji.
::       _b [TABLE] - Uchwyt tabeli kluczowej [P/OSOBA*].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_key:={? var_pres('_b')=type_of(SYSLOG)  & (_b=P | _b=OSOBA) || _b || OSOBA ?};
{? _key=P
|| _mod:='PKD_EZK_ORZA';
   _view:='PKD_EZK_OPZA';
   _title:='Załączniki współpracownika'@
|| _mod:='PKD_DOS_PRZA';
   _view:='PKD_DOS_PPZA';
   _title:='Załączniki osoby'@
?};

{? ~_a.init(_a,ZAOH,'LP','VIEW','','',_mod,_view,_key)
|| return()
?};

_tzalacz:=params_get().tzalacz;
_tzalacz.blank();
_tzalacz.tryb:='Z';
_tzalacz.dom:=2-!_key;
_ws:=params_exec('tzalacz_mk_sel','zalacz',_a.map.MOD);

_a.prolog+=
   "  ZAOH.cntx_psh();
      exec('zaoh_nazwa_icon','zalacz','VIEW');
   ";
_a.epilog+=
   "  ZAOH.cntx_pop();
   ";
ZAOH.win_sopt(_a.map.WINDOW,'select_record_checkbox=0');
_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,_title,
   $("params_set(_par:=params_get());
      _tzalacz:=_par.tzalacz;
      grp_disp(_tzalacz.ZALACZ.TAB,'"+_ws+"')
   "),,,,
   $($_a.bs)(_a.map,
      $("_tzalacz:=_par.tzalacz;
         _tzalacz.tryb:='Z';
         _tzalacz.dom:='"+(2-!_key)+"';
         _tzalacz.ZALACZ.ws:='"+_ws+"';
         ZALACZ.cntx_psh();
         ZALACZ.index('NAG');
         ZALACZ.prefix();
         ZAOH.tr_root('"+_a.map.WINDOW+"',1,0,#exec('zaoh_init','zalacz','"+exec('zaoh_path','zalacz','G0Z')+"'));
         ~~
      ")
   ),
   $($_a.as)(_a.map,
      "  ZALACZ.cntx_pop();
         {? _a
         || _par.tzalacz.blank()
         ?}
      "
   ),,,
   _a.mode,
   _id:='zaoh_view'
);

_a.table.tab_splt(_a.window,,'vertical','zalaczdp',',33%');
_a.table.grp_sel(_a.window,_tzalacz.ZALACZ.TAB,_ws,,
   $("params_set(params_get());
      grp_disp("+_a.map.TABLE+",'"+_a.map.WINDOW+"',0)
   "),,,,
   $("{? grp_empty('"+_id+"')
      || return('#disable')
      ?};
      _par:=params_get();
      _tzalacz:=_par.tzalacz;
      _tzalacz.tryb:='Z';
      _tzalacz.dom:='"+(2-!_key)+"';
      _tzalacz.ZALACZ.ws:='"+_ws+"';
      params_exec('tzalacz_win_edit','zalacz');
      params_exec('tzalacz_fill','zalacz')
   "),
   "  {? _a
      || _par:=params_get();
         _tzalacz:=_par.tzalacz;
         _tzalacz.blank()
      ?}
   ",,,
   _a.mode
);
~~


\pkd_conf_zalacz_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Udostępnia kartotekę załączników w formie dokumentacji pracowniczej (dla pracownika lub osoby).
::   WE: _a [ARRAY] - Bufor konfiguracji.
::       _b [TABLE] - Uchwyt tabeli kluczowej [P/OSOBA*].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_key:={? var_pres('_b')=type_of(SYSLOG)  & (_b=P | _b=OSOBA) || _b || OSOBA ?};
{? _key=P
|| _mod:='PED_EZK_REDP';
   _view:='PED_EZK_PEDP';
   _title:='Dokumentacja pracownicza'@

:: Obecnie "Dokumentacja pracownicza" z poziomu OSOBA nie jest obsługiwana.
|| _mod:='';
   _view:='';
   _title:='Dokumentacja pracownicza'@
?};

{? ~_a.init(_a,ZAOHI,'OSLP','WER','','',_mod,_view,_key)
|| return()
?};

_tzalacz:=params_get().tzalacz;
_tzalacz.blank();
_tzalacz.tryb:='D';
_tzalacz.dom:=2-!_key;
_ws:=params_exec('tzalacz_mk_sel','zalacz',_a.map.MOD);

_a.prolog+=
   "  ZAOHI.cntx_psh();
      exec('zaohi_config','zalacz','"+_a.map.WINDOW+"',"+_a.map.KEY_TAB+");
   ";
_a.epilog+=
   "  ZAOHI.cntx_pop();
   ";
ZAOHI.win_sopt(_a.map.WINDOW,'select_record_checkbox=0');
_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,_title,
   $("params_set(_par:=params_get());
      _tzalacz:=_par.tzalacz;
      grp_disp(_tzalacz.ZALACZ.TAB,'"+_ws+"')
   "),,,,
   $($_a.bs)(_a.map,
      $("_tzalacz:=_par.tzalacz;
         _tzalacz.tryb:='D';
         _tzalacz.dom:='"+(2-!_key)+"';
         _tzalacz.ZALACZ.ws:='"+_ws+"';
         ZALACZ.cntx_psh();
         ZALACZ.index('NAG');
         ZALACZ.prefix();
         "+{? _key=P || "{? exec('limitP','zalacz',REF.OSOBA) || return('#disable') ?};" || "" ?}+"
         ZAOHI.prefix(REF.OSOBA);
         exec('zaoh_clone','zalacz',REF.OSOBA);
         ~~
      ")
   ),
   $($_a.as)(_a.map,
      "  ZALACZ.cntx_pop();
         {? _a
         || _par.tzalacz.blank()
         ?}
      "
   ),,,
   _a.mode,
   _id:='zaohi_werp'
);

_a.table.tab_splt(_a.window,,'vertical','zalaczdp',',33%');
_a.table.grp_sel(_a.window,_tzalacz.ZALACZ.TAB,_ws,,
   $("params_set(params_get());
      grp_disp("+_a.map.TABLE+",'"+_a.map.WINDOW+"',0)
   "),,,,
   $("{? grp_empty('"+_id+"')
      || return('#disable')
      ?};
      _par:=params_get();
      _tzalacz:=_par.tzalacz;
      _tzalacz.tryb:='D';
      _tzalacz.ZALACZ.ws:='"+_ws+"';
      _tzalacz.dom:='"+(2-!_key)+"';
      params_exec('tzalacz_win_edit','zalacz');
      params_exec('tzalacz_fill','zalacz')
   "),
   "  {? _a
      || _par:=params_get();
         _tzalacz:=_par.tzalacz;
         _tzalacz.blank()
      ?}
   ",,,
   _a.mode
);
~~


\pkd_conf_bnftp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Udostępnia benefity pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'PBDX' || 'PBD' ?};
{? ~_a.init(_a,BNFTP,_ind,'WER','Z','Z','POR_BNF_RPRC','POR_BNF_PPRC',P,,1)
|| return()
?};

_a.prolog+=
   "  BNFTP.cntx_psh();
      BNFTP.win_edit('RED');
      BNFTP.win_patt('WZO');
      BNFTP.win_fml('WER',,'BNFTT','AKRONIM','ICON_BEFORE',""Icon.icon_before(BNFTP.BNFTT().IKONA)"");
      BNFTP.win_efml('RED',,'BNFTT','AKRONIM','ICON_BEFORE',""Icon.icon_before(BNFTP.BNFTT().IKONA)"");
   ";
_a.epilog+="BNFTP.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Benefity pracownika'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=BNFTP.index('?');
::       nałożenie prefiksu na indeks (musi być taki sam, aby go było widać)
::       po to aby było można go widać w menu Kolejność
         BNFTP.index('PBD');
         BNFTP.prefix(P.ref());
         BNFTP.index('PBDX');
         BNFTP.prefix(P.ref());
         BNFTP.index(_ndx);
         BNFTP.prefix(P.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_p_dodinf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Udostępnia dane dodatkowe pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_key_arr:='_tab:=obj_new(2); _tab[1]:=P.uidref(); _tab[2]:=SLO_KOD.uidref(); _tab';
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'PTRX' || 'PTR' ?};
{? ~_a.init(_a,P_DODINF,_ind,'WER','Z','Z','PKD_EZK_ORDI','PKD_EZK_OPDI',P,_key_arr,1)
|| return()
?};

_a.prolog+="
   P_DODINF.cntx_psh();
   P_DODINF.win_edit('RED');
   P_DODINF.win_patt('RED');
";
_a.epilog+="P_DODINF.cntx_pop();";

_a.table.grp_sel(_a.window,SLO_KOD,'SLO2','Informacje dodatkowe'@,
   "  params_set(_par:=params_get());
      _par.pdodinf.SLO_KOD:=SLO_KOD.ref();
      {? cur_tab(1,0)=SLO_KOD
      || grp_disp(P_DODINF,'WER')
      ?}
   ",,,,
   "  params_set(_par:=params_get());
      SLO_TYP.cntx_psh();
      SLO_TYP.prefix();
      SLO_TYP.seek(_par.pdodinf.SLO_TYP);
      _ndx:=SLO_KOD.index('?');
      SLO_KOD.index('KOD');
      SLO_KOD.prefix(_par.pdodinf.SLO_TYP);
      SLO_KOD.index(_ndx);
      SLO_KOD.prefix(_par.pdodinf.SLO_TYP);
      {? SLO_KOD.ref()<>_par.pdodinf.SLO_KOD
      || SLO_KOD.seek(_par.pdodinf.SLO_KOD)
      ?}
   ",
   "SLO_TYP.cntx_pop()",,,
   _a.mode
);

_a.table.tab_splt(_a.window,,'vertical','p_dodinf');

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,,,,,,
   $($_a.bs)(_a.map,"
      grp_disp(SLO_KOD,'SLO2',cur_tab(1,0)=P_DODINF,1);
      {? grp_empty(SLO_KOD,'SLO2')
      || return('#disable')
      ?};
      _ndx:=P_DODINF.index('?');
::    nałożenie prefiksu na indeks (musi być taki sam, aby go było widać)
::    po to aby było można go widać w menu Kolejność
      P_DODINF.index('PTR');
      P_DODINF.prefix(P.ref(),SLO_KOD.ref());
      P_DODINF.index('PTRX');
      P_DODINF.prefix(P.ref(),SLO_KOD.ref());
      P_DODINF.index(_ndx);
      P_DODINF.prefix(P.ref(),SLO_KOD.ref())
   "),
   $($_a.as)(_a.map),,
   1,
   _a.mode
)


\generowanie_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Okno do wyboru rodzaju generowanych załączników
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

_tab:=tab_tmp(1,'SKROT','STRING[10]','Skrót','OPIS','STRING[100]','Opis','FORMULA','STRING[70]','Formuła do wykonania');
_add:="_a.SKROT:=_b; _a.OPIS:=_c; _a.FORMULA:=_d; _a.add()";
_wyb:=_tab.mk_sel('Generowanie załączników'@,,0,'generowaniezal',,,10,,'U');
_tab.win_fld(_wyb,,'SKROT',,,10,,1,'Skrót'@);
_tab.win_fld(_wyb,,'OPIS',,,100,,1,'Opis'@);
_tab.win_act(_wyb,0,'Formuła','Wybierz'@@,,,"($(cur_tab().FORMULA))()",,1,,,,'W');
_tab.win_btn(_wyb,'text=%1,panel=bottom,align=end'['&OK'@],'menu:W');
_tab.win_btn(_wyb,'text=%1,panel=bottom,align=end'['&Anuluj'@],'key:Esc');
_tab.win_sel(_wyb);

_act_uid:='PKD_ZES_ZGIO';
{? exec('chk_role','#b__box',OPERATOR.USER,_act_uid)
|| _fml:="exec('np_run','#b__box','"+_act_uid+"')";
   _add(_tab,'GIODO','Dokumenty GIODO'@,_fml)
?};

{? _tzalacz.lic_PED
|| _act_uid:='PKD_ZES_ZECP';
   {? exec('chk_role','#b__box',OPERATOR.USER,_act_uid)
   || _fml:="exec('np_run','#b__box','"+_act_uid+"')";
      _add(_tab,'ECP','Karty ewidencji czasu pracy'@,_fml)
   ?};

   _act_uid:='PKD_ZES_ZNWU';
   {? exec('chk_role','#b__box',OPERATOR.USER,_act_uid)
   || _fml:="exec('np_run','#b__box','"+_act_uid+"')";
      _add(_tab,'NWU','Wnioski urlopowe'@,_fml)
   ?};

   _act_uid:='PKD_ZES_ZEDO';
   {? exec('chk_role','#b__box',OPERATOR.USER,_act_uid)
   || _fml:="exec('np_run','#b__box','"+_act_uid+"')";
      _add(_tab,'EDOKUM','Wnioski kadrowe'@,_fml)
   ?}

?};

_tab.select()


\uprawnieniawrap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Sprawdzenie czy użytkownik ma uprawnienia do danych, które ma drukować.
::   WE: _a - opis uprawnienia
::       _b... - lista wymaganych uprawnień
::   WY: '' - kontynuacja lub wartość nie pusta treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
{? _<2
|| _kom:='\nNie podano wymaganych parametrów funkcji dotyczących uprawnień.'@
|| _kom:='';
   {! _ii:=2.._
   |! {? ~exec('chk_role','#b__box',OPERATOR.USER,_[_ii])
      || _kom:='\n- '+_a
      || return('')
      ?}
   !}
?};
_kom


\par_wydr_ddp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Okienko do edycji informacji z datami i pytaniem.
::   WE: [_a] [STRING] - tytuł okienka
::       [_b] [RULE]   - warunek sprawdzający wypełnienie pól po zaakceptowaniu okna
::       [_c] [DATE]   - wartość początkowa daty
::       [_d] [STRING] - opis dla pola _b
::       [_e] [RULE]   - formuła dla pola _b, jeżeli wartość pusta to pole niewymagane
::       [_f] [DATE]   - wartość początkowa daty
::       [_g] [STRING] - opis dla pola _f
::       [_h] [RULE]   - formuła dla pola _f, jeżeli wartość pusta to pole niewymagane
::       [_i] [STRING] - pytanie, zostanie przedstawione w formie radio-buttons
::       [_j] [STRING] - opis dla pierwszego wyboru
::       [_k] [STRING] - opis dla drugiego wyboru
::       [_l] [NUMBER] - wartość początkowa pola typu radio-buttons
::       [_m] [NUMBER] - 1 blokowanie pól do edycji gdy _tab.ASK=0
::       [_n] [NUMBER] - rok
::       [_o] [RULE]   - formuła dla pola _n, jeżeli wartość pusta to pole niewymagane
::       [_p] [NUMBER] - miesiąc
::       [_q] [RULE]   - formuła dla pola _p, jeżeli wartość pusta to pole niewymagane
::       [_r] [STRING] - nazwa dla pola check-box
::       [_s] [STRING] - etykieta dla pola check-box
::       [_t] [NUMBER] - wartość domyślna dla pola _r
::   WY: tabela z wybranymi parametrami
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || _a:='' ?};
{? var_pres('_b')<>type_of("") || _b:="" ?};
{? var_pres('_c')<>type_of(#0) || _c:=date(,,1) ?};
{? var_pres('_d')<>type_of('') || _d:='' ?};
{? var_pres('_e')<>type_of("") || _e:="" ?};
{? var_pres('_f')<>type_of(#0) || _f:=date(,,0) ?};
{? var_pres('_g')<>type_of('') || _g:='' ?};
{? var_pres('_h')<>type_of("") || _h:="" ?};
{? var_pres('_i')<>type_of('') || _i:='' ?};
{? var_pres('_j')<>type_of('') || _j:='Nie' ?};
{? var_pres('_k')<>type_of('') || _k:='Tak' ?};
{? var_pres('_l')<>type_of(0) || _l:=0 ?};
{? var_pres('_m')<>type_of(0) || _m:=0 ?};
{? var_pres('_n')<>type_of(0) || _n:=0 ?};
{? var_pres('_o')<>type_of("") || _o:="" ?};
{? var_pres('_p')<>type_of(0) || _p:=0 ?};
{? var_pres('_q')<>type_of("") || _q:="" ?};
{? var_pres('_r')<>type_of('') || _r:='' ?};
{? var_pres('_s')<>type_of('') || _s:='' ?};
{? var_pres('_t')<>type_of(0) || _t:=0 ?};

_tab:=tab_tmp(,
   'OD','DATE',_d,
   'DO','DATE',_g,
   'ASK','INTEGER','Pytanie radio-button',
   'ROK','INTEGER','Rok'@,
   'MC','INTEGER','Miesiąc'@,
   'BOX','INTEGER','Pytanie check-box'
);
_red:=_tab.mk_edit(_a);
_tab.win_esep(_red,'Parametry wydruku'@);
_tab.ASK:=_l;
_tab.BOX:=_t;

{? +_i
|| _tab.win_efld(_red,,'ASK',,,,,,_i,,,'radio-buttons',,_j,"0",_k,"1")
?};

{? _m
|| _tab.fld_fml('ASK','AFTER_EDIT',
   "  params_set(_par:=params_get());
      {? _par.tab.ASK=0
      || _par.tab.OD:=_par.tab.DO:=#0;
         _par.tab.ROK:=_par.tab.MC:=0
      || _par.tab.OD:=_par.OD;
         _par.tab.DO:=_par.DO;
         _par.tab.ROK:=_par.ROK;
         _par.tab.MC:=_par.MC
      ?};
   _par.tab.fld_fml('OD','BEFORE_EDIT',\"params_get().tab.ASK\");
   _par.tab.efld_opt(_par.red,'enable='+$_par.tab.ASK,,'OD');
   _par.tab.fld_fml('DO','BEFORE_EDIT',\"params_get().tab.ASK\");
   _par.tab.efld_opt(_par.red,'enable='+$_par.tab.ASK,,'DO');
   _par.tab.fld_fml('ROK','BEFORE_EDIT',\"params_get().tab.ASK\");
   _par.tab.efld_opt(_par.red,'enable='+$_par.tab.ASK,,'ROK');
   _par.tab.fld_fml('MC','BEFORE_EDIT',\"params_get().tab.ASK\");
   _par.tab.efld_opt(_par.red,'enable='+$_par.tab.ASK,,'MC')")
?};
_tab.fld_fml('OD','AFTER_EDIT',_e);
_tab.fld_fml('DO','AFTER_EDIT',_h);
_tab.fld_fml('ROK','AFTER_EDIT',_o);
_tab.fld_fml('MC','AFTER_EDIT',_q);
{? +_d
|| _tab.OD:=_c;
   _tab.win_efld(_red,,'OD',,,11,,,_d);
   _tab.efld_opt(_red,'mark='+$(_e<>"")+',enable='+${? _m || _tab.ASK || 1 ?},,'OD')
?};
{? +_g
|| _tab.DO:=_f;
   _tab.win_efld(_red,,'DO',,,11,,,_g);
   _tab.efld_opt(_red,'mark='+$(_h<>"")+',enable='+${? _m || _tab.ASK || 1 ?},,'DO')
?};
{? _n
|| _tab.ROK:=_n;
   _tab.win_efld(_red,,'ROK',,,11,,,'Rok'@);
   _tab.efld_opt(_red,'mark='+$(_o<>"")+',enable='+${? _m || _tab.ASK || 1 ?},,'ROK')
?};
{? _p
|| _tab.MC:=_p;
   _tab.win_efld(_red,,'MC',,,11,,,'Miesiąc'@);
   _tab.efld_opt(_red,'mark='+$(_q<>"")+',enable='+${? _m || _tab.ASK || 1 ?},,'MC')
?};
{? +_r
|| _tab.win_efld(_red,,'BOX',,,,,,_r,,,'check-box','check_label="%1"'[_s],"1","0")
?};
exec('ok_esc','#window',_tab,_red);
_tab.win_edit(_red);
params_set('tab',_tab,'red',_red,'OD',_c,'DO',_f,'ROK',_n,'MC',_p);
{? _tab.edit(_b) || _tab.add() ?};
_tab


\p_wkartapracywewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła pobiera od użytkownika parametry wykorzystywane w p_wkartapracywewy.rpi oraz podczas generowania
::       załączników.
::   WE: [_a] [STRING] - Zakres parametrów:
::                         'P' - Parametry podstawowe [domyślnie].
::                         'W' - Parametry wszyskie.
::                       Opis i zakres parametrów:
::                       [ ] Czy parametr dostępny w zakresie podstawowym?
::                       [x] Sposób prezentacji wejść oraz wyjść - radio-button 0/1 [d/p]
::                       [x] Rok
::                       [x] Miesiąc
::                       [ ] Nadpisywanie (sposób postępowania, gdy załącznik istnieje) - radio-button
::       [_b] [STRING] - Prefiks tytułu okna z parametrami [domyślnie:'']
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & _a='W' || _a || 'P' ?};
_hdr:={? var_pres('_b')=type_of('') & +_b || '%1 - ' [_b] || '' ?};

_tresc:='p_wkartapracywewy';

:: Na podstawie poniższej tabeli tymczasowej w raporcie tworzona jest zmienna globalna (!?) -
:: lepiej nie zmieniać akronimów pól.
_PAR:=tab_tmp(1
   ,'ASK','INTEGER','Sposób prezentacji wejść oraz wyjść'@
   ,'ROK','INTEGER','Rok'
   ,'MC','INTEGER','Miesiąc'@
   ,'OVR','INTEGER','Sposób postępowania w przypadku, gdy załącznik już istnieje'@
);

_we:=_PAR.mk_edit('%1%2' [_hdr,'Miesięczna karta ewidencji czasu pracy'@],,'#gen_wnu_par');
_PAR.win_esep(_we,'Parametry'@);
_PAR.win_efld(_we,,'ASK',,,,,,,
   ,'W jaki sposób prezentować wejścia oraz wyjścia'@
   ,'radio-buttons','left_label=1'
   ,'wg dnia pracy'@,"0"
   ,'wg doby pracowniczej'@,"1"
);
_PAR.win_efld(_we,,'ROK');
_PAR.win_efld(_we,,'MC');
{? _tryb='W'
|| _PAR.win_efld(_we,,'OVR',,,,,,'Sposób postępowania, w przypadku gdy załącznik już istnieje:'@,
      ,'Jak postąpić w sytuacji gdy plik był już utworzony.'@,'radio-buttons','left_label=1'
      ,'Pozostaw wcześniej utworzoną wersję (nie twórz nowej)'@,"0"
      ,'Zastąp nową wersją, jeżeli poprzednia nie została pobrana'@,"1"
      ,'Zawsze zastępuj'@,"2"
      ,'Dołącz nową wersję'@,"3"
   )
?};
exec('ok_esc','#window',_PAR,_we);
_PAR.win_edit(_we);
_PAR.efld_opt(_we,'mark=1',,'ROK');
_PAR.efld_opt(_we,'mark=1',,'MC');

_PAR.blank();
_PAR.ASK:=-exec('get','#profile',,_tresc,'prezentacja wejść-wyjść')='p';
_PAR.ROK:=date()~1;
_PAR.MC:=date~2;
{? _PAR.edit(
      $("{? cur_tab().ROK<1900
         || FUN.emsg('"+'Wymagane poprawne wypełnienie pola "%1"'@['Rok'@]+"'); 'ROK'
         |? cur_tab().MC<1 | cur_tab().MC>12
         || FUN.emsg('"+'Wymagane poprawne wypełnienie pola "%1"'@['Miesiąc'@]+"'); 'MC'
         || 1
         ?}")
   ) & _PAR.add()
|| exec('set','#profile',,_tresc,'prezentacja wejść-wyjść',{? _PAR.ASK || 'P' || 'D' ?})
?};

_PAR


\osoba_finfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.42]
:: OPIS: Zwraca jednostkę organizacyjną lub formę zatrudnienia dla osoby (o ile jest w którejś zatrudniona).
::       Wykorzystywane w weryfikacji uprawnień po stronie ElasticSearch.
::   WE: _a - wskazanie na osobę
::       _b - 0/1 [Jedn. org. / Forma zatr.]
::       _c - 0/1 [SYMBOL | KOD / Pełen opis]
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<>type_of(0) || _b:=0 || _b ?};
{? var_pres('_c')<>type_of(0) || _c:=0 || _c ?};
_ret:='';
P.cntx_psh();
P.index('OSOBA');
P.prefix(_a);
_loop:=P.first();
{!
|? _loop
|! {? P.ZA='T'
   || {? ~_b
      || {? ~_c
         || _ret+=P.WYDZIAL().SYMBOL+','
         || _ret+=P.WYDZIAL().OPIS+', '
         ?}
      || {? ~_c
         || _ret+=P.F_ZATR().KOD+','
         || _ret+=P.F_ZATR().OPIS+', '
         ?}
      ?}
   ?};
   _loop:=P.next()
!};
P.cntx_pop();

{? _ret<>''
|| {? _c || _ret-2 || _ret ?}
|| 'Brak,'
?}


\get_fzatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.42]
:: OPIS: Zwraca listę kodów form współpracy do których ma uprawnienia zalogowany użytkownika (na potrzeby ES)
::   WE: _a - wskazanie na zalogowanego użytkownika
::   WY: lista kodów form współpracy [string]
::----------------------------------------------------------------------------------------------------------------------
_list:='';
USERS_FZ.cntx_psh();
USERS_FZ.index('FK_USR');
USERS_FZ.prefix(_a);

_loop:=USERS_FZ.first();
{!
|? _loop
|! {? USERS_FZ.DOSTEP='T'
   || _list+=USERS_FZ.F_ZATR().KOD+','
   ?};
   _loop:=USERS_FZ.next()
!};
USERS_FZ.cntx_pop();
'Brak,'+_list


\get_odd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AB [19.42]
:: OPIS: Zwraca listę skrótów jednostek księgowych do których ma uprawnienia zalogowany użytkownika (na potrzeby ES)
::   WE: _a - wskazanie na zalogowanego użytkownika
::   WY: lista kodów jednostek księgowych [string]
::----------------------------------------------------------------------------------------------------------------------
_list:='';
exec('Perm','#object');
{? Perm.hasFull('FJKS',_a)
|| ODD.cntx_psh();
   ODD.index('ODDZIALY');
   ODD.prefix(REF.FIRMA);
   _loop:=ODD.first();
   {!
   |? _loop
   |! _list+=ODD.OD+',';
      _loop:=ODD.next()
   !};
   ODD.cntx_pop()
|| USERSDEP.cntx_psh();
   USERSDEP.index('USERSDEP');
   USERSDEP.prefix(REF.FIRMA,_a);
   _loop:=USERSDEP.first();
   {!
   |? _loop
   |! _list+=USERSDEP.DEPT().OD+',';
      _loop:=USERSDEP.next()
   !};
   USERSDEP.cntx_pop()
?};
'Brak,'+_list


\get_udskl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.42]
:: OPIS: Zwraca listę symboli jednostek organizacyjnych do których ma uprawnienia zalogowany użytkownik (na potrzeby ES)
::   WE: _a - wskazanie na zalogowanego użytkownika
::   WY: tabela z lista symboli jedn. organizacyjnych.
::----------------------------------------------------------------------------------------------------------------------
_list:='';
UDB_UPR.cntx_psh();
UDB_UPR.index('FK_USR');
UDB_UPR.prefix(_a,'T');
_loop:=UDB_UPR.first();
{!
|? _loop
|! _list+=UDB_UPR.UD_SKL().SYMBOL+',';
   _loop:=UDB_UPR.next()
!};
UDB_UPR.cntx_pop();
'Brak,'+_list


\get_zwsdos_perm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.42]
:: OPIS: Zwraca listę kodów czynności związanych z obszarem ZWS_DOS do których ma uprawnienia zalogowany użytkownik
::       (na potrzeby ES).
::   WE: _a - wskazanie na zalogowanego użytkownika
::   WY: string [lista kodów czynności]
::----------------------------------------------------------------------------------------------------------------------
_list:='';

{? exec('chk_role','#b__box',_a,'PKD_DOS_PRRB') | exec('chk_role','#b__box',_a,'PKD_DOS_PPRB')
|| _list+='PKD_DOS_RB,'
?};
{? exec('chk_role','#b__box',_a,'PKD_DOS_PRRO') | exec('chk_role','#b__box',_a,'PKD_DOS_PPRD')
|| _list+='PKD_DOS_RD,'
?};
{? exec('chk_role','#b__box',_a,'PKD_DOS_PRUS') | exec('chk_role','#b__box',_a,'PKD_DOS_PPUS')
|| _list+='PKD_DOS_US,'
?};
{? exec('chk_role','#b__box',_a,'PKD_DOS_PRDU') | exec('chk_role','#b__box',_a,'PKD_DOS_PPDU')
|| _list+='PKD_DOS_DU,'
?};
{? exec('chk_role','#b__box',_a,'PKD_DOS_PRSW') | exec('chk_role','#b__box',_a,'PKD_DOS_PPSW')
|| _list+='PKD_DOS_SW,'
?};
{? exec('chk_role','#b__box',_a,'PKD_DOS_PRWY') | exec('chk_role','#b__box',_a,'PKD_DOS_PPWY')
|| _list+='PKD_DOS_WY,'
?};

: ZWS
{? exec('chk_role','#b__box',_a,'ZWS_DOS_PRDA') | exec('chk_role','#b__box',_a,'ZWS_DOS_PPDA')
|| _list+='ZWS_DOS_DA,'
?};

{? _list=''
|| {? exec('chk_role','#b__box',_a,'ZWS_DOS_PRDO') | exec('chk_role','#b__box',_a,'ZWS_DOS_PPDO')
   || _list:='ZWS_DOS_DO,'
   ?};
   _list
|| _list+'ZWS_DOS_DO,'
?}


\zwsdosLinkselect
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.42]
:: OPIS: Rozbudowana "select" dla obszaru ZWS_DOS (okienko grupowe) z uwzględnieniem wejścia przez wynik wyszukiwarki
::       danych.
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_link:=_par.link;
_tab:=ref_tab(_link);

_tab.cntx_psh();
{? _tab=OSOBA & _tab.seek(_link)
|| _tab.select(,1,5)
|? _tab=OS_ADRES & _tab.seek(_link)
|| {? OSOBA.seek(_tab.OSOBA)
   || OSOBA.select(,1,5);
      tab_sel(1,'bottom')
   ?}
|? _tab=PKO & _tab.seek(_link)
|| {? OSOBA.seek(_tab.OSOBA)
   || OSOBA.select(,1,5);
      tab_sel(2,'bottom')
   ?}
|? _tab=RD & _tab.seek(_link)
|| {? OSOBA.seek(_tab.OSOBA)
   || OSOBA.select(,1,5);
      tab_sel(5,'bottom')
   ?}
|? _tab=OS_US & _tab.seek(_link)
|| {? OSOBA.seek(_tab.OSOBA)
   || OSOBA.select(,1,5);
      tab_sel(3,'bottom')
   ?}
|? _tab=P_INFO & _tab.seek(_link)
|| {? OSOBA.seek(_tab.OSOBA)
   || OSOBA.select(,1,5);
      tab_sel(4,'bottom')
   ?}
|? _tab=STAZ & _tab.seek(_link)
|| {? OSOBA.seek(_tab.OSOBA)
   || OSOBA.select(,1,5);
      tab_sel(6,'bottom')
   ?}
|? _tab=OS_SZKOL & _tab.seek(_link)
|| {? OSOBA.seek(_tab.OSOBA)
   || OSOBA.select(,1,5);
      tab_sel(7,'bottom')
   ?}
|? _tab=UPR_ZAWO & _tab.seek(_link)
|| {? OSOBA.seek(_tab.OSOBA)
   || OSOBA.select(,1,5);
      tab_sel(12,'bottom')
   ?}
?};
_tab.cntx_pop()


\zwsdosLinkactivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.42]
:: OPIS: Aktywuje zwiazana z linkiem zakładkę i ustawia się na właściwym rekordzie.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_link:=params_get().link;
_tab:=ref_tab(_link);
{? _link<>'' & _tab=OS_ADRES
|| win_activate('adr');
   win_set('cur_row_pos=1',_tab,'WER',1,'bottom')
|? _link<>'' & _tab=PKO
|| win_activate('pko');
   win_set('cur_row_pos=1',_tab,'WER',2,'bottom')
|? _link<>'' & _tab=RD
|| win_activate('rdz');
   win_set('cur_row_pos=1',_tab,'WER',5,'bottom')
|? _link<>'' & _tab=OS_US
|| win_activate('os_us');
   win_set('cur_row_pos=1',_tab,'WER',3,'bottom')
|? _link<>'' & _tab=P_INFO
|| win_activate('p_info');
   win_set('cur_row_pos=1',_tab,'WER',4,'bottom')
|? _link<>'' & _tab=STAZ
|| win_activate('staz');
   win_set('cur_row_pos=1',_tab,'WER',6,'bottom')
|? _link<>'' & _tab=OS_SZKOL
|| win_activate('szkol');
   win_set('cur_row_pos=1',_tab,'WER',7,'bottom')
|? _link<>'' & _tab=UPR_ZAWO
|| win_activate('uprzawo');
   win_set('cur_row_pos=1',_tab,'WER',12,'bottom')
?}


\pkdezkLinkSelect
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [22.26]
:: OPIS: Rozbudowany "select" dla obszaru PKD_EZK (okienko grupowe) z uwzględnieniem wejścia przez wynik wyszukiwarki
::       danych.
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
params_set(_par:=params_get());
_link:=_par.link;
_TAB:=ref_tab(_link);

_TAB.cntx_psh();
{? _TAB=H_ODDE || H.cntx_psh() ?};
{? (_TAB=N | _TAB=BDO | _TAB=H_UM | _TAB=NWU | _TAB=H_ODDE) & _TAB.seek(_link)
|| {? (_TAB=H_ODDE & P.seek(_TAB.H().P)) |
      P.seek(_TAB.P)
   ||
::    Ustawiamy się na odpowiedniej formie współpracy
      _id:='F_ZATR';
      _args:=__PARSES.args(_id);
      _args.REF:=P.F_ZATR;
      __PARSES.setVal(_id,_args);

      _result:=P.select(,1,5)
   ?}
?};
{? _TAB=H_ODDE || H.cntx_pop() ?};
_TAB.cntx_pop();

_result


\pkdezkLinkActivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [22.26]
:: OPIS: Aktywacja zakładki związanej z linkiem
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());

_MAP:=_par.cfg.map;
_MAP.cntx_psh();
_MAP.prefix();

_link:=_par.link;
_TAB:=ref_tab(_link);
_TAB.cntx_psh();
{? _TAB.seek(_link)
|| {? _MAP.find_tab(,'TABLE',,'=',!_TAB)
   || win_set('cur_row_pos=1',_TAB,_MAP.WINDOW,_MAP.NRTAB,'bottom')
   ?};
   {? _TAB=N
   || win_activate('nieob')
   |? _TAB=BDO
   || win_activate('badlek')
   |? _TAB=H_UM
   || win_activate('umprac')
   |? _TAB=NWU
   || win_activate('wnurl')
   |? _TAB=H_ODDE
   || win_activate('oddel')
   ?}
?};
_TAB.cntx_pop();
_MAP.cntx_pop();
1


\osoba_giodo_es
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Zwraca operatora, który jako ostatni modyfikował dane wskazanej osoby (na potrzeby uprawnień do ES) - osoby
::       zwolnione/zatrudniane
::   WE: _a - wskazanie na osobę.
::   WY: GIODO.OPER
::----------------------------------------------------------------------------------------------------------------------
:: w przyszłości formułka może być rozszerzona o inne warunki
_jest:=0;
P.cntx_psh();
P.index('OSOBA');
P.prefix(_a);
{? P.first()
|| {!
   |? _jest:=P.ZA='T';
      ~_jest & P.next()
   !}
?};
P.cntx_pop();
_oper:='EMPTY';
{? ~_jest
|| GIODO.cntx_psh();
   GIODO.index('GIODDATA');
   GIODO.prefix(_a);
   _oper:={? GIODO.last() || GIODO.OPER || 'NOOPER' ?};
   GIODO.cntx_pop()
?};
_oper


\pkd_conf_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [20.42]
:: OPIS: Udostępnia statusy dla wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'NAZWAX' || 'NAZWA' ?};
{? ~_a.init(_a,P_STAT,_ind,'WER','Z','Z',,'PKD_EZK_OPSP',P)
|| return()
?};

_a.prolog+="
   P_STAT.cntx_psh();
";
_a.epilog+="
   P_STAT.cntx_pop();
";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Statusy dla pracownika'@,"",,,,
   $($_a.bs)(_a.map,"
      USERS.cntx_psh();
      O.cntx_psh();
      _ndx:=P_STAT.index('?');
::    nałożenie prefiksu na indeks (musi być taki sam, aby go było widać)
::    po to aby było można go widać w menu Kolejność
      P_STAT.index('KOD');
      P_STAT.prefix(P.ref());
      P_STAT.index('NAZWA');
      P_STAT.prefix(P.ref());
      P_STAT.index('NAZWAX');
      P_STAT.prefix(P.ref());
      P_STAT.index('TECH');
      P_STAT.prefix(P.ref());
      P_STAT.index(_ndx);
      P_STAT.prefix(P.ref())
   "),
   $($_a.as)(_a.map,"USERS.cntx_pop(); O.cntx_pop()"),
   ,,_a.mode,'p_stat'
)


\nwu_to_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Formuła przenosząca zaakceptowane wnioski urlopowe do nieobecności
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());

set_help(exec('set_help','#help','pkd_grp_d_wnioski_u'));

:: wybór zakresu dat
_PAR:=tab_tmp(,'OD','DATE','Data od'@,
               'DO','DATE','Data do'@,
               'FILTER','INTEGER','Filter'@);
_PAR.fld_fml('FILTER','AFTER_EDIT',"
   _PAR:=cur_tab();
   _we:=_PAR.win_edit('?');
   {? _PAR.FILTER
   || _PAR.efld_opt(_we,'enable=1,mark=1',,'OD');
      _PAR.efld_opt(_we,'enable=1,mark=1',,'DO')
   || _PAR.efld_opt(_we,'enable=0,mark=0',,'OD');
      _PAR.efld_opt(_we,'enable=0,mark=0',,'DO')
   ?}
");
_we:=_PAR.mk_edit('Podaj dane'@,,'nwu_zakr_dat');
_PAR.win_esep(_we,'Zakres wniosków'@);
_PAR.win_efld(_we,,'FILTER',,,,,,'Wnioski urlopowe'@,0,,'radio-buttons',,'Wszystkie'@,"0",'Wg dat'@,"1");
_PAR.win_efld(_we,,'OD',,,12,0,,,,'Data rozpoczęcia nieobecności.'@);
_PAR.win_efld(_we,,'DO',,,12,0,,,,'Data zakończenia nieobecności.'@);
{? _PAR.FILTER
|| _PAR.efld_opt(_we,'enable=1,mark=1',,'OD');
   _PAR.efld_opt(_we,'enable=1,mark=1',,'DO')
|| _PAR.efld_opt(_we,'enable=0,mark=0',,'OD');
   _PAR.efld_opt(_we,'enable=0,mark=0',,'DO')
?};
_PAR.win_ebtn(_we,'text='+'&OK'@+',btn_label_align=center,panel=bottom,align=end',"'key:F2'");
_PAR.win_ebtn(_we,'text='+'&Anuluj'@+',btn_label_align=center,panel=bottom,align=end',"'key:Esc'");
_PAR.win_edit(_we);
_PAR.OD:=date(,,1);
_PAR.DO:=date(,,0);
{? ~_PAR.edit(
      "  _PAR:=cur_tab();
         {? _PAR.FILTER
         || {? (_chk:=__CHK.record(_PAR,,'OD','DO'))<>''
            || _chk
            |? _PAR.OD<=date(0,0,0)
            || __CHK.err_fld(_PAR,'OD',1,'Wprowadzono błędną datę.'@ )
            |? _PAR.OD>_PAR.DO
            || __CHK.err_fld(_PAR,'DO',1,'Data nie może być wcześniejsza niż: \"Data od\".'@)
            || 1
            ?}
         || 1
         ?}
      "
   )
|| return()
?};

:: wybór pracowników
_where:='';
{? P_FILTER.F_ZATR().KOD='Z'
|| _where+='and NWU.OS_N IS NULL'
|| _where+='and NWU.N IS NULL'
?};
{? _PAR.FILTER
|| _where+=' and NWU.OD>=to_date(\'%1\') and NWU.DO<=to_date(\'%2\')'[$_PAR.OD,$_PAR.DO]
?};
_where+=' and P.FIRMA=\'%1\''[$exec('ref_firma','ustawienia')];

_args:=exec('wybierz_args','pracownik');
_args.DOMAIN:='PKD';
_args.F_ZATR:={? +P_FILTER.F_ZATR().KOD || P_FILTER.F_ZATR().KOD || '*T' ?};
_args.VIEW:='';
_args.SQL_WHERE:=
   'P.REFERENCE in ('
   '  select NWU.P '
   '  from NWU '
   '  join P using(NWU.P, P.REFERENCE)'
   '  where NWU.AZ=\'T\' %1'
   ')'[_where];
_args.UD_SCH:=exec('domyslny','schemat','PODZORG');
_args.UD_SKL:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
_ret:=exec('wybierz','pracownik',_args);
: wybrano kogoś?
{? _ret.P.size()=0
|| return()
?};

:: przygotowanie komunikatów
exec('KOMM','#object');
KOMM.init();
{? ~FUN.ask('Czy na pewno chcesz wprowadzić nieobecności na podstawie zaznaczonych wniosków urlopowych?'@)
|| return()
?};

:: przetwarzanie wniosków
{? _ret.P.first()
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='PKD_EZK_ORWN';
   _params.AKCJA:='WPROWADŹ';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   _params.GRUPA:='T';

   NWU.cntx_psh();
   NWU.index('ZDATA');
   {! |?
      {? P.seek(_ret.P.UID)
      || NWU.prefix(P.ref,'T');
         {? NWU.first()
         || {!
            |? {? (NWU.AZ='T' &
                  ((P_FILTER.F_ZATR().KOD='Z' & NWU.OS_N=null()) | (P_FILTER.F_ZATR().KOD<>'Z' & NWU.N=null()))) &
                  (~_PAR.FILTER | (NWU.OD>=_PAR.OD & NWU.DO<=_PAR.DO))
               || _params.UIDREF:=NWU.uidref();
                  exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'NWU',NWU.ref());
                  exec('mp_run','#b__box',_params)
               ?};
               NWU.next()
            !}
         ?}
      ?};
      _ret.P.next()
   !};
   NWU.cntx_pop()
?};

:: wyświetlenie komunikatów
KOMM.select('Raport z wprowadzania wniosku urlopowego'@);

1


\xfl_ustaw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Obsługa akcji "Rozszerzony filtr" listy współpracowników w obszarach PXX.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_exec('x_grp_ustaw_a','xfilter')


\xfl_wyczysc_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed akcją "Wyczyść filtr" listy współpracowników w obszarach PXX.
::   WE:
::   WY: 0/1 - zasadnicza akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
params_exec('x_grp_wyczysc_b','xfilter')


\xfl_wyczysc_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Akcja "Wyczyść filtr" listy współpracowników w obszarach PXX.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_exec('x_grp_wyczysc_a','xfilter')


\pkd_zat_parametry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Główna formuła - Parametry pracy (Zawierane umowy (personel)).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? __PARSES.editPar('F_ZATR','JednostkaOrganizacyjna')
|| {!
   |? ~(__PARSES.getVal('F_ZATR').REF)
   |! FUN.info('Należy uzupełnić formę współpracy.'@);
      {? ~__PARSES.editPar('F_ZATR','JednostkaOrganizacyjna')
      || return()
      ?}
   !};
   _sch:=exec('domyslny','schemat','PODZORG');
   _skl:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
   P_FILTER.UD_DEF:=exec('szukaj_ud_def','schemat',_sch,_skl).REF;
   P_FILTER.F_ZATR:=exec('tmp4dest','f_zatr',__PARSES.getVal('F_ZATR').KOD);

:: odrysuj okienko obszaru
   params_exec('pxx_odrysuj','pkd')
?}


\pxx_widok_sekcja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Zwraca kod sekcji w pliku ustawień użytkownika.
::   WE:
::   WY: kod sekcji w pliku ustawień
::----------------------------------------------------------------------------------------------------------------------
'pxx_widok_uproszczony'


\pxx_widok_uproszczony
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Sprawdzenie zastosowania widoku uproszczonego dla obszaru.
::   WE: _a STRING - kod obszaru roboczego
::   WY: 0/1 - widok rozbudowany/uproszczony
::----------------------------------------------------------------------------------------------------------------------
exec('get','#profile',,exec('pxx_widok_sekcja','pkd'),_a,'N')='T'


\pxx_widok_zmien
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Zapisuje ustawienia w widoku obszaru roboczego w pliku ustawień użytkownika.
::   WE: _a STRING - kod obszaru roboczego
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('set','#profile',,exec('pxx_widok_sekcja','pkd'),_a,{? exec('pxx_widok_uproszczony','pkd',_a) || 'N' || 'T' ?});
~~


\pxx_odrysuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Odrysowuje zawartość obszaru roboczego np. po ewentualnej zmianie parametrów.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);

{? cur_win(1,1)<>cur_win()
:: okienko umieszczone w grupie
|| {? var_pres('cfg',_par)>100 & var_pres('tab_refresh',_par.cfg)=type_of(0)
::    wymuś ukrycie/wyświetlenie zakładek
   || _par.cfg.tab_refresh:=1
   ?};
:: odrysuj zawartość z akcją "po odświeżeniu"
   grp_disp(cur_tab(1,1),cur_win(1,1),1);
:: aktualizuj tytuł obszaru
   AreaTitle.setTitle()
?};

~~


\pkd_conf_wyn_wsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JAKOLTUN [21.37]
:: OPIS: Udostępnia współczynniki do wynagrodzenia.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,WYN_WSP,'WYN_WSP','WER','Z','Z','PKD_EZK_ORWS','PKD_EZK_OPWS',P)
|| return()
?};

_a.prolog+="
   WYN_WSP.cntx_psh();
   WYN_WSP.win_edit('RED');
   WYN_WSP.win_patt('RED');
";
_a.epilog+="WYN_WSP.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Współczynniki do wynagrodzenia'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=WYN_WSP.index('?');
      WYN_WSP.index('WYN_WSP');
      WYN_WSP.prefix(P.ref());
      WYN_WSP.index(_ndx);
      WYN_WSP.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_p_gp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Udostępnia informacje o historii grupy uprawnień.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ndx:={? PAR_SKID.get(236)='T' || 'OX' || 'OD' ?};
{? ~_a.init(_a,P_GP,_ndx,'WER','Z','Z','PKD_EZK_ORHG','PKD_EZK_OPHG',P)
|| return()
?};

_a.prolog+="
   P_GP.cntx_psh();
   P_GP.win_edit('RED');
";
_a.epilog+="
   P_GP.cntx_pop();
";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Grupy uprawnień'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=P_GP.index('?');
         P_GP.index('OX');
         P_GP.prefix(P.ref());
         P_GP.index('OD');
         P_GP.prefix(P.ref());
         {? ~P_GP.size() & P.GP_DEF<>null
         || melody();
            P_GP.blank();
            P_GP.OD:=P.DZA;
            P_GP.GP_DEF:=P.GP_DEF;
            P_GP.add()
         ?};
         P_GP.index(_ndx);
         P_GP.prefix(P.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_os_zwpod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Udostępnia oświadczenia dotyczące zwolnionego przychodu dla danego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'ODATYP' || 'OADTYP' ?};

{? ~_a.init(_a,OS_ZWPOD,_ind,'WER',,,'PKD_EZK_OROS','PKD_EZK_OPOS',OSOBA)
|| return()
?};

_a.prolog+=
   "  OS_ZWPOD.cntx_psh();
      OS_ZWPOD.win_edit('RED');
      OS_ZWPOD.win_fml('WER',,'D_ZO',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   ";
_a.epilog+="OS_ZWPOD.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Oświadczenia - zwolniony przychód'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=OS_ZWPOD.index('?');
::       nałożenie prefiksu na indeks (musi być taki sam, aby go było widać)
::       po to aby było można go widać w menu Kolejność
         OS_ZWPOD.index('OADTYP');
         OS_ZWPOD.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         OS_ZWPOD.index('ODATYP');
         OS_ZWPOD.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         OS_ZWPOD.index(_ndx);
         OS_ZWPOD.prefix(exec('ref_firma','ustawienia'),OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_os_zwzal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Udostępnia wnioski podatkowe danego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: parametr 236 - Personel - przeglądanie kartotek w porządku malejącym
_ind:={? PAR_SKID.get(236)='T' || 'OS_RSAD' || 'OS_RDSA' ?};

{? ~_a.init(_a,OS_ZWZAL,_ind,'WER',,,'PKD_EZK_ORWP','PKD_EZK_OPWP',OSOBA)
|| return()
?};

_a.prolog+=
   "  OS_ZWZAL.cntx_psh();
      OS_ZWZAL.win_edit('RED');
      OS_ZWZAL.win_fml('WER',,'D_ZO',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   ";
_a.epilog+="OS_ZWZAL.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wnioski dotyczące podatków'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=OS_ZWZAL.index('?');
::       nałożenie prefiksu na indeks (musi być taki sam, aby go było widać)
::       po to aby było można go widać w menu Kolejność
         OS_ZWZAL.index('OS_RDSA');
         OS_ZWZAL.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         OS_ZWZAL.index('OS_RSAD');
         OS_ZWZAL.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         OS_ZWZAL.index(_ndx);
         OS_ZWZAL.prefix(exec('ref_firma','ustawienia'),OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_p_bi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [22.26]
:: OPIS: Udostępnia kontrolkę z analizami bi.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_uid:='BIQ_EZK_DISP';
_id:=-_uid;

_ctr:=SYSLOG.mk_ctr(,_id,,,,,_a.mode);
{? ~(exec('b_action_params_chk','#b_action',_uid) & _a.init(_a,SYSLOG,,_ctr,,,,_uid,P,,0))
|| return()
?};

SYSLOG.win_cctr(_a.map.WINDOW,_id,'@webframe');
_a.table.grp_ctr(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,_id,'Analizy BI'@,,,,,,
   $($_a.bs)(_a.map,$("exec('stat_add','st_common','A_BI','Zdarzenia kadrowe'); exec('analizy_biq_ctrl_call','pkd','#:"+_id+"','"+_id+"')")),
   $($_a.as)(_a.map),
   1,_a.mode
)


\analizy_biq_ctrl_call
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [22.26]
:: OPIS: Formułka wołająca kontrolkę umieszczoną na zakładce z Analizami BI.
::   WE: _a [STRING] - Identyfikator okna.
::       _b [STRING] - Identyfikator kontrolki.
::----------------------------------------------------------------------------------------------------------------------
exec('refreshSheet','analizy_bi','BIQ_EZK_DISP',_a,_b);
~~


\wyk_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli WYK.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? exec('lic','#b_domain','POR')
|| {? bfld('WK')<>WYK.WK
   || exec('idput_ndx','#table',OS_SZKOL,'WYK',WYK.ref())
   ?}
?};

~~


\pkd_conf_ppsf_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Udostępnia Praca poza siedzibą firmy - oświadczenia pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('is_pzd01','ppsf') || return() ?};
_ndx:={? PAR_SKID.get(236)='T' || 'PRAX' || 'PRAC' ?};
{? ~_a.init(_a,PPSF_PO,_ndx,'WER','Z','Z','PKD_EZK_ORPO','PKD_EZK_OPPO',P)
|| return()
?};

_a.prolog+="
   PPSF_PO.cntx_psh();
   PPSF_PO.win_edit('RED');
   PPSF_PO.win_patt('RED');
";
_a.epilog+="PPSF_PO.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Oświadczenia pracy poza siedzibą'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=PPSF_PO.index('?');
      PPSF_PO.index('PRAC');
      PPSF_PO.prefix(P.ref());
      PPSF_PO.index('PRAX');
      PPSF_PO.prefix(P.ref());
      PPSF_PO.index(_ndx);
      PPSF_PO.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_ppsf_adr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Udostępnia Praca poza siedzibą firmy - adresy pracy zdalnej.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('is_pzd01','ppsf') || return() ?};
_ndx:={? PAR_SKID.get(236)='T' || 'PRAX' || 'PRAC' ?};
{? ~_a.init(_a,PPSF_ADR,_ndx,'WER','Z','Z','PKD_EZK_ORAD','PKD_EZK_OPAD',P)
|| return()
?};

_a.prolog+="
   PPSF_ADR.cntx_psh();
   PPSF_ADR.win_edit('RED');
   PPSF_ADR.win_patt('RED');
   exec('ppsf_adr_eopt','ppsf',1);
";
_a.epilog+="
   exec('ppsf_adr_eopt','ppsf',0);
   PPSF_ADR.cntx_pop();
";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Adresy świadczenia pracy zdalnej'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=PPSF_ADR.index('?');
      PPSF_ADR.index('PRAC');
      PPSF_ADR.prefix(P.ref());
      PPSF_ADR.index('PRAX');
      PPSF_ADR.prefix(P.ref());
      PPSF_ADR.index(_ndx);
      PPSF_ADR.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_ppsf_zds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Udostępnia Praca poza siedzibą firmy - Praca zdalna stała.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('is_pzd01','ppsf') || return() ?};
_ndx:={? PAR_SKID.get(236)='T' || 'PRAX' || 'PRAC' ?};
{? ~_a.init(_a,PPSF_H,_ndx,'WER','Z','Z','PKD_EZK_ORZD','PKD_EZK_OPZD',P)
|| return()
?};

_a.prolog+="
   PPSF_H.cntx_psh();
   PPSF_H.win_edit('RED');
   PPSF_H.win_patt('WZO');
";
_a.epilog+="PPSF_H.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Praca zdalna stała'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=PPSF_H.index('?');
      PPSF_H.index('PRAC');
      PPSF_H.prefix(P.ref());
      PPSF_H.index('PRAX');
      PPSF_H.prefix(P.ref());
      PPSF_H.index(_ndx);
      PPSF_H.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\pkd_conf_ppsf_ktr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Udostępnia Kontrolę trzeźwości.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('is_pzd01','ppsf') || return() ?};
_ndx:={? PAR_SKID.get(236)='T' || 'OSOBX' || 'OSOBA' ?};
{? ~_a.init(_a,KOT_TEST,_ndx,'WER','Z','Z','PKD_EZK_ORKT','PKD_EZK_OPKT',OSOBA)
|| return()
?};

_a.prolog+="
   KOT_TEST.cntx_psh();
   KOT_TEST.win_edit('RED');
   KOT_TEST.win_patt('WZO');
";
_a.epilog+="KOT_TEST.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Kontrola trzeźwości'@,"",,,,
   $($_a.bs)(_a.map,"
      _firma:=exec('ref_firma','#firma');
      _ndx:=KOT_TEST.index('?');
      KOT_TEST.index('OSOBA');
      KOT_TEST.prefix(_firma,OSOBA.ref());
      KOT_TEST.index('OSOBX');
      KOT_TEST.prefix(_firma,OSOBA.ref());
      KOT_TEST.index(_ndx);
      KOT_TEST.prefix(_firma,OSOBA.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


:Sign Version 2.0 jowisz:1045 2024/02/26 14:31:05 1c9efc41f1bcd482f4bccc582627bff8af7b8c42c66d0ed54bbefe7ea85648b71d6fdbb42f86a42342e10675d3c9ce02e6c80864c03b2088545dcfbcfc611492c5501cfef20c46f8597e38fca91656df1291fff85a78cadf37d98dbbfc8d1d2cbdcc5951787c5764327ada2536008aee168fc5cc28f33c4a34ba12b1de5ca1f9
