:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_uza.fml [12.51]
:: Utworzony: 2019/04/05
:: Autor: jaws
:: Systemy: PPK
::======================================================================================================================
:: Zawartość: Formuły odpowiedzialne za obsługę kartoteki umów o zarządzanie.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed modyfikacją (dołączenie/poprawienie) wiersza tabeli PPK_UZA.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
{? PPK_UZA.UID=0 || PPK_UZA.UID:=exec('tm_stamp','#tm_stamp') ?};
{? PPK_UZA.IDR='N' || PPK_UZA.IDF:='' ?};
1


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "przed dołącz" tabeli PPK_UZA.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_uza');
1


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "przed popraw" tabeli PPK_UZA.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_uza');
1


\_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po popraw" tabeli PPK_UZA.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? ~exec('_update','ppk_zal',bfld('UID'),PPK_UZA.UID)
|| undo()
?};
~~


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "przed usuń" tabeli PPK_UZA.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',PPK_UMO,'OD',PPK_UZA.ref())


\_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po usuń" tabeli PPK_UZA.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? ~exec('_remove','ppk_zal',bfld('UID'))
|| undo()
?};
~~


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wskazanie aktualnej umowy o zarządzanie.
::   WE:
::   WY: Wskazanie wiersza tabeli PPK_UZA
::----------------------------------------------------------------------------------------------------------------------
PPK_UZA.ref()


\idr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po redakcji pola IDF tabeli PPK_UZA.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
win_disp();
1


\idf_bx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed wyświetleniem i redakcją pola IDF tabeli PPK_UZA.
::   WE:
::   WY: 0/1 - pole zablokowane/dostępne
::----------------------------------------------------------------------------------------------------------------------
PPK_UZA.IDR<>'N'


\idf_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed wyświetleniem zawartości pola IDF tabeli PPK_UZA.
::   WE:
::   WY: 0/1 - zawartość ukryta/widoczna
::----------------------------------------------------------------------------------------------------------------------
exec('idf_bx','ppk_uza')


\idf_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed redakcją zawartości pola IDF tabeli PPK_UZA.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('idf_bx','ppk_uza')


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Udostępnia zawartość kartoteki bieżącej firmy PPK_UZA.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_mode:='maximized_with_title';

:: Panel zawierający umowy o zarządzanie i prowadzenie
_grp:=PPK_UZA.grp_make('Zawarte umowy'@,
:: przed otwarciem
   "  PPK_UZA.index('OD');
      PPK_UZA.prefix(exec('firma','ustawienia'));
      PPK_UMO.cntx_psh();
      PPK_UMO.index('OD');
      1
   ",
:: identyfikator
   '#ppk_uza_grp',,,
:: podczas zamykania
   "  PPK_UMO.cntx_pop();
      1
   "
);
:: Umowy o zarządzanie
PPK_UZA.grp_sel(_grp,PPK_UZA,'WER',,
:: po odświeżeniu
   "  _aid:='';
      {? (PPK_UZA.f_active() & PPK_UZA.f_size()) | PPK_UZA.size()
      || {? exec('jest_ucz','ppk_uza',PPK_UZA.ref())
         || _aid+='U'
         ?}
      ?};
      PPK_UZA.actions('WER',_aid,,1);
      grp_disp(PPK_UMO,'WER',1)
   ",,,,,,,,
:: tryb
   _mode
);
:: Umowy o prowadzenie
PPK_UZA.grp_splt(_grp,,'vertical','left');
PPK_UZA.grp_sel(_grp,PPK_UMO,'WER',,
:: po odświeżeniu
   "  _aid:='';
      {? (PPK_UZA.f_active() & PPK_UZA.f_size()) | PPK_UZA.size()
      || {? exec('jest_ucz','ppk_umo',PPK_UMO.ref())
         || _aid+='U'
         ?}
      || _aid:='D:D'
      ?};
      PPK_UMO.actions('WER',_aid,,1)
   ",,,,
:: przed obsługą
   "  _ref:=null;
      {? (PPK_UZA.f_active() & PPK_UZA.f_size()) | PPK_UZA.size()
      || _ref:=PPK_UZA.ref()
      ?};
      PPK_UMO.prefix(_ref)
   ",,,,
:: tryb
   _mode
);

PPK_UZA.actions('WER','T','D:D');
PPK_UZA.cntx_psh();
PPK_UZA.win_sel(_grp);
PPK_UZA.win_edit('RED');
:: nadpisz formuły dla pól
exec('set_flds','ppk_uza');
exec('set_flds','ppk_umo');

:: udostępnij umowy
PPK_UZA.select();

:: przywróć formuły pól z definicji
exec('set_flds','ppk_uza','*');
exec('set_flds','ppk_umo','*');

:: porządki
PPK_UZA.cntx_pop();
PPK_UZA.actions('WER');
PPK_UZA.win_del(_grp);
~~


\rek_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji wiersza tabeli PPK_UZA.
::   WE:
::   WY: 1 w przypadku gdy rekord jest poprawny, akronim wymaganego pola lub 0 gdy doszło do powielenia klucza.
::----------------------------------------------------------------------------------------------------------------------
_mod:=-menu_txt()='popraw';

_chk:=__CHK.table(PPK_UZA,_mod,,'FIRMA','DZ','NUMER','ADRES','OD','IDR');
{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & _chk=0)
|| return(_chk)
?};
{? PPK_UZA.IDR<>'N'
|| {? __CHK.record(PPK_UZA,,'IDF')<>''
   || return('IDF')
   ?}
?};

_zd:=date(0,0,0);
:: kontrola względem daty obowiązywania ustawy
exec('czytaj','#stalesys',,KST_PPK,'UST_OD');
{? KST_PPK.UST_OD<>_zd & PPK_UZA.DZ<KST_PPK.UST_OD
|| {? ~FUN.ask(
         '%1 %2.\n'['"Data zawarcia" nie powinna być wcześniejsza od daty'@,$KST_PPK.UST_OD]+
         'Czy mimo to zapisać umowę z podaną datą?'@
      )
   || return('DZ')
   ?}
?};

:: kontrola względem daty zawarcia
{? PPK_UZA.OD<PPK_UZA.DZ
|| FUN.emsg('Data "Od dnia" nie może być wcześniejsza od daty zawarcia umowy.'@);
   return('OD')
?};
_err:='Wprowadzono niespójne daty.'@;
{? PPK_UZA.DO<>date(0,0,0) & PPK_UZA.DO<PPK_UZA.OD
|| FUN.emsg(_err);
   return('DO')
?};

:: kontrola rodzaju identyfikatora:
{? PPK_UZA.IDR<>'N'
:: Ustawa z dnia 28 kwietnia 2022 r. o zasadach realizacji zadań finansowanych ze środków europejskich w perspektywie
:: finansowej 2021-2027 (Dz.U. 2022 poz. 1079) wprowadziła zmiany w ustawie z dnia 4 października 2018 r.
:: o pracowniczych planach kapitałowych (Dz.U. 2020 poz. 1342) określając numer identyfikacyjny jako NIP lub REGON
|| _err:='Zgodnie ze zmianami z dnia 28 kwietnia 2022 r. w ustawie o PPK\n'
         'rodzajem identyfikatora powinien być NIP lub REGON.\n'
         'Czy kontynuować?'@;
   {? ~FUN.ask(_err)
   || return('IDR')
   ?}
:: Sprawdzenie czy mamy wypełnione conajmniej jedno z pól NIP/REGON w stałych
|| exec('czytaj','#stalesys',,KST,'NIP','REG');
   {? ~+form(KST.NIP) & ~+form(KST.REG)
   || _err:='W stałych systemu brak podanych wartości NIP i REGON.\n'
            'Należy uzupełnić wartości pól.'@;
      FUN.info(_err)
   ?}
?};

:: kontrola długości pól PPK_UZA.KOM (do 200 znaków) oraz  PPK_UZA.OWD (do 255 znaków):
_kom:=PPK_UZA.memo_txt(,,'KOM');
_owd:=PPK_UZA.memo_txt(,,'OWD');
_pKom:=(+_kom>200);
_pOwd:=(+_owd>255);
{? _pKom | _pOwd
|| _err:='Przekroczono maksymalną długość '@;
   {? _pKom
   || _err+='pola Dane kontaktowe dla instytucji (200 znaków)'@;
      _err+={? _pOwd || '\n oraz '@ || '.' ?}
   ?};
   {? _pOwd
   || _err+='pola Zasady ustalania wpłaty dodatkowej (255 znaków).'@
   ?};
   _err+='\nCzy skrócić wpis%1 do wymaganej długości?'@[{? _pKom & _pOwd || 'y' || '' ?}];

   {? FUN.ask(_err)
   || PPK_UZA.memo_set(200+_kom,'KOM');
      PPK_UZA.memo_set(255+_owd,'OWD')
   ?};
   win_disp();
   return({? _pKom || 'KOM' || 'OWD' ?})
?};

:: kontrola nakładania się umów
_od:=PPK_UZA.OD;
_do:=PPK_UZA.DO;
_ref:={? _mod || PPK_UZA.ref() || null ?};

PPK_UZA.cntx_psh();
PPK_UZA.index('OD');
PPK_UZA.prefix(exec('firma','ustawienia'));
_loop:=PPK_UZA.first();
{!
|? _loop
|! {? PPK_UZA.ref()<>_ref
   || {? exec('is','overlap',PPK_UZA,_od,_do)
      || PPK_UZA.cntx_pop();
         FUN.emsg(_err);
         return('DO')
      ?}
   ?};
   _loop:=PPK_UZA.next()
!};
PPK_UZA.cntx_pop();

:: kontrola względem umów o prowadzenie
:: (tylko dla poprawiania rekordu)
{? _mod
|| _err:='Zmiana nie jest możliwa ze względu na istniejące umowy o prowadzenie.'@;
   PPK_UMO.cntx_psh();
   PPK_UMO.index('OD');
   PPK_UMO.prefix(PPK_UZA.ref());
   {? PPK_UMO.last() & PPK_UMO.OD<PPK_UZA.OD
   || PPK_UMO.cntx_pop();
      FUN.emsg(_err);
      return('DO')
   |? PPK_UMO.first()
   || {? (PPK_UMO.DO=_zd & PPK_UZA.DO<>_zd) |
         (PPK_UMO.DO<>_zd & PPK_UZA.DO<>_zd & PPK_UZA.DO<PPK_UMO.DO)
      || PPK_UMO.cntx_pop();
         FUN.emsg(_err);
         return('DO')
      ?}
   ?};
   PPK_UMO.cntx_pop()
?};

1


\zal_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Załączniki" menu okienek tabeli PPK_UMO.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('setup','ppk_zal',PPK_UZA,PPK_UZA.UID,,'ZWS_PAR_PUMO');
1


\parrap_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Funkcja odpowiedzialna za obsługę parametrów raportów wymiany danych z instytucjami finansowymi.
::       Wykonywana dla bieżącego rekordu tabeli PPK_UZA.
::   WE: [_a] [NUMBER] - Tryb wsadowy (bez redagowania) [0*/1].
::   WY: Alias tabeli z parametrami.
::----------------------------------------------------------------------------------------------------------------------
_batch:=var_pres('_a')=type_of(0) & _a;

:: Uwaga:
:: Jeżeli zajdzie potrzeba dodania pola innego typu niż STRING, to należy zadbać o prawidłową konwersję typu przy
:: zapisie wygenerowanej formuły do pola PPK_UZA.PARRAP.
_TAB:=tab_tmp(1,
   'RPZ_TYP','STRING[1]','Format plików'@,
:: Parametry listy uczestników:
   'DT_KURL','STRING[1]','Data przynależności - urlop bezpłatny'@,
:: Parametry powiadomień:
   'GEN_KOM','STRING[1]','Komunikaty powiadomień dla współpracowników'@,
   'GEN_MAIL','STRING[1]','Powiadomienie e-mail dla współpracowników'@,
:: Parametry wspólne: eksport
   'PLEC','STRING[1]','Informacja o płci'@,
   'DATA_UR','STRING[1]','Data urodzenia'@,
   'DOK_TOZ','STRING[1]','Dokument tożsamości'@,
   'MAIL','STRING[1]','Adres poczty elektronicznej'@,
   'TEL','STRING[1]','Numer telefonu'@,
   'UZA_NUM','STRING[1]','Numer umowy o zarządzanie'@,
   'UL_MSC','STRING[1]','Adres zamieszkania/korespondencji'@,
   'OB_PSL','STRING[1]','PESEL obcokrajowca'@,
   'WPL_ZER','STRING[1]','Wpłaty zerowe'@,
   'ZLC_CG','STRING[1]','Zleceniobiorcy'@,
   'CHARS','STRING[1]','Translacja tekstów'@,
:: Parametry eksportu - Automatyczne wznowienie wpłat
   'R_AWW_OZ','STRING[1]','Osoby zatrudnione'@,
   'R_AWW_ON','STRING[1]','Osoby niezatrudnione'@,
   'R_AWW_UZ','STRING[1]','Uczestnicy zatrudnieni'@,
   'R_AWW_UN','STRING[1]','Uczestnicy niezatrudnieni'@,
:: XML: import / eksport
   'XML_EXT','STRING[3]','Rozszerzenie pliku raportu'@,
:: CSV import / eksport
   'CSV_NFO','STRING[1]','Nagłówek informacyjny'@,
   'CSV_KOL','STRING[1]','Wiersz nagłówkowy'@,
   'CSV_FLDK','STRING[1]','Kwalifikatory pól'@,
   'CSV_DEC','STRING[1]','Separator części dziesiętnej'@,
:: CSV import
   'CSV_NTR','INTEGER','Pole określające typ importowanego raportu'@,
   'CSV_NT1','STRING[20]','"Zwrot środków w wyniku rozliczenia korekty"'@,
   'CSV_NT2','STRING[20]','"Nadanie uczestnikowi numeru w ewidencji"'@,
   'CSV_NT3','STRING[20]','"Wypłata środków przez uczestnika"'@,
   'CSV_NT4','STRING[20]','"Wypłata transferowa"'@,
   'CSV_NT5','STRING[20]','"Zwrot"'@,
:: CSV eksport
   'CSV_ALP','STRING[31]','Tytuł kolumny "Lp."'@,
   'CSV_FDO','STRING[255]','Format daty obowiązku'@,
   'CSV_ADRK','STRING[1]','Adres do korespondencji'@,
:: Przechowywanie tabeli translacji
   'CHR_JSON','SYS_MEMO','Ciąg JSON obiektu zamiany znaków'@,
:: Parametry wznowienia wpłat:
   'POW_NAKT','STRING[1]','Powiadomienia dla nieaktywnych współpracowników'@,
   'ZAP_NAKT','STRING[1]','Automatyczny zapis nieaktywnych osób'@,
   'POW_PONO','STRING[1]','Ponowne wysyłanie informacji o wznowieniu'@,
:: Automatyczne wznowienie wpłat uczestnika
   'AWW_DZ','INTEGER','Dzień wniosku'@,
   'AWW_MC','INTEGER','Miesiąc wniosku'@,
:: Automatyczne wznowienie wpłat i zapis na listę osoby
   'UZU_DZ','INTEGER','Dzień zapisu'@,
   'UZU_MC','INTEGER','Miesiąc zapisu'@,
   'STAZ_23','STRING[1]','Sprawdzanie stażu współpracowników'@
);

_TAB.blank();
_TAB.RPZ_TYP:='X';
_TAB.PLEC:='T';
_TAB.DATA_UR:='T';
_TAB.DOK_TOZ:='T';
_TAB.MAIL:='T';
_TAB.TEL:='T';
_TAB.UZA_NUM:='T';
_TAB.UL_MSC:='N';
_TAB.OB_PSL:='T';
_TAB.WPL_ZER:='N';
_TAB.ZLC_CG:='N';
_TAB.CHARS:='N';
_TAB.R_AWW_OZ:='T';
_TAB.R_AWW_ON:='N';
_TAB.R_AWW_UZ:='T';
_TAB.R_AWW_UN:='T';
_TAB.DT_KURL:='N';
_TAB.GEN_KOM:='T';
_TAB.GEN_MAIL:='T';
_TAB.XML_EXT:='ppk';
_TAB.CSV_NFO:='N';
_TAB.CSV_KOL:='T';
_TAB.CSV_DEC:='.';
_TAB.CSV_NTR:=1;
_TAB.CSV_NT1:='2000';
_TAB.CSV_NT2:='4000';
_TAB.CSV_NT3:='1000';
_TAB.CSV_NT4:='3000';
_TAB.CSV_NT5:='5000';
_TAB.CSV_FLDK:='T';
_TAB.CSV_ALP:='LICZBA_PORZĄDKOWA';
_TAB.CSV_FDO:='xml_value(_a)';
_TAB.CSV_ADRK:='N';
_TAB.POW_NAKT:='N';
_TAB.ZAP_NAKT:='N';
_TAB.POW_PONO:='N';
_TAB.AWW_DZ:=1;
_TAB.AWW_MC:=3;
_TAB.UZU_DZ:=1;
_TAB.UZU_MC:=3;
_TAB.STAZ_23:='T';

_TAB.memo_set(base64('encode',json_obj(exec('chars_swap_def','ppk',,1))),'CHR_JSON');

_fml:=PPK_UZA.memo_txt(,1,'PARRAP');
{? _fml<>''
|| ($_fml)(_TAB)
?};

{? _batch
|| return(_TAB)
?};

::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
_efld_opt:="
   _tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
   {? var_pres('_b')=type_of(SYSLOG)
   || _TAB:=_b
   |? _tryb='1'
   || _TAB:=cur_tab(1,1)
   || return(0)
   ?};
   {? var_pres('_c')=type_of('')
   || _we:=_c
   |? _tryb='1'
   || _we:=cur_win(1,1)
   || return(0)
   ?};
   {? var_pres('_d')=type_of('')
   || _fld:=_d
   |? _tryb='1'
   || _fld:=cur_afld()
   || _fld:=''
   ?};

   {? _fld='' | _fld='RPZ_TYP'
   || {? _fld<>''
      || _efld:=_TAB.fld_fml('CSV_NFO','*AFTER_EDIT')
      ?};
      _TAB.efld_opt(_we,'enable=%1' [$(_TAB.RPZ_TYP='X')],,'XML_EXT');
      _csv:=$(_TAB.RPZ_TYP='C');
      _TAB.efld_opt(_we,'enable=%1' [_csv],,'CSV_NFO');
      {? _fld<>''
      || _efld('1',_TAB,_we,'CSV_NFO')
      ?};
      _TAB.efld_opt(_we,'enable=%1' [_csv],,'CSV_KOL');
      {? _fld<>''
      || _efld('1',_TAB,_we,'CSV_KOL')
      ?};
      _TAB.efld_opt(_we,'enable=%1' [_csv],,'CSV_FLDK');
      _TAB.efld_opt(_we,'enable=%1' [_csv],,'CSV_DEC');
      _TAB.efld_opt(_we,'enable=%1' [_csv],,'CSV_ALP');
      _TAB.efld_opt(_we,'enable=%1' [_csv],,'CSV_FDO');
      _TAB.efld_opt(_we,'enable=%1' [_csv],,'CSV_ADRK')
   ?};
   {? _fld='' | _fld='CSV_NFO'
   || _nte:=$(_TAB.RPZ_TYP='C' & _TAB.CSV_NFO='T');
      _TAB.efld_opt(_we,'enable=%1' [_nte],,'CSV_NTR');
      _TAB.efld_opt(_we,'enable=%1' [_nte],,'CSV_NT1');
      _TAB.efld_opt(_we,'enable=%1' [_nte],,'CSV_NT2');
      _TAB.efld_opt(_we,'enable=%1' [_nte],,'CSV_NT3');
      _TAB.efld_opt(_we,'enable=%1' [_nte],,'CSV_NT4');
      _TAB.efld_opt(_we,'enable=%1' [_nte],,'CSV_NT5')
   ?};
   {? _fld='' | _fld='CSV_KOL'
   || _kol:=$(_TAB.RPZ_TYP='C' & _TAB.CSV_KOL='T');
      _TAB.efld_opt(_we,'enable=%1' [_kol],,'CSV_ALP')
   ?};
   {? _fld='' | _fld='GEN_KOM'
   || _TAB.efld_opt(_we,'enable=%1' [$(_TAB.GEN_KOM='T')],,'GEN_MAIL')
   ?};

   1
";

_TAB.fld_fml('RPZ_TYP','AFTER_EDIT',_efld_opt);
_TAB.fld_fml('CSV_NFO','AFTER_EDIT',_efld_opt);
_TAB.fld_fml('CSV_KOL','AFTER_EDIT',_efld_opt);
_TAB.fld_fml('GEN_KOM','AFTER_EDIT',_efld_opt);

:: Obiekty zamiany znaków przechowywane w ciągu json, zakodowane w base64 w celu uniknięcia problemów z niektórymi
:: znakami (w szczególności "):
_chars:=json_parse(base64('decode',_TAB.memo_txt(,0,'CHR_JSON')));
params_set('chars',_chars);

_we:=_TAB.mk_edit('Parametry działania'@,,,,,'html_maximized');
_TAB.win_etab(_we,'Import / eksport'@);
_TAB.win_esep(_we,'Dane podstawowe'@);
_TAB.win_efld(_we,,'RPZ_TYP',,,,,,,,'Typ pliku wymiany danych'@,'radio-buttons',,
   'XML'@,"'X'",
   'CSV'@,"'C'"
);
_TAB.win_esep(_we,'Parametry eksportu'@);
_TAB.win_efld(_we,,'PLEC',,,,,,,,'Czy udostępniać instytucji finansowej informację o płci uczestnika?'@,
   'check-box','check_label="%1"' ['Wysyłać informację o płci uczestnika'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'DATA_UR',,,,,,,,
   'Czy udostępniać instytucji finansowej datę urodzenia dla obywatela RP?'@,
   'check-box','check_label="%1"' ['Wysyłać datę urodzenia uczestnika'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'DOK_TOZ',,,,,,,,
   'Czy udostępniać instytucji finansowej typ i numer dokumentu tożsamości dla obywatela RP?'@,
   'check-box','check_label="%1"' ['Wysyłać dokument tożsamości dla obywateli RP'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'MAIL',,,,,,,,'Czy udostępniać instytucji finansowej adres poczty elektronicznej uczestnika?'@,
   'check-box','check_label="%1"' ['Wysyłać adres poczty elektronicznej'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'TEL',,,,,,,,'Czy udostępniać instytucji finansowej numer telefonu uczestnika?'@,
   'check-box','check_label="%1"' ['Wysyłać numer telefonu'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'UZA_NUM',,,,,,,,'Czy przekazywać numer umowy o zarządzanie?'@,
   'check-box','check_label="%1"' ['Wysyłać numer umowy o zarządzanie'],"'T'","'N'"
);
_TAB.win_efld(_we,,'UL_MSC',,,,,,,,'Czy uzupełniać ulicę miejscowością w przypadku jej braku?'@,
   'check-box','check_label="%1"' ['Uzupełniać ulicę miejscowością'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'OB_PSL',,,,,,,,
   'Czy wysyłać dane o dokumencie tożsamości i dacie urodzenia obcokrajowców z podanym nr PESEL?'@,
   'check-box','check_label="%1"' ['Wysyłać dane dodatkowe'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'WPL_ZER',,,,,,,,
   'Czy wysyłać w raporcie uczestnika z zerowymi wpłatami?'@,
   'check-box','check_label="%1"' ['Wysyłać zerowe wpłaty'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'ZLC_CG',,,,,,,,
   'Czy uwzględniać ciągłość umowy do raportu "Zakończenie współpracy z uczestnikiem"?'@,
   'check-box','check_label="%1"' ['Pomijać zleceniobiorców z umową ciągłą'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'CHARS',,,,,,,,
   'Czy zamieniać znaki w imionach i nazwiskach uczestników na ich odpowiedniki zgodnie z tabelą translacji?'@,
   'check-box','check_label="%1"' ['Zamiana znaków zgodnie z tabelą translacji'@],"'T'","'N'"
);
_TAB.win_esep(_we,'Parametry eksportu - Automatyczne wznowienie wpłat'@);
_TAB.win_efld(_we,,'R_AWW_OZ',,,,,,,,
   'Czy wysyłać dane o automatycznym wznowieniu wpłat zatrudnionych osób niebędących wcześniej uczestnikami PPK?'@,
   'check-box','check_label="%1"' ['Wysyłać dla zatrudnionych osób'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'R_AWW_ON',,,,,,,,
   'Czy wysyłać dane o automatycznym wznowieniu wpłat niezatrudnionych osób niebędących wcześniej uczestnikami PPK?'@,
   'check-box','check_label="%1"' ['Wysyłać dla niezatrudnionych osób'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'R_AWW_UZ',,,,,,,,
   'Czy wysyłać dane o automatycznym wznowieniu wpłat zatrudnionych uczestników PPK?'@,
   'check-box','check_label="%1"' ['Wysyłać dla zatrudnionych uczestników'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'R_AWW_UN',,,,,,,,
   'Czy wysyłać dane o automatycznym wznowieniu wpłat niezatrudnionych uczestników PPK?'@,
   'check-box','check_label="%1"' ['Wysyłać dla niezatrudnionych uczestników'@],"'T'","'N'"
);
_TAB.win_etab(_we,'XML: import / eksport'@);
_TAB.win_esep(_we,'XML: import / eksport'@);
_TAB.win_efld(_we,,'XML_EXT',,,,,,,,'Rozszerzenie pliku raportu'@,'radio-buttons','left_label=1',
   'ppk'@,"'ppk'",
   'xml'@,"'xml'"
);
_TAB.win_etab(_we,'CSV: import / eksport'@);
_TAB.win_esep(_we,'CSV: import / eksport'@);
_TAB.win_efld(_we,,'CSV_NFO',,,,,,,,'Czy pierwszy wiersz jest wierszem informacyjnym?'@,
   'check-box','check_label="%1"' ['Pierwszy wiersz zawiera dodatkowe informacje'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'CSV_KOL',,,,,,,,'Czy dane poprzedzone są wierszem z tytułami kolumn?'@,
   'check-box','check_label="%1"' ['Dane poprzedza wiersz nagłówkowy z tytułami kolumn'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'CSV_FLDK',,,,,,,,'Czy wartości pól są rozpoczynane i kończone znakiem cudzysłowu?'@,
   'check-box','check_label="%1"' ['Pola są kwalifikowane znakiem cudzysłowu'@],
   "'T'","'N'"
);
_TAB.win_efld(_we,,'CSV_DEC',,,,,,,,'Separator części dziesiętnej liczby'@,'radio-buttons',,
   'Kropka'@,"'.'",
   'Przecinek'@,"','"
);
_TAB.win_esep(_we,'CSV: import'@);
_TAB.win_efld(_we,,'CSV_NTR',,,,,,,,'Numer pozycji pola określającego kod typu importowanego raportu'@);
_TAB.win_efld(_we,,'CSV_NT1',,,,,,,,'Kod typu dla raportu %1'@ [MS.name(_TAB,'CSV_NT1')]);
_TAB.win_efld(_we,,'CSV_NT2',,,,,,,,'Kod typu dla raportu %1'@ [MS.name(_TAB,'CSV_NT2')]);
_TAB.win_efld(_we,,'CSV_NT3',,,,,,,,'Kod typu dla raportu %1'@ [MS.name(_TAB,'CSV_NT3')]);
_TAB.win_efld(_we,,'CSV_NT4',,,,,,,,'Kod typu dla raportu %1'@ [MS.name(_TAB,'CSV_NT4')]);
_TAB.win_efld(_we,,'CSV_NT5',,,,,,,,'Kod typu dla raportu %1'@ [MS.name(_TAB,'CSV_NT5')]);
_TAB.win_esep(_we,'CSV: eksport'@);
_TAB.win_efld(_we,,'CSV_ALP',,,,,,,,'Tytuł kolumny z liczbą porządkową'@,'radio-buttons',,
   'LICZBA_PORZĄDKOWA'@,"'LICZBA_PORZĄDKOWA'",
   'LP'@,"'LP'"
);
_TAB.win_efld(_we,,'CSV_FDO',,,,,,,,'Format daty obowiązku'@,'radio-buttons',,
   'rrrr-mm-dd'@,"'xml_value(_a)'",
   'rrrr-mm'@,"'7+xml_value(_a)'"
);
_TAB.win_efld(_we,,'CSV_ADRK',,,,,,,,'Czy adres do korespondencji umieszczać zawsze?'@,
   'check-box','check_label="%1"' ['Adres do korespondencji jest wymagany'@],"'T'","'N'"
);
_TAB.win_etab(_we,'Parametry inne'@);
_TAB.win_esep(_we,'Parametry listy uczestników'@);
_TAB.win_efld(_we,,'DT_KURL',,,,,,,,
   'Podpowiadana data przynależności pracowników, którym urlop bezpłatny kończy się w trakcie miesiąca'@,
   'radio-buttons','left_label=1',
   'Data zakończenia urlopu bezpłatnego'@,"'T'",
   'Pierwszy dzień miesiąca, w którym kończy się urlop bezpłatny'@,"'N'"
);
_TAB.win_esep(_we,'Parametry powiadomień'@);
_TAB.win_efld(_we,,'GEN_KOM',,,,,,,,
   'Czy generować komunikaty powiadomień dla współpracowników?'@,
   'check-box','check_label="%1"' ['Generować komunikaty'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'GEN_MAIL',,,,,,,,
   'Czy wysyłać powiadomienie pocztą elektroniczną dla współpracowników posiadających adres e-mail?'@,
   'check-box','check_label="%1"' ['Wysyłać powiadomienia'@],"'T'","'N'"
);
_TAB.win_etab(_we,'Wznowienie wpłat'@);
_TAB.win_esep(_we,'Parametry wznowienia wpłat'@);
_TAB.win_efld(_we,,'POW_NAKT',,,,,,,,
   'Czy generować komunikaty (IAWW, AWW) powiadomień dla współpracowników bez aktywnej umowy?'@,
   'check-box','check_label="%1"' ['Wygenerować komunikaty'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'ZAP_NAKT',,,,,,,,
   'Czy zapisywać automatycznie nieaktywne osoby, które nie mają podpisanej umowy o prowadzenie PPK?'@,
   'check-box','check_label="%1"' ['Zapisać współpracowników do PPK'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'STAZ_23',,,,,,,,
   'Czy sprawdzać staż współpracowników na zasadach art. 16 podczas kwalifikowania do wznowienia z art. 23?'@,
   'check-box','check_label="%1"' ['Sprawdzać staż'@],"'T'","'N'"
);
_TAB.win_efld(_we,,'POW_PONO',,,,,,,,
   'Czy wysyłać ponownie informację o automatycznym wznowieniu wpłat (IAWW) dla komunikatów wysłanych?'@,
   'check-box','check_label="%1"' ['Ponawiać wysyłanie'@],"'T'","'N'"
);
_TAB.win_esep(_we,'Automatyczne wznowienie wpłat uczestnika'@);
_TAB.win_efld(_we,,'AWW_MC',,,3,,,,,
   'Miesiąc daty generowanego wniosku Automatyczne Wznowienie Wpłat'@
);
_TAB.win_efld(_we,,'AWW_DZ',,,3,,,,,
   'Dzień daty generowanego wniosku Automatyczne Wznowienie Wpłat'@
);
_TAB.win_esep(_we,'Automatyczne wznowienie wpłat i zapis na listę osoby'@);
_TAB.win_efld(_we,,'UZU_MC',,,3,,,,,
   'Miesiąc wniosku AWW oraz zapisu na listę osoby z art. 23 podczas generowania listy uczestników'@
);
_TAB.win_efld(_we,,'UZU_DZ',,,3,,,,,
   'Dzień wniosku AWW oraz zapisu na listę osoby z art. 23 podczas generowania listy uczestników'@
);

_btnTtz:=_TAB.win_ebtn(_we,'text=%1,panel=bottom,align=begin'['Tabela translacji znaków'@],
                       "exec('chars_tab_edit','ppk_uza',params_get().chars); ''");
exec('chars_tab_btnTtz','ppk_uza',_TAB,_we,_btnTtz);
params_set('chars',_chars,'btnTtz',_btnTtz);
_TAB.fld_fml('CHARS','AFTER_EDIT',"exec('chars_tab_btnTtz','ppk_uza',cur_tab(),cur_win(),params_get().btnTtz)");

exec('ok_esc','#window',_TAB,_we,,,,,,,exec('text_red_ok','#window'));
_TAB.win_edit(_we);

_efld_opt('*',_TAB,_we);
{? _TAB.edit("
      _TAB:=cur_tab(1,1);
      _err:=_ret:='';
      {? _TAB.CSV_NTR<0
      || __CHK.err_fld(_TAB,'CSV_NTR',1);
         return('CSV_NTR')
      ?};
      {? _TAB.UZU_MC<_TAB.AWW_MC | (_TAB.UZU_MC=_TAB.AWW_MC & _TAB.UZU_DZ<_TAB.AWW_DZ)
      || FUN.emsg('Data zapisu generowania listy nie może być mniejsza od daty wniosku wznowienia.'@);
         return('UZU_DZ')
      ?};
      {? _TAB.UZU_MC<1 | _TAB.UZU_MC>12
      || _ret:='UZU_MC'
      |? _TAB.AWW_MC<1 | _TAB.AWW_MC>12
      || _ret:='AWW_MC'
      ?};
      {? +_ret
      || FUN.emsg('Dla miesiąca dozwolone wartości z przedziału 1-12.'@);
         return(_ret)
      ?};
      {? _TAB.UZU_DZ<0 | _TAB.UZU_DZ>date(2019,_TAB.UZU_MC,0)~3
      || _ret:='UZU_DZ'
      |? _TAB.AWW_DZ<0 | _TAB.AWW_DZ>date(2019,_TAB.AWW_MC,0)~3
      || _ret:='AWW_DZ'
      ?};
      {? +_ret
      || FUN.emsg('Niewłaściwa wartość dnia.'@);
         return(_ret)
      ?};
      {? _TAB.AWW_MC<>3 | _TAB.AWW_DZ<>1
      || _err+='Zgodnie z przepisami datą generowania wznowienia powinien być 1 marca.\n'@;
         _ret:='AWW_MC'
      ?};
      {? _TAB.UZU_MC<>3 | _TAB.UZU_DZ<>1
      || _err+='Zgodnie z przepisami datą zapisu na listę powinien być 1 marca.\n'@;
         _ret:='UZU_MC'
      ?};
      {? +_err
      || _err+='Jeżeli są w użyciu procesy cykliczne do automatycznego wznowienia\n'
               'należy ustawić w nich datę zgodną z wprowadzoną.'@
      ?};
      {? +_err & FUN.ask('%1\n%2'[_err,'Czy kontynuować?'@])
      || _ret:=''
      ?};
      _ret
   ")
|| _fml:='_TAB:=_a;\n';
   {! _lp:=1 .. _TAB.fld_num()
   |! _acr:=_TAB.fld_acr(_lp);
      _vp:=var_pres(_acr,_TAB);
      _val:=($('_a.%1' [_acr]))(_TAB);
      {? _vp=36
      || _fml+='{? var_pres(\'%1\',_TAB)=%2 || _TAB.memo_set(%3,\'%1\') ?};\n'
            [_acr,$_vp,'\''+base64('encode',json_obj(_chars))+'\'']
      || _vals:=
            {? _vp=27 || '\''+gsub(_val,'''','\\''')+'\''
            |? _vp=22 || $_val
            || '\'\''
            ?};
         _fml+='{? var_pres(\'%1\',_TAB)=%2 || _TAB.%1:=%3 ?};\n' [_acr,$_vp,_vals]
      ?}
   !};
   _fml+='~~';

   PPK_UZA.memo_set(_fml,'PARRAP');
   PPK_UZA.memo_put(,'PARRAP')

?};
obj_del(_chars);

_TAB


\set_flds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Ustawia formuły dla pól. Wywołana bez argumentów ustawia nową obsługę dla pól OD i DO. Użycie z argumentem '*'
::       przywraca ustawienia z definicji systemu.
::   WE: _a [STRING] - określenie sposobu działania:
::       '*' - przywraca formuły określone w definicji systemu,
::       wpp - ustawia dedykowaną obsługę pól OD i DO
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_be:='BEFORE_EDIT';
_ae:='AFTER_EDIT';

{? var_pres('_a')=type_of('') & _a='*'
:: przywróć formuły pól z definicji
|| PPK_UZA.fld_fml('OD',_be,"*");
   PPK_UZA.fld_fml('DO',_ae,"*");
   return()
?};

:: przed edycją pola OD
:: w przypadku poprawiania wiersza zablokuj możliwość zmiany,
:: jeśli dla pierwszej umowy zarejestrowano dane uczestników
PPK_UZA.fld_fml('OD',_be,"
   {? -menu_txt()='popraw'
   || ~exec('jest_ucz','ppk_uza',PPK_UZA.ref())
   || 1
   ?}
");

:: po edycji pola DO
:: w przypadku poprawiania wiersza nie pozwól przesunąć daty tak,
:: żeby informacje o procentowych wysokościach wpłat znalazły się
:: poza zakresem obowiązywania umowy o zarządzanie
PPK_UZA.fld_fml('DO',_ae,"
   {? -menu_txt()<>'popraw'
   || return(1)
   ?};
   PPK_UZA.cntx_psh();
   PPK_UZA.get();
   _do:=PPK_UZA.DO;
   _zd:=date(0,0,0);
   PPK_UZA.cntx_pop();
   {? (_do<>_zd & _do<=PPK_UZA.DO) | PPK_UZA.DO=_zd
::    podanie daty późniejszej nie stwarza problemu
   || return(1)
   ?};
   _ok:=1;
   PPK_PWP.cntx_psh();
   PPK_PWP.index('UNIQUE');
   PPK_PWP.prefix(exec('firma','ustawienia'));
:: czy są informacje przypadające na okres (PPK_UZA.DO,_do>
   {? {? _do=_zd
      || PPK_PWP.find_tab(,'OD',,'>',PPK_UZA.DO)
      || PPK_PWP.find_tab(,'OD',,'>',PPK_UZA.DO,'OD',,'<=',_do)
      ?}
   || FUN.emsg(
         'Nie można zmienić daty zakończenia umowy o zarządzanie\n'
         'ze względu na istniejące informacje o wysokościach wpłat.'@
      );
      _ok:=0
   ?};
   PPK_PWP.cntx_pop();
   _ok
");

~~


\jest_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Sprawdza, czy do umów o prowadzenie danej umowy o zarządzanie przypisano chociaż jednego uczestnika.
::   WE: _a _PPK_UZA - wskazanie wiersza w tabeli PPK_UZA
::   WY: 0 - brak uczestników, 1 - jest chociaż jeden uczestnik
::----------------------------------------------------------------------------------------------------------------------
PPK_UMO.cntx_psh();
PPK_UMO.index('OD');
PPK_UMO.prefix(_a);
_loop:=PPK_UMO.last();
_test:=0;
{!
|? _loop & ~_test
|! _test:=exec('jest_ucz','ppk_umo',PPK_UMO.ref());
   _loop:=PPK_UMO.prev()
!};
PPK_UMO.cntx_pop();
_test


\chars_tab_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Formuła umożliwiająca edycję tabeli translacji znaków.
::   WE: _a [OBJ] - tablica elementów nazwanych zawierająca tablice ze znakami wejściowymi i wyjściowymi (.in, .out)
::                  Struktura zgodna z \chars_swap_def/ppk.fml
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>117 | var_pres('in',_a)<0 | var_pres('out',_a)<0
|| FUN.error('Błąd danych wejściowych'@);
   return()
?};
_chars:=_a;

_TAB:=tab_tmp(1,'IN','STRING[1]','Znak wejściowy'@,'OUT','STRING[3]','Znak wyjściowy'@);
{? var_pres('in',_chars)=117 & var_pres('out',_chars)=117 & obj_len(_chars.in)=obj_len(_chars.out)
|| {! _ii:=1..obj_len(_chars.in)
   |! _TAB.IN:=_chars.in[_ii];
      _TAB.OUT:=_chars.out[_ii];
      _TAB.add()
   !};
   obj_del(_chars.in);
   obj_del(_chars.out)
?};

_ws:=_TAB.mk_sel('Tabela translacji znaków'@,,0,'#ppk_chars',,,,,'U');
_TAB.win_fld(_ws,,'IN',,,,,,'Znak wejściowy'@,,'Znak, który ma być zamieniony'@);
_TAB.win_fld(_ws,,'OUT',,,,,,'Znak wyjściowy'@,,'Znak, na który ma być zamieniony'@);
{! _ii:=1..2
|! _TAB.win_act(_ws,_ii-1,'Formuła','Dołącz',,,"exec('chars_tab_dolacz','ppk_uza')",,1)
!};
_TAB.win_btn(_ws,'text=%1'['Dołącz'@],'menu:D');
_TAB.win_act(_ws,0,'Popraw');
_TAB.win_btn(_ws,'text=%1'['Popraw'@],'menu:P');
_TAB.win_act(_ws,0,'Usuń',,,,,,,1);
_TAB.win_btn(_ws,'text=%1'['Usuń'@],'menu:U');
_TAB.win_act(_ws,0,'Szukaj');
_TAB.win_act(_ws,0,'Kolejność');
{! _ii:=1..2
|! _TAB.win_act(_ws,_ii-1,'Formuła','Wygenegruj &zestaw'@,,'Generuje bazowy zestaw znaków'@,
   "{? FUN.ask('Zestaw generowany zgodnie z Rozporządzeniem Ministra Sprawiedliwości\n'
               'z dnia 24 czerwca 2021 r. (Dz.U. 2021 poz. 1174)\n\n'
               'Czy na pewno wygenerować bazowy zestaw (wszystkie zmiany zostaną utracone)?\n'@)
    || _chars:=exec('chars_swap_def','ppk');
       _TAB:=cur_tab();
       _TAB.erase();
       {! _ii:=1..obj_len(_chars.in)
       |! _TAB.IN:=_chars.in[_ii];
          _TAB.OUT:=_chars.out[_ii];
          _TAB.add()
       !};
       _TAB.first()
    ?};
    ~~
   ")
!};
_TAB.win_btn(_ws,'text=%1'['Wygenegruj &zestaw'@],'menu:Z');

_we:=_TAB.mk_edit('Znak do zamiany'@,0,'#ppk_chars_edit');
_TAB.win_efld(_we,,'IN',,,10);
_TAB.win_efld(_we,,'OUT',,,10);
exec('ok_esc','#window',_TAB,_we,,,,,,,exec('text_red_ok','#window'));

_TAB.win_edit(_we);
_TAB.win_sel(_ws);
_TAB.select();
:: Zapis wartości z tabeli do tablicy:
{? _TAB.first()
|| _size:=_TAB.size();
   _chars.in:=obj_new(_size);
   _chars.out:=obj_new(_size);
   {! _ii:=1.._size
   |! _chars.in[_ii]:=_TAB.IN;
      _chars.out[_ii]:=_TAB.OUT;
      _TAB.next()
   !}
?};

~~


\chars_tab_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Formuła na dołączenie rekordu do tymczasowej tabeli translacji
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_TAB:=cur_tab();
_TAB.blank();
{!
|? {? _TAB.edit("_TAB:=cur_tab();
                  {? _TAB.find_key(_TAB.IN)
                  || FUN.emsg('Istnieje już wpis dla znaku [%1]'@[_TAB.IN]);
                     return('IN')
                  ?};
                  1
                ")
   || _ok:=_TAB.add()
   || _ok:=0
   ?};

   _ok
!};
1


\chars_tab_btnTtz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Wyszarzanie przycisku "Tabela translacji znaków"
::   WE: _a [_TAB] - wskazanie na tabelę translacji znaków
::       _b [STRING] - akronim okienka redakcji
::       _c [STRING] - identyfikator przycisku
::       Uwaga: poprawność parametrów wejściowych nie jest weryfikowana.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_a.btn_eopt(_b,_c,'state=%1'[{? _a.CHARS<>'T' || 'grayed' || 'normal' ?}]);
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:36 c993cb2aee0f29439c41a48ac54be101ae58b2f1dc1a099b71c5a82a5c22abec54912b9dd300f6d61ec67fba1033d993d0bc2c6ffebdce5c199f3493b347aee354aa4d1582ebc3e0c4eab33391e513825f56cf7606feae9559bd8b800327373e2d35067ecef93c689bc217b11642c6d39112af38bef0610fb33a6a9f372072e3
