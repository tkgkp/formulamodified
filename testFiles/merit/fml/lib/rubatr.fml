:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: rubatr.fml
:: Utworzony: 02.02.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły związane z obsługą atrybutów rubryk płacowych.
::======================================================================================================================


\atrplaimex_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Deklaracja klasy obsługującej import / eksport atrybutów płacowych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Przy powtórnym wywołaniu deklaracji klasy AtrPlaImEx - zakończ.
{? var_pres('AtrPlaImEx',@.CLASS)>0
|| return()
?};

:: Deklaracje klas wykorzystywanych przez obiekty klasy AtrPlaImEx.
exec('xml_t_decl','#xml_t');

obj_decl('AtrPlaImEx',


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######
:: #     #  #####   #  #    #    ##    #####  ######          ######  #  ######  #       #####    ####
:: #     #  #    #  #  #    #   #  #     #    #               #       #  #       #       #    #  #
:: ######   #    #  #  #    #  #    #    #    #####           #####   #  #####   #       #    #   ####
:: #        #####   #  #    #  ######    #    #               #       #  #       #       #    #       #
:: #        #   #   #   #  #   #    #    #    #               #       #  #       #       #    #  #    #
:: #        #    #  #    ##    #    #    #    ######          #       #  ######  ######  #####    ####
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


:: Domyślna nazwa pliku importu/eksportu.
   obj_fld('base','atrybuty_placowe'),


:: Separator katalogów po stronie serwera aplikacji.
   obj_fld('sep1',exec('sep','#file',1)),


:: Tablica elementów nazwanych (tworzona podczas inicjalizacji obiektu) do przechowywania danych o atrybutach.
   obj_fld('RA_DEF',~~),


:: Tablica elementów nazwanych (tworzona podczas inicjalizacji obiektu) do przechowywania danych o wartościach
:: atrybutów.
   obj_fld('RA_VAL',~~),


:: Tablica elementów nazwanych (tworzona podczas inicjalizacji obiektu) do przechowywania danych o wykorzystaniu
:: atrybutów - użycia atrybutów przez rubryki płacowe.
   obj_fld('RA_USE',~~),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######
:: #     #  #####   #  #    #    ##    #####  ######          #    #  ######  #####  #    #   ####   #####    ####
:: #     #  #    #  #  #    #   #  #     #    #               ##  ##  #         #    #    #  #    #  #    #  #
:: ######   #    #  #  #    #  #    #    #    #####           # ## #  #####     #    ######  #    #  #    #   ####
:: #        #####   #  #    #  ######    #    #               #    #  #         #    #    #  #    #  #    #       #
:: #        #   #   #   #  #   #    #    #    #               #    #  #         #    #    #  #    #  #    #  #    #
:: #        #    #  #    ##    #    #    #    ######          #    #  ######    #    #    #   ####   #####    ####
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######     #            ######  ####### #######
:: #     #   # #           #     # #       #
:: #     #  #   #          #     # #       #
:: ######  #     #         #     # #####   #####
:: #   #   #######         #     # #       #
:: #    #  #     #         #     # #       #
:: #     # #     # ####### ######  ####### #
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('create_ra_def_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) tworząca strukturę do przechowywania danych o atrybutach (pole .RA_DEF).
::       Nazwa i budowa indeksu zgodna z definicją w MacroBUILDER-ze.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
   "  .RA_DEF:=obj_new('TAB','ndx');
      .RA_DEF.TAB:=tab_tmp(3
         ,'RA_DEF','TREE_REF','Rodzic'
         ,'SYMBOL','INTEGER','Symbol'
         ,'RODZAJ','STRING[1]','Rodzaj'
         ,'NAZWA','STRING[50]','Nazwa'
         ,'TYP','INTEGER','Typ'
         ,'OPIS','SYS_MEMO','Opis'
      );
      .RA_DEF.ndx:=obj_new('RA_DEF','RODZAJ','RR');
      .RA_DEF.ndx.RA_DEF:=.RA_DEF.TAB.index('?');
      .RA_DEF.ndx.RODZAJ:=.RA_DEF.TAB.ndx_tmp(,,'RODZAJ',,,'SYMBOL',,);
      .RA_DEF.ndx.RR:=.RA_DEF.TAB.ndx_tmp(,,'RA_DEF',,,'RODZAJ',,,'SYMBOL',,);
      ~~
   ",-1),


   obj_meth('xml_add_attr_ra_def',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodająca atrybuty pomagające w identyfikacji rekordu tabeli RA_DEF. Metoda wymaga
::       prawidłowo wypełnionego bufora tabeli RA_DEF.
::   WE:  _a  [OBJECT] - Obiekt klasy XML_T.
::       [_b] [NUMBER] - Czy pomijać informacje o rodzaju? [0*/1]
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _xml:=_a;
      _bezRODZAJ:=_b;

      {? ~_bezRODZAJ || _xml.addAttr('ar',RA_DEF.RODZAJ)>0 || 1 ?} & _xml.addAttr('as',RA_DEF.SYMBOL)>0
   ",type_of(@.CLASS.XML_T),type_of(0),-1),

   obj_meth('xml_add_attr_ra_def',".xml_add_attr_ra_def(_a,0)",type_of(@.CLASS.XML_T),-1),


   obj_meth('ra_def2xml',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za eksport rekordów RA_DEF.
::   WE: _a [NUMBER] - Numer rekordu nadrzędnego w tabeli RA_DEF.
::       _b [OBJECT] - Obiekt klasy XML_T.
::       _c [NUMBER] - Numer elementu nadrzędnego w ramach obiektu _b.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _parentD:=_a;
      _xml:=_b;
      _parentXML:=_c;

      _ok:=1;
      RA_DEF.cntx_psh();
      RA_DEF.index('RA_DEF');
      RA_DEF.prefix(_parentD);
      {? RA_DEF.first()
      || {!
         |? _ra_def:=_xml.addElement('RA_DEF',,_parentXML);
            {? _ra_def>0
            || _ok:=_xml.addElement('SYMBOL',RA_DEF.SYMBOL,_ra_def)>0
                  & _xml.addElement('RODZAJ',RA_DEF.RODZAJ,_ra_def)>0 & .xml_add_attr_ra_def(_xml,1)
                  & _xml.addElement('NAZWA',RA_DEF.NAZWA,_ra_def)>0 & .xml_add_attr_ra_def(_xml)
                  & _xml.addElement('TYP',RA_DEF.TYP,_ra_def)>0 & .xml_add_attr_ra_def(_xml)
                  & _xml.addElement('OPIS',RA_DEF.memo_txt(0,1,'OPIS'),_ra_def)>0 & .xml_add_attr_ra_def(_xml)

                  & .ra_val2xml(RA_DEF.ref(),_xml,_ra_def)
                  & .ra_use2xml(RA_DEF.ref(),_xml,_ra_def);

               {? _ok
               || RA_DEF.cntx_psh();
                  RA_DEF.prefix(#RA_DEF.ref());
                  _sa:=RA_DEF.first();
                  RA_DEF.cntx_pop();
                  {? _sa
                  || _atrybuty:=_xml.addElement('atrybuty',,_ra_def);
                     {? _atrybuty>0
                     || _ok:=.xml_add_attr_ra_def(_xml)
                           & .ra_def2xml(#RA_DEF.ref(),_xml,_atrybuty)
                     ?}
                  ?}
               ?}
            || _ok:=0
            ?};
            _ok & RA_DEF.next()
         !}
      ?};
      RA_DEF.cntx_pop();
      _ok
   ",type_of(0),type_of(@.CLASS.XML_T),type_of(0),-1),


   obj_meth('xml2ra_def_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za import definicji atrybutów płacowych (RA_DEF).
::   WE: _a [TABLE]  - Tabela (wynik metody xml_tparse) ze strukturą XML.
::       _b [NUMBER] - Numer rekordu nadrzędnego w strukturze XML.
::       _c [NUMBER] - Numer rekordu nadrzędnego w strukturze danych.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _XML:=_a;
      _parentXML:=_b;
      _parentD:=_c;

      _ok:=1;
      _XML.cntx_psh();
      _XML.prefix(_parentXML);
      {? _XML.first()
      || _ref:=0;
         .RA_DEF.TAB.prefix();
         .RA_DEF.TAB.blank();
         .RA_DEF.TAB.RA_DEF:=_parentD;
         _opis:=~~;
         {!
         |? {? _XML.TYPE='E'
            || {? _XML.NAME='SYMBOL'
               || .RA_DEF.TAB.SYMBOL:=#_XML.VAL
               |? _XML.NAME='RODZAJ'
               || .RA_DEF.TAB.RODZAJ:=_XML.VAL
               |? _XML.NAME='NAZWA'
               || .RA_DEF.TAB.NAZWA:=_XML.VAL
               |? _XML.NAME='TYP'
               || .RA_DEF.TAB.TYP:=#_XML.VAL
               |? _XML.NAME='OPIS'
               || _opis:={? _XML.VTRUNC='T' || fopen(_XML.BVAL,'ur',0,1,1) || _XML.VAL ?}
               ?}
            ?};
            _XML.next()
         !};
         {? .RA_DEF.TAB.add()
         || _ref:=#.RA_DEF.TAB.ref();
            _too:=type_of(_opis);
            {? _too=type_of('')
            || .RA_DEF.TAB.memo_set(_opis,'OPIS');
               .RA_DEF.TAB.memo_put(,'OPIS')
            |? _too>100
            || .RA_DEF.TAB.memo_put(_opis,'OPIS');
               _opis.fclose()
            ?}
         || _ok:=0
         ?};

         {? _ref & _XML.first()
         || {!
::             Tak, jeszcze raz przeglądane są wszystkie rekordy podrzędne w stosunku do _parentXML. Jednak tym razem
::             interesują nas nie pola rekordu (SYMBOL, RODZAJ, ...), ale struktury zależne. Taka konstrukcja gwarantuje
::             nam, że struktury podrzędne będzie do czego podpiąć - rekord nadrzędny został utworzony.
            |? {? _XML.TYPE='E' & (_XML.NAME='wartosci' | _XML.NAME='rubryki' | _XML.NAME='atrybuty')
               || _ok:=_ok & .xml2tab(_XML,#_XML.ref(),_ref)
               ?};
               _ok & _XML.next()
            !}
         ?}
      ?};
      _XML.cntx_pop();
      _ok
   ",type_of(SYSLOG),type_of(0),type_of(0),-1),


   obj_meth('ref_ra_def',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) sprawdzająca, czy w tabeli RA_DEF istnieje definicja wskazanego atrybutu.
::   WE: _a [STRING] - Rodzaj atrybutu (S/U).
::       _b [NUMBER] - Symbol atrybutu.
::   WY: Wskazanie znalezionego rekordu lub null().
::----------------------------------------------------------------------------------------------------------------------
   "  _rodzaj:=_a;
      _symbol:=_b;

      RA_DEF.cntx_psh();
      RA_DEF.index('RODZAJ');
      RA_DEF.prefix(_rodzaj,_symbol);
      _ret:={? RA_DEF.first() || RA_DEF.ref() || null() ?};
      RA_DEF.cntx_pop();
      _ret
   ",type_of(''),type_of(0),-1),


   obj_meth('ref_ra_def_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) sprawdzająca, czy w tabeli tymczasowej .RA_DEF.TAB istnieje definicja wskazanego atrybutu.
::   WE: _a [STRING] - Rodzaj atrybutu (S/U).
::       _b [NUMBER] - Symbol atrybutu.
::   WY: Wskazanie znalezionego rekordu lub null().
::----------------------------------------------------------------------------------------------------------------------
   "  _rodzaj:=_a;
      _symbol:=_b;

      .RA_DEF.TAB.cntx_psh();
      .RA_DEF.TAB.index(.RA_DEF.ndx.RODZAJ);
      .RA_DEF.TAB.prefix(_rodzaj,_symbol);
      _ret:={? .RA_DEF.TAB.first() || .RA_DEF.TAB.ref() || null() ?};
      .RA_DEF.TAB.cntx_pop();
      _ret
   ",type_of(''),type_of(0),-1),


   obj_meth('rs_ra_def_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dla wskazanego rekordu w tabeli tymczasowej .RA_DEF.TAB zwraca rodzaj i symbol atrybutu.
::   WE: _a [NUMBER] - Numer rekordu w tabeli .RA_DEF.TAB
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
   "  _recno:=_a;

      _ret:=obj_new('ok','rodzaj','symbol');
      .RA_DEF.TAB.cntx_psh();
      .RA_DEF.TAB.prefix();
      {? .RA_DEF.TAB.seek(_recno)
      || _ret.ok:=1;
         _ret.rodzaj:=.RA_DEF.TAB.RODZAJ;
         _ret.symbol:=.RA_DEF.TAB.SYMBOL
      || _ret.ok:=0
      ?};
      .RA_DEF.TAB.cntx_pop();
      _ret
   ",type_of(0),-1),


   obj_meth('add_ra_def',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodaje do tabeli RA_DEF rekord na podstawie bufora tabeli .RA_DEF.TAB.
::   WE: _a [REFERENCE] - Wskazanie rekordu nadrzędnego.
::   WY: Wskazanie na dodany rekord lub null().
::----------------------------------------------------------------------------------------------------------------------
   "  _parent:=_a;

      _ret:=null();
      RA_DEF.blank();
      RA_DEF.RA_DEF:=#_parent;
      RA_DEF.RODZAJ:=.RA_DEF.TAB.RODZAJ;
      RA_DEF.SYMBOL:=.RA_DEF.TAB.SYMBOL;
      RA_DEF.NAZWA:=.RA_DEF.TAB.NAZWA;
      RA_DEF.TYP:=.RA_DEF.TAB.TYP;
      {? RA_DEF.add()
      || _fh:=.RA_DEF.TAB.memo_get('r','OPIS',0);
         {? _fh.is_open()
         || {? RA_DEF.memo_put(_fh,'OPIS')
            || _ret:=RA_DEF.ref()
            ?};
            _fh.fclose()
         ?};
         obj_del(_fh);
         &_fh
      ?};
      _ret
   ",type_of(null()),-1),


   obj_meth('put_ra_def',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) aktualizuje bieżący rekord tabeli RA_DEF na podstawie bieżącego rekordu tabeli .RA_DEF.TAB.
::       Rekord tabeli RA_DEF został ustalony na podstawie wartości pól RODZAJ i SYMBOL, dlatego nie ma potrzeby
::       aktualizacji tych pól.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _ret:=1;
      _zmiana:=0;
      {? RA_DEF.NAZWA<>.RA_DEF.TAB.NAZWA
      || RA_DEF.NAZWA:=.RA_DEF.TAB.NAZWA;
         _zmiana+=1
      ?};
      {? RA_DEF.TYP<>.RA_DEF.TAB.TYP
      || RA_DEF.TYP:=.RA_DEF.TAB.TYP;
         _zmiana+=1
      ?};
      {? _zmiana
      || _ret:=RA_DEF.put()
      ?};
      {? _ret
      || _fh:=.RA_DEF.TAB.memo_get('r','OPIS',0);
         {? _fh.is_open()
         || _fhd:=RA_DEF.memo_get('r','OPIS',0);
            {? _fhd.is_open()
            || {? hash(_fh)<>hash(_fhd)
               || _ret:=RA_DEF.memo_put(_fh,'OPIS')
               ?};
               _fhd.fclose()
            || _ret:=0
            ?};
            obj_del(_fhd);
            &_fhd;
            _fh.fclose()
         || _ret:=0
         ?};
         obj_del(_fh);
         &_fh
      ?};
      _ret
   ",-1),


   obj_meth('sync_ra_def',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodająca / aktualizująca definicję wskazanego atrybutu.
::   WE: _a [STRING] - Rodzaj atrybutu (S/U).
::       _b [NUMBER] - Symbol atrybutu.
::       _c [NUMBER] - Aktualizacja?
::                      0 - Nie (tylko dodawaj nowe).
::                      1 - Tak (dodawaj nowe i aktualizuj istniejące).
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _rodzaj:=_a;
      _symbol:=_b;
      _tryb:=_c;

      _iref:=.ref_ra_def_tab(_rodzaj,_symbol);
      {? _iref=null()
      || return('Brak definicji atrybutu [%1,%2] w importowanym pliku.'@[_rodzaj,$_symbol])
      ?};

      _ret:='';
      RA_DEF.cntx_psh();
      RA_DEF.index('RA_DEF');
      RA_DEF.prefix();
      .RA_DEF.TAB.cntx_psh();
      .RA_DEF.TAB.index(.RA_DEF.ndx.RA_DEF);
      .RA_DEF.TAB.prefix();
      {? .RA_DEF.TAB.seek(_iref)
      || _dref:=.ref_ra_def(_rodzaj,_symbol);
         {? _dref<>null()
::          Importowany atrybut ISTNIEJE już w danych.
         || {? _tryb=0
::             Jeżeli to nie jest aktualizacja, to zgłaszamy błąd.
            || _ret:='Definicja atrybutu [%1,%2] już istnieje.'@[_rodzaj,$_symbol]
            |? ~RA_DEF.seek(_dref)
            || _ret:='Odnalezienie definicji atrybutu [%1,%2] nie powiodło się.'@[_rodzaj,$_symbol]
            |? ~.put_ra_def()
::             Aktualizacja definicji nie powiodła się ...
            || _ret:='Aktualizacja definicji atrybutu [%1,%2] nie powiodła się.'@[_rodzaj,$_symbol]
            ?}

::          Importowany atrybut nie istnieje w danych.
         || {? .RA_DEF.TAB.RA_DEF
            || _parent_irs:=.rs_ra_def_tab(.RA_DEF.TAB.RA_DEF);
               {? ~_parent_irs.ok
               || _ret:=
                     'Odnalezienie (w danych importowanych) rekordu nadrzędnego atrybutu [%1,%2] nie powiodło się.'@
                     [_rodzaj,$_symbol]
               |? _parent_dref:=.ref_ra_def(_parent_irs.rodzaj,_parent_irs.symbol);
                  _parent_dref=null()
               || _ret:=
                     'Odnalezienie (w danych aktualizowanych) rekordu nadrzędnego atrybutu [%1,%2] nie powiodło się.'@
                     [_rodzaj,$_symbol]
               ?}
            || _parent_dref:=null()
            ?};
            {? _ret=''
            || _dref:=.add_ra_def(_parent_dref);
               _dref=null()
            || _ret:='Utworzenie rekordu definicji atrybutu [%1,%2] nie powiodło się.'@[_rodzaj,$_symbol]
            ?}
         ?};
         {? _ret=''
         || _ret:=.sync_ra_val(_iref,_dref,_tryb)
         ?};
         {? _ret=''
         || _ret:=.sync_ra_use(_iref,_dref,_tryb)
         ?};
         {? _ret=''
         || .RA_DEF.TAB.prefix(#_iref);
            {? .RA_DEF.TAB.first()
            || {!
               |? _ret:=.sync_ra_def(.RA_DEF.TAB.RODZAJ,.RA_DEF.TAB.SYMBOL,_tryb);
                  _ret='' & .RA_DEF.TAB.next()
               !}
            ?}
         ?}
      ?};
      .RA_DEF.TAB.cntx_pop();
      RA_DEF.cntx_pop();
      _ret
   ",type_of(''),type_of(0),type_of(0),-1),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######     #            #     #    #    #
:: #     #   # #           #     #   # #   #
:: #     #  #   #          #     #  #   #  #
:: ######  #     #         #     # #     # #
:: #   #   #######          #   #  ####### #
:: #    #  #     #           # #   #     # #
:: #     # #     # #######    #    #     # #######
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('create_ra_val_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) tworząca strukturę do przechowywania danych o wartościach atrybutów (pole .RA_VAL).
::       Nazwa i budowa indeksu zgodna z definicją w MacroBUILDER-ze.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
   "  .RA_VAL:=obj_new('TAB','ndx');
      .RA_VAL.TAB:=tab_tmp(3
         ,'RODZAJ','STRING[1]','Rodzaj'
         ,'SYMBOL','INTEGER','Symbol'
         ,'DATA','DATE','Data'
         ,'WARTOSC','STRING[255]','Wartość'
         ,'RA_DEF','INTEGER','Numer rekordu atrybutu'
      );
      .RA_VAL.ndx:=obj_new('RA_VAL','UNIQUE');
      .RA_VAL.ndx.RA_VAL:=.RA_VAL.TAB.index('?');
      .RA_VAL.ndx.UNIQUE:=.RA_VAL.TAB.ndx_tmp(,,'RA_DEF',,,'DATA',,);
      ~~
   ",-1),


   obj_meth('xml_add_attr_ra_val',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodająca atrybuty pomagające w identyfikacji rekordu tabeli RA_VAL. Metoda wymaga
::       prawidłowo wypełnionych buforów tabeli RA_DEF i RA_VAL.
::   WE:  _a  [OBJECT] - Obiekt klasy XML_T.
::       [_b] [NUMBER] - Czy pomijać informacje o dacie? [0*/1]
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _xml:=_a;
      _bezDATA:=_b;

      .xml_add_attr_ra_def(_xml) & {? ~_bezDATA || _xml.addAttr('d',xml_value(RA_VAL.DATA))>0 || 1 ?}
   ",type_of(@.CLASS.XML_T),type_of(0),-1),

   obj_meth('xml_add_attr_ra_val',".xml_add_attr_ra_val(_a,0)",type_of(@.CLASS.XML_T),-1),


   obj_meth('ra_val2xml',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za eksport rekordów RA_VAL dla wskazanego rekordu tabeli RA_DEF.
::   WE: _a [REFERENCE] - Numer rekordu nadrzędnego w tabeli RA_DEF.
::       _b [OBJECT]    - Obiekt klasy XML_T.
::       _c [NUMBER]    - Numer elementu nadrzędnego w ramach obiektu _b.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _ref:=_a;
      _xml:=_b;
      _parent:=_c;

      _ok:=1;
      RA_VAL.cntx_psh();
      RA_VAL.index('UNIQUE');
      RA_VAL.prefix(_ref);
      {? RA_VAL.first()
      || RA_DEF.cntx_psh();
         RA_DEF.prefix();
::       Podczytanie rekordu tabeli RA_DEF na rzecz metody .xml_add_attr_ra_def().
         RA_VAL.RA_DEF();
         _wartosci:=_xml.addElement('wartosci',,_parent);
         {? _wartosci>0
         || _ok:=.xml_add_attr_ra_def(_xml)
               & _xml.addAttr('a',$RA_DEF.SYMBOL+RA_DEF.RODZAJ)>0;
            {? _ok
            || {!
               |? _ra_val:=_xml.addElement('RA_VAL',,_wartosci);
                  {? _ra_val>0
                  || _ok:=_xml.addElement('DATA',RA_VAL.DATA,_ra_val)>0 & .xml_add_attr_ra_val(_xml,1)
                        & _xml.addElement('WARTOSC',RA_VAL.WARTOSC,_ra_val)>0 & .xml_add_attr_ra_val(_xml)
                  || _ok:=0
                  ?};
                  _ok & RA_VAL.next()
               !}
            ?}
         ?};
         RA_DEF.cntx_pop()
      ?};
      RA_VAL.cntx_pop();
      _ok
   ",type_of(null()),type_of(@.CLASS.XML_T),type_of(0),-1),


   obj_meth('xml2ra_val_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za import wartości atrybutów płacowych (RA_VAL).
::   WE: _a [TABLE]  - Tabela (wynik metody xml_tparse) ze strukturą XML.
::       _b [NUMBER] - Numer rekordu nadrzędnego w strukturze XML.
::       _c [NUMBER] - Numer rekordu nadrzędnego w strukturze danych.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _XML:=_a;
      _parentXML:=_b;
      _parentD:=_c;

      _ok:=1;
      .RA_DEF.TAB.cntx_psh();
      _XML.cntx_psh();
      _XML.prefix(_parentXML);
      {? _XML.first() & .RA_DEF.TAB.seek(_parentD)
      || .RA_VAL.TAB.prefix();
         .RA_VAL.TAB.blank();
         .RA_VAL.TAB.RA_DEF:=_parentD;
         .RA_VAL.TAB.RODZAJ:=.RA_DEF.TAB.RODZAJ;
         .RA_VAL.TAB.SYMBOL:=.RA_DEF.TAB.SYMBOL;
         {!
         |? {? _XML.TYPE='E'
            || {? _XML.NAME='DATA'
               || .RA_VAL.TAB.DATA:=exec('str2date','#convert',_XML.VAL)
               |? _XML.NAME='WARTOSC'
               || .RA_VAL.TAB.WARTOSC:=_XML.VAL
               ?}
            ?};
            _XML.next()
         !};
         _ok:=.RA_VAL.TAB.add()
      ?};
      _XML.cntx_pop();
      .RA_DEF.TAB.cntx_pop();
      _ok
   ",type_of(SYSLOG),type_of(0),type_of(0),-1),


   obj_meth('sync_ra_val',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodająca / aktualizująca wartości atrybutu.
::   WE: _a [REFERENCE] - Wskazanie rekordu atrybutu w tabeli .RA_DEF.TAB.
::       _b [REFERENCE] - Wskazanie rekordu atrybutu w tabeli RA_DEF.
::       _c [NUMBER] - Aktualizacja?
::                      0 - Nie (tylko dodawaj nowe).
::                      1 - Tak (dodawaj nowe i aktualizuj istniejące).
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _iref:=_a;
      _dref:=_b;
      _tryb:=_c;

      _ret:='';
      .RA_VAL.TAB.cntx_psh();
      .RA_VAL.TAB.index(.RA_VAL.ndx.UNIQUE);
      .RA_VAL.TAB.prefix(#_iref);
      {? .RA_VAL.TAB.first()
      || RA_VAL.cntx_psh();
         RA_VAL.index('UNIQUE');
         RA_VAL.prefix(_dref);
         {!
         |? {? RA_VAL.find_key(.RA_VAL.TAB.DATA)
            || {? _tryb=0
               || _ret:=
                     'Wartość atrybutu [%1,%2] na dzień %3 już istnieje.'@
                     [.RA_VAL.TAB.RODZAJ,$.RA_VAL.TAB.SYMBOL,.RA_VAL.TAB.DATA$1]
               |? RA_VAL.WARTOSC<>.RA_VAL.TAB.WARTOSC
               || RA_VAL.WARTOSC:=.RA_VAL.TAB.WARTOSC;
                  {? ~RA_VAL.put()
                  || _ret:=
                        'Zmiana stanu wartości atrybutu [%1,%2] na dzień %3 nie powiodło się.'@
                        [.RA_VAL.TAB.RODZAJ,$.RA_VAL.TAB.SYMBOL,.RA_VAL.TAB.DATA$1]
                  ?}
               ?}
            || RA_VAL.blank();
               RA_VAL.RA_DEF:=_dref;
               RA_VAL.DATA:=.RA_VAL.TAB.DATA;
               RA_VAL.WARTOSC:=.RA_VAL.TAB.WARTOSC;
               {? ~RA_VAL.add()
               || _ret:=
                     'Dołączenie wartości atrybutu [%1,%2] na dzień %3 nie powiodło się.'@
                     [.RA_VAL.TAB.RODZAJ,$.RA_VAL.TAB.SYMBOL,.RA_VAL.TAB.DATA$1]
               ?}
            ?};
            _ret='' & .RA_VAL.TAB.next()
         !};
         RA_VAL.cntx_pop()
      ?};
      .RA_VAL.TAB.cntx_pop();
      _ret
   ",type_of(null()),type_of(null()),type_of(0),-1),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######     #            #     #  #####  #######
:: #     #   # #           #     # #     # #
:: #     #  #   #          #     # #       #
:: ######  #     #         #     #  #####  #####
:: #   #   #######         #     #       # #
:: #    #  #     #         #     # #     # #
:: #     # #     # #######  #####   #####  #######
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('create_ra_use_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) tworząca strukturę do przechowywania danych o użyciach atrybutów (pole .RA_USE).
::       Nazwa i budowa indeksu zgodna z definicją w MacroBUILDER-ze.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
   "  .RA_USE:=obj_new('TAB','ndx');
      .RA_USE.TAB:=tab_tmp(4
         ,'RODZAJ','STRING[1]','Rodzaj'
         ,'SYMBOL','INTEGER','Symbol'
         ,'R','INTEGER','Rubryka'
         ,'DATA','DATE','Data'
         ,'STAN','STRING[1]','Stan'
         ,'RA_DEF','INTEGER','Numer rekordu atrybutu'
      );
      .RA_USE.ndx:=obj_new('DEF_R','RN','RA_USE');
      .RA_USE.ndx.DEF_R:=.RA_USE.TAB.index('?');
      .RA_USE.ndx.RN:=.RA_USE.TAB.ndx_tmp(,,'R',,,'RODZAJ',,,'SYMBOL',,);
      .RA_USE.ndx.RA_USE:=.RA_USE.TAB.ndx_tmp(,,'RA_DEF',,,'R',,,'DATA',,);
      ~~
   ",-1),


   obj_meth('xml_add_attr_ra_use',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodająca atrybuty pomagające w identyfikacji rekordu tabeli RA_USE. Metoda wymaga
::       prawidłowo wypełnionych buforów tabeli RA_DEF i RA_USE.
::   WE:  _a  [OBJECT] - Obiekt klasy XML_T.
::       [_b] [NUMBER] - Czy pomijać informacje o rubryce? [0*/1]
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _xml:=_a;
      _bezR:=_b;

      .xml_add_attr_ra_def(_xml) & {? ~_bezR || _xml.addAttr('r',R.RN)>0 || 1 ?}
   ",type_of(@.CLASS.XML_T),type_of(0),-1),

   obj_meth('xml_add_attr_ra_use',".xml_add_attr_ra_use(_a,0)",type_of(@.CLASS.XML_T),-1),


   obj_meth('ra_use2xml',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za eksport rekordów RA_USE dla wskazanego rekordu tabeli RA_DEF.
::   WE: _a [REFERENCE] - Numer rekordu nadrzędnego w tabeli RA_DEF.
::       _b [OBJECT]    - Obiekt klasy XML_T.
::       _c [NUMBER]    - Numer elementu nadrzędnego w ramach obiektu _b.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _ref:=_a;
      _xml:=_b;
      _parent:=_c;

      _ok:=1;
      RA_DEF.cntx_psh();
      RA_DEF.prefix();
      {? RA_DEF.seek(_ref)
      || RA_USE.cntx_psh();
         RA_USE.index('DEF_RN');
         RA_USE.prefix(RA_DEF.RODZAJ,RA_DEF.SYMBOL);
         {? RA_USE.first()
         || _rubryki:=_xml.addElement('rubryki',,_parent);
            {? _rubryki>0
            || _ok:=.xml_add_attr_ra_def(_xml);
               {? _ok
               || {!
                  |? _ra_use:=_xml.addElement('RA_USE',,_rubryki);
                     {? _ra_use>0
                     || _ok:=_xml.addElement('R',RA_USE.R().RN,_ra_use)>0 & .xml_add_attr_ra_use(_xml,1)
                           & _xml.addElement('DATA',RA_USE.DATA,_ra_use)>0 & .xml_add_attr_ra_use(_xml)
                           & _xml.addElement('STAN',RA_USE.STAN,_ra_use)>0 & .xml_add_attr_ra_use(_xml)
                     || _ok:=0
                     ?};
                     _ok & RA_USE.next()
                  !}
               ?}
            ?}
         ?};
         RA_USE.cntx_pop()
      ?};
      RA_DEF.cntx_pop();
      _ok
   ",type_of(null()),type_of(@.CLASS.XML_T),type_of(0),-1),


   obj_meth('xml2ra_use_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za import danych o użyciu atrybutów płacowych (RA_USE).
::   WE: _a [TABLE]  - Tabela (wynik metody xml_tparse) ze strukturą XML.
::       _b [NUMBER] - Numer rekordu nadrzędnego w strukturze XML.
::       _c [NUMBER] - Numer rekordu nadrzędnego w strukturze danych.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _XML:=_a;
      _parentXML:=_b;
      _parentD:=_c;

      _ok:=1;
      .RA_DEF.TAB.cntx_psh();
      _XML.cntx_psh();
      _XML.prefix(_parentXML);
      {? _XML.first() & .RA_DEF.TAB.seek(_parentD)
      || .RA_USE.TAB.prefix();
         .RA_USE.TAB.blank();
         .RA_USE.TAB.RA_DEF:=_parentD;
         .RA_USE.TAB.RODZAJ:=.RA_DEF.TAB.RODZAJ;
         .RA_USE.TAB.SYMBOL:=.RA_DEF.TAB.SYMBOL;
         {!
         |? {? _XML.TYPE='E'
            || {? _XML.NAME='R'
               || .RA_USE.TAB.R:=#_XML.VAL
               |? _XML.NAME='DATA'
               || .RA_USE.TAB.DATA:=exec('str2date','#convert',_XML.VAL)
               |? _XML.NAME='STAN'
               || .RA_USE.TAB.STAN:=_XML.VAL
               ?}
            ?};
            _XML.next()
         !};
         _ok:=.RA_USE.TAB.add()
      ?};
      _XML.cntx_pop();
      .RA_DEF.TAB.cntx_pop();
      _ok
   ",type_of(SYSLOG),type_of(0),type_of(0),-1),


   obj_meth('add_ra_use',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodaje rekord do tabeli RA_USE. Informacja o wykorzystaniu atrybutu domyślnie jest również
::       dodawana do atrybutów nadrzędnych (patrz parametr _e).
::   WE:  _a  [REFERENCE] - Wskazanie rekordu definicji atrybutu (RA_DEF).
::        _b  [REFERENCE] - Wskazanie rekordu rubryki płacowej (R).
::        _c  [DATE]      - Data obowiązywania zmiany.
::        _d  [STRING]    - Stan aktywności.
::       [_e] [NUMBER]    - Czy pomijać aktualizację atrybutów nadrzędnych [0*/1].
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  RA_USE.cntx_psh();
      RA_USE.index('RA_USE');
      RA_USE.prefix();
      _ret:=
         {? ~RA_USE.find_key(_a,_b,_c)
         || RA_USE.blank();
            RA_USE.RA_DEF:=_a;
            RA_USE.R:=_b;
            RA_USE.DATA:=_c;
            RA_USE.STAN:=_d;
            RA_USE.add(1)
         |? RA_USE.STAN=_d
         || 1
         || RA_USE.STAN:=_d;
            RA_USE.put(1)
         ?};
      {? _ret & _e=0
      || RA_DEF.cntx_psh();
         RA_DEF.prefix();
         {? RA_USE.RA_DEF().RA_DEF
         || {? RA_DEF.seek(RA_DEF.RA_DEF)
            || RA_USE.prefix(RA_DEF.ref(),_b);
               {? ~RA_USE.first()
               || _ret:=.add_ra_use(RA_DEF.ref(),_b,_c,_d,_e)
               ?}
            || _ret:=0
            ?}
         ?};
         RA_DEF.cntx_pop()
      ?};
      RA_USE.cntx_pop();
      _ret
   ",type_of(null()),type_of(null()),type_of(date()),type_of(''),type_of(0),-1),

   obj_meth('add_ra_use',".add_ra_use(_a,_b,_c,_d,0)",type_of(null()),type_of(null()),type_of(date()),type_of(''),-1),


   obj_meth('sync_ra_use',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodająca / aktualizująca wartości atrybutu.
::   WE: _a [REFERENCE] - Wskazanie rekordu atrybutu w tabeli .RA_DEF.TAB.
::       _b [REFERENCE] - Wskazanie rekordu atrybutu w tabeli RA_DEF.
::       _c [NUMBER] - Aktualizacja?
::                      0 - Nie (dodawaj brakujące).
::                      1 - Tak (dodawaj nowe i nadpisuj istniejące).
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _iref:=_a;
      _dref:=_b;
      _tryb:=_c;

      _ret:='';
      .RA_USE.TAB.cntx_psh();
      .RA_USE.TAB.index(.RA_USE.ndx.RA_USE);
      .RA_USE.TAB.prefix(#_iref);
      {? .RA_USE.TAB.first()
      || _norm:=obj_new('lista','add');
         _norm.lista:=',';
         _norm.add:=""
            _rs:=$#_a;
            {? .lista*',%1,'[_rs]=0
            || .lista+='%1,'[_rs]
            ?}
         "";
         R.cntx_psh();
         R.index('RUBKOD');
         R.prefix();
         RA_USE.cntx_psh();
         RA_USE.index('RA_USE');
         RA_USE.prefix(_dref);
         {!
         |? {? ~R.find_key(.RA_USE.TAB.R)
            || _ret:='W systemie brakuje definicji rubryki o kodzie %1.'@[$.RA_USE.TAB.R]
            |? RA_USE.find_key(R.ref(),.RA_USE.TAB.DATA)
            || {? RA_USE.STAN<>.RA_USE.TAB.STAN
               || RA_USE.STAN:=.RA_USE.TAB.STAN;
                  {? RA_USE.put()
                  || _norm.add(R.ref())
                  || _ret:=
                        'Zmiana statusu atrybutu [%1,%2] rubryki o kodzie %3 (%4 : %5) nie powiodła się.'@
                        [.RA_USE.TAB.RODZAJ,$.RA_USE.TAB.SYMBOL,$.RA_USE.TAB.R,.RA_USE.TAB.DATA$1,.RA_USE.TAB.STAN]
                  ?}
               ?}
            |? .add_ra_use(_dref,R.ref(),.RA_USE.TAB.DATA,.RA_USE.TAB.STAN)
            || _norm.add(R.ref())
            || _ret:=
                  'Przypisanie atrybutu [%1,%2] rubryce o kodzie %3 (%4 : %5) nie powiodło się.'@
                  [.RA_USE.TAB.RODZAJ,$.RA_USE.TAB.SYMBOL,$.RA_USE.TAB.R,.RA_USE.TAB.DATA$1,.RA_USE.TAB.STAN]
            ?};
            _ret='' & .RA_USE.TAB.next()
         !};
         {? _norm.lista<>','
         || _rrefs:=spli_str(1-_norm.lista-1);
            {! _rlp:=1 .. obj_len(_rrefs)
            |! exec('use_norm','rubatr',_dref,#_rrefs[_rlp])
            !}
         ?};
         RA_USE.cntx_pop();
         R.cntx_pop()
      ?};
      .RA_USE.TAB.cntx_pop();
      _ret
   ",type_of(null()),type_of(null()),type_of(0),-1),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: #######
::    #      ####    ####   #        ####
::    #     #    #  #    #  #       #
::    #     #    #  #    #  #        ####
::    #     #    #  #    #  #            #
::    #     #    #  #    #  #       #    #
::    #      ####    ####   ######   ####
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('eraseOne',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) usuwa wszystkie rekordy, ze wskazanej tabeli. Stosowana jest metoda .del(), której można
::       używać również w transakcji.
::   WE:
::   WY: Wynik operacji:
::          1 - Wszystkie rekordy zostały usunięte.
::          0 - W tabeli pozostały rekordy, których usunięcie nie powiodło się.
::----------------------------------------------------------------------------------------------------------------------
   "  _a.cntx_psh();
      _a.prefix();
      {? _a.first()
      || {!
         |? _a.del()
         !}
      ?};
      _ret:=~_a.first();
      _a.cntx_pop();
     _ret
   ",type_of(SYSLOG),-1),


   obj_meth('eraseAll',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) usuwa rekordy z tabel tymczasowych wykorzystywanych podczas importu.
::   WE:
::   WY: Wynik operacji:
::          1 - Rekordy z wszystkich tabel zostały usunięte.
::          0 - Usunięcie wszystkich rekordów z wszystkich tabel nie powiodło się.
::----------------------------------------------------------------------------------------------------------------------
   "  .eraseOne(.RA_DEF.TAB) & .eraseOne(.RA_VAL.TAB) & .eraseOne(.RA_USE.TAB)
   ",-1),


   obj_meth('file_name',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) zwracająca pełną ścieżkę dostępu do importowanego / eksportowanego pliku.
::   WE: _a [STRING] - Kod miejsca położenia pliku:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                      LUB
::                         pełna ścieżka dostępu do pliku.
::   WY: Pełna ścieżka dostępu do pliku.
::----------------------------------------------------------------------------------------------------------------------
   "  {? +_a=1 & (_a='g' | _a='l')
      || _fn:={? _a='g' || 'std_%1.dfg'[.base] || '%1.txt'[.base] ?};
         pth_dir(_fn)+.sep1+_fn
      || _a
      ?}
   ",type_of(''),-1),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: #######
:: #        #    #   ####   #  #    #  ######   ####
:: #        ##   #  #    #  #  ##   #  #       #
:: #####    # #  #  #       #  # #  #  #####    ####
:: #        #  # #  #  ###  #  #  # #  #            #
:: #        #   ##  #    #  #  #   ##  #       #    #
:: #######  #    #   ####   #  #    #  ######   ####
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('xml2tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) sterująca importem atrybutów płacowych.
::   WE: _a [TABLE]  - Tabela (wynik metody xml_tparse) ze strukturą XML.
::       _b [NUMBER] - Numer rekordu nadrzędnego w strukturze XML.
::       _c [NUMBER] - Numer rekordu nadrzędnego w strukturze danych.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _XML:=_a;
      _parentXML:=_b;
      _parentD:=_c;

      _ok:=1;
      _XML.cntx_psh();
      _XML.prefix(_parentXML);
      {? _XML.first()
      || {!
         |? {? _XML.TYPE='E'
            || {? _XML.NAME='RA_DEF'
               || _ok:=.xml2ra_def_tab(_XML,#_XML.ref(),_parentD)
               |? _XML.NAME='RA_VAL'
               || _ok:=.xml2ra_val_tab(_XML,#_XML.ref(),_parentD)
               |? _XML.NAME='RA_USE'
               || _ok:=.xml2ra_use_tab(_XML,#_XML.ref(),_parentD)
               ?}
            ?};
            _ok & _XML.next()
         !}
      ?};
      _XML.cntx_pop();
      _ok
   ",type_of(SYSLOG),type_of(0),type_of(0),-1),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######
:: #     #  #    #  #####   #       #   ####           #    #  ######  #####  #    #   ####   #####    ####
:: #     #  #    #  #    #  #       #  #    #          ##  ##  #         #    #    #  #    #  #    #  #
:: ######   #    #  #####   #       #  #               # ## #  #####     #    ######  #    #  #    #   ####
:: #        #    #  #    #  #       #  #               #    #  #         #    #    #  #    #  #    #       #
:: #        #    #  #    #  #       #  #    #          #    #  #         #    #    #  #    #  #    #  #    #
:: #         ####   #####   ######  #   ####           #    #  ######    #    #    #   ####   #####    ####
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('__init',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda inicjująca obiekt - utworzenie kilku struktur złożonych.
::   WE: _a [OBJECT]    - Wskazanie tworzonego obiektu.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
   "  _a.create_ra_def_tab();
      _a.create_ra_val_tab();
      _a.create_ra_use_tab();
      ~~
   "),


   obj_meth('add_attr',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda importująca komplet informacji (definicja, wartości, użycia) o wskazanych atrybutach płacowych.
::   WE:  _a [STRING] - Kod miejsca położenia pliku wejściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                       LUB
::                         pełna ścieżka dostępu do importowanego pliku.
::        _b  [STRING] - Lista (oddzielona przecinkami) atrybutów (rodzaj+symbol) do zaimportowania (np. 'S112,251,U7').
::                       Jeżeli rodzaj nie zostanie wskazany, to przyjmuje się, że dotyczy atrybutu systemowego.
::                       Tak więc zapis '251' jest równoznaczny zapisowi 'S251'.
::                       Dostępne są również metakody:
::                         'S*' - Wszystkie atrybuty systemowe;
::                         'U*' - Wszystkie atrybuty użytkownika;
::                         '*'  - Wszystkie atrybuty (systemowe i użytkownika). Zapis równoznaczny z 'S*,U*'.
::                       Import odbywa się w kolejności wyznaczonej przez listę.
::       [_c] [NUMBER] - Aktualizacja [domyślnie:0]
::                       0 - Nie. Jeżeli atrybut z listy zostanie znaleziony w danych (RA_DEF) i jego definicja jest
::                           inna niż w importowanym pliku, to jest to traktowane jako konflikt i zgłaszane jako błąd.
::                       1 - Tak. Jeżeli atrybut z listy zostanie znaleziony w danych (RA_DEF), to jego definicja
::                           zostanie zaktualizowana definicją z importowanego pliku.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _ret:=.read(_a);
      {? _ret<>''
      || return(_ret)
      ?};
      _tablica:=spli_str(_b,',');
      _tryb:=_c;

      _ds:=do_state();
      {? _ds=2
      || return(0)
      |? _ds=0
      || do()
      ?};

      {! _lpa:=1 .. obj_len(_tablica)
      |? _ret=''
      |! _el:=form(_tablica[_lpa]);
         {? 1+_el='S' | 1+_el='U'
         || _rodzaj:=1+_el;
            _symbol:=1-_el
         || _rodzaj:='S';
            _symbol:=_el
         ?};

         {? _symbol='*'
         || .RA_DEF.TAB.cntx_psh();
            .RA_DEF.TAB.index(.RA_DEF.ndx.RR);
            .RA_DEF.TAB.prefix(0,_rodzaj,);
            {? .RA_DEF.TAB.first()
            || {!
               |? _ret:=.sync_ra_def(.RA_DEF.TAB.RODZAJ,.RA_DEF.TAB.SYMBOL,_tryb);
                  _ret='' & .RA_DEF.TAB.next()
               !}
            ?};
            .RA_DEF.TAB.cntx_pop()
         |? (_symbol:=#_symbol)=0
         || _ret:='Nierozpoznany rodzaj / symbol atrybutu [%1].'@[_el]
         || _ret:=.sync_ra_def(_rodzaj,_symbol,_tryb)
         ?}
      !};

      {? _ds=0
      || {? _ret<>''
         || undo(_ret)
         ?};
         end()
      ?};

      _ret
   ",type_of(''),type_of(''),type_of(0),-1),

   obj_meth('add_attr',".add_attr(_a,_b,0)",type_of(''),type_of(''),-1),


   obj_meth('add_uses',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda aktualizująca przypisanie atrybutów dla wskazanych rubryk.
::   WE:  _a  [STRING] - Kod miejsca położenia pliku wejściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                       LUB
::                         pełna ścieżka dostępu do importowanego pliku.
::        _b  [STRING] - Lista (oddzielona przecinkami) rubryk płacowych.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _ret:=.read(_a);
      {? _ret<>''
      || return(_ret)
      ?};
      _tablica:=spli_str(_b,',');

      _ds:=do_state();
      {? _ds=2
      || return(0)
      |? _ds=0
      || do()
      ?};

      R.cntx_psh();
      R.index('RUBKOD');
      R.prefix();
      .RA_USE.TAB.cntx_psh();
      .RA_USE.TAB.index(.RA_USE.ndx.RN);
      {! _lpr:=1 .. obj_len(_tablica)
      |? _ret=''
      |! _rns:=_tablica[_lpr];
         _rn:=#_rns;
         {? _rn=0
         || _ret:='Nierozpoznany kod rubryki płacowej [%1].'@[_rns]
         |? ~R.find_key(_rn)
         || _ret:='W systemie brakuje definicji rubryki o kodzie %1.'@[_rns]
         |? .RA_USE.TAB.prefix(_rn);
            ~.RA_USE.TAB.first()
         || _ret:='Rubryka o kodzie %1 nie ma przypisanych atrybutów.'@[_rns]
         || {!
            |? _dref:=.ref_ra_def(.RA_USE.TAB.RODZAJ,.RA_USE.TAB.SYMBOL);
               {? _dref=null()
               || _ret:='W systemie brakuje definicji atrybutu [%1,%2].'@[.RA_USE.TAB.RODZAJ,.RA_USE.TAB.SYMBOL]
               |? ~.add_ra_use(_dref,R.ref(),.RA_USE.TAB.DATA,.RA_USE.TAB.STAN,1)
               || _ret:=
                     'Aktualizacja wykorzystania atrybutu [%1,%2] przez rubrykę %3 nie powiodła się.'@
                     [.RA_USE.TAB.RODZAJ,$.RA_USE.TAB.SYMBOL,$R.RN]
               || exec('use_norm','rubatr',_dref,R.ref())
               ?};
               _ret='' & .RA_USE.TAB.next()
            !}
         ?}
      !};
      .RA_USE.TAB.cntx_pop();
      R.cntx_pop();

      {? _ds=0
      || {? _ret<>''
         || undo(_ret)
         ?};
         end()
      ?};

      _ret
   ",type_of(''),type_of(''),-1),


   obj_meth('export',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Główna metoda eksportująca informacje o wszystkich atrybutach płacowych.
::   WE: [_a] [STRING] - Kod miejsca położenia pliku wyjściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                       LUB
::                         pełna ścieżka dostępu do tworzonego pliku.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   ".write(_a)",type_of(''),-1),

   obj_meth('export',".write('l')",-1),


   obj_meth('read',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Główna metoda czytająca z pliku XML i zapisująca do tabel tymczasowych informacje o atrybutach płacowych.
::   WE: [_a] [STRING] - Kod miejsca położenia pliku wejściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                       LUB
::                         pełna ścieżka dostępu do importowanego pliku.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _fnl:=.file_name(_a);

      {? ~.eraseAll()
      || 'Usunięcie danych z tabel tymczasowych nie powiodło się.'@
      |? _fh:=fopen(_fnl,'ur',0,0,1,1);
         ~_fh.is_open()
      || 'Otwarcie pliku %1 nie powiodło się.'@[_fnl]
      || echo('%1 - Import ...'@[_fnl]);
         _XML:=xml_tparse(_fh);
         {? type_of(_XML)=type_of(~~)
         || _ret:='Plik %1 nie zawiera poprawnej definicji atrybutów płacowych.'@[_fnl]
         |? echo('%1 - Analiza ...'@[_fnl]);
            ~.xml2tab(_XML,1,0)
         || _ret:='Analiza pliku %1 nie powiodła się.'@[_fnl]
         || _ret:=''
         ?};
         _fh.fclose();
         echo();
         _ret
      ?}
   ",type_of(''),-1),

   obj_meth('read',".read('l')",-1),


   obj_meth('write',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Główna metoda zapisująca do pliku XML informacje o wszystkich atrybutach płacowych.
::   WE: [_a] [STRING] - Kod miejsca położenia pliku wyjściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                       LUB
::                         pełna ścieżka dostępu do tworzonego pliku.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _xml:=obj_new(@.CLASS.XML_T);
::    Gdyby obiekt klasy XML_T był polem w bieżącej klasie (np. .XML), to przed eksportem należałoby skorzystać z metody
::    .XML.erase(). Jednak metoda ta nie może być wywoływana w transakcji ponieważ wywołuje metodę tabeli erase().
::    Oczywiście można zastąpić metodę tabeli erase() wywołaniami metody del(), ale ponieważ eksport atrybutów nie jest
::    funkcjonalnością czasowo newralgiczną, to zamiast bardzo zmieniać kod klasy XML_T, obiekt _xml będzie tworzony
::    przy każdym wywołaniu metody (a i tak najdłużej będzie trwał zapis do pliku).

      _fnl:=.file_name(_a);
      echo('%1 - Zapis ...'@[_fnl]);
      _ok:=
         (_root:=_xml.addElement('dane'))>0
            & _xml.addAttr('opis','Definicja atrybutów płacowych')>0
               & .ra_def2xml(0,_xml,_root)
            & _xml.write(_fnl,0);
      echo();
      {? _ok
      || ''
      || 'Zapis danych do pliku %1 nie powiódł się.'@[_fnl]
      ?}
   ",type_of(''),-1),

   obj_meth('write',".write('l')",-1)


);
~~


\atrplagrpimex_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Deklaracja klasy obsługującej import / eksport grup atrybutów płacowych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Przy powtórnym wywołaniu deklaracji klasy AtrPlaGrpImEx - zakończ.
{? var_pres('AtrPlaGrpImEx',@.CLASS)>0
|| return()
?};
:: Deklaracje klas wykorzystywanych przez obiekty klasy AtrPlaGrpImEx.
exec('xml_t_decl','#xml_t');


obj_decl('AtrPlaGrpImEx',


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######
:: #     #  #####   #  #    #    ##    #####  ######          ######  #  ######  #       #####    ####
:: #     #  #    #  #  #    #   #  #     #    #               #       #  #       #       #    #  #
:: ######   #    #  #  #    #  #    #    #    #####           #####   #  #####   #       #    #   ####
:: #        #####   #  #    #  ######    #    #               #       #  #       #       #    #       #
:: #        #   #   #   #  #   #    #    #    #               #       #  #       #       #    #  #    #
:: #        #    #  #    ##    #    #    #    ######          #       #  ######  ######  #####    ####
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


:: Domyślna nazwa pliku importu/eksportu.
   obj_fld('base','grupy_atrybutow_placowych'),


:: Separator katalogów po stronie serwera aplikacji.
   obj_fld('sep1',exec('sep','#file',1)),


:: Tablica elementów nazwanych (tworzona podczas inicjalizacji obiektu) do przechowywania danych o grupach atrybutów.
   obj_fld('RA_GRPN',~~),


:: Tablica elementów nazwanych (tworzona podczas inicjalizacji obiektu) do przechowywania danych atrybutach w grupie.
   obj_fld('RA_GRPPA',~~),


:: Tablica elementów nazwanych (tworzona podczas inicjalizacji obiektu) do przechowywania danych o rybrykach w grupie.
   obj_fld('RA_GRPPR',~~),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######
:: #     #  #####   #  #    #    ##    #####  ######          #    #  ######  #####  #    #   ####   #####    ####
:: #     #  #    #  #  #    #   #  #     #    #               ##  ##  #         #    #    #  #    #  #    #  #
:: ######   #    #  #  #    #  #    #    #    #####           # ## #  #####     #    ######  #    #  #    #   ####
:: #        #####   #  #    #  ######    #    #               #    #  #         #    #    #  #    #  #    #       #
:: #        #   #   #   #  #   #    #    #    #               #    #  #         #    #    #  #    #  #    #  #    #
:: #        #    #  #    ##    #    #    #    ######          #    #  ######    #    #    #   ####   #####    ####
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######     #             #####  ######  ######  #     #
:: #     #   # #           #     # #     # #     # ##    #
:: #     #  #   #          #       #     # #     # # #   #
:: ######  #     #         #  #### ######  ######  #  #  #
:: #   #   #######         #     # #   #   #       #   # #
:: #    #  #     #         #     # #    #  #       #    ##
:: #     # #     # #######  #####  #     # #       #     #
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('create_ra_grpn_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) tworząca strukturę do przechowywania danych o definicji grup atrybutów płacowych.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
   "  .RA_GRPN:=obj_new('TAB','ndx');
      .RA_GRPN.TAB:=tab_tmp(1
         ,'SYMBOL','STRING[10]','Symbol'@
         ,'OPIS','STRING[60]','Opis'@
         ,'KOMENT','SYS_MEMO','Komentarz'@
      );
      .RA_GRPN.ndx:=obj_new('SYMBOL');
      .RA_GRPN.ndx.SYMBOL:=.RA_GRPN.TAB.index('?');
      ~~
   ",-1),


   obj_meth('xml_add_attr_ra_grpn',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodająca atrybuty pomagające w identyfikacji rekordu tabeli RA_GRPN. Metoda wymaga
::       prawidłowo wypełnionego bufora tabeli RA_GRPN.
::   WE:  _a  [OBJECT] - Obiekt klasy XML_T.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _xml:=_a;

      _xml.addAttr('s',RA_GRPN.SYMBOL)>0
   ",type_of(@.CLASS.XML_T),-1),


   obj_meth('ra_grpn2xml',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za eksport rekordów RA_GRPN.
::   WE: _a [NUMBER] - Numer rekordu nadrzędnego w tabeli RA_GRPN.
::       _b [OBJECT] - Obiekt klasy XML_T.
::       _c [NUMBER] - Numer elementu nadrzędnego w ramach obiektu _b.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _parentD:=_a;
      _xml:=_b;
      _parentXML:=_c;

      _ok:=1;
      RA_GRPN.cntx_psh();
      RA_GRPN.index('SYMBOL');
      RA_GRPN.prefix();
      {? RA_GRPN.first()
      || {!
         |? _ra_grpn:=_xml.addElement('RA_GRPN',,_parentXML);
            {? _ra_grpn>0
            || _ok:=_xml.addElement('SYMBOL',RA_GRPN.SYMBOL,_ra_grpn)>0
                  & _xml.addElement('OPIS',RA_GRPN.OPIS,_ra_grpn)>0 & .xml_add_attr_ra_grpn(_xml)
                  & _xml.addElement('KOMENT',RA_GRPN.memo_txt(0,1,'KOMENT'),_ra_grpn)>0 & .xml_add_attr_ra_grpn(_xml)

                  & .ra_grppa2xml(RA_GRPN.SYMBOL,_xml,_ra_grpn)
                  & .ra_grppr2xml(RA_GRPN.SYMBOL,_xml,_ra_grpn)
            || _ok:=0
            ?};
            _ok & RA_GRPN.next()
         !}
      ?};
      RA_GRPN.cntx_pop();
      _ok
   ",type_of(0),type_of(@.CLASS.XML_T),type_of(0),-1),


   obj_meth('xml2ra_grpn_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za import definicji grup atrybutów płacowych (RA_GRPN).
::   WE: _a [TABLE]  - Tabela (wynik metody xml_tparse) ze strukturą XML.
::       _b [NUMBER] - Numer rekordu nadrzędnego w strukturze XML.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _XML:=_a;
      _parentXML:=_b;

      _ok:=1;
      _XML.cntx_psh();
      _XML.prefix(_parentXML);
      {? _XML.first()
      || _ref:=null();
         .RA_GRPN.TAB.blank();
         _koment:=~~;
         {!
         |? {? _XML.TYPE='E'
            || {? _XML.NAME='SYMBOL'
               || .RA_GRPN.TAB.SYMBOL:=_XML.VAL
               |? _XML.NAME='OPIS'
               || .RA_GRPN.TAB.OPIS:=_XML.VAL
               |? _XML.NAME='KOMENT'
               || _koment:={? _XML.VTRUNC='T' || fopen(_XML.BVAL,'ur',0,1,1) || _XML.VAL ?}
               ?}
            ?};
            _XML.next()
         !};
         {? .RA_GRPN.TAB.add()
         || _ref:=.RA_GRPN.TAB.ref();
            _too:=type_of(_koment);
            {? _too=type_of('')
            || .RA_GRPN.TAB.memo_set(_koment,'KOMENT');
               .RA_GRPN.TAB.memo_put(,'KOMENT')
            |? _too>100
            || .RA_GRPN.TAB.memo_put(_koment,'KOMENT');
               _koment.fclose()
            ?}
         || _ok:=0
         ?};

         {? _ref<>null() & _XML.first()
         || {!
::             Tak, jeszcze raz przeglądane są wszystkie rekordy podrzędne w stosunku do _parentXML. Jednak tym razem
::             interesują nas nie pola rekordu (SYMBOL, OPIS, ...), ale struktury zależne. Taka konstrukcja gwarantuje
::             nam, że struktury podrzędne będzie do czego podpiąć - rekord nadrzędny został utworzony.
            |? {? _XML.TYPE='E' & (_XML.NAME='atrybuty' | _XML.NAME='rubryki')
               || _ok:=_ok & .xml2tab(_XML,#_XML.ref(),#_ref)
               ?};
               _ok & _XML.next()
            !}
         ?}
      ?};
      _XML.cntx_pop();
      _ok
   ",type_of(SYSLOG),type_of(0),-1),


   obj_meth('add_ra_grpn',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodaje rekord do tabeli RA_GRPN na podstawie bieżącego rekordu tabeli .RA_GRPN.TAB.
::   WE:
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _ret:=0;
      RA_GRPN.blank();
      RA_GRPN.SYMBOL:=.RA_GRPN.TAB.SYMBOL;
      RA_GRPN.OPIS:=.RA_GRPN.TAB.OPIS;
      {? RA_GRPN.add()
      || _fh:=.RA_GRPN.TAB.memo_get('r','KOMENT',0);
         {? _fh.is_open()
         || _ret:=RA_GRPN.memo_put(_fh,'KOMENT');
            _fh.fclose()
         ?};
         obj_del(_fh);
         &_fh
      ?};
      _ret
   ",-1),


   obj_meth('put_ra_grpn',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) aktualizuje bieżący rekord tabeli RA_GRPN na podstawie bieżącego rekordu tabeli .RA_GRPN.TAB.
::       Rekord tabeli RA_GRPN został ustalony na podstawie wartości pola SYMBOL, dlatego nie ma potrzeby aktualizacji
::       tego pola.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _ret:=1;
      {? RA_GRPN.OPIS<>.RA_GRPN.TAB.OPIS
      || RA_GRPN.OPIS:=.RA_GRPN.TAB.OPIS;
         _ret:=RA_GRPN.put()
      ?};
      {? _ret
      || _fh:=.RA_GRPN.TAB.memo_get('r','KOMENT',0);
         {? _fh.is_open()
         || _fhd:=RA_GRPN.memo_get('r','KOMENT',0);
            {? _fhd.is_open()
            || {? hash(_fh)<>hash(_fhd)
               || _ret:=RA_GRPN.memo_put(_fh,'KOMENT')
               ?};
               _fhd.fclose()
            || _ret:=0
            ?};
            obj_del(_fhd);
            &_fhd;
            _fh.fclose()
         || _ret:=0
         ?};
         obj_del(_fh);
         &_fh
      ?};
      _ret
   ",-1),


   obj_meth('sync_ra_grpn',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodająca / aktualizująca wartości grup.
::   WE: _a [STRING] - Symbol grupy.
::       _b [NUMBER] - Aktualizacja?
::                      0 - Nie (tylko dodawaj nowe).
::                      1 - Tak (dodawaj nowe i aktualizuj istniejące).
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _grpn:=_a;
      _tryb:=_b;

      _ret:='';
      .RA_GRPN.TAB.cntx_psh();
      .RA_GRPN.TAB.index(.RA_GRPN.ndx.SYMBOL);
      .RA_GRPN.TAB.prefix(_grpn,);
      {? .RA_GRPN.TAB.first()
      || RA_GRPN.cntx_psh();
         RA_GRPN.index('SYMBOL');
         RA_GRPN.prefix(_grpn,);
         {? RA_GRPN.first()
::          Importowana grupa ISTNIEJE już w danych.
         || {? _tryb=0
::             Jeżeli to nie jest aktualizacja, to zgłaszamy błąd.
            || _ret:='Definicja grupy atrybutów płacowych [%1] już istnieje.'@[_grpn]
            |? ~.put_ra_grpn()
            || _ret:='Aktualizacja grupy atrybutów płacowych [%1] nie powiodła się.'@[_grpn]
            ?}

::          Importowana grupa nie istnieje w danych.
         |? ~.add_ra_grpn()
         || _ret:='Utworzenie grupy atrybutów płacowych [%1] nie powiodła się.'@[_grpn]
         ?};
         {? _ret=''
         || _ret:=.sync_ra_grppa(.RA_GRPN.TAB.ref(),RA_GRPN.ref())
         ?};
         {? _ret=''
         || _ret:=.sync_ra_grppr(.RA_GRPN.TAB.ref(),RA_GRPN.ref())
         ?};
         RA_GRPN.cntx_pop()
      || _ret:='Brak definicji grupy atrybutów płacowych [%1] w importowanym pliku.'@[_grpn]
      ?};
      .RA_GRPN.TAB.cntx_pop();
      _ret
   ",type_of(''),type_of(0),-1),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######     #             #####  ######  ######  ######
:: #     #   # #           #     # #     # #     # #     #    ##
:: #     #  #   #          #       #     # #     # #     #   #  #
:: ######  #     #         #  #### ######  ######  ######   #    #
:: #   #   #######         #     # #   #   #       #        ######
:: #    #  #     #         #     # #    #  #       #        #    #
:: #     # #     # #######  #####  #     # #       #        #    #
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('create_ra_grppa_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) tworząca strukturę do przechowywania danych o atrybutach w grupie.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
   "  .RA_GRPPA:=obj_new('TAB','ndx');
      .RA_GRPPA.TAB:=tab_tmp(3
         ,'SYMBOL','STRING[10]','Symbol'@
         ,'A_RODZAJ','STRING[1]','Atrybut - rodzaj'@
         ,'A_SYMBOL','INTEGER','Atrybut - symbol'@
         ,'RA_GRPN','INTEGER','Grupa'@
      );
      .RA_GRPPA.ndx:=obj_new('GA','AG','RA_GRPN');
      .RA_GRPPA.ndx.GA:=.RA_GRPPA.TAB.index('?');
      .RA_GRPPA.ndx.AG:=.RA_GRPPA.TAB.ndx_tmp(,,'A_RODZAJ',,,'A_SYMBOL',,,'SYMBOL',,);
      .RA_GRPPA.ndx.RA_GRPN:=.RA_GRPPA.TAB.ndx_tmp(,,'RA_GRPN',,);
      ~~
   ",-1),


   obj_meth('ra_grppa2xml',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za eksport rekordów RA_GRPP dla wskazanego rekordu tabeli RA_DEF (dotyczących
::       atrybutów).
::   WE: _a [STRING] - Symbol grupy.
::       _b [OBJECT] - Obiekt klasy XML_T.
::       _c [NUMBER] - Numer elementu nadrzędnego w ramach obiektu _b.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _symbol:=_a;
      _xml:=_b;
      _parent:=_c;

      _ok:=1;
      RA_GRPP.cntx_psh();
      RA_GRPP.index('NA');
      RA_GRPP.prefix(_symbol,null());
      {? RA_GRPP.first()
      || _atrybuty:=_xml.addElement('atrybuty',,_parent);
         {? _atrybuty>0
         || _ok:=.xml_add_attr_ra_grpn(_xml);
            {? _ok
            || RA_GRPN.cntx_psh();
               RA_GRPN.prefix();
               RA_GRPP.RA_GRPN();
               RA_DEF.cntx_psh();
               RA_DEF.prefix();
               {!
               |? _ra_grpp:=_xml.addElement('RA_GRPPa',,_atrybuty);
                  {? _ra_grpp>0
                  || _ok:=_xml.addElement('RODZAJ',RA_GRPP.RA_DEF().RODZAJ,_ra_grpp)>0 & .xml_add_attr_ra_grpn(_xml)
                        & _xml.addElement('SYMBOL',$RA_GRPP.RA_DEF().SYMBOL,_ra_grpp)>0 & .xml_add_attr_ra_grpn(_xml)
                  || _ok:=0
                  ?};
                  _ok & RA_GRPP.next()
               !};
               RA_DEF.cntx_pop();
               RA_GRPN.cntx_pop()
            ?}
         ?}
      ?};
      RA_GRPP.cntx_pop();
      _ok
   ",type_of(''),type_of(@.CLASS.XML_T),type_of(0),-1),


   obj_meth('xml2ra_grppa_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za import danych o atrybutach w grupie.
::   WE: _a [TABLE]  - Tabela (wynik metody xml_tparse) ze strukturą XML.
::       _b [NUMBER] - Numer rekordu nadrzędnego w strukturze XML.
::       _c [NUMBER] - Numer rekordu grupy.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _XML:=_a;
      _parentXML:=_b;
      _grpn:=_c;

      _ok:=1;
      .RA_GRPN.TAB.cntx_psh();
      .RA_GRPN.TAB.prefix();
      _XML.cntx_psh();
      _XML.prefix(_parentXML);
      {? _XML.first() & .RA_GRPN.TAB.seek(_grpn)
      || .RA_GRPPA.TAB.blank();
         .RA_GRPPA.TAB.RA_GRPN:=_grpn;
         .RA_GRPPA.TAB.SYMBOL:=.RA_GRPN.TAB.SYMBOL;
         {!
         |? {? _XML.TYPE='E'
            || {? _XML.NAME='RODZAJ'
               || .RA_GRPPA.TAB.A_RODZAJ:=_XML.VAL
               |? _XML.NAME='SYMBOL'
               || .RA_GRPPA.TAB.A_SYMBOL:=#_XML.VAL
               ?}
            ?};
            _XML.next()
         !};
         _ok:=.RA_GRPPA.TAB.add()
      ?};
      _XML.cntx_pop();
      .RA_GRPN.TAB.cntx_pop();
      _ok
   ",type_of(SYSLOG),type_of(0),type_of(0),-1),


   obj_meth('sync_ra_grppa',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodająca / aktualizująca listę atrybutów w grupie.
::   WE: _a [REFERENCE] - Wskazanie rekordu grupy w danych importowanych (.RA_GRPN.TAB).
::       _b [REFERENCE] - Wskazanie rekordu grupy w danych rzeczywistych (RA_GRPN).
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _refi:=_a;
      _refd:=_b;

      _ret:='';
      .RA_GRPPA.TAB.cntx_psh();
      .RA_GRPPA.TAB.index(.RA_GRPPA.ndx.RA_GRPN);
      .RA_GRPPA.TAB.prefix(#_refi);
      {? .RA_GRPPA.TAB.first()
      || RA_DEF.cntx_psh();
         RA_DEF.index('RODZAJ');
         RA_DEF.prefix();
         RA_GRPP.cntx_psh();
         RA_GRPP.index('NA');
         RA_GRPP.prefix(.RA_GRPPA.TAB.SYMBOL,null());
         {!
         |? {? ~RA_DEF.find_key(.RA_GRPPA.TAB.A_RODZAJ,.RA_GRPPA.TAB.A_SYMBOL)
            || _ret:='W systemie brakuje definicji atrybutu [%1,%2].'@[.RA_GRPPA.TAB.A_RODZAJ,.RA_GRPPA.TAB.A_SYMBOL]
            |? ~RA_GRPP.find_key(RA_DEF.RODZAJ,RA_DEF.SYMBOL)
            || RA_GRPP.blank();
               RA_GRPP.RA_GRPN:=_refd;
               RA_GRPP.RA_DEF:=RA_DEF.ref();
               RA_GRPP.R:=null();
               {? ~RA_GRPP.add()
               || _ret:=
                     'Przypisanie atrybutu [%1,%2] do grupy %3 nie powiodło się.'@
                     [.RA_GRPPA.TAB.A_RODZAJ,$.RA_GRPPA.TAB.A_SYMBOL,.RA_GRPPA.TAB.SYMBOL]
               ?}
            ?};
            _ret='' & .RA_GRPPA.TAB.next()
         !};
         RA_GRPP.cntx_pop();
         RA_DEF.cntx_pop()
      ?};
      .RA_GRPPA.TAB.cntx_pop();

      _ret
   ",type_of(null()),type_of(null()),-1),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######     #             #####  ######  ######  ######
:: #     #   # #           #     # #     # #     # #     #  #####
:: #     #  #   #          #       #     # #     # #     #  #    #
:: ######  #     #         #  #### ######  ######  ######   #    #
:: #   #   #######         #     # #   #   #       #        #####
:: #    #  #     #         #     # #    #  #       #        #   #
:: #     # #     # #######  #####  #     # #       #        #    #
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('create_ra_grppr_tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) tworząca strukturę do przechowywania danych o rubrykach w grupie.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
   "  .RA_GRPPR:=obj_new('TAB','ndx');
      .RA_GRPPR.TAB:=tab_tmp(2
         ,'SYMBOL','STRING[10]','Symbol'@
         ,'R','INTEGER','Numer rubryki'@
         ,'RA_GRPN','INTEGER','Grupa'@
      );
      .RA_GRPPR.ndx:=obj_new('GR','RG','RA_GRPN');
      .RA_GRPPR.ndx.GR:=.RA_GRPPR.TAB.index('?');
      .RA_GRPPR.ndx.RG:=.RA_GRPPR.TAB.ndx_tmp(,,'R',,,'SYMBOL',,);
      .RA_GRPPR.ndx.RA_GRPN:=.RA_GRPPR.TAB.ndx_tmp(,,'RA_GRPN',,);
      ~~
   ",-1),


   obj_meth('ra_grppr2xml',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) odpowiedzialna za eksport rekordów RA_GRPP dla wskazanego rekordu tabeli RA_DEF (dotyczących
::       rubryk).
::   WE: _a [STRING] - Symbol grupy.
::       _b [OBJECT] - Obiekt klasy XML_T.
::       _c [NUMBER] - Numer elementu nadrzędnego w ramach obiektu _b.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _symbol:=_a;
      _xml:=_b;
      _parent:=_c;

      _ok:=1;
      RA_GRPP.cntx_psh();
      RA_GRPP.index('NR');
      RA_GRPP.prefix(_symbol,null());
      {? RA_GRPP.first()
      || _rubryki:=_xml.addElement('rubryki',,_parent);
         {? _rubryki>0
         || _ok:=.xml_add_attr_ra_grpn(_xml);
            {? _ok
            || RA_GRPN.cntx_psh();
               RA_GRPN.prefix();
               RA_GRPP.RA_GRPN();
               R.cntx_psh();
               R.prefix();
               {!
               |? _ok:=_xml.addElement('R',RA_GRPP.R().RN,_rubryki)>0
                     & .xml_add_attr_ra_grpn(_xml);
                  _ok & RA_GRPP.next()
               !};
               R.cntx_pop();
               RA_GRPN.cntx_pop()
            ?}
         ?}
      ?};
      RA_GRPP.cntx_pop();
      _ok
   ",type_of(''),type_of(@.CLASS.XML_T),type_of(0),-1),


   obj_meth('sync_ra_grppr',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) dodająca / aktualizująca listę atrybutów w grupie.
::   WE: _a [REFERENCE] - Wskazanie rekordu grupy w danych importowanych (.RA_GRPN.TAB).
::       _b [REFERENCE] - Wskazanie rekordu grupy w danych rzeczywistych (RA_GRPN).
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _refi:=_a;
      _refd:=_b;

      _ret:='';
      .RA_GRPPR.TAB.cntx_psh();
      .RA_GRPPR.TAB.index(.RA_GRPPR.ndx.RA_GRPN);
      .RA_GRPPR.TAB.prefix(#_refi);
      {? .RA_GRPPR.TAB.first()
      || R.cntx_psh();
         R.index('RUBKOD');
         R.prefix();
         RA_GRPP.cntx_psh();
         RA_GRPP.index('NR');
         RA_GRPP.prefix(.RA_GRPPR.TAB.SYMBOL,null());
         {!
         |? {? ~R.find_key(.RA_GRPPR.TAB.R)
            || _ret:='W systemie brakuje definicji rubryki o kodzie %1.'@[$.RA_GRPPR.TAB.R]
            |? ~RA_GRPP.find_key(R.RN)
            || RA_GRPP.blank();
               RA_GRPP.RA_GRPN:=_refd;
               RA_GRPP.RA_DEF:=null();
               RA_GRPP.R:=R.ref();
               {? ~RA_GRPP.add()
               || _ret:=
                     'Przypisanie rubryki o kodzie %1 do grupy %2 nie powiodło się.'@
                     [$.RA_GRPPR.TAB.R,.RA_GRPPR.TAB.SYMBOL]
               ?}
            ?};
            _ret='' & .RA_GRPPR.TAB.next()
         !};
         RA_GRPP.cntx_pop();
         R.cntx_pop()
      ?};
      .RA_GRPPR.TAB.cntx_pop();

      _ret
   ",type_of(null()),type_of(null()),-1),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: #######
::    #      ####    ####   #        ####
::    #     #    #  #    #  #       #
::    #     #    #  #    #  #        ####
::    #     #    #  #    #  #            #
::    #     #    #  #    #  #       #    #
::    #      ####    ####   ######   ####
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('eraseOne',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) usuwa wszystkie rekordy, ze wskazanej tabeli. Stosowana jest metoda .del(), której można
::       używać również w transakcji.
::   WE:
::   WY: Wynik operacji:
::          1 - Wszystkie rekordy zostały usunięte.
::          0 - W tabeli pozostały rekordy, których usunięcie nie powiodło się.
::----------------------------------------------------------------------------------------------------------------------
   "  _a.cntx_psh();
      _a.prefix();
      {? _a.first()
      || {!
         |? _a.del()
         !}
      ?};
      _ret:=~_a.first();
      _a.cntx_pop();
     _ret
   ",type_of(SYSLOG),-1),


   obj_meth('eraseAll',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) usuwa rekordy z tabel tymczasowych wykorzystywanych podczas importu.
::   WE:
::   WY: Wynik operacji:
::          1 - Rekordy z wszystkich tabel zostały usunięte.
::          0 - Usunięcie wszystkich rekordów z wszystkich tabel nie powiodło się.
::----------------------------------------------------------------------------------------------------------------------
   "  .eraseOne(.RA_GRPN.TAB) & .eraseOne(.RA_GRPPA.TAB) & .eraseOne(.RA_GRPPR.TAB)
   ",-1),


   obj_meth('file_name',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) zwracająca pełną ścieżkę dostępu do importowanego / eksportowanego pliku.
::   WE: _a [STRING] - Kod miejsca położenia pliku:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                      LUB
::                         pełna ścieżka dostępu do pliku.
::   WY: Pełna ścieżka dostępu do pliku.
::----------------------------------------------------------------------------------------------------------------------
   "  {? +_a=1 & (_a='g' | _a='l')
      || _fn:={? _a='g' || 'std_%1.dfg'[.base] || '%1.txt'[.base] ?};
         pth_dir(_fn)+.sep1+_fn
      || _a
      ?}
   ",type_of(''),-1),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: #######
:: #        #    #   ####   #  #    #  ######   ####
:: #        ##   #  #    #  #  ##   #  #       #
:: #####    # #  #  #       #  # #  #  #####    ####
:: #        #  # #  #  ###  #  #  # #  #            #
:: #        #   ##  #    #  #  #   ##  #       #    #
:: #######  #    #   ####   #  #    #  ######   ####
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('xml2tab',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda (prywatna) sterująca importem grup atrybutów płacowych.
::   WE: _a [TABLE]  - Tabela (wynik metody xml_tparse) ze strukturą XML.
::       _b [NUMBER] - Numer rekordu nadrzędnego w strukturze XML.
::       _c [NUMBER] - Numer rekordu grupy (dla pozycji).
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
   "  _XML:=_a;
      _parentXML:=_b;
      _grpn:=_c;

      _ok:=1;
      _XML.cntx_psh();
      _XML.prefix(_parentXML);
      {? _XML.first()
      || {!
         |? {? _XML.TYPE='E'
            || {? _XML.NAME='RA_GRPN'
               || _ok:=.xml2ra_grpn_tab(_XML,#_XML.ref())
               |? _XML.NAME='RA_GRPPa'
               || _ok:=.xml2ra_grppa_tab(_XML,#_XML.ref(),_grpn)
               |? _XML.NAME='R'
               || .RA_GRPN.TAB.cntx_psh();
                  .RA_GRPN.TAB.prefix();
                  {? .RA_GRPN.TAB.seek(_grpn)
                  || .RA_GRPPR.TAB.blank();
                     .RA_GRPPR.TAB.RA_GRPN:=_grpn;
                     .RA_GRPPR.TAB.SYMBOL:=.RA_GRPN.TAB.SYMBOL;
                     .RA_GRPPR.TAB.R:=#_XML.VAL;
                     _ok:=.RA_GRPPR.TAB.add()
                  ?};
                  .RA_GRPN.TAB.cntx_pop()
               ?}
            ?};
            _ok & _XML.next()
         !}
      ?};
      _XML.cntx_pop();
      _ok
   ",type_of(SYSLOG),type_of(0),type_of(0),-1),


:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: ######
:: #     #  #    #  #####   #       #   ####           #    #  ######  #####  #    #   ####   #####    ####
:: #     #  #    #  #    #  #       #  #    #          ##  ##  #         #    #    #  #    #  #    #  #
:: ######   #    #  #####   #       #  #               # ## #  #####     #    ######  #    #  #    #   ####
:: #        #    #  #    #  #       #  #               #    #  #         #    #    #  #    #  #    #       #
:: #        #    #  #    #  #       #  #    #          #    #  #         #    #    #  #    #  #    #  #    #
:: #         ####   #####   ######  #   ####           #    #  ######    #    #    #   ####   #####    ####
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


   obj_meth('__init',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda inicjująca obiekt - utworzenie kilku struktur złożonych.
::   WE: _a [OBJECT]    - Wskazanie tworzonego obiektu.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
   "  .create_ra_grpn_tab();
      .create_ra_grppa_tab();
      .create_ra_grppr_tab();
      ~~
   "),


   obj_meth('add_grpn',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Główna metoda aktualizująca dane o grupach atrybutów płacowych.
::   WE: [_a] [STRING] - Kod miejsca położenia pliku wejściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                       LUB
::                         pełna ścieżka dostępu do importowanego pliku.
::       [_b] [STRING] - Lista (oddzielona przecinkami) grup atrybutów płacowych. Element '*' oznacza wszystkie grupy.
::       [_c] [NUMBER] - Aktualizacja [domyślnie:0]
::                       0 - Nie. Jeżeli grupa z listy zostanie znaleziona w danych (RA_GRPN) i jego definicja jest
::                           inna niż w importowanym pliku, to jest to traktowane jako konflikt i zgłaszane jako błąd.
::                       1 - Tak. Jeżeli grupa z listy zostanie znaleziona w danych (RA_GRPN), to jej definicja
::                           zostanie zaktualizowana definicją z importowanego pliku.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _ret:=.read(_a);
      {? _ret<>''
      || return(_ret)
      ?};
      _tablica:=spli_str(_b,',');
      _tryb:=_c;

      _ds:=do_state();
      {? _ds=2
      || return(0)
      |? _ds=0
      || do()
      ?};

      {! _lp:=1 .. obj_len(_tablica)
      |? _ret=''
      |! _grpn:=form(_tablica[_lp]);
         {? _grpn='*'
         || .RA_GRPN.TAB.cntx_psh();
            .RA_GRPN.TAB.index(.RA_GRPN.ndx.SYMBOL);
            .RA_GRPN.TAB.prefix();
            {? .RA_GRPN.TAB.first()
            || {!
               |? _ret:=.sync_ra_grpn(.RA_GRPN.TAB.SYMBOL,_tryb);
                  _ret='' & .RA_GRPN.TAB.next()
               !}
            ?};
            .RA_GRPN.TAB.cntx_pop()
         || _ret:=.sync_ra_grpn(_grpn,_tryb)
         ?}
      !};

      {? _ds=0
      || {? _ret<>''
         || undo(_ret)
         ?};
         end()
      ?};

      _ret
   ",type_of(''),type_of(''),type_of(0),-1),

:: 0 0 0 = 0
   obj_meth('add_grpn',".add_grpn('l','*',0)",-1),

:: 0 0 1 = 1
   obj_meth('add_grpn',".add_grpn('l','*',_c)",type_of(~~),type_of(~~),type_of(0),-1),

:: 0 1 0 = 2
   obj_meth('add_grpn',".add_grpn('l',_b,0)",type_of(~~),type_of(''),-1),

:: 0 1 1 = 3
   obj_meth('add_grpn',".add_grpn('l',_b,_c)",type_of(~~),type_of(''),type_of(0),-1),

:: 1 0 0 = 4
   obj_meth('add_grpn',".add_grpn(_a,'*',0)",type_of(''),-1),

:: 1 0 1 = 5
   obj_meth('add_grpn',".add_grpn(_a,'*',_c)",type_of(''),type_of(~~),type_of(0),-1),

:: 1 1 0 = 6
   obj_meth('add_grpn',".add_grpn(_a,_b,0)",type_of(''),type_of(''),-1),


   obj_meth('export',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Główna metoda eksportująca informacje o wszystkich grupach atrybutów płacowych.
::   WE: [_a] [STRING] - Kod miejsca położenia pliku wyjściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                       LUB
::                         pełna ścieżka dostępu do tworzonego pliku.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   ".write(_a)",type_of(''),-1),

   obj_meth('export',".write('l')",-1),


   obj_meth('read',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Główna metoda czytająca z pliku XML i zapisująca do tabel tymczasowych informacje o grupach atrybutów
::       płacowych.
::   WE: [_a] [STRING] - Kod miejsca położenia pliku wejściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                       LUB
::                         pełna ścieżka dostępu do importowanego pliku.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _fnl:=.file_name(_a);

      {? ~.eraseAll()
      || 'Usunięcie danych z tabel tymczasowych nie powiodło się.'@
      |? _fh:=fopen(_fnl,'ur',0,0,1,1);
         ~_fh.is_open()
      || 'Otwarcie pliku %1 nie powiodło się.'@[_fnl]
      || _XML:=xml_tparse(_fh);
         {? type_of(_XML)=type_of(~~)
         || _ret:='Plik %1 nie zawiera poprawnej definicji atrybutów płacowych.'@[_fnl]
         |? ~.xml2tab(_XML,1,0)
         || _ret:='Analiza pliku %1 nie powiodła się.'@[_fnl]
         || _ret:=''
         ?};
         _fh.fclose();
         _ret
      ?}
   ",type_of(''),-1),

   obj_meth('read',".read('l')",-1),


   obj_meth('write',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Główna metoda zapisująca do pliku XML informacje o wszystkich grupach atrybutów płacowych.
::   WE: [_a] [STRING] - Kod miejsca położenia pliku wyjściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                       LUB
::                         pełna ścieżka dostępu do tworzonego pliku.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
   "  _xml:=obj_new(@.CLASS.XML_T);
::    Gdyby obiekt klasy XML_T był polem w bieżącej klasie (np. .XML), to przed eksportem należałoby skorzystać z metody
::    .XML.erase(). Jednak metoda ta nie może być wywoływana w transakcji ponieważ wywołuje metodę tabeli erase().
::    Oczywiście można zastąpić metodę tabeli erase() wywołaniami metody del(), ale ponieważ eksport grup atrybutów
::    nie jest funkcjonalnością czasowo newralgiczną, to zamiast bardzo zmieniać kod klasy XML_T, obiekt _xml będzie
::    tworzony przy każdym wywołaniu metody (a i tak najdłużej będzie trwał zapis do pliku).

      _fnl:=.file_name(_a);

      {? (_root:=_xml.addElement('dane'))>0
            & _xml.addAttr('opis','Definicja grup atrybutów płacowych')>0
               & .ra_grpn2xml(0,_xml,_root)
            & _xml.write(_fnl,0)
      || ''
      || 'Zapis danych do pliku %1 nie powiódł się.'@[_fnl]
      ?}
   ",type_of(''),-1),

   obj_meth('write',".write('l')",-1)

)


\ra_def_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Formuła (skrót) eksportująca atrybuty płacowe do pliku tekstowego (XML).
::   WE: [_a] [STRING] - Kod miejsca położenia pliku wyjściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                         w obu powyższych przypadkach nazwą bazową pliku będzie wartość pola .base.
::                       LUB
::                         pełna ścieżka dostępu do tworzonego pliku.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
_fn:={? var_pres('_a')=type_of('') || _a || 'l' ?};
exec('atrplaimex_decl','rubatr');
_atr:=obj_new(@.CLASS.AtrPlaImEx);
_atr.export(_fn)


\defaults
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Tworzy zapisy systemowe i domyślną konfigurację.
::   WE:
::   WY:
::  OLD: \defaults/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
exec('atrplaimex_decl','rubatr');
_atr:=obj_new(@.CLASS.AtrPlaImEx);
_atr.add_attr('g','*',1)


\add_attr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Dodaje definicję atrybutu systemowego.
::   WE:  _a  [INTEGER] - Symbol atrybutu nadrzędnego, jeśli zostanie pominięty lub jest mniejszy lub równy zero,
::                        to atrybutowi nie zostanie przypisany atrybut nadrzędny.
::        _b  [INTEGER] - Symbol.
::        _c  [STRING]  - Nazwa.
::       [_d] [INTEGER] - Typ wartości (zgodny z type_of()) [domyślnie: 1 - liczba].
::       [_e] [STRING]  - Opis [domyślnie: ''].
::       [_f] [ANY]     - Wartość atrybutu. Typ musi być zgodny z określonym przez _d.
::       [_g] [INTEGER] - Kod rubryki.
::       [_h] [INTEGER] - Kod rubryki.
::       [_i] [INTEGER] - Kod rubryki.
::       [_j] [INTEGER] - Kod rubryki.
::       [_k] [INTEGER] - Kod rubryki.
::       [_z] [INTEGER] - Kod rubryki.
::  OLD: \add_attr/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_src:='\\add_attr/rubatr.fml';
exec('__RUB','object');

: Ustalenie atrybutu nadrzędnego
{? var_pres('_a')<=0
|| _a:=0
|? var_pres('_a')=type_of(0)
|| {? _a>0
   || RA_DEF.index('RODZAJ');
      RA_DEF.prefix('S');
      {? RA_DEF.find_key(_a)
      || _a:=#RA_DEF.ref()
      || FUN.emsg('Brak definicji atrybutu o symbolu %1 [%2].'@ [$_a,_src]);
         return()
      ?}
   || _a:=0
   ?}
|| FUN.emsg(
      'Błędny typ argumentu \'%1\' [%2].'@ ['_a',_src]+'\n'+
      '(oczekiwana wartość liczbowa)'@
   );
   return()
?};
: Symbol musi być podany
{? var_pres('_b')<>type_of(0)
|| FUN.emsg(
      {? _a=0
      || 'Atrybut główny.'@
      || 'Atrybut nadrzędny: %1.'@ [$_a]
      ?}+'\n'+
      'Błędny typ argumentu \'%1\' [%2].'@ ['_b',_src]+'\n'+
      '(oczekiwana wartość liczbowa)'@
   );
   return()
|? _b<=0
|| FUN.emsg(
      {? _a=0
      || 'Atrybut główny.'@
      || 'Atrybut nadrzędny: %1.'@ [$_a]
      ?}+'\n'+
      'Symbol atrybutu (%1) musi być dodatni [%2].'@ [$_b,_src]
   );
   return()
?};
: Nazwa musi być podana
{? var_pres('_c')<>type_of('')
|| FUN.emsg(
      'Atrybut: %1.'@ [$_b]+'\n'+
      'Błędny typ argumentu \'%1\' [%2].'@ ['_c',_src]+'\n'+
      '(oczekiwana wartość napisowa)'@
   );
   return()
|? _c=''
|| FUN.emsg(
      'Atrybut: %1.'@ [$_b]+'\n'+
      'Nazwa atrybutu nie została podana [%1].'@ [_src]
   );
   return()
?};
: Weryfikacja typu
{? var_pres('_d')<=0
|| _d:=1
|? var_pres('_d')=type_of(0)
|| {? _d<>type_of(0) & _d<>type_of('') & _d<>type_of(date()) & _d<>type_of(time())
   || FUN.emsg(
         'Atrybut: %1.'@ [$_b]+'\n'+
         'Błędna wartość (%1) argumentu \'%2\' [%3].'@ [$_d,'_d',_src]
      );
      return()
   ?}
|| FUN.emsg(
      'Atrybut: %1.'@ [$_b]+'\n'+
      'Błędny typ argumentu \'%1\' [%2].'@ ['_d',_src]+'\n'+
      '(oczekiwana wartość liczbowa)'@
   );
   return()
?};
: Weryfikacja opisu
{? var_pres('_e')<=0
|| _e:=''
|? var_pres('_e')<>type_of('')
|| FUN.emsg(
      'Atrybut: %1.'@ [$_b]+'\n'+
      'Błędny typ argumentu \'%1\' [%2].'@ ['_e',_src]+'\n'+
      '(oczekiwana wartość napisowa)'@
   );
   return()
?};
RA_DEF.index('RA_DEF');
RA_DEF.prefix();
{? RA_DEF.find_key(_a,_b,'S')
:  definicja istnieje
|| return()
?};

RA_DEF.blank(1);
RA_DEF.RODZAJ:='S';
RA_DEF.RA_DEF:=_a;
RA_DEF.SYMBOL:=_b;
RA_DEF.NAZWA:=_c;
RA_DEF.TYP:=_d;
{? RA_DEF.add(1)
|| {? _e<>''
   || RA_DEF.memo_set(_e,'OPIS');
      RA_DEF.memo_put(,'OPIS')
   ?};
   {? var_pres('_f')>0
   || exec('add_val','rubatr',_b,_f)
   ?};
   {! _iter:=7 .. _
   |? {? var_pres('_['+$_iter+']')<>type_of(0)
      || FUN.emsg(
            'Atrybut: %1.'@ [$_b]+'\n'+
            'Błędny typ argumentu numer %1 [%2].'@ [$_iter,_src]+'\n'+
            '(oczekiwana wartość liczbowa)'@
         )
      |? _[_iter]<=0 | _[_iter]>obj_len(__RUB.REF) | __RUB.REF[_[_iter]]=null()
      || FUN.emsg(
            'Atrybut: %1.'@ [$_b]+'\n'+
            'Brak definicji rubryki o kodzie %1 [%2].'@ [$_[_iter],_src]
         )
      || exec('use_add','rubatr',RA_DEF.ref(),__RUB.REF[_[_iter]]);
         1
::       Jeżeli nawet rubryka _[_iter] nie istnieje (i nie można jej dodać), to nie znaczy, że następne również
::       nie istnieją - kontynuujemy.
      ?}
   !}
|| FUN.emsg('Wystąpił błąd podczas dołączania atrybutu %1 [%2].'@ [$_b,_src])
?}


\add_use
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Przypisuje rubrykom atrybut. Wykorzystanie ustawiane jest od daty 0000/00/00.
::   WE:  _a  [INTEGER] - Symbol atrybutu (wymagany).
::       [_b] [INTEGER] - Kod rubryki.
::       [_c] [INTEGER] - Kod rubryki.
::       [_d] [INTEGER] - Kod rubryki.
::       [_e] [INTEGER] - Kod rubryki.
::       [_f] [INTEGER] - Kod rubryki.
::       [_z] [INTEGER] - Kod rubryki.
::  OLD: \add_use/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_src:='\\add_use/rubatr.fml';
exec('__RUB','object');

: Ustalenie wykorzystywanego atrybutu
{? var_pres('_a')=type_of(0)
|| RA_DEF.index('RODZAJ');
   RA_DEF.prefix('S');
   {? ~RA_DEF.find_key(_a)
   || FUN.emsg('Brak definicji atrybutu o symbolu %1 [%2].'@ [$_a,_src]);
      return()
   ?}
|| FUN.emsg(
      'Błędny typ argumentu \'%1\' [%2].'@ ['_a',_src]+'\n'+
      '(oczekiwana wartość liczbowa)'@
   );
   return()
?};
{! _iter:=2 .. _
|? {? var_pres('_['+$_iter+']')<>type_of(0)
   || FUN.emsg(
         'Atrybut: %1.'@ [$_a]+'\n'+
         'Błędny typ argumentu numer %1 [%2].'@ [$_iter,_src]+'\n'+
         '(oczekiwana wartość liczbowa)'@
      )
   |? _[_iter]>0 & _[_iter]<=obj_len(__RUB.REF) & __RUB.REF[_[_iter]]<>null()
   || exec('use_add','rubatr',RA_DEF.ref,__RUB.REF[_[_iter]]);
      1
::    Jeżeli nawet rubryka _[_iter] już była w tym atrybucie, to nie znaczy, że następne również są - kontynuujemy.
   || FUN.emsg(
         'Atrybut: %1.'@ [$_a]+'\n'+
         'Brak definicji rubryki o kodzie %1 [%2].'@ [$_[_iter],_src]
      )
   ?}
!}


\add_uses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2010]
:: OPIS: Przypisuje rubryce atrybuty. Wykorzystanie ustawiane jest od daty 0000/00/00.
::   WE:  _a  [INETEGR] - Kod rubryki.
::       [_b] [INTEGER] - Symbol atrybutu.
::       [_c] [INTEGER] - Symbol atrybutu.
::       [_d] [INTEGER] - Symbol atrybutu.
::       [_e] [INTEGER] - Symbol atrybutu.
::       [_f] [INTEGER] - Symbol atrybutu.
::       [_z] [INTEGER] - Symbol atrybutu.
::  OLD: \add_uses/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>1 || {! _arg:=2 .. _ |! exec('add_use','rubatr',_[_arg],_[1]) !} ?}


\add_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Przypisuje atrybutom wartości.
::   WE:  _a  [INTEGER] - Symbol atrybutu.
::        _b  [ANY]     - Wartość atrybutu.
::       [_c] [DATE]    - Data obowiązywania [domyślnie: 0000/00/00].
::  OLD: \add_val/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_src:='\\add_val/rubatr.fml';
: Ustalenie wykorzystywanego atrybutu
{? var_pres('_a')=type_of(0)
|| RA_DEF.index('RODZAJ');
   RA_DEF.prefix('S');
   {? ~RA_DEF.find_key(_a)
   || FUN.emsg('Brak definicji atrybutu o symbolu %1 [%2].'@ [$_a,_src]);
      return()
   ?}
|| FUN.emsg(
      'Błędny typ argumentu \'%1\' [%2].'@ ['_a',_src]+'\n'+
      '(oczekiwana wartość liczbowa)'@
   );
   return()
?};
{? var_pres('_b')<>RA_DEF.TYP
|| FUN.emsg(
      'Atrybut: %1.'@ [$_a]+'\n'+
      'Błędna wartość argumentu \'%1\' [%2].'@ ['_b',_src]
   );
   return()
?};
{? var_pres('_c')<>type_of(date())
|| _c:=date(0,0,0)
?};
_val:=
   {? RA_DEF.TYP=1 || form(_b,,,'9.')
   |? RA_DEF.TYP=2 || '\''+gsub(gsub(_b,'\\','\\\\'),'\'','\\\'')+'\''
   |? RA_DEF.TYP=4 || 'date('+$(_b~1)+','+$(_b~2)+','+$(_b~3)+')'
   |? RA_DEF.TYP=5 || 'time('+$(_b~1)+','+$(_b~2)+','+$(_b~3)+')'
   ?};
RA_VAL.index('UNIQUE');
RA_VAL.prefix(RA_DEF.ref());
{? RA_VAL.find_key(_c)
|| RA_VAL.WARTOSC:=_val;
   {? ~RA_VAL.put(1)
   || FUN.emsg('Wystąpił błąd podczas modyfikacji wartości atrybutu %1 [%2].'@ [$_a,_src])
   ?}
|| RA_VAL.blank();
   RA_VAL.DATA:=_c;
   RA_VAL.WARTOSC:=_val;
   {? ~RA_VAL.add(1)
   || FUN.emsg('Wystąpił błąd podczas dołączania wartości atrybutu %1 [%2].'@ [$_a,_src])
   ?}
?}


\del_use
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2010]
:: OPIS: Wyłącza atrybut dla rubryk. Wykorzystanie anulowane jest od bieżącej daty.
::   WE:  _a  [INTEGER] - Symbol atrybutu.
::       [_b] [INTEGER] - Kod rubryki.
::       [_c] [INTEGER] - Kod rubryki.
::       [_d] [INTEGER] - Kod rubryki.
::       [_e] [INTEGER] - Kod rubryki.
::       [_f] [INTEGER] - Kod rubryki.
::       [_z] [INTEGER] - Kod rubryki.
::  OLD: \del_use/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_src:='\\del_use/rubatr.fml';
exec('__RUB','object');

: Ustalenie wykorzystywanego atrybutu
{? var_pres('_a')=type_of(0)
|| RA_DEF.index('RODZAJ');
   RA_DEF.prefix('S');
   {? ~RA_DEF.find_key(_a)
   || FUN.emsg('Brak definicji atrybutu o symbolu %1 [%2].'@ [$_a,_src]);
      return()
   ?}
|| FUN.emsg(
      'Błędny typ argumentu \'%1\' [%2].'@ ['_a',_src]+'\n'+
      '(oczekiwana wartość liczbowa)'@
   );
   return()
?};
{! _iter:=2 .. _
|? {? var_pres('_['+$_iter+']')<>type_of(0)
   || FUN.emsg(
         'Atrybut: %1.'@ [$_a]+'\n'+
         'Błędny typ argumentu numer %1 [%2].'@ [$_iter,_src]+'\n'+
         '(oczekiwana wartość liczbowa)'@
      )
   |? _[_iter]>0 & _[_iter]<=obj_len(__RUB.REF) & __RUB.REF[_[_iter]]<>null()
   || exec('use_add','rubatr',RA_DEF.ref,__RUB.REF[_[_iter]],date(),'N')
   || FUN.emsg(
            'Atrybut: %1.'@ [$_a]+'\n'+
            'Brak definicji rubryki o kodzie %1 [%2].'@ [$_[_iter],_src]
      )
   ?}
!}


\del_uses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2010]
:: OPIS: Wyłącza atrybuty rubryki. Wykorzystanie anulowane jest od bieżącej daty.
::   WE:  _a  [INTEGER] - Kod rubryki.
::       [_b] [INTEGER] - Symbol atrybutu.
::       [_c] [INTEGER] - Symbol atrybutu.
::       [_d] [INTEGER] - Symbol atrybutu.
::       [_e] [INTEGER] - Symbol atrybutu.
::       [_f] [INTEGER] - Symbol atrybutu.
::       [_z] [INTEGER] - Symbol atrybutu.
::  OLD: \del_use/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>1 || {! _arg:=2 .. _ |! exec('del_use','rubatr',_[_arg],_[1]) !} ?}


\mod_attr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Modyfikuje definicję atrybutu systemowego.
::   WE:  _a  [INTEGER] - Symbol modyfikowanego atrybutu.
::       [_b] [INTEGER] - Symbol atrybutu nadrzędnego. Jeśli zostanie pominięty lub jest mniejszy lub równy zero,
::                        to atrybutowi nie zostanie przypisany atrybut nadrzędny.
::       [_c] [INTEGER] - Nowy symbol atrybutu.
::       [_d] [STRING]  - Nowa nazwa atrybutu.
::       [_e] [INTEGER] - Nowy typ wartości atrybutu.
::       [_f] [STRING]  - Nowy opis atrybutu.
::  OLD: \mod_attr/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_src:='\\mod_attr/rubatr.fml';
: Ustalenie modyfikowanego atrybutu
{? var_pres('_a')=type_of(0)
|| RA_DEF.index('RODZAJ');
   RA_DEF.prefix('S');
   {? ~RA_DEF.find_key(_a)
   || FUN.emsg('Brak definicji atrybutu o symbolu %1 [%2].'@ [$_a,_src]);
      return()
   ?}
|| FUN.emsg(
      'Błędny typ argumentu \'%1\' [%2].'@ ['_a',_src]+'\n'+
      '(oczekiwana wartość liczbowa)'@
   );
   return()
?};
: Ustalenie atrybutu nadrzędnego
{? var_pres('_b')<=0
|| _b:=RA_DEF.RA_DEF
|? var_pres('_b')=type_of(0)
|| {? _b>0
   || _ref:=RA_DEF.ref();
      {? RA_DEF.find_key(_b)
      || _b:=#RA_DEF.ref()
      || FUN.emsg('Brak definicji atrybutu o symbolu %1 [%2].'@ [$_b,_src]);
         return()
      ?};
      RA_DEF.seek(_ref)
   || _b:=RA_DEF.RA_DEF
   ?}
|| FUN.emsg(
      'Błędy typ argumentu \'%1\' [%2].'@ ['_b',_src]+'\n'+
      '(oczekiwana wartość liczbowa)'@
   );
   return()
?};
: Ustalenie symbolu
{? var_pres('_c')<=0
|| _c:=RA_DEF.SYMBOL
|? var_pres('_c')<>type_of(0)
|| FUN.emsg(
      'Błędy typ argumentu \'%1\' [%2].'@ ['_c',_src]+'\n'+
      '(oczekiwana wartość liczbowa)'@
   );
   return()
|? _c<=0
|| FUN.emsg('Błędna wartość (%1) argumentu \'%2\' [%3].'@ [$_c,'_c',_src]);
   return()
?};
: Ustalenie nazwy
{? var_pres('_d')<=0
|| _d:=RA_DEF.NAZWA
|? var_pres('_d')<>type_of('')
|| FUN.emsg(
      'Błędy typ argumentu \'%1\' [%2].'@ ['_d',_src]+'\n'+
      '(oczekiwana wartość napisowa)'@
   );
   return()
|? |_d=''
||  FUN.emsg(
      'Atrybut: %1 -> %2.'@ [$_a,$_c]+'\n'+
      'Nazwa atrybutu nie została podana [%1].'@ [_src]
   );
   return()
?};
: Ustalenie typu
{? var_pres('_e')<=0
|| _e:=RA_DEF.TYP
|? var_pres('_e')=type_of(0)
|| {? _e<>type_of(0) & _e<>type_of('') & _e<>type_of(date()) & _e<>type_of(time())
   || FUN.emsg('Błędna wartość argumentu \'%1\' [%2].'@ ['_e',_src]);
      return()
   ?}
|| FUN.emsg(
      'Błędy typ argumentu \'%1\' [%2].'@ ['_e',_src]+'\n'+
      '(oczekiwana wartość liczbowa)'@
   );
   return()
?};
: Weryfikacja opisu
{? var_pres('_f')<=0
|| _f:=''
|? var_pres('_f')<>type_of('')
|| FUN.emsg(
      'Błędy typ argumentu \'%1\' [%2].'@ ['_f',_src]+'\n'+
      '(oczekiwana wartość napisowa)'@
   );
   return()
?};

RA_DEF.RODZAJ:='S';
RA_DEF.RA_DEF:=_b;
RA_DEF.SYMBOL:=_c;
RA_DEF.NAZWA:=_d;
{? RA_DEF.TYP<>_e
|| RA_VAL.index('UNIQUE');
   RA_VAL.prefix(RA_DEF.ref());
   {? RA_VAL.first || {! |? RA_VAL.del !} ?}
?};
RA_DEF.TYP:=_e;
{? RA_DEF.put(1)
|| RA_DEF.memo_set(_f,'OPIS');
   RA_DEF.memo_put(,'OPIS')
|| FUN.emsg('Wystąpił błąd podczas modyfikacji definicji atrybutu %1 [%2].'@ [$_a,_src])
?}


\use_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Dodaje rekord do tabeli wykorzystania atrybutu. Informacja o wykorzystaniu atrybutów jest automatycznie
::       dodawana do atrybutów nadrzędnych.
::   WE:  _a  [REFERENCE] - Wskazanie na definicję atrybutu.
::        _b  [REFERENCE] - Wskazanie na rubrykę.
::       [_c] [DATE]      - Data obowiązywania zmiany [domyślnie: 0000/00/00].
::       [_d] [STRING]    - Stan aktywności (opcjonalny)
::                         'T' - Zapis jest aktywny [domyślnie].
::                         'N' - Zapis nie jest aktywny.
::   WY: Wynik operacji:
::          1 - Informacja o rubryce została dodana do wskazanego atrybutu i wszystkich nadrzędnych.
::          0 - Informacja o rubryce nie została dodana.
::  TAG: <ADD>
::  OLD: \use_add/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_c:={? var_pres('_c')=type_of(date()) || _c || date(0,0,0) ?};
_d:={? var_pres('_d')=type_of('') & 'TN'*_d || _d || 'T' ?};

_state:=do_state();
{? _state=0
|| do()
?};
RA_USE.cntx_psh();
RA_USE.clear();
RA_USE.RA_DEF:=_a;
RA_USE.R:=_b;
RA_USE.DATA:=_c;
RA_USE.STAN:=_d;
{? RA_USE.add(1)
|| {? RA_USE.RA_DEF().RA_DEF
   || RA_DEF.cntx_psh();
      RA_DEF.clear();
      {? RA_DEF.seek(RA_DEF.RA_DEF,)
      || RA_USE.index('RA_USE');
         RA_USE.prefix(RA_DEF.ref(),_b);
         {? RA_USE.first()
         || RA_DEF.cntx_pop();
            RA_USE.cntx_pop();
            return({? ~_state || end() || 1 ?})
         ?};
         {? ~exec('use_add','rubatr',RA_DEF.ref(),_b,_c,_d)
         || RA_DEF.cntx_pop();
            RA_USE.cntx_pop();
            {? ~_state
            || undo();
               end()
            ?};
            return(0)
         ?}
      ?};
      RA_DEF.cntx_pop()
   ?}
|| RA_USE.cntx_pop();
   {? ~_state
   || undo();
      end()
   ?};
   return(0)
?};
RA_USE.cntx_pop();
{? ~_state || end() || 1 ?}


\use_norm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Normalizuje zapisy w tabeli wykorzystania atrybutu - usuwa zbędne informacje. Np. jeśli w tabeli znajdują się
::       następujące po sobie informacje o włączeniu lub wyłączeniu atrybutu, to pozostawiona jest tylko pierwsza
::       z nich.
::   WE: _a [REFERENCE/NUMBER] - Wskazanie na definicję atrybutu.
::       _b [REFERENCE/NUMBER] - Wskazanie na rubrykę.
::   WY: ~~
::  OLD: \use_norm/rubobj.fml
::-------------------------------------------------------------------------------------------------
RA_USE.cntx_psh();
RA_USE.index('RA_USE');
RA_USE.prefix(_a,_b);
{? RA_USE.first()
|| _stan:=RA_USE.STAN;
   {!
   |? _ref:=RA_USE.ref();
      RA_USE.next()
   |! {? RA_USE.STAN=_stan
      || RA_USE.del(,1);
         RA_USE.seek(_ref)
      || _stan:=RA_USE.STAN
      ?}
   !}
?};
RA_USE.cntx_pop();
~~


\jednoznaczne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Formuła odpowiedzialna za sprawdzenie jednoznaczności wybranych atrybutów.
::       Do prawidłowego działania systemu, w stosunku do wybranych atrybutów, wymagana jest jednoznaczność
::       odwzorowania: jeden atrybut to jedna rubryka. Ma to szczególne znaczenie w operacjach zapisu danych (np.
::       procent podatku - system musi jednoznacznie przypisać wartość do rubryki).
::   WE: [_a] [STRING] - Akcja do wykonania:
::          'Check' - sprawdź jednoznaczność [domyślnie]
::          'GetAJ' - zwróć 'obiekt' z atrybutami, które powinny być jednoznaczne.
::   WY: Wynik zależy od parametru _a
::          Dla _a='Check'
::             Czy jest zachowana jednoznaczność?
::             1 - Tak.
::             0 - Nie.
::          Dla _a='GetAJ'
::             Tabela tymczasowa
::  OLD: \jednoznaczne/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') & _a='GetAJ' || _a || 'Check' ?};

exec('__RUB','object');

_aj:=obj_new('TAB','NDX');

_aj.TAB:=tab_tmp(1,
   'SYMBOL','INTEGER','Symbol',
   'NAZWA','STRING[50]','Nazwa',
   'ERR','INTEGER','Błąd'
);
_aj.NDX:=obj_new('S','E');
_aj.NDX.S:=_aj.TAB.index('?');
_aj.NDX.E:=_aj.TAB.ndx_tmp(,,'ERR',,);
_add:="_a.TAB.SYMBOL:=_b; _a.TAB.NAZWA:=__RUB.get_name('S',_b); {? _a.TAB.NAZWA<>'' || _a.TAB.add() ?}";

:-----------------------------------------------------------------------------------------------------------------------
R.cntx_psh();
:godziny.fml  - Zapis godzin nieobecności
_add(_aj,100111);

:podatek4.fml - Zapis podatku
_add(_aj,91);
:podatek4.fml - Zapis ulgi
_add(_aj,94);

:podst_sk.fml - Zapis Podstawy Emerytalno-Rentowej urlopu wychowawczego
_add(_aj,56131);
:podst_sk.fml - Zapis Składki Emerytalnej urlopu wychowawczego
_add(_aj,571321);
:podst_sk.fml - Zapis Składki Rentowej urlopu wychowawczego
_add(_aj,571322);
:podst_sk.fml - Zapis Podstawy Ubezpieczenia Zdrowotnego urlopu wychowawczego
_add(_aj,56421);
:podst_sk.fml - Zapis Składki Ubezpieczenia Zdrowotnego urlopu wychowawczego
_add(_aj,57421);

:urlop.fml    - Zapis Urlopu okolicznościowego
_add(_aj,424);
:urlop.fml    - Zapis Opieka - Art. 188
_add(_aj,425);
:urlop.fml    - Zapis Nieobecności Płatnej
_add(_aj,426);

:wynchor.fml  - Trace - zapis Wynagrodzenia Zasadniczego uzupełnionego
_add(_aj,4511);

:kor_zus.fml  - Zapis potrąceń/korekt: Składka na Fundusz Emerytalny (pracownik)
_add(_aj,571110);
:kor_zus.fml  - Zapis potrąceń/korekt: Składka na Fundusz Emerytalny (zakład)
_add(_aj,571210);
:kor_zus.fml  - Zapis potrąceń/korekt: Składka na Fundusz Rentowy (pracownik)
_add(_aj,571120);
:kor_zus.fml  - Zapis potrąceń/korekt: Składka na Fundusz Rentowy (zakład)
_add(_aj,571220);
:kor_zus.fml  - Zapis potrąceń/korekt: Składka na Fundusz Chorobowy
_add(_aj,57210);
:kor_zus.fml  - Zapis potrąceń/korekt: Składka na Fundusz Wypadkowy
_add(_aj,57310);
:kor_zus.fml  - Zapis potrąceń/korekt: Składka na Ubezpieczenie Zdrowotne
_add(_aj,574110);
:nieobecn.fml, kali_ei.fml - edycja nieobecności, import e-ZLA
_add(_aj,1162);
_add(_aj,12111);
_add(_aj,12112);
_add(_aj,122111);
_add(_aj,122112);
_add(_aj,122121);
_add(_aj,122122);
_add(_aj,12213);
_add(_aj,1241);
_add(_aj,1322);
:PPK formuły płacowe
_add(_aj,710);
_add(_aj,711);
_add(_aj,712);
_add(_aj,713);
_add(_aj,720);
_add(_aj,721);
_add(_aj,722);
_add(_aj,723);
:ZP zwolniony przychód formuły płacowe
_add(_aj,9024);
_add(_aj,9025);
:Urlop wypoczynkowy (zwykły, na żądanie, dodatkowy)
_add(_aj,1111);
_add(_aj,1112);
_add(_aj,1113);
:: Zmiany progu podatkowego
_add(_aj,9031);
_add(_aj,9032);
_add(_aj,9033);
:: Polski Ład
_add(_aj,9062);
_add(_aj,9063);
_add(_aj,9064);
_add(_aj,9065);
_add(_aj,9066);
_add(_aj,90521);
_add(_aj,90203);
_add(_aj,90204);
_add(_aj,90205);
_add(_aj,90811);
:: Oddelegowania
_add(_aj,90107);
_add(_aj,90108);
:: Siła wyższa i urlop opiekuńczy
_add(_aj,1181);
_add(_aj,1191);
:: Pakiet mobilności i oddelegowania:
_add(_aj,9016);
_add(_aj,9017);
_add(_aj,9018);
_add(_aj,9019);
_add(_aj,90101);
_add(_aj,901111);
_add(_aj,901112);
_add(_aj,901113);
_add(_aj,901114);
_add(_aj,901115);

R.cntx_pop();
:-----------------------------------------------------------------------------------------------------------------------

{? _akcja='GetAJ' || return(_aj) ?};

{? _aj.TAB.first()
|| R.cntx_psh();
   {!
   |? {? ~__RUB.sys_kod(_aj.TAB.SYMBOL)
      || _aj.TAB.ERR:=1;
         _aj.TAB.put()
      ?};
      _aj.TAB.next()
   !};
   R.cntx_pop()
?};

_aj.TAB.index(_aj.NDX.E);
_aj.TAB.prefix(1);

{? _aj.TAB.first()
|| FUN.error(
      'Do prawidłowego działania systemu, w stosunku do wybranych atrybutów, wymagana jest jednoznaczność\n'
      'przypisania rubryki. Oznacza to, że z atrybutem może być związana wyłącznie jedna rubryka.\n'
      'Za chwilę zaprezentowane zostaną symbole atrybutów, które nie spełniają powyższego założenia.\n'
      'Sytuacja wymaga naprawy - pozostawienie aktualnej konfiguracji może doprowadzić do błędów działania\n'
      'z zamknięciem systemu włącznie.'@
   );
   _lw:=_aj.TAB.size();
   {? _lw<5 || _lw:=5 |? _lw>30 || _lw:=30 ?};
   _ws:=_aj.TAB.mk_sel('Atrybuty'@,'P',,'ra_def_err',,,_lw);
   _aj.TAB.win_fld(_ws,,'SYMBOL');
   _aj.TAB.win_fld(_ws,,'NAZWA');
   _aj.TAB.win_sel(_ws);
   _aj.TAB.select();
   0
|| 1
?}


\ra_grpn_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Import definicji grup atrybutów (v2).
::   WE: [_a] [STRING] - Kod miejsca położenia pliku wejściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::                       LUB
::                         pełna ścieżka dostępu do tworzonego pliku.
::       [_b] [STRING] - Lista (oddzielona przecinkami) grup atrybutów płacowych. Element '*' oznacza wszystkie grupy.
::       [_c] [NUMBER] - Aktualizacja [domyślnie:0]
::                       0 - Nie. Jeżeli grupa z listy zostanie znaleziona w danych (RA_GRPN) i jego definicja jest
::                           inna niż w importowanym pliku, to jest to traktowane jako konflikt i zgłaszane jako błąd.
::                       1 - Tak. Jeżeli grupa z listy zostanie znaleziona w danych (RA_GRPN), to jej definicja
::                           zostanie zaktualizowana definicją z importowanego pliku.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
_fn:={? var_pres('_a')=type_of('') || _a || 'l' ?};
_lista:={? var_pres('_b')=type_of('') || _b || '*' ?};
_tryb:={? var_pres('_c')=type_of(0) || _c || 0 ?};

exec('atrplagrpimex_decl','rubatr');
_gr:=obj_new(@.CLASS.AtrPlaGrpImEx);
_gr.add_grpn(_fn,_lista,_tryb)


\ra_grpn_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Eksport definicji grup atrybutów (v2).
::   WE: [_a] [STRING] - Kod miejsca położenia pliku wyjściowego:
::                         'g' - Plik globalny, wspólny w ramach wszystkich firm (std_*.dfg);
::                         'l' - Plik lokalny, związany z konkretną firmą (*.txt) [DOMYŚLNIE];
::            [ARRAY]  - Tablica z pełnymi ścieżkami dostępu do importowanych plików. Zawartość i rozmiar tablicy
::                       określa wersję pliku(-ów) do importu.
::   WY: Przyczyna niepowodzenia lub ''.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100 & _a[1]='2' & obj_len(_a)=2
|| _fn:=_a[2]
|| _fn:={? var_pres('_a')=type_of('') & (_a='g' | _a='l') || _a || 'l' ?}
?};
exec('atrplagrpimex_decl','rubatr');
_gr:=obj_new(@.CLASS.AtrPlaGrpImEx);
_gr.write(_fn)


\ra_def_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wyzwalacza przed usunięciem rekordu tabeli RA_DEF.
::   WE:
::   WY: 1 - Właściwa akcja może zostać wykonana.
::       0 - Usunięcie rekordu nie jest możliwe.
::  TAG: <DEL>
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',RA_VAL,'UNIQUE',RA_DEF.ref()) &
exec('del_ndx','#table',RA_USE,'RA_USE',RA_DEF.ref()) &
exec('del_ndx','#table',RA_GRPP,'PR',RA_DEF.ref()) &
exec('del_ndx','#table',RA_DEF,'RA_DEF',#RA_DEF.ref())


\ra_grpn_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wyzwalacza przed usunięciem rekordu tabeli RA_GRPN.
::   WE:
::   WY: 1 - Właściwa akcja może zostać wykonana.
::       0 - Usunięcie rekordu nie jest możliwe.
::  TAG: <DEL>
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',RA_GRPP,'RA_GRPN',RA_GRPN.ref())


\ra_grpn_wbg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Wybierz - przed" w okienku WER tabeli RA_GRPN.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FUN.ask(
   {? params_get().flagi.tryb='AR'
   || 'Czy chcesz dodać zaznaczone grupy do bieżącego atrybutu?'@
   || 'Czy chcesz dodać zaznaczone grupy do bieżącej rubryki?'@
   ?}
)


\ra_grpn_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wybierz - przed" w okienku WER tabeli RA_GRPN.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_flagi:=_par.flagi;
{? _flagi.tryb='AR'
:  Właściwe dodawanie grupy do atrybutu.
|| _rub:=_par.rub;
   _grpn:=_par.grpn;
   do();
   RA_GRPP.blank();
   RA_GRPP.RA_DEF:=RA_DEF.ref();
   RA_GRPP.RA_GRPN:=RA_GRPN.ref();
   RA_GRPP.add();
   {? _grpn.TAB.find_key(RA_GRPN.SYMBOL,)
:     Jeżeli grupa była wcześniej, to dziedziczona - zmieńmy znacznik dziedziczenia.
   || _grpn.TAB.D:=0;
      _grpn.TAB.put()

   || _grpn.TAB.blank();
      _grpn.TAB.SYMBOL:=RA_GRPN.SYMBOL;
      _grpn.TAB.OPIS:=RA_GRPN.OPIS;
      _grpn.TAB.D:=0;
      _grpn.TAB.add()
   ?};
   end()

|? -_flagi.tryb='ra'
:  Właściwe dodawanie grupy do rubryki
|| RA_GRPP.blank();
   RA_GRPP.RA_GRPN:=RA_GRPN.ref();
   RA_GRPP.R:=R.ref();
   RA_GRPP.add()
?}


\ra_grpn_wa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wybierz - po" w okienku WER tabeli RA_GRPN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~RA_GRPN.sel_size() || sel_exit() ?}


\ra_grpn_wag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Wybierz - po" w okienku WER tabeli RA_GRPN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_exit()


\ra_grpn_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Usuń dla tabeli RA_GRPN do prezentowania grup atrybutów.
::   WE:
::   WY:
::  TAG: <DEL>
::----------------------------------------------------------------------------------------------------------------------
{? exec('del_conf','#table')
|| RA_GRPN.del()
?}


\ra_grpn_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu rekordu tabeli RA_GRPN.
::   WE:
::   WY:
::  OLD: \ragrnae/rubobj.fml
::  TAG: <CHK>
::----------------------------------------------------------------------------------------------------------------------
__CHK.table(RA_GRPN,-menu_txt()='popraw',,'SYMBOL','OPIS')


\atrd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła tworzy tablicę z uchwytem do tabeli tymczasowej i jej okienka wertowania. Tabela jest wykorzystywana
::       do prezentowania atrybutów, które mogą być dodane do bieżącej rubryki. Tabela i okienko wykorzystywane są
::       w panelu do zarządzania atrybutami oraz z poziomu tabeli rubryk.
::       Formuła zakłada, że stworzone okienko będzie wyświetlane w odpowiednim kontekście - z przekazanymi argumentami.
::   WE: _a [TABLE] - Uchwyt do tablicy z tabelą i oknem do obsługi położenia atrybutu (drzewko) - patrz formuła
::                   \def_tree/rubatr.fml.
::                   Poprawność argumentu nie jest weryfikowana.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_def_tree:=_a;

_atrd:=obj_new('TAB','WS','WG');

_tab:=_atrd.TAB:=tab_tmp(3,
   'RODZAJ','STRING[1]','Rodzaj',
   'SYMBOL','INTEGER','Symbol',
   'NAZWA','STRING[50]','Nazwa'
);
_tab.fld_fml('SYMBOL','DISPLAY_FORMAT',"'alignment=left'");

: Formuła obsługująca akcje
_fml0:='"params_set(params_get()); exec(\\\'"+_a+"\\\',\\\'rubatr\\\')"';
_fml1:='"params_set(params_get()); exec(\\\'"+_a+"\\\',\\\'rubatr\\\',_a)"';

_ws:=_atrd.WS:=_tab.mk_sel('Atrybuty'@,'N',,'a4r_dosta');
_tab.win_fld(_ws,,'SYMBOL',,,25,,,,,'Unikalny symbol'@);
_tab.win_fld(_ws,,'NAZWA',,,47,,,,,'Krótki opis'@);
_tab.win_act(_ws,0,'Formuła','Wybierz'@@,,'Wybranie zaznaczonych zapisów lub bieżącego zapisu'@,
   $($_fml0)('atrd_wb'),$($_fml0)('atrd_wa'),1,1,$($_fml0)('atrd_wbg'),$($_fml0)('atrd_wag'),'W');
_tab.win_act(_ws,0,'Formuła','Legenda'@@,,'Legenda'@@,$($_fml0)('atrd_legenda'),,,,,,'L',,'target=window');
_tab.win_act(_ws,0,'Rekord',,,,$($_fml0)('atrd_bd'));

_mode:='maximized_with_title';

_wg:=_atrd.WG:=_tab.grp_make('Atrybuty'@,,'attr4r2grp',,,,"",'normal');
_tab.grp_sel(_wg,_tab,_ws,,$($_fml0)('atrd_ar'),,,22,"params_get().flagi.tryb:='rg'","",,,_mode);
_tab.grp_splt(_wg,'panel0','horizontal','położenie');
_tab.grp_sel(_wg,_def_tree.TAB,_def_tree.WS,,"",,,6,$($_fml1)('def_tree_bs'),"",,,_mode);
_tab.win_sel(_wg);

_atrd


\atrd_wbg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Wybierz - przed" w okienku atrd.WS tabeli tymczasowej atrd.TAB do prezentowania
::       atrybutów, które można dodać do bieżącej rubryki płacowej.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_get().flagi.status:='';
FUN.ask('Czy chcesz dodać zaznaczone atrybuty do bieżącej rubryki?'@)


\atrd_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wybierz - przed" w okienku atrd.WS tabeli tymczasowej atrd.TAB do prezentowania atrybutów, które
::       można dodać do bieżącej rubryki płacowej.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_flagi:=_par.flagi;
_atrd:=_par.atrd;

{? cur_tab(1,1).sel_size()=0
|| _flagi.status:=''
?};

RA_DEF.cntx_psh();
RA_DEF.index('RODZAJ');
RA_DEF.prefix(_atrd.TAB.RODZAJ,_atrd.TAB.SYMBOL);

RA_USE.cntx_psh();
RA_USE.index('RA_USE');
RA_USE.prefix();
do();
{? ~RA_DEF.first()
|| {? _flagi.status*'1'=0
   || _flagi.status+='1'
   ?};
   undo()
|? RA_USE.find_key(RA_DEF.ref(),R.ref())
|| {? _flagi.status*'2'=0
   || _flagi.status+='2'
   ?};
   undo()
|| exec('use_add','rubatr',RA_DEF.ref(),R.ref())
?};
{? end()
|| {? _flagi.status*'+'=0 || _flagi.status+='+' ?}
|? _atrd.TAB.sel_size()
|| {? _flagi.status*'!'=0 || _flagi.status+='!' ?}
|| FUN.emsg(
      {? _flagi.status*'1'
      || 'Brak definicji atrybutu.'@
      |? _flagi.status*'2'
      || 'Atrybut był już przypisany do rubryki.'@
      || 'Wystąpił nieoczekiwany błąd.'@
      ?}
   )
?};
RA_USE.cntx_pop();
RA_DEF.cntx_pop();
1


\atrd_wa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wybierz - po" w okienku atrd.WS tabeli tymczasowej atrd.TAB do prezentowania atrybutów, które
::       można dodać do bieżącej rubryki płacowej.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~cur_tab(1,1).sel_size() || sel_exit() ?}


\atrd_wag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Wybierz - po" w okienku atrd.WS tabeli tymczasowej atrd.TAB do prezentowania atrybutów,
::       które można dodać do bieżącej rubryki płacowej.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_flagi:=params_get().flagi;

{? _flagi.status<>''
|| _txt:='';
   {? _flagi.status*'1'
   || _txt+='Nie znaleziono definicji atrybutu.'@+'\n'
   ?};
   {? _flagi.status*'2'
   || _txt+='Atrybut był już przypisany do rubryki.'@+'\n'
   ?};
   {? _flagi.status*'!'
   || _txt+='Wystąpił nieoczekiwany błąd.'@+'\n'
   ?};
   {? _txt<>''
   ||  FUN.emsg(_txt)
   ?};
   &_txt
?};
sel_exit()


\atrd_legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Legenda dla tabeli tymczasowej do prezentowania atrybutów, które można dodać do bieżącej rubryki
::       płacowej.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','RA_DEF#01')


\atrd_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - przed" (przed wyświetleniem rekordu) dla tabeli tymczasowej do prezentowania atrybutów,
::       które można dodać do bieżącej rubryki płacowej.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(1,1).RODZAJ='U'
|| Color.fnd_kol('RA_DEF#01#01')
|| ''
?}


\atrd_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po odświeżeniu okienka tabeli tymczasowej atrd.TAB w panelu zarządzania atrybutami lub z poziomu rubryk
::       płacowych.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  OLD: \wnd_ar/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_def_tree:=_par.def_tree;

{? -_par.flagi.tryb='ra'
|| grp_disp(RA_USE,'WER')
?};
grp_disp(_def_tree.TAB,_def_tree.WS,1)


\atr4x
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła tworzy tablicę z uchwytem do tabeli tymczasowej i jej okienka wertowania. Tabela jest wykorzystywana
::       do prezentowania atrybutów powiązanych z rubryką płacową. Tabela i okienko wykorzystywane są w panelu do
::       zarządzania atrybutami oraz z poziomu tabeli rubryk.
::       Formuła zakłada, że stworzone okienko będzie wyświetlane w odpowiednim kontekście - z przekazanymi argumentami.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_atr4x:=obj_new('TAB','WS');

_tab:=_atr4x.TAB:=tab_tmp(3,
   'RODZAJ','STRING[1]','Rodzaj',
   'SYMBOL','INTEGER','Symbol',
   'NAZWA','STRING[50]','Nazwa'
);
_tab.fld_fml('SYMBOL','DISPLAY_FORMAT',"'alignment=left'");

: Formuła obsługująca akcje
_fml0:='"params_set(params_get()); exec(\\\'"+_a+"\\\',\\\'rubatr\\\')"';

_ws:=_atr4x.WS:=_tab.mk_sel('Przypisane atrybuty'@,'N',,'a4r_przypa',,,,,'U');
_tab.win_fld(_ws,,'SYMBOL',,,25,,,,,'Unikalny symbol'@);
_tab.win_fld(_ws,,'NAZWA',,,47,,,,,'Krótki opis'@);

{! _empty:=0 .. 1
|! _tab.win_act(_ws,_empty,'Formuła','Dołącz'@@,,'Dołączenie nowego zapisu'@,$($_fml0)('atr4x_dolacz'),,1,,,,'D')
!};
_tab.win_act(_ws,0,'Formuła','Usuń'@@,,'Usunięcie zaznaczonych zapisów lub bieżącego zapisu'@,
   $($_fml0)('atr4x_ub'),$($_fml0)('atr4x_ua'),,1,$($_fml0)('atr4x_ubg'),$($_fml0)('atr4x_uag'),'U');
_tab.win_act(_ws,0,'Formuła','Legenda'@@,,'Legenda'@,$($_fml0)('atr4x_legenda'),,,,,,'L',,'target=window');
_tab.win_act(_ws,0,'Rekord',,,,$($_fml0)('atr4x_bd'));
_tab.win_btn(_ws,'text='+'Dołącz'@,'menu:D',,,,,,'');
_tab.win_btn(_ws,'text='+'Usuń'@,'menu:U',,,,,,'noempty');

_atr4x


\atr4x_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Dołącz dla tabeli tymczasowej do prezentowania atrybutów związanych z (bieżącą) rubryką płacową.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  TAG: <ADD>
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_flagi:=_par.flagi;
_atr4x:=_par.atr4x;
_atrd:=_par.atrd;

_tryb:=1;
{? -_flagi.tryb='ra'
:  Z poziomu rubryk Dołączanie może odbywać sie standardowo lub z wykorzystaniem przypisanych grup.
|| RA_GRPP.cntx_psh();
   RA_GRPP.index('PR');
   RA_GRPP.prefix(null(),R.RN);
   {? RA_GRPP.first()
   || _tryb:=FUN.choice(
         'Wybierz sposób wskazania atrybutów do dołączenia:\n\n'
         '- Standardowy (wybór spośród wszystkich zdefiniowanych atrybutów)\n'
         '- Uproszczony (wybór spośród atrybutów określonych przez grupy)  \n'@,1,
         'Standardowy'@,'Uproszczony'@)
   ?};
   RA_GRPP.cntx_pop()
?};
_flagi.status:='';
_ref:=_atr4x.TAB.ref();
{? _tryb=1
|| RA_DEF.cntx_psh();
   RA_DEF.index('RA_DEF');
   RA_DEF.clear();
   RA_DEF.win_sel('WYBX');
   RA_DEF.select();
   RA_DEF.cntx_pop()

|? _tryb=2
|| _dodaj:="
      _dodaj:=_a;
      _tab:=_b;
      _ref:=_c;

      RA_DEF.cntx_psh();
      {? RA_DEF.seek(_c)
      || {? ~_tab.find_key(RA_DEF.RODZAJ,RA_DEF.SYMBOL)
         || RA_DEF.prefix(_c);
            {? RA_DEF.first()
            || {!
               |? _dodaj(_dodaj,_tab,RA_DEF.ref());
                  RA_DEF.next()
               !}
            |? ~RA_USE.find_key(RA_DEF.ref())
            || _tab.blank();
               _tab.RODZAJ:=RA_DEF.RODZAJ;
               _tab.SYMBOL:=RA_DEF.SYMBOL;
               _tab.NAZWA:=RA_DEF.NAZWA;
               _tab.add()
            ?};
            RA_DEF.prefix()
         ?}
      ?};
      RA_DEF.cntx_pop()
   ";

:  Wypełnienie tabeli _atrd.TAB danymi - atrybutami elementarnymi (nie mającymi elementów podrzędnych), które można
:  dodać do bieżącej rubryki. Tabela zostanie stworzona na podstawie atrybutów (i ich podrzędnych) związanych ze
:  wszystkimi grupami danej rubryki. Podczas tworzenia tabeli pominięte zostaną te atrybuty, które już są przywiązane
:  do rubryki.
   _atrd.TAB.erase();
   RA_DEF.cntx_psh();
   RA_DEF.index('RA_DEF');
   RA_DEF.prefix();
   RA_USE.cntx_psh();
   RA_USE.index('R_DEF');
   RA_USE.prefix(R.ref());
   RA_GRPP.cntx_psh();
   RA_GRPP.index('PR');
   RA_GRPP.prefix(null(),R.RN);
   _dg:=RA_GRPP.first();
   {!
   |? _dg
   |! RA_GRPP.cntx_psh();
      RA_GRPP.index('NA');
      RA_GRPP.prefix(RA_GRPP.RA_GRPN().SYMBOL,null(),);
      _dd:=RA_GRPP.first();
      {!
      |? _dd
      |! _dodaj(_dodaj,_atrd.TAB,RA_GRPP.RA_DEF().ref(),-1);
         _dd:=RA_GRPP.next()
      !};
      &_dd;
      RA_GRPP.cntx_pop();
      _dg:=RA_GRPP.next()
   !};
   &_dg;
   RA_GRPP.cntx_pop();
   RA_USE.cntx_pop();
   RA_DEF.cntx_pop();

   _size:=_atrd.TAB.size();
   {? _size=0
   || FUN.emsg('Brak atrybutów do dołączenia.'@)
   || _tryb:=_flagi.tryb;
      _atrd.TAB.select();
      _flagi.tryb:=_tryb;
      _atrd.TAB.erase()
   ?};

   &_size;
   &_dodaj
?};
{? _flagi.status*'+'
|| _tryb:='';
   _flagi.tryb==_tryb;
   exec('atr4x_bs','rubatr',0,_tryb)
?};
_atr4x.TAB.seek(_ref);
~~


\atr4x_ubg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Usuń - przed" dla tabeli tymczasowej do prezentowania atrybutów związanych z (bieżącą)
::       rubryką płacową. Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  TAG: <DEL>
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
params_get().flagi.status:='';
exec('del_ask','#table')


\atr4x_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń - przed" dla tabeli tymczasowej do prezentowania atrybutów związanych z (bieżącą)
::       rubryką płacową.
::   WE:
::   WY:
::  TAG: <DEL>
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
cur_tab(1,1).sel_size() | exec('del_ask','#table')


\atr4x_ua
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń - po" dla tabeli tymczasowej do prezentowania atrybutów związanych z (bieżącą)
::       rubryką płacową. Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  TAG: <DEL>
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_flagi:=_par.flagi;
_atr4x:=_par.atr4x;

{? -_flagi.tryb='ra'
:  Właściwe usunięcie atrybutu przypisanego do rubryki.
|| RA_DEF.cntx_psh();
   RA_DEF.index('RODZAJ');
   RA_DEF.prefix();
   {? RA_DEF.find_key(_atr4x.TAB.RODZAJ,_atr4x.TAB.SYMBOL)
   || RA_USE.prefix(RA_DEF.ref(),R.ref());
      do();
      {? RA_USE.first() || {! |? RA_USE.del() !} ?};
      _atr4x.TAB.del();
      {? ~end()
      || {? _atr4x.TAB.sel_size()
         || {? _flagi.status*'u'=0 || _flagi.status+='u' ?}
         || FUN.emsg('Usunięcie atrybutu nie powiodło się.'@)
         ?}
      ?};
      RA_USE.prefix()
   ?};
   RA_DEF.cntx_pop()

|? _flagi.tryb='GX'
:  Właściwe usunięcie atrybutu przypisanego do grupy.
|| RA_GRPP.cntx_psh();
   RA_GRPP.index('PA');
   RA_GRPP.prefix(null(),_atr4x.TAB.RODZAJ,_atr4x.TAB.SYMBOL,RA_GRPN.SYMBOL,);
   {? RA_GRPP.first()
   || do();
      RA_GRPP.del();
      _atr4x.TAB.del();
      {? ~end()
      || {? _atr4x.TAB.sel_size()
         || {? _flagi.status*'u'=0 || _flagi.status+='u' ?}
         || FUN.emsg('Usunięcie atrybutu nie powiodło się.'@)
         ?}
      ?}
   ?};
   RA_GRPP.cntx_pop()
?}


\atr4x_uag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Usuń - po" dla tabeli tymczasowej do prezentowania atrybutów związanych z (bieżącą)
::       rubryką płacową. Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  TAG: <DEL>
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_flagi:=_par.flagi;

{? _flagi.status*'u'
|| FUN.emsg('Usunięcie wszystkich zaznaczonych atrybutów nie powiodło się.'@)
?}


\atr4x_legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Legenda dla tabeli tymczasowej do prezentowania atrybutów związanych z (bieżącą) rubryką płacową.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','RA_DEF#01')


\atr4x_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - przed" (przed wyświetleniem rekordu) dla tabeli tymczasowej do prezentowania atrybutów
::       związanych z (bieżącą) rubryką płacową.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(1,1).RODZAJ='U'
|| Color.fnd_kol('RA_DEF#01#01')
|| ''
?}


\atr4x_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po odświeżeniu okienka tabeli tymczasowej atr4x.TAB w panelu zarządzania atrybutami.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  OLD: \wnd_ar/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_def_tree:=_par.def_tree;

{? -_par.flagi.tryb='ra'
|| grp_disp(RA_USE,'WER')
?};
grp_disp(_def_tree.TAB,_def_tree.WS,1)


\atr4x_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed obsługą okienka tabeli tymczasowej atr4x.TAB w panelu zarządzania atrybutami. Formuła wykorzystywana do
::       odświeżenia zawartości tabeli atr4x.TAB również po usuwaniu z niej rekordów.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:  _a  [INTEGER] - Moment (przyczyna) wywołania:
::                         0 - Okienko odświeżane na skutek wywołania grp_disp().
::                         1 - Okienko zostało aktywowane.
::       [_b] [STRING]  - Tryb, określa środowisko pracy (aktywną zakładkę lub okienko).
::   WY:
::  OLD: \wnd_bs/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_flagi:=_par.flagi;
_atr4x:=_par.atr4x;

_zmiana:={? var_pres('_b')=type_of('') & _b<>'' & _flagi.tryb<>_b || _flagi.tryb:=_b; 1 ?};

{? _flagi.tryb='RA' | (_flagi.tryb='ra' & _zmiana) | _flagi.tryb='GX'
|| _rodzaj:=_atr4x.TAB.RODZAJ;
   _symbol:=_atr4x.TAB.SYMBOL;
   _atr4x.TAB.erase();
   {? (_flagi.tryb='GX' & RA_GRPN.size()) | (_flagi.tryb<>'GX' & R.size())
   || _sql:='select distinct RA_DEF.RODZAJ, RA_DEF.SYMBOL, RA_DEF.NAZWA ';
      {? _flagi.tryb='GX'
      || _sql+='from RA_GRPP join RA_DEF where RA_GRPP.RA_GRPN=\''+$RA_GRPN.ref()+'\''
      || _sql+='from RA_USE join RA_DEF where RA_USE.R=\''+$R.ref()+'\''
      ?};
      _buf:=sql(&_sql);
      {? _buf.first()
      || {!
         |? _atr4x.TAB.blank();
            _atr4x.TAB.RODZAJ:=_buf.RODZAJ;
            _atr4x.TAB.SYMBOL:=_buf.SYMBOL;
            _atr4x.TAB.NAZWA:=_buf.NAZWA;
            _atr4x.TAB.add();
            _buf.next()
         !}
      ?};
:     Nie zmieniajmy pozycji, jeżeli możemy stać na tym samym rekordzie.
      {? ~_atr4x.TAB.find_key(_rodzaj,_symbol) || _atr4x.TAB.first() ?};
      obj_del(_buf);
      &_buf;
      _hid:='';
      _def:=':D'

:     Jeżeli brak "rekordu nadrzędnego":
:        - nagłówka atrybutów (dla _flagi.tryb='GX');
:        - rubryki (mało prawdopodobne);
:     to ukrywamy akcję "Dołącz" dla pustej dziedziny.
   || _hid:=':D';
      _def:=''
   ?};
   {? _a
   || _atr4x.TAB.actions(_atr4x.WS,_hid,_def,1)
   ?}
?}


\ra_def_wbg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Wybierz - przed" dla okienka tabeli RA_DEF podczas dodawania wielu atrybutów do rubryki
::       w panelu zarządzania atrybutami. Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_flagi:=params_get().flagi;
_flagi.status:='';
FUN.ask(
   {? -_flagi.tryb='ra'
   || 'Czy chcesz dodać zaznaczone atrybuty do bieżącej rubryki?'@
   || 'Czy chcesz dodać zaznaczone atrybuty do bieżącej grupy?'@
   ?}
)


\ra_def_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wybierz - przed" dla okienka tabeli RA_DEF podczas dodawania wielu atrybutów do rubryki
::       w panelu zarządzania atrybutami. Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_flagi:=_par.flagi;
_atr4x:=_par.atr4x;

{? cur_tab(1,1).sel_size()=0 || _flagi.status:='' ?};

{? -_flagi.tryb='ra'
:  Właściwe dodanie atrybutu do rubryki.
|| RA_USE.cntx_psh();
   RA_USE.index('RA_USE');
   RA_USE.prefix(RA_DEF.ref(),R.ref());
   do();
   {? RA_USE.first()
   || {? _flagi.status*'2'=0 || _flagi.status+='2' ?};
      undo()
   || exec('use_add','rubatr',RA_DEF.ref(),R.ref())
   ?};
   {? end()
   || {? _flagi.status*'+'=0 || _flagi.status+='+' ?}
   |? _atr4x.TAB.sel_size()
   || {? _flagi.status*'!'=0 || _flagi.status+='!' ?}
   || FUN.emsg(
         {? _flagi.status=''
         || 'Dodanie atrybutu nie powiodło się.'@
         |? _flagi.status*'2'
         || 'Atrybut był już przypisany do rubryki.'@
         || 'Wystąpił nieoczekiwany błąd.'@
         ?}
      )
   ?};
   RA_USE.cntx_pop();
   1

|? _flagi.tryb='GX'
:  Właściwe dodanie atrybutu do grupy.
|| RA_GRPP.cntx_psh();
   RA_GRPP.index('PA');
   RA_GRPP.prefix(null(),RA_DEF.RODZAJ,RA_DEF.SYMBOL,RA_GRPN.SYMBOL,);
   do();
   {? RA_GRPP.first()
   || {? _flagi.status*'2'=0 || _flagi.status+='2' ?};
      undo()
   || RA_GRPP.blank();
      RA_GRPP.RA_GRPN:=RA_GRPN.ref();
      RA_GRPP.RA_DEF:=RA_DEF.ref();
      RA_GRPP.add()
   ?};
   {? end()
   || {? _flagi.status*'+'=0 || _flagi.status+='+' ?}
   |? _atr4x.TAB.sel_size()
   || {? _flagi.status*'!'=0 || _flagi.status+='!' ?}
   || FUN.emsg(
         {? _flagi.status=''
         || 'Dodanie atrybutu nie powiodło się.'@
         |? _flagi.status*'2'
         || 'Atrybut był już przypisany do grupy.'@
         || 'Wystąpił nieoczekiwany błąd.'@
         ?}
      )
   ?};
   RA_GRPP.cntx_pop();
   1

?}


\ra_def_wa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wybierz - po" dla okienka tabeli RA_DEF podczas dodawania wielu atrybutów do rubryki
::       w panelu zarządzania atrybutami.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~cur_tab(1,1).sel_size()
|| sel_exit()
?}


\ra_def_wag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Wybierz - po" dla okienka tabeli RA_DEF podczas dodawania wielu atrybutów do rubryki
::       w panelu zarządzania atrybutami. Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_flagi:=params_get().flagi;

{? _flagi.status<>''
|| _txt:='';
   {? _flagi.status*'1'
   || _txt+=
         {? -_flagi.tryb='ra'
         || 'Co najmniej jeden z zaznaczonych atrybutów był już przypisany do rubryki.'@
         |? _flagi.tryb='GX'
         || 'Co najmniej jeden z zaznaczonych atrybutów był już przypisany do grupy.'@
         || '???'
         ?}+'.\n'
   ?};
   {? _flagi.status*'!'
   || _txt+='Co najmniej jednego z zaznaczonych atrybutów nie udało się dodać.'@+'\n'
   ?};
   {? _txt<>''
   || FUN.emsg(_txt)
   ?};
   &_txt
?};
sel_exit()


\ra_def_legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Legenda dla tabeli RA_DEF w panelu zarządzania atrybutami oraz okienku wyboru wielu atrybutów.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY: ~~
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_tryb:=params_get().flagi.tryb;

_prfx:=
   {? _tryb='AR'
   || 'RA_DEF#01'
   |? -_tryb='ra'
   || 'RA_DEF#02'
   |? _tryb='GX'
   || 'RA_DEF#03'
   || ''
   ?};
exec('legenda','color',_prfx);
~~


\ra_def_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - przed" (przed wyświetleniem rekordu) dla tabeli RA_DEF w panelu zarządzania atrybutami
::       oraz okienku wyboru wielu atrybutów.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::  TAG: <BD>
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_tryb:=params_get().flagi.tryb;
_col:='';
{? _tryb='AR'
|| {? cur_tab(1,1).RODZAJ='U'
   || _col:='RA_DEF#01#01'
   ?}

|? -_tryb='ra'
|| _odp:='';
   RA_USE.cntx_psh();
   RA_USE.index('RA_USE');
   RA_USE.prefix(RA_DEF.ref(),R.ref());
   {? RA_USE.first()
   || _col:='RA_DEF#02#01'
   ?};
   RA_USE.cntx_pop()

|? _tryb='GX'
|| RA_GRPP.cntx_psh();
   RA_GRPP.index('PA');
   RA_GRPP.prefix(null(),RA_DEF.RODZAJ,RA_DEF.SYMBOL,RA_GRPN.SYMBOL,);
   {? RA_GRPP.first()
   || _col:='RA_DEF#03#01'
   ?};
   RA_GRPP.cntx_pop()
?};
Color.fnd_kol(_col)


\ra_def_wyswietl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Wyświetl dla tabeli RA_DEF w panelu zarządzania atrybutami.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
exec('ra_tmp_set','rubatr',RA_DEF.RA_DEF);
RA_DEF.win_edit('RED');
RA_DEF.memo_get(,'OPIS');
RA_DEF.display();
~~


\ra_tmp_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Ustala wartości pól zmiennej RA_TMP na podstawie rekordu tabeli RA_DEF.
::   WE: _a [REFERENCE] - Wskazanie na rekord w tabeli RA_DEF (INTEGER).
::   WY:
::  OLD: \tdef_set/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
RA_TMP.blank();
RA_DEF.cntx_psh();
RA_DEF.prefix();
{? RA_DEF.seek(_a,)
|| RA_TMP.RA_DEF:=RA_DEF.ref();
   RA_TMP.SYMB:=RA_DEF.SYMBOL;
   RA_TMP.NAZWA:=RA_DEF.NAZWA
?};
RA_DEF.cntx_pop();
1


\ra_use_env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustala kluczowe wartości pracy z tabelą RA_USE na podstawie tryby pracy. Wykorzystywana w formułach
::       obsługujących akcje okienka wertowania.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_tryb:=_par.flagi.tryb;
_atr4x:=_par.atr4x;

_ret:=obj_new('RRN','RREF','RAREF');
_ret.RRN:=0;
_ret.RREF:=_ret.RAREF:=null();

{? _tryb='AR'
|| _rub:=_par.rub;
   _ret.RRN:=_rub.TAB.RN;
   _ret.RREF:=_rub.TAB.R;
   _ret.RAREF:=RA_DEF.ref()

:: Tryb 'ra' (nie mylić z 'RA') chyba będzie obsługiwany w innym miejscu.
|? -_tryb='ra'
|| _ret.RRN:=R.RN;
   _ret.RREF:=R.ref();
   RA_DEF.cntx_psh();
   RA_DEF.index('RODZAJ');
   RA_DEF.clear();
   {? RA_DEF.find_key(_atr4x.TAB.RODZAJ,_atr4x.TAB.SYMBOL)
   || _ret.RAREF:=RA_DEF.ref()
   ?};
   RA_DEF.cntx_pop()
?};

{? _ret.RAREF=null()
|| FUN.error('Błąd wewnętrzny - nierozpoznany tryb pracy lub błąd danych.'@)
?};

_ret


\ra_use_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Dołącz w okienku WER tabeli RA_USE w panelu zarządzania atrybutami i z poziomu redagowania rubryk
::       płacowych.
::   WE:
::   WY:
::  TAG: <ADD>
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=exec('ra_use_env','rubatr');
{? _env.RAREF=null()
|| return(0)
?};

{? _env.RRN
|| RA_USE.blank(1);
   RA_USE.RA_DEF:=_env.RAREF;
   RA_USE.DATA:=date();
   RA_USE.R:=__RUB.REF[_env.RRN];
   {? RA_USE.edit("exec('ra_use_ae','rubatr',0)") & exec('add','#table')
   || exec('use_norm','rubatr',_env.RAREF,_env.RREF)
   ?}
?}


\ra_use_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Popraw w okienku WER tabeli RA_USE w panelu zarządzania atrybutami i z poziomu redagowania rubryk
::       płacowych.
::   WE:
::   WY:
::  TAG: <PUT>
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=exec('ra_use_env','rubatr');
{? _env.RAREF=null() || return(0) ?};

{? RA_USE.edit("exec('ra_use_ae','rubatr',1)") & exec('put','#table')
|| exec('use_norm','rubatr',_env.RAREF,_env.RREF)
?}


\ra_use_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Usuń w okienku WER tabeli RA_USE w panelu zarządzania atrybutami i z poziomu redagowania rubryk
::       płacowych. Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  TAG: <DEL>
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_flagi:=_par.flagi;
_atr4x:=_par.atr4x;

_env:=exec('ra_use_env','rubatr');
{? _env.RAREF=null()
|| return(0)
?};

{? exec('del_ask','#table') & RA_USE.del(,1)
|| exec('use_norm','rubatr',_env.RAREF,_env.RREF);
   {? RA_USE.size()=0
   || {? _flagi.tryb='AR'
      || _rub:=_par.rub;
         _rub.TAB.del();
         grp_disp(_rub.TAB,_rub.WS)
      |? -_flagi.tryb='ra'
      || _atr4x.TAB.del();
         grp_disp(_atr4x.TAB,_atr4x.WS)
      ?}
   ?};
   ~~
?}


\ra_use_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redakcji rekordu tabeli RA_USE. Formuła wywoływana z akcji Dołącz i Popraw. Tabela RA_USE redagowana jest
::       z poziomu panelu zarządzania atrybutami i z poziomu rubryk.
::   WE: _a [INTEGER] - Tryb modyfikacji:
::                      0 - Dołączanie;
::                      1 - Poprawianie.
::   WY:
::  TAG: <CHK>
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.table(RA_USE,_a)


\ra_use_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed obsługą okienka tabeli RA_USE w panelu zarządzania atrybutami. Tabela RA_USE redagowana jest
::       z poziomu panelu zarządzania atrybutami i z poziomu rubryk.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE: _a [INTEGER] - Moment (przyczyna) wywołania:
::                      0 - Okienko odświeżane na skutek wywołania grp_disp().
::                      1 - Okienko zostało aktywowane.
::   WY:
::  OLD: \wnd_bs/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_flagi:=_par.flagi;

RA_USE.index('RA_USE');
{? _flagi.tryb='AR'
:  Przeglądanie od strony drzewa atrybutów.
|| _rub:=_par.rub;
   RA_USE.prefix(RA_DEF.ref(),_rub.TAB.R);
   RA_USE.actions('WER',{? _rub.TAB.size() || '' || ':D' ?},,1)

|? -_flagi.tryb='ra'
:  Przeglądanie od strony rubryk (z poziomu rubryk lub panelu).
|| _atr4x:=_par.atr4x;
   {? _atr4x.TAB.size()
   || RA_DEF.cntx_psh();
      RA_DEF.index('RODZAJ');
      RA_DEF.clear();
      {? RA_DEF.find_key(_atr4x.TAB.RODZAJ,_atr4x.TAB.SYMBOL)
      || RA_USE.prefix(RA_DEF.ref(),R.ref())
      ?};
      RA_DEF.cntx_pop()
:     Stoimy na rubryce bez atrybutów - w RA_USE nie ma co pokazać.
   || RA_USE.prefix(null())
   ?}
?}


\ra_grpp_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Dołącz dla tabeli RA_GRPP:
::          - z panelu zarządzania atrybutami:
::             - z zakładki "Atrybuty wg rubryk" (tryb='RA');
::             - z zakładki "Grupy" (tryb='GX');
::          - z poziomu redagowania rubryk (tryb='ra').
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE:
::   WY:
::  TAG:
::  OLD: \ragrp_db/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_tryb:=_par.flagi.tryb;

{? -_tryb='ra'
:  Właściwe dodawanie grup do bieżącej rubryki.
|| RA_GRPN.cntx_psh();
   RA_GRPN.index('SYMBOL');
   RA_GRPN.prefix();
   RA_GRPN.win_sel('WER');
   _ha:=RA_GRPN.actions('WER','dpUA','W');
   RA_GRPN.f_set('SYMBOL',,'"RA_GRPN".REFERENCE not in (select RA_GRPN from RA_GRPP where R=\':_a\')',$R.ref());
   {? RA_GRPN.f_size()
   || RA_GRPN.select()
   || FUN.info('Brak grup do dołączenia.'@)
   ?};
   RA_GRPN.f_clear();
   RA_GRPN.actions('WER',_ha);
   RA_GRPN.cntx_pop()

|? _tryb='GX'
:  Właściwe dodawanie rubryk do bieżącej grupy.
|| R.cntx_psh();
   R.index('RUBKOD');
   R.prefix();
   R.f_set('RN',,'"R".REFERENCE not in (select R from RA_GRPP where RA_DEF is null and RA_GRPN=\':_a\')',
      $RA_GRPN.ref());
   R.win_sel('WYBX');
   R.select();
   R.f_clear();
   R.cntx_pop()
?};
0


\ra_grpp_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed obsługą okienka tabeli RA_GRPP w panelu zarządzania atrybutami i z poziomu redagowania rubryk płacowych.
::       Formuła wykorzystywana do odświeżenia zawartości tabeli RA_GRPP.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE: _a [INTEGER] - Moment (przyczyna) wywołania:
::                      0 - Okienko odświeżane na skutek wywołania grp_disp().
::                      1 - Okienko zostało aktywowane.
::   WY:
::  OLD: \wnd_bs/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_tryb:=_par.flagi.tryb;

{? -_tryb='ra'
|| RA_GRPN.cntx_psh();
   {? ~_a
   || RA_GRPP.hdr_sel();
      RA_GRPP.hdr_sel(' rubryki');
      RA_GRPP.index('PR');
      RA_GRPP.prefix(null(),R.RN,);
      RA_GRPP.first()
   ?}
:: RA_GRPN.cntx_pop() - Kontekst jest pobierany po obsłudze okienka.

|? _tryb='GX'
|| R.cntx_psh();
   {? ~_a
   || RA_GRPP.index('NR');
      RA_GRPP.prefix(RA_GRPN.SYMBOL,null(),);
      RA_GRPP.first()
   || {? RA_GRPN.size()
      || _hid:='';
         _def:=':D'
      || _hid:=':D';
         _def:=''
      ?};
      RA_GRPP.actions('WERR',_hid,_def,1)
   ?}
:: R.cntx_pop() - Kontekst jest pobierany po obsłudze okienka.

?}


\ra_grpp_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po obsłudze okienka tabeli tymczasowej rub.TAB w panelu zarządzania atrybutami.
::   WE: _a [INTEGER] - Moment (przyczyna) wywołania:
::                      0 - Okienko odświeżane na skutek wywołania grp_disp().
::                      1 - Okienko zostało aktywowane.
::   WY:
::  OLD: \wnd_as/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_tryb:=params_get().flagi.tryb;

{? -_tryb='ra'
|| RA_GRPN.cntx_pop()
|? _tryb='GX'
|| R.cntx_pop()
?}


\def_tree
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Funkcja tworzy tablicę z uchwytem do tabeli tymczasowej i jej okienka wertowania. Tabela jest wykorzystywana
::       do prezentowania w strukturze hierarchicznej położenia atrybutu. Tabela i okienko wykorzystywane są w panelu do
::       zarządzania atrybutami oraz z poziomu tabeli rubryk.
::   WE:
::   WY:
::  OLD: \menu/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
_def_tree:=obj_new('TAB','WS');

_tab:=_def_tree.TAB:=tab_tmp(3,
   'DEF_TREE','TREE_REF','Atrybut',
   'RODZAJ','STRING[1]','Rodzaj',
   'SYMBOL','INTEGER','Symbol',
   'NAZWA','STRING[50]','Nazwa'
);

_ws:=_def_tree.WS:=_tab.mk_sel('Położenie atrybutu'@,'N',,'a4r_poa',,,,1);
_tab.win_fld(_ws,,'SYMBOL',,,25,,,,,'Unikalny symbol'@,,,,,,'mobile_visible=1');
_tab.win_fld(_ws,,'NAZWA',,,47,,,,,'Krótki opis'@,,,,,,'mobile_visible=1');
_tab.win_act(_ws,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,"exec('zwin_rozwin','#tree')",,,,,,
   'R',,'target=window'
);

_def_tree


\def_tree_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed obsługą okienka tabeli tymczasowej def_tree.TAB w panelu zarządzania atrybutami. Formuła wykorzystywana
::       do odświeżenia zawartości tabeli def_tree.TAB.
::       Formuła wymaga odpowiedniego kontekstu wywołania - przekazanych argumentów.
::   WE: _a [INTEGER] - Moment (przyczyna) wywołania:
::                      0 - Okienko odświeżane na skutek wywołania grp_disp().
::                      1 - Okienko zostało aktywowane.
::   WY:
::  OLD: \wnd_bs/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
: Zawartość okienka jest budowana na podstawie rekordu tabeli atr4x.TAB lub atrd.TAB, czyli po zmianie rekordu w tamtej
: tabeli, a więc podczas odświeżania okna na skutek wywołania grp_disp(). Tak więc aktywacja okienka nie wpływa na jego
: treść.
{? _a
|| return()
?};
_par:=params_get();
_def_tree:=_par.def_tree;
_tab:={? _par.flagi.tryb='rg' || _par.atrd || _par.atr4x ?}.TAB;

_def_tree.TAB.erase();
RA_DEF.cntx_psh();
RA_DEF.index('RODZAJ');
RA_DEF.clear();
{? RA_DEF.find_key(_tab.RODZAJ,_tab.SYMBOL)
||_fml:='';
   {!
   |? _fml:=
         '_a.blank(); '+
         '_a.DEF_TREE:=_parent; '+
         '_a.RODZAJ:=\''+RA_DEF.RODZAJ+'\'; '+
         '_a.SYMBOL:='+$RA_DEF.SYMBOL+'; '+
         '_a.NAZWA:=\''+RA_DEF.NAZWA+'\'; '+
         '{? _a.add() || _parent:=#_a.ref() ?}; '+
         _fml;
      {? RA_DEF.RA_DEF>0 || RA_DEF.seek(RA_DEF.RA_DEF,) ?}
   !};
   _fml:='_parent:=0; '+_fml+' ~~';
   ($_fml)(_def_tree.TAB)
?};
RA_DEF.cntx_pop();
_def_tree.TAB.last();
_def_tree.TAB.tr_set(1,_def_tree.WS,1,0);
win_set('cur_row_pos=-1')


\ra_use_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli RA_USE.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('ra_use_moda','rubatr');
~~


\ra_use_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli RA_USE.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('ra_use_moda','rubatr');
~~


\ra_use_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli RA_USE.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('ra_use_moda','rubatr');
~~


\ra_use_moda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Po modyfikacji rekordu.
::       Formuła wywoływana z wyzwalaczy typu "po" dla tabeli RA_USE.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Wymuszenie odtworzenia mapy nieobecnosci na portalu (jeżeli istnieje).
{? ~exec('_map_erase','portal_nieobecnosci')
|| undo('Aktualizacja mapy nieobecności na portalu nie powiodła się.'@)
?};
~~

:Sign Version 2.0 jowisz:1045 2023/10/02 15:32:31 2e549aa5668aeabcfa227aef6fa7ca0728997684b27829cafe590882bb788a6a1f310a051378da8f201ed163661d27223b43865036aa69fb70948c0780941d03e5eb3a8f40bde7665d5abcee2d70f2be4db64607a4d510420481c128cdb3e3b7d8aefc01951e3b9ca1d46b14624de40c29185fc17f65c64cb37b73119c187796
