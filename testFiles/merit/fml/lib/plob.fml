:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: plob_ol.fml
:: Utworzony: 18.04.2018
:: Autor: TMR
::======================================================================================================================
:: Zawartość: Formuły do obsługi tabeli definicji obiektu lokalizacji
::======================================================================================================================


\formulaNames
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.22]
:: OPIS: Zwraca obiekt stałych z nazwami formuł
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('dodanie','aktualizacja','dezaktywacja','domyslny','pracownicy');
_result.dodanie:='Dodanie obiektu lokalizacji';
_result.aktualizacja:='Aktualizacja obiektu lokalizacji';
_result.dezaktywacja:='Dezaktywacja obiektu lokalizacji';
_result.domyslny:='Obiekt domyślny';
_result.pracownicy:='Pracownicy w obiekcie lokalizacji';
_result


\spr_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: EJ [2015]
::  MOD: TMR [18.22]
:: OPIS: Sprawdzenie wartości tekstowej parametru technicznego
::   WE: _a [NUMBER] - numer parametru
::       _b [NUMBER] - czy wyświetlać komunikat (1 - domyślnie/0)
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_nr_par:={? var_pres('_a')=type_of(0) || _a || return(0) ?};
   _msg:={? var_pres('_b')=type_of(0) || _b || 1         ?};

{? exec('get_par','#parametr',_nr_par,2)<>'T'
|| {? _msg
   || FUN.emsg('Funkcjonalność niedostępna.'@+'\n'+
               'Należy sprawdzić ustawienia parametru systemowego nr: %1.'@[$_nr_par])
   ?};
   0
|| 1
?}


\ob_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: EJ [2015]
:: OPIS: Funkcja ustalająca formułę na domyślny obiekt dla pracownika
::       Wg parametryzacji formuł dla obiektów i aktywnego powiązania (pole F_OBDOM)
::   WE: _a [REFERENCE] - wskazanie na pracownika
::       _b [DATE]      - data badania
::   WY: ''/napis z refem konta kosztowego
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_p_ref:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _data:={? var_pres('_b')=type_of(date) || _b || return(_result) ?};

{? exec('spr_par','plob',353,1)
|| {? (_ok:=exec('getForm4Acr','plob_ol','F_OBDOM'))<>''
   || _result:=($_ok)(_p_ref,_data)
   ?}
?};
_result


\prac4ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.22]
:: OPIS: Tworzy tabele pracownikow dla wybranej lokalizacji oraz obiektu kosztowego
::   WE: _a  - [REFERENCE]  - ref obiektu do planowania (PLOB_H)
::       _b  - [STRING]     - warstwa
::       _c  - [DATE]       - data od
::       _d  - [DATE]       - data do
::       _e  - [STRING]     - ref lokalizacji - jednostki organizacyjnej
::   WY: tabela z pracownikami
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('tab_zal','stanprac');
{? exec('spr_par','plob',353,0)
|| {? (_fml:=exec('getForm4Acr','plob_ol','F_PRAC'))<>''
   || &_result;
      _result:=($_fml)(_a,_b,_c,_d,_e)
   ?}
?};
_result


\getSourceRef
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.22]
:: OPIS: Zwraca wskazanie na obiekt zrodlowy dla podanego obiektu planowania
::   WE: _a - [REFERENCE] - wskazanie na obiekt planowania (PLOB_H)
::   WY: ref/null
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
_plob_h:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};

:: wyszukujemy rekord w KK - w naszym przypadku jest to obiekt zrodlowy
_result:=exec('FindAndGet','#table',PLOB_H,_plob_h,,"KK",null());
_result


\isPracaNaOb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.22]
:: OPIS: Formula do sprawdzania czy pracownik pracowal na obiekcie do planowania w zakresie podanych dat
::   WE: _a  - [REFERENCE]  - ref pracownika
::       _b  - [REFERENCE]  - ref obiektu do planowania
::       _c  - [STRING]     - warstwa
::       _d  - [DATE]       - data od
::       _e  - [DATE]       - data do
::      [_f] - [REFERENCE]  - ref z tabeli zrodlowej rekordu bedacego obiektem do planowania (w naszym przypadku KK)
::      [_g] - [INTEGER]    - sprawdzanie tylko podzialow bez pracy domyslnej
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
  _p_ref:={? var_pres('_a')=7
          || _a
          || {? var_pres('_a')=2 || exec('FindAndGet','#table',P,_a,,null()) ?}
          ?};
 _plob_h:={? var_pres('_b')=7 || _b   || return(_result) ?};
_warstwa:={? var_pres('_c')=2 || ~-_c || return(_result) ?};
    _beg:={? var_pres('_d')=4 || _d   || return(_result) ?};
    _end:={? var_pres('_e')=4 || _e   || return(_result) ?};
    _ref:={? var_pres('_f')=7 || _f   || null()          ?};
_podzDom:={? var_pres('_g')=1 || _g   || 1               ?};

:: sprawdzenie podzialow
PLOB_P.cntx_psh();
:: dla wywolania z grafików sprawdzamy wszystko
{? _warstwa='G'
|| PLOB_P.index('PRACDP');
   {? _beg=_end
   || PLOB_P.prefix(_p_ref,_beg)
   || PLOB_P.prefix(_p_ref)
   ?}
|| PLOB_P.index('PRAC');
   {? _beg=_end
   || PLOB_P.prefix(_p_ref,_warstwa,_beg)
   || PLOB_P.prefix(_p_ref,_warstwa)
   ?}
?};

_result:=PLOB_P.find_tab(,'PLOB_H' ,,'=',_plob_h
                         ,'DATA_DP',,'>=',_beg
                         ,'DATA_DP',,'<=',_end);
PLOB_P.cntx_pop();

:: sprawdzenie podzialow domyslnych
{? _podzDom & _result=0
||
:: jezeli sa w KAL_BUFFie zapisy z domyslnym podzialem to sprawdzamy domyslne przypisanie obiektu
   {? exec('isPodzDomInBuff','plob',_p_ref,_warstwa,_beg,_end) |
      exec('isEmptyBuff','plob',_p_ref,_warstwa,_beg,_end)
   || _result:=exec('isPracaNaObDom','plob',_p_ref,_plob_h,_beg,_end,_ref)
   ?}
?};

_result


\isPodzDomInBuff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Formula do sprawdzania czy pracownik ma wprowadzony podzial domyslny w KAL_BUFFie w zakresie podanych dat
::   WE: _a - [REFERENCE]  - ref pracownika
::       _b - [STRING]     - warstwa
::       _c - [DATE]       - data od
::       _d - [DATE]       - data do
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
  _p_ref:={? var_pres('_a')=7 || _a   || return(_result) ?};
_warstwa:={? var_pres('_b')=2 || ~-_b || return(_result) ?};
    _beg:={? var_pres('_c')=4 || _c   || return(_result) ?};
    _end:={? var_pres('_d')=4 || _d   || return(_result) ?};

KAL_BUFF.cntx_psh();
{? _beg=_end
|| KAL_BUFF.index('PRACDATA');
   KAL_BUFF.prefix(_p_ref,_beg);
   _result:=KAL_BUFF.find_tab( ,'P_DOM',,'=','T'
                               ,'GPW',,'=',_warstwa
                             )
|| KAL_BUFF.index('PRZNODT');
   KAL_BUFF.prefix(_p_ref,_warstwa);
   _result:=KAL_BUFF.find_tab( ,'P_DOM',,'=','T'
                               ,'DATA',,'>=',_beg
                               ,'DATA',,'<=',_end
                             )
?};
KAL_BUFF.cntx_pop();

_result


\isEmptyBuff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Formula do sprawdzania czy pracownik nie ma zapisow w KAL_BUFFie w zakresie podanych dat
::   WE: _a - [REFERENCE]  - ref pracownika
::       _b - [STRING]     - warstwa
::       _c - [DATE]       - data od
::       _d - [DATE]       - data do
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
  _p_ref:={? var_pres('_a')=7 || _a   || return(_result) ?};
_warstwa:={? var_pres('_b')=2 || ~-_b || return(_result) ?};
    _beg:={? var_pres('_c')=4 || _c   || return(_result) ?};
    _end:={? var_pres('_d')=4 || _d   || return(_result) ?};

KAL_BUFF.cntx_psh();
KAL_BUFF.index('PRZNODT');
KAL_BUFF.prefix(_p_ref,_warstwa);
_result:=KAL_BUFF.find_tab( ,'DATA',,'>=',_beg
                            ,'DATA',,'<=',_end
                          );
KAL_BUFF.cntx_pop();

_result=0


\isPracaNaObDom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Funkcja sprawdza czy pracownik mial przypisany wskazany obiekt jako domyslny w zakresie badanych dat
::   WE: _a   - [REFERENCE] - ref pracownika
::       _b   - [REFERENCE] - ref obiektu do planowania
::       _c   - [DATE]      - data od
::       _d   - [DATE]      - data do
::      [_e]  - [REFERENCE] - ref z tabeli zrodlowej rekordu bedacego obiektem do planowania (w naszym przypadku KK)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
  _p_ref:={? var_pres('_a')=7 || _a   || return(_result) ?};
_plan_ob:={? var_pres('_b')=7 || _b   || return(_result) ?};
    _beg:={? var_pres('_c')=4 || _c   || return(_result) ?};
    _end:={? var_pres('_d')=4 || _d   || return(_result) ?};
    _ref:={? var_pres('_e')=7 || _e   || null()          ?};

:: tu juz idzie logika w zaleznosci od tego co jest powiazanym obiektem do planowania
:: bazujemy na wpisach w historii kont kosztowych
P_KK.cntx_psh();
P_KK.index('OD');
P_KK.prefix(_p_ref);
{? _beg=_end
|| _result:=P_KK.find_le(_end) & P_KK.KK=_ref
|| _result:=P_KK.find_tab(,'OD',,'<=',_end
                          ,'KK',,'=', _ref
                         )
?};
P_KK.cntx_pop();
_result


\getPracZatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Funkcja pobiera zatrudnionych pracowników w zakresie podanych dat
::   WE: _a - [DATE] - data od
::       _b - [DATE] - data do
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_beg:={? var_pres('_a')=4 || _a   || return(_result) ?};
_end:={? var_pres('_b')=4 || _b   || return(_result) ?};

_sql:=''+
" select distinct P
  from H join H_ZM using(H_ZM.REFERENCE, H.KZ)
  where
      H_ZM.KZ='Z' and
      H.OD<=to_date(:_b) and NVL(H.DO,to_date(:_b))>=to_date(:_a)
";

_result:=sql(_sql,_beg,_end);
_result


\delDraftAndPodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Funkcja sprawdza czy są, a jeżeli tak to usuwa podziały z brudnopisu i właściwej tabeli przypisań
::   WE:  _a [REFERENCE] - wskazanie na pracownika
::        _b [STRING]    - warstwa 'p'(Plan)/'g'(Grafik)/'w'(Wykonanie)
::        _c [DATE]      - data od
::        _d [DATE]      - data do
::   WY: -1/0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=-1;
  _p_ref:={? var_pres('_a')=7 || _a   || return(_result) ?};
_warstwa:={? var_pres('_b')=2 || ~-_b || return(_result) ?};
_data_od:={? var_pres('_c')=4 || _c   || return(_result) ?};
_data_do:={? var_pres('_d')=4 || _d   || _data_od        ?};
_result:=0;

{! _ind:=#_data_od..#_data_do
|! _data_dp:=#_ind;
   _ok:=exec('del_draft','plob_pb',_p_ref,_warstwa,_data_dp);
   {? _ok>0
   || _result+=exec('del_podz','plob_p',_p_ref,_warstwa,_data_dp)
   ?}
!};
_result

:Sign Version 2.0 jowisz:1028 2019/06/07 15:59:57 15dfec3c9a91c06b173f3119d21e04f2d3ec9e672262256eb2084c7fcff9f9d4a52a854c4b26eb4f2697b256d3b3786d942fef90a317c6c99502b46bb35193e6e14b4998b27cc66eaa597a50458a3a83f99e59a2749ce8d806633db7f10bf33c106756940d4a65eeaf3d178b825778cfadb6746b7971bb5069f14eac21690cdd
