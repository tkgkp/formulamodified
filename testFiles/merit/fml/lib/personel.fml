:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: personel.fml
:: Utworzony: 24.11.2015
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Plik zawiera formuły obszaru PERSONEL
::======================================================================================================================


\f_zatr_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Zwraca wskazanie na formę współpracy właściwą według określonej kodem przechowywanym polu P obiektu __F_ZATR.
::   WE:
::   WY: wskazanie na rekord tabeli F_ZATR
::  OLD: \f_zatr_1/kali.fml
::----------------------------------------------------------------------------------------------------------------------
__F_ZATR.find(__F_ZATR.P)


\f_zatr_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na formę współpracy właściwą według określonej kodem przechowywanym polu O obiektu __F_ZATR.
::   WE:
::   WY: wskazanie na rekord tabeli F_ZATR
::----------------------------------------------------------------------------------------------------------------------
__F_ZATR.find(__F_ZATR.O)


\f_zatr_w
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na formę współpracy właściwą według określonej kodem przechowywanym polu W obiektu __F_ZATR.
::   WE:
::   WY: wskazanie na rekord tabeli F_ZATR
::----------------------------------------------------------------------------------------------------------------------
__F_ZATR.find(__F_ZATR.W)


\xxx_grp_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Formuła dedykowana obsłudze "grupowych" obszarów roboczych.
::   WE: _a OBJECT - wskazanie obiektu klasy FUN_SET,
::       _b STRING - identyfikator czynności,
::       _c [STRING] - nazwa funkcji,
::       _d [STRING] - opis działania,
::       _e [STRING] - formuła na uidref,
::       _f [RULE] - treść wykonywanej formuły,
::       _g [INTEGER]- dodatkowe określenie dostępności,
::       _h [STRING] - symbol grupy funkcji.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_uid:=_b;
_fml:={? var_pres('_e')=type_of('') || _e || '' ?};

_cfg:=exec('xxx_grp_cfg','personel',_uid,_fml);

_text:={? var_pres('_c')=type_of('') || _c || _cfg.text ?};
_help:={? var_pres('_d')=type_of('') || _d || _cfg.text ?};
_rule:={? var_pres('_f')=type_of("") || _f || _cfg.rule ?};
_access:=
   {? var_pres('_g')<>type_of(0) | _g<>0
   || "  {? exec('chk_role','#b__box',OPERATOR.USER,_a.SYMBOL)
         || 'T'
         || 'N'
         ?}
      "
   || 'N'
   ?};
_parent:={? var_pres('_h')=type_of('') || _h || '' ?};

_obj.add_fml(_text,_rule,_help,_access,_parent,_uid);
~~


\xxx_grp_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła dedykowana obsłudze "grupowych" obszarów roboczych. Do wskazanego okna redagowania dodaje przycisk
::       reprezentujący kolejną funkcjonalność grupowego przetwarzania danych.
::   WE:  _a  [TABLE]  - Uchwyt tabeli, w oknie której umieszczony będzie przycisk.
::        _b  [STRING] - Akronim okna.
::        _c  [STRING] - Identyfikator czynności.
::       [_d] [STRING] - Opis przycisku.
::       [_e] [STRING] - Podpowiedź do przycisku.
::       [_f] [STRING] - Formuła na uidrefa.
::       [_g] [RULE]   - Treść formuły uruchamianej po naciśnięciu przycisku.
::       [_h] [INTEGER]- Dodatkowe określenie dostępności przycisku
::   WY: Identyfikator utworzonego przycisku.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_wnd:=_b;
_uid:=_c;
_fml:={? var_pres('_f')=type_of('') || _f || '' ?};

_cfg:=exec('xxx_grp_cfg','personel',_uid,_fml);

_text:={? var_pres('_d')=type_of('') || _d || _cfg.text ?};
_help:={? var_pres('_e')=type_of('') || _e || _cfg.text ?};
_rule:={? var_pres('_g')=type_of("") || _g || _cfg.rule ?};
_state:={? var_pres('_h')=type_of(0) || _h || 1 ?};

_btn:=_TAB.win_ebtn(_wnd,'text='+_text+',btn_label_align=center,panel=left,align=begin',_rule);
_TAB.btn_eopt(_wnd,_btn,'state=%1,tooltip="%2"'
   [{? _state & exec('chk_role','#b__box',OPERATOR.USER,_uid) || 'normal' || 'grayed' ?},gsub(_help,'"','""')]
);

_btn


\xxx_grp_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Pobiera informacje potrzebne do utworzenia reprezentanta czynności (przyciusk w okienku edycji lub pozycja
::       wywoływacza formuł).
::   WE: _a STRING - identyfikator czynności,
::       _b STRING - formuła na uidref.
::   WY: wskazanie na tablicę nazwaną zawierającą:
::       text - nazwę czynności,
::
::       rule - treść formuły do wykonania
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_uid:=_a;
_fml:=_b;
_prc:=0;

:: wartość zwracana
_ret:=obj_new('text','rule');
_ret.text:='';

B_ACTION.cntx_psh();
B_ACTION.index('UNIK');
B_ACTION.prefix(_uid,);
{? B_ACTION.first()
|| _ret.text:=B_ACTION.NAME;
   _prc:=(B_ACTION.PROC='T')
?};
B_ACTION.cntx_pop();

_ret.rule:=$
   {? _prc
   || "  _params:=exec('mp_run_a','#b__box');
         _params.ACT_UID:='"+_uid+"';
         _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);"+
      {? _fml<>'' || "_params.UIDREF:="+_fml+";" || "" ?}+
      "  _file_name:='!'+(-~_params.ACT_UID);
         {? exec('is_fun','#file',_file_name,'setPorts')
         || exec('setPorts',_file_name,_params)
         ?};
         exec('mp_run','#b__box',_params);
         ''
      "
   || $"exec('np_run','#b__box','"+_uid+"'); ''"
   ?};

_ret


\s_zus_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustawia parametry importu / eksportu.
::   WE:
::   WY: Tablica z elementami nazwanymi.
::----------------------------------------------------------------------------------------------------------------------
_cfg:=obj_new('fn','pth','sep','opt','ffn');

:: Nazwa pliku.
_cfg.fn:='s_zus.dfg';

:: Wyszukiwanie zgodnie z deklaracją ścieżek?
_cfg.pth:=1;

:: Znak oddzielający pola rekordu - przyjmujemy format CSV.
_cfg.sep:=%1+';';

:: Dodatkowe parametry importu / eksportu: standard kodowania, nazwy pól w pierwszym wierszu.
_cfg.opt:='UTF-8'+{? _cfg.pth || ',pth' || '' ?}+',header';

:: Pełna nazwa pliku - do komunikatów.
_cfg.ffn:={? _cfg.pth || pth_dir(_cfg.fn)+exec('sep','#file') || '' ?}+_cfg.fn;

_cfg


\s_zus_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR
:: OPIS: Import kodów ZUS.
::   WE: [_a] [INTEGER] - Import z pytaniem
::                         0 - Nie;
::                         1 - Tak [domyślnie].
::   WY: 0 - Import nie powiódł się.
::       1 - Import powiódł się.
::  OLD: \s_zus/demo_ka.fml
::----------------------------------------------------------------------------------------------------------------------
_ask:={? var_pres('_a')=type_of(0) || _a || 1 ?};

_cfg:=exec('s_zus_cfg','personel');

{? (_ask & ~exec('czy_imp','personel','słownika kodów ZUS')) |
   ~exec('czy_plik','personel',_cfg.fn,_cfg.pth)
|| return(0)
?};

S_ZUS.cntx_psh();
S_ZUS.index('S_ZUS');
S_ZUS.prefix();
_ret:=S_ZUS.import(_cfg.fn,1,1,_cfg.sep,_cfg.opt,,'RODZAJ',,1,,'KOD',,2,,'OPIS',,3,);
S_ZUS.cntx_pop();

_ret


\czy_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [2010]
:: OPIS: Wyświetla okienko, w którym użytkownik musi potwierdzić chęć przeprowadzenia importu danych.
::       _a - Umożliwia się dostosowanie komunikatu treścią przekazaną argumentem.
::  OLD: \czy_imp/demo_ka.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a
|| FUN.ask('Czy na pewno rozpocząć import %1?'@[_a])
|| FUN.ask('Czy na pewno rozpocząć import danych?'@)
?}


\czy_plik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [2010]
:: OPIS: Sprawdza, czy plik o podanej przez argument nazwie istnieje.
::   WE:  _a  [STRING]  - Nazwa pliku.
::       [_b] [INTEGER] - Wyszukiwanie zgodnie z deklaracją ścieżek?
::                         0 - Nie [domyślnie];
::                         1 - Tak.
::   WY: 1 - Plik istnieje.
::       0 - Brak dostępu do pliku.
::  OLD: \czy_plik/demo_ka.fml
::----------------------------------------------------------------------------------------------------------------------
_fname:={? var_pres('_a')=type_of('') || _a || '' ?};
_pth:=var_pres('_b')=type_of(0) & _b;

{? _fname=''
|| 0
|? fexists(_fname,_pth)
|| 1
|| FUN.emsg(
      'Odnalezienie pliku \"%1\" nie jest możliwe.'@[_fname]+'\n'+
      'Działanie procesu importu danych zostanie zakończone.'@
   );
   0
?}


\kal_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Ustawia kalendarz właściwy dla współpracownika
::   WE: [_a] [NUMBER] - Rok.
::   WY:
::  OLD: \KAL_PRAC/kali.fml
::----------------------------------------------------------------------------------------------------------------------
{? P.KAL<>null
|| {? var_pres('_a')=type_of(0)
   || __KAL.set_cal(P.KAL,_a)
   || __KAL.set_cal(P.KAL)
   ?}
|| exec('kal_list','personel')
?}


\kal_list
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Ustawia kalendarz właściwy dla listy
::   WE:
::   WY:
::  OLD: \KAL_LIST/kali.fml
::----------------------------------------------------------------------------------------------------------------------
__KAL.set_cal({? O.T().KA || KT.KA || 'standard' ?},O.R)


\info_zw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKG [12.41]
:: OPIS: Komunikaty o zapisach z tabeli H i N wykraczające poza datę końca umowy
::       Formula musi mieć w buforze właściwego pracownika i jego umowę o pracę
::   WE:  _a  [STRING] - Miejsce wywołania:
::                         Z - Akcja 'Zwolnij';
::                         P - Akcja 'Popraw' w przebiegu zatrudnienia;
::                         N - Akcje 'Dołącz' i 'Popraw' w tabeli nieobecności.
::   WY: Wynik weryfikacj (czy są konflikty):
::          1 - Konflikt zapisów;
::          0 - Dane poprawne.
::  OLD: \info_zw/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_info:=tab_tmp(1,'NR','INTEGER','Lp.','OPIS','STRING[115]','');
_lp:=2;
_ref:=null();
_poz:=1;
_war:=1;
_indx:=A_OKRP.ndx_tmp(,1,'P',,1,'OKR','S',1);
H_UM.cntx_psh();
H_UM.index('OD');
H_UM.prefix(P.ref());
{? H_UM.last()
||_ref:=H_UM.ref()
?};
H_UM.cntx_pop();
H_UM.cntx_psh();
H_UM.index('OD');
H_UM.prefix(P.ref());
{? _a='Z' | (_a='P' & (H_UM.ref()=_ref & H_UM.DO<>date(0,0,0)))
|| N.cntx_psh();
   N.index('NIEOBECN');
   N.prefix('N',P.ref());
   {? N.last()
   || {? N.DO>H_UM.DO | (_a='P' & N.OD>H_UM.DO)
      || _info.NR:=_lp;
         _lp+=1;
         _info.OPIS:=
            {? _a='Z'
            || 'Nieobecność: zapis wykraczający poza datę zwolnienia'@
            || 'Nieobecność: zapis wykraczający poza datę zakończenia umowy'@
            ?};
         _info.add();
         _poz:=0;
         0
      ?}
   ?};
   N.cntx_pop()

|? _a='N' & H_UM.last() & H_UM.DO<>date(0,0,0)
|| {? N.OD>H_UM.DO | N.DO>H_UM.DO
   || _info.NR:=_lp;
      _lp+=1;
      _info.OPIS:='Nieobecność: zapis wykraczający poza datę zakończenia umowy'@;
      _info.add();
      0
   ?}
?};
A_OKRP.cntx_psh();
A_OKRP.index(_indx);
A_OKRP.prefix(P.ref(),'O');
{? _a='P' | _a='Z'
|| {? A_OKRP.first() & (_a='Z' | (H_UM.ref()=_ref & H_UM.DO<>date(0,0,0)))
   || {? _poz=1
      || _info.NR:=3
      || _info.NR:=4
      ?};
      {!
      |? {? H_UM.DO<A_OKRP.DO
         || _info.OPIS:='      '+$A_OKRP.OD+' - '+$A_OKRP.DO+', '+A_OKRP.OKR().NAZ().NAZ;
            _info.add();
            _war:=0
         ?};
         {? _war=0
         || _info.NR+=1
         ?};
         A_OKRP.next()
      !};
      {? _war=0
      || _lp:=_info.NR
      ?}
   ?}
?};
A_OKRP.cntx_pop();
A_OKRP.ndx_drop(_indx);
{? _lp>2
|| _info.NR:=1;
   _info.OPIS:=
      {? _a='Z'
      || 'Pracownik: %1, zwolnienie z dniem: %2'@ [P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE,$H_UM.DO]
      || 'Pracownik: %1, zakończenie umowy z dniem: %2'@ [P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE,$H_UM.DO]
      ?};
   _info.add();
   {? _war=0
   || {? _poz=1
      || _info.NR:=2
      || _info.NR:=3
      ?};
      _info.OPIS:=
         {? _a='P'
         || 'Lista okresów rozliczeniowych wykraczających poza datę zakończenia umowy:'@
         || 'Lista okresów rozliczeniowych wykraczających poza datę zwolnienia:'@
         ?};
      _info.add()
   ?}
?};
H_UM.cntx_pop();
{? _dh:=_info.size()
|| _dh+=1;
   {? _dh<5
   || _dh:=5
   |? _dh>30
   || _dh:=30
   ?};
   _sel:=_info.mk_sel('Dane wymagające korekty:'@,,0,,,,_dh);
   _info.win_fld(_sel,,'OPIS',,,115,,,,1);
   _info.win_sel(_sel);
   _info.select();
   1
|| 0
?}


\bdo_ending
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła przygotowuje i udostępnia tabelę tymczasową z danymi pracowników, których badania lekarskie kończą się
::       w zadanym okresie.
::       Uwagi:
::          - Bufor tabeli P nie jest zapamiętywany.
::          - Zakłada się, że na tabelę P jest załozony filtr.
::          - Formuła wykorzystywana w 'alertach' i w wydrukach.
::   WE: [_a] [DATE]   - Początek badanego okresu [domyślnie: date()].
::       [_b] [DATE]   - Koniec badanego okresu [domyślnie: date(0,0,0)].
::       [_c] [STRING] - Napis interpretowany jako formuła [domyślnie: '1']. Jeżeli formuła zwróci wartość 0 to dany
::                       współpracownik nie będzie przetwarzany.
::       [_d] [STRING] - Czy uwzględniać pracowników, którzy są aktualnie zatrudnieni, a którym umowa o pracę wygasa
::                       przed datą kontroli lub końcem badanego okresu?
::   WY: Tabela tymczasowa z danymi pracowników.
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
_tdate:=type_of(_d0);
_in:=obj_new('OD','DO');

_in.OD:={? var_pres('_a')=_tdate & _a<>_d0 || _a || date() ?};
_in.DO:={? var_pres('_b')=_tdate || _b || _d0 ?};
_war:={? var_pres('_c')=type_of('') & _c<>'' || $_c || "1" ?};
_za:={? var_pres('_d')=type_of('') || _d || 'N' ?};

_TAB:=tab_tmp(2,
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
   'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']','PESEL',
   'T','STRING['+$MS.fld_len(P,'T')+']','Nr teczki',
   'DZA','DATE','Data zatrudnienia',
   'DZ','DATE','Data zwolnienia',
   'WYDZIAL','STRING['+$MS.fld_len(UD_SKL,'SYMBOL')+']','Jednostka organizacyjna',
   'TYPK','STRING[8]','Rodzaj badania',
   'TYPO','STRING[150]','Opis typu badania',
   'DTO','DATE','Data orzeczenia',
   'DTNB','DATE','Data następnego badania',
   'NRO','STRING[20]','Nr orzeczenia',
   'WYNK','STRING[9]','Kod wyniku',
   'WYNL','STRING[255]','Opis wyniku'
);

{? (_in.DO=_d0 | _in.OD<=_in.DO) & P.f_active() & P.f_first()
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   UD_SKL.cntx_psh();
   UD_SKL.prefix();
   SLO_KOD.cntx_psh();
   SLO_KOD.prefix();
   S_ZUS.cntx_psh();
   S_ZUS.prefix();
   BDO.cntx_psh();
   BDO.index('PDTO');

   {!
   |? BDO.prefix(P.ref());
      P.OSOBA();
      {? _war() & (_in.DO=_d0 | P.DZA<=_in.DO) & (P.DZ=_d0 | _in.OD<=P.DZ | (_za='T' & P.DZ>=date())) & BDO.last()
      || _okr:=1;
         _od:=_do:=_d0;
         {!
         |? {? '|WSTĘPNE|OKRES|KONTROL|'*('|%1|' [BDO.TYP().KOD])=0
::             Jeżeli zapis nie jest systemowy, przechodzimy na poprzedni.
            || BDO.prev()

            |? _okr=1
::             Pierwszy analizowany okres. Jeżeli okres dotyczy 'zdolności' do pracy, to musimy jeszcze przeanalizować
::             poprzedni okres. Może się bowiem zdarzyć następująca sytuacja.
::                1. 2016/02/01 - zdolny do 2019/02/01
::                2. 2016/06/01 - niezdolny.
            || _okr+=1;
               _od:=BDO.DTO;
               _do:=BDO.DTZ;
               _typ:=BDO.TYP().KOD;
               _opis:=BDO.TYP().NAZWA;
               _nrorz:=BDO.NRO;
               _wkod:=BDO.WYNIK().KOD;
               _wlinia:=BDO.WYNIK().LINIA;
               {? BDO.WYNIK().KOD='21'
               || BDO.prev()
               ?}

            |? _okr=2
::             Drugi analizowany okres (jeżeli pierwszy dotyczył 'zdolności'). Może co najwyżej zmienić datę.
            || {? BDO.WYNIK().KOD<>'21' & _od<=BDO.DTZ & BDO.DTZ<_do
               || _do:=BDO.DTZ
               ?};
               0
            ?}
         !};
         {? _do<>_d0 & P.DZA<=_do & (P.DZ=_d0 | _do<=P.DZ | _za='T') & _in.OD<=_do & (_in.DO=_d0 | _do<=_in.DO)
         || _TAB.NAZWISKO:=OSOBA.NAZWISKO;
            _TAB.PIERWSZE:=OSOBA.PIERWSZE;
            _TAB.PESEL:=OSOBA.PESEL;
            _TAB.T:=P.T;
            _TAB.DZA:=P.DZA;
            _TAB.DZ:=P.DZ;
            _TAB.WYDZIAL:=P.WYDZIAL().SYMBOL;
            _TAB.TYPK:=_typ;
            _TAB.TYPO:=_opis;
            _TAB.DTO:=_od;
            _TAB.DTNB:=_do;
            _TAB.NRO:=_nrorz;
            _TAB.WYNK:=_wkod;
            _TAB.WYNL:=_wlinia;
            _TAB.add();
            0
         ?}
      ?};
      P.f_next()
   !};

   BDO.cntx_pop();
   S_ZUS.cntx_pop();
   SLO_KOD.cntx_pop();
   UD_SKL.cntx_pop();
   OSOBA.cntx_pop()
?};

_TAB


\pkd_wnieobecn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Ustalenie parametrów do wydruku nieobecności.
::   WE: _a - nazwa pliku
::       _b - nazwa sekcji
::       _c - tytuł okienka
::       _d - 0 - bez dodatkowego pytania (pkd_rozlnieobecn)
::            1 - wyświetlenie w oknie informacji o udziale procentowym nieobecności (pkd_wnieobecności)
::            2 - wyświetlenie w oknie informacji o realizacji z okresu
::            3 - wyświetlanie danych w ujęciu rocznym i ukrywanie pola KOD i OKR (pkd_zknieobecnosci)
::   WY: _tab - tabela z parametrami wydruku
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || _a:='profile.upf' ?};
_PROFILE:=exec('code_grp','profile',_a,_b,'N',,,'DICT');

_tab:=tab_tmp(1,
   'KOD','INTEGER','Wybór kodu',
   'OKR','INTEGER','Czy z okresu',
   'OD','DATE','Początek okresu',
   'DO','DATE','Koniec okresu',
   'REAL','INTEGER','Wybór dla pola check-box',
   'WYBOR','STRING[64]','Wybór parametów',
   'LISTA','SYS_MEMO','Lista składników'
);
_tab.KOD:=_tab.OKR:=0;
{? _d=3
|| _tab.OD:=date(,,1);
   _tab.DO:=date(,,0);
   _tab.KOD:=1
|| _tab.OD:=_tab.DO:=date(0,0,0)
?};
_tab.WYBOR:='';
_tab.add();
_tab.memo_set(,'LISTA');
_tab.memo_put(,'LISTA');

_tab.fld_fml(
   'KOD',
   'AFTER_EDIT',
   "  {? ~cur_tab().KOD
      || cur_tab().WYBOR:='';
         cur_tab().memo_set(,'LISTA')
      ?};
      cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().KOD,,'WYBOR');
      cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().KOD,,'LISTA')
   "
);

_tab.fld_fml(
   'OKR',
   'AFTER_EDIT',
   " {? cur_tab().OKR
     || cur_tab().OD:={? VAR.JESTLIST || date(O.R,O.M,1) || date(,,1) ?} ;
        cur_tab().DO:={? VAR.JESTLIST || date(O.R,O.M,0) || date(,,0) ?}
     || cur_tab().OD:=cur_tab().DO:=date(0,0,0)
     ?};
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().OKR,,'OD');
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().OKR,,'DO')
  "
);
_tab.fld_fml(
   'WYBOR',
   'F3',
   "  _par:=params_get();
      _par.PROFILE.find_key(fld());
      {? _par.PROFILE.select(,1)
      || _par.PROFILE.NAME
      ?}
   "
);
_tab.fld_fml(
   'WYBOR',
   'AFTER_EDIT',
   "  _par:=params_get();
      {? +cur_tab().WYBOR
      || _par.PROFILE.index(_par.PROFILE.ndx_tmp(,1,'GROUP',,,'NAME',,));
         _par.PROFILE.prefix(_par.tresc);
         {? _par.PROFILE.find_key(cur_tab().WYBOR)
         || cur_tab().WYBOR:=_par.PROFILE.NAME;
            cur_tab().put();
            _txt:=_par.PROFILE.memo_txt(,1,'VALUE');
            cur_tab().memo_set(_txt,'LISTA');
            cur_tab().memo_put(,'LISTA');
::          W okienku rezygnujemy z prezentacji przecinków na początku i końcu listy składników.
            {? 1+_txt=',' & _txt+1=','
            || cur_tab().memo_set(1-_txt-1,'LISTA')
            ?};
            _par.PROFILE.cntx_psh();
            _par.PROFILE.clear();
            exec('save','#profile',_par.PROFILE,_par.plik);
            _par.PROFILE.cntx_pop();
            win_disp();
            1
         || FUN.emsg('Brak zdefiniowanego parametru.'+'\n'+'Proszę wybrać wartość ze słownika'@); 0
         ?}
      || cur_tab().memo_set(,'LISTA');
         cur_tab().memo_put();
         1
      ?}
   "
);
_tab.fld_fml('LISTA','BEFORE_EDIT',"0");
{? _d=3
|| _tab.fld_fml(
      'OD',
      'AFTER_EDIT',
      "  cur_tab().efld_opt(
            params_get().ws,
            'enable='+{? cur_tab().OD~1<>cur_tab().DO~1  | (cur_tab().OD=#0 & cur_tab().DO=#0) || '1' || '0' ?},,
            'REAL'
         );
         cur_tab().REAL:=0;
         1
      "
   );
   _tab.fld_fml(
      'DO',
      'AFTER_EDIT',
      "  {? cur_tab().OD>cur_tab().DO
         || FUN.emsg('Data końca okresu musi być większa niż data początku okresu.'@)
         || cur_tab().efld_opt(
               params_get().ws,
               'enable='+{? cur_tab().OD~1<>cur_tab().DO~1 | (cur_tab().OD=#0 & cur_tab().DO=#0) || '1' || '0' ?},,
               'REAL'
            );
            cur_tab().REAL:=0;
            1
         ?}
      "
   )
?};

_ws:=_tab.mk_edit(_c,0,'pkd_wnieobecn');
_tab.win_esep(_ws,'Parametry wydruku'@);
{? _d<>3
|| _tab.win_efld(
      _ws,,
      'KOD',,,,,,
      'Nieobecności o wybranym kodzie'@,,,
      'radio-buttons',,
      'Wszystkie'@,"0",
      'Wybrane kody'@,"1"
   )
?};
_tab.win_efld(_ws,,'WYBOR',,,47,,,'Parametr'@,,'Wybór zestawu nieobecności.'@,,'F3_button=1');
_tab.win_efld(_ws,,'LISTA',,,50,-3,,'Składniki'@,,'Lista wybranych nieobecności.'@);
{? _d<>3
|| _tab.win_efld(
      _ws,,
      'OKR',,,,,,
      'Okres kontroli nieobecości'@,,,
      'radio-buttons',,
      'Bez ograniczeń'@,"0",
      'Zakres dat'@,"1"
   )
?};
_tab.win_efld(_ws,,'OD',,,11,,,'Początek okresu'@,,'Data początku okresu.'@);
_tab.win_efld(_ws,,'DO',,,11,,,'Koniec okresu'@,,'Data końca okresu.'@);
{? _d>0 & _d<4
|| _tab.win_efld(
      _ws,,
      'REAL',,,,,,
      {? _d=1 || 'Nieobecności'@
      |? _d=2 || 'Realizacja'@
      |? _d=3 || 'Wyświetlanie'@
      ?},,,
      'check-box',
      'check_label="%1"'[{? _d=1 || 'Udział procentowy'@
                         |? _d=2 || 'Tylko z wybranego okresu'@
                         |? _d=3 || 'Dane w ujęciu rocznym'@
                         ?}],
      "1",
      "0"
   )
?};
exec('ok_esc','#window',_tab,_ws);

_tab.efld_opt(_ws,'mark=1,enable='+{? _d=3 || '1' || '0' ?},,'WYBOR');
_tab.efld_opt(_ws,'enable='+{? _d=3 || '1' || '0' ?},,'LISTA');
_tab.efld_opt(_ws,'enable='+{? _d=3 || '1' || '0' ?},,'OD');
_tab.efld_opt(_ws,'enable='+{? _d=3 || '1' || '0' ?},,'DO');
{? _d=3
|| _tab.efld_opt(_ws,'enable=0',,'REAL')
?};

params_set('ws',_ws,'PROFILE',_PROFILE,'plik',_a,'tresc',_b);

_tab.win_edit(_ws);
{? _tab.edit(
      "  _wyn:=1;
         {? cur_tab().KOD
         || {? cur_tab().WYBOR=''
            || {? FUN.ask('Żadna z rubryk nie została zaznaczona.'@+'\n'+'Czy na pewno rezygnujesz?'@)
               || cur_tab().del()
               || return('WYBOR')
               ?}
            ?}
         ?};
         {? cur_tab().OKR
         || {? cur_tab().OD>cur_tab().DO & cur_tab().DO<>#0
            || FUN.emsg('Data początku okresu nie może być większa od daty końcowej'@);
               return('OD')
            ?}
         || 1
         ?};
         _wyn
      "
   )
|| 1
|| _tab.del()
?};
_tab


\odd_nfz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [2010]
:: OPIS: Import oddziałów NFZ
::  OLD: \odd_nfz/demo_ka.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('czy_imp','personel','słownika oddziałów NFZ'@)
   |
   ~exec('czy_plik','personel',_fname:='odd_nfz.dfg',1)
   |
   ~exec('slo_typ','ext_slo','KASACH')
|| return()
?};

ADRES.cntx_psh();
ADRES.clear();
ADRES.import(_fname,1,1,';','Windows',1024,
   'SYMBOL',,1,,
   'TYP','SYMBOL',2,,
   'NAZWA',,3,
);
ADRES.cntx_pop()


\normus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [2010]
:: OPIS: Przetworzenie informacji zaimportowanych z pliku zrodlowego
::   WE: _a  - wczytany nowy slownik urzedow celnych
::  OLD: \normus/demo_ka.fml
::----------------------------------------------------------------------------------------------------------------------
_dalej:=0;
US.cntx_psh(); US.prefix(); US.blank();
{? US.find_tab(1,'EDEK_SYM',,'=',_a.EDEK_SYM)
|| _find:=1
|? US.find_tab(1,'MU',,'=',_a.MU,'NU',,'=',_a.NU) & US.EDEK_SYM=''
|| _find:=1
|| _find:=0
?};

{? _find
|| _zmiana:='';
   {? US.NU<>_a.NU || US.NU:=_a.NU; _zmiana+='Nazwa ' ?};
   {? US.MU<>_a.MU || US.MU:=_a.MU; _zmiana+='Miasto ' ?};
   {? US.UK<>_a.UK || US.UK:=_a.UK; _zmiana+='Poczta ' ?};
   {? US.UU<>_a.UU || US.UU:=_a.UU; _zmiana+='Ulica ' ?};
   {? US.EDEK_SYM<>_a.EDEK_SYM || US.EDEK_SYM:=_a.EDEK_SYM; _zmiana+='Symbol urzędu' ?};
   {? _zmiana<>'' & US.put(1)
   || __tmp_us.KOD:=US.EDEK_SYM;
      __tmp_us.NAZWA:=US.NU;
      __tmp_us.ZMIANA:=_zmiana;
      __tmp_us.add()
   ?}
|| US.blank();
   US.NU:=_a.NU;
   US.MU:=_a.MU;
   US.UK:=_a.UK;
   US.UU:=_a.UU;
   US.EDEK_SYM:=_a.EDEK_SYM;
   {? US.add(1)
   || __tmp_us.KOD:=US.EDEK_SYM;
      __tmp_us.NAZWA:=US.NU;
      __tmp_us.ZMIANA:='Nowy urząd celny';
      __tmp_us.add()
   ?}
?};
US.cntx_pop()


\pkd_emer_rent
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: Ustalenie parametrów do wydruku rent i emerytur.
::   WE:
::   WY: _tab - tabela z parametrami wydruku
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1,
   'OD','DATE','Początek okresu',
   'DO','DATE','Koniec okresu',
   'WYBOR','STRING[1]','Wybór parametów',
   'OKR','INTEGER','Pełny okres'
);

_tab.OD:=date(0,0,0);
_tab.DO:=date(0,0,0);
_tab.WYBOR:='0';
_tab.OKR:=0;
_tab.add();

_tab.fld_fml(
   'OKR',
   'AFTER_EDIT',
   " {? cur_tab().OKR
     || cur_tab().OD:=date(,,1) ;
        cur_tab().DO:=date(,,0)
     || cur_tab().OD:=cur_tab().DO:=date(0,0,0)
     ?};
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().OKR,,'OD');
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().OKR,,'DO');
     cur_tab().efld_opt(params_get().ws,'mark='+$cur_tab().OKR,,'OD');
     cur_tab().efld_opt(params_get().ws,'mark='+$cur_tab().OKR,,'DO')
  "
);

_ws:=_tab.mk_edit('Wykaz wprowadzonych rent i emerytur'@,0,'pkd_emer_rent');
_tab.win_esep(_ws,'Parametry wydruku'@);
_tab.win_esep(_ws,'Osoby akytywne w okresie:'@);
_tab.win_efld(
   _ws,,
   'OKR',,,,,,
   'Okres kontroli zatrudnienia'@,,,
   'radio-buttons',,
   'Bez ograniczeń'@,"0",
   'Zakres dat'@,"1"
);
_tab.win_efld(_ws,,'OD',,,11,,,'Początek okresu'@,,'Data początku okresu.'@);
_tab.win_efld(_ws,,'DO',,,11,,,'Koniec okresu'@,,'Data końca okresu.'@);
_tab.win_esep(_ws,'Zakres przetwarzania danych'@);

{? __F_ZATR.O='P'
|| _tab.win_efld(
      _ws,,
      'WYBOR',,,,,,
      'Forma zatrudnienia'@,,,
      'radio-buttons',,
      'Pracownicy'@,"'0'",
      'Pracownicy i zleceniobiorcy'@,"'1'"
   )
|| _tab.win_efld(
      _ws,,
      'WYBOR',,,,,,
      'Forma zatrudnienia'@,,,
      'radio-buttons',,
      'Zleceniobiorcy'@,"'0'",
      'Pracownicy i zleceniobiorcy'@,"'1'"
   )
?};
exec('ok_esc','#window',_tab,_ws);

_tab.efld_opt(_ws,'enable=0',,'OD');
_tab.efld_opt(_ws,'enable=0',,'DO');

params_set('ws',_ws);
_tab.win_edit(_ws);
{? _tab.edit("
      _wyn:=1;
      {? (cur_tab().OD<>date(0,0,0) & cur_tab().DO=date(0,0,0))
      || FUN.emsg(
            'W przypadku podania wartości w polu Początek okresu, należy także podać wartość w polu Koniec okresu'@
         );
         return('DO')
      ?};
      {? (cur_tab().DO<>date(0,0,0) & cur_tab().OD=date(0,0,0))
      || FUN.emsg(
            'W przypadku podania wartości w polu Koniec okresu, należy także podać wartość w polu Początek okresu'@
         );
         return('OD')
      ?};
      {? cur_tab().OD>cur_tab().DO & cur_tab().DO<>#0
      || FUN.emsg('Data początku okresu nie może być większa od daty końcowej'@);
         return('OD')
      ?};
      _wyn
   ")
|| _tab.put
|| _tab.del()
?};
_tab


\uspkod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.02]
:: OPIS: Formuła zwraca przyczynę ustania stosunku pracy, a jeżeli ta nie jest wypełniona to tryb rozwiązania. Formuła
::       nie sprawdza poprawności wywołania - zakłada odpowiednią strukturę tabel.
::   WE: [_a] [TABLE] - Uchwyt tabeli [domyślnie: H_UM].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:={? var_pres('_a')=type_of(H_UM) || _a || H_UM ?};

_ret:='';
{? _TAB.USPKOD
|| S_ZUS.cntx_psh();
   _TAB.USPKOD();
   _ret:=S_ZUS.memo_txt(0,1,'OPIS');
   S_ZUS.cntx_pop()
|| SLO_NAZ.cntx_psh();
   _ret:=_TAB.ROU().NAZWA;
   SLO_NAZ.cntx_pop()
?};
_ret


\s_zus_memo_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.02]
:: OPIS: Wyzwalacz "memo_put - po" dla tabeli S_ZUS.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::       _b [STRING]  - Akronim zapisywanego pola.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? _b='OPIS'
|| _linia:=S_ZUS.memo_txt(0,1,_b);
   {? +_linia>255
   || _linia:=(252+_linia)+'...'
   ?};
   {? S_ZUS.LINIA<>_linia
   || S_ZUS.LINIA:=_linia;
      S_ZUS.put()
   ?}
?};

~~


\oblicz_okr_wyp1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła liczy okres wypowiedzenia danego pracownika w danym dniu (dacie).
::       Utworzona na podstawie \szczegoly_warunk/!pkd_zes_orza.fml
::   WE: _a  [REFERENCE] - ref pracownika (P.ref)
::      [_b] [DATE]      - dzień na który policzyć okres wypowiedzenia, domyślnie data dzisiejsza
::   WY: _RET [OBJ] - tablica nazwana:
::            okres [STRING] - długość okresu wypowiedzenia, np. "1 miesiąc"
::            dzien [STRING] - ostatni dzień okresu wypowiedzenia, np. "w ostatni dzień miesiąca"
::       Jeżeli pracownik nie był jeszcze zatrudniony w tym okresie formuła zwróci ciągi puste.
::----------------------------------------------------------------------------------------------------------------------
::Badana data:
_bData:={? var_press('_b')<0 | type_of(_b)<>type_of(date()) || date() || _b ?};

H.cntx_psh();
H.index('_HISTKOD');

:: Sprawdzenie i ew. utworzenie obiektu __KAL:
exec('__KAL','object');

::Tworzenie zwracanego obiektu:
_ret:=obj_new('okres','dzien','ru');

_okres:=_dzien:=_ret.ru:='';

:: Pomocniczy obiekt __KA:
VAR_DEL.delete('__KA');
__KA:=obj_new('year','month','day');

H.prefix(_a,'Z');
{? H.find_le(_bData)
|| _ru:=_ret.ru:=H.RU().K;
   '_rdat - uwzględnia wyrok Sądu Najwyższego z 19 grudnia 1996 r. (I PKN 47/96, OSNAPiUS1997/17/310)';
   {! _ii:=1..obj_len(__KA) |! __KA[_ii]:=0 !};
   _rdat:=
      "  {? _a~3=(_b+1)~3
         || _rdat:=(((_b+1)~1-_a~1)*12+(_b+1)~2-_a~2);
            __KA.year+=_rdat%12;
            __KA.month+=_rdat%*12
         || __KAL.rdat(_a,_b);
            __KA.year+=__KAL.year;
            __KA.month+=__KAL.month;
            __KA.day+=__KAL.day
         ?}
      ";
      _do:="{? _a=#0 | _a>_b || _b || _a ?}";
      _licz:=
         "  _dt:=date(2016,2,22);
            _where:={? _>3 & _d=_dt || 'and (P.DZ>to_date(\\\'2016-02-22\\\') or P.DZ is null)' || '' ?};
            _tab:=sql(
               'select P.DZA, P.DZ '+
               'from P join F_ZATR using (P.F_ZATR,F_ZATR.REFERENCE) join OSOBA using (P.OSOBA,OSOBA.REFERENCE)'+
               'where P.FIRMA=:_c and F_ZATR.KOD=\\\':_a\\\' and P.OSOBA=:_b '+_where+' '+
               'order by P.DZA',
               'P',P.OSOBA,exec('ref_firma','ustawienia')
            );
' _a - funkcja ustalająca datę do (funkcja _do)';
' _b - funkcja sumująca (funkcja _sum)';
' _c - data graniczna końca okresu';
' _d - data związana ze zmianą K.p. od 2016/02/22, brak parametru - jeżeli nie dotyczy';
            {? _tab.first()
            || {? _tab.DZA<=_c
               || _od:={? _>3 & _d=_dt & _tab.DZA<_dt || _dt || _tab.DZA ?};
                  _do:=_a(_tab.DZ,_c);
                  _loop:=_tab.next();
                  {!
                  |? _loop
                  |! {? _tab.DZA<=_c
                     || {? _tab.DZA<=_do & (_tab.DZ=#0 | _tab.DZ>_do)
                        || _do:=_a(_tab.DZ,_c)
                        |? _tab.DZA>_do
                        || _b(_od,_do);
                           _od:=_tab.DZA;
                           _do:=_a(_tab.DZ,_c)
                        ?};
                        _loop:=_tab.next()
                     || _loop:=0
                     ?}
                  !};
                  _b(_od,_do);
                  __KA.month+=__KA.day%30;
                  __KA.day:=__KA.day%*30;
                  __KA.year+=__KA.month%12;
                  __KA.month:=__KA.month%*12
               ?}
            ?}
         ";

   {? _ru='A' | _ru='D'
   || 'okres probny i zastepstwo';
      {? H.DO-P.DZA+1<=14 | _ru='D'
      || _okres:='3 dni'
      || _rdat(P.DZA,H.DO);
         _okres:={? __KA.month<3 || '1 tydzień' || '2 tygodnie' ?};
         _dzien:='w sobotę'
      ?}
   |? _ru='B'
   ||  'czas okreslony';
      '_dt - data nowelizacji KP wprowadzająca okresy wypowiedzenia jak dla umów na czas nieokreślony';
      _dt:=date(2016,2,22);
      {? H.OD>=_dt & P.DZA>=_dt
         || _licz(_do,_rdat,{? _bData<=H.DO || _bData || H.DO ?});
         {? __KA.year>=3
         || _okres:='3 miesiące';
            _dzien:='w ostatni dzień miesiąca'
         |? __KA.year*12+__KA.month>=6
         || _okres:='1 miesiąc';
            _dzien:='w ostatni dzień miesiąca'
         || _okres:='2 tygodnie';
            _dzien:='w sobotę'
         ?}
      || {? H.DO>=_dt
            || _licz(_do,_rdat,{? _bData<=H.DO || _bData || H.DO ?},{? H.UMOWA().OD<_dt || _dt || P.DZA ?});
            {? __KA.year>=3
            || _okres:='3 miesiące';
               _dzien:='w ostatni dzień miesiąca'
            |? __KA.year*12+__KA.month>=6
            || _okres:='1 miesiąc';
               _dzien:='w ostatni dzień miesiąca'
            || _okres:='2 tygodnie';
               _dzien:='w sobotę'
            ?}
            || _licz(_do,_rdat,H.DO);
            {? __KA.year*12+__KA.month>6 | (__KA.month=6 & __KA.day>0)
            || _okres:='2 tygodnie';
               _dzien:='w sobotę'
            ?}
         ?}
      ?}
   |? _ru='C'
   || 'nie okreslony';
      _licz(_do,_rdat,{? H.DO=#0 | _bData<=H.DO || _bData || H.DO ?});
      {? __KA.year>=3
      || _okres:='3 miesiące';
         _dzien:='w ostatni dzień miesiąca'
      |? __KA.year*12+__KA.month>=6
      || _okres:='1 miesiąc';
         _dzien:='w ostatni dzień miesiąca'
      || _okres:='2 tygodnie';
         _dzien:='w sobotę'
      ?}
   ?}
?};
H.cntx_pop();

:: Kasowanie pomocniczego obiektu:
VAR_DEL.delete('__KA');

_ret.okres:=_okres;
_ret.dzien:=_dzien;

_ret


\oblicz_okr_wyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła liczy okres wypowiedzenia danego pracownika w danym dniu (dacie). Oblicza okres na podstawie
::       stażu pracy obliczonego funkcją \oblicz/staz.fml. Podaję datę "nabycia" obliczonego okresu wypowiedzenia.
::   WE: _a  [REFERENCE] - ref pracownika (P.ref)
::      [_b] [DATE]      - dzień na który policzyć okres wypowiedzenia, domyślnie data dzisiejsza
::   WY: _ret [OBJ] - tablica nazwana:
::            okres [STRING] - długość okresu wypowiedzenia, np. "1 miesiąc"
::            dzien [STRING] - ostatni dzień okresu wypowiedzenia, np. "w ostatni dzień miesiąca"
::            ru    [STRING] - rodzaj umowy na podstawei której obliczono okres
::       Jeżeli pracownik nie był jeszcze zatrudniony w tym okresie formuła zwróci ciągi puste. Jeżeli już nie był
::       funkcja zwróci ostatni okres wypowiedzenia pracownika.
::----------------------------------------------------------------------------------------------------------------------
_prac:=_a;
::Badana data:
_bData:={? var_press('_b')<0 | type_of(_b)<>type_of(date()) || date() || _b ?};
_d0:=date(0,0,0);
::Tworzenie zwracanego obiektu:
_ret:=obj_new('okres','dzien','ru');
_ret.okres:=_ret.dzien:=_ret.ru:='';

:: Obliczenie stażu pracownika:
P.cntx_psh();
{? ~P.seek(_prac,,1)
|| FUN.error('Błąd. Nie znaleziono pracownika.'@);
   P.cntx_pop();
   return(_ret)
|| _staz:=exec('oblicz','staz',1,,1,,_bData)
?};

:: Staż pracy:
_lat:=_staz.lat[5];
_msc:=_staz.msc[5];

:: Wyszukanie obecnej umowy pracownika:
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(_prac,'Z');
RU.cntx_psh();
RU.prefix();
{? ~H.find_le(_bData)
|| RU.cntx_pop();
   H.cntx_pop();
   P.cntx_pop();
   return(_ret)
|| _rUm:=H.RU().K;
   _ret.ru:=RU.O;

:: Przypisanie danych wyjściowych w zależności od typu umowy:
:: Okres próbny (Art. 34 KP), zastępstwo:
   {? _rUm='A' | _rUm='D'
::    Obliczenie daty, w której umowa osiąga 3 miesiące:
   || _dt3m:="_dt3mR:=P.DZA~1+((P.DZA~2+3-1)%12);
              _dt3mM:=(P.DZA~2+3)%*12;
              {? ~_dt3mM || _dt3mM+=12 ?};
              _dt3mD:=P.DZA~3;
              _dt3mOst:=date(_dt3mR,_dt3mM,0);
              {! |? _dt3mOst~3<_dt3mD
              |! _dt3mD-=1
              !};
              date(_dt3mR,_dt3mM,_dt3mD)";
::    Sprawdzenie długośći umowy na okres próbny:
      {? H.DO-P.DZA+1<=14 | _rUm='D'
      || _ret.okres:='3 dni'
      |? H.DO<_dt3m()
      || _ret.okres:='1 tydzień';
         _ret.dzien:='w sobotę'
      || _ret.okres:='2 tygodnie';
         _ret.dzien:='w sobotę'
      ?}
:: Czas określony, nieokreślony (Art. 36 KP):
   |? _rUm='B' | _rUm='C'
   || {? _lat>=3
      || _ret.okres:='3 miesiące';
         _ret.dzien:='w ostatni dzień miesiąca'
      |? _lat*12+_msc>=6
      || _ret.okres:='1 miesiąc';
         _ret.dzien:='w ostatni dzień miesiąca'
      || _ret.okres:='2 tygodnie';
         _ret.dzien:='w sobotę'
      ?}
   ?}
?};
RU.cntx_pop();
H.cntx_pop();
P.cntx_pop();

_ret


\pkd_wn_podat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Ustalenie parametrów do wydruku wniosków podatkowych.
::   WE:
::   WY: _tab - tabela z parametrami wydruku
::----------------------------------------------------------------------------------------------------------------------
:: Tabela z parametrami wydruku
_tab:=tab_tmp(1,
   'TYP','INTEGER','Rodzaje wniosków',
   'ROK','INTEGER','Rok wniosków',
   'SP','INTEGER','Sposób prezentacji danych',
   'AKT','INTEGER','Czy aktywne?'
);
_tab.TYP:=0;
_tab.SP:=_tab.AKT:=1;
_tab.ROK:=date()~1;
_tab.add();

_tab.fld_fml(
   'ROK',
   'AFTER_EDIT',
   "  {? cur_tab().ROK<=1900 | cur_tab().ROK>9999
      || FUN.emsg('Błędna wartość parametru wydruku.'@); 0
      || 1
      ?}
   "
);

_ws:=_tab.mk_edit('Zestawienie wniosków podatkowych'@,0,'pkd_wnpodat');
_tab.win_esep(_ws,'Parametry wydruku'@);
_tab.win_efld(_ws,,
      'TYP',,,,,,
      'Rodzaje wniosków'@,,,
      'radio-buttons',,
      'Wszystkie'@,"0",
      'Wybrane'@,"1"
);
_tab.win_efld(_ws,,'ROK',,,11,,,'Rok wniosków'@);
_tab.win_efld(
      _ws,,
      'SP',,,,,,
      'Sposób prezentacji'@,,,
      'radio-buttons',,
      'W etatach'@,"1",
      'W osobach'@,"2"
);
_tab.win_efld(
      _ws,,
      'AKT',,,,,,
      'Zakres wniosków'@,,,
      'radio-buttons',,
      'Aktywne'@,"1",
      'Nieaktywne'@,"2",
      'Wszystkie'@,"0"
);
exec('ok_esc','#window',_tab,_ws);
_tab.efld_opt(_ws,'mark=1',,'ROK');
_tab.win_edit(_ws);

params_set('ws',_ws);

{? ~_tab.edit(
    "  {? cur_tab().ROK<=1900 | cur_tab().ROK>9999
       || FUN.emsg('Błędna wartość parametru wydruku.'@); 0
       || 1
       ?}
    "
   )
|| _tab.del()
?};

_tab


\pkd_nwu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Ustalenie parametrów do wydruku zestawienia wniosków urlopowych.
::   WE:
::   WY: _tab - tabela z parametrami wydruku
::----------------------------------------------------------------------------------------------------------------------
:: Tabela z parametrami wydruku
_tab:=tab_tmp(1,
   'ZKR','INTEGER','Zakres wniosków',
   'DOD','DATE','Data od',
   'DDO','DATE','Data do',
   'WTW','INTEGER','W trakcie przetwarzania',
   'DWR','INTEGER','Do weryfikacji',
   'PRZ','INTEGER','Przyjęte',
   'WPR','INTEGER','Wprowadzone',
   'ODR','INTEGER','Odrzucone',
   'DWC','INTEGER','Do wycofania',
   'WCF','INTEGER','Wycofane',
   'OPK','INTEGER','Odrzucone przez kadry'
);
_tab.ZKR:=0;
_tab.DOD:=date(,,1);
_tab.DDO:=date(,,0);
_tab.WTW:=_tab.DWR:=1;
_tab.PRZ:=_tab.WPR:=_tab.ODR:=_tab.DWC:=_tab.WCF:=_tab.OPK:=0;
_tab.add();

_tab.fld_fml(
   'DDO',
   'AFTER_EDIT',
   "  {? cur_tab().DOD>cur_tab().DDO
      || FUN.emsg('Data końca okresu musi być większa lub równa dacie początku okresu.'@)
      || 1
      ?}
   "
);

_tab.fld_fml(
   'ZKR',
   'AFTER_EDIT',
   " cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().ZKR,,'WTW');
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().ZKR,,'DWR');
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().ZKR,,'PRZ');
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().ZKR,,'WPR');
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().ZKR,,'ODR');
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().ZKR,,'DWC');
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().ZKR,,'WCF');
     cur_tab().efld_opt(params_get().ws,'enable='+$cur_tab().ZKR,,'OPK')
  "
);

_ws:=_tab.mk_edit('Zestawienie wniosków urlopowych'@,0,'pkd_nwu_stat');
_tab.win_esep(_ws,'Parametry wydruku'@);
_tab.win_efld(_ws,,'DOD',,,11,,,'Data od'@);
_tab.win_efld(_ws,,'DDO',,,11,,,'Data do'@);
_tab.win_efld(_ws,,
      'ZKR',,,,,,
      'Zakres wniosków'@,,,
      'radio-buttons',,
      'Wszystkie'@,"0",
      'Wybrane'@,"1"
);
_tab.win_esep(_ws,'Statusy wniosków'@);
_tab.win_efld(_ws,,'WTW',,,,,,'W trakcie przetwarzania'@,,,'check-box',,"1","0");
_tab.win_efld(_ws,,'DWR',,,,,,'Do weryfikacji'@,,,'check-box',,"1","0");
_tab.win_efld(_ws,,'PRZ',,,,,,'Przyjęte'@,,,'check-box',,"1","0");

_tab.win_efld(_ws,,'WPR',,,,,,'Wprowadzone'@,,,'check-box',,"1","0");
_tab.win_efld(_ws,,'ODR',,,,,,'Odrzucone'@,,,'check-box',,"1","0");
_tab.win_efld(_ws,,'DWC',,,,,,'Do wycofania'@,,,'check-box',,"1","0");

_tab.win_efld(_ws,,'WCF',,,,,,'Wycofane'@,,,'check-box',,"1","0");
_tab.win_efld(_ws,,'OPK',,,,,,'Odrzucone przez kadry'@,,,'check-box',,"1","0");

exec('ok_esc','#window',_tab,_ws);
_tab.efld_opt(_ws,'mark=1',,'DOD');
_tab.efld_opt(_ws,'mark=1',,'DDO');
_tab.efld_opt(_ws,'enable=0',,'WTW');
_tab.efld_opt(_ws,'enable=0',,'DWR');
_tab.efld_opt(_ws,'enable=0',,'PRZ');
_tab.efld_opt(_ws,'enable=0',,'WPR');
_tab.efld_opt(_ws,'enable=0',,'ODR');
_tab.efld_opt(_ws,'enable=0',,'DWC');
_tab.efld_opt(_ws,'enable=0',,'WCF');
_tab.efld_opt(_ws,'enable=0',,'OPK');
_tab.win_edit(_ws);

params_set('ws',_ws);

{? ~_tab.edit(
    "  {? cur_tab().DOD=date(0,0,0)
       || FUN.emsg('Data początku okresu musi być wypełniona.'@); 0
       |? cur_tab().DDO=date(0,0,0)
       || FUN.emsg('Data końca okresu musi być wypełniona.'@); 0
       |? cur_tab().DOD>cur_tab().DDO
       || FUN.emsg('Data końca okresu musi być większa lub równa dacie początku okresu.'@); 0
       || 1
       ?}
    "
   )
|| _tab.del()
?};

_tab

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:36 a28e097b44cfe860c6454894d05b8ff4a5f7e07863cf7269453b8436a4eb8c559afb4ec11e384c0caa3e95f45f373e6b327b01c781afc14746762082cd233e40c4ead15fc8578ef7fe6ef32c29f44c97211a015b2b255bff83d77c23f3c93344161d00d5575612f2a1c59d794ecabc6928e9f7ed1e93c09639d50076df787d0f
