:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: czytniki.fml
:: Utworzony: 29.05.2017
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Definicje funkcji odpowiedzialnych za współpracę z plikami RCP.
::======================================================================================================================


\set_dzk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Funkcja odpowiedzialna za ustalenie daty kwalifikacji.
::   WE: _a -
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of(0) || _a | 0 ?};
_par:=obj_new('KalWej','KalWejd','KalWyj','KalWyjd','KalTyp','Godz','Dzien','roznica','Data');
_Set_wew:=
   "  _a.KalWej:=KAL_DEF.POCZATEK;
      _a.KalWejd:=KAL_DEF.DATA;
      _a.KalWyj:=KAL_DEF.KONIEC;
      _a.KalWyjd:={? KAL_DEF.DATAW=#0 || _a.KalWejd || KAL_DEF.DATAW ?};
      _a.KalTyp:=KAL_DEF.TYP;
      _a.Godz:=R_REJ_WW.GD;
      _a.Dzien:=R_REJ_WW.DZ;
      _a.Data:=#0
   ";
_Set_cal:=
   "  _KalOk:=0;
      KAL_ROK.prefix(_a);
      {? KAL_ROK.find_key(_b~1)
      || KAL_DEF.index('KAL_DEF');
         KAL_DEF.prefix(KAL_ROK.ref());
         _KalOk:=KAL_DEF.find_key(_b)
      ?};
      _KalOk
   ";

KAL_ROK.cntx_psh();
KAL_ROK.index('KAL_ROK');
R_REJ_WW.DZK:=date(0,0,0);
{? R_REJ_WW.TP='WEJŚCIE'
|| _KalOk:=0;
   R_REJ_WW.DZK:=_Data:=R_REJ_WW.DZ;
   _Kalend:=
      {? R_WZCZ.find_le(_Data)
      || {? R_WZCZ.GRAFIK='T' || R_WZCZ.CZESC || R_WZCZ.KAL ?}
      || P.KAL
      ?};
   {? _Kalend
   || _KalOk:=_Set_cal(_Kalend,_Data)
   ?};
   {? _KalOk
   || _Set_wew(_par);
      {? exec('spr_dzk','czytniki',_par)
      || R_REJ_WW.DZK:=_Data
      || R_REJ_WW.DZK:=_par.Data
      ?}
   ?}
|| R_REJ_WW.cntx_psh();
   _KalOk:=0;
   _data_wej:=_a1:=date(0,0,0);
   _czas_we:=time(0,0,0);
   _czyt_we:=_mask:='';
   _dk:=R_REJ_WW.DZ;
   _nr_ref:=0;
   _data_pom:=R_REJ_WW.DZ;
   _time_pom:=R_REJ_WW.GD;
   _pom_mask:=R_REJ_WW.name();
   _pom_ref:=R_REJ_WW.ref();
   _max_day:=time(24,0,0);

   R_REJ_WW.prefix(R_REJ_WW.P);
   {? R_REJ_WW.find_key(R_REJ_WW.DZ,R_REJ_WW.GD,R_REJ_WW.ST)
   || {? R_REJ_WW.prev()
      || {! |? {? R_REJ_WW.ZM='S' || R_REJ_WW.prev() ?} !};
         {? R_REJ_WW.TP='WEJŚCIE' & _max_day>=exec('UstGodz','prc_wewy',R_REJ_WW.DZ,_data_pom,_time_pom)-R_REJ_WW.GD
         || _a1:=R_REJ_WW.DZK;
            _data_wej:=R_REJ_WW.DZ;
            _czas_we:=R_REJ_WW.GD;
            _czyt_we:=R_REJ_WW.CZ;
            _mask:=R_REJ_WW.name();
            _nr_ref:=R_REJ_WW.ref()
         ?}
      ?}
|| R_REJ_WW.cntx_psh();
      R_REJ_WW.use('r_hw'+(($(R_REJ_WW.DZ~1))+2)+(('0'+$(R_REJ_WW.DZ~2))+2));
      R_REJ_WW.index('R_REJ_WW');
      R_REJ_WW.prefix(R_REJ_WW.P);
      _find_ok:=0;
      {? R_REJ_WW.find_key(R_REJ_WW.DZ,R_REJ_WW.GD,R_REJ_WW.ST)
      || _find_ok:=1;
         {? R_REJ_WW.prev()
         || {? R_REJ_WW.TP='WEJŚCIE' & _max_day>=exec('UstGodz','prc_wewy',R_REJ_WW.DZ,_data_pom,_time_pom)-R_REJ_WW.GD
            || _a1:=R_REJ_WW.DZK;
               _data_wej:=R_REJ_WW.DZ;
               _czas_we:=R_REJ_WW.GD;
               _czyt_we:=R_REJ_WW.CZ;
               _mask:=R_REJ_WW.name();
               _nr_ref:=R_REJ_WW.ref()
            ?}
         ?}
      ?};
      R_REJ_WW.cntx_pop();
      {? ~_find_ok
      ||
         _ok:=0;
         {? R_REJ_WW.last()
         || {!
            |? {? R_REJ_WW.ZM='D' || R_REJ_WW.prev() || _ok:=1; 0 ?}
            !}
         ?};
         {? _ok
         || _prev:=0;
            {!
            |? {? R_REJ_WW.ZM='S' | R_REJ_WW.DZ>_data_pom
               || _prev:=R_REJ_WW.prev()
               || _prev:=0
               ?};
               {? (R_REJ_WW.ZM='S' | R_REJ_WW.DZ>_data_pom) & _prev=0
               || _temp:=date(R_REJ_WW.DZ~1,R_REJ_WW.DZ~2,1)-1;
                  R_REJ_WW.use(MASK.Name('R_REJ_WW',_temp~1,_temp~2));
                  R_REJ_WW.last()
               || _prev
               ?}
            !};
            {? R_REJ_WW.TP='WEJŚCIE' & _max_day>=exec('UstGodz','prc_wewy',R_REJ_WW.DZ,_data_pom,_time_pom)-R_REJ_WW.GD
            ||_a1:=R_REJ_WW.DZK;
              _data_wej:=R_REJ_WW.DZ;
              _czas_we:=R_REJ_WW.GD;
              _czyt_we:=R_REJ_WW.CZ;
              _mask:=R_REJ_WW.name();
              _nr_ref:=R_REJ_WW.ref()
            ||
:: błąd brak rejestracji wejścia
               {? ~_a || exec('err_wewy','czytniki',_data_pom,_time_pom) ?};
               _a1:=_dk
            ?}
         ?}
      ?}
   ?};
   {? _a1=#0
   || _d_pom:=date(R_REJ_WW.DZ~1,R_REJ_WW.DZ~2-1,1);
      MASK.Use('R_REJ_WW',_d_pom~1,_d_pom~2);
      R_REJ_WW.index('R_REJ_WW');
      R_REJ_WW.prefix(R_REJ_WW.P);
      _ok:=0;
      {? R_REJ_WW.last()
      || {!
         |? {? R_REJ_WW.ZM='D' || R_REJ_WW.prev() || _ok:=1; 0 ?}
         !}
      ?};
      {? _ok
      || {! |? {? R_REJ_WW.ZM='S' || R_REJ_WW.prev() ?} !};
         {? R_REJ_WW.TP='WEJŚCIE' & _max_day>=exec('UstGodz','prc_wewy',R_REJ_WW.DZ,_data_pom,_time_pom)-R_REJ_WW.GD
         || _a1:=R_REJ_WW.DZK;
            _data_wej:=R_REJ_WW.DZ;
            _czas_we:=R_REJ_WW.GD;
            _czyt_we:=R_REJ_WW.CZ;
            _mask:=R_REJ_WW.name();
            _nr_ref:=R_REJ_WW.ref()
         ||
:: błąd brak rejestracji wejścia
            {? ~_a || exec('err_wewy','czytniki',_data_pom,_time_pom) ?};
            _a1:=_dk
         ?}
      ?}
   ?};
   R_REJ_WW.cntx_pop();
   {? _a1=#0
   || {? ~_a || exec('err_wewy','czytniki',_data_pom,_time_pom,,1) ?};
      R_REJ_WW.DZK:=R_REJ_WW.DZ
   || R_REJ_WW.DZK:=_a1
   ?};

   _maxtime:=time(0,0,0);
   _Kalend:=
      {? R_WZCZ.find_le(R_REJ_WW.DZ)
      || {? R_WZCZ.GRAFIK='T' || R_WZCZ.CZESC || R_WZCZ.KAL ?}
      || P.KAL
      ?};
   {? _Kalend || _KalOk:=_Set_cal(_Kalend,R_REJ_WW.DZ) ?};
   {? _KalOk
   || _wzorzec:=KAL_ROK.WZORZEC;
      KAL_ROK.cntx_psh();
      KAL_ROK.index(KAL_ROK.ndx_tmp(,1,'NAZWA','FIRMA',,'ROK',,,'WZORZEC',,));
      KAL_ROK.prefix(exec('ref_firma','ustawienia'),R_REJ_WW.DZ~1);
      _maxtime:={? KAL_ROK.find_key(_wzorzec) || KAL_ROK.MAXTIME || time(0,0,0) ?};
      KAL_ROK.ndx_drop();
      KAL_ROK.cntx_pop()
   ?};

   {? _data_wej<>#0 & _data_wej<R_REJ_WW.DZ
   || _Data:=R_REJ_WW.DZ;
      _Kalend:=
         {? R_WZCZ.find_le(_Data)
         || {? R_WZCZ.GRAFIK='T' || R_WZCZ.CZESC || R_WZCZ.KAL ?}
         || P.KAL
         ?};
      {? _Kalend || _KalOk:=_Set_cal(_Kalend,_Data) ?};
      {? _KalOk
      || {? _maxtime<>*0 & _maxtime<exec('UstGodz','prc_wewy',_data_wej,R_REJ_WW.DZ,R_REJ_WW.GD)-_czas_we
         || exec('rozpisz','czytniki',_data_wej,R_REJ_WW.DZ,R_REJ_WW.DZK,R_REJ_WW.P,_czyt_we,R_REJ_WW.CZ);
            {? ~_a || exec('zap_err','czytniki',_mask,_nr_ref) ?}
         || exec('rozpisz','czytniki',_data_wej,R_REJ_WW.DZ,R_REJ_WW.DZK,R_REJ_WW.P,_czyt_we,R_REJ_WW.CZ)
         ?}
      ?}
   || {? ~_a & _maxtime<>*0 & _maxtime<exec('UstGodz','prc_wewy',_data_wej,R_REJ_WW.DZ,R_REJ_WW.GD)-_czas_we
      || {? _mask=''
         || exec('zap_err','czytniki',_pom_mask,_pom_ref)
         || exec('zap_err','czytniki',_mask,_nr_ref)
         ?}
      ?}
   ?}
?};
KAL_ROK.cntx_pop();
obj_del(_par);
~~


\spr_dzk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Sprawdzenie daty kwalifikacji.
::   WE: _a - Tablica do przechowywania zmiennych.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a.Dzien=_a.KalWejd & _a.KalTyp<>'R'
|| _a.roznica:=time(0,0,0);
   return(1)
|? _a.KalWejd=_a.KalWyjd & _a.Dzien=_a.KalWejd
|| _a.Data:=_a.KalWejd
|? _a.KalWejd<>_a.KalWyjd & _a.Dzien=_a.KalWejd & _a.Godz>=_a.KalWej
|| _a.Data:=_a.KalWejd
|? _a.KalWejd<>_a.KalWyjd & _a.Dzien=_a.KalWyjd & _a.Godz<=_a.KalWyj
|| _a.Data:=_a.KalWejd
|| _a.Data:=_a.Dzien
?};
0


\add_err
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Zapis błędnego odczytu.
::   WE: _a - Rok.
::       _b - Miesiąc.
::       _c - Funkcja do wypełnienia buforam z błędami importu.
::   WY: 1 - błąd został zapisany do tabeli, 0 - zapis do tabeli się nie udał
::----------------------------------------------------------------------------------------------------------------------
_Mask:=MASK.Name('R_ERRKAR',_a,_b);
{? R_ERRKAR.name()<>(_Mask) || R_ERRKAR.use(_Mask) ?};
_c(R_ERRKAR,R_BUFFER);
R_ERRKAR.add(1)


\err_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Zapis błędnego odczytu.
::   WE: _a - data zdarzenia
::       _b - czas zdarzenia
::       _c - opis zdarzenia
::       [_d] [INTEGER] - pobranie nr karty z tabeli R_KARHIS [0-nie (domyślnie)/1-tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_c:={? var_pres('_c')=type_of('') || _c || '' ?};
_d:={? var_pres('_d')=type_of(0) || _d || 0 ?};
TAB_ERR.blank();
TAB_ERR.NA:=R_REJ_WW.P().OSOBA().NAZWISKO;
TAB_ERR.IM:=OSOBA.PIERWSZE;
{? _d
|| R_KARHIS.cntx_psh();
   R_KARHIS.index('PR_DATA');
   R_KARHIS.prefix(R_REJ_WW.P);
   TAB_ERR.K:={? R_KARHIS.find_le(_a) || R_KARHIS.K().N || '' ?};
   R_KARHIS.cntx_pop()
|| TAB_ERR.K:=R_BUFFER.KP
?};
TAB_ERR.D:=_a;
TAB_ERR.T:=_b;
{? _c=''
|| TAB_ERR.O:='Brak rejestracji wejścia poprzedzającej rejestrację wyjścia.'
|| TAB_ERR.O:=_c
?};
TAB_ERR.add()


\zap_err
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Funkcja odpowiedzialna za zapis do tabeli błędów rejestracji.
::   WE: _a - maska tabeli
::       _b - ref wiersza tabeli
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R_REJ_WW.cntx_psh();
R_REJ_WW.use(_a);
R_REJ_WW.clear();
{? R_REJ_WW.seek(_b)
|| MASK.Use('R_ERRMAX',R_REJ_WW.DZ~1,R_REJ_WW.DZ~2);
   R_ERRMAX.cntx_psh();
   R_ERRMAX.index('R_ER_DZ');
   R_ERRMAX.prefix(R_REJ_WW.P,R_REJ_WW.DZ,R_REJ_WW.GD,R_REJ_WW.ST);
   {? ~R_ERRMAX.first()
   || R_ERRMAX.blank();
      R_ERRMAX.P:=R_REJ_WW.P;
      R_ERRMAX.CZ:=R_REJ_WW.CZ;
      R_ERRMAX.DZ:=R_REJ_WW.DZ;
      R_ERRMAX.GD:=R_REJ_WW.GD;
      R_ERRMAX.ST:=R_REJ_WW.ST;
      R_ERRMAX.TP:=R_REJ_WW.TP;
      R_ERRMAX.RD:=R_REJ_WW.RD;
      R_ERRMAX.ZM:=R_REJ_WW.ZM;
      R_ERRMAX.DZK:=R_REJ_WW.DZK;
      R_ERRMAX.add()
   ?};
   R_REJ_WW.cntx_pop();
   R_ERRMAX.prefix(R_REJ_WW.P,R_REJ_WW.DZ,R_REJ_WW.GD,R_REJ_WW.ST);
   {? ~R_ERRMAX.first()
   || R_ERRMAX.blank();
      R_ERRMAX.P:=R_REJ_WW.P;
      R_ERRMAX.CZ:=R_REJ_WW.CZ;
      R_ERRMAX.DZ:=R_REJ_WW.DZ;
      R_ERRMAX.GD:=R_REJ_WW.GD;
      R_ERRMAX.ST:=R_REJ_WW.ST;
      R_ERRMAX.TP:=R_REJ_WW.TP;
      R_ERRMAX.RD:=R_REJ_WW.RD;
      R_ERRMAX.ZM:=R_REJ_WW.ZM;
      R_ERRMAX.DZK:=R_REJ_WW.DZK;
      R_ERRMAX.add()
   ?};
   R_ERRMAX.cntx_pop()
|| R_REJ_WW.cntx_pop()
?}


\rozpisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
::  MOD: MicKoc [22.26]
:: OPIS: Funkcja odpowiedzialna za rozpisanie rejsetracji występującej na przełomie dni.
::   WE: _a - data wejścia
::       _b - data rejestracji zdarzenia
::       _c - data kwalifikacji
::       _d - ref pracownika
::       _e - czytnik rejestrujący wejście
::       _f - czytnik rejestrujący zdarzenie
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_przerwy:=exec('isEnabled','prc_przerwy');
R_REJ_WW.cntx_psh();
R_REJ_WW.clear();
{! _Count:=(#_a)..(#_b)
|! _Data:=#_Count;
   {? _Data<>_b
   || R_REJ_WW.blank();
      R_REJ_WW.P:=_d;
      R_REJ_WW.GD:=time(24,0,0);
      R_REJ_WW.DZ:=_Data;
      R_REJ_WW.DZK:=_c;
      R_REJ_WW.TP:='WYJŚCIE';
      R_REJ_WW.RD:='normalne';
      R_REJ_WW.CZ:=_f;
      R_REJ_WW.ST:=exec('find_st_wewy','prc_wewy',R_REJ_WW.TP,R_REJ_WW.RD);
      R_REJ_WW.ZM:='S';
:: dodanie rekordu
     _Mask:=MASK.Name('R_REJ_WW',R_REJ_WW.DZ~1,R_REJ_WW.DZ~2);
      {? R_REJ_WW.name()<>(_Mask)
      || R_REJ_WW.use(_Mask);
         R_REJ_WW.index('R_REJ_WW');
         R_REJ_WW.clear()
      ?};
      R_REJ_WW.cntx_psh();
     {? {? _przerwy
        || R_REJ_WW.find_key(R_REJ_WW.P,R_REJ_WW.DZ,R_REJ_WW.GD,R_REJ_WW.ST,R_REJ_WW.CZ)
        || R_REJ_WW.find_key(R_REJ_WW.P,R_REJ_WW.DZ,R_REJ_WW.GD,R_REJ_WW.ST)
        ?}
      || R_REJ_WW.del()
      ?};
      R_REJ_WW.cntx_pop();
      R_REJ_WW.add()
   ?};
   {? _Data<>_a
   || R_REJ_WW.blank();
      R_REJ_WW.P:=_d;
      R_REJ_WW.GD:=time(0,0,0);
      R_REJ_WW.DZ:=_Data;
      R_REJ_WW.DZK:=_c;
      R_REJ_WW.TP:='WEJŚCIE';
      R_REJ_WW.RD:='normalne';
      R_REJ_WW.CZ:=_e;
      R_REJ_WW.ST:=exec('find_st_wewy','prc_wewy',R_REJ_WW.TP,R_REJ_WW.RD);
      R_REJ_WW.ZM:='S';
      _Mask:=MASK.Name('R_REJ_WW',R_REJ_WW.DZ~1,R_REJ_WW.DZ~2);
      {? R_REJ_WW.name()<>(_Mask)
      || R_REJ_WW.use(_Mask);
         R_REJ_WW.index('R_REJ_WW');
         R_REJ_WW.clear()
      ?};
      R_REJ_WW.cntx_psh();
     {? {? _przerwy
        || R_REJ_WW.find_key(R_REJ_WW.P,R_REJ_WW.DZ,R_REJ_WW.GD,R_REJ_WW.ST,R_REJ_WW.CZ)
        || R_REJ_WW.find_key(R_REJ_WW.P,R_REJ_WW.DZ,R_REJ_WW.GD,R_REJ_WW.ST)
        ?}
      || R_REJ_WW.del()
      ?};
      R_REJ_WW.cntx_pop();
      R_REJ_WW.add()
   ?}
!};
R_REJ_WW.cntx_pop();
1

:Sign Version 2.0 jowisz:1045 2024/01/09 16:08:18 200855d06260df5e150da997ff907ef33cec88e74b8732fb9fe53fd5e277e7afedfd1ca1b2217c513ebdf45f9b098548ea638b6bc22b41a78216c7564180c0144205a85cc83a2ce5adbcf464e8910d85d4f02b7f6959f3f941ee60f1570d240ea5814358d9cfb719cef7d56912bb78367ee539a3d6f342cf34c256f28c826d52
