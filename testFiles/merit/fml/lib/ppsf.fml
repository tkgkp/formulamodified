:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppsf.fml
:: Utworzony: 28.06.2021
:: Autor: DG
::======================================================================================================================
:: Zawartość: Formuły do obsługi pracy poza siedzibą firmy.
::======================================================================================================================

\x_ppsfr_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wartość początkowa pola typu _PPSFR.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPSFR.ref()


\ppsfrozd_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Praca poza siedzibą firmy - definicje rozkładów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPSFROZD.cntx_psh();
PPSFROZD.f_clear();
PPSFROZD.index('RKOD');
PPSFROZD.prefix(PPSFR.ref());
PPSFROZD.win_sel('WER');
PPSFROZD.win_edit('RED');
PPSFROZD.select();
PPSFROZD.cntx_pop();
~~


\ppsf_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Formuła zwraca opis statusu wniosku o pracę poza siedzibą firmy.
::   WE: [_a] [STRING] - Kod wniosku o pracę poza siedzibą firmy (domyślnie: ???).
::   WY: Opis statusu.
::----------------------------------------------------------------------------------------------------------------------
:: Statusy wniosków:
::    'R' - Wniosek wprowadzony ręcznie.
::    'W' - Wniosek zatwierdzony z wniosku.
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_a')=type_of('') || _a || '???' ?};
{? _kod='R'
|| 'Wprowadzony ręcznie'@
|? _kod='W'
|| 'Zatwierdzony z wniosku'@
|? _kod=''
|| 'Wszystkie'@
|| _kod
?}


\ppsfn_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Rekord - po" dla tabeli PPSFN.
::   WE: [_a] [STRING] - Tryb pracy:
::                         'P' - Obsługa akcji dla bieżącego wiersza [domyślnie].
::                         'G' - Obsługa akcji grupowej Popraw.
::       [_b] [DATE] - Data od (przed modyfikacjami)
::       [_c] [DATE] - Data do (przed modyfikacjami)
::       [_d] [STRING] - Czy praca na część dnia (przed modyfikacjami)
::       [_e] [REAL] - Liczba godzin (przed modyfikacjami)
::       [_f] [REFERENCE] - Konto kosztów (przed modyfikacjami)
::       [_g] [REFERENCE] - Rodzaj pracy poza siedzibą (przed modyfikacjami)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mode:={? var_pres('_a')=type_of('') & (_a='P' | _a='G') || _a || 'P' ?};
_prevFrom:={? var_pres('_b')=type_of(date())             || _b || date(0,0,0) ?};
_prevTo:={? var_pres('_c')=type_of(date())               || _c || date(0,0,0) ?};
_prevPart:={? var_pres('_d')=type_of('') & _d<>''        || _d || '' ?};
_prevH:={? var_pres('_e')=type_of(time())                || _e || time(0,0,0) ?};
_prevKK:={? var_pres('_f')=type_of(null)                 || _f || null ?};
_prevRP:={? var_pres('_g')=type_of(null)                 || _g || null ?};

_put:=-menu_txt()='popraw';
_ref:={? _put || PPSFN.ref() || null() ?};
_ret:='';

:: Wspólna kontrola dla pojedynczych i grupowych rekordów (dołącz, popraw)
{? PPSFN.PPSFT=null()
|| __CHK.err_empty('Rodzaj pracy'@);
   return('PPSFT')
?};
{? (_chk:=__CHK.record(PPSFN,,'OD','DO'))<>''
|| return(_chk)
?};
{? PPSFN.OD>PPSFN.DO
|| return(__CHK.err_fld(PPSFN,'DO',1,'Data "Do dnia" nie może być wcześniejsza niż data "Od dnia".'@))
?};
{? PPSFN.OD~1<>PPSFN.DO~1
|| return(__CHK.err_fld(PPSFN,'DO',1,'Data "Do dnia" nie może być w innym roku niż data "Od dnia".'@))
?};
{? PPSFN.DK<0
|| return(__CHK.err_fld(PPSFN,'DK',1,'Wartość nie może być ujemna.'@))
?};
{? PPSFN.PARTDAY='T' & (PPSFN.G<=time(0,1,0) | PPSFN.G>time(24,0,0))
|| return(__CHK.err_fld(PPSFN,'G',1,'Dozwolone wartości z przedziału %1-%2.'@ [form(time(0,1,0)),form(time(24,0,0))]))
?};
{? exec('is_pzd02','ppsf')
|| {? PPSFN.OSW_AKC<>'T'
   || PPSFT.cntx_psh();
      PPSFT.prefix();
      PPSF_NO.cntx_psh();
      PPSF_NO.prefix();
      _wym:=(PPSFN.PPSFT().OSW_WYM='T');
      _typ:=PPSFT.OPIS;
      _ppsfNo:=PPSFT.PPSF_NO;
      _ppsfNoKod:=PPSFT.PPSF_NO().KOD;
      _ppsfNoOpis:=PPSF_NO.OPIS;
      PPSF_NO.cntx_pop();
      PPSFT.cntx_pop();
      {? _wym & ~do_state() & ~exec('ppsf_po_exists','ppsf',_ppsfNo,PPSFN.P,PPSFN.OD,PPSFN.DO,'T') &
         ~FUN.ask('%1 "%2" %3\n%4: %5 - %6\n%7'['Dla typu'@,_typ,'wymagana jest akceptacja przez pracownika'@,
                  'oświadczenia'@,_ppsfNoKod,_ppsfNoOpis,'Czy kontynuować?'@])
      || return('OSW_AKC')
      ?}
   ?}
|| {? PPSFN.OSW_AKC<>'T'
   || PPSFT.cntx_psh();
      PPSFT.prefix();
      _wym:=(PPSFN.PPSFT().OSW_WYM='T');
      _typ:=PPSFT.OPIS;
      PPSFT.cntx_pop();
      {? _wym
      || return(__CHK.err_fld(PPSFN,'OSW_AKC',1,
            'Dla typu "%1" wymagana jest akceptacja oświadczenia przez pracownika.'@[_typ]))
      ?}
   ?}
?};

:: Kontrola dla pojedynczych rekordów (dołącz, popraw)
{? _mode='P'
|| {? (_ret:=exec('ppsfn_date_control','ppsf',_ref))<>''
   || return(_ret)
   ?};

:: Kontrola poszczególnych pól - blokada modyfikacji jeśli co najmniej miesiąc rozliczony
   _err:=obj_new('result','text','field');
   _err.result:=0;
   _err.text:=exec('ppsfn_closure_control','ppsf',PPSFN.P,PPSFN.OD,PPSFN.DO,1);

::  zawsze dajemy komunikat na Popraw
   {? _err.text<>''
   || _err.result:=1;
      _err.field:='OD'
   ?};

   {? _err.result
   || {? ~FUN.ask(_err.text+'\n'+'Czy kontynuować?'@)
      || return(_err.field)
      ?}
   ?};
   obj_del(_err);

:: Sprawdzenie limitów:
   {? _ret=''
   || _lim:=exec('limit_spr','ppsf',,,,,,{? _put || PPSFN.ref() || null() ?},1);
      {? _lim.ok=0
      || _ret:='DO';
         {? ~do_state() & FUN.ask('%1\nCzy kontynuować wprowadzanie?'@[exec('limit_kom','ppsf',_lim)])
         || _ret:=''
         ?}
      ?};
      obj_del(_lim)
   ?};
:: Sprawdzenie czy występują nieobecności:
   {? _ret='' & ~do_state() &
      exec('suma_dni_N','nieobecnosc',1,PPSFN.OD,PPSFN.DO,,,'K',,1) &
      ~FUN.ask('%1\n%2'['W trakcie zapisu występują nieobecności.'@,'Czy kontynuować?'@])
   || _ret:='DO'
   ?};
:: Sprawdzanie nakładania się z innymi wnioskami
   {? _ret='' & ~do_state()
   || _firma:=exec('ref_firma','#firma');
      _ppsfr:=exec('FindInSet','#table','PPSFR','KOD','ZDALN_ST',_firma,,1,,null());
      _wn_st:=exec('ppsf_wnio_exists','ppsf',PPSFN.P,PPSFN.OD,PPSFN.DO,,1,_ppsfr);
      {? _wn_st.REF<>null()
      || _txt:={? _wn_st.WYBDNI
               || 'W podanym zakresie dat istnieje wniosek o pracę zdalną stałą '
                  'z kolidującymi dniami pracy wynikającymi z rozkładu pracy zdalnej stałej.'@
               || 'W podanym zakresie dat istnieje wniosek o pracę zdalną stałą.'@
               ?};
         {? ~FUN.ask('%1\n%2'[_txt,'Czy kontynuować?'@])
         || _ret:='DO'
         ?}
      || _ppsfr:=exec('FindInSet','#table','PPSFR','KOD','ZDALN_OK',_firma,,1,,null());
         _wn_ok:=exec('ppsf_wnio_exists','ppsf',PPSFN.P,PPSFN.OD,PPSFN.DO,,1,_ppsfr);
         {? _wn_ok.REF<>null() & _wn_ok.REF<>PPSFN.ref()
         || _txt:='W podanym zakresie dat istnieje wniosek o pracę zdalną okazjonalną.'@;
            {? ~FUN.ask('%1\n%2'[_txt,'Czy kontynuować?'@])
            || _ret:='DO'
            ?}
         ?}
      ?}
   ?}
?};

_ret


\ppsfn_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli PPSFN. Wykorzystywana zarówno przez
::       jTerma jak i webTerma.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr istotny dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(PPSFN)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld='' | _fld='PPSFT'
|| _sval:=$(PPSFN.PPSFT().PARTDAY='N');
   _set(_TAB,_we,_grp_ident,'editable=%1' [_sval],_TAB,'PARTDAY');
   {? exec('is_pzd01','ppsf')
   || _sval:=$(PPSFN.PPSFT & PPSFN.PPSFT().OSW_WYM='T');
      _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'OSW_AKC')
   || _sval1:=$(PPSFN.PPSFT().OSW_WYM='T');
      _sval2:=$(PPSFT.OSW_TRE=1);
      _set(_TAB,_we,_grp_ident,'mark=%1,enable=%2' [_sval1,_sval2],_TAB,'OSW_AKC')
   ?};

   {? _fld<>''
   || exec('ppsfn_efld_opt','ppsf',1,PPSFN,'RED',,'PARTDAY')
   ?}
?};
{? _fld='' | _fld='PARTDAY'
|| _sval:=$(PPSFN.PARTDAY='T');
   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1' [_sval],_TAB,'G')
:: Pola wyłączone z użycia:
::   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1' [_sval],_TAB,'DAYTIME');
::   _sval:=$(PPSFN.PARTDAY='T' & PPSFN.DAYTIME='O');
::   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1' [_sval],_TAB,'GOD')
?};
::{? _fld='' | _fld='DAYTIME'
::|| _sval:=$(PPSFN.DAYTIME='O');
::   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1' [_sval],_TAB,'GOD')
::?};
{? _fld=''
|| _set(_TAB,_we,_grp_ident,'editable=0',_TAB,'DK');
   {? PPSFN.P<>null
   || _set(_TAB,_we,_grp_ident,'enable=1,editable=0',_TAB,'DR')
   || _set(_TAB,_we,_grp_ident,'enable=0,editable=1',_TAB,'DR')
   ?};
   _set(_TAB,_we,_grp_ident,'editable=grayed',PPSFN,'KOMENTZ')
?};

1


\ppsfn_date_control
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Formuła sprawdza, czy dla podanego przedziału istnieją już jakieś rekordy w tabeli PPSFN
::   WE: [_a] [REFERENCE] - Odwołanie do PPSFN (domyślnie NULL)
::       [_b] [INTEGER]   - Zwracana wartość:
::                            0 - Komunikat [domyślnie].
::                            2 - Bez komunikatów (wynikiem będzie tekst komunikatu).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null())             || _a || null() ?};
_mode:={? var_pres('_b')=type_of(0) & (_b=0 | _b=2) || _b || 0 ?};
_ret:='';
{? PPSFN.PARTDAY='N'
|| _ret:=exec('check','overlap',_ref,PPSFN,'OD','DO',_mode,,,'PARTDATE',exec('firma','ustawienia'),
              PPSFN.P,PPSFN.PARTDAY)
:: Pola wyłączone z użycia:
::|| {? PPSFN.DAYTIME='O'
::   || _from:=PPSFN.GOD;
::      _to:=PPSFN.GOD+PPSFN.G;
::      _check:=$("time("+$(_from~1)+","+$(_from~2)+","+$(_from~3)+")<(PPSFN.GOD+PPSFN.G) &
::                 PPSFN.GOD<time("+$(_to~1)+","+$(_to~2)+","+$(_to~3)+")");
::      _ret:=exec('check','overlap',_ref,PPSFN,'OD','DO',_mode,_check,,'DATA',exec('firma','ustawienia'),PPSFN.P)
::   ?}
?};
{? (type_of(_ret)=type_of(0) & ~_ret) | (type_of(_ret)=type_of('') & _ret<>'')
|| return(_ret)
?};

''


\ppsfn_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Rekord - przed" tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Pola zmiennych: Osoba weryfikująca wniosek, Status wniosku
exec('ppsfn_pola_pom','ppsf');

:: Wyszarzanie oraz wyliczanie limitów dla nagłówka
_wer:=cur_win(1,1);
{? _wer='SLO'
|| _gray:={? cur_tab(0,1).AZ='W' || 'DP:D' || '' ?};
   PPSFN.actions_grayed(_wer,_gray)
|? _wer='WER'
|| {? ~PPSFN.size()
   || POLA_GRP.TXT_2:=POLA_GRP.TXT_3:=POLA_GRP.TXT_4:=POLA_GRP.TXT_5:=POLA_GRP.TXT_6:=''
   || PPSFT.cntx_psh();
      _rodzaj:={? exec('is_pzd01','ppsf') || PPSFN.PPSFT().PPSFR || PPSFN.PPSFT().SLO_KOD ?};
      PPSFT.cntx_pop();
      _limPodstawa:=exec('limit_get','ppsf',PPSFN.P,_rodzaj,PPSFN.OD~1);
      {? _limPodstawa.ok=1
      || {? _limPodstawa.sl='D'
         || _limPoz:=exec('limit_poz','ppsf',PPSFN.P,_rodzaj,PPSFN.OD~1);
            POLA_GRP.TXT_2:=$_limPodstawa.dni;
            POLA_GRP.TXT_3:=$(_limPodstawa.dni-_limPoz);
            POLA_GRP.TXT_4:=$_limPoz;
            POLA_GRP.TXT_6:='Dni w roku'@
         |? _limPodstawa.sl='G'
         || _limPoz:=exec('limit_poz','ppsf',PPSFN.P,_rodzaj,PPSFN.OD~1,,1);
            POLA_GRP.TXT_2:=$_limPodstawa.godz;
            POLA_GRP.TXT_3:=$(_limPodstawa.godz-_limPoz);
            POLA_GRP.TXT_4:=$_limPoz;
            POLA_GRP.TXT_6:='Godziny w roku'@
         |? _limPodstawa.sl='H'
         || POLA_GRP.TXT_2:=$_limPodstawa.godz;
            POLA_GRP.TXT_3:=POLA_GRP.TXT_4:='';
            POLA_GRP.TXT_6:='Godziny w dniu'@
         ?};
         POLA_GRP.TXT_5:={? _limPodstawa.dom || 'Domyślny'@ || 'Indywidualny'@ ?}
      || POLA_GRP.TXT_2:=POLA_GRP.TXT_3:=POLA_GRP.TXT_4:=POLA_GRP.TXT_6:='';
         POLA_GRP.TXT_5:='Brak limitu'@
      ?};
      obj_del(_limPodstawa)
   ?}
?};
:: Ustawienie maski EDOKUM
exec('ppsfn_edokum_mask','ppsf');

:: Sprawdzamy czy mamy kalendarze na podany zakres, jeśli nie to zaznaczamy wniosek
_err:=0;
P.cntx_psh();
PPSFN.P();
:_name:={? P.KAL || P.KAL().NAZWA || 'standard' ?};
_name:='standard';
{? P.KAL
|| {? P.KAL().CZESC='T'
   || R_WZCZ.cntx_psh();
      R_WZCZ.index('R_WZCZE');
      R_WZCZ.prefix(P.KAL);
      {? R_WZCZ.find_le(PPSFN.OD)
      || _name:=R_WZCZ.KAL().NAZWA
      ?};
      R_WZCZ.cntx_pop()
   || _name:=P.KAL().NAZWA
   ?}
?};
KAL_ROK.cntx_psh();
KAL_ROK.index('KAL_NAZ');
{! _year:=PPSFN.OD~1 .. PPSFN.DO~1 |!
   {? ~KAL_ROK.find_key(exec('ref_firma','ustawienia'),_name,_name,_year)
   || _err+=1
   ?}
!};
KAL_ROK.cntx_pop();
P.cntx_pop();
{? _err
|| Color.fnd_kol('PPSFN#01#01')
|| ''
?}


\ppsfn_g_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Wyświetl - przed" tabeli PPSFP pola G
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPSFN.PARTDAY='T'


\ppsfn_ppsft_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Po redagowaniu" tabeli PPSFN pola PPSFT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPSFN.PPSFT<>null
|| PPSFN.PARTDAY:=PPSFN.PPSFT().PARTDAY;
   PPSFT.memo_get(,'OSW_TRE');
   {? PPSFT.OSW_WYM<>'T'
   || PPSFN.OSW_AKC:='N'
   || {? exec('ppsf_po_exists','ppsf',PPSFN.PPSFT().PPSF_NO,PPSFN.P,PPSFN.OD,PPSFN.DO,'T')
      || PPSFN.OSW_AKC:='T'
      || PPSFN.OSW_AKC:='N'
      ?}
   ?}
|| PPSFN.OSW_AKC:='N'
?};
exec('ppsfn_efld_opt','ppsf',1,PPSFN,'RED',,'PPSFT');
1


\ppsfn_partday_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Po redagowaniu" tabeli PPSFN pola PARTDAY
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfn_efld_opt','ppsf',1,PPSFN,'RED',,'PARTDAY');
1


\ppsfn_okres_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Po redagowaniu" tabeli PPSFN pol OD, DO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPSFN.DK:={? PPSFN.OD<=PPSFN.DO & PPSFN.OD<>date(0,0,0) & PPSFN.DO<>date(0,0,0)
          || PPSFN.DO-PPSFN.OD+1
          || 0
          ?};
PPSFN.DR:={? PPSFN.OD<=PPSFN.DO & PPSFN.OD<>date(0,0,0) & PPSFN.DO<>date(0,0,0) & PPSFN.P<>null
          || exec('__KAL','object');
             {? P.KAL
             || __KAL.set_cal(P.KAL,PPSFN.OD~1)
             || __KAL.set_cal('standard',PPSFN.OD~1)
             ?};
             __KAL.w_days(PPSFN.OD,PPSFN.DO)
          || 0
          ?};
{? PPSFN.PPSFT().OSW_WYM='T'
|| {? exec('ppsf_po_exists','ppsf',PPSFT.PPSF_NO,PPSFN.P,PPSFN.OD,PPSFN.DO,'T')
   || PPSFN.OSW_AKC:='T'
   || PPSFN.OSW_AKC:='N'
   ?}
?};
1


\ppsfp_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli PPSFP. Wykorzystywana zarówno przez
::       jTerma jak i webTerma.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr istotny dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(PPSFP)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld=''
|| _set(_TAB,_we,_grp_ident,'editable=grayed',_TAB,'ROK');
   _set(_TAB,_we,_grp_ident,'editable=grayed',_TAB,'MC');
   _set(_TAB,_we,_grp_ident,'editable=grayed',_TAB,'OD');
   _set(_TAB,_we,_grp_ident,'editable=grayed',_TAB,'DO');
   _set(_TAB,_we,_grp_ident,'editable=grayed',_TAB,'DK');
   _set(_TAB,_we,_grp_ident,'editable=grayed',_TAB,'DR');
   _set(_TAB,_we,_grp_ident,'editable=grayed',_TAB,'G')
?};

1


\ppsfp_rozlicz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Wyświetlenie rozliczenia godzin pracy poza siedzibą firmy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPSFP.cntx_psh();
PPSFP.index('NAG');
PPSFP.prefix(PPSFN.ref);
PPSFP.win_sel('WER');
PPSFP.select();
PPSFP.cntx_pop()


\ppsfp_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Rekord - przed" tabeli PPSFP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Zbędny kod, chyba że ustawimy wyszarzanie
_wer:=PPSFP.win_sel('?');
:_gray:={? PPSFP.DW<>date(0,0,0) || 'PU' || '' ?};
_gray:='';
PPSFP.actions_grayed(_wer,_gray);

:: Sprawdzamy czy mamy kalendarze na podany zakres, jeśli nie to zaznaczamy pozycję
_err:=0;
P.cntx_psh();
PPSFP.P();
:_name:={? P.KAL || P.KAL().NAZWA || 'standard' ?};
_name:='standard';
{? P.KAL
|| {? P.KAL().CZESC='T'
   || R_WZCZ.cntx_psh();
      R_WZCZ.index('R_WZCZE');
      R_WZCZ.prefix(P.KAL);
      {? R_WZCZ.find_le(PPSFN.OD)
      || _name:=R_WZCZ.KAL().NAZWA
      ?};
      R_WZCZ.cntx_pop()
   || _name:=P.KAL().NAZWA
   ?}
?};

KAL_ROK.cntx_psh();
KAL_ROK.index('KAL_NAZ');
{? ~KAL_ROK.find_key(exec('ref_firma','ustawienia'),_name,_name,PPSFP.ROK)
|| _err+=1
?};
KAL_ROK.cntx_pop();
P.cntx_pop();
{? _err
|| Color.fnd_kol('PPSFP#01#01')
|| ''
?}


\ppsfp_pos_management
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Formuła generuje/aktualizuje pozycje tabeli PPSFP dla pracy poza siedzibą firmy.
::   WE: _a [STRING] - rodzaj wykonywanej operacji
::                      [W - wykonanie / K - sprawdzenie(dodawanie)]
::       [_b] [INTEGER] - rodzaj komunikatu [0 - brak, 1 - (0 - ok / 1 - błąd), 2 - treść]
::       [_c] [DATE] - poprzednia Data od (dla modyfikacji)
::       [_d] [DATE] - poprzednia Data do (dla modyfikacji)
::       [_e] [INTEGER] - czy aktualizować konto kosztów z nagłówka (dla modyfikacji)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mode:={? var_pres('_a')=type_of('') & _a<>'' || _a || 'S' ?};
_info:={? var_pres('_b')=type_of(0)           || _b || 0 ?};
_prevFrom:={? var_pres('_c')=type_of(date())  || _c || date(0,0,0) ?};
_prevTo:={? var_pres('_d')=type_of(date())    || _d || date(0,0,0) ?};
_prevKK:={? var_pres('_e')=type_of(null)      || _e || null ?};

_result:={? _info=2 || '' || 0 ?};

_mod:=(_prevFrom<>date(0,0,0) & _prevTo<>date(0,0,0));
_yearFrom:=PPSFN.OD~1;
_monthFrom:=PPSFN.OD~2;
_yearTo:=PPSFN.DO~1;
_monthTo:=PPSFN.DO~2;
{? _mod & _prevFrom<PPSFN.OD
|| _yearFrom:=_prevFrom~1;
   _monthFrom:=_prevFrom~2
?};
{? _mod & _prevTo>PPSFN.DO
|| _yearTo:=_prevTo~1;
   _monthTo:=_prevTo~2
?};

_cntxpop:="O.cntx_pop(); A_OKRM.cntx_pop(); PPSFP.cntx_pop()";

PPSFP.cntx_psh();
PPSFP.index('NAG');
PPSFP.prefix();
A_OKRM.cntx_psh();
A_OKRM.index('A_OKRMR');
O.cntx_psh();
O.index('LISTYPZN');

:: Dodawanie/Aktualizacja rekordów
{! _year:=_yearFrom.._yearTo |!
   _monthS:={? _year=_yearFrom || _monthFrom || 1 ?};
   _monthE:={? _year=_yearTo || _monthTo || 12 ?};
   {! _month:=_monthS.._monthE |!
      _addNew:=0;
      _del:=0;
      {? _mod & (
         date(_year,_month,1)<date(PPSFN.OD~1,PPSFN.OD~2,1) |
         date(_year,_month,1)>date(PPSFN.DO~1,PPSFN.DO~2,1))
      || _from:=_to:=date(0,0,0);
         _caldays:=_workdays:=0;
         _workhours:=*0;
         _del:=1
      || _from:={? _year=_yearFrom & _month=_monthFrom || PPSFN.OD || date(_year,_month,1) ?};
         {? _from<PPSFN.OD || _from:=PPSFN.OD ?};
         _to:={? _year=_yearTo & _month=_monthTo || PPSFN.DO || date(_year,_month,0) ?};
         {? _to>PPSFN.DO || _to:=PPSFN.DO ?};
         _caldays:=_to-_from+1;
         _workdays:=__KAL.w_days(_from,_to);
         _workhours:={? PPSFN.G<>time(0,0,0) & PPSFN.PARTDAY='T'
                     || *(*PPSFN.G*_workdays)
                     || *(__KAL.w_hours(_from,_to)*60)
                     ?}

      ?};

::    Kontrola danych przy dodawaniu
::    Przy okazji poprawki ER/WRT/XP/12.51/2308/0027 został uporządkowany sposób weryfikacji zamknięcia miesiąca oraz
::    zamknięcia listy SUM - obecnie służy do tego formuła \ppsfn_closure_control/ppsf.
::    Została również usunięta ścieżka _mode='S', ze względu, że nie była nigdzie wykorzystywana
      {? _mode='K'
      || _txt:=exec('ppsfn_closure_control','ppsf',PPSFN.P,PPSFN.OD,PPSFN.DO,1);
         {? _txt<>''
         || {? _info=2
            || _cntxpop();
               return(_txt)
            |? _info=1
            || _cntxpop();
               return(1)
            ?}
         ?}

::    Modyfikacja danych (akcja Dołącz, Popraw)
      |? _mode='W'
      || {? _mod
         || PPSFP.prefix(PPSFN.ref,_year,_month);
            {? PPSFP.first()
            || {? _del
               || PPSFP.del()
               || {? PPSFP.OD<>_from | PPSFP.DO<>_to | PPSFP.DK<>_caldays | PPSFP.DR<>_workdays | PPSFP.G<>_workhours |
                     PPSFN.KK<>_prevKK
                  || PPSFP.OD:=_from;
                     PPSFP.DO:=_to;
                     PPSFP.DK:=_caldays;
                     PPSFP.DR:=_workdays;
                     PPSFP.G:=_workhours;
                     PPSFP.PARTDAY:=PPSFN.PARTDAY;
                     {? PPSFN.KK<>_prevKK
                     || PPSFP.KK:=PPSFN.KK
                     ?};
                     PPSFP.put()
                  ?}
               ?}
            |? ~_del
            || _addNew:=1
            ?}
         || _addNew:=1
         ?};
         {? _addNew
         || PPSFP.blank(1);
            PPSFP.PPSFN:=PPSFN.ref;
            PPSFP.P:=PPSFN.P;
            {? exec('is_pzd01','ppsf')
            || PPSFP.OSOBA:=PPSFN.OSOBA
            ?};
            PPSFP.FIRMA:=PPSFN.FIRMA;
            PPSFP.ROK:=_year;
            PPSFP.MC:=_month;
            PPSFP.OD:=_from;
            PPSFP.DO:=_to;
            PPSFP.DK:=_caldays;
            PPSFP.DR:=_workdays;
            PPSFP.G:=_workhours;
            PPSFP.PARTDAY:=PPSFN.PARTDAY;
            PPSFP.LT:='';
            PPSFP.KK:=PPSFN.KK;
            PPSFP.add()
         ?}
      ?}
   !}
!};

_cntxpop();

_result


\ppsfn_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa wyzwalacza "Dołącz - przed" tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPSFN.DK=0
|| PPSFN.DK:=PPSFN.DO-PPSFN.OD+1
?};
P.cntx_psh();
PPSFN.P();
{? PPSFN.DR=0
|| exec('__KAL','object');
   {? P.KAL
   || __KAL.set_cal(P.KAL,PPSFN.OD~1)
   || __KAL.set_cal('standard',PPSFN.OD~1)
   ?};
   PPSFN.DR:=__KAL.w_days(PPSFN.OD,PPSFN.DO)
?};
{? PPSFN.OSOBA=null()
|| PPSFN.OSOBA:=P.OSOBA
?};
P.cntx_pop();
exec('ppsfn_modb','ppsf')


\ppsfn_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa wyzwalacza "Dołącz - po" tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfp_pos_management','ppsf','W');
~~


\ppsfn_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Wyświetl - przed" tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfn_efld_opt','ppsf','*',PPSFN,'RED');
PPSFN.display()


\grp_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Ewidencja pracy poza siedzibą firmy - operacja grupowa.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: utworzenie tymczasowej tabeli z wszystkimi statusami wniosków:
_STAT:=exec('stat_tab','ppsf');

:: okno grupowe:
_grp:=_STAT.grp_make('Praca poza siedzibą firmy'@,"grp_disp(PPSFN,'SLO',1)",'#prc_grp_ppsf');

:: okienko statusów:
_werStat:=_STAT.mk_sel('Sposób rejestracji'@,,,'#ppsf_wer_stat',,,,,'U');
_STAT.win_fld(_werStat,_STAT,'AZ',,,3,,,'Kod'@,,'Kod sposobu rejestracji'@);
_STAT.win_fld(_werStat,_STAT,'OPIS',,,15,,,'Opis'@,,'Opis sposobu rejestracji'@);
_STAT.win_sopt(_werStat,'select_record_checkbox=0');
_STAT.grp_sel(_grp,_STAT,_werStat,,"grp_disp(PPSFN,'SLO',1)");

:: okienko nagłówków:
_STAT.grp_splt(_grp,,'vertical','right',',25%');
_STAT.grp_sel(_grp,PPSFN,'SLO',,"grp_disp(PPSFP,'SLO')",,,,"exec('grp_ppsfn_bs','ppsf')");

:: okienko pozycji:
_STAT.grp_splt(_grp,,'horizontal','bottom',18);
_STAT.grp_sel(_grp,PPSFP,'SLO',,,,,,"exec('grp_ppsfp_bs','ppsf')");

PPSFT.cntx_psh();
PPSFT.prefix();
PPSFT.win_sel('SLO');
PPSFT.win_edit('RED');
PPSFT.win_patt('WZO');
PPSFN.cntx_psh();
PPSFN.prefix();
PPSFN.f_clear();
PPSFN.win_sel('SLO');
PPSFN.win_edit('RED');
PPSFN.win_patt('WZO');
PPSFP.cntx_psh();
PPSFP.index({? PAR_SKID.get(236)='T' || 'DATAX' || 'DATA' ?});
PPSFP.win_sel('SLO');
PPSFP.prefix();
_STAT.win_sel(_grp);
_STAT.select(,1);
PPSFP.cntx_pop();
PPSFN.f_clear();
PPSFN.cntx_pop();
PPSFT.cntx_pop();

~~


\ppsfn_dolacz_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa grupowej akcji "Dołącz - przed" tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ws:=cur_win(1,1);
{? _ws='SLO'
|| exec('ppsf_wprowadz_grp','ppsf')
?};
{? PPSFN.f_active()
|| PPSFN.f_rfresh()
?}


\ppsf_wprowadz_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Grupowe wprowadzanie wniosków o pracę poza siedzibą firmy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());

_err:=_ok:=0;

:: wybór pracowników
_args:=exec('wybierz_args','pracownik');
_args.DOMAIN:='PKD';
_args.F_ZATR:={? +P_FILTER.F_ZATR().KOD || P_FILTER.F_ZATR().KOD || '*T' ?};
_args.VIEW:='';
_args.UD_SCH:=exec('domyslny','schemat','PODZORG');
_args.UD_SKL:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
_ret:=exec('wybierz','pracownik',_args);
: wybrano kogoś?
{? _ret.P.size()=0
|| return()
?};

PPSFN.blank();
PPSFN.P:=null();
PPSFN.KK:=null();
exec('ppsfn_efld_opt','ppsf','*',PPSFN,'RED');

{? PPSFN.edit("exec('ppsfn_ae','ppsf','G')")
|| PPSFN.D:=date();
   {? PPSFN.PARTDAY='N'
   || PPSFN.DAYTIME:='X';
      PPSFN.GOD:=time(0,0,0);
      PPSFN.G:=time(0,0,0)
   ?};
   PPSFN.DK:=PPSFN.DO-PPSFN.OD+1
|| return()
?};
_kk:=PPSFN.KK;

exec('KOMM','#object');
KOMM.init(,,'Błędy i ostrzeżenia przy wprowadzaniu pracy poza siedzibą firmy'@);

_loop:=_ret.P.first();

P.cntx_psh();
P.prefix();
echo('Trwa wprowadzanie informacji o pracy poza siedzibą firmy...'@);
{!
|? _loop
|! {? P.seek(_ret.P.SQL)
   || PPSFN.P:=P.ref();
      PPSFN.OSOBA:=P.OSOBA;
      PPSFN.AD:=date();
      PPSFN.AZ:='R';
      PPSFN.CREATOR:=PPSFN.P;
::    Konto kosztów - jeśli było wypełnione uzupełniamy nim dla pracowników:
      {? _kk<>null()
      || PPSFN.KK:=_kk
      ?};
      _add:=1;
      _kom:='';
::    Kontrola pokrywania się dat
      {? (_res:=exec('ppsfn_date_control','ppsf',null,2))<>''
      || _kom:=gsub(_res,'\n',' ');
         _add:=0
      ?};
::    Kontrola limitów:
      {? _add
      || _lim:=exec('limit_spr','ppsf');
         {? _lim.ok=0
         || _kom:='%1 %2'
               [exec('limit_kom','ppsf',_lim),'Operacja dodania pracy poza siedzibą zakończona niepowodzeniem.'@];
            _add:=0
         ?};
         obj_del(_lim)
      ?};
::    Sprawdzenie czy występują nieobecności:
      {? _add & exec('suma_dni_N','nieobecnosc',1,PPSFN.OD,PPSFN.DO,,,'K',,1)
      || _kom:='%1 %2'['W trakcie zapisu występują nieobecności.'@,'Należy zweryfikować dane.'@]
      ?};
      {? _add
      || {? ~PPSFN.add()
         || _kom:='%1 %2'[
               'Błąd danych.'@,
               'Operacja dodania pracy poza siedzibą zakończona niepowodzeniem.'@
            ]
         ?}
      ?};
      {? +_kom
      || _sect:=' %1 %2 %3:'[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,'[nr teczki - %1]'@[form(P.T)]];
         {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect,'xwin16.png:100') ?};
         KOMM.add(_kom,4);
         KOMM.sect_end()
      ?}
   ?};
   _loop:=_ret.P.next()
!};
echo('');
P.cntx_pop();

{? ~KOMM.empty()
|| KOMM.select()
?};

FUN.info('Zakończono rejestrację pracy poza siedzibą firmy.'@);

1


\grp_ppsfn_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Przed obsługą okienka tabeli PPSFN w oknie grupowym
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_az:=cur_tab().AZ;

:: Filtr programowy - uwzględnienie bieżących ustawień dotyczących firmy, jednostek organizacyjnych i formy zatrudnienia
_where:='PPSFN.FIRMA=:_a and PPSFN.P in (select :_b.REF from :_b)';
{? +_az || _where+=' AND PPSFN.AZ=\'%1\''[_az] ?};
{? P_FILTER.F_ZATR<>null || _where+=' AND P.F_ZATR=\'%1\''[$P_FILTER.F_ZATR] ?};
PPSFN.f_set('OD%1'[{? PAR_SKID.get(236)='T' || '^' || '' ?}],
   {? P_FILTER.F_ZATR<>null || 'left join P using (PPSFN.P,P.REFERENCE)' || '' ?},
   {? +_where || _where || '1=1' ?},
   exec('ref_firma','ustawienia'),exec('dostepne_p','schemat','PKD','*','T'));

_wer:=cur_win(1,1);
_gray:={? cur_tab(0,1).AZ='W' || 'D:D' || '' ?};
PPSFN.actions_grayed(_wer,_gray)


\grp_ppsfp_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Przed obsługą okienka tabeli PPSFP w oknie grupowym
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPSFN.f_size()
|| PPSFP.prefix(PPSFN.ref())
|| return('#disable')
?}


\stat_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Utworzenie tymczasowej tabeli z wszystkimi statusami wniosków
::   WE:
::   WY: _STAT [TABLE] - tabela tymczasowa ze statusami
::----------------------------------------------------------------------------------------------------------------------
_STAT:=tab_tmp(1,'AZ','STRING[1]','Kod','OPIS','STRING[24]','Opis');
_kody:=spli_str(',R,W',',');
{! _ii:=1..obj_len(_kody)
|! _STAT.AZ:=_kody[_ii];
   _STAT.OPIS:=exec('ppsf_status','ppsf',_STAT.AZ);
   _STAT.add()
!};
obj_del(_kody);
_STAT.first();

_STAT


\ppsft_limit_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa akcji "Limit domyślny" tabeli PPSFT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_rok:=date()~1;
_jest:=0;
PPSFL.cntx_psh();
PPSFL.win_edit('REDD');
PPSFL.win_sel('WER');
:PPSFL.index({? PAR_SKID.get(236)='T' || 'UNIQUEX' || 'UNIQUE' ?});
:PPSFL.prefix(exec('firma','ustawienia'),PPSFT.SLO_KOD,null());
PPSFL.index({? PAR_SKID.get(236)='T' || 'DOMX' || 'DOM' ?});
{? exec('is_pzd01','ppsf')
|| PPSFL.prefix(exec('firma','ustawienia'),null(),PPSFR.ref());
   _ag:=':';
   {? PPSFR.LIMITY='N'
   || FUN.info('Rodzaj ma wyłączone limitowanie. Dołączanie nie będzie dostępne.'@);
      _ag:='D%1D'[_ag]
   ?};
   PPSFL.actions_grayed('WER',_ag)
|| PPSFL.prefix(exec('firma','ustawienia'),null())
?};
{? ~PPSFL.first()
|| PPSFL.blank()
|| exec('ppsfl_efld_opt','ppsf','*',PPSFL,'REDD')
?};
PPSFL.select(,1);
PPSFL.cntx_pop()


\ppsfl_r_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Po redagowaniu pola PPSFL.R.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\ppsfn_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa wyzwalacza "Popraw - przed" tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfn_modb','ppsf',1)


\ppsfn_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa wyzwalaczy "Dołącz - przed" oraz "Popraw - przed" tabeli PPSFN
::   WE: [_a][INTEGER] - 0/1. Dołącz - 0, Popraw - 1. Domyślnie 0.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_ret:=1;

_ret


\limit_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Wylicza liczbę dni pozostałych do wykorzystania w ramach danego limitu rocznego pracownika
::   WE: _a [_P] - wskazanie na pracownika (P.ref)
::       _b [_PPSFR] - wskazanie na rodzaj pracy (PPSFR.ref)
::       _c [INTEGER] - rok sprawdzenia
::      [_d][_PPSFN] - wskazanie nagłówka wniosku do pominięcia w obliczeniach (put)
::      [_e][INTEGER] - typ zwracanego limitu 0-dni/1-godziny. Domyślnie 0-dni
::   WY: _poz [REAL/TIME/NULL] - pozostałe do wykożystania dni/godz. w ramach limitu. null() jeśli limitu nie ustalono
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>7 | var_pres('_b')<>7 | var_pres('_c')<>type_of(0)
|| FUN.error('Błąd argumentu wejściowego formuły.'@);
   return(-2)
?};
_prac:=_a;
_rodzaj:=_b;
_rok:=_c;
_poz:=_wyk:=0;
_ppsfn:={? var_pres('_d')=7 || _d || null() ?};
_rodz:={? var_pres('_e')=type_of(0) || _e || 0 ?};

_lim:=exec('limit_get','ppsf',_prac,_rodzaj,_rok);
_poz:=_lim.ok;

{? _poz<>-1
:: Odnalezienie innych wniosków pracownika danego typu w tym roku:
|| PPSFN.cntx_psh();
   PPSFN.index('TYPPRAC2');
:: Wnioski pracownika danego typu:
   PPSFN.prefix(_rodzaj,_prac);
   {? PPSFN.first()
   || P.cntx_psh();
      PPSFN.P();
      PPSFP.cntx_psh();
      PPSFP.index('NAG');
      {!
::       Pozycje ze znalezionego wniosku tylko z badanego roku:
      |? {? PPSFN.ref()<>_ppsfn
         || PPSFP.prefix(PPSFN.ref(),_rok);
            {? PPSFP.first()
            || {!
::                Sumuj dni/godziny robocze ze znalezionej pozycji:
               |? _wyk+={? _rodz || PPSFP.G || PPSFP.DR ?};
:: ER/WRT/XP/23.25/2401/0042 - ER/WRT/XP/22.26/2401/0007 - ER/WRT/XP/12.51/2401/0017: Weryfikacja wykorzystania
:: limitu pracy zdalnej okazjonalnej w przypadku wprowadzania nieobecności błędne sprawdzenie roku limitu
::                Odejmij dni/godziny robocze z nieobecności z tego okresu:
                  {? _rodz
                  || _wyk-=(*(exec('suma_dni_N','nieobecnosc',1,PPSFP.OD,PPSFP.DO,,,'G',,1)*60))
                  || _wyk-=exec('suma_dni_N','nieobecnosc',1,PPSFP.OD,PPSFP.DO,,,'R',,1)
                  ?};
                  PPSFP.next()
               !}
            ?}
         ?};
         PPSFN.next()
      !};
      PPSFP.cntx_pop();
      P.cntx_pop()
   ?};
   PPSFN.cntx_pop();

   _poz:={? _rodz || _lim.godz-_wyk || _lim.dni-_wyk ?}
|| _poz:=null()
?};

_poz


\limit_spr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Sprawdza czy dany wniosek mieści się w limitach.
::       UWAGA! Jeśli nie podano, któregoś z parametrów przyjmuje,
::       że jest odpowiedni ustalony kontekst PPSFN.
::   WE: [_a][DATE]   - data OD wniosku
::       [_b][DATE]   - data DO wniosku
::       [_c][_P]     - wskazanie pracownika
::       [_d][_PPSFR] - wskazanie typu wniosku
::       [_e][TIME]   - wnioskowane godziny
::       [_f][_PPSFN] - wskazanie nagłówka wniosku do pominięcia w obliczeniach (put)
::       [_g][INTEGER]- 0/1 Czy zbierać dane szczegółowe (tabela)? domyślnie 0 (nie)
::       [_h][INTEGER]- 0*/1 Pomijać limity domyślne (czy źródłem danych mają być wyłącznie limity indywidualne)?
::   WY: _limSpr [OBJ]- tablica elementów nazwanych
::               ok   [INTEGER] - Czy wniosek mieści się w limitach:
::                                 1 - wniosek mieści się w limitach
::                                 0 - wniosek przekracza limity (conajmniej jeden limit)
::                                -1 - brak ustalonych limitów (conajmniej jednego)
::               TAB  [TABLE]   - tabela przekroczeń limitów:
::                                 ROK [INTEGER] - Rok, w którym nastąpiło przekroczenie
::                                 LIM [STRING]  - Limit dni/godzin w danym roku
::                                 DOM [INTEGER] - 0/1 Czy limit domyślny? [1-domyślny, 0-indywidualny]
::----------------------------------------------------------------------------------------------------------------------
_od:={? var_pres('_a')=type_of(date()) || _a || PPSFN.OD ?};
_do:={? var_pres('_b')=type_of(date()) || _b || PPSFN.DO ?};
_prac:={? var_pres('_c')=7 || _c || PPSFN.P ?};
_rodzaj:={? var_pres('_d')=7 || _d || {? exec('is_pzd01','ppsf') || PPSFN.PPSFT().PPSFR || PPSFN.PPSFT().SLO_KOD ?} ?};
_wnGodz:={? var_pres('_e')=type_of(time()) || _e || PPSFN.G ?};
_ppsfn:={? var_pres('_f')=7 || _f || null() ?};
_szcz:={? var_pres('_g')=type_of(0) || _g || 0 ?};
_tylko_indywidualne:=var_pres('_h')=type_of(0) & _h;

_limSpr:=obj_new('ok','sl','dni','godz','TAB');
_limSpr.ok:=1;
_limSpr.TAB:=tab_tmp(1,'ROK','INTEGER','Rok'@,'LIM','STRING[50]','Limit'@,'DOM','INTEGER','Domyślny'@);

:: Pobranie limitu:
_limGet:=exec('limit_get','ppsf',_prac,_rodzaj,_od~1,_tylko_indywidualne);

:: Nie ustalono limitów:
{? _limGet.sl=''
|| _limSpr.ok:=-1;
   return(_limSpr)
?};

_p_kal:=null();
P.cntx_psh();
P.prefix();
{? P.seek(_prac)
|| _p_kal:=P.KAL
?};
P.cntx_pop();

{? 'DG'*_limGet.sl
:: LIMIT ROCZNY:
|| exec('__KAL','object');
   _rok:=_od~1;
:: Zliczenie dni roboczych z wniosku:
   {? _p_kal
   || __KAL.set_cal(_p_kal,_rok)
   || __KAL.set_cal('standard',_rok)
   ?};
   {? _limGet.sl='D'
   || _drWnio:=__KAL.w_days(_od,_do);
::    Sprawdzenie pozostałego limitu w danym roku:
      _limit:=exec('limit_poz','ppsf',_prac,_rodzaj,_rok,_ppsfn)
   |? _limGet.sl='G'
   || {? *_wnGodz>0
      || _drWnio:=(*_wnGodz/60)*__KAL.w_days(_od,_do)
      || _drWnio:=__KAL.w_hours(_od,_do)
      ?};

::    Sprawdzenie pozostałego limitu w danym roku:
      _limPoz:=exec('limit_poz','ppsf',_prac,_rodzaj,_rok,_ppsfn,1);
      _limit:={? type_of(_limPoz)=type_of(null) || null() || (*_limPoz)/60 ?}
   ?};
:: Jeśli dni/godziny robocze z wniosku w danym roku prekraczają limit zwracamy przekroczenie:
   {? type_of(_limit)<>type_of(0)
   || _limSpr.ok:=-1
   |? (_limit-_drWnio)<0
   || _limSpr.ok:=0
   ?};
:: Jeśli zapisujemy szczegółówe informacje o przekroczeniach:
   {? _szcz & _limSpr.ok=0
   || _limSpr.TAB.ROK:=_rok;

      {? _limGet.sl='D'
      || _limSpr.TAB.LIM:='%1 %2'[$_limGet.dni,'dni roboczych'@]
      |? _limGet.sl='G'
      || _limSpr.TAB.LIM:='%1 %2'[$_limGet.godz,'godzin w roku'@]
      ?};
      _limSpr.TAB.DOM:=_limGet.dom;
      _limSpr.TAB.add();
      _limSpr.ok:=1
   ?}

:: LIMIT DOBOWY:
|| _dtSpr:=_od;
   _rokOld:=(_od~1)-1;
   _wyk:=time(0,0,0);

   PPSFN.cntx_psh();
   PPSFN.index('TYPPRAC2');
   PPSFN.prefix(_rodzaj,_prac);
   P.cntx_psh();
   {? PPSFN.first()
   || PPSFN.P()
   ?};
   {? _p_kal
   || KAL.set_cal(_p_kal,_rokOld)
   || KAL.set_cal('standard',_rokOld)
   ?};
   _wnGodzPrzelicz:=_wnGodz=*0;
:: Przechodzę po wszystkich dniach z wniosku:
   {! |? _dtSpr<=_do & (_limSpr.ok=1 | _szcz)
   |! {? _dtSpr~1<>_rokOld
::    Jeżeli rok się zmienił, to na nowo pobieram limit godzin dobowych na ten rok:
      || _rokOld:=_dtSpr~1;
         {? _p_kal
         || __KAL.set_cal(_p_kal,_rokOld)
         || __KAL.set_cal('standard',_rokOld)
         ?};
         {? var_pres('_lim')>100
         || obj_del(_lim)
         ?};
         {? _wnGodzPrzelicz || _wnGodz:=*(__KAL.w_hours(_dtSpr,_dtSpr)*60) ?};
         _lim:=exec('limit_get','ppsf',_prac,_rodzaj,_rokOld);
::       Jeżeli wnioskowane godziny przekraczają sam limit, wychodzę:
         {? _wnGodz>_lim.godz
         || _limSpr.ok:=0
         ?}
      ?};
      {? _limSpr.ok<>0
::    Sprawdzam czy istnieją nagłówki tego typu na tą datę:
      || {? PPSFN.first()
         || {!
::             Zliczam "wykorzystane" godziny:
            |? {? PPSFN.ref()<>_ppsfn & PPSFN.OD<=_dtSpr & PPSFN.DO>=_dtSpr
::                Jeśli nie ma całodniowej nieobecności w tym dniu
               || {? ~exec('suma_dni_N','nieobecnosc',1,_dtSpr,_dtSpr,,,'K',,1)
                  || _wyk+=PPSFN.G
                  ?}
               ?};

               _wnGodz+_wyk<=_lim.godz & PPSFN.next()
            !}
         ?};

         {? _wnGodz+_wyk>_lim.godz
         || _limSpr.ok:=0
         ?}
      ?};

::    Jeśli zapisujemy szczegółówe informacje o przekroczeniach:
      {? _szcz & _limSpr.ok=0
      || _limSpr.TAB.ROK:=_rokOld;
         _limSpr.TAB.LIM:='%1 %2'[$_lim.godz,'godzin dziennie'@];
         _limSpr.TAB.DOM:=_lim.dom;
         _limSpr.TAB.add();
::       Zapisaliśmy informację o przekroczeniu w danym roku, przeskakujemy na kolejny rok:
         _dtSpr:=date(_dtSpr~1,12,0);
         _limSpr.ok:=1
      ?};

::    Kolejny dzień:
      _dtSpr+=1
   !};
   P.cntx_pop();
   PPSFN.cntx_pop()
?};
obj_del(_limGet);
:: Jeśli był zapis szczegółowy i coś dodano:
{? _szcz & _limSpr.TAB.size()
|| _limSpr.ok:=0
?};

_limSpr


\limit_kom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Zwraca komentarz w zależności od wejścia.
::   WE: _a [OBJ] - wynik funkcji \limit_spr/ppsf.fml
::      [_b][INTEGER] - Czy format jednolinijkowy (po przecinkach)? [0/1] - domyślnie 0 - format wielolinijkowy
::   WY: komentarz
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<100
|| FUN.error('Błąd argumentu wejściowego'@);
   return('')
|| _limSpr:=_a
?};
_kom:='';
_jLin:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_przec:={? _jLin || ', ' || '\n' ?};
{? _limSpr.TAB.first()
|| _kom+='%1:%2'['Przekroczono następujące limity'@,{? _jLin || ' ' || _przec ?}];
   {!
   |? _kom+='%1%2 %3 %4 na rok %5%6'@
         [{? _jLin || '' || '* ' ?},'Limit'@,{? _limSpr.TAB.DOM || 'domyślny'@ || 'indywidualny'@ ?},
          _limSpr.TAB.LIM,$_limSpr.TAB.ROK,_przec];

      _limSpr.TAB.next()
   !};
   {? _przec=', '
   || _kom-=2;
      _kom+='.'
   || _kom-=1
   ?}
|| _kom:=
   {? _limSpr.ok=0
   || 'Przekroczono limit.'@
   |? _limSpr.ok=-1
   || 'Brak ustalonego limitu.'@
   ?}
?};

_kom


\ppsfl_grp_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Limity pracy poza siedzibą firmy - operacja grupowa.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: okno grupowe:
_grp:=PPSFT.grp_make('Limity pracy poza siedzibą firmy'@,,'#prc_grp_ppsl');

:: okienko pracowników (deklaracja):
_werPrac:=P.mk_sel('Pracownicy z ustalonym limitem'@,,,'#ppsl_wer_prac',,,,,'U');
params_set('wp',_werPrac);

:: okienko typów:
:PPSFT.grp_sel(_grp,PPSFT,'SLOG',,"grp_disp(P,params_get().wp,1)");
{? exec('is_pzd01','ppsf')
|| PPSFT.grp_sel(_grp,PPSFR,'SLO1',,"grp_disp(P,params_get().wp,1)");
   PPSFR.win_sopt('SLO1','select_record_checkbox=0')
|| PPSFT.grp_sel(_grp,SLO_KOD,'SLO3',,"grp_disp(P,params_get().wp,1)");
   SLO_KOD.win_sopt('SLO3','select_record_checkbox=0')
?};

:: okienko pracowników:
P.win_fld(_werPrac,P,'T',,,-6,,,'Numer teczki'@,,'Numer w aktach'@);
P.win_fld(_werPrac,P,'OSOBA','NAZWISKO',,15,,,'Nazwisko'@,,'Aktualne nazwisko'@);
P.win_fld(_werPrac,P,'OSOBA','PIERWSZE',,15,,,'Imię'@,,'Pierwsze imię'@);
P.win_fld(_werPrac,P,'WYDZIAL','SYMBOL',,-6,,,'Jednostka organizacyjna'@,,'Jednostka organizacyjna'@);
P.win_fld(_werPrac,P,'ST','ST',,15,,,'Stanowisko'@,,'Opis stanowiska'@);
P.win_fld(_werPrac,P,'ZA',,,-3,,,'Zatrudniony?'@,,'Znacznik zatrudnienia [T/N]'@,2,,"'T'","'N'");
{! _ii..2 |! P.win_act(_werPrac,_ii-1,'Formuła','Dołącz'@,,,"exec('ppsfl_dolacz_bg','ppsf')") !};
P.win_btn(_werPrac,'text=%1'['Dołącz'@],'menu:D');
P.win_act(_werPrac,0,'Formuła','Usuń'@,,,"exec('ppsfl_usun_b','ppsf')",,,1,
   "exec('ppsfl_usun_bg','ppsf')","exec('ppsfl_usun_ag','ppsf')");
P.win_btn(_werPrac,'text=%1'['Usuń'@],'menu:U');
PPSFT.grp_splt(_grp,,'vertical','right',',25%');
PPSFT.grp_sel(_grp,P,_werPrac,,"grp_disp(PPSFL,'SLO')",,,,"exec('grp_p_bs','ppsf')");

:: okienko limitów:
PPSFT.grp_splt(_grp,,'horizontal','bottom',22);
PPSFT.grp_sel(_grp,PPSFL,'SLO',,"grp_disp(P,params_get().wp,1)",,,,"exec('grp_ppsfl_bs','ppsf')");

_firma:=exec('firma','ustawienia');
P.cntx_psh();
P.prefix();
P.f_clear();
P.win_edit('INFO_P');
PPSFL.cntx_psh();
PPSFL.index({? PAR_SKID.get(236)='T' || 'UNIQUEX' || 'UNIQUE' ?});
PPSFL.win_edit('RED');
PPSFT.cntx_psh();
PPSFT.index('NAZWA');
PPSFT.prefix(_firma);
PPSFT.win_sel(_grp);
{? exec('is_pzd01','ppsf')
|| PPSFR.cntx_psh();
   PPSFR.index('KOD');
   PPSFR.prefix();
   {? ~PPSFR.f_set(,,'PPSFR.FIRMA=:_a and PPSFR.KOD not like \':_b\'',_firma,'ZDALN_ST')
   || PPSFR.f_set(,,'0=1')
   ?};
   PPSFT.select(,1);
   PPSFR.cntx_pop()
|| SLO_KOD.cntx_psh();
   SLO_KOD.index('KOD');
   SLO_KOD.prefix(exec('slo_typ','ext_slo','PPSFT'));
   PPSFT.select(,1);
   SLO_KOD.cntx_pop()
?};
PPSFT.cntx_pop();
PPSFL.cntx_pop();
P.f_clear();
P.cntx_pop();

~~


\grp_p_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Przed obsługą okienka tabeli P w oknie grupowym
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_pzd01','ppsf')
|| _where:='PPSFL.P is not null and PPSFL.PPSFR=:_a and PPSFL.FIRMA=:_b and P.REFERENCE in (select :_c.REF from :_c)';
   {? P_FILTER.F_ZATR<>null || _where+=' and P.F_ZATR=:_d' ?};
   P.f_set('OSOBA(NAZWISKO)',
      'join OSOBA using(P.OSOBA, OSOBA.REFERENCE) right join PPSFL using(P.REFERENCE, PPSFL.P)',
      _where,
      PPSFR.ref(),exec('ref_firma','ustawienia'),exec('dostepne_p','schemat','PKD','*'),P_FILTER.F_ZATR
   )
|| _where:='PPSFL.P is not null and PPSFL.SLO_KOD=:_a and PPSFL.FIRMA=:_b and P.REFERENCE in (select :_c.REF from :_c)';
   {? P_FILTER.F_ZATR<>null || _where+=' and P.F_ZATR=:_d' ?};
   P.f_set('OSOBA(NAZWISKO)',
      'join OSOBA using(P.OSOBA, OSOBA.REFERENCE) right join PPSFL using(P.REFERENCE, PPSFL.P)',
      _where,
      SLO_KOD.ref,exec('ref_firma','ustawienia'),exec('dostepne_p','schemat','PKD','*','T'),P_FILTER.F_ZATR
   )
?}


\grp_ppsfl_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Przed obsługą okienka tabeli PPSFL w oknie grupowym
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPSFL.prefix(exec('firma','ustawienia'),{? exec('is_pzd01','ppsf') || PPSFR.ref() || SLO_KOD.ref() ?},P.ref());
{? ~PPSFL.size()
|| return('#disable')
?}


\ppsfl_ppsft_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Wartość początkowa pola PPSFL.PPSFT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPSFT.ref()


\ppsfl_p_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Wartość początkowa pola PPSFL.P
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.ref()


\ppsfl_dolacz_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa grupowej akcji "Dołącz - przed" tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPSFT.cntx_psh();
PPSFT.win_sel('SLO');
{? exec('is_pzd01','ppsf') & PPSFR.LIMITY='N'
|| FUN.info('Rodzaj ma wyłączone limitowanie. Dołączanie nie dostępne.'@)
|| exec('ppsl_wprowadz_grp','ppsf')
?};
PPSFT.cntx_pop()


\ppsl_wprowadz_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Grupowe wprowadzanie limitów pracy poza siedzibą firmy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());

_err:=_ok:=0;

:: wybór pracowników
_args:=exec('wybierz_args','pracownik');
_args.DOMAIN:='PKD';
_args.F_ZATR:={? +P_FILTER.F_ZATR().KOD || P_FILTER.F_ZATR().KOD || '*T' ?};
_args.VIEW:='';
_args.UD_SCH:=exec('domyslny','schemat','PODZORG');
_args.UD_SKL:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
_ret:=exec('wybierz','pracownik',_args);
PPSFL.cntx_psh();
PPSFL.index('UNIQUE');
PPSFL.prefix();
PPSFL.blank();
exec('ppsfl_efld_opt','ppsf','*',PPSFL,'RED');
: wybrano kogoś?
{? _ret.P.size()<>0 & PPSFL.edit("{? exec('is_pzd01','ppsf')
                                  || exec('ppsfl_chk','ppsf',0,1)
                                  || exec('ppsfl_chk','ppsf') ?}"
                                )
|| exec('KOMM','#object');
   KOMM.init(,,'Komunikaty wprowadzania limitów pracy poza siedzibą firmy'@);

   _loop:=_ret.P.first();

   P.cntx_psh();
   P.prefix();
   OSOBA.cntx_psh();
   echo('Trwa wprowadzanie informacji o limitach pracy poza siedzibą firmy...'@);
   _firma:=exec('firma','ustawienia');
   {!
   |? _loop
   |! {? P.seek(_ret.P.SQL)
      || _err:=0;
         _errTxt:='Nie udało się dodać zapisu.'@;
         PPSFL.P:=P.ref();
::       Sprawdzam czy nie ma już dla pracownika limitu na ten rok:
         PPSFL.cntx_psh();
         PPSFL.prefix(_firma,{? exec('is_pzd01','ppsf') || PPSFL.PPSFR || PPSFL.SLO_KOD ?},PPSFL.P,PPSFL.R);
         {? PPSFL.first()
         || _err+=1;
            _errTxt:='Pracownik posiada już limit indywidualny.'@
         ?};
         PPSFL.cntx_pop();
::       Dodaję rekord:
         {? ~_err & PPSFL.add()
         || _ok+=1
         || _sect:=' %1 %2 %3:'[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,'[nr teczki - %1]'@[form(P.T)]];
            {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect,'xwin16.png:100') ?};
            KOMM.add(_errTxt,4);
            KOMM.sect_end();
            _err+=1
         ?}
      ?};
      _loop:=_ret.P.next()
   !};
   echo('');
   OSOBA.cntx_pop();
   P.cntx_pop();

   {? _ok
   || _sect:='Powodzenie:'@;
      KOMM.sect_beg(_sect,'xwin16.png:38');
      KOMM.add('Liczba dodanych zapisów: %1.'@[$_ok],13);
      KOMM.sect_end()
   ?};
   {? ~KOMM.empty()
   || KOMM.select()
   || FUN.info('Zakończono rejestrację limitów pracy poza siedzibą firmy bez wprowadzania zmian.'@)
   ?}
?};
PPSFL.cntx_pop();
exec('grp_p_bs','ppsf');
{? exec('is_pzd01','ppsf')
|| grp_disp(PPSFR,'SLO1',0)
|| grp_disp(SLO_KOD,'SLO3',0)
?};

1


\ppsfl_wer_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Akcja "Dołącz" w oknie WER tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPSFL.cntx_psh();
PPSFL.index('UNIQUE');
PPSFL.prefix();
PPSFL.blank();
:: Jeśli typ jest całodzienny, to nie ma możliwośći rejestrować limitu w godzinach:
{? PPSFT.PARTDAY<>'T'
|| PPSFL.SL:='D'
?};
exec('ppsfl_efld_opt','ppsf','*',PPSFL,'REDD');
{? ~exec('is_pzd01','ppsf')
|| PPSFL.SLO_KOD:=null
?};
PPSFL.P:=null();
{? PPSFL.edit("exec('ppsfl_chk','ppsf',0)")
:: Sprawdzam czy istenieje już zapis dla danego roku:
|| {? exec('is_pzd01','ppsf')
   || PPSFL.add()
   || PPSFL.cntx_psh();
      _jest:=PPSFL.find_key(exec('firma','ustawienia'),{? exec('is_pzd01','ppsf') || PPSFL.PPSFR || PPSFL.SLO_KOD ?},
                            PPSFL.P,PPSFL.R);
      PPSFL.cntx_pop();
      {? _jest
      || FUN.emsg('Nie dołączono zapisu.\nIstnieje limit w %1 roku.'@[$PPSFL.R])
      || PPSFL.add()
      ?}
   ?}
?};
PPSFL.cntx_pop();
{? PPSFL.f_active()
|| PPSFL.f_rfresh()
?};
~~


\ppsfl_sl_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Formuła na wartość początkową pola SL tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'D'


\ppsfl_sl_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Formuła "Po redagowaniu" pola SL tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfl_efld_opt','ppsf',1,PPSFL,,,'SL');
1


\ppsfl_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli PPSFN. Wykorzystywana zarówno przez
::       jTerma jak i webTerma.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr istotny dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(PPSFL)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld='' | _fld='SL'
|| _sval:=(PPSFL.SL='D');
   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1' [$_sval],_TAB,'L');
   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1' [$(~_sval)],EDIT_VAR,'PPSFL_LG')
::   {? PPSFL.SL='D'
::   || PPSFT.cntx_psh();
::      PPSFT.prefix();
::      _set(_TAB,_we,_grp_ident,'editable=%1' [$(PPSFL.PPSFT().PARTDAY<>'N')],_TAB,'SL');
::      PPSFT.cntx_pop()
::   ?}
?};

{? _fld=''
|| _sval:=(-menu_txt()='popraw');
   _set(_TAB,_we,_grp_ident,'mark=%1,editable=%1' [$(~_sval)],_TAB,'R');
   {? _we='RED'
   || _set(_TAB,_we,_grp_ident,'mark=%1,editable=%1' [$(~_sval)],_TAB,
           {? exec('is_pzd01','ppsf') || 'PPSFR' || 'SLO_KOD' ?})
   ?}
?};

1


\ppsfl_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa wyzwalacza "Dołącz - przed" tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_chk:=exec('ppsfl_chk','ppsf',0);
{? type_of(_chk)=type_of('')
|| _ret:=(_chk='')
|? type_of(_chk)=type_of(0)
|| _ret:=_chk
?};
_ret


\ppsfl_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa wyzwalacza "Popraw - przed" tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_chk:=exec('ppsfl_chk','ppsf',1);
{? type_of(_chk)=type_of('')
|| _ret:=(_chk='')
|? type_of(_chk)=type_of(0)
|| _ret:=_chk
?};
_ret


\ppsfl_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa wyzwalaczy "Dołącz - przed" oraz "Popraw - przed" tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Wyzerowanie pola niezgodnego ze sposobem limitowania:
{? PPSFL.SL='D'
|| PPSFL.LG:=time(0,0,0)
|| PPSFL.L:=0
?};

1


\ppsfl_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PPSFL.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::       [_b] [NUMBER] - Pomiń sprawdzanie unikalności kluczy [0*/1].
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
_nondx:=var_pres('_b')=type_of(0) & _b;
_ret:='';

exec('ppsfl_modb','ppsf');

{? exec('is_pzd01','ppsf')
|| {? _nondx
   || _ret:=__CHK.record(PPSFL,,'FIRMA','PPSFR','R')
   || _chk:=__CHK.table(PPSFL,_put,,'FIRMA','PPSFR','R');
      {? type_of(_chk)=type_of('') & _chk<>''
::    Wypełnienie wymaganych pól
      || return(_chk)
      |? type_of(_chk)=type_of(0) & ~_chk
::    Unikalność danych
      || return(0)
      ?}
   ?}
|| _ret:=__CHK.record2(PPSFL,'SLO_KOD','Rodzaj typu pracy'@,'R','Rok'@)
?};
{? _ret='' & ~__CHK.in_set(PPSFL,'SL',,'D','G','H')
|| return(0)
?};
{? _ret=''
|| {? PPSFL.L<0
   || __CHK.err_incorrect('Limit'@,'Limit nie może być ujemny'@);
      _ret:='L'
   |? *PPSFL.LG<0
   || __CHK.err_incorrect('Limit godzin'@,'Limit godzin nie może być ujemny'@);
      _ret:='LG'
   |? PPSFL.R<1900 | PPSFL.R>9999
   || __CHK.err_incorrect('Rok'@,'Rok może przyjmować wartości z zakresu 1900-9999'@);
      _ret:='R'
   |? PPSFL.SL='H' & PPSFL.LG>time(24,0,0)
   ||  __CHK.err_incorrect('Limit godzin'@,'Limit godzin w dniu nie może przekroczyć 24 godzin.'@);
      _ret:='SL'
   ?}
?};

_ret


\limit_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Pobranie podstawowej informacji o limicie pracownika na dany rok.
::UWAGA: Nie jest sprawdzana poprawność argumentów wejściowych.
::   WE: _a [_P] - wskazanie na pracownika (P.ref)
::       _b [_PPSFR] - wskazanie na typ pracy (PPSFR.ref)
::       _c [INTEGER] - rok sprawdzenia
::      [_d][INTEGER]- 0*/1 Pomijać limity domyślne (czy źródłem danych mają być wyłącznie limity indywidualne)?
::   WY: _lim [OBJ] - tablica elementów nazwanych
::             ok   [INTEGER] - Czy znaleziono limit [-1 nie znaleziono limitu, 1 znaleziono limit]
::             sl   [STRING]  - sposób limitowania [D/G/H]
::             dni  [REAL]    - liczba dni limitu
::             godz [TIME]    - liczba godzin limitu
::             dom  [INTEGER] - 0/1 Czy limit domyślny? [1-domyślny, 0-indywidualny]
::----------------------------------------------------------------------------------------------------------------------
_prac:=_a;
_typ:=_b;
_rok:=_c;
_tylko_indywidualne:=var_pres('_d')=type_of(0) & _d;

_limit:=0;
P.cntx_psh();
P.prefix();
{? P.seek(_prac,,1)
|| _firma:=P.FIRMA
|| _firma:=exec('firma','ustawienia')
?};
P.cntx_pop();

_lim:=obj_new('ok','sl','dni','godz','dom');
_lim.ok:=_lim.dom:=1;
_lim.sl:='';
_lim.dni:=0;
_lim.godz:=time(0,0,0);

PPSFL.cntx_psh();
PPSFL.index('UNIQUE');
PPSFL.prefix(_firma,_typ,_prac,_rok);
:: Sprawdzam czy na dany rok jest wpis dla dango pracownika:
{? PPSFL.first()
|| _lim.sl:=PPSFL.SL;
   _lim.dni:=PPSFL.L;
   _lim.godz:=PPSFL.LG;
   _lim.dom:=0
|? _tylko_indywidualne=0
:: Jeśli brak limitu dla konkretnego pracownika, sprawdzam czy jest limit domyślny dla danego typu pracy:
|| PPSFL.prefix(_firma,_typ,null(),_rok);
   {? PPSFL.first()
   || _lim.sl:=PPSFL.SL;
      _lim.dni:=PPSFL.L;
      _lim.godz:=PPSFL.LG
:: Nie ustalono limitów:
   || _lim.ok:=-1
   ?}
?};
PPSFL.cntx_pop();

_lim


\ppsfn_daytime_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Po redagowaniu" tabeli PPSFN pola DAYTIME
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfn_efld_opt','ppsf',1,PPSFN,'RED',,'DAYTIME');
1


\ppsfp_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Suma godzin w dniu
::   WE: _a [INT] - rok
::       _b [INT] - Miesiąc
::       _c [string] - rodzaj badania
::          'SLG' - Suma liczby godzin - poza siedzibą na część dnia
::          'DSLG' - Suma liczby godzin - poza siedzibą na cały dzień
::          'SLGKK' - Tabela z liczbą godzin i kontem kosztów - poza siedzibą na część dnia
::          'DSLGKK' - Tabela z liczbą godzin i kontem kosztów - poza siedzibą na cały dzień -
::      [_d] [DATE] - data badania - opcjonalnie
::      [_e] - tabela wyniku
::   WY: liczba godzin [time] lub tabela z sumą godzin dla konta kosztów
::       tabelka będzie miała pola G (INTEGER),KK (STRING[50]),RODZAJ (STRING[1])
::----------------------------------------------------------------------------------------------------------------------
_Rok:=_a;
_Msc:=_b;
_typ:=_c;
_data:={? var_pres('_d')=type_of(date) || _d || #0 ?};
_praca:=*0;
_ppsf:=exec('is_pzd01','ppsf');
__KAL.set_cal(P.KAL,_Rok);
PPSFN.cntx_psh();
PPSFP.cntx_psh();
{? _typ='SLG' | _typ='DSLG'
|| PPSFP.index('PRMPO');
   PPSFP.prefix(exec('firma','ustawienia'),P.ref(),_Rok,_Msc,{? _typ='SLG' || 'T' || 'N' ?});
   {? PPSFP.first()
   || _ok:=1;
      {!
      |? {? _data>#0
         || {? PPSFP.OD<=_data & PPSFP.DO>=_data & __KAL.get_day(_data) & KAL_DEF.TYP='R'
            || {? _typ='SLG'
               || _praca+=PPSFP.PPSFN().G
               || _praca+=KAL_DEF.CZAS;
                  _ok:=0
               ?}
            ?}
         || _praca+=PPSFP.G
         ?};
         _ok & PPSFP.next()
      !}
   ?}
|? _typ='SLGKK' | _typ='DSLGKK'
|| PPSFP.index('PRMPO');
   PPSFP.prefix(exec('firma','ustawienia'),P.ref(),_Rok,_Msc,{? _typ='SLGKK' || 'T' || 'N' ?});
   _tab:=_e;
   {? PPSFP.first()
   || _ok:=1;
      {!
      |? {? _data>#0
         || {? PPSFP.OD<=_data & PPSFP.DO>=_data & __KAL.get_day(_data) & KAL_DEF.TYP='R'
            || {? _typ='SLGKK'
               || _tab.G:=(*PPSFP.PPSFN().G)$2
               || _tab.G:=(*KAL_DEF.CZAS)$2;
                  _ok:=0
               ?};
               _tab.KK:=$PPSFP.KK;
               _tab.RODZAJ:=PPSFP.PPSFN().PPSFT().GEN_G;
               _tab.TYP:=$PPSFP.PPSFN().PPSFT;
               _tab.RN:={? _ppsf || PPSFT.R().RN ?};
               _tab.SKL_RCP:=PPSFP.PPSFN().PPSFT().SKL_RCP;
               _tab.add()
            ?}
         || {? _typ='DSLGKK'
            || _ok:=0
            ?};
            _tab.G:=(*PPSFP.G)$2;
            _tab.KK:=$PPSFP.KK;
            _tab.TYP:=$PPSFP.PPSFN().PPSFT;
            _tab.RODZAJ:=PPSFP.PPSFN().PPSFT().GEN_G;
            _tab.RN:={? _ppsf || PPSFT.R().RN ?};
            _tab.SKL_RCP:=PPSFP.PPSFN().PPSFT().SKL_RCP;
            _tab.add()
         ?};
         _ok & PPSFP.next()
      !}
   || _praca:=_tab
   ?}
?};
PPSFN.cntx_pop();
PPSFP.cntx_pop();
_praca


\ppsfn_limit_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa akcji "Stan limitu" okienka WER tabeli PPSFN
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;

:: Najpierw sprawdzamy czy limitowanie danego typu jest godzinowe czy dzienne:
_sl:=exec('limit_sl','ppsf',
   {? exec('is_pzd01','ppsf') || PPSFN.PPSFT().PPSFR || PPSFN.PPSFT().SLO_KOD ?},PPSFN.OD~1,PPSFN.P);

_LIM:=exec('ppsfn_limit_dane','ppsf',_sl);

:: Jeśli mamy jakieś informacje, wyświetlamy:
{? _ok & _LIM.size()
|| PPSFT.cntx_psh();
   {? exec('is_pzd01','ppsf')
   || PPSFR.cntx_psh();
      P.cntx_psh();
      OSOBA.cntx_psh();
      _tytul:='Limit typu %1 - %2 %3'@[PPSFN.PPSFT().PPSFR().NAZWA,PPSFN.P().OSOBA().PIERWSZE,OSOBA.NAZWISKO];
      OSOBA.cntx_pop();
      P.cntx_pop();
      PPSFR.cntx_pop()
   || SLO_KOD.cntx_psh();
      P.cntx_psh();
      OSOBA.cntx_psh();
      _tytul:='Limit typu %1 - %2 %3'@[PPSFN.PPSFT().SLO_KOD().NAZWA,PPSFN.P().OSOBA().PIERWSZE,OSOBA.NAZWISKO];
      OSOBA.cntx_pop();
      P.cntx_pop();
      SLO_KOD.cntx_pop()
   ?};
   PPSFT.cntx_pop();
   _ind:=_LIM.ndx_tmp(,1,'ROK',,{? PAR_SKID.get(236)='T' || 1 || 0 ?});
   _LIM.index(_ind);
   _LIM.find_key(date()~1);
   _ws:=_LIM.mk_sel(_tytul,,0,'#limit',,,5);
   _LIM.win_fld(_ws,_LIM,'ROK',,,10,,,'Rok'@,,'Rok kalendarzowy'@);
   _LIM.win_fld(_ws,_LIM,'RDL',,,15,,,'Rodzaj limitu'@,,'Rodzaj limitu'@);
   _LIM.win_fld(_ws,_LIM,'LIM',,,10,,,{? _sl='D' || 'Limit dni'@ || 'Limit godzin'@ ?},,
                {? _sl='D' || 'Limit dni roboczych'@ || 'Limit godzin roboczych'@ ?});
   {? 'DG'*_sl
   || _LIM.win_fld(_ws,_LIM,'WYK',,,10,,,'Wykorzystane'@,,'Wykorzystany limit'@);
      _LIM.win_fld(_ws,_LIM,'POZ',,,10,,,'Pozostało'@,,'Pozostały limit'@)
   ?};
   _LIM.win_fld(_ws,_LIM,'SPL',,,20,,,'Sposób limitowania'@,,'Sposób limitowania'@);
   _LIM.win_sel(_ws);
   _LIM.select(,1);
   _LIM.ndx_drop()
|| FUN.info('Brak ustalonych limitów.'@)
?};

~~


\limit_sl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Pobranie informacji o sposobie limitowania (godzinowo/dziennie) danego typu pracy.
::   WE: _a [_PPSFR] - wskazanie na rodzaj pracy (PPSFR.ref)
::      [_b][INTEGER]- rok, domyślnie bieżący rok date()~1
::      [_c][_P]     - wskazanie pracownika, domyślnie P.ref()
::   WY: _sl [STRING]  - sposób limitowania [D/G/H], pusty ciąg jeśli nie znaleziono limitu
::----------------------------------------------------------------------------------------------------------------------
_sl:='';
{? var_pres('_a')<>type_of(null()) | _a=null() | ref_tab(_a)<>PPSFR
|| FUN.error('Błąd parametrów wejściowych!'@);
   return(_sl)
?};
_rodzaj:=_a;
_rok:={? var_pres('_b')=type_of(0) || _b || date()~1 ?};
_prac:={? var_pres('_c')=type_of(null()) & _c<>null() & ref_tab(_c)=P || _c || P.ref() ?};
_firma:=exec('firma','ustawienia');

PPSFL.cntx_psh();
PPSFL.index('UNIQUE');
PPSFL.prefix(_firma,_rodzaj,_prac,_rok);
{? PPSFL.first()
|| _sl:=PPSFL.SL
:: Jeśli nie znalazłem indywidualnego limitu szukam limitu domyślnego:
|| PPSFL.prefix(_firma,_rodzaj,null(),_rok);
   {? PPSFL.first()
   || _sl:=PPSFL.SL
   ?}
?};
PPSFL.cntx_pop();

_sl


\wydr_p_dt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Zwraca ciąg znaków w typami pracy poz siedzibą jakie pracownik posiada w kartotece danego dnia.
::       Używane do wydruków.
::   WE: _a [_P]   - wskazanie na pracownika
::       _b [DATE] - data sprawdzania
::   WY: _ret [STRING] - ciąg znaków z typami pracy w danym dniu (po przecinkach jeśli więcej niż 1), '' jeśli brak
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>7 | var_pres('_b')<>type_of(date())
|| FUN.error('Błąd argumentu wejściowego.'@);
   return('')
?};
_prac:=_a;
_data:=_b;
_ret:=_cale:=_czesc:='';

PPSFT.cntx_psh();
PPSFT.prefix();
PPSFN.cntx_psh();
PPSFN.prefix();
:: Szukam nagłówków pracownika obejmujących podaną datę:
PPSFN.f_set(,,
   'PPSFN.FIRMA=:_a and PPSFN.P=:_b and PPSFN.OD<=to_date(:_c) and PPSFN.DO>=to_date(:_c)',
   exec('firma','ustawienia'),_prac,_data);

{? PPSFN.f_first()
|| {!
   |? _typ:=PPSFN.PPSFT().OPIS;
::    Skrócenie do 26 znaków:
      {? +_typ>26
      || _typ:='%1...'[23+_typ]
      ?};
      {? PPSFN.PARTDAY='T'
      || _czesc+='%1 [%2], '[_typ,PPSFN.G$1]
      |? ~+_czesc
      || _cale+='%1, '[_typ]
      ?};

      PPSFN.f_next()
   !}
?};
PPSFN.f_clear();
PPSFN.cntx_pop();
PPSFT.cntx_pop();
:: Jeśli występują częściowe - wykazuję tylko takie:
{? +_czesc
|| _ret:=_czesc-2
|| _ret:=_cale-2
?};

_ret


\ppsfn_g_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa akcji "Po redagowaniu" pola G tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPSFN.G~3<>0
|| FUN.info('Rejestracja sekund nie jest możliwa.'@);
   PPSFN.G:=time(PPSFN.G~1,PPSFN.G~2,0)
?};
1


\czas_rap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Zwraca czas pracy poza siedzibą danego dnia.
::       Używane do wydruków.
::   WE: _a [DATE] - data sprawdzania
::   WY: _czas [TIME] - czas pracy poza siedzibą w danym dniu
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(date())
|| FUN.error('Błąd argumentu wejściowego.'@);
   return('')
?};
_data:=_a;
_t0:=time(0,0,0);

_czas:=exec('ppsfp_info','ppsf',_data~1,_data~2,'SLG',_data,0);
{? _czas=_t0
|| _czas:=exec('ppsfp_info','ppsf',_data~1,_data~2,'DSLG',_data,0)
?};

_czas


\wydr_p_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Zwraca ciąg znaków w typami pracy poz siedzibą jakie pracownik posiada w kartotece w danym miesiącu.
::       Używane do wydruków.
::   WE: _a [_P]   - wskazanie na pracownika
::       _b [INTEGER] - rok sprawdzania
::       _c [INTEGER] - miesiąc sprawdzania
::   WY: _ret [STRING] - ciąg znaków z typami pracy w danym miesiącu (po przecinkach jeśli więcej niż 1), '' jeśli brak
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>7 | var_pres('_b')<>type_of(0) | var_pres('_c')<>type_of(0)
|| FUN.error('Błąd argumentu wejściowego.'@);
   return('')
?};
_prac:=_a;
_rok:=_b;
_msc:=_c;
_ret:='';

:: Początek i koniec miesiąca:
_pocz:=date(_rok,_msc,1);
_koni:=date(_rok,_msc,0);

:: Szukam nagłówków pracownika trwających w podanym miesiącu:
_query:=
   'select '
      'PPSFN.OD as OD, '
      'PPSFN.DO as DO, '
      'PPSFN.PARTDAY as PARTDAY, '
      'PPSFN.G as G, '
      'PPSFT.REFERENCE as TYPREF, '
      'PPSFT.OPIS as TYPOPIS '
   'from PPSFN join PPSFT using (PPSFN.PPSFT, PPSFT.REFERENCE) '
   'where PPSFN.FIRMA=:_a and PPSFN.P=:_b and PPSFN.OD<=to_date(:_c) and PPSFN.DO>=to_date(:_d) '
   'order by PARTDAY, TYPREF';
_NAGS:=sql(_query,exec('firma','ustawienia'),_prac,_koni,_pocz);
{? _NAGS.first()
|| _czas:=_t0:=time(0,0,0);
   {!
   |? _dodaj:=0;
::    Dla nagłowka na część dnia sumujemy liczbę godzin z dni:
      {? _NAGS.PARTDAY='T'
      || _data:={? _NAGS.OD>=_pocz || _NAGS.OD || _pocz ?};
         _cut:={? _NAGS.DO<=_koni || _NAGS.DO || _koni ?};
         {!
         |? _czas+=exec('ppsfp_info','ppsf',_rok,_msc,'SLG',_data,0);
            _data+=1;

            _data<=_cut
         !}
      ?};
      _typref:=_NAGS.TYPREF;
::    Jeśli kolejny rekord jest już innego typu (tabela jest sortowana po typach) lub nie ma następnego - dodaj wpis:
      {? _NAGS.next()
      || {? _typref<>_NAGS.TYPREF
         || _dodaj:=1
         ?};
         _NAGS.prev()
      || _dodaj:=1
      ?};
      {? _dodaj
      || _typ:=_NAGS.TYPOPIS;
::       Skrócenie do 26 znaków:
         {? +_typ>26
         || _typ:='%1...'[23+_typ]
         ?};
         {? _czas<>_t0
         || _ret+='%1 [%2], '[_typ,_czas$1];
            _czas:=_t0
         || _ret+='%1, '[_typ]
         ?}
      ?};

      _NAGS.next()
   !}
?};

_ret-2


\ppsf_wnio_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Pobranie listy wniosków i nagłówków pracowników w badanym zakresie.
::   WE: [_a] [DATE] - data początku okresu, domyślnie początek bieżącego miesiąca
::       [_b] [DATE] - data końca okresu, domyślnie koniec bieżącego miesiąca
::   WY: _NAGS [TABLE] - tabela z danymi niezaakcepowanych wniosków oraz wprowadzonych nagłówków pracy zdalnej
::                       w podanym okresie. Zawiera pola:
::                         REF     [STRING] - wskazanie na EDOKUM lub PPSFN (w zależności od tego skąd pochodzi zapis),
::                         PRAC    [STRING] - wskazanie pracownika,
::                         TYP     [STRING] - wskazanie na PPSFT,
::                         OD      [DATE]   - data od wniosku/nagłówka,
::                         DO      [DATE]   - data do wniosku/nagłówka,
::                         PARTDAY [STRING] - T/N znacznik czy praca na część dnia,
::                         G       [TIME]   - godziny robocze (dla pracy na część dnia),
::                         KK      [STRING] - wskazanie konta kosztów (jeśli podano),
::                         AKC     [STRING] - T/N znacznik czy zaakcepotowano oświadczenie.
::----------------------------------------------------------------------------------------------------------------------
_dtOd:={? var_pres('_a')=type_of(date()) || _a || date(,,1) ?};
_dtDo:={? var_pres('_b')=type_of(_dtOd) || _b || date(,,0) ?};
_query:=
   'select EDOKUM.REFERENCE as REF, '
      'max(case TAT.NA when \'ET_PRAC\' then EDOK_ATR.REF_SQL end) as PRAC, '
      'max(case TAT.NA when \'PPSF_TYP\' then EDOK_ATR.REF_SQL end) as TYP, '
      'max(case TAT.NA when \'PPSF_OD\' then to_date(EDOK_ATR.WAR) end) as OD, '
      'max(case TAT.NA when \'PPSF_DO\' then to_date(EDOK_ATR.WAR) end) as DO, '
      'max(case TAT.NA when \'PPSF_PARTDAY\' then substring(EDOK_ATR.WAR from 1 for 1) end) as PARTDAY, '
      'max(case TAT.NA when \'PPSF_G\' then to_time(EDOK_ATR.WAR) end) as G, '
      'max(case TAT.NA when \'PPSF_KK\' then EDOK_ATR.REF_SQL end) as KK, '
      'max(case TAT.NA when \'PPSF_AKC\' then substring(EDOK_ATR.WAR from 1 for 1) end) as AKC '
   'from @EDOKUM '
   'join ETYPY using(EDOKUM.TYP, ETYPY.REFERENCE) '
   'join TYPOBIEG using(ETYPY.TYPOBIEG, TYPOBIEG.REFERENCE) '
   'join @EDOKOS using(EDOKUM.REFERENCE, EDOKOS.EDOKUM) '
   'join @EDOK_ATR using(EDOKUM.REFERENCE, EDOK_ATR.EDOKUM) '
   'join TAT using(EDOK_ATR.TAT, TAT.REFERENCE) '

   'where EDOKUM.FIRMA=:_a '
      'and TYPOBIEG.NAZWA=\'Obieg wniosków\' '
      'and (ETYPY.NAZWA=\':_d\' or ETYPY.NAZWA=\':_e\') '
      'and ETYPY.W_PORTAL<>\'T\' '
      'and EDOKOS.OPERACJA=\'A\' and EDOKOS.STATUS=\'N\' '
      'and EDOKUM.REFERENCE in '
         '(select EDOK_ATR.EDOKUM from @EDOK_ATR '
          'join TAT using(EDOK_ATR.TAT, TAT.REFERENCE) '
          'where TAT.NA=\'PPSF_DO\' and to_date(EDOK_ATR.WAR)>=to_date(:_b) '
         ') '
      'and EDOKUM.REFERENCE in '
         '(select EDOK_ATR.EDOKUM from @EDOK_ATR '
          'join TAT using(EDOK_ATR.TAT, TAT.REFERENCE) '
          'where TAT.NA=\'PPSF_OD\' and to_date(EDOK_ATR.WAR)<=to_date(:_c) '
         ') '
   'group by EDOKUM.REFERENCE '
   'order by PRAC, TYP '

   'union '
   '(select PPSFN.REFERENCE as REF, '
       'PPSFN.P as PRAC, '
       'PPSFN.PPSFT as TYP, '
       'PPSFN.OD as OD, '
       'PPSFN.DO as DO, '
       'PPSFN.PARTDAY as PARTDAY, '
       'PPSFN.G as G, '
       'PPSFN.KK as KK, '
       'PPSFN.OSW_AKC as AKC '
    'from PPSFN '
    'where PPSFN.FIRMA=:_a and PPSFN.OD<=to_date(:_c) and PPSFN.DO>=to_date(:_b) '
    'order by PRAC, TYP '
   ') ';
_NAGS:=sql(_query,exec('firma','ustawienia'),_dtOd,_dtDo,
   'Wniosek o pracę poza siedzibą firmy','Polecenie pracy poza siedzibą firmy');

_NAGS


\ppsf_p_wyd_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Geneeruje tabelę z danymi do wydruku pracy poza siedzibą firmy (wg. pracowników)
::   WE: [_a] [DATE] - data początku okresu, domyślnie początek bieżącego miesiąca
::       [_b] [DATE] - data końca okresu, domyślnie koniec bieżącego miesiąca
::   WY: _TAB [TABLE] - tabela z danymi pracowników dot. pracy zdalnej. Pola:
::                         NAZ [STRING] - Nazwisko,
::                         PIE [STRING] - Imię,
::                         NRT [STRING] - Numer teczki,
::                         STN [STRING] - Stanowisko,
::                         WYD [STRING] - Jednostka organizacyjna,
::                         DWZ [INTEGER]- Całodniowe - liczba dni - wnioski zaakceptowane,
::                         DWN [INTEGER]- Całodniowe - liczba dni - wnioski niezaakceptowane,
::                         DRE [INTEGER]- Całodniowe - liczba dni - wprowadzone ręcznie,
::                         DTY [STRING] - Całodniowe - typy występujące w okresie,
::                         GWZ [TIME]   - Na część dnia - liczba godzin - wnioski zaakceptowane,
::                         GWN [TIME]   - Na część dnia - liczba godzin - wnioski niezaakceptowane,
::                         GRE [TIME]   - Na część dnia - liczba godzin - wprowadzone ręcznie,
::                         GTY [STRING] - Na część dnia - typy występujące w okresie,
::----------------------------------------------------------------------------------------------------------------------
_dtOd:={? var_pres('_a')=type_of(date()) || _a || date(,,1) ?};
_dtDo:={? var_pres('_b')=type_of(_dtOd) || _b || date(,,0) ?};

_TAB:=tab_tmp(1,
   'NAZ','STRING[%1]'[$MS.fld_len('OSOBA','NAZWISKO')],'Nazwisko',
   'PIE','STRING[%1]'[$MS.fld_len('OSOBA','PIERWSZE')],'Imię',
   'NRT','STRING[%1]'[$MS.fld_len('P','T')],'Teczka',
   'STN','STRING[%1]'[$MS.fld_len('STN','ST')],'Stanowisko',
   'WYD','STRING[%1]'[$MS.fld_len('UD_SKL','SYMBOL')],'Wydział',
   'DWZ','INTEGER','Wnioski zaak. (dni)',
   'DWN','INTEGER','Wnioski niezaak. (dni)',
   'DRE','INTEGER','Wprow. ręcznie (dni)',
   'DTY','STRING[255]','Typy (dni)',
   'GWZ','TIME','Wnioski zaak. (godz.)',
   'GWN','TIME','Wnioski niezaak. (godz.)',
   'GRE','TIME','Wprow. ręcznie (godz.)',
   'GTY','STRING[255]','Typy (godz)'
   );

_NAGS:=exec('ppsf_wnio_nag','ppsf',_dtOd,_dtDo);

{? _NAGS.first()
|| _add:="
      _TAB:=_a;
      _bPrac:=_b;
      P.cntx_psh();
      P.prefix();
      OSOBA.cntx_psh();
      OSOBA.prefix();
      STN.cntx_psh();
      STN.prefix();
      UD_SKL.cntx_psh();
      UD_SKL.prefix();
      {? P.seek(_bPrac)
      || _TAB.NAZ:=P.OSOBA().NAZWISKO;
         _TAB.PIE:=OSOBA.PIERWSZE;
         _TAB.NRT:=P.T;
         _TAB.STN:=P.ST().ST;
         _TAB.WYD:=P.WYDZIAL().SYMBOL
      ?};
      UD_SKL.cntx_pop();
      STN.cntx_pop();
      OSOBA.cntx_pop();
      P.cntx_pop();
      {? +_TAB.DTY
      || _TAB.DTY:=_TAB.DTY-2
      ?};
      {? +_TAB.GTY
      || _TAB.GTY:=_TAB.GTY-2
      ?};
      _TAB.add()
      ";

_setKal:="
      _prac:=_a;
      _rok:=_b;
      P.cntx_psh();
      P.prefix();
      {? P.seek(_prac)
      || {? P.KAL
         || __KAL.set_cal(P.KAL,_rok)
         || __KAL.set_cal('standard',_rok)
         ?}
      ?};
      P.cntx_pop()
      ";
:: Przechowanie bierzącego pracownika i typu (w celu wychwycenia momentu zmiany):
   _bPrac:=_NAGS.PRAC;
   _bTyp:='';
   _typ:='';
   exec('__KAL','object');
   _setKal(_bPrac,{? _NAGS.OD>_dtOd || _NAGS.OD~1 || _dtOd~1 ?});
   {!
::    Wykryto przeskoczenie na kolejnego pracownika. Dodaję co udało się zebrać na poprzedniego i czyszczę bufor:
   |? {? _bPrac<>_NAGS.PRAC
      || _add(_TAB,_bPrac);
         _TAB.blank();
         _bPrac:=_NAGS.PRAC;
         _bTyp:='';
         _setKal(_bPrac,{? _NAGS.OD>_dtOd || _NAGS.OD~1 || _dtOd~1 ?})
      ?};
::    Wykryto przeskoczenie na kolejny typ (w ramach pracownika, lub pierwszy po zmianie pracownika):
      {? _bTyp<>_NAGS.TYP
      || _bTyp:=_NAGS.TYP;
         PPSFT.cntx_psh();
         PPSFT.prefix();
         {? PPSFT.seek(_NAGS.TYP)
         || _typ:=PPSFT.OPIS
         ?};
         PPSFT.cntx_pop();
::       Skrócenie do 26 znaków:
         {? +_typ>26
         || _typ:='%1...'[23+_typ]
         ?};
         {? _NAGS.PARTDAY='T'
         || _TAB.GTY+='%1, '[_typ]
         || _TAB.DTY+='%1, '[_typ]
         ?}
      ?};
::    Liczba dni roboczych naszego rekordu, w zadanym okresie:
      _dniRob:=__KAL.w_days({? _NAGS.OD>_dtOd || _NAGS.OD || _dtOd ?},{? _NAGS.DO<_dtDo || _NAGS.DO || _dtDo ?});
::    Sprawdzamy do której "statystyki" zaliczyć nasz rekord:
      {? _NAGS.PARTDAY='T'
      || {? _NAGS.REF*'ppsfn'
         || PPSFN.cntx_psh();
            PPSFN.prefix();
            {? PPSFN.seek(_NAGS.REF)
            || {? PPSFN.AZ='W'
               || _TAB.GWZ+=exec('time_multi','#datetime',_NAGS.G,_dniRob)
               || _TAB.GRE+=exec('time_multi','#datetime',_NAGS.G,_dniRob)
               ?}
            ?};
            PPSFN.cntx_pop()
         || _TAB.GWN+=exec('time_multi','#datetime',_NAGS.G,_dniRob)
         ?}
      || {? _NAGS.REF*'ppsfn'
         || PPSFN.cntx_psh();
            PPSFN.prefix();
            {? PPSFN.seek(_NAGS.REF)
            || {? PPSFN.AZ='W'
               || _TAB.DWZ+=_dniRob
               || _TAB.DRE+=_dniRob
               ?}
            ?};
            PPSFN.cntx_pop()
         || _TAB.DWN+=_dniRob
         ?}
      ?};

      _NAGS.next()
   !};
:: Dodanie ostatniego:
   _add(_TAB,_bPrac)
?};

_TAB


\ppsfl_wer_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Akcja "Popraw" w oknie WER tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfl_efld_opt','ppsf','*',PPSFL,'REDD');
{? PPSFL.edit("exec('ppsfl_chk','ppsf',1)")
|| PPSFL.put()
?};
~~


\ppsfl_slo_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Akcja "Dołącz" w oknie SLO tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_pzd01','ppsf') & PPSFR.LIMITY='N'
|| FUN.info('Rodzaj ma wyłączone limitowanie. Dołączanie nie dostępne.'@);
   return(~~)
?};
PPSFT.cntx_psh();
PPSFT.win_sel('SLOG');
PPSFL.cntx_psh();
PPSFL.index('UNIQUE');
PPSFL.prefix();
PPSFL.blank();
:: Jeśli typ jest całodzienny, to nie ma możliwośći rejestrować limitu w godzinach:
{? PPSFT.PARTDAY<>'T'
|| PPSFL.SL:='D'
?};
exec('ppsfl_efld_opt','ppsf','*',PPSFL,'RED');
{? exec('is_pzd01','ppsf')
|| PPSFL.PPSFR:=PPSFR.ref()
|| PPSFL.SLO_KOD:=SLO_KOD.ref()
?};
PPSFL.P:=P.ref();
{? PPSFL.edit("exec('ppsfl_chk','ppsf')")
:: Sprawdzam czy istenieje już zapis dla danego roku:
|| PPSFL.cntx_psh();
   _jest:=PPSFL.find_key(exec('firma','ustawienia'),{? exec('is_pzd01','ppsf') || PPSFL.PPSFR || PPSFL.SLO_KOD ?},
                         PPSFL.P,PPSFL.R);
   PPSFL.cntx_pop();
   {? _jest
   || FUN.emsg('Nie dołączono zapisu.\nIstnieje limit w %1 roku.'@[$PPSFL.R])
   || PPSFL.add()
   ?}
?};
PPSFL.cntx_pop();
PPSFT.cntx_pop();
{? PPSFL.f_active()
|| PPSFL.f_rfresh()
?};
~~


\ppsfl_slo_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Akcja "Popraw" w oknie SLO tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfl_efld_opt','ppsf','*',PPSFL,'RED');
{? PPSFL.edit("exec('ppsfl_chk','ppsf',1)")
|| PPSFL.put()
?};
~~


\ppsfn_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Dołącz - przed" tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ws:=cur_win(1,1);
{? _ws='WER'
|| PPSFN.blank();
   exec('ppsfn_efld_opt','ppsf','*',PPSFN,'RED');
   PPSFT.memo_set(,'OSW_TRE');
   {? PPSFT.f_active()
   || PPSFT.f_rfresh()
   ?};
   {? PPSFN.edit("exec('ppsfn_ae','ppsf')")
   || PPSFN.D:=date();
      {? PPSFN.PARTDAY='N'
      || PPSFN.DAYTIME:='X';
         PPSFN.GOD:=time(0,0,0);
         PPSFN.G:=time(0,0,0)
      |? PPSFN.DAYTIME<>'O'
      || PPSFN.GOD:=time(0,0,0)
      ?};
      PPSFN.DK:=PPSFN.DO-PPSFN.OD+1;
      PPSFN.OSOBA:=P.OSOBA;
      PPSFN.CREATOR:=PPSFN.P;
      PPSFN.AD:=date();
      PPSFN.AZ:='R';
      PPSFN.add()
   ?}
?};
{? PPSFN.f_active()
|| PPSFN.f_rfresh()
?}


\ppsfn_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Akcja "Popraw - przed" dla tabeli PPSFN okno WER
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfn_efld_opt','ppsf','*',PPSFN,'RED');
VAR_DEL.delete('__fromPrev','__toPrev','__partdayPrev','__workhoursPrev','__kkPrev','__rpPrev');
__fromPrev:=PPSFN.OD;
__toPrev:=PPSFN.DO;
__partdayPrev:=PPSFN.PARTDAY;
__workhoursPrev:=PPSFN.G;
__kkPrev:=PPSFN.KK;
__rpPrev:=PPSFN.PPSFT;
{? PPSFN.PPSFT<>null
|| PPSFN.PPSFT().memo_get(,'OSW_TRE')
?};
{? PPSFT.f_active()
|| PPSFT.f_rfresh()
?};

{? PPSFN.edit("exec('ppsfn_ae','ppsf','P',__fromPrev,__toPrev,__partdayPrev,__workhoursPrev,__kkPrev,__rpPrev)")
|| {? PPSFN.PARTDAY='N'
   || PPSFN.DAYTIME:='X';
      PPSFN.GOD:=time(0,0,0);
      PPSFN.G:=time(0,0,0)
   |? PPSFN.DAYTIME<>'O'
   || PPSFN.GOD:=time(0,0,0)
   ?};
   {? PPSFN.OD<>__fromPrev | PPSFN.DO<>__toPrev | PPSFN.G<>__workhoursPrev | PPSFN.KK<>__kkPrev
   || exec('ppsfp_pos_management','ppsf','W',0,__fromPrev,__toPrev,__kkPrev)
   ?};
   PPSFN.put()
?};

VAR_DEL.delete('__fromPrev','__toPrev','__partdayPrev','__workhoursPrev','__kkPrev','__rpPrev')


\ppsfn_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Usuń - przed" tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_grupa:=PPSFN.sel_size();
{? _grupa | exec('del_ask','#table')
|| _acc:=1;
   _err:=exec('ppsfn_closure_control','ppsf',PPSFN.P,PPSFN.OD,PPSFN.DO,1);
   {? _err<>''
   || {? _grupa
      || P.cntx_psh();
         P.prefix();
         OSOBA.cntx_psh();
         OSOBA.prefix();
         _sect:=' %1 %2 %3:'[PPSFN.P().OSOBA().NAZWISKO,OSOBA.PIERWSZE,'[nr teczki - %1]'@[form(P.T)]];
         OSOBA.cntx_pop();
         P.cntx_pop();
         {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect,'xwin16.png:100') ?};
         PPSFT.cntx_psh();
         PPSFT.prefix();
         KOMM.add('%1 (%2-%3). %4'[PPSFN.PPSFT().OPIS,$PPSFN.OD,$PPSFN.DO,_err],4);
         PPSFT.cntx_pop();
         KOMM.sect_end();
         {? ~KOMM.empty()
         || KOMM.select()
         ?};
         _acc:=FUN.ask('Czy kontynuować operację?'@)
      || _acc:=FUN.ask(_err+'\n'+'Czy kontynuować operację?'@)
      ?}
   ?};
   {? _acc
   || PPSFP.cntx_psh();
      PPSFP.index('NAG');
      PPSFP.prefix(PPSFN.ref());
      {? PPSFP.first()
      || {! |? PPSFP.del() !}
      ?};
      PPSFP.cntx_pop();
      PPSFN.del();
      exec('ppsfn_bd','ppsf')
   ?}
?}


\ppsfp_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Akcja "Popraw - przed" dla tabeli PPSFP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfp_efld_opt','ppsf','*',PPSFP,'RED');

_control:="
:: Sprawdza, czy miesiąc jest już zamknięty
   _txt:=exec('ppsfn_closure_control','ppsf',PPSFP.P,PPSFP.OD,PPSFP.DO,1);
   {? _txt<>'' & ~FUN.ask(_txt+'\n'+'Czy kontynuować?'@)
   || return('KK')
   ?};
   ''
";

{? PPSFP.edit(_control)
|| PPSFP.put()
?}


\ppsfn_usun_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa akcji grupowej "Usuń - przed" tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('del_ask','#table');
{? _ret
|| exec('KOMM','#object');
   KOMM.init(250,,'Błędy przy usuwaniu pracy poza siedzibą firmy'@)
?};

_ret


\ppsfn_usun_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa akcji grupowej "Usuń - po" tabeli PPSFN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\ppsfl_usun_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa akcji grupowej "Usuń - przed" w operacji grupowej tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('del_ask','#table');
{? _ret
|| exec('KOMM','#object');
   KOMM.init(,,'Usuwanie limitów pracy poza siedzibą firmy'@)
?};

_ret


\ppsfl_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa akcji "Usuń - przed" w operacji grupowej tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_grupa:=P.sel_size();
_cnt:=0;
{? _grupa | exec('del_ask','#table')
|| PPSFL.cntx_psh();
   PPSFL.index('UNIQUE');
   PPSFL.prefix(exec('firma','ustawienia'),{? exec('is_pzd01','ppsf') || PPSFR.ref() || SLO_KOD.ref() ?},P.ref());
   {? PPSFL.first()
   || {!
      |? _cnt+=1;
         PPSFL.del()
      !}
   ?};
   PPSFL.cntx_pop();
   _info:='Liczba usuniętych limitów: %1'[$_cnt];
   {? _grupa
   || OSOBA.cntx_psh();
      OSOBA.prefix();
      _sect:=' %1 %2 %3:'[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,'[nr teczki - %1]'@[form(P.T)]];
      OSOBA.cntx_pop();
      {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect,'xwin16.png:38') ?};
      KOMM.add(_info,13);
      KOMM.sect_end()
   || FUN.info(_info);
      {? P.f_active()
      || P.f_rfresh()
      ?}
   ?}
?}


\ppsfl_usun_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa akcji grupowej "Usuń - po" w operacji grupowej tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~KOMM.empty()
|| KOMM.select()
?};
{? P.f_active()
|| P.f_rfresh()
?}


\ppsfn_legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Legenda" w oknach tabeli PPSFN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PPSFN#01#')


\ppsfp_legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Legenda" w oknach tabeli PPSFP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PPSFP#01#')


\ppsfl_slo_kod_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Wartość początkowa pola PPSFL.SLO_KOD
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SLO_KOD.ref()


\ppsfl_lg_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Przed redagowaniem" oraz "Przed wyświetleniem" pola EDIT_VAR.PPSFL_LG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_f_PPSFL:=$("EDIT_VAR."+cur_afld()+":=('000'+"+"PPSFL.LG$1)+6");
_f_PPSFL()


\ppsfl_lg_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Po redagowaniu" pola EDIT_VAR.PPSFL_LG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
str2time:=
   "  _min:=#(_a+2);
      _a:=_a-3;
      _godz:=#(_a);
      {? _godz>=0 & _min>=0
      || {? _min>0 & _min<60
         || time(_godz,_min,0)
         || time(_godz,0,0)
         ?}
      || time(0,0,0)
      ?}
   ";

STR.split(fld(),':');
_godz:=form(STR.get_word());
_godz:=('000' + _godz)+3;
_min:=form(STR.get_word());
_min:=('00' + _min)+2;
_column:='LG';
_f_PPSFL:=$("PPSFL."+_column+":=str2time(_a)");
_f_EDIT_VAR:=$("EDIT_VAR."+cur_afld()+":=_a");
_afld:=cur_afld();
{? PPSFL.SL='H' & #_godz>24
|| FUN.emsg('Limit godzin w dniu nie może przekroczyć 24 godzin.'@);
   _godz:='000';
   _min:='00';
   _wyn:=0
?};
_f_PPSFL(_godz+':'+_min);
_f_EDIT_VAR(_godz+':'+_min);
_wyn


\ppsfl_l_df
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Format wyświetlania pola PPSFL.L.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'empty=%1'[$(PPSFL.SL<>'D')]


\ppsfl_lg_df
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Format wyświetlania pola PPSFL.LG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'hour_chars=3,empty=%1'[$(PPSFL.SL<>'G' & PPSFL.SL<>'H')]


\ppsfl_lg_ef
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Format redagowania pola PPSFL.LG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'hour_chars=3'


\osw_tre_ln
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Formuła zwraca maksymalną długość oświadczenia
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
200


\ppsfn_wer_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Obsługa akcji "Okienko - przed" dla okienka WER tabeli PPSFN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsfn_bd','ppsf');
{? exec('is_pzd01','ppsf')
|| exec('ppsfn_bo','ppsf')
|| ''
?}


\osw_max_ln
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Formuła zwraca maksymalną długość linii oświadczenia na wniosku
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
75


\ppsfn_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Obsługa akcji "Okienko - przed" dla okienkek SLO i WER tabeli PPSFN.
::   WE:
::   WY:
::  OLD: \ppsfn_slo_bo/ppsf.fml
::----------------------------------------------------------------------------------------------------------------------
_firma:=exec('firma','ustawienia');
_zdst:='ZDALN_ST';
PPSFT.cntx_psh();
PPSFT.prefix();
{? ~PPSFT.f_set('OPIS','join PPSFR','PPSFR.FIRMA=:_a and PPSFR.KOD<>\':_b\'',_firma,_zdst)
|| PPSFT.f_set(,,'0=1')
?};
PPSFROZD.cntx_psh();
PPSFROZD.prefix();
{? ~PPSFROZD.f_set('KOD','join PPSFR','PPSFR.FIRMA=:_a and PPSFR.KOD<>\':_b\'',_firma,_zdst)
|| PPSFROZD.f_set(,,'0=1')
?};
''


\ppsfn_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.37]
:: OPIS: Obsługa akcji "Okienko - po" dla okienkek SLO i WER tabeli PPSFN.
::   WE:
::   WY:
::  OLD: \ppsfn_slo_ao/ppsf.fml
::----------------------------------------------------------------------------------------------------------------------
PPSFROZD.f_clear();
PPSFROZD.cntx_pop();
PPSFT.f_clear();
PPSFT.cntx_pop();
~~


\ppsfl_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Rekord - przed" tabeli PPSFL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:=
   {? PPSFL.SL='D'
   || 'Dni w roku'@
   |? PPSFL.SL='G'
   || 'Godziny w roku'@
   |? PPSFL.SL='H'
   || 'Godziny w dniu'@
   || ''
   ?};
exec('ppsfl_efld_opt','ppsf','*',PPSFL,'REDD');
''


\ppsf_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Aktualizacja pozycji i nagłówka pracy poza siedzibą firmy w zakresie wskazanych dat.
::       Wykonywana po zmianach w innych tabelach
::   WE: _a [REFERENCE] - P.ref pracownika, ktorego praca poza siedzibą dotyczy
::       _b [DATE]      - Data od
::       _c [DATE]      - Data do
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
   _od:={? var_pres('_b')=type_of(date) || _b || return(0) ?};
   _do:={? var_pres('_c')=type_of(date) || _c || return(0) ?};

PPSFN.cntx_psh();
PPSFN.index('PRAC');
PPSFN.prefix(exec('firma','ustawienia'),_p_ref);
PPSFP.cntx_psh();
PPSFP.index('NAG');
P.cntx_psh();

{? PPSFN.find_le(_od) | PPSFN.find_le(_do)
|| PPSFN.P();
   {!
   |? {? PPSFN.OD<=_do & PPSFN.DO>=_od
      || _dnirob:=0;
         PPSFP.prefix(PPSFN.ref());
         {? PPSFP.first()
         || {!
            |? {? PPSFP.OD<=_do & PPSFP.DO>=_od
               || {? exec('czy_lista','kal_dane_akt',0,'')
                  || {? P.KAL || __KAL.set_cal(P.KAL,PPSFP.ROK) || __KAL.set_cal('standard',PPSFP.ROK) ?};
                     PPSFP.DR:=__KAL.w_days(PPSFP.OD,PPSFP.DO);
                     PPSFP.G:={? PPSFN.G<>time(0,0,0) & PPSFP.PARTDAY='T'
                              || *(*PPSFN.G*PPSFP.DR)
                              || *(__KAL.w_hours(PPSFP.OD,PPSFP.DO)*60)
                              ?};
                     PPSFP.put()
                  ?}
               ?};
               _dnirob+=PPSFP.DR;
               PPSFP.next()
            !}
         ?};
         {? _dnirob<>0 & PPSFN.DR<>_dnirob
         || PPSFN.DR:=_dnirob;
            PPSFN.put()
         ?}
      ?};
      PPSFN.OD<=_od & PPSFN.next()
   !}
?};

P.cntx_pop();
PPSFP.cntx_pop();
PPSFN.cntx_pop()


\ppsfn_closure_control
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Kontrola zamknięcia miesiąca lub listy płac typu SUM dla nagłówka pracy poza siedzibą firmy
::   WE: [_a] [REFERENCE] - wskazanie na pracownika
::       [_b] [DATE]      - początek badanego okresu
::       [_c] [DATE]      - koniec badanego okresu
::       [_d] [NUMBER]    - rodzaj zwracanego komunikatu - czy zwracamy pełen tekst komunikatu, czy numer
::             0 - Numer [domyślnie];
::             1 - Pełen tekst komunikatu.
::   WY: [NUMBER/STRING] - 0 - wszystko ok, 1 - miesiąc zamknięty, 2 - lista płac typu SUM zamknięta lub ''
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
 _from:={? var_pres('_b')=type_of(date) || _b || return(0) ?};
   _to:={? var_pres('_c')=type_of(date) || _c || return(0) ?};
_ret_kom:=var_pres('_d')=type_of(0) & _d;

_result:=0;
_txt:='';
_year:=_from~1;
_year_to:=_to~1;
_monthFrom:=_from~2;
_monthTo:=_to~2;

_yearFrom:=_from~1;
_monthFrom:=_from~2;
_yearTo:=_to~1;
_monthTo:=_to~2;

{! _year:=_yearFrom .. _yearTo
|? _result=0
|!
   _monthS:={? _year=_yearFrom || _monthFrom || 1 ?};
   _monthE:={? _year=_yearTo || _monthTo || 12 ?};
   {! _month:=_monthS .. _monthE
   |? _result=0
   |!
::    Sprawdza, czy miesiąc zamknięty
      _m_od:=date(_year,_month,1);
      _m_do:=date(_year_to,_month,0);
      _ppsfn_od:={? PPSFN.OD>=_m_od || PPSFN.OD || _m_od ?};
      _ppsfn_do:={? PPSFN.DO<=_m_do || PPSFN.DO || _m_do ?};
      _statMsc_od:=exec('get_msc_status','grafik',_ppsfn_od);
      _statMsc_do:=exec('get_msc_status','grafik',_ppsfn_do);
      _statP_od:=exec('getPlanStat4Pr','grafik',_p_ref,_ppsfn_od);
      _statP_do:=exec('getPlanStat4Pr','grafik',_p_ref,_ppsfn_do);
      {? _statP_od='X' | _statP_od='X' | _statMsc_od='Z' | _statMsc_do='Z'
      || {? _ret_kom
         || {? _statP_od='X' | _statP_od='X'
            || _txt:='Pracownik ma zamknięty miesiąc %1 do rozliczenia.'@[_m_od$8]
            || _dz:=exec('getMscCloseDate','grafik',_m_do,1);
               _txt:='Miesiąc %1 jest zamknięty do rozliczenia (do daty %2).'@[_m_od$8,$_dz]
            ?}
         ?};
         _result:=1
      ?};

:: Sprawdza, czy lista SUM jest zamknięta
      O.cntx_psh();
      O.index('LISTYMIE');
      O.prefix(exec('ref_firma','ustawienia'),_year,_month,'SUM',);
      {? O.first()
      || {? O.Z='T'
         || {? _ret_kom
            || _txt:='Lista płac typu SUM za miesiąc %1 jest zamknięta.'@[_m_od$8]
            ?};
            _result:=2
         ?}
      ?};
      O.cntx_pop()
   !}
!};

{? _ret_kom || _txt || _result ?}


\ppsf_sn_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed akcją Dołącz tabeli PPSF_SN
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
exec('ppsf_sn_mod_b','ppsf')


\ppsf_sn_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed akcją Popraw tabeli PPSF_SN
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
exec('ppsf_sn_mod_b','ppsf',1)


\ppsf_sn_mod_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wspólna dla akcji Dołącz i Popraw tabeli PPSF_SN
::   WE: [_a][INTEGER] - 0/1 Czy poprawianie? Domyślnie 0 - dołączanie
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_popraw:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? ~_popraw
|| PPSF_SN.blank();
   PPSF_SN.memo_set(,'OPIS');
   {? PPSF_SN.edit("exec('ppsf_sn_chk','ppsf')")
   || {? PPSF_SN.add()
      || PPSF_SN.memo_put(,'OPIS')
      ?}
   ?}
|| PPSF_SN.memo_get(,'OPIS');
   {? PPSF_SN.edit("exec('ppsf_sn_chk','ppsf',1)")
   || {? PPSF_SN.put()
      || PPSF_SN.memo_put(,'OPIS')
      ?}
   ?}
?};
1


\ppsf_sn_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła sprawdzająca poprawność wypełnienia pól PPSF_SN
::   WE: [_a][INTEGER] - 0/1 Czy poprawianie? Domyślnie 0 - dołączanie
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_ref:={? _put || PPSF_SN.ref() || null() ?};
_ret:=_err:='';
{? (_chk:=__CHK.record(PPSF_SN,,'KOD','NAZWA'))<>''
|| return(_chk)
?};
PPSF_SN.cntx_psh();
PPSF_SN.index('KOD');
PPSF_SN.prefix(PPSF_SN.FIRMA,PPSF_SN.KOD,);
{? PPSF_SN.first() & PPSF_SN.ref()<>_ref
|| _err:='Istnieje już zapis o podanym kodzie.'@;
   _ret:='KOD'
?};
PPSF_SN.cntx_pop();
{? +_err
|| FUN.emsg(_err)
?};

_ret


\ppsf_sn_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed akcją Usuń tabeli PPSF_SN
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
PPSF_H.cntx_psh();
PPSF_H.prefix();
{? PPSF_H.find_tab(,'PPSF_SN',,'=',PPSF_SN.ref())
|| FUN.emsg('Sposób rozliczania wykorzystywany w zapisach pracy zdalnej stałej.\nUsunięcie niemożliwe'@);
   _ret:=0
?};
PPSF_H.cntx_pop();
{? _ret
|| {? exec('del_conf','#table')
   || do();
      {? exec('del_ndx','#table',PPSF_SP,'NRU',PPSF_SN.ref())
      || {? ~PPSF_SN.del(,1)
         || _ret:=0;
            undo()
         ?}
      || _ret:=0;
         undo()
      ?};
      end()
   || _ret:=0
   ?}
?};

_ret


\ppsf_sn_domyslny_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła akcji "Domyślny" tabeli PPSF_SN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPSF_SN.DOM<>'T'
|| _ref:=PPSF_SN.ref();
   PPSF_SN.cntx_psh();
   PPSF_SN.index('KOD');
   PPSF_SN.prefix(PPSF_SN.FIRMA);
   {? PPSF_SN.first()
   || do();
      {!
      |? {? PPSF_SN.DOM='T'
         || PPSF_SN.DOM:='N';
            {? ~PPSF_SN.put(1)
            || undo()
            ?}
         ?};

         do_state()=1 & PPSF_SN.next()
      !};
      {? do_state()=1 & PPSF_SN.seek(_ref)
      || PPSF_SN.DOM:='T';
         {? ~PPSF_SN.put(1)
         || undo()
         ?}
      ?};
      end()
   ?};
   PPSF_SN.cntx_pop()
|| PPSF_SN.DOM:='N';
   PPSF_SN.put()
?};
~~


\ppsf_sn_pozycje_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed akcją Pozycje tabeli PPSF_SN (okienko SLO)
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
PPSF_SP.cntx_psh();
PPSF_SP.win_sel('WER');
PPSF_SP.index('NRN');
PPSF_SP.prefix(PPSF_SN.ref());
PPSF_SP.hdr_sel(' - %1 [%2]'[PPSF_SN.NAZWA,PPSF_SN.KOD]);
PPSF_SP.select();
PPSF_SP.cntx_pop();
1


\ppsf_sn_szukaj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła przed akcją "Szukaj" tabeli PPSF_SN
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
1


\ppsf_sn_szukaj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła po akcji "Szukaj" tabeli PPSF_SN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\_ppsf_sp_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wyzwalacz "add() przed" tabeli PPSF_SP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('_ppsf_sp_modb','ppsf')


\_ppsf_sp_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wyzwalacz "put() przed" tabeli PPSF_SP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('_ppsf_sp_modb','ppsf')


\_ppsf_sp_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wspólna dla wyzwalaczy "add() przed" oraz "put() przed" tabeli PPSF_SP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPSF_SP.INDYW='T'
|| PPSF_SP.KW:=0
?};
{? PPSF_SP.SP_ROZL<>'M'
|| PPSF_SP.POMN:='N'
?};
{? PPSF_SP.SP_ROZL<>'M' & PPSF_SP.SP_ROZL<>'D'
|| PPSF_SP.WYM:='N'
?};
{? +PPSF_SP.FORMULA
|| PPSF_SP.FORMULA:=form(PPSF_SP.FORMULA)
?};
1


\ppsf_sp_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli PPSF_SP. Wykorzystywana zarówno przez
::       jTerma jak i webTerma.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr istotny dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(PPSF_SP)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld='' | _fld='INDYW'
|| _val:=PPSF_SP.INDYW<>'T';
   _set(_TAB,_we,,'enable=%1,mark=%1' [$_val],_TAB,'KW');
   _set(_TAB,_we,,'enable=%1' [$_val],_TAB,'WYM')
?};

{? _fld='' | _fld='SP_ROZL'
|| _val:=PPSF_SP.SP_ROZL='M';
   _set(_TAB,_we,,'enable=%1' [$_val],_TAB,'POMN');
   _val:=(PPSF_SP.SP_ROZL='M' | PPSF_SP.SP_ROZL='D');
   _set(_TAB,_we,,'enable=%1' [$_val],_TAB,'WYM')
?};

{? _fld=''
|| _val:=sec_superuser();
   _set(_TAB,_we,,'enable=%1' [$_val],_TAB,'FORMULA')
?};

1


\ppsf_sp_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed akcją "Wyświetl" tabeli PPSF_SP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ppsf_sp_efld_opt','ppsf','*',PPSF_SP,PPSF_SP.win_edit('?'));
PPSF_SP.display()


\ppsf_sp_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed akcją Dołącz tabeli PPSF_SP
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
PPSF_SP.blank();
exec('ppsf_sp_mod_b','ppsf')


\ppsf_sp_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed akcją Popraw tabeli PPSF_SP
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
exec('ppsf_sp_mod_b','ppsf',1)


\ppsf_sp_mod_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wspólna dla akcji Dołącz i Popraw tabeli PPSF_SP
::   WE: [_a][INTEGER] - 0/1 Czy poprawianie? Domyślnie 0 - dołączanie
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
exec('ppsf_sp_efld_opt','ppsf','*',PPSF_SP,'RED');
_popraw:={? var_pres('_a')=type_of(0) || _a || 0 ?};
R.cntx_psh();
R.win_dict('SLO');
R.prefix();
exec('__RUB','object');
{? ~_popraw
|| PPSF_SP.blank();
   {? PPSF_SP.edit("exec('ppsf_sp_chk','ppsf')")
   || PPSF_SP.add()
   ?}
|| {? PPSF_SP.edit("exec('ppsf_sp_chk','ppsf',1)")
   || PPSF_SP.put()
   ?}
?};
R.f_clear();
R.cntx_pop();

1


\ppsf_sp_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła sprawdzająca poprawność wypełnienia pól PPSF_SP
::   WE: [_a][INTEGER] - 0/1 Czy poprawianie? Domyślnie 0 - dołączanie
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_ref:={? _put || PPSF_SP.ref() || null() ?};
_ret:=_err:='';

{? (_chk:=__CHK.record(PPSF_SP,,'R'))<>''
|| return(_chk)
?};
{? PPSF_SP.KW<0
|| FUN.emsg('Wartość w polu "%1" nie może być ujemna.'@[MS.name(PPSF_SP,'KW')]);
   return('KW')
?};
{? ~PPSF_SP.KW & PPSF_SP.INDYW<>'T' & form(PPSF_SP.FORMULA)=''
|| FUN.emsg('Wartość w polu "%1" powinna być uzupełniona.'@[MS.name(PPSF_SP,'KW')]);
   return('KW')
?};
PPSF_SP.cntx_psh();
PPSF_SP.index('NRU');
PPSF_SP.prefix(PPSF_SP.PPSF_SN,PPSF_SP.R);
{? PPSF_SP.first() & PPSF_SP.ref()<>_ref
|| _err:='Istnieje już zapis o podanym składniku płacowym.'@;
   _ret:='R'
?};
PPSF_SP.cntx_pop();
{? +_err
|| FUN.emsg(_err)
?};

_ret


\edit_var_okr_rozl_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed wyświetleniem pola OKR_ROZL zmiennej EDIT_VAR (Opis okresu rozliczenia)
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.OKR_ROZL:=
   {? PPSF_SP.OKR_ROZL='B'
   || 'Bieżący miesiąc'@
   |? PPSF_SP.OKR_ROZL='P'
   || 'Poprzedni miesiąc'@
   || ''
   ?};
~~


\edit_var_sp_rozl_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed wyświetleniem pola SP_ROZL zmiennej EDIT_VAR (Opis sposobu rozliczania ekwiwalentu)
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.SP_ROZL:=
   {? PPSF_SP.SP_ROZL='G'
   || 'Stawka godzinowa'@
   |? PPSF_SP.SP_ROZL='D'
   || 'Stawka dzienna'@
   |? PPSF_SP.SP_ROZL='M'
   || 'Wartość miesięczna'@
   || ''
   ?};
~~


\ppsft_okienko_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Formuła okienko przed tabeli PPSFT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R.cntx_psh();
R.win_dict('SLO');
R.prefix();
PPSFR.cntx_psh();
exec('__RUB','object');
1


\ppsft_okienko_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Formuła okienko po tabeli PPSFT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPSFR.cntx_pop();
R.cntx_pop();
1


\is_pzd01
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Sprawdza czy jest naniesiona definicja aktualizacji 22.26_PZD01
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
var_pres('PPSFL')>0 & var_pres('KOTLIMIT')>0


\zlicz_ppsf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Zlicza dni i godziny pracy poza siedzibą
::   WE: _a [_P]            - wskazanie pracownika
::       _b [_PPSFT/_PPSFR] - wskazanie na konkretny typ lub rodzaj pracy poza siedzibą
::       _c [DATE]          - data, od której zbierać dane
::      [_d][DATE]          - data, do której zbierać dane, jeśli nie podano - brak ograniczenia
::      [_e][INTEGER]       - 0/1* Czy pomniejszać sumy dni/godzin o sumy dni/godzin nieobecności
::                            całodniowych w tym okresie, domyślnie 1 - pomniejszać
::   WY: _ret [OBJ]         - tablica elementów nazwanych:
::                            .DK [INTEGER] - suma dni kalendarzowych
::                            .DR [INTEGER] - suma dni roboczych
::                            .G [TIME] - suma godzin roboczych
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('DK','DR','G','jest');
_ret.DK:=_ret.DR:=_ret.jest:=0;
_ret.G:=time(0,0,0);
_err:='Błąd parametrów wejściowych!'@;
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=P
|| _prac:=_a
|| FUN.error(_err);
   return(_ret)
?};
{? var_pres('_b')=type_of(null()) & _b<>null()
|| {? ref_tab(_b)=PPSFT
   || _ppsft:=_b;
      _ppsfr:=null()
   |? ref_tab(_b)=PPSFR
   || _ppsft:=null();
      _ppsfr:=_b
   || FUN.error(_err);
      return(_ret)
   ?}
|| FUN.error(_err);
   return(_ret)
?};
_d0:=date(0,0,0);
_tDate:=type_of(_d0);
{? var_pres('_c')=_tDate & _c<>_d0
|| _od:=_c
|| FUN.error(_err);
   return(_ret)
?};
_do:={? var_pres('_d')=_tDate || _d || _d0 ?};
_bezN:={? var_pres('_e')=type_of(0) || _e || 1 ?};

PPSFN.cntx_psh();
:: W zależności od typu parametru wejściowego prefix na typ (PPSFT) lub rodzaj (PPSFR):
{? _ppsfr=null()
|| PPSFN.index('TYPPRAC');
   PPSFN.prefix(_ppsft,_prac)
|| PPSFN.index('TYPPRAC2');
   PPSFN.prefix(_ppsfr,_prac)
?};
{? PPSFN.first()
|| P.cntx_psh();
   P.prefix();
   PPSFN.P();
   {? var_pres('__KAL')<100
   || exec('declare','kalendarz');
      __KAL:=obj_new(@.CLASS.KALEND)
   ?};
:: Zapamiętanie stanu kalendarza:
   _kalNaz:=__KAL.nazwa;
   _kalRok:=__KAL.rok;
   {? P.KAL
   || _pKal:=P.KAL
   || _pKal:='standard'
   ?};
   {!
   |? {? PPSFN.DO>=_od & (_do=_d0 | PPSFN.OD<=_do)
      || _ret.jest:=1;
         __KAL.set_cal(_pKal,PPSFN.OD~1);
         _start:={? PPSFN.OD>_od || PPSFN.OD || _od ?};
         _stop:={? PPSFN.DO<_do | _do=_d0 || PPSFN.DO || _do ?};
         _ret.DR+=__KAL.w_days(_start,_stop);
         _ret.G+={? PPSFN.G<>time(0,0,0) & PPSFN.PARTDAY='T'
                 || *(*PPSFN.G*_ret.DR)
                 || *(__KAL.w_hours(_start,_stop)*60)
                 ?};
         _ret.DK+=_stop-_start+1;
         {? _bezN
         || _ret.G-=(*(exec('suma_dni_N','nieobecnosc',1,_start,_stop,,,'G',,1)*60));
            _ret.DR-=exec('suma_dni_N','nieobecnosc',1,_start,_stop,,,'R',,1);
            _ret.DK-=exec('suma_dni_N','nieobecnosc',1,_start,_stop,,,'K',,1)
         ?}
      ?};

      PPSFN.next()
   !};
:: Przywrócenie stanu kalendarza:
   __KAL.set_cal(_kalNaz,_kalRok);
   P.cntx_pop()
?};
PPSFN.cntx_pop();

_ret


\ppsf_rozlicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Rozliczenie stałej pracy zdalnej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: utworzenie bufara z normalizacją
_tab:=exec('ppsf_rozl_buff','ppsf',P.ref,date(O.R,O.M,0));

exec('ppsf_rozl_wym_zatr','ppsf',_tab);
:: Wyliczenie wartości godzin pracy zdalnej, nieobecności, nominalne liczby godzin
exec('ppsf_rozl_licz_G','ppsf',_tab);

:: wyliczenie wartości niezbędnych do wypłaty
exec('ppsf_rozl_wylicz','ppsf',_tab);

:: zapisanie wartości na liście płac
exec('ppsf_rozl_zapisz','ppsf',_tab);
1


\ppsf_rozl_wym_zatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Normalizacja zapisów oraz obsługa zmiany wymiaru zatrudnienia.
::   WE: _a [object] - wskazanie na tymczasową tabelą z danymi do przetworzenia
::   WY: _tab
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_wym_zm:=0;
{? _tab.first()
|| {!
   |? {? _tab.WYC_DATA>#0 || _tab.DO:=_tab.WYC_DATA-1 ?};
      _minus:=_tab.OKR_ROZL='P';

      _data_od:=date(O.R,O.M-_minus,1);
      _data_do:=date(O.R,O.M-_minus,0);
      {? ~_minus
      || _Mask:='godz'+(('0000'+$(date(O.R,O.M-_minus,0)~1))+4);
         {? G.name<>_Mask || G.use(_Mask) ?};
         _G_ndx:=G.ndx_tmp(,,'P',,,'M',,,'K','RN',,'D',,);
         G.index(_G_ndx);
         G.prefix(P.ref(),_data_od~2,_tab.G_G);
         {? G.first()
         || {? G.D<_data_od & _tab.OD<_data_od
            || {? _tab.OD<=G.D
               || _data_od:=G.D
               || _data_od:=_tab.OD
               ?}
            ?}
         ?};
         _tab.H_OD:=_data_od;
         _tab.H_DO:=_data_do;
         G.ndx_drop(_G_ndx)
      ?};

      {? _tab.DO=#0 | _tab.DO>_data_do
      || _tab.DO:=_data_do
      ?};
      {? _tab.OD<_data_od
      || _tab.OD:=_data_od
      ?};
      {? (P.DZ>=_tab.OD | P.DZ=#0) & P.DZA<=_tab.DO
      || _ok:=1;
         {? _tab.OD>_data_do
         || _ok:=0
         |? _tab.OD>P.DZ & P.DZ>#0
         || _ok:=0
         |? _tab.OD>_tab.DO
         || _ok:=0
         |? _tab.OD<P.DZA
         || _tab.OD:=P.DZA
         ?};

         {? _ok
         ||  {? _tab.DO<_data_od
             || _ok:=0
             |? _tab.DO<_tab.OD
             || _ok:=0
             |? _tab.DO>P.DZ & P.DZ>#0
             || _tab.DO:=P.DZ
             ?}
         ?}
      || _ok:=0
      ?};
      {? _ok
      || _tab.WART:=_tab.NORMA:=_tab.L_G:=_tab.L_G_NB:=_tab.WYM_ZATR:=_tab.L_D:=0;
         _tab.WYM_ZATR:=exec('ustal_h_wym','lista_licz','WY',_tab.OD);
         _tab.put(1);
         _wym_zm+=_tab.WYM='T';
         _tab.next()
      || _tab.del()
      ?}
   !}
?};
{? _tab.first() & _wym_zm
|| _ind:=0;

   H.index('_HISTKOD');
   H.prefix(P.ref,'Z');
   {!
   |? {? _tab.WYM='T' & _tab.SP_ROZL<>'G'
      || _wy_od:=_tab.WYM_ZATR;
         _wy_do:=exec('ustal_h_wym','lista_licz','WY',_tab.DO);
         {? _wy_od<>_wy_do
         || _od:=_tab.OD+1;
            _wy:=_wy_od;
            {? H.find_ge(_od) & _od<=_tab.DO
            || {? H.WY<>_wy
               || _do:=_tab.DO;
                  _tab.DO:=H.OD-1;
                  _tab.put(1);
                  _tab.cntx_psh();
                  _tab.OD:=H.OD;
                  _tab.DO:=_do;
                  _tab.WYM_ZATR:=H.WY;
                  _tab.LP:=0;
                  _tab.add(1);
                  _tab.cntx_pop();
                  _tab.next()
               || _tab.next()
               ?}
            || _tab.next()
            ?}
         || _tab.next()
         ?}
      || _tab.next()
      ?}
   !}
?};
_tab


\ppsf_rozl_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wyprowadzenie wyliczonej wartości wypłaty na listę płac.
::   WE: _a [object] - wskazanie na tymczasową tabelą z danymi do przetworzenia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_tab.prefix();
{? _tab.first()
|| {!
   |? {? _tab.R_LG &
         (__RUB.sys_attr(_tab.R_LG,103212,date(O.R,O.M,1)) | __RUB.sys_attr(_tab.R_LG,103222,date(O.R,O.M,1)))
      || _tab.L_G:=_tab.L_D;
         _tab.put(1)
      ?};
      _tab.next()
   !};
:: zsumowanie wartości do zapisu
   _tab_gr:=sql('
      select ROZ_G, KK, sum(WART) WART
      from :_a
      group by ROZ_G, KK',
      _tab);

   _tab_gr_G:=sql('
      select R_LG, sum(L_G) L_G
      from :_a
      group by R_LG',
      _tab);

:: usunięcie danych z listy dla wypłaty
   _wyp_rub:=__RUB.sys_rub(1031,date(O.R,O.M,1));
   {? _wyp_rub.first()
   || {!
      |? FUNKCJE.LK(_wyp_rub.RN,,,1);
         _wyp_rub.next()
      !}
   ?};
:: usunięcie danych z listy dla godzin
   _godz_rub:=__RUB.sys_rub(1032,date(O.R,O.M,1));
   {? _godz_rub.first()
   || {!
      |? FUNKCJE.LK(_godz_rub.RN,,,1);
         _godz_rub.next()
      !}
   ?};
   KK.prefix();
   {? _tab_gr.first()
   || {!
      |? {? _tab_gr.ROZ_G
         || {? KK.seek(_tab_gr.KK)
            || _kk:=KK.ref()
            || _kk:=~~
            ?};
            FUNKCJE.LK(_tab_gr.ROZ_G,_kk,_tab_gr.WART)
         ?};
         _tab_gr.next()
      !}
   ?};

   {? _tab_gr_G.first()
   || {!
      |? {? _tab_gr_G.R_LG
         || FUNKCJE.LK(_tab_gr_G.R_LG,,_tab_gr_G.L_G)
         ?};
         _tab_gr_G.next()
      !}
   ?}
?};
1


\ppsf_rozl_wylicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wyliczenie wartości do wypłaty stałej pracy zdalnej.
::   WE: _a [object] - wskazanie na tymczasową tabelą z danymi do przetworzenia
::   WY: object - wskazanie na tymczasową tabelą z danymi do rozliczenia
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;

_formula:="
   _wyn:=0;
   on_error(2);
   no_msg(1);
   params_set(params_get);
   _wyn:=($_a)();
   no_msg();
   {? in_error()
   || on_error();
      FUN.emsg('Błędna formuła naliczająca wartość ekwiwalentu za pracę zdalną.\n'
         'Należy zweryfikować treść formuły dla składnika rozliczenia.'@);
      -1
   || on_error();
      _wyn
   ?}
";
{? _tab.first()
|| LSS.index('PRACROD');
   {!
   |? {? _tab.ROZ_G & (_tab.L_G | _tab.POMN='N')
      || _nominal:=_wart:=_stawka:=0;
         {? _tab.FORMULA<>''
         || params_set('TAB',_tab);
            _nominal:=_formula(_tab.FORMULA)
         || {? _tab.INDYW='T'
            || LSS.prefix(P.ref,_tab.ROZ_G);
               {? LSS.find_le(_tab.DO)
               || {? LSS.KK
                  || _tab.KK:=$LSS.KK
                  ?};
                  _nominal:=FUNKCJE.S(_tab.ROZ_G)
               ?}
            || _nominal:=_tab.KW
            ?}
         ?};
         {? _nominal>0
         || {? _tab.SP_ROZL='G'
            || _wart:=_tab.L_G*_nominal
            |? _tab.SP_ROZL='D'
            || _wart:=_tab.L_D*_nominal;
               {? _tab.WYM='T'
               || _wart*=_tab.WYM_ZATR
               ?}
            || {? _tab.NORMA
               || {? _tab.POMN='N'
                  || {? _tab.NORMA=_tab.NOMINAL
                     || _wart:=_nominal
                     || _stawka:=_nominal/_tab.NORMA;
                        _wart:=_tab.NOMINAL*_stawka
                     ?}
                  || _stawka:=_nominal/_tab.NORMA;
                     _wart:=_tab.L_G*_stawka
                  ?};
                  {? _tab.WYM='T'
                  || _wart*=_tab.WYM_ZATR
                  ?}
               ?}
            ?}
         ?};
         _tab.WART:=_wart$2;
         _tab.put(1)
      ?};
      _tab.next()
   !}
?};
_tab


\ppsf_rozl_licz_G
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wyliczenie liczby godzin, za które należy wypłacić ekwiwalenty dla pracy zdalnej.
::   WE: _a [object] - wskazanie na tymczasową tabelą z danymi do przetworzenia
::   WY: object - wskazanie na tymczasową tabelą z danymi do rozliczenia
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
:: Zapamiętanie stanu kalendarza:
_kalNaz:=__KAL.nazwa;
_kalRok:=__KAL.rok;
{? _tab.first()
|| {!
   |? _minus:=_tab.OKR_ROZL='P';
      {? _tab.OD<=date(O.R,O.M-_minus,0) & _tab.DO>=date(O.R,O.M-_minus,1)
      || _Mask:='godz'+(('0000'+$(_tab.OD~1))+4);
         {? G.name<>_Mask || G.use(_Mask) ?};
::   wyliczenia czasu przepracowanego z kartoteki godzin
         _sql:=
               ' select count(distinct G.D) L_D '
               ' from G join R using(R.REFERENCE,G.K) '
               ' where G.P=:_a and G.R=\'G\' and R.RN=:_c and G.D>=to_date(:_d) and G.D<=to_date(:_e) ';
         {? ~_minus
         || _sql+=' and G.M=:_b and G.LT=\':_f\''
         ?};
         _sql+=' order by 1 ';
         _tab.L_D:=sql(_sql,P.ref,_tab.DO~2,_tab.G_G,_tab.OD,_tab.DO,~O.LT).L_D;


         {? _tab.L_D
         || _sql:=
              ' select sum(G.G) L_G '
              ' from G join R using(R.REFERENCE,G.K) '
              ' where G.P=:_a and G.R=\'G\' and R.RN =:_c and G.D>=to_date(:_d) and G.D<=to_date(:_e) ';
            {? ~_minus
            || _sql+=' and G.M=:_b and G.LT=\':_f\''
            ?};
            _sql+=' order by 1';
            _tab.L_G:=sql(_sql,P.ref,_tab.DO~2,_tab.G_G,_tab.OD,_tab.DO,~O.LT).L_G
         ?};

         _param:=exec('get_par','#parametr',274);
         {? _param='T'
         || __KAL.set_cal('standard',_tab.OD~1);
            _w_hours:="exec('nominal','godziny',_a,_b,,,,1)"
         ||  exec('kal_prac','personel',_tab.OD~1);
            _w_hours:="__KAL.w_hours(_a,_b)*{? P.KIN='T' || 1 || H.WY ?}$2"
         ?};
         _tab.NORMA:=_w_hours(date(O.R,O.M-_minus,1),date(O.R,O.M-_minus,0));
         _tab.NOMINAL:=_w_hours({? _tab.OD<date(_tab.DO~1,_tab.DO~2,1) || date(_tab.DO~1,_tab.DO~2,1) || _tab.OD ?},
         _tab.DO);
         exec('kal_prac','personel',_tab.OD~1);
         {? _tab.L_G=0 & _tab.GEN_G='B'
         || {? _tab.SKL_RCP='T'
            || {? var_pres('_start')>100
               || obj_del(_start)
               ?};
               _start:=exec('start_rcp','ppsf',_tab.OD,_tab.DO,_tab.TYP);
               {? _start.first()
               || {!
                  |? _tab.L_D+=1;
                     _godz_nom:=__KAL.w_hours(_start.DZK,_start.DZK);
                     _tab.L_G+=
                        {? _godz_nom
                        || _godz_nom
                        || _godz_nom:=exec('norma','godziny',_start.DZK);
                           _godz_nom*=_tab.WYM_ZATR
                        ?};
                     _start.next()
                  !}
               ?}
            || {? _tab.ZAKRES='H'
               || {? _tab.WYBDNI='T'
                  || _od:=_tab.OD~3; _do:=_tab.DO~3;
                     {! _ind:=_od.._do
                     |! _data:=date(_tab.OD~1,_tab.OD~2,_ind);
                        {? ($('_a.D'+$(_data~4)))(_tab)='T'
                        || _godz_nom:=__KAL.w_hours(_data,_data);
                           _d_nom:=__KAL.w_days(_data,_data);
                           _L_D_NB:=exec('suma_dni_N','nieobecnosc',1,_data,_data,,,'R','11542,11522',1);
                           _L_D:=_d_nom-_L_D_NB;
                           {? _L_D<0 || _L_D:=0 ?};
                           _tab.L_D+=_L_D;
                           {? _godz_nom
                           || _L_G_NB:=exec('suma_dni_N','nieobecnosc',1,_data,_data,,,'G','11542,11522');
                              _L_G:=_godz_nom-_L_G_NB;
                              {? _L_G<0 || _L_G:=0; _L_G_NB:=_godz_nom ?};
                              _tab.L_G+=_L_G;
                              _tab.L_G_NB+=_L_G_NB
                           ?}
                        ?}
                     !}
                  || {? _tab.POMN='T'
                     || _tab.NORMA:=0
                     ?}
                  ?}
               || _tab.L_G_NB:=exec('suma_dni_N','nieobecnosc',1,_tab.OD,_tab.DO,,,'G','11542,11522');
                  _lg:=exec('nominal','godziny',_tab.OD,_tab.DO)-_tab.L_G_NB;
                  {? _lg<0 || _lg:=0 ?};
                  _tab.L_G:=_lg;
                  _L_D_NB:=exec('suma_dni_N','nieobecnosc',1,_tab.OD,_tab.DO,,,'R','11542,11522',1);
                  _d_nom:=__KAL.w_days(_tab.OD,_tab.DO);
                  _ld:=_d_nom-_L_D_NB;
                  {? _ld<0 || _ld:=0 ?};
                  _tab.L_D:=_ld
               ?}
            ?}
         ?};
         _tab.put();
         _tab.next()
      || _tab.del(,1)=2
      ?}
   !}
?};
:: Przywrócenie stanu kalendarza:
__KAL.set_cal(_kalNaz,_kalRok);
_tab


\ppsf_rozl_buff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wynikiem procedury jest tabela z danymi do rozliczenia stałej pracy zdalnej.
::   WE: _a [reference] ref pracownika
::       _b [DATE] data badania
::   WY: object - wskazanie na tymczasową tabelą z danymi do rozliczenia
::----------------------------------------------------------------------------------------------------------------------
_pracownik:=_a;
_data:=_b;
_tab:=sql('
   select
::   Data początkowa
            PPSF_H.OD OD,
            PPSF_H.OD H_OD,
::   Data końca uwzględnia ewentualnie datę wycofania
            PPSF_H.DO DO,
            PPSF_H.DO H_DO,
::   Data wycofania
            PPSF_H.WYC_DATA WYC_DATA,
::   Godziny pracy zdalnej - domyślnie 7138
            case when PPSFT.R is null then 7138 else G_RODZ.RN end G_G,
::   Rodzaj rozliczeia godzin
            PPSFT.GEN_G GEN_G,
::   Typ
            PPSFT.REFERENCE TYP,
::   Portal
            PPSFT.SKL_RCP SKL_RCP,
::   Okres do rozliczenia P- poprzedni, B - bieżący
            PPSF_SP.OKR_ROZL OKR_ROZL,
::   Składnik płacowy do wprowadzenia wyliczonego ekwiwalentu
            G_ROZL.RN ROZ_G,
::   Sposób rozliczania Stawka godzinowa [G], Stawka dzienna [D], wartość miesięczna [M]
            PPSF_SP.SP_ROZL SP_ROZL,
::   Czy składnik płacowy zostanie ustalony na podstawie stałych składników listy
            PPSF_SP.INDYW INDYW,
::   Proporcjonalnie pomniejszane o nieobecności [T/N]
            PPSF_SP.POMN POMN,
::   Treść formuły wyliczająca kwotę bazową
            PPSF_SP.FORMULA FORMULA,
::   Wartość bazowa do wyliczenia
            PPSF_SP.KW KW,
::   Składnik płacowy opisujący wartość godzin do rozliczenia danym składnikiem ekwiwalentu
            G_GROZL.RN R_LG,
::   Zakres definicji [S/H]
            PPSFROZD.ZAKRES ZAKRES,
::   Wybrane dni (w tygodniu) T/N
            PPSFROZD.WYBDNI WYBDNI,
::   Poniedziałek
            PPSFROZD.D1 D1,
::   Wtorek
            PPSFROZD.D2 D2,
::   Środa
            PPSFROZD.D3 D3,
::   Czwartek
            PPSFROZD.D4 D4,
::   Piątek
            PPSFROZD.D5 D5,
::   Sobota
            PPSFROZD.D6 D6,
::   Niedziela
            PPSFROZD.D7 D7,
::   Ref konta kosztów
            KK.REFERENCE KK,
::   Czy uwzględnić wymiar zatrudnienia
            PPSF_SP.WYM WYM,
::   Wyliczona wartość do wprowadzenia na listę płac
            0.01-0.01 WART,
::   Normatywna liczba godzin w miesiącu rozliczanym
            0.01-0.01 NORMA,
::   Nominalna liczba godzid do przepracowaia w okresie
            0.01-0.01 NOMINAL,
::   Liczba godzin pracy zdalnej
            0.01-0.01 L_G,
::   Liczba godzin nieobecności w podanym okresie
            0.01-0.01 L_G_NB,
::   Wymiar zatrudnienia
            0.01-0.01 WYM_ZATR,
::   Liczba dni roboczych
            0.01-0.01 L_D,
            1 LP
   from     PPSF_H join
            PPSFROZD using(PPSF_H.PPSFROZD, PPSFROZD.REFERENCE) join
            PPSFT using(PPSF_H.PPSFT, PPSFT.REFERENCE) join
            R G_RODZ using(PPSFT.R, G_RODZ.REFERENCE) left join

            PPSF_SN using(PPSF_H.PPSF_SN, PPSF_SN.REFERENCE) left join
            PPSF_SP using(PPSF_SP.PPSF_SN, PPSF_SN.REFERENCE) left join
            KK using(PPSF_SP.KK, KK.REFERENCE) left join
            R G_ROZL using(PPSF_SP.R, G_ROZL.REFERENCE) left join
            R G_GROZL using(PPSF_SP.R_LG, G_GROZL.REFERENCE)
   where    PPSF_H.AKT=\'T\' and PPSF_H.P=:_a and PPSF_H.OD<=to_date(:_b) and PPSFT.FIRMA=:_c
   order by LP
   ',
   _pracownik,_data,exec('firma','ustawienia'));
_tab


\edit_var_formula_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed wyświetleniem pola FORMULA zmiennej EDIT_VAR (Czy pozycja posiada formułę na stawkę? [T/N])
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.FORMULA:=
   {? form(PPSF_SP.FORMULA)<>''
   || 'T'
   || 'N'
   ?};
~~


\ppsf_h_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Suma godzin w dniu
::   WE: _a [DATE] - data badania
::       _b - tabela wyniku
::   WY: tabela z sumą godzin dla konta kosztów
::----------------------------------------------------------------------------------------------------------------------
_data:=_a;
_tab:=_b;
_tab_G:=exec('ppsf_rozl_buff','ppsf',P.ref,_data);
_tab_G.index(_tab_G.ndx_tmp(,,'OD',,));
_Rok:=_data~1;
_Msc:=_data~2;
{? _tab_G.find_le(_data)
|| {? _tab_G.WYC_DATA>#0 || _tab_G.DO:=_tab_G.WYC_DATA-1 ?};
   {? _tab_G.OD<P.DZA || _tab_G.OD:=P.DZA ?};
   {? P.DZ<>#0 & _tab_G.DO>P.DZ || _tab_G.DO:=P.DZ ?};
   {? _tab_G.OD<=_data & (_tab_G.DO=#0 | _tab_G.DO>=_data)
   || {? _tab_G.SKL_RCP<>'T' & __KAL.get_day(_data) & KAL_DEF.TYP='R'
      || _ok:=0;
         {? _tab_G.ZAKRES='H'
         || {? _tab_G.WYBDNI='T'
            || _ok:=($('_a.D'+$(_data~4)))(_tab_G)='T'
            ?}
         ?};
         {? _tab_G.ZAKRES='S' | _ok
         ||
::       liczba godzin nieobecności - zamieniamy na minuty
            _nb:=exec('suma_dni_N','nieobecnosc',1,_data,_data,,,'G','11542,11522');
            _lg:=((*KAL_DEF.CZAS)$2)-_nb*60;
            _tab.G:=_lg;
            _tab.RODZAJ:=_tab_G.GEN_G;
            _tab.RN:=_tab_G.G_G;
            _tab.SKL_RCP:=_tab_G.SKL_RCP;
            _tab.TYP:=_tab_G.TYP;
            _tab.add()
         ?}
      |? _tab_G.SKL_RCP='T'
      || _tab.blank();
         _tab.RODZAJ:=_tab_G.GEN_G;
         _tab.RN:=_tab_G.G_G;
         _tab.SKL_RCP:=_tab_G.SKL_RCP;
         _tab.TYP:=_tab_G.TYP;
         _tab.add()
      ?}
   ?}
?};
_tab


\ppsf_po_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli PPSF_PO.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują się pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(PPSF_PO)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='PPSF_NO'
|| _val:=PPSF_PO.PPSF_NO<>null();
   _TAB.efld_opt(_we,'enable=%1'[$_val],,'AKCEPT');
   _wx_size:=exec('ppsf_no_wx_size','ppsf');
   {! _lp:=1 .. _wx_size
   |! _vx:=_val & ($('PPSF_PO.PPSF_NO().W%1=\'T\' | PPSF_PO.PPSF_NO().W%1=\'N\''[$_lp]))();
      _TAB.efld_opt(_we,'enable=%1'[$_vx],,'O%1'[$_lp]);
      _TAB.efld_opt(_we,'enable=%1,editable=grayed'[$_vx],PPSF_NO,'W%1'[$_lp]);
      _TAB.efld_opt(_we,'enable=%1'[$_vx],,'PPSF_NO','TR%1'[$_lp])
   !}
?};

{? _fld='' | _fld='WYC'
|| _sval:=$(PPSF_PO.WYC='T');
   _TAB.efld_opt(_we,'enable=%1,mark=%1'[_sval],,'DO')
?};

1


\ppsf_adr_eopt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Gwiazdki dla okienka RED tabeli PPSF_ADR
::   WE: _a [INTEGER] - 1/0 (domyślne), włączenie/wyłącznie gwiazdek
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| _for:="
      {? exec('os_adres_kraj_bl','osoba')=PPSF_ADR.KRAJ
      || PPSF_ADR.efld_opt('RED','mark=1',,'MIASTO');
         PPSF_ADR.efld_opt('RED','mark=1',,'DOM')
      || PPSF_ADR.efld_opt('RED','mark=0',,'MIASTO');
         PPSF_ADR.efld_opt('RED','mark=0',,'DOM')
      ?}
   ";
   PPSF_ADR.fld_fml('KRAJ','AFTER_EDIT',_for);
   PPSF_ADR.fld_fml('MIASTO','BEFORE_DISPLAY',_for);
   PPSF_ADR.fld_fml('DOM','BEFORE_DISPLAY',_for)
|| PPSF_ADR.fld_fml('KRAJ','AFTER_EDIT',"*");
   PPSF_ADR.fld_fml('MIASTO','BEFORE_DISPLAY',"*");
   PPSF_ADR.fld_fml('DOM','BEFORE_DISPLAY',"*")
?}


\ppsf_adr_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli PPSF_ADR.
::----------------------------------------------------------------------------------------------------------------------
PPSF_ADR.HASH:=exec('ppsf_adr_hash','ppsf');
1


\ppsf_adr_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PPSF_ADR.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

exec('ppsf_adr_modb','ppsf');
__CHK.validate(PPSF_ADR
   ,$("_a.table(PPSF_ADR,"+$_put+",,'P','OD','A','TYP','KRAJ')")
   ,"_a.in_set(PPSF_ADR,'A',,'T','N')"
   ," KRAJE.cntx_psh();
      KRAJE.prefix();
      _pl:=PPSF_ADR.KRAJ().KODISO='PL';
      KRAJE.cntx_pop();
      {? _pl
      || _a.record(PPSF_ADR,,'MIASTO','DOM')
      || ''
      ?}
   "
   ," {? PPSF_ADR.DO<>date(0,0,0) & PPSF_ADR.DO<PPSF_ADR.OD
      || _a.err_incorrect('Data \\'Do dnia\\' nie może być wcześniejsza niż data \\'Od dnia\\'');
         'DO'
      || ''
      ?}
   "
   ,$("{? exec('ppsf_adr','overlap',"+$_put+") || 'DO' || '' ?}")
)


\ppsf_adr_hash_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła zwraca tablicę elementów nazwanych wykorzystywaną przy wyliczaniu skrótu SHA-1 dla adresu.
::   WE:
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
:: Uwagi:
::    1. Kolejność pól jest istotna - wpływa na wartość skrótu.
::    2. W polu KRAJ oczekiwany jest SYMBOL kraju.
_cfg:=obj_new('VAL','NAME','size');
_cfg.VAL:=obj_new('KRAJ','WOJEWODZ','POWIAT','GMINA','KOD','POCZTA','MIASTO','ULICA','DOM','LOKAL');
_cfg.NAME:=obj_ntab_names(_cfg.VAL);
_cfg.size:=obj_len(_cfg.NAME);
{! _lp:=1 .. _cfg.size
|! _cfg.VAL[_lp]:=''
!};
_cfg


\ppsf_adr_hash_calculate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Właściwe wyliczenie skrótu SHA-1 dla adresu przekazanego przez tablicę elementów nazwanych.
::   WE: _a [ARRAY] - Tablica elementów nazwanych (patrz \ppsf_adr_hash_cfg).
::   WY: Skrót SHA-1 elementów tablicy.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>0 & obj_ntab(_a)
|| _cfg:=_a
|| return('')
?};
_adr:='';
{! _lp:=1 .. _cfg.size
|! {? _cfg.VAL[_lp]<>''
   || _adr+='%1.%2|'[$_lp,_cfg.VAL[_lp]]
   ?}
!};
hash(_adr-1)


\ppsf_adr_hash
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła dla bieżącego rekordu (dane w buforze) wylicza i zwraca skrótu SHA-1 dla pól adresowych
::       tabeli PPSF_ADR.
::   WE:
::   WY: Skrót SHA-1 dla pól adresowych tabeli PPSF_ADR.
::----------------------------------------------------------------------------------------------------------------------
_cfg:=exec('ppsf_adr_hash_cfg','ppsf');
{! _lp:=1 .. _cfg.size
|! {? _cfg.NAME[_lp]='KRAJ'
   || {? PPSF_ADR.KRAJ<>null()
      || KRAJE.cntx_psh();
         KRAJE.prefix();
         _cfg.VAL.KRAJ:=PPSF_ADR.KRAJ().SYM;
         KRAJE.cntx_pop()
      ?}
   || _cfg.VAL[_lp]:=($('PPSF_ADR.%1'[_cfg.NAME[_lp]]))()
   ?}
!};
exec('ppsf_adr_hash_calculate','ppsf',_cfg)


\ppsf_adr_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła aktualizuje zapisy związane z adresami, dokładniej: wyszukuje, czy adres z tablicy _b istnieje już
::       w tabeli PPSF_ADR dla pracownika _a i jest aktywny w dniu _c.
::       Jeżeli tak, to właśnie ten adres zostanie zwrócony w odpowiedzi (bez wzgledu na typ tego adresu).
::       Jeżeli nie, to podjęta zostanie próba dodania tego adresu z data OD=_c i typem określonym przez _d.
::   WE: _a [REFERENCE] - Wskazanie pracownika.
::       _b [STRING]    - Typ adresu.
::       _c [ARRAY]     - Tablica elementów nazwanych (patrz \ppsf_adr_hash_cfg).
::       _d [DATE]      - Początek obowiązywania adresu.
::       _e [DATE]      - Koniec obowiązywania adresu.
::      [_f][NUMBER]    - Próba domknięcia kolidującego zapisu na datę _e-1?
::                        0 - Bez domykania [domyślnie]
::                        1 - z domykaniem
::   WY: Tabela elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('obj_ntab_set','#array',
:: Czy operacja aktualizacji powiodła się? [0/1]
   ,'ok',0
:: Treść komunikatu - przyczyna niepowodzenia.
   ,'msg','Wystąpił nieprzewidziany błąd.'@
:: Czy aktualizacja polegała na dodaniu rekordu? [0/1]
   ,'NEW',-1
:: Wskazanie rekordu z adresem.
   ,'REF',null()
:: Typ adresu.
   ,'TYP',''

:: Zapamiętanie odpowiednich danych z bieżącego rekordu PPSF_ADR + ustawienie statusu przetwarzania.
   ,'save'
);
_d0:=date(0,0,0);

{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=P
|| _prac:=_a
|| _ret.msg:='Nieprawidłowy typ parametru %1.'@['PREF'];
   return(_ret)
?};
{? var_pres('_b')=type_of('')
|| _ta:=exec('obj_ntab_set','#array',
      ,'ref',null()
      ,'K',''
   );
   PPSF_TA.cntx_psh();
   PPSF_TA.index('KOD');
   PPSF_TA.prefix(_b,);
   {? PPSF_TA.first()
   || _ta.ref:=PPSF_TA.ref();
      _ta.K:=PPSF_TA.K
   ?};
   PPSF_TA.cntx_pop();
   {? _ta.ref=null()
   || _ret.msg:='Nierozpoznana wartość parametru %1.'@['TYP'];
      return(_ret)
   ?}
|| _ret.msg:='Nieprawidłowy typ parametru %1.'@['TYP'];
   return(_ret)
?};
{? var_pres('_c')>0 & obj_ntab(_c)
|| _cfg:=_c
|| _ret.msg:='Nieprawidłowy typ parametru %1.'@['CFG'];
   return(_ret)
?};
{? var_pres('_d')<>type_of(_d0)
|| _ret.msg:='Nieprawidłowy typ parametru %1.'@['OD'];
   return(_ret)
|? _d=_d0
|| _ret.msg:='Nieprawidłowa wartość parametru %1.'@['OD'];
   return(_ret)
|| _od:=_d
?};
{? var_pres('_e')<>type_of(_d0)
|| _ret.msg:='Nieprawidłowy typ parametru %1.'@['DO'];
   return(_ret)
|? _e<>_d0 & _e<_d
|| _ret.msg:='Nieprawidłowa wartość parametru %1.'@['DO'];
   return(_ret)
|| _do:=_e
?};
_close_prev:=var_pres('_f')=type_of(0) & _f>0;

_ret.save:="
   _new:=_a;

   .ok:=1;
   .msg:='';
   .NEW:=_new;
   .REF:=PPSF_ADR.ref();
   .TYP:=PPSF_ADR.TYP().KOD
";

_hash:=exec('ppsf_adr_hash_calculate','ppsf',_cfg);

PPSF_TA.cntx_psh();
PPSF_TA.prefix();
PPSF_ADR.cntx_psh();

{? PPSF_ADR.index('HASH');
   PPSF_ADR.prefix('T',_prac,_hash,);
   PPSF_ADR.find_le(_od) & (PPSF_ADR.DO=_d0 | (_od<=PPSF_ADR.DO & _do<=PPSF_ADR.DO))
:: Podany adres istnieje już w tabeli i można się pod niego podpiąć - typ nie ma znaczenia.
|| _ret.save(0)

|| PPSF_ADR.blank();
   PPSF_ADR.P:=_prac;
   PPSF_ADR.TYP:=_ta.ref;
   PPSF_ADR.OD:=_od;
   PPSF_ADR.DO:=_do;
   _ok:=1;
   {! _lp:=1 .. _cfg.size
   |? _ok
   |! {? _cfg.NAME[_lp]='KRAJ'
      || {? _cfg.VAL.KRAJ<>''
         || KRAJE.cntx_psh();
            KRAJE.index('KRAJE');
            KRAJE.prefix(_cfg.VAL.KRAJ,);
            {? KRAJE.first()
            || PPSF_ADR.KRAJ:=KRAJE.ref()
            || _ret.msg:='Brak w słowniku kraju o symbolu %1.'@[_cfg.VAL.KRAJ];
               _ok:=0
            ?};
            KRAJE.cntx_pop()
         || _ret.msg:='Nie podano sybolu kraju.'@;
            _ok:=0
         ?}
      || ($('PPSF_ADR.%1:=_a.%1'[_cfg.NAME[_lp]]))(_cfg.VAL)
      ?}
   !};

   {? _ok
   || _mydo:=do_state()=0;
      {? _mydo || do() ?};
      _add:=1;
      {? _close_prev
      || _adr_ref:=exec('ppsf_adr','overlap',0,2);
         PPSF_ADR.cntx_psh();
         PPSF_ADR.prefix();
         {? _adr_ref & PPSF_ADR.seek(_adr_ref)
         || {? PPSF_ADR.DO<>#0
            || PPSF_ADR.DO:=_od-1
            || _ret.ok:=1;
               _ret.REF:=PPSF_ADR.ref();
               _add:=0
            ?};
::          sprawdzamy czy skrócenie kolidującego adresu nie spowoduje innej kolizji (nie powinno)
            {? PPSF_ADR.DO>=PPSF_ADR.OD & PPSF_ADR.put() & exec('ppsf_adr','overlap',1,2)
            || undo()
            ?}
         ?};
         PPSF_ADR.cntx_pop()
      ?};

      {? _add || _ret.msg:=exec('ppsf_adr','overlap',0,1) ?};
      {? _add & _ret.msg=''
      || {? PPSF_ADR.add()
         || _ret.save(1)
         || _ret.msg:='Dołączenie adresu nie powiodło się.'@
         ?}
      ?};
      {? _mydo || end() ?}
   ?}
?};

PPSF_ADR.cntx_pop();
PPSF_TA.cntx_pop();

_ret


\opis_warp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Szczegóły pracy zdalnej dla wydruku: A1) informacja o warunkach pracy (zaswwarp.rpm)
::       Kontekst musi być ustalony.
::   WE: _a [STRING] - Identyfikator informacji 'harm', 'dnih', 'adres'
::   WY:
::  OLD: \opis_warp/ppsf.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:='';
{? var_pres('_a')<>type_of('') || return(_ret) ?};
{? _a='harm'
|| _ret:=
      'w trybie %1 w terminie od %2 %3'@
         [
         {? PPSF_H.PPSFROZD().ZAKRES='S' || 'stałym' || 'hybrydowym' ?},
         $PPSF_H.OD,
         {? PPSF_H.DO=#0 || 'bezterminowo'@ || 'do %1'@[$PPSF_H.DO] ?}
         ]
|? _a='dnih'
|| {? PPSF_H.DRUK_U='T'
   || PPSF_H.PPSFROZD();
      PPSFROZD.memo_txt(,1,'TEKST')
   || ''
   ?}
|? _a='adres'
|| _pocz:=exec('opis_warp','ppsf','poczta');
   _ul:=exec('opis_warp','ppsf','ulica');
   {? |PPSF_ADR.POCZTA<>'' & |PPSF_ADR.POCZTA<>|PPSF_ADR.MIASTO & +PPSF_ADR.ULICA
   || _pocz+=', '+PPSF_ADR.MIASTO
   ?};
   _ret:=_pocz+{? +_pocz & +_ul || ', ' || '' ?}+{? +_ul || _ul || '' ?}
|? _a='poczta'
|| _ret:=PPSF_ADR.KOD+' '+{? |PPSF_ADR.POCZTA='' || PPSF_ADR.MIASTO || PPSF_ADR.POCZTA ?}
|? _a='ulica'
|| _ret:={? +PPSF_ADR.ULICA || PPSF_ADR.ULICA || PPSF_ADR.MIASTO ?}+' '+PPSF_ADR.DOM+
      {? |PPSF_ADR.LOKAL='' || '' || ' m. '+PPSF_ADR.LOKAL ?}
|? _a='ppsf_ud'
|| _ret:='Jednostka organizacyjna, w której strukturze znajduje się stanowisko pracy wykonującego pracę zdalną'
|? _a='ppsf_oo'
|| _ret:='Odpowiedzialny za współpracę z pracownikiem i upoważniony do przeprowadzania kontroli w miejscu wykonywania '
      'pracy'
?};
_ret


\wybor_do_druku_umowy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Wskazanie na pracę zdalną dla wydruku umowy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ppsfObj:=_a;
_ws:=PPSF_H.mk_sel('Praca poza siedzibą firmy'@,'P',0,'#ppsf_h16823467',,,,,'U','T',,,,'normal');
PPSF_H.win_fld(_ws,,'PPSFROZD','KOD',,2,0,,'Rozkład - kod'@,,'Definicja rozkładu'@);
PPSF_H.win_fld(_ws,,'PPSFROZD','NAZWA',,2,0,,'Rozkład - nazwa'@,,'Definicja rozkładu'@);
PPSF_H.win_fld(_ws,,'OD',,,10,0,,'Obowiązuje od'@,,'Data obowiązywania od'@);
PPSF_H.win_fld(_ws,,'DO',,,10,0,,'Obowiązuje do'@,,'Data obowiązywania do'@);
_fa:="sel_exit()";
PPSF_H.win_act(_ws,0,'Formuła','Wybierz'@@,,,,_fa,1,,,,'W');
PPSF_H.win_btn(_ws,'text=%1'['Wybierz'@],'menu:W');
PPSF_H.win_act(_ws,0,'Kolejność');
PPSF_H.win_sel(_ws);

_ppsfObj.jest:=0;
_ppsfObj.PPSF_H:='';
_ppsfObj.pobierz:="
   .jest:=0;
   .PPSF_H:='';
   _wh:=''+\"
      PPSF_H.P=:_a and
      PPSF_H.AKT='T' and
      PPSF_H.DRUK_U='T' and
      PPSF_H.ORIGIN='U' and
      (PPSF_H.OD<=to_date(:_c) or to_date(:_c) is null) and
      (PPSF_H.DO>to_date(:_b) or PPSF_H.DO is null)
   \";
   {? ~PPSF_H.f_set(,,_wh,P.ref(),H_UM.OD,H_UM.DO)
   || PPSF_H.f_set(,,'0=1')
   ?};
   {? PPSF_H.f_first()
   || {! |?
         .jest+=1;
         PPSF_H.f_next()
      !};
      {? .jest=1
      || .PPSF_H:=$PPSF_H.ref()
      |? .jest>1
      || {? PPSF_H.select()
         || .jest:=1;
            .PPSF_H:=$PPSF_H.ref()
         ?}
      ?}
   ?}
"


\is_pzd02
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Sprawdza czy jest naniesiona definicja aktualizacji 22.26_pzd02
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
var_pres('WPZ',@.STAZ)>0
& var_pres('DEF_MEMO',@.ETYP_ATR)>0
& var_pres('W7',@.PPSF_NO)>0
& var_pres('O7',@.PPSF_PO)>0
& var_pres('PPSF_ADR',@.R_POR_WW)>0


\ppsf_wnio_exists
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Sprawdzenie czy pracownik ma złożony wniosek o pracę zdalną w wybranym dniu
::   WE: _a  [REFERENCE] - wskazanie na pracownika
::       _b  [DATE]      - data od badania
::       _c  [DATE]      - data do badania
::      [_d] [REFERENC]  - wskazanie na typ pracy zdalnej
::      [_e] [NUMBER]    - czy uwzględniać rozkład?
::      [_f] [REFERENCE] - wskazanie na rodzaj pracy
::   WY: obiekt z polami REF, WYBDNI
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('REF','WYBDNI');
:: null/ref wniosku (PPSFN lub PPSF_H)
_result.REF:=null();
:: zwraca informację, czy istniejący wniosek ma rozkład na wybrane dni i czy one znajdują się w okresie badania
_result.WYBDNI:=0;

  _p_ref:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
_data_od:={? var_pres('_b')=type_of(#0)     || _b || return(_result) ?};
_data_do:={? var_pres('_c')=type_of(#0)     || _c || return(_result) ?};
  _ppsft:={? var_pres('_d')=type_of(null()) || _d || null()          ?};
 _wybdni:={? var_pres('_e')=type_of(0)      || _e || 0               ?};
  _ppsfr:={? var_pres('_f')=type_of(null()) || _f || null()          ?};

PPSFT.cntx_psh();
:: wyszukujemy wniosek o pracę zdalną okazjonalną
PPSFN.cntx_psh();
PPSFN.index('DATA');
PPSFN.prefix(exec('firma','ustawienia'),_p_ref);
{? PPSFN.find_le(_data_od) | PPSFN.first()
|| {!
   |? {? PPSFN.OD<=_data_do & (PPSFN.DO>=_data_od | PPSFN.DO=#0) &
         (_ppsft=null() | PPSFN.PPSFT=_ppsft) &
         (_ppsfr=null() | PPSFN.PPSFT().PPSFR=_ppsfr)
      || _result.REF:=PPSFN.ref()
      ?};
      ~_result.REF & PPSFN.next()
   !}
?};
PPSFN.cntx_pop();

:: wyszukujemy wniosek o pracę zdalną stałą
{? ~_result.REF
|| PPSF_H.cntx_psh();
   PPSF_H.index('PRAC_AKT');
   PPSF_H.prefix(_p_ref,'T');
   {? PPSF_H.find_le(_data_od) | PPSF_H.first()
   || {!
      |? {? PPSF_H.OD<=_data_do & (PPSF_H.DO>=_data_od | PPSF_H.DO=#0) &
            (_ppsft=null() | PPSF_H.PPSFT=_ppsft) &
            (_ppsfr=null() | PPSF_H.PPSFT().PPSFR=_ppsfr)
         || {? _wybdni=0 | PPSF_H.PPSFROZD().WYBDNI='N'
            || _result.REF:=PPSF_H.ref()
            |? PPSF_H.PPSFROZD().WYBDNI='T'
            || _start:={? PPSF_H.OD<_data_od || _data_od || PPSF_H.OD ?};
               _end:={? PPSF_H.DO=#0 | PPSF_H.DO>_data_do || _data_do || PPSF_H.DO ?};
               _jest:=0;
               {! _ind:=#_start .. #_end
               |? ~_jest
               |! _data:=#_ind;
                  _jest:=($('PPSFROZD.D%1=_a'[$(_data~4)]))('T')
               !};
               {? _jest
               || _result.REF:=PPSF_H.ref();
                  _result.WYBDNI:=1
               ?}
            ?}
         ?};
         ~_result.REF & PPSF_H.next()
      !}
   ?};
   PPSF_H.cntx_pop()
?};
PPSFT.cntx_pop();

_result


\ppsf_po_exists
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Sprawdzenie czy pracownik ma złożone oświadczenie na podany zakres dat
::   WE: _a  [REFERENCE] - wskazanie na typ oświadczenia
::       _b  [REFERENC]  - wskazanie na pracownika
::       _c  [DATE]      - data od
::       _d  [DATE]      - data do
::      [_e] [STRING]    - co uwzględniać:
::                        'T' - tylko zaakcpetowane, 'N' - tylko niezaakceptowane, '' - wszystkie [domyślnie]
::   WY: null/ref oświadczenia (PPSF_PO.ref())
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
{? ~exec('is_pzd02','ppsf')
|| return(_result)
?};
_ppsf_no:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
  _p_ref:={? var_pres('_b')=type_of(null()) || _b || return(_result) ?};
_data_od:={? var_pres('_c')=type_of(#0)     || _c || return(_result) ?};
_data_do:={? var_pres('_d')=type_of(#0)     || _d || return(_result) ?};
    _akc:={? var_pres('_e')=type_of('')     || _e || ''              ?};

PPSF_PO.cntx_psh();
PPSF_PO.index('UNIQUE');
PPSF_PO.prefix(_ppsf_no,_p_ref);
{? PPSF_PO.find_le(_data_od) | PPSF_PO.first()
|| {!
   |? {? (_akc='' | PPSF_PO.AKCEPT=_akc) & (PPSF_PO.OD<=_data_od) &
         (PPSF_PO.DO=#0 | (PPSF_PO.DO>=_data_do & _data_do<>#0))
      || _result:=PPSF_PO.ref()
      ?};
      ~_result & PPSF_PO.next()
   !}
?};
PPSF_PO.cntx_pop();

_result


\wybor_do_druku_aneksu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Wskazanie na pracę zdalną i adres dla wydruku aneksu
::   WE: _a [OBJ] - parametry:
::          jestH, jestA - ilość rekordów spełniających warunki dla PPSF_H, PPSF_ADR
::          PPSF_H, PPSF_ADR - wskazanie na rekord
::          drukH, drukA - czy drukować, może być tak, że trzeba drukować PUSTE, bo "gaśnie" ważność w aneksie
::          pobierz - formuła pobierająca dane
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ppsfObj:=_a;
params_set(params_get());
_ws:=PPSF_H.mk_sel('Praca poza siedzibą firmy'@,'P',0,'#ppsf_h16823467',,,,,'P','T',,,,'normal');
PPSF_H.win_fld(_ws,,'PPSFROZD','KOD',,2,0,,'Rozkład - kod'@,,'Definicja rozkładu'@);
PPSF_H.win_fld(_ws,,'PPSFROZD','NAZWA',,2,0,,'Rozkład - nazwa'@,,'Definicja rozkładu'@);
PPSF_H.win_fld(_ws,,'OD',,,10,0,,'Obowiązuje od'@,,'Data obowiązywania od'@);
PPSF_H.win_fld(_ws,,'DO',,,10,0,,'Obowiązuje do'@,,'Data obowiązywania do'@);
_fa1:="
   _tmp:=params_get();
   _tmp.obj.exit_code:=1;
   params_set(_tmp);
   sel_exit()
";
PPSF_H.win_act(_ws,0,'Formuła','Wybierz'@@,,,,_fa1,1,,,,'W');
PPSF_H.win_btn(_ws,'text=%1'['Wybierz'@],'menu:W');
_fa2:="
   _tmp:=params_get();
   _tmp.obj.exit_code:=2;
   params_set(_tmp);
   sel_exit()
";
PPSF_H.win_act(_ws,0,'Formuła','Przestaje o&bowiązywać'@@,,,,_fa2,,,,,'B');
PPSF_H.win_btn(_ws,'text=%1'['Przestaje o&bowiązywać'@],'menu:B');
_fb:="
   _act:='';
   {? PPSF_H.DO<>#0 & (PPSF_H.DO<H.DO | H.DO=#0) & PPSF_H.OD<H.OD || _act+='W' ?};
   {? PPSF_H.OD>=H.OD & PPSF_H.DO=#0 || _act+='B' ?};
   {? PPSF_H.DO>H.DO & H.DO<>#0 || _act+='B' ?};
   {? PPSF_H.DO<>#0 & (PPSF_H.DO<H.DO | H.DO=#0)
   || _do:=PPSF_H.DO+1;
      PPSF_H.cntx_psh();
      {? PPSF_H.next() & PPSF_H.OD=_do || _act+='B' ?};
      PPSF_H.cntx_pop()
   ?};
   PPSF_H.actions_grayed(PPSF_H.win_sel('?'),_act)
";
PPSF_H.win_act(_ws,0,'Rekord',,,,_fb);
PPSF_H.win_sel(_ws);

_ws:=PPSF_ADR.mk_sel('Adresy praca poza siedzibą firmy'@,'P',0,'#ppsf_a16823467',,,,,'P','T',,,,'normal');
PPSF_ADR.win_fld(_ws,,'OD',,,10,0,,'Od dnia'@,,'Obowiązuje od'@);
PPSF_ADR.win_fld(_ws,,'DO',,,10,0,,'Do dnia'@,,'Obowiązuje do'@);
PPSF_ADR.win_fld(_ws,,'TYP','KOD',,20,0,,'Typ adresu'@,,'Typ adresu pracy zdalnej'@);
PPSF_ADR.win_fld(_ws,,'MIASTO',,,30,0,,'Miejscowość'@);
PPSF_ADR.win_fld(_ws,,'ULICA',,,30,0,,'Ulica'@);
PPSF_ADR.win_fld(_ws,,'DOM',,,10,0,,'Dom'@);
PPSF_ADR.win_fld(_ws,,'LOKAL',,,10,0,,'Lokal'@);
_fa:="
   _tmp:=params_get();
   _tmp.obj.PPSF_ADR+=$PPSF_ADR.ref()+';';
   params_set(_tmp);
   {? PPSF_ADR.f_active() || PPSF_ADR.f_next() || PPSF_ADR.next() ?}
";
PPSF_ADR.win_act(_ws,0,'Formuła','Wybierz'@@,,,,_fa,1,1,,,'W');
PPSF_ADR.win_btn(_ws,'text=%1'['Wybierz'@],'menu:W');
_fa:="
   _tmp:=params_get();
   _tmp.obj.PPSF_ADR:=gsub(_tmp.obj.PPSF_ADR,$PPSF_ADR.ref()+';','');
   params_set(_tmp);
   {? PPSF_ADR.f_active() || PPSF_ADR.f_next() || PPSF_ADR.next() ?}
";
PPSF_ADR.win_act(_ws,0,'Formuła','Cofnij wybór'@@,,,,_fa,,1,,,'C');
PPSF_ADR.win_btn(_ws,'text=%1'['Cofnij wybór'@],'menu:C');
_fa:="sel_exit()";
PPSF_ADR.win_act(_ws,0,'Formuła','Dalej'@@,,,,_fa,,,,,'D');
PPSF_ADR.win_btn(_ws,'text=%1'['Dalej'@],'menu:D');
_fb:="
   _act:='';
   _tmp:=params_get();
   {? _tmp.obj.PPSF_ADR*$PPSF_ADR.ref()
   || _act:='W'
   || _act:='C'
   ?};
   PPSF_ADR.actions_grayed(PPSF_ADR.win_sel('?'),_act);
   _act='W'
";
PPSF_ADR.win_act(_ws,0,'Rekord',,,,_fb);
PPSF_ADR.win_sel(_ws);

_ppsfObj.jestH:=_ppsfObj.jestA:=0;
_ppsfObj.brakH:=_ppsfObj.brakA:=0;
_ppsfObj.drukH:=_ppsfObj.drukA:=0;
_ppsfObj.PPSF_H:=_ppsfObj.PPSF_ADR:='';
_ppsfObj.CFG:='000000';

:: w trakcie trwania przebiegu H mogą zaistnieć przypadki dla PPSF_H i PPSF_ADR
:: jeśli jest więcej niż 1, należy wskazać który, ale warunki ...
::    OD>=H.OD i OD<H.DO dla rekordów do wskazania
:: jeśli jest 1, to drukować bo się pojawiło jeśli:
::    OD>=H.OD i OD<H.DO
:: jeśli jest 1, to drukować PUSTE, bo zniknęło jeśli:
::    OD<H.DO i DO<H.DO

_ppsfObj.pobierz:="
   params_set(params_get());
   .jestH:=.jestA:=0;
   .brakH:=.brakA:=0;
   .drukH:=.drukA:=0;
   .PPSF_H:=.PPSF_ADR:='';
   PPSF_H.index('PRAC_AKT');
   PPSF_ADR.index('PRAC_AK');
   _typ:=exec('FindInSet','#table','PPSF_TA','KOD','AD HOC',,,1);
:: analiza pracy zdalnej stałej
   _tmp:=PPSF_H;
   _filtr:='';
   _wh:=''+\"
      PPSF_H.P=:_a and
      PPSF_H.AKT='T' and
      PPSF_H.DRUK_U='T' and
      PPSF_H.ORIGIN='U' and
      (PPSF_H.OD<=to_date(:_c) or to_date(:_c) is null) and
      (PPSF_H.DO>=to_date(:_b) or PPSF_H.DO is null)
   \";
   {? ~PPSF_H.f_set(,,_wh,P.ref(),H.OD,H.DO)
   || PPSF_H.f_set(,,'0=1')
   ?};
   {? PPSF_H.f_first()
   || _jedyny:='';
      {! |?
         {? PPSF_H.OD=H.OD & PPSF_H.DO=H.DO
         || _jedyny:=$PPSF_H.ref();
            .jestH+=1
         |? PPSF_H.OD>=H.OD
         || .jestH+=1;
            .drukH+=1;
            _filtr+=''''+$PPSF_H.ref()+''','
         |? PPSF_H.DO<>#0 & (PPSF_H.DO<H.DO | H.DO=#0)
         || .drukH+=1;
            .brakH+=1;
            _filtr+=''''+$PPSF_H.ref()+''','
         ?};
         PPSF_H.f_next()
      !};
      {? (.jestH+.brakH) & .drukH
      || {? ~PPSF_H.f_set(,,'REFERENCE in (:_a)',_filtr-1)
         || PPSF_H.f_set(,,'0=1')
         ?};
         {? PPSF_H.select()
         || .PPSF_H:=$PPSF_H.ref();
            {? .exit_code=1
            || .jestH:=1;
               .brakH:=0
            || .jestH:=0;
               .brakH:=1
            ?};
            .drukH:=1
         || .jestH:=.drukH:=.brakH:=0;
            .PPSF_H:=''
         ?}
      |? +_jedyny
      || .PPSF_H:=_jedyny;
         .drukH+=1
      ?}
   ?};

:: analiza adresów, tylko jeśli jest praca zdalna
   {? +|.PPSF_H
   || _filtr:='';
      _wh:=''+\"
         PPSF_ADR.P=:_a and
         PPSF_ADR.A='T' and
         PPSF_ADR.TYP<>:_d and
         PPSF_ADR.OD>=to_date(:_b) and
         (PPSF_ADR.OD<to_date(:_c) or to_date(:_c) is null)
      \";
      {? ~PPSF_ADR.f_set(,,_wh,P.ref(),H.OD,H.DO,_typ)
      || PPSF_ADR.f_set(,,'0=1')
      ?};
      {? .exit_code=1 & PPSF_ADR.f_first()
      || _jedyny:='';
         {! |?
            _filtr+=''''+$PPSF_ADR.ref()+''',';
            {? PPSF_ADR.OD=H.OD & PPSF_ADR.DO=H.DO
            || _jedyny:=$PPSF_ADR.ref();
               .jestA+=1
            || .jestA+=1;
               .drukA+=1
            ?};
            PPSF_ADR.f_next()
         !};
         {? .jestA & .drukA
         || {? ~PPSF_ADR.f_set(,,'REFERENCE in (:_a)',_filtr-1)
            || PPSF_ADR.f_set(,,'0=1')
            ?};
            {? PPSF_ADR.select()
            || .jestA:=1;
               .brakA:=0;
               .drukA:=1
            || .jestA:=.drukA:=.brakA:=0;
               .PPSF_ADR:=''
            ?}
         |? +_jedyny
         || .PPSF_ADR:=_jedyny;
            .drukA+=1
         ?}
      ?}
   ?};
   .CFG:=$.jestH+$.jestA+$.brakH+$.brakA+$.drukH+$.drukA
"


\r_por_ww_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Podgląd danych R_POR_WW
::   WE: _a [REF] - wskazanie na pracownika
::       [_b] [DATE] - data, brak to pytanie o rok i miesiąc
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null())
|| _select:=0;
   Cntx.psh(R_POR_WW,PPSFT);
   PPSFT.index('NAZRODZ');
   PPSFT.prefix(exec('firma','ustawienia'),'T',);
   PPSFT.fld_fml('SKL_RCP','BLANK',"'T'");
   R_POR_WW.fld_attr('CREATOR',2);
   R_POR_WW.win_sel('WER');
   {? var_pres('_b')=type_of(date())
   || MASK.Use('R_POR_WW',_b~1,_b~2);
      R_POR_WW.index('DZK');
      R_POR_WW.prefix(P.ref(),_b);
      _select:=1
   || VAR_EDIT.win_edit('PRDN_DAT');
      VAR_EDIT.hdr_edit('Parametry'@);
      {? ~VAR_EDIT.ROK | ~VAR_EDIT.MSC
      || VAR_EDIT.ROK:=date()~1; VAR_EDIT.MSC:=date()~2
      ?};
      {? VAR_EDIT.edit()
      || MASK.Use('R_POR_WW',VAR_EDIT.ROK,VAR_EDIT.MSC);
         R_POR_WW.index('DZK');
         R_POR_WW.prefix(P.ref());
         _select:=1
      ?}
   ?};
   {? _select || R_POR_WW.select() ?};
   PPSFT.fld_fml('SKL_RCP','BLANK',"*");
   R_POR_WW.fld_attr('CREATOR',1);
   Cntx.pop(R_POR_WW,PPSFT)
|| FUN.emsg('Nieprawidłowe argumenty wywołania'@);
   0
?}


\start_rcp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wykaz zarejestrowanych na portalu informacji o rozpoczęciu pracy w danym dniu pracy (nie kalendarzowym).
::       Dla podanego typu.
::       Założenia: podany zakres dni dotyczy jednego miesiąca kalendarzowego.
::   WE: _a [DATE] - data od
::       _b [DATE] - data do
::       _c [STRING] - PPSFT.REFERENCE
::   WY: tabela z niepowtarzającymi się dniami rozpoczęcia pracy
::  OLD: \opis_warp/ppsf.fml
::----------------------------------------------------------------------------------------------------------------------
_od:=_a;
_do:=_b;
_typ:=_c;
{? _do>date(_od~1,_od~2,0) || _do:=date(_od~1,_od~2,0) ?};

_year:=($(_od~1))+2;
_month:={? (_mc:=_od~2)>=10 || $_mc || '0%1'[$_mc] ?};
R_POR_WW.use('r_ph%1%2'[_year,_month]);

_tab:=sql('
   select distinct   R_POR_WW.DZK DZK
   from  R_POR_WW where R_POR_WW.TP=\'WE\' and
         R_POR_WW.DZK>=to_date(:_a) and
         R_POR_WW.DZK<=to_date(:_b) and
         R_POR_WW.P=\':_c\' and
         R_POR_WW.PPSFT=\':_d\'
   ',_od,_do,$P.ref,_typ);
_tab


\ppsf_no_wx_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła zwraca liczbę obsługiwanych zgód na oświadczeniach.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_pzd02','ppsf') || 8 || 6 ?}


\ppsf_po_akcept_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła wylicza wartość pola PPSF_PO.AKCEPT na podstawie udzielonych zgód (PPSF_PO.Ox).
::   WE:
::   WY: T/N
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
PPSF_NO.cntx_psh();
PPSF_NO.prefix();
PPSF_PO.PPSF_NO();
_wx_size:=exec('ppsf_no_wx_size','ppsf');
{! _lp:=1 .. _wx_size
|? _ok
|! {? ($('PPSF_NO.W%1=\'T\''[$_lp]))()
   || _ok:=($('PPSF_PO.O%1=\'T\''[$_lp]))()
   ?}
!};
PPSF_NO.cntx_pop();
{? _ok || 'T' || 'N' ?}


\ppsfh_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PPSF_H.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::       [_b] [NUMBER] - czy zwracamy akronimy pól czy pełen tekst komunikatu
::             0 - Akronimy [domyślnie];
::             1 - Pełen tekst komunikatu.
::       [_c] [NUMBER] - Pomiń sprawdzanie unikalności kluczy [0*/1].
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
_ret_kom:=var_pres('_b')=type_of(0) & _b;
_nondx:=var_pres('_c')=type_of(0) & _c;

__CHK.validate(PPSF_H
   ,{? _nondx
    || "_a.record(PPSF_H,,'OD','PPSFT','PPSFROZD','OO')"
    || $("_a.table(PPSF_H,"+$_put+",,'OD','PPSFT','PPSFROZD','OO')")
    ?}
   ,"_a.in_set(PPSF_H,'AKT',,'T','N')"
   ,"_a.in_set(PPSF_H,'DRUK_U',,'T','N')"
   ,"_a.in_set(PPSF_H,'WYC',,'T','N')"
   ,"_a.in_set(PPSF_H,'ORIGIN',,'P','W','U','R')"

   ,$("{? PPSF_H.DO<>#0 & PPSF_H.OD>PPSF_H.DO
       || _text:='Data \"%1\" musi być wcześniejsza niż \"%2\".'@[MS.name(PPSF_H,'OD'),MS.name(PPSF_H,'DO')];"
          +{? _ret_kom || "_text" || "_a.err_msg(_text);'OD'"?}+"
       || ''
       ?}"
     )
   ,$("{? PPSF_H.WYC='T' & PPSF_H.WYC_DATA=#0
       || _text:='Należy uzupełnić pole \"%1\".'@[MS.name(PPSF_H,'WYC_DATA')];"
          +{? _ret_kom || "_text" || "_a.err_msg(_text);'WYC_DATA'"?}+"
       || ''
       ?}"
     )
   ,$("{? PPSF_H.WYC='T' & PPSF_H.OD>PPSF_H.WYC_DATA
       || _text:='Data \"%1\" nie może być wcześniejsza niż \"%2\".'@[MS.name(PPSF_H,'WYC_DATA'),MS.name(PPSF_H,'OD')];"
          +{? _ret_kom || "_text" || "_a.err_msg(_text);'WYC_DATA'"?}+"
       || ''
       ?}"
     )
   ,$("{? PPSF_H.DO<>#0 & PPSF_H.DO<PPSF_H.WYC_DATA
       || _text:='Data \"%1\" nie może być póżniejsza niż \"%2\".'@[MS.name(PPSF_H,'WYC_DATA'),MS.name(PPSF_H,'DO')];"
          +{? _ret_kom || "_text" || "_a.err_msg(_text);'WYC_DATA'"?}+"
       || ''
       ?}"
     )
)


\jest_ppsfn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Sprawdza czy w danym okresie występuje praca poza siedzibą firmy
::   WE:  _a [DATE]   - data OD
::        _b [DATE]   - data DO
::        _c [_P]     - wskazanie pracownika
::       [_d][INTEGER]- Pomijaj nagłowki na część dnia - 0*/1, domyślnie nie pomijaj
::   WY: 0/1   0 - nie występuje, 1 - występuje
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
{? ~exec('is_pzd01','ppsf')
|| return(_ret)
?};
_d0:=date(0,0,0);
{? var_pres('_a')=type_of(_d0) & var_pres('_b')=type_of(_d0) &
   var_pres('_c')=type_of(null()) & _c<>null() & ref_tab(_c)=P
|| _od:=_a;
   _do:=_b;
   _prac:=_c
|| FUN.error('Błąd parametrów wejściowych!'@);
   return(_ret)
?};
_noPartday:={? var_pres('_d')=type_of(0) || _d || 0 ?};
_firma:=exec('firma','ustawienia');
PPSFN.cntx_psh();
{? _noPartday
|| PPSFN.index('PARTDATE');
   PPSFN.prefix(_firma,_prac,'N')
|| PPSFN.index('PRAC');
   PPSFN.prefix(_firma,_prac)
?};
{? _od=_d0 & _do=_d0
|| _ret:=PPSFN.first()
|? _od=_d0
|| _ret:=PPSFN.find_tab(1,'OD',,'<=',_do)
|? _do=_d0
|| _ret:=PPSFN.find_tab(1,'DO',,'>=',_od)
|| _ret:=PPSFN.find_tab(1,'OD',,'<=',_do,'DO',,'>=',_od)
?};
PPSFN.cntx_pop();
_ret


\r_por_ww_tp_we
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Wartość symbolizująca wejście.
::   WE:
::   WY: 'WE'
::----------------------------------------------------------------------------------------------------------------------
'WE'


\r_por_ww_tp_wy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Wartość symbolizująca wyjście.
::   WE:
::   WY: 'WY'
::----------------------------------------------------------------------------------------------------------------------
'WY'


\numer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Ustalenie numeru kolejnego
::   WE: _a [REF] - wskazanie na rekord poprawiany
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nr:=1;
_dz:=R_POR_WW.DZ;
_gd:=R_POR_WW.GD;
_tp:=R_POR_WW.TP;
R_POR_WW.cntx_psh();
R_POR_WW.index('DZK');
R_POR_WW.prefix(R_POR_WW.P,R_POR_WW.DZK);
{? R_POR_WW.first()
|| {!
   |? {? R_POR_WW.DZ<_dz | (R_POR_WW.DZ=_dz & R_POR_WW.GD<_gd) & R_POR_WW.ref()<>_a
      || _tmp:={? R_POR_WW.TP=_tp || R_POR_WW.NR+1 || R_POR_WW.NR ?};
         {? _tmp>_nr || _nr:=_tmp ?};
         R_POR_WW.next()
      || 0
      ?}
   !}
?};
R_POR_WW.cntx_pop();
_nr


\r_por_ww_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};
_pzd02:=exec('is_pzd02','ppsf');
_webterm:=+app_info('web_sesid');

__CHK.validate(R_POR_WW,
   {? _pzd02
   || {? _webterm & exec('get_par','#parametr',339,2)='N'
      || $("_a.table(_b,"+$_mode+",,'P','DZ','DZK','TP','POR','PPSFT','PPSF_ADR')")
      || $("_a.table(_b,"+$_mode+",,'P','DZ','DZK','TP','POR','PPSFT')")
      ?}
   || $("_a.table(_b,"+$_mode+",,'P','DZK','NR','DZ','TP','POR')")
   ?},
   "_a.in_set(_b,'TP',,exec('r_por_ww_tp_we','ppsf'),exec('r_por_ww_tp_wy','ppsf'))",
   "_a.in_set(_b,'POR',,'T','N')",
   "{? _b.DZ<_b.DZK
    || _a.err_msg(
         'Data %1 pracy nie może poprzedzać daty okresu, dla którego są wprowadzane dane (%2).'@
            [{? _b.TP=exec('r_por_ww_tp_we','ppsf') || 'rozpoczęcia'@ || 'zakończenia'@ ?},$_b.DZK]
       )
    || 1
    ?}
   ",
   "  {? -(2+R_POR_WW.TP)='we' & R_POR_WW.GD=time(24,0,0)
      || _a.err_msg('Nieprawidłowa wartość w polu \"Godzina\".\nDla wejścia należy wprowadzić: 00:00:00.'@)
      |? -(2+R_POR_WW.TP)='wy' & R_POR_WW.GD=time(0,0,0)
      || _a.err_msg('Nieprawidłowa wartość w polu \"Godzina\".\nDla wyjścia należy wprowadzić: 24:00:00.'@)
      || 1
      ?}
   ",
   "{? _b.NR=1 & _b.TP=exec('r_por_ww_tp_we','ppsf') & _b.DZ>_b.DZK
    || _a.err_msg('%1\n%2'@[
            'Nieprawidłowa data dla pierwszego wejścia w bieżącym dniu.'@,
            'Prawidłowa data dla tworzonego zapisu to: %1.'@[$_b.DZK]
         ]
      )
    || 1
    ?}
   ",
   "_we:=1;
    {? _b.TP=exec('r_por_ww_tp_wy','ppsf')
    || R_POR_WW.cntx_psh();
       R_POR_WW.index('NR');
       R_POR_WW.prefix(_b.P,_b.DZK,_b.NR,exec('r_por_ww_tp_we','ppsf'));
       _we*=R_POR_WW.first();
       {? _we=0
::        sprawdzamy rozpoczęcie pracy w poprzednim dniu
       || R_POR_WW.prefix(R_POR_WW.P,R_POR_WW.DZK-1,R_POR_WW.NR,exec('r_por_ww_tp_we','ppsf'));
          _we:=R_POR_WW.last()
       ?};
       R_POR_WW.cntx_pop()
    ?};
    {? ~_we
    || _a.err_msg('Brak korespondującego zapisu wejścia (rozpoczęcia pracy) dla tworzonego zapisu wyjścia.'@)
    || 1
    ?}
   ",
   "_maxWy:={? #exec('get_par','#portal','PersonWorkCalOption')>2 || 2 || 1 ?};
   _pzd03:=exec('is_pzd03','ppsf');
    {? ((_pzd03 & _b.POR_NR=_maxWy) | (~_pzd03 & _b.NR=_maxWy)) & _b.TP=exec('r_por_ww_tp_wy','ppsf') & _b.DZ>_b.DZK+1
    || _a.err_msg('Nieprawidłowa data wyjścia (zakończenia pracy) dla bieżącej daty kalendarzowej.'@)
    || 1
    ?}
   ",
   $("_pzd03:=exec('is_pzd03','ppsf');
      _res:=
         {? #exec('get_par','#portal','PersonWorkCalOption')>2 &
            ((~_pzd03 & R_POR_WW.NR>1) | (_pzd03 & R_POR_WW.POR_NR>1))
         || exec('chk_next_pair','ppsf',"+$_mode+")
         || ''
         ?};
     {? _res<>'' || _a.err_msg(_res) || 1 ?}
   "),
   $("_res:=exec('r_por_ww_nr_ae','ppsf',"+$_mode+");
      {? _res<>'' || _a.err_msg(_res) || 1 ?}
   "),
   "_res:=exec('date_coverage','ppsf');
    {? _res<>'' || _a.err_msg(_res) || 1 ?}
   "
)


\act_uid_pkw_por_irss
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [22.26]
:: OPIS: Zwraca identyfikator czynności PKW_POR_IRSS - Rejestracja Start / Stop
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'PKW_POR_IRSS'


\r_por_ww_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Po edycji wiersza tabeli R_POR_WW.
::   WE:
::   WY: 1 w przypadku gdy rekord jest poprawny, akronim wymaganego pola lub 0 gdy doszło do powielenia klucza.
::----------------------------------------------------------------------------------------------------------------------
_webterm:=+app_info('web_sesid');
_pzd03:=exec('is_pzd03','ppsf');
{? _webterm
|| _act_uid:=exec('act_uid_pkw_por_irss','ppsf');
   VAR_EDIT.ROK:=exec('web_global_params_get','pkw',_act_uid,'ROK',date~1);
   VAR_EDIT.MSC:=exec('web_global_params_get','pkw',_act_uid,'MSC',date~2)
|? AreaTitle.area='PPL_PLL' & VAR.JESTLIST
|| VAR_EDIT.ROK:=VAR.O().R;
   VAR_EDIT.MSC:=VAR.O().M
?};
:: w webTermie używamy tej funkcji tylko przy dodawaniu rekordów (nie mamy funkcjonalności poprawiania)
_put:={? _webterm
      || 0
      || -menu_txt()='popraw'
      ?};
_ref:={? _put || R_POR_WW.ref() || null()?};
{? ~_webterm || R_POR_WW.NR:=exec('numer','ppsf',_ref) ?};
{? _pzd03 || R_POR_WW.POR_NR:=exec('por_numer','ppsf',_ref) ?};
__CHK.validate(R_POR_WW,
   $("exec('r_por_ww_chk','ppsf',"+$_put+")"),
   "{? VAR_EDIT.ROK<>R_POR_WW.DZ~1 | VAR_EDIT.MSC<>R_POR_WW.DZ~2
    || _txt:='Data rejestracji nie może wykraczać poza okres %1 - %2.'@
         [date(VAR_EDIT.ROK,VAR_EDIT.MSC,1)$1,date(VAR_EDIT.ROK,VAR_EDIT.MSC,0)$1];
       _a.err_msg(_txt)
    || 1
    ?}
   ",
   $("_blokada:='';
    _okr:=exec('find_okr','grafik',R_POR_WW.P,R_POR_WW.DZ,'okr');
    {? _okr<>null()
    || A_OKR.cntx_psh();
       {? A_OKR.seek(_okr,,1)
       || {? A_OKR.S='Z'
          || _blokada:='Okres rozliczeniowy jest zamknięty.'@
          || A_OKRM.cntx_psh();
             A_OKRM.index('A_OKRMR');
             A_OKRM.prefix(R_POR_WW.DZK~1,R_POR_WW.DZK~2);
             {? A_OKRM.first() & A_OKRM.S='Z' || _blokada:='Miesiąc rozliczenia jest zamknięty.'@ ?};
             A_OKRM.cntx_pop()
          ?}
       ?};
       A_OKR.cntx_pop()
    ?};
    {? ~+|_blokada
    || _firma:=exec('ref_firma','#firma');
       O.cntx_psh();
       O.index('LISTYMIE');
       O.prefix(_firma,R_POR_WW.DZK~1,R_POR_WW.DZK~2,'SUM',);
       {? O.first() & O.Z='T' || _blokada:='Lista płac jest zamknięta.'@ ?};
       O.cntx_pop()
    ?};
    {? ~+|_blokada
    || {? exec('isBlokada','prc_rozlicz',R_POR_WW.P,R_POR_WW.DZK)>0
       || _blokada:='Dane dla dnia %1 są zablokowane do rozliczenia.'@[$R_POR_WW.DZK]
       ?}
    ?};
    {? +|_blokada
    || "+{? _webterm
         || "FUN.info(_blokada);
             return('DZ')
            "
         || "{? ~FUN.ask('%1\n%2'[_blokada,'Czy chcesz kontynuować?'@])
             || return(0)
             ?}"
         ?}
       +"
    ?};
    1
   "),
   $("
     {? exec('czy_jest','nieobecnosc',R_POR_WW.P,R_POR_WW.DZ)
     || "+
         {? _webterm
         || "FUN.info('Pracownik ma wprowadzoną nieobecność w dniu %1.'[R_POR_WW.DZ$1]);
            return(1)
            "
         || "{? ~do_state() & ~FUN.ask('%1\n%2'@[
                'Pracownik ma wprowadzoną nieobecność w dniu %1.'[R_POR_WW.DZ$1],
                'Czy chcesz kontynuować?']
                )
             || return('DZ')
             ?}"
         ?}+
        "
     ?};
     1
   "),
   $(" _ref:={? "+$_put+" || R_POR_WW.ref() || null()?};
       _czyTyp:=0;
       _typ:=R_POR_WW.PPSFT;
       R_POR_WW.cntx_psh();
       R_POR_WW.index('NR');
       R_POR_WW.prefix(R_POR_WW.P,R_POR_WW.DZK,R_POR_WW.NR);
       {? R_POR_WW.first()
       || {!
          |? {? R_POR_WW.ref()<>_ref
             || _czyTyp:=_typ<>R_POR_WW.PPSFT
             ?};
             R_POR_WW.next()
          !}
       ?};
       R_POR_WW.cntx_pop();
       "+
        {? _webterm
        || "1"
        || "{? _czyTyp & ~do_state() &
              ~FUN.ask('%1\n%2'['Wprowadzany typ pracy różni się od zarejestrowanego.'@,'Czy chcesz kontynuować?'@])
           || return('PPSFT')
           ?};
           1"
        ?}
       +"
   ")
)


\chk_next_pair
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Sprawdza, dla parametryzacji pozwalającej na wprowadzenie wielu zapisów wejść/wyjść na dany dzień, czy kolejna
::       para wprowadzanych zapisów jest prawidłowa.
::   WE: _a [TAB]     - bufor z danymi zapisu sprawdzanego
::       _b [TAB]     - bufor z danymi o dostępnych typach zapisów
::       _c [INTEGER] - 0 dołączanie, 1 poprawianie
::   WY: Treść komunikatu lub pusty
::----------------------------------------------------------------------------------------------------------------------
_comm:='';
_ref:={? var_pres('_a')=type_of(0) & _a || R_POR_WW.ref() || null ?};

_type:=obj_new('we','wy');
_type.we:=exec('r_por_ww_tp_we','ppsf');
_type.wy:=exec('r_por_ww_tp_wy','ppsf');
_por:=exec('lic','#b_domain','POR');
_pzd:=exec('is_pzd03','ppsf');

_current:=obj_new('p','dzk','tp','dz','gd','nr','ppsft');
_current.p:=R_POR_WW.P;
_current.dzk:=R_POR_WW.DZK;
_current.tp:=R_POR_WW.TP;
_current.dz:=R_POR_WW.DZ;
_current.gd:=R_POR_WW.GD;
_current.nr:={? _pzd & _por || R_POR_WW.POR_NR || R_POR_WW.NR ?};
{? _pzd || _current.ppsft:=R_POR_WW.PPSFT ?};

_prevNr:=_current.nr-1;
_error:=0;
_oDates:=obj_new('od','do');
_range:=obj_new('day','time');
_range.day:=obj_new('od','do');
_range.time:=obj_new('od','do');
_errorType:=obj_new('before','in','after','not_closed');
_errorType.before:=obj_new('val','nr');
_errorType.before.val:=_errorType.before.nr:=_errorType.in:=_errorType.after:=_errorType.not_closed:=0;

_d0:=date(0,0,0);
_t0:=time(0,0,0);

R_POR_WW.cntx_psh();
{? _prevNr>0
|| {? _por & _pzd
   || R_POR_WW.index('P_NR');
      R_POR_WW.prefix(_current.p,_current.dzk,_current.ppsft,_prevNr)
   || R_POR_WW.index('NR');
      R_POR_WW.prefix(_current.p,_current.dzk,_prevNr)
   ?};
   _size:=R_POR_WW.size();
   {? _size<>0 & _size<>2 || _error+=1; _errorType.not_closed:=1 ?}
?};
{!|? ~_errorType.not_closed & _prevNr>0 |!
   {? _por & _pzd
   || R_POR_WW.prefix(_current.p,_current.dzk,_current.ppsft,_prevNr,_type.we)
   || R_POR_WW.prefix(_current.p,_current.dzk,_prevNr,_type.we)
   ?};
   _is:=R_POR_WW.first();
   _range.day.od:={? _is || R_POR_WW.DZ || _d0 ?};
   _range.time.od:={? _is || R_POR_WW.GD || _t0 ?};
   {? _por & _pzd
   || R_POR_WW.prefix(_current.p,_current.dzk,_current.ppsft,_prevNr,_type.wy)
   || R_POR_WW.prefix(_current.p,_current.dzk,_prevNr,_type.wy)
   ?};
   _is:=R_POR_WW.first();
   _range.day.do:={? _is || R_POR_WW.DZ || _d0 ?};
   _range.time.do:={? _is || R_POR_WW.GD || _t0 ?};

   {? R_POR_WW.ref()<>_ref
   || {? _range.day.od=_current.dz
      || _error+=(_range.time.od>_current.gd);
         _errorType.before.val:=1;
         _errorType.before.nr:=_prevNr
      ?};
      {? _range.day.do<>_d0 & _range.time.do<>_t0
      || {? _range.day.od=_range.day.do & _range.day.od=_current.dz
         || _error+=(_range.time.od<=_current.gd & _current.gd<=_range.time.do);
            _errorType.in:=1
         |? _range.day.od<_range.day.do
         || _error+={? _current.dz=_range.day.od || _current.gd>_range.time.od || _current.gd<_range.time.do ?};
            _errorType.in:=1
         ?};
         {? _range.day.od<_range.day.do & _current.dz=_range.day.do
         || _error+=(_range.time.do<_current.gd);
            _errorType.after:=1
         ?}
      ?}
   ?};

   _prevNr:={? _error || 0 || _prevNr-1 ?}
!};
{? _error
|| _base:='Nie jest możliwe %1 zapisu na wybrany przedział czasowy.'@
      [{? _ref<>null || 'poprawienie'@ || 'dołączenie'@ ?}];
   _info:='';
   {? _errorType.before.val
   || _info:='%1%2'@[
         'Dla numeru porządkowego %1 niemożliwe jest dołączenie zapisów '@[$_current.nr],
         'poprzedzających zapisy o numerze porządkowym %1.'@[$_errorType.before.nr]
      ]
   ?};
   {? _errorType.in
   || _info:='Dla wybranego przedziału istnieją już zapisy rozpoczęcia/zakończenia pracy.'@
   ?};
   {? _errorType.after
   || _info:='Dla numeru porządkowego %1 niemożliwe jest dołączenie zapisów dla wybranej daty (%2).'@
         [$_current.nr,$_current.dz]
   ?};
   {? _errorType.not_closed
   || _info:='Poprzednie wejście (rozpoczęcie pracy) nie zostało zakończone przez odpowiadające wyjście.'@
   ?};
   _comm:='%1\n%2'@[_base,_info]
?};
R_POR_WW.cntx_pop();
_comm


\r_por_ww_nr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Sprawdza czy dozwolone jest utworzenie/modyfikacja zapisu z przypisanym numerem pary zdarzeń.
::   WE: _a - 0 dołączanie, 1 poprawianie
::   WY: treść komunikatu o błędzie lub ''
::----------------------------------------------------------------------------------------------------------------------
_popraw:={? var_pres('_a')=type_of(0) || _a || return('') ?};
{? exec('is_pzd03','ppsf') || exec('determine_por_nr','ppsf',_popraw) || exec('determine_nr','ppsf',_popraw,1) ?}


\date_coverage
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Sprawdza, czy nie nastąpiło pokrycie ram czasowych dla zapisów o tej samej liczbie porządkowej o innym typie.
::   WE: _a [TAB] - bufor z danymi zapisu sprawdzanego
::       _b [TAB] - bufor z danymi o dostępnych typach zapisów
::   WY: Treść komunikatu lub pusty
::----------------------------------------------------------------------------------------------------------------------
_coverage:='';

_type:=obj_new('we','wy');
_type.we:=exec('r_por_ww_tp_we','ppsf');
_type.wy:=exec('r_por_ww_tp_wy','ppsf');
_pzd:=exec('is_pzd03','ppsf');

_current:=obj_new('p','dzk','tp','dz','gd','nr','ppsft');
_current.p:=R_POR_WW.P;
_current.dzk:=R_POR_WW.DZK;
_current.tp:=R_POR_WW.TP;
_current.dz:=R_POR_WW.DZ;
_current.gd:=R_POR_WW.GD;
_current.nr:=R_POR_WW.NR;
{? _pzd || _current.ppsft:=R_POR_WW.PPSFT ?};

_other:=obj_new('type','dz','gd','nr');
_other.type:={? _current.tp=_type.we || _type.wy || _type.we ?};

R_POR_WW.cntx_psh();
{? #exec('get_par','#portal','IsPersonWorkCalActive') & _pzd
|| _current.nr:=R_POR_WW.POR_NR;
   R_POR_WW.index('P_NR');
   R_POR_WW.prefix(_current.p,_current.dzk,_current.ppsft,_current.nr,_other.type)
|| _current.nr:=R_POR_WW.NR;
   R_POR_WW.index('NR');
   R_POR_WW.prefix(_current.p,_current.dzk,_current.nr,_other.type)
?};
{? R_POR_WW.first()
|| _other.gd:=R_POR_WW.GD;
   _other.dz:=R_POR_WW.DZ;
   {? _current.tp=_type.we
   || {? _current.dz=_other.dz & _other.gd<_current.gd
      || _coverage:=
            'Nie jest dozwolone ustalenie godziny rozpoczęcia pracy na później niż zapisana godzina zakończenia.'@
      |? _current.dz>_other.dz
      || _coverage:=
            'Nie jest dozwolone ustalenie daty rozpoczęcia pracy na późniejszą niż data zakończenia pracy.'@
      ?}
   |? _current.tp=_type.wy
   || {? _current.dz=_other.dz & _other.gd>_current.gd
      || _coverage:=
            'Nie jest dozwolone ustalenie godziny zakończenia pracy na wcześniej niż zapisana godzina rozpoczęcia.'@
      |? _current.dz<_other.dz
      || _coverage:=
            'Nie jest dozwolone ustalenie daty zakończenia pracy na wcześniejszą niż data rozpoczęcia pracy.'@
      ?}
   ?}
?};
R_POR_WW.cntx_pop();
_coverage


\determine_nr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: W zależności od argumentu _b :
::          dla 0 - (domyślnie) zwraca prawidłową wartość numeru dla obecnego rekordu
::          dla 1 - sprawdza czy dozwolone jest utworzenie/modyfikacja zapisu z przypisanym numerem pary zdarzeń.
::   WE: _a [INTEGER] - 0 dołączanie, 1 poprawianie
::       _b [INTEGER] - dla zera zwraca numer dla pola NR, wpp. zwraca komunikat dla wywołania po redagowaniu
::   WY: Wartość prawidłowego numeru dla _b=0, wpp. komunikat wypełniony lub pusty dla wywołania po redagowaniu
::----------------------------------------------------------------------------------------------------------------------
 _ref:={? var_pres('_a')=type_of(0) & _a || R_POR_WW.ref() || null ?};
_mode:={? var_pres('_b')=type_of(0)      || _b             || 0    ?};

_result:={? _mode || '' || 0 ?};

{? R_POR_WW.POR='N'
|| return(_result)
?};

_nr:=obj_new('current','correct');
_nr.current:=R_POR_WW.NR;
_nr.correct:=0;
_prac:=R_POR_WW.P;
_dzk:=R_POR_WW.DZK;
_tp:=R_POR_WW.TP;
_par:=#exec('get_par','#portal','PersonWorkCalOption');
_maxRange:={? _par=3 || 2 || 1 ?};
R_POR_WW.cntx_psh();
R_POR_WW.index('NR');
R_POR_WW.prefix(_prac,_dzk);
_size:=obj_new('day','nr');
_size.day:=R_POR_WW.size();
_ok:=0;
{? _size.day=0 | _size.day=1
|| _nr.correct:=1
|? _size.day>1
|| {! _ii:=1.._maxRange
   |!
      {? ~_ok
      || R_POR_WW.prefix(_prac,_dzk,_ii);
         _size.nr:=R_POR_WW.size();
         {? _size.nr%2<>_size.nr/2
         || _nr.correct:=_ii
         || {? _ref<>null & (_loop:=R_POR_WW.first())
            || {!
               |? _loop
               |!
                  {? _ref=R_POR_WW.ref() || _ok:=1 ?};
                  _loop:=R_POR_WW.next()
               !}
            || {? _size.nr=0 || _ok:=1 ?}
            ?};
            {? _ok || _nr.correct:=_ii ?}
         ?}
      ?}
   !}
?};
_result:=
   {? _mode & _nr.correct & _nr.current<>_nr.correct
   || '%1\n%2 %3.'[
         'Nieprawidłowa wartość dla numeru pary zdarzeń.'@,
         'Na podstawie obecnej parametryzacji prawidłowa wartość dla zapisu to'@,
         $_nr.correct
         ]
   |? _mode & ~_nr.correct
   || 'Brak możliwości utworzenia kolejnego zapisu dotyczącego %1 na wybrany dzień.'@
         [{? _tp=exec('r_por_ww_tp_we','ppsf') || 'rozpoczęcia pracy'@ || 'zakończenia pracy'@ ?}]
   |? _mode
   || ''
   || _nr.correct
   ?};
R_POR_WW.cntx_pop();
_result


\per_zaz_ask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Formuła decydująca czy wykonywać dalszą część procesu PER_ZAZ - Rejestracja informacji o pracy zdalnej stałej
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Czy rejestrować dane dotyczące pracy zdalnej stałej?'@)


\ppsf_h_kto_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Zwraca w postaci ciągu znaków opis osoby weryfikującej wniosek o pracę zdalną.
::UWAGA: Kontekst tabeli PPSF_H musi być ustalony
::   WE:
::   WY: _ret [STRING] - ciąg znaków - opis osoby weryfikującej, lub '' gdy brak
::----------------------------------------------------------------------------------------------------------------------
_ret:='';
OSOBA.cntx_psh();
{? PPSF_H.KTO_WER<>null()
|| _ret:='%1 %2'[PPSF_H.KTO_WER().NAZWISKO,OSOBA.PIERWSZE]
?};
OSOBA.cntx_pop();
_ret


\ppsf_h_pola_grp_txt_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Ustawia wartość pola POLA_GRP.TXT_1 (osoby weryfikującej wniosek o pracę zdalną).
::UWAGA: Kontekst tabeli PPSF_H musi być ustalony
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:=exec('ppsf_h_kto_wer','ppsf');
~~


\ppsf_h_edokum_mask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Ustawia właściwą maskę tabeli EDOKUM.
::UWAGA: Kontekst tabeli PPSF_H musi być ustalony
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPSF_H.EDOKUM<>null() & (ref_name(PPSF_H.EDOKUM)<>EDOKUM.name())
|| EDOKUM.use(ref_name(PPSF_H.EDOKUM))
?};
~~


\ppsf_h_okienko_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Akcja okienko WER przed tabeli PPSF_H.
::       Formuła wykorzystywana również przy obsłudze wartości domyślne oświadczeń o pracy poza siedzibą firmy.
::   WE:
::   WY:
::  OLD: \ppsfh_okienko_b/ppsf.fml
::----------------------------------------------------------------------------------------------------------------------
_firma:=exec('firma','ustawienia');
_zdst:='ZDALN_ST';
PPSFR.cntx_psh();
PPSFR.index('KOD');
PPSFR.prefix(_firma,_zdst,);
PPSFT.cntx_psh();
PPSFT.prefix();
PPSFT.win_edit('REDZD');
PPSFT.win_dict('SLO');
PPSFT.fld_fml('PPSFR','BLANK',"{? PPSFR.first() || PPSFR.ref() || null() ?}");
{? ~PPSFT.f_set('OPIS','join PPSFR','PPSFR.FIRMA=:_a and PPSFR.KOD=\':_b\'',_firma,_zdst)
|| PPSFT.f_set(,,'0=1')
?};
PPSFROZD.cntx_psh();
PPSFROZD.prefix();
{? ~PPSFROZD.f_set('KOD','join PPSFR','PPSFR.FIRMA=:_a and PPSFR.KOD=\':_b\'',_firma,_zdst)
|| PPSFROZD.f_set(,,'0=1')
?};
PPSF_SN.cntx_psh();
PPSF_SN.prefix();
PPSF_SN.win_edit('RED');
PPSF_SN.win_dict('SLO');
''


\ppsf_h_okienko_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Akcja okienko WER po tabeli PPSF_H.
::       Formuła wykorzystywana również przy obsłudze wartości domyślne oświadczeń o pracy poza siedzibą firmy.
::   WE:
::   WY:
::  OLD: \ppsfh_okienko_a/ppsf.fml
::----------------------------------------------------------------------------------------------------------------------
PPSF_SN.cntx_pop();
PPSFROZD.f_clear();
PPSFROZD.cntx_pop();
PPSFT.f_clear();
PPSFT.fld_fml('PPSFR','BLANK',"*");
PPSFT.cntx_pop();
PPSFR.cntx_pop();
~~


\r_por_ww_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli R_POR_WW.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::  OLD: \r_por_ww_addb/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
exec('r_por_ww_chk','ppsf',0)


\r_por_ww_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli R_POR_WW.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::  OLD: \r_por_ww_putb/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
exec('r_por_ww_chk','ppsf',1)


\r_por_ww_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Formuła akcji "dołącz przed"
::   WE:
::   WY: 1
::  OLD: \r_por_ww_dolacz_b/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
1


\r_por_ww_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Formuła akcji "dołącz po"
::   WE:
::   WY: 1
::  OLD: \r_por_ww_dolacz_a/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
R_POR_WW.ZM:='R';
P.cntx_psh();
P.prefix();

{? exec('lic','#b_domain','POR')
|| _par:=exec('get_par','#portal','PersonWorkCalOption')
|? P.find_tab('first','GRAFIK',,'=','T')
|| _par:=exec('get_par','#parametr',340,2)
|| _par:=''
?};
{? +_par || R_POR_WW.SR:=_par ?};
P.cntx_pop();
R_POR_WW.put();
R_POR_WW.f_rfresh();
REJ_INFO.POR_ERR:=1;
1


\r_por_ww_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Formuła popraw przed
::   WE:
::   WY: 0/1
::  OLD: \r_por_ww_popraw_b/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('czyJest_ww','ppsf')
|| FUN.ask('%1\n%2'['Istnieją zapisy Wejść/Wyjść dla poprawianego rekordu.'@,'Kontynuować?'@])
|| 1
?}


\r_por_ww_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Formuła akcji "popraw po"
::   WE:
::   WY: 1
::  OLD: \r_por_ww_popraw_a/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
R_POR_WW.ZM:='P';
R_POR_WW.put();
R_POR_WW.f_rfresh();
REJ_INFO.POR_ERR:=1;
1


\r_por_ww_wer_okienko_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Okienko po R_POR_WW
::   WE:
::   WY:
::  OLD: \r_por_ww_wer_okienko_po/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
{? REJ_INFO.POR_ERR
|| _nieparz:=exec('get_par','#parametr',340,2)='P';
   R_POR_WW.cntx_psh();
   _we:=_wy:=0;
   _exit:=0;
   {? R_POR_WW.first()
   || _dzk:=R_POR_WW.DZK;
      {!
      |? {? _dzk<>R_POR_WW.DZK
         || _dzk:=R_POR_WW.DZK;
            _exit:=_we<>(_wy+_nieparz);
            _we:=_wy:=0
         ?};
         _we+=(-(2+R_POR_WW.TP)='we');
         _wy+=(-(2+R_POR_WW.TP)='wy');
         ~_exit & R_POR_WW.next()
      !};
      {? ~_exit
      || _exit:=_we<>(_wy+_nieparz)
      ?}
   ?};
   R_POR_WW.cntx_pop();
   {? _exit
   || FUN.emsg('%1'['Zapisy "Start/Stop" zawiera nieprawidłowe dane.'@])
   ?}
?};
REJ_INFO.POR_ERR:=0;
1


\r_por_ww_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Rekord przed okienek tabeli R_POR_WW.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::  OLD: \r_por_ww_rb/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:=
   {? R_POR_WW.TP=exec('r_por_ww_tp_we','ppsf') || 'wejście'
   |? R_POR_WW.TP=exec('r_por_ww_tp_wy','ppsf') || 'wyjście'
   || ''
   ?};
_to_gray:='';
_all:=0;
{? ~_all & exec('lic','#b_domain','POR') & ~exec('is_pzd03','ppsf')
|| R_POR_WW.cntx_psh();
   R_POR_WW.index('NR');
   R_POR_WW.prefix(R_POR_WW.P,R_POR_WW.DZK);
   _size:=R_POR_WW.size();
   R_POR_WW.cntx_pop();
   _par:=#exec('get_par','#portal','PersonWorkCalOption');
   _max:={? _par=3 || 4 || 2 ?};
   {? _size=_max
   || _to_gray+='D'
   ?}
?};
{? ~_all
|| _prac:=R_POR_WW.P;
   _dzk:=R_POR_WW.DZK;
   _nr:=R_POR_WW.NR;
   R_POR_WW.cntx_psh();
   R_POR_WW.index('NR');
   R_POR_WW.prefix(_prac,_dzk);
   _max:=1;
   {? _loop:=R_POR_WW.first()
   || {!
      |? _loop
      |! {? R_POR_WW.NR>_max || _max:=R_POR_WW.NR ?};
         _loop:=R_POR_WW.next()
      !}
   ?};
   R_POR_WW.prefix(_prac,_dzk,_nr,exec('r_por_ww_tp_wy','ppsf'));
   _wy:=R_POR_WW.first();
   R_POR_WW.cntx_pop();
   {? R_POR_WW.NR<>_max | (_wy & R_POR_WW.TP=exec('r_por_ww_tp_we','ppsf'))
   || _to_gray+='U'
   ?}
?};
{? _all
|| R_POR_WW.actions_grayed('WER','%1:%1'[_to_gray])
|? ~_all & _to_gray<>''
|| R_POR_WW.actions_grayed('WER','%1'[_to_gray])
|| R_POR_WW.actions_grayed('WER')
?};
~~


\czyJest_ww
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Czy jest zapis w R_REJ_WW dla R_POR_WW
::       Działa w kontekście wybranego R_POR_WW
::   WE:
::   WY: 1/0
::  OLD: \czyJest_ww/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
_jest:=0;
R_REJ_WW.cntx_psh();
_Mask:=MASK.Name('R_REJ_WW',R_POR_WW.DZ~1,R_POR_WW.DZ~2);
{? R_REJ_WW.name<>(_Mask)
|| R_REJ_WW.use(_Mask)
?};
R_REJ_WW.index('R_REJ_WX');
R_REJ_WW.prefix(R_POR_WW.P,R_POR_WW.DZK,R_POR_WW.DZ,time(R_POR_WW.GD~1,R_POR_WW.GD~2,0));
_jest:=R_REJ_WW.find_tab('first','CZ',,'=','SYS_5','ZM',,'=','A','RD',,'=','normalne','TP',,':*',R_POR_WW.TP);
R_REJ_WW.cntx_pop();
_jest


\r_por_ww_nr_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Wartość początkowa pola NR tabeli R_POR_WW.
::   WE:
::   WY:
::  OLD: \r_por_ww_nr_bl/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
exec('determine_nr','ppsf')


\r_por_ww_dz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Formuła po edycji pola DZ
::   WE:
::   WY: date
::  OLD: \r_por_ww_dz_ae/!prc_czp_dphw.fml
::----------------------------------------------------------------------------------------------------------------------
{? R_POR_WW.DZK=#0 || R_POR_WW.DZK:=R_POR_WW.DZ ?};
1


\r_por_ww_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Formuła usuń przed
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
{? exec('czyJest_ww','ppsf')
|| FUN.ask('%1\n%2'['Istnieją zapisy Wejść/Wyjść dla usuwanego rekordu.'@,'Kontynuować?'@])
|| 1
?}


\r_por_ww_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Formuła usuń po
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
REJ_INFO.POR_ERR:=1


\ppsfn_pola_pom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Ustawia wartość pól zmiennych pomocniczych PPSFN.
::UWAGA: Kontekst tabeli PPSFN musi być ustalony
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
OSOBA.cntx_psh();
OSOBA.index('OSOBA');
POLA_GRP.TXT_1:=
   {? PPSFN.KTO_WER<>null()
   || PPSFN.KTO_WER().NAZWISKO+' '+PPSFN.KTO_WER().PIERWSZE
   || ''
   ?};
OSOBA.cntx_pop();
EDIT_VAR.PPSF_STW:=exec('ppsf_status','ppsf',PPSFN.AZ);
~~


\ppsfn_edokum_mask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Ustawia właściwą maskę tabeli EDOKUM.
::UWAGA: Kontekst tabeli PPSFN musi być ustalony
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPSFN.EDOKUM<>null() & (ref_name(PPSFN.EDOKUM)<>EDOKUM.name())
|| EDOKUM.use(ref_name(PPSFN.EDOKUM))
?};
~~


\ppsfn_limit_dane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Utworzenie i wypełnienie tymczasowej tabeli danymi limitu.
::   WE: _a [STRING] - sposób limitowania D/G/H - Dni w roku, Godziny w roku, godziny w Hdniu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
_sl:={? var_pres('_a')=type_of('') || _a || '' ?};

{? _sl='D'
:: Limitowanie w dniach w roku:
|| _LIM:=tab_tmp(,
      'ROK','INTEGER','Rok',
      'RDL','STRING[15]','Rodzaj limitu',
      'LIM','REAL','Limit dni',
      'WYK','REAL','Wykorzystane',
      'POZ','REAL','Pozostało',
      'SPL','STRING[15]','Sposób limitowania')
|? _sl='G'
:: Limitowanie w godzinach na rok:
|| _LIM:=tab_tmp(,
      'ROK','INTEGER','Rok',
      'RDL','STRING[15]','Rodzaj limitu',
      'LIM','TIME','Limit godzin',
      'WYK','TIME','Wykorzystane',
      'POZ','TIME','Pozostało',
      'SPL','STRING[15]','Sposób limitowania')
|? _sl='H'
:: Limitowanie w godzinach na dobę:
|| _LIM:=tab_tmp(,
      'ROK','INTEGER','Rok',
      'RDL','STRING[15]','Rodzaj limitu',
      'LIM','TIME','Limit godzin',
      'SPL','STRING[15]','Sposób limitowania')
:: Brak limitów:
|| _LIM:=tab_tmp(,
      'ROK','INTEGER','Rok');
   _ok:=0
?};

{? _ok
:: Rok początkowy i końcowy nagłówka:
|| _rStart:=PPSFN.OD~1;
   _rStop:=PPSFN.DO~1;

   {! _ii:=_rStart.._rStop
   |! _LIM.ROK:=_ii;
      _limPodstawa:=exec('limit_get','ppsf',PPSFN.P,
                         {? exec('is_pzd01','ppsf') || PPSFN.PPSFT().PPSFR || PPSFN.PPSFT().SLO_KOD ?},_ii);
      {? _limPodstawa.ok=1
      || {? _sl='D'
         || _LIM.LIM:=_limPodstawa.dni;
            _LIM.POZ:=exec('limit_poz','ppsf',PPSFN.P,
                           {? exec('is_pzd01','ppsf') || PPSFN.PPSFT().PPSFR || PPSFN.PPSFT().SLO_KOD ?},_ii);
            _LIM.WYK:=_LIM.LIM-_LIM.POZ;
            _LIM.SPL:='Dni w roku'@
         |? _sl='G'
         || _LIM.LIM:=_limPodstawa.godz;
            _LIM.POZ:=exec('limit_poz','ppsf',PPSFN.P,
                           {? exec('is_pzd01','ppsf') || PPSFN.PPSFT().PPSFR || PPSFN.PPSFT().SLO_KOD ?},_ii,,1);
            _LIM.WYK:=_LIM.LIM-_LIM.POZ;
            _LIM.SPL:='Godziny w roku'@
         |? _sl='H'
         || _LIM.LIM:=_limPodstawa.godz;
            _LIM.SPL:='Godziny w dniu'@
         ?};
         _LIM.RDL:={? _limPodstawa.dom || 'Domyślny'@ || 'Indywidualny'@ ?};
         _LIM.add()
      ?};
      obj_del(_limPodstawa)
   !}
?};

_LIM


\ppsfl_zdaln_ok_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła próbuje założyć limit indywidualne pracy zdalnej okazjonalnej dla wskazanego pracownika i roku.
::   WE:  _a  [REFERENCE] - Wskazanie pracownika.
::       [_b] [NUMBER]    - Rok limitu [domyślnie: date()~1].
::   WY: Tablica elementów nawanych:
::          status - Status przetwarzania:
::                   ''     - Limit założony poprawnie.
::                   'ERR'  - Błąd.
::                   'INFO' - Informacja.
::                   ''
::          msg    - Komunikat lub '' (dla status='').
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('status','msg','set');
_ret.set:=".status:=_a; .msg:=_b";
_ret.set('','');

{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=P
|| _prac:=_a
|| _ret.set('ERR','Brak lub nieprawidłowy typ parametru PRAC.'@);
   return(_ret)
?};
_rok:={? var_pres('_b')=type_of(0) || _b || date()~1 ?};

P.cntx_psh();
P.prefix();
{? P.seek(_prac)
|| _firma:=exec('ref_firma','ustawienia');
   _kod:='ZDALN_OK';
   PPSFR.cntx_psh();
   PPSFR.index('KOD');
   PPSFR.prefix(_firma,_kod,);
   {? ~PPSFR.first()
   || _ret.set('ERR','Nie znaleziono definicji pracy zdalnej okazjonalnej [%1].'@[_kod])
   |? PPSFR.LIMITY='N'
   || _ret.set('INFO','Praca zdalna okazjonalna ma wyłączone limitowanie.'@)
   || PPSFL.cntx_psh();
      PPSFL.index('DOM');
      PPSFL.prefix(_firma,P.ref(),PPSFR.ref(),_rok);
      {? PPSFL.first()
      || _ret.set('INFO','Limit pracy zdalnej okazjonalnej na rok %1 już istnieje.'@[$_rok])
      |? PPSFL.prefix(_firma,null(),PPSFR.ref(),_rok);
         ~PPSFL.first()
      || _ret.set('ERR','Nie znaleziono definicji limitu domyślnego pracy zdalnej okazjonalnej na rok %1.'@[$_rok])
      |? _wpz:=0;
         STAZ.cntx_psh();
         STAZ.index('_STAZE');
         STAZ.prefix(_firma,P.OSOBA);
         {? STAZ.first()
         || {!
            |? {? STAZ.DZ~1=_rok
               || _wpz+=STAZ.WPZ
               ?};
               STAZ.next()
            !}
         ?};
         STAZ.cntx_pop();
         _limit:={? PPSFL.SL='D' || PPSFL.L || *PPSFL.LG ?};
         _wpz>=_limit
      || _ret.set('INFO','Limit wykorzystany w całości u poprzednich pracodawców.'@)
      |? PPSFL.prefix();
         PPSFL.P:=P.ref();
         {? _wpz>0
         || {? PPSFL.SL='D'
            || PPSFL.L-=_wpz
            || PPSFL.LG-=_wpz*60
            ?}
         ?};
         ~PPSFL.add()
      || _ret.set('ERR','Utworzenie limitu pracy zdalnej okazjonalnej nie powiodło się.'@)
      ?};
      PPSFL.cntx_pop()
   ?};
   PPSFR.cntx_pop()
|| _ret.set('ERR','Nie znaleziono pracownika [%1].'@[$_prac])
?};
P.cntx_pop();
_ret


\ppsft_rcp_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Sprawdza, ile typów pracy poza siedzibą firmy obsługuję rejestrację czasu pracy w portalu
::   WY: liczba typów pracy obsługjących rejestrację czasu pracy
::----------------------------------------------------------------------------------------------------------------------
_size:=0;

PPSFT.cntx_psh();
PPSFT.index('NAZRODZ');
PPSFT.prefix(exec('firma','ustawienia'),'T');
_size:=PPSFT.size();
PPSFT.cntx_pop();
_size


\ppsf_h_default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła obsługuje wartości domyślne dla pracy zdalnej stałej, wykorzystywane przez
::       "Oświadczenie o pracy zdalnej" (Portal HR).
::   WE: _a [STRING] - Tryb pracy:
::                      'edit' - Redagowanie [domyślnie].
::                      'get'  - Pobranie danych damyślnych zapamięanych (w pliku).
::   WY: Zależy od trybu pracy.
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') || _a || 'edit' ?};

_firma:=exec('ref_firma','ustawienia');

:: Nazwa pliku jest tak dobrana, aby wartości domyślne były definiowane w ramach firmy.
_profile:='zdaln_st_osw_default.dfk';
_section:='default';

{? _tryb='edit'
|| exec('__WND','#object');
   _ret:=0;

   _funkc:=exec('init','#lock',,'Redagowanie wartości domyślnych pracy zdalnej');
   {? ~_funkc.lock('PPSF_H_DEFAULT',_firma)
   || return()
   ?};

   _acr:='REDOSW';
   {? (_we:=__WND.EDIT.get(PPSF_H,_acr))=''
   || _szer:=40;
      _we:=PPSF_H.mk_edit('Wartości domyślne oświadczeń o pracy poza siedzibą firmy'@,,'wartdom');
      PPSF_H.win_esep(_we,'Dane podstawowe'@);
      PPSF_H.win_efld(_we,,'PPSFT','OPIS','*',_szer,,,'Typ pracy poza siedzibą'@);
      PPSF_H.win_efld(_we,,'OO',,,_szer+3,,,'Osoba/organ'@);
      PPSF_H.win_efld(_we,,'PPSF_SN','KOD','KOD',_szer,,,'Sposób rozliczenia'@);
      PPSF_H.win_efld(_we,,'PPSF_SN','NAZWA',,_szer,,1,,1);

      PPSF_H.efld_opt(_we,'mark=1',,'PPSFT','OPIS');
      PPSF_H.efld_opt(_we,'mark=1',,'OO');
      PPSF_H.win_ebtn(_we,'text=%1' ['Wyczyść'@]+',align=begin',"params_get().cfg.clear:=1; 'key:F2'");
      exec('ok_esc','#window',PPSF_H,_we);
      __WND.EDIT.put(PPSF_H,_acr,_we)
   ?};

   PPSF_H.cntx_psh();
   PPSF_H.prefix();
   PPSF_H.blank(1);
   _fs:=form_stack();
   _zd_st_dom:=exec(_fs.name,_fs.file,'get');
   {? _zd_st_dom.ok
   || PPSF_H.PPSFT:=_zd_st_dom.PPSFT.ref;
      PPSF_H.OO:=_zd_st_dom.OO;
      PPSF_H.PPSF_SN:=_zd_st_dom.PPSF_SN.ref
   ?};
   obj_del(_zd_st_dom);
   exec('ppsf_h_okienko_b','ppsf');
   PPSF_H.win_edit(_we);
   _cfg:=obj_new('clear');
   _cfg.clear:=0;
   params_set('cfg',_cfg);
   {? PPSF_H.edit("
         _cfg:=params_get().cfg;
         {? _cfg.clear
         || {? FUN.ask(
                  'Wyczyszczenie wartości domyślnych spowoduje, że na podstawie\n'
                  '""Oświadczenia o pracy zdalnej"" (składanego na Portalu HR)\n'
                  'nie będą tworzone automatyczne zapisy w historii pracy zdalnej stałej.\n'
                  'Kontynuować?'@
               )
            || 1
            || _cfg.clear:=0
            ?}
         || __CHK.record(PPSF_H,,'PPSFT','OO')
         ?}
      ")
   || {? _cfg.clear
      || PPSF_H.blank(1);
         _ret:=-1
      || _ret:=1
      ?};
      exec('set','#profile',_profile,_section,'PPSFT',PPSF_H.PPSFT().OPIS);
      exec('set','#profile',_profile,_section,'OO',PPSF_H.OO);
      exec('set','#profile',_profile,_section,'PPSF_SN',PPSF_H.PPSF_SN().KOD)
   ?};
   obj_del(_cfg);
   exec('ppsf_h_okienko_a','ppsf');
   PPSF_H.cntx_pop();

   _funkc.unlock();

   _ret

|? _tryb='get'
|| _zd_st_dom:=exec('obj_ntab_set','#array',
      ,'ok',1
      ,'PPSFT',obj_new('OPIS','ref')
      ,'OO',''
      ,'PPSF_SN',obj_new('KOD','ref')
   );

   _zd_st_dom.PPSFT.OPIS:=exec('get','#profile',_profile,_section,'PPSFT');
   _zd_st_dom.PPSFT.ref:=null();
   _zd_st_dom.OO:=exec('get','#profile',_profile,_section,'OO');
   _zd_st_dom.PPSF_SN.KOD:=exec('get','#profile',_profile,_section,'PPSF_SN');
   _zd_st_dom.PPSF_SN.ref:=null();

   {? _zd_st_dom.PPSFT.OPIS=''
   || _zd_st_dom.ok:=0
   |? _zd_st_dom.PPSFT.ref:=exec('FindInSet','#table','PPSFT','NAZWA',_zd_st_dom.PPSFT.OPIS,_firma,,1,,null());
      _zd_st_dom.PPSFT.ref=null()
   || _zd_st_dom.ok:=0
   ?};

   {? _zd_st_dom.OO=''
   || _zd_st_dom.ok:=0
   ?};

   {? _zd_st_dom.PPSF_SN.KOD<>''
   || _zd_st_dom.PPSF_SN.ref:=exec('FindInSet','#table','PPSF_SN','KOD',_zd_st_dom.PPSF_SN.KOD,_firma,,1,,null());
      {? _zd_st_dom.PPSF_SN.ref=null()
      || _zd_st_dom.ok:=0
      ?}
   ?};

   _zd_st_dom

|| 'Nieobsługiwany tryb [%1]@' [_tryb]
?}


\is_pzd03
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Sprawdza czy jest naniesiona definicja aktualizacji 22.26_PZD03.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
var_pres('POR_NR',R_POR_WW)=22


\determine_por_nr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [22.26]
:: OPIS:  Sprawdza czy dozwolone jest utworzenie/modyfikacja zapisu z przypisanym numerem pary zdarzeń.
::   WE: _a [INTEGER] - 0 dołączanie, 1 poprawianie
::   WY: Komunikat wypełniony lub pusty
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(0) & _a || R_POR_WW.ref() || null ?};
_result:='';

{? ~exec('is_pzd03','ppsf') | #exec('get_par','#portal','IsPersonWorkCalActive')=0
|| return(_result)
?};

_tpwe:=exec('r_por_ww_tp_we','ppsf');
_tpwy:=exec('r_por_ww_tp_wy','ppsf');
_prac:=R_POR_WW.P;
_dzk:=R_POR_WW.DZK;
_tp:=R_POR_WW.TP;
_ppsft:=R_POR_WW.PPSFT;
_nr:=R_POR_WW.POR_NR;
_gd:=R_POR_WW.GD;
_par:=#exec('get_par','#portal','PersonWorkCalOption');
_maxRange:={? _par=3 || 2 || 1 ?};
_stp:=#exec('get_par','#portal','PersonWorkCalStopProcActive');

R_POR_WW.cntx_psh();
R_POR_WW.index('P_TP');
R_POR_WW.prefix(_prac,_dzk,_ppsft);
_result:=
   {? _nr>_maxRange
   || 'Przy obecnej parametryzacji maksymalnym numerem %1 danego typu pracy jest %2.'@
      [{? _stp || 'pary zdarzeń'@ || 'zdarzenia'@ ?},$_maxRange]
   |? ~_ref & R_POR_WW.find_key(_tp,_nr)
   || 'Powielenie numeru %1 w danym dniu.'@
      [{? _tp=_tpwe || 'rozpoczęcia pracy' || 'zakończenia pracy' ?}]
   |? _nr<>1 & ~(R_POR_WW.find_key(_tpwe,_nr-1))
   || 'Nie odnaleziono %1 z numerem %2.'@
      [{? _stp || 'pary zdarzeń'@ || 'zdarzenia'@ ?},$(_nr-1)]
   |? _stp
   || {? _tp=_tpwy
      || {? ~(R_POR_WW.find_key(_tpwe,_nr))
         || 'Nie odnaleziono odpowiadającego zapisu rozpoczęcia pracy dla pary zdarzeń z nr: %1'@[$_nr]
         || ''
         ?}
      |? _tp=_tpwe
      || {? _nr<>1 & ~(R_POR_WW.find_key(_tpwy,_nr-1))
         || 'Brak możliwości utworzenia kolejnego zapisu dotyczącego rozpoczęcia pracy na wybrany dzień.'
         || ''
         ?}
      || ''
      ?}
   || ''
   ?};
R_POR_WW.cntx_pop();
_result


\por_numer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Ustalenie numeru zdarzenia wg. zasad portalowych. Wymagana aktualizacja definicji systemu 12.51_PZD03.
::   WE: _a [REF] - wskazanie na rekord poprawiany tabeli R_POR_WW
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('is_pzd03','ppsf') || return(0) ?};
_nr:=1;
_dz:=R_POR_WW.DZ;
_gd:=R_POR_WW.GD;
_tp:=R_POR_WW.TP;
R_POR_WW.cntx_psh();
R_POR_WW.index('P_NR');
R_POR_WW.prefix(R_POR_WW.P,R_POR_WW.DZK,R_POR_WW.PPSFT,);
{? R_POR_WW.last()
|| {!
   |? {? R_POR_WW.DZ<_dz | (R_POR_WW.DZ=_dz & R_POR_WW.GD<_gd) & R_POR_WW.ref()<>_a
      || _tmp:={? R_POR_WW.TP=_tp || R_POR_WW.POR_NR+1 || R_POR_WW.POR_NR ?};
         {? _tmp>_nr || _nr:=_tmp ?};
         R_POR_WW.prev()
      || 0
      ?}
   !}
?};
R_POR_WW.cntx_pop();
_nr

:Sign Version 2.0 jowisz:1045 2024/01/18 13:02:24 89bb110a4f6fbd7c891d9e2b42dcfdf47a7d25e92a5d9b6e9c37b86c334a6d8756a9d5f347636fc24d3149c4753663eced0fb685cabb6f898afcb08bede43e1494dc5fbd46fbbc9a95354d1503c37442a12c7285e21cc2756696f7a472aa7a97eb7681f1b93d8760e028e2ff09592f732a95554894b6792cbc65d6cd6c9557c6
