:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: px_set.fml [12.41]
:: Utworzony: 17.06.2014
:: Autor: WH
::======================================================================================================================
:: Zawartosc: Formuly do obslugi zestawow planistycznych w Planie Strategicznym
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.41]
:: OPIS: tablica buforowa dla tabeli PX_SET
::   WE: FORMULA [_a] - dodatkowe pola do obiektu - umieszczane na koncu - nie obslugiwane przez standardowe metody [""]
::   WY: tablica buforowa o następującej strukturze
::        STRING[100]   SYMBOL -
::----------------------------------------------------------------------------------------------------------------------
::               PX_SET.ref()
_buffer:=$("obj_new('Ref'
::  STRING[100]  Symbol
                   ,'SYMBOL'
::  metoda          czyszczenie bufora blank(), gdy podany parametr ~~, to bl_void()
                   ,'blank'
::  metoda          czyszczenie bufora typem pustym bl_void()
                   ,'bl_void'
::  metoda          czyszczenie bufora za pomocą bufora tabeli bl_table()
                   ,'bl_table'
::  metoda          _buffer.get() - pobieranie zawartości bufora
                   ,'get'
::  metoda          _buffer.set() - pola<>~~ nanoszone do tabeli
                   ,'set'
::  metoda          _buffer.setf() - wszystkie pola nanoszone do tabeli
                   ,'setf'
::  metoda          _buffer.cntx_get(ref()/#ref()[,maska]) - wczytuje bufor podanych parametrów
                   ,'cntx_get'
::  metoda          _buffer.ref() - zwraca wartosc .Ref
                   ,'ref'
                   "+{? var_pres('_a')=3 & form(_a)<>'' || ","+_a || "" ?}+"
                   )");
_buffer:=_buffer();

:: metody - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_buffer.blank:="
                {? var_pres('_a')=0   || .bl_void()
                |? var_pres('_a')>100 || .bl_table(_a)
                || .bl_table(PX_SET)
                ?}
               ";

_buffer.bl_void:="
                  .SYMBOL:=~~;
                  .Ref:=null();
                  1
                 ";

_buffer.bl_table:="
                  _tab:=PX_SET;
                  _tab.cntx_psh();
                  _tab.blank(1);
                  .get(_tab);
                  _tab.cntx_pop();
                  _tab.get();
                  .Ref:=null();
                   1
                  ";

_buffer.get:="
              .SYMBOL:=PX_SET.SYMBOL;
              .Ref:=PX_SET.ref();
              (.)
             ";

_buffer.set:="
              {? .SYMBOL<>~~     || PX_SET.SYMBOL:=.SYMBOL ?};
              ~~
             ";

_buffer.setf:="
               PX_SET.SYMBOL:=.SYMBOL;
               ~~
              ";

_buffer.cntx_get:="
                   _tab:=PX_SET;
                   {? type_of(_a)=7 || _ref:=#_a; _mask:=ref_name(_a)
                   |? type_of(_a)=1 || _ref:=_a;  _mask:={? var_pres('_b')=2 || _b || _tab.name() ?}
                   || .blank(~~); return(.)
                   ?};
                   _tab.cntx_psh();
                   {? {? _tab.name()<>_mask
                      || _tab.use(_mask)
                      || 1
                      ?}
                   || _tab.prefix();
                      {? _tab.seek(_ref,)
                      || .get()
                      || .blank(~~)
                      ?}
                   || .blank(~~)
                   ?};
                   _tab.cntx_pop();
                   (.)
                  ";

_buffer.ref:=".Ref";
:: czyszczenie bufora
_buffer.blank(~~);

:: zwracam bufor
_buffer


\add
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Dodaje jeden rekord do tabeli PX_SET
::   WE: _a - obj_new - tablica nazwana bedaca buforem tabeli exec('buffer','px_set')
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100
         || _a
         || exec('buffer','px_set')
         ?};
_result:=0;


PX_SET.cntx_psh();
PX_SET.blank();
_buffer.set();
_result:=PX_SET.add();
PX_SET.cntx_pop();
_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.41]
:: OPIS: Kasuje podany rekord tabeli PX_SET (wykonywane w transakcji!!!)
::   WE: _a - PX_SET.ref()
::   WY: >0 -wyczyszczone, usuniete
::      -1 - nie udalo sie znalezc rekordu
::      -2 - nie udalo sie czyszczenie powiazan
::      -3 - nie udalo sie usuniecie rekordu
::      -4 - nie udalo sie zablokowanie rekordu
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};
_result:=0;
_ref:=_a;
:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
PX_SET.cntx_psh(); PX_SET.clear();
{? PX_SET.seek(_ref)
||
:: Sprawdzam czy zestaw moge zablokowac do zapisu, jesli tak to moge go usuwac
   {? PX_SET.r_lock(1,1,1)
   ||
      {? exec('clean','px_set',_ref)>0
      || {? PX_SET.del(,1)>0
         || _result:=1
         || undo();
            _result:=-3
         ?}
      || PX_SET.r_unlock();
         _result:=-2
      ?}
   || _result:=-4
   ?}
|| _result:=-1
?};
PX_SET.cntx_pop();
{? _mydo || end() ?};
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
:: UTW: WH [12.41]
:: OPIS: Czysci powiazania do rekordu tabeli PX_SET
:: WE: _a - PX_SET.ref()
:: WY: >0 -wyczyszczone,
:: <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_px_set:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};

:: 1. Usuwamy uzytkownikow przypisanych do zestawu
PX_SETU.cntx_psh();
PX_SETU.index('PX_SET');
PX_SETU.prefix(_px_set);
{? PX_SETU.first()
|| {!
   |? _can_continue:=exec('delete','px_setu',PX_SETU.ref());
      PX_SETU.first() & _can_continue>0
   !}
?};
PX_SETU.cntx_pop();

:: 2. Czyscimy przypisania do zasobow
PX_KONT.cntx_psh();
PX_KONT.index('PX_SET');
PX_KONT.prefix(_px_set);
{? PX_KONT.first()
|| {!
   |? PX_KONT.cntx_psh();
      PX_KONT.clear();
      PX_KONT.PX_SET:=null();
      _can_continue:=PX_KONT.put();
      PX_KONT.cntx_pop();
      PX_KONT.first() & _can_continue>0
   !}
?};
PX_KONT.cntx_pop();

:: 3. Czyscimy przypisania do etapow
PX_STAGE.cntx_psh();
PX_STAGE.index('PX_SET');
PX_STAGE.prefix(_px_set);
{? PX_STAGE.first()
|| {!
   |? PX_STAGE.cntx_psh();
      PX_STAGE.clear();
      PX_STAGE.PX_SET:=null();
      _can_continue:=PX_STAGE.put();
      PX_STAGE.cntx_pop();
      PX_STAGE.first() & _can_continue>0
   !}
?};
PX_STAGE.cntx_pop();

:: 4. Czyscimy przypisania do pozycji planu
PX_POZ.cntx_psh(); PX_VER.cntx_psh();
PX_VER.index('STATUS');
PX_VER.prefix();
{? PX_VER.first()
|| {!
   |? PX_POZ.index('PX_SET');
      PX_POZ.prefix(PX_VER.ref(),_px_set);
      {? PX_POZ.first()
      || {!
         |? PX_POZ.cntx_psh();
            PX_POZ.clear();
            PX_POZ.PX_SET:=null();
            _can_continue:=PX_POZ.put();
            PX_POZ.cntx_pop();
            PX_POZ.first() & _can_continue>0
         !}
      ?};
      PX_VER.next() & _can_continue>0
   !}
?};
PX_POZ.cntx_pop(); PX_VER.cntx_pop();

:: 5. Czyscimy przypisania do obiektow planistycznych
PX_OBJ.cntx_psh();
PX_OBJ.index('PX_SET');
PX_OBJ.prefix(_px_set);
{? PX_OBJ.first()
|| {!
   |? PX_OBJ.cntx_psh();
      PX_OBJ.clear();
      PX_OBJ.PX_SET:=null();
      {? PX_OBJ.MAN_SET='T'
      || PX_OBJ.MAN_SET:='N'
      ?};
      _can_continue:=PX_OBJ.put();
      PX_OBJ.cntx_pop();
      PX_OBJ.first() & _can_continue>0
   !}
?};
PX_OBJ.cntx_pop();

:: 6. Czyscimy przypisania do grup w kolejce
PX_GRP.cntx_psh();
PX_GRP.index('SET_SRC');
PX_GRP.prefix(_px_set);
{? PX_GRP.first()
|| {!
   |? PX_GRP.cntx_psh();
      PX_GRP.prefix();
      PX_GRP.SET_SRC:=null();
      _can_continue:=PX_GRP.put();
      PX_GRP.cntx_pop();
      PX_GRP.first() & _can_continue>0
   !}
?};
PX_GRP.cntx_pop();

:: 7. Usuwamy PX_GRPSy
PX_GRPS.cntx_psh();
PX_GRPS.index('PX_SET');
PX_GRPS.prefix(_px_set);
{? PX_GRPS.first()
|| {!
   |? _can_continue:=exec('del','px_grps');
      PX_GRPS.first() & _can_continue>0
   !}
?};
PX_GRPS.cntx_pop();

{? _mydo
|| end()
?};
{? _can_continue>0
|| _result:=1
?};
_result


\add_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja 'Dolacz' w oknie wertowania tabeli PX_SET
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_buffer:=exec('buffer','px_set');

_result:=0;
PX_SET.blank();
PX_SET.win_edit('RED');

{? PX_SET.edit("exec('validate','px_set','D')")
|| _buffer.get();
   _result:=exec('add','px_set',_buffer);
   {? _result=0
   || FUN.emsg('Dodawanie zestawu planistycznego zakończone niepowodzeniem.')
   ?}
?};
_result


\validate
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Walidacja rekordu PX_SET
::   WE: _a - STRING - 'D' - obsluga podczas dolacz, 'P' - obsluga podczas popraw
::       [_b] - STRING - symbol widoku przed redakcja
::   WY: STRING - symbol pola do ktorego wrocic jesli walidacja zakonczy sie niepowodzeniem
::----------------------------------------------------------------------------------------------------------------------
_mode:=_a;

_sym_before:='';
{? var_pres('_b')=type_of('')
|| _sym_before:=_b
?};

_result:='';

:: 1. Sprawdzam wypelnienie koniecznych pol
{? PX_SET.SYMBOL=''
|| FUN.emsg('Symbol zestawu planistycznego musi być wypełniony.');
   _result:='SYMBOL'
?};

:: 2. Sprawdzam czy symbol po redakcji jest unikalny
{? _sym_before<>PX_SET.SYMBOL
||
   PX_SET.cntx_psh();
   PX_SET.index('SYMBOL');
   PX_SET.prefix(PX_SET.SYMBOL,);
   {? PX_SET.size()>0
   || _msg:='Zestaw planistyczny o symbolu: '+PX_SET.SYMBOL+' już istnieje.';
      _msg+='\nNależy wprowadzić inny symbol zestawu.';
      FUN.emsg(_msg);
      _result:='SYMBOL'
   ?};
   PX_SET.cntx_pop();
   ~~
?};
_result


\update_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja 'Popraw' w oknie wertowania tabeli PX_SET
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

PX_SET.win_edit('RED');

{? var_pres('before_sym')>0
|| &before_sym
?};
before_sym:=PX_SET.SYMBOL;

:: Sprawdzam czy poprawiany zestaw nie zostal ustawiony jako domyslny zestaw ktoregos uzytkownika
{? exec('is_used','#params',8063,PX_SET.SYMBOL)>0
||
::  Jest uzywany wiec pytam czy na pewno poprawiać
   _msg:='Zestaw planistyczny: \''+PX_SET.SYMBOL+'\' jest używany jako domyślny dla niektórych użytkowników.';
   _msg+='\nCzy na pewno kontynuować redagowanie?';
   _can_continue:=FUN.ask(_msg);
   ~~
?};

{? _can_continue>0
||
:: Sprawdzam czy moge zablokowac rekord do zapisu
   {? PX_SET.r_lock(1,1,1)
   ||
      {? PX_SET.edit("exec('validate','px_set','P',before_sym)")
      || _can_continue:=PX_SET.put()
      ?};
      PX_SET.r_unlock();
      ~~
   || FUN.emsg('Zestaw planistyczny: \''+PX_SET.SYMBOL+'\' jest używany w tej chwili przez innego użytkownika. Poprawianie niemożliwe.');
      _can_continue:=0
   ?}
?};

{? _can_continue>0 & before_sym<>PX_VIEW.SYMBOL
||
:: Poprawiam wartosci w FO - symbol domyslnych widokow dla userow
   FO.cntx_psh();
   FO.index('TRESC');
   FO.prefix(8063,'\''+before_sym+'\'',);
   {? FO.first()
   || {!
      |? FO.TR:='\''+PX_SET.SYMBOL+'\'';
         FO.cntx_psh();
         FO.clear();
         _can_continue:=FO.put();
         FO.cntx_pop();
         FO.first() & _can_continue>0
      !}
   ?};
   FO.cntx_pop();
   ~~
?};
&before_sym;
~~


\delete_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja 'Usun' w oknie wertowania tabeli PX_SET
::   WY: <=0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

_group:=0;
_is_used:=0;
_is_useu:=0;
_symbol:=PX_SET.SYMBOL;

{? PX_SET.sel_size()>0
|| _group:=1
?};

{? _group=0
|| {? FUN.ask('Czy na pewno usunąć zestaw planistyczny: \''+PX_SET.SYMBOL+'\'?')
   || _can_continue:=1
   || _can_continue:=0
   ?};
   ~~
?};

{? _can_continue>0
||
:: Sprawdzam czy usuwany zestaw nie zostal powiazany z zasobami planistycznymi
   PX_KONT.cntx_psh();
   PX_KONT.index('PX_SET');
   PX_KONT.prefix(PX_SET.ref());
   {? PX_KONT.size()>0
   || _is_used:=1
   ?};
   PX_KONT.cntx_pop();
   {? _is_used>0
   ||
::    Jest uzywany wiec pytam czy na pewno usunac
      _msg:='Zestawowi planistycznemu: \''+PX_SET.SYMBOL+'\' zostały przypisane zasoby.';
      _msg+='\nCzy na pewno kontynuować usuwanie?';
      _can_continue:=FUN.ask(_msg);
      ~~
   ?}
?};

{? _can_continue>0
||
:: Sprawdzam czy usuwany widok nie zostal ustawiony jako domyslny widok ktoregos uzytkownika
   {? exec('is_used','#params',8063,PX_SET.SYMBOL)>0
   ||
      _is_useu:=1;
::    Jest uzywany wiec pytam czy na pewno usunac
      _msg:='Zestaw planistyczny: \''+PX_SET.SYMBOL+'\' jest używany jako domyślny dla niektórych użytkowników.';
      _msg+='\nCzy na pewno kontynuować usuwanie?';
      _can_continue:=FUN.ask(_msg);
      ~~
   ?}
?};

{? _can_continue>0
|| _result:=exec('delete','px_set',PX_SET.ref());

   {? _result<=0
   ||
      {? _result=-4
      || _msg:='Zestaw planistyczny: \''+PX_SET.SYMBOL+'\' jest używany w tej chwili przez innego użytkownika. Usuwanie niemożliwe.'
      || _msg:='Usunięcie zestawu planistycznego: \''+PX_SET.SYMBOL+'\' zakończone niepowodzeniem.'
      ?};
      {? _group=0
      || FUN.emsg(_msg)
      || KOMM.add(_msg,2)
      ?}
   ||
::    Jesli udalo sie usunac, a widok byl uzywany przez kogos jako domyslny to temu komus
::    kasuje z formul to ustawienie
      {? _is_useu>0
      ||
         FO_USR.cntx_psh();
         FO_USR.index('NR');
         FO_USR.prefix(8063,'N',);
         {? FO_USR.first()
         || {!
            |? {? var_pres('_interface')>100
               || obj_del(_interface)
               ?};
               _interface:=exec('interface','#params','U','N',8063,FO_USR.USERS().KOD);
               {? _interface.get()=_symbol
               || _interface.save('')
               ?};
               FO_USR.next()
            !}
         ?};
         FO_USR.cntx_pop();
         ~~
      ?}
   ?}
?};
_result


\delete_act_gr1
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja 'Usun' grupa przed w oknie wertowania PX_SET
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? FUN.ask('Zaznaczonych zestawów: '+$PX_SET.sel_size()+'. Czy usunąć je wszystkie?')
|| _result:=1;
   KOMM.init(200,,'Usuwanie zestawów planistycznych.','')
?};
_result


\delete_act_gr2
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja 'Usun' grupa po w oknie wertowania PX_SET
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KOMM.select(,,,,,0);
~~


\lock
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Blokuje przekazany zestaw planistyczny, ale w trybie Read Only
::   WE: _a - PX_SET.ref()
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_px_set:=_a;

_result:=0;

PX_SET.cntx_psh(); PX_SET.clear();
{? PX_SET.seek(_px_set)
|| _result:=PX_SET.r_lock(0,1,1)
?};
PX_SET.cntx_pop();
_result


\unlock
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Odblokowuje przekazany zestaw planistyczny
::   WE: _a - PX_SET.ref()
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_px_set:=_a;

_result:=0;

PX_SET.cntx_psh(); PX_SET.clear();
{? PX_SET.seek(_px_set)
|| _result:=PX_SET.r_unlock()
?};
PX_SET.cntx_pop();
_result


\select
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC/MENU KONTEKSTOWE
::  UTW: WH [12.41]
:: OPIS: Wyswietla okno wertowania tabeli PX_SET
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_one_version','px_param')=0
|| FUN.info('Zestawy planistyczne można redagować tylko jeżeli jest włączony parametr\n'+
   '\'500365 Praca na jednej wersji planu\''
   );
   return()
?};

PX_SET.cntx_psh();
PX_SET.clear();
PX_SET.win_sel('WER');
PX_SET.index('SYMBOL');
PX_SET.select();
PX_SET.cntx_pop();
~~


\users_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja 'uzytkownicy' w oknie wertowania tabeli PX_SET
::----------------------------------------------------------------------------------------------------------------------
PX_SETU.cntx_psh();
PX_SETU.win_sel('WER_Z');
PX_SETU.index('PX_SET');
PX_SETU.prefix(PX_SET.ref());
PX_SETU.select();
PX_SETU.cntx_pop();
~~


\set_chng_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Akcja wywolywana po zmianie zestawu z combobox na pulpicie - pelny widok planu
::----------------------------------------------------------------------------------------------------------------------
_before:=PX_VAR.PX_SET;

:: Odblokowuje poprzedni zestaw
exec('unlock','px_set',_before);

PX_SET.cntx_psh();
PX_SET.index('SYMBOL');
_selected:=exec('get_value','#desktop','','nawigacja',PxSelect.ID_SET);

PX_SET.prefix(_selected,);
{? PX_SET.first()
||
   {? _before<>PX_SET.ref()
   ||
      PX_VAR.PX_SET:=PX_SET.ref();

::    Blokuje zestaw
      exec('lock','px_set',PX_SET.ref());

::    Zapamietuje zestaw
      exec('set','#params',8063,'\''+PX_SET.SYMBOL+'\'',OPERATOR.USER,,'N');

      PX_KONT.index('ACTS');
      PX_KONT.prefix('T',PX_VAR.VIE_VER,PX_VAR.PX_SET);

      {? exec('queue_in_tabs','px_param')
      || {? exec('is_grop','px_param')>0
         || PX_GRPS.cntx_psh();
            PX_GRP.cntx_psh();
            {? PxSelect.Pxgrp.curr_WERT_G<>null()
            || {? PX_GRPS.seek(PxSelect.Pxgrp.curr_WERT_G)=0
               || PX_GRPS.seek(PxSelect.Pxgrp.curr_WERT_G_PREV)
               ?}
            ?};
            grp_disp(PxSelect.Pxgrp.TAB,PxSelect.Pxgrp.WERT_G,1);
            PX_GRPS.cntx_pop();
            PX_GRP.cntx_pop()
         ?};
         PX_GRPS.cntx_psh();
         PX_GRP.cntx_psh();
         {? var_pres('curr_WERT',PxSelect.Pxgrp)>0 & PxSelect.Pxgrp.curr_WERT<>null()
         || {? PX_GRPS.seek(PxSelect.Pxgrp.curr_WERT)=0
            || PX_GRPS.seek(PxSelect.Pxgrp.curr_WERT_PREV)
            ?}
         ?};
         grp_disp(PxSelect.Pxgrp.TAB,PxSelect.Pxgrp.WERT,1);
         PX_GRPS.cntx_pop();
         PX_GRP.cntx_pop();
         {? exec('is_one_version','px_param')
         ||
            {? type_of(PxSelect.Pxconn)>0 & var_pres('WER',PxSelect.Pxconn)>0
            || grp_disp(PX_CONN,PxSelect.Pxconn.WER)
            ?}
         ?}
      ?};

      PxSelect.Tab_OBJ.reload(0);
      grp_disp(PxSelect.Tab_OBJ.TAB,PxSelect.Tab_OBJ.WER,1,1);

      PxSelect.Tab_KONT.reload(0);
      grp_disp(PxSelect.Tab_KONT.TAB,PxSelect.Tab_KONT.WER,1,1);

      exec('filter_'+PX_VAR.FILTER_O,'px_obj');
      grp_disp(PX_OBJ,'WER',1,1);

      grp_disp(PX_KONT,'PX_WER',1,1);

      {? PX_KONT.size()=0
      || PX_VAR.SEL_KONT:=null();
::       Jesli zestaw nie ma zasobow to trzeba recznie odswiezyc kafelki, bo grp_disp w tabeli PX_KONT
::       tego nie zrobi dla pustej dziedziny
         exec('kafelki_reload','px_plan')
      ?};

      grp_disp(PX_POZ,PxSelect.wx_POZ,1,1)
   ||
      exec('lock','px_set',_before)
   ?}
||
   {? _before<>null()
   ||
      PX_VAR.PX_SET:=null();

::    Zapamietuje zestaw
      exec('set','#params',8063,'\'\'',OPERATOR.USER,,'N');

      PX_KONT.index('ACT');
      PX_KONT.prefix('T',PX_VAR.VIE_VER);

      {? exec('queue_in_tabs','px_param')
      || {? exec('is_grop','px_param')>0
         || PX_GRPS.cntx_psh();
            PX_GRP.cntx_psh();
            {? PxSelect.Pxgrp.curr_WERT_G<>null()
            || {? PX_GRPS.seek(PxSelect.Pxgrp.curr_WERT_G)=0
               || PX_GRPS.seek(PxSelect.Pxgrp.curr_WERT_G_PREV)
               ?}
            ?};
            grp_disp(PxSelect.Pxgrp.TAB,PxSelect.Pxgrp.WERT_G,1);
            PX_GRPS.cntx_pop();
            PX_GRP.cntx_pop()
         ?};
         PX_GRPS.cntx_psh();
         PX_GRP.cntx_psh();
         {? var_pres('curr_WERT',PxSelect.Pxgrp)>0 & PxSelect.Pxgrp.curr_WERT<>null()
         || {? PX_GRPS.seek(PxSelect.Pxgrp.curr_WERT)=0
            || PX_GRPS.seek(PxSelect.Pxgrp.curr_WERT_PREV)
            ?}
         ?};
         grp_disp(PxSelect.Pxgrp.TAB,PxSelect.Pxgrp.WERT,1);
         PX_GRPS.cntx_pop();
         PX_GRP.cntx_pop();
         {? exec('is_one_version','px_param')
         ||
            {? type_of(PxSelect.Pxconn)>0 & var_pres('WER',PxSelect.Pxconn)>0
            || grp_disp(PX_CONN,PxSelect.Pxconn.WER)
            ?}
         ?}
      ?};

      PxSelect.Tab_OBJ.reload(0);
      grp_disp(PxSelect.Tab_OBJ.TAB,PxSelect.Tab_OBJ.WER,1,1);

      PxSelect.Tab_KONT.reload(0);
      grp_disp(PxSelect.Tab_KONT.TAB,PxSelect.Tab_KONT.WER,1,1);

      exec('filter_'+PX_VAR.FILTER_O,'px_obj');
      grp_disp(PX_OBJ,'WER',1,1);

      grp_disp(PX_KONT,'PX_WER',1,1);

      {? PX_KONT.size()=0
      || PX_VAR.SEL_KONT:=null();
::       Jesli zestaw nie ma zasobow to trzeba recznie odswiezyc kafelki, bo grp_disp w tabeli PX_KONT
::       tego nie zrobi dla pustej dziedziny
         exec('kafelki_reload','px_plan')
      ?};

      grp_disp(PX_POZ,PxSelect.wx_POZ,1,1)
   ||
      exec('lock','px_set',_before)
   ?}
?};

exec('actions_set','px_grps');
exec('dnd','px_grps');
exec('actions','px_conn');
exec('dnd','px_conn');

PX_SET.cntx_pop();
~~


\set_default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Ustawia zestaw planistyczny jako domyslny startowy
::----------------------------------------------------------------------------------------------------------------------
{? PX_SET.DEFAULT='N'
|| {? FUN.ask('Czy zaznaczyć zestaw \''+PX_SET.SYMBOL+'\' jako domyślny zestaw startowy?')
   || PX_SET.cntx_psh();
      PX_SET.prefix();
      {? PX_SET.first()
      || {!
         |? PX_SET.DEFAULT:='N';
            PX_SET.put();
            PX_SET.next()
         !}
      ?};
      PX_SET.cntx_pop();
      PX_SET.DEFAULT:='T';
      PX_SET.put()
   ?}
|| {? FUN.ask('Czy usunąć zaznaczenie zestawu \''+PX_SET.SYMBOL+'\' jako domyślnego zestawu startowego?')
   || PX_SET.DEFAULT:='N';
      PX_SET.put()
   ?}
?};
~~


\kind_none
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Sposob przypisywania zestawu startowego do obiektu - brak
::----------------------------------------------------------------------------------------------------------------------
'BRAK'


\kind_default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Sposob przypisywania zestawu startowego do obiektu - domyslny
::----------------------------------------------------------------------------------------------------------------------
'DOMYŚLNY'


\kind_pxtex
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Sposob przypisywania zestawu startowego do obiektu - wg przepisu planistycznego
::----------------------------------------------------------------------------------------------------------------------
'WG PRZEPISU'


\default_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Zwraca domyslny startowy zestaw planistyczny
::   WY: PX_SET.ref() albo null()
::----------------------------------------------------------------------------------------------------------------------
_res:=null();

PX_SET.cntx_psh();
PX_SET.prefix();
{? PX_SET.first()
|| {!
   |? {? PX_SET.DEFAULT='T' || _res:=PX_SET.ref() ?};
      _res=null() & PX_SET.next()
   !}
?};
PX_SET.cntx_pop();

_res


\pxtex_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Zwraca startowy zestaw planistyczny wg przepisu planistycznego dla obiektu
::   WE: _a - PX_OBJ.ref()
::       [_b] - PX_TEX.ref
::   WY: PX_SET.ref() albo null()
::----------------------------------------------------------------------------------------------------------------------
_px_obj:=_a;

_px_tex:=null();
{? var_pres('_b')=type_of(PX_TEX.ref())
|| _px_tex:=_b
|| _px_tex:=exec('get_default_tex','px_tex',_px_obj)
?};

_res:=null();

PX_STAGE.cntx_psh();
PX_TEX.cntx_psh();
PX_TEX.clear();
{? PX_TEX.seek(_px_tex)
||
   _Px_set:=tab_tmp(1,'REF','STRING[16]','PX_SET.ref()',
                      'DEFAULT','STRING[1]','Czy zestaw jest domyślny');

:: Pobieram etapy bez poprzedników dla danego przepisu
   _etapy_start:=exec('stages_starting_ending','px_stage',_px_tex,,1);
   {? _etapy_start.first()
   || {!
      |?
         _Px_set.prefix(_etapy_start.PX_SET);
         {? _Px_set.size()=0
         || _Px_set.REF:=_etapy_start.PX_SET;
            _Px_set.DEFAULT:=exec('FindAndGet','#table',PX_SET,_etapy_start.PX_SET,,"DEFAULT",'');
            _Px_set.add()
         ?};
         _etapy_start.next()
      !}
   ?};

   _Px_set.prefix();
   {? _Px_set.size()=1
   ||
::    Jeśli jest tylko jeden zestaw to sprawa jest prosta
      {? _Px_set.first()
      || _res:=exec('FindAndGet','#table',PX_SET,_Px_set.REF,,"ref()",null())
      ?}
   |? _Px_set.size()>1
   ||
::    Jest kilka zestawów więc trzeba wśród nich odnaleźć domyślny
      _i2:=_Px_set.ndx_tmp('',1,'DEFAULT',,);
      _Px_set.index(_i2);
      _Px_set.prefix('T');
      {? _Px_set.first()
      || _res:=exec('FindAndGet','#table',PX_SET,_Px_set.REF,,"ref()",null())
      ?}
   ?}
?};
PX_TEX.cntx_pop();
PX_STAGE.cntx_pop();
_res


\px_set_fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Format wyswietlania pol w tabeli PX_SET
::----------------------------------------------------------------------------------------------------------------------
_res:='';
{? cur_afld()='SYMBOL'
|| {? exec('is_one_version','px_param')
   || _res:='empty=0'
   || _res:='empty=1'
   ?}
?};
_res


\px_set_fld_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Przed wyswietlaniem pol w tabeli PX_SET
::----------------------------------------------------------------------------------------------------------------------
_res:='';
{? cur_afld()='SYMBOL'
|| {? ~exec('is_one_version','px_param')
   || _res:=exec('findfnrd','color')
   ?}
?};
_res


\select_zasoby
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja 'Zasoby' w oknie wertowania tabeli PX_SET
::----------------------------------------------------------------------------------------------------------------------
PX_KONT.cntx_psh();
PX_KONT.index('ACTS');
_grp:=PX_KONT.grp_make('Zasoby zestawu',,'#pxsetzasob');
PX_KONT.grp_sel(_grp,PX_KONT,'WER',,"PX_VAR.SEL_KONT:=PX_KONT.ref()",,,,,,,,'maximized');
PX_KONT.win_sel(_grp);
_mainver:=exec('get_mainversion','px_ver');
PX_KONT.prefix('T',_mainver,PX_SET.ref());
PX_KONT.first();
PX_KONT.actions('WER','DUPAE:D');
PX_KONT.select();
PX_KONT.actions('WER','');
PX_KONT.cntx_pop();
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 3afadc2f74627021d9f201396ad0774ce75cf2c56e1030c5f64d96e95d20e19fbee9edc778430ee8250d4866b3fd6fb0d6d147606e44dd8527036f3ccf5d1035ca96e167ad07ef9157e4794ce407336e91400724e9c891b40ad7a727db0eeff4d79902d87e19ea3fa08f444581604229959fa1577cdfc460e8533e599c7c6b23
