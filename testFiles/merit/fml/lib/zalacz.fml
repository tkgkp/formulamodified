:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zalacz.fml
:: Utworzony: 22.07.2019
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Plik zawiera formuły do obsługi "Załączników" i "Elektronicznej Dokumentacji Pracowniczej"
::            przechowywanych w tabeli ZALACZ.
::======================================================================================================================


\limitP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła sprawdza czy bieżący użytkownik (OPERATOR.USER) ma dostęp do wszystkich P związanych z OSOBA _a.
::   WE: _a [REFERENCE] - Wskazanie rekordu tabeli OSOBA.
::   WY: 1 - Dostęp powinien być zablokowany (brak uprawnień do wszystkich danych).
::       0 - Dostęp może zostać udzielony.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null())
|| _osoba:=_a
|| return(0)
?};

sql(
   'select P.REFERENCE from P left join F_ZATR where P.FIRMA=:_a and P.OSOBA=:_b and F_ZATR.KOD=\'P\' '
   'except '
   'select REF from :_c',
   exec('ref_firma','ustawienia'),_osoba,exec('dostepne_p_osoba','schemat','PED','P',,$_osoba)
).first()


\tzalacz_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła zwracająca parametry wykorzystywane podczas pracy w obszarach roboczych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('esign_decl','#esign');

:: Uwaga na maksymalną liczbę parametrów formuły (26)!
_tzalacz0:=exec('obj_ntab_set','#array',,
:: Czy klient posiada licencję na dziedzinę PED?
   'lic_PED',exec('lic','#b_domain','PED'),

:: Czy klient posiada licencję na dziedzinę POR?
   'lic_POR',exec('lic','#b_domain','POR'),

:: Tryb pracy: Z - załączniki / D - dokumentacja.
   'tryb','',
:: Dziedzina pracy: P / OSOBA.
   'dom','',
:: Miejsce wywołania.
   'msc','',
:: "Formuła" czyszcząca parametry pracy / działania.
   'blank',".tryb:=.dom:=.msc:=''",

:: Nazwa sekcji dla mechanizmu "profile", w której zapamiętywane będą parametry pracy.
   'section','ZALACZ',

:: Separator w ścieżce (po stronie klienta).
   'sep0',exec('sep','#file',0),

:: Okno redagowania załączników (rekordów tabeli stałej ZALACZ).
   'RED',~~
);

_tzalacz:=exec('obj_ntab_set','#array',_tzalacz0,
:: Uchwyt obiektu wspomagającego obsługę podpisu elektronicznego.
   'esign',obj_new(@.CLASS.ESIGN),

:: Tablica elementów nazwanych do obsługi tabeli tymczasowej z załącznikami do prezentacji (widoku).
   'ZALACZ',obj_new('TAB','NDX','ws','we'),

:: Tablica elementów nazwanych do szczególnej obsługi tabeli SLO_NAZ.
   'SLO_NAZ',obj_new('wd'),

:: Tablica elementów nazwanych do obsługi przenoszenia załączników (Dxx).
   'zaoh',obj_new('SQLREF','CZESC','NAZWA','info'),

:: Tablica elementów nazwanych do obsługi zapisywania plików na dysku.
   'save',obj_new('dir','ovr','TAB'),

:: Tablica elementów nazwanych do obsługi widoku podczas akcji grupowych.
   'grp',obj_new('ZALACZ')

);

:: = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
:: _tzalacz.RED

_szer:=40;
_tzalacz.RED:=ZALACZ.mk_edit('Załącznik'@,0,'zalaczqred');
ZALACZ.win_esep(_tzalacz.RED,'Dane podstawowe'@@);
ZALACZ.win_efld(_tzalacz.RED,ZALACZ,'DATA',,,,,,,,MS.comment(ZALACZ,'DATA'));
ZALACZ.efld_opt(_tzalacz.RED,'mark=1',ZALACZ,'DATA');
ZALACZ.win_efld(_tzalacz.RED,ZALACZ,'TYP_ZAL','NAZWA','*',_szer-3,,,,,'Typ załącznika'@,1);
ZALACZ.efld_opt(_tzalacz.RED,'mark=1',ZALACZ,'TYP_ZAL','NAZWA');
ZALACZ.win_efld(_tzalacz.RED,ZALACZ,'ZAL',,,_szer-3,,,,,MS.comment(ZALACZ,'ZAL'),,'F3_button=1,');
ZALACZ.efld_opt(_tzalacz.RED,'mark=1',ZALACZ,'ZAL');
ZALACZ.win_efld(_tzalacz.RED,ZALACZ,'LOK',,,_szer,,,,,MS.comment(ZALACZ,'LOK'));
ZALACZ.win_esep(_tzalacz.RED,'Dostępność na portalu'@@);
ZALACZ.win_efld(_tzalacz.RED,ZALACZ,'WWWE',,,,,,'Pracownik'@@,,MS.comment(ZALACZ,'WWWE'),
   'check-box','left_label=1,check_label="%1"'['Dostępny dla pracownika'@@],"'T'","'N'"
);
{? ~_tzalacz.lic_POR
|| ZALACZ.win_efld(_tzalacz.RED,ZALACZ,'WWWS',,,,,,'Przełożony'@@,,MS.comment(ZALACZ,'WWWS'),
      'check-box','left_label=1,check_label="%1"'['Dostępny dla przełożonego'@@],"'T'","'N'"
   )
?};
exec('ok_esc','#window',ZALACZ,_tzalacz.RED,,,,,,,exec('text_red_ok','#window'));

:: = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
:: _tzalacz.ZALACZ

_TAB:=tab_tmp(1,
:: Dane z rekordu tabeli ZALACZ.
   'TYP_ZAL','STRING[150]','Typ załącznika'@,

   'DATA','DATE','Data powstania dokumentu'@,
   'NAME','STRING[64]','Nazwa pliku'@,
   'DESCR','STRING[255]','Opis'@,
   'SIZE','INTEGER','Rozmiar'@,
   'DTSIGN','DATE','Data opatrzenia podpisem'@,

   'WWWE','STRING[1]','WWW - pracownik'@,
   'WWWS','STRING[1]','WWW - przełożony'@,

   'POTW','STRING[1]','Potwierdzenie pobrania'@,
   'POB_D','DATE','Data pobrania'@,
   'POB_G','TIME','Godzina pobrania'@,

   'HASH','STRING[40]','Skrót treści załączonego pliku'@,

:: Dane z BLOB-a.
   'ZAL','BLOBIMAGE','Załącznik'@,
   'CRT_DATE','DATE','Data utworzenia pliku'@,
   'CRT_TIME','TIME','Godzina utworzenia pliku'@,
   'MOD_DATE','DATE','Data modyfikacji pliku'@,
   'MOD_TIME','TIME','Godzina modyfikacji pliku'@,

:: Dane "obliczane".
   'G','INTEGER','Gałąź (lp.)'@,
   'CZESC','STRING[5]','Część'@,
   'NR','INTEGER','Numer kolejny dokumentu'@,
   'MSC','STRING[150]','Miejsce załączenia'@,
   'MOD','STRING[1]','Zapis może być modyfikowany'@,
   'DEP','DATE','Data zatarcia kary'@,

:: Pola techniczne
   'ZALACZ','STRING[48]','ZALACZ.uidref()',
   'ZAOH','STRING[48]','ZAOH.uidref()'
);
_NDX:=obj_new('TYP_ZAL','NR');
_NDX.TYP_ZAL:=_TAB.index('?');
_NDX.NR:=_TAB.ndx_tmp('Chronologicznie',,'G',,,'CZESC',,,'DATA',,,'NR',,);
_TAB.index(_NDX.NR);

:: Okna redagowania (tylko do podglądu danych - display).  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_we:=obj_new('z','de','ds');
:: 1. z  - Załączniki.
:: 2. de - Dokumentacja pracownicza, element okna grupowego.
:: 3. ds - Dokumentacja pracownicza, okno samodzielne.
_su:=sec_superuser();
_szer:=64;
{! _lp:=1 .. 3
|! _we[_lp]:=_TAB.mk_edit('Załącznik'@,,'#zalacz',,,'html_maximized');
   _TAB.win_esep(_we[_lp],'Plik'@);
   _TAB.win_efld(_we[_lp],,'NAME',,,_szer,,,'Nazwa'@,,'Nazwa załączonego pliku'@);
   _TAB.win_efld(_we[_lp],,'CRT_DATE',,,,,,'Data utworzenia'@,,'Data utworzenia załączonego pliku'@);
   _TAB.win_efld(_we[_lp],,'CRT_TIME',,,10,,,'Godzina utworzenia'@,,'Godzina utworzenia załączonego pliku'@);
   _TAB.win_efld(_we[_lp],,'MOD_DATE',,,,,,'Data modyfikaji'@,,'Data modyfikacji załączonego pliku'@);
   _TAB.win_efld(_we[_lp],,'MOD_TIME',,,10,,,'Godzina modyfikacji'@,,'Godzina modyfikacji załączonego pliku'@);
   _TAB.win_efld(_we[_lp],,'SIZE',,,10,,,'Rozmiar'@,,'Rozmiar załączonego pliku (w bajtach)'@);
   {? _su
   || _TAB.win_efld(_we[_lp],,'ZALACZ',,,,,,,,'Wskazanie rekordu załącznika'@)
   ?};
   _TAB.win_esep(_we[_lp],'Dane rozszerzone'@);
   _TAB.win_efld(_we[_lp],,'DATA',,,,,,,,'Data powstania dokumentu'@);
   _TAB.win_efld(_we[_lp],,'TYP_ZAL',,,_szer,,,,,'Typ załącznika'@);
   _TAB.win_efld(_we[_lp],,'DESCR',,,_szer,,,,,'Opis zawartości'@);
   _TAB.win_efld(_we[_lp],,'MSC',,,_szer,,,,,'Miejsce załączenia pliku'@);
   {? _lp>1
   || _TAB.win_esep(_we[_lp],'Dokumentacja pracownicza'@);
      _TAB.win_efld(_we[_lp],,'DTSIGN',,,,,,,,'Data opatrzenia pliku podpisem elektronicznym'@);
      _TAB.win_efld(_we[_lp],,'CZESC',,,10,,,,,'Symbol części'@);
      {? _lp=2
      || _TAB.win_efld(_we[_lp],,'NR',,,10,,,'Numer kolejny'@,,'Numer kolejny dokumentu'@);
         _TAB.win_efld(_we[_lp],,'MOD',,,,,,'Bieżący stosunek pracy'@,,
            'Załącznik związany z bieżącym stosunkiem pracy'@,
            'check-box','check_label="%1"' ['Załącznik związany z bieżącym stosunkiem pracy'@],"'T'","'N'")
      ?};
      {? _su
      || _TAB.win_efld(_we[_lp],,'ZAOH',,,,,,,,'Wskazanie położenia w strukturze'@)
      ?}
   ?};
   _TAB.win_esep(_we[_lp],'Portal'@);
   _TAB.win_efld(_we[_lp],,'WWWE',,,,,,'Pracownik'@,,'Dostępny dla pracownika / współpracownika'@,
      'check-box','check_label="%1"' ['Załącznik dostępny na portalu dla pracownika'@],"'T'","'N'");
   {? ~_tzalacz.lic_POR
   || _TAB.win_efld(_we[_lp],,'WWWS',,,,,,'Przełożony'@,,'Dostępny dla przełożonego'@,
         'check-box','check_label="%1"' ['Załącznik dostępny na portalu dla przełożonego'@],"'T'","'N'")
   ?};
   _TAB.win_efld(_we[_lp],,'POTW',,,,,,'Potwierdzenie'@,,'Potwierdzenie pobrania'@,'check-box',
      'check_label="%1"' ['Pracownik potwierdził pobranie załącznika'@],"'T'","'N'");
   _TAB.win_efld(_we[_lp],,'POB_D',,,,,,,,'Data pobrania pliku'@);
   _TAB.win_efld(_we[_lp],,'POB_G',,,10,,,,,'Godzina pobrania pliku'@);

:: W drugiej kolumnie dodamy podgląd załączonego pliku. Przyjmijmy maksymalną wysokość: 33 wierszy.
:: Zazwyczaj prezentowane będą dokumenty A4. W takim wypadku stosunek wysokości do szerokości wynosi 297/210=1.41.
:: Jednak w oknie redagowania wysokość wiersza nie jest równa szerokości kolumny. Dlatego też eksperymentalnie ustalono,
:: że szerokość powinna być prawie 2 razy większa niż wysokość (65 kolumn).
   _TAB.win_ecol(_we[_lp],'100%');
   _TAB.win_efld(_we[_lp],,'ZAL',,,65,33,,,1)
!};

_tzalacz.ZALACZ.TAB:=_TAB;
_tzalacz.ZALACZ.NDX:=_NDX;
_tzalacz.ZALACZ.we:=_we;

obj_del(_we);
&_we;
obj_del(_NDX);
&_NDX;
obj_del(_TAB);
&_TAB;

:: = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
:: _tzalacz.SLO_NAZ

:: Okno słownika (z obsługą filtra).
_wd:=SLO_NAZ.mk_sel('Typy załączników'@,'N',,'#slo_naz_zal',,,,,'P');
SLO_NAZ.win_fld(_wd,,'NAZWA',,,60,,,,,'Nazwa typu załącznika'@);
SLO_NAZ.win_act(_wd,,'Szukaj');

_tzalacz.SLO_NAZ.wd:=_wd;

:: = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
:: _tzalacz.save

_TAB:=tab_tmp(1,'PLIK','STRING[64]','Nazwa pliku'@);
_we:=_TAB.mk_edit('Zmień nazwę pliku'@);
_TAB.win_esep(_we,'Dane podstawowe'@);
_TAB.win_efld(_we,,'PLIK');
exec('ok_esc','#window',_TAB,_we,,,,,,,exec('text_red_ok','#window'));
_TAB.win_edit(_we);
_TAB.efld_opt(_we,'mark=1',_TAB,'PLIK');

_tzalacz.save.TAB:=_TAB;

obj_del(_TAB);
&_TAB;

:: = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

_tzalacz


\tzalacz_win_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła ustawia odpowiednie okno redagowania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tzalacz:=params_get().tzalacz;
_we:=_tzalacz.ZALACZ.we;

_tzalacz.ZALACZ.TAB.win_edit(
   {? _tzalacz.tryb='Z'
   || {? _tzalacz.msc<>'' & _tzalacz.lic_PED || _we.ds || _we.z ?}
   |? _tzalacz.tryb='D'
   || {? _tzalacz.msc='' || _we.de || _we.ds ?}
   || ''
   ?}
)


\tzalacz_mk_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła buduje i zwraca okno wertowania dla tabeli params_get().tzalacz.ZALACZ.TAB na podstawie bieżących
::       ustawień (pól tablicy params_get().tzalacz).
::   WE: [_a] [NUMBER] - Dostępność akcji modyfikujących załączniki:
::             0 - Nie [domyślnie];
::             1 - Tak.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_modify:=var_pres('_a')=type_of(0) & _a;

_tzalacz:=params_get().tzalacz;
_TAB:=_tzalacz.ZALACZ.TAB;

:: Okno dla "Dokumentacji pracowniczej".
_dp:=_tzalacz.tryb='D';
:: Okno jako element okna grupowego.
_grp:=_tzalacz.msc='';

:: Pola okna wertowania. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_ws:=_TAB.mk_sel('Załączniki'@,'P',,'#zalacz'+$_dp+$_grp,,,,,'U',,,,,'html_maximized');
{? _dp
|| _TAB.win_fld(_ws,,'CZESC',,,-5,,,,,'Symbol części'@)
?};
_TAB.win_fld(_ws,,'DATA',,,-10,,,,,'Data powstania dokumentu'@);
{? _dp & _grp
|| _TAB.win_fld(_ws,,'NR',,,-4,,,'Numer'@,,'Numer kolejny dokumentu'@)
?};
_TAB.win_fld(_ws,,'TYP_ZAL',,,-15,,,,,'Typ załącznika'@);
{? _dp
|| _TAB.win_fld(_ws,,'DTSIGN',,,-10,,,,,'Data opatrzenia pliku podpisem elektronicznym'@)
?};
_TAB.win_fld(_ws,,'NAME',,,-15,,,,,'Nazwa załączonego pliku'@);
_TAB.win_fld(_ws,,'SIZE',,,-9,,,,,'Rozmiar załączonego pliku'@);
_TAB.win_fld(_ws,,'DESCR',,,25,,,,,'Opis załącznika'@);
_TAB.win_fld(_ws,,'MSC',,,-15,,,,,'Miejsce załączenia pliku'@);
{? _dp & _grp
|| _TAB.win_fld(_ws,,'MOD',,,-3,,,'Bieżący stosunek pracy',,'Załącznik związany z bieżącym stosunkiem pracy? [T/N]'@,2,,
      "'T'","'N'"
   )
?};
_TAB.win_fld(_ws,,'WWWE',,,-3,,,,,'Załącznik dostępny na portalu dla pracownika? [T/N]'@,2,,"'T'","'N'");
{? ~_tzalacz.lic_POR
|| _TAB.win_fld(_ws,,'WWWS',,,-3,,,,,'Załącznik dostępny na portalu dla przełożonego? [T/N]'@,2,,"'T'","'N'")
?};
:: Akcje okna wertowania.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
{? _modify
|| {! _empty:=0 .. 1
   |! _TAB.win_act(_ws,_empty,'Formuła','Dołącz'@@,,'Dołączenie nowego zapisu'@,
         "params_exec('tzalacz_dolacz_b','zalacz')",,_empty,,,,
         'D'
      )
   !};
   _TAB.win_btn(_ws,'text=%1' ['Dołącz'@],'menu:D');
   _TAB.win_act(_ws,,'Formuła','Popraw'@@,,'Poprawienie bieżącego zapisu'@,
      "{? params_exec('tzalacz_seek','zalacz') || params_exec('tzalacz_popraw_b','zalacz') ?}",,,,,,
      'P'
   );
   _TAB.win_btn(_ws,'text=%1' ['Popraw'@],'menu:P');
   _TAB.win_act(_ws,,'Formuła','Usuń'@@,,'Usunięcie bieżącego zapisu'@,
      "{? params_exec('tzalacz_seek','zalacz') || params_exec('tzalacz_usun_b','zalacz') ?}",,,
      1,
      "params_exec('tzalacz_usun_bg','zalacz')",
      "params_exec('tzalacz_usun_ag','zalacz')",
      'U'
   );
   _TAB.win_btn(_ws,'text=%1' ['Usuń'@],'menu:U');
   {? _dp & _grp
   || _TAB.win_act(_ws,,'Formuła','P&rzenieś'@@,,'Przeniesienie załącznika do innej pod-części'@,
         "{? params_exec('tzalacz_seek','zalacz') || params_exec('tzalacz_przenies_b','zalacz') ?}",,,
         1,
         "params_exec('tzalacz_przenies_bg','zalacz')",
         "params_exec('tzalacz_przenies_ag','zalacz')",
         'R'
      )
   ?}
?};
{? _modify & _tzalacz.msc='VAT_DEK'
|| {! _empty:=0 .. 1
   |! _TAB.win_act(_ws,_empty,'Formuła','Ge&neruj PDF'@@,,'Generuje załącznik w formacie PDF'@,
         "params_exec('pit_zal','gen_zal'); params_exec('tzalacz_refresh','zalacz')",,,,,,
         'N',,'target=window'
      )
   !}
?};
_TAB.win_act(_ws,,'Formuła','Otwórz'@@,,'Otworzenie załącznika'@,
   "{? params_exec('tzalacz_seek','zalacz') || exec('bl_view','#blob',ZALACZ,'ZAL') ?}",,,,,,
   'O'
);
_TAB.win_btn(_ws,'text=%1' ['Otwórz'@],'menu:O');
{? _modify
|| _TAB.win_act(_ws,,'Formuła','Edytuj'@@,,'Edycja załącznika'@,
      "{? params_exec('tzalacz_seek','zalacz') || params_exec('tzalacz_edytuj_b','zalacz') ?}",,,,,,
      'E'
   )
?};
_TAB.win_act(_ws,,'Formuła','Zapisz'@@,,'Zapisanie załącznika'@,
   "{? params_exec('tzalacz_seek','zalacz') || params_exec('tzalacz_zapisz_b','zalacz') ?}",,,
   1,
   "params_exec('tzalacz_zapisz_bg','zalacz')",,
   'Z'
);
_TAB.win_btn(_ws,'text=%1' ['Zapisz'@],'menu:Z');
{? _dp
|| _TAB.win_act(_ws,,'Formuła','Ekspor&tuj'@@,,'Utworzenie uporządkowanego zbioru wybranych dokumentów'@,
      "{? params_exec('tzalacz_seek','zalacz') || params_exec('tzalacz_eksportuj_b','zalacz') ?}",,,
      1,
      "params_exec('tzalacz_eksportuj_bg','zalacz')",,
      'T'
   );
   _TAB.win_btn(_ws,'text=%1' ['Ekspor&tuj'@],'menu:T');
   _TAB.win_act(_ws,,'Menu','Funkcje'@@,,,,,,,,,'F');
   {? _modify
   || _TAB.win_act(_ws,,'Formuła','Weryfikuj podpis'@@,'Funkcje',
         'Określenie daty opatrzenia pliku podpisem elektronicznym'@,
         "{? params_exec('tzalacz_seek','zalacz') || params_exec('tzalacz_weryfikuj_b','zalacz') ?}",,,
         1,
         "params_exec('tzalacz_weryfikuj_bg','zalacz')",
         "params_exec('tzalacz_weryfikuj_ag','zalacz')",
         'W'
      );
      _TAB.win_act(_ws,,'Formuła','Podpisz'@@,'Funkcje','Opatrzenie dokumentu podpisem elektronicznym'@,
         "{? params_exec('tzalacz_seek','zalacz') || params_exec('tzalacz_podpisz_b','zalacz') ?}",,,
         1,
         "params_exec('tzalacz_podpisz_bg','zalacz')",
         "params_exec('tzalacz_podpisz_ag','zalacz')",
         'P'
      )
   ?};
   _TAB.win_act(_ws,,'Formuła','Druku&j'@@,'Funkcje','Wydrukowanie dokumentu'@,
      "{? params_exec('tzalacz_seek','zalacz') || params_exec('tzalacz_drukuj_b','zalacz') ?}",,,
      1,
      "params_exec('tzalacz_drukuj_bg','zalacz')",,
      'J'
   );
   _TAB.win_act(_ws,,'Formuła','Metadane'@@,,'Prezentacja metadanych'@,
      "{? params_exec('tzalacz_seek','zalacz') || params_exec('zaomeda_show','zalacz',ZALACZ.uidref()) ?}",,,,,,
      'M'
   )
?};
_TAB.win_act(_ws,,'Formuła','Historia pobrań'@@,,'Przeglądanie historii pobrań'@,
   "{? params_exec('tzalacz_seek','zalacz') || params_exec('zal_pobh_select','zalacz',ZALACZ.ref()) ?}",,,,,,
   'H'
);
_for:="
   {? params_exec('tzalacz_seek','zalacz') & exec('czy_archiwum','archiwum','ZALACZ','ZAL')
   || params_exec('pokaz','archiwum',ZALACZ.uidref(),'ZAL')
   ?}
";
_TAB.win_act(_ws,,'Formuła','Wersje z&ałącznika'@@,,'Przeglądanie archiwum załącznika'@,_for,,,,,,'A');
_TAB.win_act(_ws,,'Formuła','Zmian&y'@@,,'Informacje o modyfikacjach bieżącego zapisu'@,
   "{? params_exec('tzalacz_seek','zalacz') || params_exec('zmiany','#syslog',ZALACZ) ?}",,,,,,
   'Y'
);
_TAB.win_act(_ws,,'Kolejność');
{? _dp
|| _TAB.win_act(_ws,,'Formuła','Legenda'@@,,'Legenda'@,"exec('legenda','color','TZALACZ#01')",,,,,,'L',,'target=window')
?};
_TAB.win_act(_ws,,'Rekord',,,,"{? params_exec('tzalacz_seek','zalacz') || params_exec('tzalacz_bd','zalacz',_a) ?}");

_ws


\tzalacz_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła odpowiedzialna za wypełnienie danymi tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tzalacz:=params_get().tzalacz;

_tzalacz.ZALACZ.TAB.erase();

_err:=0;
ZALACZ.cntx_psh();
ZALACZ.index('NAG');
{? _tzalacz.msc<>'' |
   {? _tzalacz.tryb='Z'
   || ZAOH.get()
   |? _tzalacz.tryb='D'
   || ZAOHI.get() & ZAOHI.ZAOH().get()
   ?}
|| _array:=exec('tzalacz_get','zalacz',_tzalacz.dom,_tzalacz.msc);
   {? _array.err<>''
   || _msg:=_array.err+'\n'+'Napraw dane i spróbuj ponownie.'@;
      _err+=1
   ?};

   {? _tzalacz.tryb='Z'
::    Czy użytkownik ma uprawnienia do modyfikacji załączników na poziomie P / OSOBA?
   || _upr:=obj_new('P','OSOBA');
      _upr.P:=exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_ORZA');
      _upr.OSOBA:=exec('chk_role','#b__box',OPERATOR.USER,'PKD_DOS_PRZA')
   ?};

   {? _array.ZALACZ.first()
   || ZALACZ.prefix();
      {!
      |? {? ~ZALACZ.seek(_array.ZALACZ.REF)
         || _err+=1
         |? _tzalacz.ZALACZ.TAB.blank();
            _tzalacz.ZALACZ.TAB.TYP_ZAL:=ZALACZ.TYP_ZAL().NAZWA;
            _tzalacz.ZALACZ.TAB.DATA:=ZALACZ.DATA;
            _tzalacz.ZALACZ.TAB.NAME:=ZALACZ.ZAL_NAME;
            _tzalacz.ZALACZ.TAB.DESCR:=ZALACZ.LOK;
            _tzalacz.ZALACZ.TAB.SIZE:=ZALACZ.SIZE;
            _tzalacz.ZALACZ.TAB.DTSIGN:=ZALACZ.DTSIGN;
            _tzalacz.ZALACZ.TAB.WWWE:=ZALACZ.WWWE;
            _tzalacz.ZALACZ.TAB.WWWS:=ZALACZ.WWWS;
            _tzalacz.ZALACZ.TAB.POTW:=ZALACZ.POTW;
            _tzalacz.ZALACZ.TAB.POB_D:=ZALACZ.POB_D;
            _tzalacz.ZALACZ.TAB.POB_G:=ZALACZ.POB_G;
            _tzalacz.ZALACZ.TAB.HASH:=ZALACZ.HASH;
            {? ZALACZ.bl_info('ZAL','IMAGE')
            || _tzalacz.ZALACZ.TAB.ZAL:=ZALACZ.ZAL
            ?};
            _tzalacz.ZALACZ.TAB.CRT_DATE:=ZALACZ.bl_info('ZAL','CREAT_DATE');
            _tzalacz.ZALACZ.TAB.CRT_TIME:=ZALACZ.bl_info('ZAL','CREAT_TIME');
            _tzalacz.ZALACZ.TAB.MOD_DATE:=ZALACZ.bl_info('ZAL','MODIFY_DATE');
            _tzalacz.ZALACZ.TAB.MOD_TIME:=ZALACZ.bl_info('ZAL','MODIFY_TIME');
            _tzalacz.ZALACZ.TAB.G:=_array.ZALACZ.G;
            _tzalacz.ZALACZ.TAB.CZESC:=_array.ZALACZ.CZESC;
            _tzalacz.ZALACZ.TAB.NR:=_array.ZALACZ.NR;
            _tzalacz.ZALACZ.TAB.MSC:=_array.ZALACZ.MSC;
            _mod:=
               {? _tzalacz.tryb='Z'
               || {? _tzalacz.dom='P'
                  || ZALACZ.P=P.ref() | (ZALACZ.OSOBA=P.OSOBA & _upr.OSOBA)
                  |? _tzalacz.dom='OSOBA'
                  || ZALACZ.OSOBA=OSOBA.ref() & (ZALACZ.P=null() | _upr.P)
                  ?}
               |? _tzalacz.tryb='D'
               || {? _tzalacz.dom='P'
                  || ZALACZ.P=P.ref()
                  |? _tzalacz.dom='OSOBA'
                  || ZALACZ.OSOBA=OSOBA.ref()
                  ?}
               ?};
            _tzalacz.ZALACZ.TAB.MOD:={? _mod || 'T' || 'N' ?};
            _tzalacz.ZALACZ.TAB.DEP:=_array.ZALACZ.DEP;
            _tzalacz.ZALACZ.TAB.ZALACZ:=ZALACZ.uidref();
            _tzalacz.ZALACZ.TAB.ZAOH:=_array.ZALACZ.ZAOH;
            ~_tzalacz.ZALACZ.TAB.add()
         || _err+=1
         ?};
         _array.ZALACZ.next()
      !}
   ?}
?};
ZALACZ.cntx_pop();

{? _tzalacz.tryb='Z'
|| _tzalacz.ZALACZ.TAB.index(_tzalacz.ZALACZ.NDX.TYP_ZAL)
|| _tzalacz.ZALACZ.TAB.index(_tzalacz.ZALACZ.NDX.NR)
?};

{? _tzalacz.ZALACZ.TAB.f_active()
|| _tzalacz.ZALACZ.TAB.f_rfresh();
   _tzalacz.ZALACZ.TAB.f_first()
|| _tzalacz.ZALACZ.TAB.first()
?};

~_err


\tzalacz_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła zwraca tablicę z elementami nazwanymi:
::        * SLO_NAZ - tabela tymczasowa zawiera typy załączników;
::        * ZALACZ  - tabela tymczasowa zawiera załączniki;
::        * err     - informacja o błędach, które wystąpiły lub ''.
::       Przygotowywane dane związane są z:
::          1a  Bieżącą osobą (rekordem tabeli OSOBA) / pracownikiem (rekordem tabeli P) - patrz parametr _a;
::          1b. Bieżącą pod-częścią - rekordem tabeli ZAOH. Ponieważ dla każdego rekordu można określić jego rekord
::              główny tym samym można określić czy należy on do "Załączników" czy też do "Dokumentacji pracowniczej".
::       --- lub ---
::          2.  Miejscem wywołania - patrz parametr _b.
::   WE: [_a] [STRING]  - Akronim tabeli wartości kluczowej - poziom załączników: 'P', 'OSOBA' [domyślnie: 'OSOBA'].
::       [_b] [STRING]  - Miejsce wywołania - akronim tabeli, dla rekordów której będą tworzone załączniki,
::                        lub '' jeżeli wywołanie z poziomu struktury załączników.
::       [_c] [INTEGER] - Czy pomijać załączniki z gałęzi podrzędnych (parametr istotny tylko dla ustalonego _a)? [0*/1]
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_dom:={? var_pres('_a')=type_of('') || gsub(_a,'@.','') || 'OSOBA' ?};
{? _dom<>'P' & _dom<>'OSOBA'
|| return()
?};
_msc:={? var_pres('_b')=type_of('') || gsub(_b,'@.','') || '' ?};
{? _msc<>'' & var_pres(_msc)<>type_of(ZALACZ)
|| return()
?};
_nochild:=var_pres('_c')=type_of(0) & _c;

_ret:=obj_new('SLO_NAZ','ZALACZ','err');
_ret.err:='';
_ret.ZALACZ:=tab_tmp(4,
   'G','INTEGER','Gałąź (lp.)'@,
   'CZESC','STRING[5]','Część'@,
   'DATA','DATE','Data'@,
   'DEP','DATE','Data zatarcia kary'@,
   'IDADD','STRING[31]','ID'@,
   'NR','INTEGER','Numer dokumentu'@,
   'MSC','STRING[150]','Miejsce'@,
   'REF','STRING[48]','ZALACZ.uidref()',
   'ZAOH','STRING[48]','ZAOH.uidref()'
);

:: Identyfikator "Dokumentacji pracowniczej".
_g0d:=exec('zaoh_path','zalacz','G0D');

:: Czy można ustalić położenie w strukturze hierarchicznej "Dokumentacji pracowniczej"?
_v0d:=1;

_from:=_where:='';

{? _msc=''
:: Obsługa w ramach widoku ogólnego (dla wskazanego P lub OSOBA).
|| _apath:=exec('zaoh_path','zalacz','OBJ');
   _v0d:=_apath.G0D;
:: Specjalna obsługa "Dokumentacji pracowniczej" części I.D. Załączniki są definiowane tylko na poziomie 2
:: ale obowiązują na 3. Dlatego ścieżka brana jest z rodzica.
   _path:=
      {? _apath.G0D & _apath.poziom=4 & _apath.czesc[2]='I' & _apath.czesc[3]='D'
      || exec('zaoh_path','zalacz','PARENT')
      || ZAOH.PATH
      ?}+
      {? _nochild
      || ''
      || '%'
      ?};
   _sql:=
      'select ZAOTS.SLO_NAZ, ZAOH.CZESC, ZAOH.PATH, ZAOH.REFERENCE as ZAOH '
      'from ZAOTS join ZAOH using(ZAOTS.ZAOH,ZAOH.REFERENCE) '
      'where ZAOH.PATH '+{? _nochild || '=' || 'like' ?}+' \':_a\' '+
      'order by ZAOTS.SLO_NAZ';
   _ret.SLO_NAZ:=sql(_sql,_path);

   {? ~_ret.SLO_NAZ.first()
   || return(_ret)
   ?};

   _firma:=exec('ref_firma','ustawienia');
   _user:=OPERATOR.USER;

   _where:='"ZALACZ".FIRMA=\'%1\' and "ZALACZ".TYP_ZAL in (select SLO_NAZ from :_a) and "ZALACZ".WWW=\'T\'' [$_firma];
   {? _apath.G0D & _apath.poziom=4 & _apath.czesc[2]='I' & _apath.czesc[3]='D'
::    Specjalna obsługa "Dokumentacji pracowniczej" części I.D.x - wyszukiwanie odpowiedniej pod-części w tabeli ZAOCZ.
   || _where+=' and "ZALACZ".REFERENCE in (select ZAOCZ.ZALACZ from ZAOCZ where ZAOCZ.ZAOH=\'%1\')' [$ZAOH.ref()]
   ?};
   {? _dom='P'
   || _where+=
         {? _apath.G0D
::          Dokumentacja pracownicza.
         || ' and "ZALACZ".OSOBA=\'%1\'' [$P.OSOBA]+
            ' and ("ZALACZ".P is null or "F_ZATR".KOD=\'P\')'
::          Załączniki.
         || {? exec('chk_role','#b__box',_user,'PKD_DOS_PRZA') | exec('chk_role','#b__box',_user,'PKD_DOS_PPZA')
            || ' and "ZALACZ".OSOBA=\'%1\'' [$P.OSOBA]+
               ' and ("ZALACZ".P is null or "ZALACZ".P=\'%1\')' [$P.ref()]
            || ' and "ZALACZ".P=\'%1\'' [$P.ref()]
            ?}
         ?}
   |? _dom='OSOBA'
   || _where+=
         ' and "ZALACZ".OSOBA=\'%1\'' [$OSOBA.ref()]+
         {? _apath.G0D
::          Dokumentacja pracownicza.
         || ' and ("ZALACZ".P is null or "F_ZATR".KOD=\'P\')'
::          Załączniki.
         || {? exec('chk_role','#b__box',_user,'PKD_EZK_ORZA') | exec('chk_role','#b__box',_user,'PKD_EZK_OPZA')
            || ' and '
               '("ZALACZ".P is null or "ZALACZ".P in '
                  '(select P.REFERENCE from P '
                  ' where P.FIRMA=\'%1\' and P.OSOBA=\'%2\' '
                         'and '
                         'P.F_ZATR in '
                           '(select USERS_FZ.F_ZATR '
                            'from USERS_FZ join F_ZATR using (USERS_FZ.F_ZATR,F_ZATR.REFERENCE) '
                            'where USERS_FZ.FIRMA=\'%1\' and USERS_FZ.USERS=\'%3\' and USERS_FZ.DOSTEP=\'T\' '
                                   'and F_ZATR.DOCELOWA=\'T\''
                           ') '
                         'and '
                         'P.WYDZIAL not in '
                           '(select UDB_UPR.UD_SKL '
                            'from UDB_UPR '
                            'where UDB_UPR.USERS=\'%3\' and UDB_UPR.DOSTEP<>\'T\''
                           ')'
                   ')'
                ')' [$_firma,$OSOBA.ref(),$_user]
            || ' and "ZALACZ".P is null'
            ?}
         ?}

   ?};
   _from:='left join "P" using ("ZALACZ".P,"P".REFERENCE) left join "F_ZATR" using ("P".F_ZATR,"F_ZATR".REFERENCE)'

:: Wywołanie dla miejsca. Parametryzacja miejsc jest wspólna dla "Załączników" i "Dokumentacji pracowniczej".
:: Wynikiem zapytania są typy załączników i informacja o położeniu w strukturze hierarchicznej "Dokumentacji
:: pracowniczej" (ZAWSZE).
|| _sql:=
      'select '
         'ZAOTM.SLO_NAZ, '
         'case when ZAOTS.G=\':_b\' then ZAOH.CZESC end as CZESC, '
         'case when ZAOTS.G=\':_b\' then ZAOH.PATH end as PATH, '
         'case when ZAOTS.G=\':_b\' then ZAOH.REFERENCE end as ZAOH '
      'from ZAOTM left join ZAOTS using(ZAOTM.SLO_NAZ,ZAOTS.SLO_NAZ) left join ZAOH using(ZAOTS.ZAOH,ZAOH.REFERENCE) '
      'where ZAOTM.MIEJSCE=\':_a\' '
      'order by ZAOTM.SLO_NAZ';
   _ret.SLO_NAZ:=sql(_sql,_msc,_g0d);

   _where:='"ZALACZ".NAG=\''+$($_msc)().uidref()+'\''

?};

_err:=obj_new('ZAL','TYP_ZAL');
{! _lp:=1 .. obj_len(_err)
|! _err[_lp]:=0
!};
ZAOH.cntx_psh();
ZAOH.prefix();
ZAOHI.cntx_psh();
ZAOHI.index('_OSCZESC');
ZAOHI.prefix();
ZAOCZ.cntx_psh();
ZAOCZ.index('ZALACZ');
ZAOCZ.prefix();
ZALACZ.cntx_psh();
ZALACZ.prefix();
ZALACZ.f_set('DATA,IDADD',_from,_where,_ret.SLO_NAZ);
{? ZALACZ.f_first()
|| {? _v0d
   || _g1:=exec('zaoh_czesc','zalacz','PATH',_g0d,'I')
   ?};
   {!
   |? {? ZALACZ.ZAL=null()
      || _err.ZAL+=1
      |? ~_ret.SLO_NAZ.find_key($ZALACZ.TYP_ZAL)
      || _err.TYP_ZAL+=1
      || {? _v0d
         || _ret.ZALACZ.G:={? _ret.SLO_NAZ.CZESC='' || 0 |? _ret.SLO_NAZ.PATH*_g1 || 1 || 2 ?};
::          CZESC, ZAOH
            {? _ret.SLO_NAZ.CZESC='D'
            || {? ZAOCZ.find_key(ZALACZ.ref())
               || _ret.ZALACZ.CZESC:=ZAOCZ.ZAOH().CZESC;
                  _ret.ZALACZ.ZAOH:=ZAOCZ.ZAOH().uidref();
                  {? ZAOHI.find_key(ZALACZ.OSOBA,ZAOH.ref())
                  || _ret.ZALACZ.DEP:=ZAOHI.DATA
                  ?}
               || _ret.ZALACZ.CZESC:='D??';
                  _ret.ZALACZ.ZAOH:=exec('zaoh_czesc','zalacz','uidref',_g0d,'I','D')
               ?}
            |? _ret.SLO_NAZ.CZESC=''
            || _ret.ZALACZ.CZESC:='-'*5;
               _ret.ZALACZ.ZAOH=''
            || _ret.ZALACZ.CZESC:=_ret.SLO_NAZ.CZESC;
               _ret.ZALACZ.ZAOH:=_ret.SLO_NAZ.ZAOH
            ?}
         ?};
         _ret.ZALACZ.DATA:=ZALACZ.DATA;
         _ret.ZALACZ.IDADD:=ZALACZ.IDADD;
         _ret.ZALACZ.MSC:=
            {? ZALACZ.RODZAJ='P'
            || '(załącznik pracownika bez określonego miejsca)'
            |? ZALACZ.RODZAJ='OSOBA'
            || '(załącznik osoby bez określonego miejsca)'
            |? ZALACZ.RODZAJ<>''
            || {? exec('kod','ext_slo','ZAOM',ZALACZ.RODZAJ)
               || SLO_KOD.NAZWA
               || ZALACZ.RODZAJ+' (brak definicji miejsca)'
               ?}
            || ''
            ?};
         _ret.ZALACZ.REF:=ZALACZ.uidref();
         _ret.ZALACZ.add()
      ?};
      ZALACZ.f_next()
   !}
?};

:: Autonumeracja (tylko dla obsługi "Dokumentacji pracowniczej").
{? _v0d & _ret.ZALACZ.first()
|| _czesc:=_ret.ZALACZ.CZESC;
   _nr:=1;
   {!
   |? {? _ret.ZALACZ.CZESC<>_czesc
      || _czesc:=_ret.ZALACZ.CZESC;
         _nr:=1
      ?};
      _ret.ZALACZ.NR:=_nr;
      _ret.ZALACZ.put();
      _nr+=1;
      _ret.ZALACZ.next()
   !}
?};

ZALACZ.f_clear();
ZALACZ.cntx_pop();
ZAOCZ.cntx_pop();
ZAOHI.cntx_pop();
ZAOH.cntx_pop();
{? _err.ZAL
|| _ret.err+='\n'+'Liczba załączników bez przypiętych plików: %1.'@ [$_err.ZAL]
?};
{? _err.TYP_ZAL
|| _ret.err+='\n'+'Liczba załączników z typem spoza dziedziny: %1.'@ [$_err.TYP_ZAL]
?};

_ret


\tzalacz_seek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła podczytująca odpowiedni rekord tabeli ZALACZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tzalacz:=params_get().tzalacz;

{? ZALACZ.seek(_tzalacz.ZALACZ.TAB.ZALACZ)
|| 1
|| _tzalacz.ZALACZ.TAB.del(1);
   0
?}


\tzalacz_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Odświeżenie widoku (w zależności od środowiska). Funkcja bazuje na ref-ie bieżącego załącznika.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

_ref:=ZALACZ.uidref();
{? _tzalacz.msc=''
|| grp_disp(_tzalacz.ZALACZ.TAB,_tzalacz.ZALACZ.ws)
|| params_exec('tzalacz_fill','zalacz')
?};
_tzalacz.ZALACZ.TAB.blank();
_tzalacz.ZALACZ.TAB.ZALACZ:=_ref;
_tzalacz.ZALACZ.TAB.find_rec();
win_set('cur_row_pos=-3',_tzalacz.ZALACZ.TAB,_tzalacz.ZALACZ.ws)


\tzalacz_akcje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Funkcja dla bieżącego rekordu tabeli params_get().tzalacz.ZALACZ.TAB określa dostępność akcji w oknie
::       wertowania.
::   WE:
::   WY: Tablica z elementami nazwanymi.
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

_akcje:=obj_new('dolacz','popraw','usun','przenies','edytuj','weryfikuj','podpisz');
{! _lp:=1 .. obj_len(_akcje)
:: Domyślnie wszystkie akcje ustawiamy na dostępne.
|! _akcje[_lp]:=1
!};

{? _tzalacz.tryb='Z'
|| {? _tzalacz.msc=''
   || _akcje.popraw:=_akcje.usun:=_tzalacz.ZALACZ.TAB.MOD='T'
   ?}

|? _tzalacz.tryb='D'
|| {? _tzalacz.msc=''
   || _gr:=_tzalacz.ZALACZ.TAB.sel_size();
      _mod:=~_tzalacz.ZALACZ.TAB.get() | _tzalacz.ZALACZ.TAB.MOD='T';
      {? ZAOHI.get() & ZAOHI.ZAOH<>null()
      || _apath:=exec('zaoh_path','zalacz','OBJ');
         {? _apath.poziom=4 & _apath.czesc[2]='I' & _apath.czesc[3]='D' & ~_mod
::          Specjalna obsługa części I D - wyłączamy "Dołącz":
::             - na poziomie 4 jeżeli stoimy na rekordzie spoza bieżącego stosunku pracy.
         || _akcje.dolacz:=0
         |? ~(_apath.poziom>2 & _apath.czesc[2]='I' & _apath.czesc[3]='D')
::          Akcja "pRzenieś" dostępna jest tylko w części I D - poza nią wyłączamy akcję.
         || _akcje.przenies:=0
         ?}
      ?};
      {? ~_mod
::       Dla załączników niezwiązanych z bieżącym zatrudnieniem wyłączamy akcje:
::          - "Usuń" (chyba, że jest zaznaczony choć jeden rekord);
::          - "pRzenieś" (chyba, że jest zaznaczony choć jeden rekord);
::          - Funkcje ["Weryfikuj podpis" / "Podpisz"] (chyba, że jest zaznaczony choć jeden rekord);
::          - "Popraw".
::          - "Edytuj".
      || {? ~_gr
         || _akcje.usun:=_akcje.przenies:=_akcje.weryfikuj:=_akcje.podpisz:=0
         ?};
         _akcje.popraw:=_akcje.edytuj:=0
      ?};
      {? ~_gr
::       Jeżeli nie jest to akcja grupowa to zajmijmy się akcjami "Weryfikuj podpis" i "Podpisz".
      || _ht:='';
         _pdf:=-(_tzalacz.ZALACZ.TAB.NAME+4)='.pdf';
         _sign:=_tzalacz.ZALACZ.TAB.DTSIGN<>date(0,0,0);
         {? ~_pdf
         || _akcje.weryfikuj:=0
         ?};
         {? ~_pdf | _sign
         || _akcje.podpisz:=0
         ?}
      ?}

   ?}
?};

_akcje


\slo_naz_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła odpowiedzialna za przygotowanie środowiska pracy tabeli SLO_NAZ.
::   WE: [_a] [ARRAY] - Tablica z elementami nazwanymi (patrz \zaoh_path/zalacz.fml z parametrem OBJ).
::                      Parametr istotny przy pracy w oknie grupowym.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

{? _tzalacz.msc<>''
|| _SLO_NAZ:=sql('select ZAOTM.SLO_NAZ REF from ZAOTM where ZAOTM.MIEJSCE=\':_a\' order by REF',_tzalacz.msc)
|| {? var_pres('_a')>100
   || _apath:=_a
   || _apath:=exec('zaoh_path','zalacz','OBJ')
   ?};
   _path:=
::    Specjalna obsługa części I.D dla "Dokumentacji pracowniczej". Załączniki są definiowane tylko na poziomie 3 ale
::    obowiązują na 4. Dlatego ścieżka brana jest z rodzica.
      {? _apath.G0D & _apath.poziom=4 & _apath.czesc[2]='I' & _apath.czesc[3]='D'
      || exec('zaoh_path','zalacz','PARENT')
      || ZAOH.PATH
      ?};
   _sql:=
      'select ZAOTS.SLO_NAZ REF '
      'from ZAOTS join ZAOH using(ZAOTS.ZAOH,ZAOH.REFERENCE) '
      'where ZAOH.PATH like \':_a\' '
      'order by REF';
   _SLO_NAZ:=sql(_sql,_path+'%')
?};

SLO_NAZ.prefix();
SLO_NAZ.f_set(
   'NAZWA',
   'join SLO_TYP',
   'SLO_TYP.SYMBOL=\'ZAL\' and "SLO_NAZ".REFERENCE in (select REF from :_a)',
   _SLO_NAZ
);
SLO_NAZ.win_dict(_tzalacz.SLO_NAZ.wd);
SLO_NAZ.win_edit();

~~


\sign1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła pomocnicza do podpisywania pojedynczego pliku na etapie redagowania rekordu tabeli ZALACZ.
::       Wykorzystywana w akcji "Dołącz" i "Popraw".
::   WE: [_a] - ścieżka do katalogu tymczasowego po stronie klienta (inTerm)
::   WY: Pełna ścieżka dostępu do pliku.
:: ~OST: INFCOPY
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_esign:=_tzalacz.esign;

_ok:=1;
_src:=_file:=ZALACZ.bl_file('ZAL');
{? exec('interm','#system') & exec('cli_functions','#system')
|| _sep:=exec('sep','#file',0);
   _seps:=exec('sep','#file',1);
   _file:=9-_file;
   _pth_del:=_file*'/';
   _file:=_pth_del-_file;
   _err_txt:='Wystąpił błąd podczas kopiowania pliku do katalogu tymczasowego'@;
:: Chwilowo wymagane jest obejście poprzez "nadmiarowe" kopiowanie dla inTerm
   {? fcopy(_src,'@'+_a+_sep+_file,0,0,1)
   || {? fcopy('@'+_a+_sep+_file,'#!tmp'+_seps+_file,0,0,1)
      || ZALACZ.bl_file('ZAL',1,'#!tmp'+_seps+_file);
         _file:='@'+_a+_sep+_file
      || _ok:=0;
         FUN.info(_err_txt)
      ?}
   || _ok:=0;
      FUN.info(_err_txt)
   ?}
?};

{? -(_file+4)='.pdf' & _ok
:: Jeżeli PDF, to będziemy próbować podpisać, ale kopię a nie oryginał.
|| _d0:=date(0,0,0);

   _esign.start();
   _esign.v_file_add(_file);
   _ret:=_esign.verify(0);
   {? _ret.status=1 & _ret.TAB.first() & _ret.TAB.DTSIGN<>_d0
   || ZALACZ.DTSIGN:=_ret.TAB.DTSIGN
   ?};
   obj_del(_ret);
   _esign.stop();

   {? ZALACZ.DTSIGN=_d0
   || _esign.start();
      _esign.s_file_add(_file);
      _again:=1;
      {!
      |? _again
      |! {? ZALACZ.DTSIGN=_d0 & FUN.ask('Czy załączany dokument chcesz opatrzyć podpisem elektronicznym?'@)
         || _ret:=_esign.sign();
            {? _ret.status=1 & _ret.TAB.first() & _ret.TAB.DTSIGN<>_d0
            || ZALACZ.DTSIGN:=_ret.TAB.DTSIGN;
               _file:=_ret.dir+_tzalacz.sep0+_ret.TAB.FV;
               _again:=0
            ?};
            obj_del(_ret)
         || _again:=0
         ?}
      !};
      {? ZALACZ.DTSIGN=_d0
::       Sprzątanie - tylko jeżeli plik nie został podpisany. W przeciwnym razie sprzątanie usunęłoby podpisany plik.
      || _esign.stop()
      ?}
   ?}
?};
_file


\tzalacz_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknie tabeli tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
:: ~OST: INTMKTMPDIR
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

{? ~params_exec('tzalacz_akcje','zalacz').dolacz
|| melody();
   return(0)
?};

{? _tzalacz.msc=''
|| _apath:=exec('zaoh_path','zalacz','OBJ')
|| _apath:=~~
?};
SLO_NAZ.cntx_psh();
exec('slo_naz_init','zalacz',_apath);

ZALACZ.cntx_psh();
ZALACZ.clear();
ZALACZ.win_edit(_tzalacz.RED);
ZALACZ.blank();
{? SLO_NAZ.f_size()=1 & SLO_NAZ.f_first()
|| ZALACZ.TYP_ZAL:=SLO_NAZ.ref()
|? (_wtycz:=Plugin.run('ZALACZ_TYP_001',_tzalacz.dom,_tzalacz.msc))<>null()
|| {? ref_tab(_wtycz)=SLO_NAZ & SLO_NAZ.f_seek(_wtycz)
   || ZALACZ.TYP_ZAL:=SLO_NAZ.ref()
   || FUN.error('Wtyczka zwróciła rekord nieznajdujący się w aktualnej dziedzinie.'@)
   ?}
|? _tzalacz.msc='UMLOJN'
|| {? (UMLOJN.TYP='Z' & SLO_NAZ.f_find('Umowa o zakazie konkurencji'))
      |
      (UMLOJN.TYP='L' & SLO_NAZ.f_find('Umowa lojalnościowa'))
   || ZALACZ.TYP_ZAL:=SLO_NAZ.ref()
   ?}
?};
exec('zalacz_bl','zalacz',_tzalacz.dom,_tzalacz.msc);
ZALACZ.bl_file('ZAL',1);
{? ZALACZ.edit("params_exec('zalacz_ae','zalacz',0)")
|| _pth:='';
:: Dla inTerm nie jest możliwy wybór katalogu po stronie klienta, dlatego tworzony jest tymczasowy
:: katalog na końcówce, dzięki czemu będzie można podpisać pliki
   _inTerm:=exec('interm','#system');
:: Wartość _cli_functions dla jTerm wynosi 1
   _cli_functions:=exec('cli_functions','#system');
   {? _inTerm
   || {? _cli_functions & _tzalacz.lic_PED
      || _tmp_dir:=fmk_tmp_dir(1);
         {? type_of(_tmp_dir)<>type_of(~~)
         || _pth:=_tmp_dir.get_path()
         || FUN.emsg('Nie udało się utworzyć katalogu tymczasowego. Dołączenie pliku niemożliwe'@);
            ZALACZ.cntx_pop();
            SLO_NAZ.f_clear();
            SLO_NAZ.cntx_pop();
            return(~~)
         ?};
         _file:={? _tzalacz.lic_PED || exec('sign1','zalacz',_pth) || ZALACZ.bl_file('ZAL') ?}
::       Dla inTerm bez inDevice ale z licencją PED nie jest możliwe podpisanie pliku
      || _file:=
            {? _tzalacz.lic_PED & ZALACZ.LOK='.pdf'
            || _msg:='Urządzenie nie posiada zainstalowanego modułu inDevice umożliwiającego podpisanie pliku.'@+
                     '\n'+'Czy dołączyć plik?'@;
               {? FUN.ask(_msg)
               || ZALACZ.bl_file('ZAL')
               || ''
               ?}
            || ZALACZ.bl_file('ZAL')
            ?}
      ?}
   || _file:={? _tzalacz.lic_PED || exec('sign1','zalacz') || ZALACZ.bl_file('ZAL') ?}
   ?};
   do();
   {? ZALACZ.add()
   || {? _file<>''
      || ZALACZ.bl_put('ZAL',_file)
      ?};
      {? _tzalacz.msc='' & _apath.G0D & _apath.poziom=4 & _apath.czesc[2]='I' & _apath.czesc[3]='D'
      || exec('zaocz_update','zalacz')
      ?}
   ?};
   _ok:=end();
   {? _tzalacz.lic_PED & _file<>'' & ZALACZ.DTSIGN<>date(0,0,0) & _cli_functions
::    Jak już podpisany plik został załączony, to możemy posprzątać.
   || _tzalacz.esign.stop()
   ?};
   {? _ok
   || params_exec('tzalacz_refresh','zalacz')
   || FUN.emsg('Pliku nie udało się załączyć.'@)
   ?}
?};
ZALACZ.bl_file('ZAL',1);
ZALACZ.cntx_pop();

SLO_NAZ.f_clear();
SLO_NAZ.cntx_pop();
~~


\tzalacz_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Popraw - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
:: ~OST: INTMKTMPDIR
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

{? ~params_exec('tzalacz_akcje','zalacz').popraw
|| melody();
   return(0)
?};

_mod:=_tzalacz.ZALACZ.TAB.MOD='T';
{? _tzalacz.tryb='D' & ~_mod
||  FUN.info('Poprawienie pliku załącznika niezwiązanego z bieżącym zatrudnieniem nie jest możliwe.'@);
   return(0)
?};
{? _tzalacz.msc=''
|| _apath:=exec('zaoh_path','zalacz','OBJ')
|| _apath:=~~
?};
SLO_NAZ.cntx_psh();
exec('slo_naz_init','zalacz',_apath);

ZALACZ.cntx_psh();
ZALACZ.clear();
ZALACZ.win_edit(_tzalacz.RED);
{? ZALACZ.edit("params_exec('zalacz_ae','zalacz',1)")
|| _d0:=date(0,0,0);
   _file:=ZALACZ.bl_file('ZAL');
   _next:=1;
   {? _file<>''
::    Dla inTerm nie jest możliwy wybór katalogu po stronie klienta, dlatego tworzony jest tymczasowy
::    katalog na końcówce, dzięki czemu będzie można podpisać pliki
   || _inTerm:=exec('interm','#system');
::    Wartość _cli_functions dla jTerm wynosi 1
      _cli_functions:=exec('cli_functions','#system');
      {? _cli_functions
      || ZALACZ.DTSIGN:=_d0;
         _pth:='';
         {? _inTerm
         || _tmp_dir:=fmk_tmp_dir(1);
            {? type_of(_tmp_dir)<>type_of(~~)
            || _pth:=_tmp_dir.get_path()
            || _next:=0;
               _file:='';
::             W przypadku błędu (dla inTerm) plik nie zostanie dołączony
               FUN.emsg('Nie udało się utworzyć katalogu tymczasowego. Podpisanie pliku niemożliwe.'@)
            ?}
         ?};
         {? _tzalacz.lic_PED & _next
         || _file:=exec('sign1','zalacz',_pth)
         ?}
      || _msg:='Urządzenie nie posiada zainstalowanego modułu inDevice umożliwiającego podpisanie pliku.'@+
                     '\n'+'Czy dołączyć plik?'@;
         {? _tzalacz.lic_PED & -(_file+4)='.pdf'
         || {? ~FUN.ask(_msg)
            || ZALACZ.bl_file('ZAL',1);
               ZALACZ.cntx_pop();
               SLO_NAZ.f_clear();
               SLO_NAZ.cntx_pop();
               return(~~)
            ?}
         ?}
      ?}
   ?};
   do();
   {? ZALACZ.put()
   || {? _file<>''
      || ZALACZ.bl_put('ZAL',_file)
      ?}
   ?};
   _ok:=end();
   {? _tzalacz.lic_PED & _file<>'' & ZALACZ.DTSIGN<>_d0 & _cli_functions & _next
::    Jak już podpisany plik został załączony, to możemy posprzątać.
   || _tzalacz.esign.stop()
   ?};
   {? _ok
   || params_exec('tzalacz_refresh','zalacz')
   || FUN.emsg('Pliku nie udało się poprawić.'@)
   ?}
?};
ZALACZ.bl_file('ZAL',1);
ZALACZ.cntx_pop();

SLO_NAZ.f_clear();
SLO_NAZ.cntx_pop();
~~


\tzalacz_usun_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Usuń - grupa przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

{? ~params_exec('tzalacz_akcje','zalacz').usun
|| melody();
   return(0)
?};

FUN.ask('Czy na pewno chcesz usunąć zaznaczone załączniki?'@)


\tzalacz_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Usuń - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

{? ~params_exec('tzalacz_akcje','zalacz').usun
|| melody(0);
   return()
?};

_gr:=_tzalacz.ZALACZ.TAB.sel_size();
_mod:=_tzalacz.ZALACZ.TAB.MOD='T';
{? ~_mod & ~_gr
|| {? _tzalacz.tryb='D'
   || FUN.info('Usunięcie załącznika niezwiązanego z bieżącym zatrudnieniem nie jest możliwe.'@)
   || FUN.info('Brak uprawnień do usunięcie załącznika.'@)
   ?};
   return(0)
?};

{? _gr | FUN.ask('Czy na pewno usunąć bieżący załącznik?'@)
|| {? _mod
   || do();
      _tzalacz.ZALACZ.TAB.del();
      ZALACZ.del();
      {? end() & ~_gr
      || ZALACZ.seek(_tzalacz.ZALACZ.TAB.ZALACZ);
         params_exec('tzalacz_refresh','zalacz');
         1
      ?}
   ?}
?}


\tzalacz_usun_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Usuń - grupa po" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

ZALACZ.seek(_tzalacz.ZALACZ.TAB.ZALACZ);
params_exec('tzalacz_refresh','zalacz')


\tzalacz_przenies_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła inicjująca przenoszenie plików w ramach części Dxx
::       (wyłącznie dla trybu "Dokumentacja pracownicza").
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_zaoh:=_tzalacz.zaoh;

_zaoh.SQLREF:=_zaoh.CZESC:=_zaoh.NAZWA:='';

{? _tzalacz.msc<>''
|| return(0)
|? _apath:=exec('zaoh_path','zalacz','OBJ');
   ~(_apath.poziom>2 & _apath.czesc[2]='I' & _apath.czesc[3]='D')
|| return(0)
?};

_idnr:={? _apath.poziom=3 || #ZAOH.ref() || ZAOH.ZAOH ?};
_ZAOH:=sql(
   'select ZAOH.CZESC, '
      'case when ZAOHI.NAZWA=\'\' then ZAOH.NAZWA else ZAOHI.NAZWA end as NAZWA, '
      'ZAOH.REFERENCE REF '
   'from ZAOHI join ZAOH using (ZAOHI.ZAOH,ZAOH.REFERENCE) '
   'where ZAOHI.OSOBA=:_a and '
      'ZAOH.ZAOH=:_c '+{? _apath.poziom=4 || ' and ZAOH.REFERENCE<>\''+$ZAOH.ref()+'\'' || '' ?}+' and '
      'ZAOH.REFERENCE not in '
         '('
            'select ZAOCZ.ZAOH '
            'from ZAOCZ join ZALACZ using(ZAOCZ.ZALACZ,ZALACZ.REFERENCE) '
            'where ZALACZ.OSOBA=:_a and ZALACZ.P<>:_b'
         ')'
   'order by 1',
   REF.OSOBA,REF.P,_idnr
);
_lw:=1+_ZAOH.size();
{? _lw<6
|| _lw:=6
|? _lw>30
|| _lw:=30
?};

_ws:=_ZAOH.mk_sel('Wskaż część docelową'@,,0,'#zaohdxx',,,_lw,,'U');
_ZAOH.win_fld(_ws,,'CZESC',,,,,,'Część'@);
_ZAOH.win_fld(_ws,,'NAZWA',,,,,,'Nazwa'@);
_ZAOH.win_act(_ws,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
_ZAOH.win_act(_ws,,'Szukaj');
_ZAOH.win_act(_ws,,'Kolejność');
_ZAOH.win_sel(_ws);
{? _ZAOH.select()
|| _zaoh.SQLREF:=_ZAOH.REF;
   _zaoh.CZESC:=_ZAOH.CZESC;
   _zaoh.NAZWA:=_ZAOH.NAZWA;
   _zaoh.info:=_zaoh.CZESC+' - '+_zaoh.NAZWA;
   1
?}


\tzalacz_przenies_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Przenieś - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB
::       (wyłącznie dla trybu "Dokumentacja pracownicza").
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_zaoh:=_tzalacz.zaoh;

{? ~params_exec('tzalacz_akcje','zalacz').przenies
|| melody();
   return(0)
?};

exec('tzalacz_przenies_init','zalacz') &
FUN.ask(
   'Za chwilę nastąpi próba przeniesienia wybranych załączników do części "%1".\n'
   'Pod uwagę zostaną wzięte wyłącznie załączniki związane z bieżącym zatrudnieniem.\n'
   'Czy na pewno chcesz kontynuować?'@
   [_zaoh.info]
)


\tzalacz_przenies_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Przenieś - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB
::       (wyłącznie dla trybu "Dokumentacja pracownicza").
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_zaoh:=_tzalacz.zaoh;

_ret:=0;
_gr:=_tzalacz.ZALACZ.TAB.sel_size();
_mod:=_tzalacz.ZALACZ.TAB.MOD='T';

{? ~_mod & ~_gr
|| FUN.info('Przeniesienie załącznika niezwiązanego z bieżącym zatrudnieniem nie jest możliwe.'@);
   return(0)
?};

{? _gr |
   (  exec('tzalacz_przenies_init','zalacz') &
      FUN.ask('Czy na pewno chcesz przenieść wybrany załącznik do części\n"%1"?'@ [_zaoh.info])
   )
|| {? _mod
   || ZAOH.cntx_psh();
      ZAOH.prefix();
      {? ZAOH.seek(_zaoh.SQLREF)
      || _ret+=exec('zaocz_update','zalacz')
      ?};
      ZAOH.cntx_pop()
   ?}
?};
{? _ret & ~_gr
|| params_exec('tzalacz_refresh','zalacz')
?};
_ret


\tzalacz_przenies_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Przenieś - grupa po" w oknie tabeli params_get().tzalacz.ZALACZ.TAB
::       (wyłącznie dla trybu "Dokumentacja pracownicza").
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_exec('tzalacz_refresh','zalacz')


\tzalacz_edytuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Obsługa akcji "Edytuj - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB
::   WE:
::   WY:
:: ~OST: INBLEDIT
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

{? ~params_exec('tzalacz_akcje','zalacz').edytuj
|| melody();
   return(0)
?};

{? _tzalacz.ZALACZ.TAB.MOD='T'
|| {? exec('cli_functions','#system')>0
   || {? ZALACZ.bl_edit('ZAL')
::       Jeżeli plik został zmieniony to trzeba odświeżyć widok.
      || params_exec('tzalacz_refresh','zalacz')
      ?}
   || {? exec('bl_save','#blob',ZALACZ,'ZAL')<>''
      || FUN.info(
            'Po wprowadzeniu modyfikacji w pobranym pliku\n'
            'należy zaktualizować dokument właściwego załącznika.'@
         )
      ?}
   ?}
|| FUN.info('Edycja załącznika niezwiązanego z bieżącym zatrudnieniem nie jest możliwa.'@)
?}


\tzalacz_zapisz_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła inicjująca zapisywanie załącznika(-ów) na dysku.
::   WE:
::   WY:
:: ~OST: INFILECHOOSER
::----------------------------------------------------------------------------------------------------------------------
{? exec('interm','#system')=1
|| return(1)
?};

params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_save:=_tzalacz.save;

_save.dir:='';
_save.ovr:=0;
_name:='SaveDir';
_dir:=exec('get','#profile',,_tzalacz.section,_name);
ctr_set('!application','filechooser','reset');
ctr_set('!application','filechooser','setDialogTitle','Wybór katalogu'@);
ctr_set('!application','filechooser','setCurrentDirectory',_dir);
ctr_set('!application','filechooser','setMultiSelectionEnabled',0);
ctr_set('!application','filechooser','setFileSelectionMode','DIRECTORIES_ONLY');
{? ctr_call('!application','filechooser','showSaveDialog')
|| _save.dir:=ctr_call('!application','filechooser','getSelectedFile');
   exec('set','#profile',,_tzalacz.section,_name,_save.dir)
?};
{? _save.dir<>''
|| _save.dir:='@'+_save.dir;
   1
?}


\tzalacz_zapisz_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Zapisz - grupa przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('interm','#system')<>1
|| params_exec('tzalacz_zapisz_init','zalacz')
|| 1
?}


\tzalacz_zapisz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Zapisz - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_save:=_tzalacz.save;

_ret:=0;
_gr:=_tzalacz.ZALACZ.TAB.sel_size();
{? exec('interm','#system')=1
|| exec('bl_save','#blob',ZALACZ,'ZAL')

|? _gr | params_exec('tzalacz_zapisz_init','zalacz')
|| _sep:=_tzalacz.sep0;
   _esc:=0;
   errno();
   _fn:=ZALACZ.ZAL_NAME;
   _again:=1;
   {!
   |? _again
   |! _again:=0;
      _fp:=_save.dir+_sep+_fn;
      {? _save.ovr<>2
      || {? fexists(_fp,0)
         || _txt:='Plik "%1" już istnieje. Nadpisać?'@ [1-_fp];
            {? _gr
            || _ret:=FUN.choice(_txt,,'Nadpisz'@,'Nadpisz &wszystkie'@,'Zmień nazwę'@,'Pomiń'@,'Anuluj'@)
            || _ret:=FUN.choice(_txt,,'Nadpisz'@,'Zmień nazwę'@,,,'Anuluj'@);
               {? _ret=2
               || _ret:=3
               ?}
            ?};
            {? _ret=0
:              Anuluj
            || _esc:=1

            |? _ret=1 | _ret=2
:              Nadpisz lub Nadpisz wszystkie
            || _save.ovr:=_ret

            |? _ret=3
:              Zmień nazwę
            || _save.TAB.PLIK:=_fn;
               {? _save.TAB.edit("__CHK.record(cur_tab(1,1),,'PLIK')")
               || _fn:=_save.TAB.PLIK
               ?};
               _again:=1

            |? _ret=4
:              Pomiń
            || _save.ovr:=0
            ?}
         || _save.ovr:=1
         ?}
      ?}
   !};
   {? _save.ovr
   || _nm:=no_msg(1);
      {? ~ZALACZ.bl_get('ZAL',_fp,0) | errno()
      || FUN.info('Zapisanie pliku "%1" na dysku użytkownika nie powiodło się.'@ [1-_fp])
      || _ret:=1
      ?};
      no_msg(_nm);
      {? _save.ovr<>2
      || _save.ovr:=0
      ?}
   ?}
?};
_ret


\tzalacz_eksportuj_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Obsługa akcji "Eksportuj - grupa przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

_ok:=1;
_TAB:=tab_tmp(1,'ZALACZ','STRING[48]','ZALACZ.uidref()');
_SEL:=_tzalacz.ZALACZ.TAB.sel_aget();
{? _SEL.first()
|| _tzalacz.ZALACZ.TAB.cntx_psh();
   {!
   |? {? _tzalacz.ZALACZ.TAB.seek(_SEL.REF)
      || {? _tzalacz.ZALACZ.TAB.G=1 & _tzalacz.ZALACZ.TAB.CZESC='D??'
         || FUN.info(
               'W związku z wymaganiami technicznymi brak możliwości wykonania eksportu.\n'
               'Uporządkuj dokumenty w części D i spróbuj ponownie.'@
            );
            _ok:=0
         || _TAB.ZALACZ:=_tzalacz.ZALACZ.TAB.ZALACZ;
            _TAB.add()
         ?}
      ?};
      _ok & _SEL.next()
   !};
   _tzalacz.ZALACZ.TAB.cntx_pop()
?};
{? _ok &
   FUN.ask(
      'Za chwilę nastąpi utworzenie uporządkowanego zbioru wybranych dokumentów\n'
      'przeznaczonego do wydania pracownikowi.\n'@+'Kontynuować?'@
   )
|| exec('eksportuj','zalacz',_TAB);
   _tzalacz.ZALACZ.TAB.sel_adel()
?};

0


\tzalacz_eksportuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Obsługa akcji "Eksportuj - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
{? _tzalacz.ZALACZ.TAB.G=1 & _tzalacz.ZALACZ.TAB.CZESC='D??'
|| FUN.info(
      'W związku z wymaganiami technicznymi brak możliwości wykonania eksportu.\n'
      'Uporządkuj dokumenty w części D i spróbuj ponownie.'@
   );
   return()
?};

_TAB:=tab_tmp(1,'ZALACZ','STRING[48]','ZALACZ.uidref()');
_TAB.ZALACZ:=_tzalacz.ZALACZ.TAB.ZALACZ;
_TAB.add();

exec('eksportuj','zalacz',_TAB)


\tzalacz_weryfikuj_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Weryfikuj - grupa przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask(
      'Za chwilę nastąpi próba weryfikacji podpisu elektronicznego plików zaznaczonych załączników.\n'
      'Widocznym skutkiem weryfikacji jest aktualizacja daty podpisu.\n'
      'Czy na pewno chcesz kontynuować?'@
   )
|| params_set(_par:=params_get());
   _tzalacz:=_par.tzalacz;
   _esign:=_tzalacz.esign;

   _tzalacz.grp.ZALACZ:=ZALACZ.uidref();
   _esign.start();
   1
?}


\tzalacz_weryfikuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Weryfikuj - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_esign:=_tzalacz.esign;

_gr:=_tzalacz.ZALACZ.TAB.sel_size();
_mod:=_tzalacz.ZALACZ.TAB.MOD='T';
_pdf:=-(_tzalacz.ZALACZ.TAB.NAME+4)='.pdf';

{? ~_gr
|| {? ~_mod
   || FUN.info('Weryfikacja pliku załącznika niezwiązanego z bieżącym zatrudnieniem nie jest możliwa.'@);
      return(0)
   |? ~_pdf
   || FUN.info(
         'Weryfikacja podpisu elektronicznego możliwa jest wyłącznie dla plików z rozszerzeniem PDF.\n'
         'Plik bieżącego załącznika nie spełnia powyższego warunku.'@
      );
      return(0)
   ?};
   _esign.start()
?};

{? _mod & _pdf
|| _esign.v_blob_add(ZALACZ,'ZAL','DTSIGN')
?};
{? ~_gr
|| _esign.verify();
   _esign.stop();
   params_exec('tzalacz_refresh','zalacz')
?}


\tzalacz_weryfikuj_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Weryfikuj - grupa po" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_esign:=_tzalacz.esign;

_esign.verify();
_esign.stop();
ZALACZ.seek(_tzalacz.grp.ZALACZ);
params_exec('tzalacz_refresh','zalacz')


\tzalacz_podpisz_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Podpisz - grupa przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask(
      'Za chwilę nastąpi próba opatrzenia podpisem elektronicznym plików zaznaczonych załączników.\n'
      'Pod uwagę zostaną wzięte wyłącznie niepodpisane pliki z rozszerzeniem PDF.\n'
      'Czy na pewno chcesz kontynuować?'@
   )
|| params_set(_par:=params_get());
   _tzalacz:=_par.tzalacz;
   _esign:=_tzalacz.esign;

   _tzalacz.grp.ZALACZ:=ZALACZ.uidref();
   _esign.start();
   1
?}


\tzalacz_podpisz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Podpisz - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_esign:=_tzalacz.esign;

_gr:=_tzalacz.ZALACZ.TAB.sel_size();
_mod:=_tzalacz.ZALACZ.TAB.MOD='T';
_gotowy:=_tzalacz.ZALACZ.TAB.DTSIGN=date(0,0,0) & -(_tzalacz.ZALACZ.TAB.NAME+4)='.pdf';
{? ~_gr
|| {? ~_mod
   || FUN.info(
         'Opatrzenie podpisem elektronicznym pliku załącznika niezwiązanego z bieżącym zatrudnieniem nie jest możliwe.'@
      );
      return(0)
   |? ~_gotowy
   || FUN.info(
         'Opatrzenie podpisem elektronicznym możliwe jest wyłącznie dla niepodpisanych plików z rozszerzeniem PDF.\n'
         'Plik bieżącego załącznika nie spełnia powyższych warunków.'@
      );
      return(0)
   ?};
   _esign.start()
?};
{? _mod & _gotowy
|| _esign.s_blob_add(ZALACZ,'ZAL','ZAL','DTSIGN')
?};
{? ~_gr
|| _esign.sign();
   _esign.stop();
   params_exec('tzalacz_refresh','zalacz')
?}


\tzalacz_podpisz_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Podpisz - grupa po" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_esign:=_tzalacz.esign;

_esign.sign();
_esign.stop();
ZALACZ.seek(_tzalacz.grp.ZALACZ);
params_exec('tzalacz_refresh','zalacz')


\tzalacz_drukuj_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Drukuj - grupa przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('cli_functions','#system')>0
|| FUN.ask(
      'Za chwilę, dla każdego z zaznaczonych załączników, uruchominiona zostanie\n'
      'skojarzona w systemie operacyjnym aplikacja umożliwiająca\n'
      'wydrukowanie związanego z nim pliku na drukarce domyślnej.\n'
      'Czy na pewno kontynuować?'@
   )
|| FUN.ask(
      'Za chwilę wybrane pliki zostaną pobrane.\n'
      'Czy na pewno kontynuować?'@
   )
?}


\tzalacz_drukuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Drukuj - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE:
::   WY:
:: ~OST: INTMPDIR, INCLIEXEC
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

_cli_fun:=(exec('cli_functions','#system')>0);

{? ~_tzalacz.ZALACZ.TAB.sel_size() &
   ~FUN.ask(
      {? _cli_fun
      || 'Za chwilę uruchomiona zostanie\n'
         'skojarzona w systemie operacyjnym aplikacja umożliwiająca\n'
         'wydrukowanie związanego z załącznikiem pliku na drukarce domyślnej.\n'
         'Czy na pewno kontynuować?'@
      || 'Za chwilę plik związany z załącznikiem zostanie pobrany.\n'
         'Czy na pewno kontynuować?'@
      ?}
   )
|| return(0)
?};

{? _cli_fun
|| _dir:='@'+tmp_dir();
   _fn:=_dir+_tzalacz.sep0+exec('get_unique_file_name','#file',ZALACZ.ZAL_NAME,_dir);
   {? ZALACZ.bl_get('ZAL',_fn,0)
   || cli_exec(1-_fn,'print')
::    Nie jest możliwe usunięcie pliku, ponieważ cli_exec() nie czeka na zakończenie akcji.
   ?}
|| exec('bl_save','#blob',ZALACZ,'ZAL')
?}


\tzalacz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Rekord - przed" w oknie tabeli params_get().tzalacz.ZALACZ.TAB.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

_mod:=_tzalacz.ZALACZ.TAB.MOD='T';

{? _a
|| _akcje:=params_exec('tzalacz_akcje','zalacz');

   _ga:=':';
   {? ~_akcje.dolacz
   || _ga:='D'+_ga+'D'
   ?};
   {? ~_akcje.popraw
   || _ga:='P'+_ga
   ?};
   {? ~_akcje.usun
   || _ga:='U'+_ga
   ?};
   {? ~_akcje.przenies
   || _ga:='R'+_ga
   ?};
   {? ~_akcje.edytuj
   || _ga:='E'+_ga
   ?};
   {? ~(_akcje.weryfikuj & _akcje.podpisz)
   || _ga:='F('+
         {? ~_akcje.weryfikuj || 'W' || '' ?}+
         {? ~_akcje.podpisz || 'P' || '' ?}+
         ')'+
         _ga
   ?};
   {? ~exec('czy_archiwum','archiwum','ZALACZ','ZAL')
   || _ga:='A'+_ga
   ?};

   _tzalacz.ZALACZ.TAB.actions_grayed(cur_win(1,1),_ga)

?};

{? ~_mod
|| Color.fnd_kol('TZALACZ#01')
?}


\zalacz_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli ZALACZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zalacz_chk','zalacz',0) & exec('zalacz_modb','zalacz')


\zalacz_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli ZALACZ.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| {? exec('lic','#b_domain','PED')
   || exec('zaomeda_update','zalacz','ZALACZ')
   ?}
?};
~~


\zalacz_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli ZALACZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zalacz_chk','zalacz',1) & exec('zalacz_modb','zalacz')


\zalacz_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli ZALACZ.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| {? exec('lic','#b_domain','PED')
   || exec('zaomeda_update','zalacz','ZALACZ')
   ?}
?};
~~


\zalacz_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli ZALACZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: !!! Do zrobienia: specjalna obsługa usuwania załączników z tabel "czystopisu" i "brudnopisu".

exec('clean','zal',ZALACZ.ref())>0 &
:: Usunięcie informacji o powiązaniu załącznika z częścią (dotyczy I D).
exec('del_ndx','#table',ZAOCZ,'ZALACZ',ZALACZ.ref()) &
:: Usunięcie rekordu metadanych
exec('del_ndx','#table',ZAOMEDA,'NAG',ZALACZ.uidref())


\zalacz_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli ZALACZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZALACZ.P<>null()
|| P.cntx_psh();
   ZALACZ.OSOBA:=ZALACZ.P().OSOBA;
   P.cntx_pop()
?};
{? ZALACZ.ZAL<>null()
|| _maska:=form(8+(ZALACZ.NAG+16));
   ZALACZ.WWW:=
      {? (ZALACZ.RODZAJ='H_UM' & _maska='h_u_') | (ZALACZ.RODZAJ='H' & _maska='_his_')
      || 'N'
      |? ZALACZ.WWWE='T' | ZALACZ.WWWS='T'
      || 'T'
      || 'N'
      ?};
   ZALACZ.ZAL_NAME:=ZALACZ.bl_info('ZAL','NAME');
   ZALACZ.SIZE:=ZALACZ.bl_info('ZAL','SIZE');
   ZALACZ.HASH:=exec('hash','#blob',ZALACZ.ZAL)

|| ZALACZ.ZAL_NAME:='';
   ZALACZ.SIZE:=0;
::     hash('')='da39a3ee5e6b4b0d3255bfef95601890afd80709'
   ZALACZ.HASH:='da39a3ee5e6b4b0d3255bfef95601890afd80709'
?};
1


\zalacz_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła sprawdza wypełnienie wymaganych pól tabeli ZALACZ.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz w akcji "Rekord - po".
::       Zasady wypełniania pól w tabeli ZALACZ:
::          1. Pole OSOBA jest wypełniane zawsze.
::          2. Pole P jest wypełniane jeżeli dla załącznika jesteśmy w stanie je ustalić.
::          3. Pole RODZAJ jest wypełniane zawsze, przy czym:
::             a. Jeżeli załącznik jest dodawany z konkretnego miejsca i możemy dla niego określić "rekord właściciela"
::                (np. H), to należy uzupełnic pola:
::                * RODZAJ  = akronim tabeli właściciela;
::                * NAG     = uidref rekordu właściciela.
::             b. Dla załączników dodawanych bez wskazanego miejsca, pole RODZAJ przyjmuje wartość OSOBA lub P.
::   WE: _a [NUMBER] - Tryb modyfikacji danych:
::          0 - Dołączanie [domyślnie];
::          1 - Poprawianie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(ZALACZ,
:: Pola redagowalne (występujące w oknie redagowania).
   {? _put
   || "_a.table(_b,1,,'DATA','TYP_ZAL','ZAL')"
   || "_a.table(_b,0,,'DATA','TYP_ZAL')"
   ?},
:: Pola nieredagowalne.
   "_a.not_null(_b,'OSOBA','FIRMA','RODZAJ')",
   "_a.in_set(_b,'WWW',,'T','N')",
   "_a.in_set(_b,'WWWE',,'T','N')",
   "_a.in_set(_b,'WWWS',,'T','N')",
   "  _ret:=0;
      {? ZALACZ.RODZAJ<>'' & ZALACZ.RODZAJ<>'P' & ZALACZ.RODZAJ<>'OSOBA'
      || {? var_pres(ZALACZ.RODZAJ)<>type_of(ZALACZ)
         || _a.err_msg('Nieprawidłowa wartość w polu RODZAJ.'@)
         |? ZALACZ.NAG=''
         || _a.err_msg('Pole NAG musi być wypełnione.'@)
         || _ret:=1
         ?}
      || _ret:=1
      ?};
      _ret
   "
)


\zalacz_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wartość początkowa wybranych pól tabeli ZALACZ.
::   WE: [_a] [STRING]  - Akronim tabeli wartości kluczowej - poziom załączników: 'P' lub 'OSOBA' [domyślnie: 'OSOBA'].
::       [_b] [STRING]  - Miejsce wywołania - akronim tabeli, dla rekordów której będą tworzone załączniki,
::                        lub '' jeżeli wywołanie z poziomu struktury załączników.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dom:={? var_pres('_a')=type_of('') || gsub(_a,'@.','') || 'OSOBA' ?};
{? _dom<>'P' & _dom<>'OSOBA'
|| return('')
?};
_msc:={? var_pres('_b')=type_of('') || gsub(_b,'@.','') || '' ?};
{? _msc<>'' & var_pres(_msc)<>type_of(ZALACZ)
|| return('')
?};

ZALACZ.RODZAJ:={? _msc='' || _dom || _msc ?};
{? _dom='P'
|| ZALACZ.P:=P.ref();
   ZALACZ.OSOBA:=P.OSOBA
|? _dom='OSOBA'
|| ZALACZ.OSOBA:=OSOBA.ref()
?};

{? _msc<>''
|| ZALACZ.NAG:=($_msc)().uidref()
?};

~~


\zalacz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Rekord - po" w oknie WER tabeli ZAOH.
::   WE: _a [NUMBER] - Tryb modyfikacji danych:
::          0 - Dołączanie [domyślnie];
::          1 - Poprawianie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

:: Ze względu na obsługę BLOB-ów (najpierw dodajemy rekord, a potem dołączamy do niego BLOB-a)
:: nie możemy (na etapie dołączania rekordu - w wyzwalaczu) wymagać wypełnienia pola ZALACZ.ZAL.
:: Dlatego robimy to na poziomie interfejsu...
_ret:=__CHK.table(ZALACZ,_put,,'DATA','TYP_ZAL','ZAL');
_tr:=type_of(_ret);
{? (_tr=type_of('') & _ret<>'') | (_tr=type_of(0) & ~_ret)
|| return(_ret)
?};
_ret:=exec('zalacz_chk','zalacz',_put);
_tr:=type_of(_ret);
{? (_tr=type_of('') & _ret<>'') | (_tr=type_of(0) & ~_ret)
|| return(_ret)
?};

_tzalacz:=params_get().tzalacz;
{? _tzalacz.lic_POR &
   exec('FindInSet','#table','BIPKSN','FK_1',exec('ref_firma','ustawienia'),ZALACZ.TYP_ZAL)<>null() &
   exec('att_size','portal_lib',ZALACZ,'ZAL')<>1
:: Dla używających HR Portal-u i typu załącznika prezentowanego na portalu - weryfikacja rozmiaru załącznika.
|| 'ZAL'
|| ''
?}


\x_zalacz_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła sprawdza czy dla bieżącego rekordu wskazanej tabeli zostały zdefiniowane załączniki w tabeli ZALACZ.
::       Zwraca odpowiednią ikonę.
::   WE: [_a] [TABLE]  - Alias tabeli [domyślnie: cur_tab(1,1)]
::       [_b] [STRING] - Typ wyniku:
::                      'icon' - ikona [domyślnie];
::                      'is'   - rekord z załącznikiem [0/1]
::   WY: Zgodnie z parametrem _b.
::----------------------------------------------------------------------------------------------------------------------
_msc:={? var_pres('_a')=type_of(ZALACZ) || _a || cur_tab(1,1) ?};
_tret:={? var_pres('_b')=type_of('') & ',icon,is,'*(',%1,' [_b]) || _b || 'icon' ?};

ZALACZ.cntx_psh();
ZALACZ.index('NAG');
ZALACZ.prefix(_msc.uidref(),);
_jest:=ZALACZ.first();
ZALACZ.cntx_pop();
{? _tret='is'
|| _jest
|? _tret='icon'
|| {? _jest
   || 'xwin16.png:119'
   || 'xwin16.png:110'
   ?}
|| ~~
?}


\_ikony
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła definiuje tablicę nazwaną z zestawem ikon wykorzystywanych przy prezentacji dokumentacji pracowniczej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ikony:=obj_new(
   'error',
   'dirOpen','dirClose','dirNC',
   'place','empty','checked','used','dedicated'
);

_set:="
   _arr:=obj_new('plik','nr','ikona');
   _arr.plik:=_a;
   _arr.nr:=_b;
   _arr.ikona:=_arr.plik+':'+$_arr.nr;
   _arr
";

_ikony.error:=_set('xwin16.png',4);
:: Ikony do prezentacji struktury hierarchicznej.
_ikony.dirOpen:=_set('xwin16.png',75);
_ikony.dirClose:=_set('xwin16.png',74);
_ikony.dirNC:=_set('xwin16.png',76);
:: Ikony prezentujące użycie elementu.
_ikony.place:=_set('xwin16.png',110);
_ikony.empty:=_set('xwin16.png',180);
_ikony.checked:=_set('xwin16.png',179);
_ikony.used:=_set('xwin16.png',178);
_ikony.dedicated:=_set('xwin16.png',33);

_ikony


\zaoh_path
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła obsługi wyrażenia ścieżkowego.
::   WE: _a [STRING] - Rodzaj zwracanej informacji.
::          'SEP'    - Separator [domyślnie].
::          'G0D'    - Identyfikator części głównej dla dokumentacji pracowniczej.
::          'G0Z'    - Identyfikator części głównej dla załączników.
::          'EXPR'   - Wartość wyrażenia ścieżkowego dla bieżącego elementu.
::          'PARENT' - Wartość wyrażenia ścieżkowego wskazanego elementu.
::          'OBJ'    - Formuła zwraca tablicę z elementami nazwanymi:
::                      czesc  - tablica z kodami kolejnych poziomów bieżącego elementu;
::                      poziom - bieżący poziom zagłębienia.
::                      G0D    - czy gałąź "Dokumentacja pracownicza"? [0/1]
::                      G0Z    - czy gałąź "Załączniki"? [0/1]
::      [_b] [NUMBER] - Numer rekordu [domyślnie: rodzic bieżącego rekordu] parametr istotny dla _a='PARENT'.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kind:={? var_pres('_a')=type_of('') & '|SEP|G0D|G0Z|EXPR|PARENT|OBJ|'*('|'+_a+'|') || _a || 'SEP' ?};

_ret:=~~;

_sep:='|';
_g0d:='D';
_g0z:='Z';

{? _kind='SEP'
|| _ret:=_sep

|? _kind='G0D'
|| _ret:=_g0d

|? _kind='G0Z'
|| _ret:=_g0z

|? _kind='EXPR'
|| _ret:=ZAOH.CZESC+_sep

|? _kind='PARENT'
|| _ret:='';
   _parent:={? var_pres('_b')=type_of(0) || _b || ZAOH.ZAOH ?};
   {? _parent
   || ZAOH.cntx_psh();
      ZAOH.prefix();
      {? ZAOH.seek(_parent,)
      || _ret:=ZAOH.PATH
      ?};
      ZAOH.cntx_pop()
   ?}

|? _kind='OBJ'
|| _ret:=obj_new('czesc','poziom','G0D','G0Z');
:: Ostatni separator powoduje utworzenie pustego (zbędnego) elementu tablicy - usuńmy go.
   _ret.czesc:=spli_str(ZAOH.PATH-1,_sep);
   _ret.poziom:=obj_len(_ret.czesc);
   _ret.G0D:=_ret.czesc[1]=_g0d;
   _ret.G0Z:=_ret.czesc[1]=_g0z
?};

_ret


\zaoh_lp_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła aktualizuje numerację (pól LP) w bieżącej gałęzi, po "zniknięciu" wskazanego elementu. "Zniknięcie"
::       jest wynikiem usunięcia rekordu lub przesunięcia go do innej gałęzi.
::       Poprawność argumentów wywołania nie jest weryfikowana.
::   WE: _a - Numer elementu nadrzędnego.
::       _b - Lp. elementu, który "zniknął".
::   WY: Wynik aktualizacji:
::       0 - Porażka;
::       1 - Brak porażki.
::----------------------------------------------------------------------------------------------------------------------
_zaoh:=_a;
_lp:=_b;

_ds:=do_state();

{? _ds=2
|| return(0)
|? _ds=0
|| do()
?};

ZAOH.cntx_psh();
ZAOH.index('LP');
ZAOH.prefix(_zaoh);
{? ZAOH.find_ge(_lp)
|| {!
   |? ZAOH.LP:=_lp;
      {? ZAOH.put()
      || _lp+=1
      || undo()
      ?};
      ZAOH.next()
   !}
?};
ZAOH.cntx_pop();

{? _ds=0
|| end()
|| do_state()=1
?}


\zaoh_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli ZAOH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaoh_modb','zalacz') & exec('zaoh_chk','zalacz',0)


\zaoh_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli ZAOH.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

_apath:=exec('zaoh_path','zalacz','OBJ');
{? _apath.G0D
|| {? ~(_apath.poziom=4 & _apath.czesc[2]='I' & _apath.czesc[3]='D')
   || ZAOHI.cntx_psh();
      ZAOHI.index('ZAOH');
      ZAOHI.prefix(ZAOH.ZAOH);
      _loop:=ZAOHI.first();
      {!
      |? _loop
      |! ZAOHI.cntx_psh();
         ZAOHI.prefix();
         ZAOHI.ZAOHI:=#ZAOHI.ref();
         ZAOHI.ZAOH:=ZAOH.ref();
         ZAOHI.add();
         ZAOHI.cntx_pop();
         _loop:=ZAOHI.next()
      !};
      ZAOHI.cntx_pop()
   ?}
?};
~~


\zaoh_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli ZAOH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaoh_modb','zalacz') & exec('zaoh_chk','zalacz',1)


\zaoh_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli ZAOH.
::   WE: _a - Wynik akcji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? bfld('PATH')<>ZAOH.PATH
|| ZAOH.cntx_psh();
   ZAOH.index('LP');
   ZAOH.prefix(#ZAOH.ref());
   {? ZAOH.first()
   || {!
      |? ZAOH.put();
         ZAOH.next()
      !}
   ?};
   ZAOH.cntx_pop();

   ZAOTS.cntx_psh();
   ZAOTS.index('ZAOH');
   ZAOTS.prefix(ZAOH.ref());
   {? ZAOTS.first()
   || {!
      |? exec('zaots_moda','zalacz',ZAOTS.SLO_NAZ);
         {? ZAOH.PATH*ZAOTS.G<>1
         || ZAOTS.put()
         ?};
         ZAOTS.next()
      !}
   ?};
   ZAOTS.cntx_pop();

   ~~

?};
~~


\zaoh_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli ZAOH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Usunięcie elementów podrzędnych
exec('del_ndx','#table',ZAOH,'LP',#ZAOH.ref()) &
:: Usunięcie powiązanych załączników.
exec('del_ndx','#table',ZAOTS,'ZAOH',ZAOH.ref()) &
:: Usunięcie elementu ze struktur indywidualnych.
exec('del_ndx','#table',ZAOHI,'ZAOH',ZAOH.ref()) &
:: Usunięcie informacji o powiązaniu załączników z usuwaną częścią (dotyczy I D).
exec('del_ndx','#table',ZAOCZ,'ZAOH',ZAOH.ref())


\zaoh_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli ZAOH. Aktualizuje numerację (pole LP) w bieżącej gałęzi.
::   WE: _a [INTEGER] - Wynik operacji usuwania, przekazywany przez narzędzia.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

:: Przenumerowanie (pod-)części.
exec('zaoh_lp_update','zalacz',bfld('ZAOH'),bfld('LP'));
~~


\zaoh_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - przed" tabeli ZAOH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Ustalenie zawartości pola ZAOH.PATH, a dla elementów podrzędnych również ZAOH.CZESC.
_path:='';
{? ZAOH.ZAOH=0
|| {? ZAOH.CZESC=''
   || undo('Brak identyfikatora części głównej.'@);
      return(0)
   ?}
|| _lp:=ZAOH.LP;
   _czesc:='';
   ZAOH.cntx_psh();
   ZAOH.index('LP');
   ZAOH.prefix();
   {? ZAOH.seek(ZAOH.ZAOH,)
::    Stajemy na rodzicu.
   || _path:=ZAOH.PATH;
      _apath:=exec('zaoh_path','zalacz','OBJ');
      {? _apath.G0Z
      || _czesc:=$_lp

      |? _apath.G0D
      || _poziom:=1+_apath.poziom;
         {? _poziom=2
::          I / II
         || _czesc:={? _lp=1 || 'I' |? _lp=2 || 'II' || '' ?}
         |? _poziom=3
::          I - A, B, C, D / II - 6pkt1, 6pkt2, 6pkt3, 6pkt4
         || _czesc:={? _apath.czesc[2]='I' || %(%'A'+_lp-1) |? _apath.czesc[2]='II' || '6pkt'+$_lp || '' ?}
         |? _poziom=4
::          Poziom 4 dostępny jest tylko w gałęzi I i może przyjmować wartości:
::          A01 - A99, B01 - B99, C01 - C99, D01 - D99
         || _czesc:=ZAOH.CZESC+form(_lp,-2,0,'9,')
         ?}
      ?}
   ?};
   ZAOH.cntx_pop();
   ZAOH.CZESC:=_czesc
?};
_path+=exec('zaoh_path','zalacz','EXPR');
{? +_path<=255
|| ZAOH.PATH:=_path;
   ZAOH.CZESC<>'' & ZAOH.PATH<>''
?}


\zaoh_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła sprawdza wypełnienie wymaganych pól w tabeli ZAOH.
::       Wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po" tabeli ZAOH.
::   WE: _a [NUMBER] - Tryb modyfikacji danych:
::          0 - Dołączanie [domyślnie];
::          1 - Poprawianie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(ZAOH,
:: Pola redagowalne (występujące w oknie redagowania).
   $("_a.table(_b,"+$_put+",,'NAZWA')"),
:: Pole nieredagowalne (niewystępujące w oknie redagowania).
   "_a.not_null(_b,'LP','SYSTEM')",
   "_a.in_set(_b,'SYSTEM',,'T','N')",
   "  _apath:=exec('zaoh_path','zalacz','OBJ');
      {? _apath.G0Z
      || 1
      |? _apath.G0D
      || {? ZAOH.LP>99
         || _a.err_msg('Przekroczona maksymalna liczba (99) elementów.'@);
            0
         |? _apath.poziom<1 | _apath.poziom>4
         || _a.err_msg('Zbyt zagłębiona struktura hierarchiczna (dozwolone są cztery poziomy).'@);
            0
         || 1
         ?}
      ?}
   "
)


\zaoh_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła inicjująca zawartość struktury hierarchicznej dla gałęzi przekazanej parametrem.
::   WE: _a [STRING] - Symbol gałęzi.
::   WY: Wskazanie rekordu głównego lub null() w przypadku wystąpienia błędu.
::----------------------------------------------------------------------------------------------------------------------
_root:=null();

_g0z:=exec('zaoh_path','zalacz','G0Z');
_g0d:=exec('zaoh_path','zalacz','G0D');

{? var_pres('_a')=type_of('') & (_a=_g0z | _a=_g0d)
|| _g0:=_a
|| return(_root)
?};

ZAOH.cntx_psh();
ZAOH.index('CZESC');
ZAOH.prefix(0,_g0,);
{? ZAOH.first()
|| _root:=ZAOH.ref()
?};
ZAOH.cntx_pop();
{? _root<>null()
|| return(_root)
?};

_add:=
::  _a  [REFERENCE/STRING] - Wskazanie rekordu rodzica lub CZESC dla rekordu nadrzędnego.
::  _b  [NUMBER]           - Lp.
::  _c  [STRING]           - Nazwa elementu.
:: [_d] [STRING]           - Opis elementu [domyślnie:''].
   "  {? var_pres('_a')=type_of(null())
      || _zaoh:=#_a;
         _czesc:=''
      |? var_pres('_a')=type_of('')
      || _zaoh:=0;
         _czesc:=_a
      ?};
      _lp:=_b;
      _nazwa:=_c;
      _opis:={? var_pres('_d')=type_of('') || _d || '' ?};
      ZAOH.cntx_psh();
      ZAOH.prefix();
      ZAOH.blank();
      ZAOH.ZAOH:=_zaoh;
      ZAOH.LP:=_lp;
      ZAOH.NAZWA:=_nazwa;
      ZAOH.SYSTEM:='T';
      ZAOH.CZESC:=_czesc;
      {? ZAOH.add()
      || {? _opis<>''
         || ZAOH.memo_set(_opis,'OPIS');
            ZAOH.memo_put(,'OPIS')
         ?};
         _ret:=ZAOH.ref()
      || _ret:=null()
      ?};
      ZAOH.cntx_pop();
      _ret
   ";

ZAOH.cntx_psh();
ZAOH.index('LP');
ZAOH.prefix(0);
_lp:={? ZAOH.last() || ZAOH.LP ?}+1;
ZAOH.cntx_pop();

{? _g0=_g0z
|| _root:=_add(_g0,_lp,'Załączniki','Wszystkie załączniki')
|? _g0=_g0d
|| _root:=_add(_g0,_lp,'Dokumentacja pracownicza',
      'Podstawa prawna: Rozporządzenie Ministra Rodziny, Pracy i Polityki Społecznej z dnia 10 grudnia 2018 r. '
      'w sprawie dokumentacji pracowniczej (Dz. U. 2018 poz. 2369)'
   )
?};

{? _root=null()
|| FUN.emsg('Utworzenie elementu głównego struktury hierarchicznej nie powiodło się.'@);
   return(_root)
?};

{? _g0=_g0d
|| {? _cz1:=_add(_root,1,'Akta osobowe','Wszystkie załączniki związane z aktami osobowymi pracownika.\n[§ 3.]','T');
      _cz1=null()
   || FUN.emsg('Utworzenie nagłówka akt osobowych nie powiodło się.'@)

   |? _cz1_a:=_add(_cz1,1,'Rekrutacja',
         'Oświadczenia lub dokumenty dotyczące danych osobowych, zgromadzone w związku z ubieganiem się o '
         'zatrudnienie, a także skierowania na badania lekarskie i orzeczenia lekarskie dotyczące wstępnych, '
         'okresowych i kontrolnych badań lekarskich (art. 229 § 1 pkt 1, § 1¹ i 1² Kodeksu pracy).\n[§ 3. 1)]'
      );
      _cz1_b:=_add(_cz1,2,'Zatrudnienie',
         'Oświadczenia lub dokumenty dotyczące nawiązania stosunku pracy oraz przebiegu zatrudnienia pracownika.\n'
         '[§ 3. 2)]'
      );
      _cz1_c:=_add(_cz1,3,'Zwolnienie',
         'Oświadczenia lub dokumenty związane z rozwiązaniem albo wygaśnięciem stosunku pracy.\n[§ 3. 3)]'
      );
      _cz1_d:=_add(_cz1,4,'Kary podlegające zatarciu',
         'Odpis zawiadomienia o ukaraniu oraz inne dokumenty związane z ponoszeniem przez pracownika '
         'odpowiedzialności porządkowej lub odpowiedzialności określonej w odrębnych przepisach, '
         'które przewidują zatarcie kary po upływie określonego czasu.\n[§ 3. 4)]'
      );
      _cz1_a=null() | _cz1_b=null() | _cz1_c=null() | _cz1_d=null()
   || FUN.emsg('Utworzenie wszystkich elementów części I nie powiodło się.'@)

   |? _cz2:=_add(_root,2,'Dokumentacja w sprawach związanych ze stosunkiem pracy',
         'Dokumentacja w sprawach związanych ze stosunkiem pracy.\n[§ 6.]'
      );
      _cz1=null()
   || FUN.emsg('Utworzenie nagłówka  nie powiodło się.'@)

   |? _cz2_1:=_add(_cz2,1,'Czas pracy','Dokumenty dotyczące ewidencjonowania czasu pracy.\n[§ 6. 1)]');
      _cz2_2:=_add(_cz2,2,'Urlop wypoczynkowy',
         'Dokumenty związane z ubieganiem się i korzystaniem z urlopu wypoczynkowego.\n[§ 6. 2)]'
      );
      _cz2_3:=_add(_cz2,3,'Wynagrodzenie',
         'Karty (listy) wypłaconego wynagrodzenia za pracę i innych świadczeń związanych z pracą '
         'oraz wniosek pracownika o wypłatę wynagrodzenia do rąk własnych (art. 86 § 3 Kodeksu pracy)\n[§ 6. 3)]'
      );
      _cz2_4:=_add(_cz2,4,'Odzież i obuwie robocze oraz środki ochrony indywidualnej',
         'Karta ewidencji przydziału odzieży i obuwia roboczego oraz środków ochrony indywidualnej, '
         'a także dokumenty związane z wypłatą ekwiwalentu pieniężnego za używanie własnej odzieży i obuwia '
         'oraz ich pranie i konserwację (art. 237⁶ i art. 237⁷ Kodeksu pracy)\n[§ 6. 4)]'
      );

      _cz2_1=null() | _cz2_2=null() | _cz2_3=null() | _cz2_4=null()
   || FUN.emsg('Utworzenie wszystkich elementów części II nie powiodło się.'@)

   ?}

?};

_root


\zaoh_czesc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Uniwersalna formuła zwracająca informację o wskazanym rekordzie.
::       Uwaga: poprawność parametrów nie jest weryfikowana.
::   WE:  _a  [STRING] - Kod zwracanej informacji:
::                         PATH   - Wyrażenie ścieżkowe rekordu.
::                         uidref - uidref rekordu.
::                         ref    - Wskazanie rekordu.
::        _b  [STRING] - Kod elementu głównego (Z lub D).
::        _c  [STRING] - Kod elementu (np. I).
::       [_d] [STRING] - Kod elementu (np. D).
::       [_e] [STRING] - Kod elementu (np. D10).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tSTRING:=type_of('');
{? var_pres('_a')=_tSTRING & (_a='PATH' | _a='uidref' | _a='ref')
|| _kind:=_a
|| return()
?};

_ret:=~~;

ZAOH.cntx_psh();
ZAOH.index('CZESC');
ZAOH.prefix();
_ok:=1;
_parent:=0;
{! _lp:=2 .. _
|? _ok
|! {? var_pres('_[%1]' [$_lp])=_tSTRING & ZAOH.find_key(_parent,_[_lp],)
   || _parent:=#ZAOH.ref()
   || _ok:=0
   ?}
!};
{? _ok
|| {? _kind='PATH'
   || _ret:=ZAOH.PATH
   |? _kind='uidref'
   || _ret:=ZAOH.uidref()
   |? _kind='ref'
   || _ret:=ZAOH.ref()
   ?}
?};
ZAOH.cntx_pop();

_ret


\zaoh_clone
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła tworzy indywidualną strukturę hierarchiczną (dotyczy tylko dokumentacji pracowniczej).
::   WE: _a [REFERENCE] - Wskazanie na rekord tabeli OSOBA.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
ZAOHI.cntx_psh();
ZAOHI.index('OSLP');
ZAOHI.prefix(_osoba);
{? ZAOHI.first()
|| _ret:=1
:: Klonowanie tylko dla pustej dziedziny.
|? _g0d:=exec('zaoh_path','zalacz','G0D');
   _idpath:=exec('zaoh_czesc','zalacz','PATH',_g0d,'I','D');
   _idpath<>~~
|| _go:=
      $("_go:=_a;
         _osoba:=_b;
         _parent1:=_c;
         _parent2:=_d;

         ZAOH.prefix(_parent1);
         _loop:=ZAOH.first();
         {!
         |? _loop
         |! {? ZAOH.PATH*'"+_g0d+"'=1
            || ZAOHI.blank();
               ZAOHI.OSOBA:=_osoba;
               ZAOHI.ZAOHI:=_parent2;
               ZAOHI.ZAOH:=ZAOH.ref();
               {? ZAOHI.add()
               || {? ZAOH.PATH<>'"+_idpath+"'
                  || ZAOH.cntx_psh();
                     _go(_go,_osoba,#ZAOH.ref(),#ZAOHI.ref());
                     ZAOH.cntx_pop()
                  ?};
                  _loop:=ZAOH.next()
               || undo();
                  _loop:=0
               ?}
            || _loop:=ZAOH.next()
            ?}
         !}
      ");

   ZAOH.cntx_psh();
   ZAOH.index('LP');
   do();
   _go(_go,_osoba,0,0);
   _ret:=end() & ZAOHI.first();
   ZAOH.cntx_pop()
|| _ret:=0
?};
ZAOHI.cntx_pop();

_ret


\zaoh_nazwa_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła ustawiająca ikonę w polu ZAOH.NAZWA.
::   WE: _a [STRING] - Akronim okna wertowania.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ws:={? var_pres('_a')=type_of('') || _a || '' ?};

{? _ws='WERZ'
||
:: Ponieważ w oknie wertowania jest tylko jedno pole, to ikony do niego przypisane muszą nieść podwójną informację -
:: zarówno o strukturze jak i o zawartości.
   ZAOH.win_fml(_ws,,'NAZWA',,'ICON_BEFORE',
      "  _ikony:=exec('_ikony','zalacz');
         _state:=ZAOH.tr_state('icon');
         {? _state='open' | (ZAOH.SYSTEM='T' & _state='none')
::          "Otwarty" katalog lub (obsługa wyjątku) - dla elementu systemowego bez elementów podrzędnych ...
         || _ikony.dirOpen.ikona
         |? _state='closed'
         || _ikony.dirClose.ikona
         || ZAOTS.cntx_psh();
            ZAOTS.index('ZAOH');
            ZAOTS.prefix(ZAOH.ref());
            _ret:={? ZAOTS.first() || _ikony.checked.ikona || _ret:=_ikony.empty.ikona ?};
            ZAOTS.cntx_pop();
            _ret
         ?}
      "
   )

|? _ws='VIEW'
||
:: Ponieważ w oknie wertowania jest tylko jedno pole, to ikony do niego przypisane muszą nieść podwójną informację -
:: zarówno o strukturze jak i o zawartości.
   ZAOH.win_fml(_ws,,'NAZWA',,'ICON_BEFORE',
      "  _ikony:=exec('_ikony','zalacz');
         _state:=ZAOH.tr_state('icon');
         {? _state='open' | (ZAOH.SYSTEM='T' & _state='none')
::          "Otwarty" katalog lub (obsługa wyjątku) - dla elementu systemowego bez elementów podrzędnych ...
         || _ikony.dirOpen.ikona
         |? _state='closed'
         || _ikony.dirClose.ikona
         || _array:=exec('tzalacz_get','zalacz','P');
            {? ~_array.SLO_NAZ.first()
::             Dla elementu nie zdefiniowano typów załączników - brak ikony.
            || _ikony.place.ikona
            |? _array.ZALACZ.first()
            || _ikony.used.ikona
            || _ikony.empty.ikona
           ?}
         ?}
      "
   )


|? _ws='WERD'
||
:: Ikony w kolumnie NAZWA mówią o dostępnych załącznikach: czy można definiować i czy są zdefiniowane.
   ZAOH.win_fml(_ws,,'NAZWA',,'ICON_BEFORE',
      "  _ret:='';
         _ikony:=exec('_ikony','zalacz');
         _apath:=exec('zaoh_path','zalacz','OBJ');
         {? _apath.poziom<3
::          Załączników nie definiujemy dla poziomu 1 i 2.
         || _ret:=_ikony.place.ikona
         |? _apath.poziom=4 & _apath.czesc[2]='I' & _apath.czesc[3]='D'
::          Dla pod-części I D ikoną pokażemy, czy są już przywiązane do niej załączniki (nie typy załączników!).
         || ZAOCZ.cntx_psh();
            ZAOCZ.index('ZAOH');
            ZAOCZ.prefix();
            _ret:={? ZAOCZ.find_key(ZAOH.ref()) || _ikony.used.ikona || _ikony.place.ikona ?};
            ZAOCZ.cntx_pop()
         |? _apath.poziom=3 & ~(_apath.czesc[2]='I' & _apath.czesc[3]='D')
::          Dla poziomu 3 (z wyjątkiem I D) załączniki mogą być definiowane, jeżeli nie mają one elementów podrzędnych.
         || ZAOH.cntx_psh();
            ZAOH.index('LP');
            ZAOH.prefix(#ZAOH.ref());
            {? ZAOH.first()
            || _ret:=_ikony.place.ikona
            ?};
            ZAOH.cntx_pop()
         ?};
         {? _ret=''
         || ZAOTS.cntx_psh();
            ZAOTS.index('ZAOH');
            ZAOTS.prefix(ZAOH.ref());
            _ret:={? ZAOTS.first() || _ikony.checked.ikona || _ikony.empty.ikona ?};
            ZAOTS.cntx_pop()
         ?};
         _ret
      "
   )
?}


\zaoh_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła budująca okno grupowe panelu administracyjnego załączników akt osobowych / dokumentacji pracowniczej.
::   WE: _a [STRING] - Identyfikator części głównej.
::   WY: Uchwyt zbudowanego okna.
::----------------------------------------------------------------------------------------------------------------------
_g0z:=exec('zaoh_path','zalacz','G0Z');
_g0d:=exec('zaoh_path','zalacz','G0D');

{? var_pres('_a')=type_of('') & (_a=_g0z | _a=_g0d)
|| _g0:=_a
|| return()
?};

:: Kilka ustawień zależnych od obsługiwanej gałęzi. - -  - - - - - - -  - - - - - - -  - - - - - - -  - - - - - - -  - -
_cfg:=obj_new(
:: Wyróżnik (doklejany np. do identyfikatorów okien).
   'id',
:: Tytuł okna grupowego.
   'grp_title',
:: Akronim okna wertowania tabeli ZAOH.
   'zaoh_ws',
:: Akronim okna wertowania tabeli ZAOTS.
   'zaots_ws'
);

{? _g0=_g0z
|| _cfg.id:='z';
   _cfg.grp_title:='Załączniki - parametryzacja'@;
   _cfg.zaoh_ws:='WERZ';
   _cfg.zaots_ws:='WERZ'

|| _cfg.id:='d';
   _cfg.grp_title:='Dokumentacja pracownicza - parametryzacja'@;
   _cfg.zaoh_ws:='WERD';
   _cfg.zaots_ws:='WERD'

?};

:: Przygotowanie brakujących okien wraz z obsługą.  - -  - - - - - - -  - - - - - - -  - - - - - - -  - - - - - - -  - -
_ws:=SLO_KOD.mk_sel('Miejsca użycia'@,'P',,'#zaom',,,,,'U');
SLO_KOD.win_fld(_ws,,'NAZWA',,,69,,,'Opis'@,,'Opis miejsca użycia załączników'@);
SLO_KOD.win_act(_ws,,'Formuła','Legenda'@@,,,"exec('legenda','color','ZAOM#01')",,,,,,'L',,'target=window');
SLO_KOD.win_act(_ws,,'Kolejność');
SLO_KOD.win_fml(_ws,,'NAZWA',,'ICON_BEFORE',
   "  _ikony:=exec('_ikony','zalacz');
      ZAOTM.cntx_psh();
      ZAOTM.index('MIEJSCE');
      ZAOTM.prefix(SLO_KOD.KOD,);
      _ret:={? ZAOTM.first() || _ikony.checked.ikona || _ikony.empty.ikona ?};
      ZAOTM.cntx_pop();
      _ret
   "
);

_we:=SLO_KOD.mk_edit('Miejsce użycia'@,,'#zaom');
SLO_KOD.win_efld(_we,,'KOD',,,,,,'Kod'@,,'Akronim tabeli'@);
SLO_KOD.win_efld(_we,,'NAZWA',,,80,,,'Opis'@,,'Opis miejsca użycia załączników'@);
SLO_KOD.win_edit(_we);

:: Ustawienie ikon w kolumnach.  - -  - - - - - - -  - - - - - - -  - - - - - - -  - - - - - - -  - - - -  - - - - - - -
exec('zaoh_nazwa_icon','zalacz',_cfg.zaoh_ws);

{? _g0=_g0d
||
:: Ikony w kolumnie CZESC mówią o strukturze - pokazują, czy element ma elementy podrzędne (można go rozwinąć),
:: czy też nie.
   ZAOH.win_fml(_cfg.zaoh_ws,,'CZESC',,'ICON_BEFORE',
      "  _ikony:=exec('_ikony','zalacz');
         _state:=ZAOH.tr_state('icon');
         {? _state='open' | (ZAOH.SYSTEM='T' & _state='none')
::          "Otwarty" katalog lub (obsługa wyjątku) - dla elementu systemowego bez elementów podrzędnych ...
         || _ikony.dirOpen.ikona
         |? _state='closed'
         || _ikony.dirClose.ikona
         || _ikony.dirNC.ikona
         ?}
      "
   )
?};

ZAOTS.win_fml(_cfg.zaots_ws,,'SLO_NAZ','NAZWA','ICON_BEFORE',
   "  EDIT_VAR.INFO:='Widok ogólny';
      _ikony:=exec('_ikony','zalacz');
      ZAOTM.cntx_psh();
      ZAOTM.index('SLO_NAZ');
      ZAOTM.prefix(ZAOTS.SLO_NAZ);
      {? ZAOTM.first()
      || _ret:=_ikony.dedicated.ikona;
         SLO_TYP.cntx_psh();
         SLO_KOD.cntx_psh();
         {? exec('kod','ext_slo','ZAOM',ZAOTM.MIEJSCE)<>null()
         || EDIT_VAR.INFO:=SLO_KOD.NAZWA
         ?};
         SLO_KOD.cntx_pop();
         SLO_TYP.cntx_pop()
      || _ret:=_ikony.empty.ikona
      ?};
      ZAOTM.cntx_pop();
      _ret
   "
);

ZAOTM.win_fml('WER',,'SLO_NAZ','NAZWA','ICON_BEFORE',
   $("EDIT_VAR.INFO:='<BRAK>';
      _ikony:=exec('_ikony','zalacz');
      ZAOH.cntx_psh();
      ZAOH.prefix();
      ZAOTS.cntx_psh();
      ZAOTS.index('SLO_NAZ');
      ZAOTS.prefix(ZAOTM.SLO_NAZ,'"+_g0+"',);
      {? ZAOTS.first()
      || _ret:=_ikony.checked.ikona;
         ZAOTS.ZAOH();"+
         {? _g0=_g0d
         || "EDIT_VAR.INFO:=ZAOH.CZESC+' - '+ZAOH.NAZWA"
         || "  EDIT_VAR.INFO:='';
               {!
               |? {? ZAOH.ZAOH
                  || EDIT_VAR.INFO:=ZAOH.NAZWA+' / '+EDIT_VAR.INFO;
                     ZAOH.seek(ZAOH.ZAOH)
                  ?}
               !};
               EDIT_VAR.INFO-=3
            "
         ?}+"
      || _ret:=_ikony.empty.ikona
      ?};
      ZAOTS.cntx_pop();
      ZAOH.cntx_pop();
      _ret
   ")
);


:: Akcje Drag&Drop.   - -  - - - - - - -  - - - - - - -  - - - - - - -  - - - - - - -  - -  - -  - - - - - - - - - - - -
ZAOH.dnd_sel(_cfg.zaoh_ws,,'records.ZAOTS',"exec('zaoh_dnd','zalacz')");
{? _g0=_g0z
|| ZAOH.dnd_sel(_cfg.zaoh_ws,,'records.ZAOH',"exec('zaoh_dnd','zalacz')")
?};

SLO_KOD.dnd_sel(_ws,,'records.ZAOTM',"exec('slo_kod_zaotm_dnd','zalacz')");
:: Przygotowanie okna grupowego.  - -  - - - - - - -  - - - - - - -  - - - - - - -  - - - - - - -  - -  - -  - - - - - -

_mode:='maximized_with_title';

_grp:=ZAOH.grp_make(_cfg.grp_title,,'#zaohgrp'+_cfg.id,,,,,'html_maximized');
:: Zakładka "Struktura", okno "Struktura".
ZAOH.grp_sel(_grp,,_cfg.zaoh_ws,'Struktura'@,$("grp_disp(ZAOTS,'"+_cfg.zaots_ws+"')"),,,,,,,,_mode);
:: Zakładka "Struktura", okno "Typy załączników".
ZAOH.tab_splt(_grp,,'vertical','zaots');
ZAOH.grp_sel(_grp,ZAOTS,_cfg.zaots_ws,,
   $("grp_disp(ZAOH,'"+_cfg.zaoh_ws+"',0);
      EDIT_VAR.INFO:=''
   "),,,,
   $("EDIT_VAR.INFO:='';
      ZAOTS.prefix(ZAOH.ref());
      _apath:=exec('zaoh_path','zalacz','OBJ');
      _ha:={? exec('zaots_dolacz_dostepne','zalacz',_apath) || ':' || ':D' ?};
      ZAOTS.actions('"+_cfg.zaots_ws+"',_ha,,1)
   "),,,,_mode
);

:: Zakładka "Dostęp", okno "Miejsca użycia".
ZAOH.grp_sel(_grp,SLO_KOD,_ws,'Dostęp'@,"grp_disp(ZAOTM,'WER')",,,,
   "  SLO_KOD.index('NAZWA');
      SLO_KOD.prefix(exec('slo_typ','ext_slo','ZAOM'))
   ",,,,_mode
);
:: Zakładka "Dostęp", okno "Typy załączników".
ZAOH.tab_splt(_grp,,'vertical','zaotm');
ZAOH.grp_sel(_grp,ZAOTM,'WER',,
   $("grp_disp(SLO_KOD,'"+_ws+"',0);
      EDIT_VAR.INFO:=''
   "),,,,
   "  EDIT_VAR.INFO:='';
      ZAOTM.index('MIEJSCE');
      ZAOTM.prefix(SLO_KOD.KOD,)
   ",,,,_mode
);

:: Ustawienia końcowe.
{? _g0=_g0d
:: Nie pokazujmy wartości pola CZESC dla rekordu głównego.
|| ZAOH.fld_fml('CZESC','DISPLAY_FORMAT',"'empty='+$(ZAOH.ZAOH=0)")
?};
ZAOH.win_sel(_grp);
ZAOH.win_edit('RED');
ZAOH.tr_root(_cfg.zaoh_ws,,0,#exec('zaoh_init','zalacz',_g0));

~~


\zaoh_akcje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Funkcja dla bieżącego rekordu tabeli ZAOH określa dostępność akcji w oknie wertowania.
::   WE:
::   WY: Tablica z elementami nazwanymi.
::----------------------------------------------------------------------------------------------------------------------
_akcje:=obj_new('dolacz','usun','wyzej','nizej');
{! _lp:=1 .. obj_len(_akcje)
:: Domyślnie wszystkie akcje ustawiamy na dostępne.
|! _akcje[_lp]:=1
!};

_apath:=exec('zaoh_path','zalacz','OBJ');

_zaots:="
:: Funkcja dla bieżącego rekordu tabeli ZAOH sprawdza, czy są przywiązane do niego typy załączników.
   ZAOTS.cntx_psh();
   ZAOTS.index('ZAOH');
   ZAOTS.prefix(ZAOH.ref());
   _ret:=ZAOTS.first();
   ZAOTS.cntx_pop();
   _ret
";

{? ZAOH.SYSTEM='T'
|| {? _apath.G0D & (_apath.poziom<3 | (_apath.czesc[2]='I' & _apath.czesc[3]='D') | _apath.czesc[2]='II')
::    W gałęzi związanej z dokumentacja pracowniczą, wyłączamy akcję "Dołącz" w określonych przypadkach.
   || _akcje.dolacz:=0
   || _akcje.dolacz:=~_zaots()
   ?};
   _akcje.usun:=0;
   _akcje.wyzej:=0;
   _akcje.nizej:=0

|| {? ZAOH.LP=1
   || _akcje.wyzej:=0
   ?};
   ZAOH.cntx_psh();
   ZAOH.index('LP');
   ZAOH.prefix(ZAOH.ZAOH);
   {? ~ZAOH.find_key(ZAOH.LP+1)
   || _akcje.nizej:=0
   ?};
   ZAOH.cntx_pop();

   {? _apath.G0Z
   || _akcje.dolacz:=~_zaots()

   |? _apath.G0D
   || {? _apath.poziom=3
      || {? _apath.czesc[2]='I' & _apath.czesc[3]='D'
::          Wyłączamy możliwość przesuwania elementów podrzędnych gałęzi D.I.D.
         || _akcje.wyzej:=_akcje.nizej:=0
::          Czy ma być dostępna akcja "Dołącz" (pod-część) na poziomie 2?
::          Jeżeli dla części zdefiniowane są załączniki, to nie (z wyjątkiem części I D).
         || _akcje.dolacz:=~_zaots()
         ?}
      || _akcje.dolacz:=0
      ?};
      {? _akcje.dolacz
::          Jeżeli akcja "Dołącz" nie została jeszcze wykluczona, to sprawdźmy ograniczenia ilościowe.
::          Jeżeli element jest systemowy to na pewno nie na poziomie niższym niż 3.
      || {? _apath.czesc[2]='I' & _apath.czesc[3]<>'D'
         || ZAOH.cntx_psh();
            ZAOH.index('LP');
            ZAOH.prefix({? ZAOH.SYSTEM='T' || #ZAOH.ref() || ZAOH.ZAOH ?});
            {? ZAOH.size()=99
            || _akcje.dolacz:=0
            ?};
            ZAOH.cntx_pop()
         ?}
      ?}
   ?}
?};

_akcje


\zaoh_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Obsługa akcji "Rekord - przed" w oknach WERZ i WERD tabeli ZAOH.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| _akcje:=exec('zaoh_akcje','zalacz');
   _ha:='';
   {? ~_akcje.dolacz
   || _ha+='D'
   ?};
   {? ~_akcje.usun
   || _ha+='U'
   ?};
   {? ~_akcje.wyzej | ~_akcje.nizej
   || _ha+='E('+{? ~_akcje.wyzej || 'W' || '' ?}+{? ~_akcje.nizej || 'N' || '' ?}+')'
   ?};
   ZAOH.actions_grayed(cur_win(1,1),_ha);
   0
?}


\zaoh_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - po" w oknach WERZ i WERD tabeli ZAOH.
::   WE: _a - Tryb pracy:
::          1 - Popraw [domyślnie] [!];
::          0 - Dołącz.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:={? var_pres('_a')=type_of(0) || _a || 1 ?};
{? exec('zaoh_modb','zalacz')
|| exec('zaoh_chk','zalacz',_put)
?}


\zaoh_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz" w oknach WERZ i WERD tabeli ZAOH. Akcja dodaje "ostatnie dziecko" pozostając na rodzicu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('zaoh_akcje','zalacz').dolacz
|| melody();
   return()
?};

ZAOH.cntx_psh();
_nadrz:=#ZAOH.ref();
_again:=1;
_blank:=1;
{!
|? _again
|! {? _blank
   || ZAOH.blank();
      ZAOH.ZAOH:=_nadrz;
::    Dla celów walidacyjnych nadajmy wstępną wartość polu LP.
      ZAOH.LP:=-1;
      ZAOH.memo_set(,'OPIS')
   ?};
   {? ZAOH.edit("exec('zaoh_ae','zalacz',0)")
:     Dodawany element zawsze staje się elementem podrzędnym bieżącego elementu - z ostatnim (nowym) numerem.
   || do();
      ZAOH.cntx_psh();
      ZAOH.index('LP');
      ZAOH.prefix(ZAOH.ZAOH);
      _lp:={? ZAOH.last() || ZAOH.LP ?}+1;
      ZAOH.cntx_pop();
      ZAOH.LP:=_lp;
      {? ZAOH.add()
      || ZAOH.memo_put(,'OPIS')
      ?};
      {? (_blank:=end())=0
      || FUN.emsg('Operacja nie powiodła się. Dane nie zostały zapisane. Spróbuj ponownie.'@)
      || win_disp()
      ?}
   || _again:=0
   ?}
!};
ZAOH.cntx_pop()


\zaoh_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń" w oknach WERZ i WERD tabeli ZAOH.
::       W oknie WERZ (obsługującym "Załączniki") możliwe jest budowanie struktury wielopoziomowej - algorytm usuwania
::       jest o wiele bardziej skomplikowany.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('zaoh_akcje','zalacz').usun
|| melody();
   return()
?};

_nadrz:=ZAOH.ZAOH;

ZAOH.cntx_psh();
ZAOH.index('LP');
ZAOH.prefix(#ZAOH.ref());
_sa_podrz:=ZAOH.first();
ZAOH.cntx_pop();

_ok:=1;
{? _sa_podrz
|| _del:=FUN.choice('Czy usunąć bieżący wiersz?'@,,'Pozostaw podrzędne'@,'Usuń podrzędne'@);
   {? _del=1
:     Usuwamy bieżący element, ale podrzędne przepinamy do jego (bieżącego, usuwanego) nadrzędnego.
   || _lp:=ZAOH.LP;
      do();
      ZAOH.cntx_psh();
      ZAOH.clear();
      ZAOH.f_set(,,'ZAOH.ZAOH=:_a',#ZAOH.ref());
      {? ZAOH.f_first()
      || {!
:           Rezerwacja miejsca na nowy element.
:           Podrzędne, w dotychczasowej kolejności, "wskoczą" na miejsce usuwanego.
         |? ZAOH.cntx_psh();
            ZAOH.index('LP');
            ZAOH.prefix(_nadrz);
            {? ZAOH.find_key(_lp)
            || {? ZAOH.last()
               || {!
                  |? {? ZAOH.LP>=_lp
                     || ZAOH.LP+=1;
                        ZAOH.put() & ZAOH.prev()
                     ?}
                  !}
               ?}
            ?};
            ZAOH.cntx_pop();
:
            ZAOH.ZAOH:=_nadrz;
            ZAOH.LP:=_lp;
            _lp+=1;
            ZAOH.put() & ZAOH.f_next()
         !}
      ?};
      ZAOH.f_clear();
      ZAOH.cntx_pop();
      ZAOH.del();
      _ok:=end()
   |? _del=2 &
      FUN.choice(
         'Operacja usunięcia informacji jest nieodwracalna.\n'
         'Czy na pewno usunąć wiersz i powiązane informacje?'@,,'Tak'@,'Nie'@,,,''
      )
:     Usuwamy z podrzędnymi. Część pracy wykona wyzwalacz, usuwając (rekurencyjnie) podrzędne
:     (przed usunięciem bieżącego).
   || _ok:=ZAOH.del(1,1)
   ?}

|? exec('del_ask','#table',ZAOH)
:  Brak elementów podrzędnych - proste pytanie - prosta akcja.
|| _ok:=ZAOH.del(1,1)
?};
{? ~_ok
|| FUN.emsg('Operacja nie powiodła się.'@)
|? ZAOH.ZAOH<>_nadrz & ZAOH.seek(_nadrz,)
:: Po usunięciu rekordu bieżącym staje się następny w kolejności logicznej.
:: Jeżeli nie leży on w tej samej gałęzi, to znajdźmy ostatniego w tej gałęzi, a jeżeli takiego nie ma
:: (usunięty był ostatnim w gałęzi), to stańmy na rodzicu.
|| ZAOH.cntx_psh();
   ZAOH.index('LP');
   ZAOH.prefix(_nadrz);
   _ref:={? ZAOH.last() || ZAOH.ref() || null() ?};
   ZAOH.cntx_pop();
   {? _ref<>null()
   || ZAOH.seek(_ref)
   ?}
?}


\zaoh_przesun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła odpowiedzialna za przesuwanie (wyżej / niżej) bieżącego elementu. Część wspólna odpowiednich akcji
::       wywoływanych z menu lub poprzez przyciski.
::   WE: _a - Kierunek przesuwania:
::          'W' - Wyżej [domyślnie];
::          'N' - Niżej.
::   WY: Wynik operacji:
::       1 - Sukces;
::       0 - Porażka.
::----------------------------------------------------------------------------------------------------------------------
_delta:={? var_pres('_a')=type_of('') & _a='N' || 1 || -1 ?};
ZAOH.cntx_psh();
ZAOH.index('LP');
ZAOH.prefix(ZAOH.ZAOH);
do();
_lp:=ZAOH.LP;
_new:=_lp+_delta;
ZAOH.LP:=-1;
{? ZAOH.put() & ZAOH.find_key(_new)
|| ZAOH.LP:=_lp;
   {? ZAOH.put() & ZAOH.find_key(-1)
   || ZAOH.LP:=_new;
      ZAOH.put()
   || undo()
   ?}
|| undo()
?};
_ret:=end();
ZAOH.cntx_pop();
_ret


\zaoh_wyzej_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Przesuń wyżej" w oknach WERZ i WERD tabeli ZAOH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('zaoh_akcje','zalacz').wyzej
|| melody();
   return()
?};
exec('zaoh_przesun','zalacz','W')


\zaoh_nizej_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Przesuń niżej" w oknach WERZ i WERD tabeli ZAOH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('zaoh_akcje','zalacz').nizej
|| melody();
   return()
?};
exec('zaoh_przesun','zalacz','N')


\zaoh_legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Legenda" w bieżącym oknie tabeli ZAOH.
::   WE: _a [STRING] - Akronim okna.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ws:=cur_win(1,1);
{? _ws='WERZ'
|| exec('legenda','color','ZAOH#01')
|? _ws='WERD'
|| exec('legenda','color','ZAOH#02')
|? _ws='VIEW'
|| exec('legenda','color','ZAOH#03')
?}


\zaoh_dnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa drag&drop w oknach WERZ i WERD tabeli ZAOH.
::   WE: [_a] [TABLE] - alias tabeli z informacjami o przenoszonych rekordach
::       [_b] [REFERENCE] - wskazanie na rekord docelowy
::       [_c] [STRING] - nazwa tabeli
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG) | var_pres('_b')<>type_of(null) | var_pres('_c')<>type_of('')
||
:: standardowa obługa drag and drop
   _SRC:=dnd_info('dropped_records');
   {? type_of(_SRC)=type_of(~~)
   || return(0)
   ?};
   _dest:=dnd_info('dest_record');
   {? _dest=null()
   || return()
   ?};
   _name:=dnd_info('table_name')
||
:: emulacja
   _SRC:=_a;
   _dest:=_b;
   _name:=_c
?};

{? _name=ZAOH.name()
::  Operacje na drzewie - przeciąganie listków i gałązek (dostępne tylko dla "Załączników").   - - - - - - - - - - - - -
|| _err:='';
   ZAOTS.cntx_psh();
   ZAOTS.index('ZAOH');
   ZAOTS.prefix(_dest);
   {? ZAOTS.first()
   || _err:='Operacja nieudana. Element docelowy sparametryzowany.'@
   ?};
   ZAOTS.cntx_pop();
   {? _err<>''
   || FUN.emsg(_err);
      return()
   ?};

   errno();
   _nm:=no_msg(1);

   _tab:=tab_tmp(2,
      'ZAOH','INTEGER','Nadrzędny',
      'LP','INTEGER','Lp.'
   );

   do();

   ZAOH.cntx_psh();
   ZAOH.index('LP');
   {? ZAOH.seek(_dest) & ZAOH.ZAOH=0
   || undo();
      _err:='Operacja nieudana. Tworzenie elementów na poziomie części niemożliwe.'@

   || ZAOH.prefix(#_dest);
      _lp:={? ZAOH.last() || ZAOH.LP ?}+1;
      ZAOH.clear();

      _again:=_SRC.first();
      {!
      |? _err='' & _again
      |! {? ZAOH.seek(_SRC.REF,_name) & _SRC.CRC=ZAOH.crc()
         || {? ZAOH.ZAOH=_dest
:              Jeżeli nadrzędnym przenoszonego elementu jest element docelowy, to nic nie trzeba robić. Nie jest to
:              jednak sytuacja typu błąd.
            || ''
            |? ZAOH.SYSTEM='T'
            || undo();
               _err:='Operacja nieudana. Przenoszenie elementów systemowych niemożliwe.'@
            || {? ~_tab.find_key(ZAOH.ZAOH)
               || _tab.blank();
                  _tab.ZAOH:=ZAOH.ZAOH;
                  _tab.LP:=ZAOH.LP;
                  _tab.add()
               |? _tab.LP>ZAOH.LP
               || _tab.LP:=ZAOH.LP;
                  _tab.put()
               ?};
               ZAOH.ZAOH:=#_dest;
               ZAOH.LP:=_lp;
               {? ZAOH.put()
               || _lp+=1
               || undo();
                  _err:='Operacja nieudana. Przeniesienie elementu nie powiodło się.'@
               ?}
            ?}
         || undo();
            _err:='Operacja nieudana. Przenoszonego elementu nie znaleziono.'@
         ?};
         _again:=_SRC.next()
      !};

      {? _err='' & _tab.first()
      || {!
         |? {? exec('zaoh_lp_update','zalacz',_tab.ZAOH,_tab.LP)
            || _tab.next()
            || undo();
               _err:='Operacja nieudana. Przeniesienie elementu nie powiodło się.'@;
               0
            ?}
         !}
      ?}
   ?};

   ZAOH.cntx_pop();

   {? ~end()
   || _txt:='';
      {? _err<>''
      || _txt:=_err
      |? _nr:=errno()
      || {? _nr=377
         || _txt:=
               'Wykryto próbę naruszenia struktury hierarchicznej.\n'
               'Reorganizacja załączników akt osobowych została anulowana.'@
         ?}
      || _txt:='Reorganizacja załączników akt osobowych nie powiodła się.'@
      ?};
      {? _txt<>''
      || FUN.emsg(_txt)
      ?}
   ?};

   no_msg(_nm)

|? _name=ZAOTS.name()
::  Operacje na typach załączników (dostępna zarówno dla "Załączników" jak i "Dokumentacji pracowniczej"). - - - - - - -
|| _err:='';
   ZAOH.cntx_psh();
   ZAOH.index('LP');
   ZAOH.prefix();
   {? ZAOH.seek(_dest)
   || _apath:=exec('zaoh_path','zalacz','OBJ');
      {? ~exec('zaots_dolacz_dostepne','zalacz',_apath)
      || _err:='Operacja nieudana. Podpinanie załączników w gałęzi "%1" nie jest możliwe.'@ [ZAOH.NAZWA]
      ?}
   || _err:='Operacja nieudana. Elementu docelowego nie znaleziono.'@
   ?};
   ZAOH.cntx_pop();
   {? _err<>''
   || FUN.emsg(_err);
      return()
   ?};

   do();
   ZAOTS.cntx_psh();
   ZAOTS.clear();
   _again:=_SRC.first();
   {!
   |? _err='' & _again
   |! {? ZAOTS.seek(_SRC.REF,_name) & _SRC.CRC=ZAOTS.crc()
      || ZAOTS.ZAOH:=_dest;
         {? ~ZAOTS.put()
         || undo()
         ?}
      || undo();
         _err:='Operacja nieudana. Typu załącznika nie znaleziono.'@
      ?};
      _again:=_SRC.next()
   !};
   ZAOTS.cntx_pop();
   {? ~end()
   || _txt:='';
      {? _err<>''
      || _txt:=_err
      || _txt:='Przeniesienie typu załącznika nie powiodło się.'@
      ?};
      {? _txt<>''
      || FUN.emsg(_txt)
      ?}
   ?}

?};

~~


\slo_kod_zaotm_dnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Obsługa akcji drag&drop w oknie miejsc użycia załączników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_SRC:=dnd_info('dropped_records');
{? type_of(_SRC)=type_of(~~)
|| return(0)
?};

_dest:=dnd_info('dest_record');
{? _dest=null()
|| return()
?};
SLO_KOD.cntx_psh();
SLO_KOD.prefix();
_miejsce:={? SLO_KOD.seek(_dest) || SLO_KOD.KOD || '' ?};
SLO_KOD.cntx_pop();
{? _miejsce=''
|| return()
?};

_name:=dnd_info('table_name');

{? _name=ZAOTM.name()
:: Operacja przeniesienia typu załącznika pomiędzy miejscami.
|| _err:='';
   do();
   ZAOTM.cntx_psh();
   ZAOTM.prefix();
   _loop:=_SRC.first();
   {!
   |? _err='' & _loop
   |! {? ZAOTM.seek(_SRC.REF,_name) & _SRC.CRC=ZAOTM.crc()
      || ZAOTM.MIEJSCE:=_miejsce;
         ZAOTM.put()
      || undo();
         _err:='Operacja nieudana. Typu załącznika nie znaleziono.'@
      ?};
      _loop:=_SRC.next()
   !};
   ZAOTM.cntx_pop();
   {? ~end()
   || _txt:='';
      {? _err<>''
      || _txt:=_err
      || _txt:='Przeniesienie typu załącznika nie powiodło się.'@
      ?};
      {? _txt<>''
      || FUN.emsg(_txt)
      ?}
   ?}
?};

~~


\zaoh_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła uruchamiająca panel administracyjny "Załączników" / "Dokumentacji pracowniczej".
::   WE: _a [STRING] - Identyfikator części głównej.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_g0z:=exec('zaoh_path','zalacz','G0Z');
_g0d:=exec('zaoh_path','zalacz','G0D');

{? var_pres('_a')=type_of('') & (_a=_g0z | _a=_g0d)
|| _g0:=_a
|| return()
?};

ZAOH.cntx_psh();
ZAOH.index('LP');
ZAOH.prefix();
ZAOTS.cntx_psh();
ZAOTS.index('ZAOH');
SLO_KOD.cntx_psh();
ZAOTM.cntx_psh();
exec('zaoh_config','zalacz',_g0);
ZAOH.select();
ZAOTM.cntx_pop();
SLO_KOD.cntx_pop();
ZAOTS.cntx_pop();
ZAOH.cntx_pop();

~~


\zaohi_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli ZAOHI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaohi_chk','zalacz',0) & exec('zaohi_modb','zalacz')


\zaohi_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli ZAOHI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaohi_chk','zalacz',1) & exec('zaohi_modb','zalacz')


\zaohi_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli ZAOHI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Usunięcie informacji o powiązaniach załączników z usuwanym listkiem.
ZAOH.cntx_psh();
ZAOH.prefix();
_lp:=ZAOHI.ZAOH().LP;
ZAOH.cntx_pop();
exec('del_ndx','#table',ZAOCZ,'OSLP',ZAOHI.OSOBA,_lp) &
:: Usunięcie elementów podrzędnych.
exec('del_ndx','#table',ZAOHI,'OSLP',ZAOHI.OSOBA,#ZAOHI.ref())


\zaohi_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli ZAOHI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZAOHI.ZAOH & ZAOHI.NAZWA<>''
|| ZAOH.cntx_psh();
   {? ZAOHI.NAZWA=ZAOHI.ZAOH().NAZWA
   || ZAOHI.NAZWA:=''
   ?};
   ZAOH.cntx_pop()
?};
1


\zaohi_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła sprawdza wypełnienie wymaganych pól tabeli ZAOHI.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz w akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(ZAOHI,
:: Pola redagowalne
   {? ZAOHI.ZAOH
   || ZAOH.cntx_psh();
      ZAOH.prefix();
      ZAOHI.ZAOH();
      _apath:=exec('zaoh_path','zalacz','OBJ');
      ZAOH.cntx_pop();
      {? _apath.G0D & _apath.poziom=4 & _apath.czesc[2]='I' & _apath.czesc[3]='D'
      || "_a.record(_b,,'DATA')"
      || ""
      ?}
   || ""
   ?},
:: Pola nieredagowalne.
   "_a.not_null(_b,'OSOBA','ZAOH')"
)


\zaohi_renumber
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła odpowiedzialna za przenumerowanie / uporządkowanie części I.D.
::   WE: _a [INTEGER] - Numer rekordu (w tabeli ZAOHI) reprezentujący część I.D.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _nr:=_a
|| return(0)
?};

_ret:=0;
ZAOHI.cntx_psh();
ZAOHI.index('OSLP');
ZAOHI.prefix();
{? ZAOHI.seek(_nr,)
|| ZAOH.cntx_psh();
   ZAOH.index('LP');
   ZAOH.prefix();
   ZAOHI.ZAOH();
   _apath:=exec('zaoh_path','zalacz','OBJ');
   {? _apath.poziom=3 & _apath.czesc[2]='I' & _apath.czesc[3]='D'
   || ZAOH.prefix(#ZAOH.ref());
      _osoba:=ZAOHI.OSOBA;
      ZAOHI.prefix(_osoba,_nr);
      {? ZAOHI.first()
      || _ds:=do_state();
         {? _ds=0
         || do()
         ?};
         ZAOCZ.cntx_psh();
         ZAOCZ.index('OSLP');
         ZAOCZ.prefix(_osoba);

::       Uzupełnij ubytki.
         _max:={? ZAOCZ.last() || ZAOCZ.ZAOH().LP ?};
         {? _max
::          Jeżeli jest choć jeden załącznik ...
         || _loop:=ZAOH.first();
            {!
            |? _loop
            |! {? ~ZAOHI.find_key(ZAOH.LP)
               || ZAOHI.blank();
                  ZAOHI.OSOBA:=_osoba;
                  ZAOHI.ZAOHI:=_nr;
                  ZAOHI.ZAOH:=ZAOH.ref();
                  ZAOHI.add()
               ?};
               _loop:=ZAOH.next() & ZAOH.LP<_max
            !}
         ?};

::       Poprzenoś załączniki.
         _wolny:=null();
         {? ZAOH.first()
         || {!
            |? {? ZAOCZ.find_key(ZAOH.LP)
               || {? _wolny<>null()
                  || _ref:=ZAOH.ref();
                     {!
                     |? ZAOCZ.ZAOH:=_wolny;
                        ZAOCZ.put();
::                      Wróćmy do katalogu, który jest zapełniany.
                        ZAOCZ.ZAOH();
                        ZAOCZ.next() & ZAOCZ.ZAOH=_ref
                     !};
                     _wolny:=null()
                  ?}
               |? _wolny=null()
               || _wolny:=ZAOH.ref()
               ?};
               ZAOH.next()
            !}
         ?};

::       Usuń zbędne katalogi.
         _max:={? ZAOCZ.last() || ZAOCZ.ZAOH().LP ?};
         {!
         |? ZAOHI.last() & ZAOHI.ZAOH().LP>_max
         |! ZAOHI.del()
         !};

         ZAOCZ.cntx_pop();
         _ret:={? _ds=0 || end() || do_state()=1 ?}
      ?}
   ?};
   ZAOH.cntx_pop()
?};
ZAOHI.cntx_pop();
_ret


\zaohi_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła konfigurująca widok tabeli ZAOHI - ustawia formaty wyświetlania i ikony.
::       Uwaga: poprawność parametru _a nie jest badana.
::   WE: [_a] [STRING] - Akronim okna wertowania [domyślnie: WER].
::       [_b] [STRING] - Akronim tabeli wartości kluczowej - poziom załączników: 'P' lub 'OSOBA' [domyślnie: 'OSOBA'].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ws:={? var_pres('_a')=type_of('') || _a || 'WER' ?};
_dom:={? var_pres('_b')=type_of('') || gsub(_b,'@.','') || 'OSOBA' ?};
{? _dom<>'P' & _dom<>'OSOBA'
|| _dom:='OSOBA'
?};

:: W oknie wyświetlane jest pole ZAOH.CZESC - format wyświetlania (ukrywanie części elementu głównego)
:: ustawiany jest zatem dla niego (a nie dla ZAOHI.ZAOH).
ZAOH.fld_fml('CZESC','DISPLAY_FORMAT',"'empty='+$(ZAOH.ZAOH=0)");

:: Chcemy ukryć daty zatarcia kary dla wszystkich pod-części z wyjątkiem I.D. Ponieważ data ta jest obowiązkowa tylko
:: dla rekordów pod-części I.D. to posłużymy się sztuczką: ukrywamy wszystkie niewypełnione daty.
ZAOHI.fld_fml('DATA','DISPLAY_FORMAT',"'empty='+$(ZAOHI.DATA=date(0,0,0))");

:: Ikony w kolumnie CZESC mówią o strukturze - pokazują, czy element ma elementy podrzędne (można go rozwinąć),
:: czy też nie.
ZAOHI.win_fml(_ws,,'ZAOH','CZESC','ICON_BEFORE',
   "  _ikony:=exec('_ikony','zalacz');
      _state:=ZAOHI.tr_state('icon');
      {? _state='closed'
      || _ikony.dirClose.ikona
      |? _state='open'
      || _ikony.dirOpen.ikona
      || _ikony.dirNC.ikona
      ?}
   "
);

:: Ikony w kolumnie NAZWA mówią o dostępnych załącznikach: czy można definiować i czy są zdefiniowane.
ZAOHI.win_fml(_ws,,'NAZWA',,'ICON_BEFORE',
   $("_ret:='';
      _ikony:=exec('_ikony','zalacz');
      ZAOH.cntx_psh();
      ZAOH.index('LP');
      ZAOH.prefix();
      ZAOHI.ZAOH();
      _apath:=exec('zaoh_path','zalacz','OBJ');
      {? _apath.poziom<3
::       Załączników nie możemy przypinać na poziomie 1 i 2.
      || _ret:=_ikony.place.ikona
      || _array:=exec('tzalacz_get','zalacz','"+_dom+"',,1);
         {? _apath.poziom=3 & _apath.czesc[2]='I' & _apath.czesc[3]='D'
         || _WOLNE:=sql('select REF from :_a where REF not in (select ZAOCZ.ZALACZ from ZAOCZ )',_array.ZALACZ);
            _ret:={? _WOLNE.first() || _ikony.error.ikona || _ikony.place.ikona ?}
         || {? ~_array.SLO_NAZ.first()
            || _ret:=_ikony.place.ikona
            |? _array.ZALACZ.first()
            || _ret:=_ikony.used.ikona
            || _ret:=_ikony.empty.ikona
            ?}
         ?}
      ?};
      ZAOH.cntx_pop();
      _ret
   ")
);

~~


\zaohi_nazwa_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła "Przed wyświetleniem" pola ZAOHI.NAZWA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZAOHI.NAZWA='' & 1+cur_kwin()='s'
|| ZAOH.cntx_psh();
   ZAOHI.NAZWA:=ZAOHI.ZAOH().NAZWA;
   ZAOH.cntx_pop()
?};
~~


\zaohi_akcje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Funkcja dla bieżącego rekordu tabeli ZAOHI określa dostępność akcji w oknie wertowania.
::   WE:
::   WY: Tablica z elementami nazwanymi.
::----------------------------------------------------------------------------------------------------------------------
_akcje:=obj_new('dolacz','popraw','usun','przenumeruj');
{! _lp:=1 .. obj_len(_akcje)
:: Domyślnie wszystkie akcje ustawiamy na niedostępne (wyjątkowo).
|! _akcje[_lp]:=0
!};

{? ZAOHI.ZAOH
|| ZAOHI.ZAOH();
   _apath:=exec('zaoh_path','zalacz','OBJ');
   {? _apath.poziom>2 & _apath.czesc[2]='I' & _apath.czesc[3]='D'
   || _ha:=
      {? _apath.poziom=3
      || _akcje.dolacz:=_akcje.przenumeruj:=1
      || _akcje.dolacz:=_akcje.popraw:=_akcje.usun:=1
      ?}
   ?}
?};

_akcje


\zaohi_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Rekord - przed" w oknie WER tabeli ZAOHI.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _ha:='DpUM:';
   {? ZAOHI.ZAOH
   || ZAOHI.ZAOH();
      ZAOH.memo_get(,'OPIS');
      _akcje:=exec('zaohi_akcje','zalacz');
      _ha:=':';
      {? ~_akcje.dolacz
      || _ha:='D'+_ha
      ?};
      {? ~_akcje.popraw
      || _ha:='p'+_ha
      ?};
      {? ~_akcje.usun
      || _ha:='U'+_ha
      ?};
      {? ~_akcje.przenumeruj
      || _ha:='M'+_ha
      ?}
   || ZAOH.memo_set(,'OPIS')
   ?};
   ZAOHI.actions('WER',_ha,,1)
?};
~~


\zaohi_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Obsługa akcji "Rekord - po" w oknie WER tabeli ZAOHI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Akcja "Popraw" dostępna jest jedynie dla elementów podrzędnych części D. Walidacja odbywa się dla istniejącego
:: rekordu.
:: Akcja "Dołącz" dostępna jest natomiast na poziomie części D oraz elementów podrzędnych. Ponieważ tworzony rekord
:: jeszcze nie istnieje, to wyzwalacz nie jest w stanie prawidłowo określić poziomu dodawanego rekordu. Dlatego
:: zachodzi potrzeba ręcznego wsparcia walidacji - sprawdzenia wypełnienia "Daty zatarcia".
{? (_ret:=__CHK.record(ZAOHI,,'DATA'))<>''
|| return(_ret)
|| exec('zaohi_chk','zalacz',-menu_txt()='popraw')
?}


\zaohi_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknie WER tabeli ZAOHI. Akcja dostępna tylko w części I D i poniżej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZAOHI.ZAOH=null()
|| return()
?};

ZAOHI.ZAOH();
_apath:=exec('zaoh_path','zalacz','OBJ');
{? ~(_apath.poziom>2 & _apath.czesc[2]='I' & _apath.czesc[3]='D')
|| return()
?};

ZAOHI.NAZWA:='';
ZAOHI.DATA:=date(0,0,0);
{? ZAOHI.edit("exec('zaohi_ae','zalacz')")
|| do();
   ZAOHI.ZAOHI:={? _apath.poziom=3 || #ZAOHI.ref() || ZAOHI.ZAOHI ?};
   ZAOHI.cntx_psh();
   ZAOHI.index('OSLP');
   ZAOHI.prefix(ZAOHI.OSOBA,ZAOHI.ZAOHI);
   ZAOH.cntx_psh();
   _lp:={? ZAOHI.last() || ZAOHI.ZAOH().LP ?}+1;
   ZAOH.cntx_pop();
   ZAOHI.cntx_pop();
   ZAOH.cntx_psh();
   ZAOH.index('LP');
   ZAOH.prefix();
   {? ZAOH.seek({? _apath.poziom=3 || #ZAOH.ref() || ZAOH.ZAOH ?})
   || _zaohD:=ZAOH.ref();
      ZAOH.prefix(#_zaohD);
      {? ~ZAOH.find_key(_lp)
      || ZAOH.blank();
         ZAOH.ZAOH:=_zaohD;
         ZAOH.LP:=_lp;
         ZAOH.NAZWA:='Kara '+form(_lp,-2,0,'9,');
         ZAOH.add()
      ?};
      ZAOHI.ZAOH:=ZAOH.ref()
   || undo()
   ?};
   ZAOH.cntx_pop();
   ZAOHI.add();
   {? ~end()
   || FUN.info('Dodanie części nie powiodło się.'@)
   ?}
?};
~~


\zaohi_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Usuń - przed" w oknie WER tabeli ZAOHI. Akcja dostępna tylko w części I D i poniżej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('zaohi_akcje','zalacz').usun
|| melody();
   return()
?};

_tzalacz:=params_get().tzalacz;

{? ~FUN.ask(
      'Za chwilę usunięte zostaną wszystkie informacje o karze -\n'
      'dedykowana część i wszystkie związane z nią załączniki dotyczące bieżącego stosunku pracy.\n'
      'Czy na pewno chcesz kontynuować?'@
   )
|| return()
?};

_czD:=ZAOHI.ZAOHI;
do();
:: Najpierw usuwamy wszystkie załączniki.
_array:=exec('tzalacz_get','zalacz','P',,1);
_ZALACZ:=_array.ZALACZ;
_all:=1;
{? _ZALACZ.first()
|| ZALACZ.cntx_psh();
   ZALACZ.prefix();
   {!
   |? {? ZALACZ.seek(_ZALACZ.REF,)
      || {? (_tzalacz.dom='P' & ZALACZ.P=P.ref()) | (_tzalacz.dom='OSOBA' & ZALACZ.OSOBA=OSOBA.ref())
::          Usuwamy tylko rekordy związane z "bieżącym stosunkiem pracy".
         || ZALACZ.del(1,1)
         || _all:=0
         ?}
      ?};
      _ZALACZ.next()
   !};
   ZALACZ.cntx_pop()
?};
:: Na razie nie usuwamy katalogu - (ewentualnie) zrobi to mechanizm przenumerowania.
{? _all
|| exec('zaohi_renumber','zalacz',_czD)
?};
end();
{? ~_all
|| FUN.info('Kara zawiera załączniki spoza bieżącego stosunku pracy. Usunięcie nie było możliwe.'@)
?};
{? ZAOHI.ZAOHI<>_czD
|| ZAOHI.seek(_czD)
?};
~~


\zaohi_przenumeruj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Przenumeruj" w oknie WER tabeli ZAOHI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaohi_renumber','zalacz',#ZAOHI.ref())


\zaohi_drukuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Drukuj" w oknie WER tabeli ZAOHI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
rep_exec('ped_wykaz')


\zaohi_eksportuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Eksportuj" w oknie WER tabeli ZAOHI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;

_ok:=0;
_tzalacz.ZALACZ.TAB.cntx_psh();
_tzalacz.ZALACZ.TAB.index(_tzalacz.ZALACZ.NDX.NR);
_tzalacz.ZALACZ.TAB.prefix();
{? ~_tzalacz.ZALACZ.TAB.first()
|| FUN.info('Brak dokumentów do eksportu.'@)
|? _tzalacz.ZALACZ.TAB.find_key(1,'D??',)
|| FUN.info(
      'W związku z wymaganiami technicznymi brak możliwości wykonania eksportu.\n'
      'Uporządkuj dokumenty w części D i spróbuj ponownie.'@
   )
|| _ok:=FUN.ask(
      {? ZAOHI.ZAOH().ZAOH=0
      || 'Za chwilę nastąpi utworzenie uporządkowanego zbioru wszystkich dokumentów\n'
         'przeznaczonego do wydania pracownikowi.\n'@
      || 'Za chwilę nastąpi utworzenie uporządkowanego zbioru wybranych dokumentów\n'
         'przeznaczonego do wydania pracownikowi.\n'@
      ?}+'Kontynuować?'@
   )
?};
_tzalacz.ZALACZ.TAB.cntx_pop();
{? ~_ok
|| return()
?};
exec('eksportuj','zalacz',_tzalacz.ZALACZ.TAB)


\eksportuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Formuła odpowiadająca za eksport dokumentacji pracowniczej.
::       Formuła odwołuje sie do bufora tabeli OSOBA.
::   WE: _a [TABLE]  - Tabela tymczasowa z REF-ami rekordów tabeli ZALACZ do wyeksportowania.
::   WY:
:: ~OST: INFILECHOOSER
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;

params_set(_par:=params_get());
_tzalacz:=_par.tzalacz;
_esign:=_tzalacz.esign;

_err:='Przygotowanie archiwum nie powiodło się.'@;

:: Przygotowanie środowiska na serwerze. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_zip:=exec('eksportuj_cfg','zalacz','%1.zip'[$OSOBA.tm_stamp()]);
{? _zip.status=0
|| FUN.emsg('%1\n%2'[_err,_zip.info]);
   return()
?};

:: Właściwe przygotowanie archiwum.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
{? (_msg:=exec('eksportuj_zip','zalacz',_TAB,'ZALACZ',_zip.path))<>''
|| FUN.emsg('%1\n%2'[_err,_msg]);
   return()
?};

:: Pobierz plik z dokumentacją z serwera.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_file:='%1_%2_%3.zip'[OSOBA.NAZWISKO,OSOBA.PIERWSZE,OSOBA.IDENTYF];
_name:='ZIPDir';
{? exec('interm','#system')=1
|| {? dlg_save(_zip.path,0,_file)<>''
   || FUN.info('Plik z dokumentacją pracowniczą należy jeszcze uwierzytelnić podpisem elektronicznym.'@)
   ?};
   return()

|| _pth:=exec('get','#profile',,_tzalacz.section,_name);
   _again:=1;
   {!
   |? _again
   |! _again:=0;
      ctr_set('!application','filechooser','reset');
      ctr_set('!application','filechooser','setCurrentDirectory',_pth);
      ctr_set('!application','filechooser','setSelectedFile',_file);
      ctr_set('!application','filechooser','setMultiSelectionEnabled',0);
      ctr_set('!application','filechooser','setFileSelectionMode','FILES_ONLY');
      ctr_set('!application','filechooser','addDefaultFilter','Archiwum (zip)'@,'zip');
      {? ctr_call('!application','filechooser','showSaveDialog')
      || _pth:='@'+ctr_call('!application','filechooser','getSelectedFile');
         {? -(_pth+4)<>'.zip'
         || FUN.emsg('Plik "%1" ma nieprawidłowe rozszerzenie - wymagane jest "zip".'@[1-_pth]);
            _again:=1
         |? fexists(_pth,0)
         || {? FUN.ask('Plik "%1" już istnieje.\nCzy na pewno chcesz go nadpisać?'@[1-_pth])
            || ferase(_pth,0)
            || _again:=1
            ?}
         ?};
         {? ~_again
         || _dira:=spli_str(1-_pth,_tzalacz.sep0);
            _dir:=1-_pth-(+_dira[obj_len(_dira)]+1);
            exec('set','#profile',,_tzalacz.section,_name,_dir)
         ?}
      || _pth:=''
      ?}
   !};
   {? _pth=''
   || return()
   ?}
?};

{? ~fcopy(_zip.path,_pth,0,0,1)
|| FUN.emsg('Pliku "%1" nie udało się pobrać.'@[_pth]);
   return()
?};

_esign.start();
_esign.s_file_add(_pth,1);
_esign.sign('PKCS#7');
_esign.stop();

~~


\eksportuj_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Tworzy strukturę przechowującą informacje o tworzonym pliku archiwum.
::   WE: _a [STRING] - nazwa pliku archiwum na serwerze
::   WY: wskazanie tablicy nazwanej o strukturze:
::       dir - katalog roboczy na serwerze
::       file - nazwa pliku archiwum na serwerze (argument _a)
::       path - pełna ścieżka do pliku archiwum na serwerze
::       tmp - wskazanie obiektu reprezentującego katalog roboczy
::       status - wynik ostatniej operacji (0 - błąd / 1 - sukces)
::       info - opis przyczyny ewentualnego błędu
::----------------------------------------------------------------------------------------------------------------------
_cfg:=obj_new('dir','file','path','tmp','status','info');

_cfg.dir:='';
_cfg.file:=_a;
_cfg.path:='';
_cfg.tmp:=~~;
_cfg.status:=1;
_cfg.info:='';

_tmp:=fmk_tmp_dir(0);
{? type_of(_tmp)=type_of(~~)
|| _cfg.status:=0;
   _cfg.info:=exec('eksportuj_msg','zalacz','CREATE_TMP')
|| _cfg.tmp:=_tmp;
   _cfg.dir:=_tmp.get_path()+exec('sep','#file',1);
   _cfg.path:=_cfg.dir+_cfg.file
?};

_cfg


\eksportuj_zip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Formuła zapisuje we wskazanym katalogu załączniki wskazane w przekazanej tabeli.
::       Formuła wewnętrzna - parametry nie są weryfikowane.
::   WE: _a [TABLE]  - Tabela tymczasowa z REF-ami rekordów tabeli ZALACZ do wyeksportowania.
::       _b [STRING] - Akronim pola z "REF-em" rekordu tabeli ZALACZ.
::       _c [STRING] - Pełna ścieżka dostępu do tworzonego ZIP-a.
::   WY: '' lub przyczyna niepowodzenia.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_fld:=_b;
_zip:=_c;

{? ~_TAB.first()
|| return(exec('eksportuj_msg','zalacz','FILES'))
?};

_tmp:=fmk_tmp_dir(0);
{? type_of(_tmp)=type_of(~~)
|| return(exec('eksportuj_msg','zalacz','CREATE_TMP'))
?};
_dir:=_tmp.get_path()+exec('sep','#file',1);

_ref:=$'_a.%1'[_fld];

_MSG:=obj_new('TXT','add','get');
_MSG.TXT:='\n';
_MSG.add:="{? .TXT*('\n'+_a+'\n')=0 || .TXT+=_a+'\n' ?}";
_MSG.get:="1-.TXT-1";

ZALACZ.cntx_psh();
ZALACZ.prefix();
SLO_NAZ.cntx_psh();
SLO_NAZ.prefix();

_ok:=0;
_TAB.cntx_psh();
_TAB.prefix();
_loop:=_TAB.first();
{!
|? _loop
|! {? ZALACZ.seek(_ref(_TAB))
   || _fn:=exec('get_unique_file_name','#file',ZALACZ.ZAL_NAME,_dir);
      _md:=exec('zaomeda_xml','zalacz',
         ZALACZ.uidref(),
         _dir+exec('split_file_name','#file',_fn).fn+'.xml',
         ZALACZ.TYP_ZAL().NAZWA
      );
      {? _md<>''
      || _MSG.add(_md)
      |? ~ZALACZ.bl_get('ZAL',_dir+_fn,0)
      || _MSG.add(exec('eksportuj_msg','zalacz','GET_FILE'))
      || _ok+=1
      ?}
   ?};
   _loop:=_TAB.next()
!};
_TAB.cntx_pop();

SLO_NAZ.cntx_pop();
ZALACZ.cntx_pop();

{? _MSG.TXT='\n'
|| {? ~_ok
   || _MSG.add(exec('eksportuj_msg','zalacz','FILES'))
   |? ~fpack_add(_zip,_dir)
   || _MSG.add(exec('eksportuj_msg','zalacz','CREATE_ZIP'))
   ?}
?};

obj_del(_tmp);
_MSG.get()


\eksportuj_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Formuła zwraca treść komunikatu o błędzie.
::   WE: _a [STRING] - symbol komunikatu
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
_sym:=_a;

{? _sym='CREATE_TMP'
|| 'Utworzenie katalogu roboczego nie powiodło się.'@

|? _sym='FILES'
|| 'Brak plików spełniających wymagania techniczne.'@

|? _sym='GET_FILE'
|| 'Błąd zapisu pliku załącznika na dysku.'@

|? _sym='CREATE_ZIP'
|| 'Wystąpił błąd podczas tworzenia pliku archiwum.'@

|| 'Wystąpił nieokreślony błąd'@
?}


\zaohi_legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Legenda" w oknach tabeli ZAOHI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','ZAOHI#01')


\zaots_dolacz_dostepne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła sprawdza czy dla bieżącego rekordu tabeli ZAOH możliwe jest dodawanie typów załączników (rekordów
::       w tabeli ZAOTS).
::   WE: _a [OBJECT] - Tablica z elementami nazwanymi - wynik exec('zaoh_path','zalacz','OBJ').
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_apath:=_a;

_blokuj:=0;

{? (ZAOH.SYSTEM='T' &
      ~(_apath.G0D & _apath.poziom=3 & _apath.czesc[2]='I') &
      ~(_apath.G0D & _apath.poziom>1 & _apath.czesc[2]='II')
   ) | (_apath.G0D & _apath.poziom=4 & _apath.czesc[2]='I' & _apath.czesc[3]='D')
:: Dla elementów systemowych nie dołączamy załączników.
:: Nie dotyczy to elementów na poziomie 3 w gałęzi I (dla nich sprawdzamy czy są pod-części).
:: Załączników nie dołączamy też do pod-części w części D.
|| _blokuj:=1
|? ~(_apath.G0D & _apath.poziom=3 & _apath.czesc[2]='I' & _apath.czesc[3]='D')
::       Występowania pod-części nie sprawdzamy stojąc na elemencie I D.
|| ZAOH.cntx_psh();
   ZAOH.index('LP');
   ZAOH.prefix(#ZAOH.ref());
   {? ZAOH.first()
   || _blokuj:=1
   ?};
   ZAOH.cntx_pop()
?};

~_blokuj


\zaots_rodzaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła dla bieżącej zawartości bufora tabeli ZAOTS lub wartości w tablicy _a (jeżeli została podana) ustala
::       akronim typu słownika.
::   WE: [_a] [OBJECT] - Tablica z elementami nazwanymi - wynik exec('zaoh_path','zalacz','OBJ').
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:=~~;

{? var_pres('_a')>100
|| _apath:=_a
|? ZAOTS.ZAOH<>null()
|| ZAOH.cntx_psh();
   ZAOH.index('LP');
   ZAOH.prefix();
   ZAOTS.ZAOH();
   _apath:=exec('zaoh_path','zalacz','OBJ');
   ZAOH.cntx_pop()
|| return(_typ)
?};

{? _apath.G0D & _apath.poziom>2
|| {? _apath.czesc[2]='I'
   || {? _apath.czesc[3]='B'
      || _typ:='AktOsobB'
      |? _apath.czesc[3]='C'
      || _typ:='AktOsobC'
      ?}
   |? _apath.czesc[2]='II' & _apath.czesc[3]='6pkt1'
   || _typ:='DokP6p1'
   ?}
?};

_typ


\zaots_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli ZAOTS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaots_modb','zalacz') & exec('zaots_chk','zalacz',0)


\zaots_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli ZAOTS.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('zaots_moda','zalacz',ZAOTS.SLO_NAZ)
?};
~~


\zaots_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli ZAOTS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaots_modb','zalacz') & exec('zaots_chk','zalacz',1)


\zaots_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli ZAOTS.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| {? ZAOTS.SLO_NAZ<>bfld('SLO_NAZ') | ZAOTS.SLO_KOD<>bfld('SLO_KOD')
   || exec('zaots_moda','zalacz',bfld('SLO_NAZ'))
   ?}
?};
~~


\zaots_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli ZAOH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Usunięcie informacji o powiązaniu załączników z usuwaną częścią (dotyczy I D).
exec('del_ndx','#table',ZAOCZ,'TYP_ZAL',ZAOTS.SLO_NAZ)


\zaots_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli ZAOTS.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('zaots_moda','zalacz',bfld('SLO_NAZ'))
?};
~~


\zaots_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła sprawdza wypełnienie wymaganych pól tabeli ZAOTS.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz w akcji "Rekord - po".
::   WE: _a [NUMBER] - Tryb modyfikacji danych:
::          0 - Dołączanie [domyślnie];
::          1 - Poprawianie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

__CHK.validate(ZAOTS,
:: Pola redagowalne (występujące w oknie redagowania).
   $("_a.table(_b,"+$_put+",,'SLO_NAZ')"),
:: Pole nieredagowalne (niewystępujące w oknie redagowania).
   "_a.not_null(_b,,'ZAOH')"
)


\zaots_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli ZAOTS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZAOTS.ZAOH
|| ZAOH.cntx_psh();
   ZAOTS.ZAOH();
   _apath:=exec('zaoh_path','zalacz','OBJ');
   ZAOTS.G:=_apath.czesc[1];
   ZAOH.cntx_pop()
|| ZAOTS.G:=''
?};
1


\zaots_moda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Po modyfikacji rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - po", "Popraw - po", "Usuń - po" dla tabeli ZAOTS.
::       Aktualizuje metadane.
::   WE: _a [REFERENCE] - Wskazanie typu załącznika.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_slo_naz:=_a;

{? ZAOTS.G=exec('zaoh_path','zalacz','G0D') & exec('lic','#b_domain','PED')
|| ZALACZ.cntx_psh();
   ZALACZ.index('TYP_ZAL');
   ZALACZ.prefix(exec('ref_firma','ustawienia'),_slo_naz);
   _loop:=ZALACZ.first();
   {!
   |? _loop
   |! exec('zaomeda_update','zalacz','ZALACZ','H');
      _loop:=ZALACZ.next()
   !};
   ZALACZ.cntx_pop()
?};

~~


\zaots_zaoh_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wartość początkowa pola ZAOTS.ZAOH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZAOH.ref()


\zaots_slokod_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła na wzorzec pola ZAOTS.SLO_KOD - ustawia typ słownika SLO_KOD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('slownik','ext_slo',exec('zaots_rodzaj','zalacz'))


\zaots_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Rekord - po" w oknie WERZ tabeli ZAOTS.
::   WE: _a [NUMBER] - Tryb modyfikacji danych:
::          0 - Dołączanie [domyślnie];
::          1 - Poprawianie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaots_chk','zalacz',var_pres('_a')=type_of(0) & _a)


\zaots_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa redagowania rekordu w oknach WERZ i WERD tabeli ZAOTS dla ustalonego rekordu w tabeli ZAOH.
::       Formuła wywoływana z akcji "Dołącz - przed" i "Popraw - przed".
::   WE: _a [NUMBER] - Tryb modyfikacji danych:
::          0 - Dołączanie [domyślnie];
::          1 - Poprawianie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

{? _put
|| _ref:=ZAOTS.ref()
|| _ref:=null();
:: Nadanie wartości początkowych - w szczególności polu ZAOTS.ZAOH. To na jego podstawie będą podejmowane decyzje o
:: sposobie edycji.
   ZAOTS.blank()
?};

_apath:=exec('zaoh_path','zalacz','OBJ');
{? ~_put &~ exec('zaots_dolacz_dostepne','zalacz',_apath)
|| melody();
   return()
?};

_rodzaj:=exec('zaots_rodzaj','zalacz',_apath);

_zmiana:=0;

_slo_typ:='ZAL';
EDIT_VAR.SLO_TYP==_slo_typ;

SLO_NAZ.cntx_psh();
SLO_NAZ.f_clear();
SLO_NAZ.index('NAZWA');
SLO_NAZ.prefix();
SLO_NAZ.f_set('NAZWA','join SLO_TYP',
   'SLO_TYP.SYMBOL=\':_a\' and "SLO_NAZ".REFERENCE not in'
      '('
         'select ZAOTS.SLO_NAZ '
         'from ZAOTS '
         'where ZAOTS.G=\':_b\' and ZAOTS.REFERENCE<>:_c'
      ')',
   EDIT_VAR.SLO_TYP,_apath.czesc[1],_ref
);
{? _rodzaj=~~
|| _ws:=SLO_NAZ.mk_sel('Typy załączników'@,'N',,'#slo_nazwybx',,,,,'U',,,,,'normal');
   SLO_NAZ.win_fld(_ws,,'NAZWA',,,60);
   SLO_NAZ.win_act(_ws,,'Formuła','Wybierz'@@,,,
      {? _put
      || "ZAOTS.SLO_NAZ:=SLO_NAZ.ref(); ZAOTS.put()"
      || "ZAOTS.blank(); ZAOTS.SLO_NAZ:=SLO_NAZ.ref(); ZAOTS.add()"
      ?},
      "{? ~SLO_NAZ.sel_size() || sel_exit() ?}",
      1,1,
      "FUN.ask('Czy dołączyć zaznaczone typy załączników do grupy %1?'@ [ZAOH.NAZWA])",
      "sel_exit()",
      'W'
   );
   SLO_NAZ.win_act(_ws,,'Szukaj');
   SLO_NAZ.win_sel(_ws);
   _zmiana+=SLO_NAZ.select(,1,5)

|| SLO_NAZ.win_dict('SLO');
   SLO_NAZ.actions('SLO','dpu:d');
   SLO_KOD.cntx_psh();
   SLO_KOD.win_dict('SLO');
   SLO_KOD.actions('SLO','dpu:d');

   _we:=ZAOTS.win_edit('?');
   ZAOTS.win_edit('REDD');
   {!
   |? {? ~_put
      || ZAOTS.blank();
         SLO_NAZ.f_rfresh()
      ?};
      {? ZAOTS.edit($("exec('zaots_ae','zalacz',"+$_put+")"))
      || {? _put
         || _zmiana+=ZAOTS.put();
            0
         || _zmiana+=ZAOTS.add()
         ?}
      ?}
   !};
   ZAOTS.win_edit(_we);

   SLO_KOD.actions('SLO',':');
   SLO_KOD.cntx_pop();
   SLO_NAZ.actions('SLO',':')
?};
SLO_NAZ.f_clear();
SLO_NAZ.cntx_pop();

EDIT_VAR.SLO_TYP==_slo_typ;

{? _zmiana
|| grp_disp(ZAOH,{? _apath.G0Z || 'WERZ' || 'WERD' ?})
?};
~~


\zaots_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń - po" w oknach WERZ i WERD tabeli ZAOTS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Zakładamy, że akronim bieżącego okna tabeli ZAOTS jest taki sam jak akronim okna tabeli ZAOH.
:: Odświeżamy, ze względu na ewentualną zmianę ikon.
grp_disp(ZAOH,cur_win(1,1))


\zaots_legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Legenda" w oknach tabeli ZAOTS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','ZAOTS#01')


\zaots_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Obsługa akcji "Wyświetl - przed" dla tabeli ZAOTS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('zaots_rodzaj','zalacz')=~~
|| return()
?};
ZAOTS.cntx_psh();
ZAOTS.win_edit('REDD');
ZAOTS.display();
ZAOTS.cntx_pop();
~~


\zaotm_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli ZAOTM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaotm_chk','zalacz',0)


\zaotm_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli ZAOTM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaotm_chk','zalacz',1)


\zaotm_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła sprawdza wypełnienie wymaganych pól tabeli ZAOTM.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz w akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

__CHK.validate(ZAOTM,
:: Pola redagowalne (występujące w oknie redagowania).
   $("_a.index(_b,"+$_put+")"),
:: Pole nieredagowalne (niewystępujące w oknie redagowania).
   "_a.not_null(_b,'MIEJSCE','SLO_NAZ')",
   "  {? var_pres(_b.MIEJSCE,@)=type_of(_b)
      || 1
      || _a.err_fld(_b,'MIEJSCE',1,'W systemie nie zdefiniowano tabeli o akronimie ""%1"".'@ [_b.MIEJSCE]);
         0
      ?}
   "
)


\zaotm_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz" w oknie WER tabeli ZAOTM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SLO_NAZ.cntx_psh();
SLO_NAZ.prefix();
_ws:=SLO_NAZ.mk_sel('Typy załączników'@,'N',,'#slo_nazwybx',,,,,'U',,,,,'normal');
SLO_NAZ.win_fld(_ws,,'NAZWA',,,60);
SLO_NAZ.win_act(_ws,,'Formuła','Wybierz'@@,,,
   "  ZAOTM.blank();
      ZAOTM.MIEJSCE:=SLO_KOD.KOD;
      ZAOTM.SLO_NAZ:=SLO_NAZ.ref();
      ZAOTM.add()
   ",
   "{? ~SLO_NAZ.sel_size() || sel_exit() ?}",
   1,1,
   "FUN.ask('Czy dołączyć zaznaczone typy załączników do miejsca ""%1""?'@ [SLO_KOD.NAZWA])",
   "sel_exit()"
);
SLO_NAZ.win_act(_ws,,'Szukaj');
SLO_NAZ.win_sel(_ws);
SLO_NAZ.win_edit();

_slo_typ:='ZAL';
EDIT_VAR.SLO_TYP==_slo_typ;
SLO_NAZ.f_set('NAZWA','join SLO_TYP',
   'SLO_TYP.SYMBOL=\':_a\' and '
   '"SLO_NAZ".REFERENCE not in (select ZAOTM.SLO_NAZ from ZAOTM)',
   EDIT_VAR.SLO_TYP);
SLO_NAZ.select();
SLO_NAZ.f_clear();
EDIT_VAR.SLO_TYP==_slo_typ;

SLO_NAZ.cntx_pop();
~~


\zaotm_legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Legenda" w oknach tabeli ZAOTM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','ZAOTM#01')


\zaocz_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli ZAOCZ.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| ZALACZ.cntx_psh();
   ZALACZ.prefix();
   ZAOCZ.ZALACZ();
   exec('zaomeda_update','zalacz','ZALACZ','H');
   ZALACZ.cntx_pop()
?};
~~


\zaocz_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli ZAOCZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaocz_chk','zalacz',1)


\zaocz_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli ZAOCZ.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| ZALACZ.cntx_psh();
   ZALACZ.prefix();
   ZAOCZ.ZALACZ();
   exec('zaomeda_update','zalacz','ZALACZ','H');
   ZALACZ.cntx_pop()
?};
~~


\zaocz_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli ZAOCZ.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| ZALACZ.cntx_psh();
   ZALACZ.prefix();
   {? ZALACZ.seek(bfld('ZALACZ'))
   || exec('zaomeda_update','zalacz','ZALACZ','H')
   ?};
   ZALACZ.cntx_pop()
?};
~~


\zaocz_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła sprawdza wypełnienie wymaganych pól tabeli ZAOCZ.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz w akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

__CHK.validate(ZAOCZ,
:: Unikalność klucza.
   $("_a.index(_b,"+$_put+")"),
:: Pola nieredagowalne.
   "_a.not_null(_b,'ZAOH','ZALACZ')"
)


\zaocz_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła aktualizuje informację o miejscu prezentacji (ZAOH) załącznika (ZALACZ). Zakłada się prawidłowość
::       ustawienia buforów obu tabel.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZAOCZ.cntx_psh();
ZAOCZ.index('ZALACZ');
ZAOCZ.prefix();
{? ZAOCZ.find_key(ZALACZ.ref())
|| ZAOCZ.ZAOH:=ZAOH.ref();
   _ret:=ZAOCZ.put()
|| ZAOCZ.ZALACZ:=ZALACZ.ref();
   ZAOCZ.ZAOH:=ZAOH.ref();
   _ret:=ZAOCZ.add()
?};
ZAOCZ.cntx_pop();
_ret


\zaomeda_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli ZAOMEDA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaomeda_chk','zalacz',0) & exec('zaomeda_modb','zalacz')


\zaomeda_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli ZAOMEDA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zaomeda_chk','zalacz',1) & exec('zaomeda_modb','zalacz')


\zaomeda_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli ZAOMEDA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? +ZAOMEDA.PESEL=11
|| ZAOMEDA.DOKRODZ:=ZAOMEDA.DOKNR:=''
|? ZAOMEDA.DOKRODZ<>'' & ZAOMEDA.DOKNR<>''
|| ZAOMEDA.PESEL:=''
?};
1


\zaomeda_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli ZAOMEDA.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

_msg:='Pole nie zawiera poprawnej wartości UIDREF.'@;

__CHK.validate(ZAOMEDA
:: Pola nieredagowalne.
   ,"_a.not_null(_b,'NAG','ID','PIERWSZE','NAZWISKO','NAZWA','OSOBA')"
   ,$("
      {? +ZAOMEDA.NAG=48 & type_of(ref_tab(ZAOMEDA.NAG))=type_of(ZAOMEDA) & ref_num(ZAOMEDA.NAG)
      || ''
      || _a.err_fld(_b,'NAG',1,'"+_msg+"')
      ?}
   ")
   ,$("
      {? +ZAOMEDA.ID=48 & type_of(ref_tab(ZAOMEDA.ID))=type_of(ZAOMEDA) & ref_num(ZAOMEDA.ID)
      || ''
      || _a.err_fld(_b,'ID',1,'"+_msg+"')
      ?}
   ")
)


\zaomeda_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła aktualizuje metadane danych pracowniczych na podstawie bieżącego rekordu tabeli źródłowej.
::   WE:  _a  [STRING] - Akronim tabeli (źródło zmian).
::       [_b] [STRING] - Zakres aktualizacji (lista kodów) [domyślnie: pełna aktualizacja]:
::                         D - dane wynikające z samego dokumentu;
::                         F - nazwa firmy;
::                         H - dane wynikające ze struktury hierarchicznej;
::                         O - dane osobowe;
::                         o - tylko PESEL lub dokument tożsamości (czyli dane osobowe bez nazwiska i imion);
::       [_c] [NUMBER] - Tryb wsadowy (bez komunikatów): 0*/1.
::   WY: Wynik operacji.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _tab:=_a
?};
_zakres:={? var_pres('_b')=type_of('') || _b || 'DFHOo' ?};
_batch:=var_pres('_c')=type_of(0) & _c;

_ret:=0;

ZAOMEDA.cntx_psh();
ZAOMEDA.index('NAG');
ZAOMEDA.prefix();
{? _tab='ZALACZ'
|| {? ZALACZ.FIRMA=exec('ref_firma','ustawienia')
   || _nag:=ZALACZ.uidref();
      _jest:=ZAOMEDA.find_key(_nag,);
      {? ZALACZ.OSOBA=null()
      || _ret:={? _jest || ZALACZ.del(1,1)>0 || 1 ?}
      || {? _jest
         || _size:=ZAOMEDA.fld_num();
            _buf:=obj_new(_size);
            {! _lp:=1 .. _size
            |! _buf[_lp]:=($('ZAOMEDA.'+ZAOMEDA.fld_acr(_lp)))()
            !}
         || ZAOMEDA.blank();
            ZAOMEDA.NAG:=_nag;
            OSOBA.cntx_psh();
            OSOBA.prefix();
            ZAOMEDA.ID:=ZALACZ.OSOBA().uidref();
            ZAOMEDA.OSOBA:=ZALACZ.OSOBA;
            OSOBA.cntx_pop();
            _zakres:='DFHO'
         ?};

::       CZESC, RODZAJ - pola mogą być uzupełnione tylko przy odpowiedniej konfiguracji.
         {? _zakres*'H'
         || _g0d:=exec('zaoh_path','zalacz','G0D');
            ZAOMEDA.CZESC:=ZAOMEDA.RODZAJ:='';
            ZAOTS.cntx_psh();
            ZAOTS.index('SLO_NAZ');
            ZAOTS.prefix(ZALACZ.TYP_ZAL,_g0d,);
            {? ZAOTS.first()
            || ZAOH.cntx_psh();
               ZAOH.index('LP');
               ZAOH.prefix();
               ZAOTS.ZAOH();
               _apath:=exec('zaoh_path','zalacz','OBJ');
               {? _apath.czesc[2]='I'
               || {? _apath.poziom>2 & _apath.czesc[3]='D'
                  || ZAOCZ.cntx_psh();
                     ZAOCZ.index('ZALACZ');
                     ZAOCZ.prefix(ZALACZ.ref());
                     ZAOMEDA.CZESC:={? ZAOCZ.first() || ZAOCZ.ZAOH().CZESC || 'D??' ?};
                     ZAOCZ.cntx_pop()
                  || ZAOMEDA.CZESC:=ZAOH.CZESC
                  ?}
               |? _apath.czesc[2]='II'
               || ZAOMEDA.CZESC:=ZAOH.CZESC
               ?};
               ZAOH.cntx_pop();
               SLO_KOD.cntx_psh();
               ZAOMEDA.RODZAJ:=1+ZAOTS.SLO_KOD().KOD;
               SLO_KOD.cntx_pop()
            ?};
            ZAOTS.cntx_pop()
         ?};

         {? _zakres*'D'
         || ZAOMEDA.DTCREATE:=ZALACZ.DATA;
            ZAOMEDA.DTSIGN:=ZALACZ.DTSIGN
         ?};

::       PESEL / Dokument tożsamości
         {? _zakres*'O' | _zakres*'o'
         || ZAOMEDA.PESEL:=ZAOMEDA.DOKRODZ:=ZAOMEDA.DOKNR:='';
            OSOBA.cntx_psh();
            OSOBA.prefix();
            ZALACZ.OSOBA();
            {? +OSOBA.PESEL=11
            || ZAOMEDA.PESEL:=OSOBA.PESEL
            |? +OSOBA.DOWOD
            || ZAOMEDA.DOKRODZ:='Dowód osobisty';
               ZAOMEDA.DOKNR:=OSOBA.DOWOD
            |? +OSOBA.PASZPORT
            || ZAOMEDA.DOKRODZ:='Paszport';
               ZAOMEDA.DOKNR:=OSOBA.PASZPORT
            ?};
            {? _zakres*'O'
            || ZAOMEDA.PIERWSZE:=OSOBA.PIERWSZE;
               ZAOMEDA.DRUGIE:=OSOBA.DRUGIE;
               ZAOMEDA.NAZWISKO:=OSOBA.NAZWISKO
            ?};
            OSOBA.cntx_pop()
         ?};

         {? _zakres*'F'
         || _pracodawca:=KST.NAZWA;
            exec('czytaj','#stalesys',,KST,'NAZWA');
            ZAOMEDA.NAZWA:=KST.NAZWA;
            KST.NAZWA:=_pracodawca
         ?};

         {? ~_jest
         || _ret:=ZAOMEDA.add()
         |? _bz:=1;
            {! _lp:=1 .. _size
            |? _bz
            |! _bz:=_buf[_lp]=($('ZAOMEDA.'+ZAOMEDA.fld_acr(_lp)))()
            !};
            _bz
         || _ret:=1
         || _ret:=ZAOMEDA.put()
         ?}
      ?}
   ?}
?};
ZAOMEDA.cntx_pop();

{? ~_batch & ~_ret
|| __CHK.err_msg('Aktualizacja metadanych nie powiodła się.'@)
?};

_ret


\zaomeda_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła tworzy plik z metadanymi.
::       Uwaga: poprawność parametrów nie jest sprawdzana!.
::   WE:  _a  [STRING] - Rekord-właściciel metadanych.
::        _b  [STRING] - Pełna ścieżka dostępu do tworzonego pliku XML.
::       [_c] [STRING] - Opis dokumentu [domyślnie: ''].
::   WY: '' lub przyczyna niepowodzenia
::----------------------------------------------------------------------------------------------------------------------
_owner:=_a;
_fn:=_b;
_descr:={? var_pres('_c')=type_of('') || _c || '' ?};

_ret:='';
exec('xml_t_decl','#xml_t');
ZAOMEDA.cntx_psh();
ZAOMEDA.index('NAG');
ZAOMEDA.prefix(_owner,);
{? ZAOMEDA.first()
|| _dokument:="
      _xml:=_a;
      _parent:=_b;
      _descr:=_c;
      _xml.addElement('identyfikatorDokumentu',ZAOMEDA.NAG,_parent);
      _xml.addElement('dataUtworzeniaDokumentu',ZAOMEDA.DTCREATE,_parent);
      {? ZAOMEDA.DTSIGN<>date(0,0,0)
      || _xml.addElement('dataPieczeci',ZAOMEDA.DTSIGN,_parent)
      ?};
      {? _descr<>''
      || _xml.addElement('opisDokumentu',_descr,_parent)
      ?}
   ";

   _xml:=obj_new(@.CLASS.XML_T);
   _root:=_xml.addElement('dokumentacjaPracownicza');
      _xml.addNamespace('http://www.w3.org/2001/XMLSchema','xsd');
      _xml.addNamespace('http://www.mc.gov.pl/standardy/mc');

      _xml.addElement('identyfikatorDokumentacji',ZAOMEDA.ID,_root);
      _xml.addElement('dataEksportu',date(),_root);
      _xml.addElement('nazwaPracodawcy',ZAOMEDA.NAZWA,_root);
      _prac:=_xml.addElement('pracownik',,_root);
         _xml.addElement('nazwisko',ZAOMEDA.NAZWISKO,_prac);
         _xml.addElement('imie',form('%1 %2' [ZAOMEDA.PIERWSZE,ZAOMEDA.DRUGIE]),_prac);
         {? +ZAOMEDA.PESEL=11
         || _xml.addElement('PESEL',ZAOMEDA.PESEL,_prac)
         |? ZAOMEDA.DOKRODZ<>'' & ZAOMEDA.DOKNR<>''
         || _doktoz:=_xml.addElement('dokumentTozsamosci',,_prac);
               _xml.addElement('rodzaj',ZAOMEDA.DOKRODZ,_doktoz);
               _xml.addElement('numer',ZAOMEDA.DOKNR,_doktoz);
            &_doktoz
         ?};
      &_prac;
      {? 4+ZAOMEDA.CZESC='6pkt'
      || _dsp:=_xml.addElement('dokumentStosunekPracy',,_root);
            _dokument(_xml,_dsp,_descr);
            {? ZAOMEDA.CZESC='6pkt1'
            || _xml.addElement('stosunekPracyRozszerzony',ZAOMEDA.CZESC,_dsp);
               {? ZAOMEDA.RODZAJ<>''
               || _xml.addAttr('rodzaj',ZAOMEDA.RODZAJ)
               ?}
            || _xml.addElement('stosunekPracyPodstawowy',ZAOMEDA.CZESC,_dsp)
            ?}

         &_dsp
      || _ao:=_xml.addElement('aktaOsobowe',,_root);
            _dokument(_xml,_ao,_descr);

            _rd:=_xml.addElement('rodzajDokumentu',,_ao);
               {? ZAOMEDA.CZESC<>''
               || _xml.addElement('czesc'+(1+ZAOMEDA.CZESC),ZAOMEDA.CZESC,_rd);
                     {? ZAOMEDA.RODZAJ<>''
                     || _xml.addAttr('rodzaj',ZAOMEDA.RODZAJ)
                     ?}
               ?};
            &_rd;
         &_ao
      ?};
   &_root;
   {? ~_xml.write(_fn)
   || _ret:='Błąd tworzenia pliku XML.'
   |? _nxsd:='v_dok_prac_struk_tech.xsd';
      ~fexists(_nxsd,1)
   || _ret:='Brak pliku ze schematem (XSD).'
   || _hxsd:=fopen(_nxsd,'ur',1,1,1,1);
      {? ~_hxsd.is_open()
      || _ret:='Brak dostępu do pliku ze schematem (XSD).'
      || _hxml:=fopen(_fn,'ur',0,1,1,1);
         {? ~_hxml.is_open()
         || _ret:='Brak dostępu do pliku z metadanymi (XML).'
         || _nm:=no_msg(1);
            {? ~xml_xsd_validate(_hxsd,_hxml)
            || _log:='%1.log' [app_info('def_name')];
               _ret:=
                  'Błąd walidacji pliku z metadanymi.'@
                  +' '+'Szczegóły w pliku %1.'@ [pth_dir(_log)+exec('sep','#file',1)+_log]
            ?};
            no_msg(_nm);
            _hxml.fclose()
         ?};
         _hxsd.fclose()
      ?}
   ?}
?};
ZAOMEDA.cntx_pop();
_ret


\zaomeda_show
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła prezentuje metadane dla wskazanego rekordu.
::       Uwaga: poprawność parametru nie jest weryfikowana.
::   WE: _a [STRING] - Rekord-właściciel metadanych (uidref).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZAOMEDA.cntx_psh();
ZAOMEDA.index('NAG');
ZAOMEDA.prefix(_a,);
{? ZAOMEDA.first()
|| ZAOMEDA.win_edit('RED');
:: Aby przycisk "zmianY" był dostępny, to okno musi być redagowalne.
   ZAOMEDA.display()
|| FUN.info('Brak metadanych.'@)
?};
ZAOMEDA.cntx_pop();
~~


\zaomeda_zmiany_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Zmiany" z okna redagowania tabeli ZAOMEDA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zmiany','#syslog',ZAOMEDA);
''


\zal_pobh_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Wyświetla okno z historią pobrań.
::   WE: [_a] - [REFERENCE] - wskazanie na ZALACZ lub aktualnie ustawiony rekord.
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null()) || _a || ZALACZ.ref() ?};
ZALACZ.cntx_psh();
{? _ref=ZALACZ.ref()
|| ZALACZ.get()
|| ZALACZ.prefix();
   ZALACZ.seek(_ref)
?};
ZAL_POBH.cntx_psh();
ZAL_POBH.index('ZDG');
ZAL_POBH.prefix(_ref);
ZAL_POBH.win_sel('WER');
ZAL_POBH.hdr_sel(' '+ZALACZ.ZAL_NAME+{? ZALACZ.LOK<>'' || ' ['+ZALACZ.LOK+']' || '' ?});
ZAL_POBH.select();
ZAL_POBH.cntx_pop();
ZALACZ.cntx_pop();
~~


\show_zalacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła do obsługi załączników.
::   WE: [_a] [STRING]  - Akronim tabeli wartości kluczowej - poziom załączników: 'P' lub 'OSOBA' [domyślnie: 'OSOBA'].
::        _b  [STRING]  - Miejsce wywołania - akronim tabeli, dla rekordów której będą tworzone załączniki.
::       [_c] [INTEGER] - Tryb modyfikacji załączników:
::             0 - Nie [domyślnie];
::             1 - Tak.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dom:={? var_pres('_a')=type_of('') || gsub(_a,'@.','') || 'OSOBA' ?};
{? _dom<>'P' & _dom<>'OSOBA'
|| return(0)
?};
{? var_pres('_b')=type_of('') & _b<>''
|| _msc:=_b
|| return(0)
?};
_modify:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_tzalacz:=exec('tzalacz_create','zalacz');
params_set('tzalacz',_tzalacz);
_tzalacz.dom:=_dom;
_tzalacz.msc:=_msc;
_tzalacz.tryb:={? _tzalacz.lic_PED || 'D' || 'Z' ?};
exec('tzalacz_win_edit','zalacz');
_tzalacz.ZALACZ.ws:=exec('tzalacz_mk_sel','zalacz',_modify);
exec('tzalacz_fill','zalacz');
_tzalacz.ZALACZ.TAB.win_sel(_tzalacz.ZALACZ.ws);
_tzalacz.ZALACZ.TAB.select();

1


\compare
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła porównuje załączniki związane z dwoma rekordami.
::   WE: _a [STRING]  - Identyfikator I-szego rekordu (uidref).
::       _b [STRING]  - Identyfikator II-go rekordu (uidref).
::       _c [INTEGER] - Czy wynik rozszerzony?
::             0 - Nie, wynik uproszczony [domyślnie]:
::                0 - Załącznik są różne;
::                1 - Załączniki są identyczne.
::             1 - Tak, wynik rozszerzony - tablica nazwana o strukturze:
::                ret - Wynik porównania;
::                TAB - Tabela tymczasowa ze wszystkimi załącznikami obu rekordów.
::   WY: Wynik określony argumentem _c.
::  OLD: \compare/zao.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('ret','TAB');
_ret.ret:=0;
_ret.TAB:=tab_tmp(12,
   'ZAL_NAME','STRING[64]','Nazwa pliku'@,
   'MOD_DATE','DATE','Data modyfikacji'@,
   'MOD_TIME','TIME','Czas modyfikacji'@,
   'SIZE','INTEGER','Rozmiar'@,
   'HASH','STRING[40]','Skrót'@,
   'DATA','DATE','Data'@,
   'LOK','STRING[150]','Opis załącznika'@,
   'TYP_ZALK','STRING[16]','Typ załącznika - kod'@,
   'TYP_ZALO','STRING[150]','Typ załącznika - opis'@,
   'WWWE','STRING[1]','WWW - Pracownik'@,
   'WWWS','STRING[1]','WWW - Przełożony'@,
   'STK','INTEGER','Status - kod'@,
   'STO','STRING[10]','Status - opis'@,
   'Z1','STRING[16]','Z1',
   'Z2','STRING[16]','Z2'
);

_typ:=var_pres('_c')=type_of(0) & _c;
{? var_pres('_a')<>type_of('') | +_a<>48 |
   var_pres('_b')<>type_of('') | +_b<>48
|| {? _typ
   || return(_ret)
   || return(_ret.ret)
   ?}
?};

_nag:=obj_new(2);
_nag[1]:=_a;
_nag[2]:=_b;

SLO_NAZ.cntx_psh();
SLO_NAZ.prefix();
ZALACZ.cntx_psh();
ZALACZ.index('NAG');
{! _lp:=1 .. 2
|! ZALACZ.prefix(_nag[_lp]);
   _again:=ZALACZ.first();
   {!
   |? _again
   |! _zal_name:=ZALACZ.ZAL_NAME;
      _mod_date:=ZALACZ.bl_info('ZAL','MODIFY_DATE');
      _mod_time:=ZALACZ.bl_info('ZAL','MODIFY_TIME');
      _size:=ZALACZ.SIZE;
      _hash:=ZALACZ.HASH;
      _data:=ZALACZ.DATA;
      _lok:=ZALACZ.LOK;
      _typ_zalk:=$ZALACZ.TYP_ZAL;
      _typ_zalo:=ZALACZ.TYP_ZAL().NAZWA;
      _wwwe:=ZALACZ.WWWE;
      _wwws:=ZALACZ.WWWS;

      {? _lp=1 |
::       ^ W pierwszym przebiegu dodajemy wszystkie załączniki.
::       v W drugim przebiegu szukamy identycznego z pierwszego przebiegu, a więc z STK=1 (ostatnie pole w indeksie).
::         To umożliwia obsługę sytuacji, w której załącznik został dodany kilka razy.
         ~_ret.TAB.find_key(_zal_name,_mod_date,_mod_time,_size,_hash,_data,_lok,_typ_zalk,_typ_zalo,_wwwe,_wwws,1)
      || _ret.TAB.blank();
         _ret.TAB.ZAL_NAME:=_zal_name;
         _ret.TAB.MOD_DATE:=_mod_date;
         _ret.TAB.MOD_TIME:=_mod_time;
         _ret.TAB.SIZE:=_size;
         _ret.TAB.HASH:=_hash;
         _ret.TAB.DATA:=_data;
         _ret.TAB.LOK:=_lok;
         _ret.TAB.TYP_ZALK:=_typ_zalk;
         _ret.TAB.TYP_ZALO:=_typ_zalo;
         _ret.TAB.WWWE:=_wwwe;
         _ret.TAB.WWWS:=_wwws;
         _ret.TAB.add()
      ?};
      _ret.TAB.STK+=_lp;
      _ret.TAB.STO:=
         {? _ret.TAB.STK=1
         || 'Usunięty'@
         |? _ret.TAB.STK=2
         || 'Dołączony'@
         |? _ret.TAB.STK=3
         || 'Bez zmian'@
         || '???'
         ?};
      ($('_a.Z'+$_lp+':=_b'))(_ret.TAB,$ZALACZ.ref());
      _ret.TAB.put();

      _again:=ZALACZ.next()
   !}
!};
ZALACZ.cntx_pop();
SLO_NAZ.cntx_pop();

_ret.ret:=1;
_again:=_ret.TAB.first();
{!
|? _ret.ret & _again
|! {? _ret.TAB.STK<>3
   || _ret.ret:=0
   || _again:=_ret.TAB.next()
   ?}
!};

{? _typ
|| _ret
|| _ret.ret
?}


\sync
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za synchronizację załączników dla dwóch rekordów-właścicieli.
::   WE: _a [STRING]  - Identyfikator I-szego rekordu (uidref).
::       _b [STRING]  - Identyfikator II-go rekordu (uidref).
::       _c [INTEGER] - Kierunek synchronizacji:
::             1 - Rekordem wzorcowym jest ten wskazany w _a.
::             2 - Rekordem wzorcowym jest ten wskazany w _b.
::            Synchronizacja ma doprowadzić do tego aby załączniki dla rekordu nie-wzorcowego były takie same jak
::            załączniki dla rekordu wzorcowego.
::   WY: 1 - Synchronizacja powiodła się.
::       0 - Synchronizacja nie powiodła się (być może przez błędy wywołania).
::  OLD: \sync/zao.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | +_a<>48 |
   var_pres('_b')<>type_of('') | +_b<>48 |
   var_pres('_c')<>type_of(0) | _c<1 | _c>2
|| return(0)
?};
_nag:=obj_new(2);
_nag[1]:=_a;
_nag[2]:=_b;

_cmp:=exec('compare','zalacz',_nag[1],_nag[2],1);
{? _cmp.ret
:  Załączniki są takie same - nie ma co synchronizować.
|| return(1)
?};

_master:=_c;
_slave:=3-_master;

_err:=0;
ZALACZ.cntx_psh();
ZALACZ.clear();
_again:=_cmp.TAB.first();
{!
|? _again
|! {? _cmp.TAB.STK=_master
:     Załącznik tylko przy rekordzie wzorcowym. Taki sam trzeba utworzyć przy rekordzie nie-wzorcowym.
   || {? ZALACZ.seek(($('_a.Z'+$_master))(_cmp.TAB))
      || ZALACZ.NAG:=_nag[_slave];
         ZALACZ.add()
      || _err+=1
      ?}
   |? _cmp.TAB.STK=_slave
:     Załącznik tylko przy rekordzie nie-wzorcowym, a więc zbędny - usuwamy.
   || {? ZALACZ.seek(($('_a.Z'+$_slave))(_cmp.TAB))
      || ZALACZ.del()
      || _err+=1
      ?}
   ?};
   _again:=_cmp.TAB.next()
!};
ZALACZ.cntx_pop();
_err=0


\zalacz_prefix_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustawia prefiks tabeli ZALACZ do pracy w środowisku webTerma.
::       Do formuły powinien być przekazany jeden z parametrów.
::       Uwaga: poprawność parametru nie jest sprawdzana.
::   WE: [_a] [STRING]    - Identyfikator okna z rekordem właścicielem.
::       [_b] [REFERENCE] - Wskazanie osoby.
::   WY:
::  OLD: \zalacz_prefix_web/zao.fml
::----------------------------------------------------------------------------------------------------------------------
  _web_win:={? var_pres('_a')=type_of('')     || _a || ''     ?};
_osoba_ref:={? var_pres('_b')=type_of(null()) || _b || null() ?};

:: Jeśli brak przekazanych parametrów to wracamy.
{? _web_win='' & _osoba_ref=null()
|| return(~~)
?};

_rodzaj:=exec('p_web_cx_get_rodzaj','pkw');
_firma:=exec('ref_firma','ustawienia');

:: Najpierw blokujemy wyświetlanie załączników, żeby nie pokazać czegoś, co nie powinno być widoczne.
ZALACZ.index('NAG');
ZALACZ.prefix('X',);

{? _osoba_ref
:: Prezentacja załączników osoby.
|| {? _rodzaj='W'
   || ZALACZ.index('EOS');
      ZALACZ.prefix('T','T',_osoba_ref,_firma)
   |? _rodzaj='P'
   || ZALACZ.index('SOS');
      ZALACZ.prefix('T','T',_osoba_ref,_firma)
   ?}

:: Prezentacja załączników związanych z bieżącym rekordem-właścicielem.
|| _ref:=web_win_ref(_web_win);
   {? type_of(_ref)=type_of(null()) & _ref<>null()
   || _TAB:=ref_tab(_ref);
      {? _TAB.seek(_ref)
      || _uid:=_TAB.uidref();
         {? _rodzaj='W'
         || ZALACZ.index('ENAG');
            ZALACZ.prefix('T','T',_uid,_firma)
         |? _rodzaj='P'
         || ZALACZ.index('SNAG');
            ZALACZ.prefix('T','T',_uid,_firma)
         ?}
      ?}
   ?}
?};
ZALACZ.first();
~~


\zalacz_pobierz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Pobierz" z okna WEB_WER tabeli ZALACZ.
::   WE:
::   WY:
::  OLD: \zalacz_pobierz_a/zao.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('exist','#record') || return(~~) ?};

_after_choice:="
:: _a=0 dla Tak
   _answer:={? _a=-1
            || ''
            |? _a=0
            || 'T'
            |? _a=1
            || 'N'
            || return(0)
            ?};
   {? _a>=0
   || ZALACZ.web_cntx_load(1)
   ?};
   exec('set_env','pkw_por');
   _result:=exec('saveAnswer','zal_kom',ZALACZ.ref(),_answer);
   {? _result=''
   || ZALACZ.web_bl_download('ZAL')
   || web_msg(_result,'Informacja'@)
   ?}
";

{? exec('isReq','zal_kom',ZALACZ.ref())
|| ZAL_KOM.cntx_psh();
   ZAL_KOM.index('TYP');
   ZAL_KOM.prefix(ZALACZ.TYP_ZAL);
   {? ZAL_KOM.first()
   || _komm:=exec('get_TEXT','zal_kom',ZAL_KOM.ref());
      ZALACZ.web_cntx_save(1);
      web_choice(_after_choice,_komm,'Potwierdzenie pobrania załącznika'@,'ASK',
                 0,3,'Akceptuję'@,'Nie akceptuję'@,'Anuluj'@)
   ?};
   ZAL_KOM.cntx_pop()
|| _after_choice(-1)
?};
~~


\zalacz_hist_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Obsługa akcji "Historia pobrań" z okna WEB_WER tabeli ZALACZ.
::   WE:
::   WY:
::  OLD: \zalacz_hist_a/zao.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('exist','#record') || return(~~) ?};

ZAL_POBH.index('ZDG');
ZAL_POBH.prefix(ZALACZ.ref());
ZAL_POBH.web_select('WEB_WER');
~~


\zal_kom_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli ZAL_KOM.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('por_zalacz4zal_kom','zalacz',ZAL_KOM.TYP_ZAL);
~~


\zal_kom_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli ZAL_KOM.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('por_zalacz4zal_kom','zalacz',ZAL_KOM.TYP_ZAL);
~~


\zal_kom_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli ZAL_KOM.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('por_zalacz4zal_kom','zalacz',bfld('TYP_ZAL'));
~~


\por_zalacz4zal_kom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła
::   WE: _a [REFERENCE] - Wskazanie typu załącznika.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=SLO_NAZ
|| _typ_zal:=_a
|| return()
?};

{? exec('lic','#b_domain','POR')
|| ZALACZ.cntx_psh();
   ZALACZ.index('S2');
   ZALACZ.prefix(_a);
   {? ZALACZ.first()
   || ZALACZ.trig_off('*','*');
      {!
      |? ZALACZ.put(,1);
         ZALACZ.next()
      !};
      ZALACZ.trig_on('*','*')
   ?};
   ZALACZ.cntx_pop()
?};

~~


\zaoh_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Wybór elementu struktury.
::   WE:
::   WY: wskazanie wybranego elementu lub null
::----------------------------------------------------------------------------------------------------------------------
_wnd:=ZAOH.mk_sel('Wybór elementu'@,'P',0,'#zaoh_sel',,,,1,,,,,,'normal');
ZAOH.win_fld(_wnd,,'NAZWA',,,,,,,,MS.comment(ZAOH,'NAZWA'));
ZAOH.win_act(_wnd,,'Formuła','Wybierz'@@,,,"sel_exit()",,1);
ZAOH.win_act(_wnd,,'Szukaj');

:: wartość zwracana
_ref:=null;

ZAOH.cntx_psh();
ZAOH.win_sel(_wnd);
:: ustal odcięcie
_root:=#ZAOH.ref();
{!
|? ZAOH.seek(ZAOH.ZAOH,,1)
|! _root:=#ZAOH.ref()
!};
ZAOH.tr_root(_wnd,,0,_root);

:: wybór
{? ZAOH.select()
|| _ref:=ZAOH.ref()
?};

:: porządki
ZAOH.cntx_pop();
ZAOH.win_del(_wnd);

_ref


\zaoh_przesun_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Przed "Przesuń > Do wybranego".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
_SEL:=ZAOH.sel_aget();
ZAOH.sel_adel();
{? ~_SEL.first()
:: wykonaj dla bieżącego
|| _SEL.REF:=#ZAOH.ref();
   _SEL.CRC:=ZAOH.crc();
   _SEL.add()
?};

:: wybierz rekord docelowy
{? (_ref:=exec('zaoh_wybierz','zalacz'))=null
:: zrezygnowano z przeniesienia
|| return(0)
?};

exec('zaoh_dnd','zalacz',_SEL,_ref,cur_tab(1,1).name());
0

:Sign Version 2.0 jowisz:1045 2024/02/26 10:22:29 d58a729ac1291749631361f1dc0ce509c6b6b45fad9b22696cfb44b475737e2768e15b495b8bd998b8f3d0f57cf801d8fa883ae79672e50ea86a1f1e5c30e16bdeeaeafcf284cc6229d54dc026d52506135b98052602100b80bbc14d6cd9d43c4a650e132e738c7bb32fe26807fdb6f8479236f400e60922e0638844410dfe7e
