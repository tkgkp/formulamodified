:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_sync_pd.fml
:: Utworzony: 18.02.2019
:: Autor: Markus
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi sync_pd przez MacroWebAPI
::======================================================================================================================


\serialize_syncPd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji rekordów z tabeli SYNC_PD.
::   WE: _a - FILE - obiekt plikowy przeznaczony do zapisu wynikowego JSONa
::   WY: 0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

_data:="
   SYNC_PD.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'REFERENCE',,'SYM',,'RODZAJ',
   );
   ''
";
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('resp',_resp);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);

_resp


\read_syncPd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje wszystkie rekordy tabeli SYNC_PD.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

SYNC_PD.cntx_psh();
SYNC_PD.prefix();
_result:=exec('serialize_syncPd','mwa_sync_pd',_par);
SYNC_PD.cntx_pop();
_result


\read_syncPd_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje rekord tabeli SYNC_PD wg refa.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_ref:=exec('get_option','mwapi',_par,'Ref').value;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

SYNC_PD.cntx_psh();
SYNC_PD.clear();
{? type_of(ref_tab(_ref))>0 & SYNC_PD.seek(_ref)
|| SYNC_PD.index('SYM');
   SYNC_PD.prefix(SYNC_PD.SYM);
   _result:=exec('serialize_syncPd','mwa_sync_pd',_par)
||
   _wsenv.add_error('Nie znaleziono przeznaczenia danych %1.'@[_ref])
?};
SYNC_PD.cntx_pop();

{? _wsenv.has_errors()
|| _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result


\prolog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła startowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('prolog','mwapi',_par);
~~


\epilog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Fomuła końcowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
exec('epilog','mwapi');
~~

:Sign Version 2.0 jowisz:1028 2019/06/07 15:59:55 20f922de91d527393f6c7fdf48c6c879a136191190f0ba764540eabb27eafd848aa6466d2a611df0a09e7d48269fdd9897c442af65a913c4c1078a2756a6b7904506d950c3ca780494d55daeb8498e1f4d2017862810e039678ddac693ad7a4ad7acc868dd72c4c1e745ad8040d952b972cbfbeb87abd38d8d064656f53d5974
