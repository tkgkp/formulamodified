:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_wnu.fml [12.51]
:: Utworzony: 2019/03/14
:: Autor: jaws
:: Systemy: PPK
::======================================================================================================================
:: Zawartość: Formuły odpowiedzialne za obsługę kartoteki deklaracji i wniosków PPK.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed modyfikacją (dołączenie/poprawienie) wiersza tabeli PPK_WNU.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: wstępna obsługa deklaracji/wniosków osób wymagających dedykowanego kodu
{? PPK_WNU.PPK_UCZ=null & (PPK_WNU.PPK_WRD().WER_WYM='N' | PPK_WNU.WER_STAT='T')
|| {? PPK_WNU.PPK_WRD().SYMBOL='WOU' | PPK_WRD.SYMBOL='AWW'
::    wniosek o uczestnictwo
   || _org:=KST_PPK.PPK_UMO;
      _umo:=exec('init','ppk_umo',PPK_WNU.OD);
      KST_PPK.PPK_UMO:=_org;
      KST_PPK.PPK_UMO();
      {? _umo=null
      || return(0)
      || PPK_UCZ.cntx_psh();
         PPK_UCZ.index('UNIQUE');
         PPK_UCZ.prefix(_umo);
         {? ~PPK_UCZ.find_key(PPK_WNU.OSOBA)
         || PPK_UCZ.blank();
            PPK_UCZ.PPK_UMO:=_umo;
            PPK_UCZ.FIRMA:=exec('firma','ustawienia');
            PPK_UCZ.OSOBA:=PPK_WNU.OSOBA;
            PPK_UCZ.OD:=PPK_WNU.OD;
            PPK_UCZ.SR:='W';
            {? PPK_UCZ.add()
            || PPK_WNU.PPK_UCZ:=PPK_UCZ.ref()
            || PPK_UCZ.cntx_pop();
               return(0)
            ?}
         ?};
         PPK_UCZ.cntx_pop()
      ?}
   ?}
?};

1


\_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

{? PPK_WNU.PPK_UCZ<>null
|| PPK_WNU.FIRMA:=PPK_WNU.PPK_UCZ().FIRMA;
   PPK_WNU.OSOBA:=PPK_WNU.PPK_UCZ().OSOBA;
   PPK_WNU.PPK_UMO:=PPK_WNU.PPK_UCZ().PPK_UMO
?};

__CHK.validate(PPK_WNU,
   "_a.field(_b,'OSOBA')",
   $("_a.table(_b,"+$_mode+",,'TYP','OSOBA','PPK_WRD','DATA','OD')"),
   "  _zd:=date(0,0,0);
      _b.PPK_UCZ().PPK_UMO();
      {? _b.OD<_b.DATA
      || __CHK.err_fld(_b,'OD',1,'Wprowadzono niespójne daty.'@)

      |? _b.PPK_UCZ & ~exec('zakr_ucz','ppk_wnu',_b.DATA,_b.OD,_b.PPK_UCZ)
      || __CHK.err_fld(_b,'DATA',1,
            'Data złożenia wniosku oraz data, od której ma mieć on zastosowanie\n'+
            'muszą zawierać się w okresie uczestnictwa osoby w planie kapitałowym.'@
         )
      || 1
      ?}
   "
)


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "przed dołącz" tabeli PPK_WNU.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_wnu') & exec('_chk','ppk_wnu',0)


\_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po dołącz" tabeli PPK_WNU.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? PPK_WNU.PPK_UCZ=null
:: wniosek osoby
|| return()
?};

{? PPK_WNU.WER_WYM='T' | PPK_WNU.PWP_STAT='N'
:: aktualizuj liczbę nieobsłużonych wniosków
|| exec('akt_ucz','ppk_wnu',PPK_WNU.PPK_UCZ)
?};
~~


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "przed popraw" tabeli PPK_WNU.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_wnu') & exec('_chk','ppk_wnu',1)


\_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po popraw" tabeli PPK_WNU.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? ~exec('_update','ppk_zal',bfld('UID'),PPK_WNU.UID)
:: aktualizuj powiązania załączników
|| undo()
?};

:: ewidencja deklarowanych wpłat
{? PPK_WNU.PWP_STAT<>bfld('PWP_STAT')
|| {? PPK_WNU.PWP_STAT='N'
::    usuń wpłaty z ewidencji
   || {? ~exec('pwp_usu','ppk_wnu',PPK_WNU.ref())
      || undo();
         return()
      ?}
   || {? ~exec('pwp_dod','ppk_wnu',PPK_WNU.ref())
      || undo();
         return()
      ?}
   ?}
?};

:: aktualizuj redundantne informacje
exec('akt_ucz','ppk_wnu',PPK_WNU.PPK_UCZ);
~~


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli PPK_WNU.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
{? PPK_WNU.PPK_RDA<>null()
|| undo('Zapis wykorzystywany w raportach wysyłanych do instytucji finansowej. Usunięcie nie jest możliwe.'@);
   return(0)
?};
exec('del_ndx','#table',PPK_WPW,'UNIQUE',PPK_WNU.ref()) &
exec('del_ndx','#table',PPK_WIF,'UNIQUE',PPK_WNU.ref()) &
exec('set_null','#table',PPK_WIF,'WNU_BLT',PPK_WNU.ref())


\_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po usuń" tabeli PPK_WNU.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

exec('akt_ucz','ppk_wnu',bfld('PPK_UCZ'));

{? ~exec('_remove','ppk_zal',bfld('UID'))
|| undo()
?};
~~


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wskazanie aktualnej deklaracji/wniosku.
::   WE:
::   WY: Wskazanie wiersza tabeli PPK_WNU
::----------------------------------------------------------------------------------------------------------------------
PPK_WNU.ref()


\akt_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Aktualizuje informacje redundantne w tabeli PPK_UCZ.
::   WE: _a _PPK_UCZ - wskazanie uczestnika planu
::   WY: wynik operacji put dla tabeli PPK_UCZ lub 1 jeśli aktualizacja nie była wymagana
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;

_ret:=0;
PPK_UCZ.cntx_psh();
PPK_UCZ.prefix();
{? PPK_UCZ.seek(_ref)
|| _wer:=PPK_UCZ.WNU_WER;
   _new:=PPK_UCZ.WNU_NEW;
   PPK_UCZ.WNU_WER:=0;
   PPK_UCZ.WNU_NEW:=0;
   PPK_WNU.cntx_psh();
   PPK_WNU.index('UCZ_OD');
   PPK_WNU.prefix(_ref);
   _loop:=PPK_WNU.first();
   {!
   |? _loop
   |! PPK_UCZ.WNU_WER+=(PPK_WNU.WER_WYM='T');
      PPK_UCZ.WNU_NEW+=(PPK_WNU.PWP_STAT='N');
      _loop:=PPK_WNU.next()
   !};
   PPK_WNU.cntx_pop();
   {? PPK_UCZ.WNU_WER<>_wer | PPK_UCZ.WNU_NEW<>_new
   || _ret:=PPK_UCZ.put()
   || _ret:=1
   ?}
?};
PPK_UCZ.cntx_pop();
_ret


\wrd_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji pola PPK_WRD tabeli PPK_WNU.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? PPK_WNU.PPK_WRD().WER_WYM='T'
|| {? PPK_WNU.WER_DATA=date(0,0,0)
   || PPK_WNU.WER_WYM:='T'
   ?}
|| PPK_WNU.WER_DATA:=date(0,0,0);
   PPK_WNU.WER_WYM:='';
   PPK_WNU.WER_STAT:='';
   PPK_WNU.WER_KTO:=''
?};
1


\w_st_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji pola WER_STAT tabeli PPK_WNU.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? PPK_WNU.WER_STAT=''
|| PPK_WNU.WER_DATA:=date(0,0,0);
   PPK_WNU.WER_WYM:='T';
   PPK_WNU.WER_KTO:='';
   PPK_WNU.PWP_STAT:='N'
|| PPK_WNU.WER_DATA:=date();
   PPK_WNU.WER_WYM:='N';
   PPK_WNU.WER_KTO:=userdata()
?};
1


\wer_wym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Sprawdza, czy weryfikacja wniosku jest możliwa.
::   WE:
::   WY: 0/1 - nie podlega weryfikacji/weryfikacja jest możliwa
::----------------------------------------------------------------------------------------------------------------------
PPK_WNU.PPK_WRD().WER_WYM='T'


\dod_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Dołącz" okienek tabeli PPK_WNU.
::   WE:
::   WY: 0/1 - nie można dołączyć zapisu/zapis może być dołączony
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab()=PPK_UCZ
:: dodawanie z listy uczestników
|| {? exec('nie_akt','ppk_ucz')
   || return(0)
   ?}
?};

PPK_WNU.blank();
PPK_WNU.memo_set('','WER_INFO');
PPK_WNU.memo_set('','PWP_INFO');
PPK_WNU.REJ_DATA:=date();
PPK_WNU.REJ_TRYB:='T';
PPK_WNU.REJ_KTO:=OPERATOR.USER().DANE;
_quit:=_done:=0;
{!
|? _quit=0
|! {? PPK_WNU.edit("exec('rek_a','ppk_wnu',0)")
   || _symbol:=PPK_WNU.PPK_WRD().SYMBOL;
      {? (_symbol='DWT' | _symbol='DWWT') & PPK_WNU.add()
::       Deklaracja wstrzymania wypłaty transferowej
::       Deklaracja wypłaty transferowej
      || exec('tre_a','ppk_wnu');
::       Utworzenie komunikatu:
         {? _symbol='DWT'
         || exec('zap_kom','ppk_kom',PPK_WNU.REJ_DATA,'U','IDWT')
         ?};
         _quit:=_done:=1

      |? _symbol='DWP'
::       Deklaracja wypłaty transferowej - zmiana zarządzającego
      || _popUmo:=exec('pop_umo','ppk_rpl',PPK_WNU.PPK_UMO,PPK_WNU.OSOBA);
         {? +_popUmo.BLAD
         || FUN.error('Nie można dodać wpisu. %1'@[_popUmo.BLAD]);
            obj_del(_popUmo);
            return(0)
         || {? PPK_WNU.add()
            || PPK_WIF.cntx_psh();
               PPK_WIF.prefix();
               PPK_WIF.blank(1);
               PPK_WIF.PPK_WNU:=PPK_WNU.ref();
               PPK_WIF.PPK_UCZ:=PPK_WNU.PPK_UCZ;
               PPK_WIF.ADRES:=_popUmo.PZIF_ADRES;
               PPK_WIF.BLOKADA:='N';
               PPK_WIF.NR_RACH:=_popUmo.UCZ_NR_RACH;
               {? ~PPK_WIF.add(1)
               || PPK_WNU.del(1);
                  FUN.error('Nie można dodać wpisu. Nie udało się dodać PPK_WIF.'@);
                  PPK_WIF.cntx_pop();
                  obj_del(_popUmo);
                  return(0)
               ?};
               PPK_WIF.cntx_pop()
            ?}
         ?};
         obj_del(_popUmo);
::       Utworzenie komunikatu:
         exec('zap_kom','ppk_kom',PPK_WNU.REJ_DATA,'U','IDWP');
         _quit:=_done:=1

      |? (_symbol='WB25B' | _symbol='WB25W' | _symbol='DOWU25') & PPK_WNU.add()
::       Blokada, wznowienie lub dobrowolne opłacanie wpłat na podstawie art. 25
      || _quit:=_done:=1

      || _ext:=0;
         _chk:="";
         _gen:="
            _min:=form(_c,,2,'9.');
            _max:=form(_d,,2,'9.');
            _msg:='Wartość \"%1\" musi być z zakresu od %2 do %3.'@[_b,_min,_max];
            '{? DEFINE.%1<%2 | DEFINE.%1>%3'
            '|| FUN.emsg(\\\'%4\\\');'
            '   return(0)'
            '?};'[_a,_min,_max,_msg]
         ";
         undefine();
         def_btn('text=%1,icon=xwin16.png:13'['OK'@],'key:F2');
         def_btn('text=%1,icon=xwin16.png:14'['Anuluj'@],'key:Esc');
         KST_PPK.cntx_psh();
         exec('czytaj','#stalesys',PPK_WNU.OD,KST_PPK);
         PPK_WST.cntx_psh();
         PPK_WST.index('RN');
         PPK_WST.prefix(PPK_WNU.PPK_WRD);
         _loop:=PPK_WST.first();
         {!
         |? _loop
         |! {? PPK_WST.BLOKADA<>'T' & PPK_WST.ZMIANA='T'
            || _rn:=PPK_WST.R().RN;
               _kw:='KW'+$_rn;
               define(_kw,0,R.RT,,6,6,2);
               {? _rn=__RUB.sys_kod(710,PPK_WNU.OD,1)
               || _chk+=_gen(_kw,R.RT,0,KST_PPK.SK_PF)

               |? _rn=__RUB.sys_kod(711,PPK_WNU.OD,1)
               || _chk+=_gen(_kw,R.RT,0,KST_PPK.SK_MAXDF)

               |? _rn=__RUB.sys_kod(712,PPK_WNU.OD,1)
               || _chk+=_gen(_kw,R.RT,KST_PPK.SK_MINPU,KST_PPK.SK_MAXPU)

               |? _rn=__RUB.sys_kod(713,PPK_WNU.OD,1)
               || _chk+=_gen(_kw,R.RT,0,KST_PPK.SK_MAXDU)
               ?};
               _ext+=1
            ?};
            _loop:=PPK_WST.next()
         !};
         _chk+="1";
         {? _ext=0 | def_edit($_chk,PPK_WNU.PPK_WRD().OPIS)
         || _quit:=_done:=1;
            {? PPK_WNU.add() & PPK_WNU.memo_put(,'WER_INFO')
            || PPK_WPW.cntx_psh();
               PPK_WPW.clear();
               _loop:=PPK_WST.first();
               {!
               |? _loop
               |! PPK_WPW.blank(1);
                  PPK_WPW.PPK_WNU:=PPK_WNU.ref();
                  PPK_WPW.R:=PPK_WST.R;
                  PPK_WPW.BLOKADA:=PPK_WST.BLOKADA;
                  PPK_WPW.ZMIANA:=PPK_WST.ZMIANA;
                  _acr:='KW'+$PPK_WST.R().RN;
                  {? var_pres(_acr,@.DEFINE)>0
                  || PPK_WPW.STAWKA:=($('DEFINE.'+_acr))()
                  ?};
                  _dodaj:=1;
                  {? _symbol='WOU'
                  || {? PPK_WPW.R().RN=__RUB.sys_kod(711,PPK_WNU.OD,1) & KST_PPK.SK_DOMDF=0
::                      nie twórz dla zerowej (w stałych systemu) wpłaty dodatkowej pracodawcy
                     || _dodaj:=0
                     ?}
                  |? _symbol='WODW' | _symbol='AWW'
                  || _val:=exec('pprz_wpl','ppk_wnu',PPK_WNU.PPK_UCZ,PPK_WNU.PPK_UCZ().OSOBA,PPK_WNU.OD,
                                PPK_WPW.R().RN,'DRZW');
                     {? type_of(_val)>100
                     || PPK_WPW.BLOKADA:=_val.BLOKADA;
                        PPK_WPW.ZMIANA:=_val.ZMIANA;
                        PPK_WPW.STAWKA:=_val.STAWKA;
                        obj_del(_val)
                     |? _symbol='AWW'
                     || {? PPK_WPW.R().RN=__RUB.sys_kod(711,PPK_WNU.OD,1) & KST_PPK.SK_DOMDF=0
::                      nie twórz dla zerowej (w stałych systemu) wpłaty dodatkowej pracodawcy
                        || _dodaj:=0
                        ?}
                     || _dodaj:=0
                     ?}
                  ?};
                  {? _dodaj<>0
                  || PPK_WPW.add()
                  ?};
                  _loop:=PPK_WST.next()
               !};
               PPK_WPW.cntx_pop();

               {? _symbol='WOU' & PPK_WNU.PPK_UCZ
::                Komunikat informacja dla nowego uczestnika.
               || exec('zap_kom','ppk_kom',PPK_WNU.OD,'U','IUCZ')
               ?}
            ?}
         ?};
         PPK_WST.cntx_pop();
         KST_PPK.cntx_pop();
         undefine()
      ?}
   || _quit:=1
   ?}
!};

:: porządki
undefine();

_done


\dod_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po akcji "Dołącz" okienek tabeli PPK_WNU.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pwp_akt','ppk_wnu');
exec('akc_a','ppk_wnu');
_fa:=PPK_WNU.f_active();
{? _fa<>0
|| _ref:=PPK_WNU.ref();
   PPK_WNU.f_rfresh();
   {? _fa=3 & PPK_WNU.f_test()=0
   || return()
   ?};
   {? ~PPK_WNU.f_seek(_ref)
   || FUN.info('Zarejestrowany wniosek można odnaleźć w widoku wniosków uczestników.'@)
   ?}
?}


\pwp_akt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Aktualizacja ewidencji na podstawie deklaracji.
::   WE: _a [INTEGER] - wyłączenie komunikatów, jeśli <>0
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
_emsg:={? var_pres('_a')<>type_of(0) | _a=0 || "FUN.emsg(_a)" || "" ?};

{? PPK_WNU.PPK_WRD().WER_WYM='T' & PPK_WNU.WER_STAT=''
|| _txt:='Wniosek wymaga weryfikacji.'@;
   _emsg(_txt);
   return(_txt)
?};

_txt:='';
{? PPK_WNU.PPK_WRD().WER_WYM<>'T' | PPK_WNU.WER_STAT='T'
|| PPK_WNU.PWP_DATA:=date();
   PPK_WNU.PWP_STAT:='T';
   PPK_WNU.PWP_KTO:=userdata();
   {? ~PPK_WNU.put()
   || {? exec('ewi_dup','ppk_wnu',PPK_WNU.ref())
      || _txt:='Wykryto próbę powielenia informacji o procentach wpłat.'@
      || _txt:='Wniosek nie został uwzględniony w ewidencji.'@
      ?};
      _emsg(_txt)
   ?}
?};
_txt


\pwp_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Dodaje deklarowane wpłaty do ewidencji.
::   WE: _a _PPK_WNU - wskazanie wiersza tabeli PPK_WNU
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_wnu:=_a;

_err:=0;
_fir:=exec('firma','ustawienia');

:: obsługa "własnej" transakcji
_my_trn:=0;
{? do_state()=0
|| _my_trn:=1;
   do()
|? do_state()<>1
|| return(0)
?};

PPK_PNW.cntx_psh();
PPK_PNW.index('PPK_WNU');
PPK_PNW.prefix(_wnu);

PPK_PWP.cntx_psh();
PPK_PWP.index('RNOD');

PPK_WPW.cntx_psh();
PPK_WPW.index('RN');
PPK_WPW.prefix(_wnu);
_loop:=PPK_WPW.first();
{!
|? _loop & ~_err
|! PPK_PWP.prefix(_fir,$PPK_WNU.OSOBA,PPK_WPW.R().RN);
   {? ~PPK_PWP.find_ge(PPK_WNU.OD)
   || PPK_PWP.blank(1);
      PPK_PWP.FIRMA:=_fir;
      PPK_PWP.OSOBA:=PPK_WNU.OSOBA;
      PPK_PWP.P:=null;
      PPK_PWP.ZC:=null;
      PPK_PWP.REF:=$PPK_WNU.OSOBA;
      PPK_PWP.OD:=PPK_WNU.OD;
      PPK_PWP.R:=PPK_WPW.R;
      PPK_PWP.BLOKADA:=PPK_WPW.BLOKADA;
      PPK_PWP.ZMIANA:=PPK_WPW.ZMIANA;
      PPK_PWP.STAWKA:=PPK_WPW.STAWKA;
      PPK_PWP.SR:='W';
      {? PPK_PWP.add()
      || PPK_PNW.blank(1);
         PPK_PNW.PPK_WPW:=PPK_WPW.ref();
         PPK_PNW.PPK_PWP:=PPK_PWP.ref();
         {? ~PPK_PNW.add()
         || _err:=1
         ?}
      || _err:=1
      ?}
   || _err:=1
   ?};
   _loop:=PPK_WPW.next()
!};

:: porządki
PPK_WPW.cntx_pop();
PPK_PWP.cntx_pop();
PPK_PNW.cntx_pop();

:: obsługa "własnej" transakcji
{? _my_trn<>0
|| {? _err<>0
   || undo()
   ?};
   end()
?};

:: wynik
_err=0


\pwp_usu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Usuwa deklarowane wpłaty z ewidencji.
::   WE: _a _PPK_WNU - wskazanie wiersza tabeli PPK_WNU
::   WY: 0/1 - usunięcie nie powiodło się/udało się usunąć wpłaty
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_wnu:=_a;
_ret:=0;

:: obsługa "własnej" transakcji
_my_trn:=0;
{? do_state()=0
|| _my_trn:=1;
   do()
|? do_state()<>1
|| return(0)
?};

:: usuń wpłaty wynikające z deklaracji uczestnika
_ret:=exec('del_ndx','#table',PPK_PNW,'PPK_WNU',PPK_WNU.ref());

:: obsługa "własnej" transakcji
{? _my_trn<>0
|| {? _ret=0
   || undo()
   ?};
   end()
?};

:: wynik
_ret


\zal_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Załączniki" menu okienek tabeli PPK_WNU.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('setup','ppk_zal',PPK_WNU,PPK_WNU.UID,,'PPK_EWI_RWNU');
1


\rek_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji wiersza tabeli PPK_WNU.
::   WE: _a INTEGER - rodzaj edycji: 0/1 - dołączenie/poprawianie
::   WY: 1 w przypadku gdy rekord jest poprawny, akronim wymaganego pola lub 0 gdy doszło do powielenia klucza.
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('_chk','ppk_wnu',-menu_txt()='popraw');
_typRet:=type_of(_ret);
{? (_typRet=type_of(0) & _ret=1) | (_typRet=type_of('') & _ret='')
:: weryfikacja stażu i urlopu bezpłatnego:
|| _ret:=exec('spr_wym','ppk_wnu');
   {? _ret='' & _typRet=type_of(0)
   || _ret:=1
   ?}
?};

_ret


\wnd_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: "Okienko przed" wszystkich okienek tabeli PPK_WNU.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
1


\wnd_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: "Okienko po" wszystkich okienek tabeli PPK_WNU.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
OSOBA.f_clear();
1


\tre_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Akcja "Treść" okienek tabeli PPK_WNU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_symbol:=PPK_WNU.PPK_WRD().SYMBOL;
_ret:=1;

{? _symbol='DWT' | _symbol='DWP'
|| PPK_WIF.cntx_psh();
   PPK_WIF.index('WNU_NAZ');
   PPK_WIF.prefix(PPK_WNU.ref());
   PPK_WIF.win_patt('RED');
   PPK_WIF.win_sel('WERWT');
:: Wyszarzenie akcji Dołącz, Popraw, Usuń jeżeli deklaracja już uwzględniona w raporcie:
   _act:='';
   {? PPK_WNU.PPK_RDA
   || _act:=PPK_WIF.actions_grayed('WERWT','DPU:DPU')
   ?};
   PPK_WIF.select();
:: Przywrócenie poprzedniego wyszarzenia:
   {? +_act
   || PPK_WIF.actions_grayed('WERWT',_act)
   ?};
   _ret:=PPK_WIF.size();
   PPK_WIF.cntx_pop()

|? _symbol='DWWT'
|| PPK_WIF.cntx_psh();
   PPK_WIF.prefix();
   PPK_WIF.f_set(
      'ADRES(NAZWA)',
      'join PPK_WNU using(PPK_WIF.PPK_WNU, PPK_WNU.REFERENCE)',
      'PPK_WIF.PPK_UCZ=:_a and (PPK_WIF.WNU_BLT is null or PPK_WIF.WNU_BLT=:_b) and PPK_WNU.PPK_RDA is null',
      PPK_WNU.PPK_UCZ,PPK_WNU.ref()
   );
   PPK_WIF.win_patt('WZO');
   PPK_WIF.win_sel('WERWB');
   PPK_WIF.select();
   PPK_WIF.f_clear();
   _ref:=PPK_WIF.find_tab(,'WNU_BLT',,'=',PPK_WNU.ref());
   PPK_WIF.cntx_pop()

|| PPK_WPW.cntx_psh();
   PPK_WPW.index('RN');
   PPK_WPW.prefix(PPK_WNU.ref());
   PPK_WPW.win_sel('WER');
   PPK_WPW.select();
   PPK_WPW.cntx_pop()
?};

_ret


\wer_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Weryfikuj" okienek tabeli PPK_WNU.
::   WE:
::   WY: 0/1 wniosek nie podlega weryfikacji/wniosek może być zweryfikowany
::----------------------------------------------------------------------------------------------------------------------
{? PPK_WNU.PPK_WRD().WER_WYM<>'T'
|| FUN.emsg('Wniosek nie podlega weryfikacji.'@);
   return(0)

|? PPK_WNU.PWP_STAT='T'
|| FUN.emsg('Wniosek jest już uwzględniony w ewidencji.'@);
   return(0)
?};

exec('wer_wym','ppk_wnu')


\wer_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po akcji "Weryfikuj" okienek tabeli PPK_WNU.
::   WE:
::   WY: 0/1 wniosek nie podlega weryfikacji/wniosek może być zweryfikowany
::----------------------------------------------------------------------------------------------------------------------
PPK_WNU.cntx_psh();
PPK_WNU.win_edit('WER');
PPK_WNU.get();
{? PPK_WNU.edit("exec('spr_wym','ppk_wnu')")
|| {? PPK_WNU.put() & PPK_WNU.memo_put(,'WER_INFO')
   || exec('pwp_akt','ppk_wnu');

:: Komunikat - informacja dla nowego uczestnika.
      {? PPK_WNU.PPK_WRD().SYMBOL='WOU' & PPK_WNU.PPK_UCZ
      || exec('zap_kom','ppk_kom',PPK_WNU.OD,'U','IUCZ')
      ?}
   ?}
?};
PPK_WNU.cntx_pop();
PPK_WNU.get();

exec('akc_a','ppk_wnu');
_fa:=PPK_WNU.f_active();
{? _fa<>0
|| _ref:=PPK_WNU.ref();
   PPK_WNU.f_rfresh();
   {? _fa=3 & PPK_WNU.f_test()=0
   || return()
   ?};
   {? ~PPK_WNU.f_seek(_ref)
   || FUN.info('Zarejestrowany wniosek można odnaleźć w widoku wniosków uczestników.'@)
   ?}
?};
~~


\ewi_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Ewidencja wpłat" okienek tabeli PPK_WNU.
::   WE:
::   WY: 0/1 - akcja zablokowana/zmiana możliwa
::----------------------------------------------------------------------------------------------------------------------
{? PPK_WNU.WER_WYM='T'
|| FUN.emsg('Wniosek wymaga weryfikacji.'@);
   0
|| 1
?}


\ewi_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po akcji "Ewidencja wpłat" okienek tabeli PPK_WNU.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_WNU.PWP_DATA:=date();
PPK_WNU.PWP_KTO:=userdata();

PPK_WNU.cntx_psh();
PPK_WNU.win_edit('PWP');
{? PPK_WNU.edit()
|| {? PPK_WNU.put()
   || PPK_WNU.memo_put(,'PWP_INFO')
   || {? exec('ewi_dup','ppk_wnu',PPK_WNU.ref())
      || FUN.emsg(
            'Wykryto próbę powielenia informacji o procentach wpłat\n'+
            'lub wprowadzenia sprzecznych ze sobą wniosków.'@
         )
      || FUN.emsg('Wniosek nie został uwzględniony w ewidencji.'@)
      ?}
   ?}
?};
PPK_WNU.cntx_pop();
PPK_WNU.get();

exec('akc_a','ppk_wnu');
~~


\akc_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po wykonaniu akcji. Odświeża zawartość listy uczestników.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab()=PPK_UCZ
|| _par:=params_get();
   {? type_of(_par)>100 & var_pres('wnd',_par)>100
   || grp_disp(PPK_UCZ,_par.wnd.main)
   ?}
?};
~~


\ewi_dup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Sprawdza, czy wniosek powiela informacje w ewidencji wpłat
::   WE: _a _PPK_WNU - wskazanie wiersza tabeli PPK_WKU
::   WY: null/ref - brak konfliktu/wykryto powielenie
::----------------------------------------------------------------------------------------------------------------------
_dup:=null();
PPK_WNU.cntx_psh();
PPK_WNU.prefix();
{? PPK_WNU.seek(_a)
|| PPK_PWP.cntx_psh();
   PPK_PWP.index('RNOD');
   PPK_WPW.cntx_psh();
   PPK_WPW.index('RN');
   PPK_WPW.prefix(PPK_WNU.ref());
   _loop:=PPK_WPW.first();
   {!
   |? _loop & ~_dup
   |! PPK_PWP.prefix(PPK_WNU.FIRMA,$PPK_WNU.OSOBA,PPK_WPW.R().RN);
      {? PPK_PWP.find_ge(PPK_WNU.OD)
      || _dup:=PPK_PWP.ref()
      ?};
      _loop:=PPK_WPW.next()
   !};
   PPK_WPW.cntx_pop();
   PPK_PWP.cntx_pop()
?};
PPK_WNU.cntx_pop();
_dup


\ppk_dzb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy i wstawia do okna obszaru panele zawierające dostępne dla użytkownika deklaracje i wnioski.
::   WE: _b TABLE - alias tabeli obszaru roboczego
::       _a STRING - akronim okienka obszaru roboczego
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_wnd:=_b;

:: wnioski uczestników i osób
_ucz:=exec('sel_wnd','ppk_wnu');
_oso:=exec('sel_wnd','ppk_wnu');

_dod_b:="exec('dod_b','ppk_wnu')";
_dod_a:="exec('dod_a','ppk_wnu')";
_umo_b:="exec('wyb_umo','ppk')";
_umo_a:=$(
   'grp_disp(PPK_WNU,\''+_ucz+'\',,1);'+
   'grp_disp(PPK_WNU,\''+_oso+'\',,1)'
);
_tre_a:="exec('tre_a','ppk_wnu')";
_wer_b:="exec('wer_b','ppk_wnu')";
_wer_a:="exec('wer_a','ppk_wnu')";
_ewi_b:="exec('ewi_b','ppk_wnu')";
_ewi_a:="exec('ewi_a','ppk_wnu')";
_zal_b:="exec('zal_b','ppk_wnu')";
_zal_a:="exec('select','ppk_zal')";
_wys_b:="exec('wysw_b','ppk_wnu')";
_leg_b:="exec('wnu_bfl','ppk_wnu')";
_rek_b:="exec('wnu_br','ppk_wnu')";

:: PPK_EWI_RWNU Rej. deklaracji i wniosków PPK
_act:='PPK_EWI_RWNU';

:: obsługa wniosków uczestników
PPK_WNU.win_act(_ucz,1,'Formuła','Dołącz'@@,,,_dod_b,_dod_a,1);
task_attach(_act);
PPK_WNU.win_act(_ucz,1,'Formuła','Wybie&rz umowę'@@,,,_umo_b,_umo_a);
PPK_WNU.win_act(_ucz,0,'Formuła','Dołącz'@@,,,_dod_b,_dod_a,1);
task_attach(_act);
PPK_WNU.win_act(_ucz,0,'Usuń');
task_attach(_act);
PPK_WNU.win_act(_ucz,0,'Formuła','Treść'@@,,,,_tre_a);
task_attach(_act);
PPK_WNU.win_act(_ucz,0,'Formuła','Weryfikuj'@@,,,_wer_b,_wer_a);
task_attach(_act);
PPK_WNU.win_act(_ucz,0,'Formuła','Ewidencja wpłat'@@,,,_ewi_b,_ewi_a);
task_attach(_act);
PPK_WNU.win_act(_ucz,0,'Formuła','Druku&j'@@,,,"exec('drukuj_b','ppk_wnu','u')",,,,,,,,'icon=print');
PPK_WNU.win_act(_ucz,0,'Formuła','Wybie&rz umowę'@@,,,_umo_b,_umo_a);
PPK_WNU.win_act(_ucz,0,'Formuła','Załączniki'@@,,,_zal_b,_zal_a);
task_attach(_act);
PPK_WNU.win_act(_ucz,0,'Formuła','Legenda'@@,,,_leg_b,,,,,,'L',,'target=window');
PPK_WNU.win_act(_ucz,0,'Wyświetl',,,,_wys_b);
PPK_WNU.win_act(_ucz,0,'Rekord',,,,_rek_b);
PPK_WNU.win_act(_ucz,0,'Szukaj');
PPK_WNU.win_act(_ucz,0,'Kolejność');
:: przyciski okna
PPK_WNU.win_btn(_ucz,'text=%1'['Dołącz'@],'menu:D');
PPK_WNU.win_btn(_ucz,'text=%1'['Usuń'@],'menu:u',,,,,,'noempty');
PPK_WNU.win_btn(_ucz,'text=%1'['Weryfikuj'@],'menu:W',,,,,,'noempty');

:: obsługa wniosków osób
PPK_WNU.win_act(_oso,1,'Formuła','Dołącz'@@,,,_dod_b,_dod_a,1);
task_attach(_act);
PPK_WNU.win_act(_oso,1,'Formuła','Wybie&rz umowę'@@,,,_umo_b,_umo_a);
PPK_WNU.win_act(_oso,0,'Formuła','Dołącz'@@,,,_dod_b,_dod_a,1);
task_attach(_act);
PPK_WNU.win_act(_oso,0,'Usuń');
task_attach(_act);
PPK_WNU.win_act(_oso,0,'Formuła','Treść'@@,,,,_tre_a);
task_attach(_act);
PPK_WNU.win_act(_oso,0,'Formuła','Weryfikuj'@@,,,_wer_b,_wer_a);
task_attach(_act);
PPK_WNU.win_act(_oso,0,'Formuła','Ewidencja wpłat'@@,,,_ewi_b,_ewi_a);
task_attach(_act);
PPK_WNU.win_act(_oso,0,'Formuła','Druku&j'@@,,,"exec('drukuj_b','ppk_wnu','o')",,,,,,,,'icon=print');
PPK_WNU.win_act(_oso,0,'Formuła','Wybie&rz umowę'@@,,,_umo_b,_umo_a);
PPK_WNU.win_act(_oso,0,'Formuła','Załączniki'@@,,,_zal_b,_zal_a);
task_attach(_act);
PPK_WNU.win_act(_oso,0,'Szukaj');
PPK_WNU.win_act(_oso,0,'Kolejność');
:: przyciski okna
PPK_WNU.win_btn(_oso,'text=%1'['Dołącz'@],'menu:D');
PPK_WNU.win_btn(_oso,'text=%1'['Usuń'@],'menu:u',,,,,,'noempty');
PPK_WNU.win_btn(_oso,'text=%1'['Weryfikuj'@],'menu:W',,,,,,'noempty');

_mode:='maximized_with_title';
:: deklaracje uczestników
_TAB.grp_sel(_wnd,PPK_WNU,_ucz,'Deklaracje i wnioski uczestników'@,
:: po odświeżeniu
   $("_aid:='';
      {? ~exec('drukuj_b','ppk_wnu','u',1)
      || _aid+='J'
      ?};
      PPK_WNU.actions_grayed('"+_ucz+"',_aid);
      grp_disp(PPK_WPW,'WER',1,1)
   "),,,
:: wysokość
   22,
:: przed obsługą
   "exec('sel_u_bs','ppk_wnu')",,,,
:: tryb
   _mode,
:: identyfikator
   'WNU_UCZ'
);
:: deklarowane procenty wpłat
_TAB.tab_splt(_wnd,,'horizontal','bottom');
_TAB.grp_sel(_wnd,PPK_WPW,'WER',,,,,,
:: przed obsługą
   "  {? grp_empty('WNU_UCZ',,1)
      || return('#disable')
      ?};
      PPK_WPW.prefix(PPK_WNU.ref())
   ",,,,
:: tryb
   _mode
);
:: deklaracje osób
_TAB.grp_sel(_wnd,PPK_WNU,_oso,'Deklaracje i wnioski osób'@,
:: po odświeżeniu
   $("_aid:='';
      {? ~exec('drukuj_b','ppk_wnu','o',1)
      || _aid+='J'
      ?};
      PPK_WNU.actions_grayed('"+_oso+"',_aid);
      grp_disp(PPK_WPW,'WER',1,1)
   "),,,
:: wysokość
   22,
:: po obsłudze
   "exec('sel_o_bs','ppk_wnu')",,,,
:: tryb
   _mode,
:: identyfikator
   'WNU_OSO'
);
:: deklarowane procenty wpłat
_TAB.tab_splt(_wnd,,'horizontal','bottom');
_TAB.grp_sel(_wnd,PPK_WPW,'WER',,,,,,
:: przed obsługą
   "  {? grp_empty('WNU_OSO',,1)
      || return('#disable')
      ?};
      PPK_WPW.prefix(PPK_WNU.ref())
   ",,,,
:: tryb
   _mode
);

:: wszystkie modyfikacje domyślnego działania należy "odwołać" w formule sel_a
:: zmiana domyślnej funkcjonalności kartoteki
PPK_WNU.fld_fml('PPK_UCZ','BLANK',"null");
~~


\sel_wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy okienko zawierający dostępne dla użytkownika deklaracje i wnioski.
::   WE:
::   WY: akronim utworzonego okienka
::----------------------------------------------------------------------------------------------------------------------
_com:="exec('fldComment','#field',_a,_b)";

_wnd:=PPK_WNU.mk_sel('Deklaracje i wnioski'@,'P',0,'#ppk_wnu_all',,,,,'U');
_mob:='mobile_visible=1';
_head:='mobile_visible=1, mobile_header=1';
PPK_WNU.win_fld(_wnd,,'DATA',,,-10,,,'Data'@,,_com(PPK_WNU,'DATA'));
PPK_WNU.win_fld(_wnd,,'OD',,,-10,,,'Od dnia'@,,_com(PPK_WNU,'OD'),,,,,,_head);
PPK_WNU.win_fld(_wnd,,'OSOBA','NAZWISKO',,-20,,,'Nazwisko'@,,_com(OSOBA,'NAZWISKO'),,,,,,_mob);
PPK_WNU.win_fld(_wnd,,'OSOBA','PIERWSZE',,-20,,,'Imię'@,,_com(OSOBA,'PIERWSZE'),,,,,,_mob);
PPK_WNU.win_fld(_wnd,,'OSOBA','PESEL',,-11,,,'PESEL'@,,_com(OSOBA,'PESEL'));
PPK_WNU.win_fld(_wnd,,'PPK_WRD','SYMBOL',,-8,,,'Symbol'@,,_com(PPK_WRD,'SYMBOL'));
PPK_WNU.win_fld(_wnd,,'PPK_WRD','OPIS',,-30,,,'Opis'@,,_com(PPK_WRD,'OPIS'),,,,,,_mob);
PPK_WNU.win_fld(_wnd,,'WER_WYM',,,-3,,,,,_com(PPK_WNU,'WER_WYM'),2,,"'T'","'N'");
PPK_WNU.win_fld(_wnd,,'PWP_STAT',,,-3,,,,,_com(PPK_WNU,'PWP_STAT'),2,,"'T'","'N'");
PPK_WNU.win_fld(_wnd,,'REJ_TRYB',,,-3,,,,,_com(PPK_WNU,'REJ_TRYB'));

_wnd


\sel_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po zamknięciu panelu obsługi wniosków. Przywrócenie domyślnej funkcjonalności kartotek.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: odtworzenie domyślnej funkcjonalności pól
PPK_WNU.fld_fml('OSOBA','AFTER_EDIT',"*");
PPK_WNU.fld_fml('OSOBA','PATTERN',"*");
PPK_WNU.fld_fml('PPK_UCZ','BLANK',"*");
PPK_WRD.fld_fml('RODZAJ','BLANK',"*");

:: redakcja i wyszukiwanie z uwzględnieniem osoby
PPK_WNU.win_edit('RED_U');
PPK_WNU.win_patt('WZO_U');

PPK_WNU.sel_adel();
PPK_WNU.f_clear();
OSOBA.f_clear();
~~


\sel_u_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed obsługą okienka tabeli PPK_WNU w zakładce wniosków uczestników.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: słownik rodzajów wniosków dla uczestnika
PPK_WRD.fld_fml('RODZAJ','BLANK',"'U'");

:: redakcja i wyszukiwanie z uwzględnieniem osoby
PPK_WNU.win_edit('RED_O');
PPK_WNU.win_patt('WZO_O');

:: po wskazaniu osoby
PPK_WNU.fld_fml('OSOBA','AFTER_EDIT',"
   _ok:=1;
   PPK_WNU.PPK_UCZ:=null;
   PPK_UCZ.cntx_psh();
   PPK_UCZ.index('UNIQUE');
   PPK_UCZ.prefix(KST_PPK.PPK_UMO);
   {? PPK_UCZ.find_key(PPK_WNU.OSOBA)
   || PPK_WNU.PPK_UCZ:=PPK_UCZ.ref();
      {? exec('nie_akt','ppk_ucz')
      || _ok:=0
      ?}
   ?};
   PPK_UCZ.cntx_pop();
   _ok
");

:: dostępne osoby
PPK_WNU.fld_fml('OSOBA','PATTERN',"
   OSOBA.f_set(
      'NAZWISKO,PIERWSZE,PESEL',,
      'OSOBA.REFERENCE in ('+exec('osoba_qr','ppk')+') and '+
      'OSOBA.REFERENCE in ('+exec('ucz_qr','ppk','_f')+')',
::    argumenty zapytania ograniczającego zakres danych
      exec('ref_firma','ustawienia'),
      exec('szukaj_udb_sys','schemat','PPK','PODZORG'),
      OPERATOR.USER,
      exec('domyslny','schemat','PODZORG'),
      '\\\'%\\\'',
      KST_PPK.PPK_UMO
   );
   ''
");

:: Usunięcie zaznaczeń, aby można było bezpiecznie ustawić filtr po przejściu z zakładki:
{? PPK_WNU.sel_size()<>0 || PPK_WNU.sel_adel() ?};

:: lista wniosków
PPK_WNU.f_set(
:: sortuj od najnowszych i zgodnie z danymi osoby
   'DATA^,OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',,
:: tylko wnioski uczestników, pokaż związane z wybraną umową,
:: ukryj wnioski osób, do których użytkownik nie ma dostępu
   'PPK_WNU.PPK_UCZ is not null and PPK_WNU.PPK_UMO=:_f and '+
   'PPK_WNU.OSOBA in ('+exec('osoba_qr','ppk')+')',
:: argumenty zapytania ograniczającego zakres danych
   exec('ref_firma','ustawienia'),
   exec('szukaj_udb_sys','schemat','PPK','PODZORG'),
   OPERATOR.USER,
   exec('domyslny','schemat','PODZORG'),
   '\'%\'',
   KST_PPK.PPK_UMO
);
~~


\sel_o_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed obsługą okienka tabeli PPK_WNU w zakładce wniosków osób.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: słownik rodzajów wniosków dla osoby
PPK_WRD.fld_fml('RODZAJ','BLANK',"'O'");

:: redakcja i wyszukiwanie z uwzględnieniem osoby
PPK_WNU.win_edit('RED_O');
PPK_WNU.win_patt('WZO_O');

:: po wskazaniu osoby
PPK_WNU.fld_fml('OSOBA','AFTER_EDIT',"
   PPK_WNU.PPK_UCZ:=null;
   1
");

:: dostępne osoby
PPK_WNU.fld_fml('OSOBA','PATTERN',"
   OSOBA.f_set(
      'NAZWISKO,PIERWSZE,PESEL',,
      'OSOBA.REFERENCE in ('+exec('osoba_qr','ppk')+') and '+
      'OSOBA.REFERENCE not in ('+exec('ucz_qr','ppk','_f')+')',
::    argumenty zapytania ograniczającego zakres danych
      exec('ref_firma','ustawienia'),
      exec('szukaj_udb_sys','schemat','PPK','PODZORG'),
      OPERATOR.USER,
      exec('domyslny','schemat','PODZORG'),
      '\\\'%\\\'',
      KST_PPK.PPK_UMO
   );
   ''
");

:: Usunięcie zaznaczeń, aby można było bezpiecznie ustawić filtr po przejściu z zakładki:
{? PPK_WNU.sel_size()<>0 || PPK_WNU.sel_adel() ?};

:: lista wniosków
PPK_WNU.f_set(
:: sortuj od najnowszych i zgodnie z danymi osoby
   'DATA^,OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',,
:: ukryj wnioski uczestników, pokaż wnioski osób związane ze wszystkimi umowami,
:: ukryj wnioski osób, do których użytkownik nie ma dostępu
   'PPK_WNU.PPK_UCZ is null and '+
   'PPK_WNU.OSOBA in ('+exec('osoba_qr','ppk')+')',
:: argumenty zapytania ograniczającego zakres danych
   exec('ref_firma','ustawienia'),
   exec('szukaj_udb_sys','schemat','PPK','PODZORG'),
   OPERATOR.USER,
   exec('domyslny','schemat','PODZORG'),
   '\'%\''
);
~~


\gen_AWW
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Utworzenie wniosków o automatyczne wznowienie wpłat do PPK.
::       Pomijani są uczestnicy, którzy złożyli deklarację rezygnacji po uzyskaniu informacji o ponownym rozpoczęciu
::       naliczania wpłat, ale przed datą ponownego naliczania wpłat.
::   WE:  _a [TABLE]   - Tabela z listą uczestników którym należy wznowić wpłaty do PPK.
::       [_b][INTEGER] - 0/1 Czy pokazywać pasek postępu, komunikaty, itp.? Domyślnie 0 - nie pokazuj
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_rok:=date()~1;
_TAB:=exec('n_wznow','ppk_rep',_a,_rok);
_pokaz:={? var_pres('_b')=type_of(0) || _b || 0 ?};
:: Parametry umowy
PPK_UZA.cntx_psh();
PPK_UMO.PPK_UZA();
_PARRAP:=exec('parrap_b','ppk_uza',1);
_mcUcz:={? _PARRAP.AWW_MC || _PARRAP.AWW_MC || KST_PPK.WZN_MS-1 ?};
_dzUcz:={? _PARRAP.AWW_DZ || _PARRAP.AWW_DZ || KST_PPK.WZN_DN ?};
_mcOs:={? _PARRAP.UZU_MC || _PARRAP.UZU_MC || KST_PPK.WZN_MS-1 ?};
_dzOs:={? _PARRAP.UZU_DZ || _PARRAP.UZU_DZ || KST_PPK.WZN_DN ?};
_powNakt:=(_PARRAP.POW_NAKT='T');
obj_del(_PARRAP);
PPK_UZA.cntx_pop();
:: Wznowienie odprowadzania wpłat od 1 kwietnia, naliczanie od 1 marca (Art. 23. ust.6):
_dtAwwPucz:=date(_rok,_mcUcz,_dzUcz);
_dtAwwPos:=date(_rok,_mcOs,_dzOs);
_dtAwwK:=date(_rok,KST_PPK.WZN_MS-1,KST_PPK.WZN_DN);
_user:=OPERATOR.USER().DANE;

:: Ustalenie rodzaju wniosku.
_symbolU:=exec('szukaj','ppk_wrd','U','AWW');
_symbolO:=exec('szukaj','ppk_wrd','O','AWW');

:: Wyświetlenie listy przed kontynuacją:
_dalej:=obj_new('dalej');
_dalej.dalej:=1;
{? _pokaz
|| {? _TAB.first()
   || params_set('dalej',_dalej);
      _tyt:='Współpracownicy wytypowani do generowania automatycznego wznowienia wpłat'@;
      _ws:=_TAB.mk_sel(_tyt,,0,'#ppkgenawwprzed',,,,,'U');
      _TAB.win_fld(_ws,,'NAZWISKO',,,-20,,,'Nazwisko'@,,'Nazwisko'@);
      _TAB.win_fld(_ws,,'PIERWSZE',,,-20,,,'Imię'@,,'Imię pierwsze'@);
      _TAB.win_fld(_ws,,'TYPDOK',,,-15,,,'Typ dokumentu tożsamości'@,,'Typ dokumentu tożsamości'@);
      _TAB.win_fld(_ws,,'SYMDOK',,,-20,,,'Symbol dokumentu tożsamości'@,,'Symbol dokumentu tożsamości'@);
      _TAB.win_fld(_ws,,'EMAIL',,,-25,,,'E-mail'@,,'Adres poczty elektronicznej'@);
      _TAB.win_act(_ws,0,'Formuła','Generuj'@,,'Generuj automatyczne wznowienia wpłat'@,"sel_exit()");
      _TAB.win_act(_ws,0,'Formuła','Anuluj'@,,'Przerwij operację generowania'@,
         "_dalej:=params_get().dalej;
          _dalej.dalej:=0;
          sel_exit()
         ");
      _TAB.win_btn(_ws,'text=%1,panel=bottom'['Generuj'@],'menu:G');
      _TAB.win_btn(_ws,'text=%1,panel=bottom'['Anuluj'@],'menu:A');
      _TAB.win_sel(_ws);
      {? ~_TAB.select()
      || _dalej.dalej:=0
      ?}
   || FUN.info('Brak współpracowników spełniających kryteria generowania automatycznego wznowienia wpłat'@);
      _dalej.dalej:=0
   ?}
?};

PPK_UMO.cntx_psh();
{? _dalej.dalej & _TAB.first() & _symbolU<>null() & _symbolO<>null() & exec('init','ppk_umo',_dtAwwK)<>null()
|| OSOBA.cntx_psh();
   OSOBA.index('IDENTYF');
   PPK_UCZ.cntx_psh();
   PPK_UCZ.index('UNIQUE');
   PPK_UCZ.prefix(PPK_UMO.ref());
   PPK_WST.cntx_psh();
   PPK_WST.index('UNIQUE');
   PPK_WPW.cntx_psh();
   PPK_WPW.prefix();
   PPK_WNU.cntx_psh();
   PPK_WNU.index('UMO_WRD');
:: Pasek postępu:
   {? _pokaz
   || exec('PROGRESS','#object');
      PROGRESS.set(_TAB.size(),'\n%1'['Trwa generowanie wznowień.'@])
   ?};

   {!
   |? OSOBA.prefix(_TAB.IDENTYF,_TAB.NAZWISKO,_TAB.PIERWSZE);
      {? OSOBA.first()
      || _uczestnik:=(PPK_UCZ.find_key(OSOBA.ref()));
         _dtAwwP:={? _uczestnik || _dtAwwPucz || _dtAwwPos ?};

         PPK_WNU.blank();
         {? _uczestnik
         || _symbol:=_symbolU
         || _symbol:=_symbolO;
            PPK_WNU.PPK_UCZ:=null()
         ?};
         PPK_WNU.OSOBA:=OSOBA.ref();
         PPK_WNU.PPK_WRD:=_symbol;
         PPK_WNU.DATA:=_dtAwwP;
         PPK_WNU.OD:=_dtAwwP;
         PPK_WNU.REJ_TRYB:='A';
         PPK_WNU.REJ_KTO:=_user;
         PPK_WNU.WER_DATA:=_dtAwwP;
         PPK_WNU.WER_WYM:='N';
         PPK_WNU.WER_STAT:='T';
         PPK_WNU.WER_KTO:=_user;
         PPK_WNU.PWP_DATA:=_dtAwwP;
         PPK_WNU.PWP_STAT:='T';
         PPK_WNU.PWP_KTO:=_user;

         {? PPK_WNU.add(1)
         || _ok:=1;
            PPK_WST.prefix(_symbol);
            {? PPK_WST.first()
            || {!
               |? PPK_WPW.blank();
                  PPK_WPW.PPK_WNU:=PPK_WNU.ref();
                  PPK_WPW.R:=PPK_WST.R;
                  PPK_WPW.BLOKADA:=PPK_WST.BLOKADA;
                  PPK_WPW.ZMIANA:=PPK_WST.ZMIANA;
                  PPK_WPW.STAWKA:=0;
                  {? ~PPK_WPW.add(1)
                  || _ok*=0
                  ?};
                  PPK_WST.next()
               !}
            ?}
         || _ok:=0
         ?};
         {? _ok
         || {? _powNakt | _TAB.AKT='Tak'
            || exec('zap_kom','ppk_kom',_dtAwwP,{? _uczestnik || 'U' || 'O' ?},'AWW')
            ?};
            {? ~exec('pwp_dod','ppk_wnu',PPK_WNU.ref())
            || _TAB.OSTRZ+='Nie wygenerowano procentowych wysokości wpłat dla wniosku.'@
            ?};
            _TAB.OK:='T';
            _TAB.put()
         ?}
      ?};
      {? _pokaz || PROGRESS.next() ?};

      _TAB.next()
   !};
   {? _pokaz || PROGRESS.close() ?};
   PPK_WNU.cntx_pop();
   PPK_WPW.cntx_pop();
   PPK_WST.cntx_pop();
   PPK_UCZ.cntx_pop();
   OSOBA.cntx_pop()
?};
PPK_UMO.cntx_pop();
obj_del(_dalej);
~~


\dodaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Dodaje wniosek do PPK_WNU.
::   WE: _a [REFERENCE] - wskazanie na osobę
::       _b [STRING]    - rodzaj wnioskodawcy [O-osoba, U-uczestnik]
::       _c [DATE]      - data złożenia dokumentu
::       _d [DATE]      - data zmiany (w przypadku nie podania - taka sama jak wartość pola _c)
::       _e [REFERENCE] - wskazanie na rekord umowy PPK_UMO
::       _f [REFERENCE] - wskazanie na rekord uczestnika PPK_UCZ
::       _g [REFERENCE] - wskazanie na rekord rodzaju wniosku PPK_WRD
::       _h [STRING]    - nazwa użytkownika rejestrującego wniosek
::       _i [STRING]    - czy wymusić akceptację wniosku i wprowadzić do ewidencji, nawet jak w definicji
::                        ma ustawioną konieczność weryfikacji ('T' - wymusza)
::       _j...[NUMBER]  - kolejne parametry, określające wartości stawek
::   WY: obiekt z polami  .ok      - 0 / 1
::                        .errMsg  - komunikat o błędzie
::                        .ppk_wnu - null / ref wniosku, który jest skonfliktowany z bieżącym
::                                          lub w przypadku powodzenia ref dodanego wniosku
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('ok','errMsg','ppk_wnu');
_result.ok:=0;
_result.errMsg:='Błędny parametr wejściowy.'@;
_result.ppk_wnu:=null();
  _osoba:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
    _typ:={? var_pres('_b')=type_of('')     || _b || return(_result) ?};
   _data:={? var_pres('_c')=type_of(date()) || _c || return(_result) ?};
_data_od:={? var_pres('_d')=type_of(date()) || _d || _data           ?};
_ppk_umo:={? var_pres('_e')=type_of(null()) || _e || return(_result) ?};
_ppk_ucz:={? var_pres('_f')=type_of(null()) || _f || return(_result) ?};
_ppk_wrd:={? var_pres('_g')=type_of(null()) || _g || return(_result) ?};
   _user:={? var_pres('_h')=type_of('')     || _h || ''              ?};
 _akcept:={? var_pres('_i')=type_of('')     || _i || ''              ?};
:: kolejne parametry odpowiadają stawkom, które mogą być przekazywane w parametrach >9
_from:=9;

_result.errMsg:='Błędny rodzaj wnioskodawcy.'@;
{? _typ<>'U' & _typ<>'O' || return(_result) ?};
_result.errMsg:='';

PPK_WNU.cntx_psh();
PPK_WNU.index('UCZ_OD');
PPK_WNU.prefix();
PPK_WRD.cntx_psh();
PPK_WRD.prefix();
{? PPK_WRD.seek(_ppk_wrd)
|| _firma:=exec('firma','ustawienia');
   _us_mod:=OPERATOR.USER().OSOBA().NAZWISKO + ' ' + OSOBA.PIERWSZE;
   PPK_WNU.blank();
   PPK_WNU.UID:=exec('tm_stamp','#tm_stamp');
   PPK_WNU.TYP:=_typ;
   PPK_WNU.FIRMA:=_firma;
   PPK_WNU.OSOBA:=_osoba;
   PPK_WNU.PPK_UMO:=_ppk_umo;
   PPK_WNU.PPK_UCZ:=_ppk_ucz;
   PPK_WNU.PPK_WRD:=_ppk_wrd;
   PPK_WNU.WER_WYM:={? _akcept='T' || 'N' || PPK_WRD.WER_WYM ?};
   PPK_WNU.WER_STAT:={? _akcept='T' || 'T' || {? PPK_WRD.WER_WYM='T' || 'N' || 'T' ?} ?};
   PPK_WNU.PWP_STAT:={? _akcept='T' || 'T' || {? PPK_WRD.WER_WYM='T' || 'N' || 'T' ?} ?};
   PPK_WNU.DATA:=_data;
   PPK_WNU.OD:=_data_od;
   PPK_WNU.REJ_DATA:=date();
   PPK_WNU.WER_DATA:={? _akcept='T' || date() || #0 ?};
   PPK_WNU.WER_KTO:={? _akcept='T' || _us_mod || '' ?};
   PPK_WNU.REJ_TRYB:='U';
   PPK_WNU.REJ_KTO:=_user;

:: sprawdzenie zakresu dat w ramach uczestnictwa
   {? _ppk_ucz=null | exec('zakr_ucz','ppk_wnu',PPK_WNU.DATA,PPK_WNU.OD,_ppk_ucz)
   || PPK_WST.cntx_psh();
      PPK_WST.index('RN');
      PPK_WST.prefix(PPK_WNU.PPK_WRD);
      _ile_st:=PPK_WST.size();
      _added:=0;
:: założenie transakcji
      _mydo:=do_state()=0;
      {? _mydo || do() ?};

      {? PPK_WNU.add()
      || _result.ppk_wnu:=PPK_WNU.ref();
         PPK_WPW.cntx_psh();
         PPK_WPW.clear();
::    kolejność przetwarzania struktury wniosku jest zgodna z kolejnością rubryk (rosnąco)
::    w takiej też kolejności powinny "przychodzić" do funkcji kolejne wartości stawek
         _loop:=PPK_WST.first();
         {!
         |? _loop
         |! {? (_added<_ile_st)
            || PPK_WPW.blank(1);
               PPK_WPW.PPK_WNU:=PPK_WNU.ref();
               PPK_WPW.R:=PPK_WST.R;
               PPK_WPW.BLOKADA:=PPK_WST.BLOKADA;
               PPK_WPW.ZMIANA:=PPK_WST.ZMIANA;
::             jeżeli w definicji nie ma blokady oraz stawka jest określona jako indywidualna to ustawiamy
::             ją wtedy z przekazanych parametrów _from
               PPK_WPW.STAWKA:={? PPK_WST.BLOKADA<>'T' & PPK_WST.ZMIANA='T' & (_from+1+_added<=_)
                               || _[_from+1+_added]
                               || 0
                               ?};
               _added+=PPK_WPW.add(1)
            ?};
            _loop:=PPK_WST.next()
         !};
         PPK_WPW.cntx_pop();
         _result.ok:=(_ile_st=_added);
         {? _result.ok
         || {? _added
            || PPK_WNU.PWP_DATA:=date();
               PPK_WNU.PWP_KTO:=_us_mod;
               PPK_WNU.put()
            ?};
            {? PPK_WNU.PWP_STAT='T' & (_ppk_pwp:=exec('ewi_dup','ppk_wnu',PPK_WNU.ref());_ppk_pwp)
            || _text:='Nie udało się zapisać wprowadzonych stawek.'@;
               PPK_WPW.cntx_psh();
               PPK_WNU.cntx_psh();
               PPK_WRD.cntx_psh();
               PPK_PNW.cntx_psh();
               PPK_PNW.index('PPK_PWP');
               PPK_PNW.prefix(_ppk_pwp);
               {? PPK_PNW.first()
               || _data:=PPK_PNW.PPK_WPW().PPK_WNU().DATA;
                  _od:=PPK_WNU.OD;
                  _stawka:=PPK_PNW.PPK_PWP().STAWKA;
                  _symbol:=PPK_WNU.PPK_WRD().SYMBOL;
                  _opis:=PPK_WNU.PPK_WRD().OPIS;
                  _result.ppk_wnu:=PPK_WNU.ref();
                  _text:='Dane pokrywają się z wnioskiem "%1 - %2" z dnia: %3 r. '
                         '(\% wpłaty: %4 - obowiązuje od dnia: %5 r.).\n'
                         'Aby wprowadzić bieżący wniosek należy wycofać z ewidencji kolidujący wniosek.'@
                         [_symbol,_opis,_data$4,$_stawka,_od$4]
               ?};
               PPK_WRD.cntx_pop();
               PPK_PNW.cntx_pop();
               PPK_WNU.cntx_pop();
               PPK_WPW.cntx_pop();
               {? _mydo || undo() ?};
               _result.ok:=-1;
               _result.errMsg:=_text
            |? PPK_WNU.PWP_STAT='T' & ~exec('pwp_dod','ppk_wnu',PPK_WNU.ref())
            || {? _mydo || undo() ?};
               _result.ok:=0;
               _result.errMsg:='Nie udało się zapisać wprowadzonych stawek.\n'
                               'Należy sprawdzić czy składany wniosek nie pokrywa się z innym wnioskiem '
                               'zarejestrowanym w systemie.'@
            ?}
         || {? _mydo || undo() ?};
            _result.errMsg:='Liczba przekazanych stawek jest niezgodna ze strukturą wniosku.'@
         ?}
      ?};
      {? _mydo || end() ?};
      PPK_WST.cntx_pop()
   || _result.errMsg:='Data złożenia wniosku oraz data, od której ma mieć on zastosowanie '
                      'muszą zawierać się w okresie uczestnictwa osoby w planie kapitałowym.'@
   ?}
|| _result.errMsg:='Nie znalezniono definicji wybranego wniosku.'@
?};
PPK_WRD.cntx_pop();
PPK_WNU.cntx_pop();
_result


\zmien
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Zmienia dane wniosku.
::   WE: _a _PPK_WNU - wskazanie wniosku
::       _b RULE - formuła zmieniająca wartości pól wiersza
::       ... ANY - argumenty przekazane do formuły w postaci tablicy
::   WY: 0/1 - porażka/sukces
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null) | _a=null || return(0)
|? var_pres('_b')<>type_of("") | _b="" || return(0)
?};

_ret:=0;
PPK_WNU.cntx_psh();
PPK_WNU.prefix();
{? PPK_WNU.seek(_a)
|| _off:=2;
   {? _>_off
   || _arg:=obj_new(_-_off);
      {! _ai:=1.._-_off
      |! {? var_pres('_['+$_ai+']')>=0
         || _arg[_ai]:=_[_ai+_off]
         ?}
      !};
      _b(_arg)
   || _b()
   ?};
   _ret:=PPK_WNU.put()
?};
PPK_WNU.cntx_pop();
_ret


\zakr_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Formuła sprawdza czy daty wniosku znajdują się w okresie uczestnictwa osoby w PPK
::   WE: _a [DATE] - data złożenia dokumentu (PPK_WNU.DATA)
::       _b [DATE] - data uwzględnienia na listach płac (PPK_WNU.OD)
::       _c [REFERENCE] - wskazanie na rekord uczestnika (PPK_UCZ.ref())
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
   _data:={? var_pres('_a')=type_of(date()) || _a || return(_result) ?};
     _od:={? var_pres('_b')=type_of(date()) || _b || return(_result) ?};
_ppk_ucz:={? var_pres('_c')=type_of(null()) || _c || return(_result) ?};

_zd:=date(0,0,0);
PPK_UCZ.cntx_psh();
PPK_UCZ.prefix();
{? PPK_UCZ.seek(_ppk_ucz)
|| PPK_UMO.cntx_psh();
   PPK_UCZ.PPK_UMO();
   {? ~(_data<PPK_UCZ.OD | _od<PPK_UCZ.OD |
      (PPK_UMO.DO<>_zd & (PPK_UMO.DO<_data | PPK_UMO.DO<_od)))
   || _result:=1
   ?};
   PPK_UMO.cntx_pop()
?};
PPK_UCZ.cntx_pop();
_result


\szukaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła wyszukuje wniosek identyfikowany podanymi parametrami.
::   WE: _a  [REFERENCE] - Wskazanie rekordu tabeli PPK_UMO.
::       _b  [REFERENCE] - Wskazanie rekordu tabeli OSOBA.
::       _c  [STRING]    - Symbol wniosku.
::      [_d] [DATE]      - Data wniosku.
::   WY: ~~ przy błędnym wywołaniu oraz null lub wskazanie znalezionego wniosku.
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();

{? var_pres('_a')=type_of(_ret) & _a<>_ret & ref_tab(_a)=PPK_UMO
|| _umo:=_a
|| return()
?};
{? var_pres('_b')=type_of(_ret) & _b<>_ret & ref_tab(_b)=OSOBA
|| _osoba:=_b
|| return()
?};
{? var_pres('_c')=type_of('')
|| _wrd:=_c
|| return()
?};
:: jeżeli podano czwarty parametr, to musi być odpowiedniego typu.
{? _>3
|| {? var_pres('_d')=type_of(date())
   || _dt:=_d
   || return()
   ?}
?};

PPK_WNU.cntx_psh();
PPK_WNU.index('UMO_WRD');
:: jeżeli nie podano 4 parametru do prefiksujemy się tylko na typie wniosku
{? _=3
|| PPK_WNU.prefix(_umo,_osoba,_wrd)
|| PPK_WNU.prefix(_umo,_osoba,_wrd,_dt)
?};
{? PPK_WNU.first()
|| _ret:=PPK_WNU.ref()
?};
PPK_WNU.cntx_pop();
_ret


\wysw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Obsługa akcji "Wyświetl - przed" w oknie WER tabeli PPK_WNU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_red:=PPK_WNU.win_edit('?');
PPK_WNU.cntx_psh();
PPK_RDA.cntx_psh();
PPK_RDA.prefix();
PPK_RPL.cntx_psh();
PPK_RPL.prefix();
{? +($PPK_WNU.PPK_RDA)=16 & PPK_RDA.seek(PPK_WNU.PPK_RDA)
|| PPK_RDA.PPK_RPL();
   PPK_WNU.win_edit('RED_UR')
?};
PPK_WNU.display();
PPK_RPL.cntx_pop();
PPK_RDA.cntx_pop();
PPK_WNU.win_edit(_red);
PPK_WNU.cntx_pop();
~~


\wnu_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Formuła rekord przed w tabeli PPK_WNU.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('rekprzed','color','PPK_WNU#01#')


\wnu_bfl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Formuła przed akcją legenda w oknie WER tabeli PPK_WNU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PPK_WNU#01')


\drukuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Obsługa akcji "Drukuj - przed" w oknach tabeli PPK_WNU.
::       Uwaga: formuła wykorzystywana również do wyszarzania akcji "Drukuj".
::   WE: [_a] [STRING] - Dziedzina: 'u' - uczestnik [domyślnie] / 'o' - osoba.
::       [_b] [NUMBER] - Tylko sprawdzenie, czy wydruk można wykonać (istnieje odpowiedni szablon) [0*/1].
::   WY:
:: ~OST: INTMPDIR, INCLIEXEC
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') & (_a='u' | _a='o') || _a || 'u' ?};

_check:=var_pres('_b')=type_of(0) & _b;

_sym:=PPK_WNU.PPK_WRD().SYMBOL;
{? _sym='DRZW' | _sym='WOU'
:: Obsługa wyjątków - deklaracji / wniosków wspólnych dla uczestnika i dla osoby.
|| _typ:='x'
|? _sym='DRWD'
|| _sym:='DWWD'
?};
_maska:='ppk_wnu_%1_%2' [_typ,-_sym];

{? ~fexists('%1.rpt' [_maska],1)
|| return(0)
|? _check
|| return(1)
?};

{? 0
|| _wydruk:=_maska+$PPK_WNU.tm_stamp()+'.pdf';
   {? rep_exec(_maska,,,_wydruk,1)
   || _dest:='@'+tmp_dir()+exec('sep','#file')+_wydruk;
      {? fcopy(_wydruk,_dest,1,0,1)
      || ferase(_wydruk,1);
         cli_exec(1-_dest)
      ?}
   ?}
|| rep_exec(_maska)
?};

1


\dane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Formuła dla bieżącego rekordu tabeli PPK_WNU przygotowuje podstawowe dane potrzebne przy wydruku
::       deklaracji / wniosku.
::   WE:
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_dane:=obj_new('IMIONA','NAZWISKO','PESEL','DOK_TYP','DOK_SYM','PRACODAWCA','DATA');
{! _lp:=1 .. obj_len(_dane)
|! _dane[_lp]:=''
!};

PPK_WNU.OSOBA();
:: Pamiętajmy, ze wniosek dla osoby nie będzie miał wypełnionego pola PPK_WNU.PPK_UCZ.
PPK_WNU.PPK_UCZ();

_dane.IMIONA:=form(OSOBA.PIERWSZE+' '+OSOBA.DRUGIE);
_dane.NAZWISKO:=OSOBA.NAZWISKO;
_dane.PESEL:={? OSOBA.PESEL='' || OSOBA.UR_DATA$1 || OSOBA.PESEL ?};

{? OSOBA.OBCY<>'N'
|| _el:='UCZESTNIK_ZMIANA';
   _xel:=exec('szukaj','ppk_xel',_el);
   {? _xel=null()
   || _dane.DOK_TYP:='Nieprawidłowa konfiguracja.';
      _dane.DOK_SYM:='Brak definicji elementu "%1".' [_el]
   || _dokument:='';
      _BUF:=exec('_cfg','ppk_zdn',_el);

::    Najpierw poszukajmy w historii. Jeżeli jest to wniosek dla osoby, to historia i tak bedzie pusta.
      _jest:=0;
      {? PPK_WNU.PPK_UCZ
      || PPK_ZDN.cntx_psh();
         PPK_ZDN.index('XEL');
         PPK_ZDN.prefix(PPK_WNU.PPK_UCZ,_xel);
         {? PPK_ZDN.find_le(PPK_WNU.DATA)
         || {!
            |? {? PPK_ZDN.PPK_RDA
               || _BUF.read();
                  _jest:=1;
                  0
               || PPK_ZDN.prev()
               ?}
            !}
         ?};
         PPK_ZDN.cntx_pop()
      ?};
      {? ~_jest
::       Jeżeli nie znaleźliśmy w historii, to ustalmy na podstawie danych.
      || _BUF.set('s',PPK_WNU.DATA)
      ?};
      {? _BUF.TAB.DTOZ_TYP='D'
      || _dane.DOK_TYP:='Dowód osobisty';
         _dane.DOK_SYM:=_BUF.TAB.DTOZ_SYM
      |? _BUF.TAB.DTOZ_TYP='P'
      || _dane.DOK_TYP:='Paszport';
         _dane.DOK_SYM:=_BUF.TAB.DTOZ_SYM
      |? _BUF.TAB.DTOZ_TYP='I'
      || _dane.DOK_SYM:=_BUF.TAB.DTOZ_SYM
      |? _BUF.TAB.DTOZ_TYP=''
      || _dane.DOK_SYM:='NIE PODANO'
      ?}
   ?}
?};

_pracodawca:=KST.NAZWA;
exec('czytaj','#stalesys',PPK_WNU.DATA,KST,'NAZWA');
_dane.PRACODAWCA:=KST.NAZWA;
KST.NAZWA:=_pracodawca;

_dane.DATA:=PPK_WNU.DATA$1;

_dane


\spr_wym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Sprawdza przed weryfikacją wniosku o uczestnictwo czy osoba spełnia wymagania do zapisu do PPK.
::   WE:
::   WY: _ret [STRING] - ciąg pusty jeśli wszystko ok
::----------------------------------------------------------------------------------------------------------------------
_kom:='';
_ret:='';

PPK_WRD.cntx_psh();
:: Jeśli zaznaczono "merytorycznie poprawny" i jest to wniosek o uczestnictwo:
{? PPK_WNU.WER_STAT='T' & PPK_WNU.PPK_WRD().SYMBOL='WOU'
|| OSOBA.cntx_psh();
:: Czy zapisujemy z art. 134 (z dniem objęcia przez ustawę zatrudniony):
   _art134:=exec('aktywny','ppk_ucz',PPK_WNU.OSOBA,KST_PPK.UST_OD)
            & exec('zatr_url','ppk_ucz',PPK_WNU.OSOBA,KST_PPK.UST_OD);

:: Czy na datę zmiany OSOBA spełnia znamiona zatrudnionej (nie przebywa na bezpł. bez przychodu):
   _zatrUrl:=exec('zatr_url','ppk_ucz',PPK_WNU.OSOBA,PPK_WNU.OD);

:: Jeśli nie zapisujemy z art. 134 (nie był zatrudniony w momencie objęcia przez ustawę). Sprawdzamy staż:
   {? ~_art134
   || _OKR:=exec('okr_tab_tmp','ppk_ucz');
      _udo:=exec('okr_prac','ppk_ucz',_OKR);
      _okrPopZaw:={? var_pres('POP_ZAW',KST_PPK)>0 || KST_PPK.POP_ZAW || 14 ?};
      _uod:=exec('staz12','ppk_ucz',PPK_WNU.OD,_OKR,KST_PPK.ZAW_UM,PPK_WNU.OSOBA,_okrPopZaw);
::    Jeśli nie ma wymaganego stażu:
      {? ~#_uod
      || _kom:='W dniu %1r. %2 %3\nnie posiada wymaganego stażu pracy.\nCzy dodać uczestnika?'@[PPK_WNU.OD$6,
               PPK_WNU.OSOBA().PIERWSZE,PPK_WNU.OSOBA().NAZWISKO]
      ?}
   ?};
:: Jeśli nie wychwycony wcześniej, ale bez zatrudnienia w dacie zmiany:
   {? ~+_kom & ~_zatrUrl
   || _kom:='W dniu %1r. %2 %3\nprzebywa na urlopie bezpłatnym.\nCzy dodać uczestnika?'@[PPK_WNU.OD$6,
            PPK_WNU.OSOBA().PIERWSZE,PPK_WNU.OSOBA().NAZWISKO]
   ?};

:: Wyświetelenie pytania czy dodać mimo nie spełniania warunków:
   {? +_kom
   || {? ~FUN.choice(_kom,,'Tak')
      || _ret:='WER_STAT'
      ?}
   ?};
   OSOBA.cntx_pop()
?};
PPK_WRD.cntx_pop();

_ret


\spr_wnu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Sprawdza czy osoba posiada wniosek/deklarację o określonym symbolu w określonym przedziale dat.
::   WE: _a [REF]    - osoba (OSOBA.ref)
::      [_b][DATE]   -  data od, jeśli zerowa, lub brak - szukane wszystkie wstecz
::      [_c][DATE]   - data do, jeśli zerowa, lub brak - szukane do daty dzisiejszej
::       _d [STRING] - typ wniosku
::      [_e][NUMBER] - typ zwracanej wartości. Jeśli równy 1 to zwracana data OD wniosku
::      [_f][NUMEBR] - 0/1 szukaj niezależnie od umowy o prowadzenie PPK, domyślnie 0: tylko w bieżącej PPK_UMO
::   WY: Jeśli _e<>1 to: 0/1 - 0: nie posiada, 1: posiada
::       Jeśli _e=1  to: data wniosku PPK_WNU.OD, lub data zerowa jeśli brak wniosku. Jeśli jest kilka tego typu
::       wniosków w tym czasie, to jest zwracana data ostatniego.
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
_err:='Nie podano lub błędny typ parametru wejściowego'@;
{? var_pres('_a')<>7 || FUN.error('%1 %2'[_err,'_a']); return(~~) ?};
_osoba:=_a;
_dtOd:={? var_pres('_b')<>type_of(date()) || _d0 || _b ?};
_dtDo:={? var_pres('_c')<>type_of(date()) || _d0 || _c ?};
{? var_pres('_d')<>type_of('') || FUN.error('%1 %2'[_err,'_d']); return(~~) ?};
_wrdSym:=_d;
_retDt:={? var_pres('_e')<>type_of(0) || 0 || _e ?};
_bezUmo:={? var_pres('_f')<>type_of(0) || 0 || _f ?};

_ret:=0;
_dzis:=date();
{? _dtDo=_d0
|| _dtDo:=_dzis
?};
{? _dtDo<_dtOd
|| FUN.error('Data OD nie może być większa od daty DO'@);
   return(~~)
?};
_dtSt:={? _dtOd<>_d0 || _dtOd |? _dtDo<_dzis || _dtDo || _dzis ?};
{? ~_bezUmo
|| exec('czytaj','#stalesys',_dtSt,KST_PPK,'PPK_UMO');
   {? KST_PPK.PPK_UMO=null()
   || exec('init','ppk_umo',_dtSt)
   ?}
?};

PPK_WNU.cntx_psh();
PPK_WNU.index('UMO_WRD');
{? _bezUmo
|| PPK_WNU.prefix();
   PPK_WNU.f_set('OD',
                 'join PPK_WRD using(PPK_WNU.PPK_WRD,PPK_WRD.REFERENCE)',
                 'PPK_WNU.OSOBA=:_a and PPK_WNU.OD<=to_date(:_b) and PPK_WNU.OD>=to_date(:_c)
                  and PPK_WRD.SYMBOL=\':_d\'',
                 _osoba,_dtDo,_dtOd,_wrdSym);
   {? PPK_WNU.f_last()
   || _ret:={? _retDt || PPK_WNU.OD || 1 ?}
   || _ret:={? _retDt || _d0 || 0 ?}
   ?};
   PPK_WNU.f_clear()
|| PPK_WNU.prefix(KST_PPK.PPK_UMO,_osoba,_wrdSym);
   {? PPK_WNU.find_le(_dtDo) & PPK_WNU.OD>=_dtOd
   || _ret:={? _retDt || PPK_WNU.OD || 1 ?}
   || _ret:={? _retDt || _d0 || 0 ?}
   ?}
?};
PPK_WNU.cntx_pop();

_ret


\pprz_wpl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wyszukuje informacje o procentach wpłat w okresie przed daną datą, po wprowadzeniu danego typu wniosku
::       zmieniającego wysokości wpłat (np. DRZW).
::   WE: _a [_PPK_UCZ] - wskazanie uczestnika planu
::       _b [_OSOBA] - wskazanie osoby właściwej dla uczestnika planu
::       _c [DATE] - data, od której należy zacząć poszukiwania (zazwyczaj data złożenia wniosku WODW itp.)
::       _d [INTEGER] - wskazanie opisu składnika listy płac (R.RN)
::       _e [STRING] - typ wniosku zmieniającego wysokości wpłat (np. DRZW)
::   WY: ~~ jeśli nie znaleziono wpłaty przed blokadą z art. 25, wskazanie na tablicę nazwaną z danymi wpłaty
::----------------------------------------------------------------------------------------------------------------------
_ret:=~~;
_err:='Nie podano lub błędny typ parametru wejściowego';
{? var_pres('_a')<>7 || FUN.error('%1 %2'[_err,'_a']); return(~~) ?};
_ppk_ucz:=_a;
{? var_pres('_b')<>7 || FUN.error('%1 %2'[_err,'_b']); return(~~) ?};
_osoba:=_b;
{? var_pres('_c')<>type_of(date()) || FUN.error('%1 %2'[_err,'_c']); return(~~) ?};
_data_od:=_c;
{? var_pres('_d')<>type_of(0) || FUN.error('%1 %2'[_err,'_d']); return(~~) ?};
_rub_num:=_d;
{? var_pres('_e')<>type_of('') || FUN.error('%1 %2'[_err,'_e']); return(~~) ?};
_wnTyp:=_e;

PPK_WNU.cntx_psh();
PPK_WNU.index('UCZ_OD');
PPK_WNU.prefix(_ppk_ucz);
{? ~PPK_WNU.find_tab(,
      'PPK_WRD','SYMBOL','=',_wnTyp,
      'OD',,'<=',_data_od
   )
:: Brak wniosku zmieniającego wysokości wpłat (np. DRZW):
|| PPK_WNU.cntx_pop();
   return()
|| _data_od:=PPK_WNU.OD-1
?};
PPK_WNU.cntx_pop();

_nieZwnTyp:=
   "_ret:=1;
    PPK_PNW.cntx_psh();
    PPK_PNW.index('PPK_PWP');
    PPK_PNW.prefix(_a);
    {? PPK_PNW.first()
    || PPK_WPW.cntx_psh();
       PPK_WNU.cntx_psh();
       PPK_WRD.cntx_psh();
       _ret:=(PPK_PNW.PPK_WPW().PPK_WNU().PPK_WRD().SYMBOL<>_b);
       PPK_WRD.cntx_pop();
       PPK_WNU.cntx_pop();
       PPK_WPW.cntx_pop()
    ?};
    PPK_PNW.cntx_pop();
    _ret
   ";

PPK_PWP.cntx_psh();
PPK_PWP.index('RNOD');
PPK_PWP.prefix(exec('firma','ustawienia'),$_osoba,_rub_num);
{? PPK_PWP.find_le(_data_od)
|| _loop:=1;
   {!
   |? _loop
   |! {? PPK_PWP.SR<>'O' & _nieZwnTyp(PPK_PWP.ref(),_wnTyp)
      || _val:=obj_new('BLOKADA','ZMIANA','STAWKA');
         _val.BLOKADA:=PPK_PWP.BLOKADA;
         _val.ZMIANA:=PPK_PWP.ZMIANA;
         _val.STAWKA:=PPK_PWP.STAWKA;
         PPK_PWP.cntx_pop();
         return(_val)
      ?};
      _loop:=PPK_PWP.prev()
   !}
?};
PPK_PWP.cntx_pop();

_ret


\dane_wif
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła dla bieżącego rekordu tabeli PPK_WNU przygotowuje dane dotyczące instytucji finansowych uczestnika
::       potrzebne przy wydruku deklaracji / wniosku.
::   WE:
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_WIF:=tab_tmp(,'NAZWA','STRING[100]','Nazwa IF','NIP','STRING[13]','NIP IF','NR_RACH','STRING[50]','Numer rachunku');

PPK_WIF.cntx_psh();
PPK_WIF.index('UNIQUE');
PPK_WIF.prefix(PPK_WNU.ref());
ADRES.cntx_psh();
ADRES.prefix();
{? PPK_WIF.first()
|| {!
   |? {? PPK_WIF.BLOKADA<>'T'
      || _WIF.NAZWA:=PPK_WIF.ADRES().NAZWA;
         _WIF.NIP:=ADRES.NIP;
         _WIF.NR_RACH:=PPK_WIF.NR_RACH;
         _WIF.add(1)
      ?};

      PPK_WIF.next()
   !}
?};
ADRES.cntx_pop();
PPK_WIF.cntx_pop();

_WIF


\gr_dodaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wprowadza wnioski dla wybranej grupy uczestników.
::   WE: _a [OBJECT] - wskazanie obiektu zwracane przez formułę exec('gr_param','ppk_wnu')
::       _b [OBJECT] - wskazanie obiektu zwracane przez formułę exec('gr_param','ppk_ucz')
::       _c [FORMULA/STRING] - treść formuły odpowiedzialnej za uzupełnienie wniosku
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par_wnu:=_a;
_par_ucz:=_b;
_wykonaj:=
   {? var_pres('_c')=type_of('') || $_c
   |? var_pres('_c')=type_of("") || _c
   || "1"
   ?};

:: pobierz informacje o wniosku
_wnu:=exec('gr_ustaw','ppk_wnu',_par_wnu);
{? _wnu.USTAW=0
|| return()
?};

:: wybierz spośród dostępnych uczestników
_ucz:=exec('gr_wybor','ppk_ucz',_par_ucz);
{? _ucz.WYBOR=0
|| return()
?};

:: skrócone odwołania
_WNIOSEK:=_wnu.WNIOSEK;
_LISTA:=_ucz.LISTA;

_LISTA.f_set(,,'WYBRANY=\'T\'');
_size:=_LISTA.f_size();
{? _size=0
|| return()
?};

_ppk_wrd:=null;
PPK_WRD.cntx_psh();
{? PPK_WRD.seek(_WNIOSEK.PPK_WRD,,1)
|| _ppk_wrd:=PPK_WRD.ref()
?};
PPK_WRD.cntx_pop();
{? _ppk_wrd=null
|| return()
?};

OSOBA.cntx_psh();
OSOBA.prefix();
PPK_UCZ.cntx_psh();
PPK_UCZ.prefix();
PPK_WNU.cntx_psh();
PPK_WNU.prefix();
PPK_WST.cntx_psh();
PPK_WST.index('RN');
PPK_WST.prefix(_ppk_wrd);

:: parametry wprowadzania wniosku
_par:=obj_new('WNIOSEK','STATUS','INFO');
_par.WNIOSEK:=_WNIOSEK;
_cnt:=0;

:: przetwarzaj wybrane
_loop:=_LISTA.f_first();
{!
|? _loop
|! progress(100*(_cnt+=1)/_size,'Trwa rejestrowanie wniosków...'@,FUN.TYT);
   {? PPK_UCZ.seek(_LISTA.PPK_UCZ)
   || PPK_UCZ.OSOBA();
::    parametry zmienne
      _par.STATUS:=~~;
      _par.INFO:='';

      PPK_WNU.blank();
      PPK_WNU.TYP:='U';
      PPK_WNU.PPK_UCZ:=PPK_UCZ.ref();
      PPK_WNU.PPK_WRD:=_ppk_wrd;
      PPK_WNU.DATA:=_WNIOSEK.DATA;
      PPK_WNU.OD:=_WNIOSEK.OD;
      PPK_WNU.REJ_TRYB:='R';
      PPK_WNU.REJ_DATA:=date();
      PPK_WNU.REJ_KTO:=OPERATOR.USER().DANE;
      PPK_WNU.memo_set(_WNIOSEK.memo_txt(,1,'WER_INFO'),'WER_INFO');
      exec('wrd_ae','ppk_wnu');
      PPK_WNU.WER_STAT:='T';
      {? PPK_WNU.WER_WYM='T'
      || exec('w_st_ae','ppk_wnu')
      ?};
      do();
      {? PPK_WNU.add() & PPK_WNU.memo_put(,'WER_INFO')
      || _par.STATUS:=1;
         PPK_WPW.cntx_psh();
         PPK_WPW.clear();
         _loop:=PPK_WST.first();
         {!
         |? _loop & do_state()=1
         |! PPK_WPW.blank(1);
            PPK_WPW.PPK_WNU:=PPK_WNU.ref();
            PPK_WPW.R:=PPK_WST.R;
            PPK_WPW.BLOKADA:=PPK_WST.BLOKADA;
            PPK_WPW.ZMIANA:=PPK_WST.ZMIANA;
            {? PPK_WPW.add()=0
            || _par.STATUS:=0;
               _par.INFO:='Dołączenie "%1" nie powiodło się.'@[PPK_WST.R().RT]
            ?};
            _loop:=PPK_WST.next()
         !};
         PPK_WPW.cntx_pop();

         {? _par.STATUS<>0
         || _wykonaj(_par);
            end();
::          spróbuj wprowadzić do ewidencji
            {? (_msg:=exec('pwp_akt','ppk_wnu',1))<>''
            || _par.STATUS:=-1;
               _par.INFO:=_msg
            ?}
         || undo()
         ?}

      || undo();
         _par.STATUS:=0;
         _par.INFO:='Utworzenie wniosku nie powiodło się.'@
      ?};
      end();

      _LISTA.STATUS:=
         {? type_of(_par.STATUS)=type_of(0)
         || {? _par.STATUS<0 || 'ostrzeżenie'@
            |? _par.STATUS=0 || 'błąd'@
            || 'sukces'@
            ?}
         |? type_of(_par.STATUS)=type_of('')
         || _par.STATUS
         || 'nieznany'@
         ?};
      _LISTA.memo_set(_par.INFO,'INFO');
      _LISTA.put() & _LISTA.memo_put(,'INFO')

   || _LISTA.STATUS:='błąd';
      _LISTA.memo_set('Nie znaleziono uczestnika.'@,'INFO');
      _LISTA.put() & _LISTA.memo_put(,'INFO')
   ?};
   _loop:=_LISTA.f_next()
!};

PPK_WST.cntx_pop();
PPK_WNU.cntx_pop();
PPK_UCZ.cntx_pop();
OSOBA.cntx_pop();
prgs_clr();

:: okno raportu wykonania
_wnd:=exec('gr_oknor','ppk_ucz',_LISTA);

:: obsługa raportu wykonania
exec('gr_akcje','ppk_ucz',_LISTA,_wnd);

:: wyświetl raport
_LISTA.win_sel(_wnd);
_LISTA.f_first();
_LISTA.select();
~~


\gr_ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Pobiera informacje niezbędne do wprowadzenia wniosku.
::   WE: _a [OBJECT] - wskazanie obiektu zwracane przez formułę exec('gr_param','ppk_wnu')
::   WY: wskazanie tablicy zawierającej:
::          USTAW INTEGER - 0/1 - zrezygnowano/zatwierdzono
::          WNIOSEK TABLE - alias tabeli zawierającej informacje o wniosku
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

_ret:=obj_new('USTAW','WNIOSEK');
_ret.USTAW:=0;
_ret.WNIOSEK:=~~;

PPK_WRD.cntx_psh();
{? (_wrd:=exec('szukaj','ppk_wrd',_par.RODZAJ,_par.SYMBOL))=null
|| FUN.emsg('Nie znaleziono rodzaju wniosku o kodzie "%1".'@[_par.SYMBOL]);
   PPK_WRD.cntx_pop();
   return(_ret)
|? PPK_WRD.seek(_wrd,,1)=0
|| FUN.error('Wiersz o wskazaniu "%1" nie istnieje.'@[$_wrd]);
   PPK_WRD.cntx_pop();
   return(_ret)
?};

_BUF:=exec('gr_bufor','ppk_wnu',_wrd,_par.EXT_TAB);
:: parametry zawsze istniejące
_BUF.DATA:=_par.DATA;
_BUF.OD:=_par.OD;
:: dodatkowe parametry
(_par.EXT_VAL)(_BUF);
_BUF.add();

_dalej:=1;
{? _par.EDYCJA<>0
|| _wnd:=exec('gr_oknor','ppk_wnu',_BUF,_par.EXT_WND);
   _BUF.win_edit(_wnd);
   _BUF.hdr_edit('%1 (%2)'[PPK_WRD.OPIS,PPK_WRD.SYMBOL]);
   _dalej:=_BUF.edit($("
      _chk:=exec('gr_test','ppk_wnu',cur_tab(1,1));
      {? (type_of(_chk)=type_of('') & _chk<>'') |
         (type_of(_chk)=type_of(0) & _chk=0)
      || return(_chk)
      ?};
      "+"
      _chk:=($('"+_par.TEST+"'))(cur_tab(1,1));
      {? (type_of(_chk)=type_of('') & _chk<>'') |
         (type_of(_chk)=type_of(0) & _chk=0)
      || return(_chk)
      ?};
      1
   "))
?};

{? _dalej & _BUF.put() & _BUF.memo_put(,'WER_INFO')
|| _ret.USTAW:=1;
   _par.WNIOSEK:=_BUF;
   _ret.WNIOSEK:=_BUF
?};
PPK_WRD.cntx_pop();

_ret


\gr_param
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy tablicę parametrów edytora wniosku.
::   WE:
::   WY: wskazanie tablicy nazwanej o strukturze:
::       RODZAJ [STRING] - rodzaj wniosku
::       SYMBOL [STRING] - symbol wniosku
::       DATA [DATE] - data złożenia
::       OD [DATE] - data zmiany
::       EDYCJA [INTEGER] - edycja danych wniosku
::       TEST [FORMULA/STRING] - treść formuły dodatkowo sprawdzającej poprawność danych
::       EXT_TAB [OBJECT] - wskazanie tablicy zawierającej definicje dodatkowych pól
::       EXT_VAL [FORMULA/STRING] - treść formuły uzupełniającej dodatkowe pola
::       EXT_WND [FORMULA/STRING] - treść formuły wstawiającej dodatkowe pola
::       OBJ [ANY] - dane dowolnego przeznaczenia
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new(
:: parametry wejściowe
   'RODZAJ','SYMBOL','DATA','OD',
   'EDYCJA','TEST','EXT_TAB','EXT_VAL','EXT_WND',
:: parametry wewnętrzne
   'WNIOSEK','OBJ'
);

_par.RODZAJ:='U';
_par.SYMBOL:='';
_par.DATA:=date();
_par.OD:=date();
_par.EDYCJA:=1;
_par.TEST:="1";
_par.EXT_TAB:=~~;
_par.EXT_VAL:="~~";
_par.EXT_WND:="~~";
_par.WNIOSEK:=~~;
_par.OBJ:=~~;

_par


\gr_bufor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy alias tabeli tymczasowej zawierającej informacje o wprowadzanym wniosku.
::   WE: _a _PPK_WRD - wskazanie rodzaju wniosku
::       _b [OBJECT] - wskazanie tablicy zawierającej definicje dodatkowych kolumn
::   WY: alias tabeli tymczasowej lub ~~ jeśli nie udało się jej utworzyć
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_wrd:=_a;

_fml:="tab_tmp(1,
   'PPK_WRD','STRING[16]','Rodzaj wniosku'@,
   'DATA','DATE','Data złożenia'@,
   'OD','DATE','Data zmiany'@,
   'WER_INFO','SYS_MEMO','Wyjaśnienie'@
";

PPK_WST.cntx_psh();
PPK_WST.index('RN');
PPK_WST.prefix(_wrd);
_loop:=PPK_WST.first();
{!
|? _loop
|! _rn:=$PPK_WST.R().RN;
   _fml+=
      ',\'BL'+_rn+'\',\'STRING[1]\',\''+R.RT+'\''+
      ',\'ZM'+_rn+'\',\'STRING[1]\',\''+R.RT+'\''+
      ',\'KW'+_rn+'\',\'REAL\',\''+R.RT+'\'';
   _loop:=PPK_WST.next()
!};

{? var_pres('_b')>=100
:: dodatkowe kolumny
|| _str:=type_of('');
   _def:=_b;
   _len:=obj_len(_def);
   {! _ii:=1.._len
   |! _fml+=',';
      {? var_pres('['+$_ii+']',_def)=_str
      || _fml+='\''+_def[_ii]+'\''
      ?}
   !}
?};

_BUF:=($(_fml+")"))();

_BUF.PPK_WRD:=$_wrd;
_loop:=PPK_WST.first();
{!
|? _loop
|! _rn:=$PPK_WST.R().RN;
   ($('_a.BL'+_rn+':=_b'))(_BUF,PPK_WST.BLOKADA);
   ($('_a.ZM'+_rn+':=_b'))(_BUF,PPK_WST.ZMIANA);
   _loop:=PPK_WST.next()
!};
PPK_WST.cntx_pop();

_BUF


\gr_oknor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy okienko redagowania tabeli tymczasowej zawierającej informacje o wniosku.
::   WE: _a TABLE - alias tabeli tymczasowej zawierającej dane wniosku zwracanej przez exec('gr_bufor','ppk_wnu')
::       _b [FORMULA/STRING] - treść formuły wstawiającej dodatkowe pola, wywoływanej z argumentami: _a alias tabeli,
::          _b akronim okienka
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;
_ext:=
:: dodatkowe kolumny
   {? var_pres('_b')=type_of('') || $_b
   |? var_pres('_b')=type_of("") || _b
   || ""
   ?};

_wnd:=_BUF.mk_edit(,0,'#gr_ppk_wnu');

_BUF.win_efld(_wnd,,'DATA',,,,,,,,MS.name(PPK_WNU,'DATA'));
_BUF.win_efld(_wnd,,'OD',,,,,,,,MS.name(PPK_WNU,'OD'));
_BUF.win_efld(_wnd,,'WER_INFO',,,50,-5,,,,MS.name(PPK_WNU,'WER_INFO'));
:: dodatkowe pola
_ext(_BUF,_wnd);
:: standardowe przyciski
exec('ok_esc','#window',_BUF,_wnd,,,,,,'Tworzenie wniosków zgodnych z podanym wzorcem','Utwórz'@);

_wnd


\gr_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy wnioski dla grupy uczestników.
::   WE: _a TABLE - alias tabeli zawierającej informacje o wniosku zwracanej przez exec('gr_bufor','ppk_wnu')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;

_chk:=__CHK.table(_BUF,0,,'DATA','OD');
{? type_of(_chk)=type_of('') & _chk<>''
|| return(_chk)
?};

{? _BUF.OD<_BUF.DATA
|| FUN.emsg('Wprowadzono niespójne daty.'@);
   return('OD')
?};

1


\dod_dfwu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyszukuje informacje o wpłacie w okresie przed daną datą.
::   WE: _a _PPPK_UCZ - wskazanie uczestnika planu
::       _b _OSOBA - wskazanie osoby właściwej dla uczestnika planu
::       _c DATE - data, od której należy zacząć poszukiwania (zazwyczaj data złożenia wniosku DFWU)
::       _d _R - wskazanie opisu składnika listy płac
::   WY: ~~ jeśli nie znaleziono wpłaty przed blokadą z art. 25, wskazanie na tablicę nazwaną z danymi wpłaty
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ppk_ucz:=_a;
_osoba:=_b;
_data_od:=_c;
_rub_num:=_d;

PPK_WNU.cntx_psh();
PPK_WNU.index('UCZ_OD');
PPK_WNU.prefix(_ppk_ucz);
{? ~PPK_WNU.find_tab(,
      'PPK_WRD','SYMBOL','=','WB25B',
      'DATA',,'<=',_data_od
   )
:: brak blokady wpłat na podstawie art. 25
|| PPK_WNU.cntx_pop();
   return()

|| {? PPK_WNU.find_tab(,
      'PPK_WRD','SYMBOL','=','WB25W',
      'DATA',,'>',PPK_WNU.DATA,
      'DATA',,'<=',_data_od
      )
::    zniesienie blokady na podstawie art. 25
   || PPK_WNU.cntx_pop();
      return()
   ?};
   _data_od:=PPK_WNU.DATA-1
?};
PPK_WNU.cntx_pop();

PPK_PWP.cntx_psh();
PPK_PWP.index('RNOD');
PPK_PWP.prefix(REF.FIRMA,$_osoba,_rub_num);
{? PPK_PWP.find_le(_data_od)
|| _loop:=1;
   {!
   |? _loop
   |! {? PPK_PWP.SR<>'O'
      || _val:=obj_new('BLOKADA','ZMIANA','STAWKA');
         _val.BLOKADA:=PPK_PWP.BLOKADA;
         _val.ZMIANA:=PPK_PWP.ZMIANA;
         _val.STAWKA:=PPK_PWP.STAWKA;
         PPK_PWP.cntx_pop();
         return(_val)
      ?};
      _loop:=PPK_PWP.prev()
   !}
?};
PPK_PWP.cntx_pop();
~~


\spr_wnu_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Sprawdza czy osoba posiada wniosek/deklarację o określonym symbolu po określonej dacie.
::   WE: _a [REF]    - osoba (OSOBA.ref)
::       _b [STRING] - typ (symbol) wniosku
::      [_c][DATE]   -  data od której szukamy (włącznie), jeśli zerowa, lub brak - szukane wszystkie
::      [_d][NUMEBR] - 0/1 szukaj niezależnie od umowy o prowadzenie PPK, domyślnie 0: tylko w bieżącej PPK_UMO
::      [_e][NUMEBR] - 0/1 tylko zweryfikowane wnioski, domyślnie 0: wszystkie
::      [_f][NUMEBR] - 0/1 tylko wnioski osób (bez wypełnionego uczestnika), domyślnie 0: wszystkie
::      [_g][NUMBER] - typ zwracanej wartości:
::                      0 - 0/1 nie posiada/posiada [domyślnie]
::                      1 - data OD wniosku znalezionego wniosku, jeśli kilka to ostatniego z nich.
::   WY: [NUMBER/DATE] - w zależności od parametru _g
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
_err:='Nie podano lub błędny typ parametru wejściowego'@;
{? var_pres('_a')<>7 || FUN.error('%1 %2'[_err,'_a']); return(~~) ?};
{? var_pres('_b')<>type_of('') || FUN.error('%1 %2'[_err,'_b']); return(~~) ?};
_osoba:=_a;
_wrdSym:=_b;
_dtOd:={? var_pres('_c')<>type_of(date()) || _d0 || _c ?};
_bezUmo:={? var_pres('_d')<>type_of(0) || 0 || _d ?};
_tWer:={? var_pres('_e')<>type_of(0) || 0 || _e ?};
_tOsob:={? var_pres('_f')<>type_of(0) || 0 || _f ?};
_retDt:={? var_pres('_g')<>type_of(0) || 0 || _g ?};
_ret:={? _retDt || _d0 || 0 ?};

{? ~_bezUmo
|| _dtSt:={? _dtOd<>_d0 || _dtOd || date() ?};
   exec('czytaj','#stalesys',_dtSt,KST_PPK,'PPK_UMO');
   {? KST_PPK.PPK_UMO=null()
   || exec('init','ppk_umo',_dtSt)
   ?}
?};

_WNU:=sql('
   select PPK_WNU.OD
   from PPK_WNU join PPK_WRD using(PPK_WNU.PPK_WRD,PPK_WRD.REFERENCE)
   where PPK_WNU.OSOBA=:_a and PPK_WRD.SYMBOL=\':_b\' and PPK_WNU.FIRMA=:_c '+
   {? _dtOd<>_d0
   || 'and PPK_WNU.OD>=to_date(:_d) '
   || ' '
   ?}+
   {? ~_bezUmo
   || 'and PPK_WNU.PPK_UMO=:_e '
   || ' '
   ?}+
   {? _tWer
   || 'and PPK_WNU.WER_STAT=\'T\' '
   || ' '
   ?}+
   {? _tOsob
   || 'and PPK_WNU.PPK_UCZ is null '
   || ' '
   ?}+'
   order by 1',
   _osoba,_wrdSym,exec('ref_firma','ustawienia'),_dtOd,KST_PPK.PPK_UMO);

{? _WNU.last()
|| _ret:={? _retDt || _WNU.OD || 1 ?}
?};
obj_del(_WNU);

_ret


\ppk_wnu_color
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła zwraca kolor zapisu w tabeli PPK_WNU (rekord przed)
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPK_WNU.PPK_RDA
|| 'PPK_WNU#01#01'
|? ~PPK_WNU.PPK_UCZ
|| 'PPK_WNU#01#02'
|| ''
?}

:Sign Version 2.0 jowisz:1045 2023/09/25 07:08:08 4483dae097e654179b59384ca7e55c5c9fa9ab3f056f67cdd4e6b21a46c457e54d12ed0fbfcc97d0bafe8a2ee7160ca19de4486e78e620eb4647b527fa51bbee70a13bb6ae6632f50173ff7729b4fe83dfcd54b45e920d3ce9cc40a5247d0525d56b4829f0d88eb452e68222e033fc3459fbb4a52af086ff4cecf6bb6a9a2f24
