:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: plan_dostaw.fml [17.00]
:: Utworzony: 2015-01-20
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Formuły do obsługi planu dostaw - wspólne
::======================================================================================================================


\pd_d_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: wartość początkowa pola PD_D.TYP
::----------------------------------------------------------------------------------------------------------------------
PD_Z.TYP


\pd_d_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed dołącz PD_D
::  OLD: \pd_d_ba/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
PD_D.blank();
PD_D.win_edit('RED');
exec('pd_d_hdr','plan_dostaw');
{!
|? PD_D.memo_get();
   {? PD_D.edit("__CHK.record(PD_D,,'KOD','FORMULA')")
   ||
      do();
      PD_D.memo_put();
      PD_D.cntx_psh();
      PD_D.index('KOD'); PD_D.prefix(PD_D.KOD,PD_D.KOD);
      {? PD_D.first()
      ||
         undo();
         FUN.info('Formuła o kodzie %1 już istnieje.'@[PD_D.KOD])
      ?};
      PD_D.cntx_pop();
      PD_D.add();
      ~end()
   ?}
!};
0


\pd_d_bu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed popraw PD_D
::  OLD: \pd_d_bu/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
_kod:=PD_D.KOD;
_formula:=PD_D.FORMULA;

PD_D.win_edit('RED');
exec('pd_d_hdr','plan_dostaw');
PD_D.memo_get();
{? PD_D.edit("__CHK.record(PD_D,,'KOD','FORMULA')")
||
   do();
   PD_D.memo_put();
   {? PD_D.KOD<>_kod | PD_D.FORMULA<>_formula
   ||
      _ref:=PD_D.ref();
      PD_D.cntx_psh();
      PD_D.index('KOD'); PD_D.prefix(PD_D.KOD,PD_D.KOD);
      {? PD_D.first() & PD_D.ref()<>_ref
      ||
         undo();
         FUN.info('Formuła o kodzie %1 już istnieje.'@[PD_D.KOD])
      ?};
      PD_D.cntx_pop()
   ?};
   PD_D.put();
   end()
?};
0


\pd_d_hdr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: header dla okienka
::----------------------------------------------------------------------------------------------------------------------
_hdr:={? PD_Z.TYP='S'
      || ': '+'analiza stanu magazynowego'@
      |? PD_Z.TYP='C'
      || ': '+'analiza cechy stanu'@
      |? PD_Z.TYP='U'
      || ': '+'uzupełnienia stanu'@
      || ''
      ?};
PD_D.hdr_edit(_hdr);
1


\pd_buf_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: dodaje zapis w PD_BUF
::   WE: _[1] .. _[10] - kolejne wartości dla PD_BUF
::  OLD: \pd_buf_add/pd_buf.fml
::----------------------------------------------------------------------------------------------------------------------
PD_BUF.prefix();
PD_BUF.D:=_[1];
PD_BUF.T:=_[2];
PD_BUF.KOD:=_[3];
PD_BUF.ODDZ:=_[4];
PD_BUF.MG:=_[5];
PD_BUF.M:=_[6];
M.cntx_psh();
PD_BUF.DK_C:={? PD_BUF.M().M_ATR || _[7] || null() ?};
M.cntx_pop();
PD_BUF.IL:=_[8];
PD_BUF.WSP:=_[9];
PD_BUF.REF:=_[10];
PD_BUF.TMSTAMP:=PD_BUF.tm_stamp();
{? PD_BUF.add()
||
   exec('pd_p_refresh','plan_dostaw',PD_BUF.M,PD_BUF.TMSTAMP,PD_BUF.REF);
   1
?}


\pd_buf_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: aktualizuje zapis w PD_BUF
::   WE: _[1] .. _[10] - kolejne wartości dla PD_BUF
::  OLD: \pd_buf_put/pd_buf.fml
::----------------------------------------------------------------------------------------------------------------------
PD_BUF.index('REF'); PD_BUF.prefix(_[3],_[10]);
{? PD_BUF.first()
||
   PD_BUF.D:=_[1];
   PD_BUF.T:=_[2];
   PD_BUF.KOD:=_[3];
   PD_BUF.ODDZ:=_[4];
   PD_BUF.MG:=_[5];
   PD_BUF.M:=_[6];
   M.cntx_psh();
   PD_BUF.DK_C:={? PD_BUF.M().M_ATR || _[7] || null() ?};
   M.cntx_pop();
   PD_BUF.IL:=_[8];
   PD_BUF.WSP:=_[9];
   PD_BUF.REF:=_[10];
   PD_BUF.TMSTAMP:=PD_BUF.tm_stamp();
   {? PD_BUF.put()
   || exec('pd_p_refresh','plan_dostaw',PD_BUF.M,PD_BUF.TMSTAMP)
   ?}
||
   exec('pd_buf_add','plan_dostaw',_[1],_[2],_[3],_[4],_[5],_[6],_[7],_[8],_[9],_[10],_[10])
?}


\pd_buf_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: usuwa zapis w PD_BUF
::   WE: _[1] - PD_BUF.KOD
::       _[2] - ZRODLO.ref
::  OLD: \pd_buf_del/pd_buf.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
PD_BUF.index('REF'); PD_BUF.prefix(_[1],_[2]);
{? PD_BUF.first() || exec('pd_p_refresh','plan_dostaw',PD_BUF.M,PD_BUF.TMSTAMP); _wyn:=PD_BUF.del(1,1) ?};
_wyn


\pd_buf_erase
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: usuwa zapisy z bufora planu dostaw
::   WE: _a - PD_BUF_D.KOD
::  OLD: \pd_buf_erase/pd_buf.fml
::----------------------------------------------------------------------------------------------------------------------
PD_BUF.cntx_psh();
PD_BUF.index('KOD'); PD_BUF.prefix(_a,_a);
{? PD_BUF.first() || {! |? exec('pd_p_refresh','plan_dostaw',PD_BUF.M,PD_BUF.TMSTAMP); PD_BUF.del() !} ?};
PD_BUF.cntx_pop()


\pd_p_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: aktualizacja PD_P.REFRESH
::   WE: _a - M.ref()
::       _b - tm_stamp
::       _c - $ref aktualizowanego rekordu
::  OLD: \pd_p_refresh/pd_p.fml
::----------------------------------------------------------------------------------------------------------------------
PD_P.cntx_psh();
PD_P.index('REFRESH');
PD_P.prefix('N',_a);
_loop:=PD_P.first();
{!
|? _loop
|!
   PD_P.TMSTAMPB:=_b;
   {? PD_P.REFRESH<>'Z' & PD_Z.REFRESH || PD_P.REFRESH:='T' ?};
   _loop:=PD_P.put() & PD_P.next()
!};
PD_P.cntx_pop()


\core_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: parametr funkcji exec('core','plan_dostaw')
::  OLD: \core_a/pd_df.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('TXT','LEG_KOD','T','K','I','S','C1','C2','C3','UI','U','V','DD','P','O','STAT');
:: tekst formuly
_args.TXT:='';
:: kod legendy
_args.LEG_KOD:='';
:: formula tekstu
_args.T:="return('Nie dotyczy.')";
:: formula koloru
_args.K:="return('Nie dotyczy.')";
:: formula ikony
_args.I:="return('')";
:: formula stanu
_args.S:="return('Nie dotyczy.')";
:: formula cechy stanu wg magazynu
_args.C1:="return('Nie dotyczy.')";
:: formula cechy stanu wg dat
_args.C2:="return('Nie dotyczy.')";
:: formula cechy stanu wg atrybutow
_args.C3:="return('Nie dotyczy.')";
:: formula uzupelnienia stanu - inicjujaca
_args.UI:="return('Nie dotyczy.')";
:: formula uzupelnienia stanu
_args.U:="return('Nie dotyczy.')";
:: formula na wyswietl
_args.V:="return('Nie dotyczy.')";
:: formula dostawy dedykowanej
_args.DD:="return('Nie dotyczy.')";
:: akcja 'popraw'
_args.P:="0";
:: akcja 'powiadomienie'
_args.O:="0";
:: pozycja planu - formuła na Stan, Brak - data, Brak - ilość
_args.STAT:="";
:: zwraca tablice
_args


\core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: funkcja obsługi formuł planu dostaw
::   WE: wynik exec('core_a','plan_dostaw')
::  OLD: \core/pd_df.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;
_paramsb:=_b;

:: typ
{? _paramsb.B.PAR='T' || _paramsa.T(_paramsa,_paramsb)
:: kolor
|? _paramsb.B.PAR='K' || _paramsa.K(_paramsa,_paramsb)
:: ikona
|? _paramsb.B.PAR='I' || _paramsa.I(_paramsa,_paramsb)
:: stan
|? _paramsb.B.PAR='S' || _paramsa.S(_paramsa,_paramsb)
:: cechy stanu wg magazynow
|? _paramsb.B.PAR='C1' || _paramsa.C1(_paramsa,_paramsb)
:: cechy stanu wg dat
|? _paramsb.B.PAR='C2' || _paramsa.C2(_paramsa,_paramsb)
:: cechy stanu wg atrybutow
|? _paramsb.B.PAR='C3' || _paramsa.C3(_paramsa,_paramsb)
:: uzupelnienie stanu - inicjujaca
|? _paramsb.B.PAR='UI' || _paramsa.UI(_paramsa,_paramsb)
:: uzupelnienie stanu
|? _paramsb.B.PAR='U' || _paramsa.U(_paramsa,_paramsb)
:: podglad zrodla
|? _paramsb.B.PAR='V' || _paramsa.V(_paramsa,_paramsb)
:: dostawa dedykowana
|? _paramsb.B.PAR='DD' || _paramsa.DD(_paramsa,_paramsb)
:: poprawianie zrodla
|? _paramsb.B.PAR='P' || _paramsa.P(_paramsa,_paramsb)
:: wyslanie powiadomienia do zrodla
|? _paramsb.B.PAR='O' || _paramsa.O(_paramsa,_paramsb)
:: stan pozycji planu
|? _paramsb.B.PAR='STAT' || _paramsa.STAT(_paramsa,_paramsb)
?}


\autil_dwo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: data zawiera sie w okresie
::   WE: _a - data - data
::       _b - data - czas
::       _c - okres - data
::       _d - okres - czas
::  OLD: \autil_dwo/pd_df.fml
::----------------------------------------------------------------------------------------------------------------------
{? _c=date(0,0,0)
|| 1
||
::   exec('create','#tm_stamp',_a,_b)<=exec('create','#tm_stamp',_c,_d)
   _a<_c | _a=_c & _b<=_d
?}


\pda_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: argument funkcji: exec('pda','plan_dostaw'),
::       exec('stan','plan_dostaw'), exec('uzup','plan_dostaw')
::       , exec('cechy1','plan_dostaw'), exec('cechy2','plan_dostaw')
::       , exec('core','plan_dostaw')
::  OLD: \pda_a/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('TYP','PAR','M','TM_STAMP','DK','TK','DISP','PD_P','PD_P_ODS','PD_K','ODSW','DEF','IL','DW','TW'
   ,'IL_DOST','UZUP_ST','SKIP','skip_chk','skip_add','skip_del','INSERT','insert_add','PD_D'
   ,'STAT','STAT_MG','STAT_DA','STAT_IL','ILP','ILR','STAN','MG'
   ,'SEL'
   ,'VER_TYP','VER_DATA');
:: typ - PD_D.TYP
_args.TYP:='';
:: parametr
_args.PAR:='';
:: Material - M.ref()
_args.M:=null();
:: tm_stamp - czas uruchomienia analizy
_args.TM_STAMP:=0;
:: data koncowa analizy
_args.DK:=date(0,0,0);
:: czas koncowy analizy
_args.TK:=time(0,0,0);
:: 0-nie wyswietlac szczegolow, 1-wyswietlac
_args.DISP:=0;
:: PD_P.ref()
_args.PD_P:=null();
:: 0-nie aktualizowac statusu pozycji planu, 1-aktualizowac
_args.PD_P_ODS:=0;
:: PD_K.ref()
_args.PD_K:=PD_K.ref();
:: 0-naliczac szczegoly po raz pierwszy, 1-usunac szczegoly i naliczyc ponownie
_args.ODSW:=0;
:: 0-w kontekscie analizy, 1-w kontekscie definiowania
_args.DEF:=0;
:: Ilosc wymagana
_args.IL:=0;
:: data wymagana
_args.DW:=date(0,0,0);
:: czas wymagany
_args.TW:=time(0,0,0);
:: ilość dostępna na wymagany termin
_args.IL_DOST:=0;
:: 0-nie uruchamiaj formul uzupelnienia stanu, 1-uruchamiaj formuly uzupelnienia stanu
_args.UZUP_ST:=0;
:: lista wykluczonych pozycji z analizy
_args.SKIP:=tab_tmp(1,'REF','STRING[16]','Reference wykluczonego zapisu');
_args.skip_chk:="~.SKIP.find_key(_a)";
_args.skip_add:="{? ~.SKIP.find_key(_a) || .SKIP.REF:=_a; .SKIP.add() ?}";
_args.skip_del:="{? .SKIP.find_key(_a) || .SKIP.del() ?}";
:: lista dodawanych tymczasowo pozycji z analizy
_args.INSERT:=tab_tmp(3,
   'REF','STRING[16]','Reference dodawanego zapisu',
   'D','DATE','Data',
   'T','TIME','Czas',
   'IL','REAL','Ilość'
);
_args.insert_add:="
   {? ~.INSERT.find_key(_a,_b,_c)
   || .INSERT.REF:=_a;
      .INSERT.D:=_b;
      .INSERT.T:=_c;
      .INSERT.IL:=_d;
      .INSERT.add()
   ?}
";
:: kod formuly uzupelnienia stanu
_args.PD_D:='';
:: stan pozycji dostawy
_args.STAT:='';
_args.STAT_MG:=0;
_args.STAT_DA:=date(0,0,0);
_args.STAT_IL:=0;
_args.ILP:=0;
_args.ILR:=0;
_args.STAN:=0;
_args.MG:='';
:: zaznaczone pozycje planu
_args.SEL:=~~;
:: typ wersji
_args.VER_TYP:=exec('pda_ver_typ_default','plan_dostaw');
:: data wersji
_args.VER_DATA:=date(0,0,0);
:: zwraca tablice
_args


\pda_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: argument funkcji exec('pda_add','plan_dostaw')
::  OLD: \pda_a1/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('MG','ODDZ','D','T','PRZY_ROZ','PD_D_KOD','TYP','O'
      ,'ILP','ILR','TYPSTAN','STAN_ICO','PROBLEM'
      ,'DK_C','ICO','REF');

:: MG.SYM
_args.MG:='';
:: ODDZ.KOD
_args.ODDZ:='';
:: data
_args.D:=date(0,0,0);
:: time
_args.T:=time(0,0,0);
:: [P]rzychod, [R]ozchod
_args.PRZY_ROZ:='';
:: PD_D.KOD
_args.PD_D_KOD:='';
:: typ zapisu np. Zamowienie sprzedazy, Stan dostawy itp.
_args.TYP:='';
:: opis np. [kod kontrahenta] [symbol zamowienia] [pozycja zamowienia] (00010 ZK/2012/00012 poz. 3)
_args.O:='';
:: ilosc dla pozycji przychodowych
_args.ILP:=0;
:: ilosc dla pozycji rozchodowych
_args.ILR:=0;
:: 'MG'-zakladka wg Magazynow, 'D'-zakladka wg Dat
_args.TYPSTAN:='';
:: ikona stanu
_args.STAN_ICO:='';
:: czy nastepuje problem w wyniku zdarzenia
_args.PROBLEM:='N';
:: $DK_C.ref
_args.DK_C:='';
:: ikona pozycji
_args.ICO:='';
:: ref zrodla np. $ZK_P.ref
_args.REF:='';

_args


\pda_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: dodanie pozycji do tabeli analizy zapotrzebowań
::   WE: _a - wynik funkcji exec('pda_a1','plan_dostaw')
::  OLD: \pda_add/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_wyn:=obj_new('ADD','REF');
_wyn.ADD:=0; _wyn.REF:=null();

::_Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_Tab:=__pda.TAB2.TAB;

_Tab.cntx_psh();
_Tab.prefix();
_Tab.blank();
_Tab.MG:=_paramsa.MG;
_Tab.ODDZ:=_paramsa.ODDZ;
_Tab.D:=_paramsa.D;
_Tab.T:=_paramsa.T;
_Tab.PRZY_ROZ:=_paramsa.PRZY_ROZ;
_Tab.PD_D_KOD:=_paramsa.PD_D_KOD;
_Tab.TYP:=_paramsa.TYP;
_Tab.O:=_paramsa.O;
_Tab.ILP:=_paramsa.ILP;
_Tab.ILR:=_paramsa.ILR;
{? _paramsa.TYPSTAN=exec('ts_mg','plan_dostaw')
|| _Tab.STMG_ICO:=_paramsa.STAN_ICO
|? _paramsa.TYPSTAN=exec('ts_d','plan_dostaw')
|| _Tab.ST_D_ICO:=_paramsa.STAN_ICO
?};
_Tab.PROBLEM:=_paramsa.PROBLEM;
_Tab.ICO:=_paramsa.ICO;
{? _paramsa.DK_C<>''
|| DK_C.cntx_psh();
   DK_C.use(8+_paramsa.DK_C);
   DK_C.prefix();
   {? DK_C.seek(_paramsa.DK_C)
   || _Tab.DK_C:=_paramsa.DK_C;
      _Tab.DKC_SYM:=DK_C.SYM;
      {? DK_C.M_ATR().SL_01 || _Tab.WAR01:=DK_C.WAR01 ?};
      {? DK_C.M_ATR().SL_02 || _Tab.WAR02:=DK_C.WAR02 ?};
      {? DK_C.M_ATR().SL_03 || _Tab.WAR03:=DK_C.WAR03 ?};
      {? DK_C.M_ATR().SL_04 || _Tab.WAR04:=DK_C.WAR04 ?};
      {? DK_C.M_ATR().SL_05 || _Tab.WAR05:=DK_C.WAR05 ?};
      {? DK_C.M_ATR().SL_06 || _Tab.WAR06:=DK_C.WAR06 ?};
      {? DK_C.M_ATR().SL_07 || _Tab.WAR07:=DK_C.WAR07 ?};
      {? DK_C.M_ATR().SL_08 || _Tab.WAR08:=DK_C.WAR08 ?};
      {? DK_C.M_ATR().SL_09 || _Tab.WAR09:=DK_C.WAR09 ?};
      {? DK_C.M_ATR().SL_10 || _Tab.WAR10:=DK_C.WAR10 ?}
   ?};
   DK_C.cntx_pop()
?};
_Tab.REF:=_paramsa.REF;
_wyn.ADD:=_Tab.add();
_wyn.REF:=_Tab.ref();
_Tab.cntx_pop();

_wyn


\pda_tab2_wsk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: wskazanie na __pda.TAB2.TAB
::  OLD: \pda_tab2_wsk/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
::exec('pda','plan_dostaw')
return(
{? _a='OBJ'
|| __pda.TAB2
|| _len:=+_a;
   {? _len=8 || ($'__pda.TAB2.%1.%2'[4+_a,_a+4])()
   |? _len=4 & (3+_a)='WER' || ($'__pda.TAB2.%1.WER'[_a])()
   || ($'__pda.TAB2.%1'[_a])()
   ?}
?}
);

{? _a='OBJ' || __pda.TAB2
|? _a='TAB' || __pda.TAB2.TAB
|? (3+_a)='NDX'
||
   {? _a='NDX1' || __pda.TAB2.NDX1
   |? _a='NDX2' || __pda.TAB2.NDX2
   |? _a='NDX3' || __pda.TAB2.NDX3
   |? _a='NDX4' || __pda.TAB2.NDX4
   |? _a='NDX5' || __pda.TAB2.NDX5
   ?}
|? (4+_a)='WER1'
||
   {? _a='WER1' || __pda.TAB2.WER1.WER
   |? _a='WER1BTN1' || __pda.TAB2.WER1.BTN1
   |? _a='WER1BTN2' || __pda.TAB2.WER1.BTN2
   |? _a='WER1BTN3' || __pda.TAB2.WER1.BTN3
   |? _a='WER1AKC1' || __pda.TAB2.WER1.AKC1
   |? _a='WER1AKC2' || __pda.TAB2.WER1.AKC2
   |? _a='WER1AKC3' || __pda.TAB2.WER1.AKC3
   ?}
|? (4+_a)='WER2'
||
   {? _a='WER2' || __pda.TAB2.WER2.WER
   |? _a='WER2BTN1' || __pda.TAB2.WER2.BTN1
   |? _a='WER2BTN2' || __pda.TAB2.WER2.BTN2
   |? _a='WER2BTN3' || __pda.TAB2.WER2.BTN3
   |? _a='WER2AKC1' || __pda.TAB2.WER2.AKC1
   |? _a='WER2AKC2' || __pda.TAB2.WER2.AKC2
   |? _a='WER2AKC3' || __pda.TAB2.WER2.AKC3
   ?}
|? (4+_a)='WER3'
||
   {? _a='WER3' || __pda.TAB2.WER3.WER
   |? _a='WER3BTN1' || __pda.TAB2.WER3.BTN1
   |? _a='WER3BTN2' || __pda.TAB2.WER3.BTN2
   |? _a='WER3BTN3' || __pda.TAB2.WER3.BTN3
   |? _a='WER3AKC1' || __pda.TAB2.WER3.AKC1
   |? _a='WER3AKC2' || __pda.TAB2.WER3.AKC2
   |? _a='WER3AKC3' || __pda.TAB2.WER3.AKC3
   ?}
?}


\ts_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: typ stanu wg daty
::  OLD: \ts_d/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
'D'


\ts_mg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: typ stanu wg magazynow
::  OLD: \ts_mg/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
'MG'


\ts_dkc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: typ stanu wg atrybutów
::  OLD: \ts_dkc/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
'DK_C'


\pddd_tab1_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: parametr exec('pddd_tab1_add','plan_dostaw')
::  OLD: \pddd_tab1_a/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('D','ZAM','IL','ZK_P','DD','PD_K_DD');
_args.D:=date(0,0,0);
_args.ZAM:='';
_args.IL:=0;
_args.ZK_P:='';
_args.DD:='N';
_args.PD_K_DD:='';
_args


\pddd_tab1_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS:
::   WE: _a - wynik exec('pddd_tab1_a','plan_dostaw')
::  OLD: \pddd_tab1_add/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_Tab:=exec('pddd_tab1_wsk','plan_dostaw','TAB1');
_ndx:=exec('pddd_tab1_wsk','plan_dostaw','NDX2');

_Tab.cntx_psh();
_Tab.index(_ndx);
_Tab.prefix(_paramsa.PD_K_DD,_paramsa.ZK_P);
{? ~_Tab.first()
||
   _Tab.D:=_paramsa.D;
   _Tab.ZAM:=_paramsa.ZAM;
   _Tab.IL:=_paramsa.IL;
   _Tab.ZK_P:=_paramsa.ZK_P;
   _Tab.DD:=_paramsa.DD;
   _Tab.PD_K_DD:=_paramsa.PD_K_DD;
   _Tab.add()
?};
_Tab.cntx_pop()


\pddd_tab1_wsk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: zwraca wskazanie obiektu _a
::   WE: _a - 'TAB1','NDX1','NDX2','WER1'
::  OLD: \pddd_tab1_wsk/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_ns:=exec('pddd_ns_wsk','plan_dostaw');

{? _a='TAB1' || _ns.TAB1.TAB
|? _a='NDX1' || _ns.TAB1.NDX1
|? _a='NDX2' || _ns.TAB1.NDX2
|? _a='WER1' || _ns.TAB1.WER1.WER
?}


\pddd_ns
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przestrzeń nazw pddd
::  OLD: \pddd_ns/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
'__pddd'


\pddd_ns_wsk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: wskaźnik przestrzeni nazw pddd
::  OLD: \pddd_ns_wsk/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
($exec('pddd_ns','plan_dostaw'))()


\tab3_add_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: argument funkcji tab3_add_a
::   WE:
::   WY:
::  OLD: \tab3_add_a/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('REF','TYPSTAN','KOD','SORT','CECHA','WAR','STAN','ROZNICA','ICO','PROBLEM','OPIS');
:: $TAB.ref()
_args.REF:='';
:: 'D'-wg dat,'MG'-wg magazynow,'DK_C'-wg atrybutow
_args.TYPSTAN:='';
:: kod formuly cechy stanu
_args.KOD:='';
:: kolejnosc formuly cechy stanu
_args.SORT:='';
:: cecha stanu
_args.CECHA:='';
:: wartosc cechy
_args.WAR:=0;
:: wartosc stanu
_args.STAN:=0;
:: STAN-WAR - roznica stanu i wartosci cechy
_args.ROZNICA:=0;
:: ikona
_args.ICO:='';
:: problem
_args.PROBLEM:='';
:: opis
_args.OPIS:='';
:: zwraca tablice
_args


\autil_tm_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przeksztalca tm_stamp na date i czas
::   WE: _a - tm_stamp
::   WY: obj_new('D','T')
::  OLD: \autil_tm_form/pd_df.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=obj_new('D','T');

_wyn.D:=exec('tm_stamp2date','#tm_stamp',_a);
_wyn.T:=exec('tm_stamp2time','#tm_stamp',_a);

_wyn


\tab3_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: dodanie rekordu do tabeli __pda.TAB3
::   WE: _a-exec('tab3_a','plan_dostaw')
::   WY: wynik add
::  OLD: \tab3_add/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_Tab:=exec('pda_tab3_wsk','plan_dostaw','TAB');
_Tab.prefix();
_Tab.blank();
_Tab.REF:=_paramsa.REF;
_Tab.TYPSTAN:=_paramsa.TYPSTAN;
_Tab.KOD:=_paramsa.KOD;
_Tab.SORT:=_paramsa.SORT;
_Tab.CECHA:=_paramsa.CECHA;
_Tab.WAR:=_paramsa.WAR;
_Tab.STAN:=_paramsa.STAN;
_Tab.ROZNICA:=_paramsa.ROZNICA;
_Tab.ICO:=_paramsa.ICO;
_Tab.PROBLEM:=_paramsa.PROBLEM;
_Tab.OPIS:=_paramsa.OPIS;
_Tab.add()


\pda_tab3_wsk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: wskazanie na __pda.TAB3.TAB
::  OLD: \pda_tab3_wsk/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
::exec('pda','plan_dostaw')
{? _a='TAB' || __pda.TAB3.TAB
|? _a='NDX1' || __pda.TAB3.NDX1
|? _a='NDX2' || __pda.TAB3.NDX2
|? _a='WER1' || __pda.TAB3.WER1.WER
?}


\pda_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: aktualizacji pozycji tabeli analizy zapotrzebowań
::   WE: _a - _params
::  OLD: \pda_put/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');

{? _paramsa.TYPSTAN=exec('ts_mg','plan_dostaw')
|| _Tab.STMG_ICO:=_paramsa.STAN_ICO
|? _paramsa.TYPSTAN=exec('ts_d','plan_dostaw')
|| _Tab.ST_D_ICO:=_paramsa.STAN_ICO
|? _paramsa.TYPSTAN=exec('ts_dkc','plan_dostaw')
|| _Tab.DKC_ICO:=_paramsa.STAN_ICO
?};
{? _paramsa.PROBLEM='T'
||
   _Tab.PROBLEM:='T';
   _Tab.P_COUNT+=1
?};
_Tab.put()


\autil_mg4dost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: wyznaczenie magazynu dostawy
::   WE: _a-kod formuly planu dostaw
::       _b-ref zrodla
::       _c-$MG.ref()
::       _d-typ magazynu
::  OLD: \autil_mg4dost/pd_df.fml
::----------------------------------------------------------------------------------------------------------------------
_pdd_kod:=_a;
_ref:=_b;
_mg:=_c;
_mgt:={? var_pres('_d')<>type_of('txt') || '' || _d ?};

_wyn:=null();

:: uprawnione oddzialy uzytkownika
_oddzs:='';
USERS_UP.cntx_psh();
USERS_UP.index('ODDZ');
USERS_UP.prefix(OPERATOR.USER,'ODDZ');

_loop:=USERS_UP.first();
{!
|? _loop
|!
   _oddzs+=USERS_UP.ODDZ().KOD;
   _loop:=USERS_UP.next()
!};

:: uprawnione magazyny uzytkownika
USERS_UP.cntx_pop();
USERS_UP.cntx_psh();
USERS_UP.index('MG');
USERS_UP.prefix(OPERATOR.USER,'MG');
MG.cntx_psh();
_uprmg:='';
_loop:=USERS_UP.first();
{!
|? _loop
|!
   {? _oddzs*USERS_UP.MG().ODDZ || _uprmg+=$USERS_UP.MG ?};
   _loop:=USERS_UP.next()
!};
MG.cntx_pop();

{? _mg<>''
|| USERS_UP.cntx_pop();
   _mg:=exec('FindInSet','#table','MG','MAGAZYNY',_mg,_mg);
   {? _uprmg*($_mg)
   || return(_mg)
   || return(_wyn)
   ?}
?};

{? _pdd_kod='INF'
:: te zapisy zwiazane sa z magazynem, nie dotyczy
|| null()
|? _pdd_kod='PD_K_R'
:: te zapisy zwiazane sa z magazynem, nie dotyczy
|| null()
|? _pdd_kod='PX_SUR'
:: ???
|| null()
|? _pdd_kod='REZ_MAG'
:: te zapisy zwiazane sa z magazynem, nie dotyczy
|| null()
|? _pdd_kod='REZ_SPR'
:: te zapisy zwiazane sa z magazynem, nie dotyczy
|| null()
|? _pdd_kod='REZ_TMP'
:: te zapisy zwiazane sa z magazynem, nie dotyczy
|| null()
|? _pdd_kod='REZ_WEW'
|| null()
|? _pdd_kod='REZ_ZAM'
|| null()
|? _pdd_kod='TW'
:: te zapisy zwiazane sa z magazynem, nie dotyczy
|| null()
|? _pdd_kod='TWB'
:: te zapisy zwiazane sa z magazynem, nie dotyczy
|| null()
|? _pdd_kod='ZAM_SPR'
 | _pdd_kod='ZAM_WEW'
|| _user:=null();
   MG.cntx_psh();
   ZK_N.cntx_psh(); ZK_P.cntx_psh();
   ZK_P.use(8+_ref);
   {? ZK_P.seek(_ref)
   || ZK_N.use(ref_name(ZK_P.N));
      _user:=ZK_P.N().US
   ?};
   ZK_N.cntx_pop(); ZK_P.cntx_pop();
:: uprawnienia uzytkownika
   _isPU:=0;
   {? _user
   || USERS_UP.index('MGNR');
      USERS_UP.prefix(_user,{? _pdd_kod='ZAM_SPR' || 'ZAM' || 'ZAW' ?});
      _loop:=USERS_UP.first();
      {!
      |? _loop
      |!
         _isPU:=1;
         {? _uprmg*($USERS_UP.MG) & (_mgt='' | _mgt*(4+USERS_UP.MG().TYP)) || _wyn:=USERS_UP.MG ?};
         _loop:=_wyn=null() & USERS_UP.next()
      !}
   ?};
:: uprawnienia ogolne
   {? _isPU=0 & _wyn=null()
   || USERS_UP.index('MGNR');
      USERS_UP.prefix(null(),{? _pdd_kod='ZAM_SPR' || 'ZAM' || 'ZAW' ?});

      _loop:=USERS_UP.first();
      {!
      |? _loop
      |!
         {? _uprmg*($USERS_UP.MG) & (_mgt='' | _mgt*(4+USERS_UP.MG().TYP)) || _wyn:=USERS_UP.MG ?};
         _loop:=_wyn=null() & USERS_UP.next()
      !}
   ?};
   MG.cntx_pop()
|? _pdd_kod='ZLIM_N'
:: ???
|| null()
|? _pdd_kod='ZLIM_T'
:: ???
|| null()
|| null()
?};
USERS_UP.cntx_pop();

_wyn


\pd_k_add_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: parametr funkcji exec('pd_k_add','pd_k')
::  OLD: \pd_k_add_a/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
PD_K.blank();
_params:=obj_new('PD_N','PD_P','DD','DZ','KH','MG','Z_MG','M','DK_C','IL','CENA','WAL','CWAL','KRS','TYPYZAM');
_params.PD_N:=null();
_params.PD_P:=null();
_params.DD:=date(0,0,0);
_params.DZ:=date(0,0,0);
_params.KH:=null();
_params.MG:=null();
_params.Z_MG:=null();
_params.M:=null();
_params.DK_C:=null();
_params.IL:=0;
_params.CENA:=0;
_params.WAL:=null();
_params.KRS:=0;
_params.CWAL:=0;
_params.TYPYZAM:=null();
_params


\pd_k_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: dodanie pozycji do PD_K
::   WE: tabela ktora zwraca exec('pd_k_add_a','plan_dostaw')
::  OLd: \pd_k_add/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

::BEER.TYPYZAM:=_paramsa.TYPYZAM;
exec('ustapdkprz','jm');

PD_K.blank();
PD_K.PD_N:=_paramsa.PD_N;
PD_K.PD_P:=_paramsa.PD_P;
PD_K.DD:=_paramsa.DD;
PD_K.DZ:=_paramsa.DZ;
PD_K.KH:=_paramsa.KH;
PD_K.MG:=_paramsa.MG;
PD_K.Z_MG:=_paramsa.Z_MG;
PD_K.M:=_paramsa.M;
PD_K.DK_C:=_paramsa.DK_C;
PD_K.RDKC:=$PD_K.DK_C;
PD_K.IL:=_paramsa.IL;
PD_K.ILP:=_paramsa.IL;
PD_K.WAL:=_paramsa.WAL;
PD_K.WALK:=PD_K.WAL;
{? exec('FindAndGet','#table',MG,PD_K.MG,,"IL",'N')<>'T'
||
   {? PD_K.WAL=INFO.NAROD
   ||
      PD_K.CWAL:=0;
      PD_K.KRS:=0;
      PD_K.CENA:=_paramsa.CENA
   ||
      PD_K.CWAL:=_paramsa.CWAL;
      PD_K.KRS:=_paramsa.KRS;
      BEER.MW:='P';
      exec('po_cenaw','ceny',,0)
   ?}
||
   PD_K.CWAL:=0;
   PD_K.KRS:=0;
   PD_K.CENA:=0
?};
PD_K.JM:=PD_K.M().J;
PD_K.TYPYZAM:=_paramsa.TYPYZAM;
PD_K.ID:=PD_K.tm_stamp();
PD_K.ZTP:=BEER.ZTP;
PD_K.COMPLEX:=BEER.COMPLEX;

TYPYZAM.cntx_psh();
exec('var_set','plan_dostaw',PD_K.TYPYZAM().R);
exec('ustapdkprz','jm',PD_K.M,PD_K.M().J);
exec('aktpdkil2','material');
_jmz:=PD_K.JMZ & PD_K.JM<>PD_K.J2;
{? _jmz | PD_K.T2='N' | PD_K.WS2=0
||
   PD_K.WS2:=1;
   PD_K.J2:=PD_K.JM;
   PD_K.IL2:=PD_K.IL
?};
exec('pd_k_obl','plan_dostaw');
TYPYZAM.cntx_pop();

PD_K.cntx_psh();
PD_K.prefix();
_wyn:={? PD_K.add() || PD_K.ref() || null() ?};
PD_K.cntx_pop();

_wyn


\pda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: analiza zapotrzebowania
::   WE: _a - argument - wynik formuły exec('pda_a','plan_dostaw')
::   WY: obj_new('DOSTEPNY','NA_KIEDY','IL')
::  OLD: \pda/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_wyn:=obj_new('DOSTEPNY','NA_KIEDY','IL','IL_DOST');
_wyn.DOSTEPNY:=0; _wyn.NA_KIEDY:=date(0,0,0); _wyn.IL:=0; _wyn.IL_DOST:=0;

:: Walidacja argumentu - M musi być określone
{? _paramsa.M=null() || return() ?};
M.clear();
:: Ustawiony bufor tabeli M
{? ~M.seek(_paramsa.M) || return() ?};

_atr:=M.M_ATR<>null();

_czysc:="
   VAR_DEL.delete('__pda')
";
_time:=time();
:: uzupełnienie tabeli szczegółów
_odsw:=_paramsa.ODSW;
:: powołanie zmiennych
{? _odsw
||
:: aktualizacja danych
   _env:=__pda;
   _Tab1:=__pda.TAB1;
   _Tab2:=__pda.TAB2;
   _Tab3:=__pda.TAB3;
   _Tab1t:=exec('pda_tab1_wsk','plan_dostaw','TAB');
   _Tab1.NDX1:=exec('pda_tab1_wsk','plan_dostaw','NDX1');
   _Tab1.NDX2:=exec('pda_tab1_wsk','plan_dostaw','NDX2');
   _Tab2t:=exec('pda_tab2_wsk','plan_dostaw','TAB');
   _Tab2.NDX1:=exec('pda_tab2_wsk','plan_dostaw','NDX1');
   _Tab2.NDX2:=exec('pda_tab2_wsk','plan_dostaw','NDX2');
   _Tab2.NDX3:=exec('pda_tab2_wsk','plan_dostaw','NDX3');
   _Tab3t:=exec('pda_tab3_wsk','plan_dostaw','TAB');
   _Tab3.NDX1:=exec('pda_tab3_wsk','plan_dostaw','NDX1');
   _Tab3.NDX2:=exec('pda_tab3_wsk','plan_dostaw','NDX2');
   _Stany_tab:=exec('pda_stany_wsk','plan_dostaw','TAB');
   _Stany_tab.prefix(); {? _Stany_tab.first() || {! |? _Stany_tab.del() !} ?}
||
:: pierwsze pobranie danych
   _czysc();
:: __pda - przestrzeń nazw
:: TAB1 - stany w podziale na dni
:: TAB2 - szczegółowy zapis stanów
:: TAB3 - cechy stanu
:: WER_GR - okno grupowe
   _env:=__pda:=exec('pda_env','plan_dostaw',_paramsa);
   _Tab1:=__pda.TAB1:=obj_new('TAB','NDX1','NDX2','WER1','WER2','WER3','D');
   _Tab2:=__pda.TAB2:=obj_new('TAB','NDX1','NDX2','NDX3','NDX4','NDX5','WER1','WER2','WER3','GOTO_PROBLEM');
   _Tab3:=__pda.TAB3:=obj_new('TAB','NDX1','NDX2','WER1');
   __pda.STANY:=exec('stany_env','plan_dostaw');
:: tabela analizy zapotrzebowania
   _Tab1t:=_Tab1.TAB:=exec('tab1','plan_dostaw');
   _Tab1.NDX1:=_Tab1t.index('?'); 'kolejnosc: T, TREE, D, DK_C';
   _Tab1.NDX2:=_Tab1t.ndx_tmp(,,'T',,,'TREE',,,'D',,,'MG',,);
   _Tab2t:=_Tab2.TAB:=exec('tab2','plan_dostaw');
   _Tab2.NDX1:=_Tab2t.index('?'); 'kolejnosc: MG, D, T, PRZY_ROZ';
   _Tab2.NDX2:=_Tab2t.ndx_tmp(,,'D',,,'T',,,'PRZY_ROZ',,);
   _Tab2.NDX3:=_Tab2t.ndx_tmp(,,'PROBLEM',,,'D',,,'T',,);
   _Tab2.NDX4:=_Tab2t.ndx_tmp(,,'DKC_SYM',,,'D',,,'T',,,'PRZY_ROZ',,);
   _Tab2.NDX5:=_Tab2t.ndx_tmp(,,'D',,,'T',,,'PRZY_ROZ',,,'STAN_D',,);
   _Tab3t:=_Tab3.TAB:=exec('tab3','plan_dostaw');
   _Tab3.NDX1:=_Tab3t.index('?'); 'kolejnosc: REF,TYPSTAN,KOD,SORT';
   _Tab3.NDX2:=_Tab3t.ndx_tmp(,,'REF',,,'TYPSTAN',,,'SORT',,)
?};
:: nagłówek i pozycja planu dostaw
_pd_n:=_env.PD_N;
_pd_p:=_env.PD_P;
:: pobranie wersji jeśli jest
exec('pda_ver_get','plan_dostaw',_env);
_ver:=_env.VER;
_ver_typ:=exec('FindAndGet','#table',PD_TV,_ver,,"TYP",'');
:: aktualizacja danych
{? (PD_P.REFRESH='T' | _odsw) & _ver_typ<>exec('pda_ver_typ_ps_buf','plan_dostaw')
   | _ver=null()
   | exec('FindInSet','#table','PD_TVP','UNIK',_paramsa.PD_P,_ver,,,_pd_n)=null()
||
:: aktualizacja znacznika odświeżenia bufora
   {? _paramsa.PD_P_ODS & _paramsa.PD_P
   || PD_P.get();
      PD_P.TMSTAMPA:=_paramsa.TM_STAMP;
      PD_P.REFRESH:={? PD_P.TMSTAMPA<PD_P.TMSTAMPB || 'T' || 'N' ?};
      PD_P.put()
   ?};
:: usuwanie danych analizy
   _Tab1t.prefix();
   _loop:=_Tab1t.first(); {! |? _loop |! _Tab1t.TREE:=0; _loop:=_Tab1t.put() & _Tab1t.next() !};
   {? _Tab1t.first() || {! |? _Tab1t.del() !} ?};
   _Tab2t.prefix(); {? _Tab2t.first() || {! |? _Tab2t.del() !} ?};
   _Tab3t.prefix(); {? _Tab3t.first() || {! |? _Tab3t.del() !} ?};
:: pobranie danych wg formuł planu dostaw
   exec('stan','plan_dostaw',_paramsa);
   exec('tab2_insert','plan_dostaw',_paramsa);
   exec('tab2_stan','plan_dostaw',1); exec('cechy1','plan_dostaw',_paramsa);
   exec('tab2_stan','plan_dostaw',2); exec('cechy2','plan_dostaw',_paramsa);
   {? _atr || exec('tab2_stan','plan_dostaw',3); exec('cechy3','plan_dostaw',_paramsa) ?};
:: zapamiętanie wersji
   {? _env.VER=null() || exec('pda_ver_set','plan_dostaw',_env) ?};
   exec('pda_ver_set_data','plan_dostaw',_env,exec('FindAndGet','#table',PD_P,_env.PD_P,,"M",null()))

|? _env.VER
||
:: pobranie danych wersji
   exec('pda_ver_get_data','plan_dostaw',_env)
?};
exec('tab1_stan','plan_dostaw',_paramsa);
{? _paramsa.UZUP_ST || exec('stany_oblicz','plan_dostaw',_paramsa) ?};
::FUN.info((time()-_time)$3);
:: wyświetlenie szczegółów
{? _paramsa.DISP
||
:: Domyślnie aktywowana jest zakładka Wg dat. Jeśli plan ma magazyny do przesunięć otwierana jest zakładka Wg magazynów.
   _main_mg:=exec('FindInSet','#table','PD_MG','WER',null(),'T',"1",,PD_N.ref(),0);
   _Tab2.GOTO_PROBLEM:=_main_mg;
:: formuły pól tabeli analizy zapotrzebowania
   exec('pda_tab_fld_fml','plan_dostaw');
:: okna tabeli analizy zapotrzebowania
   _Tab1.WER1:=exec('tab1_wer1','plan_dostaw');
   _Tab1.WER2:=exec('tab1_wer2','plan_dostaw');
   _Tab1.WER3:=exec('tab1_wer3','plan_dostaw');
   _Tab2.WER1:=exec('tab2_wer1','plan_dostaw',_paramsa);
   _Tab2.WER2:=exec('tab2_wer2','plan_dostaw',_paramsa);
   _Tab2.WER3:=exec('tab2_wer3','plan_dostaw',_paramsa);
   _Tab3.WER1:=exec('tab3_wer1','plan_dostaw');
:: okno grupowe
   _fb:="
      _options:=exec('set_options_a','#desktop');
      _options.FOCUS_RET:=1;
      {? ~exec('interm','#system') || exec('load','#desktop','pd_wykres','pd_wykres.dsk',_options,,,,,0) ?};
      _Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');
      _ndx:=exec('pda_tab2_wsk','plan_dostaw','NDX2');
      _Tab.index(_ndx);
      _Tab.first();
      __pda.TAB1.D:=_Tab.D;
      _wer1:=exec('pda_tab2_wsk','plan_dostaw','WER1');
      _wer2:=exec('pda_tab2_wsk','plan_dostaw','WER2');
      _wer3:=exec('pda_tab2_wsk','plan_dostaw','WER3');
      grp_disp(_Tab,_wer1);
      grp_disp(_Tab,_wer2);
      {? M.M_ATR<>null() || grp_disp(_Tab,_wer3) ?}
   ";
   _wer:=__pda.WER_GR:=_Tab1t.grp_make('Szczegóły pozycji: %1 — %2'@[M.KTM,M.N],_fb
      ,'#erqhbcvaop'+{? _paramsa.PD_P || 'qeih' || 'null' ?});

:: wg dat
   _far:="
      _Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');
      __pda.TAB1.D:=_Tab.D
   ";
   _fb:="
      _Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');
      _ndx:=exec('pda_tab1_wsk','plan_dostaw','NDX1');
      _Tab.index(_ndx);
      _Tab.prefix('1');
      _Tab.find_key(0,__pda.TAB1.D)
   ";
   _Tab1t.grp_sel(_wer,,_Tab1.WER1.WER,'Wg daty'@,_far,,,,_fb,,,,'maximized_with_title');

   _Tab1t.tab_splt(_wer,,'vertical','szczegoly1','0, 33%');

:: - wykres
   {? ~exec('interm','#system')
   ||
      _ctr:=exec('create','#desktop',_Tab1t,'pd_wykres',_wer,,,'Wykres');

      _Tab1t.tab_splt(_wer,'szczegoly1','horizontal','zapisy1')
   ?};

:: - szczegóły pozycji
   _far:={? _paramsa.PD_P || "exec('tab2_btn_opt','plan_dostaw')" || "" ?};
   _fb:="
      _Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');
      _ndx:=exec('pda_tab2_wsk','plan_dostaw','NDX2');
      _Tab.index(_ndx)
   ";
   _fb+={? _paramsa.PD_P || "; exec('tab2_btn_opt','plan_dostaw')" || "" ?};
   _fb:=$_fb;
   _Tab1t.grp_sel(_wer,_Tab2t,_Tab2.WER2.WER,,_far,,,,_fb,,,,'maximized_with_title');

:: wg magazynów
   _far:="
      _Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');
      __pda.TAB1.D:=_Tab.D
   ";
   _fb:="
      _Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');
      _ndx:=exec('pda_tab1_wsk','plan_dostaw','NDX2');
      _Tab.index(_ndx);
      _Tab.prefix('2');
      _Tab.find_key(0,__pda.TAB1.D)
   ";
   _Tab1t.grp_sel(_wer,,_Tab1.WER2.WER,'Wg magazynów'@,_far,,,,_fb,,,,'maximized_with_title',,_main_mg);

   _Tab1t.tab_splt(_wer,,'vertical','zapisy2','0, 33%');

   _far:={? _paramsa.PD_P || "exec('tab2_btn_opt','plan_dostaw')" || "" ?};
   _fb:="
      _Tab2_obj:=exec('pda_tab2_wsk','plan_dostaw','OBJ');
      _Tab2:=exec('pda_tab2_wsk','plan_dostaw','TAB');
      _Tab2_ndx:=exec('pda_tab2_wsk','plan_dostaw','NDX1');
      _Tab2.index(_Tab2_ndx);
      {? _Tab2_obj.GOTO_PROBLEM
      ||
         _Tab2_obj.GOTO_PROBLEM:=0;
         {? _Tab2.find_key(PD_P.MG,PD_P.STAT_DA)
         ||
            _typstan:=exec('ts_mg','plan_dostaw');
            _Tab3:=exec('pda_tab3_wsk','plan_dostaw','TAB');
            _Tab3_ndx:=exec('pda_tab3_wsk','plan_dostaw','NDX2');
            _Tab3.index(_Tab3_ndx);
            _Tab3.prefix($_Tab2.ref(),_typstan,);
            _loop:=~_Tab3.first() & _Tab2.next();
            {!
            |? _loop
            |!
               _Tab3.prefix($_Tab2.ref(),_typstan,);
               _loop:=~_Tab3.first() & _Tab2.next()
            !}
         ?}
      ?}
   ";
   _fb+={? _paramsa.PD_P || "; exec('tab2_btn_opt','plan_dostaw')" || "" ?};
   _fb:=$_fb;
   _Tab1t.grp_sel(_wer,_Tab2t,_Tab2.WER1.WER,,_far,,,,_fb,,,,'maximized_with_title');

:: wg atrybutów
   {? _atr
   || _far:="
         _Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');
         __pda.TAB1.D:=_Tab.D
      ";
      _fb:="
         _Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');
         _ndx:=exec('pda_tab1_wsk','plan_dostaw','NDX1');
         _Tab.index(_ndx);
         _Tab.prefix('3');
         _Tab.find_key(0,__pda.TAB1.D)
      ";
      _Tab1t.grp_sel(_wer,,_Tab1.WER3.WER,'Wg atrybutów'@,_far,,,,_fb,,,,'maximized_with_title');

      _Tab1t.tab_splt(_wer,,'horizontal','zapisy3',15);

      _far:={? _paramsa.PD_P || "exec('tab2_btn_opt','plan_dostaw')" || "" ?};
      _fb:="
         _Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');
         _ndx:=exec('pda_tab2_wsk','plan_dostaw','NDX4');
         _Tab.index(_ndx)
      ";
      _fb+={? _paramsa.PD_P || "; exec('tab2_btn_opt','plan_dostaw')" || "" ?};
      _fb:=$_fb;
      _Tab1t.grp_sel(_wer,_Tab2t,_Tab2.WER3.WER,,_far,,,,_fb,,,,'maximized_with_title')
   ?};

   _Tab1t.win_sel(_wer);
   _Tab1t.select();

   _Tab1t.win_sel();
   _Tab1t.win_del(_wer);
   _Tab1t.win_del(_Tab1.WER1.WER);
   _Tab2t.win_del(_Tab2.WER1.WER);
   _Tab2t.win_del(_Tab2.WER2.WER)
?};

:: aktualizacja statusu
{? _paramsa.PD_P_ODS & _paramsa.PD_P
||
:: stan pozycji planu dostaw
   _params:=exec('pda_a','plan_dostaw');
   _params.M:=PD_P.M;
   _params.DK:=PD_P.PD_N().DK;
   _params.TK:=PD_N.TK;
   exec('stat','%plan_dostaw',_params);

   PD_P.get();
   PD_P.STAT:=_params.STAT;
   PD_P.STAT_MG:=_params.STAT_MG;
   PD_P.STAT_DA:=_params.STAT_DA;
   PD_P.STAT_IL:=_params.STAT_IL;
   PD_P.ILP:=_params.ILP;
   PD_P.ILR:=_params.ILR;
   PD_P.STAN:=_params.STAN;
   PD_P.MG:=_params.MG;
   PD_P.put()
?};

:: wynik
_Tab1t.cntx_psh();
_Tab1t.index(exec('pda_tab1_wsk','plan_dostaw','NDX1'));
_Tab1t.prefix('1');
_date:={? _paramsa.DW<date() || date() || _paramsa.DW ?};
{? _Tab1t.last()
||
   {? _Tab1t.D<_date || _date:=_Tab1t.D ?};
   {? _Tab1t.find_key(0,_date)
   || _wyn.DOSTEPNY:=_paramsa.IL<=_Tab1t.STAN;
      _wyn.IL_DOST:=_Tab1t.STAN;
      {? _wyn.DOSTEPNY
      || _wyn.NA_KIEDY:=_Tab1t.D;
         _wyn.IL:=_Tab1t.STAN
      |? _paramsa.IL
      || _loop:=_Tab1t.next();
         {!
         |?
            _loop:=
               {? _paramsa.IL<=_Tab1t.STAN
               || _wyn.NA_KIEDY:=_Tab1t.D;
                  _wyn.IL:=_Tab1t.STAN;
                  0
               || _Tab1t.next()
               ?}
         !}
      ?}
   ?}
?};
_Tab1t.cntx_pop();

:: uzupełnienie stanu
{? _paramsa.UZUP_ST
||
   exec('uzup','plan_dostaw',_paramsa,0);
   {? _paramsa.PD_P_ODS & _paramsa.PD_P
   ||
      _uzup_st:=_paramsa.UZUP_ST;
      _disp:=_paramsa.DISP;
      _paramsa.UZUP_ST:=0;
      _paramsa.DISP:=0;
      exec('pda','plan_dostaw',_paramsa);
      _paramsa.UZUP_ST:=_uzup_st;
      _paramsa.DISP:=_disp
   ?}
?};

{? _paramsa.ODSW=0 || _czysc() ?};

_wyn


\pda_tab1_wsk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: wskazanie na __pda.TAB1.TAB
::  OLD: \pda_tab1_wsk/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
::exec('pda','plan_dostaw')
{? _a='TAB' || __pda.TAB1.TAB
|? _a='NDX1' || __pda.TAB1.NDX1
|? _a='NDX2' || __pda.TAB1.NDX2
|? _a='WER1' || __pda.TAB1.WER1.WER
|? _a='WER2' || __pda.TAB1.WER2.WER
|? _a='WER3' || __pda.TAB1.WER3.WER
?}


\stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: uruchamia formuly stanu magazynowego
::   WE: _a - argument - wynik formuly exec('pda_a','plan_dostaw')
::  OLD: \stan/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_paramsa.TYP:='S';
_paramsa.PAR:='S';

exec('core_d','plan_dostaw',_paramsa)


\core_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Czesc zasadnicza formul:
::       exec('stan','plan_dostaw'), exec('uzup','plan_dostaw')
::       , exec('cechy1','plan_dostaw'), exec('cechy2','plan_dostaw')
::       , exec('core','plan_dostaw')
::   WE: _a - argument - wynik formuly exec('pda_a','pda')
::  OLD: \core/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

{? _paramsa.PD_P=null()
||
   PD_D.cntx_psh();

   PD_D.index('TYP');
   PD_D.prefix(_paramsa.TYP,'T');
   _loop:=PD_D.first();
   {!
   |? _loop
   |!
      ($PD_D.FORMULA().FORMULA)(_paramsa);
      _loop:=PD_D.next()
   !};

   PD_D.cntx_pop()
||
   _pd_p:=_paramsa.PD_P;

   PD_D.cntx_psh(); PD_P.cntx_psh();
   PD_P.prefix();

   {? PD_P.seek(_pd_p)
   ||
      PD_D_USE.index('PD_D_USE');
      PD_D.index('TYP');
      PD_D.prefix(_paramsa.TYP,'T');
      _loop:=PD_D.first();
      {!
      |? _loop
      |!
         PD_D_USE.prefix(PD_P.PD_N,_pd_p);
         {? PD_D_USE.first()
         || {? PD_D_USE.find_key(PD_D.ref()) || ($PD_D.FORMULA().FORMULA)(_paramsa) ?}
         || PD_D_USE.prefix(PD_P.PD_N,null());
            {? PD_D_USE.find_key(PD_D.ref()) || ($PD_D.FORMULA().FORMULA)(_paramsa) ?}
         ?};
         _loop:=PD_D.next()
      !}
   ?};

   PD_D.cntx_pop(); PD_P.cntx_pop()
?}


\tab1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: tabela stanow wg dni
::  OLD: \tab1/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=tab_tmp(4
   ,'T'     ,'STRING[1]'   ,'Typ'
   ,'TREE'  ,'TREE_REF'    ,'Tree'
   ,'D'     ,'DATE'        ,'Data'
   ,'DK_C'  ,'STRING[16]'  ,'Cecha'
   ,'MG'    ,'STRING[8]'   ,'Magazyn'
   ,'DZTYG' ,'STRING[6]'   ,'Dzień tygodnia'
   ,'STAN'  ,'REAL'        ,'Stan'
   ,'ICO'   ,'STRING[50]'  ,'Ikona'
   ,'KOLOR' ,'STRING[22]'  ,'Kolor'
   ,'OPIS'  ,'STRING[50]'  ,'Opis pozycji (do wykresu)'
   ,'TREE_O','STRING[30]'  ,'Opis'
   ,'WAR01' ,'STRING[25]'  ,'Wartość'
   ,'WAR02' ,'STRING[25]'  ,'Wartość'
   ,'WAR03' ,'STRING[25]'  ,'Wartość'
   ,'WAR04' ,'STRING[25]'  ,'Wartość'
   ,'WAR05' ,'STRING[25]'  ,'Wartość'
   ,'WAR06' ,'STRING[25]'  ,'Wartość'
   ,'WAR07' ,'STRING[25]'  ,'Wartość'
   ,'WAR08' ,'STRING[25]'  ,'Wartość'
   ,'WAR09' ,'STRING[25]'  ,'Wartość'
   ,'WAR10' ,'STRING[25]'  ,'Wartość');

_ff:="cur_tab(1,1).KOLOR+','+cur_tab(1,1).KOLOR";
_wyn.fld_fml('DZTYG','BEFORE_DISPLAY',_ff);

_wyn


\tab2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: tabela analizy zapotrzebowania
::  OLD: \tab2/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=
   ($("
   tab_tmp(4
      ,'MG'       ,'STRING[8]'      ,'Magazyn'
      ,'D'        ,'DATE'           ,'Data'
      ,'T'        ,'TIME'           ,'Czas'
      ,'PRZY_ROZ' ,'STRING[1]'      ,'[P]rzychód/[R]ozchód'
      ,'ODDZ'     ,'STRING[1]'      ,'Oddział'
      ,'PD_D_KOD' ,'STRING[10]'     ,'Kod formuły planu'
      ,'TYP'      ,'STRING[50]'     ,'Typ pozycji'
      ,'O'        ,'STRING[100]'    ,'Opis'
      ,'ILP'      ,'REAL'           ,'Ilość przychód'
      ,'ILR'      ,'REAL'           ,'Ilość rozchód'
      ,'STAN_MG'  ,'REAL'           ,'Stan wg magazynów'
      ,'STMG_ICO' ,'STRING[50]'     ,'Stan - ikona'
      ,'MG_KOLOR' ,'STRING[11]'     ,'Magazyn - kolor'
      ,'STAN_D'   ,'REAL'           ,'Stan wg dat'
      ,'ST_D_ICO' ,'STRING[50]'     ,'Stan - ikona'
      ,'PROBLEM'  ,'STRING[1]'      ,'Problem [T/N]'
      ,'P_COUNT'  ,'INTEGER'        ,'Ilość problemów'
      ,'ICO'      ,'STRING[50]'     ,'Ikona'
      ,'REF'      ,'STRING[16]'     ,'Źródło'
      ,'DK_C'     ,'STRING[16]'     ,'Cecha'
      ,'DKC_SYM'  ,'STRING[20]'     ,'Cecha - symbol'
      ,'STAN_DKC' ,'REAL'           ,'Stan wg atrybutów'
      ,'DKC_ICO'  ,'STRING[50]'     ,'Stan - ikona'
      ,'DKCKOLOR' ,'STRING[11]'     ,'Cecha - kolor'
   "+
   (_txt:='';
   {? M.M_ATR
   || {! _ii:=1..10
      |!
         _suf:=form(_ii,-2);
         {? ($('M.M_ATR().SL_'+_suf))()
         ||
            _acr:='\'WAR'+_suf+'\'';
            _typ:='\'STRING[25]\'';
            _name:='\''+($('M_ATR.SL_'+_suf+'().NA'))()+'\'';
            _txt+=','+_acr+','+_typ+','+_name+'\n'
         ?}
      !}
   ?};
   _txt)
   +")"))();

_ff:="_kolor:=cur_tab(1,1).MG_KOLOR; cur_tab(1,1).MG_KOLOR:=''; _kolor+','+_kolor";
_wyn.fld_fml('MG_KOLOR','BEFORE_DISPLAY',_ff);

_ff:="_kolor:=cur_tab(1,1).DKCKOLOR; cur_tab(1,1).DKCKOLOR:=''; _kolor+','+_kolor";
_wyn.fld_fml('DKCKOLOR','BEFORE_DISPLAY',_ff);


_wyn


\tab3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: tabela cech stanow
::  OLD: \tab3/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(4
   ,'REF'      ,'STRING[16]'  ,'$TAB.ref()'
   ,'TYPSTAN'  ,'STRING[2]'   ,'D-wg dat,MG-wg magazynow'
   ,'KOD'      ,'STRING[10]'  ,'Kod cechy'
   ,'SORT'     ,'STRING[10]'  ,'Kolejność'
   ,'CECHA'    ,'STRING[100]' ,'Cecha'
   ,'WAR'      ,'REAL'        ,'Wartość cechy'
   ,'STAN'     ,'REAL'        ,'Stan magazynowy'
   ,'ROZNICA'  ,'REAL'        ,'Różnica'
   ,'ICO'      ,'STRING[50]'  ,'Ikona'
   ,'PROBLEM'  ,'STRING[1]'   ,'Problem'
   ,'OPIS'     ,'STRING[150]' ,'Opis')


\tab1_stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: obliczanie stanu wg dni
::   WE: _a - argument - wynik formuly exec('pda_a','pda')
::  OLD: \tab1_stan/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_atr:=M.M_ATR<>null();

_Tab1:=exec('pda_tab1_wsk','plan_dostaw','TAB');
_t1ndx1:=exec('pda_tab1_wsk','plan_dostaw','NDX1');
_t1ndx2:=exec('pda_tab1_wsk','plan_dostaw','NDX2');
_Tab2:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_t2ndx:=exec('pda_tab2_wsk','plan_dostaw','NDX2');

_Tab1.cntx_psh(); _Tab2.cntx_psh();

_Tab1.index(_t1ndx1); _Tab1.prefix('1');
_Tab2.index(_t2ndx); _Tab2.prefix();

_date:=date();
_stan:=0;

:: naliczenie stanow
_loop:=_Tab2.first();
{!
|? _loop
|!
   {? _Tab2.D<=_date
   ||
      _stan+=_Tab2.ILP-_Tab2.ILR;
      _rozn:=_Tab2.ILP-_Tab2.ILR;
::    wg daty
      _ref1:=exec('tab1_update','plan_dostaw','1',_date,_stan,_Tab1,_t1ndx1);
::    wg magazynow
      _ref2:=exec('tab1_update','plan_dostaw','2',_date,_stan,_Tab1,_t1ndx1);
::    wg atrybutow
      _ref3:={? _atr || exec('tab1_update','plan_dostaw','3',_date,_stan,_Tab1,_t1ndx1) || null() ?};
::    szczegoly wg magazynow
      {? _ref2 || exec('tab1_update2','plan_dostaw',_ref2,_date,_rozn,_Tab2.MG,_Tab1,_t1ndx2) ?};
::    szczegoly wg atrybutow
      {? _ref3 || exec('tab1_update3','plan_dostaw',_ref3,_date,_rozn,_Tab2.DK_C,_Tab1,_t1ndx1) ?}
   ||
::    uzupelnienie stanow dla dat posrednich
::      _ildni:=(_Tab2.D-_date);
::      {? _ildni>1
::      || {! _ii:=1..(_ildni-1)
::         |!
::          wg daty
::            exec('tab1_update','plan_dostaw','1',_date+_ii,_stan,_Tab1,_t1ndx1);
::          wg magazynow
::            exec('tab1_update','plan_dostaw','2',_date+_ii,_stan,_Tab1,_t1ndx1);
::          wg atrybutow
::            {? _atr || exec('tab1_update','plan_dostaw','3',_date+_ii,_stan,_Tab1,_t1ndx1) ?}
::         !}
::      ?};
      _stan+=_Tab2.ILP-_Tab2.ILR;
      _rozn:=_Tab2.ILP-_Tab2.ILR;
::    nowe zapisy
::    wg daty
      _ref1:=exec('tab1_update','plan_dostaw','1',_Tab2.D,_stan,_Tab1,_t1ndx1);
::    wg magazynow
      _ref2:=exec('tab1_update','plan_dostaw','2',_Tab2.D,_stan,_Tab1,_t1ndx1);
::    wg atrybutow
      _ref3:={? _atr || exec('tab1_update','plan_dostaw','3',_Tab2.D,_stan,_Tab1,_t1ndx1) || null() ?};
::    szczegoly wg magazynow
      {? _ref2 || exec('tab1_update2','plan_dostaw',_ref2,_Tab2.D,_rozn,_Tab2.MG,_Tab1,_t1ndx2) ?};
::    szczegoly wg atrybutow
      {? _ref3 || exec('tab1_update3','plan_dostaw',_ref3,_Tab2.D,_rozn,_Tab2.DK_C,_Tab1,_t1ndx1) ?};
      _date:=_Tab2.D
   ?};
   _loop:=_Tab2.next()
!};

:: uzupelnienie stanow do daty konca analizy
::{? _Tab1.last() & _paramsa.DK<>date(0,0,0)
::|| _date:=_Tab1.D;
::   _stan:=_Tab1.STAN;
::   _ildni:=(_paramsa.DK-_date);
::   {? _ildni>0
::   || _stan:=_Tab1.STAN;
::      {! _ii:=1..(_ildni)
::      |!
::       wg daty
::         exec('tab1_update','plan_dostaw','1',_date+_ii,_stan,_Tab1,_t1ndx1);
::       wg magazynow
::         exec('tab1_update','plan_dostaw','2',_date+_ii,_stan,_Tab1,_t1ndx1);
::       wg atrybutow
::         {? _atr || exec('tab1_update','plan_dostaw','3',_date+_ii,_stan,_Tab1,_t1ndx1) ?}
::      !}
::   ?};
::   _date:=_Tab1.D;
::   _loop:=_Tab1.prev()
::?};

:: uzupelnienie icon
_stan:=0;
_loop:=_Tab1.first();
_first:=1;
{!
|? _loop
|!
   {? _first
   || _Tab1.ICO:='xwin16.png:61';
      _first:=0
   || _Tab1.ICO:={? _Tab1.STAN>_stan || 'xwin16.png:22' |? _Tab1.STAN=_stan || '' || 'xwin16.png:85' ?}
   ?};
   _stan:=_Tab1.STAN;
   _ico:=_Tab1.ICO;
   _date:=_Tab1.D;
:: wg daty
   _Tab1.put();
   _Tab1.cntx_psh();
:: wg magazynow
   _Tab1.prefix('2'); {? _Tab1.find_key(0,_date) || _Tab1.ICO:=_ico; _Tab1.put() ?};
:: wg atrybutow
   _Tab1.prefix('3'); {? _Tab1.find_key(0,_date) || _Tab1.ICO:=_ico; _Tab1.put() ?};
   _Tab1.cntx_pop();
   _loop:=_Tab1.next()
!};

:: kolor
_Asoc:=tab_tmp(2
   ,'ID'    ,'STRING[24]'  ,'Identyfikator'
   ,'KOLOR' ,'STRING[11]'  ,'Kolor');
_Tab1.prefix();
_loop:=_Tab1.first();
{!
|? _loop
|!
   _id:=_Tab1.MG+_Tab1.DK_C;
   {? _id='' & _Tab1.TREE
   || _Tab1.KOLOR:='255:255:255';
      _Tab1.put()
   |? _id<>''
   || {? ~_Asoc.find_key(_id,)
      || _Asoc.ID:=_id;
         _Asoc.KOLOR:=exec('kolor_rand','#color');
         _Asoc.add()
      ?};
      _Tab1.KOLOR:=_Asoc.KOLOR;
      _Tab1.put()
   ?};
   _loop:=_Tab1.next()
!};
_Tab2.prefix();
_loop:=_Tab2.first();
{!
|? _loop
|!
   {? _Tab2.MG<>''
   || {? ~_Asoc.find_key(_Tab2.MG,)
      || _Asoc.ID:=_id;
         _Asoc.KOLOR:=exec('kolor_rand','#color');
         _Asoc.add()
      ?};
      _Tab2.MG_KOLOR:=_Asoc.KOLOR;
      _Tab2.put()
   ?};
   {? _Tab2.DK_C<>''
   || {? ~_Asoc.find_key(_Tab2.DK_C,)
      || _Asoc.ID:=_id;
         _Asoc.KOLOR:=exec('kolor_rand','#color');
         _Asoc.add()
      ?};
      _Tab2.DKCKOLOR:=_Asoc.KOLOR
   ?};
   _loop:=_Tab2.put() & _Tab2.next()
!};

_Tab1.cntx_pop(); _Tab2.cntx_pop()


\tab2_stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: obliczenie stanu
::   WE: _a - 1-licz stan wg magazynow, 2-licz stan wg daty, 3-wg atrybutow
::----------------------------------------------------------------------------------------------------------------------
_Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_ndx1:=exec('pda_tab2_wsk','plan_dostaw','NDX1');
_ndx2:=exec('pda_tab2_wsk','plan_dostaw','NDX2');
_ndx4:=exec('pda_tab2_wsk','plan_dostaw','NDX4');

_Tab.cntx_psh();

_stan:=0;

{? _a=1
:: liczenie stanu wg magazynow
|| _mg:='';
   _Tab.index(_ndx1); _Tab.prefix();
   _loop:=_Tab.first();
   {!
   |? _loop
   |!
      {? _mg<>_Tab.MG || _stan:=0; _mg:=_Tab.MG ?};
      _stan+=_Tab.ILP-_Tab.ILR;
      _Tab.STAN_MG:=_stan;
      _loop:=_Tab.put() & _Tab.next()
   !}
:: liczenie stanu wg daty
|? _a=2
|| _Tab.index(_ndx2); _Tab.prefix();
   _loop:=_Tab.first();
   {!
   |? _loop
   |!
      _stan+=_Tab.ILP-_Tab.ILR;
      _Tab.STAN_D:=_stan;
      _loop:=_Tab.put() & _Tab.next()
   !}
:: liczenie stanu wg atrybutow
|? _a=3
|| _dk_c:='';
   _Tab.index(_ndx4); _Tab.prefix();
   _loop:=_Tab.first();
   {!
   |? _loop
   |!
      {? _dk_c<>_Tab.DK_C || _stan:=0; _dk_c:=_Tab.DK_C ?};
      _stan+=_Tab.ILP-_Tab.ILR;
      _Tab.STAN_DKC:=_stan;
      _loop:=_Tab.put() & _Tab.next()
   !}
?};

_Tab.cntx_pop()


\tab1_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Dodanie, aktualizacja stanu
::   WE: _a - typ
::       _b - data
::       _c - stan
::       _d - tabela stanów
::       _e - indeks tabeli stanów
::  OLD: \tab1_update/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_typ:=_a;
_date:=_b;
_stan:=_c;
_Tab1:=_d;
_t1ndx1:=_e;

_dzt:="
   _dzt:=_a~4;
   {? _dzt=1 || 'pon.'
   |? _dzt=2 || 'wt.'
   |? _dzt=3 || 'śr.'
   |? _dzt=4 || 'czw.'
   |? _dzt=5 || 'pt.'
   |? _dzt=6 || 'sob.'
   |? _dzt=7 || 'niedz.'
   || ''
   ?}
";

_Tab1.cntx_psh();
_Tab1.index(_t1ndx1);
_Tab1.prefix(_typ);

{? _Tab1.find_key(null(),_date)
|| _wyn:=_Tab1.ref();
   _Tab1.STAN:=_stan;
   _Tab1.put()
|| _Tab1.blank();
   _Tab1.T:=_typ;
   _Tab1.D:=_date;
   _Tab1.OPIS:=$_Tab1.D;
   _Tab1.TREE_O:=$_Tab1.D;
   _Tab1.DZTYG:=_dzt(_Tab1.D);
   _Tab1.STAN:=_stan;
   _Tab1.add();
   _wyn:=_Tab1.ref();
   {? _wyn & (_typ='2' | _typ='3') || exec('tab1_copy','plan_dostaw',_wyn) ?}
?};
_Tab1.cntx_pop();
_wyn


\tab1_update2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Dodanie, aktualizacja stanu wg magazynow
::   WE: _a - rodzic
::       _b - data
::       _c - wartosc
::       _d - magazyn
::       _e - tabela stanów
::       _f - indeks tabeli stanów
::  OLD: \tab1_update2/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_date:=_b;
_wart:=_c;
_mg:=_d;
_Tab1:=_e;
_t1ndx2:=_f;

{? _ref
|| _Tab1.cntx_psh();
   _Tab1.index(_t1ndx2);
   _Tab1.prefix('2');
   {? _Tab1.find_key(#_ref,_date,_mg,)
   || _Tab1.STAN+=_wart;
      _Tab1.put()
   || _Tab1.T:='2';
      _Tab1.TREE:=#_ref;
      _Tab1.D:=_date;
      _Tab1.TREE_O:=_mg;
      _Tab1.MG:=_mg;
      _Tab1.STAN:=_wart;
      _Tab1.add()
   ?};
   _Tab1.cntx_pop()
?}


\tab1_update3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Dodanie, aktualizacja stanu wg atrybutow
::   WE: _a - rodzic
::       _b - data
::       _c - wartosc
::       _d - cecha
::       _e - tabela stanów
::       _f - indeks tabeli stanów
::  OLD: \tab1_update3/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_date:=_b;
_wart:=_c;
_dk_c:=_d;
_Tab1:=_e;
_t1ndx1:=_f;

{? _ref
|| _Tab1.cntx_psh();
   _Tab1.index(_t1ndx1);
   _Tab1.prefix('3');
   {? _Tab1.find_key(#_ref,_date,_dk_c,)
   || _Tab1.STAN+=_wart;
      _Tab1.put()
   |? _wart
   || _Tab1.T:='3';
      _Tab1.TREE:=#_ref;
      _Tab1.D:=_date;
      _Tab1.TREE_O:=exec('FindAndGet','#table',DK_C,_dk_c,,"DK_C.SYM",'');
      _Tab1.DK_C:=_dk_c;
      _Tab1.WAR01:=exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.WAR01",'');
      _Tab1.WAR02:=exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.WAR02",'');
      _Tab1.WAR03:=exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.WAR03",'');
      _Tab1.WAR04:=exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.WAR04",'');
      _Tab1.WAR05:=exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.WAR05",'');
      _Tab1.WAR06:=exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.WAR06",'');
      _Tab1.WAR07:=exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.WAR07",'');
      _Tab1.WAR08:=exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.WAR08",'');
      _Tab1.WAR09:=exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.WAR09",'');
      _Tab1.WAR10:=exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.WAR10",'');
      _Tab1.STAN:=_wart;
      _Tab1.add()
   ?};
   _Tab1.cntx_pop()
?}


\cechy1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: uruchamia formuly cech stanu wg magazynow
::   WE: _a - argument - wynik formuly exec('pda_a','pda')
::  OLD: \cechy1/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_paramsa.TYP:='C';
_paramsa.PAR:='C1';

exec('core_d','plan_dostaw',_paramsa)


\cechy2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: uruchamia formuly cech stanu magazynowego
::   WE: _a - argument - wynik formuly exec('pda_a','pda')
::  OLD: \cechy2/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_paramsa.TYP:='C';
_paramsa.PAR:='C2';

exec('core_d','plan_dostaw',_paramsa)


\cechy3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: uruchamia formuly cech stanu magazynowego
::   WE: _a - argument - wynik formuly exec('pda_a','pda')
::  OLD: \cechy3/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_paramsa.TYP:='C';
_paramsa.PAR:='C3';

exec('core_d','plan_dostaw',_paramsa)


\tab1_wer1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: okno wertowania tabeli analizy zapotrzebowan
::  OLD: \tab1_wer1/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');

_wyn:=obj_new('WER');

_wer:=_Tab.mk_sel('Stany'@,'P',,'jjkdvjabnfjkasl',1);
_wyn.WER:=_wer;

_Tab.win_fld(_wer,,'D',,,10,,,'Data'@);
_Tab.win_fld(_wer,,'DZTYG',,,6,,,'Dzień tygodnia'@);
_Tab.win_fld(_wer,,'STAN',,,20,2,,'Stan'@);
_fb:="exec('tab1_bleg','plan_dostaw')";                  _Tab.win_act(_wer,0,'Formuła','&Legenda'@@,,,_fb,,,,,,'L');
_fb:="exec('goto_date','plan_dostaw',$cur_tab(1,1).D)";  _Tab.win_act(_wer,,'Formuła','Do d&aty'@@,,,_fb,,1,,,,'A');
_fb:="exec('tab1_brek','plan_dostaw')";                  _Tab.win_act(_wer,0,'Rekord',,,,_fb);
_fb:="{? cur_tab(1,1).ICO<>'' || cur_tab(1,1).ICO || 'xwin16.png:110' ?}";
                                                         _Tab.win_fml(_wer,,'STAN',,'ICON_BEFORE',_fb);

_wyn


\tab1_wer2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: okno wertowania tabeli analizy zapotrzebowan
::  OLD: \tab1_wer2/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');

_wyn:=obj_new('WER');

_wer:=_Tab.mk_sel('Stany'@,'P',,'fkaheifhasjkdnc',1,,,1);
_wyn.WER:=_wer;

_Tab.win_fld(_wer,,'TREE_O',,,20,,,'Data/Magazyn'@);
_Tab.win_fld(_wer,,'DZTYG',,,6,,,'Dzień tygodnia'@);
_Tab.win_fld(_wer,,'STAN',,,20,2,,'Stan'@);
_fb:="exec('tab1_bleg','plan_dostaw')";                     _Tab.win_act(_wer,0,'Formuła','&Legenda'@@,,,_fb,,,,,,'L');
_fb:="exec('goto_date','plan_dostaw',$cur_tab(1,1).D)";     _Tab.win_act(_wer,,'Formuła','Do d&aty'@@,,,_fb,,1,,,,'A');
_fb:="exec('tab1_brek','plan_dostaw')";                     _Tab.win_act(_wer,0,'Rekord',,,,_fb);
_fb:="{? cur_tab(1,1).ICO<>'' || cur_tab(1,1).ICO || 'xwin16.png:110' ?}";
                                                            _Tab.win_fml(_wer,,'STAN',,'ICON_BEFORE',_fb);
_wyn


\tab1_wer3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: okno wertowania tabeli analizy zapotrzebowan
::----------------------------------------------------------------------------------------------------------------------
_Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');

_wyn:=obj_new('WER');

_wer:=_Tab.mk_sel('Stany'@,'P',,'eofudavaklsjrhe',1,,,1);
_wyn.WER:=_wer;

_Tab.win_fld(_wer,,'TREE_O',,,25,,,'Data/Cecha'@);
_Tab.win_fld(_wer,,'DZTYG',,,-6,,,'Dzień tygodnia'@);
_Tab.win_fld(_wer,,'STAN',,,20,2,,'Stan'@);
{? M.M_ATR
|| {! _ii:=1..10
   |!
      _dl:={? _ii<4 || 25 || 7 ?};
      _suf:=form(_ii,-2);
      _name:=
         {? ($('M.M_ATR().SL_'+_suf))()
         || ($('M_ATR.SL_'+_suf+'().NA'))()
         || ' '
         ?};
      _Tab.win_fld(_wer,,'WAR'+_suf,,,_dl,,,_name)
   !}
?};
_fb:="exec('tab1_bleg','plan_dostaw')";                     _Tab.win_act(_wer,0,'Formuła','&Legenda'@@,,,_fb,,,,,,'L');
_fb:="exec('goto_date','plan_dostaw',$cur_tab(1,1).D)";     _Tab.win_act(_wer,,'Formuła','Do d&aty'@@,,,_fb,,1,,,,'A');
_fb:="exec('tab1_brek','plan_dostaw')";                     _Tab.win_act(_wer,0,'Rekord',,,,_fb);
_fb:="{? cur_tab(1,1).ICO<>'' || cur_tab(1,1).ICO || 'xwin16.png:110' ?}";
                                                            _Tab.win_fml(_wer,,'STAN',,'ICON_BEFORE',_fb);

_wyn


\tab2_wer1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: okno wertowania tabeli analizy zapotrzebowan - wg magazynow
::   WE: _a - PD_P.ref lub null
::----------------------------------------------------------------------------------------------------------------------
_pd_p:=_a.PD_P;
_mat:=_a.M;

_Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');

_wyn:=obj_new('WER','BTN1','BTN2','BTN3','AKC1','AKC2','AKC3');

_dokl:={? _mat || exec('FindAndGet','#table','M',$_mat,,"M.DOKL",0) || ST.DOKL ?};

_wer:=_Tab.mk_sel('Szczegóły pozycji planu dostawy'@,,,'#vnfjexsdafhape',1,,,,'U');
_wyn.WER:=_wer;

_Tab.win_fld(_wer,,'MG',,,8,,,'Magazyn'@);
_Tab.win_fld(_wer,,'MG_KOLOR',,,-4,,,'Kolor magazynu'@);
_Tab.win_fld(_wer,,'ODDZ',,,-2,,,'Oddział'@);
_Tab.win_fld(_wer,,'D',,,10,,,'Data'@);
_Tab.win_fld(_wer,,'T',,,5,,,'Czas'@);
_Tab.win_fld(_wer,,'TYP',,,20,,,'Typ'@);
_Tab.win_fld(_wer,,'O',,,40,,,'Opis'@);
_Tab.win_fld(_wer,,'ILP',,,10,_dokl,,'Ilość (+)'@);
_Tab.win_fld(_wer,,'ILR',,,10,_dokl,,'Ilość (−)'@);
_Tab.win_fld(_wer,,'STAN_MG',,,20,_dokl,,'Stan'@);
_fb:="exec('pda_popraw','plan_dostaw')";
_Tab.win_act(_wer,,'Formuła','&Popraw'@@,,,_fb,,,,,,'P');
_fb:="exec('pda_powiadom','plan_dostaw')";
_Tab.win_act(_wer,,'Formuła','P&owiadom'@@,,,_fb,,,,,,'O');
_fb:="exec('pda_bcechyst','plan_dostaw',exec('ts_mg','plan_dostaw'))";
_Tab.win_act(_wer,0,'Formuła','&Cechy stanu'@@,,,_fb,,1,,,,'C');
_fb:="exec('pda_bleg','plan_dostaw')";
_Tab.win_act(_wer,0,'Formuła','&Legenda'@@,,,_fb,,,,,,'L');
_fb:="exec('pda_bwys','plan_dostaw')";
_Tab.win_act(_wer,0,'Wyświetl',,,,_fb);
_fb:="{? cur_tab(1,1).ICO<>'' || cur_tab(1,1).ICO || 'xwin16.png:110' ?}";
                                                               _Tab.win_fml(_wer,,'TYP',,'ICON_BEFORE',_fb);
_fb:="{? cur_tab(1,1).STMG_ICO<>'' || cur_tab(1,1).STMG_ICO || 'xwin16.png:110' ?}";
                                                               _Tab.win_fml(_wer,,'STAN_MG',,'ICON_BEFORE',_fb);
{? _pd_p
:: pomijane jesli nie podano PD_P.ref
|| _fb:="exec('tab2_btodsw','plan_dostaw','1')";
   _Tab.win_act(_wer,,'Formuła','Odśw&ież'@@,,,_fb,,,,,,'I');
   _Tab.win_act(_wer,1,'Formuła','Odśw&ież'@@,,,_fb,,,,,,'I');
   _wyn.AKC1:='I';
   _wyn.BTN1:=_Tab.win_btn(_wer,'text='+'Odśw&ież'@+',panel=top,align=begin','menu:I');
   _fb:="exec('tab2_btkosz','plan_dostaw')";
   _Tab.win_act(_wer,,'Formuła','&Dodaj do koszyka'@@,,,_fb,,,,,,'D');
   _Tab.win_act(_wer,1,'Formuła','&Dodaj do koszyka'@@,,,_fb,,,,,,'D');
   _wyn.AKC2:='D';
   _wyn.BTN2:=_Tab.win_btn(_wer,'text='+'&Dodaj do koszyka'@+',panel=top,align=begin','menu:D');
   _fb:="exec('pda_ver_select','plan_dostaw')";
   _Tab.win_act(_wer,,'Formuła','&Wersja'@@,,,_fb,,,,,,'W');
   _Tab.win_act(_wer,1,'Formuła','&Wersj'@@,,,_fb,,,,,,'W');
   _wyn.AKC3:='W';
   _wyn.BTN3:=_Tab.win_btn(_wer,'text='+'&Wersja'@+',panel=top,align=begin','menu:W')
?};
_wyn


\tab2_wer2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: okno wertowania tabeli analizy zapotrzebowan - wg daty
::   WE: _a - PD_P.ref lub null
::----------------------------------------------------------------------------------------------------------------------
_pd_p:=_a.PD_P;
_mat:=_a.M;

_Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');

_wyn:=obj_new('WER','BTN1','BTN2','BTN3','BTN4','AKC1','AKC2','AKC3','AKC4');

_dokl:={? _mat || exec('FindAndGet','#table','M',$_mat,,"M.DOKL",0) || ST.DOKL ?};

_wer:=_Tab.mk_sel('Szczegóły pozycji planu dostawy'@,,,'#wedfjkajekrjka',1,,,,'U');
_wyn.WER:=_wer;

_Tab.win_fld(_wer,,'D',,,10,,,'Data'@);
_Tab.win_fld(_wer,,'T',,,5,,,'Czas'@);
_Tab.win_fld(_wer,,'MG',,,8,,,'Magazyn'@);
_Tab.win_fld(_wer,,'ODDZ',,,-2,,,'Oddział'@);
_Tab.win_fld(_wer,,'TYP',,,20,,,'Typ'@);
_Tab.win_fld(_wer,,'O',,,40,,,'Opis'@);
_Tab.win_fld(_wer,,'ILP',,,10,_dokl,,'Ilość (+)'@);
_Tab.win_fld(_wer,,'ILR',,,10,_dokl,,'Ilość (−)'@);
_Tab.win_fld(_wer,,'STAN_D',,,20,_dokl,,'Stan'@);
_fb:="exec('pda_popraw','plan_dostaw')";
_Tab.win_act(_wer,,'Formuła','&Popraw'@@,,,_fb,,,,,,'P');
_fb:="exec('pda_powiadom','plan_dostaw')";
_Tab.win_act(_wer,,'Formuła','P&owiadom'@@,,,_fb,,,,,,'O');
_fb:="exec('pda_bcechyst','plan_dostaw',exec('ts_d','plan_dostaw'))";
_Tab.win_act(_wer,0,'Formuła','&Cechy stanu'@@,,,_fb,,1,,,,'C');
_fb:="exec('pda_bleg','plan_dostaw')";
:_Tab.win_act(_wer,0,'Formuła','&Legenda'@@,,,_fb,,,,,,'L');
_fb:="exec('pda_bwys','plan_dostaw')";
_Tab.win_act(_wer,0,'Wyświetl',,,,_fb);
_fb:="{? cur_tab(1,1).ICO<>'' || cur_tab(1,1).ICO || 'xwin16.png:110' ?}";
_Tab.win_fml(_wer,,'TYP',,'ICON_BEFORE',_fb);
_fb:="{? cur_tab(1,1).ST_D_ICO<>'' || cur_tab(1,1).ST_D_ICO || 'xwin16.png:110' ?}";
_Tab.win_fml(_wer,,'STAN_D',,'ICON_BEFORE',_fb);
{? _pd_p
:: pomijane jesli nie podano PD_P.ref
|| _fb:="exec('tab2_btodsw','plan_dostaw','2')";
   _Tab.win_act(_wer,,'Formuła','Odśw&ież'@@,,,_fb,,,,,,'I');
   _Tab.win_act(_wer,1,'Formuła','Odśw&ież'@@,,,_fb,,,,,,'I');
   _wyn.AKC1:='I';
   _wyn.BTN1:=_Tab.win_btn(_wer,'text='+'Odśw&ież'@+',panel=top,align=begin','menu:I');
   _fb:="exec('tab2_btkosz','plan_dostaw')";
   _Tab.win_act(_wer,,'Formuła','&Dodaj do koszyka'@@,,,_fb,,,,,,'D');
   _Tab.win_act(_wer,1,'Formuła','&Dodaj do koszyka'@@,,,_fb,,,,,,'D');
   _wyn.AKC2:='D';
   _wyn.BTN2:=_Tab.win_btn(_wer,'text='+'&Dodaj do koszyka'@+',panel=top,align=begin','menu:D')
?};
_fb:="exec('sumuj','plan_dostaw')";
_Tab.win_act(_wer,,'Formuła','&Sumuj'@@,,,_fb,,,1,,,'S');
_Tab.win_act(_wer,1,'Formuła','&Sumuj'@@,,,_fb,,,,,,'S');
_wyn.AKC4:='S';
_wyn.BTN4:=_Tab.win_btn(_wer,'text='+'&Sumuj'@+',panel=top,align=begin','menu:S');
_wyn


\tab2_wer3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: okno wertowania tabeli analizy zapotrzebowan - wg atrybutow
::   WE: _a - PD_P.ref lub null
::----------------------------------------------------------------------------------------------------------------------
_pd_p:=_a.PD_P;
_mat:=_a.M;

_Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');

_wyn:=obj_new('WER','BTN1','BTN2','BTN3','AKC1','AKC2','AKC3');

_dokl:={? _mat || exec('FindAndGet','#table','M',$_mat,,"M.DOKL",0) || ST.DOKL ?};

_wer:=_Tab.mk_sel('Szczegóły pozycji planu dostawy'@,,,'#jfeopojcvqaejd',1,,,,'U');
_wyn.WER:=_wer;

_Tab.win_fld(_wer,,'DKC_SYM',,,20,,,'Cecha'@);
_Tab.win_fld(_wer,,'DKCKOLOR',,,-4,,,'Kolor magazynu'@);
_Tab.win_fld(_wer,,'ODDZ',,,-2,,,'Oddział'@);
_Tab.win_fld(_wer,,'MG',,,8,,,'Magazyn'@);
_Tab.win_fld(_wer,,'D',,,10,,,'Data'@);
_Tab.win_fld(_wer,,'T',,,5,,,'Czas'@);
_Tab.win_fld(_wer,,'TYP',,,20,,,'Typ'@);
_Tab.win_fld(_wer,,'O',,,40,,,'Opis'@);
_Tab.win_fld(_wer,,'ILP',,,10,_dokl,,'Ilość (+)'@);
_Tab.win_fld(_wer,,'ILR',,,10,_dokl,,'Ilość (−)'@);
_Tab.win_fld(_wer,,'STAN_DKC',,,20,_dokl,,'Stan'@);
::Funkcje "rozwojowe" nie obsłużone w standardzie
::_fb:="exec('pda_popraw','plan_dostaw')";
::_Tab.win_act(_wer,,'Formuła','&Popraw'@@,,,_fb,,,,,,'P');
::_fb:="exec('pda_powiadom','plan_dostaw')";
::_Tab.win_act(_wer,,'Formuła','P&owiadom'@@,,,_fb,,,,,,'O');
_fb:="exec('pda_bcechyst','plan_dostaw',exec('ts_dkc','plan_dostaw'))";
_Tab.win_act(_wer,0,'Formuła','&Cechy stanu'@@,,,_fb,,1,,,,'C');
_fb:="exec('pda_bleg','plan_dostaw')";
_Tab.win_act(_wer,0,'Formuła','&Legenda'@@,,,_fb,,,,,,'L');
_fb:="exec('pda_bwys','plan_dostaw')";
_Tab.win_act(_wer,0,'Wyświetl',,,,_fb);
_fb:="{? cur_tab(1,1).ICO<>'' || cur_tab(1,1).ICO || 'xwin16.png:110' ?}";
_Tab.win_fml(_wer,,'TYP',,'ICON_BEFORE',_fb);
_fb:="{? cur_tab(1,1).DKC_ICO<>'' || cur_tab(1,1).DKC_ICO || 'xwin16.png:110' ?}";
_Tab.win_fml(_wer,,'STAN_DKC',,'ICON_BEFORE',_fb);
{? _pd_p
:: pomijane jesli nie podano PD_P.ref
|| _fb:="exec('tab2_btodsw','plan_dostaw','3')";
   _Tab.win_act(_wer,,'Formuła','&Odśwież'@@,,,_fb,,,,,,'O');
   _Tab.win_act(_wer,1,'Formuła','&Odśwież'@@,,,_fb,,,,,,'O');
   _wyn.AKC1:='O';
   _wyn.BTN1:=_Tab.win_btn(_wer,'text='+'&Odśwież'@+',panel=top,align=begin','menu:O');
   _fb:="exec('tab2_btkosz','plan_dostaw')";
   _Tab.win_act(_wer,,'Formuła','&Dodaj do koszyka'@@,,,_fb,,,,,,'D');
   _Tab.win_act(_wer,1,'Formuła','&Dodaj do koszyka'@@,,,_fb,,,,,,'D');
   _wyn.AKC2:='D';
   _wyn.BTN2:=_Tab.win_btn(_wer,'text='+'&Dodaj do koszyka'@+',panel=top,align=begin','menu:D')
?};
_wyn


\tab3_wer1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: okno wertowania tabeli analizy zapotrzebowan
::----------------------------------------------------------------------------------------------------------------------
_Tab:=exec('pda_tab3_wsk','plan_dostaw','TAB');

_wyn:=obj_new('WER');

PD_D.index('TYP'); PD_D.prefix('C');
_high:={? PD_D.first() || PD_D.size() || 1 ?};

_wer:=_Tab.mk_sel('Cechy stanu'@,,,'ssdjsdnwerjewrj',1,,_high);
_wyn.WER:=_wer;

_Tab.win_fld(_wer,,'PROBLEM',,,,,,'Problem'@,,,2,,"'T'","'N'");
_Tab.win_fld(_wer,,'CECHA',,,30,,,'Cecha'@);
_Tab.win_fld(_wer,,'WAR',,,10,2,,'Wartość'@);
_Tab.win_fld(_wer,,'STAN',,,10,2,,'Stan'@);
_Tab.win_fld(_wer,,'ROZNICA',,,10,2,,'Różnica'@);
_Tab.win_fld(_wer,,'OPIS',,,100,2,,'Opis'@);
_fb:="exec('tab3_bleg','plan_dostaw')";
_Tab.win_act(_wer,0,'Formuła','&Legenda'@@,,,_fb,,,,,,'L');
_fb:="{? cur_tab(1,1).ICO<>'' || cur_tab(1,1).ICO || 'xwin16.png:110' ?}";
_Tab.win_fml(_wer,,'STAN',,'ICON_BEFORE',_fb);

_wyn


\tab1_bleg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: legenda przed tabeli stanow wg dni
::  OLD: \tab1_bleg/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PD_STAN#01')


\tab1_brek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: rekord przed tabeli stanow wg dni
::  OLD: \tab1_brek/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rekprzed','color','PD_STAN#01')


\goto_date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przechodzi w oknach do rekordu mniejszego lub rownego pod wzgledem daty
::   WE: _a - data w formie tekstu
::  OLD: \goto_date/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_Ndx:=exec('pda_tab2_wsk','plan_dostaw','NDX2');
_wer1:=exec('pda_tab2_wsk','plan_dostaw','WER1');
_wer2:=exec('pda_tab2_wsk','plan_dostaw','WER2');
_wer3:=exec('pda_tab2_wsk','plan_dostaw','WER3');

_ref:=_Tab.ref();
_Tab.cntx_psh();
_Tab.index(_Ndx);
{? _Tab.find_le(exec('str2date','#convert',_a)) || _ref:=_Tab.ref() ?};
_Tab.cntx_pop();

{? _Tab.seek(_ref)
||
   grp_disp(_Tab,_wer1);
   grp_disp(_Tab,_wer2);
   {? M.M_ATR<>null() || grp_disp(_Tab,_wer3) ?}
?};
~~


\pda_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: popraw tabeli analizy zapotrzebowan
::  OLD: \pda_popraw/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_params:=obj_new('PAR','DISPLAY');
_params.PAR:='P';
_params.DISPLAY:=1;

PD_D.cntx_psh();
PD_D.index('KOD'); PD_D.prefix(cur_tab(1,1).PD_D_KOD,cur_tab(1,1).PD_D_KOD);
{? PD_D.first() || _wyn:=($PD_D.FORMULA().FORMULA)(_params) ?};
{? var_pres('_wyn')=type_of(0) & _wyn=0 || FUN.info('Nie można wywołać akcji dla danej pozycji.'@) ?};
PD_D.cntx_pop()


\pda_powiadom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: powiadomienia w tabeli analizy zapotrzebowan
::  OLD: \pda_powiadom/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_params:=obj_new('PAR','DISPLAY');
_params.PAR:='O';
_params.DISPLAY:=1;

PD_D.cntx_psh();
PD_D.index('KOD'); PD_D.prefix(cur_tab(1,1).PD_D_KOD,cur_tab(1,1).PD_D_KOD);
{? PD_D.first() || _wyn:=($PD_D.FORMULA().FORMULA)(_params) ?};
{? var_pres('_wyn')=type_of(0) & _wyn=0 || FUN.info('Nie można wywołać akcji dla danej pozycji.'@) ?};
PD_D.cntx_pop()


\pda_bcechyst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: cechy stanu
::   WE: _a-typ stanu - wynik exec('ts_d','plan_dostaw') lub exec('ts_mg','plan_dostaw')
::  OLD: \pda_bcechyst/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_typstan:=_a;

_Tab2:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_Tab3:=exec('pda_tab3_wsk','plan_dostaw','TAB');
_ndx:=exec('pda_tab3_wsk','plan_dostaw','NDX2');
_wer:=exec('pda_tab3_wsk','plan_dostaw','WER1');
_Tab3.win_sel(_wer);

_Tab3.index(_ndx);
_Tab3.prefix($_Tab2.ref(),_typstan,);
{? _Tab3.first()
|| _Tab3.select()
|| FUN.info('Brak cech stanu.'@)
?}


\pda_bwys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed wyswietl tabeli analizy zapotrzebowan
::  OLD: \pda_bwys/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_params:=obj_new('PAR');
_params.PAR:='V';

PD_D.cntx_psh();
PD_D.index('KOD'); PD_D.prefix(cur_tab(1,1).PD_D_KOD,cur_tab(1,1).PD_D_KOD);
{? PD_D.first() || ($PD_D.FORMULA().FORMULA)(_params) ?};
PD_D.cntx_pop()


\pda_bleg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed Legenda tabeli analizy zapotrzebowan
::  OLD: \pda_bleg/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PDA#01')


\tab2_btodsw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przycisk odswiez
::  OLD: \tab2_btodsw/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
PD_N.cntx_psh();

_params:=exec('pda_a','plan_dostaw');
_params.PAR:='';
_params.M:=PD_P.M;
_params.TM_STAMP:=PD_P.tm_stamp();
_params.DK:=PD_P.PD_N().DK;
_params.TK:=PD_N.TK;
_params.DISP:=0;
_params.PD_P:=PD_P.ref();
_params.PD_P_ODS:=1;
_params.ODSW:=1;

PD_N.cntx_pop();

exec('pda','plan_dostaw',_params);

exec('tab2_btn_opt','plan_dostaw');

{? _a='1'
|| _Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');
   _wer:=exec('pda_tab1_wsk','plan_dostaw','WER1');
   grp_disp(_Tab,_wer)
|? _a='2'
|| _Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');
   _wer:=exec('pda_tab1_wsk','plan_dostaw','WER2');
   grp_disp(_Tab,_wer)
|? _a='3'
|| _Tab:=exec('pda_tab1_wsk','plan_dostaw','TAB');
   _wer:=exec('pda_tab1_wsk','plan_dostaw','WER3');
   grp_disp(_Tab,_wer)
?}


\tab2_btkosz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przycisk 'dodaj do koszyka'
::  OLD: \tab2_btkosz/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
exec('pd_k_bdod','plan_dostaw')


\tab2_btn_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: opcje przyciskow
::  OLD: \tab2_btn_opt/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
{? PD_P.get()
|| _Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');
   _wer1_act:='';
   _wer2_act:='';
   _wer3_act:='';
   {? PD_P.REFRESH='N' | PD_N.PLANPROD='T'
   || _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER1BTN1'),'state=grayed');
      _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER2BTN1'),'state=grayed');
      _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER3BTN1'),'state=grayed');
      _wer1_act+=exec('pda_tab2_wsk','plan_dostaw','WER1AKC1');
      _wer2_act+=exec('pda_tab2_wsk','plan_dostaw','WER2AKC1');
      _wer3_act+=exec('pda_tab2_wsk','plan_dostaw','WER3AKC1')
   |? PD_P.REFRESH='T'
   || _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER1BTN1'),'state=normal');
      _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER2BTN1'),'state=normal');
      _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER3BTN1'),'state=normal')
   ?};
   {? PD_N.PLANPROD='T'
   ||_Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER1BTN2'),'state=grayed');
      _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER2BTN2'),'state=grayed');
      _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER3BTN2'),'state=grayed');
      _wer1_act+=exec('pda_tab2_wsk','plan_dostaw','WER1AKC2');
      _wer2_act+=exec('pda_tab2_wsk','plan_dostaw','WER2AKC2');
      _wer3_act+=exec('pda_tab2_wsk','plan_dostaw','WER3AKC2')
   || _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER1BTN2'),'state=normal');
      _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER2BTN2'),'state=normal');
      _Tab.btn_opt(exec('pda_tab2_wsk','plan_dostaw','WER3BTN2'),'state=normal')
   ?};
   _Tab.actions_grayed(exec('pda_tab2_wsk','plan_dostaw','WER1'),_wer1_act);
   _Tab.actions_grayed(exec('pda_tab2_wsk','plan_dostaw','WER2'),_wer2_act);
   _Tab.actions_grayed(exec('pda_tab2_wsk','plan_dostaw','WER3'),_wer3_act)
?}


\tab3_bleg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed Legenda tabeli cech stanu
::  OLD: \tab3_bleg/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PDA#01#01')


\pda_tab_fld_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: formuly pol tabeli analizy zapotrzebowan
::  OLD: \pda_tab_fld_fml/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab1:=exec('pda_tab1_wsk','plan_dostaw','TAB');
_Tab2:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_Tab3:=exec('pda_tab3_wsk','plan_dostaw','TAB');

_Tab1.fld_attr('ICO',2);

_Tab2.fld_attr('STMG_ICO',2);
_Tab2.fld_attr('ST_D_ICO',2);
_Tab2.fld_attr('ICO',2);
_Tab2.fld_attr('REF',2);

_ff:="exec('pda_typ_kol','plan_dostaw')";
_Tab2.fld_fml('PD_D_KOD','BEFORE_DISPLAY',_ff);
_Tab2.fld_fml('TYP','BEFORE_DISPLAY',_ff);

_ff:="{? cur_tab(1,1).PRZY_ROZ='P' || '' || exec('findfnv','#color') ?}";
_Tab2.fld_fml('ILP','BEFORE_DISPLAY',_ff);

_ff:="{? cur_tab(1,1).PRZY_ROZ='R' || '' || exec('findfnv','#color') ?}";
_Tab2.fld_fml('ILR','BEFORE_DISPLAY',_ff);

_ff:="exec('pda_standkc_kol','plan_dostaw')";
_Tab2.fld_fml('STAN_DKC','BEFORE_DISPLAY',_ff);

_ff:="exec('pda_stanmg_kol','plan_dostaw')";
_Tab2.fld_fml('STAN_MG','BEFORE_DISPLAY',_ff);

_ff:="exec('pda_stand_kol','plan_dostaw')";
_Tab2.fld_fml('STAN_D','BEFORE_DISPLAY',_ff);

_ff:="{? fld()=0 || 'empty=1' || 'empty=0' ?}";
_Tab2.fld_fml('ILP','DISPLAY_FORMAT',_ff);
_Tab2.fld_fml('ILR','DISPLAY_FORMAT',_ff);

_ff:="exec('tab3_typ_kol','plan_dostaw')";
_Tab3.fld_fml('STAN','BEFORE_DISPLAY',_ff)


\pda_typ_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: kolor typu pozycji (obluga 'przed rekord')
::  OLD: \pda_typ_kol/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
return(~~);
_Tab:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_Wer1:=exec('pda_tab2_wsk','plan_dostaw','WER1');
_Wer2:=exec('pda_tab2_wsk','plan_dostaw','WER2');

PD_D.cntx_psh();

_keys:='';
_params:=obj_new('PAR','DISPLAY');

_params.PAR:='P';
_params.DISPLAY:=0;

PD_D.index('KOD'); PD_D.prefix(cur_tab(1,1).PD_D_KOD,cur_tab(1,1).PD_D_KOD);
{? PD_D.first()
|| {? ($PD_D.FORMULA().FORMULA)(_params) || _keys+='' || _keys+='P' ?}
|| _keys+='P'
?};

_params.PAR:='O';
_params.DISPLAY:=0;

PD_D.index('KOD'); PD_D.prefix(cur_tab(1,1).PD_D_KOD,cur_tab(1,1).PD_D_KOD);
{? PD_D.first()
|| {? ($PD_D.FORMULA().FORMULA)(_params) || _keys+='' || _keys+='O' ?}
|| _keys+='O'
?};

PD_D.cntx_pop();

_Tab.actions(_Wer1,_keys,,1);
_Tab.actions(_Wer2,_keys,,1);

exec('kolor1','plan_dostaw',_Tab.PD_D_KOD)


\pda_standkc_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: kolor stanu
::  OLD: \pda_standkc_kol/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab2:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_Tab3:=exec('pda_tab3_wsk','plan_dostaw','TAB');
_ndx:=exec('pda_tab3_wsk','plan_dostaw','NDX2');

_Tab3.index(_ndx);
_Tab3.prefix($_Tab2.ref(),exec('ts_dkc','plan_dostaw'),);

{? _Tab3.first()
|| exec('kolor1','plan_dostaw',_Tab3.KOD)
|| ''
?}


\pda_stanmg_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: kolor stanu
::  OLD: \pda_stanmg_kol/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab2:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_Tab3:=exec('pda_tab3_wsk','plan_dostaw','TAB');
_ndx:=exec('pda_tab3_wsk','plan_dostaw','NDX2');

_Tab3.index(_ndx);
_Tab3.prefix($_Tab2.ref(),exec('ts_mg','plan_dostaw'),);

{? _Tab3.first()
|| exec('kolor1','plan_dostaw',_Tab3.KOD)
|| ''
?}


\pda_stand_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: kolor stanu
::  OLD: \pda_stand_kol/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab2:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_Tab3:=exec('pda_tab3_wsk','plan_dostaw','TAB');
_ndx:=exec('pda_tab3_wsk','plan_dostaw','NDX2');

_Tab3.index(_ndx);
_Tab3.prefix($_Tab2.ref(),exec('ts_d','plan_dostaw'),);

{? _Tab3.first()
|| exec('kolor1','plan_dostaw',_Tab3.KOD)
|| ''
?}


\tab3_typ_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: kolor typu pozycji
::  OLD: \tab3_typ_kol/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab:=exec('pda_tab3_wsk','plan_dostaw','TAB');

exec('kolor1','plan_dostaw',_Tab.KOD)


\kolor1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: wyznaczenie koloru dla formuly _b definicji koloru
::  OLD: \kolor1/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
_kod:=_a;

_params:=obj_new('PAR','DEF');
_params.PAR:='K';
_params.DEF:=0;

_wyn:='';

PD_D.cntx_psh();
PD_D.index('KOD');
PD_D.prefix(_kod,_kod);
{? PD_D.first()
||
   _wyn:=($PD_D.FORMULA().FORMULA)(_params)
?};
PD_D.cntx_pop();

_wyn


\tab1_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Kopiowanie szczegolow stanu z daty poprzedzajacej zapis _a
::   WE: _a - cel
::  OLD: \tab1_copy/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;

_Tab1:=exec('pda_tab1_wsk','plan_dostaw','TAB');
_t1ndx1:=exec('pda_tab1_wsk','plan_dostaw','NDX1');

_Tab1.cntx_psh();
_Tab1.index(_t1ndx1);
_Tab1.prefix();
{? _Tab1.seek(_ref)
|| _date:=_Tab1.D;
   _Tab1.prefix(_Tab1.T);
   {? _Tab1.find_key(0,_Tab1.D-1)
   || _Tab1.prefix(_Tab1.T,#_Tab1.ref(),_Tab1.D);
      _loop:=_Tab1.first();
      {!
      |? _loop
      |!
         _Tab1.cntx_psh();
         _Tab1.prefix();
         _Tab1.TREE:=#_ref;
         _Tab1.D:=_date;
         _Tab1.OPIS:=$_Tab1.D;
         _Tab1.TREE_O:=
            {? _Tab1.T='2' || _Tab1.MG
            |? _Tab1.T='3' || exec('FindAndGet','#table',DK_C,_Tab1.DK_C,,"DK_C.SYM",'')
            || ''
            ?};
         _Tab1.DZTYG:='';
         _Tab1.add();
         _Tab1.cntx_pop();
         _loop:=_Tab1.next()
      !}
   ?}
?};
_Tab1.cntx_pop()


\core1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Czesc zasadnicza formul:
::       exec('stan','plan_dostaw'), exec('uzup','plan_dostaw')
::       , exec('cechy1','plan_dostaw'), exec('cechy2','plan_dostaw')
::       , exec('core','plan_dostaw')
::   WE: _a - argument - wynik formuly exec('pda_a','plan_dostaw')
::       _b - domyslny wynik
::  OLD: \core1/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;
_wyn:=_b;

{? _paramsa.PD_P=null()
||
   PD_D.cntx_psh();

   PD_D.index('KOD');
   PD_D.prefix(_paramsa.PD_D,);
   {? PD_D.first()
   ||
      _wyn:=($PD_D.FORMULA().FORMULA)(_paramsa)
   ?};
   PD_D.cntx_pop()
||
   _pd_p:=_paramsa.PD_P;

   PD_D.cntx_psh(); PD_P.cntx_psh();
   PD_P.prefix();

   {? PD_P.seek(_pd_p)
   ||
      PD_D_USE.index('PD_D_USE');
      PD_D.index('KOD');
      PD_D.prefix(_paramsa.PD_D,);
      {? PD_D.first()
      ||
         PD_D_USE.prefix(PD_P.PD_N,_pd_p);
         {? PD_D_USE.first()
         || {? PD_D_USE.find_key(PD_D.ref()) || _wyn:=($PD_D.FORMULA().FORMULA)(_paramsa) ?}
         || PD_D_USE.prefix(PD_P.PD_N,null());
            {? PD_D_USE.find_key(PD_D.ref()) || _wyn:=($PD_D.FORMULA().FORMULA)(_paramsa) ?}
         ?}
      ?}
   ?};

   PD_D.cntx_pop(); PD_P.cntx_pop()
?};

_wyn


\uzup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: uruchamia formuly uzupelnienia stanu magazynowego
::   WE: _a - argument - wynik formuly exec('pda_a','pda')
::       _b - domyslny wynik
::  OLD: \uzup/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;
_wyn:=_b;

_paramsa.TYP:='U';
_paramsa.PAR:='U';

exec('core1','plan_dostaw',_paramsa,_b)


\uzup_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: uruchamia formuly inicjujace uzupelnienia stanu magazynowego
::   WE: _a - argument - wynik formuly exec('pda_a','plan_dostaw')
::       _b - domyslny wynik
::  OLD: \uzup_init/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;
_wyn:=_b;

_paramsa.TYP:='U';
_paramsa.PAR:='UI';

exec('core1','plan_dostaw',_paramsa,_b)


\pd_wykres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Dane do wykresu przewidywanych stanów materiału
::  OLD: \pd_wykres/pd_a.fml
::----------------------------------------------------------------------------------------------------------------------
__pda.TAB1.TAB


\var_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: ustawienie zmiennych dla PD_K
::   WE: TYPYZAM.R
::  OLD: \var_set/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a='D'
||
   BEER.SZ:='Z';
   BEER.MW:='P';
   ATR.MJS:='PD_K';
   exec('ustaw_ww','eurusd','W');
   exec('ust_lw','eurusd',0);
   exec('ustapdkprz','jm');
   BEER.TAB:=ATR.MJS;
   {? exec('tte_lic','tte')='T'
   || PD_K.win_edit('RED_PROD')
   || PD_K.win_edit('RED')
   ?}
||
   BEER.SZ:='S';
   BEER.MW:='Z';
   BEER.CZY_REZT:=0;
   ATR.MJS:='PD_K';
   exec('ustaw_ww','eurusd','W');
   exec('ust_lw','eurusd',0);
   exec('ustazprz','zamsiw_poz');
   {? exec('tte_lic','tte')='T'
   || PD_K.win_edit('RED_PROD')
   || PD_K.win_edit('RED')
   ?}
?}


\pd_k_obl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: obliczanie pozycji
::  OLD: \pd_k_obl/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
{? PD_K.TYPYZAM().R='D'
|| _jmz:=PD_K.JMZ & PD_K.JM<>PD_K.J2;
   PD_K.WAR:=({? _jmz || PD_K.IL2 || PD_K.IL ?}*PD_K.CENA)$2;
   {? PD_K.WAL=INFO.NAROD
   || PD_K.WARW:=PD_K.WAR
   || PD_K.WARW:=({? _jmz || PD_K.IL2 || PD_K.IL ?}*PD_K.CWAL)$2
   ?}
||
   PD_K.WAR:=(PD_K.IL*PD_K.CENA)$2
?}


\pd_buf_d_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed dolocz PD_BUF_D
::  OLD: \pd_buf_d_ba/pd_buf_d.fml
::----------------------------------------------------------------------------------------------------------------------
PD_BUF_D.blank();
PD_BUF_D.win_edit('RED');
{!
|?
   {? PD_BUF_D.edit("chk_rec()")
   ||
      do();
      PD_BUF_D.cntx_psh();
      PD_BUF_D.index('KOD'); PD_BUF_D.prefix(PD_BUF_D.KOD,PD_BUF_D.KOD);
      {? PD_BUF_D.first()
      ||
         undo();
         FUN.info('Formuła o kodzie %1 już istnieje.'@[PD_BUF_D.KOD])
      ?};
      PD_BUF_D.cntx_pop();
      PD_BUF_D.add();
      ~end()
   ?}
!};
0


\pd_buf_d_bu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed popraw PD_BUF_D
::  OLD: \pd_buf_d_bu/pd_buf_d.fml
::----------------------------------------------------------------------------------------------------------------------
_kod:=PD_BUF_D.KOD;
_formula:=PD_BUF_D.FORMULA;

PD_BUF_D.win_edit('RED');
{? PD_BUF_D.edit("chk_rec()")
||
   do();
   {? PD_BUF_D.KOD<>_kod | PD_BUF_D.FORMULA<>_formula
   ||
      PD_BUF.cntx_psh();
      PD_BUF.index('KOD'); PD_BUF.prefix(_kod,_kod);
      {? PD_BUF.first()
      ||
         undo();
         FUN.info('Istnieją zapisy w buforze. Modyfikacja kodu i formły niedostępna.'@)
      ||
         _ref:=PD_BUF_D.ref();
         PD_BUF_D.cntx_psh();
         PD_BUF_D.index('KOD'); PD_BUF_D.prefix(PD_BUF_D.KOD,PD_BUF_D.KOD);
         {? PD_BUF_D.first() & PD_BUF_D.ref()<>_ref
         ||
            undo();
            FUN.info('Formuła o kodzie %1 już istnieje.'@[PD_BUF_D.KOD])
         ?};
         PD_BUF_D.cntx_pop()
      ?};
      PD_BUF.cntx_pop()
   ?};
   PD_BUF_D.put();
   end()
?};
0


\pd_buf_d_run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: uruchamia formuly bufora planu dostaw
::  OLD: \pd_buf_d_run/pd_buf_d.fml
::----------------------------------------------------------------------------------------------------------------------
PD_Z.PAR:=exec('get','#params',100700,2);

PD_Z.TRIGNAME:='pdbuf';
PD_Z.REFRESH:=1;

{? PD_Z.PAR='T'
|| PD_BUF_D.cntx_psh();
   PD_BUF_D.index('A');
   PD_BUF_D.prefix('T');
   _loop:=PD_BUF_D.first();
   {!
   |? _loop
   |!
      ($PD_BUF_D.FORMULA().FORMULA)();
      _loop:=PD_BUF_D.next()
   !};
   PD_BUF_D.cntx_pop()
?}


\pd_buf_d_bwykon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: wykonaj przed tabeli PD_BUF_D
::  OLD: \pd_buf_d_bwykon/pd_buf.fml
::----------------------------------------------------------------------------------------------------------------------
PD_BUF_D.cntx_psh();
_Sel:=PD_BUF_D.sel_aget();
{? ~_Sel.first() || _Sel.REF:=#PD_BUF_D.ref(); _Sel.add() ?};

{? {? _Sel.size>1
   || FUN.ask('Wypełnić bufor planu dostaw wg zaznaczonych formuł?'@)
   || FUN.ask('Wypełnić bufor planu dostaw wg formuły o kodzie %1?'@[PD_BUF_D.KOD])
   ?}
||
   _loop:=_Sel.first();
   {!
   |? _loop
   |!
      {? PD_BUF_D.seek(_Sel.REF,)
      ||
         PD_Z.PAR:={? PD_BUF_D.A='T' || 'S' || 'E' ?};
         ($PD_BUF_D.FORMULA().FORMULA)()
      ?};
      _loop:=_Sel.next()
   !};
   PD_BUF_D.sel_adel()
?};
PD_BUF_D.cntx_pop();
0


\pd_buf_d_bbufor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: bufor przed tabeli PD_BUF_D
::  OLD: \pd_buf_d_bbufor/pd_buf_d.fml
::----------------------------------------------------------------------------------------------------------------------
DK_C.cntx_psh();
PD_BUF.fld_fml('DK_C','BEFORE_DISPLAY',"{? PD_BUF.DK_C || DK_C.use(ref_name(PD_BUF.DK_C)) ?}");
PD_BUF.cntx_psh();
PD_BUF.index('KOD_DT');
PD_BUF.prefix(PD_BUF_D.KOD,);
PD_BUF.win_sel('WER');
PD_BUF.select();
PD_BUF.win_sel();
PD_BUF.cntx_pop();
DK_C.cntx_pop()


\pd_buf_d_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: PD_BUF_D - usuń
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć bieżący wiersz?'@)
|| do();
   PD_BUF.cntx_psh();
   PD_BUF.index('KOD_DT');
   PD_BUF.prefix(PD_BUF_D.KOD,);

   _loop:=PD_BUF.first();
   {!
   |? _loop
   |!
      _loop:=PD_BUF.del()
   !};
   PD_BUF.cntx_pop();
   PD_BUF_D.del();
   end()
?}


\pd_k_lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: r_lock PD_K
::   WE: [_a] - 0-bez komunikatow, 1-z komunikatami
::  OLD: \pd_k_lock/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};

{? exec('lock','#record','PD_K','SES_ID',PD_K.ref,_a)
|| PD_K.get()
?}


\pd_k_unlock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: r_unlock na PD_K
::  OLD: \pd_k_unlock/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
exec('unlock','#record','PD_K','SES_ID',PD_K.ref)


\del_lnk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: usuniecie powiazania miedzy zamowieniem _a lub jego pozycja a pozycjami koszyka
::   WE: _a - ZD_NAG.ref lub ZK_N.ref
::       _b - ZD_POZ.ref lub ZK_P.ref
::  OLD: \del_lnk/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
PD_K.cntx_psh();
PD_K.index('ZAM_REF1');
{? _<2 || PD_K.prefix($_a) || PD_K.prefix($_a,$_b,) ?};
{? PD_K.first()
||
   {!
   |?
      PD_K.cntx_psh();
      PD_K.prefix();
      PD_K.ZAM_REF:=PD_K.POZ_REF:='';
      PD_K.ZAM_SYM:='';
      PD_K.ZAM_POZ:=0;
      PD_K.CZY_ZAM:='N';
      PD_K.ILP:=PD_K.IL-exec('pd_k_ilzl','plan_dostaw',$PD_K.ref);
      {? PD_K.put()
      || {? PD_K.TYPYZAM().R='D' || exec('dd','plan_dostaw',PD_K.ref()) ?};
         PD_P.cntx_psh();
         PD_P.prefix();
         {? PD_P.seek(PD_K.PD_P)
         || PD_P.ILKOSZYK:=exec('ilwkoszyku','plan_dostaw',PD_K.PD_N,PD_K.PD_P);
            PD_P.put()
         ?};
         PD_P.cntx_pop()
      ?};
      PD_K.cntx_pop();
      PD_K.first()
   !}
?};
PD_K.cntx_pop()


\dd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przypisanie dostawy dedykowanej
::   WE: _a - PD_K.ref()
::  OLD: \dd/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
PD_K_DD.cntx_psh(); ZK_P.cntx_psh();
PD_K_DD.index('PD_K_DD');
PD_K_DD.prefix(_a);
_loop:=PD_K_DD.first();
{!
|? _loop
|!
   ZK_P.use(8+PD_K_DD.ZK_P);
   ZK_P.prefix;
   {? ZK_P.seek(PD_K_DD.ZK_P)
   ||
      ZK_P.ZD_POZ:=
         {? PD_K_DD.PD_K().POZ_REF=''
         || $PD_K_DD.PD_K
         || PD_K.POZ_REF
         ?};
      ZK_P.put()
   ?};
   _loop:=PD_K_DD.next()
!};
PD_K_DD.cntx_pop(); ZK_P.cntx_pop()


\ilwkoszyku
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: oblicza ilosc w koszyku
::   WE: _a - PD_N.ref()
::       _b - PD_P.ref()
::  OLD: \ilwkoszyku/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;

PD_K.cntx_psh();
PD_K.index('PD_K');
PD_K.prefix(_a,_b);
_loop:=PD_K.first();
{!
|? _loop
|!
   _wyn+=PD_K.ILP;
   _loop:=PD_K.next()
!};
PD_K.cntx_pop();

_wyn


\is_pdbuf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Czy dostępne są trigery zasilające bufor planu dostaw?
::   WY: 0 / 1
::  OLD: \is_pdbuf/pd_buf.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('get','#params',100700,2)='T'
|| 1
|| FUN.info('Funkcja niedostępna — parametr %1 jest wyłączony.'@['100700']);
   0
?}


\env_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Tworzy środowisko dla analiz
::   WY: 0 / 1 (czy udało się utworzyć środowisko)
::  OLD: \env_create/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
exec('env_delete','plan_dostaw');

__ENV_AN:=obj_new('IL','DOKL','DATE','TIME','TAB','NDX_LP','NDX_MAIN','WER','RED','SKIP','INSERT','USED');

:: Analizowana ilość (np. dla technologii)
__ENV_AN.IL:=0;
__ENV_AN.DOKL:=ST.DOKL;

:: Data i godzina (np. gdy nie ma na źródłowych zapisach - karta technologiczna, przepis planistyczny)
__ENV_AN.DATE:=date();
__ENV_AN.TIME:=time();

:: lista pozycji wykluczonych z analizy
__ENV_AN.SKIP:=tab_tmp(1,
   'TAB','INTEGER','Reference rekordu analizy',
   'REF','STRING[16]','Reference wykluczonego zapisu'
);

:: lista pozycji dodanych do analizy
__ENV_AN.INSERT:=tab_tmp(4,
   'TAB','INTEGER','Reference rekordu analizy',
   'REF','STRING[16]','Reference dodanego zapisu',
   'D','DATE','Data',
   'T','TIME','Czas',
   'IL','REAL','Ilość'
);

:: lista użytych materiałów, które należy uwzględnić w kolejnych pozycjach analiz
__ENV_AN.USED:=tab_tmp(3,
   'M','STRING[16]','$M.ref()',
   'D','DATE','Data',
   'T','TIME','Czas',
   'IL','REAL','Ilość'
);

:: Tabela
__ENV_AN.TAB:=tab_tmp(5,
   'KTM','STRING[50]','Indeks materiału'@,
   'DW','DATE','Wymagana dostępność — data'@,
   'TW','TIME','Wymagana dostępność — godzina'@,
   'XW','REAL','Wymagana dostępność — tm_stamp'@,
   'LP','INTEGER','Lp.'@,
   'M','INTEGER','#M.ref()',
   'N','STRING[100]','Nazwa materiału'@,
   'DOKL','INTEGER','Dokładność'@,
   'IL','REAL','Ilość'@,
   'JM','STRING[10]','jm'@,
   'DOSTEPNY','INTEGER','Dostępny na wymagany termin'@,
   'IL_DOST','REAL','Ilość dostępna na wymagany termin'@,
   'DM','DATE','Możliwa dostępność — data'@,
   'TM','TIME','Możliwa dostępność — godzina'@,
   'XM','REAL','Możliwa dostępność — tm_stamp'@,
   'DD','DATE','Możliwa dostawa — data'@,
   'TD','TIME','Możliwa dostawa — godzina'@,
   'XD','REAL','Możliwa dostawa — tm_stamp'@
);
_tab:=__ENV_AN.TAB;
__ENV_AN.NDX_MAIN:=_tab.index('?');
__ENV_AN.NDX_LP:=_tab.ndx_tmp(,,'LP',,);

_tab.fld_attr('DOKL',2);
_tab.fld_attr('XW',2);
_tab.fld_attr('XM',2);
_tab.fld_attr('XD',2);
_fd:="
   'out_prec='+
   {? (2+cur_kwin())='e_'
   || $cur_tab(1,1).DOKL
   || $ST.DOKL
   ?}
";
_tab.fld_fml('IL','DISPLAY_FORMAT',_fd);
_tab.fld_fml('IL_DOST','DISPLAY_FORMAT',_fd);
_fbd:="
   {? cur_tab(1,1).XW<SYSLOG.tm_stamp()
   || exec('flddisp','color','PD_AP#XW#01')
   || ~~
   ?}
";
_tab.fld_fml('DW','BEFORE_DISPLAY',_fbd);
_tab.fld_fml('TW','BEFORE_DISPLAY',_fbd);

:: Okno wertowania
_wer:=__ENV_AN.WER:=_tab.mk_sel(
   'Analiza dostępności materiałów w czasie'@,,,'#analizadostep',1,1,,,'U',,,,,'html_maximized'
);
_tab.win_fld(_wer,,'KTM',,,20,,,'Indeks'@);
_tab.win_fld(_wer,,'N',,,30,,,'Nazwa'@);
_tab.win_fld(_wer,,'IL',,,-15,ST.DOKL,,'Ilość'@);
_tab.win_fld(_wer,,'JM',,,5,,,'jm'@);
_tab.win_fld(_wer,,'DW',,,-10,,,'Data wymagana'@,,'Wymagana dostępność — data'@);
_tab.win_fld(_wer,,'TW',,,-8,,,'Czas wymagany'@,,'Wymagana dostępność — godzina'@);
_tab.win_fld(_wer,,'DOSTEPNY',,,-3,,,'Ok'@,,'Oznacza, czy surowiec jest dostępny na wymagany termin'@,2,,"1","0");
_tab.win_fld(_wer,,'IL_DOST',,,-15,ST.DOKL,,'Dostępne na wymagany termin'@,,'Ilość dostępna na wymagany termin'@);
_tab.win_fld(_wer,,'DM',,,-10,,,'Data dostępności'@,,'Możliwa dostępność — data'@);
_tab.win_fld(_wer,,'TM',,,-8,,,'Czas dostępności'@,,'Możliwa dostępność — godzina'@);
_tab.win_fld(_wer,,'DD',,,-10,,,'Data dostawy'@,,'Możliwa dostawa — data'@);
_tab.win_fld(_wer,,'TD',,,-8,,,'Czas dostawy'@,,'Możliwa dostawa — godzina'@);
:: akcje
_fb:="exec('an_szczegoly','plan_dostaw')";
_tab.win_act(_wer,,'Formuła','Szcz&egóły'@@,,,_fb,,1,,,,'E');
_fb:="exec('legenda','color','PD_AP#01','@PD_AP#XW')";
_tab.win_act(_wer,,'Formuła','&Legenda'@@,,,_fb,,,,,,'L');
_fb:="exec('pd_ap_brek','plan_dostaw')";
_tab.win_act(_wer,,'Rekord',,,,_fb);
:: przyciski
_btn:=_tab.win_btn(_wer,'text='+'Szcz&egóły'@,'menu:E',,,,,,'noempty');
_tab.btn_sopt(_wer,_btn,'tooltip='+'Analiza dostępności materiału w czasie'@);

:: Okno redakcyjne
_red:=__ENV_AN.RED:=_tab.mk_edit('Analiza dla materiału'@,,'#analizadostmat');
_tab.win_esep(_red,'Materiał'@);
_tab.win_efld(_red,,'KTM',,,,,,'Indeks'@);
_tab.win_efld(_red,,'N',,,,,,'Nazwa'@);
_tab.win_esep(_red,'Dostępność'@);
_tab.win_efld(_red,,'IL',,,13);
_tab.win_efld(_red,AH,'H');
_tab.win_efld(_red,,'DW');
_tab.win_efld(_red,,'TW');
_tab.win_efld(_red,AH,'H');
_tab.win_efld(_red,,'DOSTEPNY',,,3,,,'Dostępny'@,,,'check-box','check_label="%1"'['Surowiec jest dostępny'@],"1","0");
_tab.win_efld(_red,,'IL_DOST',,,13);
_tab.win_efld(_red,AH,'H');
_tab.win_efld(_red,,'DM');
_tab.win_efld(_red,,'TM');
_tab.win_efld(_red,AH,'H');
_tab.win_efld(_red,,'DD');
_tab.win_efld(_red,,'TD');

_tab.win_sel(_wer);
_tab.win_edit(_red);
1


\env_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Usuwa środowisko dla analiz
::  OLD: \env_delete/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__ENV_AN');
~~


\pd_ap_brek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: rekord przed tabeli analizy
::  OLD: \pd_ap_brek/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rekprzed','color','PD_AP#01')


\an_szczegoly
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Wyświetlenie szczegółów dla pozycji analizy
::  OLD: \an_szczegoly/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=__ENV_AN.TAB;
_skip:=__ENV_AN.SKIP;
_insert:=__ENV_AN.INSERT;

M.cntx_psh();
M.clear();
{? M.seek(_tab.M,)
||
   _args:=exec('pda_a','plan_dostaw');
   _args.M:=M.ref();
   _args.TM_STAMP:=SYSLOG.tm_stamp();
::   _args.DK:=
::   _args.TK:=
   _args.IL:=_tab.IL;
   _args.DW:=_tab.DW;
   _args.TW:=_tab.TW;

   _skip.prefix(_tab.ref());
   {? _skip.first()
   || {!
      |? _args.skip_add(_skip.REF);
         _skip.next()
      !}
   ?};
   _insert.prefix(_tab.ref());
   {? _insert.first()
   || {!
      |? _args.insert_add(_insert.REF,_insert.D,_insert.T,_insert.IL);
         _insert.next()
      !}
   ?};
   _args.DISP:=1;
   exec('pda','plan_dostaw',_args)
?};
M.cntx_pop();
~~


\an_add_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Argument funkcji exec('an_add','plan_dostaw')
::   WY: _args
::  OLD: \an_add_a/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('M','IL','DW','TW','DOSTEPNY','IL_DOST','DM','TM','SKIP','skip_chk','skip_add','skip_del'
   ,'INSERT','insert_add'
);

:: Materiał - #M.ref()
_args.M:=null();
:: Ilość
_args.IL:=0;
:: Data wymagana
_args.DW:=date(0,0,0);
:: Godzina wymagana
_args.TW:=time(0,0,0);
:: Czy dostępny
_args.DOSTEPNY:=0;
:: Ilość dostępna na wymagany termin
_args.IL_DOST:=0;
:: Data możliwa
_args.DM:=date(0,0,0);
:: Godzina możliwa
_args.TM:=time(0,0,0);
:: lista pozycji wykluczonych z analizy
_args.SKIP:=tab_tmp(1,'REF','STRING[16]','Reference wykluczonego zapisu');
_args.skip_chk:="~.SKIP.find_key(_a)";
_args.skip_add:="{? ~.SKIP.find_key(_a) || .SKIP.REF:=_a; .SKIP.add() ?}";
_args.skip_del:="{? .SKIP.find_key(_a) || .SKIP.del() ?}";
:: lista dodawanych tymczasowo pozycji z analizy
_args.INSERT:=tab_tmp(3,
   'REF','STRING[16]','Reference dodawanego zapisu',
   'D','DATE','Data',
   'T','TIME','Czas',
   'IL','REAL','Ilość'
);
_args.insert_add:="
   {? ~.INSERT.find_key(_a,_b,_c)
   || .INSERT.REF:=_a;
      .INSERT.D:=_b;
      .INSERT.T:=_c;
      .INSERT.IL:=_d;
      .INSERT.add()
   ?}
";

:: Zwracamy tablicę
_args


\an_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Dodanie wpisu do tabeli z analizą
::   WE: _a - argument - wynik formuly exec('an_add_a','plan_dostaw')
::   WY: wynik add()
::  OLD: \an_add/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

M.cntx_psh();
M.clear();
{? M.seek(_args.M)
||
   _skip_add:="
      __ENV_AN.SKIP.TAB:=_a;
      __ENV_AN.SKIP.REF:=_b;
      __ENV_AN.SKIP.add()
   ";
   _insert_add:="
      __ENV_AN.INSERT.TAB:=_a;
      __ENV_AN.INSERT.REF:=_b;
      __ENV_AN.INSERT.D:=_c;
      __ENV_AN.INSERT.T:=_d;
      __ENV_AN.INSERT.IL:=_e;
      __ENV_AN.INSERT.add()
   ";

   _tab:=__ENV_AN.TAB;
   _tab.cntx_psh();
   _tab.index(__ENV_AN.NDX_LP);
   _tab.prefix();
   {? _tab.last() || _lp:=_tab.LP+1 || _lp:=1 ?};
   _tab.cntx_pop();

   _tab.LP:=_lp;
   _tab.M:=#_args.M;
   _tab.KTM:=M.KTM;
   _tab.N:=M.N;
   _tab.DOKL:=M.DOKL;
   _tab.IL:=_args.IL;
   _tab.JM:=M.J().KOD;
   _tab.DW:=_args.DW;
   _tab.TW:=_args.TW;
   _tab.XW:=exec('create','#tm_stamp',_tab.DW,_tab.TW);
   _tab.DOSTEPNY:=_args.DOSTEPNY;
   _tab.IL_DOST:=_args.IL_DOST;
   _tab.DM:=_args.DM;
   _tab.TM:=_args.TM;
   _tab.XM:=exec('create','#tm_stamp',_tab.DM,_tab.TM);
   _dt:=exec('mdost_first','plan_dostaw',M.ref(),_tab.DW);
   _tab.DD:=_dt.DATE;
   _tab.TD:=_dt.TIME;
   obj_del(_dt);
   _tab.XD:=exec('create','#tm_stamp',_tab.DD,_tab.TD);
   _res:=_tab.add();
   {? _res
   || {? _args.SKIP.first()
      || {!
         |? _skip_add(_tab.ref(),_args.SKIP.REF);
            _args.SKIP.next()
         !}
      ?};
      {? _args.INSERT.first()
      || {!
         |? _insert_add(
               _tab.ref(),
               _args.INSERT.REF,
               _args.INSERT.D,
               _args.INSERT.T,
               _args.INSERT.IL
            );
            _args.INSERT.next()
         !}
      ?}
   ?}
||
   _res:=0
?};
M.cntx_pop();
_res


\mdost_first
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zwraca pierwszy możliwy termin dostawy dla materiału
::   WE: _a - M.ref()
::       _b - wymagana data
::  OLD: \mdost_first/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
_dt:=obj_new('DATE','TIME');

_wal:=exec('bl_wal','ustawienia');
_dost:=exec('dost','ceny_mat',_a,_b,_wal,0).ILDNI;

{? _dost<>0
||
   _dt.DATE:=date()+_dost;
   _dt.TIME:=time()
||
   _dt.DATE:=date(0,0,0);
   _dt.TIME:=time(0,0,0)
?};
_dt


\an_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Selekcja okna z analizą
::  OLD: \an_select/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
__ENV_AN.TAB.select();
~~


\env_ustaw_dokl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Ustawia dokładność produktu do analizy
::   WE: _a - dokladność
::  OLD: \env_ustaw_dokl/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
__ENV_AN.DOKL:=_a;
~~


\env_edit_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Redagowanie ilości (oraz terminu) dla analizy
::   WE: [_a] - propozycja ilości
::       [_b] - czy redagować ilość (domyślnie 1 - tak)
::       [_c] - czy redagować termin (domyślnie 1 - tak)
::   WY: 0 / 1 - czy zredagowano
::  OLD: \env_edit_il/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _il:=_a || _il:=__ENV_AN.IL ?};
{? var_pres('_b')=type_of(0) || _edit_il:=_b || _edit_il:=1 ?};
{? var_pres('_c')=type_of(0) || _edit_dt:=_c || _edit_dt:=1 ?};

_tab:=tab_tmp(1,
   'IL','REAL','Ilość produktu'@,
   'DATE','DATE','Data'@,
   'TIME','TIME','Godzina'@
);

_tab.fld_fml('IL','DISPLAY_FORMAT',"'out_prec='+$__ENV_AN.DOKL");
_tab.fld_fml('IL','EDIT_FORMAT',"'in_prec='+$__ENV_AN.DOKL");
_red:=_tab.mk_edit(FUN.TYT,0,'enviledit');
{? _edit_il
|| _tab.win_esep(_red,'Dane podstawowe'@);
   _tab.win_efld(_red,,'IL',,,15);
   _tab.efld_opt(_red,'mark=1',,'IL')
?};
{? _edit_dt
|| _tab.win_esep(_red,'Zapotrzebowanie na termin'@);
   _tab.win_efld(_red,,'DATE');
   _tab.efld_opt(_red,'mark=1',,'DATE');
   _tab.win_efld(_red,,'TIME',,,13)
?};
exec('ok_esc','#window',_tab,_red);
_tab.win_edit(_red);
_tab.IL:=_il;
_tab.DATE:=__ENV_AN.DATE;
_tab.TIME:=__ENV_AN.TIME;
:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'Należy podać termin w przyszłości.'@;
{? _edit_il & ~_edit_dt
|| _valid:="
      _tab:=cur_tab(1,1);
      _chk:=__CHK.record(cur_tab(1,1),,'IL');
      _chk
   "
|? _edit_dt & ~_edit_il
|| _valid:="
      _tab:=cur_tab(1,1);
      _chk:=__CHK.record(cur_tab(1,1),,'DATE');
      {? _chk=''
      || _tm:=exec('create','#tm_stamp',_tab.DATE,_tab.TIME);
         {? _tm<SYSLOG.tm_stamp()
         || FUN.info('Należy podać termin w przyszłości.'@);
            _chk:='DATE'
         ?}
      ?};
      _chk
   "
|| _valid:="
      _tab:=cur_tab(1,1);
      _chk:=__CHK.record(cur_tab(1,1),,'IL','DATE');
      {? _chk=''
      || _tm:=exec('create','#tm_stamp',_tab.DATE,_tab.TIME);
         {? _tm<SYSLOG.tm_stamp()
         || FUN.info('Należy podać termin w przyszłości.'@);
            _chk:='DATE'
         ?}
      ?};
      _chk
   "
?};
_res:=_tab.edit(_valid);
{? _res
|| {? _edit_il
   || __ENV_AN.IL:=_tab.IL
   ?};
   {? _edit_dt
   || __ENV_AN.DATE:=_tab.DATE;
      __ENV_AN.TIME:=_tab.TIME
   ?}
?};
_res


\env_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zwraca ilość do analizy
::  OLD: \env_il/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
__ENV_AN.IL


\env_ustaw_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Ustawia ilość do analizy
::   WE: _a - propozycja ilości
::  OLD: \env_ustaw_il/pd_ap.fml
::----------------------------------------------------------------------------------------------------------------------
__ENV_AN.IL:=_a;
~~


\pd_buf_bwys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: podglad pozycji bufora planu dostaw
::  OLD: \pd_buf_bwys/pd_buf.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__Logupr')=-1 || exec('upr_set','ceny') ?};
PD_BUF_D.cntx_psh();
PD_BUF_D.index('KOD'); PD_BUF_D.prefix(PD_BUF.KOD,);
{? PD_BUF_D.first()
||
   PD_Z.PAR:='D';
   ($PD_BUF_D.FORMULA().FORMULA)()
?};
PD_BUF_D.cntx_pop()


\pd_buf_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: podczytuje maskę dla DK_C
::----------------------------------------------------------------------------------------------------------------------
_msk:=ref_name(PD_BUF.DK_C);
{? _msk<>'' & _msk<>DK_C.name() || DK_C.use(_msk) ?};
~~


\pd_k_bdod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed dołącz tabeli PD_K
::  OLD: \pd_k_bdod/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
TYPYZAM.win_dict('SEL');
{? exec('tte_lic','tte')='T'
|| PD_K.win_edit('RED_PROD')
|| PD_K.win_edit('RED')
?};
PD_K.blank();
PD_K.PD_N:=PD_N.ref();
PD_K.PD_P:=PD_P.ref();
PD_K.TYPYZAM:=BEER.TYPYZAM;
PD_K.M:=PD_P.M;
PD_K.JM:=PD_P.M().J;
PD_K.ID:=PD_K.tm_stamp();
{? PD_K.TYPYZAM().R='D' || PD_K.KH:=exec('dost','ceny_mat',PD_P.M,date,PD_K.WAL,0).KH ?};
{? TYPYZAM.R='D'
|| exec('ustapdkprz','jm',PD_K.M,PD_K.JM)
|| exec('ustazprz','zamsiw_poz',PD_K.M,PD_K.JM)
?};
{? PD_K.T2='N' | PD_K.WS2=0 | PD_K.J2=null()
|| PD_K.IL2:=PD_K.IL;
   PD_K.WS2:=1;
   PD_K.J2:=PD_K.M().J
?};
ATR.MJS:='PD_K';
ATR.M_ATR:=PD_K.M().M_ATR;
ATR.UZUP:=exec('wz_uzup','mat_atr',ATR.M_ATR);
ATR.FLAG:=0;
ATR.FLAG_ED:=0;
{? PD_K.DK_C<>null() & PD_K.DK_C().M_ATR<>null()
|| {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('PD_K.DK_C().WAR'+form(_i,-2,,'99')))() !}
|| {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
?};
{? PD_Z.RODZ='' || PD_Z.RODZ:='D' ?};
exec('pd_z_rodz','plan_dostaw');
{? PD_K.edit("exec('pd_k_chk','plan_dostaw')")
||
   exec('ustapdkprz','jm',PD_K.M,PD_K.M().J);
   PD_K.ILP:=PD_K.IL;
   PD_K.cntx_psh();
   PD_K.prefix();
   {? PD_K.add()
   ||
      PD_P.get();
      PD_P.ILKOSZYK:=exec('ilwkoszyku','plan_dostaw',PD_N.ref(),PD_P.ref());
      PD_P.put();
      {? 'ZL'*PD_Z.ZAKRES
      || FUN.info('Wprowadzona pozycja nie jest dostępna w ustawionym zakresie koszyka. W celu sprawdzenia, należy zmienić widok koszyka.'@)
      ?}
   ?};
   PD_K.cntx_pop()
?};
TYPYZAM.f_clear();
MG.f_clear();
~~


\pd_k_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: kontrola wypełnienia pól tabeli PD_K
::  OLD: \pd_k_chk/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:=__CHK.record(PD_K,,'DD','DZ'); {? _fld<>'' || return(_fld) ?};
{? PD_K.DZ>PD_K.DD
|| FUN.info('Planowana data dostawy nie może być wcześniejsza od daty zamówienia.'@);
   return('DD')
?};
_fld:=__CHK.record(PD_K,,'TYPYZAM');
{? _fld<>'' || return(_fld) ?};
{? PD_K.TYPYZAM().R='D' & PD_K.ZTP=null || _fld:=__CHK.record(PD_K,,'KH'); {? _fld<>'' || return(_fld) ?} ?};
_fld:=__CHK.record(PD_K,,'MG'); {? _fld<>'' || return(_fld) ?};
{? PD_K.TYPYZAM().R='W' || _fld:=__CHK.record(PD_K,,'Z_MG'); {? _fld<>'' || return(_fld) ?} ?};
{? PD_K.IL<=0
|| FUN.info('Ilość musi być większa od zera.'@); return('IL')
|? ATR.FLAG_ED & ATR.FLAG<>1
|| exec('akcepatr','mat_atr',0,1)
?};
''


\pd_z_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Po wyborze rodzaju zamówienia
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_win_red:= {? exec('tte_lic','tte')='T'
           || 'RED_PROD'
           || 'RED'
           ?};
exec('pd_k_set_efld_opt','plan_dostaw',_win_red);

{? PD_K.TYPYZAM().R<>PD_Z.RODZ
|| PD_K.KH:=null();
   PD_K.MG:=null();
   PD_K.Z_MG:=null();
   PD_K.TYPYZAM:=null()
?};
{? PD_Z.RODZ='D'
|| {? PD_K.IL=0 | PD_K.TYPYZAM=null() || PD_K.JMZ:=exec('bl_jmz','lzk') ?}
|| PD_K.JMZ:=0
?};
1


\pd_k_wer3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: tworzy okno wertowania tabeli PD_K - pozycje zaplanowane
::   WY: akronim okna
::  OLD: \pd_k_wer3/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_wer:=PD_K.mk_sel('Pozycje zaplanowane'@,'P',,'nadnasdfjasdkfj',,,,,'U');
PD_K.win_fld(_wer,,'MG','SYM',,8,,,'Magazyn'@);
PD_K.win_fld(_wer,,'M','KTM',,10,,,'Indeks'@);
PD_K.win_fld(_wer,,'M','N',,20,,,'Nazwa'@);
PD_K.win_fld(_wer,,'ILP',,,10,,,'Ilość'@);
PD_K.win_fld(_wer,,'JM','KOD',,3,,,'jm'@);
PD_K.win_fld(_wer,,'PD_N','SYM',,20,,,'Plan'@);
_fb:="exec('pd_k_bdoniezap','plan_dostaw')";
PD_K.win_act(_wer,0,'Formuła','&Do niezaplanowanych'@@,,,_fb,,,1,_fb,,'D');
_fb:="exec('plz_bdndpdk','zamowienia',1)";
PD_K.win_act(_wer,0,'Formuła','Do &zamówienia'@@,,,_fb,,,1,_fb,,'Z');
_fb:="exec('pd_k_bwys','plan_dostaw')";
PD_K.win_act(_wer,0,'Wyświetl',,,,_fb);
PD_K.fld_attr('RDKC',2);
PD_K.fld_attr('ZAM_REF',2);
PD_K.fld_attr('ZAM_POZ',2);
PD_K.fld_attr('SES_ID',2);
_wer


\pd_k_wer4
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: tworzy okno wertowania tabeli PD_K - pozycje niezaplanowane
::   WY: akronim okna
::  OLD: \pd_k_wer4/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_wer:=PD_K.mk_sel('Pozycje niezaplanowane'@,'P',,'sdfdhfjehfuefhe',,,,,'U');
PD_K.win_fld(_wer,,'DD',,,-14,,,'Data dostawy'@);
PD_K.win_fld(_wer,,'DZ',,,-14,,,'Data zamówienia'@);
PD_K.win_fld(_wer,,'MG','SYM',,10,,,'Magazyn'@);
PD_K.win_fld(_wer,,'Z_MG','SYM',,10,,,'Z magazynu'@);
PD_K.win_fld(_wer,,'M','KTM',,30,,,'Indeks'@);
PD_K.win_fld(_wer,,'M','N',,30,,,'Nazwa'@);
PD_K.win_fld(_wer,,'IL',,,15,3,,'Ilość'@);
PD_K.win_fld(_wer,,'JM','KOD',,3,,,'jm'@);
PD_K.win_fld(_wer,,'PD_N','SYM',,20,,,'Plan'@);
_fb:="exec('pd_k_bzaplanuj','plan_dostaw')";
PD_K.win_act(_wer,0,'Formuła','&Zaplanuj'@@,,,_fb,,1,1,_fb,,'Z');
_fb:="exec('pd_k_bwys','plan_dostaw')";
PD_K.win_act(_wer,0,'Wyświetl',,,,_fb);
PD_K.fld_attr('RDKC',2);
PD_K.fld_attr('ZAM_REF',2);
PD_K.fld_attr('ZAM_POZ',2);
PD_K.fld_attr('SES_ID',2);
_wer


\pd_k_bdoniezap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przeniesienie pozycji koszyka do niezaplanowanych
::  OLD: \pd_k_bdoniezap/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_Sel:=PD_K.sel_aget();
{? ~_Sel.first() || PD_K.get(); _Sel.REF:=#PD_K.ref(); _Sel.CRC:=PD_K.crc(); _Sel.add() ?};

{? {? _Sel.first() & _Sel.next()
   || FUN.ask('Przenieść pozycje do niezaplanowanych?'@)
   || FUN.ask('Przenieść pozycję do niezaplanowanych?'@)
   ?}
||
   _loop:=_Sel.first();
   {!
   |? _loop
   |!
      {? PD_K.seek(_Sel.REF,)
      ||
         PD_K.cntx_psh();
         PD_K.prefix();
         PD_K.ZAM_REF:='';
         PD_K.ZAM_SYM:='';
         PD_K.put();
         PD_K.cntx_pop()
      ?};
      _loop:=_Sel.next()
   !};
   PD_K.sel_adel();
   grp_disp(PD_K,__pdkwe4)
?};
0


\pd_k_bwys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed wyswietl tabeli PD_K
::  OLD: \pd_k_bwys/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
exec('var_set','plan_dostaw',PD_K.TYPYZAM().R);

PD_K.cntx_psh();
_atrmjs:=ATR.MJS;
ATR.MJS:='PD_K';
{? PD_K.DK_C<>null() | PD_K.RDKC<>''
|| ATR.M_ATR:=PD_K.DK_C().M_ATR;
   exec('czytadkc','mat_atr',PD_K.DK_C,PD_K.RDKC)
|| M_ATR.blank(0);
   ATR.MJS:='M_ATR'
?};
PD_K.display();
ATR.MJS:=_atrmjs;
PD_K.cntx_pop()


\pd_k_bzaplanuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przeniesienie niezaplanowanych pozycji koszyka do planowanych zamowien
::  OLD: \pd_k_bzaplanuj/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_Sel:=PD_K.sel_aget();
{? ~_Sel.first() || PD_K.get(); _Sel.REF:=#PD_K.ref(); _Sel.CRC:=PD_K.crc(); _Sel.add() ?};

{? {? _Sel.first() & _Sel.next()
   || FUN.ask('Zaplanować pozycje?'@)
   || FUN.ask('Zaplanować pozycję?'@)
   ?}
||
   _loop:=_Sel.first();
   {!
   |? _loop
   |!
      {? PD_K.seek(_Sel.REF,)
      || exec('plz_fill','zamowienia')
      ?};
      _loop:=_Sel.next()
   !};
   PD_K.sel_adel();
   grp_disp(__Plz,__plzw);
   grp_disp(PD_K,__pdkwe3)
?};

0


\zam_bidzdozd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: idz do zamowienia z planowanego zamowienia
::  OLD: \zam_bidzdozd/pd_zam.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=PD_K_ZAM.RSQL;
exec('idz2zam','zamowienia',_ref)


\icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: uruchamia formuly definicji ikon
::  OLD: \icon/pd_d.fml
::----------------------------------------------------------------------------------------------------------------------
_params:=obj_new('PAR','DEF');
_params.PAR:='I';
_params.DEF:=1;

PD_D.cntx_psh();
PD_D.index('KOD');
PD_D.prefix();
_loop:=PD_D.first();
{!
|? _loop
|!
   {? PD_D.A='T' || ($PD_D.FORMULA().FORMULA)(_params) ?};
   _loop:=PD_D.next()
!};
PD_D.cntx_pop()


\sumuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.02]
:: OPIS: Sumowanie szczegółów pozycji planu dostaw
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_Tab:=cur_tab(1,1);
_Sel:=_Tab.sel_aget();

_Suma:=tab_tmp(2
   ,'SUMA'  ,'STRING[1]'   ,'Suma [T/N]'
   ,'TYP'   ,'STRING[50]'  ,'Typ'
   ,'IL'    ,'REAL'        ,'Ilość');
_suma:=0;

_Tab.cntx_psh();
{? ~_Sel.first()
||
   _loop:=_Tab.first();
   {!
   |? _loop
   |!
      _Sel.REF:=#_Tab.ref();
      _Sel.add();
      _loop:=_Tab.next()
   !}
?};
_loop:=_Sel.first();
{!
|? _loop
|!
   {? _Tab.seek(_Sel.REF,)
   ||
      {? _Suma.find_key('N',_Tab.TYP)
      ||
         _il:={? _Tab.PRZY_ROZ='P' || _Tab.ILP || -_Tab.ILR ?};
         _Suma.IL+=_il;
         _suma+=_il;
         _Suma.put()
      ||
         _Suma.SUMA:='N';
         _Suma.TYP:=_Tab.TYP;
         _il:={? _Tab.PRZY_ROZ='P' || _Tab.ILP || -_Tab.ILR ?};
         _Suma.IL:=_il;
         _suma+=_il;
         _Suma.add()
      ?}
   ?};
   _loop:=_Sel.next()
!};
_Tab.cntx_pop();

_Suma.SUMA:='T';
_Suma.TYP:='Suma:';
_Suma.IL:=_suma;
_Suma.add();

_wer:=_Suma.mk_sel('Suma'@,,,'pd_szcz_suma',,,,,'U');
_Suma.win_fld(_wer,,'TYP',,,50,,,'Typ'@);
_Suma.win_fld(_wer,,'IL',,,15,M.DOKL,,'Ilość'@);
_Suma.win_sel(_wer);
_Suma.select();
0


\pd_k_set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.02]
:: OPIS: Zaznacza wymagalne pola i włącza\wyłącza pola koszyka planu dostaw
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_win_red:={? var_pres('_a')=type_of('') || _a || PD_K.win_edit('?') ?};

{? PD_Z.RODZ='D'
|| PD_K.efld_opt(_win_red,'enable=1',,'KH','KOD');
   PD_K.efld_opt(_win_red,'enable=1',,'KH','NAZ');
   PD_K.efld_opt(_win_red,'mark=1',,'KH','KOD');
   PD_K.efld_opt(_win_red,'mark=1',,'MG','SYM');
   PD_K.efld_opt(_win_red,'mark=0',,'Z_MG','SYM');
   PD_K.efld_opt(_win_red,'enable=0',,'Z_MG','SYM');
   _enab:='enable=1';
   _mark:='mark=1'
|| PD_K.efld_opt(_win_red,'mark=0',,'KH','KOD');
   PD_K.efld_opt(_win_red,'enable=0',,'KH','KOD');
   PD_K.efld_opt(_win_red,'enable=0',,'KH','NAZ');
   PD_K.efld_opt(_win_red,'mark=1',,'MG','SYM');
   PD_K.efld_opt(_win_red,'enable=1',,'Z_MG','SYM');
   PD_K.efld_opt(_win_red,'mark=1',,'Z_MG','SYM');
   _enab:='enable=0';
   _mark:='mark=0'
?};

{? PD_K.MG().IL='T' & (_enab+1)='1'
|| _enab:='enable=0';
   PD_K.CENA:=0;
   PD_K.CWAL:=0;
   PD_K.WAR:=0;
   PD_K.WARW:=0;
   PD_K.WAL:=INFO.NAROD;
   PD_K.WALK:=INFO.NAROD;
   PD_K.KRS:=0
?};
PD_K.efld_opt(_win_red,_enab,,'WAL');
PD_K.efld_opt(_win_red,_mark,,'WAL');
PD_K.efld_opt(_win_red,_enab,,'WALK');
PD_K.efld_opt(_win_red,_mark,,'WALK');
PD_K.efld_opt(_win_red,_enab,,'KRS');
PD_K.efld_opt(_win_red,_enab,,'CWAL');
PD_K.efld_opt(_win_red,_enab,,'CENA');
PD_K.efld_opt(_win_red,_enab,,'WAR');
PD_K.efld_opt(_win_red,_enab,,'WARW');
PD_K.efld_opt(_win_red,_enab,INFO,'NAROD')


\env_date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Zwraca datę analizy
::----------------------------------------------------------------------------------------------------------------------
__ENV_AN.DATE


\env_time
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Zwraca godzinę analizy
::----------------------------------------------------------------------------------------------------------------------
__ENV_AN.TIME


\tab2_insert
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Dołącza dodatkowe zapisy do tabeli
::   WE: _a - argumenty - wynik formuły exec('pda_a','plan_dostaw')
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;
_insert:=_args.INSERT;

_Tab2:=exec('pda_tab2_wsk','plan_dostaw','TAB');

{? _insert.first()
|| {!
   |? _Tab2.blank();
      _Tab2.D:=_insert.D;
      _Tab2.T:=_insert.T;
::    Dołączane zapisy są z założenia rozchodowe, więc opieramy się na znaku przekazanej wertości
::    (ujemne to odpady, czyli przychód)
      _Tab2.PRZY_ROZ:={? _insert.IL>0 || 'R' || 'P' ?};
      _Tab2.REF:=_insert.REF;
      _Tab2.TYP:='Bieżąca analiza';
      _Tab2.O:=exec('record','#to_string',_Tab2.REF,1);
      _Tab2.ILP:={? _insert.IL<0 || -_insert.IL || 0 ?};
      _Tab2.ILR:={? _insert.IL>=0 || _insert.IL || 0 ?};
      _Tab2.add();
      _insert.next()
   !}
?};
~~


\env_used_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Dodaje rekord do tabeli USED
::   WE: _a - M.ref()
::       _b - data
::       _c - czas
::       _d - ilość
::----------------------------------------------------------------------------------------------------------------------
_tab:=__ENV_AN.USED;

_tab.M:=$_a;
_tab.D:=_b;
_tab.T:=_c;
_tab.IL:=_d;
_tab.add()


\env_used_sum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Zwraca sumę zapisów w tabeli USED dla wskazanego materiału
::   WE: _a - M.ref()
::----------------------------------------------------------------------------------------------------------------------
_tab:=__ENV_AN.USED;
_sum:=0;

_tab.cntx_psh();
_tab.prefix($_a);
{? _tab.first()
|| {!
   |? _sum+=_tab.IL;
      _tab.next()
   !}
?};
_tab.cntx_pop();

_sum


\env_used2insert
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Przepisuje zapisy z tabeli USED do argumentu wywołania exec('an_add','plan_dostaw')
::   WE: _a - argument - wynik exec('an_add_a','plan_dostaw')
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;
_tab:=__ENV_AN.USED;

_tab.cntx_psh();
_tab.prefix();
{? _tab.first()
|| {!
   |? _args.insert_add(_tab.M,_tab.D,_tab.T,_tab.IL);
      _tab.next()
   !}
?};
_tab.cntx_pop();
~~


\del_lnk_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Usuniecie powiazania miedzy zleceniem a pozycjami koszyka planu dostaw
::   WE: _a -ZL.ref
::----------------------------------------------------------------------------------------------------------------------
_zl:={? var_press('_a')=type_of(null) || _a || return() ?};

ZLZAM.cntx_psh();
ZLZAM.index('ZLPD');
ZLZAM.prefix(_zl,'D','pdkosz');
{? ZLZAM.first()
|| {!
   |?
      PD_K.cntx_psh();
      PD_K.prefix();
      {? PD_K.seek(ZLZAM.ZAMPOZ)
      || PD_K.ILP+=ZLZAM.ILZL;
         PD_K.CZY_ZL:={? exec('pd_k_ilzl','plan_dostaw',$PD_K.ref,$_zl)=0 || 'N' || 'C' ?};
         {? PD_K.put()
         || PD_P.cntx_psh();
            PD_P.prefix();
            {? PD_P.seek(PD_K.PD_P)
            || PD_P.ILKOSZYK:=exec('ilwkoszyku','plan_dostaw',PD_K.PD_N,PD_K.PD_P);
               PD_P.put()
            ?};
            PD_P.cntx_pop()
         ?}
      ?};
      PD_K.cntx_pop();
      ZLZAM.next()
   !}
?};
ZLZAM.cntx_pop();
~~


\zl_bidzdozd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: idz do zlecenia z planu dostaw
::----------------------------------------------------------------------------------------------------------------------
_ref:=PD_K_ZL.RSQL;
ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_ref)
|| exec('zl_popraw','zl_head',ZL.ref,1)
?};
ZL.cntx_pop();
~~


\pd_k_ilzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Wylicza zleconą ilość dla pozycji koszyka planu dostaw
::   WE: _a - STRING - ref do PD_K
::       [_b] - STRING - ref zlecenia, który będzie pomijany przy liczeniu
::   WY: NUMBER - łączna ilość zlecona
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_press('_a')=type_of('str') || _a || '' ?};
_zl:={? var_press('_b')=type_of('str') || _b || '' ?};
_il:=0;
{? _ref<>''
|| ZLZAM.cntx_psh();
   ZLZAM.index('ZMZL');
   ZLZAM.prefix(_ref,);
   {? ZLZAM.first()
   || {!
      |? {? $ZLZAM.ZL<>_zl
         || _il+=ZLZAM.ILZL
         ?};
         ZLZAM.next()
      !}
   ?};
   ZLZAM.cntx_pop()
?};
_il


\ildni
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Ilość dni na realizację zamówienia wg MDOST i MDOSTPOW
::   WE: _a - MDOST.ref()
::       _b - zamawiana ilość
::   WY: -1 - brak definicji ilości dni
::       >=0 - ilość dni
::----------------------------------------------------------------------------------------------------------------------
_mdost:=_a;
_il:=_b;
_wyn:=-1;
{? MDOST.ILDNI || _wyn:=MDOST.ILDNI ?};
:: domyślny dostawca - ilość dni na zamówienie wg ilości zamawianej
{? _il
||
   MDOSTPOW.cntx_psh();
   MDOSTPOW.index('MDOST');
   MDOSTPOW.prefix(_mdost);
   _loop:=MDOSTPOW.first();
   {!
   |? _loop
   |!
      {? MDOSTPOW.IL<=_il || _wyn:=MDOSTPOW.ILDNI ?};
      _loop:=MDOSTPOW.next()
   !};
   MDOSTPOW.cntx_pop()
?};
_wyn


\pd_d_zn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: PD_D_ZN.ref()
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PD_D_ZN.ref()


\pd_d_zn_far
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: zestawy formuł planu dostaw - odśwież
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PD_D_ZU.index('UNIK');
{? {? PD_D_ZN.f_active() || PD_D_ZN.f_get() || PD_D_ZN.get() ?}
||
   PD_D_ZU.prefix(PD_D_ZN.ref());
   PD_D_ZU.actions_grayed('WER','')
||
   PD_D_ZU.prefix(null());
   PD_D_ZU.actions_grayed('WER','D:D')
?};
grp_disp(PD_D_ZU,'WER')


\pd_d_zn_pozycje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: zestawy formuł planu dostaw - pozycje
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wer:=PD_D_ZP.mk_sel('Formuły'@,,,'pd_d_zp',,,,,'U');
PD_D_ZP.win_fld(_wer,,'PD_D','SORT',,10,,,'Kolejność'@);
PD_D_ZP.win_fld(_wer,,'PD_D','KOD',,10,,,'Kod'@);
PD_D_ZP.win_fld(_wer,PD_D,'FORMULA','SKROT',,8,,,'Formuła'@);
PD_D_ZP.win_fld(_wer,PD_D,'FORMULA','NAZWA',,50,,,'Nazwa'@);
_fb:="
   PD_D.FORMULA:=null();
   PD_D_ZP.PD_D()
";
PD_D_ZP.win_act(_wer,,'Rekord',,,,_fb);
_fb:="
   exec('pd_d_zp_dolacz','plan_dostaw')
";
PD_D_ZP.win_act(_wer,1,'Formuła','Dołącz'@,,,_fb,,1);
PD_D_ZP.win_act(_wer,,'Formuła','Dołącz'@,,,_fb,,1);
PD_D_ZP.win_act(_wer,,'Usuń',,,,,,,1);

_grp:=PD_D_ZP.grp_make('Pozycje zestawu formuł'@,,'pd_d_zp_grp');
_fb:="
   PD_Z.TYP:='S';
   PD_D_ZP.index('PD_D_ZN');
   PD_D_ZP.prefix(PD_D_ZN.ref(),PD_Z.TYP)
";
PD_D_ZP.grp_sel(_grp,,_wer,'Analizy stanu magazynowego'@,,,,,_fb);
_fb:="
   PD_Z.TYP:='C';
   PD_D_ZP.index('PD_D_ZN');
   PD_D_ZP.prefix(PD_D_ZN.ref(),PD_Z.TYP)
";
PD_D_ZP.grp_sel(_grp,,_wer,'Analizy cech stanu'@,,,,,_fb);
_fb:="
   PD_Z.TYP:='U';
   PD_D_ZP.index('PD_D_ZN');
   PD_D_ZP.prefix(PD_D_ZN.ref(),PD_Z.TYP)
";
PD_D_ZP.grp_sel(_grp,,_wer,'Uzupełnienia stanu'@,,,,,_fb);

PD_D_ZP.index('PD_D_ZN');
PD_D_ZP.prefix(PD_D_ZN.ref());
PD_D_ZP.win_sel(_grp);
PD_D_ZP.select()


\pd_d_zp_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: zestawy formuł planu dostaw - pozycje - dołącz
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_Tab:=exec('pd_d_sel','plan_dostaw');
PD_D_ZP.cntx_psh();
PD_D_ZP.index('PD_D_ZN');
_loop:=_Tab.first();
{!
|? _loop
|!
   PD_D_ZP.prefix(PD_D_ZN.ref(),PD_Z.TYP,_Tab.SORT,_Tab.KOD,);
   {? PD_D_ZP.first()
   ||
      {? _Tab.MARK='N' || PD_D_ZP.del() ?}

   |? _Tab.MARK='T'
   ||
      PD_D_ZP.PD_D_ZN:=PD_D_ZN.ref();
      PD_D_ZP.PD_D:=exec('FindAndGet','#table',PD_D,_Tab.REF,,,null());
      {? PD_D_ZP.PD_D || PD_D_ZP.add() ?}
   ?};
   _loop:=_Tab.next()
!};
PD_D_ZP.cntx_pop()


\pd_d_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Wybór formuł planu dostaw
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_Tab:=tab_tmp(2
   ,'SORT','STRING[10]','Kolejność'@
   ,'KOD','STRING[10]','Kod'@
   ,'SKROT','STRING[8]','Skrót'@
   ,'NAZWA','STRING[127]','Nazwa'@
   ,'MARK','STRING[1]','Wybrano'@
   ,'REF','STRING[16]','Ref SQL'@);
_typ:=PD_Z.TYP;
_typ_txt:=
   {? _typ='S' || 'analizy stanu magazynowego'@
   |? _typ='C' || 'analizy cech stanu'@
   |? _typ='U' || 'uzupełnienia stanu'@
   ?};
PD_D_ZP.cntx_psh();
PD_D_ZP.index('PD_D_ZN');
PD_D.cntx_psh();
PD_D.index('TYP');
PD_D.prefix(_typ,'T');
_loop:=PD_D.first();
{!
|? _loop
|!
   _Tab.SORT:=PD_D.SORT;
   _Tab.KOD:=PD_D.KOD;
   _Tab.SKROT:=PD_D.FORMULA().SKROT;
   _Tab.NAZWA:=PD_D.FORMULA().NAZWA;
   PD_D_ZP.prefix(PD_D_ZN.ref(),PD_Z.TYP,_Tab.SORT,_Tab.KOD,);
   _Tab.MARK:={? PD_D_ZP.first() || 'T' || 'N' ?};
   _Tab.REF:=$PD_D.ref();
   _loop:=_Tab.add() & PD_D.next()
!};
PD_D.cntx_pop();
PD_D_ZP.cntx_pop();
{? ~_Tab.first()
||
   FUN.info('Brak formuł.'@)
||
   _tit:='Formuły %1'@[_typ_txt];
   _wer:=_Tab.mk_sel(_tit,,,'pd_p_slo_'+(-PD_Z.TYP),,,,,'U');
   _Tab.win_fld(_wer,,'MARK',,,10,,,'Wybrano'@,,,2,,"'T'","'N'");
   _Tab.win_fld(_wer,,'SORT',,,10,,,'Kolejność'@);
   _Tab.win_fld(_wer,,'KOD',,,10,,,'Kod'@);
   _Tab.win_fld(_wer,,'SKROT',,,8,,,'Formuła'@);
   _Tab.win_fld(_wer,,'NAZWA',,,50,,,'Nazwa'@);
   _fb:="
      _Tab:=cur_tab();
      _Tab.MARK:='T';
      _Tab.put()
   ";
   _Tab.win_act(_wer,,'Formuła','Wybierz'@@,,,_fb,,,1);
   _Tab.win_btn(_wer,'text=%1, panel=right'['Wybierz'@@],'menu:W');
   _fb:="
      _Tab:=cur_tab();
      _Tab.MARK:='N';
      _Tab.put()
   ";
   _Tab.win_act(_wer,,'Formuła','Odbierz'@@,,,_fb,,,1);
   _Tab.win_btn(_wer,'text=%1, panel=right'['Odbierz'@@],'menu:O');

   _fb:="
      {? FUN.ask('Czy zatwierdzić wybór?'@)
      ||
         sel_exit()
      ?}
   ";
   _Tab.win_act(_wer,,'Formuła','Akceptuj'@@,,,_fb);

   _Tab.win_btn(_wer,'text=%1, panel=bottom'['&Akceptuj'@],'menu:A');
   _Tab.win_btn(_wer,'text=%1, panel=bottom'['A&nuluj'@@],'key:Esc');
   _Tab.win_sel(_wer);
   {? ~_Tab.select()
   ||
      _Tab.erase()
   ?}
?};
_Tab


\pd_mg_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Wybór magazynów planu dostaw
::   WE: _a - T/N - magazyny do przesunięć
::       [_b] - tabela PD_MG lub PD_MG_ZN
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mm:=_a;
_Mg_tab:=_b;

_wyn:=obj_new('TAB','NDX1','NDX2','EXIT');
_wyn.EXIT:=1;
_wyn.TAB:=tab_tmp(2
   ,'ODDZ','STRING[1]','Oddział'@
   ,'SYM','STRING[8]','Symbol'@
   ,'NAZ','STRING[60]','Nazwa'@
   ,'MARK','STRING[1]','Wybrano'@
   ,'REF','STRING[16]','Ref SQL'@);
_Tab:=_wyn.TAB;
_wyn.NDX1:=_Tab.index('?');
_wyn.NDX2:=_Tab.ndx_tmp(,,'REF',,);
{? _mm='N'
||
:: PD_K.Z_MG:=null() bo analiza ogólna nie dla koszyka
   PD_K.Z_MG:=null();
   params_exec('pd_k_mg_be','plan_dostaw',0,_Mg_tab)
||
:: PD_K.MG:=null() bo analiza ogólna nie dla koszyka
   PD_K.MG:=null();
   params_exec('pd_k_zmg_be','plan_dostaw','W',_Mg_tab)
?};
_loop:=MG.f_first();
{!
|? _loop
|!
   _Tab.ODDZ:=MG.ODDZ;
   _Tab.SYM:=MG.SYM;
   _Tab.NAZ:=MG.NAZ;
   {? PD_MG=_Mg_tab
   ||
      PD_MG.cntx_psh();
      PD_MG.index('UNIK');
      PD_MG.prefix(_mm,PD_N.ref(),null(),MG.ref());
      _Tab.MARK:={? PD_MG.first() || 'T' || 'N' ?};
      PD_MG.cntx_pop()
   ||
      PD_MG_ZP.cntx_psh();
      PD_MG_ZP.index('UNIK');
      PD_MG_ZP.prefix(_mm,PD_MG_ZN.ref(),MG.ref());
      _Tab.MARK:={? PD_MG_ZP.first() || 'T' || 'N' ?};
      PD_MG_ZP.cntx_pop()
   ?};
   _Tab.REF:=$MG.ref();
   _loop:=_Tab.add() & MG.f_next()
!};
MG.f_clear();
{? ~_Tab.first()
||
   FUN.info('Brak uprawnionych magazynów.'@)
||
   _tit:='Magazyny'@;
   _wer:=_Tab.mk_sel(_tit,,,'pd_p_slo_'+(-PD_Z.TYP),,,,,'U');
   _Tab.win_fld(_wer,,'MARK',,,10,,,'Wybrano'@,,,2,,"'T'","'N'");
   _Tab.win_fld(_wer,,'ODDZ',,,1,,,'Oddział'@);
   _Tab.win_fld(_wer,,'SYM',,,8,,,'Symbol'@);
   _Tab.win_fld(_wer,,'NAZ',,,60,,,'Nazwa'@);
   _fb:="
      _Tab:=cur_tab();
      _Tab.MARK:='T';
      _Tab.put()
   ";
   _Tab.win_act(_wer,,'Formuła','Wybierz'@@,,,_fb,,1,1);
   _Tab.win_btn(_wer,'text=%1, panel=right'['Wybierz'@@],'menu:W');
   _fb:="
      _Tab:=cur_tab();
      _Tab.MARK:='N';
      _Tab.put()
   ";
   _Tab.win_act(_wer,,'Formuła','Odbierz'@@,,,_fb,,,1);
   _Tab.win_btn(_wer,'text=%1, panel=right'['Odbierz'@@],'menu:O');

   _fb:="
      {? FUN.ask('Czy zatwierdzić wybór?'@)
      ||
         sel_exit()
      ?}
   ";
   _Tab.win_act(_wer,,'Formuła','Akceptuj'@@,,,_fb);
   _fb:="
      {? _a
      ||
         _Tab:=cur_tab();
         _win_sel:=cur_win();
         _default:={? _Tab.sel_size()=0 & _Tab.MARK='T' || 'O' || 'W' ?};
         _Tab.actions(_win_sel,,_default,1)
      ?}
   ";
   _Tab.win_act(_wer,,'Rekord',,,,_fb);

   _Tab.win_btn(_wer,'text=%1, panel=bottom'['&Akceptuj'@],'menu:A');
   _Tab.win_btn(_wer,'text=%1, panel=bottom'['A&nuluj'@@],'key:Esc');
   _Tab.win_sel(_wer);
   {? _Tab.select()
   ||
      _wyn.EXIT:=0
   ?}
?};
MG.f_clear();
_wyn


\pda_stany_wsk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: wskazanie na __pda.STANY
::----------------------------------------------------------------------------------------------------------------------
::exec('stany_env','plan_dostaw')
{? _a='ENV' || __pda.STANY
|? _a='TAB' || __pda.STANY.TAB
|? _a='NDX1' || __pda.STANY.NDX1
::exec('pdprod_stany_tab','plan_dostaw_prod')
|? _a='DOSTEPNY' || __pda.STANY.DOSTEPNY
?}


\stany_env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Stany magazynowe:
::       - TAB - na dzień w podziale na magazyny - definicja środowiska
::       - DOSTEPNE - dostępne na dzień
::   WE:
::   WY: _env
::----------------------------------------------------------------------------------------------------------------------
::UWAGA: _fld, i _mth to formułki pomocnicze, żeby wygodniej tworzyć tablice i komentować poszczególne jej elementy
::       powiedzmy, że to bedzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to bedzie metoda
         _mth:="31+form(_a)";

_env:=obj_new(
:: pola
    _fld('TAB','Tabela stanów')
   ,_fld('NDX1','Indeks tabeli stanów')
   ,_fld('DOSTEPNY','Obiekt dostępnych stanów')
:: METODY
   ,_mth('pobierz_stan','Zwraca stan maganynu')
   ,_mth('aktualizuj_stan','Aktualizuje stan magazynu')
   ,_mth('stan_dostepny','Zwraca informację czy jest stan dostępny')
   ,_mth('aktualizuj_stan_dostepny','Aktualizuje stan dostępny')
);
_env.TAB:=exec('stany_tab','plan_dostaw');
:: _env.NDX - kolejnosc: MG, DK_C, D
_env.NDX1:=_env.TAB.index('?');
_env.pobierz_stan:="
   .TAB.cntx_psh();
   .TAB.index(.NDX1);
   .TAB.prefix(_a,_b,);
   _wyn:=
      {? _a=''
      || 0
      |? .TAB.find_le(_c)
      || _wyn:=.TAB.STAN
      || 0
      ?};
   .TAB.cntx_pop();
   _wyn
";
_env.aktualizuj_stan:="
   .TAB.cntx_psh();
   .TAB.index(.NDX1);
   .TAB.prefix(_a,_b,);
   _wyn:=
      {? _a=''
      || 0
      |? .TAB.find_le(_c)
      || .TAB.STAN+=_d;
         {? .TAB.D=_c
         || .TAB.put()
         || .TAB.D:=_c;
            .TAB.add()
         ?}
      || .TAB.blank(1);
         .TAB.MG:=_a;
         .TAB.DK_C:=_b;
         .TAB.D:=_c;
         .TAB.STAN:=_d;
         .TAB.add()
      ?};
   {? _wyn
   ||
      _loop:=.TAB.next();
      {!
      |? _loop
      |!
         .TAB.STAN+=_d;
         _loop:=.TAB.put() & .TAB.next()
      !}
   ?};
   .TAB.cntx_pop();
   _wyn
";
_env.DOSTEPNY:=exec('pdprod_stany_tab','plan_dostaw_prod');
_env.stan_dostepny:="
   _result:=obj_new('D','REF');
   _result.D:=date(0,0,0);
   _result.REF:='';
   _dostepny:=.DOSTEPNY;
   _DOSTEPNY:=_dostepny.TAB;
   _DOSTEPNY.cntx_psh();
   _DOSTEPNY.index(_dostepny.NDX_SD);
   _DOSTEPNY.prefix('T','nn',0);
   _ref:=null();
   {? _DOSTEPNY.last() & _DOSTEPNY.STAN>=0
   ||
      {!
      |?
         _result.D:=_DOSTEPNY.D; _result.REF:=_DOSTEPNY.PLAN_MAT; _ref:=_DOSTEPNY.ref();
         _DOSTEPNY.prev() & _DOSTEPNY.STAN>=0
      !}
   ||
      _DOSTEPNY.prefix('T','nn');
      {? _DOSTEPNY.find_ge(0) & _DOSTEPNY.SD>0
      ||
         _DOSTEPNY.index('NDX_STAN');
         _DOSTEPNY.prefix('T','nn',_DOSTEPNY.D,_DOSTEPNY.T);
         {? _DOSTEPNY.last()
         ||
            _result.D:=_DOSTEPNY.D; _result.REF:=_DOSTEPNY.PLAN_MAT; _ref:=_DOSTEPNY.ref()
         ?}
      ?}
   ?};
::   _DOSTEPNY.seek(_ref);
::   _wer:=_DOSTEPNY.mk_sel(,,1);
::   _DOSTEPNY.win_sel(_wer);
::   _DOSTEPNY.select(,1,20);
   _DOSTEPNY.cntx_pop();
   _result
";
_env.aktualizuj_stan_dostepny:="
   _plan_mat:=_a;
   _data:=_b;
   _il:=_c;
   _dostepny:=.DOSTEPNY;
   _DOSTEPNY:=_dostepny.TAB;
   _DOSTEPNY.cntx_psh();
   _DOSTEPNY.index(_dostepny.NDX_TMS);
   _DOSTEPNY.prefix('nn');
   _DOSTEPNY.blank();
   _DOSTEPNY.M:='nn';
   _DOSTEPNY.D:=_data;
   _DOSTEPNY.T:=time(0,0,0);
   _DOSTEPNY.TMS:=tm_stamp();
   _DOSTEPNY.A:='T';
   _stan:=0;
   _DOSTEPNY.cntx_psh();
   _DOSTEPNY.prefix('nn',_data,time(0,0,0));
   {? _DOSTEPNY.last()
   ||
      _stan:=_DOSTEPNY.STAN
   ||
      _DOSTEPNY.prefix('nn');
      {? _DOSTEPNY.find_le(_data,time(0,0,0),'',) || _stan:=_DOSTEPNY.STAN ?}
   ?};
   _DOSTEPNY.cntx_pop();
   _DOSTEPNY.STAN:=_stan+_il;
   _DOSTEPNY.PLAN_MAT:=_plan_mat;
   _DOSTEPNY.IL:=_il;
:: aktualizacja stanu
   {? _DOSTEPNY.add()
   ||
      _DOSTEPNY.prefix('nn');
      _loop:=_DOSTEPNY.next();
      {!
      |? _loop
      |!
         _DOSTEPNY.STAN+=_il;
         _loop:=_DOSTEPNY.put() & _DOSTEPNY.next()
      !}
   ?};
:: aktualizacja stanu dostępnego
   _loop:=_DOSTEPNY.last();
   _sd:={? _DOSTEPNY.STAN>0 || _DOSTEPNY.STAN>0 || 0 ?};
   {!
   |? _loop
   |!
      _stan:=_DOSTEPNY.STAN;
      {? _stan<_sd || _sd:={? _stan<=0 || 0 || _stan ?} ?};
      _DOSTEPNY.SD:=_sd;
      _loop:=_DOSTEPNY.put() & _DOSTEPNY.prev()
   !};
   _DOSTEPNY.cntx_pop()
";
_env


\stany_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: tabela stanów w magazynach do przesunięć
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(3
   ,'MG','STRING[8]','MG.SYM'
   ,'DK_C','STRING[16]','$DK_C'
   ,'D','DATE','Data'
   ,'STAN','REAL','Stan ilościowy')


\stany_oblicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: zapisanie stanów na koniec analizowanego okrsu:
::       - dla magazynów do przesunięć;
::       - dostępnych.
::       Jest to stan dostępny do zadysponowania.
::   WE: _a - argument - wynik formuly exec('pda_a','pda')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;

_Tab2:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_t2ndx1:=exec('pda_tab2_wsk','plan_dostaw','NDX1');
_t2ndx5:=exec('pda_tab2_wsk','plan_dostaw','NDX5');
_Tab2.cntx_psh();
_Tab2.index(_t2ndx1);
_Tab2.prefix();
::
:: wyznaczenie stanu na koniec okresu dla magazynów do przesunięć
::
_Stany:=exec('pda_stany_wsk','plan_dostaw','TAB');
_stany_ndx:=exec('pda_stany_wsk','plan_dostaw','NDX1');
_Stany.cntx_psh();
_Stany.index(_stany_ndx);
_Stany.prefix();
_stan:=0;
_mg:='';
_loop:=_Tab2.first();
{!
|? _loop
|!
:: DRO_TODO_AWI: (plan dostaw): Liczone są tylko stany ogólne bez podziału na cechy.
:: DRO_TODO_AWI: (plan dostaw): Obsługa będzie jak przypadek wystąpi u klienta.
::   _Stany.prefix(_Tab2.MG,_Tab2.DK_C,);
   _Stany.prefix(_Tab2.MG,'',);
   {? _Stany.find_le(_Tab2.D)
   ||
      _Stany.STAN+=_Tab2.ILP-_Tab2.ILR;
      {? _Stany.D=_Tab2.D
      ||
         _Stany.put()
      ||
         _Stany.D:=_Tab2.D;
         _Stany.add()
      ?}
   ||
      _Stany.prefix();
      _Stany.MG:=_Tab2.MG;
::      _Stany.DK_C:=_Tab2.DK_C;
      _Stany.DK_C:='';
      _Stany.D:=_Tab2.D;
      _Stany.STAN:=_Tab2.ILP-_Tab2.ILR;
      _Stany.add()
   ?};
   _loop:=_Tab2.next()
!};
::_Stany.prefix();
::_wer:=_Stany.mk_sel('Stany',,1,,,,,,'U');
::_Stany.win_act(_wer,,'Kolejność');
::_Stany.win_sel(_wer);
::_Stany.select();
_Stany.cntx_pop();
::
:: wyznaczenie stanu dostępnego
::
_dostepny:=exec('pda_stany_wsk','plan_dostaw','DOSTEPNY');
_DOSTEPNY:=_dostepny.TAB;
_DOSTEPNY.prefix();
_Tab2.index(_t2ndx5);
_Tab2.prefix();
_loop:=_Tab2.last();
_sd:={? _Tab2.STAN_D>0 || _Tab2.STAN_D || 0 ?};
{!
|? _loop
|!
   _stan:=_Tab2.STAN_D;
   _DOSTEPNY.blank();
   _DOSTEPNY.M:='nn';
   _DOSTEPNY.D:=_Tab2.D;
   _DOSTEPNY.T:=_Tab2.T;
   _DOSTEPNY.TMS:=tm_stamp();
   _DOSTEPNY.A:='T';
   _DOSTEPNY.STAN:=_stan;
   {? _stan<_sd || _sd:={? _stan<=0 || 0 || _stan ?} ?};
   _DOSTEPNY.SD:=_sd;
   _DOSTEPNY.PLAN_MAT:=_Tab2.REF;
   _DOSTEPNY.IL:=0;
   _loop:=_DOSTEPNY.add() & _Tab2.prev()
!};
_Tab2.cntx_pop()


\pd_buf_zastosuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Czy stosować PD_BUF w analizie?
::   WE: _a - MG.ref()
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_mg:={? var_pres('_a')=type_of(null()) || _a || PD_BUF.MG ?};
_wyn:=1;
:: Magazyny
PD_MG.cntx_psh();
PD_MG.index('UNIK');
PD_MG.prefix('N',PD_N.ref(),null());
_mg_wym:=PD_MG.first();
{? _mg_wym
||
   {? _mg=null() || _wyn:=0
   |? ~PD_MG.find_key(_mg) || _wyn:=0
   ?}
?};
PD_MG.cntx_pop();
_wyn


\pd_k_mg_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed redakcją PD_K.MG
::   WE: [_a] - 0/1 - uwzględniać magazyny planu dostaw
::       [_b] - tabela PD_MG lub PD_MG_ZN
::  OLD: \pd_k_mg_be/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_czypdmg:={? var_pres('_a')=type_of(0) || _a || 1 ?};
_Mg_tab:={? var_pres('_b')=type_of(PD_MG) || _b || PD_MG ?};
_p600400:=exec('get','#params',600400,2);
_user:={? PD_MG_ZP=_Mg_tab || PD_MG_ZN.USER || OPERATOR.USER ?};

_oddzs:='(\'\'';
{? _p600400='T' | PD_K.Z_MG=null()
||
   USERS_UP.cntx_psh();
   USERS_UP.index('ODDZ');
   USERS_UP.prefix(_user,'ODDZ');
   _loop:=USERS_UP.first();
   {!
   |? _loop
   |!
      _oddzs+=',\''+USERS_UP.ODDZ().KOD+'\'';
      _loop:=USERS_UP.next()
   !};
   USERS_UP.cntx_pop()
||
   _oddzs+=',\''+PD_K.Z_MG().ODDZ+'\''
?};
_oddzs+=')';

_mg_zakr:=0;
{? _czypdmg
||
   {? PD_MG=_Mg_tab
   ||
      PD_MG.cntx_psh();
      PD_MG.index('UNIK');
      PD_MG.prefix('N',PD_N.ref(),null());
      _mg_zakr:=PD_MG.first();
      PD_MG.cntx_pop()
   ||
      PD_MG_ZP.cntx_psh();
      PD_MG_ZP.index('UNIK');
      PD_MG_ZP.prefix('N',PD_MG_ZN.ref());
      _mg_zakr:=PD_MG_ZP.first();
      PD_MG_ZP.cntx_pop()
   ?}
?};

MG.f_clear();
MG.prefix();
_sort:='SYM,NAZ';
_from:='join USERS_UP';
_where:='USERS_UP.USERS=:_a and USERS_UP.AKR=\'MG\' and MG.ODDZ in :_b';
{? _mg_zakr
||
   {? PD_MG=_Mg_tab
   ||
      _from+=' join PD_MG';
      _where+=' and PD_MG.MM=\'N\' and PD_MG.PD_N=:_c and PD_MG.PD_P is null'
   ||
      _from+=' join PD_MG_ZP';
      _where+=' and PD_MG_ZP.MM=\'N\' and PD_MG_ZP.PD_MG_ZN=:_c'
   ?}
?};
{? PD_MG=_Mg_tab
||
   MG.f_set(_sort,_from,_where,_user,_oddzs,PD_N.ref())
||
   MG.f_set(_sort,_from,_where,_user,_oddzs,PD_MG_ZN.ref())
?};
{? MG.f_first() || {! |? {? MG.ref()=PD_K.Z_MG || MG.f_del() || MG.f_next() ?} !} ?};
1


\pd_k_zmg_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: przed redakcją PD_K.Z_MG
::   WE: [_a] - TYPYZAM.R
::       [_b] - tabela PD_MG lub PD_MG_ZN
::  OLD: \pd_k_zmg_be/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_rodz:={? var_pres('_a')=type_of('') || _a || PD_K.TYPYZAM().R ?};
_Mg_tab:={? var_pres('_b')=type_of(PD_MG) || _b || PD_MG ?};
_user:={? PD_MG_ZP=_Mg_tab || PD_MG_ZN.USER || OPERATOR.USER ?};
{? _rodz='W'
||
   _p600400:=exec('get','#params',600400,2);

   _mg_zakr:=0;
   {? _=0
   ||
      {? PD_MG=_Mg_tab
      ||
         PD_MG.cntx_psh();
         PD_MG.index('UNIK');
         PD_MG.prefix('T',PD_N.ref(),null());
         _mg_zakr:=PD_MG.first();
         PD_MG.cntx_pop()
      ||
         PD_MG_ZP.cntx_psh();
         PD_MG_ZP.index('UNIK');
         PD_MG_ZP.prefix('T',PD_MG_ZN.ref());
         _mg_zakr:=PD_MG_ZP.first();
         PD_MG_ZP.cntx_pop()
      ?}
   ?};

   MG.f_clear();
   MG.prefix();
   _sort:='SYM,NAZ';
   _from:='join USERS_UP';
   _where:='USERS_UP.USERS=:_a and USERS_UP.AKR=\'ZAW\'';
   {? _mg_zakr
   ||
      {? PD_MG=_Mg_tab
      ||
         _from+=' join PD_MG';
         _where+=' and PD_MG.MM=\'T\' and PD_MG.PD_N=:_c and PD_MG.PD_P is null'
      ||
         _from+=' join PD_MG_ZP';
         _where+=' and PD_MG_ZP.MM=\'T\' and PD_MG_ZP.PD_MG_ZN=:_c'
      ?}
   ?};
   {? _p600400<>'T' & PD_K.MG
   ||
      _where+=' and MG.ODDZ=\':_b\''
   ?};
   {? PD_MG_ZP=_Mg_tab
   ||
      MG.f_set(_sort,_from,_where,_user,PD_K.MG().ODDZ,PD_N.ref())
   ||
      MG.f_set(_sort,_from,_where,_user,PD_K.MG().ODDZ,PD_MG_ZN.ref())
   ?};
   {? MG.f_first()
   ||
      {? MG.f_first() || {! |? {? MG.ref()=PD_K.MG || MG.f_del() || MG.f_next() ?} !} ?}
   ||
      MG.f_clear();
      _sort:='SYM,NAZ';
      _from:='join USERS_UP';
      _where:='USERS_UP.USERS is NULL and USERS_UP.AKR=\'ZAW\'';
      {? _mg_zakr
      ||
         _from+=' join PD_MG';
         _where+=' and PD_MG.MM=\'T\' and PD_MG.PD_N=:_b and PD_MG.PD_P is null'
      ?};
      {? _p600400<>'T' & PD_K.MG
      ||
         _where+=' and MG.ODDZ=\':_a\''
      ?};
      MG.f_set(_sort,_from,_where,PD_K.MG().ODDZ,PD_N.ref());
      {? MG.f_first() || {! |? {? MG.ref()=PD_K.MG || MG.f_del() || MG.f_next() ?} !} ?}
   ?};
   1
?}


\stan_ico
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Wołana jeśli problem ze stanem. Zwraca domyślnie ikone informacyjną jeśli cechy stanu nie wykazują problemów
::       lub ikonę dotyczącą pierwszej cechy stanu wykazującej problem.
::   WE: _a - _Tab.ref() - pozycji szczegółów pozycji planu dostaw
::       _a - typ stanu D/MG/DK_C
::   WY: ikona
::----------------------------------------------------------------------------------------------------------------------
_ref:=$_a;
_ts:=_b;
_wyn:='xwin16.png:19';
_Tab3:=exec('pda_tab3_wsk','plan_dostaw','TAB');
_Tab3.cntx_psh();
_Tab3.index(exec('pda_tab3_wsk','plan_dostaw','NDX2'));
_Tab3.prefix(_ref,_ts,);
_loop:=_Tab3.first();
{!
|? _loop
|!
   _loop:={? _Tab3.PROBLEM='T' || _wyn:=_Tab3.ICO; 0 || _Tab3.next() ?}
!};
_Tab3.cntx_pop();
_wyn


\pd_pow_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Dodaje zapis PD_POW
::   WE: _a - PD_N.ref()
::       _b - PD_P.ref()
::       _c - typ stanu
::       _d - typ cechy stanu
::       _e - wskazanie na pozycję szczegółów pozycji planu dostaw
::       _f - wskazanie na pozycję szczegółów pozycji planu dostaw - na podstawie której wnioskujemy
::       _f - opis
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_env:=__pda;

PD_POW.prefix();
PD_POW.blank();
PD_POW.PD_N:=_a;
PD_POW.PD_P:=_b;
PD_POW.TS:=_c;
PD_POW.TCS:=_d;
PD_POW.REF1:=_e;
PD_POW.REF1_IDA:=exec('FindAndGet','#table',ref_tab(_e),_e,,"_a.idadd_value()",'');
PD_POW.REF2:=_f;
PD_POW.REF2_IDA:=exec('FindAndGet','#table',ref_tab(_f),_f,,"_a.idadd_value()",'');
PD_POW.OPIS:=_g;
PD_POW.PD_TV:=_env.VER;
{? PD_POW.add()
||
   exec('FindAndGet','#table',PD_P,_b,,"{? PD_P.REFRESH='N' || PD_P.REFRESH:='T'; PD_P.put() ?}");
   1
?}


\pd_pow_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Usuwa zapisy PD_POW powiązane z _a, _b, _c
::   WE: _a - PD_N.ref()
::       _b - PD_P.ref()
::       _c - typ stanu
::       _d - typ cechy stanu
::       _e - tabela rekordów PD_P do przetworzenia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_pd_n:=_a;
_pd_p:=_b;
_kod:=_c;
_ts:=_d;
_Sel:=_e;
_ver:=exec('FindInSet','#table','PD_TV','AKTYWNA',PD_N.ref(),'T',,,,null());
PD_POW.cntx_psh();
PD_POW.index('PD_POW');
{? var_pres('_Sel')=type_of(~~)
||
   {? _kod=''
   || PD_POW.prefix(_ver,PD_P.PD_N,PD_P.ref(),)
   || PD_POW.prefix(_ver,PD_P.PD_N,PD_P.ref(),_kod,_ts,)
   ?};
   _loop:=PD_POW.first();
   {!
   |? _loop
   |!
      _loop:=PD_POW.del()
   !}
||
   PD_P.cntx_psh();
   PD_P.prefix();
   _loop:=_Sel.first();
   {!
   |? _loop
   |!
      {? PD_P.seek(_Sel.REF,)
      ||
         {? _kod=''
         || PD_POW.prefix(_ver,PD_P.PD_N,PD_P.ref(),)
         || PD_POW.prefix(_ver,PD_P.PD_N,PD_P.ref(),_kod,_ts,)
         ?};
         _loop:=PD_POW.first();
         {!
         |? _loop
         |!
            _loop:=PD_POW.del()
         !}
      ?};
      _loop:=_Sel.next()
   !};
   PD_P.cntx_pop()
?};
PD_POW.cntx_pop()


\pd_pow_stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Zwraca stan PD_POW
::   WE: _a - PD_N.ref()
::       _b - PD_P.ref()
::       _c - typ stanu
::       _d - typ cechy stanu
::       _e - wskazanie na pozycję szczegółów pozycji planu dostaw
::   WY: objekt
::----------------------------------------------------------------------------------------------------------------------
_env:=__pda;
_wyn:=obj_new('PROBLEM','OPIS');
_wyn.PROBLEM:='T';
_wyn.OPIS:='';
PD_POW.cntx_psh();
PD_POW.index('PD_POW');
PD_POW.prefix(_env.VER,_a,_b,_c,_d,_e);
{? PD_POW.first()
      &
   exec('FindAndGet','#table',ref_tab(_e),_e,,"_a.idadd_value()",'')=PD_POW.REF1_IDA
      &
   exec('FindAndGet','#table',ref_tab(PD_POW.REF2),PD_POW.REF2,,"_a.idadd_value()",'')=PD_POW.REF2_IDA
||
   _wyn.PROBLEM:='N';
   _wyn.OPIS:=PD_POW.OPIS
?};
PD_POW.cntx_pop();
_wyn


\tcs_brak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: typ cechy stanu BRAK
::----------------------------------------------------------------------------------------------------------------------
'BRAK'


\tcs_min
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: typ cechy stanu MIN
::----------------------------------------------------------------------------------------------------------------------
'MIN'


\tcs_max
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: typ cechy stanu MAX
::----------------------------------------------------------------------------------------------------------------------
'MAX'


\tcs_zi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: typ cechy stanu ZI
::----------------------------------------------------------------------------------------------------------------------
'ZI'


\pd_p_refresh2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [20.42]
:: OPIS: aktualizacja PD_P.REFRESH po modyfikacji magazynow PD_MG
::----------------------------------------------------------------------------------------------------------------------
{? PD_N.STATUS='N'
||
   PD_P.cntx_psh();
   PD_P.index('POZ');
   PD_P.prefix(PD_N.ref);
   _loop:=PD_P.first();
   {!
   |? _loop
   |!
      {? PD_P.REFRESH<>'Z' & PD_Z.REFRESH || PD_P.REFRESH:='T' ?};
      _loop:=PD_P.put() & PD_P.next()
   !};
   PD_P.cntx_pop()
?}


\pd_mg_zn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [21.14]
:: OPIS: PD_MG_ZN.ref()
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PD_MG_ZN.ref()


\pd_user
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [21.14]
:: OPIS: Użytkownik planu dostaw
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PD_Z.USER


\pda_env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Plany dostaw - środowisko
::   WE: _a - argument - wynik formuły exec('pda_a','plan_dostaw')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_paramsa:=_a;
::UWAGA: _fld, i _mth to formułki pomocnicze, żeby wygodniej tworzyć tablice i komentować poszczególne jej elementy
:: powiedzmy, że to bedzie pole
_fld:="31+form(_a)";
:: powiedzmy, że to bedzie metoda
_mth:="31+form(_a)";

_env:=obj_new(
:: pola
    _fld('TAB1',              'Stany na dzień')
   ,_fld('TAB2',              'Stany wg daty - szczegóły')
   ,_fld('TAB3',              'Stany wg magazynów - sczegóły')
   ,_fld('STANY',             'Stany w magazynach do przesunięć')
:: pola - wersja
   ,_fld('VER_TYP',           'Typ wersji')
   ,_fld('VER_DATA',          'Data wersji')
   ,_fld('VER',               'Wersja')
:: pola - plan dostaw
   ,_fld('PD_N',              'Plan dostaw - nagłówek')
   ,_fld('PD_P',              'Plan dostaw - pozycja')
:: okna
   ,_fld('WER_GR',            'Okno grupowe')
);
_env.VER_TYP:=_paramsa.VER_TYP;
_env.VER_DATA:={? _env.VER_TYP=exec('pda_ver_typ_default','plan_dostaw') || PD_N.DU || _paramsa.VER_DATA ?};
_env.VER:=null();
_env.PD_N:=exec('FindAndGet','#table',PD_P,_paramsa.PD_P,,"PD_N",null());
_env.PD_P:=_paramsa.PD_P;
_env


\pda_ver_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje analizy - pobranie aktywnej wersji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_pda:=_a;
PD_TV.index('AKTYWNA');
PD_TV.prefix('T',_pda.PD_N);
_pda.VER:={? PD_TV.first() || PD_TV.ref() || null() ?};
_maska:={? _pda.VER || PD_TV.MASKA || '____' ?};
PD_T2.use(gsub(PD_T2.name(1),'????',_maska));
PD_T3.use(gsub(PD_T3.name(1),'????',_maska));
PD_TVP.use(gsub(PD_TVP.name(1),'????',_maska))


\pda_ver_get_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje analizy - pobranie danych aktywnej wersji
::   WE: _a - środowisko
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_ver:=_env.VER;
_pd_n:=_env.PD_N;
_pd_p:=_env.PD_P;
{? _ver=null() | _pd_n=null() | _pd_p=null() || return() ?};
_Tab2t:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_Tab3t:=exec('pda_tab3_wsk','plan_dostaw','TAB');
:: pobranie danych wersji
_Tab3t.cntx_psh();
_Tab3t.prefix();
_Tab2t.cntx_psh();
_Tab2t.prefix();
PD_T2.cntx_psh();
PD_T2.index('D');
PD_T2.prefix(_ver,_pd_n,_pd_p);
PD_T3.cntx_psh();
PD_T3.index('KOD');
_loop:=PD_T2.first();
{!
|? _loop
|!
   _Tab2t.blank();
   _Tab2t.MG:=PD_T2.MG;
   _Tab2t.D:=PD_T2.D;
   _Tab2t.T:=PD_T2.T;
   _Tab2t.PRZY_ROZ:=PD_T2.PRZY_ROZ;
   _Tab2t.ODDZ:=PD_T2.ODDZ;
   _Tab2t.PD_D_KOD:=PD_T2.PD_D_KOD;
   _Tab2t.TYP:=PD_T2.TYP;
   _Tab2t.O:=PD_T2.O;
   _Tab2t.ILP:=PD_T2.ILP;
   _Tab2t.ILR:=PD_T2.ILR;
   _Tab2t.STAN_MG:=PD_T2.STAN_MG;
   _Tab2t.STMG_ICO:=PD_T2.STMG_ICO;
   _Tab2t.MG_KOLOR:=PD_T2.MG_KOLOR;
   _Tab2t.STAN_D:=PD_T2.STAN_D;
   _Tab2t.ST_D_ICO:=PD_T2.ST_D_ICO;
   _Tab2t.PROBLEM:=PD_T2.PROBLEM;
   _Tab2t.P_COUNT:=PD_T2.P_COUNT;
   _Tab2t.ICO:=PD_T2.ICO;
   _Tab2t.REF:=PD_T2.REF;
   _Tab2t.DK_C:=PD_T2.DK_C;
   _Tab2t.DKC_SYM:=PD_T2.DKC_SYM;
   _Tab2t.STAN_DKC:=PD_T2.STAN_DKC;
   _Tab2t.DKC_ICO:=PD_T2.DKC_ICO;
   _Tab2t.DKCKOLOR:=PD_T2.DKCKOLOR;
   {? var_pres('WAR01',_Tab2t)=type_of('') || _Tab2t.WAR01:=PD_T2.WAR01
   || {? var_pres('WAR02',_Tab2t)=type_of('') || _Tab2t.WAR02:=PD_T2.WAR02
      || {? var_pres('WAR03',_Tab2t)=type_of('') || _Tab2t.WAR03:=PD_T2.WAR03
         || {? var_pres('WAR04',_Tab2t)=type_of('') || _Tab2t.WAR04:=PD_T2.WAR04
            || {? var_pres('WAR05',_Tab2t)=type_of('') || _Tab2t.WAR05:=PD_T2.WAR05
               || {? var_pres('WAR06',_Tab2t)=type_of('') || _Tab2t.WAR06:=PD_T2.WAR06
                  || {? var_pres('WAR07',_Tab2t)=type_of('') || _Tab2t.WAR07:=PD_T2.WAR07
                     || {? var_pres('WAR08',_Tab2t)=type_of('') || _Tab2t.WAR08:=PD_T2.WAR08
                        || {? var_pres('WAR09',_Tab2t)=type_of('') || _Tab2t.WAR09:=PD_T2.WAR09
                           || {? var_pres('WAR10',_Tab2t)=type_of('') || _Tab2t.WAR10:=PD_T2.WAR10 ?}
                           ?}
                        ?}
                     ?}
                  ?}
               ?}
            ?}
         ?}
      ?}
   ?};
   {? _Tab2t.add()
   ||
      PD_T3.prefix(PD_T2.ref());
      _loop:=PD_T3.first();
      {!
      |? _loop
      |!
         _Tab3t.blank();
         _Tab3t.REF:=$_Tab2t.ref();
         _Tab3t.TYPSTAN:=PD_T3.TYPSTAN;
         _Tab3t.KOD:=PD_T3.KOD;
         _Tab3t.SORT:=PD_T3.SORT;
         _Tab3t.CECHA:=PD_T3.CECHA;
         _Tab3t.WAR:=PD_T3.WAR;
         _Tab3t.STAN:=PD_T3.STAN;
         _Tab3t.ROZNICA:=PD_T3.ROZNICA;
         _Tab3t.ICO:=PD_T3.ICO;
         _Tab3t.PROBLEM:=PD_T3.PROBLEM;
         _Tab3t.OPIS:=PD_T3.OPIS;
         _Tab3t.add();
         _loop:=PD_T3.next()
      !}
   ?};
   _loop:=PD_T2.next()
!};
PD_T3.cntx_pop();
PD_T2.cntx_pop();
_Tab2t.cntx_pop();
_Tab3t.cntx_pop()


\pda_ver_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje analizy - dodanie wersji
::   WE: _a - środowisko
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_ver_typ:=_env.VER_TYP;
_ver_data:=_env.VER_DATA;
_pd_n:=_env.PD_N;
_transakcja:=do_state()=0;
PD_TV.index('PDNTDANR');
PD_TV.prefix(_pd_n);
_first:=PD_TV.first();
{? ~PD_TV.find_key(_ver_typ,_ver_data)
||
   exec('add_grnr','numery','PDV');
   POM.TAB:='PD_TV';
   POM.TYPDOK:='PDV';
   PD_TV.blank();
   PD_TV.PD_N:=_pd_n;
   PD_TV.TYP:=_ver_typ;
   PD_TV.DATA:=_ver_data;
   PD_TV.AR:=PD_TV.DATA~1;
   PD_TV.AM:=PD_TV.DATA~2;
   PD_TV.MASKA:='____';
   PD_TV.AKTYWNA:='T';
   {? _transakcja || do() ?};
   {? PD_TV.add()
   ||
      exec('wol_nr','numery','PD_TV','N');
      exec('pda_ver_get','plan_dostaw',_env);
:: pierwsza wersja analizy więc uzupełniamy wersję w PD_POW
      {? _first=0
      ||
         PD_POW.cntx_psh();
         PD_POW.index('PD_POW');
         PD_POW.prefix(null(),_pd_n);
         _loop:=PD_POW.first();
         {!
         |? _loop
         |!
            PD_POW.cntx_psh();
            PD_POW.prefix();
            PD_POW.PD_TV:=PD_TV.ref();
            PD_POW.put();
            PD_POW.cntx_pop();
            _loop:=PD_POW.first()
         !};
         PD_POW.cntx_pop()
      ?}
   ?};
   {? _transakcja || end() ?}
?}


\pda_ver_set_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje analizy - dodanie danych wersji
::   WE: _a - środowisko
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_mat:=_b;
_ver:=_env.VER;
_pd_n:=_env.PD_N;
_pd_p:=_env.PD_P;
{? _ver=null() | _pd_n=null() | _pd_p=null() || return() ?};
_Tab2t:=exec('pda_tab2_wsk','plan_dostaw','TAB');
_tab2_ndx1:=exec('pda_tab2_wsk','plan_dostaw','NDX1');
_Tab3t:=exec('pda_tab3_wsk','plan_dostaw','TAB');
_tab3_ndx1:=exec('pda_tab3_wsk','plan_dostaw','NDX1');
:: usunięcie danych wersji
exec('pda_ver_del_data','plan_dostaw',_ver,_pd_p);
:: dodanie danych wersji
PD_TVP.cntx_psh();
PD_TVP.index('UNIK');
PD_TVP.prefix();
PD_T2.cntx_psh();
PD_T2.prefix();
PD_T3.cntx_psh();
PD_T3.prefix();
_Tab3t.cntx_psh();
_Tab3t.index(_tab3_ndx1);
_Tab3t.prefix();
_Tab2t.cntx_psh();
_Tab2t.index(_tab2_ndx1);
_Tab2t.prefix();
_loop:=_Tab2t.first();
{!
|? _loop
|!
   PD_T2.blank();
   PD_T2.PD_TV:=_ver;
   PD_T2.PD_N:=_pd_n;
   PD_T2.PD_P:=_pd_p;
   PD_T2.M:=_mat;
   PD_T2.MG:=_Tab2t.MG;
   PD_T2.D:=_Tab2t.D;
   PD_T2.T:=_Tab2t.T;
   PD_T2.PRZY_ROZ:=_Tab2t.PRZY_ROZ;
   PD_T2.ODDZ:=_Tab2t.ODDZ;
   PD_T2.PD_D_KOD:=_Tab2t.PD_D_KOD;
   PD_T2.TYP:=_Tab2t.TYP;
   PD_T2.O:=_Tab2t.O;
   PD_T2.ILP:=_Tab2t.ILP;
   PD_T2.ILR:=_Tab2t.ILR;
   PD_T2.STAN_MG:=_Tab2t.STAN_MG;
   PD_T2.STMG_ICO:=_Tab2t.STMG_ICO;
   PD_T2.MG_KOLOR:=_Tab2t.MG_KOLOR;
   PD_T2.STAN_D:=_Tab2t.STAN_D;
   PD_T2.ST_D_ICO:=_Tab2t.ST_D_ICO;
   PD_T2.PROBLEM:=_Tab2t.PROBLEM;
   PD_T2.P_COUNT:=_Tab2t.P_COUNT;
   PD_T2.ICO:=_Tab2t.ICO;
   PD_T2.REF:=_Tab2t.REF;
   PD_T2.DK_C:=_Tab2t.DK_C;
   PD_T2.DKC_SYM:=_Tab2t.DKC_SYM;
   PD_T2.STAN_DKC:=_Tab2t.STAN_DKC;
   PD_T2.DKC_ICO:=_Tab2t.DKC_ICO;
   PD_T2.DKCKOLOR:=_Tab2t.DKCKOLOR;
   {? var_pres('WAR01',_Tab2t)=type_of('') || PD_T2.WAR01:=_Tab2t.WAR01
   || {? var_pres('WAR02',_Tab2t)=type_of('') || PD_T2.WAR02:=_Tab2t.WAR02
      || {? var_pres('WAR03',_Tab2t)=type_of('') || PD_T2.WAR03:=_Tab2t.WAR03
         || {? var_pres('WAR04',_Tab2t)=type_of('') || PD_T2.WAR04:=_Tab2t.WAR04
            || {? var_pres('WAR05',_Tab2t)=type_of('') || PD_T2.WAR05:=_Tab2t.WAR05
               || {? var_pres('WAR06',_Tab2t)=type_of('') || PD_T2.WAR06:=_Tab2t.WAR06
                  || {? var_pres('WAR07',_Tab2t)=type_of('') || PD_T2.WAR07:=_Tab2t.WAR07
                     || {? var_pres('WAR08',_Tab2t)=type_of('') || PD_T2.WAR08:=_Tab2t.WAR08
                        || {? var_pres('WAR09',_Tab2t)=type_of('') || PD_T2.WAR09:=_Tab2t.WAR09
                           || {? var_pres('WAR10',_Tab2t)=type_of('') || PD_T2.WAR10:=_Tab2t.WAR10 ?}
                           ?}
                        ?}
                     ?}
                  ?}
               ?}
            ?}
         ?}
      ?}
   ?};
   {? PD_T2.add()
   ||
      _Tab3t.prefix($_Tab2t.ref());
      _loop:=_Tab3t.first();
      {!
      |? _loop
      |!
         PD_T3.blank();
         PD_T3.REF:=$PD_T2.ref();
         PD_T3.PD_T2:=PD_T2.ref();
         PD_T3.TYPSTAN:=_Tab3t.TYPSTAN;
         PD_T3.KOD:=_Tab3t.KOD;
         PD_T3.SORT:=_Tab3t.SORT;
         PD_T3.CECHA:=_Tab3t.CECHA;
         PD_T3.WAR:=_Tab3t.WAR;
         PD_T3.STAN:=_Tab3t.STAN;
         PD_T3.ROZNICA:=_Tab3t.ROZNICA;
         PD_T3.ICO:=_Tab3t.ICO;
         PD_T3.PROBLEM:=_Tab3t.PROBLEM;
         PD_T3.OPIS:=_Tab3t.OPIS;
         PD_T3.add();
         _loop:=_Tab3t.next()
      !}
   ?};
   {? ~PD_TVP.find_key(_ver,_pd_n,_pd_p)
   ||
      PD_TVP.PD_TV:=_ver;
      PD_TVP.PD_N:=_pd_n;
      PD_TVP.PD_P:=_pd_p;
      PD_TVP.add()
   ?};
   _loop:=_Tab2t.next()
!};
_Tab2t.cntx_pop();
_Tab3t.cntx_pop();
PD_T3.cntx_pop();
PD_T2.cntx_pop();
PD_TVP.cntx_pop()


\pda_ver_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje analizy - Usuwa wersję wraz z danymi
::   WE: _a - PD_TV.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_brak_tran:=do_state()=0;
{? _brak_tran || do() ?};
exec('pda_ver_del_data','plan_dostaw',_a);
exec('FindAndGet','#table',PD_TV,_a,,"
   _ver:=PD_TV.ref();
   _pd_n:=PD_TV.PD_N;
   PD_POW.cntx_psh();
   PD_POW.index('PD_POW');
   PD_POW.prefix(PD_TV.ref());
   _loop:=PD_POW.first();
   {? PD_TV.AKTYWNA='T'
   ||
:: usuwamy aktywną wersja analizy więc zerujemy PD_POW.PD_TV
      {!
      |? _loop
      |!
         PD_POW.cntx_psh();
         PD_POW.prefix();
         PD_POW.PD_TV:=null();
         PD_POW.put();
         PD_POW.cntx_pop();
         _loop:=PD_POW.first()
      !}
   ||
:: usuwamy nieaktywna wersja analizy więc usuwamy PD_POW, które wcześniej dodaliśmy podczas tworzenia wersji
      {!
      |? _loop
      |!
         _loop:=PD_POW.del()
      !}
   ?};
   PD_POW.cntx_pop();
:: usuwa pozycje wersji
   exec('pd_tvp_del','plan_dostaw',_ver,_pd_n);
   {? PD_TV.count()
   ||
:: coś poszło nie tak zostały powiązania
      undo()
   ||
:: aktualizacja numeracji
      POM.TAB:='PD_TV';
      POM.TYPDOK:='PDV';
      numer:=PD_TV.NR;
      oldnumer:=1;
      exec('nr_old','numery');
      PD_TV.del()
   ?}
");
{? _brak_tran || end() ?}


\pda_ver_del_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje analizy - Usuwa dane wersji
::   WE: _a - PD_TV.ref()
::       [_b] - PD_P.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ver:=_a;
_pd_p:={? var_pres('_b')=type_of(null()) || _b || null() ?};
_pd_n:=exec('FindAndGet','#table',PD_TV,_ver,,"PD_N",null());
_tran:=do_state()>0;
{? ~_tran || do() ?};
{? _ver & _pd_n
||
:: usunięcie pozycji wersji
   PD_TVP.cntx_psh();
   PD_TVP.index('UNIK');
   PD_T3.cntx_psh();
   PD_T3.index('SORT');
   PD_T2.cntx_psh();
   PD_T2.index('D');
   {? _pd_p
   || PD_T2.prefix(_ver,_pd_n,_pd_p)
   || PD_T2.prefix(_ver,_pd_n)
   ?};
   _loop:=PD_T2.first();
   {!
   |? _loop
   |!
:: usuwa pozycje wersji
      exec('pd_tvp_del','plan_dostaw',_ver,_pd_n,PD_T2.PD_P);
      PD_T3.prefix(PD_T2.ref());
      _loop:=PD_T3.first();
       {!
       |? _loop
       |!
         _loop:=PD_T3.del()
       !};
      _loop:=PD_T2.del()
   !};
   PD_T2.cntx_pop();
   PD_T3.cntx_pop();
   PD_TVP.cntx_pop()
?};
{? ~_tran || end() ?}


\pda_ver_typ_default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Typ analiza planu dostaw: Domyślna
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Domyślna'


\pda_ver_typ_ps_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Typ analiza planu dostaw: Plan strategiczny - bufor
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Plan strategiczny - bufor'


\pda_ver_typ_ps_buf_verify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Typ analiza planu dostaw: Plan strategiczny - weryfikacja bufora
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Plan strategiczny - weryfikacja bufora'


\pda_ver_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wyświetla wersje analizy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=__pda;

_wer:=PD_TV.mk_sel('Wersje analizy'@,'P',,'pda_ver',1);
PD_TV.win_fld(_wer,,'TYP',,,10,,,'Typ'@);
PD_TV.win_fld(_wer,,'DATA',,,10,,,'Data'@);
PD_TV.win_fld(_wer,,'NR',,,5,,,'Nr'@);
PD_TV.win_fld(_wer,,'SYM',,,20,,,'Symbol'@);
PD_TV.win_fld(_wer,,'OPIS',,,50,,,'Opis'@);

PD_TV.cntx_psh();
PD_TV.index('PDNTDANR');
PD_TV.prefix(_env.PD_N);
PD_TV.win_sel(_wer);
PD_TV.select();
PD_TV.cntx_pop()


\pd_n_upd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Plan dostaw - PD_N.put() i aktualizacja powiązanych kartotek
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_pd_n:=PD_N.ref();
_pd_p:=null();
PD_D_USE.cntx_psh();
PD_D_USE.index('PD_D_USE');
PD_D_USE.prefix(_pd_n,_pd_p);
_no_do:=do_state()=0;
{? _no_do || do() ?};
PD_N.put();
_loop:=PD_D_USE.first();
{!
|? _loop
|!
   _loop:=PD_D_USE.del()
!};
{? PD_N.PD_D_ZN
||
   PD_D_ZP.cntx_psh();
   PD_D_ZP.index('PD_D_ZN');
   PD_D_ZP.prefix(PD_N.PD_D_ZN);
   _loop:=PD_D_ZP.first();
   {!
   |? _loop
   |!
      PD_D_USE.PD_N:=_pd_n;
      PD_D_USE.PD_P:=_pd_p;
      PD_D_USE.PD_D:=PD_D_ZP.PD_D;
      _loop:=PD_D_USE.add() & PD_D_ZP.next()
   !};
   PD_D_ZP.cntx_pop()
||
   PD_D.cntx_psh();
   PD_D.index('A');
   PD_D.prefix('T');
   _loop:=PD_D.first();
   {!
   |? _loop
   |!
      PD_D_USE.PD_N:=_pd_n;
      PD_D_USE.PD_P:=_pd_p;
      PD_D_USE.PD_D:=PD_D.ref();
      _loop:=PD_D_USE.add() & PD_D.next()
   !};
   PD_D.cntx_pop()
?};
{? PD_N.PD_MG_ZN
||
   PD_MG.cntx_psh();
   PD_MG.index('MM');
   PD_MG.prefix(_pd_n,_pd_p);
   _loop:=PD_MG.first();
   {!
   |? _loop
   |!
      _loop:=PD_MG.del()
   !};
   PD_MG.cntx_pop();
   PD_MG_ZP.cntx_psh();
   PD_MG_ZP.index('MM');
   PD_MG_ZP.prefix(PD_N.PD_MG_ZN);
   _loop:=PD_MG_ZP.first();
   {!
   |? _loop
   |!
      PD_MG.PD_N:=_pd_n;
      PD_MG.PD_P:=_pd_p;
      PD_MG.MG:=PD_MG_ZP.MG;
      PD_MG.MM:=PD_MG_ZP.MM;
      PD_MG.SORT:=PD_MG_ZP.SORT;
      _loop:=PD_MG.add() & PD_MG_ZP.next()
   !};
   PD_MG_ZP.cntx_pop()
?};
_wyn:={? _no_do || end() || do_state()=1 ?};
PD_D_USE.cntx_pop();
_wyn


\pd_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Usuwa plan dostaw
::   WE: [_a] - 0*/1 - działanie wsadowe
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_batch:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_result:=0;

{? ~exec('pd_n_lock','plan_dostaw') || return(0) ?};

_pd_n:=PD_N.ref();

{? PD_N.DZ<>date(0,0,0)
||
   FUN.info('Plan dostaw zamknięty.\nUsunięcie niedostępne.'@);
   exec('pd_n_unlock','plan_dostaw'); return(0)
?};

_ret:=0;
PD_K.cntx_psh();
PD_K.index('CZY_ZAM');
PD_K.prefix('T',_pd_n);
{? PD_K.first() || FUN.info('Z planu utworzono zamówienia.\nUsunięcie niedostępne.'@); _ret:=1 ?};
PD_K.index('CZY_ZL');
PD_K.prefix('T',_pd_n);
{? PD_K.first() || FUN.info('Z planu utworzono zlecenie produkcyjne.\nUsunięcie niedostępne.'@); _ret:=1 ?};
PD_K.prefix('C',_pd_n);
{? PD_K.first() || FUN.info('Z planu utworzono zlecenie produkcyjne.\nUsunięcie niedostępne.'@); _ret:=1 ?};
PD_K.cntx_pop();
{? _ret || exec('pd_n_unlock','plan_dostaw'); return(0) ?};

{? _batch | FUN.ask('Usunąć plan dostaw %1?'@[PD_N.SYM])
||
:: Weryfikacja powiązań planu z pozycjami
   _rel:='';
   PD_P.cntx_psh();
   PD_P.index('POZ'); PD_P.prefix(_pd_n);
   _rel+={? PD_P.first() || 'pozycje, ' || '' ?};
   PD_P.cntx_pop();
   PD_K.cntx_psh();
   PD_K.index('PD_K'); PD_K.prefix(_pd_n,PD_P.ref);
   _rel+={? PD_K.first() || 'pozycje w koszyku, ' || '' ?};
   PD_K.cntx_pop();
   PD_MG.cntx_psh();
   PD_MG.index('MM'); PD_MG.prefix(_pd_n);
   _rel+={? PD_MG.first() || 'magazyny, ' || '' ?};
   PD_MG.cntx_pop();
   _confirm:={? _rel<>'' || {? _batch || 1 || FUN.ask('Do planu dostaw przypisano: %1. Czy na pewno usunąć?'@[_rel-2]) ?} ?};
   {? _rel='' | _confirm
   ||
      exec('ini_kom','#message','Usuwanie planu dostaw'@);
      __kom.sect_beg(PD_N.SYM);
      _undo:=0;
      do();
:: formuly planu dostaw
      PD_D_USE.cntx_psh();
      PD_D_USE.index('PD_D_USE');
      PD_D_USE.prefix(PD_N.ref(),null());
      {? PD_D_USE.first() || {! |? PD_D_USE.del() !} ?};
      PD_D_USE.cntx_pop();
:: pozycje
      PD_P.cntx_psh();
      PD_P.index('POZ'); PD_P.prefix(_pd_n);
      {? PD_P.first()
      || {!
         |?
            __kom.sect_beg(PD_P.M().KTM,,,1);
::       koszyk pozycji
            PD_K.index('PD_K'); PD_K.prefix(PD_N.ref(),PD_P.ref());
            {? PD_K.first()
            ||
               {!
               |?
                  _wyn:=exec('pd_k_del','plan_dostaw',1);
                  {? _wyn=0
                  || undo(); _undo:=1; 0
                  || PD_K.first()
                  ?}
               !}
            ?};
::       pozycja
            {? _undo=0
            ||
               _del:=exec('pd_p_del','plan_dostaw',2);
               {? _del=0
               || undo(); _undo:=1; 0
               || PD_P.first()
               ?}
            ?}
         !}
      ?};
      PD_P.cntx_pop();
:: magazyny planu dostaw
      PD_MG.cntx_psh();
      PD_MG.index('MM'); PD_MG.prefix(_pd_n);
      {? PD_MG.first()
      || {!
         |?
            PD_MG.del()
         !}
      ?};
      PD_MG.cntx_pop();
:: wersje analizy
      PD_TV.cntx_psh();
      PD_TV.index('PDNTNR');
      PD_TV.prefix(PD_N.ref());
      _loop:=PD_TV.first();
      {!
      |? _loop
      |!
         exec('pda_ver_del','plan_dostaw',PD_TV.ref());
         _loop:=PD_TV.first()
      !};
      PD_TV.cntx_pop();
:: dostawcy
      PD_MDOST.cntx_psh();
      PD_MDOST.index('MIL');
      PD_MDOST.prefix(PD_N.ref());
      {? PD_MDOST.first() || {! |? PD_MDOST.del() !} ?};
      PD_MDOST.cntx_pop();
:: naglowek planu dostaw
      POM.TAB:='PD_N';
      POM.TYPDOK:='PDN';
      numer:=PD_N.NR;
      oldnumer:=1;
      exec('nr_old','numery');
      POM.TAB:=POM.TYPDOK:='';
      {? ~_batch || exec('open_pdn','plan_dostaw',$PD_N.ref(),2) ?};
      PD_N.del();
      _end:=end();
      {? _end
      || _result:=1;
         __kom.add('Usunięto plan dostaw.'@,1)
      || __kom.add('Usunięcie planu dostaw nie powiodło się.'@,2)
      ?};
      exec('end_kom','#message');
      {? ~_end || exec('pd_n_unlock','plan_dostaw') ?}
   ||
      exec('pd_n_unlock','plan_dostaw')
   ?}
||
   exec('pd_n_unlock','plan_dostaw')
?};

_result


\pd_tvp_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Usuwa pozycje wersji
::   WE: _a - wersja
::       _b - plan dostaw
::       _c - pozycja planu dostaw
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ver:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_pd_n:={? var_pres('_b')=type_of(null()) || _b || null() ?};
_pd_p:={? var_pres('_c')=type_of(null()) || _c || null() ?};

PD_TVP.cntx_psh();
PD_TVP.index('UNIK');
{? _ver & _pd_n & _pd_p
||
   PD_TVP.prefix(_ver,_pd_n,PD_T2.PD_P);
   {? PD_TVP.first() || PD_TVP.del() ?}
||
   PD_TVP.prefix(_ver,_pd_n);
   {? PD_TVP.first() || {! |? PD_TVP.del() !} ?}
?};
PD_TVP.cntx_pop()


\pd_n_lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: r_lock PD_N
::   WE: [_a] - 0-bez komunikatow, 1-z komunikatami
::  OLD: \pd_n_lock/pd_n.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};

{? exec('lock','#record','PD_N','SES_ID',PD_N.ref,_a)
|| PD_N.get()
?}


\pd_n_unlock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: r_unlock na PD_N
::  OLD: \pd_n_unlock/pd_n.fml
::----------------------------------------------------------------------------------------------------------------------
exec('unlock','#record','PD_N','SES_ID',PD_N.ref)


\pd_p_lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: r_lock PD_P
::   WE: [_a] - 0-bez komunikatow, 1-z komunikatami
::  OLD: \pd_p_lock/pd_p.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};

{? exec('lock','#record','PD_P','SES_ID',PD_P.ref,_a)
|| PD_P.get()
?}


\pd_p_unlock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: r_unlock na PD_P
::  OLD: \pd_p_unlock/pd_p.fml
::----------------------------------------------------------------------------------------------------------------------
exec('unlock','#record','PD_P','SES_ID',PD_P.ref)


\pd_p_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: dodaje PD_P na podstawie bufora M
::  OLD: \pd_p_add/pd_p.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_h')<>type_of(null()) || _h:=null() ?};
PD_P.blank();
PD_P.PD_N:=_a;
PD_P.MGR:=_b;
PD_P.MGRP:=_c;
PD_P.MGAT:=_d;
PD_P.MODM:=_e;
PD_P.M:=_f;
PD_P.JM:=_g;
PD_P.KH:=_h;
PD_P.add(1)


\pd_p_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: PD_P.del
::   WE: _a - 0-bez komunikatow, 1-z komunikatami, 2-z komunikatami root
::   WY: PD_P.del(1,1)
::  OLD: \pd_p_del/pd_p.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;

_sect:=PD_P.M().KTM;

{? exec('pd_p_lock','plan_dostaw',0)
||
:: formuly planu dostaw
   PD_D_USE.cntx_psh();
   PD_D_USE.index('PD_D_USE');
   PD_D_USE.prefix(PD_N.ref(),PD_P.ref());
   {? PD_D_USE.first() || {! |? PD_D_USE.del() !} ?};
   PD_D_USE.cntx_pop();
:: usuwa zapisy powiązane
   exec('pd_pow_del','plan_dostaw',PD_P.PD_N,PD_P.ref,'','',~~);
:: usuwa pozycje migawki
   PD_TV.cntx_psh();
   PD_TV.index('PDNTNR');
   PD_TV.prefix(PD_N.ref());
   _loop:=PD_TV.first();
   {!
   |? _loop
   |!
      exec('pda_ver_del_data','plan_dostaw',PD_TV.ref(),PD_P.ref());
      _loop:=PD_TV.next()
   !};
   PD_TV.cntx_pop();
   _wyn:=PD_P.del(1,1);
   {? _wyn=0
   || {? _a
      ||
         __kom_on:=1;
         {? _a=1 || __kom.sect_beg(_sect,,,1) || __kom.set_root(_sect,,,1) ?};
         __kom.add('Nie powiodło się usunięcie pozycji planu.'@,7,,1)
      ?}
   ?}
|| {? _a
   || __kom_on:=1;
      {? _a=1 || __kom.sect_beg(_sect,,,1) || __kom.set_root(_sect,,,1) ?};
      __kom.add('Pozycja planu zablokowana przez innego użytkownika. Usunięcie niedostępne.'@,7,,1);
      __kom.sect_end()
   ?}
?};

_wyn


\pd_k_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: PD_K.del
::   WE: _a - 0-bez komunikatow, 1-z komunikatami
::   WY: PD_K.del(0,1)
::  OLD: \pd_k_del/pd_k.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;

_sect:=$PD_K.ID;
_sectadd:=1;

{? PD_K.CZY_ZAM='T'
|| {? _a
   || __kom_on:=1;
      __kom.sect_beg(_sect,,,1);
      __kom.add('Pozycja koszyka powiązana z pozycją zamówienia. Usunięcie niedostępne.'@,7,,1);
      __kom.sect_end()
   ?}
|? PD_K.CZY_ZL<>'N'
|| {? _a
   || __kom_on:=1;
      __kom.sect_beg(_sect,,,1);
      __kom.add('Pozycja koszyka powiązana ze zleceniem. Usunięcie niedostępne.'@,7,,1);
      __kom.sect_end()
   ?}
|? exec('pd_k_lock','plan_dostaw',0)
|| _wyn:=1;
   PD_K_DD.cntx_psh();
   PD_K_DD.index('PD_K_DD');
   PD_K_DD.prefix(PD_K.ref());
   _loop:=PD_K_DD.first();
   {!
   |? _loop
   |!
      ZK_P.cntx_psh(); ZK_N.cntx_psh();
      ZK_P.use(8+PD_K_DD.ZK_P);
      ZK_P.prefix();
      {? ZK_P.seek(PD_K_DD.ZK_P)
      ||
         {? (#ZK_P.N)>0 & ZK_N.r_lock(1,1,1,#ZK_P.N,ref_name(ZK_P.N))
         ||
            ZK_P.ZD_POZ:='';
            ZK_P.put();
            ZK_N.prefix();
            {? ZK_N.seek(ZK_P.N) || ZK_N.r_unlock() ?}
         || {? _sectadd || __kom.sect_beg(_sect,,,1); _sectadd:=0 ?};
            __kom.add('Nie powiodło się usunięcie informacji o dostawie dedykowanej.'@,7,,1);
            _wyn:=0
         ?}
      ?};
      ZK_P.cntx_pop(); ZK_N.cntx_pop();
      _loop:=_wyn & PD_K_DD.del()
   !};
   PD_K_DD.cntx_pop();
   {? _wyn || _wyn:=PD_K.del(1,1) ?};
   {? _wyn=0
   || {? _sectadd || __kom.sect_beg(_sect,,,1); _sectadd:=0 ?};
      __kom.add('Nie powiodło się usunięcie pozycji koszyka.'@,7,,1)
   ?}
|| {? _a
   || __kom_on:=1;
      {? _sectadd || __kom.sect_beg(_sect,,,1); _sectadd:=0 ?};
      __kom.add('Pozycja koszyka zablokowana przez innego użytkownika. Usunięcie niedostępne.'@,7,,1);
      __kom.sect_end()
   ?}
?};

_wyn


\open_pdn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: aktualizacja tabeli __openpdn
::   WE: _a - ref SQL PD_N-a
::       _b - 1 dołączenie 1 rekordu 2-usuniecie lub zamkniecie
::----------------------------------------------------------------------------------------------------------------------
__openpdn.cntx_psh();
{? _b=1
|| _num:=0;
   __openpdn.clear();
   {? __openpdn.first() || {! |? {? __openpdn.NUM>_num || _num:=__openpdn.NUM ?}; __openpdn.next() !} ?};
   __openpdn.REF:=_a;
   __openpdn.NUM:=_num+1;
   __openpdn.add(1)
|| _num:=0;
   __openpdn.clear();
   __openpdn.prefix(_a,);
   {? __openpdn.first()
   || _num:=__openpdn.NUM;
      __openpdn.del()
   ?};
   __openpdn.clear();
   {? _num & __openpdn.first()
   || {!
      |? {? __openpdn.NUM>_num
         || __openpdn.NUM-=1;
            __openpdn.put(1)
         ?};
         __openpdn.next()
      !}
   ?}
?};
__openpdn.cntx_pop();
~~


\autil_date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: wyznaczenie daty wg zadanych parametrów
::   WE: _a - data
::       _b - ilość dni dostawy
::       _c - przesunięcie daty
::   WY: data dostawy
::----------------------------------------------------------------------------------------------------------------------
_date:=_a;
_ildni:=_b;
_shift:={? var_pres('_c')=type_of(0) || _c || exec('autil_date_shift','plan_dostaw') ?};
_date-=_ildni;
_today:=date();
:: data nie może być wcześniejsza od dzisiejszej daty
_date:={? _date<_today || _today || _date ?};
{? _shift
||
   {!
   |? exec('spr_kal','faktury_plat',_date,0)>0
   |!
      {? _date=_today
      ||
:: jeśli data jest dzisiejsza to szukamy pierwszego dnia pracującego w przyszłości
         _shift:=1
      ?};
      _date+=_shift
   !}
?};
_date


\autil_date_shift
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: wyznaczenie daty wg zadanych parametrów
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_p100705:=exec('get','#params',100705);
{? _p100705='Wyznacz datę przed dniem wolnym' || -1
|? _p100705='Wyznacz datę po dniu wolnym' || 1
|| 0
?}

:Sign Version 2.0 jowisz:1045 2024/01/16 11:07:40 c1dd6c1c13cfef0b0b5025f638738a58b3e6388c6b6a23831f763fdc26dce06c6812fcca2aea2625ffa400a8095abb45da80daa0a3fa3f669f1350d7aed975f17f5a2fe8c1181ccc69bde3d3d65ccffbbf0cdc821d3b01009e2eb4aee04b9d292b2f8adbc8c57bc2bf59a72395266705294a45d64fa4de09891ec0a94f402125
