:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: phr_widok.fml
:: Utworzony: 15.03.2017
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły dla obsługi widoków danych w dziedzinach POC, PSZ, PRE, PBA.
::======================================================================================================================


\zz_pom_psh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Zachowuje kontekst zmiennej strukturalnej ZZ_POM i ustala wartość zmiennej ZZ_POM.CZYNNOSC jako kod czynności
::       właściwy dla miejsca wywołania. Zmienna ta jest wykorzystywana w mechanizmach wspólnych (m.in. do obsługi
::       pozycji menu Właściwości).
::       Wykorzystywana w akcjach "okienko przed" oraz formułach "przed obsługą" w oknach grupowych.
::   WE: [_a] [STRING] - kod czynności, dopuszczalny pusty ciąg znaków lub brak
::       [_b] [STRING] - kod miejsca wykorzystania kreatorów, dopuszczalny pusty ciąg znaków, pominięcie pozostawia
::          wartość zmiennej ZZ_POM.KREATORY bez zmian
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZZ_POM.cntx_psh();

: ustal kod czynności
{? var_pres('_a')<>type_of('') | |_a=''
|| ZZ_POM.CZYNNOSC:=''
|? exec('ref','#b_action',_a)=null
|| FUN.emsg('Nie znaleziono czynności o kodzie %1.'@[_a])
|| ZZ_POM.CZYNNOSC:=_a
?};

: wykorzystanie kreatorów
{? var_pres('_b')=type_of('')
|| ZZ_POM.KREATORY:=_b
?};

1


\zz_pom_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Odtwarza kontekst zmiennej strukturalnej ZZ_POM.
::       Wykorzystywana w akcjach "okienko po" oraz formułach "po obsłudze" w oknach grupowych.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZZ_POM.cntx_pop();
1


\metodyka_ukryj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Ukrywa akcję "Metodyka" w okienkach.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
cur_tab(1,1).actions(cur_win(1,1),'M:M',,1);
~~


\menu_wlasciwosci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła dla wskazanej tabeli i okna tworzy menu Właściwości.
::       Uwaga: poprawność parametrów wywołania NIE jest weryfikowana.
::   WE:  _a  [TABLE]  - Uchwyt tabeli.
::        _b  [STRING] - Akronim okna wertowania.
::       [_c] [STRING] - Napis składający się z liter identyfikujących akcje do wyłączenia (ZASPI).
::                       Domyślnie wszystkie akcje są prezentowane.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_ws:=_b;
_pomin:={? var_pres('_c')=type_of('') || _c || '' ?};

_ab:="exec('dokument_b','phr_widok')";
_TAB.win_act(_ws,,'Menu','Właściwośc&i'@@,,,,,,,,,'I');
{? _pomin*'Z'=0
|| _TAB.win_act(_ws,,'Formuła','Załączniki'@@,'#I','Udostępnia załączniki do zapisu'@,
      _ab,"exec('zalaczniki_a','phr_widok')",,,,,'Z'
   )
?};
{? _pomin*'A'=0
|| _TAB.win_act(_ws,,'Formuła','Adnotacja'@@,'#I','Udostępnia opis bieżącego zapisu'@,
      _ab,"exec('adnotacja_a','phr_widok')",,,,,'A'
   )
?};
{? _pomin*'S'=0
|| _TAB.win_act(_ws,,'Formuła','Szczegóły'@@,'#I','Wyświetla dodatkowe informacje'@,
      _ab,"exec('szczegoly_a','phr_widok')",,,,,'S'
   )
?};
{? _pomin*'P'=0
|| _TAB.win_act(_ws,,'Formuła','Powiązania'@@,'#I','Przeglądanie perspektyw danych'@,
      _ab,"exec('powiazania_a','phr_widok')",,,,,'P'
   )
?};
{? _pomin*'I'=0
|| _TAB.win_act(_ws,,'Formuła','Ikona'@@,'#I','Zmiana indywidualnej ikony zapisu'@,
      ,"exec('ikona_a','phr_widok')",,,,,'I'
   )
?};
~~


\zz_xxx_usun_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Przed grupowym wywołaniem "Usuń".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
ZZ_POM.USUN_G:=0;
exec('del_conf','#table',cur_tab(1,1))


\zz_xxx_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Przed "Usuń" okienek wertowania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

{? _TAB.sel_size()=0
|| exec('del_conf','#table',_TAB)
|| 1
?}


\zz_xxx_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Po "Usuń" okienek wertowania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_msg:=no_msg(1);
_TAB:=cur_tab(1,1);
{? ~_TAB.del(,1)
|| {? _TAB.sel_size()
   || ZZ_POM.USUN_G+=1
   || exec('del_warn','#table')
   ?}

?};
no_msg(_msg)


\zz_xxx_usun_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Po grupowym wywołaniu "Usuń".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZZ_POM.USUN_G
|| FUN.emsg('Usunięcie wszystkich zaznaczonych wierszy nie było możliwe.'@)
?}


\dokument_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Przed akcjami menu "Właściwości".
::   WE: [_a] [TABLE] - alias tabeli, jeśli pominięty przyjęta zostanie tabela aktualnie przeglądana
::   WY: 0 - zapis nie jest dokumentem,
::       1 - bieżący wiersz jest dokumentem
::----------------------------------------------------------------------------------------------------------------------
_TAB:={? var_pres('_a')<>type_of(SYSLOG) || cur_tab(1,1) || _a ?};

{? exec('has_dok','phr_tab',_TAB) & _TAB.ZZ_DOK
|| _TAB.ZZ_DOK()
?}


\zalaczniki_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Udostępnia załączniki do dokumentu kadrowego.
::       Należy pamiętać o ustawieniu odpowiedniego kodu czynności w oknach grupowych lub przed wywołaniem samodzielnego
::       okna (ustawienie wartości pola ZZ_POM.CZYNNOSC) w przeciwnym wypadku uprawnienia do edycji będą takie, jak dla
::       ostatniego wywołania z miejsca, w którym kod został zapamiętany.
::   WE: [_a] [TABLE] - alias tabeli, jeśli pominięty przyjęta zostanie tabela aktualnie przeglądana
::   WY:
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \show_appendix/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:={? var_pres('_a')<>type_of(SYSLOG) || cur_tab(1,1) || _a ?};

ZZ_POM.DOKZ_LNK:=_TAB.ZZ_DOK;
exec('typzal_root','phr_dane',_TAB);
_title:=($(ZZ_POM.DOKZ_LNK().KLASA+'.comment'))();
_title:=_title+': '+exec('record','#to_string',_TAB.ref());
_swnd:='ZZ_ZAO';
{? ZZ_POM.CZYNNOSC<>''
|| {? exec('chk_role','#b__box',OPERATOR.USER,ZZ_POM.CZYNNOSC)
   || _swnd:='ZZ_ZAL'
   ?}
?};

UD_TYP.cntx_psh();
UD_SCH.cntx_psh();
UD_SKL.cntx_psh();
UD_DEF.cntx_psh();

UD_DEF.index('OPIS');
UD_DEF.prefix(exec('szukaj_ud_sch','schemat','TYPZAL',2-!_TAB));
UD_DEF.win_sel('ZZ_SEL');
UD_DEF.hdr_sel();
UD_DEF.hdr_sel('Typ załączników'@);
UD_DEF.win_sel(_swnd);
UD_DEF.hdr_sel();
UD_DEF.hdr_sel(_title);
UD_DEF.select();

UD_DEF.cntx_pop();
UD_SKL.cntx_pop();
UD_SCH.cntx_pop();
UD_TYP.cntx_pop();
~~


\za_wartosci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Obsługa akcji "Wartości" okienek tabel ZA_ZEST, ZA_TEST, ZF_SKL.
::   WE:  _a  [TABLE]     - Alias do tabeli właściciela.
::        _b  [STRING]    - Kod metody oceny.
::        _c  [REFERENCE] - Wskazanie na właściciela zapisów.
::       [_d] [STRING]    - Akcje do ukrycia w menu.
::  OLD: \za_wartosci/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_hid:={? var_pres('_d')=type_of('') || _d || '' ?};

{? _a=ZA_ZEST
|| _kod:=ZA_ZEST.SLO_KOD().KOD
|? _a=ZA_TEST
|| _kod:=ZA_TEST.ZA_ZEST().SLO_KOD().KOD
|| _kod:=''
?};

{? _b='KW'
|| _bl_link:=ZZ_KOMPK.fld_fml('ZZ_LINK','BLANK',$(!_a+'.ZZ_DOK'));
   _bl_komp:=ZZ_KOMPK.fld_fml('ZZ_KOMP','BLANK',"null()");

   ZZ_KOMPK.cntx_psh();
   ZZ_KOMPK.f_clear();
   ZZ_KOMPK.index('WARTOSC');
   ZZ_KOMPK.prefix(ref_name(_c),_c,null());
   _wnd:='CFG';
   ZZ_KOMPK.actions(_wnd,_hid);
   ZZ_KOMPK.win_sel(_wnd);
   ZZ_KOMPK.select(,,,{? _kod='U' | _kod='Z' || 'DPUZW' || '' ?});
   ZZ_KOMPK.actions(_wnd);
   ZZ_KOMPK.cntx_pop();

   ZZ_KOMPK.fld_fml('ZZ_LINK','BLANK',_bl_link);
   ZZ_KOMPK.fld_fml('ZZ_KOMP','BLANK',_bl_komp)

|? _b='SP'
|| _bl_link:=ZZ_KOMPS.fld_fml('ZZ_LINK','BLANK',$(!_a+'.ZZ_DOK'));
   _bl_komp:=ZZ_KOMPS.fld_fml('ZZ_KOMP','BLANK',"null()");

   ZZ_KOMPS.cntx_psh();
   ZZ_KOMPS.f_clear();
   ZZ_KOMPS.index('WARTOSC');
   ZZ_KOMPS.prefix(ref_name(_c),_c,null());
   _wnd:='CFG';
   ZZ_KOMPS.actions(_wnd,_hid);
   ZZ_KOMPS.win_sel(_wnd);
   ZZ_KOMPS.select(,,,{? _kod='U' | _kod='Z' || 'DPUZW' || '' ?});
   ZZ_KOMPS.actions(_wnd);
   ZZ_KOMPS.cntx_pop();

   ZZ_KOMPS.fld_fml('ZZ_LINK','BLANK',_bl_link);
   ZZ_KOMPS.fld_fml('ZZ_KOMP','BLANK',_bl_komp)

|? _b='WB'
|| _bl_link:=ZZ_KOMPZ.fld_fml('ZZ_LINK','BLANK',$(!_a+'.ZZ_DOK'));
   _bl_komp:=ZZ_KOMPZ.fld_fml('ZZ_KOMP','BLANK',"null()");

   exec('zz_komzb_fill','phr_widok',_c,null());
   _wnd:=__WND.SEL.get(ZZ_KOMZB,'CFG');
   ZZ_KOMZB.actions(_wnd,_hid);
   ZZ_KOMZB.win_sel(_wnd);
   ZZ_KOMZB.select(,,,{? _kod='U' | _kod='Z' || 'DPUZW' || '' ?});
   ZZ_KOMZB.actions(_wnd);

   ZZ_KOMPZ.fld_fml('ZZ_LINK','BLANK',_bl_link);
   ZZ_KOMPZ.fld_fml('ZZ_KOMP','BLANK',_bl_komp)
?}


\ud_def_zz_sel_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: "Okienko przed" okna ZZ_SEL tabeli UD_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('setup_icon','phr_widok','OPIS',,1);
1


\ud_def_zz_zal_bf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Przed wypełnieniem okna ZZ_SEL tabeli UD_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOKZ.cntx_psh();
ZZ_DOKZ.index('CZAS')


\ud_def_zz_zal_oc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Przy zamykaniu okna ZZ_SEL tabeli UD_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOKZ.cntx_pop();
1


\ud_def_zal_sel_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Po odświeżeniu okna ZZ_SEL tabeli UD_DEF w oknie grupowym ZZ_ZAL tabeli UD_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
grp_disp(ZZ_DOKZ,'WER',1)


\ud_def_zao_sel_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Po odświeżeniu okna ZZ_SEL tabeli UD_DEF w oknie grupowym ZZ_ZAO tabeli UD_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
grp_disp(ZZ_DOKZ,'WEO',1)


\ud_def_zal_wer_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Przed obsługą okna WER tabeli ZZ_DOKZ w oknie grupowym ZZ_ZAL tabeli UD_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOKZ.prefix(ref_name(ZZ_POM.DOKZ_LNK),ZZ_POM.DOKZ_LNK,UD_DEF.UD_SKL().SYMBOL)


\zz_dokz_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Przed "Dołącz" okienka WER tabeli ZZ_DOKZ.
::   WE:
::   WY:
::  OLD: \zz_dokz_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOKZ.blank(1);
ZZ_DOKZ.ZZ_LINK:=ZZ_POM.DOKZ_LNK;
ZZ_DOKZ.UD_SKL:=UD_DEF.UD_SKL;
ZZ_DOKZ.add()


\zz_dokz_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Po "Dołącz" okienka WER tabeli ZZ_DOKZ.
::   WE:
::   WY:
::  OLD: \zz_dokz_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOKZ.win_edit('RED');
ZZ_DOKZ.bl_file('PLIK',1);
{? ZZ_DOKZ.edit("exec('zz_dokz_ae','phr_widok',1)") & ZZ_DOK.put()
|| {? (_file:=ZZ_DOKZ.bl_file('PLIK'))<>''
   || ZZ_DOKZ.bl_put('PLIK',_file)
   || ZZ_DOKZ.del();
      FUN.info('Nie wskazano dokumentu.\nZmiany zostały anulowane.'@)
   ?}
|| ZZ_DOKZ.del()
?};
ZZ_DOKZ.bl_file('PLIK',1)


\zz_dokz_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Przed "Popraw" okienka WER tabeli ZZ_DOKZ.
::   WE:
::   WY:
::  OLD: \zz_dokz_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOKZ.get()


\zz_dokz_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Po "Popraw" okienka WER tabeli ZZ_DOKZ.
::   WE:
::   WY:
::  OLD: \zz_dokz_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOKZ.win_edit('RED');
ZZ_DOKZ.bl_file('PLIK',1);
{? ZZ_DOKZ.edit("exec('zz_dokz_ae','phr_widok',1)") & ZZ_DOK.put()
|| {? (_file:=ZZ_DOKZ.bl_file('PLIK'))<>''
   || ZZ_DOKZ.bl_put('PLIK',_file)
::    Zmienił się opis (w ZZ_DOK) - zmieńmy znacznik modyfikacji ZZ_DOKZ.
   || ZZ_DOKZ.put(,1)
   ?}
?};
ZZ_DOKZ.bl_file('PLIK',1)


\zz_dokz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Sprawdza poprawność danych w wierszu tabeli ZZ_DOKZ.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};
_chk:=exec('zz_dokz_chk','phr_zz_tab',_mode);
{? (type_of(_chk)=type_of('') & _chk<>'') | (type_of(_chk)=type_of(0) & ~_chk)
|| return(_chk)
?};
_klasa:=exec('FindAndGet','#table',ZZ_DOK,ZZ_DOKZ.ZZ_LINK,,"KLASA",'');
{? _klasa='BIPNAG'
|| {? exec('att_size','portal_lib',ZZ_DOKZ,'PLIK')<>1
   || 'PLIK'
   |? _limit:=20971520;
::    Na razie przyjmijmy 20MB=20 * 1024 * 1024 = 20 971 520
      _size:=0;
      {? (_fn:=ZZ_DOKZ.bl_file('PLIK'))<>''
      || _fh:=fopen(_fn,'br',0,0,1,1);
         {? _fh.is_open()
         || _size+=fgetsize(_fh);
            _fh.fclose()
         ?};
         {? _mode
         || _size-=ZZ_DOKZ.SIZE
         ?}
      ?};
      ZZ_DOKZ.cntx_psh();
      {? ZZ_DOKZ.first()
      || {!
         |? _size+=ZZ_DOKZ.SIZE;
            ZZ_DOKZ.next()
         !}
      ?};
      ZZ_DOKZ.cntx_pop();
      _size>_limit
   || _form:="form(_a,,,' ')";
      _in:=obj_new('size','limit');
      _in.size:=_size;
      _in.limit:=_limit;
      _sc:=obj_new('size','limit');
      _ss:=obj_new('size','limit');
      {! _lp:=1 .. 2
      |! _sc[_lp]:=exec('B2xB','#convert',_in[_lp]);
         {? _sc[_lp].p=''
         || _ss[_lp]:='%1B' [_form(_in[_lp])]
         || _ss[_lp]:='%1 %2B (%3 B)' [_form(_sc[_lp].r$4),_sc[1].p,_form(_in[_lp])]
         ?}
      !};
      FUN.emsg('Suma rozmiarów załączonych plików [%1]\nprzekracza dopuszczalny limit [%2].'@ [_ss.size,_ss.limit]);
      'PLIK'
   || ''
   ?}
|| ''
?}


\zz_dokz_edytuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Po "Edytuj" okienka WER tabeli ZZ_DOKZ.
::   WE:
::   WY:
:: ~OST: INBLEDIT
::  OLD: \zz_dokz_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('cli_functions','#system')>0
|| ZZ_DOKZ.bl_edit('PLIK')
|| exec('bl_save','#blob',ZZ_DOKZ,'PLIK')
?}


\zz_dokz_wyswietl_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Przed "Wyświetl" okienka WER tabeli ZZ_DOKZ.
::   WE:
::   WY:
::  OLD: \zz_dokz_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
exec('bl_view','#blob',ZZ_DOKZ,'PLIK');
0


\ankiety_ust
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Konfiguruje ankiety
::   WE: _a - alias do tabeli, "podklasy" ZZ_DOK
::----------------------------------------------------------------------------------------------------------------------
: tablica pomocnicza przy edycji ankiet
{? var_pres('ZA_POM')<100
|| ZA_POM:=obj_new('TYP','MIEJSCE','RODZAJ')
?};
_old:=ZA_ZEST.fld_fml('ZZ_LINK','*BLANK');
ZA_ZEST.fld_fml('ZZ_LINK','BLANK',$(!_a+'.ZZ_DOK'));
ZA_POM.MIEJSCE:=#exec('za_typ_ref','phr_tab',0,2-!_a);
{? ~ZA_POM.MIEJSCE
|| ZA_TYP.cntx_psh;
   ZA_TYP.clear;
   ZA_TYP.blank;
   ZA_TYP.ZA_TYP:=0;
   ZA_TYP.SYMBOL:=2-!_a;
   ZA_TYP.OPIS:=_a.comment;
   ZA_TYP.SYSTEM:='T';
   ZA_TYP.add(1);
   ZA_POM.MIEJSCE:=#ZA_TYP.ref;
   ZA_TYP.cntx_pop
?};
_old


\adnotacja_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Po akcji "Adnotacja". Udostępnia do edycji opis dokumentu kadrowego.
::       Należy pamiętać o ustawieniu odpowiedniego kodu czynności w oknach grupowych lub przed wywołaniem samodzielnego
::       okna (ustawienie wartości pola ZZ_POM.CZYNNOSC) w przeciwnym wypadku uprawnienia do edycji będą takie, jak dla
::       ostatniego wywołania z miejsca, w którym kod został zapamiętany.
::   WE:
::   WY:
::  OLD: \show_descr/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZZ_DOK.memo_get(,'NOTA')
|| _tab:=($ZZ_DOK.KLASA)();
   {? _tab=ZO_TEST | _tab=ZO_FORM | _tab=ZO_KOMP | _tab=ZO_NOTA
   || exec('edit_memo_fld','#edit',ZZ_DOK,'NOTA',-1,_tab.comment(),,,,50,10)
   |? ZZ_POM.CZYNNOSC<>'' & exec('chk_role','#b__box',OPERATOR.USER,ZZ_POM.CZYNNOSC)
   || exec('edit_memo_fld','#edit',ZZ_DOK,'NOTA',,_tab.comment(),,,,50,10)
   || exec('edit_memo_fld','#edit',ZZ_DOK,'NOTA',-1,_tab.comment(),,,,50,10)
   ?}
?}


\szczegoly_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyświetla szczegółowe informacje o dokumencie kadrowym.
::   WE: [_a] [TABLE] - alias tabeli, jeśli pominięty przyjęta zostanie tabela aktualnie przeglądana
::   WY:
::  OLD: \show_details/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:={? var_pres('_a')<>type_of(SYSLOG) || cur_tab(1,1) || _a ?};

_tab:=obj_new(2);
_tab[1]:=',DATA,GODZ,AUTOR,TYTUL,';
_tab[2]:=',KLASA,ID,MB_MASK,MB_REF,';

_desc_len:=0;
{! _n:=1..ZZ_DOK.fld_num
|! _acr:=ZZ_DOK.fld_acr(_n);
   _type:=type_of(ZZ_DOK[_n]);
   {? _type>type_of(~~) & _type<type_of(null)
   || _comm_len:=+ZZ_DOK.fld_comm(_n);
      {? _desc_len<_comm_len
      || _desc_len:=_comm_len
      ?}
   ?}
!};

_BUF:=tab_tmp(2,
   'PFX','INTEGER','Rodzaj'@,
   'NUM','INTEGER','Numer'@,
   'TXT','STRING['+$_desc_len+']','Właściwość'@,
   'VAL','STRING[255]','Wartość'@
);

_TAB.ZZ_DOK();
{! _n:=1..ZZ_DOK.fld_num()
|! _acr:=ZZ_DOK.fld_acr(_n);
   _type:=type_of(ZZ_DOK[_n]);
   {? _type>type_of(~~) & _type<type_of(null)
   || _pfx:=0;
      {! _m:=1..obj_len(_tab)
      |? ~_pfx
      |! {? _tab[_m]*(','+_acr+',')
         || _pfx:=_m
         ?}
      !};
      _BUF.PFX:=_pfx;
      _BUF.NUM:=_n;
      _BUF.TXT:=ZZ_DOK.fld_comm(_n);
      _BUF.VAL:=form(ZZ_DOK[_n],,,'99');
      _BUF.add()
   ?}
!};
_rows:=0;
{! _m:=1..obj_len(_tab)
|! _BUF.prefix(_m);
   {? _rows<_BUF.size()
   || _rows:=_BUF.size()
   ?}
!};

_mk_sel:=$("
   _sel:=_a.mk_sel(,'N',0);
   _a.win_fld(_sel,,'TXT',,,"+$_desc_len+");
   _a.win_fld(_sel,,'VAL',,,50);
   _sel
");
_wnd:=_BUF.grp_make('Szczegóły dokumentu'@,,'zz_dok_details',,,,,'normal');
_BUF.grp_sel(_wnd,,_mk_sel(_BUF),'Dokument'@,,,,_rows,"cur_tab(1,1).prefix(1)",,,,'maximized');
_BUF.grp_sel(_wnd,,_mk_sel(_BUF),'Rekord'@,,,,_rows,"cur_tab(1,1).prefix(2)",,,,'maximized');
_BUF.win_sel(_wnd);
_BUF.select()


\powiazania_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Wyswietla informacje o zapisach powiązanych.
::   WE: [_a] [TABLE] - alias tabeli, jeśli pominięty przyjęta zostanie tabela aktualnie przeglądana
::  OLD: \show_links/zz_view.fml
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
_TAB:={? var_pres('_a')<>type_of(SYSLOG) || cur_tab(1,1) || _a ?};

_LINKS:=tab_tmp(2,
   'LINK','TREE_REF','Nadrzędny'@,
   'TEXT','STRING[255]','Nazwa'@,
   'TYPE','STRING[1]','Rodzaj'@,
   'TABLE','STRING[8]','Tabela'@,
   'MASK','STRING[8]','Zbiór'@,
   'REF','INTEGER','Numer rekordu'@,
   'SQL','STRING[16]','Złączenie '@
);

_LINKS.fld_attr('LINK',2);
_LINKS.fld_attr('TYPE',2);
_LINKS.fld_attr('TABLE',2);
_LINKS.fld_attr('MASK',2);
_LINKS.fld_attr('REF',2);

_ws:=_LINKS.mk_sel('Powiązania'@,'P',0,'#links_view',,,,1,'N','N',,);
_LINKS.win_fld(_ws,,'TEXT',,,120);
_LINKS.win_act(_ws,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,
   "exec('zwin_rozwin','#tree')",,,,,,'R',,'target=window'
);
_LINKS.win_act(_ws,,'Wyświetl',,,,
   "  _LINKS:=cur_tab(1,1);
      _we:=_LINKS.win_edit('?');
      _val:=$(_LINKS.TYPE='R');
      _LINKS.efld_opt(_we,'enable=%1' [_val],,'REF');
      _LINKS.efld_opt(_we,'enable=%1' [_val],,'SQL');
      _LINKS.display()
   "
);
_LINKS.win_btn(_ws,'text=%1,icon=%2,panel=bottom,align=end' ['OK'@,exec('ok','#icon')],'key:Esc');
_LINKS.win_sel(_ws);

_we:=_LINKS.mk_edit('Powiązanie'@);
_LINKS.win_esep(_we,'Dane techniczne'@);
_LINKS.win_efld(_we,,'TABLE',,,16);
_LINKS.win_efld(_we,,'MASK',,,16);
_LINKS.win_efld(_we,,'REF',,,16);
_LINKS.win_efld(_we,,'SQL',,,16);
_LINKS.win_edit(_we);

_key:=_LINKS.index('?');
_LINKS.index(_LINKS.ndx_tmp(,,'TYPE',,,'TABLE',,,'MASK',,,'REF',,));
exec('find_links','phr_widok',_TAB,_TAB.ref(),_LINKS,0);
exec('find_links','phr_widok',ZZ_DOK,_TAB.ZZ_DOK,_LINKS,0);
_LINKS.index(_key);

_LINKS.select();

obj_del(_LINKS)


\find_links
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Wyszukuje informacje o powiązanych zapisach.
::   WE: _a [TABLE]     - alias tabeli
::       _b [REFERENCE] - wskazanie rekordu, dla którego szukane będą powiązania
::       _c [TABLE]     - uchwyt tabeli wynikowej
::       _d [NUMBER]    - numer rekordu nadrzędnego
::   WY:
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
_a.cntx_psh();
_a.prefix();
{? ~_a.seek(_b)
|| _a.cntx_pop();
   return()
?};
_LINKS:=_a.testlink();
_loop:=_LINKS.first();
{!
|? _loop
|! {? ~_c.find_key('T',_LINKS.TABELA,_LINKS.MASKA,_d)
   || _c.blank();
      _c.LINK:=_d;
      _c.TEXT:=($_LINKS.TABELA)().comment;
      _c.TYPE:='T';
      _c.TABLE:=_LINKS.TABELA;
      _c.MASK:=_LINKS.MASKA;
      _c.REF:=_d;
      _c.add()
   ?};
   _node:=#_c.ref();
   {? ~_c.find_key('R',_LINKS.TABELA,_LINKS.MASKA,_LINKS.REF)
   || _TAB:=($_LINKS.TABELA)();
      _c.blank();
      _c.LINK:=_node;
      _c.TYPE:='R';
      _c.TABLE:=_LINKS.TABELA;
      _c.MASK:=_LINKS.MASKA;
      _c.REF:=_LINKS.REF;
      _TAB.cntx_psh();
      _TAB.prefix();
      {? _TAB.seek(_LINKS.REF,_LINKS.MASKA)
      || _c.SQL:=$_TAB.ref();
         on_error(3);
         _state:=no_msg(1);
         _text:=exec(_LINKS.TABELA,'#to_string',1);
         {? in_error()
         || {? var_pres('_text')>100
            || obj_del(_text)
            ?};
            _c.TEXT:=$_TAB.ref()
         || _c.TEXT:=_text
         ?};
         on_error(0);
         no_msg(_state)
      || _c.TEXT:='<nie powiodło się ustalenie rekordu>'@
      ?};
      _c.add();
      _TAB.cntx_pop();
      &_TAB
   ?};
   _loop:=_LINKS.next()
!};
_a.cntx_pop()


\ikona_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Po akcji "Ikona" większości okienek tabeli (wykorzystanie wskazania).
::       Należy pamiętać o ustawieniu odpowiedniego kodu czynności w oknach grupowych lub przed wywołaniem samodzielnego
::       okna (ustawienie wartości pola ZZ_POM.CZYNNOSC) w przeciwnym wypadku uprawnienia do edycji będą takie, jak dla
::       ostatniego wywołania z miejsca, w którym kod został zapamiętany.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_enable:=(ZZ_POM.CZYNNOSC<>'' & exec('chk_role','#b__box',OPERATOR.USER,ZZ_POM.CZYNNOSC));
exec('change_icon','phr_widok',cur_tab(1,1),'ref',$cur_tab(1,1).ref(),_enable)


\change_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zmienia ikonę.
::   WE: _a - akronim / alias tabeli
::       _b - akronim pola
::       _c - wartość klucza
::       _d - możliwy wybór ikony 1, wpp ikona nie może być wybrana
::  OLD: \change_icon/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
: dopuszczalny tylko alias lub napis
{? var_pres('_a')=type_of(SYSLOG)
|| _tab:=2-!_a
|? var_pres('_a')=type_of('') & |_a<>''
|| _tab:=_a
|| return()
?};

: dopuszczalny tylko napis
{? var_pres('_b')=type_of('') & |_b<>''
|| _fld:=_b
|| return()
?};

: dopuszczalne typy proste i złączenie
{? var_pres('_c')>=1 & var_pres('_c')<=7
|| _key:={? type_of(_c)<>type_of('') || $_c || _c ?}
|| return()
?};

_mod:={? var_pres('_d')=type_of(0) || _d || 1 ?};
_cur:=exec('find_icon','phr_widok',_tab,_fld,_key);
_new:=exec('choose_icon','phr_widok',_cur,_mod);

{? _mod
|| {? ~_cur & _new
   || ZZ_WIKON.TABELA:=_tab;
      ZZ_WIKON.POLE:=_fld;
      ZZ_WIKON.KLUCZ:=_key;
      ZZ_WIKON.NUMER:=_new;
      ZZ_WIKON.add()
   |? _cur & _new
   || ZZ_WIKON.NUMER:=_new;
      ZZ_WIKON.put()
   |? (_cur & ~_new)
   || {? FUN.ask('Czy usunąć przypisaną ikonę?'@)
      || ZZ_WIKON.del()
      ?}
   ?}
?}


\find_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje ikonę.
::   WE: _a - akronim tabeli
::       _b - akronim pola
::       _c - wartość klucza
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \find_icon/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_WIKON.index('UNIQUE');
ZZ_WIKON.prefix(_a,_b);
{? ZZ_WIKON.find_key(_c,_c)
|| ZZ_WIKON.NUMER
?}


\choose_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Umożliwia wybór ikony.
::   WE: _a - opcjonalny numer domyślny
::       _b - możliwy wybór ikony 1, wpp ikona nie może być wybrana
::   WY: indeks ikony z pliku xwin16.png lub 0 jeśli zrezygnowano z wyboru.
::----------------------------------------------------------------------------------------------------------------------
_BUF:=tab_tmp(1,'NUMER','INTEGER','Ikona');
{! _n:=1..167
|! _BUF.NUMER:=_n;
   _BUF.add()
!};

_red:=_BUF.mk_edit('Ikona'@,1);
exec('ok_esc','#window',_BUF,_red);
_BUF.win_edit(_red);
_wnd:=_BUF.mk_sel('Ikony'@,'T',1,'zz_icon_chooser',,,20);
{? {? var_pres('_b')=type_of(0) || _b || 1 ?}
|| _BUF.win_act(_wnd,0,'Formuła','Wybierz'@,,,"sel_exit",,1)
?};
_BUF.win_sopt(_wnd,'select_record_checkbox=0');
_BUF.win_act(_wnd,0,'Szukaj');
_BUF.win_act(_wnd,0,'Kolejność');
_BUF.win_fml(_wnd,,'NUMER',,'ICON_BEFORE',"'xwin16.png:'+$cur_tab(1,1).NUMER");
_BUF.win_sel(_wnd);

{? var_pres('_a')=type_of(0) & _a
|| _BUF.find_key(_a)
|| _BUF.first()
?};

{? _BUF.select(,1)
|| _BUF.NUMER
?}


\copy_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje ikonę.
::   WE: _a - akronim tabeli
::       _b - akronim pola
::       _c - wartość klucza
::       _d - nowa wartość klucza
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \copy_icon/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_numer:=exec('find_icon','phr_widok',_a,_b,_c);
{? exec('find_icon','phr_widok',_a,_b,_d)
|| {? _numer
   || ZZ_WIKON.NUMER:=_numer;
      ZZ_WIKON.put()
   || ZZ_WIKON.del()
   ?}
|? _numer
|| ZZ_WIKON.KLUCZ:=_d;
   ZZ_WIKON.NUMER:=_numer;
   ZZ_WIKON.add()
?}


\setup_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Ustawia formułę "ikona przed" dla pola w bieżącym okienku aktualnie przeglądanej tabeli.
::       Wykorzystywana głównie przez akcje "okienko przed".
::   WE: _a [STRING] - akronim wyświetlanego pola
::       [_b] [STRING] - akronim pola w złączeniu
::       [_c] [INTEGER] - obsługa kontrolki drzewiastej [0*/1]
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
_join:={? var_pres('_b')=type_of('') & _b<>'' || _b || '' ?};
cur_tab(1,1).win_fml(cur_win(1,1),,_a,_join,'ICON_BEFORE',
   {? var_pres('_c')=type_of(0) & _c
   || "exec('zz_tree_icon','phr_widok',cur_tab(1,1))"
   |? _join=''
   || "exec('zz_dok_icon','phr_widok',cur_tab(1,1))"
   || $("{? (_fld:=cur_tab(1,1)."+_a+") || exec('zz_dok_icon','phr_widok',ref_tab(_fld),_fld) || '' ?}")
   ?}
)


\zz_dok_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca nazwę ikony właściwą dla rekordu. Wykorzystywana jako formula "przed ikoną".
::   WE: _a - alias tabeli
::       _b - wskazanie rekordu (opcjonalnie)
::   WY: ciąg znaków określający ikonę
::  OLD: \zz_dok_icon/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=${? var_pres('_b')=type_of(null) || _b || _a.ref() ?};
_icon:=exec('find_icon','phr_widok',2-!_a,'ref',_ref);
'xwin16.png:'+${? _icon || _icon || 110 ?}


\zz_tree_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca nazwę ikony właściwą dla rekordu. Wykorzystywana jako formula "przed ikoną".
::       Ostrożnie w wykorzystaniem ze względu na użycie tr_state.
::   WE: _a - alias tabeli
::       _b - wskazanie rekordu (opcjonalne)
::   WY: ciąg znaków określający ikonę
::  OLD: \zz_tree_icon/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_b')=type_of(null) | var_pres('_b')=type_of(0) || _b || _a.ref() ?};
{? ~(_icon:=exec('zz_dok_ii','phr_widok',_a,_ref))
|| _icon:=exec('zz_tree_ii','phr_widok')
?};
'xwin16.png:'+$_icon


\zz_dok_ii
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca numer ikony właściwy dla zapisu.
::   WE: _a - alias tabeli
::       _b - (opcjonalny) wskazanie rekordu
::   WY: indeks ikony
::  OLD: \zz_dok_ii/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=
   {? var_pres('_b')=type_of(null) || $_b
   |? var_pres('_b')=type_of(0) || form(_a.name,8)+((8*'0'+-BIT.hex(_b))+8)
   || $_a.ref()
   ?};
exec('find_icon','phr_widok',2-!_a,'ref',_ref)


\zz_tree_ii
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca numer ikony właściwy dla zapisu.
::       Ostrożnie w wykorzystaniem ze względu na użycie tr_state.
::   WY: indeks ikony
::  OLD: \zz_tree_ii/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=cur_tab(1,1);
_tab.cntx_psh();
_pfx:=_tab.cur_prfx();
_pfx+={? _pfx<>'' || ',' || '' ?}+$#_tab.ref();
($('_a.prefix('+_pfx+')'))(_tab);
_leaf:=~_tab.first();
_tab.cntx_pop();

{? _leaf || 76
|? _tab.tr_state=1 || 75
|| 74
?}


\lock_columns
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Blokuje możliwość dodawania kolumn do okienka.
::   WE: _a - alias tabeli
::  OLD: \lock_columns/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_a.fld_attr(,2)


\del_dropped
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Funkcja wywoływana po upuszczeniu rekordów. Funkcjonalnie odpowiada usunięciu upuszczonych rekordów.
::   WE: _a - alias tabeli, z której mają być usuwane rekordy
::       _b - alias tabeli tymczasowej przechowującej informacje o upuszczanych rekordach
::  OLD: \del_dropped/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(SYSLOG) & var_pres('_b')=type_of(SYSLOG) & _b.first()
|| {!
   |? {? _a.seek(_b.REF,)
      || _a.del()
      ?};
      _b.next()
   !}
?}


\zz_komzb_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wypełnia tabelę prezentujacą wartości bezpośrednie kompetencji.
::   WE: _a - wskazanie na właściciela
::       _b - wskazanie na kompetencję
::  OLD: \zz_komzb_fill/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_KOMZB.erase();
ZZ_KOMPZ.index('UNIQUE');
ZZ_KOMPZ.prefix(ref_name(_a),_a,_b);
{? ZZ_KOMPZ.first()
|| _ins:=exec('insert','phr_tab',ZZ_KOMZB,1);
   _ins(1,'Wartość minimalna'@,ZZ_KOMPZ.ref(),'MIN',ZZ_KOMPZ.MIN);
   _ins(2,'Wartość maksymalna'@,ZZ_KOMPZ.ref(),'MAKS',ZZ_KOMPZ.MAKS);
   _ins(3,'Wartość oczekiwana'@,ZZ_KOMPZ.ref(),'POZIOM',ZZ_KOMPZ.POZIOM);
   ZZ_KOMZB.first()
?}


\zz_typ_fset
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Ustawia filtr dla tabeli ZZ_TYP wykorzystywanej jako slownik. Ograniczenie do modulu z pominieciem typu OP.
::   WE:
::   WY:
::  OLD: \zz_typ_fset/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_TYP.clear();
ZZ_TYP.f_clear();
ZZ_TYP.f_set('KOD',,'TYP=\':_a\' and KOD<>\':_b\'',ZZ_POM.MODUL,'OP')


\zz_prof_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZZ_PROF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('setup_icon','phr_widok','NAZWA');

_wnd:='RED_R';
{? cur_win(1,1)='CFG_O'
|| _wnd:='RED_O'
?};
ZZ_PROF.win_edit(_wnd);

1


\zz_prof_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZZ_PROF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\zz_prof_wybierz_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła tworzy tablicę elementów nazwanych z parametrami wymaganymi przez formułę
::       \zz_prof_wybierz/phr_widok.fml.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('obj_ntab_set','#array',,
:: Czy w oknie umieszczać pola związane z metodyką? [1/0]
   'ZZ_HIST',0,
:: Możliwy wybór wielu rekordów? [1/0]
   'WIELU',1,
:: Tutuł okna
   'HDR_SEL','Profile ocen'@,
:: Identyfikator okienka wertowania
   'SEL_IDENT','zz_prof_wyb'
)


\zz_prof_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła pozwalająca na wybór grupy rekordów z tabeli ZZ_PROF. Dziedzina tabeli musi być ustawiona przed
::       wywołaniem.
::   WE: _a [ARRAY] - Tablica z parametrami (patrz \zz_prof_wybierz/phr_widok.fml).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ZZ_PROF:=tab_tmp(1,
:: Liczba porządkowa odzwierciedla kolejność w oknie.
   'LP','INTEGER','Lp.',
:: Wybrany profil - różne sposoby identyfikacji.
   'SQL','STRING[16]','$ZZ_PROF.ref()',
   'UID','STRING[48]','ZZ_PROF.uidref()',
   'REF','INTEGER','#ZZ_PROF.ref()',
:: Suma kontrolna rekordu.
   'CRC','INTEGER','ZZ_PROF.crc()'
);

{? _<1 | ~obj_ntab(_a)
|| FUN.error('Nieprawidłowy sposób wywołania formuły %1.'@ ['\\zz_prof_wybierz/phr_widok.fml']);
   return(_ZZ_PROF)
?};

_args:=_a;

_id:=_args.SEL_IDENT+%(96+2*(_args.ZZ_HIST<>0)+4*(_args.WIELU<>0));

_ws:=ZZ_PROF.mk_sel(_args.HDR_SEL,'P',,_id,,,,,'U');
ZZ_PROF.win_fld(_ws,,'NAZWA',,,30,,,MS.name(ZZ_PROF,'NAZWA'),,MS.comment(ZZ_PROF,'NAZWA'));
{? _args.ZZ_HIST
|| ZZ_PROF.win_fld(_ws,,'ZZ_HIST','DATA',,-10,,1,'Metodyka - data'@,,MS.comment(ZZ_HIST,'DATA'));
   ZZ_PROF.win_fld(_ws,,'ZZ_HIST','OPIS',,30,,1,'Metodyka - opis'@,,MS.comment(ZZ_HIST,'OPIS'))
?};

_ba:=
   "  _ZZ_PROF:=params_get().ZZ_PROF;
      _ZZ_PROF.blank();
      _ZZ_PROF.LP:=_ZZ_PROF.size()+1;
      _ZZ_PROF.SQL:=$ZZ_PROF.ref();
      _ZZ_PROF.UID:=ZZ_PROF.uidref();
      _ZZ_PROF.REF:=ZZ_PROF.ref();
      _ZZ_PROF.CRC:=ZZ_PROF.crc();
      _ZZ_PROF.add()
   ";
{? _args.WIELU
|| ZZ_PROF.win_act(_ws,0,'Formuła','Wybierz'@@,,'Wybór bieżącego zapisu'@,_ba,
      "{? ~ZZ_PROF.sel_size() || sel_exit() ?}",1,1,"sel_nchk()","sel_exit()",'W'
   )
|| ZZ_PROF.win_act(_ws,0,'Formuła','Wybierz'@@,,'Wybór bieżącego zapisu'@,_ba,"sel_exit()",1,,,,'W')
?};

exec('menu_wlasciwosci','phr_widok',ZZ_PROF,_ws);
ZZ_PROF.win_act(_ws,,'Szukaj');
ZZ_PROF.win_act(_ws,,'Kolejność');
{! _empty:=0 .. 1
|! ZZ_PROF.win_act(_ws,_empty,'Okienko',,,,"exec('zz_prof_bo','phr_widok')","exec('zz_prof_ao','phr_widok')")
!};

params_set('ZZ_PROF',_ZZ_PROF);

_wsorg:=ZZ_PROF.win_sel('?');
ZZ_PROF.win_sel(_ws);
ZZ_PROF.select();
ZZ_PROF.win_sel(_wsorg);
ZZ_PROF.win_del(_ws);
_ZZ_PROF


\zz_proft_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Okienko przed okien tabeli ZZ_PROFT.
::   WE:
::   WY: zgodne ze specyfikacją narzędzi.
::----------------------------------------------------------------------------------------------------------------------
exec('setup_icon','phr_widok','ZZ_TYP','NAZWA');
ZZ_PROFT.win_edit('RED');
ZZ_TYP.win_sel('CFG');
1


\zz_proft_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Obsługa akcji "Rekord - przed" w oknach tabeli ZZ_PROFT.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_PROFT.ZZ_TYP().KOD='OP'


\zz_proft_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Po redakcji danych tabeli ZZ_PROFT.
::   WE:
::   WY: zgodne ze specyfikacją narzędzi.
::----------------------------------------------------------------------------------------------------------------------
exec('zz_proft_chk','phr_zz_tab',-menu_txt()='popraw')


\zz_profo_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Okienko przed tabeli ZZ_PROFO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('setup_icon','phr_widok','ZZ_MET','NAZWA');
ZZ_PROFO.win_edit('RED');
ZZ_PROFO.win_patt('WZO');
ZZ_MET.win_dict('SLO');
1


\zz_profo_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: "Okienko po" okienek tabeli ZZ_PROFO.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZZ_MET.f_clear();
1


\zz_profo_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Przed dołączeniem wiersza do tabeli ZZ_PROFO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=2;
_kod:='';
ZZ_PROFO.cntx_psh();
_loop:=ZZ_PROFO.first();
{!
|? _loop
|! {? ZZ_PROFO.ZZ_MET().RODZAJ='S'
   || ZZ_MET.cntx_psh();
      ZZ_MET.index('RODZAJ');
      ZZ_MET.prefix('S');
      _loop:=ZZ_MET.first();
      {!
      |? _loop
      |! _kod+='\''+ZZ_MET.KOD+'\',';
         _loop:=ZZ_MET.next()
      !};
      ZZ_MET.cntx_pop();
      _ret-=1
   || _kod+='\''+ZZ_PROFO.ZZ_MET().KOD+'\',';
      _ret-=1
   ?};
   _loop:=ZZ_PROFO.next()
!};
ZZ_PROFO.cntx_pop();

{? _kod=''
|| ZZ_MET.f_set()
|| ZZ_MET.f_set(,,'KOD not in (:_a)',_kod-1)
?};

_ret


\zz_profo_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Przed poprawieniem wiersza do tabeli ZZ_PROFO.
::   WE:
::   WY: 0/1 - wiersz nie może/może być poprawiony
::----------------------------------------------------------------------------------------------------------------------
{? ZZ_PROFO.ZZ_MET().RODZAJ='S'
|| ZZ_MET.f_set('KOD',,'RODZAJ=\'S\'');
   1
?}


\zz_profo_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Obsługa akcji "Rekord - przed" w oknach tabeli ZZ_PROFO.
::   WE: _a [INTEGER] - zgodny ze specyfikacją systemu
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: przerwij, jeśli rekordy cały czas są odrysowywane
{? ~_a || return() ?};

_aid:='';
{? ZZ_PROFO.size()>1
:  wyłącz dołącz
|| _aid+='D'
?};
{? ZZ_PROFO.ZZ_MET().RODZAJ='O'
:  wyłącz popraw
|| _aid+='P'
?};

ZZ_MET.f_clear();
ZZ_PROFO.actions_grayed(cur_win(1,1),_aid);
~~


\zz_profo_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Obsługa akcji "Rekord - po" w oknach tabeli ZZ_PROFO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_profo_chk','phr_zz_tab',-menu_txt()='popraw')


\zz_kompx_wartosc_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Przed redagowaniem pola WARTOSC w tabelach: ZZ_KOMPS i ZZ_KOMPK.
::   WE: [_a] [TABLE] - alias tabeli
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOK.cntx_psh();
_TAB:=
   {? var_pres('_a')<>type_of(SYSLOG)
   || cur_tab(1,1)
   || _a
   ?};
_klasa:=
   {? _TAB<>ZZ_PROFO
   || {? var_pres('_a')<>type_of(SYSLOG)
      || ($_TAB.ZZ_LINK().KLASA)()
      || ($_TAB.ZZ_DOK().KLASA)()
      ?}
   || ZZ_PROFK
   ?};
ZZ_DOK.cntx_pop();
{? _klasa=ZZ_KOMP
|| ZZ_PAR.WAR_KOMW='T'
|? _klasa=ZZ_KRYT
|| ZZ_PAR.WAR_KRYW='T'
|? _klasa=ZZ_PROFK
|| ZZ_PAR.WAR_PROW='T'
|| _klasa=ZZ_HIST | _klasa=ZA_ZEST | _klasa=ZA_TEST | _klasa=ZF_SKL
?}


\zz_kompx_opis_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Przed redagowaniem pola OPIS w tabelach: ZZ_KOMPS i ZZ_KOMPK.
::   WE: [_a] [TABLE] - alias tabeli
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOK.cntx_psh();
_TAB:=
   {? var_pres('_a')<>type_of(SYSLOG)
   || cur_tab(1,1)
   || _a
   ?};
_klasa:=
   {? _TAB<>ZZ_PROFO
   || {? var_pres('_a')<>type_of(SYSLOG)
      || ($_TAB.ZZ_LINK().KLASA)()
      || ($_TAB.ZZ_DOK().KLASA)()
      ?}
   || ZZ_PROFK
   ?};
ZZ_DOK.cntx_pop();
{? _klasa=ZZ_KOMP
|| ZZ_PAR.WAR_KOMN='T'
|? _klasa=ZZ_KRYT
|| ZZ_PAR.WAR_KRYN='T'
|? _klasa=ZZ_PROFK
|| ZZ_PAR.WAR_PRON='T'
|| _klasa=ZZ_HIST | _klasa=ZA_ZEST | _klasa=ZA_TEST | _klasa=ZF_SKL
?}


\zz_kompx_zrodlo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Ustala dokument kadrowy, z którym powiązane są wartości ocen do skopiowania do bieżącego kontekstu.
::   WE: _a [TABLE] - alias tabeli zawierającej wartości oceny
::   WY: wskazanie dokumentu kadrowego
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('doc','row');
_ret.doc:=_a.fld_fml('ZZ_LINK','*BLANK')();
_ret.row:=null;

_a.cntx_psh();
ZZ_DOK.cntx_psh();
ZZ_DOK.clear();
{? exec('seek_dok','phr_tab',_ret.doc)
|| _TAB:=($ZZ_DOK.KLASA)();
   {? _TAB=ZZ_KOMP
   || ZZ_KOMP.cntx_psh();
      {? exec('ref4dok','phr_tab',ZZ_KOMP,_ret.doc)
      || ZZ_HIST.cntx_psh();
         _ret.doc:=ZZ_KOMP.ZZ_HIST().ZZ_DOK;
         ZZ_HIST.cntx_pop()
      ?};
      ZZ_KOMP.cntx_pop()

   |? _TAB=ZZ_PROFK
   || ZZ_PROFK.cntx_psh();
      {? exec('ref4dok','phr_tab',ZZ_PROFK,_ret.doc)
      || ZZ_KOMP.cntx_psh();
         {? ZZ_PROFK.ZZ_LINK().KLASA='ZZ_PROF'
         || _ret.doc:=ZZ_PROFK.ZZ_KOMP().ZZ_DOK;
            _ret.row:=ZZ_PROFK.ZZ_KOMP
         |? ZZ_PROFK.ZZ_LINK().KLASA='ZZ_KRYT'
         || ZZ_KRYT.cntx_psh();
            {? exec('ref4dok','phr_tab',ZZ_KRYT,ZZ_PROFK.ZZ_LINK)
            || {? ZZ_KRYT.KLASA='ZZ_KRYTS'
               || _RS:=sql(
                     'select ZZ_KRYT.ZZ_DOK as DOC '
                     'from ZZ_KRYTS join ZZ_KRYT using(ZZ_KRYTS.ZZ_KRYT,ZZ_KRYT.REFERENCE) '
                     'where ZZ_KRYTS.REKORD=:_a and ZZ_KRYT.ZZ_LINK=:_b',
                     exec('kryt_val','phr_dane',ZZ_KRYT.ref()),
                     ZZ_PROFK.ZZ_KOMP().ZZ_DOK
                  );
                  {? _RS.first() & exec('seek_dok','phr_tab',_RS.DOC)
                  || _ret.doc:=ZZ_DOK.ref();
                     _ret.row:=ZZ_PROFK.ZZ_KOMP
                  ?}
               || _ret.doc:=ZZ_PROFK.ZZ_KOMP().ZZ_DOK;
                  _ret.row:=ZZ_PROFK.ZZ_KOMP
               ?}
            ?};
            ZZ_KRYT.cntx_pop()
         ?};
         ZZ_KOMP.cntx_pop()
      ?};
      ZZ_PROFK.cntx_pop()

   |? _TAB=ZZ_KRYT
   || ZZ_KRYT.cntx_psh();
      {? exec('ref4dok','phr_tab',ZZ_KRYT,_ret.doc)
      || {? ZZ_KRYT.ZZ_LINK().KLASA='ZZ_KOMP'
         || _ret.doc:=ZZ_KRYT.ZZ_LINK;
            _ret.row:=_a.fld_fml('ZZ_KOMP','*BLANK')()
         ?}
      ?};
      ZZ_KRYT.cntx_pop()

   |? _TAB=ZF_SKL
   || ZZ_HIST.cntx_psh();
      exec('init_hist','phr_dane');
      _ret.doc:=ZZ_POM.ZZ_HIST().ZZ_DOK;
      ZZ_HIST.cntx_pop()
   ?}
?};
ZZ_DOK.cntx_pop();
_a.cntx_pop();

_ret


\zz_komps_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: "Okienko przed" okienek tabeli ZZ_KOMPS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_KOMPS.win_edit('RED');
ZZ_KOMPS.win_fml(cur_win(1,1),,'WARTOSC',,'ICON_BEFORE',"{? ZZ_KOMPS.POZIOM='T' || 'xwin16.png:38' || '' ?}");
1


\zz_komps_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: "Rekord po" okienek tabeli ZZ_KOMPS.
::   WE:
::   WY:
::  OLD: \zz_komps_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
exec('zz_komps_chk','phr_zz_tab',-menu_txt()='popraw')


\zz_komps_zmien_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Akcja "Zmień" okienek tabeli ZZ_KOMPS.
::   WE:
::   WY:
::  OLD: \zz_komps_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZZ_KOMPS.POZIOM<>'T'
|| ZZ_KOMPS.POZIOM:='T';
   {? ZZ_KOMPS.put()
   || FUN.info('Wartość oczekiwana została zmieniona na:\n%1'@
         ['%1 - %2' [$ZZ_KOMPS.WARTOSC,ZZ_KOMPS.OPIS]]
      )
   || FUN.emsg('Zmiana wartości oczekiwanej nie powiodła się.'@)
   ?}
|| FUN.info('Wartość oczekiwana pozostała niezmieniona.\n%1'@
      ['%1 - %2' [$ZZ_KOMPS.WARTOSC,ZZ_KOMPS.OPIS]]
   )
?}


\zz_komps_wypelnij_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Akcja "Wypełnij" okienek tabeli ZZ_KOMPS.
::   WE:
::   WY:
::  OLD: \zz_komps_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_KOMPS.cntx_psh;
ZZ_KOMPS.index('WARTOSC');
_src:=exec('zz_kompx_zrodlo','phr_widok',ZZ_KOMPS);
_link:=ZZ_KOMPS.fld_fml('ZZ_LINK','*BLANK')();
_komp:=ZZ_KOMPS.fld_fml('ZZ_KOMP','*BLANK')();
ZZ_KOMPS.prefix(ref_name(_src.doc),_src.doc,_src.row);
{? ZZ_KOMPS.first() & _link<>_src.doc
|| _loop:=1;
   {!
   |? _loop
   |! _wartosc:=ZZ_KOMPS.WARTOSC;
      _poziom:=ZZ_KOMPS.POZIOM;
      _opis:=ZZ_KOMPS.OPIS;
      ZZ_KOMPS.cntx_psh();
      ZZ_KOMPS.prefix(ref_name(_link),_link,_komp);
      {? ~ZZ_KOMPS.find_key(_wartosc)
      || ZZ_KOMPS.blank();
         ZZ_KOMPS.WARTOSC:=_wartosc;
         ZZ_KOMPS.POZIOM:=_poziom;
         ZZ_KOMPS.OPIS:=_opis;
         ZZ_KOMPS.add()
      ?};
      ZZ_KOMPS.cntx_pop();
      _loop:=ZZ_KOMPS.next()
   !}
|? _ret:=exec('komp_range','phr_widok','Skala punktowa'@);
   _ret.OK
|| _min:=_ret.RANGE.MIN;
   _maks:=_ret.RANGE.MAKS;
   _poziom:=_ret.RANGE.POZIOM;
   ZZ_KOMPS.prefix(ref_name(_link),_link,_komp);
   {! _wartosc:=_min .. _maks
   |! {? ~ZZ_KOMPS.find_key(_wartosc)
      || ZZ_KOMPS.blank();
         ZZ_KOMPS.WARTOSC:=_wartosc;
         ZZ_KOMPS.OPIS:=STR.słownie(_wartosc);
         ZZ_KOMPS.POZIOM:={? _wartosc=_poziom || 'T' || 'N' ?};
         ZZ_KOMPS.add()
      ?}
   !}
?};
ZZ_KOMPS.cntx_pop();
~~


\zz_profk_wartosci_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Akcja "Wartości przed" okienek profili.
::   WE:
::   WY: 0/1 zależnie od tego czy edycja jest dozwolona
:: UWAGA: poprawnosc argumentow wywolania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
exec('zz_profx_wartosci','phr_widok',"ZZ_PROFK.ZZ_DOK","ZZ_PROFK.ZZ_KOMP",'*')


\zz_profo_wartosci_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Akcja "Wartości przed" okienek profili.
::   WE:
::   WY:
::  OLD: \zz_kompx_test/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_PROFO.ZZ_MET();
{? ZZ_MET.RODZAJ<>'S'
|| FUN.info('Redagowanie wartości nie jest dostępne dla metody "%1".'@[ZZ_MET.KOD]);
   return()
?};
exec('zz_profx_wartosci','phr_widok',"ZZ_PROFO.ZZ_PROFK().ZZ_DOK","ZZ_PROFO.ZZ_PROFK().ZZ_KOMP",ZZ_MET.KOD)


\zz_profx_wartosci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Udostępnia do edycji wartości kompetencji
::   WE: _a - formuła na wartość poczatkową ZZ_LINK
::       _b - formuła na wartość poczatkową ZZ_KOMP
::       _c - kod metody oceny lub '*'
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \zz_kompx_edit/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? _c<>'*'
|| _buf_kompk:=exec('save_fml_type','#field',ZZ_KOMPK,'BLANK');
   _buf_komps:=exec('save_fml_type','#field',ZZ_KOMPS,'BLANK');
   _buf_kompz:=exec('save_fml_type','#field',ZZ_KOMPZ,'BLANK');
   _TAB:=
      {? _c='SP' || ZZ_KOMPS
      |? _c='KW' || ZZ_KOMPK
      |? _c='WB' || ZZ_KOMZB
      ?};
   _TAB.cntx_psh();
   {? _c<>'WB'
   || _link:=_TAB.fld_fml('ZZ_LINK','BLANK',_a);
      _komp:=_TAB.fld_fml('ZZ_KOMP','BLANK',_b);
      _TAB.index('WARTOSC');
      _TAB.prefix(ref_name(_a()),_a(),_b())
   || _link:=ZZ_KOMPZ.fld_fml('ZZ_LINK','BLANK',_a);
      _komp:=ZZ_KOMPZ.fld_fml('ZZ_KOMP','BLANK',_b);
      exec('zz_komzb_fill','phr_widok',_a(),_b())
   ?};
   _wnd:={? _c='WB' || __WND.SEL.get(ZZ_KOMZB,'CFG') || 'CFG' ?};
   _TAB.actions(_wnd);
   _red_wart:=exec('zz_kompx_wartosc_be','phr_widok',cur_tab(1,1));
   _red_opis:=exec('zz_kompx_opis_be','phr_widok',cur_tab(1,1));
   _TAB.actions_grayed(_wnd,
      {? _c='WB' || ''
      |? ~_red_wart & ~_red_opis || 'DP:D'
      |? ~_red_wart | ~_red_opis || 'D:D'
      || ''
      ?}
   );
   _TAB.win_sel(_wnd);
   _TAB.select();
   _TAB.actions_grayed(_wnd);
   {? _c<>'WB'
   || _TAB.fld_fml('ZZ_LINK','BLANK',_link);
      _TAB.fld_fml('ZZ_KOMP','BLANK',_komp)
   || ZZ_KOMPZ.fld_fml('ZZ_LINK','BLANK',_link);
      ZZ_KOMPZ.fld_fml('ZZ_KOMP','BLANK',_komp)
   ?};
   _TAB.cntx_pop();
   exec('restore_fml_type','#field',ZZ_KOMPK,'BLANK',_buf_kompk);
   exec('restore_fml_type','#field',ZZ_KOMPS,'BLANK',_buf_komps);
   exec('restore_fml_type','#field',ZZ_KOMPZ,'BLANK',_buf_kompz)

|| ZZ_MET.cntx_psh();
   ZZ_MET.win_sel('WYB');
   ZZ_MET.index('RODZAJ');
   ZZ_MET.prefix('S');
   {!
   |? ZZ_MET.select()
   |! exec('zz_profx_wartosci','phr_widok',_a,_b,ZZ_MET.KOD)
   !};
   ZZ_MET.cntx_pop()
?}


\zz_kompk_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: "Okienko przed" okienek tabeli ZZ_KOMPK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_KOMPK.win_edit('RED');
ZZ_KOMPK.win_fml(cur_win(1,1),,'WARTOSC',,'ICON_BEFORE',"{? ZZ_KOMPK.POZIOM='T' || 'xwin16.png:38' || '' ?}");
1


\zz_kompk_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: "Rekord po" okienek tabeli ZZ_KOMPK.
::   WE:
::   WY:
::  OLD: \zz_kompk_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
exec('zz_kompk_chk','phr_zz_tab',-menu_txt()='popraw')


\zz_kompk_zmien_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Akcja "Zmień" okienek tabeli ZZ_KOMPK.
::   WE:
::   WY:
::  OLD: \zz_kompk_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZZ_KOMPK.POZIOM<>'T'
|| ZZ_KOMPK.POZIOM:='T';
   {? ZZ_KOMPK.put()
   || FUN.info('Wartość oczekiwana została zmieniona na:\n%1'@
         ['%1 (%2) - %3' [$ZZ_KOMPK.WARTOSC,ZZ_KOMPK.KOD,ZZ_KOMPK.OPIS]]
      )
   || FUN.emsg('Zmiana wartości oczekiwanej nie powiodła się.'@)
   ?}
|| FUN.info('Wartość oczekiwana pozostała niezmieniona.\n%1'@
      ['%1 (%2) - %3' [$ZZ_KOMPK.WARTOSC,ZZ_KOMPK.KOD,ZZ_KOMPK.OPIS]]
   )
?}


\zz_kompk_wypelnij_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Akcja "Wypełnij" okienek tabeli ZZ_KOMPK.
::   WE:
::   WY:
::  OLD: \zz_kompk_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_KOMPK.cntx_psh();
ZZ_KOMPK.index('KOD');
_src:=exec('zz_kompx_zrodlo','phr_widok',ZZ_KOMPK);
_link:=ZZ_KOMPK.fld_fml('ZZ_LINK','*BLANK')();
_komp:=ZZ_KOMPK.fld_fml('ZZ_KOMP','*BLANK')();
ZZ_KOMPK.prefix(ref_name(_src.doc),_src.doc,_src.row);
{? ZZ_KOMPK.first() & _link<>_src.doc
|| _loop:=1;
   {!
   |? _loop
   |! _wartosc:=ZZ_KOMPK.WARTOSC;
      _poziom:=ZZ_KOMPK.POZIOM;
      _opis:=ZZ_KOMPK.OPIS;
      _kod:=ZZ_KOMPK.KOD;
      ZZ_KOMPK.cntx_psh();
      ZZ_KOMPK.prefix(ref_name(_link),_link,_komp);
      {? ~ZZ_KOMPK.find_key(_kod,_kod)
      || ZZ_KOMPK.blank();
         ZZ_KOMPK.WARTOSC:=_wartosc;
         ZZ_KOMPK.POZIOM:=_poziom;
         ZZ_KOMPK.OPIS:=_opis;
         ZZ_KOMPK.KOD:=_kod;
         ZZ_KOMPK.add()
      ?};
      ZZ_KOMPK.cntx_pop();
      _loop:=ZZ_KOMPK.next()
   !}
|? _ret:=exec('komp_range','phr_widok','Wartości kodowane'@);
   _ret.OK
|| _min:=_ret.RANGE.MIN;
   _maks:=_ret.RANGE.MAKS;
   _poziom:=_ret.RANGE.POZIOM;
   ZZ_KOMPK.index('WARTOSC');
   ZZ_KOMPK.prefix(ref_name(_link),_link,_komp);
   {! _wartosc:=_min .. _maks
   |! {? ~ZZ_KOMPK.find_key(_wartosc)
      || ZZ_KOMPK.blank();
         ZZ_KOMPK.WARTOSC:=_wartosc;
         ZZ_KOMPK.KOD:=$_wartosc;
         ZZ_KOMPK.OPIS:=STR.słownie(_wartosc);
         ZZ_KOMPK.POZIOM:={? _wartosc=_poziom || 'T' || 'N' ?};
         ZZ_KOMPK.add()
      ?}
   !}
?};
ZZ_KOMPK.cntx_pop();
~~


\komp_range
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wczytuje zakres.
::   WE: [_a] [STRING] - Tytuł okna [domyślnie: Wartości bezpośrednie]
::   WY:
::  OLD: \komp_range/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_tyt:={? var_pres('_a')=type_of('') || _a || 'Wartości bezpośrednie'@ ?};

_RANGE:=tab_tmp(1,
   'MIN','INTEGER','Wartość minimalna'@,
   'MAKS','INTEGER','Wartość maksymalna'@,
   'POZIOM','INTEGER','Wartość oczekiwana'@
);
_RANGE.MIN:=1;
_RANGE.MAKS:=5;
_RANGE.POZIOM:=3;
_we:=_RANGE.mk_edit(_tyt,,'kombzak');
_RANGE.win_esep(_we,'Dane podstawowe'@);
_RANGE.win_efld(_we,,'MIN',,,3,,,,,'Wartość minimalna zakresu'@);
_RANGE.win_efld(_we,,'MAKS',,,3,,,,,'Wartość maksymalna zakresu'@);
_RANGE.win_efld(_we,,'POZIOM',,,3,,,,,'Wartość oczekiwana zakresu'@);
_RANGE.efld_opt(_we,'mark=1');
exec('ok_esc','#window',_RANGE,_we,,,,,,,exec('text_red_ok','#window'));
_RANGE.win_edit(_we);

_ret:=obj_new('RANGE','OK');
_ret.RANGE:=_RANGE;
_ret.OK:=_RANGE.edit(
      "  _RANGE:=cur_tab();
         {? (_chk:=__CHK.record(_RANGE))<>''
         || return(_chk)
         |? _RANGE.MIN<0
         || return(__CHK.err_fld(_RANGE,'MIN',1,'Wartość nie może być ujemna.'@))
         |? _RANGE.MAKS<_RANGE.MIN
         || return(__CHK.err_fld(_RANGE,'MAKS',1,'Wartość nie może być mniejsza niż \"%1\" (%2).'@
                  ['Wartość minimalna'@,$_RANGE.MIN]
               )
            )
         |? _RANGE.POZIOM<_RANGE.MIN
         || return(__CHK.err_fld(_RANGE,'POZIOM',1,'Wartość nie może być mniejsza niż \"%1\" (%2).'@
                  ['Wartość minimalna'@,$_RANGE.MIN]
               )
            )
         |? _RANGE.MAKS<_RANGE.POZIOM
         || return(__CHK.err_fld(_RANGE,'POZIOM',1,'Wartość nie może być większa niż \"%1\" (%2).'@
                  ['Wartość maksymalna'@,$_RANGE.MAKS]
               )
            )
         || ''
         ?}
      "
);
_ret


\zz_proft_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Obsługa akcji "Dołącz - po" dla tabeli ZZ_PROFT.
::   WE:
::   WY:
::  OLD: \zz_proft_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZZ_PROFT.f_active()
|| ZZ_PROFT.f_add()
?}


\zz_fml_xxx_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: "Okienko przed" okien tabeli ZZ_FML.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('setup_icon','phr_widok','NAZWA');
ZZ_FML.win_edit('RED');
1


\zz_fml_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Po redakcji danych tabeli ZZ_FML.
::   WE:
::   WY: akronim niewypełnionego pola, 0 w przypadku powielenia klucza, tekst pusty jeśli rekord jest poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('zz_fml_chk','phr_zz_tab',-menu_txt()='popraw')


\zz_fml_wstaw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła po akcji "Wstaw" w panelu budowy kryterium
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_kryt_add','phr_widok',ZZ_KRYTF,ZZ_FML.ref());
~~


\zz_kryt_type
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Tworzy i wypełnia danymi tabele tymczasową umożliwiającą wybór klasy kryterium doboru.
::   WE: _a [TABLE] - Alias do tabeli szczegółów doboru.
::       ...
::   WY: Alias do tabeli tymczasowej umożliwiającej wybór klasy kryterium.
::  OLD: \zz_kryt_type/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_buf:=tab_tmp(1,'LP','INTEGER','Lp.'@,'KLASA','STRING[8]','Klasa'@,'OPIS','STRING[50]','Opis'@);
_wnd:=_buf.mk_sel('Kryteria doboru'@,'N',0,'zz_kryt_type',,,5);
_buf.win_fld(_wnd,,'OPIS',,,,,,,,'Krótki opis');
_buf.win_act(_wnd,,'Formuła','Wybierz'@@,,,"sel_exit",,1,,,,'W');
_buf.win_sel(_wnd);

{? _<1
|| return(_buf)
?};

_add:="_a.LP:=_a.size()+1; _a.KLASA:=_b; _a.OPIS:=_c; _a.add()";
{! _arg:=1 .. _
|! _desc:=
      {? _[_arg]=ZZ_KRYTF || 'Formuła'@
      |? _[_arg]=ZZ_KRYTJ || 'Jednostka organizacyjna'@
      |? _[_arg]=ZZ_KRYTS || 'Stanowisko'@
      |? _[_arg]=ZZ_KRYTP || 'Pracownik'@
      || ''
      ?};
   _add(_buf,2-!_[_arg],_desc)
!};

_buf


\zz_krytf_choose
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Wybór kryterium dowolnego.
::  OLD: \zz_krytf_choose/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_FML.seek(_a);
ZZ_FML.win_sel('WYB');
{? ZZ_FML.select()
|| ZZ_FML.ref()
?}


\zz_krytj_choose
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Udostępnia do wyboru wartości kryterium doboru jednostki organizacyjnej.
::  OLD: \zz_krytj_choose/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('ud_def_wybierz','schemat','PODZORG','STRORG',,2,,1);
_ret.UD_SKL


\zz_krytp_choose
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wybor współpracownika.
::  OLD: \zz_krytp_choose/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_arg:=exec('wybierz_args','pracownik');
_arg.DOMAIN:={? BPMN.SYM_DOM<>'' || BPMN.SYM_DOM || 'POC' ?};
_arg.WIELU:=0;

_ref:=null;
_ret:=exec('wybierz','pracownik',_arg);

{? _ret.P.first()
|| P.cntx_psh();
   P.clear();
   {? P.seek(_ret.P.SQL)
   || _ref:=P.ref()
   ?};
   P.cntx_pop()
?};

_ref


\zz_kryts_choose
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Udostępnia do wyboru wartości kryterium doboru stanowiska.
::   WE: _a [REFERENCE] - Wskazanie rekordu
::  OLD: \zz_kryts_choose/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();
STN.cntx_psh();
STN.index('STANOZAT');
STN.prefix('T');
STN.seek(_a);
STN.win_sel('WYB');
{? STN.select(,1)
|| _ret:=STN.ref()
?};
STN.cntx_pop();
_ret


\zz_kryt_choose
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Udostępnia do wyboru wartości wskazanego kryterium.
::   WE: _a [TABLE] - Alias do tabeli szczegółów kryterium.
::   WY: Wskazanie na rekord w tabeli wartości kryteriów.
::  OLD: \zz_kryt_choose/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
exec(2--!_a+'_choose','phr_widok',_b)


\zz_kryt_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Dodaje kryterium doboru.
::   WE:  _a  [TABLE]     - Alias do tabeli szczegółów kryterium.
::        _b  [REFERENCE] - Rekord źródłowy.
::       [_c] [REFERENCE] - Właściciel kryterium.
::       [_d] [REFERENCE] - Typ oceny i oceniającego.
::       [_e] [NUMBER]    - Nadrzędne kryterium doboru.
::   WY: Wskazanie na dołączone kryterium ogólne.
::  OLD: \zz_kryt_add/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_b
|| return(null())
?};
{? _a=ZZ_KRYTS & var_pres('_c')=type_of(null()) & _c<>null()
|| _dubelek:=0;
   ZZ_DOK.cntx_psh();
   ZZ_DOK.prefix();
   {? exec('seek_dok','phr_tab',_c) & ZZ_DOK.KLASA='ZZ_KOMP'
   || ZZ_KRYTS.cntx_psh();
      ZZ_KRYTS.index('LINK_REK');
      ZZ_KRYTS.prefix();
      _dubelek:=ZZ_KRYTS.find_key(_c,_b);
      ZZ_KRYTS.cntx_pop()
   ?};
   ZZ_DOK.cntx_pop();
   {? _dubelek
   || return(null())
   ?}
?};

ZZ_KRYT.blank();
{? var_pres('_c')=type_of(null())
|| ZZ_KRYT.ZZ_LINK:=_c
?};
{? var_pres('_d')=type_of(null())
|| ZZ_KRYT.ZZ_TYP:=_d
?};
{? var_pres('_e')=type_of(0)
|| ZZ_KRYT.ZZ_KRYT:=_e
?};
{? ~ZZ_KRYT.size()
|| ZZ_KRYT.ZZ_KRYT:=0
?};

ZZ_KRYT.KLASA:=2-!_a;
ZZ_KRYT.TRYB:='|';
_ret:=null();
ZZ_KRYT.cntx_psh();
ZZ_KRYT.clear();
do();
{? ZZ_KRYT.add(1)
|| _ret:=ZZ_KRYT.ref();
   _a.clear();
   _a.blank();
   _a.REKORD:=_b;
   _a.add()
?};
{? ~end()
|| _ret:=null()
?};
ZZ_KRYT.cntx_pop();
_ret


\zz_kryt_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Dołącz - przed" dla tabeli ZZ_KRYT.
::   WE:
::   WY:
::  OLD: \zz_kryt_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=ref_tab($exec('dok2ref','phr_tab',ZZ_KRYT.fld_fml('ZZ_LINK','*BLANK')()));
_buf:=
   {? _TAB=ZZ_PROFT
   || exec('zz_kryt_type','phr_widok',ZZ_KRYTF,ZZ_KRYTJ,ZZ_KRYTS,ZZ_KRYTP)
   |? _TAB=ZZ_KOMP
   || exec('zz_kryt_type','phr_widok',ZZ_KRYTS)
   |? _TAB=ZF_DEF
   || exec('zz_kryt_type','phr_widok',ZZ_KRYTJ,ZZ_KRYTS,ZZ_KRYTP)
   |? _TAB=SZK_WZO | _TAB=BIPNAG | _TAB=BNFTT | _TAB=BIPULP
   || exec('zz_kryt_type','phr_widok',ZZ_KRYTF,ZZ_KRYTJ,ZZ_KRYTS,ZZ_KRYTP)
   || exec('zz_kryt_type','phr_widok',ZZ_KRYTJ,ZZ_KRYTS)
   ?};
{? type_of(_buf)=type_of(SYSLOG) & {? _buf.size()=1 || _buf.first() || _buf.select() ?}
|| _type:=($_buf.KLASA)();
   {? (_ref1:=exec('zz_kryt_choose','phr_widok',_type,null())) & (_ref2:=exec('zz_kryt_add','phr_widok',_type,_ref1))
   || ZZ_KRYT.seek(_ref2)
   ?}
?}


\zz_kryt_zz_kryt_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Wartość początkowa dla pola ZZ_KRYT wiersza tabeli ZZ_KRYT w okienkach ze strukturą drzewiastą.
::       Zwraca wskazanie na rodzica bieżącego zapisu - podpinanie nowych kryteriów na tym samym poziomie.
::   WE:
::   WY: wskazanie kryterium
::----------------------------------------------------------------------------------------------------------------------
{? ~grp_empty(ZZ_KRYT,cur_win(1,1))
|| ZZ_KRYT.cntx_psh();
   ZZ_KRYT.get();
   _kryt:=ZZ_KRYT.ZZ_KRYT;
   ZZ_KRYT.cntx_pop();
   _kryt
?}


\zz_kryt_wstaw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Obsługa akcji "Wstaw kryteria - przed" dla tabeli ZZ_KRYT.
::   WE:
::   WY:
::  OLD: \zz_kryt_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of('') & |_a<>'' || _a || 'CFG' ?};
params_set('zz_kryt',_a);

_mob:='mobile_visible=1';
_def:=UD_DEF.mk_sel('Jednostki organizacyjne'@,'P',0,'ud_def_kryt',,,,1);
UD_DEF.win_fld(_def,,'SYMBOL',,,19,,,,,exec('fldComment','#field',UD_DEF,'SYMBOL'),,,,,,_mob);
UD_DEF.win_fld(_def,,'OPIS',,,,,,,,exec('fldComment','#field',UD_DEF,'OPIS'),,,,,,_mob);
UD_DEF.win_act(_def,,'Formuła','Wstaw'@@,,,"exec('zz_kryt_add','phr_widok',ZZ_KRYTJ,UD_DEF.UD_SKL)",,1);
UD_DEF.win_act(_def,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,
   "exec('zwin_rozwin','#tree')",,,,,,'R',,'target=window'
);
UD_DEF.win_act(_def,,'Kolejność');
UD_DEF.win_fml(_def,,'SYMBOL',,'ICON_BEFORE',"exec('zz_tree_icon','phr_widok',cur_tab(1,1))");
UD_DEF.dnd_sel(_def,,'records.ZZ_KRYT',"exec('del_dropped','phr_widok',ZZ_KRYT,dnd_info('dropped_records'))");

_stn:=STN.mk_sel('Stanowiska'@,'P',0,'stn_kryt',,,,,'U','T');
STN.win_fld(_stn,,'ST',,,,,,,,exec('fldComment','#field',STN,'ST'));
STN.win_act(_stn,0,'Formuła','Wstaw'@@,,,"exec('zz_kryt_add','phr_widok',ZZ_KRYTS,STN.ref())",,1);
STN.win_act(_stn,0,'Szukaj');
STN.win_act(_stn,0,'Kolejność');
STN.dnd_sel(_stn,,'records.ZZ_KRYT',"exec('del_dropped','phr_widok',ZZ_KRYT,dnd_info('dropped_records'))");

_wnd:=ZZ_KRYT.grp_make('Kryteria doboru'@,
:  po wyświetleniu
   $("_link:=ZZ_KRYT.fld_fml('ZZ_LINK','*BLANK')();
      _ref:=$exec('dok2ref','phr_tab',_link);
      {? (_ref*ZZ_PROFT.name())=1 || tab_show(0,'bottom')
      |? (_ref*ZZ_KOMP.name())=1 || tab_hide(3,,'bottom')
      |? (_ref*ZF_DEF.name())=1 || tab_hide(3,,'bottom')
      || tab_hide(0,1,'bottom');
         tab_show(1,'bottom');
         tab_show(2,'bottom')
      ?};

      UD_DEF.cntx_psh();
      _typ:=exec('szukaj_ud_typ','schemat','PODZORG');
      _sch:=exec('domyslny','schemat',_typ);
      UD_DEF.index('SYMBOL');
      UD_DEF.prefix(_sch);
      _skl:=exec('ud_skl_firma','schemat',_typ);
      exec('ud_def_root','schemat','"+_def+"',_sch,_skl);

      STN.cntx_psh();
      STN.index('STANOZAT');
      STN.prefix('T');

      params_set(_par:=params_get());
      _win:=_par.zz_kryt;
      ZZ_KRYT.actions(_win,'WY:WY','D:D',1);

      grp_disp(UD_DEF,'"+_def+"',1);
      grp_disp(STN,'"+_stn+"',1);
      grp_disp(ZZ_FML,'CFG',1);
      1
   "),
:  identyfikator
   'zz_kryt_kryt',
:  położenie
   ,,
:  zamknięcie
   "
      params_set(_par:=params_get());
      _win:=_par.zz_kryt;
      ZZ_KRYT.actions(_win,,'W:W',1);
      UD_DEF.cntx_pop();
      STN.cntx_pop();
      1
   "
);

: kryteria doboru
ZZ_KRYT.grp_sel(_wnd,,_a,,
:  po odświeżeniu
   "",
:  położenie i wysokość
   ,,10,
:  przed obsługą
   "ZZ_POM.ZZ_DOK:=ZZ_PROF.ZZ_DOK",
:  po obsłudze
   "",
:  utrwalenie, aktywacja, wypełnienie
   0,0,'maximized_with_title'
);
ZZ_KRYT.grp_splt(_wnd,,'horizontal','bottom');

: jednostki organizacyjne
ZZ_KRYT.grp_sel(_wnd,UD_DEF,_def,'Jednostki organizacyjne'@,
:  po odświeżeniu
   "
      params_set(_par:=params_get());
      _win:=_par.zz_kryt;
      grp_disp(ZZ_KRYT,_win,1)
   ",
:  położenie i wysokość
   ,,,
:  przed i po obsłudze
   ,,
:  utrwalenie, aktywacja, wypełnienie
   0,0,'maximized_with_title'
);

: stanowiska
ZZ_KRYT.grp_sel(_wnd,STN,_stn,'Stanowiska'@,
:  po odświeżeniu
   "
     params_set(_par:=params_get());
     _win:=_par.zz_kryt;
     grp_disp(ZZ_KRYT,_win,1)
   ",
:  położenie i wysokość
   ,,,
:  przed i po obsłudze
   ,,
:  utrwalenie, aktywacja, wypełnienie
   0,0,'maximized_with_title'
);

: kryteria dowolne
ZZ_KRYT.grp_sel(_wnd,ZZ_FML,'CFG','Kryteria dowolne'@,
:  po odświeżeniu
   "
      params_set(_par:=params_get());
      _win:=_par.zz_kryt;
      grp_disp(ZZ_KRYT,_win,1)
   ",
:  położenie i wysokość
   ,,,
:  przed i po obsłudze
   ,,
:  utrwalenie, aktywacja, wypełnienie
   0,0,'maximized_with_title'
);

ZZ_KRYT.dnd_sel(_a,,'records.ZZ_FML',"exec('zz_kryt_dnd','phr_widok')");
ZZ_KRYT.dnd_sel(_a,,'records.UD_DEF',"exec('zz_kryt_dnd','phr_widok')");
ZZ_KRYT.dnd_sel(_a,,'records.STN',"exec('zz_kryt_dnd','phr_widok')");
ZZ_KRYT.dnd_sel(_a,,'records.P',"exec('zz_kryt_dnd','phr_widok')");

_buf_kryt:=exec('save_fml_type','#field',ZZ_KRYT,'BLANK');
{? _a='ANK'
|| ZZ_KRYT.fld_fml('ZZ_KRYT','BLANK',"
      {? ~grp_empty(ZZ_KRYT,'ANK')
   || ZZ_KRYT.cntx_psh();
      ZZ_KRYT.get();
      _kryt:=ZZ_KRYT.ZZ_KRYT;
      ZZ_KRYT.cntx_pop();
      _kryt
   ?}
   ")
|| ZZ_KRYT.fld_fml('ZZ_KRYT','BLANK',"
      {? ~grp_empty(ZZ_KRYT,'CFG')
      || ZZ_KRYT.cntx_psh();
         ZZ_KRYT.get();
         _kryt:=ZZ_KRYT.ZZ_KRYT;
         ZZ_KRYT.cntx_pop();
         _kryt
      ?}
   ")
?};

ZZ_KRYT.cntx_psh();
ZZ_KRYT.win_sel(_wnd);
ZZ_KRYT.select();
ZZ_KRYT.cntx_pop();

ZZ_KRYT.win_del(_wnd);
UD_DEF.win_del(_def);
STN.win_del(_stn);

exec('restore_fml_type','#field',ZZ_KRYT,'BLANK',_buf_kryt);
ZZ_KRYT.dnd_sel(_a,,'records.ZZ_FML',"");
ZZ_KRYT.dnd_sel(_a,,'records.UD_DEF',"");
ZZ_KRYT.dnd_sel(_a,,'records.STN',"");
ZZ_KRYT.dnd_sel(_a,,'records.P',"");

~~


\zz_kryt_tryb_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Obsługa akcji "Tryb - przed" dla tabeli ZZ_KRYT.
::   WE:
::   WY:
::  OLD: \zz_kryt_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_kt:='&|~';
_nr:=_kt*ZZ_KRYT.TRYB;
_nr:={? _nr<+  _kt || _nr ?}+1;
ZZ_KRYT.TRYB:=(_nr+_kt)+1


\zz_kryt_tryb_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Obsługa akcji "Tryb - przed" dla tabeli ZZ_KRYT.
::   WE:
::   WY:
::  OLD: \zz_kryt_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_KRYT.put()


\zz_kryt_dnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Obsługa drag and drop dla okienek tabeli ZZ_KRYT.
::  OLD: \zz_kryt_dnd/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_state:=no_msg(1);

_rec:=dnd_info('dropped_records');
_SRC:=ref_tab(form(dnd_info('table_name'),8)+'00000001');

{? _SRC=ZZ_KRYT
:  upuszczenie rekordu z okienka kryteriow
:  przesuniecie upuszczonych zapisow w drzewku
|| errno();
   _test:=1;
   _loop:=_rec.first();
   do();
   {!
   |? _loop & _test
   |! {? ZZ_KRYT.seek(_rec.REF,)
      || ZZ_KRYT.ZZ_KRYT:=#dnd_info('dest_record');
         {? __CHK.index(ZZ_KRYT,1)=''
         || _test:=ZZ_KRYT.put()
         || _test:=0
         ?}
      ?};
      _loop:=_rec.next()
   !};
   {? ~_test
   || undo();
      FUN.emsg(
         {? errno()=377
         || 'Wykryto próbę naruszenia struktury hierarchicznej.\n'
            'Reorganizacja kryterium została anulowana.'@
         || 'Reorganizacja kryterium nie powiodła się.'@
         ?}
      )
   ?};
   end()

|| _type:=exec('kryt_tab','phr_dane',_SRC);
   _SRC.cntx_psh();
   _SRC.clear();
   _loop:=_rec.first();
   {!
   |? _loop
   |! {? _SRC.seek(_rec.REF,)
      || _ref:={? _SRC=UD_DEF || _SRC.UD_SKL || _SRC.ref() ?};
         exec('zz_kryt_add','phr_widok',_type,_ref)
      ?};
      _loop:=_rec.next()
   !};
   _SRC.cntx_pop()
?};

no_msg(_state)


\zz_kryt_xxx_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: "Okienko przed" okien tabeli ZZ_KRYT.
::   WE: _a [INTEGER] - sposób prezentacji: liczba różna od 0 - drzewko, wpp - lista
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('setup_icon','phr_widok','NAZWA',,var_pres('_a')=type_of(0) & _a<>0);
1


\zz_pom_tryb_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przed wyświetleniem pola TRYB zmiennej ZZ_POM.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZZ_POM.TRYB:=
   {? ZZ_KRYT.TRYB='&' || 'i'@
   |? ZZ_KRYT.TRYB='|' || 'lub'@
   |? ZZ_KRYT.TRYB='~' || 'nie'@
   || '?'
   ?};
1


\zz_komp_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknach tabeli ZZ_KOMP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_KOMP.cntx_psh();
ZZ_KOMP.index('NAZWA');
ZZ_KOMP.prefix(ZZ_POM.ZZ_HIST);
ZZ_KOMP.win_sel('WYB');
ZZ_KOMP.actions('WYB',,'W');
{? ZZ_KOMP.select()
|| {? exec('zz_kryt_add','phr_widok',ZZ_KRYTS,STN.ref(),ZZ_KOMP.ZZ_DOK,exec('typ_op','phr_dane'))=null()
   || FUN.info('Do stanowiska "%1" kompetencja "%2" jest już przypisana.'@ [STN.ST,ZZ_KOMP.NAZWA])
   ?};
   ZZ_KOMP.f_rfresh()
?};
ZZ_KOMP.cntx_pop();
0


\zz_komp_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Usuń - przed" w oknach tabeli ZZ_KOMP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('del_conf','#table',ZZ_KOMP)
|| _dok:=exec('stn2krytdok','phr_dane',STN.ref(),ZZ_KOMP.ZZ_DOK);
   ZZ_KRYT.cntx_psh();
   ZZ_KRYT.index('ZZ_DOK');
   ZZ_KRYT.prefix();
   {? ZZ_KRYT.find_key(ref_name(_dok),_dok)
   || ZZ_KRYT.del();
      ZZ_KOMP.f_rfresh()
   ?};
   ZZ_KRYT.cntx_pop()
?};
0


\zf_skl_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZF_SKL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_psh','phr_widok','ZWS_PAR_PEFO');
ZZ_MET.cntx_psh();
ZZ_MET.f_clear();
ZZ_MET.win_dict('SLO');
ZF_SKL.win_edit('RED');
ZF_SKL.win_patt('WZO');
exec('setup_icon','phr_widok','NAZWA');
exec('setup_icon','phr_widok','ZZ_MET','NAZWA');
1


\zf_skl_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZF_SKL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_MET.cntx_pop();
exec('zz_pom_pop','phr_widok');
1


\zf_skl_wartosci_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wartości" w oknach wertowania tabeli ZF_SKL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_MET.cntx_psh();
exec('za_wartosci','phr_widok',ZF_SKL,ZF_SKL.ZZ_MET().KOD,ZF_SKL.ZZ_DOK);
ZZ_MET.cntx_pop();
~~


\zf_skl_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Rekord - przed" w oknach wertowania tabeli ZF_SKL.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| ZZ_MET.cntx_psh();
   ZF_SKL.actions_grayed(cur_win(1,1),{? ZF_SKL.ZZ_MET().RODZAJ='S' || '' || 'W' ?});
   ZZ_MET.cntx_pop()
?};
~~


\zf_rpi_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZF_RPI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_psh','phr_widok','ZWS_PAR_PEFO');
ZF_RPI.win_edit('RED');
exec('setup_icon','phr_widok','NAZWA');
1


\zf_rpi_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZF_RPI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_pop','phr_widok')


\zf_test_wyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Sprawdza, czy formularz jest wykorzystywany w ocenach.
::   WE: _a [REFERENCE] - Wskazanie na formularz.
::   WY: 1 - Formularz został już użyty w ocenach.
::       0 - Formularz może być "bezkarnie" modyfikowany.
::  OLD: \zf_test_wyk/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_TEST:=sql(
   'select count(*) as LICZ '
   'from ZF_WYK '
   'where ZF_WYK.ZF_DEF=:_a and ZF_WYK.OK=\'T\'',
   _a
);

_TEST.first() & _TEST.LICZ


\zf_cmod_pyt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Wyświetla okno dialogowe z prośbą o potwierdzenie chęci modyfikacji formularza.
::   WY: Wartość zwracana przez metodę ask obiektu FUN.
::  OLD: \zf_cmod_pyt/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Formularz jest już wykorzystywany w ocenach okresowych.'@+'\n'+'Czy na pewno rozpocząć wprowadzanie zmian?'@)


\zf_wid_zz_typ_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Przed redagowaniem pola ZF_WID.ZZ_TYP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? -menu_txt()='dołącz'
|| 1
|| ZZ_DOK.cntx_psh();
   _klasa:=ZF_WID.ZZ_LINK().KLASA;
   ZZ_DOK.cntx_pop();
   _klasa<>'ZF_POZ'
?}


\zf_wid_zz_typ_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Po redagowaniu pola ZF_WID.ZZ_TYP.
::   WE:
::   WY:
::  OLD: \zf_wid_bfe/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? -menu_txt()='dołącz'
|| _update:='';
   ZF_WID.cntx_psh();
   ZF_WID.index('UNIQUE');
   ZZ_DOK.cntx_psh();
   {? ZF_WID.ZZ_LINK().KLASA='ZF_POZ'
   || ZF_SKL.cntx_psh();
      _ref:=ZF_POZ.ZF_SKL().ZZ_DOK;
      ZF_SKL.cntx_pop()
   || _ref:=null()
   ?};
   ZZ_DOK.cntx_pop();
   ZF_WID.prefix(ref_name(_ref),_ref);
   {? ZF_WID.find_key(ZF_WID.ZZ_TYP)
   || _update:=
         'ZF_WID.WYMOG_W:=\''+ZF_WID.WYMOG_W+'\';'+
         'ZF_WID.WYMOG_B:=\''+ZF_WID.WYMOG_B+'\';'+
         'ZF_WID.OCENA_W:=\''+ZF_WID.OCENA_W+'\';'+
         'ZF_WID.OCENA_B:=\''+ZF_WID.OCENA_B+'\';'+
         'ZF_WID.WIDOK_W:=\''+ZF_WID.WIDOK_W+'\';'+
         'ZF_WID.WIDOK_B:=\''+ZF_WID.WIDOK_B+'\';'+
         'ZF_WID.WYNIK_W:=\''+ZF_WID.WYNIK_W+'\';'+
         'ZF_WID.WYNIK_B:=\''+ZF_WID.WYNIK_B+'\';'+
         '~~'
   ?};
   ZF_WID.cntx_pop();
   ($_update)()
?};
1


\zf_wid_fx_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Przed redagowaniem pól tabeli ZF_WID typu flaga:
::          WYMOG_W, WYMOG_B - Wymagane wypełnienie / Blokada zmiany
::          OCENA_W, OCENA_B - Dostępny do edycji / Blokada zmiany
:;          WIDOK_W, WIDOK_B - Widoczny na etapie oceny / Blokada zmiany
::          WYNIK_W, WYNIK_B - Widoczny po zakończeniu oceny / Blokada zmiany
::   WE: [_a] [STRING] - Akronim pola [domyślnie: akronim bieżącego pola].
::       [_b] [STRING] - Wartość pola [domyślnie: wartość bieżącego pola].
::   WY:
::  OLD: \zf_wid_bfe/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_acr:={? var_pres('_a')=type_of('') || _a || cur_afld() ?};
_fld:={? var_pres('_b')=type_of('') || _b || ($'ZF_WID.%1' [_acr])() ?};

_klasa:='';
:: Hierarchia klas:
:: Poziom 0 - ''       - brak klasy - ustawienia domyślne - tylko wartość początkowa poziomu 1.
:: Poziom 1 - 'ZF_SKL' - poziom elementu
:: Poziom 2 - 'ZF_POZ' - poziom pozycji formularza
{? ZF_WID.ZZ_LINK
|| ZZ_DOK.cntx_psh();
   _klasa:=ZF_WID.ZZ_LINK().KLASA;
   ZZ_DOK.cntx_pop()
?};

{? ZF_WID.WYMOG_W='T' & (_acr='OCENA_W' | _acr='OCENA_B' | _acr='WIDOK_W' | _acr='WIDOK_B')
:: Jeżeli "wymagane wypełnienie", to nie można już zmieniać "dostępny do edycji" i "widoczny na etapie oceny" oraz
:: ich blokad.
|| return(0)
|? ZF_WID.OCENA_W='T' & (_acr='WIDOK_W' | _acr='WIDOK_B')
:: Jeżeli "dostępny do edycji" to nie można już zmieniać "widoczny na etapie oceny" oraz blokady.
|| return(0)
|? _klasa='ZF_POZ' & (_acr='WYMOG_B' | _acr='OCENA_B' | _acr='WIDOK_B' | _acr='WYNIK_B')
:: Na poziomie formularza nie można zmieniać blokad.
|| return(0)
?};

{? _acr='WYMOG_W'
|| {? _klasa=''
   || 1
   |? _klasa='ZF_SKL'
   || ZF_SKL.WALIDUJ='T'
   |? _klasa='ZF_POZ'
   || ZF_WID.WYMOG_B<>'T'
   ?}

|? _acr='WYMOG_B'
|| (_klasa='' | ZF_SKL.WALIDUJ='T') & ~(ZF_WID.OCENA_W='N' & ZF_WID.OCENA_B='T')

|? _acr='OCENA_W'
|| {? _klasa=''
   || 1
   |? _klasa='ZF_SKL'
   || ZF_SKL.STALY='N'
   |? _klasa='ZF_POZ'
   || ZF_WID.OCENA_B<>'T'
   ?}

|? _acr='OCENA_B'
|| (_klasa='' | ZF_SKL.STALY='N') & ~(ZF_WID.WIDOK_W='N' & ZF_WID.WIDOK_B='T')

|? _acr='WIDOK_W'
|| _klasa<>'ZF_POZ' | ZF_WID.WIDOK_B<>'T'

|? _acr='WYNIK_W'
|| _klasa<>'ZF_POZ' | ZF_WID.WYNIK_B<>'T'

|| 1
?}


\zf_wid_fx_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Po redagowaniu pól tabeli ZF_WID typu flaga:
::          WYMOG_W, WYMOG_B - Wymagane wypełnienie / Blokada zmiany
::          OCENA_W, OCENA_B - Dostępny do edycji / Blokada zmiany
:;          WIDOK_W, WIDOK_B - Widoczny na etapie oceny / Blokada zmiany
::          WYNIK_W, WYNIK_B - Widoczny po zakończeniu oceny / Blokada zmiany
::   WE: [_a] [STRING] - Akronim pola [domyślnie: akronim bieżącego pola].
::       [_b] [STRING] - Wartość pola [domyślnie: bieżąca wartość pola].
::   WY:
::  OLD: \zf_wid_afe/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_acr:={? var_pres('_a')=type_of('') || _a || cur_afld() ?};
_fld:={? var_pres('_b')=type_of('') || _b || ($'ZF_WID.%1' [_acr])() ?};

:: Patrz opis w formule \zf_wid_fx_be/phr_widok.fml
_klasa:='';
{? ZF_WID.ZZ_LINK
|| ZZ_DOK.cntx_psh();
   _klasa:=ZF_WID.ZZ_LINK().KLASA;
   ZZ_DOK.cntx_pop()
?};

{? _acr='WYMOG_W'
|| {? _fld='T'
   || ZF_WID.OCENA_W:='T';
      exec('zf_wid_fx_ae','phr_widok','OCENA_W');
      {? _klasa<>'ZF_POZ'
      || ZF_WID.OCENA_B:='T';
         exec('zf_wid_fx_ae','phr_widok','OCENA_B')
      ?}
   ?}

|? _acr='OCENA_W'
|| {? _fld='T'
   || ZF_WID.WIDOK_W:='T';
      exec('zf_wid_fx_ae','phr_widok','WIDOK_W');
      {? _klasa<>'ZF_POZ'
      || ZF_WID.WIDOK_B:='T';
         exec('zf_wid_fx_ae','phr_widok','WIDOK_B')
      ?}
   |? ZF_WID.OCENA_B='T' & _klasa<>'ZF_POZ'
   || ZF_WID.WYMOG_B:='T';
      exec('zf_wid_fx_ae','phr_widok','WYMOG_B')
   ?}

|? _acr='OCENA_B'
|| {? _klasa<>'ZF_POZ' & _fld='T' & ZF_WID.OCENA_W='N'
   || ZF_WID.WYMOG_B:='T';
      exec('zf_wid_fx_ae','phr_widok','WYMOG_B')
   ?}

|? _acr='WIDOK_W'
|| {? _klasa<>'ZF_POZ' & _fld='N' & ZF_WID.WIDOK_B='T' & ZF_WID.OCENA_W='N'
   || ZF_WID.OCENA_B:='T';
      exec('zf_wid_fx_ae','phr_widok','OCENA_B')
   ?}

|? _acr='WIDOK_B'
|| {? _klasa<>'ZF_POZ' & _fld='T' & ZF_WID.WIDOK_W='N'
   || ZF_WID.OCENA_B:='T';
      exec('zf_wid_fx_ae','phr_widok','OCENA_B')
   ?}

?};

1


\zf_wid_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZF_WID.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZF_WID.win_edit('RED');
ZF_WID.win_patt('WZO');
ZZ_TYP.cntx_psh();
ZZ_TYP.f_clear();
ZZ_TYP.prefix();
ZZ_TYP.win_dict('SLO');
exec('setup_icon','phr_widok','ZZ_TYP','NAZWA')


\zf_wid_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZF_WID.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_TYP.cntx_pop();
1


\zf_wid_mod_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła wykonywana przed akcjami "Dołącz", "Popraw" i "Usuń" w oknach wertowania tabeli ZF_WID.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_link:=ZF_WID.fld_fml('ZZ_LINK','*BLANK')();
_ref:=null();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
{? type_of(_link)=type_of(null()) & exec('seek_dok','phr_tab',_link) & ZZ_DOK.KLASA='ZF_POZ'
|| ZF_POZ.cntx_psh();
   ZF_POZ.index('ZZ_DOK');
   ZF_POZ.prefix();
   {? ZF_POZ.find_key(ref_name(_link),_link)
   || _ref:=ZF_POZ.ZF_DEF
   ?};
   ZF_POZ.cntx_pop()
?};
ZZ_DOK.cntx_pop();
{? _ref<>null() & exec('zf_test_wyk','phr_widok',_ref)
|| exec('zf_cmod_pyt','phr_widok')
|| 1
?}


\zf_wid_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknie WER tabeli ZF_WID.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zf_wid_mod_b','phr_widok')


\zf_wid_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Popraw - przed" w oknie WER tabeli ZF_WID.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zf_wid_mod_b','phr_widok')


\zf_wid_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Usuń - przed" w oknie WER tabeli ZF_WID.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zf_wid_mod_b','phr_widok') & exec('zz_xxx_usun_b','phr_widok')


\zf_wid_aktualizuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Aktualizuj - przed" w oknie WER tabeli ZF_WID.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_msg:='Aktualizacja jest dostępna dla uprawnień elementu lub pozycji formularza.'@;
_link:=ZF_WID.fld_fml('ZZ_LINK','*BLANK')();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
{? type_of(_link)=type_of(null()) & exec('seek_dok','phr_tab',_link)
|| _TAB:='@.'+ZZ_DOK.KLASA;
   {? _TAB=!ZF_SKL
   || exec('zf_skl_akt','phr_zf_tab',ZF_SKL.ref(),ZF_WID.ZZ_TYP)
   |? _TAB=!ZF_POZ
   || exec('zf_poz_akt','phr_zf_tab',ZF_POZ.ZF_SKL().ZZ_DOK,ZF_WID.ZZ_TYP)
   || FUN.info(_msg)
   ?}
|| FUN.info(_msg)
?};
ZZ_DOK.cntx_pop()


\zf_wid_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Rekord - po" w oknie WER tabeli ZF_WID.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zf_wid_chk','phr_zf_tab',-menu_txt()='popraw')


\zf_wyk_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZF_WYK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_psh','phr_widok','POC_OCP_RPGO');
exec('setup_icon','phr_widok','ZF_DEF','NAZWA');
ZF_DEF.win_dict('WEO');
ZF_WYK.win_edit('RED');
ZF_WYK.win_patt('WZO');
1


\zf_wyk_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZF_WYK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_pop','phr_widok');
1


\zf_wyk_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Obsługa akcji "Wyświetl - przed" dla okien wertowania tabeli ZF_WYK.
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
{? cur_win(1,1)='TEST'
|| ZF_WYK.display()
|| ZF_DEF.cntx_psh();
   ZF_DEF.win_edit('RED');
   ZF_DEF.display();
   ZF_DEF.cntx_pop()
?};
0


\zf_wyk_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Po edycji wiersza tabeli ZF_WYK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zf_wyk_chk','phr_zf_tab',-menu_txt()='popraw')


\zf_def_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZF_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_psh','phr_widok','ZWS_PAR_PSFO');
ZF_DEF.win_edit('RED');
ZF_DEF.win_patt('WZO');
exec('setup_icon','phr_widok','NAZWA');
1


\zf_def_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZF_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_pop','phr_widok')


\zf_def_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła pozwalająca na wybór grupy rekordów z tabeli ZF_DEF. Dziedzina tabeli musi być ustawiona przed
::       wywołaniem.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ZF_DEF:=tab_tmp(1,
:: Liczba porządkowa odzwierciedla kolejność w oknie.
   'LP','INTEGER','Lp.',
:: Wybrany profil - różne sposoby identyfikacji.
   'SQL','STRING[16]','$ZF_DEF.ref()',
   'UID','STRING[48]','ZF_DEF.uidref()',
   'REF','INTEGER','#ZF_DEF.ref()',
:: Suma kontrolna rekordu.
   'CRC','INTEGER','ZF_DEF.crc()'
);

params_set('ZF_DEF',_ZF_DEF);

_ws:=ZF_DEF.win_sel('?');
ZF_DEF.win_sel('WYBX');
ZF_DEF.select();
ZF_DEF.win_sel(_ws);
_ZF_DEF


\zf_def_wybierzx_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wybierz - grupa przed" w oknie WYBX tabeli ZF_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_nchk()


\zf_def_wybierzx_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wybierz - przed" w oknie WYBX tabeli ZF_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ZF_DEF:=params_get().ZF_DEF;
_ZF_DEF.blank();
_ZF_DEF.LP:=_ZF_DEF.size()+1;
_ZF_DEF.SQL:=$ZF_DEF.ref();
_ZF_DEF.UID:=ZF_DEF.uidref();
_ZF_DEF.REF:=ZF_DEF.ref();
_ZF_DEF.CRC:=ZF_DEF.crc();
_ZF_DEF.add()


\zf_def_wybierzx_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wybierz - po" w oknie WYBX tabeli ZF_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~ZF_DEF.sel_size()
|| sel_exit()
?}


\zf_def_wybierzx_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wybierz - grupa po" w oknie WYBX tabeli ZF_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_exit()


\zf_poz_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli ZF_POZ.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(ZF_POZ)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='ZF_SKL' | _fld='DOKUMENT'
|| _TAB.efld_opt(_we,'enable=%1,mark=%1' [$(ZF_POZ.ZF_SKL & ZF_POZ.DOKUMENT='T')],ZF_POZ,'ZF_RPI','NAZWA')
?};

1


\zf_poz_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZF_POZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_psh','phr_widok','ZWS_PAR_PSFO');
ZF_POZ.win_edit('RED');
ZF_POZ.win_patt('WZO');
exec('setup_icon','phr_widok','ZF_SKL','NAZWA');
exec('setup_icon','phr_widok','ZF_RPI','NAZWA');
ZF_SKL.cntx_psh();
ZF_SKL.f_clear();
ZF_SKL.win_dict('SLO');
ZF_RPI.cntx_psh();
ZF_RPI.f_clear();
ZF_RPI.win_dict('SLO');
1


\zf_poz_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZF_POZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZF_RPI.cntx_pop();
ZF_SKL.cntx_pop();
exec('zz_pom_pop','phr_widok')


\zo_prog_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZO_PROG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_cw:=cur_win(1,1);
_suf:=ZZ_POM.MODUL;
{? _cw='WERO' | _cw='WYBO'
|| exec('zz_pom_psh','phr_widok','POC_OCP_RPGO')
|? _cw='WERA'
|| exec('zz_pom_psh','phr_widok','PBA_BPB_DRLP')
|| exec('zz_pom_psh','phr_widok','')
?};

ZO_PROG.win_edit('RED'+_suf);
ZO_PROG.win_patt('WZO'+_suf);
exec('setup_icon','phr_widok','NAZWA');
1


\zo_prog_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZO_PROG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_pop','phr_widok')


\zo_prog_rodzaj_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Po redagowaniu pola ZO_PROG.RODZAJ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zo_prog_efld_opt','phr_widok')


\zo_prog_rodzaj_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła zwraca wartość opisową pola ZO_PROG.RODZAJ.
::   WE: [_a] [STRING] - Rodzaj programu ocen [domyślnie: ZO_PROG.RODZAJ].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_a')=type_of('') || 1+_a || ZO_PROG.RODZAJ ?};
{? _kod='R' || 'Roczny'@
|? _kod='P' || 'Półroczny'@
|? _kod='K' || 'Kwartalny'@
|? _kod='M' || 'Miesięczny'@
|? _kod='T' || 'Tygodniowy'@
|? _kod='A' || 'Ad hoc'@
|| '???'
?}


\zo_prog_czas_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Przed redagowaniem pola ZO_PROG.CZAS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZO_PROG.RODZAJ='M' | ZO_PROG.RODZAJ='T'


\zo_prog_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Rekord - przed" w oknie WER tabeli ZO_PROG.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:=exec('zo_prog_rodzaj_val','phr_widok');
~~


\zo_prog_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Dołącz - przed" dla tabeli ZO_PROG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZO_PROG.blank();
exec('zo_prog_efld_opt','phr_widok','*',ZO_PROG,ZO_PROG.win_edit('?'))


\zo_prog_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Popraw - przed" dla tabeli ZO_PROG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zo_prog_efld_opt','phr_widok','*',ZO_PROG,ZO_PROG.win_edit('?'))


\zo_prog_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Rekord - po" w oknie WER tabeli ZO_PROG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zo_prog_chk','phr_zo_tab',-menu_txt()='popraw')


\zo_prog_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli ZO_PROG.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(ZO_PROG)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='RODZAJ'
|| _TAB.efld_opt(_we,'enable=%1,mark=%1' [$(ZO_PROG.RODZAJ='M' | ZO_PROG.RODZAJ='T')],ZO_PROG,'CZAS')
?};

1


\zo_prog_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wyświetl" w tabeli ZO_PROG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zo_prog_efld_opt','phr_widok','*',ZO_PROG,ZO_PROG.win_edit('?'));
ZO_PROG.display()


\zo_prof_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZO_PROF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_psh','phr_widok','POC_OCP_RPGO');
exec('setup_icon','phr_widok','ZZ_PROF','NAZWA');
ZZ_PROF.cntx_psh();
ZZ_PROF.prefix();
1


\zo_prof_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Rekord - przed" dla okien wertowania tabeli ZO_PROF.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZO_PROF.ZZ_PROF();
~~


\zo_prof_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Obsługa akcji "Wyświetl - przed" w tabeli ZO_PROF.
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
ZZ_PROF.cntx_psh();
ZZ_PROF.win_edit('RED_R');
ZZ_PROF.display();
ZZ_PROF.cntx_pop();
0


\zo_prof_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZO_PROF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_PROF.cntx_pop();
exec('zz_pom_pop','phr_widok');
1


\zz_profk_wstaw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Obsługa akcji "Wstaw kompetencje - przed".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dok:={? ZZ_PROF.RODZAJ().KOD='S' || ZZ_KRYT || ZZ_PROF ?}.ZZ_DOK;
exec('copyProfComps','phr_dane',_dok)


\zf_poz_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wyświetl - przed" w oknach wertowania tabeli ZF_POZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zf_poz_efld_opt','phr_widok','*',ZF_POZ,'RED');
ZF_POZ.display()


\zf_poz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Rekord - przed" w oknie WER tabeli ZF_POZ.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _ag:='';
   {? ZF_POZ.NUMER=1
   || _ag+='Z(G)'
   ?};
   {? ZF_POZ.NUMER=ZF_POZ.size()
   || _ag+='Z(D)'
   ?};
   ZF_POZ.actions_grayed(cur_win(1,1),_ag)

?}


\za_zest_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZA_ZEST.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_psh','phr_widok','PBA_BPB_DLAN','#PBA_BPB#ZA_ZEST#FORM#');
ZA_ZEST.win_edit('RED');
ZA_ZEST.win_patt('WZO');
ZA_TYP.win_sel('WER');
ZA_TYP.win_edit('RED');
ZA_TYP.f_clear();
exec('setup_icon','phr_widok','NAZWA');
1


\za_zest_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZA_ZEST.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_pop','phr_widok');
1


\za_zest_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Przed "Wyświetl" okienka WER tabeli ZA_ZEST.
::  OLD: \za_zest_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_klasa:=($ZA_ZEST.ZZ_LINK().KLASA)();
_dok:=ZA_ZEST.ZZ_LINK;
_symbol:='';
ZA_ZEST.win_edit(
   {? _klasa=ZZ_TMPT | _klasa=ZZ_TEMP
   || ZZ_TMPT.cntx_psh();
      ZZ_TMPT.index('ZZ_DOK');
      ZZ_TMPT.prefix(ref_name(_dok),_dok);
      {? ZZ_TMPT.first()
      || _symbol:=ZZ_TMPT.SYMBOL
      ?};
      ZZ_TMPT.cntx_pop();
      {? ZA_ZEST.TYP().KOD='T'
      || {? _symbol='SZK_OPIS'
         || {? ZA_ZEST.TRYB='T'
            || 'TEST_ST'
            || 'TEST_SN'
            ?}
         || 'TEST'
         ?}
      |? ZA_ZEST.TYP().KOD='S'
      || 'SONDA'
      || {? _symbol='SZK_OPIS'
         || 'REDS'
         || 'RED'
         ?}
      ?}
   || {? exec('chk_role','#b__box',OPERATOR.USER,'PBA_BPB_PWAN')
      || {? ZA_ZEST.TYP().KOD='T'
         || {? ZA_ZEST.ZZ_LINK().KLASA='SZK_OPIS'
            || 'WID_TS'
            || 'WID_T'
            ?}
         |? ZA_ZEST.TYP().KOD='S'
         || 'WID_S'
         || 'WID'
         ?}
      || {? ZA_ZEST.TYP().KOD='T'
         || 'REDT'
         |? ZA_ZEST.TYP().KOD='S'
         || 'REDS'
         || 'RED'
         ?}
      ?}
   ?}
)


\za_zest_aw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Po "Wyświetl" okienka WER tabeli ZA_ZEST.
::  OLD: \za_zest_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZA_ZEST.display;
ZA_ZEST.win_edit('RED')


\za_zest_slo_kod_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Przed wyświetleniem' dla pola ZA_ZEST.SLO_KOD
::----------------------------------------------------------------------------------------------------------------------
_klasa:='@.'+ZA_ZEST.ZZ_LINK().KLASA;
{? _klasa=!ZZ_TMPT | _klasa=!ZZ_TEMP
|| exec('slownik','ext_slo','ZA_ZESTS')
|| exec('slownik','ext_slo','ZA_ZESTA')
?}


\za_test_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZA_TEST.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_psh','phr_widok','PBA_BPB_DLAN');
exec('setup_icon','phr_widok','TRESC');
{? ZA_ZEST.get()
|| {? ZA_ZEST.TYP().KOD='T'
   || ZA_TEST.win_edit('REDT')
   |? ZA_ZEST.TYP().KOD='S'
   || ZA_TEST.win_edit('REDS')
   || ZA_TEST.win_edit('RED')
   ?}
?}


\za_test_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli ZA_TEST.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_pop','phr_widok');
1


\zz_prof_wa1r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Po odswiezeniu okienka CFG tabeli ZZ_KRYT - kryteria doboru w zakladce doboru ocenianych
::----------------------------------------------------------------------------------------------------------------------
__KRYT:=ZZ_KRYT.ref()


\za_form_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZA_FORM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_win(1,1)='WER_V' | cur_win(1,1)='WER_VP'
|| ZA_FORM.win_edit('REDV')
|? cur_win(1,1)='WER_H' | cur_win(1,1)='WER_HP'
|| ZA_FORM.win_edit('REDH')
|? cur_win(1,1)='TEST' | cur_win(1,1)='TESTP' | cur_win(1,1)='TESTPP' | cur_win(1,1)='PROC_P'
|| ZA_FORM.win_edit('TEST');
   ZA_FORM.win_patt('TEST_W')
?};
ZZ_OSOBA.win_sel('WER');
1


\za_form_slo_kod_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Przed wyświetleniem' dla pola ZA_ZEST.SLO_KOD
::----------------------------------------------------------------------------------------------------------------------
exec('slownik','ext_slo','ZA_FORM')


\za_nota_wartosc_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Przed wyświetleniem' dla pola ZA_NOTA.WARTOSC
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZA_OPIS.TEKST:=
   {? ZA_NOTA.ZA_TEST().ZZ_MET().KOD='OO'
   || exec('memo_get','phr_tab',ZA_NOTA)
   || ''
   ?};
_met:=ZA_NOTA.ZA_TEST().ZZ_MET().KOD;
_met<>'OO' & +_met


\za_opis_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Po "Wyświetl" okienka WER tabeli ZA_OPIS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZA_OPIS.REF
|| ZA_NOTA.cntx_psh;
   ZA_NOTA.prefix;
   ZA_NOTA.seek(ZA_OPIS.REF,);
   {? ZA_NOTA.memo_get(,'NOTA')
   || ZA_NOTA.memo_view(,'NOTA')
   ?};
   ZA_NOTA.cntx_pop
?}


\za_test_za_test_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_TEST.ZA_TEST.
::----------------------------------------------------------------------------------------------------------------------
ZA_TEST.ZA_TEST


\za_test_zz_met_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_TEST.ZZ_MET.
::----------------------------------------------------------------------------------------------------------------------
ZA_ZEST.ZZ_MET


\za_test_za_zest_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_TEST.ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
ZA_ZEST.ref()


\za_test_dnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Obsluga drag and drop dla okienek tabeli ZA_TEST.
::   WE: _a - identyfikator okienka
::       _b - alias do tabeli zrodlowej
::       _c - lista upuszczonych rekordow
::----------------------------------------------------------------------------------------------------------------------
_state:=no_msg(1);
{? var_pres('_c')<>type_of(SYSLOG)
|| return(0)
?};

ZA_TEST.cntx_psh();
{? _b=ZA_TEST
:  upuszczenie rekordu z okienka pytan
:  przesuniecie upuszczonych zapisow w drzewku
|| errno();
   _test:=1;
   do();
   _b.ZA_ZEST();
   {? _c.first
   || {!
      |? {? _b.seek(_c.REF,)
         || _b.ZA_TEST:=#dnd_info('dest_record');
            {? __CHK.index(_b,1)=''
            || _test:=_b.put();
               ZA_TEST.cntx_psh();
               ZA_TEST.prefix(ZA_ZEST.ref(),ZA_TEST.ref());
               _loop:=ZA_TEST.first();
               {!
               |? _loop
               |! ZA_TEST.put(1);
                  _loop:=ZA_TEST.next()
               !};
               ZA_TEST.cntx_pop()
            || _test:=0
            ?}
         ?};
         _c.next
      !};
      {? ~_test
      || undo();
         FUN.emsg(
            {? errno()=377
            || 'Wykryto próbę naruszenia struktury hierarchicznej.\n'
               'Reorganizacja pytań została anulowana.'@
            || 'Reorganizacja pytań nie powiodła się.'@
            ?}
         )
      ?};
      end()
   ?}
?};
ZA_TEST.cntx_pop();
no_msg(_state)


\za_skl_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZA_SKL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZA_SKL.win_edit('RED');
exec('zz_pom_psh','phr_widok','PBA_BPB_DLAN');
1


\za_skl_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli ZA_SKL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_pop','phr_widok','PBA_BPB_DLAN');
1


\za_skl_za_typ_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wzorzec' dla pola ZA_ZEST.ZA_TYP
::----------------------------------------------------------------------------------------------------------------------
ZA_POM.TYP:=#ZA_TEST.ZA_ZEST().ZA_TYP;
''


\za_skl_za_test_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_SKL.ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
ZA_TEST.ref()


\za_zest_slo_kod_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_ZEST.SLO_KOD
::----------------------------------------------------------------------------------------------------------------------
_klasa:='@.'+ZA_ZEST.ZZ_LINK().KLASA;
{? _klasa=!ZZ_TMPT | _klasa=!ZZ_TEMP
|| exec('kod','ext_slo','ZA_ZESTS','W')
|| exec('kod','ext_slo','ZA_ZESTA','P')
?}


\za_zest_za_typ_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wzorzec' dla pola ZA_ZEST.ZA_TYP
::----------------------------------------------------------------------------------------------------------------------
ZA_POM.TYP:=ZA_POM.MIEJSCE;
''


\za_typ_za_typ_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_TYP.ZA_TYP.
::----------------------------------------------------------------------------------------------------------------------
ZA_POM.TYP


\za_zest_def_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła tworzy okno grupowe do obsługi definiowania ankiet.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_cfg:=obj_new('window','ZA_ZEST','ZA_TEST','ZA_SKL','ZZ_KRYT');
_kod:='';
_akt:='';
_cfg.ZA_ZEST:=obj_new('ws');
{? _a=ZA_INST
|| _kod:=ZA_INST.STATUS().KOD;
   exec('zz_tmpt_ref','phr_dane',ZA_INST)
|? _a=ZO_PROC
|| _akt:=ZO_PROC.A;
   _zam:=ZO_PROC.Z;
   exec('zz_tmpt_ref','phr_dane',ZO_PROC)
|? _a=SZK_OPIS
|| exec('zz_tmpt_ref','phr_dane',SZK_OPIS)
?};

_check:=
   {? _a=ZA_INST | _a=ZO_PROC
   || (_kod='A' | _akt='T' |  (_akt='N' & _zam<>'T'))
   |? _a=SZK_OPIS
   || 1=1
   ?};

_cfg.ZA_ZEST.ws:=
   {? _check
   || {? exec('chk_role','#b__box',OPERATOR.USER,'PBA_BPB_PWAN')
      || {? _a<>SZK_OPIS | (_a=SZK_OPIS & SZK_OPIS.TRYB='T')
         || 'WERZW'
         || 'WERZWP'
         ?}
      || {? _a<>SZK_OPIS | (_a=SZK_OPIS & SZK_OPIS.TRYB='T')
         || 'WERBW'
         || 'WERBWP'
         ?}
      ?}
   || {? exec('chk_role','#b__box',OPERATOR.USER,'PBA_BPB_PWAN')
      || {? _a<>SZK_OPIS | (_a=SZK_OPIS & SZK_OPIS.TRYB='T')
         || 'FORM'
         || 'FORMP'
         ?}
      || {? _a<>SZK_OPIS | (_a=SZK_OPIS & SZK_OPIS.TRYB='T')
         || 'FORMBW'
         || 'FORMBWP'
         ?}
      ?}
   ?};

_cfg.ZA_TEST:=obj_new('wo','wt','ws');
_cfg.ZA_TEST.wo:='WER';
_cfg.ZA_TEST.wt:='WER_T';
_cfg.ZA_TEST.ws:='WER_S';

_cfg.ZA_SKL:=obj_new('ws');
_cfg.ZA_SKL.ws:='WER';

_cfg.ZZ_KRYT:=obj_new('ws');
_cfg.ZZ_KRYT.ws:='ANK';

_mode:='maximized';
: grupowe okienko modulu ankiet
_wnd:=ZA_ZEST.grp_make('Definicje ankiet'@,
   "
      __tab:='D'
   ",
   'def_ank',,,
   "
      &__tab;
      ZA_TEST.prefix;
      ZA_TEST.f_clear(0);
      1
   "
);
: obsługa drag'n'drop dla tabeli ZA_TEST - pytania ankiety
{? exec('chk_role','#b__box',OPERATOR.USER,'PBA_BPB_DLAN')
|| ZA_TEST.dnd_sel(_cfg.ZA_TEST.wo,,'records.ZA_TEST',
      "exec('za_test_dnd','phr_widok','WER',ZA_TEST,dnd_info('dropped_records'))"
   );
   ZA_TEST.dnd_sel(_cfg.ZA_TEST.wt,,'records.ZA_TEST',
      "exec('za_test_dnd','phr_widok','WER',ZA_TEST,dnd_info('dropped_records'))"
   );
   ZA_TEST.dnd_sel(_cfg.ZA_TEST.ws,,'records.ZA_TEST',
   "exec('za_test_dnd','phr_widok','WER',ZA_TEST,dnd_info('dropped_records'))"
);
   ZZ_KRYT.dnd_sel('ANK',,'records.ZZ_KRYT',"exec('zz_kryt_dnd','phr_widok')")
?};
:  lista ankiet
ZA_ZEST.grp_sel(_wnd,ZA_ZEST,_cfg.ZA_ZEST.ws,,
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag:='';
      {? _cfg.ZA_ZEST.ws='FORM' | _cfg.ZA_ZEST.ws='FORMBW'
      || ZA_ZEST.actions(_cfg.ZA_ZEST.ws,'P',,1)
      ?};
      {? ZA_ZEST.SLO_KOD().KOD<>'P'
      || _ag:='p';
         {? ZA_ZEST.TYP().KOD='T'
         || _ag+='W'
         ?}
      || {? ZA_ZEST.ZZ_MET().KOD='OO' | ZA_ZEST.TYP().KOD='T' | ZA_ZEST.TYP().KOD='S'
         || _ag:='W'
         || _ag:=''
         ?}
      ?};
      {? ZA_ZEST.TYP().KOD='T' | ZA_ZEST.TYP().KOD='S'
      || ZA_ZEST.actions(_cfg.ZA_ZEST.ws,'W',,1)
      || ZA_ZEST.actions(_cfg.ZA_ZEST.ws,'',,1)
      ?};
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || tab_hide(1,,'tabs');
         tab_hide(2,,'tabs');
         tab_hide(3,,'tabs');
         tab_hide(4,,'tabs')
      || {? ZA_ZEST.TYP().KOD='T'
         || tab_hide(1,,'tabs');
            tab_hide(3,,'tabs');
            tab_show(2,'tabs');
            {? __tab='D'
            || tab_sel(2,'tabs')
            ?};
            grp_disp(ZA_TEST,_cfg.ZA_TEST.wt,1)
         |? ZA_ZEST.TYP().KOD='S'
         || tab_hide(1,,'tabs');
            tab_hide(2,,'tabs');
            tab_show(3,'tabs');
            {? __tab='D'
            || tab_sel(3,'tabs')
            ?};
            grp_disp(ZA_TEST,_cfg.ZA_TEST.ws,1)
         || tab_hide(2,,'tabs');
            tab_hide(3,,'tabs');
            tab_show(1,'tabs');
            {? __tab='D'
            || tab_sel(1,'tabs')
            ?};
            grp_disp(ZA_TEST,_cfg.ZA_TEST.wo,1)
         ?};
         {? ZA_ZEST.DOBOR='T'
         || tab_show(4,'tabs');
            {? __tab='K'
            || tab_sel(4,'tabs')
            ?};
            grp_disp(ZZ_KRYT,_cfg.ZZ_KRYT.ws,1,1)
         || tab_hide(4,,'tabs')
         ?}
      ?};
      ZA_ZEST.actions_grayed(_cfg.ZA_ZEST.ws,_ag);
      grp_disp(ZA_TEST,_cfg.ZA_TEST.wo,1);
      grp_disp(ZA_TEST,_cfg.ZA_TEST.wt,1);
      grp_disp(ZA_TEST,_cfg.ZA_TEST.ws,1);
      grp_disp(ZZ_KRYT,_cfg.ZZ_KRYT.ws,1)
   ",,,
   5,,,,,
   'maximized_with_title'
);
ZA_ZEST.grp_splt(_wnd,,'horizontal','tabs',',33%');
:  definicja ankiety
ZA_ZEST.grp_sel(_wnd,ZA_TEST,_cfg.ZA_TEST.wo,'Definicja'@,
   "
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag_ne:='';
      _ag_e:='';
      {? ZA_ZEST.SLO_KOD().KOD<>'P' | _cfg.ZA_ZEST.ws='FORM'
      || _ag_ne:='dpuZ(DW)';
         {? ZA_TEST.ZZ_MET().KOD='OO'
         || _ag_ne+='W'
         ?};
         _ag_e:=':d'
      || {? ZA_TEST.ZZ_MET().KOD='OO'
         || _ag_ne:='W'
         ?}
      ?};
      ZA_TEST.actions_grayed(_cfg.ZA_TEST.wo,_ag_ne+_ag_e);
      grp_disp(ZA_SKL,_cfg.ZA_SKL.ws,1)
   ",,,
   10,
   "
      __tab:='D';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_TEST.f_clear(0);
      ZA_TEST.index('NUMER');
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || ZA_TEST.prefix(ZA_ZEST.ref())
      ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.tab_splt(_wnd,,'horizontal','bottom');
ZA_ZEST.grp_sel(_wnd,ZA_SKL,_cfg.ZA_SKL.ws,,
   "   params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag_ne:='';
      _ag_e:='';
      {? ZA_ZEST.SLO_KOD().KOD<>'P' | _cfg.ZA_ZEST.ws='FORM'
      || _ag_ne:='dpu';
         _ag_e:=':d'
      ?};
      ZA_SKL.actions_grayed(_cfg.ZA_SKL.ws,_ag_ne+_ag_e)
   ",,,7,
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_SKL.index('OPIS');
      {? grp_empty(ZA_TEST,_cfg.ZA_TEST.wo)
      || '#disable'
      || ZA_SKL.prefix(ZA_TEST.ref())
      ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.grp_sel(_wnd,ZA_TEST,_cfg.ZA_TEST.wt,'Definicja'@,
   "
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag_ne:='';
      _ag_e:='';
      {? ZA_ZEST.SLO_KOD().KOD<>'P' | _cfg.ZA_ZEST.ws='FORM'
      || _ag_ne:='dpuZ(DW)';
         _ag_e:=':d';
         {? ZA_TEST.RODZ().KOD='O' | ZA_TEST.RODZ().KOD=''
         || _ag_ne+='O'
         ?}
      || {? ZA_TEST.RODZ().KOD='O' | ZA_TEST.RODZ().KOD=''
         || _ag_ne:='O'
         ?}
      ?};
      ZA_TEST.actions_grayed(_cfg.ZA_TEST.wt,_ag_ne+_ag_e)
   ",,,
   10,
   "
      __tab:='D';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_TEST.f_clear(0);
      ZA_TEST.index('NUMER');
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || ZA_TEST.prefix(ZA_ZEST.ref())
      ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.grp_sel(_wnd,ZA_TEST,_cfg.ZA_TEST.ws,'Definicja'@,
   "
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag_ne:='';
      _ag_e:='';
      {? ZA_ZEST.SLO_KOD().KOD<>'P' | _cfg.ZA_ZEST.ws='FORM'
      || _ag_ne:='dpuWZ(DW)';
         _ag_e:=':d';
         {? ZA_TEST.RODZ().KOD='O' | ZA_TEST.RODZ().KOD=''
         || _ag_ne+='O'
         ?}
      || {? ZA_TEST.RODZ().KOD='O' | ZA_TEST.RODZ().KOD=''
         || _ag_ne:='O'
         ?}
      ?};
      ZA_TEST.actions_grayed(_cfg.ZA_TEST.ws,_ag_ne+_ag_e)
   ",,,
   10,
   "
      __tab:='D';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_TEST.f_clear(0);
      ZA_TEST.index('NUMER');
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || ZA_TEST.prefix(ZA_ZEST.ref())
      ?}
   ",,,,
   'maximized_with_title'
);
:  kryteria doboru
ZA_ZEST.grp_sel(_wnd,ZZ_KRYT,_cfg.ZZ_KRYT.ws,'Dobór wypełniających'@,
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
      exec('zz_prof_wa1r','phr_widok',ZF_DEF);
      _ag_ne:='';
      _ag_e:='';
      {? ZA_ZEST.SLO_KOD().KOD<>'P' | _cfg.ZA_ZEST.ws='FORM'
      || _ag_ne:='dpuWT';
         _ag_e:=':dW'
      ?};
      ZZ_KRYT.actions_grayed(_cfg.ZZ_KRYT.ws,_ag_ne+_ag_e)
   ",,,,
   "
      __tab:='K';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || ZZ_KRYT.prefix(ZA_ZEST.NP_DOK,ZA_ZEST.ZZ_DOK,exec('typ_op','phr_dane'))
      ?}
   ",,,,
   _mode
);

_cfg.window:=_wnd;
_cfg


\za_zest_def_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła konfiguruje środowisko definicji ankiet - wykorzystywane w badaniach opinii, rekrutacji i szkoleniach.
::   WE: _a - alias tabeli dla której tworzone będą ankiety [RP_PROC/ZA_INST/SZK_OPIS/ZO_PROC]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: konfiguracja widoku okna grupowego
_cfg:=exec('za_zest_def_cfg','phr_widok',_a);
params_set('cfg',_cfg);

:: konfiguracja ankiet
_old:=exec('ankiety_ust','phr_widok',_a);

:: słownik metod oceny
ZZ_MET.cntx_psh();
ZZ_MET.f_clear();
ZZ_MET.prefix();
ZZ_MET.win_dict('SLO');

:: rodzaj ankiety
ZA_TYP.cntx_psh();
ZA_TYP.index('OPIS');

:: kryteria doboru
ZZ_KRYT.cntx_psh();
ZZ_KRYT.index('UNIQUE');
ZZ_KRYT.fld_fml('ZZ_LINK','BLANK',$'ZA_ZEST.ZZ_DOK');
ZZ_KRYT.fld_fml('ZZ_TYP','BLANK',"exec('typ_op','phr_dane')");

:: pytania ankiety
ZA_TEST.cntx_psh();
ZA_TEST.index('NUMER');

ZA_ZEST.cntx_psh();
ZA_ZEST.index('NAZWA');
ZA_ZEST.prefix(_a.NP_DOK,_a.ZZ_DOK,exec('ref_firma','ustawienia'));

:: wywołanie okna
ZA_ZEST.win_sel(_cfg.window);
ZA_ZEST.select();

ZZ_KRYT.dnd_sel('CFG',,'records.ZZ_KRYT',"");

ZZ_KRYT.fld_fml('ZZ_LINK','BLANK');
ZZ_KRYT.fld_fml('ZZ_TYP','BLANK');
ZA_ZEST.fld_fml('ZZ_LINK','BLANK',_old);


ZA_TEST.cntx_pop();
ZA_ZEST.cntx_pop();
ZZ_MET.cntx_pop();
ZA_TYP.cntx_pop();
ZZ_KRYT.cntx_pop();
~~


\zo_proc_date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Ustala datę na podstawie daty początkowej i definicji programu.
::   WE: _a - data początkowa
::   WY: data końcowa
::  OLD: \zo_proc_date/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZO_PROC.ZO_PROG();
_do:=_a;

_tm:=0;
_mc:=_a~1*12+_a~2;
{? ZO_PROG.RODZAJ='R' || _tm:=12
|? ZO_PROG.RODZAJ='P' || _tm:=6
|? ZO_PROG.RODZAJ='K' || _tm:=3
|? ZO_PROG.RODZAJ='M' || _tm:=1
|? ZO_PROG.RODZAJ='T'
|| _do+=ZO_PROG.CZAS*7;
   return(_do-1)
|| return(_a)
?};

_mc+=_tm*ZO_PROG.CZAS;
_do:=date(_mc%12,_mc%*12,0);
{? _a~3<=_do~3
|| _do:=date(_do~1,_do~2,_a~3)-1
|| _do
?}


\zo_proc_okr_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przed edycją pola OKRES_DO tabeli ZO_PROC.
::   WE:
::   WY: 0/1 - zależnie od tego, czy pole ma być dostępne do edycji
::  OLD: \zo_proc_okr_be/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZO_PROC.ZO_PROG().RODZAJ='A'


\zo_proc_okr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Po edycji pola OKRES_OD tabeli ZO_PROC.
::   WE:
::   WY: 1
::  OLD: \zo_proc_okr_ae/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZO_PROC.ZO_PROG().RODZAJ<>'A' & ZO_PROC.OKRES_OD<>date(0,0,0)
|| ZO_PROC.OKRES_DO:=exec('zo_proc_date','phr_widok',ZO_PROC.OKRES_OD);
   {? ZO_PROC.PLAN_OD<ZO_PROC.OKRES_DO
   || ZO_PROC.PLAN_OD:=ZO_PROC.OKRES_DO
   ?};
   {? ZO_PROC.PLAN_DO<ZO_PROC.OKRES_DO
   || ZO_PROC.PLAN_DO:=ZO_PROC.OKRES_DO
   ?};
   {? ZO_PROC.DATA<ZO_PROC.OKRES_DO
   || ZO_PROC.DATA:=ZO_PROC.OKRES_DO
   ?}
?};
1


\zo_proc_plan_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przed edycją pola PLAN_DO tabeli ZO_PROC.
::   WE:
::   WY: 0/1 - zależnie od tego, czy pole ma być dostępne do edycji
::  OLD: \zo_proc_plan_be/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZO_PROC.ZO_PROG().PLAN_D=0


\zo_proc_plan_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Po edycji pola PLAN_OD tabeli ZO_PROC.
::   WE:
::   WY: 1
::  OLD: \zo_proc_plan_ae/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZO_PROC.ZO_PROG().PLAN_D>0
|| ZO_PROC.PLAN_DO:=ZO_PROC.PLAN_OD+ZO_PROG.PLAN_D
?};
1


\zo_proc_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Obsługa po akcji "Dołącz" okienka tabeli ZO_PROC.
::   WE:
::   WY:
::  OLD: \zo_proc_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZO_PROC.blank();
ZO_PROC.cntx_psh();
ZO_PROC.index('OKRES_OD');
ZO_PROC.prefix(ZO_PROG.ref());
_od:=date(0,0,0);
_dp:=0;
{? ZO_PROC.last()
|| _od:=ZO_PROC.OKRES_DO;
   _dp:=ZO_PROC.PLAN_OD-_od
?};
ZO_PROC.cntx_pop();
{? _od<>date(0,0,0)
|| ZO_PROC.OKRES_OD:=_od+1
|| ZO_PROC.OKRES_OD:=
      {? ZO_PROG.RODZAJ='R' || date(,1,1)
      |? ZO_PROG.RODZAJ='P' || date(,{? date()~2<=6 || 1 || 7 ?},1)
      |? ZO_PROG.RODZAJ='K' || date(,date()~2%3+1,1)
      |? ZO_PROG.RODZAJ='M' || date(,,1)
      |? ZO_PROG.RODZAJ='T' || date()-date()~4+1
      || date
      ?}
?};
ZO_PROC.OKRES_DO:=exec('zo_proc_date','phr_widok',ZO_PROC.OKRES_OD);
ZO_PROC.DATA:=ZO_PROC.OKRES_DO;
ZO_PROC.PLAN_OD:=ZO_PROC.OKRES_DO+_dp;
ZO_PROC.PLAN_DO:=ZO_PROC.PLAN_OD+ZO_PROG.PLAN_D;

{? ZO_PROC.edit("exec('zo_proc_ae','phr_widok',0)")
|| ZO_PROC.add()
?}


\zo_proc_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Obsługa po akcji "Popraw" okienka tabeli ZO_PROC.
::   WE:
::   WY:
::  OLD: \zo_proc_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZO_PROC.get()
|| {? ZO_PROC.edit("exec('zo_proc_ae','phr_widok',1)")
   || ZO_PROC.put()
   ?}
?}


\zo_proc_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Po redakcji danych tabeli ZO_PROC.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY:
::  OLD: \zo_proc_check/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
exec('zo_proc_chk','phr_zo_tab',_a)


\zo_proc_xxx_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Okienko przed okien tabeli ZO_PROC.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('setup_icon','phr_widok','R');

_modul:=ZZ_POM.MODUL;
{? _modul='A'
|| exec('zz_pom_psh','phr_widok','PBA_BPB_DLPR');
   ZO_PROC.win_edit('ANK')
|| exec('zz_pom_psh','phr_widok','POC_OCP_RPRO','#POC_OCP_RPRO#ZO_PROC#WER#');
   ZO_PROC.win_edit('RED')
?};
1


\zo_proc_xxx_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Okienko po okien tabeli ZO_PROC.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_pop','phr_widok');
1


\zo_osoba_zo_proc_wyslij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa wysyłania powiadomień dla bieżącego rekordu tabeli ZO_PROC.
::   WE: _a [STRING] - Identyfikator czynności, która powinna zostać uruchomiona w pętli po wszystkich oceniających
::                     związanych z bieżącą sesją ocen.
::       _b [STRING] - Identyfikator odbiorców:
::                      E - oceniający;
::                      O - Oceniani.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:='\\zo_osoba_zo_proc_wyslij/phr_widok.fml';

{? var_pres('_a')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak parametru wywołania %1.'@ ['UID']);
   return()
|? ~exec('chk_role','#b__box',OPERATOR.USER,_a)
|| FUN.emsg(_fml+'\n'+'Brak uprawnień do uruchomienia czynności %1.'@ [_a]);
   return()
|| _uid:=_a
?};
{? var_pres('_b')=type_of('') & (_b='E' | _b='O')
|| _rodzaj:=_b
|| FUN.emsg(_fml+'\n'+'Brak lub nieprawidłowa wartość parametru %1.'@ ['RODZAJ']);
   return()
?};

_name:=exec('name','#b_action',_uid);
{? ~(
      (_rodzaj='E' & FUN.ask('Czy na pewno przygotować wszystkim oceniającym powiadomienie\n"%1"?'@ [_name])) |
      (_rodzaj='O' & FUN.ask('Czy na pewno przygotować wszystkim ocenianym powiadomienie\n"%1"?'@ [_name]))
   )
|| return()
?};

ZO_OSOBA.cntx_psh();
ZO_OSOBA.index('ZO_OSOBA');
ZO_OSOBA.prefix(_rodzaj,ZO_PROC.ref());
{? ZO_OSOBA.first()
|| _SENDTAB:=exec('sendtab','phr_poczta',_name);

   ZZ_OSOBA.cntx_psh();
   ZZ_OSOBA.prefix();

   _cntx:=obj_new('RESULT','SUB','TO','BODYH');
   _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:=_uid;
   _params.GRUPA:='T';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   _params.CONTEXT:=_cntx;
   _params.QUIET:='T';
   FUN.prg_start(ZO_OSOBA.size());
   {!
   |? _SENDTAB.blank();
      _SENDTAB.NAZWISKO:=ZO_OSOBA.ZZ_OSOBA().NAZWISKO;
      _SENDTAB.PIERWSZE:=ZZ_OSOBA.PIERWSZE;

      _next:=FUN.prg_next(,'%1 - %2\n%3'@ [_name,'przygotowanie'@,_SENDTAB.NAZWISKO+' '+_SENDTAB.PIERWSZE]);

      _params.UIDREF:=ZO_OSOBA.uidref();
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZO_OSOBA',ZO_OSOBA.ref());
      {! _lp:=1 .. obj_len(_cntx)
      |! _cntx[_lp]:=''
      !};
      exec('mp_run','#b__box',_params);
      _SENDTAB.RESULT:=_cntx.RESULT;
      _SENDTAB.SUB:=_cntx.SUB;
      _SENDTAB.TO:=_cntx.TO;
      _SENDTAB.memo_set(_cntx.BODYH,'BODYH');
      _SENDTAB.add();
      _SENDTAB.memo_put(,'BODYH');

      _next & ZO_OSOBA.next()
   !};
   FUN.prg_stop();
   ZZ_OSOBA.cntx_pop();

   _SENDTAB.select()
|| FUN.info('Nie znaleziono formularzy. Utworzenie powiadomień nie jest możliwe.'@)
?};
ZO_OSOBA.cntx_pop();

~~


\zo_osoba_wyslij_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wyślij - grupa przed" dla powiadomienia (czynności) przekazanej parametrem.
::   WE:  _a  [STRING] - Typ uczestnika sesji ocen (E - oceniający/O - oceniany).
::        _b  [STRING] - Identyfikator czynności, która powinna zostać uruchomiona.
::       [_c] [RULE]   - Formuła podczytująca rekord tabeli ZO_OSOBA [domyślnie: ""].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:='\\zo_osoba_wyslij_bg/phr_widok.fml';

{? var_pres('_a')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak parametru wywołania %1.'@ ['TYP']);
   return(0)
|? _a<>'O' & _a<>'E'
|| FUN.emsg(_fml+'\n'+'Nieprawidłowa wartość parametru %1.'@ ['TYP']);
   return(0)

|? var_pres('_b')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak parametru wywołania %1.'@ ['UID']);
   return(0)
|? ~exec('chk_role','#b__box',OPERATOR.USER,_b)
|| FUN.emsg(_fml+'\n'+'Brak uprawnień do uruchomienia czynności %1.'@ [_b]);
   return(0)
?};
_typ:=_a;
_uid:=_b;

_name:=exec('name','#b_action',_uid);

{? (_typ='O' & FUN.ask('Czy na pewno przygotować zaznaczonym ocenianym powiadomienie\n"%1"?'@ [_name])) |
   (_typ='E' & FUN.ask('Czy na pewno przygotować zaznaczonym oceniającym powiadomienie\n"%1"?'@ [_name]))
|| _ctx:=params_get().ctx;
   {? type_of(_ctx.SENDTAB)=type_of(ZO_OSOBA)
   || obj_del(_ctx.SENDTAB)
   ?};
   _ctx.SENDTAB:=exec('sendtab','phr_poczta',_name);
   1
?}


\zo_osoba_wyslij_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wyślij - przed" dla powiadomienia (czynności) przekazanej parametrem.
::   WE:  _a  [STRING] - Typ uczestnika sesji ocen (E - oceniający/O - oceniany).
::        _b  [STRING] - Identyfikator czynności, która powinna zostać uruchomiona.
::       [_c] [RULE]   - Formuła podczytująca rekord tabeli ZO_OSOBA [domyślnie: ""].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:='\\zo_osoba_wyslij_b/phr_widok.fml';

{? var_pres('_a')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak parametru wywołania %1.'@ ['TYP']);
   return(0)
|? _a<>'O' & _a<>'E'
|| FUN.emsg(_fml+'\n'+'Nieprawidłowa wartość parametru %1.'@ ['TYP']);
   return(0)

|? var_pres('_b')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak parametru wywołania %1.'@ ['UID']);
   return(0)
|? ~exec('chk_role','#b__box',OPERATOR.USER,_b)
|| FUN.emsg(_fml+'\n'+'Brak uprawnień do uruchomienia czynności %1.'@ [_b]);
   return(0)
?};
_typ:=_a;
_uid:=_b;

_name:=exec('name','#b_action',_uid);

_ctx:=params_get().ctx;
{? ~cur_tab(1,1).sel_size()
:: Bieżącą tabelą wcale nie musi być ZO_OSOBA - stąd odwołanie poprzez cur_tab(1,1).
|| {? type_of(_ctx.SENDTAB)=type_of(ZO_OSOBA)
   || obj_del(_ctx.SENDTAB)
   ?};
   _ctx.SENDTAB:=exec('sendtab','phr_poczta',_name)
?};
_SENDTAB:=_ctx.SENDTAB;

{? var_pres('_c')=type_of("")
:: Podczytanie rekordu tabeli ZO_OSOBA.
|| ZO_OSOBA.cntx_psh();
   ZO_OSOBA.prefix();
   _c()
?};

_cntx:=obj_new('RESULT','SUB','TO','BODYH');
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:=_uid;
_params.UIDREF:=ZO_OSOBA.uidref();
_params.GRUPA:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZO_OSOBA',ZO_OSOBA.ref());
_params.CONTEXT:=_cntx;
_params.QUIET:='T';
exec('mp_run','#b__box',_params);
ZZ_OSOBA.cntx_psh();
ZZ_OSOBA.prefix();
_SENDTAB.blank();
_SENDTAB.NAZWISKO:=ZO_OSOBA.ZZ_OSOBA().NAZWISKO;
_SENDTAB.PIERWSZE:=ZZ_OSOBA.PIERWSZE;
_SENDTAB.RESULT:=_cntx.RESULT;
_SENDTAB.SUB:=_cntx.SUB;
_SENDTAB.TO:=_cntx.TO;
_SENDTAB.add();
_SENDTAB.memo_set(_cntx.BODYH,'BODYH');
_SENDTAB.memo_put(,'BODYH');
ZZ_OSOBA.cntx_pop();

{? var_pres('_c')=type_of("")
|| ZO_OSOBA.cntx_pop()
?};

1


\zo_osoba_wyslij_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wyślij - po" dla powiadomienia (czynności) przekazanej parametrem.
::   WE:  _a  [STRING] - Typ uczestnika sesji ocen (E - oceniający/O - oceniany).
::        _b  [STRING] - Identyfikator czynności, która powinna zostać uruchomiona.
::       [_c] [RULE]   - Formuła podczytująca rekord tabeli ZO_OSOBA [domyślnie: ""].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~cur_tab(1,1).sel_size()
:: Bieżącą tabelą wcale nie musi być ZO_OSOBA - stąd odwołanie poprzez cur_tab(1,1).
|| _ctx:=params_get().ctx;
   _ctx.SENDTAB.select();
   obj_del(_ctx.SENDTAB)
?}


\zo_osoba_wyslij_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wyślij - grupa po" dla powiadomienia (czynności) przekazanej parametrem.
::   WE:  _a  [STRING] - Typ uczestnika sesji ocen (E - oceniający/O - oceniany).
::        _b  [STRING] - Identyfikator czynności, która powinna zostać uruchomiona.
::       [_c] [RULE]   - Formuła podczytująca rekord tabeli ZO_OSOBA [domyślnie: ""].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ctx:=params_get().ctx;
_ctx.SENDTAB.select();
obj_del(_ctx.SENDTAB)


\zo_cel_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli ZO_CEL.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr obowiązkowy wyłącznie dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(ZO_CEL)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld=''
:: Zasadniczo wartości pola ZO_CEL.ROZWOJ nie można zmieniać.
:: Odpowiednią modyfikację należy wykonać przed akcją Dołącz.
|| _set(_TAB,_we,_grp_ident,'editable=grayed',ZO_CEL,'ROZWOJ')
?};
{? _fld='' | _fld='Z'
|| _sval:={? ZO_CEL.Z='T' || 'grayed' || '1' ?};
   _set(_TAB,_we,_grp_ident,'editable=%1' [_sval],ZO_CEL,'S')
?};

1


\zo_cel_z_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Po redagowaniu pola ZO_CEL.Z.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZO_CEL.Z='T'
|| ZO_CEL.S:=100
:: Czyli cel nie jest zrealizowany, jeżeli więc postęp był ustawiony na 100% (i tylko na 100), to zmieniamy na 0%.
|? ZO_CEL.S=100
|| ZO_CEL.S:=0
?};
exec('zo_cel_efld_opt','phr_widok')


\zo_cel_s_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Po redagowaniu pola ZO_CEL.S.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZO_CEL.S=100
|| ZO_CEL.Z:='T';
   exec('zo_cel_efld_opt','phr_widok','1',,,,'Z')
?};
~~


\za_zest_form_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła tworzy okno grupowe do obsługi formularzy ankiet.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod:='';
{? _a=ZA_INST
|| _kod:=ZA_INST.STATUS().KOD
|? _a=ZO_PROC
|| _kod:=ZO_PROC.Z
?};

_cfg:=obj_new('window','kod','ZA_ZEST','ZA_TEST','ZA_WAR','ZA_OPIS','ZA_NOTA','ZA_FORM','ZA_NOTAW');

_cfg.kod:=obj_new('kod');
_cfg.kod.kod:={? _kod='Z' | _kod='T' || 0 || 1 ?};

_cfg.ZA_ZEST:=obj_new('ws');
_cfg.ZA_ZEST.ws:=
   {? exec('chk_role','#b__box',OPERATOR.USER,'PBA_BPB_PWAN')
   || {? _a<>SZK_OPIS | (_a=SZK_OPIS & SZK_OPIS.TRYB='T')
      || 'FORM'
      || 'FORMP'
      ?}
   || {? _a<>SZK_OPIS | (_a=SZK_OPIS & SZK_OPIS.TRYB='T')
      || 'FORMBW'
      || 'FORMBWP'
      ?}
   ?};
params_set('win',_cfg.ZA_ZEST.ws);

_cfg.ZA_TEST:=obj_new('ws');
_cfg.ZA_TEST.ws:='OCENA';

_cfg.ZA_WAR:=obj_new('ws');
_cfg.ZA_WAR.ws:='WER';

_cfg.ZA_NOTA:=obj_new('wv','wh','wt');
_cfg.ZA_NOTA.wv:='WER_V';
_cfg.ZA_NOTA.wh:='WER_H';
_cfg.ZA_NOTA.wt:='TEST';

_cfg.ZA_FORM:=obj_new('wv','wh','wt');
_cfg.ZA_FORM.wv:='WER_V';
_cfg.ZA_FORM.wh:='WER_H';
_cfg.ZA_FORM.wt:={? _a<>SZK_OPIS | (_a=SZK_OPIS & SZK_OPIS.TRYB='T') || 'TEST' || 'TESTP' ?};

_cfg.ZA_OPIS:=obj_new('ws');
_cfg.ZA_OPIS.ws:='WER';

_cfg.ZA_NOTAW:=obj_new('ws','wt');
_cfg.ZA_NOTAW.ws:='SONDA';
_cfg.ZA_NOTAW.wt:='TEST';

_mode:='maximized';
: grupowe okienko modulu ankiet
_wnd:=ZA_ZEST.grp_make('Formularze ankiet'@,
   "  ZA_NOTA.prefix();
      ZA_TEST.index('NUMER');
      __tab:='N';
      ~~
   ",
   'form_ank',,,
   "  ZA_TEST.f_clear(0);
      $__tab;
      1
   "
);
:  lista ankiet
ZA_ZEST.grp_sel(_wnd,ZA_ZEST,_cfg.ZA_ZEST.ws,,
   "   params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag:='';
      {? ~_cfg.kod.kod | ZA_ZEST.SLO_KOD().KOD='Z'
      || _ag:='P'
      ?};
      {? ZA_ZEST.TYP().KOD<>'T'
      || _ag+='R'
      ?};
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || tab_hide(1,,'tabs');
         tab_hide(2,,'tabs');
         tab_hide(3,,'tabs');
         tab_hide(4,,'tabs');
         tab_hide(5,,'tabs');
         tab_hide(6,,'tabs');
         tab_hide(7,,'tabs')
      || {? exec('chk_role','#b__box',OPERATOR.USER,'PBA_BPB_PWAN')
         || {? ZA_ZEST.TYP().KOD='O'
            || tab_hide(2,,'tabs');
               tab_hide(3,,'tabs');
               tab_show(1,'tabs');
               {? __tab='W'
               || tab_sel(1,'tabs')
               ?}
            |? ZA_ZEST.TYP().KOD='S'
            || tab_hide(1,,'tabs');
               tab_hide(3,,'tabs');
               tab_show(2,'tabs');
               {? __tab='W'
               || tab_sel(2,'tabs')
               ?}
            |? ZA_ZEST.TYP().KOD='T'
            || tab_hide(1,,'tabs');
               tab_hide(2,,'tabs');
               tab_show(3,'tabs');
               {? __tab='W'
               || tab_sel(3,'tabs')
               ?}
            ?}
         || tab_hide(1,,'tabs');
            tab_hide(2,,'tabs');
            tab_hide(3,,'tabs')
         ?};
         {? ZA_ZEST.TYP().KOD<>'T'
         || tab_show(7,'tabs');
            tab_hide(6,,'tabs');
            {? ZA_ZEST.ANONIM='T'
            || tab_hide(5,,'tabs');
               tab_show(4,'tabs');
               {? __tab='T'
               || tab_sel(4,'tabs')
               ?}
            |? ZA_ZEST.ANONIM='N'
            || tab_hide(4,,'tabs');
            tab_show(5,'tabs');
            {? __tab='T'
            || tab_sel(5,'tabs')
            ?}
            ?}
         || tab_hide(4,,'tabs');
            tab_hide(5,,'tabs');
            tab_hide(7,,'tabs');
            tab_show(6,'tabs');
            {? __tab='T'
            || tab_sel(6,'tabs')
            ?}
         ?}
      ?};
      grp_disp(ZA_FORM,_cfg.ZA_FORM.wh,1);
      grp_disp(ZA_FORM,_cfg.ZA_FORM.wv,1);
      grp_disp(ZA_FORM,_cfg.ZA_FORM.wt,1);
      grp_disp(ZA_TEST,_cfg.ZA_TEST.ws,1);
      grp_disp(ZA_NOTAW,_cfg.ZA_NOTAW.ws,1);
      grp_disp(ZA_NOTAW,_cfg.ZA_NOTAW.wt,1);
      grp_disp(ZA_OPIS,_cfg.ZA_OPIS.ws,1,1);
      ZA_ZEST.actions(_cfg.ZA_ZEST.ws,,,1);
      ZA_ZEST.actions_grayed(_cfg.ZA_ZEST.ws,_ag)
   ",,,
   7,,,,,
   'maximized_with_title'
);
ZA_ZEST.grp_splt(_wnd,,'horizontal','tabs',',33%');
:  wyniki ankiety
ZA_ZEST.grp_sel(_wnd,ZA_TEST,_cfg.ZA_TEST.ws,'Wyniki'@,
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
      grp_disp(ZA_WAR,_cfg.ZA_WAR.ws,,1)
   ",,,15,
   "  __tab:='W';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_TEST.prefix;
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || ZA_TEST.f_set(
            'INDEKS',,'ZA_ZEST=:_a and (ZZ_MET is null or ZZ_MET<>:_b)',
            ZA_ZEST.ref,exec('met_find','phr_dane','OO')
         )
      ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.tab_splt(_wnd,,'horizontal','bottom');
ZA_ZEST.grp_sel(_wnd,ZA_WAR,_cfg.ZA_WAR.ws,,,,,,
   "   params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_WAR.index('OPIS');
      {? grp_empty(ZA_TEST,_cfg.ZA_TEST.ws)
      || '#disable'
      || ZA_WAR.prefix(ZA_ZEST.NP_DOK,ZA_ZEST.ZZ_DOK)
      ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.grp_sel(_wnd,ZA_NOTAW,_cfg.ZA_NOTAW.ws,'Wyniki'@,,,,,
   "
      __tab:='W';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_NOTAW.index('TREE');
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || ZA_NOTAW.prefix(ZA_ZEST.ref())
      ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.grp_sel(_wnd,ZA_NOTAW,_cfg.ZA_NOTAW.wt,'Wyniki'@,,,,,
   "
      __tab:='W';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_NOTAW.index('TREE');
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || ZA_NOTAW.prefix(ZA_ZEST.ref())
      ?}
   ",,,,
   'maximized_with_title'
);
:  formularze ankiety anonimowej
ZA_ZEST.grp_sel(_wnd,ZA_FORM,_cfg.ZA_FORM.wv,'Formularze'@,
   "   params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag_e:='';
      _ag_ne:='';
      _kod:=ZA_ZEST.SLO_KOD().KOD;
      _kod_f:=ZA_FORM.SLO_KOD().KOD;
      {? _cfg.kod.kod
      || {? _kod='P' | _kod='Z'
      || _ag_ne:='dpZG';
         _ag_e:=':DG'
      |? _kod='U' & (_kod_f='Z')
      || _ag_ne:='pZ'
      |? _kod='U' & (_kod_f='W')
      || _ag_ne:='p'
         ?}
      || _ag_ne:='dpZG';
         _ag_e:=':DG'
      ?};
      ZA_FORM.actions_grayed(_cfg.ZA_FORM.wv,_ag_ne+_ag_e);
      grp_disp(ZA_NOTA,_cfg.ZA_NOTA.wv)
   ",,,,
   "  __tab:='T';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || ZA_FORM.prefix(ZA_ZEST.ref)
      ?}
   ",,,,'maximized_with_title'
);
:  odpowiedzi ankiety
ZA_ZEST.tab_splt(_wnd,,'vertical','right_1',',30%');
ZA_ZEST.grp_sel(_wnd,ZA_NOTA,_cfg.ZA_NOTA.wv,,
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag:='';
      {? ~grp_empty(ZA_FORM,_cfg.ZA_FORM.wv)
      || {? ZA_NOTA.ZA_FORM().DRUK='N' | ZA_NOTA.ZA_FORM().SLO_KOD().KOD='Z' |
            ZA_NOTA.ZA_TEST().ZZ_MET=null() & ZA_ZEST.TYP().KOD='O' | ~_cfg.kod.kod |
            {? ~ZA_NOTA.ZA_NOTA || ZA_NOTA.ZA_TEST().ZZ_MET().KOD<>'OO' & ZA_NOTA.ZA_TEST().RODZ().KOD<>'O' ?}
         || _ag:='Z'
         ?}
      ?};
      win_disp();
      ZA_NOTA.actions_grayed(_cfg.ZA_NOTA.wv,_ag)
   ",,,,
   "   params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_NOTA.index('ZA_NOTA');
      {? grp_empty(ZA_FORM,_cfg.ZA_FORM.wv)
      || ZA_NOTA.prefix(null())
      || ZA_NOTA.prefix(ZA_FORM.ref)
      ?}
   ",,,,
   'maximized_with_title'
);
:  formularze ankiety jawnej
ZA_ZEST.grp_sel(_wnd,ZA_FORM,_cfg.ZA_FORM.wh,'Formularze'@,
   "   params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag_e:='';
      _ag_ne:='';
      _kod:=ZA_ZEST.SLO_KOD().KOD;
      _kod_f:=ZA_FORM.SLO_KOD().KOD;
      {? _cfg.kod.kod
      || {? _kod='P' | _kod='Z'
      || _ag_ne:='dpZG';
         _ag_e:=':DG'
      |? _kod='U' & (_kod_f='Z')
      || _ag_ne:='pZ'
      |? _kod='U' & (_kod_f='W')
      || _ag_ne:='p'
         ?}
      || _ag_ne:='dpZG';
         _ag_e:=':DG'
      ?};
      ZA_FORM.actions_grayed(_cfg.ZA_FORM.wh,_ag_ne+_ag_e);
      grp_disp(ZA_NOTA,_cfg.ZA_NOTA.wh)
   ",,,
   5,
   "  __tab:='T';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || ZA_FORM.prefix(ZA_ZEST.ref)
      ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.tab_splt(_wnd,,'horizontal','right_1',',30%');
:  odpowiedzi ankiety
ZA_ZEST.grp_sel(_wnd,ZA_NOTA,_cfg.ZA_NOTA.wh,,
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag:='';
      {? ~grp_empty(ZA_FORM,_cfg.ZA_FORM.wh)
      || {? ZA_NOTA.ZA_FORM().DRUK='N' | ZA_NOTA.ZA_FORM().SLO_KOD().KOD='Z' |
            ZA_NOTA.ZA_TEST().ZZ_MET=null() & ZA_ZEST.TYP().KOD='O' | ~_cfg.kod.kod |
            {? ~ZA_NOTA.ZA_NOTA || ZA_NOTA.ZA_TEST().ZZ_MET().KOD<>'OO' & ZA_NOTA.ZA_TEST().RODZ().KOD<>'O' ?}
         || _ag:='Z'
         ?}
      ?};
      win_disp();
      ZA_NOTA.actions_grayed(_cfg.ZA_NOTA.wh,_ag)
   ",,,,
   "   params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_NOTA.index('ZA_NOTA');
      {? grp_empty(ZA_FORM,_cfg.ZA_FORM.wh)
      || ZA_NOTA.prefix(null())
      || ZA_NOTA.prefix(ZA_FORM.ref)
      ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.grp_sel(_wnd,ZA_FORM,_cfg.ZA_FORM.wt,'Formularze'@,
   "   params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag_e:='';
      _ag_ne:='';
      _kod:=ZA_ZEST.SLO_KOD().KOD;
      _kod_f:=ZA_FORM.SLO_KOD().KOD;
      {? _cfg.kod.kod
      || {? _kod='P' | _kod='Z'
         || _ag_ne:='dpZG';
            _ag_e:=':DG'
         |? _kod='U' & (_kod_f='Z')
         || _ag_ne:='pZ'
         |? _kod='U' & (_kod_f='W')
         || _ag_ne:='p'
         ?}
      || _ag_ne:='dpZG';
         _ag_e:=':DG'
      ?};
      {? _kod_f<>'Z'
      || _ag_ne+='O'
      ?};
      ZA_FORM.actions_grayed(_cfg.ZA_FORM.wt,_ag_ne+_ag_e);
      grp_disp(ZA_NOTA,_cfg.ZA_NOTA.wt)
   ",,,
   5,
   "  __tab:='T';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || ZA_FORM.prefix(ZA_ZEST.ref)
      ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.tab_splt(_wnd,,'horizontal','right_1');
:  odpowiedzi ankiety
ZA_ZEST.grp_sel(_wnd,ZA_NOTA,_cfg.ZA_NOTA.wt,,
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _ag:='';
      {? ~grp_empty(ZA_FORM,_cfg.ZA_FORM.wt)
      || {? ZA_NOTA.ZA_FORM().DRUK='N' | ZA_NOTA.ZA_FORM().SLO_KOD().KOD='Z' | ~_cfg.kod.kod |
            (~ZA_NOTA.ZA_NOTA & ZA_NOTA.ZA_TEST().RODZ().KOD<>'O')
         || _ag:='Z'
         ?};
         {? ZA_NOTA.ZA_FORM().SLO_KOD().KOD<>'Z' | ZA_NOTA.ZA_TEST().RODZ().KOD<>'O'
            | ZA_NOTA.ZA_TEST().ZA_ZEST().TYP().KOD<>'T' | ZA_NOTA.ZA_FORM().OCENA='T'
         || _ag+='O'
         ?}
      ?};
      win_disp();
      ZA_NOTA.actions_grayed(_cfg.ZA_NOTA.wt,_ag)
   ",,,,
   "   params_set(_par:=params_get());
      _cfg:=_par.cfg;
      ZA_NOTA.index('ZA_NOTA');
      {? grp_empty(ZA_FORM,_cfg.ZA_FORM.wt)
      || ZA_NOTA.prefix(null())
      || ZA_NOTA.prefix(ZA_FORM.ref)
      ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.grp_sel(_wnd,ZA_OPIS,_cfg.ZA_OPIS.ws,'Odpowiedzi opisowe'@,
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg
   ",,,,
   "  __tab:='N';
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
      || '#disable'
      || exec('komank2opis','phr_dane',ZA_ZEST.ref,exec('met_find','phr_dane','OO'))
      ?}
   ",,,,
   'maximized_with_title'
);
_cfg.window:=_wnd;
_cfg


\za_zest_form_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła konfiguruje środowisko formularzy ankiet - wykorzystywane w badaniach opinii, rekrutacji i szkoleniach.
::   WE: _a - alias tabeli dla której tworzone będą ankiety [RP_PROC/ZA_INST/SZK_OPIS/ZO_PROC]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: słownik metod oceny
ZZ_MET.cntx_psh();
ZZ_MET.f_clear();
ZZ_MET.prefix();
ZZ_MET.win_dict('SLO');

:: formularze ankiet
ZA_FORM.cntx_psh();
ZA_FORM.index('ZA_ZEST');

:: odpowiedzi na pytania
ZA_NOTA.cntx_psh();
ZA_NOTA.index('ZA_NOTA');

:: komentarze (odpowiedzi opisowe)
ZA_OPIS.cntx_psh();
ZA_OPIS.index('TEKST');

:: konfiguracja widoku okna grupowegoe
_cfg:=exec('za_zest_form_cfg','phr_widok',_a);
params_set('cfg',_cfg);

:: konfiguracja ankiet
_old:=exec('ankiety_ust','phr_widok',_a);

ZA_ZEST.cntx_psh();
ZA_ZEST.index('NAZWA');
ZA_ZEST.prefix(_a.NP_DOK,_a.ZZ_DOK,exec('ref_firma','ustawienia'));

:: wywołanie okna
ZA_ZEST.win_sel(_cfg.window);
ZA_ZEST.select();

ZA_ZEST.fld_fml('ZZ_LINK','BLANK',_old);
ZA_ZEST.cntx_pop();
ZA_OPIS.cntx_pop();
ZA_NOTA.cntx_pop();
ZA_FORM.cntx_pop();
ZZ_MET.cntx_pop();
~~


\za_test_up_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji 'Przesuń - w górę' dla okna wertowania 'WER' tabeli ZA_TEST.
::----------------------------------------------------------------------------------------------------------------------
{? ZA_TEST.NUMER>1
|| _numer:=ZA_TEST.NUMER;
   _test:=ZA_TEST.ZA_TEST;
   ZA_TEST.NUMER:=-_numer;
   do;
   {? ZA_TEST.put
   || ZA_TEST.cntx_psh;
      ZA_TEST.index('NUMER');
      ZA_TEST.prefix(ZA_TEST.ZA_ZEST,ZA_TEST.ZA_TEST);
      {? ZA_TEST.find_le(_numer) & _test=ZA_TEST.ZA_TEST
      || ZA_TEST.NUMER:=_numer;
         {? ~ZA_TEST.put
         || undo;
            end;
            ZA_TEST.cntx_pop;
            return
         ?}
      ?};
      ZA_TEST.cntx_pop;
      ZA_TEST.NUMER:=_numer-1;
      {? ~ZA_TEST.put
      || undo
      ?}
   ?};
   end
?}


\za_test_down_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji 'Przesuń - w dół' dla okna wertowania 'WER' tabeli ZA_TEST.
::----------------------------------------------------------------------------------------------------------------------
_test:=ZA_TEST.ZA_TEST;
ZA_TEST.cntx_psh;
ZA_TEST.index('NUMER');
ZA_TEST.prefix(ZA_TEST.ZA_ZEST,ZA_TEST.ZA_TEST);
{? ZA_TEST.next & ZA_TEST.ZA_TEST=_test
|| exec('za_test_up_b','phr_widok')
?};
ZA_TEST.cntx_pop()


\za_test_wartosci_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Wartości" w oknach wertowania tabeli ZA_TEST.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_MET.cntx_psh();
exec('za_wartosci','phr_widok',ZA_TEST,ZA_TEST.ZZ_MET().KOD,ZA_TEST.ZZ_DOK);
ZZ_MET.cntx_pop();
~~


\za_zest_wartosci_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Wartości" w oknach wertowania tabeli ZA_ZEST.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_MET.cntx_psh();
exec('za_wartosci','phr_widok',ZA_ZEST,ZA_ZEST.ZZ_MET().KOD,ZA_ZEST.ZZ_DOK);
ZZ_MET.cntx_pop();
~~


\za_zest_szab_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Konfiguruje środowisko dla szablonów ankiet.
::   WE: _a - alias tabeli dla której otwieramy szablony (ZA_INST/ZO_PROC/RP_PROC/SZK_OPIS).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('init_bufs','phr_tab');

:: słownik metod oceny
ZZ_MET.cntx_psh();
ZZ_MET.f_clear();
ZZ_MET.prefix();
ZZ_MET.win_dict('SLO');

: pytania ankiety
ZA_TEST.cntx_psh();
ZA_TEST.index('NUMER');

: składiki oceny
ZA_SKL.cntx_psh();
ZA_SKL.index('OPIS');

: konfiguracja okna grupowego
_cfg:=exec('za_zest_szab_def','phr_widok');
params_set('cfg',_cfg);

exec('ankiety_ust','phr_widok',_a);
exec('zz_tmpt_ref','phr_dane',_a);

ZA_ZEST.cntx_psh();
ZA_ZEST.index('NAZWA');
ZA_ZEST.prefix(ZZ_TMPT.NP_DOK,ZZ_TMPT.ZZ_DOK,exec('ref_firma','ustawienia'));

_old:=ZA_ZEST.fld_fml('ZZ_LINK','BLANK',"ZZ_TMPT.ZZ_DOK");

ZA_ZEST.win_sel('SZAB');
ZA_ZEST.hdr_sel();
ZA_ZEST.hdr_sel('Szablony ankiet - '+(-ZZ_TMPT.NAZWA));
ZA_ZEST.win_sel(_cfg.window);
AreaTitle.setTabWin(ZA_ZEST,_cfg.window);
AreaTitle.setTitle();
ZA_ZEST.select();

ZA_ZEST.fld_fml('ZZ_LINK','BLANK',_old);

ZA_ZEST.cntx_pop();
ZA_SKL.cntx_pop();
ZA_TEST.cntx_pop();
ZZ_MET.cntx_pop();
~~


\za_zest_szab_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Konfiguracja interfejsu dla szablonów ankiet.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_cfg:=obj_new('window','ZA_ZEST','ZA_TEST','ZA_SKL');

_cfg.ZA_ZEST:=obj_new('ws');
_cfg.ZA_ZEST.ws:='SZAB';

_cfg.ZA_TEST:=obj_new('wo','ws','wt');
_cfg.ZA_TEST.wo:='WER';
_cfg.ZA_TEST.ws:='WER_S';
_cfg.ZA_TEST.wt:='WER_T';

_cfg.ZA_SKL:=obj_new('ws');
_cfg.ZA_SKL.ws:='WER';

: grupowe okienko szablonow ankiet
_wnd:=ZA_ZEST.grp_make(,,
   'szab',,,
   "1"
);
: obsługa drag'n'drop dla tabeli ZA_TEST - pytania ankiety
ZA_TEST.dnd_sel(_cfg.ZA_TEST.ws,,'records.ZA_TEST',
   "exec('za_test_dnd','phr_widok','WER',ZA_TEST,dnd_info('dropped_records'))"
);
:  lista ankiet
ZA_ZEST.grp_sel(_wnd,,_cfg.ZA_ZEST.ws,,
   "   params_set(_par:=params_get());
       _cfg:=_par.cfg;
       _hide:='';
       {? ZA_ZEST.ZZ_MET().RODZAJ<>'S'
       || _hide:='W'
       ?};
       {? var_pres('__ER0065')=type_of(0) & __ER0065
       || _hide:='T'
       ?};
       {? ZA_ZEST.TYP().KOD='T'
       || tab_hide(1,,'tabs');
          tab_hide(2,,'tabs');
          tab_show(3,'tabs');
          grp_disp(ZA_TEST,_cfg.ZA_TEST.wt,1)
       |? ZA_ZEST.TYP().KOD='S'
       || tab_hide(1,,'tabs');
          tab_hide(3,,'tabs');
          tab_show(2,'tabs');
          grp_disp(ZA_TEST,_cfg.ZA_TEST.ws,1)
       || tab_hide(2,,'tabs');
          tab_hide(3,,'tabs');
          tab_show(1,'tabs');
          grp_disp(ZA_TEST,_cfg.ZA_TEST.wo,1)
       ?};
       ZA_ZEST.actions(_cfg.ZA_ZEST.ws,_hide,,1);
       grp_disp(ZA_TEST,_cfg.ZA_TEST.wo,1);
       grp_disp(ZA_TEST,_cfg.ZA_TEST.ws,1);
       grp_disp(ZA_TEST,_cfg.ZA_TEST.wt,1)
   ",,,
   8,,,,,
   'maximized_with_title'
);
ZA_ZEST.grp_splt(_wnd,,'horizontal','tabs');
:  definicja ankiety
ZA_ZEST.grp_sel(_wnd,ZA_TEST,_cfg.ZA_TEST.wo,'Definicja'@,
   "   params_set(_par:=params_get());
       _cfg:=_par.cfg;
       _ag_ne:='';
       {? ZA_ZEST.size
       || {? ZA_TEST.ZZ_MET().KOD='OO'
          || _ag_ne+='W'
          ?}
       || _ag_ne:=':d'
       ?};
       ZA_TEST.actions_grayed(_cfg.ZA_TEST.wo,_ag_ne);
       grp_disp(ZA_SKL,_cfg.ZA_SKL.ws,1)
   ",,,
   13,
   "   params_set(_par:=params_get());
       _cfg:=_par.cfg;
       {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
       || '#disable'
       || ZA_TEST.prefix(ZA_ZEST.ref)
       ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.tab_splt(_wnd,,'horizontal','bottom');
: składniki oceny
ZA_ZEST.grp_sel(_wnd,ZA_SKL,_cfg.ZA_SKL.ws,,,,,,
   "   params_set(_par:=params_get());
       _cfg:=_par.cfg;
       {? grp_empty(ZA_TEST,_cfg.ZA_TEST.wo)
       || '#disable'
       || ZA_SKL.prefix(ZA_TEST.ref)
       ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.grp_sel(_wnd,ZA_TEST,_cfg.ZA_TEST.ws,'Definicja'@,
   "   params_set(_par:=params_get());
       _cfg:=_par.cfg;
       _ag_ne:='';
       {? ZA_ZEST.size
       || {? ZA_TEST.RODZ().KOD='O'
          || _ag_ne+='O'
          ?}
       || _ag_ne:=':d'
       ?};
       ZA_TEST.actions_grayed(_cfg.ZA_TEST.ws,_ag_ne)
   ",,,
   13,
   "   params_set(_par:=params_get());
       _cfg:=_par.cfg;
       {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
       || '#disable'
       || ZA_TEST.prefix(ZA_ZEST.ref)
       ?}
   ",,,,
   'maximized_with_title'
);
ZA_ZEST.grp_sel(_wnd,ZA_TEST,_cfg.ZA_TEST.wt,'Definicja'@,
   "   params_set(_par:=params_get());
       _cfg:=_par.cfg;
       _ag_ne:='';
       {? ZA_ZEST.size
       || {? ZA_TEST.RODZ().KOD='O'
          || _ag_ne+='O'
          ?}
       || _ag_ne:=':d'
       ?};
       ZA_TEST.actions_grayed(_cfg.ZA_TEST.wt,_ag_ne)
   ",,,
   13,
   "   params_set(_par:=params_get());
       _cfg:=_par.cfg;
       {? grp_empty(ZA_ZEST,_cfg.ZA_ZEST.ws)
       || '#disable'
       || ZA_TEST.prefix(ZA_ZEST.ref)
       ?}
   ",,,,
   'maximized_with_title'
);

_cfg.window:=_wnd;
_cfg


\zz_kryt_wstaw_b_ank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji 'Wstaw kryteria' dla okna wertowania 'ANK' tabeli ZZ_KRYT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_kryt_wstaw_b','phr_widok','ANK')


\zz_kryt_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Popraw - przed" dla tabeli ZZ_KRYT.
::   WE:
::   WY:
::  OLD: \zz_kryt_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_KRYT.get();
_type:=($ZZ_KRYT.KLASA)();
_value:=exec('kryt_ref','phr_dane',_type,ZZ_KRYT.ref());
_type.REKORD:=exec('zz_kryt_choose','phr_widok',_type,_value);
{? _type.REKORD & ZZ_KRYT.put()
|| _type.put()
?}


\zz_osoba_xxx_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: "Okienko przed" okien tabeli ZZ_OSOBA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_OSOBA.win_edit('RED');
ZZ_OSOBA.win_patt('WZO');
1


\zz_osoba_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Po redakcji danych tabeli ZZ_PROFT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_osoba_chk','phr_zz_tab',-menu_txt()='popraw')


\zz_osoba_wyswietl_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła akcji "wyświetl przed" okien tabeli ZZ_OSOBA
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_osoba_disp','poc',ZZ_OSOBA.ref())


\zz_osoba_wyb_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła tworzy tablicę nazwaną z elementami parametryzującymi wybór osoby(osób).
::   WE:
::   WY: wskazanie tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new(
   'KLASA',
   'WIELU','HDR_SEL','WND_IDENT',
   'SQL_FROM','SQL_WHERE','FML_TEST'
);

: Tabela źródłowa danych
_args.KLASA:='ZZ_OSOBA';
: Wybór wiele osób: [0/1].
_args.WIELU:=1;
: Tytuł okienka wertowania
_args.HDR_SEL:='Dane osobowe'@;
: Identyfikator okienka wertowania
_args.WND_IDENT:='zz_osoba_wyb';

: Rozszerzenie filtra
_args.SQL_FROM:='';
_args.SQL_WHERE:='';
: Formuła dodatkowego warunku
_args.FML_TEST:='';

_args


\zz_osoba_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Wybór rekordów z tabeli ZZ_OSOBA.
::   WE: _a [OBJECT] - wskazanie tablicy nazwanej zwracanej przez \zz_osoba_wyb_args/phr_widok.fml
::   WY: wskazanie tablicy nazwanej zawierającej wynik działania formuły
::       STATUS - opis wyniku działania
::       ZZ_OSOBA - alias tabeli zawierającej wskazania na wybrane zapisy
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
exec('__WND','#object');

: zwracany wynik
_ret:=obj_new('STATUS','ZZ_OSOBA');
: opis wyniku działania
_ret.STATUS:='Nie wybrano żadnego zapisu.'@;
: tabela zawierająca wskazania wybranych zaisów
_ret.ZZ_OSOBA:=tab_tmp(1,
:  Liczba porządkowa odzwierciedla kolejność w oknie
   'LP','INTEGER','Lp.',
:  Wybrana osoba (różne sposoby identyfikacji)
   'SQL','STRING[16]','$ZZ_OSOBA.ref()',
   'UID','STRING[48]','ZZ_OSOBA.uidref()',
   'REF','INTEGER','#ZZ_OSOBA.ref()',
   'CRC','INTEGER','ZZ_OSOBA.crc()'
);

: utwórz okienko wyboru
_wnd:=ZZ_OSOBA.mk_sel(_a.HDR_SEL,'P',0,_a.WND_IDENT,,,,,'U');
ZZ_OSOBA.win_fld(_wnd,,'NAZWISKO',,,-20,,,,,exec('fldComment','#field',ZZ_OSOBA,'NAZWISKO'));
ZZ_OSOBA.win_fld(_wnd,,'PIERWSZE',,,-20,,,,,exec('fldComment','#field',ZZ_OSOBA,'PIERWSZE'));
ZZ_OSOBA.win_fld(_wnd,,'PESEL',,,-11,,,,,exec('fldComment','#field',ZZ_OSOBA,'PESEL'));
ZZ_OSOBA.win_fld(_wnd,,'PLEC',,,-2,,,,,exec('fldComment','#field',ZZ_OSOBA,'PLEC'));
: akcje pustej dziedziny
ZZ_OSOBA.win_act(_wnd,1,'Dołącz',,,,,"ZZ_OSOBA.f_rfresh()");
ZZ_OSOBA.win_act(_wnd,1,'Rekord',,,,,"exec('zz_osoba_ae','phr_widok')");
ZZ_OSOBA.win_act(_wnd,1,'Okienko',,,,"exec('zz_osoba_xxx_ob','phr_widok')");
: akcje niepustej dziedziny
ZZ_OSOBA.win_act(_wnd,,'Formuła','Wybierz'@@,,,
   "  _par:=params_get();
      _test:=_par.arg.FML_TEST;
      {? _test='' | ($_test)()
      || _TAB:=_par.ret.ZZ_OSOBA;
         _TAB.LP:=_TAB.size()+1;
         _TAB.SQL:=$ZZ_OSOBA.ref();
         _TAB.UID:=ZZ_OSOBA.uidref();
         _TAB.REF:=#ZZ_OSOBA.ref();
         _TAB.CRC:=ZZ_OSOBA.crc();
         _TAB.add()
      ?};
      1
   ",
   "sel_exit()",1,_a.WIELU,,,'W'
);
ZZ_OSOBA.win_act(_wnd,,'Dołącz',,,,,"ZZ_OSOBA.f_rfresh()");
ZZ_OSOBA.win_act(_wnd,,'Popraw',,,,,"ZZ_OSOBA.f_rfresh()");
ZZ_OSOBA.win_act(_wnd,,'Formuła','Usuń'@@,,'Usunięcie bieżącego zapisu'@,
   "exec('zz_xxx_usun_b','phr_widok')","exec('zz_xxx_usun_a','phr_widok')",,1,
   "exec('zz_xxx_usun_bg','phr_widok')","exec('zz_xxx_usun_ag','phr_widok')",'U'
);
exec('menu_wlasciwosci','phr_widok',ZZ_OSOBA,_wnd,'I');
: pozostałe akcje
ZZ_OSOBA.win_act(_wnd,,'Szukaj');
ZZ_OSOBA.win_act(_wnd,,'Kolejność');
ZZ_OSOBA.win_act(_wnd,,'Wyświetl',,,,"exec('zz_osoba_wyswietl_b','phr_widok')");
ZZ_OSOBA.win_act(_wnd,,'Rekord',,,,,"exec('zz_osoba_ae','phr_widok')");
ZZ_OSOBA.win_act(_wnd,,'Okienko',,,,"exec('zz_osoba_xxx_ob','phr_widok')");

: dla dostępu w akcjach okienka wyboru
params_set('arg',_a,'ret',_ret);

: udostępnij osoby do wyboru
ZZ_OSOBA.cntx_psh();
ZZ_OSOBA.clear();
ZZ_OSOBA.f_set(
   'NAZWISKO,PIERWSZE,PESEL',
   'join ZZ_DOK using(ZZ_OSOBA.ZZ_LINK,ZZ_DOK.REFERENCE) '+_a.SQL_FROM,
   'ZZ_DOK.KLASA=\':_a\''+{? _a.SQL_WHERE<>'' || ' and '+ _a.SQL_WHERE || '' ?},
   _a.KLASA
);
ZZ_OSOBA.win_sel(_wnd);
ZZ_OSOBA.select();
ZZ_OSOBA.f_clear();
ZZ_OSOBA.cntx_pop();
ZZ_OSOBA.win_del(_wnd);

{? _ret.ZZ_OSOBA.size()>0
|| _ret.STATUS:='Liczba wybranych zapisów: %1'@[$_ret.ZZ_OSOBA.size()]
?};

: wynik
_ret


\za_zest_status_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji 'Zmień status' tabeli ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
{? ZA_ZEST.get() || _kod:=ZA_ZEST.SLO_KOD().KOD ?};

_kod:=ZA_ZEST.SLO_KOD().KOD;
_info:=0;
_ank:=ZA_ZEST.ref();
_typ:=ZA_ZEST.TYP().KOD;
_pkt:=0;
_blad:=0;

{? _kod='P'
|| _tryb:=ZA_ZEST.PKT='N';
   ZA_NOTAO.cntx_psh();
   ZA_NOTAO.index('NUMER');
   ZA_TEST.cntx_psh();
   ZA_TEST.index('NUMER');
   ZA_TEST.prefix(_ank);
   _brak:=0;
   _size:=ZA_TEST.size();
   {? _size=0
   || FUN.info('Dla wybranej ankiety nie zdefiniowano żadnych pytań. Zmiana statusu na "udostępnioną" niemożliwa.'@);
      ZA_TEST.cntx_pop();
      ZA_NOTAO.cntx_pop();
      return(0)
   || _loop:=ZA_TEST.first();
      {!
      |? _loop
      |! _pkt+=ZA_TEST.PKT;
         _ref:=ZA_TEST.ref();
         _ank:=ZA_TEST.ZA_ZEST;
         ZA_TEST.cntx_psh();
         ZA_TEST.index('NUMER');
         ZA_TEST.prefix(_ank,_ref);
         {? ~ZA_TEST.first()
         || _brak:=1
         ?};
         {? _typ<>'O'
         || {? ZA_TEST.RODZ=null() & _brak
            || _blad:=3;
               _pole:='zdefiniowanego rodzaju'
            ?}
         || {? ZA_TEST.ZZ_MET=null() & _brak
            || _blad:=3;
               _pole:='zdefiniowanej metody oceny'
            ?}
         ?};
         {? ZA_TEST.RODZ().KOD<>'O' & ZA_TEST.RODZ<>null() & _typ<>'O'
         || ZA_NOTAO.prefix(ZA_TEST.ref());
            _jest:=ZA_NOTAO.first();
            {? ~_jest
            || _info:=1
            ?}
         ?};
         {? _tryb & ZA_TEST.RODZ().KOD<>'O' & ZA_TEST.RODZ<>null & _typ='T'
         || _true:=sql('select * from ZA_NOTAO where ZA_NOTAO.TRUE=\'T\' and ZA_NOTAO.ZA_TEST=\':_a\'',$ZA_TEST.ref());
            {? ~_true.first()
            || _blad:=1
            ?};
            &_true
         ?};
         {? ZA_TEST.PKT=0 & _typ='T' & _brak
         || {? ~_blad
            || _blad:=2
            ?}
         ?};
         ZA_TEST.cntx_pop();
         _loop:=ZA_TEST.next()
      !}
   ?};
   ZA_TEST.cntx_pop();
   ZA_NOTAO.cntx_pop();
   _alert:=0;
   {? ZA_ZEST.DOBOR='T'
   || ZZ_KRYT.cntx_psh();
      ZZ_KRYT.index('DOBOR');
      ZZ_KRYT.prefix(ref_name(ZA_ZEST.ZZ_DOK),ZA_ZEST.ZZ_DOK);
      {? ~ZZ_KRYT.first()
      || _alert:=1
      ?};
      ZZ_KRYT.cntx_pop()
   ?};
   {? _info
   || _choice:=FUN.info(
        'W ankiecie znajdują się pytania bez zdefiniowanych odpowiedzi.\n'
        'Zmiana statusu na "udostępnioną" niemożliwa.'@);
      return(0)
   |? _blad=1 & _typ='T'
   || _choice:=FUN.info(
         'W ankiecie znajdują się pytania bez zdefiniowanych poprawnych odpowiedzi.\n'
         'Zmiana statusu na "udostępnioną" niemożliwa.'@);
      return(0)
   |? _blad=2 & _typ='T'
   || _choice:=FUN.info(
         'W ankiecie znajdują się pytania z liczbą punktów równą zero.\n'
         'Zmiana statusu na "udostępnioną" niemożliwa.'@);
      return(0)
   |? _blad=3
   || _choice:=FUN.info(
         'W ankiecie znajdują się pytania bez %1.\n'
         'Zmiana statusu na "udostępnioną" niemożliwa.'@ [_pole]);
      return(0)
   |? _pkt<ZA_ZEST.PROG & ZA_ZEST.ZZ_LINK().KLASA='SZK_OPIS' & SZK_OPIS.TRYB='N' & _typ='T'
   || _choice:=FUN.info(
         'Dla testu po szkoleniu wybrano tryb progu zdawalności liczony w punktach.\n'
         'Punkty dla zdefiniowanych pytań nie przekraczają określonego progu zdawalności.\n'
         'Zmiana statusu na "udostępnioną" niemożliwa.'@);
      return(0)
   || {? ~_alert
      || _choice:=FUN.ask(
            'Czy na pewno zmienić status ankiety na "udostępnioną"?\n\n'
            'Możliwe będzie dołączanie i generowanie formularzy.\n'
            'Definicja pytań ankiety zostanie zablokowana.'@)
      || _choice:=FUN.ask(
            'Dla ankiety ustawiono parametr "Kryterium - tworzenie formularzy na podstawie kryterium" na tak, ale\n'
            'nie zdefiniowano doboru wypełniających. '
            'Czy na pewno zmienić status ankiety na "udostępnioną"?'@)
      ?}
   ?};
   ZA_NOTAO.cntx_psh();
   ZA_NOTAO.index('NUMER');
   ZA_TEST.cntx_psh();
   ZA_TEST.index('NUMER');
   ZA_TEST.prefix(_ank);
   {? _choice
   || {? _typ<>'O'
      || _loop:=ZA_TEST.first();
         {!
         |? _loop
         |! _ref:=ZA_TEST.ref();
            _tresc:=ZA_TEST.TRESC;
            _numer:=ZA_TEST.NUMER;
            _typ_p:=ZA_TEST.RODZ().KOD;
            _odp:=ZA_TEST.ZA_ZEST().PKT;
            _met:=ZA_TEST.ZZ_MET().KOD;
            {? _typ_p<>'O' & ZA_TEST.RODZ
            || ZA_NOTAW.cntx_psh();
               ZA_NOTAW.index('TREE');
               ZA_NOTAW.prefix(_ank);
               ZA_NOTAW.blank();
               ZA_NOTAW.ZA_ZEST:=_ank;
               ZA_NOTAW.TRESC:=_tresc;
               ZA_NOTAW.NUMER:=_numer;
               ZA_NOTAW.ZZ_DOK:=exec('add_dok','phr_tab',ZA_NOTAW);
               ZA_NOTAW.ZA_TEST:=_ref;
               {? ZA_NOTAW.add()
               || _tree:=ZA_NOTAW.ref();
                  ZA_NOTAO.prefix(_ref);
                  _loop:=ZA_NOTAO.first();
                  {!
                  |? _loop
                  |! ZA_NOTAW.blank();
                     ZA_NOTAW.TRESC:=ZA_NOTAO.TRESC;
                     ZA_NOTAW.ZA_NOTAO:=ZA_NOTAO.ref();
                     ZA_NOTAW.ZZ_DOK:=exec('add_dok','phr_tab',ZA_NOTAW);
                     ZA_NOTAW.ZA_ZEST:=_ank;
                     ZA_NOTAW.TREE:=_tree;
                     ZA_NOTAW.ZA_TEST:=ZA_NOTAO.ZA_TEST;
                     {? _odp='T'
                     || {? ZA_NOTAO.ODPT>0
                        || ZA_NOTAW.TRUE:='T'
                        ?}
                     || {? ZA_NOTAO.TRUE='T'
                        || ZA_NOTAW.TRUE:='T'
                        ?}
                     ?};
                     ZA_NOTAW.add();
                     _loop:=ZA_NOTAO.next()
                  !}
               ?};
               ZA_NOTAW.cntx_pop()
            ?};
            _loop:=ZA_TEST.next()
         !}
      ?};
      ZA_TEST.cntx_pop();
      ZA_NOTAO.cntx_pop();
      ZA_ZEST.SLO_KOD:=exec('kod','ext_slo','ZA_ZESTA','U');
      _choice
   |? _typ='O' & _choice
   || ZA_ZEST.SLO_KOD:=exec('kod','ext_slo','ZA_ZESTA','U');
      ZA_TEST.cntx_pop();
      ZA_NOTAO.cntx_pop();
      _choice
   || ZA_TEST.cntx_pop();
      ZA_NOTAO.cntx_pop();
      return(0)
   ?}
|? _kod='U'
|| {? ZA_ZEST.ZA_INFO
   || ZA_ZEST.ZA_INFO();
      {? ~ZA_INFO.FORM_SUM
      || FUN.emsg(
           'Ankieta nie zawiera żadnych formularzy.\n'+
           '("pustą" ankietę powinno się usunąć)'@);
        return(0)
      |? ~ZA_INFO.NOTA_SUM
      || FUN.emsg(
           'Ankieta nie zawiera odpowiedzi na pytania.\n'+
           '(niewypełnioną ankietę powinno się usunąć)'@);
         return(0)
      ?}
   ?};
   ZA_ZEST.SLO_KOD:=exec('kod','ext_slo','ZA_ZESTA','Z');
   FUN.ask(
       'Czy na pewno zmienić staus ankiety na "'+ZA_ZEST.SLO_KOD().NAZWA+'"?\n\n'+
       'Listy formularzy i ocen zostaną zablokowane.\n'+
       'Wszystkie formularze zostaną zamknięte.'@)
|? _kod='Z'
|| FUN.info('Ankieta została już zamknięta. Zmiana statusu niemożliwa.'@);
   0
?}


\za_zest_status_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji 'Zmień status' tabeli ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
ZA_ZEST.put()


\za_form_zamknij_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Zamknij - przed" dla okna wertowania tabeli ZA_FORM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZA_FORM.SLO_KOD().KOD<>'Z' & {? ~_a || FUN.ask('Czy na pewno zamknąć formularz?'@) || 1 ?}
|| ZA_FORM.SLO_KOD:=exec('kod','ext_slo','ZA_FORM','Z')
?};
{? ZA_FORM.ZA_ZEST().TYP().KOD='T'
|| _licz:=0;
   _tryb:=0;
   {? ZA_ZEST.ZZ_LINK().KLASA='SZK_OPIS'
   || SZK_OPIS.cntx_psh();
      SZK_OPIS.index('ZZ_DOK');
      SZK_OPIS.prefix(ref_name(ZA_ZEST.ZZ_LINK),ZA_ZEST.ZZ_LINK);
      {? SZK_OPIS.first()
      || _tryb:=SZK_OPIS.TRYB='N'
      ?};
      SZK_OPIS.cntx_pop()
   ?};
   ZA_NOTA.cntx_psh();
   ZA_NOTA.index('ZA_NOTA');
   ZA_NOTA.prefix(ZA_FORM.ref(),0);
   _loop:=ZA_NOTA.first();
   {!
   |? _loop
   |! _licz+=ZA_NOTA.PKT;
      _loop:=ZA_NOTA.next()
   !};
   ZA_NOTA.cntx_pop();
   _pkt:=sql('select SUM(ZA_TEST.PKT) as PKT from ZA_TEST join ZA_ZEST where ZA_ZEST.REFERENCE=\':_a\'',$ZA_FORM.ZA_ZEST);
   _jest:=sql('select SLO_KOD.KOD as KOD from ZA_TEST join ZA_ZEST join SLO_KOD using(ZA_TEST.RODZ,SLO_KOD.REFERENCE) where ZA_ZEST.REFERENCE=\':_a\' and KOD=\'O\'',$ZA_FORM.ZA_ZEST);
   {? _pkt.PKT>0
   || {? _tryb
      || ZA_FORM.WYNIK:=_licz
      || ZA_FORM.WYNIK:=(_licz/_pkt.PKT)*100
      ?}
   || ZA_FORM.WYNIK:=0
   ?};
   {? ZA_FORM.WYNIK>=ZA_FORM.ZA_ZEST().PROG & ~_jest.size()
   || ZA_FORM.Z:='T'
   ?};
   {? ~_jest.size()
   || ZA_FORM.OCENA:='T'
   ?}
?};
1


\za_form_zamknij_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Zakmnij - po" dla okna wertowania tabeli ZA_FORM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZA_FORM.put()
|| {? ZA_FORM.ZA_ZEST().ZZ_LINK().KLASA='SZK_OPIS'
   || exec('ank_akc','phr_dane',ZA_FORM.ref())
   ?}
?}


\za_form_za_zest_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_FORM.ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
ZA_ZEST.ref()


\za_form_id_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_FORM.ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
exec('rand_id','phr_dane',ZA_FORM,'ID',8)


\za_form_slo_kod_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_FORM.ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
exec('kod','ext_slo','ZA_FORM','P')


\za_nota_ocena_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji 'Ocena - przed' tabeli ZA_NOTA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod:=ZA_NOTA.ZA_TEST().ZZ_MET().KOD;
_pyt:=ZA_NOTA.ZA_NOTA;
_ref:=ZA_NOTA.ref();
_form:=ZA_NOTA.ZA_FORM;
_wybor:=ZA_NOTA.ZA_TEST().RODZ().KOD;
_ver:=ZA_NOTA.ZA_TEST().ZA_ZEST().PKT='N';
{? _kod<>'OO' & _wybor<>'O'
|| {? ZA_NOTA.ODP='N'
   || {? _wybor='J'
      || ZA_NOTA.cntx_psh();
         ZA_NOTA.index('ZA_NOTA');
         ZA_NOTA.prefix(_form,_pyt);
         _loop:=ZA_NOTA.first();
         {!
         |? _loop
         |! _nota:=ZA_NOTA.ZA_NOTA;
            _wartosc:=ZA_NOTA.NUMER;
            {? $ZA_NOTA.ref()=$_ref
            || ZA_NOTA.ODP:='T';
               ZA_NOTA.put();
               ZA_NOTA.cntx_psh();
               ZA_NOTA.prefix();
               {? ZA_NOTA.seek(_nota,)
               || {? _kod=''
                  || {? _ver
                     || exec('za_nota_pkt','phr_dane',ZA_NOTA.ref(),_wartosc,1,1)
                     || exec('za_nota_pkt','phr_dane',ZA_NOTA.ref(),_wartosc,1,0)
                     ?}
                  || ZA_NOTA.WARTOSC:=_wartosc;
                     ZA_NOTA.put()
                  ?}
               ?};
               ZA_NOTA.cntx_pop()
            || ZA_NOTA.ODP:='N';
               ZA_NOTA.put()
            ?};
            _loop:=ZA_NOTA.next()
         !};
         ZA_NOTA.cntx_pop()
      || _nota:=ZA_NOTA.ZA_NOTA;
         _wartosc:=ZA_NOTA.NUMER;
         ZA_NOTA.ODP:='T';
         ZA_NOTA.put();
         ZA_NOTA.cntx_psh();
         ZA_NOTA.prefix();
         {? ZA_NOTA.seek(_nota,)
         || {? _ver
            || exec('za_nota_pkt','phr_dane',ZA_NOTA.ref(),_wartosc,0,1)
            || exec('za_nota_pkt','phr_dane',ZA_NOTA.ref(),_wartosc,0,0)
            ?}
         ?};
         ZA_NOTA.cntx_pop()
      ?}
   || {? _wybor='J'
      || FUN.info('Udzieliłeś już odpowiedzi na to pytanie.')
      || _nota:=ZA_NOTA.ZA_NOTA;
         _wartosc:=ZA_NOTA.NUMER;
         ZA_NOTA.ODP:='N';
         ZA_NOTA.put();
         ZA_NOTA.cntx_psh();
         ZA_NOTA.prefix();
         {? ZA_NOTA.seek(_nota,)
         || {? _ver
            || exec('za_nota_pkt','phr_dane',ZA_NOTA.ref(),_wartosc,0,1)
            || exec('za_nota_pkt','phr_dane',ZA_NOTA.ref(),_wartosc,0,0)
            ?}
         ?};
         ZA_NOTA.cntx_pop()
      ?}
   ?}
|? _kod='OO' | _wybor='O'
|| {? ZA_NOTA.memo_get(,'NOTA')
   || ZA_NOTA.win_edit('OPISOWE');
      {? ZA_NOTA.edit()
      || _txt:=ZA_NOTA.memo_txt(,,'NOTA');
         ZA_NOTA.memo_set(_txt,'NOTA');
         ZA_NOTA.memo_put()
      ?};
      ZA_NOTA.ZA_FORM();
      ZA_FORM.SLO_KOD:=exec('kod','ext_slo','ZA_FORM','W');
      ZA_FORM.put()
   ?}
?};
1


\za_nota_ocena_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji 'Ocena - po' tabeli ZA_NOTA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_cfg:=_par.cfg;
grp_disp(ZA_ZEST,_cfg.ZA_ZEST.ws);
{? cur_win(,1)='VER_H'
|| grp_disp(ZA_FORM,_cfg.ZA_FORM.wh)
|? cur_win(,1)='VER_V'
|| grp_disp(ZA_FORM,_cfg.ZA_FORM.wv)
|| grp_disp(ZA_FORM,_cfg.ZA_FORM.wt)
?};
~~


\zz_komp_ogranicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Ogranicza dziedzinę kompetencji do podanej metodyki.
::   WE: _a [DATE/REFERENCE] - data, którą należy ustalić metodykę / wskazanie metoryki
::       _b [INTEGER] - sposób ograniczenia dziedziny
::          akronim indeksu dla prefixu
::          wpp - filtr
::   WY: ~~
::UWAGA: Formuła zmienia kontekst i dziedzinę tabeli
::----------------------------------------------------------------------------------------------------------------------
_hist:=null;
{? var_pres('_a')=type_of(date())
|| _hist:=exec('init_hist','phr_dane',_a)
|? var_pres('_a')=type_of(null)
|| _hist:=_a
|| return()
?};

{? var_pres('_b')=type_of('') & _b<>''
|| ZZ_KOMP.clear();
   ZZ_KOMP.f_set('NAZWA',,'ZZ_HIST=:_a',_hist)
|| ZZ_KOMP.f_clear();
   ZZ_KOMP.index(_b);
   ZZ_KOMP.prefix(_hist)
?}


\za_test_tree
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Sprawdza czy dany zapis posiada pytania podrzędne.
::   WE: _a - ref pytania.
::   WY: 1 - posiada elementy podrzędne, 0 - brak elementów.
::----------------------------------------------------------------------------------------------------------------------
_tree:=0;
ZA_TEST.cntx_psh();
ZA_TEST.ZA_ZEST();
ZA_TEST.prefix(ZA_ZEST.ref(),_a);
{? ZA_TEST.size
|| _tree:=1
?};
ZA_TEST.cntx_pop();
_tree


\za_test_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła na 'Rekord - przed' dla okna wertowania WER tabeli ZA_TEST.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::----------------------------------------------------------------------------------------------------------------------
:: jesli rekord posiada zapisy potomne, blokuje mozliwosc edycji metody oceny
{? _a
|| {? exec('za_test_tree','phr_widok',ZA_TEST.ref())
   || ZA_TEST.efld_opt('RED','enable=0,mark=0',ZA_TEST,'ZZ_MET')
   || ZA_TEST.efld_opt('RED','enable=1,mark=1',ZA_TEST,'ZZ_MET')
   ?};
   {? ZA_TEST.ZA_ZEST().PKT='T' & ZA_TEST.RODZ().KOD<>'O'
   || ZA_TEST.efld_opt('REDT','enable=0',ZA_TEST,'PKT')
   || {? exec('za_test_tree','phr_widok',ZA_TEST.ref())
      || ZA_TEST.efld_opt('REDT','enable=1, mark=0',ZA_TEST,'PKT')
      || ZA_TEST.efld_opt('REDT','enable=1, mark=1',ZA_TEST,'PKT')
      ?}
   ?}
?};
~~


\za_test_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Obsługa akcji "Rekord - po" w oknie WER tabeli ZA_TEST.
::   WE:
::   WY: akronim pola do redakcji
::----------------------------------------------------------------------------------------------------------------------
{? ZA_TEST.TRESC=''
|| FUN.emsg('Pole \'Treść\' nie zostało wypełnione. Uzupełnij brakujące informacje.');
   return('TRESC')
|| 1
?};

_nag:=0;
_kod:=ZA_TEST.ZA_ZEST().TYP().KOD;
ZA_TEST.cntx_psh();
ZA_TEST.index('NUMER');
ZA_TEST.prefix(ZA_ZEST.ref(),ZA_TEST.ref());
{? ZA_TEST.first()
|| _nag:=1
?};
ZA_TEST.cntx_pop();

{? ZA_TEST.RODZ=null() & {? -menu_txt()='popraw' || ~_nag || 1 ?} & (_kod='T' | _kod='S')
|| FUN.emsg('Brak określonego rodzaju pytania możliwy jest tylko dla pytania nagłówkowego. '
            'Uzupełnij brakujące informacje.'@);
   return('RODZ')
|? ZA_TEST.ZZ_MET=null() & _kod='O' & {? -menu_txt()='popraw' || ~_nag || 1 ?}
|| FUN.emsg('Brak określonej metody oceny pytania możliwy jest tylko dla pytania nagłówkowego. '
            'Uzupełnij brakujące informacje.'@);
   return('ZZ_MET')
|| 1
?};

{? ZA_ZEST.TYP().KOD='T' & (ZA_ZEST.PKT='N' | ZA_TEST.RODZ().KOD='O') & {? -menu_txt()='popraw' || ~_nag || 1 ?}
|| {? ZA_TEST.PKT<0 | ZA_TEST.PKT=0
   || FUN.emsg('Wartość punktów za pytanie musi być większa niż zero.');
      return('PKT')
   || 1
   ?}
|| 1
?};

{? ZA_TEST.RODZ().KOD='O' & menu_txt()<>'Dołącz'
|| _tab:=sql('select * from ZA_NOTAO where ZA_NOTAO.ZA_TEST=\':_a\'',$ZA_TEST.ref());
   {? _tab.size()
   || {? FUN.ask('Pytanie posiada zdefiniowane odpowiedzi. Czy na pewno chcesz zmienić rodzaj pytania na otwarte?\n'
                 '(spowoduje to usunięcie istniejących odpowiedzi i wyzerowanie punktacji dla pytania)')
      || ZA_NOTAO.cntx_psh();
         ZA_NOTAO.index('UNIQUE');
         ZA_NOTAO.prefix(ZA_ZEST.ref(),ZA_TEST.ref());
         _loop:=ZA_NOTAO.first();
         {!
         |? _loop
         |! _loop:=ZA_NOTAO.del()
         !};
         ZA_NOTAO.cntx_pop();
         ZA_TEST.RODZ:=exec('kod','ext_slo','ZA_TEST','O');
         ZA_TEST.PKT:=0;
         ZA_TEST.put()
      || return('RODZ')
      ?}
   || 1
   ?}
|| 1
?}


\za_test_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła na akcję 'Dołącz - przed' - usuwa blokadę redagowania metody oceny.
::----------------------------------------------------------------------------------------------------------------------
{? ZA_ZEST.PKT='T'
|| ZA_TEST.efld_opt('REDT','enable=0,mark=0',ZA_TEST,'PKT')
|| ZA_TEST.efld_opt('REDT','enable=1,mark=1',ZA_TEST,'PKT')
?};
ZA_TEST.efld_opt('RED','enable=1,mark=1',ZA_TEST,'ZZ_MET')


\zz_got_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Okienko - przed" w oknie WER tabeli ZZ_GOT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_psh','phr_widok','ZWS_PAR_PGOT');
exec('setup_icon','phr_widok','OPIS');
1


\zz_got_oa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Okienko - po" w oknie WER tabeli ZZ_GOT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zz_pom_pop','phr_widok');
1


\zz_gotw_webwer_zaznacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Zaznacz" w oknie WEBWER tabeli ZZ_GOTW. Zakłada się, że dziedzina jest ustawiona prawidłowo.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~(exec('env_wt','poc') & exec('exist','#record'))
|| return(0)
?};
{? ZZ_GOTW.POZIOM='T'
|| return(1)
?};

_ref:=ZZ_GOTW.ref();
_np_dok:=ZZ_GOTW.NP_DOK;
_zz_link:=ZZ_GOTW.ZZ_LINK;

ZZ_GOTW.cntx_psh();
ZZ_GOTW.index('LINKPOZ');
ZZ_GOTW.prefix(_np_dok,_zz_link);
do();
{? ZZ_GOTW.find_key('T',)
|| ZZ_GOTW.POZIOM:='N';
   ZZ_GOTW.put()
:: Jeżeli do tej pory nie było zaznaczonego poziomu, to trudno.
?};
{? ZZ_GOTW.seek(_ref)
|| ZZ_GOTW.POZIOM:='T';
   ZZ_GOTW.put()
:: Jeżeli nie udało się znaleźć rekordu, na którym przed chwilą staliśmy, to nie wiem co robić ...
|| undo()
?};
_ok:=end();
ZZ_GOTW.cntx_pop();

{? _ok
|| web_top_refresh(,web_top_ident())
?};

_ok


\zz_gotw_webwer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Po odświeżeniu okna WEBWER tabeli ZZ_GOTW.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());
{? obj_ntab(_par) & var_pres('ZZ_GOTW_WEBWER_AR',_par)=type_of("")
|| _par.ZZ_GOTW_WEBWER_AR()
?};
~~


\zo_sk_webwer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: "Po odświeżeniu" okna WEBWER tabeli ZO_SK.
::       Uwaga: ewentualne sprawdzenie, czy istnieje bieżący rekord powinno być wykonane po stronie formuły dynamicznej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());
{? obj_ntab(_par) & var_pres('ZO_SK_WEBWER_AR',_par)=type_of("")
|| _par.ZO_SK_WEBWER_AR()
?};
~~


\zz_dok_webredd_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Popraw" w oknie WEBREDD tabeli ZZ_DOK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('exist','#record')
|| return()
?};
ZZ_DOK.web_edit('WEBREDE','#webrede',,,
   "  {? _a='OK' & ZZ_DOK.ref()
      || ZZ_DOK.memo_put(,'NOTA')
      ?};
      ZZ_DOK.web_eclose();
      web_top_update(1)
   "
);
~~


\zo_mob_webwer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: "Po odświeżeniu" okna WEBWER tabeli ZO_MOB.
::       Uwaga: ewentualne sprawdzenie, czy istnieje bieżący rekord powinno być wykonane po stronie formuły dynamicznej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());
{? obj_ntab(_par) & var_pres('ZO_MOB_WEBWER_AR',_par)=type_of("")
|| _par.ZO_MOB_WEBWER_AR()
?};
~~


\zz_komp_webwyx_wybierz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Wybierz - po" w oknie WEBWYX tabeli ZZ_KOMP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());
{? obj_ntab(_par) & var_pres('ZZ_KOMP_WEBWYX_WYBIERZ_A',_par)=type_of("")
|| _par.ZZ_KOMP_WEBWYX_WYBIERZ_A()
?};
~~


\zz_komp_webwyx_wybierz_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Wybierz - grupa przed" w oknie WEBWYX tabeli ZZ_KOMP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());
{? obj_ntab(_par) & var_pres('ZZ_KOMP_WEBWYX_WYBIERZ_BG',_par)=type_of("")
|| _par.ZZ_KOMP_WEBWYX_WYBIERZ_BG()
|| 0
?}


\szk_wzo_portal_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Wartość początkowa pola SZK_WZO.PORTAL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_jTerm:=app_info('web_sesid')='';
{? _jTerm
|| _blank:=''
|| _blank:='T'
?};
_blank


\zz_osoba_pierwsze_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Po edycji pola PIERWSZE wiersza tabeli ZZ_OSOBA. Ustala domyślną płeć.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZZ_OSOBA.PLEC:={? -(ZZ_OSOBA.PIERWSZE+1)='a' || 'K' || 'M' ?};
1


\szk_prac_wyslij_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Wyślij - grupa przed" dla powiadomienia (czynności) przekazanej parametrem.
::   WE:  _a  [STRING] - Identyfikator czynności, która powinna zostać uruchomiona.
::       [_b] [RULE]   - Formuła podczytująca rekord tabeli SZK_PRAC [domyślnie: ""].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:='\\szk_prac_wyslij_bg/phr_widok.fml';

{? var_pres('_a')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak parametru wywołania %1.'@ ['UID']);
   return(0)
|? ~exec('chk_role','#b__box',OPERATOR.USER,_a)
|| FUN.emsg(_fml+'\n'+'Brak uprawnień do uruchomienia czynności %1.'@ [_b]);
   return(0)
?};
_uid:=_a;

_name:=exec('name','#b_action',_uid);

{? FUN.ask('Czy na pewno przygotować zaznaczonym uczestnikom szkolenia powiadomienie\n"%1"?'@ [_name])
|| _ctx:=params_get().ctx;
   {? type_of(_ctx.SENDTAB)=type_of(SZK_PRAC)
   || obj_del(_ctx.SENDTAB)
   ?};
   _ctx.SENDTAB:=exec('sendtab','phr_poczta',_name);
   1
?}


\szk_prac_wyslij_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Wyślij - przed" dla powiadomienia (czynności) przekazanej parametrem.
::   WE:  _a  [STRING] - Identyfikator czynności, która powinna zostać uruchomiona.
::       [_b] [RULE]   - Formuła podczytująca rekord tabeli SZK_PRAC [domyślnie: ""].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:='\\szk_prac_wyslij_b/phr_widok.fml';

{? var_pres('_a')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak parametru wywołania %1.'@ ['UID']);
   return(0)
|? ~exec('chk_role','#b__box',OPERATOR.USER,_a)
|| FUN.emsg(_fml+'\n'+'Brak uprawnień do uruchomienia czynności %1.'@ [_b]);
   return(0)
?};
_uid:=_a;

_name:=exec('name','#b_action',_uid);

_ctx:=params_get().ctx;
{? ~cur_tab(1,1).sel_size()
:: Bieżącą tabelą wcale nie musi być SZK_PRAC - stąd odwołanie poprzez cur_tab(1,1).
|| {? type_of(_ctx.SENDTAB)=type_of(SZK_PRAC)
   || obj_del(_ctx.SENDTAB)
   ?};
   _ctx.SENDTAB:=exec('sendtab','phr_poczta',_name)
?};
_SENDTAB:=_ctx.SENDTAB;

{? var_pres('_b')=type_of("")
:: Podczytanie rekordu tabeli SZK_PRAC.
|| SZK_PRAC.cntx_psh();
   SZK_PRAC.prefix();
   _b()
?};

_cntx:=obj_new('RESULT','SUB','TO','BODYH');
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:=_uid;
_params.UIDREF:=SZK_PRAC.uidref();
_params.GRUPA:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'SZK_PRAC',SZK_PRAC.ref());
_params.CONTEXT:=_cntx;
_params.QUIET:='T';
exec('mp_run','#b__box',_params);
OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
P.prefix();
_SENDTAB.blank();
_SENDTAB.NAZWISKO:=SZK_PRAC.P().OSOBA().NAZWISKO;
_SENDTAB.PIERWSZE:=OSOBA.PIERWSZE;
_SENDTAB.RESULT:=_cntx.RESULT;
_SENDTAB.SUB:=_cntx.SUB;
_SENDTAB.TO:=_cntx.TO;
_SENDTAB.AS:="exec('szk_prac_as','phr_poczta','"+$SZK_PRAC.ref()+"')";
_SENDTAB.add();
_SENDTAB.memo_set(_cntx.BODYH,'BODYH');
_SENDTAB.memo_put(,'BODYH');
P.cntx_pop();
OSOBA.cntx_pop();

{? var_pres('_b')=type_of("")
|| SZK_PRAC.cntx_pop()
?};

1


\szk_prac_wyslij_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Wyślij - po" dla powiadomienia (czynności) przekazanej parametrem.
::   WE:  _a  [STRING] - Identyfikator czynności, która powinna zostać uruchomiona.
::       [_b] [RULE]   - Formuła podczytująca rekord tabeli SZK_PRAC [domyślnie: ""].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~cur_tab(1,1).sel_size()
:: Bieżącą tabelą wcale nie musi być SZK_PRAC - stąd odwołanie poprzez cur_tab(1,1).
|| _ctx:=params_get().ctx;
   _ctx.SENDTAB.select();
   obj_del(_ctx.SENDTAB)
?}


\szk_prac_wyslij_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Wyślij - grupa po" dla powiadomienia (czynności) przekazanej parametrem.
::   WE:  _a  [STRING] - Identyfikator czynności, która powinna zostać uruchomiona.
::       [_b] [RULE]   - Formuła podczytująca rekord tabeli SZK_PRAC [domyślnie: ""].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ctx:=params_get().ctx;
_ctx.SENDTAB.select();
obj_del(_ctx.SENDTAB)


\szk_prac_szk_opis_wyslij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa wysyłania powiadomień dla bieżącego rekordu tabeli SZK_OPIS.
::   WE: _a [STRING] - Identyfikator czynności, która powinna zostać uruchomiona w pętli po wszystkich uczestnikach
::                     szkolenia.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:='\\szk_prac_szk_opis_wyslij/phr_widok.fml';

{? var_pres('_a')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak parametru wywołania %1.'@ ['UID']);
   return()
|? ~exec('chk_role','#b__box',OPERATOR.USER,_a)
|| FUN.emsg(_fml+'\n'+'Brak uprawnień do uruchomienia czynności %1.'@ [_a]);
   return()
?};
_uid:=_a;

_name:=exec('name','#b_action',_uid);
{? ~FUN.ask('Czy na pewno przygotować zaznaczonym uczestnikom szkolenia powiadomienie\n"%1"?'@ [_name])
|| return()
?};

SZK_PRAC.cntx_psh();
SZK_PRAC.index('SZK_PRAC');
SZK_PRAC.prefix(SZK_OPIS.ref());
{? SZK_PRAC.first()
|| _SENDTAB:=exec('sendtab','phr_poczta',_name);

   OSOBA.cntx_psh();
   OSOBA.prefix();
   P.cntx_psh();
   P.prefix();

   _cntx:=obj_new('RESULT','SUB','TO','BODYH');
   _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:=_uid;
   _params.GRUPA:='T';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   _params.CONTEXT:=_cntx;
   _params.QUIET:='T';
   FUN.prg_start(SZK_PRAC.size());
   {!
   |? _SENDTAB.blank();
      _SENDTAB.NAZWISKO:=SZK_PRAC.P().OSOBA().NAZWISKO;
      _SENDTAB.PIERWSZE:=OSOBA.PIERWSZE;

      _next:=FUN.prg_next(,'%1 - %2\n%3'@ [_name,'przygotowanie'@,_SENDTAB.NAZWISKO+' '+_SENDTAB.PIERWSZE]);

      _params.UIDREF:=SZK_PRAC.uidref();
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'SZK_PRAC',SZK_PRAC.ref());
      {! _lp:=1 .. obj_len(_cntx)
      |! _cntx[_lp]:=''
      !};
      exec('mp_run','#b__box',_params);
      _SENDTAB.RESULT:=_cntx.RESULT;
      _SENDTAB.SUB:=_cntx.SUB;
      _SENDTAB.TO:=_cntx.TO;
      _SENDTAB.AS:="exec('szk_prac_as','phr_poczta','"+$SZK_PRAC.ref()+"')";
      _SENDTAB.memo_set(_cntx.BODYH,'BODYH');
      _SENDTAB.add();
      _SENDTAB.memo_put(,'BODYH');

      _next & SZK_PRAC.next()

   !};
   FUN.prg_stop();

   P.cntx_pop();
   OSOBA.cntx_pop();

   _SENDTAB.select()

?};
SZK_PRAC.cntx_pop();

~~


\szk_prac_p_wyslij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa wysyłania powiadomień dla bieżącego rekordu tabeli P.
::   WE: _a [STRING] - Identyfikator czynności, która powinna zostać uruchomiona w pętli po wszystkich uczestnikach
::                     szkolenia.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:='\\szk_prac_p_wyslij/phr_widok.fml';

{? var_pres('_a')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak parametru wywołania %1.'@ ['UID']);
   return()
|? ~exec('chk_role','#b__box',OPERATOR.USER,_a)
|| FUN.emsg(_fml+'\n'+'Brak uprawnień do uruchomienia czynności %1.'@ [_a]);
   return()
?};
_uid:=_a;

_name:=exec('name','#b_action',_uid);
{? ~FUN.ask('Czy na pewno przygotować zaznaczonym uczestnikom szkolenia powiadomienie\n"%1"?'@ [_name])
|| return()
?};

SZK_PRAC.cntx_psh();
SZK_PRAC.index('PRAC_DAT');
SZK_PRAC.prefix(P.ref());
{? SZK_PRAC.first()
|| _SENDTAB:=exec('sendtab','phr_poczta',_name);

   OSOBA.cntx_psh();
   OSOBA.prefix();
   P.cntx_psh();
   P.prefix();

   _cntx:=obj_new('RESULT','SUB','TO','BODYH');
   _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:=_uid;
   _params.GRUPA:='T';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   _params.CONTEXT:=_cntx;
   _params.QUIET:='T';
   FUN.prg_start(SZK_PRAC.size());
   {!
   |? _SENDTAB.blank();
      _SENDTAB.NAZWISKO:=SZK_PRAC.P().OSOBA().NAZWISKO;
      _SENDTAB.PIERWSZE:=OSOBA.PIERWSZE;

      _next:=FUN.prg_next(,'%1 - %2\n%3'@ [_name,'przygotowanie'@,_SENDTAB.NAZWISKO+' '+_SENDTAB.PIERWSZE]);

      _params.UIDREF:=SZK_PRAC.uidref();
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'SZK_PRAC',SZK_PRAC.ref());
      {! _lp:=1 .. obj_len(_cntx)
      |! _cntx[_lp]:=''
      !};
      exec('mp_run','#b__box',_params);
      _SENDTAB.RESULT:=_cntx.RESULT;
      _SENDTAB.SUB:=_cntx.SUB;
      _SENDTAB.TO:=_cntx.TO;
      _SENDTAB.AS:="exec('szk_prac_as','phr_poczta','"+$SZK_PRAC.ref()+"')";
      _SENDTAB.memo_set(_cntx.BODYH,'BODYH');
      _SENDTAB.add();
      _SENDTAB.memo_put(,'BODYH');

      _next & SZK_PRAC.next()

   !};
   FUN.prg_stop();

   P.cntx_pop();
   OSOBA.cntx_pop();

   _SENDTAB.select()

?};
SZK_PRAC.cntx_pop();

~~


\szk_zap_webwer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Po odświeżeniu okna WEBWER tabeli SZK_ZAP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());
{? obj_ntab(_par) & var_pres('SZK_ZAP_WEBWER_AR',_par)=type_of("")
|| _par.SZK_ZAP_WEBWER_AR()
?};
~~


\szk_zap_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli SZK_ZAP.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr obowiązkowy wyłącznie dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(SZK_ZAP)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld=''
:: Ustawienie odpowiednich okien wertowania dla słowników.
|| _set(_TAB,_we,_grp_ident,'win_dict=%1' ['WEBSLO'],SZK_ZAP,'SZK_WZO','OPIS');
   _set(_TAB,_we,_grp_ident,'win_dict=%1' ['WEBSLO'],SZK_ZAP,'KK','SYM')
?};

{? _fld='' | _fld='KK_P'
|| _sval:=$(SZK_ZAP.KK_P='N');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],SZK_ZAP,'KK','SYM')
?};

1


\szk_zap_szk_wzo_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Po redagowaniu pola SZK_ZAP.SZK_WZO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Aktualizacja pola SZK_ZAP.TEMAT. Wartość pola SZK_ZAP.TEMAT jest pielęgnowana przez wyzwalacz, ale nam potrzebna jest
:: ta wartość wcześniej - do wyświetlenia w oknie.
{? SZK_ZAP.SZK_WZO
|| SZK_WZO.cntx_psh();
   SZK_WZO.prefix();
   SZK_TEM.cntx_psh();
   SZK_TEM.prefix();
   SZK_ZAP.TEMAT:=SZK_ZAP.SZK_WZO().TEMAT().TEMAT;
   SZK_TEM.cntx_pop();
   SZK_WZO.cntx_pop()
|| SZK_ZAP.TEMAT:=''
?};
1


\szk_zap_rejestrujacy_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Przed wyświetleniem pola POLA_GRP.TXT_1 symulującego osobę rejestrującą zapotrzebowanie na szkolenie.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:='';
{? SZK_ZAP.get() & SZK_ZAP.ZGL_OS
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   SZK_ZAP.ZGL_OS();
   POLA_GRP.TXT_1:=OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE;
   OSOBA.cntx_pop()
?};
~~


\szk_zap_weryfikujacy_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Przed wyświetleniem pola POLA_GRP.TXT_2 symulującego osobę weryfikującą zapotrzebowanie na szkolenie.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_2:='';
{? SZK_ZAP.get() & SZK_ZAP.WER_OS
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   SZK_ZAP.WER_OS();
   POLA_GRP.TXT_2:=OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE;
   OSOBA.cntx_pop()
?};
~~


\szk_zap_statszkol_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Przed wyświetleniem pola POLA_GRP.TXT_3 symulującego status szkolenia.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_3:='';
{? SZK_ZAP.get() & SZK_ZAP.SZK_PRAC
|| SZK_PRAC.cntx_psh();
   SZK_PRAC.prefix();
   SZK_OPIS.cntx_psh();
   SZK_OPIS.prefix();
   SLO_KOD.cntx_psh();
   SLO_KOD.prefix();
   POLA_GRP.TXT_3:=SZK_ZAP.SZK_PRAC().SZKOL().STATUS().NAZWA;
   SLO_KOD.cntx_pop();
   SZK_OPIS.cntx_pop();
   SZK_PRAC.cntx_pop()
?};
~~


\szk_zap_dotoceny_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Przed wyświetleniem pola POLA_GRP.TXT_4 - check-box "Dotyczy oceny [T/N]".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_4:={? SZK_ZAP.get() & SZK_ZAP.ZO_TEST || 'T' || 'N' ?};
~~


\szk_zap_webred_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa okna redagowania WEBRED tabeli SZK_ZAP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Okno jest wykorzystywane w różnych obszarach / dziedzinach. Ale w każdym z nich są otwierane odpowiednie maski i
:: ustawiane odpowiednie zmienne. A taki jest właśnie cel tej formuły - ustawienie środowiska. Nie ma więc znaczenia,
:: która formuła inicjująca zostanie wykonana (z której dziedziny).
exec('env_wt','poc')


\szk_zap_webred_kk_p_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Po redagowaniu pola SZK_ZAP.KK_P w oknie WEBRED tabeli SZK_ZAP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('szk_zap_efld_opt','phr_widok')


\szk_zap_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła odpowiada za aktualizacje okien tabeli SZK_ZAP.
::   WE: [_a] [NUMBER] - Pozycja okna na stosie [0*/1/2].
::       [_b] [NUMBER] - Czy aktualizacja przeprowadzana jest w związku z zapotrzebowaniem związanym z oceną [0*/1]?
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_depth:={? var_pres('_a')=type_of(0) & 0<=_a & _a<=2 || _a || 0 ?};
_ocena:=var_pres('_b')=type_of(_b) & _b;

_TAB:=web_top_tab(_depth,0);
_ws:=web_top_win(_depth,0);
_id:=web_top_ident(_depth);
_TAB.web_refresh(_ws,_id);
:: Powyżej obowiązkowe odświeżenie bieżącego okna.
:: Poniżej obsługa sytuacji specjalnych.
{? _TAB=SZK_ZAP & _ws='WEBGWER'
:: Okienko zapotrzebowań z zakładkami: Związane z oceną (SZK_ZAP_O) / Wszystkie (SZK_ZAP_A).
|| {? _id='SZK_ZAP_O'
   || _TAB.web_refresh(_ws,'SZK_ZAP_A')
   |? _id='SZK_ZAP_A' & _ocena
   || _TAB.web_refresh(_ws,'SZK_ZAP_O')
   ?}
?};
~~


\szk_zap_webwer_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Po redagowaniu rekordu w tabeli SZK_ZAP w oknie WEBWER.
::   WE: [_a] [STRING] - Identyfikator wybranego przycisku [domyślnie: ANULUJ].
::       [_b] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_btn:={? var_pres('_a')=type_of('') || _a || 'ANULUJ' ?};
_put:=var_pres('_b')=type_of(0) & _b;

{? _btn='ANULUJ'
|| web_top_close(0);
   return()
?};

{? ~(exec('env_wt','poc') & exec('load_cur_prac','p_web'))
|| FUN.emsg('Ustalenie bieżącego pracownika nie było możliwe.'@);
   return()
?};

_cur_prac:=P.ref();

_chk:=exec('szk_zap_chk','phr_sz_tab',_put);
{? type_of(_chk)=type_of('') & _chk<>''
:: Niewypełnione pole - odświeżamy okno redagowania i wskazujemy pole, od którego rozpocznie się redagowanie.
:: Zakładamy przy tym, że pole pochodzi z tabeli SZK_ZAP.
|| SZK_ZAP.web_update(,,,_chk);
   return()
?};

{? SZK_ZAP.KK_P='T' & SZK_ZAP.P
|| P.cntx_psh();
   P.prefix();
   SZK_ZAP.KK:=SZK_ZAP.P().KK;
   P.cntx_pop()
?};

SZK_WZO.cntx_psh();
SZK_WZO.prefix();

:: Przygotujmy tabelę przełożonych pracownika, którego dotyczy zapotrzebowanie.
_NAD:=exec('prac_nad','stanprac',SZK_ZAP.P);
:: Wzorzec jest polem wymagalnym, jeżeli doszliśmy tutaj, to znaczy że jest wypełnione.
SZK_ZAP.WER_WYM:=SZK_ZAP.SZK_WZO().WER_WYM;
{? SZK_ZAP.WER_WYM='N' | (_NAD.first() & _NAD.P_SQL=$_cur_prac) | (SZK_ZAP.P=_cur_prac & ~_NAD.first())
:: Jeżeli zapotrzebowanie nie wymaga weryfikacji lub
::    składa je bezpośredni przełożony pracownika lub
::    dotyczy pracownika bez przełożonego,
:: to automatycznie jest weryfikowane.
|| SZK_ZAP.WER_KTO:=_cur_prac;
   SZK_ZAP.WER_WYN:=exec('kod','ext_slo','WER_WYN','Z');
   SZK_ZAP.WER_DAT:=date()
|| SZK_ZAP.WER_KTO:=null();
   SZK_ZAP.WER_WYN:=exec('kod','ext_slo','WER_WYN','X');
   SZK_ZAP.WER_DAT:=date(0,0,0)
?};

SZK_WZO.cntx_pop();

do();
{? _put
|| SZK_ZAP.put()
|| SZK_ZAP.add()
?};

ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
SZK_ZAP.ZZ_DOK();
ZZ_DOK.memo_put(,'NOTA');
ZZ_DOK.cntx_pop();
{? end()
|| exec('szk_zap_refresh','phr_widok',1,SZK_ZAP.ZO_TEST<>null());
   web_top_close(0)
|| FUN.info('Zapisanie wprowadzonych zmian nie powiodło się.\nSpróbuj ponownie.'@)
?};

~~


\szk_zap_webwer_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Dołącz" w oknie WEBWER tabeli SZK_ZAP.
::       Formuła może wykorzystywać następujące parametry (przekazane poprzez web_params_set()):
::          SZK_ZAP_P         [RULE]   - Formuła zwracająca SQL-ref'a pracownika, którego dotyczy zgłoszenia.
::          SZK_ZAP_ZGL_TYP   [STRING] - Kod rodzaju zgłoszenia.
::          SZK_ZAP_POD_REAL  [STRING] - Kod podstawy realizacji zapotrzebowania.
::          SZK_ZAP_ZO_TEST   [RULE]   - Formuła zwracająca SQL-ref'a oceny.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('env_wt','psz')
|| _kto:=P.ref();
   web_params_set(_par:=web_params_get());
   _we:='WEBRED';
   _tRULE:=type_of("");
   _tSTRING:=type_of('');
   ZZ_DOK.prefix();
   ZZ_DOK.blank();
   ZZ_DOK.memo_set(,'NOTA');
   SZK_ZAP.blank();
   {? obj_ntab(_par)
   || {? var_pres('SZK_ZAP_P',_par)=_tRULE & type_of(_pref:=_par.SZK_ZAP_P())=_tSTRING & +_pref=16 & ref_tab(_pref)=P
      || P.cntx_psh();
         P.clear();
         {? P.seek(_pref)
         || SZK_ZAP.P:=P.ref();
            SZK_ZAP.KK:=P.KK;
            SZK_ZAP.STN:=P.ST;
            STN.cntx_psh();
            STN.prefix();
            SZK_ZAP.KADRA:=P.ST().K;
            STN.cntx_pop();
            SZK_ZAP.UD_SKL:=P.WYDZIAL
         ?};
         P.cntx_pop()
      ?};
      {? var_pres('SZK_ZAP_ZGL_TYP',_par)=_tSTRING
      || SZK_ZAP.ZGL_TYP:=exec('kod','ext_slo','ZGL_TYP',_par.SZK_ZAP_ZGL_TYP)
      ?};
      {? var_pres('SZK_ZAP_POD_REAL',_par)=_tSTRING
      || SZK_ZAP.POD_REAL:=exec('kod','ext_slo','POD_REAL',_par.SZK_ZAP_POD_REAL)
      ?};
      {? var_pres('SZK_ZAP_ZO_TEST',_par)=_tRULE &
         type_of(_zo_test:=_par.SZK_ZAP_ZO_TEST())=_tSTRING & +_zo_test=16 & ref_tab(_zo_test)=ZO_TEST
      || ZO_TEST.cntx_psh();
         ZO_TEST.prefix();
         {? ZO_TEST.seek(_zo_test)
         || SZK_ZAP.ZO_TEST:=ZO_TEST.ref()
         ?};
         ZO_TEST.cntx_pop()
      ?}
   ?};
   SZK_ZAP.ZGL_KTO:=_kto;
   exec('szk_zap_efld_opt','phr_widok','*',SZK_ZAP,_we);
   SZK_ZAP.web_edit(_we,,,,"exec('szk_zap_webwer_ae','phr_widok',_a,0)")
?};
~~


\szk_zap_webwer_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Popraw" w oknie WEBWER tabeli SZK_ZAP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('env_wt','psz') & exec('exist','#record')
|| web_params_set(_par:=web_params_get());
   _we:='WEBRED';
   ZZ_DOK.prefix();
   SZK_ZAP.ZZ_DOK().memo_get(,'NOTA');
   exec('szk_zap_efld_opt','phr_widok','*',SZK_ZAP,_we);
   SZK_ZAP.web_edit(_we,,,,"exec('szk_zap_webwer_ae','phr_widok',_a,1)")
?};
~~


\szk_zap_webwer_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Usuń" w oknie WEBWER tabeli SZK_ZAP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~(exec('env_wt','psz') & exec('exist','#record'))
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
?};

SZK_ZAP.web_cntx_save(1);
web_ask(
   "  {? ~_a
      || return()
      ?};
      {? ~(exec('env_wt','psz') & SZK_ZAP.web_cntx_load(1)>0)
      || FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
      |? _ocena:=SZK_ZAP.ZO_TEST<>null();
         SZK_ZAP.del(1,1)=0
      || FUN.emsg('Usunięcie nie powiodło się.'@)
      || exec('szk_zap_refresh','phr_widok',0,1)
      ?}
   ",
   'Czy usunąć bieżący wiersz?'@,
   FUN.TYT
);

~~


\szk_zap_webwer_akceptacja_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Akceptuj/Odrzuć" w oknie WEBWER tabeli SZK_ZAP.
::   WE: [_a] [STRING] - Tryb pracy:
::                         Z - Akceptuj;
::                         O - Odrzuć [domyślnie].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='Z' | _a='O') || _a || 'O' ?};

{? ~exec('env_wt','psz')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
|? SZK_ZAP.get()
|| SLO_KOD.cntx_psh();
   SLO_KOD.prefix();
   _kod:=SZK_ZAP.WER_WYN().KOD;
   {? _tryb<>_kod
   || SZK_ZAP.WER_WYN:=exec('kod','ext_slo','WER_WYN',_tryb);
      SZK_ZAP.WER_KTO:=P.ref();
      SZK_ZAP.WER_DAT:=date();
      SZK_ZAP.put();
      web_top_tab(0,0).web_refresh(web_top_win(0),web_top_ident(0))
   ?};
   SLO_KOD.cntx_pop()
?};
~~


\za_zest_wyslij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Obsługa wysłania powiadomień dla bieżącego rekordu tabeli ZA_ZEST (ankiety).
::   WE: _a [STRING] - Identyfikator czynności, która powinna zostać uruchomiona w pętli po wszystkich formularzach
::                     ankiety.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:='\\za_zest_wyslij/phr_widok.fml';

{? var_pres('_a')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak parametru wywołania %1.'@ ['UID']);
   return()
|? ~exec('chk_role','#b__box',OPERATOR.USER,_a)
|| FUN.emsg(_fml+'\n'+'Brak uprawnień do uruchomienia czynności %1.'@ [_a]);
   return()
?};
_uid:=_a;

_name:=exec('name','#b_action',_uid);

ZA_FORM.cntx_psh();
ZA_FORM.index('ZA_ZEST');
ZA_FORM.prefix(ZA_ZEST.ref());
{? ZA_FORM.first()
|| {? ~FUN.ask('Czy na pewno przygotować powiadomienia dla formularzy ankiety\n"%1"?'@ [ZA_ZEST.NAZWA])
   || ZA_FORM.cntx_pop();
      return()
   ?};

   _SENDTAB:=exec('sendtab','phr_poczta',_name);
   _info:=0;

   P.index('ZZ_DOK');
   OSOBA.cntx_psh();
   OSOBA.prefix();

   _cntx:=obj_new('RESULT','SUB','TO','BODYH');
   _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:=_uid;
   _params.GRUPA:='T';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   _params.CONTEXT:=_cntx;
   _params.QUIET:='T';
   FUN.prg_start(ZA_FORM.size());
   {!
   |? _kto:=ZA_FORM.ZZ_LINK;
      {? _kto=null() | _kto<>ZA_FORM.ZZ_KTO().ZZ_LINK
      || {? ZA_FORM.ZZ_KTO
         || ZA_FORM.ZZ_LINK:=ZA_FORM.ZZ_KTO().ZZ_LINK;
            ZA_FORM.put();
            _kto:=ZA_FORM.ZZ_LINK
         || _info:=1
         ?}
      ?};
      {? _kto<>null() & ZA_FORM.ZZ_KTO().ZZ_LINK<>null()
      || P.cntx_psh();
         P.prefix(ref_name(_kto),_kto);
         {? P.first()
         || _SENDTAB.blank();
            _SENDTAB.NAZWISKO:=P.OSOBA().NAZWISKO;
            _SENDTAB.PIERWSZE:=OSOBA.PIERWSZE;
            _next:=FUN.prg_next(,'%1 - %2\n%3'@ [_name,'przygotowanie'@,_SENDTAB.NAZWISKO+' '+_SENDTAB.PIERWSZE]);
            _params.UIDREF:=ZA_FORM.uidref();
            exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZA_FORM',ZA_FORM.ref());
            {! _lp:=1 .. obj_len(_cntx)
            |! _cntx[_lp]:=''
            !};
            exec('mp_run','#b__box',_params);
            _SENDTAB.RESULT:=_cntx.RESULT;
            _SENDTAB.SUB:=_cntx.SUB;
            _SENDTAB.TO:=_cntx.TO;
            _SENDTAB.memo_set(_cntx.BODYH,'BODYH');
            _SENDTAB.add();
            _SENDTAB.memo_put(,'BODYH')
         ?};
         P.cntx_pop();
         _next
      ?};
      ZA_FORM.next()
   !};
   FUN.prg_stop();

   OSOBA.cntx_pop();

   {? ~_SENDTAB.size()
   || FUN.info('Wybrana ankieta posiada tylko formularze dodane ręcznie, bez przywiązanych wypełniających.\n'
               'Brak możliwości wysłania powiadomień'@)
   || {? _info=1
      || FUN.info('Na liście formularzy znaleziono formularze bez przywiązanych wypełniających. Wysłanie powiadomień\n'
               'dla takich formularzy nie będzie możliwe.'@)
      ?};
      _SENDTAB.select()
   ?}
|| FUN.info('Nie znaleziono formularzy. Utworzenie powiadomień nie jest możliwe.'@)
?};
ZA_FORM.cntx_pop();
~~


\za_test_rodz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła przed redagowaniem dla pola RODZ tabeli ZA_TEST.
::----------------------------------------------------------------------------------------------------------------------
{? ZA_ZEST.TYP().KOD='T' & ZA_TEST.ZA_ZEST().PKT='T' & (ZA_TEST.RODZ().KOD='J' | ZA_TEST.RODZ().KOD='W')
|| ZA_TEST.efld_opt('REDT','enable=0,mark=0',ZA_TEST,'PKT')
|| ZA_TEST.efld_opt('REDT','enable=1,mark=1',ZA_TEST,'PKT')
?}


\za_test_odp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła obsługująca akcję "Odpowiedzi' dla okna wertowania WER_TS tabeli ZA_TEST.
::----------------------------------------------------------------------------------------------------------------------
ZA_NOTAO.cntx_psh();
ZA_NOTAO.index('NUMER');
ZA_NOTAO.prefix(ZA_TEST.ref());
{? ZA_TEST.ZA_ZEST().TYP=exec('kod','ext_slo','ZA_ZEST','T')
|| {? ZA_TEST.ZA_ZEST().PKT='T'
   || _wnd:='PKT';
      _edit:='PKT';
      _hid:='DPUE'
   || _wnd:='TRUE';
      _edit:='TRUE';
      _hid:='DPUEW'
   ?}
|| _wnd:='SONDA';
   _edit:='SONDA';
   _hid:='DPUE'
?};
ZA_NOTAO.win_sel(_wnd);
ZA_NOTAO.win_edit(_edit);
ZA_NOTAO.select(,,,{? ZA_TEST.ZA_ZEST().SLO_KOD().KOD='U' || _hid || '' ?});
ZA_NOTAO.cntx_pop();
~~


\za_notao_za_test_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_NOTAO.ZA_TEST.
::----------------------------------------------------------------------------------------------------------------------
ZA_TEST.ref()


\za_zest_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknie WER tabeli ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
SLO_KOD.cntx_psh();

:: deklaracja zmiennych wykorzystywanych w akcji
_test:=0;
_prog:=0;
_szkol:=0;
_szab_szk:='N';
_typ:=null();
_typ:=null();
_rodz:=null();
_tryb:='';
:: rozpoznanie i ustawienie środowiska (szkolenia/badania opinii)
{? ZZ_TMPT.SYMBOL<>'SZK_OPIS'
|| _test:=1;
   SLO_KOD.f_clear();
   SLO_KOD.index('NAZWA');
   SLO_KOD.prefix(exec('slo_typ','ext_slo','ZA_ZEST'))
|| _szkol:=1;
   SLO_KOD.clear();
   SZK_OPIS.cntx_psh();
   SZK_OPIS.prefix();
   {? SZK_OPIS.seek(SZK_OPIS.ref())
   || _test:=SZK_OPIS.EGZAMIN='T';
      _prog:=SZK_OPIS.PROMOCJA;
      _dok:=$SZK_OPIS.ZZ_DOK;
      _tryb:=SZK_OPIS.TRYB
   ?};
   SZK_OPIS.cntx_pop();
   {? cur_win(1)='WERBW' | cur_win(1)='WERZW' | cur_win(1)='WERBWP' | cur_win(1)='WERZWP'
   || _jest:=sql(
         'select * from ZA_ZEST '
         'join SLO_KOD using(ZA_ZEST.TYP,SLO_KOD.REFERENCE)'
         'where ZA_ZEST.ZZ_LINK=\':_b\' and SLO_KOD.SLO_TYP=\':_a\' and '
         'SLO_KOD.KOD=\'T\'',
         $exec('slo_typ','ext_slo','ZA_ZEST'),_dok
      );
      {? _test & ~_jest.first()
      || SLO_KOD.f_set('KOD',,'SLO_KOD.SLO_TYP=\':_a\' and (SLO_KOD.KOD=\'T\' or SLO_KOD.KOD=\'O\')',
            $exec('slo_typ','ext_slo','ZA_ZEST')
         )
      || SLO_KOD.f_set('KOD',,'SLO_KOD.SLO_TYP=\':_a\' and SLO_KOD.KOD=\'O\'',$exec('slo_typ','ext_slo','ZA_ZEST'))
      ?}
   |? cur_win(1)='SZAB'
   || _szab_szk:='T';
      _test:=1;
      SLO_KOD.clear();
      SLO_KOD.f_set('KOD',,'SLO_KOD.SLO_TYP=\':_a\' and (SLO_KOD.KOD=\'T\' or SLO_KOD.KOD=\'O\')',
         $exec('slo_typ','ext_slo','ZA_ZEST')
      )
   ?}
?};

:: właściwa akcja dołącz
SLO_KOD.win_sel('WER');
{? _test & {? _szkol & _szab_szk='N' || ~_jest.first() || 1 ?}
|| {? SLO_KOD.select(,,,'DPU')
   || _typ:=SLO_KOD.ref();
      {? SLO_KOD.KOD='T' & _szkol
      || _rodz:=exec('za_typ_ref','phr_tab',1,'ES')
      || _rodz:=null()
      ?}
   || SLO_KOD.cntx_pop();
      SLO_KOD.f_clear();
      return(0)
   ?}
|| _typ:=exec('kod','ext_slo','ZA_ZEST','O');
   _rodz:=null()
?};
{? _szab_szk='T' & SLO_KOD.KOD='T'
|| _choice:=FUN.choice(
      'Czy dla tworzonego testu wyniki mają być liczone w procentach czy w punktach?'@,,'W procentach'@,'W punktach'@
   );
   {? _choice=2
   || _tryb:='N'
   |? _choice=0
   || SLO_KOD.cntx_pop();
      return(0)
   || _tryb:='T'
   ?}
?};

{? SLO_KOD.KOD='T'
|| {? _szkol
   || {? _tryb='N'
      || ZA_ZEST.win_edit('TEST_SN')
      || ZA_ZEST.win_edit('TEST_ST')
      ?}
   || ZA_ZEST.win_edit('TEST')
   ?}
|? SLO_KOD.KOD='S'
|| ZA_ZEST.win_edit('SONDA')
|| {? _szkol
   || ZA_ZEST.win_edit('REDS')
   || ZA_ZEST.win_edit('RED')
   ?}
?};
ZA_ZEST.blank();
ZA_ZEST.SLO_KOD:=exec('kod','ext_slo','ZA_ZESTA','P');
ZA_ZEST.TYP:=_typ;
ZA_ZEST.TRYB:={? ZA_ZEST.ZZ_LINK().KLASA='SZK_OPIS' & _tryb='N' || 'T' || 'N' ?};
ZA_ZEST.ZZ_DOK:=exec('add_dok','phr_tab',ZA_ZEST);
_txt:=
   'Masz przed sobą test, który zawiera zadania otwarte i zamknięte. Pamiętaj! '
   'W pytaniach zamkniętych należy pokreślić prawidłową odpowiedź.'@;
ZA_ZEST.memo_set(_txt,'NAG');
{? _prog & ZA_ZEST.TYP().KOD='T'
|| ZA_ZEST.PROG:=_prog
?};
{? _szkol & _szab_szk='N'
|| {? ~_jest.first()
   || ZA_ZEST.ZA_TYP:=_rodz
   ?}
?};
{? ZA_ZEST.edit("
      _link:=ZA_ZEST.ZZ_LINK;
      _nazwa:=ZA_ZEST.NAZWA;
      ZA_ZEST.cntx_psh();
      ZA_ZEST.index('NAZWA');
      ZA_ZEST.prefix(ref_name(_link),_link,exec('ref_firma','ustawienia'),_nazwa,_nazwa);
      {? ZA_ZEST.first()
      || ZA_ZEST.cntx_pop();
         FUN.info('Ankieta o podanej nazwie już istnieje.');
         return('NAZWA')
      || ZA_ZEST.cntx_pop();
         {? ZA_ZEST.TYP().KOD='T'
         || _klasa:=ZA_ZEST.ZZ_LINK().KLASA;
            {? (ZA_ZEST.PROG<=0 | ZA_ZEST.PROG>100) & {? _klasa='SZK_OPIS' || SZK_OPIS.TRYB='T' || 1 ?}
            || FUN.info(
                  'Wprowadzono błędną wartość progu zdawalności. Dopuszczalna wartość mieści się w granicy 1-100.'@
               );
               return('PROG')
            |? ZA_ZEST.PROG<=0 & {? _klasa='SZK_OPIS' || SZK_OPIS.TRYB='N' || 1 ?}
            || FUN.info(
                  'Wprowadzono błędną wartość progu zdawalności. Dopuszczalna wartość powinna być większa niż zero.'@
               );
               return('PROG')
            || 1
            ?}
         || 1
         ?};
         exec('za_zest_chk','phr_za_tab',-menu_txt()='popraw')
      ?}
   ")
|| SLO_KOD.cntx_pop();
   ZA_ZEST.add();
   SLO_KOD.f_clear()
|| SLO_KOD.cntx_pop();
   SLO_KOD.f_clear();
   0
?}


\za_zest_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Dołącz - po" w oknie WER tabeli ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
1


\za_zest_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Popraw - po" w oknie WER tabeli ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
_kod:=ZA_ZEST.TYP().KOD;
_klasa:=ZA_ZEST.ZZ_LINK().KLASA;
_dok:=ZA_ZEST.ZZ_LINK;
_tryb:='';
_szkol:=0;
{? _klasa='ZZ_TMPT' | _klasa='ZZ_TEMP'
|| ZZ_TMPT.cntx_psh();
   ZZ_TMPT.index('ZZ_DOK');
   ZZ_TMPT.prefix(ref_name(_dok),_dok);
   {? ZZ_TMPT.first() & ZZ_TMPT.SYMBOL='SZK_OPIS'
   || _szkol:=1
   ?};
   ZZ_TMPT.cntx_pop()
|? _klasa='SZK_OPIS'
|| _szkol:=1;
   SZK_OPIS.cntx_psh();
   SZK_OPIS.index('ZZ_DOK');
   SZK_OPIS.prefix(ref_name(ZA_ZEST.ZZ_LINK),ZA_ZEST.ZZ_LINK);
   {? SZK_OPIS.first()
   || _tryb:=SZK_OPIS.TRYB
   ?};
   SZK_OPIS.cntx_pop()
?};
{? _kod='T'
|| {? _szkol & (_tryb='N' | ZA_ZEST.TRYB='N')
   || ZA_ZEST.win_edit('TEST_SN')
   || {? _szkol
      || ZA_ZEST.win_edit('TEST_ST')
      || ZA_ZEST.win_edit('TEST')
      ?}
   ?}
|? _kod='S'
|| ZA_ZEST.win_edit('SONDA')
|| {? _szkol
   || ZA_ZEST.win_edit('REDS')
   || ZA_ZEST.win_edit('RED')
   ?}
?}


\za_notao_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknach tabeli ZA_NOTAO.
::----------------------------------------------------------------------------------------------------------------------
ZA_NOTAO.blank();
{? ZA_NOTAO.edit("
      {? ZA_TEST.RODZ().KOD='J'
      || {? ZA_TEST.ZA_ZEST().PKT='N'
         || _check:=ZA_NOTAO.TRUE;
            _true:=sql('
               select * from
                  ZA_NOTAO
               where
                  ZA_NOTAO.TRUE=\\'T\\' and ZA_NOTAO.ZA_TEST=\\\':_a\\\''
               ,$ZA_TEST.ref()
            );
            {? _true.size() & _check='T'
            || FUN.emsg('W pytaniach jednokrotnego wyboru tylko jedna odpowiedź może być prawidłowa.');
               return('TRUE')
            || 1
            ?}
         || _value:=ZA_NOTAO.ODPT;
            _pkt:=sql('
               select * from
                  ZA_NOTAO
               where
                  ZA_NOTAO.ODPT>0 and ZA_NOTAO.ZA_TEST=\\\':_a\\\''
               ,$ZA_TEST.ref()
            );
            {? _pkt.size() & _value>0
            || FUN.emsg('W pytaniach jednokrotnego wyboru tylko jedna odpowiedź może być punktowana.');
               return('ODPT')
            || 1
            ?}
         ?}
      || 1
      ?};
      exec('za_notao_chk','phr_za_tab',-menu_txt()='dolacz')
   ")
|| 1
|| 0
?}


\za_notao_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Dołącz - po" w oknach tabeli ZA_NOTAO.
::----------------------------------------------------------------------------------------------------------------------
ZA_NOTAO.add()


\za_notao_up_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Przesuń - Do góry" w oknach tabeli ZA_NOTAO.
::----------------------------------------------------------------------------------------------------------------------
{? ZA_NOTAO.NUMER>1
|| _numer:=ZA_NOTAO.NUMER;
   ZA_NOTAO.NUMER:=-_numer;
   do();
   {? ZA_NOTAO.put()
   || ZA_NOTAO.cntx_psh();
      {? ZA_NOTAO.find_le(_numer)
      || ZA_NOTAO.NUMER:=_numer;
         {? ~ZA_NOTAO.put()
         || undo();
            end();
            ZA_NOTAO.cntx_pop();
            return()
         ?}
      ?};
      ZA_NOTAO.cntx_pop();
      ZA_NOTAO.NUMER:=_numer-1;
      {? ~ZA_NOTAO.put()
      || undo()
      ?}
   ?};
   end()
?}


\za_notao_down_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Przesuń - W dół" w oknach tabeli ZA_NOTAO.
::----------------------------------------------------------------------------------------------------------------------
ZA_NOTAO.cntx_psh();
{? ZA_NOTAO.next()
|| exec('za_notao_up_b','phr_widok')
?};
ZA_NOTAO.cntx_pop()


\za_notao_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Rekord - po" w oknie WER tabeli ZA_NOTAO.
::   WE:
::   WY: akronim pola do redakcji
::----------------------------------------------------------------------------------------------------------------------
_za_zest:=ZA_NOTAO.ZA_TEST().ZA_ZEST().PKT='T';
_za_test:=$ZA_NOTAO.ZA_TEST;
_ref:=$ZA_NOTAO.ref();
{? ZA_NOTAO.ODPT<0
|| FUN.emsg('Wartość punktów za odpowiedź nie może być ujemna.');
   return('ODPT')
?};
{? ZA_NOTAO.ZA_TEST().RODZ().KOD='J' & ZA_NOTAO.TRUE='T' & ~_za_zest
|| _true:=sql('
      select * from
         ZA_NOTAO
      where
         ZA_NOTAO.TRUE=\'T\' and ZA_NOTAO.ZA_TEST=\':_a\' and ZA_NOTAO.REFERENCE<>\':_b\''
      ,_za_test,_ref
   );
   {? _true.first()
   || FUN.emsg('W pytaniach jednokrotnego wyboru tylko jedna odpowiedź może być prawidłowa.');
      return('TRUE')
   || 1
   ?}
|? ZA_NOTAO.ZA_TEST().RODZ().KOD='J' & ZA_NOTAO.ODPT>0 & _za_zest
|| _pkt:=sql('
      select * from
         ZA_NOTAO
      where
         ZA_NOTAO.ODPT>0 and ZA_NOTAO.ZA_TEST=\':_a\' and ZA_NOTAO.REFERENCE<>\':_b\''
      ,_za_test,_ref
   );
   {? _pkt.first()
   || FUN.emsg('W pytaniach jednokrotnego wyboru tylko jedna odpowiedź może być punktowana.');
      return('ODPT')
   || 1
   ?}
|| 1
?};
exec('za_notao_chk','phr_za_tab',-menu_txt()='popraw')


\za_notao_true_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Prawidłowa - po" w oknach tabeli ZA_NOTAO.
::----------------------------------------------------------------------------------------------------------------------
_za_zest:=ZA_NOTAO.ZA_TEST().ZA_ZEST().PKT='T';
_za_test:=$ZA_NOTAO.ZA_TEST;
{? ZA_NOTAO.TRUE='N'
|| {? ZA_NOTAO.ZA_TEST().RODZ().KOD='J'
   || _ref:=ZA_NOTAO.ref();
      ZA_NOTAO.cntx_psh();
      _loop:=ZA_NOTAO.first();
      {!
      |? _loop
      |! {? $ZA_NOTAO.ref()=$_ref
         || ZA_NOTAO.TRUE:='T';
            ZA_NOTAO.put()
         || ZA_NOTAO.TRUE:='N';
            ZA_NOTAO.put()
         ?};
         _loop:=ZA_NOTAO.next()
      !};
      ZA_NOTAO.cntx_pop()
   || ZA_NOTAO.TRUE:='T';
      ZA_NOTAO.put()
   ?}
|| ZA_NOTAO.TRUE:='N';
   ZA_NOTAO.put()
?}


\za_notaw_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Rekord - po" w oknie WER tabeli ZA_NOTAW.
::   WY: akronim pola do redakcji
::----------------------------------------------------------------------------------------------------------------------
exec('za_notaw_chk','phr_za_tab',-menu_txt()='popraw')


\za_form_wer_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Weryfikujący - po" dla okna wertowania tabeli TEST ZA_FORM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=ZA_FORM.sel_aget();
_grp:=_tab.size()>0;
{? _grp
|| ZA_FORM.WER:=__osoba;
   ZA_FORM.put()
|| __Action:="sel_exit";
   {? var_pres('__osoba')>100 || obj_del(__osoba) ?};
   ZZ_OSOBA.win_sel('WYB');
   {? ZZ_OSOBA.select()
   || __osoba:=ZZ_OSOBA.ref()
   || __osoba:=null()
   ?};
   ZA_FORM.WER:=__osoba;
   ZA_FORM.put()
?}


\za_form_wer_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Weryfikujący - grupa przed" dla okna wertowania TEST tabeli ZA_FORM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
__Action:="sel_exit";
{? var_pres('__osoba')>100 || obj_del(__osoba) ?};
ZZ_OSOBA.win_sel('WYB');
{? ZZ_OSOBA.select()
|| __osoba:=ZZ_OSOBA.ref()
?};
__osoba


\za_form_wer_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Weryfikujący - grupa po" dla okna wertowania TEST tabeli ZA_FORM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__osoba')>100 || obj_del(__osoba) ?}


\za_form_ocena_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Oceniony - po" dla okna wertowania TEST tabeli ZA_FORM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_stan:=ZA_FORM.OCENA;
{? _stan='T'
|| ZA_FORM.OCENA:='N';
   ZA_FORM.Z:='N'
|| ZA_FORM.OCENA:='T';
   {? ZA_FORM.WYNIK>=ZA_FORM.ZA_ZEST().PROG
   || ZA_FORM.Z:='T'
   ?}
?};
_licz:=0;
_tryb:=0;
{? ZA_ZEST.ZZ_LINK().KLASA='SZK_OPIS'
|| SZK_OPIS.cntx_psh();
   SZK_OPIS.index('ZZ_DOK');
   SZK_OPIS.prefix(ref_name(ZA_ZEST.ZZ_LINK),ZA_ZEST.ZZ_LINK);
   {? SZK_OPIS.first()
   || _tryb:=SZK_OPIS.TRYB='N'
   ?};
   SZK_OPIS.cntx_pop()
?};
ZA_NOTA.cntx_psh();
ZA_NOTA.index('ZA_NOTA');
ZA_NOTA.prefix(ZA_FORM.ref(),0);
_loop:=ZA_NOTA.first();
{!
|? _loop
|! _licz+=ZA_NOTA.PKT;
   _loop:=ZA_NOTA.next()
!};
ZA_NOTA.cntx_pop();
_pkt:=sql('select SUM(ZA_TEST.PKT) as PKT from ZA_TEST join ZA_ZEST where ZA_ZEST.REFERENCE=\':_a\'',$ZA_FORM.ZA_ZEST);
_jest:=sql('select SLO_KOD.KOD as KOD from ZA_TEST join ZA_ZEST join SLO_KOD using(ZA_TEST.RODZ,SLO_KOD.REFERENCE) where ZA_ZEST.REFERENCE=\':_a\' and KOD=\'O\'',$ZA_FORM.ZA_ZEST);
{? _pkt.PKT>0
|| {? _tryb
   || ZA_FORM.WYNIK:=_licz
   || ZA_FORM.WYNIK:=(_licz/_pkt.PKT)*100
   ?}
|| ZA_FORM.WYNIK:=0
?};
{? ZA_FORM.WYNIK>=ZA_FORM.ZA_ZEST().PROG & _jest.size()
|| {? ZA_FORM.OCENA='T'
   || ZA_FORM.OCENA:='T';
      ZA_FORM.Z:='T'
   || ZA_FORM.OCENA:='N';
      ZA_FORM.Z:='N'
   ?}
?};
{? ~_jest.size()
|| ZA_FORM.OCENA:='T'
?};
{? ZA_FORM.put()
|| {? ZA_FORM.ZA_ZEST().ZZ_LINK().KLASA='SZK_OPIS'
   || exec('ank_akc','phr_dane',ZA_FORM.ref())
   ?}
?}


\za_nota_ocen_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Oceń - przed" w oknie TEST tabeli ZA_NOTA.
::----------------------------------------------------------------------------------------------------------------------
ZA_NOTA.win_edit('OCENA');
_ref:=ZA_NOTA.ref();
{? ZA_NOTA.get()
|| ZA_NOTA.ZZ_DOK();
   ZZ_DOK.memo_get(,'NOTA',0)
?};
{? ZA_NOTA.edit("
      {? ZA_NOTA.PKT<0
      || FUN.emsg('Wprowadzona wartość punktów za pytanie otwarte nie może być ujemna.');
         return('PKT')
      |? ZA_NOTA.PKT>ZA_NOTA.ZA_TEST().PKT
      || FUN.emsg('Wprowadzona wartość punktów za pytanie otwarte nie może przekraczać wartości punktów zdefiniowanych dla pytania');
         return('PKT')
      || 1
      ?}
   ")
|| {? ZA_NOTA.put()
   || ZZ_DOK.cntx_psh();
      ZZ_DOK.prefix();
      ZA_NOTA.ZZ_DOK();
      _text:=ZZ_DOK.memo_txt(,0,'NOTA');
      {? +_text
      || ZZ_DOK.memo_set(_text,'NOTA');
         ZZ_DOK.memo_put(,'NOTA')
      ?};
      ZZ_DOK.cntx_pop()
   ?}
?}


\za_nota_ocen_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Oceń - po" w oknie TEST tabeli ZA_NOTA.
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_cfg:=_par.cfg;
_licz:=0;
ZA_NOTA.cntx_psh();
ZA_NOTA.index('ZA_NOTA');
ZA_NOTA.prefix(ZA_FORM.ref(),0);
_loop:=ZA_NOTA.first();
{!
|? _loop
|! _licz+=ZA_NOTA.PKT;
   _loop:=ZA_NOTA.next()
!};
_pkt:=sql('select SUM(ZA_TEST.PKT) as PKT from ZA_TEST join ZA_ZEST where ZA_ZEST.REFERENCE=\':_a\'',$ZA_FORM.ZA_ZEST);
{? ZA_FORM.ZA_ZEST().ZZ_LINK().KLASA='SZK_OPIS' & SZK_OPIS.TRYB='N'
|| ZA_FORM.WYNIK:=_licz
|| ZA_FORM.WYNIK:=(_licz/_pkt.PKT)*100
?};
{? ZA_FORM.put()
|| grp_disp(ZA_FORM,'TEST')
?};
ZA_NOTA.cntx_pop()


\za_zest_nag_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Obsługa akcji "Nagłówek - po" w oknie WER tabeli ZA_ZEST.
::----------------------------------------------------------------------------------------------------------------------
{? ZA_ZEST.memo_get(,'NAG')
|| exec('edit_memo_fld','#edit',ZA_ZEST,'NAG',1,'Nagłówek ankiety',,,,50,10)
?}


\za_test_rodz_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła 'Wartość początkowa' dla pola ZA_TEST.RODZ.
::----------------------------------------------------------------------------------------------------------------------
{? ZA_TEST.ZA_ZEST().TYP().KOD='O' & ZA_TEST.ZZ_MET().KOD<>'OO' || exec('kod','ext_slo','ZA_TEST','J') ?}


\za_nota_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła na "Wyświetl - przed" dla tabeli ZA_NOTA
::----------------------------------------------------------------------------------------------------------------------
_ank:=ZA_NOTA.ZA_TEST().ZA_ZEST().TYP().KOD;
_met:=ZA_NOTA.ZA_TEST().ZZ_MET().KOD;
_rodz:=ZA_NOTA.ZA_TEST().RODZ().KOD;
{? ZA_NOTA.ZA_NOTA
|| {? _ank<>'T'
   || ZA_NOTA.win_edit('WID_O')
   || ZA_NOTA.win_edit('WID_OT')
   ?}
|| {? _ank='T' & _rodz='O'
   || ZA_NOTA.win_edit('WID_OPT')
   |? _ank<>'T' & (_met='OO' | _rodz='O')
   || ZA_NOTA.win_edit('WID_OPIS')
   || {? _ank<>'T'
      || ZA_NOTA.win_edit('WID_P')
      || ZA_NOTA.win_edit('WID_PT')
      ?}
   ?}
?};
ZA_NOTA.display()


\za_notao_za_zest_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła na "Wartość początkową" dla pola ZA_ZEST tabeli ZA_NOTA.
::----------------------------------------------------------------------------------------------------------------------
ZA_ZEST.ref()


\za_notaw_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła na "Rekord - przed" okna TEST i SONDA tabeli ZA_NOTAW.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::----------------------------------------------------------------------------------------------------------------------
{? ZA_NOTAW.TREE
|| _ile:=0;
   _ile_all:=0;
   _ile:=exec('nota_count','phr_dane',$ZA_NOTAW.ZA_NOTAO);
   _ile_all:=exec('notaproc_count','phr_dane',ZA_NOTAW.ZA_ZEST,$ZA_NOTAW.ZA_TEST);
   ZZ_POM.LO:=_ile;
   {? _ile>0 & _ile_all>0
   || ZZ_POM.PO:=_ile/_ile_all*100; ~~
   || ZZ_POM.PO:=0; ~~
   ?}
|| ZZ_POM.LO:=0;
   ZZ_POM.PO:=0; ~~
?}


\szk_opis_egzamin_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Po redagowaniu pola EGZAMIN w tabeli SZK_OPIS.
::----------------------------------------------------------------------------------------------------------------------
exec('szk_opis_efld_opt','phr_widok')


\szk_opis_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli SZK_OPIS.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::----------------------------------------------------------------------------------------------------------------------
_enable:='enable=%1'[$(SZK_OPIS.EGZAMIN='T')];
SZK_OPIS.efld_opt('ORG_RED',_enable,SZK_OPIS,'PROMOCJA');
SZK_OPIS.efld_opt('ORG_RED',_enable,SZK_OPIS,'TRYB')


\za_test_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła na akcję 'Dołącz - po' - sprawdzenie wypełnienia rodzaju lub metody oceny.
::----------------------------------------------------------------------------------------------------------------------
{? ZA_TEST.RODZ=null() & ZA_TEST.ZA_ZEST().TYP().KOD<>'O'
|| FUN.emsg('Brak określonego rodzaju pytania. Uzupełnij brakujące informacje.'@);
   return('RODZ')
|? ZA_TEST.ZZ_MET=null() & ZA_TEST.ZA_ZEST().TYP().KOD='O'
|| FUN.emsg('Brak określonej metody oceny pytania. Uzupełnij brakujące informacje.'@);
   return('ZZ_MET')
?}


\za_zest_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła na "Rekord - przed" okna SZAB tabeli ZA_ZEST.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::----------------------------------------------------------------------------------------------------------------------
ZZ_POM.WIDOK_P:=
   {? ZA_ZEST.TYP().KOD='T'
   || {? ZA_ZEST.TRYB='N'
      || '%'
      |? ZA_ZEST.TRYB='T'
      || 'pkt'
      || ''
      ?}
   || 'nd'
   ?}


\zz_pom_opis_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Przed wyświetleniem pola ZZ_POM.OPIS (opis klasy kryterium). Zakłada się, że pole jest elementem okna
::       wertowania tabeli ZZ_KRYT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZZ_POM.OPIS:=
   {? ZZ_KRYT.KLASA='ZZ_KRYTJ' || 'Jednostka organizacyjna'@
   |? ZZ_KRYT.KLASA='ZZ_KRYTS' || 'Stanowisko'@
   |? ZZ_KRYT.KLASA='ZZ_KRYTP' || 'Pracownik'@
   |? ZZ_KRYT.KLASA='ZZ_KRYTF' || 'Formuła'@
   || ''
   ?};
1


\zz_hist_choose
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Wybór metodyki z jednoczesnym ustawieniem ZZ_POM.ZZ_HIST.
::   WE:
::   WY: wskazanie wiersza ZZ_HIST lub null
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
ZZ_HIST.cntx_psh();
ZZ_HIST.index('DATA');
ZZ_HIST.prefix(exec('ref_firma','ustawienia'));
ZZ_HIST.win_sel('WYB');
ZZ_HIST.win_edit('RED');

ZZ_POM.ZZ_HIST();
{? ZZ_HIST.select()
|| _ref:=ZZ_POM.ZZ_HIST;
   {? cur_win()<>cur_win(1,1)
   || params_set(params_get());
      grp_disp(cur_tab(1,1),cur_win(1,1),1,1)
   ?}
?};

ZZ_HIST.cntx_pop();
ZZ_POM.ZZ_HIST();
_ref


\zz_hist_wybierz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Formuła "przed" akcją "Wybierz" okienka WYB tabeli ZZ_HIST
::   WE:
::   WY: wskazanie wybranej metodyki
::----------------------------------------------------------------------------------------------------------------------
ZZ_POM.ZZ_HIST:=ZZ_HIST.ref()


\za_typ_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [21.37]
:: OPIS: formuła "Rekord - przed" dla tabeli ZA_TYP. Sprawdzenie czy zapis systemowy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZA_TYP.SYSTEM='T'
|| ZA_TYP.actions_grayed('WER','PU:')
|| ZA_TYP.actions_grayed('WER',':')
?};
~~


\zz_kryt_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Wybór rekordu z okienka wertowania ze strukturą.
::   WE:
::   WY: referencja wiersza tabeli ZZ_KRYT bądź null
::----------------------------------------------------------------------------------------------------------------------
ZZ_KRYT.cntx_psh();
_ref:=null();
ZZ_KRYT.win_sel('WYB');
ZZ_KRYT.actions(ZZ_KRYT.win_sel('?'),'E');
{? ZZ_KRYT.select()
|| _ref:=ZZ_KRYT.ref()
?};
ZZ_KRYT.cntx_pop();
_ref


\zz_kryt_przesun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Obsługa przesunięcia do wybranego zapisu.
::   WE: _a [RULE] - formuła ustalająca element nadrzędny
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
_val:=exec('bind_node','#tree',_a);
{? type_of(_val)=type_of(0) & _val=0
|| exec('bind_node_error','#tree')
?};
0


\zz_kryt_przesun_0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Akcja "Przesuń > Na poziom główny".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
exec('zz_kryt_przesun','phr_widok',"null")


\zz_kryt_przesun_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Przed "Przesuń > Do wybranego zapisu".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
exec('zz_kryt_przesun','phr_widok',"
   _ref:=exec('zz_kryt_wybierz','phr_widok');
   {? _ref=null
   || return('cancel')
   ?};
   _ref
")


\za_test_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Wybór rekordu z okienka wertowania ze strukturą.
::   WE:
::   WY: referencja wiersza tabeli ZA_TEST bądź null
::----------------------------------------------------------------------------------------------------------------------
ZA_TEST.cntx_psh();
_ref:=null();
ZA_TEST.win_sel('WYB');
ZA_TEST.actions(ZA_TEST.win_sel('?'),'E');
{? ZA_TEST.select()
|| _ref:=ZA_TEST.ref()
?};
ZA_TEST.cntx_pop();
_ref


\za_test_przesun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Obsługa przesunięcia do wybranego zapisu.
::   WE: _a [RULE] - formuła ustalająca element nadrzędny
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
_val:=exec('bind_node','#tree',_a);
{? type_of(_val)=type_of(0) & _val=0
|| exec('bind_node_error','#tree')
?};
0


\za_test_przesun_0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Akcja "Przesuń > Na poziom główny".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
exec('za_test_przesun','phr_widok',"null")


\za_test_przesun_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Przed "Przesuń > Do wybranego zapisu".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
exec('za_test_przesun','phr_widok',"
   _ref:=exec('za_test_wybierz','phr_widok');
   {? _ref=null
   || return('cancel')
   ?};
   _ref
")


\zz_komp_przesun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Obsługa przesunięcia do wybranego zapisu.
::   WE: _a [RULE] - formuła ustalająca element nadrzędny
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
_val:=exec('bind_node','#tree',_a);
{? type_of(_val)=type_of(0) & _val=0
|| exec('bind_node_error','#tree')
?};
0


\zz_komp_przesun_0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Akcja "Przesuń > Na poziom główny".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
exec('zz_komp_przesun','phr_widok',"null")


\zz_komp_przesun_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [22.26]
:: OPIS: Przed "Przesuń > Do wybranego zapisu".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
exec('zz_komp_przesun','phr_widok',"
   ZZ_KOMP.cntx_psh();
   _ref:=null();
   ZZ_KOMP.win_sel('WYB');
   {? ZZ_KOMP.select()
   || _ref:=ZZ_KOMP.ref()
   ?};
   ZZ_KOMP.cntx_pop();
   {? _ref=null
   || return('cancel')
   ?};
   _ref
")


\zz_komp_xxx_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Akcja "okienko przed" wszystkich okienek tabeli ZZ_KOMP.
::   WE: [_a] [NUMBER] - Okno hierarchiczne [0*/1]?
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('setup_icon','phr_widok','NAZWA',,var_pres('_a')=type_of(0) & _a);
exec('zz_pom_psh','phr_widok','ZWS_PAR_PLKO');
exec('metodyka_ukryj','phr_widok');

ZZ_KOMP.win_edit('RED');

1


\zz_komp_xxx_oa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Akcja "okienko po" wszystkich okienek tabeli ZZ_KOMP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab()<>ZZ_HIST
|| exec('metodyka_ukryj','phr_widok')
?};
exec('zz_pom_pop','phr_widok')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:35 21ac2830093f6214840af26250e1585b9f9bbca0d31a36a8777576615917976b4415b0c3c9d11848744ffaac799b09d8d1860699f15a17c3850a1e6628700c236f141cc28d06ccd0ea06bca8eac331f29016ea0c02372a083cd22d420426a0b1d4161f49c77ae780b2ec2f6ee21ce78458184827d81c7afe4b597bdb223760d7
