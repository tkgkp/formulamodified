:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_pwp.fml [12.51]
:: Utworzony: 2019/02/20
:: Autor: jaws
:: Systemy: PPK
::======================================================================================================================
:: Zawartość: Formuły odpowiedzialne za obsługę kartoteki procentów wysokości wpłat.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed dołączeniem lub poprawieniem wiersza tabeli PPK_PWP.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
{? PPK_PWP.ZC<>null
|| PPK_PWP.OSOBA:=PPK_PWP.P:=null;
   PPK_PWP.REF:=$PPK_PWP.ZC

|? PPK_PWP.P<>null
|| PPK_PWP.OSOBA:=PPK_PWP.ZC:=null;
   PPK_PWP.REF:=$PPK_PWP.P

|? PPK_PWP.OSOBA<>null
|| PPK_PWP.P:=PPK_PWP.ZC:=null;
   PPK_PWP.REF:=$PPK_PWP.OSOBA

|| return(0)
?};

{? PPK_PWP.BLOKADA='T'
|| PPK_PWP.ZMIANA:='T';
   PPK_PWP.STAWKA:=0
?};
{? PPK_PWP.ZMIANA<>'T'
|| PPK_PWP.STAWKA:=0
?};
1


\_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(PPK_PWP,
   $("_a.table(_b,"+$_mode+",,'OD','R')")
)


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli PPK_PWP.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_pwp') & exec('_chk','ppk_pwp',0)


\_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz po dołączeniu wiersza tabeli PPK_PWP.
::   WE: _a - zgodne ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

:: czy tworzyć wartości domyślne?
exec('czytaj','#stalesys',,KST_PPK,'PWP_DOM');
{? KST_PPK.PWP_DOM<>'T'
|| {? PPK_PWP.f_active()
   || PPK_PWP.f_rfresh()
   ?};
   return()
?};

_ok:=0;
{? PPK_PWP.ZC<>null
|| PPK_PWP.cntx_psh();
   PPK_PWP.index('RNOD');
   PPK_PWP.prefix(PPK_PWP.FIRMA,$PPK_PWP.ZC().P);
   {? ~PPK_PWP.find_key(PPK_PWP.R().RN)
::    uzupełnij informacje dla współpracownika
   || PPK_PWP.P:=PPK_PWP.ZC().P;
      PPK_PWP.ZC:=null;
      _ok:=PPK_PWP.add()
   || _ok:=1
   ?};
   PPK_PWP.cntx_pop()

|? PPK_PWP.P<>null
|| PPK_PWP.cntx_psh();
   PPK_PWP.index('RNOD');
   PPK_PWP.prefix(PPK_PWP.FIRMA,$PPK_PWP.P().OSOBA);
   {? ~PPK_PWP.find_key(PPK_PWP.R().RN)
::    uzupełnij informacje dla osoby
   || PPK_PWP.OSOBA:=PPK_PWP.P().OSOBA;
      PPK_PWP.P:=null;
      _ok:=PPK_PWP.add()
   || _ok:=1
   ?};
   PPK_PWP.cntx_pop()
?};
exec('ppk_ucz_put','ppk_pwp',PPK_PWP.REF,PPK_PWP.OD);

{? _ok
|| {? PPK_PWP.f_active()
   || PPK_PWP.f_rfresh()
   ?}
?};

~~


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli PPK_PWP.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_pwp') & exec('_chk','ppk_pwp',1)


\_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli PPK_PWP.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('ppk_ucz_put','ppk_pwp',PPK_PWP.REF,PPK_PWP.OD);
~~


\_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli PPK_PWP.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('ppk_ucz_put','ppk_pwp',bfld('REF'),bfld('OD'));
~~


\_setup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Ustawia formuły dla pól wiersza tabeli PPK_PWP.
::   WE: _a TABLE - alias tabeli: OSOBA, P, ZC
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG)
|| return()
?};

_bl_osoba:=_bl_p:=_bl_zc:=_bl_ref:="";

{? _a=OSOBA
|| _bl_osoba:="REF.OSOBA";
   _bl_ref:="$REF.OSOBA"

|? _a=P
|| _bl_p:="REF.P";
   _bl_ref:="$REF.P"

|? _a=ZC
|| _bl_zc:="ZC.ref()";
   _bl_ref:="$ZC.ref()"
?};

PPK_PWP.fld_fml('OSOBA','BLANK',_bl_osoba);
PPK_PWP.fld_fml('P','BLANK',_bl_p);
PPK_PWP.fld_fml('ZC','BLANK',_bl_zc);
PPK_PWP.fld_fml('REF','BLANK',_bl_ref);
~~


\filtruj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Ogranicza dziedzinę tabeli PPK_PWP.
::   WE: _a _P - wskazanie pracownika
::       _b _OSOBA - wskazanie osoby
::       _c DATE - data początku okresu
::       _d DATE - data końca okresu
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_prac:=_a;
_osoba:=_b;
_zd:=date(0,0,0);
_od:={? var_pres('_c')=type_of(date) || _c || _zd ?};
_do:={? var_pres('_d')=type_of(date) || _d || _zd ?};

exec('czytaj','#stalesys',,KST_PPK,'PWP_WSZ');
exec('_setup','ppk_pwp',{? _prac<>null || P || OSOBA ?});

:: obsługa zmiany zakładki
{? PPK_PWP.sel_size()>0
|| PPK_PWP.sel_adel()
?};

PPK_PWP.clear();
PPK_PWP.f_set(
   'OD^,R(RN)',,
   {? _prac<>null
   || {? KST_PPK.PWP_WSZ='T'
      || '(REF=:_a or REF=:_b)'
      || 'REF=:_a'
      ?}
   || 'REF=:_b'
   ?}+
   {? _od<>_zd || ' and to_date(:_c)<=OD' || '' ?}+
   {? _do<>_zd || ' and OD<=to_date(:_d)' || '' ?},
   _prac,_osoba,_od,_do
)


\od_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po redakcji pola OD w wierszu tabeli PPK_PWP.
::   WE:
::   WY: 0 - pola nie można opuścić, 1 - można przejść do innego pola
::----------------------------------------------------------------------------------------------------------------------
PPK_PWP.OD<>date(0,0,0)


\r_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po redakcji pola R w wierszu tabeli PPK_PWP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? PPK_PWP.R<>null
|| _od:=PPK_PWP.OD;
   _rn:=','+$PPK_PWP.R().RN+',';
   {? (','+__RUB.sys_sql(7901,_od)+',')*_rn<>0 || PPK_PWP.ZMIANA:='T'
   |? (','+__RUB.sys_sql(790,_od)+',')*_rn=0 || PPK_PWP.ZMIANA:='N'
   ?}
?};
win_disp();
1


\bl_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po redakcji pola ZMIANA w wierszu tabeli PPK_PWP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('r_ae','ppk_pwp')


\zm_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed wyświetleniem pola ZMIANA w wierszu tabeli PPK_PWP.
::   WE:
::   WY: 0/1 - zawartość pola widoczna/ukryta
::----------------------------------------------------------------------------------------------------------------------
PPK_PWP.BLOKADA<>'T'


\zm_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed redakcją pola ZMIANA w wierszu tabeli PPK_PWP.
::   WE:
::   WY: 0/1 - pole dostępne/zablokowane
::----------------------------------------------------------------------------------------------------------------------
{? PPK_PWP.BLOKADA='T'
|| return(0)
?};

{? PPK_PWP.R<>null
|| _od:=PPK_PWP.OD;
   _rn:=','+$PPK_PWP.R().RN+',';
   {? (','+__RUB.sys_sql(7901,_od)+',')*_rn=0
   || (','+__RUB.sys_sql(790,_od)+',')*_rn<>0
   ?}
?}


\zm_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po redakcji pola ZMIANA w wierszu tabeli PPK_PWP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
win_disp()


\st_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed wyświetleniem pola STAWKA w wierszu tabeli PPK_PWP.
::   WE:
::   WY: 0/1 - zawartość pola widoczna/ukryta
::----------------------------------------------------------------------------------------------------------------------
PPK_PWP.BLOKADA<>'T' & PPK_PWP.ZMIANA='T'


\st_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed redakcją pola STAWKA w wierszu tabeli PPK_PWP.
::   WE:
::   WY: 0/1 - pole dostępne/zablokowane
::----------------------------------------------------------------------------------------------------------------------
PPK_PWP.BLOKADA<>'T' & PPK_PWP.ZMIANA='T'


\wnd_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: "Okienko przed" wszystkich okienek tabeli PPK_PWP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,KST_PPK,'PWP_UKW');

{? KST_PPK.PWP_UKW='T'
|| PPK_PWP.fld_fml('ZMIANA','BEFORE_DISPLAY',"*");
   POLA_GRP.fld_fml('REAL_1','BEFORE_DISPLAY',"exec('st_bd','ppk_pwp')")
|| PPK_PWP.fld_fml('ZMIANA','BEFORE_DISPLAY',"1")
?};

R.cntx_psh();
R.win_dict('SLO');
1


\wnd_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: "Okienko po" wszystkich okienek tabeli PPK_PWP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
PPK_PWP.fld_fml('ZMIANA','BEFORE_DISPLAY',"*");
POLA_GRP.fld_fml('REAL_1','BEFORE_DISPLAY',"*");

R.f_clear();
R.cntx_pop();
1


\wys_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Obsługa "Wyświetl".
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_PWP.cntx_psh();
PPK_WNU.cntx_psh();
PPK_WPW.cntx_psh();
PPK_PNW.cntx_psh();
PPK_PNW.index('PPK_PWP');
PPK_PNW.prefix(PPK_PWP.ref());
{? PPK_PNW.first()
|| PPK_PNW.PPK_WPW().PPK_WNU();
   PPK_PWP.win_edit('WYS_WNU')
?};

PPK_PWP.display();

PPK_PNW.cntx_pop();
PPK_WPW.cntx_pop();
PPK_WNU.cntx_pop();
PPK_PWP.cntx_pop();
~~


\rek_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła akcji "rekord przed" okienek tabeli PPK_PWP.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('is_mod','ppk_pwp');
exec('rekprzed','color','PPK_PWP#01#')


\rek_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Kontrola poprawności wiersza tabeli PPK_PWP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_chk:=exec('_chk','ppk_pwp',-menu_txt()='popraw');
{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & _chk=0)
|| return(_chk)
?};

_d0:=date(0,0,0);

_od:=PPK_PWP.OD;
exec('czytaj','#stalesys',_od,KST_PPK);

PPK_UMO.cntx_psh();
_umoOd:=KST_PPK.PPK_UMO().OD;
_umoDo:=PPK_UMO.DO;
PPK_UMO.cntx_pop();
{? _od<_umoOd | (_umoDo<>_d0 & _od>_umoDo)
|| FUN.info(
      'Data zmiany procentowej wysokości wpłat musi\nzawierać się w okresie obowiązywania umowy o prowadzenie.'@
   );
   return('OD')
?};

{? _od<PPK_UCZ.OD | (PPK_UCZ.DO<>_d0 & _od>PPK_UCZ.DO)
|| FUN.info(
      'Data zmiany procentowej wysokości wpłat musi\nzawierać się w okresie uczestnictwa osoby w planie kapitałowym.'@
   );
   return('OD')
?};

{? PPK_PWP.P<>null() &
   (PPK_PWP.P().DZA>_od | (P.DZ<>_d0 & P.DZ<_od)) &
   ~FUN.ask(
       'Data zmiany procentowej wysokości wpłat\npowinna zawierać się w okresie zatrudnienia.\nCzy kontynuować?'@)
|| return('OD')
?};

{? PPK_PWP.ZC<>null() &
   (PPK_PWP.ZC().DU>_od | (ZC.DW<>_d0 & ZC.DW<_od)) &
   ~FUN.ask(
       'Data zmiany procentowej wysokości wpłat\npowinna zawierać się w okresie trwania umowy.\nCzy kontynuować?'@)
|| return('OD')
?};

{? PPK_PWP.BLOKADA='T' | PPK_PWP.ZMIANA='N'
:: blokada wpłat lub kwota ze stałych
|| return(1)
?};

_min:=_max:=0;
_rn:=PPK_PWP.R().RN;

{? _rn=__RUB.sys_kod(710,_od,1)
:: % skł.pod. PPK firma
|| _max:=KST_PPK.SK_PF

|? _rn=__RUB.sys_kod(711,_od,1)
:: % skł.dod. PPK firma
|| _max:=KST_PPK.SK_MAXDF

|? _rn=__RUB.sys_kod(712,_od,1)
:: % skł.pod. PPK zatr.
|| _min:=KST_PPK.SK_MINPU;
   _max:=KST_PPK.SK_MAXPU

|? _rn=__RUB.sys_kod(713,_od,1)
:: % skł.dod. PPK zatr.
|| _max:=KST_PPK.SK_MAXDU

|| return(0)
?};

{? _min>0 | _max>0
|| {? PPK_PWP.STAWKA<_min | _max<PPK_PWP.STAWKA
   || FUN.emsg(
         'Wartość "%1" musi być z zakresu od %2 do %3.'@
         [MS.name(PPK_PWP,'STAWKA'),form(_min,,2),form(_max,,2)]
      );
      return('STAWKA')
   ?}
?};

:: kontrola długości pola PPK_PWP.OWD (do 255 znaków):
_owd:=PPK_PWP.memo_txt(,,'OWD');
{? +_owd>255
|| _err:='Przekroczono maksymalną długość pola Zasady ustalania wpłaty dodatkowej (255 znaków).'+
         '\nCzy skrócić wpis do wymaganej długości?'@;

   {? FUN.ask(_err)
   || PPK_PWP.memo_set(255+_owd,'OWD')
   ?};
   win_disp();
   return('OWD')
?};

1


\is_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed poprawieniem lub usunięciem wiersza tabeli PPK_PWP.
::   WE:
::   WY: 0/1 - akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
{? KST_PPK.PWP_UKW<>'T'
|| POLA_GRP.REAL_1:=
      {? PPK_PWP.BLOKADA='T'
::       wpłaty zablokowane
      || 0

      |? PPK_PWP.ZMIANA='T'
::       stawka indywidualna
      || PPK_PWP.STAWKA

      || exec('x_st','ppk',PPK_PWP.R().RN,PPK_PWP.OD)
      ?}
?};

{? (_fml:=PPK_PWP.fld_fml('OSOBA','*BLANK'))<>"" |
   (_fml:=PPK_PWP.fld_fml('P','*BLANK'))<>"" |
   (_fml:=PPK_PWP.fld_fml('ZC','*BLANK'))<>""
|| $(_fml())=PPK_PWP.REF
?}


\pop_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed poprawieniem wiersza tabeli PPK_PWP.
::   WE:
::   WY: 0/1 - akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
PPK_PWP.SR:='Z';
exec('is_mod','ppk_pwp')


\usu_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed usunięciem wiersza tabeli PPK_PWP.
::   WE:
::   WY: 0/1 - akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
exec('is_mod','ppk_pwp')


\wpl_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła przed akcją "Wpłaty domyślne" okienek tabeli PPK_PWP.
::   WE: _a TABLE - alias tabeli (domyślnie OSOBA)
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
{? var_pres('_a')=type_of(SYSLOG)
|| {? _a=OSOBA
   || _TAB:=OSOBA;
      _ref:=REF.OSOBA
   |? _a=ZC
   || _TAB:=ZC;
      _ref:=ZC.ref()
   |? _a=P
   || _TAB:=P;
      _ref:=REF.P
   || return()
   ?}
|| _TAB:=OSOBA;
   _ref:=REF.OSOBA
?};

_fbl_o:=PPK_PWP.fld_fml('OSOBA','*BLANK');
_fbl_p:=PPK_PWP.fld_fml('P','*BLANK');
_fbl_z:=PPK_PWP.fld_fml('ZC','*BLANK');

exec('_setup','ppk_pwp',_TAB);

_grp:=PPK_PWP.grp_make('Procentowe wysokości wpłat',,'#ppk_pwp_grp');
PPK_PWP.grp_sel(_grp,,'WERX',,
:: po odświeżeniu
   "  _aid:='';
      PPK_PNW.cntx_psh();
      PPK_PNW.index('PPK_PWP');
      PPK_PNW.prefix(PPK_PWP.ref());
      {? PPK_PNW.size()<>0
      || _aid:='pu'
      ?};
      PPK_PNW.cntx_pop();
      PPK_PWP.actions('WERX',_aid,,1)
   ",,,,,,,,
:: tryb
   'maximized'
);

PPK_PWP.f_clear();
PPK_PWP.cntx_psh();
PPK_PWP.index('ODRN');
PPK_PWP.prefix(exec('ref_firma','#firma'),$_ref);
PPK_PWP.win_sel(_grp);
PPK_PWP.select();
PPK_PWP.cntx_pop();
PPK_PWP.win_del(_grp);

{? _fbl_z<>"" || exec('_setup','ppk_pwp',ZC)
|? _fbl_p<>"" || exec('_setup','ppk_pwp',P)
|? _fbl_o<>"" || exec('_setup','ppk_pwp',OSOBA)
?};

1


\wpl_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła po akcji "Wpłaty domyślne" okienek tabeli PPK_PWP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? PPK_PWP.f_active()
|| PPK_PWP.f_rfresh()
?};
~~


\leg_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła akcji "Legenda" okienek tabeli PPK_PWP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PPK_PWP#01');
~~


\st_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Funkcja do ustalenia różnicowanej stawki dodatkowej finansowanej przez zatrudniającego (Art.26 pkt3).
::       Wysokość stawki jest ustalana dla:
::       - pracownika zatrudnionego w podanym dniu,
::       - z liczby lat liczonej od daty zatrudnienia do daty ustalenia wysokości tej stawki
::       - stanowi procent z zaokrągleniem do jednego miejsca po przecinku
::       - nie są uwzględniane okresy przerwy w pracy z tytułu urlopu bezpłatnego, wychowawczego i służby wojskowej
::   WE: _a [DATE] - Data ustalenia wysokości stawki.
::       _b [REFERENCE] - Współpracownik.
::   WY: Procent stawki dodatkowej finansowanej przez zatrudniającego.
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_dt:=_a;
_prac:=_b;

P.cntx_psh();
P.prefix();
{? P.seek(_prac,) & P.F_ZATR().KOD='P' & P.DZA<=_dt & (P.DZ>=_dt | P.DZ=date(0,0,0))
|| __KAL.rdat(P.DZA,_dt);
   _wyn:=__KAL.year/10$1
?};
P.cntx_pop();

:: Wysokość wpłaty nie może przekroczyć maksymalnej, wprowadzonej w stałych systemu.
{? _wyn<0
|| 0
|? _wyn>KST_PPK.SK_MAXDF
|| KST_PPK.SK_MAXDF
|| _wyn
?}


\akt_wpl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Aktualizacja wpłaty podstawowej pracownika po przekroczeniu kwoty wynagrodzenia uprawniającej do jej obniżenia.
::   WE: _a [INTEGER] - określenie wyliczeń dla: 0 - pracownika, 1 - zleceniobiorcy.
::       _b [REAL] - wstępnie ustalony procent wpłat
::       _c [REAL] - podstawa wyliczona na liście/rachunku
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_f_zatr:=_a;
_proc_p:=_b;
_pod_wp:=_c;
_dp:={? _f_zatr || RH.DWY || date(O.R,O.M,0) ?};
_dt:={? _f_zatr || RH.DWY || date(O.RU,O.MU,0) ?};

PPK_UMO.cntx_psh();
{? exec('init','ppk_umo',_dt)<>null()
|| _wn:='DWWP';
   _osoba:={? _f_zatr || RH.ZLE().OSOBA || P.OSOBA ?};

   PPK_WNU.cntx_psh();
   PPK_WNU.index('UMO_WRD');
   PPK_WNU.prefix(PPK_UMO.ref(),_osoba,_wn);
   {? PPK_WNU.find_le(_dt)
   || _rub:=__RUB.sys_kod(712);
      {? _f_zatr
      || _rh:=RH.ref();
         _lt:=null()
      || _rh:=null();
         _lt:=O.ref()
      ?};
      _st:=0;
      _sum_pod:=exec('pods_ppk','ppk_pwp',_osoba,_rh,_lt,_dt,_pod_wp);
      _wsp:=(KST.NK*KST_PPK.WMW)$2;

      {? _sum_pod>=_wsp
      || exec('zm_wplat','ppk_pwp',_osoba,_rub,_dt,_wn,KST_PPK.SK_MAXPU,'O','+');
         _st:=KST_PPK.SK_MAXPU

      |? _sum_pod<_wsp
      || exec('zm_wplat','ppk_pwp',_osoba,_rub,_dt,_wn,_proc_p,'O','-');
         _st:=_proc_p

      ?};
      {? _proc_p & _st
      || _proc_p:=_st
      ?}
   ?};
   PPK_WNU.cntx_pop()
?};
PPK_UMO.cntx_pop();
_proc_p


\zm_wplat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Aktualizacja wpłaty podstawowej pracownika po przekroczeniu kwoty wynagrodzenia uprawniającej do jej obniżenia.
::       Bufor tabeli PPK_WNU musi być ustalony.
::  AKT: IS [20.14]
:: OPIS: Utworzenie/usunięcie wpisu w PPK_PWP o danym sposobie rejestrowania.
::       Wpis o danym sposobie rejestrowania jest tworzony z datą 1 dnia miesiąca daty sprawdzania
::       lub pierwszą kolejną wolną.
::       Jeśli pomiędzy datą sprawdzania a początkiem miesiąca jest już wpis o wnioskowanym sposobie rejestracji,
::       a poprzedni wpis o danym kodzie rubryki jest o równym wnioskowanemu procencie wpłaty (przywrócenie
::       procentowej wysokości wpłaty) następuje usunięcie znalezionego wpisu o wnioskowanym sposobie rejestracji.
::   WE: _a [REFERENCE] - wskazanie: ZC, P, OSOBA.
::       _b [REFERENCE] - wskazanie na rubrykę płacową.
::       _c [DATE] - Data sprawdzenia.
::       _d [STRING] - Symbol wniosku.
::       _e [REAL] - Procent stawki wpłaty.
::       _f [STRING] - Sposób rejestrowania.
::       _g [STRING] - Rodzaj zmiany '+' w górę, '-' w dół.
::   WY: _st - zmieniona stawka procentu wpłaty do aktualizacji składnika na liście płac.
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_rub:=_b;
_dt:=_c;
_wn:=_d;
_st:=_e;
_sr:=_f;
_zm:=_g;
_rok:=_dt~1;
_mc:=_dt~2;
_firma:=exec('ref_firma','#firma');
_blad:='Brak możliwości utworzenia technicznego zapisu procentowej wysokości wpłat.'@;

:: Sprawdzam jaki jest procent (pomijając te z danym typem rejetracji) na tą datę sprawdzenia:
_popSt:=-1.0;
PPK_PWP.cntx_psh();
PPK_PWP.index('RNOD');
PPK_PWP.prefix(_firma,$_ref,_rub);
{? PPK_PWP.find_le(_dt)
|| {!
   |? PPK_PWP.SR=_sr & PPK_PWP.prev()
   !};
   {? PPK_PWP.SR<>_sr
   || _popSt:=PPK_PWP.STAWKA
   ?}
      ?};

:: Ustalam poprzedni wpis z danym typem rejetracji z tego miesiąca:
_popO:=exec('find_pwp','ppk_pwp',_firma,$_ref,_rub,,_dt,_sr);
{? _popO<>null()
|| {? PPK_PWP.seek(_popO,,1)
::    Poprzednia stawka (sprzed wpisu o danym typie rejestracji) jest równa wnioskowanej:
   || {? _popSt=_st
      || PPK_PWP.del(1)
   || PPK_PWP.STAWKA:=_st;
         PPK_PWP.put()
      ?}
:: Nie powinno mieć miejsca! (poprzedni pwp znalazła funkcja find_pwp, więc seek() też musi znaleźć):
   || FUN.error(_blad);
      PPK_PWP.cntx_pop();
      return(_st)
   ?}

:: Nie było poprzedniego o tym typie rejestracji, ale jest zmiana stawki procentowej, trzeba utworzyć nowy wpis:
|? _popSt<>_st
:: Ustalam datę OD jaka będzie przypisana wpisowi w PPK_PWP (pierwsza wolna w danym miesiącu):
|| _od:=date(_rok,_mc,1);
   PPK_PWP.cntx_psh();
   {! |? PPK_PWP.find_key(_od) & _od~2=_mc
   |! _od+=1
   !};
   PPK_PWP.cntx_pop();
:: Miesiąc szczelnie wypełniony wpisami PPK_PWP (nie powinno mieć miejsca):
   {? _od~2<>_mc
   || FUN.info(_blad);
      PPK_PWP.cntx_pop();
      return(_st)
   ?};

:: Nie znalazłem żadnego wpisu w PPK_PWP o tym kodzie rubryki (trzeba nadać wartości początkowe):
   {? _popSt=-1.0
   || PPK_PWP.blank();
      PPK_PWP.R:=__RUB.ref(_rub);
      _refName:=ref_name(_ref);
      {? _refName*'osoba'
      || PPK_PWP.OSOBA:=_ref
      |? _refName*'zlec'
      || PPK_PWP.ZC:=_ref
      || PPK_PWP.P:=_ref
      ?}
   ?};
:: Tworzę nowy wpis w PPK_PWP o tym sposobie rejestracji:
   PPK_PWP.OD:=_od;
   PPK_PWP.STAWKA:=_st;
      PPK_PWP.SR:=_sr;
   PPK_PWP.ZMIANA:='T';
   PPK_PWP.add()
?};
PPK_PWP.cntx_pop();

_st


\gdel_ls
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Przywrócenie aktualnej wysokości wpłaty podstawowej uczestnika PPK po skasowaniu rachunku lub składników
::       listy płac jeżeli uczestnik złożył wniosek "Deklaracja wysokości wpłaty podstawowej".
::   WE: _a [REFERENCE] - wskazanie: _OSOBA.
::       _b [DATE] - Data sprawdzenia.
::       _c [REFERENCE] - Bieżący rachunek.
::       _d [REFERENCE] - Lista płac.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_dt:=_b;
_rh:=_c;
_lt:=_d;

PPK_UMO.cntx_psh();
{? exec('init','ppk_umo',_dt)<>null()
|| _rub:=__RUB.sys_kod(712);
   _firma:=exec('ref_firma','#firma');
   PPK_PWP.cntx_psh();
   PPK_PWP.index('RNOD');
   PPK_PWP.prefix(_firma,$_osoba,_rub);
   {? PPK_PWP.find_le(_dt)
   || {? PPK_PWP.SR<>'O'
      || _pwp:=exec('find_pwp','ppk_pwp',_firma,$_osoba,_rub,,_dt,'O');
         {? _pwp<>null()
         || PPK_PWP.seek(_pwp,,1)
         ?}
      ?};
::    Sprawdzamy czy udało się ustalić właściwy wpis pochodzący z listy płac:
      {? PPK_PWP.SR='O'
   || exec('czytaj','#stalesys',_dt,KST_PPK,'WMW');
         _nom:=0;
:: Ustalamy czy po usunięciu rachunku podstawa zmniejszy się tak że trzeba będzie skorygować wysokość wpłaty do PPK.
         {? exec('pods_ppk','ppk_pwp',_osoba,_rh,_lt,_dt,_nom)<KST.NK*KST_PPK.WMW$2
      || PPK_WNU.cntx_psh();
         PPK_WNU.index('UMO_WRD');
         PPK_WNU.prefix(PPK_UMO.ref(),_osoba,'DWWP');
            {? PPK_WNU.find_le(_dt) & _dt~1=PPK_PWP.OD~1 & _dt~2=PPK_PWP.OD~2
            || PPK_PWP.del()
         ?};
         PPK_WNU.cntx_pop()
      ?}
      ?}
   ?};
   PPK_PWP.cntx_pop()
?};
PPK_UMO.cntx_pop();
~~


\pods_ppk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Obliczenie podstawy wpłat do PPK.
::   WE: _a - [REFERENCE] - _OSOBA
::       _b - [REFERENCE] - _RH
::       _c - [REFERENCE] - _O
::       _d - [DATE] - Data do ustalenia zakresu analizowanych danych.
::       _e - [REAL] - Kwota podstawy wyliczona na liście płac.
::   WY: _podst - kwota podstawy z pominięciem bieżącej listy lub rachunku.
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_rh:=_b;
_lt:=_c;
_dt:=_d;
_nom:=_e;
_ref_P:=P.ref();
_podstawa:=0;
_rok:=_dt~1;
_mc:=_dt~2;
_kal_naz:=__KAL.nazwa;
_kal_rok:=__KAL.rok;
_rub:=__RUB.sys_kod(70,_dt);
:: Obliczenie podstawy wpłat do PPK z rachunków osoby wypłaconych w tym samym miesiącu.
P.cntx_psh();
LS.cntx_psh();
H.cntx_psh();
O.cntx_psh();
RH.cntx_psh();
RH.index('RACHDATA');
RH.prefix(exec('ref_firma','ustawienia'),_osoba,_rok,_mc);
{? RH.first()
|| __KAL.set_cal('standard',_rok);
   ZC.cntx_psh();
   {!
   |? _data1:=date(RH.R,RH.M,1);
      _data2:=date(RH.R,RH.M,0);
      _podst:=
         {? {? _rh || RH.ref()=_rh || 0 ?}
         || _nom
         || exec('licza_rhs','lista_licz',70)
         ?};

      {? RH.ZLE().TYP='G' | (ZC.DU<=_data1 & _data2<=ZC.DW)
::       Jeżeli umowa jest godzinowa, lub trwa cały miesiąc - podstawa brana jest w kwocie wypłaconej.
      || _podstawa+=_podst
::       Dla pozostałych umów - podstawa jest uzupełniana do pełnego miesiąca.
      || _minus:=0;
         {? _data1<ZC.DU & ZC.DU<=_data2 || _minus+=__KAL.w_hours(_data1,ZC.DU-1) ?};
         {? _data1<=ZC.DW & ZC.DW<_data2 || _minus+=__KAL.w_hours(ZC.DW+1,_data2) ?};
         _godznom:=__KAL.w_hours(date(RH.DRA~1,RH.DRA~2,1),date(RH.DRA~1,RH.DRA~2,0));
         _praca:=_godznom-_minus;
         _podstawa+={? _minus & _praca>0 || (_podst/_praca)*_godznom$2 || _podst ?}
      ?};
      RH.next()
   !};
   ZC.cntx_pop()
?};

:: Obliczenie podstaw wpłat do PPK z list płac.

H.index('_HISTKOD');

{? _lt
|| _data1:=date(O.R,O.M,1);
   _data2:=date(O.R,O.M,0);
   _podstawa+=exec('licz_p','ppk_pwp',_ref_P,_data1,_data2,_nom,_rh)
?};

O.index('LISTYPLU');
O.prefix(exec('ref_firma','ustawienia'),'P',_rok,_mc);
{? O.first()
|| {!
   |? {? FUNKCJE.CZY_POD()
      || {? O.T().F<>'S'
         || LS.use(O.LT);
            LS.index('OSOBAKOD');
            LS.prefix(exec('ref_firma','ustawienia'),_osoba,_rub);
            _data1:=date(O.R,O.M,1);
            _data2:=date(O.R,O.M,0);
            {? LS.first()
            || {!
               |? {? {? _lt || O.ref()<>_lt | _ref_P<>LS.P || 1 ?}
                  || _podstawa+=exec('licz_p','ppk_pwp',LS.P,_data1,_data2,LS.KW,_rh)
                  ?};
                  LS.next()
               !}
            ?}
         ?}
      ?};
      O.next()
   !}
?};
H.cntx_pop();
P.cntx_pop();
LS.cntx_pop();
O.cntx_pop();
RH.cntx_pop();
__KAL.set_cal(_kal_naz,_kal_rok);
_podstawa


\licz_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Ustalenie podstawy do sprawdzenia czy możliwe jest obniżenie wpłaty podstawowej uczestnika PPK.
::   WE: _a [REFERENCE] - wskazanie na pracownika.
::       _b [DATE] - data początku okresu pracy.
::       _c [DATE] - data końca okresu pracy.
::       _d [REAL] - kwota podstawy wpłat z bieżącej listy płac.
::       _e [REFERENCE] - wskazanie rachunku do umowy cywilnoprawnej.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_prac:=_a;
_data1:=_b;
_data2:=_c;
_podst:=_d;
_rh:=_e;
{? _podst<=0 || return(0) ?};
_podstawa:=0;
_licz_ls:=
   "  LS.prefix(P.ref(),_a);
      _wyn:=0;
      {? LS.first()
      || {!
         |? _wyn+=LS.KW;
            LS.next()
         !}
      ?};
      _wyn
   ";

H.prefix(_prac,'Z');
{? H.find_le(_data1)
|| __KAL.set_cal(H.P().KAL,_data1~1);
   _cp:=-(1+H.CP().S);
   _minus:=exec('dnpzazw','nieobecnosc',_data1,_data2,'gr');
   _godz:=exec('nominal','godziny',_data1,_data2,1)$2;
   {? _cp='u'
   || _Nieob:=exec('godz_bow_newzasad','lista_licz',_data1,_data2,1);
      _Nieob+=exec('liczba_godz','lista_licz',12,O.R,O.M);
      _praca:=_godz-_Nieob-_minus
   || _Nieob:=0;
      {? _rh
      || LS.cntx_psh();
         LS.index('PRACNRRU');
         _praca:=_licz_ls(48)+_licz_ls(54)+_licz_ls(55)+_licz_ls(56)+_licz_ls(63)+_licz_ls(64)+_licz_ls(65)+
            _licz_ls(67)+_licz_ls(68)+_licz_ls(69);
         LS.cntx_pop()
      || _praca:=FUNKCJE.L(48)+FUNKCJE.L(54,56)+FUNKCJE.L(63,65)+FUNKCJE.L(67,69)
      ?}
   ?};
   {? _praca>0 & _praca<_godz
   || _podstawa+=(_podst/_praca)*_godz$2
   || _podstawa+=_podst$2
   ?}
?};
_podstawa


\ppk_ucz_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zmienia znacznik modyfikacji danych na odpowiednich rekordach tabeli PPK_UCZ i P.
::   WE: _a [REFERENCE] - Wskazanie zleceniobiorcy lub pracownika lub osoby.
::       _b [DATE]      - Data wydarzenia, które spowodowało uruchomienie procedury.
::   WY: Czy udało się zmienić znacznik modyfikacji [0/1]?
::       Wartość 1 zwracana jest również w przypadku braku dziedziny POR, a tym samym braku konieczności zmiany
::       znacznika modyfikacji.
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_dt:=_b;

{? ~exec('lic','#b_domain','POR')
|| return(1)
?};

_TAB:=ref_tab(_ref);
{? _TAB=P | _TAB=ZC
|| _osoba:=exec('FindAndGet','#table',_TAB,_ref,,"OSOBA",null())
|? _TAB=OSOBA
|| _osoba:=exec('FindAndGet','#table',_TAB,_ref,,"ref()",null())
|| _osoba:=null()
?};

{? _osoba=null()
|| return(0)
?};

_ret:=0;

PPK_UCZ.cntx_psh();
PPK_UCZ.index('AKTYWNY');
PPK_UCZ.prefix(_osoba,exec('firma','ustawienia'));
{? PPK_UCZ.first()
|| PPK_UMO.cntx_psh();
   PPK_UMO.prefix();
   _d0:=date(0,0,0);
   PPK_UCZ.trig_off('put','*');
   {!
   |? {? PPK_UCZ.PPK_UMO().OD<=_dt & (PPK_UMO.DO=_d0 | _dt<=PPK_UMO.DO)
      || _ret+=PPK_UCZ.put(,1)
      ?};
      PPK_UCZ.next()
   !};
   PPK_UCZ.trig_on('put','*');
   PPK_UMO.cntx_pop()
?};
PPK_UCZ.cntx_pop();

{? _ret
|| P.cntx_psh();
   P.index('OSOBA');
   P.prefix(_osoba);
   {? P.first()
   || P.trig_off('put','*');
      {!
      |? _ret+=P.put(,1);
         P.next()
      !};
      P.trig_on('put','*')
   ?};
   P.cntx_pop()
?};

_ret>0


\find_pwp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Szuka ostatniego (najmłodszego) wpisu w PPK_PWP o określonych parametrach.
::   WE:[_a][_FIRMA]  - wskazanie na firmę, domyślnie wynik exec('firma','ustawienia')
::       _b [STRING]  - wskazanie zleceniobiorcy lub pracownika lub osoby
::       _c [INTEGER] - kod składnika płacowego
::      [_d][DATE]    - data od (ograniczenie dolne wyszukiwania), domyślnie pierwszy dzień miesiąca daty do.
::       _e [DATE]    - data do (ograniczenie górne wyszukiwania)
::       _f [STRING]  - sposób rejestrowania [Automat./Ręcznie/Wniosek/Obliczone]
::   WY: _pwp [_PPK_PWP] - wskazanie znalezionego rekordu lub null() jeśli nie znaleziono
::----------------------------------------------------------------------------------------------------------------------
_firma:={? var_pres('_a')=7 || _a || exec('firma','ustawienia') ?};
{? var_pres('_b')<>2 | var_pres('_c')<>1 | var_pres('_e')<>4 | var_pres('_f')<>2
|| FUN.error('Błąd parametru wejściowego.'@);
   return(0)
?};
_ref:=_b;
_rn:=_c;
_dataDo:=_e;
_dataOd:={? var_pres('_d')<>type_of(date()) || date(_dataDo~1,_dataDo~2,1) || _d ?};
_sr:=_f;
_pwp:=null();

PPK_PWP.cntx_psh();
PPK_PWP.index('RNOD');
PPK_PWP.prefix(_firma,_ref,_rn);
{? PPK_PWP.find_le(_dataDo)
|| {!
:: Przechodzę wstecz dopóki sposób rejestrowania nie jest oczekiwany i data nie wychodzi poza zakres:
   |? PPK_PWP.SR<>_sr & PPK_PWP.prev() & PPK_PWP.OD>=_dataOd
   !};
   {? PPK_PWP.SR=_sr & PPK_PWP.OD>=_dataOd
   || _pwp:=PPK_PWP.ref()
   ?}
?};
PPK_PWP.cntx_pop();

_pwp


:Sign Version 2.0 jowisz:1045 2021/01/22 13:20:12 02e39cd56eb61428269707910d729636545d7456e2dfb8fff617e324e9b34879228c8a5d6f076409a190ea5464461812795d366610f64c10baac9285d6c291dd3a454f7b9eb6bf44233f33e0032996849b794a2b35ac3a963b8c9374fdbe13879881278ee10ba0035cf14e1c7293365072d6ed3bdc7153be03458835af4feb5a
