:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: kal_korh.fml
:: Utworzony: 22.10.2013
:: Autor: TMR
:: Systemy: KALI
::======================================================================================================================
:: Zawartosc: Formuly do obslugi korekt planowania czasu pracy - HCP
::======================================================================================================================

\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
::  MOD: MicKoc [22.26]
:: OPIS: Funkcja zwracajaca okrojony bufor tabeli KAL_KORH
::   WY: tablica nazwana z wybranymi polami tabeli
::----------------------------------------------------------------------------------------------------------------------
::               KAL_KORH.ref()
_buffer:=$("obj_new('Ref'
::  _KAL_KORN    Korekta //Wskazanie na nagłówek korekty planowania
                   ,'KAL_KORN'
::  DATE         Data wejścia //Data wejścia
                   ,'DATA'
::  DATE         Data wyjścia //Data wyjścia
                   ,'DATAW'
::  TIME         Początek dnia pracy //Początek dnia pracy
                   ,'POCZATEK'
::  TIME         Koniec dnia pracy //Koniec dnia pracy
                   ,'KONIEC'
::  TIME         Czas pracy //Czas pracy
                   ,'CZAS'
::  STRING[1]    Typ //Typ kalendarza
                   ,'TYP'
::  STRING[1]    TypWS //Określa typ dnia wolnego/świątecznego
                   ,'TYPWS'
::  STRING[1]    Rodzaj //Rodzaj kalendarza
                   ,'RODZAJ'
::  STRING[35]   Opis //Krótki opis
                   ,'OPIS'
::  STRING[1]    Status //Status
                   ,'STATUS'
::  DATE         Data przerwy //Data rozpoczęcia przerwy
                   ,'P_DATA'
::  TIME         Rozpoczęcie przerwy //Godzina rozpoczęcia przerwy
                   ,'P_START'
::  TIME         Czas trwania przerwy //Czas trwania przerwy
                   ,'P_CZAS'
::  metoda          czyszczenie bufora blank(), gdy podany parametr ~~, to bl_void()
                   ,'blank'
::  metoda          czyszczenie bufora typem pustym bl_void()
                   ,'bl_void'
::  metoda          czyszczenie bufora za pomocą bufora tabeli bl_table()
                   ,'bl_table'
::  metoda          _buffer.get() - pobieranie zawartości bufora
                   ,'get'
::  metoda          _buffer.set() - pola<>~~ nanoszone do tabeli
                   ,'set'
::  metoda          _buffer.setf() - wszystkie pola nanoszone do tabeli
                   ,'setf'
::  metoda          _buffer.cntx_get(ref()/#ref()[,maska]) - wczytuje bufor podanych parametrów
                   ,'cntx_get'
::  metoda          _buffer.ref() - zwraca wartosc .Ref
                   ,'ref'
                   "+{? var_pres('_a')=3 & form(_a)<>'' || ","+_a || "" ?}+"
                   )");
_buffer:=_buffer();

:: metody - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_buffer.blank:=
   "  _this:=_a;
      {? var_pres('_b')=0
      || _this.bl_void(_this)
      |? var_pres('_b')>100
      || _this.bl_table(_this,_b)
      || _this.bl_table(_this,KAL_KORH)
      ?}
   ";

_buffer.bl_void:=
   "  _this:=_a;
      _this.KAL_KORN:=~~;
      _this.DATA:=~~;
      _this.DATAW:=~~;
      _this.POCZATEK:=~~;
      _this.KONIEC:=~~;
      _this.CZAS:=~~;
      _this.TYP:=~~;
      _this.TYPWS:=~~;
      _this.RODZAJ:=~~;
      _this.OPIS:=~~;
      _this.STATUS:=~~;
      _this.P_DATA:=~~;
      _this.P_START:=~~;
      _this.P_CZAS:=~~;
      _this.Ref:=null();
      1
   ";

_buffer.bl_table:=
   "  _this:=_a;
      _tab:=KAL_KORH;
      _tab.cntx_psh();
      _tab.blank(1);
      _this.get(_this,_tab);
      _tab.cntx_pop();
      _tab.get();
      _this.Ref:=null();
      1
   ";

_buffer.get:=
   "  _this:=_a;
      _this.KAL_KORN:=KAL_KORH.KAL_KORN;
      _this.DATA:=KAL_KORH.DATA;
      _this.DATAW:=KAL_KORH.DATAW;
      _this.POCZATEK:=KAL_KORH.POCZATEK;
      _this.KONIEC:=KAL_KORH.KONIEC;
      _this.CZAS:=KAL_KORH.CZAS;
      _this.TYP:=KAL_KORH.TYP;
      _this.TYPWS:=KAL_KORH.TYPWS;
      _this.RODZAJ:=KAL_KORH.RODZAJ;
      _this.OPIS:=KAL_KORH.OPIS;
      _this.STATUS:=KAL_KORH.STATUS;
      _this.P_DATA:=KAL_KORH.P_DATA;
      _this.P_START:=KAL_KORH.P_START;
      _this.P_CZAS:=KAL_KORH.P_CZAS;
      _this.Ref:=KAL_KORH.ref();
      _this
   ";

_buffer.set:=
   "  _this:=_a;
      {? _this.KAL_KORN<>~~ || KAL_KORH.KAL_KORN:=_this.KAL_KORN ?};
      {? _this.DATA<>~~ || KAL_KORH.DATA:=_this.DATA ?};
      {? _this.DATAW<>~~ || KAL_KORH.DATAW:=_this.DATAW ?};
      {? _this.POCZATEK<>~~ || KAL_KORH.POCZATEK:=_this.POCZATEK ?};
      {? _this.KONIEC<>~~ || KAL_KORH.KONIEC:=_this.KONIEC ?};
      {? _this.CZAS<>~~ || KAL_KORH.CZAS:=_this.CZAS ?};
      {? _this.TYP<>~~ || KAL_KORH.TYP:=_this.TYP ?};
      {? _this.TYPWS<>~~ || KAL_KORH.TYPWS:=_this.TYPWS ?};
      {? _this.RODZAJ<>~~ || KAL_KORH.RODZAJ:=_this.RODZAJ ?};
      {? _this.OPIS<>~~ || KAL_KORH.OPIS:=_this.OPIS ?};
      {? _this.STATUS<>~~ || KAL_KORH.STATUS:=_this.STATUS ?};
      {? _this.P_DATA<>~~ || KAL_KORH.P_DATA:=.P_DATA ?};
      {? _this.P_START<>~~ || KAL_KORH.P_START:=.P_START ?};
      {? _this.P_CZAS<>~~ || KAL_KORH.P_CZAS:=.P_CZAS ?};
      ~~
   ";

_buffer.setf:=
   "  _this:=_a;
      KAL_KORH.KAL_KORN:=__this.KAL_KORN;
      KAL_KORH.DATA:=_this.DATA;
      KAL_KORH.DATAW:=_this.DATAW;
      KAL_KORH.POCZATEK:=_this.POCZATEK;
      KAL_KORH.KONIEC:=_this.KONIEC;
      KAL_KORH.CZAS:=_this.CZAS;
      KAL_KORH.TYP:=_this.TYP;
      KAL_KORH.TYPWS:=_this.TYPWS;
      KAL_KORH.RODZAJ:=_this.RODZAJ;
      KAL_KORH.OPIS:=_this.OPIS;
      KAL_KORH.STATUS:=_this.STATUS;
      KAL_KORH.P_DATA:=.P_DATA;
      KAL_KORH.P_START:=.P_START;
      KAL_KORH.P_CZAS:=.P_CZAS;
      ~~
   ";

_buffer.cntx_get:=
   "  _this:=_a;
      _tab:=KAL_KORH;
      {? type_of(_b)=7
      || _ref:=#_b;
         _mask:=ref_name(_b)
      |? type_of(_b)=1
      || _ref:=_b;
         _mask:={? var_pres('_c')=2 || _c || _tab.name() ?}
      || _this.blank(_this,~~);
         return(_this)
      ?};
      _tab.cntx_psh();
      {? {? _tab.name()<>_mask
         || _tab.use(_mask)
         || 1
         ?}
      || _tab.prefix();
         {? _tab.seek(_ref,)
         || _this.get(_this)
         || _this.blank(_this,~~)
         ?}
      || _this.blank(_this,~~)
      ?};
      _tab.cntx_pop();
      (.)
   ";

_buffer.ref:=
   "  _this:=_a;
      _this.Ref
   ";
:: czyszczenie bufora
_buffer.blank(_buffer,~~);

:: zwracam bufor
_buffer


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30]
:: OPIS: Funkcja dodająca wpis w historii korekt harmonogramu czasu pracy.
::   WE: _a  - [REFERENCE] - wskazanie na współpracownika (P)
::       _b  - [REFERENCE] - wskazanie na okres rozliczeniowy (A_OKR)
::       _c  - [obj_new]   - bufor tabeli KAL_KORH
::      [_d] - [NUMBER]    - czy korekta zerowa
::      [_e] - [REFERENCE] - wskazanie na osobę
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null()) || _a || return(0) ?};
_okr_ref:={? var_pres('_b')=type_of(null()) || _b || return(0) ?};
_buffer:={? var_pres('_c')=type_of(obj_new(1)) || _c || return(0) ?};
_zerowa:={? var_pres('_d')=type_of(0) || _d || 0 ?};
_os_ref:=
   {? var_pres('_e')=type_of('')
   || _res:=null();
      OSOBA.cntx_psh();
      OSOBA.prefix();
      {? OSOBA.seek(_e) || _res:=OSOBA.ref() ?};
      OSOBA.cntx_pop();
      _res
   |? var_pres('_e')=type_of(null())
   || _e
   || null()
   ?};

_res:=0;
KAL_KORH.cntx_psh();
KAL_KORH.prefix();
KAL_KORH.blank(1);
_exist:=exec('exist','kal_korh',_p_ref,_okr_ref,_buffer.DATA,_zerowa);
:: Przepisanie z obiektu do tabeli
_buffer.set(_buffer);
KAL_KORH.KAL_KORN:=exec('getAktKor','kal_korn',_p_ref,_okr_ref,_zerowa,_os_ref);
{? _zerowa & _exist
|| exec('delete','kal_korh',_exist)
?};
_res:=KAL_KORH.add();
KAL_KORH.cntx_pop();
_res


\delete4korn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Kasuje rekordy tabeli KAL_KORH (wykonywane w transakcji!!!) dla wskaznego rekordu _ref
::   WE: _a [REFERENCE] - wskazanie na nagłówek korekty - KAL_KORN.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_ref:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};

_can_continue:=1;

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(null) ?};

:: zalozenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

KAL_KORH.cntx_psh();
KAL_KORH.index('KOREKTA');
KAL_KORH.prefix(_ref);
{? KAL_KORH.first()
|| {!
   |? _can_continue:=exec('delete','kal_korh',KAL_KORH.ref());
      _can_continue>0 & KAL_KORH.first()
   !}
?};
KAL_KORH.cntx_pop();

{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || end() ?};
_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Kasuje podany rekord tabeli KAL_KORH (wykonywane w transakcji!!!)
::   WE: _a - KAL_KORH.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_ref:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};

:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_can_continue:=1;

:: zalozenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};
KAL_KORH.cntx_psh();
KAL_KORH.clear();
{? KAL_KORH.seek(_ref)
|| {? KAL_KORH.del(,1)>0
   || _result:=1
   || undo();
      _result:=-3
   ?}
|| _result:=0
?};
KAL_KORH.cntx_pop();

{? _result<0
|| undo()
?};
{? _mydo || end() ?};
_result


\exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Sprawdza czy na podaną datę istnieje już zapis korekty.
::   WE: _a [REFERENCE] - wskazanie na nagłówek korekty - KAL_KORN.ref()
::       _b [DATE]      - data badania
::   WY: null/ref
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
_p_ref:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
_okr_ref:={? var_pres('_b')=type_of(null()) || _b || return(_result) ?};
_data:={? var_pres('_c')=type_of(#0) || _c || return(_result) ?};
_zerowa:={? var_pres('_d')=type_of(0) || _d || 0 ?};

KAL_KORN.cntx_psh();
KAL_KORH.cntx_psh();
KAL_KORH.index('PRACOKR');
KAL_KORH.prefix(_p_ref,_okr_ref,_data);
{? KAL_KORH.first()
|| {? _zerowa
   || _dalej:=1;
      {? KAL_KORH.first()
      || {!
         |? {? KAL_KORH.KAL_KORN().WERSJA=0
            || _result:=KAL_KORH.ref();
               _dalej:=0
            ?};
            _dalej & KAL_KORH.next()
         !}
      ?}
   || _result:=KAL_KORH.ref()
   ?}
?};
KAL_KORH.cntx_pop();
KAL_KORN.cntx_pop();
_result

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:18 b2a6271770848b2050ab7c066afcb93045319f57956b2db6781a353b3a7046c74194261c61ffd0d935107c8bc4e242abebbc42b64d5aba6ec5b98f8a6af0faf223810ade34e81ad0cba8f073736251ae99b263e7b9eea851a14b1dbc64463af49691edf2f735fdc92212e2c97c19ee3f8c06ec42469ac572b53fb8eaa8f8271f
