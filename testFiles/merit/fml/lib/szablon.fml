:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: szablon.fml
:: Utworzony: 10.02.2020
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły obsługujące szablony dokumentów.
::======================================================================================================================


\_x_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed dołączeniem/modyfikacją wiersza tabeli SD_* podlegającej aktualizacji.
::   WE: _a TABLE - alias tabeli z kolumną SYSTEM
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_tt:=var_pres('SYSTEM',SD_DEF);

{? var_pres('SYSTEM',_a)=_tt & _a.SYSTEM='T'
:: ochrona wartości dla zapisów sytemowych
|| {? var_pres('KOD',_a)=_tt & #_a.KOD<>0
   || _a.KOD:=''
   ?};
   {? var_pres('AUTOR',_a)=_tt
   || _a.AUTOR:='Macrologic by Asseco'
   ?};
   {? var_pres('GRUPA',_a)=_tt
   || _a.GRUPA:='T'
   ?}

|| {? var_pres('KOD',_a)=_tt & (_a.KOD='' | #_a.KOD=0)
::    uzupełnij kod dla aktualizacji
   || _a.KOD:=$_a.tm_stamp()
   ?};
   {? var_pres('AUTOR',_a)=_tt & _a.AUTOR=''
::    uzupełnij autora raportu
   || _a.AUTOR:=userdata()
   ?}
?};
~~


\_x_symbol_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Kontrola wartości SYMBOL w tabelach SD_*.
::   WE: _a OBJECT - wskazanie obiektu __CHK
::       _b TABLE - alias sprawdzanej tabeli
::   WY: 1/'SYMBOL' - poprawna/błędna wartość SYMBOL
::----------------------------------------------------------------------------------------------------------------------
:: UWAGA: formuła wycofana z użycia na rzecz wywołania
:: exec('chk_symbol','#symsys',_a,_b,'SYSTEM','SYMBOL')
'SYMBOL'


\_x_grupa_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Kontrola wartości GRUPA w tabelach SD_*.
::   WE: _a OBJECT - wskazanie obiektu __CHK
::       _b TABLE - alias sprawdzanej tabeli
::   WY: 1/'GRUPA' - poprawna/błędna wartość GRUPA
::----------------------------------------------------------------------------------------------------------------------
:: UWAGA: formuła wycofana z użycia na rzecz wywołania
:: exec('chk_yes_no','#symsys',_a,_b,'GRUPA')
'GRUPA'


\_x_form_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Kontrola składni formuły.
::   WE: _a OBJECT - wskazanie obiektu __CHK
::       _b TABLE - alias sprawdzanej tabeli
::       _c STRING - akronimy pól zawierających treść formuły
::       ...
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{! _ii:=3.._
|! _fld:=_[_ii];
   {? form_chk($_b.memo_txt(,0,_fld)).size()>=1
   || _a.err_msg('W formule \"%1\" wykryto błędy składniowe.'@[MS.name(_b,_fld)]);
      return(_fld)
   ?}
!};
1


\_bdef_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_BDEF,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','SD_DEF','B_DOMAIN')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')"
)


\_bdef_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_BDEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_BDEF);

:: kontrola poprawności wiersza
exec('_bdef_chk','szablon',0)


\_bdef_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_BDEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_BDEF);

:: kontrola poprawności wiersza
exec('_bdef_chk','szablon',1)


\_brek_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_BREK,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','SD_WREK','B_DOMAIN')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')"
)


\_brek_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_BREK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_BREK);

:: kontrola poprawności wiersza
exec('_brek_chk','szablon',0)


\_brek_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_BREK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_BREK);

:: kontrola poprawności wiersza
exec('_brek_chk','szablon',1)


\_def_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_DEF,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','NAZWA','SYMBOL','GRUPA')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: zweryfikuj symbolu standardowego lub użytkownika
   "exec('chk_symbol','#symsys',_a,_b,'SYSTEM','SYMBOL')",
:: zweryfikuj dozwolone wartości znacznika GRUPA
   "exec('chk_yes_no','#symsys',_a,_b,'GRUPA')"
)


\_def_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_DEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_DEF);

:: kontrola poprawności wiersza
exec('_def_chk','szablon',0)


\_def_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po dołączeniu wiersza tabeli SD_DEF.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};
~~


\_def_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_DEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','szablon',SD_DEF);

:: kontrola poprawności wiersza
exec('_def_chk','szablon',1)


\_def_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po poprawieniu wiersza tabeli SD_DEF.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};

{? SD_DEF.GRUPA<>bfld('GRUPA') & SD_DEF.GRUPA='N'
|| SD_DOK.cntx_psh();
   SD_DOK.index('SYMBOL');
   SD_DOK.prefix(SD_DEF.ref());
   _loop:=SD_DOK.first();
   {!
   |? _loop
   |! {? SD_DOK.GRUPA='T'
      || SD_DOK.GRUPA:='N';
         SD_DOK.put()
      ?};
      _loop:=SD_DOK.next()
   !};
   SD_DOK.cntx_pop()
?};
~~


\_def_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli SD_DEF.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',SD_BDEF,'SYM_DOM',SD_DEF.ref()) &
exec('del_ndx','#table',SD_FDEF,'SYM_FIR',SD_DEF.ref()) &
exec('del_ndx','#table',SD_DOK,'SYMBOL',SD_DEF.ref()) &
exec('del_ndx','#table',SD_UINS,'STAN',SD_DEF.ref())


\_dok_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_DOK,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','NAZWA','SYMBOL','GRUPA')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: zweryfikuj symbolu standardowego lub użytkownika
   "exec('chk_symbol','#symsys',_a,_b,'SYSTEM','SYMBOL')",
:: dozwolone wartości znacznika GRUPA
   "exec('chk_yes_no','#symsys',_a,_b,'GRUPA')"
)


\_dok_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Aktualizuje zawartość pola notatnikowego XML w wierszu tabeli SD_DOK.
::   WE:
::   WY: wynik działania funkcji aktualizującej pole notatnikowe
::----------------------------------------------------------------------------------------------------------------------
_tag:=exec('rte_tag','szablon');
_nim:=%255;
_txt:=
   '<?xml version="1.0" encoding="UTF-8"?>\n'
   '<%1 text="Definicja">\n'[_tag.item];

SD_WREK.cntx_psh();
SD_WREK.prefix();
SD_REK.cntx_psh();
SD_REK.index('XSLO_NUM');
SD_XSLO.cntx_psh();
SD_XSLO.index('NUMER');
SD_XSLO.prefix(exec('_xslo_rek','szablon_std'),);
_loop:=SD_XSLO.first();
{!
|? _loop
|! SD_REK.prefix(SD_DOK.ref(),SD_XSLO.ref());
   {? SD_REK.first()
   || _txt+='\t<%1 %2="%3">\n'[
         _tag.item,
         _tag.text,xml_value(SD_XSLO.NAZWA)
      ];
      {!
      |? SD_REK.SD_WREK();
         _rek:=SD_WREK.memo_txt(,1,'XML');
         {? SD_REK.ROZWIN='T'
         || _rek:=gsub(_rek,
               '%1="%2"'[_tag.expanded,'false'],
               '%1="%2"'[_tag.expanded,'true']
            )
         ?};
         _txt+=gsub(_rek,_nim,'\t\t');
         SD_REK.next()
      !};
      _txt+='\t</%1>\n'[_tag.item]
   ?};
   _loop:=SD_XSLO.next()
!};
SD_XSLO.cntx_pop();
SD_REK.cntx_pop();
SD_WREK.cntx_pop();

_txt+='</%1>'[_tag.item];

SD_DOK.memo_set(_txt,'XML');
SD_DOK.memo_put(,'XML')


\_dok_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_DOK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_DOK);

:: kontrola poprawności wiersza
exec('_dok_chk','szablon',0)


\_dok_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_DOK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','szablon',SD_DOK);

:: kontrola poprawności wiersza
exec('_dok_chk','szablon',1)


\_dok_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli SD_DOK.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',SD_DOK,'NAZWA',SD_DOK.SD_DEF,#SD_DOK.ref()) &
exec('del_ndx','#table',SD_FDOK,'SYM_FIR',SD_DOK.ref()) &
exec('del_ndx','#table',SD_REK,'NUMER',SD_DOK.ref()) &
exec('del_ndx','#table',SD_PAR,'NUMER',SD_DOK.ref())


\_fdef_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucl
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_FDEF,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SD_DEF','FIRMA')")
)


\_fdef_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_FDEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_FDEF);

:: kontrola poprawności wiersza
exec('_fdef_chk','szablon',0)


\_fdef_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_FDEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_FDEF);

:: kontrola poprawności wiersza
exec('_fdef_chk','szablon',1)


\_fdef_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli SD_FDEF.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń rekordy zależne
SD_DEF.cntx_psh();
{? SD_FDEF.SD_DEF().GRUPA='N'
|| SD_DOK.cntx_psh();
   SD_FDOK.cntx_psh();
   SD_FDOK.prefix();
   SD_FDOK.f_set(
      'FIRMA',
      'join SD_DOK using (SD_FDOK.SD_DOK,SD_DOK.REFERENCE)',
      'SD_DOK.SD_DEF=:_a and SD_FDOK.FIRMA=:_b',
      SD_FDEF.SD_DEF,SD_FDEF.FIRMA
   );
   _loop:=SD_FDOK.f_first();
   {!
   |? _loop
   |! {? SD_FDOK.SD_DOK().GRUPA='N'
      || SD_FDOK.del()
      ?};
      _loop:=SD_FDOK.f_next()
   !};
   SD_FDOK.f_clear(1);
   SD_FDOK.cntx_pop();
   SD_DOK.cntx_pop()
?};
SD_DEF.cntx_pop();
1


\_fdok_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucl
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_FDOK,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SD_DOK','FIRMA')")
)


\_fdok_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_FDOK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_FDOK);

:: kontrola poprawności wiersza
exec('_fdok_chk','szablon',0)


\_fdok_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_FDOK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawnl
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_FDOK);

:: kontrola poprawności wiersza
exec('_fdok_chk','szablon',1)


\_fml_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucl
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_FML,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','SD_PAR','SD_XSLO','TRESC')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: kontrola składni formuły
   "exec('_x_form_chk','szablon',_a,_b,'TRESC')"
)


\_fml_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_FML.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_FML);

:: kontrola poprawności wiersza
exec('_fml_chk','szablon',0)


\_fml_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_FML.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_FML);

:: kontrola poprawności wiersza
exec('_fml_chk','szablon',1)


\_frek_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucl
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_FREK,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SD_WREK','FIRMA')")
)


\_frek_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_FREK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_FREK);

:: kontrola poprawności wiersza
exec('_frek_chk','szablon',0)


\_frek_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_FREK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_FREK);

:: kontrola poprawności wiersza
exec('_frek_chk','szablon',1)


\_map_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed zapisem wiersza tabeli SD_MAP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_MAP);

SD_PAR.cntx_psh();
{? SD_MAP.SD_PAR().SD_DOK<>null
:: aktualizuj wskazanie dokumentu
|| SD_MAP.SD_DOK:=SD_MAP.SD_PAR().SD_DOK
?};
SD_PAR.cntx_pop();
1


\_map_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_MAP,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','SD_DOK','SD_PAR','SD_WPAR')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')"
)


\_map_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Uzupełnia mapę parametrów dokumentu na podstawie parametrów wskazanego zestawu danych.
::   WE: _a _SD_DOK - wskazanie szablonu dokumentu
::       _b _SD_WREK - wskazanie zestawu danych
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_dok:=_a;
_rek:=_b;
_gen:=0;

:: ustal tryb generowania kodów
{? exec('runtime_dro','#system')
|| SD_DOK.cntx_psh();
   {? SD_DOK.seek(_dok,,1)
   || _gen:=exec('x_system_t','szablon',SD_DOK)
   || SD_DOK.cntx_pop();
      return()
   ?};
   SD_DOK.cntx_pop()
?};

SD_WFML.cntx_psh();
SD_WFML.index('NUMER');
SD_FML.cntx_psh();
SD_FML.index('NUMER');
SD_PAR.cntx_psh();
SD_PAR.index('NUMER');
SD_PAR.prefix(_dok);
SD_MAP.cntx_psh();
SD_MAP.index('UNIQUE');
SD_MAP.prefix();
SD_WPAR.cntx_psh();
SD_WPAR.index('NUMER');
SD_WPAR.prefix(_rek);

_pfc:=0;
_loop:=SD_WPAR.first();
{!
|? _loop
|! _clp:=0;
   SD_MAP.blank();
   SD_MAP.SD_WPAR:=SD_WPAR.ref();
   {? SD_PAR.find_tab(,'SYMBOL',,'=',SD_WPAR.SYMBOL,'TYP',,'=',SD_WPAR.TYP) |
      SD_PAR.find_tab(,'SYMBOL',,'=','Q'+SD_WPAR.SYMBOL,'TYP',,'=',SD_WPAR.TYP)
::    znaleziono parametr o identycznym symbolu i typie danych
   || SD_MAP.SD_PAR:=SD_PAR.ref();
      {? ~SD_MAP.find_key(SD_MAP.SD_PAR,SD_MAP.SD_WPAR)
      || {? _gen
::          generuj kod
         || SD_MAP.SYSTEM:='T';
            SD_MAP.KOD:=exec('x_kod_gen','szablon',SD_MAP)
         ?};
         SD_MAP.add()
      ?}
   || SD_PAR.blank();
      SD_PAR.SD_DOK:=_dok;
      SD_PAR.SYMBOL:=SD_WPAR.SYMBOL;
      {? _gen
::       generuj kod
      || SD_PAR.SYSTEM:='T';
         SD_PAR.KOD:=exec('x_kod_gen','szablon',SD_PAR)
      || {? 1+SD_PAR.SYMBOL<>'Q'
::          utwórz jako parametr klienta
         || SD_PAR.SYMBOL:='Q'+SD_PAR.SYMBOL;
            _clp:=1
         ?}
      ?};
      SD_PAR.NAZWA:=SD_WPAR.NAZWA;
      SD_PAR.WIDOCZNY:=SD_WPAR.WIDOCZNY;
      SD_PAR.WYMAGANY:=SD_WPAR.WYMAGANY;
      SD_PAR.TYP:=SD_WPAR.TYP;
      SD_PAR.DLUGOSC:=SD_WPAR.DLUGOSC;
      SD_PAR.PRECYZJA:=SD_WPAR.PRECYZJA;
      SD_PAR.memo_set(SD_WPAR.memo_txt(,1,'OPIS'),'OPIS');
      SD_PAR.memo_set(SD_WPAR.memo_txt(,1,'OKIENKO'),'OKIENKO');
      {? SD_PAR.add() & SD_PAR.memo_put(,'OPIS') & SD_PAR.memo_put(,'OKIENKO')
      || SD_MAP.SD_PAR:=SD_PAR.ref();
         {? _gen
::          generuj kod
         || SD_MAP.SYSTEM:='T';
            SD_MAP.KOD:=exec('x_kod_gen','szablon',SD_MAP)
         ?};
         SD_MAP.add();
         SD_FML.prefix(SD_PAR.ref());
         SD_WFML.prefix(SD_WPAR.ref());
         _loop:=SD_WFML.first();
         {!
         |? _loop
         |! _tresc:=SD_WFML.memo_txt(,1,'TRESC');
            SD_FML.blank();
            SD_FML.SD_PAR:=SD_PAR.ref();
            SD_FML.SD_XSLO:=SD_WFML.SD_XSLO;
            SD_FML.memo_set(_tresc,'TRESC');
            {? _gen
::             generuj kod
            || SD_FML.SYSTEM:='T';
               SD_FML.KOD:=exec('x_kod_gen','szablon',SD_FML)
            ?};
            {? SD_FML.add() & SD_FML.memo_put(,'TRESC')
            || _pfc+=_clp
            ?};
            _loop:=SD_WFML.next()
         !}
      ?}
   ?};
   _loop:=SD_WPAR.next()
!};

SD_WPAR.cntx_pop();
SD_MAP.cntx_pop();
SD_PAR.cntx_pop();
SD_FML.cntx_pop();
SD_WFML.cntx_pop();

{? _pfc
:: parametry klienta z formułami
|| exec('fml_par_msg','szablon')
?};
~~


\_map_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_WPAR.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: pielęgnyj anomalię
exec('_map_modb','szablon');

:: kontrola poprawności wiersza
exec('_map_chk','szablon',0)


\_map_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_WPAR.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawnl
::----------------------------------------------------------------------------------------------------------------------
:: pielęgnyj anomalię
exec('_map_modb','szablon');

:: kontrola poprawności wiersza
exec('_map_chk','szablon',1)


\_xpar_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed zapisem wiersza tabel SD_PAR i SD_WPAR.
::   WE: _a [TABLE] - alias tabeli
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

{? _TAB.TYP=exec('type_reference','#field')
|| _TAB.DLUGOSC:=16;
   _TAB.PRECYZJA:=0

|? _TAB.TYP=exec('type_integer','#field') |
   _TAB.TYP=exec('type_date','#field') |
   _TAB.TYP=exec('type_time','#field')
|| _TAB.PRECYZJA:=0
?};
1


\_par_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_PAR,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','NAZWA','SYMBOL')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: zweryfikuj symbolu standardowego lub użytkownika
   "exec('chk_symbol','#symsys',_a,_b,'SYSTEM','SYMBOL')",
:: dla typu innego niż złączenie wymagana jest długość pola
   "  {? _b.TYP=exec('type_reference','#field') || return(1) ?};
      _a.record(_b,,'DLUGOSC')
   ",
:: dla typu liczby rzeczywistej wymagana jest precyzja
   "  {? _b.TYP<>exec('type_real','#field') || return(1) ?};
      _a.record(_b,,'PRECYZJA')
   ",
:: sprawdź dozwolony zakres dla długości
:: ER/WRT/XP/23.25/2401/0032 Punkt czwarty świadectwa pracy nie mieści się na wydruku, decyzja ATA, 08.01.2024r.
   "  {? _b.DLUGOSC<0 | _b.DLUGOSC>100
      || {? exec('wyjatek_ER','szablon',_b) || return(1) ?};
         _a.err_fld(_b,'DLUGOSC',1);
         return(0)
      ?};
      1
   ",
:: sprawdź dozwolony zakres dla precyzji
   "  {? _b.PRECYZJA<0 | _b.PRECYZJA>10
      || _a.err_fld(_b,'PRECYZJA',1);
         return(0)
      ?};
      1
   ",
:: porównaj precyzję i długość
   "  {? _b.PRECYZJA<>0 & (_b.DLUGOSC-1)<=_b.PRECYZJA
      || _a.err_fld(_b,'PRECYZJA',1);
         return(0)
      ?};
      1
   "
)


\_par_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_PAR.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_PAR);
exec('_xpar_modb','szablon',SD_PAR);

:: ustal numer
SD_PAR.cntx_psh();
SD_PAR.index('NUMER');
SD_PAR.prefix(SD_PAR.SD_DOK);
_numer:=SD_PAR.size()+1;
SD_PAR.cntx_pop();
SD_PAR.NUMER:=_numer;

:: kontrola poprawności wiersza
exec('_par_chk','szablon',0)


\_par_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_PAR.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawnl
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_PAR);
exec('_xpar_modb','szablon',SD_PAR);

:: kontrola poprawności wiersza
exec('_par_chk','szablon',1)


\_par_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli SD_PAR.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',SD_FML,'NUMER',SD_PAR.ref()) &
exec('del_ndx','#table',SD_MAP,'UNIQUE',SD_PAR.ref())


\_rek_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucl
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_REK,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','SD_DOK','SD_XSLO','SD_WREK')"),
:: zweryfikuj wartości znacznika GLOWNY
   "_a.in_set(_b,'GLOWNY',,'T','N')",
:: zweryfikuj wartości znacznika ROZWIN
   "_a.in_set(_b,'ROZWIN',,'T','N')"
)


\_rek_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_REK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_REK);

:: ustal numer
SD_REK.cntx_psh();
SD_REK.index('XSLO_NUM');
:: osobny zakres numerowania według miejsca
SD_REK.prefix(SD_REK.SD_DOK,SD_REK.SD_XSLO);
_numer:=SD_REK.size()+1;
SD_REK.cntx_pop();
SD_REK.NUMER:=_numer;

:: kontrola poprawności wiersza
exec('_rek_chk','szablon',0)


\_rek_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po dołączeniu wiersza tabeli SD_REK.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};

:: aktualizuj definicję struktury danych
SD_DOK.cntx_psh();
SD_DOK.prefix();
SD_REK.SD_DOK();
exec('_dok_xml','szablon');
SD_DOK.cntx_pop();
~~


\_rek_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_REK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_REK);

:: kontrola poprawności wiersza
exec('_rek_chk','szablon',1)


\_rek_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po poprawieniu wiersza tabeli SD_REK.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};

:: aktualizuj definicję struktury danych
{? SD_REK.SD_WREK<>bfld('SD_WREK') |
   SD_REK.SD_XSLO<>bfld('SD_XSLO') |
   SD_REK.NUMER<>bfld('NUMER') |
   SD_REK.ROZWIN<>bfld('ROZWIN')
|| SD_DOK.cntx_psh();
   SD_DOK.prefix();
   SD_REK.SD_DOK();
   exec('_dok_xml','szablon');
   SD_DOK.cntx_pop()
?};

{? SD_REK.SD_WREK<>bfld('SD_WREK')
:: aktualizuj mapy parametrów
|| exec('del_ndx','#table',SD_MAP,'NUMER',bfld('SD_WREK'))
?};
~~


\_rek_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli SD_REK.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń z mapy wiersze właściwe dla zestawu danych
exec('del_ndx','#table',SD_MAP,'NUMER',SD_REK.SD_DOK,SD_REK.SD_WREK)


\_rek_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Wyzwalacz po usunięciu wiersza tabeli SD_REK.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};

SD_DOK.cntx_psh();
SD_DOK.prefix();
{? SD_DOK.seek(bfld('SD_DOK'))
|| exec('_dok_xml','szablon')
?};
SD_DOK.cntx_pop();
~~


\_wfml_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucl
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_WFML,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','SD_WPAR','SD_XSLO','TRESC')"),
:: kontrola składni formuły
   "exec('_x_form_chk','szablon',_a,_b,'TRESC')"
)


\_wfml_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_WFML.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_WFML);

:: kontrola poprawności wiersza
exec('_wfml_chk','szablon',0)


\_wfml_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_WFML.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawnl
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_WFML);

:: kontrola poprawności wiersza
exec('_wfml_chk','szablon',1)


\_wkol_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed zapisem wiersza tabeli SD_WKOL.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? SD_WKOL.NUMER<=0
:: ustal numer
|| _numer:=1;
   SD_WKOL.cntx_psh();
   SD_WKOL.index('NUMER');
:: osobny zakres numerowania dla standardu i modyfikacji
   SD_WKOL.prefix(SD_WKOL.SD_WREK,SD_WKOL.SD_WKOL,SD_WKOL.SYSTEM);
   {? SD_WKOL.last()
   || _numer:=SD_WKOL.NUMER+1
   ?};
   SD_WKOL.cntx_pop();
   SD_WKOL.NUMER:=_numer
?};
1


\_wkol_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_WKOL,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','NAZWA','SYMBOL','SD_XSLO','FML')"),
:: zweryfikuj symbolu standardowego lub użytkownika
   "exec('chk_symbol','#symsys',_a,_b,'SYSTEM','SYMBOL')",
:: kontrola składni formuły
   "exec('_x_form_chk','szablon',_a,_b,'FML')"
)


\_wkol_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Aktualizuje zawartość pola notatnikowego XML w wierszu tabeli SD_WKOL.
::   WE:
::   WY: wynik działania funkcji aktualizującej pole notatnikowe
::----------------------------------------------------------------------------------------------------------------------
_tag:=exec('rte_tag','szablon');
_nim:=%255;
_txt:='';

_symbol:=xml_value(SD_WKOL.SYMBOL);
_nazwa:=xml_value(SD_WKOL.NAZWA);
_opis:=xml_value(SD_WKOL.memo_txt(,1,'OPIS'));

SD_WKOL.cntx_psh();
SD_WKOL.index('NUMER');
SD_WKOL.prefix(SD_WKOL.SD_WREK,#SD_WKOL.ref());
{? SD_WKOL.first()
|| _txt+=
      '%1<%2 %3="%4">\n'
      '%1\t<%5>%6</%5>\n'[
         _nim,_tag.item,
         _tag.text,_nazwa,
         _tag.help,_opis
      ];
   {!
   |? SD_WKOL.memo_get(,'XML');
      _txt+=gsub(SD_WKOL.memo_txt(,1,'XML'),_nim,_nim+'\t');
      SD_WKOL.next()
   !};
   _txt+='%1</%2>\n'[_nim,_tag.item]

|| _txt+=
      '%1<%2>\n'
      '%1\t<%3>[%4]</%3>\n'
      '%1\t<%5>%6</%5>\n'
      '%1\t<%7>%8</%7>\n'
      '%1</%2>\n'[
         _nim,_tag.item,
         _tag.data,_symbol,
         _tag.text,_nazwa,
         _tag.help,_opis
      ]
?};
SD_WKOL.cntx_pop();

SD_WKOL.memo_set(_txt,'XML');
SD_WKOL.memo_put(,'XML')


\_wkol_xml_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Aktualizuje definicję pola notatnikowego danej nadrzędnej lub zestawu danych.
::   WE: _a INTEGER - numer nadrzędnego wiersza
::       _b SD_WREK - wskazanie zestawu danych
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_kol:=_a;
_rek:=_b;

{? _kol<>0
|| SD_WKOL.cntx_psh();
   SD_WKOL.prefix();
   {? SD_WKOL.seek(_kol,)
::    aktualizuj nadrzędną definicję
   || exec('_wkol_xml','szablon')
   ?};
   SD_WKOL.cntx_pop()

|? _rek<>null
|| SD_WREK.cntx_psh();
   SD_WREK.prefix();
   {? SD_WREK.seek(_rek)
::    aktualizuj definicję zestawu
   || exec('_wrek_xml','szablon')
   ?};
   SD_WREK.cntx_pop()
?};
~~


\_wkol_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_WKOL.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_WKOL);
exec('_wkol_modb','szablon');

:: kontrola poprawności wiersza
exec('_wkol_chk','szablon',0)


\_wkol_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po poprawieniu wiersza tabeli SD_WKOL.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};
~~


\_wkol_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_WKOL.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_WKOL);
exec('_wkol_modb','szablon');

exec('_wkol_chk','szablon',1)


\_wkol_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po poprawieniu wiersza tabeli SD_WKOL.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};

{? SD_WKOL.SYSTEM<>bfld('SYSTEM')
:: standaryzacja zapisu
|| SD_WKOL.NUMER:=0;
   SD_WKOL.memo_get(,'FML');
   SD_WKOL.put()
?};
~~


\_wkol_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli SD_WKOL.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',SD_WKOL,'NUMER',SD_WKOL.SD_WREK,#SD_WKOL.ref())


\_wkol_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po usunięciu wiersza tabeli SD_WKOL.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};

:: przesuń pozostałe zapisy
SD_WKOL.cntx_psh();
SD_WKOL.index('NUMER');
:: osobny zakres numerowania dla standardu i modyfikacji
SD_WKOL.prefix(bfld('SD_WREK'),bfld('SD_WKOL'),bfld('SYSTEM'));
_loop:=SD_WKOL.find_ge(bfld('NUMER'));
{! _ii:=bfld('NUMER')
|? _loop
|! SD_WKOL.NUMER:=_ii;
   SD_WKOL.memo_get(,'FML');
   SD_WKOL.put();
   _loop:=SD_WKOL.next()
!};
SD_WKOL.cntx_pop();

:: aktualizuj nadrzędną definicję lub definicję zestawu
exec('_wkol_xml_mod','szablon',bfld('SD_WKOL'),bfld('SD_WREK'));
~~


\_wkol_memo_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po poprawieniu pola notatnikowego w wierszu tabeli SD_WKOL.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::       _b STRING - akronim pola notatnikowego
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};

{? _b='OPIS'
:: aktualizuj definicję XML
|| exec('_wkol_xml','szablon')

|? _b='XML'
:: aktualizuj nadrzędną definicję lub definicję zestawu
|| exec('_wkol_xml_mod','szablon',SD_WKOL.SD_WKOL,SD_WKOL.SD_WREK)
?};
~~


\_wpar_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_WPAR,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','NAZWA','SYMBOL')"),
:: zweryfikuj symbolu standardowego lub użytkownika
   "exec('chk_symbol','#symsys',_a,_b,'SYSTEM','SYMBOL')",
:: dla typu innego niż złączenie wymagana jest długość pola
   "  {? _b.TYP=exec('type_reference','#field') || return(1) ?};
      _a.record(_b,,'DLUGOSC')
   ",
:: dla typu liczby rzeczywistej wymagana jest precyzja
   "  {? _b.TYP<>exec('type_real','#field') || return(1) ?};
      _a.record(_b,,'PRECYZJA')
   ",
:: sprawdź dozwolony zakres dla długości
:: ER/WRT/XP/23.25/2401/0032 Punkt czwarty świadectwa pracy nie mieści się na wydruku, decyzja ATA, 08.01.2024r.
   "  {? _b.DLUGOSC<0 | _b.DLUGOSC>100
      || {? exec('wyjatek_ER','szablon',_b) || return(1) ?};
         _a.err_fld(_b,'DLUGOSC',1);
         return(0)
      ?};
      1
   ",
:: sprawdź dozwolony zakres dla precyzji
   "  {? _b.PRECYZJA<0 | _b.PRECYZJA>10
      || _a.err_fld(_b,'PRECYZJA',1);
         return(0)
      ?};
      1
   ",
:: porównaj precyzję i długość
   "  {? _b.PRECYZJA<>0 & (_b.DLUGOSC-1)<=_b.PRECYZJA
      || _a.err_fld(_b,'PRECYZJA',1);
         return(0)
      ?};
      1
   ",
:: kontrola składni formuł
   "exec('_x_form_chk','szablon',_a,_b,'OKIENKO')"
)


\_wpar_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_WPAR.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_WPAR);
exec('_xpar_modb','szablon',SD_WPAR);

:: ustal numer
SD_WPAR.cntx_psh();
SD_WPAR.index('NUMER');
SD_WPAR.prefix(SD_WPAR.SD_WREK);
_numer:=SD_WPAR.size()+1;
SD_WPAR.cntx_pop();
SD_WPAR.NUMER:=_numer;

:: kontrola poprawności wiersza
exec('_wpar_chk','szablon',0)


\_wpar_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_WPAR.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_WPAR);
exec('_xpar_modb','szablon',SD_WPAR);

:: kontrola poprawności wiersza
exec('_wpar_chk','szablon',1)


\_wpar_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli SD_WPAR.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',SD_WFML,'NUMER',SD_WPAR.ref()) &
exec('del_ndx','#table',SD_MAP,'FK1',SD_WPAR.ref())


\_wrek_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(SD_WREK,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','NAZWA','SYMBOL','LISTA','GRUPA','TABELA')"),
:: zweryfikuj symbolu standardowego lub użytkownika
   "exec('chk_symbol','#symsys',_a,_b,'SYSTEM','SYMBOL')",
:: dozwolone wartości znacznika LISTA
   "exec('chk_yes_no','#symsys',_a,_b,'LISTA')",
:: dozwolone wartości znacznika GRUPA
   "exec('chk_yes_no','#symsys',_a,_b,'GRUPA')",
:: kontrola składni formuł
   "exec('_x_form_chk','szablon',_a,_b,'PROLOG','TABELA','EPILOG')"
)


\_wrek_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Aktualizuje zawartość pola notatnikowego XML w wierszu tabeli SD_WREK.
::   WE:
::   WY: wynik działania funkcji aktualizującej pole notatnikowe
::----------------------------------------------------------------------------------------------------------------------
_tag:=exec('rte_tag','szablon');
_nim:=%255;
_txt:=
   '%1<%2 %3="%4" %5="%6">\n'
   '%1\t<%7>%8</%7>\n'[
      _nim,_tag.item,
      _tag.text,xml_value(SD_WREK.NAZWA),
      _tag.expanded,'false',
      _tag.help,xml_value(SD_WREK.memo_txt(,1,'OPIS'))
   ];
SD_WKOL.cntx_psh();
SD_WKOL.prefix();
SD_WKOL.f_set('SYSTEM,NUMER',,'SD_WREK=:_a and SD_WKOL=0',SD_WREK.ref());
{? SD_WKOL.f_first()
|| {!
   |? _txt+=gsub(SD_WKOL.memo_txt(,1,'XML'),_nim,_nim+'\t');
      SD_WKOL.f_next()
   !}
?};
SD_WKOL.f_clear();
SD_WKOL.cntx_pop();
_txt+='%1</%2>\n'[_nim,_tag.item];

SD_WREK.memo_set(_txt,'XML');
SD_WREK.memo_put(,'XML')


\_wrek_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli SD_WREK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_WREK);

:: kontrola poprawności wiersza
exec('_wrek_chk','szablon',0)


\_wrek_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po dołączeniu wiersza tabeli SD_WREK.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};

:: aktualizuj pole notatnikowe xml
exec('_wrek_xml','szablon');
~~


\_wrek_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli SD_WREK.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie wartości domyślnych
exec('_x_modb','szablon',SD_WREK);

:: kontrola poprawności wiersza
exec('_wrek_chk','szablon',1)


\_wrek_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po poprawieniu wiersza tabeli SD_WREK.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};

:: aktualizuj pole notatnikowe xml
exec('_wrek_xml','szablon');
~~


\_wrek_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli SD_WREK.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',SD_BREK,'SYM_DOM',SD_WREK.ref()) &
exec('del_ndx','#table',SD_WKOL,'NUMER',SD_WREK.ref()) &
exec('del_ndx','#table',SD_WPAR,'NUMER',SD_WREK.ref()) &
exec('del_ndx','#table',SD_REK,'FK2',SD_WREK.ref()) &
exec('del_ndx','#table',SD_PROT,'UNIQ',SD_WREK.ref())


\_wrek_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po usunięciu wiersza tabeli SD_WREK.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};
~~


\_wrek_memo_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz po poprawieniu pola notatnikowego w wierszu tabeli SD_WREK.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::       _b STRING - akronim pola notatnikowego
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? _a=0 | do_state()<>1 || return() ?};

{? _b='XML'
|| _dok:=null;
   SD_DOK.cntx_psh();
   SD_DOK.prefix();
   SD_REK.cntx_psh();
   SD_REK.index('FK2');
   SD_REK.prefix(SD_WREK.ref());
   _loop:=SD_REK.first();
   {!
   |? _loop
   |! {? _dok<>SD_REK.SD_DOK
      || _dok:=SD_REK.SD_DOK;
         SD_REK.SD_DOK();
         exec('_dok_xml','szablon')
      ?};
      _loop:=SD_REK.next()
   !};
   SD_REK.cntx_pop();
   SD_DOK.cntx_pop()
?};
~~


\_uins_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli SD_UINS.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',SD_UPAR,'NAZWA',SD_UINS.ref())


\x_fml_sufix
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Dla podanego symbolu zwraca sufix używany w kodowaniu nazw formuł dla pól.
::   WE: _a [STRING] - symbol
::   WY: ciąg znaków
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_sym:=_a;

{? _sym='PATTERN'        || 'PT'
|? _sym='BLANK'          || 'BL'
|? _sym='BEFORE_DISPLAY' || 'BD'
|? _sym='BEFORE_EDIT'    || 'BE'
|? _sym='F3'             || 'F3'
|? _sym='AFTER_EDIT'     || 'AE'
|| ''
?}


\x_fml_symbol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Dla podanego sufixu używanego w kodowaniu nazw formuł dla pól zwraca symbol.
::   WE: _a [STRING] - sufix
::   WY: ciąg znaków
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_sfx:=_a;

{? _sfx='PT' || 'PATTERN'
|? _sfx='BL' || 'BLANK'
|? _sfx='BD' || 'BEFORE_DISPLAY'
|? _sfx='BE' || 'BEFORE_EDIT'
|? _sfx='F3' || 'F3'
|? _sfx='AE' || 'AFTER_EDIT'
|| 'UNKNOWN'
?}


\x_system_t
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza, czy wiersz jest zapisem systemowym, zablokowanym do edycji.
::   WE: _a TABLE - alias tabeli z kolumną SYSTEM
::   WY: 0/1 - można zmieniać dane/zapis nie może być modyfikowany
::----------------------------------------------------------------------------------------------------------------------
_a.SYSTEM='T'


\x_system_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza, czy wiersz nie jest zapisem systemowym, dostępnym do edycji.
::   WE: _a TABLE - alias tabeli z kolumną SYSTEM
::   WY: 0/1 - zapis nie może być modyfikowany/można zmieniać dane
::----------------------------------------------------------------------------------------------------------------------
_a.SYSTEM='N'


\x_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wzorzec edycji pola SYMBOL tabel SD_*. Dla definicji użytkownika symbol musi zaczynać się do litery 'Q'.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE: _a TABLE - alias tabeli z kolumnami SYSTEM i SYMBOL
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
{? exec('x_system_n','szablon',_a)
|| '\\QUu!'
|| ''
?}


\x_system_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją pola SYSTEM w wierszach tabel SD_*.
::   WE:
::   WY: 0/1 - pole zablokowane/dostępne
::----------------------------------------------------------------------------------------------------------------------
exec('runtime_dro','#system')


\x_system_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji pola SYSTEM w wierszach tabel SD_*.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

exec('mod_uid','#symsys',_TAB,'SYSTEM','KOD');

{? _TAB.KOD='' & exec('x_system_t','szablon',_TAB)
|| _TAB.KOD:=exec('x_kod_gen','szablon',_TAB)
?};

1


\x_system_ae_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji pola SYSTEM w wierszach tabel SD_* z obsługą pola GRUPA.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

exec('x_system_ae','szablon',_TAB);
{? exec('x_system_t','szablon',_TAB)
|| _TAB.GRUPA:='T'
?};

1


\x_kod_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wartość początkowa pola KOD w wierszach tabel SD_*.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
$SYSLOG.tm_stamp()


\x_kod_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją pola KOD w wierszach tabel SD_*.
::   WE:
::   WY: 0/1 - pole zablokowane/dostępne
::----------------------------------------------------------------------------------------------------------------------
exec('runtime_dro','#system')


\x_kod_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji pola KOD w wierszach tabel SD_*.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('runtime_dro','#system')
|| return(1)
?};

_TAB:=cur_tab(1,1);
{? _TAB.KOD='' | exec('x_system_n','szablon',_TAB)
|| return(1)
?};

:: rozłuż bieżący kod na części składowe
_def:=exec('x_kod_def','szablon',_TAB);
_sfx:=
   {? _def=''
   || _TAB.KOD
   || gsub(_TAB.KOD,_def,'')
   ?};
{? _sfx=''
|| return(1)
?};

{? (_TAB=SD_BDEF | _TAB=SD_BREK) & _TAB.B_DOMAIN=null
|| _TAB.B_DOMAIN:=exec('domain_ref','#b_domain',~-_sfx)

|? (_TAB=SD_WFML | _TAB=SD_FML) & _TAB.SD_XSLO=null
|| _typ:=exec('_xslo_fml','szablon_std');
   _sym:=exec('x_fml_symbol','szablon',_sfx);
   _TAB.SD_XSLO:=exec('xslo_find','szablon_std',_typ,_sym)

|? var_pres('SYMBOL',_TAB)=27 & _TAB.SYMBOL=''
|| _TAB.SYMBOL:=_sfx
?};

1


\x_kod_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa klawisza F3 pola KOD
::   WE:
::   WY: ~~/wygenerowany kod
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

{? exec('x_system_t','szablon',_TAB)
|| exec('x_kod_gen','szablon',_TAB)
|| ~~
?}


\x_kod_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Generuje początkową część kodu dla wiersza podanej tabeli.
::   WE: _a [TABLE] - alias tabeli, dla której ma być wygenerowany kod
::   WY: początkowa część kodu dla aktualizacji elementu
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

{? _TAB=SD_BDEF || '%1_'[SD_BDEF.SD_DEF().KOD]
|? _TAB=SD_BREK || '%1_'[SD_BREK.SD_WREK().KOD]
|? _TAB=SD_FML  || '%1_'[SD_FML.SD_PAR().KOD]
|? _TAB=SD_MAP  || '%1_'[SD_MAP.SD_PAR().KOD]
|? _TAB=SD_PAR  || '%1_'[SD_PAR.SD_DOK().KOD]
|? _TAB=SD_REK  || '%1_'[SD_REK.SD_DOK().KOD]
|? _TAB=SD_WFML || '%1_'[SD_WFML.SD_WPAR().KOD]
|? _TAB=SD_WKOL || '%1_'[SD_WKOL.SD_WREK().KOD]
|? _TAB=SD_WPAR || '%1_'[SD_WPAR.SD_WREK().KOD]
|| ''
?}


\x_kod_sfx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Generuje końcową część kodu dla wiersza podanej tabeli.
::   WE: _a [TABLE] - alias tabeli, dla której ma być wygenerowany kod
::   WY: końcowa część kodu dla aktualizacji elementu
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

{? _TAB=SD_BDEF || SD_BDEF.B_DOMAIN().SYMBOL
|? _TAB=SD_BREK || SD_BREK.B_DOMAIN().SYMBOL
|? _TAB=SD_DEF  || SD_DEF.SYMBOL
|? _TAB=SD_DOK  || SD_DOK.SYMBOL
|? _TAB=SD_FML  || exec('x_fml_sufix','szablon', SD_FML.SD_XSLO().SYMBOL)
|? _TAB=SD_MAP  ||
   _par:=exec('x_kod_def','szablon',SD_MAP);
   SD_MAP.cntx_psh();
   SD_MAP.index('KOD');
   SD_MAP.prefix();
   {! _cnt:=1
   |? SD_MAP.find_key('%1%2'[_par,$_cnt],)
   !};
   SD_MAP.cntx_pop();
   $_cnt
|? _TAB=SD_PAR  || SD_PAR.SYMBOL
|? _TAB=SD_REK  || SD_REK.SD_WREK().KOD
|? _TAB=SD_WFML || exec('x_fml_sufix','szablon', SD_WFML.SD_XSLO().SYMBOL)
|? _TAB=SD_WKOL || SD_WKOL.SYMBOL
|? _TAB=SD_WPAR || SD_WPAR.SYMBOL
|? _TAB=SD_WREK || SD_WREK.SYMBOL
|| ''
?}


\x_kod_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Generuje domyślny kod dla wiersza podanej tabeli.
::   WE: _a [TABLE] - alias tabeli, dla której ma być wygenerowany kod
::   WY: domyślny kod dla aktualizacji elementu
::----------------------------------------------------------------------------------------------------------------------
exec('x_kod_def','szablon',_a)+exec('x_kod_sfx','szablon',_a)


\x_x_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji pola uwzględnianego w kodzie w wierszach tabel SD_*.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

{? ~exec('runtime_dro','#system')
|| {? _TAB.KOD=''
::    nadaj unikalny kod
   || _TAB.KOD:=$_TAB.tm_stamp()
   ?}

|? (_TAB.KOD='' | _TAB.KOD+1='_') & exec('x_system_t','szablon',_TAB)
:: zasugeruj kod elementu na podstawie kontekstu
|| _TAB.KOD:=exec('x_kod_gen','szablon',_TAB)
?};

1


\x_x_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji danych tabel SD_*.
::   WE: _a [TABLE] - alias tabeli
::   WY: zgodna ze specyfikacją narzędzi dla akcji "rekord po"
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_pfx:=-spli_str(!_TAB,'_')[2];

:: zweryfikuj zgodność kodu
exec('x_ae_match','szablon',_TAB,
:: sprawdź poprawność podanych informacji
   exec('_%1_chk'[_pfx],'szablon',-menu_txt()='popraw')
)


\x_ae_match
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza zgodność kodu dla aktualizacji z jego domyślną wartości. W przypadku rozbieżności użytkownik jest
::       proszony o potwierdzenie zapisu wiersza.
::   WE: _a [TABLE] - alias tabeli, której wiersz będzie weryfikowany
::       _b [ANY] - wynik "twardej" weryfikacji
::   WY: 0/1 - wynik decyzji użytkownika
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_chk:=_b;

{? type_of(_chk)<>type_of(0) | _chk=0
:: wiersz nie jest poprawny
|| return(_chk)

|? exec('x_system_n','szablon',_TAB)
:: test nie dotyczy danych klienta
|| return(1)
?};

_def:=exec('x_kod_gen','szablon',_TAB);
{? _def=_TAB.KOD
|| return(1)
?};

{? ~FUN.ask(
      'Kod "%1" jest niezgodny z zalecanym "%2".\n\n'
      'Czy zapisać dane w obecnej postaci?\n\n'
      'UWAGA: Jeżeli dane zostały wyemitowane w poprzedniej wersji programu,\n'
      'to kodu nie należy zmieniać, ponieważ może wystąpić powielenie danych.'[
      _TAB.KOD,_def
   ])
|| return('KOD')
?};

1


\x_mk_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy i zapamiętuje okienko edycji tabeli zależnie od wersji narzędzi.
::   WE: _a [TABLE] - alias tabeli, dla której będzie tworzone okienko
::       _b [STRING] - akronim okienka podstawowego i jednocześnie identyfikatro okna
::       _c [STRING] - akronim okienka standaryzacji
::       _d [STRING] - tytuł tworzonego okienka
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_red:=_b;
_std:=_c;
_hdr:=
   {? var_pres('_d')<>type_of('')
   || _TAB.comment()
   || _d
   ?};

exec('__WND','object');
_cfg:=__WND.EDIT;
_acr:=_red;

{? exec('runtime_dro','#system')
|| {? (_acr:=_cfg.get(_TAB,_red))<>''
   || return(_acr)
   ?};
   _acr:=_TAB.mk_edit(_hdr,0,'#%1_%2'[-(2-!_TAB),-_red]);
   _TAB.win_ewin(_acr,,_std,'Dane wzorcowe'@,1);
   _TAB.win_esep(_acr);
   _TAB.win_ewin(_acr,,_red,,1);
   exec('ok_esc','#window',_TAB,_acr,,,,,,,exec('text_red_ok','#window'))
?};

_cfg.put(_TAB,_red,_acr);

_acr


\xpar_typ_xa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem i po edycji pola TYP wiersza tabel SD_WPAR i SD_PAR.
::   WE: _a [TABLE] - alias tabeli
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: mapa atgumentów
_TAB:=_a;

_ustaw:="_a.efld_opt('RED','enable=%1,mark=%1'[$_c],_a,_b)";

_ustaw(_TAB,'DLUGOSC',1);
_ustaw(_TAB,'PRECYZJA',0);

{? _TAB.TYP=exec('type_real','#field')
|| _ustaw(_TAB,'PRECYZJA',1)

|? _TAB.TYP=exec('type_reference','#field')
|| _ustaw(_TAB,'DLUGOSC',0)

?};

{? _TAB.DLUGOSC=0
|| _TAB.DLUGOSC:=exec('type_length','#field',_TAB.TYP)
?};
1


\xpar_dlugosc_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa klawisza F3 w polach wierszy tabel SD_PAR i SD_WPAR.
::   WE: _a [TABLE] - alias tabeli
::   WY: domyślna długość pola
::----------------------------------------------------------------------------------------------------------------------
_a.DLUGOSC:=exec('type_length','#field',_a.TYP);
~~


\xpar_cfg_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed sprawdzeniem poprawności wiersza tabel SD_PAR i SD_WPAR.
::   WE: _a [TABLE] - alias tabeli
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

_len:=exec('type_length','#field',_TAB.TYP);
{? (_TAB.TYP=exec('type_date','#field') | _TAB.TYP=exec('type_time','#field')) &
   _TAB.DLUGOSC<>_len &
   FUN.ask(
      'Sugerowana długość pola to %1 znaków.\n'
      'Czy ustawić proponowaną wartość?'@
      [$_len]
   )
|| _TAB.DLUGOSC:=_len;
   win_disp()
?};
~~


\bdef_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna WER tabeli SD_BDEF. Zależnie od definicji raportu udostępnia/blokuje akcje okna.
::       Dla definicji standardowej akcje modyfikujące dane są wyłączane.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okno
_wnd:=exec('x_mk_edit','szablon',SD_BDEF,'RED','DRO');
:: ustaw okienka tabeli
SD_BDEF.win_edit(_wnd);

_aid:='';
{? ~exec('is_editable','#symsys',SD_DEF,'SYSTEM')
:: zablokuj modyfikacje standardu
|| _aid:='DPU:D'
?};
SD_BDEF.actions_grayed('WER',_aid);

1


\bdef_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji wiersza tabeli SD_BDEF.
::   WE: _a [INTEGER] - tryb edycji 0/1 - dołączanie/poprawianie
::   WY: zgodna ze specyfikacją narzędzi dla akcji "rekord"
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','szablon',SD_BDEF)


\bdef_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli SD_BDEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('bdef_dolacz_a%1'[$exec('runtime_dro','#system')],'szablon')


\bdef_dolacz_a0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli SD_BDEF.
::       Docelowe działanie na wersji narzędzi klienta.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_dom:=null;

:: wybór dziedziny
B_DOMAIN.cntx_psh();
B_DOMAIN.prefix();
B_DOMAIN.f_set('SYMBOL',,
:: tylko nieprzypisane
   'REFERENCE not in ('
   '  select B_DOMAIN from SD_BDEF where SD_BDEF.SD_DEF=:_a'
   ')',
   exec('def_ref','szablon')
);
B_DOMAIN.f_first();
B_DOMAIN.win_sel('WYB');
{? B_DOMAIN.select(,1)
|| _dom:=B_DOMAIN.ref()
?};
B_DOMAIN.f_clear();
B_DOMAIN.cntx_pop();

{? _dom=null
:: rezygnacja
|| return()
?};

:: dodaj wybraną dziedzinę
SD_BDEF.blank();
SD_BDEF.B_DOMAIN:=_dom;
_chk:=exec('_bdef_chk','szablon',0);
{? type_of(_chk)=type_of(0) & _chk<>0
|| SD_BDEF.add()
?};
~~


\bdef_dolacz_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli SD_BDEF.
::       Działanie dla narzędzi przeznaczonych do użytku wewnętrznego DRO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SD_BDEF.blank();
{? SD_BDEF.edit("exec('bdef_ae','szablon',0)")
|| SD_BDEF.add()
?};
~~


\bdef_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli SD_BDEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('bdef_popraw_a%1'[$exec('runtime_dro','#system')],'szablon')


\bdef_popraw_a0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli SD_BDEF.
::       Docelowe działanie na wersji narzędzi klienta.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? SD_BDEF.get()=0
|| return()
?};
_dom:=SD_BDEF.B_DOMAIN;

:: wybór dziedziny
B_DOMAIN.cntx_psh();
B_DOMAIN.prefix();
B_DOMAIN.f_set('SYMBOL',,
:: nieprzypisane i bieżąca
   'REFERENCE not in ('
   '  select B_DOMAIN from SD_BDEF where SD_BDEF.SD_DEF=:_a'
   ') or '
   'REFERENCE=:_b',
   exec('def_ref','szablon'),_dom
);
B_DOMAIN.f_seek(_dom);
B_DOMAIN.win_sel('WYB');
{? B_DOMAIN.select(,1)
|| _dom:=B_DOMAIN.ref()
?};
B_DOMAIN.f_clear();
B_DOMAIN.cntx_pop();

{? _dom=null | _dom=SD_BDEF.B_DOMAIN
:: rezygnacja lub brak zmian
|| return()
?};

:: zamień dziedzinę na wybraną
SD_BDEF.B_DOMAIN:=_dom;
_chk:=exec('_bdef_chk','szablon',1);
{? type_of(_chk)=type_of(0) & _chk<>0
|| SD_BDEF.put()
?};
~~


\bdef_popraw_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli SD_BDEF.
::       Działanie dla narzędzi przeznaczonych do użytku wewnętrznego DRO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SD_BDEF.get();
{? SD_BDEF.edit("exec('bdef_ae','szablon',1)")
|| SD_BDEF.put()
?};
~~


\brek_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna WER tabeli SD_BREK. Zależnie od definicji zestawu udostępnia/blokuje akcje okna.
::       Dla definicji standardowej akcje modyfikujące dane są wyłączane.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okno
_wnd:=exec('x_mk_edit','szablon',SD_BREK,'RED','DRO');
:: ustaw okienka tabeli
SD_BREK.win_edit(_wnd);

_aid:='';
{? ~exec('is_editable','#symsys',SD_WREK,'SYSTEM')
:: zablokuj modyfikacje standardu
|| _aid:='DPU:D'
?};
SD_BREK.actions_grayed('WER',_aid);

1


\brek_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji wiersza tabeli SD_BREK.
::   WE: _a [INTEGER] - tryb edycji 0/1 - dołączanie/poprawianie
::   WY: zgodna ze specyfikacją narzędzi dla akcji "rekord"
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','szablon',SD_BREK)


\brek_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli SD_BREK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('brek_dolacz_a%1'[$exec('runtime_dro','#system')],'szablon')


\brek_dolacz_a0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli SD_BREK.
::       Docelowe działanie na wersji narzędzi klienta.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_dom:=null;

:: wybór dziedziny
B_DOMAIN.cntx_psh();
B_DOMAIN.prefix();
B_DOMAIN.f_set('SYMBOL',,
:: tylko nieprzypisane
   'REFERENCE not in ('
   '  select B_DOMAIN from SD_BREK where SD_BREK.SD_WREK=:_a'
   ')',
   exec('wrek_ref','szablon')
);
B_DOMAIN.f_first();
B_DOMAIN.win_sel('WYB');
{? B_DOMAIN.select(,1)
|| _dom:=B_DOMAIN.ref()
?};
B_DOMAIN.f_clear();
B_DOMAIN.cntx_pop();

{? _dom=null
:: rezygnacja
|| return()
?};

:: dodaj wybraną dziedzinę
SD_BREK.blank();
SD_BREK.B_DOMAIN:=_dom;
_chk:=exec('_brek_chk','szablon',0);
{? type_of(_chk)=type_of(0) & _chk<>0
|| SD_BREK.add()
?};
~~


\brek_dolacz_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli SD_BREK.
::       Działanie dla narzędzi przeznaczonych do użytku wewnętrznego DRO.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
SD_BREK.blank();
{? SD_BREK.edit("exec('brek_ae','szablon',0)")
|| SD_BREK.add()
?};
~~


\brek_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli SD_BREK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('brek_popraw_a%1'[$exec('runtime_dro','#system')],'szablon')


\brek_popraw_a0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli SD_BREK.
::       Docelowe działanie na wersji narzędzi klienta.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? SD_BREK.get()=0
|| return()
?};
_dom:=SD_BREK.B_DOMAIN;

:: wybór dziedziny
B_DOMAIN.cntx_psh();
B_DOMAIN.prefix();
B_DOMAIN.f_set('SYMBOL',,
:: nieprzypisane i bieżąca
   'REFERENCE not in ('
   '  select B_DOMAIN from SD_BREK where SD_BREK.SD_WREK=:_a'
   ') or '
   'REFERENCE=:_b',
   exec('wrek_ref','szablon'),_dom
);
B_DOMAIN.f_seek(_dom);
B_DOMAIN.win_sel('WYB');
{? B_DOMAIN.select(,1)
|| _dom:=B_DOMAIN.ref()
?};
B_DOMAIN.f_clear();
B_DOMAIN.cntx_pop();

{? _dom=null | _dom=SD_BREK.B_DOMAIN
:: rezygnacja lub brak zmian
|| return()
?};

:: zamień dziedzinę na wybraną
SD_BREK.B_DOMAIN:=_dom;
_chk:=exec('_brek_chk','szablon',1);
{? type_of(_chk)=type_of(0) & _chk<>0
|| SD_BREK.put()
?};
~~


\brek_popraw_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli SD_BREK.
::       Działanie dla narzędzi przeznaczonych do użytku wewnętrznego DRO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SD_BREK.get();
{? SD_BREK.edit("exec('brek_ae','szablon',1)")
|| SD_BREK.put()
?};
~~


\def_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca wskazanie na aktualny wiersz w tabeli SD_DEF.
::   WE:
::   WY: wskazanie na wiersz tabeli SD_DEF
::----------------------------------------------------------------------------------------------------------------------
SD_DEF.ref()


\def_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wzorzec edycji pola SYMBOL tabeli SD_DEF. Dla definicji użytkownika symbol musi zaczynać się do litery 'Q'.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE:
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
exec('x_symbol_pt','szablon',SD_DEF)


\def_symbol_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją SYMBOL tabeli SD_DEF. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_DEF,'SYSTEM')


\def_nazwa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją NAZWA tabeli SD_DEF. Blokuje możliwość zmiany nazwy raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_DEF,'SYSTEM')


\def_opis_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją OPIS tabeli SD_DEF. Blokuje możliwość zmiany opisu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_DEF,'SYSTEM')


\def_autor_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją AUTOR tabeli SD_DEF. Blokuje możliwość zmiany autora raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_DEF,'SYSTEM')


\def_grupa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją GRUPA tabeli SD_DEF. Blokuje możliwość zmiany dostępności raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('x_system_n','szablon',SD_DEF)


\def_dostepny_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją DOSTEPNY tabeli SD_DOK.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
1


\def_cfg_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna CFG tabeli SD_DEF.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
_wnd:=exec('x_mk_edit','szablon',SD_DEF,'RED','DRO');
:: ustaw okienka tabeli
SD_DEF.win_edit(_wnd);
SD_DEF.win_patt('WZO');

1


\def_cfg_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord przed" okienka CFG tabeli SD_DEF. Ustawienie dostępnych akcji.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
{? ~exec('is_editable','#symsys',SD_DEF,'SYSTEM')
|| _aid+='U'
?};
SD_DEF.actions_grayed('CFG',_aid);
~~


\def_cfg_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord po" okienka CFG tabeli SD_DEF. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _def_chk
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','szablon',SD_DEF)


\def_wykorzystanie_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa akcji "Wykorzystanie" okienka CFG tabeli SD_DEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_height:=15;
_mode:='maximized';
:: przygotuj okienko
_wnd:=SD_BDEF.grp_make('Wykorzystanie definicji'@,
:: przed otwarciem
   "  _def:=exec('def_ref','szablon');
      {? SD_DEF.GRUPA='T'
      || FIRMA.cntx_psh();
         FIRMA.index('SYMBOL2');
         FIRMA.prefix('S');
         FIRMA.actions('WYB','W',,1)
      || SD_FDEF.cntx_psh();
         SD_FDEF.index('SYM_FIR');
         SD_FDEF.prefix(_def)
      ?};
      SD_BDEF.cntx_psh();
      SD_BDEF.index('SYM_DOM');
      SD_BDEF.prefix(_def);
      1
   ",
:: identyfikator
   '#sd_bdef_fdef',,,
:: podczas zamykania
   "  {? SD_DEF.GRUPA='T'
      || FIRMA.cntx_pop();
         FIRMA.actions('WYB',,,1)
      || SD_FDEF.cntx_pop()
      ?};
      SD_BDEF.cntx_pop();
      1
   ",,
:: tryb
   'normal'
);
:: dziedziny i firmy przypisane do bieżącej definicji szablonów
{? SD_DEF.GRUPA='T'
|| SD_BDEF.grp_sel(_wnd,FIRMA,'WYB','Firmy'@,,,,_height,,,,,_mode)
|| SD_BDEF.grp_sel(_wnd,SD_FDEF,'WER','Firmy'@,,,,_height,,,,,_mode)
?};
SD_BDEF.grp_sel(_wnd,SD_BDEF,'WER','Dziedziny'@,,,,_height,,,,,_mode);

SD_BDEF.cntx_psh();
SD_BDEF.win_sel(_wnd);
SD_BDEF.select();
SD_BDEF.cntx_pop();
SD_BDEF.win_del(_wnd);
~~


\dok_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca wskazanie na aktualny wiersz w tabeli SD_DOK.
::   WE:
::   WY: wskazanie na wiersz tabeli SD_DOK
::----------------------------------------------------------------------------------------------------------------------
SD_DOK.ref()


\dok_jest_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza, czy dla bieżącego szablonu dostępne są inforacje o strukturze danych.
::   WE:
::   WY: 0/1 - wynik testu
::----------------------------------------------------------------------------------------------------------------------
{? SD_DOK.SD_DOK=0
|| SD_DOK.memo_txt(,1,'XML')<>''
|| SD_DOK.cntx_psh();
   SD_DOK.seek(SD_DOK.SD_DOK,,1);
   _ret:=exec('dok_jest_xml','szablon');
   SD_DOK.cntx_pop();
   _ret
?}


\dok_poz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Po edycji znacznika DOK_POZ zmiennej SD_POM.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
SD_DOK.SD_DOK:=0;
{? SD_POM.DOK_POZ='N'
|| SD_DOK.SD_DOK:=exec('dok_ref','szablon')
?};
1


\dok_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wzorzec edycji pola SYMBOL tabeli SD_DOK. Dla definicji użytkownika symbol musi zaczynać się do litery 'Q'.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE:
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
exec('x_symbol_pt','szablon',SD_DOK)


\dok_symbol_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją SYMBOL tabeli SD_DOK. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_DOK,'SYSTEM')


\dok_nazwa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją NAZWA tabeli SD_DOK. Blokuje możliwość zmiany nazwy raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_DOK,'SYSTEM')


\dok_opis_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją OPIS tabeli SD_DOK. Blokuje możliwość zmiany opisu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_DOK,'SYSTEM')


\dok_autor_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją AUTOR tabeli SD_DOK. Blokuje możliwość zmiany autora raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_DOK,'SYSTEM')


\dok_grupa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją GRUPA tabeli SD_DOK. Blokuje możliwość zmiany dostępności raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_editable','#symsys',SD_DOK,'SYSTEM')
|| SD_DOK.SD_DEF().GRUPA='T'
?}


\dok_dostepny_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją DOSTEPNY tabeli SD_DOK.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
1


\dok_docx_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją DOCX tabeli SD_DOK. Blokuje możliwość zmiany dostępności raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_DOK,'SYSTEM')


\dok_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem oknien tabeli SD_DOK.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
_dod:=exec('x_mk_edit','szablon',SD_DOK,'DOD','DRO');
_pop:=exec('x_mk_edit','szablon',SD_DOK,'POP','DRO');
:: ustaw okienka tabeli
SD_DOK.win_edit(_pop);
SD_DOK.win_patt('WZO');

_opt:='enable=%1'[$(SD_DEF.GRUPA='T')];
SD_DOK.efld_opt(_dod,_opt,,'GRUPA');
SD_DOK.efld_opt(_pop,_opt,,'GRUPA');

1


\dok_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed dołączeniem wiersza w okienkach tabeli SD_DOK.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
SD_DOK.win_edit(__WND.EDIT.get(SD_DOK,'DOD'));
SD_POM.DOK_POZ:='T';
1


\dok_wykorzystanie_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa akcji "Wykorzystanie" okienka CFG tabeli SD_DOK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? SD_DOK.GRUPA='T'
|| FIRMA.cntx_psh();
   FIRMA.index('SYMBOL2');
   FIRMA.prefix('S');
   FIRMA.win_sel('WYB');
   FIRMA.actions('WYB','W',,1);
   FIRMA.select();
   FIRMA.cntx_pop();
   FIRMA.actions('WYB',,,1)
|| SD_FDOK.cntx_psh();
   SD_FDOK.index('SYM_FIR');
   SD_FDOK.prefix(exec('dok_ref','szablon'));
   SD_FDOK.win_sel('WER');
   SD_FDOK.select();
   SD_FDOK.cntx_pop()
?};
~~


\dok_edytuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Udostępnia plik szablonu do edycji.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('rte_start','szablon');
~~


\dok_kopiuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Kopiowanie informacji powiązanych z szablonem dokumentów.
::   WE: _a _SD_DOK - wskazanie szablonu źródłowego
::       _b _SD_DOK - wskazanie szablonu docelowego
::   WY: 0/1/<0 - porażka/sukces/ostrzeżenie
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_src:=_a;
_dst:=_b;

_prolog:="
   SD_FDOK.cntx_psh();
   SD_FDOK.clear();
   SD_REK.cntx_psh();
   SD_REK.clear();
   SD_PAR.cntx_psh();
   SD_PAR.clear();
   SD_FML.cntx_psh();
   SD_FML.clear();
   SD_MAP.cntx_psh();
   SD_MAP.clear();
   ~~
";
_epilog:="
   SD_MAP.f_clear();
   SD_MAP.cntx_pop();
   SD_FML.f_clear();
   SD_FML.cntx_pop();
   SD_PAR.f_clear();
   SD_PAR.cntx_pop();
   SD_REK.f_clear();
   SD_REK.cntx_pop();
   SD_FDOK.f_clear();
   SD_FDOK.cntx_pop();
   ~~
";

_prolog();
:: wykorzystanie w firmach
SD_FDOK.f_set(,,'SD_DOK=:_a',_src);
_loop:=SD_FDOK.f_first();
{!
|? _loop
|! SD_FDOK.KOD:='';
   SD_FDOK.SD_DOK:=_dst;
   {? ~SD_FDOK.add()
   || _epilog();
      return(0)
   ?};
   _loop:=SD_FDOK.f_next()
!};

{? SD_DOK.SD_DOK<>0
:: szablon zależny
|| _epilog();
   return(1)
?};

_MAP:=tab_tmp(1,
   'ORG','STRING[16]','Parametr oryginalny'@,
   'NEW','STRING[16]','Utworzony parametr'@
);

:: wykorzystywane zestawy danych
SD_REK.f_set('NUMER',,'SD_DOK=:_a',_src);
_loop:=SD_REK.f_first();
{!
|? _loop
|! SD_REK.SYSTEM:='N';
   SD_REK.KOD:='';
   SD_REK.SD_DOK:=_dst;
   {? ~SD_REK.add()
   || _epilog();
      return(0)
   ?};
   _loop:=SD_REK.f_next()
!};

:: PR/WRT/XP/22.26/2304/0010
:: licznik formuł parametrów
_tfc:=0;
:: parametry szablonu
SD_PAR.f_set('NUMER',,'SD_DOK=:_a',_src);
_loop:=SD_PAR.f_first();
{!
|? _loop
|! SD_PAR.SYSTEM:='N';
   SD_PAR.KOD:='';
   SD_PAR.SD_DOK:=_dst;
   {? 1+SD_PAR.SYMBOL<>'Q'
   || SD_PAR.SYMBOL:='Q'+SD_PAR.SYMBOL
   ?};
   SD_PAR.memo_get(,'OKIENKO');
   {? ~SD_PAR.add() | ~SD_PAR.memo_put(,'OKIENKO')
   || _epilog();
      return(0)
   ?};
:: formuły parametru
   _new:=SD_PAR.ref();
   _MAP.NEW:=$_new;
   SD_PAR.f_get();
   _par:=SD_PAR.ref();
   _MAP.ORG:=$_par;
   _MAP.add();
   SD_FML.f_set(,,'SD_PAR=:_a',_par);
   _loop:=SD_FML.f_first();
   {!
   |? _loop
   |! SD_FML.SYSTEM:='N';
      SD_FML.KOD:='';
      SD_FML.SD_PAR:=_new;
      SD_FML.memo_get(,'TRESC');
      {? ~SD_FML.add() | ~SD_FML.memo_put(,'TRESC')
      || _epilog();
         return(0)
      ?};
      {? SD_FML.memo_txt(,1,'TRESC')<>''
      || _tfc+=1
      ?};
      _loop:=SD_FML.f_next()
   !};
   _loop:=SD_PAR.f_next()
!};

:: powiązania parametrów
SD_MAP.f_set(,,'SD_DOK=:_a',_src);
_loop:=SD_MAP.f_first();
{!
|? _loop
|! {? _MAP.find_key($SD_MAP.SD_PAR) & SD_PAR.seek(_MAP.NEW,,1)
   || SD_MAP.SYSTEM:='N';
      SD_MAP.KOD:='';
      SD_MAP.SD_DOK:=_dst;
      SD_MAP.SD_PAR:=SD_PAR.ref();
      {? ~SD_MAP.add()
      || _epilog();
         return(0)
      ?}
   || _epilog();
      return(0)
   ?};
   _loop:=SD_MAP.f_next()
!};

_epilog();
{? _tfc>0
|| -1
|| 1
?}


\dok_kopiuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Akcja "Kopiuj"  w oknach tabeli SD_DOK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_pth:='';
_doc:=SD_DOK.bl_info('DOCX','NAME');
_tmp_dir:=fmk_tmp_dir(0);

:: pobierz oryginalny plik szablonu
{? type_of(_tmp_dir)<>type_of(~~)
|| _pth:=_tmp_dir.get_path();
   _sep:=exec('sep','#file',2);
   _file:=_pth+_sep+_doc;
   {? ~(SD_DOK.bl_get('DOCX',_file,0))
   || FUN.emsg('Nie udało się pobranie załącznika po stronie serwera'@);
      return()
   ?}
|| FUN.emsg('Nie udało się utworzenie katalogu tymczasowego po stronie serwera.'@);
   return()
?};

_len:=80;
:: utwórz okienko kopii z ograniczonym zakresem danych
_wnd:=SD_DOK.mk_edit('Szablon dokumentu'@,0,'#sd_dok_kopiuj');
{? exec('runtime_dro','#system')
|| SD_DOK.win_ewin(_wnd,,'DRO')
?};
SD_DOK.win_esep(_wnd,'Dane podstawowe'@);
SD_DOK.win_efld(_wnd,SD_POM,'DOK_POZ',,,,,,,,MS.comment(SD_POM,'DOK_POZ'),'check-box',
   'left_label=1,check_label=%1'['Szablon niezależny od aktualnie wskazywanego'@],
   "'T'","'N'"
);
SD_DOK.win_efld(_wnd,,'NAZWA',,,_len,,,,,MS.comment(SD_DOK,'NAZWA'));
SD_DOK.win_efld(_wnd,,'SYMBOL',,,_len,,,,,MS.comment(SD_DOK,'SYMBOL'));
SD_DOK.win_efld(_wnd,,'OPIS',,,_len,-5,,,,MS.comment(SD_DOK,'OPIS'));
SD_DOK.win_efld(_wnd,,'AUTOR',,,_len,,,,,MS.comment(SD_DOK,'AUTOR'));
:: dodaj standardowe przyciski OK i Anuluj
exec('ok_esc','#window',SD_DOK,_wnd,,,,,,,exec('text_red_ok','#window'));
:: oznacz wymagane pola
SD_DOK.efld_opt(_wnd,'mark=1',,'NAZWA');
SD_DOK.efld_opt(_wnd,'mark=1',,'SYMBOL');

SD_DOK.cntx_psh();
_src:=SD_DOK.ref();
SD_DOK.SYSTEM:={? exec('runtime_dro','#system') || 'T' || 'N' ?};
SD_DOK.KOD:='';
SD_DOK.SYMBOL:='';
SD_DOK.memo_get(,'OPIS');
SD_DOK.bl_file('DOCX',1);
exec('_x_modb','szablon',SD_DOK);

_ref:=SD_DOK.ref();
SD_DOK.win_edit(_wnd);
{? SD_DOK.edit("exec('_dok_chk','szablon',1)")
|| _done:=0;
:: utwórz kopię oryginalnego szablonu
   _doc:='sd_%1.docx'[-SD_DOK.KOD];
   _dst:=_pth+_sep+_doc;
   {? ~fcopy(_file,_dst,0,0,1)
   || FUN.emsg('Nie udało się utworzenie kopii załącznika.'@);
      SD_DOK.cntx_pop();
      return()
   ?};
   do();
   {? SD_DOK.add() & SD_DOK.memo_put(,'OPIS') & SD_DOK.bl_put('DOCX',_dst,0,1,_doc)
   || _done:=exec('dok_kopiuj','szablon',_src,SD_DOK.ref());
      _ref:=SD_DOK.ref();
      {? _done=0
      || undo()
      ?}
   || undo()
   ?};
   end();
   {? _done=0
   || FUN.emsg('Utworzenie kopii szablonu nie powiodło się.'@)
   |? _done=-1
   || exec('fml_par_msg','szablon')
   ?}
?};

:: porządki
SD_DOK.cntx_pop();
SD_DOK.win_edel(_wnd);
:: usuń oryginalny plik
{? fexists(_pth)
|| ferase(_pth)
?};

SD_DOK.seek(_ref);
~~


\fml_par_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyświetla treść ostrzeżenia o potencjalnym wykorzystaniu parametrów w formułach.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
FUN.emsg(
   'Znaleziono formuły przypisane do parametrów szablonu.\n'
   'Należy zweryfikować treść formuł parametrów szablonu.'@
)


\dok_dane_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Konfiguracja źródeł danych szablonu.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_max_hi:=10;
_min_hi:=5;
_mode:='maximized_with_title';
:: przygotuj okienko
_wnd:=SD_REK.grp_make('Dane szablonu "%1"'@[SD_DOK.NAZWA],
:: przed otwarciem
   "  _dok:=exec('dok_ref','szablon');
      SD_REK.cntx_psh();
      SD_REK.index('NUMER');
      SD_REK.prefix(_dok);
      SD_PAR.cntx_psh();
      SD_PAR.index('NUMER');
      SD_PAR.prefix(_dok);
      1
   ",
:: identyfikator
   '#sd_dok_ref',,,
:: podczas zamykania
   "  SD_PAR.cntx_pop();
      SD_REK.cntx_pop();
      1
   ",,
:: tryb
   'html_maximized'
);
:: zestawy danych i ich parametry
SD_REK.grp_sel(_wnd,SD_REK,'CFG','Zestawy danych'@,
:: po odświeżeniu
   "grp_disp(SD_MAP,'SD_WREK',1,1)",,,
:: wysokość i tryb wyświetlania
   _max_hi,,,,,_mode
);
SD_REK.tab_splt(_wnd,,'horizontal','bottom');
SD_REK.grp_sel(_wnd,SD_MAP,'SD_WREK',,,,,
:: wysokość
   _min_hi,
:: przed obsługą
   "  {? grp_empty(SD_REK,'CFG')
      || return('#disable')
      ?};
      SD_MAP.index('NUMER');
      SD_MAP.prefix(SD_REK.SD_DOK,SD_REK.SD_WREK)
   ",,,,
:: tryb
   _mode
);
:: parametry szablonu i ich wykorzystanie
SD_REK.grp_sel(_wnd,SD_PAR,'CFG','Parametry wykonania'@,
:: po odświeżeniu
   "grp_disp(SD_MAP,'SD_WPAR',1,1)",,,
:: wysokość i tryb wyświetlania
   _max_hi,,,,,_mode
);
SD_REK.tab_splt(_wnd,,'horizontal','bottom');
SD_REK.grp_sel(_wnd,SD_MAP,'SD_WPAR',,,,,
:: wysokość
   _min_hi,
:: przed obsługą
   "  {? grp_empty(SD_PAR,'CFG')
      || return('#disable')
      ?};
      SD_MAP.index('NAZWA');
      SD_MAP.prefix(SD_PAR.ref())
   ",,,,
:: tryb
   _mode
);

SD_REK.actions_grayed('CFG');
SD_PAR.actions_grayed('CFG');

SD_REK.cntx_psh();
SD_REK.win_sel(_wnd);
SD_REK.select();
SD_REK.cntx_pop();
SD_REK.win_del(_wnd);
~~


\dok_pobierz_doc_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zapis zawartości DOCX do pliku lokalnego.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('bl_save','#blob',SD_DOK,'DOCX');
~~


\dok_pobierz_xml_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zapis zawartości XML do pliku lokalnego.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_file_pth:='';
_tmp_dir:=fmk_tmp_dir(0);
{? type_of(_tmp_dir)<>type_of(~~)
|| _pth:=_tmp_dir.get_path();
   {? _pth<>''
   || _date:=form(date()~1,-4,0,'9999')+form(date()~2,-2,0,'99')+form(date()~3,-2,0,'99');
      _name:=SD_DOK.SYMBOL+'_'+_date+'.xml';
      _sep:=exec('sep','#file',2);
      _file_pth:=_pth+_sep+_name
   ?}
|| FUN.emsg('Nie udało się utworzyć katalogu tymczasowego po stronie serwera.'@)
?};
{? _file_pth<>''
|| _xml:=SD_DOK.memo_txt(,1,'XML');
   _fh:=fopen(_file_pth,'Uw',0,0,1);
   {? _fh.is_open()
   || _res:=_fh.fwrite(SD_DOK.memo_txt(,1,'XML'));
      _fh.fclose();
      _interm:=exec('interm','#system');
      _save:=dlg_save(_file_pth,0,_name);
      {? _save<>'' & ~_interm
      || FUN.info('Definicja została zapisana w pliku "%1".'@[_save])
      ?}
   || FUN.emsg('Wystąpił błąd dostępu do pliku.'@)
   ?}
?};
~~


\dok_struktura_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Struktura" w okienku podglądu.
::   WE:
::   WY: wynik \x_struktura_a/szablon.fml
::----------------------------------------------------------------------------------------------------------------------
exec('x_struktura_a','szablon',SD_DOK,'XML','XML')


\dok_cfg_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord przed" okienka CFG tabeli SD_DOK. Ustawienie dostępnych akcji.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

:: ustaw domyślne okienko
SD_DOK.win_edit(__WND.EDIT.get(SD_DOK,'POP'));

_aid:=
   {? ~exec('is_editable','#symsys',SD_DOK,'SYSTEM') || 'U'
   |? SD_DOK.SD_DOK<>0 || 'A'
   || ''
   ?};
{? exec('dok_jest_xml','szablon')=0
|| _aid+='E'
?};

SD_DOK.actions_grayed('CFG',_aid);
~~


\dok_wer_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord przed" okienka WER tabeli SD_DOK. Ustawienie dostępnych akcji.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

:: ustaw domyślne okienko
SD_DOK.win_edit('POP');

_aid:='';
{? ~exec('is_editable','#symsys',SD_DOK,'SYSTEM')
:: blokada dla zapisu systemowego
|| _aid+='PUE'

|? SD_DOK.GRUPA<>'T'
|| SD_FDOK.cntx_psh();
   SD_FDOK.index('SYM_FIR');
   SD_FDOK.prefix(SD_DOK.ref());
   {? SD_FDOK.size()<>0 & ~SD_FDOK.find_tab(,'FIRMA',,'=',exec('ref_firma','#firma'))
::    blokada szablonu niedostępnego w bieżącej firmie
   || _aid+='PUE'
   ?};
   SD_FDOK.cntx_pop()
?};

{? exec('dok_jest_xml','szablon')=0
:: blokada edycji - brak źródel danych
|| _aid+='E'
?};

SD_DOK.actions_grayed('WER',_aid);
~~


\dok_cfg_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord po" okienka CFG tabeli SD_DOK. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _dok_chk
::----------------------------------------------------------------------------------------------------------------------
_chk:=exec('x_x_ra','szablon',SD_DOK);
{? type_of(_chk)<>type_of(0) | _chk=0
:: wiersz nie jest poprawny
|| return(_chk)
|| chk_rec('DOCX')
?}


\fdef_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna WER tabeli SD_FDEF. Zależnie od definicji raportu udostępnia/blokuje akcje okna.
::       Dla definicji dostępnej dla grupy akcje modyfikujące dane są wyłączane.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
SD_FDEF.win_edit('RED');

_aid:='';
{? SD_DEF.GRUPA='T'
:: zablokuj modyfikacje
|| _aid:='DPU:D'
?};
SD_FDEF.actions_grayed('WER',_aid);
1


\fdef_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli SD_FDEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_firma:=null;

:: wybór firmy
FIRMA.cntx_psh();
FIRMA.prefix();
FIRMA.f_set('SYMBOL',,
:: tylko nieprzypisane spółki
   'TYP=\'S\' and '
   'REFERENCE not in ('
   '  select FIRMA from SD_FDEF where SD_FDEF.SD_DEF=:_a'
   ')',
   exec('def_ref','szablon')
);
FIRMA.f_first();
FIRMA.win_sel('WYB');
{? FIRMA.select(,1)
|| _firma:=FIRMA.ref()
?};
FIRMA.f_clear();
FIRMA.cntx_pop();

{? _firma=null
:: rezygnacja
|| return()
?};

:: dodaj wybraną firmę
SD_FDEF.blank();
SD_FDEF.FIRMA:=_firma;
_chk:=exec('_fdef_chk','szablon',0);
{? type_of(_chk)=type_of(0) & _chk<>0
|| {? SD_FDEF.add()
   || SD_DOK.cntx_psh();
      SD_DOK.index('SYMBOL');
      SD_DOK.prefix(SD_FDEF.SD_DEF);
      {? SD_DOK.size()=0
      || SD_DOK.cntx_pop();
         return()
      ?};
      _todo:=FUN.choice(
         'Czy udostępnić szablony raportu "%1" dla firmy "%2"?'@[
            SD_FDEF.SD_DEF().NAZWA,SD_FDEF.FIRMA().SYMBOL
         ],1,'Tak, wszystkie'@,'Tylko &wybrane'@
      );
      SD_FDOK.cntx_psh();
      SD_FDOK.index('UNIQUE');
      SD_FDOK.prefix(_firma);
      {? _todo=1
::       wszystkie
      || _loop:=SD_DOK.first();
         {!
         |? _loop
         |! {? SD_FDOK.find_key(SD_DOK.ref())=0
            || SD_FDOK.blank(1);
               SD_FDOK.SD_DOK:=SD_DOK.ref();
               SD_FDOK.FIRMA:=_firma;
               SD_FDOK.add()
            ?};
            _loop:=SD_DOK.next()
         !}
      |? _todo=2
::       tylko wybrane
      || _DOK:=sql(
            'select REFERENCE as REF, \'T\' as USTAW '
            'from SD_DOK '
            'where SD_DOK.SD_DEF=:_a and SD_DOK.GRUPA=\'N\' '
            'order by REF',
            SD_FDEF.SD_DEF
         );
         params_set('DOK',_DOK);
         _wnd:=SD_DOK.mk_sel('Szablony dokumentu'@,'P',0,'#sd_dok_fdok',10,10,10,,'U');
         SD_DOK.win_fld(_wnd,_DOK,'USTAW',,,-3,,,'Ustaw'@,,'Szablon udostępniony [T/N]'@,
            2,,"'T'","'N'"
         );
         SD_DOK.win_fld(_wnd,,'NAZWA',,,,,,,,MS.comment(SD_DOK,'NAZWA'));
         SD_DOK.win_fld(_wnd,,'SYMBOL',,,,,,,,MS.comment(SD_DOK,'SYMBOL'));

         _act:='Ustaw'@;
         SD_DOK.win_act(_wnd,,'Formuła',_act,,'Udostępnij szablon'@,"
            _DOK:=params_get().DOK;
            _DOK.USTAW:='T';
            _DOK.put()
         ",,,1);
         SD_DOK.win_btn(_wnd,'text=%1,align=begin'[_act],'menu:U');

         _act:='Pomiń'@;
         SD_DOK.win_act(_wnd,,'Formuła',_act,,'Ukryj szablon'@,"
            _DOK:=params_get().DOK;
            _DOK.USTAW:='N';
            _DOK.put()
         ",,,1);
         SD_DOK.win_btn(_wnd,'text=%1,align=begin'[_act],'menu:P');

         _act:='Kontynuuj'@;
         SD_DOK.win_act(_wnd,,'Formuła',_act,,'Wprowadzenie zmian'@,"
            sel_exit()
         ");
         SD_DOK.win_btn(_wnd,'text=%1,panel=bottom'[_act],'menu:K');

         SD_DOK.win_act(_wnd,,'Rekord',,,,"
            _DOK:=params_get().DOK;
            _cnt:=_DOK.find_tab(,'USTAW',,'=','T');
            _DOK.find_key($SD_DOK.ref());
            {? _a<>0
            || _aid:='';
               _def:='';
               {? SD_DOK.sel_size()=0
               || _aid+={? _cnt=0 || 'D' || '' ?};
                  _aid+={? _DOK.USTAW='T' || 'U' || 'P' ?};
                  _def:={? _DOK.USTAW='T' || 'P' || 'U' ?}
               ?};
               _wnd:=cur_win(1,1);
               SD_DOK.actions(_wnd,,_def,1);
               SD_DOK.actions_grayed(_wnd,_aid)
            ?};
            ~~
         ");

         SD_DOK.cntx_psh();
         SD_DOK.prefix();
         SD_DOK.f_set('NAZWA',,'SD_DEF=:_a',SD_FDEF.SD_DEF);
         SD_DOK.win_sel(_wnd);
         SD_DOK.hdr_sel(' "%1" dla firmy "%2"'@[
            SD_FDEF.SD_DEF().NAZWA,SD_FDEF.FIRMA().SYMBOL
         ]);
         _done:=0;
         {!
         |? ~_done
         |! {? SD_DOK.select()
            || SD_DOK.f_clear();
               SD_DOK.prefix(SD_FDEF.SD_DEF);
               _loop:=SD_DOK.first();
               {!
               |? _loop
               |! {? SD_FDOK.find_key(SD_DOK.ref())=0 &
                     _DOK.find_key($SD_DOK.ref())<>0 &
                     _DOK.USTAW='T'
                  || SD_FDOK.blank(1);
                     SD_FDOK.SD_DOK:=SD_DOK.ref();
                     SD_FDOK.FIRMA:=_firma;
                     SD_FDOK.add()
                  ?};
                  _loop:=SD_DOK.next()
               !};
               _done:=1
            || _done:=FUN.ask('Czy pominąć udostępnianie szablonów dla firmy "%1"?'@[
                  SD_FDEF.FIRMA().SYMBOL
               ])
            ?}
         !};
         SD_DOK.f_clear();
         SD_DOK.cntx_pop();
         SD_DOK.win_del(_wnd)
      ?};
      SD_FDOK.cntx_pop();
      SD_DOK.cntx_pop()
   ?}
?};
~~


\fdef_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli SD_FDEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? SD_FDEF.get()=0
|| return()
?};
_firma:=SD_FDEF.FIRMA;

:: wybór firmy
FIRMA.cntx_psh();
FIRMA.prefix();
FIRMA.f_set('SYMBOL',,
:: nieprzypisane i bieżąca
   'TYP=\'S\' and '
   'REFERENCE not in ('
   '  select FIRMA from SD_FDEF where SD_FDEF.SD_DEF=:_a'
   ') or '
   'REFERENCE=:_b',
   exec('def_ref','szablon'),_firma
);
FIRMA.f_seek(_firma);
FIRMA.win_sel('WYB');
{? FIRMA.select(,1)
|| _firma:=FIRMA.ref()
?};
FIRMA.f_clear();
FIRMA.cntx_pop();

{? _firma=null | _firma=SD_FDEF.FIRMA
:: rezygnacja lub brak zmian
|| return()
?};

:: zamień firmę na wybraną
SD_FDEF.FIRMA:=_firma;
_chk:=exec('_fdef_chk','szablon',1);
{? type_of(_chk)=type_of(0) & _chk<>0
|| SD_FDEF.put()
?};
~~


\fdok_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna WER tabeli SD_FDOK. Zależnie od definicji szablonu udostępnia/blokuje akcje okna.
::       Dla definicji dostępnej dla grupy akcje modyfikujące dane są wyłączane.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
SD_FDOK.win_edit('RED');

_aid:='';
{? SD_DOK.GRUPA='T'
:: zablokuj modyfikacje
|| _aid:='DPU:D'
?};
SD_FDOK.actions_grayed('WER',_aid);
1


\fdok_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli SD_FDOK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_firma:=null;

:: wybór firmy
FIRMA.cntx_psh();
FIRMA.prefix();
FIRMA.f_set('SYMBOL',,
:: tylko nieprzypisane spółki
   'TYP=\'S\' and '+
   {? SD_DOK.SD_DEF().GRUPA='N'
   || 'REFERENCE in (select FIRMA from SD_FDEF where SD_FDEF.SD_DEF=:_a) and '
   || ''
   ?}+
   'REFERENCE not in (select FIRMA from SD_FDOK where SD_FDOK.SD_DOK=:_b)',
   SD_DOK.SD_DEF,exec('dok_ref','szablon')
);
FIRMA.f_first();
FIRMA.win_sel('WYB');
{? FIRMA.select(,1)
|| _firma:=FIRMA.ref()
?};
FIRMA.f_clear();
FIRMA.cntx_pop();

{? _firma=null
:: rezygnacja
|| return()
?};

:: dodaj wybraną firmę
SD_FDOK.blank();
SD_FDOK.FIRMA:=_firma;
_chk:=exec('_fdok_chk','szablon',0);
{? type_of(_chk)=type_of(0) & _chk<>0
|| SD_FDOK.add()
?};
~~


\fdok_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli SD_FDOK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? SD_FDOK.get()=0
|| return()
?};
_firma:=SD_FDOK.FIRMA;

:: wybór firmy
FIRMA.cntx_psh();
FIRMA.prefix();
FIRMA.f_set('SYMBOL',,
:: nieprzypisane i bieżąca
   'TYP=\'S\' and ('
   'REFERENCE in (select FIRMA from SD_FDEF where SD_FDEF.SD_DEF=:_a) and '
   'REFERENCE not in (select FIRMA from SD_FDOK where SD_FDOK.SD_DOK=:_b)) or '
   'REFERENCE=:_c',
   SD_DOK.SD_DEF,exec('dok_ref','szablon'),_firma
);
FIRMA.f_seek(_firma);
FIRMA.win_sel('WYB');
{? FIRMA.select(,1)
|| _firma:=FIRMA.ref()
?};
FIRMA.f_clear();
FIRMA.cntx_pop();

{? _firma=null | _firma=SD_FDOK.FIRMA
:: rezygnacja lub brak zmian
|| return()
?};

:: zamień firmę na wybraną
SD_FDOK.FIRMA:=_firma;
_chk:=exec('_fdok_chk','szablon',1);
{? type_of(_chk)=type_of(0) & _chk<>0
|| SD_FDOK.put()
?};
~~


\fml_cfg_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna CFG tabeli SD_FML.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: ograniczenie zakresu słownika uniwersalnego wartością początkową
SD_XSLO.fld_fml('RODZAJ','BLANK',"exec('_xslo_fml','szablon_std')");

:: zależnie od wersji narzędzi twórz lub użyj istniejące okno
_wnd:=exec('x_mk_edit','szablon',SD_FML,'RED','DRO');
:: ustaw okienka tabeli
SD_FML.win_edit(_wnd);
SD_FML.win_patt('RED');

_aid:='';
{? ~exec('is_editable','#symsys',SD_PAR,'SYSTEM')
|| _aid:='DPU:D'
?};
SD_FML.actions_grayed('CFG',_aid);

1


\fml_cfg_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord po" okienka CFG tabeli SD_FML. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _fml_chk
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','szablon',SD_FML)


\frek_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna WER tabeli SD_FREK. Zależnie od definicji zestawu udostępnia/blokuje akcje okna.
::       Dla definicji dostępnej dla grupy akcje modyfikujące dane są wyłączane.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
SD_FREK.win_edit('RED');

_aid:='';
{? SD_WREK.GRUPA='T'
:: zablokuj modyfikacje
|| _aid:='DPU:D'
?};
SD_FREK.actions_grayed('WER',_aid);
1


\frek_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli SD_FREK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_firma:=null;

:: wybór firmy
FIRMA.cntx_psh();
FIRMA.prefix();
FIRMA.f_set('SYMBOL',,
:: tylko nieprzypisane spółki
   'TYP=\'S\' and '
   'REFERENCE not in ('
   '  select FIRMA from SD_FREK where SD_FREK.SD_WREK=:_a'
   ')',
   exec('wrek_ref','szablon')
);
FIRMA.f_first();
FIRMA.win_sel('WYB');
{? FIRMA.select(,1)
|| _firma:=FIRMA.ref()
?};
FIRMA.f_clear();
FIRMA.cntx_pop();

{? _firma=null
:: rezygnacja
|| return()
?};

:: dodaj wybraną firmę
SD_FREK.blank();
SD_FREK.FIRMA:=_firma;
_chk:=exec('_frek_chk','szablon',0);
{? type_of(_chk)=type_of(0) & _chk<>0
|| SD_FREK.add()
?};
~~


\frek_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli SD_FREK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? SD_FREK.get()=0
|| return()
?};
_firma:=SD_FREK.FIRMA;

:: wybór firmy
FIRMA.cntx_psh();
FIRMA.prefix();
FIRMA.f_set('SYMBOL',,
:: nieprzypisane i bieżąca
   'TYP=\'S\' and '
   'REFERENCE not in ('
   '  select FIRMA from SD_FREK where SD_FREK.SD_WREK=:_a'
   ') or '
   'REFERENCE=:_b',
   exec('wrek_ref','szablon'),_firma
);
FIRMA.f_seek(_firma);
FIRMA.win_sel('WYB');
{? FIRMA.select(,1)
|| _firma:=FIRMA.ref()
?};
FIRMA.f_clear();
FIRMA.cntx_pop();

{? _firma=null | _firma=SD_FREK.FIRMA
:: rezygnacja lub brak zmian
|| return()
?};

:: zamień firmę na wybraną
SD_FREK.FIRMA:=_firma;
_chk:=exec('_frek_chk','szablon',1);
{? type_of(_chk)=type_of(0) & _chk<>0
|| SD_FREK.put()
?};
~~


\map_par_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec dla pola SD_PAR tabeli SD_MAP.
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
exec('map_wrek_filtruj','szablon',SD_MAP.SD_DOK,SD_MAP.SD_WPAR().TYP);
''


\map_wpar_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec dla pola SD_WPAR tabeli SD_MAP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('map_wpar_filtruj','szablon',SD_PAR.SD_DOK,SD_PAR.TYP);
''


\map_wpar_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna SD_WPAR tabeli SD_MAP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
SD_MAP.fld_fml('SD_PAR','BLANK',"exec('par_ref','szablon')");

:: zależnie od wersji narzędzi twórz lub użyj istniejące okno
_wnd:=exec('x_mk_edit','szablon',SD_MAP,'SD_WPAR','DRO');
:: ustaw okienka tabeli
SD_MAP.win_edit(_wnd);
SD_MAP.win_patt('SD_WPAR');
{? exec('runtime_dro','#system')
|| SD_WPAR.actions('WYB','W');
   SD_WPAR.win_dict('WYB')
?};

_aid:='';
{? ~exec('is_editable','#symsys',SD_PAR,'SYSTEM')
|| _aid:='DPU:D'
?};
SD_MAP.actions_grayed('SD_WPAR',_aid);

1


\map_wrek_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna SD_WREK tabeli SD_MAP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
SD_MAP.fld_fml('SD_PAR','BLANK',"*");

:: zależnie od wersji narzędzi twórz lub użyj istniejące okno
_wnd:=exec('x_mk_edit','szablon',SD_MAP,'SD_WREK','DRO');
:: ustaw okienka tabeli
SD_MAP.win_edit(_wnd);
SD_MAP.win_patt('SD_WREK');
{? exec('runtime_dro','#system')
|| SD_PAR.actions('WYB','W');
   SD_PAR.win_dict('WYB')
?};

_aid:='';
{? ~exec('is_editable','#symsys',SD_REK,'SYSTEM')
|| _aid:='P'
?};
SD_MAP.actions_grayed('SD_WREK',_aid);

1


\map_wx_wa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Po wyświetleniu okien tabeli SD_MAP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: odtwórz formuły pól z definicji
SD_MAP.fld_fml('SD_WPAR','BLANK',"*");
SD_MAP.fld_fml('SD_PAR','BLANK',"*");
SD_MAP.win_edit('');
SD_MAP.win_patt('');
SD_WPAR.f_clear();
1


\map_wpar_wybierz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wybór parametru (wiersza tabeli SD_WPAR) dla akcji "Dołącz" i "Popraw" okienka SD_WPAR tabeli SD_MAP.
::   WE: _a [_SD_DOK] - wskazanie wiersza tabeli SD_DOK
::       _b [STRING] - określenie typu parametru
::   WY: wskazanie wiersza tabeli SD_WPAR lub null
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_dok:=_a;
_typ:=_b;
_ref:=null;

SD_WPAR.cntx_psh();
exec('map_wpar_filtruj','szablon',_dok,_typ);
SD_WPAR.win_sel('WYB');
{? SD_WPAR.select(,1)
|| _ref:=SD_WPAR.ref()
?};
SD_WPAR.f_clear(1);
SD_WPAR.cntx_pop();

_ref


\map_wpar_filtruj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ogranicza dziedzinę tabeli SD_WPAR do wyboru podczas edycji wiersza tabeli SD_MAP.
::   WE: _a [_SD_DOK] - wskazanie wiersza tabeli SD_DOK
::       _b [STRING] - określenie typu parametru
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_dok:=_a;
_typ:=_b;

SD_WPAR.prefix();
SD_WPAR.f_set(
   'SYMBOL',,
   'SD_WPAR.SD_WREK in (select SD_REK.SD_WREK from SD_REK where SD_REK.SD_DOK=:_a) and '
   'SD_WPAR.TYP=\':_b\'',
   _dok,_typ
);
~~


\map_wpar_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Dedykowana akcja "Dołącz" okienka SD_WPAR tabeli SD_MAP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('map_wpar_dolacz_a%1'[$exec('runtime_dro','#system')],'szablon')


\map_wpar_dolacz_a0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku SD_WPAR tabeli SD_MAP.
::       Docelowe działanie na wersji narzędzi klienta.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ref:=exec('map_wpar_wybierz_a','szablon',SD_PAR.SD_DOK,SD_PAR.TYP);

{? _ref<>null
|| SD_MAP.blank();
   SD_MAP.SD_WPAR:=_ref;
   _chk:=exec('_map_chk','szablon',0);
   {? type_of(_chk)=type_of(0) & _chk<>0
   || SD_MAP.add()
   ?}
?};
~~


\map_wpar_dolacz_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku SD_WPAR tabeli SD_MAP.
::       Działanie dla narzędzi przeznaczonych do użytku wewnętrznego DRO.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
SD_MAP.blank();
{? SD_MAP.edit("exec('_map_chk','szablon',0)")
|| SD_MAP.add()
?};
~~


\map_wpar_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Dedykowana akcja "Popraw" okienka SD_WPAR tabeli SD_MAP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('map_wpar_popraw_a%1'[$exec('runtime_dro','#system')],'szablon')


\map_wpar_popraw_a0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku SD_WPAR tabeli SD_MAP.
::       Docelowe działanie na wersji narzędzi klienta.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ref:=exec('map_wpar_wybierz_a','szablon',SD_PAR.SD_DOK,SD_PAR.TYP);

{? _ref<>null
|| SD_MAP.SD_WPAR:=_ref;
   _chk:=exec('_map_chk','szablon',1);
   {? type_of(_chk)=type_of(0) & _chk<>0
   || SD_MAP.put()
   ?}
?};
~~


\map_wpar_popraw_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku SD_WPAR tabeli SD_MAP.
::       Działanie dla narzędzi przeznaczonych do użytku wewnętrznego DRO.
::   WE:
::   WY: wynik map_x_popraw_a1
::----------------------------------------------------------------------------------------------------------------------
exec('map_x_popraw_a1','szablon')


\map_wrek_filtruj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ogranicza dziedzinę tabeli SD_WPAR do wyboru podczas edycji wiersza tabeli SD_MAP.
::   WE: _a [_SD_DOK] - wskazanie wiersza tabeli SD_DOK
::       _b [STRING] - określenie typu parametru
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_dok:=_a;
_typ:=_b;

SD_PAR.prefix();
SD_PAR.f_set(
   'SYMBOL',,
   'SD_PAR.SD_DOK=:_a and SD_PAR.TYP=\':_b\'',
   _dok,_typ
);
~~


\map_wrek_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Dedykowana akcja "Popraw" okienka SD_WREK tabeli SD_MAP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('map_wpar_popraw_a%1'[$exec('runtime_dro','#system')],'szablon')


\map_wrek_popraw_a0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku SD_WREK tabeli SD_MAP.
::       Docelowe działanie na wersji narzędzi klienta.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;

SD_PAR.cntx_psh();
exec('map_wrek_filtruj','szablon',SD_MAP.SD_DOK,SD_MAP.SD_WPAR().TYP);
SD_PAR.win_sel('WYB');
{? SD_PAR.select(,1)
|| _ref:=SD_PAR.ref()
?};
SD_PAR.f_clear(1);
SD_PAR.cntx_pop();

{? _ref<>null
|| SD_MAP.SD_PAR:=_ref;
   _chk:=exec('_map_chk','szablon',1);
   {? type_of(_chk)=type_of(0) & _chk<>0
   || SD_MAP.put()
   ?}
?};
~~


\map_wrek_popraw_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku SD_WREK tabeli SD_MAP.
::       Działanie dla narzędzi przeznaczonych do użytku wewnętrznego DRO.
::   WE:
::   WY: wynik map_x_popraw_a1
::----------------------------------------------------------------------------------------------------------------------
exec('map_x_popraw_a1','szablon')


\map_x_popraw_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienkach tabeli SD_MAP.
::       Działanie dla narzędzi przeznaczonych do użytku wewnętrznego DRO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SD_MAP.get();
{? SD_MAP.edit()
|| SD_MAP.put()
?};
~~


\mapa_wartosci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy pseudo obiekt wykorzystywany do zapamiętywania wartości, coś na podobieństwo HashTable z kluczem
::       i wartością dowolnego typu.
::   WE:
::   WY: wskazanie obiektu
::----------------------------------------------------------------------------------------------------------------------
_def:=obj_new(
:: przyrost rozmiaru
   'delta',
:: tablica klucz-wartość
   'array',
:: indeks końca obszaru danych
   'tail',
:: przydzielenie miejsca na dane
   'alloc',

:: pobranie wartości
   'get',
:: zapisanie wartości
   'put'
);

_def.delta:=10;
_def.array:=obj_new(_def.delta);
_def.tail:=0;

:: zwiększenie rozmiaru tablicy
_def.alloc:="
   _len:=obj_len(.array);
   {? .tail<_len
   || return()
   ?};
   _new:=obj_new(_len+.delta);
   {! _ii:=1.._len
   |! _new[_ii]:=.array[_ii]
   !};
   obj_del(.array);
   .array:=_new;
   ~~
";

:: pobranie wartości
_def.get:="
   {! _ii:=1...tail
   |! {? .array[_ii].key=_a
      || return(.array[_ii].val)
      ?}
   !};
   ~~
";

:: zapisanie wartości
_def.put:="
   {? var_pres('_b')<=0
   || return()
   ?};
   _val:=.get(_a);
   {? type_of(_val)>0
   || return()
   ?};
   .alloc();
   .array[.tail+=1]:=obj_new('key','val');
   .array[.tail].key:=_a;
   .array[.tail].val:=_b;
   ~~
";

:: mapa
_def


\par_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca wskazanie na aktualny wiersz w tabeli SD_PAR.
::   WE:
::   WY: wskazanie na wiersz tabeli SD_PAR
::----------------------------------------------------------------------------------------------------------------------
SD_PAR.ref()


\par_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wzorzec edycji pola SYMBOL tabeli SD_PAR. Dla definicji użytkownika symbol musi zaczynać się do litery 'Q'.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE:
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
exec('x_symbol_pt','szablon',SD_PAR)


\par_typ_xa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem i po edycji pola TYP w wiersza tabeli SD_PAR.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('xpar_typ_xa','szablon',SD_PAR);
1


\par_dlugosc_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa klawisza F3 w polu wiersza tabeli SD_PAR.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('xpar_dlugosc_f3','szablon',SD_PAR)


\par_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna CFG tabeli SD_PAR.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi wybierz odpowiednie okienko
_wnd:={? exec('runtime_dro','#system') || 'DRO' || 'RED' ?};
:: ustaw okienka tabeli
SD_PAR.win_edit(_wnd);
SD_PAR.win_patt('WZO');

1


\par_formuly_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Formuły" okienka CFG tabeli SD_PAR.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnij zawartość słownika
exec('_xslo','szablon_std');

SD_FML.cntx_psh();
SD_FML.index('NUMER');
SD_FML.prefix(SD_PAR.ref());

SD_FML.win_sel('CFG');
SD_FML.select();

SD_FML.cntx_pop();
~~


\par_przesun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Formuła dla akcji "Przesuń > Wgórę / W dół" okienka CFG tabeli SD_PAR.
::   WE: _a INTEGER - kierunek przesuwania: 0 - w górę, 1 - w dół
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_dir:=_a;
_old:=SD_PAR.NUMER;
SD_PAR.cntx_psh();
SD_PAR.index('NUMER');
SD_PAR.prefix(exec('dok_ref','szablon'));
{? {? _dir=0 || SD_PAR.prev() || SD_PAR.next() ?}
|| _new:=SD_PAR.NUMER;
   SD_PAR.NUMER:=_old;
   {? SD_PAR.put()
   || SD_PAR.cntx_pop();
      SD_PAR.NUMER:=_new;
      SD_PAR.put();
      return()
   ?}
?};
SD_PAR.cntx_pop();
~~


\par_wdol_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Przesuń > W dół" okienka CFG tabeli SD_PAR.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('par_przesun','szablon',1)


\par_wgore_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Przesuń > W górę" okienka CFG tabeli SD_PAR.
::   WE:
::   WY: ~l
::----------------------------------------------------------------------------------------------------------------------
exec('par_przesun','szablon',0)


\par_cfg_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord przed" okienka CFG tabeli SD_PAR.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
{? ~exec('is_editable','#symsys',SD_PAR,'SYSTEM')
|| _aid+='PU'
?};
{? ~exec('is_editable','#symsys',SD_DOK,'SYSTEM')
|| _aid:='DR'+_aid+':D'
|| _ref:=SD_PAR.ref();
   SD_PAR.cntx_psh();
   SD_PAR.index('NUMER');
   SD_PAR.prefix(exec('dok_ref','szablon'));
   {? SD_PAR.first() & SD_PAR.ref()=_ref || _aid+='R(G)' ?};
   {? SD_PAR.last() & SD_PAR.ref()=_ref || _aid+='R(D)' ?};
   SD_PAR.cntx_pop()
?};

SD_PAR.actions_grayed('CFG',_aid);
~~


\par_cfg_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord po" okienka CFG tabeli SD_PAR. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _wrek_chk
::----------------------------------------------------------------------------------------------------------------------
exec('xpar_cfg_ra','szablon',SD_PAR);
exec('x_x_ra','szablon',SD_PAR)


\rek_xslo_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wzorzec edycji pola SD_XSLO tabeli SD_REK.
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
:: ograniczenie zakresu słownika uniwersalnego prefiksem
SD_XSLO.fld_fml('RODZAJ','BLANK',"exec('_xslo_rek','szablon_std')");
''


\rek_wrek_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec edycji pola SD_WREK tabeli SD_REK.
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
:: ograniczenie dostępnych do wyboru źródeł danych
SD_WREK.prefix();
SD_WREK.f_set(
   'NAZWA',,
   'SD_WREK.REFERENCE in ('
   '  select REK.SD_WREK as REF'
   '  from SD_BREK as REK, SD_BDEF as DEF'
   '  where DEF.SD_DEF=:_a and REK.B_DOMAIN=DEF.B_DOMAIN'
   ')',
   exec('def_ref','szablon')
);
''


\rek_cfg_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna CFG tabeli SD_REK.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('_xslo','szablon_std');

SD_WREK.cntx_psh();
SD_XSLO.cntx_psh();

:: zależnie od wersji narzędzi twórz lub użyj istniejące okno
_wnd:=exec('x_mk_edit','szablon',SD_REK,'RED','DRO');
:: ustaw okienka tabeli i słowników
SD_REK.win_edit(_wnd);
SD_REK.win_patt('WZO');
SD_WREK.win_dict('SLO');

1


\rek_cfg_wa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Po wyświetleniu okna CFG tabeli SD_DEF.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: porządki po zmianach wprowadzonych przez "okno przed"
SD_XSLO.fld_fml('RODZAJ','BLANK',"*");
SD_WREK.f_clear();
SD_WREK.cntx_pop();
SD_XSLO.cntx_pop();
1


\rek_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Po zasadniczej akcji "Dołącz" w okienku CFG tabeli SD_REK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: dołącz parametry zestawu do mapy parametrów dokumentu
exec('_map_fill','szablon',SD_REK.SD_DOK,SD_REK.SD_WREK);
~~


\rek_kopiuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Akcja "Kopiuj" okienka CFG tabeli SD_REK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: wybierz szablon, z którego mają być skopiowane zestawy danych:
:: - zgodny z definicją bieżącego szablonu
:: - niezależny od innych szablonów
:: - inny niż bieżący
_ref:=SD_DOK.ref();
_dok:=null;
SD_DOK.cntx_psh();
SD_DOK.clear();
SD_DOK.f_set('NAZWA',,'SD_DEF=:_a and SD_DOK=0 and REFERENCE<>:_b',SD_DOK.SD_DEF,_ref);
SD_DOK.win_sel('WYB');
{? SD_DOK.select()
|| _dok:=SD_DOK.ref()
?};
SD_DOK.f_clear();
SD_DOK.cntx_pop();
{? _dok=null
|| return()
?};

_rollback:="
   {? _a<>0
   || undo();
      end();
      FUN.emsg('Wystąpił błąd podczas kopiowania zestawów danych.'@)
   ?};
   _a<>0
";
_err:=0;
do();

SD_REK.cntx_psh();
SD_REK.clear();
SD_REK.index('UNIQUE');
:: zestawy szablonu źródłowego
SD_REK.f_set('NUMER',,'SD_DOK=:_a',_dok);
_loop:=SD_REK.f_first();
{!
|? _loop
|! {? ~SD_REK.find_key(_ref,SD_REK.SD_XSLO,SD_REK.SD_WREK)
::    dołącz zestaw do szablonu
   || SD_REK.SYSTEM:='N';
      SD_REK.KOD:='';
      SD_REK.SD_DOK:=_ref;
      SD_REK.NUMER:=0;
      {? ~SD_REK.add()
      || _err:=1
      ?}
   ?};
   _loop:=(~_err & SD_REK.f_next())
!};
SD_REK.f_clear();
SD_REK.cntx_pop();
{? _rollback(_err)
|| return()
?};

SD_MAP.cntx_psh();
SD_MAP.clear();
SD_MAP.index('UNIQUE');
SD_FML.cntx_psh();
SD_FML.clear();
SD_FML.index('UNIQUE');
SD_PAR.cntx_psh();
SD_PAR.clear();
SD_PAR.index('SYMBOL');
:: parametry szablonu źródłowego
SD_PAR.f_set('NUMER',,'SD_DOK=:_a',_dok);
_loop:=SD_PAR.f_first();
{!
|? _loop
|! _org_par:=SD_PAR.ref();
   {? ~SD_PAR.find_key(_ref,SD_PAR.SYMBOL,)
::    dołącz parametr do szablonu
   || SD_PAR.SYSTEM:='N';
      SD_PAR.KOD:='';
      SD_PAR.SD_DOK:=_ref;
      SD_PAR.SYMBOL:='Q'+SD_PAR.SYMBOL;
      {? SD_PAR.add()
      || _new_par:=SD_PAR.ref();
::       formuły parametru źródłowego
         SD_FML.f_set('SD_XSLO(NUMER)',,'SD_PAR=:_a',_org_par);
         _loop:=SD_FML.f_first();
         {!
         |? _loop
         |! {? ~SD_FML.find_key(SD_FML.SD_XSLO,_new_par)
::             dołącz formułę nowego parametru
            || SD_FML.memo_get(,'TRESC');
               SD_FML.SYSTEM:='N';
               SD_FML.KOD:='';
               SD_FML.SD_PAR:=_new_par;
               {? ~SD_FML.add() | ~SD_FML.memo_put(,'TRESC')
               || _err:=1
               ?}
            ?};
            _loop:=(~_err & SD_FML.f_next())
         !};
::       połączenia parametrów szablonu źródłowego
         SD_MAP.f_set('SD_WPAR(NUMER)',,'SD_PAR=:_a',_org_par);
         _loop:=(~_err & SD_MAP.f_first());
         {!
         |? _loop
         |! {? ~SD_MAP.find_key(_new_par,SD_MAP.SD_WPAR)
::             dołącz połączenie nowego parametru
            || SD_MAP.SYSTEM:='N';
               SD_MAP.KOD:='';
               SD_MAP.SD_PAR:=_new_par;
               {? ~SD_MAP.add()
               || _err:=1
               ?}
            ?};
            _loop:=(~_err & SD_MAP.f_next())
         !}
      || _err:=1
      ?}
   ?};
   _loop:=(~_err & SD_PAR.f_next())
!};
SD_PAR.f_clear();
SD_PAR.cntx_pop();
SD_FML.f_clear();
SD_FML.cntx_pop();
SD_MAP.f_clear();
SD_MAP.cntx_pop();

{? _rollback(_err)
|| return()
?};
end();
FUN.info('Zakończono kopiowanie zestawów danych.'@);
~~


\rek_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Po zasadniczej akcji "Popraw" w okienku CFG tabeli SD_REK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: dołącz parametry zestawu do mapy parametrów dokumentu
exec('_map_fill','szablon',SD_REK.SD_DOK,SD_REK.SD_WREK);
~~


\rek_przesun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Formuła dla akcji "Przesuń > Wgórę / W dół" okienka CFG tabeli SD_REK.
::   WE: _a INTEGER - kierunek przesuwania: 0 - w górę, 1 - w dół
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_dir:=_a;
_old:=SD_REK.NUMER;
SD_REK.cntx_psh();
SD_REK.index('XSLO_NUM');
SD_REK.prefix(exec('dok_ref','szablon'),SD_REK.SD_XSLO);
{? {? _dir=0 || SD_REK.prev() || SD_REK.next() ?}
|| _new:=SD_REK.NUMER;
   SD_REK.NUMER:=_old;
   {? SD_REK.put()
   || SD_REK.cntx_pop();
      SD_REK.NUMER:=_new;
      SD_REK.put();
      return()
   ?}
?};
SD_REK.cntx_pop();
~~


\rek_wdol_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Przesuń > W dół" okienka CFG tabeli SD_REK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('rek_przesun','szablon',1)


\rek_wgore_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Przesuń > W górę" okienka CFG tabeli SD_REK.
::   WE:
::   WY: ~l
::----------------------------------------------------------------------------------------------------------------------
exec('rek_przesun','szablon',0)


\rek_cfg_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord przed" okienka CFG tabeli SD_REK.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

:: ustal dostępność akcji dla szablonu
_aid:='';
{? ~exec('is_editable','#symsys',SD_REK,'SYSTEM')
|| _aid+='PU'
?};
{? ~exec('is_editable','#symsys',SD_DOK,'SYSTEM')
|| _aid:='D'+_aid+':D'
?};

SD_REK.actions_grayed('CFG',_aid);
~~


\rek_cfg_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord po" okienka CFG tabeli SD_WREK. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _wrek_chk
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','szablon',SD_REK)


\wfml_cfg_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna CFG tabeli SD_WFML.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: ograniczenie zakresu słownika uniwersalnego wartością początkową
SD_XSLO.fld_fml('RODZAJ','BLANK',"exec('_xslo_fml','szablon_std')");

:: zależnie od wersji narzędzi twórz lub użyj istniejące okno
_wnd:=exec('x_mk_edit','szablon',SD_WFML,'RED','DRO');
:: ustaw okienka tabeli
SD_WFML.win_edit(_wnd);
SD_WFML.win_patt('RED');

_aid:='';
{? ~exec('is_editable','#symsys',SD_WPAR,'SYSTEM')
|| _aid:='DPU:D'
?};
SD_WFML.actions_grayed('CFG',_aid);

1


\wfml_cfg_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord po" okienka CFG tabeli SD_WFML. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _wfml_chk
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','szablon',SD_WFML)


\wkol_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca wskazanie na aktualny wiersz w tabeli SD_WKOL.
::   WE:
::   WY: wskazanie na wiersz tabeli SD_WKOL
::----------------------------------------------------------------------------------------------------------------------
SD_WKOL.ref()


\wkol_poz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Po edycji znacznika DOK_POZ zmiennej SD_WKOL.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
SD_WKOL.SD_WKOL:=0;
{? SD_POM.WKOL_POZ='N'
|| SD_WKOL.SD_WKOL:=exec('wkol_ref','szablon')
?};
1


\wkol_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją SYMBOL tabeli SD_WKOL. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('x_symbol_pt','szablon',SD_WKOL)


\wkol_symbol_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją SYMBOL tabeli SD_WKOL. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_WKOL,'SYSTEM')


\wkol_nazwa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją NAZWA tabeli SD_WKOL. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_WKOL,'SYSTEM')


\wkol_opis_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją OPIS tabeli SD_WKOL. Blokuje możliwość zmiany opisu elementu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_WKOL,'SYSTEM')


\wkol_xslo_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wartość początkowa SD_XSLO tabeli SD_WKOL.
::   WE:
::   WY: wskazanie wiersza tabeli SD_XSLO
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
SD_XSLO.cntx_psh();
SD_XSLO.index('NUMER');
SD_XSLO.prefix(exec('_xslo_kol','szablon_std'),);
{? SD_XSLO.first()
|| _ref:=SD_XSLO.ref()
?};
SD_XSLO.cntx_pop();
_ref


\wkol_xslo_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją SD_XSLO tabeli SD_WKOL. Blokuje możliwość zmiany rodzaju zwracanej danej elementu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_WKOL,'SYSTEM')


\wkol_fml_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją FML tabeli SD_WKOL. Blokuje możliwość zmiany formuły elementu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_WKOL,'SYSTEM')


\wkol_cfg_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna CFG tabeli SD_WKOL.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: ograniczenie zakresu słownika uniwersalnego wartością początkową
SD_XSLO.fld_fml('RODZAJ','BLANK',"exec('_xslo_kol','szablon_std')");

:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
_dod:=exec('x_mk_edit','szablon',SD_WKOL,'DOD','DRO');
_pop:=exec('x_mk_edit','szablon',SD_WKOL,'POP','DRO');
:: ustaw okienka tabeli
SD_WKOL.win_edit(_dod);
SD_WKOL.win_patt('POP');

1


\wkol_cfg_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord przed" okienka CFG tabeli SD_WKOL. Ustawienie dostępnych akcji.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

:: ustaw domyślne okienko
SD_WKOL.win_edit('POP');

_aid:='';
{? ~exec('is_editable','#symsys',SD_WKOL,'SYSTEM')
|| _aid+='PU'
?};
_ref:=SD_WKOL.ref();
SD_WKOL.cntx_psh();
SD_WKOL.index('NUMER');
SD_WKOL.prefix(exec('wrek_ref','szablon'),SD_WKOL.SD_WKOL,SD_WKOL.SYSTEM);
{? SD_WKOL.first() & SD_WKOL.ref()=_ref || _aid+='R(G)' ?};
{? SD_WKOL.last() & SD_WKOL.ref()=_ref || _aid+='R(D)' ?};
SD_WKOL.cntx_pop();

SD_WKOL.actions_grayed('CFG',_aid);
~~


\wkol_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Dedykowane dołączanie wiersza w okienkach tabeli SD_WKOL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? SD_WKOL.size()<>0
|| SD_WKOL.win_edit(__WND.EDIT.get(SD_WKOL,'DOD'))
|| SD_WKOL.win_edit(__WND.EDIT.get(SD_WKOL,'POP'));
   SD_POM.WKOL_POZ:='N';
   SD_WKOL.SD_WKOL:=0
?};
{!
|? SD_WKOL.blank();
   SD_WKOL.memo_set('','OPIS');
   SD_WKOL.memo_set('','FML');
   SD_WKOL.edit("exec('_wkol_addb','szablon',0)")
|! {? SD_WKOL.add() & SD_WKOL.memo_put(,'OPIS') & SD_WKOL.memo_put(,'FML')
   || SD_POM.WKOL_POZ='N' & SD_WKOL.seek(SD_WKOL.SD_WKOL,)
   ?}
!};
SD_WKOL.win_edit('POP');
0


\wkol_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Dedykowane dołączanie wiersza w okienkach tabeli SD_WKOL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SD_WKOL.get();
SD_WKOL.memo_get(,'OPIS');
SD_WKOL.memo_get(,'FML');
SD_WKOL.win_edit(__WND.EDIT.get(SD_WKOL,'POP'));
{? SD_WKOL.edit("exec('_wkol_putb','szablon')")
|| SD_WKOL.put() & SD_WKOL.memo_put(,'OPIS') & SD_WKOL.memo_put(,'FML')
?};
SD_WKOL.win_edit('POP');
1


\wkol_przesun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Formuła dla akcji "Przesuń > Wgórę / W dół" okienka CFG tabeli SD_WKOL.
::   WE: _a INTEGER - kierunek przesuwania: 0 - w górę, 1 - w dół
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_dir:=_a;
_old:=SD_WKOL.NUMER;
SD_WKOL.cntx_psh();
SD_WKOL.index('NUMER');
SD_WKOL.prefix(exec('wrek_ref','szablon'),SD_WKOL.SD_WKOL,SD_WKOL.SYSTEM);
{? {? _dir=0 || SD_WKOL.prev() || SD_WKOL.next() ?}
|| _new:=SD_WKOL.NUMER;
   SD_WKOL.NUMER:=_old;
   SD_WKOL.memo_get(,'FML');
   {? SD_WKOL.put()
   || exec('_wkol_xml','szablon');
      SD_WKOL.cntx_pop();
      SD_WKOL.NUMER:=_new;
      SD_WKOL.memo_get(,'FML');
      {? SD_WKOL.put()
      || exec('_wkol_xml','szablon')
      ?};
      return()
   ?}
?};
SD_WKOL.cntx_pop();
~~


\wkol_wdol_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Przesuń > W dół" okienka CFG tabeli SD_WKOL.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('wkol_przesun','szablon',1)


\wkol_wgore_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Przesuń > W górę" okienka CFG tabeli SD_WKOL.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('wkol_przesun','szablon',0)


\wkol_struktura_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Struktura" w okienku podglądu.
::   WE:
::   WY: wynik \x_struktura_a/szablon.fml
::----------------------------------------------------------------------------------------------------------------------
exec('x_struktura_a','szablon',SD_WKOL,'XML','XML')


\wpar_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca wskazanie na aktualny wiersz w tabeli SD_WPAR.
::   WE:
::   WY: wskazanie na wiersz tabeli SD_WPAR
::----------------------------------------------------------------------------------------------------------------------
SD_WPAR.ref()


\wpar_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wzorzec edycji pola SYMBOL tabeli SD_WPAR. Dla definicji użytkownika symbol musi zaczynać się do litery 'Q'.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE:
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
exec('x_symbol_pt','szablon',SD_WPAR)


\wpar_typ_xa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem i po edycji pola TYP w wiersza tabeli SD_WPAR.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('xpar_typ_xa','szablon',SD_WPAR);
1


\wpar_dlugosc_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa klawisza F3 w polu wiersza tabeli SD_WPAR.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('xpar_dlugosc_f3','szablon',SD_WPAR)


\wpar_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okna CFG tabeli SD_WPAR.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi wybierz odpowiednie okienko
_wnd:={? exec('runtime_dro','#system') || 'DRO' || 'RED' ?};
:: ustaw okienka tabeli
SD_WPAR.win_edit(_wnd);
SD_WPAR.win_patt('WZO');

SD_WPAR.actions_grayed('CFG');

1


\wpar_formuly_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Formuły" okienka CFG tabeli SD_WPAR.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnij zawartość słownika
exec('_xslo','szablon_std');

SD_WFML.cntx_psh();
SD_WFML.index('NUMER');
SD_WFML.prefix(SD_WPAR.ref());

SD_WFML.win_sel('CFG');
SD_WFML.select();

SD_WFML.cntx_pop();
~~


\wpar_przesun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Formuła dla akcji "Przesuń > Wgórę / W dół" okienka CFG tabeli SD_WPAR.
::   WE: _a INTEGER - kierunek przesuwania: 0 - w górę, 1 - w dół
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_dir:=_a;
_old:=SD_WPAR.NUMER;
SD_WPAR.cntx_psh();
SD_WPAR.index('NUMER');
SD_WPAR.prefix(exec('wrek_ref','szablon'));
{? {? _dir=0 || SD_WPAR.prev() || SD_WPAR.next() ?}
|| _new:=SD_WPAR.NUMER;
   SD_WPAR.NUMER:=_old;
   {? SD_WPAR.put()
   || SD_WPAR.cntx_pop();
      SD_WPAR.NUMER:=_new;
      SD_WPAR.put();
      return()
   ?}
?};
SD_WPAR.cntx_pop();
~~


\wpar_wdol_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Przesuń > W dół" okienka CFG tabeli SD_WPAR.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('wpar_przesun','szablon',1)


\wpar_wgore_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Przesuń > W górę" okienka CFG tabeli SD_WPAR.
::   WE:
::   WY: ~l
::----------------------------------------------------------------------------------------------------------------------
exec('wpar_przesun','szablon',0)


\wpar_cfg_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord przed" okienka CFG tabeli SD_WPAR.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
{? ~exec('is_editable','#symsys',SD_WPAR,'SYSTEM')
|| _aid+='PU'
?};
{? ~exec('is_editable','#symsys',SD_WREK,'SYSTEM')
|| _aid:='DR'+_aid+':D'
|| _ref:=SD_WPAR.ref();
   SD_WPAR.cntx_psh();
   SD_WPAR.index('NUMER');
   SD_WPAR.prefix(exec('wrek_ref','szablon'));
   {? SD_WPAR.first() & SD_WPAR.ref()=_ref || _aid+='R(G)' ?};
   {? SD_WPAR.last() & SD_WPAR.ref()=_ref || _aid+='R(D)' ?};
   SD_WPAR.cntx_pop()
?};

SD_WPAR.actions_grayed('CFG',_aid);
~~


\wpar_cfg_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord po" okienka CFG tabeli SD_WPAR. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _wpar_chk
::----------------------------------------------------------------------------------------------------------------------
exec('xpar_cfg_ra','szablon',SD_WPAR);
exec('x_x_ra','szablon',SD_WPAR)


\wrek_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca wskazanie na aktualny wiersz w tabeli SD_WREK.
::   WE:
::   WY: wskazanie na wiersz tabeli SD_WREK
::----------------------------------------------------------------------------------------------------------------------
SD_WREK.ref()


\wrek_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wzorzec edycji pola SYMBOL tabeli SD_WREK. Dla definicji użytkownika symbol musi zaczynać się do litery 'Q'.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE:
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
exec('x_symbol_pt','szablon',SD_WREK)


\wrek_symbol_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją SYMBOL tabeli SD_DOK. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_WREK,'SYSTEM')


\wrek_nazwa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją NAZWA tabeli SD_DOK. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_WREK,'SYSTEM')


\wrek_tabela_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją TABELA tabeli SD_DOK. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_WREK,'SYSTEM')


\wrek_autor_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją AUTOR tabeli SD_DOK. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_WREK,'SYSTEM')


\wrek_grupa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją GRUPA tabeli SD_DOK. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('x_system_n','szablon',SD_WREK)


\wrek_opis_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed edycją OPIS tabeli SD_DOK. Blokuje możliwość zmiany symbolu raportu standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',SD_WREK,'SYSTEM')


\wrek_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przed wyświetleniem okien wertowania tabeli SD_WREK.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi wybierz odpowiednie okienko
_wnd:={? exec('runtime_dro','#system') || 'DRO' || 'RED' ?};
:: ustaw okienka tabeli
SD_WREK.win_edit(_wnd);
SD_WREK.win_patt('WZO');

1


\wrek_struktura_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Struktura" w okienku podglądu.
::   WE:
::   WY: wynik \x_struktura_a/szablon.fml
::----------------------------------------------------------------------------------------------------------------------
exec('x_struktura_a','szablon',SD_WREK,'XML','XML')


\wrek_cfg_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord przed" okienka CFG tabeli SD_WREK. Ustawienie dostępnych akcji.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
{? ~exec('is_editable','#symsys',SD_WREK,'SYSTEM')
:: chroń zapisy systemowe
|| _aid+='PU'
?};

_test:=1;
:: dostępność akcji "Testuj" muszą istnieć:
:: - dane zestawu
:: - parametry zestawu
SD_WKOL.cntx_psh();
SD_WKOL.index('NUMER');
SD_WKOL.prefix(SD_WREK.ref());
_test:=(SD_WKOL.size()<>0);
SD_WKOL.cntx_pop();
{? _test<>0
|| SD_WPAR.cntx_psh();
   SD_WPAR.index('NUMER');
   SD_WPAR.prefix(SD_WREK.ref());
   _test:=(SD_WPAR.size()<>0);
   SD_WPAR.cntx_pop()
?};
{? _test=0
|| _aid+='T'
?};

SD_WREK.actions_grayed('CFG',_aid);
~~


\wrek_cfg_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: "Rekord po" okienka CFG tabeli SD_WREK. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _wrek_chk
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','szablon',SD_WREK)


\wrek_testuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa akcji "Testuj" okienka CFG tabeli SD_WREK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=exec('parametry','szablon',SD_WREK.ref());
{? type_of(_arg)=type_of(~~)
:: błąd lub rezygnacja
|| return()
?};

_panic:="
:: mapa argumentów
   _par:=_a;
   _TAB:=_b;
:: wykonaj epilog
   ($SD_WREK.memo_txt(,1,'EPILOG'))(_par,_TAB);
   {? in_error()<>0
   || FUN.error('Wystąpił błąd w formule \"Epilog\".'@)
   ?};
   ~~
";

on_error(2);
:: wykonaj prolog, jeśli wystąpi błąd, to dalsze działanie nie ma sensu
($SD_WREK.memo_txt(,1,'PROLOG'))(_arg);
{? in_error()<>0
|| FUN.error(
      'Wystąpił błąd w formule "Prolog".\n'
      'Test zestawu zostanie przerwany.'@
   );
   return()
?};

:: pobierz tabelę, przy błędzie zakończ działanie
_RES:=($SD_WREK.memo_txt(,1,'TABELA'))(_arg);

{? in_error()<>0
:: błąd formuły
|| FUN.error(
      'Wystąpił błąd w formule "Tabela".\n'
      'Test zestawu zostanie przerwany.'@
   );
   _panic(_arg,_RES);
   on_error();
   return()

|? type_of(_RES)<100
:: dana błędnego typu
|| FUN.error(
      'Formuła "Tabela" zwróciła daną nieobsługiwanego typu\n'
      '(oczekiwany alias tabeli lub wskazanie obiektu).'@
   );
   _panic(_arg,_RES);
   on_error();
   return()

|| _TAB:=
      {? type_of(_RES)=type_of(SYSLOG)
::       tabela lub zmienna
      || {? _RES.name()=''
::          zmienna strukturalna
         || _TMP:=tab_tmp(1,'TXT','STRING[50]','Zwrócona wartość'@);
            _TMP.TXT:='Alias zmiennej strukturalnej.'@;
            _TMP.add();
            _TMP
         || _RES
         ?}

      |? type_of(_RES)>100
::       dana typu obiektowego
      || _TMP:=tab_tmp(1,'TXT','STRING[50]','Zwrócona wartość'@);
         _TMP.TXT:='Wskazanie danej typu obiektowego.'@;
         _TMP.add();
         _TMP
      ?};
   params_set('RES',_RES,'arg',_arg);
   _wnd:=_TAB.mk_sel(SD_WREK.NAZWA,'P',1,'#sd_wrek_test',,,,,'U');
:: dodaj akcję pozwalającą przetestować formuły na dane obiektów zestawu
   _TAB.win_act(_wnd,,'Formuła','Dane'@,,'Wyświetlenie danych wiersza'@,"
      _TAB:=cur_tab(1,1);
      _BUF:=tab_tmp(1,
         'NUMER','INTEGER',MS.name(SD_WKOL,'NUMER'),
         'NAZWA','STRING[%1]'[$MS.fld_len(SD_WKOL,'NAZWA')],MS.name(SD_WKOL,'NAZWA'),
         'SYMBOL','STRING[%1]'[$MS.fld_len(SD_WKOL,'SYMBOL')],MS.name(SD_WKOL,'SYMBOL'),
         'WARTOSC','STRING[255]','Wartość'@
      );
      _wnd:=_BUF.mk_sel(menu_txt(),,0,'#sd_wrek_dane');
      _BUF.win_fld(_wnd,,'NAZWA',,,60,,,,,MS.comment(SD_WKOL,'NAZWA'));
      _BUF.win_fld(_wnd,,'SYMBOL',,,20,,,,,MS.comment(SD_WKOL,'SYMBOL'));
      _BUF.win_fld(_wnd,,'WARTOSC',,,60,,,,,'Pobrana wartość'@);
      _BUF.win_sel(_wnd);
      _map:=exec('mapa_wartosci','szablon');
      _RES:=params_get().RES;
      _arg:=params_get().arg;
      _nms:=no_msg(1);
      SD_WKOL.cntx_psh();
      SD_WKOL.index('NUMER');
      SD_WKOL.prefix(SD_WREK.ref());
      _loop:=SD_WKOL.first();
      {! _ii:=1
      |? _loop
      |! _prn:=SD_WKOL.SD_WKOL;
         exec('parametry_wartosci','szablon',_RES,,_arg,_prn,_map);
         _BUF.blank();
         _BUF.NUMER:=_ii;
         _BUF.NAZWA:=SD_WKOL.NAZWA;
         _BUF.SYMBOL:=SD_WKOL.SYMBOL;
         on_error(2);
         _fml:=SD_WKOL.memo_txt(,1,'FML');
         _val:=($_fml)(_RES,_map.get(_prn),_arg);
         {? in_error()<>0
         || _BUF.WARTOSC:='Błąd formuły: %1'@[_fml]
         || _dtp:=type_of(_val);
            _BUF.WARTOSC:=
               {? _dtp=1 || $_val
               |? _dtp=2 || _val
               |? _dtp=4 || _val$4
               |? _dtp=5 || _val$3
               |? _dtp=7
               || {? _val=null
                  || 'Pseudo wartość null'@
                  || 'Wskazanie wiersza (%1)'@[$_val]
                  ?}
               |? _dtp>100
               || obj_del(_val);
                  '[obiekt]'@
               || 'Wartość błędnego typu'@
               ?}
         ?};
         _BUF.add();
         _loop:=SD_WKOL.next()
      !};
      SD_WKOL.cntx_pop();
      no_msg(_nms);
      on_error();

      _BUF.select();
      ~~
   ",,1);
   _TAB.cntx_psh();
   _TAB.win_sel(_wnd);
   _TAB.select(,1);
   _TAB.cntx_pop();
   _TAB.win_del(_wnd)
?};

:: wykonaj epilog
($SD_WREK.memo_txt(,1,'EPILOG'))(_arg,_TAB);
{? in_error()<>0
:: błąd formuły
|| FUN.error(
      'Wystąpił błąd w formule "Epilog".'@
   )
?};

:: porządki
on_error();
~~


\wrek_wykorzystanie_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa akcji "Wykorzystanie" okienka CFG tabeli SD_WREK.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_height:=15;
_mode:='maximized';
:: przygotuj okienko
_wnd:=SD_BREK.grp_make('Wykorzystanie zestawu'@,
:: przed otwarciem
   "  _rek:=exec('wrek_ref','szablon');
      {? SD_WREK.GRUPA='T'
      || FIRMA.cntx_psh();
         FIRMA.index('SYMBOL2');
         FIRMA.prefix('S');
         FIRMA.actions('WYB','W',,1)
      || SD_FREK.cntx_psh();
         SD_FREK.index('SYM_FIR');
         SD_FREK.prefix(_rek)
      ?};
      SD_BREK.cntx_psh();
      SD_BREK.index('SYM_DOM');
      SD_BREK.prefix(_rek);
      1
   ",
:: identyfikator
   '#sd_brek_frek',,,
:: podczas zamykania
   "  {? SD_WREK.GRUPA='T'
      || FIRMA.cntx_pop();
         FIRMA.actions('WYB',,,1)
      || SD_FREK.cntx_pop()
      ?};
      SD_BREK.cntx_pop();
      1
   ",,
:: tryb
   'normal'
);
:: dziedziny i firmy przypisane do bieżącej definicji szablonów
{? SD_WREK.GRUPA='T'
|| SD_BREK.grp_sel(_wnd,FIRMA,'WYB','Firmy'@,,,,_height,,,,,_mode)
|| SD_BREK.grp_sel(_wnd,SD_FREK,'WER','Firmy'@,,,,_height,,,,,_mode)
?};
SD_BREK.grp_sel(_wnd,SD_BREK,'WER','Dziedziny'@,,,,_height,,,,,_mode);

SD_BREK.cntx_psh();
SD_BREK.win_sel(_wnd);
SD_BREK.select();
SD_BREK.cntx_pop();
SD_BREK.win_del(_wnd);
~~


\uins_przelacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa akcji "Przełącz" okienka CFG tabeli SD_UINS.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
SD_UINS.STAN:={? SD_UINS.STAN='N' || 'T' || 'N' ?};
SD_UINS.put();
~~


\rte_tag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca tablicę nazwaną zawierającą znaczniki stosowane w pliku xml opisującym strukturę danych.
::   WE:
::   WY: wskazanie tablicy
::----------------------------------------------------------------------------------------------------------------------
_tag:=obj_new('item','text','help','data','expanded');
_val:=obj_ntab_names(_tag);
_len:=obj_len(_tag);
{! _ii:=1.._len
|! _tag[_ii]:=_val[_ii]
!};
_tag


\rte_start
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Uruchamia edytor szablonów dokumentów dla bieżącego wiersza w tabeli SD_DOK.
::   WE:
::   WY: ~~
:: ~OST: INTMPDIR, INFOPEN, INBLGET, INFCOPY, INBLPUT, INFERASE
::----------------------------------------------------------------------------------------------------------------------
{? exec('cli_functions','#system')=0
|| FUN.emsg(exec('indevice_nacc_msg','#system'));
   return()
?};
_app:='rteditor';
_jar:=_app+'.jar';
_cfg:=_app+'.xml';

_dir:=tmp_dir();
_tmp:=$SD_DOK.tm_stamp();
_xml:='%1\\%2.xml'[_dir,_tmp];
_doc:='%1\\%2.docx'[_dir,_tmp];

_fh:=fopen('@'+_xml,'Uw',0,0,1);
{? _fh.is_open()
|| SD_DOK.cntx_psh();
   {!
   |? SD_DOK.SD_DOK<>0
   |! SD_DOK.seek(SD_DOK.SD_DOK,)
   !};
   _fh.fwrite(SD_DOK.memo_txt(,1,'XML'));
   SD_DOK.cntx_pop();
   _fh.fclose()
|| FUN.error('Wystąpił błąd dostępu do pliku "%1".'@[_xml]);
   return()
?};
obj_del(_fh);

SD_DOK.bl_get('DOCX','@'+_doc);
_org:=SD_DOK.bl_info('DOCX','NAME');

:: suma kontrolana oryginalnego szablonu
_old:='';
_fh:=fopen('@'+_doc,'br',0,0,1);
{? _fh.is_open()
|| _old:=hash(_fh);
   _fh.fclose()
|| FUN.error('Wystąpił błąd dostępu do pliku "%1".'@[_doc]);
   return()
?};
obj_del(_fh);

:: uruchom edytor
exec('MBJAR','#object');
fcopy(_jar,'@!Tmp/'+_jar,1,0,1);
exec('rte_ustaw','szablon',_cfg,_xml,_doc);
MBJAR.JavaExec(tmp_dir(),1,'-jar',_jar);

:: suma kontrolana kopii szablonu
_new:='';
_fh:=fopen('@'+_doc,'br',0,0,1);
{? _fh.is_open()
|| _new:=hash(_fh);
   _fh.fclose()
|| FUN.error('Wystąpił błąd dostępu do pliku "%1".'@[_doc]);
   return()
?};
obj_del(_fh);

{? _old<>_new
:: zmieniono szablon
|| SD_DOK.bl_put('DOCX','@'+_doc,0,,_org)
?};

:: porządki
ferase('@'+_xml);
ferase('@'+_doc);
~~


\rte_ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przygotowuje konfigurację edytora szablonów.
::   WE: _a STRING - nazwa pliku z konfiguracją aplikacji
::       _b STRING - nazwa pliku z definicją drzewa
::       _c STRING - nazwa pliku z szablonem
::   WY: wartość zwracana przez metodę write obiektu klasy XML_T
:: ~OST: INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
{? exec('cli_functions','#system')=0
|| FUN.emsg(exec('indevice_nacc_msg','#system'));
:: zwracana jest wartość taka sama jak obiektu XML_T podczas próby zapisania w katalogu lokalnym
:: nastąpił błąd o komunikacie: 'Utworzenie pliku nie powiodło się.'
   return(-6)
?};
:: mapa argumentów
_conf:=_a;
_tree:=_b;
_docx:=_c;
_tdir:=tmp_dir();

:: wsparcie dla plików XML
exec('xml_t_decl','#xml_t');
_xml:=obj_new(@.CLASS.XML_T);

:: konfiguracja aplikacji
_e0:=_xml.addElement('path');
_xml.addElement('tree_file',_tree,_e0);
_xml.addElement('docx_file',_docx,_e0);

:: zapisz w lokalnym katalogu tymczasowym
_xml.write('@!Tmp/'+_conf)


\wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Umożliwia wybór szablonu danego raportu. Jeśli istnieje jeden szablon, to wybów jest automatyczny.
::   WE: _a STRING - symbol raportu
::       _b [STRING] - symbol szablonu
::   WY: wskazanie wybranego szablonu lub null
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | _a=''
|| return(null)
?};
:: mapa argumentów
_def:=_a;
_dok:='';
{? var_pres('_b')=type_of('') & _b<>''
|| _dok:=_b
?};

:: wynik
_ref:=null;

:: znajdź raport
SD_DEF.cntx_psh();
SD_DEF.index('SYMBOL');
SD_DEF.prefix();
{? ~SD_DEF.find_key(_def,)
:: brak raportu o podanym kodzie
|| FUN.emsg('Brak definicji szablonów %1.'@[_def]);
   SD_DEF.cntx_pop();
   return(_ref)
|? SD_DEF.DOSTEPNY<>'T'
:: definicja nie jest dostępna
|| FUN.emsg('Definicja szablonów %1 nie jest dostępna.'@[_def]);
   SD_DEF.cntx_pop();
   return(_ref)
?};

:: lista szablonów dostępnych w bieżącej firmie
_DOK:=sql(
   'select SD_DOK.SYMBOL as SYMBOL, SD_DOK.REFERENCE as REF '
   'from SD_DOK '
   'where SD_DOK.DOSTEPNY=\'T\' and SD_DOK.SD_DEF=:_a and SD_DOK.GRUPA=\'T\' '
   'union '
   'select SD_DOK.SYMBOL as SYMBOL, SD_FDOK.SD_DOK as REF '
   'from SD_FDOK join SD_DOK using (SD_FDOK.SD_DOK,SD_DOK.REFERENCE) '
   'where SD_DOK.DOSTEPNY=\'T\' and SD_DOK.SD_DEF=:_a and SD_FDOK.FIRMA=:_b and SD_DOK.GRUPA=\'N\' '
   'order by SYMBOL, REF',
   SD_DEF.ref(),exec('ref_firma','#firma')
);

SD_DOK.cntx_psh();
SD_DOK.prefix();

{? _dok<>''
:: konkretny szablon
|| {? _DOK.find_key(_dok,) & SD_DOK.seek(_DOK.REF)
   || _ref:=SD_DOK.ref()
   || FUN.emsg('Szablon "%1" raportu "%2" nie istnieje lub jest niedostępny.'@[_dok,_def])
   ?}

|| SD_DOK.f_set('NAZWA',,'SD_DOK.REFERENCE in (select :_a.REF from :_a)',_DOK);
:: wybór szablonu sp
   {? SD_DOK.f_size()=0
::    brak dostępnych szablonów
   || FUN.emsg('Brak dostępnych szablonów raportu %1.'@[_def])

   |? SD_DOK.f_size()>1
   || SD_DOK.win_sel('WYB');
      SD_DOK.hdr_sel(' "%1"'[SD_DEF.NAZWA]);
      {? SD_DOK.select()
::       wybrano szablon
      || _ref:=SD_DOK.ref()
      ?};
      SD_DOK.hdr_sel()

   |? SD_DOK.f_first()
::    wybór automatyczny
   || _ref:=SD_DOK.ref()
   ?};
   SD_DOK.f_clear()
?};

:: porządki
SD_DOK.cntx_pop();
SD_DEF.cntx_pop();

:: szablon
_ref


\parametry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyświetla okno edycji parametrów szablonu i tworzy tablicę nazwaną zawierającą podane wartości.
::   WE: _a _SD_WREK/_SD_DOK - wskazanie wiersza w tabeli SD_WREK lub SD_DOK
::       _b [OBJECT] - wskazanie tablicy nazwanej zawierającej dodatkowe parametry (patrz parametry_arg)
::   WY: wskazanie na tablicę nazwaną zawierającą wartości parametrów lub ~~ (np. w przypadku rezygnacji)
::----------------------------------------------------------------------------------------------------------------------
:: przekaż parametry wywołania
_params:=params_get();
params_set(_params);

:: mapa argumentów
_ref:=_a;
_ext:=
   {? var_pres('_b')<100
   || exec('parametry_arg','szablon')
   || _b
   ?};
_PAR:=~~;
_FML:=~~;

_SRC:=ref_tab(_ref);
_SRC.cntx_psh();
_SRC.prefix();
{? _SRC.seek(_ref)=0
:: to by było dziwne...
|| _SRC.cntx_pop();
   return()
?};

{? _SRC=SD_DOK
|| _PAR:=SD_PAR;
   _FML:=SD_FML

|? _SRC=SD_WREK
|| _PAR:=SD_WPAR;
   _FML:=SD_WFML

|| _SRC.cntx_pop();
   return()
?};

_TAB:=~~;
_arg:=~~;

_type:="
   {? _a=exec('type_string','#field') || 'STRING[%1]'[$_b]
   |? _a=exec('type_reference','#field') || 'STRING[16]'
   || _a
   ?}
";

:: przygotuj tablicę parametrów przekazywanych do formuły 'TABELA'
:: i tabelę tymczasową wykorzystywaną jako bufor edycji parametrów
_fields:='';
_mk_obj:='obj_new(';
_mk_buf:='tab_tmp(1';
_mk_fml:='~~';
_do_val:=0;
_pvalid:='__CHK.record(_a,0';
_do_dlg:=0;
:: obiekt ułatwiający edycję parametrów
_sd_buf_def:=
      '\'TABLE\',\'FIELD\',\'WINDOW\',\'ENABLE\',\'MARK\',\'myself\','
      '\'fld_acr\',\'get_value\',\'set_value\','
      '\'get_enable\',\'set_enable\',\'get_mark\',\'set_mark\','
      '\'efld_opt\'';
_sd_buf_set:='_a.myself:="return(.)"';

_PAR.cntx_psh();
_PAR.index('NUMER');
_PAR.prefix(_ref);
{? _PAR.first()=0
:: brak parametrów
|| _PAR.cntx_pop();
   _SRC.cntx_pop();
   return()
?};

:: konstruuj formuły tworzące bufor edycji parametrów
:: oraz tablicę zawierjąca wartości samych parametrów
_FML.cntx_psh();
_FML.index('NUMER');
_loop:=1;
{! _ii:=1
|? _loop
|!
:: kolumna bufora edycji
   _fl_acr:='FLD%1'[$_ii];
   _mk_buf+=',\'%1\',\'%2\',\'%3\''[
      _fl_acr,_type(_PAR.TYP,_PAR.DLUGOSC),_PAR.NAZWA
   ];
:: lista parametrów
   _fields+='\'%1\','[
      _PAR.SYMBOL
   ];
:: ułatwienie edycji
   _sd_buf_set+=';_a.FIELD.%1:=\'%2\''[
      _PAR.SYMBOL,_fl_acr
   ];

:: edycja i walidacja
   {? _PAR.WIDOCZNY='T'
::    okno edycji jest potrzebne
   || _do_dlg+=1
   |? _PAR.WYMAGANY='T'
::    kontrola parametrów nieuwzględnionych w okienku
   || _pvalid+=',\'%1\''[_fl_acr];
      _do_val+=1
   ?};

:: formuły obsługi parametru
   _FML.prefix(_PAR.ref());
   _loop:=_FML.first();
   {!
   |? _loop
   |! _mk_fml+=';_a.fld_fml(\'%1\',\'%2\',$\'%3\')'[
         _fl_acr,
         _FML.SD_XSLO().SYMBOL,
         '_par:=~~; '+
         '_buf:=~~; '+
         '_inp:=params_get(); '+
         '{? type_of(_inp)>100 & var_pres(\\\'params\\\',_inp)>100 '+
         '|| _par:=_inp.params '+
         '?};'+
         '{? type_of(_inp)>100 & var_pres(\\\'SD_BUFFER\\\',_inp)>100 '+
         '|| _buf:=_inp.SD_BUFFER '+
         '?};'+
         gsub(_FML.memo_txt(,1,'TRESC'),'\'','\\\'')
      ];
      _loop:=_FML.next()
   !};

   _loop:=_PAR.next()
!};
_FML.cntx_pop();

:: utwórz tablicę parametrów
_arg:=($('obj_new(%1)'[_fields-1]))();

:: utwórz bufor edycji
_BUF:=($(_mk_buf+')'))();
:: przypisz formuły obsługi pól
($_mk_fml)(_BUF);

:: utwórz i ustaw okno edycji
_wnd:='';
{? _do_dlg<>0
|| _wnd:=($(
      '_wnd:=_a.mk_edit(\'%1\',0,,,,\'html_maximized\');'
      '_a.win_esep(_wnd,\'%2\');'
      '_wnd'[
         {? _PAR=SD_WPAR || SD_WREK.NAZWA
         |? _PAR=SD_PAR || SD_DOK.NAZWA
         || 'Edytuj'@
         ?},
         'Parametry'@
      ]))(_BUF);
:: parametry dla formuły tworzącej pole edycji
   _wf_def:=obj_new(
::    utworzenie pola
      'TABELA','OKNO','POLE',
::    definicja pola w okienku
      'SYMBOL','NAZWA','OPIS','WYMAGANY',
      'TYP','DLUGOSC','PRECYZJA'
   );
   _wf_def.TABELA:=_BUF;
   _wf_def.OKNO:=_wnd;

   _loop:=_PAR.first();
   {! _ii:=1
   |? _loop
   |! _wf_def.POLE:='FLD%1'[$_ii];
      _wf_def.SYMBOL:=_PAR.SYMBOL;
      _wf_def.NAZWA:=_PAR.NAZWA;
      _wf_def.OPIS:=_PAR.memo_txt(,1,'OPIS');
      _wf_def.WYMAGANY:=_PAR.WYMAGANY;
      _wf_def.TYP:=_PAR.TYP;
      _wf_def.DLUGOSC:=_PAR.DLUGOSC;
      _wf_def.PRECYZJA:=_PAR.PRECYZJA;
      {? _PAR.WIDOCZNY='T'
      || _wf_fml:=_PAR.memo_txt(,1,'OKIENKO');
         {? form(_wf_fml)=''
::          utwórz pole automatycznie, zgodnie z definicją parametru
:: ER/WRT/XP/23.25/2401/0032 Punkt czwarty świadectwa pracy nie mieści się na wydruku, decyzja ATA, 08.01.2024r.
         || _wf_fml:='_a.TABELA.win_efld(_a.OKNO,,_a.POLE,,,'
              '{? _a.DLUGOSC>100 || 100 || _a.DLUGOSC ?},_a.PRECYZJA,,,,_a.OPIS)'
         ?};
         ($_wf_fml)(_wf_def);
         {? _PAR.WYMAGANY='T'
         || ($('_a.TABELA.efld_opt(_a.OKNO,\'mark=1\',,_a.POLE)'))(_wf_def)
         ?}
      ?};
      _sd_buf_set+=';_a.ENABLE.%1:=%2;_a.MARK.%1:=%3'[
         _PAR.SYMBOL,$(_PAR.WIDOCZNY='T'),$(_PAR.WYMAGANY='T')
      ];
      _loop:=_PAR.next()
   !};
:: dodaj przyciski poprzedzające
   _ext.btn_beg(_BUF,_wnd);
   {? (_ext.btn_alt+'')=''
::    dodaj standardowe przyciski
   || exec('ok_esc','#window',_BUF,_wnd)
   || _ext.btn_alt(_BUF,_wnd)
   ?};
:: dodaj przyciski na końcu
   _ext.btn_end(_BUF,_wnd);
   _BUF.win_edit(_wnd)
?};

:: utwórz "wspomagacza" edycji
_sd_buf:=($('obj_new(%1,%2)'[_sd_buf_def,_fields-1]))();
_sd_buf.TABLE:=_BUF;
_sd_buf.WINDOW:=_wnd;
_sd_buf.FIELD:=($('obj_new(%1)'[_fields-1]))();
_sd_buf.MARK:=($('obj_new(%1)'[_fields-1]))();
_sd_buf.ENABLE:=($('obj_new(%1)'[_fields-1]))();
($_sd_buf_set)(_sd_buf);
_sd_buf.fld_acr:="($('_a.FIELD.%1'[_a]))(.)";
_sd_buf.get_value:="($('.TABLE.%1'[.fld_acr(_a)]))()";
_sd_buf.set_value:="($('.TABLE.%1:=_a'[.fld_acr(_a)]))(_b)";
_sd_buf.get_enable:="($('.ENABLE.%1'[_a]))()";
_sd_buf.set_enable:="($('.ENABLE.%1:=_a;.efld_opt(\\\'%1\\\',_a,.get_mark(\\\'%1\\\'))'[_a]))(_b)";
_sd_buf.get_mark:="($('.MARK.%1'[_a]))()";
_sd_buf.set_mark:="($('.MARK.%1:=_a;.efld_opt(\\\'%1\\\',.get_enable(\\\'%1\\\'),_a)'[_a]))(_b)";
_sd_buf.efld_opt:="($('.TABLE.efld_opt(.WINDOW,\\\'enable=%1,mark=%2\\\'[$_b,$_c],,.fld_acr(_a))'))(_a,_b,_c)";

params_set(
   'params',_params,
   'SD_BUFFER',_sd_buf
);

_BUF.blank();
{? _do_val<>0 & (_chk:=($(_pvalid+')'))(_BUF))<>''
|| FUN.emsg(
      'Wartość parametru "%1" musi być określona.\n'
      'Przygotowanie raportu zostanie przerwane.'@
      [MS.name(_BUF,_chk)]
   );
   _PAR.cntx_pop();
   _SRC.cntx_pop();
   return()
?};

{? _do_dlg<>0
|| {? ~_BUF.edit("
         _buf:=params_get().SD_BUFFER;
         _len:=obj_len(_buf.MARK);
         {! _ii:=1.._len
         |! {? _buf.MARK[_ii]<>0
            || {? (_chk:=__CHK.record(cur_tab(1,1),,_buf.FIELD[_ii]))<>''
               || return(_chk)
               ?}
            ?}
         !};
         1
      ")
::    pobierz wartości parametrów
   || _PAR.cntx_pop();
      _SRC.cntx_pop();
      return()
   ?}
?};

:: przepisz wartości z bufora edycji do tablicy parametrów
_loop:=_PAR.first();
{! _ii:=1
|? _loop
|! {? _PAR.TYP<>exec('type_reference','#field')
   || _arg[_ii]:=_BUF[_ii]
   |? _BUF[_ii]<>''
::    niepuste wskazanie
   || _TAB:=ref_tab(_BUF[_ii]);
      {? type_of(_TAB)=type_of(SYSLOG)
      || {? _TAB.seek(_BUF[_ii],,1)
         || _arg[_ii]:=_TAB.ref()
         ?};
         obj_del(_TAB)
      || FUN.error(
            'Błędna wartość wskazania "%1" podana w parametrze "%2" (%3).'@[
               _BUF[_ii],_PAR.NAZWA,_PAR.SYMBOL
            ]
         );
         _PAR.cntx_pop();
         _SRC.cntx_pop();
         return()
      ?}
   || _arg[_ii]:=null
   ?};
   _loop:=_PAR.next()
!};
_PAR.cntx_pop();
_SRC.cntx_pop();
obj_del(_BUF);

:: parametry
_arg


\parametry_arg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy tablicę nazwaną zawierającą dodatkowe parametry dla formuły parametry.
::       Do formuł btn_beg, btn_alt btn_end przekazywane są argumenty:
::          _a TABLE - wskazanie tabeli edycji parametrów
::          _b STRING - akronim okienka edycji parametrów
::   WE:
::   WY: wskazanie tablicy nazwanej o strukturze:
::       btn_beg - formuła tworząca przyciski poprzedzające domyślne przyciski okna parametrów
::       btn_alt - formuła tworząca przyciski zastępujące domyślne przyciski okna parametrów
::       btn_end - formuła tworząca przyciski następujące po domyślnych przyciskach okna parametrów
::----------------------------------------------------------------------------------------------------------------------
_arg:=obj_new('btn_beg','btn_alt','btn_end');

_arg.btn_beg:="";
_arg.btn_alt:="";
_arg.btn_end:="";

_arg


\parametry_kopiuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Kopiuje warości parametrów z jednej tablicy do drugiej. Kopiowane parametry określa mapa parametrów szablonu.
::   WE: _a _SD_DOK - wskazanie wiersza w tabeli SD_DOK
::       _b _SD_WREK - wskazanie wiersza w tabeli SD_WREK
::       _c OBJECT - wskazanie docelowej tablicy parametrów (parametry zestawu)
::       _d OBJECT - wskazanie źródłowej tablicy parametrów (parametry szablonu)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_dok:=_a;
_ref:=_b;
_dst:=_c;
_src:=_d;

:: ustaw wartości zgodnie z mapą parametrów
SD_WPAR.cntx_psh();
SD_PAR.cntx_psh();
SD_MAP.cntx_psh();
SD_MAP.index('NUMER');
SD_MAP.prefix(_dok,_ref);
_loop:=SD_MAP.first();
{!
|? _loop
|! ($('_a.%1:=_b.%2'[SD_MAP.SD_WPAR().SYMBOL,SD_MAP.SD_PAR().SYMBOL]))(_dst,_src);
   _loop:=SD_MAP.next()
!};
SD_MAP.cntx_pop();
SD_PAR.cntx_pop();
SD_WPAR.cntx_pop();
~~


\parametry_utworz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy tablicę nazwaną parametrów zestawu danych lub szablonu.
::   WE: _a _SD_WREK/_SD_DOK - wskazanie wiersza w tabeli SD_WREK lub SD_DOK
::   WY: wskazanie na tablicę nazwaną zawierającą wartości parametrów lub ~~ (np. w przypadku rezygnacji)
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;

_SRC:=ref_tab(_ref);
_SRC.cntx_psh();
_SRC.prefix();
{? _SRC.seek(_ref)=0
:: to by było dziwne...
|| _SRC.cntx_pop();
   return()
?};

{? _SRC=SD_DOK
|| _PAR:=SD_PAR

|? _SRC=SD_WREK
|| _PAR:=SD_WPAR

|| _SRC.cntx_pop();
   return()
?};
_arg:=~~;

_type:="
   {? _a=exec('type_string','#field') || 'STRING[%1]'[$_b]
   |? _a=exec('type_reference','#field') || 'STRING[16]'
   || _a
   ?}
";
:: przygotuj tablicę parametrów
_mk_obj:='obj_new(';
_PAR.cntx_psh();
_PAR.index('NUMER');
_PAR.prefix(_ref);
_loop:=_test:=_PAR.first();
{! _ii:=1
|? _loop
|! _mk_obj+='\'%1\','[_PAR.SYMBOL];
   _loop:=_PAR.next()
!};
_PAR.cntx_pop();
_SRC.cntx_pop();

{? _test<>0
:: utwórz tablicę parametrów
|| _arg:=($(_mk_obj-1+')'))()
?};

:: parametry
_arg


\parametry_wartosci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Zwraca wartość wyliczoną dla elementu danego przez numer wiersza.
::   WE: _a TABLE - alias tabeli zwrócony przez źródło danych zestawu
::       _b ~~ - brak
::       _c OBJECT - wskazanie tablicy nazwanej parametrów zestawu
::       _d INTEGER - numer wiersza w tabeli SD_WKOL
::       _e OBJECT - mapa wartości obiektów zestawu
::   WY: cokolwiek
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_par:=_c;
_ref:=_d;
_map:=_e;

{? _ref=0
|| return()
?};

_val:=_map.get(_ref);
{? type_of(_val)>0
:: już wyliczono
|| return(_val)
?};

SD_WKOL.cntx_psh();
SD_WKOL.prefix();
{? SD_WKOL.seek(_ref,)
|| _prn:=SD_WKOL.SD_WKOL;
:: pobierz wartości parametrów z rekordu nadrzędnego
   exec('parametry_wartosci','szablon',_TAB,,_par,_prn,_map);

   on_error(2);
   _fml:=SD_WKOL.memo_txt(,1,'FML');
   _val:=($_fml)(_TAB,_map.get(_prn),_par);

   {? in_error()=0
::    zapamiętaj wyliczoną wartość
   || _map.put(#SD_WKOL.ref(),_val)

   || SD_WKOL.cntx_pop();
      return()
   ?}
?};
SD_WKOL.cntx_pop();

_val


\wypelnij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Przygotowuje dokument na podstawie szablonu.
::   WE: _a  STRING    - symbol raportu
::       _b  [STRING]  - symbol szablonu
::       _c  [INTEGER] - wyłączenie komunikatów (<>0), wpp. komunikaty będą wyświetlane
::       _d  [INTEGER] - sposób otwarcia produktu szablonu (domyślnie 3, argument metory Run obiektu _word)
::                       dla wartości <0 wykonywana jest metoda Create, w celu obsługi 0 do argumentu dodawane jest 1
::                       argument -4 to wywołanie Create(3), argument -1 to wywołanie Create(0)
::       _e  [OBJECT]  - wskazanie tablicy nazwanej zawierającej dodatkowe parametry (patrz wypelnij_arg)
::      [_f] [INTEGER] - czy przygotowanie dokumentu w inTerm ma wymagać inDevice? (0 - domyślnie / 1)
::      [_g] [INTEGER] - tryb wsadowy (0 - domyślnie / 1)
::   WY: wskazanie tablicy nazwanej o strukturze:
::       STATUS INTEGER - 0/1 błąd/sukces
::       INFO STRING - treść komunikatu
:: ~OST: INTMPDIR, INFCOPY
::----------------------------------------------------------------------------------------------------------------------

:: mapa argumentów
_def:=_a;
_dok:={? var_pres('_b')=type_of('') & _b<>'' || _b || ~~ ?};
_exe:={? var_pres('_d')=type_of(0) || _d || 3 ?};
_ext:=
   {? var_pres('_e')<100
   || exec('wypelnij_arg','szablon')
   || _e
   ?};
_inDevice:=(var_pres('_f')=type_of(0) & _f<>0);

_batchMode:=(var_pres('_g')=type_of(0) & _g<>0);


:: skrawek tworzący zwracany wynik
:: w przypadku wystąpienia błędu
_ret_val:="
   _ret:=obj_new('STATUS','INFO');
   _ret.STATUS:=_a;
   _ret.INFO:=_b;
   _ret
";
_out_val:=
   {? var_pres('_c')<>type_of(0) | _c=0
   || $("FUN.emsg(_b);"+_ret_val)
   || _ret_val
   ?};

_inTerm:=exec('interm','#system');

{? _inTerm & _inDevice & exec('cli_functions','#system')=0
|| FUN.emsg(exec('indevice_nacc_msg','#system'));
   return(_out_val(0,'Przerwano przygotowanie raportu.'@))
?};

:: przekaż parametry wywołania
params_set(params_get());

:: pobierz wskazanie szablonu dokumentu
{? (_ref:=exec('wybierz','szablon',_def,_dok))=null
|| return(_out_val(0,'Przerwano przygotowanie raportu.'@))
?};

:: pobierz kopię szablonu
SD_DOK.cntx_psh();
SD_DOK.prefix();
{? ~SD_DOK.seek(_ref)
:: tego nie można wykluczyć
|| SD_DOK.cntx_pop();
   return(_out_val(0,'Wiersz %1 tabeli %2 nie jest dostępny.'@[$_ref,'SD_DOK']))
?};

_pth:=0;

_sep:=exec('sep','#file',1);
_sepClient:=exec('sep','#file',0);

_tmpDirObj:=fmk_tmp_dir(0);
{? type_of(_tmpDirObj)<>type_of(~~)
|| _tmpDirServer:=_tmpDirObj.get_path();
   _dir:={? _inDevice
         || tmp_dir()
         || _tmpDirServer
         ?}
|| SD_DOK.cntx_pop();
   return(_out_val(0,'Nie udało się utworzyć katalogu tymczasowego po stronie serwera.'))
?};

_tmp:=$SD_DOK.tm_stamp();
_doc:='%1.docx'[_tmp];
_path:=_tmpDirServer+_sep+_doc;

{? SD_DOK.bl_get('DOCX',_path,_pth)=0
|| SD_DOK.cntx_pop();
   return(_out_val(0,'Nie udało się pobrać pliku "%1" do katalogu "%2".'@[_doc,_tmpDirServer]))
?};
{? _inTerm & _inDevice
:: Chwilowo wymagane jest obejście poprzez "nadmiarowe" kopiowanie dla inTerm
|| fcopy(_path,'@'+_dir+_sepClient+_doc,0,0,0)
?};

:: wypełnienie według danych "korzenia"
{!
|? SD_DOK.SD_DOK<>0
|! {? SD_DOK.seek(SD_DOK.SD_DOK,,1)
   || _ref:=SD_DOK.ref()
   || SD_DOK.cntx_pop();
      return(_out_val(0,'Wiersz %1 tabeli %2 nie jest dostępny.'@[$SD_DOK.SD_DOK,'SD_DOK']))
   ?}
!};

:: pobierz wartości parametrów raportu
_arg:=exec('parametry','szablon',_ref,_ext.parametry);
{? type_of(_arg)=type_of(~~)
:: błąd lub rezygnacja
|| SD_DOK.cntx_pop();
   return()
?};

:: przygotuj parser
exec('init','#word');
::_word:=obj_new(@.CLASS.WORD);
{? __develop
|| _word:=obj_new(@.Class.WORD)
|| _word:=obj_new(@.CLASS.WORD)
?};
:: pokazanie progress-a
::_word.showPrg:=1;


_word.SetProc('JSON');
_word.Template(_path,0,0);

:: pobierz identyfikatory
_IDS:=_word.GetIds('[',']');

:: usuń zbędne pliki
_word.DelFiles('',0);

{? type_of(_IDS)<>type_of(SYSLOG)
:: coś poszło bardzo nie tak
|| SD_DOK.cntx_pop();
   return(_out_val(0,'Analiza pliku "%1" nie powiodła się.'@[_doc]))
?};

:: mapa wartości parametrów
_map:=exec('mapa_wartosci','szablon');

:: pobierz wszystkie kolumny z zestawów
:: używanych przez szablon dokumentu
_TMP:=sql(
   'select '
   '  SD_WKOL.SD_WREK, '
   '  SD_WREK.LISTA, '
   '  SD_WKOL.REFERENCE as REF, '
   '  \'[\'||SD_WKOL.SYMBOL||\']\' as ID '
   'from '
   '  SD_WKOL join '
   '  SD_WREK using (SD_WKOL.SD_WREK,SD_WREK.REFERENCE) join '
   '  SD_REK using (SD_REK.SD_WREK,SD_WREK.REFERENCE) '
   'where SD_REK.SD_DOK=:_a',
   _ref
);
:: utwórz z kolumn zestawów listę kolumn
:: użytych w treści szablonu dokumentu
_KOL:=sql(
   'select '
   '  :_a.SD_WREK, :_a.LISTA, :_a.REF, :_a.ID, '
   '  :_b.TABLE_NR, :_b.ROW_NR, :_b.COL_NR , :_b.IN_TABLE '
   'from :_a, :_b '
   'where :_a.ID=:_b.ID '
   'order by SD_WREK, TABLE_NR, REF',
   _TMP,_IDS
);
:: utwórz listę użytych zestawów
_REK:=sql(
   'select distinct :_a.SD_WREK, :_a.LISTA, :_a.TABLE_NR, :_a.ROW_NR '
   'from :_a '
   'order by LISTA, TABLE_NR, SD_WREK',
   _KOL
);
obj_del(_TMP);

SD_WREK.cntx_psh();
SD_WREK.prefix();
SD_WKOL.cntx_psh();
SD_WKOL.prefix();

_epilog:="
   SD_WKOL.cntx_pop();
   SD_WREK.cntx_pop();
   SD_DOK.cntx_pop();
   ~~
";

_panic:="
:: mapa argumentów
   _par:=_a;
   _TAB:=_b;
   _err:=_c;
:: wykonaj epilog
   ($SD_WREK.memo_txt(,1,'EPILOG'))(_par,_TAB);
   {? in_error()<>0
   || _err(0,'Wystąpił błąd w formule \"%1\" zestawu %2.'@['Epilog'@,SD_WREK.SYMBOL])
   ?};
   ~~
";

:: jakikolwiek błąd kończy działanie
on_error(2);

:: sprawdzenie dostępności do danych
_stop:=exec('obj_ntab_set','#array',,'RET',1,'OPIS','');
_REK.prefix();
{? _REK.first()
|| {!
   |? {? var_pres('_stop')>0 || &_stop ?};
      _stop:=exec('prot_test_ochron','szablon',_REK.SD_WREK);
      _stop.RET & _REK.next()
   !}
?};
{? ~_stop.RET
|| _err:=_out_val(0,_stop.OPIS);
   _epilog();
   &_stop;
   return(_err)
|| &_stop
?};
:: zastąp wszystkie identyfikatory z zestawów danych,
:: które nie są traktowane jak tabele z wieloma wierszami
_REK.prefix('N');
_loop:=_REK.first();
{!
|? _loop
|! {? SD_WREK.seek(_REK.SD_WREK)=0
   || _err:=_out_val(0,'Wiersz %1 tabeli %2 nie jest dostępny.'@[_REK.SD_WREK,'SD_WREK']);
      _epilog();
      return(_err)
   ?};

:: utwórz i ustaw parametry dla zestawu danych
   {? var_pres('_par')>100
   || obj_del(_par)
   ?};
   _par:=exec('parametry_utworz','szablon',SD_WREK.ref());
   exec('parametry_kopiuj','szablon',_ref,SD_WREK.ref(),_par,_arg);

:: wykonaj prolog źródła danych
   ($SD_WREK.memo_txt(,1,'PROLOG'))(_par);
   {? in_error()<>0
   || _err:=_out_val(0,'Wystąpił błąd w formule "%1" zestawu %2.'@['Prolog'@,SD_WREK.SYMBOL]);
      _epilog();
      return(_err)
   ?};

:: pobierz tabelę wartości dla zestawu danych
   _TAB:=($SD_WREK.memo_txt(,1,'TABELA'))(_par);
   {? in_error()<>0
   || _err:=_out_val(0,'Wystąpił błąd w formule "%1" zestawu %2.'@['Tabela'@,SD_WREK.SYMBOL]);
      _panic(_par,_TAB,_out_val);
      _epilog();
      return(_err)
   |? type_of(_TAB)<100
   || _err:=_out_val(0,'Błędny typ danych zwrócony przez źródło zestawu %1.'@[SD_WREK.SYMBOL]);
      _panic(_par,_TAB,_out_val);
      _epilog();
      return(_err)
   ?};

:: zastąp wszystkie identyfikatory wartościami
   _KOL.prefix(_REK.SD_WREK);
   _loop:=_KOL.first();
   {!
   |? _loop
   |! {? SD_WKOL.seek(_KOL.REF)=0
      || _err:=_out_val(0,'Wiersz "%1" tabeli %2 nie jest dostępny.'@[_KOL.REF,'SD_WKOL']);
         _panic(_par,_TAB,_out_val);
         _epilog();
         return(_err)
      ?};

      _prn:=SD_WKOL.SD_WKOL;
::    pobierz wartości z kolumny nadrzędnej jako parametry
      exec('parametry_wartosci','szablon',_TAB,,_par,_prn,_map);

      _fml:=SD_WKOL.memo_txt(,1,'FML');
      _val:=($_fml)(_TAB,_map.get(_prn),_par);

      {? in_error()=0
      || _dtp:=type_of(_val);
         {? SD_WKOL.SD_XSLO().SYMBOL='OBRAZ'
::          wstaw obrazek z bazy danych
         || {? _dtp=type_of('')
::             odczytaj z danej kolumny
            || _acr:=spli_str(_val,'.');
               {? obj_len(_acr)<>2 |
                  var_pres(_acr[1])<>type_of(SYSLOG) |
                  var_pres(_acr[2],($_acr[1])(),'diff_blob')<>37
::                oczekiwany napis w formacie TABELA.KOLUMNA
::                kolumna tabeli musi być typu BLOBIMAGE
               || _err:=_out_val(0,'Formuła obiektu %1 nie zwróciła właściwego akronimu.'@[SD_WKOL.SYMBOL]);
                  _panic(_par,_TAB,_out_val);
                  _epilog();
                  return(_err)
               ?};
::             ustal nazwę i ścieżkę do pliku obrazka
               _pic:='%1.%2'[
                  ($'$%1.tm_stamp()'[_acr[1]])(),
                  ($'-%1.bl_info(_a,\'EXTENSION\')'[_acr[1]])(_acr[2])
               ];
               _path:=_tmpDirServer+_sep+_pic;
::             wyodrębnij plik obrazka z bazy danych
               {? ($_acr[1])().bl_get(_acr[2],_path,_pth)=0
               || _err:=_out_val(0,'Nie udało się pobrać pliku "%1" do katalogu "%2".'@[_pic,_tmpDirServer]);
                  _epilog();
                  return(_err)
               ?};
               {? _inTerm & _inDevice
               || fcopy(_path,'@'+_dir+_sepClient+_pic,0,0,0)
               ?};
               {? _KOL.IN_TABLE
               || _word.ReplaceImg(_KOL.ID,_path,'put',-1,-1,_KOL.TABLE_NR,_KOL.ROW_NR)
               || _word.ReplaceImg(_KOL.ID,_path,'put')
               ?};
               obj_del(_acr)

            |? _dtp=type_of(~~)
::             usuń obrazek "ramkę" z dokumentu
            || {? _KOL.IN_TABLE
               || _word.ReplaceImg(_KOL.ID,'','del',-1,-1,_KOL.TABLE_NR,_KOL.ROW_NR)
               || _word.ReplaceImg(_KOL.ID,'','del')
               ?}

            || _err:=_out_val(0,'Formuła obiektu %1 nie zwróciła napisu lub wartości pustej.'@[SD_WKOL.SYMBOL]);
               _panic(_par,_TAB,_out_val);
               _epilog();
               return(_err)
            ?}

         |? SD_WKOL.SD_XSLO().SYMBOL='WARTOSC'
::          zastąp identyfikator wartością
         || _txt:=
               {? _dtp=1 || $_val
               |? _dtp=2 || _val
               |? _dtp=4 || _val$4
               |? _dtp=5 || _val$3
               |? _dtp>100
               || obj_del(_val);
                  '[obiekt]'@
               || 'Wartość błędnego typu'@
               ?};
            _word.Replace(_KOL.ID,_txt)
         ?}

      || _err:=_out_val(0,'Wystąpił błąd w formule obiektu %1.'@[SD_WKOL.SYMBOL]);
         _panic(_par,_TAB,_out_val);
         _epilog();
         return(_err)
      ?};
      _loop:=_KOL.next()
   !};

:: wykonaj epilog źródła danych
   ($SD_WREK.memo_txt(,1,'EPILOG'))(_par,_TAB);
   {? in_error()<>0
   || _err:=_out_val(0,'Wystąpił błąd w formule "%1" zestawu %2.'@['Epilog'@,SD_WREK.SYMBOL]);
      _panic(_par,_TAB,_out_val);
      _epilog();
      return(_err)
   ?};
   obj_del(_TAB);

:: następny zestaw
   _loop:=_REK.next()
!};

:: przetwarzaj identyfikatory zestawów,
:: które są odpowiednikami tabel
_REK.prefix('T');
_loop:=_REK.first();
{!
|? _loop
|! {? SD_WREK.seek(_REK.SD_WREK)=0
   || _err:=_out_val(0,'Wiersz "%1" tabeli %2 nie jest dostępny.'@[_REK.SD_WREK,'SD_WREK']);
      _panic(_par,_TAB,_out_val);
      _epilog();
      return(_err)
   ?};

:: utwórz i ustaw parametry dla zestawu danych
   {? var_pres('_par')>100
   || obj_del(_par)
   ?};
   _par:=exec('parametry_utworz','szablon',SD_WREK.ref());
   exec('parametry_kopiuj','szablon',_ref,SD_WREK.ref(),_par,_arg);

:: wykonaj prolog źródła danych
   ($SD_WREK.memo_txt(,1,'PROLOG'))(_par);
   {? in_error()<>0
   || _err:=_out_val(0,'Wystąpił błąd w formule "%1" zestawu %2.'@['Prolog'@,SD_WREK.SYMBOL]);
      _panic(_par,_TAB,_out_val);
      _epilog();
      return(_err)
   ?};

:: pobierz tabelę wartości dla zestawu danych
   _TAB:=($SD_WREK.memo_txt(,1,'TABELA'))(_par);
   {? in_error()<>0
   || _err:=_out_val(0,'Wystąpił błąd w formule "%1" zestawu %2.'@['Tabela'@,SD_WREK.SYMBOL]);
      _panic(_par,_TAB,_out_val);
      _epilog();
      return(_err)
   |? type_of(_TAB)<>type_of(SYSLOG)
   || _err:=_out_val(0,'Błędny typ danych zwrócony przez źródło zestawu %1.'@[SD_WREK.SYMBOL]);
      _panic(_par,_TAB,_out_val);
      _epilog();
      return(_err)
   ?};

:: przetwarzaj wszystkie wiersze w dziedzinie tabeli źródła danych
   _loop:={? _TAB.f_active()<>0 || _TAB.f_first() || _TAB.first() ?};
   {? _loop=0
::    brak danych, usuń wszystkie identyfikatory
   || _KOL.prefix(_REK.SD_WREK,_REK.TABLE_NR);
      _loop:=_KOL.first();
      {!
      |? _loop
      |! _word.Replace(_KOL.ID,'');
         _loop:=_KOL.next()
      !}
   ?};
   {! _row:=_REK.ROW_NR
   |? _loop
   |!
::    zastąp wszystkie identyfikatory wartościami
      _KOL.prefix(_REK.SD_WREK,_REK.TABLE_NR);
      _loop:=_KOL.first();
      {!
      |? _loop
      |! {? SD_WKOL.seek(_KOL.REF)=0
         || _err:=_out_val(0,'Wiersz "%1" tabeli %2 nie jest dostępny.'@[_KOL.REF,'SD_WKOL']);
            _panic(_par,_TAB,_out_val);
            _epilog();
            return(_err)
         ?};

         _prn:=SD_WKOL.SD_WKOL;
::       pobierz wartości z kolumny nadrzędnej jako parametry
         exec('parametry_wartosci','szablon',_TAB,,_par,_prn,_map);

         _fml:=SD_WKOL.memo_txt(,1,'FML');
         _val:=($_fml)(_TAB,_map.get(_prn),_par);

         {? in_error()=0
         || _dtp:=type_of(_val);
            {? SD_WKOL.SD_XSLO().SYMBOL='OBRAZ'
::             wstaw obrazek z bazy danych
            || {? _dtp=type_of('')
::                odczytaj z danej kolumny
               || _acr:=spli_str(_val,'.');
                  {? obj_len(_acr)<>2 |
                     var_pres(_acr[1])<>type_of(SYSLOG) |
                     var_pres(_acr[2],($_acr[1])(),'diff_blob')<>37
::                   oczekiwany napis w formacie TABELA.KOLUMNA
::                   kolumna tabeli musi być typu BLOBIMAGE
                  || _err:=_out_val(0,'Formuła obiektu %1 nie zwróciła właściwego akronimu.'@[SD_WKOL.SYMBOL]);
                     _panic(_par,_TAB,_out_val);
                     _epilog();
                     return(_err)
                  ?};
::                ustal nazwę i ścieżkę do pliku obrazka
                  _pic:='%1.%2'[
                     ($'$%1.tm_stamp()'[_acr[1]])(),
                     ($'-%1.bl_info(_a,\'EXTENSION\')'[_acr[1]])(_acr[2])
                  ];
                  _path:=_tmpDirServer+_sep+_pic;
::                wyodrębnij plik obrazka z bazy danych
                  {? ($_acr[1])().bl_get(_acr[2],_path,_pth)=0
                  || _err:=_out_val(0,'Nie udało się pobrać pliku "%1" do katalogu "%2".'@[_pic,_tmpDirServer]);
                     _panic(_par,_TAB,_out_val);
                     _epilog();
                     return(_err)
                  ?};
                  {? _inTerm & _inDevice
                  || fcopy(_path,'@'+_dir+_sepClient+_pic,0,0,0)
                  ?};
                  _word.ReplaceImg(_KOL.ID,_path,'put',-1,-1,_REK.TABLE_NR,_row);
                  obj_del(_acr)

               |? _dtp=type_of(~~)
::                usuń obrazek "ramkę" z dokumentu
               || _word.ReplaceImg(_KOL.ID,'','del',-1,-1,_REK.TABLE_NR,_row)

               || _err:=_out_val(0,'Formuła obiektu %1 nie zwróciła napisu lub wartości pustej.'@[SD_WKOL.SYMBOL]);
                  _panic(_par,_TAB,_out_val);
                  _epilog();
                  return(_err)
               ?}

            |? SD_WKOL.SD_XSLO().SYMBOL='WARTOSC'
::             zastąp identyfikator wartością
            || _txt:=
                  {? _dtp=1 || $_val
                  |? _dtp=2 || _val
                  |? _dtp=4 || _val$4
                  |? _dtp=5 || _val$3
                  |? _dtp>100
                  || obj_del(_val);
                     '[obiekt]'@
                  || 'Wartość błędnego typu'@
                  ?};
               _word.Replace(_KOL.ID,_txt,,,,_REK.TABLE_NR,_row,_REK.ROW_NR)
            ?}

         || _err:=_out_val(0,'Wystąpił błąd w formule obiektu %1.'@[SD_WKOL.SYMBOL]);
            _panic(_par,_TAB,_out_val);
            _epilog();
            return(_err)
         ?};
         _loop:=_KOL.next()
      !};
      _loop:={? _TAB.f_active()<>0 || _TAB.f_next() || _TAB.next() ?}
   !};

:: wykonaj epilog źródła danych
   ($SD_WREK.memo_txt(,1,'EPILOG'))(_par,_TAB);
   {? in_error()<>0
   || _err:=_out_val(0,'Wystąpił błąd w formule "%1" zestawu %2.'@['Epilog'@,SD_WREK.SYMBOL]);
      _epilog();
      return(_err)
   ?};
   obj_del(_TAB);

:: następny zestaw
   _loop:=_REK.next()
!};

:: ustaw "przyjazną nazwę" tworzonego dokumentu
_word.fileName:=SD_DOK.NAZWA;

:: koniec przetwarzania
_epilog();
:: usuń puste tabele
_word.DelETabs(1);
:: wyświetl dokument

{? _exe<0
|| _file:=_word.Create(-_exe-1)
|| _file:=_word.Run({? _inTerm & ~_inDevice || 0 || _exe ?})
?};

:: usuń pliki z katalogu tymczasowego na serwerze, bez usuwania plików tymczasowych z końcówki
_word.DelFiles({? _exe<0 || '.cfx' || '' ?},0);

_at:={? (_inTerm & ~_inDevice) | _exe<0
     || _dir:=''
     || _dir:=tmp_dir();
        '@'
     ?};

{? _file*'/' | _file*'\\'
|| _dir:='';
   _sep:=''
|| _sep:=exec('sep','#file',(_inTerm & ~_inDevice) | _exe<0)
?};

{? _exe<0 & _file*'/'=0 & _file*'\\'=0 & _file<>''
|| _dir:=pth_dir(_file)
?};
_sep:=exec('sep','#file',(_inTerm & ~_inDevice) | _exe<0);

{? _batchMode
|| {? var_pres('ObjForMerge')<=0
   || ObjForMerge:=exec('obj_for_merge','szablon')
   ?};
   _fName:=_ret_val(1,{? _file<>'' || '%1%2%3%4'[_at,_dir,_sep,_file] || '' ?}).INFO;
   ObjForMerge.addToTab(exec('mid','#string',_fName,2,+_fName),(_fName+21)-5)
?};

_ret_val(1,{? _file<>'' || '%1%2%3%4'[_at,_dir,_sep,_file] || '' ?})


\wypelnij_arg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy tablicę nazwaną zawierającą dodatkowe parametry dla formuły wypelnij.
::   WE:
::   WY: wskazanie tablicy nazwanej o strukturze:
::       parametry - wskazanie tablicy dodatkowych parametrów formuły parametry
::----------------------------------------------------------------------------------------------------------------------
_arg:=obj_new('parametry');

_arg.parametry:=exec('parametry_arg','szablon');

_arg


\zws_psd_axxx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Formuła dla czynności ZWS_PSD_A??? udostępniających do edycji szablony dla danej dziedziny.
::   WE: _a STRING - symbol dziedziny
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_dom:=~-_a;

_mode:='maximized_with_title';
:: przygotuj główny panel konfiguracji
_wnd:=SD_DEF.grp_make('Szablony dokumentów Word'@,
:: przed otwarciem
   "  SD_DOK.cntx_psh();
      SD_DOK.index('NAZWA');
      SD_DOK.fld_fml('SD_DOK','BLANK',$'#SD_DOK.ref()');
      1
   ",
:: identyfikator
   '#zws_par_a%1'[-_dom],,,
:: podczas zamykania
   "  SD_DOK.cntx_pop();
      SD_DOK.fld_fml('SD_DOK','BLANK',$'*');
      1
   ",,
:: tryb
   'maximized'
);
:: lista definicji szablonów
SD_DEF.grp_sel(_wnd,SD_DEF,'WER',,
:: po odświeżeniu
   "grp_disp(SD_DOK,'WER',1,1)",,,
:: wysokość
   20,,,,,
:: tryb
   _mode
);
:: szablony dokumentów
SD_DEF.grp_splt(_wnd,,'horizontal','bottom');
SD_DEF.grp_sel(_wnd,SD_DOK,'WER',,,,,,
:: przed obsługą
   "  {? grp_empty(SD_DEF,'WER')
      || return('#disable')
      ?};
      SD_DOK.prefix(exec('def_ref','szablon'))
   ",,,,
:: tryb
   _mode
);

SD_DEF.cntx_psh();
:: ogranicz do dziedziny
SD_DEF.prefix();
SD_DEF.f_set(
   'NAZWA',
   'join SD_BDEF using (SD_BDEF.SD_DEF,SD_DEF.REFERENCE) '
   'join B_DOMAIN using (SD_BDEF.B_DOMAIN,B_DOMAIN.REFERENCE)',
   'B_DOMAIN.SYMBOL=\':_a\'',
   _dom
);
:: wyświetl panel
SD_DEF.win_sel(_wnd);
SD_DEF.select();
:: porządki
SD_DEF.f_clear();
SD_DEF.cntx_pop();
SD_DEF.win_del(_wnd);
~~


\wersja_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Sprawdza, czy uruchomiono wersją pracowniczą narzędzi.
::   WE:
::   WY: 0/1 - wersja klienta/pracownicza
::----------------------------------------------------------------------------------------------------------------------
:: UWAGA: formuła wycofana z użycia
0


\x_wskazowki_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyświetla wskazówki programistyczne.
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

_txt:=
{? _TAB=SD_WREK ||
   'Formuła "Prolog" jest wykonywana zawsze, bezpośrednio przed formułą "Tabela". '
   'Wartość zwrócona przez formułę jest ignorowana.'
   '\n\n'
   'Formuła "Tabela" wykonywana po formule "Prolog" musi zwrócić alias tabeli '
   '(stałej lub tymczasowej) lub alias zmiennej strukturalnej lub wskazanie tablicy '
   '(nazwanej lub tylko indeksowanej). Wartość innego typu niż wymienione powyżej jest '
   'uznawana za błędną.'
   '\n\n'
   'Formuła "Epilog" jest wywoływana zawsze po formule "Tabela". Epilog będzie wykonany '
   'nawet w przypadku wystąpienia błędu w treści formuły "Tabela" lub zwrócenia przez nią '
   'wartości błędnego typu.'
   '\n\n'
   'Do formuł "Prolog", "Tabela" i "Epilog" przekazywany jest argument _a.'
   '\n\n'
   'Argument _a wskazuje na tablicę nazwaną, w której nazwy komórek odpowiadają symbolom '
   'parametrów.\n'
   'Przykład:\n'
   '- Zdefiniowany został parametr o symbolu "TABELA_REF".\n'
   '- W formułach można odwołać się do wartości parametru przez: _a.TABELA_REF.'
   '\n\n'
   'W treści formuł dostępne są również wartości zapamiętane przez params_set.\n'
   'Przykład:\n'
   '- Przed wypełnieniem szablonu zapamiętano wartość: params_set(\'DATA\',date()).\n'
   '- W formułach zapamiętana wartość jest dostępna przez: params_get().DATA.'@

|? _TAB=SD_WKOL
|| 'Do formuły na wartość elementu przekazywane są argumenty:\n'
   '_a - wskazanie danej typu obiektowego zwróconej przez formułę "Tabela" źródła danych,\n'
   '_b - wartość wyliczona dla elementu nadrzędnego (~~, jeśli element jest niezależny lub '
   'dla elementu nadrzędnego nie podano formuły),\n'
   '_c - wskazanie do tablicy nazwanej, w której nazwy komórek odpowiadają symbolom parametrów.'
   '\n\n'
   'Przykład:\n'
   '- Źródło danych zwraca alias tabeli OSOBA z kursorem ustawionym na właściwym wierszu.\n'
   '- Formuła _a.NAZWISKO elementu zwróci aktualne nazwisko osoby.'
   '\n\n'
   'Przykład:\n'
   '- Zdefiniowano element "Stałe" o formule exec(\'czytaj\',\'#stalesys\',_c.DATA,KST); KST\n'
   '- Formuła _b.ULICA elementu zależnego od elementu "Stałe" zwróci nazwę ulicy pobraną ze '
   'stałych systemu na podaną parametrem "DATA" datę.'@

|? _TAB=SD_WPAR | _TAB=SD_PAR
|| 'Formuła "Okienko" pozwala na zmianę domyślnie stosowanego pola edycji parametru.'
   '\n\n'
   'Do formuły przekazywany jest argument _a, który wskazuje na tablicę nazwaną '
   'zawierającą dane pozwalające utworzyć pole w oknie edycji parametrów:\n'
   '\tTABELA - alias tabeli wykorzystywanej jako bufor edycji,\n'
   '\tOKNO - akronim tymczasowego okienka redakcji parametrów,\n'
   '\tPOLE - akronim pola w buforze edycji odpowiadający parametrowi\n'
   'oraz informacje pobrane z definicji parametru:\n'
   '\tSYMBOL - symbol parametru,\n'
   '\tNAZWA - nazwa parametry,\n'
   '\tOPIS - opis parametru,\n'
   '\tWYMAGANY - znacznik określający, czy wartość parametru musi być określona [T/N],\n'
   '\tTYP - nazwa typu pola (INTEGER, REAL, STRING, DATE, TIME, REFERENCE),\n'
   '\tDLUGOSC - długość pola w oknie edycji,\n'
   '\tPRECYZJA - precyzja wartości.'
   '\n\n'
   'Przykład:\n'
   '- Zdefiniowany został parametr określający płeć osoby.\n'
   '- Pole tekstowe można zastąpić kontrolką wyboru opcji Kobieta/Mężczyzna formułą:\n'
   '\t_a.TABELA.win_efld(_a.OKNO,,_a.POLE,,,_a.DLUGOSC,_a.PRECYZJA,,,,_a.OPIS,\'radio-buttons\',,\n'
   '\t\t\'Kobieta\',"\'K\'",\n'
   '\t\t\'Mężczyzna\',"\'M\'"\n'
   '\t)'@

|? _TAB=SD_WFML | _TAB=SD_FML
|| 'W treści formuły parametru dostępne są zmienne:\n'
   '_par - wartości zapamiętane przez params_set,\n'
   '_buf - wskazanie na pseudo obiekt ułatwiający manipulowanie wartościami parametrów '
   'i sterowanie odpowiadającymi im elementami okna dialogowego.'
   '\n\n'
   'Obiekt _buf oferuje metody:\n'
   'fld_acr([symbol parametru]) - zwraca akronim pola w buforze edycji odpowiadający parametrowi,\n'
   'get_value([symbol parametru]) - zwraca aktualną wartość pola z bufora edycji,\n'
   'set_value([symbol parametru],[wartość]) - nadaje polu podaną wartość,\n'
   'get_enable([symbol parametru]) - zwraca stan dostępności pola (0/1 - zablokowane/dostępne),\n'
   'set_enable([symbol parametru],[stan]) - ustala stan dostępności pola (0/1 - zablokowane/dostępne),\n'
   'get_mark([symbol parametru]) - zwraca status wymaganej wartości (0/1 - opcjonalna/wymagana),\n'
   'set_mark([symbol parametru],[stan]) - ustala status wymaganej wartości (0/1 - opcjonalna/wymagana),\n'
   'efld_opt([symbol parametru],[dostępne],[wymagane]) - ustala stan dostępności i wymaganej wartości.'
   '\n\n'
   'Przykład:\n'
   '- Zdefiniowano parametr "DATA" typu DATE.\n'
   '- Zdefiniowano parametr "KOMENTARZ" typu STRING[20].\n'
   '- Parametr "KOMENTARZ" nie będzie dostępny do edycji dopóki nie zostanie podana wartość '
   'parametru "DATA", jeśli parametrowi "DATA" przypisana zostanie formuła "przed wyświetleniem" '
   'o treści:\n'
   '\t_buf.set_enable(\'KOMENTARZ\',_buf.get_value(\'DATA\')=date(0,0,0))'@

|| ''
?};
exec('show_tips','#edit',_txt,_TAB.comment());
''


\x_struktura_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Wyświetla opis struktury danch. Wykorzystywana w okienkach podglądu tabel SD_DOK, SD_WREK, SD_WKOL.
::   WE: _a TABLE - alias tabeli
::       _b STRING - akronim pola
::       _c STRING - akronim okienka
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_fld:=_b;
_wnd:=_c;

_TAB.cntx_psh();
_TAB.memo_get(,_fld);
_TAB.win_edit(_wnd);
_TAB.display();
_TAB.cntx_pop();
''


\x_standaryzuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Obsługa akcji "Standaryzuj" okienek tabel SD_*.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);
_tt:=var_pres('SYSTEM',SD_DEF);

_wnd:=_TAB.mk_edit('%1: %2'[menu_txt(),_TAB.comment()],,'#%1_std'[2--!_TAB]);
{? var_pres('SYSTEM',_TAB)=_tt
:: jest kolumna SYSTEM
|| _help:='Blokada modyfikacji'@;
   _TAB.win_efld(_wnd,,'SYSTEM',,,,,,,,_help,'check-box','check_label=%1'[_help],"'T'","'N'")
?};
_tab_sym:=0;
{? var_pres('SYMBOL',_TAB)=_tt
:: jest kolumna SYMBOL
|| _TAB.fld_fml('SYMBOL','F3',
      {? _TAB=SD_WKOL || "fld('%1_'[SD_WKOL.SD_WREK().KOD]);~~"
      |? _TAB=SD_WPAR || "fld('%1_'[SD_WPAR.SD_WREK().KOD]);~~"
      |? _TAB=SD_DOK  || "fld('%1_'[SD_DOK.SD_DEF().KOD]);~~"
      |? _TAB=SD_PAR  || "fld('%1_'[SD_PAR.SD_DOK().KOD]);~~"
      || ""
      ?}
   );
   _TAB.win_efld(_wnd,,'SYMBOL',,,,,,,,MS.comment(_TAB,'SYMBOL'),,'F3_button=1');
   _TAB.fld_fml('SYMBOL','BEFORE_EDIT',"1");
   _TAB.efld_opt(_wnd,'mark=1',,'SYMBOL');
   _tab_sym:=0
?};
{? var_pres('KOD',_TAB)=_tt
:: jest kolumna KOD
|| _TAB.fld_fml('KOD','F3',
      {? _TAB=SD_WREK || "'%1'[SD_WREK.SYMBOL]"
      |? _TAB=SD_WKOL || "'%1'[SD_WKOL.SYMBOL]"
      |? _TAB=SD_WPAR || "'%1_%2'[SD_WPAR.SD_WREK().KOD,SD_WPAR.SYMBOL]"
      |? _TAB=SD_DEF  || "'%1'[SD_DEF.SYMBOL]"
      |? _TAB=SD_DOK  || "'%1'[SD_DOK.SYMBOL]"
      |? _TAB=SD_REK  || "'%1_?'[SD_REK.SD_DOK().KOD]"
      |? _TAB=SD_PAR  || "'%1_%2'[SD_PAR.SD_DOK().KOD,SD_PAR.SYMBOL]"
      |? _TAB=SD_MAP  || "'%1_%2'[SD_MAP.SD_PAR().KOD,SD_MAP.SD_WPAR().SYMBOL]"
      |? _TAB=SD_WFML || "
         '%1_%2'[
            SD_WPAR.KOD,
            _typ:=SD_WFML.SD_XSLO().SYMBOL;
            {? _typ='PATTERN' || 'PT'
            |? _typ='BLANK' || 'BL'
            |? _typ='BEFORE_DISPLAY' || 'BD'
            |? _typ='BEFORE_EDIT' || 'BE'
            |? _typ='F3' || 'F3'
            |? _typ='AFTER_EDIT' || 'AE'
            || 'XX'
            ?}]"
      |? _TAB=SD_FML || "
         '%1_%2'[
            SD_PAR.KOD,
            _typ:=SD_FML.SD_XSLO().SYMBOL;
            {? _typ='PATTERN' || 'PT'
            |? _typ='BLANK' || 'BL'
            |? _typ='BEFORE_DISPLAY' || 'BD'
            |? _typ='BEFORE_EDIT' || 'BE'
            |? _typ='F3' || 'F3'
            |? _typ='AFTER_EDIT' || 'AE'
            || 'XX'
            ?}]"
      |? _TAB=SD_BDEF || "'%1_%2'[SD_BDEF.SD_DEF().KOD,SD_BDEF.B_DOMAIN().SYMBOL]"
      |? _TAB=SD_BREK || "'%1_%2'[SD_BREK.SD_WREK().KOD,SD_BREK.B_DOMAIN().SYMBOL]"
      || ""
      ?}
   );
   _TAB.win_efld(_wnd,,'KOD',,,,,,,,MS.comment(_TAB,'KOD'),,'F3_button=1');
   _TAB.efld_opt(_wnd,'mark=1',,'KOD')
?};
:: dodaj standardowe przyciski
exec('ok_esc','#window',_TAB,_wnd,,,,,,,exec('text_red_ok','#window'));

_TAB.cntx_psh();
_TAB.get();
:: wczytaj notatki
_num:=_TAB.fld_num();
{! _ii:=1.._num
|! _acr:=_TAB.fld_acr(_ii);
   {? var_pres(_acr,_TAB)=36
   || _TAB.memo_get(,_acr)
   ?}
!};
_TAB.win_edit(_wnd);
_chk:=$(
   'exec(\'_x_modb\',\'szablon\',%1); '
   '{? var_pres(\'KOD\',%1)=var_pres(\'KOD\',SD_DEF) '
   '|| {? __CHK.record(%1,,\'KOD\')<>\'\' '
   '   || return(\'KOD\') '
   '   ?} '
   '?};'
   'exec(\'_%2_chk\',\'szablon\',1)'[
      !_TAB,5--!_TAB
]);
{!
|? {? _TAB.edit(_chk)
   || {? _TAB.put()
      || {? _TAB=SD_WREK || exec('_wrek_xml','szablon')
         |? _TAB=SD_WKOL || exec('_wkol_xml','szablon')
         ?};
         0
      || 1
      ?}
   ?}
!};
_TAB.cntx_pop();

:: porządki
_TAB.win_edel(_wnd);
_TAB.fld_fml('KOD','F3',"*");
{? _tab_sym<>0
|| _TAB.fld_fml('SYMBOL','F3',"*");
   _TAB.fld_fml('SYMBOL','BEFORE_EDIT',"*")
?};
~~


\x_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Formuła wspólna dla akcji "okienko przed" tabel SD_*. Ukrywa akcję "Standaryzuj" przy uruchomieniu narzędziami
::       klienta.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: UWAGA: formuła wycofana z użycia


\kasuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Kasuje zawartość wszystkich tabel SD_*.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? ~FUN.ask(
      'Usunięte zostaną dane z tabel SD_*.\n'
      'Czy na pewno kontynuuować działanie?'@
   )
|| return()
?};

_TAB:=spli_str(
   'SD_BDEF,SD_BREK,SD_FDEF,SD_FDOK,SD_FREK,'
   'SD_MAP,SD_FML,SD_PAR,SD_UPAR,SD_UINS,SD_REK,SD_DOK,SD_DEF,'
   'SD_WFML,SD_WPAR,SD_WKOL,SD_PROT,SD_WREK,'
   'SD_XFML,SD_XPAR,SD_XKOL,SD_XSLO',
   ','
);
{! _ii:=1..obj_len(_TAB)
|! _TAB[_ii]:=($_TAB[_ii])()
!};

_prolog:="
   {! _ii:=1..obj_len(_a)
   |! _a[_ii].cntx_psh();
      _a[_ii].clear();
      _a[_ii].trig_off('*','*')
   !}
";
_epilog:="
   {! _ii:=1..obj_len(_a)
   |! _a[_ii].cntx_pop();
      _a[_ii].trig_on('*','*')
   !}
";
_tool:=obj_new('setup','delete','has_tree','del_row','del_tree','tree_fld');
_tool.setup:="
   _TAB:=_a;
   .delete:=
      {? .has_tree(_TAB)
      || .del_tree
      || .del_row
      ?}
";
_tool.has_tree:="
   _TAB:=_a;
   {! _ii:=1.._TAB.fld_num()
   |! _acr:=_TAB.fld_acr(_ii);
      {? var_pres(_acr,_TAB)=32
      || .tree_fld:=_acr;
         return(1)
      ?}
   !};
   0
";
_tool.del_row:="
   _a.del(,1)
";
_tool.del_tree:="
   _TAB:=_a;
   _TAB.cntx_psh();
   _ref:=#_TAB.ref();
   {!
   |? _TAB.find_tab(,.tree_fld,,'=',_ref)
   |! .del_tree(_TAB,.tree_fld)
   !};
   _TAB.cntx_pop();
   .del_row(_TAB)
";

_prolog(_TAB);

do();
_done:=1;
{! _ii:=1..obj_len(_TAB)
|? _done
|! echo(_TAB[_ii].comment());
   {? _TAB[_ii].first()
   || _tool.setup(_TAB[_ii]);
      {!
      |? _state:=_tool.delete(_TAB[_ii]);
         {? _state=0 || _done:=0
         |? _state=1 || 0
         || 1
         ?}
      !}
   ?}
!};

{? ~_done
|| undo()
?};
end();

_epilog(_TAB);
~~


\wrek_ochrona_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Definicja zabezpieczeń
::   WE: _a [REFERENCE] - wskazanie na zestaw danych SD_WREK.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
SD_PROT.index('UNIQ');
SD_PROT.prefix(SD_WREK.ref());
exec('prot_test_pola','szablon');
SD_PROT.select()


\prot_wstaw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Dołączanie tabel
::----------------------------------------------------------------------------------------------------------------------
params_exec('prot_wybor','szablon');
1


\prot_wybor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Wybór tabel
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_obj:=params_get().obj;
params_set(params_get());
{? var_pres('TAB',_obj)<100
|| params_exec('prot_interfejs','szablon')
?};
_obj.TAB.index(_obj.NDX.TREE);
_obj.TAB.win_sel(_obj.WIN.WS);
_obj.TAB.prefix();
_obj.TAB.first();
_obj.TAB.select()


\prot_aktualizacja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Aktualizacja danych
::   WE: _a [OBIEKT] - obiekt z definicją intejfejsu
::       _b [STRING] - brak lub 'W' aktualizacja tabel i zmiennych (domyślne), 'T' - tylko tabel, 'Z' - tylko zmiennych
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_co:={? var_pres('_b')=type_of('') & ('WTZ'*_b) || _b || 'W' ?};
_max:=tab_num();
SD_PROT.cntx_psh();
SD_PROT.index('UNIQ');
SD_PROT.clear();
FUN.prg_start(_max+SD_PROT.size(),'Aktualizacja tabel i pól ...'@);
_tree:=0;
_loop:=_max>0;
_cur_tab:='';
{! |? _loop<_max |!
   _obj.TAB.index(_obj.NDX.UNIQ);
   {? var_pres('_tab')>0 || &_tab ?};
   {? {? _co='W' || 1 |? _co='T' || tab_real(_loop) || ~tab_real(_loop) ?}
   || _tab:=($(tab_acr(_loop)))();
      {! _fld:=1.._tab.fld_num() |!
         _inny:=_cur_tab<>tab_acr(_loop);
         _obj.TAB.ACR:=tab_acr(_loop);
         _cur_tab:=tab_acr(_loop);
         {? _inny
         || _obj.TAB.TREE:=0;
            _obj.TAB.NAZ:=_tab.comment();
            _obj.TAB.A:='T';
            _obj.TAB.UNIQ:=_obj.TAB.ACR;
            _obj.TAB.NR:=_loop;
            _obj.TAB.prefix(_obj.TAB.UNIQ,);
            _obj.TAB.add();
            _tree:=_obj.TAB.ref()
         ?};
         _obj.TAB.TREE:=_tree;
         _obj.TAB.NAZ:=_tab.fld_name(_fld);
         _obj.TAB.ACR:=_tab.fld_acr(_fld);
         _obj.TAB.UNIQ:=(2-!_tab)+'.'+_obj.TAB.ACR;
         _obj.TAB.A:='P';
         _obj.TAB.prefix(_obj.TAB.UNIQ,);
         _obj.TAB.add()
      !}
   ?};
   FUN.prg_next();
   _loop+=1
!};
_obj.TAB.clear();
{? SD_PROT.first()
|| {!
   |? FUN.prg_next();
      {? _obj.TAB.find_key(SD_PROT.TAB_A+'.'+SD_PROT.FLD_A,)
      || SD_PROT.next()
      || SD_PROT.del()
      ?}
   !}
?};
SD_PROT.cntx_pop();
FUN.prg_stop()


\prot_test_ochron
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Sprawdzenie praw dostępu do danych
::   WE: _a [STRING] - wskazanie na zestaw
::   WY: [OBJ] RET 0/1, OPIS
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('obj_ntab_set','#array',,'RET',1,'OPIS','');
_ref:={? var_pres('_a')=type_of('') & +|_a || _a || '' ?};
{? ~(+_ref)
|| _ret.RET:=0;
   _ret.OPIS:='Nieprawidłowe wywołanie funkcji \\%1/%2'@[form_stack().name,form_stack().file];
   return(_ret)
?};
Cntx.psh(SD_WREK,SD_PROT);
SD_WREK.prefix();
{? SD_WREK.seek(_ref,)
|| SD_PROT.index('UNIQ');
   SD_PROT.prefix(SD_WREK.ref());
   exec('prot_test_pola','szablon');
   {? SD_PROT.first()
   || {!
      |? _ret.RET:=($(SD_PROT.TAB_A))().tab_read() & ($(SD_PROT.TAB_A))().fld_read(SD_PROT.FLD_A);
         {? ~_ret.RET
         || _ret.OPIS:='Brak dostępu do informacji "%1" (%2) z kartoteki "%3" (%4).\n'@[
               SD_PROT.FLD_O,SD_PROT.FLD_A,SD_PROT.TAB_O,SD_PROT.TAB_A
            ];
            _ret.OPIS+='Wydruk nie może być zrealizowany.'@
         ?};
         _ret.RET & SD_PROT.next()
      !}
   ?}
?};
Cntx.pop(SD_WREK,SD_PROT);
_ret


\prot_tabela_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Po edycji pola TAB_A.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SD_PROT.TAB_O:='';
win_disp();
{? ~(+fld())
|| __CHK.err_empty(cur_afld());
   return(0)
?};
{? (_chk:=exec('prot_tabela_chk','szablon'))<>''
|| __CHK.err_msg(_chk);
   return(0)
?};
SD_PROT.TAB_O:=($(SD_PROT.TAB_A))().comment();
1


\prot_pole_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Po edycji pola FLD_A.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SD_PROT.FLD_O:='';
win_disp();
{? ~(+fld())
|| __CHK.err_empty(cur_afld());
   return(0)
?};
{? (_chk:=exec('prot_pole_chk','szablon'))<>''
|| __CHK.err_msg(_chk);
   return(0)
?};
SD_PROT.FLD_O:=MS.name(($(SD_PROT.TAB_A))(),SD_PROT.FLD_A);
1


\prot_tabela_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Sprawdza, czy wartość TAB_A jest akronimem tabeli.
::   WE:
::   WY: treść komunikatu w przypadku błędu lub tekst pusty
::----------------------------------------------------------------------------------------------------------------------
{? var_pres(SD_PROT.TAB_A)<>type_of(SYSLOG)
|| return('"%1" nie jest akronimem tabeli lub zmiennej.'@[SD_PROT.TAB_A])
?};
''


\prot_pole_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Sprawdza, czy wartość FLD_A jest polem tabeli.
::   WE:
::   WY: treść komunikatu w przypadku błędu lub tekst pusty
::----------------------------------------------------------------------------------------------------------------------
{? var_pres(SD_PROT.FLD_A,($(SD_PROT.TAB_A))())<0
|| return('"%1" nie jest polem %2 "%3".'@
      [SD_PROT.FLD_A,
      {? MS.table(SD_PROT.TAB_A) || 'tabeli' || 'zmiennej' ?},
      SD_PROT.TAB_A]
   )
?};
''


\prot_wer_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Rekord po tabeli SD_PROT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('_prot_chk','szablon',-menu_txt()='popraw')


\prot_tabela_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Wybór akronimu tabeli
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_obj:=params_get().obj;
params_set(params_get());
{? var_pres('TAB',_obj)<100
|| params_exec('prot_interfejs','szablon')
?};
_obj.TAB.cntx_psh();
_obj.TAB.index(_obj.NDX.TREE);
_obj.TAB.win_sel(_obj.WIN.TEN);
_obj.TAB.win_edit(_obj.WIN.SZ);
_obj.TAB.prefix(0);
_obj.TAB.find_key(fld(),);
_ret:=
   {? _obj.TAB.select(,1)
   || _obj.TAB.ACR
   || fld()
   ?};
_obj.TAB.cntx_pop();
_ret


\prot_pole_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Wybór akronimu pola dla tabeli
::   WE: _a [STRING] - akronim tabeli
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_obj:=params_get().obj;
{? var_pres('TAB',_obj)<100
|| params_exec('prot_interfejs','szablon')
?};
_obj.TAB.cntx_psh();
_obj.TAB.index(_obj.NDX.UNIQ);
_obj.TAB.prefix();
_obj.TAB.find_key(SD_PROT.TAB_A+'.'+fld(),);
_obj.TAB.prefix(SD_PROT.TAB_A+'.');
_obj.TAB.win_sel(_obj.WIN.TEN);
_obj.TAB.win_edit(_obj.WIN.SZ);
_ret:=
   {? _obj.TAB.select(,1,-1)
   || _obj.TAB.ACR
   || fld()
   ?};
_obj.TAB.cntx_pop();
_ret


\prot_interfejs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Budowa interfejsu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_obj:=params_get().obj;
params_set(params_get());
_obj.TAB:=exec('tabela','archiwum');
_obj.NDX:=obj_new('TREE','UNIQ');
_obj.NDX.TREE:=_obj.TAB.ndx_tmp('Lp',1,'TREE',,0, 'ACR',,0);
_obj.NDX.UNIQ:=_obj.TAB.ndx_tmp('Unikalny',1,'UNIQ',,0,'ACR',,);
_obj.WIN:=obj_new('WS','TEN','WE','SZ');
:: okno wyboru pozycji: tabeli lub pola tabeli
_obj.WIN.TEN:=_obj.TAB.mk_sel('Struktura danych'@,'P',0,'#sd_prot_ten',,,,,'U');
_obj.TAB.win_fld(_obj.WIN.TEN,,'ACR',,,16,,,'Akronim'@,,'Akronim'@);
_obj.TAB.win_fld(_obj.WIN.TEN,,'NAZ',,,,,,'Nazwa'@,,'Nazwa'@);
_txt:='&Wybierz'@;
_obj.TAB.win_act(_obj.WIN.TEN,0,'Formuła',_txt,,'Wybierz'@,"sel_exit()",,1,,,,'W');
_obj.TAB.win_btn(_obj.WIN.TEN,'text=%1,panel=right,align=begin'[_txt],'menu:W');
_obj.TAB.win_act(_obj.WIN.TEN,0,'Szukaj'@);
:: okno wyboru ze strukturą hierarchiczną
_obj.WIN.WS:=_obj.TAB.mk_sel('Struktura danych'@,'P',0,'#sd_prot_ws',,,,1,,,1);
_obj.TAB.win_fld(_obj.WIN.WS,,'ACR',,,16,,,'Akronim'@,,'Akronim'@);
_obj.TAB.win_fld(_obj.WIN.WS,,'NAZ',,,,,,'Nazwa'@,,'Nazwa'@);
_obj.TAB.win_act(_obj.WIN.WS,0,'Formuła','Zwiń/&rozwiń'@,,'Zwijanie / rozwijanie drzewa'@,
   "exec('zwin_rozwin','#tree')",,,,,,'Z',,'target=window'
);
_txt:='&Wybierz'@;
_for:="
   _obj:=params_get().obj;
   _obj.TAB.cntx_psh();
   _obj.TAB.index(_obj.NDX.TREE);
   {? _obj.TAB.UNIQ*'.'
   || {? ~SD_PROT.find_key(spli_str(_obj.TAB.UNIQ,'.')[1],spli_str(_obj.TAB.UNIQ,'.')[2],)
      || SD_PROT.blank();
         SD_PROT.TAB_A:=spli_str(_obj.TAB.UNIQ,'.')[1];
         SD_PROT.TAB_O:=($(SD_PROT.TAB_A))().comment();
         SD_PROT.FLD_A:=spli_str(_obj.TAB.UNIQ,'.')[2];
         SD_PROT.FLD_O:=MS.comment(($(SD_PROT.TAB_A))(),SD_PROT.FLD_A);
         SD_PROT.add()
      ?}
   || _obj.TAB.prefix(#_obj.TAB.ref());
      {? _obj.TAB.first()
      || {! |?
            {? _obj.TAB.UNIQ*'.' & ~SD_PROT.find_key(spli_str(_obj.TAB.UNIQ,'.')[1],spli_str(_obj.TAB.UNIQ,'.')[2],)
            || SD_PROT.blank();
               SD_PROT.TAB_A:=spli_str(_obj.TAB.UNIQ,'.')[1];
               SD_PROT.TAB_O:=($(SD_PROT.TAB_A))().comment();
               SD_PROT.FLD_A:=spli_str(_obj.TAB.UNIQ,'.')[2];
               SD_PROT.FLD_O:=MS.comment(($(SD_PROT.TAB_A))(),SD_PROT.FLD_A);
               SD_PROT.add()
            ?};
            _obj.TAB.next()
         !}
      ?}
   ?};
   _obj.TAB.cntx_pop()
";
_obj.TAB.win_act(_obj.WIN.WS,0,'Formuła',_txt,,'Wybierz'@,_for,,1,1,,,'W');
_obj.TAB.win_btn(_obj.WIN.WS,'text=%1,panel=right,align=begin'[_txt],'menu:W');
_for:="
   _tab:=cur_tab(1,1);
   _win:=cur_win(1,1);
   _ok:=0;
   {? _tab.UNIQ*'.'
   || _ok:=~SD_PROT.find_key(spli_str(_tab.UNIQ,'.')[1],spli_str(_tab.UNIQ,'.')[2],)
   || _ok:=1
   ?};
   {? ~_ok
   || _tab.actions_grayed(_win,'W')
   || _tab.actions_grayed(_win)
   ?}
";
_obj.TAB.win_act(_obj.WIN.WS,0,'Menu','Szukaj'@);
_obj.TAB.win_act(_obj.WIN.WS,0,'Formuła','&Szukaj dokładnie'@,'Szukaj',,,"
   _tab:=cur_tab(1,1);
   _tab.ACR:=_tab.NAZ:='';
   {? _tab.edit()
   || {? _tab.A='T'
      || _tab.find_tab('first',
            'ACR',,'like',{? +|_tab.ACR || _tab.ACR || '%' ?},
            'NAZ',,'like',{? +|_tab.NAZ || _tab.NAZ || '%' ?},
            'TREE',,'=',0
         )
      || _tab.find_tab('first',
            'ACR',,'like',{? +|_tab.ACR || _tab.ACR || '%' ?},
            'NAZ',,'like',{? +|_tab.NAZ || _tab.NAZ || '%' ?},
            'TREE',,'<>',0
         )
      ?}
   ?}
",,,,,'S');
_obj.TAB.win_act(_obj.WIN.WS,0,'Formuła','Szukaj &kontekstowo'@,'Szukaj',,,"
   _tab:=cur_tab(1,1);
   _tab.ACR:=_tab.NAZ:='';
   {? _tab.edit()
   || {? _tab.A='T'
      || _tab.find_tab('first','ACR',,'likeIC','%'+_tab.ACR+'%','NAZ',,'likeIC','%'+_tab.NAZ+'%','TREE',,'=',0)
      || _tab.find_tab('first','ACR',,'likeIC','%'+_tab.ACR+'%','NAZ',,'likeIC','%'+_tab.NAZ+'%','TREE',,'<>',0)
      ?}
   ?}
",,,,,'K');
_obj.TAB.win_act(_obj.WIN.WS,0,'Rekord',,,,_for);
_for:="
   _tab:=cur_tab(1,1);
   _jest:=_tab.UNIQ*'.' & SD_PROT.find_key(spli_str(_tab.UNIQ,'.')[1],spli_str(_tab.UNIQ,'.')[2],);
   _tab.A:={? _tab.TREE || 'P' || 'T' ?};
   'xwin16.png:'+$
      {? _jest
      || 38
      || {? _tab.TREE=0
         || 125
         || 190
         ?}
      ?}
";
_obj.TAB.win_fml(_obj.WIN.WS,,'ACR',,'ICON_BEFORE',_for);
_obj.TAB.win_sel(_obj.WIN.WS);
::   okno edycyjne
_obj.WIN.WE:=_obj.TAB.mk_edit('Dane'@,0,'#sd_prot_we',,,'normal');
_obj.TAB.win_efld(_obj.WIN.WE,,'ACR',,,60,,,'Akronim'@);
_obj.TAB.win_efld(_obj.WIN.WE,,'NAZ',,,60,,,'Nazwa'@);
_obj.TAB.win_efld(_obj.WIN.WE,,'A',,,3,,,'Rodzaj'@,,,'radio-buttons',,'Tabela'@,"'T'",'Pole tabeli'@,"'P'");
exec('ok_esc','#window',_obj.TAB,_obj.WIN.WE,,,,,,,exec('text_red_ok','#window'));
_obj.TAB.win_edit(_obj.WIN.WE);
_obj.WIN.SZ:=_obj.TAB.mk_edit('Dane'@,0,'#sd_prot_sz',,,'normal');
_obj.TAB.win_efld(_obj.WIN.SZ,,'ACR',,,60,,,'Akronim'@);
_obj.TAB.win_efld(_obj.WIN.SZ,,'NAZ',,,60,,,'Nazwa'@);
exec('ok_esc','#window',_obj.TAB,_obj.WIN.SZ,,,,,,,exec('text_red_ok','#window'));

exec('prot_aktualizacja','szablon',_obj)


\prot_test_pola
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Weryfikacja istnienia pola w definicji
::   WE: _a [INTEGER] - 0 lub brak wszystkie pola, 1 aktualne z bufora
::   WY: 0/1 - 0 jeśli jakiekolwiek pole zostału usunięte, 1 jeśli wszystkie pola pasują do definicji
::----------------------------------------------------------------------------------------------------------------------
_all:={? var_pres('_a')=type_of(0) & _a=1 || 0 || 1 ?};
_ret:=1;
{? _all
|| SD_PROT.cntx_psh();
   {? SD_PROT.first()
   || _size:=SD_PROT.size()>500;
      {? _size || FUN.prg_start(SD_PROT.size(),'Analiza definicji ochron ...'@) ?};
      {!
      |? {? _size || FUN.prg_next() ?};
         {? var_pres(SD_PROT.TAB_A)>0 & var_pres(SD_PROT.FLD_A,($(SD_PROT.TAB_A))())>0
         || SD_PROT.next()
         || _ret*=0; SD_PROT.del()
         ?}
      !};
      {? _size || FUN.prg_stop() ?}
   ?};
   SD_PROT.cntx_pop()
|| {? ~(var_pres(SD_PROT.TAB_A)>0 & var_pres(SD_PROT.FLD_A,($(SD_PROT.TAB_A))())>0)
   || _ret*=0; SD_PROT.del()
   ?}
?};
_ret


\_prot_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Wyzwalacz przed dołączaniem wiersza SD_PROT.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: kontrola poprawności wiersza
exec('_prot_chk','szablon',0)


\_prot_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Wyzwalacz przed poprawianiem wiersza SD_PROT.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: kontrola poprawności wiersza
exec('_prot_chk','szablon',1)


\_prot_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Wyzwalacz przed usuwaniem wiersza SD_PROT.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
1


\_prot_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};
__CHK.validate(SD_PROT,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'TAB_A','FLD_A')"),
   "  _txt:=exec('prot_tabela_chk','szablon');
      {? +|_txt
      || _a.err_msg(_txt)
      || _txt:=exec('prot_pole_chk','szablon');
         {? +|_txt || _a.err_msg(_txt) || '' ?}
      ?}
   "
)


\obj_for_merge
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AFI [23.25]
:: OPIS: Zwraca obiekt do obsługi scalania dokumentów word
:: ~OST: INCLIEXEC,INFCOPY,INFERASE,INFOPEN,INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
_res:=obj_new(
   'TAB','HLPFILE','VER','XUTF8','CTRLNAME','SYSAS','DIRSEP','DIRSEPK','LIBFNAME','RESFILE','JTERM','INTERM',
   'addToTab','save2File','doMerge','openMerged','openForEdit','delFiles','makeMerge','doc2pdfJ','doc2pdf'
);

_res.TAB:=tab_tmp(1,
   'TS','STRING[16]','Time',
   'FILENAME','STRING[255]','Plik'
);

_res.HLPFILE:=($('
              _ts:=$SYSLOG.tm_stamp();
              _fileName:=\'wordtomerge_\';
              _nazwa:=\'~%1%2\'[_fileName,_ts];
              _nazwa:=gsub(_nazwa,\' \',\'_\');
              _nazwa:=STR.maz2nop(_nazwa);
              _nazwa:=_nazwa+\'.cfx\';
              _nazwa
              '))();

_res.RESFILE:=($('
              _ts:=$SYSLOG.tm_stamp();
              _fileName:=\'result_\';
              _nazwa:=\'~%1%2\'[_fileName,_ts];
              _nazwa:=gsub(_nazwa,\' \',\'_\');
              _nazwa:=STR.maz2nop(_nazwa);
              _nazwa:=_nazwa+\'.docx\';
              _nazwa
              '))();

_res.VER:=user(11);

_res.XUTF8:={? _res.VER>'11' || 1 || 0 ?};

_res.CTRLNAME:={? _res.VER>='20.32'
               || 'excel_export_poi_5'
               |? _res.VER>='18.02'
               || 'excel_export_1802'
               || 'excel_export'
               ?};

_res.SYSAS:=sys_name(1);

_res.DIRSEP:={? _res.SYSAS <> 'WINDOWS'
             || '/'
             || '\\'
             ?};

_res.DIRSEPK:={? _res.SYSAS <> 'WINDOWS'
             || '/'
             || '\\'
             ?};

_res.LIBFNAME:=_res.CTRLNAME+'.jar';

_res.JTERM:={? ~-cli_ver()='JTERM' || 1 || 0 ?};

_res.INTERM:={? exec('interm','#system') || 1 || 0 ?};

_res.addToTab:="
   _tab:=.TAB;
   _tab.FILENAME:=_a;
   _tab.TS:=_b;
   _tab.add()
";

_res.save2File:="
   _mode:='Uw';
   _file:=fopen(.HLPFILE,_mode,1);
   {? _file
   || _tab:=.TAB;
      {? _tab.first()
      || {!
         |? _line:=_tab.FILENAME;
            fwrite(_file, _line);
            _tab.next()
         !}
      ?};
      fclose(_file)
   ?}
";

_res.doMerge:="
   _word:='merge';
   _wordsToMergePath:=pth_dir(.HLPFILE);
   _jar:=pth_dir(.LIBFNAME) + .DIRSEP + .LIBFNAME;
   _utf8:={? .XUTF8 || 'true' || 'false' ?};
   _main_class:='pl.macrologic.export2excel.Main';
   _classpath:='%1'[_jar];
   _param:=obj_new('encoding','classpath', 'main_class','param1','param2','param3','param4','param5');
   _param.encoding:='-Dfile.encoding=utf-8';
   _param.classpath:='-Djava.class.path=%1'[_classpath];
   _param.main_class:=_main_class;
   _param.param1:=pth_dir(.HLPFILE) + .DIRSEP + .HLPFILE;
   _param.param2:=_utf8;
   _param.param3:=_word;
   _param.param4:=pth_dir(.HLPFILE) + .DIRSEP + .RESFILE;
   _param.param5:=$_a;
   _result:=jexec(_wordsToMergePath,'runOnAppServer=1,wait=1,stderr=program_err.log,stdout=program_out.log',_param)
";

_res.openMerged:="
   _exFile:=fopen(.RESFILE,'r',1);

   {? _exFile
   || fclose(_exFile);
      .openForEdit(_a);
      {? (_a=1 | _a=2)
      || .DelFiles(.RESFILE,_a=1);
         {? _a=1 || ''
         |? _a=2 || .RESFILE
         ?}
      || .RESFILE
      ?}
   || {? .JTERM & .MSG
      || FUN.error('Nie udało się utworzyć pliku worda.'@)
      ?}
   ?}
";

_res.openForEdit:="
   _tryb:={? (_a<>1) & (_a<>2) & (_a<>3) || _a:=1 || _a ?};

   {? ~.INTERM
   || fcopy(.RESFILE,'@'+tmp_dir()+.DIRSEPK+.RESFILE,1,0,1)
   ?};
   _doc:=tmp_dir()+.DIRSEPK+.RESFILE;
   {? cli_exec(_doc)
   || _ret:=0;
      _again:=_tryb=2;
      _count:=14;
      {!
      |? _again
      |! _txt:='Oczekiwanie na wykonanie polecenia systemowego.'
               'Przerwanie oczekiwania spowoduje odesłanie redagowanego pliku \"%1\"'
               'na serwer aplikacji i kontynuowanie aplikacji.'@[.RESFILE];
         _prg:=-1;
         _loop:=0;
         {!
         |? _prg<0 & _loop<_count
         |! delay(,500);
            _loop+=1;
            _prg:=progress(,_txt,,1,,,,'Przerwij oczekiwanie')
         !};
         _count:=6;
         {? _prg>=0
         || _again:=~FUN.ask('Czy na pewno chcesz przerwać oczekiwanie na zakończenie redagowania pliku: %1?'@[.RESFILE])
         || _fh:=fopen('@'+_doc,'b',0,0,1);
            {? _fh.is_open()
            || _fh.fclose();
               _ret:=1;
               _again:=0
            ?};
            obj_del(_fh)
         ?}
      !};
      prgs_clr();
      _ret
   ?}
";

_res.delFiles:="
   _tmp:={? var_pres('_a')=type_of(0) || _a || 1 ?};
   _inTermMsg:=1;

   {? .TAB.first()
   || {!
      |? _deleted:=0;
         {? _tmp
         || {? .INTERM & exec('cli_functions','#system')=0
            || {? _inTermMsg
               || FUN.emsg('Próba usunięcia plików tymczasowych z katalogu użytkownika się nie powiodła.'
                  '%1'[exec('indevice_nacc_msg','#system')]);
                  _inTermMsg:=0
               ?}
            || _deleted+=ferase('@'+tmp_dir()+.DIRSEPK+.TAB.FILENAME,0)
            ?}
         ?};
         _deleted+=ferase(exec('filename','#string',.TAB.FILENAME),1);
         {? _deleted
         || .TAB.del(,1)=2
         || .TAB.next()
         ?}
      !}
   ?}
";

_res.makeMerge:="
   _toPdf:={? var_pres('_a')=type_of(1) || _a || 0 ?};
   _newPage:={? var_pres('_b')=type_of(1) || _b || 0 ?};
   .save2File();
   .doMerge(_newPage);
   .addToTab(.HLPFILE,'');
   .addToTab(.RESFILE,'');
   {? ~_toPdf || .openMerged({? .INTERM || 0 || 3 ?}) ?};
   {? ~_toPdf || .delFiles(0) ?}
";

_res.doc2pdfJ:="
   _word:='topdf';
   _wordToConvertPath:=pth_dir(.RESFILE);
   _jar:=pth_dir(.LIBFNAME) + .DIRSEP + .LIBFNAME;
   _utf8:={? .XUTF8 || 'true' || 'false' ?};
   _main_class:='pl.macrologic.export2excel.Main';
   _classpath:='%1'[_jar];
   _param:=obj_new('encoding','classpath', 'main_class','param1','param2','param3','param4');
   _param.encoding:='-Dfile.encoding=utf-8';
   _param.classpath:='-Djava.class.path=%1'[_classpath];
   _param.main_class:=_main_class;
   _param.param1:=pth_dir(exec('filename','#string',.TAB.FILENAME)) + .DIRSEP + exec('filename','#string',.TAB.FILENAME);
   _param.param2:=_utf8;
   _param.param3:=_word;
   _param.param4:=pth_dir(.RESFILE) + .DIRSEP + .RESFILE;
   _result:=jexec(_wordToConvertPath,'runOnAppServer=1,wait=1,stderr=program_err.log,stdout=program_out.log',_param)
";

_res.doc2pdf:="
   _wordToConvertPath:=pth_dir(exec('filename','#string',.TAB.FILENAME)) + .DIRSEP + exec('filename','#string',.TAB.FILENAME);
   _TAB:=exec('konwersja','paperless',_wordToConvertPath,'TAB');
   _name:=_TAB.bl_info('BLOB','NAME');
   _pth:='';
   VAR_DEL.delete('__keepfile');
   __keepfile:=_tmp_dir:=fmk_tmp_dir(0);


   {? type_of(_tmp_dir)<>type_of(~~)

   || _pth:=_tmp_dir.get_path();

      _file:='';

      _sep:=exec('sep','#file',2);

      _file:=_pth+_sep+_name;

      {? _TAB.bl_get('BLOB',_file,0)

      || _file
      || FUN.emsg('Nie udało się pobranie załącznika po stronie serwera'@)

      ?}
   || FUN.emsg('Nie udało się utworzenie katalogu tymczasowego po stronie serwera.'@)
   ?};
   _file
";

_res


\wyjatek_ER
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Obsługa wyjątkowej sytuacji związanej z błędek SPIS
::       ER/WRT/XP/23.25/2401/0032 Punkt czwarty świadectwa pracy nie mieści się na wydruku, decyzja ATA, 08.01.2024r.
::       Rozwiązanie należy traktować jako "protezę" do usunięcia. Należy dołączyć w standardzie obsługę danych
::       pobieranych z SYSMEMO. Obecnie następuje obcięcie do 100 znaków.
::   WE: _a [BUFOR] - Bufor tabeli importowanej
::----------------------------------------------------------------------------------------------------------------------
((_a.KOD='ZASWSW_ORO' | #_a.KOD<>0) & (_a.SYMBOL='ORO' | _a.SYMBOL='QORO')) |
((_a.KOD='ZASWSW_PRO' | #_a.KOD<>0) & (_a.SYMBOL='PRO' | _a.SYMBOL='QPRO')) |
((_a.KOD='PKD_ZASWSW_ORO' | #_a.KOD<>0) & (_a.SYMBOL='ORO' | _a.SYMBOL='QORO')) |
((_a.KOD='PKD_ZASWSW_PRO' | #_a.KOD<>0) & (_a.SYMBOL='PRO' | _a.SYMBOL='QPRO'))

:Sign Version 2.0 jowisz:1045 2024/01/15 14:39:43 da869a77006ddd70540105963e6ee0a2eb35b511b595006ec17b2e07db7351d556bdf95efd2e7cb27f513b4e0f8883619ded3e3335affde65f7f9cc2dfc907dc8408b057815f50ab812fdfe9623241e9b50bd4bb1387b42d134e23acf6fd45b8689c87cb95fccf5ada53b7408984056daa64ee5306c964faff3dcfffbe45f1b8
