:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: schemat.fml
:: Utworzony: 24.03.2015
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Plik zawiera formuły obsługi schematów danych.
::======================================================================================================================


\dane_sys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy wymagane, "systemowe" typy i schematy danych.
::----------------------------------------------------------------------------------------------------------------------
_typ:=exec('dodaj_ud_typ','schemat','PODZORG','Jednostki organizacyjne','T','T');
exec('dodaj_ud_sch','schemat',_typ,'STRORG','Struktura organizacyjna');

_typ:=exec('dodaj_ud_typ','schemat','OB_KOSZ','Obiekty kosztów');
exec('dodaj_ud_sch','schemat',_typ,'STR_KOSZ','Struktura obiektów kosztów');

_typ:=exec('dodaj_ud_typ','schemat','POZ_BUD','Pozycje budżetowe');
exec('dodaj_ud_sch','schemat',_typ,'STR_POZB','Struktura pozycji budżetowych');

_typ:=exec('dodaj_ud_typ','schemat','PROJ_REM','Projekty i remonty');
exec('dodaj_ud_sch','schemat',_typ,'STRPROJR','Struktura projektów i remontów');


_typ:=exec('dodaj_ud_typ','schemat','KLI_PROD','Klient / produkt');
exec('dodaj_ud_sch','schemat',_typ,'KL_PR','Struktura klient / produkt');
exec('dodaj_ud_sch','schemat',_typ,'MPK_KLPR','Struktura MPK / klient / produkt');

exec('firma','schemat','PODZORG','Jednostki organizacyjne','T','T');
~~


\dodaj_ud_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy informacje o typie danych. W przypadku pominięcia któregoś z opcjonalnych argumentów przyjęte będą war-
::       tości domyślne dla pól z wyjątkiem pola SYSTEM, któremu nadana zostanie wartość 'T'.
::   WE: _a - symbol
::       _b - opis
::       _c - (opcjonalny INTEGER) długość identyfikatora
::       _d - (opcjonalny STRING[1] T/N) informacja o poziomie
::       _e - (opcjonalny STRING[1] T/N) ograniczenie dostępu
::       _f - (opcjonalny STRING[1] T/N) zapis systemowy
::   WY: null - wystąpił błąd, wskazanie na - rekord utworzony/znaleziony rekord
:: UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
{? (_ref:=exec('szukaj_ud_typ','schemat',_a))<>null
|| return(_ref)
?};

UD_TYP.blank();
UD_TYP.SYMBOL:=_a;
UD_TYP.OPIS:=_b;
{? var_pres('_c')=type_of(0) & _c>0
|| UD_TYP.DLUGOSC:=_c
?};
{? var_pres('_d')=type_of('') & _d<>''
|| UD_TYP.POZIOM:=~-_d
?};
{? var_pres('_e')=type_of('') & _e<>''
|| UD_TYP.OCHRONA:=~-_e
?};
{? var_pres('_f')=type_of('') & _f<>''
|| UD_TYP.SYSTEM:=~-_f
|| UD_TYP.SYSTEM:='T'
?};

{? UD_TYP.add()
|| UD_TYP.ref()
|| null
?}


\dodaj_ud_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy informacje o schemacie danych. W przypadku pominięcia któregoś z opcjonalnych argumentów przyjęte będą
::       wartości domyślne dla pól z wyjątkiem pola SYSTEM, któremu nadana zostanie wartość 'T'.
::   WE: _a - wskazanie typu
::       _b - symbol
::       _c - opis
::       _d - (opcjonalny STRING[1] T/N) zapis systemowy
::   WY: null - wystąpił błąd, wskazanie na - rekord utworzony/znaleziony rekord
:: UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
UD_SCH.index('SYMBOL');
UD_SCH.prefix(_a);
{? UD_SCH.find_key(_b,_b)
|| return(UD_SCH.ref())
?};

UD_SCH.blank();
UD_SCH.UD_TYP:=_a;
UD_SCH.SYMBOL:=_b;
UD_SCH.OPIS:=_c;
{? var_pres('_d')=type_of('') & _d<>''
|| UD_SCH.SYSTEM:=~-_d
|| UD_SCH.SYSTEM:='T'
?};

_jest:=0;
UD_SCH.cntx_psh();
UD_SCH.index('SYMBOL');
UD_SCH.prefix(_a);
_jest:=UD_SCH.size();
UD_SCH.cntx_pop();
{? _jest
|| UD_SCH.UWAGI:=exec('ud_sch_uwagi_wp','schemat')
?};

{? UD_SCH.add()
|| UD_SCH.ref()
|| null
?}


\dodaj_ud_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Tworzy zapis w tabeli UD_SKL.
::   WE: _a - [STRING/_UD_TYP] - symbol/wskazanie typu danych
::       _b - [STRING] - symbol składnika
::       _c - [STRING] - opis składnika
::       [_d] - [STRING] - dostępność składnika do wyboru [T/N], jeśli niepoprawny, to przyjęty zostanie 'T'
::       [_e] - [STRING] - znacznik aktywności składnika [T/N], jeśli niepoprawny, to przyjęty zostanie 'T'
::   WY: wskazanie składnika jeśli udało się go dodać lub odnaleźć, wpp null
::----------------------------------------------------------------------------------------------------------------------
_ref:=exec('szukaj_ud_skl','schemat',_a,_b);

{? _ref<>null
|| return(_ref)
?};

_typ:=_a;
{? var_pres('_a')=type_of('')
|| _typ:=exec('szukaj_ud_typ','schemat',_a)
?};

{? _typ=null
|| return(null)
?};

UD_SKL.cntx_psh();
UD_SKL.clear();
UD_SKL.blank();

UD_SKL.UD_TYP:=_typ;
UD_SKL.SYMBOL:={? var_pres('_b')=type_of('') || _b || '' ?};
UD_SKL.OPIS:={? var_pres('_c')=type_of('') || _c || '' ?};
UD_SKL.LISTA:={? var_pres('_d')=type_of('') & _d<>'' & 'TN'*_d || _d || 'T' ?};
UD_SKL.AKTYWNY:={? var_pres('_e')=type_of('') & _e<>'' & 'TN'*_e || _e || 'T' ?};
{? UD_SKL.add()
|| _ref:=UD_SKL.ref()
?};

UD_SKL.cntx_pop();

_ref


\ud_sch_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuała obsługująca wybór schematu.
::       Formuła może być wykorzystywana jako argument atrybutu 'fml_val' parametru czynności jak również do obsługi
::       klawisza F3.
::   WE: [_a] [STRING/REFERENCE] - Typ schematu [domyślnie: PODZORG]
::       [_b] [STRING]           - Schemat "sugerowany".
::   WY: Tablica nazwana.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('REF','SYMBOL','OPIS');
_ret.REF:=null();
_ret.SYMBOL:=_ret.OPIS:='';

_ustaw:="_a.REF:=UD_SCH.ref(); _a.SYMBOL:=UD_SCH.SYMBOL; _a.OPIS:=UD_SCH.OPIS";

_typ:=
   {? var_pres('_a')=type_of('') & _a<>''
   || exec('szukaj_ud_typ','schemat',_a)
   |? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=UD_TYP
   || _a
   || exec('szukaj_ud_typ','schemat','PODZORG')
   ?};
{? _typ=null()
|| FUN.emsg('Błędny lub nieokreślony typ danych.'@);
   return(_ret)
?};

UD_SCH.cntx_psh();
UD_SCH.index('AKTYWNY');
UD_SCH.prefix(_typ,'T',);
UD_SCH.win_sel('WYB');
UD_SCH.win_edit('RED');
{? var_pres('_b')=type_of('') & UD_SCH.find_key(_b)
|| _ustaw(_ret)
|| UD_SCH.first()
?};
{? UD_SCH.select(,1,-1)
|| _ustaw(_ret)
?};
UD_SCH.cntx_pop();
_ret


\firma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Uzupelnia zapisy w tabeli UD_FIR
::   WE:  _a  [STRING] - symbol typu
::        _b  [STRING] - opis typu
::       [_c] [STRING] - wartosc dla UD_TYP.POZIOM
::       [_d] [STRING] - wartosc dla UD_TYP.OCHRONA
::   WY: wskazanie na znaleziony/utworzony rekord w tabeli UD_FIR
::  OLD: \firma/skid_ud.fml
:: UWAGA! Pole FIRMA zmiennej REF musi zawierac wskazanie na rekord reprezentujacy firme
::----------------------------------------------------------------------------------------------------------------------
{? REF.FIRMA
|| REF.FIRMA()
|| return(null)
?};

_fir:=FIRMA.ref();

UD_TYP.clear();
UD_TYP.index('SYMBOL');
{? ~UD_TYP.find_key(_a,_a)
|| UD_TYP.blank();
   UD_TYP.SYMBOL:=_a;
   UD_TYP.OPIS:=_b;
   UD_TYP.POZIOM:={? var_pres('_c')=type_of('') & -_c='n' || 'N' || 'T' ?};
   UD_TYP.OCHRONA:={? var_pres('_d')=type_of('') & -_d='n' || 'N' || 'T' ?};
   UD_TYP.SYSTEM:='T';
   {? ~UD_TYP.add(1)
   || return(null)
   ?}
?};
_typ:=UD_TYP.ref();

UD_FIR.clear();
UD_FIR.index('UD_TYP');
UD_FIR.prefix(_fir);
{? UD_FIR.find_key(_typ)
|| return(UD_FIR.ref())
?};

_skl:=null;
_sym:=FIRMA.SYMBOL;
UD_SKL.index('SYMBOL');
UD_SKL.prefix(_typ);
{? ~UD_SKL.find_key(_sym,_sym)
|| {? UD_SKL.size()=0 | FUN.ask(
         'Nie znaleziono składnika schematów %1 reprezentującego firmę.\n'
         'Czy utworzyć składnik %2?\n\n'
         'UWAGA: jeśli istnieje składnik o innym kodzie reprezentujący firmę\n'
         'należy wybrać opcję "Nie" a następnie wskazać odpowiedni składnik.\n'@
         [UD_TYP.SYMBOL,_sym+' - '+FIRMA.OPIS]
      )
   || UD_SKL.blank(1);
      UD_SKL.UD_TYP:=_typ;
      UD_SKL.SYMBOL:=_sym;
      UD_SKL.OPIS:=FIRMA.OPIS;
      UD_SKL.LISTA:='T';
      UD_SKL.AKTYWNY:='T';
      {? ~UD_SKL.add(1)
      || return(null)
      || _skl:=UD_SKL.ref
      ?}
   || _ret:=exec('ud_def_wybierz','schemat',_a,,,2,,1);
      {? _ret.UD_SKL<>null
      || _skl:=_ret.UD_SKL
      || return(null)
      ?}
   ?}
|| _skl:=UD_SKL.ref
?};

UD_FIR.blank(1);
UD_FIR.FIRMA:=_fir;
UD_FIR.UD_SKL:=_skl;
{? UD_FIR.add(1)
|| return(null)
?};

UD_FIR.ref


\domyslny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustala domyślny schemat dla wskazanego typu.
::   WE:  _a  [STRING/REFERENCE] - Symbol lub wskazanie typu.
::       [_b] [NUMBER]           - Rodzaj odpowiedzi:
::                                  0 - Prosta [domyślnie]:
::                                        wskazanie domyślnego lub pierwszego (wg. symbolu) schematu
::                                        lub null() jeśli wyszukiwanie nie powiodło się.
::                                  1 - Rozszerzona - tablica nazwana.
::       [_c] [NUMBER]           - Czy chronić konteksty tabel: UD_TYP, UD_SCH: 0*/1.
::   WY: Zależne od parametru _b.
::----------------------------------------------------------------------------------------------------------------------
_cntx:=var_pres('_c')=type_of(0) & _c;

_typ:=
   {? var_pres('_a')=type_of('')
   || exec('szukaj_ud_typ','schemat',_a,_cntx)
   |? var_pres('_a')=type_of(null())
   || _a
   || null()
   ?};

_ret:=obj_new('REF','SYMBOL','OPIS');
_ret.REF:=null();
_ret.SYMBOL:=_ret.OPIS:='';

{? _typ<>null()
|| {? _cntx
   || UD_SCH.cntx_psh()
   ?};
   UD_SCH.index('SYMBOL');
   UD_SCH.prefix(_typ);
   UD_SCH.blank(1);
   UD_SCH.UD_TYP:=_typ;
   UD_SCH.DOMYSLNY:='T';
   {? UD_SCH.find_rec() | UD_SCH.first()
   || _ret.REF:=UD_SCH.ref();
      _ret.SYMBOL:=UD_SCH.SYMBOL;
      _ret.OPIS:=UD_SCH.OPIS
   ?};
   {? _cntx
   || UD_SCH.cntx_pop()
   ?}
?};

{? var_pres('_b')=type_of(0) & _b
|| _ret
|| _ret.REF
?}


\ud_xxx_bu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wykorzystywana w akcji "Usuń przed" okienek WER tabel UD_???
::   WE: _a - alias do tabeli
::----------------------------------------------------------------------------------------------------------------------
{? exec('del_conf','#table',_a)
|| _bak:=no_msg(1);
   {? ~_a.del(1,1)
   || exec('del_warn','#table')
   ?};
   no_msg(_bak)
?}


\ud_skl_bga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AB] [8.60]
:: OPIS: Formuła przed akcją grupową popraw dla tabeli UD_SKL
::----------------------------------------------------------------------------------------------------------------------
_sym:=UD_SKL.UD_TYP().SYMBOL;
{? _sym='POZ_BUD'
|| UD_SKL.win_edit('PB_GRUP')
|? _sym='PODZORG'
|| UD_SKL.win_edit('ODD_GRUP')
|| UD_SKL.win_edit('RED_GRUP')
?};
SKIDXODD.blank(1);
UNPAR.blank(1);
UD_POM.blank(1);
ROZNE.blank(1);
UD_SKL.AKTYWNY:='T';
UD_SKL.LISTA:='T';
SKIDXODD.ODD().OD='';
ROZNE.FIRMASKL().SYMBOL='';
UNPAR.P2:=1;
{? _sym='POZ_BUD' || pozbud_grayed:=1; exec('be_skl','schemat',1) || pozbud_grayed:=0 ?};
_zat := UD_SKL.edit("exec('ud_skl_ae','schemat',1)");
{? _zat
|| {? _sym='POZ_BUD'
   || pozbud_skl_bga:=UNPAR.P2;
      waluta_skl_bga:=UNPAR.P1;
      dwaluta_skl_bga:=UD_POM.WAL;
      strona_skl_bga:=UNPAR.P7;
      miara_skl_bga:=ROZNE.JM;
      dokladnosc_skl_bga:=UNPAR.P3;
      liscie_skl_bga:=UNPAR.P10;
      nalicz_skl_bga:=UNPAR.P12;
      narast_skl_bga:=UNPAR.PF;
      pobran_skl_bga:=UNPAR.PF1;
      wyslan_skl_bga:=UNPAR.PF2;
      zapisy_skl_bga:=UNPAR.P8
   |? _sym='PODZORG'
   || jdsksi_skl_bga:=SKIDXODD.ODD;
      zfirmy_skl_bga:=ROZNE.FIRMASKL
   ?};
   akt_skl_bga:=UD_SKL.AKTYWNY;
   ewi_skl_bga:=UD_SKL.LISTA;
   g_size:=UD_SKL.sel_size();
   1
|| 0
?}


\ud_skl_aga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AB] [8.60]
:: OPIS: Formula po akcji grupowej popraw dla tabeli UD_SKL
::----------------------------------------------------------------------------------------------------------------------
FUN.info('Poprawiono rekordów: %1.'@[$g_size]);
VAR_DEL.delete('g_size');VAR_DEL.delete('akt_skl_bga');VAR_DEL.delete('ewi_skl_bga');VAR_DEL.delete('pozbud_skl_bga');
VAR_DEL.delete('waluta_skl_bga');VAR_DEL.delete('dwaluta_skl_bga');VAR_DEL.delete('pozbud_grayed');
VAR_DEL.delete('strona_skl_bga');VAR_DEL.delete('miara_skl_bga');VAR_DEL.delete('dokladnosc_skl_bga');
VAR_DEL.delete('liscie_skl_bga');VAR_DEL.delete('nalicz_skl_bga');VAR_DEL.delete('narast_skl_bga');
VAR_DEL.delete('pobran_skl_bga');VAR_DEL.delete('wyslan_skl_bga');VAR_DEL.delete('zapisy_skl_bga');
VAR_DEL.delete('jdsksi_skl_bga');VAR_DEL.delete('zfirmy_skl_bga')


\ud_skl_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: "Okienko przed" okienek wertowania tabeli UD_SKL.
::----------------------------------------------------------------------------------------------------------------------
UD_SKL.hdr_sel();
UD_SKL.hdr_sel(UD_TYP.OPIS);
1


\ud_skl_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: "Przed edycją" (dołącz/popraw/...) okienek tabeli UD_SKL.
::----------------------------------------------------------------------------------------------------------------------
UD_SKL.hdr_edit();
UD_SKL.win_edit('WZO');
UD_SKL.hdr_edit();
UD_SKL.hdr_edit(UD_TYP.OPIS);
UD_SKL.win_patt(UD_SKL.win_edit('?'));
{? ~UD_SKL.sel_size()
|| {? var_pres('ud_skl_pb')>0 | UD_TYP.SYMBOL='POZ_BUD'
   || UD_SKL.win_edit('REDPB');
      UD_SKL.hdr_edit()
   || UD_SKL.win_edit('RED');
      UD_SKL.hdr_edit();
      UD_SKL.hdr_edit(UD_TYP.OPIS)
   ?}
?};
UD_SKL.hdr_edit();
1


\ud_skl_ad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: "Dołącz po" okienka WER tabeli UD_SKL
::  OLD: \menu_ba/skid_ud.fml
::  OLD: \menu_aa/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
{? UD_SKL.UD_TYP().SYMBOL='STANPRAC'
|| exec('dod_prac','control');
   return(0)
?};
_fml_s:=UD_SKL.fld_fml('SYMBOL','BEFORE_EDIT',"1");

_pb:=UD_SKL.UD_TYP().SYMBOL='POZ_BUD';
_prac:=UD_SKL.UD_TYP().SYMBOL='STANPRAC';

_ret:=0;
_red:='';
UD_SKL.blank();
{? _pb || exec('be_skl','schemat',0) ?};
:: obsługa połączenia jednostek organizacyjnych z jednostkami księgowymi
{? UD_SKL.UD_TYP().SYMBOL='PODZORG'
|| SKIDXODD.blank(1);
   _red:=UD_SKL.win_edit('?');
   UD_SKL.win_edit('RED_ODD');
   ODD.fld_fml('FIRMA','BLANK',"exec('szukaj_firmy','schemat',UD_SKL.SYMBOL)");
   ROZNE.FIRMASKL:=null
?};
{? UD_SKL.edit("exec('ud_skl_ae','schemat',0)")
|| _ret:=UD_SKL.add();
:: obsługa połączenia jednostek organizacyjnych z jednostkami księgowymi
   {? _ret & UD_SKL.UD_TYP().SYMBOL='PODZORG'
   || SKIDXODD.cntx_psh();
      SKIDXODD.prefix();
      SKIDXODD.UD_SKL:=UD_SKL.ref();
      SKIDXODD.add();
      SKIDXODD.cntx_pop()
   ?};
   {? _ret & _pb
   || exec('ae_skl','schemat',0)


   ?}
?};

{? _red<>'' || UD_SKL.win_edit(_red) ?};

ODD.fld_fml('FIRMA','BLANK',"*");
UD_SKL.fld_fml('SYMBOL','BEFORE_EDIT',_fml_s);
_ret


\ud_skl_ap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: "Popraw po" okienka WER tabeli UD_SKL, również dla akcji grupowej
::  OLD: \menu_ba/skid_ud.fml
::  OLD: \menu_aa/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
{? UD_SKL.UD_TYP().SYMBOL='STANPRAC'
|| exec('dod_prac','control');
   return(0)
?};
{? ~UD_SKL.sel_size()
||
   _fml_s:=UD_SKL.fld_fml('SYMBOL','BEFORE_EDIT',$$~exec('symbol_in_use','schemat',UD_SKL.UD_TYP,UD_SKL.SYMBOL));
   _ret:=0;
   _red:='';
   UD_SKL.get();
   _pb:=UD_SKL.UD_TYP().SYMBOL='POZ_BUD';
   {? _pb || exec('be_skl','schemat',1) ?};
::obsługa połączenia jednostek organizacyjnych z jednostkami księgowymi
   {? UD_SKL.UD_TYP().SYMBOL='PODZORG'
   || SKIDXODD.index('UD_SKL');
      SKIDXODD.prefix(UD_SKL.ref());
      {? ~SKIDXODD.first() || SKIDXODD.blank(); _blank:=1 || _blank:=0 ?};
      _red:=UD_SKL.win_edit('?');
      UD_SKL.win_edit('RED_ODD');
      ODD.fld_fml('FIRMA','BLANK',"exec('szukaj_firmy','schemat',UD_SKL.SYMBOL)");
      ROZNE.FIRMASKL:=SKIDXODD.ODD().FIRMA
   ?};
   SKIDXD.cntx_psh();
   {? UD_SKL.edit("exec('ud_skl_ae','schemat',1)")
   || _ret:=UD_SKL.put();
      {? _ret & UD_SKL.UD_TYP().SYMBOL='PODZORG'
      || {? _blank || SKIDXODD.add() || SKIDXODD.put() ?}
      ?};
      {? _ret & _pb
      || exec('ae_skl','schemat',1)
      ?}
   ?};
   SKIDXD.cntx_pop();
   {? _red<>'' || UD_SKL.win_edit(_red) ?};
   ODD.fld_fml('FIRMA','BLANK',"*");
   UD_SKL.fld_fml('SYMBOL','BEFORE_EDIT',_fml_s)
||
   _fml_s:=UD_SKL.fld_fml('SYMBOL','BEFORE_EDIT',$$~exec('symbol_in_use','schemat',UD_SKL.UD_TYP,UD_SKL.SYMBOL));
   _ret:=0;
   _pb:=UD_SKL.UD_TYP().SYMBOL='POZ_BUD';
   UD_SKL.AKTYWNY:=akt_skl_bga;
   UD_SKL.LISTA:=ewi_skl_bga;
   {? UD_SKL.UD_TYP().SYMBOL='PODZORG'
   || SKIDXODD.index('UD_SKL');
      SKIDXODD.prefix(UD_SKL.ref());
      {? ~SKIDXODD.first() || SKIDXODD.blank(); _blank:=1 || _blank:=0 ?};
      ROZNE.FIRMASKL:=zfirmy_skl_bga;
      SKIDXODD.ODD:=jdsksi_skl_bga
   ?};
   SKIDXD.cntx_psh();
   _ret:=UD_SKL.put();
   {? _ret & UD_SKL.UD_TYP().SYMBOL='PODZORG'
   || {? _blank || SKIDXODD.add() || SKIDXODD.put() ?}
   ?};
   {? _ret & _pb
   || exec('ae_grp_skl','schemat',1)
   ?};
   SKIDXD.cntx_pop();
   ODD.fld_fml('FIRMA','BLANK',"*");
   UD_SKL.fld_fml('SYMBOL','BEFORE_EDIT',_fml_s)
?};
_ret


\ud_skl_au
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: "Usuń po" okienka WER tabeli UD_SKL
::  OLD: \menu_ba/skid_ud.fml
::  OLD: \menu_aa/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
: sprawdź, czy element jest wykorzystywany w słowniku użytkownika
{? exec('symbol_in_use','schemat',UD_SKL.UD_TYP,UD_SKL.SYMBOL)
|| FUN.emsg(
      'Element jest wykorzystywany w słowniku użytkownika.\n'
      'Usunięcie zapisu nie jest możliwe.'@
   );
   return()
|? exec('can_del_ud','schemat',2)=2
|| FUN.info('Element użyty w widokach danych.\nUsunięcie niemożliwe.'@);
   return()
?};

exec('ud_xxx_bu','schemat',UD_SKL)


\ud_skl_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: "Po edycji" tabeli UD_SKL
::   WE: _a - tryb modyfikacji: 0 - dodawanie, 1 - poprawianie
::  OLD: \spr_rek/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
: sprawdź wypełnienie i unikalność
_chk:=__CHK.table(UD_SKL,_a,,'SYMBOL','OPIS');
{? type_of(_chk)<>type_of(0) | ~_chk
:  porażka podstawowego testu
|| return(_chk)
?};

_len:=UD_SKL.UD_TYP().DLUGOSC;
{? _len>0 & +form(UD_SKL.SYMBOL)<>_len
|| return(__CHK.err_fld(UD_SKL,'SYMBOL',1,'Oczekiwana liczba znaków symbolu: %1.'@ [$_len]))
?};

: dodatkowe testy poprawności
{? UD_SKL.UD_TYP().SYMBOL='POZ_BUD' & ((1+UD_SKL.OPIS)='_' | (UD_SKL.OPIS+1)='_')
|| return(__CHK.err_fld(UD_SKL,'OPIS',1,'Tekst nie może zaczynać ani kończyć się znakiem pokreślenia.'@))
?};

1


\ud_skl_symbol_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsluga klawisza F3 dla pól wykorzystywanych do wyboru składnika w okienku drzewka. Wykorzystanie w innych
::       przypadkach spowoduje błąd ze względu na użycie fld.
::   WE: _a - symbol lub wskazanie typu danych - domyślnie 'PODZORG'
::       _b - symbol dziedziny, ignorowany dla typów bez włączonej ochrony, pominięcie dla typu z ochroną spowoduje
::          zignorowanie uprawnień użytkownika (pozwoli na wybranie dowolnego składnika)
::       _c - ignoruj blokadę wykorzystania w ewidencji:
::          1 - wybór możliwy po potwierdzeniu
::          2 - wybór możliwy, potwierdzenie nie jest wymagane
::          w pozostałych przypadkach wybór składnika pomijanego w ewidencji nie jest możliwy
::   WY: symbol wybranego składnika
::----------------------------------------------------------------------------------------------------------------------
exec('ud_skl_sel_dlg','schemat',
   {? var_pres('_a')>0 || _a || ~~ ?},
   {? var_pres('_b')>0 || _b || ~~ ?},
   {? var_pres('_c')>0 || _c || ~~ ?},
   fld(),
   0
)


\ud_skl_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wybór składnika z okienka wertowania.
::   WE: _a - symbol lub wskazanie typu danych - domyślnie 'PODZORG'
::       _b - symbol dziedziny, ignorowany dla typów bez włączonej ochrony, pominięcie dla typu z ochroną spowoduje
::          zignorowanie uprawnień użytkownika (pozwoli na wybranie dowolnego składnika)
::       _c - ignoruj blokadę wykorzystania w ewidencji:
::          1 - wybór możliwy po potwierdzeniu
::          2 - wybór możliwy, potwierdzenie nie jest wymagane
::          w pozostałych przypadkach wybór składnika pomijanego w ewidencji nie jest możliwy
::       _d - symbol składnika, który ma być ustawiony jako bieżący, może być pominięty
::       _e - rodzaj zwracanego wyniku
::          1 - wynik rozszerzony - tablica nazwana o strukturze
::             REF - wskazanie wybranego UD_SKL
::             SYMBOL - symbol wybranego UD_SKL
::             OPIS - opis wybranego UD_SKL
::          w pozostałych przypadkach symbol składnika
::   WY: zgodny z określonym przez argument _e
::----------------------------------------------------------------------------------------------------------------------
exec('ud_skl_sel_dlg','schemat',
   {? var_pres('_a')>0 || _a || ~~ ?},
   {? var_pres('_b')>0 || _b || ~~ ?},
   {? var_pres('_c')>0 || _c || ~~ ?},
   {? var_pres('_d')>0 || _d || '' ?},
   {? var_pres('_e')>0 || _e || ~~ ?}
)


\ud_skl_sel_dlg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wybór składnika z okienka wertowania.
::   WE: _a - symbol/wskazanie typu
::       _b - symbol dziedziny
::       _c - wybór pomijanych
::       _d - symbol składnika
::       _e - typ zwracanego wyniku
::   WY: symbol wybranego składnika
:: UWAGA: formuła wyjątkowo "techniczna" odradza się bezpośrednie wykorzystanie
::----------------------------------------------------------------------------------------------------------------------
_val:=obj_new('REF','SYMBOL','OPIS');
_val.REF:=null;
_val.SYMBOL:='';
_val.OPIS:='';

_org:=_d;
_typ:=null;
_sys:=null;
_nbe:=0;

_ret:={? var_pres('_e')<>type_of(0) | _e=0 || "_a.SYMBOL" || "_a" ?};

: ustal typ danych
_typ:=
   {? var_pres('_a')=type_of('') & _a<>''
   || exec('szukaj_ud_typ','schemat',_a)
   |? var_pres('_a')=type_of(null) & _a<>null
   || _a
   || exec('szukaj_ud_typ','schemat','PODZORG')
   ?};
: czy ok?
{? _typ=null
|| FUN.emsg('Błędny lub nieokreślony typ danych.'@);
   return(_ret(_val))
?};

: czy uprawnienia?
{? UD_TYP.OCHRONA='T'
|| {? var_pres('_b')=type_of('') & _b<>''
   || {? (_sys:=exec('szukaj_udb_sys','schemat',_b,UD_TYP.SYMBOL))=null
      || FUN.emsg('Brak informacji o wykorzystaniu typu w dziedzinie.'@);
         return(_ret(_val))
      ?}
   ?}
?};

: ignoruj blokadę wykorzystania
{? var_pres('_c')=type_of(0)
|| {? _c=1 | _c=2
   || _nbe:=_c
   ?}
?};

: ustaw domyślne okienka
exec('ud_wnd','schemat');
: ustal kontekst dla edycji
UD_SKL.cntx_psh();
UD_SKL.win_sel('WYB');
UD_SKL.index('SYMBOL');
UD_SKL.prefix(_typ);
: znajdź składnik
{? UD_SKL.find_key(_org,_org)
|| _val.REF:=UD_SKL.ref();
   _val.SYMBOL:=UD_SKL.SYMBOL;
   _val.OPIS:=UD_SKL.OPIS
?};

: wybierz
_loop:=1;
{!
|? _loop
|! _test:=1;
   {? UD_SKL.select(,1)
   || {? _nbe<>2 & UD_SKL.LISTA<>'T'
      || {? _nbe=1
         || _test:=FUN.ask(
               'Element jest oznaczony jako niedostępny w ewidencji.\n'
               'Czy na pewno wybrać wskazany zapis?'@
            )
         || FUN.info('Element nie może być wykorzystany w ewidencji danych.'@);
            _test:=0
         ?}
      ?};
      {? _test<>0 & _sys<>null
      || {? (_test:=exec('test_usr_upr','schemat',_sys,OPERATOR.USER,UD_SKL.ref()))=0
         || FUN.info('Element nie może być użyty ze względu na brak uprawnień.'@)
         ?}
      ?};
      {? _test<>0
      || _val.REF:=UD_SKL.ref();
         _val.SYMBOL:=UD_SKL.SYMBOL;
         _val.OPIS:=UD_SKL.OPIS;
         _loop:=0
      ?}
   || _loop:=0
   ?}
!};

: porządki
UD_SKL.cntx_pop();

: wybór
_ret(_val)


\ud_def_symbol_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsluga klawisza F3 dla pól wykorzystywanych do wyboru składnika w okienku drzewka. Wykorzystanie w innych
::       przypadkach spowoduje błąd ze względu na użycie fld.
::   WE: _a - symbol lub wskazanie typu danych - domyślnie 'PODZORG'
::       _b - symbol lub wskazanie schematu danych - jeśli pominięty, to przyjęty zostanie domyślny w danym typie
::       _c - symbol dziedziny, ignorowany dla typów bez włączonej ochrony, pominięcie dla typu z ochroną spowoduje
::          zignorowanie uprawnień użytkownika (pozwoli na wybranie dowolnego składnika)
::       _d - ignoruj blokadę wykorzystania w ewidencji:
::          1 - wybór możliwy po potwierdzeniu
::          2 - wybór możliwy, potwierdzenie nie jest wymagane
::          w pozostałych przypadkach wybór składnika pomijanego w ewidencji nie jest możliwy
::   WY: symbol wybranego składnika
::  OLD: \wyd_f3/kali_ud.fml
::----------------------------------------------------------------------------------------------------------------------
exec('ud_def_sel_dlg','schemat',
   {? var_pres('_a')>0 || _a || ~~ ?},
   {? var_pres('_b')>0 || _b || ~~ ?},
   {? var_pres('_c')>0 || _c || ~~ ?},
   {? var_pres('_d')>0 || _d || ~~ ?},
   {? app_info('web_sesid')<>'' & var_pres('wart_wym')>0 || wart_wym || fld() ?},
   0
)


\ud_def_tablica_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [21.37]
:: OPIS: Obsluga klawisza F3 dla pól wykorzystywanych do wyboru składnika w okienku drzewka. Wykorzystanie w innych
::       przypadkach spowoduje błąd ze względu na użycie fld.
::   WE: _a - symbol lub wskazanie typu danych - domyślnie 'PODZORG'
::       _b - symbol lub wskazanie schematu danych - jeśli pominięty, to przyjęty zostanie domyślny w danym typie
::       _c - symbol dziedziny, ignorowany dla typów bez włączonej ochrony, pominięcie dla typu z ochroną spowoduje
::          zignorowanie uprawnień użytkownika (pozwoli na wybranie dowolnego składnika)
::       _d - ignoruj blokadę wykorzystania w ewidencji:
::          1 - wybór możliwy po potwierdzeniu
::          2 - wybór możliwy, potwierdzenie nie jest wymagane
::          w pozostałych przypadkach wybór składnika pomijanego w ewidencji nie jest możliwy
::   WY:  tablica z elementami nazwanymi
::----------------------------------------------------------------------------------------------------------------------
exec('ud_def_sel_dlg','schemat',
   {? var_pres('_a')>0 || _a || ~~ ?},
   {? var_pres('_b')>0 || _b || ~~ ?},
   {? var_pres('_c')>0 || _c || ~~ ?},
   {? var_pres('_d')>0 || _d || ~~ ?},
   {? app_info('web_sesid')<>'' & var_pres('wart_wym')>0 || wart_wym || fld() ?},
   1
)


\ud_def_symbol_x_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Przed wyświetleniem pola emulującego słownik składników schematu danych. Formuła przypisuje polu tekstowemu
::       symbol zrelacjonowanego składnika, wskazywany przez parametry. Jeżeli jednak pole (zmiennej), na której odbywa
::       się redakcja ma taki sam akronim jak pole (tabeli), w której przechowywana jest wartość złączenia, to możemy
::       poprzestać na wartościach domyslnych parametrów.
::   WE: [_a] [TABLE]  - Uchwyt tabeli [domyślnie: tabela, której okno jest aktywne].
::       [_b] [STRING] - Akronim pola [domyślnie: akronim redagowanego pola].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:={? var_pres('_a')=type_of(SYSLOG) || _a || cur_tab() ?};
_fld:={? var_pres('_b')=type_of('') || _b || cur_afld() ?};

fld(($('_a.'+_fld+'().SYMBOL'))(_TAB))


\ud_def_symbol_x_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Po redagowaniu pola emulującego słownik jednostek organizacyjnych. Formuła przypisuje polu (tabeli) wartość
::       relacji na podstawie symbolu w redagowanym polu (zmiennej).
::   WE: [_a] [TABLE]            - Uchwyt tabeli [domyślnie: tabela, której okno jest aktywne].
::       [_b] [STRING]           - Akronim pola [domyślnie: akronim redagowanego pola].
::       [_c] [REFERENCE/STRING] - Symbol lub wskazanie typu danych [domyślnie: 'PODZORG'].
::       [_d] [STRING]           - Symbol dziedziny produktowej (do weryfikacji uprawnień) [domyślnie: brak].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:={? var_pres('_a')=type_of(SYSLOG) || _a || cur_tab() ?};
_fld:={? var_pres('_b')=type_of('') || _b || cur_afld() ?};
_typ:={? (var_pres('_c')=type_of(SYSLOG) & ref_tab(_c)=UD_TYP) | var_pres('_c')=type_of('') || _c || 'PODZORG' ?};
_dom:={? var_pres('_d')=type_of('') || _d || '' ?};

($('_a.'+_fld+':=_b'))(_TAB,exec('ud_skl_symbol_ae','schemat',_typ,_dom));
1


\ud_def_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wybór składnika z okienka wertowania ze strukturą.
::   WE: _a - symbol lub wskazanie typu danych - domyślnie 'PODZORG'
::       _b - symbol lub wskazanie schematu danych - jeśli pominięty, to przyjęty zostanie domyślny w danym typie
::       _c - symbol dziedziny, ignorowany dla typów bez włączonej ochrony, pominięcie dla typu z ochroną spowoduje
::          zignorowanie uprawnień użytkownika (pozwoli na wybranie dowolnego składnika)
::       _d - ignoruj blokadę wykorzystania w ewidencji:
::          1 - wybór możliwy po potwierdzeniu
::          2 - wybór możliwy, potwierdzenie nie jest wymagane
::          w pozostałych przypadkach wybór składnika pomijanego w ewidencji nie jest możliwy
::       _e - symbol składnika, który ma być ustawiony jako bieżący, może być pominięty
::       _f - rodzaj zwracanego wyniku
::          1 - wynik rozszerzony - tablica nazwana o strukturze
::             REF - wskazanie wybranego UD_DEF
::             UD_DEF - wskazanie UD_DEF nadrzędnego w stosunku do wybranego UD_DEF
::             UD_SKL - wskazanie UD_SKL właściwego dla wybranego UD_DEF
::             UD_SCH - wskazanie schemtu właściwego dla wybranego UD_DEF
::             SYMBOL - symbol UD_SKL właściwy dla wybranego UD_DEF
::             OPIS - opis UD_SKL właściwy dla wybranego UD_DEF
::             SCIEZKA - ścieżka do elementu
::          w pozostałych przypadkach symbol składnika
::       _g - wynik po rezygnacji z wyboru (obsługa ESC)
::          0 - komórka wejściowa (parametr _e)  (domyślnie)
::          1 - wartości puste
::       _h - nie odcinaj drzewa do poziomu firmy
::          0 - drzewo jest odcinane do bieżącej firmy (domyślnie)
::          1 - prezentowane jest pełne drzewo
::   WY: zgodny z określonym przez argument _f
::----------------------------------------------------------------------------------------------------------------------
exec('ud_def_sel_dlg','schemat',
   {? var_pres('_a')>0 || _a || ~~ ?},
   {? var_pres('_b')>0 || _b || ~~ ?},
   {? var_pres('_c')>0 || _c || ~~ ?},
   {? var_pres('_d')>0 || _d || ~~ ?},
   {? var_pres('_e')>0 || _e || '' ?},
   {? var_pres('_f')>0 || _f || ~~ ?},
   {? var_pres('_g')>0 || _g || 0 ?},
   {? var_pres('_h')>0 || _h || 0 ?}
)


\ud_def_sel_dlg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wybór składnika z okienka wertowania ze strukturą.
::   WE: [_a] [STRING/REFERENCE] - symbol/wskazanie typu, [domyślnie: 'PODZORG']
::       [_b] [STRING/REFERENCE] - symbol/wskazanie schematu [domyślnie: schemat domyślny]
::       [_c] [STRING] - symbol dziedziny [parametr obowiązkowy dla typu z włączonymi uprawnieniami]
::       [_d] [NUMBER] - wybór pomijanych [domyslnie: 0]
::                       0 - element nie może być wykorzystany w ewidencji danych
::                       1 - użycie elementu wymaga potwierdzenia
::                       2 - element będzie użyty bez potwierdzenia
::       [_e] [STRING] - symbol/opis składnika na którym będzie ustawiony kursor [domyślnie: '']
::       [_f] [NUMBER] - typ zwracanego wyniku [domyślnie: 0]
::                       0 - symbol wybranego składnika
::                       1 - tablica z elementami nazwanymi
::       [_g] [NUMBER] - wynik po rezygnacji z wyboru (obsługa ESC) [domyślnie: 0]
::                       0 - komórka wejściowa (parametr _e)
::                       1 - wartości puste
::       [_h] [NUMBER] - nie odcinaj drzewa do poziomu firmy [domyślnie: 0]
::                       0 - drzewo jest odcinane do bieżącej firmy
::                       1 - prezentowane jest pełne drzewo
::   WY: zależy od parametru _f
:: UWAGA: formuła wyjątkowo "techniczna" odradza się bezpośrednie wykorzystanie
::----------------------------------------------------------------------------------------------------------------------
_val:=exec('ud_def_info','schemat');

_org:={? var_pres('_e')=type_of('') || _e || '' ?};
_typ:=null;
_sch:=null;
_sys:=null;
_skl:=null;
_nbe:=0;

_ret:={? var_pres('_f')=type_of(0) & _f || "_a" || "_a.SYMBOL" ?};
_empty:=var_pres('_g')=type_of(0) & _g;

: ustal typ danych
_typ:=
   {? var_pres('_a')=type_of('') & _a<>''
   || exec('szukaj_ud_typ','schemat',_a)
   |? var_pres('_a')=type_of(null) & _a<>null
   || _a
   || exec('szukaj_ud_typ','schemat','PODZORG')
   ?};
: czy ok?
{? _typ=null
|| FUN.emsg('Błędny lub nieokreślony typ danych.'@);
   return(_ret(_val))
?};

: ustal schemat danych
_sch:=
   {? var_pres('_b')=type_of('') & _b<>''
   || exec('szukaj_ud_sch','schemat',_typ,_b)
   |? var_pres('_b')=type_of(null) & _b<>null
   || _b
   || exec('domyslny','schemat',_typ)
   ?};
: czy ok?
{? _sch=null
|| FUN.emsg('Błędny lub nieokreślony schemat danych.'@);
   return(_ret(_val))
?};

: czy uprawnienia?
{? UD_TYP.OCHRONA='T'
|| {? var_pres('_c')=type_of('') & _c<>''
   || {? (_sys:=exec('szukaj_udb_sys','schemat',_c,UD_TYP.SYMBOL))=null
      || FUN.emsg('Brak informacji o wykorzystaniu typu w dziedzinie.'@);
         return(_ret(_val))
      ?}
   ?}
?};

: ignoruj blokadę wykorzystania
{? var_pres('_d')=type_of(0)
|| {? _d=1 | _d=2
   || _nbe:=_d
   ?}
?};

: znajdź składnik
UD_DEF.cntx_psh();
UD_DEF.index('SCHSYM');
UD_DEF.prefix(_sch);
{? UD_DEF.find_key(_org,_org)
|| _val.read()
|| UD_DEF.index('SCHOPIS');
   UD_DEF.prefix(_sch);
   {? UD_DEF.find_key(_org,)
   || _val.read()
   ?}
?};

: ustaw domyślne okienka
exec('ud_wnd','schemat');
: ustal kontekst przeglądania
UD_SKL.cntx_psh();
UD_POZ.cntx_psh();
{? app_info('web_sesid')=''
|| UD_DEF.win_sel('WYB');
   {? exec('chk_role','#b__box',OPERATOR.USER,'ZWS_PAR_RSCH')
   || UD_DEF.dnd_sel('WYB',,'records.UD_DEF',"exec('ud_def_dnd','schemat')")
   ?}
?};
UD_DEF.index('SYMBOL');
UD_DEF.prefix(_sch);

: odcięcie drzewka do poziomu firmy
: (o ile firma została określona)

{? var_pres('_h')<>type_of(0) | _h=0
|| _skl:=exec('ud_skl_firma','schemat',_typ)
?};

{? app_info('web_sesid')=''
|| exec('ud_def_root','schemat',UD_DEF.win_sel('?'),_sch,_skl);
   {? UD_SCH.BLOKADA='T'
   || _fml:="";
      _ag:='DPUE:D'
   || _fml:="exec('ud_def_dnd','schemat')";
      _ag:=''
   ?};

:: "Przesuń" dostępne w wybieraczu, ale nie w wybieraczu
:: wywołanym z wybieracza - blokada powstania stosu okien
   _done:=0;
   _fstk:=form_stack(-1);
   _name:=_fstk[1].name;
   _file:=_fstk[1].file;
   {! _ii:=2..obj_len(_fstk)
   |? ~_done
   |! {? _name=_fstk[_ii].name & _file=_fstk[_ii].file
      || UD_DEF.actions(UD_DEF.win_sel('?'),'E');
         _done:=1
      ?}
   !};

   UD_DEF.dnd_sel(UD_DEF.win_sel('?'),,'records.UD_DEF',_fml);
   UD_DEF.actions_grayed(UD_DEF.win_sel('?'),_ag);
:  wybierz
   _loop:=1;
   {!
   |? _loop
   |! _test:=1;
      {? UD_DEF.select(,1)
      || {? _nbe<>2 & UD_DEF.UD_SKL().LISTA<>'T'
         || {? _nbe=1
            || _test:=FUN.ask(
                  'Element jest oznaczony jako niedostępny w ewidencji.\n'
                  'Czy na pewno wybrać wskazany zapis?'@
               )
            || FUN.info('Element nie może być wykorzystany w ewidencji danych.'@);
               _test:=0
            ?}
         ?};
         {? _test<>0 & _sys<>null
         || {? (_test:=exec('test_usr_upr','schemat',_sys,OPERATOR.USER,UD_DEF.UD_SKL))=0
            || FUN.info('Element nie może być użyty ze względu na brak uprawnień.'@)
            ?}
         ?};
         {? _test<>0
         || _val.REF:=UD_DEF.ref();
            _val.UD_DEF:=UD_DEF.UD_DEF;
            _val.UD_SKL:=UD_DEF.UD_SKL;
            _val.UD_SCH:=UD_DEF.UD_SCH;
            _val.SYMBOL:=UD_DEF.SYMBOL;
            _val.OPIS:=UD_DEF.OPIS;
            _val.SCIEZKA:=UD_DEF.SCIEZKA;
            _loop:=0
         ?}
      || {? _empty
         || _val.clear()
         ?};
         _loop:=0
      ?}
   !};

:  porządki
   UD_DEF.dnd_sel('WYB',,'records.UD_DEF',"");
   UD_DEF.dnd_sel(UD_DEF.win_sel('?'),,'records.UD_DEF',"");
   UD_DEF.actions_grayed(UD_DEF.win_sel('?'));
   UD_DEF.actions(UD_DEF.win_sel('?'))

|| UD_SCH.prefix();
   {? UD_SCH.seek(_sch)
   || UD_SCH.UD_TYP()
   ?};
   _okn:={? UD_TYP.POZIOM='T' || 'RED_POZW' || 'RED_SMPW' ?};
   exec('ud_def_root','schemat','WER_WT',_sch,_skl);

   {? var_pres('tab_obs')>0
   || VAR_DEL.delete('tab_obs');
      UD_DEF.web_select('DICTW_WT',,,_okn)
   || UD_DEF.web_select('DICT_WT',,,_okn)
   ?}
?};
UD_DEF.cntx_pop();
UD_POZ.cntx_pop();
UD_SKL.cntx_pop();

: wybór
_ret(_val)


\ud_wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustawia domyślne okienka tabel UD_*
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')<>''
|| 1
||
: typy
   UD_TYP.hdr_sel();
   UD_TYP.hdr_edit();
   UD_TYP.win_sel('WER');
   UD_TYP.win_dict('SLO');
   UD_TYP.win_edit('RED');
   UD_TYP.win_patt('WZO');
   UD_TYP.hdr_edit();
   UD_TYP.hdr_sel();
: schematy
   UD_SCH.hdr_sel();
   UD_SCH.hdr_edit();
   UD_SCH.win_sel('WER');
   UD_SCH.win_dict('SLO');
   UD_SCH.win_edit('RED');
   UD_SCH.win_patt('WZO');
   UD_SCH.hdr_edit();
   UD_SCH.hdr_sel();
: poziomy
   UD_POZ.hdr_sel();
   UD_POZ.hdr_edit();
   UD_POZ.win_sel('WER');
   UD_POZ.win_dict('WER');
   UD_POZ.win_edit('RED');
   UD_POZ.win_patt('RED');
   UD_POZ.hdr_edit();
   UD_POZ.hdr_sel();
: składniki
   UD_SKL.hdr_sel();
   UD_SKL.hdr_edit();
   UD_SKL.win_sel('WER');
   UD_SKL.win_dict('WER');
   UD_SKL.win_edit('RED');
   UD_SKL.win_patt('WZO');
   UD_SKL.hdr_edit();
   UD_SKL.hdr_sel();
: elementy
   UD_DEF.hdr_sel();
   UD_DEF.hdr_edit();
   UD_DEF.win_sel('WER');
   UD_DEF.win_dict('WER');
   UD_DEF.win_edit('RED_POZ');
   UD_DEF.win_patt('RED_POZ');
   UD_DEF.hdr_edit();
   UD_DEF.hdr_sel()
?};
~~


\ud_def_dnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: "Drag and drop" okienka WER tabeli UD_DEF - zastępuje "Przesuń"
::  OLD: \menu_ba/skid_ud.fml
::  OLD: \menu_aa/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
UD_DEF.cntx_psh();
_state:=no_msg(1);
_test:=1;
_name:=dnd_info('table_name');
_drop:=dnd_info('dest_record');
_drag:=dnd_info('dropped_records');
_loop:=_drag.first();
{? UD_TYP.SYMBOL='PODZORG' & (UD_SCH.SYMBOL='STRORG' | UD_SCH.DOMYSLNY='T')
|| _test:=exec('test_jk_dla_jo','schemat',_drag.REF,_name,_drop,1)
?};
errno();
do();
{!
|? _loop & _test
|! {? UD_DEF.seek(_drag.REF,_name) & _drag.CRC=UD_DEF.crc()
   || UD_DEF.UD_DEF:=#_drop;
      _test:=UD_DEF.put()
   || _test:=0
   ?};
   _loop:=_drag.next()
!};
{? ~_test
|| undo();
   exec('bind_node_error','#tree')
?};
end();

no_msg(_state);
UD_DEF.cntx_pop()


\ud_skl_symbol_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po redakcji pól wykorzystywanych do określenia UD_SKL. Wykorzystanie w innych przypadkach spowoduje błąd ze
::       względu na użycie fld.
::   WE: _a - symbol lub wskazanie typu danych - domyślnie 'PODZORG'
::       _b - symbol dziedziny, ignorowany dla typów bez włączonej ochrony, pominięcie dla typu z ochroną spowoduje
::            zignorowanie uprawnień użytkownika (pozwoli na wybranie dowolnego składnika)
::       _c - ignoruj blokadę wykorzystania w ewidencji:
::          1 - wybór możliwy po potwierdzeniu
::          2 - wybór możliwy, potwierdzenie nie jest wymagane
::          w pozostałych przypadkach wybór składnika pomijanego w ewidencji nie jest możliwy
::   WY: wskazanie na składnik lub null jeśli nie może być wybrany
::  OLD: \wyd_wyd/kali_ud.fml
::----------------------------------------------------------------------------------------------------------------------
: symbol składnika nie został podany
{? app_info('web_sesid')<>'' & var_pres('wart_wym')>0
|| {? form(wart_wym)='' || return(null)  ?};
   _sym:=wart_wym
|| {? form(fld)='' || return(null)  ?};
   _sym:=fld()
?};

_typ:=null;
_sys:=null;
_skl:=null;
_nbe:=0;

: ustal typ danych
_typ:=
   {? var_pres('_a')=type_of('') & _a<>''
   || exec('szukaj_ud_typ','schemat',_a)
   |? var_pres('_a')=type_of(null) & _a<>null
   || _a
   || exec('szukaj_ud_typ','schemat','PODZORG')
   ?};
: czy ok?
{? _typ=null
|| FUN.emsg('Błędny lub nieokreślony typ danych.'@);
   return(null)
?};

: czy uprawnienia?
{? UD_TYP.OCHRONA='T'
|| {? var_pres('_b')=type_of('') & _b<>''
   || {? (_sys:=exec('szukaj_udb_sys','schemat',_b,UD_TYP.SYMBOL))=null
      || FUN.emsg('Brak informacji o wykorzystaniu typu w dziedzinie.'@);
         return(null)
      ?}
   ?}
?};

: ignoruj blokadę wykorzystania
{? var_pres('_c')=type_of(0)
|| {? _c=1 | _c=2
   || _nbe:=_c
   ?}
?};

: znajdź składnik
UD_SKL.cntx_psh();
UD_SKL.index('SYMBOL');
UD_SKL.prefix(UD_TYP.ref());
{? UD_SKL.find_key(_sym)
||
:  dalsza kontrola - firma
:  czy dla typu danych określono firmy?
   _skl_firma:=exec('ud_skl_firma','schemat',UD_SKL.UD_TYP,exec('ref_firma','ustawienia'));
   {? _skl_firma<>null
   || {? UD_SKL.SCIEZKA<>''
      || {? UD_SKL.SCIEZKA*($_skl_firma+8)=0
         || FUN.emsg('Element nie jest związany z aktualnie wybraną firmą.'@);
            UD_SKL.cntx_pop();
            return(null)
         ?}
      || FUN.emsg('Element nie został uwzględniony w domyślnym schemacie.'@);
         UD_SKL.cntx_pop();
         return(null)
      ?}
   ?};
:  obsługa podanej wartości
   _test:=1;
   {? _nbe<>2 & UD_SKL.LISTA<>'T'
   || {? _nbe=1 & var_pres('wart_wym')<=0
      || _test:=FUN.ask(
            'Element jest oznaczony jako niedostępny w ewidencji.\n'
            'Czy na pewno wybrać wskazany zapis?'@
         )
      || FUN.info('Element nie może być wykorzystany w ewidencji danych.'@);
         _test:=0
      ?}
   ?};
   {? _test<>0 & _sys<>null
   || {? (_test:=exec('test_usr_upr','schemat',_sys,OPERATOR.USER,UD_SKL.ref()))=0
      || FUN.info('Element nie może być użyty ze względu na brak uprawnień.'@)
      ?}
   ?};
   {? _test<>0
   || _skl:=UD_SKL.ref()
   ?}
|| FUN.info('Element o podanym symbolu nie istnieje.'@)
?};

UD_SKL.cntx_pop();

_skl


\ud_def_symbol_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Po redakcji pól wykorzystywanych do określenia UD_DEF. Wykorzystanie w innych przypadkach spowoduje błąd ze
::       względu na użycie fld.
::   WE: _a - Wskazanie na schemat (UD_SCH)
::       _b - symbol dziedziny, ignorowany dla typów bez włączonej ochrony, pominięcie dla typu z ochroną spowoduje
::            zignorowanie uprawnień użytkownika (pozwoli na wybranie dowolnego składnika)
::       _c - ignoruj blokadę wykorzystania w ewidencji:
::          1 - wybór możliwy po potwierdzeniu
::          2 - wybór możliwy, potwierdzenie nie jest wymagane
::          w pozostałych przypadkach wybór składnika pomijanego w ewidencji nie jest możliwy
::   WY: wskazanie na UD_SKL lub null
::----------------------------------------------------------------------------------------------------------------------
: symbol składnika nie został podany
{? var_pres('wart_wym')>0
|| {? form(wart_wym)='' || return(null)  ?};
   _sym:=wart_wym
|| {? form(fld)='' || return(null)  ?};
   _sym:=fld()
?};
_sys:=null;
_skl:=null;
_nbe:=0;

UD_SCH.cntx_psh(); UD_SCH.prefix();
{? var_pres('_a')=type_of(null) & _a<>null & UD_SCH.seek(_a)
|| UD_SCH.UD_TYP();
: czy uprawnienia?
   {? UD_TYP.OCHRONA='T'
   || {? var_pres('_b')=type_of('') & _b<>''
      || {? (_sys:=exec('szukaj_udb_sys','schemat',_b,UD_TYP.SYMBOL))=null
         || FUN.emsg('Brak informacji o wykorzystaniu typu w dziedzinie.'@);
            UD_SCH.cntx_pop(); return(null)
         ?}
      ?}
   ?};

: ignoruj blokadę wykorzystania
   {? var_pres('_c')=type_of(0)
   || {? _c=1 | _c=2
      || _nbe:=_c
      ?}
   ?};

: znajdź składnik
   UD_SKL.cntx_psh(); UD_SKL.prefix();
   UD_DEF.cntx_psh(); UD_DEF.index('SCHSYM'); UD_DEF.prefix(UD_SCH.ref());
   {? UD_DEF.find_key(_sym)
   || UD_DEF.UD_SKL();
      _test:=1;
      {? _nbe<>2 & UD_SKL.LISTA<>'T'
      || {? _nbe=1 & var_pres('wart_wym')<=0
         || _test:=FUN.ask(
               'Element jest oznaczony jako niedostępny w ewidencji.\n'
               'Czy na pewno wybrać wskazany zapis?'@
            )
         || FUN.info('Element nie może być wykorzystany w ewidencji danych.'@);
            _test:=0
         ?}
      ?};
      {? _test<>0 & _sys<>null
      || {? (_test:=exec('test_usr_upr','schemat',_sys,OPERATOR.USER,UD_SKL.ref()))=0
         || FUN.info('Element nie może być użyty ze względu na brak uprawnień.'@)
         ?}
      ?};
      {? _test<>0
      || _skl:=UD_SKL.ref()
      ?}
   || FUN.info('Element o podanym symbolu nie istnieje w schemacie.'@)
   ?};
   UD_SKL.cntx_pop(); UD_DEF.cntx_pop()
?};
UD_SCH.cntx_pop();
_skl


\ud_typ_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na bieżący typ danych.
::   WY: wskazanie na typ danych
::  OLD: \typ_ref/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
UD_TYP.ref()


\ud_sch_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na bieżący schemat danych.
::   WY: wskazanie na schemat danych
::  OLD: \sch_ref/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')<>''
|| UD_SCH.web_cntx_load(1)
?};
UD_SCH.ref()


\ud_sch_uwagi_wp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Treść pola UWAGI dla pierwszego zapisu w UD_SCH dla danego typu.
::   WY: domyślna treść pola uwagi
::----------------------------------------------------------------------------------------------------------------------
'stan początkowy'


\ud_skl_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na bieżący składnik.
::   WY: wskazanie na składnik
::  OLD: \ud_skl/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
UD_SKL.ref()


\ud_skl_firma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Ustala składnik wskazanego typu właściwy dla firmy
::   WE: _a [STRING/_UD_TYP] - wskazanie lub symbol typu elementu
::       _b [_FIRMA] - opcjonalne wskazanie firmy, jeśli pominięte przyjęte będzie REF.FIRMA
::   WY: wskazanie na znaleziony składnik lub null
::  OLD: \skl_firma/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')<>'' || exec('env_wt','b_proces') ?};
_typ:=null;

{? var_pres('_a')=type_of('')
|| UD_TYP.cntx_psh();
   UD_TYP.clear();
   UD_TYP.index('SYMBOL');
   {? UD_TYP.find_key(_a,_a)
   || _typ:=UD_TYP.ref()
   ?};
   UD_TYP.cntx_pop()
|? var_pres('_a')=type_of(null)
|| _typ:=_a
?};

_firma:=REF.FIRMA;
{? var_pres('_b')=type_of(null) & ref_tab(_b)=FIRMA
|| _firma:=_b
?};

UD_FIR.index('UD_TYP');
UD_FIR.prefix(_firma);
{? UD_FIR.find_key(_typ)
|| UD_FIR.UD_SKL
|| null
?}


\ud_def_firma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Ustala element drzewa wskazanego typu właściwy dla firmy
::   WE: _a [STRING/_UD_TYP] - wskazanie lub symbol typu elementu
::   WY: wskazanie na znaleziony element drzewa lub null
::----------------------------------------------------------------------------------------------------------------------
exec('szukaj_ud_def','schemat',exec('domyslny','schemat',_a),exec('ud_skl_firma','schemat',_a))


\udb_grp_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca wskazanie na bieżącą grupę.
::   WY: wskazanie na grupę
::----------------------------------------------------------------------------------------------------------------------
UDB_GRP.ref()


\szukaj_ud_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyszukuje typ danych.
::   WE:  _a  [STRING] - symbol typu danych
::       [_b] [NUMBER] - Czy chronić kontekst tabeli UD_TYP: 0*/1.
::   WY: wskazanie na typ danych
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & _a<>''
|| _symbol:=_a
|| return()
?};
_cntx:=var_pres('_b')=type_of(0) & _b;

{? _cntx
|| UD_TYP.cntx_psh()
?};
UD_TYP.index('SYMBOL');
UD_TYP.prefix();
_ref:={? UD_TYP.find_key(_symbol,) || UD_TYP.ref() || null() ?};
{? _cntx
|| UD_TYP.cntx_pop()
?};
_ref


\wzorzec_ud_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Formuła na wzorzec pól wskazujących w okienkach wprost na UD_SKL. Głównie do wykorzystania w definicji systemu
::       w celu ustalenia wiersza w tabeli UD_TYP dla poprawnego ograniczenia dziedziny słownika (tabela UD_SKL).
::   WE: _a [STRING] - symbol typu danych.
::   WY: pusty ciąg znaków
::UWAGA: Poprawność argumentu wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
exec('szukaj_ud_typ','schemat',_a);
''


\szukaj_ud_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyszukuje schemat danych.
::   WE:  _a  [STRING/REFERENCE] - symbol/wskazanie typu danych
::       [_b] [STRING]           - symbol schematu danych [domyślnie: systemowy lub pierwszy].
::       [_c] [NUMBER]           - Czy chronić konteksty tabel: UD_TYP, UD_SCH: 0*/1.
::   WY: wskazanie na schemat danych
::----------------------------------------------------------------------------------------------------------------------
_cntx:=var_pres('_c')=type_of(0) & _c;

_typ:=null();
{? var_pres('_a')=type_of('') & _a<>''
|| _typ:=exec('szukaj_ud_typ','schemat',_a,_cntx)
|? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=UD_TYP
|| _typ:=_a
?};
: jest typ?
{? _typ=null()
|| return(null())
?};

_sch:=null();
{? _cntx
|| UD_SCH.cntx_psh()
?};
UD_SCH.index('SYMBOL');
UD_SCH.prefix(_typ);
{? var_pres('_b')=type_of('')
|| {? UD_SCH.find_key(_b,_b)
   || _sch:=UD_SCH.ref()
   ?}
|? var_pres('_b')=type_of(~~)
|| {? UD_SCH.first()
   || _sch:=UD_SCH.ref();
      {!
      |? {? UD_SCH.DOMYSLNY='T'
         || _sch:=UD_SCH.ref();
            0
         || UD_SCH.next()
         ?}
      !}
   ?}
?};
{? _cntx
|| UD_SCH.cntx_pop()
?};
_sch


\zmien_ud_sch_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zamienia we wszystkich zbiorach tabeli wskazania schematu danych.
::   WE: _a - alias tabeli zawierającej kolumnę wskazującą schemat
::       _b - akronim kolumny zawierającej wskazania schematu
::       _c - wskazanie poprzedniej wersji schematu
::       _d - wskazanie aktualnej wersji schematu
::   WY: 1 - sukces
::       0 - wystąpił błąd
:: UWAGA: - poprawość argumentów wywołania nie jest weryfikowana
::        - formuła wykonywana w transakcji
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;

_update:=!_a+'.'+_b+':=_a;'+!_a+'.put()';

_a.cntx_psh();
_MASK:=_a.names();
_loop:=_MASK.first();
{!
|? _loop & _ok
|! _a.clear();
   _a.f_set(,,_b+'=:_a',_c);
   _loop:=_a.f_first();
   {!
   |? _loop & _ok
   |! _ok:=_update(_d);
      _loop:=_a.f_next()
   !};
   _loop:=_MASK.next()
!};
_a.cntx_pop();

_ok


\zmien_ud_sch_var
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zamienia wskazanie schematu danych w zmiennej będącej zestawem stałych systemu.
::   WE: _a - alias zmiennej zawierającej pole wskazujące schemat
::       _b - akronim pola zawierającego wskazanie schematu
::       _c - wskazanie poprzedniej wersji schematu
::       _d - wskazanie aktualnej wersji schematu
::   WY: 1 - sukces
::       0 - wystąpił błąd
:: UWAGA: - poprawość argumentów wywołania nie jest weryfikowana
::        - formuła wykonywana w transakcji
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,_a,_b);
{? ($('_a.'+_b))(_a)<>_d
|| ($('_a.'+_b+':=_b'))(_a,_d);
   exec('zapisz','#stalesys',date,_a,_b)
|| 1
?}


\zmien_wersje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zamienia w wykorzystaniech schematu jego poprzednią wersję na aktualną. Wywoływana tylko w przypadku, gdy
::       aktualnie obowiązująca wersja schematu została zastąpiona przez inną.
::   WE: _a - wartość przekazana przez narzędzia do wyzwalacza
::       _b - wskazanie poprzedniej wersji schematu
::       _c - wskazanie aktualnej wersji schematu
:: UWAGA: - podstawowe wywołanie z wyzwalacza "popraw po" tabeli UD_SCH
::        - poprawość argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
: zakończ jeśli pierwotna akcja (put) nie powidła się
{? ~_a || return() ?};

:: Tabela: OZ, Pole: SCHEMAT
::{? ~exec('zmien_ud_sch_tab','schemat',OZ,'SCHEMAT',_b,_c)
::|| undo();
::   return()
::?};

:: Tabela: RS, Pole: UD_SCH
::{? ~exec('zmien_ud_sch_tab','schemat',RS,'UD_SCH',_b,_c)
::|| undo();
::   return()
::?};

:: Tabela: SKID_MBP, Pole: UD_SCH
::{? ~exec('zmien_ud_sch_tab','schemat',SKID_MBP,'UD_SCH',_b,_c)
::|| undo();
::   return()
::?};

:: Tabela: SKID_PMP, Pole: SCH_WE
::{? ~exec('zmien_ud_sch_tab','schemat',SKID_PMP,'SCH_WE',_b,_c)
::|| undo();
::   return()
::?};

:: Tabela: SKID_PMP, Pole: SCH_WY
::{? ~exec('zmien_ud_sch_tab','schemat',SKID_PMP,'SCH_WY',_b,_c)
::|| undo();
::   return()
::?};

:: Tabela: TAT, Pole: UD_SCH
::{? ~exec('zmien_ud_sch_tab','schemat',TAT,'UD_SCH',_b,_c)
::|| undo();
::   return()
::?};

:: Tabela: UDB_WID, Pole: UD_SCH
:: Widok uprawnień. Nie wolno zamieniać!

:: Tabela: UD_CECH, Pole: UD_SCHWE
::{? ~exec('zmien_ud_sch_tab','schemat',UD_CECH,'UD_SCHWE',_b,_c)
::|| undo();
::   return()
::?};

:: Tabela: UD_CECH, Pole: UD_SCHWY
::{? ~exec('zmien_ud_sch_tab','schemat',UD_CECH,'UD_SCHWY',_b,_c)
::|| undo();
::   return()
::?};

:: Tabela: UD_DEF, Pole: UD_SCH
:: Definicja schematu. Nie wolno zamieniać!

:: Tabela: UD_POZ, Pole: UD_SCH
:: Opis poziomu. Nie wolno zamieniać!

:: Zmienna: HSTALE, Pole: SCHEMAT
::{? ~exec('zmien_ud_sch_var','schemat',HSTALE,'SCHEMAT',_b,_c)
::|| undo();
::   return()
::?};

:: Zmienna: P_FILTER, Pole: UD_SCH
:: Aktualizacja zbędna.

:: Zmienna: ST, Pole: SCHEMAT
::{? ~exec('zmien_ud_sch_var','schemat',ST,'SCHEMAT',_b,_c)
::|| undo();
::   return()
::?};

:: Zmienna: UD_POM, Pole: NAW_SCH
:: Aktualizacja zbędna.

:: Zmienna: XINFO, Pole: CPV_SCH
::{? ~exec('zmien_ud_sch_var','schemat',XINFO,'CPV_SCH',_b,_c)
::|| undo();
::   return()
::?};

:: Zmienna: XINFO, Pole: PBUD_SCH
::{? ~exec('zmien_ud_sch_var','schemat',XINFO,'PBUD_SCH',_b,_c)
::|| undo();
::   return()
::?};

:: Zmienna: XINFO, Pole: M_SCH
::{? ~exec('zmien_ud_sch_var','schemat',XINFO,'M_SCH',_b,_c)
::|| undo();
::   return()
::?};

:: Zmienna: XINFO, Pole: JORG_SCH
::{? ~exec('zmien_ud_sch_var','schemat',XINFO,'JORG_SCH',_b,_c)
::|| undo();
::   return()
::?};

:: Zmienna: XINFO, Pole: PROJ_SCH
::{? ~exec('zmien_ud_sch_var','schemat',XINFO,'PROJ_SCH',_b,_c)
::|| undo();
::   return()
::?};

:: Zmienna: XINFO, Pole: UDT_SCH
::{? ~exec('zmien_ud_sch_var','schemat',XINFO,'UDT_SCH',_b,_c)
::|| undo();
::   return()
::?};

~~


\szukaj_ud_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyszukuje element schematu.
::   WE:  _a  [STRING/REFERENCE] - Symbol/wskazanie typu danych.
::        _b  [STRING]           - Symbol/Opis elementu.
::       [_c] [NUMBER]           - Czy chronić konteksty tabel: UD_TYP i UD_SKL: 0*/1.
::   WY: Wskazanie elementu danych.
::----------------------------------------------------------------------------------------------------------------------
_cntx:=var_pres('_c')=type_of(0) & _c;

_typ:=null();
{? var_pres('_a')=type_of('') & _a<>''
|| _typ:=exec('szukaj_ud_typ','schemat',_a,_cntx)
|? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=UD_TYP
|| _typ:=_a
?};
: Jest typ?
{? _typ=null()
|| return(null())
?};

{? _cntx
|| UD_SKL.cntx_psh()
?};
UD_SKL.index('SYMBOL'); UD_SKL.prefix(_typ);
_ref:={? UD_SKL.find_key(_b,) || UD_SKL.ref() || null() ?};
{? _ref=null()
|| UD_SKL.index('OPIS'); UD_SKL.prefix(_typ);
   _ref:={? UD_SKL.find_key(_b,) || _ud_skl:=UD_SKL.ref() || null() ?}
?};
{? _cntx
|| UD_SKL.cntx_pop()
?};
_ref


\szukaj_ud_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyszukuje element drzewa.
::   WE: _a - wskazanie schematu
::       _b - wskazanie elementu
::   WY: wskazanie na tablicę zawierającą wskazane elementu drzewa (REF) i numer rekordu nadrzędnego (DEF)
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('ud_def_info','schemat');

UD_DEF.cntx_psh();
UD_DEF.index('PODTEC');
UD_DEF.prefix(_a);
{? UD_DEF.find_key(_b)
|| _ret.read()
?};
UD_DEF.cntx_pop();

_ret


\szukaj_ud_def_root
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyszukuje korzeń drzewa.
::   WE:  _a  [REFERENCE] - Wskazanie opisu schematu (UD_SCH).
::        _b  [REFERENCE] - Wskazanie definicji składnika (UD_SKL).
::       [_c] [STRING]    - Rodzaj zwracanej informacji:
::                            ''       - Wskazanie elementu drzewa (UD_DEF)
::                            'UD_SKL' - Wskazanie elementu schematu (UD_SKL).
::   WY: Zależy od parametru _c.
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();
UD_DEF.cntx_psh();
UD_DEF.prefix();
{? UD_DEF.seek(exec('szukaj_ud_def','schemat',_a,_b).REF)
|| {!
   |? UD_DEF.seek(UD_DEF.UD_DEF,)
   !};
   _ret:=
      {? var_pres('_c')=type_of('') & _c='UD_SKL'
      || UD_DEF.UD_SKL
      || UD_DEF.ref()
      ?}
?};
UD_DEF.cntx_pop();
_ret


\ud_def_root
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustaw korzeń w okienku drzewa.
::   WE: _a - akronim okienka
::       _b - wskazanie schematu
::       _c - wskazanie elementu
::----------------------------------------------------------------------------------------------------------------------
_def:=exec('szukaj_ud_def','schemat',_b,_c);
UD_DEF.tr_root(_a,1,_def.UD_DEF,#_def.REF);
~~


\szukaj_udb_sys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyszukuje wykorzystanie typu danych w obszarze.
::   WE: _a [STRING/REFERENCE] - symbol obszaru
::       _b [STRING/REFERENCE] - symbol typu
::   WY: wskazanie na wykorzystanie typu
::----------------------------------------------------------------------------------------------------------------------
_dom:=
   {? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=B_DOMAIN
   || _a
   |? var_pres('_a')=type_of('')
   || exec('domain_ref','#b_domain',_a)
   || null()
   ?};
{? _dom=null()
|| return(null())
?};

UDB_DOM.index('UNIQUE');
UDB_DOM.prefix();
{? ~UDB_DOM.find_key(_dom)
|| return(null())
?};

UDB_SYS.clear();
{? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=UD_TYP
|| UDB_SYS.index('UNIQUE');
   UDB_SYS.prefix(UDB_DOM.UDB_GRP,_b)
|? var_pres('_b')=type_of('')
|| UDB_SYS.index('TYP_SYM');
   UDB_SYS.prefix(UDB_DOM.UDB_GRP,_b,)
|| return(null())
?};
{? UDB_SYS.first()
|| UDB_SYS.ref()
|| null()
?}


\symbol_in_use
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Sprawdza, czy kod danego typu jest wykorzystywany w słownikach.
::   WE: _a - wskazanie typu schematu
::       _b - symbol elementu
::   WY: 0 - symbol NIE jest wykorzystywany / 1 - symbol JEST wykorzystywany
::  OLD: \besymtre/skid_xd.fml
::----------------------------------------------------------------------------------------------------------------------
_use:=0;

SLO.cntx_psh();
SLO.index('SL');
SLU.cntx_psh();
SLU.index('WZORZEC');
RS.cntx_psh();
RS.index('TAB');
RS.prefix('UD_');

_loop:=RS.first();
{!
|? _loop & ~_use
|! {? RS.UD_TYP=_a & (RS.TAB='UD_SKL' | RS.TAB='UD_DEF') & RS.KOD='SYMBOL'
   || SLU.prefix(RS.WZ);
      _loop:=SLU.first();
      {!
      |? _loop & ~_use
      |! SLO.prefix(SLU.ref(),_b,);
         _use:=SLO.first();
         _loop:=SLU.next()
      !}
   ?};
   _loop:=RS.next()
!};

RS.cntx_pop();
SLU.cntx_pop();
SLO.cntx_pop();
:: Powiązanie z projektami
{? ~_use
|| UD_POW.index('SKL'); UD_POW.prefix(UD_SKL.ref(),'R');
   _use:=UD_POW.first()
?};

{? ~_use & exec('lic','#b_domain','POR')
:: Jeżeli UD_SKL był wysłany na portal, to blokujemy możliwość zmiany SYMBOL-u.
|| _use:=exec('get_id','#sync_id','PORTAL_UD_SKL_PODZORG_ID',UD_SKL.uidref(),,1).first()
?};

_use


\upr_skl_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnia uprawnienia dla wskazanego składnika.
::   WE: _a - wskazanie składnika
::----------------------------------------------------------------------------------------------------------------------
UD_SKL.cntx_psh();
UD_SKL.prefix();
{? ~UD_SKL.seek(_a)
|| UD_SKL.cntx_pop();
   return()
?};

: utwórz informacje tylko dla typów z ochroną danych
{? UD_SKL.UD_TYP().OCHRONA<>'T'
|| UD_SKL.cntx_pop();
   return()
?};

UDB_UPR.cntx_psh();
UDB_UPR.index('UNIQUE');
UDB_UPR.prefix();

: informacje o uprawnieniach dodawane tylko dla aktywnych użytkowników aplikacji pulpitowej
USERS.cntx_psh();
USERS.prefix();
USERS.f_set(,,'AKT=\'T\' and JTERM=\'T\'');

UDB_SYS.cntx_psh();
UDB_SYS.index('UD_TYP');
UDB_SYS.prefix(UD_SKL.UD_TYP);

_loop:=UDB_SYS.first();
{!
|? _loop
|! UDB_UPR.prefix(UDB_SYS.ref());
   _loop:=USERS.f_first();
   {!
   |? _loop
   |! {? ~UDB_UPR.find_key(USERS.ref(),UD_SKL.ref())
      || UDB_UPR.blank();
         UDB_UPR.UDB_SYS:=UDB_SYS.ref();
         UDB_UPR.USERS:=USERS.ref();
         UDB_UPR.UD_SKL:=UD_SKL.ref();
         UDB_UPR.add()
      ?};
      _loop:=USERS.f_next()
   !};
   _loop:=UDB_SYS.next()
!};

UDB_UPR.cntx_pop();
USERS.f_clear();
USERS.cntx_pop();
UDB_SYS.cntx_pop();
UD_SKL.cntx_pop();
~~


\upr_skl_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Usuwa uprawnienia do wskazanego składnika.
::   WE: _a - wskazanie składnika
::   WY: 1 - udało się usunąć zapisy, 0 - usuwanie nie powiodło się
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',UDB_UPR,'FK_SKL',_a)


\upr_def_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Aktualizuje widoki wskazanego elementu.
::   WE: _a - wskazanie elementu
::----------------------------------------------------------------------------------------------------------------------
UD_DEF.cntx_psh();
UD_DEF.prefix();
{? ~UD_DEF.seek(_a)
|| UD_DEF.cntx_pop();
   return()
?};

UDB_WID.cntx_psh();
UDB_WID.index('UNIQUE');

UDB_UPR.cntx_psh();
UDB_UPR.index('FK_SKL');
UDB_UPR.prefix(UD_DEF.UD_SKL);

_loop:=UDB_UPR.first();
{!
|? _loop
|! {? UDB_UPR.DOSTEP='T'
   || UDB_WID.prefix(UDB_UPR.ref());
      {? ~UDB_WID.find_key(UD_DEF.ref())
      || UDB_WID.blank();
         UDB_WID.UDB_UPR:=UDB_UPR.ref();
         UDB_WID.UD_DEF:=UD_DEF.ref();
         UDB_WID.add()
      ?}
   ?};
   _loop:=UDB_UPR.next()
!};

UDB_UPR.cntx_pop();
UDB_WID.cntx_pop();
UD_DEF.cntx_pop();
~~


\upr_def_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Aktualizuje widoki wskazanego elementu.
::   WE: _a - wskazanie elementu
::----------------------------------------------------------------------------------------------------------------------
exec('upr_def_del','schemat',_a);
exec('upr_def_add','schemat',_a);
~~


\upr_def_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Usuwa widoki wskazanego elementu.
::   WE: _a - wskazanie elementu
::   WY: 1 - udało się usunąć zapisy, 0 - usuwanie nie powiodło się
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',UDB_WID,'FK_DEF',_a)


\upr_sys_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnia uprawnienia dla wskazanego wykorzystania typu.
::   WE: _a - wskazanie wykorzystania
::----------------------------------------------------------------------------------------------------------------------
UDB_SYS.cntx_psh();
UDB_SYS.prefix();
{? ~UDB_SYS.seek(_a)
|| UDB_SYS.cntx_pop();
   return()
?};

: utwórz informacje tylko dla typów z ochroną danych
{? UDB_SYS.UD_TYP().OCHRONA<>'T'
|| UDB_SYS.cntx_pop();
   return()
?};

UDB_UPR.cntx_psh();
UDB_UPR.index('UNIQUE');

: informacje o uprawnieniach dodawane tylko dla aktywnych użytkowników aplikacji pulpitowej
USERS.cntx_psh();
USERS.prefix();
USERS.f_set(,,'AKT=\'T\' and JTERM=\'T\'');

UD_SKL.cntx_psh();
UD_SKL.index('SYMBOL');
UD_SKL.prefix(UDB_SYS.UD_TYP);

_loop:=UD_SKL.first();
{!
|? _loop
|! UDB_UPR.prefix(UDB_SYS.ref());
   _loop:=USERS.f_first();
   {!
   |? _loop
   |! {? ~UDB_UPR.find_key(USERS.ref(),UD_SKL.ref())
      || UDB_UPR.blank();
         UDB_UPR.UDB_SYS:=UDB_SYS.ref();
         UDB_UPR.USERS:=USERS.ref();
         UDB_UPR.UD_SKL:=UD_SKL.ref();
         UDB_UPR.add()
      ?};
      _loop:=USERS.f_next()
   !};
   _loop:=UD_SKL.next()
!};

USERS.f_clear();
USERS.cntx_pop();
UD_SKL.cntx_pop();
UDB_UPR.cntx_pop();
UDB_SYS.cntx_pop();
~~


\upr_sys_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Usuwa uprawnienia wskazanego wykorzystania.
::   WE: _a - wskazanie wykorzystania
::   WY: 1 - udało się usunąć zapisy, 0 - usuwanie nie powiodło się
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',UDB_UPR,'UNIQUE',_a)


\upr_usr_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnia uprawnienia dla wskazanego użytkownika.
::   WE: _a - wskazanie użytkownika
::----------------------------------------------------------------------------------------------------------------------
: sprawdzenie, czy użytkownik jest aktywny i korzysta z aplikacji pulpitowej
{? _a=USERS.ref()
|| {? USERS.AKT<>'T' | (USERS.JTERM<>'T' & USERS.EKIOSK<>'T')
   || return()
   ?}
|| USERS.cntx_psh();
   USERS.prefix();
   _ok:=(USERS.seek(_a) & (USERS.AKT='T' & (USERS.JTERM='T' | USERS.EKIOSK='T')));
   USERS.cntx_pop();
   {? _ok=0
   || return()
   ?}
?};

UD_TYP.cntx_psh();
UD_SKL.cntx_psh();
UD_SKL.index('SYMBOL');

UDB_UPR.cntx_psh();
UDB_UPR.index('UNIQUE');

UDB_SYS.cntx_psh();
UDB_SYS.index('UNIQUE');
UDB_SYS.prefix();

_loop:=UDB_SYS.first();
{!
|? _loop
|! {? UDB_SYS.UD_TYP().OCHRONA='T'
   || UDB_UPR.prefix(UDB_SYS.ref());
      UD_SKL.prefix(UDB_SYS.UD_TYP);
      _loop:=UD_SKL.first();
      {!
      |? _loop
      |! {? ~UDB_UPR.find_key(_a,UD_SKL.ref())
         || UDB_UPR.blank();
            UDB_UPR.UDB_SYS:=UDB_SYS.ref();
            UDB_UPR.UD_SKL:=UD_SKL.ref();
            UDB_UPR.USERS:=_a;
            UDB_UPR.add()
         ?};
         _loop:=UD_SKL.next()
      !}
   ?};
   _loop:=UDB_SYS.next()
!};

UDB_SYS.cntx_pop();
UDB_UPR.cntx_pop();
UD_SKL.cntx_pop();
UD_TYP.cntx_pop();
~~


\upr_usr_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Usuwa uprawnienia wskazanego użytkownika.
::   WE: _a - wskazanie użytkownika
::   WY: 1 - udało się usunąć zapisy, 0 - usuwanie nie powiodło się
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',UDB_UPR,'FK_USR',_a)


\test_usr_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy użytkownik ma dostęp do składnika.
::   WE: _a - wskazanie na wykorzystanie typu danych
::       _b - wskazanie użytkownika systemu
::       _c - wskazanie składnika
::   WY: 0/1 - zależnie od uprawnia
::----------------------------------------------------------------------------------------------------------------------
_test:=0;
UDB_UPR.cntx_psh();
UDB_UPR.index('UNIQUE');
UDB_UPR.prefix(_a,_b);
{? UDB_UPR.find_key(_c)
|| _test:=(UDB_UPR.DOSTEP='T')
?};
UDB_UPR.cntx_pop();
_test


\filtr_wid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca fragment zapytania dla fitrowania zapisów z uwzględnieniem uprawnień do składników schematów danych.
::   WE: _a - wyrażenie zawierające wskazanie na składnik np. 'P.WYDZIAL'
::   WY: fragment dyrektywy where
::----------------------------------------------------------------------------------------------------------------------
_a+'
   in (
      select   W.UD_SKL
      from     UDB_WID as W
      where    W.UDB_SYS=:_b and W.USERS=:_c and W.UD_SCH=:_d and W.SCIEZKA like :_e
      order by W.UD_SKL
   )
'


\filtr_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca fragment zapytania dla fitrowania pracowników z uwzględnieniem uprawnień.
::   WE: _a - kody form współpracy
::       _b - określenie typu formy współpracy, ignorowane jeśli podane formy współpracy
::       _c - znacznik zatrudnienia/aktywności
::   WY: fragment dyrektywy where
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('')
|| _a:=''
?};
{? var_pres('_b')<>type_of('')
|| _b:=''
?};
{? _c='W' | _c='*'
|| _c:=''
?};

{? REF.FIRMA<>REF.GRUPA
|| 'P.FIRMA=\''+$exec('ref_firma','ustawienia')+'\' and '
|| ''
?}+
{? +_a=1
|| 'P.F_ZATR=\''+$__F_ZATR.find(_a)+'\''
|| 'P.F_ZATR in ('+
   '  select U.F_ZATR from USERS_FZ as U join F_ZATR as F using (U.F_ZATR,F.REFERENCE) '+
   '  where U.FIRMA=:_a and U.USERS=:_c and U.DOSTEP=\'T\' and '+
   {? _a<>''
   || _val:='';
      {! _ndx:=1..+_a
      |! _chr:=(_ndx+_a)+1;
         _val+=
            {? _chr<>','
            || '\''+_chr+'\''
            || _chr
            ?}
      !};
      'F.KOD in ('+_val+') '
   || 'F.DOCELOWA=\''+_b+'\''
   ?}+
   ')'
?}+' and '+
{? _c<>''
|| 'P.ZA=\''+_c+'\' and '
|| ''
?}+
exec('filtr_wid','schemat','P.WYDZIAL')


\filtruj_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Filtruje listę pracowników.
::   WE: _a - kod dziedziny produktowej
::       _b - wskazanie elementu drzewa
::       _c - kody form współpracy oddzielone przecinkami (np. 'P,Z,p')
::       _d - określenie typu formy współpracy, ignorowane jeśli podane formy współpracy
::       _e - znacznik zatrudnienia/aktywności
::       _f - dodatkowa sekcja FROM dla filtra
::       _g - dodatkowa sekcja WHERE dla filtra
::       _h - pominięcie grup uprawnień (<>0/brak lub 0 - tak/nie*)
::----------------------------------------------------------------------------------------------------------------------
: ustal pozycje
UDB_WID.UD_DEF:=_b;
UDB_WID.UD_DEF().UD_SCH().UD_TYP();

{? var_pres('_f')<>type_of('') || _f:='' ?};
{? var_pres('_g')<>type_of('') || _g:='' ?};
_ngp:=(var_pres('_h')=type_of(0) & _h<>0);
_gpa:=exec('is_active','gp_api');

{? P.sel_size()
|| P.sel_adel()
?};
P.clear();
_cur:=P.ref();
_ok:=P.f_set(
   'OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',
   {? _ngp=0 & _gpa<>0
   || exec('zlacz_gp','gp_api','P.GP_DEF')
   || ''
   ?}+_f,
   exec('filtr_p','schemat',_c,_d,_e)+
   {? _g<>'' || ' and '+_g || '' ?}+
   {? _ngp=0 & _gpa<>0
   || ' and '+exec('filtr_gp','gp_api',_a)
   || ''
   ?},
:  ograniczenie widoku
   exec('ref_firma','ustawienia'),
   exec('szukaj_udb_sys','schemat',_a,UD_TYP.SYMBOL),
   OPERATOR.USER,
   UD_SCH.ref(),
   '\''+UD_DEF.SCIEZKA+'%\''
);
{? ~_ok
|| P.f_set(,,'0=1');
   return(0)
?};
P.f_seek(_cur) | P.f_first()


\dostepne_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca tabelę tymczasową zawierającą wskazania dostępnych współpracowników.
::   WE:  _a  [STRING]    - kod dziedziny produktowej
::        _b  [STRING]    - kody form współpracy oddzielone przecinkami (np. 'P,Z,p')
::       [_c] [STRING]    - znacznik aktywności:
::            'T' - aktywny
::            'N' - nieaktywny
::            wpp - wszystkie (domyślny)
::       [_d] [STRING]    - symbol jednostki organizacyjnej [domyślnie: wszystkie]
::       [_e] [REFERENCE] - użytkownik, dla którego sprawdzane są uprawnienia do współpracowników [domyślnie: operator]
::----------------------------------------------------------------------------------------------------------------------
_schemat:=exec('domyslny','schemat','PODZORG');
_status:='';
_user:={? var_pres('_e')=type_of(null) & _e<>null & ref_tab(_e)=USERS || _e || exec('operatorUser','#users') ?};

{? var_pres('_c')=type_of('')
|| {? _c='T' | _c='N'
   || _status:=_c
   ?}
?};

_gpa:=exec('is_active','gp_api');

_path:='\'%\'';
UD_SKL.cntx_psh();
{? var_pres('_d')=type_of('') & exec('szukaj_ud_skl','schemat','PODZORG',_d)<>null()
|| _path:='\''+UD_SKL.SCIEZKA+'%\''
?};
UD_SKL.cntx_pop();

sql(
   'select P.REFERENCE as REF, P.OSOBA as OSOBA from P '+
   {? _gpa<>0 || exec('zlacz_gp','gp_api','P.GP_DEF') || '' ?}+
   'where '+
   exec('filtr_p','schemat',exec('kody','f_zatr',_user,_b),,_status)+
   {? _gpa<>0 || ' and '+exec('filtr_gp','gp_api',_a) || '' ?}+
   ' order by REF',
:  ograniczenie widoku
   exec('ref_firma','ustawienia'),
   exec('szukaj_udb_sys','schemat',_a,'PODZORG'),
   _user,
   _schemat,
   _path
)


\dostepne_p_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca tabelę tymczasową zawierającą wskazania dostępnych współpracowników.
::   WE: _a - kod dziedziny produktowej
::       _b - kody formy współpracy oddzielone przecinkami
::       _c - znacznik aktywności:
::            'T' - aktywny
::            'N' - nieaktywny
::            wpp - wszystkie (domyślny)
::       _d - ref osoby, dla której mają być pobrane dane
::----------------------------------------------------------------------------------------------------------------------
_schemat:=exec('domyslny','schemat','PODZORG');
_status:='';

{? var_pres('_c')=type_of('')
|| {? _c='T' | _c='N'
   || _status:=_c
   ?}
?};

_gpa:=exec('is_active','gp_api');

_kody:='';
_b:=exec('kody','f_zatr',,_b);
{! _ndx:=1..+_b
|! _chr:=(_ndx+_b)+1;
   _kody+=
      {? _chr<>','
      || '\''+_chr+'\''
      || _chr
      ?}
!};

_P:=sql(
   'select P.REFERENCE as REF, P.OSOBA as OSOBA from P '+
   {? _gpa<>0 || exec('zlacz_gp','gp_api','P.GP_DEF') || '' ?}+
   'where P.OSOBA=\':_f\' and '+
   {? REF.FIRMA<>REF.GRUPA
   || 'P.FIRMA=:_a and '
   || ''
   ?}+
   'P.F_ZATR in ('
   '  select U.F_ZATR from USERS_FZ as U join F_ZATR as F using (U.F_ZATR,F.REFERENCE)'
   '  where U.FIRMA=:_a and U.USERS=:_b and U.DOSTEP=\'T\' and F.KOD in (:_c)'
   ') and '
   'P.WYDZIAL in ('
   '  select   W.UD_SKL'
   '  from     UDB_WID as W'
   '  where    W.UDB_SYS=:_d and W.USERS=:_b and W.UD_SCH=:_e'
   '  order by W.UD_SKL'
   ')'+
   {? _status<>'' || ' and P.ZA=\''+_b+'\'' || '' ?}+
   {? _gpa<>0 || ' and '+exec('filtr_gp','gp_api',_a,,'_b') || '' ?}+
   ' order by REF',
:  ograniczenie widoku
   exec('ref_firma','ustawienia'),
   OPERATOR.USER,
   _kody,
   exec('szukaj_udb_sys','schemat',_a,'PODZORG'),
   _schemat,
   _d
);
_P.index(_P.ndx_tmp(,,'OSOBA',,));
_P


\dostepne_ud_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca listę elementów schematów danych dostępnych dla użytkownika w obrębie dziedziny produktowej.
::       Rozpatrywane są elementy uporządkowane domyślnym schematem określonego typu.
::   WE: _a [REFERENCE] - wskazanie użytkownika (domyślnie zalogowany)
::       _b [STRING/REFERENCE] - kod lub wskazanie dziedziny
::       _c [STRING/REFERENCE] - kod lub wskazanie typu danych
::       _d [REFERENCE] - element, do którego będzie odcięcy schemat (wskazanie UD_SKL, UD_DEF lub FIRMA)
::   WY: alias tabeli tymczasowej zawierającej listę dostępnych elementów.
::       Struktura wyniku:
::       INT_REF - numer rekordu
::       SQL_REF - wskazanie zapisane w postaci sql
::       SYMBOL  - symbol elementu
::       lista jest wstępnie umorządkowana według symboli elementów
::----------------------------------------------------------------------------------------------------------------------
_user:=
   {? var_pres('_a')=type_of(null)
   || {? _a=null | ref_tab(_a)<>USERS
      || null
      || _a
      ?}
   || OPERATOR.USER
   ?};
_domain:=
   {? var_pres('_b')=type_of('')
   || exec('domain_ref','#b_domain',_b)
   |? var_pres('_b')=type_of(null) & _b<>null & ref_tab(_b)=B_DOMAIN
   || _b
   || null
   ?};
_type:=
   {? var_pres('_c')=type_of('')
   || exec('szukaj_ud_typ','schemat',_c)
   |? var_pres('_c')=type_of(null) & _c<>null & ref_tab(_c)=UD_TYP
   || _c
   || null
   ?};
_ext:=
   {? var_pres('_d')=type_of(null) & _d<>null
   || UD_DEF.cntx_psh();
      SEEK.UD_DEF:=
         {? ref_tab(_d)=UD_DEF
         || _d
         |? ref_tab(_d)=UD_SKL
         || exec('szukaj_ud_def','schemat',exec('domyslny','schemat',_type),_d)
         |? ref_tab(_d)=FIRMA
         || exec('ud_def_firma','schemat',_type).REF
         || null
         ?};
      _path:=SEEK.UD_DEF().SCIEZKA;
      UD_DEF.cntx_pop();
      {? _path<>''
      || ' and S.SCIEZKA like \'%1%%\''[_path]
      || ''
      ?}
   || ''
   ?};

sql(
   'select   REFERENCE_NUM(W.UD_SKL) as INT_REF, W.UD_SKL as SQL_REF, S.SYMBOL '
   'from     UDB_WID as W join UD_SKL as S using(W.UD_SKL,S.REFERENCE) '
   'where    W.USERS=:_a and W.UDB_SYS=:_b and W.UD_SCH=:_c %1 '
   'order by S.SYMBOL'[_ext],
   _user,
   exec('szukaj_udb_sys','schemat',_domain,_type),
   exec('domyslny','schemat',_type)
)


\dostepny_ud_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła sprawdza, czy użytkownik ma dostęp do wskazanego elementu schematu, w ramach określonej dziedziny
::       produktowej.
::   WE:  _a  [REFERENCE]        - Użytkownik (wskazanie, domyślnie zalogowany).
::        _b  [STRING/REFERENCE] - Dziedzina (kod/wskazanie).
::        _c  [REFERENCE]        - Element schematu danych (wskazanie).
::   WY: 1 - Użytkownik ma dostęp.
::       0 - Użytkownik nie ma dostępu lub błędne parametry wywołania.
::----------------------------------------------------------------------------------------------------------------------
_user:=
   {? var_pres('_a')=type_of(null())
   || {? _a<>null() & ref_tab(_a)=USERS
      || _a
      || null()
      ?}
   || OPERATOR.USER
   ?};
{? _user=null()
|| return(0)
?};
_dom:=
   {? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=B_DOMAIN
   || _b
   |? var_pres('_b')=type_of('')
   || exec('domain_ref','#b_domain',_b)
   || null()
   ?};
{? _dom=null()
|| return(0)
?};
{? var_pres('_c')=type_of(null()) & _c<>null() & ref_tab(_c)=UD_SKL
|| _skl:=_c
|| return(0)
?};

UDB_UPR.cntx_psh();
UDB_UPR.index('UNIQUE');
UDB_UPR.prefix(exec('szukaj_udb_sys','schemat',_dom,exec('FindAndGet','#table',UD_SKL,_skl,,"UD_TYP")),_user,_skl);
_ret:=(UDB_UPR.first() & UDB_UPR.DOSTEP='T');
UDB_UPR.cntx_pop();
_ret


\plaski_ud_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca listę elementów schematów danych dostępnych dla użytkownika w obrębie dziedziny produktowej.
::       Rozpatrywane są elementy uporządkowane domyślnym schematem określonego typu z rzutowaniem kolejności.
::   WE: zgodne z wejściem schemat.fml\dostepne_ud_skl
::   WY: zgodne z wyjściem schemat.fml\dostepne_ud_skl
::  OLD: \plaski_ud_def/%test.fml
::----------------------------------------------------------------------------------------------------------------------
: pobierz listę dostępnych
_skl:=exec('dostepne_ud_skl','schemat',
   {? var_pres('_a')=type_of(null) || _a || ~~ ?},
   {? var_pres('_b')=type_of(null) | var_pres('_b')=type_of('') || _b || ~~ ?},
   {? var_pres('_c')=type_of(null) | var_pres('_c')=type_of('') || _c || ~~ ?},
   {? var_pres('_d')=type_of(null) || _d || ~~ ?},
);

: tabela wynikowa, taka jak z dostepne_ud_skl z dodaną kolumną porządkującą
_buf:=sql('select 0 as NUM, :_a.* from :_a where 0=1 order by NUM',_skl);

: czy jest sens kontynuować?
{? ~_skl.first()
|| return(_buf)
?};

: określ typ
_type:=
   {? var_pres('_c')=type_of('')
   || exec('szukaj_ud_typ','schemat',_c)
   |? var_pres('_c')=type_of(null) & _c<>null & ref_tab(_c)=UD_TYP
   || _c
   || return(_buf)
   ?};
: ustal element drzewa
SEEK.UD_DEF:=
   {? var_pres('_d')=type_of(null) & _d<>null
   || {? ref_tab(_d)=UD_DEF
      || _d
      |? ref_tab(_d)=UD_SKL
      || exec('szukaj_ud_def','schemat',exec('domyslny','schemat',_type),_d)
      |? ref_tab(_d)=FIRMA
      || exec('ud_def_firma','schemat',_type).REF
      || null
      ?}
   || exec('ud_def_firma','schemat',_type)
   ?};

: czy możn rozpocząć wędrówkę?
{? SEEK.UD_DEF=null
|| return(_buf)
?};

_add:="
   UD_DEF.cntx_psh();
   SEEK.UD_DEF:=_c;
   _sym:=SEEK.UD_DEF().SYMBOL;
   {? _b.find_key(_sym,)
   || _a.blank();
      _a.NUM:=_a.size()+1;
      _a.INT_REF:=_b.INT_REF;
      _a.SQL_REF:=_b.SQL_REF;
      _a.SYMBOL:=_b.SYMBOL;
      {? _a.add()
      || UD_DEF.prefix(UD_DEF.UD_SCH,_c);
         _loop:=UD_DEF.first();
         {!
         |? _loop
         |! _d(_a,_b,UD_DEF.ref(),_d);
            _loop:=UD_DEF.next()
         !}
      ?}
   ?};
   UD_DEF.cntx_pop()
";

UD_DEF.cntx_psh();
UD_DEF.index('SYMBOL');
_add(_buf,_skl,SEEK.UD_DEF,_add);
UD_DEF.cntx_pop();

_buf


\filtr_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca fragment zapytania dla fitrowania nagłówków list z uwzględnieniem uprawnień.
::   WE: _a - kody form współpracy
::       _b - znacznik stanu listy ('', 'T', 'N')
::       _c - wymuś filtrowanie do firmy podczas pracy z grupą kapitałową, domyślnie 0
::       _d - dodatkowe ograniczenie zakresu danych
::   WY: fragment dyrektywy where
::----------------------------------------------------------------------------------------------------------------------
{? _b<>'' || 'O.Z=\''+_b+'\' and ' || '' ?}+
{? REF.FIRMA<>REF.GRUPA | (var_pres('_c')=type_of(0) & _c)
|| 'O.FIRMA=:_a and '
|| ''
?}+
'O.F_ZATR in ('+
'  select U.F_ZATR from USERS_FZ as U join F_ZATR as F using (U.F_ZATR,F.REFERENCE) '+
'  where U.FIRMA=:_a and U.USERS=:_c and U.DOSTEP=\'T\' and F.KOD=\''+_a+'\''
') and '+
exec('filtr_wid','schemat','O.WYDZIAL')+
{? var_pres('_d')=type_of('') & _d<>''
|| ' and '+_d
|| ''
?}


\filtruj_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Filtruje listę nagłówków list płac.
::   WE: _a - kod dziedziny produktowej
::       _b - wskazanie elementu drzewa
::       _c - kod formy współpracy
::       _d - znacznik stanu listy:
::            'T' - zamknięte
::            'N' - otwarte
::            wpp - wszystkie (domyślny)
::       _e - wymuś filtrowanie do firmy podczas pracy z grupą kapitałową, domyślnie 0
::       _f - dodatkowe ograniczenie zakresu danych
::----------------------------------------------------------------------------------------------------------------------
: ustal pozycje
UDB_WID.UD_DEF:=_b;
UDB_WID.UD_DEF().UD_SCH().UD_TYP();

_status:='';
{? var_pres('_d')=type_of('')
|| {? _d='T' | _d='N'
   || _status:=_d
   ?}
?};

_wf:={? REF.FIRMA=REF.GRUPA || var_pres('_e')=type_of(0) & _e<>0 ?};
_xc:={? var_pres('_f')=type_of('') || _f || '' ?};

{? O.sel_size()
|| O.sel_adel()
?};
O.clear();
O.f_set(
   'R,M,T(T)',,
   exec('filtr_o','schemat',_c,_status,_wf,_xc),
:  ograniczenie widoku
   exec('ref_firma','ustawienia'),
   exec('szukaj_udb_sys','schemat',_a,UD_TYP.SYMBOL),
   OPERATOR.USER,
   UD_SCH.ref(),
   '\''+UD_DEF.SCIEZKA+'%\''
)


\dostepne_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca tabelę tymczasową zawierającą wskazania dostępnych list.
::   WE: _a - kod dziedziny produktowej
::       _b - kod formy współpracy
::       _c - znacznik stanu listy:
::            'T' - zamknięte
::            'N' - otwarte
::            wpp - wszystkie (domyślny)
::----------------------------------------------------------------------------------------------------------------------
_schemat:=exec('domyslny','schemat','PODZORG');
_status:='';

{? var_pres('_c')=type_of('')
|| {? _c='T' | _c='N'
   || _status:=_c
   ?}
?};

sql(
   'select O.REFERENCE as REF from O where '+
   {? REF.FIRMA<>REF.GRUPA
   || 'O.FIRMA=:_a and '
   || ''
   ?}+
   'O.F_ZATR in ('
   '  select U.F_ZATR from USERS_FZ as U join F_ZATR as F using (U.F_ZATR,F.REFERENCE)'
   '  where U.FIRMA=:_a and U.USERS=:_b and U.DOSTEP=\'T\' and F.KOD=\':_c\''
   ') and '
   'O.WYDZIAL in ('
   '  select W.UD_SKL'
   '  from   UDB_WID as W'
   '  where  W.UDB_SYS=:_d and W.USERS=:_b and W.UD_SCH=:_e'
   ')'+
   {? _status<>'' || ' and O.Z=\''+_b+'\'' || '' ?}+
   ' order by REF',
:  ograniczenie widoku
   exec('ref_firma','ustawienia'),
   OPERATOR.USER,
   _b,
   exec('szukaj_udb_sys','schemat',_a,'PODZORG'),
   _schemat
)


\skidxodd_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMA [2006]
:: OPIS: Przed redakcja jednostki ksiegowej w oknach red. UD_SKL
::  OLD: \beskxdod/skid_xd.fml
::----------------------------------------------------------------------------------------------------------------------
UD_SKL.UD_TYP().SYMBOL='PODZORG'


\bs_skidxdodd_od
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMA [2006]
:: OPIS: Przed wyświetleniem jednostki ksiegowej w oknach red. UD_SKL
::----------------------------------------------------------------------------------------------------------------------
{? UD_SKL.UD_TYP().SYMBOL='PODZORG' & ODD.f_active()
|| ODD.f_clear()
?};
~~


\ud_def_child
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.30]
:: OPIS: Czy element drzewa UD_DEF ma elementy podrzedne
::  OLD: \ud_def_child/skid_ktr.fml
::----------------------------------------------------------------------------------------------------------------------
UD_DEF.cntx_psh();
UD_DEF.index('SYMBOL');
UD_DEF.prefix(UD_DEF.UD_SCH,UD_DEF.ref());
_ok:=UD_DEF.first();
UD_DEF.cntx_pop();
_ok


\ud_def_zwin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2011]
:: OPIS: Akcja zwin/rozwin okna K_ROLE tabeli UD_DEF
::   WE: _a - okno
::  OLD: \k_role_d_zwin/skid_con.fml
::----------------------------------------------------------------------------------------------------------------------
{! |? UD_DEF.seek(UD_DEF.UD_DEF,) & UD_DEF.UD_DEF !};
UD_DEF.tr_set(~UD_DEF.tr_state(),{? _=1 || _a || 'K_ROLE' ?})


\win_red_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Okno redagowania UD_SKL
::----------------------------------------------------------------------------------------------------------------------
{? UD_TYP.SYMBOL='POZ_BUD' | UD_TYP.SYMBOL='SPR_PB'
|| 'REDPB'
|| 'RED'
?}


\be_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMA [2006]
:: OPIS: Przed redakcją elementu schematu dla FK (z redakcja SKIDXDUD)
::   WE: _a: tryb edycji: 0 - dolaczanie, 1 - poprawianie
::  OLD: \be_skl/skid_xd.fml
::----------------------------------------------------------------------------------------------------------------------
ROZNE.JM:=UD_POM.WAL:=null;
UNPAR.P1:=0;
UNPAR.P1_BV:=$"exec('bv_skl','schemat',2)";
UNPAR.P1_BE:='UNPAR.P2=1';
UNPAR.P1_AE:='{? ~UNPAR.P1 || UD_POM.WAL:=null ?}; 1';
UNPAR.P2:=1;
UNPAR.P2_BV:=$"exec('bv_skl','schemat',1)";
UNPAR.P2_BE:='';
UNPAR.P2_AE:='{? ~UNPAR.P2 || UD_POM.WAL:=null; UNPAR.P1:=0 || ROZNE.JM:=null; UNPAR.P3:=0 ?}; 1';
UNPAR.P3:=0; UNPAR.P3_BV:=''; UNPAR.P3_BE:='UNPAR.P2=0';
UNPAR.P3_AE:='{? UNPAR.P3<0 | UNPAR.P3>6 || FUN.info(\'Błędna dokładność.\nDopuszczalna dokładność od 0'
   +' do 6.\'); 0 || 1 ?}';
UNPAR.P7:=1; UNPAR.P7_BV:=UNPAR.P7_AE:=''; UNPAR.P7_BE:='';
UNPAR.P10_BV:=UNPAR.P10_BE:=UNPAR.P10_AE:='';
ROZNE.NAZ_PROP:='';
{? _a
|| SKIDXDUD.index('POZ'); SKIDXDUD.prefix(UD_SKL.ref());
   {? SKIDXDUD.first()
   || ROZNE.JM:=SKIDXDUD.JM;
      UD_POM.WAL:=SKIDXDUD.WAL;
      UNPAR.P7:={? SKIDXDUD.STR='Wn' || 1 || 2 ?};
      UNPAR.P1:={? SKIDXDUD.WSK_WAL='T' || 1 || 0 ?};
      UNPAR.P2:={? SKIDXDUD.WART_IL='W' || 1 || 0 ?};
      UNPAR.P3:=SKIDXDUD.PREC;
      UNPAR.PB:={? SKIDXDUD.CIW='I' || 0
                |? SKIDXDUD.CIW='W' || 1
                |? SKIDXDUD.CIW='C' || 2
                || 'jezeli nie wskazano C,I lub W to pole bedzie rowne SKIDXDUD.WART_IL';
                   UNPAR.P2
                ?};
      UNPAR.P10:=SKIDXDUD.ONLY_L;
      UNPAR.P12:=SKIDXDUD.TYP_NAR;
      UNPAR.PF:=SKIDXDUD.F_NAR;
      UNPAR.PF1:=SKIDXDUD.B_GET;
      UNPAR.PF2:=SKIDXDUD.A_SEND;
      UNPAR.P8:=~SKIDXDUD.DONTSAVE
   ?};
   SKIDXNAP.index('UD_SKL'); SKIDXNAP.prefix(UD_SKL.ref());
   {? SKIDXNAP.first() || ROZNE.NAZ_PROP:=SKIDXNAP.NAZWA ?};
   __USKLSM:=UD_SKL.SYMBOL
?};
1


\ae_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMA [2006]
:: OPIS: Po redakcji elementu schematu dla FK
::   WE: _a: tryb edycji: 0 - dolaczanie, 1 - poprawianie (pozycji budzetowych)
::                        2 - dolaczanie, 3 - poprawianie (pozostalych)
::  OLD: \ae_skl/skid_xd.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 | _a=1
|| {? _a=1
   || SKIDXDUD.index('POZ'); SKIDXDUD.prefix(UD_SKL.ref());
      {? ~SKIDXDUD.first() || SKIDXDUD.blank(); _a:=0 ?}
   || SKIDXDUD.blank()
   ?};
   SKIDXDUD.POZ_BUD:=UD_SKL.ref();
   SKIDXDUD.WART_IL:={? UNPAR.P2 || 'W' || 'I' ?};
   SKIDXDUD.JM:=ROZNE.JM;
   SKIDXDUD.PREC:={? SKIDXDUD.JM || UNPAR.P3 || 0 ?};
   SKIDXDUD.STR:={? UNPAR.P7=1 || 'Wn' || 'Ma' ?};
   SKIDXDUD.WSK_WAL:={? UNPAR.P1 || 'T' || 'N' ?};
   SKIDXDUD.WAL:=UD_POM.WAL;
   SKIDXDUD.CIW:={? UNPAR.P2 || 'W' || 'I' ?};
   SKIDXDUD.ONLY_L:=UNPAR.P10;
   SKIDXDUD.TYP_NAR:=UNPAR.P12;
   SKIDXDUD.F_NAR:=UNPAR.PF;
   SKIDXDUD.B_GET:=UNPAR.PF1;
   SKIDXDUD.A_SEND:=UNPAR.PF2;
   SKIDXDUD.DONTSAVE:=~UNPAR.P8;
   SKIDXDUD.prefix();
   {? _a=1 || SKIDXDUD.put() || SKIDXDUD.add() ?}
?};
{? ROZNE.NAZ_PROP<>''
|| {? _a=1 | _a=3
   || SKIDXNAP.index('UD_SKL'); SKIDXNAP.prefix(UD_SKL.ref());
      {? ~SKIDXNAP.first()
      || {? _a=1 || _a:=0 || _a:=2 ?}
      ?}
   ?};
   {? _a=0 | _a=2
   || SKIDXNAP.UD_SKL:=UD_SKL.ref();
      SKIDXNAP.UD_TYP:=UD_SKL.UD_TYP
   ?};
   SKIDXNAP.NAZWA:=ROZNE.NAZ_PROP;
   SKIDXNAP.prefix();
   {? _a=1 | _a=3
   || SKIDXNAP.put()
   || SKIDXNAP.add()
   ?}
?};
{? _a=1 | _a=3
|| _f:="SLO.TR:=($(RS.TAB+'.'+RS.TR))();SLO.put()";
   exec('ud2slo','slo_slu',1,_f);
   exec('ud2slo','slo_slu',0,_f)
?};
1


\ae_grp_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AB [19.42]
:: OPIS: Po grupowej akcji redakcji elementów schematu dla FK
::----------------------------------------------------------------------------------------------------------------------
_ae_grp_skl:=1;
SKIDXDUD.index('POZ'); SKIDXDUD.prefix(UD_SKL.ref());
_jest:=SKIDXDUD.first();
{? ~_jest || SKIDXDUD.blank() ?};
SKIDXDUD.POZ_BUD:=UD_SKL.ref();
SKIDXDUD.WART_IL:={? pozbud_skl_bga || 'W' || 'I' ?};
SKIDXDUD.JM:=miara_skl_bga;
SKIDXDUD.PREC:={? SKIDXDUD.JM || dokladnosc_skl_bga || 0 ?};
SKIDXDUD.STR:={? strona_skl_bga=1 || 'Wn' || 'Ma' ?};
SKIDXDUD.WSK_WAL:={? waluta_skl_bga || 'T' || 'N' ?};
SKIDXDUD.WAL:=dwaluta_skl_bga;
SKIDXDUD.CIW:={? pozbud_skl_bga || 'W' || 'I' ?};
SKIDXDUD.ONLY_L:=liscie_skl_bga;
SKIDXDUD.TYP_NAR:=liscie_skl_bga;
SKIDXDUD.F_NAR:=narast_skl_bga;
SKIDXDUD.B_GET:=pobran_skl_bga;
SKIDXDUD.A_SEND:=wyslan_skl_bga;
SKIDXDUD.DONTSAVE:=~zapisy_skl_bga;
SKIDXDUD.prefix();
{? _jest || SKIDXDUD.put() || SKIDXDUD.add() ?};
{? ROZNE.NAZ_PROP<>''
|| SKIDXNAP.index('UD_SKL'); SKIDXNAP.prefix(UD_SKL.ref());
   {? ~SKIDXNAP.first()
   || {? _ae_grp_skl=1 || _ae_grp_skl:=0 || _ae_grp_skl:=2 ?}
   ?};
   {? _ae_grp_skl=0 | _ae_grp_skl=2
   || SKIDXNAP.UD_SKL:=UD_SKL.ref();
      SKIDXNAP.UD_TYP:=UD_SKL.UD_TYP
   ?};
   SKIDXNAP.NAZWA:=ROZNE.NAZ_PROP;
   SKIDXNAP.prefix();
   {? _ae_grp_skl=1
   || SKIDXNAP.put()
   || SKIDXNAP.add()
   ?}
?};
{? _ae_grp_skl=1
|| _f:="SLO.TR:=($(RS.TAB+'.'+RS.TR))();SLO.put()";
   exec('ud2slo','slo_slu',1,_f);
   exec('ud2slo','slo_slu',0,_f)
?};
1


\can_del_ud
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.10]
:: OPIS: Czy mozna usunac element schematu danych
::   WE: _a - 1 UD_DEF, 2 UD_SKL
::  OLD: \bd_ud_def/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| UD_SKL.clear();
   UD_DEF.UD_SKL()
?};
_tab:=UD_SKL.testlink(2);
{? _tab.find_key('K_E_VIEW')
|| {? _a=2 || return(2) ?};
   _jest:=0;
   _tab.prefix('K_E_VIEW');
   {? _tab.first()
   || SKID_MBP.cntx_psh();
      K_E_VIEW.prefix();
      {!
      |? {? K_E_VIEW.seek(_tab.REF,)
         || _jest:=K_E_VIEW.K_P_VIEW().SKID_MBP().UD_SCH=UD_DEF.UD_SCH
         ?};
         _jest=0 & _tab.next()
      !};
      SKID_MBP.cntx_pop()
   ?};
   {? _jest || return(2) ?}
?};
{? _tab.find_key('K__POZ') | _tab.find_key('SKIDXD') & _tab.TABELA='SKIDXD'
|| _jest:=1
|| _jest:=0
?};
::_tab.win_sel(_tab.mk_sel(,,1));
::_tab.select();
_jest


\ud_typ_firma_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Udostepnia zawartosc tabeli UD_FIR
::  OLD: \ud_fir/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
FIRMA.win_dict('SLO');

UD_SKL.cntx_psh();
UD_SKL.win_dict('WER');
UD_SKL.actions('WER','DPU:D');

UD_FIR.cntx_psh();
UD_FIR.index('SYMBOL');
UD_FIR.prefix(UD_TYP.ref());
UD_FIR.win_sel('WER');
UD_FIR.win_edit('RED');

UD_FIR.select();

UD_FIR.cntx_pop();
UD_SKL.actions('WER');
UD_SKL.cntx_pop();
FIRMA.cntx_pop()


\ud_fir_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Sprawdza poprawnosc danych w tabeli UD_FIR
::  OLD: \spr_ud_fir/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.table(UD_FIR,-menu_txt()='popraw')


\no_limit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Formuła sprawdza, czy użytkownik ma dostęp do wszystkich jednostek org. Dodatkowo wyświetlany jest komunikat
::       jesli brak pełnego dostępu.
::   WE: _a - symbol dziedziny
::       _b - (opcjonalny) jeśli równy zero, komunikat o braku praw dostępu nie jest wyświetlany
::       _c - pominięcie grup uprawnień (<>0/brak lub 0 - tak/nie*)
::   WY: 1 - gdy użytkownik ma nieograniczone prawa do jednostek organizacyjnych
::       0 - gdy użytkownik nie ma praw dostępu do chociaż jednej jednostki org.
::  OLD: \no_limit/user.fml
::----------------------------------------------------------------------------------------------------------------------
_msg:=(var_pres('_b')<>type_of(0) | _b<>0);

{? var_pres('_a')<>type_of('') | _a=''
|| {? _msg
   || FUN.emsg(
         'Błąd wywołania formuły "%1".\n'
         'Symbol dziedziny musi być podany.'@
         ['no_limit']
      )
   ?};
   return(0)
?};

_udb_sys:=exec('szukaj_udb_sys','schemat',_a,'PODZORG');
{? _udb_sys=null
|| {? _msg
   || FUN.emsg('Brak konfiguracji uprawnień dla dzieniny "%1".'@[_a])
   ?};
   return(0)
?};

_firma:=exec('ud_skl_firma','schemat','PODZORG');
{? _firma=null
|| return(0)
?};

: składniki tworzące aktualną strukturę domyślnego drzewa podziału organizacyjnego firmy
_SKL:=sql('select S.REFERENCE as REF from UD_SKL as S where S.SCIEZKA like \'%:_a|%\'',($_firma)+8);
{? ~_SKL.size()
|| {? _msg
   || FUN.emsg(
         'Niekompletna definicja struktury organizacyjnej.\n'
         'Działanie funkcji zostanie przerwane.'@
      )
   ?};
   return(0)
?};

: sprawdzenie blokad
_UPR:=sql(
   'select count(*) LOCKS from '
   'UDB_UPR as U where '
   'U.UDB_SYS=:_a and '
   'U.USERS=:_b and '
   'U.DOSTEP<>\'T\' and '
   'U.UD_SKL in (select :_c.REF from :_c)',
   _udb_sys,
   OPERATOR.USER,
   _SKL
);

{? type_of(_UPR)<>type_of(SYSLOG)
|| return(0)
?};

_ret:=~(_UPR.first() & _UPR.LOCKS);
{? ~_ret & _msg
|| FUN.emsg(
      'Działanie funkcji zostanie przerwane ze względu na brak praw\n'
      'dostępu do wszystkich jednostek organizacyjnych przedsiębiorstwa.'@
   )
?};
obj_del(_UPR);

{? _ret<>0
|| {? var_pres('_c')<>type_of(0) | _c=0
   || _ret:=exec('no_limit','gp_api',_a,_msg)
   ?}
?};

_ret


\no_limit_access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła wykorzystywana w dyrektywie access czynność jeśli ma być sprawdzone, czy użytkownik ma nieograniczony
::       dostęp do jednostek organizacyjnych.
::   WE: _a - symbol dziedziny
::   WY: wynik \no_limit/schemat.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_usr:=OPERATOR.USER;
OPERATOR.USER:=_par.user;

_res:=exec('no_limit','schemat',_a,0);
OPERATOR.USER:=_usr;

_res


\ud_def_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przygotowuje bufor zawierający informacje o wierszu tabeli UD_DEF
::   WE:
::   WY: wskazanie tablicy nazwanej:
::       REF - wskazanie wiersza
::       UD_DEF - numer rekordu nadrzędnego
::       UD_SKL - wskazanie elementu drzewa
::       UD_SCH - wskazanie schemtu
::       SYMBOL - symbol elementu drzewa
::       OPIS - opis elementu drzewa
::       SCIEZKA - ścieżka do elementu
::----------------------------------------------------------------------------------------------------------------------
_buf:=obj_new('REF','UD_DEF','UD_SKL','UD_SCH','SYMBOL','OPIS','SCIEZKA','clear','read','get');

_buf.clear:="
   .REF:=null();
   .UD_DEF:=0;
   .UD_SKL:=null();
   .UD_SCH:=null();
   .SYMBOL:='';
   .OPIS:='';
   .SCIEZKA:='';
   ~~
";

_buf.read:="
   .REF:=UD_DEF.ref();
   .UD_DEF:=UD_DEF.UD_DEF;
   .UD_SKL:=UD_DEF.UD_SKL;
   .UD_SCH:=UD_DEF.UD_SCH;
   .SYMBOL:=UD_DEF.SYMBOL;
   .OPIS:=UD_DEF.OPIS;
   .SCIEZKA:=UD_DEF.SCIEZKA
";

_buf.get:="
   _ret:=0;
   .clear();
   UD_DEF.cntx_psh();
   UD_DEF.prefix();
   {? {? type_of(_a)=type_of(0)
      || UD_DEF.seek(_a,)
      || UD_DEF.seek(_a)
      ?}
   || _ret:=1;
      .read()
   ?};
   UD_DEF.cntx_pop();
   _ret
";

_buf.clear();
_buf


\wyb_ud_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Wybór rekordu w UD_DEF przy edycji podziałów (EPODZ)
::----------------------------------------------------------------------------------------------------------------------
_acr:=web_top_fld_acr(1);
{? 1+_acr<>'K' || EPODZ.web_cntx_load() ?};
{? _acr='PBUD'
|| EPODZ.PBUD:=UD_DEF.UD_SKL;
   UD_POM.PBUD:=UD_DEF.SYMBOL
|? _acr='JORG'
|| EPODZ.JORG:=UD_DEF.UD_SKL;
   UD_POM.JORG:=UD_DEF.SYMBOL
|? _acr='OKOSZ'
|| EPODZ.OKOSZ:=UD_DEF.UD_SKL;
   UD_POM.OKOSZ:=UD_DEF.SYMBOL
|? _acr='WYM4'
|| EPODZ.WYM4:=UD_DEF.UD_SKL;
   UD_POM.WYM4:=UD_DEF.SYMBOL
|? _acr='WYM5'
|| EPODZ.WYM5:=UD_DEF.UD_SKL;
   UD_POM.WYM5:=UD_DEF.SYMBOL
|? 1+_acr='K'
|| ($('UD_POM.'+_acr+':=_a'))(UD_DEF.SYMBOL)
?};
UD_DEF.web_close();
web_top_fld_update(1,1)


\bv_ud_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed wyswietl okna tabeli UD_SKL
::----------------------------------------------------------------------------------------------------------------------
UD_TYP.cntx_psh();
UD_SKL.cntx_psh();
{? UD_SKL.UD_TYP().SYMBOL='POZ_BUD'
|| UD_SKL.win_edit('REDPB');
   exec('be_skl','schemat',1)
?};
UD_SKL.display();
UD_SKL.cntx_pop();
UD_TYP.cntx_pop()


\is_kali
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2008]
:: OPIS: Formula sprawdza czy schemat jest zastrzeżony
::   WY: 1 - tak, 0 - nie
::  OLD: \is_kali/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
',STRORG,STR_STAN,Z_STROLD,'*(','+UD_SCH.SYMBOL+',')


\bv_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed wyswietleniem pol UD_SKL
::   WE: _a - nr pola
::----------------------------------------------------------------------------------------------------------------------
_akr:='REDPB';
{? var_press('pozbud_grayed') > 0
|| {? pozbud_grayed
   || _akr:='PB_GRUP'
   ?}
?};
{? _a=1
|| UD_SKL.efld_opt(_akr,'enable='+$(UNPAR.P2=1),UNPAR,'P1');
   UD_SKL.efld_opt(_akr,'enable='+$(UNPAR.P2=1),UNPAR,'P7');
   UD_SKL.efld_opt(_akr,'enable='+$(UNPAR.P2=1 & UNPAR.P1=1),UD_POM,'WAL');
   UD_SKL.efld_opt(_akr,'enable='+$(UNPAR.P2=0),ROZNE,'JM');
   UD_SKL.efld_opt(_akr,'enable='+$(UNPAR.P2=0),UNPAR,'P3')
|| UD_SKL.efld_opt(_akr,'enable='+$(UNPAR.P1=1),UD_POM,'WAL')
?};
~~


\ud_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Zwraca schemat na podstawie numeru rekordu
::   WE: _a - nr rekordu
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| UD_SKL.cntx_psh();
   UD_SKL.index('SYMBOL'); UD_SKL.prefix();
   _ref:={? UD_SKL.seek(_a,) || UD_SKL.ref() || null ?};
   UD_SKL.cntx_pop();
   _ref
|| null
?}


\szukaj_firmy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.28]
:: OPIS: Odnajdowanie firmy podczas redagowania struktury org. w związku z powiązaniami z jednostkami księgowymi
::   WE: _a [STRING] - symbol jednostki organizacyjnej
::   WY: _firma - ref firmy lub null
::----------------------------------------------------------------------------------------------------------------------
_firma:=null();

UD_SKL.cntx_psh();
UD_DEF.cntx_psh();
UD_FIR.cntx_psh();
UD_FIR.index(UD_FIR.ndx_tmp(,1,'UD_SKL','SYMBOL',));
UD_FIR.prefix(_a,);
{? UD_FIR.first()
|| _firma:=UD_FIR.FIRMA
|| UD_DEF.index('SCHSYM');
   UD_DEF.prefix(UD_SCH.ref(),_a,);
   {? UD_DEF.first()
   || _up:=UD_DEF.UD_SQL;
      {? UD_DEF.seek(_up,,1)
      || _firma:=exec('szukaj_firmy','schemat',UD_DEF.SYMBOL)
      ?}
   ?}
?};
UD_FIR.ndx_drop();
UD_FIR.cntx_pop();
UD_DEF.cntx_pop();
UD_SKL.cntx_pop();

_firma


\test_jk_dla_jo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.28]
:: OPIS: Test jednostki księgowej dla jednostki organizacyjnej
::   WE: _a - ref dodawanej jednostki organizacyjnej
::       _b - nazwa tabeli dodawanej jednostki organizacyjnej
::       _c - nadrzędna jednostka organizacyjna, do której ma być dodana kolejna jednostka organizacyjna
::       _d - 1 - dnd lub popraw gdy jenostka organizacyjna jest już przypięta do struktury organizacyjnej
::            0 - dołącz gdy jednostka organizacyjna nie jest jeszcze przypięta do struktury organizacyjnej
::   WY: _wyn - 1/0 - można/nie można dodać wybranej jednostki organizacyjnej do wybranego elementu drzewa
::             ze względu napowiązanie z jednostką księgową
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_jke:=null();
_jkp:=
   "  _jkp:=null();
      _ud_def:=UD_DEF.ref();
      UD_DEF.cntx_psh();
      UD_DEF.index('SQLSYM');
      UD_DEF.prefix($_ud_def);
      {? UD_DEF.first()
      || {!
         |? SKIDXODD.cntx_psh();
            SKIDXODD.index('UD_SKL');
            SKIDXODD.prefix(UD_DEF.UD_SKL);
            {? SKIDXODD.first()
            || _jkp:=SKIDXODD.ODD().FIRMA
            ?};
            SKIDXODD.cntx_pop();
            {? _jkp=null() || _jkp:=_b(UD_DEF.ref(),_b) ?};
            UD_DEF.next() & _jkp=null()
         !}
      ?};
      UD_DEF.cntx_pop();
      _jkp
   ";
UD_DEF.cntx_psh();
_ud_skl:={? _d=1
         || {? UD_DEF.seek(_a,_b,1)
            || UD_DEF.UD_SKL
            || UD_DEF.cntx_pop();
               return(0)
            ?}
         || _a
         ?};
:: jednostka księgowa bieżącego elementu struktury organizacyjnej
SKIDXODD.cntx_psh();
SKIDXODD.index('UD_SKL');
SKIDXODD.prefix(_ud_skl);
{? SKIDXODD.first()
|| _jke:=SKIDXODD.ODD().FIRMA
?};
SKIDXODD.cntx_pop();

{? _jke
|| {? ~UD_DEF.seek(_c,,1) || UD_DEF.cntx_pop(); return(0) ?};
:: Sprawdzenie zgodności firm, jeżeli jednostka organizacyjna jest powiązana z jednostką księgową.
   {? exec('szukaj_firmy','schemat',UD_DEF.SYMBOL)<>_jke
   || FUN.emsg(
      'Nie można dodać wybranej jednostki organizacyjnej,\n'
      'ponieważ ma przypisaną jednostkę księgową, która nie należy do firmy,\n'
      'do której ta jednostka organizacyjna jest dodawana.'@
      );
      _wyn:=0
   ?}
||
:: Sprawdzenie czy podległe jednostki organizacyjne nie są powiązane z jenostką księgową z innej firmy.
   {? +UD_DEF.SYMBOL
   || _test:=_jkp(UD_DEF.ref(),_jkp);
      {? ~UD_DEF.seek(_c,,1) || UD_DEF.cntx_pop(); return(0) ?};
      {? _test & exec('szukaj_firmy','schemat',UD_DEF.SYMBOL)<>_test
      || FUN.emsg(
         'Nie można dodać wybranej jednostki organizacyjnej,\n'
         'ponieważ istnieją jednostki organizacyjne z przypisaną jednostkę księgową,\n'
         'która nie należy do firmy, do której ta jednostka organizacyjna jest dodawana.'@
         );
         _wyn:=0
      ?}
   ?}
?};
UD_DEF.cntx_pop();

_wyn


\dodaj_ud_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Dodaje element do schematu danych
::   WE: _a - schemat (_UD_SCH)
::       _b - element nadrzędny (_UD_DEF)
::       _c - element (_UD_SKL)
::   WY: dodany lub istniejacy element drzewa
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
UD_DEF.cntx_psh();
UD_DEF.index('PODTEC');
UD_DEF.prefix(_a);
{? UD_DEF.find_key(_c)
|| _ref:=UD_DEF.ref()
|| UD_DEF.blank(1);
   UD_DEF.UD_SCH:=_a;
   UD_DEF.UD_DEF:=_b;
   UD_DEF.UD_SKL:=_c;
   UD_SKL.cntx_psh();
   UD_SCH.cntx_psh();
   {? UD_DEF.UD_SKL().UD_TYP=UD_DEF.UD_SCH().UD_TYP
   || {? UD_DEF.add() || _ref:=UD_DEF.ref() ?}
   ?};
   UD_SCH.cntx_pop();
   UD_SKL.cntx_pop()
?};
UD_DEF.cntx_pop();
_ref


\ud_def_skl_pow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza wykorzystanie składnika właściwego dla bieżącego elementu struktury.
::   WE: _a - brak lub 0 - pomijaj zagłębienia, nie zero - sprawdź podrzędne
::   WY: -1 - nie usuwaj elementu drzewa - decyzja użytkownika
::        0 - element może być usunięty - brak powiązań
::        1 - element może być usunięty - decyzja użytkownika
::----------------------------------------------------------------------------------------------------------------------
UD_SKL.cntx_psh();
UD_SKL.prefix();
UD_DEF.UD_SKL();

_ingore:=',UD_DEF,UDB_UPR,UDB_WID,';
_LINKS:=UD_SKL.testlink(2);
UD_SKL.cntx_pop();
_loop:=_LINKS.first();
{!
|? _loop
|! {? _ingore*(','+_LINKS.TABELA+',')
   || _loop:=_LINKS.next()
   || {? FUN.ask(
            'Składnik "'+UD_SKL.SYMBOL+'" dla elementu struktury jest wykorzystywany w ewidencji danych.\n'+
            'Czy na pewno kontynuować usuwanie wybranego wiersza?'@
         )
      || return(1)
      || return(-1)
      ?}
   ?}
!};

: czy sprawdzać zapisy podrzędne
{? var_pres('_a')<>type_of(0) | ~_a
|| return(0)
?};

UD_DEF.cntx_psh();
UD_DEF.index('SYMBOL');
UD_DEF.prefix(UD_DEF.UD_SCH,#UD_DEF.ref());
_loop:=UD_DEF.first();
_count:=0;
{!
|? _loop
|! _test:=exec('ud_def_skl_pow','schemat',1);
   {? _test<0
   || UD_DEF.cntx_pop();
      return(-1)
   |? _test>0
   || _count+=1
   ?};
   _loop:=UD_DEF.next()
!};
UD_DEF.cntx_pop();

_count


\ud_def_au
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: "Usuń po" okienka WER tabeli UD_DEF
::  OLD: \menu_ba/skid_ud.fml
::  OLD: \menu_aa/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_pow:=exec('ud_def_skl_pow','schemat'))<0
|| return(0)
?};

_pod:=0;
UD_DEF.cntx_psh();
UD_DEF.index('SYMBOL');
UD_DEF.prefix(UD_DEF.UD_SCH,#UD_DEF.ref());
_pod:=UD_DEF.first();
UD_DEF.cntx_pop();

{? {? _pod
   || _del:=FUN.choice('Czy usunąć bieżący wiersz?'@,,'Pozostaw podrzędne'@,'Usuń podrzędne'@);
      {? _del=1
      || _ud_def:=UD_DEF.UD_DEF;
         UD_DEF.cntx_psh();
         UD_DEF.clear();
         UD_DEF.f_set(,,'UD_DEF.UD_DEF=:_a',#UD_DEF.ref());
         _loop:=UD_DEF.f_first();
         do();
         {!
         |? _loop & _del
         |! UD_DEF.UD_DEF:=_ud_def;
            _del:=UD_DEF.put();
            _loop:=UD_DEF.f_next()
         !};
         UD_DEF.f_clear();
         UD_DEF.cntx_pop();
         end();
         _del
      |? _del=2
      || {? ~_pow
         || {? exec('ud_def_skl_pow','schemat',1)<0
            || return(-1)
            ?}
         ?};
         FUN.ask(
            'Operacja usunięcia informacji jest nieodwracalna.\n'
            'Czy na pewno usunąć wiersz i powiązane informacje?'@
         )
      ?}
   || exec('del_ask','#table',UD_DEF)
   ?}
|| UD_DEF.del()
?}


\chron_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.42]
:: OPIS: Lista typów danych, dla których ochrona nie może być wyłączona.
::   WE: _a [STRING] - symbol typu danych
::   WY:  1 - typ danych musi być chroniony,
::        0 - typ danych może nie być chroniony
::       -1 - wystąpił błąd
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | _a=''
|| return(-1)
?};
'|PODZORG|'*('|'+_a+'|')


\udb_upr_zmien
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Ustawia wartości w kontroli uprawnień.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Zakończ, jeśli uprawnienia są zakładane przy dodawaniu użytkownika
{? exec('get','#bulk',USERS,'add',$UDB_UPR.USERS)
|| return()
?};

_query:=
   'select U.DOSTEP, count(*) as TEST '
   'from UDB_UPR as U join UD_SKL as S using (U.UD_SKL,S.REFERENCE) '
   'where U.USERS=:_a and S.UD_TYP=:_b and S.DOMYSLNY=\'T\' '
   'group by U.DOSTEP';
_rs:=sql(_query,UDB_UPR.USERS,UDB_UPR.UD_SKL().UD_TYP);
_rs.index(_rs.ndx_tmp(,,'DOSTEP',,));

_access:=0;
{? _rs.find_key('T')
|| {? _rs.size()=1
   || _access:=2
   || _access:=1
   ?}
?};

exec('Perm','#object');

FIRMA.cntx_psh();
FIRMA.prefix();
_loop:=FIRMA.first();
{!
|? _loop
|! Perm.setPermission('UD_SKL',FIRMA.ref(),UDB_UPR.USERS,_access);
   _loop:=FIRMA.next()
!};
FIRMA.cntx_pop()


\nawigator
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Tworzy okienko nawigatora po strukturze drzewiastej z możliwością wyboru wiersza i zmiany schematu.
::   WE: _a [STRING] - symbol typu danych (domyślnie 'PODZORG')
::       _b [STRING] - rodzaj nawigatora: MIN, MID, MAX*
::       _c [INTEGER] - 0*/1 - dostępna akcja "Wybierz" (wywołanie sel_exit)
::       _d [INTEGER] - 0*/1 - dostępna akcja "Schemat"
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_sym:='PODZORG';
_nav:='MAX';
_sel:=0;
_sch:=0;
_len:=30;

{? var_pres('_a')=type_of('')
:: podano symbol typu danych
|| {? (_typ:=exec('szukaj_ud_typ','schemat',_a))<>null
   || _typ:=exec('szukaj_ud_typ','schemat',_sym)
   || _sym:=_a
   ?}
?};
{? var_pres('_b')=type_of('')
:: określono rodzaj nawigatora
|| {? ',MIN,MID,MAX,'*(',%1,'[~-_b])
   || _nav:=-_b
   ?};
   {? _nav='MIN'
   || _len:=20
   |? _nav='MID'
   || _len:=35
   ?}
?};
{? var_pres('_c')=type_of(0)
:: akcja "Wybierz"
|| _sel:=(_c<>0)
?};
{? var_pres('_d')=type_of(0)
:: akcja "Schemat"
|| _sch:=(_d<>0)
?};

_wnd:=UD_DEF.mk_sel('Struktura'@,'P',0,'#ud_def_%1'[_nav],,,,1);
UD_DEF.win_fld(_wnd,,'UD_SKL','SYMBOL',,_len,,,MS.name(UD_TYP,'SYMBOL'),,MS.comment(UD_TYP,'SYMBOL'));
{? _nav='MAX'
|| UD_DEF.win_fld(_wnd,,'UD_SKL','SYMBOL',,50,,,MS.name(UD_TYP,'OPIS'),,MS.comment(UD_TYP,'OPIS'));
   UD_DEF.win_fld(_wnd,UD_POM,'AKTYWNY',,,-3,,,MS.name(UD_POM,'AKTYWNY'),,MS.comment(UD_POM,'AKTYWNY'),
      2,,"'T'","'N'"
   )
?};
{? _sel<>0
|| UD_DEF.win_act(_wnd,,'Formuła','Wybierz'@@,,'Wybór bieżącego zapisu'@,,"sel_exit()",1)
?};
{? _sch<>0
|| UD_DEF.win_act(_wnd,,'Formuła','S&chemat'@@,,'Wybór schematu danych'@,,$(
      '_sym:={? UD_SCH.UD_TYP().SYMBOL=\'%1\' || UD_SCH.SYMBOL || ~~ ?};'
      '_sch:=exec(\'ud_sch_wybierz\',\'schemat\',\'%1\',_sym);'
      '{? UD_SCH.seek(_sch.REF,,1)'
      '|| UD_SCH.cntx_psh();'
      '   UD_DEF.prefix(_sch.REF);'
      '   {? (_skl:=exec(\'ud_def_firma\',\'schemat\',\'%1\')).REF<>null'
      '   || exec(\'ud_def_root\',\'schemat\',cur_win(1,1),_sch.REF,_skl.UD_SKL)'
      '   ?};'
      '   UD_SCH.cntx_pop()'
      '?}'
      [_sym]
   ))
?};
UD_DEF.win_act(_wnd,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,"exec('zwin_rozwin','#tree')",,,,,,
   'R',,'target=window'
);
UD_DEF.win_act(_wnd,,'Szukaj');
{? _nav='MAX'
|| UD_DEF.win_act(_wnd,,'Kolejność')
?};

_wnd


\nawigator_ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Ustawia stan początkowy nawigatora
::   WE: _a [STRING] - akronim okienka
::       _b [_UD_SCH] - wskazanie schematu
::       _c [_UD_SKL] - wskazanie elementu (opcjonalny)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_wnd:=_a;
_sch:=_b;
_skl:=_c;

UD_DEF.index('SYMBOL');
UD_DEF.prefix(P_FILTER.UD_SCH);
{? var_pres('_c')=type_of(null) & _c<>null & ref_tab(_c)=UD_SKL
|| exec('ud_def_root','schemat',_wnd,_sch,_c)
?};
~~


\dostepne_p_parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Zwraca tabelę tymczasową zawierającą wskazania dostępnych współpracowników, uwzględniającą parametry sesji.
::       Formuła wykorzystywana między innymi w zapytaniach SQL.
::   WE: _a [STRING] - Kod dziedziny produktowej.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('dostepne_p','schemat',
   _a,
   __PARSES.getVal('F_ZATR').KOD,
   __PARSES.getVal('ZakresDanych'),
   __PARSES.getVal('JednostkaOrganizacyjna').SYMBOL
)


\ud_def_przesun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Obsługa przesunięcia do wybranego zapisu.
::   WE: _a [RULE] - formuła ustalająca element nadrzędny
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
_val:=exec('bind_node','#tree',_a);
{? type_of(_val)=type_of(0) & _val=0
|| exec('bind_node_error','#tree')
?};
0


\ud_def_przesun_0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Akcja "Przesuń > Na poziom główny".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
exec('ud_def_przesun','schemat',"null")


\ud_def_przesun_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Przed "Przesuń > Do wybranego zapisu".
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
exec('ud_def_przesun','schemat',"
   _ref:=exec('ud_def_wybierz','schemat',UD_DEF.UD_SKL().UD_TYP,UD_DEF.UD_SCH,,2,UD_DEF.SYMBOL,1,1,1).REF;
   {? _ref=null
   || return('cancel')
   ?};
   _ref
")


\firma4ud_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Formuła wyznacza firmę dla wskazanej jednostki organizacyjnej.
::   WE: [_a] [STRING/REFERENCE] - Symbol typu (UD_TYP.SYMBOL) [domyślnie: PODZORG].
::       [_b] [STRING/REFERENCE] - Symbol schematu (UD_SCH.SYMBOL) [domyślnie: STRORG].
::        _c  [STRING/REFERENCE] - Element schematu danych (UD_SKL.SYMBOL / UD_SKL.ref()).
::       [_d] [STRING]           - Tekst formuły do wykonania dla znalezionego rekordu tabeli FIRMA (w konstrukcji
::                                 wiążącej), [domyślnie: 'ref()']. Poprawność formuły NIE jest weryfikowana.
::   WY: Tablica elementów nazwanych:
::          * STATUS: B - błąd / I - Informacja / OK - sukces.
::          * MSG - Treść komunikatu (jeżeli STATUS ma wartość B lub I).
::          * VAL - Wynik formuły _d (jeżeli STATUS=OK).
::----------------------------------------------------------------------------------------------------------------------
:: Kilka stałych
_tVOID:=type_of(~~);
_tSTRING:=type_of('');
_tREF:=type_of(null());

_ret:=obj_new('STATUS','MSG','VAL');
_ret.STATUS:='B';
_ret.MSG:='';
_ret.VAL:=~~;

:: Obsługa parametrów wywołania
_typ:=null();
_vpa:=var_pres('_a');
{? _vpa=_tSTRING
|| _typ:=exec('szukaj_ud_typ','schemat',_a,1)
|? _vpa=_tREF
|| {? _a<>null() & ref_tab(_a)=UD_TYP
   || _typ:=_a
   ?}
|? _vpa=_tVOID
|| _typ:=exec('szukaj_ud_typ','schemat','PODZORG',1)
?};
{? _typ=null()
|| _ret.MSG:='Brak lub nieprawidłowy typ/wartość parametru %1.'@['TYP'];
   return(_ret)
?};

_sch:=null();
_vpb:=var_pres('_b');
{? _vpb=_tSTRING
|| _sch:=exec('szukaj_ud_sch','schemat',_typ,_b,1)
|? _vpb=_tREF
|| {? _b<>null() & ref_tab(_b)=UD_SCH
   || _sch:=_b
   ?}
|? _vpb=_tVOID
|| _sch:=exec('szukaj_ud_sch','schemat',_typ,,1)
?};
{? _sch=null()
|| _ret.MSG:='Brak lub nieprawidłowy typ/wartość parametru %1.'@['SCHEMAT'];
   return(_ret)
?};

_skl:=null();
_vpc:=var_pres('_c');
{? _vpc=_tSTRING
|| _skl:=exec('szukaj_ud_skl','schemat',_typ,_c,1)
|? _vpc=_tREF & _c<>null() & ref_tab(_c)=UD_SKL
|| _skl:=_c
?};
{? _skl=null()
|| _ret.MSG:='Brak lub nieprawidłowy typ/wartość parametru %1.'@['SKŁADNIK'];
   return(_ret)
?};

_vpd:=var_pres('_d');
{? _vpd=_tSTRING
|| _fml:=_d
|? _<4 | _vpd=_tVOID
|| _fml:='ref()'
|| _ret.MSG:='Nieprawidłowy typ parametru %1.'@['FORMUŁA'];
   return(_ret)
?};

:: Ciało funkcji
_ret.STATUS:='I';
_ret.MSG:='Wyznaczenie firmy nie powiodło się.'@;
UD_DEF.cntx_psh();
UD_DEF.index('PODTEC');
UD_DEF.prefix(_sch);
{? UD_DEF.find_key(_skl)
|| FIRMA.cntx_psh();
   FIRMA.prefix();
   UD_FIR.cntx_psh();
   UD_FIR.index('S1');
   UD_FIR.prefix();
   {!
   |? {? UD_FIR.find_key(UD_DEF.UD_SKL)
      || UD_FIR.FIRMA();
         _ret.STATUS:='OK';
         _ret.VAL:=($('{| FIRMA |! %1 |}'[_fml]))();
         0
      || UD_DEF.UD_DEF & UD_DEF.seek(UD_DEF.UD_DEF)
      ?}
   !};
   UD_FIR.cntx_pop();
   FIRMA.cntx_pop()
?};
UD_DEF.cntx_pop();
_ret

:Sign Version 2.0 jowisz:1045 2023/10/10 08:44:17 acff79aed2ab7cb19dc4c0c9974740675e9ed75306de21ac8d733a6ba137a0ae1cff2239b3d50dd42fe45b337c893bfdecb637909db576c1db5b75ae2de76095b72ef685f12a8f865a1305f5e550d328e7fe17c4a69857a135fbe5ff36cf153ded34d2b809d3e1b9357fb3c88df9d3d740a8911f1912e1da68a6ee5311dfdc61
