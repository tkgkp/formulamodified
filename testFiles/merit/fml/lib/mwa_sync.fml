:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_sync.fml
:: Utworzony: 18.02.2019
:: Autor: Markus
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi sync przez MacroWebAPI
::======================================================================================================================


\serialize_sync
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji rekordów z tabeli SYNC.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: 0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

_data:="
   params_get().tab.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'REFERENCE',,'ID',,'FIRMA',,'REF',,'LP',
      ,'ACR',,'RODZ',
      ,'TR',
      ,'STATUS',
      ,'R_IDADD',
   );
   ''
";
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('tab',_a,'resp',_resp);
_tab.xml_records(_resp,_b.METHOD+'Response',,'p',_b.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);

_resp


\serialize_sync_mess
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji rekordów z tabeli SYNC.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: 0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

_data:="
   params_get().tab.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'MESSAGE',,'ID',
   );
   ''
";
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('tab',_a,'resp',_resp);
_tab.xml_records(_resp,_b.METHOD+'Response',,'p',_b.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);

_resp


\read_sync
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje wszystkie rekordy tabeli SYNC.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z wynikiem, lub {} w przypadku jego braku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

:: #PARAM pd Przeznaczenie danych np. ABSTOREB2B, ABSTOREB2C, QLIK
:: #PARAM il_rec Maksymalna ilość rekordów w wyniku, domyslnie - 100.
:: #PARAM firma Symbol firmy, z której mają być zwrócone rekordy, nie podana - bieżąca.
:: #PARAM repl Numer replikacji danych, parametr jest sprawdzany czy dla przeznaczenia danych istnieje replika.
:: #PARAM repl domyślnie 0.
_pd:=exec('get_option','mwapi',_par,'Pd').value;
_il_rec:={? (_i:=exec('get_option','mwapi',_par,'Il_rec').value)<>'' || #_i || 100 ?};
_firma:={? (_i:=exec('get_option','mwapi',_par,'Firma').value)<>'' || _i || '' ?};
_repl:={? (_i:=exec('get_option','mwapi',_par,'Repl').value)<>'' || #_i || 0 ?};

_foundFirm:=0;
{? _firma<>''
|| FIRMA.cntx_psh();
   FIRMA.index('SYMBOL');
   FIRMA.prefix(_firma);
   {? FIRMA.first() || _foundFirm:=1 ?};
   FIRMA.cntx_pop()
|| _foundFirm:=1
?};

_getPd:=0;
{? _foundFirm & _pd<>''
||
   _getPd:=1
?};

{? _foundFirm & _getPd
|| _tab:=proc_exe('sync@synchro',_pd,_il_rec,_firma,_repl);
   _result:=exec('serialize_sync','mwa_sync',_tab,_par)
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _error:='';
   _error+={? _foundFirm=0 || 'Nie znaleziono firmy o symbolu %1.'@[_firma] || '' ?};
   _error+={? _getPd=0 || 'Nie podano przeznaczenia danych.'@ || '' ?};
   _wsenv.add_error(_error);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\read_sync_sql
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje wszystkie rekordy tabeli SYNC (wariant z możliwością określenia akronimu tabeli).
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z wynikiem, lub {} w przypadku jego braku
::----------------------------------------------------------------------------------------------------------------------
:: #TAB sync
:: #RESOURCE /sync/sql
_par:=params_get();

:: #PARAM pd Przeznaczenie danych np. ABSTOREB2B, ABSTOREB2C, QLIK
:: #PARAM acr Akronim tabeli jakiej dotyczą dane.
:: #PARAM il_rec Maksymalna ilość rekordów w wyniku.
:: #PARAM firma Symbol firmy, z której mają być zwrócone rekordy, 'ALL' - jeżeli ze wszystkich, nie podana - bieżąca
:: #PARAM repl Numer replikacji danych, parametr jest sprawdzany czy dla przeznaczenia danych istnieje replika
_pd:=exec('get_option','mwapi',_par,'Pd').value;
_acr:={? (_i:=exec('get_option','mwapi',_par,'Acr').value)<>'' || _i || '' ?};
_il_rec:={? (_i:=exec('get_option','mwapi',_par,'Il_rec').value)<>'' || #_i || 100 ?};
_firma:={? (_i:=exec('get_option','mwapi',_par,'Firma').value)<>'' || _i || '' ?};
_repl:={? (_i:=exec('get_option','mwapi',_par,'Repl').value)<>'' || #_i || 0 ?};

_foundFirm:=0;
{? _firma<>''
|| FIRMA.cntx_psh();
   FIRMA.index('SYMBOL');
   FIRMA.prefix(_firma);
   {? FIRMA.first() || _foundFirm:=1 ?};
   FIRMA.cntx_pop()
|| _foundFirm:=1
?};

_getPd:=0;
{? _foundFirm & _pd<>''
||
   _getPd:=1
?};

{? _foundFirm & _getPd
|| _tab:=proc_exe('sync_sql@synchro',_pd,_acr,_il_rec,_firma,_repl);
   _result:=exec('serialize_sync','mwa_sync',_tab,_par)
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _error:='';
   _error+={? _foundFirm=0 || 'Nie znaleziono firmy o symbolu %1.'@[_firma] || '' ?};
   _error+={? _getPd=0 || 'Nie podano przeznaczenia danych.'@ || '' ?};
   _wsenv.add_error(_error);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\read_sync_tabmobil
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje strukturę tabel dla MOBIL.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
:: #TAB sync
:: #RESOURCE /sync/tabmobil
_par:=params_get();

_tab:=proc_exe('tabmobil@synchro');
exec('serialize_sync','mwa_sync',_tab,_par)


\action_sync_compress
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Optymalizuje rekordy w SYNC (analiza i usunięcie nieznaczących put)
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

:: #PARAM pd Przeznaczenie danych np. ABSTOREB2B, ABSTOREB2C, QLIK
:: #PARAM repl Numer replikacji danych, parametr jest sprawdzany czy dla przeznaczenia danych istnieje replika,
:: #PARAM repl domyślnie 0.
:: #PARAM firma Symbol firmy, z której mają być zwrócone rekordy, nie podana - bieżąca.
:: #PARAM show Czy pokazywać wszystkie usunięte rekordy (1), czy tylko ich liczbę (0 - domyślnie)
_pd:=exec('get_option','mwapi',_par,'Pd').value;
_show:={? (_i:=exec('get_option','mwapi',_par,'Show').value)<>'' || #_i || 0 ?};
_firma:={? (_i:=exec('get_option','mwapi',_par,'Firma').value)<>'' || _i || '' ?};
_repl:={? (_i:=exec('get_option','mwapi',_par,'Repl').value)<>'' || #_i || 0 ?};

_foundFirm:=0;
{? _firma<>''
|| FIRMA.cntx_psh();
   FIRMA.index('SYMBOL');
   FIRMA.prefix(_fir);
   {? FIRMA.first() || _foundFirm:=1 ?};
   FIRMA.cntx_pop()
|| _foundFirm:=1
?};

_getPd:=0;
{? _foundFirm & _pd<>''
||
   _getPd:=1
?};

{? _foundFirm & _getPd
|| _tab:=proc_exe('kompresuj@synchro',_pd,_repl,_firma,_show);
::   _result:=_tab.json_records(_a,'MESSAGE',,'ID',)
   _result:=exec('serialize_sync_mess','mwa_sync',_tab,_par)
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _error:='';
   _error+={? _foundFirm=0 || 'Nie znaleziono firmy o symbolu %1.'@[_firma] || '' ?};
   _error+={? _getPd=0 || 'Nie podano przeznaczenia danych.'@ || '' ?};
   _wsenv.add_error(_error);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\action_sync_iddel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Wysyła żądanie usunięcia rekordów z tabeli SYNC.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

:: #PARAM pd Przeznaczenie danych np. ABSTOREB2B, ABSTOREB2C, QLIK
:: #PARAM id Maksymalny usunięty numer id rekordu SYNC.
:: #PARAM repl Numer repliki danych, parametr jest sprawdzany czy dla przeznaczenia danych istnieje replika,
:: #PARAM repl domyślnie 0.
:: #PARAM show Czy pokazywać wszystkie usunięte rekordy (1), czy tylko ich liczbę (0 - domyślnie)
:: #PARAM acr Akronim tabeli jakiej dotyczą dane.
_id:={? (_i:=exec('get_option','mwapi',_par,'Id').value)<>'' || _i || '0' ?};
_pd:=exec('get_option','mwapi',_par,'Pd').value;
_acr:={? (_i:=exec('get_option','mwapi',_par,'Acr').value)<>'' || _i || '' ?};
_show:={? (_i:=exec('get_option','mwapi',_par,'Show').value)<>'' || #_i || 0 ?};
_repl:={? (_i:=exec('get_option','mwapi',_par,'Repl').value)<>'' || #_i || 0 ?};


_getPd:=0;
{? _pd<>''
||
   _getPd:=1
?};

{? _getPd
|| _tab:=proc_exe('sync_id_del@synchro',_id,_pd,_repl,_show,_acr);
   _result:=exec('serialize_sync_mess','mwa_sync',_tab,_par)
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _error:='';
   _error+={? _getPd=0 || 'Nie podano przeznaczenia danych.'@ || '' ?};
   _wsenv.add_error(_error);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\prolog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła startowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('prolog','mwapi',_par);
~~


\epilog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Fomuła końcowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
exec('epilog','mwapi');
~~

:Sign Version 2.0 jowisz:1028 2019/06/07 15:59:55 e07e2c1d68e9be906e382459760a00328699d0e3221df9be86c4f558ad8308935c8ce187e000b1e179be1b30e7ca18b33b6f9e395d8f1190dc4446fbba7fd4291f1e05ee3e2fccabb5f57c06e95920173dfd00e7e0db57a6fa51ccd86a6922ec7df35a36f28d8b673c326682074cda8e620bc9b19aaf304a3d5728cff3d9bb24
