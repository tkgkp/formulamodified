:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: magazyn_inw.fml
:: Utworzony: 02.10.2015
:: Autor: AWI
::======================================================================================================================
:: Zawartość: Magazyn - inwentaryzacja
::======================================================================================================================


\czyinw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS:  sprawdza czy na podanym magazynie jest otwarta inwentaryzacja pelna
::   WE: _a - magazyn
::       [_b] - ewnetualna data do sprawdzenia z data otwarcia arkusza
::   WY:  0-brak 1-jest
::  OLD: \czyinw_a/inweko.fml
::----------------------------------------------------------------------------------------------------------------------

{? _>=2 || {? type_of(_b)<>4 || _b:=date(0,0,0) ?} || _b:=date(0,0,0) ?};

_wyn:=0;
_msk:=INN.name();
OKR.cntx_psh();
INN.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.last()
|| {!
   |? INN.use((_msk-2)+form(OKR.ROK-2000,-2,0,'99'));
      INN.index('INDP');
      INN.prefix(_a,date(0,0,0));
      {? INN.last || {! |? _wyn:=INN.TYP='A' & {? _b<>date(0,0,0) || _b<=INN.DI || 1 ?}; ~_wyn & INN.next !} ?};
      ~_wyn & OKR.prev()
   !}
?};
INN.use(_msk);
OKR.cntx_pop();
INN.cntx_pop();
_wyn


\sprd_inp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza podana date wg daty ostatniej inwentury dla indeksu
::   WE: _a - M.ref
::       _b - sprawdzana data
::       [_c] - magazyn ref
::       [_d] - 1-komunikaty (domyslnie) 0-brak
::       [_e] - sprawdzany czas
::   WY: zmieniono - na informacje
::       1 - dokument z danym indeksem mozna redagowac
::       0 - dokumentu z danym indeksem nie mozna redagowac
::  OLD: \sprd_inp/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=3
|| {? type_of(_c)<>7
   || {? DK.N<>null() & ND.name()<>ref_name(DK.N)
      || ND.use(ref_name(DK.N))
      ?};
      _c:=DK.N().MAG
   ?}
|| {? DK.N<>null() & ND.name()<>ref_name(DK.N)
   || ND.use(ref_name(DK.N))
   ?};
   _c:=DK.N().MAG
?};
{? _>=4  || {? type_of(_d)<>1 || _d:=1 ?}  || _d:=1  ?};
_time:={? var_pres('_e')=type_of(time()) || _e || time(0,0,0) ?};

_wyn:=1;

INP.index('TYP');
INP.prefix(_c,_a,'C');
_din:=date(0,0,0);
_tin:=time(0,0,0);
{? INP.last()
|| _din:={? INP.IN().D<>date(0,0,0) || INP.IN().D || INP.IN().DI ?};
   _tin:={? INP.IN().T<>time(0,0,0) || INP.IN().T || INP.IN().TI ?}
?};
{? _b>_din | (_b=_din & _tin<>time(0,0,0) & _time>_tin)
||
   _wyn:=1
|| {? _d
   || {? var_pres('__kom')>100 & var_pres('__lp')>0
      ||
         exec('add_kom','#message'
         ,'Wprowadzono arkusz inwentaryzacji ciągłej '
         'dla magazynu %1, z datą: %2, godziną: %3'@[INP.IN().MG().SYM,form(_din),form(_tin)]
         ,4,,__lp+=1);
         exec('add_kom','#message','- pozycja %1, indeks materiałowy %2'@[$DK.P,INP.M().KTM],110,,__lp+=1)
      ||
         FUN.info('Wprowadzono arkusz inwentaryzacji ciągłej dla magazynu %1,\n'
            'z datą: %2, godziną %3, na którym wprowadzono wybrany indeks materiałowy.\n'
            'Wybór indeksu niemożliwy.'@[INP.IN().MG().SYM,form(_din),form(_tin)])
      ?}
   ?};
   _wyn:=0
?};
_wyn


\czytwinw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: sprawdza czy sa pozycje w tabeli i czy spis lokalizacji
::   WE: [_a] - tabela danych do kontroli domyslnie dany rekord
::       [_b] - tylko wynik 1 , domyslnie 0
::   WY: 'T' - pomijamy termin waznosci 'N' - nie pomijamy 'P' - pytanie
::  OLD: \czytwinw/ean.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='N';
{? _>=1 || {? type_of(_a)<>118 || _a:=0 ?} || _a:=0 ?};
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};

EANN.cntx_psh();
{? type_of(_a)=118
|| _a.clear;
  {? _a.first()
  || {!
     |? {? EANN.seek(_a.REF,EANN.name()) & EANN.EANL<>null & EANN.STAN='Z' & EANN.TYP='R'
          & exec('czyzgilp','magazyn_mob',EANN.ref(),EANN.ILP,EANN.ILODCZYT)
        || _wyn:=exec('get','#params',600103,2);
           {? _wyn='P' & ~_b
           || _wyn:={? FUN.ask('Czy spis lokalizacji z pominięciem terminów ważności?'@) || 'T' || 'N' ?}
           ?};
           0
        || _a.next()
        ?}
     !}
  ?}
|? EANN.TYP='R'
|| _wyn:=exec('get','#params',600103,2);
   {? _wyn='P' & ~_b
   || _wyn:={? FUN.ask('Czy spis lokalizacji z pominięciem terminów ważności?'@) || 'T' || 'N' ?}
   ?}
?};
EANN.cntx_pop();
_wyn


\sprd_inz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza podana date wg daty ostatniej inwentury
::   WE: _a - data
::       _b - magazyn
::       [_c] - godzina
::  OLD: \sprd_inz/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_time:={? var_pres('_c')=type_of(time()) || _c || time(0,0,0) ?};
INN.index('TYP');
INN.prefix(_b,'A');
_din:={? INN.last()
      || {? INN.D=date(0,0,0) || _tin:=INN.TI; INN.DI || _tin:=INN.T; INN.D ?}
      || _tin:=time(0,0,0); date(0,0,0)
      ?};
{? _a>_din | (_a=_din & _tin<>time(0,0,0) & _time>_tin)
|| 1
|| 0
?}


\sprd_ipz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza podana date wg daty ostatniej inwentury dla indeksu
::   WE: [_d] - godzina
::  OLD: \sprd_ipz/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_time:={? var_pres('_d')=type_of(time()) || _d || time(0,0,0) ?};
INP.index('TYP');
INP.prefix(_c,_a,'C');
_din:={? INN.last()
      || {? INN.D=date(0,0,0) || _tin:=INN.TI; INN.DI || _tin:=INN.T; INN.D ?}
      || _tin:=time(0,0,0); date(0,0,0)
      ?};
{? _b>_din | (_b=_din & _tin<>time(0,0,0) & _time>_tin)
|| 1
|| 0
?}


\add_onei
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: dodaje jedna pozycje do arkusza (analizuje stan magazynowy)
::   WE: _a - ref naglowka inwentury
::       _b - magazyn
::       _c - data rozpoczecia inwentaryzacji
::       _d - indeks materialowy
::       [_e] - 1 - usuwac INP w ewidencyjnym; 0-wpp
::       [_f] - 1 - dodawac zerowe pozycje; 0-wpp
::       [_g] - ref SQL-owy dostawy (domyslnie '')
::       [_h] - SCEAN (domyslnie '')
::       [_i] - termin ważności
::       [_j] - godzina rozpoczęcia inwentaryzacji
::       [_k] - cecha dostawy
::       [_l] - wskazanie na pozycje arkusza pomocniczego
::       [_m] - nieaktywne dostawy dla ciągłej
::       [_n] - tryb podpowiedzi
::   WY: 1-dolaczono 0-nie dolaczono
::  OLD: \add_onei/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=5 || {? var_pres('_e')<>1 || _e:=0 ?} || _e:=0 ?};
{? _>=6 || {? var_pres('_f')<>1 || _f:=0 ?} || _f:=0 ?};
{? _>=7 || {? var_pres('_g')<>2 || _g:='' ?} || _g:='' ?};
{? _>=8 || {? var_pres('_h')<>2 || _h:='' ?} || _h:='' ?};
_tw:={? var_pres('_i')=type_of(date()) || _i || date(0,0,0) ?};
_wgtw:=exec('FindAndGet','#table',M,_d,,"SETW='P'",0);
_time:={? var_pres('_j')=type_of(time()) || _j || time(0,0,0) ?};
_rdk_c:={? var_pres('_k')=type_of(null()) || _k || null() ?};
_riny:={? var_pres('_l')=type_of('') || _l || '' ?};

_tmg:=(1+ST.MAG().TYP);
_wym:=ST.MAG().SL='T' & INN.ARKPOM;
_wyn:=0;
_par:=exec('get','#params',600050,2);
_no_dst:={? INN.TYP='C'
         || {? _par='T' || 1 |? _par='W' || -1 || 0 ?}
         || {? var_pres('_m')=type_of(0) & _m || 1 || 0 ?}
         ?};
_wypdane:={? var_pres('_n')=type_of(0) || _n || 0 ?};
{? _wypdane || _no_dst:=1 ?};

:: sprawdzamy czy nie ma otwartej inwentaryzacji ciaglej dla danego indeksu materialowego
{? exec('sprm_nac','magazyn_inw',_b,_d,_a)
||
:: trzeba przejsc po wszystkich SC
:: zerowanie poprzednich stanow z ewidencji
   {? (1+ST.MAG().TYP)='E'
   || INP.cntx_psh();
      INP.index('KOD');
      INP.prefix(_a,_d);
      {? INP.first() || INP.SE:=0; INP.SE2:=0; INP.put(1) ?};
      INP.cntx_pop()
   ?};
   SC.cntx_psh();
   OKR.cntx_psh();
   OKR.index('MC');
   OKR.prefix(REF.FIRMA,1);
   {? OKR.first()
   ||
      {!
      |?
         SC.use('stc__'+ST.ODDZ+($OKR.ROK+2));

         SC.index('SC');
         SC.prefix(_b,_d);
         {? SC.first
         || {? ST.MAG().TYP*'EWI' || _cen_ewi:=exec('biez_cen','ceny_dok',SC.M,ST.MAG,_c,,_time) || _cen_ewi:=0 ?};
            {!
            |? _wgid:=(_wym & _tmg='D' & SC.SCEAN=_h & SC.SCEAN<>'');
               {? _wypdane=1
               || {? SC.find_tab('first','SCEAN',,'=',_h)
                  || exec('sc_info','magazyn_stan');
                     _ctrl:=0;
                     _ndsql:=exec('FindAndGet','#table',DK,SC.PRDK,,"$N",'');
                     {? _ndsql<>''
                     || _ndD:=exec('FindAndGet','#table',ND,_ndsql,,"D",date(0,0,0));
                        _ndT:=exec('FindAndGet','#table',ND,_ndsql,,"T",time(0,0,0));
                        _ctrl:=_ndD<_c | (_ndD=_c & (_time=time(0,0,0) | _ndT<=_time))
                     ?};
                     _buf:=exec('obl_se','magazyn_inw',SC.MAG,SC.M,SC.RDK,SC.NDK,_c,null(),_time);
                     _ild:=_buf[1]; _ild2:=_buf[2];
                     obj_del(_buf);
                     INP.SE:=_ild;
                     INP.SE2:=_ild2;
                     INP.J2:=INP.M().J2;
                     INP.WS2:={? INP.SS2>0 & INP.SS>0 || INP.SS/INP.SS2
                              |? INP.SE2>0 & INP.SE>0 || INP.SE/INP.SE2
                              |? INP.J2<>null() & (INP.SS2=0 | INP.SE2=0) || exec('oblWSP','jm',INP.M)
                              || 0
                              ?};
                     INP.D:=SC.D;
                     INP.TW:=SC.TW;
                     INP.C:={? ST.MAG().TYP*'EWI' || _cen_ewi || BO.CEN ?};
                     INP.SCSQL:=$SC.ref();
                     INP.SCRDK:=SC.RDK;
                     INP.SCNDK:=SC.NDK;
                     INP.DK_C:=SC.DK_C;
                     _wypdane:=-1
                  ?}
               |? (_h='' & (_no_dst<>0 | SC.A='T')) | _wgid
               || exec('sc_info','magazyn_stan');
                  _ctrl:=0;
                  _ndsql:=exec('FindAndGet','#table',DK,SC.PRDK,,"$N",'');
                  {? _ndsql<>''
                  || _ndD:=exec('FindAndGet','#table',ND,_ndsql,,"D",date(0,0,0));
                     _ndT:=exec('FindAndGet','#table',ND,_ndsql,,"T",time(0,0,0));
                     _ctrl:=_ndD<_c | (_ndD=_c & (_time=time(0,0,0) | _ndT<=_time))
                  ?};
                  _inp:=exec('add_one','magazyn_inw',_a,_d,SC.ref,0
                         ,{? ST.MAG().TYP*'EWI' || _cen_ewi || BO.CEN ?},,,,SC.TW,SC.DK_C);
                  _buf:=exec('obl_se','magazyn_inw',SC.MAG,SC.M,SC.RDK,SC.NDK,_c,_inp,_time);
                  _ild:=_buf[1]; _ild2:=_buf[2];
                  obj_del(_buf);
                  {? _ctrl & SC.D<=_c
                   & ((_no_dst=1 | _ild>0) | (_g<>'' & SC.NDK=form(8+_g) & SC.RDK=BB.sqlint(_g)) | _wgid)
                  || _inp:=exec('add_one','magazyn_inw',_a,_d,SC.ref,_ild,
                                {? ST.MAG().TYP*'EWI' || _cen_ewi || BO.CEN ?},,,,SC.TW,SC.DK_C,,_ild2);
                     _wyn:=1
                  || {? _inp<>null
                     ||
                        INP.cntx_psh();
                        INP.clear();
                        {? INP.seek(_inp)
                        ||
                           {? (1+ST.MAG().TYP)='E'
                           || {? _e=1
                              || exec('usu_inp2','magazyn_inw',SC.MAG,SC.M,SC.RDK,SC.NDK,_c,_inp);
                                 {? ~INP.SE & ~INP.count() || INP.del ?};
                              1
                              ?}
                           |? INP.SCEAN='' | ~_ctrl
                           || exec('usu_inpd','magazyn_inw',INP.ref);
                              INP.del
                           ?}
                        ?};
                        INP.cntx_pop()
                     ?}
                  ?}
               ?};
               _wypdane=0 & SC.next()
            !}
         || {? _f=1 & (1+ST.MAG().TYP)='E'
            || _inp:=exec('add_one','magazyn_inw',_a,_d,null(),0,0,,,,_tw,_rdk_c,_riny,0,0);
               _wyn:=1;
               _ild:=0;
               _ild2:=0
            ?}
         ?};
         _wypdane>=0 & OKR.next()
      !}
   ?};
   OKR.cntx_pop();
   SC.cntx_pop()
?};
_wyn


\sprm_nac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy podany indeks jest juz na otwartej inwentaryzacji ciaglej
::   WE: _a - magazyn
::       _b - indeks materialowy
::       _c - ref naglowka inwentaryzacji
::   WY: 0-jest 1-nie jest
::  OLD: \sprm_nac/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
INN.cntx_psh;
INP.cntx_psh;
INP.index('TYP');
INP.prefix(_a,_b,'C');
{? INP.last
|| {!
   |? {? INP.IN<>_c || _wyn:=~(INP.IN().D=date(0,0,0)) ?};
      _wyn & INP.prev
   !}
?};
INP.cntx_pop;
INN.cntx_pop;
_wyn


\add_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: dodaje jedna pozycje
::   WE: _a - ref naglowka inwentury
::       _b - indeks materialowy
::       _c - ref dostawy
::       _d - stan wg ewidencji
::       _e - cena
::       [_f] - stan wg spisu
::       [_g] - dodanie pozycji domyslnie 0=update 1=add
::       [_h] - kod identyfikujacy SCEAN
::       [_i] - termin ważności
::       [_j] - cecha dostawy
::       [_k] - wskazanie na pozycję arkusza pomocniczego
::       [_l] - stan wg ewidencji druga jednostka miary
::       [_m] - stan wg spisu druga jednostka miary
::  OLD: \add_one/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=6 || {? type_of(_f)<>1 || _f:=0 ?} || _f:=0 ?};
{? _>=7 || {? type_of(_g)<>1 || _g:=0 ?} || _g:=0 ?};
{? _>=8 || {? type_of(_h)<>2 || _h:='' ?} || _h:='' ?};
_tw:={? var_pres('_i')=type_of(date()) || _i || date(0,0,0) ?};
_dk_c:={? var_pres('_j')=type_of(null()) || _j || null() ?};
_riny:={? var_pres('_k')=type_of('') || _k || '' ?};
_se2:={? var_pres('_l')=type_of(0) || _l || 0 ?};
_ss2:={? var_pres('_m')=type_of(0) || _m || 0 ?};

_wgtw:=exec('FindAndGet','#table',M,_b,,"SETW='P'",0);

_wyn:=null;
:: dla magazynow FIFO/LIFO brak dostaw
_fili_fo:=(1+ST.MAG().TYP)='E';
{? _fili_fo || _c:=null ?};

INP.cntx_psh();
SC.cntx_psh;
{? _c<>null || INP.index('SPR')
|? _h<>''   || INP.index('INP%1'[{? _wgtw || 'TW' || '' ?}]+'2')
|| INP.index('KOD')
?};
INP.prefix();
{? ~_g & {? _c<>null
         || INP.find_key(_a,$_c)
         |? _h<>''
         || _ktm:=exec('FindAndGet','#table','M',$_b,,"KTM",'');
            {? ~_wgtw || INP.find_key(_a,_ktm,_ktm,_h,) || INP.find_key(_a,_ktm,_ktm,_tw,_h,) ?}
         || INP.find_key(_a,_b)
         ?}
|| {? _fili_fo
   ||
       INP.SE+=_d;
       INP.SE2+=_se2;
       {? ~INP.C
       || _cena:=exec('biez_cen','ceny_dok',INP.M,ST.MAG,INN.D,,INN.T);
          {? _cena>0 || INP.C:=_cena ?}
       ?};
       {? _f>0 | _ss2>0 || INP.SS+=_f; INP.SS2+=_ss2 ?}
   || INP.C:=_e;
      INP.SE:=_d;
      INP.SE2:=_se2;
      {? _f>0 | _ss2>0 || INP.SS+=_f; INP.SS2+=_ss2 ?}
   ?};
   INP.SS:=INP.SS$INP.M().DOKL;
   INP.WS2:={? INP.SS2>0 & INP.SS>0 || INP.SS/INP.SS2
            |? INP.SE2>0 & INP.SE>0 || INP.SE/INP.SE2
            |? INP.J2<>null() & (INP.SS2=0 | INP.SE2=0) || exec('oblWSP','jm',INP.M)
            || 0
            ?};
   INP.put(1);
   _wyn:=INP.ref
|| INP.blank();
   INP.IN:=_a;
   INP.M:=_b;
   INP.SC:=_c;
   INP.SE:=_d;
   INP.SE2+=_se2;
   {? ~_e & (ST.MAG().TYP)*'EWI' || _e:=exec('biez_cen','ceny_dok',INP.M,ST.MAG,INP.IN().DI,,INP.IN().TI) ?};
   INP.C:=_e;
   INP.D:={? _c<>null || INP.SC().D || date(0,0,0) ?};
   INP.DK_C:={? _c<>null || INP.SC().DK_C || _dk_c ?};
   INP.SS:=_f;
   INP.SS2:=_ss2;
   INP.KTM:=INP.M().KTM;
   INP.NKTM:=INP.M().N;
   INP.AKC:='N';
   INP.SCSQL:={? _c<>null || $INP.SC |? (1+INP.IN().MG().TYP)='E' || $INP.M || '' ?};
   INP.SCRDK:={? _c<>null || INP.SC().RDK || 0 ?};
   INP.SCNDK:={? _c<>null || INP.SC().NDK || '' ?};
   INP.MGR:=INP.M().MGR;
   INP.SS:=INP.SS$INP.M().DOKL;
   INP.SCEAN:={? _c<>null || INP.SC().SCEAN || _h ?};
   INP.TW:={? INP.SCSQL<>'' || exec('FindAndGet','#table',SC,INP.SCSQL,,"TW",_tw) || _tw ?};
   {? INP.M().IDMOB='A' & INP.DK_C=null() & INP.SCEAN<>''
   || _rsql:=exec('FindInSet','#table','MKODK','KK',INP.SCEAN,INP.SCEAN,"MKODK.RSQL",,,'');
      INP.DK_C:={? _rsql<>'' || exec('FindAndGet','#table','DK_C',_rsql,,,null()) || null() ?};
      {? INP.DK_C().M_ATR<>INP.M().M_ATR || INP.DK_C:=null() ?}
   ?};
   INP.INY:=_riny;
   INP.J2:=INP.M().J2;
   INP.WS2:={? INP.SS2>0 & INP.SS>0 || INP.SS/INP.SS2
            |? INP.SE2>0 & INP.SE>0 || INP.SE/INP.SE2
            |? INP.J2<>null() & (INP.SS2=0 | INP.SE2=0) || exec('oblWSP','jm',INP.M)
            || 0
            ?};
   {? (ref_name(INP.SC)+3)<>(INP.name()+3) || INP.SC:=null() ?};
   _wyn:={? INP.add(1) || INP.ref || null ?}
?};
INP.cntx_pop();
SC.cntx_pop;
_wyn


\obl_se
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: oblicza ilosc z dokumentow na danej dostawie oraz uzupelnia INPD
::   WE: _a - ref magazynu
::       _b - ref materialu
::       _c - pole RDK
::       _d - pole NDK
::       _e - data do ktorej obliczamy (wraz z nia)
::       _f - ref INP
::       [_g] - godzina do której obliczamy
::   WY: suma ilosci
::  OLD: \obl_se/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_time:={? var_pres('_g')=type_of(time()) || _g || time(0,0,0) ?};

_wyn:=0;
_wyn2:=0;
_res:=obj_new(2); _res[1]:=0; _res[2]:=0;
_mdk:=DK.name(); _mnd:=ND.name();
OKR.cntx_psh();
ND.cntx_psh();
DK.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.first()
|| {!
   |? ND.use((_mnd-2)+($OKR.ROK+2));
      DK.use((_mdk-2)+($OKR.ROK+2));
      DK.clear;
      DK.index('DOST3');
      DK.prefix(_a,_b,_c,_d,'N');
      {? DK.first()
      || _jmg:=DK.M().J2<>null();
         {!
          |?
            {? (DK.N().D<_e | (DK.N().D=_e & (_time=time(0,0,0) | DK.N().T<=_time))) & DK.N().Z='T'
            || _wyn-=DK.IL;
               _wyn2-={? _jmg || DK.IL2 || 0 ?};
               {? _f<>null() || exec('add_inpd','magazyn_inw',_f,DK.ref) ?}
            ?};
            DK.next()
         !}
      ?};
      DK.prefix();
      DK.prefix(_a,_b,_c,_d,'T');
      {? DK.first()
      || _jmg:=DK.M().J2<>null();
         {!
         |?
            {? (DK.N().D<_e | (DK.N().D=_e & (_time=time(0,0,0) | DK.N().T<=_time))) & (DK.N().Z='T' | DK.N().Z='R')
            || _wyn+=DK.IL;
               _wyn2+={? _jmg || DK.IL2 || 0 ?};
               {? _f<>null() || exec('add_inpd','magazyn_inw',_f,DK.ref) ?}
            ?};
            DK.next()
         !}
      ?};
      OKR.next()
   !}
?};
ND.cntx_pop();
DK.cntx_pop();
OKR.cntx_pop();
_res[1]:=_wyn; _res[2]:=_wyn2;
_res


\add_inpd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: dodaje rekord do INPD
::   WE:  _a - INP.ref
::        _b - DK.ref
::  OLD: \add_inpd/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
INPD.index('INP');
INPD.prefix(_a,$_b);
{? ~INPD.first
||
   INPD.blank();
   INPD.INP:=_a;
   INPD.DK:=$_b;
   INPD.add()
?};
''


\usu_inp2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: oblicza ilosc z dokumentow na danej dostawie oraz uzupelnia INPD
::   WE: _a - ref magazynu
::       _b - ref materialu
::       _c - pole RDK
::       _d - pole NDK
::       _e - data do ktorej obliczamy (wraz z nia)
::       _f - ref INP
::       [_g] - godzina
::  OLD: \usu_inp2/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_time:={? var_pres('_g')=type_of(time()) || _g || time(0,0,0) ?};

_wyn:=0;
_mdk:=DK.name(); _mnd:=ND.name();
OKR.cntx_psh();
ND.cntx_psh();
DK.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.first()
|| {!
   |? ND.use((_mnd-2)+($OKR.ROK+2));
      DK.use((_mdk-2)+($OKR.ROK+2));
      DK.clear;
      DK.index('DOST3');
      DK.prefix(_a,_b,_c,_d,'N');
      {? DK.first()
      || {!
          |?
            {? (DK.N().D<_e | (DK.N().D=_e & (_time=time(0,0,0) | DK.N().T<=_time))) & DK.N().Z='T'
            || INPD.cntx_psh;
               INPD.index('INP');
               INPD.prefix(_f,$DK.ref);
               {? INPD.first || {! |? INPD.del !} ?};
               INPD.cntx_pop
            ?};
            DK.next()
         !}
      ?};
      DK.prefix();
      DK.prefix(_a,_b,_c,_d,'T');
      {? DK.first()
      || {!
          |?
            {? (DK.N().D<_e | (DK.N().D=_e & (_time=time(0,0,0) | DK.N().T<=_time))) & (DK.N().Z='T' | DK.N().Z='R')
            || INPD.cntx_psh;
               INPD.index('INP');
               INPD.prefix(_f,$DK.ref);
               {? INPD.first || {! |? INPD.del !} ?};
               INPD.cntx_pop
            ?};
            DK.next()
         !}
      ?};
      OKR.next()
   !}
?};
ND.cntx_pop();
DK.cntx_pop();
OKR.cntx_pop();
_wyn


\usu_inpd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: usuwa rekordy w tabeli INPD dla podanego INP
::   WE:  _a - INP.ref
::  OLD: \usu_inpd/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
INPD.cntx_psh();
INPD.index('INP');
INPD.prefix(_a);
{? INPD.first() || {! |? INPD.del !} ?};
INPD.cntx_pop();
''


\bl_diinn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: poczatkowa data dla inwentury
::   WY: podpowiadana data
::  OLD: \bl_diinn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_adt:=date();
_bdt:=date(ST.AR,ST.AM,1);
_edt:=date(ST.AR,ST.AM,0);
{? _adt>=_bdt & _adt<=_edt || _adt || _edt ?}


\prinntyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: przed redakcja pola typ inwentaryzacji = sprawdza czy aby nie ma otwartej inwentury pelnej na danym magazynie
::   WY: 1-jest OK  0-pole niedytowalne = typ rowny zawsze 'C'
::  OLD: \prinntyp/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_msk:=INN.name();
_ref:=INN.ref;
OKR.cntx_psh();
INN.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.last()
|| {!
   |? INN.use((_msk-2)+form(OKR.ROK-2000,-2,0,'99'));
      INN.index('INDP');
      INN.prefix(ST.MAG,date(0,0,0));
      {? INN.last || {! |? {? INN.TYP='A' & INN.ref<>_ref || _wyn:=0; 0 || INN.prev ?} !} ?};
      _wyn & OKR.prev()
   !}
?};
INN.use(_msk);
OKR.cntx_pop();
INN.cntx_pop();
_wyn


\prarkpom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: przed redakcja znacznika INN.ARKPOM
::   WY: 1/0
::  OLD: \prarkpom/mws.fml
::----------------------------------------------------------------------------------------------------------------------
{? INN.MG().SL='T' & var_pres('var_innpop',params_get())>0 & var_pres('BTN_AP',params_get().var_innpop)=type_of('')
|| _win_red:=INN.win_edit('?');
   _btn:=params_get().var_innpop.BTN_AP;
   _options:={? INN.ARKPOM || 'state=normal'|| 'state=grayed' ?};
   INN.btn_eopt(_win_red,_btn,_options)
?};
INN.MG().PAL<>'T'


\dol_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: dolaczenie naglowka inwentaryzacji
::   WE: [_a] - magazyn domyslnie ST.MAG
::       [_b] - data rozpoczecia inwentury
::   WY: 1-jest(#INN.ref()) ok 0-nie ma
::  OLD: \dol_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_st_mag:=ST.MAG;
_ean:=0;
{? _>=1 || {? type_of(_a)<>7 || _a:=ST.MAG || _ean:=1 ?} || _a:=ST.MAG ?};
{? _>=2 || {? type_of(_b)<>4 || _b:=date() ?} || _b:=date() ?};

ST.MAG:=_a;
_wyn:=1;

INN.cntx_psh();
TYPYDOK.cntx_psh();
{? ~exec('czy_z_ok','okresy',1,1,ST.AR,ST.AM,ST.MAG)
|| _wyn:=0
|? exec('openprz','magazyn_przec')
|| FUN.info('W magazynie istnieje otwarty arkusz przecen.\n'
    'Niemożliwe wprowadzenie inwentaryzacji dla magazynu %1.'@[ST.MAG().SYM]);
   _wyn:=0
|? exec('dokiprin','magdok_wspolne',1)
|| FUN.info('W magazynie istnieją niezaakceptowane dokumenty przecen.\n'
    'Niemożliwe wprowadzenie inwentaryzacji dla magazynu %1.'@[ST.MAG().SYM]);
   _wyn:=0
|| {? _ean || INN.clear() ?};
   INN.blank();
   {? _ean || INN.DI:=_b ?};
   {? ~exec('prinntyp','magazyn_inw') || INN.TYP:='C' ?};
   INN.ODDZ:=ST.ODDZ;
   INN.AR:=ST.AR;
   INN.RODZ:='I';
   POM.TYPDOK:='INN'; POM.TAB:='INN';
   INN.ARKPOM:=INN.MG().PAL='T';
   {? INN.add
   || _wyn:=#INN.ref();

      _var_innpop:=exec('var_innpop','magazyn_inw');
      _var_innpop.PO_FIRST:=1;
      _var_innpop.DI:=INN.DI;
      _var_innpop.TI:=INN.TI;

::    Parametr 'context' wykorzystywany w:
::    - exec('inn_pozycje_red','magazyn_inw')
::    - exec('inn_zakoncz_red','magazyn_inw')
::    Parametr 'var_innpop' wykorzystywany w:
::    - exec('inn_pozycje_red','magazyn_inw')
::    - exec('inn_zakoncz_red','magazyn_inw')
      params_set('context',params_get(),'var_innpop',_var_innpop);
      _red:={? INN.MG().SL='T' & ~_ean || 'RED' || 'RED2' ?};
      exec('inn_win_edit_set','magazyn_inw',_red);
      {? INN.edit("params_exec('check_inn','magazyn_inw')")
      || {? _ean || INN.ARKPOM:=1 ?};
         _end:=0;
         {? ~do_state() || _end:=1; do() ?};
         {? ~INN.put() || _wyn:=0; undo() ?};
         {? _end>0 || end() ?};

         {? _wyn & _var_innpop.PO_FIRST=1
         || _brakPoz:=exec('FindInSet','#table','INP','INP',INN.ref())=null();
            {? INN.TYP='A'
            || exec('ark_inn','magazyn_inw',0,0);
               exec('aktzamst','magazyn_inw')
            ?};
            {? _brakPoz
            || BPMN.END:=1;
               {? INN.ARKPOM || exec('ark_pom','magazyn_inw') ?};
               exec('edi_inn','magazyn_inw');
               {? BPMN.END=2 & exec('FindInSet','#table','INP','INP',INN.ref())<>null()
               || exec('inn_zakoncz_wer','magazyn_inw')
               ?}
            ?}
         ?}
      ||
         _brakPoz:=exec('FindInSet','#table','INP','INP',INN.ref())=null();
         exec('del_inn','magazyn_inw',_brakPoz);
         _wyn:=0
      ?};
      INN.win_edit('RED')
   ?}
?};
TYPYDOK.cntx_pop();
INN.cntx_pop();
ST.MAG:=_st_mag;
_wyn


\var_innpop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zmienna - Poprawa nagłowka
::   WY: uchwyt do zmiennej
::  OLD: \var_innpop/zamdst_nag.fml
::----------------------------------------------------------------------------------------------------------------------
obj_new('PO_FIRST','BTN_AP','DI','TI')


\openinw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy na danym magazynie otwarta jest inwentura
::   WY: 0-jest 1-nie jest
::  OLD: \openprin/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_msk:=INN.name();
_odd:=1+(ND.name()+3);
OKR.cntx_psh();
INN.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.last()
|| {!
   |? INN.use((_msk-3)+_odd+form(OKR.ROK-2000,-2,0,'99'));
      INN.index('INDP');
      INN.prefix(ST.MAG,date(0,0,0));
      _wyn:=INN.last;
      ~_wyn & OKR.prev()
   !}
?};
INN.use(_msk);
OKR.cntx_pop();
INN.cntx_pop();
_wyn


\check_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Sprawdzanie daty rozpoczecia inwentaryzacji
::   WY: '' lub akronim pola do poprawy
::  OLD: \spr_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_ctrlred:=exec('FindInSet','#table','INP','INP',INN.ref())=null()
        & exec('FindInSet','#table','INX','INN',INN.ref())=null();
{? INN.STAT_REJ='T'
|| 1
|? INN.DI=date(0,0,0)
|| FUN.info('Podaj datę rozpoczęcia.'@); _wyn:={? _ctrlred || 'DI' || 'TYP' ?}
|? ~(INN.DI>=date(ST.AR,ST.AM,1) & INN.DI<=date(ST.AR,ST.AM,0))
|| FUN.info('Data rozpoczęcia inwentaryzacji \nmusi zawierać się w danym okresie.'@); _wyn:='DI'
|? ~exec('po_di','magazyn_inw')
|| _wyn:={? _ctrlred || 'DI' || 'TYP' ?}
|? (_ok:=1;
   {? INN.TYP_P=null() || _ok:=0; _wyn:='TYP_P'; _txt:='przychodu' ?};
   {? INN.TYP_M=null() || _ok:=0; _wyn:='TYP_M'; _txt:='rozchodu' ?};
   _ok=0)
|| FUN.info('Niewypełniony typ dokumentu %1.'@[_txt])
|? (_tab:=obj_new(1); _tab[1]:=ST.MAG; _tmg:=1+ST.MAG().TYP; _ok:=1;
   _typy_upr:=exec('typ_dok','lmg','TYPYDOK.INW=\'I\'',,,1,_tab);
   {? _typy_upr*INN.TYP_P().T=0 || _ok:=0; _wyn:='TYP_P'; _txt:=INN.TYP_P().T ?};
   {? _typy_upr*INN.TYP_M().T=0 || _ok:=0; _wyn:='TYP_M'; _txt:=INN.TYP_M().T ?};
   _ok=0)
|| FUN.info('Brak uprawnień do dokumentów inwentaryzacyjnych typu: %1.'@[_txt])
|| 1
?};
_wyn


\po_di
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: po dacie inwentaryzacji - sprawdzenie poprawnosci
::  OLD: \po_di2/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_pop:=(1+menu_txt)='P'; _wyn:=1;
_dat:=INN.DI; _tim:=INN.TI; _typ:=INN.TYP; _mag:=INN.MG; _ref:=INN.ref;
INN.cntx_psh;
INN.index('INN');
INN.prefix(_mag);
{? INN.last
|| _prev:=1;
   {? _ref=INN.ref || _prev:=INN.prev() ?};
   {!
   |? {? _prev
      ||
         {? _typ='A' & INN.D=date(0,0,0)
         || FUN.info('Ostatnia inwentaryzacja nie została zakończona.'
             '\nNiemożliwe wprowadzenie inwentaryzacji globalnej dla magazynu.'@); _wyn:=0; 0
         |? INN.DI>_dat & (INN.TI=time(0,0,0) | INN.TI>=_tim)
         || FUN.info('Ostatnia data rozpoczęcia inwentaryzacji to: %1'
             '\nNiemożliwe wprowadzenie inwentaryzacji z datą wcześniejszą.'@[form(INN.DI)]); _wyn:=0; 0
         || {? _typ='A' & INN.DI=_dat
            || FUN.info('Ostatnia data rozpoczęcia inwentaryzacji to: %1'
                '\nNiemożliwe wprowadzenie inwentaryzacji globalnej dla magazynu'
                '\nz datą wcześniejszą lub równą.'@[form(INN.DI)]); _wyn:=0; 0
            |? _typ='C' & INN.TYP='A' & INN.DI=_dat
            || FUN.info('Ostatnia data rozpoczęcia inwentaryzacji to: %1'
                '\nNiemożliwe wprowadzenie inwentaryzacji ciągłej dla magazynu'
                '\nz datą wcześniejszą lub równą dacie inwentaryzacji globalnej.'@[form(INN.DI)]); _wyn:=0; 0
            || 0
            ?}
         ?}
      || 0
      ?}
   !}
?};
INN.cntx_pop;

{? _wyn || (_opi:=exec('spr_znag','magazyn_inw',_dat,INN.TYP='A',,,,,_tim)) || _opi:=0 ?};

{? _wyn & {? _opi>0 || 1 || (_opi:=exec('spr_znag','magazyn_inw',_dat,3,,,,,_tim))>0 ?}
|| {? (_opi=1
    & {? do_state()
      || FUN.info('Istnieją niezakończone dokumenty w magazynie\n'
          'lub niezakończone dokumenty sprzedaży generujące dokumenty w magazynie.\n'@+
          {? INN.TYP='A'
          || '\nNiemożliwe wprowadzenie arkusza inwentaryzacji dla magazynu %1.'@[ST.MAG().SYM]
          || ''
          ?});
         0
      || FUN.ask('Istnieją niezakończone dokumenty w magazynie\n'
          'lub niezakończone dokumenty sprzedaży generujące dokumenty w magazynie.\n'@+
          {? INN.TYP='A'
          || '\nNiemożliwe wprowadzenie arkusza inwentaryzacji dla magazynu %1.'@[ST.MAG().SYM]
          || ''
          ?}+
          '\n\nWyświetlić niezakończone dokumenty?'@)
      ?})
    | (_opi=2 & _typ='A'
    & {? do_state()
      || FUN.info('Powyżej danej daty istnieją dokumenty zakończone w magazynie.'
          '\nNiemożliwe wprowadzenie inwentaryzacji globalnej dla magazynu %1.'@[ST.MAG().SYM]);
         0
      || FUN.ask('Powyżej danej daty istnieją dokumenty zakończone w magazynie.'
          '\nNiemożliwe wprowadzenie inwentaryzacji globalnej dla magazynu %1.'
          '\n\nWyświetlić zaakceptowane dokumenty?'@[ST.MAG().SYM])
      ?})
    | (_opi=3 & _typ='A'
    & {? do_state()
      || FUN.info('Do danej daty istnieją dokumenty zaakończone z nieuzupełnioną ceną dostawy.'
          '\nNiemożliwe wprowadzenie arkusza inwentaryzacji globalnej dla magazynu %1.'@[ST.MAG().SYM]);
         0
      || FUN.ask('Do danej daty istnieją dokumenty zaakończone z nieuzupełnioną ceną dostawy.'
          '\nNiemożliwe wprowadzenie arkusza inwentaryzacji globalnej dla magazynu %1.'
          '\n\nWyświetlić niewycenione dokumenty?'@[ST.MAG().SYM])
      ?})
   || X_Xc.select
   ?};
   {? INN.TYP='C'
   || VAR_DEL.delete('X_Xc');
      X_Xc:=exec('tab_zokr','magdok_wspolne',_dat,3,,,,,_tim);
      X_Xc.clear();
      {? X_Xc.first()
       & {? do_state()
         || FUN.info('Do danej daty istnieją dokumenty zaakończone z nieuzupełnioną ceną dostawy.'
             '\nNiemożliwe wprowadzenie arkusza inwentaryzacji dla magazynu %1.'@[ST.MAG().SYM]);
            0
         || FUN.ask('Do danej daty istnieją dokumenty zaakończone z nieuzupełnioną ceną dostawy.'
             '\nNiemożliwe wprowadzenie arkusza inwentaryzacji dla magazynu %1.'
             '\n\nWyświetlić niewycenione dokumenty?'@[ST.MAG().SYM])
         ?}
      || _acr:=X_Xc.mk_sel('Pozycje dokumentów z nieuzupełnioną ceną dostawy'@,'P',0,'spr_znagx_xa',,,,,'U');
         X_Xc.win_fld(_acr,,'MAGAZYN',,,'8, 10, 10',,,'Magazyn'@);
         X_Xc.win_fld(_acr,,'TYP',,,'8, 14, 14',,,'Typ dokumentu'@);
         X_Xc.win_fld(_acr,,'NR',,,'9, 9, 9',,,'Numer'@);
         X_Xc.win_fld(_acr,,'DATA',,,,,,'Data'@);
         X_Xc.win_fld(_acr,,'GODZ',,,,,,'Godzina'@);
         X_Xc.win_fld(_acr,,'SYMBOL',,,'10, 20, 0',,,'Symbol'@);
         X_Xc.win_fld(_acr,,'OKRES',,,6,,,'Okres'@);
         X_Xc.win_fld(_acr,,'POZ',,,-3,,,'Pozycja'@);
         X_Xc.win_fld(_acr,,'INDEKS',,,'20, 20, 0',,,'Indeks'@);
         X_Xc.win_act(_acr,,'Rekord',,,,"exec('rek_nddk','magazyn_inw')");
         X_Xc.win_act(_acr,,'Formuła','Pokaż dokument'@@,,,"exec('dispnddk','magazyn_inw')");
         X_Xc.win_act(_acr,,'Formuła','Usuń dokument'@@,,,"exec('usunnddk','magazyn_inw')");
         X_Xc.win_act(_acr,,'Kolejność');
         X_Xc.win_sel(_acr);
         X_Xc.select()
      ?}
   ?};
   _wyn:={? _opi<=3 & INN.TYP='C' || 1 || 0 ?}
?};
_wyn


\spr_znag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdza akceptacje dokumentow do danej daty
::   WE:  _a - data dla ktorej kontrolujemy
::       [_b] - czy kontrolowac dokumenty zaakceptowane powyzej danej daty 2-rowniez niezakończone 3-uzupeln. ceny
::       [_c] - INN.ref PRC+
::       [_d] - INN.ref PRC-
::       [_e] - tabela magazynow do sprawdzenia lub domyslnie 0
::       [_f] - czy kontrola pozycji na inwentaryzacji/przecenie null(domyslnie) ref INN-tak
::              (sprawdza czy na niezaakceptowanych dokumentach sa pozycje z danej przeceny)
::       [_g] - godzina dla której kontrolujemy
::   WY: ilosc dokumentow niezaakceptowanych
::  OLD: \spr_znag/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<>type_of('') || _c:='' ?};
{? var_pres('_d')<>type_of('') || _d:='' ?};
{? _>=5 || {? type_of(_e)<>118 || _listmg:=0; _e:=0 ?} || _listmg:=0; _e:=0 ?};
{? _>=6 || {? type_of(_f)<>7 || _f:=null ?} || _f:=null ?};
{? type_of(_e)=118 || _listmg:=1 ?};
_time:={? var_pres('_g')=type_of(time()) || _g || time(0,0,0) ?};

_wyn:=0;
VAR_DEL.delete('X_Xc');

{? ~_listmg
|| X_Xc:=exec('tab_zokr','magdok_wspolne',_a,_b,,_c,_d,_time)
|| _stmag:=ST.MAG;
   _e.clear();
   _czywyb:=_e.fld_acr(_e.fld_num())='WYB';
   _wyb:=~_czywyb;
   {? _e.first()
   || {? _czywyb
      || {!
         |? _wyb:=_e.WYB;
            ~_wyb & _e.next()
         !}
      ?};
      {? _wyb
      || ST.MAG:=exec('FindAndGet','#table',MG,_e[1],,,null());
         X_Xc:=exec('tab_zokr','magdok_wspolne',_a,_b,,_c,_d,_time);
         {? _e.next()
         || {!
            |? {? {? _czywyb || _e.WYB || 1 ?}
               || ST.MAG:=exec('FindAndGet','#table',MG,_e[1],,,null());
                  _buf:=exec('tab_zokr','magdok_wspolne',_a,_b,,_c,_d,_time);
                  exec('tab2tab','#table',_buf,'X_Xc',1);
                  obj_del(_buf)
               ?};
               _e.next()
            !}
         ?}
      ?}
   ?};
   ST.MAG:=_stmag
?};

X_Xc.clear;
X_Xc.prefix('N');
{? {? X_Xc.first || {? _f<>null || exec('kontrpoz','magazyn_inw',_f,'N') || 1 ?} || 0 ?}
|| _wyn:=1;
   _acr:=X_Xc.mk_sel('Niezakończone dokumenty magazynowe'@,'P',0,'spr_znagx_xa',,,,,'U')
|? _b=2
|| X_Xc.clear;
   X_Xc.prefix('');
   {? {? X_Xc.first || {? _f<>null || exec('kontrpoz','magazyn_inw',_f,'') || 1 ?} || 0 ?}
   || _wyn:=2;
      _acr:=X_Xc.mk_sel('Wszystkie dokumenty magazynowe o dacie większej niż data arkusza'@,'P',0,'spr_znagx_xa',,,,,'U')
   ?}
|? _b<>3
|| X_Xc.clear;
   X_Xc.prefix('T');
   {? {? X_Xc.first || {? _f<>null || exec('kontrpoz','magazyn_inw',_f,'T') || 1 ?} || 0 ?}
   || _wyn:=2;
      _acr:=X_Xc.mk_sel('Zakończone dokumenty magazynowe o dacie większej niż data arkusza'@,'P',0,'spr_znagx_xa',,,,,'U')
   ?}
?};

{? _wyn=0 & _b=3
||
:: sprawdza czy wszystkie pozycje maja uzupelniona cene
   VAR_DEL.delete('X_Xc');
   X_Xc:=exec('tab_zokr','magdok_wspolne',_a,3,,,,_time);
   {? X_Xc.first()
   ||
      _wyn:=3;
      _acr:=X_Xc.mk_sel('Pozycje dokumentów z nieuzupełnioną ceną dostawy'@,'P',0,'spr_znagx_xa',,,,,'U')
   ?}
?};

{? _wyn
||
   X_Xc.win_fld(_acr,,'MAGAZYN',,,'8, 10, 10',,,'Magazyn'@);
   X_Xc.win_fld(_acr,,'TYP',,,'8, 14, 14',,,'Typ dokumentu'@);
   X_Xc.win_fld(_acr,,'NR',,,'9, 9, 9',,,'Numer'@);
   X_Xc.win_fld(_acr,,'DATA',,,,,,'Data'@);
   X_Xc.win_fld(_acr,,'GODZ',,,,,,'Godzina'@);
   X_Xc.win_fld(_acr,,'SYMBOL',,,'10, 20, 0',,,'Symbol'@);
   X_Xc.win_fld(_acr,,'OKRES',,,6,,,'Okres'@);
   {? _b=2 || X_Xc.win_fld(_acr,,'AKC',,,-3,,,'Zaakceptowany'@) ?};
   {? _wyn=3
   ||
      X_Xc.win_fld(_acr,,'POZ',,,-3,,,'Pozycja'@);
      X_Xc.win_fld(_acr,,'INDEKS',,,20,,,'Indeks'@)
   ?};
   X_Xc.win_act(_acr,,'Rekord',,,,"exec('rek_nddk','magazyn_inw')");
   X_Xc.win_act(_acr,,'Formuła','Pokaż dokument'@@,,,"exec('dispnddk','magazyn_inw')");
   X_Xc.win_act(_acr,,'Formuła','Usuń dokument'@@,,,"exec('usunnddk','magazyn_inw')");
   X_Xc.win_act(_acr,,'Kolejność');
   X_Xc.win_sel(_acr)
?};
_wyn


\kontrpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: kontrola pozycji przeceny
::   WE: _a - ref INN
::       _b - prefiks 'N'-niezaakceptowane dokumenty, 'T'-zaakceptowane dokumenty
::   WY: X_Xc.first()
::  OLD: \kontrpoz/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
ND.cntx_psh();
DK.cntx_psh();
FAKS.cntx_psh();
FAP.cntx_psh();
X_Xc.cntx_psh();
X_Xc.clear;
X_Xc.prefix(_b);
{? X_Xc.first()
|| {!
   |? _mask:=form(8+X_Xc.REFN);
      {? (1+_mask)='n'
      || ND.use(_mask);
         DK.use('dokma'+(_mask+3));
         ND.clear();
         {? ND.seek(X_Xc.REFN,_mask)
         || _byl:=0;
            DK.index('DOKMAG');
            DK.prefix(ND.ref());
            {? DK.first()
            || _byl:=DK.size();
               {!
               |? {? exec('FindInSet','#table','INP','KOD',DK.M,_a)<>null
                  || 0
                  || _byl-=1;
                     DK.next()
                  ?}
               !}
            ?};
            {? ~_byl || _ok:=X_Xc.del() || _ok:=X_Xc.next() ?}
         || _ok:=X_Xc.del()
         ?}
      |? (1+_mask)='f'
      || FAKS.use(_mask);
         FAP.use('fakpo'+(_mask+3));
         FAKS.clear();
         {? FAKS.seek(X_Xc.REFN,_mask)
         || _byl:=0;
            FAP.index('FAP');
            FAP.prefix(FAKS.ref());
            {? FAP.first()
            || _byl:=FAP.size();
               {!
               |? {? exec('FindInSet','#table','INP','KOD',FAP.M,_a)<>null
                  || 0
                  || _byl-=1;
                     FAP.next()
                  ?}
               !}
            ?};
            {? ~_byl || _ok:=X_Xc.del() || _ok:=X_Xc.next() ?}
         || _ok:=X_Xc.del()
         ?}
      || _ok:=X_Xc.next()
      ?};
      _ok
   !}
?};
X_Xc.cntx_pop();
ND.cntx_pop();
DK.cntx_pop();
FAKS.cntx_pop();
FAP.cntx_pop();
X_Xc.first()


\rek_nddk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: rekord przed dla dokumentow ma wylaczac akcje
::  OLD: \rek_nddk/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_war:='"TYPYDOK".T=\''+X_Xc.TYP+'\'';
_typ:=form(exec('typ_dok','lmg',_war,,,1))<>''
 & (exec('FindInSet','#table','T2MG','T',ST.MAG)=null
  | exec('FindInSet','#table','T2MG','T',exec('FindInSet','#table','TYPYDOK','TYP',X_Xc.TYP,X_Xc.TYP),ST.MAG)<>null);

_grayed:='';
{? ~_typ
|| _grayed+='PU'
|? exec('FindAndGet','#table',ND,X_Xc.REFN,,"ND.STAT_REJ<>'N'",0)
|| _grayed+='U'
?};
X_Xc.actions_grayed(X_Xc.win_sel('?'),_grayed)


\dispnddk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: wyswietla dokument
::  OLD: \dispnddk/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_beermw:=BEER.MW;
_beermg:=BEER.MG;
BEER.MENU_PTH+='D';
BEER.MW:='M';
DISP.FAKS:='';
BEER.MG:=exec('FindInSet','#table','MG','MAGAZYNY',X_Xc.MAGAZYN);
DPOZ.POZ:=1;

:: ustawia zmienna BEER.MMJM - odpowiedzialna za stosowanie przelicznikow jednostek miar
exec('ustawprz','magdok_poz');

ND.cntx_psh();
DK.cntx_psh();
DK_L.cntx_psh();
INN.cntx_psh();
_akc:='';
{? exec('spr_upr2','users','MG',BEER.MG
    ,'Brak uprawnień do magazynu:\n%1 - %2.\n\n'
     'Możliwy wyłącznie podgląd dokumentu.'@[BEER.MG().SYM,BEER.MG().NAZ])
|| _akc:=exec('disp_dk','magdok_wspolne',0,X_Xc.REFN)
|| _akc:=exec('disp_dk','magdok_wspolne',1,X_Xc.REFN)
?};
{? _akc<>''
|| X_Xc.cntx_psh();
   X_Xc.clear();
   X_Xc.AKC:=_akc;
   X_Xc.put(1);
   X_Xc.cntx_pop()
?};
ND.cntx_pop();
DK.cntx_pop();
DK_L.cntx_pop();
INN.cntx_pop();
BEER.MW:=_beermw;
BEER.MG:=_beermg;
BEER.MENU_PTH-=1;
''


\usunnddk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: usuwa dokument
::  OLD: \usunnddk/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_beermw:=BEER.MW;
_beermg:=BEER.MG;
BEER.MENU_PTH+='D';
BEER.MW:='M';
DISP.FAKS:='';
BEER.MG:=exec('FindInSet','#table','MG','MAGAZYNY',X_Xc.MAGAZYN);
DPOZ.POZ:=1;
_nwz:=ND.name();

:: ustawia zmienna BEER.MMJM - odpowiedzialna za stosowanie przelicznikow jednostek miar
exec('ustawprz','magdok_poz');

ND.cntx_psh();
DK.cntx_psh();
DK_L.cntx_psh();
INN.cntx_psh();

_mask:=0;
{? form(8+X_Xc.REFN)<>_nwz
|| _mask:=1;
   exec('open','open_tab',5-(8+X_Xc.REFN)-2,6-(8+X_Xc.REFN))
?};

ND.clear();
{? ND.seek(X_Xc.REFN) & exec('blok_nd','magdok_nag','T')
 & exec('spr_upr2','users','MG',BEER.MG
    ,'Brak uprawnień do magazynu:\n%1 - %2.\n\n'
     'Niemożliwe usunięcie dokumentu.'@[BEER.MG().SYM,BEER.MG().NAZ])
|| {? exec('n_usun','magdok_nag') || X_Xc.del() ?}
?};

{? _mask || exec('open','open_tab',5-_nwz-2,6-_nwz) ?};
ND.cntx_pop();
DK.cntx_pop();
DK_L.cntx_pop();
INN.cntx_pop();
BEER.MW:=_beermw;
BEER.MG:=_beermg;
BEER.MENU_PTH-=1;
''


\ark_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: generacja stanow do inwentaryzacji
::   WE: _a - wyswietla przygotowany arkusz (0 - nie, 1 - tak)
::       [_b] - czy zadawac pytanie 1-tak(domyslnie) 0-nie
::  OLD: \ark_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>1 || _b:=1 ?} || _b:=1 ?};
{? INN.TYP='C' & INN.ARKPOM
|| FUN.info('Operacja niedostępna dla inwentaryzacji ciągłej wg arkuszy pomocniczych.'@)
|? INN.r_lock(1)
||
   INN.get;
   {? INN.D=date(0,0,0)
   ||
      {? INN.TYP='A'
      ||
::       wszystkie indeksy materialowe wg dostaw
         {? exec('FindInSet','#table','INP','INP',INN.ref())<>null
         || _oki:=0;
            {? ~exec('spr_blok','magazyn_inw',INN.ref)
            || FUN.info('Arkusz jest w trakcie edycji przez innego użytkownika\n'
                'Wprowadzenie nowej generacji arkusza niemożliwe.'@);
               _oki:=0
            |? _typ:=FUN.choice('Wygenerowano już arkusz.\nWybierz opcję:'@,1,
                       '&Usunięcie pozycji'@,'&Dodanie pozycji bez stanu'@)
            || {? _typ=1
               || _oki:=1;
                  INP.index('INP');
                  INP.prefix(INN.ref);
                  {? INP.first()
                  ||
                     {!
                     |?
                        exec('usu_inpd','magazyn_inw',INP.ref);
                        INP.del()
                     !}
                  ?}
               |? _typ=2
               || ZAKR.ACCESS:='N';
                  VAR_DEL.delete('X_Xa');
                  X_Xa:=tab_tmp(1,'SQL','STRING[16]','','REF','INTEGER','');
                  _acr_sel:=SM.mk_sel('Pozycje stanu magazynowego'@,'P',0,'ark_inn_acrsel',,,,,'U');
                  SM.win_fld(_acr_sel,ZAKR,'ACCESS',,,,,,,,'Czy wybrano [T/N]?'@,2,,"'T'","'N'");
                  SM.win_fld(_acr_sel,,'M','KTM',,20,,1,'Indeks'@);
                  SM.win_fld(_acr_sel,,'M','N',,40,,1,'Nazwa'@);
                  SM.win_act(_acr_sel,0,'Formuła','Wybierz'@@,,'Wybór pozycji'@,
                   "X_Xa.prefix();
                    {? ~X_Xa.find_key($SM.ref(),)
                    || X_Xa.blank();
                       X_Xa.SQL:=$SM.ref();
                       X_Xa.REF:=#SM.ref();
                       X_Xa.add()
                    ?}",,1,1);
                  SM.win_act(_acr_sel,0,'Formuła','Zrezygnuj'@@,,'Rezygnacja z wybór pozycji'@,
                   "X_Xa.clear();
                    X_Xa.prefix($SM.ref(),);
                    {? X_Xa.first() || {! |? X_Xa.del() !} ?}",,,1);
                  SM.win_act(_acr_sel,0,'Formuła','Akceptuj'@@,,,"exec('akcsinn','magazyn_inw')",,1,1
                     ,"exec('akcsinn','magazyn_inw')");
                  SM.win_act(_acr_sel,0,'Szukaj');
                  SM.win_act(_acr_sel,0,'Kolejność');
                  SM.win_act(_acr_sel,0,'Rekord',,,,
                   "{? ~(var_pres('X_Xa')=-1) || exec('access','kontrahent',$SM.ref(),X_Xa,'SQL') ?};
                    exec('actions','kontrahent');
                    ~~");
                  SM.win_sel(_acr_sel);
                  SM.index('SA');
                  SM.prefix(ST.MAG);
                  SM.select();
                  VAR_DEL.delete('X_Xa')
               ?}
            ?}
         || _oki:=1
         ?};
         {? _oki & {? _b || _typ:=FUN.ask('Czy generować arkusz wg pozycji na stanie magazynowym?'@) || 1 ?}
         || SM.index('SA');
            SM.prefix(ST.MAG);
            {? SM.first()
            ||
               _size:=SM.size();
               _licz:=0;
               _time:=time();
               {!
               |?
                  _licz+=1;
                  progress(_licz/_size*100,SM.M().KTM+' - '+SM.M().N,'Generacja inwentaryzacji'@);
                  {? exec('czynaark','magazyn_inw',INN.ref(),SM.M().KTM)
                  || exec('add_onei','magazyn_inw',INN.ref(),INN.MG,INN.DI,SM.M,1,,,,,INN.TI)
                  ?};
                  SM.next()
               !}
            ?}
         ?}
      ||
::       wybor indeksow
         _typ:=FUN.choice('Wybierz jedną z opcji wyboru materiałów:'@,1,
                    'Zakres od.. do..'@,'Wg &maski'@,'Wybór pozycji'@);
         {? ~_typ || _a:=0 ?};
         {? _typ=1
         || POMOC.RODZ:='T';
            MGR.index('KOD'); MGR.prefix('T');
            {? MGR.first() || BEER.ODG:=MGR.ref ?}; {? MGR.last()  || BEER.DOG:=MGR.ref ?};
            M.index('RODZ'); M.prefix('T');
            {? M.first() || BEER.ODM:=M.ref ?}; {? M.last()  || BEER.DOM:=M.ref ?};
            BEER.win_edit('ODDO');
            {? BEER.T='' || BEER.T:='G' ?};
            exec('beer_t_ae','magazyn_inw');
            {? BEER.edit()
            || {? BEER.T='G'
               || _acr:=SM.ndx_tmp('',0,'MAG',,0,'M','MGR',0,'M','KTM',0);
                  MGR.index('KOD');
                  MGR.prefix('T');
                  {? MGR.first
                  ||
                     _size:=MGR.size;
                     _licz:=0;
                     _time:=time();
                     {!
                     |? _kod:=MGR.KOD;
                        _licz+=1;
                        progress(_licz/_size*100,MGR.KOD+' - '+MGR.NAZ,'Generacja inwentaryzacji'@);
                        MGR.cntx_psh();
                        _oki:=(_kod<=BEER.DOG().KOD & _kod>=BEER.ODG().KOD);
                        MGR.cntx_pop();
                        {? _oki
                        ||
                           SM.index(_acr);
                           SM.prefix(ST.MAG,MGR.ref());
                           {? SM.first()
                           ||
                              {!
                              |?
                                 {? exec('czynaark','magazyn_inw',INN.ref(),SM.M().KTM)
                                 || exec('add_onei','magazyn_inw',INN.ref(),INN.MG,INN.DI,SM.M,1,,,,,INN.TI)
                                 ?};
                                 SM.next()
                              !}
                           ?}
                        ?};
                        MGR.next()
                     !}
                  ?};
                  SM.ndx_drop(_acr)
               || _acr:=SM.ndx_tmp('',0,'MAG',,0,'M',,0,'M','KTM',0);
                  M.index('RODZ');
                  M.prefix('T');
                  {? M.first
                  ||
                     _size:=M.size;
                     _licz:=0;
                     _time:=time();
                     {!
                     |? _kod:=M.KTM;
                        _licz+=1;
                        M.cntx_psh; _oki:=(_kod<=BEER.DOM().KTM & _kod>=BEER.ODM().KTM); M.cntx_pop;
                        {? _oki
                        ||
                           SM.index(_acr);
                           SM.prefix(ST.MAG,M.ref);
                           {? SM.first
                           ||
                              {!
                              |?
                                 progress(_licz/_size*100,_kod+' '+SM.M().N,'Generacja inwentaryzacji'@);
                                 {? exec('czynaark','magazyn_inw',INN.ref(),SM.M().KTM)
                                 || exec('add_onei','magazyn_inw',INN.ref,INN.MG,INN.DI,SM.M,1,,,,,INN.TI)
                                 ?};
                                 SM.next
                              !}
                           ?}
                        ?};
                        M.next
                     !}
                  ?};
                  SM.ndx_drop(_acr)
               ?}
            ?}
         |? _typ=2
         || BEER.win_edit('MASK');
            {? BEER.edit()
            || {? form(BEER.MSK)='' || BEER.MSK:='*' ?};
               SM.index('SA');
               SM.prefix(ST.MAG);
               {? SM.first
               ||
                  _size:=SM.size;
                  _licz:=0;
                  _time:=time();
                  {!
                  |?
                     _licz+=1;
                     progress(_licz/_size*100,SM.M().KTM+' - '+SM.M().N,'Generacja inwentaryzacji'@);
                     {? exec('analmask','magazyn_inw',BEER.MSK,{? BEER.T='G' || SM.M().MGR().KOD || SM.M().KTM ?})
                      & exec('czynaark','magazyn_inw',INN.ref(),SM.M().KTM)
                     || exec('add_onei','magazyn_inw',INN.ref,INN.MG,INN.DI,SM.M,1,,,,,INN.TI)
                     ?};
                     SM.next()
                  !}
               ?}
            ?}
         |? _typ=3
         || ZAKR.ACCESS:='N';
            VAR_DEL.delete('X_Xa');
            X_Xa:=tab_tmp(1,'SQL','STRING[16]','','REF','INTEGER','');
            _acr_sel:=SM.mk_sel('Pozycje stanu magazynowego'@,'P',0,'ark_inn_acrsel',,,,,'U');
            SM.win_fld(_acr_sel,ZAKR,'ACCESS',,,,,,,,'Czy wybrano [T/N]?'@,2,,"'T'","'N'");
            SM.win_fld(_acr_sel,,'M','KTM',,20,,1,'Indeks'@);
            SM.win_fld(_acr_sel,,'M','N',,40,,1,'Nazwa'@);
            SM.win_act(_acr_sel,0,'Formuła','Wybierz'@@,,'Wybór pozycji'@,
             "X_Xa.prefix();
              {? ~X_Xa.find_key($SM.ref(),)
              || X_Xa.blank();
                 X_Xa.SQL:=$SM.ref();
                 X_Xa.REF:=#SM.ref();
                 X_Xa.add()
              ?}",,1,1);
            SM.win_act(_acr_sel,0,'Formuła','Zrezygnuj'@@,,'Rezygnacja z wybór pozycji'@,
             "X_Xa.clear();
              X_Xa.prefix($SM.ref(),);
              {? X_Xa.first() || {! |? X_Xa.del() !} ?}",,,1);
            SM.win_act(_acr_sel,0,'Formuła','Akceptuj'@@,,,"exec('akcsinn','magazyn_inw')",,1,1
               ,"exec('akcsinn','magazyn_inw')");
            SM.win_act(_acr_sel,0,'Szukaj');
            SM.win_act(_acr_sel,0,'Kolejność');
            SM.win_act(_acr_sel,0,'Rekord',,,,
             "{? ~(var_pres('X_Xa')=-1) || exec('access','kontrahent',$SM.ref(),X_Xa,'SQL') ?};
              exec('actions','kontrahent');
              ~~");
            SM.win_sel(_acr_sel);
            SM.index('SA');
            SM.prefix(ST.MAG);
            SM.select();
            VAR_DEL.delete('X_Xa')
         ?}
      ?}
   || FUN.info('Zaakceptowano już inwentaryzację.'@)
   ?};
   echo();
   prgs_clr();
   {? _a || exec('edi_inn','magazyn_inw',INN.ref) ?};
   INN.r_unlock()
?};
''


\spr_blok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy jakikolwiek rekord jest zablokowany przez innego uzytkownika
::   WE: _a - ref naglowka
::   WY: 1-nie jest 0-jest
::  OLD: \spr_blok/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
INP.cntx_psh;
INP.index('INP');
INP.prefix(_a);
{? INP.first
|| {!
   |? {? INP.r_lock(1,1) || INP.r_unlock || _wyn:=0 ?};
      _wyn & INP.next
   !}
?};
INP.cntx_pop;
_wyn


\czynaark
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: sprawdza czy indeks jest juz na arkuszu
::   WE: _a - ref INN
::       _b - KTM
::   WY: 1- nie ma 0-juz jest
::  OLD: \czynaark/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
INP.cntx_psh();
INP.index('INP');
INP.prefix(_a,_b,_b);
{? INP.first()
|| {!
   |? _wyn:=INP.SCSQL<>'';
      _wyn & INP.next()
   !}
?};
INP.cntx_pop();
_wyn


\analmask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: analiza maski
::   WE: _a - wzorzec maski - string
::       _b - kod do porownania ze wzorcem
::   WY: 1-OK 0-nie jest dobrze
::  OLD: \analmask/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_wz:=form(_a);
_dn:=form(_b);
{? ~(_wz=_dn)
|| _lw:=+_wz;
   _ch:=obj_new(_lw); {! _i.._lw |! _ch[_i]:=1+_wz; _wz:=1-_wz !};
   _i:=0; _cl:='';
   {!
   |? _i+=1;
      {? ~(_nr:=('?*'*_ch[_i]))
      || _cl+=_ch[_i]
      || {? (_dn*_cl)=1 | ~(+_cl)
         || _dn:=(+_cl)-_dn; _cl:='';
            {? _nr=1
            || _dn:=1-_dn
            || {? _i<_lw
               || _i+=1;
                  (_nr:=_dn*_ch[_i]);
                  {? _nr
                  || _dn:=_nr-_dn
                  || _wyn:=0
                  ?}
               ?}
            ?}
         || _wyn:=0
         ?}
      ?};
      _wyn & _i<_lw
   !};
   {? _wyn & (+_dn) || _wyn:=(_ch[_lw]='*') ?};
   {? _wyn & (+_cl) || _wyn:=((_dn*_cl)=1)  ?};
   obj_del(_ch)
?};
_wyn


\akcsinn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: akceptacja zaznaczonych pozycji = przepisanie ich na arkusz wg stanow magazynowych
::  OLD: \akcsinn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_adel:=0;
_nosel:=0;
_tab:={? ~(var_pres('X_Xa')=-1)
      || X_Xa.prefix();
         _nosel:=X_Xa.size()=0;
         X_Xa
      || _adel:=1;
         SM.sel_aget()
      ?};
{? _adel || SM.sel_adel() ?};
sel_exit;
{? _tab.size
||
:: zaznaczonych kilka pozycji
   _ilet:=0;
   _ilen:=0;
   _iled:=0;
   _ilea:=0;
   _tab.clear;
   {? _tab.first
   || _size:=_tab.size;
      _licz:=0;
      _time:=time();
      {!
      |? {? (SM.clear; SM.seek(_tab.REF,SM.name))
         || _licz+=1;
            progress(_licz/_size*100,SM.M().KTM+' - '+SM.M().N,'Przeniesienie arkuszy spisowych'@);
            _isark:=exec('FindInSet','#table','INP','INP',SM.M().KTM,INN.ref(),,1,,null())<>null();
            {? exec('czynaark','magazyn_inw',INN.ref(),SM.M().KTM)
            || {? exec('add_onei','magazyn_inw',INN.ref,INN.MG,INN.DI,SM.M,1,,,,,INN.TI,,,1)
               || {? _isark
                  || _ilea+=1
                  || _ilet+=1
                  ?}
               || _iled+=1
               ?}
            || _ilen+=1
            ?}
         ?};
         _tab.next
      !}
   ?};
   {? _ilet>0 | _ilen>0 | _iled>0 | _ilea>0
   || FUN.info('Dodano do arkusza: %1 materiał(ów).\n'@[form(_ilet,,0,'99')]+
       {? _ilea>0
       || '\nZaktualizowano na arkuszu: %1 materiał(ów).\n'@[form(_ilea,,0,'99')]
       || ''
       ?}+
       {? _ilen>0
       || '\nNie dodano do arkusza: %1 materiał(ów)\n(materiały jako nowe dostawy na arkuszu).'@[form(_ilen,,0,'99')]
       || ''
       ?}+
       {? _iled>0
       || '\nNie dodano do arkusza: %1 materiał(ów)\n'
          '(brak dostaw do daty: %2).\nMateriały można dołączyć jako nowe dostawy.'@[form(_iled,,0,'99'),$INN.DI]
       || ''
       ?})
   ?}
|? {? _nosel || FUN.info('Nie zaznaczono żadnej pozycji.\nNic nie zostanie dodane do arkusza.'@); 0 || 1 ?}
||
:: jedna pozycja
   {? exec('czynaark','magazyn_inw',INN.ref(),SM.M().KTM)
   || {? ~exec('add_onei','magazyn_inw',INN.ref,INN.MG,INN.DI,SM.M,1,,,,,INN.TI)
      || FUN.info('Brak dostaw na dany materiał do daty: %1.\nMateriał można dołączyć jako nową dostawę.\n'
          'Dołączenie niemożliwe.'@[$INN.DI])
      ?}
   || FUN.info('Dany indeks dodano jako nową dostawę do arkusza.\nDołączenie niemożliwe.'@)
   ?}
?}


\akcminn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: akceptacja zaznaczonych pozycji = przepisanie ich na arkusz wg kartoteki materialowej
::  OLD: \akcminn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=M.sel_aget();
M.sel_adel();
sel_exit;
{? _tab.size
||
:: zaznaczonych kilka pozycji
   _ilet:=0;
   _ilen:=0;
   _iled:=0;
   _tab.clear;
   {? _tab.first
   || _size:=_tab.size;
      _licz:=0;
      _time:=time();
      {!
      |? {? (M.clear; M.seek(_tab.REF,))
         || _licz+=1;
            progress(_licz/_size*100,M.KTM+' - '+M.N,'Przeniesienie arkuszy spisowych'@);
            {? exec('czynaark','magazyn_inw',INN.ref(),M.KTM)
            || {? exec('add_onei','magazyn_inw',INN.ref,INN.MG,INN.DI,M.ref,1,,,,,INN.TI)
               || _ilet+=1
               || _iled+=1
               ?}
            || _ilen+=1
            ?}
         ?};
         _tab.next
      !}
   ?};
   {? _ilet>0 | _ilen>0 | _iled>0
   || FUN.info('Dodano do arkusza: %1 materiał(ów).\n'@[form(_ilet,,0,'99')]+
       {? _ilen>0
       || '\nNie dodano do arkusza: %1 materiał(ów)\n(indeksy jako nowe dostawy na arkuszu).'@[form(_ilen,,0,'99')]
       || ''
       ?}+
       {? _iled>0
       || '\nNie dodano do arkusza: %1 materiał(ów)\n'
          '(brak dostaw do daty: %2).\nMateriały można dołączyć jako nowe dostawy.'@[form(_iled,,0,'99'),$INN.DI]
       || ''
       ?})
   ?}
||
:: jedna pozycja
   {? exec('czynaark','magazyn_inw',INN.ref(),M.KTM)
   || {? ~exec('add_onei','magazyn_inw',INN.ref,INN.MG,INN.DI,M.ref,1,,,,,INN.TI)
      || FUN.info('Brak dostaw na dany materiał do daty: %1.\nMateriał można dołączyć jako nową dostawę.\n'
          'Dołączenie niemożliwe.'@[$INN.DI])
      ?}
   || FUN.info('Dany indeks dodano jako nową dostawę do arkusza.\nDołączenie niemożliwe.'@)
   ?}
?}


\edi_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: wyswietla / edytuje arkusz inwentaryzacyjny
::   WE: [_a] - ref naglowka inwentaryzacji
::  OLD: \edi_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1  || {? type_of(_a)<>7 || _a:=INN.ref() ?}  || _a:=INN.ref()  ?};

BEER.SS:=BEER.SE:=BEER.SR:=BEER.RIM:=BEER.RIP:=BEER.SIM:=BEER.SIP:=0;
BEER.SS2:=BEER.SE2:=BEER.SR2:=BEER.RIM2:=BEER.RIP2:=BEER.SIM2:=BEER.SIP2:=0;
ATR.MJS:='INP';
:: zmienna dla lokalizacji
EANX.MG:=INN.MG;
EANX.WYLZAL:={? EANX.MG().MWS='T' || 'N' || 'T' ?};
_ark_pom:=INN.ARKPOM;
_act:=INP.actions('DISP',{? _ark_pom & INN.D=date(0,0,0) & INN.STAT_REJ='N' || '' || 'U' ?});
INP.index('INP');
INP.prefix(_a);
INP.win_sel({? INN.D<>date(0,0,0) | INN.STAT_REJ<>'N'
            || 'DISP'
            |? _ark_pom
            || 'WERS'
            || 'WER'+{? (1+ST.MAG().TYP)='E' || 'F' || '' ?} ?});
INP.win_edit('RED2');
M.win_sel('WER_S');
M.win_dict('WER_S');
SC.cntx_psh();
INP.fld_fml('C','DISPLAY_FORMAT',"{? INN.MG().IL='T' || 'empty=1' || 'empty=0' ?}");
params_set(params_get());
_result:=INP.select();
SC.cntx_pop();
INN.seek(_a);
exec('plus_min','magazyn_inw');
INP.actions('DISP',_act);
_result


\plus_min
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: obliczenie wartosci nadwyzek, niedoborow
::  OLD: \plus_min/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=INN.ref;
BEER.WRP:=0; BEER.WRM:=0;
INN.cntx_psh;
INP.cntx_psh;
INP.index('INP');
INP.prefix(_ref);
{? INP.first
||
   _tmg:=1+INP.IN().MG().TYP;
   {!
   |?
      {? INP.SE>INP.SS || _cena:={? _tmg='Ś' || exec('cenas','magazyn_stan',INP.M,_tmg) || INP.C ?};
                          BEER.WRP+=((INP.SE-INP.SS)*_cena)$2
      |? INP.SS>INP.SE || BEER.WRM+=((INP.SS-INP.SE)*INP.C)$2
      ?};
      INP.next
   !}
?};
INP.cntx_pop;
INN.cntx_pop;
{? INN.seek(_ref) & INN.r_lock(1,1,1)
|| INN.WRP:=BEER.WRP;
   INN.WRM:=BEER.WRM;
   INN.put;
   INN.r_unlock()
?};
''


\aktzamst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: aktualizacja statusow zamowien wg magazynu w stalych systemu
::  OLD: \aktzamst/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
USERS_UP.index('MG');
USERS_UP.prefix(null,'ZAM',ST.ODDZ);
{? USERS_UP.find_key(ST.MAG)
||
:: magazyny dla zamowien sprzedazy
   ZK_N.cntx_psh();
   ZK_N.index('AA');
   ZK_N.prefix('A');
   {? ZK_N.first()
   || {!
      |? exec('obl_warz','zamsiw_nag',ZK_N.ref(),0,1,1);
         ZK_N.next()
      !}
   ?};
   ZK_N.cntx_pop()
?};

USERS_UP.index('MG');
USERS_UP.prefix(null,'ZAW',ST.ODDZ);
{? USERS_UP.find_key(ST.MAG)
||
:: magazyny dla zamowien wewnetrznych
   ZK_N.cntx_psh();
   ZK_N.index('AA');
   ZK_N.prefix('A');
   {? ZK_N.first()
   || {!
      |? exec('obl_warz','zamsiw_nag',ZK_N.ref(),0,1,1);
         ZK_N.next()
      !}
   ?};
   ZK_N.cntx_pop()
?}


\pop_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: poprawa naglowka inwentaryzacji
::  OLD: \pop_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
TYPYDOK.cntx_psh();
_var_innpop:=exec('var_innpop','magazyn_inw');
_var_innpop.PO_FIRST:=0;
_var_innpop.DI=INN.DI;
_var_innpop.TI=INN.TI;
:: Parametr 'context' wykorzystywany w:
:: - exec('inn_pozycje_red','magazyn_inw')
:: - exec('inn_zakoncz_red','magazyn_inw')
:: Parametr 'var_innpop' wykorzystywany w:
:: - exec('inn_pozycje_red','magazyn_inw')
:: - exec('inn_zakoncz_red','magazyn_inw')
params_set('context',params_get(),'var_innpop',_var_innpop);

_red:={? INN.MG().SL='T' || 'RED' || 'RED2' ?};
exec('inn_win_edit_set','magazyn_inw',_red);
_wyn:=INN.D=date(0,0,0);
{? ~_wyn
|| FUN.info('Arkusz zaakceptowany.\nZmiany niedostępne.'@)
|| _wyn:=exec('FindInSet','#table','INP','INP',INN.ref())=null;
   {? ~_wyn
   || FUN.info('Istnieją pozycje na arkuszu.\nZmiany niedostępne.'@)
   || _wyn:=exec('FindInSet','#table','INX','INN',INN.ref())=null;
      {? ~_wyn
      || FUN.info('Istnieją dołączone arkusze pomocnicze.\nZmiany niedostępne.'@)
      ?}
   ?};
   {? _wyn & INN.edit("exec('check_inn','magazyn_inw')") || INN.put(1) ?}
?};
TYPYDOK.cntx_pop()


\del_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: usuniecie calego arkusza
::   WE: [_a] - bez pytania
::  OLD: \del_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_bezPytania:={? var_press('_a')=type_of(0) || _a || 0 ?};

{? INN.D=date(0,0,0) & ~INN.INP & ~INN.INR
|| {? ~exec('spr_blok','magazyn_inw',INN.ref)
   || FUN.info('Arkusz jest w trakcie edycji przez innego użytkownika\n Usunięcie niemożliwe.'@)
   |? _bezPytania
      | FUN.ask(
         {? exec('FindInSet','#table','INX','INN',INN.ref())<>null
         || 'Arkusz powiązany z arkuszami pomocniczymi.\n'
            'Jego usunięcie spowoduje usunięcie wszystkich arkuszy pomocniczych.\n'@
         |? exec('czyinakc','magazyn_inw')
         || 'Na arkuszu istnieją pozycje zaakceptowane (wprowadzone informacje inwentaryzacyjne).\n'@
         || ''
         ?}+'Czy usunąć cały arkusz?'@)
   ||
      do();
      INP.index('INP');
      INP.prefix(INN.ref);
      {? INP.first()
      ||
         {!
         |?
            exec('usu_inpd','magazyn_inw',INP.ref);
            INP.del()
         !}
      ?};
::    usuniecie arkuszy pomocniczych
      INX.index('INN');
      INX.prefix(INN.ref());
      {? INX.first() || {! |? exec('del_innx','magazyn_inw',0) !} ?};
      INNKOM.index('INN');
      INNKOM.prefix(INN.ref());
      {? INNKOM.first() || {! |? INNKOM.del() !} ?};
      {? ~INN.count
      || POM.TYPDOK:='INN'; POM.TAB:='INN';
         numer:=INN.NR; oldnumer:=1;
         exec('nr_old','numery');
         INN.del()
      || undo()
      ?};
      end();
      exec('aktzamst','magazyn_inw')
   ?}
|| FUN.info('Usunięcie arkusza dostępne'
    '\npo uprzednim usunięciu dokumentów różnicowych'
    '\noraz wycofaniu zakończenia inwentaryzacji.'@)
?};
''


\czyinakc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: sprawdza czy istnieja zaakceptowane pozycje na arkuszu
::   WY: 1-istnieja 0-nie ma
::  OLD: \czyinakc/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
INP.cntx_psh();
INP.index('INP');
INP.prefix(INN.ref());
{? INP.first()
|| {!
   |? _wyn:=INP.AKC='T';
      ~_wyn & INP.next()
   !}
?};
INP.cntx_pop();
_wyn


\del_innx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: usuniecie arkusza pomocniczego
::   WE: [_a] - 1-z zapytaniem (domyslnie) 0-bez pytania
::   WY: wynik INX.del
::  OLD: \del_innx/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};

{? INX.r_lock(1,1,1)
|| {? {? _a || FUN.ask('Czy usunąć arkusz pomocniczy wraz z pozycjami?'@) || 1 ?}
   || INY.index('INX');
      INY.prefix(INX.ref());
      {? INY.first() || {! |? INY.del !} ?};
      exec('ret_eann','magazyn_mob',$INX.ref(),'I',INX.INN().MG);
::    wyczyszczenie informacji Z EANN
      _dk_ln:=$INX.ref();
      INX.cntx_psh();
      EANP.cntx_psh();
      EANN.cntx_psh();
      EANN.index('REFSQL');
      EANN.prefix(_dk_ln,_dk_ln);
      {? EANN.first()
      || {!
         |? _ref:=EANN.ref(); _ok:=EANN.next();
            EANN.cntx_psh();
            EANN.clear();
            {? EANN.seek(_ref)
            || EANN.REFSQL:='delete';
               EANN.put(1)
            ?};
            EANN.cntx_pop();
            _ok
         !}
      ?};
      EANP.cntx_pop();
      EANN.cntx_pop();
      INX.cntx_pop();
      _wyn:=INX.del();
      {? _a || exec('inn_innx','magazyn_inw',2) ?}
   ?}
|| {? ~_a
   || undo()
   || {? FUN.ask('Arkusz obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?\n\n'
          'UWAGA. Niemożliwa usunięcie arkusza pomocniczego.'@)
      || INX.r_lock(1,,1);
         INX.r_unlock()
      ?}
   ?}
?};
_wyn


\inn_innx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: przeniesienie informacji z arkuszy pomocniczych na arkusz spisowy
::   WE: [_a] - 1 czy pytac 0 -domyslnie 2-pytać przy usunięciu
::       [_b] - 1 - komunikaty do KOMM-a 0 -(domyslnie) nie
::   WY: 1-zrobiono 0-rezygnacja
::  OLD: \inn_innx/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
_kom:={? var_pres('_b')=type_of(0) || _b || 0 ?};

_wyn:=0;
_del:=(_a=2);
{? _a=2 || _a:=1 ?};

:: tabelka sprawdzajaca ktore indeksy zostaly juz dodane by mogly byc update-y
VAR_DEL.delete('__iny_up','__newdce','__inydst');
__iny_up:=tab_tmp(3,'REFM','STRING[16]','','SCEAN','STRING[128]','','DKC','STRING[16]','');
__inydst:=tab_tmp(1,'PAL','STRING[16]','','ILP','REAL','');
__newdce:=tab_tmp(2,'M','STRING[16]',''
           ,'SCEAN','STRING[128]',''
           ,'DAT','DATE',''
           ,'CEN','REAL',''
           ,'DKC','STRING[16]','');

_czy_id:=(1+INN.MG().TYP)='D' & INN.MG().SL='T';

INX.cntx_psh();
INX.index('INN');
INX.prefix(INN.ref());
{? INX.first() | _del
||
:: dodatkowa kontola kodow identyfiakcyjnych
   _ctrl:=1;
   {? ~_del & _czy_id || {! |? _ctrl:=exec('ctrl_sce','magazyn_inw',1,_kom); _ctrl & INX.next() !} ?};
:: zaznaczonych kilka pozycji
   BEER.INPSUM:=1;
   BEER.win_edit('INX');
   {? _ctrl & (INX.first() | _del)
    & (_del | FUN.ask('Czy aktualizować dane z arkuszy pomocniczych z arkuszem spisowym?\n\n'
                      'Uwaga. Z arkuszy pomocniczych przenoszone są tylko ilości większe od zera.'@))
    & BEER.edit()
   ||
::    jesli inwentaryzacja ciagla to usuwa arkusz
      exec('zero_inp','magazyn_inw',INN.ref(),~(INN.TYP='C'));

      INX.cntx_psh();
      {? INN.TYP='C'
      || INP.index('INP');
         INP.prefix(INN.ref);
         {? INP.first()
         || {!
            |? _noiny:=exec('FindInSet','#table','INY','INN',INP.M,INN.ref())=null();
               {? INP.SCSQL<>'' | _noiny | (INP.SCSQL='' & INP.DK_C<>null())
               || exec('usu_inpd','magazyn_inw',INP.ref);
                  INP.del()
               || INP.next()
               ?}
            !}
         ?}
      ?};
      INX.cntx_pop();

      _wyn:=1;
      _size:=INX.size();
      {? ~_size || _size:=1 ?};
      _licz:=0;
      _time:=time();
      _max:=exec('FindInSet','#table','INY','INN',INN.ref(),,"@.INY.size()",0);
      _akt:=0;
      {? (1+INN.MG().TYP)<>'D'
      || {!
         |? _licz+=1;
            _head:='Arkusz pomocniczy (%1 z %2)'@[$_licz,$_size];
            _akt+=exec('one_innx','magazyn_inw',INX.ref(),_head,_max,_akt);
            INX.next()
         !}
      ||
::       w magazynie typu dostawy dwa przebiegi 1-wg atrybutów 2-bez atrybutów
         _size*=2;
         {!
         |? _licz+=1;
            _head:='Arkusz pomocniczy - pozycje z atrybutami (%1 z %2)'@[$_licz,$_size];
            _akt+=exec('one_innx','magazyn_inw',INX.ref(),_head,_max,_akt,1);
            INX.next()
         !};
         {? INX.first()
         || {!
            |? _licz+=1;
               _head:='Arkusz pomocniczy - pozycje bez atrybutów (%1 z %2)'@[$_licz,$_size];
               _akt+=exec('one_innx','magazyn_inw',INX.ref(),_head,_max,_akt,0);
               INX.next()
            !}
         ?}
      ?};
      exec('pop_dcen','magazyn_inw',INN.ref())
   |? ~_ctrl
   || {? ~_kom
      || FUN.info('Nie uzupełniono kodów identyfikujących dostawy.\nUżyj funkcji \"Kontrola identyfikacji\".\n\n'
                  'Niemożliwe przeniesienie danych z arkuszy pomocniczych na arkusz inwentaryzacyjny.'@)
      ?}
   ?};
   echo();
   prgs_clr()
|? FUN.ask('Czy usunąć dane z arkuszy pomocniczych z arkusza spisowego?'@)
|| {? INN.TYP<>'C' || exec('zero_inp','magazyn_inw',INN.ref()) ?};
   exec('pop_dcen','magazyn_inw',INN.ref())
?};
INX.cntx_pop();
VAR_DEL.delete('__iny_up','__newdce','__inydst');
exec('plus_min','magazyn_inw');
_wyn


\ctrl_sce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: kontroluję czy wszystkie kody identyfikacyjne wg atrybutów dostawy mają podpięty zestaw-cechę i daję możliwość
::       ich uzupełnienia
::   WE: [_a] - 1-tylko kontrola 0(domyslnie)-kontrola i przypisanie
::       [_b] - 1 - komunikaty do KOMM-a 0 -(domyslnie) nie
::   WY: 1-jest ok 0-nie
::  OLD: \ctrl_sce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
_kom:={? var_pres('_b')=type_of(0) || _b || 0 ?};

_wyn:=1;

VAR_DEL.delete('__inysce');
__inysce:=tab_tmp(3,'KOD','STRING[30]','Kod identyfikacyjny'@
           ,'KTM','STRING[50]','Indeks'@
           ,'SQL','STRING[16]','ref indeksu'@
           ,'DKC','STRING[16]','wskazanie na cechę'@
           ,'LOK','STRING[30]','Lokalizacja'@
           ,'TW','DATE','Termin ważności'@
           ,'ILE','REAL','Ilość na arkuszu'@
           ,'MQL','STRING[16]','ref SQL M'@
           ,'TYP','STRING[1]','Typ identyfikacji'@);

_win_sel:=__inysce.mk_sel('Kody identyfikacyjne bez cechy dostawy'@,'P',,'#inx_wgsce',,,,,'U');

__inysce.win_fld(_win_sel,,'TYP',,,3,,1,'Typ'@);
__inysce.win_fld(_win_sel,,'KOD',,,20,,1,'Kod identyfikacyjny'@);
__inysce.win_fld(_win_sel,,'KTM',,,20,,1,'Indeks materiałowy'@);
__inysce.win_fld(_win_sel,,'LOK',,,20,,1,'Lokalizacja'@);
__inysce.win_fld(_win_sel,,'TW',,,10,,1,'Termin ważności'@);
__inysce.win_fld(_win_sel,,'ILE',,,10,3,1,'Ilość'@);

__inysce.win_act(_win_sel,0,'Formuła','Powiąż identyfikator'@@,,,
  "__inysce.get();{? __inysce.TYP='A' || exec('inwident','magazyn_inw') || exec('inwidost','magazyn_inw')
 ?}",,1);
__inysce.win_act(_win_sel,0,'Szukaj');
__inysce.win_act(_win_sel,0,'Kolejność');
__inysce.win_fml(_win_sel,,'TYP',,'ICON_BEFORE',"
                {? __inysce.TYP='D' || __inysce.TYP:=''; 'xwin16.png:162'
                |? __inysce.TYP='A' || __inysce.TYP:=''; 'xwin16.png:50'
                || ''
                ?}");
__inysce.win_sel(_win_sel);

INX.cntx_psh();
INY.cntx_psh();
MKODK.cntx_psh();
:: wypelnienie tabeli nieprzypisanych kodow identyfikacyjnych
INY.index('INN');
INY.prefix(INN.ref());
{? INY.first() & (1+INN.MG().TYP)='D' & INN.MG().PAL='N'
|| {!
   |? {? {? INY.M<>null & INY.M().IDMOB='A' & INY.SCEAN<>''
         || (MKODK.clear();
             MKODK.index('BEZ');
             MKODK.prefix(INY.M,INY.SCEAN,);
             ~(MKODK.first() & (5+MKODK.RSQL)='dokce'))
         |? INY.M<>null & (';DA'*INY.M().IDMOB)>1 & INY.SCEAN=''
         || 1
         || 0
         ?}
      || __inysce.clear();
         __inysce.blank();
         __inysce.KOD:=INY.SCEAN;
         __inysce.SQL:=$INY.ref();
         __inysce.KTM:=INY.M().KTM;
         __inysce.LOK:=INY.EANL().KOD;
         __inysce.DKC:='';
         __inysce.TW:=INY.TW;
         __inysce.ILE:=INY.IL;
         __inysce.MQL:=$INY.M;
         __inysce.TYP:=INY.M().IDMOB;
         __inysce.add(1)
      |? INY.M().IDMOB='D' & INY.SCEAN<>''
      || _tw:=INY.TW;
         SC.cntx_psh();
         SC.index('SA');
         SC.prefix(INN.MG,INY.M);
         {? SC.first()
         || {!
            |? {? INY.SCEAN=SC.SCEAN & INY.M().SETW='D'
               || _tw:=SC.TW;
                  0
               || SC.next()
               ?}
            !}
         ?};
         SC.cntx_pop();
         INY.TW:=_tw;
         exec('uzupIDkod','magdok_palety',INY);
         INY.put(1)
      ?};
      INY.next()
   !}
?};

__inysce.clear();
{? __inysce.first()
|| {? _a || _wyn:=0 || __inysce.select() ?};
   {? _kom
   || {!
      |? __kom_gr:='Arkusze pomocnicze brak kodów identyfikujących dostawy (inwentryzacja: %1).'@[INN.SYM];
         _txt:='%1 (ID: %2): Lokalizacja: %3, Termin: %4, '
               'Ilość: %5.'@[__inysce.KTM,{? __inysce.KOD='' || 'brak' || __inysce.KOD ?}
                            ,__inysce.LOK,$__inysce.TW,$__inysce.ILE];
         exec('add_kom','#message',_txt,17);
         __inysce.next()
      !}
   ?}
|| {? ~_a || FUN.info('Brak niepowiązanych kodów identyfikujących dostawy.'@) ?}
?};

INX.cntx_pop();
INY.cntx_pop();
MKODK.cntx_pop();
VAR_DEL.delete('__inysce');
_wyn


\inwident
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: powiazanie identyfikatora z cecha
::  OLD: \inwident/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
_atrmjs:=ATR.MJS;
ATR.MJS:='INY';
INY.clear();
INY.seek(__inysce.SQL);
_matr:=exec('FindAndGet','#table',M,__inysce.MQL,,"M_ATR",null());
_mat:=exec('FindAndGet','#table',M,__inysce.MQL,,,null());
{? _matr<>null
|| DK_C.index('M_ATR');
   DK_C.prefix(_matr);

   ATR.SCEAN:=__inysce.KOD;
   _kod:=__inysce.KOD;
   exec('dk_atr_dict','mat_atr',-2);
   {? DK_C.select()
   || _scean:=exec('zwrdkc_m','material',$DK_C.ref(),_mat);
      {? _scean='' || _scean:=exec('mkodkKODK','kody_kresk',_mat) ?};
      {? ~exec('czydkc_m','material',$DK_C.ref(),_mat) & ~(DK_C.UZUP*'0')
      || exec('mkodkadd','kody_kresk',_mat,_scean,$DK_C.ref())
      ?};
      __inysce.cntx_psh();
      {? _kod=''
      || {? _scean<>'' || INY.SCEAN:=_scean; INY.put(1) ?};
         __inysce.del()
      || __inysce.clear();
         __inysce.prefix(_kod,);
         {? __inysce.first()
         || {!
            |? {? _scean<>'' & (INY.clear(); INY.seek(__inysce.SQL))
               || INY.SCEAN:=_scean; INY.put(1)
               ?};
               __inysce.del()
            !}
         ?}
      ?};
      __inysce.cntx_pop()
   ?}
?};
ATR.SCEAN:='';
ATR.MJS:=_atrmjs;
~~


\inwidost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: powiazanie identyfikatora z dostawa
::  OLD: \inwidost/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
INY.clear();
{? INY.seek(__inysce.SQL)
|| INY.SCEAN:=exec('addscean','kody_kresk',1);
   {? INY.SCEAN<>''
   || INY.put(1);
      __inysce.del()
   ?}
?};
~~


\zero_inp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: zerowanie informacji na INP
::   WE: _a - ref INN
::       [_b] - 0-bez usuwania 1(domyślnie) z
::  OLD: \zero_inp/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>1 || _b:=1 ?} || _b:=1 ?};

INP.cntx_psh();
INP.index('INP');
INP.prefix(INN.ref());
{? INP.first()
|| _ewidel:=((1+ST.MAG().TYP)='E'  & INN.TYP='C')
          | (INN.TYP='A' & INN.ARKPOM);
   {!
   |? {? INP.M().SETW='P' & INP.C=0 & INP.SCSQL=''
      || {? INP.D=date(0,0,0)
         || INP.del()
         || INP.SS:=0;
            INP.put(1);
            INP.next()
         ?}
      |? INP.SCSQL='' | ((1+ST.MAG().TYP)='E' & (8+INP.SCSQL)='material')
      || _uzup:=1;
         {? exec('FindInSet','#table','INY','INN',INP.M,INN.ref())
         || __newdce.blank();
            __newdce.M:=$INP.M;
            __newdce.DAT:=INP.D;
            __newdce.CEN:=INP.C;
            __newdce.DKC:=$INP.DK_C;
            __newdce.SCEAN:={? INP.SCEAN='' || 'xxx' || INP.SCEAN ?};
            __newdce.add(1);
            {? INP.D=date(0,0,0) & INP.C=0 & $INP.DK_C='' & (1+ST.MAG().TYP='D') || _uzup:=0 ?}
         ?};
         {? (_b & _ewidel) | ~_uzup
         || INP.del()
         || INP.SS:=0;
            INP.put(1);
            INP.next()
         ?}
      || {? INP.SCSQL=''
         || INP.del()
         || INP.SS:=0;
            INP.put(1);
            INP.next()
         ?}
      ?}
   !}
?};
INP.cntx_pop()


\one_innx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: przeniesienie informacji z jednego arkusza pomocniczego
::   WE: _a - INX.ref()
::       [_b] - opis dla progresu
::       [_c] - maksymalna liczba rekordów dla progresu
::       [_d] - aktualna liczba rekordów dla progresu
::       [_e] - 1-przebieg z cechami 0-bez cech
::   WY: liczba przetworzonych rekordów
::  OLD: \one_innx/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_head:={? var_pres('_b')=type_of('') || _b || '' ?};
_onlydkc:={? var_pres('_e')=type_of(0) || _e || 2 ?};
_res:=0;

INY.index('INX');
INY.prefix(_a);
{? INY.first()
|| _res:=0;
   _size:={? var_pres('_c')=type_of(0) || _c || INY.size() ?};
   {? ~_size || _size:=1 ?};
   _licz:={? var_pres('_d')=type_of(0) || _d || 0 ?};
   _time:=time();
   _nopal:=INY.INX().INN().MG().PAL<>'T';
   _czydst:=(1+INY.INX().INN().MG().TYP)='D' & ~_nopal;
   {!
   |? {? {? _nopal || INY.IL>0 || INY.IL>=0 ?} & (_onlydkc=2 | {? _onlydkc=1 || INY.DK_C<>null() || INY.DK_C=null() ?})
      || _res+=1;
         _licz+=1;
         progress(_licz/_size*100,'Przeniesienie pozycji arkuszy spisowych'@,_head);
         _dost:={? _czydst
                || exec('zwrrdost','magazyn_inw',INY.PAL,INY.M,INY.IL,INY.TW)
                || ''
                ?};
         _scean:={? INY.SCEAN<>'' || INY.SCEAN || 'xxx' ?};
         _dkc:={? INY.DK_C<>null() || $INY.DK_C || 'xxx' ?};
         _wgtw:=_nopal & INY.M().SETW='P';
         _tw:=INY.TW;
         {? ~_czydst | _dost=''
         || __iny_up.clear();
            {? {? _onlydkc=1 || __iny_up.find_key($INY.M,_scean,_dkc) || __iny_up.find_key($INY.M,_scean) ?}
            || _ws2:=exec('oblWSP','jm',INY.M);
               _il2:={? INY.M().J2<>null() & _ws2>0 || INY.IL/_ws2 || 0 ?};
               exec('inw_stan','magazyn_inw',1,INY.M().KTM,INY.IL,$INY.ref(),1,_dost,INY.SCEAN,INY.TW,INY.DK_C,_il2);
               INY.INP:='add';
               exec('uzupIDkod','magdok_palety',INY);
               INY.put(1)
            || {? INY.INX().INN().TYP='C' | INY.SCEAN<>'' | INY.DK_C<>null()
               || exec('add_onei','magazyn_inw',INY.INX().INN,INY.INX().INN().MG
                   ,INY.INX().INN().DI,INY.M,,,_dost,INY.SCEAN,INY.TW,INY.INX().INN().DI,INY.DK_C,$INY.ref())
               ?};
               __iny_up.blank();
               __iny_up.REFM:=$INY.M;
               __iny_up.SCEAN:=_scean;
               __iny_up.DKC:=_dkc;
               __iny_up.add();
               _ws2:=exec('oblWSP','jm',INY.M);
               _il2:={? INY.M().J2<>null() & _ws2>0 || INY.IL/_ws2 || 0 ?};
               exec('inw_stan','magazyn_inw',1,INY.M().KTM,INY.IL,$INY.ref(),0,_dost,INY.SCEAN,INY.TW,INY.DK_C,_il2);
               INY.INP:='add';
               exec('uzupIDkod','magdok_palety',INY);
               INY.put(1)
            ?}
         || __iny_up.clear();
            {? ~__iny_up.find_key($INY.M)
            || __iny_up.blank();
               __iny_up.REFM:=$INY.M;
               __iny_up.SCEAN:=_scean;
               __iny_up.DKC:=_dkc;
               __iny_up.add()
            ?};
            _ws2:=exec('oblWSP','jm',INY.M);
            _il2:={? INY.M().J2<>null() & _ws2>0 || INY.IL/_ws2 || 0 ?};
            exec('add_oned','magazyn_inw',INY.INX().INN,INY.INX().INN().MG
                                         ,INY.INX().INN().DI,INY.M,INY.IL,_dost,INY.SCEAN,_il2);
            INY.INP:='add';
            exec('uzupIDkod','magdok_palety',INY);
            INY.put(1)
         ?}
      ?};
      INY.next()
   !};
   INX.DAKT:=date();
   INX.TAKT:=time();
   INX.put()
?};
_res


\zwrrdost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: szuka refu dostawy wg pozycji palety
::   WE: _a - ref palety
::       _b - ref materialu
::       _c - ilosc
::       _d - termin ważności
::   WY: ref w postaci SQL lub pusty napis ''
::  OLD: \zwrrdost/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_wgtw:=exec('FindAndGet','#table',M,_b,,"SETW='P'",0);
_tw:=_d;
PAL.cntx_psh();
PAL_POZ.cntx_psh();
PAL.clear();
{? PAL.seek(_a)
|| {? PAL.AKT='N'
   || PAL_POZ.use('palet'+form(PAL.AR-2000,-2,0,'99'))
   || PAL_POZ.use('paletyp')
   ?};
   _lastref:=null();
   PAL_POZ.index('PAL');
   PAL_POZ.prefix(PAL.ref());
   {? PAL_POZ.first()
   || {!
      |? {? PAL_POZ.M=_b & PAL_POZ.ILP>0 & (~_wgtw | _tw=PAL_POZ.TW)
         || __inydst.clear();
            {? __inydst.find_key($PAL_POZ.ref())
            || {? PAL_POZ.ILP>=(__inydst.ILP+_c)
               || __inydst.ILP+=_c;
                  __inydst.put(1);
                  _wyn:=PAL_POZ.SCSQL;
                  0
               || _lastref:=PAL_POZ.ref();
                  PAL_POZ.next()
               ?}
            |? PAL_POZ.ILP>=_c
            || __inydst.blank();
               __inydst.PAL:=$PAL_POZ.ref();
               __inydst.ILP:=_c;
               __inydst.add(1);
               _wyn:=PAL_POZ.SCSQL;
               0
            || _lastref:=PAL_POZ.ref();
               PAL_POZ.next()
            ?}
         || PAL_POZ.next()
         ?}
      !};
      {? _wyn='' & _lastref<>null() & (PAL_POZ.clear(); PAL_POZ.seek(_lastref))
      || __inydst.clear();
         {? __inydst.find_key($PAL_POZ.ref())
         || __inydst.ILP+=_c;
            __inydst.put(1)
         || __inydst.blank();
            __inydst.PAL:=$PAL_POZ.ref();
            __inydst.ILP:=_c;
            __inydst.add(1);
            _wyn:=PAL_POZ.SCSQL
         ?};
         _wyn:=PAL_POZ.SCSQL
      ?}
   ?}
?};
PAL.cntx_pop();
PAL_POZ.cntx_pop();
_wyn


\inw_stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: wpisywanie stanu inwentaryzacji
::   WE: [_a] - czy automatycznie - domyslnie 0-nie 1-tak
::       [_b] - KTM indeksu materialowego
::       [_c] - ilosc do rozpisania
::       [_d] - ref SQL-owy INY
::       [_e] - update
::       [_f] - ref dostawy
::       [_g] - SCEAN
::       [_h] - termin ważności
::       [_i] - cecha dostawy
::       [_j] - ilosc do rozpisania druga jednostka
::  OLD: \inw_stan/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
{? _>=2 || {? type_of(_b)<>2 || _b:='' ?} || _b:='' ?};
{? _>=3 || {? type_of(_c)<>1 || _c:=0 ?} || _c:=0 ?};
{? _>=4 || {? type_of(_d)<>2 || _d:='' ?} || _d:='' ?};
{? _>=5 || {? type_of(_e)<>1 || _e:=0 ?} || _e:=0 ?};
{? _>=6 || {? type_of(_f)<>2 || _f:='' ?} || _f:='' ?};
{? _>=7 || {? type_of(_g)<>2 || _g:='' ?} || _g:='' ?};
_tw:={? var_pres('_h')=type_of(date()) || _h || _h:=date(0,0,0) ?};
_rdk_c:={? var_pres('_i')=type_of(null()) || _i || null() ?};
_se2:={? var_pres('_j')=type_of(0) || _j || 0 ?};

_wgtw:=exec('FindInSet','#table','M','MATKTM',_b,_b,"M.SETW='P'",,,0);
_inpndx:='INP'+{? _wgtw || 'TW' || '' ?}+{? _g='' || '' || '2' ?};

{? INN.r_lock(1,1,1)
|| INN.r_unlock()
|| FUN.info('Inwentaryzacja zablokowana przez innego użytkownika.'@);
   return(0)
?};

{? _a | INP.r_lock(1,1)
|| _error:=0;
   {? ~_a
   || BEER.RI:=0;
      INP.win_edit({? INP.SCSQL=''
                   || BEER.INPSUM:=0;
                      'RED2'
                   |? (1+ST.MAG().TYP)='E'
                   || BEER.INPSUM:=0;
                      'RED3'
                   || 'RED1'
                   ?})
   || BEER.SE:=_c;
      BEER.SE2:=_se2
   ?};
   {? ~_a
   || ATR.MJS:='INP';
      ATR.M_ATR:=INP.M().M_ATR;
      INP.M().M_ATR().SYM;
      _dkc:={? INP.DK_C<>null() & INP.SCSQL<>''
            || exec('FindAndGet','#table','SC',INP.SCSQL,,"DK_C",null())=null()
            || INP.DK_C=null()
            ?};
      {? (1+INP.IN().MG().TYP)<>'D'
       | {? INP.SCSQL<>'' || ~_dkc | {? ~BEER.INPSUM || INP.SS<=INP.SE || BEER.SE<=BEER.SS ?} || 0 ?}
      || ATR.FLAG_ED:=0;
         ATR.FLAG:=0
      || ATR.FLAG_ED:=(1+INP.IN().MG().TYP)='D' & ATR.CZY_ATR & ATR.M_ATR().EDIT;
         ATR.FLAG:={? ATR.FLAG_ED & INP.M().M_ATR<>null() || 2 || 0 ?}
      ?};
      {? ATR.FLAG_ED || {? INP.M().M_ATR().EDIT || ATR.FLAG_ED:=2 ?} ?};
      {? INP.DK_C<>null() & INP.DK_C().M_ATR<>null()
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('INP.DK_C().WAR'+form(_i,-2,,'99')))() !}
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
      ?}
   ?};
   exec('set_efld_opt_poz','magazyn_inw');
   exec('set_efld_m','magazyn_inw');
   {? _a | INP.edit("exec('spr_new','magazyn_inw')")
   || {? ~_a & ~BEER.INPSUM
      ||
::       stan wg danej dostawy
         INP.AKC:='T';
         INP.put(1)
      ||
::       stan wg sumy
         _ref:=INP.ref;
         _ils:=BEER.SE;
         _ils2:=BEER.SE2;
         _ktm:={? _a || _b || INP.M().KTM ?};
         _last:=null;
         _nag:={? _a || INN.ref() || INP.IN ?};
         _ust:=0;
         _dk_c:={? _a || null() || INP.DK_C ?};

         INP.cntx_psh;
         {? _f<>''
         || INP.index(_inpndx);
            {? ~_wgtw || INP.prefix(_nag,_ktm,_ktm) || INP.prefix(_nag,_ktm,_ktm,_tw) ?};
            {? INP.first()
            || {! |? {? INP.SCNDK=form(8+_f) & INP.SCRDK=BB.sqlint(_f) || _ust:=1; 0 || INP.next() ?} !}
            ?}
         ?};
         {? ~_ust
         || INP.index(_inpndx);
            {? _g=''
            || {? ~_wgtw || INP.prefix(_nag,_ktm,_ktm) || INP.prefix(_nag,_ktm,_ktm,_tw) ?}
            || {? ~_wgtw || INP.prefix(_nag,_ktm,_ktm,_g,) || INP.prefix(_nag,_ktm,_ktm,_tw,_g,) ?}
            ?};
            _ust:={? ~(BEER.RI%*2) || INP.first() || INP.last() ?}
         ?};
         {? _ust
         || _cena:=0;
            _data:=date(0,0,0);
            _cecha:=null;
            {!
            |? {? INP.SCSQL='' & INP.DK_C<>null() & INP.DK_C=_rdk_c
               || _dk_c:=_rdk_c;
                  _last:=INP.ref()
               |? (_rdk_c=null() | INP.DK_C=_rdk_c) & ~(INP.SCSQL='' & INP.DK_C<>null() & INP.INY<>'')
               || {? INP.r_lock(1,1)
                  || _il_se:={? ~_e || INP.SE || {? INP.SE-INP.SS>0 || INP.SE-INP.SS || 0 ?} ?};
                     _il_se2:={? ~_e || INP.SE2 || {? INP.SE2-INP.SS2>0 || INP.SE2-INP.SS2 || 0 ?} ?};
                     {? _last=null & BEER.RI>1 & BEER.RI<4 & INP.ref<>_ref
                     || INP.SS:=0
                     |? _il_se<=_ils
                     || INP.SS:={? ~_e || _il_se || INP.SS+_il_se ?};
                        INP.SS2:={? ~_e || _il_se2 || INP.SS2+_il_se2 ?};
                        _last:=INP.ref;
                        _ils-=_il_se;
                        _ils2-=_il_se2
                     || INP.SS:={? ~_e || _ils || INP.SS+_ils ?};
                        INP.SS2:={? ~_e || _ils2 || INP.SS2+_ils2 ?};
                        _last:=INP.ref;
                        _ils:=0;
                        _ils2:=0
                     ?};
                     INP.WS2:={? INP.SS2>0 & INP.SS>0 || INP.SS/INP.SS2
                              |? INP.SE2>0 & INP.SE>0 || INP.SE/INP.SE2
                              |? INP.J2<>null() & (INP.SS2=0 | INP.SE2=0) || exec('oblWSP','jm',INP.M)
                              || 0
                              ?};
                     INP.AKC:='T';
                     INP.INY:=_d;
                     INP.put(1);
                     INP.r_unlock
                  || _error+=1
                  ?}
               ?};
               {? ~(BEER.RI%*2)
               || {? INP.SCSQL='' & INP.SS=0 & INP.INY=''
                  || _cena:=INP.C;
                     _data:=INP.D;
                     _cecha:=INP.DK_C;
                     INP.del()
                  || INP.next()
                  ?}
               || {? INP.SCSQL='' & INP.SS=0 & INP.INY=''
                  || _cena:=INP.C;
                     _data:=INP.D;
                     _cecha:=INP.DK_C;
                     INP.del()
                  ?};
                  INP.prev
               ?}
            !};
            {? _ils>0
            || {? BEER.RI<4 & (INP.clear; INP.seek(_last)) & INP.r_lock(1,1)
               || INP.SS+=_ils;
                  INP.SS2+=_ils2;
                  {? ~_a || INP.DK_C:=_dk_c ?};
                  _ils:=0;
                  _ils2:=0;
                  INP.WS2:={? INP.SS2>0 & INP.SS>0 || INP.SS/INP.SS2
                           |? INP.SE2>0 & INP.SE>0 || INP.SE/INP.SE2
                           |? INP.J2<>null() & (INP.SS2=0 | INP.SE2=0) || exec('oblWSP','jm',INP.M)
                           || 0
                           ?};
                  INP.AKC:='T';
                  INP.put(1);
                  INP.r_unlock
               ||
::                dolaczenie nowej pozycji
                  _inp:=exec('add_one','magazyn_inw',_nag,exec('FindInSet','#table','M','MATKTM',_ktm,_ktm),
                   {? _f<>'' || exec('FindAndGet','#table','SC',_f,,,null()) || null ?}
                   ,0,0,_ils,1,_g,_tw,_rdk_c,_d,0,_ils2);
                  {? _inp<>null
                  || INP.cntx_psh();
                     {? INP.seek(_inp)
                     || INP.D:=_data;
                        {? ~_a || INP.DK_C:=_dk_c ?};
                        INP.C:=_cena;
                        INP.WS2:={? INP.SS2>0 & INP.SS>0 || INP.SS/INP.SS2
                                 |? INP.SE2>0 & INP.SE>0 || INP.SE/INP.SE2
                                 |? INP.J2<>null() & (INP.SS2=0 | INP.SE2=0) || exec('oblWSP','jm',INP.M)
                                 || 0
                                 ?};
                        INP.put(1)
                     ?};
                     INP.cntx_pop()
                  ?}
               ?}
            ?};
            {? ~_a & _error
            || FUN.info('Z powodu edycji niektórych pozycji arkusza przez innych\n'
                'użytkowników pominięto pozycje blokowane przez nich.\n'
                'Liczba zablokowanych pozycji: %1.'@[form(_error)]+
                {? _ils
                || '\n\nPonieważ dostawa, do której należało dopisać różnicę\n'
                   'jest zablokowana prze innego użytkownika\n'
                   'nie rozpisano różnicy: %1.'@[+form(_ils)]
                || ''
                ?})
            ?}
         |? _a & _c>=0
         || _ils:=BEER.SE;
            _ils2:=BEER.SE2;
            _ktm:=_b;
            _nag:=INN.ref();
            {? _ils>=0
            ||
::             dolaczenie nowej pozycji
               exec('add_one','magazyn_inw',_nag,exec('FindInSet','#table','M','MATKTM',_ktm,_ktm),
                {? _f<>'' || exec('FindAndGet','#table','SC',_f,,,null()) || null ?}
                ,0,0,_ils,1,_g,_tw,_rdk_c,_d,0,_ils2)
            ?}
         ?};
         INP.cntx_pop
      ?}
   ?};
   {? ~_a || INP.r_unlock() ?}
|? ~_a
|| FUN.info('Pozycja zablokowana przez innego użytkownika.'@)
?};
:: ponowne ustawienie okienka edycyjnego
INP.win_edit('RED2');
1


\spr_new
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza wypelnienie pol dla nowej dostawy
::   WY: '' lub akronim niewypelnionego pola
::  OLD: \spr_new/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_only:=INN.MG().IL='T';
{? INP.M=null || FUN.info('Podaj indeks materiałowy.'@); _wyn:='M'
|? ~_only & INP.C=0 & {? ((1+ST.MAG().TYP)='E') || INP.SCSQL='' || INP.SCSQL='' ?}
|| FUN.info('Podaj cenę dostawy.'@); _wyn:='C'
|? ~_only
 & (INP.C<0 |
    (INP.C=0 &
     (INP.SCSQL='' | (8+INP.SCSQL)='material') &
     {? ST.MAG().TYP*'EWI'
     || ~INP.SE & ~exec('sprewidost','magazyn_inw',INP.M,INP.IN().MG,INP.IN().DI,INP.IN)
     || 1
     ?}
    )
   )
|| FUN.info('Należy podać cenę większą od zera.'@); _wyn:='C'
|? ~exec('itsPositive','#field',INP.SCSQL='',,INP.SS)
|| _wyn:='SS'
|? INP.M<>null & INN.MG().TYP*'DOST' & (INP.SCSQL='' | {? ~BEER.INPSUM || INP.SS>INP.SE || BEER.SE>BEER.SS ?})
 & INP.M().M_ATR<>null & INP.DK_C=null() & {? INP.M().IDMOB='A' || ~INN.ARKPOM | INP.SCEAN='' || 1 ?}
|| FUN.info('Dla indeksu: %1\njest wymagana cecha dostawy.'@[INP.M().KTM]);
   {? ~INP.M().M_ATR().EDIT
   || _wyn:='DK_C'
   || _wyn:=exec('uzup_fld','mat_atr');
      {? _wyn='M' & ~exec('pr_wycm','magazyn_inw')
      || FUN.info('Indeks dodany za pomocą arkusza.\nWartości należy poprawić w pozycjach arkusza pomocniczego.'@);
         _wyn:=0
      ?}
   ?}
|? {? ~((1+ST.MAG().TYP)='E') & INP.SC=null
   || {? INP.D>INN.DI
      || FUN.info('Nieprawidłowa data dostawy.\n'
          'Data powinna być mniejsza lub równa od daty rozpoczęcia inwentaryzacji.'@);
         INP.D:=INP.IN().DI;
         1
      || ~exec('spr_datd','magazyn_inw',INP.IN().MG,INP.M,INP.D)
      ?}
   || 0
   ?}
|| _wyn:='D'
|| 1
?};
_wyn


\pr_inpdc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: mozliwosc poprawiania daty, ceny inwentaryzacji
::   WY: 1 - mozna dla nowych rekordow 0 - nie mozna dla rekordow z dostawa
::  OLD: \pr_inpdc/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=(INP.SCSQL='' | (8+INP.SCSQL)='material')
      & {? {? cur_afld()='D' || (1+ST.MAG().TYP)='E' || ST.MAG().TYP*'EWI' ?}
        || ~INP.SE & ~exec('sprewidost','magazyn_inw',INP.M,INP.IN().MG,INP.IN().DI,INP.IN)
        || 1
        ?};
{? _res & INP.name<>'inw_pwyc' & ~INP.C
|| {? Plugin.exists('INW_CEN_001')
   || _buf:=Plugin.run('INW_CEN_001',INP.M().uidref());
      {? _buf>0 || INP.C:=_buf ?}
   ?};
   {? ~INP.C
   || _wyc:=exec('get','#params',600051,2);
      {? _wyc<>'' || exec('pop0cen','magazyn_inw',_wyc,0) ?}
   ?};
   {? ~INP.C || INP.C:=exec('biez_cen','ceny_dok',INP.M,INN.MG,INN.DI,,INN.TI) ?}
|? ~INP.C
|| INP.C:=exec('biez_cen','ceny_dok',INP.M,INN.MG,INN.DI,,INN.TI)
?};
_res


\spr_datd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza prawidlowosc wprowadzenia daty dostawy
::   WE: _a - magazyn ref
::       _b - indeks materialowy ref
::       _c - data
::   WY: 1-jest OK 0-nie fajnie jest
::  OLD: \spr_datd/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? _c<>date(0,0,0)
|| BEER.MG:=_a;
   _typ:=(1+BEER.MG().TYP);
   {? 'DŚFL'*_typ
   || _wyn:=1
   || SC.cntx_psh;
      SC.index('SC');
      SC.prefix(_a,_b);
      _buf:=_c;
      _wyn:={? _typ='L' || {? SC.first || _buf:=SC.D; SC.D>=_c || 1 ?} || {? SC.last || _buf:=SC.D; SC.D<=_c || 1 ?} ?};
      SC.cntx_pop;
      {? ~_wyn
      || FUN.info({? _typ='L' || 'Nieprawidłowa data dostawy.\nData powinna być mniejsza'@
                              || 'Nieprawidłowa data dostawy.\nData powinna być większa'@ ?}+
          ' lub równa od daty: '+form(_buf))
      ?}
   ?}
|| {? ~((1+ST.MAG().TYP)='E') || FUN.info('Należy podać niezerową datę dostawy.'@) ?}
?};
_wyn


\add_oned
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: dodaje jedna pozycje do arkusza (analizuje stan magazynowy)
::   WE: _a - ref naglowka inwentury
::       _b - magazyn
::       _c - data rozpoczecia inwentaryzacji
::       _d - indeks materialowy
::       _e - ilosc wg ewidencji
::       _f - ref SQL-owy dostawy
::       [_g] - ilosc wg ewidencji druga jednostka
::   WY: 1-dolaczono 0-nie dolaczono
::  OLD: \add_oned/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_se2:={? var_pres('_g')=type_of(0) || _g || 0 ?};
:: sprawdzamy czy nie ma otwartej inwentaryzacji ciaglej dla danego indeksu materialowego
{? _f<>'' & exec('sprm_nac','magazyn_inw',_b,_d,_a)
||
:: trzeba przejsc po wszystkich SC
:: zerowanie poprzednich stanow z ewidencji
   _ndk:=form(8+_f);
   _rdk:=BB.sqlint(_f);
   _msk:=_ndk+3;
   SC.cntx_psh();
   SC.use('stc__'+_msk);
   SC.index('SC');
   SC.prefix(_b,_d);
   {? SC.first
   || {!
      |? {? SC.NDK=_ndk & SC.RDK=_rdk & SC.D<=_c
         || exec('sc_info','magazyn_stan');
            _inp:=exec('add_one','magazyn_inw',_a,_d,SC.ref,0,BO.CEN);
            _buf:=exec('obl_se','magazyn_inw',SC.MAG,SC.M,SC.RDK,SC.NDK,_c,_inp);
            _ild:=_buf[1]; _ild2:=_buf[2];
            obj_del(_buf);
            exec('add_one','magazyn_inw',_a,_d,SC.ref,_ild,BO.CEN,_e,,,,,,_ild2,_se2);
            _wyn:=1;
            0
         || SC.next()
         ?}
      !}
   ?};
   {? _wyn=0 & exec('FindAndGet','#table','MG',$_b,,"MG.PAL",'')='T'
   || SC.use('stc__'+_msk);
      SC.index('SRN');
      SC.prefix(_rdk,_ndk);
      {? SC.last() & SC.D<=_c
      || exec('sc_info','magazyn_stan');
         _inp:=exec('add_one','magazyn_inw',_a,_d,SC.ref,0,BO.CEN);
         {? SC.MAG=_b
         || _buf:=exec('obl_se','magazyn_inw',SC.MAG,SC.M,SC.RDK,SC.NDK,_c,_inp);
            _ild:=_buf[1]; _ild2:=_buf[2];
            obj_del(_buf)
         || _ild:=0;
            _ild2:=0
         ?};
         exec('add_one','magazyn_inw',_a,_d,SC.ref,_ild,BO.CEN,_e,,,,,,_ild2,_se2);
         _wyn:=1;
         0
      ?}
   ?};
   SC.cntx_pop()
?};
_wyn


\pop_dcen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: przywrocenie starych cen INP
::   WE: _a - ref INN
::  OLD: \pop_dcen/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
INP.cntx_psh();
INP.index('SPR');
INP.prefix(INN.ref());
{? INP.first()
|| {!
   |? _scean:={? INP.SCEAN='' || 'xxx' || INP.SCEAN ?};
      {? (INP.SCSQL='' | ((1+ST.MAG().TYP)='E' & (8+INP.SCSQL)='material'))
       & (__newdce.clear(); __newdce.find_key($INP.M,_scean))
      || INP.D:=__newdce.DAT;
         {? ~((ST.MAG().TYP)*'EWI' & __newdce.CEN=0) || INP.C:=__newdce.CEN ?};
         {? INP.SCEAN='' & INP.DK_C=null() & {? INP.M().IDMOB='A' || ~INN.ARKPOM || 1 ?}
         || INP.DK_C:=exec('FindAndGet','#table','DK_C',__newdce.DKC,,,null())
         ?};
         INP.put(1)
      ?};
      {? INP.SS=0 & INP.SE=0 & INP.SCSQL='' || INP.del() || INP.next() ?}
   !}
?};
INP.cntx_pop()


\inn_win_edit_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Ustawia okno redakcji tabeli INN, wymagane pola, okna słowników
::   WE: [_a] - akronim okna
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || _a:='' ?};
_win_red:=exec('inn_win_edit','magazyn_inw',_a);
{? INN.D=date(0,0,0)
|| _ff:="params_exec('inn_pozycje_red','magazyn_inw')";
   INN.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin'['Poz&ycje'@],_ff);
   _ff:="params_exec('inn_komisja','magazyn_inw')";
   INN.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin'['&Komisja'@],_ff);
   {? INN.MG().SL='T' & var_pres('var_innpop',params_get())>0 & var_pres('BTN_AP',params_get().var_innpop)=type_of(~~)
   || _ff:="params_exec('inn_ark_pom_red','magazyn_inw')";
      _btn:=params_get().var_innpop.BTN_AP:=
         INN.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin'['A&rkusze pomocnicze'@],_ff);
      {? INN.ARKPOM=0 || INN.btn_eopt(_win_red,_btn,'state=grayed') ?}
   ?};
   _ff:="params_exec('inn_zakoncz_red','magazyn_inw')";
   exec('zakoncz','#window',INN,_win_red,1,_ff,0, exec('help_red_zakoncz','#window','INW'),
      exec('text_red_zakoncz','#window','INN'))
?};
exec('ok_esc','#window',INN,_win_red,1,,,,,exec('help_red_ok','#window','Z'),exec('text_red_ok','#window'),
exec('help_red_esc','#window','A'));
INN.win_edit(_win_red);
exec('set_efld_opt','magazyn_inw',_win_red)


\inn_win_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zwraca okno redakcji tabeli INN
::   WE: [_a] - akronim okna
::   WY: akronim okna redakcji
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || _a:='' ?};

_win_akr:=
   {? _a<>''   || _a
               || 'RED'
   ?};

{? _win_akr*'RED'
:: Tymczasowe okno redakcji
|| _win_red:=INN.mk_edit('Inwentaryzacja'@);
   INN.win_ewin(_win_red,,_win_akr);
   _win_red
:: Okno redkacji
|| _win_akr
?}


\set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zaznacza wymagalne pola w nagłówku zamówienia dostawy
::   WE: _a - akronim okna redakcji
::----------------------------------------------------------------------------------------------------------------------
_win_red:={? var_pres('_a')=type_of('') || _a || INN.win_edit('?') ?};

:: Typ inwentaryzacji
{? _a='RED2'
|| INN.efld_opt(_win_red,'enable=0',,'ARKPOM')
|| INN.efld_opt(_win_red,'enable=1',,'ARKPOM')
?};
''


\set_efld_opt_iny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AK [17.00]
:: OPIS: Zaznacza wymagalne pola dla arkusza pomocniczego
::   WE: _a - akronim okna redakcji
::----------------------------------------------------------------------------------------------------------------------
EANX.JM2:={? INY.M=null() || null() || INY.M().J ?};
_red:=INY.win_edit('?');
{? exec('prinysce','magazyn_inw')
|| INY.efld_opt(_red,'enable=1',,'SCEAN');
   INY.efld_opt(_red,'mark=1',,'SCEAN')
|| INY.efld_opt(_red,'enable=0',,'SCEAN');
   INY.efld_opt(_red,'mark=0',,'SCEAN')
?};
{? INY.INX().INN().MG().PAL='T'
|| INY.efld_opt(_red,'enable=1',,'KODPAL');
   INY.efld_opt(_red,'mark=1',,'KODPAL')
|| INY.efld_opt(_red,'enable=0',,'KODPAL');
   INY.efld_opt(_red,'mark=0',,'KODPAL')
?};
''


\set_efld_opt_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PS [17.00]
:: OPIS: Zaznacza wymagalne pola dla pozycji inwentaryzacji
::   WE: [_a] - akronim okna redakcji tabeli INP, domyślnie - bieżące
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') || _red:=_a || _red:=INP.win_edit('?') ?};
:: Dla magazynu typu 'EWIDEN' data dostawy nie jest wymagana
{? _red<>''
|| {? MG.TYP='EWIDEN'
   || INP.efld_opt(_red,'enable=0',,'D')
   || INP.efld_opt(_red,'enable=1',,'D')
   ?};
   _m_atr:={? ~(MG.TYP*'DOST') || 'enable=0' || 'enable=1' ?};
   INP.efld_opt(_red,_m_atr,M_ATR,'SYM');
   INP.efld_opt(_red,_m_atr,M_ATR,'NAZ');
   INP.efld_opt(_red,_m_atr,DK_C,'KOD');
   INP.efld_opt(_red,_m_atr,,'DK_C');
   {? INN.MG().IL='T'
   || INP.efld_opt(_red,'enable=0',,'C');
      INP.efld_opt(_red,'mark=0',,'C')
   || INP.efld_opt(_red,'enable=1',,'C');
      INP.efld_opt(_red,'mark=1',,'C')
   ?};
   {? _red='DISP' | (_m_atr+1)='1'
   || INP.efld_opt(_red,_m_atr,ATR,'SYMDK_C');
      INP.efld_opt(_red,_m_atr,ATR,'KOD');
      {! _i..10
      |! INP.efld_opt(_red,_m_atr,ATR,'WAR'+form(_i,-2,0,'99'));
         INP.efld_opt(_red,_m_atr,M_ATR,'SL_'+form(_i,-2,0,'99'))
      !}
   ?}
?}


\inn_pozycje_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Inwentaryzacja - Pozycje - okno redagowania
::   WE: params_get()   - ustawiane w exec('zdnag_pop','zamdst_nag')
::                      - ustawiane w exec('zddol','zamdst_nag')
::   WY: 'key:F2' - jeśli pola nagłówka dokumentu sprzedażyprawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka dokumentu sprzedaży
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_btnRuleResult:='';

_di:=INN.DI;
_ti:=INN.TI;
_fld:=params_exec('inn_edit_finisher','magazyn_inw',INN.ref());
{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| {? params_exec('edi_inn','magazyn_inw')
   || INN.DI:=_di;
      INN.TI:=_ti;
      _btnRuleResult:='key:F2';
      _mp:=params_get().context.mp;
      _mp.done()
   || INN.DI:=_di;
      INN.TI:=_ti
   ?}
?};

_btnRuleResult


\inn_ark_pom_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Inwentaryzacja - Arkusze pomocnicze - okno redagowania
::   WE: params_get()   - ustawiane w exec('zdnag_pop','zamdst_nag')
::                      - ustawiane w exec('zddol','zamdst_nag')
::   WY: 'key:F2' - jeśli pola nagłówka dokumentu sprzedażyprawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka dokumentu sprzedaży
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_btnRuleResult:='';

_fld:=params_exec('inn_edit_finisher','magazyn_inw',INN.ref());
{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| exec('ark_pom','magazyn_inw')
?};

_btnRuleResult


\inn_zakoncz_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Inwentaryzacja - Zakończ - okno redagowania
::   WE: params_get()   - ustawiane w exec('zdnag_pop','zamdst_nag')
::                      - ustawiane w exec('zddol','zamdst_nag')
::   WY: 'key:F2' - jeśli pola nagłówka dokumentu sprzedażyprawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka dokumentu sprzedaży
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().context.mp;

_autoakc:=exec('chk_role','#b__box',OPERATOR.USER,'LMG_MAG_DWYD')
        & exec('chk_role','#b__box',OPERATOR.USER,'LMG_MAG_DAPZ')
        & {? INN.MG().SL='T' || exec('chk_role','#b__box',OPERATOR.USER,'LMG_MAG_AREO') || 1 ?}
        & exec('autoAkc','#b__box',_mp,600480,'LMG_MAG_EAMG');

_btnRuleResult:='';

_fld:=params_exec('inn_edit_finisher','magazyn_inw',INN.ref());
{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| {? exec('inn_zakoncz','magazyn_inw',0,_autoakc)
   || _btnRuleResult:='key:F2';
      _mp.done()
   ?}
?};

_btnRuleResult


\inn_edit_finisher
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Kod wykańczający po INN.edit() w różnych kontekstach
::   WE: _a - INN.ref()
::   WE: params_get()   - ustawiane w exec('dol_inn','magazyn_inw')
::                      - ustawiane w exec('pop_inn','magazyn_inw')
::----------------------------------------------------------------------------------------------------------------------
:: Sprawdzenie poprawności wypełnienia pól nagłówka dokumentu sprzedaży
_fld:=params_exec('check_inn','magazyn_inw');
{? _fld<>''
|| _fld
|| _inn:=_a;
   _out:=params_get().context.out;
   _mp:=params_get().context.mp;
   _akcja:=params_get().context.akcja;
   _var_innpop:=params_get().var_innpop;

   {? _akcja='Dołącz' | _akcja='START_TODO' | _mp.pathProc()
   || _wyn:=INN.put();
      {? _var_innpop.PO_FIRST=1 & _wyn & INN.TYP='A'
      || exec('ark_inn','magazyn_inw',0,0);
         exec('aktzamst','magazyn_inw')
      ?};
::      exec('zdnag_pop_po','zamdst_nag');
      _var_innpop.PO_FIRST:=2
   |? _akcja='Popraw' | _mp.pathTodo()
   || 1
   ?};
   ''
?}


\inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: INN.ref
::  OLD: \inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
INN.ref


\pr_wycm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: przed redakcja pola INP.M
::  OLD: \pr_wycm/pomoc.fml
::----------------------------------------------------------------------------------------------------------------------
(1+menu_txt)='D'


\po_wycm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: po redakcji pola INP.M
::  OLD: \po_wycm/pomoc.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.INPJM:=INP.M().J;
_wyn:=exec('spr_inpm','magazyn_inw',,1);
{? _wyn=''
|| ATR.MJS:='INP';
   exec('set_efld_opt','mat_atr','INP');
:: ustawienie slownika okienka cech
   {? INP.M().M_ATR<>null & #INP.M().M_ATR<>#ATR.M_ATR
   || {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !};
      INP.DK_C:=null
   ?};
   ATR.M_ATR:=INP.M().M_ATR;
   ATR.FLAG_ED:=(1+INN.MG().TYP)='D' & ATR.CZY_ATR & ATR.M_ATR().EDIT;
   ATR.FLAG:={? ATR.FLAG_ED & INP.M().M_ATR<>null() || 2 || 0 ?};
   {? ATR.FLAG_ED || {? INP.M().M_ATR<>null() || ATR.FLAG_ED:=2 ?} ?};
   {? INP.DK_C<>null() & INP.DK_C().M_ATR<>null()
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('INP.DK_C().WAR'+form(_i,-2,,'99')))() !}
   |? INP.M().M_ATR=null()
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
   ?};
   win_disp()
?};
{? _wyn=''
|| {? INP.M().J2<>null()
   || INP.J2:=INP.M().J2;
      INP.WS2:=exec('oblWSP','jm',INP.M)
   || INP.J2:=null();
      INP.WS2:=0
   ?};
   exec('set_efld_m','magazyn_inw')
?};
{? _wyn='' || exec('poinpsce','magazyn_inw') ?};
_wyn=''


\spr_inpm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza poprawnosc wypelnienia pol pozycji przeceny
::   WY: ''-jest oki lub akronim nieuzupelnionego pola
::   WE: _b 0/1 - redagowanie pola / nie należy sprawdzać wszystkich wartości
::  OLD: \spr_inpm/pomoc.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};

_ref:={? (1+menu_txt)='P' || INP.ref || null ?};
INN.get();
{? INP.M=null
|| FUN.info('Należy podać indeks materiałowy.'@); {? INP.name='inw_pwyc' || 'M' || 'KTM' ?}
|? {? INP.name+3<>'wyc' | _b || 0 || {? INP.C>0 || INP.SE<=0 || INP.SE<0 ?} ?}
|| FUN.info('Należy podać nową cenę większą od zera.'@); 'SE'
|? ~exec('sprm_nac','magazyn_inw',INN.MG,INP.M,INN.ref)
|| FUN.info('Podany indeks materiałowy został już wprowadzony\n'
    'na innej otwartej inwentaryzacji ciągłej.\n'
    'Należy podać inny indeks materiałowy.'@); 'KTM'
|? (_err:=exec('sprm_ndz','magdok_wspolne',INN.MG,INP.M,INN.DI,INN.TI)); _err<=0
|| {? ~_err
   || FUN.info('Podany indeks materiałowy został już wprowadzony na niezaakceptowany dokument przychodowy.\n'
       'Ze względu na to, że data dokumentu jest mniejsza lub równa dacie otwarcia przeceny.\n'
       'niemożliwe jest dołączenie podanego indeksu materiałowego jako nowej dostawy.\n'
       'Należy podać inny indeks materiałowy.'@); 'KTM'
   || FUN.info('Podany indeks materiałowy został już wprowadzony na zaakceptowany dokument przychodowy.\n'
       'Ze względu na to, że data i godzina dokumentu jest większa lub równa dacie i godzinie otwarcia przeceny.\n'
       'niemożliwe jest dołączenie podanego indeksu materiałowego jako nowej dostawy.\n'
       'Należy podać inny indeks materiałowy.'@); 'KTM'
   ?}
|| _wyn:=1; _ktm:=INP.M().KTM;
   INP.cntx_psh;
   INP.index('INP');
   INP.prefix(INN.ref,_ktm,_ktm);
   {? (INN.RODZ='P' | ~(INN.MG().TYP*'DOST')) & INP.first
   || {!
      |? _wyn:=~(_ref<>INP.ref);
         _wyn & INP.next
      !}
   ?};
   INP.cntx_pop;
   {? _wyn
   || {? INP.name='inw_pwyc' | ~INP.C
      || {? INP.name<>'inw_pwyc'
         || {? Plugin.exists('INW_CEN_001')
            || _buf:=Plugin.run('INW_CEN_001',INP.M().uidref());
               {? _buf>0 || INP.C:=_buf ?}
            ?};
            {? ~INP.C
            || _wyc:=exec('get','#params',600051,2);
               {? _wyc<>'' || exec('pop0cen','magazyn_inw',_wyc,0) ?}
            ?};
            {? ~INP.C || INP.C:=exec('biez_cen','ceny_dok',INP.M,INN.MG,INN.DI,,INN.TI) ?}
         || INP.C:=exec('biez_cen','ceny_dok',INP.M,INN.MG,INN.DI,,INN.TI)
         ?};
         {? ~INP.C & INN.MG().TYP='DOSTEWI'
         || INP.C:=exec('FindInSet','#table','INP','KOD',INP.M,INN.ref(),"INP.C",,,0)
         ?}
      ?};
      ''
   || FUN.info({? INP.name='inw_pwyc' || 'Podany indeks materiałowy został już dodany do arkusza przecen.'
               '\nNależy podać inny indeks materiałowy.'@
               || 'Podany indeks materiałowy został już dodany do arkusza inwentaryzacyjnego.'
                  '\nNależy podać inny indeks materiałowy.'@ ?});
      {? INP.name='inw_pwyc' || 'M' || 'KTM' ?}
   ?}
?}


\pr_inpss
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy rozpisujemy wg dostawy/sumy
::   WY: 1-wg dostawy 0-wg sumy
::  OLD: \pr_inpss/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
~BEER.INPSUM & ~INN.ARKPOM


\ae_inpss
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: po redakcji pola INP.SS
::   WY: 1-wartosc dodatnia  0-jesli nie
::  OLD: \ae_inpss/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_dokl:={? INP.M<>null || exec('jaka_dok_m','jm',INP.M) || 3 ?};
_dokl_s:=exec('jaka_dok_mjm','jm',INP.M,INP.J2,INP.M().J);
{? _dokl_s<0 || _dokl_s:=_dokl ?};
INP.SS:=INP.SS$_dokl;
_wyn:=exec('itsPositive','#field',INP.SCSQL='');
{? _wyn & INP.J2<>null()
|| _inpss2:=INP.SS/INP.WS2 $ (_dokl_s+1);
   roundmet(BEER.MDOKL);
   {? INP.SS=0 || INP.SS2:=0
   |? INP.SS2=0 | (_inpss2<>INP.SS2 & FUN.ask('Przeliczyć ilość w drugiej jednostce ewidencyjnej?'@))
   || INP.SS2:=_inpss2
   ?}
?};
INP.WS2:={? INP.SS2>0 & INP.SS>0 || INP.SS/INP.SS2
         |? INP.SE2>0 & INP.SE>0 || INP.SE/INP.SE2
         |? INP.J2<>null() & (INP.SS2=0 | INP.SE2=0) || exec('oblWSP','jm',INP.M)
         |? INP.J2<>null() & (INP.SS2=0 | INP.SE2=0) || exec('oblWSP','jm',INP.M)
         || 0
         ?};
{? _wyn & (1+INP.IN().MG().TYP)='D' & INP.SCSQL<>''
|| _dkc:={? INP.DK_C<>null() & INP.SCSQL<>''
         || exec('FindAndGet','#table','SC',INP.SCSQL,,"DK_C",null())=null()
         || INP.DK_C=null()
         ?};
   {? _dkc & INP.SS>INP.SE
   || ATR.MJS:='INP';
      ATR.M_ATR:=INP.M().M_ATR;
      INP.M().M_ATR().SYM;
      ATR.FLAG_ED:=(1+INP.IN().MG().TYP)='D' & ATR.CZY_ATR & ATR.M_ATR().EDIT;
      ATR.FLAG:={? ATR.FLAG_ED & INP.M().M_ATR<>null() || 2 || 0 ?};
      {? ATR.FLAG_ED || {? INP.M().M_ATR().EDIT || ATR.FLAG_ED:=2 ?} ?};
      {? INP.DK_C<>null() & INP.DK_C().M_ATR<>null()
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('INP.DK_C().WAR'+form(_i,-2,,'99')))() !}
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
      ?}
   |? INP.DK_C<>null()
   || ATR.FLAG_ED:=0;
      ATR.FLAG:=0;
      {? INP.DK_C<>null() & INP.DK_C().M_ATR<>null()
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('INP.DK_C().WAR'+form(_i,-2,,'99')))() !}
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
      ?}
   || ATR.FLAG_ED:=0;
      ATR.FLAG:=0;
      ATR.M_ATR:=null();
      M_ATR.blank(0);
      INP.DK_C:=null();
      {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
   ?};
   win_disp()
?};
roundmet(5);
_wyn


\pwinpsce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed wyswietleniem kodu identyfikacyjnego
::  OLD: \pwinpsce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
_edit:=(2+cur_kwin())='e_';
_dost:=(1+INP.IN().MG().TYP)='D';
{? _edit & _dost & (';DAPZ'*INP.M().IDMOB)>1
|| INP.win_fml(INP.win_sel('?'),,'SCEAN',,'ICON_BEFORE',"'xwin16.png:167'");
   ''
|? _edit
|| {? _dost || INP.win_fml(INP.win_sel('?'),,'SCEAN',,'ICON_BEFORE',"''") ?};
   exec('findfnv','#color')
|| ''
?}


\inn_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zakonczenie rejestracji inwentaryzacji - zmiana statusu
::   WE: _a - 0- nie zakładać INN.r_lock, 1-zakładać INN.r_lock
::       [_b] - 0(domyślnie)-nie 1-akceptacja dokumentów różnicowych
::   WY: 0 - nie zakończono redakcji dokumentu, 1 - zakończono redakcję dokumentu
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_autoakc:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_wyn:=0;

_return:=0;

{? _a=0 | INN.r_lock(1,1,1)
|| INP.cntx_psh();
   INP.index('INP');
   INP.prefix(INN.ref());
   _loop:=INP.first();
   {!
   |? _loop
   |!
      {? ~INP.r_lock(1,1,1)
      || FUN.info('Pozycja dotycząca indeksu %1 zablokowana przez innego operatora.'@[INP.M().KTM]);
         _return:=1
      || INP.r_unlock()
      ?};
      _loop:=INP.next()
   !};
   INP.cntx_pop();
   {? _return
   || 1
   |? INN.STAT_REJ='T'
   || FUN.info('Zakończono rejestrację inwentaryzacji.\nZadanie zostanie zakończone.'@);
      _wyn:=1
   |? INN.STAT_REJ='N'
   || INN.cntx_psh();
      exec('akc_inn','magazyn_inw',_autoakc);
      INN.cntx_pop();
      {? INN.get() || _wyn:=INN.STAT_REJ='T' ?}
   ?};
   {? _a || INN.r_unlock() ?}
?};
_wyn


\inn_zakoncz_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Inwentaryzacja - Zakończ - okno wertowania pozycji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? {? type_of(params_get())=type_of(obj_new('obj')) & var_pres('var_innpop',params_get())>0
   || {? exec('inn_zakoncz','magazyn_inw',0) || _mp:=params_get().context.mp; _mp.done(); 1 ?}
   || exec('inn_zakoncz_wer','magazyn_inw');
      {? INN.get() || INN.STAT_REJ='T' ?}
   ?}
|| sel_exit()
?}


\akc_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: akceptacja inwentaryzacji
::   WE: [_a] - 0(domyślnie)-nie 1-akceptacja dokumentów różnicowych
::  OLD: \akc_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_autoakc:={? var_pres('_a')=type_of(0) || _a || 0 ?};
VAR_DEL.delete('__eanlref','__matref','__paleta','__roznpal');

_matmag:=tab_tmp(2,'MAT','STRING[16]','','MAG','STRING[16]','');
__roznpal:=tab_tmp(2,'PAL','STRING[16]','','NEW','STRING[16]','');
_ok:=1;
_txt:='';
_tab:=obj_new(1); _tab[1]:=ST.MAG; _tmg:=1+ST.MAG().TYP;
_typy_upr:=exec('typ_dok','lmg','TYPYDOK.INW=\'I\'',,,1,_tab);
{? _typy_upr*INN.TYP_P().T=0 || _ok:=0; _txt+=INN.TYP_P().T ?};
{? _typy_upr*INN.TYP_M().T=0 || _ok:=0; _txt+=INN.TYP_M().T ?};
_refinn:=INN.ref();

exec('ini_kom','#message','Zakończenia arkusza inwentaryzacyjnego'@);
__kom_gr:='Ogólne warunki zakończenia'@;
_err:=0;
_wyc:=exec('get','#params',600051,2);

{? INN.D<>date(0,0,0)
|| _txt:='Inwentaryzacja już zaakceptowana.'@;
   exec('add_kom','#message',_txt,2)
|? _ok=1
||
   _ok:=0;
   _ref:=INN.ref;
   _czyp:=(exec('FindInSet','#table','INP','INP',_ref)<>null);
   _inwp:=INN.TYP_P;
   _inwm:=INN.TYP_M;
   {? ~_czyp
   || _txt:='Brak pozycji na arkuszu.'@;
      exec('add_kom','#message',_txt,2);
      _err:=1
   ?};
   {? ~exec('spr_akci','magazyn_inw')
   || _txt:='Poprzednia inwentaryzacja nie została zakończona.'@;
      exec('add_kom','#message',_txt,2);
      _err:=1
   ?};
   {? _inwp=null
   || _txt:='Niewypełnione pole dokumenty przychodu.'@;
      exec('add_kom','#message',_txt,2);
      _err:=1
   ?};
   {? _inwm=null
   || _txt:='Niewypełnione pole dokumenty rozchodu.'@;
      exec('add_kom','#message',_txt,2);
      _err:=1
   ?};
   {? date(ST.AR,ST.AM,0)<INN.DI
   || _txt:='Okres akceptacji arkusza inwentaryzacyjnego powinien '
            'być większy lub równy od okresu rozpoczęcia inwentaryzacji.'@;
      exec('add_kom','#message',_txt,2);
      _err:=1
   ?};
   {? INN.D=date(0,0,0) & INN.TYP<>'A'
     & (_opi:=exec('spr_znag','magazyn_inw',INN.DI,INN.TYP='A',,,,{? INN.TYP='C' || INN.ref() || null ?},INN.TI))>0
   || _txt:='Do daty rozpoczęcia inwentaryzacji niezaakceptowano wszystkich dokumentów.'@;
      exec('add_kom','#message',_txt,2);
      _err:=1;
      {? do_state()
      || FUN.info('Do daty rozpoczęcia inwentaryzacji nadal niezaakceptowano'
          '\nwszystkich dokumentów.'
          '\nNiemożliwe zakończenie inwentaryzacji.'@)
      |? FUN.ask('Do daty rozpoczęcia inwentaryzacji nadal niezaakceptowano'
          '\nwszystkich dokumentów.'
          '\nNiemożliwe zakończenie inwentaryzacji.'
          '\n\nWyświetlić niezaakcepowane dokumenty?'@)
      || X_Xc.select
      ?}
   ?};
   {? ~exec('czy_z_ok','okresy',1,1,ST.AR,ST.AM,ST.MAG)
   || _err:=1
   ?};
   {? exec('openprz','magazyn_przec',1)
   || _txt:='W magazynie istnieją niezaakceptowane dokumenty przecen.'@;
      exec('add_kom','#message',_txt,2);
      _err:=1
   ?};
   {? INN.MG().PAL='T' & ~exec('sprinpal','magazyn_inw',INN.ref())
   || _err:=1
   ?};
   {? exec('sprinkor','magazyn_inw',INN.ref)
   || _err:=1
   ?};
   {? {? exec('FindInSet','#table','INX','INN',INN.ref())<>null || ~exec('inn_innx','magazyn_inw',1,1) || 0 ?}
   || _err:=1
   |? {? INN.TYP='C' || exec('aktualse','magazyn_stan') ?}; _txt:=exec('sprnewst','magazyn_inw'); _txt<>''
   || _err:=1
   ?};
   {? ~_err & INN.D=date(0,0,0)
   || _ok:=FUN.ask('Czy zakończyć inwentaryzację?'@); INN.win_edit('ZAK'); INN.D:=INN.DI; INN.STAT_REJ:='T'
   || _ok:=0
   ?};

   {? ~_ok || INN.D:=date(0,0,0) ?};

   {? _ok=1
    & {? INN.edit("exec('spr_zaki','magazyn_inw')") || 1 || INN.D:=date(0,0,0); 0 ?}
    & (_ctrlrez:=exec('initfrez','magazyn_inw',INN.ref()); _ctrlrez)
   || _do_state:=do_state();
      {? ~_do_state || do() ?};
::    dodatkowa aktualizacja do dnia zakonczenia inwentury
      {? INN.TYP='C' || exec('aktualse','magazyn_stan',INN.D,INN.T) ?};

      _bylp:=0; _nrp:=0; _nrpr:=''; _bylm:=0; _nrm:=0; _nrmr:=''; _dat:=INN.D; _tim:=INN.T;
      _tip:={? _tim<>time(0,0,0) || _tim+(1/60) || _tim ?};
      _paldst:=INN.MG().PAL='T' & (1+INN.MG().TYP)='D';

      _zwrot:=INN.TYP_P().DN='T' | _paldst;

      _czy_rlok:=INN.MG().SL='T' & INN.ARKPOM;
      {? _czy_rlok
      || _dkl:=tab_tmp(5,'M','STRING[16]',''
                ,'EANL','STRING[16]',''
                ,'TW','DATE',''
                ,'PAL','STRING[16]',''
                ,'SCEAN','STRING[128]',''
                ,'ILSL','REAL',''
                ,'ILIN','REAL',''
                ,'SL','STRING[16]','')
      ?};

::    czesc zwiazana z dokumentami roznicowymi
      _refm:=null();
      _refp:=null();
      INP.index('INP');
      INP.prefix(_ref);
      {? INP.first
      || ND.cntx_psh();
         {!
         |? {? INP.SE>INP.SS
            ||
::             niedobor
               {? ~_bylm
               || _refm:=exec('addnag','magdok_nag',INP.IN().MG,_dat~1,_dat~2,_inwm,'N',,_dat,,,,,,,,,,,,,_tip,,'T');
                  ND.clear; ND.seek(_refm); ND.r_lock(1,1,1); _nrm:=ND.NR; _symm:=ND.SYM; _nrmr:=$ND.ref(); _bylm:=1
               ?};
               _sql:='';
               _msk:={? INP.SC<>null() || ref_name(INP.SC) || _sql:=INP.SCSQL; form(8+INP.SCSQL) ?};
               {? _msk<>'' & (5+_msk)<>'stc__' || _msk:='' ?};
               _cena:={? 'Ś'=_tmg || exec('cenas','magazyn_stan',INP.M,_tmg) || INP.C ?};
               {? _msk<>'' & _msk<>SC.name
               || exec('przyjdod','jm',$INP.J2,INP.WS2,INP.SE2-INP.SS2);
                  SC.cntx_psh();
                  INP.cntx_psh();
                  SC.use(_msk);
                  {? _sql<>'' & (SC.prefix(); SC.seek(_sql)) || INP.SC:=SC.ref() ?};
                  _dk:=exec('adddk','magdok_poz'
                     ,_refm,INP.M,INP.SE-INP.SS,_cena,{? INP.SC<>null || INP.SC().D || INP.D ?},,,,,,,,7
                     ,{? INP.SC<>null || INP.SC().RDK || 0 ?},{? INP.SC<>null || INP.SC().NDK || '' ?},INP.DK_C,
                     ,,,,,,,
                     ,{? INP.SC<>null || INP.SC().SCEAN || INP.SCEAN ?},{? INP.SC<>null || INP.SC().TW || INP.TW ?});
                  SC.cntx_pop();
                  INP.cntx_pop()
               || exec('przyjdod','jm',$INP.J2,INP.WS2,INP.SE2-INP.SS2);
                  _dk:=exec('adddk','magdok_poz'
                     ,_refm,INP.M,INP.SE-INP.SS,_cena,{? INP.SC<>null || INP.SC().D || INP.D ?},,,,,,,,7
                     ,{? INP.SC<>null || INP.SC().RDK || 0 ?},{? INP.SC<>null || INP.SC().NDK || '' ?},INP.DK_C,
                     ,,,,,,,
                     ,{? INP.SC<>null || INP.SC().SCEAN || INP.SCEAN ?},{? INP.SC<>null || INP.SC().TW || INP.TW ?})
               ?};
               DK.prefix();
               {? _dk<>null & DK.seek(_dk)
               || exec('update','rezerwacje','DK',DK.ref(),ND.MAG,DK.M,DK.IL,DK.SRDK);
                  {? (_matmag.prefix($DK.M,$DK.N().MAG);~_matmag.first())
                  || _matmag.blank();
                     _matmag.MAT:=$DK.M;
                     _matmag.MAG:=$DK.N().MAG;
                     _matmag.add(1)
                  ?}
::                  exec('obl_stan','magazyn_stan',DK.M,1,DK.N().MAG)
               ?}
            ?};
            {? INP.SE<INP.SS
            ||
               {? INP.C=0 & Plugin.exists('INW_CEN_001')
               || _cen:=Plugin.run('INW_CEN_001',INP.M().uidref());
                  {? _cen>0 || INP.C:=_cen; INP.put(1) ?}
               ?};
               {? INP.C=0 & _wyc<>'' || exec('pop0cen','magazyn_inw',_wyc) ?};
::             nadwyzka
               {? ~_bylp
               || _refp:=exec('addnag','magdok_nag',INP.IN().MG,_dat~1,_dat~2,_inwp,'N',,_dat,,,,,,,,,,,,,_tip,,'T');
                  ND.clear; ND.seek(_refp); ND.r_lock(1,1,1); _nrp:=ND.NR; _symp:=ND.SYM; _nrpr:=$ND.ref(); _bylp:=1
               ?};
               _sql:='';
               _msk:={? INP.SC<>null() || ref_name(INP.SC) || _sql:=INP.SCSQL; form(8+INP.SCSQL) ?};
               {? _msk<>'' & (5+_msk)<>'stc__' || _msk:='' ?};
               {? _msk<>'' & _msk<>SC.name
               || exec('przyjdod','jm',$INP.J2,INP.WS2,INP.SS2-INP.SE2);
                  SC.cntx_psh();
                  INP.cntx_psh();
                  SC.use(_msk);
                  {? _sql<>'' & (SC.prefix(); SC.seek(_sql)) || INP.SC:=SC.ref() ?};
                  _other:={? _paldst || INP.SC<>null() & INP.SC().MAG<>INN.MG
                          |? _zwrot & INP.SE=0 || INP.SC<>null() & (1+INN.MG().TYP)='D'
                          || 0
                          ?};
                  _war:=_zwrot & INP.SC<>null();

                  _dk:=exec('adddk','magdok_poz',_refp,INP.M,INP.SS-INP.SE,INP.C,{? _war || INP.SC().D || INP.D ?}
                        ,,,,,,,,7,
                        {? _war & ~_other || INP.SC().RDK || 0 ?},
                        {? _war & ~_other || INP.SC().NDK || '' ?},INP.DK_C,
                        ,{? _other || INP.SC().PRDK || '' ?},,,,,,
                        ,{? _war || INP.SC().SCEAN || INP.SCEAN ?},{? _war || INP.SC().TW || INP.TW ?});
                  SC.cntx_pop();
                  INP.cntx_pop()
               || exec('przyjdod','jm',$INP.J2,INP.WS2,INP.SS2-INP.SE2);
                  _other:={? _paldst  || INP.SC<>null() & INP.SC().MAG<>INN.MG
                          |? INP.SE=0 & INP.SC<>null() || -1
                          || 0
                          ?};
                  _war:=(INP.SE=0 | _zwrot) & INP.SC<>null();

                  _dk:=exec('adddk','magdok_poz',_refp,INP.M,INP.SS-INP.SE,INP.C
                        ,{? _war || INP.SC().D || INP.D ?}
                        ,,,,,,,,7,
                        {? _war & _other<=0 || INP.SC().RDK || 0 ?},
                        {? _war & _other<=0 || INP.SC().NDK || '' ?},INP.DK_C,
                        ,{? _other || INP.SC().PRDK || '' ?},,,,,,
                        ,{? _war || INP.SC().SCEAN || INP.SCEAN ?},{? _war || INP.SC().TW || INP.TW ?})
               ?};
               DK.prefix();
               {? _dk<>null & DK.seek(_dk)
               || {? (_matmag.prefix($DK.M,$DK.N().MAG);~_matmag.first())
                  || _matmag.blank();
                     _matmag.MAT:=$DK.M;
                     _matmag.MAG:=$DK.N().MAG;
                     _matmag.add(1)
                  ?}
::                exec('obl_stan','magazyn_stan',DK.M,1,DK.N().MAG)
               ?}
            ?};
            {? _czy_rlok
            || _dkl.clear();
               {? ~_dkl.find_key($INP.M)
               || SL.index('MG');
                  SL.prefix(INN.MG,INP.M);
                  {? SL.first()
                  || {!
                     |? _ile:=SL.IL-exec('oblsldat','magazyn_stan',INP.M,SL.EANL,SL.TW,_dat,SL.PAL);
                        {? _ile<>0
                        || SLD.index('SL');
                           SLD.prefix(SL.ref());
                           {? SLD.first()
                           || {!
                              |? _ils:=SLD.IL-exec('oblsldat','magazyn_stan',INP.M,SL.EANL,SL.TW,_dat,SL.PAL,SLD.SCEAN);
                                 {? _ils<>0
                                 || _dkl.blank();
                                    _dkl.M:=$INP.M;
                                    _dkl.EANL:=$SL.EANL;
                                    _dkl.TW:=SL.TW;
                                    _dkl.PAL:={? SL.PAL=null | INN.MG().PAL<>'T' || 'brak' || $SL.PAL ?};
                                    _dkl.ILSL:=_ils;
                                    _dkl.ILIN:=0;
                                    _dkl.SL:=$SLD.ref();
                                    _dkl.SCEAN:=SLD.SCEAN;
                                    _dkl.add()
                                 ?};
                                 SLD.next()
                              !}
                           || _dkl.blank();
                              _dkl.M:=$INP.M;
                              _dkl.EANL:=$SL.EANL;
                              _dkl.TW:=SL.TW;
                              _dkl.PAL:={? SL.PAL=null | INN.MG().PAL<>'T' || 'brak' || $SL.PAL ?};
                              _dkl.ILSL:=_ile;
                              _dkl.ILIN:=0;
                              _dkl.SL:=$SL.ref();
                              _dkl.SCEAN:='brak';
                              _dkl.add()
                           ?}
                        ?};
                        SL.next()
                     !}
                  ?}
               ?}
            ?};
            INP.next()
         !};
         _matmag.prefix();
         {? _matmag.first()
         || {!
            |? _refmt:=exec('FindAndGet','#table',M,_matmag.MAT,,,null());
               _refmg:=exec('FindAndGet','#table',MG,_matmag.MAG,,,null());
               {? _refmt<>null() & _refmg<>null() || exec('obl_stan','magazyn_stan',_refmt,1,_refmg) ?};
               _matmag.next()
            !}
         ?};
         ND.cntx_pop()
      ?};
      {? _refm<>null() & _ctrlrez=1 || exec('modifrez','magazyn_inw',_refm) ?};
      _dk_ln:=null;

::       czesc zwiazana z roznicami na lokalizacjach - reorganizacja magazynu
      {? _czy_rlok
      || INY.index('INN');
         INY.prefix(INN.ref());
         {? INY.first()
         || {!
            |? _dkl.clear();
               _dkl.prefix($INY.M,$INY.EANL,INY.TW
                         ,{? INY.PAL=null | INN.MG().PAL<>'T' || 'brak' || $INY.PAL ?}
                         ,{? INY.SCEAN='' | ~(INN.MG().TYP*'DOST') || 'brak' || INY.SCEAN ?});
               {? _dkl.first()
               || _dkl.ILIN+=INY.IL;
                  _dkl.put(1)
               || _dkl.blank();
                  _dkl.M:=$INY.M;
                  _dkl.EANL:=$INY.EANL;
                  _dkl.TW:=INY.TW;
                  _dkl.PAL:={? INY.PAL=null | INN.MG().PAL<>'T' || 'brak' || $INY.PAL ?};
                  _dkl.ILSL:=0;
                  _dkl.ILIN:=INY.IL;
                  _dkl.SL:='';
                  _dkl.SCEAN:={? INY.SCEAN='' | ~(INN.MG().TYP*'DOST') || 'brak' || INY.SCEAN ?};
                  _dkl.add()
               ?};
               INY.next()
            !}
         ?};
         _dkl.clear();
         {? _dkl.first()
         || _domlok:=ST.MAG().EANL;
            VAR_DEL.delete('__ilosc');
            {!
            |?
::                generujemy uzupelniajac domyslna lokalizacja
::                na plus lub na minus (z jednej lub drugiej strony) - ilosc zawsze dodatnia
               __ilosc:=_dkl.ILSL-_dkl.ILIN;
               {? __ilosc<>0 & {? ST.MAG().PAL<>'T' & _dkl.TW=date(0,0,0) || $_domlok<>_dkl.EANL || 1 ?}
               || {? _dk_ln=null
                  || DK_LN.clear();
                     DK_LN.blank();
                     DK_LN.RODZ:='I';
                     _dk_ln:={? DK_LN.add(1) || DK_LN.ref() || null() ?}
                  ?};
                  __eanlref:=exec('FindAndGet','#table','EANL',_dkl.EANL,,,null());
                  __matref:=exec('FindAndGet','#table','M',_dkl.M,,,null());
                  __paleta:={? _dkl.PAL='brak' || null() || exec('FindAndGet','#table','PAL',_dkl.PAL,,,null()) ?};
                  {? __eanlref<>null & {? ST.MAG().PAL='T' || __paleta<>null || __matref<>null ?}
                  || {? __paleta<>null()
                     || __roznpal.clear();
                        {? __roznpal.find_key($__paleta)
                        || {? __roznpal.NEW<>''
                           || _newpal:=exec('FindAndGet','#table','PAL',__roznpal.NEW,,,null())
                           || _newpal:=exec('oldPal','magazyn_inw',__paleta,$INN.ref());
                              __roznpal.NEW:=$_newpal;
                              __roznpal.put(1)
                           ?}
                        || _newpal:=null()
                        ?}
                     || _newpal:=null()
                     ?};
                     _termin:={? exec('FindAndGet','#table',M,__matref,,"SETW<>'P'",1) || date(0,0,0) || _dkl.TW ?};
                     {? __ilosc>0
                     || exec('add2dk_l','magdok_wspolne',null,_dk_ln,__eanlref,_domlok,_dkl.TW,_termin
                         ,__ilosc,ST.MAG,__matref,,,__paleta,_newpal,,,{? _dkl.SCEAN='brak' || '' || _dkl.SCEAN ?})
                     || exec('add2dk_l','magdok_wspolne',null,_dk_ln,_domlok,__eanlref,_termin,_dkl.TW
                         ,-__ilosc,ST.MAG,__matref,,,_newpal,__paleta,,,{? _dkl.SCEAN='brak' || '' || _dkl.SCEAN ?})
                     ?}
                  ?}
               ?};
               _dkl.next()
            !};
            VAR_DEL.delete('__ilosc')
         ?}
      ?};
      {? _dk_ln<>null() & exec('FindInSet','#table','DK_L','DK_LNLOK',_dk_ln,,,,,null())=null()
      || DK_LN.prefix();
         {? DK_LN.seek(_dk_ln)
         || DK_LN.del();
            _dk_ln:=null()
         ?}
      ?};
      INN.cntx_psh();
      INN.prefix();
      {? INN.seek(_refinn)
      || {? _bylm
         || exec('dk_sum','magdok_wspolne',_refm);
            INN.INR:=_nrm;
            INN.INR_S:=_symm;
            INN.INR_R:=_nrmr
         ?};
         {? _bylp
         || exec('dk_sum','magdok_wspolne',_refp);
            INN.INP:=_nrp;
            INN.INP_S:=_symp;
            INN.INP_R:=_nrpr
         ?};

         INN.DK_LN_R:=$_dk_ln;
         INN.CZYDK_LN:=INN.DK_LN_R<>'';
         INN.D:=_dat;
         INN.T:=_tim;
         INN.STAT_REJ:='T';
         {? ~INN.put() || _autoakc:=0; _err:=1; undo() ?}
      || _err:=1; undo()
      ?};
      {? ~_do_state || end() ?};
      {? _autoakc
      || ND.cntx_psh();
         DK_LN.cntx_psh();
         {? _bylp
         || ND.prefix();
            {? ND.seek(_refp) || exec('nd_zakoncz','magdok_nag',1,,1) ?}
         ?};
         {? _bylm
         || ND.prefix();
            {? ND.seek(_refm) || exec('nd_zakoncz','magdok_nag',1,,1) ?}
         ?};
         {? _dk_ln<>null()
         || DK_LN.prefix();
            {? DK_LN.seek(_dk_ln) || exec('dk_ln_zakoncz_end','magdok_wspolne',1,1) ?}
         ?};
         ND.cntx_pop();
         DK_LN.cntx_pop()
      ?};
      INN.cntx_pop();
      INN.get();
      unlock_r
   |? INN.D<>date(0,0,0) & _ctrlrez<>0
   || FUN.info('Arkusz jest zaakceptowany.'@)
   || 'rezygnacja'
   ?};
   INN.win_edit('RED')
||
   FUN.info('Brak uprawnień do dokumentów inwentaryzacyjnych typu: %1.'@[_txt])
?};
obj_del(_matmag);
VAR_DEL.delete('__eanlref','__matref','__paleta','__roznpal');
{? _err
|| __kom_gr:='Informacja o zakończeniu (inwentaryzacja: %1).'@[INN.SYM];
   _txt:='NIEMOŻLIWE ZAKOŃCZENIE INWENTARYZACJI.'@;
   exec('add_kom','#message',_txt,3)
?};
exec('end_kom','#message');
''


\spr_akci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdzenie akceptacji poprzednich inwentaryzacji
::   WE: [_a] - domyslnie 0-poprzednie 1-nastepne
::   WY: 1/0
::  OLD: \spr_akci/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1  || {? type_of(_a)<>1 || _a:=0 ?}  || _a:=0  ?};

INN.cntx_psh;
_wyn:={? (~_a & INN.prev()) | (_a & INN.next()) || INN.D<>date(0,0,0) || ~_a ?};
INN.cntx_pop;
_wyn


\sprinpal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: sprawdza poprawnosc wprowadzonych pozycji dotyczacych palet na arkuszach pomocniczych
::       dotyczy wylacznie magazynow paletowych
::   WE: _a - ref INN.ref
::   WY: 1-jest ok 0-nie jest dobrze
::  OLD: \sprinpal/mws2.fml
::----------------------------------------------------------------------------------------------------------------------
:: tabela pomocnicza do zliczania ilosci na palecie
_pal:=tab_tmp(3,'PAL','STRING[16]',''
       ,'LOK','STRING[16]',''
       ,'MAT','STRING[16]',''
       ,'ILE','REAL',''
       ,'KOD','STRING[30]',''
       ,'KTM','STRING[50]',''
       ,'EAN','STRING[30]','');

_wyn:=1;
PAL.cntx_psh();
INY.cntx_psh();
INY.index('INN');
INY.prefix(_a);
{? INY.first()
||
:: wlaczenie tabeli komunikatow
   __kom_gr:='Struktura palet na arkuszach pomocniczych (inwentaryzacja: %1).'@[INN.SYM];
   {!
   |? {? INY.PAL=null
      || _wyn:=0;
         _txt:='Brak palety. Lokalizacja: %1, Indeks: %2.'@[INY.EANL().KOD,INY.M().KTM];
         exec('add_kom','#message',_txt,8)
      |? exec('palOtherMg','magazyn_inw',INY.INX().INN().MG,INY.PAL) &
         (_tab:=exec('iny2pal','magazyn_inw',INY.INX().INN,INY.PAL); _res:=_tab.size(); obj_del(_tab); _res)
      || _wyn:=0;
         _txt:='Paleta: %1 w innym magazynie. Lokalizacja: %2, Indeks: %3'@[INY.PAL().KODK,INY.EANL().KOD,INY.M().KTM];
         exec('add_kom','#message',_txt,8,'Arkusz inwentaryzacji'@)
      || _rlok:={? INY.EANL=null || 'nullnull' || $INY.EANL ?};
         _klok:={? INY.EANL=null || '(brak)' || INY.EANL().KOD ?};
::       sprawdzamy czy już jest paleta - jeśli jej nie ma to przepisujemy jej aktualną strukturę
         _pal.clear();
         {? ~_pal.find_key($INY.PAL)
         || {? INY.PAL().AKT='N'
            || PAL_POZ.use('palet'+form(INY.PAL().AR-2000,-2,0,'99'))
            || PAL_POZ.use('paletyp')
            ?};
            PAL_POZ.index('PAL');
            PAL_POZ.prefix(INY.PAL);
            {? PAL_POZ.first()
            || {!
               |? _pal.clear();
                  {? _pal.find_key($PAL_POZ.PAL,_rlok,$PAL_POZ.M)
                  || _pal.ILE+=PAL_POZ.ILP;
                     _pal.put(1)
                  || _pal.blank();
                     _pal.PAL:=$PAL_POZ.PAL;
                     _pal.LOK:=_rlok;
                     _pal.MAT:=$PAL_POZ.M;
                     _pal.ILE:=PAL_POZ.ILP;
                     _pal.KOD:=PAL_POZ.PAL().KODK;
                     _pal.KTM:=PAL_POZ.M().KTM;
                     _pal.EAN:=_klok;
                     _pal.add(1)
                  ?};
                  PAL_POZ.next()
               !}
            ?};
            PAL_POZ.use('paletyp')
         ?};
::       wpisujemy informację z arkusza pomocniczego
         _pal.clear();
         _pal.prefix($INY.PAL,_rlok);
         {? _pal.first()
         || {? _pal.find_key($INY.M)
            || _pal.ILE-=INY.IL;
               _pal.put(1)
            || __roznpal.clear();
               {? ~__roznpal.find_key($INY.PAL,)
               || __roznpal.blank();
                  __roznpal.PAL:=$INY.PAL;
                  __roznpal.NEW:='';
                  __roznpal.add(1)
               ?}
            ?}
         || _wyn:=0;
            _txt:='Niezgodność lokalizacji dla palety: %1 (%2).'
                  ' Lokalizacja: %3, Indeks: %4'@[INY.PAL().KODK,_pal.EAN,_klok,INY.M().KTM];
            exec('add_kom','#message',_txt,8)
         ?}
      ?};
      INY.next()
   !};
:: ewidencja nadwyżek, niedoborów na palecie
   _pal.clear();
   {? _wyn & _pal.first()
   || {!
      |? {? _pal.ILE<>0
         || __roznpal.clear();
            {? ~__roznpal.find_key(_pal.PAL,)
            || __roznpal.blank();
               __roznpal.PAL:=_pal.PAL;
               __roznpal.NEW:='';
               __roznpal.add(1)
            ?}
         ?};
         _pal.next()
      !}
   ?}
?};
INY.cntx_pop();
PAL.cntx_pop();
obj_del(_pal);
_wyn


\sprinkor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [$12.10]
:: OPIS: sprawdza czy pozycja inwentaryzacji z niedoborem byla korygowana w dniu inwentaryzacji lub pozniej
::   WE: _a - INN.ref
::   WY: 1 - sa korygowane pozycji
::  OLD: \sprinkor/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
INN.cntx_psh; INP.cntx_psh;
INN.prefix;
{? 'DFL'*(1+INN.MG().TYP) & INN.seek(_a)
||
   __kom_gr:={? INN.TYP='A'
             || 'Dostawy dla których nie można wykazywać niedoborów (inwentaryzacja: %1):'@[INN.SYM]
             || 'Dostawy z wykazanym niedoborem do usunięcia (inwentaryzacja: %1):'@[INN.SYM]
             ?};
   INP.index('SPR');
   INP.prefix(INN.ref);
   {? INP.first
   ||
      {!
      |?
         {? INP.SS<INP.SE
         || {? ~exec('dok_po_kor','magdok_wspolne',INN.DI,INP.SCRDK,INP.SCNDK,INN.MG,INP.M)
            || _wyn:=1;
               exec('add_kom','#message','%1'
                  '; data: %2'
                  '; cena: %3'
                  '; stan: %4'
                  '; ze spisu: %5'@[INP.M().KTM,$INP.D,form(INP.C,,INP.M().DOKL_C),form(INP.SE,,M.DOKL),form(INP.SS,,M.DOKL)]
                  ,14)
            ?};
::          kontrola aktualnego stanu dostawy
            {? INN.TYP='C' & INP.SCSQL<>''
            || _rdk:=exec('FindAndGet','#table',SC,INP.SCSQL,,"RDK",0);
               _ndk:=exec('FindAndGet','#table',SC,INP.SCSQL,,"NDK",'');
               _data:=date(date()~1,12,31);
               {? _rdk<>0 & _ndk<>''
               || _buf:=exec('obl_se','magazyn_inw',INN.MG,INP.M,_rdk,_ndk,_data,null(),time());
                  _ild:=_buf[1]; _ild2:=_buf[2];
                  {? _ild-INP.SE+INP.SS<0
                  || _ktm:=INP.M().KTM;
                     _dokl:=INP.M().DOKL;
                     _dc:=INP.M().DOKL_C;
                     _txt:='Zbyt mała ilość ze spisu: %1 [dostawa z dnia: %2, cena: %3]'@[_ktm,$INP.D,form(INP.C,,_dc)];
                     exec('add_kom','#message',_txt,2);
                     _txt:='Stan wg ewidencji: %1, wg spisu: %2, aktualny: %3, ujemny na dostawie: '
                       '%4'@[form(INP.SE,,_dokl),form(INP.SS,,_dokl),form(_ild,,_dokl),form(_ild-INP.SE+INP.SS,,_dokl)];
                     exec('add_kom','#message',_txt,2);
                     _wyn:=1
                  ?};
                  obj_del(_buf)
               ?}
            ?}
         ?};
         {? INP.M().M_ATR<>null()
          & (INP.DK_C=null() | {? INY.DK_C().M_ATR().MOD='T' || INY.DK_C().UMOD || INY.DK_C().UZUP ?}*'0')
         || _ktm:=INP.M().KTM;
            _dc:=INP.M().DOKL_C;
            _txt:='Nieprawidłowa cecha dostawy: %1 [dostawa z dnia: %2, cena: %3]'@[_ktm,$INP.D,form(INP.C,,_dc)];
            exec('add_kom','#message',_txt,2);
            _wyn:=1
         ?};
         INP.next
      !}
   ?}
?};
INN.cntx_pop; INP.cntx_pop;
_wyn


\sprnewst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: sprawdza wypelnienie pol D i C dla nowych dostaw
::   WY: ''-jest OK string=KTM+NAZWA -nie jest dobrze
::  OLD: \sprnewst/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_only:=INN.MG().IL='T';
INP.cntx_psh();
INP.index('INP');
INP.prefix(INN.ref());
{? INP.first()
|| {!
   |? {? INP.name<>'inw_pwyc' & ~INP.C
      || {? Plugin.exists('INW_CEN_001')
         || _buf:=Plugin.run('INW_CEN_001',INP.M().uidref());
            {? _buf>0 || INP.C:=_buf; INP.put(1) ?}
         ?};
         {? ~INP.C
         || _wyc:=exec('get','#params',600051,2);
            {? _wyc<>'' || exec('pop0cen','magazyn_inw',_wyc) ?}
         ?}
      ?};
      {? (INP.SCSQL='' & (INP.D=date(0,0,0) & INN.MG().TYP*'DOST' | (~_only & INP.C=0))) | (~_only & INP.C=0) |
         (+(2-$frac(INP.SS))>INP.M().DOKL)
      || __kom_gr:='Brak danych dostawy, (inwentaryzacja: %1).'@[INN.SYM];
         _no_dt:={? INP.D=date(0,0,0) || 'daty' || '' ?};
         _no_cn:={? ~_only & INP.C=0 || {? _no_dt='' || 'ceny' || ', ceny' ?} || '' ?};

         _txt:='%1, ze spisu: %2, brak: %3%4'[INP.M().KTM,$INP.SS,_no_dt,_no_cn];
         _wyn:=_txt;
         exec('add_kom','#message',_txt,4)
      ?};
      INP.next()
   !}
?};
INP.cntx_pop();
_wyn


\spr_zaki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Sprawdzanie daty zakonczenia inwentaryzacji
::   WY: '' lub akronim pola do poprawy
::  OLD: \spr_zaki/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? INN.D=date(0,0,0)
|| FUN.info('Podaj datę zakończenia.'@); _wyn:='D'
|? (INN.D~1)<>ST.AR
|| FUN.info('Data zakończenia inwentaryzacji\nmusi zawierać się w aktywnym roku.'@); _wyn:='D'
|? INN.D<INN.DI
|| FUN.info('Data zakończenia inwentaryzacji\nnie może być mniejsza od daty rozpoczęcia inwentaryzacji.'@); _wyn:='D'
|? INN.D=INN.DI & INN.T<INN.TI
|| FUN.info('Czas zakończenia inwentaryzacji\nnie może być mniejszy od czasu rozpoczęcia inwentaryzacji.'@); _wyn:='T'
|? ({? 0 & INN.DI=INN.D & INN.TI<>INN.T & INN.T<>time(0,0,0) & INN.TYP<>'A'
    || _oki:={? exec('sprzoddo','magazyn_inw',INN.DI,INN.DI,INN.TI,INN.TI,INN.TYP='A',INN.ref())>0 || 0 || 1 ?}
    || _oki:=0
    ?};
    exec('sprzoddo','magazyn_inw',INN.DI,INN.D,INN.TI,INN.T,INN.TYP='A',INN.ref())>0)
|| {? ~_oki & INN.TYP='A'
    & FUN.ask('W okresie\nod daty rozpoczęcia inwentaryzacji: %1, godzina: %3\n'
       'do daty zakończenia inwentaryzacji: %2, godzina: %4\n'
       'Wystawiono dokumenty.'
       '\nNiemożliwe zakończenie inwentaryzacji.'
       '\nNależy zmienić datę lub czas zakończenia inwentaryzacji.'
       '\n\nWyświetlić dokumenty?'@[form(INN.DI),form(INN.D),form(INN.TI),form(INN.T)])
   || X_Xc.select()
   |? ~_oki & INN.TYP='C'
   || _opc:=FUN.choice('W okresie\nod daty rozpoczęcia inwentaryzacji: %1, godzina: %3\n'
       'do daty zakończenia inwentaryzacji: %2, godzina: %4\n'
       'Wystawiono dokumenty.'
       '\n\nWybierz jedną z opcji?'@[form(INN.DI),form(INN.D),form(INN.TI),form(INN.T)],
       ,'&Wyświetlić dokumenty'@,'&Zakończyć inwentaryzację');
      {? _opc=1 || X_Xc.select(); _oki:=0
      |? _opc=0 || _oki:=0
      |? _opc=2 || _oki:=1
      ?}
   ?};
   {? ~_oki || _wyn:='D' ?}
|| 1
?};
_wyn


\sprzoddo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza akceptacje dokumentow do danej daty
::   WE: _a - od data
::       _b - do daty
::       _c - od godziny
::       _d - do godziny
::       [_e] - 1-dla pełnej 0-bez znaczenia (domyślnie)
::       [_f] - ref sprawdzanej inwentaryzacji
::   WY: ilosc dokumentow
::  OLD: \sprzoddo/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_tmod:={? var_pres('_c')=type_of(time()) || _c || time(0,0,0) ?};
_tmdo:={? var_pres('_d')=type_of(time()) || _d || time(0,0,0) ?};
_typA:={? var_pres('_e')=type_of(0) || _e || 0 ?};
_innA:={? ~_typA & var_pres('_f')=type_of(null()) || _f || null() ?};

VAR_DEL.delete('X_Xc');
X_Xc:=exec('tab_zokr','magdok_wspolne',_a,0,_b,,,_tmod,_tmdo,_typA,_innA);
X_Xc.clear;
X_Xc.prefix('');
{? X_Xc.size
|| _wyn:=1;
   _acr:=X_Xc.mk_sel('Dokumenty wystawione w okresie od: %1 do: %2'@[form(_a),form(_b)],'P',0,'spr_znagx_xc')
?};
{? _wyn
|| X_Xc.win_fld(_acr,,'MAGAZYN',,,'8, 10, 10',,,'Magazyn'@);
   X_Xc.win_fld(_acr,,'TYP',,,'8, 14, 14',,,'Typ dokumentu'@);
   X_Xc.win_fld(_acr,,'NR',,,'9, 9, 9',,,'Numer'@);
   X_Xc.win_fld(_acr,,'DATA',,,,,,'Data'@);
   X_Xc.win_fld(_acr,,'GODZ',,,,,,'Godzina'@);
   X_Xc.win_fld(_acr,,'SYMBOL',,,'10, 20, 0',,,'Symbol'@);
   X_Xc.win_fld(_acr,,'OKRES',,,,,,'Okres'@);
   X_Xc.win_fld(_acr,,'AKC',,,,,,'Akc'@);
   X_Xc.win_act(_acr,,'Kolejność');
   X_Xc.win_sel(_acr)
?};
_wyn


\modifrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: modyfikuje rezerwacje bezwarunkowe o dany dokument inwentaryzacji (rozchod)
::   WE: _a - ref dokumentu inwentaryzacyjnego
::   WY: 1-zdecydowano sie na przepiecie rezerwacji 0-rezygnacja 2-brak pozycji do przepiecia
::  OLD: \modifrez/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=2;
_poz:=tab_tmp(2,'MAT','STRING[16]',''
       ,'DST','STRING[16]',''
       ,'ILE','REAL',''
       ,'STN','REAL',''
       ,'SRR','REAL',''
       ,'SRT','REAL',''
       ,'WYD','REAL','');

ND.cntx_psh();
DK.cntx_psh();
ZK_N.cntx_psh();
ZK_P.cntx_psh();
REZ.cntx_psh();
:: pobranie pozycji z dokumentu dla ktorych sa rezerwacje bezwarunkowe
DK.index('DOKMAG');
DK.prefix(_a);
{? DK.first()
|| _mag:=DK.N().MAG;
   {!
   |? _jest:=0;
      _poz.clear();
      {? ~_poz.find_key($DK.M)
      || _buf:=exec('ilmatrez','magazyn_inw',DK.M,_mag,$_a);
         _buf.clear();
         {? _buf.first()
         || _jest:=1;
            {!
            |? _poz.clear();
               _poz.blank();
               _poz.MAT:=$DK.M;
               _poz.DST:=_buf.DST;
               _poz.SRR:=_buf.SRR;
               _poz.SRT:=_buf.SRT;
               _poz.WYD:=_buf.WYD;
               _poz.STN:={? _poz.DST='xxxx'
                         || exec('obl_stan','magazyn_stan',DK.M,1,_mag);
                            BEER.S-(BEER.SRR+BEER.SRT+BEER.SW)
                         || -1
                         ?};
               _poz.add(1);
               _buf.next()
            !}
         ?};
         obj_del(_buf)
      || _jest:=1
      ?};
      {? _jest
      || _dost:={? DK.SRDK<>'' || DK.SRDK || 'xxxx' ?};
         _add:=0;
         _poz.clear();
         {? _poz.find_key($DK.M,_dost)
         || {? _dost<>'xxxx' & _poz.STN=-1
            || _poz.STN:=exec('FindInSet','#table','SC','SRDK',_poz.DST,_poz.DST,"SC.S",,,0);
               _poz.STN-=(_poz.SRR+_poz.SRT+_poz.WYD);
               _poz.put(1)
            ?};
            _poz.ILE+=DK.IL;
            _poz.STN+=DK.IL;
            _poz.put(1);
            {? _dost<>'xxxx' & (_poz.clear(); _poz.find_key($DK.M,'xxxx'))
            || _poz.ILE+=DK.IL;
               _poz.STN+=DK.IL;
               _poz.put(1)
            ?}
         || {? _dost<>'xxxx' & (_poz.clear(); _poz.find_key($DK.M,'xxxx'))
            || _poz.ILE+=DK.IL;
               _poz.STN+=DK.IL;
               _poz.put(1)
            ?}
         ?}
      ?};
      DK.next()
   !}
?};
:: kontrola czy rezerwacje nie przekraczaja stanu
_poz.clear();
{? _poz.first()
|| {!
   |? {? _poz.STN>=_poz.ILE
      || _poz.del()
      || _poz.next()
      ?}
   !}
?};

:: zmiana rezerwacji
_poz.clear();
{? _poz.first()
|| VAR_DEL.delete('__matakt');
   __matakt:=tab_tmp(2,'REF','STRING[16]',''
              ,'NRK','INTEGER',''
              ,'ILR','REAL',''
              ,'ZKP','STRING[16]',''
              ,'ZKN','STRING[16]','');
   {! _i:=1..2
   |! _poz.first();
      {? _i=1
      ||
::       wg konkretnych dostaw
         _ndx:=REZ.ndx_tmp('',0,'M',,,'MG',,,'RODZ',,,'SC',,,'SC',,,'TYP',,,'NRK',,1)
      ||
::       ogolne rezerwacje
         _ndx:=REZ.ndx_tmp('',0,'M',,,'MG',,,'RODZ',,,'TYP',,,'NRK',,1)
      ?};
      {!
      |? _mat:=exec('FindAndGet','#table','M',_poz.MAT,,,null());
         _warunek:={? _i=1 || _poz.DST<>'xxxx' |? _i=2 || _poz.DST='xxxx' || 0 ?};
         {? _warunek
         || _ilebez:=_poz.ILE-_poz.STN;
            REZ.index(_ndx);
            {? _i=1
            || REZ.prefix(_mat,_mag,'B',_poz.DST,_poz.DST)
            || REZ.prefix(_mat,_mag,'B')
            ?};
            {? REZ.first()
            || {!
               |? {? (';ZT'*REZ.TYP)>1
                  || _ref:=REZ.ref(); _ok:=REZ.next();
                     REZ.cntx_psh();
                     REZ.clear();
                     {? REZ.seek(_ref)
                     || {? REZ.ILR<=_ilebez
                        || _ilebez-=REZ.ILR;
                           {? _i=1
                           || _poz.cntx_psh();
                              _poz.clear();
                              _poz.prefix($_mat,'xxxx');
                              {? _poz.first()
                              || _poz.ILE-=REZ.ILR;
                                 {? REZ.RODZ='Z' || _poz.SRR-=REZ.ILR ?};
                                 {? REZ.RODZ='T' || _poz.SRT-=REZ.ILR ?};
                                 _poz.put(1)
                              ?};
                              _poz.cntx_pop()
                           ?};
                           {? REZ.TYP='T'
                           || REZ.del()
                           || REZ.RODZ:='W';
                              REZ.RP_REZ:=exec('rp_rez','rezerwacje',REZ.TYP,REZ.RODZ,REZ.ZL,REZ.ZLZAM);
                              REZ.put(1);
                              exec('aktznzkp','zamsiw_poz',REZ.ZK_P,1);
                              exec('admatzkp','rezerwacje',$REZ.M,REZ.ZK_P().NR,REZ.ZK_P().ILP,$REZ.ZK_P().N,$REZ.ZK_P)
                           ?}
                        || {? REZ.TYP='T'
                           || REZ.ILR-=_ilebez;
                              exec('uzgildod','rezerwacje');
                              REZ.put(1)
                           || REZ.ILR-=_ilebez;
                              exec('uzgildod','rezerwacje');
                              REZ.put(1);
                              exec('update','rezerwacje','ZK_P',REZ.ZK_P,REZ.ZK_P().RMAG,REZ.M
                                                               ,_ilebez,,'W',,1,REZ.ZK_P().NR);
                              exec('aktznzkp','zamsiw_poz',REZ.ZK_P,1);
                              exec('admatzkp','rezerwacje',$REZ.M,REZ.ZK_P().NR,REZ.ZK_P().ILP,$REZ.ZK_P().N,$REZ.ZK_P)
                           ?};
                           {? _i=1
                           || _poz.cntx_psh();
                              _poz.clear();
                              _poz.prefix($_mat,'xxxx');
                              {? _poz.first()
                              || _poz.ILE-=_ilebez;
                                 {? REZ.RODZ='Z' || _poz.SRR-=_ilebez ?};
                                 {? REZ.RODZ='T' || _poz.SRT-=_ilebez ?};
                                 _poz.put(1)
                              ?};
                              _poz.cntx_pop()
                           ?};
                           _ilebez:=0
                        ?}
                     ?};
                     REZ.cntx_pop()
                  || _ok:=REZ.next()
                  ?};
                  _ilebez>0 & _ok
               !}
            ?}
         ?};
         _poz.next()
      !};
      REZ.ndx_drop(_ndx)
   !};
   exec('akt_rezy','rezerwacje');
   VAR_DEL.delete('__matakt')
?};

ND.cntx_pop();
DK.cntx_pop();
ZK_N.cntx_pop();
ZK_P.cntx_pop();
REZ.cntx_pop();
obj_del(_poz);
_wyn


\ilmatrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: oblicza ilosc rezerwacji dla danego materialu w danym magazynie
::   WE: _a - ref materialu
::       _b - ref magazynu
::       _c - ref SQL INW-
::   WY: tabela wynikow
::  OLD: \ilmatrez/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=tab_tmp(1,'DST','STRING[16]',''
       ,'SRR','REAL',''
       ,'SRT','REAL',''
       ,'WYD','REAL','');
REZ.cntx_psh();
REZ.index('MG_M');
REZ.prefix(_b,_a,'B');
{? REZ.first()
|| {!
   |? {? (';ZT'*REZ.TYP)>1
       | (REZ.TYP='W' & REZ.SC<>'' & (_c='' | $REZ.DK().N<>_c))
      || _dost:={? REZ.SC<>'' || REZ.SC || 'xxxx' ?};
         _wyn.clear();
         {? _wyn.find_key(_dost)
         || {? REZ.TYP='T' || _wyn.SRT+=REZ.ILR ?};
            {? REZ.TYP='Z' || _wyn.SRR+=REZ.ILR ?};
            {? REZ.TYP='W' || _wyn.WYD+=REZ.ILR ?};
            _wyn.put(1)
         || _wyn.blank();
            _wyn.DST:=_dost;
            {? REZ.TYP='T' || _wyn.SRT:=REZ.ILR ?};
            {? REZ.TYP='Z' || _wyn.SRR:=REZ.ILR ?};
            {? REZ.TYP='W' || _wyn.WYD+=REZ.ILR ?};
            _wyn.add(1)
         ?};
         {? _dost<>'xxxx'
         || {? _wyn.find_key('xxxx')
            || {? REZ.TYP='T' || _wyn.SRT+=REZ.ILR ?};
               {? REZ.TYP='Z' || _wyn.SRR+=REZ.ILR ?};
               _wyn.put(1)
            || _wyn.blank();
               _wyn.DST:='xxxx';
               {? REZ.TYP='T' || _wyn.SRT:=REZ.ILR ?};
               {? REZ.TYP='Z' || _wyn.SRR:=REZ.ILR ?};
               _wyn.add(1)
            ?}
         ?}
      ?};
      REZ.next()
   !}
?};
REZ.cntx_pop();
_wyn


\oldPal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: tworzy starą/nową paletę na podstawie podanej
::   WE: _a - paleta
::       _b - ref SQL INN
::   WY: ref nowej palety lub null()
::  OLD: \oldPal/mws2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();
PAL.cntx_psh();
PAL.clear();
{? PAL.seek(_a)
|| PAL.KODK:=exec('newKod','magazyn_inw',$_a);
   PAL.AKT:='N';
   PAL.STAN:='I';
   PAL.R:='W';
   PAL.RSQL:=_b;
   _wyn:={? PAL.add(1) || PAL.ref() || null() ?}
?};
PAL.cntx_pop();
_wyn


\newKod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: zwraca nowy kod kreskowy dla palety wg ref-a SQL
::   WE: _a - paleta ref SQL
::   WY: nowy kod kreskowy
::  OLD: \newKod/mws2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_num:=0;
PAL.cntx_psh();
PAL.index('PAL');
PAL.prefix(_a);
{? PAL.first()
|| {!
   |? {? PAL.AKT='N' & PAL.STAN='I' & (+PAL.KODK)=24
      || _wsk:=#(PAL.KODK+8);
         {? _wsk>_num || _num:=_wsk ?}
      ?};
      PAL.next()
   !}
?};
PAL.cntx_pop();
_wyn:=_a+form(_num+1,-8,0,'99');
_wyn


\inn_be_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Przed redakcją pól tabeli inn
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();

{? exec('FindInSet','#table','INP','INP',INN.ref())=null()
   & exec('FindInSet','#table','INX','INN',INN.ref())=null()
|| {? _afld='DI'     || exec('posDate','#field',3); 1
   |? _afld='TYP'    || exec('prinntyp','magazyn_inw')
   |? _afld='ARKPOM' || params_exec('prarkpom','magazyn_inw')
   || 1
   ?}
|| 0
?}


\ark_dol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: dolaczenie dostawy
::  OLD: \ark_dol/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
ATR.MJS:='INP';
{? INN.get()
||
   {? INN.r_lock(1,1,1)
   || INN.r_unlock()
   || FUN.info('Inwentaryzacja zablokowana przez innego użytkownika.'@);
      return(0)
   ?};
   {? FUN.ask('Czy dołączyć dodatkową dostawę do arkusza?'@)
   ||
      POMOC.RODZ:='T';
      BEER.INPSUM:=0;
      BEER.INPJM:=null();
      M_ATR.blank();
      INP.blank();
      {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !};
      {? INP.add(1) & INP.r_lock(1,1)
      ||
         INP.win_edit({? MG.TYP='EWIDEN' || 'REDE' || 'RED2' ?});
         exec('set_efld_opt_poz','magazyn_inw');
         exec('set_efld_m','magazyn_inw');
         {? INP.edit("exec('spr_new','magazyn_inw')")
         ||
            INP.AKC:='T';
            INP.KTM:=INP.M().KTM;
            INP.NKTM:=INP.M().N;
            INP.MGR:=INP.M().MGR;
            INP.put(1)
         ||
            INP.del(1)
         ?};
         INP.r_unlock()
      ?}
   ?}
||
   FUN.info('Dokument został usunięty.'@)
?};
''


\idel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: przed usunieciem pozycji inwentaryzacji
::  OLD: \idel/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? INN.get()
||
   _typ:=INP.IN().TYP='A';
   {? _typ
   || {? INP.AKC='T'
      || FUN.info('Pozycja zaakceptowana.\nNiemożliwe usunięcie pozycji.'@)
      |? (INP.SCSQL='' | INP.SE=0) & FUN.ask('Czy usunąć daną pozycję?'@)
      || {? INP.r_lock(1,1)
         || exec('usu_inpd','magazyn_inw',INP.ref);
            INP.del
         || FUN.info('Pozycja zablokowana przez innego użytkownika.'@)
         ?}
      || FUN.info('Pozycja dotyczy inwentaryzacji pełnej dla magazynu.\nNiemożliwe usunięcie pozycji.'@)
      ?}
   || _typ:=FUN.choice('UWAGA. Zaakceptowane pozycje arkusza nie zostaną usunięte.\n\n'
             'Wybierz typ usunięcia:'@,1,'Dana dostawa'@,'Indeks: %1'@[INP.M().KTM]
             ,'Grupa: %1'@[INP.M().MGR().KOD],'Wszystkie'@);
      {? _typ
      ||
         {? INN.get() & INN.r_lock(1,1,1)
         || {? INN.STAT_REJ='N'
            || INN.r_unlock()
            || INN.r_unlock();
               FUN.info('Inwentaryzacja jest już zakończona.'@
                  +'\nAkcja została przerwana.'@);
               return(0)
            ?}
         || FUN.info('Inwentaryzacja zablokowana przez innego użytkownika.'@
               +'\nAkcja została przerwana.'@);
            return(0)
         ?}
      ?};
      {? _typ=1
      || {? INP.AKC='T'
         || FUN.info('Pozycja zaakceptowana.\nNiemożliwe usunięcie pozycji.'@)
         |? INP.r_lock(1,1)
         || exec('usu_inpd','magazyn_inw',INP.ref);
            INP.del
         || FUN.info('Pozycja zablokowana przez innego użytkownika.'@)
         ?}
      |? _typ=2
      ||
         _nag:=INP.IN; _ktm:=INP.M;
         INP.cntx_psh;
         INP.index('KOD');
         INP.prefix(_nag,_ktm);
         {? INP.first()
         || {!
            |? {? INP.AKC='N' & INP.r_lock(1,1)
               || exec('usu_inpd','magazyn_inw',INP.ref);
                  _ok:=INP.del()
               || _ok:=INP.next
               ?};
               _ok
            !}
         ?};
         INP.cntx_pop()
      |? _typ=3
      ||
         _nag:=INP.IN; _mgr:=INP.M().MGR;
         INP.cntx_psh;
         INP.index('MGR');
         INP.prefix(_nag,_mgr);
         {? INP.first()
         || {!
            |? {? INP.AKC='N' & INP.r_lock(1,1)
               || exec('usu_inpd','magazyn_inw',INP.ref);
                  _ok:=INP.del()
               || _ok:=INP.next
               ?};
               _ok
            !}
         ?};
         INP.cntx_pop()
      |? _typ=4
      ||
         {? INP.first()
         || {!
            |? {? INP.AKC='N' & INP.r_lock(1,1)
               || exec('usu_inpd','magazyn_inw',INP.ref);
                  _ok:=INP.del()
               || _ok:=INP.next
               ?};
               _ok
            !}
         ?}
      ?}
   ?};
   BEER.SS:=BEER.SE:=BEER.SR:=BEER.RIM:=BEER.RIP:=BEER.SIM:=BEER.SIP:=0;
   BEER.SS2:=BEER.SE2:=BEER.SR2:=BEER.RIM2:=BEER.RIP2:=BEER.SIM2:=BEER.SIP2:=0
||
   FUN.info('Dokument został usuniety.'@)
?};
1


\izgodny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: zgodnosc dla indeksu (dostawy)
::  OLD: \izgodny/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? INN.r_lock(1,1,1)
|| INN.r_unlock()
|| FUN.info('Inwentaryzacja zablokowana przez innego użytkownika.'@);
   return(0)
?};
{? INP.AKC<>'T' & INP.r_lock(1,1)
|| {? _=0 || _a:=1; _jeden:=1 || _jeden:=0 ?};
   {? _a=1 || INP.SS:=INP.SE; INP.SS2:=INP.SE2
   |? _a=2 || INP.SS:=0; INP.SS2:=0
   |? _a=3 || {? INP.SE=INP.SS || INP.SS:=0; INP.SS2:=0 || INP.SS:=INP.SE; INP.SS2:=INP.SE2 ?}
   ?};
   INP.WS2:={? INP.SS2>0 & INP.SS>0 || INP.SS/INP.SS2
            |? INP.SE2>0 & INP.SE>0 || INP.SE/INP.SE2
            |? INP.J2<>null() & (INP.SS2=0 | INP.SE2=0) || exec('oblWSP','jm',INP.M)
            || 0
            ?};
   INP.AKC:='T';
   INP.put(1);
   INP.r_unlock();
   {? _jeden || INP.next() ?}
|? INP.AKC='T'
|| FUN.info('Pozycja zaakceptowana.'@)
|| FUN.info('Pozycja zablokowana przez innego użytkownika.'@)
?}


\kryt_zg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: zgodnosc wg kryterium
::  OLD: \kryt_zg/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyb:=obj_new(3);
_wyb[1]:='Indeks: %1'@[INP.M().KTM];
_wyb[2]:='Grupa: %1'@[INP.M().MGR().KOD];
_wyb[3]:='Wszystkie pozycje'@;

_typ:=FUN.choice('Operacja pomija pozycje zaakceptowane.\n'
       'Wybierz jedną z opcji:'@,1,_wyb[1],_wyb[2],_wyb[3]);

_opc:={? _typ
      || FUN.choice('Wybrano opcję: << %1 >>.\nWybierz rodzaj operacji: '@[_wyb[_typ]],1
          ,'Uzgodnienie'@,'Zerowanie'@,'Inwersja'@)
      || 0
      ?};

{? _typ & _opc
||
   {? INN.get() & INN.r_lock(1,1,1)
   || {? INN.STAT_REJ='N'
      || INN.r_unlock()
      || INN.r_unlock();
         FUN.info('Inwentaryzacja jest już zakończona.'@
            +'\nAkcja została przerwana.'@);
         return(0)
      ?}
   || FUN.info('Inwentaryzacja zablokowana przez innego użytkownika.'@
         +'\nAkcja została przerwana.'@);
      return(0)
   ?}
?};

{? _opc & _typ=1
||
   _nag:=INP.IN; _ktm:=INP.M;
   INP.cntx_psh;
   INP.index('KOD');
   INP.prefix(_nag,_ktm);
   {? INP.first
   || {!
      |? {? INP.AKC<>'T' & INP.r_lock(1,1)
         || exec('izgodny','magazyn_inw',_opc);
            INP.r_unlock
         ?};
         INP.next
      !}
   ?};
   INP.cntx_pop
|? _opc & _typ=2
||
   _nag:=INP.IN; _mgr:=INP.M().MGR;
   INP.cntx_psh;
   INP.index('MGR');
   INP.prefix(_nag,_mgr);
   {? INP.first
   || {!
      |? {? INP.AKC<>'T' & INP.r_lock(1,1)
         || exec('izgodny','magazyn_inw',_opc);
            INP.r_unlock
         ?};
         INP.next
      !}
   ?};
   INP.cntx_pop
|? _opc & _typ=3
||
   _nag:=INP.IN;
   INP.cntx_psh;
   INP.index('INP');
   INP.prefix(_nag);
   {? INP.first
   || {!
      |? {? INP.AKC<>'T' & INP.r_lock(1,1)
         || exec('izgodny','magazyn_inw',_opc);
            INP.r_unlock
         ?};
         INP.next
      !}
   ?};
   INP.cntx_pop
?};
''


\wycakcin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: wycofanie akceptacji zaznaczonych pozycji
::  OLD: \wycakcin/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? INN.get()
||
   _tab:=INP.sel_aget();
   INP.sel_adel();
   {? _tab.size>0 | INP.AKC='T'
   ||
      {? FUN.ask({? _tab.size || 'Czy wycofać akceptację zaznaczonych pozycji arkusza?'@
                              || 'Czy wycofać akceptację pozycji arkusza?'@ ?})
      ||
         {? _tab.size
         || _tab.clear;
            {? _tab.first
            || {!
               |? INP.cntx_psh;
                  INP.clear; {? INP.seek(_tab.REF,INP.name) || INP.AKC:='N'; INP.put(1) ?};
                  INP.cntx_pop;
                  _tab.next
               !}
            ?}
         || INP.AKC:='N';
            INP.put(1)
         ?}
      ?}
   |? _tab.size=0 | INP.AKC='N'
   ||
      FUN.info('Pozycja inwentaryzacji nie jest jeszcze zaakceptowana.'@)
   ?}
||
   FUN.info('Dokument został usunięty.'@)
?};
''


\disp_inp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: display dla pozycji inwentaryzacji
::  OLD: \disp_inp/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
INP.cntx_psh;
_edit:=INP.win_edit('?');
_atrmjs:=ATR.MJS;
ATR.MJS:='INP';
{? exec('czytadkc','mat_atr',INP.DK_C,INP.RDKC)
|| _ndit:='DISP';
   INP.win_edit(_ndit)
?};
exec('set_efld_opt_poz','magazyn_inw');
exec('set_efld_m','magazyn_inw');
INP.display();
INP.win_edit(_edit);
INP.cntx_pop;
ATR.MJS:=_atrmjs;
1


\szuk_inp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: Przed Szukaj tabeli INP
::  OLD: \szuk_inp/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
INP.win_edit('SZUK')


\uzupdane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: uzupelnienie danych dla nowej pozycji wg arkusza pomocniczego
::  OLD: \uzupdane/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_ewi_new:=ST.MAG().TYP*'EWI' & ~INP.SE & ~exec('sprewidost','magazyn_inw',INP.M,INP.IN().MG,INP.IN().DI,INP.IN);
{? INP.SCSQL<>'' & ~_ewi_new
|| FUN.info('Funkcja dostępna tylko dla nowej dostawy.'@)
|? (INP.SCSQL='' | INP.C=0 | _ewi_new) & FUN.ask('Czy uzupełnić dane danej dostawy?'@)
|| POMOC.RODZ:='T';
   BEER.INPSUM:=0;
   INP.get();

   ATR.MJS:='INP';
   ATR.M_ATR:=INP.M().M_ATR;
   INP.M().M_ATR().SYM;
   exec('set_efld_opt','mat_atr','INP');
   _dkc:={? INP.DK_C<>null() & INP.SCSQL<>''
         || exec('FindAndGet','#table','SC',INP.SCSQL,,"DK_C",null())=null()
         || INP.DK_C=null()
         ?};
   _bufscean:={? INP.SCEAN<>'' & _dkc || INP.SCEAN || '' ?};
   {? (1+INP.IN().MG().TYP)<>'D'
    | {? INP.SCEAN<>'' || ~_dkc || INP.M().M_ATR=null() ?}
    | {? INP.SCSQL<>'' || ~_dkc | {? ~BEER.INPSUM || INP.SS<=INP.SE || BEER.SE<=BEER.SS ?} || 0 ?}
    | INP.IN().ARKPOM
   || ATR.FLAG_ED:=0;
      ATR.FLAG:=0
   || ATR.FLAG_ED:=(1+INP.IN().MG().TYP)='D' & ATR.CZY_ATR & ATR.M_ATR().EDIT;
      ATR.FLAG:={? ATR.FLAG_ED & INP.M().M_ATR<>null() || 2 || 0 ?}
   ?};
   {? ATR.FLAG_ED || {? INP.M().M_ATR().EDIT || ATR.FLAG_ED:=2 ?} ?};
   {? INP.DK_C<>null() & INP.DK_C().M_ATR<>null()
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('INP.DK_C().WAR'+form(_i,-2,,'99')))() !}
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
   ?};
   INP.win_edit('RED2');
   {? INP.edit("exec('spr_new','magazyn_inw')")
   || {? _bufscean<>'' || INP.SCEAN:=_bufscean ?};
      INP.AKC:='T';
      INP.KTM:=INP.M().KTM;
      INP.NKTM:=INP.M().N;
      INP.MGR:=INP.M().MGR;
      INP.put(1)
   ?}
?};
''


\wyc_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: wycofanie akceptacji inwentaryzacji
::  OLD: \wyc_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('czy_z_ok','okresy',1,1,ST.AR,ST.AM,ST.MAG)
|| _ok:=0
|? exec('spr_akci','magazyn_inw',1)
|| FUN.info('Następna inwentaryzacja została zakończona.\nNiemożliwe wycofanie akceptacji.'@);
   _ok:=0
|? INN.D<>date(0,0,0) & exec('spr_akdd','magazyn_inw')
  & FUN.ask('Czy anulować zakończenie inwentaryzacji\nz jednoczesnym usunięciem dokumentów różnicowych?'@)
||
:: anulowanie akceptacji
   do();
   _ok:=1;
   _nrp:=INN.INP; _nrm:=INN.INR; _mag:=INN.MG; _ar:=INN.D~1; _am:=INN.D~2;

   {? var_pres('__zam')>100 || _no_stat:=0 || _no_stat:=1 ?};
   {? _no_stat=1 || exec('utw_zk_tymc','zamsiw_wspolne') ?};

   ND.cntx_psh();
   ND.index('NAGDOK');
   ND.prefix();
   {? INN.INP_R<>'' & ND.seek(INN.INP_R)
   || {? ND.Z='T'
      || _ok:=0; undo
      || {? exec('n_usun','magdok_nag',0,0)=0 || _ok:=0; undo() ?}
      ?}
   || _ok:=1
   ?};
   ND.index('NAGDOK');
   ND.prefix();
   {? INN.INR_R<>'' & ND.seek(INN.INR_R)
   || {? ND.Z='T'
      || _ok:=0; undo
      || {? exec('n_usun','magdok_nag',0,0)=0 || _ok:=0; undo() ?}
      ?}
   || _ok:=1
   ?};
   ND.cntx_pop();
   DK_LN.cntx_psh();
   DK_LN.clear();
   {? INN.DK_LN_R<>''
   || DK_LN.clear();
      {? DK_LN.seek(INN.DK_LN_R,form(8+INN.DK_LN_R))
      || {? DK_LN.AKC='T'
         || _ok:=0; undo()
         || exec('deldk_ln','magdok_wymiary',1)
         ?}
      ?}
   ?};
   DK_LN.cntx_pop();
   {? _ok
   || INN.D:=date(0,0,0); INN.T:=time(0,0,0); INN.INP:=0; INN.INR:=0;
      INN.INP_S:=INN.INR_S:=INN.INP_R:=INN.INR_R:=INN.DK_LN_R:=''; INN.CZYDK_LN:=0;
      INN.STAT_REJ:='N';
      {? ~INN.put(1)
      || _ok:=0; undo()
      || {? _no_stat=1 || exec('odt_zk_tymc','zamsiw_wspolne') ?};
         {? INN.TYP='C' || exec('aktualse','magazyn_stan') ?}
      ?}
   ?};
   end()
|? INN.D=date(0,0,0)
|| FUN.info('Arkusz nie został zaakceptowany.'@)
|| ''
?}


\spr_akdd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy zaakceptowano dokumenty
::   WY: 1- OK 0- nie jest dobrze
::  OLD: \spr_akdd/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_nrp:=INN.INP; _nrm:=INN.INR; _mag:=INN.MG; _ar:=INN.D~1; _am:=INN.D~2;
_nrp_r:=INN.INP_R; _nrm_r:=INN.INR_R;
_wyn:=1;

ND.cntx_psh();
{? _nrp
||
   ND.index('NAGDOK');
   ND.prefix();
   {? ND.seek(_nrp_r,form(8+_nrp_r))
   || {? ND.Z='T'
      || {? INN.RODZ='I'
         || FUN.info('Zaakceptowano dokumenty poinwentaryzacyjne.\nUsunięcie akceptacji niemożliwe.'@)
         || FUN.info('Zaakceptowano dokumenty przeceny.\nUsunięcie akceptacji niemożliwe.'@)
         ?};
         _wyn:=0
      ?}
   ?}
?};
{? _wyn & _nrm
||
   ND.index('NAGDOK');
   ND.prefix();
   {? ND.seek(_nrm_r,form(8+_nrm_r))
   || {? ND.Z='T'
      || {? INN.RODZ='I'
         || FUN.info('Zaakceptowano dokumenty poinwentaryzacyjne.\nUsunięcie akceptacji niemożliwe.'@)
         || FUN.info('Zaakceptowano dokumenty przeceny.\nUsunięcie akceptacji niemożliwe.'@)
         ?};
         _wyn:=0
      ?}
   ?}
?};
ND.cntx_pop();
DK_LN.cntx_psh();
{? _wyn & INN.DK_LN_R<>''
|| DK_LN.clear();
   {? DK_LN.seek(INN.DK_LN_R,form(8+INN.DK_LN_R))
   || {? DK_LN.AKC='T'
      || FUN.info('Zaakceptowano dokument reorganizacji.\nUsunięcie akceptacji niemożliwe.'@);
         _wyn:=0
      ?}
   ?}
?};
DK_LN.cntx_pop();
_wyn


\akt_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: oblicza roznice dla inwentaryzacji
::  OLD: \akt_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_isAkt:=INN.D=date(0,0,0) & (INN.TYP='C' | (INN.TYP='A' & INN.TI<>time(0,0,0)));
{? _isAkt
|| {? exec('FindInSet','#table','INP','KOD',INN.ref())=null
   || FUN.info('Brak pozycji na arkuszu spisowym.'@)
   |? FUN.ask('Aktualizować arkusz?'@)
   || exec('aktualse','magazyn_stan')
   ?}
|| FUN.info('Aktualizacja możliwa dla inwentaryzacji\nciągłej, niezaakceptowanej.'@)
?};
exec('plus_min','magazyn_inw');
''


\ark_pom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: arkusze pomocnicze lista + dolaczenie
::  OLD: \ark_pom/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
:: zmienna dla lokalizacji
EANX.MG:=INN.MG;
EANX.WYLZAL:={? EANX.MG().MWS='T' || 'N' || 'T' ?};
_ctrl_id:={? (1+INN.MG().TYP)='D' || '' || 'I' ?};

{? INN.ARKPOM
|| _czy_akc:=INN.D<>date(0,0,0);
   _czy_pal:=INN.MG().PAL='T';
   {? _czy_akc
   || _act:=INX.actions('WER',_ctrl_id+'WDUAT:WD')
   |? ~_czy_pal
   || _act:=INX.actions('WER',_ctrl_id+'W:W')
   ?};
   INX.index('INN');
   INX.prefix(INN.ref());
   INX.win_sel('WER');
   INX.select();
   INX.actions('WER','')
|| FUN.info('Funkcja dostępna wyłącznie dla arkusza wg arkuszy pomocniczych.'@)
?}


\rozn2inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: podglad i akceptacja dokumentow powiazanych z inwentura
::  OLD: \rozn2inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? INN.D=date(0,0,0)
|| FUN.info({? INN.RODZ='I' || 'Inwentaryzacja niezakończona.\nOperacja niemożliwa.'@
                            || 'Przecena niezakończona.\nOperacja niemożliwa.'@ ?})
|? INN.INP_R='' & INN.INR_R='' & INN.DK_LN_R=''
|| FUN.info('Brak powiązanych dokumentów magazynowych lub reorganizacji.'@)
|| VAR_DEL.delete('__infinw');

   __infinw:=tab_tmp(3,'LAB','STRING[50]',''
              ,'DAT','DATE',''
              ,'TYP','STRING[16]',''
              ,'SYM','STRING[50]',''
              ,'AKC','STRING[1]',''
              ,'SQL','STRING[16]','');

   _win_sel:=__infinw.mk_sel({? INN.RODZ='I'
                             || 'Dokumenty różnic inwentaryzacyjnych: %1'@[INN.SYM]
                             || 'Dokumenty przeceny %1'@[INN.SYM]
                             ?},'P',,'infinw_sel',,,,,'U');

   __infinw.win_fld(_win_sel,,'LAB',,,32,,1,'');
   __infinw.win_fld(_win_sel,,'DAT',,,10,3,1,'Data'@);
   __infinw.win_fld(_win_sel,,'TYP',,,16,,1,'Typ'@);
   __infinw.win_fld(_win_sel,,'SYM',,,40,,1,'Symbol'@);
   __infinw.win_act(_win_sel,0,'Formuła','&Zakończ'@@,,,"exec('zakoncz_2inn','magazyn_inw')",,0,,,,'Z');
   task_attach(exec('nd_dolacz_act_uid','magdok_nag','T','N'));
   task_attach(exec('nd_dolacz_act_uid','magdok_nag','N','N'));
   __infinw.win_act(_win_sel,0,'Formuła','&Akceptuj'@@,,,"exec('akc_2inn','magazyn_inw')",,0,,,,'A');
   task_attach('LMG_MAG_EAMG');
   __infinw.win_act(_win_sel,0,'Formuła','&Wycofaj'@@,,,"exec('wyc_2inn','magazyn_inw')",,0,1
      ,"exec('wyc_2inn','magazyn_inw')",,'W');
   __infinw.win_act(_win_sel,0,'Formuła','&Legenda'@@,,,"exec('legenda','color','__infinw#01')",,0,,,,'L');
   task_attach(exec('nd_dolacz_act_uid','magdok_nag','T','N'));
   task_attach(exec('nd_dolacz_act_uid','magdok_nag','N','N'));
   __infinw.win_act(_win_sel,0,'Rekord',,,,"exec('rozn2inn_actions','magazyn_inw')");
   __infinw.win_fml(_win_sel,,'SYM',,'ICON_BEFORE',exec('rozn2inn_sym_ib','magazyn_inw'));
   __infinw.win_sel(_win_sel);

   _msk:=ND.name()+3;
   _otw:=0;
   ND.cntx_psh();
   {? INN.INP_R<>''
   || {? ~_otw || exec('mag_open','open_tab',1+(form(8+INN.INP_R)+3),form(8+INN.INP_R)+2); _otw:=1 ?};
      ND.clear();
      {? ND.seek(INN.INP_R,form(8+INN.INP_R))
      || __infinw.clear();
         __infinw.blank();
         __infinw.LAB:=ND.TYP().NAZ;
         __infinw.DAT:=ND.D;
         __infinw.TYP:=ND.TYP().T;
         __infinw.SYM:=ND.SYM;
         __infinw.AKC:=ND.STAT_REJ;
         __infinw.SQL:=$ND.ref();
         __infinw.add(1)
      ?}
   ?};
   {? INN.INR_R<>''
   || {? ~_otw || exec('mag_open','open_tab',1+(form(8+INN.INR_R)+3),form(8+INN.INR_R)+2); _otw:=1 ?};
      ND.clear();
      {? ND.seek(INN.INR_R,form(8+INN.INR_R))
      || __infinw.clear();
         __infinw.blank();
         __infinw.LAB:=ND.TYP().NAZ;
         __infinw.DAT:=ND.D;
         __infinw.TYP:=ND.TYP().T;
         __infinw.SYM:=ND.SYM;
         __infinw.AKC:=ND.STAT_REJ;
         __infinw.SQL:=$ND.ref();
         __infinw.add(1)
      ?}
   ?};
   ND.cntx_pop();
   {? INN.DK_LN_R<>''
   || {? ~_otw || exec('mag_open','open_tab',1+(form(8+INN.DK_LN_R)+3),form(8+INN.DK_LN_R)+2); _otw:=1 ?};
      DK_LN.clear();
      {? DK_LN.seek(INN.DK_LN_R,form(8+INN.DK_LN_R))
      || __infinw.clear();
         __infinw.blank();
         __infinw.LAB:='Reorganizacja';
         __infinw.DAT:=DK_LN.DT;
         __infinw.TYP:='Inwentaryzacja';
         __infinw.SYM:=exec('record','#to_string',DK_LN.ref());
         __infinw.AKC:=DK_LN.STAT_REJ;
         __infinw.SQL:=$DK_LN.ref();
         __infinw.add(1)
      ?}
   ?};
   exec('mag_open','open_tab',1+_msk,_msk+2);

   __infinw.clear();
   {? __infinw.first() || __infinw.select() ?};
   VAR_DEL.delete('__infinw')
?}


\rek_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: rekord dla inwentaryzacji
::  OLD: \rek_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? INN.name()+3='wyc'
|| exec('inn_actions','magazyn_przec')
|| exec('inn_actions','magazyn_inw')
?};
{? INN.STAT_REJ='T' || 'INN#01#01' || '' ?}


\pr_sumss
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy rozpisujemy wg dostawy/sumy
::   WY: 0-wg dostawy 1-wg sumy
::  OLD: \pr_sumss/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.INPSUM


\po_sumss
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: po redakcji pola BEER.SE
::   WY: 1-wartosc dodatnia  0-jesli nie
::  OLD: \po_sumss/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_two:=cur_afld()='SE2';
_dokl:={? INP.M<>null || exec('jaka_dok_m','jm',INP.M) || 3 ?};
_dokl_s:=exec('jaka_dok_mjm','jm',INP.M,INP.J2,INP.M().J);
{? _dokl_s<0 || _dokl_s:=_dokl ?};

_wyn:=exec('itsPositive','#field',0);

{? _wyn & INP.J2<>null()
|| {? ~_two
   || _beerse2:=BEER.SE/INP.WS2 $ (_dokl_s+1);
      roundmet(BEER.MDOKL);
      {? BEER.SE=0 || BEER.SE2:=0
      |? BEER.SE2=0 | (_beerse2<>BEER.SE2 & FUN.ask('Przeliczyć ilość w drugiej jednostce ewidencyjnej?'@))
      || BEER.SE2:=_beerse2
      ?};
      roundmet(5)
   || BEER.SE2:=BEER.SE2 $ _dokl_s;
      roundmet(BEER.MDOKL);
      _beerse:=BEER.SE2*INP.WS2 $ _dokl;
      roundmet(5);
      {? BEER.SE=0 | (_beerse<>BEER.SE & FUN.ask('Przeliczyć ilość w jednostce podstawowej?'@)) || BEER.SE:=_beerse ?}
   ?}
?};
INP.WS2:={? BEER.SE2>0 & BEER.SE>0 || BEER.SE/BEER.SE2
         |? BEER.SS2>0 & BEER.SS>0 || BEER.SS/BEER.SS2
         |? INP.J2<>null() & (BEER.SS2=0 | BEER.SE2=0) || exec('oblWSP','jm',INP.M)
         || 0
         ?};
_stanew:=BEER.SE:=BEER.SE$_dokl;
_stanew2:=BEER.SE2:=BEER.SE2$_dokl_s;

{? _wyn & (1+INP.IN().MG().TYP)='D' & INP.SCSQL<>''
|| _dkc:={? INP.DK_C<>null() & INP.SCSQL<>''
         || exec('FindAndGet','#table','SC',INP.SCSQL,,"DK_C",null())=null()
         || INP.DK_C=null()
         ?};
   {? _dkc & BEER.SE>BEER.SS
   || ATR.MJS:='INP';
      ATR.M_ATR:=INP.M().M_ATR;
      INP.M().M_ATR().SYM;
      ATR.FLAG_ED:=(1+INP.IN().MG().TYP)='D' & ATR.CZY_ATR & ATR.M_ATR().EDIT;
      ATR.FLAG:={? ATR.FLAG_ED & INP.M().M_ATR<>null() || 2 || 0 ?};
      {? ATR.FLAG_ED || {? INP.M().M_ATR().EDIT || ATR.FLAG_ED:=2 ?} ?};
      {? INP.DK_C<>null() & INP.DK_C().M_ATR<>null()
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('INP.DK_C().WAR'+form(_i,-2,,'99')))() !}
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
      ?}
   |? INP.DK_C<>null()
   || ATR.FLAG_ED:=0;
      ATR.FLAG:=0;
      {? INP.DK_C<>null() & INP.DK_C().M_ATR<>null()
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('INP.DK_C().WAR'+form(_i,-2,,'99')))() !}
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
      ?}
   || ATR.FLAG_ED:=0;
      ATR.FLAG:=0;
      ATR.M_ATR:=null();
      M_ATR.blank(0);
      INP.DK_C:=null();
      {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
   ?};
   win_disp();
   BEER.SE:=_stanew;
   BEER.SE2:=_stanew2
?};
roundmet(5);
_wyn


\prbeerri
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdzenie czy mamy rozpisywac nadwyzke = czy Radiobuton aktywny BEER.RI
::   WY: 1-jezeli wg sumy  0-jesli nie
::  OLD: \prbeerri/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.INPSUM


\wyc_2inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: wycofanie akceptacji dokumentow
::  OLD: \wyc_2inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
INN.cntx_psh();
__infinw.cntx_psh();
_tab:=__infinw.sel_aget();
__infinw.sel_adel();
_msk:=ND.name()+3;
_no_sel:=~_tab.size();

_uprP:=exec('chk_EndOrAcc','#b__box','LMG_MAG_DAPZ','LMG_MAG_EWMG');
_uprW:=exec('chk_EndOrAcc','#b__box','LMG_MAG_DWYD','LMG_MAG_EWMG');
_uprR:=exec('chk_EndOrAcc','#b__box','LMG_MAG_DREO','LMG_MAG_AREO');

_uprA:={? _uprP=1 | _uprW=1 | _uprR=1 || 1
       |? _uprP=2 | _uprW=2 | _uprR=2 || 2
       |? _uprP=4 | _uprW=4 | _uprR=4 || 4
       || 0
       ?};
{? _uprA=2 & (_uprP=4 | _uprW=4 | _uprR=4) || _uprA:=1 ?};


{? _no_sel
|| _reo:=0;
   {? (5+__infinw.SQL)='nagdo'
   || _upr:={? exec('FindAndGet','#table',ND,__infinw.SQL,,"TYP().P",'N')='T' || _uprP || _uprW ?};
      _stat_rej:=exec('FindAndGet','#table',ND,__infinw.SQL,,"STAT_REJ",'N');
      _symbol:=exec('FindAndGet','#table',ND,__infinw.SQL,,"SYM",'N')
   || _reo:=1;
      _upr:=_uprR;
      _stat_rej:=exec('FindAndGet','#table',DK_LN,__infinw.SQL,,"STAT_REJ",'N');
      _symbol:=exec('record','#to_string',exec('FindAndGet','#table',DK_LN,__infinw.SQL,,,null()))
   ?};
   _tekst:={? _reo || 'reorganizacji'@ || 'dokumentu'@ ?};
   _ask:=0;
   {? _upr=1 & _stat_rej='T'
   || _ask:=FUN.choice('Wybierz jedną z opcji wycofania akceptacji lub zakończenia %1 %2'@[_tekst,_symbol]
             ,,'Akceptację i &zakończenie','&Akceptację')
   |? (_upr=1 | _upr=2) & _stat_rej='Z'
   || _ask:=FUN.ask('Wycofać zakończenie redakcji %1 %2?'@[_tekst,_symbol])
   |? _upr=4 & _stat_rej='T'
   || _ask:=FUN.ask('Wycofać akceptację %1 %2?'@[_tekst,_symbol]);
      {? _ask || _ask:=2 ?}
   ?}
|| _ask:=0;
   {? _uprA=1
   || _ask:=FUN.choice('Wybierz jedną z opcji wycofania akceptacji lub zakończenia zaznaczonych dokumentów.\n\n'
                       'Uwaga. Wycofanie jest uzależnione od uprawnień do czynności redakcji i akceptacji\n'
                       'oraz od aktualnego statusu danego dokumentu.'@
             ,,'Akceptację i &zakończenie','&Akceptację')
   |? _uprA=2
   || _ask:=FUN.ask('Wycofać zakończenie redakcji zaznaczonych dokumentów?\n\n'
                    'Uwaga. Wycofanie jest uzależnione od uprawnień do czynności redakcji\n'
                    'oraz od aktualnego statusu danego dokumentu.'@)
   |? _uprA=4
   || _ask:=FUN.ask('Wycofać akceptację zaznaczonych dokumentów?\n\n'
                    'Uwaga. Wycofanie jest uzależnione od uprawnień do czynności akceptacji\n'
                    'oraz od aktualnego statusu danego dokumentu.'@);
      {? _ask || _ask:=2 ?}
   ?}
?};

{? _tab.size()
|| {? _tab.first() & _ask
   || exec('mag_open','open_tab',1+(form(8+__infinw.SQL)+3),form(8+__infinw.SQL)+2);
      {!
      |? {? (__infinw.clear(); __infinw.seek(_tab.REF,))
         || {? (5+__infinw.SQL)='nagdo' & (ND.clear; ND.seek(__infinw.SQL,form(8+__infinw.SQL)))
            || _spr:={? ND.TYP().P='T' || _uprP || _uprW ?};
               _pyt:={? _spr=1 & ND.STAT_REJ='T'
                     || _ask
                     |? _ask=1 & (_spr=1 | _spr=2) & ND.STAT_REJ='Z'
                     || 1
                     |? _ask=2 & _spr=4 & ND.STAT_REJ='T'
                     || 2
                     || 0
                     ?};
               {? _pyt
               || exec('wyc_dok','magdok_nag',0,'N',,,_pyt);
                  ND.get();
                  __infinw.AKC:=ND.STAT_REJ;
                  __infinw.put(1)
               ?}
            |? (5+__infinw.SQL)='dokln' & (DK_LN.clear; DK_LN.seek(__infinw.SQL,form(8+__infinw.SQL)))
            || _pyt:={? _uprR=1 & DK_LN.STAT_REJ='T'
                     || _ask
                     |? _ask=1 & (_uprR=1 | _uprR=2) & DK_LN.STAT_REJ='Z'
                     || 1
                     |? _ask=2 & _uprR=4 & DK_LN.STAT_REJ='T'
                     || 2
                     || 0
                     ?};
               {? _pyt || exec('wycreorg','magdok_wymiary',1,_pyt) ?};
               DK_LN.get();
               __infinw.AKC:=DK_LN.STAT_REJ;
               __infinw.put(1)
            ?}
         ?};
         _tab.next()
      !}
   ?}
|? _ask
|| {? (5+__infinw.SQL)='nagdo' & (ND.clear; ND.seek(__infinw.SQL,form(8+__infinw.SQL)))
   || exec('wyc_dok','magdok_nag',0,'T',,,_ask);
      ND.get();
      __infinw.AKC:=ND.STAT_REJ;
      __infinw.put(1)
   |? (5+__infinw.SQL)='dokln' & (DK_LN.clear; DK_LN.seek(__infinw.SQL,form(8+__infinw.SQL)))
   || exec('wycreorg','magdok_wymiary',1,_ask);
      DK_LN.get();
      __infinw.AKC:=DK_LN.STAT_REJ;
      __infinw.put(1)
   ?}
?};
exec('mag_open','open_tab',1+_msk,_msk+2);
INN.cntx_pop();
__infinw.cntx_pop();
~~


\zakoncz_2inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: akceptacja dokumentow
::----------------------------------------------------------------------------------------------------------------------
INN.cntx_psh();
ND.cntx_psh();
DK_LN.cntx_psh();
__infinw.cntx_psh();
_tab:=__infinw.sel_aget();
__infinw.sel_adel();
_msk:=ND.name()+3;
{? (5+__infinw.SQL)='nagdo' & (ND.clear; ND.seek(__infinw.SQL,form(8+__infinw.SQL)))
|| exec('nd_zakoncz_wer','magdok_nag');
   ND.get();
   __infinw.AKC:=ND.STAT_REJ;
   __infinw.put(1)
|? (5+__infinw.SQL)='dokln' & (DK_LN.clear; DK_LN.seek(__infinw.SQL,form(8+__infinw.SQL)))
|| exec('dk_ln_zakoncz','magdok_wymiary');
   DK_LN.get();
   __infinw.AKC:=DK_LN.STAT_REJ;
   __infinw.put(1)
?};
ND.cntx_pop();
INN.cntx_pop();
DK_LN.cntx_pop();
__infinw.cntx_pop();
~~


\akc_2inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: akceptacja dokumentow
::  OLD: \akc_2inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
INN.cntx_psh();
ND.cntx_psh();
DK_LN.cntx_psh();
__infinw.cntx_psh();
_tab:=__infinw.sel_aget();
__infinw.sel_adel();
_msk:=ND.name()+3;
{? (5+__infinw.SQL)='nagdo' & (ND.clear; ND.seek(__infinw.SQL,form(8+__infinw.SQL)))
|| exec('nd_akceptuj','magdok_nag');
   ND.get();
   __infinw.AKC:=ND.STAT_REJ;
   __infinw.put(1)
|? (5+__infinw.SQL)='dokln' & (DK_LN.clear; DK_LN.seek(__infinw.SQL,form(8+__infinw.SQL)))
|| exec('dk_ln_akceptuj','magdok_wymiary');
   DK_LN.get();
   __infinw.AKC:=DK_LN.STAT_REJ;
   __infinw.put(1)
?};
exec('mag_open','open_tab',1+_msk,_msk+2);
ND.cntx_pop();
INN.cntx_pop();
DK_LN.cntx_pop();
__infinw.cntx_pop();
~~


\irek_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: akcja rekord dla inwentury
::  OLD: \irek_poz/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
exec('inp_actions','magazyn_inw');

BEER.SS:=0;  BEER.SE:=0;  BEER.SR:=0;  BEER.SIM:=0;  BEER.SIP:=0;
BEER.SS2:=0;  BEER.SE2:=0;  BEER.SR2:=0;  BEER.SIM2:=0;  BEER.SIP2:=0;
_ktm:=INP.M;
_nag:=INP.IN;
INP.cntx_psh();
INP.index('KOD');
INP.prefix(_nag,_ktm);
{? INP.first()
|| _ref:=INP.ref();
   {!
   |?
      BEER.SS+=INP.SE;
      BEER.SE+=INP.SS;
      BEER.SS2+=INP.SE2;
      BEER.SE2+=INP.SS2;
      BEER.SR+=INP.SS-INP.SE;
      BEER.SR2+=INP.SS2-INP.SE2;
      INP.next()
   !}
|| _ref:=INP.null
?};
INP.cntx_pop();

BEER.INPJM:=INP.M().J;
BEER.ROZ:=INP.SS-INP.SE;
BEER.RIM:={? BEER.ROZ>0 || BEER.ROZ || 0 ?};
BEER.RIP:={? BEER.ROZ<0 || -BEER.ROZ || 0 ?};
BEER.SIM:={? BEER.SR>0 || BEER.SR || 0 ?};
BEER.SIP:={? BEER.SR<0 || -BEER.SR || 0 ?};
:: druga jednostka miary
BEER.ROZ2:=INP.SS2-INP.SE2;
BEER.RIM2:={? BEER.ROZ2>0 || BEER.ROZ2 || 0 ?};
BEER.RIP2:={? BEER.ROZ2<0 || -BEER.ROZ2 || 0 ?};
BEER.SIM2:={? BEER.SR2>0 || BEER.SR2 || 0 ?};
BEER.SIP2:={? BEER.SR2<0 || -BEER.SR2 || 0 ?};

BEER.II:={? INP.ref()=_ref || '+' || '' ?};
{? BEER.II='+' & BEER.ROZ=0 || 'INP#01#01'
|? BEER.II='' & BEER.ROZ=0 || 'INP#01#02'
|? BEER.II='+' & BEER.ROZ>0 || 'INP#01#03'
|? BEER.II='' & BEER.ROZ>0 || 'INP#01#04'
|? BEER.II='+' & BEER.ROZ<0 || 'INP#01#05'
|? BEER.II='' & BEER.ROZ<0 || 'INP#01#06'
|| ''
?}


\add_innx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: dolaczenie jednego arkusza pomocniczego
::   WE: [_a] - czy pytanie o dolaczenie
::       [_b] - #ref INN
::       [_c] - klucz grupujący, domyślnie-brak
::   WY: ref INX
::  OLD: \add_innx/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};
{? _>=2 || {? type_of(_b)<>1 || _b:=#INN.ref() ?} || _b:=#INN.ref() ?};
{? _>=3 || {? type_of(_c)<>2 || _c:='' ?} || _c:='' ?};

{? ~_a | FUN.ask('Czy dołączyć nowy arkusz pomocniczy?'@)
|| INN.cntx_psh();
   INN.clear();
   _refinn:={? INN.seek(_b,) || INN.ref() || null ?};
   INN.cntx_pop();
   INX.cntx_psh();
   INX.clear();
   INX.blank();
   INX.INN:=_refinn;
   INX.GRP_KEY:=_c;
   {? INX.add(1) || _wyn:=INX.ref(); {? ~_a || INX.r_lock(1,1,1) ?} || _wyn:=null ?};
   INX.cntx_pop()
?};
_wyn


\ark_pomp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: pozycje arkusza pomocniczego
::  OLD: \ark_pomp/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
:: zerowanie zmiennej do posumowan - obliczana na akcji rekord
BEER.SS:=0;
PAL.f_clear();
_czy_akc:=INN.D<>date(0,0,0);
_czy_pal:=INN.MG().PAL='T';
_czy_dst:=(1+INN.MG().TYP)='D';
_atrmjs:=ATR.MJS;
ATR.MJS:='INY';
_win_edit:=exec('iny_win_edit','magazyn_inw');
INY.win_edit(_win_edit);

{? INX.r_lock(1,1,1)
|| {? _czy_akc
   || _act:=INY.actions('WER',{? ~_czy_pal || 'w' || '' ?}+'dup:d'+{? ~_czy_pal || 'w' || '' ?})
   |? ~_czy_pal
   || _act:=INY.actions('WER','w:w')
   ?};
   INY.index('INX');
   INY.prefix(INX.ref());
   INY.win_sel('WER');
   M.win_sel('WER_S');
   M.win_dict('WER_S');
   INY.select();
   INX.r_unlock()
|| {? FUN.ask('Arkusz obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?\n\n'
       'UWAGA. Niemożliwa edycja pozycji arkusza pomocniczego.'@)
   || INX.r_lock(1,,1);
      INX.r_unlock()
   ?};
   _act:=INY.actions('WER','dupw:dw');
   INY.index('INX');
   INY.prefix(INX.ref());
   INY.win_sel('WER');
   M.win_sel('WER_S');
   M.win_dict('WER_S');
   INY.select()
?};
ATR.MJS:=_atrmjs;
INY.actions('WER','')


\inywgpal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: wprowadzenie inwentury wg palet
::  OLD: \inywgpal/mws2.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__inypal','__inyndx');
__inypal:=tab_tmp(2,'KOD','STRING[30]','Kod kreskowy'@
           ,'SQL','STRING[16]','ref palety'@
           ,'KTM','STRING[50]','Indeks'@
           ,'LOK','STRING[30]','Lokalizacja'@
           ,'AKT','STRING[30]','Aktualna lokalizacja'@
           ,'TYP','STRING[10]',''
           ,'WYB','STRING[1]',''
           ,'LQL','STRING[16]',''
           ,'POP','STRING[1]','');

__inyndx:=__inypal.ndx_tmp(,0,'KOD',,0,'SQL',,0);

_win_sel:=__inypal.mk_sel('Inwentaryzacja wg palet'@,'P',,'#inx_wgpal',,,,,'U');

__inypal.win_fld(_win_sel,,'TYP',,,5,,1,'Typ'@);
__inypal.win_fld(_win_sel,,'KOD',,,30,,1,'Paleta'@);
__inypal.win_fld(_win_sel,,'KTM',,,20,,1,'Indeks materiałowy'@);
__inypal.win_fld(_win_sel,,'LOK',,,20,,1,'Lokalizacja według stanu'@);
__inypal.win_fld(_win_sel,,'AKT',,,20,,1,'Lokalizacja według spisu'@);
__inypal.win_fld(_win_sel,,'WYB',,,4,,1,'Wyb'@,,,2,,"'T'","'N'","'W'");

__inypal.win_act(_win_sel,0,'Formuła','Akceptuj'@@,,,"sel_exit",,1);
__inypal.win_act(_win_sel,0,'Formuła','Wybierz'@@,,,"exec('wybinpal','magazyn_inw',1)",,
   ,1,"exec('wybinpal','magazyn_inw',1)");
__inypal.win_act(_win_sel,0,'Formuła','Zrezygnuj'@@,,,"exec('wybinpal','magazyn_inw',0)",,
   ,1,"exec('wybinpal','magazyn_inw',0)");
__inypal.win_act(_win_sel,0,'Formuła','Dołącz'@@,,,"exec('addinpal','magazyn_inw')");
__inypal.win_act(_win_sel,0,'Formuła','Przypisz lokalizację'@@,,,"exec('lokinpal','magazyn_inw')",,
   ,1,"exec('lokinpal','magazyn_inw')");
__inypal.win_act(_win_sel,0,'Rekord',,,,"exec('rekprzed','color','__inypal#01')");
__inypal.win_act(_win_sel,0,'Szukaj');
__inypal.win_act(_win_sel,0,'Kolejność');
__inypal.win_act(_win_sel,0,'Formuła','Legenda'@@,,,"exec('legenda','color','__inypal#01')");
__inypal.win_sel(_win_sel);

INX.cntx_psh();
INY.cntx_psh();
:: wypelnienie tabeli palet aktualnie na magazynie wg SL-a
SL.index('PAL');
SL.prefix(INN.MG);
{? SL.first()
|| {!
   |? {? SL.PAL<>null
      || __inypal.index(__inyndx);
         {? ~__inypal.find_key(SL.PAL().KODK,$SL.PAL)
         || __inypal.blank();
            __inypal.KOD:=SL.PAL().KODK;
            __inypal.SQL:=$SL.PAL;
            __inypal.KTM:=SL.PAL().MKTM;
            __inypal.LOK:=SL.EANL().KOD;
            __inypal.AKT:=SL.EANL().KOD;
            __inypal.TYP:=SL.PAL().TPAL().TYP;
            __inypal.WYB:='N';
            __inypal.LQL:=$SL.EANL;
            __inypal.POP:='T';
            __inypal.add(1)
         ?}
      ?};
      SL.next()
   !}
?};
:: aktualizacja informacji o paletach na podstawie wprowadzonych INY
INY.index('INN');
INY.prefix(INN.ref());
{? INY.first()
|| {!
   |? {? INY.PAL<>null
      || __inypal.index(__inyndx);
         {? ~__inypal.find_key(INY.PAL().KODK,$INY.PAL)
         || __inypal.blank();
            __inypal.KOD:=INY.PAL().KODK;
            __inypal.SQL:=$INY.PAL;
            __inypal.KTM:=INY.PAL().MKTM;
            __inypal.LOK:=INY.EANL().KOD;
            __inypal.AKT:=INY.EANL().KOD;
            __inypal.TYP:=INY.PAL().TPAL().TYP;
            __inypal.WYB:='T';
            __inypal.LQL:=$INY.EANL;
            __inypal.add(1)
         || __inypal.WYB:='T';
            __inypal.put(1)
         ?}
      ?};
      INY.next()
   !}
?};

__inypal.clear();
{? __inypal.select()
|| {? FUN.ask('Czy zaktualizować stan palet na arkuszach pomocniczych?\n\n'
       'Uwagi. Pozycje z nowych palet zostaną dodane na osobnym arkuszu pomocniczym.\n'
       'Pozycje bez lokalizacji (z inwentaryzacji) nie zostaną przeniesione.'@)
   || __inypal.index(__inyndx);
      {? __inypal.first()
      || _inx:=null;
         {!
         |? {? __inypal.WYB='T' & __inypal.AKT<>''
            || _dan:=exec('iny2pal','magazyn_inw',INN.ref(),exec('FindAndGet','#table','PAL',__inypal.SQL,,,null()));
               {? _dan.first()
               || {? _inx=null || _inx:=exec('add_innx','magazyn_inw',0) ?};
                  {!
                  |? exec('add_inny','magazyn_inw',_inx,exec('FindAndGet','#table','M',_dan.M,,,null()),_dan.ILP
                      ,exec('FindInSet','#table','EANL','KOD',__inypal.AKT,__inypal.AKT),'',_dan.TW
                      ,exec('FindAndGet','#table','PAL',__inypal.SQL,,,null()),0);
                     _dan.next()
                  !}
               ?};
               obj_del(_dan)
            ?};
            __inypal.next()
         !}
      ?}
   ?}
?};

INX.cntx_pop();
INY.cntx_pop();
VAR_DEL.delete('__inypal','__inyndx');
~~


\wybinpal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: wybor/rezygnacja z wyboru palet na arkusz pomocniczy
::   WE: _a - 1-wybor 0-rezygnacja
::  OLD: \wybinpal/mws2.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=__inypal.sel_aget();
__inypal.sel_adel();
__inypal.cntx_psh();
{? _tab.first()
|| {? FUN.ask({? _a
              || 'Czy zatwierdzić wybór dla zaznaczonych palet?'@
              || 'Czy zrezygnować z wyboru dla zaznaczonych palet?'@
              ?})
   || {!
      |? {? (__inypal.clear(); __inypal.seek(_tab.REF,))
         || __inypal.WYB:={? _a || 'T' || 'N' ?};
            __inypal.put(1)
         ?};
         _tab.next()
      !}
   ?}
|? _a & __inypal.WYB='T'
|| FUN.info('Paleta już wybrana.'@)
|? ~_a & __inypal.WYB='N'
|| FUN.info('Paleta nie jest wybrana.'@)
|? FUN.ask({? _a || 'Czy zatwierdzić wybór palety?'@ || 'Czy zrezygnować z wyboru palety?'@ ?})
|| __inypal.WYB:={? _a || 'T' || 'N' ?};
   __inypal.put(1)
?};
obj_del(_tab);
__inypal.cntx_pop();
~~


\addinpal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: dodanie palety
::  OLD: \addinpal/mws2.fml
::----------------------------------------------------------------------------------------------------------------------
PAL.f_clear();
PAL.index('PAL');
PAL.prefix();
PAL.f_set('KODK',,'\"PAL\".AKT=\'T\' and \"PAL\".BEZOZN=\'N\' and \"PAL\".STAN<>\'N\' and \"PAL\".ODD=\':_a\'',ST.ODDZ);
PAL.actions('SLO','DUPL:D');
PAL.win_sel('SLO');
{? PAL.f_first()
|| {!
   |? __inypal.index(__inyndx);
      {? __inypal.find_key(PAL.KODK,$PAL.ref()) | ~exec('czyilpoz','magdok_palety',PAL.ref())
      || PAL.f_del()
      || PAL.f_next()
      ?}
   !}
?};
{? PAL.f_first()
|| {? PAL.select()
   || __inypal.index(__inyndx);
      {? ~__inypal.find_key(PAL.KODK,$PAL.ref())
      || __inypal.blank();
         __inypal.KOD:=PAL.KODK;
         __inypal.SQL:=$PAL.ref();
         __inypal.KTM:=PAL.MKTM;
         __inypal.LOK:='';
         __inypal.AKT:='';
         __inypal.TYP:=PAL.TPAL().TYP;
         __inypal.WYB:='N';
         __inypal.LQL:='';
         __inypal.add(1)
      || __inypal.WYB:='T';
         __inypal.put(1)
      ?}
   ?}
|| FUN.info('Brak innych palet niż te które są w magazynie.'@)
?};
PAL.f_clear();
PAL.actions('SLO','');
~~


\lokinpal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przypisanie lokalizacji
::  OLD: \lokinpal/mws2.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=__inypal.sel_aget();
__inypal.sel_adel();
__inypal.cntx_psh();
EANL.cntx_psh();
EANL.index('MGDOK');
EANL.prefix('T',ST.MAG,'T','N');
EANL.win_sel('SLO');
EANL.actions('SLO','G');
{? EANL.select()
|| _lok:=EANL.KOD;
   _lql:=$EANL.ref();
   {? _tab.first()
   || {? FUN.ask('Przypisać lokalizację (z inwentaryzacji) do zaznaczonych palet?'@)
      || {!
         |? {? (__inypal.clear(); __inypal.seek(_tab.REF,))
            || __inypal.AKT:=_lok;
               __inypal.LQL:=_lql;
               __inypal.put(1)
            ?};
            _tab.next()
         !}
      ?}
   |? FUN.ask('Przypisać lokalizację (z inwentaryzacji)?'@)
   || __inypal.AKT:=_lok;
      __inypal.LQL:=_lql;
      __inypal.put(1)
   ?}
?};
EANL.actions('SLO','');
__inypal.cntx_pop();
EANL.cntx_pop();
~~


\rekinpal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: rekord przed dla inwenatryzacji wg palet
::  OLD: \rekinpal/mws.fml
::----------------------------------------------------------------------------------------------------------------------
{? __inypal.WYB='T'
|| {? __inypal.AKT<>''
   || '__inypal#01#01'
   || '__inypal#01#02'
   ?}
|| ''
?}


\iny2pal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdzenie poprawnosci dodanych pozycji palety
::   WE: _a - ref INN
::       _b - ref palety
::   WY:  tabela danych
::  OLD: \iny2pal/mws2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=tab_tmp(2,'M','STRING[16]',''
       ,'TW','DATE',''
       ,'ILP','REAL',''
       ,'ILI','REAL','');

PAL.cntx_psh();
PAL_POZ.cntx_psh();
INY.cntx_psh();
PAL.clear();
{? PAL.seek(_b)
|| {? PAL.AKT='N' || PAL_POZ.use('palet'+form(PAL.AR-2000,-2,0,'99')) || PAL_POZ.use('paletyp') ?};
   PAL_POZ.index('PAL');
   PAL_POZ.prefix(PAL.ref());
   {? PAL_POZ.first()
   || {!
      |? _wyn.clear();
         {? _wyn.find_key($PAL_POZ.M,PAL_POZ.TW)
         || _wyn.ILP+=PAL_POZ.ILP;
            _wyn.put(1)
         || _wyn.blank();
            _wyn.M:=$PAL_POZ.M;
            _wyn.ILP:=PAL_POZ.ILP;
            _wyn.TW:=PAL_POZ.TW;
            _wyn.add(1)
         ?};
         PAL_POZ.next()
      !}
   ?}
?};
INY.index('PAL');
INY.prefix(_a,_b);
{? INY.first()
|| {!
   |?  _wyn.clear();
      {? _wyn.find_key($INY.M,INY.TW)
      || _wyn.ILI+=INY.IL;
         _wyn.put(1)
      || _wyn.blank();
         _wyn.M:=$INY.M;
         _wyn.ILI:=INY.IL;
         _wyn.TW:=PAL_POZ.TW;
         _wyn.add(1)
      ?};
      INY.next()
   !}
?};

_wyn.clear();
{? _wyn.first() || {! |? {? _wyn.ILP=_wyn.ILI || _wyn.del() || _wyn.ILP-=_wyn.ILI; _wyn.put(1); _wyn.next() ?} !} ?};

PAL.cntx_pop();
PAL_POZ.cntx_pop();
INY.cntx_pop();
_wyn


\add_inny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: dodanie jednego rekordu w tabeli INY
::   WE: _a - ref INX
::       _b - material
::       _c - ilosc
::       _d - lokalizacja
::       _e - ref SQL-owy
::       _f - termin waznosci
::       _g - paleta
::       [_h] - sama pozycja domyslnie 1-paleta 0-podana pozycja palety
::       [_i] - Kod identyfikacyjny
::       [_j] - ilość w drugiej jednostce ewidencyjnej
::       [_k] - cecha dostawy
::  OLD: \add_inny/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=8 || {? type_of(_h)<>1 || _h:=1 ?} || _h:=1 ?};
{? _>=9 || {? type_of(_i)<>2 || _i:='' ?} || _i:='' ?};
_il2:={? var_pres('_j')=type_of(0) & _j>0 || _j || 0 ?};
_dk_c:={? var_pres('_k')=type_of(null()) || _k || null() ?};

{? _g<>null & _h
|| PAL.cntx_psh();
   PAL_POZ.cntx_psh();
   PAL.clear();
   {? PAL.seek(_g)
   || {? PAL.AKT='N'
      || PAL_POZ.use('palet'+form(PAL.AR-2000,-2,0,'99'))
      || PAL_POZ.use('paletyp')
      ?}
   ?};
   PAL_POZ.index('PAL');
   PAL_POZ.prefix(_g);
   {? PAL_POZ.first()
   || {!
      |? {? PAL_POZ.ILP>0
         || INY.clear();
            INY.blank();
            INY.INX:=_a;
            INY.M:=PAL_POZ.M;
            INY.IL:=PAL_POZ.ILP;
            INY.IL2:=_il2;
            INY.EANL:=_d;
            INY.EANP:=_e;
            INY.TW:=PAL_POZ.TW;
            INY.PAL:=PAL_POZ.PAL;
            INY.SCEAN:=PAL_POZ.SCEAN;
            INY.DK_C:=PAL_POZ.DK_C;
            exec('uzupIDkod','magdok_palety',INY);
            INY.add(1)
         ?};
         PAL_POZ.next()
      !}
   ?};
   PAL.cntx_pop();
   PAL_POZ.cntx_pop()
|| INY.clear();
   INY.blank();
   INY.INX:=_a;
   INY.M:=_b;
   INY.IL:=_c;
   INY.IL2:=_il2;
   INY.EANL:=_d;
   INY.EANP:=_e;
   INY.TW:=_f;
   INY.PAL:={? ~_h & _g<>null || _g || null ?};
   INY.SCEAN:=_i;
   _rsql:={? INY.SCEAN<>'' || exec('FindInSet','#table','MKODK','KK',INY.SCEAN,INY.SCEAN,"MKODK.RSQL",,,'') || '' ?};
   {? _rsql<>'' & ref_tab(_rsql)=DK_C
   || _buf:=exec('FindAndGet','#table',DK_C,_rsql,,,null());
      {? _buf<>null() || _dk_c:=_buf ?}
   ?};
   INY.DK_C:=_dk_c;
   exec('uzupIDkod','magdok_palety',INY);
   INY.add(1)
?}


\inx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: INX.ref()
::  OLD: \inx/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
INX.ref()


\pwinyean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: przed wyswietlenie pol INY.EANL i INY.TW
::  OLD: \pwinyean/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
EANX.JM2:={? INY.M=null() || null() || INY.M().J ?};
{? INN.MG().SL<>'T'
|| exec('findfnv','#color')
|| 1
?}


\prinyean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: przed redakcja pol INY.EANL i INY.TW
::   WY: 1/0
::  OLD: \prinyean/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
INN.MG().SL='T'


\pwinypal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: przed wyswietleniem pola INY.PAL
::  OLD: \pwinypal/mws.fml
::----------------------------------------------------------------------------------------------------------------------
{? INN.MG().PAL='T'
|| 1
|| exec('findfnv','#color')
?}


\prinypal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: przed redakcja pola INY.PAL
::  OLD: \prinypal/mws.fml
::----------------------------------------------------------------------------------------------------------------------
INN.MG().PAL='T'


\prinysce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed redakcja pola SCEAN
::  OLD: \prinysce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
(1+INY.INX().INN().MG().TYP)='D' & INY.INX().INN().MG().PAL<>'T' & (';DAPZ'*INY.M().IDMOB)>1


\f3inysce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: klawisz F3 dla pola SCEAN
::  OLD: \f3inysce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
INY.SCEAN:=exec('addscean','kody_kresk',1);
~~


\pr_iny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: zapamietanie informacji o aktualizacji
::  OLD: \pr_iny/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.IL_INY:=INY.IL;
BEER.INP_INY:=INY.INP;
{? INY.DK_C<>null() & INY.DK_C().M_ATR<>null()
|| ATR.M_ATR:=INY.DK_C().M_ATR;
   INY.DK_C().M_ATR().SYM;
   {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('INY.DK_C().WAR'+form(_i,-2,,'99')))() !}
|| ATR.M_ATR:=null();
   M_ATR.blank(0);
   {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
?};
1


\po_inyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: zaaktulizowanie pozycji juz zaaktualizowanej po poprawie pozycji
::  OLD: \po_inyp/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? BEER.INP_INY<>''
|| INY.INP:='';
   INY.put()
?};
BEER.IL_INY:=0;
BEER.INP_INY:='';
1


\po_inyu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: zaaktulizowanie pozycji juz zaaktualizowanej po usunieciu pozycji
::  OLD: \po_inyu/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.IL_INY:=0;
BEER.INP_INY:='';
1


\chk_iny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: kontrola pozycji arkusza pomocniczego
::  OLD: \chk_iny/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? INY.M=null || FUN.info('Należy podać indeks materiałowy.'@); _wyn:='M'
|? INY.IL:=INY.IL$INY.M().DOKL; INY.IL<0
|| FUN.info('Ilość musi być większa lub równa zero.'@); _wyn:='IL'
|? exec('prinysce','magazyn_inw') & INY.SCEAN=''
|| FUN.info('Należy podać kod identyfikacyjny dostawy.'@); _wyn:='SCEAN'
|? INY.PAL<>null() & INY.SCEAN='' & INY.M().M_ATR<>null() & ~exec('sprAtrMPal','magazyn_inw',INY.PAL,INY.M().KTM)
|| FUN.info('Dla wskazanej palety podano indeks materiałowy, który wymaga podania cechy dostawy.\n'
            'W definicji palety brak wskazanego indeksu materiałowego.\n\n'
            'Nie można wprowadzić podanej pozycji na arkusz pomocniczy.\n'
            'Należy zmienić definicję pozycji palety.'@);
   _wyn:='M'
|| {? INY.PAL<>null() & exec('palOtherMg','magazyn_inw',INY.INX().INN().MG,INY.PAL)
   || _ilp:=exec('oblPalM','magazyn_inw');
      {? INY.IL<>_ilp
      || _wyn:='IL';
         FUN.info('Aktualnie paleta: %1 znajduje się w innym magazynie.\n'
                 'Należy podać ilość zgodną z pozycjami palety dla danego indeksu.'@[INY.PAL().KODK]);
         INY.IL:=_ilp
      || _wyn:=''
      ?}
   || _wyn:=''
   ?}
?};
{? _wyn='' & INY.DK_C<>null() & {? INY.DK_C().M_ATR().MOD='T' || INY.DK_C().UMOD || INY.DK_C().UZUP ?}*'0'
|| FUN.info('Wymagana cecha dostawy z uzupełnionymi wszystkimi atrybutami lub brak cechy.'@);
   {? ~INY.M().M_ATR().EDIT
   || _wyn:='DK_C'
   || _wyn:=exec('uzup_fld','mat_atr')
   ?}
?};
_wyn


\rek_iny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: akcja Rekord dla tabeli INY
::  OLD: \rek_iny/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.SS:=0;
EANX.JM2:=INY.M().J;
{? INY.size()
|| INY.cntx_psh();
   INY.index('INX');
   INY.prefix(INY.INX,INY.M().KTM,INY.M().KTM);
   {? INY.first() || {! |? BEER.SS+=INY.IL; INY.next() !} ?};
   INY.cntx_pop()
?};
{? INY.DK_C<>null() & INY.DK_C().M_ATR<>null()
|| ATR.M_ATR:=INY.DK_C().M_ATR;
   INY.DK_C().M_ATR().SYM;
   exec('set_efld_opt','mat_atr',ATR.MJS);
   {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('INY.DK_C().WAR'+form(_i,-2,,'99')))() !}
|| M_ATR.blank(0);
   {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
?};
{? INY.INP<>'' || 'INY#01#01' || '' ?}


\rek_inx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: akcja Rekord dla tabeli INX
::  OLD: \rek_iny/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? INX.DAKT<>date(0,0,0) || 'INX#01#01' || '' ?}


\inn_actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Inwentaryzacja nagłówki - zarządzanie dostępem do akcji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wer:=INN.win_sel('?');

_grayed:='';
_grayed+={? INN.STAT_REJ='N' & _wer<>'WYB' || 'W' |? INN.STAT_REJ='T' || 'PUGZT' || '' ?};
_grayed+={? INN.INP_R='' & INN.INR_R='' & INN.DK_LN_R='' || 'I' || '' ?};
_grayed+={? INN.ARKPOM || '' || 'R' ?};
INN.actions_grayed(_wer,_grayed)


\inp_actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Inwentaryzacja pozycje - zarządzanie dostępem do akcji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wer:=INP.win_sel('?');

_grayed:='';
_default:='';
{? _wer<>'WERS'
|| _grayed+={? INP.AKC='N' || 'C' |? INP.AKC='T' || 'O' || '' ?};

   _default+={? INP.AKC='N' || 'O' |? INP.AKC='T' || 'C' || '' ?}
|| _grayed+={? INN.STAT_REJ='T' || 'Z' || '' ?}
?};

INP.actions_grayed(_wer,_grayed);
INP.actions(_wer,{? INP.IN().STAT_REJ<>'N' || 'U' || '' ?},_default,1)


\rozn2inn_actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Inwentaryzacja powiązane dokumenty - zarządzanie dostępem do akcji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wer:=__infinw.win_sel('?');

_id_acc:={? (3+__infinw.TYP)='INP'
         || 'LMG_MAG_EAMG'
         || 'LMG_MAG_AREO'
         ?};
_id_end:={? __infinw.TYP='INP+' || 'LMG_MAG_DAPZ'
         |? __infinw.TYP='INP-' || 'LMG_MAG_DWYD'
         || 'LMG_MAG_DREO'
         ?};

_czywyc:={? __infinw.AKC='N'
          | __infinw.AKC='T' & ~exec('chk_role','#b__box',OPERATOR.USER,_id_acc)
          | __infinw.AKC='Z' & ~exec('chk_role','#b__box',OPERATOR.USER,_id_end)
         || 'W'
         || ''
         ?};

_grayed:='';
_grayed+={? __infinw.AKC='N' || 'AW' |? __infinw.AKC='Z' || 'Z' |? __infinw.AKC='T' || 'ZA' || '' ?}+_czywyc;
__infinw.actions_grayed(_wer,_grayed)


\prn_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: wydruki inwentaryzacyjne
::  OLD: \prn_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('FindInSet','#table','INP','INP',INN.ref())<>null
|| exec('rep_exec','#b_report','LMG_MAG_XXXX','lmg_inwe*','Wydruki inwentaryzacyjne',1)
|| {? FUN.ask('Brak pozycji na arkuszu.\n\n'
       'Możliwe wydrukowanie wyłącznie czystego arkusza spisowego.\n'
       'Czy chcesz wydrukować?'@)
   || exec('rep_exec','#b_report','','lmg_inwe0001','Inwentaryzacja',2,,,,,,'W')
   ?}
?}


\rozn2inn_sym_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formuła określiająca ikony
::----------------------------------------------------------------------------------------------------------------------
"
   {? (5+__infinw.SQL)='nagdo'
   || exec('FindAndGet','#table',ND,__infinw.SQL,,exec('nd_sym_i','magdok_nag'),exec('pusta','#icon'))
   |? (5+__infinw.SQL)='dokln'
   || exec('FindAndGet','#table',DK_LN,__infinw.SQL,,exec('dk_ln_stat_rej','magdok_wymiary'),exec('pusta','#icon'))
   || exec('pusta','#icon')
   ?}
"


\pr_wybg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: przed redakcja pola grupa
::  OLD: \pr_wybg/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.T='G'


\pr_wybm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: przed wyborem grupy
::  OLD: \pr_wybm/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.T='I'


\inn_zakoncz_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Inwentaryzacja - Zakończ
::       Obsługa w formule main
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LMG_MAG_DINW';
_params.UIDREF:=INN.uidref();
_params.AKCJA:='Zakończ_wer';

exec('mp_run','#b__box',_params)


\sprewidost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdza czy byly dostawy dla danego indeksu w magazynie ewidencyjnym
::   WE: _a - ref materiału
::       _b - ref magazynu
::       _c - data inwentury
::       _d - ref nagłówka inwentaryzacji
::   WY: 1-były 0-nie
::  OLD: \sprewidost/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
OKR.cntx_psh();
SC.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.last()
|| {!
   |? SC.use('stc__'+ST.ODDZ+($OKR.ROK+2));
      _wyn:=exec('FindInSet','#table','SC','SC',_a,_b)<>null();
      ~_wyn & OKR.next()
   !}
?};
OKR.cntx_pop();
SC.cntx_pop();
{? ~_wyn || _wyn:=exec('biez_cen','ceny_dok',_a,_b,_c)<>0 ?};
{? ~_wyn & exec('FindAndGet','#table',MG,_b,,"TYP='DOSTEWI'",0)
|| _wyn:=exec('FindInSet','#table','INP','KOD',_a,_d,"INP.C",,,0)<>0
?};
_wyn


\beer_t_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Po redakcji BEER.T
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_win_red:=BEER.win_edit('?');
{? BEER.T='G'
|| BEER.efld_opt(_win_red,'enable=1',,'ODG');
   BEER.efld_opt(_win_red,'enable=1',,'DOG');
   BEER.efld_opt(_win_red,'enable=0',,'ODM');
   BEER.efld_opt(_win_red,'enable=0',,'DOM')
|| BEER.efld_opt(_win_red,'enable=0',,'ODG');
   BEER.efld_opt(_win_red,'enable=0',,'DOG');
   BEER.efld_opt(_win_red,'enable=1',,'ODM');
   BEER.efld_opt(_win_red,'enable=1',,'DOM')
?}


\palOtherMg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: sprawdza czy dana paleta jest na stanach innego magazynu
::   WE: _a - ref magazynu
::       _b - ref palety
::   WY: 1-jest 0-nie
::  OLD: \palOtherMg/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_mag:=_a;
:: suma ilości niezależnie od pozycji
_sum:=0;
_res:=0;
SL.cntx_psh();
SL.index('PALALL');
SL.prefix(_b);
{? SL.first() || {! |? {? SL.MG<>_mag || _sum+=SL.IL ?}; {? ~_res || _res:=SL.MG<>null() & SL.MG<>_mag ?}; SL.next() !} ?};
SL.cntx_pop();
_wyn:=_res & _sum<>0;
_wyn


\oblPalM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: oblicza ilość danego indeksu materiałowego na palecie
::   WY: ilość
::  OLD: \oblPalM/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
PAL_POZ.cntx_psh();
{? INY.PAL().AKT='N' || PAL_POZ.use('palet'+form(INY.PAL().AR-2000,-2,0,'99')) || PAL_POZ.use('paletyp') ?};
PAL_POZ.index('PAL');
PAL_POZ.prefix(INY.PAL,INY.M().KTM,);
{? PAL_POZ.first() || {! |? _wyn+={? INY.TW=PAL_POZ.TW || PAL_POZ.ILP ?}; PAL_POZ.next() !} ?};
PAL_POZ.cntx_pop();
_wyn


\wyb_inn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: wybor arkusza spisowego na danym magazynie
::   WE: _a - ref magazynu
::       [_b] - 1-automatyczne zwrocenie ostatniego otwartego arkusza 0(domyslnie)-nie
::       [_c] - zakres dat od
::       [_d] - zakres dat do
::       [_e] - 1-niezaakceptowane dokumenty 0(domyslnie) nie
::   WY: 1-wybrano(#INN.ref) 0-nie wybrano -1-nie ma żadnego otwartego
::  OLD: \wyb_inn/inweko.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};
{? _>=3 || {? type_of(_c)<>4 || _c:=date(0,0,0) ?} || _c:=date(0,0,0) ?};
{? _>=4 || {? type_of(_d)<>4 || _d:=date(0,0,0) ?} || _d:=date(0,0,0) ?};
{? _>=5 || {? type_of(_e)<>1 || _e:=0 ?} || _e:=0 ?};

_wyn:=0;
_end:=0;
{? do_state() || _end:=1; end() ?};
INN.win_sel('WYB');
INN.index('ARKPOM');
INN.prefix(_a,date(0,0,0),1);
_wyn:={? _b
      || {? INN.last() & (~_e | INN.TYP='C') & ((INN.DI>=_c & INN.DI<=_d) | (_c=date(0,0,0) & _d=date(0,0,0)))
         || #INN.ref()
         || -1
         ?}
      || {? INN.first()
         || {? INN.select()
            || #INN.ref()
            || 0
            ?}
         || -1
         ?}
      ?};
{? _end>0 || do() ?};
_wyn


\sprAtrMPal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: sprawdza czy na palecie dla danego indeksu materiałowego przypisano cechę dostawy
::   WE: _a - paleta
::       _b - indeks materiałowy KTM
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
PAL.cntx_psh();
PAL_POZ.cntx_psh();
PAL.prefix();
{? PAL.seek(_a)
|| {? PAL.AKT='N'
   || PAL_POZ.use('palet'+form(PAL.AR-2000,-2,0,'99'))
   || PAL_POZ.use('paletyp')
   ?};
   PAL_POZ.index('PAL');
   PAL_POZ.prefix(_a,_b,);
   _wyn:=PAL_POZ.first() & PAL_POZ.DK_C<>null()
?};
PAL.cntx_pop();
PAL_POZ.cntx_pop();
_wyn


\inn_ae_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Po redakcji pola tabeli INN
::----------------------------------------------------------------------------------------------------------------------
_typ:=INN.TYP;
_din:=INN.DI;
_tin:=INN.TI;
_typ_m:=INN.TYP_M;
_typ_p:=INN.TYP_P;
{? exec('FindAndGet','#table',INN,INN.uidref(),,"TYP",'')<>_typ
|| INN.DI:=_din; INN.TI:=_tin; INN.TYP_M:=_typ_m; INN.TYP_P:=_typ_p; INN.TYP:=_typ; INN.put(1)
|| INN.DI:=_din; INN.TI:=_tin; INN.TYP_M:=_typ_m; INN.TYP_P:=_typ_p
?};
1


\initfrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: modyfikuje rezerwacje bezwarunkowe o dany dokument inwentaryzacji (rozchod)
::   WE: _a - ref arkusza inwentaryzacji
::   WY: 1-zdecydowano sie na przepiecie rezerwacji 0-rezygnacja 2-brak pozycji do przepiecia
::----------------------------------------------------------------------------------------------------------------------
_wyn:=2;
_poz:=tab_tmp(2,'MAT','STRING[16]',''
       ,'DST','STRING[16]',''
       ,'ILE','REAL',''
       ,'STN','REAL',''
       ,'SRR','REAL',''
       ,'SRT','REAL',''
       ,'WYD','REAL','');

ND.cntx_psh();
DK.cntx_psh();
ZK_N.cntx_psh();
ZK_P.cntx_psh();
REZ.cntx_psh();
INN.cntx_psh();
INP.cntx_psh();
:: pobranie pozycji z dokumentu dla ktorych sa rezerwacje bezwarunkowe
INP.index('INP');
INP.prefix(_a);
{? INP.first()
|| _mag:=INP.IN().MG;
   {!
   |? _jest:=0;
      _poz.clear();
      _ilein:={? INP.SE>INP.SS || INP.SE-INP.SS || 0 ?};
      {? _ilein>0 & ~_poz.find_key($INP.M)
      || _buf:=exec('ilmatrez','magazyn_inw',INP.M,_mag,'');
         _buf.clear();
         {? _buf.first()
         || _jest:=1;
            {!
            |? _poz.clear();
               _poz.blank();
               _poz.MAT:=$INP.M;
               _poz.DST:=_buf.DST;
               _poz.SRR:=_buf.SRR;
               _poz.SRT:=_buf.SRT;
               _poz.WYD:=_buf.WYD;
               _poz.STN:={? _poz.DST='xxxx'
                         || exec('obl_stan','magazyn_stan',INP.M,1,_mag);
                            BEER.S-(BEER.SRR+BEER.SRT+BEER.SW)-_ilein
                         || -1
                         ?};
               _poz.add(1);
               _buf.next()
            !}
         ?};
         obj_del(_buf)
      || _jest:=1
      ?};
      {? _jest
      || _dost:=exec('FindAndGet','#table',SC,INP.SC,,"SRDK",'');
         {? _dost='' || _dost:='xxxx' ?};
         _add:=0;
         _poz.clear();
         {? _poz.find_key($INP.M,_dost)
         || {? _dost<>'xxxx' & _poz.STN=-1
            || _poz.STN:=exec('FindInSet','#table','SC','SRDK',_poz.DST,_poz.DST,"SC.S")-_ilein;
               _poz.STN-=(_poz.SRR+_poz.SRT+_poz.WYD);
               _poz.put(1)
            ?};
            _poz.ILE+=_ilein;
            _poz.STN+=_ilein;
            _poz.put(1);
            {? _dost<>'xxxx' & (_poz.clear(); _poz.find_key($INP.M,'xxxx'))
            || _poz.ILE+=_ilein;
               _poz.STN+=_ilein;
               _poz.put(1)
            ?}
         || {? _dost<>'xxxx' & (_poz.clear(); _poz.find_key($INP.M,'xxxx'))
            || _poz.ILE+=_ilein;
               _poz.STN+=_ilein;
               _poz.put(1)
            ?}
         ?}
      ?};
      INP.next()
   !}
?};
:: kontrola czy rezerwacje nie przekraczaja stanu
_poz.clear();
{? _poz.first()
|| {!
   |? {? _poz.STN>=_poz.ILE
      || _poz.del()
      || _poz.next()
      ?}
   !}
?};

:: zmiana rezerwacji
_poz.clear();
{? _poz.first()
 & (_wyn:=FUN.ask('Istnieją bezwarunkowe rezerwacje tymczasowe lub rezerwacje na zamówieniach\n'
                  'dotyczące indeksów, dla których został wykazany niedobór.\n\n'
                  'Czy przepiąć rezerwacje na warunkowe (dotyczy zamówień)\n'
                  'lub skorygować ich ilość (dotyczy rezerwacji tymczasowych)?'@))
|| _wyn:=1
?};

ND.cntx_pop();
DK.cntx_pop();
ZK_N.cntx_pop();
ZK_P.cntx_pop();
REZ.cntx_pop();
INN.cntx_pop();
INP.cntx_pop();
obj_del(_poz);
_wyn


\pr_twinp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: przed redakcją terminu ważności
::----------------------------------------------------------------------------------------------------------------------
INP.M().SETW='P' & ~INP.IN().ARKPOM


\po_twinp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: po redakcji terminu ważności
::----------------------------------------------------------------------------------------------------------------------
1


\spr_dttm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: sprawdza podana date wg daty ostatniej inwentury
::   WE: _a - magazyn
::       _b - data
::       [_c] - 1-zwróć czas 0-(domyslnie)-tylko kontrola 2-kontrola czasu
::       [_d] - podany czas
::   WY: _c=0: 1-można zmieniać czas 0-nie można
::       _c=1: czas
::       _c=2: ''-ok 'A'-pełna 'C'-ciągła
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_time:={? var_pres('_d')=type_of(time()) || _d || time(0,0,0) ?};
_res:={? _tryb=1 || time(0,0,0) |? _tryb=2 || '' || 0 ?};

INN.index('INN');
INN.prefix(_a);
{? INN.last()
|| {? INN.D<>date(0,0,0)
   || _din:=INN.D;
      _tin:=INN.T;
      _typ:=INN.TYP
   || _din:=INN.DI;
      _tin:=INN.TI;
      _typ:=INN.TYP
   ?}
|| _din:=date(0,0,0);
   _tin:=time(0,0,0);
   _typ:=''
?};
{? _din=date(0,0,0)
|| _res:={? _tryb=1 || time(0,0,0) |? _tryb=2 || _typ:='' || 1 ?}
|? _b>_din
|| _res:={? _tryb=1 || time(0,0,0) |? _tryb=2 || '' || 1 ?}
|? (_b=_din & _tin<>time(0,0,0))
|| {? _tryb=2
   || _res:={? _time<=_tin || _typ || '' ?}
   || _res:={? _tryb=1 || _tin+=1 || 1 ?}
   ?}
?};
{? _tryb=0 & _res=1  || _res:=exec('spr_dttm','magazyn_przec',_a,_b,_tryb,_time)
|? _tryb=1 & _res=time(0,0,0) || _res:=exec('spr_dttm','magazyn_przec',_a,_b,_tryb,_time)
|? _tryb=2 & _res='' || _res:=exec('spr_dttm','magazyn_przec',_a,_b,_tryb,_time)
?};
_res


\iny_win_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Zwraca okno redakcji tabeli INY
::   WY: akronim okna redakcji
::----------------------------------------------------------------------------------------------------------------------
_win_akr:='RED';

{? (1+INN.MG().TYP)='D' & INN.MG().PAL<>'T'
|| _title:='Pozycja arkusza pomocniczego'@;
   _win_red:=INY.mk_edit(_title,,'inynag1');
   INY.win_etab(_win_red,'Dane podstawowe'@);
   INY.win_ewin(_win_red,,_win_akr);
   INY.win_etab(_win_red,'Atrybuty dostawy'@);
   INY.win_ewin(_win_red,,'ATR');
   _win_red
|| _win_red:=_win_akr
?};
_win_red


\poinym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Po redagowaniu pola materiał dla pozycji arkusza pomocniczego
::   WY: akronim okna redakcji
::----------------------------------------------------------------------------------------------------------------------
ATR.MJS:='INY';
exec('set_efld_opt','mat_atr','INY');
:: ustawienie slownika okienka cech
{? INY.M().M_ATR<>null & #INY.M().M_ATR<>#ATR.M_ATR
|| {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !};
   INY.DK_C:=null
?};
ATR.M_ATR:=INY.M().M_ATR;
ATR.FLAG_ED:=(1+INN.MG().TYP)='D' & ATR.CZY_ATR & ATR.M_ATR().EDIT;
ATR.FLAG:={? ATR.FLAG_ED & INY.M().M_ATR<>null() || 2 || 0 ?};
{? ATR.FLAG_ED || {? INY.M().M_ATR<>null() || ATR.FLAG_ED:=2 ?} ?};
{? INY.DK_C<>null() & INY.DK_C().M_ATR<>null()
|| {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('INY.DK_C().WAR'+form(_i,-2,,'99')))() !}
|? INY.M().M_ATR=null()
|| {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
?};
win_disp();
exec('set_efld_opt_iny','magazyn_inw');
1


\pr_addiny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Przed dołączeniem INY
::----------------------------------------------------------------------------------------------------------------------
ATR.M_ATR:=null();
M_ATR.blank(0);
{! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !};
1


\pwij2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Przed wyświetleniem dla drugiej jednostki ewidencyjnej
::----------------------------------------------------------------------------------------------------------------------
''


\prij2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Przed redakcją dla drugiej jednostki ewidencyjnej
::----------------------------------------------------------------------------------------------------------------------
INP.J2<>null() & {? INP.win_edit('?')='RED1' || ~BEER.INPSUM || 1 ?}


\poij2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Po redakcji dla drugiej jednostki ewidencyjnej
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('itsPositive','#field',INP.SCSQL='');
_dokl:={? INP.M<>null || exec('jaka_dok_m','jm',INP.M) || 3 ?};
_dokl_s:=exec('jaka_dok_mjm','jm',INP.M,INP.J2,INP.M().J);
{? _dokl_s<0 || _dokl_s:=_dokl ?};
INP.SS2:=INP.SS2 $ _dokl_s;
roundmet(BEER.MDOKL);
{? _res
|| {? INP.SS=0 & INP.WS2>0 || INP.SS:=INP.SS2*INP.WS2 $ INP.M().DOKL ?};
    _inpss:=INP.SS2*INP.WS2 $ _dokl;
    roundmet(5);
    {? INP.SS=0 | (_inpss<>INP.SS & FUN.ask('Przeliczyć ilość w jednostce podstawowej?'@)) || INP.SS:=_inpss ?};
    INP.WS2:={? INP.SS2>0 & INP.SS>0 || INP.SS/INP.SS2
             |? INP.SE2>0 & INP.SE>0 || INP.SE/INP.SE2
             |? INP.J2<>null() & (INP.SS2=0 | INP.SE2=0) || exec('oblWSP','jm',INP.M)
             || 0
             ?}
?};
_res


\set_efld_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Zaznacza wymagalne pola dla pozycji inwentaryzacji - po wybraniu indeksu materiałowego
::   WE: [_a] - akronim okna redakcji tabeli INP, domyślnie - bieżące
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') || _red:=_a || _red:=INP.win_edit('?') ?};
{? _red<>''
|| _enable:={? INP.M().J2<>null() || 'enable=1' || 'enable=0' ?};
   _mark:={? INP.M().J2<>null() || 'mark=1' || 'mark=0' ?};
   _nomark:={? _mark='mark=0' || 'mark=1' || 'mark=0' ?};
   _sum:=_red='RED1';
   INP.efld_opt(_red,_enable,,'SE2');
   INP.efld_opt(_red,_enable,,'SS2');
   INP.efld_opt(_red,_enable,,'WS2');
   INP.efld_opt(_red,_enable,,'J2');
   {? _sum
   || INP.efld_opt(_red,_enable,BEER,'SE2');
      INP.efld_opt(_red,_enable,BEER,'SS2')
   ?};
   {? _sum
   || {? ~BEER.INPSUM
      || INP.efld_opt(_red,'mark=1',,'SS');
         INP.efld_opt(_red,_mark,,'SS2');
         INP.efld_opt(_red,'mark=0',BEER,'SE');
         INP.efld_opt(_red,_nomark,BEER,'SE2')
      || INP.efld_opt(_red,'mark=0',,'SS');
         INP.efld_opt(_red,_nomark,,'SS2');
         INP.efld_opt(_red,'mark=1',BEER,'SE');
         INP.efld_opt(_red,_mark,BEER,'SE2')
      ?}
   || INP.efld_opt(_red,'mark=1',,'SS');
      INP.efld_opt(_red,_mark,,'SS2')
   ?}
?}


\prinpsce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: przed redakcją kodu identyfikacyjnego
::----------------------------------------------------------------------------------------------------------------------
_edit:=(2+cur_kwin())='e_';
{? _edit & (1+INP.IN().MG().TYP)='D' & (';DAPZ'*INP.M().IDMOB)>1
|| 1
|| 0
?}


\f3inpsce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: przed redakcją kodu identyfikacyjnego
::----------------------------------------------------------------------------------------------------------------------
INP.SCEAN:=exec('addscean','kody_kresk',-1);
~~


\poinpsce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: po redakcji kodu identyfikacyjnego
::----------------------------------------------------------------------------------------------------------------------
{? INP.SCEAN<>''
|| {? (1+INP.IN().MG().TYP)<>'D' | ~((';DAPZ'*INP.M().IDMOB)>1)
   || INP.SCEAN:=''
   |? INP.M().IDMOB='D'
   || _mat:=INP.M;
      _inn:=INP.IN;
      _rsql:='';
      _new:=0;
      MKODK.cntx_psh();
      MKODK.index('KK');
      MKODK.prefix(INP.SCEAN,);
      {? MKODK.first()
      || _rsql:=MKODK.RSQL;
         {? MKODK.M=null()
         || _new:=1
         |? MKODK.M<>null() & MKODK.M<>_mat
         || INP.SCEAN:='';
            INP.SCRDK:=0;
            INP.SCSQL:='';
            INP.SCNDK:=''
         ?}
      ?};
      _scean:=INP.SCEAN;
      {? _scean<>''
      || INP.cntx_psh();
         INP.index('KOD');
         INP.prefix(_inn,_mat);
         {? INP.first() & INP.find_tab('first','SCEAN',,'=',_scean)
         || FUN.info('Na arkuszu wprowadzono już dostawę o danym kodzie %1.\nWybór kodu niemożliwy.'@[_scean]);
            _new:=2;
            _rsql:=''
         ?};
         INP.cntx_pop();
         {? _rsql<>''
         || exec('add_onei','magazyn_inw',INP.IN,INP.IN().MG,INP.IN().DI,INP.M,,,,INP.SCEAN,,,,,,1)
         |? _new<>1
         || INP.SCEAN:='';
            INP.SCRDK:=0;
            INP.SCSQL:='';
            INP.SCNDK:=''
         ?}
      ?};
      MKODK.cntx_pop()
   ?}
?};
1


\inn_komisja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: przegląd i edycja członków komisji inwentaryzacyjnej
::----------------------------------------------------------------------------------------------------------------------
__PERSONEL:=1;
__PAR188:=PAR_SKID.get(188)='T';
_len:=OSOBA.fld_num();
{! _ii:=1.._len
|! _acronim:=OSOBA.fld_acr(_ii);
   {? _acronim<>'NAZWISKO' & _acronim<>'PIERWSZE' & _acronim<>'DRUGIE'
   || OSOBA.fld_fml(_acronim,'DISPLAY_FORMAT',"'empty=1'")
   ?}
!};
INNKOM.index('INN');
INNKOM.prefix(INN.ref());
INNKOM.select();
{! _ii:=1.._len
|! _acronim:=OSOBA.fld_acr(_ii);
   OSOBA.fld_fml(_acronim,'DISPLAY_FORMAT',"*")
!};
__PERSONEL:=0;
''


\chk_innkom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: kontrola wprowadzonych danych
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_ref:={? (1+menu_txt())='P' || INNKOM.ref() || null() ?};
{? INNKOM.OSOBA=null()
|| FUN.info('Należy podać członka komisji.'@);
   _res:='OSOBA'
|? (_buf:=exec('FindInSet','#table','INNKOM','INNOS',INNKOM.OSOBA,INN.ref(),,,,null());
    _buf<>null() & _buf<>_ref)
|| FUN.info('Osoba %1 %2 jest już zapisana jako członek komisji.'@[INNKOM.OSOBA().NAZWISKO,INNKOM.OSOBA().PIERWSZE]);
   _res:='OSOBA'
?};
:: zmiana przewodniczącego
{? _res='' & INNKOM.P='T'
|| INNKOM.cntx_psh();
   INNKOM.index('INNOS');
   INNKOM.prefix(INN.ref());
   {? INNKOM.first() || {! |? INNKOM.P:='N'; INNKOM.put(1); INNKOM.next() !} ?};
   INNKOM.cntx_pop()
?};
_res


\wycen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: pobiera cenę o ile brak ceny
::   WE: _a - magazyn
::       _b - ref materialu
::       _c - data
::   WY: cena
::----------------------------------------------------------------------------------------------------------------------
_date:={? var_pres('_c')=type_of(date) || _c || date(0,0,0) ?};
_time:={? var_pres('_d')=type_of(time()) || _d || time(0,0,0) ?};

_dokl_c:=exec('FindAndGet','#table',M,_b,,"DOKL_C",2);

_par:=exec('get','#params',600051,2);
_okr:=exec('get','#params',600052,2);

_okr+={? ~_okr || -1 || 1 ?};

:: ceny: minimum, maximum, średnia, ostatnia, mediana
_res:=obj_new(6); {! _ii..6 |! _res[_ii]:=0 !};
_dor:=_date~1;

_ile:=0; _war:=0;
_ldat:=form(date(0,0,0),,1)+form(date(0,0,0),,1)+form(time(0,0,0),,3);
_buf:=tab_tmp(1,'CEN','REAL','');
{? _par<>''
||
   ND.cntx_psh();
   DK.cntx_psh();
   OKR.cntx_psh();
   OKR.index('MC');
   OKR.prefix(REF.FIRMA,1);
   {? OKR.last()
   ||
      {!
      |? {? _okr>0 || _okr-=1 ?};
         {? OKR.ROK<=_dor | ~_dor
         || ND.use('nagdo'+ST.ODDZ+($OKR.ROK+2));
            DK.use('dokma'+ST.ODDZ+($OKR.ROK+2));

            DK.index('DOKPLUS');
            DK.prefix(_a,_b,'T','T');
            {? DK.last()
            || {!
               |? {? ~_dor | DK.N<=_date
                  || _dttm:=form(DK.N().D,,1)+form(DK.N().DA,,1)+form(DK.N().TA,,3);
                     _cen:=exec('cena_mag','ceny',DK.M,DK.RDK,DK.NDK,_a,DK.C);
                     {? _cen>0
                     || _war+=_cen*DK.IL $ _dokl_c;
                        _ile+=DK.IL;
                        {? _cen<_res[1] | _res[1]=0 || _res[1]:=_cen ?};
                        {? _cen>_res[2] | _res[2]=0 || _res[2]:=_cen ?};
                        {? _dttm>_ldat
                        || _res[4]:=_cen;
                           _ldat:=_dttm
                        ?};
                        _ll:=ceil(DK.IL);
                        {! _ii:=1.._ll |! _buf.blank(); _buf.CEN:=_cen; _buf.add(1) !}
                     ?}
                  ?};
                  DK.prev()
               !}
            ?}
         ?};
         (_okr=-1 | _okr>0)  & OKR.prev()
      !}
   ?};

   OKR.cntx_pop();
   DK.cntx_pop();
   ND.cntx_pop()
?};
:: średnia cena
_res[3]:={? _ile>0 || _war/_ile || 0 ?}$2;
:: mediana
_buf.clear();
{? _buf.first()
|| _ll:=_buf.size();
   _lp:=(_ll%*2)=0;
   _wsk:={? _lp || _ll/2 || ((_ll-1)/2)+1 ?};
   _ii:=0;
   {!
   |? _ii+=1;
      {? _ii=_wsk
      || {? ~_lp
         || _res[5]:=_buf.CEN;
            _next:=0
         || _res[5]:=_buf.CEN;
            _buf.next();
            _res[5]:=((_res[5]+_buf.CEN)/2)$2;
            _next:=0
         ?}
      || _next:=_buf.next()
      ?};
      _next
   !}
?};
obj_del(_buf);
:: wycena wg TKW
_res[6]:=exec('mptz_prop','zl_common',_b,'K');
_res


\pop0cen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: poprawia cenę zerową wg algorytmu
::   WE: _a - sposób wyceny
::       [_b] - 1-robić zapis (domyślnie), 0-nie
::----------------------------------------------------------------------------------------------------------------------
_wyc:={? var_pres('_a')=type_of('') || _a || '' ?};
_put:={? var_pres('_b')=type_of(0) || _b || 1 ?};

{? _wyc<>''
|| _cen:=exec('wycen','magazyn_inw',INN.MG,INP.M,INN.D,INN.T);
   _tkw:=0;
   _ll:=+_wyc;
   _ii:=0;
   {!
   |? _ii+=1;
      _ch:=1+((_ii-1)-_wyc);
      {? _ch='M' & _cen[1]>0 || INP.C:=_cen[1]; {? _put || INP.put(1) ?}
      |? _ch='X' & _cen[2]>0 || INP.C:=_cen[2]; {? _put || INP.put(1) ?}
      |? _ch='A' & _cen[3]>0 || INP.C:=_cen[3]; {? _put || INP.put(1) ?}
      |? _ch='L' & _cen[4]>0 || INP.C:=_cen[4]; {? _put || INP.put(1) ?}
      |? _ch='C' & _cen[5]>0 || INP.C:=_cen[5]; {? _put || INP.put(1) ?}
      |? _ch='T' & _cen[6]>0 || INP.C:=_cen[6]; {? _put || INP.put(1) ?}
      ?};
      _ii<_ll & INP.C=0
   !}
?};
~~


\inn_typ_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [23.25]
:: OPIS: wartość początkowa pola INN.INN_P
::----------------------------------------------------------------------------------------------------------------------
{? INN.name()<>'inw_nwyc'
|| exec('FindInSet','#table','TYPYDOK','TYP','INW+','INW+')
|| exec('FindInSet','#table','TYPYDOK','TYP','PRC+','PRC+')
?}


\inn_typ_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [23.25]
:: OPIS: wartość początkowa pola INN.INN_M
::----------------------------------------------------------------------------------------------------------------------
{? INN.name()<>'inw_nwyc'
|| exec('FindInSet','#table','TYPYDOK','TYP','INW-','INW-')
|| exec('FindInSet','#table','TYPYDOK','TYP','PRC-','PRC-')
?}


\typ_p_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [23.25]
:: OPIS: przed edycją pola INN.INN_M
::----------------------------------------------------------------------------------------------------------------------
TYPYDOK.prefix();
{? INN.name()<>'inw_nwyc'
|| TYPYDOK.f_set('T',,'INW=\'I\' and P=\'T\'')
|| TYPYDOK.f_set('T',,'INW=\'E\' and P=\'T\'')
?};
1


\typ_m_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [23.25]
:: OPIS: przed edycją pola INN.INN_M
::----------------------------------------------------------------------------------------------------------------------
TYPYDOK.prefix();
{? INN.name()<>'inw_nwyc'
|| TYPYDOK.f_set('T',,'INW=\'I\' and P=\'N\'')
|| TYPYDOK.f_set('T',,'INW=\'E\' and P=\'N\'')
?};
1

:Sign Version 2.0 jowisz:1045 2024/02/21 08:46:47 b0173a3c91c7137e46783f6c49232b0af445449689ddbf7da34ed77c9cf4cad6331223aafdfd7d18b5e3a354bc0d91f630da07ae9ed3a5aa3ae77a5f8d1f4ba6a300bba64b6e2f630583882ef4114ef3404e18bb4e841a2229d539d40f4f714bd55c672bd8d76b45a8a428b0e1e1722e9398b736b963ce5ce659dcaaad2ea34e
