:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: rap_zus.fml
:: Utworzony: 19.04.2016
:: Autor: jaws
::======================================================================================================================
:: Zawartosc: Funkcje wspomagające tworzenie raportów ZUS zgłoszeniowych i rozliczeniowych.
::======================================================================================================================


\rap_rozl_uid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy wartość kluczową czynności
::   WE: _a [INTEGER] - rok
::       _b [INTEGER] - miesiąc
::       _c [STRING] - typ raportu
::   WY: wartość identyfikatora
::----------------------------------------------------------------------------------------------------------------------
'_'+form(_a,-4,0,'99')+form(_b,-2,0,'99')+_c


\wyb_rap_rozl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wybór raportu rozliczeniowego
::   WE: _a - symbol raportu dla ustalenia posycji kursora tabeli
::   WY: symbol raportu lub tekst pusty
::  OLD: \rozlicz/rap_zus.fml
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') || _a || '' ?};
_ret:={? var_pres('_b')>=0 || _b || _typ ?};

exec('wyb_rap','rap_zus',exec('lista_rap_rozl','rap_zus'),_typ,_ret)


\wyb_rap_zglo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wybór raportu zgłoszeniowego
::   WE: _a - symbol raportu dla ustalenia posycji kursora tabeli
::   WY: symbol raportu lub tekst pusty
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') || _a || '' ?};
_ret:={? var_pres('_b')>=0 || _b || _typ ?};

exec('wyb_rap','rap_zus',exec('lista_rap_zglo_'+(-__F_ZATR.P),'rap_zus'),_typ,_ret)


\wyb_rap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Udostępnia do wyboru typy raportów ZUS.
::   WE: _a [TABLE] - alias do tabeli zawierającej listę raportów
::       _b [STRING] - domyślny typ raportu lub tekst pusty
::       _c [STRING] - wartość zwracana w przypadku braku wyboru
::   WY: symbol raportu lub tekst pusty
::----------------------------------------------------------------------------------------------------------------------
_wnd:=_a.mk_sel('Raporty ZUS'@,'N',1,'#raporty_zus',,,10);
_a.win_sopt(_wnd,'select_record_checkbox=0');
_a.win_act(_wnd,,'Formuła','Wybierz'@@,,'Wybór bieżącego zapisu'@,"sel_exit()",,1);
_a.win_sel(_wnd);

{? _b<>''
|| _a.find_key(_b,)
|| _a.first()
?};
{? _a.select(,1)
|| _a.SYMBOL
|| _c
?}


\lista_rap_rozl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Przygotowuje listę raportów rozliczeniowych ZUS
::   WE:
::   WY: alias tabeli tymczasowej zawierającej informacje o raportach
::----------------------------------------------------------------------------------------------------------------------
_buf:=exec('lista_rap','rap_zus');
exec('lista_rap_zus','rap_zus',_buf,
   'DRA','Deklaracja rozliczeniowa'@,
   'RCA','Imienny raport miesięczny o należnych składkach i wypłaconych świadczeniach'@,
   'RSA','Raport imienny o wypłaconych świadczeniach i przerwach w opłacaniu składek'@,
   'RPA','Imienny raport miesięczny o przychodach ubezpieczonego/okresach pracy nauczycielskiej'@
);
:: Parametr 292: Ukryć generowanie formularza RZA
{? PAR_SKID.get(292)='N'
|| exec('lista_rap_zus','rap_zus',_buf,'RZA','Raport imienny o należnych składkach na ubezpieczenie zdrowotne'@)
?};
:: Jeżeli zostało złożone oświadczenie ZUS OSW to umożliwienie wygenerowania raportu ZUS RIA.
:: Należy aktywować poniższy kod jeżeli raport RIA zostanie przygotowany.
::{? exec('ZUS_OSW','rap_zus') || exec('lista_rap_zus','rap_zus',_buf,'RIA','Raport informacyjny'@) ?};

_buf


\lista_rap_zglo_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Przygotowuje listę raportów zgłoszeniowych ZUS dla pracowników
::   WE:
::   WY: alias tabeli tymczasowej zawierającej informacje o raportach
::----------------------------------------------------------------------------------------------------------------------
_buf:=exec('lista_rap','rap_zus');
exec('lista_rap_zus','rap_zus',_buf,
   'ZUA','Zgłoszenie do ubezpieczeń/zgłoszenie zmiany danych osoby ubezpieczonej'@,
   'ZWUA','Wyrejestrowanie z ubezpieczeń'@,
   'ZCNA','Zgłoszenie/wyrejestrowanie danych o członkach rodziny dla celów ubezpieczenia zdrowotnego'@,
   'ZSWA','Zgloszenie/korekta danych o pracy w szczególnych warunkach lub o szczególnym charakterze'@
);
_buf


\lista_rap_zglo_z
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Przygotowuje listę raportów zgłoszeniowych ZUS dla zleceniobiorców
::   WE:
::   WY: alias tabeli tymczasowej zawierającej informacje o raportach
::----------------------------------------------------------------------------------------------------------------------
_buf:=exec('lista_rap','rap_zus');
exec('lista_rap_zus','rap_zus',_buf,
   'ZUA','Zgłoszenie do ubezpieczeń/zgłoszenie zmiany danych osoby ubezpieczonej'@,
   'ZZA','Zgłoszenie do ubezpieczenia zdrowotnego'@,
   'ZWUA','Wyrejestrowanie z ubezpieczeń'@,
   'RUD','Zgłoszenie umowy o dzieło'@
);
_buf


\lista_rap_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Dodaje wpisy do listy raportów ZUS
::   WE: _a [TABLE] - alias tabeli tymczasowej
::       _b [STRING] - symbol raportu
::       _c [STRING] - opis raportu
::       ...
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{! _arg:=2//2.._
|! _a.SYMBOL:=~-_[_arg];
   _a.OPIS:=_[_arg+1];
   _a.add()
!}


\lista_rap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Tworzy tabelę przechowującą informacje o raportach ZUS
::   WE:
::   WY: alias tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(1,
   'SYMBOL','STRING[4]','Symbol',
   'OPIS','STRING[100]','Opis'
)


\info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wyświetlanie komunikatow
::   WE: _a - typ komunikatu
::  OLD: \err_msg/rap_zus.fml
::----------------------------------------------------------------------------------------------------------------------
echo;
_a:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_file:=exec('nazwa_pliku','rap_zus');

{? _a=1
|| FUN.emsg(
      ~-(OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE)+
      '\nBrak informacji o ubezpieczeniu osoby.'
   )
|? _a=2
|| _msg:='Nie znaleziono osób, dla których należałoby utworzyć raport.'@;
   {? ~exec('interm','#system')
   || _msg+='\nNie importuj pliku %1 w programie "Płatnik".'@[exec('nazwa_pliku','rap_zus')]
   ?};
   FUN.emsg(_msg)
|? _a=3
|| _msg:='Proces tworzenia raportu został zakończony'@;
   {? exec('interm','#system')
   || _msg+='.'
   || _msg+='\n(definicja zapisana w pliku %1).'@[exec('nazwa_pliku','rap_zus')]
   ?};
   FUN.info(_msg)
|? _a=4
|| FUN.emsg('%1 %2\nNiespójne dane okresu nieskładkowego.'@[OSOBA.NAZWISKO,OSOBA.PIERWSZE])

|| FUN.emsg('Nieprawidłowy parametr wywołania.'@)
?}


\otworz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Otwiera plik zawierający raport.
::   WE:
::   WY:
::  OLD: \open/rap_zus.fml
::----------------------------------------------------------------------------------------------------------------------
_name:=exec('nazwa_pliku','rap_zus');
_name:={? exec('interm','#system') || '' || '@' ?}+_name;
{? (_out:=fopen(_name,'w'))<=0
|| FUN.error('Raport %1. Błąd dostępu do pliku %2.'@[ZUS.RAPORT,_name])
?};
_out


\nazwa_pliku
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca pełną nazwę pliku raportu.
::   WE:
::   WY: nazwa pliku raportu
::----------------------------------------------------------------------------------------------------------------------
{? exec('interm','#system')
|| -(ZUS.FOLDER+ZUS.PLIK+'.xml')
|| _div:={? -sys_name()='windows' || '\\' || '/' ?};
   {? (_path:={? +ZUS.FOLDER || ZUS.FOLDER+_div || '' ?})<>''
   || _path:=gsub(_path,_div*2,_div)
   ?};
   -(_path+ZUS.PLIK+'.xml')
?}


\buf_oddo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Tworzy bufor pomocniczy dla normalizacji okresow
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(1,
   'OD','DATE','Od dnia',
   'DO','DATE','Do dnia'
)


\ustal_dz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.index('PRACOSOB');
P.prefix(exec('ref_firma','ustawienia'),'P',OSOBA.ref());
_data:=_zdate:=date(0,0,0);
{? P.first()
|| {!
   |? {? P.DZA<=date(_a,_b,0)
      || {? P.DZ=_zdate || return(_zdate)
         |? date(_a,_b,0)<=P.DZ || return(_zdate)
         |? _data<P.DZ || _data:=P.DZ
         ?}
      ?};
      P.next()
   !}
?};
_data


\wym_zat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zlicza łączny wymiar czasu pracy. Dana osoba może być zatrudniona wielokrotnie (kilka "równoleglych", cząstko-
::       wych etatów). Wywołanie funkcji tylko przy ustawionym indeksie PRACOSOB dla tabeli P
::   WE: _a - wskazanie na rekord w tabeli OSOBA
::       _b - data, dla której przeprowadzany jest test
::       _c - (opcjonalny) precyzja
::       _d - (opcjonalny) pomijaj pracowników na urlopach bezpłatnych, wychowawczych, odbywajacych służbę wojskową,
::            rehabilitowanych, może być typu liczbowego lub aliasem do tabeli zawierającej kolumny OD i DO
::       [_e] - opcjonalny atrybuty nieobecnosci nieuwzglednianych w obliczeniach w postaci
::              'atr1,atr2,atrZ,...'. Jesli nie podany - sprawdzany jest atrybut 19431
::       [_f] - opcjonalny jesli rozny od zera nie bedzie wykluczenia ze stopniem niepelnosprawnosci
::   WY: jeśli _c pominięty lub rowny 0 zwracany jest tekst w postaci LLLMMM gdzie LLL licznik a MMM mianownik wymiaru
::       etatu, obydwie wartości są dopełniane zerami z lewej strony
::       gdy _c jest liczbą wiekszą od zera funkcja zwraca wymiar etatu w postaci ułamka dziesiętnego z _c miejscami
::       po przecinku
::----------------------------------------------------------------------------------------------------------------------
_m_licz:=obj_new(_b~3);
_m_mian:=obj_new(obj_len(_m_licz));
_oddo:=~~;
_pom_nieo:="exec('pom_nieo','rap_zus',_a,_b,_c,_d,_e)";
{? var_pres('_d')=type_of(0) & _d
|| _oddo:=exec('buf_oddo','rap_zus')
|? var_pres('_d')=type_of(SYSLOG)
|| _oddo:=_d
|| _pom_nieo:="1"
?};
{? var_pres('_e')=type_of('') & +_e || _atryb:=_e || _atryb:='' ?};
{? var_pres('_f')=type_of(0) & _f || _sprawny:=_f || _sprawny:=0 ?};
P.cntx_psh();
P.index('PRACOSOB');
P.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,_a);
H.cntx_psh();
H.index('_HISTKOD');
_loop:=P.first();
{!
|? _loop
|! H.prefix(P.ref(),'Z');
   {? H.find_le(_b) & (date(_b~1,_b~2,1)<=H.DO | H.DO=date(0,0,0)) & _pom_nieo(P.ref,_b,_oddo,_atryb,_sprawny)
   || _od:={? date(_b~1,_b~2,1)<H.OD
           || H.OD~3
           || 1
           ?};
      _do:={? _b<=H.DO | H.DO=date(0,0,0)
           || _b~3
           |? date(_b~1,_b~2,1)<=H.DO
           || H.DO~3
           ?};
      {? _od & _do
      || {! _dn:=_od.._do
         |! {? var_pres('['+$_dn+']',_m_licz)=type_of(0)
            || {? _m_mian[_dn]=H.RWYM
               || _m_licz[_dn]+=H.RWYL
               || _m_licz[_dn]:=_m_licz[_dn]*H.RWYM+H.RWYL*_m_mian[_dn];
                  _m_mian[_dn]*=H.RWYM
               ?}
            || _m_licz[_dn]:=H.RWYL;
               _m_mian[_dn]:=H.RWYM
            ?}
         !}
      ?}
   ?};
   _loop:=P.next
!};
H.cntx_pop();
P.cntx_pop();
_rap:=6*' ';
_licz:=_mian:=0;
{! _dn:=_b~3//-1..1
|? {? var_pres('['+$_dn+']',_m_licz)=type_of(0)
   || _licz:=_m_licz[_dn];
      _mian:=_m_mian[_dn];
      {? _licz>1
      || {? _mian%*_licz=0
         || _mian/=_licz;
            _licz:=1
         || {! _nn:=10//-1..2
            |! {!
               |? _licz%*_nn=0 & _mian%*_nn=0
               |! _licz/=_nn;
                  _mian/=_nn
               !}
            !}
         ?}
      ?};
      {? _licz<1000 & _mian<1000
      || _rap:=form(_licz,-3)+form(_mian,-3)
      || _rap:=6*'0'
      ?};
      0
   || 1
   ?}
!};

obj_del(_m_licz);
obj_del(_m_mian);

{? var_pres('_c')=type_of(0) & _c
|| {? _mian || (_licz/_mian)$_c ?}
|| _rap
?}


\ustaw_pi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Przypisanie polom bufora wartości z informacji ubezpieczeniowych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _=1
|| exec('ustaw_pi','rap_zus',_a,'TTUB','TPID','BLWN')
?};
{? _>=2
|| {! _arg:=2.._
   |! {? _[_arg]='TTUB'
      || _a.TTUB:=
            P_INFO.TTUB().KOD+
            P_INFO.PREM().KOD+
            P_INFO.STNP().KOD

      |? _[_arg]='TPID'
      || {? P_INFO.OSOBA<>OSOBA.ref ()
         || P_INFO.OSOBA().NAZWISKO
         ?};
         _a.TPID:=P_INFO.TPID().KOD;
         {? _a.TPID='N'
         || _a.TPID:='P'
         ?};
         _nrid:=
            {? _a.TPID='P' || OSOBA.PESEL
            |? _a.TPID='2' || OSOBA.PASZPORT
            |? _a.TPID='1' || OSOBA.DOWOD
            || ''
            ?};
         _nrid:=gsub(_nrid,' ','');
         _a.NRID:=gsub(_nrid,'-','')

      |? _[_arg]='BLWN' & P_INFO.BLOKADA<=date(O.RU,O.MU,0)
      || _a.BLWN:=P_INFO.BLWN().KOD
      ?}
   !}
?}


\pom_nieo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Procedura wypelnia bufor okresem pomijanych nieobecnosci
::   WE: _a [_P]      - P.ref
::       _b [DATE]    - data miesiaca
::       _c [TABLE]   - bufor dat zgodny z exec('buf_oddo','rap_zus')
::       [_d][STRING] - opcjonalne podanie atrybutow do analizowania typow nieobecnosci w postaci stringu,
::                      np: 'atr.1,atr2'. jesli nie podany sprawdzany jest atrybut 19431
::       [_e][INTEGER] - opcjonalnie jesli rozny od zera nie bedzie wykluczenia osob z podanym stopniem
::                       niepelnosprawnosci
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_prac:=_a;
_dt:=_b;
{? var_pres('_d')=type_of('') & +_d || _atryb:=_d || _atryb:='19431' ?};
_bezPomNp:={? var_pres('_e')=type_of(0) || _e || 0 ?};
P.cntx_psh();
P.prefix();
_osoba:=null;
{? P.seek(_prac)
|| _pdz:=P.DZ;
   _pdza:=P.DZA;
   _osoba:=P.OSOBA
|| P.cntx_pop();
   return(0)
?};
P.cntx_pop();

_result:=1;

_od:=date(_dt~1,_dt~2,1);
_do:=date(_dt~1,_dt~2,0);
_zdate:=date(0,0,0);

_NB:=~~;
_mk_buf:="";
{? var_pres('_c')<>type_of(SYSLOG)
|| _mk_buf:="exec('buf_oddo','rap_zus')";
   _free:="{? type_of(_a) || obj_del(_a) ?}";
   _c:=~~
|| _free:="";
   _c.erase();
   _NB:=_c
?};

:: Sprawdzenie parametru "bez wykluczenia osob z podanym stopniem niepelnosprawnosci"
{? ~_bezPomNp
|| P_INFO.cntx_psh();
   P_INFO.index('OD');
   P_INFO.prefix(exec('ref_firma','ustawienia'),_osoba);
   {? P_INFO.last()
   || {!
      |? {? P_INFO.STNP().KOD<>'0' & P_INFO.STNP_OD<=_do
         || {? ~type_of(_NB)
            || _NB:=_mk_buf()
            ?};
            _NB.OD:={? P_INFO.STNP_OD=_zdate | P_INFO.STNP_OD<=_od || _od || P_INFO.STNP_OD ?};
            _NB.DO:={? P_INFO.STNP_DO=_zdate | _do<=P_INFO.STNP_DO || _do || P_INFO.STNP_DO ?};
            {? ~_NB.find_rec || _NB.add ?}
         ?};
         P_INFO.prev()
      !}
   ?};
   P_INFO.cntx_pop()
?};

{? type_of(_NB) & (_NB.last() & _do<=_NB.DO) & (_NB.first() & _NB.OD<=_od)
|| {? _NB.size()=1
   || _free(_NB);
      return(1)
   ?};
   _cnt:=1;
   _tod:=_NB.DO;
   {!
   |? _cnt & _NB.next()
   |! {? _NB.OD<=(_tod+1)
      || _tod:=_NB.DO
      || _cnt:=0
      ?}
   !};
   &_tod;
   {? &_cnt
   || _free(_NB);
      return(1)
   ?}
?};
{? type_of(_NB) & _NB.size()
|| _NB.erase()
?};

N.cntx_psh();
N.index('NIPRACNB');
_ATR:=spli_str(_atryb,',');
{! _ii:=1..obj_len(_ATR)
|! {? var_pres('_kod')>100
   || &_kod
   ?};
   _kod:=__RUB.sys_rub(#(_ATR[_ii]),_do);
   {? _kod.first()
   || {!
      |? N.prefix('N',_prac,_kod.RN);
         {? N.find_le(_do) & _od<=N.DO
         || {? ~type_of(_NB)
            || _NB:=_mk_buf()
            ?};
            {!
            |? _NB.OD:=N.OD;
               _NB.DO:=N.DO;
               _NB.add();
               N.prev() & N.OD<=_do & _od<=N.DO
            !}
         ?};
         _kod.next()
      !}
   ?}
!};
obj_del(_ATR);
N.cntx_pop();

P.cntx_psh();
{? P.seek(_prac)
|| _do:=
      {? P.DZ=#0 | _do<P.DZ
      || _do
      || P.DZ
      ?};
   _od:=
      {? P.DZA<_od
      || _od
      || P.DZA
      ?}
?};
P.cntx_pop();
{? type_of(_NB) & (_NB.last() & _do<=_NB.DO) & (_NB.first() & _NB.OD<=_od)
|| {? _NB.size()=1
   || _free(_NB);
      return(0)
   ?};
   _od:=_NB.DO;
   {!
   |? _NB.next()
   |! {? _NB.OD<=(_od+1)
      || _od:=_NB.DO
      || _free(_NB);
         return(1)
      ?}
   !};
   _free(_NB);
   _result:=0
?};

_result


\wyl_wych
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wyliczenie dla wszystkich pracowników składek na ubezpieczenia społeczne finansowane przez budżet państwa
::       opłacanych za osoby przebywające na urlopie wychowawczym. Formuła podst_sk\wylwych pomija osoby zwolnione
::       przed początkiem miesiąca dla którego przygotowywana jest lista.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
O.cntx_psh();
O.index('LISTYPLU');
O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,O.RU,O.MU,'ZXX');

{? O.first()
|| FUNKCJE.OTWOLIST();

   _wych:=sql(
      'select N.P as P '
      'from N '
      'where  to_date(:_a)<=N.DO and N.OD<=to_date(:_b) and N.NB=:_c and N.KOR=\'N\' and N.FIRMA=:_d',
      date(O.RU,O.MU,1),
      date(O.RU,O.MU,0),
      __RUB.ref(3),
      exec('ref_firma','ustawienia')
   );

   {? _wych.first()
   || P.cntx_psh();
      P.index('PRACOIP');
      P.prefix(exec('ref_firma','ustawienia'));
      {!
      |? {? P.seek(_wych.P)
         || P.OSOBA();
            exec('wyl_wych_podst_sk','lista_licz')
         ?};
         _wych.next()
      !};
      P.cntx_pop()
   ?};
   obj_del(_wych)

?};
O.cntx_pop();
FUNKCJE.OTWOLIST()


\to_file
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Funkcja zapisu wiersza do pliku z konwersja kodowania
::----------------------------------------------------------------------------------------------------------------------
"_line:=maz_utf8(_b); fwrite(_a,_line)"


\rate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Funkcja konwersji wartosci liczbowych do wymaganego formatu (2 miejsca dziesietne po kropce)
::----------------------------------------------------------------------------------------------------------------------
"  _ab:=gsub($(_a$2),',','.');
   {? _a>0
   || _ab:={? _a$0=_a$2 || $_ab+'.00' || $_ab+'00' ?};
      _poz:=_ab*'.';
      (_poz+2)+_ab
   || '0.00'
   ?}
"


\cxml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Funkcja konwersji znakow zastrzezonych w XML oraz ograniczenia dlugosci ciagu
::   WE: _a  - ciag do kontroli i konwersji
::      [_b] - dopuszczalna dlugosc ciagu (nadmiar zostanie uciety z prawej strony) [INTEGER]
::      [_c] - znaki niedowolone do usuniecia z ciagu [STRING] - pojedynczo bez rozdzielania
:: UWAGA: kolejnosc kownwersji jest znaczaca
::----------------------------------------------------------------------------------------------------------------------
"  {? var_pres('_c')=type_of('') & +_c
   || {!
      |? _znak:=1+_c;
         _c:=1-_c;
         _a:=gsub(_a,_znak,'');
         +_c
      !}
   ?};
   {? var_pres('_b')=type_of(0) & _b>0
   || _a:=_b+_a
   ?};
   _a:=gsub(_a,'&','&amp;');
   _a:=gsub(_a,'<','&gt;');
   _a:=gsub(_a,'>','&lt;');
   _a:=gsub(_a,'\\\'','&apos;');
   _a:=gsub(_a,'\\\"','&quot;');
   _a:=form(_a);
   _a
"


\xml_head_kedu4
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.30]
:: OPIS: Naglowek dokumentu XML KEDU_4 Platnik wersja 9.01.001
::   WE: _a - uchwyt pliku do zapisu
::       _b - data utworzenia w formacie XML
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_dataxml:=_b;
_save:=exec('to_file','rap_zus');

_save(_file,'<?xml version="1.0" encoding="UTF-8"?>');
_save(_file,'<KEDU wersja_schematu="1" '+
                  'xmlns="http://www.zus.pl/2013/KEDU_4" '+
                  'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" '+
                  'xsi:schemaLocation="http://www.zus.pl/2013/KEDU_4 kedu_4.xsd">');
_save(_file,'<naglowek.KEDU>');
_save(_file,'  <program><producent>%1</producent><symbol>%2</symbol>'
   '<wersja>%3</wersja></program>'[exec('producent','#system'),FUN.TYT,exec('wersja','#system')]);
_save(_file,'<data_utworzenia_KEDU>%1</data_utworzenia_KEDU>'[_dataxml]);
_save(_file,'</naglowek.KEDU>');
1


\xml_dane_platn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Dane indentyfikacyjne platnika skladek - blok sprawozdan XML do Platnika
::   WE: _a - uchwyt pliku do zapisu
::       _b - oznaczenie bloku [STRING] - liczba rzymska
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_blok:=_b;
_cxml:=exec('cxml','rap_zus');
_save:=exec('to_file','rap_zus');

_save(_file,'<'+_blok+'>');
{? +KST.NIP || _save(_file,'  <p1>'+_cxml(KST.NIP,10,'- ')+'</p1>') ?};          'NIP';
{? +KST.REG || _save(_file,'  <p2>'+_cxml(KST.REG,14)+'</p2>') ?};               'REGON';
:: _save(_file,'  <p3></p3>');                                                     'PESEL';
:: _save(_file,'  <p4></p4>');                                                     'Rodzaj dokumentu - DO, paszport';
:: _save(_file,'  <p5></p5>');                                                     'Seria i nr dokumentu';
{? +KST.SKROT || _save(_file,'  <p6>'+_cxml(KST.SKROT,31)+'</p6>') ?};           'Nazwa skrocona';
:: _save(_file,'  <p7></p7>');                                                     'Nazwisko';
:: _save(_file,'  <p8></p8>');                                                     'Imie';
:: _save(_file,'  <p9></p9>');                                                     'Data urodzenia (format xml)';
_save(_file,'</'+_blok+'>');
1


\xml_2dane_ubezp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Dane identyfikacyjne osoby ubezpieczonej (wersja 2) - blok sprawozdan XML do Platnika
::   WE: _a  - uchwyt bufora
::       _b  - uchwyt pliku do zapisu
::      [_c] - ilosc tabulatorow wciecia
::----------------------------------------------------------------------------------------------------------------------
_bufor:=_a;
_file:=_b;
_tab:={? var_pres('_c')=type_of(0) & _c>0 || _c*3 || 0 ?}*' ';
_save:=exec('to_file','rap_zus');
_cxml:=exec('cxml','rap_zus');

:: Nazwisko
_save(_file,_tab+'<p1>'+_cxml(~-OSOBA.NAZWISKO,30)+'</p1>');
:: Imie pierwsze
_save(_file,_tab+'<p2>'+_cxml(~-OSOBA.PIERWSZE,20)+'</p2>');
:: Typ identyfikatora - typ zgodnie z okresleniami ZUS
_xtmp:=form(~-_bufor.TPID);
_save(_file,_tab+'<p3>'+_cxml({? +_xtmp || _xtmp || '0' ?})+'</p3>');
:: Identyfikator
_xtmpI:=form(~-_bufor.NRID);
_id:='12'*_xtmp & +_xtmp;
{? ~+_xtmpI || _xtmpI:='0' ?};
_save(_file,_tab+'<p4>'+{? _id || _cxml(_xtmpI,9,'- ') || _cxml(_xtmpI) ?}+'</p4>');
1


\xml_KodTytUbezp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Kod tytulu ubezpieczenia osoby ubezpieczonej - blok sprawozdan XML do Platnika
::   WE: _a  - uchwyt bufora lub szescioznakowy kod tytulu ubezpieczenia
::       _b  - uchwyt pliku do zapisu
::      [_c] - ilosc tabulatorow wciecia 3
:: UWAGA: Podanie niekompletnego kodu tytulu ubezpieczenia badz przekazanie zmiennej niewlasciwego typu
::        spowoduje przekazanie do formularza kodu uzupelnionego zerami.
::        Po wczytaniu do Programu Platnika kody te nalezy uzupelnic recznie.
::----------------------------------------------------------------------------------------------------------------------
_ttub:={? var_pres('_a')=type_of('') || _a
       |? var_pres('_a')=type_of(SYSLOG)
        & var_pres('TTUB',_a)>0
        & type_of(_a.TTUB)=type_of('')
       || _a.TTUB
       || '000000'
       ?};
_ttub:=gsub(_ttub,'@','');
_ttub:=gsub(~-_ttub,'E','');
_ttub:=gsub(~-_ttub,'+','');
_ttub:=gsub(~-_ttub,'-','');
_ttub:=gsub(~-_ttub,'.','');
{? +_ttub<>6 | #_ttub<=0 || _ttub:=6*'0' ?};
_file:=_b;
_tab:={? var_pres('_c')=type_of(0) & _c>0 || _c*3 || 0 ?}*' ';
_save:=exec('to_file','rap_zus');
_cxml:=exec('cxml','rap_zus');
_p1:=('0000'+(4+_ttub))+4;
_p2:=('0'+(1+(4-_ttub)))+1;
_p3:=('0'+(5-_ttub))+1;

_save(_file,_tab+'<p1>'+_cxml(_p1)+'</p1>');
_save(_file,_tab+'<p2>'+_cxml(_p2)+'</p2>');
_save(_file,_tab+'<p3>'+_cxml(_p3)+'</p3>');
1


\xml_dane_ubezp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Dane identyfikacyjne osoby ubezpieczonej (wersja 1) - blok sprawozdań XML do Płatnika
::   WE: _a - uchwyt pliku do zapisu
::       _b - numer bloku [STRING] - liczba rzymska
::   WY:
::  OLD: \xml_dane_ubezp/rap_zua.fml
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_blok:=_b;
_save:=exec('to_file','rap_zus');
_cxml:=exec('cxml','rap_zus');
_cdxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";

_save(_file,'<'+_blok+'>');
{? +(|OSOBA.PESEL)
|| _save(_file,'   <p1>'+_cxml(OSOBA.PESEL,11)+'</p1>');       'PESEL'
?};
_p3:=''; _p4:='';
{? OSOBA.PESEL=''
|| {? OSOBA.OBCY='T'
   || _p3:='2'; _p4:=~-OSOBA.PASZPORT
   || _p3:='1'; _p4:=~-OSOBA.DOWOD
   ?}
?};
{? _p3<>'' || _save(_file,'   <p3>'+_p3+'</p3>') ?};               'Rodzaj dokumentu';
{? _p4<>'' || _save(_file,'   <p4>'+_cxml(_p4,9,'- ')+'</p4>') ?}; 'Seria i numer dokumentu';
_save(_file,'   <p5>'+_cxml(~-OSOBA.NAZWISKO,31)+'</p5>');     'Nazwisko';
_save(_file,'   <p6>'+_cxml(~-OSOBA.PIERWSZE,22)+'</p6>');     'Imie pierwsze';
_save(_file,'   <p7>'+_cdxml(OSOBA.UR_DATA)+'</p7>');          'Data urodzenia';
_save(_file,'</'+_blok+'>');
1


\xml_adres_ubezp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Dane adresowe ubezpieczonego
::   WE: _a - uchwyt pliku do zapisu
::       _b - numer bloku [STRING] - liczba rzymska
::       _c - rodzaj adresu
::       [_d] - opcjonalny data wyszukiwania adresu
:: UWAGA: Argumenty wejściowe nie podlegają weryfikacji. Formula pracuje na bieżącym ustawieniu bufora OSOBA
::   WY:
::  OLD: \xml_adres_ubezp/rap_zua.fml
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_sekcja:=_b;
_adres:=~-_c;
{? var_pres('_d')<>type_of(date) || _d:=date ?};
_dataADR:=_d;

_save:=exec('to_file','rap_zus');
_cxml:=exec('cxml','rap_zus');
_wiersz:="{? +(|_d)
          || _tab:=3*' '; _save:=_a; _file:=_b; _sekcja:=_c; _wartosc:=_d;
             _save(_file,_tab+'<'+_sekcja+'>'+_wartosc+'</'+_sekcja+'>')
          ?};
          1
         ";

{? exec('szukaj','osoba',_adres,_dataADR)
|| _kodp:=gsub(OS_ADRES.KOD,'-','');
   _kodPL:={? ~-OS_ADRES.KRAJ().KODZUS='PL' & (+_kodp=5) || _cxml(_kodp,5) || '' ?};
   _kodZA:={? ~-OS_ADRES.KRAJ().KODZUS<>'PL' || _cxml(OS_ADRES.KRAJ().KODZUS+'-'+_kodp,12) || '' ?};
   _miasto:={? +(~-OS_ADRES.MIASTO) || _cxml(~-OS_ADRES.MIASTO,26) || '' ?};
   _gmina:={? +(~-OS_ADRES.GMINA) || _cxml(~-OS_ADRES.GMINA,26) || '' ?};
   _ulica:={? +(~-OS_ADRES.ULICA) || _cxml(~-OS_ADRES.ULICA,30) || '' ?};
   _dom:={? +(|OS_ADRES.DOM) || _cxml(~-OS_ADRES.DOM,7) || '' ?};
   _lokal:={? +(|OS_ADRES.LOKAL) || _cxml(~-OS_ADRES.LOKAL,7) || '' ?};
   _skrpocz:='';
   _tel:={? +(|OS_ADRES.TEL) || _cxml(OS_ADRES.TEL,12,'- ') || '' ?};
   _email:={? +(|OS_ADRES.EMAIL) || _cxml(OS_ADRES.EMAIL,30) || '' ?};

   _save(_file,'<'+_sekcja+'>');
   {? _adres='K'
   || _wiersz(_save,_file,'p1',_kodPL);
      _wiersz(_save,_file,'p2',_miasto);
      _wiersz(_save,_file,'p3',_ulica);
      _wiersz(_save,_file,'p4',_dom);
      _wiersz(_save,_file,'p5',_lokal);
      _wiersz(_save,_file,'p6',_skrpocz);
      _wiersz(_save,_file,'p7',_tel);
      _wiersz(_save,_file,'p8',_kodZA);
      _wiersz(_save,_file,'p9',_email)
   ||
      _wiersz(_save,_file,'p1',_kodPL);
      _wiersz(_save,_file,'p2',_miasto);
      _wiersz(_save,_file,'p3',_gmina);
      _wiersz(_save,_file,'p4',_ulica);
      _wiersz(_save,_file,'p5',_dom);
      _wiersz(_save,_file,'p6',_lokal);
      _wiersz(_save,_file,'p7',_tel);
      _wiersz(_save,_file,'p8',_kodZA)
   ?};
   _save(_file,'</'+_sekcja+'>')
?}


\show_win
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Wyświetla okienko z historii wygenerowanych raportów ZUS dla danej osoby
::   WE:
::   WY:
::  OLD: \show_win/rap_zua.fml
::----------------------------------------------------------------------------------------------------------------------
USERS.cntx_psh();
ZUS_RAP.cntx_psh();
ZUS_RAP.index('ZUS_DATA');
ZUS_RAP.prefix(OSOBA.ref());
ZUS_RAP.win_sel('WER');
ZUS_RAP.hdr_sel();
ZUS_RAP.hdr_sel('-HISTORIA: '+OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE);
ZUS_RAP.select();
ZUS_RAP.cntx_pop();
USERS.cntx_pop()


\wyp_ubez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Formuła na "Rekord - przed" w oknach wertowania tabeli ZUS_RAP.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::  OLD: \wyp_ubez/rap_zua.fml
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:=ZUS_RAP.TTUB().KOD+ZUS_RAP.PREM().KOD+ZUS_RAP.STNP().KOD;
POLA_GRP.TXT_2:=ZUS_RAP.ZC_TTUB().KOD+ZUS_RAP.ZC_PREM().KOD+ZUS_RAP.ZC_STNP().KOD;
0


\zus_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Okno do redakcji parametrów dla raportów zgłoszeniowych ZUS (ZUA,ZWUA,ZCNA)
::   WE: _a - Symbol raportu
::       _b - forma zatrudnienia
::       _c - 0 poza procesem, 1 w procesie
::       [_d] - ścieżka do katalogu tymczasowego na serwerze (inTerm)
::   WY:
:: ~OST: INFOPEN, INFDIR
::----------------------------------------------------------------------------------------------------------------------
wybor:=0;
_inTerm:={? var_press('_d')=type_of('') & _d<>'' || 1 || 0 ?};
_winSize:={? 'ZWUA'*_a & _c & _b='P' || 'html_maximized' || '' ?};
_red:=ZUS.mk_edit('Raporty zgłoszeniowe'@,0,,,,_winSize);
ZUS.win_esep(_red,'Parametry raportu'@);
{? ~_inTerm
|| ZUS.win_efld(_red,,'FOLDER',,,48,,,'Folder lokalny'@,,'Lokalizacja do zapisu pliku wymiany danych'@);
   ZUS.fld_ebtn(_red,'icon=xwin16.png:90',"exec('zus_folder_f3','rap_zus')")
?};
ZUS.win_efld(_red,,'PLIK',,,53,,0,'Plik'@,,'Nazwa pliku wymiany'@);
ZUS.efld_opt(_red,'mark=1',,'PLIK');
__chk:={? _inTerm
       || '_chk:=__CHK.record(ZUS,,\'PLIK\''
       || '_chk:=__CHK.record(ZUS,,\'FOLDER\',\'PLIK\''
       ?};
{? 'ZSWA'*_a
|| ZUS.win_efld(_red,,'ROK',,,12,,0,'Deklaracja za rok'@,,'Rok, za który przygotowywana jest deklaracja'@);
   ZUS.efld_opt(_red,'mark=1',,'ROK');
   ZUS.fld_fml('ROK','AFTER_EDIT',
      "{? ZUS.ROK<2010 || FUN.emsg(\'Deklaracja nie może być wystawiona za rok wcześniejszy niż 2010.\'@); 0 || 1 ?}");
   ZUS.win_efld(_red,,'NUMER',,,12,,0,'Numer deklaracji'@,,'Numer tworzonej deklaracji'@);
   ZUS.efld_opt(_red,'mark=1',,'NUMER');
   ZUS.fld_fml('NUMER','AFTER_EDIT',
      "{? ZUS.NUMER<=0 || FUN.emsg(\'Numer deklaracji musi być większy od 0.\'@)
       |? ZUS.NUMER>1000 || FUN.emsg(\'Numer deklaracji musi być mniejszy od 1000.\'@)
       || 1
       ?}");
   __chk+=',\'ROK\',\'NUMER\''
?};
{? _a<>'RUD'
|| ZUS.win_efld(_red,,'DATA',,,10,,0,'Data wypełnienia'@,,'Data przygotowania raportu'@);
   ZUS.efld_opt(_red,'mark=1',,'DATA');
   __chk+=',\'DATA\''
?};
{? 'ZUA'*_a & _b='P'
|| ZUS.RODZZUA:=1;
   ZUS.win_efld(_red,,'RODZZUA',,,,,,'Zgłoszenie do:'@,,'Rodzaj zgłoszenia do ZUA'@,'radio-buttons',,
      'ubezpieczeń społecznych i ubezpieczenia zdrowotnego'@,"1",'ubezpieczeń społecznych'@,"0");
   ZUS.win_efld(_red,,'ODDBZ',,,,,0,'Uwzględnij pracowników oddelegowanych bez ZUS?'@,,
      'Czy wykazywać na liście osoby oddelegowane do pracy za granicą bez obliczania składek ZUS?'@,
      'check-box',,"1","0")
?};
{? 'ZSWA'*_a
|| ZUS.win_efld(_red,,'DATAG',,,10,,,'Data graniczna'@,,
      'Należy podać gdy pracownik złożył wniosek o emeryturę pomostową'@);
   ZUS.win_efld(_red,,'RODZAJ',,,,,,'Rodzaj dokumentu'@,,'Rodzaj dokumentu: zgłoszenie czy korekta'@,
               'radio-buttons',,'Zgłoszenie'@,"1",'Korekta'@,"2");
   ZUS.fld_fml('RODZAJ','AFTER_EDIT',
   "ZUS.efld_opt(cur_tab(1,1).win_edit(\'?'\),\'enable=\'+${? ZUS.RODZAJ=1 || 1 || 0 ?},,\'ZUA\'); ZUS.ZUA:=0; 1")
?};
{? 'ZZA'*_a
|| ZUS.win_efld(_red,,'RODZAJ',,,,,,'Cel wysłania dokumentu'@,,'Cel wysłania dokumentu'@,
      'radio-buttons',,'Zgłoszenie'@,"1",'Zmiana'@,"2",'Korekta'@,"3")
?};
{? 'ZUA,ZSWA,ZZA'*_a
|| _wsp:={? _b='P' || 'Uwzględnienie pracowników z raportem ubezpieczeniowym'@
         |? _b='Z' || 'Uwzględnienie zleceniobiorców z raportem ubezpieczeniowym'@
         || ''
         ?};
   ZUS.win_efld(_red,,'ZUA',,,,,0,'Raporty ZUS'@,,'Czy uwzględniać osoby zarejestrowane w ZUS'@,
               'check-box','check_label=%1'[_wsp],"1","0");
   ZUS.efld_opt(_red,'enable='+${? ZUS.RODZAJ=1 || 1 || 0 ?},,'ZUA')
?};
{? 'ZUA,ZSWA'*_a
|| ZUS.efld_opt(_red,'enable='+${? ZUS.RODZAJ=1 || 1 || 0 ?},,'ZUA')
?};
{? 'ZWUA'*_a
|| ZUS.win_efld(_red,,'ZUA',,,,,0,'Czy uwzględniać osoby wyrejestrowane z ZUS?'@,,
      'Czy uwzględniać osoby wyrejestrowane z ZUS?'@,'check-box',,"1","0");
   {? _c
   || ZUS.win_efld(_red,ZWUA,'TTUB',,,12,,0,'Tytuł ubezpieczenia'@,,'Tytuł ubezpieczenia'@);
      ZUS.efld_opt(_red,'mark=1',ZWUA,'TTUB');
      ZUS.win_efld(_red,ZWUA,'EMD',,,12,,0,'Data wyrejestrowania'@,,'Data wyrejestrowania'@);
      ZUS.efld_opt(_red,'mark=1',ZWUA,'EMD');
      ZUS.win_efld(_red,ZWUA,'EMK',,,12,,0,'Kod wyrejestrowania'@,,'Kod wyrejestrowania'@,,'F3_button=1');
      ZUS.efld_opt(_red,'mark=1',ZWUA,'EMK');
      __chk+='); ({? _chk=\'\' || _chk:=__CHK.record(ZWUA,,\'TTUB\',\'EMD\',\'EMK\') ?}';
      {? _b='P'
      || ZUS.win_efld(_red,ZWUA,'DO',,,11,,,'Data zakończenia'@,,'Data rozwiązania lub wygaśnięcia stosunku pracy'@);
         ZUS.efld_opt(_red,'mark=0,editable=grayed',ZWUA,'DO');
         ZUS.win_efld(_red,ZWUA,'USPKOD',,,4,,,'Kod rozwiązania'@,,'Kod rozwiązania/wygaśnięcia stosunku pracy'@);
         ZUS.efld_opt(_red,'mark=0,editable=grayed',ZWUA,'USPKOD');
         ZUS.win_efld(_red,ZWUA,'USPPPRAK',,,4,,,'Kod podstawy prawnej'@,,
            'Kod podstawy prawnej ustania stosunku pracy/służbowego'@
         );
         ZUS.efld_opt(_red,'mark=0,editable=grayed',ZWUA,'USPPPRAK');
         ZUS.win_efld(_red,ZWUA,'USPPPRAT',,,35,,,'Podstawa prawna'@,,
            'Podstawa prawna ustania stosunku pracy/służbowego'@
         );
         ZUS.efld_opt(_red,'mark=0,editable=grayed',ZWUA,'USPPPRAT');
         ZUS.win_efld(_red,ZWUA,'USPSTR',,,35,,,'Strona inicjująca'@,,'Strona inicjująca rozwiązanie stosunku pracy'@);
         ZUS.efld_opt(_red,'mark=0,editable=grayed',ZWUA,'USPSTR');

         __chk+=';
         {? _chk=\'\' & (2+ZWUA.TTUB=\'01\' & (ZWUA.EMK=\'100\' | ZWUA.EMK=\'500\')) || _chk:=__CHK.record(ZWUA,1,';
         __chk+='\'DO\',\'USPKOD\',\'USPPPRAK\'';
         {? ZWUA.USPPPRAK='550'
         || __chk+=',\'USPPPRAT\''
         ?};
         __chk+=',\'USPSTR\'); ';
         __chk+='{? +_chk || ';
         __chk+='FUN.emsg(\'Brak wymaganych danych o rozwiązaniu umowy.\nNależy je uzupełnić w umowie o pracę\'); ';
         __chk+='_chk:={? wybor=2 || wybor:=8; \'\' || \'EMK\' ?} ?} ?}'
      ?}
   ?}
?};
{? 'ZCNA'*_a
|| ZUS.win_efld(_red,,'RODZAJ',,,,,,'Rodzaj dokumentu'@,,'Rodzaj dokumentu: rejestracja czy wyrejestrowanie'@,
               'radio-buttons',,'Rejestracja'@,"1",'Wyrejestrowanie'@,"2")
?};
{? 'RUD'*_a
|| VAR_DEL.delete('RUD_ZAKR');
   RUD_ZAKR:=tab_tmp(,'DOD','DATE','Data zawarcia od','DDO','DATE','Data zawarcia do',
                     'DATA','DATE','Data wypełnienia zgłoszenia');
   RUD_ZAKR.DOD:=RUD_ZAKR.DDO:=RUD_ZAKR.DATA:=date();
   ZUS.win_efld(_red,RUD_ZAKR,'DOD',,,,,0,'Data zawarcia od'@,,'Data zawarcia umowy od'@);
   ZUS.efld_opt(_red,'mark=1',RUD_ZAKR,'DOD');
   ZUS.win_efld(_red,RUD_ZAKR,'DDO',,,,,0,'Data zawarcia do'@,,'Data zawarcia umowy do'@);
   ZUS.efld_opt(_red,'mark=1',RUD_ZAKR,'DDO');
   ZUS.win_efld(_red,RUD_ZAKR,'DATA',,,,,0,'Data wypełnienia zgłoszenia'@,,'Data przygotowania raportu'@);
   ZUS.efld_opt(_red,'mark=1',RUD_ZAKR,'DATA');
   ZUS.win_efld(_red,,'RODZAJ',,,,,,'Cel wysłania dokumentu'@,,'Cel wysłania dokumentu: zgłoszenie czy korekta'@,
               'radio-buttons',,'Zgłoszenie'@,"1",'Korekta'@,"2");
   ZUS.win_efld(_red,,'ZUA',,,,,0,'Raporty ZUS'@,,'Czy uwzględniać wygenerowane raporty'@,
               'check-box','check_label=%1'['Uwzględnienie wygenerowanych raportów'@],"1","0");
   __chk+='); ({? _chk=\'\' || _chk:=__CHK.record(RUD_ZAKR,,\'DOD\',\'DDO\',\'DATA\') ?}';
   __chk+='); ({? _chk=\'\' & RUD_ZAKR.DOD<date(2021,1,1) || _chk:=__CHK.err_fld(RUD_ZAKR,\'DOD\',1,'
           '\'Wprowadzono błędną datę.\'@) '
           '|? _chk=\'\' & RUD_ZAKR.DOD>RUD_ZAKR.DDO || _chk:=__CHK.err_fld(RUD_ZAKR,\'DDO\',1,'
           '\'Data nie może być wcześniejsza niż: \"Data zawarcia od\".\'@) ?}'
?};
ZUS.win_efld(_red,,'GIODO',,,,,0,'Dane osobowe'@,,'Czy rejestrować przekazanie danych osobowych?'@,
            'check-box','check_label=%1'['Przekazanie danych osobowych zostanie odnotowane'@],"'T'","'N'");
__chk+='); _chk';
{? _c
|| exec('zakoncz','#window',ZUS,_red,1,"wybor:=2; 'key:F2'",,,exec('text_red_zakoncz','#window','PKD_M'));
   exec('ok_esc','#window',ZUS,_red,1,"wybor:=1; 'key:F2'","wybor:=0; 'key:Esc'",,,,exec('text_red_ok','#window'))
|| exec('ok_esc','#window',ZUS,_red,,"wybor:=1; 'key:F2'","wybor:=0; 'key:Esc'",,,,
      exec('text_red_zakoncz','#window','PKD_M')
   )
?};
ZUS.win_edit(_red);
ZUS.hdr_edit(': '+'raport'+' ZUS '+_a);
{? ZUS.edit("($(__chk))()") & ~wybor || wybor:=1 ?};
_name:=
   {? _inTerm
   || ZUS.FOLDER:=_d;
      _d+(ZUS.PLIK+'.xml')
   || exec('nazwa_pliku','rap_zus')
   ?};
:: obsługa czyszczenia wielu plików
{? ~_inTerm
|| {? 'RUD'*_a
   || {? wybor>0 & wybor<>8
      || _dir:=fdir('@'+ZUS.FOLDER,0,0);
         {? _dir.size()
         || _files:=sql('select NAME from :_a where NAME like \':_b\'',_dir,ZUS.PLIK+'%.xml');
            {? _files.first()
            || {? FUN.ask('W katalogu \"%1\" istnieją już raporty o podanej nazwie.'@[ZUS.FOLDER]+'\n'+'Czy nadpisać?'@)
               || {!
                  |? _filepth:=_name-(+(ZUS.PLIK+'.xml'));
                     _file:=_filepth+_files.NAME;
                     {? _htest:=fopen(_file,'r')
                     || fclose(_htest);
                        ferase(_file)
                     ?};
                     _files.next()
                  !}
               || wybor:=0
               ?}
            ?}
         ?}
      ?}
   || {? wybor>0 & wybor<>8 & (_out:=fopen('@'+_name,'r'))
      || {? ~FUN.ask('W podanej lokalizacji plik \"%1\" już istnieje.'@[ZUS.PLIK+'.xml']+'\n'+'Czy nadpisać?'@)
         || wybor:=0
         ?};
         fclose(_out)
      ?}
   ?}
?};
&__chk;
&wybor


\zus_win_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Tworzy okno wyboru współpracownika do rapotu ZUS
::   WE: _a - Symbol raportu
::       _b - Forma zatrudnienia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? 'ZUA'*_a | 'ZZA'*_a
|| zus.wer:=zus.tab.mk_sel('Lista współpracowników do ubezpieczenia'@,,0,'pracdoubezp',,,25,,'U',,,,,'html_maximized');
   zus.tab.win_fld(zus.wer,,'T',,,-MS.fld_len(P,'T'),,1,,,MS.comment(P,'T'));
   zus.tab.fld_fml('T','DISPLAY_FORMAT',exec('alignment_right_cnd','#field'));
   zus.tab.win_fld(zus.wer,,'NAZWISKO',,,30,,1,'Nazwisko'@,,'Aktualne nazwisko'@);
   zus.tab.win_fld(zus.wer,,'PIERWSZE',,,20,,1,'Imię'@,,'Pierwsze imię'@);
   zus.tab.win_fld(zus.wer,,'WYDZIAL',,,16,,1,'Jednostka organizacyjna'@);
   zus.tab.win_fld(zus.wer,,'CP',,,9,,1,'Charakter pracy'@,,'Opis charakteru pracy'@);
   {? 'ZUA'*_a & _b='P'
   || zus.tab.win_fld(zus.wer,,'DZA',,,10,,1,'Data zatrudnienia'@,,'Data zatrudnienia'@);
      zus.tab.win_fld(zus.wer,,'EMD',,,10,,1,'Data rejestracji'@,,'Zarejestrowanie od dnia'@);
      zus.tab.win_fld(zus.wer,,'ODDBZ',,,-4,,1,'Oddelegowany bez ZUS'@,,
         'Czy współpracownik oddelegowany do pracy za granicą bez obliczania składek ZUS (T-tak / N-nie)'@,2,,
         "'T'","'N'","''"
      )
   ?};
   zus.tab.win_fld(zus.wer,,'ZA',,,,,1,'Aktywny'@,,
      'Czy współpracownik aktywny (T-tak / N-nie)'@,2,,"'T'","'N'","''"
   );
   zus.tab.win_fld(zus.wer,,'ZN',,,,,1,'Zaznaczony'@,,
      'Czy współpracownik zaznaczony do zgłoszenia (T-tak / N-nie)'@,2,,"'T'","'N'",""
   );
   zus.tab.win_act(zus.wer,0,'Formuła','Wybierz'@@,,'Wybiera wskazanego współpracownika'@,"zus.wyb()",,1,1,,,'W');
   zus.tab.win_act(zus.wer,0,'Formuła','Wybierz ws&zystkich'@@,,'Wybiera wszystkich współpracowników'@,
      "zus.wybw()",,,,,,'Z'
   );
   {? 'ZUA'*_a & _b='P'
   || zus.tab.win_act(zus.wer,0,'Formuła','Oddelegowania'@@,,
         'Oddelegowania do pracy za granicą'@,
         "_pRef:=null();
          P.cntx_psh;
          {? P.seek(zus.tab.PREF,,1)
          || _pRef:=P.ref()
          ?};
          P.cntx_pop();
          {? _pRef<>null()
          || exec('h_odde_b_zus','oddelegowanie',_pRef,1,0)
          ?};
          ~~
         ",,0,,,,'B');
      zus.tab.win_btn(zus.wer,'text=%1,align=begin'['Oddelegowania'@],'menu:O')
   ?};
   zus.tab.win_act(zus.wer,0,'Formuła','Po&miń'@@,,'Pomija wskazanego współpracownika'@,"zus.pomin()",,,1,,,'M');
   zus.tab.win_act(zus.wer,0,'Formuła','Pomiń wsz&ystkich'@@,,'Pomija wszystkich współpracowników'@,
      "  zus.tab.cntx_psh();
         zus.tab.first();
         {!
         |? zus.pomin();
            zus.tab.next()
         !};
         zus.tab.cntx_pop()
      ",,,,,,'Y'
   );
   zus.tab.win_act(zus.wer,0,'Formuła','Dalej'@@,,,"sel_exit()",,,,,,'D',,'target=window');
   zus.tab.win_act(zus.wer,0,'Formuła','Historia'@@,,'Wyświetla listę wygenerowanych raportów'@,"zus.hist()",,,,,,'H');
   zus.tab.win_act(zus.wer,0,
      'Formuła','Legenda'@@,,'Wyświetlenie okna legendy'@,
      "exec('legenda','color','ZUS_ZUA#01')",,,,,,'L',,'target=window'
   );
   zus.tab.win_act(zus.wer,0,'Szukaj');
   zus.tab.win_act(zus.wer,0,'Kolejność');
   zus.tab.win_act(zus.wer,0,'Rekord',,,,"zus.rekord()");
   zus.tab.win_btn(zus.wer,'text=%1,align=begin'['Po&miń'@],'menu:M');
   zus.tab.win_btn(zus.wer,'text=%1,panel=bottom,align=begin'['Wybierz ws&zystkich'@],'menu:Z');
   zus.tab.win_btn(zus.wer,'text=%1,panel=bottom,align=begin'['Pomiń wsz&ystkich'@],'menu:Y');
   zus.tab.win_btn(zus.wer,'text=%1,panel=bottom,align=end'['Dalej'@],'menu:D');
   zus.tab.win_btn(zus.wer,'text=%1,panel=bottom,align=end'['Anuluj'@],'key:Esc');
   zus.tab.win_sel(zus.wer);
   zus.wyb:=
      "  {? zus.tab.ZUA
         || zus.tab.ZN:='T'
         || {? FUN.ask('%1\n%2'
                  [  'Pracownik %1 %2 jest już ubezpieczony.'@[zus.tab.NAZWISKO,zus.tab.PIERWSZE],
                 'Czy kontynuować?'@
                  ]
               )
            || zus.tab.ZN:='T'
            ?}
         ?};
          zus.tab.put()
      ";
   zus.wybw:=
      "  zus.tab.cntx_psh();
         {? zus.tab.first()
         || {? ZUS.ZUA
               &
               FUN.ask('%1\n%2'
                  [  'Wśród wybranych pracowników mogą znajdować się pracownicy ubezpieczeni.'@,
                     'Czy pomijać pracowników ubezpieczonych?'@
                  ]
               )
            || {!
               |? {? zus.tab.ZUA
                  || zus.tab.ZN:='T';
                     zus.tab.put()
                  ?};
                  zus.tab.next()
               !}
            || {!
               |? zus.tab.ZN:='T';
                  zus.tab.put();
                  zus.tab.next()
               !}
            ?}
         || {!
            |? zus.tab.ZN:='T';
               zus.tab.put();
               zus.tab.next()
            !}
         ?};
         zus.tab.cntx_pop()
      ";

   zus.rekord:=
      "  _gray:='';
         {? ~zus.tab.sel_size()
         || _gray+={? zus.tab.ZN='N' || 'M' || 'W' ?}
         ?};
         _size:=zus.tab.size();
         zus.tab.cntx_psh();
         zus.tab.index(zus.ndx);
         zus.tab.prefix('T');
         {? ~zus.tab.size() || _gray+='D' ?};
         {? zus.tab.size()=_size || _gray+='Z' ?};
         zus.tab.prefix('N');
         {? zus.tab.size()=_size || _gray+='Y' ?};
         zus.tab.cntx_pop();
         zus.tab.actions_grayed(zus.tab.win_sel('?'),_gray);
         {? zus.tab.ODDBZ='T'
         || Color.fnd_kol('ZUS_ZUA#01#05')
         |? zus.tab.ZN='T'
         || Color.fnd_kol('ZUS_ZUA#01#01')
         |? zus.tab.ZUA & zus.tab.ZA='N'
         || Color.fnd_kol('ZUS_ZUA#01#04')
         |? ~zus.tab.ZUA
         || Color.fnd_kol('ZUS_ZUA#01#03')
         || Color.fnd_kol('ZUS_ZUA#01#02')
         ?}
      ";

:: okno redakcyjne do wyszukiwania
   zus.red:=zus.tab.mk_edit('Lista współpracowników do ubezpieczenia'@,0,'pracdoubezp',,,'html_maximized');
   zus.tab.win_esep(zus.red,'Dane podstawowe'@);
   zus.tab.win_efld(zus.red,,'T',,,9,,1,'Nr teczki'@,,'Numer w aktach'@);
   zus.tab.fld_fml('T','DISPLAY_FORMAT',exec('alignment_right_cnd','#field'));
   zus.tab.win_efld(zus.red,,'NAZWISKO',,,30,,1,'Nazwisko'@,,'Aktualne nazwisko'@);
   zus.tab.win_efld(zus.red,,'PIERWSZE',,,20,,1,'Imię'@,,'Pierwsze imię'@);
   zus.tab.win_esep(zus.red,'Aktualny angaż'@);
   zus.tab.win_efld(zus.red,,'WYDZIAL',,,16,,1,'Jednostka organizacyjna'@);
   zus.tab.win_efld(zus.red,,'CP',,,9,,1,'Charakter pracy'@,,'Opis charakteru pracy'@);
   zus.tab.win_esep(zus.red,'Status współpracownika'@);
   zus.tab.win_efld(zus.red,,'ZA',,,,,1,'',1,'Czy zleceniobiorca (współpracownik) aktywny (T-tak / N-nie)'@,
      'radio-buttons',,'Aktywny'@,"'T'",'Nieaktywny'@,"'N'",'Wszystkie'@,"''"
   );
   exec('ok_esc','#window',zus.tab,zus.red,,,,,,,exec('text_red_szukaj','#window'));
   zus.tab.win_patt(zus.red)

|? 'ZWUA'*_a
|| zus.ndx:=zus.tab.ndx_tmp(,1,'ZN',,);

:: Okno wertowania.
   zus.wer:=zus.tab.mk_sel('Lista współpracowników do wyrejestrowania z ubezpieczenia na dzień: %1'@[ZUS.DATA$1],,
      0,'praczubezp',,,25,,'U',,,,,'html_maximized'
   );
   zus.tab.win_fld(zus.wer,,'T',,,-MS.fld_len(P,'T'),,1,,,MS.comment(P,'T'));
   zus.tab.fld_fml('T','DISPLAY_FORMAT',exec('alignment_right_cnd','#field'));
   zus.tab.win_fld(zus.wer,,'NAZWISKO',,,30,,1,'Nazwisko'@,,'Aktualne nazwisko'@);
   zus.tab.win_fld(zus.wer,,'PIERWSZE',,,20,,1,'Imię'@,,'Pierwsze imię'@);
   zus.tab.win_fld(zus.wer,,'WYDZIAL',,,16,,1,'Jednostka organizacyjna'@,,'Jednostka organizacyjna'@);
   zus.tab.win_fld(zus.wer,,'CP',,,9,,1,'Charakter pracy'@,,'Charakter pracy'@);
   {? _b='P'
   || zus.tab.win_fld(zus.wer,,'TTUB',,,6,,1,'Tytuł ubezpieczenia'@,,'Kod tytułu ubezpieczenia'@);
      zus.tab.win_fld(zus.wer,,'EMD',,,10,,1,'Data wyrejestrowania'@,,'Wyrejestrowanie od dnia'@);
      zus.tab.win_fld(zus.wer,,'EMK',,,-6,,1,'Przyczyna wyrejestrowania'@,,'Kod przyczyny wyrejestrowania'@);
      zus.tab.win_fld(zus.wer,,'ODDBZ',,,-4,,1,'Oddelegowany bez ZUS'@,,
         'Czy współpracownik oddelegowany do pracy za granicą bez obliczania składek ZUS (T-tak / N-nie)'@,2,,
         "'T'","'N'","''"
      );

      zus.tab.win_act(zus.wer,0,'Formuła','Popraw'@@,,,"zus.popraw()",,0,,,,'P');
      zus.tab.win_btn(zus.wer,'text=%1,align=begin'['Popraw'@],'menu:P');
      zus.tab.win_act(zus.wer,0,'Formuła','Dalej'@@,,'Generowanie raportu'@,
         "  _ok:=1;
            zus.tab.cntx_psh();
            zus.tab.index(zus.ndx);
            zus.tab.prefix('T');
            {? zus.tab.first()
            || {!
               |? {? ~(+zus.tab.EMK & zus.tab.EMD<>#0 & +|zus.tab.TTUB)
                  || FUN.emsg('Proszę uzupełnić brakujące informacje - %1 %2 (%3)'@
                              [zus.tab.NAZWISKO,zus.tab.PIERWSZE,zus.tab.T]);
                     _ok:=0
                  ?};
                  _ok & zus.tab.next()
               !}
            ?};
            zus.tab.cntx_pop();
            {? _ok
            || sel_exit()
            ?}
         ",,,1,,,'D',,'target=window'
      );
      zus.tab.win_act(zus.wer,0,'Formuła','Oddelegowania'@@,,
         'Oddelegowania do pracy za granicą'@,
         "_pRef:=null();
          P.cntx_psh;
          {? P.seek(zus.tab.PREF,,1)
          || _pRef:=P.ref()
          ?};
          P.cntx_pop();
          {? _pRef<>null()
          || exec('h_odde_b_zus','oddelegowanie',_pRef,1,0)
          ?};
          ~~
         ",,0,,,,'B');
      zus.tab.win_btn(zus.wer,'text=%1,align=begin'['Oddelegowania'@],'menu:O')
   || zus.tab.win_act(zus.wer,0,'Formuła','Dalej'@@,,'Wyświetlenie okna z raportami'@,"sel_exit()",
         ,,1,,,'D',,'target=window'
      )
   ?};
   zus.tab.win_fld(zus.wer,,'ZA',,,-4,,1,'Aktywny'@,,
      'Czy współpracownik aktywny (T-tak / N-nie)'@,2,,"'T'","'N'","''"
   );
   zus.tab.win_fld(zus.wer,,'ZN',,,3,,1,'Zaznaczony'@,,
      'Czy współpracownik zaznaczony do zgłoszenia (T-tak / N-nie)'@,2,,"'T'","'N'",""
   );
   zus.tab.win_act(zus.wer,0,'Formuła','Wybierz'@@,,'Wybiera wskazanego współpracownika'@, "zus.wyb()",,1,1,,,'W');
   zus.tab.win_act(zus.wer,0,'Formuła','Wybierz ws&zystkich'@@,,'Wybiera wszystkich współpracowników'@,
      "zus.wybw()",,,,,,'Z'
   );
   zus.tab.win_act(zus.wer,0,'Formuła','Po&miń'@@,,'Pomija wskazanego współpracownika'@,"zus.pomin()",,0,1,,,'M');
   zus.tab.win_act(zus.wer,0,'Formuła','Pomiń wsz&ystkich'@@,,'Pomija wszystkich współpracowników'@,
      "  zus.tab.cntx_psh();
         zus.tab.first();
         {!
         |? zus.pomin();
            zus.tab.next()
         !};
         zus.tab.cntx_pop()
      ",,,,,,'Y'
   );
   zus.tab.win_act(zus.wer,0,'Formuła','Historia'@@,,'Wyświetla listę wygenerowanych raportów'@,"zus.hist()",,,,,,'H');
   zus.tab.win_act(zus.wer,0,'Formuła','Legenda'@@,,'Wyświetlenie okna legendy'@,
      {? _b='P'
      || "exec('legenda','color','ZUS_ZWUA#01#0')"
      || "exec('legenda','color','ZUS_ZWUA#01#1')"
      ?},,,,,,'L',,'target=window'
   );
   zus.tab.win_act(zus.wer,0,'Szukaj');
   zus.tab.win_act(zus.wer,0,'Kolejność');
   zus.tab.win_act(zus.wer,0,'Rekord',,,,
      {? _b='P'
      || "zus.rekord('P')"
      || "zus.rekord('Z')"
      ?}
   );
   zus.tab.win_btn(zus.wer,'text=%1,align=begin'['Po&miń'@],'menu:M');
   zus.tab.win_btn(zus.wer,'text=%1,panel=bottom,align=begin'['Wybierz ws&zystkich'@],'menu:Z');
   zus.tab.win_btn(zus.wer,'text=%1,panel=bottom,align=begin'['Pomiń wsz&ystkich'@],'menu:Y');
   zus.tab.win_btn(zus.wer,'text=%1,panel=bottom,align=end'['Dalej'@],'menu:D');
   zus.tab.win_btn(zus.wer,'text=%1,panel=bottom,align=end'['Anuluj'@],'key:Esc');
   zus.tab.win_sel(zus.wer);

:: Okno edycyjne.
   _red:=zus.tab.mk_edit('ZUS ZWUA',,'redaguj_zustab',,,'html_maximized');
   zus.tab.win_esep(_red,'Parametry raportu'@);
   zus.tab.win_efld(_red,,'NAZWISKO',,,25,,1,'Nazwisko'@,,'Aktualne nazwisko'@);
   zus.tab.win_efld(_red,,'PIERWSZE',,,25,,1,'Imię'@,,'Pierwsze imię'@);
   zus.tab.win_efld(_red,,'TTUB',,,13,,,'Tytuł ubezpieczenia'@,,'Kod tytułu ubezpieczenia'@);
   zus.tab.efld_opt(_red,'mark=1',,'TTUB');
   zus.tab.win_efld(_red,,'EMD',,,10,,,'Data wyrejestrowania'@,,'Wyrejestrowanie od dnia'@);
   zus.tab.efld_opt(_red,'mark=1',,'EMD');
   zus.tab.win_efld(_red,,'EMK',,,10,,,'Przyczyna wyrejestrowania'@,,'Kod przyczyny wyrejestrowania'@,,
      'F3_button=1'
   );
   zus.tab.efld_opt(_red,'mark=1',,'EMK');
   zus.tab.win_esep(_red,'Informacje o rozwiązaniu umowy'@);
   zus.tab.win_efld(_red,,'DO',,,,,,'Data'@,,'Data rozwiązania stosunku pracy'@);
   zus.tab.efld_opt(_red,'editable=grayed',,'DO');
   zus.tab.win_efld(_red,,'USPKOD',,,,,,'Przyczyna'@,,'Kod rozwiązania/wygaśnięcia stosunku pracy'@);
   zus.tab.efld_opt(_red,'editable=grayed',,'USPKOD');
   zus.tab.win_efld(_red,,'USPPPRAK',,,,,,'Podstawa prawna'@,,
      'Kod podstawy prawnej ustania stosunku pracy/służbowego'@
   );
   zus.tab.efld_opt(_red,'editable=grayed',,'USPPPRAK');
   zus.tab.win_efld(_red,,'USPPPRAT',,,,,,'Podstawa prawna-opis'@,,
      'Podstawa prawna ustania stosunku pracy/służbowego'@
   );
   zus.tab.efld_opt(_red,'editable=grayed',,'USPPPRAT');
   zus.tab.win_efld(_red,,'USPSTR',,,,,,'Strona inicjująca'@,,'Strona inicjująca rozwiązanie stosunku pracy'@);
   zus.tab.efld_opt(_red,'editable=grayed',,'USPSTR');
   _zuswer:=S_ZUS.mk_sel('Kody w dokumentach ubezpieczeniowych'@,,0,'kodywdokzus',,15,,,'U');
   S_ZUS.win_fld(_zuswer,,'KOD',,,8,,1,'Kod'@);
   S_ZUS.win_fld(_zuswer,,'OPIS',,,60,,1,'Opis'@);
   S_ZUS.win_act(_zuswer,0,'Formuła','Wybierz'@@,,,"sel_exit()",,1,0);
   S_ZUS.win_sel(_zuswer);
   zus.tab.fld_fml('EMK','F3',
      " S_ZUS.cntx_psh();
         S_ZUS.index('S_ZUS');
         S_ZUS.prefix(\'Z\');
         {? S_ZUS.select() || zus.tab.EMK:=S_ZUS.KOD ?};
         S_ZUS.win_sel('WER');
         S_ZUS.cntx_pop()
      "
   );
   zus.tab.fld_fml('EMK','AFTER_EDIT',
      " S_ZUS.cntx_psh();
         S_ZUS.index('S_ZUS');
         S_ZUS.prefix(\'Z\',fld());
         {? ~S_ZUS.first()
         || FUN.emsg(\'Brak kodu w słowniku\'@);
            zus.tab.EMK:=\'\'
         || {? zus.tab.EMK<>\'\' & zus.tab.EMK<>\'100\' & zus.tab.EMK<>\'500\'
            || zus.tab.DO:=date(0,0,0);
               zus.tab.USPKOD:=zus.tab.USPPPRAK:=zus.tab.USPPPRAT:=zus.tab.USPSTR:=''
            ?}
         ?};
         S_ZUS.cntx_pop()
      "
   );
   zus.tab.win_ebtn(_red,'text=%1,panel=bottom,align=end'[exec('text_red_ok','#window')],'key:F2');
   zus.tab.win_ebtn(_red,'text=%1,panel=bottom,align=end'['Anuluj'@],'key:Esc');
   zus.tab.win_edit(_red);

:: Definicja funkcji do okna wertowania.
   zus.wyb:=
      "  {? zus.tab.ZN='N'
         || _msg:=
               {? zus.tab.ZA='T'
               || '%1\n%2'
                     [  'Pracownik %1 %2 jest zatrudniony.'@[zus.tab.NAZWISKO,zus.tab.PIERWSZE],
                        'Czy kontynuować?'@
                     ]
               |? ~zus.tab.ZUA
               || '%1\n%2'
                     [  'Pracownik %1 %2 był już wyrejestrowany z ubezpieczenia.'@
                        [  zus.tab.NAZWISKO,zus.tab.PIERWSZE
                        ],'Czy kontynuować?'@
                     ]
               || ''
               ?};
            {? _msg='' | {? +_msg || FUN.ask(_msg) ?}
            || zus.tab.ZN:='T';
               zus.tab.put()
            ?}
         ?}
      ";

   zus.wybw:=
      "  zus.tab.cntx_psh();
         {? zus.tab.first()
         || {? ZUS.ZUA
               &
               FUN.ask('%1\n%2'
                  [  'Wśród wybranych współpracowników mogą znajdować się wyrejestrowani z ubezpieczenia.'@,
                     'Czy pomijać współpracowników wyrejestrowanych?'@
                  ]
               )
            || {!
               |? {? ~exec('chk_rozwiazanie_umowy','rap_zus')
                  || zus.tab.ZN:={? zus.tab.ZUA || 'T' || 'N' ?};
                     zus.tab.put()
                  ?};
                  zus.tab.next()
               !}
            || {!
               |? {? ~exec('chk_rozwiazanie_umowy','rap_zus')
                  || zus.tab.ZN:='T';
                     zus.tab.put()
                  ?};
                  zus.tab.next()
               !}
            ?}
         || {!
            |? zus.tab.ZN:='T';
               zus.tab.put();
               zus.tab.next()
            !}
         ?};
         zus.tab.cntx_pop()
      ";

   zus.popraw:=
      "  {? zus.tab.edit(\"__CHK.record(zus.tab,,'TTUB','EMD','EMK')\")
         || zus.tab.put()
         ?}
      ";
   zus.rekord:=
      "  _gray:='';
         {? zus.tab.ZN='N' || _gray+='MP' || _gray+='W' ?};
         {? zus.tab.sel_size() || _gray:='PDB' ?};
         _size:=zus.tab.size();
         zus.tab.cntx_psh();
         zus.tab.index(zus.ndx);
         zus.tab.prefix('T');
         {? ~zus.tab.size() || _gray+='D' ?};
         {? zus.tab.size()=_size || _gray+='Z' ?};
         zus.tab.prefix('N');
         {? zus.tab.size()=_size || _gray+='Y' ?};
         zus.tab.cntx_pop();
         zus.tab.actions_grayed(zus.tab.win_sel('?'),_gray);
         {? _a='P'
         || {? zus.tab.ZN='T'
            || Color.fnd_kol('ZUS_ZWUA#01#01')
            |? zus.tab.ZA='T'
            || Color.fnd_kol('ZUS_ZWUA#01#02')
            |? zus.tab.ZUA
            || Color.fnd_kol('ZUS_ZWUA#01#03')
            || Color.fnd_kol('ZUS_ZWUA#01#04')
            ?}
         || {? zus.tab.ZN='T'
            || Color.fnd_kol('ZUS_ZWUA#01#11')
            || Color.fnd_kol('ZUS_ZWUA#01#12')
            ?}
         ?}
      "
|? 'RUD'*_a
|| zus.wer:=zus.tab.mk_sel('Umowy o dzieło do zgłoszenia w ZUS'@,,0,'rap_rud1',,,25,,'U',,,,,'html_maximized');
   zus.tab.win_fld(zus.wer,,'T',,,-MS.fld_len(P,'T'),,1,'Numer teczki'@,,MS.comment(P,'T'));
   zus.tab.fld_fml('T','DISPLAY_FORMAT',exec('alignment_right_cnd','#field'));
   zus.tab.win_fld(zus.wer,,'NAZWISKO',,,-20,,1,'Nazwisko'@,,'Aktualne nazwisko'@);
   zus.tab.win_fld(zus.wer,,'PIERWSZE',,,-15,,1,'Imię'@,,'Pierwsze imię'@);
   zus.tab.win_fld(zus.wer,,'PESEL',,,11,,1,'PESEL'@,,'Numer PESEL'@);
   zus.tab.win_fld(zus.wer,,'NU',,,-12,,1,'Numer umowy'@,,'Numer umowy o dzieło'@);
   zus.tab.fld_fml('NU','DISPLAY_FORMAT',exec('alignment_right_cnd','#field'));
   zus.tab.win_fld(zus.wer,,'DZA',,,-13,,1,'Data zawarcia'@,,'Data zawarcia umowy'@);
   zus.tab.win_fld(zus.wer,,'DOD',,,-13,,1,'Data rozpoczęcia'@,,'Data rozpoczęcia umowy'@);
   zus.tab.win_fld(zus.wer,,'DDO',,,-13,,1,'Data zakończenia'@,,'Data zakończenia umowy'@);
   zus.tab.win_fld(zus.wer,,'TTUB',,,-15,,1,'Tytuł ubezpieczenia'@,,'Tytuł ubezpieczenia'@);
   zus.tab.win_fld(zus.wer,,'ZUS',,,-3,,,'Emerytalne i Rentowe'@,,'Składka na ubezpieczenia emerytalne i rentowe'@,
                   2,,"'T'","'N'");
   zus.tab.win_fld(zus.wer,,'FC',,,-3,,,'Chorobowe'@,,'Składka na ubezpieczenie chorobowe'@,2,,"'T'","'N'");
   zus.tab.win_fld(zus.wer,,'FW',,,-3,,,'Wypadkowe'@,,'Składka na ubezpieczenie wypadkowe'@,2,,"'T'","'N'");
   zus.tab.win_fld(zus.wer,,'KC',,,-3,,,'Zdrowotne'@,,'Składka na ubezpieczenie zdrowotne'@,2,,"'T'","'N'");
   zus.tab.win_fld(zus.wer,,'FP',,,-3,,,'Fundusz Pracy'@,,'Składka na Fundusz Pracy'@,2,,"'T'","'N'");
   zus.tab.win_fld(zus.wer,,'ZN',,,,,1,'Zaznaczony?'@,,
      'Czy współpracownik zaznaczony do zgłoszenia (T-tak / N-nie)'@,2,,"'T'","'N'",""
   );
   zus.tab.win_act(zus.wer,0,'Formuła','Wybierz'@@,,'Wybiera wskazanego współpracownika'@,"zus.wyb()",,1,1,,,'W');
   zus.tab.win_act(zus.wer,0,'Formuła','Wybierz ws&zystkich'@@,,'Wybiera wszystkich współpracowników'@,
      "zus.wybw()",,,,,,'Z',,'target=window'
   );
   zus.tab.win_act(zus.wer,0,'Formuła','Po&miń'@@,,'Pomija wskazanego współpracownika'@,"zus.pomin()",,,1,,,'M');
   zus.tab.win_act(zus.wer,0,'Formuła','Pomiń wsz&ystkich'@@,,'Pomija wszystkich współpracowników'@,
      "  zus.tab.cntx_psh();
         zus.tab.first();
         {!
         |? zus.pomin();
            zus.tab.next()
         !};
         zus.tab.cntx_pop()
      ",,,,,,'Y',,'target=window'
   );
   zus.tab.win_act(zus.wer,0,'Formuła','Dalej'@@,,,"sel_exit()",,,,,,'D',,'target=window');
   zus.tab.win_act(zus.wer,0,'Formuła','Treść umowy'@,,,
      "ZC.prefix(); {? ZC.seek(zus.tab.ZCREF,) || ZC.memo_get(,'TRESC'); ZC.memo_view(,'TRESC') ?}",,);
   zus.tab.win_act(zus.wer,0,'Formuła','Historia'@@,,'Wyświetla listę wygenerowanych raportów'@,"zus.hist()",,,,,,'H');
   zus.tab.win_act(zus.wer,0,
      'Formuła','Legenda'@@,,'Wyświetlenie okna legendy'@,
      "exec('legenda','color','ZUS_RUD#01')",,,,,,'L',,'target=window'
   );
   zus.tab.win_act(zus.wer,0,'Szukaj');
   zus.tab.win_act(zus.wer,0,'Kolejność');
   zus.tab.win_act(zus.wer,0,'Rekord',,,,"zus.rekord()");
   zus.tab.win_btn(zus.wer,'text=%1,align=begin'['Po&miń'@],'menu:M');
   zus.tab.win_btn(zus.wer,'text=%1,panel=bottom,align=begin'['Wybierz ws&zystkich'@],'menu:Z');
   zus.tab.win_btn(zus.wer,'text=%1,panel=bottom,align=begin'['Pomiń wsz&ystkich'@],'menu:Y');
   zus.tab.win_btn(zus.wer,'text=%1,icon=xwin16.png:22,panel=bottom,align=end'['Dalej'@],'menu:D');
   zus.tab.win_btn(zus.wer,'text=%1,icon=xwin16.png:14,panel=bottom,align=end'['Anuluj'@],'key:Esc');
   zus.tab.win_sel(zus.wer);
   zus.wyb:=
      "  zus.tab.ZN:='T';
         zus.tab.put()
      ";
   zus.wybw:=
      "  zus.tab.cntx_psh();
         {? zus.tab.first()
         || {!
            |? zus.tab.ZN:='T';
               zus.tab.put();
               zus.tab.next()
            !}
         || {!
            |? zus.tab.ZN:='T';
               zus.tab.put();
               zus.tab.next()
            !}
         ?};
         zus.tab.cntx_pop()
      ";

   zus.rekord:=
      "  _gray:='';
         {? ~zus.tab.sel_size()
         || _gray+={? zus.tab.ZN='N' || 'M' || 'W' ?}
         ?};
         _size:=zus.tab.size();
         zus.tab.cntx_psh();
         zus.tab.index(zus.ndx);
         zus.tab.prefix('T');
         {? ~zus.tab.size() || _gray+='D' ?};
         {? zus.tab.size()=_size || _gray+='Z' ?};
         zus.tab.prefix('N');
         {? zus.tab.size()=_size || _gray+='Y' ?};
         zus.tab.cntx_pop();
         zus.tab.actions_grayed(zus.tab.win_sel('?'),_gray);
         {? zus.tab.ZN='T'
         || Color.fnd_kol('ZUS_RUD#01#01')
         |? zus.tab.ZUA & zus.tab.ZA='N'
         || Color.fnd_kol('ZUS_RUD#01#04')
         |? ~zus.tab.ZUA
         || Color.fnd_kol('ZUS_RUD#01#03')
         || Color.fnd_kol('ZUS_RUD#01#02')
         ?}
      ";

:: okno redakcyjne do wyszukiwania
   zus.red:=zus.tab.mk_edit('Umowa o dzieło do zgłoszenia w ZUS'@,0,'umodzdoubezp',,,'html_maximized');
   zus.tab.win_esep(zus.red,'Dane podstawowe'@);
   zus.tab.win_efld(zus.red,,'T',,,9,,1,'Nr teczki'@,,'Numer w aktach'@);
   zus.tab.fld_fml('T','DISPLAY_FORMAT',exec('alignment_right_cnd','#field'));
   zus.tab.win_efld(zus.red,,'NAZWISKO',,,30,,1,'Nazwisko'@,,'Aktualne nazwisko'@);
   zus.tab.win_efld(zus.red,,'PIERWSZE',,,20,,1,'Imię'@,,'Pierwsze imię'@);
   zus.tab.win_efld(zus.red,,'PESEL',,,11,,1,'PESEL'@,,'Numer PESEL'@);
   zus.tab.win_esep(zus.red,'Dane dodatkowe'@);
   zus.tab.win_efld(zus.red,,'NU',,,20,,1,'Numer umowy'@,,'Numer umowy o dzieło'@);
   zus.tab.win_efld(zus.red,,'DZA',,,10,,1,'Data zawarcia'@,,'Data zawarcia umowy'@);
   zus.tab.win_efld(zus.red,,'DOD',,,10,,1,'Data rozpoczęcia'@,,'Data rozpoczęcia umowy'@);
   zus.tab.win_efld(zus.red,,'DDO',,,10,,1,'Data zakończenia'@,,'Data zakończenia umowy'@);
   zus.tab.win_efld(zus.red,,'TTUB',,,6,,1,'Tytuł ubezpieczenia'@,,'Tytuł ubezpieczenia'@);
   exec('ok_esc','#window',zus.tab,zus.red,,,,,,exec('text_red_szukaj','#window'));
   zus.tab.win_patt(zus.red)
?};
zus.pomin:=
   "  zus.tab.ZN:='N';
      zus.tab.put()
   ";
zus.hist:=
   "  {? P.seek(zus.tab.PREF,,1)
      || P.OSOBA();
         exec('show_win','rap_zus')
      ?}
   "


\chk_rozwiazanie_umowy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.22]
:: OPIS: Sprawdzenie czy brakuje informacji o rozwiązaniu/wygaśnięciu stosunku pracy na umowie o pracę.
::   WE:
::   WY: (0/1) 1 - brak wymaganych informacji.
::----------------------------------------------------------------------------------------------------------------------
|zus.tab.TTUB=''
|
{? 2+zus.tab.TTUB='01' & (zus.tab.EMK='100' | zus.tab.EMK='500')
|| zus.tab.DO=#0 | zus.tab.USPKOD='' | zus.tab.USPPPRAK='' | zus.tab.USPSTR=''
   |
   (zus.tab.USPPPRAK='550' &  zus.tab.USPPPRAT='')
|| 0
?}


\be_wysw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Formuła na wyświetl przed, ustawia odpowiednie okienko redagowania i wyświetla je
::   WE:
::   WY:
::  OLD: \be_wysw/rap_zua.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZUS_RAP.ZC
|| {? ZUS_RAP.RAPORT='ZUA'
   || ZUS_RAP.win_edit('ZC_ZUA')
   || ZUS_RAP.win_edit('ZC')
   ?}
|| {? ZUS_RAP.TTUB
   || ZUS_RAP.win_edit('P_INFO')
   || ZUS_RAP.win_edit('WZO')
   ?}
?};
ZUS_RAP.display()


\af_wysw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Formuła na wyświetl po, ustawia standardowe okienko redagowania
::   WE:
::   WY:
::  OLD: \af_wysw/rap_zua.fml
::----------------------------------------------------------------------------------------------------------------------
ZUS_RAP.win_edit('WZO')


\zus_zua_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Tworzy deklaracje ZUS ZUA - raport zgłoszenia do ubezpieczeń
::   WE: _a - null
::       _b - Forma zatrudnienia
::       _c - kod dziedziny produktowej
::       [_d] - lista współpracowników do przetwarzania
::       [_e] - początkowa data badanego okresu
::       [_f] - kontrola daty zgłoszenia do ZUS (T/N, N-domyślnie)
::   WY:
::  OLD: \generuj/rap_zua.fml
::----------------------------------------------------------------------------------------------------------------------
_filterList:={? var_pres('_d')=type_of(SYSLOG) || _d || ~~ ?};
_startDate:={? var_pres('_e')=type_of(date()) || _e || date(0,0,0) ?};
_dateControl:={? var_pres('_f')=type_of('') & 'TN'*_f || _f || 'N' ?};
_clear:="VAR_DEL.delete('ZUA')";
_clear();
P.cntx_psh();
P.prefix();
OSOBA.cntx_psh();
OSOBA.prefix();
ZUS_RAP.cntx_psh();
ZUS_RAP.prefix();
ZUA:=exec('tabela_zus_zua','rap_zus',_b);
{? _b='P'
|| _filter:={? type_of(_filterList) || _filterList || exec('dostepne_p','schemat',_c,_b,'*') ?};
   {? _filter.first()
   || {!
      |? {? P.seek(_filter.REF,,1) &
::          Kontrola daty zgłoszenia do ZUS w zależności od parametru _e, domyślnie 7 dni na zgłoszenie
            (_dateControl='N' | P.DZA<=ZUS.DATA & _startDate<=exec('dzienRob','kalendarz',P.DZA+#PAR_SKID.get(296),1,0))
         || zus.tab.T:=P.T;
            zus.tab.PREF:=#P.ref();
            zus.tab.NAZWISKO:=P.OSOBA().NAZWISKO;
            zus.tab.PIERWSZE:=OSOBA.PIERWSZE;
            zus.tab.WYDZIAL:=P.WYDZIAL().SYMBOL;
            zus.tab.CP:=P.CP().CP;
            zus.tab.ZA:=P.ZA;
            zus.tab.DZA:=P.DZA;
            _jest:=exec('repeat_zua','rap_zus',1,0,_b);
::          Sprawdzenie czy jest na oddelegowaniu bez zus w dacie raportu:
            _oddBz:=exec('czy_odd_bzus','oddelegowanie',P.ref(),ZUS.DATA);
            {? _oddBz.st
            || zus.tab.EMD:=_oddBz.od;
               zus.tab.ODDBZ:='T'
            || zus.tab.EMD:=zus.tab.DZA;
::             Czy ostatnim raportem jest ZWUA:
               _zwuaLast:=exec('zwua_last','rap_zus',P.OSOBA);
               {? _zwuaLast.st=1 | _zwuaLast.st=-1
::             Sprawdzenie czy wrócił z oddelegowania bez zus:
               || _oddBzPowr:=exec('czy_odd_bzus','oddelegowanie',P.ref(),
                     {? _zwuaLast.st=1 || _zwuaLast.dt || P.DZA ?});
::                   Jeśli był wysłany na oddelegowanie zaraz po zatrudnieniu to nie ma ZWUA, sprawdzamy na datę zatr.
                  {? _oddBzPowr.st
                  || zus.tab.EMD:=_oddBzPowr.do+1
                  ?};
                  obj_del(_oddBzPowr)
               ?};
               obj_del(_zwuaLast);
               zus.tab.ODDBZ:='N'
            ?};
            zus.tab.ZN:=
               {? zus.tab.ZA='T' & ~_oddBz.st
               || {? _jest<>1 || 'T' || 'N' ?}
               || 'N'
               ?};
            zus.tab.ZUA:=~_jest;
            {? (ZUS.ODDBZ | ~_oddBz.st) & (ZUS.ZUA | (~ZUS.ZUA & _jest<>1))
            || zus.tab.add()
            ?};
            obj_del(_oddBz)
         ?};
         _filter.next()
      !};
      zus.tab.fld_attr(,2);
::    Umożliwiamy przetworzenie raportu bez konieczności pokazywania i zatwierdzania okienka (wywołanie dla Genius)
      {? type_of(_filterList) | zus.tab.select()
      || PROGRESS.set(zus.tab.size(),'Trwa pobieranie danych do raportu ZUA.'@);
         {? zus.tab.first()
         || {!
            |? PROGRESS.next();
               {? zus.tab.ZN='T'
               || {? P.seek(zus.tab.PREF,,1) & exec('zn_ttub','pracownik',P.OSOBA,ZUS.DATA)
                  || exec('zus_zua_add','rap_zus',zus.tab.PREF,_b,zus.tab.EMD)
                  || FUN.emsg('Brak danych ubezpieczeniowych dla: %1 %2'@[P.OSOBA().NAZWISKO,P.OSOBA().PIERWSZE]+'\n'+
                        'Export danych dla tej osoby nie jest możliwy.'@
                     )
                  ?}
               ?};
               zus.tab.next()
            !}
         ?};
         PROGRESS.close()
      ?}
   || FUN.emsg('Brak uprawnień do przeglądania pracowników.'@)
   ?}
|? _b='Z'
|| ZC.cntx_psh();
   ZC.index('ZLECPRZ');
   ZC_INFO.cntx_psh();
   ZC_INFO.index('ZC');
   _filter:={? type_of(_filterList) || _filterList || exec('dostepne_p','schemat',_c,_b,'*') ?};
   {? _filter.first()
   || {!
      |? {? P.seek(_filter.REF,,1) &
::          Kontrola daty zgłoszenia do ZUS w zależności od parametru _e, domyślnie 7 dni na zgłoszenie
            (_dateControl='N' | P.DZA<=ZUS.DATA & _startDate<=exec('dzienRob','kalendarz',P.DZA+#PAR_SKID.get(296),1,0))
         || P.OSOBA();
            zus.tab.T:=P.T;
            zus.tab.PREF:=#P.ref();
            zus.tab.NAZWISKO:=OSOBA.NAZWISKO;
            zus.tab.PIERWSZE:=OSOBA.PIERWSZE;
            zus.tab.WYDZIAL:=P.WYDZIAL().SYMBOL;
            zus.tab.CP:=P.CP().CP;
            zus.tab.ZA:=P.ZA;
:: 1. wyszukujemy zleceniobiorców, dla których należy utworzyć raport
            _dalej:=0;
            ZC.prefix(P.ref());
            {? ZC.first()
            || {!
               |? ZC_INFO.prefix(ZC.ref());
                  {? ZC_INFO.first()
                  || {!
                     |? _chk:=exec('chk_ubez','rap_zus','ZUA',1);
                        _rep:=exec('repeat_zua','rap_zus',1,0,_b);
                        _dalej:=_chk & _rep;
                        ~_dalej & ZC_INFO.next()
                     !}
                  ?};
                  ~_dalej & ZC.next()
               !};
               {? ZUS.ZUA | (~ZUS.ZUA & _dalej)
               || zus.tab.ZN:={? _dalej || 'T' || 'N' ?};
                  zus.tab.ZUA:=_dalej;
                  zus.tab.add()
               ?}
            ?}
         ?};
         _filter.next()
      !};
      zus.tab.fld_attr(,2);
::    Umożliwiamy przetworzenie raportu bez konieczności pokazywania i zatwierdzania okienka (wywołanie dla Genius)
      {? type_of(_filterList) | zus.tab.select()
      || PROGRESS.set(zus.tab.size(),'Trwa pobieranie danych do raportu ZUA.'@);
         {? zus.tab.first()
         || {!
            |? PROGRESS.next();
:: 2. dla wybranych zleceniobiorców wyszukujemy umowy, które powinny znaleźć się w raporcie.
:: (jeżeli zaznaczono, że uwzględniać zlecenobiorców z raportem to wtedy pokazujemy wszystkie umowy)
               {? zus.tab.ZN='T'
               || {? P.seek(zus.tab.PREF,,1)
                  || P.OSOBA();
                     ZC.prefix(P.ref());
                     {? ZC.first()
                     || {!
                        |? ZC_INFO.prefix(ZC.ref());
                           {? ZC_INFO.first()
                           || {!
                              |? {? (ZC_INFO.DU<=ZUS.DATA) & exec('chk_ubez','rap_zus','ZUA',1)
                                    & (ZUS.ZUA | (~ZUS.ZUA & exec('repeat_zua','rap_zus',1,0,_b)))
                                 || exec('zus_zua_add','rap_zus',#ZC.P,_b)
                                 ?};
                                 ZC_INFO.next()
                              !}
                           ?};
                           ZC.next()
                        !}
                     ?}
                  ?}
               ?};
               zus.tab.next()
            !}
         ?};
         PROGRESS.close()
      ?};

      _wnd:=ZUA.mk_sel('Raporty ZUA'@,'N',0,'201405201352',,,,,'U');
      ZUA.win_fld(_wnd,,'NAZWISKO',,,,,,'Nazwisko'@,,'Aktualne nazwisko'@);
      ZUA.win_fld(_wnd,,'PIERWSZE',,,,,,'Imię'@,,'Pierwsze imię'@);
      ZUA.win_fld(_wnd,,'TTUB',,,,,,'Tytuł ubezpieczenia'@,,'Tytuł ubezpieczenia'@);
      ZUA.win_fld(_wnd,,'NU',,,,,,'Nr umowy'@);
      ZUA.win_fld(_wnd,,'ZC_OD',,,,,,'Od dnia'@);
      ZUA.win_fld(_wnd,,'ZC_DO',,,,,,'Do dnia'@);
      ZUA.win_fld(_wnd,,'DU',,,,,,'Data zgłoszenia'@);
      ZUA.win_act(_wnd,0,'Formuła','Po&miń'@@,,,"ZUA.del()",,,1,,,'M');
      ZUA.win_act(_wnd,,'Formuła','Dalej'@@,,,"sel_exit()",,,,,,'D',,'target=window');
      ZUA.win_act(_wnd,0,'Szukaj');
      ZUA.win_btn(_wnd,'text=%1,panel=right,align=begin'['Po&miń'@],'menu:M');
      ZUA.win_btn(_wnd,'text=%1,icon=xwin16.png:22,btn_label_align=right,panel=bottom'['Dalej'@],'menu:D');
      ZUA.win_btn(_wnd,'text=%1,icon=xwin16.png:14,panel=bottom,align=end'['Anuluj'@],'key:Esc');
      ZUA.win_sel(_wnd);
      ZUA.win_edit('');
      ZUA.index(ZUA.ndx_tmp('Osoba',0,'NAZWISKO',,0,'PIERWSZE',,0));
      ZUA.prefix();
      ZUA.fld_attr(,2);
      {? ZUA.first()
      || {? ~ZUA.select(,1,10)
         || {? FUN.ask('Czy kontynuować działanie eksportu ZUA?'@)=0
            || P.cntx_pop();
               OSOBA.cntx_pop();
               ZC_INFO.cntx_pop();
               ZC.cntx_pop();
               ZUS_RAP.cntx_pop();
               _clear();
               return(0)
            ?}
         ?}
      ?}
   || FUN.emsg('Brak uprawnień do przeglądania współpracowników.'@)
   ?};
   ZC_INFO.cntx_pop();
   ZC.cntx_pop()
?};
ZUS_RAP.clear();
_inTerm:=exec('interm','#system');
{? ZUA.first()
|| progress(,'Zapis danych do pliku ZUS ZUA'@,'Proszę czekać'@,1);
   {? _out:=exec('otworz','rap_zus','ZUS ZUA')
   || exec('xml_zua_zapisz','rap_zus',ZUA,_out,_b);
      prgs_clr;
      fclose(_out);
      {? _inTerm
      || _pth:=exec('nazwa_pliku','rap_zus');
         _name:=ZUS.PLIK+'.xml';
         dlg_save(_pth,0,_name)
      ?};
      exec('info','rap_zus',3,'ZUS ZUA')
   ?};
   prgs_clr()
|| exec('info','rap_zus',2,'ZUS ZUA')
?};
ZUS_RAP.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();
_clear()


\tabela_zus_zua
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Tworzy tabelę do przygotowania ZUS ZUA
::   WE: _a - forma zatrudnienia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a='P'
|| _tab:=tab_tmp(1,
      'REF','INTEGER','Pracownik/umowa',
      'UBZ','INTEGER','Ubezpieczenie zdrowotne',
      'DCH','DATE','Dobrowolne chorobowe',
      'DER','DATE','Dobrowolne emerytalne i rentowe',
      'ZAW','STRING['+$MS.fld_len(ZAW,'KOD')+']','Kod zawodu wykonywanego',
      'EMD','DATE','Data rejestracji'
   )
|? _a='Z'
|| _tab:=tab_tmp(2,
      'REF','INTEGER','Umowa',
      'PRZ','INTEGER','Zleceniobiorca',
      'UBZ','INTEGER','Ubezp. zdrowotne',
      'DCH','DATE','dobrowolne chorobowe',
      'DER','DATE','dobrowolne emer. i rent.',
      'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
      'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
      'TTUB','STRING['+$(MS.fld_len(S_ZUS,'KOD')*3)+']' ,'Tytuł',
      'NU','STRING['+$MS.fld_len(ZC,'NU')+']','Nr umowy',
      'ZC_OD','DATE','Od dnia',
      'ZC_DO','DATE','Do dnia',
      'DU','DATE','Data zgłoszenia',
      'ZC_INFO','INTEGER','ZC_INFO',
      'ZAW','STRING['+$MS.fld_len(ZAW,'KOD')+']','Kod zawodu wykonywanego'
   )
?};
_tab


\zus_zua_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: uzupełnia tabelę pomocniczą do generowania raportu ZUS ZUA
::   WE: _a - powiazanie z współpracownikiem
::       _b - Forma zatrudnienia
::      [_c][DATE] - data rejestracji
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
:: Data rejestracji wyliczona podczas generowania listy - w szczególności może być datą powrotu z oddelegowania...
_emd:={? var_pres('_c')=type_of(_d0) || _c || _d0 ?};
_k2250:={? _b='P'
        || (4+|P_INFO.TTUB().KOD='2250')
        |? _b='Z'
        || (4+|ZC_INFO.TTUB().KOD='2250')
        || 0
        ?};
_zaw:=exec('zaw','rap_zus',_k2250);
{? +_zaw | _k2250
|| {? _b='P'
   || ZUA.REF:=_a;
      ZUA.UBZ:=ZUS.RODZZUA;
      ZUA.ZAW:=_zaw;
      ZUA.EMD:=_emd;
      ZUA.add()
   |? _b='Z'
   || ZUA.REF:=#ZC.ref();
      ZUA.PRZ:=_a;
      ZUA.UBZ:=(ZC_INFO.KC='T');
      ZUA.NAZWISKO:=OSOBA.NAZWISKO;
      ZUA.PIERWSZE:=OSOBA.PIERWSZE;
      ZUA.TTUB:=ZC_INFO.TTUB().KOD+ZC_INFO.PREM().KOD+ZC_INFO.STNP().KOD;
      ZUA.NU:=ZC.NU;
      ZUA.ZC_OD:=ZC_INFO.DU;
      ZUA.ZC_DO:=ZC_INFO.DW;
      ZUA.DU:=ZC_INFO.DU;
      ZUA.DCH:={? ZC_INFO.WN_FC='T' || ZC_INFO.DU || #0 ?};
      ZUA.DER:={? ZC_INFO.WN_ZUS='T' || ZC_INFO.DU || #0 ?};
      ZUA.ZC_INFO:=#ZC_INFO.ref();
      ZUA.ZAW:=_zaw;
      ZUA.add()
   ?}
?}


\repeat_zua
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Sprawdza czy użytkownik jest już zarejestrowany w ZUS, jak nie to sprawdza czy jest wybrany do zarejestrowania
::   WE: _a - 0 - nie należy sprawdzać, 1 - należy sprawdzać
::       _b - 1 - pokazanie informacji o błędzie, 0 - cicha praca
::       _c - Forma zatrudnienia
::   WY: 2 - jest wybrany do zarejestrowania, 1 - można generować ZUA/ZZA, 0 - nie można generować ZUA/ZZA
::  OLD: \repeat/rap_zua.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=1 ?};
{? var_pres('_b')<>type_of(0) || _b:=0 ?};
{? ~_a || return(1) ?};

_typ:=
   {? var_pres('ZUA')=type_of(SYSLOG) || 'ZUA'
   |? var_pres('ZZA')=type_of(SYSLOG) || 'ZZA'
   || ''
   ?};

P.OSOBA();
{? _c='P'
|| {? (_typ='ZUA' & ZUA.find_key(#P.ref())) | (_typ='ZZA' & ZZA.find_key(#P.ref())) || return(0) ?};
   ZUS_RAP.index('ZUS_RAP');
   ZUS_RAP.prefix(OSOBA.ref(),_typ);
   _jest:=0;
   _data:=date(0,0,0);
   {? ZUS_RAP.last()
   || {!
      |? {? ~ZUS_RAP.ZC
         || _jest:=1;
            _data:=ZUS_RAP.DATA;
            0
         || ZUS_RAP.prev()
         ?}
      !};
      ZUS_RAP.prefix(OSOBA.ref(),'ZWUA');
      {? ZUS_RAP.last()
      || {!
         |? {? ~ZUS_RAP.ZC & ZUS_RAP.DATA>_data & ZUS_RAP.DATA<=ZUS.DATA & P.ZA='T'
            || _jest:=2;
               0
            || ZUS_RAP.prev()
            ?}
         !}
      ?};
      {? _jest & _b
      || _jest:=FUN.ask('%1\n%2'['Dla tej osoby wygenerowano już raport zgłoszeniowy %1.'@[_typ],'Czy pominąć?'@])
      ?}
   ?};
   _jest
|| {? (_typ='ZUA' & ZUA.find_key(#ZC.ref())) | (_typ='ZZA' & ZZA.find_key(#ZC.ref())) || return(0) ?};
   _zatr:=_jest:=0;
   P.cntx_psh();
   P.index('PRACOSOB');
   P.prefix(exec('ref_firma','ustawienia'),'P',ZC.OSOBA);
   {? P.first()
   || {!
      |? {? P.DZA<=ZC.DU & (P.DZ=#0 | P.DZ>=ZC.DW)
         || _zatr:=_jest:=1
         ?};
         ~_zatr & P.next()
      !}
   ?};
   P.cntx_pop();
   ZUS_RAP.index('ZC');
   ZUS_RAP.prefix(ZC.OSOBA,_typ);
   {? ~_zatr & (_jest:=ZUS_RAP.find_key(ZC.ref())) & _b
   || _jest:=FUN.ask('%1\n%2'
         [  'Dla tej umowy w dniu %1 wygenerowano już raport %2.'@[ZUS_RAP.DATA$4,ZUS_RAP.RAPORT],
            'Czy pominąć?'@
         ]
      )
   ?};
   ~_jest
?}


\xml_zua_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Formuła zapisująca pliki w formacie XML
::   WE: _a - identyfikator bufora raportu
::       _b - uchwyt do pliku raportu
::       _c - Forma zatrudnienia
::   WY:
::  OLD: \repeat/rap_zua.fml
::----------------------------------------------------------------------------------------------------------------------
_file:=_b;
{? _file
||
:: Funkcja zapisu do pliku
   _save:=exec('to_file','rap_zus');
:: Konwersja znaków zastrzeżonych w XML
   _cxml:=exec('cxml','rap_zus');
   _cdxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";
   _dataxml:=_cdxml({? var_pres('DATA',ZUS)=21 || ZUS.DATA || date() ?});

   exec(exec('xml_head_kedu_a','rap_zus'),'rap_zus',_file,_dataxml);
   _id_dok:=1;
   {!
   |? {? {? _c='P' || P.seek(_a.REF,,1) & OSOBA.seek(P.OSOBA,,1)
         |? _c='Z' || ZC.seek(_a.REF,,1) & OSOBA.seek(ZC.OSOBA,,1)
         ?}
      || {? ZUS.GIODO='T' || exec('rap_zus','giodo',ZUS.DATA,'ZUA') ?};
         _p_info:={? exec('zn_ttub','pracownik',OSOBA.ref(),ZUS.DATA)
                  || 1
                  || P_INFO.index('OD');
                     P_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
                     P_INFO.first()
                  ?};

         ZUS_RAP.blank();
         ZUS_RAP.OSOBA:=OSOBA.ref();
         ZUS_RAP.RAPORT:='ZUA';
         {? _c='Z'
         || ZC_INFO.seek(_a.ZC_INFO,,1);
            ZUS_RAP.ZC:=ZC_INFO.ZC;
            ZUS_RAP.ZC_TTUB:=ZC_INFO.TTUB;
            ZUS_RAP.ZC_PREM:=ZC_INFO.PREM;
            ZUS_RAP.ZC_STNP:=ZC_INFO.STNP;
            ZUS_RAP.SKLADKI:='Emeryt. i rent.:'+ZC_INFO.ZUS+';Chor.:'+ZC_INFO.FC+';Wyp.:'+ZC_INFO.FW+';Pracy:'+
                           ZC_INFO.FP+';Gwar.:'+ZC_INFO.FG+';Ochr. zdr.:'+ZC_INFO.KC;
            ZUS_RAP.DRE:=ZUS_RAP.DUE:=ZUA.DER;
            ZUS_RAP.DCH:=ZUA.DCH
         || ZUS_RAP.ZC:=null();
            {? _p_info
            || ZUS_RAP.TTUB:=P_INFO.TTUB;
               ZUS_RAP.PREM:=P_INFO.PREM;
               ZUS_RAP.STNP:=P_INFO.STNP;
               ZUS_RAP.TPID:=P_INFO.TPID;
               ZUS_RAP.NZPR:=P_INFO.NZPR;
               ZUS_RAP.BLWN:=P_INFO.BLWN;
               ZUS_RAP.BLOKADA:=P_INFO.BLOKADA;
               ZUS_RAP.SZCZKOD:=P_INFO.SZCZKOD;
               ZUS_RAP.SZCZOD:=P_INFO.SZCZOD;
               ZUS_RAP.SZCZDO:=P_INFO.SZCZDO
            ?}
         ?};
         ZUS_RAP.DATA:=ZUS.DATA;
         ZUS_RAP.USER:=OPERATOR.USER;
         ZUS_RAP.add();
:: Nagłówek dokumentu
         _save(_file,'<ZUSZUA id_dokumentu="'+$_id_dok+'">');
:: I. Dane organizacyjne
         _save(_file,'<I>');
         _save(_file,'   <p1>true</p1>');
         _save(_file,'</I>');
:: II. Dane identyfikacyjne płatnika składek
         exec('xml_dane_platn','rap_zus',_file,'II');
:: III. Dane identyfikacyjne osoby zgłaszanej do ubezpieczeń
         exec('xml_dane_ubezp','rap_zus',_file,'III');
:: IV. Dane ewidencyjne osoby zgłaszanej do ubezpieczeń
         _save(_file,'<IV>');
         {? +(|OSOBA.DRUGIE)
         || _save(_file,'   <p1>'+_cxml(~-OSOBA.DRUGIE,22)+'</p1>')
         ?};
         {? +(|OSOBA.RODOWE)
         || _save(_file,'   <p2>'+_cxml(~-OSOBA.RODOWE,31)+'</p2>')
         ?};
         {? +(|OSOBA.OBYWATEL)
         || _save(_file,'   <p3>'+_cxml(~-OSOBA.OBYWATEL)+'</p3>')
         ?};
         {? +(|OSOBA.PLEC)
         || _save(_file,'   <p4>'+form(~-OSOBA.PLEC)+'</p4>')
         ?};
         _save(_file,'</IV>');
:: V. Tytuł ubezpieczenia - kod tytułu ubezpieczenia
         _p1:=_p2:=_p3:='';
         {? _c='P' & _p_info
         || _p1:=4+(|P_INFO.TTUB().KOD); _p2:=1+(|P_INFO.PREM().KOD); _p3:=1+(|P_INFO.STNP().KOD)
         |? _c='Z'
         || _p1:=4+(|ZC_INFO.TTUB().KOD); _p2+=1+(|ZC_INFO.PREM().KOD); _p3+=1+(|ZC_INFO.STNP().KOD)
         ?};
         _save(_file,'<V>');
         _save(_file,'   <p1>');
         exec('xml_KodTytUbezp','rap_zus',(_p1+_p2+_p3),_file,2);
         _save(_file,'   </p1>');
         _save(_file,'</V>');
:: VI. Dane o obowiązkowych ubezpieczeniach społecznych
         _p1:={? _c='P'
              || {? ZUA.EMD<date(1998,12,31) || date(1998,12,31) || ZUA.EMD ?}
              |? _c='Z'
              || ZC_INFO.DU
              || #0
              ?};
         _p2:=_p3:={? _c='P' | (~(ZUA.DER~1) & _c='Z' & ZC_INFO.ZUS='T') || 'true' || 'false' ?};
         _p4:={? _c='P' | (~(ZUA.DCH~1) & _c='Z' & ZC_INFO.FC ='T') || 'true' || 'false' ?};
         _p5:={? _c='P' | (_c='Z' & ZC_INFO.FW ='T') || 'true' || 'false' ?};
         _save(_file,'<VI>');
::    Data powstania obowiazku ubezpieczeń
         _save(_file,'   <p1>'+_cdxml(_p1)+'</p1>');
::    Osoba podlega ubezpieczeniu emerytalnemu
         _save(_file,'   <p2>'+_p2+'</p2>');
::    Osoba podlega ubezpieczeniu rentowemu
         _save(_file,'   <p3>'+_p3+'</p3>');
::    Osoba podlega ubezpieczeniu chorobowemu
         _save(_file,'   <p4>'+_p4+'</p4>');
::    Osoba podlega ubezpieczeniu wypadkowemu
         _save(_file,'   <p5>'+_p5+'</p5>');
         _save(_file,'</VI>');
:: VII. Dane o obowiązkowym ubezpieczeniu zdrowotnym
         {? _a.UBZ
         || _p1:={? _c='P'
                 || {? ZUA.EMD<date(1999,1,1) || date(1999,1,1) || ZUA.EMD ?}
                 |? _c='Z'
                 || ZC_INFO.DU
                 || #0
                 ?};
            _p2:={? _p_info
                 || P_INFO.KC().SYMBOL
                 || ''
                 ?};
            {? _p1~1 & +(|_p2)
            || _save(_file,'<VII>');
::          Data powstania obowiązku ubezpieczenia
               _save(_file,'   <p1>'+_cdxml(_p1)+'</p1>');
::          Kod oddziału NFZ
               _save(_file,'   <p2>'+_p2+'</p2>');
               _save(_file,'</VII>')
            ?}
         ?};
:: VIII. Dane o dobrowolnych ubezpieczeniach społecznych
         _der:={? ZUA.DER~1 || _cdxml(ZUA.DER) || '' ?};
         _dch:={? ZUA.DCH~1 || _cdxml(ZUA.DCH) || '' ?};
         {? +(|_der) | +(|_dch)
         || _save(_file,'<VIII>');
::       Wnoszę o objęcie dobrowolnym ubezpieczeniem emerytalnym od dnia
            _save(_file,'   <p1>'+{? +_der || 'true' || 'false' ?}+'</p1>');
            {? +_der || _save(_file,'   <p2>'+_der+'</p2>') ?};
::       Wnoszę o objęcie dobrowolnymi ubezpieczeniami rentowymi od dnia
            _save(_file,'   <p3>'+{? +_der || 'true' || 'false' ?}+'</p3>');
            {? +_der || _save(_file,'   <p4>'+_der+'</p4>') ?};
::       Wnoszę o objęcie dobrowolnym ubezpieczeniem chorobowym od dnia
            _save(_file,'   <p5>'+{? +_dch || 'true' || 'false' ?}+'</p5>');
            {? +_dch || _save(_file,'   <p6>'+_dch+'</p6>') ?};
            _save(_file,'</VIII>')
         ?};
:: IX. Dane o dobrowolnym ubezpieczeniu zdrowotnym (w wersji starndardowej sekcja niewypełniana)
::   _save(_file,'<IX>');
::   _save(_file,'   <p1>');
::   _save(_file,'      <p1></p1>');                         'Data rozpoczęcia dobrowolnego ubezpieczenia zdrowotnego';
::   _save(_file,'      <p2></p2>');                         'Kod oddziału NFZ';
::   _save(_file,'   </p1>');
::   _save(_file,'</IX>');
:: X. Inne dane o osobie zgłaszanej do ubezpieczeń
         _pX1:=ZUA.ZAW;
            _save(_file,'<X>');
::       Kod wykonywanego zawodu
         _save(_file,'   <p1>'+_pX1+'</p1>');
         _save(_file,'</X>');

:: XI. Adres zameldowania na stałe miejsce pobytu
         exec('xml_adres_ubezp','rap_zus',_file,'XI','S',
              {? _c='P' || {? ZUS.DATA<ZUA.EMD || ZUA.EMD || ZUS.DATA ?} || ZUS.DATA ?});
:: XII. Adres zamieszkania (opcjonalne)
         exec('xml_adres_ubezp','rap_zus',_file,'XII','C',
              {? _c='P' || {? ZUS.DATA<ZUA.EMD || ZUA.EMD || ZUS.DATA ?} || ZUS.DATA ?});
:: XIII. Adres do korespondencji (opcjonalne)
         exec('xml_adres_ubezp','rap_zus',_file,'XIII','K',
              {? _c='P' || {? ZUS.DATA<ZUA.EMD || ZUA.EMD || ZUS.DATA ?} || ZUS.DATA ?});
:: XIV. Oświadczenie płatnika składek
         _save(_file,'<XIV>');
         _save(_file,'   <p1>'+_dataxml+'</p1>');
         _save(_file,'</XIV>');
:: Zakończenie dokumentu
         _save(_file,'</ZUSZUA>')
      ?};
      _id_dok+=1;
      _a.next()
   !};
:: Zakończenie pliku
   _save(_file,'</KEDU>')
?}


\chk_ubez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Formuła sprawdza czy umowa powinna znaleźć sie w raporcie, kryterium to odprowadzane składki
::   WE: _a - symbol raportu, dozwolone wartości: ZUA, ZZA
::       [_b] - jeśli różny od zera, pytanie o potwierdzenie uwzględnienia umowy bez ubezpieczeń
::              nie będzie wyświetlane
::----------------------------------------------------------------------------------------------------------------------
{? _a='ZUA'
|| {? ZC_INFO.ZUS='T' | ZC_INFO.FC='T' | ZC_INFO.FW='T' | ZC_INFO.FP='T' | ZC_INFO.FG='T'
   || 1
   |? (var_pres('_b')<>type_of(0) | ~_b)
   || FUN.ask('Umowa nie jest objęta ubezpieczeniami.'@+'\n'+'Czy na pewno uwzględnić ją w raporcie?'@)
   ?}
|? _a='ZZA'
|| {? ZC_INFO.ZUS='N' & ZC_INFO.FC='N' & ZC_INFO.FW='N' & ZC_INFO.FP='N' & ZC_INFO.FG='N' & ZC_INFO.KC='T'
   || 1
   |? (var_pres('_b')<>type_of(0) | ~_b)
   || FUN.ask('Umowa podlega ubezpieczeniom społecznym.'@+'\n'+'Czy na pewno uwzględnić ją w raporcie?'@)
   ?}
?}


\zus_zwua_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Tworzy deklaracje ZUS ZWUA - raport zgłoszenia do wyrejestrowania z ubezpieczeń
::   WE: _a - null
::       _b - Forma współpracy
::       _c - kod dziedziny produktowej
::   WY:
::  OLD: \generuj/rap_zwu.fml
::----------------------------------------------------------------------------------------------------------------------
_clear:="VAR_DEL.delete('ZWUA','anuluj')";
_clear();
OSOBA.cntx_psh();
OSOBA.prefix();
ZC.cntx_psh();
ZC.prefix();
P.cntx_psh();
P.prefix();
ZUS_RAP.cntx_psh();
ZUS_RAP.prefix();
H_UM.cntx_psh();
H_UM.index('OD');
:: Tabela tymczasowa bufora raportu
ZWUA:=tab_tmp(1,
   'PREF','INTEGER','Pracownik',
   'ZCREF','INTEGER','Umowa',
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
   'TTUB','STRING[6]','Tytuł ubezpieczenia',
   'EMT','STRING[1]','E',
   'EMD','DATE','Data wyrejestrowania',
   'EMK','STRING[4]' ,'Przyczyna wyrejestrowania',
   'PRZ','INTEGER','Zleceniobiorca',
   'DW','DATE','Data zakończenia',
   'NU','STRING['+$MS.fld_len(ZC,'NU')+']','Nr umowy',
   'ZC_OD','DATE','Od dnia',
   'ZC_DO','DATE','Do dnia',
   'DO','DATE','Data rozwiązania stosunku pracy',
   'USPKOD','STRING[3]','Kod rozwiązania/wygaśnięcia stosunku pracy',
   'USPPPRAK','STRING[3]','Kod podstawy prawnej ustania stosunku pracy/służbowego',
   'USPPPRAT','STRING[70]','Podstawa prawna ustania stosunku pracy/służbowego',
   'USPSTR','STRING[1]','Strona inicjująca rozwiązanie stosunku pracy'
);

{? _b='P'
|| _filter:=exec('dostepne_p','schemat',_c,_b,'*');
   {? _filter.first()
   || {!
      |? {? P.seek(_filter.REF,,1)
         || _zwua:=exec('repeat_zwua','rap_zus',1,_b,0);
            {? ZUS.ZUA | (~ZUS.ZUA & _zwua)
            || {? exec('nowy_zwua','rap_zus',zus.tab,_b)
               || zus.tab.T:=P.T;
                  zus.tab.WYDZIAL:=P.WYDZIAL().SYMBOL;
                  zus.tab.CP:=P.CP().CP;
                  zus.tab.ZA:={? P.ZA='N' | (P.DZ<>date(0,0,0) & P.DZ<ZUS.DATA) || 'N' || 'T' ?};
                  zus.tab.ZUA:=_zwua;
                  _oddBz:=exec('czy_odd_bzus','oddelegowanie',P.ref(),ZUS.DATA);
::                Zaznacz do umieszczenia w raporcie jeśli
::                   (jest niezatrudniony lub jest w tym czasie oddelegowany bez zus) oraz
::                   (jest zgłoszony) [ostatnim rekordem w ZUS_RAP jest ZUA]:
                  zus.tab.ZN:=
                     {? (zus.tab.ZA='N' | _oddBz.st) & zus.tab.ZUA
                     || 'T'
                     || 'N'
                     ?};
::                Przypisanie odpowiedniej daty wyrejestrowania, kodu oraz znacznika dla oddelegowanego bez zus:
                  {? _oddBz.st
                  || zus.tab.EMK:='600';
                     zus.tab.EMD:=_oddBz.od;
                     zus.tab.ODDBZ:='T';
::                   Przypisanie odpowiedniego tytułu ubezpiecznia na datę początku oddelegowania:
                     P_INFO.cntx_psh();
                     P_INFO.index('OD');
                     P_INFO.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
                     {? P_INFO.find_le(_oddBz.od)
                     || _tyt_ub:=4+(|P_INFO.TTUB().KOD);
                        _tyt_ub+=1+(|P_INFO.PREM().KOD);
                        _tyt_ub+=1+(|P_INFO.STNP().KOD);
                        _tyt_ub:=form(_tyt_ub,6);
                        zus.tab.TTUB:=_tyt_ub
                     ?};
                     P_INFO.cntx_pop()
                  || zus.tab.ODDBZ:='N'
                  ?};

                  {? form(zus.tab.EMK)='0' || zus.tab.EMK:='' ?};
                  H_UM.prefix(P.ref());
                  {? H_UM.last()
                  || {? 2+zus.tab.TTUB='01'
                     || zus.tab.DO:=H_UM.DO;
                        zus.tab.USPKOD:=H_UM.USPKOD().KOD;
                        zus.tab.USPPPRAK:=H_UM.USPPPRAK().KOD;
                        zus.tab.USPPPRAT:=H_UM.USPPPRAT;
                        zus.tab.USPSTR:=H_UM.USPSTR().KOD
                     ?}
                  ?};
                  {? ~_oddBz.st & zus.tab.ZN='T' & exec('chk_rozwiazanie_umowy','rap_zus')
                  || zus.tab.ZN:='N'
                  ?};
                  obj_del(_oddBz);
                  zus.tab.put()
               ?}
            ?}
         ?};
         _filter.next()
      !};
      zus.tab.fld_attr(,2);
      {? zus.tab.select()
      || PROGRESS.set(zus.tab.size(),'Trwa pobieranie danych do raportu ZWUA.'@);
         zus.tab.index(zus.ndx);
         zus.tab.prefix('T');
         {? zus.tab.first()
         || {!
            |? PROGRESS.next();
               {? P.seek(zus.tab.PREF,,1) & exec('zn_ttub','pracownik',P.OSOBA,ZUS.DATA)
               || {? exec('chk_rozwiazanie_umowy','rap_zus')
                  || FUN.emsg('%1 %2\n%3\n%4'
                        [  P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                           'Brak wymaganych danych o rozwiązaniu/wygaśnięciu umowy o pracę/stosunku służbowego.'@,
                           'Należy uzupełnić brakujące informacje przy umowie o pracę.'@
                        ]
                     )
                  || ZWUA.blank();
                     {! _ii:=1..ZWUA.fld_num()
                     |! {? var_pres(ZWUA.fld_acr(_ii),zus.tab)>0
                        || ($('ZWUA.'+ZWUA.fld_acr(_ii)))():=($('zus.tab.'+ZWUA.fld_acr(_ii)))()
                        ?}
                     !};
                     ZWUA.add()
                  ?}
               || FUN.emsg('%1 %2 %3.\n%4'
                     [  'Brak danych ubezpieczeniowych dla:'@,
                        P.OSOBA().NAZWISKO,
                        P.OSOBA().PIERWSZE,
                        'Export danych dla tej osoby nie jest możliwy.'@
                     ]
                  )
               ?};
               zus.tab.next()
            !}
         ?};
         PROGRESS.close()
      ?}
   || FUN.emsg('Brak uprawnień do przeglądania pracowników.'@)
   ?}
|? _b='Z'
|| anuluj:=1;
   _filter:=exec('dostepne_p','schemat',_c,_b,'*');
::    Zleceniobiorcy raporty na podstawie umow-zlecen spelniajacych zadane kryteria
   {? _filter.first()
   || ZC.cntx_psh();
      ZC.index('ZLECPRZ');
      {!
      |? {? P.seek(_filter.REF,,1)
         || ZC.prefix(P.ref());
            _zwua:=0;
:: 1. wyszukujemy zleceniobiorców, dla których należy utworzyć raport
            {? ZC.first()
            || {!
               |? exec('get_ZC_INFO','zlec_rh',ZUS.DATA);
                  {? ZC_INFO.ZUS='T' | ZC_INFO.FC='T' | ZC_INFO.FW='T'  | ZC_INFO.KC='T'
                  || _zwua+=exec('repeat_zwua','rap_zus',1,_b,0)
                  ?};
                  ~_zwua & ZC.next()
               !};
:: Jeżeli umowa nie była jeszcze wyrejestrowana lub jest zaznaczony znacznik żeby uwzględniać wyrejestrowane umowy
:: to dodaj takiego zleceniobiorcę
               exec('get_ZC_INFO','zlec_rh',ZUS.DATA);
               {? (ZUS.ZUA | (~ZUS.ZUA & _zwua)) & exec('nowy_zwua','rap_zus',zus.tab,_b)
               || zus.tab.T:=P.T;
                  zus.tab.WYDZIAL:=P.WYDZIAL().SYMBOL;
                  zus.tab.CP:=P.CP().CP;
                  zus.tab.ZA:=P.ZA;
:: domyślny znacznik zaznaczenia ustawiany jest na podstawie informacji o tym czy są umowy do wyrejestrowania
                  zus.tab.ZUA:=_zwua;
                  zus.tab.ZN:={? zus.tab.ZUA || 'T' || 'N' ?};
                  zus.tab.EMD:=date(0,0,0);
                  {? form(zus.tab.EMK)='0' || zus.tab.EMK:='' ?};
                  zus.tab.put(1)
               ?}
            ?}
         ?};
         _filter.next()
      !};
      zus.tab.fld_attr(,2);
      {? zus.tab.select()
      || PROGRESS.set(zus.tab.size(),'Trwa pobieranie danych do raportu ZWUA.'@);
:: 2. dla wybranych zleceniobiorców wyszukujemy umowy, które powinny znaleźć się w raporcie.
:: (jeżeli zaznaczono, że uwzględniać wyrejestrowane umowy, to wtedy pokazujemy wszystkie umowy)
         {? zus.tab.first()
         || {!
            |? PROGRESS.next();
               {? zus.tab.ZN='T'
               || {? P.seek(zus.tab.PREF,,1)
                  || ZC.prefix(P.ref());
                     {? ZC.first()
                     || {!
                        |? {? (ZUS.ZUA | (~ZUS.ZUA & exec('repeat_zwua','rap_zus',1,_b,0)))
                           || ZWUA.blank();
                              {! _ii:=1..ZWUA.fld_num()
                              |! {? var_pres(ZWUA.fld_acr(_ii),zus.tab)>0
                                 || ($('ZWUA.'+ZWUA.fld_acr(_ii)))():=($('zus.tab.'+ZWUA.fld_acr(_ii)))()
                                 ?}
                              !};
                              ZWUA.ZCREF:=#ZC.ref();
                              ZWUA.NU:=ZC.NU;
                              ZWUA.ZC_OD:=ZC.DU;
                              ZWUA.ZC_DO:=ZC.DW;
                              exec('get_ZC_INFO','zlec_rh',ZC.DW);
                              ZWUA.EMD:=ZC_INFO.DW+1;
                              _tyt_ub:=4+(|ZC_INFO.TTUB().KOD);
                              _tyt_ub+=1+(|ZC_INFO.PREM().KOD);
                              _tyt_ub+=1+(|ZC_INFO.STNP().KOD);
                              ZWUA.TTUB:=form(_tyt_ub,6);
                              ZWUA.add(1)
                           ?};
                           ZC.next()
                        !}
                     ?}
                  || FUN.emsg('Brak danych ubezpieczeniowych dla: %1 %2'@[P.OSOBA().NAZWISKO,P.OSOBA().PIERWSZE]+'\n'+
                        'Export danych dla tej osoby nie jest możliwy.'@
                     )
                  ?}
               ?};
               zus.tab.next()
            !}
         ?};
         PROGRESS.close()
      ?};
       _wnd:=ZWUA.mk_sel('Raporty ZWUA'@,'N',0,'201405201352',,,,,'U');
      ZWUA.win_fld(_wnd,,'NAZWISKO',,,,,,'Nazwisko'@,,'Aktualne nazwisko'@);
      ZWUA.win_fld(_wnd,,'PIERWSZE',,,,,,'Imię'@,,'Pierwsze imię'@);
      ZWUA.win_fld(_wnd,,'TTUB',,,,,,'Tytuł ubezpieczenia'@,,'Kod tytułu ubezpieczenia'@);
      ZWUA.win_fld(_wnd,,'NU',,,,,,'Nr umowy'@,,'Numer umowy cywilno-prawnej'@);
      ZWUA.win_fld(_wnd,,'ZC_OD',,,,,,'Od dnia'@,,'Data rozpoczęcia umowy'@);
      ZWUA.win_fld(_wnd,,'ZC_DO',,,,,,'Do dnia'@,,'Data zakończenia umowy'@);
      ZWUA.win_fld(_wnd,,'EMD',,,,,,'Data wyrejestrowania'@,,'Wyrejestrowanie od dnia'@);
      ZWUA.win_fld(_wnd,,'EMK',,,,,,'Przyczyna wyrejestrowania'@,,'Kod przyczyny wyrejestrowania'@);

      ZWUA.win_act(_wnd,0,'Formuła','Popraw'@@,,,
         "  _red:=ZWUA.mk_edit('ZUS ZWUA',,'redaguj_zwua');
            ZWUA.win_esep(_red,'Parametry raportu'@);
            ZWUA.win_efld(_red,,'NAZWISKO',,,25,,1,'Nazwisko'@,,'Aktualne nazwisko'@);
            ZWUA.win_efld(_red,,'PIERWSZE',,,25,,1,'Imię'@,,'Pierwsze imię'@);
            ZWUA.win_efld(_red,,'TTUB',,,13,,,'Tytuł ubezpieczenia'@,,'Kod tytułu ubezpieczenia'@);
            ZWUA.efld_opt(_red,'mark=1',,'TTUB');
            ZWUA.win_efld(_red,,'EMD',,,10,,,'Data wyrejestrowania'@,,'Wyrejestrowanie od dnia'@);
            ZWUA.efld_opt(_red,'mark=1',,'EMD');
            ZWUA.win_efld(_red,,'EMK',,,10,,,'Przyczyna wyrejestrowania'@,,'Kod przyczyny wyrejestrowania'@,,
               'F3_button=1'
            );
            ZWUA.efld_opt(_red,'mark=1',,'EMK');
            _zuswer:=S_ZUS.mk_sel('Kody w dokumentach ubezpieczeniowych'@,,0,'kodywdokzus',,15,,,'U');
            S_ZUS.win_fld(_zuswer,,'KOD',,,8,,1,'Kod'@);
            S_ZUS.win_fld(_zuswer,,'OPIS',,,60,,1,'Opis'@);
            S_ZUS.win_act(_zuswer,0,'Formuła','Wybierz'@@,,,\"sel_exit()\",,1,0,,,'W');
            S_ZUS.win_sel(_zuswer);
            ZWUA.fld_fml('EMK','F3',
               \" S_ZUS.cntx_psh();
                  S_ZUS.index('S_ZUS');
                  S_ZUS.prefix(\'Z\');
                  {? S_ZUS.select() || ZWUA.EMK:=S_ZUS.KOD ?};
                  S_ZUS.win_sel('WER');
                  S_ZUS.cntx_pop()
               \"
            );
            ZWUA.fld_fml('EMK','AFTER_EDIT',
               \" S_ZUS.cntx_psh();
                  S_ZUS.index('S_ZUS');
                  S_ZUS.prefix(\'Z\',fld());
                  {? ~S_ZUS.first()
                  || FUN.emsg(\'Brak kodu w słowniku\'@);
                     ZWUA.EMK:=\'\'
                  ?};
                  S_ZUS.cntx_pop()
               \"
            );
            exec('ok_esc','#window',ZWUA,_red,,,,,,,exec('text_red_ok','#window'));
            ZWUA.win_edit(_red);
            {? ZWUA.edit(\"__CHK.record(ZWUA,,'TTUB','EMD','EMK')\")
            || ZWUA.put()
            ?}
         ",,0,,,,'P'
      );
      ZWUA.win_act(_wnd,0,'Formuła','Po&miń'@@,,,"ZWUA.del()",,,1,,,'M');
      ZWUA.win_act(_wnd,,'Formuła','Dalej'@@,,'Generowanie raportu'@,
         "  _ok:=1;
         ZWUA.cntx_psh();
         {? ZWUA.first()
         || {!
               |? {? ~(+ZWUA.EMK & ZWUA.EMD<>#0 & +ZWUA.TTUB)
               || FUN.emsg('Proszę uzupełnić brakujące informacje - %1 %2 (%3)'@
                           [ZWUA.NAZWISKO,ZWUA.PIERWSZE,ZWUA.NU]);
                  _ok:=0
               ?};
               _ok & ZWUA.next()
            !}
         ?};
         ZWUA.cntx_pop();
         {? _ok
            || anuluj:=0;
               sel_exit()
            ?}
         ",,,,,,'D',,'target=window'
      );
      ZWUA.win_act(_wnd,0,'Szukaj');
      ZWUA.win_btn(_wnd,'text=%1,panel=right,align=begin'['Popraw'@],'menu:P');
      ZWUA.win_btn(_wnd,'text=%1,panel=right,align=begin'['Po&miń'@],'menu:M');
      ZWUA.win_btn(_wnd,'text=%1,icon=xwin16.png:22,btn_label_align=right,panel=bottom'['Dalej'@],'menu:D');
      ZWUA.win_btn(_wnd,'text=%1,icon=xwin16.png:14,panel=bottom,align=end'['Anuluj'@],'key:Esc');
      ZWUA.win_sel(_wnd);

      ZWUA.index(ZWUA.ndx_tmp('Osoba',0,'NAZWISKO',,0,'PIERWSZE',,0));
      ZWUA.prefix();
      ZWUA.fld_attr(,2);
      {? ZWUA.first()
      || {? ~ZWUA.select(,1,10)
         || {? anuluj & ZWUA.first()
            || {! |? ZWUA.del() !}
            ?};
            {? ZWUA.size() & FUN.ask('Czy kontynuować działanie eksportu ZWUA?'@)=0
            || P.cntx_pop();
               OSOBA.cntx_pop();
               ZC.cntx_pop();
               ZC.cntx_pop();
               ZUS_RAP.cntx_pop();
               H_UM.cntx_pop();
               _clear();
               return(0)
            ?}
         ?}
      ?};
      ZC.cntx_pop()
   || FUN.emsg('Brak uprawnień do przeglądania współpracowników.'@)
   ?}
?};
ZUS_RAP.clear();
_inTerm:=exec('interm','#system');
{? ZWUA.first()
|| progress(,'Zapis danych do pliku ZUS ZWUA'@,'Proszę czekać'@,1);
   {? _out:=exec('otworz','rap_zus','ZUS ZWUA')
   || exec('xml_zwua_zapisz','rap_zus',ZWUA,_out,_b);
      prgs_clr();
      exec('info','rap_zus',3,'ZUS ZWUA');
      fclose(_out);
      {? _inTerm
      || _pth:=exec('nazwa_pliku','rap_zus');
         _name:=ZUS.PLIK+'.xml';
         dlg_save(_pth,0,_name)
      ?}
   ?};
   prgs_clr()
|| exec('info','rap_zus',2,'ZUS ZWUA')
?};
_clear();
S_ZUS.win_sel('WER');
H_UM.cntx_pop();
ZUS_RAP.cntx_pop();
OSOBA.cntx_pop();
ZC.cntx_pop();
P.cntx_pop()


\nowy_zwua
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Dodaje do bufora raportów nowy zapis
::   WE: _a - Bufor raportu
::       _b - Forma zatrudnienia
::   WY:
::  OLD: \nowy/rap_zwu.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? _b='P'
|| P.OSOBA()
|? _b='Z'
|| ZC.OSOBA()
?};
P_INFO.index('OD');
P_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
_p_info:=
   {? _b='P' & P.DZ<>date(0,0,0) & P_INFO.find_le(P.DZ)
   || 1
   || P_INFO.last()
   ?};

_tyt_ub:=6*' ';

{? _b='P' & _p_info
|| _tyt_ub:=4+(|P_INFO.TTUB().KOD);
   _tyt_ub+=1+(|P_INFO.PREM().KOD);
   _tyt_ub+=1+(|P_INFO.STNP().KOD);
   _tyt_ub:=form(_tyt_ub,6)
|? _b='Z'
|| _tyt_ub:=4+(|ZC_INFO.TTUB().KOD);
   _tyt_ub+=1+(|ZC_INFO.PREM().KOD);
   _tyt_ub+=1+(|ZC_INFO.STNP().KOD);
   _tyt_ub:=form(_tyt_ub,6)
?};

_a.blank();
_a.PREF:=#P.ref();
_a.ZCREF:={? _b='Z' || #ZC.ref() || 0 ?};
_a.NAZWISKO:=OSOBA.NAZWISKO;
_a.PIERWSZE:=OSOBA.PIERWSZE;
_a.TTUB:=&_tyt_ub;
_a.PRZ:={? _b='P' || 0 || #ZC.P ?};

{? _b='P'
|| S_ZUS.cntx_psh();
   S_ZUS.index('S_ZUS');
   S_ZUS.prefix('Z');
   {? ~S_ZUS.find_key('100',)
   || S_ZUS.blank();
      S_ZUS.RODZAJ:='Z';
      S_ZUS.KOD:='100';
      S_ZUS.add()
   ?};
   _a.EMT:='T';
   _a.EMD:={? P.DZ<>#0 || P.DZ+1 || #0 ?};
   _a.EMK:=S_ZUS.KOD;
   S_ZUS.cntx_pop();
   _result:=_a.add()
|? _b='Z'
|| S_ZUS.cntx_psh();
   S_ZUS.index('S_ZUS');
   S_ZUS.prefix('Z');
   {? ~S_ZUS.find_key('100',)
   || S_ZUS.blank();
      S_ZUS.RODZAJ:='Z';
      S_ZUS.KOD:='100';
      S_ZUS.add()
   ?};
   {? ZC_INFO.ZUS='T' | ZC_INFO.FC='T' | ZC_INFO.FW='T'  | ZC_INFO.KC='T'
   || _a.EMT:='T';
      _a.EMD:=ZC_INFO.DW+1;
      _a.EMK:=form({? +S_ZUS.KOD || S_ZUS.KOD || '' ?},3);
      _result:=_a.add()
   || _a.EMT:='N'
   ?};
   S_ZUS.cntx_pop()
?};
_result


\repeat_zwua
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Sprawdza czy współpracownik jest wyrejestrowany z ZUS!
::   WE: _a - 1 - nie należy sprawdzać, 0 - należy sprawdzać
::       _b - Forma zatrudnienia
::       _c - 1 - pokazanie informacji o błędzie, 0 - cicha praca
::   WY: 2 - jest wybrany do wyrejestrowania, 1 - moźna drukować ZWUA, 0 - nie można drukować ZWUA
::  OLD: \repeat/rap_zwu.fml
::----------------------------------------------------------------------------------------------------------------------
_spr:={? var_pres('_a')=type_of(0) || _a || 1 ?};
_f_zatr:={? var_pres('_b')=type_of('') || _b || return(0) ?};
_msg:={? var_pres('_c')=type_of(0) || _c || 0 ?};

{? ~_spr
|| return(1)
|| P.OSOBA();
   {? _f_zatr='P'
   || {? ZWUA.find_key(#P.ref()) || return(2) ?};
      ZUS_RAP.index('ZUS_RAP');
      ZUS_RAP.prefix(OSOBA.ref(),'ZWUA');
      {? ZUS_RAP.last()
      || _zwuadat:=ZUS_RAP.DATA;
         ZUS_RAP.prefix(OSOBA.ref(),'ZUA');
         {? ZUS_RAP.last() & _zwuadat<ZUS_RAP.DATA & (P.DZ=date(0,0,0) | P.DZ>=ZUS_RAP.DATA)
         || return(1)
         || ZUS_RAP.prefix(OSOBA.ref(),'ZZA');
            {? ZUS_RAP.last() & _zwuadat<ZUS_RAP.DATA || return(1) ?}
         ?}
      || return(1)
      ?}
   |? _f_zatr='Z'
   || ZUS_RAP.index('ZC');
      ZUS_RAP.prefix(OSOBA.ref(),'ZWUA',ZC.ref());
      {? ZUS_RAP.last()
      || _zwuadat:=ZUS_RAP.DATA;
         ZUS_RAP.prefix(OSOBA.ref(),'ZUA',ZC.ref());
         {? ZUS_RAP.last() & _zwuadat<ZUS_RAP.DATA
         || return(1)
         || ZUS_RAP.prefix(OSOBA.ref(),'ZZA',ZC.ref());
            {? ZUS_RAP.last() & _zwuadat<ZUS_RAP.DATA || return(1) ?}
         ?}
      || return(1)
      ?}
   ?};

   {? _msg
   || FUN.emsg('Ta osoba ma już wygenerowany raport ZWUA z dnia: %1.'@[_zwuadat$4])
   ?}
?};
0


\xml_zwua_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Zapisuje do pliku kompletny raport ZWUA w formacie XML
::   WE: _a - identyfikator bufora raportu
::       _b - uchwyt do pliku raportu
::       _c - forma zatrudnienia
:: UWAGA! Funkcja nie weryfikuje poprawności argumentów jak i struktury bufora
::  OLD: \xml_zapisz/rap_zwu.fml
::----------------------------------------------------------------------------------------------------------------------
:: Konwersja do formatów wymaganych w XML
_cxml:=exec('cxml','rap_zus');
_cdxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";
_dataxml:=_cdxml({? var_pres('DATA',ZUS)=21 || ZUS.DATA || date() ?});

:: Zapis wiersza do pliku z konwersją kodowania
_save:=exec('to_file','rap_zus');
::Nagłówek dokumentu
_file:=_b;
exec(exec('xml_head_kedu_a','rap_zus'),'rap_zus',_file,_dataxml);
_id_dok:=1;
{!
|? {? {? _c='P' || P.seek(_a.PREF,'pracowni') & OSOBA.seek(P.OSOBA)
      |? _c='Z' || ZC.seek(_a.ZCREF,'zlec') & OSOBA.seek(ZC.OSOBA)
      ?}
   || {? ZUS.GIODO='T' || exec('rap_zus','giodo',ZUS.DATA,'ZWUA') ?};
      P_INFO.index('OD');
      P_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
      _p_info:={? P_INFO.find_le(ZUS.DATA) || 1 || P_INFO.first() ?};

      ZUS_RAP.blank();
      ZUS_RAP.OSOBA:=OSOBA.ref();
      ZUS_RAP.RAPORT:='ZWUA';
      {? _c='Z'
      || exec('get_ZC_INFO','zlec_rh',_a.EMD-1);
         ZUS_RAP.ZC:=ZC.ref();
         ZUS_RAP.ZC_TTUB:=ZC_INFO.TTUB;
         ZUS_RAP.ZC_PREM:=ZC_INFO.PREM;
         ZUS_RAP.ZC_STNP:=ZC_INFO.STNP;
         ZUS_RAP.SKLADKI:='Emeryt. i rent.:'+ZC_INFO.ZUS+';Chor.:'+ZC_INFO.FC+';Wyp.:'+ZC_INFO.FW+';Pracy:'+ZC_INFO.FP+
                          ';Gwar.:'+ZC_INFO.FG+';Ochr. zdr.:'+ZC_INFO.KC
      || ZUS_RAP.ZC:=null();
         {? _p_info
         || ZUS_RAP.TTUB:=P_INFO.TTUB;
            ZUS_RAP.PREM:=P_INFO.PREM;
            ZUS_RAP.STNP:=P_INFO.STNP;
            ZUS_RAP.TPID:=P_INFO.TPID;
            ZUS_RAP.NZPR:=P_INFO.NZPR;
            ZUS_RAP.BLWN:=P_INFO.BLWN;
            ZUS_RAP.BLOKADA:=P_INFO.BLOKADA
         ?}
      ?};
      ZUS_RAP.DATA:=ZUS.DATA;
      ZUS_RAP.USER:=OPERATOR.USER;
      ZUS_RAP.add();

      _save(_file,'<ZUSZWUA id_dokumentu="'+$_id_dok+'">');

::       I. Dane organizacyjne
      _save(_file,'<I>');
      _save(_file,'   <p1>true</p1>');
      _save(_file,'</I>');

::       II. Dane identyfikacyjne płatnika składek
      exec('xml_dane_platn','rap_zus',_file,'II');

::       III. Dane identyfikacyjne osoby wyrejestrowywanej z ubezpieczeń
      exec('xml_dane_ubezp','rap_zus',_file,'III');

::       IV. Wyrejestrowanie z ubezpieczeń
      _save(_file,'<IV>');
::       Kod tytułu ubezpieczenia
      _save(_file,'  <p1>');
      exec('xml_KodTytUbezp','rap_zus',_a,_file,2);
      _save(_file,'  </p1>');
::       Data wyrejestrowania
      _save(_file,'  <p2>'+_cdxml(_a.EMD)+'</p2>');
::       Kod przyczyny wyrejestrowania
      _save(_file,'  <p3>'+_a.EMK+'</p3>');
      _save(_file,'</IV>');

:: V. Rozwiązanie/wygaśnięcie stosunku pracy/stosunku służbowego.
::    Dla zleceniobiorców blok jest pomijany.
      {? _a.DO>date(0,0,0)
      || _save(_file,'<V>');
:: Data
         _save(_file,'  <p1>'+_cdxml(_a.DO)+'</p1>');
:: Kod wygaśnięcia/kod trybu rozwiązania stosunku pracy/stosunku służbowego
         _save(_file,'  <p2>'+_a.USPKOD+'</p2>');
:: Kod podstawy prawnej rozwiązania/wygaśnięcia stosunku pracy/stosunku służbowego
         _save(_file,'  <p3>'+_a.USPPPRAK+'</p3>');
:: Jeśli w polu 03 podałeś kod 550 - wpisz podstawę prawną rozwiązania/wygaśnięcia stosunku pracy/stosunku służbowego
         _save(_file,'  <p4>'+_a.USPPPRAT+'</p4>');
:: Strona z inicjatywy, której nastąpiło rozwiązanie stosunku pracy, jeśli pracownik wpisz 1, jeśli pracodawca - 2
         _save(_file,'  <p5>'+_a.USPSTR+'</p5>');
         _save(_file,'</V>')
      ?};

::       VI. Oświadczenie płatnika składek
      _save(_file,'<VI>');
      _save(_file,'  <p1>'+_dataxml+'</p1>');
      _save(_file,'</VI>');

::       Stopka i zakończenie dokumentu
      _save(_file,'</ZUSZWUA>')
   ?};
   _id_dok+=1;
   _a.next()
!};
_save(_file,'</KEDU>')


\zus_zcna_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Tworzy deklaracje ZUS ZCNA - raport zgłoszenia do ubezpieczeń członków rodziny
::   WE: _a - null
::       _b - Forma zatrudnienia
::       _c - kod dziedziny produktowej
::   WY:
::  OLD: \generuj/rap_zca.fml
::----------------------------------------------------------------------------------------------------------------------
RD.cntx_psh();
RD.index('_RODZINA');
OSOBA.cntx_psh();
OSOBA.prefix();
ZUS_RAP.cntx_psh();
:: Tworzenie bufora raportu
VAR_DEL.delete('ZCA');
ZCA:=tab_tmp(2,
   'REF','INTEGER','Członek rodziny',
   'OSOBA','INTEGER','Dane osobowe',
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
   'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']','PESEL',
   'REJ','STRING[1]','Zgłoszenie',
   'DATA','DATE','Od dnia',
   'TPID','STRING[1]' ,'Typ identyfikatora',
   'DOKNR','STRING[9]','Numer dokumentu',
   'ZN1','STRING[1]','',
   'ZN2','STRING[2]','',
   'STNP','STRING['+$MS.fld_len(S_ZUS,'KOD')+']','Niepełnosprawność',
   'KRAJ','STRING['+$MS.fld_len(KRAJE,'SYM')+']','Kraj',
   'KOD','STRING['+$MS.fld_len(OS_ADRES,'KOD')+']','Kod pocztowy',
   'MIASTO','STRING['+$MS.fld_len(OS_ADRES,'MIASTO')+']','Miejscowość',
   'GMINA','STRING['+$MS.fld_len(OS_ADRES,'GMINA')+']','Gmina',
   'ULICA','STRING['+$MS.fld_len(OS_ADRES,'ULICA')+']','Ulica',
   'DOM','STRING['+$MS.fld_len(OS_ADRES,'DOM')+']','Dom',
   'LOKAL','STRING['+$MS.fld_len(OS_ADRES,'LOKAL')+']','Lokal',
   'TEL','STRING['+$MS.fld_len(OS_ADRES,'TEL')+']','Telefon'
);

:: Okienko przeglądania utworzonych raportów
ZCA.fld_attr(,2);
_wnd:=ZCA.mk_sel('Raporty ZUS ZCNA'@,'N',0,'201206050750',,,,,'U');
ZCA.win_fld(_wnd,,'NAZWISKO',,,30,,1,'Nazwisko'@,,'Aktualne nazwisko'@);
ZCA.win_fld(_wnd,,'PIERWSZE',,,20,,1,'Imię'@,,'Pierwsze imię'@);
ZCA.win_fld(_wnd,,'PESEL');
ZCA.win_act(_wnd,0,'Formuła','Popraw'@@,,,
   "  exec('popprz_zcna','rap_zus',ZCA,'POPRAW')
   ",
   "  exec('poppo_zcna','rap_zus',ZCA)
   ",1
);
ZCA.win_act(_wnd,0,'Formuła','Po&miń'@@,,,"ZCA.del()",,,1);
ZCA.win_act(_wnd,0,'Szukaj');
ZCA.win_act(_wnd,0,'Formuła','Dalej'@@,,,"{? exec('zcna_dt_chk','rap_zus',ZCA) || sel_exit() || ~~ ?}",,,,,,
   'D',,'target=window'
);
ZCA.win_act(_wnd,0,'Formuła','Legenda'@@,,'Wyświetlenie okna legendy'@,"exec('legenda','color','ZUS_ZCA')",,,,,,
   'L',,'target=window'
);
ZCA.win_act(_wnd,0,'Rekord',,,,
   "  {? ZCA.REJ='1'
      || Color.fnd_kol('ZUS_ZCA#01#01')
      || Color.fnd_kol('ZUS_ZCA#01#02')
      ?}
   "
);
ZCA.win_act(_wnd,0,'Wyświetl',,,,"exec('popprz_zcna','rap_zus',ZCA,'WYSWIETL')");

ZCA.win_btn(_wnd,'text=%1,align=begin'['Popraw'@],'menu:P');
ZCA.win_btn(_wnd,'text=%1,align=begin'['Po&miń'@],'menu:M');
ZCA.win_btn(_wnd,'text=%1,panel=bottom'['Dalej'@],'menu:D');
ZCA.win_btn(_wnd,'text=%1,panel=bottom'['Anuluj'@],'key:Esc');
ZCA.win_sel(_wnd);

:: Zapis do bufora wybranych raportów  (tylko pracownicy "etatowi")
{? _b='P'
|| {? ZUS.RODZAJ=1
   || _filter:=exec('dostepne_p','schemat',_c,_b,'*');
      {? _filter.first()
      || PROGRESS.set(_filter.size(),'Trwa pobieranie danych do raportu ZCNA.'@);
         {!
         |? PROGRESS.next();
            {? P.seek(_filter.REF,,1)
            || exec('nowy_zcna','rap_zus',ZCA,ZUS.RODZAJ)
            ?};
            _filter.next()
         !};
         PROGRESS.close()
      ?}
   || _args:=exec('wybierz_args','pracownik');
      _args.DOMAIN:=_c;
      _args.F_ZATR:=_b;
      _filter:=exec('wybierz','pracownik',_args).P;
      {? _filter.first()
      || {!
         |? {? P.seek(_filter.SQL,,1)
            || exec('nowy_zcna','rap_zus',ZCA,ZUS.RODZAJ)
            ?};
            _filter.next()
         !}
      ?}
   ?};
   RD.clear();
   _rodz_dokum:={? ZUS.RODZAJ=1 || 'zgłoszeniowego' || 'wyrejestrowania' ?};
:: Porządkowanie zapisów według nazwiska i imienia ubezpieczonego
   ZCA.index(ZCA.ndx_tmp('Osoba',0,'NAZWISKO',,0,'PIERWSZE',,0));
   {!
   |? {? ZCA.select()
      || 0
      |? {? ZCA.size()
         || FUN.ask('Czy rezygnujesz z utworzenia dokumentu %1?'@[_rodz_dokum])
         || 1
         ?}
      || ZCA.erase();
         0
      || 1
      ?}
   !};
   ZCA.ndx_drop(ZCA.index('?'));
   ZUS_RAP.clear();
   _inTerm:=exec('interm','#system');
:: Własciwe generowanie raportów z zebranych danych
   {? ZCA.first()
   || ZCA.index(ZCA.ndx_tmp('Osoba',0,'OSOBA',,0));
      {? _out:=exec('otworz','rap_zus','ZUS ZCNA')
      || progress(,'Zapis danych do pliku ZUS ZCNA'@,'Proszę czekać'@,1);
         exec('xml_zcna_zapisz','rap_zus',ZCA,'zcna',_out);
         prgs_clr;
         fclose(_out);
         {? _inTerm
         || _pth:=exec('nazwa_pliku','rap_zus');
            _name:=ZUS.PLIK+'.xml';
            dlg_save(_pth,0,_name)
         ?};
         exec('info','rap_zus',3,'ZUS ZCNA')
      ?}
   || exec('info','rap_zus',2,'zcna')
   ?};

   VAR_DEL.delete('ZCA')
?};
ZUS_RAP.cntx_pop();
RD.cntx_pop;
OSOBA.cntx_pop()


\popprz_zcna
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Akcja popraw przed wyświetleniem okienka raportów.
::       Ustawia wartości pól zmiennej RAP_ZUS i udostepnia je do edycji
::   WE: _a - tabela bufora
::       _b - typ obsługiwanej akcji
::          'POPRAW' - [domyślnie]
::          'WYSWIETL'
::   WY:
::  OLD: \popprz/rap_zca.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_akcja:={? var_pres('_b')=type_of('') & (_b='POPRAW' | _b='WYSWIETL') || _b || 'POPRAW' ?};
RAP_ZUS.blank();
{? RD.seek(_a.REF,'_rodzina') & OSOBA.seek(RD.OSOBA)
|| _kod:="exec('kod_zus','nieobecnosc',_a,_b)";
   RAP_ZUS.REJ:={? +_a.REJ || _kod('J',_a.REJ) ?};
   RAP_ZUS.DATA:=_a.DATA;
   RAP_ZUS.TPID:={? +_a.TPID || _kod('I',_a.TPID) ?};
   RAP_ZUS.DOKNR:=_a.DOKNR;
   RAP_ZUS.ZN1:=_a.ZN1;
   RAP_ZUS.ZN2:=_a.ZN2;
   RAP_ZUS.STNP:={? +_a.STNP || _kod('N',_a.STNP) ?};
   RAP_ZUS.KOD:=_a.KOD;
   RAP_ZUS.MIASTO:=_a.MIASTO;
   RAP_ZUS.GMINA:=_a.GMINA;
   RAP_ZUS.ULICA:=_a.ULICA;
   RAP_ZUS.DOM:=_a.DOM;
   RAP_ZUS.LOKAL:=_a.LOKAL;
   RAP_ZUS.TEL:=_a.TEL;
   KRAJE.cntx_psh();
   KRAJE.prefix();
   _czypl:=KRAJE.find_tab(,'KODZUS',,'=','PL');
   RAP_ZUS.win_edit('ZCNA');
   RAP_ZUS.efld_opt('ZCNA','mark=1',,'DATA');
   {? RAP_ZUS.KRAJ=null() & _czypl || RAP_ZUS.KRAJ:=KRAJE.ref() ?};
   {? _akcja='POPRAW' || _ok:=RAP_ZUS.edit("__CHK.record(RAP_ZUS,,'DATA')") || RAP_ZUS.display() ?};
   KRAJE.cntx_pop()
?};
_ok


\poppo_zcna
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Akcja popraw po wyświetleniu okienka raportów.
::       Ustawia na podstawie wartości pól zmiennej RAP_ZUS informacje w buforze raportów i dokonuje zapisu.
::   WE: _a - tabela bufora
::   WY:
::  OLD: \poppo/rap_zca.fml
::----------------------------------------------------------------------------------------------------------------------
_a.REJ:=RAP_ZUS.REJ().KOD;
_a.DATA:=RAP_ZUS.DATA;
_a.TPID:=RAP_ZUS.TPID().KOD;
_a.DOKNR:=RAP_ZUS.DOKNR;
_a.ZN1:=RAP_ZUS.ZN1;
_a.ZN2:=RAP_ZUS.ZN2;
_a.STNP:=RAP_ZUS.STNP().KOD;
_a.KRAJ:=RAP_ZUS.KRAJ().KODZUS;
_a.KOD:=RAP_ZUS.KOD;
_a.MIASTO:=RAP_ZUS.MIASTO;
_a.GMINA:=RAP_ZUS.GMINA;
_a.ULICA:=RAP_ZUS.ULICA;
_a.DOM:=RAP_ZUS.DOM;
_a.LOKAL:=RAP_ZUS.LOKAL;
_a.TEL:=RAP_ZUS.TEL;
_a.put()


\nowy_zcna
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.00]
:: OPIS: Dodaje do bufora raportów nowy zapis
::   WE: _a - tabela bufora
::       _b - 1 Rejestracja, 2 - Wyrejestrowanie
::   WY:
::  OLD: \nowy/rap_zca.fml
::----------------------------------------------------------------------------------------------------------------------
_rodz:=_b;
P.OSOBA().NAZWISKO;
RD.prefix(OSOBA.ref());
{? RD.first()
|| {!
   |? {? ((RD.ZCZA='N' & (_rodz=1)) | (RD.ZCZA='T' & (_rodz=2))) & ~_a.find_key(#RD.ref())
      || _a.blank();
         _a.REF:=#RD.ref();
         _a.OSOBA:=#OSOBA.ref();
         _a.NAZWISKO:=RD.NA;
         _a.PIERWSZE:=RD.IM;
         _a.PESEL:=RD.PESEL;
         _a.REJ:={? RD.ZCZA='N' || '1' || '2' ?};
         _a.DATA:={? RD.ZCZA='N' || RD.UZOD || RD.UZDO ?};
         _a.TPID:=RD.TPID().KOD;
         _a.DOKNR:='';
         _a.ZN1:={? RD.WYLUTRZ='T' || 'X' || '' ?};
         _a.ZN2:={? RD.WSPGOSP='T' || 'X' || '' ?};
         _a.STNP:=RD.STNP().KOD;
         {? RD.ADRINNY='T'
         || _a.KRAJ:=RD.KRAJ().KODZUS;
            _a.KOD:=RD.KOD;
            _a.MIASTO:=RD.MIASTO;
            _a.GMINA:=RD.GMINA;
            _a.ULICA:=RD.ULICA;
            _a.DOM:=RD.DOM;
            _a.LOKAL:=RD.LOKAL;
            _a.TEL:=RD.TEL
         || KRAJE.cntx_psh();
            KRAJE.prefix();
            OS_ADRES.cntx_psh();
            OS_ADRES.index('RODZAJ');
            OS_ADRES.prefix(OSOBA.ref(),'S');
            {? OS_ADRES.last()
            || _a.KRAJ:=OS_ADRES.KRAJ().KODZUS
            ?};
            OS_ADRES.cntx_pop();
            KRAJE.cntx_pop()
         ?};
         _a.add()
      ?};
      RD.next()
   !}
?}


\xml_zcna_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Zapis właściwego raportu w formacie XML
::   WE: _a - identyfikator bufora raportu
::       _b - kod oznaczenia raportu ('zcna')
::       _c - uchwyt do pliku raportu
:: UWAGA: Dziedzina bufora musi być ograniczona do konkretnego ubezpieczonego
::   WY:
::  OLD: \xml_zapisz/rap_zca.fml
::----------------------------------------------------------------------------------------------------------------------
_bufor:=_a;
_file:=_c;
_id_dok:=1;

:: Funkcja zapisu do pliku
_save:=exec('to_file','rap_zus');

:: Konwersja znaków zastrzeżonych w XML
_cxml:=exec('cxml','rap_zus');
_cdxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";
_dataxml:=_cdxml({? var_pres('DATA',ZUS)=21 || ZUS.DATA || date() ?});

{? _file
|| exec(exec('xml_head_kedu_a','rap_zus'),'rap_zus',_file,_dataxml);
   _petla:=sql('select distinct OSOBA from :_a',_bufor);
   {? _petla.first()
   || {!
      |? _bufor.prefix(_petla.OSOBA);
         {? _bufor.first()
         || OSOBA.seek(_bufor.OSOBA,OSOBA.name());
            _save(_file,'<ZUSZCNA id_dokumentu="'+$_id_dok+'">');

::          II. Dane identyfikacyjne płatnika składek
            exec('xml_dane_platn','rap_zus',_file,'II');

::          III. Dane identyfikacyjne osoby ubezpieczonej
            exec('xml_dane_ubezp','rap_zus',_file,'III');

::           Uzupełnianie informacji o członkach rodziny
            _pozblok:=0;
            {!
            |? _next:=0;
               {? RD.seek(_bufor.REF,'_rodzina')
               || {? _bufor.REJ='1'
                  || RD.ZCZA:='T'
                  |? _bufor.REJ='2'
                  || RD.ZCZA:='N'
                  ?};
                  RD.put();
                  _pozblok+=1;
                  _next:=exec('xml_zcna_pozycja','rap_zus',_bufor,_file,_save,_cdxml,_cxml,_pozblok);
                  {? ZUS.GIODO='T' || exec('rap_zus','giodo',ZUS.DATA,~-_b) ?}
               ?};
               _next
            !};
::          VI. Oświadczenie płatnika składek
            _save(_file,'<VI>');
            _save(_file,'   <p1>'+_cdxml(ZUS.DATA)+'</p1>');
            _save(_file,'</VI>');
            _save(_file,'</ZUSZCNA>');
            _id_dok+=1
         ?};
         _petla.next()
      !}
   ?};
   _save(_file,'</KEDU>')
?};
1


\xml_zcna_pozycja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Zapisuje do pliku informacje o rodzinie ubezpieczonego zawarte w buforze raportu w formacie XML
::   WE: _a - identyfikator bufora raportu
::       _b - uchwyt pliku do zapisu
::       _c - funkcja zapisująca do pliku
::       _d - funkcja konwersji daty
::       _e - funkcja obróbki tekstu (_cxml)
::       _f - identyfikator bloku
:: UWAGA! Funkcja nie weryfikuje poprawności argumentów jak i struktury bufora
::   WY:
::  OLD: \xml_pozycja/rap_zca.fml
::----------------------------------------------------------------------------------------------------------------------
_bufor:=_a;
_file:=_b;
_save:=_c;
_cdxml:=_d;
_cxml:=_e;
_pozblok:=_f;

:: blok IV może się powtarzać i zawierać podbloki
_save(_file,'<IV id_bloku="'+$_pozblok+'">');
:: IV.A. Dane o członku rodziny osoby ubezpieczonej uprawnionym do świadczeń z ubezpieczenia zdrowotnego
_save(_file,'  <A>');
:: Zgłoszenie/wyrejestrowanie nowego członka rodziny
{? +(|_bufor.REJ) || _save(_file,'     <p1>'+_cxml(_bufor.REJ,1)+'</p1>') ?};
:: Data uzyskania / utraty uprawnień do ubezpieczenia zdrowotnego przez członka rodziny
{? _bufor.DATA~1 || _save(_file,'     <p2>'+_cdxml(_bufor.DATA)+'</p2>') ?};
{? +(|_bufor.PESEL) || _save(_file,'     <p3>'+_cxml(_bufor.PESEL,11)+'</p3>') ?};
:: Numer NIP - pole niewymagane, standardowo nie eksportowane
:: _save(_file,'     <p4>'+_cxml('',10,'- ')+'</p4>');

:: Jeżeli jest podany numer PESEL to pola p5 i p6 nie są zapisywane w bloku IV
:: Pola p5 i p6 powinny być jednocześnie podane jeżeli nie jest wypełnione pole PESEL
:: Dokument tozsamosci (rodzaj, seria i numer(
{? +(|_bufor.PESEL)=0 & +(|_bufor.TPID)
|| _save(_file,'     <p5>'+_cxml(~-_bufor.TPID,1)+'</p5>');
   _save(_file,'     <p6>'+_cxml(~-_bufor.DOKNR,9,'- ')+'</p6>')
?};
_save(_file,'     <p7>'+_cxml(~-_bufor.NAZWISKO,31)+'</p7>');
_save(_file,'     <p8>'+_cxml(~-_bufor.PIERWSZE,22)+'</p8>');
:: Data urodzenia
{? RD.DA~1 || _save(_file,'     <p9>'+_cdxml(RD.DA)+'</p9>') ?};
:: Stopień pokrewieństwa/powinowactwa
{? (_stpk:=RD.STPK().KOD; +(|_stpk)) || _save(_file,'     <p10>'+_cxml(_stpk,2)+'</p10>') ?};
:: Wspólne gospodarstwo domowe?
_save(_file,'     <p11>'+{? +(_bufor.ZN2) || 'true' || 'false' ?}+'</p11>');
:: Niepełnosprawność
{? +(|_bufor.STNP) || _save(_file,'     <p12>'+_cxml(_bufor.STNP,1)+'</p12>') ?};
_save(_file,'  </A>');

:: IV.B. Adres zamieszkania (wpisać, jeśli adres zamieszkania jest inny niż adres zamieszkania ubezpieczonego)
:: w wersji standardowej wypełniane, jeśli został podany brak weryfikacji czy adres jest zgodny z adresem ubezpieczonego
{? +(|_bufor.MIASTO) | +(|_bufor.DOM)
|| _save(_file,'  <B>');
:: Kod pocztowy - tylko jeśli Polska
   {? (+(|_bufor.KRAJ)=0 | (~-_bufor.KRAJ)='PL') & +(|_a.KOD)
   || _save(_file,'     <p1>'+_cxml(_a.KOD,5,'- ')+'</p1>')
   ?};
   {? +(|_bufor.MIASTO) || _save(_file,'     <p2>'+_cxml(~-_bufor.MIASTO,26)+'</p2>') ?};
   {? +(|_bufor.GMINA) || _save(_file,'     <p3>'+_cxml(~-_bufor.GMINA,26)+'</p3>') ?};
   {? +(|_bufor.ULICA) || _save(_file,'     <p4>'+_cxml(~-_bufor.ULICA,30)+'</p4>') ?};
   {? +(|_bufor.DOM) || _save(_file,'     <p5>'+_cxml(~-_bufor.DOM,7)+'</p5>') ?};
   {? +(|_bufor.LOKAL) || _save(_file,'     <p6>'+_cxml(~-_bufor.LOKAL,7)+'</p6>') ?};
   {? +(|_bufor.TEL) || _save(_file,'     <p7>'+_cxml(_bufor.TEL,12)+'</p7>') ?};
:: Symbol państwa – zagraniczny kod pocztowy
   {? +_bufor.KRAJ & (~-_bufor.KRAJ)<>'PL'
   || _save(_file,'     <p8>'+_cxml((_bufor.KRAJ+'-'+_a.KOD),12)+'</p8>')
   ?};
   _save(_file,'  </B>')
?};
_save(_file,'</IV>');
_bufor.next()


\rewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Wzorzec w polu REJ zmiennej RAP_ZUS
::   WE:
::   WY:
::  OLD: \rewy/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.KOD_DOK:='Y'; ''


\KDPOCZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Formuła po redagowaniu pola KOD zmiennej RAP_ZUS
::   WE:
::   WY:
::  OLD: \KDPOCZ/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(1,1)=RAP_ZUS & RAP_ZUS.KRAJ().SYM='PL' & +fld()<>6 & fld()<>'  -'
|| {? FUN.ask('Kod pocztowy jest prawdopodobnie niepoprawny. Zaakceptować mimo to?'@)
   || 1
   || 0
   ?}
|| 1
?}


\zus_zswa_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Tworzy deklaracje ZUS ZSWA - raport zgłoszeniowy
::   WE: _a - null
::       _b - Forma zatrudnienia
::       _c - kod dziedziny produktowej
::   WY:
::  OLD: \generuj/rap_zswa.fml
::  OLD: \korekta/rap_zswa.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__ZSWA');

:: przygotowanie tabel pomocniczych
__ZSWA:=exec('model_zswa','rap_zus');

_cleanup:=
   "  {! _ii:=1..obj_len(__ZSWA)
      |! {? type_of(__ZSWA[_ii])=type_of(SYSLOG) || obj_del(__ZSWA[_ii]) ?}
      !};
      VAR_DEL.delete('__ZSWA');
      ZUS_RAP.cntx_pop();
      P_INFO.cntx_pop()
   ";

P_INFO.cntx_psh();
P_INFO.index('OD');
ZUS_RAP.cntx_psh();
ZUS_RAP.index('ZUS_RAP');

{? _b='P'
|| _filter:=exec('dostepne_p','schemat',_c,_b,'*');
   {? _filter.first()
   || {!
      |? {? P.seek(_filter.REF,,1)
         || exec('wybierz_zswa','rap_zus',__ZSWA,0,{? ZUS.RODZAJ=1 || 'N' || 'T' ?},ZUS.ZUA)
         ?};
         _filter.next()
      !}
   ?}
?};

{? ~__ZSWA[1].first()
|| _cleanup();
   return()
?};
ZUS_RAP.clear();
exec('uzupelnij_zswa','rap_zus',__ZSWA,_b);
exec('normalizuj_zswa','rap_zus',__ZSWA);

_raport:='ZUS ZSWA';
_inTerm:=exec('interm','#system');
{? _out:=exec('otworz','rap_zus',_raport)
|| exec('czytaj','#stalesys',date(ZUS.ROK,12,0),KST);
   {? exec('xml_zswa_zapisz','rap_zus',__ZSWA,_out)
   || exec('info','rap_zus',3,_raport);
      exec('odnotuj_zswa','rap_zus',__ZSWA);
      {? _inTerm
      || _pth:=exec('nazwa_pliku','rap_zus');
         _name:=ZUS.PLIK+'.xml';
         dlg_save(_pth,0,_name)
      ?}
   || exec('info','rap_zus',2,_raport)
   ?};
   exec('stalesys','#stalesys');
   fclose(_out)
?};

_cleanup()


\model_zswa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Tworzy tablice pomocnicza
::   WE:
::   WY:
::  OLD: \model/rap_zswa.fml
::----------------------------------------------------------------------------------------------------------------------
_buf:=obj_new(10);
:: osoba
_buf[1]:=tab_tmp(1,'OSOBA','STRING[16]','OSOBA','KOR','STRING[1]','KOR','LIM','DATE','LIM' );
:: ubezpieczony
_buf[2]:=tab_tmp(1,
   'REF','STRING[16]','[1]',
   'OSOBA','STRING[16]','OSOBA',
   'OSREF','INTEGER','OSREF',
   'KOR','STRING[1]','KOR',
   'OD','DATE','OD',
   'DO','DATE','DO',
   'TTUB','STRING[4]','TTUB',
   'PREM','STRING[1]','PREM',
   'STNP','STRING[1]','STNP',
   'TPID','STRING[1]','TPID',
   'PACK','INTEGER','PACK',
   'TTUB_REF','INTEGER','TTUB (ref)',
   'PREM_REF','INTEGER','PREM (ref)',
   'STNP_REF','INTEGER','STNP (ref)',
   'NZPR_REF','INTEGER','NZPR (ref)',
   'TPID_REF','INTEGER','TPID (ref)');
:: zatrudnienie
_buf[3]:=tab_tmp(1,
   'REF','STRING[16]','[2]',
   'OSOBA','STRING[16]','OSOBA',
   'PREF','INTEGER','PREF',
   'SP','STRING[3]','SP',
   'OD','DATE','OD',
   'DO','DATE','DO',
   'WYL','INTEGER','WYL',
   'WYM','INTEGER','WYM',
   'PACK','INTEGER','PACK',
   'SP_REF','INTEGER','SP (ref)');
:: specjalne warunki
_buf[4]:=tab_tmp(1,'REF','STRING[16]','[2]','SP','STRING[3]','SP');
:: przerwa
_buf[5]:=tab_tmp(2, 'REF','STRING[16]','[3]','OD','DATE','OD','DO','DATE','DO');

_wnd:=_buf[1].mk_edit(,0);
_buf[1].win_efld(_wnd,,'KOR',,,2,,,'Korekta'@);
_buf[1].win_efld(_wnd,,'LIM',,,,,,'Data graniczna'@);
_buf[1].win_edit(_wnd);

_buf[6]:=_buf[3].index('?');
_buf[7]:=_buf[3].ndx_tmp(,,'PREF',,,'OD',,);
_buf[8]:=_buf[3].ndx_tmp(,,'REF',,,'SP',,,'OD',,,'DO',,);
_buf[9]:=_buf[3].ndx_tmp(,,'REF',,,'PACK',,,'OD',,);

_buf[4].index(_buf[4].ndx_tmp(,,'REF',,,'SP',,,'SP',,));

_buf[10]:=_buf[5].ndx_tmp(,,'REF',,,'OD',,);

_buf


\wybierz_zswa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Wybiera osobę do raportu
::   WE: _a - wskazanie na tablicę pomocniczą raportu
::       _b - tryb działania: 1 - dialog z użytkownikiem, 0 - tryb "cichy"
::       _c - korekta T / N - wymagany jesli _b=1
::       _d - ignoruj informację o istniejących deklaracjach - wymagany jeśli _b=1
::   WY:
::  OLD: \wybierz/rap_zswa.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_a[1].find_key($P.OSOBA)
|| _korekta:='N';
   {? {? _b
      || {? exec('powtorz_zswa','rap_zus') || _korekta:='T' ?};
         1
      || _powtorz:=exec('powtorz_zswa','rap_zus');
         _korekta:=_c;
         {? _c='T'
         || ~_powtorz
         || _d | ~_powtorz
         ?}
      ?}
   || exec('pobierz_zswa','rap_zus',_a,P.OSOBA,_korekta,_b)
   ?}
?}


\powtorz_zswa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Sprawdza, czy dla ubezpieczonego sa juz raporty
::   WE:
::   WY:
::  OLD: \powtorz/rap_zswa.fml
::----------------------------------------------------------------------------------------------------------------------
ZUS_RAP.prefix(P.OSOBA,'ZSWA');
{? ZUS_RAP.find_tab(0,'SZCZOD',,'>=',date(ZUS.ROK,1,1),'SZCZOD',,'<=',date(ZUS.ROK,12,0))
|| date(ZUS.ROK-(ZUS.ROK=2010),1,1)<=ZUS_RAP.DATA
?}


\pobierz_zswa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Uzupełnia informację o ubezpieczeniu osoby
::   WE: _a - wskazanie na tablicę pomocniczę raportu
::       _b - wskazanie na osobę
::       _c - korekta T/N
:: UWAGA: odpowiednie klucze porządkujace przeglądane tabele muszą być ustawione przed wywołaniem funkcji
::----------------------------------------------------------------------------------------------------------------------
_zd:=#0;
_od:=date(ZUS.ROK-(ZUS.ROK=2010),1,1);
_do:={? ZUS.DATAG<>_zd || ZUS.DATA || date(ZUS.ROK,12,0) ?};

_OSOBA:=_a[1]; 'osoba';
_UBEZP:=_a[2]; 'ubezpieczony';

_OSOBA.blank();
_OSOBA.OSOBA:=$_b;
_OSOBA.KOR:=_c;
{? ~_OSOBA.add()
|| return()
|? _d
|| _OSOBA.hdr_edit(P.OSOBA().NAZWISKO);
   {? _OSOBA.LIM=_zd & ZUS.DATAG<>_zd
   || _OSOBA.LIM:=ZUS.DATAG;
      _OSOBA.put()
   ?};
   {!
   |? {? _OSOBA.edit()
      || {? _OSOBA.KOR<>'T' & _OSOBA.KOR<>'N'
         || FUN.emsg('Poprawna wartość pola "Korekta" to T lub N.'@); 1
         |? _OSOBA.LIM<>_zd & _OSOBA.LIM~1<>ZUS.ROK
         || FUN.emsg('Data graniczna musi zawierać się w roku %1.'@[$ZUS.ROK]); 1
         || {? _OSOBA.LIM<>_zd || _do:=_OSOBA.LIM ?};
            _OSOBA.put();
            0
         ?}
      ?}
   !}
?};

_UBEZP.blank();
_UBEZP.REF:=$_OSOBA.ref();
_UBEZP.OSOBA:=$_b;
_UBEZP.OSREF:=_b;
:: ubezpieczenie
P_INFO.prefix(exec('ref_firma','ustawienia'),_b);
_loop:=P_INFO.find_le(_do);
_ttub:=_stnp:=_prem:=_tpid:='';
_ddo:=_do;
{!
|? _loop
|! _UBEZP.KOR:=_OSOBA.KOR;
   _UBEZP.OD:={? P_INFO.OD<_od || _od || P_INFO.OD ?};
   _UBEZP.DO:=_ddo;
   _UBEZP.TTUB:=P_INFO.TTUB().KOD;
   _UBEZP.PREM:=P_INFO.PREM().KOD;
   _UBEZP.STNP:=P_INFO.STNP().KOD;
   _UBEZP.TPID:=P_INFO.TPID().KOD;
   _UBEZP.TTUB_REF:=P_INFO.TTUB;
   _UBEZP.PREM_REF:=P_INFO.PREM;
   _UBEZP.STNP_REF:=P_INFO.STNP;
   _UBEZP.NZPR_REF:=P_INFO.NZPR;
   _UBEZP.TPID_REF:=P_INFO.TPID;
   {? _ttub=_UBEZP.TTUB & _stnp=_UBEZP.STNP & _prem=_UBEZP.PREM & _tpid=_UBEZP.TPID
   || _UBEZP.put()
   || _UBEZP.add()
   ?};
   _ddo:=P_INFO.OD-1;
   _loop:=(_od<_ddo & P_INFO.prev())
!}


\uzupelnij_zswa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Wypełnia tabelę bufora danymi o zatrudnieniu i przerwach w opłacaniu składek
::   WE: _a - wskazanie na tablicę pomocniczą raportu
::       _b - Forma zatrudnienia
::   WY:
::  OLD: \uzupelnij/rap_zswa.fml
::----------------------------------------------------------------------------------------------------------------------
_UBEZP:=_a[2]; 'ubezpieczony';
_ZATR:=_a[3]; 'zatrudnienie';
_SCP:=_a[4]; 'charakter';
_ONS:=_a[5]; 'przerwa';
_zd:=#0;

P.cntx_psh();
P.index('PRACOSOB');
H.cntx_psh();
H.index('_HISTKOD');
N.cntx_psh();
N.index('NIEOBECN');
P_INFO.cntx_psh();
P_INFO.index('OD');
:: zatrudnienie
_loop:=_UBEZP.first();
{!
|? _loop
|! _jest:=0;
   _od:=_UBEZP.OD;
   _do:=_UBEZP.DO;
   _ZATR.blank();
   _ZATR.REF:=$_UBEZP.ref();
   _ZATR.OSOBA:=_UBEZP.OSOBA;
   P.prefix(exec('ref_firma','ustawienia'),_b,_UBEZP.OSREF);
   _loop:=P.first();
   {!
   |? _loop
   |! _ZATR.PREF:=P.ref();
      {? _UBEZP.OD~1<=2009
      || _do:=date(2009,12,0);
         P_INFO.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
         _loop:=P_INFO.find_le(_do);
         {!
         |? _loop
         |! {? P_INFO.SZCZKOD
            || _start:={? P_INFO.SZCZOD=_zd | P_INFO.SZCZOD<_od || _od || P_INFO.SZCZOD ?};
               _stop:={? P_INFO.SZCZDO=_zd | _do<P_INFO.SZCZDO || _do || P_INFO.SZCZDO ?};
               _jest+=1;
               H.prefix(P.ref(),'Z');
               _loop:=(H.find_le(_stop) & (H.DO=_zd | _start<H.DO));
              _wyl:=_wym:=0;
               _sp:='';
               {!
               |? _loop
               |! _ZATR.SP:=P_INFO.SZCZKOD().KOD;
                  _ZATR.SP_REF:=P_INFO.SZCZKOD;
                  _ZATR.OD:={? H.OD<_start || _start || H.OD ?};
                  _ZATR.WYL:=H.RWYL;
                  _ZATR.WYM:=H.RWYM;
                  {? _wyl<>_ZATR.WYL | _wym=_ZATR.WYM | _sp<>_ZATR.SP
                  || _ZATR.DO:={? H.DO=_zd | _stop<H.DO || _stop || H.DO ?};
                     {? _ZATR.add() & ~_SCP.find_key(_ZATR.REF,_ZATR.SP,_ZATR.SP)
                     || _SCP.REF:=_ZATR.REF;
                        _SCP.SP:=_ZATR.SP;
                        _SCP.add()
                     ?}
                  || _ZATR.put()
                  ?};
                  _loop:=(H.prev() & _start<=H.DO)
               !}
            ?};
            _loop:=(_od<P_INFO.OD & P_INFO.prev())
         !}
      ?};
      _od:=_UBEZP.OD;
      _do:=_UBEZP.DO;
      {? _UBEZP.DO~1>=2010
      || {? _od<=date(2009,12,0)
         || _od:=date(2010,1,1)
         ?};
         H.prefix(P.ref(),'Z');
         _loop:=(H.find_le(_do) & (H.DO=_zd | _od<H.DO));
         _wyl:=_wym:=0;
         _sp:='';
         {!
         |? _loop
         |! {? -H.SP='t'
            || _jest+=1;
               _ZATR.SP:=H.ST().S_ZUS().KOD;
               _ZATR.SP_REF:=H.ST().S_ZUS;
               _ZATR.OD:={? H.OD<_od || _od || H.OD ?};
               _ZATR.WYL:=H.RWYL;
               _ZATR.WYM:=H.RWYM;
               {? _wyl<>_ZATR.WYL | _wym=_ZATR.WYM | _sp<>_ZATR.SP
               || _ZATR.DO:={? H.DO=_zd | _do<H.DO || _do || H.DO ?};
                  {? _ZATR.add() & ~_SCP.find_key(_ZATR.REF,_ZATR.SP,_ZATR.SP)
                  || _SCP.REF:=_ZATR.REF;
                     _SCP.SP:=_ZATR.SP;
                     _SCP.add()
                  ?}
               || _ZATR.put()
               ?}
            ?};
            _loop:=(H.prev() & _od<=H.DO)
         !}
      ?};
      _loop:=P.next()
   !};
   _loop:={? _jest || _UBEZP.next() || _UBEZP.del(,1)=2 ?}
!};

:: nieobecności
_rub:=','+__RUB.sys_sql(15)+',';
_loop:=_ZATR.first();
{!
|? _loop
|! _od:=_ZATR.OD;
   _do:=_ZATR.DO;
   _ONS.REF:=$_ZATR.ref();
   N.prefix('N',_ZATR.PREF);
   _loop:=(N.find_le(_do) & _od<=N.DO);
   {!
   |? _loop
   |! {? _rub*(','+$N.NB().RN+',')
      || _ONS.OD:={? N.OD<_od || _od || N.OD ?};
         _ONS.DO:={? _do<N.DO || _do || N.DO ?};
         _ONS.add()
      ?};
      _loop:=(N.prev() & _od<=N.DO)
   !};
   _loop:=_ZATR.next()
!};

P_INFO.cntx_pop();
P.cntx_pop();
H.cntx_pop();
N.cntx_pop()


\normalizuj_zswa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Dzieli, łączy okresy zatrudnienia
::   WE: _a - wskazanie na tablicę pomocniczą raportu
::   WY:
::  OLD: \normalizuj/rap_zswa.fml
::----------------------------------------------------------------------------------------------------------------------
_UBEZP:=_a[2]; 'ubezpieczony';
_ZATR:=_a[3]; 'zatrudnienie';
_SWP:=_a[4]; 'szegolne war.';
_ONS:=_a[5]; 'przerwa';
_zd:=#0;

:: przeglądaj zatrudnienie i "wytnij" okresy nieskładkowe, okresy nieskładkowe nie muszą być znormalizowane
_ZATR.index(_a[7]);
_ONS.index(_a[10]);
_loop:=_ZATR.first();
{!
|? _loop
|! _del:=0;
   _ONS.prefix($_ZATR.ref());
   _loop:=_ONS.first();
   {!
   |? _loop
   |! {? _ONS.OD=_ZATR.OD
      || {? _ONS.DO<_ZATR.DO
         || _ZATR.OD:=_ONS.DO+1;
            _ZATR.put()
         || _del:=1
         ?}
      |? _ONS.DO=_ZATR.DO
      || _ZATR.DO:=_ONS.OD-1;
         _ZATR.put()
      || _do:=_ZATR.DO;
         _ZATR.DO:=_ONS.OD-1;
         _ZATR.put();
         _ZATR.OD:=_ONS.DO+1;
         _ZATR.DO:=_do;
         _ZATR.add()
      ?};
      _loop:=_ONS.next()
   !};
   _loop:={? _del || _ZATR.del(,1)=2 || _ZATR.next() ?}
!};

:: pokrywające się okresy z rożnymi wymiarami przez podział sprowadzamy do przypadków prostych
_ZATR.index(_a[8]);
_loop:=_UBEZP.first();
{!
|? _loop
|! _SWP.prefix($_UBEZP.ref());
   _loop:=_SWP.first();
   {!
   |? _loop
   |! _ZATR.prefix(_SWP.REF,_SWP.SP);
      _loop:=_ZATR.first();
      {!
      |? _loop
      |! _od:=_ZATR.OD;
         _do:=_ZATR.DO;
         _br:=_ZATR.ref();
         _rev:=0;
         _ZATR.cntx_psh();
         _loop:=_ZATR.first();
         {!
         |? _loop
         |! {? _ZATR.ref()<>_br & (_ZATR.OD<>_od | _ZATR.DO<>_do) & (_ZATR.OD<=_do & _od<=_ZATR.DO)
            || _ood:=_ZATR.OD;
               _odo:=_ZATR.DO;
               {? _ZATR.OD<_od & _do<_ZATR.DO
               || _ZATR.DO:=_od-1;
                  _ZATR.put();
                  _ZATR.OD:=_od;
                  _ZATR.DO:=_do;
                  _ZATR.add();
                  _ZATR.OD:=_do+1;
                  _ZATR.DO:=_odo;
                  _ZATR.add();
                  _rev:=1
               |? _od<=_ZATR.OD & _ZATR.OD<=_do & _do<_ZATR.DO
               || _ZATR.DO:=_do;
                  _ZATR.put();
                  _ZATR.OD:=_do+1;
                  _ZATR.DO:=_odo;
                  _ZATR.add();
                  _rev:=1
               |? _ZATR.OD<_od & _od<=_ZATR.DO & _ZATR.DO<=_do
               || _ZATR.DO:=_od-1;
                  _ZATR.put();
                  _ZATR.OD:=_od;
                  _ZATR.DO:=_odo;
                  _ZATR.add();
                  _rev:=1
               ?}
            ?};
            _loop:={? ~_rev || _ZATR.next() ?}
         !};
         _ZATR.cntx_pop();
         _loop:={? _rev || _ZATR.first() || _ZATR.next() ?}
      !};
      _loop:=_SWP.next()
   !};
   _loop:=_UBEZP.next()
!};

:: przeglądaj ubezpieczonych i scalaj informacje o zatrudnieniu dla pokrywających się okresów sumuj wymiar zatrudnienia
:: w pierwszej kolejności obsługa okresów rozłącznych i ciągłych
_loop:=_UBEZP.first();
{!
|? _loop
|! _SWP.prefix($_UBEZP.ref());
   _loop:=_SWP.first();
   {!
   |? _loop
   |! _ZATR.prefix(_SWP.REF,_SWP.SP);
      _loop:=_ZATR.first();
      {!
      |? _od:=_ZATR.OD;
         _do:=_ZATR.DO;
         _wyl:=_ZATR.WYL;
         _wym:=_ZATR.WYM;
         _ZATR.next()
      |! {? _do+1=_ZATR.OD & _wyl=_ZATR.WYL & _wym=_ZATR.WYM
::        ciągłość okresów i zgodnoSC wymiaru
         || _do:=_ZATR.DO;
            {? _ZATR.del(,1)=2 || _ZATR.prev() ?};
            _ZATR.DO:=_do;
            _ZATR.put()
         |? _od=_ZATR.OD & _do=_ZATR.DO
::        okresy pokrywające się
         || _wyl:=_ZATR.WYL;
            _wym:=_ZATR.WYM;
            {? _ZATR.del(,1)=2
            || _ZATR.prev()
            ?};
            {? _ZATR.WYM=_wym
            || _ZATR.WYL+=_wyl
            || _ZATR.WYL:=_ZATR.WYL*_wym+_wyl*_ZATR.WYM;
               _ZATR.WYM*=_wym
            ?};
            {? _ZATR.WYL=_ZATR.WYM
            || _ZATR.WYL:=_ZATR.WYM:=1
            || {! _i:=_ZATR.WYL
               // (-1)..2
               |? _ZATR.WYL>1 & _ZATR.WYM>1
               |! {? _ZATR.WYL%*_i=0 & _ZATR.WYM%*_i=0
                  || _ZATR.WYL/=_i;
                     _ZATR.WYM/=_i
                  ?}
               !}
            ?};
            _ZATR.put()
         ?}
      !};
      _loop:=_SWP.next()
   !};
   _loop:=_UBEZP.next()
!};

_ZATR.index(_a[8]);
_loop:=_UBEZP.first();
{!
|? _loop
|! _ZATR.prefix($_UBEZP.ref());
   {? _ZATR.first()
   || _UBEZP.PACK:=((_ZATR.size()-1)%4)+1;
      _UBEZP.put();
      _cnt:=0;
      {!
      |? _ZATR.PACK:=(_cnt%4)+1;
         _ZATR.put();
         _cnt+=1;
         _ZATR.next()
      !}
   ?};
   _loop:=_UBEZP.next()
!}


\xml_zswa_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Zapisuje do pliku kompletny raport ZSWA
::   WE: _a - alias do tablicy pomocniczej
::       _b - uchwyt do pliku
::   WY:
::  OLD: \zapisz/rap_zswa.fml
::----------------------------------------------------------------------------------------------------------------------
:: zapis wiersza do pliku z konwersją kodowania
_to_file:="_line:=maz_utf8(_b); fwrite(_a,_line)";

:: konwersja znaków zastrzeżonych w XML. UWAGA: kolejność kownwersji ma znaczenie
_cxml:="
   _a:=STR.gsub(_a,'&','&amp;');
   _a:=STR.gsub(_a,'<','&gt;');
   _a:=STR.gsub(_a,'>','&lt;');
   _a:=STR.gsub(_a,'\\\'','&apos;');
   _a:=STR.gsub(_a,'\\\"','&quot;');
   _a";

:: dostosowanie daty do wymaganego w specyfikacji XML formatu (RRRR-MM-DD)
_dataxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";

_UBEZP:=sql('
   select
      :_a.REFERENCE REF,
      :_a.OSREF,
      :_a.KOR,
      OSOBA.PESEL,
      :_a.TPID,
      OSOBA.DOWOD,
      OSOBA.PASZPORT,
      OSOBA.NAZWISKO,
      OSOBA.PIERWSZE,
      OSOBA.UR_DATA,
      :_a.TTUB,
      :_a.PREM,
      :_a.STNP,
      :_a.PACK
   from
      :_a join
      OSOBA using (:_a.OSOBA,OSOBA.REFERENCE)',
   _a[2]);

:: czy są dane do zapisu?
{? ~_UBEZP.first() || return(0) ?};

::  nagłówek
exec(exec('xml_head_kedu_a','rap_zus'),'rap_zus',_b,_dataxml(ZUS.DATA));

_to_file(_b,'  <ZUSZSWA id_dokumentu="1">');
_to_file(_b,'     <I>');
: identyfikator deklaracji
_to_file(_b,'        <p1>');
_to_file(_b,'           <p1>'+(('000'+$ZUS.NUMER)+3)+'</p1>');
_to_file(_b,'           <p2>'+$ZUS.ROK+'</p2>');
_to_file(_b,'        </p1>');
_to_file(_b,'     </I>');

:: II. Dane identyfikacyjne płatnika składek
exec('xml_dane_platn','rap_zus',_b,'II');

: pozycje raportu
_pozblok:=0;
OSOBA.clear();
_ZATR:=_a[3];
_ZATR.index(_a[9]);
_loop:=_UBEZP.first();
{!
|? _loop
|! {! _pack:=1.._UBEZP.PACK
   |! _pozblok+=1;
      _to_file(_b,'     <III id_bloku="'+$_pozblok+'">');
:     dane identyfikacyjne
      _to_file(_b,'     <A>');
      _to_file(_b,'        <p1>'+{? _UBEZP.KOR='N' || 'true' || 'false' ?}+'</p1>');
      _to_file(_b,'        <p2>'+{? _UBEZP.KOR='T' || 'true' || 'false' ?}+'</p2>');
      {? +_UBEZP.PESEL || _to_file(_b,'        <p3>'+_UBEZP.PESEL+'</p3>') ?};
      {? +_UBEZP.TPID & (_UBEZP.TPID='1' | _UBEZP.TPID='2')
      || _dok:={? _UBEZP.TPID='1' || _UBEZP.DOWOD
               |? _UBEZP.TPID='2' || _UBEZP.PASZPORT
               || '0'
               ?};
         _cxml:=exec('cxml','rap_zus');
         _to_file(_b,'        <p5>'+_UBEZP.TPID+'</p5>');
         _to_file(_b,'        <p6>'+_cxml(_dok,9,'- ')+'</p6>')
      ?};
      _to_file(_b,'        <p7>'+(~-_UBEZP.NAZWISKO)+'</p7>');
      _to_file(_b,'        <p8>'+(~-_UBEZP.PIERWSZE)+'</p8>');
      _to_file(_b,'        <p9>'+_dataxml(_UBEZP.UR_DATA)+'</p9>');
      _to_file(_b,'     </A>');
      _to_file(_b,'     <B>');
      _to_file(_b,'        <p1>');
      _to_file(_b,'           <p1>'+_UBEZP.TTUB+'</p1>');
      _to_file(_b,'           <p2>'+_UBEZP.PREM+'</p2>');
      _to_file(_b,'           <p3>'+_UBEZP.STNP+'</p3>');
      _to_file(_b,'        </p1>');
:     zatrudnienie w szczególnych warunkach
      _ZATR.prefix(_UBEZP.REF,_pack);
      _loop:=_ZATR.first();
      _off:=0;
      {!
      |? _loop
      |! _to_file(_b,'        <p'+$(2+_off)+'>'+_ZATR.SP+'</p'+$(2+_off)+'>');
         _to_file(_b,'        <p'+$(3+_off)+'>'+_dataxml(_ZATR.OD)+'</p'+$(3+_off)+'>');
         _to_file(_b,'        <p'+$(4+_off)+'>'+_dataxml(_ZATR.DO)+'</p'+$(4+_off)+'>');
         _to_file(_b,'        <p'+$(5+_off)+'>');
         _to_file(_b,'           <p1>'+$_ZATR.WYL+'</p1>');
         _to_file(_b,'           <p2>'+$_ZATR.WYM+'</p2>');
         _to_file(_b,'        </p'+$(5+_off)+'>');
         _off+=4;
         _loop:=_ZATR.next()
      !};
      _to_file(_b,'     </B>');
      _to_file(_b,'     </III>')
   !};
   _loop:=_UBEZP.next()
!};

: oświadczenie i stopka
_to_file(_b,'     <VII>');
_to_file(_b,'        <p1>'+_dataxml(ZUS.DATA)+'</p1>');
_to_file(_b,'     </VII>');
_to_file(_b,'  </ZUSZSWA>');
_to_file(_b,'</KEDU>');

1


\odnotuj_zswa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Odnotowuje fakt utworzenia raportu i przekazania danych osobowych
::   WE: _a - wskazanie na tablicę pomocniczą raportu
::   WY:
::  OLD: \odnotuj/rap_zswa.fml
::----------------------------------------------------------------------------------------------------------------------
_UBEZP:=_a[2];
_ZATR:=_a[3];
_SWP:=_a[4];

OSOBA.cntx_psh();
OSOBA.clear();
S_ZUS.cntx_psh();
S_ZUS.clear();
ZUS_RAP.cntx_psh();
ZUS_RAP.clear();

_ZATR.index(_a[8]);
_loop:=_UBEZP.first();
{!
|? _loop
|! {? OSOBA.seek(_UBEZP.OSREF,)
   || ZUS_RAP.blank(1);
      ZUS_RAP.RAPORT:='ZSWA';
      ZUS_RAP.USER:=OPERATOR.USER;
      ZUS_RAP.DATA:=ZUS.DATA;
      ZUS_RAP.OSOBA:=OSOBA.ref();
      ZUS_RAP.TPID:={? S_ZUS.seek(_UBEZP.TPID_REF,) || S_ZUS.ref() ?};
      ZUS_RAP.TTUB:={? S_ZUS.seek(_UBEZP.TTUB_REF,) || S_ZUS.ref() ?};
      ZUS_RAP.PREM:={? S_ZUS.seek(_UBEZP.PREM_REF,) || S_ZUS.ref() ?};
      ZUS_RAP.STNP:={? S_ZUS.seek(_UBEZP.STNP_REF,) || S_ZUS.ref() ?};
      ZUS_RAP.NZPR:={? S_ZUS.seek(_UBEZP.NZPR_REF,) || S_ZUS.ref() ?};
      _SWP.prefix($_UBEZP.ref());
      _loop:=_SWP.first();
      _jest:=0;
      {!
      |? _loop
      |! _ZATR.prefix(_SWP.REF,_SWP.SP);
         _loop:=_ZATR.first();
         {!
         |? _loop
         |! ZUS_RAP.SZCZKOD:={? S_ZUS.seek(_ZATR.SP_REF,) || S_ZUS.ref() ?};
            ZUS_RAP.SZCZOD:=_ZATR.OD;
            ZUS_RAP.SZCZDO:=_ZATR.DO;
            _jest+=ZUS_RAP.add(1);
            _loop:=_ZATR.next()
         !};
         _loop:=_SWP.next()
      !};
      {? _jest & ZUS.GIODO='T' || exec('rap_zus','giodo',ZUS.DATA,'ZSWA') ?}
   ?};
   _loop:=_UBEZP.next()
!};

ZUS_RAP.cntx_pop();
S_ZUS.cntx_pop();
OSOBA.cntx_pop()


\zus_zza_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Tworzy deklarację ZUS ZZA - raport zgłoszenia do ubezpieczenia zdrowotnego
::   WE: _a - null
::       _b - forma zatrudnienia
::       _c - kod dziedziny produktowej
::   WY:
::  OLD: \generuj/rap_zza.fml
::----------------------------------------------------------------------------------------------------------------------
{? _b='Z'
|| _clear:="VAR_DEL.delete('ZZA')";
   _clear();
   P.cntx_psh();
   OSOBA.cntx_psh();
   OSOBA.prefix();
   ZUS_RAP.cntx_psh();
   ZUS_RAP.prefix();
   ZZA:=tab_tmp(1,
      'REF','INTEGER','Umowa/zlecenie',
      'PRZ','INTEGER','Zleceniobiorca',
      'DU','DATE','Data',
      'CEL','INTEGER','Zgłoszenie(1),Zmiana(2),Korekta(3)',
      'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
      'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
      'NU','STRING['+$MS.fld_len(ZC,'NU')+']','Nr umowy',
      'ZC_OD','DATE','Od dnia',
      'ZC_DO','DATE','Do dnia',
      'ZAW','STRING['+$MS.fld_len(ZAW,'KOD')+']','kod zawodu wykonywanego'
   );

   _filter:=exec('dostepne_p','schemat',_c,_b,'*');
   {? _filter.first()
   || {? ZUS.RODZAJ>0
      || ZC.cntx_psh();
         ZC.index('ZLECPRZ');
         {!
         |? {? P.seek(_filter.REF,,1)
            || zus.tab.T:=P.T;
               zus.tab.PREF:=#P.ref();
               zus.tab.NAZWISKO:=P.OSOBA().NAZWISKO;
               zus.tab.PIERWSZE:=P.OSOBA().PIERWSZE;
               zus.tab.WYDZIAL:=P.WYDZIAL().SYMBOL;
               zus.tab.CP:=P.CP().CP;
               zus.tab.ZA:=P.ZA;
::             1. wyszukujemy zleceniobiorców, dla których należy utworzyć raport
               _dalej:=0;
               ZC.prefix(P.ref());
               {? ZC.first()
               || {!
                  |? {? exec('get_ZC_INFO','zlec_rh',ZUS.DATA)
                     || _chk:=exec('chk_ubez','rap_zus','ZZA',1);
                        _rep:=exec('repeat_zua','rap_zus',1,0,_b);
                        _dalej:=_chk & _rep
                     ?};
                     ~_dalej & ZC.next()
                  !};
                  {? ZUS.ZUA | (~ZUS.ZUA & _dalej)
                  || zus.tab.ZN:={? _dalej || 'T' || 'N' ?};
                     zus.tab.ZUA:=_dalej;
                     zus.tab.add()
                  ?}
               ?}
            ?};
            _filter.next()
         !};
         zus.tab.fld_attr(,2);
         {? zus.tab.select()
         || PROGRESS.set(zus.tab.size(),'Trwa pobieranie danych do raportu ZZA.'@);
            {? zus.tab.first()
            || {!
               |? PROGRESS.next();
::             2. dla wybranych zleceniobiorców wyszukujemy umowy, które powinny znaleźć się w raporcie.
::                (jeżeli zaznaczono, że uwzględniać zlecenobiorców z raportem to wtedy pokazujemy wszystkie umowy)
                  {? zus.tab.ZN='T'
                  || {? P.seek(zus.tab.PREF,,1)
                     || P.OSOBA();
                        _zaw:=exec('zaw','rap_zus',1);
                        _err:='';
                        ZC.prefix(P.ref());
                        {? ZC.first()
                        || {!
                           |? ZC_INFO.prefix(ZC.ref());
                              {? ZC_INFO.first()
                              || {? exec('chk_ubez','rap_zus','ZZA',1) &
                                    (ZUS.ZUA | (~ZUS.ZUA & exec('repeat_zua','rap_zus',1,0,_b)))
                                 || exec('get_ZC_INFO','zlec_rh',ZUS.DATA);
                                    {? +_zaw | (4+|ZC_INFO.TTUB().KOD='2250')
                                    || ZZA.REF:=#ZC.ref();
                                       ZZA.CEL:=ZUS.RODZAJ;
                                       ZZA.DU:=ZC_INFO.DU;
                                       ZZA.NAZWISKO:=OSOBA.NAZWISKO;
                                       ZZA.PIERWSZE:=OSOBA.PIERWSZE;
                                       ZZA.NU:=ZC.NU;
                                       ZZA.ZC_OD:=ZC.DU;
                                       ZZA.ZC_DO:=ZC.DW;
                                       ZZA.ZAW:=_zaw;
                                       ZZA.add()
                                    |? ~+_err
                                    || OSOBA.cntx_psh();
                                       OSOBA.prefix();
                                       _err:='Brak lub niewłaściwa długość kodu zawodu wykonywanego:\n%1 %2\n'
                                             'Export danych wszystkich umów współpracownika nie jest możliwy.'@
                                             [P.OSOBA().NAZWISKO,OSOBA.PIERWSZE];
                                       OSOBA.cntx_pop()
                                    ?}
                                 ?}
                              ?};
                              ZC.next()
                           !}
                        ?};
                        {? +_err
                        || FUN.emsg(_err)
                        ?}
                     ?}
                  ?};
                  zus.tab.next()
               !}
            ?};
            PROGRESS.close()
         ?};
         ZC.cntx_pop()
      ?};

       _wnd:=ZZA.mk_sel('Raporty ZZA'@,'N',0,'201405201352',,,,,'U');
      ZZA.win_fld(_wnd,,'NAZWISKO',,,,,,'Nazwisko'@,,'Aktualne nazwisko'@);
      ZZA.win_fld(_wnd,,'PIERWSZE',,,,,,'Imię'@,,'Pierwsze imię'@);
      ZZA.win_fld(_wnd,,'NU',,,,,,'Nr umowy'@);
      ZZA.win_fld(_wnd,,'ZC_OD',,,,,,'Od dnia'@);
      ZZA.win_fld(_wnd,,'ZC_DO',,,,,,'Do dnia'@);
      ZZA.win_act(_wnd,0,'Formuła','Pomiń'@@,,,"ZZA.del()",,,1);
      ZZA.win_act(_wnd,,'Formuła','Dalej'@@,,,"sel_exit()",,,,,,,,'target=window');
      ZZA.win_act(_wnd,0,'Szukaj');
      ZZA.win_btn(_wnd,'text=%1,icon=xwin16.png:22,btn_label_align=right,panel=bottom'['Dalej'@],'menu:D');
      ZZA.win_sel(_wnd);
      ZZA.win_edit('');
      ZZA.index(ZZA.ndx_tmp('Osoba',0,'NAZWISKO',,0,'PIERWSZE',,0));
      ZZA.prefix();
      ZZA.fld_attr(,2);
      {? ZZA.first()
      || {? ~ZZA.select(,1,10)
         || {? FUN.ask('Czy kontynuować działanie eksportu ZZA?'@)=0
            || P.cntx_pop();
               OSOBA.cntx_pop();
               ZUS_RAP.cntx_pop();
               _clear();
               return(0)
            ?}
         ?}
      ?}
   || FUN.emsg('Brak uprawnień do przeglądania współpracowników.'@)
   ?};

   ZUS_RAP.clear();
   _inTerm:=exec('interm','#system');
   {? ZZA.first()
   || progress(,'Zapis danych do pliku ZUS ZZA'@,'Proszę czekać'@,1);
      ZC.cntx_psh();
      ZC.clear();
      {? _out:=exec('otworz','rap_zus','ZUS ZZA')
      || exec('xml_zza_zapisz','rap_zus',ZZA,_out);
         prgs_clr();
         fclose(_out);
         {? _inTerm
         || _pth:=exec('nazwa_pliku','rap_zus');
            _name:=ZUS.PLIK+'.xml';
            dlg_save(_pth,0,_name)
         ?};
         exec('info','rap_zus',3,'ZUS ZZA')
      ?};
      prgs_clr();
      ZC.cntx_pop()
   || exec('info','rap_zus',2,'ZUS ZZA')
   ?};
   ZUS_RAP.cntx_pop();
   OSOBA.cntx_pop();
   P.cntx_pop();
   _clear()
?};
~~


\xml_zza_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [12.20]
:: OPIS: Formuła zapisująca kompletne raporty ZZA do plików w formacie XML
::   WE: _a - identyfikator bufora raportu
::       _b - uchwyt do pliku raportu
::   WY:
::  OLD: \xml_zapisz/rap_zza.fml
::----------------------------------------------------------------------------------------------------------------------
_bufor:=_a;
_file:=_b;

:: Funkcja zapisu do pliku
_save:=exec('to_file','rap_zus');
:: Konwersja znaków zastrzezonych w XML
_cxml:=exec('cxml','rap_zus');
_cdxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";
_dataxml:=_cdxml({? var_pres('DATA',ZUS)=21 || ZUS.DATA || date() ?});

{? ZUS.GIODO='T' || exec('rap_zus','giodo',ZUS.DATA,'ZZA') ?};

{? _file
||
:: Nagłówek dokumentu
   exec(exec('xml_head_kedu_a','rap_zus'),'rap_zus',_file,_dataxml);
   _id_dok:=1;
   {!
   |? {? ZC.seek(_bufor.REF,'zlec') & OSOBA.seek(ZC.OSOBA)
      || exec('get_ZC_INFO','zlec_rh',_bufor.DU);
         _save(_file,'<ZUSZZA id_dokumentu="'+$_id_dok+'">');

::      I. Dane organizacyjne
         _save(_file,'<I>');
::      Czy zgłoszeniowe
         _save(_file,'   <p1>'+{? _bufor.CEL=1 || 'true' || 'false' ?}+'</p1>');
::      Zmiana danych / korekta
         {? _bufor.CEL<>1 || _save(_file,'   <p2>'+{? _bufor.CEL=2 || '1' || '2' ?}+'</p2>') ?};
         _save(_file,'</I>');

::       II. Dane identyfikacyjne płatnika składek
         exec('xml_dane_platn','rap_zus',_file,'II');

::       III. Dane identyfikacyjne osoby zgłaszanej do ubezpieczeń
         exec('xml_dane_ubezp','rap_zus',_file,'III');

::       IV. Dane ewidencyjne osoby zgłaszanej do ubezpieczeń
         _save(_file,'<IV>');
         {? +(|OSOBA.DRUGIE) || _save(_file,'   <p1>'+_cxml(~-OSOBA.DRUGIE,22)+'</p1>') ?};
         {? +(|OSOBA.RODOWE) || _save(_file,'   <p2>'+_cxml(~-OSOBA.RODOWE,31)+'</p2>') ?};
         {? +(|OSOBA.OBYWATEL) || _save(_file,'   <p3>'+_cxml(~-OSOBA.OBYWATEL)+'</p3>') ?};
         {? +(|OSOBA.PLEC) || _save(_file,'   <p4>'+form(~-OSOBA.PLEC)+'</p4>') ?};
         _save(_file,'</IV>');

         P_INFO.index('OD');
         P_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         _p_info:={? ~P_INFO.find_le(ZUS.DATA) || P_INFO.first() || 1 ?};

         ZUS_RAP.blank();
         ZUS_RAP.OSOBA:=OSOBA.ref();
         ZUS_RAP.RAPORT:='ZZA';
         ZUS_RAP.ZC:=ZC.ref();
         ZUS_RAP.ZC_TTUB:=ZC_INFO.TTUB;
         ZUS_RAP.ZC_PREM:=ZC_INFO.PREM;
         ZUS_RAP.ZC_STNP:=ZC_INFO.STNP;
         ZUS_RAP.SKLADKI:='Emeryt. i rent.:'+ZC_INFO.ZUS+';Chor.:'+ZC_INFO.FC+';Wyp.:'+ZC_INFO.FW+';Pracy:'+ZC_INFO.FP+
                          ';Gwar.:'+ZC_INFO.FG+';Ochr. zdr.:'+ZC_INFO.KC;
         ZUS_RAP.DCH:={? ZC_INFO.WN_FC='T' || ZC_INFO.DU || #0 ?};
         ZUS_RAP.DATA:=ZUS.DATA;
         ZUS_RAP.USER:=OPERATOR.USER;
         ZUS_RAP.add();

::       V. Tytul ubezpieczenia
         _save(_file,'<V>');
         _save(_file,'  <p1>');
         exec('xml_KodTytUbezp','rap_zus',
              ((4+(|ZC_INFO.TTUB().KOD))+(1+(|ZC_INFO.PREM().KOD))+(1+(|ZC_INFO.STNP().KOD))),_file,2);
         _save(_file,'  </p1>');
::       Kod wykonywanego zawodu
         _save(_file,'  <p2>'+_bufor.ZAW+'</p2>');
         _save(_file,'</V>');

::       VI. Dane o obowiązkowym ubezpieczeniu zdrowotnym
         _save(_file,'<VI>');
::       Data powstania obowiązku ubezpieczenia
         _save(_file,'  <p1>'+_cdxml(ZC_INFO.DU)+'</p1>');
::       Kod oddziału NFZ
         {? _p_info || _save(_file,'  <p2>'+_cxml(P_INFO.KC().SYMBOL)+'</p2>') ?};
         _save(_file,'</VI>');


::       VII. Dane o dobrowolnym ubezpieczeniu zdrowotnym - w standardzie sekcja nieobsługiwana
::       _save(_file,'<VII>');
::       _save(_file,'  <p1><p1>');                   'Data powstania obowiązku ubezpieczenia';
::       _save(_file,'  <p2><p2>');                   'Kod oddziału NFZ';
::       _save(_file,'</VII>');

::       VIII. Adres zameldowania na stałe miejsce pobytu
         exec('xml_adres_ubezp','rap_zus',_file,'VIII','S');

::       IX. Adres zamieszkania (jeśli inny niż zameldownaia)
         exec('xml_adres_ubezp','rap_zus',_file,'IX','C');

::       X. Adres do korespondencji (jeśli inny niż oba poprzednie)
         exec('xml_adres_ubezp','rap_zus',_file,'X','K');

::       XIV. Oświadczenie płatnika składek
         _save(_file,'<XI>');
         _save(_file,'   <p1>'+_dataxml+'</p1>');
         _save(_file,'</XI>');

::       Zakończenie dokumentu
         _save(_file,'</ZUSZZA>');
         _id_dok+=1
      ?};
      _bufor.next()
   !};
:: Zakończenie pliku
    _save(_file,'</KEDU>')
?}


\oZus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Deklaruje obiekt wykorzystywany do pracy z raportami ZUS
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('zus');

zus:=obj_new('tab','wer','red','wyb','wybw','hist','pomin','popraw','rekord','ndx');
zus.tab:=tab_tmp(3,
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
   'WYDZIAL','STRING[16]','Jednostka organizacyjna',
   'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']','PESEL',
   'T','STRING['+$MS.fld_len(P,'T')+']','Nr teczki',
   'CP','STRING['+$MS.fld_len(CP,'CP')+']','Charakter pracy',
   'ZA','STRING[1]','Zatrudniony',
   'ZUA','INTEGER','Ubezpieczony',
   'TTUB','STRING[6]','Tytuł ubezpieczenia',
   'EMD','DATE','Data wyrejestrowania',
   'EMK','STRING[4]','Przyczyna wyrejestrowania',
   'EMT','STRING[1]','E',
   'PRZ','INTEGER','Zleceniobiorca',
   'ZN','STRING[1]','Zaznaczony',
   'PREF','INTEGER','Pracownik',
   'ZCREF','INTEGER','Umowa',
   'NU','STRING[20]','Numer umowy',
   'DZA','DATE','Data zawarcia',
   'DOD','DATE','Data rozpoczęcia',
   'DDO','DATE','Data zakończenia',
   'DO','DATE','Data rozwiązania stosunku pracy',
   'USPKOD','STRING[3]','Kod rozwiązania/wygaśnięcia stosunku pracy',
   'USPPPRAK','STRING[3]','Kod podstawy prawnej ustania stosunku pracy/służbowego',
   'USPPPRAT','STRING[70]','Podstawa prawna ustania stosunku pracy/służbowego',
   'USPSTR','STRING[1]','Strona inicjująca rozwiązanie stosunku pracy',
   'ZUS','STRING[1]','Składka na ubezpieczenia emerytalne i rentowe',
   'FC','STRING[1]','Składka na ubezpieczenie chorobowe',
   'FW','STRING[1]','Składka na ubezpieczenie wypadkowe',
   'KC','STRING[1]','Składka na ubezpieczenie zdrowotne',
   'FP','STRING[1]','Składka na Fundusz Pracy',
   'ODDBZ','STRING[1]','Oddelegowany bez ZUS'
);

zus.ndx:=zus.tab.ndx_tmp(,1,'ZN',,);
~~


\zus_folder_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla dialog umożliwiający wskazanie katalogu raportów.
::   WE:
::   WY:
:: ~OST: INFILECHOOSER
::----------------------------------------------------------------------------------------------------------------------
_old:=ZUS.FOLDER;
{? exec('interm','#system')
|| return(_old)
?};
_new:=exec('filechooser','#file','Wybór katalogu'@,0,,,,'DIRECTORIES_ONLY',,ZUS.FOLDER);

{? _new=''
|| _old
|| _new
?}


\ZUS_OSW
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Informacja czy zostało złożone oświadczenie ZUS OSW.
::   WE:
::   WY: 1/0 - Informacja czy zostało złożone oświadczenie ZUS OSW.
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',date(),KST,'ZUSOSW');
#KST.ZUSOSW


\RPA_dane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Zebranie danych do ZUS RPA z list płac i innych kartotek, w których data wypłaty nastąpiła w innymm roku.
::   WE: _a [TABLE] - Tabela do zapisania danych do raportu ZUS.
::       _b [DATE] - Początek raportowanego okresu.
::       _c [DATE] - Koniec raportowanego okresu.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_RPA:=_a;
_od:=_b;
_do:=_c;

_ndx_o:=_RPA.ndx_tmp(,1,'OSOBA',,);
_ndx_t:=_RPA.ndx_tmp(,1,'OSOBA',,,'TTUB',,,'RODZ',,,'RWYP',,,'RNAL',,,'RWYL',,,'RWYM',,);
_ndx_r:=_RPA.ndx_tmp(,1,'RODZ',,,'OSOBA',,,'TTUB',,,'RWYP',,,'RNAL',,);
_RPA.index(_ndx_t);

_TAB:=exec('tabela_rpa','rap_zus');
_TAB.index(_TAB.ndx_tmp(,1,'OSOBA',,,'TTUB',,,'RODZ',,,'RWYP',,,'RNAL',,,'RWYL',,,'RWYM',,));

_d0:=date(0,0,0);
_rok:=O.RU;
_mc:=O.MU;
_firma:=exec('ref_firma','ustawienia');
_kodttub:='0110,0111,0120,0125,0126,0411,0417,0426,0428,0430,0431,3000,5000';
_skl:=obj_new('per','pcw','ner','inn');
_skl.per:=__RUB.sys_sql(511);
_skl.pcw:=__RUB.sys_sql(541);
_skl.ner:=__RUB.sys_sql(10051);
_skl.inn:=__RUB.sys_sql(10052);

:: Usunięcie danych z pomocniczej tabeli rejestrującej ubezpieczeniowych jeśli raport z identyfikatorem 01
{? 2+ZUS.SYMBOL='01'
|| exec('ZUS_RAP_del','rap_zus',_od)
?};

OSOBA.cntx_psh();
P.cntx_psh();
O.cntx_psh();
O.index('LISTYPLU');
LS.cntx_psh();
R.cntx_psh();
R.index('RUBKOD');
G.cntx_psh();
N.cntx_psh();
N.prefix();
PREM_OKR.cntx_psh();
PREM_OKR.prefix();

O.prefix(_firma,'P',_rok,_mc);
{? O.first()
|| {!
   |? {? ~('S,Z'*O.F)
      || LS.use(O.LT);
         LS.index('NAZWRUBR');

:: Podstawy składek emerytalnych i rentowych oraz wypadkowej z list z przesuniętą wypłatą na kolejny rok.
         {? O.R<>_rok
         ||
:: Z przesuniętą wypłatą na kolejny rok.
:: Podstawa składek emerytalnych i rentowych z przychodu za poprzedni rok.
            exec('kwota2raportu','rap_zus',_skl.per,_RPA,'E',_rok,O.R);
:: Podstawa składki wypadkowej z przychodu za poprzedni rok.
            exec('kwota2raportu','rap_zus',_skl.pcw,_RPA,'W',_rok,O.R);
:: Kwoty przychodu wypłaconego w innym roku wynikające z premii okresowych rozliczonych w innym roku.
            exec('premia_okresowa','rap_zus',_RPA,_firma);
:: Kwoty przychodu wypłaconego w innym roku wynikające z rozliczenia przepracowanych godzin w innym roku.
            exec('godziny','rap_zus',_RPA,_firma)
         ||
:: Kwoty przychodu wypłaconego w innym roku wynikające z rozliczenia przepracowanych godzin w innym roku.
            exec('godziny','rap_zus',_RPA,_firma);

:: Kwoty przychodu wypłaconego w innym roku wynikające z korekt nieobecności rozliczonych w innym roku.
            {? var_pres('_NIEOB')>100 || obj_del(_NIEOB) ?};
            _NIEOB:=sql('
               select N.REFERENCE REF
               from N
               where (N.LT=\':_a\' or N.O=\':_c\') and extract(YEAR from N.DO)<>:_b',
               ~O.LT,_rok,$O.ref()
            );
:: Tabela pomocnicza z nieobecnościami rozliczonymi na dane liscie - jednocześnie nieobecność pochodzi z poprzednich lat
:: Do tabeli trafiają wszystkie nieobecności nie tylko urlopy
            {? _NIEOB.first()
            || {? var_pres('_NKOR')>100 || obj_del(_NKOR) ?};
:: Zakładana jest tabela z informacją o korygowanej nieobecności.
:: Obsługa sytuacji, w której jedną nieobecność koryguje więcej niż jedna nieobecność.
:: Wartość nieobecności urlopowej korygowanej musi zostać odjęta jeden raz.
               _NKOR:=tab_tmp(1,'N_KOR','INTEGER','Skorygowany');
               _atrybut:=
                  "  __RUB.sys_attr(N.NB,113,N.OD) | __RUB.sys_attr(N.NB,131,N.OD)  ";
               {!
               |? N.prefix();
                  {? N.seek(_NIEOB.REF)
                  ||
:: Urlop zwyczajnie rozliczony z przesunięciem pobierany w całości na plus.
                     {? N.RODZAJ='Z' & N.WART & _atrybut()
                     || exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'E',_rok,N.DO~1,,,N.WART);
                        exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'W',_rok,N.DO~1,,,N.WART)
:: Dla nieobecności korygowanej, w miesiącu rozliczenia pierwotnego tej nieobecności (wykonanie raportu korygującego)
:: Sumowane są ewentualne informacje z nieobecności urlopowych korygujących tą nieobecność w następnym okresie.
:: Wartości nieobecności Korygowanej nie będą uwzględnione - korekta=wyzerowanie
                     |? N.RODZAJ='R' & N.LT=~O.LT
                     || N.index('NIEOTREE');
                        N.prefix(#N.ref());
                        {? N.first()
                        || {!
                           |? {? N.WART & _atrybut()
                              || exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'E',_rok,N.DO~1,,,N.WART);
                                 exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'W',_rok,N.DO~1,,,N.WART)
                              ?};
                              N.next()
                           !}
                        ?}
:: Jeżeli napotkano nieobecność, która koryguje wcześniejszy okres.
                     |? N.RODZAJ='K' & _atrybut()
                     || _n_kor:=N.N_KOR;
                        N.cntx_psh();
                        {? N.seek(N.N_KOR,) & 2+(1-N.LT)<$_rok+2
                        ||
:: Jeżeli znaleziono nieobecność korygowaną rozliczoną uprzednio w poprzednim roku to wartość tej nieobecności jest
:: uwzględniona na minus. Tworzona jest suma bez przeniesień z następnych okresów, gdyż nie ma możliwości wykonania
:: raportu korygującego RPA w poprzednim roku.
:: Aby uniknąc sytuacji podwojenia, dane o nieobecności korygowanej są odpisywane w tabeli i odjęcie wartości może być
:: wykonane tylko jeden raz dla jednej (pierwszej korekty)
                           {? ~_NKOR.find_key(_n_kor)
                           || {? _atrybut() & N.WART
                              || exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'E',_rok,N.DO~1,,,-N.WART);
                                 exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'W',_rok,N.DO~1,,,-N.WART)
                              ?};
:: Dla nieobecności niepłatnej skorygowanej na danej liście płac należy uznać wartość oddawanego potrącenia
                              {? __RUB.sys_attr(N.NB,132,N.OD)
                              || _Potr:=N.POTR1+N.POTR2+N.POTR3+N.POTR4;
                                 N.index('NIEOTREE');
                                 N.prefix(#N.ref());
                                 {? N.first()
                                 || {!
                                    |? {? ~_atrybut()
                                       || _Potr-=(N.POTR1+N.POTR2+N.POTR3+N.POTR4)
                                       ?};
                                       N.next
                                    !}
                                 ?};
                                 {? _Potr>0
                                 || exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'E',_rok,N.DO~1,,,_Potr);
                                    exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'W',_rok,N.DO~1,,,_Potr)
                                 ?}
                              ?};
                              _NKOR.blank();
                              _NKOR.N_KOR:=_n_kor;
                              _NKOR.add()
                           ?};
                           N.cntx_pop();
:: Przywracany jest kontekst tabeli i nieobecności korygujące są uwzględniane naturalnie - jako korekty wykonane
:: w następnych miesiącach. Korekt dokonujemy zawsze w miesiącu rozliczenia nieobecności korygowanej.
                           exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'E',_rok,N.DO~1,,,N.WART);
                           exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'W',_rok,N.DO~1,,,N.WART)
                        || N.cntx_pop()
                        ?}
:: Jeżeli znaleziono nieobecność wycofaną w badanym miesiącu to w sytuacji gdy wycofana nieobecność była rozliczona
:: w poprzednim roku zostaje uwzględniona wartość na minus w celu zsumowania prawidłowych wartości za dany miesiąc.
:: Jeżeli wycofana nieobecność została rozliczona w nowym roku i wycofana to wartości pochodzące z tej nieobecności nie
:: będą uwzględnione ani w miesiącu rozliczenia ani w miesiącu wycofania
                     |? N.RODZAJ='W' & 2+(1-N.LT)<$_rok+2
                     || {? _atrybut() & N.WART
                        || exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'E',_rok,N.DO~1,,,-N.WART);
                           exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'W',_rok,N.DO~1,,,-N.WART)
                        ?};
:: Dla nieobecności wycofanej niepłatnej na danej liście płac należy uznać wartość oddawanego potrącenia
                        {? __RUB.sys_attr(N.NB,132,N.OD)
                        || _Potr:=N.POTR1+N.POTR2+N.POTR3+N.POTR4;
                           {? _Potr
                           || exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'E',_rok,N.DO~1,,,_Potr);
                              exec('zapis_pozycji_raportu','rap_zus',_RPA,$N.P().OSOBA,'W',_rok,N.DO~1,,,_Potr)
                           ?}
                        ?}
                     ?}
                  ?};
                  _NIEOB.next()
               !}
            ?};

:: Kwoty przychodu wypłaconego w innym roku wynikające z premii okresowych rozliczonych w innym roku.
            exec('premia_okresowa','rap_zus',_RPA,_firma);

:: Kwoty przychodu wypłaconego w innym roku wynikające ze składniów płacowych których nie można wskazać w inny sposób
:: np "trzynastka"
            {? +_skl.inn
            || exec('kwota2raportu','rap_zus',_skl.inn,_RPA,'E',_rok,_rok-1);
               exec('kwota2raportu','rap_zus',_skl.inn,_RPA,'W',_rok,_rok-1)
            ?}
         ?};

:: Kwoty przychodu wyłaczonego z podstawy ubezpieczeń emerytalnych i rentowych
:: np część dodatku stażowego, która jest wypłacana za okres niezdolności do pracy.
         {? +_skl.ner
         || exec('kwota2raportu','rap_zus',_skl.ner,_RPA,'I',_rok,O.R)
         ?}
      ?};
      O.next()
   !}
?};

:: Praca nauczycielska, ale tylko jeżeli zostały zmienione definicje i tylko w przypadku pracowników.
F_ZATR.cntx_psh();
F_ZATR.index('KOD');
F_ZATR.prefix('T','P');

_select:='H.P, P.OSOBA, H.OD, H.DO, H.RWYL, H.RWYM';
_from:='H join STN using (H.ST,STN.REFERENCE) join P using (H.P,P.REFERENCE)';
_where:='P.FIRMA=:_a and (H.DO is null or H.DO>=to_date(:_b)) and H.OD<=to_date(:_c) and STN.N=\'T\'';
_where+=' and P.F_ZATR=\':_d\'';

:: Tabela z okresami pracy nauczycielskiej zatrudnionych pracowników.
_PN:=sql('select %1 from %2 where %3'[_select,_from,_where],_firma,_od,_do,$F_ZATR.ref());

{? _PN.first()
|| P.cntx_psh();
   P.prefix();
   N.cntx_psh();
   N.index('NIEOBECN');

:: Tabela z przerwami w pracy nauczycielskiej.
   _NB:=tab_tmp(2,
      'OSOBA','STRING[16]','Osoba',
      'OD','DATE','Data od',
      'DO','DATE','Data do'
   );

   {!
   |? {? P.seek(_PN.P,)
      || _hod:={? _PN.OD<_od || _od || _PN.OD ?};
         _hdo:={? (_PN.DO=_d0 | _PN.DO>_do) || _do || _PN.DO ?};
         _NB.erase();

:: Nieobecności w kartotece nieobecności z pominięciem urlopu wypoczynkowego.
         N.prefix('N',P.ref());
         {? N.find_le(_hdo) & N.DO>=_hod
         || {!
            |? {? ~__RUB.sys_attr(N.NB,111,N.OD)
               || _NB.OSOBA:=_PN.OSOBA;
                  _NB.OD:={? N.OD<_hod || _hod || N.OD ?};
                  _NB.DO:={? N.DO>_hdo || _hdo || N.DO ?};
                  _NB.add()
               ?};
               N.prev() & N.DO>=_hod
            !}
         ?};

:: Zapisanie okresów pracy nauczycielskiej.
         {? _PN.RWYL & _PN.RWYM
         || {? _NB.first()
            || _nod:=_ndo:=_hod;
               {!
               |? {? _NB.OD<>_nod
                  || _ndo:=_NB.OD-1;
                     exec('zapis_pozycji_raportu','rap_zus',
                        _RPA,_PN.OSOBA,'N',_rok,_rok,(_PN.RWYL/_PN.RWYM$2)*100,100,,_nod,_ndo,1
                     )
                  ?};
                  _nod:=_NB.DO+1;
                  {? ~_NB.next()
                  || {? _ndo<_hdo & _nod<=_hdo
                     || exec('zapis_pozycji_raportu','rap_zus',
                           _RPA,_PN.OSOBA,'N',_rok,_rok,(_PN.RWYL/_PN.RWYM$2)*100,100,,_nod,_hdo,1
                        )
                     ?};
                     0
                  || 1
                  ?}
               !}
            || exec('zapis_pozycji_raportu','rap_zus',
                  _RPA,_PN.OSOBA,'N',_rok,_rok,(_PN.RWYL/_PN.RWYM$2)*100,100,,_hod,_hdo,1
               )
            ?}
         ?}
      ?};
      _PN.next()
   !};
   N.cntx_pop();
   P.cntx_pop()
?};
F_ZATR.cntx_pop();

:: Ustalenie tytułu ubezpieczenia pracowników.
_RPA.index(_ndx_o);
exec('ttub','rap_zus',_RPA,'P',_rok,_mc,_kodttub);

:: Umowy cywilnoprawne jeżeli data początku i końca okresu jest wypełniona, a rok z tych dat jest różny
:: lub jeżeli data początku lub końca okresu ma wartość pustą a rok z daty wystawienia i daty wypłaty jest różny.
_RPA.index(_ndx_t);
RH.cntx_psh();
RH.prefix();
RH.f_clear();
RH.f_set('O',
   'join ZC join OSOBA',
   'RH.FIRMA=:_a and RH.DWY>=to_date(:_b) and RH.DWY<=to_date(:_c)'+
   ' and ((RH.O_OD is null and(extract(YEAR from RH.DWY)>extract(YEAR from RH.DRA)))'+
   ' or (RH.O_OD is not null and (extract(YEAR from RH.O_OD)<extract(YEAR from RH.DWY))))',
   _firma,_od,_do
);
{? RH.f_first()
|| _nag_lis:='';
   {!
   |? {? RH.O().LT<>_nag_lis
      || LS.use(O.LT);
         LS.index('ZLEC');
         _nag_lis:=O.LT
      ?};
      _wsp:=1;
      _wrok:=RH.DWY~1;
      _nrok:=
         {? RH.O_OD<>_d0
         || {? RH.O_OD~1<RH.O_DO~1
            || _wsp:=((date(RH.O_OD~1,12,0)-RH.O_OD)+1)/((RH.O_DO-RH.O_OD)+1)
            ?};
            RH.O_OD~1
         || RH.DRA~1
         ?};

:: Ustalenie tytułu ubezpieczenia zleceniobiorcy.
      {? _kodttub*RH.ZC_INFO().TTUB().KOD
      || _ttub:=exec('rhttub','lista_plac',RH.ZLE().OSOBA,RH.DWY,RH.ZC_INFO().TTUB().KOD,ZC_INFO.DW);
         {? +_ttub
         || _ttub+=ZC_INFO.PREM().KOD+ZC_INFO.STNP().KOD
         ?};

::: Podstawa składek emerytalnych i rentowych z przychodu za poprzedni rok.
         exec('kwota2raportu','rap_zus',_skl.per,_TAB,'E',_wrok,_nrok,_ttub,_wsp);
::: Podstawa składki wypadkowej z przychodu za poprzedni rok.
         exec('kwota2raportu','rap_zus',_skl.pcw,_TAB,'W',_wrok,_nrok,_ttub,_wsp);
::: Kwoty przychodu wyłączonego z podstawy ubezpieczeń emerytalnych i rentowych.
         {? +_skl.ner
         || exec('kwota2raportu','rap_zus',_skl.ner,_RPA,'I',_wrok,_nrok,_ttub)
         ?}
      ?};
      RH.f_next()
   !};

:: Zapisanie do raportu RPA podstawy składek emertytalnych i rentowych oraz składki wypadkowej z umów cywilnoprawnych.
   {? _TAB.first()
   || {!
      |? {? _TAB.KW>0
         || exec('zapis_pozycji_raportu','rap_zus',
               _RPA,_TAB.OSOBA,_TAB.RODZ,_TAB.RWYP,_TAB.RNAL,,,_TAB.KW,,,,_TAB.TTUB
            )
         ?};
         _TAB.next()
      !}
   ?}
?};
RH.f_clear();

:: Ustalenie tytułu ubezpieczenia zleceniobiorców.
_RPA.index(_ndx_o);
exec('ttub','rap_zus',_RPA,'Z',_rok,_mc);
_RPA.index(_ndx_r);
:: Uwzglednienie korekt składek z umów i o pracę.
_KOR:=exec('zus_rca_kor','rap_zus',_rok,_mc);
_KOR.index(_KOR.ndx_tmp(,1,'OSOBA',,,'RN',,));
_kor:=_KOR.first();

:: Ograniczenie wypłaconych wynagrodzeń do wysokości podstawy składek społecznych i zapisanie do tabeli,
:: z której będzie generowany raport.
_OSOBA:=sql('select distinct :_a.OSOBA, :_a.TTUB from :_a',_RPA);
{? _OSOBA.first()
|| KU.cntx_psh();
   KU.index('KARTAUB');
   KORN_Z.cntx_psh();
   KORN_Z.index('ROKMC');
   KORN_Z.prefix(_rok,_mc);
   KOR_Z.cntx_psh();
   KOR_Z.index('KORN_Z');

   {!
   |? {? OSOBA.seek(_OSOBA.OSOBA)
      || _per:=_pcw:=0;
         {? '01,30'*(2+_OSOBA.TTUB)
         || KU.prefix(_firma,OSOBA.ref(),_rok,_mc);
            {? KU.first()
            || _per:=KU.S1;
               _pcw:=KU.S10;

:: Uwzględnienie zmiany podstawy składek z umów o pracę.
               {? _kor
               || _KOR.prefix(_OSOBA.OSOBA);
                  {? _KOR.find_key(765) | _KOR.find_key(766)
                  || _per+=_KOR.POD
                  ?}
               || 0
               ?}
            ?}
         ?};

:: Uwzględnienie podstawy składek emertalnych i rentowych i podstawy składki wypadkowej z umów cywilnoprawnych.
         _TAB.prefix(_OSOBA.OSOBA,_OSOBA.TTUB);
         {? _TAB.first()
         || {!
            |? {? _TAB.RODZ='E'
               || _per+=_TAB.KW
               || _pcw+=_TAB.KW
               ?};
               _TAB.next()
            !}
         ?};

:: Uwzględnienie zmiany podstawy składek z umów cywilnoprawnych.
         {? KORN_Z.find_key(OSOBA.ref())
         || KOR_Z.prefix(KORN_Z.ref());
            {? KOR_Z.find_key(__RUB.ref[753])
            || _per+=KOR_Z.KW
            ?};
            {? KOR_Z.find_key(__RUB.ref[754])
            || _pcw+=KOR_Z.KW
            ?}
         ?};

         _RPA.prefix('W',_OSOBA.OSOBA,_OSOBA.TTUB);
         {? _RPA.first()
         || {!
            |? _next:=_kw:=0;
               _osoba:=_RPA.OSOBA;
               _ttub:=_RPA.TTUB;
               _rwyp:=_RPA.RWYP;
               _rnal:=_RPA.RNAL;

               _RPA.cntx_psh();
               _RPA.prefix('E',_osoba,_ttub,_rwyp,_rnal);
               {? _RPA.first()
               || {? _RPA.KW>0
                  || {? _RPA.KW<_per
                     || _kw:=_RPA.KW;
                        _per-=_RPA.KW
                     || _kw:=_per;
                        _RPA.KW:=_kw;
                        {? _RPA.KW>0
                        || _RPA.put()
                        || _RPA.del()
                        ?};
                        _per:=0
                     ?}
                  || _per:=0;
                     _RPA.del()
                  ?}
               ?};
               _RPA.cntx_pop();

               {? _RPA.KW-_kw>0
               || {? _RPA.KW-_kw<=_pcw
                  || _RPA.KW:=_RPA.KW-_kw;
                     _pcw-=_RPA.KW;
                     _RPA.put();
                     _next:=_RPA.next()
                  || _pcw:=0;
                     _next:=_RPA.del(1,1)=2
                  ?}
               || _pcw-=_kw;
                  _next:=_RPA.del(1,1)=2
               ?};
               _next
            !}
         ?}
      ?};
      _OSOBA.next()
   !};

   KOR_Z.cntx_pop();
   KORN_Z.cntx_pop();
   KU.cntx_pop()
?};

:: Usunięcie zapisów z kwotami ujemnymi w przychodach nie wchodzących do podstawy składek emerytalnych i rentowych.
_RPA.prefix('I');
{? _RPA.first()
|| {!
   |? {? _RPA.KW>0
      || _next:=_RPA.next()
      || _next:=_RPA.del(1,1)=2
      ?};
      _next
   !}
?};
_RPA.index(_ndx_t);
_RPA.prefix();

RH.cntx_pop();
PREM_OKR.cntx_pop();
N.cntx_pop();
G.cntx_pop();
R.cntx_pop();
LS.cntx_pop();
O.cntx_pop();
FUNKCJE.OTWOLIST();
P.cntx_pop();
OSOBA.cntx_pop();
obj_del(_skl);
_KOR.ndx_drop();
obj_del(_KOR);
_TAB.ndx_drop();
obj_del(_TAB);
~~


\premia_okresowa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Podział premii okresowych na lata, za które należał się przychód wynikający z wypłaty tej premii.
::   WE: _a [TABLE] - Tabela do zapisania przychodu za lata inne niż bieżący rok.
::       _b [REFERENCE] - Wskazanie na firmę
::   WY:
::  OLD: \prem_okr/rap_rpa.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_firma:=_b;
_rok:={? O.RU<>O.R || O.R || O.RU ?};

PREM_OKR.f_clear();
PREM_OKR.f_set(,
   'join P',
   'P.FIRMA=:_a and PREM_OKR.RP<>\'S\' and PREM_OKR.LT=\':_b\' and extract(YEAR from PREM_OKR.O_OD)<>:_c',
   _firma,~O.LT,_rok
);

{? PREM_OKR.f_first()
|| P.cntx_psh();
   P.prefix();
   {!
   |? {? PREM_OKR.KW_W
      || _kwota:=0;
         _llat:=(PREM_OKR.O_DO~1)-(PREM_OKR.O_OD~1)+1;
         _premia:=obj_new(_llat);
         _rokn:=obj_new(_llat);

         {? PREM_OKR.O_OD~1=PREM_OKR.O_DO~1
         || _premia[_llat]:=PREM_OKR.KW_W;
            _rokn[_llat]:=PREM_OKR.O_DO~1;
            _kwota:=_premia[_llat]
         || {? P.seek(PREM_OKR.P)
            || _okr:=(PREM_OKR.O_DO-PREM_OKR.O_OD)+1;
               _od:=PREM_OKR.O_OD;
               _do:=date(PREM_OKR.O_OD~1,12,0);
               _cz:=(_do-_od)+1;

:: Składniki okresowe są dzielone na lata, proporcjonalnie wg liczby dni kalendarzowych.
               {! _ii:=1 .. _llat
               |! _rokn[_ii]:=_od~1;
                  {? _ii=_llat
                  || _premia[_ii]:=PREM_OKR.KW_W-_kwota
                  || _premia[_ii]:=PREM_OKR.KW_W*(_cz/_okr)$2;
                     _od:=date((PREM_OKR.O_OD~1)+_ii,1,1);
                     _do:=
                        {? (PREM_OKR.O_OD~1)+_ii=PREM_OKR.O_DO~1
                        || PREM_OKR.O_DO
                        || date((PREM_OKR.O_OD~1)+_ii,12,0)
                        ?};
                     _cz:=(_do-_od)+1
                  ?};
                  _kwota+=_premia[_ii]
               !}
            ?}
         ?};

:: Zapisanie kwot premii okresowej zgodnie z rokiem, za który została wypłacona
         {! _ii:=1 .. _llat
         |! {? _premia[_ii]>0 & O.RU<>_rokn[_ii]
            || exec('zapis_pozycji_raportu','rap_zus',_TAB,$PREM_OKR.P().OSOBA,'E',O.RU,_rokn[_ii],,,_premia[_ii]);
               exec('zapis_pozycji_raportu','rap_zus',_TAB,$PREM_OKR.P().OSOBA,'W',O.RU,_rokn[_ii],,,_premia[_ii])
            ?}
         !};

:: Aktualizacja kwoty premii w roku, w którym została uwzględniona na liście płac jeżeli rok wypłaty jest inny.
         {? O.RU<>O.R & _kwota>0
         || _kwota*=-1;
            exec('zapis_pozycji_raportu','rap_zus',_TAB,$PREM_OKR.P().OSOBA,'E',O.RU,O.R,,,_kwota);
            exec('zapis_pozycji_raportu','rap_zus',_TAB,$PREM_OKR.P().OSOBA,'W',O.RU,O.R,,,_kwota)
         ?};

         obj_del(_premia);
         obj_del(_rokn)
      ?};
      PREM_OKR.f_next()
   !};
   P.cntx_pop()
?};
PREM_OKR.f_clear();
~~


\godziny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Kwoty przychodu wypłaconego w innym roku wynikające z rozliczenia przepracowanych godzin w innym roku.
::   WE: _a [TABLE] - Tabela do zapisania przychodu za lata inne niż bieżący rok.
::       _b [REFERENCE] - Wskazanie na firmę
::   WY:
::  OLD: \godziny/rap_rpa.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_firma:=_b;
_rok:={? O.RU<>O.R || O.R || O.RU ?};
_kwota:=0;

G.use('godz'+$_rok);
G.prefix();
G.f_clear();
G.f_set(,,'G.FIRMA=:_a and (G.R=\'G\' or G.R=\'A\') and G.LT=\':_b\' and G.D<to_date(:_c)',_firma,~O.LT,date(_rok,1,1));

{? G.f_first()
|| {!
   |? {? G.WAR
      || exec('zapis_pozycji_raportu','rap_zus',_TAB,$G.P().OSOBA,'E',O.RU,G.D~1,,,G.WAR);
         exec('zapis_pozycji_raportu','rap_zus',_TAB,$G.P().OSOBA,'W',O.RU,G.D~1,,,G.WAR);
         _kwota+=G.WAR
      ?};

:: Aktualizacja kwoty za godziny w roku, w którym została uwzględniona na liście płac jeżeli rok wypłaty jest inny.
      {? O.RU<>O.R & _kwota>0
      || _kwota*=-1;
         exec('zapis_pozycji_raportu','rap_zus',_TAB,$G.P().OSOBA,'E',O.RU,O.R,,,_kwota);
         exec('zapis_pozycji_raportu','rap_zus',_TAB,$G.P().OSOBA,'W',O.RU,O.R,,,_kwota)
      ?};
      G.f_next()
   !}
?};

G.f_clear();
~~


\blokIIIA
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Dane identyfikacyjne ubezpieczonego w bloku III.A. raportu ZUS RPA.
::   WE: _a - Identyfikator bufora raportu.
::       _b - Uchwyt pliku do zapisu.
::       _c [INTEGER] - Numer kolejnego bloku raportu.
::       _d - Funkcja zapisu wiersza do pliku z konwersja kodowania.
::   WY: Numer kolejnego bloku raportu.
::  OLD: \blokIIIA/rap_rpa.fml
::----------------------------------------------------------------------------------------------------------------------
_pozblok:=_c+1;
_to_file:=_d;

_to_file(_b,'<III id_bloku="'+$_pozblok+'">');
_to_file(_b,'  <A>');
exec('xml_2dane_ubezp','rap_zus',_a,_b,2);
_to_file(_b,'      <p5>');
exec('xml_KodTytUbezp','rap_zus',_a,_b,3);
_to_file(_b,'      </p5>');
_to_file(_b,'  </A>');
_pozblok


\ZUS_RAP_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wprowadzenie informacji o wygenerowanym raporcie dla ubezpieczonego.
::   WE: _a - ref OSOBA
::       _b - typ raportu
::       _c - Data na pierwszy dzien miesiąca
::       _d - tytuł ubezpieczenia
::       _e - rodzaj identyfikatora
::       _f - identyfikator
::   WY: 1 - dodano zapis, 0 - nie został dodany
::  OLD: \ZUS_RAP_add/rap_rpa.fml
::----------------------------------------------------------------------------------------------------------------------
_ttub:=_d;
_p1:=('0000'+(4+_ttub))+4;
_p2:=('0'+(1+(4-_ttub)))+1;
_p3:=('0'+(5-_ttub))+1;

S_ZUS.cntx_psh();
S_ZUS.index('S_ZUS');
ZUS_RAP.cntx_psh();
ZUS_RAP.index('ZUS_RAP');
ZUS_RAP.prefix(_a,_b,_c);
{? ~ZUS_RAP.first()
|| ZUS_RAP.blank();
   ZUS_RAP.OSOBA:=_a;
   ZUS_RAP.RAPORT:=_b;
   ZUS_RAP.DATA:=_c;
   ZUS_RAP.USER:=OPERATOR.USER;
   ZUS_RAP.SKLADKI:=_f;
   S_ZUS.prefix('I',_e,);
   {? S_ZUS.first() || ZUS_RAP.TPID:=S_ZUS.ref() ?};
   S_ZUS.prefix('P',_p1,);
   {? S_ZUS.first() || ZUS_RAP.TTUB:=S_ZUS.ref() ?};
   S_ZUS.prefix('E',_p2,);
   {? S_ZUS.first() || ZUS_RAP.PREM:=S_ZUS.ref() ?};
   S_ZUS.prefix('N',_p3,);
   {? S_ZUS.first() || ZUS_RAP.STNP:=S_ZUS.ref() ?};
   _wynik:=ZUS_RAP.add(1)
|| _wynik:=0
?};
S_ZUS.cntx_pop();
ZUS_RAP.cntx_pop();
_wynik


\ZUS_RAP_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wykasowanie wszystkich danych dla raportu RPA jesli jest to raport z identyfikatorem 01
::   WE: _a - data
::   WY:
::  OLD: \ZUS_RAP_del/rap_rpa.fml
::----------------------------------------------------------------------------------------------------------------------
ZUS_RAP.clear();
ZUS_RAP.f_clear();
ZUS_RAP.f_set(,,
   'ZUS_RAP.RAPORT=\'RPA\' and ZUS_RAP.DATA=to_date(:_a)',
   _a
);
{? ZUS_RAP.f_first()
|| {!
   |? ZUS_RAP.del();
      ZUS_RAP.f_next()
   !}
?};
ZUS_RAP.f_clear()


\ZUS_RAP_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Ubezppieczeni z zerowymi informacjami - potrzeba wygenerowania raportu zerowego
::   WE: _a - tabela tymczasowa z danymi do raportu
::       _b - Data na pierwszy dzien miesiąca
::   WY: _tab - tabela z danymi do raportu zerowego
::  OLD: \ZUS_RAP_tab/rap_rpa.fml
::----------------------------------------------------------------------------------------------------------------------
_ZUS_RAP:=sql('
   select ZUS_RAP.OSOBA, TTUB.KOD TTUB, PREM.KOD PREM, STNP.KOD STNP, TPID.KOD TPID, ZUS_RAP.SKLADKI NRID
   from ZUS_RAP join
      S_ZUS TTUB using(ZUS_RAP.TTUB, TTUB.REFERENCE) join
      S_ZUS PREM using(ZUS_RAP.PREM, PREM.REFERENCE) join
      S_ZUS TPID using(ZUS_RAP.TPID, TPID.REFERENCE) join
      S_ZUS STNP using(ZUS_RAP.STNP, STNP.REFERENCE)
   where ZUS_RAP.DATA=to_date(:_a) and ZUS_RAP.RAPORT=\'RPA\'',_b);
_tab:=sql('select * from :_a where 1=2 order by OSOBA,TTUB',_a);
_RPA:=_a;
_ndx_t:=_RPA.ndx_tmp(,1,'OSOBA',,,'TTUB',,);
_RPA.index(_ndx_t);
{? _ZUS_RAP.first()
|| {!
   |? {? ~_RPA.find_key(_ZUS_RAP.OSOBA,_ZUS_RAP.TTUB+_ZUS_RAP.PREM+_ZUS_RAP.STNP)
      || _tab.blank();
         _tab.OSOBA:=_ZUS_RAP.OSOBA;
         _tab.TTUB:=_ZUS_RAP.TTUB+_ZUS_RAP.PREM+_ZUS_RAP.STNP;
         _tab.TPID:=_ZUS_RAP.TPID;
         _tab.NRID:=_ZUS_RAP.NRID;
         _tab.add(1)
      ?};
      _ZUS_RAP.next()
   !}
?};
_tab


\dane_z_lp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Zebranie danych z list płac, w których data wypłaty jest przesunięta na kolejny miesiąc.
::   WE: _a [TABLE] - Tabela do zapisania danych do raportu ZUS.
::       _b [DATE] - Początek raportowanego okresu.
::       _c [DATE] - Koniec raportowanego okresu.
::       _d [STRING] - Sybmol raportu.
::       [_e] - Wskazanie osoby,dla której należy przygotować raport, jeżeli brak to bez ograniczenia osób.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_osoba:={? var_pres('_e')=type_of('') & +_e=16 || _e || '' ?};
_start:=(_b~1)*12+(_b~2);
_stop:=(_c~1)*12+(_c~2);
_firma:=exec('ref_firma','ustawienia');

OSOBA.cntx_psh();
P.cntx_psh();
O.cntx_psh();
O.index('LISTYPLU');
LS.cntx_psh();
R.cntx_psh();
R.index('RUBKOD');

:: Kwoty z list płac.
{! _ii:=_start.._stop
|! _rok:=_ii%12;
   _mc:=_ii%*12;
   {? ~_mc
   || _rok-=1;
      _mc:=12
   ?};
   O.prefix(_firma,'P',_rok,_mc);
   {? O.first()
   || {!
      |? {? O.T().F<>'S' &  O.T().F<>'Z'
         || LS.use(O.LT);
            LS.index('NAZWRUBR');
            {? O.R<>_rok
            ||
:: Z przesuniętą wypłatą na kolejny rok.
:: Podstawa składek emerytalnych i rentowych z przychodu za poprzedni rok.
               exec('kwota2raportu','rap_zus',__RUB.sys_sql(511),_TAB,'E',_rok,O.R,_osoba);
:: Podstawa składki wypadkowej z przychodu za poprzedni rok.
               exec('kwota2raportu','rap_zus',__RUB.sys_sql(541),_TAB,'W',_rok,O.R,_osoba)
            ?};
:: Kwoty przychodu wyłaczonego z podstawy ubezpieczeń emerytalnych i rentowych.
            exec('kwota2raportu','rap_zus',__RUB.sys_sql(10051),_TAB,'I',_rok,O.R,_osoba)
         ?};
         O.next()
      !}
   ?}
!};

O.index('FFZLT');
O.prefix(_firma,'P');
:: Wynagrodzenia za przepracowane godziny nie uwzględnione w danych z list płac.
_start:=_b~1;
_stop:=_c~1;

:: W raporcie ZUS RPA musimy zebrać kwoty z dokładnością do miesiąca wypłaty, w raporcie ZUS RIA wystarczy w roku.
_mc:=_b~2;
_where:=
   {? _d='RIA'
   || ' and P.OSOBA=\':_d\''
   || ''
   ?};
G.cntx_psh();
{! _rok:=_start.._stop
|! G.use('godz'+$_rok);
   G.prefix();
   G.f_clear();
   G.f_set(,
      'join P',
      'G.FIRMA=:_a and G.R=\'G\' and G.D<to_date(:_b)'+_where,
      _firma,date(_rok,1,1),,_osoba
   );

   {? G.f_first()
   || {!
      |? {? {? _d='RPA'
            || O.find_key(~G.LT) & O.RU=_rok & O.MU=_mc
            || 1
            ?}
         || exec('zapis_pozycji_raportu','rap_zus',_TAB,$G.P().OSOBA,'E',_rok,G.D~1,G.WAR);
            exec('zapis_pozycji_raportu','rap_zus',_TAB,$G.P().OSOBA,'W',_rok,G.D~1,G.WAR)
         ?};
         G.f_next()
      !}
   ?};
   G.f_clear()
!};
G.cntx_pop();

:: Korekty nieobecności
N.cntx_psh();
N.prefix();
N.f_clear();
N.f_set(,
   'join P',
   'N.FIRMA=:_a',
   _firma
);
N.f_clear();
N.cntx_pop();

:: Składniki okresowe za poprzedni rok wypłacone w kolejnym.
_start:=#(($(_b~1))+2);
_stop:=#(($(_c~1))+2);
PREM_OKR.cntx_psh();
PREM_OKR.prefix();
PREM_OKR.f_clear();
PREM_OKR.f_set(
   'P(FIRMA)',,
   '"1P".FIRMA=:_a and PREM_OKR.RP<>\'I\' and (substr(PREM_OKR.LT,2,2)+0>=:_b and substr(PREM_OKR.LT,2,2)+0<=:_c) and'+
   ' substr(PREM_OKR.LT,2,2)<>substr(to_string(extract(YEAR from PREM_OKR.O_DO)),3,2)'+_where,
   _firma,_start,_stop,_osoba
);

{? PREM_OKR.f_first()
|| {!
   |? {? {? _d='RPA'
         || O.find_key(~PREM_OKR.LT) & O.RU=_rok & O.MU=_mc
         || 1
         ?}
      || exec('zapis_pozycji_raportu','rap_zus',_TAB,$PREM_OKR.P().OSOBA,'E',O.RU,PREM_OKR.O_DO~1,PREM_OKR.KW_W);
         exec('zapis_pozycji_raportu','rap_zus',_TAB,$PREM_OKR.P().OSOBA,'W',O.RU,PREM_OKR.O_DO~1,PREM_OKR.KW_W)
      ?};
      PREM_OKR.f_next()
   !}
?};
PREM_OKR.f_clear();
PREM_OKR.cntx_pop();

:: Umowy cywilnoprawne.
_where:=
   {? _d='RIA'
   || ' and ZC.OSOBA=\':_d\''
   || ''
   ?};
RH.cntx_psh();
RH.prefix();
RH.f_clear();
RH.f_set('O',
   'join ZC join OSOBA',
   'RH.FIRMA=:_a and RH.DWY>=to_date(:_b) and RH.DWY<=to_date(:_c)'+
   ' and extract(YEAR from RH.DWY)<>extract(YEAR from RH.DRA)'+_where,
   _firma,_b,_c,_osoba
);
{? RH.f_first()
|| _nag_lis:='';
   {!
   |? {? RH.O().LT<>_nag_lis
      || LS.use(O.LT);
         LS.index('ZLEC');
         _nag_lis:=O.LT
      ?};
      _wrok:=RH.DWY~1;
      _nrok:=RH.DRA~1;

:: Podstawa składek emerytalnych i rentowych z przychodu za poprzedni rok.
      exec('kwota2raportu','rap_zus',__RUB.sys_sql(511),_TAB,'E',_wrok,_nrok);
:: Podstawa składki wypadkowej z przychodu za poprzedni rok.
      exec('kwota2raportu','rap_zus',__RUB.sys_sql(541),_TAB,'W',_wrok,_nrok);
:: Kwoty przychodu wyłączonego z podstawy ubezpieczeń emerytalnych i rentowych.
      exec('kwota2raportu','rap_zus',__RUB.sys_sql(10051),_TAB,'I',_wrok,_nrok);
      RH.f_next()
   !}
?};

RH.f_clear();
RH.cntx_pop();
R.cntx_pop();
LS.cntx_pop();
O.cntx_pop();
FUNKCJE.OTWOLIST();
P.cntx_pop();
OSOBA.cntx_pop();
~~


\tabela_rpa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Tabela do obsługi raportu ZUS RPA.
::   WE:
::   WY: _TAB - tabela do obsługi raportu ZUS RPA.
::  OLD: \tabela/rap_rpa.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(6,
      'OSOBA','STRING[16]','Dane osobowe',
      'RODZ','STRING[1]','Rodzaj informacji do wykazania',
      'RWYP','INTEGER','Rok wypłaty',
      'RNAL','INTEGER','Rok należny',
      'RWYL','INTEGER','Wymiar zajęć (licznik)',
      'RWYM','INTEGER','Wymiar zajęć (mianownik)',
      'KW','REAL','Kwota',
      'OD','DATE','Data początkowa okresu',
      'DO','DATE','Data końcowa okresu',
      'TTUB','STRING[6]','Tytuł ubezpieczenia',
      'TPID','STRING[1]','Typ identyfikatora',
      'NRID','STRING[11]','Identyfikator'
   );
_TAB


\kwota2raportu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Ustalenie kwoty pozycji raportu ZUS RIA i ZUS RPA.
::   WE  _a [STRING] - Lista rubryk, z których należy sumować wartości.
::       _b [TABLE] - Tabela do zapisania danych do raportu ZUS.
::       _c [STRING] - Rodzaj zapisywanej kwoty.
::       _d [INTEGER] - Rok wypłaty.
::       _e [INTEGER] - Rok, za który wypłata się należy.
::       [_f] [STRING] - Tytuł ubezpieczenia osoby.
::       [_g] [REAL] - Współczynnik dla kwoty.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_b;
_ttub:={? var_pres('_f')=type_of('') || _f || '' ?};
_wsp:={? var_pres('_g')=type_of(0) || _g || 1 ?};

{? +_a
|| _rub:=spli_str(_a,',');
   _size:=obj_len(_rub);
   {? _size
   || {! _ii:=1.._size
      |! {? LS.index('?')='NAZWRUBR'
         || R.prefix();
            _rb:={? R.find_key(#_rub[_ii]) || R.ref() || null() ?};
            LS.prefix(exec('ref_firma','ustawienia'),_rb)
         |? LS.index('?')='ZLEC'
         || LS.prefix(RH.ref(),#_rub[_ii])
         || return(~~)
         ?};
         {? LS.first()
         || {!
            |? exec('zapis_pozycji_raportu','rap_zus',_TAB,$LS.P().OSOBA,_c,_d,_e,,,(LS.KW*_wsp)$2,,,,_ttub);
               LS.next()
            !}
         ?}
      !}
   ?}
?};
~~


\zapis_pozycji_raportu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Ustalenie kwoty pozycji raportu ZUS RIA i ZUS RPA.
::   WE  _a [TABLE] - Tabela do zapisania danych do raportu ZUS.
::       _b [STRING] - Wskazanie na osobę.
::       _c [STRING] - Rodzaj zapisywanej kwoty.
::       _d [INTEGER] - Rok wypłaty lub rok, w którym wykonywano pracę nauczycielską.
::       _e [INTEGER] - Rok, za który wypłata się należy lub rok, w którym wykonywano pracę nauczycielską.
::       [_f] [INTEGER] - Wymiar (licznik).
::       [_g] [INTEGER] - Wymiar (mianownik).
::       [_h] [REAL] - Kwota.
::       [_i] [DATE] - Początek okresu.
::       [_j] [DATE] - Koniec okresu.
::       [_k] [INTEGER] - 1 - wymuszenie dołączenia nowego wiersza.
::       [_l] [STRING] - Tytuł ubezpieczenia osoby.
::   WY: Kwota zapisanej pozycji raportu.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_rwyl:={? var_pres('_f')=type_of(0) || _f || 0 ?};
_rwym:={? var_pres('_g')=type_of(0) || _g || 0 ?};
_kw:={? var_pres('_h')=type_of(0) || _h || 0 ?};
_od:={? var_pres('_i')=type_of(#0) || _i || date(0,0,0) ?};
_do:={? var_pres('_j')=type_of(#0) || _j || date(0,0,0) ?};
_add:={? var_pres('_k')=type_of(0) || _k || 0 ?};
_ttub:={? var_pres('_l')=type_of('') || _l || '' ?};

{? _add | ~_TAB.find_key(_b,_ttub,_c,_d,_e,_rwyl,_rwym)
|| _TAB.blank();
   _TAB.OSOBA:=_b;
   _TAB.RODZ:=_c;
   _TAB.RWYP:=_d;
   _TAB.RNAL:=_e;
   _TAB.RWYL:=_rwyl;
   _TAB.RWYM:=_rwym;
   _TAB.KW:=_kw;
   _TAB.OD:=_od;
   _TAB.DO:=_do;
   _TAB.TTUB:=_ttub;
   _TAB.add()
|| _TAB.KW+=_kw;
   {? _od<_TAB.OD || _TAB.OD:=_od ?};
   {? _do>_TAB.DO || _TAB.DO:=_do ?};
   _TAB.put()
?};
_TAB.KW


\ttub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Ustalenie tytułu ubezpieczenia.
::   WE: _a [STRING] - Wskazanie ubezpieczonego.
::       _b [STRING] - Forma współpracy.
::       _c [INTEGER] - Rok raportowanego okresu.
::       _d [INTEGER] - Miesiąc raportowanego okresu.
::       [_e] [STRING] - Lista dopuszczalnych kodów tytułu ubezpieczenia w raporcie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_f_zatr:=_b;
_rok:=_c;
_mc:=_d;
_kodttub:={? var_pres('_e')=type_of('') || _e || '' ?};
_osoba:='';
_dane:=obj_new('TTUB','TPID','NRID');

{? _TAB.first()
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   P.cntx_psh();
   P.index('PRACOSOB');
   P_INFO.cntx_psh();
   P_INFO.index('OD');

   {!
   |? {? _TAB.TPID='' & OSOBA.seek(_TAB.OSOBA,)
      || {? _osoba<>_TAB.OSOBA
         || _osoba:=_TAB.OSOBA;
            {! _ii:=1 .. obj_len(_dane) |! _dane[_ii]:='' !};
            {? _f_zatr='P'
            || _stop:=
                  {? (_data:=exec('ustal_dz','rap_zus',_rok,_mc))=date(0,0,0)
                  || date(_rok,_mc,0)
                  || _data
                  ?};

:: Dane ubezpieczeniowe osoby
               {? exec('zn_ttub','pracownik',,_stop)
               || exec('ustaw_pi','rap_zus',_dane,'TTUB','TPID');
                  {? _stop<date(O.RU,O.MU,1)
                  || _dane.TTUB:='3000'+(_dane.TTUB+2)
                  ?}
               ?}
            |? _f_zatr='Z'
            || {? exec('zn_ttub','pracownik',,date(_rok,_mc,0))
               || exec('ustaw_pi','rap_zus',_dane,'TPID')
               ?}
            ?}
         ?};

         {? _kodttub*(4+_dane.TTUB)
         || {? _f_zatr='P'
            || _TAB.TTUB:=_dane.TTUB
            ?};
            _TAB.TPID:=_dane.TPID;
            _TAB.NRID:=_dane.NRID;
            _TAB.put();
            _next:=_TAB.next()
         || _next:=_TAB.del(1,1)=2
         ?}
      || _next:=_TAB.next()
      ?};
      _next
   !};

   P_INFO.cntx_pop();
   P.cntx_pop();
   OSOBA.cntx_pop()
?}


\pozycje2RPA
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Tworzenie pozycji raportu ZUS RPA.
::   WE: _a [TABLE] - Tabela z danymi do raportu ZUS RPA.
::       _b - Uchwyt pliku do zapisu.
::       _c [STRING] - Wskazanie na osobę.
::       _d [STRING] - Tytuł ubezpieczenia.
::       _e [STRING] - Rodzaj zapisywanej kwoty.
::       _f [STRING] - Oznaczenie bloku raportu.
::       _g - Funkcja zapisu wiersza do pliku z konwersja kodowania.
::       [_h] - Formuła do konwersji daty na wymagany format.
::       [_i] - Numer kolejnego bloku raportu.
::   WY:
::  OLD: \poz2RPA/rap_rpa.fml
::----------------------------------------------------------------------------------------------------------------------
_licz:=1;
_to_file:=_g;
_cdxml:={? var_pres('_h')=type_of("") || _h || "" ?};
_pozblok:={? var_pres('_i')=type_of(0) || _i || 0 ?};
_tab:='   ';

_a.prefix(_c,_d,_e);
{? _e='N'
|| {? _a.first()
   || _to_file(_b,'%1<%2>'[_tab,_f]);
      _ii:=1;
      {!
      |? _to_file(_b,'%1<p%2>%3</p%2>'[2*_tab,$_licz,_cdxml(_a.OD)]);
         _licz+=1;
         _to_file(_b,'%1<p%2>%3</p%2>'[2*_tab,$_licz,_cdxml(_a.DO)]);
         _licz+=1;
         _to_file(_b,'%1<p%2>'[2*_tab,$_licz]);
         _to_file(_b,'%1<p1>%2</p1>'[3*_tab,$_a.RWYL]);
         _to_file(_b,'%1<p2>%2</p2>'[3*_tab,$_a.RWYM]);
         _to_file(_b,'%1</p%2>'[2*_tab,$_licz]);
         _licz+=1;
         {? _a.next()
         || {? ((_ii+=1)%2)>=1 & (_ii%*2)>0
            || _ii:=_licz:=1;
               _to_file(_b,_tab+'</'+_f+'>');
               _to_file(_b,'</III>');
               _pozblok:=exec('blokIIIA','rap_zus',_a,_b,_pozblok,_to_file);
               _to_file(_b,_tab+'<'+_f+'>')
            ?};
            1
         || 0
         ?}
      !};
      _to_file(_b,_tab+'</'+_f+'>')
   ?};
   return(_pozblok)
|| _kw:=0;
   {? _a.first()
   || {!
      |? _kw+={? _a.RNAL<>_a.RWYP || _a.KW || 0 ?};
         _a.next()
      !}
   ?};

   {? _kw & _a.first()
   || _to_file(_b,'%1<%2>'[_tab,_f]);
      {!
      |? {? _a.RNAL<>_a.RWYP
         || _to_file(_b,'%1<p%2>%3</p%2>'[2*_tab,$_licz,$_a.RNAL]);
            _licz+=1;
            _to_file(_b,'%1<p%2>%3</p%2>'[2*_tab,$_licz,form(_a.KW,,2,'9.')]);
            _licz+=1
         ?};
         _a.next()
      !};
      _to_file(_b,'%1</%2>'[_tab,_f])
   ?}
?};
~~


\xml_head_kedu5
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Naglowek dokumentów do ZUS w formacie XML KEDU_5
::   WE: _a - uchwyt pliku do zapisu
::       _b - data utworzenia w formacie XML
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_dataxml:=_b;
_save:=exec('to_file','rap_zus');

_save(_file,'<?xml version="1.0" encoding="UTF-8"?>');
_save(_file,'<KEDU wersja_schematu="1" '+
                  'xmlns="http://www.zus.pl/2018/KEDU_5" '+
                  'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" '+
                  'xsi:schemaLocation="http://www.zus.pl/2018/KEDU_5 kedu_5.xsd">');
_save(_file,'<naglowek.KEDU>');
_save(_file,'  <program><producent>%1</producent><symbol>%2</symbol><wersja>%3</wersja></program>'
   [  exec('producent','#system'),FUN.TYT,exec('wersja','#system')
   ]
);
_save(_file,'<data_utworzenia_KEDU>%1</data_utworzenia_KEDU>'[_dataxml]);
_save(_file,'</naglowek.KEDU>');
~~


\RIA_pozycje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Tworzenie pozycji raportu ZUS RIA.
::   WE: _a [TABLE] - Tabela z danymi do raportu ZUS RIA.
::       _b - Uchwyt pliku do zapisu.
::       _c [STRING] - Wskazanie na osobę.
::       _d [STRING] - Rodzaj zapisywanej kwoty.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_to_file:=exec('to_file','rap_zus');
_licz:=1;
_tab:='      ';

_a.prefix(_c,_d);
{? _a.first()
|| {!
   |? {? _a.NROK<>_a.WROK
      || _to_file(_b,_tab+'<p%1>%2</p%1>'[$_licz,$_a.WROK]);
         _licz+=1;
         _to_file(_b,_tab+'<p%1>%2</p%1>'[$_licz,$_a.NROK]);
         _licz+=1;
         _to_file(_b,_tab+'<p%1>%2</p%1>'[$_licz,form(_a.KW,,2,'9.')]);
         _licz+=1
      ?};
      _a.next()
   !}
?};

{!
|? _licz<60
|! _to_file(_b,_tab+'<p%1>%2</p%1>'[$_licz,'0']);
   _licz+=1;
   _to_file(_b,_tab+'<p%1>%2</p%1>'[$_licz,'0']);
   _licz+=1;
   _to_file(_b,_tab+'<p%1>%2</p%1>'[$_licz,'0.00']);
   _licz+=1
!};
~~


\RIA_lista_osob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Ustalenie listy osób, którym należy przygotować dane do raportu ZUS RIA.
::   WE: _a [DATE] - Data początku raportowanego okresu.
::       _b [DATE] - Data końca raportowanego okresu.
::   WY: Tabela z listą osób zakwalifikowanych do raportu ZUS RIA.
::----------------------------------------------------------------------------------------------------------------------
_OSOBA:=tab_tmp(3,
   'NAZWISKO','STRING[30]','Nazwisko',
   'PIERWSZE','STRING[20]','Pierwsze imię',
   'PESEL','STRING[11]','PESEL',
   'DATA','DATE','Data przekazania raportu',
   'AKCEPT','STRING[1]','Dane zostały wygenerowane',
   'OSOBA','STRING[16]','Wskazanie na osobę',
   'DZA','DATE','Data rozpoczęcia współpracy',
   'DZ','DATE','Data zakończenia współpracy'
);

OSOBA.cntx_psh();
P.cntx_psh();
P.prefix();
P.f_clear();
P.f_set(
   'OSOBA',
   'join F_ZATR',
   'P.FIRMA=:_a and F_ZATR.KOD=\'P\' and P.DZA>to_date(:_b) and P.DZA<to_date(:_c)',
   exec('ref_firma','ustawienia'),_a,_b
);

{? P.f_first()
|| {!
   |? P.OSOBA();
      {? ~_OSOBA.find_key($OSOBA.ref())
      || _OSOBA.blank();
         _OSOBA.OSOBA:=$OSOBA.ref();
         _OSOBA.NAZWISKO:=OSOBA.NAZWISKO;
         _OSOBA.PIERWSZE:=OSOBA.PIERWSZE;
         _OSOBA.PESEL:=OSOBA.PESEL;
         _OSOBA.DZA:=P.DZA;
         _OSOBA.DZ:=P.DZ;
         _OSOBA.AKCEPT:='';
         _OSOBA.DATA:=date(0,0,0);
         _OSOBA.add()
      || {? (_OSOBA.DZ<>date(0,0,0) & _OSOBA.DZ<P.DZ) | P.DZ=date(0,0,0)
         || _OSOBA.DZ:=P.DZ;
            _OSOBA.put()
         ?}
      ?};
      P.f_next()
   !}
?};

P.f_clear();
P.cntx_pop();
OSOBA.cntx_pop();
_OSOBA


\RIA_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Wyświetleni listy osób zakwalifikowanych do raportu ZUS RIA
::   WE: _a [TABLE] - Tabela osób zakwalifikowanych do raporut ZUS.
::       _b [TABLE] - Tabela do zapisania danych do raportu ZUS.
::       _c [DATE] - Data początku raportowanego okresu.
::       _d [DATE] - Data końca raportowanego okresu.
::   WY: 1/0 - Zatwierdzono/zrezygnowano z generowania raportu.
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new('OSOBA','RIA','OD','DO','WER');
{! _ii:=1 .. _ |! _par[_ii]:=_[_ii] !};
_par.WER:='';
_OSOBA:=_par.OSOBA;
_RIA:=_par.RIA;
_mode:='maximized';

OSOBA.cntx_psh();

:: Kartoteka dodatkowa do przechowywania informacji o przekazaniu informacji ZUS RIA do programu Płatnik.
KART_DEF.cntx_psh();
KART_DEF.index('SYMBOL');
KART_DEF.prefix('ZUS_RIA',);
KART_DEF.first();
KART_DOD.cntx_psh();
KART_DOD.index('KART_DOD');
KART_DOD.prefix(exec('ref_firma','ustawienia'),KART_DEF.ref());

{? _OSOBA.first()
|| OSOBA.prefix();
   {!
   |? {? OSOBA.seek(_OSOBA.OSOBA) & KART_DOD.find_key(OSOBA.ref())
      || _OSOBA.AKCEPT:='T';
         _OSOBA.DATA:=KART_DOD.OD;
         _OSOBA.put()
      ?};
      _OSOBA.next()
   !}
?};

:: Podstawowe okno do wyświetlenia listy osób zakwalifikowanych do raportu ZUS RIA.
_wer:=_OSOBA.mk_sel('Lista osób'@,,,'listaosobdoria',,,,,'U',,,,,_mode);
_OSOBA.win_fld(_wer,,'NAZWISKO',,,30,,1,'Nazwisko'@,,'Nazwisko osoby wskazanej do raportu ZUS RIA'@);
_OSOBA.win_fld(_wer,,'PIERWSZE',,,20,,1,'Imie'@,,'Imię osoby wskazanej do raportu ZUS RIA'@);
_OSOBA.win_fld(_wer,,'PESEL',,,11,,1,'PESEL'@,,'PESEL osoby wskazanej do raportu ZUS RIA'@);
_OSOBA.win_fld(_wer,,'DZA',,,10,,1,'Początek współpracy'@,,'Data rozpoczęcia współracy'@);
_OSOBA.win_fld(_wer,,'DZ',,,10,,1,'Koniec współpracy'@,,'Data zakończenia współracy'@);
_OSOBA.win_fld(_wer,,'DATA',,,10,,1,'Data przekazania'@,,'Data przekazania informacji do programu Płatnik'@);

:: Zebranie danych do raportu ZUS RIA
_OSOBA.win_act(_wer,0,'Formuła','Generuj'@@,,'Generowanie danych do raportu ZUS RIA'@,
   "  params_exec('RIA_generuj','rap_zus')
   ",,1,1,,,'G'
);
:: Podgląd danych
_OSOBA.win_act(_wer,0,'Formuła','Szczegóły'@@,,'Podgląd zapisanych danych do raportu ZUS RIA'@,
   "  params_exec('RIA_widok','rap_zus')
   ",,,,,,'S'
);
:: Zapisanie do tabeli zebranych danych.
_OSOBA.win_act(_wer,0,'Formuła','Akceptuj'@@,,'Zaakceptowaniem do raportu ZUS RIA'@,
   "  params_exec('RIA_akceptacja','rap_zus')
   ",,,,,,'A'
);
:: Przygotowanie raportu ZUS RIA dla osób z zebranymi, ale nie wysłanymi informacjami.
_OSOBA.win_act(_wer,0,'Formuła','Dalej'@@,,'Przygotowanie raportu ZUS RIA'@,"sel_exit()",,,1,,,'D',,'target=window');
_OSOBA.win_act(_wer,0,'Formuła','Legenda'@@,,'Wyświetlenie okna legendy'@,"exec('legenda','color','ZUS_RIA')",,,,,,
   'L',,'target=window'
);
_OSOBA.win_act(_wer,0,'Rekord',,,,
   "  _par:=params_get().par;
      _OSOBA:=_par.OSOBA;
      _wer:=_par.WER;
      _d0:=date(0,0,0);

      {? _OSOBA.sel_size()
      || _gray:=''
      || _gray:=
            {? _OSOBA.DZ=_d0
            || 'GAS'
            |? _OSOBA.AKCEPT=''
            || 'AS'
            |? _OSOBA.AKCEPT='N'
            || 'G'
            |? _OSOBA.AKCEPT='T'
            || 'A'
            || ''
            ?}
      ?};
      _OSOBA.cntx_psh();
      {? ~_OSOBA.find_tab(1,'AKCEPT',,'=','T','DATA',,'=',_d0)
      || _gray+='D'
      ?};
      _OSOBA.cntx_pop();
      _OSOBA.actions_grayed(_wer,_gray);

      {? _OSOBA.AKCEPT=''
      || Color.fnd_kol('ZUS_RIA#01#01')
      |? _OSOBA.DATA<>_d0
      || Color.fnd_kol('ZUS_RIA#01#02')
      |? _OSOBA.AKCEPT='N'
      || Color.fnd_kol('ZUS_RIA#01#03')
      || 0
      ?}
   "
);
_OSOBA.win_act(_wer,0,'Kolejność');

_OSOBA.win_btn(_wer,'text=%1,align=begin'['Generuj'@],'menu:G');
_OSOBA.win_btn(_wer,'text=%1,align=begin'['Szczegóły'@],'menu:S');
_OSOBA.win_btn(_wer,'text=%1,align=begin'['Akceptuj'@],'menu:A');
_OSOBA.win_btn(_wer,'text=%1,icon=xwin16.png:22,panel=bottom'['Dalej'@],'menu:D');
_OSOBA.win_btn(_wer,'text=%1,icon=xwin16.png:14,panel=bottom'['Anuluj'@],'key:Esc');

_par.WER:=_wer;
params_set('par',_par);

:: Okno grupowe z zakładkami
_grp:=_OSOBA.grp_make('Lista osób do raportu ZUS RIA'@,,,,,,,_mode);

:: Osoby niezatrudnione bez przygotowanych danych.
_OSOBA.grp_sel(_grp,,_wer,'Osoby niezatrudnione bez raportu',
   "  params_set(_par:=params_get());
      _OSOBA:=_par.par.OSOBA;
      {? ~_OSOBA.sel_size()
      || _OSOBA.f_set(
            'NAZWISKO,PIERWSZE,PESEL',,
            'DZ is not null and DATA is null'
         );
         win_disp()
      ?}
   "
);

:: Osoby, za które przekazano dane do raportu danych.
_OSOBA.grp_sel(_grp,,_wer,'Osoby z przekazanym raportem',,,,,
   "  params_set(_par:=params_get());
      _OSOBA:=_par.par.OSOBA;
      {? ~_OSOBA.sel_size()
      || _OSOBA.f_set(
            'NAZWISKO,PIERWSZE,PESEL',,
            'DATA is not null'
         );
         win_disp()
      ?}
   "
);

:: Osoby współpracujące bez przygotowanych danych.
_OSOBA.grp_sel(_grp,,_wer,'Osoby zatrudnione zakwalifikowane',
   "  params_set(_par:=params_get());
      _OSOBA:=_par.par.OSOBA;
      {? ~_OSOBA.sel_size()
      || _OSOBA.f_set(
            'NAZWISKO,PIERWSZE,PESEL',,
            'DZ is null'
         );
         win_disp()
      ?}
   "
);

_OSOBA.cntx_psh();
_OSOBA.prefix();
_OSOBA.f_clear();
_OSOBA.win_sel(_grp);
_sel_exit:=_OSOBA.select();
_OSOBA.f_clear();
_OSOBA.cntx_pop();

KART_DOD.cntx_pop();
KART_DEF.cntx_pop();
OSOBA.cntx_pop();
_sel_exit


\RIA_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Zebranie danych do raportu ZUS RIA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get().par;
_OSOBA:=_par.OSOBA;
_RIA:=_par.RIA;
_od:=_par.OD;
_do:=_par.DO;

{? {? _OSOBA.sel_size()
   || _OSOBA.AKCEPT=''
   || 1
   ?}
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   {? OSOBA.seek(_OSOBA.OSOBA,)
   ||
:: Usunięcie danych zapisanych do raportu ZUS RIA.
      _RIA.cntx_psh();
      _RIA.prefix(_OSOBA.OSOBA);
      {? _RIA.first()
      || {! |? _RIA.del() !}
      ?};
      _RIA.cntx_pop();

:: Przygotowanie danych do raportu ZUS RIA.
      {? exec('RIA_dane_organizacyjne','rap_zus',_RIA,_OSOBA.DZ,_do)
      || _OSOBA.AKCEPT:='N';
         {? _OSOBA.put()
         || exec('dane_z_lp','rap_zus',_RIA,_od,_do,'RIA',_OSOBA.OSOBA);
            exec('warunki_szczegolne','rap_zus',_RIA,_od,_do)
         ?}
      ?}
   ?};
   OSOBA.cntx_pop()
?};
~~


\RIA_dane_organizacyjne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Informacje organizacyjne do raportu.
::   WE: _a [TABLE] - Tabela do zapisania danych do raportu ZUS.
::       _b [DATE] - Data zakończenia współpracy.
::       _c [DATE] - Data końca raportowanego okresu.
::   WY: 1/0 - Dodano informacje organizacyjne dla raportu, tworzenie raportu będzie kontynuowane.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_firma:=exec('ref_firma','ustawienia');
_d0:=date(0,0,0);
_dt:={? _b=_d0 | _b>_c || _c || _b ?};

_TAB.blank();
_TAB.OSOBA:=$OSOBA.ref();
_TAB.RODZ:='O';
_TAB.DO:=_b;
_TAB.ZGL:='1';
_TAB.RWYP:=_TAB.RNAL:=_TAB.DO~1;

:: Ustalenie informacji ubezpieczeniowych.
P_INFO.cntx_psh();
P_INFO.index('OD');
P_INFO.prefix(_firma,OSOBA.ref());
{? P_INFO.find_le(_dt) | P_INFO.first()
|| exec('ustaw_pi','rap_zus',_TAB,'TPID')
?};
P_INFO.cntx_pop();

:: Ustalenie informacji o sposobie rozwiązania umowy.
H_UM.cntx_psh();
H_UM.index(H_UM.ndx_tmp(,1,'P','FIRMA',,'P','OSOBA',,'DO',,));
H_UM.prefix(_firma,OSOBA.ref(),_b);
{? H_UM.first() & H_UM.DO<>_d0
|| _TAB.USPKOD:=H_UM.USPKOD().KOD;
   _TAB.USPPPRAK:=H_UM.USPPPRAK().KOD;
   _TAB.USPPPRAT:=H_UM.USPPPRAT;
   _TAB.USPSTR:=H_UM.USPSTR().KOD
?};
H_UM.ndx_drop();
H_UM.cntx_pop();

_TAB.add()


\warunki_szczegolne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Informacje o pracy w warunkach szczególnych lub o szczególnym charakterze.
::   WE: _a [TABLE] - Tabela do zapisania danych do raportu ZUS.
::       _b [DATE] - Początek raportowanego okresu.
::       _c [DATE] - Koniec raportowanego okresu.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_od:=_b;
_do:=_c;
_firma:=exec('ref_firma','ustawienia');
_add:=
   "  _TAB:=_a;
      _TAB.blank();
      _TAB.RODZ:='Z';
      _TAB.OSOBA:=_b;
      _TAB.PWSZCZ:=_c;
      _TAB.OD:=_d;
      _TAB.DO:=_e;
      _TAB.RWYL:=_f;
      _TAB.RWYM:=_g;
      _TAB.RWYP:=_TAB.RNAL:=_TAB.OD~1;
      _TAB.add()
   ";

H.cntx_psh();
H.index('_HISTOSD');
H.prefix(_firma,OSOBA.ref());

:: Warunki szczególnie lub szczególny charakter pracy z przebiegu zatrudnienia.
{? H.find_ge(_od) & H.P().DZA>=_od & H.OD<=_do
|| {!
   |? {? H.SP='T'
      || _add(_TAB,$H.P().OSOBA,H.ST().S_ZUS().KOD,H.OD,H.DO,H.RWYL,H.RWYM)
      ?};
      H.next() & H.OD<=_do
   !}
?};

:: Warunki szczególnie lub szczególny charakter pracy z informacji ubezpieczeniowych.
P_INFO.cntx_psh();
P_INFO.prefix();
P_INFO.f_clear();
P_INFO.f_set(
   'SZCZOD,SZCZKOD(KOD)',,
   'P_INFO.FIRMA=:_a and P_INFO.OSOBA=:_b and P_INFO.SZCZKOD is not null and P_INFO.SZCZOD>=to_date(:_c)',
   _firma,OSOBA.ref(),_od
);

{? P_INFO.f_first()
|| {!
   |? _add(_TAB,$P_INFO.OSOBA,P_INFO.SZCZKOD().KOD,P_INFO.SZCZOD,P_INFO.SZCZDO,0,0);
      P_INFO.f_next()
   !}
?};
P_INFO.f_clear();
P_INFO.cntx_pop();
H.cntx_pop();
~~


\RIA_widok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Wyświetlenie szczegółów raportu RIA
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get().par);
_OSOBA:=_par.OSOBA;
_RIA:=_par.RIA;

_RIA.cntx_psh();
OSOBA.cntx_psh();
OSOBA.prefix();
OSOBA.seek(_OSOBA.OSOBA,,,1);

:: Wczytanie informacji zapianych do raportu ZUS RIA.
_RIA.prefix($OSOBA.ref());
{? ~_RIA.size()
|| OS_RIA.cntx_psh();
   OS_RIA.index('OSOBA');
   OS_RIA.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
   {? OS_RIA.first()
   || {!
      |? _RIA.blank();
         _RIA.OSOBA:=$OS_RIA.OSOBA;
         {! _ii:=2 .. _RIA.fld_num()
         |! _acr:=_RIA.fld_acr(_ii);
            ($("_a."+_acr+':=OS_RIA.'+_acr))(_RIA)
         !};
         _RIA.add();
         OS_RIA.next()
      !}
   ?};
   OS_RIA.cntx_pop()
?};

:: Definicja okien.
_grp:=_OSOBA.grp_make('Dane do raportu RIA dla: %1 %2'@[OSOBA.NAZWISKO,OSOBA.PIERWSZE],,,,,,,'normal');

:: Okno sekcji I - IV
_red1:=_OSOBA.mk_edit('I. Dane organizacyjne'@,0);
_OSOBA.win_esep(_red1,'I. Dane organizacyjne'@);
_OSOBA.win_efld(_red1,_RIA,'ZGL',,,,,15,'01. Informacja/Korekta'@,,
   'Dokument zgłoszenia informacji(1) lub korekta(2)'@
);
_OSOBA.win_esep(_red1,'II. Dane identyfikacyjne płatnika składek'@);
_OSOBA.win_efld(_red1,KST,'NIP',,,15,,1,'01. NIP'@,,'Numer NIP płatnika składek'@);
_OSOBA.win_efld(_red1,KST,'REG',,,15,,1,'02. REGON'@,,'Numer REGON płatnika składek'@);
_OSOBA.win_efld(_red1,KST,'SKROT',,,15,,1,'06. Nazwa skrócona'@,,'Nazwa skrócona płatnika składek'@);
_OSOBA.win_esep(_red1,'III. Dane identyfikacyjne osoby ubezpieczonej'@);
_OSOBA.win_efld(_red1,,'NAZWISKO',,,31,,1,'01. Nazwisko'@,,'Nazwisko osoby ubezpieczonej'@);
_OSOBA.win_efld(_red1,,'PIERWSZE',,,31,,1,'02. Imię pierwsze'@,,'Pierwsze imię osoby ubezpieczonej'@);
_OSOBA.win_efld(_red1,_RIA,'TPID',,,15,,1,'03. Typ'@,,'Typ identyfikatora osoby ubezpieczonej'@);
_OSOBA.win_efld(_red1,_RIA,'NRID',,,15,,1,'04. Identyfikator'@,,'Identyfikator osoby ubezpieczonej'@);
_OSOBA.win_esep(_red1,'IV. Rozwiązanie/wygaśnięcie ostatniego stosunku pracy'@);
_OSOBA.win_efld(_red1,,'DZ',,,12,,1,'01. Data'@,,'Data wygaśnięcia rozwiązania ostatniego stosunku pracy'@);
_OSOBA.win_efld(_red1,_RIA,'USPKOD',,,15,,1,'02. Kod wygaśnięcia/rozwiązania'@,,
   'Kod wygaśnięcia/kod tytułu rozwiązania stosunku pracy/stosunku służbowego'@
);
_OSOBA.win_efld(_red1,_RIA,'USPPPRAK',,,15,,1,'03. Kod podstawy prawnej'@,,
   'Kod podstawy prawnej rozwiązania/wygaśnięcia stosunku pracy/stosunku służbowego'@
);
_OSOBA.win_efld(_red1,_RIA,'USPPPRAT',,,72,,1,'04. Podstawa prawna'@,,
   'Podstawa prawna rozwiązania/wygaśnięcia stosunku pracy/stosunku służbowego jeśli w polu 03 wprowadono 550'@
);
_OSOBA.win_efld(_red1,_RIA,'USPSTR',,,15,,1,'05. Strona incjująca'@,,
   'Strona z inicjatywy, której nastąpiło rozwiązanie stosunku pracy(pracownik - 1, pracodawca - 2)'@
);
_OSOBA.grp_edit(_grp,,_red1,'I-IV',,
   "  _RIA:=params_get().RIA;
      _RIA.prefix($OSOBA.ref(),'O');
      _RIA.first()
   ",,,'maximized'
);

:: Definicja okien sekcji V - VII
_wer:=_RIA.mk_sel('Kwoty przychodu'@,,0,,,,,,'U');
_RIA.win_fld(_wer,,'RWYP',,,10,,1,'Rok wypłaty'@,,'Rok wypłaty przychodu'@);
_RIA.win_fld(_wer,,'RNAL',,,10,,1,'Przychód za rok'@,,'Rok, za który przychód został wypłacony'@);
_RIA.win_fld(_wer,,'KW',,,15,2,1,'Kwota'@,,'Kwota przychodu wypłaconego w innym roku'@);

:: Okno sekcji V
_OSOBA.grp_sel(_grp,_RIA,_wer,'V',,,,,
   "  _RIA:=params_get().RIA;
      _RIA.prefix($OSOBA.ref(),'E');
      _RIA.first()
   "
);

:: Okno sekcji VI
_OSOBA.grp_sel(_grp,_RIA,_wer,'VI',,,,,
   "  _RIA:=params_get().RIA;
      _RIA.prefix($OSOBA.ref(),'W');
      _RIA.first()
   "
);

:: Okno sekcji VII
_OSOBA.grp_sel(_grp,_RIA,_wer,'VII',,,,,
   "  _RIA:=params_get().RIA;
      _RIA.prefix($OSOBA.ref(),'I');
      _RIA.first()
   "
);

:: Okno sekcji VIII
_wer08:=_RIA.mk_sel('Okresy pracy nauczycielskiej'@,,0,,,,,,'U');
_RIA.win_fld(_wer08,,'OD',,,10,,1,'Okres od'@,,'Data początkowa raportowanego okresu'@);
_RIA.win_fld(_wer08,,'DO',,,10,,1,'Okres do'@,,'Data końcowa raportowanego okresu'@);
_RIA.win_fld(_wer08,,'RWYL',,,3,2,1,'Wymiar'@,,'Wymiar zajęć (licznik)'@);
_RIA.win_fld(_wer08,,'RWYM',,,3,2,1,'Wymiar'@,,'Wymiar zajęć (mianownik)'@);
_OSOBA.grp_sel(_grp,_RIA,_wer08,'VIII',,,,,
   "  _RIA:=params_get().RIA;
      _RIA.prefix($OSOBA.ref(),'N');
      _RIA.first()
   "
);

:: Okno sekcji IX
_wer09:=_RIA.mk_sel('Okresy pracy nauczycielskiej'@,,0,,,,,,'U');
_RIA.win_fld(_wer09,,'OD',,,10,,1,'Okres od'@,,'Data początkowa raportowanego okresu'@);
_RIA.win_fld(_wer09,,'DO',,,10,,1,'Okres do'@,,'Data końcowa raportowanego okresu'@);
_RIA.win_fld(_wer09,,'RWYL',,,10,,1,'Wymiar'@,,'Wymiar zajęć (licznik)'@);
_RIA.win_fld(_wer09,,'RWYM',,,10,,1,'Wymiar'@,,'Wymiar zajęć (mianownik)'@);
_RIA.win_fld(_wer09,,'SZSPEC',,,3,,1,'Szkolnictwo specjalne'@,,
   'Praca w szkolnictwie specjalnym wg art.88 Karty Nauczyciela'@,2,,"'X'","''"
);
_OSOBA.grp_sel(_grp,_RIA,_wer09,'IX',,,,,
   "  _RIA:=params_get().RIA;
      _RIA.prefix($OSOBA.ref(),'S');
      _RIA.first()
   "
);

:: Okno sekcji X
_wer10:=_RIA.mk_sel('Praca w warunkach szczególnych'@,,0,,,,,,'U');
_RIA.win_fld(_wer10,,'OD',,,10,,1,'Okres od'@,,'Data początkowa raportowanego okresu'@);
_RIA.win_fld(_wer10,,'DO',,,10,,1,'Okres do'@,,'Data końcowa raportowanego okresu'@);
_RIA.win_fld(_wer10,,'STALA',,,3,,1,'Stała'@,,'Praca wykonywana stale i w pełnym wymiarze(X)'@,2,,"'X'","''");
_RIA.win_fld(_wer10,,'RWYL',,,10,,1,'Wymiar'@,_RIA.STALA='X','Wymiar czasu pracy (licznik)'@);
_RIA.win_fld(_wer10,,'RWYM',,,10,,1,'Wymiar'@,_RIA.STALA='X','Wymiar czasu pracy (mianownik)'@);
_RIA.win_fld(_wer10,,'PCSZCZ',,,10,,1,'Szczególny charakter'@,,'Kod pracy w szczególnym charakterze'@);
_RIA.win_fld(_wer10,,'PWSZCZ',,,10,,1,'Warunki szczególne'@,,'Kod pracy w szczególnym charakterze'@);
_RIA.win_fld(_wer10,,'DEPUTAT',,,10,,1,'Deputat'@,,
   'Podczas pracy na kolei przysługiwał deputat węglowy (X)'@,2,,"'X'","''"
);
_RIA.win_fld(_wer10,,'KOLEJ',,,10,,1,'Kolej'@,,
   'Zatrudnienie na kolei na stanowiskach nie obiętych wykazami (X)'@,2,,"'X'","''"
);
_OSOBA.grp_sel(_grp,_RIA,_wer10,'X',,,,,
   "  _RIA:=params_get().RIA;
      _RIA.prefix($OSOBA.ref(),'C');
      _RIA.first()
   "
);

:: Okno sekcji XI
_wer11:=_RIA.mk_sel('Praca w warunkach szczególnych'@,,0,,,,,,'U');
_RIA.win_fld(_wer11,,'PWSZCZ',,,10,,1,'Kod'@,,'Kod pracy w warunkach szczególnych/o szczególnym charakterze'@);
_RIA.win_fld(_wer11,,'OD',,,10,,1,'Okres od'@,,'Data początkowa raportowanego okresu'@);
_RIA.win_fld(_wer11,,'DO',,,10,,1,'Okres do'@,,'Data końcowa raportowanego okresu'@);
_RIA.win_fld(_wer11,,'RWYL',,,10,,1,'Wymiar'@,,'Wymiar czasu pracy (licznik)'@);
_RIA.win_fld(_wer11,,'RWYM',,,10,,1,'Wymiar'@,,'Wymiar czasu pracy (mianownik)'@);
_OSOBA.grp_sel(_grp,_RIA,_wer11,'XI',,,,,
   "  _RIA:=params_get().RIA;
      _RIA.prefix($OSOBA.ref(),'Z');
      _RIA.first()
   "
);

::Wyświetlenie informacji.
_OSOBA.win_sel(_grp);
_OSOBA.select();
OSOBA.cntx_pop();
_RIA.cntx_pop();
~~


\RIA_akceptacja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Akceptacja danych przygotowanych do raportu ZUS RIA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get().par;
_OSOBA:=_par.OSOBA;
_RIA:=_par.RIA;
_d0:=date(0,0,0);

_RIA.cntx_psh();
_RIA.prefix(_OSOBA.OSOBA);
{? _RIA.first()
|| _firma:=exec('ref_firma','ustawienia');
   OSOBA.cntx_psh();
   OSOBA.prefix();
   OS_RIA.cntx_psh();
   OS_RIA.index('OSOBA');

   {? OSOBA.seek(_OSOBA.OSOBA,)
   || _zapis:=_ok:=0;
:: Czy zapisywać informacje do tabeli: 0 - nie, 1 - nadpisz, 2 - nadpisz jako korekta, 3 - dołącz.

      {? KART_DOD.find_key(OSOBA.ref())
      || {? KART_DOD.OD=_d0
         || {? FUN.ask('Czy nadpisać istniejące dane?'@)
            || _zapis:=1
            ?}
         || {? FUN.ask('%1\n%2'['Dane przekazane do pogramu Płatnik.'@,'Czy nadpisać istniejące dane?'@])
            || _zapis:=2
            ?}
         ?}
      || _zapis:=3
      ?};

      {? _zapis
      || OS_RIA.prefix(_firma,OSOBA.ref());

:: Usunięcie starych danych.
         {? OS_RIA.first()
         || {! |? OS_RIA.del() !}
         ?};

:: Zapisanie nowych danych.
         {!
         |? OS_RIA.blank();
            OS_RIA.FIRMA:=_firma;
            OS_RIA.OSOBA:=OSOBA.ref();
            {! _ii:=2 .. _RIA.fld_num()
            |! _acr:=_RIA.fld_acr(_ii);
               ($('OS_RIA.'+_acr+":=_a."+_acr))(_RIA)
            !};
            {? _zapis=2
            || OS_RIA.ZGL:='2'
            ?};
            OS_RIA.add();
            _RIA.next()
         !};

:: Zapisanie do kartoteki dodatkowej informacji o akceptacji danych do raportu ZUS RIA.
         _user:=userdata();
         KART_DOD.blank();
         KART_DOD.FIRMA:=_firma;
         KART_DOD.KART_DEF:=KART_DEF.ref();
         KART_DOD.OSOBA:=OSOBA.ref();
         KART_DOD.KT:='P';
         _ok:=
            {? _zapis<3
            || KART_DOD.OPIS:='Informacja została zmieniona przez: %1'[_user];
               KART_DOD.put()
            || KART_DOD.OPIS:='Informacja została przygotowana przez: %1'[_user];
               KART_DOD.add()
            ?};

         {? _ok
         || _OSOBA.AKCEPT:='T';
            _OSOBA.DATA:=_d0;
            _OSOBA.put()
         ?}
      ?}
   ?};

   OS_RIA.cntx_pop();
   OSOBA.cntx_pop()
|| FUN.info('Brak danych do akceptacji.'@);
   _OSOBA.AKCEPT:='';
   _OSOBA.DATA:=_d0;
   _OSOBA.put()
?};

_RIA.cntx_pop();
~~


\zus_rca_kor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Usuwa z wyniku zapytania SQL (rca_kor.sql) zapisy powiązane z otwartymi listami płac
::   WE: _a - rok ubezpieczeniowy
::       _b - m-c ubezpieczeniowy
::   WY: tabela
::  OLD: \rca_kor/rap_rca.fml
::----------------------------------------------------------------------------------------------------------------------
_rca_kor:=sql_exec('!sql_rca_kor',_a,_b,exec('ref_firma','ustawienia'));
_listy:=sql('select distinct LT from :_a',_rca_kor);

__F_ZATR.mod('P','O');
O.cntx_psh();
O.index('LISTYPZN');
{? _listy.first()
|| {!
   |? {? _listy.LT<>''
      || O.prefix(exec('ref_firma','ustawienia'),_listy.LT,);
         {? O.first()
         || _usu:=0;
            {!
            |? _usu:=($O.F_ZATR=__F_ZATR.REF & O.Z<>'T');
               O.next()
            !};
:           otwarta lista, do usuniecia
            {? _usu
            || _rca_kor.prefix(_listy.LT);
               {? _rca_kor.first()
               || {!
                  |? _rca_kor.del()
                  !}
               ?}
            ?}
         ?}
      ?};
      _listy.next()
   !}
?};
O.cntx_pop();
_rca_kor.clear();
sql('select OSOBA, RN, sum(POD) POD, sum(SKL) SKL from :_a group by OSOBA, RN',_rca_kor)


\xml_head_kedu52
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [20.14]
:: OPIS: Naglowek dokumentów do ZUS w formacie XML KEDU_5_2
::   WE: _a - uchwyt pliku do zapisu
::       _b - data utworzenia w formacie XML
::   WY:
::  OLD: \xml_head_kedu52/rap_zus.fml
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_dataxml:=_b;
_save:=exec('to_file','rap_zus');

_save(_file,'<?xml version="1.0" encoding="UTF-8"?>');
_save(_file,'<KEDU wersja_schematu="1" '+
                  'xmlns="http://www.zus.pl/2020/KEDU_5_2" '+
                  'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" '+
                  'xsi:schemaLocation="http://www.zus.pl/2020/KEDU_5_2 kedu_5_2.xsd">');
_save(_file,'<naglowek.KEDU>');
_save(_file,'  <program><producent>%1</producent><symbol>%2</symbol><wersja>%3</wersja></program>'
   [  exec('producent','#system'),FUN.TYT,exec('wersja','#system')
   ]
);
_save(_file,'<data_utworzenia_KEDU>%1</data_utworzenia_KEDU>'[_dataxml]);
_save(_file,'</naglowek.KEDU>');
~~


\zus_rud_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Tworzy deklarację ZUS RUD - zgłoszenie umów o dzieło
::   WE: _a - null
::       _b - forma zatrudnienia
::       _c - kod dziedziny produktowej
::   WY:
::  OLD: \generuj/rap_rud.fml
::----------------------------------------------------------------------------------------------------------------------
{? _b='Z'
|| _clear:="VAR_DEL.delete('__RUD','__ndx','RUD_ZAKR')";
   _cntxpop:="ZUS_RAP.cntx_pop();P.cntx_pop();ZC.cntx_pop(); OSOBA.cntx_pop()";
   _data_od:=RUD_ZAKR.DOD;
   _data_do:=RUD_ZAKR.DDO;
   _ind:=0;
   _zlec:=0;
   _clear();
   P.cntx_psh(); P.prefix();
   ZC.cntx_psh(); ZC.prefix();
   OSOBA.cntx_psh(); OSOBA.prefix();
   ZUS_RAP.cntx_psh(); ZUS_RAP.index('ZC'); ZUS_RAP.prefix();

   __RUD:=tab_tmp(1,
      'OSOBA','INTEGER','Osoba',
      'PRZ','INTEGER','Zleceniobiorca',
      'NAZWISKO','STRING[30]','Nazwisko',
      'PIERWSZE','STRING[20]','Imię',
      'PESEL','STRING[11]','PESEL',
      'CEL','INTEGER','Cel',
      'ZC1','INTEGER','Umowa1',
      'ZC2','INTEGER','Umowa2',
      'ZC3','INTEGER','Umowa3',
      'ZC4','INTEGER','Umowa4',
      'ZC5','INTEGER','Umowa5',
      'ZC6','INTEGER','Umowa6',
      'ZC7','INTEGER','Umowa7',
      'ZC8','INTEGER','Umowa8',
      'ZC9','INTEGER','Umowa9',
      'ZC10','INTEGER','Umowa10'
   );
   __RUD.index(__RUD.ndx_tmp('Osoba',0,'NAZWISKO',,0,'PIERWSZE',,0,'PESEL',,0));

   _zusndx:=zus.tab.ndx_tmp('Osoba',1,'ZN',,0,'NAZWISKO',,0,'PIERWSZE',,0,'PESEL',,0,'DZA',,0);

   _args:=exec('wybierz_args','pracownik');
   _args.DOMAIN:=_c;
   _args.F_ZATR:=_b;
   _args.VIEW:='';
   _args.UD_SCH:=exec('domyslny','schemat','PODZORG');
   _args.UD_SKL:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
   _ret:=exec('wybierz','pracownik',_args);
   {? _ret.P.size()=0
   || _cntxpop();
      _clear();
      return()
   ?};

   KOMM.init(,,'Umowy pominięte w raporcie'@);

   {? _ret.P.size()>0
   || echo('Trwa przygotowywanie raportu, proszę czekać'@);
      _zc:=sql('select ZC.REFERENCE REF, ZC.DZ '
               'from ZC '
               ' join RU using (ZC.RU, RU.REFERENCE) '
               ' join S_ZUS using (ZC.TTUB, S_ZUS.REFERENCE) '
               'where ZC.P in (select :_a.SQL from :_a) '
               ' and ZC.DZ>=to_date(:_b) '
               ' and ZC.DZ<=to_date(:_c) '
               ' and RU.K in (:_d) '
               ' and S_ZUS.KOD not like \'01%\' '
               'order by REF, ZC.DZ ',
               _ret.P,_data_od,_data_do,'\'2\',\'6\'');
      {? var_pres('_zc')>100
      || {? _zc.first()
         || {!
            |? {? ZC.seek(_zc.REF,)
               || _zua:=~ZUS_RAP.find_key(ZC.P().OSOBA,'RUD',ZC.ref);
                  {? (~ZUS.ZUA & _zua) | ZUS.ZUA
                  || _tre:=ZC.memo_txt(0,1,'TRESC')<>'';
                     _pdu:=(ZC.P().OSOBA().PESEL<>'' | OSOBA.UR_DATA<>#0);
                     _pol:=(OSOBA.OBCY='N' & OSOBA.PESEL='');
                     _pdp:=(OSOBA.PESEL='' & (OSOBA.DOWOD='' & OSOBA.PASZPORT=''));
                     {? _tre & _pdu & ~_pol & ~_pdp
                     || exec('get_ZC_INFO','zlec_rh',ZUS.DATA);
                        zus.tab.blank();
                        zus.tab.PREF:=#ZC.P;
                        zus.tab.ZCREF:=#ZC.ref();
                        zus.tab.PRZ:=#ZC.P;
                        zus.tab.NAZWISKO:=ZC.P().OSOBA().NAZWISKO;
                        zus.tab.PIERWSZE:=OSOBA.PIERWSZE;
                        zus.tab.WYDZIAL:=ZC.WYDZIAL().SYMBOL;
                        zus.tab.T:=P.T;
                        zus.tab.PESEL:=OSOBA.PESEL;
                        zus.tab.TTUB:=form((4+(|ZC_INFO.TTUB().KOD))+(1+(|ZC_INFO.PREM().KOD))+
                                           (1+(|ZC_INFO.STNP().KOD)),6);
                        zus.tab.NU:=ZC.NU;
                        zus.tab.DZA:=ZC.DZ;
                        zus.tab.DOD:=ZC.DU;
                        zus.tab.DDO:=ZC.DW;
                        zus.tab.ZUS:=ZC_INFO.ZUS;
                        zus.tab.FC:=ZC_INFO.FC;
                        zus.tab.FW:=ZC_INFO.FW;
                        zus.tab.KC:=ZC_INFO.KC;
                        zus.tab.FP:=ZC_INFO.FP;
                        zus.tab.ZA:=P.ZA;
                        zus.tab.ZN:='N';
                        zus.tab.ZUA:=_zua;
                        zus.tab.add()
                     || _msg:=' '+ZC.P().OSOBA().NAZWISKO+' ' +OSOBA.PIERWSZE+' [nr teczki - '+form(P.T)+']:'@;
                        {? KOMM.find_msg(_msg) || KOMM.set_root(_msg) || KOMM.sect_beg(_msg) ?};
                        {? _pol
                        || _kom:='Umowa: %1, zawarta dnia: %2 - brak wprowadzonego numeru PESEL.'@[ZC.NU, $ZC.DZ];
                           KOMM.add(_kom,4)
                        |? ~_pdu
                        || _kom:='Umowa: %1, zawarta dnia: %2 - brak wprowadzonego numeru PESEL lub daty urodzenia.'@
                                 [ZC.NU, $ZC.DZ];
                           KOMM.add(_kom,4)
                        |? _pdp
                        || _kom:='Umowa: %1, zawarta dnia: %2 - brak wprowadzonego numeru PESEL '
                                 'lub dokumentu potwierdzającego tożsamość.'@[ZC.NU, $ZC.DZ];
                           KOMM.add(_kom,4)
                        ?};
                        {? ~_tre
                        || _kom:='Umowa: %1, zawarta dnia: %2 - brak wprowadzonego przedmiotu umowy.'@[ZC.NU, $ZC.DZ];
                           KOMM.add(_kom,4)
                        ?};
                        KOMM.sect_end()
                     ?}
                  ?}
               ?};
               _zc.next()
            !}
         ?}
      || echo('');
         _cntxpop();
         _clear();
         return
      ?};
      echo('')
   ?};

:: informacje o umowach bez wprowadzonego przedmiotu umowy
   {? ~KOMM.empty()
   || KOMM.select()
   ?};

:: przygotowanie tabeli z danymi podzielonymi na zgłoszenia (limit 10 umów)
   {? zus.tab.size()>0
   || zus.tab.fld_attr(,2);
      {? zus.tab.select()
      || zus.tab.index(_zusndx);
         zus.tab.prefix('T');
         {? zus.tab.first()
         || {!
            |? {? ZC.seek(zus.tab.ZCREF)
               || _ind+=1;
                  {? _zlec<>#ZC.P | _ind>10
                  || _ind:=1;
                     __RUD.blank();
                     __RUD.OSOBA:=#ZC.P().OSOBA;
                     __RUD.NAZWISKO:=ZC.P().OSOBA().NAZWISKO;
                     __RUD.PIERWSZE:=OSOBA.PIERWSZE;
                     __RUD.PESEL:=OSOBA.PESEL;
                     __RUD.PRZ:=#ZC.P;
                     __RUD.CEL:=ZUS.RODZAJ;
                     ($('__RUD.ZC'+$_ind+':='+$#ZC.ref+''))();
                     __RUD.add();
                     _zlec:=#ZC.P
                  || ($('__RUD.ZC'+$_ind+':='+$#ZC.ref+''))();
                     __RUD.put()
                  ?}
               ?};
               zus.tab.next()
            !}
         ?}
      ?}
   ?};

:: zapis do pliku
   ZUS_RAP.prefix();
   _inTerm:=exec('interm','#system');
   _size:=__RUD.size()-1;
   {? __RUD.first()
   || progress(,'Zapis danych do pliku ZUS RUD'@,'Proszę czekać...'@,1);
      ZC.cntx_psh();
      ZC.prefix();
      _id_dok:=1;
      _nazwa:=ZUS.PLIK;
      KOMM.init(150,,'Zapis formularzy ZUS RUD do plików'@);
      _l_name:=+ZUS.PLIK+4;
      _dest:=exec('nazwa_pliku','rap_zus')-_l_name;
      _zip:=_dest+exec('get_unique_file_name','#file','rud_'+gsub(form(date(),,4),'.','')+'.zip',_dest);
      {!
      |? ZUS.PLIK:=_nazwa+'_'+$_id_dok;
         {? _out:=exec('otworz','rap_zus','ZUS RUD')
         || exec('xml_rud_zapisz','rap_zus',__RUD,_out,ZUS.DATA);
            fclose(_out);
            _name:=exec('nazwa_pliku','rap_zus');
           {? _inTerm
           || _pth:=_name;
              _name:=ZUS.PLIK+'.xml';
              {? _size
              || fpack_add(_zip,_pth)
              || dlg_save(_pth,0,_name)
              ?}
           ?};
            KOMM.add(
               'Proces tworzenia raportu został zakończony '
               '(definicja zapisana w pliku %1).'@[_name]
            )
         ?};
         _id_dok+=1;
         __RUD.next()
      !};
      prgs_clr;
      {? _size
      || {? dlg_save(_zip,0,)=''
         || _msg:='Wystąpił błąd podczas zapisu danych.'@;
            FUN.emsg(_msg);
            ZC.cntx_pop();
            _cntxpop();
            _clear();
            return()
         ?}
      ?};
      {? ~KOMM.empty() || KOMM.select() ?};
      ZC.cntx_pop()
   || _msg:='Nie znaleziono osób, dla których należałoby utworzyć raport.\n'@;
      {? ~_inTerm || _msg+='Nie importuj plików z katalogu %1 w "PUE".'@[ZUS.FOLDER] ?};
      FUN.emsg(_msg)
   ?};
   _cntxpop();
   _clear()
?};
~~


\xml_rud_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Formuła zapisująca kompletne raporty RUD do plików w formacie XML
::   WE: _a - identyfikator bufora raportu
::       _b - uchwyt do pliku raportu
::       _c - data wypełnienia raportu
::   WY:
::  OLD: \xml_zapisz/rap_rud.fml
::----------------------------------------------------------------------------------------------------------------------
_bufor:=_a;
_file:=_b;
_data:=_c;

:: Funkcja zapisu do pliku
_save:=exec('to_file','rap_zus');
:: Konwersja znaków zastrzezonych w XML
_cxml:=exec('cxml','rap_zus');
_cdxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";
_dataxml:=_cdxml(_data);

{? ZUS.GIODO='T' || exec('rap_zus','giodo',_data,'RUD') ?};

{? _file
||
:: Nagłówek dokumentu
   exec('xml_head_rud1','rap_zus',_file,_dataxml);

   {? OSOBA.seek(_bufor.OSOBA,)
   || _save(_file,'<wnio:TrescDokumentu format="" kodowanie="XML" rodzaj="wniosek">');
::    Rodzaj wniosku
      _save(_file,'<wnio:RodzajWniosku>');
      _save(_file,'   <wnio:Zgloszenie>'+{? _bufor.CEL=1 || 'true' || 'false' ?}+'</wnio:Zgloszenie>');
      _save(_file,'   <wnio:KorektaZgloszenia>'+{? _bufor.CEL<>1 || 'true' || 'false' ?}+'</wnio:KorektaZgloszenia>');
      _save(_file,'</wnio:RodzajWniosku>');

::    I. Dane zamawiającego wykonanie
      exec('xml_dane_zamaw','rap_zus',_file,'DaneZamawiajacego');
      exec('xml_adres_zamaw','rap_zus',_file,'AdresZamawiajacego');

::    II. Dane wykonawcy
      exec('xml_dane_wykon','rap_zus',_file,'DaneWykonawcy');
::    Adres zamieszkania
      {? exec('szukaj','osoba','C',ZC.DZ)
      || exec('xml_adres_wykon','rap_zus',_file,'AdresZamieszkania','C')
      |? exec('szukaj','osoba','S',ZC.DZ)
      || exec('xml_adres_wykon','rap_zus',_file,'AdresZamieszkania','S')
      ?};
::    Adres do korespondencji (jesli inny niż poprzedni)
      exec('xml_adres_wykon','rap_zus',_file,'AdresDoKorespondencji','K');

::    III. Informacja o zawartych umowach o dzieło
      _save(_file,'<wnio:Umowy>');
      _licznik:=0;

      {! _ind:= 1 // 1 .. 10
      |? ($(!_bufor+'.ZC'+$_ind))()>0 |!
         {? ZC.seek(($(!_bufor+'.ZC'+$_ind))(),)
         || {? ~ZUS_RAP.find_key(ZC.P().OSOBA,'RUD',ZC.ref)
            || exec('get_ZC_INFO','zlec_rh',_data);
               ZUS_RAP.prefix(); ZUS_RAP.blank();
               ZUS_RAP.RAPORT:='RUD';
               ZUS_RAP.ZC:=ZC.ref;
               ZUS_RAP.ZC_TTUB:=ZC_INFO.TTUB;
               ZUS_RAP.ZC_PREM:=ZC_INFO.PREM;
               ZUS_RAP.ZC_STNP:=ZC_INFO.STNP;
               ZUS_RAP.DATA:=date();
               ZUS_RAP.OSOBA:=P.OSOBA;
               ZUS_RAP.USER:=OPERATOR.USER;
               ZUS_RAP.add()
            ?};

            _save(_file,'  <wnio:UmowaODzielo'+$_ind+'>');
            _save(_file,'     <wnio:DataZawarcia>'+_cdxml(ZC.DZ)+'</wnio:DataZawarcia>');
            _save(_file,'     <wnio:Od>'+_cdxml(ZC.DU)+'</wnio:Od>');
            _save(_file,'     <wnio:Do>'+_cdxml(ZC.DW)+'</wnio:Do>');
            _save(_file,'     <wnio:PrzedmiotUmowy>'+_cxml(~-ZC.memo_txt(0,1,'TRESC'),150)+'</wnio:PrzedmiotUmowy>');
            _save(_file,'  </wnio:UmowaODzielo'+$_ind+'>');
            _licznik+=1
         ?}
      !};
      _save(_file,'  <wnio:LiczbaUmow>'+$_licznik+'</wnio:LiczbaUmow>');
      _save(_file,'  <wnio:LiczbaUmowRobocza>'+$_licznik+'</wnio:LiczbaUmowRobocza>');
      _save(_file,'</wnio:Umowy>');

::    IV. Oswiadczenie platnika skladek
      _save(_file,'<wnio:Data>'+_dataxml+'</wnio:Data>');

::    Zakonczenie dokumentu
      _save(_file,'</wnio:TrescDokumentu>')
   ?};
:: Zakończenie pliku
   _save(_file,'</wnio:Dokument>')
?}


\xml_dane_zamaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Dane indentyfikacyjne zamawiającego wykonanie umowy - blok sprawozdan XML do Platnika
::   WE: _a - uchwyt pliku do zapisu
::       _b - oznaczenie bloku [STRING] - liczba rzymska
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_blok:=_b;
_cxml:=exec('cxml','rap_zus');
_save:=exec('to_file','rap_zus');

_save(_file,'<wnio:'+_blok+'>');
{? +KST.NIP || _save(_file,'  <wnio:NIP>'+_cxml(KST.NIP,10,'- ')+'</wnio:NIP>') ?};
{? +KST.REG || _save(_file,'  <wnio:REGON>'+_cxml(KST.REG,14)+'</wnio:REGON>') ?};
:: _save(_file,'  <PESEL></PESEL>');
:: _save(_file,'  <RodzajDokumentu></RodzajDokumentu>');
:: _save(_file,'  <SeriaINumerDokumentu></SeriaINumerDokumentu>');
:: _save(_file,'  <DataUrodzenia></DataUrodzenia>');
:: _save(_file,'  <Imie></Imie>');
:: _save(_file,'  <Nazwisko></Nazwisko>');
{? +KST.SKROT || _save(_file,'  <wnio:NazwaSkrocona>'+~-_cxml(KST.SKROT,31)+'</wnio:NazwaSkrocona>') ?};
_save(_file,'</wnio:'+_blok+'>');
1


\xml_adres_zamaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Dane adresowe zamawiającego wykonanie umowy - blok sprawozdan XML do Platnika
::   WE: _a - uchwyt pliku do zapisu
::       _b - oznaczenie bloku [STRING] - liczba rzymska
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_blok:=_b;
_cxml:=exec('cxml','rap_zus');
_save:=exec('to_file','rap_zus');

_save(_file,'<wnio:'+_blok+'>');
{? +KST.ULICA  || _save(_file,'  <wnio:Ulica>'+_cxml(~-KST.ULICA,30)+'</wnio:Ulica>') ?};
{? +KST.DOM    || _save(_file,'  <wnio:NumerDomu>'+_cxml(~-KST.DOM,8)+'</wnio:NumerDomu>') ?};
{? +KST.LOKAL  || _save(_file,'  <wnio:NumerLokalu>'+_cxml(~-KST.LOKAL,8)+'</wnio:NumerLokalu>') ?};
{? +KST.KOD    || _save(_file,'  <wnio:KodPocztowy>'+_cxml(~-KST.KOD,6)+'</wnio:KodPocztowy>') ?};
{? +KST.MIASTO || _save(_file,'  <wnio:Miejscowosc>'+_cxml(~-KST.MIASTO,26)+'</wnio:Miejscowosc>') ?};
{? +KST.TEL    || _save(_file,'  <wnio:NumerTelefonu>'+_cxml(KST.TEL,30)+'</wnio:NumerTelefonu>') ?};
{? +KST.EMAIL  || _save(_file,'  <wnio:Email>'+_cxml(~-KST.EMAIL,50)+'</wnio:Email>') ?};
_save(_file,'</wnio:'+_blok+'>');
1


\xml_dane_wykon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Dane identyfikacyjne osoby wykonującej umowę (wersja 1) - blok sprawozdan XML do Platnika
::   WE: _a - uchwyt pliku do zapisu
::       _b - numer bloku [STRING] - liczba rzymska
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_blok:=_b;
_save:=exec('to_file','rap_zus');
_cxml:=exec('cxml','rap_zus');
_cdxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";

_save(_file,'<wnio:'+_blok+'>');
{? +(|OSOBA.PESEL)
|| _save(_file,'   <wnio:PESEL>'+_cxml(OSOBA.PESEL,11)+'</wnio:PESEL>')
?};
_rodzaj:=''; _sernum:='';
{? OSOBA.PESEL=''
|| {? OSOBA.OBCY='T'
   || _rodzaj:='2'; _sernum:=~-OSOBA.PASZPORT
   || _rodzaj:='1'; _sernum:=~-OSOBA.DOWOD
   ?}
?};
{? _rodzaj<>'' & _sernum<>''
|| _save(_file,'   <wnio:RodzajDokumentu>'+_cxml(_rodzaj,14)+'</wnio:RodzajDokumentu>');
   _save(_file,'   <wnio:SeriaINumerDokumentu>'+_cxml(_sernum,9,'- ')+'</wnio:SeriaINumerDokumentu>')
?};
_datur:={? OSOBA.UR_DATA<>#0
        || OSOBA.UR_DATA
        || exec('pesel_dt','#id',OSOBA.PESEL)
        ?};
{? type_of(_datur)=type_of(date())
|| _save(_file,'   <wnio:DataUrodzenia>'+_cdxml(_datur)+'</wnio:DataUrodzenia>')
?};
_save(_file,'   <wnio:Imie>'+_cxml(~-OSOBA.PIERWSZE,22)+'</wnio:Imie>');
_save(_file,'   <wnio:Nazwisko>'+_cxml(~-OSOBA.NAZWISKO,31)+'</wnio:Nazwisko>');
_save(_file,'</wnio:'+_blok+'>');
1


\xml_adres_wykon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Dane adresowe wykonawcy umowy
::   WE: _a - uchwyt pliku do zapisu
::       _b - numer bloku [STRING] - liczba rzymska
::       _c - rodzaj adresu
::       [_d] - opcjonalny data wyszukiwania adresu
:: UWAGA: Argumenty wejsciowe nie podlegaja weryfikacji
::        Formula pracuje na biezacym ustawieniu bufora OSOBA
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_sekcja:=_b;
_adres:=~-_c;
{? var_pres('_d')<>type_of(date) || _d:=date ?};
_dataADR:=_d;

_save:=exec('to_file','rap_zus');
_cxml:=exec('cxml','rap_zus');
_wiersz:="{? +(|_d)
          || _tab:=3*' '; _save:=_a; _file:=_b; _sekcja:=_c; _wartosc:=_d;
             _save(_file,_tab+'<'+_sekcja+'>'+_wartosc+'</'+_sekcja+'>')
          ?};
          1
         ";

{? exec('szukaj','osoba',_adres,_dataADR)
|| _kodp:=gsub(OS_ADRES.KOD,'-','');
   _kodpocz:={? ~-OS_ADRES.KRAJ().KODZUS='PL'  || _cxml(OS_ADRES.KOD,6)
             |? ~-OS_ADRES.KRAJ().KODZUS<>'PL' || _cxml(OS_ADRES.KOD,12) || ''
             ?};
   _panstwo:={? ~-OS_ADRES.KRAJ().KODISO<>'PL' || _cxml(~-OS_ADRES.KRAJ().NAZ,40) || '' ?};
   _miasto:={? +(~-OS_ADRES.MIASTO) || _cxml(~-OS_ADRES.MIASTO,26) || '' ?};
   _ulica:={? +(~-OS_ADRES.ULICA) || _cxml(~-OS_ADRES.ULICA,30) || '' ?};
   _dom:={? +(|OS_ADRES.DOM) || _cxml(~-OS_ADRES.DOM,8) || '' ?};
   _lokal:={? +(|OS_ADRES.LOKAL) || _cxml(~-OS_ADRES.LOKAL,8) || '' ?};
   _tel:={? +(|OS_ADRES.TEL) || _cxml(OS_ADRES.TEL,15) || '' ?};
   _email:={? +(|OS_ADRES.EMAIL) || _cxml(~-OS_ADRES.EMAIL,50) || '' ?};

   _save(_file,'<wnio:'+_sekcja+'>');
   {? _adres='K'
   || _wiersz(_save,_file,'wnio:Ulica',_ulica);
      _wiersz(_save,_file,'wnio:NumerDomu',_dom);
      _wiersz(_save,_file,'wnio:NumerLokalu',_lokal);
      _wiersz(_save,_file,'wnio:KodPocztowy',_kodpocz);
      _wiersz(_save,_file,'wnio:Miejscowosc',_miasto);
      _wiersz(_save,_file,'wnio:NazwaPanstwa',_panstwo);
      _wiersz(_save,_file,'wnio:NumerTelefonu',_tel);
      _wiersz(_save,_file,'wnio:Email',_email)
   ||
      _wiersz(_save,_file,'wnio:Ulica',_ulica);
      _wiersz(_save,_file,'wnio:NumerDomu',_dom);
      _wiersz(_save,_file,'wnio:NumerLokalu',_lokal);
      _wiersz(_save,_file,'wnio:KodPocztowy',_kodpocz);
      _wiersz(_save,_file,'wnio:Miejscowosc',_miasto);
      _wiersz(_save,_file,'wnio:NazwaPanstwa',_panstwo)
   ?};
   _save(_file,'</wnio:'+_sekcja+'>')
?}


\xml_head_rud1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Naglowek dokumentu XML RUD wersja 1
::   WE: _a - uchwyt pliku do zapisu
::       _b - data utworzenia w formacie XML
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_dataxml:=_b;
_save:=exec('to_file','rap_zus');

_save(_file,'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="styl.xsl"?> '+
     '<wnio:Dokument xmlns="http://pue.zus.pl/rd/RUD/1/" '+
     'xmlns:adr="http://crd.gov.pl/xml/schematy/adres/2009/11/09/" '+
     'xmlns:ds="http://www.w3.org/2000/09/xmldsig#" '+
     'xmlns:inst="http://crd.gov.pl/xml/schematy/instytucja/2009/11/16/" '+
     'xmlns:meta="http://crd.gov.pl/xml/schematy/meta/2009/11/16/" '+
     'xmlns:oso="http://crd.gov.pl/xml/schematy/osoba/2009/11/16/" '+
     'xmlns:str="http://crd.gov.pl/xml/schematy/struktura/2009/11/16/" '+
     'xmlns:un.ece.unedocs.cl.iso3166="http://www.unece.org/etrades/unedocs/repository/codelists/xml/CountryCode.xsd" '+
     'xmlns:wnio="http://pue.zus.pl/rd/RUD/1/" '+
     'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" '+
     'xsi:schemaLocation="http://pue.zus.pl/rd/RUD/1/ http://pue.zus.pl/rd/RUD/1/schemat.xsd">');

_save(_file,'<wnio:OpisDokumentu/>');
_save(_file,'<wnio:DaneDokumentu>');
_save(_file,'  <str:Naglowek>');
_save(_file,'     <str:NazwaDokumentu/>');
_save(_file,'     <meta:Identyfikator typIdentyfikatora="kodTypuDok">');
_save(_file,'        <meta:Wartosc>RUD</meta:Wartosc>');
_save(_file,'     </meta:Identyfikator>');
_save(_file,'     <meta:Identyfikator typIdentyfikatora="wersjaWzoruDokumentu">');
_save(_file,'        <meta:Wartosc>1</meta:Wartosc>');
_save(_file,'     </meta:Identyfikator>');
_save(_file,'  </str:Naglowek>');
_save(_file,'  <str:Adresaci>');
_save(_file,'     <meta:Podmiot>');
_save(_file,'        <inst:Instytucja>');
_save(_file,'           <inst:NazwaInstytucji>Zakład Ubezpieczeń Społecznych</inst:NazwaInstytucji>');
_save(_file,'        </inst:Instytucja>');
_save(_file,'     </meta:Podmiot>');
_save(_file,'  </str:Adresaci>');
_save(_file,'</wnio:DaneDokumentu>');
1


\zaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.14]
:: OPIS: Zwraca kod zawodu wykonywanego dla bieżącego pracownika (bufor tabeli P musi być ustalony)
::   WE: _a [NUMBER] - czy pominąć komunikat [0/1], domyślnie 0 - nie pomijaj komunikatu
::   WY: _zaw [STRING] - kod zawodu wykonywanego
::----------------------------------------------------------------------------------------------------------------------
_kom:=(var_pres('_a')<>type_of(0) | ~_a);
ZAW.cntx_psh();
ZAW.prefix();
_zaw:=form(P.ZAW().KOD);
{? +_zaw<>6
|| {? _kom
   || OSOBA.cntx_psh();
      OSOBA.prefix();
      FUN.emsg('%1 kodu zawodu wykonywanego (powinien mnieć 6 znaków):\n%2 %3\nExport danych dla tej osoby '
         'nie jest możliwy.'@[{? ~+_zaw || 'Brak'@ || 'Błędna długość'@ ?},P.OSOBA().NAZWISKO,OSOBA.PIERWSZE]);
      OSOBA.cntx_pop()
   ?};
   _zaw:=''
?};
ZAW.cntx_pop();

_zaw


\xml_head_kedu53
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.14]
:: OPIS: Naglowek dokumentu XML KEDU_5_3
::   WE: _a - uchwyt pliku do zapisu
::       _b - data utworzenia w formacie XML
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_dataxml:=_b;
_save:=exec('to_file','rap_zus');

_save(_file,'<?xml version="1.0" encoding="UTF-8"?>');
_save(_file,'<KEDU wersja_schematu="1" '+
                  'xmlns="http://www.zus.pl/2021/KEDU_5_3" '+
                  'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" '+
                  'xsi:schemaLocation="http://www.zus.pl/2021/KEDU_5_3 kedu_5_3.xsd">');
_save(_file,'<naglowek.KEDU>');
_save(_file,'  <program><producent>%1</producent><symbol>%2</symbol><wersja>%3</wersja></program>'
   [  exec('producent','#system'),FUN.TYT,exec('wersja','#system')
   ]
);
_save(_file,'<data_utworzenia_KEDU>%1</data_utworzenia_KEDU>'[_dataxml]);
_save(_file,'</naglowek.KEDU>');
~~


\zcna_dt_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.14]
:: OPIS: Sprawdza wypełnienie pola "Data uzyskania/utraty uprawnień do ubezpieczenia zdrowotnego" podczas
::       przygotowywania raportu ZUS ZCNA
::   WE: _a [TABLE] - tabela ZCA z danymi do raportu
::   WY: 0/1 - 0-znaleziono braki dat, 1-wszystko ok
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG) || return(0) ?};
_tab:=_a;
_kom:='';
_ret:=1;

_tab.cntx_psh();
{? _tab.first()
|| {!
   |? {? _tab.DATA=date(0,0,0)
      || _kom+='%1 %2, '[_tab.NAZWISKO,_tab.PIERWSZE]
      ?};

      _tab.next()
   !}
?};
_tab.cntx_pop();

{? +_kom
|| _ret:=0;
   _kom:='Brak wypełnionego pola "Data uzyskania/utraty uprawnień do ubezpieczenia zdrowotnego" dla:\n%1'@[_kom];
   _kom-=2;
   FUN.emsg(_kom)
?};

_ret


\p_info_wer_histrap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Obsługa akcji "Historia raportów" w okienku WER tabeli P_INFO
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('zus_rap_sel','osoba',,'ZUA','ZZA','ZWUA');

~~


\zwua_last
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Sprawdza ostatni zapis ZWUA pracownika
::   WE: [_a][_OSOBA] - wskazanie na pracownika, domyślnie OSOBA.ref()
::       [_b][DATE]   - data na jaką sprawdzamy, domyślnie date()
::   WY: _ret [OBJ]   - tablica elementów nazwanych:
::                       * .st - Czy ZWUA jest ostatnie (nie występuje po nim ZUA/ZZA)?
::                               1 - ZWUA jest "ostatnie",
::                               0 - po ZWUA występuje zapis ZUA/ZZA,
::                              -1 - nie znaleziono ZWUA.
::                       * .dt - Data znalezionego raportu ZWUA
::----------------------------------------------------------------------------------------------------------------------
_osoba:={? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=OSOBA || _a || OSOBA.ref() ?};
_d0:=date(0,0,0);
_dt:={? var_pres('_b')=type_of(_d0) || _b || date() ?};
_ret:=obj_new('st','dt');
_ret.st:=-1;
_ret.dt:=_d0;

ZUS_RAP.cntx_psh();
ZUS_RAP.index('ZUS_RAP');
ZUS_RAP.prefix(_osoba,'ZWUA');
{? ZUS_RAP.find_le(_dt)
|| _ret.st:=1;
   _ret.dt:=ZUS_RAP.DATA;
   _raps:=spli_str('ZUA,ZZA',',');
   {! _ii:=1..obj_len(_raps)
   |! ZUS_RAP.prefix(_osoba,_raps[_ii]);
      {? ZUS_RAP.find_ge(_ret.dt)
      || _ret.st:=0
      ?}
   !};
   obj_del(_raps)
?};
ZUS_RAP.cntx_pop();

_ret


\rap_last
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Sprawdza ostatni zapis ZUS_RAP pracownika
::   WE: [_a][_OSOBA] - wskazanie na pracownika, domyślnie OSOBA.ref()
::       [_b][DATE]   - data na jaką sprawdzamy, domyślnie date()
::       [_c][STRING] - ograniczenie (lista typów raportów jakie należy brać pod uwagę podczas sprawdzania) oddzielone
::                      przecinkami, np. 'ZUA,ZWUA', domyślnie wszystkie występujące w kartotece (brak ograniczenia)
::   WY: _ret [OBJ]   - tablica elementów nazwanych:
::                       * .typ [STRING] - Typ znalezionego raportu, ciąg pusty jeśli brak
::                       * .dt [DATE]    - Data znalezionego raportu
::----------------------------------------------------------------------------------------------------------------------
_osoba:={? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=OSOBA || _a || OSOBA.ref() ?};
_d0:=date(0,0,0);
_dt:={? var_pres('_b')=type_of(_d0) || _b || date() ?};
_ret:=obj_new('typ','dt');
_ret.typ:='';
_ret.dt:=_d0;
{? var_pres('_c')=type_of('') & +_c
|| _typy:=',%1,'[_c]
|| _TYPS:=sql('select distinct ZUS_RAP.RAPORT from ZUS_RAP');
   {? _TYPS.first()
   || _typy:=',';
      {!
      |? _typy+='%1,'[_TYPS.RAPORT];

         _TYPS.next()
      !}
   || return(_ret)
   ?}
?};

ZUS_RAP.cntx_psh();
ZUS_RAP.index('ZUS_DATA');
ZUS_RAP.prefix(_osoba);
{? ZUS_RAP.find_le(_dt)
|| {!
   |? {? _typy*ZUS_RAP.RAPORT
      || _ret.typ:=ZUS_RAP.RAPORT;
         _ret.dt:=ZUS_RAP.DATA
      ?};

      _ret.typ='' & ZUS_RAP.prev()
   !}
?};
ZUS_RAP.cntx_pop();

_ret


\xml_head_kedu54
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Naglowek dokumentu XML KEDU_5_4
::   WE: _a - uchwyt pliku do zapisu
::       _b - data utworzenia w formacie XML
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_file:=_a;
_dataxml:=_b;
_save:=exec('to_file','rap_zus');

_save(_file,'<?xml version="1.0" encoding="UTF-8"?>');
_save(_file,'<KEDU wersja_schematu="1" '+
                  'xmlns="http://www.zus.pl/2021/KEDU_5_4" '+
                  'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" '+
                  'xsi:schemaLocation="http://www.zus.pl/2021/KEDU_5_4 kedu_5_4.xsd">');
_save(_file,'<naglowek.KEDU>');
_save(_file,'  <program><producent>%1</producent><symbol>%2</symbol><wersja>%3</wersja></program>'
   [  exec('producent','#system'),FUN.TYT,exec('wersja','#system')
   ]
);
_save(_file,'<data_utworzenia_KEDU>%1</data_utworzenia_KEDU>'[_dataxml]);
_save(_file,'</naglowek.KEDU>');
~~


\xml_head_kedu_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Zwraca nazwę formuły aktualnego nagłówka dokumentu XML KEDU_xx.
::       Formuła ma na celu umożliwienie zmiany nagłówka dla raportów ZUS w jednym miejscu, a nie w każdym raporcie
::       z osobna.
::       Formuła jest wykorzystywana w raportach:
::          * DRA -  \zus_dra_zapisz/!ppl_zes_wzus.fml
::          * RCA -  \zus_rca_zapisz/!ppl_zes_wzus.fml
::          * RPA -  \zus_rpa_zapisz/!ppl_zes_wzus.fml
::          * RSA -  \zus_rsa_zapisz/!ppl_zes_wzus.fml
::          * RIA -  \zus_ria_zapisz/!ppl_zes_wzus.fml
::          * ZCNA - \xml_zcna_zapisz/rap_zus.fml
::          * ZSWA - \xml_zswa_zapisz/rap_zus.fml
::          * ZUA -  \xml_zua_zapisz/rap_zus.fml
::          * ZWUA - \xml_zwua_zapisz/rap_zus.fml
::          * ZZA -  \xml_zza_zapisz/rap_zus.fml
::   WE:
::   WY: [STRING] - nazwa formuły z pliku rap_zus.fml zawierającej naglowek dokumentu XML KEDU w najnowszej wersji
::----------------------------------------------------------------------------------------------------------------------
'xml_head_kedu54'

:Sign Version 2.0 jowisz:1045 2024/02/14 12:20:28 c400371fc3f706b6575a01c8a7654a5a77f1ea87b89499a4135160fb4e877fee577026c1b40949afa9b16fe521997659bdc0ce878e3d29958605d65a7e0fc2199ac013549a11435de5b2d5954c03e500241fe1a749e3f71b805f5467730fa49acbd937bb9ea18a7d8bb220c489f72065b33e4032d299e75dd950db3f0d394d34
