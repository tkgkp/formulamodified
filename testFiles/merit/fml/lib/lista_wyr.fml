:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: lista_wyr.fml
:: Utworzony: 09.12.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Definicje funkcji wykorzystywanych do obsługi wyrównań wypłacanych świadczeń (zmiany wymuszone przez ZUS).
::             1. Konfiguracja i konwersja.
::             2. Obsługa pól.
::             3. Akcje menu.
::======================================================================================================================


\wyr_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Działanie funkcji zależy od parametrów wywołania.
::       Funkcja wywołana bez parametrów zwraca listę kodów składników (rubryk) opisujących wyrównania wypłaconych
::       świadczeń. Kody są oddzielone przecinkami. Lista zaczyna się i kończy przecinkiem.
::       Przekazanie parametru _a spowoduje sprawdzenie, czy na liście znajduje sie kod _a. Przy takim wywołaniu, listę
::       można rozszerzyć (_b).
::   WE: [_a] [INTEGER] - Kod składnika, którego wystąpienie na liście kodów zostanie sprawdzone.
::       [_b] [STRING]  - Rozszerzenie listy.
::   WY: Lista kodów lub informacja, czy wskazany kod znajduje się na liście.
::  OLD: \wyr_zas/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_lista:=',467,469,511,513,517,524,530,537,7018,7071';
{? _=0
|| return(_lista)
?};
{? var_pres('_a')=type_of(0)
|| (_lista+{? var_pres('_b')=type_of('') || _b || '' ?})*(','+$_a+',')
?}


\nieo2wyr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Określa właściwy kod wyrównania świadczenia na podstawie podanego argumentem kodu nieobecności.
::   WE: _a [INTEGER] - Kod nieobecności.
::   WY: Kod wyrównania.
::  OLD: \nieo2wyr/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
{? __RUB.sys_attr(_a,12212) || 517
|? __RUB.sys_attr(_a,1227)  || 524
|? __RUB.sys_attr(_a,1225)  || 530
|? __RUB.sys_attr(_a,12211) || 511
|? __RUB.sys_attr(_a,1211)  || 467
|? __RUB.sys_attr(_a,1212)  || 469
|? __RUB.sys_attr(_a,12213) || 513
|? __RUB.sys_attr(_a,1222)  || 537
|| _a
?}


\kdsw_zas2wyr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Formuła "zamienia" kod świadczenia/przerwy zasiłku na odpowiadający mu kod świadczenia/przerwy wyrównania.
::       Innymi słowy: dla obowiązkowego argumentu wywołania, będącego kodem świadczenia przerwy zasiłku zwraca
::       kod świadczenia/przerwy odpowiadającego mu wyrównania.
::   WE: _a [STRING] - Kod świadczenia/przerwy zasiłku.
::   WY: Kod świadczenia/przerwy wyrównania.
::  OLD: \kdsw_zas2wyr/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _kod:=form(_a)
|| return('')
?};

{? _kod='311' || '315'
|? _kod='319' || '320'
|? _kod='325' || '326'
|? _kod='327' || '328'
|? _kod='312' || '316'
|? _kod='313' || '317'
|? _kod='314' || '318'
|? _kod='321' || '323'
|? _kod='322' || '324'
|? _kod='331' || '335'
|? _kod='333' || '337'
|| ''
?}


\sklp2wyn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2010B]
:: OPIS: Dla nieobecności podczas urlopu macierzyńskiego, określa kod świadczenia wyrównania właściwy dla podanego
::       argumentem kodu składnika "podstawowego".
::   WE: _a [INTEGER] - Kod składnika.
::   WY: Kod świadczenia
::  OLD: \sklp2wyn/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=467  || '331'
|? _a=469  || '333'
|? _a=511  || '313'
|? _a=513  || '314'
|? _a=517  || '313'
|? _a=7018 | _a=7071 || '329'
:Rubryka 524 związana jest z wieloma kodami świadczenia/przerwy (315, 320, 326, 328). Ponieważ brak jest dodatkowych
:informacji umożliwiających określenie właściwego kodu - pole nie zostanie wypełnione automatycznie - operator sam musi
:wskazać przyczynę wyrównania (kod).
|? _a=524  || ''
|? _a=530  || '312'
|? _a=537  || '321'
|| ''
?}


\sklp2wyr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Określa kod świadczenia wyrównania właściwy dla podanego argumentem - numeru rubryki zasiłku.
::   WE: _a [INTEGER] - Kod składnika.
::   WY: Kod świadczenia
::  OLD: \sklp2wyr/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=467 | _a=710 || '335'
|? _a=469 | _a=715 || '337'
|? _a=511 | _a=711 || '317'
|? _a=513 | _a=716 || '318'
|? _a=517 | _a=712 || '317'
|? _a=7018 | _a=7071 || '329'
:Rubryka 524 związana jest z wieloma kodami świadczenia/przerwy (315, 320, 326, 328). Ponieważ brak jest dodatkowych
:informacji umożliwiających określenie właściwego kodu - pole nie zostanie wypełnione automatycznie - operator sam musi
:wskazac przyczynę wyrównania (kod).
:Wyjątkiem jest obsługa z poziomu nieobecności (zarówno od strony N jak i OS_N).
|? _a=524
|| _par:=params_get();
   {? var_pres('_par')>100 & var_pres('lsw',_par)>100 & var_pres('tryb',_par.lsw)=type_of('')
   || _tryb:=_par.lsw.tryb;
      _kod:=
         {? _tryb='N'
         || N.KDSW().KOD

         |? _tryb='ZC_N'
:           Dla wywołania z umów-zleceń odwołujemy się do ZC_N, a nie do OS_N - ten rekord nie jest ustalony.
:           Podczytujmy wartość z rekordu na dysku, nie z tego, który tworzymy.
         || ZC_N.OS_N().KDSW().KOD
         || ''
         ?};
      {? _kod='' || '' || exec('kdsw_zas2wyr','lista_wyr',_kod) ?}
   || ''
   ?}
|? _a=713 || '315'
|? _a=530 | _a=714 || '316'
|? _a=537 | _a=717 || '323'
|| ''
?}


\test_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Sprawdź, czy rubryka może być wykorzystana. Zależnie od tego czy dostęp do kartoteki wyrównań jest realizowany
::       z poziomu kartoteki nieobecności czy z poziomu listy płac dostępne są odpowiednio rubryki opisujące wyrównania
::       wypłaconych świadczeń lub rubryki klasy S.
::       Formuła wykorzystywana również na rzecz wyrównań zasiłków zleceniobiorców (ZC_N) (poza przypadkami opisanymi
::       w \lsw_select/lista_wyr.fml).
::   WE: _a [STRING] - Identyfikator zakresu, miejsca wywołania obsługi wyrównań.
::   WY: 1 - Bieżąca rubryka może być użyta.
::       0 - Bieżąca rubryka nie może być użyta.
::  OLD: \test_rb/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & ',N,LSW,H,LS,ZC_N,R,'*(','+_a+',')
|| _tryb:=_a
|| return(0)
?};

{? _tryb='N' | _tryb='ZC_N' | _tryb='LSW' | _tryb='R'
|| exec('wyr_zas','lista_wyr',R.RN,'710,711,712,713,714,715,716,717,')
|| R.RK='S'
?}


\lsw_params
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Funkcja tworzy tablice z elementami nazwanymi wykorzystywane podczas obsługi tabeli LSW.
::       Tablica będzie używana z wykorzystaniem mechanizmy params_set() / params_get() i zastępuje wcześniejsze
::       korzystanie ze zmiennej __LSW.
::   WE: [_a] - Identyfikator tablicy:
::          ''    - Tablica do przechowywania trybu pracy [domyślnie];
::          'fld' - Tablica pomocnicza do obsługi pól OD, DO.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_id:={? var_pres('_a')=type_of('') || _a || '' ?};
{? _id=''
|| obj_new('tryb','zn')
|? _id='fld'
|| obj_new('OD','DO','LSW_DZ')
?}


\lsw_r_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wartość początkowa pola LSW.R - Składnik.
::       Jeśli dostęp realizowany poprzez kartotekę nieobecności to kod "wyrównującego" składnika ustalany jest
::       na podstawie kodu aktualnej nieobecności. W pozostałych przypadkach brak wartości domyślnej.
::       Uwaga: formuła wykorzystywana również na rzecz pola ZC_N.R.
::   WE:
::   WY:
::  OLD: \wp_rb/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_tryb:=params_get().lsw.tryb;

_ret:=null();
{? _tryb='N'
|| {? _rn:=exec('nieo2wyr','lista_wyr',N.NB().RN)
   || _ret:=__RUB.ref(_rn)
   ?}
|? _tryb='H'
|| _ret:=__RUB.ref(524)
?};
_ret


\lsw_r_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowanie pola LSW.R - Składnik. Założenie filtra.
::       Uwaga: formuła wykorzystywana również na rzecz pola ZC_N.R.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tryb:=params_get().lsw.tryb;
{? _tryb<>'H'
|| _R:=tab_tmp(1,'REF','STRING[16]','SQL-ref');
   R.prefix();
   {? R.first()
   || {!
      |? {? exec('test_r','lista_wyr',_tryb)
         || _R.REF:=$R.ref();
            _R.add()
         ?};
         R.next()
      !}
   ?};
   R.f_set('RN',,'REFERENCE in (select REF from :_a)',_R);
   1
?}


\lsw_r_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola LSW.R - Składnik. Zdjęcie filtra. Zmiana kodu ZUS wyrównania po zmianie kodu składnika.
::       Uwaga na wyrównania świadczeń rehabilitacyjnych.
::       Uwaga: formuła wykorzystywana również na rzecz pola ZC_N.R.
::   WE:
::   WY:
::  OLD: \pr_rb/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
R.f_clear();
{? fld()
|| _par:=params_get();
   params_set(_par);
   _tryb:=_par.lsw.tryb;
   _TAB:={? _tryb='ZC_N' || ZC_N || LSW ?};
   _kod:=_TAB.KDSW().KOD;
   {? ~((R.RN=537 | R.RN=717) & (_kod='323' | _kod='324'))
   || {? _tryb='LSW' | _tryb='R'
      || _kod:=exec('sklp2wyn','lista_wyr',R.RN)
      || _kod:=exec('sklp2wyr','lista_wyr',R.RN)
      ?};
      {? _kod=''
      || _TAB.KDSW:=null()
      || _TAB.KDSW:=exec('kod_zus','nieobecnosc','S',_kod)
      ?}
   ?}
?};
1


\lsw_z_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wartość początkowa pola LSW.Z - Znacznik.
::       Ukrywanie rekordów przy dostępie do tabeli wyrównań z poziomu kartoteki nieobecności (wtedy wartość 'N').
::       Z poziomu listy płac wszystkie rekordy są dostępne.
::   WE:
::   WY:
::  OLD: \wp_zn/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
params_get().lsw.zn


\lsw_od_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wartość początkowa pola LSW.OD - Od dnia.
::       Dla wywołania z poziomu kartoteki nieobecności - data początku aktualnej nieobecności.
::       Przy dostępie poprzez listę płac - data pierwszego dnia miesiąca poprzedzającego miesiąc bieżącej listy płac.
::   WE:
::   WY:
::  OLD: \wp_od/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_tryb:=params_get().lsw.tryb;

{? _tryb='N'
|| N.OD
|? _tryb='LSW' | _tryb='H' | _tryb='R'
|| date(0,0,0)
|? VAR.JESTLIST
|| _dt:=date(O.R,O.M,1)-1;
   date(_dt~1,_dt~2,1)
|| date(0,0,0)
?}


\lsw_do_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wartość początkowa pola LSW.DO - Do dnia.
::       Dla wywołania z poziomu kartoteki nieobecności - data zakończenia aktualnej nieobecności.
::       Przy dostępie poprzez listę płac - data ostatniego dnia miesiąca poprzedzającego miesiąc bieżącej listy płac.
::   WE:
::   WY:
::  OLD: \wp_do/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_tryb:=params_get().lsw.tryb;

{? _tryb='N'
|| N.DO
|? _tryb='LSW' | _tryb='H' | _tryb='R'
|| date(0,0,0)
|? VAR.JESTLIST
|| date(O.R,O.M,1)-1
|| date(0,0,0)
?}


\lsw_kdsw_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wartość początkowa pola LSW.KDSW - Kod świadczenia.
::       Kod określany na podstawie kodu świadczenia/przerwy przypisanego danej nieobecności.
::       Dla wywołania z poziomu listy płac nie jest ustalana.
::   WE:
::   WY: Wskazanie (referencja) na odpowiedni rekord słownika kodów świadczeń/przerw.
::  OLD: \wp_kd/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_tryb:=params_get().lsw.tryb;

_ret:=null();
{? _tryb='N'
|| _kod:=exec('kdsw_zas2wyr','lista_wyr',N.KDSW().KOD);
   {? _kod<>''
   || _ret:=exec('kod_zus','nieobecnosc','S',_kod)
   ?}
|? _tryb='H'
|| _ret:=exec('kod_zus','nieobecnosc','S','311')
?};
_ret


\lsw_lt_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wartość początkowa pola LSW.LT - Lista płac.
::   WE:
::   WY:
::  OLD: \wp_lt/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_tryb:=params_get().lsw.tryb;

{? _tryb<>'H' & _tryb<>'R' & VAR.JESTLIST & exec('o_writable','lista_plac',VAR.NAZWALIS,0)
|| VAR.NAZWALIS
|| ''
?}


\lsw_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za statyczne (niezmienne w trakcie wyświetlania okna) ustawianie właściwości pól
::       tabeli LSW.
::   WE: _a [STRING]  - Tryb pracy określający merytoryczny zakres prezentacji danych.
::       _b [STRING]  - Akronim okna redagowania.
::       _b [INTEGER] - Czy poprawianie zapisu?
::          0 - Nie (akcja Dołącz).
::          1 - Tak (akcja Popraw).
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_tryb:=_a;
_we:=_b;
_put:=_c;

LSW.efld_opt(_we,'mark='+$(_tryb='N' | _tryb='LSW' | _tryb='R'),,'KDSW','KOD');
LSW.efld_opt(_we,'mark='+$(_tryb='N' | _tryb='LSW' | _tryb='LS' | _tryb='R' | (_tryb='H' & _put)),,'KW');
LSW.efld_opt(_we,'mark='+$(_tryb='H'),,'POD');
1


\lsw_okres_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowaniem pól: LSW.OD, LSW.DO, EDIT_VAR.LSW_DZ (zapamiętanie wartości).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fld:=params_get().fld;
_fld.OD:=LSW.OD;
_fld.LSW_DZ:=EDIT_VAR.LSW_DZ;
_fld.DO:=LSW.DO;
1


\edit_var_lsw_dz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Przed wyświetleniem pola EDIT_VAR.LSW_DZ.
::   WE:
::   WY: 1
::  OLD: \mac_wych02/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
EDIT_VAR.LSW_DZ:=0;
{? LSW.OD<>_d0 & LSW.DO<>_d0 & LSW.OD<=LSW.DO
|| EDIT_VAR.LSW_DZ:=LSW.DO-LSW.OD+1
?};
1


\edit_var_lsw_dz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Po redagowaniu pola EDIT_VAR.LSW_DZ.
::   WE:
::   WY: 1
::  OLD: \mac_wych03/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:=params_get().fld;
_d0:=date(0,0,0);
{? EDIT_VAR.LSW_DZ<0
|| EDIT_VAR.LSW_DZ:=0
|? LSW.OD<>_d0 & (EDIT_VAR.LSW_DZ<>_fld.LSW_DZ | LSW.DO=_d0)
|| LSW.DO:=LSW.OD+{? EDIT_VAR.LSW_DZ || EDIT_VAR.LSW_DZ-1 ?}
?};
1


\lsw_od_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola LSW.OD.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_fld:=params_get().fld;
_d0:=date(0,0,0);

{? LSW.OD<>_d0 & LSW.OD<>_fld.OD
|| {? LSW.DO=_d0 & EDIT_VAR.LSW_DZ
   || LSW.DO:=LSW.OD+EDIT_VAR.LSW_DZ-1
   |? LSW.OD<=LSW.DO
   || EDIT_VAR.LSW_DZ:=LSW.DO-LSW.OD+1
   ?}
?};

1


\lsw_do_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola LSW.DO.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_fld:=params_get().fld;
_d0:=date(0,0,0);

{? LSW.DO<>_d0 & LSW.DO<>_fld.DO
|| {? LSW.OD=_d0 & EDIT_VAR.LSW_DZ
   || LSW.OD:=LSW.DO+1-EDIT_VAR.LSW_DZ
   |? LSW.OD<>_d0 & LSW.OD<=LSW.DO
   || EDIT_VAR.LSW_DZ:=LSW.DO-LSW.OD+1
   ?}
?};

1


\lsw_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Główna formuła redagowania i przeglądania wyrównań dla bieżącego pracownika.
::   WE:  _a  [STRING]  - Tryb pracy określający merytoryczny zakres prezentacji danych. Akceptowalne wartości, wraz z
::          opisem znaczenia (w nawiasie wartość pola LSW.Z):
::          N     [N] Wyrównania świadczeń
::          LSW   [M] Świadczenia chorobowe w trakcie urlopu macierzyńskiego
::          H     [H] Zasiłek macierzyński podczas urlopu wychowawczego
::          LS    [ ] Prezentacja wszystkich powyższych
::          R     [R] Podwyższenie zasiłku macierzyńskiego do wysokości świadczenia rodzicielskiego
::       [_b] [INTEGER] - Wyświetlać komunikat wstępny?
::          0 - Nie [domyślnie].
::          1 - Tak.
::       [_c] [STRING] - Znacznik rekordu. Wartość domyślna jest określana na podstawie parametru _a.
::   WY: 0 - Brak lub błędny argument wywołania.
::       1 - Redagowanie odbyło się.
::  OLD: \edycja/wyrskl.fml
::  OLD: \macirzynski/wyrskl.fml
::  OLD: \_lsw/war_tech.fml
::  OLD: \f3_rb/wyrskl.fml
::       Zmienił się sposób wyboru składnika. Obecnie jest realizowany z wykorzystaniem mechanizmu filtrowania rekordów
::       tabeli R. Nie ma więc potrzeby:
::          - korzystania ze zmiennych do obsługi i prezentacji rubryki;
::          - specjalnej obsługi F3;
::          - specjalnej obsługi akcji Wyświetl.
::  OLD: \uwagi/wyrskl.fml - Pole LSW.TRESC prezentowane jest w standardowym oknie redagowania.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & ',N,LSW,H,LS,R,'*(','+_a+',')
|| _tryb:=_a
|| return(0)
?};

{? var_pres('_b')=type_of(0) & _b
|| FUN.info(
      'Wprowadzona modyfikacja może mieć istotny wpływ\n'
      'na dane kartoteki "Wyrównania wypłaconych świadczeń\".\n'
      'Proszę zweryfikować jej zawartość.'@)
?};

: Znacznik rekordu.
_zn:=
   {? var_pres('_c')=type_of('') & +_c=1 || _c
   |? _tryb='N'   || 'N'
   |? _tryb='LSW' || 'M'
   |? _tryb='H'   || 'H'
   |? _tryb='R'   || 'R'
   || ''
   ?};

LSW.cntx_psh();
LSW.clear();
{? _zn=''
|| LSW.index('R');
   LSW.prefix(P.ref());
   LSW.index('LT');
   LSW.prefix(P.ref())

|| LSW.index('OD');
   LSW.prefix(_zn,P.ref());
   LSW.index('ZR');
   LSW.prefix(_zn,P.ref());
   LSW.index('ZLT');
   LSW.prefix(_zn,P.ref())
?};
{? _tryb='H'
|| LSW.index('OD');
   _ws:='WERH_P';
   _we:='REDH';
   _ha:={? N.NB().RN=3 || '' || 'pD:D' ?};
   LSW.actions('WERH',_ha)

|| _ws:='WERN_P';
   _we:='RED'
?};
_lsw:=exec('lsw_params','lista_wyr');
_lsw.tryb:=_tryb;
_lsw.zn:=_zn;
params_set('lsw',_lsw);
LSW.win_sel(_ws);
LSW.win_edit(_we);
LSW.select(,1);
LSW.cntx_pop();
1


\lsw_x_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Blokowanie zapisu do edycji w przypadku zamkniętej listy płac, nieokreślonej listy płac dla rekordu
::       oznakowanego lub składnika "niewłaściwego" dla ścieżki dostępu. Funkcja wykonywana przed wybranymi akcjami
::       wywoływanymi z okna wertowania (Popraw, Usuń).
::   WE:
::   WY: 0 - Brak możliwości zmian.
::       1 - Zmiany są możliwe.
::  OLD: \czy_mod/wyr_skl.fml
::----------------------------------------------------------------------------------------------------------------------
{? LSW.LT<>'' & ~VAR.JESTLIST
|| FUN.info('Wybierz listę płac "%1".'@ [LSW.LT]);
   return(0)
?};
{? ~exec('o_writable','lista_plac',LSW.LT,1)
|| return(0)
?};
1


\lsw_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknach wertowania tabeli LSW.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_lsw:=params_get().lsw;
_fld:=exec('lsw_params','lista_wyr','fld');
params_set(
   'lsw',_lsw,
   'fld',_fld
);

exec('lsw_efld_opt','lista_wyr',_lsw.tryb,'RED',0);
LSW.blank();
LSW.memo_set('','TRESC');
{? LSW.edit("params_set(params_get()); exec('lsw_ae','lista_wyr',0)")
|| LSW.add() & LSW.memo_put(,'TRESC')
?}


\lsw_dolacz_b_h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Obsługa akcji "Dołącz" w oknie WERH (zasiłek macierzyński) dla tabeli LSW.
::  OLD: \mac_wych01/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_lsw:=params_get().lsw;
_fld:=exec('lsw_params','lista_wyr','fld');
params_set(
   'lsw',_lsw,
   'fld',_fld
);

exec('lsw_efld_opt','lista_wyr',_lsw.tryb,'REDH',0);
EDIT_VAR.LSW_DZ:=0;
LSW.blank();
LSW.memo_set('','TRESC');
LSW.index('ZLT');
{? LSW.edit("params_set(params_get()); exec('lsw_ae','lista_wyr',0)")
|| _od:=LSW.OD;
   _do:=LSW.DO;

   _TAB:=tab_tmp(1,'PROC','INTEGER','Procent świadczenia');
   _TAB.PROC:=100;

   _we:=_TAB.mk_edit('Zasiłek macierzyński'@);
   _TAB.win_efld(_we,,'PROC',,,,,,,,'Procent wypłacanego świadczenia'@);
   exec('ok_esc','#window',_TAB,_we,,,,,,,exec('text_red_ok','#window'));
   _TAB.win_edit(_we);

   {!
   |? {? _TAB.edit("__CHK.record(cur_tab(1,1))")
      || FUN.info('Przyjęto %1%% do wyliczeń.'@ [$_TAB.PROC]);
         _TAB.PROC:=_TAB.PROC/100;
         LSW.KW:=LSW.POD/30*_TAB.PROC$2*(LSW.DO-LSW.OD+1)$2;
         {? LSW.add() & LSW.memo_put(,'TRESC')
         || _mc_od:=LSW.OD~1*12+LSW.OD~2;
            _mc_do:=LSW.DO~1*12+LSW.DO~2;
            _koniec:=LSW.DO;
            _ile:=_mc_do-_mc_od;
            exec('p_info_update_add','osoba',,LSW);
            {? _ile
            || do();
               LSW.DO:=date(LSW.OD~1,LSW.OD~2,0);
               LSW.KW:=LSW.POD/30*_TAB.PROC$2*(LSW.DO-LSW.OD+1)$2;
               LSW.put();
               {! .._ile
               |! _od:=LSW.DO+1;
                  _do:=date(_od~1,_od~2,0);
                  LSW.OD:=_od;
                  LSW.DO:={? _koniec<_do || _koniec || _do ?};
                  LSW.KW:=LSW.POD/30*_TAB.PROC$2*(LSW.DO-LSW.OD+1)$2;
                  LSW.add()
               !};
               end();
               LSW.first()
            ?}
         ?};
         0
      || FUN.ask('Czy na pewno rezygnujesz z wprowadzenia danych?'@)=0
      ?}
   !}
?};
LSW.index('OD');
1


\lsw_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - przed" dla tabeli LSW.
::   WE:
::   WY:
::  OLD: \mac_wych04/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_lsw:=params_get().lsw;
_fld:=exec('lsw_params','lista_wyr','fld');
params_set(
   'lsw',_lsw,
   'fld',_fld
);

exec('lsw_efld_opt','lista_wyr',_lsw.tryb,LSW.win_edit('?'),1);
{? exec('lsw_x_b','lista_wyr')
|| {? LSW.Z='H'
   || _zh:=1;
      _od:=LSW.OD;
      _do:=LSW.DO
   || _zh:=0
   ?};
   {? LSW.edit("params_set(params_get()); exec('lsw_ae','lista_wyr',1)") & LSW.put() & LSW.memo_put(,'TRESC') & _zh &
      (_od<>LSW.OD | _do<>LSW.DO)
   || exec('p_info_update_put','osoba',,0,_od,_do,LSW)
   ?}
?}


\lsw_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń - przed" dla tabeli LSW.
::   WE:
::   WY: 1
::  OLD: \mac_wych05/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('lsw_x_b','lista_wyr') & exec('del_ask','#table')
|| {? LSW.Z='H'
   || _zh:=1;
      _od:=LSW.OD;
      _do:=LSW.DO
   || _zh:=0
   ?};
   {? LSW.del(,1) & _zh
   || exec('p_info_update_del','osoba',,0,_od,_do,1)
   ?}
?};
1


\lsw_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Obsługa akcji "Rekord - przed" w oknach wertowania tabeli LSW.
::   WE:  _a  [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::       [_b] [STRING] - Akronim okna wertowania [domyślnie: 'WER']
::   WY:
::  OLD: \mac_wych06/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _par:=params_get();
   {? var_pres('_par')>100 &
      var_pres('cfg',_par)>100 &
      var_pres('done',_par.cfg)>100 &
      var_pres('noempty',_par.cfg.done)=type_of('') & var_pres('empty',_par.cfg.done)=type_of('')
   || _hid:=_par.cfg.done.noempty+':'+_par.cfg.done.empty
   || _hid:=''
   ?};
   _hid:={? LSW.Z='H' || 'P' || '' ?}+_hid;
   LSW.actions_grayed({? var_pres('_b')=type_of('') || _b || 'WER' ?},_hid)
?};
0


\lsw_ae_h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Sprawdzenie czy zasiłek macierzyński wprowadzony jest w okresie występowania urlopu wychowawczego.
::       Formuła wykorzystywana na etapie weryfikacji danych (Rekord - po).
::   WE: [_a] [INTEGER] - Poprawianie?
::          1 - Tak;
::          0 - Nie [domyślnie].
::  OLD: \spr_mac_wych/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_put:={? var_pres('_a')=type_of(0) || _a ?};

_d0:=date(0,0,0);

_od:=_do:=_d0;
N.cntx_psh();
N.index('NIPRACNB');
N.prefix('N',P.ref(),3);
{? N.find_le(LSW.OD)
|| _od:=N.OD;
   _do:=N.DO;
   {!
   |? N.next() & N.OD=_do+1
   |! _do:=N.DO
   !}
?};
N.cntx_pop();

{? _od=_d0 | LSW.OD<_od | LSW.DO>_do
|| FUN.emsg('Redagowany zasiłek musi zawierać się w okresie urlopu wychowawczego.'@);
   return('OD')
?};
{? _put
|| {? 6+LSW.OD$0<>6+LSW.DO$0
   || FUN.emsg('Redagowany zasiłek musi zawierać się w tym samym miesiącu.'@);
      return('OD')
   ?};
   _ref:=LSW.ref()
|| _ref:=null()
?};

exec('check','overlap',_ref,LSW,,,,,,'ZR','H',P.ref(),524)


\lsw_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Obsługa akcji "Rekord - po" tabeli LSW.
::   WE: [_a] [INTEGER] - Poprawianie?
::          1 - Tak;
::          0 - Nie [domyślnie].
::   WY:
::  OLD: \sprawdz/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
_put:={? var_pres('_a')=type_of(0) || _a ?};

_par:=params_get();
params_set(_par);
_tryb:=_par.lsw.tryb;

{? (_chk:=__CHK.record(LSW,,'R'))<>''
|| return(_chk)

|? (_tryb='N' | _tryb='LSW' | _tryb='R') & (_chk:=__CHK.record(LSW,,'KDSW'))<>''
|| return(_chk)

|? (_chk:=__CHK.record(LSW,,'OD','DO'))<>''
|| return(_chk)


|? (_tryb='N' | _tryb='LSW' | _tryb='LS' | _tryb='R') & (_chk:=__CHK.record(LSW,,'KW'))<>''
|| return(_chk)
?};

{? _tryb='H'
|| {? _put
   || _chk:=__CHK.record(LSW,,'POD','KW')
   || _chk:=__CHK.record(LSW,,'POD')
   ?};
   {? _chk<>''
   ||  return(_chk)
   ?}
?};

{? LSW.Z='H' & (_chk:=exec('lsw_ae_h','lista_wyr',_put))<>''
|| return(_chk)
?};

{? LSW.DO<LSW.OD
|| FUN.emsg('"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(LSW,'DO'),MS.name(LSW,'OD')]);
   'OD'
|? LSW.OD<date(2003,10,1) & exec('wyr_zas','lista_wyr',LSW.R().RN)
|| FUN.emsg(
      'Wyrównania świadczeń za miesiące poprzedzające październik 2003r.\n'
      'muszą być raportowane według zasad obowiązujących do tego okresu.\n'
      '(Wprowadź kwotę na właściwą listę płac, a po imporcie raportu RSA\n'
      'uzupełnij w nim informacje: kod, daty okresu i liczbę dni).'@);
   'OD'
|? +LSW.LT & exec('czy_lista_z_nkor','nieobecnosc',,LSW.LT)
|| FUN.emsg(
      'Wprowadzona lista płac zawiera korygowane lub wycofane nieobecności.\n'
      'Lista ta nie zostanie ponownie obliczona.'@);
   'LT'
|| {? _tryb<>'N' & exec('test_r','lista_wyr','N')
   || {? _tryb='LSW'
      || LSW.Z:='M'
      |? _tryb='H'
      || LSW.Z:='H'
      |? (_tryb='LS' & (LSW.R().RN=7018 | LSW.R().RN=7071)) | _tryb='R'
      || LSW.Z:='R'
      || LSW.Z:='N'
      ?}
   ?};
   1
?}


\lsw_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Okienko - przed" dla okien wertowania tabeli LSW.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
R.cntx_psh();
R.win_dict('SLO');
R.win_edit('RED');
1


\lsw_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Okienko - po" dla okien wertowania tabeli LSW.
::       Jeżeli operator wszedł do pola LSW.R (w formule przed redagowaniem założony został filtr) i zrezygnował
::       z redagowania (nacisnął ESC) to formuła po redagowaniu pola (zdejmująca filtr) nie wykonała się.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
R.f_clear();
R.cntx_pop();
1


\wyr_mac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wyliczenie podwyższenia zasiłku macierzyńskiego do wysokości określonej w ustawie.
::       Jeżeli nie ma w stałych systemu określonej wartości minimum ustawowego przyjęto 1000zł.
::   WE:
::   WY:
::  OLD: \wyr_mac/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
{? O.R<2016 || return(0) ?};
{? exec('test_par','parametr',242,'T') || return(0) ?};
:: Kwota świadczenia rodzicielskiego ze stałych z dziedziny Płace.
exec('czytaj','#stalesys',date(O.R,O.M,0),KST,'MIN_MAC');
_min_kw:=KST.MIN_MAC;

_lsw:=LSW.ndx_tmp(,1,'Z',,,'P',,,'OD',,,'R','RN',);

:: tabela do wyliczenia liczby dni i kwoty kopia N
_tab:=sql('select * from N where 1=2 order by N.ROK, N.MC');

:: Znalezienie liczby dni nieobecności oraz kwot dla atrybutu urlopów macierzyńskich
_dni_N:=0;

_sql:="sql('
   select *
   from
      N join R
   where
      N.ROK>2015 and N.P=:_a and
      N.KOR=\\'N\\' and R.RN in (:_b) and N.LT =\\':_c\\' and R.RN not in (:_d)
   order by N.ROK, N.MC',
   P.ref(),__RUB.sys_sql(115,date(O.R,O.M,0)),~O.LT,__RUB.sys_sql(1153,date(O.R,O.M,0)))";

_tab1:=_sql();

_suma:="
   {? _a.first()
   || {!
      |? _b.blank(1);
         _b.ROK:=_a.ROK;
         _b.MC:=_a.MC;
         _b.OD:=_a.OD;
         _b.DO:=_a.DO;
         {? _c
         || _b.NK:=_a.NK;
            _b.DN:=_a.DN
         ?};
         _b.WART:=_a.WART;
         _b.add(1);
         _a.next()
      !}
   ?}";
:: dodanie wartości dla bieżącego pracownika
_suma(_tab1,_tab,1);
LSW.index('ZLT');
LSW.prefix('H',P.ref(),~O.LT);
{? LSW.first()
|| {!
   |? {? LSW.OD~1>2015
      || _tab.blank(1);
         _tab.ROK:=LSW.OD~1;
         _tab.MC:=LSW.OD~2;
         _tab.OD:=LSW.OD;
         _tab.DO:=LSW.DO;
         _tab.NK:=LSW.DO-LSW.OD+1;
         _tab.WART:=LSW.KW;
         _tab.add(1)
      ?};
      LSW.next()
   !}
?};

{? _tab.first()
|| {!
   |? _dni_N+=(_tab.NK-_tab.DN);
      _tab.next()
   !}
?};

:: Korekta podwyższenia zasiłku macierzyńskiego
:: Tabela korygowanych nieobecności pracownika, za które zapłacony został zasiłek macierzyński (pomijamy ojcowski)
:: na listach płac innych niż bieżąca
_KOR:=sql('
   select N.REFERENCE REF, N.ROK ROK, N.MC MC, N.NK NK, N.WART WART, N.OD OD, N.DO DO, N.RODZAJ RODZAJ, O.LT LT,
      N.LT NLT
   from
      N join R join O
   where
      N.ROK>2015 and N.P=:_a and N.KOR=\'T\' and O.LT=\':_b\' and R.RN in (:_c) and R.RN not in (:_d)
   order by ROK, MC',
   P.ref(),O.LT,__RUB.sys_sql(115,date(O.R,O.M,0)),__RUB.sys_sql(1153,date(O.R,O.M,0))
);
_podwyz:=0;
:: Usunięcie zapisów, których nie trzeba korygować.
{? _KOR.first()
|| N.cntx_psh();
   N.index('NIEOTREE');
   {!
   |? N.prefix(BB.sqlint(_KOR.REF));
      _del:=1;
      {? N.first()
      || {!
         |? {? N.LT=(~O.LT)
            || _del:=0
            ?};
            N.next() & _del
         !}
      ?};
      {? _del & _KOR.RODZAJ='W'
      || {? _KOR.LT=O.LT
         || _del:=0
         ?}
      ?};
      {? _del
      || _KOR.del()
      || LSW.prefix('R',P.ref,_KOR.NLT);
         {? LSW.first
         || {!
            |? {? LSW.OD=_KOR.OD
               || _podwyz+=LSW.KW
               ?};
               LSW.next
            !}
         ?};
         _KOR.next()
      ?}
   !};
   N.cntx_pop()
?};

:: Brak dni zasiłkowych koniec formuły
{? ~_dni_N & ~_KOR.size()
|| LSW.ndx_drop();
   return(0)
?};

::  Wyliczenie ewentualnego zasiłku macierzyńskiego podczas trwania wychowawczego

::  Pobranie danych ze wszystkich etatów
P.cntx_psh();
LS.cntx_psh();
O.cntx_psh();
O.index('LISTYPLA');
P.index('PRACOJED');
P.prefix(exec('ref_firma','ustawienia'),'P',P.OSOBA);
_p_ref:=P.ref();
_rok:=O.R;
_msc:=O.M;
_z_list:=
   "  LS.prefix(_a,_b);
      _wyn:=0;
      {? LS.first()
      || {!
         |? _wyn+=LS.KW;
            LS.next()
         !}
      ?};
      _wyn
   ";

{? P.first()
|| {!
   |? {? P.ref()<>_p_ref
      || O.prefix(exec('ref_firma','ustawienia'),'P',_rok,_msc);
         {? O.first()
         || {!
            |? {? FUNKCJE.CZY_POD()
               || LSW.prefix('H',P.ref(),~O.LT);
                  {? LSW.first()
                  || {!
                     |? {? LSW.OD~1>2015
                        || _tab.blank(1);
                           _tab.ROK:=LSW.OD~1;
                           _tab.MC:=LSW.OD~2;
                           _tab.WART:=LSW.KW;
                           _tab.add(1)
                        ?};
                        LSW.next()
                     !}
                  ?};

                  LS.use(O.LT);
                  LS.index('PRACNRRU');
:: Wyliczone wartości dla urlopow
                  {? var_pres('_tab1')>100
                  || obj_del(_tab1);
                     &_tab1
                  ?};
                  _tab1:=_sql();
                  _suma(_tab1,_tab,0);

:: Dodanie wartości podwyższenia na innych listach w miesiącu
                  _podwyz+=_z_list(P.ref(),7018)
               ?};
               O.next()
            !}
         ?}
      ?};
      P.next()
    !}
?};
P.cntx_pop();
O.cntx_pop();
LS.cntx_pop();

_wart:=0;
:: pogrupowanie wg miesięcy zasiłkowych
_tab_mc:=sql('
   select ROK, MC, sum(NK) NK
   from :_a
   where NK>0
   group by ROK,MC
   order by ROK,MC',
   _tab);

_usun:=
   "  LSW.prefix('R',P.ref(),~O.LT);
      {? LSW.first()
      || {!
         |? {? LSW.R().RN=7071
            || LSW.next()
            || LSW.del()
            ?}
         !}
      ?}
   ";
P_IPOD.index('OD');

{? ~FUNKCJE.PL_NEW
|| _p1:=FUNKCJE.L_SYS(91);
   {? _p1=0
   || DoList.d[1]:=DoList.d[2]:=DoList.d[3]:=0;
      DoList.p[1]:=DoList.p[2]:=DoList.p[3]:=0;
      DoList.p[4]:=DoList.p[5]:=DoList.p[6]:=0;
      DoList.p[7]:=DoList.p[8]:=0;
      DoList.p[16]:=DoList.p[17]:=0;

:: wyliczenie wykorzystanych ulg i dochodu narastająco od początku roku
      exec('wyk_ul_podatek','lista_licz',O.RP,O.MP,P.OSOBA);

:: *** dochód do obliczenia procentu zaliczki ***
      DoList.d[1]:={? DoList.p[8]-DoList.p[4]>=0 || DoList.p[8]-DoList.p[4] || 0 ?};

: czy jest wartość zasiłku zawsze opodatkowana
      DoList.d[3]:=(FUNKCJE.L_SYS(1151)+FUNKCJE.L_SYS(1152)+FUNKCJE.L_SYS(1154))$2;

      exec('p_ipod_podatek','lista_licz');
      {? P_IPOD.PROC>0 & DoList.d[3]>0
      || _p1:=P_IPOD.PROC
      || DoList.d[1]+=P_IPOD.PRZYCH
      ?};

      {? _p1=0 & DoList.d[3]>0
      || TP.index('TABPODAT');
         TP.prefix(O.RP);
         {? TP.first()
         || _p0:=TP.PR;
            _p1:={? TP.find_le(DoList.d[1]) || TP.PR || _p0 ?};
            {? P_IPOD.OP='T' & _p1>_p0
            || TP.prev();
               _p1:=TP.PR
            ?};

:: 17 procent podatku od października do grudnia 2019.
            {? O.RP=2019 & (_p1=18 | _p1=17)
            || {? date(O.RP,O.MP,1)>=date(2019,10,1)
               || _p1:=17
               || _p1:=18
               ?}
            ?}
         ?}
      ?}
   ?};
   _podatek:=
      {? _p1
      || _p1
      || {? date(O.RP,O.MP,1)<date(2019,10,1)
         || 18
         || 17
         ?}
      ?}
|| _podatek:=0
?};

:: Tabela z informacją w jakich okresach wystąpiły nieobecności korygowane (rok i miesiąc)
_kw:=0;
_POM:=sql('select distinct :_a.ROK, :_a.MC from :_a order by 1,2',_KOR);
{? _POM.first()
|| LSW.cntx_psh();
   LSW.prefix('R',P.ref(),~O.LT,7071);
:: Kasowanie korekty wyrównania przed jej ponownym obliczeniem
   {? LSW.first()
   || {!
      |? LSW.del()
      !}
   ?};
   LSW.cntx_pop();
   {!
   |? _nk:=0;
      _KOR.prefix(_POM.ROK,_POM.MC);
:: Suma dni korygowanych nieobecności w podanym okresie
      {? _KOR.first()
      || {!
         |? _nk+=_KOR.NK;
            _KOR.next()
         !}
      ?};
: Obliczenie wartości korekty do wyrównania zasiłku
      _KOR.first();
      _korekta:=exec('roznica','lista_wyr',_POM,_KOR,_podatek,_min_kw,_nk).diff*(-1);

:: Odnalezienie informacji o wyrównaniu
      LSW.cntx_psh();
      LSW.index(_lsw);
      LSW.prefix('R',P.ref(),date(_POM.ROK,_POM.MC,1),7018);
      {? LSW.first() & _korekta
      || LSW.KW:=_korekta;
         LSW.LT:=~O.LT;
         LSW.KDSW:=exec('kod_zus','nieobecnosc','S','329');
         LSW.R:=__RUB.ref(7071);
:: Dodanie zapisu do tabeli wyrównań składników i na listę płac
         LSW.prefix();
         {? LSW.add(1)
         || _kw+=LSW.KW
         ?}
      ?};
      LSW.cntx_pop();
      _POM.next()
   !}
?};

_usun();
{? _tab_mc.first()
|| {!
   |? _tab.prefix(_tab_mc.ROK,_tab_mc.MC);
      {? _tab.first()
      || _wyrown:=0;
:: Sumowanie wypłaconych wyrównań do nieobecności
         LSW.cntx_psh();
         LSW.index('R');
         LSW.prefix(P.ref(),524);
         {? LSW.first()
         || {!
            |? {? LSW.OD~1=_tab_mc.ROK & LSW.OD~2=_tab_mc.MC
               || _wyrown+=LSW.KW
               ?};
               LSW.next()
            !}
         ?};
         LSW.cntx_pop();
         _wyr:=exec('roznica','lista_wyr',_tab_mc,_tab,_podatek,_min_kw,_tab_mc.NK,_wyrown);
         _roznica:=_wyr.diff;
         _od:=_wyr.od;
         _do:=_wyr.do;
         _wart+=_roznica;
         {? _roznica-_podwyz>0
         || LSW.prefix();
            LSW.blank(1);
            LSW.Z:='R';
            LSW.P:=P.ref();
            LSW.KW:=_roznica-_podwyz;
            LSW.LT:=~O.LT;
            LSW.OD:=_od;
            LSW.DO:=_do;
            LSW.KDSW:=exec('kod_zus','nieobecnosc','S','329');
            LSW.R:=__RUB.ref(7018);
            LSW.add(1)
         ?}
      ?};
      &_wyr;
      _tab_mc.next()
   !}
?};
LSW.ndx_drop();

FUNKCJE.LK(7071,,&_kw);
:: ostateczne przeliczenie z uwzględnieniem danych na innych listach dla innych etatów
:: tworzenie bilansu tzn jeśli było naliczone dla innego etatu podwyższenie to zostanie dokonana korekta
{? _wart>0
|| _wart-=_podwyz
|| {? _podwyz || _wart:=-_podwyz || _wart:=0 ?}
?};
_wart


\roznica
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Obliczenie różnicy pomiędzy kwotą wypłaconego zasiłku macierzyńskiego a jego wartością minimalną.
::   WE: _a - [TABLE] - akronim tabeli z okresami wypłaty zasiłków
::       _b - [TABLE] - akronim tabeli z danymi o nieobecnościach
::       _c - [REAL] - procent podatku
::       _d - [REAL] - kwota minimalna zasiłku macierzyńskiego
::       _e - [INTEGER] - liczba dni kalendarzowych zasiłku wypłaconego w analizowanym okresie
::       _f - [REAL] - wyrównania wypłaconych zasiłków w analizowanym okresie
::   WY:
::  OLD: \roznica/wyrskl.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_f')<>type_of(0) || _f:=0 ?};
_par:=obj_new('diff','od','do');
_zaokr:=
   "  roundmet(2);
      _a$1
   ";
_nom_dni:=(date(_a.ROK,_a.MC,0)-date(_a.ROK,_a.MC,1)+1);
_par.diff:=0;
_par.od:=_par.do:=date(0,0,0);
_wyp_M:=0;
_proc_pod:=_c;

:: Ustalenie kwoty minimalnego zasiłku macierzyńskiego
{? _nom_dni>_e
|| _nominal:=_zaokr(_d/_nom_dni$2*_e)
|| _nominal:=_d
?};

:: Sumowanie wypłaconych zasiłków do nieobecności
{!
|? _wyp_M+=_b.WART;
   {? _b.OD<_par.od | _par.od=#0 || _par.od:=_b.OD ?};
   {? _b.DO>_par.do | _par.do=#0 || _par.do:=_b.DO ?};
   _b.next()
!};
_wyp_M+=_f;

:: Odbruttowienie
_ulga:=0;
{? _proc_pod>0
|| {? PAR_SKID.get(251)='T'
   || P_IPOD.prefix(P.ref());
      {? P_IPOD.find_le(O.D)
      || {? O.RP>2022 & exec('czy_ulga_podatkowa','lista_licz',O.RP,O.MP,P.OSOBA) &
            exec('czy_prac','osoba',P.OSOBA,O.D)<>null()
         || {? ~DoList.p[19]
            || {? 'Z,N'*P_IPOD.UP
               || _ulga:=exec('ulga_podatkowa_KST','lista_licz',P_IPOD.PU,O.D)
               ?}
            ?};
            {? 'Z,D'*P_IPOD.UP & exec('oblicz_wsprozl','lista_licz')>1
            || _ulga+=KST.UL
            ?}

         || _ulga:=
               {? P_IPOD.UP<>'B' & (P.DZ>=O.D | P.DZ=#0)
               || {? P_IPOD.UP='Z'
                  || exec('oblicz_wsprozl','lista_licz')
                  || 1
                  ?}*KST.UL
               ?}
         ?}
      || _ulga:=KST.UL
      ?};
:: Weryfikacja naliczania ulgi podatkowej zmiana ustawy z dnia 29.11.2016
   {? ~exec('czy_ulga_podatkowa','lista_licz',O.RP,O.MP,P.OSOBA) || _ulga:=0 ?}
   || _ulga:=0
   ?};
   {? _ulga & _nom_dni>_e
   || _ulga:=_ulga/_nom_dni*_e$2
   ?};
   {? _wyp_M<_ulga || _ulga:=0 ?};
   _zalicz:=exec('progi_zaliczki','lista_licz',_wyp_M,,,_proc_pod);
   _wyp_M-={? _zalicz>_ulga || (_zalicz-_ulga)$0 || 0 ?}
?};

:: Pobranie danych z innych zatrudnień
KART_DEF.cntx_psh();
KART_DEF.index('SYMBOL');
KART_DEF.prefix('PODW_MAC',);
{? KART_DEF.first()
|| KART_DOD.cntx_psh();
   KART_DOD.index('KART_DOD');
   KART_DOD.prefix(exec('ref_firma','ustawienia'),KART_DEF.ref(),P.OSOBA);
   {? KART_DOD.first()
   || {!
      |? {? KART_DOD.DO<=date(_a.ROK,_a.MC,0) & KART_DOD.OD>=date(_a.ROK,_a.MC,1)
         || _wyp_M+=KART_DOD.WARTOSC
         ?};
         KART_DOD.next()
      !}
   ?};
   KART_DOD.cntx_pop()
?};
KART_DEF.cntx_pop();
_par.diff:=
   {? _wyp_M<_nominal
   || (_nominal-_wyp_M)$2
   || 0
   ?};
_par


\kor_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [20.14]
:: OPIS: Funkcja pozwala na zaznaczenie nieobecnosci chorobowych w celu ponownego przeliczenia
::       podstawy
::       UWAGA: Procedura korzysta z numerow rubryk!
::----------------------------------------------------------------------------------------------------------------------
DoList.p[1]:=DoList.p[2]:=0;
{? -O.T().T<>'otk'
|| FUN.emsg('Wyrównania mogą być rozliczane jedynie na liście typu OTK.');
   return(0)
?};
_choice:=FUN.choice('Proszę wybrać powód wyliczenia wyrównania.',1,'Wyliczenie wyrównania','Tarcza antykryzysowa');
{? ~_choice || return(0) ?};

{? var_pres('__TMP')>100
|| obj_del(__TMP);
   &__TMP
?};
__TMP:=tab_tmp(1,'OD','DATE','Data od','KOD','INTEGER','Kod','NAZ','STRING[20]','Nazwa','DO','DATE','Data do',
                   'REF_N','INTEGER','','POD','REAL','Podstawa','ZNAK','STRING[1]','','WYR','REAL','Wyrównanie',
                   'LISTA','STRING[8]','Lista','DATA','DATE','Data wypłaty','KODS','STRING[9]','Kods');
_wer:=__TMP.mk_sel('Zaznacz nieobecności ','P',0,'tmp_sel');
__TMP.win_fld(_wer,,'KOD',,,3);
__TMP.win_fld(_wer,,'NAZ',,,20);
__TMP.win_fld(_wer,,'OD',,,10);
__TMP.win_fld(_wer,,'DO',,,10);
__TMP.win_fld(_wer,,'LISTA',,,8);
__TMP.win_fld(_wer,,'POD',,,15,2);
__TMP.win_fld(_wer,,'ZNAK',,,5,,,'Zaznacz');
__TMP.win_act(_wer,,'Formuła','Zaznacz/odznacz',,,,"exec('spr_n','lista_wyr')",1,1);
__TMP.win_act(_wer,,'Rekord',,,,"__TMP.ZNAK='T'");
__TMP.win_act(_wer,0,'Formuła','Dalej',,,"sel_exit");
__TMP.win_sel(_wer);

{? _choice=2
|| KART_DOD.cntx_psh();
   KART_DOD.index('KART_DOD');
   KART_DEF.index('SYMBOL');
   KART_DEF.prefix('WYR_TARC');
   _wniosek:="
      _wyn:=0;
      {? KART_DEF.first
      || KART_DOD.prefix(exec('ref_firma','ustawienia'),KART_DEF.ref,P.OSOBA);
         {? KART_DOD.first()
         || {!
            |? {? _a>=KART_DOD.OD & (_a<=KART_DOD.DO | KART_DOD.DO=#0)
               || _wyn:=1
               ?};
               ~_wyn & KART_DOD.next()
            !}
         ?}
      ?};
      _wyn";

   {? ~KART_DEF.first()
   || FUN.emsg('Brak wpisu w kartotece dodatkowej:\nWyrównanie wypłaconych zasiłków TARCZA.\n'+
         'Procedura nie zostanie wykonana.');
      {? var_pres('TMP')>100
      || obj_del(TMP);
         &TMP
      ?};
      KART_DOD.cntx_pop();
      return(0)
   ?};

   N.cntx_psh;
   N.index('NIEOBECN');
   N.prefix('N',P.ref());
   {? N.first
   || {!
      |? {? _wniosek(N.OD)
         || _q:=N.NB().RN;
            {? __RUB.sys_attr(_q,129,N.OD)
            || __TMP.KOD:=N.NB().RN;
               __TMP.NAZ:=N.NB().RT;
               __TMP.OD:=N.OD;
               __TMP.DO:=N.DO;
               __TMP.POD:=N.POD;
               __TMP.REF_N:=#N.ref;
               __TMP.ZNAK:='N';
               __TMP.LISTA:=N.LT;
               __TMP.KODS:=N.KDSW().KOD;
               __TMP.add()
            ?}
         ?};
         N.next
      !}
   ?};
   KART_DOD.cntx_pop();
   N.cntx_pop;
   __TMP.hdr_sel('dla: '+P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE)
|| N.cntx_psh;
   N.index('NIEOBECN');
   N.prefix('N',P.ref());
   {? N.first
   || {! |?
         {? _q:=N.NB().RN; __RUB.sys_attr(_q,129,N.OD)
         || __TMP.KOD:=N.NB().RN;
            __TMP.NAZ:=N.NB().RT;
            __TMP.OD:=N.OD;
            __TMP.DO:=N.DO;
            __TMP.POD:=N.POD;
            __TMP.REF_N:=#N.ref;
            __TMP.ZNAK:='N';
            __TMP.LISTA:=N.LT;
            __TMP.KODS:=N.KDSW().KOD;
            __TMP.add
         ?};
         N.next
      !}
   ?};
   N.cntx_pop;
   __TMP.hdr_sel('dla: '+P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE)
?};

_del:=0;
_end:="
   {? var_pres('__TMP')>100
   || obj_del(__TMP);
      &__TMP
   ?}
   ";
{? __TMP.first
|| {? __TMP.select()
   || {? __TMP.first()
      || {!
         |? {? __TMP.ZNAK='T'
            || __TMP.next
            || __TMP.del
            ?}
         !}
      ?};
      {? __TMP.first
      || PROGRESS.set(__TMP.size(),'Trwa wyliczenie wyrównań...');
         {!
         |? _val:=0;
            _q:={? __RUB.sys_attr(__TMP.KOD,12211,__TMP.OD)
                || 7
                |? __RUB.sys_attr(__TMP.KOD,1211,__TMP.OD)
                || 9
                |? __RUB.sys_attr(__TMP.KOD,1222,__TMP.OD)
                || 19
                || __TMP.KOD
                ?};
            _char_pra:=exec('char_pra','lista_wyr');
            _val:=exec('wynchor','!ppl_pll_nals',_q,_char_pra,,1);
            __TMP.DATA:=exec('data_wyp','lista_wyr',__TMP.LISTA);
            __TMP.WYR:=_val;
            {? _val>0
            || {? ~_del || exec('del_lsw','lista_wyr'); _del:=1 ?};
               exec('zap_wyr','lista_wyr',_val,1)
            || {? ~_del || exec('del_lsw','lista_wyr'); _del:=1 ?}
            ?};
            __TMP.put;
            PROGRESS.next();
            {? __TMP.WYR<=0
            || __TMP.del(,1)=2
            || __TMP.next
            ?}
         !};
         PROGRESS.close();
         {? __TMP.first
         || _wer:=__TMP.mk_sel('Nieobecności: '+P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE,'P',0,'tmp_po');
            __TMP.win_fld(_wer,,'KOD',,,3);
            __TMP.win_fld(_wer,,'NAZ',,,20);
            __TMP.win_fld(_wer,,'OD',,,10);
            __TMP.win_fld(_wer,,'DO',,,10);
            __TMP.win_fld(_wer,,'WYR',,,15,2);
            __TMP.win_fld(_wer,,'LISTA',,,8);
            __TMP.win_fld(_wer,,'DATA',,,10);
            __TMP.win_sel(_wer);
            __TMP.select
         ?}
      ?}
   || FUN.emsg('Zrezygnowano z wyliczenia wyrównań.')
   ?}
|| FUN.emsg('Brak danych do wyliczenia wyrównań.')
?};
_end();
0


\zap_wyr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [20.14]
:: OPIS: Funkcja tworzaca zapisy w tabeli wyrownan dla nieobecnosci, dla ktorych ponownie przeliczana
::       jest podstawa
::   WE: _a - kwota wyrowanania
::----------------------------------------------------------------------------------------------------------------------
_kod_r:=exec('nieo2wyr','lista_wyr',__TMP.KOD);
_ref:=__RUB.ref(_kod_r);
{? _ref
|| LSW.cntx_psh;
   LSW.index('R');
   {? _ref=null
   || LSW.cntx_pop;
      return(1)
   ?};
   LSW.prefix(P.ref,_kod_r,VAR.NAZWALIS);
   _lsw:=LSW.first;
   {? ~_lsw || LSW.blank(1) ?};
   LSW.P:=P.ref;
   LSW.R:=_ref;
   LSW.Z:='N';
   LSW.OD:=__TMP.OD;
   LSW.DO:=__TMP.DO;
LSW.KW:=_a;
   {? _a>0
   || LSW.LT:=VAR.NAZWALIS;
      {? (_kod:=exec('sklp2wyr','lista_wyr',_kod_r))<>''
      || LSW.KDSW:=exec('kod_zus','nieobecnosc','S',_kod);
         {? LSW.KDSW().KOD='323'
         || {? __TMP.KODS='322'
            || LSW.KDSW:=exec('kod_zus','nieobecnosc','S','324')
            ?}
         ?}
      || _kod:=exec('kdsw_zas2wyr','lista_wyr',__TMP.KODS);

         {? _kod<>''
         || LSW.KDSW:=exec('kod_zus','nieobecnosc','S',_kod)
         ?}

     ?};
     {? LSW.add
     || LSW.memo_set('Zapis wprowadzony automatycznie.','TRESC');
        LSW.memo_put(,'TRESC')
     ?}
   ?};
   LSW.cntx_pop
?};
1


\del_lsw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [20.14]
:: OPIS: Funkcja usuwajaca wyrownania rozliczone dana lista plac
::----------------------------------------------------------------------------------------------------------------------
LSW.cntx_psh;
LSW.index('LT');
LSW.prefix(P.ref,VAR.NAZWALIS);
{? LSW.first || {! |? LSW.del !} ?};
LSW.cntx_pop;
1


\char_pra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [20.14]
:: OPIS: Funkcja ustala charakter pracy dla danej nieobecnosci na podstawie przebiegu zatrudnienia
::----------------------------------------------------------------------------------------------------------------------
_cp:='u';
H.cntx_psh;
H.index('_HISTKOD');
H.prefix(P.ref,'Z');
{? H.find_le(__TMP.OD)
   || _cp:=-(1+H.CP().S)
?};
H.cntx_pop;
_cp


\data_wyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [20.14]
:: OPIS: Funkcja ustala date wypłaty listy na podstawie znaku listy
::   WE: _a - znak listy
::----------------------------------------------------------------------------------------------------------------------
_d:=date(0,0,0);
O.cntx_psh;
O.index('LISTYPLA');
O.prefix;
_rok:=#(1-(3+_a));
_rok:={? _rok>50 || 1900 || 2000 ?}+_rok;
_mc:=#(2+(3-_a));
_typ:=_a+3;
{? O.find_key(exec('ref_firma','ustawienia'),__F_ZATR.O,_rok,_mc,_typ)
|| _d:=O.D
?};
O.cntx_pop;
_d


\spr_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [20.14]
:: OPIS: Funkcja sprawdzajaca nieobecnosc wzgledem listy plac
::----------------------------------------------------------------------------------------------------------------------
{? __TMP.ZNAK='T'
|| __TMP.ZNAK:='N'
|| {? __TMP.OD>date(O.R,O.M,0)
   || FUN.emsg('Nieobecność nie może rozpoczynać się po ostatnim dniu miesiąca listy płac.')
   |? __TMP.LISTA=''
   || FUN.emsg('Można zaznaczyć tylko rozliczone wcześniej nieobecności.')
   || __TMP.ZNAK:='T'
   ?}
?};
__TMP.put;
1

:Sign Version 2.0 jowisz:1045 2024/02/08 12:34:57 bc68ba3d4672095d9227894156d34d3446d66a48d1bed570028352718a18c3fa98e4429d14a1f1885d8216b0740cb9cdb888093275610ca5e487c6c000ef68fb65636a5229b95d7d0802f13ac7c3fdd8f18155d4fce147d9774fcd8acaad90de066d9ef3692f334a46c30a29477b1a0fd5ba9e96e1986e9d738e9267374cff76
