:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: form_ob.fml []
:: Utworzony: 29.12.2014 []
:: Autor: MJasińska
::======================================================================================================================
:: Zawartosc:
::======================================================================================================================

\atr_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [12.50]
:: OPIS: pobranie wartości atrybutu o przekazanym nr, maska EDOK_ATR jest otwarta, kontekst nieważny
::   WE: _a - EDOKUM.ref
::       _b - nazwa atrybutu
::       _c - akronim zwracanego pola, jeśli nie podany to WAR
::   WY:      stringowa wartość pobieranego pola (domyślnie WAR)
::----------------------------------------------------------------------------------------------------------------------
 _edokum:={? var_pres('_a')=type_of(null()) || _a || return(-1) ?};
  _nazwa:={? var_pres('_b')=type_of('')     || _b || return(-1) ?};
_akronim:={? var_pres('_c')=type_of('')     || _c || 'WAR' ?};
_wyn:='';

TAT.cntx_psh(); ETYP_ATR.cntx_psh(); EDOK_ATR.cntx_psh();
TAT.index('NA'); TAT.prefix(_nazwa,);
{? TAT.first()
|| ETYP_ATR.index('KOLZ'); ETYP_ATR.prefix(EDOKUM.TYP,null);
   {? ETYP_ATR.first()
   || EDOK_ATR.index('REKTAT'); EDOK_ATR.prefix(_edokum, null, '', TAT.ref());
      {? EDOK_ATR.first()
      || _dyn:={? do_state()=0 & app_info('web_sesid')<>'' & web_top_kind()='d'
               || exec('get_wt_par','obiegi2','dynamic')
               || {? var_press('objID')>0 || 1 || 0 ?}
               ?};
         {? _dyn=1
         || _tab:={? var_press('dynTab')>0 || dynTab
                  |? var_press('objID')>0 || objID
                  || web_def_get()
                  ?};
            {? var_press('objID')>0
            || _val:=_tab.get('P'+$EDOK_ATR.KOL)
            || _val:=($('_a.P'+$EDOK_ATR.KOL))(_tab)
            ?};
            {? EDOK_ATR.TAT().TYP='X' & ETYP_ATR.find_key(EDOK_ATR.KOL) & ETYP_ATR.TSLO<>''
            || _tabX:=($ETYP_ATR.TSLO)();
               {? type_of(_tabX)>100
               || _tabX.blank(1);
               {? (ETYP_ATR.SLOPOLE='K' & _tabX.find_tab(,'KOD',,'=',_val)) |
                  (ETYP_ATR.SLOPOLE<>'K' & _tabX.find_tab(,'TR',,'=',_val))
                  || {? _akronim='WAR' || _akronim:='TR' ?};
                     {? var_pres(_akronim,_tabX)>0
                     || _wyn:=($('_a.'+_akronim))(_tabX)
                     ?}
                  ?}
               ?};
               &_tabX
            |? type_of(_val)=type_of('')
            || _wyn:=_val
            |? type_of(_val)=type_of(date()) | type_of(_val)=type_of(0)
            || _wyn:=$_val
            |? type_of(_val)=type_of(time())
            || _wyn:=_val$3
            |? EDOK_ATR.TAT().TYP='U'
            || UD_DEF.cntx_psh();
               UD_DEF.prefix();
               {? UD_DEF.seek(_val)
               || _wyn:={? ETYP_ATR.SLOPOLE='K' || UD_DEF.SYMBOL || UD_DEF.OPIS ?}
               ?};
               UD_DEF.cntx_pop()
            ?};
            1
         || _wyn:=($('EDOK_ATR.'+_akronim))()
         ?}
      ?}
   ?}
?};
 TAT.cntx_pop(); ETYP_ATR.cntx_pop(); EDOK_ATR.cntx_pop();
_wyn


\put_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Zapisanie wartości atrybutu o przekazanej nazwie, maska EDOK_ATR jest otwarta, kontekst nieważny
::   WE: _a - EDOKUM.ref
::       _b - nazwa atrybutu
::       _c - wartość dla pola domyślnie dla WAR
::       _d - pole domyślnie WAR
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<>type_of('') || return(0) ?};
{? var_pres('_d')<>type_of('') || _d:='WAR' ?};
_wyn:=0;
TAT.cntx_psh();
TAT.index('NA'); TAT.prefix(_b,);
{? TAT.first()
|| EDOK_ATR.cntx_psh();
   EDOK_ATR.index('REKTAT');
   EDOK_ATR.prefix(_a, null, '', TAT.ref);
   {? EDOK_ATR.first()
   || _dyn:={? do_state()=0 & app_info('web_sesid')<>''
            || exec('get_wt_par','obiegi2','dynamic')
            || {? var_press('objID')>0 || 1 || 0 ?}
            ?};
      {? _dyn=1
      || {? _d='WAR' | _d='WAR_W'
         || _tab:={? var_press('dynTab')>0 || dynTab
                  |? var_press('objID')>0 || objID
                  || web_def_get()
                  ?};
            {? var_press('objID')>0
            || _val:=_tab.get('P'+$EDOK_ATR.KOL)
            || _val:=($('_a.P'+$EDOK_ATR.KOL))(_tab)
            ?};
            _nval:=~~;
            {? type_of(_val)=type_of(_c)
            || _nval:=_c
            |? type_of(_val)=type_of(date()) & type_of(_c)=type_of('')
            || _nval:=exec('str2date','#convert',_c)
            |? type_of(_val)=type_of(time()) & type_of(_c)=type_of('')
            || _nval:=exec('str2time','#convert',_c)
            |? type_of(_val)=type_of(0) & type_of(_c)=type_of('')
            || _nval:=exec('str2real','#convert',_c)
            ?};
            {? _nval<>~~
            || {? var_press('objID')>0
               || _tab.set('P'+$EDOK_ATR.KOL,_nval,(_d='WAR_W'))
               || {? _d='WAR' | (_d='WAR_W' & app_info('web_sesid')<>'')
                  || ($('_a.P'+$EDOK_ATR.KOL+':=_b'))(_tab,_nval)
                  |? _d='WAR_W'
                  || ($('_a.memo_set(_b,P'+$EDOK_ATR.KOL+')'))(_tab,_nval)
                  ?};
                  {? var_press('dynTab')<=0
                  || web_def_update(web_top_win(),_tab)
                  ?}
               ?}
            ?}
         ?}
      || ($('EDOK_ATR.'+_d+':=\''+_c+'\''))();
         _wyn:=EDOK_ATR.put(1)
      ?}
   ?};
   EDOK_ATR.cntx_pop()
?};
TAT.cntx_pop();
_wyn


\os_rej_wn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [12.50]
:: OPIS: znalezienie osoby rejestrującej wniosek
::   WY: OSOBA.ref
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();
EDOKOS.cntx_psh(); USERS.cntx_psh(); OSOBA.cntx_psh();
OSOBA.prefix();
{? (EDOKOS.name()+2)<>(EDOKUM.name()+2)
|| EDOKOS.use((EDOKOS.name(1)-2)+(EDOKUM.name()+2))
?};
EDOKOS.index('SZUK2');
EDOKOS.prefix(EDOKUM.ref(),'W');
{? EDOKOS.first()
|| {? EDOKOS.USERS().OSOBA
   || _wyn:=USERS.OSOBA
   ?}
?};
EDOKOS.cntx_pop(); USERS.cntx_pop(); OSOBA.cntx_pop();
_wyn


\ustaw_os
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [12.50]
:: OPIS: wypełnia EDOKUM.DOSTAWCA z osoby rejestrującej wniosek
::   WY: informacja czy udało się wypełnić pole EDOKUM.DOSTAWCA
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
{? EDOKUM.DOSTAWCA=null()
|| _osoba:=exec('os_rej_wn','form_ob');
   {? _osoba<>null()
   || EDOKUM.DOSTAWCA:=_osoba;
      _res:=EDOKUM.put(1)
   ?}
|| _res:=1
?};
_res


\to_ti_dt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [12.50]
:: OPIS: konwersja stringa na czas lub datę
::   WE: _a - string do zamiany
::       _b - T - konwersja na time, D - konwersja na date
::----------------------------------------------------------------------------------------------------------------------
{? _b='T'
|| exec('str2time','#convert',_a)
|? _b='D'
|| exec('str2date','#convert',_a)
?}


\initObj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Inicjuje obiekty potrzebne do pracy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('__CHK','object');
exec('MASK','object');
exec('MS','#object');
exec('__F_ZATR','object');
exec('RB','object');
exec('__KAL','object');
exec('__RUB','object');
~~


\rachunek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Formula na wyliczenie wartosci poczatkowej dla ETYP_ATR
::   WE: _a - [STRING] - numer rubryki
::       -b - [STRING] - co zwracać:
::                         - 'nr' - numer rachunku (domyślnie)
::                         - 'rodzaj' - kwota czy procent
::                         - 'kwota' - wartość kwoty lub procentu
::   WY: numer rachunku lub obj_new('WAR','REF_SQL') dla _b='rodzaj'
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_nrRub:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
   _co:={? var_pres('_b')=type_of('') || _b || 'nr'            ?};
_nrRub:=#_nrRub;

{? exec('ustaw_os','form_ob')
|| OSOBA.cntx_psh();
   PKO.cntx_psh();
   PKO.index('_PKO');
   PKO.prefix(EDOKUM.DOSTAWCA,_nrRub);
   {? PKO.first()
   || {? _co='nr'
      || _result:=PKO.N
      |? _co='rodzaj'
      || _rodz:={? PKO.K > 1 || 'K' || 'P' ?};
         _result:=exec('def_form','form_ob','RODZ_RACH',_rodz)
      |? _co='kwota'
      || _result:={? PKO.K > 1 || $PKO.K || $(PKO.K*100) ?}
      ?}
   || {? _co='rodzaj'
      || _result:='P'
      ?}
   ?};
   PKO.cntx_pop();
   OSOBA.cntx_pop()
?};
_result


\oResult
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Funkcja tworzy obiekt wykorzystywany podczas akceptacji wniosku
::   WY: obiekt _result
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('ok','errMsg','error');
_result.ok:=0;
_result.errMsg:='';
_result.error:=".ok:=0; .errMsg:=_a";
_result


\walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Główna formuła na walidację wniosków kadrowych
::   WE: [_a] [STRING] - dodatkowy parametr do przekazania na wybranym etapie
::   WY: tabela z komunikatami
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=type_of('') || _a || '' ?};

exec('set_env','pkw_por');

ETYPY.cntx_psh();
_nazwa:=EDOKUM.TYP().NAZWA;
_types:=exec('types','portal_wnioski');
:: Czy wniosek na wspólny HR Portal
_portal:=(ETYPY.W_PORTAL=_types.portal | ETYPY.W_PORTAL=_types.paperless);
ETYPY.cntx_pop();
_ok:=1;

errno();
exec('tab_kom', 'form_ob');

{? _portal
|| exec('walid','portal_walidacja',_nazwa)
|| {? _nazwa*exec('nazwa_rachunek','obiegi')
   || exec('rachunek_walid','form_ob')
   |? _nazwa=exec('nazwa_wozda','obiegi')
   || exec('dane_adresowe_walid','form_ob')
   |? _nazwa=exec('nazwa_woz','obiegi')
   || exec('zatrudnienie_walid','form_ob')
   |? _nazwa=exec('nazwa_dwwp','obiegi')
   || exec('akcept_ppk','form_ob',,,1,'DWWP')
   |? _nazwa=exec('nazwa_dwwd','obiegi')
   || exec('akcept_ppk','form_ob',,,1,'DWWD')
   |? _nazwa=exec('nazwa_drwd','obiegi')
   || exec('akcept_ppk','form_ob',,,1,'DRWD')
   |? _nazwa=exec('nazwa_wou','obiegi')
   || exec('akcept_ppk','form_ob',,,1,'WOU')
   |? _nazwa=exec('nazwa_opif','obiegi')
   || exec('akcept_ppk','form_ob',,,1,'DWT')
   |? _nazwa=exec('nazwa_nadg_w','obiegi')
   || exec('akcept_nadg','form_ob',,,1,'W')
   |? _nazwa=exec('nazwa_nadg_p','obiegi')
   || exec('akcept_nadg','form_ob',,,1,'P')
   |? _nazwa=exec('nazwa_odb_w','obiegi')
   || exec('akcept_odb','form_ob',,,1,'W')
   |? _nazwa=exec('nazwa_odb_p','obiegi')
   || exec('akcept_odb','form_ob',,,1,'P')
   |? _nazwa=exec('nazwa_czw','obiegi')
   || exec('akcept_czw','form_ob',,,1)
   |? _nazwa=exec('nazwa_dowu25','obiegi')
   || exec('akcept_ppk','form_ob',,,1,'DOWU25')
   |? _nazwa=exec('nazwa_ppsf','obiegi')
   || exec('akcept_ppsf','form_ob',,,1,'W')
   |? _nazwa=exec('nazwa_ppsp','obiegi')
   || exec('akcept_ppsf','form_ob',,,1,'P')
   |? _nazwa=exec('nazwa_oopz','obiegi')
   || exec('akcept_oopz','form_ob',,,1)
   |? _nazwa=exec('nazwa_wpzds','obiegi')
   || exec('akcept_wpzds','form_ob',,,1,_param)
   |? _nazwa=exec('nazwa_wpzdo','obiegi')
   || exec('akcept_wpzdo','form_ob',,,1,_param)
   || _ok*=0
   ?}
?};
{? ~_ok
|| exec('tab_kom', 'form_ob');
   exec('tab_kom_add', 'form_ob', 1, 'Brak poprawnego powiązania wniosku z formułą walidacyjną.'@)
?};
exec('errno_kom','form_ob');
TKOM13


\errno_kom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Dodaje komunikat o błędach zgłaszanych podczas pracy systemu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_errno:=errno();
{? _errno
|| exec('tab_kom_add', 'form_ob', 1, '01. Podczas przetwarzania wniosku wystąpił błąd o numerze: '+$_errno+'.');
   exec('tab_kom_add', 'form_ob', 1, '02. Jeżeli błąd będzie się powtarzał zaleca się kontakt z konsultantem.')
?}


\akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Głowna formuła na akceptację wniosków kadrowych
::   WE: [_a] [STRING] - dodatkowy parametr do przekazania na wybranym etapie
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=type_of('') || _a || '' ?};

exec('set_env','pkw_por');

ETYPY.cntx_psh();
_nazwa:=EDOKUM.TYP().NAZWA;
_types:=exec('types','portal_wnioski');
:: Czy wniosek na wspólny HR Portal
_portal:=(ETYPY.W_PORTAL=_types.portal | ETYPY.W_PORTAL=_types.paperless);
ETYPY.cntx_pop();

_result:={? _portal
         || exec('akcept','portal_walidacja',_nazwa)
         || {? _nazwa*exec('nazwa_rachunek','obiegi')
            || exec('rachunek_akcept','form_ob')
            |? _nazwa=exec('nazwa_wozda','obiegi')
            || exec('dane_adresowe_akcept','form_ob')
            |? _nazwa=exec('nazwa_woz','obiegi')
            || exec('zatrudnienie_akcept','form_ob')
            |? _nazwa=exec('nazwa_dwwp','obiegi')
            || exec('akcept_ppk','form_ob',,,,'DWWP')
            |? _nazwa=exec('nazwa_dwwd','obiegi')
            || exec('akcept_ppk','form_ob',,,,'DWWD')
            |? _nazwa=exec('nazwa_drwd','obiegi')
            || exec('akcept_ppk','form_ob',,,,'DRWD')
            |? _nazwa=exec('nazwa_wou','obiegi')
            || exec('akcept_ppk','form_ob',,,,'WOU')
            |? _nazwa=exec('nazwa_opif','obiegi')
            || exec('akcept_ppk','form_ob',,,,'DWT')
            |? _nazwa=exec('nazwa_nadg_w','obiegi')
            || exec('akcept_nadg','form_ob',,,,'W')
            |? _nazwa=exec('nazwa_nadg_p','obiegi')
            || exec('akcept_nadg','form_ob',,,,'P')
            |? _nazwa=exec('nazwa_odb_w','obiegi')
            || exec('akcept_odb','form_ob',,,,'W')
            |? _nazwa=exec('nazwa_odb_p','obiegi')
            || exec('akcept_odb','form_ob',,,,'P')
            |? _nazwa=exec('nazwa_czw','obiegi')
            || exec('akcept_czw','form_ob')
            |? _nazwa=exec('nazwa_dowu25','obiegi')
            || exec('akcept_ppk','form_ob',,,,'DOWU25')
            |? _nazwa=exec('nazwa_ppsf','obiegi')
            || exec('akcept_ppsf','form_ob',,,,'W')
            |? _nazwa=exec('nazwa_ppsp','obiegi')
            || exec('akcept_ppsf','form_ob',,,,'P')
            |? _nazwa=exec('nazwa_oopz','obiegi')
            || exec('akcept_oopz','form_ob')
            |? _nazwa=exec('nazwa_wpzds','obiegi')
            || exec('akcept_wpzds','form_ob',,,,_param)
            |? _nazwa=exec('nazwa_wpzdo','obiegi')
            || exec('akcept_wpzdo','form_ob',,,,_param)
            || exec('oResult','form_ob')
            ?}
         ?};
_result.ok


\rach_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuła tabelę z rubrykami, które mają być obsługiwane we wniosku.
::       Liczba obsługiwanych rachunków określa liczbę dostępnych sekcji we wniosku o zmianę rachunku bankowego.
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::   WY: tabela z rubrykami do rachunków - domyślnie wszystkie rubryki z klasą B (do przelewów)
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null()) || _a || null() ?};

:: pobieramy wszystkie rachunki (domyślnie 3)
_tab:=sql(''+"select RN,RT, REFERENCE as REF from R where RK='B'");

:: dla przekazanego edokum sprawdzamy czy mamy we wniosku rachunki
{? _tab.first() & exec('open_edk_atr', 'obiegi', _edokum)
|| EDOK_ATR.cntx_psh();
   EDOK_ATR.use('edokat'+(EDOKUM.name()+2));
   EDOK_ATR.index('REKKOLED');
   EDOK_ATR.prefix(EDOKUM.ref());
   {? _tab.first()
   || {!
      |? _jest:=0;
::       sprawdzamy jakie występują rachunki (rubryki) występują we wniosku
         {? EDOK_ATR.first()
         || {!
            |? {? EDOK_ATR.WAR=_tab.RT
               || _jest:=1
               ?};
               ~_jest & EDOK_ATR.next()
            !}
         ?};
::       jeżeli rachunek jest to zostawiamy rekord w przeciwnym przypadku usuwamy rubrykę
         {? _jest
         || _tab.next()
         || _tab.del(,1)=2
         ?}
      !}
   ?};
   EDOK_ATR.cntx_pop()
?};

_tab


\rachunek_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [12.50]
:: OPIS:  Formula na walidację - wniosek o zmiane rachunku bankowego
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('tab_kom','form_ob');
EDOK_ATR.cntx_psh();
{? exec('open_edk_atr', 'obiegi', EDOKUM.ref())
|| _edokum:=EDOKUM.ref();
:: obiekt pomocniczy pole ERROR=1 oznacza komunikat blokujący, a INFO=3 - komunikat nieblokujący
   _typ:=obj_new('ERROR','INFO');
   _typ.ERROR:=1;
   _typ.INFO:=3;

:: zmienne
   _rachCount:=0;
   _prSuma:=0;
   _isKwota:=0;
   _lp:=0;
   _error:=0;
   _msgId:=1;
   _lista:='';

:: sprawdzamy rubryki, które obsługują polecenia przelewu (klasa B)
   _tRach:=exec('rach_tab','form_ob',_edokum);
   _rach_det:=_tRach.size()>1;
   {? _tRach.first()
   || {!
      |? _nr_rach:=$_tRach.RN;
         _lp:=_tRach.RT;
         _nrRach:=exec('atr_get', 'form_ob', _edokum, 'N_NR_RACH_'+_nr_rach);
         _nrRach:=gsub(_nrRach,' ','');
         _rachCount+={? _nrRach<>'' || 1 || 0 ?};

         _kwota:='';
         {? _rach_det
         || _rodz:=exec('atr_get', 'form_ob', _edokum, 'N_RODZ_RACH_'+_nr_rach,'REF_SQL')+1;
            {? _rodz<>'P' & _rodz<>'K' || _rodz:='' ?};
            _kwota:=exec('atr_get', 'form_ob', _edokum, 'N_KWOTA_RACH_'+_nr_rach)
         || _rodz:='P';
            _kwota:='100'
         ?};

         {? _nrRach<>'' & exec('iban_ok','#id',_nrRach,1)<=0
         || exec('tab_kom_add', 'form_ob', _typ.INFO,
            '%1) %2 - wprowadzony numer konta nie jest zgodny z formatem IBAN.'@[$_msgId,_lp]);
            _msgId+=1
         ?};

         {? ~_error & _nrRach<>''
         || _nrBanku:=exec('num_kier','rachunki',_nrRach);
            _bank:=exec('FindInSet','#table','B','BANKID',_nrBanku,,,1);
            {? _bank=null()
            || TKOM13.erase();
               exec('tab_kom_add', 'form_ob', _typ.ERROR,
               '%1 - dla konta o numerze: %2 nie znaleziono w systemie oddziału banku. '@[_lp,_nrRach]+
               'Skontaktuj się z działem kadr w celu uzupełnienia danych.'@);
               _error+=1
            ?}
         ?};

         {? ~_error & _nrRach<>'' & _rodz=''
         || TKOM13.erase();
            exec('tab_kom_add', 'form_ob', _typ.ERROR, '%1 - nie określono rodzaju wartości (kwota / \%).'@[_lp]);
            _error+=1
         ?};

         {? ~_error & _nrRach='' & _rach_det & (_rodz<>'' | _kwota<>'')
         || TKOM13.erase();
            exec('tab_kom_add', 'form_ob', _typ.ERROR, '%1 - nie wprowadzono numeru rachunku.'@[_lp]);
            _error+=1
         ?};

         {? ~_error & _nrRach<>''
         || _kwota:=exec('str2real','#convert',_kwota);
::          jeżeli w polu _rodz wybrano wartość "Procent", to ustawiamy procent
            {? _rodz='P'
            || {? _kwota>100 | _kwota<0
               || TKOM13.erase();
                  exec('tab_kom_add', 'form_ob', _typ.ERROR,
                  '%1 - należy określić procent w wysokości 0-100\%.'@[_lp]);
                  _error+=1
               ?};
::             zliczenie łącznego procentu ze wszystkich rachunków
               _prSuma+=_kwota;
               _kwota/=100
            |? _rodz='K'
            || _isKwota:=1;
::             ze względów technicznych (sposob reprezentowania procentu wypłaty w naszym systemie 0-1), wprowadzona
::             kwota musi być większa niż 1
               {? _kwota<=1
               || TKOM13.erase();
                  exec('tab_kom_add', 'form_ob', _typ.ERROR,
                  '%1 - wprowadzana kwota musi być większa niż 1.'@[_lp]);
                  _error+=1
               ?};
               {? ~_error & _prSuma>0 & _kwota>0
               || exec('tab_kom_add', 'form_ob', _typ.INFO,
                  '%1) %2 - wprowadzono rachunek z określoną kwotą, który występuje w kolejności '
                  'po rachunku z określonym procentem.'@[$_msgId,_lp]);
                  exec('tab_kom_add', 'form_ob', _typ.INFO,
                  '%1a) Kolejność wprowadzonych kont jest istotna przy ustalaniu wysokości przelewów.'@[$_msgId]);
                  exec('tab_kom_add', 'form_ob', _typ.INFO,
                  '%1b) Zaleca się wprowadzanie kont z określoną kwotą przez kontami z określonym procentem.'@[$_msgId]);
                  _msgId+=1
               ?}
            ?}
         ?};

         {? ~_error & _nrRach<>''
         || {? _lista*(',%1,'[_nrRach])
            || exec('tab_kom_add', 'form_ob', _typ.ERROR,
                  '%1 - powtórzony numer rachunku %2.'@[_lp, _nrRach])
            ?};
            _lista+=',%1,'[_nrRach]
         ?};

         _tRach.next()
      !}
   || exec('tab_kom_add', 'form_ob', _typ.ERROR,'Błąd konfiguracji wniosków - brak rubryk powiązanych z rachunkami'@);
      _error+=1
   ?};

   {? ~_error & _prSuma>100
   || TKOM13.erase();
      exec('tab_kom_add', 'form_ob', _typ.ERROR,
      'a) Wartość procentowego podziału dla wprowadzonych rachunków przekracza 100\%.'@);
      exec('tab_kom_add', 'form_ob', _typ.ERROR,
      'b) Należy poprawić dane.'@);
      _error+=1
   ?};

   {? ~_error & _prSuma<100
   || exec('tab_kom_add', 'form_ob', _typ.INFO,
      '%1) Łączna wartość procentowego podziału dla wprowadzonych rachunków nie przekracza 100\%.'@[$_msgId]);
      _txt:={? _isKwota
            || 'Część wynagrodzenia może zostać wypłacona w gotówce.'@
            || 'Część wynagrodzenia zostanie wypłacona w gotówce.'@
            ?};
      exec('tab_kom_add', 'form_ob', _typ.INFO,
      '%1a) %2'@[$_msgId,_txt]);
      exec('tab_kom_add', 'form_ob', _typ.INFO,
      '%1b) Należy upewnić się, czy został złożony odpowiedni wniosek o wypłatę wynagrodzenia do rąk własnych '
           'zgodnie z art. 86 § 3 KP.'@[$_msgId]);
      _msgId+=1
   ?};

   {? ~_error & _rachCount=0
   || exec('tab_kom_add', 'form_ob', _typ.INFO,
         '%1) Nie podano żadnego numeru rachunku.'@[$_msgId]);
      exec('tab_kom_add', 'form_ob', _typ.INFO,
         '%1a) Wszystkie istniejące w systemie rachunki bankowe pracownika zostaną usunięte.'@[$_msgId]);
         _msgId+=1
   ?};

:: sprawdzenie czy pracownik nie ma przypadkiem większej liczby rachunków zarejestrowanej w systemie
:: niż jest dostępnych na obecnym wniosku
   {? ~_error
   || PKO.cntx_psh(); PKO.index('_PKO');
      PKO.prefix(EDOKUM.DOSTAWCA);
      {? PKO.size()>_tRach.size()
      || exec('tab_kom_add', 'form_ob', _typ.INFO,
            '%1) Składany wniosek obejmuje mniejszą liczbę rachunków niż pracownik ma zarejestrowanych w systemie.'@
            [$_msgId]);
         exec('tab_kom_add', 'form_ob', _typ.INFO,
            '%1a)Liczba rachunków na wniosku: %2 - liczba rachunków zarejestrowanych w systemie: %3'@
            [$_msgId,$_tRach.size(),$PKO.size()]);
            _msgId+=1
      ?};
      PKO.cntx_pop()
   ?};

   {? ~_error & _msgId>1
   || exec('tab_kom_add', 'form_ob', _typ.INFO,'%1) Czy kontynuować?'@[$_msgId])
   ?}
?};
EDOK_ATR.cntx_pop();
TKOM13


\rachunek_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Formula na akceptacje - wniosek o zmiane rachunku bankowego
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref() ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || PKO.cntx_psh(); PKO.index('_PKO');
      _tRach:=exec('rach_tab','form_ob',_edokum);
      _rach_det:=_tRach.size()>1;
      {? _tRach.first()
      || {!
         |? _nr_rach:=$_tRach.RN;
            _nrRach:=exec('atr_get', 'form_ob', _edokum, 'N_NR_RACH_'+_nr_rach);
            _nrRach:=gsub(_nrRach,' ','');
            _kwota:='';
            {? _rach_det
            || _rodz:=exec('atr_get', 'form_ob', _edokum, 'N_RODZ_RACH_'+_nr_rach,'REF_SQL')+1;
               {? _rodz<>'P' & _rodz<>'K' || _rodz:='' ?};
               _kwota:=exec('atr_get', 'form_ob', _edokum, 'N_KWOTA_RACH_'+_nr_rach)
            || _rodz:='P';
               _kwota:='100'
            ?};

            _kwota:=exec('str2real','#convert',_kwota);
::          jeżeli w polu _rodz wybrano wartość "Procent", to ustawiamy procent
            {? _rodz='P'
            || _kwota:=_kwota;
               _kwota/=100
            ?};

            _nrBanku:=exec('num_kier','rachunki',_nrRach);
            _bank:=exec('FindInSet','#table','B','BANKID',_nrBanku,,,1);

            {? _nrRach=''
            || PKO.prefix(_osoba,_tRach.RN);
               {? PKO.first()
               || _old_nr:=PKO.N;
                  {? PKO.del(,1)>0
                  || exec('update_rbk','banki','U',PKO,_old_nr);
                     _result.ok+=1
                  ?}
               ?}
            || _rub:=exec('FindAndGet','#table',R,_tRach.REF,,,null());
               {? _bank<>null() & _rub<>null()
               || PKO.prefix(_osoba,_tRach.RN);
                  {? PKO.first()
                  || _old_nr:=PKO.N;
                     PKO.N:=_nrRach;
                     PKO.BA:=_bank;
                     PKO.K:=_kwota;
                     {? PKO.put(1)
                     || exec('update_rbk','banki','P',PKO,_old_nr);
                        _result.ok+=1
                     ?}
                  || PKO.blank(1);
                     PKO.OSOBA:=_osoba;
                     PKO.R:=_rub;
                     PKO.N:=_nrRach;
                     PKO.BA:=_bank;
                     PKO.UZ:='N';
                     PKO.K:=_kwota;
                     PKO.prefix();
                     {? PKO.add(1)
                     || exec('update_rbk','banki','D',PKO,PKO.N);
                        _result.ok+=1
                     ?}
                  ?}
               ?}
            ?};
            _tRach.next()
         !}
      ?};
      PKO.cntx_pop()
   ?};
   EDOK_ATR.cntx_pop();

   {? exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,'Inne')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'@
      ?}
   ?};

   {? _result.ok=0 || undo() ?};
   {? _mydo || end() ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\dane_adresowe_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS:  Formula na walidację - wniosek o zmiane danych adresowych
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

{? exec('open_edk_atr','obiegi',EDOKUM.ref)
|| _walid:=1;
   exec('akcept_wozda','form_ob',EDOKUM.ref(),EDOKUM.DOSTAWCA,_walid)
?}


\dane_adresowe_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formula na akceptacje - wniosek o zmiane danych adresowych
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
exec('akcept_wozda','form_ob',_edokum,_osoba)


\akcept_wozda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [mk] Michal Kocot [12.50]
:: OPIS: Formula na akceptacje i weryfikację - Wniosek o zmiane danych adresowych
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja=1
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

_rodzaj:='';
{? _walid || exec('tab_kom', 'form_ob') ?};
exec('JCQ_decl','#message');
exec('MS','#object');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _tab:=obj_new('OD','DO','TYP_ADRESU','KRAJ','WOJEWODZ','POWIAT','GMINA','GMGUS','KOD','POCZTA','MIASTO',
         'ULICA','DOM','LOKAL','TEL','EMAIL');

      _data_s        :=exec('atr_get','form_ob',_edokum,'DATA_OD');
      _tab.OD        :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _data_s        :=exec('atr_get','form_ob',_edokum,'DATA_DO');
      _tab.DO        :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _tab.TYP_ADRESU:=exec('atr_get','form_ob',_edokum,'TYP_ADRESU','REF_SQL')+1;
      _tab.KRAJ      :=exec('atr_get','form_ob',_edokum,'KRAJ','REF_SQL');
      _tab.WOJEWODZ  :=exec('atr_get','form_ob',_edokum,'WOJEWODZ','REF_SQL');
      _tab.POWIAT    :=exec('atr_get','form_ob',_edokum,'POWIAT');
      _tab.GMINA     :=exec('atr_get','form_ob',_edokum,'GMINA');
      _tab.GMGUS     :=exec('atr_get','form_ob',_edokum,'GMGUS');
      _tab.KOD       :=exec('atr_get','form_ob',_edokum,'KOD');
      _tab.POCZTA    :=exec('atr_get','form_ob',_edokum,'POCZTA');
      _tab.MIASTO    :=exec('atr_get','form_ob',_edokum,'MIASTO');
      _tab.ULICA     :=exec('atr_get','form_ob',_edokum,'ULICA');
      _tab.DOM       :=exec('atr_get','form_ob',_edokum,'DOM');
      _tab.LOKAL     :=exec('atr_get','form_ob',_edokum,'LOKAL');
      _tab.TEL       :=exec('atr_get','form_ob',_edokum,'TEL');
      _tab.EMAIL     :=exec('atr_get','form_ob',_edokum,'EMAIL');

::======================================================================================================================
:: Sprawdzenie dpoprawnosci danych jako takich
::======================================================================================================================
      _result.ok:=1;
      {? ~+|_tab.TYP_ADRESU
      || _result.ok:=0;
         _result.errMsg:='Brak wymaganych informacji. Dane adresowe "%1".'@[MS.name('OS_ADRES','RODZAJ')];
         {? _walid
         || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
         ?}
      ?};

      OSOBA.cntx_psh(); OS_ADRES.cntx_psh(); KRAJE.cntx_psh(); WOJEWODZ.cntx_psh();
      OSOBA.clear(); KRAJE.clear(); WOJEWODZ.clear();

      OSOBA.index('OSOBA'); OS_ADRES.index('RODZAJ'); KRAJE.index('KRAJE'); WOJEWODZ.index('WOJNAZWA');

      {? +|_tab.TYP_ADRESU
      || {? _walid
         || _pola:='OS_ADRES.POWIAT,OS_ADRES.GMINA,OS_ADRES.GMGUS,OS_ADRES.KOD,OS_ADRES.POCZTA,';
            _pola+='OS_ADRES.MIASTO,OS_ADRES.ULICA,OS_ADRES.DOM,OS_ADRES.LOKAL,OS_ADRES.TEL,OS_ADRES.EMAIL';
            _spr:=spli_str(_pola,',');
            {! _licz:=1..obj_len(_spr)
            |! {? var_pres('_co')>0 || &_co ?};
               _co:=spli_str(_spr[_licz],'.');
               _len:=MS.fld_len(_co[1],_co[2]);
               {? +|(($('_a.'+_co[2]))(_tab))>_len
               || _zn:=
                     {? _len=1 || 'znak'@
                     |? _len<=4 || 'znaki'@
                     || 'znaków'@
                     ?};
                  exec('tab_kom_add','form_ob'
                     ,1
                     ,'Za długa nazwa w polu "%1", dopuszczalna liczba to %2 %3.'@[MS.name(_co[1],_co[2]),$_len,_zn]
                     )
               ?}
            !};
            {? var_pres('_spr')>0 || &_spr ?};
            {? _tab.OD=date(0,0,0)
            || exec('tab_kom_add','form_ob'
                  ,1
                  ,'Data "%1" nie może być pusta.'@[MS.name('OS_ADRES','OD')]
                  )
            ?}
         ?};
::======================================================================================================================
:: Dane adresowe
::======================================================================================================================
         OS_ADRES.index('RODZAJ');
         OS_ADRES.prefix(OSOBA.ref(),_tab.TYP_ADRESU,);
         OS_ADRES.blank(1);
         OS_ADRES.OSOBA:=OSOBA.ref();
         OS_ADRES.OD:=_tab.OD;
         OS_ADRES.DO:=_tab.DO;
         OS_ADRES.RODZAJ:=_tab.TYP_ADRESU;
         OS_ADRES.KRAJ:={? KRAJE.seek(BIT.sqlint(_tab.KRAJ),) || KRAJE.ref() || null() ?};
         OS_ADRES.WOJEWODZ:={? WOJEWODZ.seek(BIT.sqlint(_tab.WOJEWODZ),) || WOJEWODZ.NAZWA || '' ?};
         OS_ADRES.POWIAT:=_tab.POWIAT;
         OS_ADRES.GMINA:=_tab.GMINA;
         OS_ADRES.GMGUS:=_tab.GMGUS;
         OS_ADRES.KOD:=_tab.KOD;
         OS_ADRES.POCZTA:=_tab.POCZTA;
         OS_ADRES.MIASTO:=_tab.MIASTO;
         OS_ADRES.ULICA:=_tab.ULICA;
         OS_ADRES.DOM:=_tab.DOM;
         OS_ADRES.LOKAL:=_tab.LOKAL;
         OS_ADRES.TEL:=_tab.TEL;
         OS_ADRES.EMAIL:=_tab.EMAIL;

         exec('__CHK','object');
         _spr:=__CHK.record(OS_ADRES,1,'KRAJ','MIASTO','DOM');
         {? _spr='' & (~-OS_ADRES.KRAJ().KODISO='PL')
         || {? (_spr:=__CHK.record(OS_ADRES,1,'WOJEWODZ','POWIAT','GMINA'))=''
            || _ret:='';
               _zdate:=date(0,0,0);
               {? OS_ADRES.OD=_zdate & OS_ADRES.DO=_zdate
               || _result.errMsg:='Wprowadzono niespójne daty.'@;
                  _ret:='OD'
               |? OS_ADRES.OD<>_zdate & OS_ADRES.DO<>_zdate & OS_ADRES.DO<OS_ADRES.OD
               || _result.errMsg:='Podano błędną datę obowiązywania adresu.'@;
                  _ret:='DO'
               || OS_ADRES.cntx_psh();
                  _adres:=exec('szukaj','osoba',_tab.TYP_ADRESU,EDOKUM.DATAW);
                  _old_od:={? _adres || OS_ADRES.OD || #0 ?};
                  OS_ADRES.cntx_pop();
                  _od:=OS_ADRES.OD; _do:=OS_ADRES.DO;
                  OS_ADRES.cntx_psh();
                  OS_ADRES.index('RODZAJ');
                  OS_ADRES.prefix(OS_ADRES.OSOBA,OS_ADRES.RODZAJ);
                  {? OS_ADRES.first()
                  || {!
                     |? {? {? OS_ADRES.DO=_zdate | _od=_zdate || 1 || _od<=OS_ADRES.DO ?} &
                           {? OS_ADRES.OD=_zdate | _do=_zdate || 1 || OS_ADRES.OD<=_do ?}
                        || {? (OS_ADRES.DO=_zdate | OS_ADRES.DO>_do) & _od>OS_ADRES.OD & ~OS_ADRES.next()
                           || OS_US.cntx_psh();
                              OS_US.index('OD');
                              OS_US.prefix();
                              {? OS_US.find_tab(,'OS_ADRES',,'=',OS_ADRES.ref)
::                              || _txt:='Proszę zweryfikować przypisanie Urzędu Skarbowego ze względu na '
::                                       'zmianę adresu zamieszkania.'@
                              || _txt:='Proszę zweryfikować przypisanie urzędu skarbowego '
                                       'i zmienić adres zamieszkania w zakładce "Urzędy skarbowe".'@;
                                 {? _walid
                                 || exec('tab_kom_add', 'form_ob', 2, _txt)
                                 ?}
                              ?};
                              OS_US.cntx_pop();
                              OS_ADRES.DO:=_od - 1; OS_ADRES.put()
                           || {? _old_od<>#0
                              || _rodzaj:=exec('rodzaj','osoba',_tab.TYP_ADRESU);
                                 _rodzaj:=-(1+_rodzaj)+(1-_rodzaj);
                                 exec('tab_kom_add', 'form_ob', 1,
                                    'Istnieje w systemie adres %1 obowiązujący od daty %2.'@[_rodzaj,$_old_od])
                              ?};
                              _result.errMsg:='Wprowadzono niespójne daty.'@;
                              _ret:='OD'
                           ?}
                        ?};
                        _ret='' & OS_ADRES.next()
                     !}
                  ?};
                  OS_ADRES.cntx_pop()
               ?};
               {? +_ret
               || _result.ok:=0;
                  _result.errMsg+=' Dane adresowe "'@+MS.name('OS_ADRES',_ret)+'".';
                  {? _walid
                  || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
                  ?}
               ?}
            ?}
         ?};
         {? type_of(_spr)=type_of('') & _spr<>''
         || _result.ok:=0;
            _result.errMsg:='Brak wymaganych informacji. Dane adresowe "%1".'@[MS.name('OS_ADRES',_spr)];
            {? _walid
            || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         || _result.ok*=OS_ADRES.add(1)
         ?}
      ?};

      WOJEWODZ.cntx_pop(); KRAJE.cntx_pop(); OS_ADRES.cntx_pop(); OSOBA.cntx_pop()
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,'Inne')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'@
      ?}
   ?};
   {? _walid & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   {? _walid & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zatrudnienie_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS:  Formula na walidację - wniosek o zmiane danych adresowych
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

{? exec('open_edk_atr','obiegi',EDOKUM.ref)
|| _walid:=1;
   exec('akcept_woz','form_ob',EDOKUM.ref(),EDOKUM.DOSTAWCA,_walid)
?}


\zatrudnienie_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formula na akceptacje - wniosek o zmiane danych adresowych
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
exec('akcept_woz','form_ob',_edokum,_osoba)


\akcept_woz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [mk] Michal Kocot [12.50]
:: OPIS: Formula na akceptacje - Wniosek o zatrudnienie
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja=1
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
_osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
_walid:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_rodzaj:='';
{? _walid || exec('tab_kom', 'form_ob') ?};
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? {? app_info('web_sesid')<>'' || exec('env_wt','b_proces') || 1 ?} & OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

:: powołanie obiektów
   exec('__CHK','object');
   exec('MS','#object');
   exec('load_par','#parametr');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _tab:=obj_new('PIERWSZE','NAZWISKO','PLEC','UR_DATA','PESEL','NIP','US','OBCY','OBYWATEL','DOWOD',
         'PASZPORT','TYP_ADRESU','KRAJ','WOJEWODZ','POWIAT','GMINA','GMGUS','KOD','POCZTA','MIASTO','ULICA','DOM',
         'LOKAL','TEL','EMAIL','NUMER','PODPIS','RU','PRZEDST','MIEJSCE','CZY_NADG','DOP_NADG','DOP_ST','OD','DO',
         'WYDZIAL','ST','POZWORG','CP','WYL','WYM','S1','S2','S3','PRZ_USPR','ZAM_ZAW','ZAM_OKR');

      _tab.PIERWSZE  :=exec('atr_get','form_ob',_edokum,'PIERWSZE');
      _tab.NAZWISKO  :=exec('atr_get','form_ob',_edokum,'NAZWISKO');
      _tab.PLEC      :=1+exec('atr_get','form_ob',_edokum,'PLEC');
      _data_s        :=exec('atr_get','form_ob',_edokum,'UR_DATA');
      _tab.UR_DATA   :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _tab.PESEL     :=exec('atr_get','form_ob',_edokum,'PESEL');
      _tab.NIP       :=exec('atr_get','form_ob',_edokum,'NIP');
      _tab.US        :=exec('atr_get','form_ob',_edokum,'US','REF_SQL');
      _tab.OBCY      :=1+exec('atr_get','form_ob',_edokum,'OBCY');
      _tab.OBYWATEL  :=exec('atr_get','form_ob',_edokum,'OBYWATEL');
      _tab.DOWOD     :=exec('atr_get','form_ob',_edokum,'DOWOD');
      _tab.PASZPORT  :=exec('atr_get','form_ob',_edokum,'PASZPORT');
      _tab.TYP_ADRESU:=exec('atr_get','form_ob',_edokum,'TYP_ADRESU','REF_SQL')+1;
      _tab.KRAJ      :=exec('atr_get','form_ob',_edokum,'KRAJ','REF_SQL');
      _tab.WOJEWODZ  :=exec('atr_get','form_ob',_edokum,'WOJEWODZ','REF_SQL');
      _tab.POWIAT    :=exec('atr_get','form_ob',_edokum,'POWIAT');
      _tab.GMINA     :=exec('atr_get','form_ob',_edokum,'GMINA');
      _tab.GMGUS     :=exec('atr_get','form_ob',_edokum,'GMGUS');
      _tab.KOD       :=exec('atr_get','form_ob',_edokum,'KOD');
      _tab.POCZTA    :=exec('atr_get','form_ob',_edokum,'POCZTA');
      _tab.MIASTO    :=exec('atr_get','form_ob',_edokum,'MIASTO');
      _tab.ULICA     :=exec('atr_get','form_ob',_edokum,'ULICA');
      _tab.DOM       :=exec('atr_get','form_ob',_edokum,'DOM');
      _tab.LOKAL     :=exec('atr_get','form_ob',_edokum,'LOKAL');
      _tab.TEL       :=exec('atr_get','form_ob',_edokum,'TEL');
      _tab.EMAIL     :=exec('atr_get','form_ob',_edokum,'EMAIL');
      _tab.NUMER     :=exec('atr_get','form_ob',_edokum,'NUMER');
      _data_s        :=exec('atr_get','form_ob',_edokum,'PODPIS');
      _tab.PODPIS    :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _tab.RU        :=exec('atr_get','form_ob',_edokum,'RU','REF_SQL');
      _tab.PRZEDST   :=exec('atr_get','form_ob',_edokum,'PRZEDST');
      _tab.MIEJSCE   :=exec('atr_get','form_ob',_edokum,'MIEJSCE');
      _tab.DOP_NADG  :=exec('atr_get','form_ob',_edokum,'DOP_NADG');
      _tab.CZY_NADG  :=1+exec('atr_get','form_ob',_edokum,'CZY_NADG');
      _tab.DOP_ST    :=exec('atr_get','form_ob',_edokum,'DOP_ST');
      _data_s        :=exec('atr_get','form_ob',_edokum,'OD');
      _tab.OD        :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _data_s        :=exec('atr_get','form_ob',_edokum,'DO');
      _tab.DO        :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _tab.WYDZIAL   :=exec('atr_get','form_ob',_edokum,'WYDZIAL');
      _tab.ST        :=exec('atr_get','form_ob',_edokum,'ST','REF_SQL');
      _tab.POZWORG   :=exec('atr_get','form_ob',_edokum,'POZWORG','REF_SQL');
      _tab.CP        :=exec('atr_get','form_ob',_edokum,'CP','REF_SQL');
      _tab.WYL       :=exec('atr_get','form_ob',_edokum,'WYL');
      _tab.WYM       :=exec('atr_get','form_ob',_edokum,'WYM');
      _tab.S1        :=exec('atr_get','form_ob',_edokum,'S1');
      _tab.S2        :=exec('atr_get','form_ob',_edokum,'S2');
      _tab.S3        :=exec('atr_get','form_ob',_edokum,'S3');

      _tekst         :=exec('atr_get','form_ob',_edokum,'TXT1T');
      _tekst         +=' '+exec('atr_get','form_ob',_edokum,'TXT2T');
      _tekst         +=' '+exec('atr_get','form_ob',_edokum,'TXT3T');

      _nru01:=exec('upgrade2226_nru01','wnioski_urlopowe');
      {? _nru01
      || _tab.PRZ_USPR:=1+exec('atr_get','form_ob',_edokum,'CZY_PRZ_USPR');
         _tab.ZAM_ZAW:=1+exec('atr_get','form_ob',_edokum,'CZY_ZAM_ZAW');
         _tab.ZAM_OKR:=exec('atr_get','form_ob',_edokum,'ZAM_OKR')
      ?};
::======================================================================================================================
:: Sprawdzenie poprawnosci danych jako takich
::======================================================================================================================
      {? _walid
      || _pola:='OSOBA.NAZWISKO,OSOBA.PIERWSZE,OSOBA.PESEL,OSOBA.NIP,OSOBA.OBYWATEL,OSOBA.DOWOD,';
         _pola+='OSOBA.PASZPORT,OS_ADRES.POWIAT,OS_ADRES.GMINA,OS_ADRES.GMGUS,OS_ADRES.KOD,OS_ADRES.POCZTA,';
         _pola+='OS_ADRES.MIASTO,OS_ADRES.ULICA,OS_ADRES.DOM,OS_ADRES.LOKAL,OS_ADRES.TEL,OS_ADRES.EMAIL,H_UM.NUMER,';
         _pola+='H.PRZEDST,H.MIEJSCE';
         _spr:=spli_str(_pola,',');
         {! _licz:=1..obj_len(_spr) |!
            {? var_pres('_co')>0 || &_co ?};
            _co:=spli_str(_spr[_licz],'.');
            _len:=MS.fld_len(_co[1],_co[2]);
            {? +|(($('_a.'+_co[2]))(_tab))>_len
            || _zn:=
                  {? _len=1 || 'znak'@
                  |? _len<=4 || 'znaki'@
                  || 'znaków'@
                  ?};
               exec('tab_kom_add','form_ob'
                  ,1
                  ,'Za długa nazwa w polu "%1", dopuszczalna liczba to %2 %3.'@[MS.name(_co[1],_co[2]),$_len,_zn]
                  )
            ?}
         !};
         {? var_pres('_spr')>0 || &_spr ?};
         {? _tab.PODPIS=date(0,0,0)
         || exec('tab_kom_add','form_ob'
               ,1
               ,'Data "%1" nie może być pusta.'@[MS.name('H','PODPIS')]
               )
         ?};
         {? _tab.OD=date(0,0,0)
         || exec('tab_kom_add','form_ob'
               ,1
               ,'Data "%1" nie może być pusta.'@[MS.name('H_UM','OD')]
               )
         ?}
      ?};

      OSOBA.cntx_psh(); OS_ADRES.cntx_psh(); OS_US.cntx_psh(); P.cntx_psh(); KRAJE.cntx_psh(); WOJEWODZ.cntx_psh();
      H_UM.cntx_psh(); H.cntx_psh(); STN.cntx_psh(); CP.cntx_psh(); UD_SKL.cntx_psh(); UD_TYP.cntx_psh();
      S_ZUS.cntx_psh(); RU.cntx_psh(); SLO_OSOB.cntx_psh(); F_ZATR.cntx_psh(); KT.cntx_psh(); POZWORG.cntx_psh();
      KAL_NAZW.cntx_psh();H_ODDE.cntx_psh();P_INFO.cntx_psh();

      OSOBA.clear(); KRAJE.clear(); WOJEWODZ.clear(); US.clear(); UD_TYP.clear(); SLO_OSOB.clear(); F_ZATR.clear();
      STN.clear(); CP.clear(); S_ZUS.clear(); RU.clear(); POZWORG.clear();

      OSOBA.index('OSOBA'); KRAJE.index('KRAJE'); WOJEWODZ.index('WOJNAZWA'); US.index('URZSKNAZ');
      UD_TYP.index('SYMBOL'); SLO_OSOB.index('OSOBA'); F_ZATR.index('UNIQUE');
      STN.index('STANONAZ'); CP.index('CHARPRAC'); S_ZUS.index('S_ZUS'); RU.index('K'); POZWORG.index('KOD');
      P_INFO.index('OD');
::======================================================================================================================
:: Dane osobowe
::======================================================================================================================
      _ref_osoba:=_ref_os_adres:=null();
      {? PAR_SKID.get(264)='N'| +|_tab.PESEL | +|_tab.PASZPORT
      || OSOBA.blank(1);
::       jeżeli podano PESEL to wyszukujemy osobę po PESELu w przeciwnym przypadku staramy się wyszukać po paszporcie
         {? (+|_tab.PESEL)=11
         || OSOBA.PESEL:=|_tab.PESEL
         ?};
         _exist:=OSOBA.find_rec();
         {? ~_exist & +|_tab.PASZPORT
         || OSOBA.blank(1);
            OSOBA.PASZPORT:=|_tab.PASZPORT
         ?};
         _exist:=OSOBA.find_rec();
         {? _exist
         || _result.ok+=1;
            _ref_osoba:=OSOBA.ref();
            {? _walid &
               (OSOBA.NAZWISKO<>_tab.NAZWISKO |
               OSOBA.PIERWSZE<>_tab.PIERWSZE |
               OSOBA.PLEC<>_tab.PLEC |
               OSOBA.UR_DATA<>_tab.UR_DATA |
               OSOBA.OBCY<>_tab.OBCY |
               OSOBA.OBYWATEL<>_tab.OBYWATEL |
               OSOBA.DOWOD<>_tab.DOWOD |
               OSOBA.PASZPORT<>_tab.PASZPORT |
               OSOBA.PESEL<>_tab.PESEL |
               OSOBA.NIP<>_tab.NIP)
            || exec('tab_kom_add','form_ob'
                  ,2
                  ,'Wykryto różnicę w istniejących danych osobowych. Zmiany nie będą zapisane.'@
               )
            ?}
         || OSOBA.NAZWISKO:=_tab.NAZWISKO;
            OSOBA.PIERWSZE:=_tab.PIERWSZE;
            OSOBA.PLEC:=_tab.PLEC;
            OSOBA.UR_DATA:=_tab.UR_DATA;
            OSOBA.OBCY:=_tab.OBCY;
            OSOBA.OBYWATEL:=_tab.OBYWATEL;
            OSOBA.DOWOD:=_tab.DOWOD;
            OSOBA.PASZPORT:=_tab.PASZPORT;
            OSOBA.PESEL:=_tab.PESEL;
            OSOBA.NIP:=_tab.NIP;

            _spr:={? |OSOBA.NAZWISKO='' || 'NAZWISKO'
                  |? |OSOBA.PIERWSZE='' || 'PIERWSZE'
                  |? OSOBA.UR_DATA=date(0,0,0) || 'UR_DATA'
                  || {? exec('nieobcy','osoba')
                     || {? PAR_SKID.get(264)='T'
                        || {? |OSOBA.PESEL='' || 'PESEL'
                           || 1
                           ?}
                        ?}
                     || {? |OSOBA.OBYWATEL='' || 'OBYWATEL'
                        |? |OSOBA.PASZPORT='' || 'PASZPORT'
                        || 1
                        ?}
                     ?}
                  ?};

            {? var_pres('_spr')=type_of('') & _spr<>''
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Dane osobowe "%1".'@[MS.name('OSOBA',_spr)];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            || _result.ok+=OSOBA.add(1);
               {? _result.ok=0
               || _result.errMsg:='Dodanie rekordu osoby nie powiodło się.'@
               ?}
            ?};
            {? _result.ok
            || _opis2:='Na podstawie: %1 o nr: %2'@[exec('nazwa_woz','obiegi'),EDOKUM.ID];
               _result.ok:=exec('add_giodo','form_ob',OSOBA.ref(),_opis2,,'W');
               _ref_osoba:=OSOBA.ref()
            ?}
         ?};
         {? _walid & _result.ok
         || _par237:=exec('get_par','#parametr',237,2)='T';
            {? _par237 & +OSOBA.DOWOD
            || {? PAR_SKID.get(264)='T'
               || _wy:=exec('dowod_ok','#id',OSOBA.DOWOD,1)
               || _wy:=1
               ?};
               _spr:=
                  {? _wy=-3 | _wy=-2
                  || 'Numer dowodu osobistego nie jest zgodny ze schematem właściwym dla dowodów nowego typu.'@
                  |? _wy<1
                  || 'Błędny numer dowodu osobistego.'@
                  || ''
                  ?};
               {? +_spr
               || exec('tab_kom_add', 'form_ob', 3, _spr)
               ?}
            ?};
            _par238:=exec('get_par','#parametr',238,2)='T';
            {? _par238 & exec('nieobcy','osoba') & ({? PAR_SKID.get(264)='N' || +OSOBA.PESEL || 1 ?})
            || _kom:=
                  {? OSOBA.UR_DATA~1=0
                  || exec('pesel_ok','#id',OSOBA.PESEL)
                  || exec('pesel_ok','#id',OSOBA.PESEL,OSOBA.UR_DATA,OSOBA.PLEC)
                  ?};
               {? +_kom>1
               || _spr:='Niepoprawny numer PESEL.'@;
                  exec('tab_kom_add', 'form_ob', 3, _spr)
               ?}
            ?};
            {? ~exec('nip_ok','#id',OSOBA.NIP,1)
            || exec('tab_kom_add','form_ob',3,'Wprowadzony numer NIP jest niepoprawny.'@)
            ?}
         ?}
      || {? PAR_SKID.get(264)='T'
         || _result.ok:=0;
            _result.errMsg:='Brak wymaganych informacji. Dane osobowe "%1" lub "%2".'@
                            [MS.name('OSOBA','PESEL'),MS.name('OSOBA','PASZPORT')];
            {? _walid
            || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         ?}
      ?};
::======================================================================================================================
:: Dane adresowe
::======================================================================================================================
      {? _result.ok
      || OS_ADRES.index('RODZAJ');
         OS_ADRES.prefix(_ref_osoba,_tab.TYP_ADRESU);
         _add:=~(OS_ADRES.find_le(_tab.PODPIS) & (OS_ADRES.DO=date(0,0,0) | _tab.PODPIS<=OS_ADRES.DO));
         {? _add
         || OS_ADRES.blank(1);
            OS_ADRES.OSOBA:=_ref_osoba;
            OS_ADRES.OD:=_tab.PODPIS;
            OS_ADRES.DO:=date(0,0,0);
            OS_ADRES.RODZAJ:=_tab.TYP_ADRESU;
            OS_ADRES.KRAJ:={? KRAJE.seek(BIT.sqlint(_tab.KRAJ),) || KRAJE.ref() || null() ?};
            OS_ADRES.WOJEWODZ:={? WOJEWODZ.seek(BIT.sqlint(_tab.WOJEWODZ),) || WOJEWODZ.NAZWA || '' ?};
            OS_ADRES.POWIAT:=_tab.POWIAT;
            OS_ADRES.GMINA:=_tab.GMINA;
            OS_ADRES.GMGUS:=_tab.GMGUS;
            OS_ADRES.KOD:=_tab.KOD;
            OS_ADRES.POCZTA:=_tab.POCZTA;
            OS_ADRES.MIASTO:=_tab.MIASTO;
            OS_ADRES.ULICA:=_tab.ULICA;
            OS_ADRES.DOM:=_tab.DOM;
            OS_ADRES.LOKAL:=_tab.LOKAL;
            OS_ADRES.TEL:=_tab.TEL;
            OS_ADRES.EMAIL:=_tab.EMAIL;

            _spr:=__CHK.record(OS_ADRES,1,'KRAJ','MIASTO','DOM');
            {? _spr='' & (~-OS_ADRES.KRAJ().KODISO='PL')
            || {? (_spr:=__CHK.record(OS_ADRES,1,'WOJEWODZ','POWIAT','GMINA'))=''
               || _spr:=exec('adr_over','osoba')
               ?}
            ?};
            {? type_of(_spr)=type_of('') & _spr<>''
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Dane adresowe "%1".'@[MS.name('OS_ADRES',_spr)];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            || _result.ok*=OS_ADRES.add(1)
            ?};
            {? _result.ok
            || _ref_os_adres:=OS_ADRES.ref()
            || _result.errMsg:='Dodanie rekordu adresu nie powiodło się.'@
            ?}
         || _ref_os_adres:=OS_ADRES.ref();
            {? _walid &
               (OS_ADRES.KRAJ<>({? KRAJE.seek(BIT.sqlint(_tab.KRAJ),) || KRAJE.ref() || null() ?}) |
               OS_ADRES.WOJEWODZ<>({? WOJEWODZ.seek(BIT.sqlint(_tab.WOJEWODZ),) || WOJEWODZ.NAZWA || '' ?}) |
               OS_ADRES.POWIAT<>_tab.POWIAT |
               OS_ADRES.GMINA<>_tab.GMINA |
               OS_ADRES.GMGUS<>_tab.GMGUS |
               OS_ADRES.KOD<>_tab.KOD |
               OS_ADRES.POCZTA<>_tab.POCZTA |
               OS_ADRES.MIASTO<>_tab.MIASTO |
               OS_ADRES.ULICA<>_tab.ULICA |
               OS_ADRES.DOM<>_tab.DOM |
               OS_ADRES.LOKAL<>_tab.LOKAL |
               OS_ADRES.TEL<>_tab.TEL |
               OS_ADRES.EMAIL<>_tab.EMAIL)
            || exec('tab_kom_add','form_ob'
                  ,2
                  ,'Wykryto różnicę w istniejących danych adresowych. Zmiany nie będą zapisane.'@
               )
            ?}
         ?}
      ?};
::======================================================================================================================
:: Informacja o Urzedzie Skarbowym
::======================================================================================================================
      {? _result.ok
      || _jest:=US.seek(BIT.sqlint(_tab.US),);
         {? _jest & OSOBA.US=null()
         || _add:=0;
            OS_US.index('OD');
            OS_US.prefix(_ref_osoba);
            {? OS_US.find_le(_tab.PODPIS)
            || {? OS_US.US<>US.ref() & OS_US.OD<>_tab.PODPIS
               || _add:=1
               ?}
            || _add:=1
            ?};
            {? _add
            || OS_US.blank(1);
               OS_US.OSOBA:=_ref_osoba;
               OS_US.OD:=_tab.PODPIS;
               OS_US.US:=US.ref();
               OS_US.OS_ADRES:=_ref_os_adres;

               _spr:=__CHK.record(OS_US,1,'OD','US','OS_ADRES');
               {? _spr<>''
               || {? _spr='OS_ADRES'
                  || _spr:='AD_POD'
                  ?}
               ?};
               _ref:=null();
               OS_US.cntx_psh();
               OS_US.index('OD');
               OS_US.prefix(_ref_osoba);
               {? OS_US.find_key(OS_US.OD) & OS_US.ref()<>_ref
               || {? _walid
                  || _txt:='Urząd Skarbowy jest inny niż zapisany bazie. Zmiany nie będą zapisane.'@;
                     exec('tab_kom_add', 'form_ob',2,_txt)
                  ?};
                  OS_US.cntx_pop()
               || OS_US.cntx_pop();
                  {? var_pres('_spr')=type_of('') & _spr<>''
                  || _result.ok:=0;
                     _result.errMsg:='Brak wymaganych informacji. Urząd Skarbowy "%1".'@[MS.name('OS_US',_spr)];
                     {? _walid
                     || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
                     ?}
                  || _result.ok*=OS_US.add(1);
                     {? _result.ok
                     || exec('os_us_ao','osoba',_ref_osoba)
                     || _result.errMsg:='Dodanie rekordu urzędu skarbowego nie powiodło się.'@
                     ?}
                  ?}
               ?}
            ?}
         |? _jest & US.ref()<>OSOBA.US
         || exec('tab_kom_add', 'form_ob', 2, 'Urząd Skarbowy jest inny niż zapisany bazie. Zmiany nie będą zapisane.'@)
         ?}
      ?};
::======================================================================================================================
:: Pracownik
::======================================================================================================================
      ZZ_DOK.cntx_psh();
      ZZ_DOK.use('zz_do'+($REF.FIRMA+1));
      ZZ_DOK.index('ID');
      ZZ_OSOBA.cntx_psh();
      ZZ_OSOBA.index('ZZ_LINK');
      ZZ_OSOBA.prefix();
      _ref_p:=null();
      _pozworg:=null();
      {? _result.ok
      || exec('__F_ZATR','object');
         _f_zatr:=__F_ZATR.P;
         __F_ZATR.mod('P');
         P.index('PRACOIP');
         P.clear();
         F_ZATR.clear();
         STN.clear();
         _ud_typ:={? UD_TYP.find_key('PODZORG',) || UD_TYP.ref() || null() ?};
         UD_SKL.index('SYMBOL');
         UD_SKL.prefix(_ud_typ);
         _ud_skl:={? UD_SKL.find_key(_tab.WYDZIAL,) || UD_SKL.ref() || null() ?};
         _stn:={? STN.seek(BIT.sqlint(_tab.ST),) || STN.ref() || null() ?};
         _par313:=exec('get_par','#parametr',313,2)='T';
         POZWORG.index('KOD');

         _pozworg:={? POZWORG.seek(BIT.sqlint(_tab.POZWORG),) || POZWORG.ref() || null() ?};
         _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
::       sprawdzamy czy obecnie jest zatrudniony pracownik na tym samym stanowisku i wydziale
         _overlap:=0;
         _zatr_p_big:={? F_ZATR.seek(BIT.sqlint(__F_ZATR.REF),) || F_ZATR.ref() || null() ?};
         __F_ZATR.mod('p');
         _zatr_p_small:=P.F_ZATR:={? F_ZATR.seek(BIT.sqlint(__F_ZATR.REF),) || F_ZATR.ref() || null() ?};
         P.cntx_psh();
         P.use('pracowni');
         P.index('OSOBA');
         P.prefix(_ref_osoba,_firma);
         {? P.first()
         || {!
            |? {? P.WYDZIAL=_ud_skl & P.ST=_stn & (P.DZ=#0 | P.DZ>=_tab.OD) &
                  (P.F_ZATR=_zatr_p_small | P.F_ZATR=_zatr_p_big)
               || _overlap:=1
               ?};
               ~_overlap & P.next()
            !}
         ?};
         P.cntx_pop();
         P.blank(1);
         P.FIRMA:=_firma;
         F_ZATR.index('UNIQUE');
         P.F_ZATR:={? F_ZATR.seek(BIT.sqlint(__F_ZATR.REF),) || F_ZATR.ref() || null() ?};
         P.WYDZIAL:=_ud_skl;
         P.OSOBA:=_ref_osoba;
         P.ST:=_stn;

         {? _ud_skl & _stn & ~_overlap & ((_par313 & _pozworg) | (~_par313 & ~_pozworg))
::          zatrudniamy zawsze do brudnopisu (małe 'p')
         || _ip:=exec('prac_ip','pracownik','p');
            __F_ZATR.mod('p');
            P.F_ZATR:={? F_ZATR.seek(BIT.sqlint(__F_ZATR.REF),) || F_ZATR.ref() || null() ?};
            _n_ip:=0;
            {? type_of(_ip)=type_of(SYSLOG)
            || _licz:=1;
               {? _ip.find_key(_n_ip:=1)
               || {! _licz |? _ip.find_key(_licz) !}
               ?};
               _n_ip:=_licz
            ?};
            _prev:='PRAC '+$_n_ip;
            _len:=MS.fld_len('P','T');
            P.T:=form(_prev,-_len);
            P.IP:=_n_ip;
            OSOBA.KALI:='T';
            KAL_NAZW.index('KAL_NAZW');
            KAL_NAZW.prefix();
            P.DZA:=_tab.OD;
            P.KAL:={? KAL_NAZW.find_key(_firma,'standard',) || KAL_NAZW.ref() || null() ?};
            P.ODDEL:='N';
            {? _n_ip
            || _result.ok*=P.add(1);
               {? _result.ok
               || _ref_p:=P.ref()
               || _result.errMsg:='Dodanie rekordu pracownika nie powiodło się.'@
               ?};
               SLO_OSOB.index('OSOBA');
               SLO_OSOB.blank(1);
               SLO_OSOB.F_ZATR:=P.F_ZATR;
               SLO_OSOB.OSOBA:=P.OSOBA;
               SLO_OSOB.ID:=P.IP;
               {? _result.ok & (~SLO_OSOB.find_rec())
               || {? ~SLO_OSOB.add(1)
                  || _result.ok:=0;
                     _result.errMsg:='Dodanie rekordu SLO_OSOB nie powiodło się.'@
                  ?}
               ?}
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Pracownik "%1".'@[MS.name('P','IP')];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?}
         || {? ~_ud_skl
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Pracownik "%1".'@[MS.name('P','WYDZIAL')];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? ~_stn
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Pracownik "%1".'@[MS.name('P','ST')];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? _par313 & ~_pozworg
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Pracownik "%1".'@[MS.name('P','POZWORG')];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? ~_par313 & _pozworg
            || _result.ok:=0;
               _result.errMsg:='"Pozycja w organizacji" nie jest wykorzystywane w systemie. Pole powinno być puste.'@;
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? ~_add
            || _result.ok:=0;
               _result.errMsg:='Taki pracownik już istnieje. Zatrudnienie nie jest możliwe.'@;
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?}
         ?};
         __F_ZATR.mod(_f_zatr)
      ?};

::======================================================================================================================
:: Umowa i przebieg
::======================================================================================================================
      {? _result.ok & _nru01
      || _ru_kod:=exec('FindAndGet','#table',RU,_tab.RU,,"K",'');
         {? _ru_kod<>'A' & (_tab.PRZ_USPR='T' | _tab.ZAM_ZAW='T' | +form(_tab.ZAM_OKR))
         || _result.ok:=0;
            _result.errMsg:='Pola: "Czy umowa przedłużona o nieobecności usprawiedliwione?", '
                            '"Czy zamiar zawarcia umowy na czas określony?", '
                            '"Planowany okres umowy na czas określony" '
                            'należy uzupełnić tylko dla umowy na okres próbny.'@;
            {? _walid
            || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         |? _ru_kod='A' & (_tab.ZAM_ZAW<>'T' & +form(_tab.ZAM_OKR))
         || _result.ok:=0;
            _result.errMsg:='Pole: "Planowany okres umowy na czas określony" powinno pozostać niewypełnione.'@;
            {? _walid
            || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         ?}
      ?};

      {? _result.ok
      || H.use('_his'+{? P.F_ZATR().DOCELOWA='T' || 't' || '_' ?});
         exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));
         H_ODDE.use('h_odde'+(H.name()+1));
         H_ODDE.index('POD');
         H_ODDE.clear();
         H_UM.index('OD');
         H_UM.prefix(_ref_p);
         H.index('_HISTDAT');
         H.prefix(_ref_p);
         {? ~H_UM.first()
         || H_UM.blank(1);
            H.blank(1);
            _prev:=_tab.NUMER;
            _len:=MS.fld_len('H_UM','NUMER');
            H_UM.NUMER:=form(_prev,-_len);
            H_UM.RU:={? RU.seek(BIT.sqlint(_tab.RU),) || RU.ref() || null() ?};
            H_UM.P:=_ref_p;
            H_UM.OD:=_tab.OD;
            H_UM.DO:=_tab.DO;
            H_UM.P_OD:=H_UM.OD;
            H_UM.P_DO:=H_UM.DO;
            H_UM.SW:='N';
            H_UM.EKW_LICZ:='N';
            {? _nru01
            || H_UM.PRZ_USPR:=_tab.PRZ_USPR;
               H_UM.ZAM_ZAW:=_tab.ZAM_ZAW;
               H_UM.ZAM_OKR:=_tab.ZAM_OKR
            ?};
            H.P:=_ref_p;
            _ud_typ:={? UD_TYP.find_key('PODZORG',) || UD_TYP.ref() || null() ?};
            UD_SKL.index('SYMBOL');
            UD_SKL.prefix(_ud_typ);
            _ud_skl:={? UD_SKL.find_key(_tab.WYDZIAL,) || UD_SKL.ref() || null() ?};
            H.WYDZIAL:=_ud_skl;
            H.ST:={? STN.seek(BIT.sqlint(_tab.ST),) || STN.ref() || null() ?};
            H.CP:={? CP.seek(BIT.sqlint(_tab.CP),) || CP.ref() || null() ?};
            H.WYM:=#_tab.WYM;
            H.WYL:=#_tab.WYL;
            H.WY:={? H.WYM || H.WYL/H.WYM$3 || 0 ?};
            H.RWY:=H.WY;
            H.RWYL:=H.WYL;
            H.RWYM:=H.WYM;
            _tmp:=H_UM.NUMER;
            H_UM.NUMER:=|H_UM.NUMER;

            _len:=MS.fld_len('H_UM','NUMER');
            H_UM.NUMER:=_tmp;
            H.PODPIS:=_tab.PODPIS;
            H.PRZYG:=H.PODPIS;
            H.OD:=H_UM.OD;
            H.DO:=H_UM.DO;
            H.KZ:=exec('h_kz_bl','pracownik');
            H.PRZEDST:=_tab.PRZEDST;
            H.MIEJSCE:=_tab.MIEJSCE;
            H.DOP_NADG:=#gsub(_tab.DOP_NADG,',','.');
            H.CZY_NADG:=_tab.CZY_NADG;
            H.DOP_ST:=#gsub(_tab.DOP_ST,',','.');
            H.CZYWAL:=H.CZYWAL2:=H.CZYWAL3:='N';
            H.SP:='N';
            H.POZWORG:=_pozworg;
            H.S2T:=H.S3T:='K';
            H.PMP:='T';
            H.MAC:='N';
            H.PAT:='N';
            H.WN:='';
            H.OS_ADRES:=_ref_os_adres;
            H.S1:=#gsub(_tab.S1,',','.');
            H.S2:=#gsub(_tab.S2,',','.');
            H.S3:=#gsub(_tab.S3,',','.');
            H.RU:=H_UM.RU;
            H.ODDEL:=H.KODDEL:='N';
            {? H_UM.OD<H.PODPIS
            || {? _walid
               || exec('tab_kom_add','form_ob'
                     ,2
                     ,'Data podpisania umowy jest późniejsza niż data jej rozpoczęcia.'@
                  )
               ?}
            ?};
            exec('h_wyx_ae','pracownik');

::          sprawdź poprawność umowy o pracę i angażu
            _sprhum:=exec('h_um_p_ae','pracownik',0,1);
            _sprh:=
               {? H.RU().K<>'C' & H.RU().K<>'E'
               || __CHK.record(H,1,'OD','DO','WYDZIAL','ST','KZ','CP','KW_MSC','S1')
               || __CHK.record(H,1,'OD','WYDZIAL','ST','KZ','CP','KW_MSC','S1')
               ?};
            {? ~H.S1 || H.CZYWAL:='N' ?};
            {? ~H.S2 || H.S2T:='K'; H.S2P:=null(); H.CZYWAL2:='N' ?};
            {? ~H.S3 || H.S3T:='K'; H.S3P:=null(); H.CZYWAL3:='N' ?};
            H.WAL:=H.ZWAL:=null();

            {? ~(H.WY>0 & H.WY<=1)
            || _result.ok:=0;
               _result.errMsg:='Wymiar zatrudnienia musi być określony.'@;
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? var_pres('_sprhum')=type_of('')  & _sprhum<>''
            || {? 'NUMER,RU,OD,DO'*_sprhum
               || _sprhum:='Pole: "%1"'@[MS.comment(H_UM,_sprhum)]
               ?};
               _sprhum:={? _sprhum+1='.' || _sprhum-1 || _sprhum ?};
               _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. %1.'@[_sprhum];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? _result.ok & var_pres('_sprh')=type_of('')  & _sprh<>''
            || {? 'OD,DO,WYDZIAL,ST,KZ,CP,KW_MSC,S1,PRZYG,PODPIS'*_sprh
               || _sprh:='Pole: "%1"'@[MS.comment(H,_sprh)]
               ?};
               _sprh:={? _sprh+1='.' || _sprh-1 || _sprh ?};
               _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. %1.'@[_sprh];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};

            {? _result.ok
            || _result.ok*=H_UM.add(1);
               {? _result.ok
               || H.UMOWA:=H_UM.ref();
                  _result.ok*=H.add(1);
                  {? _result.ok
                  || H.memo_set(_tekst,'INNE');
                     H.memo_put(,'INNE');
                     _result.ok*=H.put(1);
                     {? _result.ok
                     || EDOKUM.REFLISTA:=$H_UM.ref();
                        EDOKUM.REFPRAC:=$H.ref()
                     || _result.errMsg:='Dodanie rekordu przebiegu umowy nie powiodło się.'@
                     ?};
                     {? P.KAL<>null
                     || exec('dod_kal_czesc','kaledit',P)
                     ?};
                     exec('pracownik_aktualizuj','pracownik')
                  ?}
               || _result.errMsg:='Dodanie rekordu umowy nie powiodło się.'@
               ?}
            ?}
         || _result.ok:=0;
            _result.errMsg:='Niemożliwe zatrudnienie. Ten pracownik ma już umowę.'@;
            {? _walid
            || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         ?}
      ?};

      ZZ_OSOBA.cntx_pop();
      ZZ_DOK.cntx_pop();
      P_INFO.cntx_pop();
      H_ODDE.cntx_pop();KAL_NAZW.cntx_pop();
      POZWORG.cntx_pop(); KT.cntx_pop(); F_ZATR.cntx_pop(); SLO_OSOB.cntx_pop(); RU.cntx_pop(); S_ZUS.cntx_pop();
      UD_TYP.cntx_pop(); UD_SKL.cntx_pop(); CP.cntx_pop(); STN.cntx_pop(); H.cntx_pop(); H_UM.cntx_pop();
      WOJEWODZ.cntx_pop(); KRAJE.cntx_pop(); P.cntx_pop(); OS_US.cntx_pop(); OS_ADRES.cntx_pop();OSOBA.cntx_pop();
      exec('otworz_h_um','pracownik')
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_ref_osoba,'Inne')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'@
      ?}
   ?};
   {? _walid & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   {? _walid & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
_ref_h_um:=EDOKUM.REFLISTA;
_ref_h:=EDOKUM.REFPRAC;
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
{? _result.ok & ~_walid & +|_ref_h_um
|| EDOKUM.REFLISTA:=_ref_h_um;
   EDOKUM.REFPRAC:=_ref_h;
   EDOKUM.put()
?};
_result


\add_giodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
::  MOD: [mk] Michal Kocot
:: OPIS: Zapisuje informacje o dolaczeniu rekordu osoba podczas akceptacji wniosku o zmiane danych osobowych
::   WE: _a - [REFERENCE] - wskazanie na osobe (OSOBA.ref)
::       _b - [STRING]    - druga czesc opisu
::       _c - [STRING]    - trzecia czesc opisu
::       _d - [STRING]    - kod operacji na danych osobowych (domyślnie zarejestrowanie danych w systemie)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_os_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
 _opis2:={? var_pres('_b')=type_of('')   || _b || ''        ?};
 _opis3:={? var_pres('_c')=type_of('')   || _c || ''        ?};
_kod_op:={? var_pres('_d')=type_of('')   || _d || 'W'       ?};

_opis1:='';
_kody:=exec('kod','giodo');
{? exec('kod_opis','giodo',_kody,_kod_op)
|| _opis1:=SKID.GIOOPIS
?};
_opis:=_opis1+'\n'+_opis2+'\n'+_opis3;
_res:=0;
OSOBA.cntx_psh();
OSOBA.index('OSOBA');
OSOBA.prefix();
{? OSOBA.seek(_os_ref)
|| _res:=exec('zapisz','giodo','osoba',_os_ref,date,_kod_op,_opis)
?};
OSOBA.cntx_pop();
_res


\tab_kom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [12.50]
:: OPIS: utworzenie tabeli na komunikaty
::----------------------------------------------------------------------------------------------------------------------
exec('tab_kom_del', 'form_ob');
TKOM13:=tab_tmp(1, 'BLOKAKC', 'INTEGER', 'BLOKAKC',
                   'OPIS', 'STRING[255]', 'OPIS')


\tab_kom_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [12.50]
:: OPIS: usunięcie tabeli na komunikaty
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('TKOM13')>0 || obj_del(TKOM13) ?}


\tab_kom_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [12.50]
:: OPIS: dołączenie komunikatu do TKOM13
:: WE: _a integer 1/2/3
::     _b opis
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('TKOM13')>0
|| TKOM13.blank();
   TKOM13.BLOKAKC:=_a;
   TKOM13.OPIS:=_b;
   TKOM13.add()
|| 0
?}


\slownik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [2015]
:: OPIS: Słowniki tymczasowe do innych danych we wnioskach
::   WE: _a - rodzaj pola słownikowanego
::       _b - w pewnych przypadkach np dla stanowisk w jednostce
::   WY: tabelka tymczosowa _ret
::----------------------------------------------------------------------------------------------------------------------
_ret:=tab_tmp(,'KOD','STRING[8]','Kod','TR','STRING[100]','Tresc','REF_SQL','STRING[16]','Sloref');
_rodzaj:={? var_pres('_a')=type_of('') || _a || EDOK_ATR.TAT().NA ?};
 _param:={? var_pres('_b')>0           || _b || ~~                ?};

_get_typ:=" SLO_TYP.cntx_psh();
            SLO_TYP.index('SYMBOL');
            SLO_TYP.prefix(_a,_a);
            _typ:={? SLO_TYP.first || SLO_TYP.ref || 0 ?};
            SLO_TYP.cntx_pop();
            _typ";

{? _rodzaj='TAK_NIE'
|| _ret.KOD:='T'; _ret.TR:=exec('get_war_true','obiegi'); _ret.REF_SQL:='000000000000000T'; _ret.add();
   _ret.KOD:='N'; _ret.TR:=exec('get_war_false','obiegi'); _ret.REF_SQL:='000000000000000N'; _ret.add()

|? _rodzaj='TAK_NIE_D'
|| _ret.KOD:='T'; _ret.TR:=exec('get_war_true','obiegi'); _ret.REF_SQL:='000000000000000T'; _ret.add();
   _ret.KOD:='N'; _ret.TR:=exec('get_war_false','obiegi'); _ret.REF_SQL:='000000000000000N'; _ret.add();
   _ret.KOD:='D'; _ret.TR:='Dobrowolne'@; _ret.REF_SQL:='000000000000000D'; _ret.add()

|? _rodzaj='ok'
|| _ret.KOD:=''; _ret.TR:=''; _ret.REF_SQL:='0000000000000000'; _ret.add();
   _ret.KOD:='M'; _ret.TR:='Modyfikacja'@; _ret.REF_SQL:='0000000000000MOD'; _ret.add();
   _ret.KOD:='U'; _ret.TR:='Usunięcie'@; _ret.REF_SQL:='0000000000000DEL'; _ret.add()

|? _rodzaj='MUD'
|| _ret.KOD:=''; _ret.TR:='M - Modyfikacja'@; _ret.REF_SQL:='0000000000000MOD'; _ret.add();
   _ret.KOD:=''; _ret.TR:='U - Usunięcie'@; _ret.REF_SQL:='0000000000000DEL'; _ret.add();
   _ret.KOD:=''; _ret.TR:='D - Dołączenie'@; _ret.REF_SQL:='0000000000000NEW'; _ret.add()

|? _rodzaj='PLEC'
|| _ret.KOD:=''; _ret.TR:='K - kobieta'@; _ret.REF_SQL:='000000000000000K'; _ret.add();
   _ret.KOD:=''; _ret.TR:='M - mężczyzna'@; _ret.REF_SQL:='000000000000000M'; _ret.add()

|? _rodzaj='RODZ_RACH'
|| _ret.KOD:='P'; _ret.TR:='%'; _ret.REF_SQL:='000000000000000P'; _ret.add();
   _ret.KOD:='K'; _ret.TR:='Kwota'@; _ret.REF_SQL:='000000000000000K'; _ret.add();
   _ret.KOD:=''; _ret.TR:=''; _ret.REF_SQL:='0000000000000000'; _ret.add()

|? _rodzaj='PRZED'
||
:: ustawiony jest na tym etapie kontekst EDOK_ATR
   _nr_pola:={? var_pres('_param')=type_of('') || _param || EDOK_ATR.TAT().NA+1 ?};
   _edokum:=EDOKUM.ref();
   _data:=exec('str2date','#convert',exec('atr_get','form_ob',_edokum,'DATA_'+_nr_pola));
   _p_ref:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL');
   _typ:=1+(1-exec('typ_dnia','form_ob',_p_ref,_data));
   {? _typ='R'
   || _ret.KOD:='T'; _ret.TR:='Przed rozpoczęciem pracy'@; _ret.REF_SQL:='000000000000000T'; _ret.add();
      _ret.KOD:='N'; _ret.TR:='Po zakończeniu pracy'@; _ret.REF_SQL:='000000000000000N'; _ret.add()
   || _ret.KOD:='G'; _ret.TR:='Od - Do'@; _ret.REF_SQL:='000000000000000G'; _ret.add()
   ?}

|? _rodzaj='PKO'
|| OSOBA.cntx_psh();
   OSOBA.index('OSOBA');
   OSOBA.clear();
   _osoba:=exec('atr_get','form_ob',EDOKUM.ref(),'OSOBA','REF_SQL');
   _osoba:={? +|_osoba & OSOBA.seek(BIT.sqlint(_osoba),) || OSOBA.ref() || null() ?};
   OSOBA.cntx_pop();
   {? _osoba
   || PKO.cntx_psh();
      PKO.index('_PKO');
      PKO.prefix(_osoba);
      {? PKO.first()
      || {!
         |? _ret.KOD:='';
            _ret.TR:=PKO.N+{? PKO.UZ='T' || ' (domyślny)'@ || '' ?};
            _ret.REF_SQL:=$PKO.ref();
            _ret.add();
            PKO.next()
         !}
      ?};
      PKO.cntx_pop()
   ?}

|? _rodzaj='TXT'
|| {? EDOKUM.memo_get(,'UW_OPDL')
   || _txt:=EDOKUM.memo_txt(,,'UW_OPDL');
      _str:=STR.split(_txt,' ');
      {! _licz:=1.._b
      |! _ret.KOD:='';
         _ret.TR:=STR.line(80);
         _ret.REF_SQL:=((16*'0')+$_licz)+16;
         {? _b=_licz & +|STR.line(80) || _ret.TR:=(_ret.TR-6)+' (...)' ?};
         _ret.add()
      !}
   ?}

|? _rodzaj='TYP_ADRESU'
|| _kod:=obj_new(4); _kod[1]:='C'; _kod[2]:='S'; _kod[3]:='K'; _kod[4]:='I';
   {! _licz:=1..obj_len(_kod)
   |! _ret.KOD:=_kod[_licz];
      _ret.TR:=exec('rodzaj','osoba',_kod[_licz]);
      _ret.REF_SQL:='000000000000000'+_kod[_licz];
      _ret.add()
   !}

|? _rodzaj='WOJEWODZ'
|| WOJEWODZ.cntx_psh();
   WOJEWODZ.index('WOJNAZWA');
   WOJEWODZ.prefix();
   {? WOJEWODZ.first()
   || {!
      |? _ret.KOD:=''; _ret.TR:=WOJEWODZ.NAZWA; _ret.REF_SQL:=$WOJEWODZ.ref; _ret.add();
         WOJEWODZ.next()
      !}
   ?};
   WOJEWODZ.cntx_pop()

|? _rodzaj='KRAJE'
|| KRAJE.cntx_psh();
   KRAJE.index('KRAJE');
   KRAJE.prefix();
   _ret.KOD:=''; _ret.TR:=''; _ret.REF_SQL:=''; _ret.add();
   {? KRAJE.first()
   || {!
      |? _ret.KOD:=KRAJE.SYM; _ret.TR:=KRAJE.NAZ; _ret.REF_SQL:=$KRAJE.ref; _ret.add();
         KRAJE.next()
      !}
   ?};
   KRAJE.cntx_pop()

|? _rodzaj='OS_US'
|| US.cntx_psh();
   US.index('URZSKNAZ');
   US.prefix();

   {? US.first()
   || {!
      |? _ret.KOD:=US.SYM; _ret.TR:=US.NU; _ret.REF_SQL:=$US.ref(); _ret.add();
         US.next()
      !}
   ?};
   US.cntx_pop()

|? _rodzaj='ADRES_PRAC'
|| OS_ADRES.cntx_psh(); OSOBA.cntx_psh();
:: podczytanie osoby z wniosku
   EDOKUM.DOSTAWCA();
   _adr:="
      {? _a='S' || 'Adres pobytu stałego'
      |? _a='C' || 'Adres zamieszkania'
      |? _a='K' || 'Adres do korespondencji'
      || 'Inny'
      ?}
   ";
   _kod:=obj_new(4); _kod[1]:='S'; _kod[2]:='C'; _kod[3]:='K'; _kod[4]:='I';
   {! _licz:=1..obj_len(_kod) |!
      {? exec('szukaj','osoba',_kod[_licz])
      || _ret.KOD:='';OS_ADRES.RODZAJ;
         _ret.TR:=_adr(OS_ADRES.RODZAJ)+' - '+exec('ulica','osoba')+', '+exec('poczta','osoba');
         _ret.REF_SQL:=$OS_ADRES.ref();
         _ret.add()
      ?}
   !};
   {? ~_ret.first()
   || _ret.KOD:='';'B';
      _ret.TR:='W systemie nie wprowadzono żadnego adresu, proszę o kontakt z działem kadr.';
      _ret.REF_SQL:='0000000000000000';
      _ret.add()
   ?};
   OS_ADRES.cntx_pop(); OSOBA.cntx_pop()

|? _rodzaj='UMOWA'
|| _pesel:=exec('atr_get','form_ob',EDOKUM.ref(),'PESEL');
   _paszport:=exec('atr_get','form_ob',EDOKUM.ref(),'PASZPORT');
   {? (+|_pesel)=11 | +|_paszport
   || OSOBA.cntx_psh();
      OSOBA.index('OSOBA');
      OSOBA.clear();
      OSOBA.blank(1);
::    jeżeli podano PESEL to wyszukujemy osobę po PESELu w przeciwnym przypadku staramy się wyszukać po paszporcie
      {? (+|_pesel)=11
      || OSOBA.PESEL:=|_pesel
      ?};
      _exist:=OSOBA.find_rec();
      {? ~_exist & +|_paszport
      || OSOBA.blank(1);
         OSOBA.PASZPORT:=|_paszport
      ?};
      _exist:=OSOBA.find_rec();
      {? _exist
      || _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
         P.cntx_psh();
         P.use('pracowni');
         P.index('PRACOSOB');
         P.prefix(_firma,'P',OSOBA.ref());
         {? P.first()
         || RU.cntx_psh();
            H.use('_his'+{? P.F_ZATR().DOCELOWA='T' || 't' || '_' ?});
            exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));
            H_UM.cntx_psh();
            H_UM.index('OD');
            H.cntx_psh();
            H.index('_HISTKOD');
            _nr:=1;
            {!
            |? {? P.DZA<=date(EDOKUM.DATAW~1,EDOKUM.DATAW~2,0)
                  &
                  (P.DZ=date(0,0,0) | P.DZ>=date(EDOKUM.DATAW~1,EDOKUM.DATAW~2,1))
               || H.prefix(P.ref(),'Z');
                  {? H.find_le(EDOKUM.DATAW) | H.last()
                  || _ret.KOD:=$_nr;
                     _nr+=1;
                     _ret.TR:='Nr teczki: '+|P.T+', umowa: '+|H.UMOWA().NUMER+', zawarta: '+H.PODPIS$1;
                     _ret.REF_SQL:=$P.ref();
                     _ret.add()
                  ?}
               ?};
               P.next()
            !};
            H.cntx_pop();
            H_UM.cntx_pop();
            RU.cntx_pop();
            exec('otworz_h_um','pracownik')
         ?};
         P.cntx_pop()
      ?};
      OSOBA.cntx_pop()
   ?}

|? _rodzaj='UMPRAC'
:: słownik umów o pracę
|| _typ:=_get_typ('UMPRAC');
   RU.cntx_psh();
   {? _typ
   || RU.index('K');
      RU.prefix(_typ);
      {? RU.first()
      || {!
         |? {? RU.K<>'X' || _ret.KOD:=RU.K; _ret.TR:=RU.O; _ret.REF_SQL:=$RU.ref; _ret.add() ?};
            RU.next()
        !}
      ?}
   ?};
   RU.cntx_pop()

|? _rodzaj='STANOWISKA'
|| _jo:=exec('atr_get','form_ob',EDOKUM.ref(),'WYDZIAL');
   UD_TYP.cntx_psh(); UD_TYP.index('SYMBOL');
   UD_SKL.cntx_psh(); UD_SKL.index('SYMBOL');
   STN.cntx_psh(); STN.index('STANONAZ');
   STO.cntx_psh(); STO.index('ST');

   UD_TYP.prefix('PODZORG',);
   _ud_typ:={? UD_TYP.first() || UD_TYP.ref() || null() ?};
   UD_SKL.prefix(_ud_typ);
   {? +|_jo & UD_SKL.find_key(_jo,)
   ||
      STO.prefix(UD_SKL.ref());
      {? STO.first()
      || {!
         |? {? STO.STN().Z='T' || _ret.KOD:=''; _ret.TR:=STO.STN().ST; _ret.REF_SQL:=$STO.STN; _ret.add() ?};
            STO.next()
        !}
      ?}
   ?};
   STO.cntx_pop(); STN.cntx_pop(); UD_SKL.cntx_pop(); UD_TYP.cntx_pop()

|? _rodzaj='POZWORG'
|| {? app_info('web_sesid')<>'' || exec('env_wt','b_proces') ?};
   exec('load_par','#parametr');
   _par313:=exec('get_par','#parametr',313,2)='T';
   {? _par313
   || _st:=exec('atr_get','form_ob',EDOKUM.ref(),'ST','REF_SQL');
      _jo:=exec('atr_get','form_ob',EDOKUM.ref(),'WYDZIAL');
      UD_TYP.cntx_psh(); UD_TYP.index('SYMBOL');
      UD_SKL.cntx_psh(); UD_SKL.index('SYMBOL');
      STN.cntx_psh(); STN.index('STANONAZ'); STN.clear();
      STO.cntx_psh(); STO.index('UNIQUE');
      PSTO.cntx_psh(); PSTO.index('POZKOD');

      _stn:=null();
      {? STN.seek(BIT.sqlint(_st),)
      || _stn:=STN.ref()
      |? +_st
::       sprawdzamy w takim razie czy nie jest to nazwa stanowiska
      || STN.prefix(_st,_st);
         {? STN.first() || _stn:=STN.ref() ?}
      ?};

      UD_TYP.prefix('PODZORG',);
      _ud_typ:={? UD_TYP.first() || UD_TYP.ref() || null() ?};
      UD_SKL.prefix(_ud_typ);
      {? +|_st & +|_jo & _ud_typ & UD_SKL.find_key(_jo,) & _stn
      || STO.prefix(UD_SKL.ref(),_stn);
         _sto:={? STO.first() || STO.ref() || null() ?};
         PSTO.prefix(_sto);
         {? PSTO.first()
         || {!
            |? _ret.KOD:=''; _ret.TR:=PSTO.POZWORG().KOD+' - '+POZWORG.OPIS; _ret.REF_SQL:=$POZWORG.ref();
               _ret.add();
               PSTO.next()
            !}
         ?}
      ?};
      PSTO.cntx_pop(); STO.cntx_pop(); STN.cntx_pop(); UD_SKL.cntx_pop(); UD_TYP.cntx_pop()
   ?}

|? _rodzaj='CP'
|| CP.cntx_psh(); CP.index('CHARPRAC'); CP.prefix();
   {? CP.first()
   || {!
      |? _ret.KOD:=CP.CP; _ret.TR:=CP.O; _ret.REF_SQL:=$CP.ref; _ret.add();
         CP.next()
      !}
   ?};
   CP.cntx_pop()

|? _rodzaj='PPK_IF'
|| _ret.KOD:=''; _ret.TR:=''; _ret.REF_SQL:='adres   00000000'; _ret.add();
   _slo_typ:=exec('slo_typ','ext_slo',_rodzaj);
   ADRES.cntx_psh();
   ADRES.index('SYMBOL');
   ADRES.prefix(_slo_typ);
   {? ADRES.first()
   || {!
      |? _ret.KOD:=''; _ret.TR:=ADRES.NAZWA; _ret.REF_SQL:=$ADRES.ref(); _ret.add();
         ADRES.next()
      !}
   ?};
   ADRES.cntx_pop()

|? _rodzaj='ET_PRAC'
|| _fml_war:="P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' ('+P.ST().ST+' - '+P.WYDZIAL().SYMBOL+')'";
   _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
   OSOBA.cntx_psh();
   OSOBA.index('OSOBA');
   OSOBA.prefix();
   P.cntx_psh();
   P.use('pracowni');
   P.index('PRACOSOW');
   UD_SKL.cntx_psh();
   STN.cntx_psh();
   {? _b='W'
   || {? OSOBA.seek(EDOKUM.DOSTAWCA)
      || P.prefix(_firma,OSOBA.ref());
         {? P.first()
         || _dalej:=1;
            {!
            |? {? P.ZA='T'
               || _ret.KOD:=form(P.T);
                  _ret.TR:=_fml_war();
                  _ret.REF_SQL:=$P.ref();
                  _ret.add()
               ?};
               P.next()
            !}
         ?}
      ?}

   |? _b='P'
   || {? +app_info('web_sesid') || exec('env_wt','b_proces') ?};
      _sKod:=exec('kod_zaleznosci','prc_dane');
      _setid:='OBE';
      exec('p_web_cx_set','p_web',_sKod,,1,_setid,0);
      exec('p_web_cx_set_prefix','p_web',_sKod,'SETID',_setid);
      {? P_WEB_CX.first()
      || {!
         |? P_WEB_CX.P();
            _ret.KOD:=form(P.T);
            _ret.TR:=_fml_war();
            _ret.REF_SQL:=$P.ref();
            _ret.add();
            P_WEB_CX.next()
         !}
      ?}
   ?};
   STN.cntx_pop();
   UD_SKL.cntx_pop();
   P.cntx_pop();
   OSOBA.cntx_pop()

|? _rodzaj='KK'
|| _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
   KK.cntx_psh();
   KK.index('KONTASYS');
   KK.prefix(_firma,'PPL');
   {? KK.first()
   || {!
      |? _ret.KOD:=''; _ret.TR:=KK.SYM; _ret.REF_SQL:=$KK.ref(); _ret.add();
         KK.next()
     !}
   ?};
   KK.cntx_pop()

|? _rodzaj='ODB_TYP'
|| _ret.KOD:=''; _ret.TR:=''; _ret.REF_SQL:=''; _ret.add();
   {? _b='P'
   || _ret.KOD:=_ret.REF_SQL:='F'; _ret.TR:='Odbiór godzin (Firma)'; _ret.add();
      _ret.KOD:=_ret.REF_SQL:='P'; _ret.TR:='Odbiór godzin (Pracownik)'; _ret.add()
   |? _b='W'
   || _ret.KOD:=_ret.REF_SQL:='P'; _ret.TR:='Odbiór godzin'; _ret.add()
   ?};
   _ret.KOD:=_ret.REF_SQL:='S'; _ret.TR:='Za święto'; _ret.add();
   _ret.KOD:=_ret.REF_SQL:='W'; _ret.TR:='Za dzień wolny'; _ret.add()

|? _rodzaj='ODB_WYB'
|| _ret.KOD:=_ret.REF_SQL:='A'; _ret.TR:='Automatyczny'; _ret.add();
   _ret.KOD:=_ret.REF_SQL:='R'; _ret.TR:='Ręczny'; _ret.add()

|? _rodzaj='ODB_PK'
|| _ret.KOD:=_ret.REF_SQL:='K'; _ret.TR:='Na końcu dnia pracy'; _ret.add();
   _ret.KOD:=_ret.REF_SQL:='P'; _ret.TR:='Na początku dnia pracy'; _ret.add()

|? 9+_rodzaj='ODB_A_OKR'
|| _ind:=#(9-_rodzaj);
   _p_ref_s:=exec('atr_get','form_ob',EDOKUM.ref(),'ET_PRAC','REF_SQL');
   _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null);
   exec('MASK','object');
   exec('open_prc','open_tab');
   A_OKRN.cntx_psh();
   A_OKR.cntx_psh();
   A_OKR.index('A_OKRZ');
   A_OKR.prefix('O');
   {? A_OKR.first()
   || A_OKRP.cntx_psh();
      A_OKRP.index('A_OKPP');
      _loop:=1;
      {!
      |? A_OKRP.prefix(A_OKR.ref(),_p_ref);
         {? A_OKRP.first()
         || _ret.KOD:=('000'+$_loop)+3;
            _ret.TR:='%1 - %2 | %3'[$A_OKR.OD,$A_OKR.DO,A_OKR.NAZ().NAZ];
            _ret.REF_SQL:=$A_OKR.ref();
            _ret.add()
         ?};
         _loop+=1;
         A_OKR.next()
      !};
      A_OKRP.cntx_pop()
   ?};
   A_OKR.cntx_pop();
   A_OKRN.cntx_pop()

|? 11+_rodzaj='ODB_ROK_MSC'
|| _ind:=#(12-_rodzaj);

   _p_ref_s:=exec('atr_get','form_ob',EDOKUM.ref(),'ET_PRAC','REF_SQL');
   _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null);
   _a_okr_s:=exec('atr_get','form_ob',EDOKUM.ref(),'ODB_A_OKR_'+$_ind,'REF_SQL');
   exec('MASK','object');
   exec('open_prc','open_tab');

   A_OKR.cntx_psh();
   A_OKR.index('A_OKRZ');
   A_OKR.prefix();
   {? A_OKR.seek(_a_okr_s)
   || A_OKRP.cntx_psh();
      A_OKRP.index('A_OKPP');
      _loop:=1;
      A_OKRP.prefix(A_OKR.ref(),_p_ref);
      {? A_OKRP.first()
      || A_OKRP_M.cntx_psh();
         A_OKRP_M.index('A_OKRPM');
         A_OKRP_M.prefix(A_OKRP.ref());
         {? A_OKRP_M.first()
         || {!
            |? _ret.KOD:=('000'+$_loop)+3;
               _ret.TR:='%1 - %2'[$A_OKRP_M.ROK,exec('msc_nazwa','#convert',A_OKRP_M.MSC)];
               _ret.REF_SQL:=$A_OKRP_M.ref();
               _ret.add();
               _loop+=1;
               A_OKRP_M.next()
            !}
         ?};
         A_OKRP_M.cntx_pop()
      ?};
      A_OKRP.cntx_pop()
   ?};
   A_OKR.cntx_pop()

|? 8+_rodzaj='ODB_NADG'
|| _edokum:=EDOKUM.ref();
   _spl:=spli_str(_rodzaj,'_');
   _c_ind:=#_spl[3];
   _c_ind_nadg:=#_spl[4];
::  zmienne globalne ustawione w tej formule ze względów optymalizacyjnych usuwane są w formule \ustaw_odb
::  zebranie już wskazanych na wniosku nadgodzin do odbioru
   {? var_pres('__oAdded')<0
   || __oAdded:=obj_new(exec('wn_odb_lsec','sch_imp'));
      {! _ind:=1 .. exec('wn_odb_lsec','sch_imp')
      |! __oAdded[_ind]:=obj_new(exec('wn_odb_nadg_lsec','sch_imp'));
         {! _ind_nadg:=1 .. exec('wn_odb_nadg_lsec','sch_imp')
         |! __oAdded[_ind][_ind_nadg]:=''
         !}
      !}
   ?};
:: zliczamy liczbę nadgodzin wprowadzonych na wniosku
   _added:='';
   {? var_pres('__ODB_N')<0
   || __ODB_N:=1;
      {! _ind:=1 .. exec('wn_odb_lsec','sch_imp')
      |! {! _ind_nadg:=1 .. exec('wn_odb_nadg_lsec','sch_imp')
         |!  _tr:=exec('atr_get','form_ob',_edokum,'ODB_NADG_%1_%2'[$_ind,$_ind_nadg]);
             __oAdded[_ind][_ind_nadg]:=_tr;
             _added+=',%1,'[_tr]
         !}
      !}
   ?};

   _ret.KOD:=''; _ret.TR:=''; _ret.REF_SQL:=''; _ret.add();
   _wyb:=exec('atr_get','form_ob',_edokum,'ODB_WYB_'+$_c_ind,'REF_SQL');
   {? _wyb='R'
   || _p_ref_s:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL');
      _typ_odb:=exec('atr_get','form_ob',_edokum,'ODB_TYP_'+$_c_ind,'REF_SQL');
      _a_okrp_m_s:=exec('atr_get','form_ob',_edokum,'ODB_ROK_MSC_'+$_c_ind,'REF_SQL');
      _rok:=exec('FindAndGet','#table',A_OKRP_M,_a_okrp_m_s,,"ROK",null);
      _msc:=exec('FindAndGet','#table',A_OKRP_M,_a_okrp_m_s,,"MSC",null);
      _g_wnio:=exec('atr_get','form_ob',_edokum,'ODB_GODZ_WNIO_'+$_c_ind);

      P.cntx_psh();
      P.use('pracowni');
      P.index('OSOBA');
      P.prefix();
      {? P.seek(_p_ref_s) & _rok>0 & _msc>0 & _msc<=12
      || {? var_pres('__ODB_TAB')<0
         || _poc:=date(_rok,_msc,1);
            _kon:=date(_rok,_msc,0);
            _roznica:=exec('roznica','prc_rozlicz',_poc,_kon);
            exec('open_prc','open_tab');
            exec('MASK','object');
            exec('__HARM','object');
            exec('__KAL','object');
            __KAL.set_cal(P.KAL,_poc~1);
            VAR_DEL.delete('__ODB_TAB');
            __ODB_TAB:=sql('select DT, RN, RT, WORK, TYP, G, KK, REF_K from :_a',
               exec('mozliwe_odbiory','prc_rozlicz',_poc,_kon,_roznica)
            )
         ?};
         {? __ODB_TAB.first()
         || {!
            |? _tr_old:=__oAdded[_c_ind][_c_ind_nadg];
::          opis rekordu jaki widzi użytkownik - tu jest też zaszyta informacja o liczbie odbieranych godzin
               _tr:='%1 | %2 | %3 | %4'[$__ODB_TAB.DT,$__ODB_TAB.G,$__ODB_TAB.RN,__ODB_TAB.RT];
               {? (((_typ_odb='P' | _typ_odb='F') & __ODB_TAB.TYP='R') | (_typ_odb=__ODB_TAB.TYP)) &
                  ((_tr_old=_tr) | (_added*_tr)=0)
               || _ret.KOD:=$__ODB_TAB.RN;
                  _ret.TR:=_tr;
                  _ret.REF_SQL:='%1%2%3'[$__ODB_TAB.DT,$__ODB_TAB.G,$__ODB_TAB.RN];
                  _ret.add()
               ?};
               __ODB_TAB.next()
            !}
         ?}
      ?};
      P.cntx_pop()
   ?}

|? _rodzaj='PPSFT'
|| _ret.KOD:=''; _ret.TR:=''; _ret.REF_SQL:=''; _ret.add();
   _query:=''+"
      select PPSFT.REFERENCE as REF, PPSFT.OPIS, PPSFR.KOD
      from PPSFT join PPSFR using (PPSFR.REFERENCE, PPSFT.PPSFR)
      where PPSFT.FIRMA=:_a and PPSFT.SKL_WN='T' and PPSFR.KOD<>'ZDALN_ST' and PPSFR.KOD<>'ZDALN_OK'
   ";
   _firma:=exec('firma','ustawienia');
   _TAB:=sql(_query,_firma);
   {? _TAB.first()
   || {!
      |? _ret.KOD:=_TAB.KOD; _ret.TR:=_TAB.OPIS; _ret.REF_SQL:=_TAB.REF; _ret.add();
         _TAB.next()
      !}
   ?}

:: inne słowniki ze SLO_NAZ !!!
||
   _get_slo:="   _i:=0;
      {? var_pres('_c')<>type_of(0) | _c<>1 ||  _c:=0 ?};
      SLO_NAZ.cntx_psh(); SLO_NAZ.index('NAZWA'); SLO_NAZ.prefix(_a);
      {? SLO_NAZ.first()
      || {! |?
            _i+=1; _b.blank; _b[1]:={? _c || $_i || '' ?};
            _b[2]:=SLO_NAZ.NAZWA; _b[3]:=$SLO_NAZ.ref; _b.add;
            SLO_NAZ.next()
         !}
      ?};
      SLO_NAZ.cntx_pop";
   _typ:=_get_typ(_a);
   {? _typ || _get_slo(_typ,_ret) ?}

?};

_ret


\edokumZal_exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Funkcja sprawdza czy istnieje zalacznik do dokumentu w obiegu
::   WE:  _a  - [REFERENCE] - wskazanie na dokument w obiegu (EDOKUM.ref)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

_result:=0;
EDOKUMZ.cntx_psh();
EDOKUMZ.index('DISP');
EDOKUMZ.prefix(_edokum);
{? EDOKUMZ.first()
|| _result:=1
?};
EDOKUMZ.cntx_pop();
_result


\edokumZal_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Funkcja kopiuje zalacznik z dokumentu w obiegu do osoby
::   WE: _a   - [REFERENCE] - wskazanie na dokument w obiegu (EDOKUM.ref)
::       _b   - [REFERENCE] - wskazanie na osobe
::       _c   - [STRING]    - nazwa dla typu zalacznika
::      [_d]  - [STRING]    - opis dla typu zalacznika
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _nazwa:={? var_pres('_c')=type_of('')   || _c || return(_result) ?};
  _opis:={? var_pres('_d')=type_of('')   || _d || ''              ?};

EDOKUM.cntx_psh();
EDOKUM.index('ID'); EDOKUM.prefix();
{? EDOKUM.seek(_edokum)
|| EDOKUMZ.cntx_psh();
   EDOKUMZ.use('skid_n'+(EDOKUM.name()+2));
   EDOKUMZ.index('DISP');
   EDOKUMZ.prefix(_edokum);
   {? EDOKUMZ.first()
   ||
::    wyszukanie typu zalacznika
      _slo_typ:=exec('slo_typ','ext_slo','ZAL');
      _slo_naz:=exec('slo_naz','ext_slo',_slo_typ,_nazwa);

::    sprawdzamy czy faktycznie istnieje taka osoba
      OSOBA.cntx_psh();
      OSOBA.index('OSOBA');
      OSOBA.prefix();
      {? OSOBA.seek(_osoba)
      ||
::       kopiujemy wszystkie zalaczniki dokumentu w obiegu do osoby
         {!
         |? _file:=EDOKUMZ.EDOKUM;
            {? _file<>null() & _slo_naz<>null()
            || ZALACZ.cntx_psh();
               ZALACZ.index('ZALACZ');
               ZALACZ.blank(1);
               ZALACZ.OSOBA:=_osoba;
               ZALACZ.DATA:=EDOKUMZ.DATE;
               ZALACZ.TYP_ZAL:=_slo_naz;
               ZALACZ.RODZAJ:='OSOBA';
               ZALACZ.ZAL_NAME:=EDOKUMZ.NAZWA;
               ZALACZ.ZAL:=EDOKUMZ.EDOKUM;
               ZALACZ.NAG:=EDOKUMZ.DOKUM().uidref();
               ZALACZ.FIRMA:=exec('firma','ustawienia');
               ZALACZ.WWWE:='T';
               ZALACZ.WWWS:='T';
               ZALACZ.WWW:='T';
               {? _opis=''
               || _opis:='Na podstawie wniosku "%1" o nr: %2'@[EDOKUM.TYP().NAZWA,EDOKUM.ID]
               ?};
               ZALACZ.LOK:=_opis;
               _result:=ZALACZ.add();
               ZALACZ.cntx_pop()
            ?};
            EDOKUMZ.next()
         !}
      ?};
      OSOBA.cntx_pop()
   ?};
   EDOKUMZ.cntx_pop()
?};
EDOKUM.cntx_pop();
_result


\def_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [mk] Michal Kocot [12.50]
:: OPIS: Wartosc poczatkowa
::   WE: Identyfikator
::       Wartosc
::       [_c] - dodatkowy parametr
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:=EDOKUM.ref();
_tab:=obj_new('WAR','REF_SQL');
_tab.WAR:='';
_tab.REF_SQL:='';

{? _a='KRAJE'
|| KRAJE.cntx_psh();
   KRAJE.index('NAZ');
   KRAJE.prefix();
   {? KRAJE.find_key(_b,)
   || _tab.WAR:=_b;
      _tab.REF_SQL:=$KRAJE.ref()
   ?};
   KRAJE.cntx_pop()

|? _a='TYP_ADRESU'
|| _tab.WAR:=exec('rodzaj','osoba',_b);
   _tab.REF_SQL:='000000000000000'+_b

|? _a='ADRES'
|| OSOBA.cntx_psh(); OSOBA.index('OSOBA');
   OS_ADRES.cntx_psh(); OS_ADRES.index('OD');
   {? EDOKUM.DOSTAWCA().ref() & exec('szukaj','osoba',_b,EDOKUM.DATAW)
   || _txt:=exec('adres','osoba',_b,EDOKUM.DATAW);
      _txtdo:={? OS_ADRES.DO=date(0,0,0) || ' bezterminowo' || ' do dnia '+$OS_ADRES.DO ?};
      _txt:={? +|_txt || 'Obowiązuje od: '+$OS_ADRES.OD+_txtdo+', '+_txt || '' ?};
      _txt+={? +|OS_ADRES.TEL || ', telefon: '+|OS_ADRES.TEL || '' ?};
      _txt+={? +|OS_ADRES.EMAIL || ', e-Mail: '+|OS_ADRES.EMAIL || '' ?};
      _txt+={? +|OS_ADRES.KRAJ().NAZ || ', Kraj: '+OS_ADRES.KRAJ().NAZ || '' ?};
      _txt+={? +|OS_ADRES.WOJEWODZ || ', Województwo: '+OS_ADRES.WOJEWODZ || '' ?};
      _txt+={? +|OS_ADRES.POWIAT || ', Powiat: '+OS_ADRES.POWIAT || '' ?};
      _txt+={? +|OS_ADRES.GMINA || ', Gmina: '+OS_ADRES.GMINA || '' ?};
      _txt+={? +|OS_ADRES.MIASTO || ', Miejscowość: '+OS_ADRES.MIASTO || '' ?};
      {? +|_txt
      || _str:=STR.split(_txt,' ');
         {! _licz:=1.._c |!
            _tab.WAR:=STR.line(80);
            _tab.REF_SQL:=((16*'0')+$_licz)+16;
            {? _licz=3 & +|STR.line(80)
            || _tab.WAR:=(_tab.WAR-6)+' (...)';
               OS_US.cntx_psh();
               OS_US.index('OD');
               OS_US.prefix();
               {? OS_US.find_tab(,'OS_ADRES',,'=',OS_ADRES.ref())
               || exec('put_atr','form_ob',_edokum,'ADRES'+OS_ADRES.RODZAJ+'TN','Tak');
                  exec('put_atr','form_ob',_edokum,'ADRES'+OS_ADRES.RODZAJ+'TN','000000000000000T','REF_SQL')
               ?};
               OS_US.cntx_pop()
            ?}
         !}
      ?}
   ?};
   OSOBA.cntx_pop(); OS_ADRES.cntx_pop()

|? _a='ADRESTN'
|| _tab.WAR:='Nie';
   _tab.REF_SQL:='000000000000000N';
   OSOBA.cntx_psh(); OSOBA.index('OSOBA');
   OS_ADRES.cntx_psh(); OS_ADRES.index('OD');
   {? EDOKUM.DOSTAWCA().ref() & exec('szukaj','osoba',_b,EDOKUM.DATAW)
   || OS_US.cntx_psh();
      OS_US.index('OD');
      OS_US.prefix();
      {? OS_US.find_tab(,'OS_ADRES',,'=',OS_ADRES.ref())
      || _tab.WAR:='Tak';
         _tab.REF_SQL:='000000000000000T'
      ?};
      OS_US.cntx_pop()
   ?};
   OSOBA.cntx_pop(); OS_ADRES.cntx_pop()

|? _a='RODZ_RACH'
|| {? _b='K'
   || _tab.WAR:='Kwota'; _tab.REF_SQL:='000000000000000K'
   |? _b='P'
   || _tab.WAR:='%'; _tab.REF_SQL:='000000000000000P'
   || _tab.WAR:=''; _tab.REF_SQL:='0000000000000000'
   ?}

|? _a='ET_PRAC'
|| _fml_war:="P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' ('+P.ST().ST+' - '+P.WYDZIAL().SYMBOL+')'";
   OSOBA.cntx_psh();
   OSOBA.index('OSOBA');
   OSOBA.prefix();
   P.cntx_psh();
   P.use('pracowni');
   P.index('PRACOSOW');
   UD_SKL.cntx_psh();
   STN.cntx_psh();
   {? _b='W'
   || {? OSOBA.seek(EDOKUM.DOSTAWCA)
      || _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
         P.prefix(_firma,OSOBA.ref());
         {? P.first()
         || _dalej:=1;
            {!
            |? {? P.ZA='T'
               || _dalej:=0;
                  _tab.WAR:=_fml_war();
                  _tab.REF_SQL:=$P.ref()
               ?};
               _dalej & P.next()
            !}
         ?}
      ?}
   ?};
   STN.cntx_pop();
   UD_SKL.cntx_pop();
   P.cntx_pop();
   OSOBA.cntx_pop()

|? _a='ODB_PK'
|| _tab.WAR:='Na końcu dnia pracy'; _tab.REF_SQL:='K'

|? _a='ODB_WYB'
|| _tab.WAR:='Automatyczny'; _tab.REF_SQL:='A'

?};
_tab


\ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [mk] Michal Kocot [12.50]
:: OPIS: Formuly po edycji
::   WE: _a [STRING] - zestaw
::       _b [STRING] - identyfikator
::      [_c][STRING] - dodatkowy parametr
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_zestaw:={? var_pres('_a')=type_of('') || _a || return(~~) ?};
    _id:={? var_pres('_b')=type_of('') || _b || return(~~) ?};
   _par:={? var_pres('_c')=type_of('') || _c || ''         ?};

_edokum:=EDOKUM.ref();

EDOK_ATR.cntx_psh();
{? exec('open_edk_atr','obiegi',_edokum)
|| {? _zestaw=exec('nazwa_wozda','obiegi')
   || exec('ustaw_wozda','form_ob',_edokum,_id)
   |? _zestaw=exec('nazwa_woz','obiegi')
   || exec('ustaw_woz','form_ob',_edokum,_id)
   |? _zestaw*exec('nazwa_rachunek','obiegi')
   || exec('ustaw_rachunek','form_ob',_edokum,_id)
   |? _zestaw=exec('nazwa_dwwp','obiegi') |
      _zestaw=exec('nazwa_dwwd','obiegi') |
      _zestaw=exec('nazwa_drwd','obiegi')
   || exec('ustaw_ppk','form_ob',_edokum,_id)
   |? _zestaw=exec('nazwa_nadg_w','obiegi') |
      _zestaw=exec('nazwa_nadg_p','obiegi')
   || exec('ustaw_nadg','form_ob',_edokum,_id,_par)
   |? _zestaw=exec('nazwa_odb_w','obiegi') |
      _zestaw=exec('nazwa_odb_p','obiegi')
   || exec('ustaw_odb','form_ob',_edokum,_id,_par)
   |? _zestaw=exec('nazwa_czw','obiegi')
   || exec('ustaw_czw','form_ob',_edokum,_id,_par)
   |? _zestaw=exec('nazwa_ppsf','obiegi') |
      _zestaw=exec('nazwa_ppsp','obiegi')
   || exec('ustaw_ppsf','form_ob',_edokum,_id,_par)
   ?}
?};
EDOK_ATR.cntx_pop()


\ustaw_ppk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.22]
:: OPIS: Formuly po edycji dla wniosków PPK
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::       _b [STRING]    - identyfikator
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || return(~~) ?};
    _id:={? var_pres('_b')=type_of('')   || _b || return(~~) ?};

{? 4+_id='DATA'
|| _data_s:=exec('atr_get','form_ob',_edokum,'DATA');
   _data:=exec('to_ti_dt', 'form_ob', _data_s, 'D');
   _data_zm:=exec('data_zm_dwwd','form_ob',_edokum,_data);
   exec('put_atr','form_ob',_edokum,'DATA_ZM',$_data_zm);
   _data_zm
?}


\data_zm_dwwd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Określa datę zmiany dla deklaracji wpłaty dodatkowej
::   WE: [_a] [REFERENCE] - wskazanie na EDOKUM. Jeżeli nie podano, to przyjęte zostanie wskazanie na bieżący rekord
::                          EDOKUM.
::       [_b] [DATA]      - data złożenia wniosku. Jeżeli nie podano, to przyjęta zostanie data bieżąca.
::   WY: data zmiany
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref() ?};
  _data:={? var_pres('_b')=type_of(date) || _b || date()       ?};

:: ustawiamy datę obowiązywania na pierwszy dzień następnego miesiąca po wskazanej dacie
_data_zm:=exec('fdinm','form_ob',_data);

_data_zm


\ustaw_wozda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuly po edycji dla wniosku o zmianę danych adresowych
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::       _b [STRING]    - identyfikator
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || return(~~) ?};
    _id:={? var_pres('_b')=type_of('')   || _b || return(~~) ?};
:: po propozycji PR/WRT/XP/19.42/1912/0011 tylko dołączamy adresy...
{? _id='ADRES_AKCJA'
|| _akcja:=1+exec('atr_get','form_ob',_edokum,'ADRES_AKCJA');
   _typ:=1+exec('atr_get','form_ob',_edokum,'TYP_ADRESU');
   _zero:=0;
   {? +|_akcja & +|_typ & EDOKUM.DOSTAWCA().ref()
   || {? _akcja='M'
      || {? exec('szukaj','osoba',_typ,EDOKUM.DATAW)
         || exec('put_atr','form_ob',_edokum,'DATA_OD',$OS_ADRES.OD);
            exec('put_atr','form_ob',_edokum,'KRAJ',OS_ADRES.KRAJ().NAZ);
            exec('put_atr','form_ob',_edokum,'KRAJ',$OS_ADRES.KRAJ,'REF_SQL');
            exec('put_atr','form_ob',_edokum,'WOJEWODZ',OS_ADRES.WOJEWODZ);
            WOJEWODZ.cntx_psh();
            WOJEWODZ.index('WOJNAZWA'); WOJEWODZ.prefix();
            {? WOJEWODZ.find_key(OS_ADRES.WOJEWODZ,)
            || exec('put_atr','form_ob',_edokum,'WOJEWODZ',$WOJEWODZ.ref(),'REF_SQL')
            ?};
            WOJEWODZ.cntx_pop();
            exec('put_atr','form_ob',_edokum,'POWIAT',OS_ADRES.POWIAT);
            exec('put_atr','form_ob',_edokum,'GMINA',OS_ADRES.GMINA);
            exec('put_atr','form_ob',_edokum,'GMGUS',OS_ADRES.GMGUS);
            exec('put_atr','form_ob',_edokum,'KOD',OS_ADRES.KOD);
            exec('put_atr','form_ob',_edokum,'POCZTA',OS_ADRES.POCZTA);
            exec('put_atr','form_ob',_edokum,'MIASTO',OS_ADRES.MIASTO);
            exec('put_atr','form_ob',_edokum,'ULICA',OS_ADRES.ULICA);
            exec('put_atr','form_ob',_edokum,'DOM',OS_ADRES.DOM);
            exec('put_atr','form_ob',_edokum,'LOKAL',OS_ADRES.LOKAL);
            exec('put_atr','form_ob',_edokum,'TEL',OS_ADRES.TEL);
            exec('put_atr','form_ob',_edokum,'EMAIL',OS_ADRES.EMAIL)
         || _zero:=1
         ?}
      || _zero:=1
      ?}
   || _zero:=1
   ?};
   {? _zero
   || exec('put_atr','form_ob',_edokum,'DATA_OD','');
      exec('put_atr','form_ob',_edokum,'KRAJ','');
      exec('put_atr','form_ob',_edokum,'KRAJ','','REF_SQL');
      exec('put_atr','form_ob',_edokum,'WOJEWODZ','');
      exec('put_atr','form_ob',_edokum,'WOJEWODZ','','REF_SQL');
      exec('put_atr','form_ob',_edokum,'POWIAT','');
      exec('put_atr','form_ob',_edokum,'GMINA','');
      exec('put_atr','form_ob',_edokum,'GMGUS','');
      exec('put_atr','form_ob',_edokum,'KOD','');
      exec('put_atr','form_ob',_edokum,'POCZTA','');
      exec('put_atr','form_ob',_edokum,'MIASTO','');
      exec('put_atr','form_ob',_edokum,'ULICA','');
      exec('put_atr','form_ob',_edokum,'DOM','');
      exec('put_atr','form_ob',_edokum,'LOKAL','');
      exec('put_atr','form_ob',_edokum,'TEL','');
      exec('put_atr','form_ob',_edokum,'EMAIL','')
   ?}
?}


\ustaw_woz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuly po edycji dla wniosku o zatrudnienie
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::       _b [STRING]    - identyfikator
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || return(~~) ?};
    _id:={? var_pres('_b')=type_of('')   || _b || return(~~) ?};

{? app_info('web_sesid')<>'' || exec('env_wt','b_proces') ?};
exec('load_par','#parametr');

{? _id='UR_DATA'
|| _data_s:=exec('atr_get','form_ob',_edokum,_id);
   _ur_data:=exec('to_ti_dt', 'form_ob', _data_s, 'D');
   _obcy:=(1+exec('atr_get','form_ob',_edokum,'OBCY'))='T';
   {? _ur_data<>date(0,0,0) & ~_obcy & PAR_SKID.get(264)='T'
   || _pesel:=exec('pesel_dt','#id',_ur_data);
      _jestpesel:=exec('atr_get','form_ob',_edokum,'PESEL');
      {? +|_jestpesel<>11 | (6+_jestpesel<>_pesel)
      || exec('put_atr','form_ob',_edokum,'PESEL',_pesel)
      ?}
   ?}

|? _id='PIERWSZE'
|| _pierwsze:=(exec('atr_get','form_ob',_edokum,_id)+1);
   {? +|_pierwsze
   || _k_czy_m:={? _pierwsze='a' || 'K - kobieta' || 'M - mężczyzna' ?};
      exec('put_atr','form_ob',_edokum,'PLEC','000000000000000'+(1+_k_czy_m),'REF_SQL');
      exec('put_atr','form_ob',_edokum,'PLEC',_k_czy_m)
   ?}

|? _id='PESEL'
|| _data_s:=exec('atr_get','form_ob',_edokum,'UR_DATA');
   _ur_data:=exec('to_ti_dt', 'form_ob', _data_s, 'D');
   _pesel:=exec('atr_get','form_ob',_edokum,_id);
   _plec:=1+exec('atr_get','form_ob',_edokum,'PLEC');
   _kom:=
      {? _ur_data~1=0
      || exec('pesel_ok','#id',_pesel)
      || exec('pesel_ok','#id',_pesel,_ur_data,_plec)
      ?};
   {? +_kom=1 & _kom<>_plec
   || _k_czy_m:={? _kom='K' || 'K' || 'M' ?};
      exec('put_atr','form_ob',_edokum,'PLEC','000000000000000'+(1+_k_czy_m),'REF_SQL');
      exec('put_atr','form_ob',_edokum,'PLEC',{? _k_czy_m='K' || 'K - kobieta' || 'M - mężczyzna' ?})
   ?};
   {? type_of(_dat:=exec('pesel_dt','#id',_pesel))=type_of(date()) & _ur_data<>_dat & _dat<>date(0,0,0)
   || exec('put_atr','form_ob',_edokum,'UR_DATA',_dat$1)
   ?};
   exec('put_atr','form_ob',_edokum,'INFO1','');
   exec('put_atr','form_ob',_edokum,'INFO2','');
   exec('put_atr','form_ob',_edokum,'UMOWA','');
   exec('put_atr','form_ob',_edokum,'UMOWA','','REF_SQL');
   _paszport:=exec('atr_get','form_ob',_edokum,'PASZPORT');
   {? (+|_pesel)=11 | +|_paszport
   || OSOBA.cntx_psh();
      OSOBA.index('OSOBA');
      OSOBA.clear();
      OSOBA.blank(1);
::    jeżeli podano PESEL to wyszukujemy osobę po PESELu w przeciwnym przypadku staramy się wyszukać po paszporcie
      {? (+|_pesel)=11
      || OSOBA.PESEL:=|_pesel
      ?};
      _exist:=OSOBA.find_rec();
      {? ~_exist & +|_paszport
      || OSOBA.blank(1);
         OSOBA.PASZPORT:=|_paszport
      ?};
      _exist:=OSOBA.find_rec();
      {? _exist
      || _txt:='Wybrana osoba już istnieje w bazie. Prosimy nie modyfikować danych osobowych.'@;
         exec('put_atr','form_ob',_edokum,'INFO1',_txt);
         exec('put_atr','form_ob',_edokum,'PIERWSZE',OSOBA.PIERWSZE);
         exec('put_atr','form_ob',_edokum,'NAZWISKO',OSOBA.NAZWISKO);
         _k_czy_m:={? OSOBA.PLEC='K' || 'K - kobieta' || 'M - mężczyzna' ?};
         exec('put_atr','form_ob',_edokum,'PLEC',_k_czy_m);
         exec('put_atr','form_ob',_edokum,'PLEC','000000000000000'+OSOBA.PLEC,'REF_SQL');
         exec('put_atr','form_ob',_edokum,'UR_DATA',$OSOBA.UR_DATA);
         exec('put_atr','form_ob',_edokum,'NIP',OSOBA.NIP);
         exec('put_atr','form_ob',_edokum,'US',OSOBA.US().NU);
         exec('put_atr','form_ob',_edokum,'US',$OSOBA.US,'REF_SQL');
         _tn:={? OSOBA.OBCY='N' || exec('get_war_false','obiegi') || exec('get_war_true','obiegi') ?};
         exec('put_atr','form_ob',_edokum,'OBCY',1+_tn);
         exec('put_atr','form_ob',_edokum,'OBYWATEL',OSOBA.OBYWATEL);
         exec('put_atr','form_ob',_edokum,'DOWOD',OSOBA.DOWOD);
         exec('put_atr','form_ob',_edokum,'PASZPORT',OSOBA.PASZPORT);
         _kod:=obj_new(4); _kod[1]:='C'; _kod[2]:='S'; _kod[3]:='K'; _kod[4]:='I';
         _licz:=0;
         {!|?
            _licz+=1;
            {? exec('szukaj','osoba',_kod[_licz])
            || _txt:='Wybrany adres już istnieje w bazie. Prosimy nie modyfikować danych adresowych.'@;
               exec('put_atr','form_ob',_edokum,'INFO2',_txt);
               _typ:=exec('def_form','form_ob','TYP_ADRESU',OS_ADRES.RODZAJ);
               exec('put_atr','form_ob',_edokum,'TYP_ADRESU',_typ.WAR);
               exec('put_atr','form_ob',_edokum,'TYP_ADRESU',_typ.REF_SQL,'REF_SQL');
               exec('put_atr','form_ob',_edokum,'KRAJ',OS_ADRES.KRAJ().NAZ);
               exec('put_atr','form_ob',_edokum,'KRAJ',$OS_ADRES.KRAJ,'REF_SQL');
               exec('put_atr','form_ob',_edokum,'WOJEWODZ',OS_ADRES.WOJEWODZ);
               WOJEWODZ.cntx_psh();
               WOJEWODZ.index('WOJNAZWA'); WOJEWODZ.prefix();
               {? WOJEWODZ.find_key(OS_ADRES.WOJEWODZ,)
               || exec('put_atr','form_ob',_edokum,'WOJEWODZ',$WOJEWODZ.ref(),'REF_SQL')
               ?};
               WOJEWODZ.cntx_pop();
               exec('put_atr','form_ob',_edokum,'POWIAT',OS_ADRES.POWIAT);
               exec('put_atr','form_ob',_edokum,'GMINA',OS_ADRES.GMINA);
               exec('put_atr','form_ob',_edokum,'GMGUS',OS_ADRES.GMGUS);
               exec('put_atr','form_ob',_edokum,'KOD',OS_ADRES.KOD);
               exec('put_atr','form_ob',_edokum,'POCZTA',OS_ADRES.POCZTA);
               exec('put_atr','form_ob',_edokum,'MIASTO',OS_ADRES.MIASTO);
               exec('put_atr','form_ob',_edokum,'ULICA',OS_ADRES.ULICA);
               exec('put_atr','form_ob',_edokum,'DOM',OS_ADRES.DOM);
               exec('put_atr','form_ob',_edokum,'LOKAL',OS_ADRES.LOKAL);
               exec('put_atr','form_ob',_edokum,'TEL',OS_ADRES.TEL);
               exec('put_atr','form_ob',_edokum,'EMAIL',OS_ADRES.EMAIL);
               0
            || 1
            ?} & _licz<obj_len(_kod)
         !};
         _umowa:=exec('def_form','form_ob','UMOWA');
         exec('put_atr','form_ob',_edokum,'UMOWA',_umowa.WAR);
         exec('put_atr','form_ob',_edokum,'UMOWA',_umowa.REF_SQL,'REF_SQL')
      ?};
      OSOBA.cntx_pop()
   ?}

|? _id='OBCY'
|| _obcy:=exec('atr_get','form_ob',_edokum,'OBCY');
   _obywatel:=exec('atr_get','form_ob',_edokum,'OBYWATEL');
   {? _obcy=(1+exec('get_war_false','obiegi'))
   || exec('put_atr','form_ob',_edokum,'OBYWATEL',exec('osoba_obywatel_bl','osoba'))
   || {? _obywatel=exec('osoba_obywatel_bl','osoba') || exec('put_atr','form_ob',_edokum,'OBYWATEL','') ?}
   ?};
   exec('ustaw','form_ob',exec('nazwa_woz','obiegi'),'PESEL')

|? _id='PODPIS'
|| _data_s:=exec('atr_get','form_ob',_edokum,'PODPIS');
   _podpis:=exec('to_ti_dt', 'form_ob', _data_s, 'D');
   _data_s:=exec('atr_get','form_ob',_edokum,'OD');
   _od:=exec('to_ti_dt', 'form_ob', _data_s, 'D');
   _data_s:=exec('atr_get','form_ob',_edokum,'DO');
   _do:=exec('to_ti_dt', 'form_ob', _data_s, 'D');
   _zero:=date(0,0,0);
   {? _podpis<>_zero
   || {? _podpis>_od
      || exec('put_atr','form_ob',_edokum,'OD',_podpis$1)
      ?}
   ?}

|? _id='WYL'
|| _wyl:=#exec('atr_get','form_ob',_edokum,'WYL');
   _wym:=#exec('atr_get','form_ob',_edokum,'WYM');
   _wy:=#gsub(exec('atr_get','form_ob',_edokum,'WY'),',','.');
   {? _wym<>0 & _wy<>(_wyl/_wym$3)
   || exec('put_atr','form_ob',_edokum,'WY',$(_wyl/_wym$3))
   ?}

|? _id='WYM'
|| _wyl:=#exec('atr_get','form_ob',_edokum,'WYL');
   _wym:=#exec('atr_get','form_ob',_edokum,'WYM');
   _wy:=#gsub(exec('atr_get','form_ob',_edokum,'WY'),',','.');
   {? _wym<>0 & _wy<>(_wyl/_wym$3)
   || exec('put_atr','form_ob',_edokum,'WY',$(_wyl/_wym$3))
   ?}

|? _id='WYDZIAL'
|| _wydzial:=exec('atr_get','form_ob',_edokum,'WYDZIAL');
   UD_SKL.cntx_psh();
   UD_TYP.cntx_psh(); UD_TYP.index('SYMBOL'); UD_TYP.prefix();
   _ud_typ:={? UD_TYP.find_key('PODZORG',) || UD_TYP.ref() || null() ?};
   UD_SKL.index('SYMBOL'); UD_SKL.prefix(_ud_typ);
   _ud_skl:={? UD_SKL.find_key(_wydzial,) || UD_SKL.ref() || null() ?};
   {? _ud_skl=null()
   || UD_SKL.index('OPIS'); UD_SKL.prefix(_ud_typ);
      _ud_skl:={? UD_SKL.find_key(_wydzial,) || UD_SKL.ref() || null() ?}
   ?};
   UD_SKL.cntx_pop(); UD_TYP.cntx_pop();

   exec('firma','#firma',exec('firma_symbol','#firma'));
   _ud_skl_firma:=exec('ud_skl_firma','schemat',_ud_typ);

:: zapytanie wyszukujące ud_skl-a w firmie
   _sql:=''+"select * from UD_SKL where SCIEZKA like '%:_a|%:_b|%' and REFERENCE=:_c";
   _tab:=sql(_sql,($_ud_skl_firma)+8,($_ud_skl)+8,_ud_skl);
   {? _tab.size()=0 | _tab.AKTYWNY<>'T'
   || exec('put_atr','form_ob',_edokum,'WYDZIAL','')
   ?};

   exec('put_atr','form_ob',_edokum,'ST','');
   exec('put_atr','form_ob',_edokum,'ST','','REF_SQL');
   exec('put_atr','form_ob',_edokum,'POZWORG','');
   exec('put_atr','form_ob',_edokum,'POZWORG','','REF_SQL')

|? _id='STANOWISKO'
|| exec('put_atr','form_ob',_edokum,'POZWORG','');
   exec('put_atr','form_ob',_edokum,'POZWORG','','REF_SQL')

|? _id='TXT'
|| _txt:=exec('atr_get','form_ob',_edokum,'TXT1T');
   _txt+=' '+exec('atr_get','form_ob',_edokum,'TXT2T');
   _txt+=' '+exec('atr_get','form_ob',_edokum,'TXT3T');
   _txt:=gsub(_txt,'  ',' ');
   {? +|_txt
   || _str:=STR.split(_txt,' ');
      {! _licz:=1..3 |!
         exec('put_atr','form_ob',_edokum,'TXT'+$_licz+'T',STR.line(80))
      !}
   ?}

|? _id='DOP_NADG'
|| _tn:=1+exec('atr_get','form_ob',_edokum,'CZY_NADG');
   _str:=exec('atr_get','form_ob',_edokum,'DOP_NADG');
   _nadg:=#gsub(_str,',','.');
   {? _tn='T'
   || {? ~(+|_str) | _nadg<0
      || exec('put_atr','form_ob',_edokum,'DOP_NADG','0')
      ?}
   || exec('put_atr','form_ob',_edokum,'DOP_NADG','')
   ?}
?}


\ustaw_rachunek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.14]
:: OPIS: Formuly po edycji dla wniosku o zmianę rachunku
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::       _b [STRING]    - identyfikator
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || return(~~) ?};
    _id:={? var_pres('_b')=type_of('')   || _b || return(~~) ?};

_akcja:=1+exec('atr_get','form_ob',_edokum,_id);
_nr_rub:=#(13-_id);
_zero:=1;
{? +|_akcja & _nr_rub>0
|| {? _akcja='U'
   || _numer:=exec('rachunek','form_ob',$_nr_rub);
      {? +_numer
      || exec('put_atr','form_ob',_edokum,'N_NR_RACH_'+$_nr_rub,_numer);
         _zero:=0
      ?}
   ?}
?};

{? _zero
|| exec('put_atr','form_ob',_edokum,'N_NR_RACH_'+$_nr_rub,'')
?}


\ustaw_nadg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuly po edycji dla wniosku o nadgodziny
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::       _b [STRING]    - identyfikator
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || return(~~) ?};
    _id:={? var_pres('_b')=type_of('')   || _b || return(~~) ?};
   _par:={? var_pres('_c')=type_of('')   || _c || ''         ?};

_z_time:=*0;

{? 4+_id='DATA'
:: po modyfikacji daty sprawdź czy jest to dzień wolny czy roboczy
|| _ind:=#(5-_id);
   _data:=exec('str2date','#convert',exec('atr_get','form_ob',_edokum,_id));
   _p_ref:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL');
   _przed_old:=exec('atr_get','form_ob',_edokum,'PRZED_'+$_ind);
   {? _data=#0
   || exec('put_atr','form_ob',_edokum,'DATA_'+$_ind,#0);
      exec('put_atr','form_ob',_edokum,'TYP_DNIA_'+$_ind,'');
      exec('put_atr','form_ob',_edokum,'PRZED_'+$_ind,'');
      exec('put_atr','form_ob',_edokum,'GODZ_OD_'+$_ind,_z_time$3);
      exec('put_atr','form_ob',_edokum,'GODZ_DO_'+$_ind,_z_time$3);
      exec('put_atr','form_ob',_edokum,'CZAS_'+$_ind,_z_time$3)

   || _typ:=exec('typ_dnia','form_ob',_p_ref,_data);
      exec('put_atr','form_ob',_edokum,'TYP_DNIA_'+$_ind,5-_typ);
      _typ:=1+(1-_typ);
      _slo:=exec('slownik','form_ob','PRZED',$_ind);
      _przed:='';
      {? _typ='R'
      || {? _slo.find_key('N') || _przed:=_slo.TR ?}
      || {? _slo.find_key('G') || _przed:=_slo.TR ?}
      ?};
      {? _przed<>_przed_old
      || exec('put_atr','form_ob',_edokum,'PRZED_'+$_ind,_przed);
         exec('put_atr','form_ob',_edokum,'GODZ_OD_'+$_ind,_z_time$3);
         exec('put_atr','form_ob',_edokum,'GODZ_DO_'+$_ind,_z_time$3)
      ?}
   ?};
   exec('ustaw_nadg','form_ob',_edokum,'GODZ')


|? _id='ET_PRAC'
|| 1

|? _id='GODZ'
:: po modyfikacji godzin przelicz wniosek
|| _razem:=_z_time;
   {! _ind:=1..exec('wn_nadg_lsec','sch_imp')
   |! _przed:=exec('atr_get','form_ob',_edokum,'PRZED_'+$_ind,'REF_SQL')+1;
      {? _przed=''
      || exec('put_atr','form_ob',_edokum,'CZAS_'+$_ind,_z_time$3)
      || _g_od:=exec('str2time','#convert',exec('atr_get','form_ob',_edokum,'GODZ_OD_'+$_ind));
         {? _przed='G'
         || _g_do:=exec('str2time','#convert',exec('atr_get','form_ob',_edokum,'GODZ_DO_'+$_ind));
            _czas:=_g_do-_g_od;
            {? _g_od>_g_do || _czas+=time(24,0,0) ?}
         || _czas:=_g_od
         ?};
         _razem+=_czas;
         exec('put_atr','form_ob',_edokum,'CZAS_'+$_ind,_czas$3)
      ?}
   !};
   exec('put_atr','form_ob',_edokum,'GODZ_RAZEM',_razem$3)
?}


\ustaw_odb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Formuly po edycji dla wniosku o nadgodziny
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::       _b [STRING]    - identyfikator
::      [_c][STRING]    - dodatkowy parametr
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || return(~~) ?};
    _id:={? var_pres('_b')=type_of('')   || _b || return(~~) ?};
   _par:={? var_pres('_c')=type_of('')   || _c || ''         ?};

_z_time:=*0;

{? 8+_id='ODB_DATA'
:: po modyfikacji daty ustaw liczbę godzin z planu
|| _ind:=#(9-_id);
   _data:=exec('str2date','#convert',exec('atr_get','form_ob',_edokum,_id));
   _p_ref_s:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL');
   _p_ref:=_p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null);
   _plan_old:=exec('atr_get','form_ob',_edokum,'ODB_GODZ_PLAN_'+$_ind);
   {? _data=#0
   || exec('put_atr','form_ob',_edokum,'ODB_DATA_'+$_ind,#0);
      exec('put_atr','form_ob',_edokum,'ODB_GODZ_PLAN_'+$_ind,'')
   || _plan:=*0;
      P.cntx_psh();
      P.use('pracowni');
      P.index('PRACOSOW');
      P.prefix();
      {? P.seek(_p_ref)
      || exec('firma','#firma',exec('firma_symbol','#firma'));
         KAL_DEF.cntx_psh();
         exec('open_prc','open_tab');
         exec('__KAL','object');
         KAL_DEF.index('KAL_DEF');
         __KAL.set_cal(P.KAL);
         {? __KAL.get_day(_data)
         || _plan:=KAL_DEF.CZAS;
::          odjęcie godzin wniosku o czas wolny
            _g_rodn:=exec('get_r_odn_czas','prc_graf',_p_ref,_data);
            {? _g_rodn>0
            || _plan:=_plan-(*(_g_rodn/(60*1000)));
               _plan:={? _plan<*0 || *0 || _plan ?}
            ?}
         ?};
         KAL_DEF.cntx_pop()
      ?};
      P.cntx_pop();
      _plan:=_plan$3;
      {? _plan<>_plan_old
      || exec('put_atr','form_ob',_edokum,'ODB_GODZ_PLAN_'+$_ind,_plan);
         _g_wnio_old:=exec('atr_get','form_ob',_edokum,'ODB_GODZ_WNIO_'+$_ind);
         {? _g_wnio_old=_plan_old
         || exec('put_atr','form_ob',_edokum,'ODB_GODZ_WNIO_'+$_ind,_plan)
         ?}
      ?}
   ?};
   exec('ustaw_odb','form_ob',_edokum,'ODB_NADG_%1'[$_ind])

|? 8+_id='ODB_NADG'
|| _spl:=spli_str(_id,'_');
   _ind:=#_spl[3];
   _data:=exec('str2date','#convert',exec('atr_get','form_ob',_edokum,'ODB_DATA_'+$_ind));
   _typ:=exec('atr_get','form_ob',_edokum,'ODB_TYP_'+$_ind,'REF_SQL');
   _g_plan:=exec('str2time','#convert',exec('atr_get','form_ob',_edokum,'ODB_GODZ_PLAN_'+$_ind));
   _g_wnio:=exec('str2time','#convert',exec('atr_get','form_ob',_edokum,'ODB_GODZ_WNIO_'+$_ind));
   _p_ref:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL');

   _razem:=_z_time;
   {? _typ='W' | _typ='S'
   || _jest:=0;
      {! _ind_nadg:=1..exec('wn_odb_nadg_lsec','sch_imp')
      |! _nadg:=exec('atr_get','form_ob',_edokum,'ODB_NADG_%1_%2'[$_ind,$_ind_nadg]);
         {? _nadg<>''
         || _godz:=exec('str2time','#convert',spli_str(_nadg,'|')[2]);
            _godz_o:={? _godz<=_g_wnio || _g_plan || _g_wnio ?};
            _godz:={? _godz<=_g_wnio || _godz || _g_wnio ?};
            _g_wnio-=_godz_o;
            _jest:=1;
            exec('put_atr','form_ob',_edokum,'ODB_NADG_LON_%1_%2'[$_ind,$_ind_nadg],_godz$3);
            exec('put_atr','form_ob',_edokum,'ODB_NADG_GODZ_%1_%2'[$_ind,$_ind_nadg],_godz_o$3)
         || exec('put_atr','form_ob',_edokum,'ODB_NADG_LON_%1_%2'[$_ind,$_ind_nadg],_z_time$3);
            exec('put_atr','form_ob',_edokum,'ODB_NADG_GODZ_%1_%2'[$_ind,$_ind_nadg],_z_time$3)
         ?}
      !};
      {? _jest || _razem:=_g_plan ?}
   || {! _ind_nadg:=1..exec('wn_odb_nadg_lsec','sch_imp')
      |! _nadg:=exec('atr_get','form_ob',_edokum,'ODB_NADG_%1_%2'[$_ind,$_ind_nadg]);
         {? _nadg<>''
         || _godz:=exec('str2time','#convert',spli_str(_nadg,'|')[2]);
            _godz_o:={? _typ='F' || *((*_godz)*1.5) || _godz ?};
            _godz_o:={? _godz_o<=_g_wnio || _godz_o || _g_wnio ?};
            _godz:={? _typ='F' || *((*_godz_o)/1.5) || _godz_o ?};
            _g_wnio-=_godz_o;
            exec('put_atr','form_ob',_edokum,'ODB_NADG_LON_%1_%2'[$_ind,$_ind_nadg],_godz$3);
            exec('put_atr','form_ob',_edokum,'ODB_NADG_GODZ_%1_%2'[$_ind,$_ind_nadg],_godz_o$3);
            _razem+=_godz_o
         || exec('put_atr','form_ob',_edokum,'ODB_NADG_LON_%1_%2'[$_ind,$_ind_nadg],_z_time$3);
            exec('put_atr','form_ob',_edokum,'ODB_NADG_GODZ_%1_%2'[$_ind,$_ind_nadg],_z_time$3)
         ?}
      !}
   ?};
   exec('put_atr','form_ob',_edokum,'ODB_GODZ_ODEB_'+$_ind,_razem$3);
:: usuwamy zmienne globalne, aby w następnym f3 utworzyć je od nowa
   VAR_DEL.delete('__ODB_N');
   VAR_DEL.delete('__ODB_TAB');
   VAR_DEL.delete('__oAdded')


|? 7+_id='ODB_TYP'
:: po zmianie typu odbioru czyścimy wybrane nadgodziny
|| _ind:=#(8-_id);
   {! _ind_nadg:=1 .. exec('wn_odb_nadg_lsec','sch_imp')
   |! exec('put_atr','form_ob',_edokum,'ODB_NADG_%1_%2'[$_ind,$_ind_nadg],'');
      exec('put_atr','form_ob',_edokum,'ODB_NADG_LON_%1_%2'[$_ind,$_ind_nadg],*0$3);
      exec('put_atr','form_ob',_edokum,'ODB_NADG_GODZ_%1_%2'[$_ind,$_ind_nadg],*0$3)
   !};
   exec('put_atr','form_ob',_edokum,'ODB_GODZ_ODEB_'+$_ind,*0$3)

|? _id='ET_PRAC'
:: po zmianie współpracownika odświeżamy informacje o planie pracy
|| {! _ind:=1 .. exec('wn_odb_lsec','sch_imp')
   |! _odb_data:='ODB_DATA_%1'[$_ind];
      {? exec('atr_get','form_ob',_edokum,_odb_data)<>''
      || exec('ustaw_odb','form_ob',_edokum,_odb_data)
      ?}
   !}

|? 9+_id='ODB_A_OKR'
|| _ind:=#(10-_id);

   _p_ref_s:=exec('atr_get','form_ob',EDOKUM.ref(),'ET_PRAC','REF_SQL');
   _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null);
   _a_okr_s:=exec('atr_get','form_ob',EDOKUM.ref(),'ODB_A_OKR_'+$_ind,'REF_SQL');
   exec('MASK','object');
   exec('open_prc','open_tab');

   _a_okr_rok_msc_s:='';
   A_OKR.cntx_psh();
   A_OKR.index('A_OKRZR');
   A_OKR.prefix();
   {? _p_ref & A_OKR.seek(_a_okr_s)
   || A_OKRP.cntx_psh();
      A_OKRP.index('A_OKPP');
      _loop:=1;
      A_OKRP.prefix(A_OKR.ref(),_p_ref);
      {? A_OKRP.first()
      || A_OKRP_M.cntx_psh();
         A_OKRP_M.index('A_OKRPM');
         A_OKRP_M.prefix(A_OKRP.ref());
         {? A_OKRP_M.first() & A_OKRP_M.size()=1
         || _a_okr_rok_msc_s:='%1 - %2'[$A_OKRP_M.ROK,exec('msc_nazwa','#convert',A_OKRP_M.MSC)]
         ?};
         A_OKRP_M.cntx_pop()
      ?};
      A_OKRP.cntx_pop()
   ?};
   A_OKR.cntx_pop();

   exec('put_atr','form_ob',_edokum,'ODB_ROK_MSC_'+$_ind,_a_okr_rok_msc_s)
?}


\typ_dnia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Zwraca typ dnia dla pracownika na podaną datę
::   WE: _a [STRING] - sql ref pracownika
::       _b [DATE]   - data badania
::   WY: '' lub napis dla typu dnia
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_p_sql_ref:={? var_pres('_a')=type_of('')   || _a || return(_result) ?};
     _data:={? var_pres('_b')=type_of(date) || _b || return(_result) ?};

P.cntx_psh();
P.use('pracowni');
P.index('PRACOSOW');
P.prefix();
{? _data<>#0 & P.seek(_p_sql_ref)
|| exec('firma','#firma',exec('firma_symbol','#firma'));
   KAL_DEF.cntx_psh();
   exec('open_prc','open_tab');
   exec('__KAL','object');
   KAL_DEF.index('KAL_DEF');
   __KAL.set_cal(P.KAL);
   {? __KAL.get_day(_data)
   || exec('var1_typws_bd','kaledit');
      _result:=VAR1.TYPWS
   ?};
   KAL_DEF.cntx_pop()
?};
P.cntx_pop();
_result


\przelozony
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuła na wybór użytkowników
::       Zwraca tabelę z rekordem przelozonego pracownika - formula do wykorzystania w obiegach
::   WE: [_a] [REFERENCE] - wskazanie na osobę (lub domyślnie będzie pobierane z EDOKUM.DOSTAWCA)
::       [_b] [DATE]      - data (stan na dzien) - domyslnie biezacy
::       [_c] [INTEGER]   - poziom przelozonego [domyślnie 1]
::       [_d] [STRING]    - kodu zależności służbowych, jeśli pominięty lub inny niż napis, to przyjęty będzie domyślny
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1,'REF_US','INTEGER','Ref użytkownika'@,
                'KOD_US','STRING[10]','Kod użytkownika'@
             );

 _osoba:={? var_pres('_a')=type_of(null()) || _a || EDOKUM.DOSTAWCA ?};
  _data:={? var_pres('_b')=type_of(date)   || _b || date()          ?};
_poziom:={? var_pres('_c')=type_of(0)      || _c || 1               ?};
_rodzaj:={? var_pres('_d')=type_of('')     || _d || ~~              ?};

OSOBA.cntx_psh();
OSOBA.index('OSOBA');
OSOBA.prefix();
{? OSOBA.seek(_osoba)
|| _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
   P.cntx_psh();
   P.use('pracowni');
   P.index('OSOBA');
   P.prefix(OSOBA.ref(),_firma);
   {? P.first()
   || USERS.cntx_psh();
      USERS.index('OSOBA');

      _continue:=1;

      _lvl:=obj_new('current','max');
      _lvl.current:=_poziom;
      _lvl.max:=_poziom;

      _prac:=obj_new('noAbsenceCheck','absenceCheck','clear');
      _prac.clear:=
         "{? var_pres('noAbsenceCheck',.)>100 || obj_del(.noAbsenceCheck) ?};
          {? var_pres('absenceCheck',.)>100 || obj_del(.absenceCheck) ?}
         ";

      _getMaxLvl:=
         "_result:=1;
          _tab:={? var_pres('_a')=type_of(SYSLOG) || _a || return(_result) ?};
          _tab.cntx_psh();
          {? _tab.first()
          || {!
             |? {? _tab.L>_result || _result:=_tab.L ?};
                _tab.next()
             !}
          ?};
          _tab.cntx_pop();
          _result
         ";
      {!
      |? {? P.ZA='T'
         || _prac.clear();
::          Pobranie informacji o przełożonych i zastępcach bez względu na nieobecności
            _prac.noAbsenceCheck:=exec('prac_nad','stanprac',P.ref(),0,,_rodzaj);
::          Pobranie informacji o przełożonych i zastępcach z uwzględnieniem nieobecności
            _prac.absenceCheck:=exec('prac_nad','stanprac',P.ref(),1,,_rodzaj);

            _max1:=_getMaxLvl(_prac.noAbsenceCheck);
            _max2:=_getMaxLvl(_prac.absenceCheck);
            _lvl1:=1;
            _lvl2:=1;
            _lvl.current:=1;

            {? _prac.absenceCheck.first()
            ||
               _lvl1:=_prac.absenceCheck.L;
               _lvl.max:=_max1;
::             Dodanie do wyniku informacji o przełożonych i ich zastępcach bez względu na nieobecności
::             Do wyniku zostaną dodani pracownicy z pierwszego poziomu "bezpośredniości", dla którego
::             powiodła się operacja znalezienia pracownika
               _added:=0;
               {!
               |? _continue & _lvl.current<=_lvl.max
               |!
                  _continue*=0;
                  {!
                  |? {? _prac.absenceCheck.L=_lvl.current
                     || P.cntx_psh();
                        P.prefix();
                        {? P.seek(_prac.absenceCheck.P,)
                        || USERS.prefix(P.OSOBA);
                           {? USERS.first()
                           || {!
                              |? _tab.REF_US:=#USERS.ref();
                                 _tab.KOD_US:=USERS.KOD;
                                 {? ~_tab.find_rec()
                                 || {? _tab.add()
                                    || _added+=1
                                    ?}
                                 ?};
                                 USERS.next()
                              !}
                           ?}
                        ?};
                        P.cntx_pop()
                     ?};
                     _prac.absenceCheck.next()
                  !};
                  {? ~_added
                  || _lvl.current+=1;
                     _continue:=1;
                     _prac.absenceCheck.first()
                  ?}
               !}
            ?};
            {? _prac.noAbsenceCheck.first()
            ||
               _lvl2:=_prac.noAbsenceCheck.L;
::             Jeżeli poziom pierwszego znalezionego zapisu jest różny lub znaleziony przełożony nie znajduje się
::             na pierwszym miejscu pośród znalezionych zapisów zostaną dodani przełożeni oraz/lub zastępcy z
::             uwzględnieniem nieobecności
::             Do wyniku zostaną dodani pracownicy z pierwszego poziomu "bezpośredniości", dla którego
::             powiodła się operacja znalezienia pracownika
               _ok:=1;
               {? _lvl1=_lvl2
               || {? _prac.absenceCheck.first()
                  || _ok*=~(_prac.absenceCheck.P=_prac.noAbsenceCheck.P)
                  ?}
               ?};
               {? _ok
               || _lvl.current:=_continue:=1;
                  _added:=0;
                  {!
                  |? _continue & _lvl.current<=_lvl.max
                  |!
                     _continue*=0;
                     {!
                     |? {? _prac.noAbsenceCheck.L=_lvl.current
                        || P.cntx_psh();
                           P.prefix();
                           {? P.seek(_prac.noAbsenceCheck.P,)
                           || USERS.prefix(P.OSOBA);
                              {? USERS.first()
                              || {!
                                 |? _tab.REF_US:=#USERS.ref();
                                    _tab.KOD_US:=USERS.KOD;
                                    {? ~_tab.find_rec()
                                    || {? _tab.add()
                                       || _added+=1
                                       ?}
                                    ?};
                                    USERS.next()
                                 !}
                              ?}
                           ?};
                           P.cntx_pop()
                        ?};
                        _prac.noAbsenceCheck.next()
                     !};
                     {? ~_added
                     || _lvl.current+=1;
                        _continue:=1;
                        _prac.noAbsenceCheck.first()
                     ?}
                  !}
               ?}
            ?}
         ?};
         P.next()
      !};
      USERS.cntx_pop()
   ?};
   P.cntx_pop()
?};
OSOBA.cntx_pop();
_tab


\is_ppk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.22]
:: OPIS: Sprawdza czy jest dziedzina PPK (na potrzeby wniosków w obiegu)
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
exec('lic','#b_domain',exec('domain_ref','#b_domain','PPK'))


\fdinm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Formula zwraca pierwszy dzień następnego miesiąca dla podanej daty
::   WE: _a [DATE] - przekazana data
::   WY: date(0,0,0) lub pierwszy dzień następnego miesiąca
::----------------------------------------------------------------------------------------------------------------------
_data:={? var_pres('_a')=type_of(date()) & _a<>#0 || _a || return(#0) ?};

_rok:=_data~1; _msc:=_data~2+1;
{? _msc>12 || _msc:=1; _rok+=1 ?};
date(_rok,_msc,1)


\akcept_ppk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Formuła na akceptację deklaracji/wniosków PPK
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - [INTEGER]   - walidacja
::       _d - [STRING]    - symbol wniosku
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
_symbol:={? var_pres('_d')=type_of('')   || _d || return(_result) ?};

exec('tab_kom', 'form_ob');
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
::    zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _rej:=exec('rodz_biez_etap','obiegi')='W';
::    pobranie informacji z wniosku
      _tab:=obj_new('DATA','DATA_ZM','PROCENT','IF');
      _data_s:=exec('atr_get','form_ob',_edokum,'DATA');
      _tab.DATA:=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _procent:='0';
      {? _symbol='DWWP'
      || _procent:=exec('atr_get','form_ob',_edokum,'PWP')
      |? _symbol='DWWD'
      || _procent:=exec('atr_get','form_ob',_edokum,'PWD')
      ?};
      _tab.PROCENT:=#gsub(_procent,',','.');

::    sprawdzenie poprawności danych
      _result.ok:=1;
      _rodzaj:={? _symbol='WOU' || 'O' || 'U' ?};
      _ppk_wrd:=exec('szukaj','ppk_wrd',_rodzaj,_symbol);
      _akcept:='';

      {? exec('is_ppk','form_ob',1)
      || {? _ppk_wrd=null()
         || _result.ok*=0;
            {? _walid
            || exec('tab_kom_add','form_ob',1,
                    'Brak możliwości złożenia wniosku - nie znaleziono definicji wniosku w systemie.'@)
            ?}
         ?};

::       jeżeli jest to akceptacja i zapamiętany jest wnisek kolidujący, to wycofujemy go z ewidencji
         {? app_info('web_sesid')<>''
         || _par:=web_params_get();
            _pkw_wnu:={? var_pres('_par')>100 & var_pres('pkw_wnu',_par)>0 || _par.pkw_wnu || null() ?}
         || _par:=params_get();
            _pkw_wnu:={? var_pres('_par')>100 & var_pres('pkw_wnu',_par)>0 || _par.pkw_wnu || null() ?}
         ?};
         {? ~_walid & _pkw_wnu
         || PPK_WNU.cntx_psh();
            PPK_WNU.prefix();
            {? PPK_WNU.seek(_pkw_wnu)
            || PPK_WNU.WER_WYM:='N';
               PPK_WNU.PWP_STAT:='N';
               {? ~PPK_WNU.put()
               || _result.ok*=0;
                  exec('tab_kom_add','form_ob',1,
                          'Nie udało się wycofać z ewidencji wniosku z dnia: %1 r.'@[PPK_WNU.DATA$4]);
                  exec('tab_kom_add','form_ob',1,
                          'Akceptacja bieżącego wniosku została przerwana.'@)
               ?}
            ?};
            PPK_WNU.cntx_pop()
         ?};
         {? _result.ok
         || PPK_UMO.cntx_psh();
            _ppk_umo:=exec('init','ppk_umo',_tab.DATA);
            PPK_UMO.cntx_pop();
            {? _ppk_umo=null()
            || _result.ok*=0;
               {? _walid
               || exec('tab_kom_add','form_ob',1,'Nie udało się ustalić umowy o zarządzanie.'@)
               ?}
            ?}
         ?};
         {? _result.ok
         || {? ~exec('aktywny','ppk_ucz',_osoba,_tab.DATA)
            || _result.ok*=0;
               {? _walid
               || exec('tab_kom_add','form_ob',1,'Osoba składająca wniosek nie jest aktywnym '
                                                 'pracownikiem/zleceniobiorcą.'@)
               ?}
            ?}
         ?};
         {? _result.ok
         || _ppk_ucz:=exec('uczestn','ppk_ucz',_ppk_umo,_osoba);
            {? _ppk_ucz=null() & (_symbol='DWWP' | _symbol='DWWD' | _symbol='DRWD' | _symbol='DWT')
            || _result.ok*=0;
               {? _walid
               || exec('tab_kom_add','form_ob',1,'Osoba składająca wniosek nie jest uczestnikiem PPK.'@)
               ?}
            |? _ppk_ucz<>null() & _symbol='WOU'
            || _result.ok*=0;
               {? _walid
               || exec('tab_kom_add','form_ob',1,'Osoba składająca wniosek jest już uczestnikiem PPK.'@)
               ?}
            ?}
         ?};

::       obsługa daty zmiany dla poszczególnych typów wniosków
::       wniosek o uczestnictwo
         {? _symbol='WOU'
         || _tab.DATA_ZM:=_tab.DATA
::       wniosek o wypłatę transferową obowiązuje po 7 dniach od złożenia oświadczenia (tyle uczestnik ma czasu na
::       zablokowanie wniosku),(akt_12.51_96 data zmiany i data są takie same, zmieniono sposób wysyłki)
         |? _symbol='DWT'
         || _tab.DATA_ZM:=_tab.DATA;
::          powołyjemy tabelę przechowującą wybrane instytucje finansowe
            _tab.IF:=tab_tmp(2,'NAZWA','STRING[100]','Nazwa instytucji',
                               'NR_RACH','STRING[50]','Numer rachunku',
                               'REF','STRING[16]','Ref rekordu')
::       dla pozostałych wniosków data obowiązywania (data zmiany) jest pobierana z wniosku
         || _data_s:=exec('atr_get','form_ob',_edokum,'DATA_ZM');
            _tab.DATA_ZM:=exec('to_ti_dt', 'form_ob', _data_s, 'D')
         ?};

         {? _result.ok & _tab.DATA=date(0,0,0)
         || _result.ok*=0;
            {? _walid
            || exec('tab_kom_add','form_ob',1,'Data złożenia wniosku nie może być pusta.'@)
            ?}
         ?};
         {? _result.ok & _tab.DATA_ZM=date(0,0,0)
         || _result.ok*=0;
            {? _walid
            || exec('tab_kom_add','form_ob',1,'Data zmiany wniosku nie może być pusta.'@)
            ?}
         ?};
         {? _result.ok & _tab.DATA_ZM<_tab.DATA
         || _result.ok*=0;
            {? _walid
            || exec('tab_kom_add','form_ob',1,'Data zmiany wniosku nie może być wcześniejsza od daty złożenia.'@)
            ?}
         ?};
         {? _result.ok & _rej & _tab.DATA<date()
         || _result.ok*=0;
            {? _walid
            || exec('tab_kom_add', 'form_ob',1,'Data złożenia wniosku nie może być wcześniejsza od daty bieżącej.'@)
            ?}
         ?};
::       walidacja w zależności od typu wniosku
         {? _result.ok
         ||
            {? _symbol='DWWP'
            || exec('czytaj','#stalesys',_tab.DATA,KST_PPK,'SK_MINPU','SK_MAXPU');
               {? _result.ok & (_tab.PROCENT<KST_PPK.SK_MINPU | _tab.PROCENT>KST_PPK.SK_MAXPU)
               || _result.ok*=0;
                  {? _walid
                  || exec('tab_kom_add','form_ob',1,
                          'Procent wpłaty podstawowej musi zawierać się w zakresie od %1 do %2.'@
                          [$KST_PPK.SK_MINPU,$KST_PPK.SK_MAXPU])
                  ?}
               ?}
            |? _symbol='DWWD'
            || exec('czytaj','#stalesys',_tab.DATA,KST_PPK,'SK_MAXDU');
               {? _result.ok & (_tab.PROCENT>KST_PPK.SK_MAXDU | _tab.PROCENT<=0)
               || _result.ok*=0;
                  {? _walid
                  || exec('tab_kom_add','form_ob',1,
                          'Procent wpłaty dodatkowej musi być większy od 0 oraz mniejszy lub równy %1.'@
                          [$KST_PPK.SK_MAXDU])
                  ?}
               ?}
            |? _symbol='DRWD'
            || {? _result.ok & _tab.PROCENT<>0
               || _result.ok*=0;
                  {? _walid
                  || exec('tab_kom_add','form_ob',1,'Procent wpłaty dodatkowej musi być równy 0.'@)
                  ?}
               ?}
            |? _symbol='WOU'
            || {? _result.ok
               || _txt:='';
                  _dt:=_tab.DATA;
                  exec('czytaj','#stalesys',_dt,KST_PPK,'LAT_WYM','LAT_MAX');
                  _data_min:=(date((_dt~1)-KST_PPK.LAT_WYM,_dt~2,{? _dt~2=2 & _dt~3=29 || 0 || _dt~3 ?})-1);
                  _data_max:=(date((_dt~1)-KST_PPK.LAT_MAX,_dt~2,{? _dt~2=2 & _dt~3=29 || 0 || _dt~3 ?}));
                  {? ~(OSOBA.UR_DATA>_data_max & OSOBA.UR_DATA<_data_min)
                  || _txt:='Wniosek może złożyć osoba, która ukończyła %1. rok życia '
                           'i nie ukończyła %2. roku życia.'@[$KST_PPK.LAT_WYM,$KST_PPK.LAT_MAX]
                  ?};
                  {? +_txt
                  || _result.ok*=0;
                     {? _walid || exec('tab_kom_add','form_ob',1,_txt) ?}
                  ?}
               ?}
            |? _symbol='DWT'
            || {? _result.ok
               || _txt:='';
                  ADRES.cntx_psh(); ADRES.index('ADRES'); ADRES.prefix();
                  _ile:=_added:=0;
                  _nr_rach:='';
                  {! _licz:=1..exec('wn_opif_lsec','sch_imp')
                  |? +_txt=0
                  |! _ref_sql:=exec('atr_get','form_ob',_edokum,'PPKIF'+$_licz,'REF_SQL');
                     _nr_rach:=exec('atr_get','form_ob',_edokum,'PPK_NR_RACH'+$_licz);
                     _ref_nr:=BIT.sqlint(_ref_sql);
                     {? ADRES.seek(_ref_nr,)
::                   sprawdzenie czy nie podano tej samej instytucji wielokrotnie z tym samym numerem konta
                     || _ile+=1;
                        {? _tab.IF.find_key(ADRES.NAZWA,_nr_rach,)
                        || _txt:='%1 - podwojony numer rachunku dla instytucji finansowej.'@[ADRES.NAZWA]
                        |? +form(_nr_rach)=0
                        || _txt:='%1 - dla instytucji finansowej nie podano numeru rachunku uczestnika.'@[ADRES.NAZWA]
                        || _tab.IF.NAZWA:=ADRES.NAZWA;
                           _tab.IF.NR_RACH:=_nr_rach;
                           _tab.IF.REF:=_ref_sql;
                           _added+=_tab.IF.add()
                        ?}
                     |? _ref_nr
                     || _txt:='Nie udało się znaleźć instytucji finansowej o identyfikatorze: %1'@[_ref_sql]
                     |? +form(_nr_rach)
                     || _txt:='Dla instytucji finansowej %1 podano numer rachunku uczestnika '
                              'lecz nie wskazano jej nazwy.'@[$_licz]
                     ?}
                  !};
                  ADRES.cntx_pop();
                  {? +_txt
                  || _result.ok*=0;
                     {? _walid || exec('tab_kom_add','form_ob',1,_txt) ?}
                  |? _ile=0
                  || {? _walid
                     || exec('tab_kom_add','form_ob',1,'Nie podano żadnej instytucji finansowej w oświadczeniu.'@)
                     ?}
                  |? _ile<>_added
                  || {? _walid
                     || exec('tab_kom_add','form_ob',1,
                              'Nie udało się dodać wszystkich wskazanych instytucji finansowych.'@)
                     ?}
                  || {? _walid & _tab.IF.first()
::                   sprawdzenie czy uczestnik nie ma już wcześniej dodanej instytucji
                     || PPK_WNU.cntx_psh();
                        PPK_WIF.cntx_psh();
                        PPK_WIF.index('UCZ_NAZ');
                        {? _tab.IF.first()
                        || {!
                           |? PPK_WIF.prefix(_ppk_ucz,_tab.IF.NAZWA);
                              {? PPK_WIF.first()
                              || exec('tab_kom_add','form_ob',3,
                                    'W systemie widnieje już oświadczenie o podpisanej umowie o prowadzenie PPK '
                                    'dotyczące instytucji finansowej "%1". '
                                    'Oświadczenie zostało złożone w dniu %2 roku.'@
                                    [_tab.IF.NAZWA,PPK_WIF.PPK_WNU().DATA$6]
                                 )
                              ?};
                              _tab.IF.next()
                           !}
                        ?};
                        PPK_WIF.cntx_pop();
                        PPK_WNU.cntx_pop()
                     ?}
                  ?}
               ?}
            |? _symbol='DOWU25'
            || _d0:=date(0,0,0);
::             Sprawdzenie czy w przeszłości była rezygnacja z PPK i nie została wznowiona
               {? ((_data_r:=exec('spr_wnu','ppk_wnu',_osoba,,_tab.DATA_ZM,'DRZW',1))<>_d0)
                  & (~exec('spr_wnu','ppk_wnu',_osoba,,_tab.DATA_ZM,'AWW')
                     | ~exec('spr_wnu','ppk_wnu',_osoba,,_tab.DATA_ZM,'WODW'))
               || exec('tab_kom_add','form_ob',1,
                     '%1%2%3'@[
                        'Brak możliwości złożenia wniosku przed ponownym wznowieniem opłacania składek na PPK. '@,
                        'Aktualnie obowiązuje rezygnacja z PPK złożona w dniu: '@,
                        $_data_r
                        ]
                  );
                  _result.ok*=0
               ?};
::             Sprawdzenie, czy była blokada
               _dtWB25B:=exec('spr_wnu','ppk_wnu',_osoba,,_tab.DATA_ZM,'WB25B',1);
               {? _result.ok & _dtWB25B<>_d0
               ||
::                Sprawdzenie, czy nie nastąpiło wznowienie po blokadzie
                  {? exec('spr_wnu','ppk_wnu',_osoba,_dtWB25B,_tab.DATA_ZM,'WB25W',0)
                  || {? _walid
                     || exec('tab_kom_add','form_ob',1,
                         '%1%2'@[
                           'Brak możliwości złożenia deklaracji po wznowieniu naliczania składek na program PPK. '@,
                           'Skontaktuj się z działem kadr w celu weryfikacji.'@
                          ]
                        )
                     ?};
                     _result.ok*=0
                  ?};
::                Sprawdzenie czy nie został już złożony wniosek DOWU25
                  {? _result.ok & (_dtDOWU25:=exec('spr_wnu','ppk_wnu',_osoba,_dtWB25B,_tab.DATA_ZM,'DOWU25',1))<>_d0
                  || {? _walid
                     || exec('tab_kom_add','form_ob',1,
                           '%1%2%3'[
                              'W systemie istnieje już zapis o deklaracji opłacania wpłat uczestnika złożonej w dniu '@,
                              $_dtDOWU25,
                              '. Brak możliwości ponownego złożenia deklaracji.'@
                           ]
                        )
                     ?}
                  ?}
               || {? _result.ok & _walid
                  || exec('tab_kom_add','form_ob',1,
                       '%1%2%3'@[
                          'Brak możliwości złożenia deklaracji. '@,
                          'W systemie brak informacji o nałożeniu blokady naliczania składek na program PPK. '@,
                          'Skontaktuj się z działem kadr w celu weryfikacji.'@
                       ]
                     )
                  ?};
                  _result.ok*=0
               ?}
            ?}
         ?}

      || _result.ok*=0;
         exec('tab_kom_add','form_ob',1,'Brak obsługi PPK w systemie - nie można złożyć wniosku.'@)
      ?};

::    zapisujemy do bazy informacje o deklaracji
      {? _result.ok
      || obj_del(_result);
         _user:=OSOBA.NAZWISKO +' '+OSOBA.PIERWSZE;
         {? ~_rej & (_symbol='DWWP' | _symbol='WOU') || _akcept:='T' ?};
         _result:={? _symbol='WOU'
                  || exec('dodaj','ppk_wnu',_osoba,_rodzaj,_tab.DATA,_tab.DATA_ZM,
                                        _ppk_umo,_ppk_ucz,_ppk_wrd,_user,_akcept,0,0,0)
                  || exec('dodaj','ppk_wnu',_osoba,_rodzaj,_tab.DATA,_tab.DATA_ZM,
                                        _ppk_umo,_ppk_ucz,_ppk_wrd,_user,_akcept,_tab.PROCENT)
                  ?};

         {? _result.ok>0
         || {? _symbol='DWT' & _result.ppk_wnu
            || _tab.IF.prefix();
               _ile:=_tab.IF.size();
               _added:=0;
               ADRES.cntx_psh(); ADRES.index('ADRES'); ADRES.prefix();
               {? _tab.IF.first()
               || {!
                  |? {? ADRES.seek(BIT.sqlint(_tab.IF.REF),)
                     || {? exec('dodaj','ppk_wif',_result.ppk_wnu,ADRES.ref(),_tab.IF.NR_RACH)
                        || _added+=1
                        ?}
                     || _result.ok*=0;
                        _result.ppk_wnu:=null();
                        exec('tab_kom_add','form_ob',1,
                           'Nie udało się znaleźć instytucji finansowej o identyfikatorze: %1'@[_tab.IF.REF])
                     ?};
                     _tab.IF.next()
                  !}
               ?};
               ADRES.cntx_pop();
               {? _added=_ile
               || psystem:='PPK';
                  exec('zap_kom','ppk_kom',_tab.DATA,'U','IDWT');
                  &psystem
               || {? _mydo || undo() ?}
               ?}
            |? ~_rej & _symbol='WOU'
            || {? _result.ppk_wnu
               || psystem:='PPK';
                  exec('zap_kom','ppk_kom',_dt,'U','IUCZ');
                  &psystem
               ?}
            ?}
         ?};

::       obsługa błędów
         {? _result.ok<=0
         || {? _result.ppk_wnu
            || {? app_info('web_sesid')<>''
            || web_params_set(exec('obj_ntab_set','#array',web_params_get(),'pkw_wnu',_result.ppk_wnu))
               || params_set(exec('obj_ntab_set','#array',params_get(),'pkw_wnu',_result.ppk_wnu))
               ?}
            ?};
            {? _result.errMsg=''
            || _result.errMsg:='Nie udało się poprawnie zapisać wniosku do bazy danych.'@
            ?};
            {? TKOM13.first() || {! |? TKOM13.del() !} ?};
::          dzielimy komunikat
            _errs:=spli_str(_result.errMsg,'\n');
            {! _ind:=1..obj_len(_errs)
            |? _errNr:={?  _result.ok=-1 || 3 || 1 ?};
               exec('tab_kom_add','form_ob',_errNr,_errs[_ind])
            !}
         ?}
      ?}
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,'Deklaracja/wniosek PPK')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'@
      ?}
   ?};
   {? _walid & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   {? _walid & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\akcept_nadg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuła na akceptację wniosków o nadgodziny
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja=1
::       _d - [STRING]    - symbol wniosku
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
_symbol:={? var_pres('_d')=type_of('')   || _d || ''              ?};

exec('tab_kom', 'form_ob');
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || exec('__HARM','object');
      exec('__KAL','object');
      _tab:=tab_tmp(3,
         'DATA','DATE','Data',
         'G_OD','TIME','Godzina od',
         'G_DO','TIME','Godzina do',
         'CZAS','TIME','Liczba nadgodzin',
         'PRZED','STRING[1]','',
         'KK','STRING[16]','Konto kosztów',
         'OPIS','STRING[255]','Uwagi');

      _result.ok:=1;
      _rej:=exec('rodz_biez_etap','obiegi')='W';

::    pobranie informacji z wniosku
      _p_ref_s:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL');
      _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null);

      {! _ind:=1..exec('wn_nadg_lsec','sch_imp')
      |? _result.ok
      |! _data_s:=exec('atr_get','form_ob',_edokum,'DATA_'+$_ind);
         _g_od_s:=exec('atr_get','form_ob',_edokum,'GODZ_OD_'+$_ind);
         _g_do_s:=exec('atr_get','form_ob',_edokum,'GODZ_DO_'+$_ind);
         _przed:=exec('atr_get','form_ob',_edokum,'PRZED_'+$_ind,'REF_SQL')+1;
         _tab.DATA:=exec('str2date','#convert',_data_s);
         _tab.PRZED:=_przed;
         _tab.G_OD:=exec('str2time','#convert',_g_od_s,,*(-60));
         _tab.G_DO:=exec('str2time','#convert',_g_do_s,,*(-60));
         {? _symbol='P'
         || _tab.KK:=exec('atr_get','form_ob',_edokum,'KK_'+$_ind,'REF_SQL')
         ?};
         _tab.OPIS:=exec('atr_get','form_ob',_edokum,'OPIS_'+$_ind);

         _typ:=exec('typ_dnia','form_ob',_p_ref_s,_tab.DATA);
         _typ:=1+(1-_typ);

::       sprawdzenie wprowadzonych danych
         {? _p_ref=null()
         || exec('tab_kom_add','form_ob',1,'Nie udało się znaleźć wskazanego pracownika'@);
            _result.ok:=0
         ?};
         {? _result.ok & (_tab.DATA<>#0 | _tab.G_OD<>*0 | _tab.G_DO<>*0 | _przed<>'')
         || {? (_typ='R' & _przed<>'N' & _przed<>'T') | (_typ<>'R' & _przed<>'G')
            || {? _walid
               || exec('tab_kom_add','form_ob',1,'Błędne określenie wystąpienia nadgodzin (Dzień nr.: %1)'@[$_ind])
               ?};
               _result.ok:=0
            ?};
            {? _result.ok & _tab.DATA=#0
            || {? _walid
               || exec('tab_kom_add','form_ob',1,'Nie podano daty (Dzień nr.: %1)'@[$_ind])
               ?};
               _result.ok:=0
            ?};
::          czy miesiąc dla badanej daty jest otwarty
            {? _result.ok
            || _text:=exec('can_be_mod','prc_nadg',_tab.DATA,'add',0);
               {? +_text
               || {? _walid
                  || exec('tab_kom_add','form_ob',1,_text+' (Dzień nr.: %1)'@[$_ind])
                  ?};
                  _result.ok:=0
               ?}
            ?};
            {? _result.ok & _tab.G_OD<*0
            || {? _walid
               || exec('tab_kom_add','form_ob',1,'Podano błędną wartość w polu "Godzina od" (Dzień nr.: %1)'@[$_ind])
               ?};
               _result.ok:=0
            ?};
            {? _result.ok & _tab.G_DO<*0
            || {? _walid
               || exec('tab_kom_add','form_ob',1,'Podano błędną wartość w polu "Godzina do" (Dzień nr.: %1)'@[$_ind])
               ?};
               _result.ok:=0
            ?};
::          dni robocze
            {? _result.ok & (_przed='N' | _przed='T')
            || {? _tab.G_OD=*0
               || {? _walid
                  || exec('tab_kom_add','form_ob',1,'Nie podano liczby nadgodzin (Dzień nr.: %1)'@[$_ind])
                  ?};
                  _result.ok:=0
               ?};
               {? _result.ok & _tab.G_DO<>*0
               || {? _walid
                  || exec('tab_kom_add','form_ob',1,'Nie należy wypełniać pola "Godzina do" (Dzień nr.: %1)'@[$_ind])
                  ?};
                  _result.ok:=0
               ?};
               _tab.CZAS:=_tab.G_OD
            ?};
::          dni wolne i świąteczne
            {? _result.ok & _przed='G'
            || {? _tab.G_DO=*0
               || {? _walid
                  || exec('tab_kom_add','form_ob',1,'Należy uzupełnić pole "Godzina do" (Dzień nr.: %1)'@[$_ind])
                  ?};
                  _result.ok:=0
               ?};
               {? _result.ok & (_tab.G_OD>_tab.G_DO)
               || _czas:=_tab.G_DO+time(24,0,0)-_tab.G_OD;
                  {? _czas>time(24,0,0)
                  || {? _walid
                     || exec('tab_kom_add','form_ob',1,
                             'Czas pracy nie może przekraczać 24 godzin (Dzień nr.: %1)'@[$_ind])
                     ?};
                     _result.ok:=0
                  ?};
                  _tab.CZAS:=_czas
               ?}
            ?};
::          uzasadnienie
            {? _result.ok & (+form(_tab.OPIS)=0)
            || {? _walid
               || exec('tab_kom_add','form_ob',1,'Nie podano uzasadnienia (Dzień nr.: %1)'@[$_ind])
               ?};
               _result.ok:=0
            ?};
::          dodajemy tylko poprawne rekordy
            {? _result.ok || _tab.add() ?}
         ?}
      !};

::    sprawdzenie czy dodano cokolwiek do wniosku
      {? _result.ok & _tab.size()=0
      || {? _walid
         || exec('tab_kom_add','form_ob',1,'Nie określono dni z nadgodzinami dla wniosku.'@);
            _result.ok:=0
         ?}
      ?};

::    sprawdzenie czy nie ma już wcześniej dodanego wniosku na ten dzień
      {? _walid & _tab.first()
      || {!
         |? {? exec('exist','prc_nadg',_p_ref,_tab.DATA,'N')>0
            || exec('tab_kom_add','form_ob',1,
                  'W systemie widnieje już wniosek o pracę w nadgodzinach na dzień: %1'@[$_tab.DATA]);
               _result.ok:=0
            ?};
            _result.ok & _tab.next()
         !}
      ?};

::    zapisujemy do bazy informacje o wniosku
      {? _result.ok
      || {? _tab.first()
         || KK.cntx_psh();
            KK.index('KONTASYS');
            KK.prefix();
            _fml_kk:="{? +|_a & KK.seek(_a) || KK.ref() || null() ?}";
            {!
            |? _kk:={? _symbol='P' || _fml_kk(_tab.KK) || null() ?};
               _add:=exec('add','prc_nadg',_edokum,_p_ref,_tab.DATA,_tab.G_OD,_tab.G_DO,_tab.CZAS,_tab.PRZED,
                                          _tab.OPIS,'N',_symbol,,_kk);
               {? _add<1
               || exec('tab_kom_add','form_ob',1,'Nie udało się zapisać danych dla dnia: %1'@[$_tab.DATA]);
                  _result.ok:=0
               ?};
               _result.ok & _tab.next()
            !};
            KK.cntx_pop()
         ?};

::       obsługa błędów
         {? _result.ok<=0
         || {? _result.errMsg=''
            || _result.errMsg:='Nie udało się poprawnie zapisać wniosku do bazy danych.'@
            ?};
            {? TKOM13.first() || {! |? TKOM13.del() !} ?};
::          dzielimy komunikat
            _errs:=spli_str(_result.errMsg,'\n');
            {! _ind:=1..obj_len(_errs)
            |? _errNr:={?  _result.ok=-1 || 3 || 1 ?};
               exec('tab_kom_add','form_ob',_errNr,_errs[_ind])
            !}
         ?}
      ?}
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,'Wniosek o pracę w nadgodzinach')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'@
      ?}
   ?};
   {? _walid & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   {? _walid & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\akcept_odb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Formuła na akceptację wniosków o odbiór nadgodzin
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja=1
::       _d - [STRING]    - symbol wniosku
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
_symbol:={? var_pres('_d')=type_of('')   || _d || ''              ?};

exec('tab_kom', 'form_ob');
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || exec('MASK','object');
      exec('__HARM','object');
      exec('__KAL','object');
      exec('__RUB','object');
      exec('open_prc','open_tab');
      _result.ok:=1;

::    pobranie informacji wspólnych dla wszystkich wniosków
      _p_ref_s:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL');
      _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null);

      A_OKR.cntx_psh();
      A_OKR.prefix();
      A_OKRP.cntx_psh();
::    sprawdzenie czy liczba odebranych nadgodzin nie przekracza maksymalnej liczby możliwej do przekazania w paczce:
::    w jednym parze mieszą się 36 nadgodziny (a "pary" są cztery)
      _parSize:=36;
      _pars:=obj_new(4);
      {! _ind:=1..exec('wn_odb_lsec','sch_imp')
      |? _result.ok
      |! _pars[1]:=_pars[2]:=_pars[3]:=_pars[4]:='';
         _ii:=1;
         _count:=0;

::       podczytanie danych z nagłówka wniosku
         _data_s:=exec('atr_get','form_ob',_edokum,'ODB_DATA_'+$_ind);
         _typ:=exec('atr_get','form_ob',_edokum,'ODB_TYP_'+$_ind,'REF_SQL');
         _pk:=exec('atr_get','form_ob',_edokum,'ODB_PK_'+$_ind,'REF_SQL');
         _wyb:=exec('atr_get','form_ob',_edokum,'ODB_WYB_'+$_ind,'REF_SQL');
         _auto:={? _wyb='A' || 'T' || 'N' ?};
         _a_okr:=exec('atr_get','form_ob',_edokum,'ODB_A_OKR_'+$_ind,'REF_SQL');
         _a_okrp_m_s:=exec('atr_get','form_ob',EDOKUM.ref(),'ODB_ROK_MSC_'+$_ind,'REF_SQL');
         _rok:=exec('FindAndGet','#table',A_OKRP_M,_a_okrp_m_s,,"ROK",null);
         _msc:=exec('FindAndGet','#table',A_OKRP_M,_a_okrp_m_s,,"MSC",null);
         _g_wnio:=exec('atr_get','form_ob',_edokum,'ODB_GODZ_WNIO_'+$_ind);
         _g_odeb:=*0;

         {? ~((_rok>=1900 & _rok<=exec('max_rok','#datetime')))
         || exec('tab_kom_add','form_ob',1,
                  'Błędna wartość w polu \"Rok nadgodzin\".'@);
            _result.ok:=0
         ?};
         {? _result.ok & ~((_msc>=1 & _msc<=12))
         || exec('tab_kom_add','form_ob',1,
                  'Błędna wartość w polu \"Miesiąc nadgodzin\".'@);
            _result.ok:=0
         ?};
         {? exec('isRef_A_OKR','prc_dane',_a_okr) & A_OKR.seek(_a_okr)
         || A_OKRP.index('A_OKPP');
            A_OKRP.prefix(A_OKR.ref(),_p_ref);
            {? A_OKRP.first()
            || {? ~(A_OKRP.OD<=date(_rok,_msc,0) & date(_rok,_msc,1)<=A_OKRP.DO)
               || exec('tab_kom_add','form_ob',1,
                  'Rok i miesiąc nadgodzin muszą zawierać się w zakresie dat wskazanego okresu rozliczeniowego.'@);
                  _result.ok:=0
               ?}
            ||  exec('tab_kom_add','form_ob',1,
                  'Pracownik nie jest przypisany do wybranego okresu rozliczeniowego.'@);
                  _result.ok:=0
            ?}
         ?};

::       dodajemy informacje o wprowadzonych nadgodzinach (tylko dla wniosków z ręcznym wskazaniem nadgodzin)
         _added:='';
         _exists:=0;
         {! _ind_nadg:=1..exec('wn_odb_nadg_lsec','sch_imp')
         |? _result.ok & ~_exists
         |! _nadg:=exec('atr_get','form_ob',_edokum,'ODB_NADG_%1_%2'[$_ind,$_ind_nadg]);
            _oNadg:=spli_str(_nadg,'|');
            {? obj_len(_oNadg)>3
            || _nadg_data:=form(_oNadg[1]);
               _nadg_kod:=form(_oNadg[3]);
               _nadg_godz_odeb:=exec('atr_get','form_ob',_edokum,'ODB_NADG_GODZ_%1_%2'[$_ind,$_ind_nadg]);
               _nadg_godz:=exec('atr_get','form_ob',_edokum,'ODB_NADG_LON_%1_%2'[$_ind,$_ind_nadg]);
               _nadg_odeb:=exec('str2time','#convert',_nadg_godz_odeb);
               _nadg_to_add:='[%1|%2]'[_nadg_data,_nadg_kod];
               _exists:=(_added*_nadg_to_add)>0;
               {? _nadg_odeb>*0 & ~_exists
               || _pars[_ii]+='%1;%2;%3;%4@'[_nadg_data,_nadg_godz,_nadg_godz_odeb,_nadg_kod];
                  _added+=_nadg_to_add;
                  _count+=1;
                  _g_odeb+=_nadg_odeb
               ?};
               {? _count%*_parSize=0 || _ii+=1 ?}
            ?};
            obj_del(_oNadg);
            {? _count>4*_parSize
            || exec('tab_kom_add','form_ob',1,'Zbyt wiele wpisów nadgodzin dla wniosku.'@);
               _result.ok:=0
            ?}
         !};
::       dla wniosku z ręcznym odbiorem sprawdzamy czy nie wprowadzono kilkukrotnie tej samej nadgodziny
         {? _result.ok & _auto='N' & _exists
         || exec('tab_kom_add','form_ob',1,
                  'We wniosku kilkakrotnie wskazano te same nadgodziny do odebrania.'@);
            _result.ok:=0
         ?};
::       dla wniosku z ręcznym odbiorem sprawdzamy czy zgadza się wprowadzona liczba godzin odebranych z wnioskowanymi
         {? _result.ok & _auto='N' & exec('str2time','#convert',_g_wnio)<>_g_odeb
         || exec('tab_kom_add','form_ob',1,
                  'Liczba wnioskowanych godzin odbioru jest różna od liczby wskazanych godzin do odebrania.'@);
            _result.ok:=0
         ?};
::       dla wniosku z automatycznym odbiorem sprawdzamy czy nie wskazano przypadkiem ręcznie nadgodzin
         {? _result.ok & _auto='T' & _g_odeb>*0
         || exec('tab_kom_add','form_ob',3,
                  'Dla wniosku z automatycznym wyborem ręcznie wskazano nadgodziny do odbioru.'@);
            exec('tab_kom_add','form_ob',3,
                  'Wskazane nadgodziny mogą nie zostać uwzględnione na wniosku - '
                  'system sam dobierze nadgodziny do odbioru.'@)
         ?};
         {? _result.ok & (_count | _auto='T')
         || _paczka:='P_REF=%1#OR_REF=%2#TYP=%3#ROK=%4#MSC=%5#DATA=%6#GODZ=%7#AUTO=%8#PK=%9#TRYB=add#WODB_REF=#'
                  'EDOKUM=%10#PAR1=%11#PAR2=%12#PAR3=%13#PAR4=%14#'
            [_p_ref_s,_a_okr,_typ,$_rok,$_msc,_data_s,_g_wnio,_auto,_pk,$_edokum,_pars[1],_pars[2],_pars[3],_pars[4]];

            _RS:=exec('wodb_add','prc_dane',_paczka,0);
            {? _RS.first()
            || {? +_RS.WYNIK & ~(_RS.WYNIK*'OK')
               || _result.errMsg:=_RS.WYNIK;
                  _result.ok:=0;
                  {? TKOM13.first() || {! |? TKOM13.del() !} ?};
::                dzielimy komunikat
                  _errs:=spli_str(_result.errMsg,'\n');
                  {! _ind:=1..obj_len(_errs)
                  |? _errNr:={?  _result.ok=-1 || 3 || 1 ?};
                     exec('tab_kom_add','form_ob',_errNr,_errs[_ind])
                  !}
               || _oWyn:=spli_str(_RS.WYNIK,';');
                  _r_wo:=_oWyn[4];
                  R_WO.cntx_psh();
                  R_WO.index('PORDO');
                  R_WO.prefix();
                  _wyn:={? type_of(ref_tab(_r_wo))>0 & R_WO.seek(_r_wo)
                        || exec('spr_wniosek','prc_rozlicz',,,1)
                        || 'Dodanie wniosku o odbiór nie powiodło się.'@
                        ?};
                  R_WO.cntx_pop();
                  {? +form(_wyn)
                  || _errs:=spli_str(_wyn,'\n');
                     {! _ind:=1..obj_len(_errs)
                     |? _errNr:={?  _result.ok=-1 || 3 || 1 ?};
                        exec('tab_kom_add','form_ob',_errNr,_errs[_ind])
                     !};
                     _result.errMsg:=_wyn;
                     _result.ok:=0
                  ?}
               ?}
            || exec('tab_kom_add','form_ob',1,'Dodanie wniosku o odbiór nie powiodło się.'@);
               _result.ok:=0
            ?}
         |? _result.ok & _count=0 & _auto='N'
         || _result.ok:=0;
            _result.errMsg:='Nie wskazano nadgodzin do odbioru.'@;
            exec('tab_kom_add','form_ob',1,_result.errMsg)
         ?}
      !};
      A_OKR.cntx_pop();
      A_OKRP.cntx_pop();
      obj_del(_pars)
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,'Wniosek o odbiór nadgodzin')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'@
      ?}
   ?};
   {? _walid & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   {? _walid & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\rem_zgl_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła walidująca zgłoszenie remontowe
::       Kontekst wywołania: EDOKUM
::   WY: tabela komunikatów
::----------------------------------------------------------------------------------------------------------------------
exec('tab_kom','form_ob');

_category_ok:=0;

EDOK_ATR.index('REKTAT');
EDOK_ATR.prefix(EDOKUM.ref());
{? EDOK_ATR.first()
|| {!
   |?
::    Nazwy atrybutów - rzecz umowna...
      {? EDOK_ATR.TAT().NA='AwariaZasoKategoria'
      || REM_KATG.index('SYMBOL');
         REM_KATG.prefix();
         {? REM_KATG.first()
         || {!
            |?
               {? EDOK_ATR.WAR=REM_KATG.SYMBOL || _category_ok:=1 ?};
               REM_KATG.next()
            !}
         ?}
      ?};
      EDOK_ATR.next()
   !}
?};

{? _category_ok=0
|| exec('tab_kom_add','form_ob',1,'Podano błędną kategorię zgłoszenia.');
   exec('tab_kom_add','form_ob',1,'Do wyboru dostępne są kategorie:');
   REM_KATG.index('SYMBOL');
   REM_KATG.prefix();
   {? REM_KATG.first()
   || {!
      |? exec('tab_kom_add','form_ob',1,REM_KATG.SYMBOL);
         REM_KATG.next()
      !}
   ?};
   ~~
?};

_result:=TKOM13;
exec('tab_kom_del','form_ob');
_result


\edokumZal_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Funkcja usuwa zalacznik do dokumentu w obiegu
::   WE: _a  - [REFERENCE] - wskazanie na dokument w obiegu (EDOKUM.ref)
::       _b -  [STRING]    - nazwa załącznika
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
_name:={? var_pres('_b')=type_of('')   || _b || return(_result) ?};

EDOKUMZ.cntx_psh();
EDOKUMZ.index('DISP');
EDOKUMZ.prefix(_edokum);
{? EDOKUMZ.first()
|| _dalej:=0;
   {!
   |? {? EDOKUMZ.NAZWA=_name
      || _dalej:=0;
         _result:=EDOKUMZ.del(,1)>0
      ?};
      _dalej & EDOKUMZ.next()
   !}
?};
EDOKUMZ.cntx_pop();
_result


\edokumZal_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Dodaje plik wskazany w nazwie do tabeli EDOKUMZ
::   WE: _a [STRING] - nazwa pliku do dodania. Przyjmujemy, że są to pliki .pdf
::                     UWAGA!!! - wymagane jest ustawienie kontekstu tabeli EDOKUM
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
 _nazwa:={? var_pres('_a')=type_of('')   || _a || return(_result) ?};

EDOKUMZ.cntx_psh();
EDOKUMZ.use('skid_n'+(EDOKUM.name()+2));
EDOKUMZ.prefix();
EDOKUMZ.blank(1);
EDOKUMZ.DATE:=date();
EDOKUMZ.DOKUM:=EDOKUM.ref();
EDOKUMZ.KR_OP:='';
EDOKUMZ.TIME:=time();
EDOKUMZ.USER:=
   {? username()*'~'<=10
   || ((username()*'~')-1)+username()
   || 10+username()
   ?};
EDOKUMZ.EDOK_ZAL:=null;
_path:=pth_dir('.pdf');
_file:=_path+{? sys_name(1)='U_LINUX' || '/' || '\\' ?}+_nazwa;
{? fexists(_file)=1 & EDOKUMZ.add()
|| EDOKUMZ.bl_put('EDOKUM',_file,,,_nazwa);
   EDOKUMZ.NAZWA:=EDOKUMZ.bl_info('EDOKUM','NAME');
   _result:=EDOKUMZ.put()
?};
EDOKUMZ.cntx_pop();
_result


\akcept_czw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.14]
:: OPIS: Formuła na akceptację wniosków o czas wolny (wyjście prywatne)
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja=1
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

exec('tab_kom', 'form_ob');
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || exec('__HARM','object');
      exec('__KAL','object');
      exec('MASK','object');
      _tab:=tab_tmp(2,
         'ODP_DATA','STRING[10]','Data',
         'ODP_G_L','STRING[8]','Liczba godzin');

      _result.ok:=1;
      _rej:=exec('rodz_biez_etap','obiegi')='W';

::    pobranie informacji z wniosku
      _p_ref_s:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL');
      _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null);
      _data_s:=exec('atr_get','form_ob',_edokum,'CZW_DATA');
      _g_od_s:=exec('atr_get','form_ob',_edokum,'CZW_GODZ_OD');
      _g_do_s:=exec('atr_get','form_ob',_edokum,'CZW_GODZ_DO');

::    sprawdzenie wprowadzonych danych
      {? _p_ref=null()
      || exec('tab_kom_add','form_ob',1,'Nie udało się znaleźć wskazanego pracownika'@);
         _result.ok:=0
      ?};

      {! _ind:=1..exec('wn_czw_lsec','sch_imp')
      |? _result.ok
      |! _tab.ODP_DATA:=exec('atr_get','form_ob',_edokum,'CZW_ODP_DATA_'+$_ind);
         _tab.ODP_G_L:=exec('atr_get','form_ob',_edokum,'CZW_ODP_GODZ_'+$_ind);

         _tab.add()
      !};

::    sprawdzenie czy dodano cokolwiek do wniosku
      {? _result.ok & _tab.size()=0
      || {? _walid
         || exec('tab_kom_add','form_ob',1,'Nie podano godzin odpracowania dla wniosku.'@);
            _result.ok:=0
         ?}
      ?};

::    sprawdzenie czy liczba odbirów nie przekracza maksymalnej liczby możliwej do przekazania w paczce:
::    w jednym parze mieszą się 44 odpracowania (a "pary" są cztery)
      _parSize:=44;
      {? _tab.size()>4*_parSize
      || exec('tab_kom_add','form_ob',1,'Zbyt wiele wpisów godzin odpracowania dla wniosku.'@);
         _result.ok:=0
      ?};

::    tworzymy paczkę dla formuły dodającej wniosek o czas wolny do bazy
      {? _result.ok
      || _pars:=obj_new(4);
         _pars[1]:=_pars[2]:=_pars[3]:=_pars[4]:='';
::       w jednym parze mieszą się 44 odpracowania
         _ii:=1;
         _count:=0;
         _tab.first();
         {!
         |? {? _tab.ODP_DATA<>'0000/00/00'
            || _count+=1;
               _pars[_ii]+='%1;%2;00:00@'[_tab.ODP_DATA,_tab.ODP_G_L];
               {? _count%*_parSize=0 || _ii+=1 ?}
            ?};

            _tab.next()
         !};

         _paczka:='P_REF=%1#DATA=%2#TRYB=add#R_ODN_REF=#GODZ_OD=%3#GODZ_DO=%4#EDOKUM=%5#'
                  'PAR1=%6#PAR2=%7#PAR3=%8#PAR4=%9#'
            [_p_ref_s,_data_s,_g_od_s,_g_do_s,$_edokum,_pars[1],_pars[2],_pars[3],_pars[4]];
         obj_del(_pars);

         _RS:=exec('r_odn_add','prc_dane',_paczka,0);
         {? _RS.first()
         || {? +_RS.WYNIK & ~(_RS.WYNIK*'OK')
            || _result.errMsg:=_RS.WYNIK;
               _result.ok:=0
            ?}
         || _result.ok:=0
         ?};

::       obsługa błędów
         {? _result.ok<=0
         || {? _result.errMsg=''
            || _result.errMsg:='Nie udało się poprawnie zapisać wniosku do bazy danych.'@
            ?};
            {? TKOM13.first() || {! |? TKOM13.del() !} ?};
::          dzielimy komunikat
            _errs:=spli_str(_result.errMsg,'\n');
            {! _ind:=1..obj_len(_errs)
            |? _errNr:={?  _result.ok=-1 || 3 || 1 ?};
               exec('tab_kom_add','form_ob',_errNr,_errs[_ind])
            !}
         ?}
      ?}
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,'Wniosek o czas wolny')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'@
      ?}
   ?};
   {? _walid & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   {? _walid & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\ustaw_czw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.14]
:: OPIS: Formuly po edycji dla wniosku o czas wolny
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::       _b [STRING]    - identyfikator
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || return(~~) ?};
    _id:={? var_pres('_b')=type_of('')   || _b || return(~~) ?};
   _par:={? var_pres('_c')=type_of('')   || _c || ''         ?};

{? _id='ET_PRAC'
|| 1

|? _id='GODZ'
:: po modyfikacji godzin przelicz wniosek
|| _g_od:=exec('str2time','#convert',exec('atr_get','form_ob',_edokum,'CZW_GODZ_OD'));
   _g_do:=exec('str2time','#convert',exec('atr_get','form_ob',_edokum,'CZW_GODZ_DO'));
   _czas:=_g_do-_g_od;
   {? _g_od>_g_do || _czas+=time(24,0,0) ?};
   exec('put_atr','form_ob',_edokum,'CZW_CZAS',_czas$3)

|? _id='L_GODZ'
|| 1
?}


\akcept_ppsf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Formuła na akceptację wniosków o pracę poza siedzibą firmy
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja=1
::       _d - [STRING]    - symbol wniosku
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
_symbol:={? var_pres('_d')=type_of('')   || _d || ''              ?};

exec('tab_kom', 'form_ob');
exec('JCQ_decl','#message');

{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _result.ok:=1;
      _rej:=exec('rodz_biez_etap','obiegi')='W';

::    pobranie informacji z wniosku
      _p_ref_s:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL');
      _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null);
      _typ:=exec('atr_get','form_ob',_edokum,'PPSF_TYP','REF_SQL');
      _od:=exec('str2date','#convert',exec('atr_get','form_ob',_edokum,'PPSF_OD'));
      _do:=exec('str2date','#convert',exec('atr_get','form_ob',_edokum,'PPSF_DO'));
      _partday:=1+(exec('atr_get','form_ob',_edokum,'PPSF_PARTDAY'));
      _godz:=exec('str2time','#convert',exec('atr_get','form_ob',_edokum,'PPSF_G'));
      _koment:=exec('atr_get','form_ob',_edokum,'PPSF_KOMENT');
      _oswAkc:=1+(exec('atr_get','form_ob',_edokum,'PPSF_AKC'));
      _kk:=exec('atr_get','form_ob',_edokum,'PPSF_KK','REF_SQL');
      _ppsft:=_sloKod:=null();
      _opis:=_oswWym:=_oswTxt:='';

::    sprawdzenie wprowadzonych danych
::    typ:
      PPSFT.cntx_psh();
      {? ~PPSFT.seek(_typ,,1)
      || _result.errMsg:='Nie udało się znaleźć wskazanego typu pracy'@;
         exec('tab_kom_add','form_ob',1,_result.errMsg);
         _result.ok:=0
      || _ppsft:=PPSFT.ref();
         _sloKod:=PPSFT.SLO_KOD;
         _opis:=PPSFT.OPIS;
         _oswWym:=PPSFT.OSW_WYM;
         _oswTxt:=PPSFT.memo_txt(,1,'OSW_TRE')
      ?};
      PPSFT.cntx_pop();
::    pracownik:
      {? _result.ok & _p_ref=null()
      || _result.errMsg:='Nie udało się znaleźć wskazanego pracownika'@;
         exec('tab_kom_add','form_ob',1,_result.errMsg);
         _result.ok:=0
      ?};
::    daty:
      {? _walid & _result.ok
      || _d0:=date(0,0,0);
         {? _od=_d0
         || exec('tab_kom_add','form_ob',1,'Nie wypełniona data od.'@);
            _result.ok:=0
         |? _do=_d0
         || exec('tab_kom_add','form_ob',1,'Nie wypełniona data do.'@);
            _result.ok:=0
         |? _do<_od
         || exec('tab_kom_add','form_ob',1,'Data do nie może być mniejsza od daty od.'@);
            _result.ok:=0
         |? _do~1<>_od~1
         || exec('tab_kom_add','form_ob',1,'Data do nie może być w innym roku niż data od.'@);
            _result.ok:=0
         ?}
      ?};
::    część dnia:
      {? _walid &_result.ok & _godz<>time(0,0,0) & _partday<>'T'
      || exec('tab_kom_add','form_ob',1,'Liczba godzin może być wypełniona jedynie przy pracy na część dnia.'@);
         _result.ok:=0
      ?};
::    Limity:
      {? _result.ok
      || _lim:=exec('limit_spr','ppsf',_od,_do,_p_ref,_sloKod,_godz,,1);
         {? _lim.ok=0
         || _blad:=exec('limit_kom','ppsf',_lim,1);
            _result.errMsg:='%1 - %2'[_opis,_blad];
            exec('tab_kom_add','form_ob',1,_result.errMsg);
            _result.ok:=0
         ?};
         obj_del(_lim)
      ?};
::    Kontrola pokrywania się dat
      {? _result.ok & _partday='N'
      || PPSFN.cntx_psh();
         PPSFN.OD:=_od;
         PPSFN.DO:=_do;
         _ret:=exec('check','overlap',null(),PPSFN,'OD','DO',2,,,'DATA',exec('firma','ustawienia'),_p_ref);
         PPSFN.cntx_pop();
         {? type_of(_ret)=type_of('') & _ret<>''
         || _result.errMsg:=gsub(_ret,'\n',' ');
            exec('tab_kom_add','form_ob',1,_result.errMsg);
            _result.ok:=0
         ?}
      ?};
::    Akceptacja oświadczenia:
      {? _result.ok & _symbol<>'P' & _oswWym='T' & _oswAkc<>'T'
      || exec('tab_kom_add','form_ob',1,'Dla typu "%1" wymagana jest akceptacja oświadczenia.'@[_opis]);
         _result.ok:=0
      ?};
::    tworzymy wpis do kartoteki i wklejamy oświadczenie do EDOKOS (jeśli trzeba):
      {? _result.ok
      || KK.cntx_psh();
         KK.prefix();
         {? ~KK.seek(_kk)
         || _kk:=null()
         || _kk:=KK.ref()
         ?};
         KK.cntx_pop();
         PPSFN.cntx_psh();
         PPSFN.prefix();
         PPSFN.blank();
         PPSFN.P:=_p_ref;
         PPSFN.PPSFT:=_ppsft;
         PPSFN.D:=date();
         PPSFN.OD:=_od;
         PPSFN.DO:=_do;
         PPSFN.G:=_godz;
         PPSFN.PARTDAY:=_partday;
         PPSFN.AZ:='W';
         PPSFN.KOMENT:=_koment;
         PPSFN.OSW_AKC:={? _symbol='P' || _oswWym || _oswAkc ?};
         PPSFN.KK:=_kk;
         PPSFN.EDOKUM:=EDOKUM.ref();
         PPSFN.ORIGIN:=_symbol;
         {? _symbol='P'
         || P.cntx_psh();
            PPSFN.KTO_WER:=PPSFN.P().OSOBA;
            P.cntx_pop()
         || PPSFN.KTO_WER:=_osoba
         ?};
         {? ~PPSFN.add()
         || _result.errMsg:='Nie udało się dodać wpisu do kartoteki.'@;
            _result.ok:=0
         ?};
         PPSFN.cntx_pop()
      ?}
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,'Wniosek o pracę poza siedzibą firmy')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'@
      ?}
   ?};
   {? _result.ok=0 & _result.errMsg=''
   || _result.errMsg:='Błąd podczas dodawania wpisu do kartoteki.'@
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid);
:: Wpisanie oświadczenia do uwag:
   {? _result.ok & _symbol='P' & _walid
   || {? _oswWym='T'
      || _oswTxt:='%1\n\n%2'[_oswTxt, 'Akcept. wniosku oznacza akcept. powyższego oświadcz.'@]
      ?};
      EDOKOS.cntx_psh();
      EDOKOS.index('SZUK8'); EDOKOS.prefix(EDOKUM.ref(),'A','N');
      {? EDOKOS.first()
      || EDOKOS.memo_set(_oswTxt,'UW_DL');
         EDOKOS.memo_put()
      ?};
      EDOKOS.cntx_pop()
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\ustaw_ppsf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Formuly po edycji dla wniosku o pracę poza siedzibą firmy
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::       _b [STRING]    - identyfikator
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || return(~~) ?};
    _id:={? var_pres('_b')=type_of('')   || _b || return(~~) ?};
   _par:={? var_pres('_c')=type_of('')   || _c || ''         ?};

{? _id='PPSF_DO' | _id='PPSF_OD'
|| _od:=exec('str2date','#convert',exec('atr_get','form_ob',_edokum,'PPSF_OD'));
   _do:=exec('str2date','#convert',exec('atr_get','form_ob',_edokum,'PPSF_DO'));
   exec('put_atr','form_ob',_edokum,'PPSF_DK',$(_do-_od+1));
   {? _od<=_do & _od<>date(0,0,0) & _do<>date(0,0,0)
   || _dr:=0;
      _p_ref_s:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL');
      P.cntx_psh();
      P.use('pracowni');
      P.index('OSOBA');
      P.prefix();
      {? P.seek(_p_ref_s)
      || KAL_DEF.cntx_psh();
         exec('open_prc','open_tab');
         exec('__KAL','object');
         KAL_DEF.index('KAL_DEF');
         {? P.KAL
         || __KAL.set_cal(P.KAL,_od~1)
         || __KAL.set_cal('standard',_od~1)
         ?};
         _dr:=__KAL.w_days(_od,_do);
         KAL_DEF.cntx_pop()
      ?};
      P.cntx_pop();
      exec('put_atr','form_ob',_edokum,'PPSF_DR',$_dr)
   ?}

|? _id='PPSF_TYP'
|| _typ:=exec('atr_get','form_ob',_edokum,'PPSF_TYP','REF_SQL');
   _tre:=_partday:='';
   PPSFT.cntx_psh();
   PPSFT.prefix();
   {? PPSFT.seek(_typ,,1)
   || _tre:=PPSFT.memo_txt(,1,'OSW_TRE');
      _partday:=PPSFT.PARTDAY
   ?};
   PPSFT.cntx_pop();
   _dl:=exec('osw_max_ln','ppsf');
   STR.split(_tre);
   exec('put_atr','form_ob',_edokum,'PPSF_OSW',STR.line(_dl),'WAR');
   exec('put_atr','form_ob',_edokum,'PPSF_OSW1',STR.line(_dl),'WAR');
   exec('put_atr','form_ob',_edokum,'PPSF_OSW2',STR.line(_dl),'WAR');

   exec('put_atr','form_ob',_edokum,'PPSF_PARTDAY',_partday)
?};

1


\wn_date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Ustala datę wniosku z HR Portal na podstawie uidref() rekordu.
::   WE: _a [STRING] - EDOKUM.uidref
::   WY: Data wywnioskowana na podstawie uidref lub bieżąca data
::----------------------------------------------------------------------------------------------------------------------
_uid:={? var_pres('_a')=type_of('') & +_a || _a || '' ?};
_date:=date();

{? +_uid
|| _tabD:=spli_str(10+(1-_uid),'/');
   _date:=date(#_tabD[1],#_tabD[2],#_tabD[3])
?};
_date


\tab_kom_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Zapisuje stan tabeli TKOM13 przed zakończeniem transakcji.
::   WE: [_a] [INTEGER] - czy w trakcie walidacji wniosku (1 - tak, 0 - nie)
::   WY: Tablica zawierająca utworzony zapis lub ~~ w przypadku gdy nie odnaleziono tabeli TKOM13
::       lub nie jest to etap walidacji wniosku
::----------------------------------------------------------------------------------------------------------------------
_walid:=(var_pres('_a')=type_of(0) & _a);
{? _walid & var_pres('TKOM13')>0 & TKOM13.first()
|| _kom:=obj_new(TKOM13.size());
   {! _licz:=1..obj_len(_kom) |?
      _kom[_licz]:=obj_new(2);
      _kom[_licz][1]:=TKOM13[1];
      _kom[_licz][2]:=TKOM13[2];
      TKOM13.next()
   !};
   return(_kom)
?};
~~


\tab_kom_restore
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Odtwarza TKOM13 po zakończeniu/zerwaniu transakcji z zapisanego stanu tej tabeli podawanego w argumencie.
::   WE:  _a  [TAB]     - tablica przechowująca zapisany stan tabeli TKOM13
::       [_b] [INTEGER] - czy w trakcie walidacji wniosku (1 - tak, 0 - nie)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_savedKom:={? var_pres('_a')>100 || _a || return() ?};
_walid:=(var_pres('_b')=type_of(0) & _b);

{? _walid
|| {! _licz:=1..obj_len(_savedKom) |?
      exec('tab_kom_add','form_ob',_savedKom[_licz][1],_savedKom[_licz][2])
   !}
?};
~~


\osoba_woz_abs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Wypełnia pola tabeli OSOBA na podstawie danych z wniosku o zatrudnienie.
::   WE: _a  [REFERENCE] - wskazanie na dokument w obiegu
::      [_b] [DICT]      - obiekt buforowy tabeli OSOBA
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=7   || _a || return() ?};
 _osoba:={? var_pres('_b')=117 || _b || return() ?};

EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.index('ID'); EDOKUM.clear();
{? EDOKUM.seek(_edokum)
|| EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _osoba.PIERWSZE:=exec('atr_get','portal_walidacja','Imie');
      _osoba.NAZWISKO:=exec('atr_get','portal_walidacja','Nazwisko');
      _osoba.PLEC:={? -(_osoba.PIERWSZE+1)='a' || 'K' || 'M' ?}
   ?};
   EDOK_ATR.cntx_pop()
?};
EDOKUM.cntx_pop();
_osoba


\prac_h_hum_h_woz_abs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Wypełnia pola tabeli P, H_UM, H na podstawie danych z wniosku o zatrudnienie.
::   WE: _a  [REFERENCE] - wskazanie na dokument w obiegu
::      [_b] [DICT]      - obiekt buforowy tabeli P
::      [_c] [DICT]      - obiekt buforowy tabeli H_UM
::      [_d] [DICT]      - obiekt buforowy tabeli H
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=7   || _a || return() ?};
     _P:={? var_pres('_b')=117 || _b || return() ?};
  _H_UM:={? var_pres('_c')=117 || _c || return() ?};
     _H:={? var_pres('_d')=117 || _d || return() ?};

EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.index('ID'); EDOKUM.clear();
{? EDOKUM.seek(_edokum)
|| EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   ||
      _data_s        :=exec('atr_get','portal_walidacja','DataZatrudnienia');
      _podpis        :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _umowaTyp      :=exec('atr_get','portal_walidacja','UmowaTypNazwa');
      _miejsce       :=exec('atr_get','portal_walidacja','MiejscePracyNazwa');
      _data_s        :=exec('atr_get','portal_walidacja','UmowaOd');
      _data_od       :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _data_s        :=exec('atr_get','portal_walidacja','UmowaDo');
      _data_do       :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _LpDzial       :=exec('atr_get','portal_walidacja','LpDzial');
      _wydzial       :={? +_LpDzial || _LpDzial || exec('atr_get','portal_walidacja','DzialNazwa') ?};
      _stanowisko    :=exec('atr_get','portal_walidacja','StanowiskoNazwa');
      _pozycja       :=exec('atr_get','portal_walidacja','PozycjaWOrg');
      _charPrac      :=exec('atr_get','portal_walidacja','CharakterPracy');
      _licznik       :=exec('atr_get','portal_walidacja','EtatL');
      _mianownik     :=exec('atr_get','portal_walidacja','EtatM');
      _s1            :=exec('atr_get','portal_walidacja','Wynagrodzenie');
      _s2            :=exec('atr_get','portal_walidacja','DodatekFunkcyjny');
      _s3            :=exec('atr_get','portal_walidacja','Dodatek');
      _tekst         :=exec('atr_get','portal_walidacja','InformacjeDodatkowe','WAR_W');
      _benefity      :=exec('atr_get','portal_walidacja','Benefity');
      {? +_benefity
      || _tekst+='\nInne benefity:\n%1'[_benefity]
      ?};

      _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
      _ud_typ:=exec('FindInSet','#table','UD_TYP','SYMBOL','PODZORG',,,1,,null());
      {? +_LpDzial
      || _ud_skl:=exec('FindInSet','#table','UD_SKL','SYMBOL',_wydzial,_ud_typ,,1,_wydzial,null())
      || _ud_skl:=exec('FindInSet','#table','UD_SKL','OPIS',_wydzial,_ud_typ,,1,,null())
      ?};
      _stn:=exec('FindInSet','#table','STN','STANONAZ',_stanowisko,,,1,,null());
      _pozworg:=exec('FindInSet','#table','POZWORG','KOD',_pozycja,_firma,,1,,null());
      _cp:=exec('FindInSet','#table','CP','CHARPRAW',_charPrac,,,1,,null());

      _par313:=exec('get_par','#parametr',313,2)='T';
      STO.cntx_psh();
      STO.index('UNIQUE');
      STO.prefix();
      {? _ud_skl & _stn & ~STO.find_key(_ud_skl,_stn)
      || STO.UD_SKL:=_ud_skl;
         STO.STN:=_stn;
         STO.ST:=STO.STN().ST;
         {? STO.add(1) & _par313 & _pozworg
         || PSTO.cntx_psh();
            PSTO.index('PSTO');
            PSTO.blank(1);
            PSTO.POZWORG:=_pozworg;
            PSTO.STO:=STO.ref();
            PSTO.add(1);
            PSTO.cntx_pop()
         ?}
      ?};
      STO.cntx_pop();

::    wypełnienie bufora tabeli P
      _P.WYDZIAL:=_ud_skl;
      _P.ST:=_stn;
      _P.DZA:=_data_od;

::    wypełnienie bufora tabeli H_UM
      _typ:=exec('slo_typ','ext_slo','UMPRAC');
      _ru:=exec('FindInSet','#table','RU','O',_umowaTyp,_typ,,1,,null());
      _H_UM.RU:=_ru;
      _H_UM.OD:=_data_od;
      _H_UM.DO:=_data_do;
::    wypełnienie bufora tabeli H
      _H.WYDZIAL:=_ud_skl;
      _H.ST:=_stn;
      _H.CP:=_cp;
      _H.WYM:=#_mianownik;
      _H.WYL:=#_licznik;
      _H.WY:={? _H.WYM || (_H.WYL/_H.WYM)$3 || 0 ?};
      _H.RWY:=_H.WY;
      _H.RWYL:=_H.WYL;
      _H.RWYM:=_H.WYM;
      _H.PODPIS:=_podpis;
      _H.PRZYG:=_podpis;
      _H.OD:=_H_UM.OD;
      _H.DO:=_H_UM.DO;
      _H.KZ:=exec('h_kz_bl','pracownik');
      _H.MIEJSCE:=_miejsce;
      _H.POZWORG:=_pozworg;
      _H.S1:=#gsub(_s1,',','.');
      _H.S2:=#gsub(_s2,',','.');
      _H.S3:=#gsub(_s3,',','.');
      _H.RU:=_H_UM.RU;
      _H.INNE:=_tekst
   ?};
   EDOK_ATR.cntx_pop()
?};
EDOKUM.cntx_pop();
~~


\wn_time
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Ustala czas wniosku ze wspólnego portalu ABS na podstawie uidref() rekordu.
::   WE: _a [STRING] - EDOKUM.uidref
::   WY: Czas wywnioskowany na podstawie uidref lub bieżąca godzina
::----------------------------------------------------------------------------------------------------------------------
_uid:={? var_pres('_a')=type_of('') & +_a || _a || '' ?};
_time:=time();

{? +_uid
|| _tabT:=spli_str(7+(12-_uid),':');
   _time:=time(#_tabT[1],#_tabT[2],#_tabT[3])
?};
_time


\pracownik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Formuła na wybór użytkowników
::       Zwraca tabelę z rekordem pracownika, którego dotyczy wniosek - formula do wykorzystania w obiegach
::   WE: [_a] [_EDOKUM] - wskazanie EDOKUM (lub domyślnie EDOKUM.ref())
::   WY: _TAB [TABLE] - tabela tyczasowa z użytkownikiem właściwym dla pracownika, którego dotyczy wniosek
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null()) || _a || EDOKUM.ref() ?};
_TAB:=tab_tmp(1,'REF_US','INTEGER','Ref użytkownika'@,
                'KOD_US','STRING[10]','Kod użytkownika'@
             );
_p_ref_s:='';

EDOKUM.cntx_psh();
EDOKUM.index('ID');
EDOKUM.clear();
{? EDOKUM.seek(_edokum,ref_name(_edokum)) & exec('open_edk_atr','obiegi',_edokum)
|| {? EDOKUM.PAPERLES
   || _p_ref_s:=EDOKUM.REFPRAC
   || _p_ref_s:=exec('atr_get','form_ob',_edokum,'ET_PRAC','REF_SQL')
   ?}
?};
EDOKUM.cntx_pop();
{? +_p_ref_s
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,'@.P.OSOBA().ref',null);
   OSOBA.cntx_pop();
   USERS.cntx_psh();
   USERS.index('OSOBA');
   USERS.prefix(_p_ref);
   {? USERS.first()
   || {!
      |? _TAB.REF_US:=#USERS.ref();
         _TAB.KOD_US:=USERS.KOD;
         {? ~_TAB.find_rec() || _TAB.add() ?};

         USERS.next()
      !}
   ?};
   USERS.cntx_pop()
?};

_TAB


\odrzuc_ppsf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.37]
:: OPIS: Formuła walidacyjna na odrzucenie Polecania pracy poza siedzibą firmy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Wyczyszczenie uwag w EDOKOS:
EDOKOS.cntx_psh();
EDOKOS.index('SZUK8'); EDOKOS.prefix(EDOKUM.ref(),'A','N');
{? EDOKOS.first()
|| EDOKOS.memo_set('','UW_DL');
   EDOKOS.memo_put()
?};
EDOKOS.cntx_pop()


\osoba_akcept_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [22.26]
:: OPIS: Zapamiętuje osobę akceptującą wniosek
::       UWAGA! Musi być ustawiony kontekst tabeli EDOKUM
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: w pierwszym kroku odczytujemy to co już mamy w parametrach
_params:=json_parse(EDOKUM.memo_txt(0,1,'PARAMS'));
:: czy odczytane parametry są tablicą elementów?
_params_is_ntab:=obj_ntab(_params);

{? _params_is_ntab
|| {? var_pres('OsobaAkcept',_params)<0
::    nie ma w obiekcie pola OsobaAkcept więc go dodajemy do _par
   || _par:=exec('obj_ntab_set','#array',_params
::        Osoba akceptująca
         ,'OsobaAkcept',null()
      )
::    wszystko jest ok - podpinamy odczytaną tablicę pod zmienną _par
   || _par:=_params
   ?}
:: nie było tablicy w memo więc tworzymy od zera
|| _par:=exec('obj_ntab_set','#array',
::      Osoba akceptująca
      ,'OsobaAkcept',null()
   )
?};

_edokum:=EDOKUM.ref();
_okres:=EDOKUM.name()+2;
EDOKOS.cntx_psh();
{? EDOKOS.name()+2<>_okres
|| EDOKOS.use((EDOKOS.name(1)-2)+_okres)
?};
EDOKOS.index('SZUK11');
EDOKOS.prefix(_edokum,'T');
{? EDOKOS.last()
|| USERS.cntx_psh();
   OSOBA.cntx_psh();
   _par.OsobaAkcept:=EDOKOS.USERS().OSOBA;
   _par_ext:=json_obj(_par);
   EDOKUM.memo_set(_par_ext,'PARAMS');
   EDOKUM.memo_put(,'PARAMS');
   OSOBA.cntx_pop();
   USERS.cntx_pop()
?};
EDOKOS.cntx_pop();
~~


\osoba_akcept_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [22.26]
:: OPIS: Odczytuje osobę akceptującą wniosek zapamiętaną w polu EDOKUM.PARAMS
::       UWAGA! Musi być ustawiony kontekst tabeli EDOKUM
::   WE:
::   WY: null / ref osoby
::----------------------------------------------------------------------------------------------------------------------
_osoba:=null();
:: w pierwszym kroku odczytujemy to co już mamy w parametrach
_params:=json_parse(EDOKUM.memo_txt(0,1,'PARAMS'));
:: czy odczytane parametry są tablicą elementów?
_params_is_ntab:=obj_ntab(_params);

{? _params_is_ntab & var_pres('OsobaAkcept',_params)>0
|| _osoba:=exec('FindAndGet','#table',OSOBA,_params.OsobaAkcept,,,null())
?};
_osoba


\ustaw_pzd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Formuly po edycji dla wniosków dot. pracy zdalnej
::   WE: [_a] [STRING] - zestaw
::       [_b] [STRING] - identyfikator
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nazwa:={? var_pres('_a')=type_of('') || _a || '' ?};
 _pole:={? var_pres('_b')=type_of('') || _b || '' ?};
_edokum:=EDOKUM.ref();

_firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
EDOK_ATR.cntx_psh();
{? exec('open_edk_atr','obiegi',_edokum)
|| {? _nazwa=exec('nazwa_oopz','obiegi')
   || {? _pole='OOPZ_TYP'
      || _tak:='T';
         _nie:='N';
         _ppsf_no:=exec('atr_get','form_ob',_edokum,'OOPZ_TYP','REF_SQL');
         PPSF_NO.cntx_psh();
         PPSF_NO.index('KOD');
         PPSF_NO.prefix();
         {? PPSF_NO.seek(_ppsf_no,)
         || {! _ind:=1 .. exec('wn_oopz_lsec','sch_imp')
            |! _tresc:=($('{? var_pres(\'TR%1\',PPSF_NO)>0 || PPSF_NO.TR%1 || \'\' ?}'[$_ind]))();
               _wym:=($('{? var_pres(\'W%1\',PPSF_NO)>0 || PPSF_NO.W%1 || \'N\' ?}'[$_ind]))();
               _wym:={? _wym='T' || _tak || _nie ?};
               {? form(_tresc)='' || _wym:=_nie ?};
               exec('put_atr','form_ob',_edokum,'OOPZ_TRESC_'+$_ind,_tresc);
               exec('put_atr','form_ob',_edokum,'OOPZ_WYM_'+$_ind,_wym);
               exec('put_atr','form_ob',_edokum,'OOPZ_AKC_'+$_ind,_nie)
            !}
         || {! _ind:=1 .. exec('wn_oopz_lsec','sch_imp')
            |! _tresc:='';
               exec('put_atr','form_ob',_edokum,'OOPZ_TRESC_'+$_ind,_tresc);
               exec('put_atr','form_ob',_edokum,'OOPZ_WYM_'+$_ind,_nie);
               exec('put_atr','form_ob',_edokum,'OOPZ_AKC_'+$_ind,_nie)
            !}
         ?};
         PPSF_NO.cntx_pop()
      ?}
   |? _nazwa=exec('nazwa_wpzds','obiegi') | _nazwa=exec('nazwa_wpzdo','obiegi')
   || {? _pole='WPZDS_ADRES_PRAC' | _pole='WPZDO_ADRES_PRAC'
      || _prefix:=5+_pole;
         _adr_ref:=exec('atr_get','form_ob',_edokum,'%1_ADRES_PRAC'[_prefix],'REF_SQL');
::       najpierw czyścimy wszystko
         exec('put_atr','form_ob',_edokum,'%1_KRAJ'[_prefix],'','WAR');
         exec('put_atr','form_ob',_edokum,'%1_KRAJ'[_prefix],'','REF_SQL');
         exec('put_atr','form_ob',_edokum,'%1_WOJEWODZ'[_prefix],'','WAR');
         exec('put_atr','form_ob',_edokum,'%1_WOJEWODZ'[_prefix],'','REF_SQL');
         exec('put_atr','form_ob',_edokum,'%1_POWIAT'[_prefix],'');
         exec('put_atr','form_ob',_edokum,'%1_GMINA'[_prefix],'');
         exec('put_atr','form_ob',_edokum,'%1_KOD'[_prefix],'');
         exec('put_atr','form_ob',_edokum,'%1_POCZTA'[_prefix],'');
         exec('put_atr','form_ob',_edokum,'%1_MIASTO'[_prefix],'');
         exec('put_atr','form_ob',_edokum,'%1_ULICA'[_prefix],'');
         exec('put_atr','form_ob',_edokum,'%1_DOM'[_prefix],'');
         exec('put_atr','form_ob',_edokum,'%1_LOKAL'[_prefix],'');
         OS_ADRES.cntx_psh();
         OS_ADRES.index('OD');
         OS_ADRES.prefix();
         {? OS_ADRES.seek(_adr_ref,)
         || exec('put_atr','form_ob',_edokum,'%1_KRAJ'[_prefix],$OS_ADRES.KRAJ,'REF_SQL');
            exec('put_atr','form_ob',_edokum,'%1_KRAJ'[_prefix],OS_ADRES.KRAJ().NAZ);
            exec('put_atr','form_ob',_edokum,'%1_WOJEWODZ'[_prefix],OS_ADRES.WOJEWODZ);
            exec('put_atr','form_ob',_edokum,'%1_POWIAT'[_prefix],OS_ADRES.POWIAT);
            exec('put_atr','form_ob',_edokum,'%1_GMINA'[_prefix],OS_ADRES.GMINA);
            exec('put_atr','form_ob',_edokum,'%1_KOD'[_prefix],OS_ADRES.KOD);
            exec('put_atr','form_ob',_edokum,'%1_POCZTA'[_prefix],OS_ADRES.POCZTA);
            exec('put_atr','form_ob',_edokum,'%1_MIASTO'[_prefix],OS_ADRES.MIASTO);
            exec('put_atr','form_ob',_edokum,'%1_ULICA'[_prefix],OS_ADRES.ULICA);
            exec('put_atr','form_ob',_edokum,'%1_DOM'[_prefix],OS_ADRES.DOM);
            exec('put_atr','form_ob',_edokum,'%1_LOKAL'[_prefix],OS_ADRES.LOKAL)
         ?};
         OS_ADRES.cntx_pop()
      |? _pole='WPZDS_PRAC' | _pole='WPZDO_PRAC'
      || _prefix:=5+_pole;
         _p_ref:=exec('atr_get','form_ob',_edokum,'%1_PRAC'[_prefix],'REF_SQL');
         _text:={? +_p_ref
                || 'Oświadczam, że na stanowisku pracy zdalnej w poniżej wskazanym miejscu są zapewnione '+
                   'bezpieczne i higieniczne warunki wykonywania tej pracy.'
                || ''
                ?};
         exec('put_atr','form_ob',_edokum,'%1_OSWIADCZENIE'[_prefix],_text);
::       odświeżamy wartość pól dni kalendarzowe i robocze
         {? _pole='WPZDO_PRAC'
         || exec('ustaw_pzd','form_ob',exec('nazwa_wpzdo','obiegi'),'WPZDO_DATA_OD')
         ?}
      |? _pole='WPZDO_TYP_PRACY'
      || _typ_pracy:=exec('atr_get','form_ob',_edokum,'WPZDO_TYP_PRACY','REF_SQL');
         _partday:=exec('FindAndGet','#table',PPSFT,_typ_pracy,,"PARTDAY",'');
         exec('put_atr','form_ob',_edokum,'WPZDO_PARTDAY',_partday)
      |? 10+_pole='WPZDO_DATA'
      || _data_od:=exec('to_ti_dt','form_ob',exec('atr_get','form_ob',_edokum,'WPZDO_DATA_OD'),'D');
         _data_do:=exec('to_ti_dt','form_ob',exec('atr_get','form_ob',_edokum,'WPZDO_DATA_DO'),'D');
         _p_ref:=exec('atr_get','form_ob',_edokum,'WPZDO_PRAC','REF_SQL');
         _p_ref:=exec('FindAndGet','#table',P,_p_ref,,,null());
         {? _p_ref & _data_od<>#0 & _data_do<>#0
         || _kal:=exec('FindAndGet','#table',P,_p_ref,,"KAL",null());
            exec('open_prc','open_tab');
            exec('initObj','form_ob');
            _dk:={? _data_od<=_data_do || _data_do-_data_od+1 || 0 ?};
            _dr:={? _data_od<=_data_do & _p_ref<>null()
                 || {? _kal<>null()
                    || __KAL.set_cal(_kal,_data_od~1)
                    || __KAL.set_cal('standard',_data_od~1)
                    ?};
                    __KAL.w_days(_data_od,_data_do)
                 || 0
                 ?};
            exec('put_atr','form_ob',_edokum,'WPZDO_DK',$_dk);
            exec('put_atr','form_ob',_edokum,'WPZDO_DR',$_dr)
         ?}
      |? _nazwa=exec('nazwa_wpzds','obiegi') & (_pole='WPZDS_ORGAN' | _pole='WPZDS_SP_ROZL' | _pole='WPZDS_DRUKUJ_UM')
      || _rej:=exec('rodz_biez_etap','obiegi');
::       w przypadku wypełnienia pól w sekcji "Wypełnia dział kadr" na etapie rejestracji ustawiamy im wartości domyślne
         {? _rej='W' | _rej=''
         || exec('put_atr','form_ob',_edokum,'WPZDS_ORGAN','');
            exec('put_atr','form_ob',_edokum,'WPZDS_SP_ROZL','');
            exec('put_atr','form_ob',_edokum,'WPZDS_SP_ROZL','','REF_SQL');
            exec('put_atr','form_ob',_edokum,'WPZDS_DRUKUJ_UM','N')
         ?}
      ?}
   ?}
?};
EDOK_ATR.cntx_pop()


\slownik_pzd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Słowniki tymczasowe dla pracy zdalnej
::   WE: [_a] [STRING] - rodzaj pola słownikowanego
::       [_b] - dodatkowy parametr
::   WY: tabelka tymczosowa _ret
::----------------------------------------------------------------------------------------------------------------------
_rodzaj:={? var_pres('_a')=type_of('') || _a || EDOK_ATR.TAT().NA ?};

_edokum:=EDOKUM.ref();

_sl:=obj_new('TAB','add','find');
_sl.TAB:=tab_tmp(,'KOD','STRING[8]','Kod','TR','STRING[100]','Tresc','REF_SQL','STRING[16]','Sloref');
_sl.add:="
   .TAB.KOD:=_a;
   .TAB.TR:=_b;
   .TAB.REF_SQL:=_c;
   .TAB.add()
";
_sl.find:="
   .TAB.KOD:=_a;
   .TAB.TR:=_b;
   .TAB.find_rec()
";

_firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
{? _rodzaj='OOPZ_TYP'
||
:: słownik typów oświadczeń
   PPSF_NO.cntx_psh();
   PPSF_NO.index('AKT');
   PPSF_NO.prefix('T',_firma);
   {? PPSF_NO.first()
   || {!
      |? _sl.add(PPSF_NO.KOD,PPSF_NO.OPIS,$PPSF_NO.ref());
         PPSF_NO.next()
      !}
   ?};
   PPSF_NO.cntx_pop()
|? _rodzaj='PRAC'
||
   OSOBA.cntx_psh();
   OSOBA.clear();
   _osoba:={? OSOBA.seek(EDOKUM.DOSTAWCA,) || OSOBA.ref() || null() ?};
   {? _osoba
   || P.cntx_psh();
      P.use('pracowni');
      P.index('PRACOJED');
      P.prefix(_firma,'P',_osoba);
      {? P.first()
      || {!
         |? {? P.ZA='T'
            || _sl.add('','%1 %2 '[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE]+
                          '[Teczka: %1, %2, %3]'[form(P.T),P.WYDZIAL().SYMBOL,P.ST().ST],$P.ref())
            ?};
            P.next()
         !}
      ?};
      P.cntx_pop()
   ?};
   OSOBA.cntx_pop()
|? _rodzaj='WPZDS_PPSF_TA' | _rodzaj='WPZDO_PPSF_TA'
|| PPSF_TA.cntx_psh();
   PPSF_TA.index('KOD');
   PPSF_TA.prefix();
   {? PPSF_TA.first()
   || {!
      |? _sl.add(PPSF_TA.KOD,PPSF_TA.NAZWA,$PPSF_TA.ref());
         PPSF_TA.next()
      !}
   ?};
   PPSF_TA.cntx_pop()
|? _rodzaj='WPZDS_TYP_PRACY' | _rodzaj='WPZDO_TYP_PRACY'
|| _query:=''+"
      select PPSFT.REFERENCE as REF, PPSFT.OPIS, PPSFR.KOD
      from PPSFT join PPSFR using (PPSFR.REFERENCE, PPSFT.PPSFR)
      where PPSFT.FIRMA=:_a and PPSFT.SKL_WN='T' and PPSFR.KOD=':_b'
   ";
   _kod:={? 5+_rodzaj='WPZDS'
         || 'ZDALN_ST'
         |? 5+_rodzaj='WPZDO'
         || 'ZDALN_OK'
         ?};
   _TAB:=sql(_query,_firma,_kod);
   {? _TAB.first()
   || {!
      |? _sl.add(_TAB.KOD,_TAB.OPIS,_TAB.REF);
         _TAB.next()
      !}
   ?}
|? _rodzaj='WPZDS_ROZKLAD'
|| _query:=''+"
      select PPSFROZD.NAZWA, PPSFROZD.REFERENCE as REF
      from PPSFROZD join PPSFR using (PPSFR.REFERENCE, PPSFROZD.PPSFR)
      where PPSFROZD.FIRMA=:_a and PPSFR.KOD='ZDALN_ST'
   ";
   _TAB:=sql(_query,_firma);
   {? _TAB.first()
   || {!
      |? _sl.add('',_TAB.NAZWA,_TAB.REF);
         _TAB.next()
      !}
   ?}
|? _rodzaj='WPZDS_SP_ROZL'
|| _query:=''+"
      select PPSF_SN.DOM, PPSF_SN.NAZWA, PPSF_SN.REFERENCE as REF
      from PPSF_SN
      where PPSF_SN.FIRMA=:_a
      order by PPSF_SN.DOM asc
   ";
   _TAB:=sql(_query,_firma);
   {? _TAB.first()
   || {!
      |? _sl.add('','%1%2'[_TAB.NAZWA,{? _TAB.DOM='T' || ' (domyślny)' || '' ?}],_TAB.REF);
         _TAB.next()
      !}
   ?}
|? _rodzaj='WPZDS_ADRES_SEL' | _rodzaj='WPZDO_ADRES_SEL'
|| _query:=''+"
      select
         PPSF_ADR.MIASTO, PPSF_ADR.ULICA, PPSF_ADR.DOM, PPSF_ADR.LOKAL,
         PPSF_ADR.REFERENCE as REF, PPSF_TA.KOD, KRAJE.SYM as KRAJ
      from PPSF_ADR join
           KRAJE using(PPSF_ADR.KRAJ, KRAJE.REFERENCE) join
           PPSF_TA using(PPSF_ADR.TYP, PPSF_TA.REFERENCE)
      where PPSF_ADR.A='T' and PPSF_ADR.P=:_a
   ";
   _prefix:=5+_rodzaj;
   _p_ref_s:=exec('atr_get','form_ob',_edokum,'%1_PRAC'[_prefix],'REF_SQL');
   _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null());

   _TAB:=sql(_query,_p_ref);
   {? _TAB.first()
   || {!
      |? _tresc:='%1 - %2, %3 %4 %5 [%6]'[_TAB.KRAJ,_TAB.MIASTO,_TAB.ULICA,_TAB.DOM,_TAB.LOKAL,_TAB.KOD];
         {? ~_sl.find('',_tresc)
         || _sl.add('',_tresc,_TAB.REF)
         ?};
         _TAB.next()
      !}
   ?}
?};

_sl.TAB


\akcept_oopz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Formuła na akceptację oświadczenia o pracy zdalnej
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja=1
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

exec('tab_kom', 'form_ob');
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
|| EDOK_ATR.cntx_psh();
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _b_etap:=exec('rodz_biez_etap','obiegi');
      _rej:=(_b_etap='W' | _b_etap='');

      _pzd02:=exec('is_pzd02','ppsf');
      {? _pzd02
      || _result.ok:=1;

         _prac_s:=exec('atr_get','form_ob',_edokum,'OOPZ_PRAC','REF_SQL');
         _prac_ref:=exec('FindAndGet','#table',P,_prac_s,,,null());

         {? _result.ok & _prac_ref=null()
         || _result.ok:=0;
            _result.errMsg:='Nie wskazano lub nie znaleziono pracownika.';
            {? _walid
            || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         ?};

         _ppsf_no_s:=exec('atr_get','form_ob',_edokum,'OOPZ_TYP','REF_SQL');
         _ppsf_no:=exec('FindAndGet','#table',PPSF_NO,_ppsf_no_s,,,null());

         {? _result.ok & _ppsf_no=null()
         || _result.ok:=0;
            _result.errMsg:='Nie wskazano lub nie znaleziono typu oświadczenia.';
            {? _walid
            || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         ?};

         {? _result.ok
         || _data_s:=exec('atr_get','form_ob',_edokum,'OOPZ_DATA');
            _data:=exec('to_ti_dt', 'form_ob', _data_s, 'D');
            _tak:=exec('get_war_true','obiegi');

            PPSF_NO.cntx_psh();
            PPSF_NO.index('KOD');
            PPSF_NO.prefix();
            PPSF_PO.cntx_psh();
            PPSF_PO.index('UNIQUE');
            PPSF_PO.prefix();
            PPSF_PO.blank(1);
            PPSF_PO.P:=_prac_ref;
            PPSF_PO.PPSF_NO:=_ppsf_no;
            PPSF_PO.PPSF_NO();
            PPSF_PO.OD:=_data;
            PPSF_PO.EDOKUM:=EDOKUM.ref();
            PPSF_PO.WYC:='N';
            _all_selected:=1;
            _all_accepted:=1;
            {! _ind:=1..exec('wn_oopz_lsec','sch_imp')
            |? _all_selected
            |! _akc:=exec('atr_get','form_ob',_edokum,'OOPZ_AKC_'+$_ind);
::             jeżeli mamy treść oświadczenia, to należy określić czy ją akceptujemy, czy nie
               {? ($('form(PPSF_NO.TR%1)<>\'\''[$_ind]))()
               || _all_selected*=(form(_akc)<>'')
               ?};
               {? ($('form(PPSF_NO.W%1)=\'T\''[$_ind]))()
               || _all_accepted*=(form(_akc)=_tak)
               ?};
               {? _all_selected
               || _akc_val:='N';
                  {? _akc=_tak || _akc_val:='T' ?};
                  ($('PPSF_PO.O%1:=\''[$_ind]+_akc_val+'\''))()
               ?}
            !};
            {? ~_all_selected
            || _result.ok*=0;
               exec('tab_kom_add','form_ob',1,'Należy określić status akceptacji dla każdego oświadczenia.')
            |? _err:=exec('ppsf_po','overlap',0,1); _err<>''
            || _result.ok*=0;
               exec('tab_kom_add','form_ob',1,_err)
            |? ~PPSF_PO.add(1)
            || _result.ok*=0;
               exec('tab_kom_add','form_ob',1,'Nie udało się zapisać wniosku.')
            ?};
            {? _result.ok & ~_all_accepted
            || exec('tab_kom_add','form_ob',3,'Nie wszystkie wymagane oświadczenia zostały zakceptowane.')
            ?};
            PPSF_PO.cntx_pop();
            PPSF_NO.cntx_pop()
         ?}
      || _result.ok*=0;
         exec('tab_kom_add','form_ob',1,
               'Brak obsługi pracy zdalnej w systemie - nie można złożyć wniosku.')
      ?}
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,'Oświadczenie o pracy zdalnej')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'
      ?}
   ?};
   {? _walid & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   {? _result.ok & _rej & _walid
   || {! _ind:=1..exec('wn_oopz_lsec','sch_imp')
      |! _tresc:=exec('atr_get','form_ob',_edokum,'OOPZ_TRESC_'+$_ind);
::       jeżeli nie ma treści oświadczenia to usuwamy akceptację
         {? form(_tresc)=''
         || exec('put_atr','form_ob',_edokum,'OOPZ_AKC_'+$_ind,'N')
         ?}
      !}
   ?};
   {? _walid & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\akcept_wpzds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Formuła na akceptację wniosku o pracę zdalną stałą
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja=1
::       _d - [STRING]    - ustalony symbol etapu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
  _etap:={? var_pres('_d')=type_of('')   || _d || ''              ?};

exec('tab_kom', 'form_ob');
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
|| EDOK_ATR.cntx_psh();
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _b_etap:=exec('rodz_biez_etap','obiegi');
      _rej:=(_b_etap='W' | _b_etap='');
      _etap_kadry:=_etap='KADRY_MOD';
      _d0:=#0;
      _tak:=exec('get_war_true','obiegi');
      _nie:=exec('get_war_false','obiegi');
      exec('initObj','form_ob');

      _pzd02:=exec('is_pzd02','ppsf');
      {? _pzd02
      || _result.ok:=1;
         _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
::       Sekcja "Wniosek ..." ----
         _p_ref_s:=exec('atr_get','form_ob',_edokum,'WPZDS_PRAC','REF_SQL');
         _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null());

         _data_od_s:=exec('atr_get','form_ob',_edokum,'WPZDS_DATA_OD');
         _data_od:=exec('to_ti_dt','form_ob',_data_od_s,'D');
         _data_do_s:=exec('atr_get','form_ob',_edokum,'WPZDS_DATA_DO');
         _data_do:=exec('to_ti_dt','form_ob',_data_do_s,'D');

         _typ_pracy:=exec('atr_get','form_ob',_edokum,'WPZDS_TYP_PRACY','REF_SQL');
         _ppsft:=exec('FindAndGet','#table',PPSFT,_typ_pracy,,,null());
         _ppsf_no:=exec('FindAndGet','#table',PPSFT,_typ_pracy,,"PPSF_NO",null());
         _ppsft_osw_wym:=exec('FindAndGet','#table',PPSFT,_typ_pracy,,"OSW_WYM='T'",null());

         _rozklad:=exec('atr_get','form_ob',_edokum,'WPZDS_ROZKLAD','REF_SQL');
         _ppsfrozd:=exec('FindAndGet','#table',PPSFROZD,_rozklad,,,null());

         _akc_osw:=exec('atr_get','form_ob',_edokum,'WPZDS_OSWIADCZ_AKC');

::       Sekcja "Adres ..." ----
::          wybrany adres pracy zdalnej
         _adr_sel:=exec('atr_get','form_ob',_edokum,'WPZDS_ADRES_SEL');
         _adr_sel_ref:=exec('atr_get','form_ob',_edokum,'WPZDS_ADRES_SEL','REF_SQL');
         _ppsf_adr:=null();

::          nowy adres pracy zdalnej
         _new_adr:=0;
         _adr_typ:=exec('atr_get','form_ob',_edokum,'WPZDS_TYP_ADRESU');
         _adr_typ_ref:=exec('atr_get','form_ob',_edokum,'WPZDS_TYP_ADRESU','REF_SQL');
         _new_adr+=+_adr_typ;
         _ppsf_ta:={? +_adr_typ || exec('FindAndGet','#table',PPSF_TA,_adr_typ_ref,,,null()) || null() ?};
         _ppsf_ta_kod:={? +_adr_typ || exec('FindAndGet','#table',PPSF_TA,_adr_typ_ref,,"KOD",'') || '' ?};
         _ppsf_ta_k:={? +_adr_typ || exec('FindAndGet','#table',PPSF_TA,_adr_typ_ref,,"K",'') || '' ?};

         _kraj_s:=exec('atr_get','form_ob',_edokum,'WPZDS_KRAJ','REF_SQL');
         _new_adr+=+_kraj_s;
         _kraj_ref:=exec('FindAndGet','#table',KRAJE,_kraj_s,,,null());
         _kraj_sym:=exec('FindAndGet','#table',KRAJE,_kraj_s,,"SYM",'');
         _wojewodz:=exec('atr_get','form_ob',_edokum,'WPZDS_WOJEWODZ');
         _new_adr+=+_wojewodz;
         _powiat:=exec('atr_get','form_ob',_edokum,'WPZDS_POWIAT');
         _new_adr+=+_powiat;
         _gmina:=exec('atr_get','form_ob',_edokum,'WPZDS_GMINA');
         _new_adr+=+_gmina;
         _kod_p:=exec('atr_get','form_ob',_edokum,'WPZDS_KOD');
         _new_adr+=+_kod_p;
         _poczta:=exec('atr_get','form_ob',_edokum,'WPZDS_POCZTA');
         _new_adr+=+_poczta;
         _miasto:=exec('atr_get','form_ob',_edokum,'WPZDS_MIASTO');
         _new_adr+=+_miasto;
         _ulica:=exec('atr_get','form_ob',_edokum,'WPZDS_ULICA');
         _new_adr+=+_ulica;
         _dom:=exec('atr_get','form_ob',_edokum,'WPZDS_DOM');
         _new_adr+=+_dom;
         _lokal:=exec('atr_get','form_ob',_edokum,'WPZDS_LOKAL');
         _new_adr+=+_lokal;

::       Sekcja "Wypełnia dział kadr" ----
         _organ:=exec('atr_get','form_ob',_edokum,'WPZDS_ORGAN');
         _sp_rozl:=exec('atr_get','form_ob',_edokum,'WPZDS_SP_ROZL','REF_SQL');
         _ppsf_sn:=exec('FindAndGet','#table',PPSF_SN,_sp_rozl,,,null());
         _drukuj_um:=exec('atr_get','form_ob',_edokum,'WPZDS_DRUKUJ_UM');

::       Walidacja wniosku ----
         {? _result.ok & _p_ref=null()
         || _result.ok:=0;
            _result.errMsg:='Nie wskazano lub nie znaleziono pracownika.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _data_od=_d0
         || _result.ok:=0;
            _result.errMsg:='Nie podano lub błędna data "Obowiązuje od".';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _data_do<>_d0 & _data_od>_data_do
         || _result.ok:=0;
            _result.errMsg:='Data "Obowiązuje od" nie może być większa niż data "Obowiązuje do".';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         _p_dza:=exec('FindAndGet','#table',P,_p_ref,,"DZA",_d0);
         _p_dz:=exec('FindAndGet','#table',P,_p_ref,,"DZ",_d0);
         {? _result.ok & _data_od<_p_dza
         || _result.ok:=0;
            _result.errMsg:='Data "Obowiązuje od" wykracza poza okres zatrudnienia pracownika (od %1 do %2).'
                            [$_p_dza,$_p_dz];
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};
         {? _result.ok & _p_dz<>_d0 & (_data_do=_d0 | _data_do>_p_dz)
         || _result.ok:=0;
            _result.errMsg:='Data "Obowiązuje do" wykracza poza okres zatrudnienia pracownika (od %1 do %2).'
                        [$_p_dza,$_p_dz];
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _ppsft=null()
         || _result.ok:=0;
            _result.errMsg:='Nie wskazano lub nie znaleziono typu pracy.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _ppsft_osw_wym &
            exec('ppsf_po_exists','ppsf',_ppsf_no,_p_ref,_data_od,_data_do,'T')=null()
         || _result.ok:=0;
            _kod:=exec('FindAndGet','#table',PPSFT,_ppsft,,"PPSF_NO().KOD",'');
            _opis:=exec('FindAndGet','#table',PPSFT,_ppsft,,"PPSF_NO().OPIS",'');
            _osw:='%1 - %2'[_kod,_opis];
            _result.errMsg:='Nie znaleziono zaakceptowanego oświadczenia o pracy zdalnej "%1" dla wybranego typu pracy'
                            ' w zakresie wnioskowanych dat.'[_osw];
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _ppsfrozd=null()
         || _result.ok:=0;
            _result.errMsg:='Nie wskazano lub nie znaleziono rozkładu pracy.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & (_akc_osw<>'T' & _akc_osw<>_tak)
         || _result.ok:=0;
            _result.errMsg:='Nie zaakceptowano oświadczenia do wniosku.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & +_adr_sel=0 & _new_adr=0
         || _result.ok:=0;
            _result.errMsg:='Nie podano adresu pracy zdalnej. '
                            'Należy wskazać istniejący adres pracy zdalnej lub '
                            'dodać nowy w sekcji "Nowy adres pracy zdalnej".';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & +_adr_sel=0 & _new_adr & (_kraj_sym='' | _miasto='' | _dom='')
         || _result.ok:=0;
            _pola:='';
            {? _kraj_sym='' || _pola+='"Kraj"' ?};
            {? _miasto=''
            ||  {? +_pola || _pola+=', ' ?};
                _pola+='"Miejscowość"'
            ?};
            {? _dom=''
            || {? +_pola || _pola+=', ' ?};
               _pola+='"Numer domu/posesji"'
            ?};
            _result.errMsg:='Należy uzupełnić pola %1.'[_pola];
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & +_adr_sel & _new_adr
         || _result.ok:=0;
            _result.errMsg:='Wybrano istniejący adres pracy zdalnej. '+
                            'Pola w sekcji "Nowy adres pracy zdalnej" powinny pozostać niewypełnione.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _new_adr & _ppsf_ta=null()
         || _result.ok:=0;
            _result.errMsg:='Nie wskazano lub nie znaleziono typu adresu.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

::       kontrolujemy uzupełnienie sekcji, którą wypełnia dział kadr
         _clear_kadry:=0;
         {? _walid & _rej & (_organ<>'' | _sp_rozl<>'' | _drukuj_um=_tak | _drukuj_um='T')
         || _clear_kadry:=1;
            _result.errMsg:='Wpisane wartości pól z sekcji "Wypełnia Dział Kadr" zostaną usunięte '
                            'lub nadane zostaną im wartości domyślne.';
            exec('tab_kom_add', 'form_ob', 3, _result.errMsg)
         ?};
::       tymczasowe wypełnienie pól na potrzeby walidacji (i tak na etapie rejestracji będzie to wycofane)
         {? _walid & ~_etap_kadry
         || _organ:='<brak>';
            _drukuj_um:=_nie
         ?};

         {? _walid & _etap_kadry & (_organ='' | _sp_rozl='')
         || _result.ok:=0;
            _result.errMsg:='Należy podać wartości wszystkich pól z sekcji "Wypełnia Dział Kadr".';
            exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
         ?};

::       Zapis do bazy ----
::       najpierw adres
         {? _result.ok
         || {? +_adr_sel
            || KRAJE.cntx_psh();
               PPSF_TA.cntx_psh();
               PPSF_ADR.cntx_psh();
               PPSF_ADR.index('PRAC');
               PPSF_ADR.prefix();
               {? PPSF_ADR.seek(_adr_sel_ref,)
               || _ppsf_ta_kod:=PPSF_ADR.TYP().KOD;
                  _ppsf_ta_k:=PPSF_ADR.TYP().K;
                  _kraj_sym:=PPSF_ADR.KRAJ().SYM;
                  _wojewodz:=PPSF_ADR.WOJEWODZ;
                  _powiat:=PPSF_ADR.POWIAT;
                  _gmina:=PPSF_ADR.GMINA;
                  _kod_p:=PPSF_ADR.KOD;
                  _poczta:=PPSF_ADR.POCZTA;
                  _miasto:=PPSF_ADR.MIASTO;
                  _ulica:=PPSF_ADR.ULICA;
                  _dom:=PPSF_ADR.DOM;
                  _lokal:=PPSF_ADR.LOKAL
               ?};
               PPSF_ADR.cntx_pop();
               PPSF_TA.cntx_pop();
               KRAJE.cntx_pop()
            ?};
            _adrcfg:=exec('ppsf_adr_hash_cfg','ppsf');
            _adrcfg.VAL.KRAJ:=_kraj_sym;
            _adrcfg.VAL.WOJEWODZ:=_wojewodz;
            _adrcfg.VAL.POWIAT:=_powiat;
            _adrcfg.VAL.GMINA:=_gmina;
            _adrcfg.VAL.KOD:=_kod_p;
            _adrcfg.VAL.POCZTA:=_poczta;
            _adrcfg.VAL.MIASTO:=_miasto;
            _adrcfg.VAL.ULICA:=_ulica;
            _adrcfg.VAL.DOM:=_dom;
            _adrcfg.VAL.LOKAL:=_lokal;
            _close_prev:=_ppsf_ta_k='T';
            _ret:=exec('ppsf_adr_update','ppsf',_p_ref,_ppsf_ta_kod,_adrcfg,_data_od,_data_do,_close_prev);
            {? _ret.ok
            || _ppsf_adr:=_ret.REF
            || _result.ok:=0;
               _result.errMsg:=_ret.msg;
               exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         ?};

::       a teraz winosek
         {? _result.ok
         || PPSF_H.cntx_psh();
            PPSF_H.index('PRAC');
            PPSF_H.prefix();
            PPSF_H.blank(1);
            PPSF_H.P:=_p_ref;
            PPSF_H.OD:=_data_od;
            PPSF_H.DO:=_data_do;
            PPSF_H.AKT:='T';
            PPSF_H.CREATOR:=_p_ref;
            PPSF_H.DRUK_U:={? _drukuj_um=_tak | _drukuj_um='T' || 'T' || 'N' ?};
            PPSF_H.EDOKUM:=_edokum;
            PPSF_H.OO:=_organ;
            PPSF_H.ORIGIN:='W';
            PPSF_H.KOSZT:='N';
            PPSF_H.PPSFROZD:=_ppsfrozd;
            PPSF_H.PPSFT:=_ppsft;
            PPSF_H.PPSF_SN:=_ppsf_sn;
            PPSF_H.WYC:='N';
            {? ~_walid
::             Odczytujemy osobę akceptującą z etapu Przełożony
::             (oczekujemy, że wartość zotała zapamiętana w EDOKUM.PARAMS na etapie akceptacji przez przełożonego).
            || PPSF_H.KTO_WER:=exec('osoba_akcept_get','form_ob')
            ?};
            _chk:=exec('ppsfh_chk','ppsf',0,1,1);
            {? (type_of(_chk)=type_of(0))
            || {? _chk=0 || _chk:='Błąd podczas weryfikacji wniosku.' || _chk:='' ?}
            ?};
            {? _chk='' & (_chk:=exec('ppsf_h','overlap',0,1); _chk='')
            || {? ~PPSF_H.add(1)
               || _result.ok:=0;
                  _result.errMsg:='Utworzenie wniosku nie powiodło się.';
                  exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            || _result.ok:=0;
               _result.errMsg:=_chk;
               exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?};
            PPSF_H.cntx_pop()
         ?}
      || _result.ok*=0;
         exec('tab_kom_add','form_ob',1,
               'Brak obsługi pracy zdalnej w systemie - nie można złożyć wniosku.')
      ?}
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,'Wniosek o pracę zdalną stałą')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'
      ?}
   ?};
   {? _walid & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};

:: w przypadku wypełnienia pól w sekcji "Wypełnia dział kadr" na etapie rejestracji ustawiamy im wartości domyślne
   {? _clear_kadry
   || exec('put_atr','form_ob',_edokum,'WPZDS_ORGAN','');
      exec('put_atr','form_ob',_edokum,'WPZDS_SP_ROZL','');
      exec('put_atr','form_ob',_edokum,'WPZDS_SP_ROZL','','REF_SQL');
      exec('put_atr','form_ob',_edokum,'WPZDS_DRUKUJ_UM','N')
   ?};

   {? _walid & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\akcept_wpzdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Formuła na akceptację wniosku o pracę zdalną okazjonalną
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja=1
::       _d - [STRING]    - ustalony symbol etapu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
  _etap:={? var_pres('_d')=type_of('')   || _d || ''              ?};

exec('tab_kom', 'form_ob');
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
|| EDOK_ATR.cntx_psh();
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _b_etap:=exec('rodz_biez_etap','obiegi');
      _rej:=(_b_etap='W' | _b_etap='');
      _d0:=#0;
      _pzd02:=exec('is_pzd02','ppsf');
      {? _pzd02
      || _result.ok:=1;
         _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
         _tak:=exec('get_war_true','obiegi');
         _nie:=exec('get_war_false','obiegi');
         exec('open_prc','open_tab');
         exec('initObj','form_ob');
::       Sekcja "Wniosek ..." ----
         _p_ref_s:=exec('atr_get','form_ob',_edokum,'WPZDO_PRAC','REF_SQL');
         _p_ref:=exec('FindAndGet','#table',P,_p_ref_s,,,null());

         _data_od_s:=exec('atr_get','form_ob',_edokum,'WPZDO_DATA_OD');
         _data_od:=exec('to_ti_dt','form_ob',_data_od_s,'D');
         _data_do_s:=exec('atr_get','form_ob',_edokum,'WPZDO_DATA_DO');
         _data_do:=exec('to_ti_dt','form_ob',_data_do_s,'D');
         _gr_s:=exec('atr_get','form_ob',_edokum,'WPZDO_GR');
         _gr:=exec('to_ti_dt','form_ob',_gr_s,'T');

         _typ_pracy:=exec('atr_get','form_ob',_edokum,'WPZDO_TYP_PRACY','REF_SQL');
         _ppsft:=exec('FindAndGet','#table',PPSFT,_typ_pracy,,,null());
         _ppsf_no:=exec('FindAndGet','#table',PPSFT,_typ_pracy,,"PPSF_NO",null());
         _ppsft_osw_wym:=exec('FindAndGet','#table',PPSFT,_typ_pracy,,"OSW_WYM='T'",null());

         _akc_osw:=exec('atr_get','form_ob',_edokum,'WPZDO_OSWIADCZ_AKC');
         _partday:=exec('atr_get','form_ob',_edokum,'WPZDO_PARTDAY');
         _komentarz:=exec('atr_get','form_ob',_edokum,'WPZDO_KOMENTARZ');

::       Sekcja "Adres ..." ----
::          wybrany adres pracy zdalnej
         _adr_sel:=exec('atr_get','form_ob',_edokum,'WPZDO_ADRES_SEL');
         _adr_sel_ref:=exec('atr_get','form_ob',_edokum,'WPZDO_ADRES_SEL','REF_SQL');
         _ppsf_adr:=null();

::          nowy adres pracy zdalnej
         _new_adr:=0;
         _adr_typ:=exec('atr_get','form_ob',_edokum,'WPZDO_TYP_ADRESU');
         _adr_typ_ref:=exec('atr_get','form_ob',_edokum,'WPZDO_TYP_ADRESU','REF_SQL');
         _new_adr+=+_adr_typ;
         _ppsf_ta:={? +_adr_typ || exec('FindAndGet','#table',PPSF_TA,_adr_typ_ref,,,null()) || null() ?};
         _ppsf_ta_kod:={? +_adr_typ || exec('FindAndGet','#table',PPSF_TA,_adr_typ_ref,,"KOD",'') || '' ?};
         _ppsf_ta_k:={? +_adr_typ || exec('FindAndGet','#table',PPSF_TA,_adr_typ_ref,,"K",'') || '' ?};

         _kraj_s:=exec('atr_get','form_ob',_edokum,'WPZDO_KRAJ','REF_SQL');
         _new_adr+=+_kraj_s;
         _kraj_ref:=exec('FindAndGet','#table',KRAJE,_kraj_s,,,null());
         _kraj_sym:=exec('FindAndGet','#table',KRAJE,_kraj_s,,"SYM",'');
         _wojewodz:=exec('atr_get','form_ob',_edokum,'WPZDO_WOJEWODZ');
         _new_adr+=+_wojewodz;
         _powiat:=exec('atr_get','form_ob',_edokum,'WPZDO_POWIAT');
         _new_adr+=+_powiat;
         _gmina:=exec('atr_get','form_ob',_edokum,'WPZDO_GMINA');
         _new_adr+=+_gmina;
         _kod_p:=exec('atr_get','form_ob',_edokum,'WPZDO_KOD');
         _new_adr+=+_kod_p;
         _poczta:=exec('atr_get','form_ob',_edokum,'WPZDO_POCZTA');
         _new_adr+=+_poczta;
         _miasto:=exec('atr_get','form_ob',_edokum,'WPZDO_MIASTO');
         _new_adr+=+_miasto;
         _ulica:=exec('atr_get','form_ob',_edokum,'WPZDO_ULICA');
         _new_adr+=+_ulica;
         _dom:=exec('atr_get','form_ob',_edokum,'WPZDO_DOM');
         _new_adr+=+_dom;
         _lokal:=exec('atr_get','form_ob',_edokum,'WPZDO_LOKAL');
         _new_adr+=+_lokal;

::       Walidacja wniosku ----
         {? _result.ok & _p_ref=null()
         || _result.ok:=0;
            _result.errMsg:='Nie wskazano lub nie znaleziono pracownika.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _data_od=_d0
         || _result.ok:=0;
            _result.errMsg:='Nie podano lub błędna data "Obowiązuje od".';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _data_do=_d0
         || _result.ok:=0;
            _result.errMsg:='Nie podano lub błędna data "Obowiązuje do".';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _data_do<>_d0 & _data_od>_data_do
         || _result.ok:=0;
            _result.errMsg:='Data "Obowiązuje od" nie może być większa niż data "Obowiązuje do".';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         _p_dza:=exec('FindAndGet','#table',P,_p_ref,,"DZA",_d0);
         _p_dz:=exec('FindAndGet','#table',P,_p_ref,,"DZ",_d0);
         {? _result.ok & _data_od<_p_dza
         || _result.ok:=0;
            _result.errMsg:='Data "Obowiązuje od" wykracza poza okres zatrudnienia pracownika (od %1 do %2).'
                            [$_p_dza,$_p_dz];
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};
         {? _result.ok & _p_dz<>_d0 & _data_do>_p_dz
         || _result.ok:=0;
            _result.errMsg:='Data "Obowiązuje do" wykracza poza okres zatrudnienia pracownika (od %1 do %2).'
                        [$_p_dza,$_p_dz];
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _data_od~1<>_data_do~1
         || _result.ok:=0;
            _result.errMsg:='Data "Obowiązuje do" nie może być w innym roku niż data "Obowiązuje od".';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         _kal:=exec('FindAndGet','#table',P,_p_ref,,"KAL",null());
         {? _result.ok
         || {? _kal & ~__KAL.set_cal(_kal,_data_od~1)
            || _result.ok:=0;
               _result.errMsg:='Brak kalendarza indywidualnego na rok %1.'@[$(_data_od~1)];
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            || {? ~__KAL.set_cal('standard',_data_od~1)
               || _result.ok:=0;
                  _result.errMsg:='Brak kalendarza "standard" na rok %1.'@[$(_data_od~1)];
                  {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
               ?}
            ?}
         || _result.ok:=0;
            _result.errMsg:='Nie udało się ustalić kalendarza pracownika.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & (_partday=_tak | _partday='T') & (_gr<=time(0,1,0) | _gr>time(24,0,0))
         || _result.ok:=0;
            _result.errMsg:='Typ wniosku jest na część dnia.'
                            ' Należy podać poprawne wartości dla pola "Godziny robocze" (%1-%2).'@
                            [form(time(0,1,0)),form(time(24,0,0))];
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _partday<>_tak & _partday<>'T' & _gr>*0
         || _result.ok:=0;
            _result.errMsg:='Typ wniosku nie jest na część dnia. Należy usunąć godziny robocze.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _ppsft=null()
         || _result.ok:=0;
            _result.errMsg:='Nie wskazano lub nie znaleziono typu pracy.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         _ppsft_osw_akc:=exec('ppsf_po_exists','ppsf',_ppsf_no,_p_ref,_data_od,_data_do,'T');
         {? _result.ok & _ppsft_osw_wym & _ppsft_osw_akc=null()
         || _result.ok:=0;
            _kod:=exec('FindAndGet','#table',PPSFT,_ppsft,,"PPSF_NO().KOD",'');
            _opis:=exec('FindAndGet','#table',PPSFT,_ppsft,,"PPSF_NO().OPIS",'');
            _osw:='%1 - %2'[_kod,_opis];
            _result.errMsg:='Nie znaleziono zaakceptowanego oświadczenia o pracy zdalnej "%1" dla wybranego typu pracy'
                            ' w zakresie wnioskowanych dat.'[_osw];
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _akc_osw<>_tak & _akc_osw<>'T'
         || _result.ok:=0;
            _result.errMsg:='Nie zaakceptowano oświadczenia do wniosku.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & +_adr_sel=0 & _new_adr=0
         || _result.ok:=0;
            _result.errMsg:='Nie podano adresu pracy zdalnej. '
                            'Należy wskazać istniejący adres pracy zdalnej lub '
                            'dodać nowy w sekcji "Nowy adres pracy zdalnej".';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & +_adr_sel=0 & _new_adr & (_kraj_sym='' | _miasto='' | _dom='')
         || _result.ok:=0;
            _pola:='';
            {? _kraj_sym='' || _pola+='"Kraj"' ?};
            {? _miasto=''
            ||  {? +_pola || _pola+=', ' ?};
                _pola+='"Miejscowość"'
            ?};
            {? _dom=''
            || {? +_pola || _pola+=', ' ?};
               _pola+='"Numer domu/posesji"'
            ?};
            _result.errMsg:='Należy uzupełnić pola %1.'[_pola];
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & +_adr_sel & _new_adr
         || _result.ok:=0;
            _result.errMsg:='Wybrano istniejący adres pracy zdalnej. '+
                            'Pola w sekcji "Nowy adres pracy zdalnej" powinny pozostać niewypełnione.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

         {? _result.ok & _new_adr & _ppsf_ta=null()
         || _result.ok:=0;
            _result.errMsg:='Nie wskazano lub nie znaleziono typu adresu.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

::       sprawdzenie czy w zakresie dat składanego wniosku nie mamy wniosku o pracę stałą
         _ppsfr:=exec('FindInSet','#table','PPSFR','KOD','ZDALN_ST',_firma,,1,,null());
         _wn_st:=exec('ppsf_wnio_exists','ppsf',_p_ref,_data_od,_data_do,,1,_ppsfr);
         {? _result.ok & _wn_st.REF<>null()
         || _result.errMsg:='W podanym zakresie dat istnieje wniosek o pracę zdalną stałą';
            _result.errMsg+={? _wn_st.WYBDNI
                            || ' z kolidującymi dniami pracy wynikającymi z rozkładu pracy zdalnej stałej.'
                            || '.'
                            ?};
            _lock:={? _wn_st.WYBDNI || 1 || 3 ?};
            {? _walid
            || _result.ok:=(_lock=3);
               exec('tab_kom_add', 'form_ob', _lock, _result.errMsg)
            ?}
         ?};

::       Zapis do bazy ----
::       najpierw adres
         {? _result.ok
         || {? +_adr_sel
            || KRAJE.cntx_psh();
               PPSF_TA.cntx_psh();
               PPSF_ADR.cntx_psh();
               PPSF_ADR.index('PRAC');
               PPSF_ADR.prefix();
               {? PPSF_ADR.seek(_adr_sel_ref,)
               || _ppsf_ta_kod:=PPSF_ADR.TYP().KOD;
                  _ppsf_ta_k:=PPSF_ADR.TYP().K;
                  _kraj_sym:=PPSF_ADR.KRAJ().SYM;
                  _wojewodz:=PPSF_ADR.WOJEWODZ;
                  _powiat:=PPSF_ADR.POWIAT;
                  _gmina:=PPSF_ADR.GMINA;
                  _kod_p:=PPSF_ADR.KOD;
                  _poczta:=PPSF_ADR.POCZTA;
                  _miasto:=PPSF_ADR.MIASTO;
                  _ulica:=PPSF_ADR.ULICA;
                  _dom:=PPSF_ADR.DOM;
                  _lokal:=PPSF_ADR.LOKAL
               ?};
               PPSF_ADR.cntx_pop();
               PPSF_TA.cntx_pop();
               KRAJE.cntx_pop()
            ?};
            _adrcfg:=exec('ppsf_adr_hash_cfg','ppsf');
            _adrcfg.VAL.KRAJ:=_kraj_sym;
            _adrcfg.VAL.WOJEWODZ:=_wojewodz;
            _adrcfg.VAL.POWIAT:=_powiat;
            _adrcfg.VAL.GMINA:=_gmina;
            _adrcfg.VAL.KOD:=_kod_p;
            _adrcfg.VAL.POCZTA:=_poczta;
            _adrcfg.VAL.MIASTO:=_miasto;
            _adrcfg.VAL.ULICA:=_ulica;
            _adrcfg.VAL.DOM:=_dom;
            _adrcfg.VAL.LOKAL:=_lokal;
            _close_prev:=_ppsf_ta_k='T';
            _ret:=exec('ppsf_adr_update','ppsf',_p_ref,_ppsf_ta_kod,_adrcfg,_data_od,_data_do,_close_prev);
            {? _ret.ok
            || _ppsf_adr:=_ret.REF
            || _result.ok:=0;
               _result.errMsg:=_ret.msg;
               exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         ?};

::       a teraz winosek
         {? _result.ok
         || PPSFN.cntx_psh();
            PPSFN.index('PRAC');
            PPSFN.prefix();
            PPSFN.blank(1);
            PPSFN.P:=_p_ref;
            PPSFN.CREATOR:=_p_ref;
            PPSFN.PPSFT:=_ppsft;
            PPSFN.AZ:='W';
            PPSFN.D:=EDOKUM.DATAW;
            PPSFN.DO:=_data_do;
            PPSFN.OD:=_data_od;
            PPSFN.DAYTIME:='X';
::          Uzupełnienie pól PPSFN.DK i PPSFN.DR.
            exec('ppsfn_okres_ae','ppsf');
            PPSFN.EDOKUM:=_edokum;
            PPSFN.FIRMA:=_firma;
            PPSFN.G:=_gr;
            PPSFN.ORIGIN:='W';
            PPSFN.OSOBA:=_osoba;
            PPSFN.OSW_AKC:={? _ppsft_osw_wym & _ppsft_osw_akc || 'T' || 'N' ?};
            PPSFN.PARTDAY:={? _partday=_tak | _partday='T' || 'T' || 'N' ?};
            PPSFN.PORTAL:='T';
            PPSFN.KOMENT:=_komentarz;

            {? ~_walid
::             Zapamiętajmy osobę akceptującą ale z poprzedniego etapu (przełożony).
            || PPSFN.AD:=date();
               PPSFN.KTO_WER:=exec('osoba_akcept_get','form_ob')
            ?};
            _chk:=exec('ppsfn_date_control','ppsf',null(),2);
            {? _chk=''
            || _lim:=exec('limit_spr','ppsf',,,,,,null(),1);
               {? _lim.ok=0
               || _result.ok:=0;
                  _result.errMsg:=exec('limit_kom','ppsf',_lim,1);
                  exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               || {? PPSFN.add(1)
                  || _chk:=exec('ppsfp_pos_management','ppsf','K',2);
                     {? _chk<>''
                     || _result.ok:=0;
                        _result.errMsg:=_chk;
                        exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
                     ?}
                  || _result.ok:=0;
                     _result.errMsg:='Utworzenie wniosku nie powiodło się.';
                     exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
                  ?}
               ?};
               obj_del(_lim)
            || _result.ok:=0;
               _result.errMsg:=_chk;
               exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?};
            PPSFN.cntx_pop()
         ?}
      || _result.ok*=0;
         exec('tab_kom_add','form_ob',1,
               'Brak obsługi pracy zdalnej w systemie - nie można złożyć wniosku.')
      ?}
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,'Wniosek o pracę zdalną okazjonalną')
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:='Błąd podczas kopiowania załączników.'
      ?}
   ?};
   {? _walid & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};

   {? _walid & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\def_form_pzd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Wartosc poczatkowa dla słowników pracy zdalnej
::   WE: Identyfikator
::       Wartosc
::       [_a] - dodatkowy parametr
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nazwa:={? var_pres('_a')=type_of('') || _a || '' ?};
_edokum:=EDOKUM.ref();
_tab:=obj_new('WAR','REF_SQL');
_tab.WAR:='';
_tab.REF_SQL:='';

{? _nazwa='PRAC'
|| OSOBA.cntx_psh();
   OSOBA.clear();
   _osoba:={? OSOBA.seek(EDOKUM.DOSTAWCA,) || OSOBA.ref() || null() ?};
   {? _osoba
   || P.cntx_psh();
      P.use('pracowni');
      P.index('PRACOJED');
      P.prefix(exec('firma','ustawienia'),'P',_osoba);
      {? P.first()
      || _dalej:=1;
         {!
         |? {? P.ZA='T'
            || _dalej:=0;
               _tab.WAR:='%1 %2 '[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE]+
                          '[Teczka: %1, %2, %3]'[form(P.T),P.WYDZIAL().SYMBOL,P.ST().ST];
               _tab.REF_SQL:=$P.ref()
            ?};

            _dalej & P.next()
         !}
      ?};
      P.cntx_pop()
   ?};
   OSOBA.cntx_pop();
   return(_tab)
|? _nazwa='WPZDS_OSWIADCZENIE' | _nazwa='WPZDO_OSWIADCZENIE'
|| _text:='Oświadczam, że na stanowisku pracy zdalnej w poniżej wskazanym miejscu są zapewnione '+
             'bezpieczne i higieniczne warunki wykonywania tej pracy.';
   return(_text)
?};
~~

:Sign Version 2.0 jowisz:1045 2023/10/12 12:17:09 94410868568e650b4af2c2d9deb58f0fca4cd7dc3cbcf2beaf22c31962b07779181e0321e70344661d134213ca38d69ade6fe567250e7c3d5ff7c40a78ff86cb425ad970789606bc6bd743bd8865ae02d2eddcd80062fc02151ebf4a30c3fa6b4ef2410aadfb30191a6c90a91b50efc4f5946c90a078e94d4aed8d36e2dfd821
