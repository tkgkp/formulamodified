:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_rep.fml [12.51]
:: Utworzony: 06.05.2019
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Funkcje do obsługi wydruków w PPK.
::======================================================================================================================


\list_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Lista uczestników na podany dzień.
::   WE: _a [DATE] - Data ustalenia listy uczestników lub data od do zakresu dat.
::       [_b] [DATE] - Data do do zakresu dat.
::   WY: Tabela z listą uczestników PPK.
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
_od_od:=_a;
_od_do:={? var_pres('_b')=type_of(_d0) || _b || _d0 ?};
_TAB:=exec('tab_ucz','ppk_rep');

PPK_UMO.cntx_psh();
{? exec('init','ppk_umo',_od_od)<>null()
|| PPK_UCZ.cntx_psh();
   PPK_UCZ.index('OSOBA');
   PPK_UCZ.prefix(PPK_UMO.ref());
   {? PPK_UCZ.first()
   || _lp:=0;
      {!
      |? {? {? _od_do=_d0
            || PPK_UCZ.OD<=_od_od & exec('aktywny','ppk_ucz',PPK_UCZ.OSOBA,_od_od)
            || PPK_UCZ.OD>=_od_od & PPK_UCZ.OD<=_od_do
            ?}
            &
            exec('upr2ucze','ppk_ucz',PPK_UCZ.OSOBA)
         || _TAB.blank(1);
            _TAB.LP:=_lp+=1;
            _TAB.NAZWISKO:=PPK_UCZ.OSOBA().NAZWISKO;
            _TAB.PIERWSZE:=OSOBA.PIERWSZE;
            _TAB.OBCY:=OSOBA.OBCY;
            _TAB.IDENTYF:=OSOBA.IDENTYF;
            _TAB.PESEL:=OSOBA.PESEL;
            _TAB.PASZPORT:=OSOBA.PASZPORT;
            _TAB.DRUGIE:=OSOBA.DRUGIE;
            _TAB.ID_APP:=PPK_UCZ.ID_APP;
            _TAB.PLEC:=OSOBA.PLEC;
            _TAB.OBYWATEL:=
               {? +OSOBA.OBYWATEL
               || OSOBA.OBYWATEL
               || 'polskie'
               ?};
            _TAB.UR_DATA:=OSOBA.UR_DATA;
            {? +OSOBA.DOWOD
            || _typ:='Dowód';
               _sym:=OSOBA.DOWOD
            |? +OSOBA.PASZPORT
            || _typ:='Paszport';
               _sym:=OSOBA.PASZPORT
            || _typ:=_sym:=''
            ?};
            _TAB.TYPDOK:=_typ;
            _TAB.SYMDOK:=_sym;
            _r_adr:=spli_str('C,S,K,I',',');
            {! _ii:=1 .. 4
            |? _TAB.ADRES=''
            |! _TAB.ADRES:=exec('adres','osoba',_r_adr[_ii],_od_od)
            !};
            obj_del(_r_adr);
            &_r_adr;
            _TAB.EMAIL:=exec('email','ppk_ucz',OSOBA.ref(),_od_od);
            _TAB.OK:='N';
            _TAB.DATA:=PPK_UCZ.OD;
            _TAB.add()
         ?};
         PPK_UCZ.next()
      !}
   ?};
   PPK_UCZ.cntx_pop()
?};
PPK_UMO.cntx_pop();
_TAB


\tab_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Tabela do obsługi listy uczestników do powiadomień i wydruków.
::   WE:
::   WY: Definicja tabeli
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.',
   'NAZWISKO','STRING[30]','Nazwisko',
   'PIERWSZE','STRING[20]','Imię pierwsze',
   'PESEL','STRING[11]','Numer PESEL',
   'PASZPORT','STRING[20]','Paszport',
   'DRUGIE','STRING[20]','Imię drugie',
   'ID_APP','STRING[30]','Identyfikator',
   'PLEC','STRING[1]','Płeć',
   'OBYWATEL','STRING[20]','Obywatelstwo',
   'UR_DATA','DATE','Data urodzenia',
   'TYPDOK','STRING[20]','Typ dokumentu tożsamości',
   'SYMDOK','STRING[20]','Symbol dokumentu tożsamości',
   'ADRES','STRING[100]','Adres',
   'EMAIL','STRING[100]','Adres poczty elektronicznej',
   'UWAGI','STRING[100]','Uwagi',
   'OK','STRING[1]','Zakończone powodzeniem [T/N]',
   'DATA','DATE','Data',
   'PRZ_POW','STRING[10]','Sposób powiadomienia',
   'OBCY','STRING[1]','Obcokrajowiec',
   'IDENTYF','STRING[20]','Identyfikator',
   'DATA_UTW','DATE','Data utworzenia komunikatu',
   'RODZAJ','STRING[10]','Rodzaj odbiorcy [Osoba/Uczestnik]',
   'AKT','STRING[3]','Współpracownik aktywny [Tak/Nie]',
   'OSTRZ','STRING[100]','Ostrzeżenia'

)


\n_wznow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Lista uczestników PPK, którym nie wznowiono naliczania wpłat.
::   WE: _a [TABLE]   - Tabela z uczestnikami którym należy wznowić wpłaty.
::      [_b][INTEGER] - Rok wznowienia, domyślnie date()~1
::   WY: Lista osób.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_rok:=date()~1;
_rok:={? var_pres('_b')=type_of(0) || _b || date()~1 ?};
_dt:=date(_rok,KST_PPK.WZN_MS-1,KST_PPK.WZN_DN);
_firma:=exec('firma','ustawienia');

PPK_UMO.cntx_psh();
{? _TAB.first() & exec('init','ppk_umo',_dt)<>null()
|| PPK_UZA.cntx_psh();
   PPK_UMO.PPK_UZA();
   _PARRAP:=exec('parrap_b','ppk_uza',1);
   _mcUcz:={? _PARRAP.AWW_MC || _PARRAP.AWW_MC || KST_PPK.WZN_MS-1 ?};
   _dzUcz:={? _PARRAP.AWW_DZ || _PARRAP.AWW_DZ || KST_PPK.WZN_DN ?};
   _mcOs:={? _PARRAP.UZU_MC || _PARRAP.UZU_MC || KST_PPK.WZN_MS-1 ?};
   _dzOs:={? _PARRAP.UZU_DZ || _PARRAP.UZU_DZ || KST_PPK.WZN_DN ?};
   _dtAwwPucz:=date(_rok,_mcUcz,_dzUcz);
   _dtAwwPos:=date(_rok,_mcOs,_dzOs);
   obj_del(_PARRAP);
   PPK_UZA.cntx_pop();
   OSOBA.cntx_psh();
   OSOBA.index('IDENTYF');
   PPK_UCZ.cntx_psh();
   PPK_UCZ.index('UNIQUE');
   PPK_UCZ.prefix(PPK_UMO.ref());
   {!
   |? OSOBA.prefix(_TAB.IDENTYF,_TAB.NAZWISKO,_TAB.PIERWSZE);
      {? OSOBA.first()
      || _uczestnik:=(PPK_UCZ.find_key(OSOBA.ref()));
         _dtAwwP:={? _uczestnik || _dtAwwPucz || _dtAwwPos ?};
::       Jeżeli nie złożono deklaracji o zaprzestaniu wpłat w okresie pomiędzy przekazaniem informacji, a wznowieniem.
         {? ~exec('spr_wnu','ppk_wnu',OSOBA.ref(),_dt,_dtAwwP,'DRZW',,~_uczestnik)
::          Jeżeli jest deklaracja uniemożliwiająca zapis (już zapisano lub wypłata), usuwamy osobę z listy:
         || {? exec('spr_wnu','ppk_wnu',OSOBA.ref(),_dt,_dtAwwP,'AWW',,~_uczestnik) |
               exec('spr_wnu','ppk_wnu',OSOBA.ref(),_dt,_dtAwwP,'WS60',,~_uczestnik) |
               exec('spr_wnu','ppk_wnu',OSOBA.ref(),_dt,_dtAwwP,'WODW',,~_uczestnik) |
               exec('spr_wnu','ppk_wnu',OSOBA.ref(),_dt,_dtAwwP,'WOU',,~_uczestnik)
            || _next:=_TAB.del(,1)=2
            || _next:=_TAB.next()
            ?}
::       Zdążył z deklaracją rezygnacji w "nowym" okresie PPK, usuwamy osobę z listy:
         || _next:=_TAB.del(,1)=2
         ?}
      || _next:=_TAB.next()
      ?};
      _next
   !};
   PPK_UCZ.cntx_pop();
   OSOBA.cntx_pop()
?};
PPK_UMO.cntx_pop();
_TAB


\par2wydr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Okno ustawienia parametrów do wydruku.
::   WE: [_a][INTEGER] - wersja okna, domyślnie 0 - zachowane działanie dla wywołań bez parametru
::                       1 - dla wydruku ppkliwzn
::                       2 - dla wydruku ppklnwzn
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wer:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_TAB:=tab_tmp(,
:: Data tworzonego komunikatu
   'DT','DATE','Data komunikatu'@,
:: Okres przekazania komunikatu
   'OD','DATE','Od daty'@,
   'DO','DATE','Do daty'@,
:: Sposób powiadomienia osoby
   'EMAIL','STRING[1]','E-mail'@,
   'WYDRUK','STRING[1]','Wydruk'@,
   'BRAK','STRING[1]','Brak'@,
:: Rok wznowienia
   'ROK_WZN','INTEGER','Rok wznowienia'@,
:: Generowanie komunikatów
   'GEN_KOM','STRING[1]','Generuj komunikaty'@
);

::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
_efld_opt:="
   _tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
   {? var_pres('_b')=type_of(SYSLOG)
   || _TAB:=_b
   |? _tryb='1'
   || _TAB:=cur_tab(1,1)
   || return(0)
   ?};
   {? var_pres('_c')=type_of('')
   || _we:=_c
   |? _tryb='1'
   || _we:=cur_win(1,1)
   || return(0)
   ?};
   {? var_pres('_d')=type_of('')
   || _fld:=_d
   |? _tryb='1'
   || _fld:=cur_afld()
   || _fld:=''
   ?};

   {? _fld=''
   || _TAB.efld_opt(_we,'mark=1',,'DT')
   ?};

   {? _fld='' | _fld='EMAIL' | _fld='WYDRUK'
   || _on:=$(_TAB.EMAIL='T' | _TAB.WYDRUK='T');
      _TAB.efld_opt(_we,'enable=%1' [_on],,'OD');
      _TAB.efld_opt(_we,'enable=%1' [_on],,'DO');

      {? _TAB.EMAIL='N' & _TAB.WYDRUK='N'
      || _TAB.BRAK:='T';
         _TAB.efld_opt(_we,'editable=0',,'BRAK');
         {? _fld<>''
         || _TAB.efld_opt(_we,'enable=1,mark=1',,'DT')
         ?}
      || _TAB.efld_opt(_we,'editable=1',,'BRAK')
      ?}

   ?};

   {? _fld='' | _fld='BRAK'
   || _on:=$(_TAB.BRAK='T');
      _TAB.efld_opt(_we,'enable=%1,mark=%1' [_on],,'DT')
   ?};

   1
";

_TAB.blank();
_TAB.OD:=PPK_UMO.OD;
_TAB.DO:=_TAB.DT:=date();
_TAB.EMAIL:=_TAB.WYDRUK:=_TAB.BRAK:='T';
{? _wer=1 | _wer=2
|| _TAB.ROK_WZN:=date()~1
?};
{? _wer=1
|| _TAB.GEN_KOM:='T'
?};
{? _wer=2
|| _TAB.EMAIL:=_TAB.WYDRUK:='N'
?};

_TAB.fld_fml('EMAIL','AFTER_EDIT',_efld_opt);
_TAB.fld_fml('WYDRUK','AFTER_EDIT',_efld_opt);
_TAB.fld_fml('BRAK','AFTER_EDIT',_efld_opt);

_red:=_TAB.mk_edit('Parametry wydruku'@,0,'ppkparwydr');
_TAB.win_esep(_red,'Tworzenie komunikatu'@);
{? _wer=1 | _wer=2
|| _TAB.win_efld(_red,,'ROK_WZN',,,,,,,,'Rok, w którym ma nastąpić wznowienie wpłat'@)
?};
{? _wer=1
|| _TAB.win_efld(_red,,'GEN_KOM',,,,,,,,'Generuj komunikaty dla znalezionych osób'@,'check-box',
      'check_label="%1"' ['Generuj komunikaty dla znalezionych'@],"'T'","'N'")
|? _wer<>2
|| _TAB.win_efld(_red,,'DT',,,,,,,,'Data utworzenia komunikatu'@)
?};
{? _wer<>1 & _wer<>2
|| _TAB.win_esep(_red,'Okres przekazania komunikatu'@);
   _TAB.win_efld(_red,,'OD',,,,,,,,'Początek okresu przekazania komunikatów'@);
   _TAB.win_efld(_red,,'DO',,,,,,,,'Koniec okresu przekazania komunikatów'@);
   _TAB.win_esep(_red,'Sposób powiadomienia'@);
   _TAB.win_efld(_red,,'EMAIL',,,,,,,,'Powiadomienie e-mail''em'@,'check-box',
      'check_label="%1"' ['Osoba została powiadomiona e-mail''em'@],"'T'","'N'");
   _TAB.win_efld(_red,,'WYDRUK',,,,,,,,'Powiadomienie wydrukiem'@,'check-box',
      'check_label="%1"' ['Osoba została powiadomiona wydrukiem'],"'T'","'N'");
   _TAB.win_efld(_red,,'BRAK',,,,,,,,'Brak powiadomienia'@,'check-box',
      'check_label="%1"' ['Osoba nie została jeszcze powiadomiona'@],"'T'","'N'")
?};
exec('ok_esc','#window',_TAB,_red);

_TAB.win_edit(_red);
_efld_opt('*',_TAB,_red);
params_set('wer',_wer);
{? _TAB.edit(
      "  _TAB:=cur_tab();
         _d0:=date(0,0,0);
         _wer:=params_get().wer;

         _brak:=_TAB.BRAK='T';
         _pow:=_TAB.EMAIL='T' | _TAB.WYDRUK='T';

         {? _brak & (_chk:=__CHK.record(_TAB,,{? _wer || 'ROK_WZN' || 'DT' ?}))<>''
         || _chk
         |? ~_wer & _brak & _TAB.DT<PPK_UMO.OD
         || __CHK.err_fld(_TAB,'DT',1,
               'Data nie może być wcześniejsza niż data początku umowy o prowadzenie (%1).'@ [$PPK_UMO.OD]
            );
            'DT'
         |? ~_wer & _brak & PPK_UMO.DO<>_d0 & PPK_UMO.DO<_TAB.DT
         || __CHK.err_fld(_TAB,'DT',1,
               'Data nie może być późniejsza niż data końca umowy o prowadzenie (%1).'@ [$PPK_UMO.DO]
            );
            'DT'

         |? ~_wer & _pow & _TAB.OD<>_d0 & _TAB.OD<PPK_UMO.OD
         || __CHK.err_fld(_TAB,'OD',1,
               'Data nie może być wcześniejsza niż data początku umowy o prowadzenie (%1).'@ [$PPK_UMO.OD]
            );
            'OD'
         |? ~_wer & _pow & _TAB.OD<>_d0 & PPK_UMO.DO<>_d0 & PPK_UMO.DO<_TAB.OD
         || __CHK.err_fld(_TAB,'OD',1,
               'Data nie może być późniejsza niż data końca umowy o prowadzenie (%1).'@ [$PPK_UMO.DO]
            );
            'OD'

         |? ~_wer & _pow & _TAB.DO<>_d0 & _TAB.DO<PPK_UMO.OD
         || __CHK.err_fld(_TAB,'DO',1,
               'Data nie może być wcześniejsza niż data początku umowy o prowadzenie (%1).'@ [$PPK_UMO.OD]
            );
            'DO'
         |? ~_wer & _pow & _TAB.DO<>_d0 & PPK_UMO.DO<>_d0 & PPK_UMO.DO<_TAB.DO
         || __CHK.err_fld(_TAB,'DO',1,
               'Data nie może być późniejsza niż data końca umowy o prowadzenie (%1).'@ [$PPK_UMO.DO]
            );
            'DO'

         |? ~_wer & _pow & _TAB.OD<>_d0 & _TAB.DO<>_d0 & _TAB.OD>_TAB.DO
         || __CHK.err_fld(_TAB,'DO',1,
               'Data nie może być wcześniejsza niż data w polu ""%1"" (%2).'@ [MS.name(_TAB,'OD'),$_TAB.OD]
            );
            'DO'

         || ''
         ?}
      "
   )
|| _TAB.add()
?};
_TAB


\ponad_55
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Lista osób, które mogą zadeklarować dobrowolne uczestnictwo w PPK.
::   WE: _a [REFERENCE] - Wskazanie na rodzaj komunikatu.
::       _b [TABLE] - Tabela z podanymi parametrami wydruk
::   WY: Lista osób.
::----------------------------------------------------------------------------------------------------------------------
_krd:=_a;
_PAR:=_b;
_d0:=date(0,0,0);
_dt:=_PAR.DT;
_TAB:=exec('tab_ucz','ppk_rep');
exec('czytaj','#stalesys',_dt,KST_PPK);

OSOBA.cntx_psh();
OSOBA.index('OSOBA');
OSOBA.prefix();
{? OSOBA.first()
|| PPK_KOM.cntx_psh();
   PPK_KOM.index('OS_KRD');
   _lp:=0;
   {!
   |? {? OSOBA.UR_DATA>(date((_dt~1)-KST_PPK.LAT_MAX,_dt~2,{? _dt~2=2 & _dt~3=29 || 0 || _dt~3 ?})) &
         OSOBA.UR_DATA<=(date((_dt~1)-KST_PPK.LAT_WYM,_dt~2,{? _dt~2=2 & _dt~3=29 || 0 || _dt~3 ?})) &
         ~exec('uczestn','ppk_ucz',PPK_UMO.ref(),OSOBA.ref()) &
         exec('aktywny','ppk_ucz',OSOBA.ref(),_dt) &
         exec('upr2ucze','ppk_ucz',OSOBA.ref())
      || PPK_KOM.prefix(exec('firma','ustawienia'),OSOBA.ref(),_krd);
::       Dodanie komunikatu jeżeli go jeszcze nie ma na datę wskazaną w zmiennej _dt.
         {? ~PPK_KOM.last()
         || _kom:=exec('zap_kom','ppk_kom',_dt,'O','DUOS')
         ?};

::       Uwzględnienie parametru "Komunikaty powiadomień dla współpracowników"
::       Jeśli parametr ustawiony na "N" uwzględniamy na liście również osoby bez wygenerowanych już komunikatów:
         _bezKom:=exec('parrap_b','ppk_uza',1).GEN_KOM<>'T';

         {? PPK_KOM.first() | _bezKom
         || {!
            |? {? (  (_PAR.BRAK='T' & PPK_KOM.PRZ_STAT='N') |
::                   ^ Jeżeli użytkownik chce zobaczyć powiadomienia, które nie zostały wysłane ...
                     (PPK_KOM.PRZ_STAT='T' &
::                   ^ Jeżeli użytkownik chce zobaczyć powiadomienia przekazane ...
                      ((_PAR.WYDRUK='T' & PPK_KOM.PRZ_LIST='N') | (_PAR.EMAIL='T' & PPK_KOM.PRZ_LIST='T')) &
::                      ^... wydrukiem lub mailem ...
                        (_PAR.OD=_d0 | _PAR.OD<=PPK_KOM.PRZ_DATA) & (_PAR.DO=_d0 | PPK_KOM.PRZ_DATA<=_PAR.DO)
::                      ^ ... w podanym okresie ...
                     ) |
                     (var_pres('_kom')>100 & obj_ntab(_kom) & _kom.new & _kom.ref=PPK_KOM.ref()) |
::                   ^ Jeżeli komunikat został przed chwilą dodany ...
                     (_bezKom)
::                   ^ Jeżeli dopuszczamy osoby bez komuniatów (parametr) ...
                  )
               || _TAB.blank(1);
                  _TAB.LP:=_lp+=1;
                  _TAB.NAZWISKO:=OSOBA.NAZWISKO;
                  _TAB.PIERWSZE:=OSOBA.PIERWSZE;
                  _TAB.OBCY:=OSOBA.OBCY;
                  _TAB.IDENTYF:=OSOBA.IDENTYF;
                  _TAB.PESEL:=OSOBA.PESEL;
                  _TAB.PASZPORT:=OSOBA.PASZPORT;
                  _TAB.DRUGIE:=OSOBA.DRUGIE;
                  _TAB.UR_DATA:=OSOBA.UR_DATA;
                  {? +OSOBA.DOWOD
                  || _typ:='Dowód';
                     _sym:=OSOBA.DOWOD
                  |? +OSOBA.PASZPORT
                  || _typ:='Paszport';
                     _sym:=OSOBA.PASZPORT
                  || _typ:=_sym:=''
                  ?};
                  _TAB.TYPDOK:=_typ;
                  _TAB.SYMDOK:=_sym;
                  _r_adr:=spli_str('C,S,K,I',',');
                  {! _ii:=1 .. 4
                  |? _TAB.ADRES=''
                  |! _TAB.ADRES:=exec('adres','osoba',_r_adr[_ii],{? PPK_KOM.DATA=_d0 || _dt || PPK_KOM.DATA ?})
                  !};
                  obj_del(_r_adr);
                  &_r_adr;
                  _TAB.EMAIL:=exec('email','ppk_ucz',OSOBA.ref(),{? PPK_KOM.DATA=_d0 || _dt || PPK_KOM.DATA ?});
                  _TAB.OK:='N';
                  _TAB.PRZ_POW:=
                     {? PPK_KOM.PRZ_DATA=_d0
                     || 'nie'
                     |? PPK_KOM.PRZ_LIST='T'
                     || 'e-mail'
                     |? PPK_KOM.PPK_KRD().PORTAL='T'
                     || 'portal'
                     || 'wydruk'
                     ?};
                  _TAB.DATA:=PPK_KOM.PRZ_DATA;
                  _TAB.add()
               ?};
               PPK_KOM.next()
            !}
         ?};

         {? var_pres('_kom')>100
         || obj_del(_kom)
         ?}
      ?};
      OSOBA.next()
   !};
   PPK_KOM.cntx_pop()
?};
OSOBA.cntx_pop();
_TAB


\powiadom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Przygotowanie listy powiadomień do wydrukowania.
::   WE:
::   WY: Tabela z wskazaniem powiadomień do wydrukowania.
::----------------------------------------------------------------------------------------------------------------------
_select:=0;

:: Przygotowanie okna z wyborem rodzajów komunikatów do wydrukowania bez komunikatów udostępnianych przez portal.
_KRD:=sql('
   select distinct PPK_KOM.PPK_KRD as KRD, PPK_KRD.OPIS as OPIS, \'T\' as WYBOR,
      case when PPK_KRD.RODZAJ=\'O\' then \'Osoba\' else \'Uczestnik\' end as RODZAJ
   from PPK_KOM join PPK_KRD
   where PPK_KOM.PPK_UMO=:_a and PPK_KOM.PRZ_DATA is null and PPK_KRD.PORTAL=\'N\'',KST_PPK.PPK_UMO
);

{? _KRD.first()
|| _wer:=_KRD.mk_sel('Powiadomienia'@,,,'#powiadom',,,_KRD.size()+1,,'N',,,1);
   _KRD.win_fld(_wer,,'OPIS',,,40,,1,'Rodzaj powiadomienia'@,,'Rodzaj drukowanego powiadomienia'@);
   _KRD.win_fld(_wer,,'RODZAJ',,,15,,1,'Podmiot'@,,'Rodzaj wnioskującego [O-osoba/U-uczestnik]'@);
   _KRD.win_fld(_wer,,'WYBOR',,,,,1,'Powiadom'@,,'Czy wybrano powiadomienie [\'T\'/\'N\']'@,2,,"'T'","'N'");
   _KRD.win_act(_wer,,'Formuła','Wybierz'@@,,'Wybór rodzaju powiadomień do wydruku'@,
      "  cur_tab().WYBOR:='T';
         cur_tab().put()
      ",,,1,,,'W'
   );
   _KRD.win_act(_wer,,'Formuła','Pomiń'@@,,'Pominięcie rodzaju powiadomień do wydruku'@,
      "  cur_tab().WYBOR:='N';
         cur_tab().put()
      ",,,1,,,'P'
   );
   _KRD.win_act(_wer,,'Formuła','Drukuj'@@,,'Przygotowanie powiadomień do wydruku'@,
      "sel_exit()",,,,,,'D',,'icon=print'
   );
   _KRD.win_act(_wer,,'Rekord',,,,
      "  _TAB:=cur_tab();
         _wer:=cur_win();

         {? _TAB.sel_size()
         || _hid:='PW';
            _POM:=_TAB.sel_aget();

            {? _POM.first()
            || _TAB.cntx_psh();
               {!
               |? {? _TAB.seek(_POM.REF,,1)
                  || {? _TAB.WYBOR='N'
                     || {? _hid*'W' || _hid:=_hid-1 ?}
                     || {? _hid*'P' || _hid:=1-_hid ?}
                     ?}
                  ?};
                  _POM.next() & +_hid
               !};
               _TAB.cntx_pop()
            ?}
         || {? _TAB.WYBOR='N'
            || _hid:='P'
            || _hid:='W'
            ?};
            _TAB.cntx_psh();
            _TAB.clear();
            {? ~_TAB.find_tab(1,'WYBOR',,'=','T')
            || _hid+='D'
            ?};
            _TAB.cntx_pop()
         ?};
         _TAB.actions_grayed(_wer,_hid)
      "
   );

   _KRD.win_btn(_wer,'text=%1,panel=right,align=begin'['Wybierz'@],'menu:W');
   _KRD.win_btn(_wer,'text=%1,panel=right,align=begin'['Pomiń'@],'menu:P');
   _KRD.win_btn(_wer,'text=%1,panel=bottom,align=end'['Drukuj'@],'menu:D');
   _KRD.win_btn(_wer,'text=%1,icon=xwin16.png:14,panel=bottom,align=end'['Anuluj'@],'key:Esc');

   _KRD.win_sel(_wer);
   {? _KRD.select()
   || _TAB:=sql('
         select PPK_KOM.REFERENCE as REF
         from PPK_KOM
         where
            PPK_KOM.PPK_UMO=:_a and PPK_KOM.PRZ_DATA is null
            and PPK_KOM.PPK_KRD in (select :_b.KRD from :_b where :_b.WYBOR=\'T\')
            and PPK_KOM.OSOBA in (select :_c.OSOBA from :_c)',
         KST_PPK.PPK_UMO,_KRD,exec('dostepne_p','schemat','PPK','P,Z')
      )
   ?}
?};
{? var_pres('_TAB')<>type_of(SYSLOG)
|| _TAB:=tab_tmp(,'REF','STRING[16]','Ref')
?};

_TAB


\txt2tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Zmiana tekstu na tabelę.
::   WE: _a [TABLE] - akronim tabeli.
::       _b [STRING] - akronim pola MEMO.
::       _c [STRING] - separator linii zapisany w tekście.
::       _d [INTEGER] - maksymalna liczba znaków w lini.
::   WY: Tabela z liniami tekstu do oddrukowania.
::----------------------------------------------------------------------------------------------------------------------
_txt:=spli_str(_a.memo_txt(,1,_b),_c);
_dl:=_d;
_lp:=0;
_TXT:=tab_tmp(1,
   'LP','INTEGER','Lp',
   'TEKST','STRING[255]','Tekst'
);

{! _ii:=1 .. obj_len(_txt)
|! {? +_txt[_ii]>_dl
   || STR.split(_txt[_ii]);
      {!
      |? _TXT.LP:=_lp+=1;
         _TXT.TEKST:=STR.line(_dl);
         _TXT.add();
         STR.next()
      !}
   || _TXT.LP:=_lp+=1;
      _TXT.TEKST:=_txt[_ii];
      _TXT.add()
   ?}
!};
_TXT


\list_akt_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przygotowanie tabeli z danymi do wydruku "Lista aktywnych uczestników"
::   WE: _a [DATE] - data raportu
::       _b [INTEGER] - 0/1 Czy analizować deklaracje rezygnacji?
::       _c [INTEGER] - 0/1 Czy analizować wnioski o wypłatę po 60 r. życia?
::       _d [INTEGER] - Okres deklaracji/wniosku, pozwalający na dołączenie uczestnika na listę pomimo posiadania
::                      takiej deklaracji/wniosku:
::                         0 - "Wszystkie"
::                         1 - "Złożone w miesiącu raportowania"
::                         2 - "Bez deklaracji/wniosków" - tylko uczestnicy bez deklaracji rez./wniosków o wypł.
::       _e [INTEGER] - 0/1 Czy do listy dodawać tylko aktywnych uczestników?
::       _f [INTEGER] - 0/1 Czy do listy dodawać uczestników objętych blokadą ekonomiczną?
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tNum:=type_of(0);
{? var_pres('_a')<>type_of(date()) | var_pres('_b')<>_tNum | var_pres('_c')<>_tNum | var_pres('_d')<>_tNum |
   var_pres('_e')<>_tNum | var_pres('_f')<>_tNum
|| FUN.error('Błąd parametrów wejściowych'@);
   return()
?};
_dtRap:=_a;
_anDRZW:=_b;
_anWS60:=_c;
_okrDW:=_d;
_tylkAkt:=_e;
_zWB25:=_f;

exec('czytaj','#stalesys',_dtRap,KST_PPK,'PPK_UMO');
{? KST_PPK.PPK_UMO=null()
|| exec('init','ppk_umo',_dtRap)
?};

_d0:=date(0,0,0);
_dtOd:=date(_dtRap~1,_dtRap~2,1);
_dtDo:=date(_dtRap~1,_dtRap~2,0);
:: Przygotowanie tabeli z danymi:
_firma:=exec('firma','ustawienia');
_query:='select '+
               'to_date(\'0000/00/00\') as DT, '+
               'to_date(\'0000/00/00\') as DTOD, '+
               'space(8) as SYMBOL, '+
               'P.T as T, '+
               'P.REFERENCE as PREF, '+
               'OSOBA.REFERENCE as OSOBAREF, '+
               'OSOBA.PIERWSZE as PIERWSZE, '+
               'OSOBA.NAZWISKO as NAZWISKO, '+
               'UD_SKL.SYMBOL as JEDN, '+
               'CP.CP as CP, '+
               'F_ZATR.KOD as FZ, '+
               'space(255) as UWAGI '+
        'from PPK_UCZ '+
        'join OSOBA using(PPK_UCZ.OSOBA, OSOBA.REFERENCE) '+
        'join P using(PPK_UCZ.OSOBA, P.OSOBA) '+
        'join UD_SKL using(P.WYDZIAL, UD_SKL.REFERENCE) '+
        'join CP using(P.CP, CP.REFERENCE) '+
        'join F_ZATR using(P.F_ZATR, F_ZATR.REFERENCE) '+

        'where '+
               'PPK_UCZ.FIRMA=:_a '+
               'and PPK_UCZ.PPK_UMO=:_b '+
               {? _tylkAkt=1 || 'and (PPK_UCZ.AKTYWNY=\'T\' and P.ZA=\'T\') ' || ' ' ?}+
        'order by NAZWISKO, PIERWSZE, PREF';
_LISTA:=sql(_query,_firma,KST_PPK.PPK_UMO);

{? _LISTA.first()
|| {!
   |? _del:=0;
      OSOBA.cntx_psh();
      OSOBA.seek(_LISTA.OSOBAREF,,1);
      _osoba:=OSOBA.ref();
      OSOBA.cntx_pop();
::    Sprawdzenie uprawnień użytkownika do osoby:
      {? ~exec('upr2ucze','ppk_ucz',_osoba)
      || _del:=_LISTA.del()
      ?};
::    Wywalenie z listy zleceniobiorców bez aktywnej umowy umowy zlecenia:';
      {? ~_del & _tylkAkt=1 & -_LISTA.FZ<>'p'
      || ZC.cntx_psh();
         ZC.index('ZLECDW');
         ZC.prefix(_osoba);
         {? ~(ZC.find_ge(_dtRap) & ZC.DU<=_dtRap)
         || _del:=_LISTA.del()
         ?};
         ZC.cntx_pop()
      ?};
::    Wywalenie z listy uczestnika z blokadą ekonomiczną:
      {? ~_del & ~_zWB25
      || _dtWB25B:=exec('spr_wnu','ppk_wnu',_osoba,_d0,_dtRap,'WB25B',1);
         _dtWB25W:=exec('spr_wnu','ppk_wnu',_osoba,_dtWB25B,_dtRap,'WB25W',1);
         _dtDOWU25:=exec('spr_wnu','ppk_wnu',_osoba,_dtWB25B,_dtRap,'DOWU25',1);
         {? _dtWB25B>_dtWB25W & _dtWB25B>_dtDOWU25
         || _del:=_LISTA.del()
         ?}
      ?};
::    Sprawdzanie deklaracji/wniosków:
      {? ~_del & (_anDRZW | _anWS60)
      || _dtDRZW:={? _anDRZW || exec('spr_wnu','ppk_wnu',_osoba,_d0,_dtRap,'DRZW',1) || _d0 ?};
         _dtWS60:={? _anWS60 || exec('spr_wnu','ppk_wnu',_osoba,_d0,_dtRap,'WS60',1) || _d0 ?};
::       Data i symbol deklaracji/wniosku (ostatniego):
         _symDW:='';
         _dtDW:=_d0;
         {? _dtDRZW>_dtWS60
         || _symDW:='DRZW';
            _dtDW:=_dtDRZW
         |? _dtWS60>_d0
         || _symDW:='WS60';
            _dtDW:=_dtWS60
         ?};

         {? _dtDW>_d0
         || _dtAWW:=exec('spr_wnu','ppk_wnu',_osoba,_dtDW,_dtRap,'AWW',1);
            _dtWODW:=exec('spr_wnu','ppk_wnu',_osoba,_dtDW,_dtRap,'WODW',1);
            _dtWOU:=exec('spr_wnu','ppk_wnu',_osoba,_dtDW,_dtRap,'WOU',1);
::          Jeśli po wniosku/deklaracji nie było AWW/WODW/WOU:
            {? _dtAWW=_d0 & _dtWODW=_d0 & _dtWOU=_d0
            || _werWym:=0;
               _dt:=_d0;
               PPK_WNU.cntx_psh();
               PPK_WNU.index('UMO_WRD');
               PPK_WNU.prefix(KST_PPK.PPK_UMO,_osoba,_symDW);
               {? PPK_WNU.find_key(_dtDW)
               || _werWym:=(PPK_WNU.WER_WYM='T');
                  _dt:=PPK_WNU.DATA
               ?};
               PPK_WNU.cntx_pop();
::             Jeśli deklaracja/wniosek jest niezweryfikowana, to dodaj uwagę i zachowaj zapis na liście uczestników:
               {? _werWym
               || _LISTA.SYMBOL:=_symDW;
                  _LISTA.DTOD:=_dtDW;
                  _LISTA.DT:=_dt;
                  _txt:={? _symDW='DRZW' || 'Deklaracja niezweryfikowana'@ || 'Wniosek niezweryfikowany'@ ?};
                  _LISTA.UWAGI:='%1.'[_txt];
                  _LISTA.put()
::             Deklaracja/wniosek jest zweryfikowana:
               |? _okrDW=2
::                W opcjach wydruku zaznaczono  "Bez deklaracji/wniosków", usuwamy wpis:
               || _del:=_LISTA.del()
::                Pokazujemy ze wszystkimi deklaracjami/wnioskami lub tylko z miesiąca generowania raportu:
               |? _okrDW=0 | _okrDW=1
               || {? _okrDW=0 | (_okrDW=1 & _dtDW>=_dtOd & _dtDW<=_dtDo)
                  || _LISTA.SYMBOL:=_symDW;
                     _LISTA.DTOD:=_dtDW;
                     _LISTA.DT:=_dt;
                     _LISTA.UWAGI:='';
                     _LISTA.put()
::                Usuwamy z listy te z deklaracjami/wnioskami spoza miesiąca generowania raportu:
                  |? _dtDW<_dtOd | _dtDW>_dtDo
                  || _del:=_LISTA.del()
                  ?}
               ?}

            || {? _symDW='WS60'
::                Było AWW/WODW/WOU po WS60:
               || _LISTA.SYMBOL:=_symDW;
                  _LISTA.DTOD:=_dtDW;
                  PPK_WNU.cntx_psh();
                  PPK_WNU.index('UMO_WRD');
                  PPK_WNU.prefix(KST_PPK.PPK_UMO,_osoba,_symDW);
                  {? PPK_WNU.find_key(_dtDW)
                  || _LISTA.DT:=PPK_WNU.DATA
                  ?};
                  PPK_WNU.cntx_pop();
                  _LISTA.UWAGI:='Błędnie wprowadzony wniosek o ponowne naliczanie wpłat'@;
                  _LISTA.put()
               ?}
            ?}
         ?}
      ?};

      _del | _LISTA.next()
   !}
?};
_LISTA


\list_przych_pit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Przygotowanie tabeli z danymi do wydruku "Lista nierozliczonych przychodów PPK"
::   WE: [_a][INTEGER] - rok raportu, domyślnie bieżący rok date()~1
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_rok:={? var_pres('_a')=type_of(0) || _a || date()~1 ?};
_query:='select '+
               'PPK_POD.REFERENCE as REFERENCE, '+
               'PPK_POD.WYL_R as WYL_R, '+
               'PPK_POD.WYL_M as WYL_M, '+
               'PPK_POD.WYL_LT as WYL_LT, '+
               'PPK_POD.POD_LT as POD_LT, '+
               'PPK_POD.POD_R as POD_R, '+
               'PPK_POD.WYL_KW as WYL_KW, '+
               'PPK_POD.POD_LICZ as POD_LICZ, '+
               'P.T as T, '+
               'P.REFERENCE as PREF, '+
               'OSOBA.REFERENCE as OSOBAREF, '+
               'OSOBA.PIERWSZE as PIERWSZE, '+
               'OSOBA.NAZWISKO as NAZWISKO, '+
               'UD_SKL.SYMBOL as JEDN, '+
               'CP.CP as CP, '+
               'F_ZATR.KOD as FZ, '+
               '\':_b\' as UWAGI, '+
               'ROW_NUMBER() over (order by NAZWISKO, PIERWSZE, PREF) as LP '+
        'from PPK_POD '+
        'join P using(PPK_POD.P, P.REFERENCE) '+
        'join OSOBA using(P.OSOBA, OSOBA.REFERENCE) '+
        'join UD_SKL using(P.WYDZIAL, UD_SKL.REFERENCE) '+
        'join CP using(P.CP, CP.REFERENCE) '+
        'join F_ZATR using(P.F_ZATR, F_ZATR.REFERENCE) '+

        'where '+
               'P.FIRMA=:_a '+
               'and PPK_POD.POD_LT=\'\' and PPK_POD.POD_R=:_c and PPK_POD.POD_LICZ<>\'N\' '+
               'and PPK_POD.P in (select :_d.REF from :_d) '+
        'order by NAZWISKO, PIERWSZE, PREF';
sql(_query,exec('ref_firma','ustawienia'),255*' ',_rok,exec('dostepne_p','schemat','PPK','P,Z'))

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:38 1e099e665154e116dafb4f5456548463f0fd1073bea4ea71057d8a46b1e43e4eccfec5b7bd3b79012cc9092c224e197979ac6e8667758dedc7f40572f107b532d47f9fa7859187f020650a6fde17e472d76534abfe63258a2944fbe8057e907db4ef1e9540a80e093dfd10512c530a5805e15a2afd0a4667cc49022d8e054685
