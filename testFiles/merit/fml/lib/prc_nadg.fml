:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: prc_nadg.fml
:: Utworzony: 18.09.2019
:: Autor: TMR
::======================================================================================================================
:: Zawartość: Definicje funkcji obsługi wniosków o pracę w nadgodzinach.
::======================================================================================================================


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Tworzy zapis w tabeli R_NADG wniosków o nadgodziny
::   WE: _a [REFERENCE] - wskazanie na wniosek w obiegu EDOKUM.ref
::       _b [REFERENCE] - wskazanie na pracownika P.ref
::       _c [DATE]      - data wnioskowanych nadgodzin
::       _d [TIME]      - godzina od
::       _e [TIME]      - godzina do
::       _f [TIME]      - czas
::       _g [STRING]    - czy przed rozpoczeciem dnia
::       _h [STRING]    - opis
::       _i [STRING]    - typ nadgodzin N-normale (wykorzystywane) / D-dyżurowe (obecnie nie wykorzystywane)
::       _j [STRING]    - rodzaj wniosku W-składany przez pracownika / P-polecenie pracy przez przełożonego
::       _k [STRING]    - czy do wyplaty
::       _l [REFERENCE] - wskazanie na konto kosztowe KK.ref
::   WY: -1/0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=-1;
_edokum:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
 _p_ref:={? var_pres('_b')=type_of(null()) || _b || return(_result) ?};
  _data:={? var_pres('_c')=type_of(date()) || _c || return(_result) ?};
  _g_od:={? var_pres('_d')=type_of(time()) || _d || return(_result) ?};
  _g_do:={? var_pres('_e')=type_of(time()) || _e || return(_result) ?};
  _czas:={? var_pres('_f')=type_of(time()) || _f || return(_result) ?};
 _przed:={? var_pres('_g')=type_of('')     || _g || return(_result) ?};
  _opis:={? var_pres('_h')=type_of('')     || _h || ''              ?};
   _typ:={? var_pres('_i')=type_of('')     || _i || return(_result) ?};
_rodzaj:={? var_pres('_j')=type_of('')     || _j || return(_result) ?};
  _wypl:={? var_pres('_k')=type_of('')     || _k || 'N'             ?};
    _kk:={? var_pres('_l')=type_of(null()) || _l || null()          ?};

R_NADG.cntx_psh();
R_NADG.index('PRDATA');
R_NADG.prefix();
R_NADG.blank();
R_NADG.EDOKUM:=_edokum;
R_NADG.P:=_p_ref;
R_NADG.DATA:=_data;
R_NADG.POCZATEK:=_g_od;
R_NADG.KONIEC:=_g_do;
R_NADG.CZAS:=_czas;
R_NADG.OPIS:=_opis;
R_NADG.TYP:=_typ;
R_NADG.RODZAJ:=_rodzaj;
R_NADG.CZY_POCZ:=(1+_przed);
R_NADG.CZY_WYPL:=(1+_wypl);
R_NADG.KK:=_kk;
_result:=R_NADG.add(1);
R_NADG.cntx_pop();
_result


\exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Sprawdza czy jest już zapis w tabeli wniosków o pracę w nadgodzinach
::   WE: _a [REFERENCE] - wskazanie na pracownika P.ref
::       _b [DATE]      - data badania
::       _c [STRING]    - typ nadgodzin
::      [_d][REFERENCE] - wskazanie na wniosek do pominięcia przy sprawdzaniu
::   WY: -1/0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=-1;
_p_ref:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
 _data:={? var_pres('_b')=type_of(date()) || _b || return(_result) ?};
  _typ:={? var_pres('_c')=type_of('')     || _c || return(_result) ?};
  _ref:={? var_pres('_d')=type_of(null()) || _d || null()          ?};

_result:=0;
R_NADG.cntx_psh();
R_NADG.index('TYPPRAC');
R_NADG.prefix(_typ,_p_ref,_data);
{? R_NADG.first()
|| {? (_ref=null()) | (R_NADG.ref()<>_ref)
   || _result:=1
   ?}
?};
R_NADG.cntx_pop();
_result


\trig_add_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Trigger przed add
::  TAG: <TRIGGER>
::----------------------------------------------------------------------------------------------------------------------
exec('trig_mod_b','prc_nadg','add','b')


\trig_add_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Trigger po add
::  TAG: <TRIGGER>
::----------------------------------------------------------------------------------------------------------------------
{? _a || exec('trig_mod_b','prc_nadg','add','a') ?}


\trig_put_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Trigger przed put
::  TAG: <TRIGGER>
::----------------------------------------------------------------------------------------------------------------------
exec('trig_mod_b','prc_nadg','put','b')


\trig_put_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Trigger po put
::  TAG: <TRIGGER>
::----------------------------------------------------------------------------------------------------------------------
{? _a || exec('trig_mod_b','prc_nadg','put','a') ?}


\trig_mod_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Wspólna formuła dla triggerów przed add i put
::  TAG: <TRIGGER>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_trig:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
 _typ:={? var_pres('_b')=type_of('') || _b || return(_result) ?};

{? _typ='b' & (_trig='add' | _trig='put')
|| {? R_NADG.CZY_POCZ='G'
   || exec('czas_oblicz','prc_nadg')
   || R_NADG.POCZATEK:=R_NADG.CZAS
   ?};
   _result:=1
?};
{? _typ='a' & (_trig='add' | _trig='put')
|| _tab:=exec('tab_D','prc_nadg');
   _tab.D:=R_NADG.DATA;
   _tab.add(1);
   exec('ustaw_grafik','prc_nadg',R_NADG.P,_tab);
   _result:=~~
?};
_result


\r_nadg_wer_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuła przed dołączeniem wniosku o pracę w godzinach nadliczbowych w oknie WER tabeli R_NADG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R_NADG.blank(1);
R_NADG.P:=P.ref();
R_NADG.DATA:=date();
R_NADG.TYP:='N';
R_NADG.RODZAJ:='P';
R_NADG.CZY_POCZ:='N';

exec('r_nadg_efld_opt','prc_nadg','*',R_NADG,'RED');
_wyn:={? R_NADG.edit(" exec('r_nadg_wer_ar','prc_nadg')")
      || R_NADG.add(1)
      ?};
_wyn


\r_nadg_wer_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuła po dołączeniu wniosku o pracę w godzinach nadliczbowych w oknie WER tabeli R_NADG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R_NADGK.prefix(R_NADG.ref())


\r_nadg_wer_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuła przed poprawieniem wniosku o pracę w godzinach nadliczbowych w oknie WER tabeli R_NADG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('can_be_mod','prc_nadg',R_NADG.DATA);
{? _result=''
|| exec('r_nadg_efld_opt','prc_nadg','*',R_NADG,'RED')
?};
_result=''


\r_nadg_wer_ap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuła po poprawieniu wniosku o pracę w godzinach nadliczbowych w oknie WER tabeli R_NADG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
~~


\r_nadg_wer_ad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Po usunięciu rekordu R_NADG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('can_be_mod','prc_nadg',R_NADG.DATA,'del')=''
|| {? FUN.ask('Czy na pewno usunąć wniosek?'@)
   || exec('delete_r_nadg','prc_nadg',R_NADG.ref())
   ?}
?}


\r_nadg_wer_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Rekord przed w oknie wertowania WER dla tabeli R_NADG
::   WE: _a - 0/1 - czy ostatni (bieżący) rekord
::   WY:
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:=exec('czy_pocz_opis','prc_nadg',R_NADG.CZY_POCZ);
exec('r_nadg_efld_opt','prc_nadg','*',R_NADG,'RED');

:: ustawienie maski EDOKUM
{? R_NADG.EDOKUM<>null() & (ref_name(R_NADG.EDOKUM)<>EDOKUM.name())
|| EDOKUM.use(ref_name(R_NADG.EDOKUM))
?};
~~


\can_be_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Sprawdza czy wniosek może być modyfikowany dla wskazanej daty.
::   WE: _a  [DATE]   - data wniosku
::      [_b] [STRING] - akcja wykonywana na wniosku ('add','put','del')
::      [_c] [NUMBER] - czy pokazywać komunikaty (domyślnie 1-tak)
::   WY: ''/lub komunikat o błądzie
::----------------------------------------------------------------------------------------------------------------------
_result:='';
 _data:={? var_pres('_a')=type_of(date()) || _a || return(_result) ?};
_akcja:={? var_pres('_b')=type_of('')     || _b || ''              ?};
  _msg:={? var_pres('_c')=type_of(0)      || _c || 1               ?};


{? exec('get_msc_status','grafik',_data)='Z'
|| _result:='Miesiąc %1 jest zamknięty do rozliczenia.'@[_data$8]+'\n'+
           {? _akcja='add'
           || 'Nie można dodać wniosku.'@
           |? _akcja='del'
           || 'Nie można usunąć wniosku.'@
           || 'Nie można modyfikować wniosku.'@
           ?};
   {? _msg || FUN.info(_result) ?}
?};
_result


\czy_pocz_opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Zwraca opis do warotści pola R_NADG.CZY_POCZ
::   WE: _a [STRING] - kod pola
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_czy_pocz:={? var_pres('_a')=type_of('') || _a || return('') ?};
{? _czy_pocz='N'
|| 'Po planowanej pracy'@
|? _czy_pocz='T'
|| 'Przed planowaną pracą'@
|? _czy_pocz='G'
|| 'W dniu wolnym od pracy'@
|| ''
?}


\czy_pocz_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Zwraca odpowiednią ikonę.
::   WE: _a [STRING] - kod pola
::   WY: napis określający ikonę
::----------------------------------------------------------------------------------------------------------------------
_czy_pocz:={? var_pres('_a')=type_of('') || _a || return('') ?};
{? _czy_pocz='N'
|| 'xwin16.png:28'
|? _czy_pocz='T'
|| 'xwin16.png:27'
|? _czy_pocz='G'
|| 'xwin16.png:83'
|| 'xwin16.png:110'
?}


\czas_oblicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Wylicza wartość pola CZAS na podstawie wartości pól POCZATEK i KONIEC
::       Kontekst tabeli musi być ustalony
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R_NADG.CZAS:={? R_NADG.KONIEC>=R_NADG.POCZATEK
             || R_NADG.KONIEC-R_NADG.POCZATEK
             || R_NADG.KONIEC+time(24,0,0)-R_NADG.POCZATEK
             ?}


\r_nadg_wer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Rekord po w oknie wertowania WER dla tabeli R_NADG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=__CHK.record(R_NADG,,'DATA','OPIS');
{? _result<>''
|| return(_result)
?};
:: sprawdzenie czy miesiąc jest otwarty do rozliczenia
{? exec('can_be_mod','prc_nadg',R_NADG.DATA,'add')<>''
|| return('DATA')
?};
_typ:=exec('typ_dnia','form_ob',$R_NADG.P,R_NADG.DATA);
_typ:=1+(1-_typ);
{? (_typ='R') & (R_NADG.CZY_POCZ='G')
|| FUN.emsg('Dla wskazanej daty pole "%1" nie może przyjmować wartości "W dniu wolnym od pracy".'@['Nadgodziny']);
   return('CZY_POCZ')
|? (_typ<>'R') & (R_NADG.CZY_POCZ<>'G')
|| FUN.emsg('Dla wskazanej daty pole "%1" musi być ustawione na wartość "W dniu wolnym od pracy".'@['Nadgodziny']);
   return('CZY_POCZ')
?};

{?(R_NADG.CZY_POCZ='T' | R_NADG.CZY_POCZ='N')
|| {? R_NADG.CZAS=*0
   || FUN.emsg('Pole "%1" musi być wypełnione.\nNależy uzupełnić brakujące informacje.'@['Liczba nadgodzin']);
      _result:='CZAS'
   || R_NADG.POCZATEK:=R_NADG.CZAS
   ?}
|| _result:=__CHK.record(R_NADG,,'KONIEC');
   {? (_result='') & R_NADG.POCZATEK=*0
   || {? ~FUN.ask('W polu "%1" ustawiono godzinę %2\nCzy na pewno zapisać wniosek?'@[MS.name(R_NADG,'POCZATEK'),(*0)$3])
      || _result:='POCZATEK'
      ?}
   ?}
?};
{? _result='' & exec('exist','prc_nadg',R_NADG.P,R_NADG.DATA,'N',R_NADG.ref())>0
|| FUN.emsg('W systemie widnieje już wniosek o pracę w nadgodzinach na datę: %1'@[$R_NADG.DATA]);
   _result:='DATA'
?};
_result


\r_nadg_rodzaj_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Przed redagowaniem pola RODZAJ tabeli R_NADG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\r_nadg_czas_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Przed redagowaniem pola CZAS tabeli R_NADG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:=exec('typ_dnia','form_ob',$R_NADG.P,R_NADG.DATA);
_typ:=1+(1-_typ);
{? _typ='S' | _typ='W' || 0 || 1 ?}


\r_nadg_data_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Po redagowaniu pola DATA tabeli R_NADG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:=exec('typ_dnia','form_ob',$R_NADG.P,R_NADG.DATA);
_typ:=1+(1-_typ);
EDIT_VAR.TN:=R_NADG.CZY_POCZ:={? _typ='S' | _typ='W' || 'G' || 'N' ?};
exec('r_nadg_efld_opt','prc_nadg','*',R_NADG,'RED')


\r_nadg_poczatek_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Po redagowaniu pola POCZATEK tabeli R_NADG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('czas_oblicz','prc_nadg')


\r_nadg_koniec_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Po redagowaniu pola KONIEC tabeli R_NADG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('czas_oblicz','prc_nadg')


\r_nadg_poczatek_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Przed wyświetleniem pola POCZATEK tabeli R_NADG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R_NADG.CZY_POCZ='G'


\r_nadg_koniec_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Przed wyświetleniem pola KONIEC tabeli R_NADG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R_NADG.CZY_POCZ='G'


\r_nadg_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli R_NADG. Formuła wywoływana jest w dwóch
::       kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr istotny dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(H)
|| _tab:=_b
|? _tryb='1' & ~_webTerm
|| _tab:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1' & ~_webTerm
|| _we:=cur_win(1,1)
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1' & ~_webTerm
|| _fld:=cur_afld()
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld=''
|| _val:=(R_NADG.CZY_POCZ='G');
:: Redagowanie.
   _set(_tab,_we,_grp_ident,'enable=%1,mark=%2'[$_val,$(~_webTerm & _val)],R_NADG,'CZAS');
   _set(_tab,_we,_grp_ident,'enable=%1'[$(~_val)],R_NADG,'CZY_POCZ');
   _set(_tab,_we,_grp_ident,'enable=%1'[$_val],EDIT_VAR,'TN');
   _set(_tab,_we,_grp_ident,'enable=%1,mark=%2'['1','1'],R_NADG,'OPIS')
?};

{? _fld='' | _fld='DATA'
|| _sval:='1';
   _set(_tab,_we,_grp_ident,'mark=%1'[_sval],R_NADG,'DATA')
?};

{? _fld='' | _fld='GODZ'
|| _typ:=exec('typ_dnia','form_ob',$R_NADG.P,R_NADG.DATA);
   _typ:=1+(1-_typ);
   _val:=(_typ='R');
   _set(_tab,_we,_grp_ident,'enable=1,mark=%1'[$(~_webTerm & _val)],R_NADG,'CZAS');
   _val:=~_val;
   _set(_tab,_we,_grp_ident,'enable=%1,mark=%2'[$_val,$(~_webTerm & _val)],R_NADG,'POCZATEK');
   _set(_tab,_we,_grp_ident,'enable=%1,mark=%2'[$_val,$(~_webTerm & _val)],R_NADG,'KONIEC')
?};

1


\add_elog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Dodawanie zapisow w tabeli logowan EDOKLOG
::   WE: _a [REFERENCE] - wskazanie na rekord w EDOKUM
::       _b [STRING]    - opis operacji
::   WY: -1/0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=-1;
_edokum:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
  _opis:={? var_pres('_b')=type_of('')     || _b || return(_result) ?};

{? _edokum=null() || return(1) ?};

_result:=0;
EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.prefix();
{? EDOKUM.seek(_edokum)
|| EDOKLOG.cntx_psh();
   _maska:=(EDOKUM.name()+2);
   EDOKLOG.use('skid_d'+_maska);
   EDOKLOG.index('DISP');
   EDOKLOG.prefix();
   EDOKLOG.blank(1);
   EDOKLOG.EDOKUM:=_edokum;
   EDOKLOG.OPIS:=_opis;
   EDOKLOG.DATA:=date();
   EDOKLOG.TIME:=time();
   EDOKLOG.USERS:=OPERATOR.USER;
   _result:=EDOKLOG.add();
   EDOKLOG.cntx_pop()
?};
EDOKUM.cntx_pop();
_result


\delete_r_nadg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Kasuje podany rekord tabeli R_NADG (wykonywane w transakcji!!!)
::   WE: _a - R_NADG.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_ref:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};

:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_can_continue:=1;

:: założenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

R_NADG.cntx_psh();
R_NADG.index('TYPPRAC');
R_NADG.clear();
{? R_NADG.seek(_ref)
|| {? exec('clean_r_nadg','prc_nadg',_ref)>0
   || _log:=exec('add_elog','prc_nadg',R_NADG.EDOKUM,
                 'Usunięcie wniosku o pracę w nadgodzinach na dzień %1 przez użytkownika "%2".'@
                  [$R_NADG.DATA,OPERATOR.USER().KOD]);
      _tab:=exec('tab_D','prc_nadg');
      _tab.D:=R_NADG.DATA;
      _tab.add(1);
      _p_ref:=R_NADG.P;
      {? _log>0 & R_NADG.del(,1)>0
      || exec('ustaw_grafik','prc_nadg',_p_ref,_tab);
         _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};
R_NADG.cntx_pop();

{? _result<0
|| undo()
?};
{? _mydo || end() ?};
_result


\clean_r_nadg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Czysci powiazania do rekordu tabeli R_NADG
::   WE: _a - R_NADG.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_ref:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};

{? do_state()=2 || return(-100) ?};

_can_continue:=1;
:: założenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

:: --- powiązania do R_NADG---
_can_continue:=exec('delete4r_nadg','prc_nadg',_ref);

:: --- wszystkie powiazania usuniete? ---
{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};
_result


\delete4r_nadg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Kasuje rekordy tabeli R_NADGK (wykonywane w transakcji!!!) dla wskaznego rekordu _ref
::   WE: _a - R_NADG.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_ref:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};

_can_continue:=1;

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(-100) ?};

:: zalozenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

R_NADGK.cntx_psh();
R_NADGK.index('WNIOSEK');
R_NADGK.prefix(_ref);
{? R_NADGK.first()
|| {!
   |? _can_continue:=exec('delete_r_nadgk','prc_nadg',R_NADGK.ref());
      _can_continue>0 & R_NADGK.first()
   !}
?};
R_NADGK.cntx_pop();

{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || end() ?};
_result


\delete_r_nadgk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Kasuje podany rekord tabeli R_NADGK (wykonywane w transakcji!!!)
::   WE: _a - R_NADGK.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_ref:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};

:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_can_continue:=1;

:: założenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

R_NADGK.cntx_psh(); R_NADGK.clear();
{? R_NADGK.seek(_ref)
|| {? R_NADGK.del(,1)>0
   || _result:=1
   || undo();
      _result:=-3
   ?}
|| _result:=0
?};
R_NADGK.cntx_pop();

{? _result<0
|| undo()
?};
{? _mydo || end() ?};
_result


\tab_D
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuła tworzy tabelę tymczasową wykorzystywaną w formule ustawiającej grafik
::   WE:
::   WY: tabela
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(1,'D','DATE','Data')


\ustaw_grafik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Dla dni przekazanych w tabeli generuje dzień w warstwie grafiku
:: WE: [_a] [REFERENCE] - wskazanie na pracownika
::     [_b] [DICT]      - tabela z dniami
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null()) || _a || null()                    ?};
  _tab:={? var_pres('_b')=type_of(P)      || _b || exec('tab_D','prc_nadg')  ?};

{? _tab.first()
|| P.cntx_psh();
   P.use('pracowni');
   P.index('PRACOZAT');
   P.prefix();
   A_OKRP.cntx_psh();
   A_OKRP.use('x_okrpi');
   A_OKRP.prefix();
   {!
   |? {? _p_ref & P.seek(_p_ref)
      || _okrp:=exec('find_okr','grafik',_p_ref,_tab.D,'okrp');
         {? _okrp & A_OKRP.seek(_okrp) & (~-exec('get_msc_status','grafik',_tab.D))<>'Z'
         || _mydo:=do_state()=0;
            {? _mydo || do() ?};
            exec('del_plan','grafik',_p_ref,_tab.D,_tab.D,'G',A_OKRP.OKR);
            exec('dodaj_do_buff','grafik','G',_p_ref,A_OKRP.OKR,A_OKRP.OD,A_OKRP.DO,0,1,_tab.D,_tab.D);
            {? _mydo || end() ?}
         ?}
      ?};
      _tab.next()
   !};
   A_OKRP.cntx_pop();
   P.cntx_pop()
?};
&_tab


\dend
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PM & TMR [19.42]
:: OPIS: Funkcja zwraca koniec doby pracowniczej.
:: UWAGA: Wymagane jest ustawienia obiektu __KAL
::   WE: _a [DATA] - data badania
::   WY: _ret.DATA
::       _ret.CZAS
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('DATA','CZAS');
_result.DATA:=date(0,0,0);
_result.CZAS:=time(0,0,0);

_dzien:={? var_pres('_a')=type_of(date()) || _a || return(_result) ?};

:  ustalenie czy wyliczamy prace w nastepnej dobie
_next_p:=*0;

:: jeżeli nie udało się wczytać dnia z kalendarza to nie ma sensu dalej sprawdzać
{? ~__KAL.get_day(_dzien) || return(_result) ?};

:: poczatek nastepuje po 24 godzinach od poczatku dnia poprzedniego roboczego wg planu
:: dla swiat pobierane jest rozpoczęcie doby niedzielniej/świątecznej z obiektu __HARM
_result.DATA:=KAL_DEF.DATA+1;
_result.CZAS:=KAL_DEF.POCZATEK;
{? __KAL.all_holiday(_dzien)
|| _next_p:=__HARM.sunday(_dzien)
|? KAL_DEF.TYP='W'
|| _dn_wolny:=1;
   __KAL.get_day(_dzien+_dn_wolny);
   {? __KAL.all_holiday(_dzien+_dn_wolny)
   || _next_p:=__HARM.sunday(_dzien)
   || _next_p:=KAL_DEF.POCZATEK
   ?}
|| __KAL.get_day(_dzien+1);
   {? __KAL.all_holiday(_dzien+1)
   || _next_p:=__HARM.sunday(_dzien)
   || __KAL.get_day(_dzien);
      _dn_wolny:=0;
      {? __KAL.all_holiday(_dzien)
      || _next_p:=__HARM.sunday(_dzien)
      || _next_p:=KAL_DEF.POCZATEK
      ?}
   ?}
?};
__KAL.get_day(_dzien);
_result.CZAS:=_next_p;
_result


\ile_nadg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Aktualizuje bufor Grafiku dla pracownika o wnioski w nadgodzinach
::  TAG: <TRIGGER>
::UWAGA: tylko na potrzeby formuły'dodaj_do_buff' - rekord tabeli KAL_BUFF musi być ustalony.
::   WE: _a [REFERENCE] - wskazanie na pracownika
::       _b [DATE]      - data zdarzenia (wejścia)
::       _c [TIME]      - czas zaplanowany
::   WY: ilosc nadgodzin TIME
::----------------------------------------------------------------------------------------------------------------------
_ile_nadg:=obj_new('ALL','POCZATEK','KONIEC','GSTART','TYPE');
_ile_nadg.ALL:=_ile_nadg.POCZATEK:=_ile_nadg.KONIEC:=_ile_nadg.GSTART:=time(0,0,0);
_ile_nadg.TYPE:='';

{? _<3 || return(_ile_nadg) ?};
_p_ref:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
 _data:={? var_pres('_b')=type_of(date()) || _b || return(_result) ?};
 _czas:={? var_pres('_c')=type_of(time()) || _c || return(_result) ?};

:: wyłączenie triggerów dla tabeli R_NADG na czas wykonywania funkcji
R_NADG.trig_off('*','*');

R_NADG.cntx_psh();
R_NADG.index('TYPPRAC');
R_NADG.prefix('N',_p_ref,_data);
R_NADGK.cntx_psh();
R_NADGK.index('WNIOSEK');
_mydo:=do_state()=0;
{? _mydo || do() ?};
{? R_NADG.first()
|| __KAL.get_day(KAL_BUFF.DATA);
   _wolny:=0;
::  rozpoczęcie doby pracowniczej
   _dstart:=exec('dend','prc_nadg',KAL_BUFF.DATA-1);
::  zakończenie doby pracowniczej
   _dend:=exec('dend','prc_nadg',KAL_BUFF.DATA);

   {? KAL_DEF.TYP='R'
   || _marg_od:=(KAL_BUFF.DATA-_dstart.DATA)*24*60+KAL_BUFF.POCZATEK-_dstart.CZAS;
      _marg_do:=(_dend.DATA-KAL_BUFF.DATAW)*24*60+_dend.CZAS-KAL_BUFF.KONIEC
   || _wolny:=1
   ?};
:: usuwamy zaznaczenie grafiku dla wniosków z dnia
   {!
   |? R_NADG.G:=0;
      R_NADG.put();
      R_NADGK.prefix(R_NADG.ref());
      {? R_NADGK.first() || {! |? R_NADGK.del() !} ?};
      R_NADG.next()
   !};

   R_NADG.first();
   {!
   |? R_NADGK.prefix(R_NADG.ref());
::    dzien wolny
      {? R_NADG.CZY_POCZ='G'
      || {? _ile_nadg.GSTART=time(0,0,0) | _ile_nadg.GSTART>R_NADG.POCZATEK
         || _ile_nadg.GSTART:=R_NADG.POCZATEK
         ?};
          R_NADG.CZAS
      ?};

      _ile_nadg.TYPE:=R_NADG.CZY_POCZ;
      _ileg:=R_NADG.CZAS;
      _ile_nadg.ALL+=_ileg;
      {? _wolny
      || _marg_od:=R_NADG.KONIEC-_dstart.CZAS;
         _marg_do:=_ileg
      ?};
      {? R_NADG.CZY_POCZ='T'
      || _ile_nadg.POCZATEK+=_ileg;
         {? _ileg>_marg_od
         || R_NADGK.blank(1);
            R_NADGK.R_NADG:=R_NADG.ref();
            R_NADGK.DATA:=R_NADG.DATA-1;
            R_NADGK.GODZ:=_ileg-_marg_od;
            R_NADGK.add(1);
            _ileg:=_marg_od
         ?};
         {? _ileg>*0
         || R_NADGK.blank(1);
            R_NADGK.R_NADG:=R_NADG.ref();
            R_NADGK.DATA:=R_NADG.DATA;
            R_NADGK.GODZ:=_ileg;
            R_NADGK.add(1)
         ?}
      || _ile_nadg.KONIEC+=_ileg;
         {? _ileg>_marg_do
         || R_NADGK.blank(1);
            R_NADGK.R_NADG:=R_NADG.ref();
            R_NADGK.DATA:=R_NADG.DATA+1;
            R_NADGK.GODZ:=_ileg-_marg_do;
            R_NADGK.add(1);
            _ileg:=_marg_do
         ?};
         {? _ileg>*0
         || R_NADGK.blank(1);
            R_NADGK.R_NADG:=R_NADG.ref();
            R_NADGK.DATA:=R_NADG.DATA;
            R_NADGK.GODZ:=_ileg;
            R_NADGK.add(1)
         ?}
      ?};
      R_NADG.G:=1;
      R_NADG.put();
      R_NADG.next()
   !}
?};
{? _mydo || end() ?};
R_NADGK.cntx_pop();
R_NADG.cntx_pop();
:: wyłączenie triggerów dla tabeli R_NADG
R_NADG.trig_on('*','*');
_ile_nadg

:Sign Version 2.0 jowisz:1045 2021/09/17 15:17:10 bd07daf7ef863031b3f56db4935621a9dd5ab1ff5d7ded37e234d9f98f4d97b84749c40ef97466a1bfac946f92e991c73b489ba423e0a8889bea1ed2f86f826f882097f8f5cd6083b8ece71a4e9c26483d64d46b28c48adc98482ffbb8198adebb13ba59a8ed401aaad30889a93ca21d06a23f74cbc2bb6b31488f9222d6d6d1
