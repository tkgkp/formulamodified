:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: stat.fml [2004]
:: Utworzony: 2004/06/21
:: Autor: Mario, [casper] Grzegorz Lubos
::======================================================================================================================
:: Zawartosc: [EMAG] ??
::            [KALI] Funkcje wykorzystywane do wylicznania sredniego zatrudnienia,
::                   a także sprawozdania statystycznego Z-06
::======================================================================================================================


\zatrdzien
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO, Modyfikacja: PM [23.25]
:: OPIS: Srednie zatrudnienie w okresie.
::   WE: _a - Poczatek badanego okresu.
::       _b - Koniec badanego okresu.
::       _c - Typ pracownikow:
::             0 - Wszyscy [domyslnie];
::             1 - tylko pracownicy fizyczni.
::       _d - Sposob liczenia sredniej:
::            0 - Metoda uproszczona [domyslnie];
::            1 - Srednia arytmetyczna.
::       _e - Nieobecnosci zdejmujace osobe ze stanu:
::             0 - Urlop bezplatny [domyslnie];
::             1 - Urlop bezplatny, wychowawczy, zasilki chorobowe, macierzynskie i opiekuncze.
::       _f - Tabela tymczasowa zawierajaca pola ROK, MIESIAC, DK, REF wskazujace na pracownikow ($P.ref()). Tabela jest
::            uzupelniana (w biezacej formule) informacjami o pracownikach, ktorych algorytm uznal za zatrudnionych
::            w danym miesiacu. Zaklada sie, ze biezacym indeksem jest indeks po pierwszych 3 polach.
::            Jezeli argument zostanie pominiety tabela nie jest uzupelniana.
::      [_g][INTEGER] - 0/1 - Czy pominąć w obliczeniach oddelegowanych, domyślnie 0 - nie pomijaj
::      [_h][STRING] - String decydujący o wyborze zestawu atrybutów systemowych.
::                     'DG1' - Atrybuty dla DG1.
::                     String pusty lub brak argumentu - Atrybuty domyślne.
::   WY: Srednie zatrudnienie w okresie.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>4 || return(0) ?};
{? var_pres('_b')<>4 || return(0) ?};
{? var_pres('_c')<>1 || _c:=0 ?};
{? var_pres('_d')<>1 || _d:=0 ?};
{? var_pres('_e')<>1 || _e:=0 ?};
_czyprac:={? var_pres('_f')=type_of(SYSLOG) || _prac:=_f; 1 ?};
_bezOdd:={? var_pres('_g')=type_of(0) || _g || 0 ?};
_typSprawozdania:={? var_pres('_h') = type_of('') || _h || '' ?};

_rok:=_a~1;

:: Wszyscy (potencjalni) pracownicy.
_sql:='select CASE WHEN H.OD < to_date(:_a) THEN to_date(:_a) ELSE H.OD END OD,
             CASE WHEN H.DO IS NULL OR H.DO > to_date(:_b) THEN to_date(:_b) ELSE H.DO END DO, H.RWY WY, P.REFERENCE REF
             FROM P join H join F_ZATR using(P.F_ZATR,F_ZATR.REFERENCE)';
_sql+={? _c || ' join CP using(H.CP, CP.reference)'|| '' ?};
_sql+=' where P.FIRMA=:_c and F_ZATR.KOD=\'P\' and H.OD<=to_date(:_b) and (H.DO>=to_date(:_a) or H.DO IS NULL)';
_sql+={? _c || ' and SUBSTR(CP.R,1,1) = \'F\'' || '' ?};
_wynik:=sql(_sql,_a,_b,exec('ref_firma','ustawienia'));

:: Nieobecnosci pomijane
_sql:='select N.OD OD, N.DO DO, H.RWY WY, 0 ILE, 0 MC, P.REFERENCE REF
              FROM N join P join H join R join F_ZATR using(P.F_ZATR,F_ZATR.REFERENCE)';
_sql+={? _c || ' join CP using(H.CP, CP.reference)'|| '' ?};
_sql+=' where P.FIRMA=:_d and F_ZATR.KOD=\'P\' and N.OD<=to_date(:_b) and (N.DO>=to_date(:_a)) and N.KOR=\'N\' ';
_sql+='       and R.RN in (:_c) and H.OD<=N.OD and (H.DO>=N.OD or H.DO IS NULL)';
_sql+={? _c || ' and SUBSTR(CP.R,1,1) = \'F\'' || '' ?};
_sql+=' order by REF, OD ';

{? _typSprawozdania = 'DG1'
||
   {? _e=0
   || _rub:=__RUB.sys_sql(63411,_b)
   |? _e=1
   || _rub:='';
      {? _rok<2014
      || _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(63411,_b)
      || _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(634111,_b)
      ?}
   || _rub:='0'
   ?}
||
   {? _e=0
   || _rub:=__RUB.sys_sql(112,_b)
   |? _e=1
   || _rub:='';
      _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(112,_b);
      _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(133,_b);
      {? _rok<2014
      || _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(122,_b)
::    dla roku 2014 nowe- nie sa brane dodatkowy url. mac. praca i rodzicielski praca
      || _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(1221,_b);
         _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(1222,_b);
         _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(1225,_b);
         _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(12271,_b);
         _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(122721,_b);
         _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(12273,_b);
         _rub+={? _rub='' || '' || ',' ?}+__RUB.sys_sql(122741,_b)
      ?}
   || _rub:='0'
   ?}
?};
{? _rub='' || _rub:='0' ?};
_bezplat:=sql(_sql,_a,_b,_rub,exec('ref_firma','ustawienia'));
:: Porządkowanie zapisów nieobecności pomijanych:
::    - Podział na miesiące.
::    - Wypełnienie pól: MC, ILE.
{? _bezplat.first
|| {!
   |? {? _bezplat.OD<_a || _bezplat.OD:=_a ?};
      {? _bezplat.DO>_b || _bezplat.DO:=_b ?};
      _do:=_bezplat.DO~1*12+_bezplat.DO~2;
      _od:=_bezplat.OD~1*12+_bezplat.OD~2;
      _roznica:=_do-_od;
      {? _roznica
      || _bezplat.cntx_psh;
         _do:=_bezplat.DO;
         _od:=_bezplat.OD;
         _put:=0;
         {! _i:=0.._roznica
         |! _bezplat.OD:=_od; _bezplat.DO:={? _i<_roznica || date(_od~1,_od~2,0) || _do ?};
            _bezplat.ILE:=_bezplat.DO-_bezplat.OD+1; _bezplat.MC:=_bezplat.OD~2;
            {? _put || _bezplat.add || _bezplat.put; _put:=1 ?};
            _od:=_bezplat.DO+1
         !};
         _bezplat.cntx_pop
      || _bezplat.MC:=_bezplat.OD~2; _bezplat.ILE:=_bezplat.DO-_bezplat.OD+1; _bezplat.put
      ?};
      _bezplat.next
   !}
?};

_sr:=0;
:: Tablica stanów dziennych zatrudnienia.
_tmp:=obj_new(_b-_a+1);
{! _i:=1 .. _b-_a+1
|! _tmp[_i]:=0
!};
:: Jeśli wybrano pomijanie oddelegowanych:
{? _bezOdd & _wynik.first()
|| {!
   |? _del:=0;
      _ODD:=exec('h_odde_b_zus','oddelegowanie',_wynik.REF,0,0,_wynik.OD,_wynik.DO);
::    Odjęcie oddelegowań pracownika w danym okresie:
      {? _ODD.first()
      || {!
         |? {? _ODD.O_OD<=_wynik.OD
::             ODD:|---------------|
::             WYN:   |--------|
            || {? _ODD.O_DO>=_wynik.DO
               || _del:=_wynik.del(,1)
::             ODD:|---------------|
::             WYN:   |---------------|
               || _wynik.OD:=_ODD.O_DO+1;
                  _wynik.put()
               ?}
::             ODD:   |---------------|
::             WYN:|---------------|
            || {? _ODD.O_DO>=_wynik.DO
               || _wynik.DO:=_ODD.O_OD-1;
                  _wynik.put()
::             ODD:   |--------|
::             WYN:|---------------|
               || _oldDo:=_wynik.DO;
                  _ref:=_wynik.ref();
                  _wynik.DO:=_ODD.O_OD-1;
                  _wynik.put();
                  _wynik.OD:=_ODD.O_DO+1;
                  _wynik.DO:=_oldDo;
                  _wynik.add();
                  _wynik.seek(_ref)
               ?}
            ?};

            _ODD.next()
         !}
      ?};
      obj_del(_ODD);

      _del=2 | _wynik.next()
   !}
?};
{? _wynik.first
|| {? _czyprac
   || _prac.prefix();
      _add:="
         _new:={? ~_a.find_key(_b,_c~1,_c~2) || _a.blank(); _a.REF:=_b; _a.ROK:=_c~1; _a.MIESIAC:=_c~2; 1 ?};
         _a.DK+=_d-_c+1;
         {? _new || _a.add() || _a.put() ?}"
   ?};
   {!
   |? {! _i:=_wynik.OD-_a+1 .. _wynik.DO-_a+1
::       Aktualizacja stanów dziennych zatrudnienia.
      |! _tmp[_i]+=_wynik.WY
      !};
      {? _czyprac
::       Uzupełnienie dni kalendarzowych zatrudnienia.
      || _od:=_wynik.OD;
         _do:=_wynik.DO;
         _odd:=_od;
         {!
         |? {? 6+_odd$0=6+_do$0
            || _add(_prac,_wynik.REF,_odd,_do);
               0
            || _km:=date(_odd~1,_odd~2,0);
               _add(_prac,_wynik.REF,_odd,_km);
               _odd:=_km+1;
               1
            ?}
         !}
      ?};
      _wynik.next
   !}
?};

{? _d
:: Średnia arytmetyczna.
|| {? _bezplat.first
   || {!
      |? {! _i:=_bezplat.OD-_a+1 .. _bezplat.DO-_a+1
         |! _tmp[_i]-=_bezplat.WY
         !};
         {? _czyprac & _prac.find_key(_bezplat.REF,_bezplat.OD~1,_bezplat.OD~2)
         || _prac.DK-=_bezplat.DO-_bezplat.OD+1;
            {? _prac.DK || _prac.put() || _prac.del() ?}
         ?};
         _bezplat.next
      !}
   ?};
   {! _i:=1 .. _b-_a+1
   |! _sr+=_tmp[_i]
   !};
   _sr/=_b-_a+1

:: Metoda uproszczona.
|| _bezplat.index(_bezplat.ndx_tmp(,1,'MC',,,'REF',,,'OD',,));
   {! _i:=_a~2 .. _b~2
   |! _mc_od:=date(_rok,_i,1);
      _mc_do:=date(_rok,_i,0);

      _bezplat.prefix(_i);
      {? _bezplat.first
      ||
::       "Sklejanie" przedziałów.
         _ref:=_bezplat.REF;
         _do:=_bezplat.DO;
         {!
         |? {? _ref=_bezplat.REF & _bezplat.OD=_do+1
            || _do:=_bezplat.DO;
               _bezplat.prev;
               _bezplat.DO:=_do; _bezplat.ILE:=_bezplat.DO-_bezplat.OD+1;
               _bezplat.put;
               _bezplat.next;
               _bezplat.del
            || _do:=_bezplat.DO; _ref:=_bezplat.REF; _bezplat.next
            ?}
         !};

::       Uwzględnienie nieobecności dłuższych niż 14 dni "w stanach dziennych przyjmowanych do obliczeń".
         _bezplat.first;
         {!
         |? {? _bezplat.ILE>14
            || _pomin:=0;
               {? _typSprawozdania='DG1'
               || _tmp[_mc_od-_a+1]-=_bezplat.WY;
                  _tmp[_mc_do-_a+1]-=_bezplat.WY;
                  _pomin:=2
               ||
                  {? _bezplat.OD=_mc_od
                  || _tmp[_mc_od-_a+1]-=_bezplat.WY;
                     _pomin+=1
                  ?};
                  {? _bezplat.DO=_mc_do
                  || _tmp[_mc_do-_a+1]-=_bezplat.WY;
                     _pomin+=1
                  ?}
               ?};
               {? _pomin=2 & _czyprac & _prac.find_key(_bezplat.REF,_bezplat.OD~1,_bezplat.OD~2)
               || _prac.del()
               ?}
            ?};
            _bezplat.next()
         !}
      ?};
      _sr+=(_tmp[_mc_od-_a+1]+_tmp[_mc_do-_a+1])/2
   !};
   _sr/=(_b~2-_a~2+1)
?};

::exec('select','#table',json_tparse(json_obj(_tmp)),1,,'Tablica stanów dziennych');

_sr


\wynmin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DPA
:: OPIS: wyliczenie minimalnego wynagrodzenia na dany miesiąc - brutto plus zasilki
::   WE: _a - data końca miesiąca
::       _b - kwota górnego ograniczenia
::       _c - kwota dolnego ograniczenia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>4 || return(0) ?};
{? var_pres('_b')<>1 || _b:=0 ?};
{? var_pres('_c')<>1 || _c:=0 ?};
_zdate:=date(0,0,0);

OSOBA.cntx_psh;
OSOBA.clear;
KZ.cntx_psh;
KZ.index('_KARTAZA');
P.cntx_psh;
P.index('PRACOSOB');
H.cntx_psh;
H.index('_HISTDAT');

_wynik:=0;
_loop:=OSOBA.first;
{!
|? _loop
|! P.prefix(exec('ref_firma','ustawienia'),'P',OSOBA.ref);
   _loop:=P.first;
   _break:=0;
   _brutto:=_zasad:=0;
   {!
   |? _loop
   |! {? P.DZA<=_a & (P.DZ=_zdate | _a<=P.DZ)
      || KZ.prefix(P.ref,_a~1,_a~2);
         {? KZ.first
         || H.prefix(P.ref());
            {? H.find_le(_a) & (H.DO=_zdate | _a<=H.DO) & H.WY
            || VAR_DEL.delete('sta_pom');
               sta_pom:=obj_new(4);
               {! _ind:=1..obj_len(sta_pom) |! sta_pom[_ind]:=0 !};
               exec('mc_placa_newzasad','lista_licz',date(_a~1,_a~2,1),_a,,1,1);
               _zasad:=sta_pom[1]+sta_pom[2]+sta_pom[3];
               VAR_DEL.delete('sta_pom');
               _br_zas:=KZ.S20+KZ.S21+KZ.S22+KZ.S23+KZ.S24+KZ.S25+KZ.S26+KZ.S28;
               _zasad:=(_zasad/H.WY)$2;
               _brutto+=(_br_zas/H.WY)$2;
               {? ~(_c<=_brutto & _brutto<=_b) & ~(_c<=_zasad & _zasad<=_b)
               || _brutto:=0;
                  _break:=1
               ?}
            ?}
         || _break:=1
         ?}
      ?};
      _loop:=(~_break & P.next)
   !};
   _wynik+=(_brutto & _c<=_brutto & _brutto<=_b & _c<=_zasad & _zasad<=_b);
   _loop:=OSOBA.next
!};

H.cntx_pop;
P.cntx_pop;
KZ.cntx_pop;
OSOBA.cntx_pop;

_wynik


\czasprzf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Czas faktycznie przepracowany - fizyczni
::   WE: _a
::       _b - Poczatek analizowanego okresu (data) - domyslnie SIK.OKRES().POCZ
::       _c - Koniec  analizowanego okresu (data) - domyslnie OKRO_F.POCZ
::       _d - Tabela tymczasowa wskazujaca pracownikow, dla ktorych maja byc przeprowadzone obliczenia. Tabela musi
::            zawierac pola ROK, MIESIAC, REF wskazujace na pracownikow ($P.ref()), ktorzy maja byc wzieci pod uwage
::            przy obliczeniach z danego roku/miesiaca.
::            Jezeli argument zostanie pominiety obliczenia sa prowadzone dla wszystkich pracownikow.
::   WY: Godziny przepracowane (w tys.)
::----------------------------------------------------------------------------------------------------------------------
_b:={? var_pres('_b')=type_of(date) || _b || SIK.OKRES().POCZ ?};
_c:={? var_pres('_c')=type_of(date) || _c || OKRO_F.POCZ ?};
{? _c = date(0,0,0) || return(0) ?};

_czyprac:={? var_pres('_d')=type_of(SYSLOG) || _prac:=_d; 1 || _prac:=''; 0 ?};

_pocz:=date(_b~1,1,1);
_kon:=date(_c~1,_c~2,0);

{? var_pres('_a')=type_of(0)
|| exec('ustalfiz_rozl','stat',_pocz~1,'UMY/FIZ'); _umy:=1
|| exec('ustalfiz_rozl','stat',_pocz~1,'FIZ/FIZ'); _umy:=0
?};
R.clear;
R.index('RUBKOD');
{? R.find_key(54)
   || _ref1:=R.ref
   || _ref1:=null
?};
{? R.find_key(55)
   || _ref2:=R.ref
   || _ref2:=null
?};
{? R.find_key(56)
   || _ref3:=R.ref
   || _ref3:=null
?};
{? R.find_key(63)
   || _ref4:=R.ref
   || _ref4:=null
?};
{? R.find_key(64)
   || _ref5:=R.ref
   || _ref5:=null
?};
{? R.find_key(58)
   || _ref6:=R.ref
   || _ref6:=null
?};
{? R.find_key(68)
   || _ref7:=R.ref
   || _ref7:=null
?};
{? R.find_key(69)
   || _ref8:=R.ref
   || _ref8:=null
?};
{? R.find_key(48)
   || _ref9:=R.ref
   || _ref9:=null
?};
{? R.find_key(7010)
   || _ref10:=R.ref
   || _ref10:=null
?};
{? R.find_key(7008)
   || _ref11:=R.ref
   || _ref11:=null
?};
{? R.find_key(7009)
   || _ref12:=R.ref
   || _ref12:=null
?};

_sql:='select sum(G.G) as ILOSC from @G join :_a using (G.P, REF)';
_sql+=' where G.reference like \'godz'+($(_pocz~1))+'%\' and R=\'G\' and K in (:_c,:_d,:_e,:_f,:_g,:_h,:_i,:_j,:_k,:_l,:_m,:_n)';
_sql+=' and (G.M = '+$(_pocz~2)+' and MIESIAC = '+$(_pocz~2);
{! _i:=2 .. _kon~2 |!
   _sql+=' or G.M = '+$_i+' and MIESIAC = '+$_i
!};
_sql+=')';
{? _czyprac
|| _sql+=' and (G.P,extract(year from G.D),extract(month from G.D)) in (select REF,ROK,MIESIAC from :_b)'
?};
_tab:=sql(_sql,ustalfiz[2],_prac,_ref1,_ref2,_ref3,_ref4,_ref5,_ref6,_ref7,_ref8,_ref9,_ref10,_ref11,_ref12);
_tab.ILOSC/1000 +
{? ~_umy || exec('czasumy','stat',1,_pocz,_kon,{? _czyprac || _prac || ~~ ?}) ?}


\czasumy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO, Modyfikacja: PM [23.25]
:: OPIS: Czas przepracowany - stawka miesieczna
::   WE: _a - Charakter pracy
::            Jezeli parametr jest liczba - fizyczni w przeciwnym razie umyslowi.
::       _b - Poczatek analizowanego okresu (data) - domyslnie SIK.OKRES().POCZ
::       _c - Koniec  analizowanego okresu (data) - domyslnie OKRO_F.POCZ
::       _d - Tabela tymczasowa wskazujaca pracownikow, dla ktorych maja byc przeprowadzone obliczenia. Tabela musi
::            zawierac pola ROK, MIESIAC, REF wskazujace na pracownikow ($P.ref()), ktorzy maja byc wzieci pod uwage
::            przy obliczeniach z danego roku/miesiaca.
::            Jezeli argument zostanie pominiety obliczenia sa prowadzone dla wszystkich pracownikow.
::     [_e] - [NUMBER] Kod atrybutu systemowego (atrybut składników płacowych) którego rubryki mają być
::            użyte do obliczeń.
::            Jeżeli argument jest pominięty lub jest nie większy od 0 lub atrybut nie istnieje, brane są pod uwagę
::            domyślne kody rubryk.
::     [_f] - [STRING] Dodatkowe kody rubryk dodawane do kodów zawartych w tych podanych atrybutem systemowym w
::            argumencie [_e]. Kody powinny być oddzielone przecinkami np: '54,55,7008'.
::   WY: Godziny przepracowane (w tys.)
::----------------------------------------------------------------------------------------------------------------------
_b:={? var_pres('_b')=type_of(date) || _b || SIK.OKRES().POCZ ?};
_c:={? var_pres('_c')=type_of(date) || _c || OKRO_F.POCZ ?};
{? _c=date(0,0,0) || return(0) ?};

_czyprac:={? var_pres('_d')=type_of(SYSLOG) || _prac:=_d; 1 ?};
_atr:={? var_pres('_e') = type_of(0) & _e > 0 || 1 || 0 ?};
_dodatkowe:={? var_pres('_f') = type_of('') || _f || '' ?};
_skladniki:=','+{? _dodatkowe <> '' || _dodatkowe + ',' || '' ?} + {? _atr || __RUB.sys_sql(_e) || '' ?}+',';

_pocz:=date(_b~1,1,1);
_kon:=date(_c~1,_c~2,0);

{? var_pres('_a')=type_of(0)
|| _war:="1+H.CP().CP='F' & 1+CP.S='U' & H.P().F_ZATR().KOD='P'"; _fiz:=1
|| _war:="1+H.CP().CP='U' & 1+CP.S='U' & H.P().F_ZATR().KOD='P'"; _fiz:=0
?};
H.cntx_psh();
_godz:=0;
_zdate:=date(0,0,0);
G.cntx_psh();
G.use('godz'+$(_pocz~1));
G.index('MSCDKW');
H.index('HISTODKZ');
H.prefix(exec('ref_firma','ustawienia'));
{? H.first()
|| _lg:=
      "  {? _a.find_key($P.ref(),_b~1,_b~2)
         || __KAL.w_hours(_b,_c)*{? P.KIN='T' || 1 || H.WY ?}$2
         ?}
      ";
   {!
   |? {? _war() & H.OD<=_kon & (H.DO>=_pocz | H.DO=_zdate)
      || _od:={? H.OD<=_pocz || _pocz || H.OD ?};
         _do:={? H.DO>=_kon | H.DO=_zdate || _kon || H.DO ?};
         __KAL.set_cal(H.P().KAL,_kon~1);
         {? _czyprac
         || _odd:=_od;
            {!
            |? {? 6+_odd$0=6+_do$0
               || _godz+=_lg(_prac,_odd,_do);
                  0
               || _km:=date(_odd~1,_odd~2,0);
                  _godz+=_lg(_prac,_odd,_km);
                  _odd:=_km+1;
                  1
               ?}
            !}
         || _godz+=__KAL.w_hours(_od,_do)*{? P.KIN='T' || 1 || H.WY ?}$2
         ?};
         G.prefix(H.P);
         {? G.first()
         || {!
            |? _rub:=G.K().RN;
               {? (~_czyprac | _prac.find_key($P.ref(),G.D~1,G.D~2))
                  &
                  {? _atr = 0 | _skladniki = ''
                  || (_rub=55 | _rub=56 | _rub=58 | _rub=64 | _rub=68 | _rub=69 | _rub=7008 | _rub=7009)
                  || (_skladniki * ',%1,'[$_rub])
                  ?}
                  &
                   G.D>=_od & G.D<=_do
               || _godz+=G.G
               ?};
               G.next()
            !}
         ?}
      ?};
      H.next()
   !}
?};
G.cntx_pop();
H.cntx_pop();
{? _atr>0
|| (_godz/1000) + {? ~_fiz || exec('czasprzf_param','stat',1,_pocz,_kon,{? _czyprac || _prac || ~~ ?},_e,_dodatkowe) ?}
|| (_godz/1000) + {? ~_fiz || exec('czasprzf','stat',1,_pocz,_kon,{? _czyprac || _prac || ~~ ?}) ?}
?}


\czasnad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: czas przepracowany w nadgodzinach
::   WE: _a - Poczatek analizowanego okresu (data) - domyslnie SIK.OKRES().POCZ
::       _b - Koniec  analizowanego okresu (data) - domyslnie OKRO_F.POCZ
::       _c - Tabela tymczasowa wskazujaca pracownikow, dla ktorych maja byc przeprowadzone obliczenia. Tabela musi
::            zawierac pola ROK, MIESIAC, REF wskazujace na pracownikow ($P.ref()), ktorzy maja byc wzieci pod uwage
::            przy obliczeniach z danego roku/miesiaca.
::            Jezeli argument zostanie pominiety obliczenia sa prowadzone dla wszystkich pracownikow.
::   WY: Godziny (w tys.)
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of(date) || _a || SIK.OKRES().POCZ ?};
_b:={? var_pres('_b')=type_of(date) || _b || OKRO_F.POCZ ?};
{? _b = date(0,0,0) || return(0) ?};
_czyprac:={? var_pres('_c')=type_of(SYSLOG) || _prac:=_c; 1 ?};

_pocz:=date(_a~1,_a~2,1);
_kon:=date(_b~1,_b~2,0);
_rub:=__RUB.sys_sql(63141,_kon);
{? _rub='' || _rub:='55,56,58,7008,7009' ?};

_sql:='select P.REFERENCE REF, sum(G.G) as KWOTA from @G join P join R join F_ZATR using(P.F_ZATR,F_ZATR.REFERENCE)';
_sql+=' where G.reference like \'godz'+$(_a~1)+'%\' and G.D>=to_date(:_a) and G.D<=to_date(:_b)'+
      ' and P.FIRMA=:_c and F_ZATR.KOD=\'P\'';
_sql+=' and RN in (:_d)'+
      ' group by P.REFERENCE';
_tab:=sql(_sql,_pocz,_kon,exec('ref_firma','ustawienia'),_rub);
{? _czyprac
|| _prac.prefix;
   {? _tab.first
   || {!
      |? {? _prac.find_key(_tab.REF) || _tab.next || _tab.del(,1)=2 ?}
      !}
   ?}
?};
(sql('select sum(KWOTA) as KWOTA from :_a',_tab)).KWOTA/1000


\nieprzeprac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DPA
:: OPIS: Czas nieprzepracowny (ograniczenie tylko dla pracownikow etatowych, inne wywolanie zwraca 0).
::   WE: _a - Typ pracownikow:
::          0 - Wszyscy [domyslnie];
::          1 - Tylko fizyczni.
::          2 - Tylko umysłowi.
::       _b - Poczatek analizowanego okresu.
::       _c - Koniec analizowanego okresu.
::       _d - Platnik (kto placi za czas nieprzepracowany):
::          ''       - Bez znaczenia - wszyscy [domyslnie];
::          'FIRMA'  - Firma.
::       _e - Tabela tymczasowa wskazujaca pracownikow, dla ktorych maja byc przeprowadzone obliczenia. Tabela musi
::            zawierac pola ROK, MIESIAC, REF wskazujace na pracownikow ($P.ref()), ktorzy maja byc wzieci pod uwage
::            przy obliczeniach z danego roku/miesiaca.
::            Jezeli argument zostanie pominiety obliczenia sa prowadzone dla wszystkich pracownikow.
::----------------------------------------------------------------------------------------------------------------------
{? __F_ZATR.P<>'P' || return(0) ?};

_a:={? var_pres('_a')<>1 || 0 || _a ?};
_b:={? var_pres('_b')=type_of(date) || _b || SIK.OKRES().POCZ ?};
_c:={? var_pres('_c')=type_of(date) || _c || OKRO_F.POCZ ?};
{? _c=date(0,0,0) || return(0) ?};
_d:={? var_pres('_d')=type_of('') & _d='FIRMA' || _d || '' ?};

_czyprac:={? var_pres('_e')=type_of(SYSLOG) || _prac:=_e; 1 ?};

_pocz:=date(_b~1,1,1);
_kon:=date(_c~1,_c~2,0);
_zdate:=date(0,0,0);
_godz:=0;

H.cntx_psh();
N.cntx_psh();
N.index('NIEOBECN');
H.index('HISTODKZ');
H.prefix(exec('ref_firma','ustawienia'));
{? H.first()
|| _lg:=
      "  {? _a.find_key($P.ref(),_b~1,_b~2)
         || __KAL.w_hours(_b,_c)*{? P.KIN='T' || 1 || H.WY ?}$2
         ?}
      ";
   {!
   |? {? H.P().F_ZATR().KOD='P'
       & {? _a=1 || 1+H.CP().S='F' |? _a=2 || 1+H.CP().S='U' || 1 ?}
       & H.OD<=_kon & (H.DO>=_pocz | H.DO=_zdate)
      || _tmp:=H.KZ().KZ;
         {? _tmp='Z'
         || N.prefix('N',H.P);
            {? {? ~N.find_le({? _pocz<=H.OD || H.OD || _pocz ?})
               || N.find_ge({? _pocz<=H.OD || H.OD || _pocz ?})
               || 1
               ?}
            || {!
               |? {? {? H.DO=_zdate || 1 || N.OD<=H.DO ?} & N.DO>=H.OD & N.OD>=_pocz & N.DO<=_kon
                   & ~__RUB.sys_attr(N.NB,1222,_kon) & ~__RUB.sys_attr(N.NB,133,_kon) &
                   (_d='' | __RUB.sys_attr(N.NB,161,_kon) | __RUB.sys_attr(N.NB,1311,_kon))
                  || _od:={? N.OD<=H.OD || H.OD || N.OD ?};
                     _do:={? N.DO<=H.DO | H.DO=_zdate || N.DO || H.DO ?};
                     {? _od=N.OD & _do=N.DO
                     || {? ~_czyprac | _prac.find_key($P.ref(),N.OD~1,N.OD~2)
                        || _godz+=N.NG
                        ?}
                     || __KAL.set_cal(H.P().KAL,_kon~1);
                        {? _czyprac
                        || _odd:=_od;
                           {!
                           |? {? 6+_odd$0=6+_do$0
                              || _godz+=_lg(_prac,_odd,_do);
                                 0
                              || _km:=date(_odd~1,_odd~2,0);
                                 _godz+=_lg(_prac,_odd,_km);
                                 _odd:=_km+1;
                                 1
                              ?}
                           !}
                        || _godz+=__KAL.w_hours(_od,_do)*{? P.KIN='T' || 1 || H.WY ?}$2
                        ?}
                     ?}
                  ?};
                  N.next() & N.OD<={? _kon<=H.DO | H.DO=_zdate || _kon || H.DO ?}
               !}
            ?}
         ?}
      ?};
      H.next()
   !}
?};
N.cntx_pop();
H.cntx_pop();
(_godz/1000)


\ustalfiz_rozl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PKOSO] [2009+]
:: OPIS: Ustalenie pracownikow fizycznych na dany miesiac roku (ROZLICZENIE)
::   WE: _a - rok
::       _b - przekazywany charakter pracy np: 'FIZ/FIZ'
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>1 || return(0) ?};
{? var_pres('ustalfiz')>100 || obj_del(ustalfiz) ?};
ustalfiz:=obj_new(2);
ustalfiz[1]:=0;
ustalfiz[1]:=_a;
_od:=date(_a,1,1);
_do:=date(_a,12,0);
_zdate:=date(0,0,0);
ustalfiz[2]:=sql('select 0 as MIESIAC, H.P as REF, H.OD as OD, H.DO as DO, H.WYDZIAL as WYDZ '+
                     'from H '+
                        'join P using(H.P,P.REFERENCE) '+
                        'join F_ZATR using(P.F_ZATR,F_ZATR.REFERENCE) '+
                        'join CP using(H.CP, CP.REFERENCE) '+
                     'where P.FIRMA=:_d and F_ZATR.KOD=\'P\' '+
                        'and CP.CP =\':_c\' '+
                        'and H.OD < to_date(:_b) '+
                        'and (H.DO > to_date(:_a) or H.DO is null)',_od,_do,_b,exec('ref_firma','ustawienia'));
ustalfiz[2].index(ustalfiz[2].ndx_tmp(,,'MIESIAC',,0));
{? ustalfiz[2].first
|| {!
   |? {? ustalfiz[2].OD<_od || ustalfiz[2].OD:=_od ?};
      {? ustalfiz[2].DO>_do | ustalfiz[2].DO=_zdate || ustalfiz[2].DO:=_do ?};
      ustalfiz[2].put;
      ustalfiz[2].next
   !}
?};
{? ustalfiz[2].first
|| {!
   |? _tmp1:={? ustalfiz[2].OD~3<15 || ustalfiz[2].OD~2 || ustalfiz[2].OD~2+1 ?};
      _tmp2:={? ustalfiz[2].DO~3>15 || ustalfiz[2].DO~2 || ustalfiz[2].DO~2-1 ?};
      ustalfiz[2].MIESIAC:=_tmp1;
      ustalfiz[2].put;
      {! _i:=_tmp1+1.._tmp2
      |! ustalfiz[2].MIESIAC:=_i;
         ustalfiz[2].add
      !};
      ustalfiz[2].find_key(0)
   !}
?}


\wyn_zlec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GL [8.70]
:: OPIS: Formula liczaca wynagrodzenia z tytulu umow zlecen
::   WE: _a - date - poczatek badanego okresu
::       _b - date - koniec badanego okresu
::   WY: wynagrodzenie w tys zl z jednym miejscem po przecinku
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of(date) || _a || SIK.OKRES().POCZ ?};
_b:={? var_pres('_b')=type_of(date) || _b || OKRO_F.POCZ ?};

{? _b=date(0,0,0)
|| return(0)
?};

_kw:=0;
_od:=date(_a~1,1,1);
_do:=date(_b~1,_b~2,0);

O.cntx_psh();
LS.cntx_psh();
RH.cntx_psh();
RH.index('DOK');
ZC.cntx_psh();

{! _rok:=_a~1.._b~1+1
|! RH.prefix(exec('ref_firma','ustawienia'),_rok);
   _loop:=RH.first();
   {!
   |? _loop
   |! RH.ZLE();
      {? ZC.DU<=_do & _od<=ZC.DW & RH.ZAS='N' & (
            _od<=RH.DWY & (RH.DWY<=_do | ZC.DW<=_do)
         )
      || LS.use(-RH.O().LT);
         LS.index('ZLEC');
         LS.prefix(RH.ref(),500);
         _loop:=LS.first();
         {!
         |? _loop
         |! _kw+=LS.KW;
            _loop:=LS.next()
         !}
      ?};
      _loop:=RH.next()
   !}
!};

ZC.cntx_pop();
RH.cntx_pop();
LS.cntx_pop();
O.cntx_pop();

(_kw/1000)$1


\wyn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.10]
:: OPIS: Formula wyliczajaca sume wskazanych skladnikow w podanym okresie, dla wybranych pracownikow.
::   WE: _a - Zawsze 'P' - parametr zarezerwowany.
::       _b - Data poczatkowa obliczen (istotny rok i miesiac).
::       _c - Data koncowa obliczen (istotny rok i miesiac).
::       _d - Typ okresu:
::             K - Kalendarzowy [domyslnie];
::             P - Podatkowy;
::             U - Ubezpieczeniowy;
::       _e - Tabela tymczasowa wskazujaca pracownikow, dla ktorych maja byc przeprowadzone obliczenia. Tabela musi
::            zawierac pola ROK, MIESIAC, REF wskazujace na pracownikow ($P.ref()), ktorzy maja byc wzieci pod uwage
::            przy obliczeniach z danego roku/miesiaca.
::            Jezeli argument zostanie pominiety obliczenia sa prowadzone dla wszystkich pracownikow.
::       _f - Skladniki do sumowania. Parametr moze byc:
::            - numerem rubryki (np. 500);
::            - lista z numerami rubryk (np. '120,121,123');
::            - tablica zawierajaca grupy skladnikow (w postaci numeru lub listy z numerami).
::   WY: W przypadku bledow argumentow wywolania rezultatem jest 0.
::       W przeciwnym wypadku wynik zalezy od argumentu _f, i moze byc:
::          - wyliczona kwota, jezeli _f nie jest tablica;
::          - tablica zawierajaca sume dla kazdej z grup wejsciowych.
::----------------------------------------------------------------------------------------------------------------------
_tyt:='stat.fml \\wyn\n';
{? _<>6 || FUN.emsg(_tyt+'Nieprawidłowa liczba argumentów wywołania.'); return(0) ?};
{? var_pres('_a')=type_of('') & _a='P' || _fz:=_a || FUN.emsg(_tyt+'Nieprawidłowa wartość parametru _a.'); return(0) ?};
{? var_pres('_b')=type_of(date()) || _pocz:=_b || FUN.emsg(_tyt+'Nieprawidłowy typ parametru _b.'); return(0) ?};
{? var_pres('_c')=type_of(date()) || _kon:=_c || FUN.emsg(_tyt+'Nieprawidłowy typ parametru _c.'); return(0) ?};
_typ:={? var_pres('_d')=type_of('') & (_d='K' | _d='P' | _d='U') || _d || 'K' ?};
{? type_of(_e)=type_of(SYSLOG)
|| _joinP:=' join :_a WybPrac using (LS.P,WybPrac.REF)';
   _whereP:='(WybPrac.ROK=:_b and WybPrac.MIESIAC=:_c)';
   _WybPrac:=_e
|| _joinP:='';
   _whereP:='';
   _WybPrac:=''
?};
_skl:=_f;
_fm:=exec('ref_firma','ustawienia');

:Liczba sekcji sumujacych
_ls:=0;
_err:=0;
_sql:='';
{? type_of(_skl)>100
|| _tret:=1;
   _odp:=obj_new(obj_len(_skl));
   {! _lp:=1..obj_len(_odp)
   |! _odp[_lp]:=0;
      _sql+=
         {? _sql='' || '' || ', ' ?}+
         {? var_pres('['+$_lp+']',_skl)=type_of(0)
         || {? _skl[_lp]<>0 || _ls+=1; 'sum(case when R.RN='+$_skl[_lp]+' then LS.KW else 0 end) KW'+$_lp || '' ?}
         |? var_pres('['+$_lp+']',_skl)=type_of('')
         || _rs:='';
            _trs:=spli_str(_skl[_lp],',');
            {! _nr:=1..obj_len(_trs)
            |! {? #_trs[_nr] || _rs+=','+_trs[_nr]
               |? _trs[_nr]<>'' || _err+=1
               ?}
            !};
            obj_del(_trs);
            _rs:=1-_rs;
            {? _rs<>'' || _ls+=1; 'sum(case when R.RN in ('+_rs+') then LS.KW else 0 end) KW'+$_lp || '' ?}
         || _err+=1; ''
         ?}
   !};
   _sql+=' from LS join R'+_joinP+{? _whereP='' || '' || ' where '+_whereP ?}
|| _tret:=2;
   _odp:=0;
   _sql+=
      'sum(LS.KW) KW1 from LS join R'+_joinP+' where R.RN'+
      {? type_of(_skl)=type_of(0) || {? _skl<>0 || _ls+=1; '='+$_skl || '' ?}
      |? type_of(_skl)=type_of('')
      || _rs:='';
         _trs:=spli_str(_skl,',');
         {! _nr:=1..obj_len(_trs)
         |! {? #_trs[_nr] || _rs+=','+_trs[_nr]
            |? _trs[_nr]<>'' || _err+=1
            ?}
         !};
         obj_del(_trs);
         _rs:=1-_rs;
         {? _rs<> '' || _ls+=1; ' in ('+_rs+')' || '' ?}
      || _err+=1; ''
      ?}+
      {? _whereP='' || '' || ' and '+_whereP ?}
?};
_sql:='select '+_sql;
{? _err || FUN.emsg(_tyt+'Nieprawidłowa wartość parametru _f.'); return(0) ?};
:Bledu nie bylo, ale wszystkie sekcje sa "puste".
{? _ls=0 || return(0) ?};

O.cntx_psh();
O.index({? _typ='K' || 'LISTYPLA' |? _typ='P' || 'LISTYPLP' |? _typ='U' || 'LISTYPLU' ?});
_dt:=date(_pocz~1,_pocz~2,1);
{!
|? _dt<=_kon
|! O.prefix(_fm,_fz,_dt~1,_dt~2);
   _dO:=O.first();
   {!
   |? _dO
   |! FUNKCJE.OTWOLIST();
      _tab:=sql(_sql,_WybPrac,_dt~1,_dt~2);
      {? type_of(_tab)=type_of(SYSLOG) & _tab.first()
      || {? _tret=1
         || {! _lp:=1..obj_len(_odp) |! _odp[_lp]+=($('_a.KW'+$_lp))(_tab) !}
         |? _tret=2
         || _odp+=_tab.KW1
         ?};
         obj_del(_tab)
      ?};
      _dO:=O.next()
   !};
   _dt:=date(_dt~1,_dt~2,0)+1
!};
O.cntx_pop();
FUNKCJE.OTWOLIST();

_odp


\czasprzf_param
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PM [23.25]
:: OPIS: Czas faktycznie przepracowany - fizyczni, wersja formuły sparametryzowana.
::   WE: _a -
::       _b - Poczatek analizowanego okresu (data) - domyslnie SIK.OKRES().POCZ
::       _c - Koniec  analizowanego okresu (data) - domyslnie OKRO_F.POCZ
::       _d - Tabela tymczasowa wskazujaca pracownikow, dla ktorych maja byc przeprowadzone obliczenia. Tabela musi
::            zawierac pola ROK, MIESIAC, REF wskazujace na pracownikow ($P.ref()), ktorzy maja byc wzieci pod uwage
::            przy obliczeniach z danego roku/miesiaca.
::            Jezeli argument zostanie pominiety obliczenia sa prowadzone dla wszystkich pracownikow.
::     [_e] - [NUMBER] Kod atrybutu systemowego (atrybut składników płacowych) którego rubryki mają być
::            użyte do obliczeń. Jeżeli argument jest pominięty lub jest nie większy od 0 lub atrybut nie istnieje,
::            brane są pod uwagę ewentualne kody rubryk podane w argumencie [_f].
::     [_f] - [STRING] Dodatkowe kody rubryk dodawane do kodów zawartych w tych podanych atrybutem systemowym w
::            argumencie [_e]. Kody powinny być oddzielone przecinkami np: '54,55,7008'.
::   WY: Godziny przepracowane (w tys.)
::----------------------------------------------------------------------------------------------------------------------
_b:={? var_pres('_b')=type_of(date) || _b || SIK.OKRES().POCZ ?};
_c:={? var_pres('_c')=type_of(date) || _c || OKRO_F.POCZ ?};
{? _c=date(0,0,0) || return(0) ?};

_czyprac:={? var_pres('_d')=type_of(SYSLOG) || _prac:=_d; 1 || _prac:=''; 0 ?};

_pocz:=date(_b~1,1,1);
_kon:=date(_c~1,_c~2,0);

_atr:={? var_pres('_e') = type_of(0) & _e > 0 || 1 || 0 ?};
_dodatkowe:={? var_pres('_f') = type_of('') || _f || '' ?};
_skladniki:={? _dodatkowe <> '' || _dodatkowe + ',' || '' ?} + {? _atr || __RUB.sys_sql(_e) || '0' ?};
{? _skladniki='' || _skladniki:='0' ?};

{? var_pres('_a')=type_of(0)
|| exec('ustalfiz_rozl','stat',_pocz~1,'UMY/FIZ'); _umy:=1
|| exec('ustalfiz_rozl','stat',_pocz~1,'FIZ/FIZ'); _umy:=0
?};

_sql:='select sum(G.G) as ILOSC from @G join :_a using (G.P, REF) join @R using (G.K, R.reference)';
_sql+=' where G.reference like \'godz'+($(_pocz~1))+'%\' and R=\'G\' and R.RN in (:_c)';
_sql+=' and (G.M = '+$(_pocz~2)+' and MIESIAC = '+$(_pocz~2);
{! _i:=2 .. _kon~2 |!
   _sql+=' or G.M = '+$_i+' and MIESIAC = '+$_i
!};
_sql+=')';
{? _czyprac
|| _sql+=' and (G.P,extract(year from G.D),extract(month from G.D)) in (select REF,ROK,MIESIAC from :_b)'
?};
_tab:=sql(_sql,ustalfiz[2],_prac,_skladniki);
_tab.ILOSC/1000 +
{? ~_umy || exec('czasumy','stat',1,_pocz,_kon,{? _czyprac || _prac || ~~ ?},{? _atr || _e || ~~ ?}) ?}


:Sign Version 2.0 jowisz:1045 2023/10/10 09:01:24 3f8ee0c9f57807562f093542cbca48326510ab855538961d559e5e2035c04d0a25beb88096e1358a9f9a7a971939bb9afaf4c8780420f54bd9448d1841d4f42cffbecdc252df98d32968e246a48edd1f8dcbd2c403d7d5fdf9ee1a1c6758128acf37a6d1078f8496ce456a07c65846215ec0599b1299cda755a0d17c682b0c65
