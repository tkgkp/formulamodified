:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ro_cfg.fml
:: Utworzony: 12.01.2018
:: Autor: jaws
:: Systemy: RODO
::======================================================================================================================
:: Zawartość: Obsługa konfiguracji RODO.
::======================================================================================================================


::======================================================================================================================
:: Formuły obsługi tabeli RO_CFG.
::======================================================================================================================


\ro_cfg_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli RO_CFG.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
{? RO_CFG.NUMER=0
|| _nr:=0;
   RO_CFG.cntx_psh();
   RO_CFG.index('NUMER');
   {? RO_CFG.last()
   || _nr:=RO_CFG.NUMER
   ?};
   RO_CFG.cntx_pop();
   RO_CFG.NUMER:=_nr+1
?};
exec('ro_cfg_chk','ro_cfg',0)


\ro_cfg_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli RO_CFG.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('ro_cfg_chk','ro_cfg',1)


\ro_cfg_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli RO_CFG.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY: zgodna ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| _bnr:=bfld('NUMER');
   RO_CFG.cntx_psh();
   RO_CFG.index('NUMER');
   RO_CFG.prefix();
   {? RO_CFG.find_ge(_bnr)
   || {!
      |? RO_CFG.NUMER-=1;
         RO_CFG.put();
         RO_CFG.next()
      !}
   ?};
   RO_CFG.cntx_pop()
?};
~~


\ro_cfg_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE:
::   WY: wynik testu wypełnienia wymaganych pól - akronim pustego pola lub tekst pusty
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(RO_CFG,,'RO_REQC','KAT','KOMENT','FML_WCEL','FML_SZUK','FML_RET','FML_ZAP','FML_ZGO')=''


::======================================================================================================================
:: Formuły pomocnicze wykorzystywane podczas przetwarzania danych
::======================================================================================================================


\ret_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Tworzy i inicjuje tablicę wyniku zwracanego przez formuły wyszukania / zakresu / retencji / zapomnienia.
::       Struktura tablicy:
::          STATUS [NUMBER] - wynik działania:
::                            <0 - Błąd wewnętrzny uniemożliwiający dalsze działanie.
::                            0  - Podmiot odnaleziony, operacja wykonana.
::                            1  - Podmiot odnaleziony, niemożliwe wykonanie.
::                            2  - Podmiot nie został odnaleziony.
::                            3  - Niejednoznaczna identyfikacja podmiotu.
::                          500  - Inny
::          INFO   [STRING] - treść komunikatu
::          DATA   [DATE]   - data upłynięcia okresu przechowywania danych
::   WE: _a [INTEGER] - wartość STATUS (domyślnie 0)
::       _b [STRING] - wartość INFO (domyślnie '')
::   WY: wskazanie tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('STATUS','INFO','DATA','clear');

_ret.STATUS:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_ret.INFO:={? var_pres('_b')=type_of('') || _b || '' ?};
_ret.DATA:={? var_pres('_c')=type_of(date()) || _c || date(0,0,0) ?};

_ret.clear:="
   .STATUS:=0;
   .INFO:='';
   .DATA:=date(0,0,0);
   ~~
";

_ret


\get_infb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Tworzy bufor do przechowywania wyniku działania formuł na zakres przetwarzania.
::   WE:
::   WY: alias tabeli tymczasowej bufora
::----------------------------------------------------------------------------------------------------------------------
_BUF:=tab_tmp(2,
   'RO_REQC', 'INTEGER',    'Cel przetwarzania',
   'NUMER',   'REAL',       'Liczba porządkująca',
   'TABELA',  'STRING[8]',  'Tabela',
   'ETYKIETA','STRING[255]','Etykieta',
   'WARTOSC', 'STRING[255]','Wartość'
);

_BUF.fld_fml('NUMER','BLANK',"SYSLOG.tm_stamp()");

_BUF


\set_infb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Ustawia formuły na wartość początkową bufora zakresu przetwarzania danych.
::   WE: _a [TABLE] - alias tabeli bufora danych
::       _b [INTEGER/TABLE] - wartość zwracana przez formułę dla pola RO_REQC lub TABELA
::   WY:
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')=type_of(0)
|| _a.fld_fml('RO_REQC','BLANK',$$_b)
|? var_pres('_b')=type_of(SYSLOG)
|| _a.fld_fml('TABELA','BLANK',$('\''+(2-!_b)+'\''))
|| _a.fld_fml('RO_REQC','BLANK');
   _a.fld_fml('TABELA','BLANK')
?};
~~


\ins_infb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Dodaje do bufora parę ETYKIETA / WARTOSC. Jeśli w buforze ma zostać umieszczona informacja interpretowana jako
::       sekcja należy: pominąć argument _c, podać _c=~~ lub _c=null
::   WE: _a [TABLE] - alias tabeli bufora danych
::       _b [STRING] - etykieta (obowiązkowy)
::       _c [ANY] - wartość typu prostego
::   WY: wynik operacji add lub 0 dla _c='' lub błędnego wywołania
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<>type_of('') | form(_b)=''
|| return(0)
?};

_ct:=var_pres('_c');
_val:='';

{? _ct=type_of(~~)
|| 'Akceptowalna definicja kategorii'

|? _ct=type_of(0)
|| {? _c=0
   || return(0)
   || _val:=form_sys(_c)
   ?}

|? _ct=type_of('')
|| {? _c=''
   || return(0)
   || _val:=_c
   ?}

|? _d0:=date(0,0,0);
   _ct=type_of(_d0)
|| {? _c=_d0
   || return(0)
   || _val:=$_c
   ?}

|? _t0:=time(0,0,0);
   _ct=type_of(_t0)
|| {? _c=_t0
   || return(0)
   || _val:=_c$3
   ?}

|| return(0)
?};

_a.blank();
_a.ETYKIETA:=_b;
_a.WARTOSC:=_val;
_a.add()


\get_recb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Tworzy bufor do przechowywania wyniku działania formuł wyszukujących.
::   WE:
::   WY: alias tabeli tymczasowej bufora
::----------------------------------------------------------------------------------------------------------------------
_BUF:=tab_tmp(2,
   'RO_CFG', 'INTEGER',   'Konfiguracja',
   'NUMER',  'REAL',      'Liczba porządkująca',
   'TABELA', 'STRING[8]', 'Akronim tabeli',
   'SQL_REF','STRING[16]','Pełne wskazanie',
   'MASKA',  'STRING[8]', 'Nazwa zbioru',
   'REKORD', 'INTEGER',   'Numer wiersza',
   'CRC',    'INTEGER',   'Suma kontrolna',
   'HASH',   'STRING[40]','Suma kontrolna v.2',
   'POLA',   'SYS_MEMO',  'Lista pól',
   'UIDREF', 'STRING[48]','Identyfikator rekordu',
   'STATUS', 'INTEGER',   'Wynik wyszukania',
   'RO_REQC','INTEGER',   'Cel przetwarzania'
);

_BUF.fld_fml('NUMER','BLANK',"SYSLOG.tm_stamp()");

_BUF


\set_recb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Ustawia formuły na wartość początkową bufora wyszukiwanych danych.
::   WE: _a [TABLE] - alias tabeli bufora danych
::       _b [INTEGER] - wartość zwracana przez formułę dla pola RO_CFG
::       _c [INTEGER] - wartość zwracana przez formułę dla pola RO_REQC
::   WY:
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
_a.fld_fml('RO_CFG','BLANK',{? var_pres('_b')=type_of(0) || $$_b || "" ?});
_a.fld_fml('RO_REQC','BLANK',{? var_pres('_c')=type_of(0) || $$_c || "" ?});
~~


\ins_recb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Dodaje do bufora wskazanie wiersza tabeli.
::   WE: _a [TABLE] - Alias tabeli bufora danych.
::       _b [TABLE] - Alias tabeli, której bieżący rekord ma zostać dodany.
::   WY: wynik operacji add
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
_hash:=exec('hash','#record',_b,,1);

_a.blank();
_a.TABELA:=2-!_b;
_a.SQL_REF:=$_b.ref();
_a.MASKA:=_b.name();
_a.REKORD:=#_b.ref();
_a.CRC:=_b.crc();
_a.HASH:=_hash.hash;
_a.memo_set(_hash.pola,'POLA');

_a.UIDREF:='<BRAK>';
:: Jeżeli w strukturze tabeli jest pole typu IDADD to dostępna jest metoda uidref().
{! _lp:=1 .. _b.fld_num()
|? _a.UIDREF='<BRAK>'
|! {? var_pres(_b.fld_acr(_lp),_b)=39
   || _a.UIDREF:=_b.uidref()
   ?}
!};

_a.add() & _a.memo_put(,'POLA')


\copy_recb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła tworzy formułę, która kopiuje wartości pól
::   WE: _a [TABLE] - Uchwt tabeli.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_RECB:=_a;

_copy:='';
_memo:='';
{! _fi:=1 .. _RECB.fld_num()
|! _acr:=_RECB.fld_acr(_fi);
   _vp:=var_pres(_acr,_RECB);
   {? _vp<=22 | _vp=27
   || _copy+='_b.'+_acr+':=_a.'+_acr+'; '
   |? _vp=36
   || _copy+='_b.memo_set(_a.memo_txt(0,1,\''+_acr+'\'),\''+_acr+'\'); ';
      _memo+=' & _b.memo_put(,\''+_acr+'\')'
   ?}
!};
_copy:=$(_copy+'_b.add()'+_memo);
_copy


\export_tid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Napis identyfikujący rekord wskazywany przez bufor. Każdy wiersz zawiera identyfikator i wartość.
::       Identyfikatory mogą być poprzedzone spacjami, które są pomijane przy analizie wiersza.
::       Niektóre wartości mogą być puste. Napis zaczyna się identyfikatora systemowego (#ZDOID), którego wartością
::       jest wersja pliku (gdyby w przyszłości trzeba było zmienić zawartość pliku).
::       się od wskazania
::       UWAGI
::        * Bezpośrednio po identyfikatorze umieszczany jest dwukropek i jedna spacja.
::        * Zasadniczo kolejność linii nie ma znaczenia, ale linie występujące przed identyfikatorem systemowym
::          nie będą interpretowane.
::        * Zmiany w bieżącej formule wymagaja modyfikacji w formule \import_ids (poniżej).
::   WE:  _a  [TABLE]  - Alias tabeli bufora danych.
::       [_b] [STRING] - Parametr techniczny (numer wersji).
::   WY: Napis identyfikujący rekord wskazywany przez bufor.
::----------------------------------------------------------------------------------------------------------------------
_RECB:=_a;
_wersja:={? var_pres('_b')=type_of('') || _b || '002' ?};
:: Domyślnie przyjmowany jest numer wersji bieżącej. Parametr umożliwia testy współpracy z róznymi wersjami.

_nl:=%13+%10;

{? _wersja='001'
|| $_RECB.RO_CFG+_nl+
   _RECB.TABELA+_nl+
   _RECB.SQL_REF+_nl+
   _RECB.MASKA+_nl+
   $_RECB.REKORD+_nl+
   $_RECB.CRC+_nl+
   _RECB.UIDREF+_nl+
   $_RECB.RO_REQC+_nl+
   ''

|? _wersja='002'
|| '#ZDOIDV: 002'+_nl+
   ' RO_CFG: '+$_RECB.RO_CFG+_nl+
   'RO_REQC: '+$_RECB.RO_REQC+_nl+
   ' TABELA: '+_RECB.TABELA+_nl+
   '  MASKA: '+_RECB.MASKA+_nl+
   ' REKORD: '+$_RECB.REKORD+_nl+
   'SQL_REF: '+_RECB.SQL_REF+_nl+
   '   HASH: '+$_RECB.HASH+_nl+
   '   POLA: '+_RECB.memo_txt(0,1,'POLA')+_nl+
   ' UIDREF: '+_RECB.UIDREF+_nl+
   ''
|| ''
?}


\import_tid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła zwraca tabelę elementów nazwanych identyfikujących rekord.
::   WE:  _a  [BLOBRAW] - Wartość pola z plikiem
::        _b  [TABLE]   - Alias tabeli bufora danych.
::       [_c] [STRING]  - Lista wykluczeń walidacji separowana przecinkami. Elementami listy są kody elementów, które
::                        nie mają byc weryfikowane. Dostępne kody:
::                            CFG   - wskazanie wiersza konfiguracji;
::                            CRC   - suma kontrolna rekordu (v.001).
::                            HASH  - suma kontrolna rekordu (v.002).
::                            REQC  - wskazanie wiersza celu przetwarzania.
::   WY: '' lub treść komunikatu o błędzie.
::----------------------------------------------------------------------------------------------------------------------
_RECB:=_b;
_excl:={? var_pres('_c')=type_of('') || _c || '' ?};
{? _excl=''
|| _check:="1"
|| {? 1+_excl<>','
   || _excl:=','+_excl
   ?};
   {? _excl+1<>','
   || _excl:=_excl+','
   ?};
   _check:=$("'"+_excl+"'*(','+_a+',')=0")
?};

_ret:='';

_fh:=fopen(_a,'ur',,,1);
{? _fh.is_open()
|| _RECB.blank();
   _RECB.memo_set(,'POLA');
   _lp:=0;
   _wersja:='';
   {!
   |? (_linia:=_fh.fread())<>'\n'
   |! {? (_sep:=_linia*':')>0
      || _id:=|(_sep+_linia-1);
         _wart:=(_sep+1)-_linia
      || _id:='';
         _wart:=''
      ?};
      {? _id='' & _wersja=''
      || _lp+=1;
         {? _lp=1
         || _RECB.RO_CFG:=#_linia
         |? _lp=2
         || _RECB.TABELA:=_linia
         |? _lp=3
         || _RECB.SQL_REF:=_linia
         |? _lp=4
         || _RECB.MASKA:=_linia
         |? _lp=5
         || _RECB.REKORD:=#_linia
         |? _lp=6
         || _RECB.CRC:=#_linia
         |? _lp=7
         || _RECB.UIDREF:=_linia
         |? _lp=8
         || _RECB.RO_REQC:=#_linia
         ?}
      |? _id='#ZDOIDV'
      || _wersja:=_wart
      |? _wersja='002'
      || {? _id='RO_CFG'
         || _RECB.RO_CFG:=#_wart
         |? _id='RO_REQC'
         || _RECB.RO_REQC:=#_wart
         |? _id='TABELA'
         || _RECB.TABELA:=_wart
         |? _id='MASKA'
         || _RECB.MASKA:=_wart
         |? _id='REKORD'
         || _RECB.REKORD:=#_wart
         |? _id='SQL_REF'
         || _RECB.SQL_REF:=_wart
         |? _id='HASH'
         || _RECB.HASH:=_wart
         |? _id='POLA'
         || _RECB.memo_set(_wart,'POLA')
         |? _id='UIDREF'
         || _RECB.UIDREF:=_wart
         ?}
      ?}
   !};
:  Weryfikacja wczytanych danych
   {? {? _check('CFG')
      || RO_CFG.cntx_psh();
         RO_CFG.prefix();
         _ok:=RO_CFG.seek(_RECB.RO_CFG,);
         RO_CFG.cntx_pop();
         ~_ok
      ?}
   || _ret:='Nieprawidłowe wskazanie wiersza konfiguracji.'
   |? {? _check('RO_REQC')
      || RO_REQC.cntx_psh();
         RO_REQC.prefix();
         _ok:=RO_REQC.seek(_RECB.RO_REQC,);
         RO_REQC.cntx_pop();
         ~_ok
      ?}
   || _ret:='Nieprawidłowe wskazanie wiersza celu przetwarzania.'
   |? var_pres(_RECB.TABELA)<>type_of(SYSLOG)
   || _ret:='Nieprawidłowy akronim tabeli.'
   |? _TAB:=($_RECB.TABELA)();
      ~_TAB.names().find_key(_RECB.MASKA,)
   || _ret:='Nieprawidłowa maska tabeli.'
   || _TAB.cntx_psh();
      _TAB.use(_RECB.MASKA);
      _TAB.prefix();
      {? _RECB.UIDREF='<BRAK>'
      || {? ~_TAB.seek(_RECB.REKORD,)
         || _ret:='Nieprawidłowy numer rekordu [ref].'
         |? $_TAB.ref()<>_RECB.SQL_REF
         || _ret:='Nieprawidłowe wskazanie rekordu.'
         |? {? _wersja='' & _check('CRC')
            || _TAB.crc()<>_RECB.CRC
            |? _wersja='002' & _check('HASH')
            || exec('hash','#record',_TAB,_RECB.memo_txt(0,0,'POLA'),1).hash<>_RECB.HASH
            ?}
         || _ret:='Nieprawidłowa suma kontrolna rekordu.'
         ?}
      || {? ~_TAB.seek(_RECB.UIDREF)
         || _ret:='Nieprawidłowy numer rekordu [uidref].'
         ?}
      ?};
      _TAB.cntx_pop()
   ?};
   {? _ret=''
   || _RECB.add() & _RECB.memo_put(,'POLA')
   ?};
   _fh.fclose()
|| _ret:='Otwarcie pliku nie powiodło się.'
?};
obj_del(_fh);

_ret


\create_tid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła tworzy załącznik techniczny
::   WE: _a [REFERENCE] - Wskazanie rekordu nagłówka żądania (RO_REQN.ref()).
::       _b [REFERENCE] - Wskazanie rekordu celu przetwarzania (RO_REQC.ref()).
::       _c [TABLE]     - Uchwyt tabeli tymczasowej - bufora danych (patrz \get_recb).
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null()
|| _reqn:=_a
|| return(0)
?};
{? var_pres('_b')=type_of(null()) & _b<>null()
|| _reqc:=_b
?};
{? var_pres('_c')=type_of(SYSLOG)
|| _RECB:=_c
?};

_ret:=0;

RO_REQC.cntx_psh();
RO_REQC.prefix();
_name:={? RO_REQC.seek(_reqc) || RO_REQC.CODE || '' ?}+'-#sysid.txt';
RO_REQC.cntx_pop();

: Zapisz identyfikatory (w pliku technicznym)
_fh:=fopen(null(),'uw',,,1);
{? _fh.is_open()
|| _fh.fwrite(exec('export_tid','ro_cfg',_RECB));
   _reqr:=exec('set_ro_reqr','ro_req',_reqn,_reqc,0);
   _ref:=exec('add_ro_reqz','ro_req',_reqr,_fh,_name,'#Identyfikator','T');
   _fh.fclose();
   _ret:=1
?};
obj_del(_fh);

_ret


\ref_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła nadaje wartości tablicy z informacjami o konkretnym rekordzie (patrz \ref_arg/ro_cfg.fml);
::   WE: _a [ARRAY]            - Tablica.
::       _b [TABLE/STRING]     - Akronim tabeli.
::       _c [REFERENCE/STRING] - Pełna postać wskazania.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _arg:=_a
|| return(~~)
?};

{? var_pres('_b')=type_of(SYSLOG)
|| _arg.TABELA:=_b

|? var_pres('_b')=type_of('') & var_pres(_b)=type_of(SYSLOG)
|| _arg.TABELA:=($_b)()

|| return(_arg)
?};

{? var_pres('_c')=type_of(null()) & _c<>null()
|| _arg.REF:=_c;
   _arg.SQL_REF:=$_c;
   _arg.MASKA:=form(8+$_c);
   _arg.REKORD:=#_c

|? var_pres('_c')=type_of('') & +_c=16
|| _TAB:=_arg.TABELA;
   _TAB.cntx_psh();
   {? _TAB.use(form(8+_c))
   || _TAB.clear();
      {? _TAB.seek(BIT.sqlint(_c),)
      || _arg.REF:=_TAB.ref();
         _arg.SQL_REF:=$_TAB.ref();
         _arg.MASKA:=_TAB.name();
         _arg.REKORD:=#_TAB.ref()
      ?}
   ?};
   _TAB.cntx_pop()
?};

~~


\ref_arg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Tworzy tablicę nazwaną z informacjami o konkretnym rekordzie.
::       Struktura:
::          TABELA [TABLE] - alias tabeli
::          REF [REFERENCE] - wskazanie wiersza
::          SQL_REF [STRING] - tekstowa reprezentacja wskazania
::          MASKA [STRING] - nazwa zbioru
::          REKORD [INTEGER] - numer wiersza
::   WE: _a [TABLE/STRING] - akronim tabeli
::       _b [REFERENCE/STRING] - pełna postać wskazania
::   WY: wskazanie tablicy
::----------------------------------------------------------------------------------------------------------------------
_arg:=obj_new('TABELA','REF','SQL_REF','MASKA','REKORD');
_arg.TABELA:=~~;
_arg.REF:=null();
_arg.SQL_REF:='';
_arg.MASKA:='';
_arg.REKORD:=0;

{? var_pres('_a')<0 || _a:=~~ ?};
{? var_pres('_b')<0 || _b:=~~ ?};

exec('ref_set','ro_cfg',_arg,_a,_b);

_arg


\isvalid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Weryfikuje formuły konfiguracji.
::   WE:
::   WY: 1 - konfiguracja uzupełniona, 0 - braki w konfiguracji
::----------------------------------------------------------------------------------------------------------------------
_test:=$(
   "'{? RO_CFG.'+_a+'<>null '+"+
   "'|| RO_CFG.'+_a+'(); '+"+
   "'   RO_FML.memo_txt(,1,\\\'FORMULA\\\')<>\\\'\\\''+"+
   "'?}'"
);
_validate:="{! _ai:=2.._ |! {? ($_a(_[_ai]))()=0 || return(0) ?} !}";

_epilog:="
   RO_CFG.cntx_pop();
   RO_FML.cntx_pop()
";

RO_FML.cntx_psh();
RO_FML.prefix();
RO_CFG.cntx_psh();
RO_CFG.index('NUMER');
RO_CFG.prefix();
{? ~RO_CFG.first()
|| _epilog();
   return(0)
?};
_loop:=1;
{!
|? _loop
|! {? _validate(_test,'FML_WCEL','FML_SZUK','FML_INFO','FML_RET','FML_ZAP')
   || _loop:=RO_CFG.next()
   || _epilog();
      return(0)
   ?}
!};
_epilog();
1


\invalid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: W przypadku błędnej konfiguracji udziela stosownej odpowiedzi.
::   WE: _a [REF] - Wskazanie wiersza w tabeli nagłówków rządań RODO.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
RO_REQR.cntx_psh();
RO_REQR.index('RO_REQN');
RO_REQR.prefix(_a);
_loop:=RO_REQR.first();
{!
|? _loop
|! RO_REQR.RES_CODE:=500;
:  nie tłumaczyć tekstu poniżej
   RO_REQR.RES_DESC:='Wymagana weryfikacja konfiguracji systemu dziedzinowego.';
   RO_REQR.put();
   _loop:=RO_REQR.next()
!};
RO_REQR.cntx_pop();
~~

:Sign Version 2.0 jowisz:1028 2019/10/14 09:21:35 1811979454d0d0ef2c44827edf8742bfe746f64ac2766da79606198db66d1e492323f7c682f631ce9af17d351552c56c7fdba4a3346cad678886c5b238055d59503f0a211815a9cd371f0ab6661740c6f3eddc91dd90640e1336c8c378e4f9ff1b8674fcf8be7f5479939640da0274e400814d493e6275e8e0d19ca9ef072134
