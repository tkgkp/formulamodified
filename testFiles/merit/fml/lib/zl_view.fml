:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zl_view.fml
:: Utworzony: 22.06.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Obsługa filtrowania (zakresów) i widoków zleceń - tabela ZL
::            Plik biblioteczny - wspólna obsługa dla czynności obszaru roboczego TTE_PZL
::======================================================================================================================


\env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Udostępnia środowisko selektora zleceń
::----------------------------------------------------------------------------------------------------------------------
::UWAGA: _fld, i _mth to formułki pomocnicze, zeby wygodniej tworzyć tablicę i komentować poszczególne jej elementy
::       powiedzmy, że to będzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to będzie metoda
         _mth:="31+form(_a)";

_env:=obj_new(
:: obsługa kontekstu zleceń
   _fld('ZL','Zlecenie na którym aktualnie stoję')
   ,_fld('ZL_UP','Zlecenie na którym stoję w górnym okienku - do kontekstu pracy w strukturze')
   ,_fld('ZL_STR','Zlecenie na którym stoję w okienku struktury - do kontekstu pracy w strukturze')
   ,_fld('ZL_TREE','Zlecenie na którym stoję w górnym okienku - tylko do kolorowania drzewa w strukturze')
   ,_fld('BUF_ZL','Bufor zlecenia na którym aktualnie stoję')
   ,_fld('UID_ZL','uidref() zlecenia na którym aktualnie stoję')
   ,_fld('TKTL_ZL','Technologia aktualnie zaznaczonego zlecenia')
   ,_fld('TKTL_SRC','Technologia źródłowa aktualnie zaznaczonego zlecenia')
   ,_fld('OPER_ZL','Aktualna operacja technologii zlecenia')
   ,_fld('OPER_SRC','Aktualna operacja technologii źródłowej')
   ,_fld('ZGH','Aktualny przewodnik')
   ,_fld('GROP','Aktualna grupa operacji - w tym kontekście zawsze null()')
   ,_fld('DISABLE','String sterujący wyłączaniem zakładek')

   ,_fld('AKT_ZL','Zaznaczona rodzina zleceń - służy do sterowania ikoną w widoku z podzleceniami')
   ,_fld('ZL_CNTX','Kontekst okna - obiekt zawierający zapamiętany indeks i prefiks')

:: zmienne pomocnicze
   ,_fld('WP','Aktywny widok zleceń - "W"arsztatowe, "P"rodukcyjne')
   ,_fld('CUR_TAB','Bufor zmiennej ZLV - zakładka na której aktualnie stoję')
   ,_fld('win_config','tabelka tymczasowa zawierająca wszystkie akronimy okien i nazwy tabel na każdej zakładce')
   ,_fld('STRUCT','widok struktury zleceń - oderwany (nie w zakładkach) - m.in. inne kolorowanie')
   ,_fld('RELOAD','okno w trakcie przeładowywania')
   ,_fld('ZLIM_reload','polecenie przeładowania zakładki surowców nielimitowanych przy najbliższym odświeżaniu')
   ,_fld('TECH_reload','polecenie przeładowania zakładki technologii zlecenia przy najbliższym odświeżaniu')
   ,_fld('CAUSE','przyczyna awaryjnego otwarcia zlecenia (lub innego czegoś) - do użycia w akcji grupowej')

:: okna - proste
   ,_fld('WERP','Okno zleceń produkcyjnych')
   ,_fld('WERW','Okno zleceń warszatowych')
:: okna - grupowe bez zakładek
   ,_fld('GRPP','Okno grupowe zleceń produkcyjnych bez zakładek')
   ,_fld('GRPW','Okno grupowe zleceń warsztatowych bez zakładek')
:: okna - grupowe z zakładkami
   ,_fld('ZRPP','Okno grupowe zleceń produkcyjnych z zakładkami')
   ,_fld('ZRPW','Okno grupowe zleceń wartsztatowych z zakładkami')

:: obiekt konfiguracyjny zakładek
   ,_fld('tabs','tablica nazwana zawierająca bufory zmiennej mbuilderowej ZLV - konfigurację zakładki')

:: formuły
   ,_fld('after_rfrsh_GP','Po odświeżeniu w oknie grupowym zleceń produkcyjnych bez zakładek')
   ,_fld('after_rfrsh_GW','Po odświeżeniu w oknie grupowym zleceń warsztatowych bez zakładek')
   ,_fld('after_rfrsh_ZP','Po odświeżeniu w oknie grupowym zleceń produkcyjnych z zakładkami')
   ,_fld('after_rfrsh_ZW','Po odświeżeniu w oknie grupowym zleceń warsztatowych z zakładkami')
   ,_fld('refresh_P','Odświeżenie po zmianie rozmiaru okien w oknie grupowym zleceń produkcyjnych z zakładkami')
   ,_fld('refresh_W','Odświeżenie po zmianie rozmiaru okien w oknie grupowym zleceń warsztatowych z zakładkami')

:: zagnieżdżone środowiska
   ,_fld('env_limit','środowisko do obsługi limitów')
   ,_fld('env_blob','środowisko do obsługi blobów w filelistpanel-u')

:: metody
   ,_mth('select','uruchamia wertowanie okna')
   ,_mth('win_attach','przypina utworzone okno w grupie do środowiska')
   ,_mth('get_tab','zwraca bufor zmiennej ZLV informujący na której zakładce aktualnie jestem')

);
_env.ZL:=null();
_env.ZL_UP:=null();
_env.ZL_STR:=null();
_env.ZL_TREE:=null();
_env.BUF_ZL:=exec('ZL','buffer');
_env.TKTL_ZL:=null();
_env.TKTL_SRC:=null();
_env.OPER_ZL:=null();
_env.OPER_SRC:=null();
_env.GROP:=null();

_env.AKT_ZL:='';
_env.ZL_CNTX:=obj_new('IND','PRF');
_env.ZL_CNTX.IND:='';
_env.ZL_CNTX.PRF:='';
_env.STRUCT:=0;
_env.RELOAD:=0;
_env.ZLIM_reload:=0;
_env.TECH_reload:=0;

_env.win_config:=tab_tmp(3,
:: 'POLE','TYP','Nazwa w oknie',
   'GRP','STRING[8]','Akronim okna grupowego',
   'TABLE','STRING[8]','Nazwa tabeli - name(1)',
   'WIN','STRING[8]','Akronim okna',
   'TAB_ID','STRING[50]','Id zakładki np TECH_SRC',
   'WIN_ID','STRING[50]','Identyfikator okna nadany przez programistę'
);

:: Definicje zakładek
_env.tabs:=obj_new( 'TECH_SRC'
                  ,'TECH_ZL'
                  ,'PRZEWODNIKI'
                  ,'LIMITY'
                  ,'DODATKOWE'
                  ,'RAPORTY'
                  ,'DOKUMENTY'
);
ZLV.blank();

{! _it:=1..obj_len(_env.tabs)
|! _env.tabs[_it]:=exec('ZLV','buffer');
   _env.tabs[_it].get()
!};

_env.select:="
   params_set(params_get());
   exec('select','zl_head',.)
";

_env.win_attach:="
:: _a - STRING - akronim okna grupowego do którego zostało dodane okno
:: _b - TABLE - Tabela której okno zostało dodane
:: _c - STRING - Akronim okna które zostało dodane
:: _d - obj_new - bufor zmiennej ZLV - zakładka na którą okno zostało dodane
:: [_e] - STRING - Identyfikator okna nadany przez programistę

   _grp:=_a;
   _table:=_b;
   _win:=_c;
   _zlv:=_d;
   _id:='';

   {? var_pres('_e')=type_of('')
   || _id:=_e
   ?};

   .win_config.cntx_psh();
   .win_config.prefix(_grp,_table.name(1),_win,);
   {? .win_config.size()=0
   ||
      .win_config.blank();
      .win_config.GRP:=_grp;
      .win_config.TABLE:=_table.name(1);
      .win_config.WIN:=_win;
      .win_config.TAB_ID:=_zlv.ID;
      .win_config.WIN_ID:=_id;
      .win_config.add()
   ||
::    Jeżeli okno tabeli zostało już skojarzone ze środowiskiem to error
::    Nie można dwa razy dodawać, ponieważ nie zadziała mechanizm który automatycznie
::    określa na której zakładce stoję (szczególnie w przypadku gdy to samo okno dodałbym na dwie różne zakładki)
      FUN.info('Błędna konfiguracja środowiska. Nie można dodawać tego samego okna tej samej tabeli wielokrotnie.'@)
   ?};
   .win_config.cntx_pop();
   ~~
";

_env.get_tab:="
   _result:=~~;
   .win_config.cntx_psh();
:: Prefiksuję tabelę tymczasową zawierającą konfigurację okna aktualną tabelą i aktualnym oknem
:: żeby wyciągnąć info na której zakładce to okienko zostało wstawione
   .win_config.prefix(cur_win(0),cur_tab(1,1).name(1),cur_win(1,1),);
   {? .win_config.first()
   || _tab_id:=.win_config.TAB_ID;
      {? _tab_id<>''
      || _rule:='.tabs.'+_tab_id;
         _result:=($_rule)()
      ?}
   ?};
   .win_config.cntx_pop();
   _result
";

_env.env_limit:=exec('env_limit','zl_limit');

:: zainicjowanie środowiska obsługi plików załączonych do zlecenia
_env_blob:=exec('env_blob','#edit');
_env_blob.TAB:=PLIKIDOC; PLIKIDOC.index('TRS'); PLIKIDOC.prefix('*');
_env_blob.FIELD:='DOC';
_env_blob.EDITABLE:=1;
_env_blob.BUFFER:=exec('PLIKIDOC','buffer');
_env_blob.FML_EDIT:="params_exec('fml_edit','tech_doc',_a,_b,_c,_d)";
_env_blob.FML_FILE:="params_exec('fml_edit','tech_doc',_a,_b,_c,_d)";
_env_blob.FML_ARGS:=exec('fml_args','tech_doc');
_env_blob.FML_VALID:="params_exec('fml_edit','tech_doc',_a,_b,_c,_d,_e)";
_env_blob.mk_ctr();
_env.env_blob:=_env_blob;

_env


\zakr_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: ustawia zakres dla zleceń
::  OLD: \zakr_all/zlec1.fml
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

_ind:='''ODDZ'',,,''ST_MJS'',,,''TYP'',''WP'',,';
_prf:='ST.ODDZ_KOD,''Z'',ZAKR.ZTP_WP,';
_niewar:=ZAKR.ZTP_WP<>'W';

{? ZAKR.VZL='N'
|| _ind+='''NRNZL'',,,';
   _prf+='0,'
?};

{? ZAKR.ZL_STAN='W'
|| _ind+='''ST_W'',,,';
   _prf+='\'T\','
|? ZAKR.ZL_STAN='O'
|| _ind+='''ST_O'',,,';
   _prf+='\'T\','
|? ZAKR.ZL_STAN='Z'
|| _ind+='''ST_Z'',,,';
   _prf+='\'T\','
|? ZAKR.ZL_STAN='N'
|| _ind+='''ST_N'',,,';
   _prf+='\'T\','
?};

_ind+='''SYM'',,,';

{? _ind<>''
|| _ind:=_ind-1; _prf:=_prf-1;
   ZL.ndx_drop();
   _ndx:=($('ZL.ndx_tmp('''',,'+_ind+')'))();
   ZL.index(_ndx);
   ($('ZL.prefix('+_prf+')'))();
   _env.ZL_CNTX.IND:=_ndx;
   _env.ZL_CNTX.PRF:=_prf
?};
VAR.FILTER:={? form(FZ.INFO)<>'' || 'T' || 'N' ?};
:: ustwienie zmiennych filter
FILTER.STAN_ZL:={? ZAKR.ZL_STAN='A' || ''
                |? ZAKR.ZL_STAN='W' || 'N'
                |? ZAKR.ZL_STAN='O' || 'O'
                |? ZAKR.ZL_STAN='Z' || 'Z'
                |? ZAKR.ZL_STAN='N' || 'X'
                || ''
                ?};

:: wyczyszczenie zmiennych, gdy pusty zakres
ZL.cntx_psh();
{? ZL.size()=0 || _env.ZL:=null() ?};
ZL.cntx_pop();
''


\ust_zakr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: ustawia wartości pól ZAKR.VZL i ZAKR.TZL na podstawie parametru
::  OLD: \ust_zakr/zlec1.fml
::----------------------------------------------------------------------------------------------------------------------
exec('vzl_tzl','zl_view');
_war:=exec('get','#params',8501,2,OPERATOR.USER);
ZAKR.ZL_STAN:=1+_war;
~~


\vzl_tzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: ustawia aktualne wartości dla ZAKT.VZL i ZAKR.TZL
::  OLD: \vzl_tzl/zlec1.fml
::----------------------------------------------------------------------------------------------------------------------
_war:=exec('get','#params',8500,2,OPERATOR.USER);
ZAKR.VZL:=1+_war;
{? exec('interm','#system')
|| ZAKR.TZL:='N';
   ZAKR.ZZL:='N'
|| ZAKR.TZL:=1+(1-_war);
   ZAKR.ZZL:=_war+1
?};
~~


\zl_filtr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [TS] [7.62] [rr] [12.41]
:: OPIS: Filtr dla zleceń
::  OLD: \zl_filtr/zlec1.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('zl_zakr','zl_view');
AreaTitle.setTitle();
~~


\zl_zakr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: Zakres dla zleceń
::  OLD: \zl_zakr/zlec1.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

ST.ZTP_T:=FZ.TYPYSP().T;
VAR_DEL.delete('BUF_FZ');
BUF_FZ:=obj_new(@.CLASS.BUFFER,'ZAKR');

_tzl:=ZAKR.TZL;
_zzl:=ZAKR.ZZL;
_wer:='PWER';
{? ZAKR.ZTP_WP='W'
|| _ztp:=ZAKR.ZL_ZTP;
   ZAKR.ZL_ZTP:=ZAKR.ZL_ZTPW
?};
exec('ust_zakr','zl_view');
BUF_FZ.save();
ZAKR.win_edit('ZAKR_ZL'+ZAKR.ZTP_WP);
ZAKR.win_efml('ZAKR_ZL'+ZAKR.ZTP_WP,,'IKONA_N',,'ICON_BEFORE',"'xwin16.png:18'");
ZAKR.win_efml('ZAKR_ZL'+ZAKR.ZTP_WP,,'IKONA_O',,'ICON_BEFORE',"'xwin16.png:156'");
ZAKR.win_efml('ZAKR_ZL'+ZAKR.ZTP_WP,,'IKONA_Z',,'ICON_BEFORE',"'xwin16.png:157'");

:: TODO: WIDOKI
{? exec('interm','#system')
|| ZAKR.efld_opt('ZAKR_ZL'+ZAKR.ZTP_WP,'enable=0',,'ZZL');
   ZAKR.efld_opt('ZAKR_ZL'+ZAKR.ZTP_WP,'enable=0',,'TZL')
|| ZAKR.efld_opt('ZAKR_ZL'+ZAKR.ZTP_WP,'enable=1',,'ZZL');
   ZAKR.efld_opt('ZAKR_ZL'+ZAKR.ZTP_WP,'enable=1',,'TZL')
?};

ZTP.f_clear();
_typy:=exec('typy_zlecen','zl_head',ZAKR.ZTP_WP,0);
ZTP.f_set('TYP',,'ZTP.REFERENCE in (select :_a.REF from :_a)',_typy);
obj_del(_typy);
ZTP.win_dict('WER_SEL');
ZTP.actions('WER_SEL','W');
exec('set_dict','zl_head');
{? ZAKR.edit("''")
|| exec('set','#params',8500,ZAKR.VZL+ZAKR.TZL+ZAKR.ZZL,OPERATOR.USER);
   exec('set','#params',8501,ZAKR.ZL_STAN,OPERATOR.USER);

   {? ZAKR.TZL<>_tzl
   || FUN.info('Zmieniono sposób wyświetlania struktury zlecenia.\nNależy ponownie uruchomić obszar roboczy.'@);
      params_get().env.RELOAD:=1;
      BEER.NAWIGTEN:=0;
      sel_exit()
   |? ZAKR.ZZL<>_zzl
   || BEER.NAWIGTEN:=1;
      sel_exit()
   ?};
   exec('zakr_all','zl_view')
|| BUF_FZ.restore()
?};
{? ZAKR.ZTP_WP='W'
|| ZAKR.ZL_ZTPW:=ZAKR.ZL_ZTP;
   ZAKR.ZL_ZTP:=_ztp
?};
VAR_DEL.delete('BUF_FZ');
''


\be_f_ztp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2006]
:: OPIS: Przed redakcją pola FILTER.ZTP, ZAKR.ZL_ZTP
::   WY: 0/1
::  OLD: \be_f_ztp/zlec5.fml
::----------------------------------------------------------------------------------------------------------------------
VAR.S_TPZL='0'


\ae_f_ztp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2006]
:: OPIS: Po redakcji pola FILTER.ZTP, ZAKR.ZL_ZTP
::   WY: 1
::  OLD: \ae_f_ztp/zlec5.fml
::----------------------------------------------------------------------------------------------------------------------
1


\green_branch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: W strukturze drzewa sprawdza czy _b jest pod _a bezpośrednio lub pośrednio
::   WE: _a - ZL.ref() początek gałęzi
::       _b - ZL.ref() badany element
::   WY: 0-uschla, 1-zielona
::  OLD: \green_branch/zlec5.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=_b || return(1) ?};

ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_b) & ZL.TREE
|| _wyn:={? ZL.seek(ZL.TREE,) || exec('green_branch','zl_view',_a,ZL.ref()) || 0 ?}
|| _wyn:=0
?};
ZL.cntx_pop();
_wyn


\ctrl_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: kontroluje podane zlecenie czy mieści się w danym zakresie
::   WE: _a - ref zlecenia
::   WY: 1-mieści sie 0-nie
::  OLD: \ctrl_zl/zlec1.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
ZL.cntx_psh();
ZL.clear();
{? ZL.seek(_a)
||  _wyn:=(';AWN'*ZAKR.ZL_STAN)>1
?};
ZL.cntx_pop();
_wyn


\activate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: aktywowanie maski uprawnien dla zlecenia
::   WE: _a - INTEGER - czy użytkownik się wklikał czy wywołanie wew grp_disp
::       _b - opcja: technologia zrodlowa (T), technologia zlecenia (Z)
::  OLD: \activate/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_user_action:=_a;
_opcja:=_b;
::msg('act '+ZL.SYM+' '+KHVZ.ZAKLADKA);

{? _opcja='T'
|| _msk:=(8+($_env.TKTL_SRC))+3;
   exec('tktl_use','tech_common',_msk);
   ~~
|? _opcja='Z'
|| _msk:=(8+($_env.TKTL_ZL))+3;
   exec('tktl_use','tech_common',_msk);
   ~~
?};

{? cur_tab(1,0)<>ZL
||
   _u_zlec:=exec('FindAndGet','#table',ZL,_env.ZL,,"UNRZL",0);
   {? _u_zlec>0
   ||
      {? _user_action>0
      || VAR.U_ZLEC:=_u_zlec
      ?}
   ?}
?}


\deactivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: dezaktywowanie maski uprawnien dla zlecenia
::  OLD: \deactivate/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_user_action:=_a;
{? cur_tab(1,0)<>ZL
||
   {? +VAR.ZAKLADKI>0
   || {? VAR.U_ZLEC>0
      ||
         {? _user_action>0
         || VAR.U_ZLEC:=0
         ?}
      ?}
   ?}
?}


\after_rfrsh_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła po odświeżeniu w oknie grupowym - zlecenia produkcyjne
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env.ZL:=ZL.ref();
{? cur_win(1,1)='STRUCT' || _env.ZL_STR:=ZL.ref() || _env.ZL_TREE:=ZL.ref(); _env.ZL_STR:=null() ?};
_env.BUF_ZL.get();
_env.UID_ZL:=ZL.uidref();
_env.TKTL_ZL:=null();
_env.TKTL_SRC:=null();
_env.DISABLE:='';

_zm:=ZAKR.VZL='A' & _env.AKT_ZL<>ZL.NODE & ZL.NODE<>'';
_env.AKT_ZL:=ZL.NODE;
_selected:=ZL.sel_size()<>0;
_grayed:=':';

{? ZL.RKTL='' || _grayed:='E(E)'+_grayed ?};
{? ZL.RTKTL='' || _grayed:='F(UTS)'+_grayed ?};
{? ZL.TYP().TECH='T' & ZL.RODZAJ<>'N'
|| {? ZL.STAT_N='N' || _grayed:='E(TPLSWDARO)F(S)'+_grayed
   |? ZL.STAT_T='N' || _grayed:='E(PLSW)F(S)'+_grayed
   ?}
|| _grayed:='E(T)Z(T)F(S)'+_grayed;
   {? ZL.STAT_N='N' || _grayed:='E(PLSWDARO)'+_grayed
   ?}
?};

:: Zlecenie ma produkt niepartiowany, akcja 'Partie' i inne skojarzone wyszarzone
{? exec('zl_party_menu','zl_partie',ZL.ref())=0
|| _grayed:='E(R)R(Z)'+_grayed
?};

:: Proste: bez dołączania i generowania podrzędnych, gdy nie jest w strukturze zlecenia złożonego
{? ZL.RODZAJ='P' & ZL.NRNZL=0 || _grayed:='D(DGT(ZSE))'+_grayed ?};
:: Proste: bez dołączania podrzędnych i generowania podrzędnych, gdy jest podzleceniem niezależnego
{? ZL.RODZAJ='P' & ZL.NRNZL<>0 & exec('top_rodzaj','zl_link',ZL.ref())='N' || _grayed:='D(GDT(ZS))'+_grayed ?};
:: Proste: bez struktury i dołączania podrzędnych skądś
{? ZL.RODZAJ='P' & ZL.NRNZL=0 || _grayed:='D(T(ZSE))E(Z)'+_grayed ?};
:: Niezależne: bez generowania podrzędnych, bez przewodników, bez wybranych analiz
{? ZL.RODZAJ='N' || _grayed:='D(G)E(P)N(PAS)F(RA)'+_grayed ?};
:: Złożone: bez dołączania podrzędnych, bez technologii zlecenia, bez zatwierdzania technologii
{? ZL.RODZAJ='Z' || _grayed:='D(DT(ZSE))E(T)Z(T)'+_grayed ?};
:: Zakończony nagłówek
{? ZL.STAT_N='T' || {? ~_selected || _grayed:='Z(N)'+_grayed  ?} || _grayed:='D(DGT(ZSE))Z(TPZD)'+_grayed ?};
:: Zakończona technologia
{? ZL.STAT_T='T' || _grayed:='Z(T)'+_grayed |? ZL.TYP().TECH='T' || _grayed:='Z(PZ)'+_grayed ?};
:: Złożone, gdy już jest zlecenie montażowe
{? ZL.RODZAJ='Z' & exec('subzlec_exist','zl_link',ZL.ref()) || _grayed:='D(G)'+_grayed ?};
:: Technologia bez operacji
{? ZL.RODZAJ='P' & ZL.STAT_T='T' &
   (  ZL.TYP().TECH='N'
      & exec('FindAndGet','#table',TKTL,ZL.RKTL,,"TYP().OPER",'T')='N'
         |
      ZL.TYP().TECH='T'
      & exec('FindAndGet','#table',TKTL,ZL.RTKTL,,"TYP().OPER",'T')='N'

   )
|| _grayed:='E(P)'+_grayed
?};

:: Proste i niezależne bez generowania struktury
{? ZL.RODZAJ='P' | ZL.RODZAJ='N' || _grayed:='F(G)'+_grayed ?};

:: Nie montażowe bez rozliczania nielimitowanych i odpadów
{? ZL.RODZAJ<>'P' | ZL.RP<>'T'
|| {? ~_selected || _grayed:='R(L(R)Ó)'+_grayed ?}
?};

:: Zaplanowane bez symulacji, niezaplanowane bez planu - o ile dotyczy planowanu strategicznego
{? exec('subzlec_exist','zl_link',ZL.ref()) | ZL.RODZAJ='P'
|| {? ~_selected
   || {? exec('zl_utilization','px_plan',ZL.ref())>0 || _grayed:='N(Y)'+_grayed || _grayed:='N(O(P))'+_grayed ?}
   ?}
|| _grayed:={? _selected || 'F(RA)' || 'N(YO(P))F(RA)' ?}+_grayed
?};

:: Nie zaplanowane operacyjnie bez podglądu planu
{? ZL.PLAN_PO='N' || _grayed:='N(O(O))'+_grayed ?};

:: Rejestracja wykonań
{? exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWPS')=0 | exec('get','#params',500613,2)='N'
|| _grayed:='R(S)'+_grayed
?};
{? exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWPO')=0 | exec('get','#params',500612,2)='N'
|| _grayed:='R(O)'+_grayed
?};
{? exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWZL')=0 | exec('get','#params',500611,2)='N'
|| _grayed:='R(P)'+_grayed
?};

:: Według stanu
{? ZL.STAN='N' || _grayed:='R(KCYWAIM)'+_grayed;
                  {? ~_selected || _grayed:='R(LÓ)F(OJZ)'+_grayed ?}
|? ZL.STAN='O' || _grayed:='Z(TPZD)'+_grayed;
                  {? ~exec('uprDelZatwZl','zl_head') || _grayed:='U'+_grayed ?};
                  {? ~_selected || _grayed:='AF(OJZ)Z(N)'+_grayed ?}
|? ZL.STAN='Z' || _grayed:='D(GDTE)PUR(POSBA)F(SG)Z(TPZD)'+_grayed;
                  {? ~_selected || _grayed:='AIR(LÓ)N(Y)F(W)Z(N)'+_grayed ?}
?};
{? ZL.STAN='N' & ZL.RODZAJ='P'
||
:: Proste w przygotowaniu mają wyszarzone akcje rejestracji, złożone nie bo podzlecenia mogą być
:: otwarte i analiza czy wyszarzać będzie zbyt czasochłonna
   _grayed:='R(POSB)'+_grayed
?};

:: Zamknięcie kosztowe
{? ~_selected
|| {? ZL.STAT_K='T'
   || _grayed:='F(J)'+_grayed
   || _grayed:='F(Z)'+_grayed
   ?}
?};

:: Według aktywnych czynności
{? exec('record_keyrefed','#b__box',ZL.uidref(),'TTE_PZL_DPOZ')=0 || _grayed:='Z(D)'+_grayed ?};
::{? exec('record_keyrefed','#b__box',ZL.uidref(),'LMG_ZAM_IPRZ')=0 || _grayed:='R(Ł)'+_grayed ?};

:: Na podstawie przewodników zlecenia prostego w przygotowaniu
{? ZL.RODZAJ='P' & ZL.STAN='N' & exec('stat_rej','zl_guide',ZL.ref())='T' || _grayed:='Z(P)'+_grayed ?};
{? ZL.RODZAJ='P' & ZL.STAN='N' & exec('stat_l','zl_limit',ZL.ref())='T' || _grayed:='Z(Z)'+_grayed ?};

:: Generowanie raportów produkcji
{? ZL.RODZAJ='N' | ZL.RP<>'T'
||
:: Zlecenie niezależne lub takie na którym nie będzie powstawał dokument RP
   _grayed:='R(A)'+_grayed
?};

:: Podział zlecenia - tylko proste nie będące podzleceniami
{? ZL.TREE_TYP<>'P' || _grayed:='D(E)'+_grayed ?};

:: Definiowanie wielu produktów/wyrobów zlecenia (zablokowane dla zleceń prostych, które nie raportują produkcji)
{? ZL.RP<>'T' & ZL.RODZAJ<>'Z'
|| _grayed:='E(O)'+_grayed
?};

_no_et:={? ~exec('isDEFetyk','magazyn_mobi','ZL') || 'O(T)' || '' ?};
{? cur_win(1,1)='PWER_P' || _grayed:=_no_et+_grayed ?};

ZL.actions_grayed(cur_win(1,1),_grayed);
{? ZAKR.TZL='T' & cur_win(1,1)='PWER_P'
|| {? ~_env.RELOAD
   || grp_disp(ZL,'STRUCT',1)
   ?}
?};
{? _zm || grp_disp(ZL,'PWER_P') ?};
{? grp_empty(ZL,cur_win(1,1)) || _env.DISABLE:='#disable' ?};

VAR.BL_WYD:=ZL.JORG;
~~


\after_rfrsh_w
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła po odświeżeniu w oknie grupowym - zlecenia warsztatowe
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env.ZL:=ZL.ref();
_env.BUF_ZL.get();
_env.UID_ZL:=ZL.uidref();
_env.TKTL_ZL:=null();
_env.TKTL_SRC:=null();
_env.DISABLE:='';

_selected:=ZL.sel_size()<>0;
_grayed:=':';
{? ZL.STAT_N='N' || _grayed:='E(PLSDAR)'+_grayed ?};

:: Zakończony nagłówek
{? ZL.STAT_N='T' || {? ~_selected || _grayed:='Z(N)'+_grayed ?} || _grayed:='Z(PZD)'+_grayed ?};

:: Zaplanowane bez symulacji, niezaplanowane bez planu - o ile dotyczy planowania strategicznego
{? exec('subzlec_exist','zl_link',ZL.ref()) | ZL.RODZAJ='P'
|| {? ~_selected
   || {? exec('zl_utilization','px_plan',ZL.ref())>0 || _grayed:='N(Y)'+_grayed || _grayed:='N(O(P))'+_grayed ?}
   ?};
   {? ZL.RODZAJ<>'P' || _grayed:='F(R)'+_grayed ?}
|| _grayed:={? _selected || 'F(RA)' || 'N(YO(P))F(RA)' ?}+_grayed
?};

:: Nie zaplanowane operacyjnie bez podglądu planu
{? ZL.PLAN_PO='N' || _grayed:='N(O(O))'+_grayed ?};

:: Rejestracja wykonań
{? exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWPS')=0 | exec('get','#params',500613,2)='N'
|| _grayed:='R(S)'+_grayed
?};
{? exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWPO')=0 | exec('get','#params',500612,2)='N'
|| _grayed:='R(O)'+_grayed
?};
{? exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWZL')=0 | exec('get','#params',500611,2)='N'
|| _grayed:='R(P)'+_grayed
?};

:: Według stanu
{? ZL.STAN='N' || _grayed:='R(KCYWAM)'+_grayed;
                  {? ~_selected || _grayed:='F(OJZ)'+_grayed ?}
|? ZL.STAN='O' || _grayed:='Z(TPZD)'+_grayed;
                  {? ~exec('uprDelZatwZl','zl_head') || _grayed:='U'+_grayed ?};
                  {? ~_selected || _grayed:='AF(OJZ)Z(N)'+_grayed ?}
|? ZL.STAN='Z' || _grayed:='PUR(POSA)Z(TPZD)'+_grayed;
                  {? ~_selected || _grayed:='AIN(Y)F(W)Z(N)'+_grayed ?}
?};
{? ZL.STAN='N' & ZL.RODZAJ='P'
||
:: Proste w przygotowaniu mają wyszarzone akcje rejestracji, złożone nie bo podzlecenia mogą być
:: otwarte i analiza czy wyszarzać będzie zbyt czasochłonna
   _grayed:='R(POSB)'+_grayed
?};

:: Zamknięcie kosztowe
{? ~_selected
|| {? ZL.STAT_K='T'
   || _grayed:='F(J)'+_grayed
   || _grayed:='F(Z)'+_grayed
   ?}
?};

:: Według aktywnych czynności
{? exec('record_keyrefed','#b__box',ZL.uidref(),'TTE_PZL_DPOZ')=0 || _grayed:='Z(D)'+_grayed ?};
::{? exec('record_keyrefed','#b__box',ZL.uidref(),'LMG_ZAM_IPRZ')=0 || _grayed:='R(Ł)'+_grayed ?};

:: Na podstawie przewodników zlecenia w przygotowaniu
{? ZL.STAN='N' & exec('stat_rej','zl_guide',ZL.ref())='T' || _grayed:='Z(P)'+_grayed ?};
{? ZL.STAN='N' & exec('stat_l','zl_limit',ZL.ref())='T' || _grayed:='Z(Z)'+_grayed ?};

_no_et:={? ~exec('isDEFetyk','magazyn_mobi','ZL') || 'O(T)' || '' ?};
{? cur_win(1,1)='PWER_W' || _grayed:=_no_et+_grayed ?};

ZL.actions_grayed(ZL.win_sel('PWER_W'),_grayed);
{? grp_empty(ZL,cur_win(1,1)) || _env.DISABLE:='#disable' ?};

VAR.BL_WYD:=ZL.JORG;
~~


\load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ładowanie środowiska
::   WE: _a - środowisko
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
params_set('env',_env);

exec('vzl_tzl','zl_view');

:: Formuły (początek - odświeżanie dla głównego okna)
:: > Zlecenia produkcyjne
_env.after_rfrsh_GP:=_env.after_rfrsh_ZP:="params_exec('after_rfrsh_p','zl_view');\n";
_env.refresh_P:="";
:: > Zlecenia warsztatowe
_env.after_rfrsh_GW:=_env.after_rfrsh_ZW:="params_exec('after_rfrsh_w','zl_view');\n";
_env.refresh_W:="";

:: Formuły (środek - odświeżanie dla każdej zakładki)
{! _it:=1..obj_len(_env.tabs)
|! {? var_pres('_cfg')>100
   || obj_del(_cfg)
   ?};
   _cfg:=_env.tabs[_it];
   {? _cfg.P='T' || _env.after_rfrsh_ZP+=_cfg.REFRESH+';\n'; _env.refresh_P+=_cfg.REFRESH+';\n' ?};
   {? _cfg.W='T' || _env.after_rfrsh_ZW+=_cfg.REFRESH+';\n'; _env.refresh_W+=_cfg.REFRESH+';\n' ?}
!};

:: Formuły (koniec)
_env.after_rfrsh_GP:=$(_env.after_rfrsh_GP+"~~");
_env.after_rfrsh_GW:=$(_env.after_rfrsh_GW+"~~");
_env.after_rfrsh_ZP:=$(_env.after_rfrsh_ZP+"~~");
_env.after_rfrsh_ZW:=$(_env.after_rfrsh_ZW+"~~");
_env.refresh_P:=$(_env.refresh_P+"~~");
_env.refresh_W:=$(_env.refresh_W+"~~");

_env.WERP:='PWER_P';
:: Okno grupowe i podział dla zleceń produkcyjnych (z zakładkami i ew. panelem struktury)
{? exec('runtime_r10','#system') & exec('cli_ver','#system')='jterm'
|| _env.ZRPP:=ZL.grp_make('',,'zrpp'+(-ZAKR.TZL),,,"exec('exit','zws',_a)",_env.refresh_P,'maximized','jterm')
|| _env.ZRPP:=ZL.grp_make('',,'zrpp'+(-ZAKR.TZL),,,"exec('exit','zws',_a)",_env.refresh_P,'maximized')
?};
_fb:="
   params_set(params_get());
   _env:=params_get().env;
   {? _a>0
   || {? _env.ZL_UP<>null()
      || ZL.seek(_env.ZL_UP)
      ?}
   ?};
   ~~
";
_fa:="
   params_set(params_get());
   _env:=params_get().env;
   {? _a>0
   || _env.ZL_UP:=ZL.ref()
   ?};
   ~~
";
ZL.grp_sel(_env.ZRPP,,_env.WERP,,{? ZAKR.TZL='T' || _env.after_rfrsh_GP || _env.after_rfrsh_ZP ?},,,,_fb,_fa,,,'maximized');
{? ZAKR.TZL='T'
|| ZL.grp_splt(_env.ZRPP,,'horizontal','struktura',9);
   _fb:="
      {? grp_empty(ZL,'PWER_P')
      || ZL.cntx_psh();
         '#disable'
      || ZL.cntx_psh();
         ZL.index('ZLTREE');
         ZL.prefix(ZL.TYP,$exec('root_zlec','zl_link',ZL.ref()),);
         ZL.seek(params_get().env.ZL_STR)
      ?}
   ";
   _fa:="
      ZL.cntx_pop();
      ~~
   ";
:: nie jest podawana wysokość - system zarezerwuje na panel struktury tyle miejsca, żeby zmieściły się przyciski
   ZL.grp_sel(_env.ZRPP,,'STRUCT',,_env.after_rfrsh_ZP,,,,_fb,_fa,,,'maximized_with_title');
   ZL.grp_splt(_env.ZRPP,'struktura','horizontal','bottom',)
|| ZL.grp_splt(_env.ZRPP,,'horizontal','bottom',19)
?};

:: Okno grupowe bez podziału dla zleceń produkcyjnych (bez zakładek, ale ew. z panelem struktury)
_rfr:="~~";
_fb:="
   {? VAR.WGSTMG=1
   || tab_hide(3)
   |? VAR.WGSTMG=0
   || tab_hide(2)
   ?};
   {? BEER.NAWIGREF='M' | BEER.NAWIGREF='SM'
   ||
::    Odświeżenie okna po zmianie trybu pracy w zakładce stanów magazynowych (aktualny/wszystkie magazyny)
      {? VAR.WGSTMG=1
      || tab_sel(2)
      |? VAR.WGSTMG=0
      || tab_sel(3)
      ?}
   ?};
   ~~
";
{? exec('runtime_r10','#system') & exec('cli_ver','#system')='jterm'
|| _env.GRPP:=ZL.grp_make('',_fb,'grpp'+(-ZAKR.TZL),,,"exec('exit','zws',_a)",_rfr,'maximized','jterm')
|| _env.GRPP:=ZL.grp_make('',_fb,'grpp'+(-ZAKR.TZL),,,"exec('exit','zws',_a)",_rfr,'maximized')
?};
_fb:="
   params_set(params_get());
   _env:=params_get().env;
   {? _a>0
   || {? _env.ZL_UP<>null()
      || ZL.seek(_env.ZL_UP)
      ?}
   ?};
   ~~
";
_fa:="
   params_set(params_get());
   _env:=params_get().env;
   {? _a>0
   || _env.ZL_UP:=ZL.ref()
   ?};
   ~~
";

_fb:="
::   {? _a=0
::   || {? ZL.sel_size()=0 || params_exec('zakr_all','zl_view') ?}
::   ?};
   MG.f_clear();
   {? BEER.NAWIGREF=''
   || BEER.NAWIGREF:='ZL'
   ?};
   ~~
";
ZL.grp_sel(_env.GRPP,,_env.WERP,'Zlecenia produkcyjne'@,_env.after_rfrsh_GP,,,,_fb,,,,'maximized');
{? ZAKR.TZL='T'
|| ZL.tab_splt(_env.GRPP,,'horizontal','struktura',25);
   _fb:="
      {? grp_empty(ZL,'PWER_P')
      || ZL.cntx_psh();
         '#disable'
      || ZL.cntx_psh();
         ZL.index('ZLTREE');
         ZL.prefix(ZL.TYP,$exec('root_zlec','zl_link',ZL.ref()));
         ZL.seek(params_get().env.ZL)
      ?}
   ";
   _fa:="
      ZL.cntx_pop();
      ~~
   ";
   ZL.grp_sel(_env.GRPP,,'STRUCT',,_env.after_rfrsh_GP,,,,_fb,_fa,,,'maximized_with_title')
?};
:: Zakładka ze stanami magazynowymi
BEER.ESC:=0;
VAR.WGSTMG:=1;
{? exec('chk_role','#b__box',OPERATOR.USER,'LMG_MAG_ZPSM')>0
|| exec('init','lmg');
   _fb:="
      exec('pr_grp_sm','lmg',1);
      {? BEER.NAWIGREF='M'
      || BEER.NAWIGREF:='';
         SM.find_tab(,'M',,'=',BEER.M)
      || SM.first()
      ?};
      ~~
   ";
   ZL.grp_sel(_env.GRPP,SM,'STANY_MG','Stany magazynowe'@,"exec('pd_grp_sm','lmg')",,,
          ,_fb,,,,'maximized','grppsm');
   _fb:="
      exec('stany_all','lmg',,0);
      {? BEER.NAWIGREF='SM'
      || BEER.NAWIGREF:='';
         M.seek(BEER.M)
      |? BEER.NAWIGREF='ZL'
      || BEER.NAWIGREF:='';
         M.first()
      ?};
      exec('zakrMag','lmg');
      exec('pr_grp_mstn','lmg');
      ~~
   ";
   _fa:="

      ~~
   ";
   ZL.grp_sel(_env.GRPP,M,'STANY','Stany magazynowe'@,"exec('pd_grp_mstn','lmg')",,,,_fb,_fa,0,0,'maximized','grppm');
   ZL.tab_splt(_env.GRPP,'','vertical','magazyny','0,67%','');
   ZL.grp_sel(_env.GRPP,MG,'STN',,"",,,,"","",0,0,'maximized','grppmg',0)
?};

_env.WERW:='PWER_W';

:: Okno grupowe i podział dla zleceń warsztatowych (z zakładkami)
{? exec('runtime_r10','#system') & exec('cli_ver','#system')='jterm'
|| _env.ZRPW:=ZL.grp_make('',,'zrpw',,,"exec('exit','zws',_a)",_env.refresh_W,'maximized','jterm')
|| _env.ZRPW:=ZL.grp_make('',,'zrpw',,,"exec('exit','zws',_a)",_env.refresh_W,'maximized')
?};
ZL.grp_sel(_env.ZRPW,,_env.WERW,,_env.after_rfrsh_ZW,,,,,,,,'maximized');
ZL.grp_splt(_env.ZRPW,,'horizontal','bottom',19);
:: Okno grupowe bez podziału dla zleceń warsztatowych (bez zakładek)
_fb:="
   {? VAR.WGSTMG=1
   || tab_hide(3)
   |? VAR.WGSTMG=0
   || tab_hide(2)
   ?};
   {? BEER.NAWIGREF='M' | BEER.NAWIGREF='SM'
   ||
::    Odświeżenie okna po zmianie trybu pracy w zakładce stanów magazynowych (aktualny/wszystkie magazyny)
      {? VAR.WGSTMG=1
      || tab_sel(2)
      |? VAR.WGSTMG=0
      || tab_sel(3)
      ?}
   ?};
   ~~
";
{? exec('runtime_r10','#system') & exec('cli_ver','#system')='jterm'
|| _env.GRPW:=ZL.grp_make('',_fb,'grpw',,,"exec('exit','zws',_a)","",'maximized','jterm')
|| _env.GRPW:=ZL.grp_make('',_fb,'grpw',,,"exec('exit','zws',_a)","",'maximized')
?};
_fb:="
   MG.f_clear();
   {? BEER.NAWIGREF=''
   || BEER.NAWIGREF:='ZL'
   ?};
   ~~
";
ZL.grp_sel(_env.GRPW,,_env.WERW,'Zlecenia warsztatowe'@,_env.after_rfrsh_GW,,,,_fb,,,,'maximized');
:: Zakładka ze stanami magazynowymi
{? exec('chk_role','#b__box',OPERATOR.USER,'LMG_MAG_ZPSM')>0
|| exec('init','lmg');
   _fb:="
      exec('pr_grp_sm','lmg',1);
      {? BEER.NAWIGREF='M'
      || BEER.NAWIGREF:='';
         SM.find_tab(,'M',,'=',BEER.M)
      || SM.first()
      ?};
      ~~
   ";
   ZL.grp_sel(_env.GRPW,SM,'STANY_MG','Stany magazynowe'@,"exec('pd_grp_sm','lmg')",,,
          ,_fb,,,,'maximized','grpwsm');
   _fb:="
      exec('stany_all','lmg',,0);
      {? BEER.NAWIGREF='SM'
      || BEER.NAWIGREF:='';
         M.seek(BEER.M)
      |? BEER.NAWIGREF='ZL'
      || BEER.NAWIGREF:='';
         M.first()
      ?};
      exec('zakrMag','lmg');
      exec('pr_grp_mstn','lmg');
      ~~
   ";
   _fa:="
      ~~
   ";
   ZL.grp_sel(_env.GRPW,M,'STANY','Stany magazynowe'@,"exec('pd_grp_mstn','lmg')",,,,_fb,_fa,0,0,'maximized','grpwm');
   ZL.tab_splt(_env.GRPW,'','vertical','magazyny','0,67%','');
   ZL.grp_sel(_env.GRPW,MG,'STN',,"",,,,"","",0,0,'maximized','grpwmg',0)
?};

:: Konfiguracja i wstawienie zakładek do okna
{? obj_len(_env.tabs)>0
|| {? var_pres('CUR_TAB',_env)=0
   || _env.CUR_TAB:=_env.tabs[1]
   ?}
?};
{? exec('interm','#system')=0
||
   {! _it:=1..obj_len(_env.tabs)
   |! {? var_pres('_cfg')>100
      || obj_del(_cfg)
      ?};
      _cfg:=_env.tabs[_it];
      {? _cfg.W='T' || _env.WP:='W'; _env.env_limit.ZLIMp.WP:='W'; ($(_cfg.CONFIG))(_env.ZRPW,_cfg) ?};
      {? _cfg.P='T' || _env.WP:='P'; _env.env_limit.ZLIMp.WP:='P'; ($(_cfg.CONFIG))(_env.ZRPP,_cfg) ?}
   !}
?};
~~


\cfg_technologie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: zakładka technologia - init
::   WE: _a - okno grupowe, do którego będą wstawiane zakładki
::       _b - obj_new - bufor zmiennej ZLV zawierający konfigurację zakładki
::       _c - 'Z' - technologia zlecenia, 'T' - technologia źródłowa
::  OLD: \tech/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_grp:=_a;
_zlv:=_b;
_opcja:=_c;

VAR.TOW_USL:='T';
ZAKR.MATU:='A';

_tab:=_zlv.NAME;

:: Podmiana metody 'f_record' dla zakladek
{? _opcja='Z'
|| exec('tree','tech_oper',3);
   set_virt(ZTREE,'f_record',"
      params_set(params_get());
      _env:=params_get().env;
      {? _env.ZL<>null()
      ||
         TOPER.clear();
         {? TOPER.seek(ZTREE.TAB.REF,)
         || _env.OPER_ZL:=TOPER.ref();
            VAR.A_OP:=TOPER.ref();
            exec('prep_ch','tech_oper');
            _res:=Color.rekprzed('TOPER#01#01')
         || _env.OPER_ZL:=null();
            VAR.A_OP:=null();
            _res:=~~
         ?};
         TOPER.cntx_psh();
         TOPER.index('NNN');
         TOPER.prefix(_env.TKTL_ZL,TOPER.NRNOP,'N');
         grp_disp(TMAT,'WERZ_Z',,1);
         grp_disp(TACTTLS,'WERZ_Z',,1);
         TOPER.cntx_pop();
         _res
      ?}
   ")
|| exec('tree','tech_oper',0);
   set_virt(TTREE,'f_record',"
      params_set(params_get());
      _env:=params_get().env;
      {? _env.ZL<>null()
      ||
:         VAR.A_KTL();
         TOPER.clear();
         {? TOPER.seek(TTREE.TAB.REF,)
         || _env.OPER_SRC:=TOPER.ref();
            VAR.A_OP:=TOPER.ref();
            exec('prep_ch','tech_oper');
            _res:=Color.rekprzed('TOPER#01#01')
         || _env.OPER_SRC:=null();
            VAR.A_OP:=null();
            _res:=~~
         ?};
         TOPER.cntx_psh();
         TOPER.index('NNN');
         TOPER.prefix(_env.TKTL_SRC,TOPER.NRNOP,'N');
         grp_disp(TMAT,'WERZ_T',,1);
         grp_disp(TACTTLS,'WERZ_T',,1);
         TOPER.cntx_pop();
         _res
      ?}
   ")
?};
_formicon:="
   _tab:=cur_tab(1,1);
   _icon:=exec('pusta','#icon');
   {? _tab.DOK<>''
   || _icon:='xwin16.png:190'
   ?};
   _icon
";
{? _opcja='Z'
||
:: Technologia zlecenia
   ZTREE.TAB.win_sel(ZTREE.WERT);
   ZTREE.TAB.win_fml(ZTREE.WERT,,'TXT',,'ICON_BEFORE',ZTREE.win_fml());
   ZTREE.TAB.win_fml(ZTREE.WERT,,'NTIME',,'ICON_BEFORE',_formicon);
   ZTREE.TAB.hdr_sel('Operacje'@);

:: Dodajemy okno operacji technologii
   _fb:="
      params_set(params_get());
      _env:=params_get().env;

      params_exec('activate','zl_view',_a,'Z');
      params_exec('toper_before','zl_view',_a,'Z');

      {? _env.ZL=null() || ZTREE.TAB.erase() ?};
      VAR.ACTION:='Z';
::      TMAT.clear();
      {? _a>0
      || params_exec('technologia_load','zl_view','Z');
         params_exec('surowce_load','zl_view','Z');
         params_exec('narzedzia_load','zl_view','Z')
      ?};
      {? _env.TKTL_ZL<>null()
      || VAR.DJ:=exec('FindAndGet','#table',TKTL,_env.TKTL_ZL,,\"TYP().DJ\",'')
      || VAR.DJ:=''
      ?};
::      {? _env.BUF_ZL.TKTL=null()
::      || ZTREE.TAB.btn_opt(ZTREE.BTN.GENERUJ,'state=normal');
::         ZTREE.TAB.btn_opt(ZTREE.BTN.OPERACJE,'state=grayed')
::      || ZTREE.TAB.btn_opt(ZTREE.BTN.GENERUJ,'state=grayed');
::         ZTREE.TAB.btn_opt(ZTREE.BTN.OPERACJE,'state=normal')
::      ?};
::      ZTREE.TAB.first();
      {? _env.BUF_ZL.RODZAJ='Z' | _env.BUF_ZL.RODZAJ='N' | exec('FindAndGet','#table',ZTP,_env.BUF_ZL.TYP,,\"TECH\",'N')='N'
      || '#disable'
      || ''
      ?}
   ";
   _fa:="
      params_exec('deactivate','zl_view',_a);
      params_exec('toper_after','zl_view',_a,'Z')
   ";
   _rfr:="params_exec('toper_after_rfr','zl_view','Z')";
   ZL.grp_sel(_grp,ZTREE.TAB,ZTREE.WERT,_tab,_rfr,,,3,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title');
:: Przypinam okno (zakładkę) do czynności
   task_attach('TTE_PZL_DTEC');
   task_attach('TTE_PZL_DTSD');
   task_attach('TTE_PZL_DTSZ');
   task_attach('TTE_PZL_DZGZ');
:: Przypinam okno do środowiska
   _env.win_attach(_grp,ZTREE.TAB,ZTREE.WERT,_zlv,'TOPER_ZL');

   ZL.tab_splt(_grp,'tab0','vertical','tab2',111);

:: Dodajemy okno narzędzi/przyrządów/urządzeń
   _fb:="
      params_exec('activate','zl_view',_a,'Z');
      params_exec('tacttls_before','zl_view',_a,'Z')
   ";
   _fa:="
      params_exec('deactivate','zl_view',_a,'Z');
      params_exec('tacttls_after','zl_view',_a,'Z')
   ";
   ZL.grp_sel(_grp,TACTTLS,'WERZ_Z',,,,,,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title');
:: Przypinam okno do środowiska
   _env.win_attach(_grp,TACTTLS,'WERZ_Z',_zlv,'TACTTLS_ZL');

   ZL.tab_splt(_grp,'tab0','horizontal','tab1',);

:: Dodajemy okno surowców
   _fb:="
      params_exec('activate','zl_view',_a,'Z');
      params_exec('tmat_before','zl_view',_a,'Z')
   ";
   _fa:="
      params_exec('deactivate','zl_view',_a,'Z');
      params_exec('tmat_after','zl_view',_a,'Z')
   ";
   ZL.grp_sel(_grp,TMAT,'WERZ_Z',,,,,,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title');
   _formikon:="
      TCHMAT.cntx_psh();
      TCHMAT.index('NSL');
      TCHMAT.prefix(TMAT.NRK,TMAT.ref());
      {? TCHMAT.first()
      || _ico:='xwin16.png:92'
      || _ico:='xwin16.png:110'
      ?};
      TCHMAT.cntx_pop();
      _ico
   ";
   TMAT.win_fml('WERZ_Z',VAR,'K_NKTM',,'ICON_BEFORE',_formikon,1);
:: Przypinam okno do środowiska
   _env.win_attach(_grp,TMAT,'WERZ_Z',_zlv,'TMAT_ZL');
   ~~
||
:: Zlecenie bez wlasnej technologii

   TTREE.TAB.win_sel(TTREE.WERT);
   TTREE.TAB.win_fml(TTREE.WERT,,'TXT',,'ICON_BEFORE',TTREE.win_fml());
   TTREE.TAB.win_fml(TTREE.WERT,,'NTIME',,'ICON_BEFORE',_formicon);
   TTREE.TAB.hdr_sel('Operacje'@);

:: Dodajemy okno operacji technologii
   _fb:="
      params_set(params_get());
      _env:=params_get().env;

      params_exec('activate','zl_view',_a,'T');
      params_exec('toper_before','zl_view',_a,'T');

      {? _env.ZL=null() || TTREE.TAB.erase() ?};
      VAR.ACTION:='Z';
::      TMAT.clear();
      {? _a>0
      || params_exec('technologia_load','zl_view','T');
         params_exec('surowce_load','zl_view','T');
         params_exec('narzedzia_load','zl_view','T')
      ?};
      {? _env.TKTL_SRC<>null()
      || VAR.DJ:=exec('FindAndGet','#table',TKTL,_env.TKTL_SRC,,\"TYP().DJ\",'')
      || VAR.DJ:=''
      ?};
::      TTREE.TAB.first();
      {? _env.BUF_ZL.RODZAJ='N' | _env.BUF_ZL.RKTL='' || '#disable' || '' ?}
   ";
   _fa:="
      params_exec('deactivate','zl_view',_a);
      params_exec('toper_after','zl_view',_a,'T')
   ";
   _rfr:="
      params_exec('toper_after_rfr','zl_view','T')
   ";
   ZL.grp_sel(_grp,TTREE.TAB,TTREE.WERT,_tab,_rfr,,,3,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title');
:: Przypinam okno (zakładkę) do czynności
   task_attach('TTE_TEC_DRTE');
   task_attach('TTE_TEC_PKTE');
:: Przypinam okno do środowiska
   _env.win_attach(_grp,TTREE.TAB,TTREE.WERT,_zlv,'TOPER_SRC');

   ZL.tab_splt(_grp,'tab0','vertical','tab2',111);

:: Dodajemy okno narzędzi/przyrządów/urządzeń
   _fb:="
      params_exec('activate','zl_view',_a,'T');
      params_exec('tacttls_before','zl_view',_a,'T')
   ";
   _fa:="
      params_exec('deactivate','zl_view',_a,'T');
      params_exec('tacttls_after','zl_view',_a,'T')
   ";
   ZL.grp_sel(_grp,TACTTLS,'WERZ_T',,,,,,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title');
:: Przypinam okno do środowiska
   _env.win_attach(_grp,TACTTLS,'WERZ_T',_zlv,'TACTTLS_SRC');

   ZL.tab_splt(_grp,'tab0','horizontal','tab1',);

:: Dodajemy okno surowców
   _fb:="
      params_exec('activate','zl_view',_a,'T');
      params_exec('tmat_before','zl_view',_a,'T')
   ";
   _fa:="
      params_exec('deactivate','zl_view',_a,'T');
      params_exec('tmat_after','zl_view',_a,'T')
   ";
   ZL.grp_sel(_grp,TMAT,'WERZ_T',,,,,,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title');
   _formikon:="
      TCHMAT.cntx_psh();
      TCHMAT.index('NSL');
      TCHMAT.prefix(TMAT.NRK,TMAT.ref());
      {? TCHMAT.first()
      || _ico:='xwin16.png:92'
      || _ico:='xwin16.png:110'
      ?};
      TCHMAT.cntx_pop();
      _ico
   ";
   TMAT.win_fml('WERZ_T',VAR,'K_NKTM',,'ICON_BEFORE',_formikon,1);
:: Przypinam okno do środowiska
   _env.win_attach(_grp,TMAT,'WERZ_T',_zlv,'TMAT_SRC');
   ~~
?};
~~


\technologia_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: Zakładka technologia
::   WE: _a - 'T' karta technologiczna
::          - 'Z' technologia zlecenia
::  OLD: \technologia/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_oper:=params_get().env_oper;

VAR_DEL.delete('tab');

{? _a='Z'
|| tab:=ZTREE;
   _used:=exec('keyref_locked','#b__box',_env.UID_ZL,'TTE_PZL_DTEC',0) |
          exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DTEC')=0
|| tab:=TTREE;
   _used:=1
?};
_env_oper.used:=_used;

VAR.A_TORW:=_a;
{? _env.ZL<>null()
|| _hide:=':';
   ZL.cntx_psh();
   ZL.prefix();
   {? ZL.seek(_env.ZL)
   || TKTL.cntx_psh();
      TKTL.prefix();
      {? {? _a='T'
         || TKTL.seek(_env.TKTL_SRC,ref_name(_env.TKTL_SRC),1)
         || TKTL.seek(_env.TKTL_ZL,ref_name(_env.TKTL_ZL),1)
         ?}
      || _modify:={? _a='T'
                  || 0
                  || _ret:=0;
                     {? ~_used & ZL.STAN<>'Z'
                     || _ret:=TKTL.STAN<>'T' & TKTL.TYP().OPER<>'N'
                     ?};
                     _ret
                  ?};
         _hide:={? _modify || 'ÓZ:E' || 'DPUÓZF(NZW):DEZF(W)' ?};
         {? exec('get','#params',100900,2)='' || _hide:='F(D)'+_hide ?};
::         {? TKTL.TYP().SUR='K' || _hide:='E(S)'+_hide ?};
         {? TKTL.TYP().UTIL='N' || _hide:='E(N)'+_hide ?};
         ~~
      || _hide:='DPUÓZF(W):DEZF(W)'
      ?};
      TKTL.cntx_pop();

      {? ((_a='Z' & tab.ZRODLO<>$ZL.ref()) | (_a='T' & tab.ZRODLO<>$_env.TKTL_SRC)) | (_a='Z' & _env.TECH_reload>0)
      || {? _a='Z' || _env.TECH_reload:=0 ?};
         tab.replica();
         tab.load();
         tab.update();
         {? _a='Z'
         || tab.ZRODLO:=$ZL.ref()
         || tab.ZRODLO:=$_env.TKTL_SRC
         ?}
      ?};
      tab.TAB.index(tab.NDX_UP);
      tab.TAB.prefix();
      tab.TAB.blank(1);
      tab.TAB.REF:={? _a='T' || _env.OPER_SRC || _env.OPER_ZL ?};
      {? ~tab.TAB.find_rec() || tab.TAB.first() ?};
      tab.TAB.actions(tab.WERT,_hide,,1)
   ?};
   ZL.cntx_pop()
|| tab.TAB.index(tab.NDX_UP);
   tab.TAB.prefix();
   tab.TAB.blank(1);
   tab.TAB.REF:={? _a='T' || _env.OPER_SRC || _env.OPER_ZL ?};
   {? ~tab.TAB.find_rec() || tab.TAB.first() ?};
   tab.TAB.actions(tab.WERT,'DPUÓZF(W):DEZF(W)',,1)
?};

tab.TAB.hdr_sel();
{? _a='Z'
|| {? _env.BUF_ZL.RODZAJ='N' | _env.BUF_ZL.RODZAJ='Z' | exec('FindAndGet','#table',ZTP,_env.BUF_ZL.TYP,,"TECH",'N')='N'
   || tab.TAB.hdr_sel('Operacje technologii dla zlecenia — nie dotyczy'@)
   || tab.TAB.hdr_sel(
         'Operacje technologii dla zlecenia %1'@[_env.BUF_ZL.SYM]+{? _used || ' — '+'PODGLĄD'@ || '' ?}
      )
   ?}
|| {? _env.BUF_ZL.RODZAJ='N' | _env.BUF_ZL.RKTL=''
   || tab.TAB.hdr_sel('Operacje technologii źródłowej — nie dotyczy'@)
   || tab.TAB.hdr_sel(
::       Takie czary, żeby zadziałało tłumaczenie poniżej (tekst MUSI być identyczny)
         'Operacje technologii źródłowej [Karta typu: %1 — %2, ilość: %3, technologia: %4 wer. %5]'@['','','','',''];
         exec('FindAndGet','#table',TKTL,ZL.RKTL,,"
            'Operacje technologii źródłowej [Karta typu: %1 — %2, ilość: %3, technologia: %4 wer. %5]'@
            [TYP().TYP,TYP().OPIS,form(XJM),NRK,WER]
         ",'')
      )
   ?};
::   tab.TAB.actions(tab.WERT,tab.HIDE,,1);
   ~~
?};
{? _a='Z'
|| exec('start_tpar','tech_param',_env.BUF_ZL.KTM,_env.TKTL_ZL)
|| exec('start_tpar','tech_param',_env.BUF_ZL.KTM,_env.TKTL_SRC)
?};
::TREE.TAB.win_fml(TREE.WERT,,'TXT',,'ICON_BEFORE',.win_fml());
::TREE.TAB.hdr_sel(); .TAB.hdr_sel(.title());
::.TAB.win_fml(.WERT,,'TXT',,'ICON_BEFORE',\"\");
~~


\surowce_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: zakładka technologia - selekcja surowców
::   WE: _a - Z: technologia zlecenia, T: technologia źródłowa
::  OLD: \surowce/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_mater:=params_get().env_mater;

{? _=0 || _opcja:='Z' || _opcja:=_a ?};

{? _opcja='Z'
|| _used:=exec('keyref_locked','#b__box',_env.UID_ZL,'TTE_PZL_DTEC',0)
|| _used:=1
?};

_env_mater.used:=_used;

{? _opcja='Z'
||
   {? _env.ZL<>null()
   ||
      {? TKTL.name()<>ref_name(_env.TKTL_ZL) || exec('tktl_use','tech_common',ref_name(_env.TKTL_ZL)+3) ?};
      TKTL.cntx_psh();
      TKTL.prefix();
      ZL.cntx_psh();
      ZL.prefix();
      {? ZL.seek(_env.ZL) & TKTL.seek(_env.TKTL_ZL)
      || _keys:=':';
::       Zawsze wyświetlane wszystkie surowce
         {? 1
::            TKTL.TYP().SUR<>'O'
         || _env.OPER_ZL:=null();
            VAR.A_OP:=null()
         || {? VAR.A_OP=null()
            || _keys:='d'+_keys+'d'
            ?}
         ?};
         _uprDelSur:=exec('uprDelSurZatwZl','tech_mater');
         {? ZL.STAN='Z' | exec('FindAndGet','#table',TOPER,VAR.A_OP,,"PZ='Z'",0)
         || _keys:='dPUOZTNL'+_keys+'d'
         |? TKTL.STAN<>'T' & ~_used
         || _keys:='F(DPUWZ)'+_keys+'F(D)'
         || _keys:='dP'+{? _uprDelSur || '' || 'U' ?}+'OZI'+_keys+'d'
         ?};
         {? ZL.NRNZL=0 || _keys:='F(Z)'+_keys ?};
         {? TKTL.ARCH='T' || _keys:='F(DPUWZ)'+_keys+'F(D)' ?};
         TMAT.actions('WERZ_Z',_keys,,1);
         _par:=TKTL.TYP().PAR;
         {? _par='' || TMAT.win_edit() || TMAT.win_edit('RED_'+_par)  ?};
         TMAT.win_sel('WERZ_Z'); TMAT.hdr_sel();
         {? _used || TMAT.hdr_sel(' — '+'PODGLĄD'@) ?};
         TMAT.index('NNL');
::       Zawsze wyświetlane wszystkie surowce
         {? 0
::            TKTL.TYP().SUR='O'
         || TMAT.prefix(TKTL.ref(),_env.OPER_ZL)
         || TMAT.prefix(TKTL.ref())
         ?};
         TMAT.first();
         VAR.P_NKTM:='';

         TMAT.fld_attr(,1);
         TMAT.dnd_sel('WERZ_Z',,'records.TMAT',"");
         TMAT.dnd_sel('WERZ_Z',,'records.M',"")
      || TMAT.index('NNL');
         TMAT.prefix(null());
         TMAT.actions('WERZ_Z',':dF(D)',,1)
      ?};
      ZL.cntx_pop();
      TKTL.cntx_pop()
   ||
      TMAT.index('NNL');
      TMAT.prefix(null());
      TMAT.actions('WERZ_Z',':dF(D)',,1)
   ?}
|| {? _env.ZL<>null()
   ||
      {? TKTL.name()<>ref_name(_env.TKTL_SRC) || exec('tktl_use','tech_common',ref_name(_env.TKTL_SRC)+3) ?};
      TKTL.cntx_psh();
      TKTL.prefix();
      {? TKTL.seek(_env.TKTL_SRC)
      ||
         TMAT.actions('WERZ_T',{? TKTL.TYP().PAR<>'T' || 'R' || '' ?}+'dPOIZUY:dZ',,1);
         _par:=TKTL.TYP().PAR;
         {? _par='' || TMAT.win_edit() || TMAT.win_edit('RED_'+_par)  ?};
         TMAT.win_sel('WERZ_T'); TMAT.hdr_sel();
         TMAT.hdr_sel(' — '+'PODGLĄD'@);
         TMAT.index('NNL');
::       Zawsze wyświetlane wszystkie surowce
         {? 0
::            TKTL.TYP().SUR='O'
         || TMAT.prefix(TKTL.ref(),_env.OPER_SRC)
         || TMAT.prefix(TKTL.ref())
         ?};
         TMAT.first();
         VAR.P_NKTM:='';

         TMAT.fld_attr(,1);
         TMAT.dnd_sel('WERZ_T',,'records.TMAT',"");
         TMAT.dnd_sel('WERZ_T',,'records.M',"")
      ?};
      TKTL.cntx_pop()
   ||
      TMAT.index('NNL');
      TMAT.prefix(null());
      TMAT.actions('WERZ_T',':d',,1)
   ?}
?};
~~


\narzedzia_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: Zakładka technologii - definiowanie narzędzi
::   WE: _a - Z: technologia zlecenia, T: technologia źródłowa
::  OLD: \narzedzia/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_tool:=params_get().env_tool;

{? _=0 || _opcja:='Z' || _opcja:=_a ?};

{? _opcja='Z'
|| _used:=exec('keyref_locked','#b__box',_env.UID_ZL,'TTE_PZL_DTEC',0)
|| _used:=1
?};
_env_tool.used:=_used;

{? _opcja='Z'
|| {? _env.ZL<>null()
   || TKTL.cntx_psh();
      TKTL.prefix();
      ZL.cntx_psh();
      ZL.prefix();
      {? ZL.seek(_env.ZL)
      ||
         {? _env.TKTL_ZL<>null() & TKTL.seek(_env.TKTL_ZL)
         ||
            {? TKTL.STAN<>'T' & ~_used & ZL.STAN<>'Z' & TKTL.TYP().UTIL<>'N'
            || _hide:=''
            || _hide:='DPU:D'
            ?};
            TACTTLS.win_sel('WERZ_Z'); TACTTLS.hdr_sel();
            {? _used || TACTTLS.hdr_sel(' — '+'PODGLĄD'@) ?};
            TACTTLS.index('KNROPR');
::          Wyświetlane zawsze wszystkie
            {? 0
::               TKTL.TYP().UTIL='O'
            || TACTTLS.prefix(TKTL.ref(),_env.OPER_ZL)
            || TACTTLS.prefix(TKTL.ref())
            ?};
            TACTTLS.actions('WERZ_Z',_hide,,1)
         ||
            TACTTLS.index('KNROPR');
            TACTTLS.prefix(null());
            TACTTLS.actions('WERZ_Z',':D',,1)
         ?}
      ?};
      ZL.cntx_pop();
      TKTL.cntx_pop()
   ||
      TACTTLS.index('KNROPR');
      TACTTLS.prefix(null());
      TACTTLS.actions('WERZ_Z',':D',,1)
   ?}
|| TACTTLS.actions('WERZ_T','DPU:D',,1);
   TACTTLS.win_sel('WERZ_T'); TACTTLS.hdr_sel();
   TACTTLS.hdr_sel(' — '+'PODGLĄD'@);
   {? _env.ZL<>null()
   || TKTL.cntx_psh();
      TKTL.prefix();
      {? _env.TKTL_SRC<>null() & TKTL.seek(_env.TKTL_SRC)
      ||
         TACTTLS.clear();
         TACTTLS.index('KNROPR');
::       Wyświetlane zawsze wszystkie
         {? 0
::            TKTL.TYP().UTIL='O'
         || TACTTLS.prefix(TKTL.ref(),_env.OPER_SRC)
         || TACTTLS.prefix(TKTL.ref())
         ?}
      ||
         TACTTLS.index('KNROPR');
         TACTTLS.prefix(null())
      ?};
      TKTL.cntx_pop()
   ||
      TACTTLS.index('KNROPR');
      TACTTLS.prefix(null())
   ?}
?};
~~


\toper_before
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Formuła wykonywana przed aktywacją okna operacji technologii (wklikanie się do okna)
::   WE: _a
::       _b - opcja: technologia źródłowa (T), technologia zlecenia (Z)
::  OLD: \toper_before/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
_user_action:=_a;
_opcja:=_b;
{? _user_action>0
||
   ~~
?};
~~


\toper_after
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Formuła wykonywana po wyjściu z okna operacji technologii zlecenia
::   WE: _a
::       _b - opcja: technologia źródłowa (T), technologia zlecenia (Z)
::  OLD: \toper_after/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_oper:=params_get().env_oper;

_user_action:=_a;
_opcja:=_b;
{? _user_action>0
|| {? _opcja='Z'
   || {? _env.WP='P' & _env_oper.used=0
      ||
::       Oznaczenie karty jako 'Ulepszenie'
         _formula:="
::          Na ten moment wszystkie karty obsługiwane jako OO
            {? 1
::               TKTL.TYP().SUR='O'
            || _improve:=TKTL.IMPROVE;
               {? exec('is_improvement','tech_head',TKTL.ref())
               || TKTL.IMPROVE:='T'
               || TKTL.IMPROVE:='N'
               ?};
               {? _improve<>TKTL.IMPROVE || TKTL.put() ?}
            ?}
         ";
         exec('FindAndGet','#table',TKTL,_env.TKTL_ZL,,_formula,~~);
::       Oznaczenie zlecenia jako 'Ulepszenie'
         _formula:="
            _improve:=ZL.IMPROVE;
            {? exec('is_improvement','zl_head',ZL.ref())
            || ZL.IMPROVE:='T'
            || ZL.IMPROVE:='N'
            ?};
            {? _improve<>ZL.IMPROVE || ZL.put() ?}
         ";
         exec('FindAndGet','#table',ZL,_env.ZL,,_formula,~~)
      ?};
      {? grp_empty(ZTREE.TAB,ZTREE.WERT,1)
      || VAR.A_OP:=null()
      ?}
   ?};
   ~~
?};
~~


\tmat_before
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Formula wykonywana przed aktywacja okna surowcow technologii (wklikanie się do okna)
::   WE: _a
::       _b - opcja: technologia zrodlowa (T), technologia zlecenia (Z)
::  OLD: \tmat_before/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_user_action:=_a;
_opcja:=_b;
{? _user_action>0
||
   {? exec('get','#params',500740,2)='N'
   || exec('filter_clear','material')
   || exec('filter','material','PS')
   ?};

   params_exec('surowce_load','zl_view',_opcja);
   ~~
?};
{? _opcja='Z'
|| {? _env.BUF_ZL.RODZAJ='Z' | _env.BUF_ZL.RODZAJ='N' | exec('FindAndGet','#table',ZTP,_env.BUF_ZL.TYP,,"TECH",'N')='N'
   || '#disable'
   || ''
   ?}
|| {? _env.BUF_ZL.RODZAJ='N' | _env.BUF_ZL.RKTL='' || '#disable' || '' ?}
?}


\tmat_after
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Formula wykonywana po wyjsciu z okna surowcow technologii
::   WE: _a
::       _b - opcja: technologia zrodlowa (T), technologia zlecenia (Z)
::  OLD: \tmat_after/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_env_mater:=params_get().env_mater;

_user_action:=_a;
_opcja:=_b;
{? _user_action>0
||
   {? _env.WP='P' & _opcja='Z' & _env_mater.used=0
   ||
::    Oznaczenie karty jako 'Ulepszenie'
      _formula:="
         _improve:=TKTL.IMPROVE;
         {? exec('is_improvement','tech_head',TKTL.ref())
         || TKTL.IMPROVE:='T'
         || TKTL.IMPROVE:='N'
         ?};
         {? _improve<>TKTL.IMPROVE || TKTL.put() ?}
      ";
      exec('FindAndGet','#table',TKTL,_env.TKTL_ZL,,_formula,~~);
::    Oznaczenie zlecenia jako 'Ulepszenie'
      _formula:="
         _improve:=ZL.IMPROVE;
         {? exec('is_improvement','zl_head',ZL.ref())
         || ZL.IMPROVE:='T'
         || ZL.IMPROVE:='N'
         ?};
         {? _improve<>ZL.IMPROVE || ZL.put() ?}
      ";
      exec('FindAndGet','#table',ZL,_env.ZL,,_formula,~~)
   ?};
   ~~
?};
~~


\tacttls_before
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Formula wykonywana przed aktywacja okna NPU technologii (wklikanie się do okna)
::   WE: _a - INTEGER - czy użytkownik się wklikał czy wywołanie wew grp_disp
::       _b - opcja: technologia zrodlowa (T), technologia zlecenia (Z)
::  OLD: \tacttls_before/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_user_action:=_a;
_opcja:=_b;
{? _user_action>0
||
   _tktl:=null();
   {? _opcja='Z'
   || _tktl:=_env.TKTL_ZL
   || _tktl:=_env.TKTL_SRC
   ?};
   {? _tktl<>null()
   || TACTTLS.win_edit('REDN'+exec('FindAndGet','#table',TKTL,_tktl,,"TYP().PAR",'N'))
   || TACTTLS.win_edit()
   ?};
   M.win_dict('WER_S');

   params_exec('narzedzia_load','zl_view',_opcja);
   ~~
?};
{? _opcja='Z'
|| {? _env.BUF_ZL.RODZAJ='Z' | _env.BUF_ZL.RODZAJ='N' | exec('FindAndGet','#table',ZTP,_env.BUF_ZL.TYP,,"TECH",'N')='N'
   || _env.DISABLE:='#disable'
   || ''
   ?}
|| {? _env.BUF_ZL.RODZAJ='N' | _env.BUF_ZL.RKTL='' || _env.DISABLE:='#disable' || '' ?}
?}


\tacttls_after
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Formula wykonywana po wyjsciu z okna NPU technologii zlecenia
::   WE: _a
::       _b - opcja: technologia zrodlowa (T), technologia zlecenia (Z)
::  OLD: \tacttls_after/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
_user_action:=_a;
_opcja:=_b;
{? _user_action>0
||
   ~~
?};
~~


\toper_after_rfr
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Po odświeżeniu okna z operacjami - technologia zlecenia
::   WE: _a - opcja: technologia źródłowa (T), technologia zlecenia (Z)
::  OLD: \toper_after_rfr/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_oper:=params_get().env_oper;

_opcja:=_a;

_used:=_env_oper.used | exec('keyref_locked','#b__box',_env.UID_ZL,'TTE_PZL_DTEC',0);

{? _opcja='Z'
|| ZL.cntx_psh();
   ZL.prefix();
   {? ZL.seek(_env.ZL)
   || _env.TKTL_ZL:=exec('FindAndGet','#table',TKTL,ZL.RTKTL,,"ref()",null());
      VAR.A_KTL:=_env.TKTL_ZL;
      _hide:=':';
      {? ZL.RTKTL=''
      || _hide:='O'+_hide+'O'
::         ZTREE.TAB.btn_opt(ZTREE.BTN.GENERUJ,'state=normal');
::         ZTREE.TAB.btn_opt(ZTREE.BTN.OPERACJE,'state=grayed')
      || _hide:='G'+_hide+'G'
::         ZTREE.TAB.btn_opt(ZTREE.BTN.GENERUJ,'state=grayed');
::         ZTREE.TAB.btn_opt(ZTREE.BTN.OPERACJE,'state=normal')
      ?};
      {? ZTREE.TAB.size()=0
      || VAR.A_OP:=null()
      ?};
      _modify:=0;
      TKTL.cntx_psh(); TKTL.clear();
      {? TKTL.seek(_env.TKTL_ZL)
      || _modify:=(~_used & TKTL.ARCH<>'T' & TKTL.STAN<>'T' & ZL.STAN<>'Z' & TKTL.TYP().OPER<>'N');
         _hide:={? _modify || 'ÓZ'+_hide+'E' || 'DPUÓZF(NW)'+_hide+'DE' ?};
         {? exec('get','#params',100900,2)='' || _hide:='F(D)'+_hide ?};
::         {? TKTL.TYP().SUR='K' || _hide:='E(S)'+_hide ?};
         {? TKTL.TYP().UTIL='N' || _hide:='E(N)'+_hide ?};
         {? TKTL.TYP().OPER<>'T' || _hide:='O'+_hide+'O' ?};
         ZTREE.TAB.actions(ZTREE.WERT,_hide,,1)
      || _hide:='DPUÓZF(NW)'+_hide+'DEZF(W)';
         ZTREE.TAB.actions(ZTREE.WERT,_hide,,1)
      ?};
      TKTL.cntx_pop();
      ~~
   ?};
   ZL.cntx_pop()
?};
exec('surowce_load','zl_view',_opcja);
exec('narzedzia_load','zl_view',_opcja);

grp_disp(TACTTLS,'WERZ_'+_opcja,,1);
grp_disp(TMAT,'WERZ_'+_opcja,,1);
~~


\technologia_after_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: zakładka technologia - odśwież
::   WE: _a - Z: technologia zlecenia, T: technologia źródłowa
::  OLD: \tech_far/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

{? _=0 || _a:='Z' ?};
_opcja:=_a;

{? _opcja='Z' & ZL.RTKTL<>''
|| _env.TKTL_ZL:=exec('FindAndGet','#table',TKTL,ZL.RTKTL,,"ref()",null());
   _msk:=(8+($_env.TKTL_ZL))+3;
   exec('tktl_use','tech_common',_msk)
?};
{? _opcja='T' & ZL.RKTL<>''
|| _env.TKTL_SRC:=exec('FindAndGet','#table',TKTL,ZL.RKTL,,"ref()",null());
   _msk:=(8+($_env.TKTL_SRC))+3;
   exec('tktl_use','tech_common',_msk)
?};

{? _opcja='Z'
|| VAR.A_KTL:=_env.TKTL_ZL
|| VAR.A_KTL:=_env.TKTL_SRC
?};

{? _env.ZL=null()
|| {? _opcja='Z'
   || ZTREE.TAB.erase();
      grp_disp(ZTREE.TAB,ZTREE.WERT,,1);
      grp_disp(TACTTLS,'WERZ_Z',,1);
      grp_disp(TMAT,'WERZ_Z',,1)
   || TTREE.TAB.erase();
      grp_disp(TTREE.TAB,TTREE.WERT,,1);
      grp_disp(TACTTLS,'WERZ_T',,1);
      grp_disp(TMAT,'WERZ_T',,1)
   ?};
   return(0)
?};

VAR.ACTION:='Z';

::TMAT.clear();
exec('technologia_load','zl_view',_opcja);
exec('surowce_load','zl_view',_opcja);
exec('narzedzia_load','zl_view',_opcja);

{? _opcja='Z'
||
   VAR.DJ:=exec('FindAndGet','#table',TKTL,_env.TKTL_ZL,,"TYP().DJ",'');

:: Wyszarzanie/odszarzanie przyciskow w oknie operacji technologii
   _tktl:=exec('FindAndGet','#table',ZL,_env.ZL,,"TKTL",null());
::   {? _tktl=null()
::   || ZTREE.TAB.btn_opt(ZTREE.BTN.GENERUJ,'state=normal');
::      ZTREE.TAB.btn_opt(ZTREE.BTN.OPERACJE,'state=grayed')
::   || ZTREE.TAB.btn_opt(ZTREE.BTN.GENERUJ,'state=grayed');
::      ZTREE.TAB.btn_opt(ZTREE.BTN.OPERACJE,'state=normal')
::   ?};
   grp_disp(ZTREE.TAB,ZTREE.WERT,1,1)

||
   VAR.DJ:=exec('FindAndGet','#table',TKTL,_env.TKTL_SRC,,"TYP().DJ",'');
   grp_disp(TTREE.TAB,TTREE.WERT,1,1)
?};
~~


\cfg_przewodniki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: Konfiguruje zakładkę przewodników zlecenia w widoku zleceń
::   WE: _a - okno grupowe, do którego będą wstawiane zakładki
::       _b - obj_new - bufor zmiennej ZLV zawierający konfigurację zakładki
::  OLD: \przew/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_grp:=_a;
_zlv:=_b;

_tab:=_zlv.NAME;

exec('twrkplc_filter_all','zasoby');
ZGP.win_sel('WERZ');
exec('zgp_icons','zl_guide','WERZ');
exec('zgh_icons','zl_guide','WERZ'+_env.WP);
ZGH.win_edit('REDP');
_fb:="
   {? ZL.RODZAJ='N'
         |
      ZL.RODZAJ='P'
      & ZL.TYP().TECH='N'
      & exec('FindAndGet','#table',TKTL,ZL.RKTL,,\"TYP().OPER\",'T')='N'
         |
      ZL.RODZAJ='P'
      & ZL.TYP().TECH='T'
      & exec('FindAndGet','#table',TKTL,ZL.RTKTL,,\"TYP().OPER\",'T')='N'
   || params_get().env.DISABLE:='#disable'
   || ~~
   ?}
";
_fa:="";
_ar:="
   params_set(params_get());
   _env:=params_get().env;
:   VAR.A_ZLEC();
   VAR.A_NRPRZ:=ZGH.ref();
   VAR.A_NRZLP:=ZGH.ref();
   _env.ZGH:=ZGH.ref();
:   VAR.A_NRPRZ();
   ZGH.cntx_psh();
   ZGP.index('PNRPP');
   ZGP.prefix(ZGH.ref(),'N');
   grp_disp(ZGP,'WERZ',1);
   ZGH.cntx_pop();
   _keys:=exec('zgh_actions','zl_guide');
   ZGH.actions('WERZ'+_env.WP,_keys.hide,_keys.default,1);
   _grayed:=exec('zgh_grayed','zl_guide');
   ZGH.actions_grayed('WERZ'+_env.WP,_grayed);
   ~~
";
ZL.grp_sel(_grp,ZGH,'WERZ'+_env.WP,_tab,_ar,,,3,
   exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title'
);
:: Przypinam okno (zakładkę) do czynności
task_attach('TTE_PZL_DPRZ');
task_attach('TTE_PZL_DPZG');
:: Przypinam okno do środowiska
_env.win_attach(_grp,ZGH,'WERZ'+_env.WP,_zlv,'ZGH');

ZL.tab_splt(_grp,'tab0','horizontal','tab2');
_ar:="
   params_set(params_get());
   ZGP.cntx_psh();
   grp_disp(NASZGP,'WER');
   grp_disp(NASZGP,'SLOPOP');
   ZGP.cntx_pop()
";
_fb:="
   {? grp_empty(ZGH,'WERZ'+params_get().env_guide.WP)
   || '#disable'
   || _actions:=exec('zgp_actions','zl_guide');
      ZGP.actions('WERZ',_actions,,1);
      {? ZGH.STAN='T' | ZL.STAN='Z' | ZL.RODZAJ='Z' | ZL.RODZAJ='N'
      || ZGP.dnd_sel('WERZ',,'records.ZGP',\"\")
      || ZGP.dnd_sel('WERZ',,'records.ZGP',\"exec('dnd_renum','zl_guide')\")
      ?};
      ''
   ?}
";
_fa:="
   ZGP.dnd_sel('WERZ',,'records.ZGP',\"\");
   ~~
";
ZL.grp_sel(_grp,ZGP,'WERZ',,_ar,,,,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title');
:: Przypinam okno do środowiska
_env.win_attach(_grp,ZGP,'WERZ',_zlv,'ZGP');

ZL.tab_splt(_grp,'tab2','vertical','nast1');
_ar:="";
_fb:="
   ZL.cntx_psh();
   ZGP.cntx_psh();
   {? grp_empty(ZGP,'WERZ')
   || '#disable'
   || NASZGP.index('NASTOP');
      NASZGP.prefix(VAR.A_ZGP);
      {? ~NASZGP.first() || VAR.STRING3:='' ?};
      ''
   ?}
";
_fa:="
   ZGP.cntx_pop();
   ZL.cntx_pop();
   ~~
";
ZL.grp_sel(_grp,NASZGP,'SLOPOP',,_ar,,,1,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title');
:: Przypinam okno do środowiska
_env.win_attach(_grp,NASZGP,'SLOPOP',_zlv,'NASZGP_POP');

ZL.tab_splt(_grp,'nast1','horizontal','nast2');
_ar:="";
_fb:="
   ZL.cntx_psh();
   ZGP.cntx_psh();
   {? grp_empty(ZGP,'WERZ')
   || '#disable'
   || {? ZL.STAN='Z' | params_get().env_guide.used
      || NASZGP.actions('WER','dpuDPUI:dDI',,1)
      |? exec('is_main_podzlec','zl_link',ZGP.ZL)
      || NASZGP.actions('WER','I:I',,1)
      || NASZGP.actions('WER','',,1)
      ?};
      NASZGP.index('OPNAST');
      NASZGP.prefix(VAR.A_ZGP);
      {? ~NASZGP.first() || VAR.STRING3:='' ?};
      ''
   ?}
";
_fa:="
   ZGP.cntx_pop();
   ZL.cntx_pop();
   ~~
";
ZL.grp_sel(_grp,NASZGP,'WER',,_ar,,,3,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title');
:: Przypinam okno do środowiska
_env.win_attach(_grp,NASZGP,'WER',_zlv,'NASZGP_NAS');
~~


\przewodniki_after_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: Formuła po odświeżeniu okna zleceń - dla przewodników
::  OLD: \przew_far/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_guide:=params_get().env_guide;

{? _env.BUF_ZL.RODZAJ='Z'
|| ZGH.index('UID_VIEW');
   ZGH.prefix(_env.UID_ZL);
   ZGH.first()
|| ZGH.index('ZLNR');
   ZGH.prefix(_env.ZL);
   ZGH.first()
?};
grp_disp(ZGH,'WERZ'+_env_guide.WP,1,1);
{? grp_empty(ZGH,'WERZ'+_env_guide.WP)
||
   ZGP.hdr_sel();
   _win_nas:=NASZGP.win_sel('?');
   NASZGP.win_sel('SLOPOP');
   NASZGP.hdr_sel();
   NASZGP.win_sel('WER');
   NASZGP.hdr_sel();
   NASZGP.win_sel(_win_nas);
   ~~
?};
~~


\przewodniki_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła 'przed obsługą' dla wszystkich okienek na zakładce przewodniki
::   WE: _a - INTEGER -  0 - formuła wywołana ze środka grp_disp
::                       1 - formuła wywołana wklikaniem się użytkownika
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_guide:=params_get().env_guide;

_mode:=_a;
:: Wstępne ustawienie tytułu okna
{? cur_tab(1,1)=ZGP | cur_tab(1,1)=NASZGP
|| {? grp_empty(ZGH,'WERZ'+_env_guide.WP)
   || _symbol:=''
   || _symbol:=exec('FindAndGet','#table','ZGH',_env.ZGH,,"NRPRZ",'')
   ?}
|| _symbol:=_env.BUF_ZL.SYM
?};
cur_tab(1,1).win_sel(cur_win(1,1));
cur_tab(1,1).hdr_sel();
{? _env.BUF_ZL.RODZAJ='N'
|| cur_tab(1,1).hdr_sel(' '+_symbol+' — '+'nie dotyczy'@)
|| cur_tab(1,1).hdr_sel(' '+_symbol)
?};

{? _mode=1
||
:: Wszedłem na zakładkę przewodników
::   VAR.A_NRPRZ:=VAR.A_NRZLP:=_env.ZGH;
   ~~;
:: W zależności od okna - dla nagłówka nic nie robię, dla ZGP i NASZGP zablokowuję nagłówek
   {? cur_tab(1,1)=ZGP | cur_tab(1,1)=NASZGP
   || _locked:=exec('blk_lock','#table','ZGH',_env.ZGH,,1);
      _env_guide.used:=~_locked;
      {? _env_guide.used
      || cur_tab(1,1).hdr_sel();
         cur_tab(1,1).hdr_sel(' '+_symbol+' — '+'PODGLĄD'@)
      ?}
   ?}

?};
~~


\przewodniki_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła 'po obsłudze' dla wszystkich okienek na zakładce przewodniki
::   WE: _a - INTEGER -  0 - formuła wywołana ze środka grp_disp
::                       1 - formuła wywołana wyklikaniem się użytkownika
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_guide:=params_get().env_guide;

_mode:=_a;

:: Ustawienie tytułu okna
{? cur_tab(1,1)=ZGP | cur_tab(1,1)=NASZGP
|| {? grp_empty(ZGH,'WERZ'+_env_guide.WP)
   || _symbol:=''
   || _symbol:=exec('FindAndGet','#table','ZGH',_env.ZGH,,"NRPRZ",'')
   ?}
|| _symbol:=_env.BUF_ZL.SYM
?};
cur_tab(1,1).win_sel(cur_win(1,1));
cur_tab(1,1).hdr_sel();
{? _env.BUF_ZL.RODZAJ='N'
|| cur_tab(1,1).hdr_sel(' '+_symbol+' — '+'nie dotyczy'@)
|| cur_tab(1,1).hdr_sel(' '+_symbol)
?};

{? _mode=1
||
:: Wychodzę z zakładki przewodników
   ~~;
:: W zależności od okna - dla nagłówka nic nie robię, dla ZGP i NASZGP odblokowuję nagłówek
   {? cur_tab(1,1)=ZGP | cur_tab(1,1)=NASZGP
   || exec('blk_unlock','#table','ZGH',_env.ZGH)
   ?};
   _env_guide.used:=0

?};
~~


\cfg_limity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: Konfiguruje zakładkę limitów zlecenia w widoku zleceń
::   WE: _a - okno grupowe, do którego będą wstawiane zakładki
::       _b - obj_new - bufor zmiennej ZLV zawierający konfigurację zakładki
::  OLD: \lim/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_limit:=_env.env_limit;
_ZLIMp:=_env_limit.ZLIMp;
_ZLIM:=_ZLIMp.ZLIM;
_wp:=_ZLIMp.WP;
_WER:={? _wp='P' || _ZLIMp.WERP || _ZLIMp.WERW ?};

_grp:=_a;
_zlv:=_b;

_tab:=_zlv.NAME;

{? _wp='P'
|| _after_refresh:="
      params_set(params_get());
      exec('__ZLIM_actions','zl_limit');
      exec('nlim_load','zl_view');
      grp_disp(ZLIM,'WERNLZ',1,1)
   "
|| _after_refresh:="
      params_set(params_get());
      exec('__ZLIM_actions','zl_limit')
   "
?};
_fb:=exec('get_before','zl_view',"{? _a>0 || exec('limity_load','zl_view') ?}; ''",_zlv);
_fa:=exec('get_after','zl_view',"",_zlv);
ZL.grp_sel(_grp,_ZLIM,_WER,_tab,_after_refresh,,,,_fb,_fa,,,'maximized_with_title');
:: Przypinam okno (zakładkę) do czynności
task_attach('TTE_PZL_DLIM');
:: Przypinam okno do środowiska
_env.win_attach(_grp,_ZLIM,_WER,_zlv,'LIMIT');

{? _wp='P'
|| ZL.tab_splt(_grp,'tab0','horizontal','tab1',);
   _after_refresh:="params_exec('__NLIM_actions','zl_nlimit')";
   _fb:=exec('get_before','zl_view',"{? _a>0 || exec('nlim_load','zl_view') ?}; ''",_zlv);
   _fa:=exec('get_after','zl_view',"",_zlv);
   ZL.grp_sel(_grp,ZLIM,'WERNLZ',,_after_refresh,,,5,_fb,_fa,,,'maximized_with_title');
   ZLIM.win_fml('WERNLZ',,'KTM','KTM','ICON_BEFORE',"exec('icon_zam','zl_nlimit')");
:: Przypinam okno do środowiska
   _env.win_attach(_grp,ZLIM,'WERNLZ',_zlv,'NLIM')
?};
~~


\limity_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła 'przed obsługą' dla wszystkich okienek na zakładce zapotrzebowań (limity i surowce nielimitowane)
::   WE: _a - INTEGER -  0 - formuła wywołana ze środka grp_disp
::                       1 - formuła wywołana wklikaniem się użytkownika
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_mode:=_a;

{? _env.ZL<>_env.env_limit.ZL
|| _env.env_limit.ZL:=_env.ZL;
   _env.env_limit.ZLIMp.ZLIM.sel_adel()
?};

{? _mode=1
||
:: Wszedłem na zakładkę zapotrzebowań
   VAR.A_NRZLP:=null();
   VAR.A_ZGP:=null();
   ~~;
   {? exec('zl_lock','zl_common',_env.ZL,'L',1)
   ||
::    Uruchamiam czynność (obsługa procesowa tylko dla redagowalnych zapotrzebowań gdy są uprawnienia do TTE_PZL_DLIM)
      {? _env.BUF_ZL.RODZAJ='P' & _env.BUF_ZL.STAT_N='T' & exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DLIM')
      || exec('run_dlim','zl_view','START')
      ?};
      _env.env_limit.used:=0
   || _env.env_limit.used:=1
   ?}

?};
~~


\limity_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła 'po obsłudze' dla wszystkich okienek na zakładce zapotrzebowań (limity i surowce nielimitowane)
::   WE: _a - INTEGER -  0 - formuła wywołana ze środka grp_disp
::                       1 - formuła wywołana wyklikaniem się użytkownika
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_mode:=_a;

{? _mode=1
||
:: Wychodzę z zakładki zapotrzebowań
   ~~;
:: Oznaczenie zlecenia jako 'Ulepszenie'
   {? _env.WP='P' & _env.BUF_ZL.RODZAJ='P'
   || _formula:="
         _improve:=ZL.IMPROVE;
         {? exec('is_improvement','zl_head',ZL.ref())
         || ZL.IMPROVE:='T'
         || ZL.IMPROVE:='N'
         ?};
         {? _improve<>ZL.IMPROVE || ZL.put() ?}
      ";
      exec('FindAndGet','#table',ZL,_env.ZL,,_formula,~~)
   ?};
:: Kończę czynność (obsługa procesowa tylko dla redagowalnych zapotrzebowań gdy są uprawnienia do TTE_PZL_DLIM)
   {? _env.BUF_ZL.RODZAJ='P' & _env.BUF_ZL.STAT_N='T' & exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DLIM')
   || exec('run_dlim','zl_view','STOP')
   ?};
   exec('zl_unlock','zl_common',_env.ZL,'L');
   _env.env_limit.used:=0

?};
~~


\limity_after_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: Formuła po odświeżeniu okna zleceń - dla limitów
::  OLD: \lim_far/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_limit:=_env.env_limit;
_ZLIMp:=_env_limit.ZLIMp;
_ZLIM:=_ZLIMp.ZLIM;
_wp:=_ZLIMp.WP;
_WER:={? _wp='P' || _ZLIMp.WERP || _ZLIMp.WERW ?};

::Sprawdzenie, czy wymagane przeładowania zawartości zakładki z limitami
{? _ZLIM.size()=0
|| ZLIM.cntx_psh();
   {? exec('is_zlim_zl','zl_limit',_env.ZL,'SO')
   || _env.ZLIM_reload:=1
   ?};
   ZLIM.cntx_pop()
?};

exec('openmask','zl_common',_env.ZL);

:: Ładowanie danych do okna 'Limity' tylko gdy zmiana kontekstu zlecenia
{? _env.ZL<>_ZLIMp.ZL | _env.ZLIM_reload>0
|| _env.ZLIM_reload:=0;
   exec('limity_load','zl_view')
?};

_p8504:=params_get().env.env_limit.p8504;
{? _p8504='T'
|| _ZLIM.tr_set(1,_WER,1,0)
|| _ZLIM.tr_set(0,_WER,1,0)
?};

grp_disp(_ZLIM,_WER,1,1);
{? _wp='P'
|| exec('nlim_load','zl_view');
   grp_disp(ZLIM,'WERNLZ',1,1)
?};
~~


\limity_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zasilenie okna 'Limity' w zakładce 'Zapotrzebowania'
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_limit:=_env.env_limit;
_ZLIMp:=_env_limit.ZLIMp;
_ZLIM:=_ZLIMp.ZLIM;
_wp:=_ZLIMp.WP;
_WER:={? _wp='P' || _ZLIMp.WERP || _ZLIMp.WERW ?};

_used:=_env_limit.used;
_env_limit.used:={? _used || 1 || exec('keyref_locked','#b__box',_env.UID_ZL,'TTE_PZL_DLIM',0) ?};

_ZLIM.win_sel(_WER);
_ZLIM.hdr_sel();
_ZLIM.hdr_sel(' — '+'zlecenie %1'@[_env.BUF_ZL.SYM]);

_ZLIMp.ZL:=_env.ZL;
_ZLIMp.ZGH:=null();
_ZLIMp.ZGP:=null();
_ZLIMp.View:=0;
::_view;
_ZLIMp.Limit:='T';
exec('openmask','zl_common',_env.ZL);
exec('__ZLIM_datapump','zl_limit',_ZLIMp);
_ZLIM.first();
~~


\nlim_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zasilenie okna 'Surowce nielimitowane' w zakładce 'Zapotrzebowania'
::       Zawsze prefiksowanie
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

ZLIM.win_sel('WERNLZ');
ZLIM.hdr_sel();
ZLIM.hdr_sel(' — '+'zlecenie %1'@[_env.BUF_ZL.SYM]);
{? exec('FindAndGet','#table',ZL,_env.ZL,,"RODZAJ",'P')='P'
|| ZLIM.index('ZN');
   ZLIM.prefix(_env.ZL,'N')
|| ZLIM.index('ZPN');
   ZLIM.prefix(_env.ZL,'N')
?};
~~


\technologia_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła 'przed obsługą' dla wszystkich okienek na zakładce technologia
::   WE: _a - INTEGER -  0 - formuła wywołana ze środka grp_disp
::                       1 - formuła wywołana wklikaniem się użytkownika
::       _b - STRING - rodzaj zakładki: 'T' - technologia źródłowa
::                                      'Z' - technologia zlecenia
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_mode:=_a;
_kind:=_b;

{? _kind='Z' & ZL.RTKTL<>''
|| _env.TKTL_ZL:=exec('FindAndGet','#table',TKTL,ZL.RTKTL,,"ref()",null())
?};
{? _kind='T' & ZL.RKTL<>''
|| _env.TKTL_SRC:=exec('FindAndGet','#table',TKTL,ZL.RKTL,,"ref()",null())
?};

{? _mode=1
||
   _zakladka:=_env.CUR_TAB.ID;
   {? _zakladka='TECH_SRC'
   ||
::    Wszedłem na zakładkę technologia źródłowa
      VAR.A_KTL:=_env.TKTL_SRC;
::    Brak obsługi procesowej (tylko podgląd źródłowej technologii)
      ~~

   |? _zakladka='TECH_ZL'
   ||
::    Wszedłem na zakładkę technologia zlecenia
      VAR.A_KTL:=_env.TKTL_ZL;
::    Uruchamiam czynność (obsługa procesowa tylko dla redagowalnej technologii zlecenia prostego,
::    gdy są uprawnienia do TTE_PZL_DTEC)
      {? _env.BUF_ZL.RODZAJ='P' & _env.BUF_ZL.STAT_N='T' & _env.BUF_ZL.STAT_T<>'T' &
         exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DTEC')
      || exec('run_dtec','zl_view','START')
      ?}

   ?}
?};
~~


\technologia_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła 'po obsłudze' dla wszystkich okienek na zakładce technologia
::   WE: _a - INTEGER -  0 - formuła wywołana ze środka grp_disp
::                       1 - formuła wywołana wyklikaniem się użytkownika
::       _b - STRING - rodzaj zakładki: 'T' - technologia źródłowa
::                                      'Z' - technologia zlecenia
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_mode:=_a;
_kind:=_b;

{? _mode=1
||
   _zakladka:=_env.CUR_TAB.ID;
   {? _zakladka='TECH_SRC'
   ||
::    Wychodzę z zakładki technologia źródłowa
      ~~;
::    Brak obsługi procesowej (tylko podgląd źródłowej technologii)
      ~~

   |? _zakladka='TECH_ZL'
   ||
::    Wychodzę z zakładki technologia zlecenia
      ~~;
::    Kończę czynność (obsługa procesowa tylko dla redagowalnej technologii zlecenia prostego,
::    gdy są uprawnienia do TTE_PZL_DTEC)
      {? _env.BUF_ZL.RODZAJ='P' & _env.BUF_ZL.STAT_N='T' & _env.BUF_ZL.STAT_T<>'T' &
         exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DTEC')
      || exec('run_dtec','zl_view','STOP')
      ?}
   ?}
?};

~~


\cfg_dodatkowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: Konfiguruje zakładkę danych dodatkowych w widoku zleceń
::   WE: _a - okno grupowe, do którego będą wstawiane zakładki
::       _b - obj_new - bufor zmiennej ZLV zawierający konfigurację zakładki
::  OLD: \dod/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_blob:=_env.env_blob;

_grp:=_a;
_zlv:=_b;

_tab:=_zlv.NAME;

_fb:="params_exec('atrybuty_load','zl_view')";
_fa:="";
_far:="";
ZL.grp_sel(_grp,UAT,'WER',_tab,_far,,,3,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,,'maximized_with_title');
:: Przypinam okno (zakładkę) do czynności
task_attach('TTE_PZL_DPOZ');
:: Przypinam okno do środowiska
_env.win_attach(_grp,UAT,'WER',_zlv,'UAT');
ZL.tab_splt(_grp,'tab0','vertical','tab_pliki');
_fb:="
   params_exec('pliki_load','zl_view')
";
_fa:="";
ZL.grp_ctr(_grp,SYSLOG,_env_blob.WIN_MAIN,,,,,,10,10,exec('get_before','zl_view',_fb,_zlv),exec('get_after','zl_view',_fa,_zlv),,'maximized_with_title');
_env.win_attach(_grp,SYSLOG,_env_blob.WIN_MAIN,_zlv,'PLIKIDOC');
~~


\dodatkowe_after_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: Formuła po odświeżeniu okna zleceń - dla danych dodatkowych
::  OLD: \dod_far/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
exec('atrybuty_load','zl_view');
exec('pliki_load','zl_view');
grp_disp(UAT,'WER',1,1);
~~


\dodatkowe_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła 'przed obsługą' dla wszystkich okienek na zakładce danych dodatkowych
::   WE: _a - INTEGER -  0 - formuła wywołana ze środka grp_disp
::                       1 - formuła wywołana wklikaniem się użytkownika
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_mode:=_a;

{? _mode=1
||
:: Wszedłem na zakładkę danych dodatkowych
   _env_atr:=params_get().env_atr;
   _env_atr.TKTL:=null();
   _env_atr.ZL:=_env.ZL;
   ~~;
:: Uruchamiam czynność (obsługa procesowa tylko dla redagowalnych danych dodatkowych,
:: gdy są uprawnienia do TTE_PZL_DPOZ)
   {? _env.BUF_ZL.RODZAJ='P' & _env.BUF_ZL.STAT_N='T' &
      exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DPOZ')
   || exec('run_dpoz','zl_view','START')
   ?}

?};
~~


\dodatkowe_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła 'po obsłudze' dla wszystkich okienek na zakładce danych dodatkowych
::   WE: _a - INTEGER -  0 - formuła wywołana ze środka grp_disp
::                       1 - formuła wywołana wyklikaniem się użytkownika
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_mode:=_a;

{? _mode=1
||
:: Wychodzę z zakładki danych dodatkowych
   ~~;
:: Kończę czynność (obsługa procesowa tylko dla redagowalnych danych dodatkowych
:: gdy są uprawnienia do TTE_PZL_DPOZ)
   {? _env.BUF_ZL.RODZAJ='P' & _env.BUF_ZL.STAT_N='T' &
      exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DPOZ')
   || exec('run_dpoz','zl_view','STOP')
   ?}

?};

~~


\atrybuty_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [12.10]
:: OPIS: zakładka danych dodatkowych - atrybuty
::  OLD: \atrybuty/zlv.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_other:=params_get().env_other;

_used:=exec('keyref_locked','#b__box',_env.UID_ZL,'TTE_PZL_DPOZ',0);
_env_other.used:=_used;

{? _env.ZL<>null()
|| UAT.win_sel('WER');
   UAT.hdr_sel();
   UAT.hdr_sel(' '+'zlecenia %1'@[_env.BUF_ZL.SYM]+{? _used || ' — '+'PODGLĄD'@ || '' ?});
   ATR.TACR:='ZL';
   ATR.TREF:=#_env.ZL;
   ATR.TMSK:=ref_name(_env.ZL);
   {? _used | _env.BUF_ZL.STAT_N='N' | _env.BUF_ZL.STAN='Z'
   || _akcje:='DPUr:D'
   || _akcje:=''
   ?};
   UAT.fld_attr(,2);
   UAT.index('TR');
   UAT.prefix(ATR.TACR+'*',ATR.TREF,ATR.TMSK+'*');
   UAT.actions('WER',_akcje,,1);
   UAT.win_edit('');
   _res:=UAT.first()
|| UAT.actions('WER',':D',,1)
?};
~~


\pliki_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: zakładka danych dodatkowych - załączniki
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_env_other:=params_get().env_other;
_env_blob:=params_get().env_blob;

_used:=exec('keyref_locked','#b__box',_env.UID_ZL,'TTE_PZL_DPOZ',0);
_env_other.used:=_used;

{? _used | _env.BUF_ZL.STAT_N='N' | _env.BUF_ZL.STAN='Z' | _env.DISABLE='#disable'
|| _env_blob.EDITABLE:=0
|| _env_blob.EDITABLE:=1
?};
_env_blob.actions_grayed();

{? _env.ZL<>null() & _env.DISABLE=''
:: załadować i wyświetlić załączniki
|| PLIKIDOC.index('TRS');
   _env_blob.FML_ARGS.TAB:='ZL*';
   _env_blob.FML_ARGS.MSK:=ref_name(_env.ZL);
   _env_blob.FML_ARGS.REF:=#_env.ZL;
   PLIKIDOC.prefix('ZL*',ref_name(_env.ZL),#_env.ZL);
   _env_blob.update();
   ~~
:: zdezaktywować kontrolkę
|| PLIKIDOC.index('TRS');
   PLIKIDOC.prefix('*');
   _env_blob.update();
   ~~
?};
~~


\common_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wspólna część formuły 'przed obsługą' dla wszystkich okienek we wszystkich zakładkach
::       Na podstawie cur_tab i cur_win ustawiam na jakiej zakładce jestem
::   WE: _a - INTEGER -  0 - formuła wywołana ze środka grp_disp
::                       1 - formuła wywołana wklikaniem się użytkownika
::
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

ZL.cntx_psh();
ZL.prefix();
ZL.seek(_env.ZL);

_mode:=_a;
{? _mode=1
||
   _tab_old:='';
   {? var_pres('CUR_TAB',_env)>100
   || _tab_old:=_env.CUR_TAB.ID;
      obj_del(_env.CUR_TAB)
   ?};
   _env.CUR_TAB:=_env.get_tab();

   {? _env.CUR_TAB.ID<>_tab_old
   ||
::    Nastąpiła zmiana zakładki
      params_exec('tab_changed','zl_view')
   ?}
?};
~~


\common_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Wspólna część formuły 'po obsłudze' dla wszystkich okienek we wszystkich zakładkach
::   WE: _a - INTEGER -  0 - formuła wywołana ze środka grp_disp
::                       1 - formuła wywołana wyklikaniem się użytkownika
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_mode:=_a;
ZL.cntx_pop();
~~


\get_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca formułę przed obsługą dla funkcji grp_sel
::   WE: [_a] - FORMULA - formuła specyficzna dla danego okna
::        _b - obj_new() - bufor zmiennej ZLV - zawiera info o konfiguracji zakładki
::   WY:
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_formula:="";
{? var_pres('_a')=type_of("")
|| _formula:=_a
?};
_zlv:=_b;

_result:="
   _res_before:='';
   params_set(params_get());

   params_exec('common_before','zl_view',_a)
";
{? _zlv.BEFORE<>""
||
:: Zamieniam w formuli pojedyncze apostrofy na podwojne, zeby nie walilo bledem przy sklejaniu
   _formulized:=gsub(_zlv.BEFORE+'','\"','\"\"');

:: Tworze formule w formuli i ja wywoluje zeby przechwycic jej wynik
   _result+="

      ;_ff:=\"params_set(params_get());"+_formulized+"\";
      _res_before:=_ff(_a)
   "
?};
{? _formula<>""
||
:: Zamieniam w formuli pojedyncze apostrofy na podwojne, zeby nie walilo bledem przy sklejaniu
   _formulized:=gsub(_formula+'','\"','\"\"');

:: Tworze formule w formuli i ja wywoluje zeby przechwycic jej wynik
   _result+="

      ;_ff:=\"params_set(params_get());"+_formulized+"\";
      _res_before:=_ff(_a)
   "
?};
_result+='';
{? _result<>''
|| _result+=";"+"
    {? type_of(_res_before)=0 | _res_before=''
    || _res_before:=params_get().env.DISABLE
    ?};
    _res_before
   "
|| _result+="params_get().env.DISABLE"
?};
_result:=$_result;
_result


\get_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca formułę po obsłudze dla funkcji grp_sel
::   WE: _a - FORMULA - formuła specyficzna dla danego okna
::       _b - obj_new() - bufor zmiennej ZLV - zawiera info o konfiguracji zakładki
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_formula:="";
{? var_pres('_a')=type_of("")
|| _formula:=_a
?};
_zlv:=_b;

_result:="params_exec('common_after','zl_view',_a)"+'';
{? _zlv.AFTER<>""
|| _result+=";\n"+_zlv.AFTER
?};
{? _formula<>""
|| _result+=";\n"+_formula
?};
_result:=$_result;
_result


\action_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Obsługa akcji generowania technologii (przycisk w zakładce 'Technologia' obszaru roboczego zleceń)
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TTE_PZL_DTEC';
_args.UIDREF:=ZL.uidref();
_args.AKCJA:='GENERUJ';
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZL.ref());

exec('mp_run','#b__box',_args)


\run_dtec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Uruchamia czynność TTE_PZL_DTEC z poziomu zakładek z podanym wejściem
::   WE: _a - STRING - akcja przekazywana do czynności
::   WY: ANY - wynik działania czynności lub ~~
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_akcja:=_a;
_res:=~~;
ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_env.ZL)
||
   {? ZL.STAN='N' & ZL.STAT_T='N' & ZL.TYP().TECH='T'
   || _uid:='TTE_PZL_DTEC';
      _ref:=ZL.ref();
      _portsIn:=exec('portsIn','#b__box',_uid);
      exec('portsInSet','#b__box',_portsIn,_uid,'ZL',_ref);

      _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:=_uid;
      _args.UIDREF:=ZL.uidref();
      _args.AKCJA:=_akcja;
      _args.PORTS_IN:=_portsIn;
      _args.TODO_AUTO_MOJE:='N';
      {? _akcja='STOP' | _akcja='START'
      || _args.GRUPA:='T';
         KOMM.init(,,'Zakładka'@)
      ?};
      _res:=exec('mp_run','#b__box',_args)
   ?}
?};
ZL.cntx_pop();
_res


\run_dpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uruchamia czynność TTE_PZL_DPOZ z poziomu zakładek z podanym wejściem
::   WE: _a - STRING - akcja przekazywana do czynności
::   WY: ANY - wynik działania czynności lub ~~
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_akcja:=_a;
_res:=~~;
ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_env.ZL)
||
   {? ZL.STAN<>'Z'
   || _uid:='TTE_PZL_DPOZ';
      _ref:=ZL.ref();
      _portsIn:=exec('portsIn','#b__box',_uid);
      exec('portsInSet','#b__box',_portsIn,_uid,'ZL',_ref);

      _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:=_uid;
      _args.UIDREF:=ZL.uidref();
      _args.AKCJA:=_akcja;
      _args.PORTS_IN:=_portsIn;
      _args.TODO_AUTO_MOJE:='N';
      {? _akcja='STOP' | _akcja='START'
      || _args.GRUPA:='T';
         KOMM.init(,,'Zakładka'@)
      ?};
      _res:=exec('mp_run','#b__box',_args)
   ?}
?};
ZL.cntx_pop();
_res


\tab_changed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła wywoływana w momencie gdy zmieniła się zakładka
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

::FUN.info('Zakładka zmieniona na: '+_env.CUR_TAB.NAME);
{? _env.WP='P'
|| {? grp_empty(ZL,_env.WERP)=0
   || _env.DISABLE:=''
   ?}
|? _env.WP='W'
|| {? grp_empty(ZL,_env.WERW)=0
   || _env.DISABLE:=''
   ?}
?};
~~


\struktura
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2011]
:: OPIS: Wyświetla strukturę zlecenia złożonego
::  OLD: \struktura/zlec3.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

ZL.cntx_psh();

_a_zlec:=VAR.A_ZLEC;
_env.STRUCT:=1;
_env.ZL_UP:=ZL.ref();
_env.ZL_TREE:=ZL.ref();

_root_sym:=exec('FindAndGet','#table',ZL,ZL.NODE,,"SYM",'');
_grp:=ZL.grp_make('Zlecenia podrzędne do: %1'@[_root_sym],,'#zlecstruct',10,15,,,'normal');
ZL.grp_sel(_grp,,'STRUCT',,"params_exec('after_rfrsh_p','zl_view')",,,,,,,,'maximized');
ZL.win_sel(_grp);
ZL.index('ZLTREE');
ZL.prefix(ZL.TYP,ZL.NODE);
ZL.select(,1,10);

VAR.A_ZLEC:=_a_zlec;
_env.STRUCT:=0;

ZL.cntx_pop();
~~


\run_dlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Uruchamia czynność TTE_PZL_DLIM z poziomu zakładek z podanym wejściem
::   WE: _a - STRING - akcja przekazywana do czynności
::   WY: ANY - wynik działania czynności lub ~~
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_akcja:=_a;
_res:=~~;
ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_env.ZL)
||
   {? ZL.STAN='N' & exec('stat_l','zl_limit',ZL.ref())='N'
   || _uid:='TTE_PZL_DLIM';
      _ref:=ZL.ref();
      _portsIn:=exec('portsIn','#b__box',_uid);
      exec('portsInSet','#b__box',_portsIn,_uid,'ZL',_ref);

      _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:=_uid;
      _args.UIDREF:=ZL.uidref();
      _args.AKCJA:=_akcja;
      _args.PORTS_IN:=_portsIn;
      _args.TODO_AUTO_MOJE:='N';
      _args.CONTEXT:=obj_new('VIEW'); _args.CONTEXT.VIEW:=0;
      {? _akcja='STOP' | _akcja='START'
      || _args.GRUPA:='T';
         KOMM.init(,,'Zakładka'@)
      ?};
      exec('mp_run','#b__box',_args);
      _res:=_args.CONTEXT.VIEW
   || _res:=0
   ?}
?};
ZL.cntx_pop();
_res


\zwin_rozwin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwiń/rozwiń w oknie struktury zlecenia
::----------------------------------------------------------------------------------------------------------------------
exec('zwin_rozwin','#tree')


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.28]
:: OPIS: Ustawienie parametrów sesji w obszarze roboczym zleceń
::----------------------------------------------------------------------------------------------------------------------
__PARSES.editDom('TTE');
params_exec('zakr_all','zl_view');
AreaTitle.setTitle();
~~

:Sign Version 2.0 jowisz:1045 2023/09/29 13:52:56 4db5992988f9327caf49315d2c730377ac4c0b7228df71d9ea8cc6c479bd227f3be2f1e1b5f71b71ec544f08d955969af142ffd93905dffc112576ba1c8df4f6e458b3a9c170781e882b8e38073bb13127b934921dba1b529ba8f4ee9906072eea2a98ac854a876457834dcc81e49243609f685cc930104826b403a18c186831
