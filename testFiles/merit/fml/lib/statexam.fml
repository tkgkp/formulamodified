:!UTF-8
::(c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: statexam.fml [12.10]
:: Utworzony: 2010/11/22
:: Autor: jerry
::======================================================================================================================
:: Zawartość: Statusy dostaw, historia statusów, badania dostaw, badania operacji zleceń
::======================================================================================================================


\nowedane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Sprawdza czy są niezbędne elementy mechanizmu statusów i ewentualnie gdy ich brak, to je dodaje
::----------------------------------------------------------------------------------------------------------------------
STATS.clear();
STATS.index('NN');

_stats:="
         {? ~STATS.find_key(_a,_a)
         || STATS.N:=_a;
            STATS.KIND:=_b;
            STATS.ICON:=_c;
            STATS.A:=_d;
            STATS.add(1)
         ?}
        ";

_stats('~Niezgodny'   ,'N','','T');
_stats('~Nieokreślony','O','','T');
_stats('~Zgodny'      ,'Z','','T');
~~


\STATS_N_2_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Zwraca STATS.ref() dla podanej nazwy statusu
::   WE: _a - STATS.N
::   WY: STATS.ref()
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
STATS.cntx_psh();
STATS.clear();
STATS.index('NN');
{? ~STATS.first() || exec('nowedane','statexam') ?};
STATS.prefix(_a,_a);
{? STATS.first()
|| _result:=STATS.ref()
?};
STATS.cntx_pop();
_result


\MG_DEFSTATS_bFE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Przed redakcją MG.DEFSTATS
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? 1+MG.TYP='D'
|| {? MG.DEFSTATS=null()
   || MG.DEFSTATS:=exec('STATS_N_2_ref','statexam','~Zgodny')
   ?}; 1
|| MG.DEFSTATS:=null();
   0
?}


\MG_DEFSTATS_aFE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: po redakcji MG.DEFSTATS
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(MG,,'DEFSTATS')


\mg_defstats_bbl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: wartosc poczatkowa MG.DEFSTATS
::----------------------------------------------------------------------------------------------------------------------
exec('MG_DEFSTATS_bFE','statexam');
MG.DEFSTATS


\mx_defstats_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: przed redakcja MX.DEFSTATS
::----------------------------------------------------------------------------------------------------------------------
MX.MG();
exec('MG_DEFSTATS_bFE','statexam')


\czyw_bad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: sprawdza czy dana pozycja DK jest w badaniu
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_roln:=exec('get_par','#parametr',141);
{? _roln='T' & DK.PLUS='T'
|| DK.cntx_psh();
   DK_HS.cntx_psh();
   DK_HS.index('DK');
   DK_HS.prefix(DK.ref());
   {? DK_HS.first()
   || {!
      |? _wyn:=(#DK_HS.BADH)<>0;
         ~_wyn & DK_HS.next()
      !}
   ?};
   DK.cntx_pop();
   DK_HS.cntx_pop()
?};
_wyn


\Create_ZON4typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Zwraca dopuszczalne rodzaje dostaw dla dokumentu
::   WE: _a - wskazanie na tabele, w ktorej sa pola STATS_Z, STATS_O, STATS_N
::   WY: STRING, dopuszczalne rodzaje (literki ZON)
::UWAGA: brak kontroli typow parametrow
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
 {? _tab.STATS_Z='T' || 'Z' || '' ?}
+{? _tab.STATS_O='T' || 'O' || '' ?}
+{? _tab.STATS_N='T' || 'N' || '' ?}


\DK_HSchkDK_SRC
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Sprawdza, czy DK wystepuje jako DK_HS.DK_SRC
::   WE: DK.ref()
::   WY: @.Class.cResult .Result - tabela z pozycjami, ktore sa potomne do biezacej
::----------------------------------------------------------------------------------------------------------------------
_dk_ref:={? _>0 & type_of(_a)=type_of(DK.ref()) || _a || DK.ref() ?};

_result:=obj_new(@.Class.cResult);
_result.State:=1;
_tab:=tab_tmp(2
             ,'P','INTEGER','Pozycja'
             ,'STATS','STRING[40]','Status'
             );
_result.Result:=_tab;

_tabt:=exec('Tools4Stats','statexam');
{? _dk_ref<>null
|| _tabt.cntx_psh();
   _tabt.open_all(ref_name(_dk_ref)+3);
   _tabt.clear();

   {? DK.seek(#_dk_ref,ref_name(_dk_ref))
   ||
      DK_HS.index('SRCDTTMP');
      DK_HS.prefix(ref_name(_dk_ref),#_dk_ref);
      {? DK_HS.first()
      || _result.State:=0;
         _result.WdrMsg+='\nPozycja jest pozycją źródłową.';
         _result.Message:='Pozycja jest pozycją źródłową.';
         {!
         |? _tab.P:=DK_HS.DK().P;
            _tab.STATS:=DK_HS.DK().STATS().N;
            _tab.add();
            DK_HS.next()
         !}
      ?};
      _result.State:=DK_HS.first()=0;
      ~~
   || _result.State:=0;
   _result.WdrMsg+='\nNie znaleziono pozycji dla przekazanego parametru.'
   ?};
   _tabt.cntx_pop()
?};
_result


\Tools4Stats
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Zwraca narzedzie do pracy ze statusami w postaci uchwytu do obiektu
::   WE: ~~
::   WY: uchwyt do obiektu narzedzia
::----------------------------------------------------------------------------------------------------------------------
:: deklaracja
_Tool:=obj_new('cntx_psh'
              ,'cntx_pop'
              ,'clear'
              ,'open_all'
              );
:: definicja
:: cntx_psh dla wszystkich tabel zwiazanych z DK_HS
_Tool.cntx_psh:="
   DK_HS.cntx_psh();
    DK_L.cntx_psh();
    DK_C.cntx_psh();
   FAP_K.cntx_psh();
      DK.cntx_psh();
      ND.cntx_psh();
      SC.cntx_psh();
~~
";
:: cntx_pop dla wszystkich tabel zwiazanych z DK_HS
_Tool.cntx_pop:="
   DK_HS.cntx_pop();
    DK_L.cntx_pop();
    DK_C.cntx_pop();
   FAP_K.cntx_pop();
      DK.cntx_pop();
      ND.cntx_pop();
      SC.cntx_pop();
~~
";
:: clear dla wszystkich tabel zwiazanych z DK_HS
_Tool.clear:="
   DK_HS.clear();
    DK_L.clear();
    DK_C.clear();
   FAP_K.clear();
      DK.clear();
      ND.clear();
      SC.clear();
~~
";
_Tool.open_all:="
   {? _>0 & type_of(_a)=2 || _mask:=_a+3; _mask1:=(1+_mask)+'__' || return(0) ?};
   _use:=\"_a.use((_a.name()-3)+_b)\";
   _use(ND   ,_mask);
   _use(DK   ,_mask);
   _use(SC   ,_mask);
   _use(DK_C ,_mask1);
   _use(DK_L ,_mask);
:   _use(DK_K ,_mask);
   _use(DK_HS,_mask);
~~
";

:: zwracamy
_Tool


\DK_HS_del4DK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: kasowanie historii statusu dla DK.ref()
::   WE: _a - DK.ref(), dla ktorego kasujemy historie
::   WY: 1/0 - powodzenie/porazka
::----------------------------------------------------------------------------------------------------------------------
_dk_ref:={? _>0 & type_of(_a)=type_of(DK.ref()) || _a || DK.ref() ?};

_result:=0;

_tabt:=exec('Tools4Stats','statexam');
{? _dk_ref<>null
|| _tabt.cntx_psh();
   _tabt.open_all(ref_name(_dk_ref)+3);
   _tabt.clear();

   {? DK.seek(#_dk_ref,ref_name(_dk_ref))
   ||
      _roln:=exec('get_par','#parametr',141);
      DK_HS.index('DK');
      DK_HS.prefix(_dk_ref);
      {? DK_HS.first()
      || {!
         |? {? _roln<>'T' | (DK.PLUS='T' & DK.SRDK<>DK.PRDK)
:: usunięcie badania dla wersji branżowej
            || DK_HS.del()
            || _badh:=DK_HS.BADH;
               DK_HS.del();
               {? _badh<>null | DK_HS.size>0
               || _wyn:=exec('del_BADH','statexam',_badh);
:: jeśli nie udało się usunąć badania to przerywamy transakcje
                  {? _wyn=0
                  || _resutl:=0;
                     _tabt.cntx_pop();
                      return(0)
                  ?};
                  _next:={? _wyn=1 & DK_HS.size>0 || 1 || 0 ?}
               || 0
               ?}
            ?}
         !}
      ?};
      _result:=DK_HS.first()=0;
      ~~
   ?};
   _tabt.cntx_pop()
?};
_result


\del_BADH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30] na podstawie exec('BADH_WER_bU','statexam')
:: OPIS: Usuniecie badania w przypadku wystąpienia powiązania tylko do BADP
::   WE: _a - DK_HS.BADH
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_del:=1;
{? _a<>null()
|| BADH.cntx_psh();
   BADH.clear();
   BADH.seek(_a);


   _txt4ask:='Czy na pewno usunąć badanie?';

   _testlink:=BADH.testlink();
   {? _testlink.first()
   || _txt4ask:='Do badania występują następujące odwołania w sytemie:'@+'\n';
      _tabelki:='#';
      {!
      |? {? _tabelki*('#'+_testlink.TABELA+'#')=0
         || {? _testlink.TABELA='BADP'
            ||          _txt4ask+='- '+'parametry badania'@+'\n'

            |? _testlink.TABELA='DK_HS' & BADH.STAN<>'Z'
            || _del:=0; _txt4ask+='- '+'badane dostawy'@+'\n'

            |? BADH.STAN<>'Z'
            || _del:=0; _txt4ask+='- '+'nieopisane odwołanie - proszę zgłosić do administratora'@+'\n'
            ?};
            _tabelki+=_testlink.TABELA+'#'
         ?};
         _testlink.next()
      !};
      {? BADH.STAN='P' || 1
      |? BADH.STAN='W' || _del:=0; _txt4ask+='Badanie zostało już wykonane.'@+'\n'
      |? BADH.STAN='Z' || _del:=0; _txt4ask+='Badanie zostało już zaakceptowane.'@+'\n'
      ?};
      {? _del
      || _txt4ask+='\n'+'Czy na pewno usunąć zestaw badań?'@
      || _txt4ask+='\n'+'Usunięcie zestawu jest niemożliwe.'@;
         _txt4ask+='\n'+'Usunięcie pozycji jest niemożliwe.'@;
         _txt4ask+='\n'+'Proszę zweryfikować zapisy w module Badania.'@
      ?}
   ?};

   {? _del
   & FUN.ask(_txt4ask)
   || BADP.cntx_psh();
      BADP.index('BADHBPAR');
      BADP.prefix(BADH.ref());
      {? BADP.first()
      || {!
         |? BADP.del()
         !}
      ?};
      BADP.cntx_pop();
      POM.cntx_psh();
      POM.TAB:='BADH';
      POM.TYPDOK:='BAD';
      numer:=BADH.NR;
      oldnumer:=1;
      exec('nr_old','numery');
      BADH.del();
      POM.cntx_pop();
      ~~
   |? _del=0
   & _txt4ask<>''
   || FUN.info(_txt4ask);
      ~~
   ?};
BADH.cntx_pop()
?};
_del


\badp_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30]
:: OPIS: po obsludze dla dokumentow relokalizacji
::   WE: STRING _a - DK.name()
::       NUMBER _b - #DK.ref()
::       DATE   _c - DK.DOST
::----------------------------------------------------------------------------------------------------------------------
_nam:={? DK.PLUS='T' || DK.name   || DK.NDK ?};
_ref:={? DK.PLUS='T' || #DK.ref() || DK.RDK ?};

{? _nam='' | _ref=0
|| _ref:=#DK.ref();
   _nam:=DK.name()
?};

{? DK.size()
|| _dkhs:=exec('zwrDK_HS','statexam',_nam,_ref,{? DK.PLUS='T' & DK.DOST<>date(0,0,0) || DK.DOST || DK.N().D ?});
   {? _dkhs<>null
   || DK_HS.cntx_psh();
      {? DK_HS.name()+3<>_nam+3
      || DK_HS.use((DK_HS.name()-3)+(_nam+3))
      ?};
      DK_HS.clear();
      {? DK_HS.seek(_dkhs)
      || {? DK_HS.BADH<>null
         || BADP.index('BADHBPAR');
            BADP.prefix(DK_HS.BADH);
            BADP.first()
         || BADP.index('BADHBPAR');
            BADP.prefix(null)
         ?}
      ?};
      DK_HS.cntx_pop()
   || BADP.index('BADHBPAR');
      BADP.prefix(null)
   ?}
|| BADP.index('BADHBPAR');
   BADP.prefix(null)
?};
grp_disp(BADP,'WERDKR',0,1)


\zwrDK_HS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JSz [12.30]
:: OPIS: zwraca rekord DK_HS zawierający powiązanie z BADH dla dostawy wg DK i daty dostawy
::   WE: STRING _a - DK.name()
::       NUMBER _b - #DK.ref()
::       DATE   _c - DK.DOST
::   WY: ostatni DK_HS.ref()
::----------------------------------------------------------------------------------------------------------------------
_nam:={? _>0 & type_of(_a)=2 || _a || return(-1) ?};
_ref:={? _>1 & type_of(_b)=1 || _b || return(-2) ?};
_dat:={? _>2 & type_of(_c)=4 || _c || return(-3) ?};

{? _nam='' | _ref=0
|| _ref:=#DK.ref();
   _nam:=DK.name()
?};

_wyn:=null();
_next:=1;
DK_HS.cntx_psh();
{? DK_HS.name()+3<>_nam+3
|| DK_HS.use((DK_HS.name()-3)+(_nam+3))
?};
DK_HS.clear();
DK_HS.index('NDKRDKDG');
DK_HS.prefix(_nam,_ref);
{? DK_HS.last()
|| {!|?
      {? DK_HS.BADH<>null & DK_HS.BADH().GET_DT>=_dat
      || _wyn:=DK_HS.ref();
         _next:=0
      ?};
      DK_HS.prev() & _next
   !}
?};
DK_HS.cntx_pop();
_wyn


\pwstnbad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed wyswietl dla BADVAR.TYP
::----------------------------------------------------------------------------------------------------------------------
_stn:=BADP.BADH().STAN;
BADVAR.STN:={? _stn='P' || 'Powołane' |? _stn='W' || 'Wykonane' |? _stn='Z' || 'Zaakceptowane' || '' ?};
''


\DK_HS_new4DK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: tworzy wpis w DK_HS dla podanych parametrow
::   WE:[_a]- DK.ref() dostawy, dla ktorej bedzie tworzony wpis, domyslnie DK.ref()
::       _b - rodzaj operacji
::       _c - komentarz
::       _d - komentarz uzytkownika
::
::          'A' - akceptacja dostawy bez zmiany statusu
::          'N' - utworzenie dostawy
::             _d - null()
::
::          'P' - podzial dostawy
::          'M' - przesuniecie dostawy
::             _e - STATS.ref() - status dostawy zrodlowej
::             _f - DK.ref() dostawy zrodlowej lub $DK.ref()
::
::          'C' - zmiana statusu
::             _d - STATS.ref() - nowy  status
::
::          'L' - zmiana statusu w wyniku badania
::          'S' - przeslanie do badania
::             _e - STATS.ref()
::             _f - BADH.ref() - badanie, ktore zmienilo lub zmieni status dostawy
::       [_g] - 1-przy akceptacji dokumentu 0(domyślnie)-nieistotne
::       [_h] - czy zaznaczono nowy kod
::
::   WY: ~~ lub ujemny numer - numer bledu
::----------------------------------------------------------------------------------------------------------------------

__:=1; _dk_ref:={? _>=__ & type_of(_[__])=type_of(DK.ref())    || _[__] || DK.ref()   ?};
__:=2;   _kind:={? _>=__ & type_of(_[__])=2 & _[__]<>''        || _[__] || return(-1) ?};
__:=3; _commeS:={? _>=__ & type_of(_[__])=2 & _[__]<>''        || _[__] || ~~ ?};
__:=4; _commeU:={? _>=__ & type_of(_[__])=2 & _[__]<>''        || _[__] || ~~ ?};

_akcdok:={? var_pres('_g')=type_of(0) || _g || 0 ?};
_nsc:={? var_pres('_h')=type_of('') || _h || 'N' ?};

_dk_src:=null();
_statold:=null();
_statnew:=null();
_twold:=date(0,0,0);
_sceanold:='';

_roln:=exec('get_par','#parametr',141);

_badanie:={? _roln='T' & _b='M'
          || exec('DKHS_badanie','statexam',_f,_akcdok)
          || null()
          ?};

{? 'AN'*_kind
|| ~~

|? 'PM'*_kind
||
   __:=5; _statnew:={?_>=__ & type_of(_[__])=type_of(STATS.ref()) || _[__] || return(-2) ?};
   __:=6;  _dk_src:={?_>=__
                    || {? type_of(_[__])=type_of(DK.ref())    || _[__]
                       |? type_of(_[__])=type_of('')          || exec('FindAndGet','#table','DK',_[__],,,null())
                                                              || return(-3)
                       ?}
                    || return(-3)
                    ?};

   {? _statnew=null() || return(-7) ?};
   {? _dk_src=null()  || return(-8) ?};
   ~~

|? 'C'*_kind
||
   __:=5; _statnew:={?_>=__ & type_of(_[__])=type_of(STATS.ref()) || _[__] || return(-4) ?};
   {? _statnew=null() || return(-7) ?};
   ~~

|? 'LS'*_kind
||
   __:=5; _statnew:={?_>=__ & type_of(_[__])=type_of(STATS.ref()) || _[__] || return(-5) ?};
   __:=6; _badanie:={?_>=__ & type_of(_[__])=type_of(BADH.ref())  || _[__] || return(-6) ?};
   {? _statnew=null() || return(-7) ?};
   ~~

|| return(~~)
?};

{? _commeS=~~
|| _commeS:={? _kind='A' || 'Akceptacja dostawy bez zmiany statusu'
            |? _kind='N' || 'Akceptacja dostawy - status domyślny'
            |? _kind='P' || 'Podział dostawy'
            |? _kind='M' || 'Przesunięcie dostawy'
            |? _kind='C' || 'Zmiana statusu dostawy'
            |? _kind='L' || 'Zmiana statusu dostawy w wyniku badania '+BADH.SYM
            |? _kind='S' || 'Przesłane do badania '+BADH.SYM
                         || ''
            ?}
?};

{? _commeU=~~
|| _commeU:=''
?};

_tabt:=exec('Tools4Stats','statexam');
{? _dk_ref<>null
|| _tabt.cntx_psh();
   _tabt.open_all(ref_name(_dk_ref)+3);
   _tabt.clear();
   {? DK.seek(#_dk_ref,ref_name(_dk_ref))
   ||
:: teraz uzupelnienie zmiennych w zaleznosci od rodzaju danych
::   FUN.wdrerror('DK_HS_new4DK/statexam.fml(881)\n');
      DK_HS.index('DK');
      DK_HS.prefix(_dk_ref);
      {? 'CLS'*_kind & DK_HS.last() || _statold:=DK_HS.STATSNEW;
                                       _twold:=DK_HS.TWNEW;
                                       _sceanold:=DK_HS.SCEANNEW; ~~
      |?  'PM'*_kind                || _statold:=_statnew;
                                       _twold:=DK_HS.TWNEW;
                                       _sceanold:=DK_HS.SCEANNEW; ~~
      |?  'AN'*_kind                || _statnew:=DK.STATS; ~~
      ?};

      DK_HS.blank();
      DK_HS.DK:=_dk_ref;
      DK_HS.NDK:=ref_name(_dk_ref);
      DK_HS.RDK:=#_dk_ref;
      DK_HS.IL:=DK.IL;
      DK_HS.IL2:={? DK.M().J2<>null() || DK.IL2 || 0 ?};
      DK_HS.STATSOLD:=_statold;
      DK_HS.STATSNEW:=_statnew;
      DK_HS.COMMENT:=_commeS;
      DK_HS.COMMENTU:=_commeU;
      DK_HS.BADH:=_badanie;
      DK_HS.KIND:=_kind;
      DK_HS.SRC_NDK:=ref_name(_dk_src);
      DK_HS.SRC_RDK:=#_dk_src;
      DK_HS.SRC_SQL:=$_dk_src;
      DK_HS.TWOLD:={? 'CLSM'*_kind
             || _twold
             |? 'P'*_kind
             || exec('FindAndGet','#table',DK,_dk_src,,"TW",_twold)
             || DK_HS.DK().TW
             ?};
      DK_HS.TWNEW:=DK_HS.DK().TW;
      DK_HS.SCEANOLD:={? 'CLSM'*_kind
             || _sceanold
             |? 'P'*_kind
             || exec('FindAndGet','#table',DK,_dk_src,,"SCEAN",_sceanold)
             || DK_HS.DK().SCEAN
             ?};
      DK_HS.SCEANNEW:=DK_HS.DK().SCEAN;
      DK_HS.NSC:=_nsc;

      {? DK_HS.add(1)
      || {? DK.STATS<>DK_HS.STATSNEW | DK.TW<>DK_HS.TWNEW
         || DK.STATS:=DK_HS.STATSNEW;
            DK.TW:=DK_HS.TWNEW;
            DK.put(1);
            ~~
         ?};
         ~~
      ?};
      ~~
   ?};
   _tabt.cntx_pop()
?};
~~


\DKHS_badanie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30]
:: OPIS: Odszukanie badania dostawy pierwotnej ( przy przesunieciach magazynowych)
::   WE: _a - DK.PRDK
::       [_b] - 1-przy akceptacji dokumentu 0(domyślnie)-nieistotne
::   WY: badanie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
_akcdok:={? var_pres('_b')=type_of(0) || _b || 0 ?};

{? _a<>''
|| DK_HS.cntx_psh();
   DK_HS.clear();
   DK_HS.index('NDKRDKDG');
   DK_HS.prefix(8+_a,BB.sqlint(_a));
   {? DK_HS.first()
   || _dkhs:=exec('lastDK_HS','statexam',8+_a,BB.sqlint(_a));
      {? _dkhs<>null
      || DK_HS.clear();
         {? DK_HS.seek(_dkhs)
         || {? DK_HS.BADH<>null & DK_HS.BADH().STAN='Z'
            || _wyn:=DK_HS.BADH
            || {? _akcdok
               ||  exec('add_kom','#message','W dokumencie występują pozycję, których dostawa jest w badaniu. '
                    'Przesunięcie niemożliwe.'@,4,,,1)
               || FUN.info('W dokumencie występują pozycję, których dostawa jest w badaniu.\nPrzesunięcie niemożliwe.'@)
               ?};
               undo()
            ?}
         ?}
      ?}
   ?};
   DK_HS.cntx_pop()
?};
_wyn


\lastDK_HS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30]
:: OPIS: zwraca ostatni rekord DK_HS zawierający powiązanie z BADH dla dostawy wg DK
::   WE: STRING _a - DK.name()
::       NUMBER _b - #DK.ref()
::   WY: ostatni DK_HS.ref()
::----------------------------------------------------------------------------------------------------------------------
_nam:={? _>0 & type_of(_a)=2 || _a || return(-1) ?};
_ref:={? _>1 & type_of(_b)=1 || _b || return(-2) ?};

{? _nam='' | _ref=0
|| _ref:=#DK.ref();
   _nam:=DK.name()
?};

_last:=null();
_next:=1;
DK_HS.cntx_psh();
DK_HS.clear();
{? DK_HS.name()+3<>_nam+3
|| DK_HS.use((DK_HS.name()-3)+(_nam+3))
?};
DK_HS.index('NDKRDKDG');
DK_HS.prefix(_nam,_ref);
{| DK_HS |!
   {? last ||
      {!|? {? BADH<>null
           || _last:=ref;
              _next:=0
           ?};
           _next & prev
      !}
   ?}
|};
DK_HS.cntx_pop();
_last


\addbadp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30]
:: OPIS: dodanie nowego nagłówka badania wraz z parametrami
::   WE: _a - DK.ref()
::       _b - DK.M
::       _c - DK.DK_C
::   WY: dodanie nowego badania lub odszukanie istniejącego
::----------------------------------------------------------------------------------------------------------------------
exec('dk_stats_hb','statexam',_b,_c)


\dk_stats_hb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: wyslanie dostaw(y) do badania
::----------------------------------------------------------------------------------------------------------------------
__:=1;    _m:={? _>=__ & type_of(_[__])=type_of(M.ref())       || _[__] || DK.M     ?};
__:=2;  _dkc:={? _>=__ & type_of(_[__])=type_of(DK.DK_C)       || _[__] || DK.DK_C  ?};
_roln:=exec('get_par','#parametr',141);

{? DK.Z='N' & DK.PLUS='T' & ND.TYP().DN<>'T'
||
    {? DK.RDK=0 || DK.RDK:=#DK.ref() ?};
    {? form(DK.NDK)='' || DK.NDK:=DK.name() ?};
    {? form(DK.PRDK)='' || DK.PRDK:=$DK.ref() ?};
    {? form(DK.SRDK)='' || DK.SRDK:=$DK.ref() ?};
    DK.put(1)
?};
{? ND.TYP().DN='T'  & (~DK.ZP & DK.PRDK<>$DK.ref() | (DK.Z='N' & _roln='T'))
|| FUN.info('Operacja niemożliwa dla dokumentu zwrotnego.\n Wykonaj kwalifikację dostawy na pierwotnej dostawie.'@)
|? _roln='N' & DK.Z='N'
|| FUN.info('Operacja niemożliwa dla niezakończonego dokumentu.'@)
|? _roln='T' | DK.Z='T'  ||  exec('ScDk2laboratory','statexam',DK,_m,_dkc)
?};
0


\ScDk2laboratory
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Wysyla dostawe do zBadania (gdy jest zaznaczenie to cala grupe, a jesli nie, to biezacy)
::   WE: _a - wskazanie na tabele SC lub DK
::       _b - wskazanie ma materiał
::   WY: 1/0
::UWAGA: praca w aktualnym kontekscie DK lub SC !!!
::----------------------------------------------------------------------------------------------------------------------
__:=1;  _baza:={? _>=__ & type_of(_[__])=type_of(SYSLOG)  || _[__] || return(_result) ?};
__:=2;  _b:={? _>=__ & type_of(_[__])=type_of(M.ref()) || _[__] || {? _baza=SC || SC.M || DK.M ?}    ?};
__:=3;  _c:={? _>=__ & type_of(_[__])=type_of({? _baza=SC|| SC.DK_C || DK.DK_C?}) || _[__] || {? _baza=SC || SC.DK_C || DK.DK_C ?} ?};

_ScDk:={? _>0
        & type_of(_a)=type_of(SYSLOG)
        & (_a=DK | _a=SC)
       || _a
       || return(0)
       ?};

_tab:=exec('T4S','statexam');
_sel:=_ScDk.sel_aget();

_ScDk.cntx_psh();
_ScDk.clear();
_ok:=1;
KOMM.init();
{? _sel.first()
|| {!
   |? {? _ScDk.seek(_sel.REF,)
      || _ok*=exec('T4S_add_DK','statexam',_tab, _ScDk.NDK, _ScDk.RDK, 'S').Result
      ?};
      _sel.next()
   !}
|| _ok*=exec('T4S_add_DK','statexam',_tab, _ScDk.NDK, {? _ScDk.RDK=0  || _refDk || _ScDk.RDK ?}, 'S').Result
?};
_ScDk.cntx_pop();
{? _ok=0 || KOMM.select('Do zbadania'@,'') ?};
echo();

_bads:=exec('FindInSet','#table','M_DOD','M_DOD',_ScDk.M,exec('firma','ustawienia'),"M_DOD.BADSEH",,,null());
_roln:=exec('get_par','#parametr',141);

{? _roln='T' & _bads<>null
|| _refDk:=#_ScDk.ref();
   _BADMSEH:=null;
   {? _bads<>null
   || BADMSEH.index('BADSEH');
      BADMSEH.prefix(_bads);
      {? BADMSEH.first()
      || _BADMSEH:=BADMSEH.ref()
      ?}
   ?}
|| _refDk:=null;
   _BADMSEH:=null
?};

{? _tab.first()
|| {? _roln<>'T'
   || exec('createLab4tabdk','statexam',_tab)
   || exec('createLab4tabdk','statexam',_tab,_bads,_BADMSEH,,_b,_c)
   ?};
   ~~
?};
exec('CleanTableData','statexam',_tab);
1


\T4S
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Tworzy tabele tymczasowa do redakcji i zmiany statusow dostaw
::   WY: tabela
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(3
::-------    aktualne wartosci C_
::           ND.SYM
             ,'C_SYM'   ,'STRING[20]' ,'Dokument'
::           DK.P
             ,'C_DKP'   ,'INTEGER'    ,'Pozycja'
::           DK.name() maska rekordu dostawy
             ,'C_NDK'   ,'STRING[8]'  ,'DK.name()'
::           #DK.ref() numer rekordu dostawy
             ,'C_RDK'   ,'INTEGER'    ,'#DK.ref()'
::           aktualny stan cenowy
             ,'C_RSC'   ,'INTEGER'    ,'#SC.ref()'
::           aktualny status dostawy
             ,'C_STS'   ,'INTEGER'    ,'#STATS.ref()'
::           ilosc na dostawie
             ,'C_ILDK'  ,'REAL'       ,'Ilość'
::           stan na dostawie
             ,'C_ILSC'  ,'REAL'       ,'Ilość'
::           aktualna ilosc wykorzystywana na dostawie
             ,'C_ILU'   ,'REAL'       ,'Ilość'
::           aktualna ilosc dostepna na dostawie
             ,'C_ILD'   ,'REAL'       ,'Ilość'
::           aktualny termin ważności na dostawie
             ,'C_TW'    ,'DATE'       ,'Termin ważności'
::           aktualna ilosc dostepna na dostawie - druga jednostka ewidencji
             ,'C_IL2'    ,'REAL'       ,'Ilość'
::           stan na dostawie - druga jednostka ewidencji
             ,'C_ILSC2'  ,'REAL'       ,'Ilość'
::           aktualna ilosc wykorzystywana na dostawie  - druga jednostka ewidencji
             ,'C_ILU2'   ,'REAL'       ,'Ilość'

::           aktualna pozycja jest zablokowana?
             ,'C_DKLOCK','INTEGER'    ,'Zablokowana?'
             ,'C_SCLOCK','INTEGER'    ,'Zablokowana?'

::-------    nowe wartosci N_
::           DK.name() nowej pozycji
             ,'N_NDK'   ,'STRING[8]'  ,'DK.name() new'
::           #DK.ref() nowej pozycji
             ,'N_RDK'   ,'INTEGER'    ,'#DK.ref() new'
::           #SC.ref()
             ,'N_RSC'   ,'INTEGER'    ,'#SC.ref() new'
::           rodzaj zmiany
             ,'N_KIND'  ,'STRING[10]' ,'Rodzaj zmian'
::           nowy status
             ,'N_STS'   ,'INTEGER'    ,'#STATS.ref()'
::           nowa ilosc na nowej dostawie (reszta trafi na pozycje potomną)
             ,'N_IL'    ,'REAL'       ,'Ilość'
::           nowy termin ważności na nowej dostawie (reszta trafi na pozycje potomną)
             ,'N_TW'    ,'DATE'       ,'Termin ważności'
::           nowa ilosc na nowej dostawie (reszta trafi na pozycje potomną) - druga jednostka ewidencji
             ,'N_IL2'    ,'REAL'       ,'Ilość'

::           badanie dla nowej dostawy
             ,'N_NBADH' ,'STRING[8]'  ,'BADH.name()'
::           badanie dla nowej  dostawy
             ,'N_RBADH' ,'INTEGER'    ,'#BADH.ref()'
::           komentarz dla nowej dostawy
             ,'N_COMM'  ,'STRING[255]','Nowy komentarz'
::           komentarz uzytkownika dla nowej dostawy
             ,'N_COMMU' ,'STRING[255]','Nowy komentarz'
::           N_ pozycja jest zablokowana?
             ,'N_DKLOCK','INTEGER'    ,'Zablokowana?'
             ,'N_SCLOCK','INTEGER'    ,'Zablokowana?'
             ,'N_NSC','STRING[1]'     ,'Nowy kod identyfikacyjny'

::-------    Nowa pozycja potomna - np po podziale L_
::           DK.name() nowej pozycji
             ,'L_NDK'   ,'STRING[8]'  ,'DK.name() new'
::           #DK.ref() nowej pozycji
             ,'L_RDK'   ,'INTEGER'    ,'#DK.ref() new'
::           #SC.ref()
             ,'L_RSC'   ,'INTEGER'    ,'#SC.ref() new'
::           rodzaj zmiany
             ,'L_KIND'  ,'STRING[10]' ,'Rodzaj zmian'
::           status nowej pozycji
             ,'L_STS'   ,'INTEGER'    ,'#STATS.ref()'
::           nowa ilosc
             ,'L_IL'    ,'REAL'       ,'Ilość'
::           nowy termin ważności
             ,'L_TW'    ,'DATE'       ,'Termin ważności'
::           nowa ilosc - druga jednostka ewidencji
             ,'L_IL2'    ,'REAL'       ,'Ilość'
::           badanie dla nowej dostawy
             ,'L_NBADH' ,'STRING[8]'  ,'BADH.name()'
::           badanie dla nowej dostawy
             ,'L_RBADH' ,'INTEGER'    ,'#BADH.ref()'
::           komentarz dla nowej dostawy
             ,'L_COMM'  ,'STRING[255]','Nowy komentarz'
::           komentarz uzytkownika dla nowej dostawy
             ,'L_COMMU' ,'STRING[255]','Nowy komentarz'

::           pozycja potomna jest zablokowana?
             ,'L_DKLOCK','INTEGER'    ,'Zablokowana?'
             ,'L_SCLOCK','INTEGER'    ,'Zablokowana?'
             ,'L_NSC','STRING[1]'     ,'Nowy kod identyfikacyjny'
::-------
::           #M.ref()  numer rekordu materialu z dostawy
             ,'M'       ,'INTEGER'    ,'#M.ref()'
             ,'M_KTM'   ,'STRING[50]' ,'Indeks'
             ,'M_N'     ,'STRING[100]','Nazwa materiału'
             ,'M_DOKL'  ,'INTEGER'    ,'M.DOKL'
             ,'M_DOKL_C','INTEGER'    ,'M.DOKL_C'

::           #MGR.ref() numer rekordu grupy materialowej materialu z dostawy
             ,'MGR'     ,'INTEGER'    ,'#MGR.ref()'
             ,'MGR_KOD' ,'STRING[8]'  ,'Grupa'
             ,'MGR_NAZ' ,'STRING[30]' ,'Nazwa grupy'
             ,'ONLY_TW' ,'INTEGER'    ,'Wyłącznie zmiana terminu'
             ,'SCEAN'   ,'STRING[30]' ,'Kod identyfikujący'
             );

:: blokada kolumn dla uzytkownika
{? sec_superuser()=0 || _tab.fld_attr(,2) ?};
:: zwracamy tabelke
_tab


\T4S_add_DK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Sprawdza i dodaje podany DK do tabeli
::   WE: TABELA  _a - uchwyt do tabeli
::       STRING  _b - DK.name()
::       NUMBER  _c - #DK.ref()
::       STRING  _d - rodzaj operacji dla N_
::       STRING  _e - rodzaj operacji dla L_
::       NUMBER [_f] - dodaj sekcje w KOMMie (domyslnie 1-tak)
::       NUMBER [_g] - 1-powiązane z przesunięciem 0(domylnie)-nie 2-z SCEAN
::       REAL   [_h] - ilość do zmiany
::   WY: wynik add()
::
::UWAGA: formuła wykorzystuje obiekt KOMM do wyświetlenia informacji
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('Result','Ref');
_result.Result:=0;
_result.Ref:=null();

__:=1; _tab:={? _>=__ & type_of(_[__])=type_of(SYSLOG) || _[__] || return(_result) ?};
__:=2; _ndk:={? _>=__ & type_of(_[__])=2               || _[__] || DK.name()       ?};
__:=3; _rdk:={? _>=__ & type_of(_[__])=1               || _[__] || #DK.ref()       ?};
__:=4; _nkn:={? _>=__ & type_of(_[__])=2               || _[__] || 'C'             ?};
__:=5; _lkn:={? _>=__ & type_of(_[__])=2               || _[__] || _nkn            ?};
__:=6; _sec:={? _>=__ & type_of(_[__])=1               || _[__] || 1               ?};
_ilzm:={? var_pres('_h')=type_of(0) & _h>0 || _h || 0 ?};
_mat:=null();
_czypal:=0;

_add2mg:={? var_pres('_g')=type_of(0) || _g || 0 ?};

_roln:=exec('get_par','#parametr',141);
_islock:=0;

_tabt:=exec('Tools4Stats','statexam');
_tabt.cntx_psh();
_tabt.open_all(_ndk+3);
_tabt.clear();

  M.cntx_psh();   M.clear();
MGR.cntx_psh(); MGR.clear();
_tab.cntx_psh();
_txt4sec:='<Nieznana dostawa>';
_sec:={? _sec=1 || KOMM.sect_beg(_txt4sec,'81#81',,1) || 0 ?};
_errno:=-1;
_ndx:=_tab.ndx_tmp(,
                  ,'C_NDK',,
                  ,'C_RDK',,
                  ,'C_RSC',,
                  );
_tab.index(_ndx);
_tab.first();
_tab.blank();
_tab.N_KIND:=_nkn;
_tab.L_KIND:=_lkn;
{? DK.seek(_rdk,_ndk)
||
   _errno:=0;
   _mat:=DK.M;
   _czypal:=DK.N().MAG().PAL='T';
   _bads:=exec('FindInSet','#table','M_DOD','M_DOD',DK.M,exec('firma','ustawienia'),"M_DOD.BADSEH",,,null());
   {? _sec>0
   || KOMM.update(_sec,'Magazyn: %1, Dostawa: %2 poz. %3'@[DK.N().MAG().SYM,DK.N().SYM,form(DK.P,,,'99')])
   ?};

:: informacje ktore mozna pobrac z DKa
   _tab.C_SYM:=DK.N().SYM;
   _tab.C_DKP:=DK.P;

   _tab.C_NDK:=DK.name();
   _tab.C_RDK:=#DK.ref();

   _tab.M:=#DK.M;
   _tab.M_KTM:=DK.M().KTM;
   _tab.M_N:=DK.M().N;
   _tab.M_DOKL:=DK.M().DOKL;
   _tab.M_DOKL_C:=DK.M().DOKL_C;

   _tab.MGR:=#DK.M().MGR;
   _tab.MGR_KOD:=DK.M().MGR().KOD;
   _tab.MGR_NAZ:=DK.M().MGR().NAZ;
   _tab.SCEAN:=DK.SCEAN;

   _tab.C_DKLOCK:=DK.r_lock(1,1);
   _islock:=_tab.C_DKLOCK;
   {? _tab.C_DKLOCK=0
   || _errno:=3;
      KOMM.add('Pozycja dostawy została zablokowana przez innego użytkownika.'@,2,,1);
      ~~
   ?};
   _tab.C_STS:=#DK.STATS;
   _tab.C_ILDK:=DK.IL;
   _tab.C_TW:=_tab.N_TW:=_tab.L_TW:=DK.TW;

   DK.cntx_psh();
   _wydania:=exec('uzycie_dostawy','magdok_wspolne',_tab.C_RDK,_tab.C_NDK
     ,exec('FindInSet','#table','M','MATKTM',_tab.M_KTM,_tab.M_KTM));
   {? _wydania.State>0
   || _tab.C_ILU:=_wydania.Result2;
      _tab.C_ILU2:=_wydania.Result3;
      ~~
   ?};
   DK.cntx_pop();
   {? DK.N().TYP().DN='T' & DK.RDK<>_rdk || _rdk:=DK.RDK; _ndk:=DK.NDK ?};
   SC.cntx_psh();
   SC.index('SN');
   SC.prefix(DK.N().MAG,DK.M,_rdk,_ndk);
   {? SC.first()
   || _tab.C_SCLOCK:=SC.r_lock(1,1);
      _islock+=_tab.C_SCLOCK;
      {? SC.A<>'T' | SC.S<=0
      || _errno:=5;
         _tab.C_RSC:=#SC.ref();
         KOMM.add('Dostawa została w całości wykorzystana.'@,2,,1)

      |? _tab.C_SCLOCK=0
      || _errno:=6;
         KOMM.add('Pozycja stanu dostawy została zablokowana przez innego użytkownika.'@,2,,1)

      |? SC.S-_tab.C_ILU<=0
      || _errno:=7;
         _tab.C_RSC:=#SC.ref();
         KOMM.add('Dostępna ilość jest w wydaniu lub zarezerwowana.'@,2,,1)

      || _tab.C_RSC:=#SC.ref();
         _tab.C_ILSC:=SC.S;
         _tab.C_ILSC2:=SC.S2;
         ~~
      ?};
      ~~
   |? DK.Z='N' & _roln<>'T'
   || _errno:=9;
      KOMM.add('Dostawa nie została zaakceptowana.'@,2,,1)
   || {? _roln<>'T'
      || _errno:=4;
         KOMM.add('Nie odnaleziono pozycji stanu dla dostawy.'@,2,,1)
      ?}
   ?};
   SC.cntx_pop();

   _l_kib:=exec('GetDK_HSLast','statexam',_rdk, _ndk, "DK_HS.KIND+$DK_HS.BADH", '');
   {? (1+_l_kib='S' | (1+_l_kib='A' & DK.Z='N' & _roln='T')) & _tab.N_KIND<>'L' & ~_add2mg
   || _errno:=8;
      _badsym:=exec('FindAndGet','#table',BADH,1-_l_kib,,"SYM",'');
      KOMM.add('Dostawa jest w trakcie badania '@+_badsym+'.',2,,1)
   ?};
   ~~
|| {? DK.Z='N' & _roln<>'T'
   || _errno:=9;
      {? _sec>0
      || KOMM.update(_sec,'Dostawa: %1 poz.%2'@[DK.N().SYM,form(DK.P,,,'99')])
      ?};
      KOMM.add('Dostawa nie została zaakceptowana.'@,2,,1)
   || _errno:=2;
      _producent:=exec('producent','#system');
      KOMM.add('Nie znaleziono dostawy, proszę zgłosić fakt do opiekuna obszaru ze strony %1.'@[_producent],81,,1)
   ?};
   ~~
?};

{? _errno=0
||
:: jeszcze uzupelnimy rekord
   _tab.C_ILD:=_tab.C_ILSC-_tab.C_ILU;
   _tab.C_IL2:=_tab.C_ILSC2-_tab.C_ILU2;
   {? exec('FindAndGet','#table',STATS,_tab.C_STS,,"KIND",'')='Z'
   || _mag:=exec('FindAndGet','#table',DK,_tab.C_RDK,_tab.C_NDK
             ,"_mag:=@.ST.MAG;
               @.ND.cntx_psh();
               @.ND.use('nagdo'+(name()+3));
               _mag:=DK.N().MAG;
               @.ND.cntx_pop();
               _mag
              ",ST.MAG);
      exec('obl_stan','magazyn_stan',exec('FindAndGet','#table',M,_tab.M,,"ref",null()),1,_mag);
      {? _tab.C_ILD>BEER.SD || _tab.C_ILD:=BEER.SD ?};
      {? _tab.C_IL2>BEER.SD2 || _tab.C_IL2:=BEER.SD2 ?}
   ?};
   _tab.N_IL:={? _ilzm>0 || _ilzm || _tab.C_ILD ?};
   _tab.N_IL2:=_tab.C_IL2;
   {? _ilzm>0 & _czypal
   || _tab.N_IL2:=_ilzm
   |? _ilzm>0 & _mat<>null()
   || _beerm:=BEER.M;
      BEER.M:=_mat;
      {? BEER.M().J2<>null()
      || _dokl:={? _mat<>null || exec('jaka_dok_m','jm',BEER.M) || 3 ?};
         _dokl_s:=exec('jaka_dok_mjm','jm',BEER.M,BEER.M().J2,BEER.M().J);
         _wsp:=exec('oblWSP','jm',BEER.M);
         {? _dokl_s<0 || _dokl_s:=_dokl ?};
         _tab.N_IL2:={? _wsp>0 || _tab.N_IL*_wsp || 0 ?} $ (_dokl_s+1)
      ?};
      BEER.M:=_beerm
   ?};
   {? _add2mg=2 || _tab.ONLY_TW:=1 ?};
   {?_tab.add(1)
   || _result.Result:=1;
      _result.Ref:=_tab.ref();
      {? _sec>0
      || _msg:=KOMM.get_msg(_sec);
         KOMM.update(_sec,_msg+' - dostawa zostanie uwzględniona.'@,'38#38')
      ?}
   ?};
   ~~
|? _errno<0
|| _result.Result:=_errno;
   {? _islock || exec('CleanTableRow','statexam',_tab) ?};
   ~~
|| {? _sec>0
   || _msg:=KOMM.get_msg(_sec);
      KOMM.update(_sec,_msg+' - dostawa nie zostanie uwzględniona.'@,'81#81')
   ?};
   exec('CleanTableRow','statexam',_tab);
   ~~
?};

{? _sec>0 || KOMM.sect_end() ?};
_tabt.cntx_pop();
 _tab.cntx_pop();
    M.cntx_pop();
  MGR.cntx_pop();
_tab.ndx_drop(_ndx);
_result


\GetDK_HSLast
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Zwraca wynik formuly dla ostatniej pozycji historii danej dostawy
::   WE: _a - #DK.ref()
::       _b - DK.name()
::       _c - FORMULA/STRING - formula do wykonania
::       _d - wartosc domyslna
::   WY: _c()
::UWAGA: Jezeli w formule beda wykorzystywane pola w zlaczeniu, nalezy zadbac o otwarcie odpowiednich masek!!!
::----------------------------------------------------------------------------------------------------------------------
__:=4; _result:={? _>=__ || _[__] || ~~ ?};

__:=1; _rdk:={? _>=__ & type_of(_[__])=1   || _[__]    || #DK.ref() ?};
__:=2; _ndk:={? _>=__ & type_of(_[__])=2   || _[__]    || DK.name() ?};
__:=3; _fml:={? _>=__ & ( type_of(_[__])=2
                       | type_of(_[__])=3
                       )                  || _[__]+'' || 'DK_HS.ref()' ?};

DK_HS.cntx_psh();
{? DK_HS.name()+3<>_ndk+3
|| DK_HS.use((DK_HS.name()-3)+(_ndk+3))
?};
DK_HS.index('NDKRDKDG');
DK_HS.prefix(_ndk,_rdk);
{? DK_HS.last()
|| _result:=($_fml)()
?};
DK_HS.cntx_pop();
_result


\CleanTableRow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Sprzata aktualny rekord T4S - odblokowuje rekordy
::   WE: TABLE _a - wskazanie na tabele T4S
::----------------------------------------------------------------------------------------------------------------------
_tab:={? _>0 & type_of(_a)=type_of(SYSLOG) || _a || return() ?};
{? _tab.C_DKLOCK || exec('FindAndGet','#table',DK,_tab.C_RDK,_tab.C_NDK                  ,"r_unlock()",0) ?};
{? _tab.C_SCLOCK || exec('FindAndGet','#table',SC,_tab.C_RSC,(5+SC.name())+(_tab.C_NDK+3),"r_unlock()",0) ?};

{? _tab.N_DKLOCK || exec('FindAndGet','#table',DK,_tab.N_RDK,_tab.C_NDK                  ,"r_unlock()",0) ?};
{? _tab.N_SCLOCK || exec('FindAndGet','#table',SC,_tab.N_RSC,(5+SC.name())+(_tab.C_NDK+3),"r_unlock()",0) ?};

{? _tab.L_DKLOCK || exec('FindAndGet','#table',DK,_tab.L_RDK,_tab.L_NDK                  ,"r_unlock()",0) ?};
{? _tab.L_SCLOCK || exec('FindAndGet','#table',SC,_tab.L_RSC,(5+SC.name())+(_tab.L_NDK+3),"r_unlock()",0) ?};
~~


\ShowDKHSrc4DK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Wyswietla dostawy 'potomne' podanej dostawy
::   WE: _a - tabela z potomnymi (utworzona w DK_HSchkDK_SRC)
::       _a - DK.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _>0
|| {? type_of(_a)=type_of(DK.ref()) || _tab:=~~; _dk_ref:=_a
   |? type_of(_a)=type_of(SYSLOG)   || _tab:=_a; _dk_ref:=~~
                                    || return(~~)
   ?};
   {? (type_of(_tab)<100 & _dk_ref<>null())
   || _tab:=exec('DK_HSchkDK_SRC','statexam',_dk_ref).Result
   |? (type_of(_tab)>100 & _tab.first()=0)
   || obj_del(_tab);
      _tab:=exec('DK_HSchkDK_SRC','statexam',_dk_ref).Result
   ?};
   {? type_of(_tab)=type_of(SYSLOG)
   || _size:=_tab.size();
      _win:=_tab.mk_sel('Dostawy utworzone z bieżącej pozycji'@,,,'#showdkhsrc4dk',,,_size+1);
      _tab.win_sel(_win);
      _tab.win_fld(_win,,'P'    ,,, 4,,,'Poz.'@);
      _tab.win_fld(_win,,'STATS',,,20,,,'Obecny status'@);
      _tab.select();
      ~~
   || return(~~)
   ?}
|| return(~~)
?};
~~


\def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definicja statusów dostaw i badań
::----------------------------------------------------------------------------------------------------------------------
_wer_btn:=BADSEH.mk_edit('Przyciski'@);
_rule:="exec('StatusyDostaw','statexam'); ''";
BADSEH.win_ebtn(_wer_btn,'text=%1,display=1'['Statusy dostaw'@],_rule);
_rule:="exec('badania_paramet','statexam'); ''";
BADSEH.win_ebtn(_wer_btn,'text=%1,display=1'['Parametry badań'@],_rule);

_wer:=BADSEH.grp_make('Źródłowe zestawy badań '@,,'askdfowhfoiwef');
BADSEH.grp_sel(_wer,,'WER',,,,,,,,,,'maximized');
BADSEH.grp_splt(_wer,,'horizontal','przyciski',20);
BADSEH.grp_edit(_wer,,_wer_btn,,,,,,'maximized');

POMOC.RODZ:='T';
BADSEH.win_sel(_wer);
BADSEH.select()


\StatusyDostaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: wyswietla slownik statusow dostaw
::----------------------------------------------------------------------------------------------------------------------
STATS.cntx_psh();
STATS.clear();
STATS.index('ANK');
{? ~STATS.first()
|| exec('nowedane','statexam')
?};
STATS.win_sel('WER');
STATS.win_edit('RED');
STATS.select();
STATS.cntx_pop();
~~


\badania_paramet
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Definicje->dotyczace eWidencji badan->Parametry
::----------------------------------------------------------------------------------------------------------------------
BADPAR.clear();
BADPAR.win_sel('WER');
BADPAR.select();
~~


\STATS_WER_bD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Dolacz w STATS.WER
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
STATS.win_edit('RED');
STATS.blank();
{? STATS.edit()
|| STATS.add()
?};
0


\STATS_WER_bP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Popraw w STATS.WER
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
_testlink:=STATS.testlink();
{? _testlink.first()
|| FUN.info('Status jest już wykorzystywany w systemie.\nRedakcja pól jest ograniczona.'@);
   STATS.win_edit('RED_NICO')
?};
{? STATS.edit()
|| STATS.put()
?};
0


\STATS_WER_bU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Usun w STATS.WER
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_testlink:=STATS.testlink();
{? 1+STATS.N='~'
|| FUN.info('''%1'' jest statusem systemowym.\nUsunięcie nie jest możliwe.'@[STATS.N]); 0
|? _testlink.first()
|| FUN.info('Status wykorzystywany w systemie.\nUsunięcie nie jest możliwe.'@); 0
|| 1
?}


\STATS_WER_bA
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Aktywny w STATS.WER
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? STATS.A='T'
 & FUN.ask('Po dezaktywacji status nie będzie dostępny do wyboru w słowniku statusów.'
           '\nCzy na pewno dezaktywować status?'@)
|| STATS.A:='N';
   STATS.put()

|? STATS.A='N'
 & FUN.ask('Czy na pewno uaktywnić status?'@)
|| STATS.A:='T';
   STATS.put()
?};
0


\stats_bfe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol w STATS
::   WE: -
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
:: wylaczamy redagowanie statusow systemowych
{? _fld='KIND' || {? 1+STATS.N='~' || 0 || 1 ?}
|? _fld='N'    || {? 1+STATS.N='~' || 0 || 1 ?}
|? _fld='ICON' || 1
?}


\stats_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed F3 pol w STATS
::   WE: -
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_fval:=fld();

{? _fld='KIND' || ~~
|? _fld='N'    || ~~
|? _fld='ICON' || {? _fval*'.png:'>0
                   | _fval=''
                  || "_bmp:='xwin16.png';
                     _bmo:='merit.bmo';";
                     _fval:=exec('ico_selall','#icon',_fval,1,1);
                     {? _fval<>''
                     || fld(_fval)
                     ?};
                     0
                  ?}
?}


\stats_afe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: po redakcji pol w STATS
::   WE: [_a] - 1-kontrola importu - add 2-kontrola importu - put , 0(domyslnie)-nie
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_ctrl:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? _ctrl
|| _res:=1;
   {? ~((';ZNO'*STATS.KIND)>1) || FUN.info('Nieprawidłowy lub brak rodzaju statusu.'@); _res:=0 ?};
   {? form(STATS.N)=''
   || FUN.info('Brak nazwy statusu.'@);
      _res:=0
   |? _ctrl=1 & (1+form(STATS.N))='~'
   || FUN.info('Nazwa nie może rozpoczynać się od znaku tyldy (~).'@);
      _res:=0
   ?};
   _res
|| _fld:=cur_afld();
   {? _fld='KIND' || {? fld()='' || FUN.emsg('Proszę wprowadzić rodzaj statusu.'@); 0 || 1 ?}
   |? _fld='N'    || fld(form(fld()));
                     {? fld()=''    || FUN.emsg('Proszę wprowadzić nazwę statusu.'@); 0
                     |? 1+fld()='~' || FUN.emsg('Nazwa nie może rozpoczynać się od znaku tyldy (~).'@); 0
                                    || 1
                     ?}
   |? _fld='ICON' || {? fld()='' || FUN.ask('Czy na pewno zakończyć edycję pola bez wyboru ikony statusu?'@) || 1 ?}
   ?}
?}


\BADPAR_bFE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol w BADPAR
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='N' || 1
?}


\BADPAR_aFE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: po redakcji pol w BADPAR
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='N' || {? form(fld())='' || FUN.info('Proszę podać nazwę parametru.'@); 0 || 1 ?}
?}


\BADPAR_WER_bP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Popraw w BADPAR.WER
::----------------------------------------------------------------------------------------------------------------------
_put:=1;

_txt4ask:='Czy na pewno usunąć parametr?'@;

_testlink:=BADPAR.testlink();
{? _testlink.first()
|| _txt4ask:='Do parametru występują następujące odwołania w sytemie:'@+'\n';
   _tabelki:='#';
   {!
   |? {? _tabelki*('#'+_testlink.TABELA+'#')=0
      || {? _testlink.TABELA='BADMSEP'
         || _put:=1; _txt4ask+='- '+'parametry zestawu badań materiału/grupy materiałowej'@+'\n'

         |? _testlink.TABELA='BADSEP'
         || _put:=1; _txt4ask+='- '+'parametry zestawu'@+'\n'

         |? _testlink.TABELA='BADP'
         || _put:=1; _txt4ask+='- '+'pozycje badań'@+'\n'

         || _put:=1; _txt4ask+='- '+'nieopisane odwołanie - proszę zgłosić do administratora'@+'\n'
         ?};
         _tabelki+=_testlink.TABELA+'#'
      ?};
      _testlink.next()
   !};
   {? _put
   || _txt4ask+='\n'+'Czy na pewno poprawiać parametr badań?'@
   || _txt4ask+='\n'+'Poprawianie parametru nie jest niemożliwe.'@
   ?};
   {? _put
    & FUN.ask(_txt4ask)
   || 1

   |? _put=0
    & _txt4ask<>''
   || FUN.info(_txt4ask);
      0
|| 0
?}

|| 1
?}


\BADPAR_WER_aP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: po Popraw w BADPAR.WER
::----------------------------------------------------------------------------------------------------------------------
1


\BADPAR_WER_bU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Usun w BADPAR.WER
::----------------------------------------------------------------------------------------------------------------------
_del:=1;

_txt4ask:='Czy na pewno usunąć parametr?'@;

_testlink:=BADPAR.testlink();
{? _testlink.first()
|| _txt4ask:='Do parametru występują następujące odwołania w sytemie:'@+'\n';
   _tabelki:='#';
   {!
   |? {? _tabelki*('#'+_testlink.TABELA+'#')=0
      || {? _testlink.TABELA='BADMSEP'
         || _del:=0; _txt4ask+='- '+'parametry zestawu badań materiału/grupy materiałowej'@+'\n'

         |? _testlink.TABELA='BADSEP'
         || _del:=0; _txt4ask+='- '+'parametry zestawu'@+'\n'

         |? _testlink.TABELA='BADP'
         || _del:=0; _txt4ask+='- '+'pozycje badań'@+'\n'

         || _del:=0; _txt4ask+='- '+'nieopisane odwołanie - proszę zgłosić do administratora'@+'\n'
         ?};
         _tabelki+=_testlink.TABELA+'#'
      ?};
      _testlink.next()
   !};
   {? _del
   || _txt4ask+='\n'+'Czy na pewno usunąć parametr badań?'@
   || _txt4ask+='\n'+'Usunięcie parametru nie jest możliwe.'@
   ?}
?};

{? _del
 & FUN.ask(_txt4ask)
|| BADPAR.del();
   ~~
|? _del=0
 & _txt4ask<>''
|| FUN.info(_txt4ask);
   ~~
?};
0


\prdispbp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed wyswietl dla BADVAR.TYP
::----------------------------------------------------------------------------------------------------------------------
BADPAR.get();
BADPAR.display();
~~


\BADSEH_bFE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol BADSEH
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='N'       || 1
|? _fld='STATS_O' || 1
|? _fld='STATS_Z' || 1
|? _fld='STATS_N' || 1
|? _fld='TTOPER'  || TTOPER.actions(TTOPER.win_dict('?'),'DPU:D');{? BADSEH.TYP='O' || 1 || 0 ?}
|? _fld='MGR' | _fld='TORP' | _fld='BAD_OP' || {? BADSEH.TYP='O' & BADSEH.TTOPER<>null() || 1 || 0 ?}
|| 1
?}


\BADSEH_aFE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol BADSEH
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();

{? _fld='STATS_O' || {? fld()=null() || FUN.info('Proszę wybrać status dla dostawy podczas badania.'@); 0
                     || 1
                     ?}
|? _fld='STATS_Z' || {? fld()=null() || FUN.info('Proszę wybrać status dla dostawy, gdy wynik będzie pozytywny.'@); 0
                     || 1
                     ?}
|? _fld='STATS_N' || {? fld()=null() || FUN.info('Proszę wybrać status dla dostawy, gdy wynik będzie negatywny.'@); 0
                     || 1
                     ?}
|? _fld='TYP'
|| {? BADSEH.TYP='M'
   || BADSEH.TTOPER:=null();
      BADSEH.MGR:=null()
   ?};
   exec('BADSEH_efld_opt','statexam');
   1
|? _fld='TTOPER'
|| {? BADSEH.TTOPER=null()
   || BADSEH.MGR:=null()
   ?};
   TTOPER.actions(TTOPER.win_dict('?'));
   exec('BADSEH_efld_opt','statexam')
|? _fld='TORP'
|| exec('BADSEH_efld_opt','statexam')
|| 1
?}


\usbadseh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: usuniecie z tabeli BADSEH + akcja grupowa
::----------------------------------------------------------------------------------------------------------------------
_tab:=BADSEH.sel_aget();
BADSEH.sel_adel();
BADSEH.cntx_psh();
_tab.clear();
{? _tab.first()
|| {? FUN.ask('Czy usunąć zaznaczone zestawy badań?'@)
   || _err:=0;
      {!
      |? {? (BADSEH.clear(); BADSEH.seek(_tab.REF,))
         || {? ~exec('badseh_wer_bu','statexam',0) || _err+=1 ?}
         ?};
         _tab.next()
      !};
      {? _err>0 || FUN.info('Nie udało się usunąć: %1 zestawów badań.'@[form(_err,,0,'99')]) ?}
   ?}
|| exec('badseh_wer_bu','statexam')
?};
BADSEH.cntx_pop();
~~


\popbadseh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Popraw tabeli BADSEH
::----------------------------------------------------------------------------------------------------------------------
exec('BADSEH_efld_opt','statexam');
{? BADSEH.edit("exec('chk_badseh','statexam',1)")
|| {? BADSEH.TTOPER=null()
   || BADSEH.TORP:='';
      BADSEH.BAD_OP:=''
   ?};
   BADSEH.put()
?};
~~


\dolbadseh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Dołącz tabeli BADSEH
::----------------------------------------------------------------------------------------------------------------------
BADSEH.blank();
exec('BADSEH_efld_opt','statexam');
{? BADSEH.edit("exec('chk_badseh','statexam',0)")
|| {? BADSEH.TTOPER=null()
   || BADSEH.TORP:='';
      BADSEH.BAD_OP:=''
   ?};
   BADSEH.add()
?};
~~


\kopbadseh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Kopiuj tabeli BADSEH
::----------------------------------------------------------------------------------------------------------------------
_base_ref:=BADSEH.ref();
exec('BADSEH_efld_opt','statexam');
{? BADSEH.edit("exec('chk_badseh','statexam',0)")
|| {? BADSEH.TTOPER=null()
   || BADSEH.TORP:='';
      BADSEH.BAD_OP:=''
   ?};
   {? BADSEH.add()
   ||
::    Kopiowanie parametrów badania
      {? BADSEH.ATEST<>'T'
      || exec('badseh_copypar','statexam',_base_ref,BADSEH.ref())
      ?}
   ?}
?};
~~


\badseh_wer_bu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Usun w BADSEH.WER
::   WE: [_a] 1-jeden rekord 0-zaznaczenie
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};

_del:=1;

_txt4ask:='Czy na pewno usunąć zestaw badań?'@;

_testlink:=BADSEH.testlink();
{? _testlink.first()
|| _txt4ask:='Do zestawu występują następujące odwołania w sytemie:'+'\n';
   _tabelki:='#';
   {!
   |? {? _tabelki*('#'+_testlink.TABELA+'#')=0
      || {? _testlink.TABELA='BADMSEH'
         || _del:=0; _txt4ask+='- '+'zestawy badań materiału/grupy materiałowej'@+'\n'

         |? _testlink.TABELA='BADSEP'
         ||          _txt4ask+='- '+'parametry zestawu'@+'\n'

         |? _testlink.TABELA='BADH'
         || _del:=0; _txt4ask+='- '+'nagłówki badań'@+'\n'

         |? _testlink.TABELA='M_DOD'
         || _del:=0; _txt4ask+='- '+'domyślny zestaw badań użyty w kartotece materiałowej'@+'\n'

         |? _testlink.TABELA='M_ATR'
         || _del:=0; _txt4ask+='- '+'nagłówki wzorca atrybutu materiału'@+'\n'

         |? _testlink.TABELA='TOPER'
         || _del:=0; _txt4ask+='- '+'zestawy dla operacji technologii'@+'\n'

         |? _testlink.TABELA='ZGP'
         || _del:=0; _txt4ask+='- '+'zestawy dla operacji przewodnika zlecenia'@+'\n'

         || _del:=0; _txt4ask+='- '+'nieopisane odwołanie - proszę zgłosić do administratora'@+'\n'
         ?};
         _tabelki+=_testlink.TABELA+'#'
      ?};
      _testlink.next()
   !};
   {? _del
   || _txt4ask+='\n'+'Czy na pewno usunąć zestaw badań?'@
   || _txt4ask+='\n'+'Usunięcie zestawu jest niemożliwe.'@
   ?}
?};

{? _del & (~_a | FUN.ask(_txt4ask))
|| BADSEP.cntx_psh();
   BADSEP.index('SEHPAR_');
   BADSEP.prefix(BADSEH.ref());
   {? BADSEP.first() || {! |? BADSEP.del() !} ?};
   BADSEP.cntx_pop();
   BADSEH.del();
   ~~
|? _a & _del=0 & _txt4ask<>''
|| FUN.info(_txt4ask);
   ~~
?};
_del


\BADSEH_WER_bR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed paRametry w BADSEH.WER
::----------------------------------------------------------------------------------------------------------------------
{? BADSEH.ATEST<>'T'
|| exec('BADSEP_select','statexam',BADSEH.ref())
|| FUN.info('Zestaw umożliwa akceptację przedmiotu badania na podstawie atestu.\nParametry nie są dostępne.'@)
?};
~~


\BADSEP_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: selekcja pozycji zestawu badan
::   WE: [_a] - BADSEH.ref(), jezeli nie podano, to aktualny
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
BADSEP.fld_fml('VALLOW','EDIT_FORMAT',"'in_prec=5'");
BADSEP.fld_fml('VALLOW','DISPLAY_FORMAT',"'out_prec=5'");
BADSEP.fld_fml('VALHIGH','EDIT_FORMAT',"'in_prec=5'");
BADSEP.fld_fml('VALHIGH','DISPLAY_FORMAT',"'out_prec=5'");
BADSEP.fld_fml('IL_CO','EDIT_FORMAT',"'in_prec=5'");
BADSEP.fld_fml('IL_CO','DISPLAY_FORMAT',"'out_prec=5'");

BADPAR.win_sel('WER');
_badseh:={?_>0 & type_of(_a)=type_of(BADSEH.ref()) || _a || BADSEH.ref() ?};
BADVAR.BADSEH:=_badseh;
BADSEH.cntx_psh();
_typ:=BADVAR.BADSEH().TYP;
BADSEH.cntx_pop();
BADSEP.cntx_psh();
BADSEP.index('SEHPAR_U');
BADSEP.prefix(_badseh);
BADSEP.first();
BADSEP.win_sel('WERR');
{? _typ='O'
|| BADSEP.win_edit('RED_OPER')
|| BADSEP.win_edit('RED')
?};
BADSEP.select();
BADSEP.cntx_pop();

BADVAR.BADSEH:=null();
~~


\badseh_wer_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Aktywny w BADSEH.WER
::----------------------------------------------------------------------------------------------------------------------
_tab:=BADSEH.sel_aget();
BADSEH.sel_adel();
BADSEH.cntx_psh();
_tab.clear();
{? _tab.first()
|| {? (_opc:=FUN.choice('Wybierz jedną z opcji dla zaznaczonych zestawów badań:'@
              ,,'Aktywacja'@,'Dezaktywacja'@,'Zmiana stanu'@)) & _opc>0
   || _err:=0;
      {!
      |? {? (BADSEH.clear(); BADSEH.seek(_tab.REF,)) & (_opc=3 | (_opc=1 & BADSEH.AKT<>'T') | (_opc=2 & BADSEH.AKT='T'))
         || {? BADSEH.AKT<>'T'
            || BADSEH.AKT:='T';
               BADSEH.put(1)
            || _link:=sql(''+"select distinct tab.TABELA from :_a tab where tab.TABELA<>'BADSEP'",BADSEH.testlink());
               {? _link.first()
               || _err+=1
               || BADSEH.AKT:='N';
                  BADSEH.put(1)
               ?};
               obj_del(_link)
            ?}
         || _err+=1
         ?};
         _tab.next()
      !};
      {? _err<>0 || FUN.info('Pominięto: %1 zaznaczonych zestawów badań.'@[form(_err,,0,'99')]) ?}
   ?}
|? BADSEH.AKT<>'T' & FUN.ask('Czy aktywować dany zestaw badań?'@)
|| BADSEH.AKT:='T';
   BADSEH.put(1)
|? BADSEH.AKT='T'
|| _link:=sql(''+"select distinct tab.TABELA from :_a tab where tab.TABELA<>'BADSEP'",BADSEH.testlink());
   {? _link.first()
   || FUN.info('Dany zestaw badań jest wykorzystywany w systemie.\nDezaktywacja niemożliwa.'@)
   |? FUN.ask('Czy dezaktywować dany zestaw badań?'@)
   || BADSEH.cntx_psh();
      BADSEH.prefix();
      BADSEH.AKT:='N';
      BADSEH.put(1);
      BADSEH.cntx_pop()
   ?};
   obj_del(_link)
?};
BADSEH.cntx_pop();
~~


\BADSEH_WER_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Przed rekord okienka WER tabeli BADSEH
::----------------------------------------------------------------------------------------------------------------------
{? BADSEH.TYP='M'
|| BADVAR.TYP_OPIS:='Magazynowy'@
|| BADVAR.TYP_OPIS:='Operacyjny'@
?};
~~


\BADSEH_WER_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Po rekord dla BADSEH
::----------------------------------------------------------------------------------------------------------------------
exec('chk_badseh','statexam',-menu_txt()='popraw')


\BADSEP_BADSEHbl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: blank BADSEP.BADSEH
::----------------------------------------------------------------------------------------------------------------------
BADVAR.BADSEH


\badsep_bfe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol w BADSEP
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='BADPAR' || 1
|? _fld='SOURCE' || 1
|? _fld='VALLOW' || {? BADSEP.BADPAR().TYP='P' | BADSEP.BADPAR().TYP='R' || 1 || 0 ?}
|? _fld='VALHIGH'|| {? BADSEP.BADPAR().TYP='P' | BADSEP.BADPAR().TYP='R' || 1 || 0 ?}
|? _fld='VALTN'  || {? BADSEP.BADPAR().TYP='W' || 1 || 0 ?}
|? _fld='CZY_DEF' || {? BADSEP.BADPAR<>null() || 1 || 0 ?}
|? _fld='DEF_CURD' || {? BADSEP.CZY_DEF='T' & BADSEP.BADPAR().TYP='D'  || 1 || 0 ?}
|? _fld='DEF_DNI' || {? BADSEP.DEF_CURD='T' || 1 || 0 ?}
|? _fld='CYKL_CO' || {? BADSEP.BADSEH().TYP='O' || 1 || 0 ?}
|? _fld='IL_CO' || {? BADSEP.CYKL_CO='T' || 1 || 0 ?}
?}


\badsep_afe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: stare sprawdzenie
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_res:=1;
{? _fld='BADPAR'
|| BADVAR.TYP:=BADPAR.TYP;
   exec('badsep_efld_opt','statexam',BADSEP)
|? _fld='CZY_DEF'
|| {? BADSEP.CZY_DEF<>'T'
   || BADSEP.DEF_CURD:='N'
   ?};
   exec('badsep_efld_opt','statexam',BADSEP)
|? _fld='CYKL_CO'
|| {? BADSEP.CYKL_CO='N'
   || BADSEP.IL_CO:=0
   ?};
   exec('badsep_efld_opt','statexam',BADSEP)
|? _fld='DEF_CURD'
|| {? BADSEP.DEF_CURD<>'T'
   || BADSEP.DEF_DNI:=0
   || BADSEP.DEF_VAL:='';
      BADVAR.DEF_D:=date(0,0,0)
   ?};
   exec('badsep_efld_opt','statexam',BADSEP)
?};
_res


\badsep_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: format wyświetlania pól w BADSEP
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_format:='';
{? _fld='DEF_DNI'
|| {? BADSEP.BADPAR().TYP='D' & BADSEP.CZY_DEF='T' & BADSEP.DEF_CURD='T'
   || _format:='empty=0'
   || _format:='empty=1'
   ?}
?};
_format


\badmsep_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: format wyświetlania pól w BADMSEP
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_format:='';
{? _fld='DEF_DNI'
|| {? BADMSEP.BADPAR().TYP='D' & BADMSEP.CZY_DEF='T' & BADMSEP.DEF_CURD='T'
   || _format:='empty=0'
   || _format:='empty=1'
   ?}
?};
_format


\BADSEP_WERbP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Popraw w BADSEP.WER
::----------------------------------------------------------------------------------------------------------------------
_testlink:=BADSEP.testlink();
exec('badsep_efld_opt','statexam',BADSEP);
{? _testlink.first()
|| FUN.ask('Parametr zestawu jest już wykorzystywany w systemie.\nCzy na pewno poprawić?'@)
|| 1
?}


\BADSEP_WERaP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: po Popraw w BADSEP.WER
::----------------------------------------------------------------------------------------------------------------------
1


\BADSEP_WERbU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Popraw w BADSEP.WER
::----------------------------------------------------------------------------------------------------------------------
_del:=1;

_txt4ask:='Czy na pewno usunąć parametr?'@;

_testlink:=BADSEP.testlink();
{? _testlink.first()
|| _txt4ask:='Do parametru występują następujące odwołania w sytemie:'@+'\n';
   _tabelki:='#';
   {!
   |? {? _tabelki*('#'+_testlink.TABELA+'#')=0
      || {? _testlink.TABELA='BADMSEP'
         || _del:=0; _txt4ask+='- '+'parametry zestawu badań materiału/grupy materiałowej'@+'\n'

         |? _testlink.TABELA='BADP'
         || _del:=0; _txt4ask+='- '+'pozycje badań'@+'\n'

         || _del:=0; _txt4ask+='- '+'nieopisane odwołanie - proszę zgłosić do administratora'@+'\n'
         ?};
         _tabelki+=_testlink.TABELA+'#'
      ?};
      _testlink.next()
   !};
   {? _del
   || _txt4ask+='\n'+'Czy na pewno usunąć parametr badań?'@
   || _txt4ask+='\n'+'Usunięcie parametru nie jest niemożliwe.'@
   ?}
?};

{? _del
 & FUN.ask(_txt4ask)
|| BADSEP.del();
   ~~
|? _del=0
 & _txt4ask<>''
|| FUN.info(_txt4ask);
   ~~
?};
0


\chkbadsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: sprawdza poprawnosc wypelnienia pol dla BADSEP
::   WE: [_a] - 'put', 'add' lub pusty string (domyślnie)
::   WY: OK-'' lub akronim pola
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_ctrl:={? var_pres('_a')=type_of('') & (+_a)=3
       || _a
       |? (6+menu_txt())='Popraw'
       || 'put'
       || 'add'
       ?};
{? BADSEP.BADPAR=null
|| FUN.info('Proszę podać parametr.'@);
   _wyn:='BADPAR'
|? BADSEP.SOURCE=''
|| FUN.info('Proszę wprowadzić domyślne źródło/metodykę pomiaru.'@);
   _wyn:='SOURCE'
|? BADSEP.BADPAR().TYP='P' & (BADSEP.VALLOW<0 | BADSEP.VALLOW >100)
|| FUN.info('''Wartość od'' jest wartością procentową i może zawierać się w zakresie od %1 do %2.'@['0','100']);
   _wyn:='VALLOW'
|? BADSEP.VALLOW>BADSEP.VALHIGH & BADSEP.VALHIGH<>0
|| FUN.info('''Wartość od'' nie może być większa od ''Wartość do''.'@);
   _wyn:='VALLOW'
|? BADSEP.BADPAR().TYP='P' & BADSEP.VALHIGH>100
|| FUN.info('''Wartość do'' jest wartością procentową i nie może być większa od %1.'@['100']);
   _wyn:='VALHIGH'
|? BADSEP.VALLOW>BADSEP.VALHIGH
|| FUN.info('''Wartość od'' nie może być większa od ''Wartość do''.'@);
   _wyn:='VALHIGH'
|? BADSEP.BADPAR().TYP='W' & BADSEP.VALTN<>'N' & BADSEP.VALTN<>'T'
|| FUN.info('''Wartość T/N'' może przyjmować tylko wartości T lub N.'@);
   _wyn:='VALTN'
|? BADSEP.CYKL_CO='T' & BADSEP.IL_CO<=0
|| FUN.info('Wartość pola \'Ilość co\' musi być większa od zera.'@);
   _wyn:='IL_CO'
?};
:: Sprawdzenie zgodności wartości domyślnej z wartościami od/do
{? _wyn='' & BADSEP.CZY_DEF='T' & (BADSEP.VALLOW<>0 | BADSEP.VALHIGH<>0)
|| _val:=exec('str2real','#convert',BADSEP.DEF_VAL);
   {? _val<BADSEP.VALLOW
   || FUN.info('Wartość domyślna nie może być mniejsza od określonej \'Wartości od\'.'@);
      _wyn:='VALLOW'
   |? _val>BADSEP.VALHIGH
   || FUN.info('Wartość domyślna nie może być większa od określonej \'Wartości do\'.'@);
      _wyn:='VALHIGH'
   ?}
?};
{? _wyn='' & _ctrl='add'
||
:: Sprawdzam czy nie zostanie naruszona unikalność klucza indeksowego
   BADSEP.cntx_psh();
   BADSEP.index('SEHPAR_U');
   BADSEP.prefix(BADSEP.BADSEH,BADSEP.BADPAR);
   {? BADSEP.first()
   || _wyn:='BADPAR';
      FUN.info('Parametr: %1 w tym zestawie już istnieje'@[BADSEP.BADPAR().N])
   ?};
   BADSEP.cntx_pop()
?};

{? _wyn='' & BADSEP.BADPAR().TYP<>'W' || BADSEP.VALTN:='' ?};
{? _wyn='' & BADSEP.CZY_DEF<>'T' || BADSEP.DEF_VAL:='' ?};
{? _wyn='' & BADSEP.CYKL_CO<>'T' || BADSEP.IL_CO:=0 ?};
{? _wyn='' & BADSEP.BADPAR().TYP<>'D' || BADSEP.DEF_CURD:='' ?};
{? _wyn='' & BADSEP.DEF_CURD<>'T' || BADSEP.DEF_DNI:=0 ?};
_wyn


\pwtypbad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed wyswietl dla BADVAR.TYP
::----------------------------------------------------------------------------------------------------------------------
BADVAR.TYP:=BADPAR.TYP;
''


\BADMSEH_MGR_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: blank BADMSEH.MGR
::----------------------------------------------------------------------------------------------------------------------
BADVAR.MGR


\BADMSEH_bFE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol w BADMSEH
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='M'       || BADVAR.M=null()
|? _fld='MGR'     || BADVAR.MGR=null()
|? _fld='BADSEH'
|| _res:=BADVAR.BADSEH=null();
   {? _res>0
   || _red:=BADSEH.win_edit('?');
::    ponieważ redagowanie jest dla jednego typu operacji, to w oknie BADSEH.RED blokujemy pole TYP oraz AKT do redakcji
      BADSEH.efld_opt(_red,'editable=grayed',,'TYP');
      BADSEH.efld_opt(_red,'editable=grayed',,'AKT');
::    usuwam akcje aktywuj/dezaktywuj
      BADSEH.actions(BADSEH.win_sel('?'),'AE')
   ?};
   _res
|? _fld='OPIS'    || 1
|? _fld='STATS_O' || {? fld()=null() || fld(BADMSEH.BADSEH().STATS_O) ?}; 1
|? _fld='STATS_Z' || {? fld()=null() || fld(BADMSEH.BADSEH().STATS_Z) ?}; 1
|? _fld='STATS_N' || {? fld()=null() || fld(BADMSEH.BADSEH().STATS_N) ?}; 1
?}


\BADMSEH_aFE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: po redakcji pol w BADMSEH
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_fld:=cur_afld();

_chk:="
       _tab:=BADMSEH;
       ( ( _tab.STATS_O<>null() & _tab.STATS_O=_tab.STATS_Z )
       | ( _tab.STATS_N<>null() & _tab.STATS_N=_tab.STATS_O )
       | ( _tab.STATS_Z<>null() & _tab.STATS_Z=_tab.STATS_N )
       )
      ";

{? _fld='M'       || {? fld()=null()  || FUN.info('Proszę wybrać materiał.'@) || _wyn:=1 ?}
|? _fld='MGR'     || {? fld()=null()  || FUN.info('Proszę wybrać grupę materiałową.'@) || _wyn:=1 ?}
|? _fld='BADSEH'  || {? fld()=null()  || FUN.info('Proszę wybrać zestaw badań.'@)
                     || {? BADMSEH.STATS_O=null() || BADMSEH.STATS_O:=BADMSEH.BADSEH().STATS_O ?};
                        {? BADMSEH.STATS_Z=null() || BADMSEH.STATS_Z:=BADMSEH.BADSEH().STATS_Z ?};
                        {? BADMSEH.STATS_N=null() || BADMSEH.STATS_N:=BADMSEH.BADSEH().STATS_N ?};
                        win_disp();
                        _wyn:=1;
::                      przywracam stan zablokowanych pól
                        _red:=BADSEH.win_edit('?');
                        BADSEH.efld_opt(_red,'editable=1',,'TYP');
                        BADSEH.efld_opt(_red,'editable=1',,'AKT');
::                      przywracam akcje
                        BADSEH.actions(BADSEH.win_sel('?'),'')
                     ?}
|? _fld='OPIS'    || {? form(fld())=''|| FUN.info('Proszę podać opis/komentarz do zestawu.'@) || _wyn:=1 ?}
|? _fld='STATS_O' || {? fld()=null()  || FUN.info('Proszę wybrać status dla dostawy podczas badania.'@)
                     |? _chk()        || FUN.info('Wybrany status występuje już w zestawie.'@)
                     || _wyn:=1
                     ?}
|? _fld='STATS_Z' || {? fld()=null()  || FUN.info('Proszę wybrać status dla dostawy, gdy wynik będzie pozytywny.'@)
                     |? _chk()        || FUN.info('Wybrany status występuje już w zestawie.'@)
                     || _wyn:=1
                     ?}
|? _fld='STATS_N' || {? fld()=null()  || FUN.info('Proszę wybrać status dla dostawy gdy wynik będzie negatywny.'@)
                     |? _chk()        || FUN.info('Wybrany status występuje już w zestawie.'@)
                     || _wyn:=1
                     ?}
?};
{? _wyn & ('M;MGR;BADSEH;'*_fld)>1
|| _arf:={? (1+menu_txt())='D' || '' || $BADMSEH.ref() ?};
   _mat:=BADMSEH.M;
   _mgr:=BADMSEH.MGR;
   _bad:=BADMSEH.BADSEH;
   BADMSEH.cntx_psh();
   BADMSEH.index('MGRMBAD');
   BADMSEH.prefix(_mgr,_mat,_bad);
   _ref:={? BADMSEH.first() || $BADMSEH.ref() || '' ?};
   BADMSEH.cntx_pop();
   {? _ref<>'' & _arf<>_ref
   || FUN.info('Istnieje już zestaw badań dotyczący pól: Grupa, Indeks, Zestaw.\nNależy to zmienić.'@);
      _wyn:=0
   ?}
?};
_wyn


\BADMSEH_M_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: blank BADMSEH.M
::----------------------------------------------------------------------------------------------------------------------
BADVAR.M


\BADMSEH_WER_bD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Dolacz w BADMSEH.WER
::----------------------------------------------------------------------------------------------------------------------
exec('fap_szuk','faktury_poz');
1


\copy_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: kopiuje parametry po akcji dolacz
::----------------------------------------------------------------------------------------------------------------------
_badMSEH:=BADVAR.BADMSEH;
_badmseh:=BADVAR.BADMSEH:=BADMSEH.ref();
BADMSEP.cntx_psh();
BADMSEP.clear();
BADMSEP.index('BADMHP');
BADMSEP.prefix(_badmseh);
{? ~BADMSEP.first()
|| exec('genMSEPfromSEP','statexam',_badmseh)
?};
BADMSEP.cntx_pop();
BADVAR.BADMSEH:=_badMSEH;
~~


\genMSEPfromSEP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: generuje BADMSEP na podstwie BADSEP
::   WE: _a - BADMSEH.ref()
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_badmseh:={? _>0 & type_of(_a)=type_of(BADMSEH.ref()) || _a || return(0) ?};
_badseh:={? _>1  & type_of(_b)=type_of(BADSEH.ref())  || _b || null()    ?};
BADMSEH.cntx_psh(); BADMSEH.clear();
{? _badseh=null()
 & _badmseh<>null()
 & BADMSEH.seek(_badmseh)
|| _badseh:=BADMSEH.BADSEH;
   ~~
?};
BADMSEH.cntx_pop();

{? _badmseh<>null()
 & _badseh<>null()
||
   BADMSEP.cntx_psh();
   BADMSEP.clear();
   BADMSEP.index('BADMHP');
   BADMSEP.prefix(_badmseh);
   BADMSEP.first();

   BADSEP.cntx_psh();
   BADSEP.clear();
   BADSEP.index('SEHPAR_');
   BADSEP.prefix(_badseh);
   {? BADSEP.first()
   || {!
      |? BADMSEP.blank();
         BADMSEP.BADMSEH:=_badmseh;
         BADMSEP.BADSEP:=BADSEP.ref();
         BADMSEP.BADPAR:=BADSEP.BADPAR;
         BADMSEP.SOURCE:=BADSEP.SOURCE;
         BADMSEP.VALLOW:=BADSEP.VALLOW;
         BADMSEP.VALHIGH:=BADSEP.VALHIGH;
         BADMSEP.VALTN:=BADSEP.VALTN;
         BADMSEP.CZY_DEF:=BADSEP.CZY_DEF;
         BADMSEP.DEF_VAL:=BADSEP.DEF_VAL;
         BADMSEP.DEF_CURD:=BADSEP.DEF_CURD;
         BADMSEP.DEF_DNI:=BADSEP.DEF_DNI;
         BADMSEP.add(1);
         BADSEP.next()
      !}
   ?};
   BADMSEP.cntx_pop();
   BADSEP.cntx_pop();
   ~~
?};
~~


\BADMSEH_WER_bP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Dolacz w BADMSEH.WER
::----------------------------------------------------------------------------------------------------------------------
_badseh:=BADMSEH.BADSEH;
_badvar:=BADVAR.BADSEH;
exec('fap_szuk','faktury_poz');
{? exec('usedBADM','statexam') || BADVAR.BADSEH:=_badseh ?};
{? BADMSEH.edit("exec('badmseh_chk','statexam')")
||
   BADMSEH.put;
   {? BADMSEH.BADSEH<>_badseh
   ||
      _badmseh:=BADMSEH.ref;
      BADMSEP.cntx_psh();
      BADMSEP.clear();
      BADMSEP.index('BADMHP');
      BADMSEP.prefix(_badmseh);
      _count:=0;
      {? BADMSEP.first()
      ||
         {!
         |?
            _count+=BADMSEP.count;
            _count=0; BADMSEP.next
         !}
      ?};
      {? _count=0 & BADMSEP.first()
      ||
         {? FUN.ask('Zmieniono źródłowy zestaw badań.'@+'\n\n'
               +
               {? BADMSEH.M
               || 'Zaktualizować parametry zestawu badań dla materiału %1?'@[BADMSEH.M().KTM]
               || 'Zaktualizować parametry zestawu badań dla grupy materiałowej %1'@[BADMSEH.MGR().KOD]
               ?})
         ||
            {! |? BADMSEP.del !};
            exec('genMSEPfromSEP','statexam',_badmseh)
         ?}
      ?};
      BADMSEP.cntx_pop()
   ?}
?};
BADVAR.BADSEH:=_badvar;
0


\badmseh_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: chk_rec tabeli BADMSEH
::----------------------------------------------------------------------------------------------------------------------
{? BADMSEH.index('?')='MGR_B_'
|| __CHK.record(BADMSEH,,'MGR','BADSEH','STATS_O','STATS_Z','STATS_N','OPIS')
|| __CHK.record(BADMSEH,,'M','BADSEH','STATS_O','STATS_Z','STATS_N','OPIS')
?}


\usbadmse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: usuniecie z tabeli BADMSEH + akcja grupowa
::----------------------------------------------------------------------------------------------------------------------
_tab:=BADMSEH.sel_aget();
BADMSEH.sel_adel();
BADMSEH.cntx_psh();
_tab.clear();
{? _tab.first()
|| {? FUN.ask('Czy usunąć zaznaczone zestawy badań?'@)
   || _err:=0;
      {!
      |? {? (BADMSEH.clear(); BADMSEH.seek(_tab.REF,))
         || exec('BADMSEH_WER_bU','statexam',0)
         ?};
         _tab.next()
      !};
      {? _err>0 || FUN.info('Nie udało się usunąć: %1 zestawów badań.'@[form(_err,,0,'99')]) ?}
   ?}
|| exec('BADMSEH_WER_bU','statexam')
?};
BADMSEH.cntx_pop();
~~


\BADMSEH_WER_bU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: paRametry w BADMSEH.WER, WERM, WERG
::   WE: [_a] 1-jeden rekord 0-zaznaczenie
::   WY: 1-usunieto 0-nie
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};

_del:=1;

_txt4ask:='Czy na pewno usunąć zestaw badań?'@;

_testlink:=BADMSEH.testlink();
{? _testlink.first()
|| _txt4ask:='Do zestawu występują następujące odwołania w sytemie:'@+'\n';
   _tabelki:='#';
   {!
   |? {? _tabelki*('#'+_testlink.TABELA+'#')=0
      || {? _testlink.TABELA='BADMSEP'
         ||          _txt4ask+='- '+'parametry zestawu'@+'\n'

         |? _testlink.TABELA='BADH'
         || _del:=0; _txt4ask+='- '+'nagłówki badań'@+'\n'

         || _del:=0; _txt4ask+='- '+'nieopisane odwołanie - proszę zgłosić do administratora'@+'\n'
         ?};
         _tabelki+=_testlink.TABELA+'#'
      ?};
      _testlink.next()
   !};
   {? _del
   || _txt4ask+='\n'+'Czy na pewno usunąć zestaw badań?'@
   || _txt4ask+='\n'+'Usunięcie zestawu jest niemożliwe.'@
   ?}
?};

{? _del & {? _a || FUN.ask(_txt4ask) || 1 ?}
|| BADMSEP.cntx_psh();
   BADMSEP.index('BADMHP');
   BADMSEP.prefix(BADMSEH.ref());
   {? BADMSEP.first() || {! |? BADMSEP.del() !} ?};
   BADMSEP.cntx_pop();
   BADMSEH.del();
   ~~
|? _a & _del=0 & _txt4ask<>''
|| FUN.info(_txt4ask);
   ~~
?};
_del


\BADMSEH_WERxbR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: paRametry w BADMSEH.WER, WERM, WERG
::----------------------------------------------------------------------------------------------------------------------
exec('BADMSEP_select','statexam',BADMSEH.ref());
~~


\BADMSEP_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: selekcja parametrow zestawu badania dla grupy/materialu
::   WE: [_a] - BADMSEH.ref()
::       [_b] - 0-bez selecta 1(domyślnie)-z selectem
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BADMSEP.fld_fml('VALLOW','EDIT_FORMAT',"'in_prec=5'");
BADMSEP.fld_fml('VALLOW','DISPLAY_FORMAT',"'out_prec=5'");
BADMSEP.fld_fml('VALHIGH','EDIT_FORMAT',"'in_prec=5'");
BADMSEP.fld_fml('VALHIGH','DISPLAY_FORMAT',"'out_prec=5'");

_badmseh:={?_>0 & type_of(_a)=type_of(BADMSEH.ref()) || _a || BADMSEH.ref() ?};
_select:={? var_pres('_b')=type_of(0) || _b || 1 ?};
{? _select
|| _badMSEH:=BADVAR.BADMSEH;
   BADVAR.BADMSEH:=_badmseh;
   BADMSEP.cntx_psh()
|| BADVAR.BADMSEH:=_badmseh
?};
BADMSEP.clear();
BADMSEP.index('BADMHP');
BADMSEP.prefix(_badmseh);
{? ~BADMSEP.first()
|| exec('genMSEPfromSEP','statexam',_badmseh)
?};
{? _select
|| BADMSEP.select();
   BADMSEP.cntx_pop();
   BADVAR.BADMSEH:=_badMSEH
?};
~~


\badmseh_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: rekord po tabeli BADMSEH
::----------------------------------------------------------------------------------------------------------------------
exec('badmseh_chk','statexam')


\BADMSEPBADMSEHb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: blank BADMSEP.BADMSEH
::----------------------------------------------------------------------------------------------------------------------
BADVAR.BADMSEH


\badmsep_bfe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol BADMSEP
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='BADSEP' || 0
|? _fld='BADPAR' || BADMSEP.BADSEP=null()
|? _fld='SOURCE' || 1
|? _fld='VALLOW' || {? BADMSEP.BADPAR().TYP='P' | BADMSEP.BADPAR().TYP='R' || 1 || 0 ?}
|? _fld='VALHIGH'|| {? BADMSEP.BADPAR().TYP='P' | BADMSEP.BADPAR().TYP='R' || 1 || 0 ?}
|? _fld='VALTN'  || {? BADMSEP.BADPAR().TYP='W' || 1 || 0 ?}
|? _fld='CZY_DEF' || {? BADMSEP.BADPAR<>null() || 1 || 0 ?}
|? _fld='DEF_CURD' || {? BADMSEP.CZY_DEF='T' & BADMSEP.BADPAR().TYP='D'  || 1 || 0 ?}
|? _fld='DEF_DNI' || {? BADMSEP.DEF_CURD='T' || 1 || 0 ?}
?}


\badmsep_afe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: stare sprawdzenie
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_res:=1;
{? _fld='BADPAR'
|| BADVAR.TYP:=BADPAR.TYP;
   exec('badsep_efld_opt','statexam',BADMSEP)
|? _fld='CZY_DEF'
|| {? BADMSEP.CZY_DEF<>'T'
   || BADMSEP.DEF_CURD:='N'
   ?};
   exec('badsep_efld_opt','statexam',BADMSEP)
|? _fld='DEF_CURD'
|| {? BADMSEP.DEF_CURD<>'T'
   || BADMSEP.DEF_DNI:=0
   || BADMSEP.DEF_VAL:='';
      BADVAR.DEF_D:=date(0,0,0)
   ?};
   exec('badsep_efld_opt','statexam',BADMSEP)
?};
_res


\BADMSEP_WERbP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Popraw dla BADMSEP.WER
::----------------------------------------------------------------------------------------------------------------------
_testlink:=BADMSEP.testlink();
exec('badsep_efld_opt','statexam',BADMSEP);
{? _testlink.first()
|| FUN.ask('Parametr zestawu jest już wykorzystywany w badaniach.\nCzy na pewno poprawiać pozycję?'@)
|| 1
?}


\BADMSEP_WERaP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: po Popraw dla BADMSEP.WER
::----------------------------------------------------------------------------------------------------------------------
1


\BADMSEP_WERbU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed usun dla BADMSEP.WER
::   WE: [_a] - 1-tylko kontrola usunięcia pozycji, 0-usunięcie (domyślnie)
::   WY: w przypadku parametru _a=1 (1-zablokowana 0-nie) lub 0
::---------------------------------------------------------------------------------------------------------------------
_res:=0;
_del:=1;
_ctrl:={? var_pres('_a')<>type_of(0) || 0 || _a ?};

_txt4ask:='Czy na pewno usunąć parametr?'@;

_testlink:=BADMSEP.testlink();
{? _testlink.first()
|| _txt4ask:='Do parametru występują następujące odwołania w sytemie:'@+'\n';
   _tabelki:='#';
   {!
   |? {? _tabelki*('#'+_testlink.TABELA+'#')=0
      || {? _testlink.TABELA='BADP'
         || _del:=0; {? _ctrl || _res:=1 ?}; _txt4ask+='- '+'pozycje badań'@+'\n'
         || _del:=0; _txt4ask+='- '+'nieopisane odwołanie - proszę zgłosić do administratora'@+'\n'
         ?};
         _tabelki+=_testlink.TABELA+'#'
      ?};
      ~_res & _testlink.next()
   !};
   {? _del
   || _txt4ask+='\n'+'Czy na pewno usunąć parametr badań?'@
   || _txt4ask+='\n'+'Usunięcie parametru nie jest niemożliwe.'@
   ?}
?};

{? ~_ctrl
|| {? _del & FUN.ask(_txt4ask)
   || BADMSEP.del();
      ~~
   |? _del=0
    & _txt4ask<>''
   || FUN.info(_txt4ask);
      ~~
   ?}
?};
_res


\chkbadsm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: sprawdza poprawnosc wypelnienia pol dla BADMSEP
::   WY: OK-'' lub akronim pola
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';

{? BADMSEP.BADPAR=null()
|| FUN.info('Proszę podać parametr.'@);
   _wyn:='BADPAR'
|? BADMSEP.SOURCE=''
|| FUN.info('Proszę wprowadzić domyślne źródło/metodykę pomiaru.'@);
   _wyn:='SOURCE'
|? BADMSEP.BADPAR().TYP='P' & (BADMSEP.VALLOW<0 | BADMSEP.VALLOW >100)
|| FUN.info('''Wartość od'' jest wartością procentową i może zawierać się w zakresie od %1 do %2.'@['0','100']);
   _wyn:='VALLOW'
|? BADMSEP.VALLOW>BADMSEP.VALHIGH & BADMSEP.VALHIGH<>0
|| FUN.info('''Wartość od'' nie może być większa od ''Wartość do''.'@);
   _wyn:='VALLOW'
|? BADMSEP.BADPAR().TYP='P' & BADMSEP.VALHIGH>100
|| FUN.info('''Wartość do'' jest wartością procentową i nie może być większa od %1.'@['100']);
   _wyn:='VALHIGH'
|? BADMSEP.VALLOW>BADMSEP.VALHIGH
|| FUN.info('''Wartość od'' nie może być większa od ''Wartość do''.'@);
   _wyn:='VALHIGH'
?};
:: Sprawdzenie zgodności wartości domyślnej z wartościami od/do
{? _wyn='' & BADMSEP.CZY_DEF='T' & (BADMSEP.VALLOW<>0 | BADMSEP.VALHIGH<>0)
|| _val:=exec('str2real','#convert',BADMSEP.DEF_VAL);
   {? _val<BADMSEP.VALLOW
   || FUN.info('Wartość domyślna nie może być mniejsza od określonej \'Wartości od\'.'@);
      _wyn:='VALLOW'
   |? _val>BADMSEP.VALHIGH
   || FUN.info('Wartość domyślna nie może być większa od określonej \'Wartości do\'.'@);
      _wyn:='VALHIGH'
   ?}
?};

{? _wyn='' & BADMSEP.BADPAR().TYP<>'W' || BADMSEP.VALTN:='' ?};
{? _wyn='' & BADMSEP.CZY_DEF<>'T' || BADMSEP.DEF_VAL:='' ?};
{? _wyn='' & BADMSEP.BADPAR().TYP<>'D' || BADMSEP.DEF_CURD:='' ?};
{? _wyn='' & BADMSEP.DEF_CURD<>'T' || BADMSEP.DEF_DNI:=0 ?};

_wyn


\createLab4tabdk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: tworzy badanie i/lub przypisuje badanie dla podanych DKow
::   WE: _a  - tabela NDKow i RDKow
::      [_b] - wskazanie na zestaw badan
::      [_c] - wskazanie na zestaw badan grupy/materialu
::      [_d] - wskazanie na badanie
::      [_e] - wskazanie na materiał
::      [_f] - wskazanie na cehce dostawy
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
__:=1;  _tab:={? _>=__ & type_of(_[__])=type_of(SYSLOG)        || _[__] || return(-1) ?};
__:=2;  _seh:={? _>=__ & type_of(_[__])=type_of(BADSEH.ref())  || _[__] || null()     ?};
__:=3; _mseh:={? _>=__ & type_of(_[__])=type_of(BADMSEH.ref()) || _[__] || null()     ?};
__:=4;  _bad:={? _>=__ & type_of(_[__])=type_of(BADH.ref())    || _[__] || null()     ?};
__:=5;    _m:={? _>=__ & type_of(_[__])=type_of(M.ref())       || _[__] || null()     ?};
__:=6;  _dkc:={? _>=__ & type_of(_[__])=type_of(DK.DK_C)       || _[__] || null()     ?};
:: jest co przetwarzac?
{? _tab.first()
|| _tabsize:=_tab.size();
   _tab.first()
|| return(-2)
?};

:: najpierw tworzymy liste indeksow i liste grup materialowych
_tab_m:=sql('select distinct M   from :_a',_tab); _tab_m.first(); _tab_mS:=_tab_m.size();
_tab_g:=sql('select distinct MGR from :_a',_tab); _tab_g.first(); _tab_gS:=_tab_g.size();

_badm:=exec('Create_badm','statexam');

BADMSEH.cntx_psh(); BADMSEH.clear();
      M.cntx_psh();       M.clear();
    MGR.cntx_psh();     MGR.clear();

{? _tab_m.first()
 & _tab_mS=1
||
   {!
   |? {? M.seek(_tab_m.M,)
      || exec('Generate_badm','statexam',_badm,M.ref(),null(),'M')
      ?};
      _tab_m.next()
   !}
?};

{? _tab_g.first()
 & _tab_gS=1
||
   {!
   |? {? MGR.seek(_tab_g.MGR,)
      || exec('Generate_badm','statexam',_badm,null(),MGR.ref(),'G')
      ?};
      _tab_g.next()
   !}
?};
      M.cntx_pop();
    MGR.cntx_pop();
BADMSEH.cntx_pop();

_roln:=exec('get_par','#parametr',141); _roln:='N';
_bads:={? _m<>null
       || exec('FindInSet','#table','M_DOD','M_DOD',_m,exec('firma','ustawienia'),"M_DOD.BADSEH",,,null())
       || null
       ?};
{? _bad=null & _roln='T'
|| _bad:=exec('BADH_WER_bD','statexam',_m)
?};

{? _bad=null() & _badm.first()
||
:: nie ma badania, prosimy o wskazanie - w razie jakby co, uzytkownik bedzie mial mozliwosc dodania badania
   {? BADH.f_set(,,''+" BADH.BADMSEH in (select SQL from :_a) AND BADH.STAN<>'Z'",_badm)
   || BADH.win_sel('WER_SEL');
      BADVAR.cntx_psh();
      VAR_DEL.delete('BadM');
      BadM:=_badm;
      BADVAR.BADHSELA:=''+"exec('BADHSELA_act','statexam','ScDk2laboratory',"+form(_tabsize,,,'99')+")";
      {? BADH.select()
      || _bad:=BADH.ref()
      ?};
      VAR_DEL.delete('BadM');
      BADVAR.cntx_pop();
      ~~
   ?};
   BADH.f_clear();
   ~~
|? _bad=null()
|| FUN.info({?_tabsize>1
            || 'Brak dostępnych wspólnych zestawów badań dla wskazanych dostaw.\n'
               'Wysłanie do zbadania podanych dostaw nie jest możliwe.'@
            || 'Brak dostępnych zestawów badań dla materiału i grupy.\n'
               'Wysłanie do zbadania podanej dostawy nie jest możliwe.'@
            ?}
           );
   0
?};
:: mamy juz badanie?
{? _bad<>null()
|| BADH.cntx_psh();
   BADH.clear();
   _stats:={? BADH.seek(_bad) || BADH.STATS_O || null() ?};
   {? _roln='T'
   || _status:={? _stats<>null
               || {? DK.N().TYP().STATS_Z='T'
                  || BADH.STATS_Z
                  |? DK.N().TYP().STATS_O='T'
                  || BADH.STATS_O
                  |? DK.N().TYP().STATS_N='T'
                  || BADH.STATS_N
                  || _stats
                  ?}
              ?};
:: jesli udało się odnaleźć parametry z istniejącego badania to je wyswietlamy wpp zakladamy nowe
      _dkcbadh:=exec('badpold','statexam',_dkc,_bad);
      {? _dkcbadh<>1 || exec('BADH_WER_bR','statexam') || exec('BADP_select','statexam',_bad) ?};
      exec('DK_HS_new4DK','statexam',DK.ref(),'S',,,_status,_bad)
   ?};
   BADH.cntx_pop();
   DK.cntx_psh();  DK.clear();
   {? _tab.first()
   || {!
      |?
         _tab.N_STS:=_stats;
         _tab.N_RBADH:=#_bad;
         _tab.N_NBADH:=ref_name(_bad);
         _tab.put(1);
         _tab.next()
      !};
      {? _tab.first()
      || _apply:=exec('T4Szapiszzmiany','statexam',_tab)
      ?}
   ?};
   DK.cntx_pop();
   ~~
|| return(-2)
?};
~~


\Create_badm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: tworzy tabelke dla GetBADMSET
::   WY: uchwyt do tabeli
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(3
       ,'MORG'  ,'STRING[1]' ,'[M] or M[G]R'
       ,'NAM'   ,'STRING[8]' ,'Nazwa'
       ,'REF'   ,'INTEGER'   ,'Ref'
       ,'SQL'   ,'STRING[16]','Sql'
       ,'MQL'   ,'STRING[16]','$M.ref()'
       ,'GQL'   ,'STRING[16]','$MGR.ref()'
       )


\Generate_badm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: generuje tabelke dla GetBADMSET - zbiera dostepne
::   WE:     TABLE [_a]- tabela wygenerowana formula Create_badm - lista BADMSEH'ow
::         M.ref() [_b] - wskazanie na material
::       MGR.ref() [_c] - wskazanie na grupe materialowa
::         STRING  [_d] - opcje dobierania zestawow
::   WY: TABLE _a - gdyby nie bylo powolanego na zewnatrz
::----------------------------------------------------------------------------------------------------------------------
  _badm:={? _>0 & type_of(_a)=type_of(SYSLOG)    || _a   || exec('Create_badm','statexam') ?};
  _Mref:={? _>1 & type_of(_b)=type_of(M.ref())   || _b   || null() ?};
_MGRref:={? _>2 & type_of(_c)=type_of(MGR.ref()) || _c   || null() ?};
   _opt:={? _>3 & type_of(_d)=type_of('')        || ~-_d || 'MG'   ?};

  M.cntx_psh();       M.clear();
MGR.cntx_psh();     MGR.clear();
BADMSEH.cntx_psh(); BADMSEH.clear();

{? _Mref<>null() || M.seek(_Mref) ?};
{? _MGRref=null() & _Mref<>null() || _MGRref:=M.MGR ?};
{? _MGRref<>null() || MGR.seek(_MGRref) ?};
:: jezeli jest grupa i mamy obslugiwac grupy
{? _opt*'G'
||
   BADMSEH.index('MMGRBAD_');
   {? _MGRref<>null() || BADMSEH.prefix(null(),_MGRref) ?};
   {? BADMSEH.first()
   || {!
      |? {? ~_badm.find_key('G',BADMSEH.name(), #BADMSEH.ref())
          & BADMSEH.M=null()
         || _badm.blank();
            _badm.MORG:='G';
            _badm.NAM:=BADMSEH.name();
            _badm.REF:=#BADMSEH.ref();
            _badm.SQL:=$BADMSEH.ref();
            _badm.GQL:=$BADMSEH.MGR;
            _badm.add()
         ?};
         BADMSEH.next()
      !}
   ?}
?};
:: jezeli jest material i mamy obslugiwac material
{? _opt*'M'
||
   BADMSEH.index('MGRMBAD_');
   {? _Mref<>null() || BADMSEH.prefix(null(),_Mref) ?};
   {? BADMSEH.first()
   || {!
      |? {? ~_badm.find_key('M',BADMSEH.name(), #BADMSEH.ref())
          & BADMSEH.MGR=null()
         || _badm.blank();
            _badm.MORG:='M';
            _badm.NAM:=BADMSEH.name();
            _badm.REF:=#BADMSEH.ref();
            _badm.SQL:=$BADMSEH.ref();
            _badm.MQL:=$BADMSEH.M;
            _badm.add()
         ?};
         BADMSEH.next()
      !}
   ?}
?};

BADMSEH.cntx_pop();
    MGR.cntx_pop();
      M.cntx_pop();
_badm


\BADH_WER_bD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Dolacz w BADH WER
::   WE: _a - wskazanie ma materiał
::   WY: 0/BADH.ref
::----------------------------------------------------------------------------------------------------------------------
__:=1;    _m:={? _>=__ & type_of(_[__])=type_of(M.ref())       || _[__] || DK.M     ?};

{? _>=1 || {? type_of(_a)<>7 || _a:=null ?} || _a:=null ?};

{? ~exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK')
|| FUN.info('Użytkownik nie ma uprawnień do powoływania badań.'@);
   return(0)
?};

_roln:={? _a<>null || exec('get_par','#parametr',141) || 'N' ?};
_bads:={? _a<>null
       || exec('FindInSet','#table','M_DOD','M_DOD',_a,exec('firma','ustawienia'),"M_DOD.BADSEH",,,null())
       || null
       ?};
:: Obszar badań i kwalifikacji dostaw
{? FILTER.TMP<>'O'
||
   {? _roln<>'T'
   || _badmset:=exec('GetBADMSET','statexam'
                    ,{? var_pres('BadM')>100
                     || BadM
                     || exec('Generate_badm','statexam',BADVAR.M,BADVAR.MGR,'MG')
                     ?},_bads)
   || _badmset:=exec('GetBADMSET','statexam',exec('Generate_badm','statexam',,_m,,'M'),_bads)
   ?};
   {? _badmset=null & _roln='T'
   || _badmset:=exec('GetBADMSET','statexam'
                    ,{? var_pres('BadM')>100
                     || BadM
                     || exec('Generate_badm','statexam',BADVAR.M,BADVAR.MGR,'MG')
                     ?},_bads)
   ?};

   BADMSEH.cntx_psh();
   BADMSEH.clear();
   _bad:=null;

   {? _badmset=null
   || {? _roln<>'T'
      || FUN.info('Nie zdefiniowano zestawów badań.'@)
      || FUN.info('Indeks nie posiada domyślnego zestawu badań.\n'
                  'Proszę uzupełnić dane w kartotece materiałowej.'@)
      ?}
   |? _badmset<>null()
      & BADMSEH.seek(_badmset)
   || _bad:=exec('BADH_add_new','statexam',_badmset,null(),~(_roln='T'))
   ?};
   BADMSEH.cntx_pop();
   {? _roln<>'T'
   || 0
   || {? _bad<>null || _bad || 0 ?}
   ?}
||
:: Obszar badań do operacji zleceń
   BADSEH.cntx_psh();
   BADSEH.index('AN');
   BADSEH.prefix('O');
   _bad:=exec('BADH_add_new','statexam',null,null,~(_roln='T'));
   {? _bad<>null || BADH.seek(_bad) ?};
   BADSEH.cntx_pop();
   {? _roln<>'T'
   || 0
   || {? _bad<>null || _bad || 0 ?}
   ?}
?}


\GetBADMSET
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Zwraca wybrany BADMSET z podanych w _a
::   WE: _a - tabela wygenerowana formula Create_badm - lista BADMSEH'ow
::       _b - ref BADSEH lub null
::   WY: BADMSET.ref()/null()
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>7 || _b:=null ?} || _b:=null ?};

_result:=null();

_roln:='N';

_badm:={?_>0 & type_of(_a)=type_of(SYSLOG)
       || _a
       || _roln:=exec('get_par','#parametr',141);
          exec('Generate_badm','statexam')
       ?};
_bads:=_b;

      M.cntx_psh();       M.clear();
    MGR.cntx_psh();     MGR.clear();
BADMSEH.cntx_psh(); BADMSEH.clear();
 BADSEH.cntx_psh();  BADSEH.clear();

_tab:=tab_tmp(4
             ,'PARENT'  ,'TREE_REF'   ,'Rodzic'
             ,'LABEL'   ,'STRING[40]' ,''
             ,'COMMENT' ,'STRING[100]',''
             ,'NAM'     ,'STRING[8]'  ,'BADMSEH.name()'
             ,'REF'     ,'INTEGER'    ,'#BADMSEH.ref()'
             ,'ATEST'   ,'STRING[1]'  ,'Atest'
             ,'M_KTM'   ,'STRING[100]','Indeks'
             ,'MGR_KOD' ,'STRING[20]' ,'Grupa'
             ,'ICON'    ,'STRING[16]' ,'Ikona'
             );

{? sec_superuser()=0 || _tab.fld_attr(,2) ?};

:: teraz bedziemy zasilac tabelke na podstawie _badm

_tab_m:=sql('select distinct MQL from :_a where MQL<>''''',_badm); _tab_m.first();_tab_mS:=_tab_m.size();_tab_m.first();
_tab_g:=sql('select distinct GQL from :_a where GQL<>''''',_badm); _tab_g.first();_tab_gS:=_tab_g.size();_tab_g.first();

_labelM:='';
_flablM:="";
{? _tab_mS=1
|| M.seek(BIT.sqlint(_tab_m.MQL+8),form(8+_tab_m.MQL));
   _labelM:='Zestawy dla materiału '+M.KTM;
   _flablM:="BADMSEH.BADSEH().N";
   ~~
|? _tab_mS>1
|| _labelM:='Zestawy dla materiałów';
   _flablM:="BADMSEH.BADSEH().N+'  ['+BADMSEH.M().KTM+']'";
   ~~
?};

_labelG:='';
_flablG:="";
{? _tab_gS=1
|| MGR.seek(BIT.sqlint(_tab_g.GQL+8),form(8+_tab_g.GQL));
   _labelG:='Zestawy dla grupy materiałowej '+MGR.KOD;
   _flablG:="BADMSEH.BADSEH().N";
   ~~
|? _tab_gS>1
|| _labelG:='Zestawy dla grup materiałowych';
   _flablG:="BADMSEH.BADSEH().N+'  ['+BADMSEH.MGR().KOD+']'";
   ~~
?};

_rootM:={? _tab_mS>0
        || _tab.LABEL:=_labelM;
           _tab.ICON:='xwin16.png:190';
           {? _tab.add(1)
           || #_tab.ref()
           ?}
        ?};

_rootG:={? _tab_gS>0
        || _tab.LABEL:=_labelG;
           _tab.ICON:='xwin16.png:190';
           {? _tab.add(1)
           || #_tab.ref()
           ?}
        ?};
:: przepisujemy dane
_badm.clear();
_msiz:=0;
{? _badm.first()
|| {!
   |?
      {? BADMSEH.seek(_badm.REF, _badm.NAM)
       & BADMSEH.BADSEH().AKT<>'N'
       & ( (_badm.MORG='M' & BADMSEH.MGR=null())
         | (_badm.MORG='G' & BADMSEH.M=null())
         )
       & {? _bads<>null || BADMSEH.BADSEH=_bads || 1 ?}
      || _msiz+=1;
         _tab.blank(1);

         {? _badm.MORG='M' || _tab.LABEL:=_flablM(); _tab.PARENT:=_rootM; ~~
         |? _badm.MORG='G' || _tab.LABEL:=_flablG(); _tab.PARENT:=_rootG; ~~
         ?};

         _tab.COMMENT:=BADMSEH.OPIS;
         _tab.NAM:=BADMSEH.name();
         _tab.REF:=#BADMSEH.ref();
         _tab.ATEST:=BADMSEH.BADSEH().ATEST;
         _tab.MGR_KOD:=BADMSEH.MGR().KOD;
         _tab.M_KTM:=BADMSEH.M().KTM;
         _tab.ICON:='xwin16.png:33';
         _tab.add();
         ~~
      ?};
      _badm.next()
   !}
?};

:: jezeli sa rekordy
{? _tab.first()
|| _tsiz:=_tab.size();
   _tab_nam:='';
   _tab_ref:=0;
   _len_tab:=(_tsiz-((_rootM<>null())+(_rootG<>null)));

   {? _len_tab=1 & _bads<>null
   || _tab.clear(); _tab.last();
      _tab_nam:=_tab.NAM;
      _tab_ref:=_tab.REF;
      ~~
   |? _len_tab>0
   || _win:=_tab.mk_sel('Dostępne zestawy badań'@,'P',0,'#getbadmset4m',,1,{?_tsiz>30|| 30 || _tsiz?},1);

      _tab.win_sel(_win);
      _tab.win_fld(_win,,'LABEL');

      _tab.win_act(_win,,'Formuła','Wybierz'@@,,,"{? cur_tab(1,1).REF>0
                                            || sel_exit()
                                            || FUN.info('Pozycja grupująca - wybór niedostępny.'@)
                                            ?}
                                           ",,1);
      _tab.win_act(_win,,'Kolejność');
      _tab.win_act(_win,,'Szukaj');
      _tab.win_act(_win,,'Okienko',,,,"exec('zwrw_all','#tree',cur_tab(1,1),'PARENT')");
      _tab.win_fml(_win,,'LABEL'  ,,'ICON_BEFORE',"cur_tab(1,1).ICON");
      _tab.win_sopt(_win,'select_record_checkbox=0');

      {? _roln<>'T'
      || {? _tab.select()
         || _tab_nam:=_tab.NAM;
            _tab_ref:=_tab.REF;
            ~~
         ?}
      || {? _tab.first()
         || {!
            |? {? _tab.REF>0
               || _tab_nam:=_tab.NAM;
                  _tab_ref:=_tab.REF;
                  ~~
               ?};
               _tab.next()
            !}
         ?};
         ~~
      ?}
   || FUN.info('Brak aktywnych zestawów badań.'@)
   ?};
   {? _tab_ref>0
    & _tab_nam<>''
   || BADMSEH.cntx_psh();
      BADMSEH.clear();
      {? BADMSEH.seek(_tab_ref, _tab_nam)
      || _result:=BADMSEH.ref()
      ?};
      BADMSEH.cntx_pop();
      ~~
   ?};
   ~~
?};
BADMSEH.cntx_pop();
 BADSEH.cntx_pop();
    MGR.cntx_pop();
      M.cntx_pop();
_result


\BADH_add_new
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: tworzy nowe badanie
::   WE: _a  - BADMSEH.ref() - wskazanie na zestaw badan materiału, grupy
::       _b  - BADSEH.ref()  - wskazanie na zestaw badań ogólny
::       _c  - INTEGER - 0/1 - interakcja z uzytkownikiem?
::      [_d] - REAL - dla badań operacyjnych, ilość w badaniu
::      [_e] - ZL.ref() - dla badań operacyjnych, zlecenie z którego pochodzi operacja
::      [_f] - STRING - opis który umieścić w polu UWAGI
::      [_g] - ZGP.ref() - dla badań operacyjnych, pozycja przewodnika z którego pochodzi operacja
::      [_h] - INTEGER - Czy przepisać parametry badania bez pytania [0]/1
::   WY: BADH.ref()
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
:: TODO: nie spradzać roli, gdy operacyjne
{? ~exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK'); 0 || return(_result) ?};

_badmseh:={? var_pres('_a')=type_of(BADMSEH.ref()) || _a || null() ?};
 _badseh:={? var_pres('_b')=type_of(BADSEH.ref())  || _b || null() ?};
   _edit:={? var_pres('_c')=type_of(0)             || _c || 1 ?};
  _ilosc:={? var_pres('_d')=type_of(0)             || _d || 0 ?};
     _zl:={? var_pres('_e')=type_of(ZL.ref())      || _e || null() ?};
  _uwagi:={? var_pres('_f')=type_of('')            || _f || '' ?};
    _zgp:={? var_pres('_g')=type_of(ZGP.ref())     || _g || null ?};
_genbadp:={? var_pres('_h')=type_of(0)             || _h || 0 ?};

BADH.cntx_psh();
BADH.clear();
BADH.blank();
BADH.memo_set('','UWAGI');
{? _badmseh<>null()
||
   {? exec('get_par','#parametr',141)='T' & DK.PLUS='T'
   || BADH.GET_DT:=DK.N().D
   ?};
   BADH.BADMSEH:=_badmseh;
   BADH.BADSEH:=BADH.BADMSEH().BADSEH;
   BADH.TYP:=BADH.BADMSEH().BADSEH().TYP;
   BADH.STATS_O:=BADMSEH.STATS_O;
   BADH.STATS_N:=BADMSEH.STATS_N;
   BADH.STATS_Z:=BADMSEH.STATS_Z
|? _badseh<>null()
|| BADH.BADSEH:=_badseh;
   BADH.TYP:=BADH.BADSEH().TYP;
   BADH.STATS_O:=BADH.BADSEH().STATS_O;
   BADH.STATS_N:=BADH.BADSEH().STATS_N;
   BADH.STATS_Z:=BADH.BADSEH().STATS_Z;
   BADH.AUTO:= {? _edit=1 || 'N' || 'T' ?};
   {? _zgp<>null()
   ||
      BADH.ZL:=exec('FindAndGet','#table',ZGP,_zgp,,"ZL",null);
      BADH.ZGH:=exec('FindAndGet','#table',ZGP,_zgp,,"NRPRZ",null);
      BADH.PLACE:=exec('FindAndGet','#table',ZGP,_zgp,,"PLACE",null);
      BADH.ZGP:=_zgp
   ?}
|? _badmseh=null & _badseh=null
||
::   Badanie operacyjne dołączane z obszaru Badania do operacji zleceń
   BADH.TYP:='O';
   BADH.AUTO:={? _edit=1 || 'N' || 'T' ?}
?};
{? _zgp=null()
|| {? _zl<>null()
   || BADH.ZL:=_zl
   ?}
?};
{? _uwagi<>''
|| BADH.memo_set(_uwagi,'UWAGI')
?};

{? BADH.add()
|| {? _uwagi<>''
   || BADH.memo_put(,'UWAGI')
   ?};
   {? BADH.r_lock(1,1,1)
   || POM.cntx_psh();
      exec('add_grnr','numery','BAD');
      POM.TAB:='BADH';
      POM.TYPDOK:='BAD';
      BADH.NR:=exec('numer_new','numery');
      _del:=1;
      _p8821:=exec('get','#params',8821,2,OPERATOR.USER);
      {? exec('znak','numery','BADH')
      || exec('badh_set_efld_opt','statexam','RED');
         {? BADH.TYP='O'
         || BADH.win_edit('RED_OPER');
            exec('badh_set_efld_opt','statexam','RED_OPER');
            _env_guide:=exec('env_guide','zl_guide');
            params_set('env_guide',_env_guide)
         || BADH.win_edit('RED')
         ?};
         {? BADH.put()
          & ( _edit=0
            | ( BADH.edit("exec('badh_chk','statexam')")
              & BADH.put() & BADH.memo_put(,'UWAGI')
              )
            )
         || {? _genbadp>0 | BADH.TYP='O' | _p8821='T' | do_state()>0 | FUN.ask('Czy przepisać parametry badania?'@)
            || exec('genBADPfromMSEP','statexam',BADH.ref(),_ilosc)
            ?};
            {? BADH.TYP='O' & BADH.AUTO='N'
            || BADH.STATS_O:=BADH.BADSEH().STATS_O;
               BADH.STATS_N:=BADH.BADSEH().STATS_N;
               BADH.STATS_Z:=BADH.BADSEH().STATS_Z;
               BADH.put()
            ?};
            _result:=BADH.ref();
            {? BADH.AUTO='T' || BADVAR.BADH:=BADH.ref() ?};
            BADH.f_rfresh();
            _del:=0;
            ~~
         || _del:=1
         ?};
         {? BADH.TYP='O'
         || BADH.efld_opt('RED_OPER','editable=1',,'ZGH','NRPRZ');
            BADH.efld_opt('RED_OPER','editable=1',,'ZGP','NRP')
         ?}
      ?};
      POM.cntx_pop();
      BADH.r_unlock();
      {? _del
      ||
         {? BADH.NR>0
         || POM.cntx_psh();
            POM.TAB:='BADH';
            POM.TYPDOK:='BAD';
            numer:=BADH.NR;
            oldnumer:=1;
            exec('nr_old','numery');
            POM.cntx_pop()
         ?};
         BADH.del(1,1)
      ?};
      ~~
   || BADH.del(1,1)
   ?}
?};
BADH.cntx_pop();
_result


\badh_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: chk_rec tabeli BADH
::----------------------------------------------------------------------------------------------------------------------
{? BADH.TYP='O'
|| {? BADH.BADSEH=null
   || FUN.info('Pole "Zestaw źródłowy" musi być wypełnione. \nNależy uzupełnić brakujące informacje'@);
     'BADSEH'
   |? BADH.ZGP=null
   || FUN.info('Pole "Operacja" musi być wypełnione. \nNależy uzupełnić brakujące informacje'@);
::     Potrzebne żeby wrócić do odpowiedniego pola złączeniowego
      BADH.efld_opt(cur_win(),'editable=0',,'ZGP','NRP');
      'ZGP'
   || 1
   ?}
||
   {? BADH.BADSEH().ATEST='T'
   || __CHK.record(BADH,,'STATS_O','STATS_Z','STATS_N','ATEST')
   || __CHK.record(BADH,,'STATS_O','STATS_Z','STATS_N')
   ?}
?}


\genBADPfromMSEP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: generuje BADP na podstwie BADMSEP lub BADSEP
::   WE: _a - BADH.ref()
::      [_b] - REAL - dla badań operacyjnych, ilość w badaniu (do obsługi parametrów cyklicznych)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_badh:={? _>0 & type_of(_a)=type_of(BADH.ref())    || _a || return(0) ?};
_ilosc:={? var_pres('_b')=type_of(0) || _b || 0 ?};
   BADH.cntx_psh();    BADH.clear();
BADMSEH.cntx_psh(); BADMSEH.clear();

_badmseh:=null();
_badseh:=null();
_typ:='';
_zgp:=null();
{? BADH.seek(_badh)
|| _badmseh:=BADH.BADMSEH;
   _badseh:=BADH.BADSEH;
   _typ:=BADH.TYP;
   _zgp:=BADH.ZGP;
   ~~
|| _badh:=null();
   ~~
?};
   BADH.cntx_pop();
BADMSEH.cntx_pop();

BADPAR.cntx_psh();
{? _badh<>null()
|| BADP.cntx_psh();
   BADP.index('BADHBPAR');
   BADP.prefix(_badh);
   BADP.first();
:: teraz ustawiamy sie na zrodlo parametrow
   {? _badmseh<>null()
   ||
      BADMSEP.cntx_psh();
      BADMSEP.index('BADMHP');
      BADMSEP.prefix(_badmseh);
      {? ~BADMSEP.first() || exec('genMSEPfromSEP','statexam',_badmseh) ?};
      {? BADMSEP.first()
      || {!
         |?
            BADP.blank();
            BADP.BADH:=_badh;
            BADP.BADSEP:=null();
            BADP.BADMSEP:=BADMSEP.ref();
            BADP.BADPAR:=BADMSEP.BADPAR;
            BADP.BADPAR();
::          Wyznaczenie wartości domyślnej
            _war:='';
            _value:=0;
            {? BADMSEP.CZY_DEF='T'
            || _war:=BADMSEP.DEF_VAL;
               {? BADPAR.TYP='W'
               || _value:={? _war='T' || 1 || 0 ?}
               |? BADPAR.TYP='S'
               || _value:=0
               |? BADPAR.TYP='D'
               || {? BADMSEP.DEF_CURD='T'
                  ||
::                   Wyznaczenie wartości domyślnej na podstawie bieżącej daty
                     _war:=(date()+BADMSEP.DEF_DNI)$1
                  ?};
                   _value:=#(exec('str2date','#convert',_war))
               |? BADPAR.TYP='R' | BADPAR.TYP='P'
               || _value:=exec('str2real','#convert',_war)
               ?};
               BADP.WAR:=_war;
               BADP.VALUE:=_value
            ?};
            BADP.add(1);
            BADMSEP.next()
         !}
      ?};
      BADMSEP.cntx_pop();
      ~~
   |? _badseh<>null()
   ||
      ZGP.cntx_psh();
      ZGP.prefix();
      BADSEP.cntx_psh();
      BADSEP.index('SEHPAR_');
      BADSEP.prefix(_badseh);
      {? BADSEP.first()
      || {!
         |?
::          Sprawdzenie, czy parametr generowany jest cyklicznie
            _czy_cykl:=0;
            _il_par:=1;
            _il_done:=0;
            _il_base:=0;
            _jm:='';
            _czy_cykl:=_typ='O' & BADSEP.CYKL_CO='T' & BADSEP.IL_CO>0 & _ilosc>0;
            {? _czy_cykl>0
            ||
::             Sprawdzenie, ile parametrów dotychczas wygenerowano cyklicznie
               BADP.cntx_psh();
               BADP.index('BADHZGP');
               BADP.prefix('O',_badseh,_zgp,BADSEP.ref(),'N',);
               {? BADP.first()
               || _il_done:=BADSEP.IL_CO*BADP.size()
               ?};
               BADP.cntx_pop();
               _zgp_il:=exec('FindAndGet','#table',ZGP,_zgp,,"IL+IL_BRAK+DEK_IL+DEK_BR",0);
               _zlgd_il:=_ilosc;
               _il_max:=ceil(_zlgd_il/BADSEP.IL_CO);
               _il_base:=floor((_zgp_il-_zlgd_il)/BADSEP.IL_CO)*BADSEP.IL_CO;
::             Wyznaczenie wymaganej liczby powtórzeń parametru dla obecenego badania (rejestracji)
               _il_par:=floor((_zgp_il-_il_done)/BADSEP.IL_CO);
               {? _il_par>_il_max || _il_par:=_il_max ?};
               {? ZGP.seek(_zgp)
               || ZL.cntx_psh(); M.cntx_psh(); JM.cntx_psh();
                  _jm:=ZGP.ZL().KTM().J().KOD;
                  ZL.cntx_pop(); M.cntx_pop(); JM.cntx_pop()
               ?}
            ?};
            {? _il_par>0
            || BADP.blank();
               BADP.BADH:=_badh;
               BADP.BADMSEP:=null();
               BADP.BADSEP:=BADSEP.ref();
               BADP.BADPAR:=BADSEP.BADPAR;
               BADP.BADPAR();
::             Wyznaczenie wartości domyślnej (pomijane podczas generowania elementów dla parametrów cyklicznych)
               _war:='';
               _value:=0;
               {? BADSEP.CZY_DEF='T'
               || _war:=BADSEP.DEF_VAL;
                  {? BADPAR.TYP='W'
                  || _value:={? _war='T' || 1 || 0 ?}
                  |? BADPAR.TYP='S'
                  || _value:=0
                  |? BADPAR.TYP='D'
                  || {? BADSEP.DEF_CURD='T'
                     ||
::                      Wyznaczenie wartości domyślnej na podstawie bieżącej daty
                        _war:=(date()+BADSEP.DEF_DNI)$1
                     ?};
                      _value:=#(exec('str2date','#convert',_war))
                  |? BADPAR.TYP='R' | BADPAR.TYP='P'
                  || _value:=exec('str2real','#convert',_war)
                  ?};
                  {? _il_par>1
                  || BADP.CZY_NAG:='T'
                  || BADP.WAR:=_war;
                     BADP.VALUE:=_value;
                     {? _czy_cykl>0
                     || _comment:='Po %1 %2'@[$(_il_base+BADSEP.IL_CO),_jm];
                        BADP.COMMENT:=_comment
                     ?}
                  ?}
               ?};
               {? BADP.add(1)
               ||
::                Generowanie elementów pozycji dla parametrów cyklicznych
                  {? _czy_cykl>0 & _il_par>1
                  || _parent:=BADP.uidref();
                     {! _i:=1.._il_par
                     |!
                        BADP.blank();
                        BADP.BADH:=_badh;
                        BADP.BADMSEP:=null();
                        BADP.BADSEP:=BADSEP.ref();
                        BADP.BADPAR:=BADSEP.BADPAR;
                        BADP.PARENT:=_parent;
::                      Przypisanie wartości domyślnej (już wcześniej wyliczona)
                        {? BADSEP.CZY_DEF='T'
                        || BADP.WAR:=_war;
                           BADP.VALUE:=_value
                        ?};
                        _comment:='Po %1 %2'@[$(_il_base+(_i*BADSEP.IL_CO)),_jm];
                        BADP.COMMENT:=_comment;
                        BADP.add(1)
                     !}
                  ?}
               ?}
            ?};
            BADSEP.next()
         !}
      ?};
      BADSEP.cntx_pop();
      ZGP.cntx_pop();
      ~~
   ?};
:: wracamy
   BADP.cntx_pop();
   ~~
?};
BADPAR.cntx_pop();
~~


\BADHSELA_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: akcja dla BADVAR.BADHSELA
::   WE: STRING _a - wariant
::       ANY   [_b] - parametr zalezny od wariantu
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_wariant:={?_>0 & type_of(_a)=2 || _a || return(0) ?};

{? _wariant='ScDk2laboratory'
|| _tabsize:={?_>1 & type_of(_b)=1 || _b || 1 ?};
   {? BADH.STAN='P'
   || {? FUN.ask(
            {? _tabsize>1
            || 'Wysłać dostawy do wskazanego badania?'@
            || 'Wysłać dostawę do wskazanego badania?'@
            ?}
         )
      || sel_exit()
      ?}

   |? BADH.STAN='W'
   || {? FUN.ask(
            'Badanie zostało już przeprowadzone.'@+'\n'+
            {? _tabsize>1
            || 'Czy na pewno wysłać dostawy do wskazanego badania?'@
            || 'Czy na pewno wysłać dostawę do wskazanego badania?'@
            ?}
         )
      || sel_exit()
      ?}

   |? BADH.STAN='Z'
   || FUN.info(
         'Badanie jest już zaakceptowane.'@+'\n'+
         {? _tabsize>1
         || 'Wysłanie dostaw do tego badania nie jest możliwe.'@
         || 'Wysłanie dostawy do tego badania nie jest możliwe.'@
         ?}
      );
      0
   ?}
?}


\badpold
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30]
:: OPIS: Szukamy ostatniego badania dla podanego DK.DK_C, przepisujemy stare parametry do nowego badania
::   WE: _a - DK.DK_C
::       _b - BADH.ref (nagłówek nowego badania)
::   WY: 1/0  1 - są pozycje i przepisaliśmy ze starego badania, 0 - nie ma pozycji zakładamy nowe
::----------------------------------------------------------------------------------------------------------------------
__:=1;    _dkc:={? _>=__ & type_of(_[__])=type_of(DK.DK_C)       || _[__] || null()     ?};

_wyn:=0;
DK_HS.cntx_psh();
DK_HS.index('DKDKC');
DK_HS.prefix(_a);
{? DK_HS.first()
|| _dkhs:=exec('lastDK_HS','statexam',DK_HS.NDK,DK_HS.RDK);
   {? _dkhs<>null
   || {? DK_HS.name()+3<>DK_HS.NDK+3
      || DK_HS.use((DK_HS.name()-3)+(DK_HS.NDK+3))
      ?};
      DK_HS.clear();
      {? DK_HS.seek(_dkhs)
      || {? DK_HS.BADH<>null
         || BADP.index('BADHBPAR');
            BADP.prefix(DK_HS.BADH);
            {? BADP.first()
            || _wyn:=1;
               {! |?
                     BADP.get();
:: do nowego nagłówka przepisujemy pozycje ze starego badania
                     BADP.BADH:=_b;
                     BADP.cntx_psh();
                     BADP.clear();
                     BADP.add(1);
                     BADP.cntx_pop();
                     BADP.next()
               !}
            ?}
         ?}
      ?}
   ?}
?};
DK_HS.cntx_pop();
_wyn


\BADH_WER_bR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS:
::----------------------------------------------------------------------------------------------------------------------
exec('BADP_select','statexam',BADH.ref());
~~


\BADP_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: wyswietla parametry badania
::   WE: [_a] - BADH.ref()
::       [_b] - odświeżenie okienka w grupie 0(domyślnie)-nie 1-tak
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_badh:={? _>0 & type_of(_a)=type_of(BADH.ref()) || _a || BADH.ref() ?};
_odsw:={? _>1 & type_of(_b)=type_of(0) || _b || 0 ?};

_roln:=exec('get_par','#parametr',141);
_typ:=exec('FindAndGet','#table',BADH,_badh,,"BADH.TYP",'');
{? _typ=''
|| _typ:={? AreaTitle.area='TTE_BAD' || 'O' || 'M' ?}
?};
_wbadp:={? _roln<>'T' || {? _typ='O' || 'WER_OP' || 'WER' ?} || 'WERR' ?};
BADVAR.BADH:=_badh;

{? BADVAR.BADH().STAN<>'P' | _odsw | exec('lock','#record','BADH','SES_ID',_badh)
||
   BADP.fld_fml('VALUE','EDIT_FORMAT',"'in_prec=5'");
   BADP.fld_fml('VALUE','DISPLAY_FORMAT',"'out_prec=5'");

   {? ~_odsw || BADP.cntx_psh() ?};
   {? _typ='O'
   || BADP.index('BADHPAR');
      BADP.prefix(_badh,'',)
   || BADP.index('BADHBPAR');
      BADP.prefix(_badh)
   ?};
   _p8821:=exec('get','#params',8821,2,OPERATOR.USER);

   {? ~_odsw & ~BADP.first()
   || BADP.actions_grayed(_wbadp,{? BADVAR.BADH().STAN<>'P' || 'Adpu:Ad' || '' ?});
      {? FILTER.B_AREA<>'KJ' & _p8821='N' & FUN.ask('Czy przepisać parametry badania?'@) || _p8821:='T' ?};
      {? BADVAR.BADH().STAN='P' & _p8821='T'
      || exec('genBADPfromMSEP','statexam',_badh)
      ?};
      BADP.first()
   ?};
   _hid:=':';
   {? BADVAR.BADH().STAN<>'P'                                  || _hid:='dWuM:d'    ?};
   {? ~exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK') || _hid:='du'+_hid+'d'  ?};
   {? ~exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK') || _hid:='WM'+_hid       ?};
   {? _hid+1=':' || _hid:=_hid-1 ?};
   {? ~_odsw || BADP.win_sel(_wbadp) ?};
   BADP.hdr_sel; BADP.hdr_sel(' '+BADVAR.BADH().SYM);
   {? _odsw
   || grp_disp(BADP,_wbadp)
   || BADP.select(,,,_hid);
      BADP.cntx_pop();
      BADVAR.BADH:=null();
      exec('unlock','#record','BADH','SES_ID',_badh)
   ?}
|? _odsw
|| BADP.index('BADHBPAR');
   BADP.prefix(null());
   grp_disp(BADP,_wbadp)
?};
~~


\T4Szapiszzmiany
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: nanosi zmiany zaproponowane w tabeli T4S
::   WE: _a - tabela utworzona w T4S i zaladowana na zewnatrz - dane musza nadawac sie do przetworzenia
::   WY: @.Class.cResult
::
::UWAGA: w tabeli dane musza byc juz okreslone - tutaj jest tylko naniesienie zmian
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__aktzkp','__aktdkl','__cscean');

__cscean:=tab_tmp(1,'COM','STRING[255]','');
__aktzkp:=tab_tmp(1,'MAT','STRING[16]',''
           ,'NRK','INTEGER',''
           ,'ILR','REAL','');

_dkrez:=tab_tmp(1,'REF','STRING[16]','');

_result:=obj_new(@.Class.cResult);
_result.WdrMsg:='Niepoprawna lista parametrów';

_tab:={? _>0 & type_of(_a)=type_of(SYSLOG) || _a || return(_result) ?};

_result.WdrMsg:='';

_tabt:=exec('Tools4Stats','statexam');
_tabt.cntx_psh();
_tabt.clear();
 BADH.cntx_psh();  BADH.clear();
STATS.cntx_psh(); STATS.clear();

:: pobiera dane o przesunięciach magazynowych
_mm_s:=tab_tmp(1,'REFSQL','STRING[16]','','ILE','REAL','');

__mat:='';

_podzial:=obj_new(1);
_mydo:=do_state()=0;
_select:=_tab.sel_size;
_mat:=exec('FindAndGet','#table',M,_tab.M,,,null());
_addtab:=0;
_error:=0;
_p600813:=exec('get','#params',600813,2)='T';
_p600814:=exec('get','#params',600814,2)='T';
:: ewentualne pobranie rozpiski wg wymiarów przy zmianie terminu ważności
{? _mydo & _tab.size()>0 & ST.MAG().SL='T' & _tab.first()
|| {!
   |? _mat:=exec('FindAndGet','#table',M,_tab.M,,,null());
      {? exec('FindAndGet','#table',M,_mat,,"SETW",'')='P' & (_tab.N_TW<>_tab.C_TW | _tab.N_IL<>_tab.C_ILDK)
      || _scsql:=exec('FindAndGet','#table',DK,_tab.C_RDK,_tab.C_NDK,"$ref()",'');
         {? ~_addtab
         || __aktdkl:=exec('aktSLwgTW','magdok_wymiary',ST.MAG,_mat,_scsql,_tab.N_IL,_tab.N_TW,_scsql)
         || exec('aktSLwgTW','magdok_wymiary',ST.MAG,_mat,_scsql,_tab.N_IL,_tab.N_TW,_scsql,__aktdkl)
         ?};
         _addtab:=1
      ?};
      _tab.next()
   !}
?};
{? _tab.first()
||
   {? _mydo || do() ?};
   {!
   |?
::    teraz analiza co i jak trzeba bedzie dzielic

      _L_DIV:=( _tab.L_STS>0
              & _tab.L_IL>0
              & _tab.L_IL<_tab.C_ILD
              );

      _N_DIV:={? _tab.L_STS=0
              || _tab.N_IL<_tab.C_ILDK
              || _tab.N_IL>0 & _tab.C_ILD<_tab.C_ILDK
              ?};

::    podzielone lub nie idziem dalej
      _tabt.open_all(_tab.C_NDK+3);
      _tabt.clear();
      _zmTW:=0;
      _zmDST:=exec('FindAndGet','#table',M,_tab.M,,"SETW='P' & IDMOB='D'",0)
            & {? _tab.C_ILDK=_tab.C_ILD
              || _tab.N_IL<>_tab.C_ILDK
              || (_tab.N_IL+(_tab.C_ILDK-_tab.C_ILD))<>_tab.C_ILDK
              ?};

      {? do_state()=1
       & DK.seek(_tab.C_RDK,)
       & SC.seek(_tab.C_RSC,)
      ||
         _dkrez.clear();
         _dkrez.prefix($DK.ref());
         {? ~_dkrez.first()
         || _dkrez.blank();
            _dkrez.REF:=$DK.ref();
            _dkrez.add(1)
         ?};
::       sprawdzamy czy jest konieczny podzial - czy wystepuja wpisy w polach L_ i nie bylo jeszcze podzialu
::       _podzial to obiekt wiec trzeba go najpierw usunac, bo jestesmy w petli
::       sprawdzamy czy podzial dla nowego statusu - jezeli suma nowych jest mniejsza niz ilosc na dokumencie,
::       to musi byc podzial
         {? _tab.N_RDK=0
          & _N_DIV
         ||
            DK.cntx_psh();
            obj_del(_podzial);
            _podzial:=exec('wydziel_DKco','statexam',DK.ref(),SC.ref(),_tab.N_IL,_tab.N_TW,_zmDST
                       ,_tab.N_IL2,_tab.N_NSC);
            {? _podzial.State>0
            || _tab.N_NDK:=ref_name(_podzial.Result);
               _tab.N_RDK:=#_podzial.Result;
               _tab.N_RSC:=#_podzial.Result2;
               _tab.put();
               _dkrez.clear();
               _dkrez.prefix($_podzial.Result);
               {? ~_dkrez.first()
               || _dkrez.blank();
                  _dkrez.REF:=$_podzial.Result;
                  _dkrez.add(1)
               ?};
               ~~
            ?};
            DK.cntx_pop();
            ~~

         |? _tab.N_RDK=0
         || _tab.N_NDK:=_tab.C_NDK;
            _tab.N_RDK:=_tab.C_RDK;
            _tab.N_RSC:=_tab.C_RSC;
            _tab.put();
            _zmTW:=DK.TW<>_tab.N_TW;
::          teraz SM roczny
            SM.cntx_psh; ND.cntx_psh;
            SM.use((SM.name-3)+(DK.name+3));
            SM.index('SM');
            SM.prefix(DK.N().MAG,DK.M);
            {? SM.first
            ||
               {? DK.STATS().KIND='O'
               || SM.S_O-=_tab.N_IL; SM.S_O2+={? DK.M().J2<>null() || _tab.N_IL2 || 0 ?}; SM.put
               |? DK.STATS().KIND='N'
               || SM.S_N-=_tab.N_IL; SM.S_N2+={? DK.M().J2<>null() || _tab.N_IL2 || 0 ?}; SM.put
               ?}
            ?};
            SM.cntx_pop; ND.cntx_pop;
::          teraz SM zbiorczy
            SM.cntx_psh;
            SM.index('SM');
            SM.prefix(DK.N().MAG,DK.M);
            {? SM.first
            ||
               {? DK.STATS().KIND='O'
               || SM.S_O-=_tab.N_IL; SM.S_O2+={? DK.M().J2<>null() || _tab.N_IL2 || 0 ?}; SM.put
               |? DK.STATS().KIND='N'
               || SM.S_N-=_tab.N_IL; SM.S_N2+={? DK.M().J2<>null() || _tab.N_IL2 || 0 ?}; SM.put
               ?}
            ?};
            SM.cntx_pop;
            ~~
         ?};

         {? _tab.L_RDK=0
          & _L_DIV
         ||
::          _podzial to obiekt wiec trzeba go najpierw usunac, bo jestesmy w petli
            DK.cntx_psh();
            obj_del(_podzial);
            _podzial:=exec('wydziel_DKco','statexam',DK.ref(),SC.ref(),_tab.L_IL,_tab.L_TW,_zmDST
                       ,_tab.L_IL2,_tab.L_NSC);
            {? _podzial.State>0
            || _tab.L_NDK:=ref_name(_podzial.Result);
               _tab.L_RDK:=#_podzial.Result;
               _tab.L_RSC:=#_podzial.Result2;
               _tab.put();
               _dkrez.clear();
               _dkrez.prefix($_podzial.Result);
               {? ~_dkrez.first()
               || _dkrez.blank();
                  _dkrez.REF:=$_podzial.Result;
                  _dkrez.add(1)
               ?};
               ~~
            ?};
            DK.cntx_pop();
            ~~
         ?};
::       ok, mamy juz podzielona dostawe (jesli podzial byl potrzebny)
::       teraz wpisy do historii i zmiany statusow
::       zaczynamy od dostawy N_
         {? do_state()=1
          & DK.seek(_tab.N_RDK,)
          & SC.seek(_tab.N_RSC,)
          & _tab.N_IL>0
         ||
            _sts:=exec('FindAndGet','#table',STATS,_tab.N_STS,,,null());
            {? _sts<>null()
            || SC.STATS:=_sts; {? SC.put(1)=0 || undo() ?};
               SC.TW:=_tab.N_TW;
               {? SC.put(1)=0 || undo() ?};
               DK.TW:=_tab.N_TW;
               DK.STATS:=_sts;
               {? _p600813 | _p600814 || DK.REO:=1 ?};
               _newscean:='';
               _mktm:=DK.M().KTM;
               {? DK.put(1)=0
               || undo()
               |? ~_N_DIV & (_zmTW | _zmDST) & DK.M().SETW='P' & DK.M().IDMOB='D'
               || _otw:={? DK.N().NDSQL<>'' || exec('FindAndGet','#table',DK,DK.PRDK,,"form(TW)+SCEAN",'') || '' ?};
                  {? _zmTW & DK.SCEAN<>'' & (_otw='' | _otw=(form(DK.TW)+DK.SCEAN))
                  || exec('mkodkadd','kody_kresk',DK.M,DK.SCEAN,$DK.ref())
                  || _scean:=exec('mkodkKODK','kody_kresk',DK.M);
                     exec('mkodkadd','kody_kresk',DK.M,_scean,$DK.ref());
                     DK.SCEAN:=_scean;
                     {? DK.put(1)=0 || undo() ?};
                     SC.SCEAN:=_scean;
                     _newscean:=_scean;
                     {? SC.put(1)=0 || undo() ?}
                  ?}
               ?};
               {? DK.N().MAG().PAL='T'
               || exec('aktstpal','magdok_palety',DK.ref(),DK.SRDK,DK.STATS)
               |? (_zmTW | _zmDST)
               || DK_L.index('DKAUTO');
                  DK_L.prefix(DK.ref(),null(),0);
                  {? DK_L.first()
                  || {!
                     |? {? ~DK_L.AUTO
                        || _oldtw:=DK_L.TW;
                           _oldeanl:=DK_L.LOK;
                           _oldscean:={? DK_L.SCEAN<>'' || DK_L.SCEAN
                                      |? DK_L.DK().SCEAN<>'' || DK_L.DK().SCEAN
                                      || DK_L.SCEAN
                                      ?};
                           {? _newscean<>'' || DK_L.SCEAN:=_newscean ?};
                           DK_L.TW:=_tab.N_TW;
                           {? DK_L.put(1)
                           || exec('adddelsl','magazyn_stan',DK_L.MG,DK_L.M,DK_L.LOK,DK_L.TW,DK_L.IL,1,DK_L.PAL
                               ,{? _newscean<>'' || _newscean || _oldscean ?},DK_L.IL2);
                              exec('adddelsl','magazyn_stan',DK_L.MG,DK_L.M,DK_L.LOK,_oldtw,DK_L.IL,-1,DK_L.PAL
                               ,_oldscean,DK_L.IL2)
                           || undo()
                           ?}
                        ?};
                        DK_L.next()
                     !}
                  ?};
::                wpis modyfikujący dane na reorganizacjach
                  {? ~_N_DIV & DK.M().SETW='P' & DK.N().MAG().SL='T' & DK.N().MAG().PAL='N'
                  || exec('modDK_L','statexam',$DK.ref(),$DK.ref())
                  ?}
               ?};
               {? _newscean<>'' & _newscean<>_oldscean
               || __cscean.blank();
                  __cscean.COM:='Materiał %1 kod dostawy %2 na %3.'@[_mktm,_oldscean,_newscean];
                  __cscean.add(1)
               ?};
::             teraz SM roczny
               SM.cntx_psh; ND.cntx_psh;
               SM.use((SM.name-3)+(DK.name+3));
               SM.index('SM');
               SM.prefix(DK.N().MAG,DK.M);
               {? SM.first
               ||
                  {? DK.STATS().KIND='O'
                  || SM.S_O+=_tab.N_IL; SM.S_O2+={? DK.M().J2<>null() || _tab.N_IL2 || 0 ?}; SM.put
                  |? DK.STATS().KIND='N'
                  || SM.S_N+=_tab.N_IL; SM.S_N2+={? DK.M().J2<>null() || _tab.N_IL2 || 0 ?}; SM.put
                  ?}
               ?};
               SM.cntx_pop; ND.cntx_pop;
::             teraz SM zbiorczy
               SM.cntx_psh;
               SM.index('SM');
               SM.prefix(DK.N().MAG,DK.M);
               {? SM.first
               ||
                  {? DK.STATS().KIND='O'
                  || SM.S_O+=_tab.N_IL; SM.S_O2+={? DK.M().J2<>null() || _tab.N_IL2 || 0 ?}; SM.put
                  |? DK.STATS().KIND='N'
                  || SM.S_N+=_tab.N_IL; SM.S_N2+={? DK.M().J2<>null() || _tab.N_IL2 || 0 ?}; SM.put
                  ?}
               ?};
               SM.cntx_pop;
               ~~
            || undo()
            ?};
            {? do_state()=1
            ||
::             statusy na DK i SC juz sa, wiec tylko naniesienie na DK_HS
               exec('DK_HS_new4DK','statexam'
                   ,DK.ref()
                   ,_tab.N_KIND
                   ,{? _tab.N_COMM<>''  || _tab.N_COMM  || ~~ ?}
                   ,{? _tab.N_COMMU<>'' || _tab.N_COMMU || ~~ ?}
                   ,_sts
                   ,exec('FindAndGet','#table',BADH,_tab.N_RBADH,_tab.N_NBADH,,null())
                   ,
                   ,_tab.N_NSC
                   )
            ?}
         ?};
::       teraz dostawa potomna
         {? do_state()=1
          & DK.seek(_tab.L_RDK,)
          & SC.seek(_tab.L_RSC,)
          & _tab.L_IL>0
         ||
::          zmiana statusu na dostawie
            _sts:=exec('FindAndGet','#table',STATS,_tab.L_STS,,,null());
            {? _sts<>null()
            || SC.STATS:=_sts;
               SC.TW:=_tab.N_TW;
               {? SC.put(1)=0 || undo() ?};
               DK.TW:=_tab.N_TW;
               DK.STATS:=_sts;
               {? _p600813 | _p600814 || DK.REO:=1 ?};
               {? DK.put(1)=0
               || undo()
               |? DK.N().MAG().PAL='T'
               || exec('aktstpal','magdok_palety',DK.ref(),DK.SRDK,DK.STATS)
               ?};
::             teraz SM roczny
               SM.cntx_psh; ND.cntx_psh;
               SM.use((SM.name-3)+(DK.name+3));
               SM.index('SM');
               SM.prefix(DK.N().MAG,DK.M);
               {? SM.first
               ||
                  {? DK.STATS().KIND='O'
                  || SM.S_O+=_tab.L_IL; SM.S_O2+={? DK.M().J2<>null() || _tab.L_IL2 || 0 ?}; SM.put
                  |? DK.STATS().KIND='N'
                  || SM.S_N+=_tab.L_IL; SM.S_N2+={? DK.M().J2<>null() || _tab.L_IL2 || 0 ?}; SM.put
                  ?}
               ?};
               SM.cntx_pop; ND.cntx_pop;
::             teraz SM zbiorczy
               SM.cntx_psh;
               SM.index('SM');
               SM.prefix(DK.N().MAG,DK.M);
               {? SM.first
               ||
                  {? DK.STATS().KIND='O'
                  || SM.S_O+=_tab.L_IL; SM.S_O2+={? DK.M().J2<>null() || _tab.L_IL2 || 0 ?}; SM.put
                  |? DK.STATS().KIND='N'
                  || SM.S_N+=_tab.L_IL; SM.S_N2+={? DK.M().J2<>null() || _tab.L_IL2 || 0 ?}; SM.put
                  ?}
               ?};
               SM.cntx_pop;
               ~~
            || undo()
            ?};
            {? do_state()=1
            ||
::             statusy na DK i SC juz sa, wiec tylko naniesienie na DK_HS
               exec('DK_HS_new4DK','statexam'
                   ,DK.ref()
                   ,_tab.L_KIND
                   ,{? _tab.L_COMM<>''  || _tab.L_COMM  || ~~ ?}
                   ,{? _tab.L_COMMU<>'' || _tab.L_COMMU || ~~ ?}
                   ,_sts
                   ,exec('FindAndGet','#table',BADH,_tab.L_RBADH,_tab.L_NBADH,,null())
                   ,
                   ,_tab.L_NSC
                   )
            ?}
         ?};
         {? __mat*('|'+$#DK.M+';')=0
         || __mat+='|'+$#DK.M+';'
         ?};
         exec('obl_stan','magazyn_stan',DK.M,1,DK.N().MAG);
         ~~
      ?};

      _tab.next()
   !};
   _result.Result:=do_state()=1;

   {? _mydo || end() ?};
   exec('CleanTableData','statexam',_tab);
:: aktualizacja stanow magazynowych, rezerwacji, statusow zamowien
   exec('Rez2Rez','zamsiw_wspolne',1,ND.ref());
   _dkrez.clear();
   {? _dkrez.first()
   || {!
      |? exec('akt_wgdk','zamsiw_wspolne',ND.ref
          ,exec('FindAndGet','#table',DK,_dkrez.REF,,,null()),exec('FindAndGet','#table',DK,_dkrez.REF,,"IL",0));
         _dkrez.next()
      !}
   ?};
:: reorganizacja przy zmianie kwalifikacji
   {? _p600813 & ND.MAG().SL='T' || exec('act_gen_reo','magdok_wymiary',ND.ref()) ?};
   ~~
?};

_tabt.cntx_pop();
 BADH.cntx_pop();
STATS.cntx_pop();

obj_del(_dkrez);
obj_del(_mm_s);
{? (__cscean.clear(); __cscean.first())
|| _msg:='Uwaga. Zmieniono kody identyfikacyjne:\n';
   {!
   |? _msg+='\n'+__cscean.COM;
      __cscean.next()
   !};
   FUN.info(_msg)
?};
VAR_DEL.delete('__aktzkp','__aktdkl','__cscean');

_result


\wydziel_DKco
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: dzieli dostawe na czesci
::   WE: _a - DK.ref()
::       _b - SC.ref()
::       _c - ilosc do wydzielenia
::       _d - termin ważności
::       [_e] - zmiana identyfikatora
::       [_f] - ilosc do wydzielenia druga jednostka miary
::       [_g] - 'T'-zawsze twórz nowy kod dostawy, 'N'(domyślnie)-nie
::   WY: @.Class.cResult
::----------------------------------------------------------------------------------------------------------------------
_dk_ref:={? _>0 & type_of(_a)=type_of(DK.ref())    || _a || null()      ?};
_sc_ref:={? _>1 & type_of(_b)=type_of(SC.ref())    || _b || null()      ?};
   _ile:={? _>2 & type_of(_c)=type_of(1.1)         || _c || 0           ?};
    _tw:={? _>3 & type_of(_d)=type_of(date(0,0,0)) || _d || date(0,0,0) ?};
  _zmid:={? _>4 & type_of(_e)=type_of(0)           || _e || 0 ?};
   _il2:={? _>5 & type_of(_f)=type_of(1.1)         || _f || 0           ?};
   _nsc:={? _>6 & type_of(_g)=type_of('')          || _g || 'N'         ?};

 _oldtw:=_tw;
 _newid:=0;

_result:=obj_new(@.Class.cResult);

{? _dk_ref=null()
|| _result.WdrMsg:='Nie podano wskazania na pozycję dokumentu.';
   return(_result);
   ~~
|? _ile=0
|| _result.WdrMsg:='Podano zero do wydzielenia z dostawy.';
   return(_result);
   ~~
?};

_mydo:=do_state()=0;
{? _mydo || do() ?};

_tabt:=exec('Tools4Stats','statexam');
{? _dk_ref<>null
|| _tabt.cntx_psh();
   _tabt.open_all(ref_name(_dk_ref)+3);
   _tabt.clear();
   _prdk:='';

   {? DK.seek(_dk_ref)
    & SC.seek(_sc_ref)
    & SC.S>=_ile
   || _result.State:=1;
:: kontrola powiązań z fakturą zakupową i wewnętrzną
      _ilzak:=exec('ile_rozp','magdok_wspolne',$_dk_ref,'Z'); _roznz:=0;
      _ilwew:=exec('ile_rozp','magdok_wspolne',$_dk_ref,'E'); _roznw:=0;

:: wspolczynnik
      _prdk:=DK.PRDK;
      _dokl:=DK.M().DOKL;
      _dokl_c:=2;
      _zpoz:={? ~DK.ZP || DK.P || DK.ZP ?};
      _ile:=_ile$_dokl;
      _icoef:=_ile/DK.IL;
      _oldscean:=DK.SCEAN;
      _olddk:=$DK.ref();
      _newid:=DK.TW<>_tw | _zmid;
      _scean:=_oldscean;

      _val:=obj_new(2);
      {! _vv:=1..2 |! _val[_vv]:=obj_new(12) !};

      _val[1][ 1]:=DK.IL;
      _val[1][ 2]:=DK.IL2;
      _val[1][ 3]:=DK.WAR;
      _val[1][ 4]:=DK.WN;
      _val[1][ 5]:=DK.WV;
      _val[1][ 6]:=DK.WB;
      _val[1][ 7]:=DK.WF;
      _val[1][ 8]:=DK.WS;
      _val[1][ 9]:=DK.WARZ;
      _val[1][10]:=DK.SCWAR;
      _val[1][11]:=DK.RABK;
      _val[1][12]:=DK.TW;

:: teoretycznie ponizszy zapis uniemozliwia powstawanie roznic wartosci calego dokumentu
      _pp:=1;  _val[2][_pp]:=_ile;                        _val[1][_pp]-=_val[2][_pp];
      _pp:=2;  _val[2][_pp]:={? _il2=0 || _val[1][_pp]*_icoef$_dokl || _il2 ?};
                                                          _val[1][_pp]-=_val[2][_pp];
      _pp:=3;  _val[2][_pp]:=_val[1][_pp]*_icoef$_dokl_c; _val[1][_pp]-=_val[2][_pp];
      _pp:=4;  _val[2][_pp]:=_val[1][_pp]*_icoef$_dokl_c; _val[1][_pp]-=_val[2][_pp];
      _pp:=5;  _val[2][_pp]:=_val[1][_pp]*_icoef$_dokl_c; _val[1][_pp]-=_val[2][_pp];
      _pp:=6;  _val[2][_pp]:=_val[1][_pp]*_icoef$_dokl_c; _val[1][_pp]-=_val[2][_pp];
      _pp:=7;  _val[2][_pp]:=_val[1][_pp]*_icoef$_dokl_c; _val[1][_pp]-=_val[2][_pp];
      _pp:=8;  _val[2][_pp]:=_val[1][_pp]*_icoef$_dokl_c; _val[1][_pp]-=_val[2][_pp];
      _pp:=9;  _val[2][_pp]:=_val[1][_pp]*_icoef$_dokl_c; _val[1][_pp]-=_val[2][_pp];
      _pp:=10; _val[2][_pp]:=_val[1][_pp]*_icoef$_dokl_c; _val[1][_pp]-=_val[2][_pp];
      _pp:=11; _val[2][_pp]:=_val[1][_pp]*_icoef$_dokl_c; _val[1][_pp]-=_val[2][_pp];
      _pp:=12; _val[2][_pp]:=_tw;

      _vv:=1;
      DK.IL:=_val[_vv][ 1];
      DK.IL2:=_val[_vv][ 2];
      {? DK.M().J2<>null() & DK.IL2>0 || DK.WS2:=DK.IL/DK.IL2 ?};
      DK.WAR:=_val[_vv][ 3];
      DK.WN:=_val[_vv][ 4];
      DK.WV:=_val[_vv][ 5];
      DK.WB:=_val[_vv][ 6];
      DK.WF:=_val[_vv][ 7];
      DK.WS:=_val[_vv][ 8];
      DK.WARZ:=_val[_vv][ 9];
      DK.SCWAR:=_val[_vv][10];
      DK.RABK:=_val[_vv][11];
      DK.TW:=_val[_vv][12];

   {? DK.put(1)=0 || _result.WdrMsg:='Nie zapisano zmian dla pozycji dokumentu.'; undo() ?};
      {? DK.IL<_ilzak || _roznz:=_ilzak-DK.IL ?};
      {? DK.IL<_ilwew || _roznw:=_ilwew-DK.IL ?};
      _zp:=DK.ref();
:: teraz SM roczny
      SM.cntx_psh; ND.cntx_psh;
      SM.use((SM.name-3)+(DK.name+3));
      SM.index('SM');
      SM.prefix(DK.N().MAG,DK.M);
      {? SM.first
      ||
         {? DK.STATS().KIND='O' || SM.S_O-=_ile; SM.S_O2-={? DK.M().J2<>null() || _il2 || 0 ?}; SM.put
         |? DK.STATS().KIND='N' || SM.S_N-=_ile; SM.S_N2-={? DK.M().J2<>null() || _il2 || 0 ?}; SM.put
         ?}
      ?};
      SM.cntx_pop; ND.cntx_pop;
:: teraz SM zbiorczy
      SM.cntx_psh;
      SM.index('SM');
      SM.prefix(DK.N().MAG,DK.M);
      {? SM.first
      ||
         {? DK.STATS().KIND='O' || SM.S_O-=_ile; SM.S_O2-={? DK.M().J2<>null() || _il2 || 0 ?}; SM.put
         |? DK.STATS().KIND='N' || SM.S_N-=_ile; SM.S_N2-={? DK.M().J2<>null() || _il2 || 0 ?}; SM.put
         ?}
      ?};
      SM.cntx_pop;

      _vv:=2;
:: wskazane byloby dodanie innego pola, by byl ewentualny powrot ilosci na dostawe
:   DK.ZP:=#_zp;
      DK.IL:=_val[_vv][ 1];
      DK.IL2:=_val[_vv][ 2];
      {? DK.M().J2<>null() & DK.IL2>0 || DK.WS2:=DK.IL/DK.IL2 ?};
      DK.WAR:=_val[_vv][ 3];
      DK.WN:=_val[_vv][ 4];
      DK.WV:=_val[_vv][ 5];
      DK.WB:=_val[_vv][ 6];
      DK.WF:=_val[_vv][ 7];
      DK.WS:=_val[_vv][ 8];
      DK.WARZ:=_val[_vv][ 9];
      DK.SCWAR:=_val[_vv][10];
      DK.RABK:=_val[_vv][11];
      DK.TW:=_val[_vv][12];

      DK.cntx_psh();
      DK.index('DOKMAG');
      DK.prefix(DK.N);
      _poz:=exec('NewOrder','#table','DK','P','DOKMAG',DK.N);
      DK.cntx_pop();
      DK.P:=_poz;
      DK.KH:=DK.N().KH;
      DK.KH_ODB:=DK.N().KH_ODB;

   {? DK.add(1)=0 || _result.WdrMsg:='Nie dodano pozycji dokumentu.'; undo() ?};
      _dk_nref:=DK.ref();
      _n_ndk:=DK.name();
      _n_rdk:=#DK.ref();
      {? _roznz>0 | _roznw>0
      || DK.cntx_psh();
         FAP2DK.cntx_psh();
         FAP2DK.index('DK');
         FAP2DK.prefix('Z',$_dk_ref);
         {? _roznz>0 & FAP2DK.last
         || {!
            |? _ref:=FAP2DK.ref();
               _oki:=FAP2DK.prev();
               FAP2DK.cntx_psh();
               FAP2DK.clear();
               {? FAP2DK.seek(_ref) & (_ilepow:=FAP2DK.IL)>0
               || {? _ilepow<=_roznz
                  || FAP2DK.DK:=$_dk_nref;
                     FAP2DK.put(1);
                     _roznz:=_roznz-_ilepow
                  || FAP2DK.IL-=_roznz;
                     FAP2DK.put(1);
                     FAP2DK.DK:=$_dk_nref;
                     FAP2DK.IL:=_roznz;
                     FAP2DK.add(1);
                     _roznz:=0
                  ?}
               ?};
               FAP2DK.cntx_pop();
               _roznz>0 & _oki
            !}
         ?};
         FAP2DK.index('DK');
         FAP2DK.prefix('E',$_dk_ref);
         {? _roznw>0 & FAP2DK.last
         || {!
            |? _ref:=FAP2DK.ref();
               _oki:=FAP2DK.prev();
               FAP2DK.cntx_psh();
               FAP2DK.clear();
               {? FAP2DK.seek(_ref) & (_ilepow:=FAP2DK.IL)>0
               || {? _ilepow<=_roznw
                  || FAP2DK.DK:=$_dk_nref;
                     FAP2DK.put(1);
                     _roznw:=_roznw-_ilepow
                  || FAP2DK.IL-=_roznw;
                     FAP2DK.put(1);
                     FAP2DK.DK:=$_dk_nref;
                     FAP2DK.IL:=_roznw;
                     FAP2DK.add(1);
                     _roznw:=0
                  ?}
               ?};
               FAP2DK.cntx_pop();
               _roznw>0 & _oki
            !}
         ?};
         FAP2DK.cntx_pop();
         DK.cntx_pop()
      ?};
      DK.NDK:=_n_ndk;
      DK.RDK:=_n_rdk;
      DK.SRDK:=$DK.ref();
      DK.PRDK:={? _prdk<>'' || _prdk || $DK.ref() ?};
      DK.ZP:=_zpoz;
      _mktm:=DK.M().KTM;
      DK.put(1);
      {? ((_newid & DK.M().SETW='P') | _nsc='T') & DK.M().IDMOB='D'
      || _scean:=exec('mkodkKODK','kody_kresk',DK.M);
         exec('mkodkadd','kody_kresk',DK.M,_scean,$DK.ref());
         DK.SCEAN:=_scean;
         DK.put(1)
      ?};
      {? _scean<>'' & _scean<>_oldscean & var_pres('__cscean')>117
      || __cscean.blank();
         __cscean.COM:='Materiał %1 kod dostawy %2 na %3.'@[_mktm,_oldscean,_scean];
         __cscean.add(1)
      ?};
:: teraz sprawdzimy czy sa SC ustanowione dla dostawy
      {? SC.seek(_sc_ref)
      || SC.S-=_ile;
         SC.S2-=_il2;
         _i_rdk:=SC.RDK;
         _i_ndk:=SC.NDK;
         _oldtw:=SC.TW;
         {? SC.put(1)=0 || _result.WdrMsg:='Nie zapisano zmian dla dostawy.'; undo() ?};
            SC.S:=_ile;
            SC.S2-=_il2;
            SC.NDK:=_n_ndk;
            SC.RDK:=_n_rdk;
            SC.SRDK:=$_dk_nref;
            SC.SCEAN:=_scean;
            SC.TW:=_tw;
         {? SC.add()=0 || _result.WdrMsg:='Nie dodano dostawy.'; undo() ?};
         {? ~exec('podzielINP','statexam',_i_rdk,_i_ndk,SC.RDK,SC.NDK,$SC.ref(),_ile)
         || _result.WdrMsg:='Nie udało się zaktualizować arkusza inwentaryzacyjnego.';
            undo()
         ?};
         ~~
      ?};

:: przepinamy DK_Le
      _new_dk:=DK.ref();
      _new_st:=DK.STATS;
      _new_il:=DK.IL;

      DK.cntx_psh();
      DK_L.index('DK');
      DK_L.prefix(_zp,null);
      {? DK_L.first()
      || _wgpal:=var_pres('__paldkl')>117;
         _zmTW:=_oldtw<>_tw;
         _ilSL:=0;

         _ilp:=_ile;
         _ilp2:=_il2;
         {!
         |? {? ~_wgpal | (_wgpal & (__paldkl.clear(); __paldkl.prefix($DK_L.PAL); __paldkl.first()))
            || _zmSCEAN:=_scean<>_oldscean;
               DK.cntx_psh();
               _ileprzed:=DK_L.IL;
               _ileprze2:=DK_L.IL2;
               _ilescsql:=DK_L.SCSQL;
               _iledkc:=DK_L.DK().DK_C;
               _ilecen:=DK_L.DK().C;
               DK.cntx_pop();
               _il:={? DK_L.IL<_ilp || DK_L.IL  || _ilp ?};
               _i2:={? DK_L.IL2<_ilp2 || DK_L.IL2  || _ilp2 ?};
               DK_L.IL-=_il;
               DK_L.IL2-=_i2;
               _ilp-=_il;
               _ilp2-=_i2;
               DK_L.SCEAN:=DK_L.DK().SCEAN;
               exec('reoIL2','magdok_wymiary');
               {? DK_L.put(1)=0
               || _result.WdrMsg:='Nie zapisano zmian dla wymiarów pozycji dokumentu.'; undo()
               || {? DK_L.PAL<>null() & _new_il>0
                  || _roz:=exec('statspal','magdok_palety',DK_L.PAL,_ileprzed,_ilescsql,_iledkc,_ilecen
                            ,$_new_dk,_il,_new_st);
                     {? ~_roz
                     || undo()
                     || _new_il-=_roz
                     ?}
                  ?}
               ?};
               DK_L.DK:=_new_dk;
               DK_L.IL:=_il;
               DK_L.IL2:=_i2;
               exec('reoIL2','magdok_wymiary');
               DK_L.TW:=_tw;
               DK_L.SCSQL:=$_new_dk;
               DK_L.SCEAN:=DK_L.DK().SCEAN;
               exec('uzupIDkod','magdok_palety',DK_L);
               DK_L.cntx_psh;
               DK_L.clear();
               {? DK_L.add(1)=0
               || _result.WdrMsg:='Nie dodano wymiarów do pozycji dokumentu.'; undo()
               || {? _zmTW | _e | _zmSCEAN
                  || exec('adddelsl','magazyn_stan',DK_L.MG,DK_L.M,DK_L.LOK,_tw,DK_L.IL,1,DK_L.PAL
                      ,_scean,DK_L.IL2);
                     exec('adddelsl','magazyn_stan',DK_L.MG,DK_L.M,DK_L.LOK,_oldtw,DK_L.IL,-1,DK_L.PAL
                      ,_oldscean,DK_L.IL2)
                  ?}
               ?};
               DK_L.cntx_pop
            ?};
            _ilp & DK_L.next
         !};
         ~~
      ?};
      {? DK_L.first()
      ||
         {!
         |?
            {? DK_L.IL || DK_L.next || DK_L.del ?}
         !}
      ?};
      DK.cntx_pop();

:: wpis o podziale
      exec('DK_HS_new4DK','statexam',_dk_nref,'P',,,DK.STATS,_dk_ref,,_nsc);
:: wpis modyfikujący dane na reorganizacjach
      {? DK.M().SETW='P' & DK.N().MAG().SL='T' & DK.N().MAG().PAL='N'
      || exec('modDK_L','statexam',$_dk_ref,$_dk_nref)
      ?};

      _result.State:=do_state()=1;
      {? _result.State
      || _result.Result:=_dk_nref;
         _result.Result2:=SC.ref();
         ~~
      ?};

      ~~
   ?};
   _tabt.cntx_pop()
?};

{? _mydo || end() ?};
{? _result.State
|| exec('obl_stan','magazyn_stan',DK.M,1,DK.N().MAG)
?};

_result


\CleanTableData
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Sprzata T4S, odblokowuje rekrody
::   WE: TABLE _a - tabela
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_tab:={? _>0 & type_of(_a)=type_of(SYSLOG) || _a || return() ?};
_tab.clear();
{? _tab.first()
|| {!
   |?
::    jezeli istnieje taka potrzeba to odblokujemy wszystkie zablokowane przez tabele rekordy
      exec('CleanTableRow','statexam',_tab);
      _tab.next()
   !};
   ~~
?};
~~


\dk_stats_chng
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Zmiana statusu dla pozycji dokumentu
::----------------------------------------------------------------------------------------------------------------------
_roln:=exec('get_par','#parametr',141);

{? DK.Z='N' & DK.PLUS='T' & ND.TYP().DN<>'T'
||
   {? DK.RDK=0 || DK.RDK:=#DK.ref() ?};
   {? form(DK.NDK)='' || DK.NDK:=DK.name() ?};
   {? form(DK.PRDK)='' || DK.PRDK:=DK.SRDK:=$DK.ref() ?};
   DK.put(1)
?};
{? ND.TYP().DN='T' & DK.PRDK<>$DK.ref() & ~DK.ZP
|| FUN.info('Operacja niemożliwa dla dokumentu zwrotnego.\n Wykonaj kwalifikację dostawy na pierwotnej dostawie'@)
|? _roln='N' & DK.Z='N'
|| FUN.info('Operacja niemożliwa dla niezakończonego dokumentu.'@)
|? _roln='T'  | DK.Z='T'
|| exec('ScDk_stats_chng','statexam',DK)
?};
0


\ScDk_stats_chng
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Zmienia status dostawy (gdy jest zaznaczenie to cala grupe, a jesli nie, to biezacy)
::   WE: _a - wskazanie na tabele SC lub DK
::   WY: 1/0
::UWAGA: ilosc do zmiany to SC.S-uzycie
::UWAGA: praca w aktualnym kontekscie DK lub SC !!!
::----------------------------------------------------------------------------------------------------------------------
_ScDk:={? _>0
        & type_of(_a)=type_of(SYSLOG)
        & (_a=DK | _a=SC)
       || _a
       || return(0)
       ?};

_pl2mg:=tab_tmp(1,'REF','STRING[16]',''
          ,'MG','STRING[16]',''
          ,'MD','STRING[16]',''
          ,'IL','REAL',''
          ,'RDK','INTEGER',''
          ,'NDK','STRING[8]',''
          ,'SCEAN','INTEGER','');

_tab:=exec('T4S','statexam');
_sel:=_ScDk.sel_aget();
_mk_adel:=1;
_ScDk.cntx_psh(); _ScDk.clear();
_ok:=1;
KOMM.init();
{? _sel.first()
|| {!
   |? {? _ScDk.seek(_sel.REF,)
      || {? _ScDk.M().IDMOB='D' & _ScDk.M().IDZP
         || _add2zp:=exec('pobSCEAN2PART','statexam',_pl2mg,_ScDk.SCEAN
                      ,exec('MaskInt2RefSql','#convert',_ScDk.NDK,_ScDk.RDK))
         ?};
         _add2mg:=exec('pobPLUS2MG','statexam',_pl2mg,exec('MaskInt2RefSql','#convert',_ScDk.NDK,_ScDk.RDK));
         _ok*=exec('T4S_add_DK','statexam',_tab,_ScDk.NDK,_ScDk.RDK,'C',,,_add2mg).Result
      ?};
      _sel.next()
   !}
|| {? _ScDk.M().IDMOB='D' & _ScDk.M().IDZP
   || _add2zp:=exec('pobSCEAN2PART','statexam',_pl2mg,_ScDk.SCEAN
                ,exec('MaskInt2RefSql','#convert',_ScDk.NDK,_ScDk.RDK))
   ?};
   _add2mg:=exec('pobPLUS2MG','statexam',_pl2mg,exec('MaskInt2RefSql','#convert',_ScDk.NDK,_ScDk.RDK));
   _ok*=exec('T4S_add_DK','statexam',_tab,_ScDk.NDK,_ScDk.RDK,'C',,,_add2mg).Result
?};
_ScDk.cntx_pop();
:: przesunięcia międzymagazynowe i identyfikacje wg dostaw z partiami
_pl2mg.prefix();
{? _pl2mg.first()
|| {!
   |? _ok*=exec('T4S_add_DK','statexam',_tab,_pl2mg.NDK,_pl2mg.RDK,'C',,,{? ~_pl2mg.SCEAN || 1 || 2 ?}).Result;
      _pl2mg.next()
   !}
?};
obj_del(_pl2mg);
_selkomm:=1;
{? _ok=0
|| _mk_adel:=0;
   _selkomm:=KOMM.select('Zmiana statusu dostawy'@,,,,,,,,,,1)
?};
_tab.first();
_size:=_tab.size();
{? _selkomm & _tab.first()
|| _buf:=exec('T4S','statexam');
   _stats:=exec('choose_STATS','statexam');
   {? _stats<>null()
   || {!
      |? {? ~_tab.ONLY_TW
         || _tab.N_STS:=#_stats;
            _tab.put(1)
         || _len:=_buf.fld_num();
            _buf.blank();
            {! _ii:=1.._len |! _buf[_ii]:=_tab[_ii] !};
            _buf.add(1)
         ?};
         {? _tab.ONLY_TW | _tab.C_STS=_tab.N_STS
         || exec('CleanTableRow','statexam',_tab);
            _size-=1;
            _tab.del()
         || _tab.next()
         ?}
      !};
      {? _tab.first()
       & {? _size=1
          & exec('T4S_edit','statexam',_tab,'REDN')
         || _tab.put(1)

         |? _size>1
          & exec('T4S_select','statexam',_tab,'REDN')
         || 1
         ?}
      || exec('aktSCEAN2TW','statexam',_tab,_buf);
         _applytab:=exec('T4Szapiszzmiany','statexam',_tab)
      |? _tab.first()=0
      || FUN.info(
            'Brak dostaw, dla których jest możliwa zmiana statusu.'
            'Wybrane dostawy posiadają już wybrany status %1.'@
            [exec('FindAndGet','#table',STATS,#_stats,,"''''+N+''''",'')]
         );
         _mk_adel:=0
      ?}
   ?};
   obj_del(_buf);
   ~~
?};
exec('CleanTableData','statexam',_tab);
{? var_pres('_ScDk')>0 & _ScDk.sel_size() & _mk_adel || _ScDk.sel_adel() ?};
1


\choose_STATS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: umozliwia wybor statusu
::   WE: [_a] - STATS.ref()
::       [_b] - Tytul okienka selekcji
::   WY: STATS.ref()/null()
::----------------------------------------------------------------------------------------------------------------------
_sts:={? _>0 & type_of(_a)=type_of(STATS.ref()) || _a || null() ?};
_hdr:={? _>1 & type_of(_b)=type_of('')          || _b || 'Dostępne statusy'@ ?};

_stats:=exec('stats_make','statexam',,);
{? _stats.first()
||
   _statsize:=_stats.size();
   _stats.first();

   _win:=_stats.mk_sel(_hdr,'P',,'#choose_stats',1,,{? _statsize>19 || 20 || _statsize ?},1);
   _stats.win_fld(_win,,'STATUS' ,,,30,,,,1);
   _stats.win_act(_win,,'Formuła','Wybierz'@@        ,,
                                 ,"{? cur_tab(1,1).RSTATS>0 || sel_exit() || FUN.info('Proszę wybrać status.'@);0 ?}",,1
                 );
   _stats.win_act(_win,,'Formuła','Zwiń/rozwiń'@@,,
                                 ,"exec('zwrw_all','#tree',cur_tab(1,1),'PARENT',cur_tab(1,1).win_sel('?'))"
                 );
   _stats.win_act(_win,,'Szukaj');
   _stats.win_act(_win,,'Okienko',             ,,
                                 ,"exec('zwrw_all','#tree',cur_tab(1,1),'PARENT',cur_tab(1,1).win_sel('?'))"
                 );

   _stats.win_fml(_win,,'STATUS' ,,'ICON_BEFORE',"cur_tab(1,1).ICON");
   _stats.win_sopt(_win,'select_record_checkbox=0');

   {!|? _stats.RSTATS<>#_sts & _stats.next() !};

   _stats.win_sel(_win);
   {? _stats.select(,{? _stats.RSTATS<>#_sts || _stats.first() || 1 ?},4)
   || exec('FindAndGet','#table',STATS,_stats.RSTATS,,"STATS.ref()",null())
   || null()
   ?}
|| null()
?}


\stats_make
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: tworzy tabele ze statusami w podziale na rodzaj
::   WE: STRING [_a] - dostepne rodzaje statusow
::       NUMBER [_b] - dodawac 'Wszystkie'?
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kinds:={? _>0 & type_of(_a)=2 || _a || 'ZON' ?};
 _addW:={? _>1 & type_of(_b)=1 || _b || 0     ?};

_stats:=tab_tmp(3
               ,'PARENT','TREE_REF'  ,'Parent'
               ,'LP'    ,'INTEGER'   ,'Lp'
               ,'STATUS','STRING[40]','Status'
               ,'RSTATS','INTEGER'   ,'STATS'
               ,'KIND'  ,'STRING[1]' ,'Rodzaj'
               ,'ICON'  ,'STRING[16]','Ikona'
               );

{? sec_superuser()=0 || _stats.fld_attr(,3) ?};

_parent:={? _addW
         || _stats.blank();
            _stats.STATUS:='Wszystkie RODZAJE'@;
            _stats.KIND:='';
            _icon4all:=exec('get','#params',540010,2,null());
            _stats.ICON:={? _icon4all<>'' || _icon4all || 'xwin16.png:110' ?};
            &_icon4all;
            _stats.add(1);
            _stats.ref()
         || null()
         ?};

STATS.cntx_psh(); STATS.clear();

STATS.index('AKN');
STATS.prefix('T','O');
{? STATS.first()
 & _kinds*'O'
|| _stats.blank();
   _stats.PARENT:=#_parent;
   _stats.LP:=1;
   _stats.STATUS:='nie[O]kreślony (niedostępny)'@;
   _stats.ICON:=exec('get','#params',540010+_stats.LP,2,null());
   _stats.KIND:='O';
   _stats.add();
   _kind:=_stats.ref();
   {!
   |? _stats.PARENT:=#_kind;
      _stats.STATUS:=STATS.N;
      _stats.RSTATS:=#STATS.ref();
      _stats.KIND:=STATS.KIND;
      _stats.ICON:=STATS.ICON;
      _stats.add();
      STATS.next()
   !}
?};
STATS.prefix('T','Z');
{? STATS.first()
 & _kinds*'Z'
|| _stats.blank();
   _stats.PARENT:=#_parent;
   _stats.LP:=2;
   _stats.STATUS:='[Z]godny (dostępny)'@;
   _stats.ICON:=exec('get','#params',540010+_stats.LP,2,null());
   _stats.KIND:='Z';
   _stats.add();
   _kind:=_stats.ref();
   {!
   |? _stats.PARENT:=#_kind;
      _stats.STATUS:=STATS.N;
      _stats.RSTATS:=#STATS.ref();
      _stats.KIND:=STATS.KIND;
      _stats.ICON:=STATS.ICON;
      _stats.add();
      STATS.next()
   !}
?};
STATS.prefix('T','N');
{? STATS.first()
 & _kinds*'N'
|| _stats.blank();
   _stats.PARENT:=#_parent;
   _stats.LP:=3;
   _stats.STATUS:='[N]iezgodny (niedostępny)'@;
   _stats.ICON:=exec('get','#params',540010+_stats.LP,2,null());
   _stats.KIND:='N';
   _stats.add();
   _kind:=_stats.ref();
   {!
   |? _stats.PARENT:=#_kind;
      _stats.STATUS:=STATS.N;
      _stats.RSTATS:=#STATS.ref();
      _stats.KIND:=STATS.KIND;
      _stats.ICON:=STATS.ICON;
      _stats.add();
      STATS.next()
   !}
?};
STATS.cntx_pop();
_stats


\T4S_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Edycja z wykorzystaniem VSTATS.REDN i VSTATS.REDNL
::   WE: TABLE _a - wskazanie na tabele T4S
::       STRING [_b] - akronim okienka (domyslnie REDN)
::       STRING/FORMULA [_c] - formula kontrolna (domyslnie "1")
::   WY: wynik VSTATS.edit()
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
__:=1; _tab:={? _>=__ & type_of(_[__])=type_of(SYSLOG)        || _[__]    || return(_result) ?};
__:=2; _edt:={? _>=__ & type_of(_[__])=2                      || _[__]    || 'REDN'          ?};
__:=3; _chk:={? _>=__ & (type_of(_[__])=2 | type_of(_[__])=3) || $(''+_[__]) || ~~           ?};

_dokl:=ST.DOKL;
:: zeby nie wyszlo na to ze po zaokragleniu jest wiecej niz bylo przed zaokragleniem...
roundmet(1);
VAR_DEL.delete('__dscsql','__datnag');
__dscsql:=exec('FindAndGet','#table',DK,_tab.C_RDK,_tab.C_NDK,"SRDK",'');
_msk:=_tab.C_NDK+3;
ND.cntx_psh();
DK.cntx_psh();
ND.use('nagdo'+_msk);
DK.use('dokma'+_msk);
DK.prefix();
__datnag:={? DK.seek(_tab.C_RDK,_tab.C_NDK) || DK.N().D || date(0,0,0) ?};
ND.cntx_pop();
DK.cntx_pop();

VSTATS.cntx_psh();
:: z tabelki tymczasowej do zmiennej
VSTATS.blank();
VSTATS.DOST_SYM:=_tab.C_SYM+form(_tab.C_DKP);
VSTATS.C_STS:=exec('FindAndGet','#table',STATS,_tab.C_STS,,"STATS.ref()",null());
VSTATS.M:=exec('FindAndGet','#table',M,_tab.M,,"M.ref()",null());
VSTATS.JM:=VSTATS.M().J;
VSTATS.J2:=VSTATS.M().J2;
VSTATS.MGR:=exec('FindAndGet','#table',MGR,_tab.MGR,,"MGR.ref()",null());
VSTATS.C_ILDK:=_tab.C_ILDK;
VSTATS.C_ILSC:=_tab.C_ILSC;
VSTATS.C_ILU:=_tab.C_ILU;
VSTATS.C_ILD:=_tab.C_ILD;
VSTATS.C_IL2:=_tab.C_IL2;
VSTATS.C_TW:=_tab.C_TW;
VSTATS.N_BADH:=exec('FindAndGet','#table',BADH,_tab.N_RBADH,_tab.N_NBADH,"BADH.ref()",null());
VSTATS.N_STS:=exec('FindAndGet','#table',STATS,_tab.N_STS,,"STATS.ref()",null());
VSTATS.N_IL:=_tab.N_IL$_dokl;
VSTATS.N_IL2:=_tab.N_IL2$_dokl;
VSTATS.N_TW:=_tab.N_TW;
VSTATS.N_COMM:=_tab.N_COMMU;
VSTATS.L_BADH:=exec('FindAndGet','#table',BADH,_tab.L_RBADH,_tab.L_NBADH,"BADH.ref()",null());
VSTATS.L_STS:=exec('FindAndGet','#table',STATS,_tab.L_STS,,"STATS.ref()",null());
VSTATS.L_IL:=_tab.L_IL$_dokl;
VSTATS.L_TW:=_tab.L_TW;
VSTATS.L_COMM:=_tab.L_COMMU;
:: ustawienia przed redakcja
VSTATS.N_STS_E:=_tab.N_STS<=0;
VSTATS.L_STS_E:=_tab.L_STS<=0;
VSTATS.N_DIV:={? _tab.N_RDK>0 || 'T' || 'N' ?};
VSTATS.L_DIV:={? _tab.L_RDK>0 || 'T' || 'N' ?};
_nsc:=exec('get','#params',540102,2)='T';
{? VSTATS.N_DIV='T' & _nsc || VSTATS.N_NSC:='T' ?};
{? VSTATS.L_DIV='T' & _nsc || VSTATS.L_NSC:='T' ?};

VSTATS.WS2:={? VSTATS.C_IL2>0 & VSTATS.C_ILD>0 || VSTATS.C_ILD/VSTATS.C_IL2
            |? VSTATS.J2<>null() & VSTATS.C_IL2=0 || exec('oblWSP','jm',VSTATS.M)
            || 0
            ?};
VSTATS.win_edit(_edt);
_enable:={? VSTATS.M().J2<>null() || 'enable=1' || 'enable=0' ?};
VSTATS.efld_opt(_edt,_enable,,'J2');
VSTATS.efld_opt(_edt,_enable,,'N_IL2');
VSTATS.efld_opt(_edt,_enable,,'C_IL2');
VSTATS.efld_opt(_edt,_enable,,'L_IL2');
VSTATS.efld_opt(_edt,_enable,,'WS2');

_dokl:=VSTATS.M().DOKL;

{? type_of(_chk)<>type_of("")
|| _chk:="
          {? VSTATS.L_STS<>null()
           & VSTATS.L_IL>0
           & form(VSTATS.L_COMM)=''
          || FUN.info('Proszę podać przyczynę zmiany statusu tylko dla części dostępnej dostawy.'@);
             'L_COMM'
          || 1
          ?}
         ";
   ~~
?};

:: edycja
{? VSTATS.edit(_chk)
|| _result:=1;
:: jesli zakonczona 1 to ze zmiennej do tabelki tymczasowej
   _tab.C_ILDK:=VSTATS.C_ILDK;
   _tab.C_ILSC:=VSTATS.C_ILSC;
   _tab.C_ILU:=VSTATS.C_ILU;
   _tab.C_ILD:=VSTATS.C_ILD;
   _tab.C_IL2:=VSTATS.C_IL2;
   _tab.C_TW:=VSTATS.C_TW;
   _tab.N_NBADH:=ref_name(VSTATS.N_BADH);
   _tab.N_RBADH:=#VSTATS.N_BADH;
   _tab.N_STS:=#VSTATS.N_STS;
   _tab.N_IL:=VSTATS.N_IL;
   _tab.N_IL2:=VSTATS.N_IL2;
   _tab.N_TW:=VSTATS.N_TW;
   _tab.N_COMMU:=VSTATS.N_COMM;
   _tab.N_NSC:=VSTATS.N_NSC;
   _tab.L_NBADH:=ref_name(VSTATS.L_BADH);
   _tab.L_RBADH:=#VSTATS.L_BADH;
   _tab.L_STS:=#VSTATS.L_STS;
   _tab.L_IL:=VSTATS.L_IL;
   _tab.L_IL2:=VSTATS.N_IL2;
   _tab.L_TW:=VSTATS.L_TW;
   _tab.L_COMMU:=VSTATS.L_COMM;
   _tab.L_NSC:=VSTATS.L_NSC;
:: korekta innych zapisów o terminie w przypadku jego zmiany dla kodu idetyfikacyjnego
   exec('aktTWscean','statexam',_tab,_tab.SCEAN,_tab.N_TW);
   ~~
?};

VSTATS.cntx_pop();
VAR_DEL.delete('__dscsql','__datnag');
_result


\T4S_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Tworzy okienko wertowania dla tabeli T4S i umozliwia redakcje
::   WE: TABLE   _a  - tabela T4S
::       STRING [_b] - akronim wersja okienka edycyjnego
::       NUMBER [_c] - maksymalna dokladnosc dla materialow
::       NUMBER [_d] - 1-automatyczne zatwierdzenia okienka 0(domyślnie)-nie
::   WY: wynik _tab.select()
::----------------------------------------------------------------------------------------------------------------------
__:=1; _tab:={? _>=__ & type_of(_[__])=type_of(SYSLOG) || _[__] || return(_result) ?};
__:=2; _edt:={? _>=__ & type_of(_[__])=2               || _[__] || 'REDN'          ?};
__:=3; _dkl:={? _>=__ & type_of(_[__])=1               || _[__] || ST.DOKL         ?};

_auto:={? var_pres('_d')=type_of(0) || _d || 0 ?};
_tabsize:=_tab.size(); _tab.first();

_wer:=_tab.mk_sel('Zmiana statusów dostaw'@,'P',,'#t4sselect'+(-_edt),1,,{? _tabsize>19 || 0 || _tabsize+1 ?},,'U');
_tab.win_sel(_wer);
_tab.win_fld(_wer,,'C_SYM' ,,,10,    ,,'Dokument'@);
_tab.win_fld(_wer,,'C_DKP' ,,,-3,    ,,'Pozycja'@);
_tab.win_fld(_wer,,'M_KTM' ,,,10,    ,,'Indeks'@);
_tab.win_fld(_wer,,'M_N'   ,,,30,    ,,'Materiał'@);
_tab.win_fld(_wer,,'C_ILDK',,,12,_dkl,,'Ilość dostawy'@);
_tab.win_fld(_wer,,'C_ILSC',,,12,_dkl,,'Ilość stan magazynowy'@);
_tab.win_fld(_wer,,'C_ILU' ,,,12,_dkl,,'Ilość w użyciu'@);
_tab.win_fld(_wer,,'C_ILD' ,,,12,_dkl,,'Ilość dostępna'@);
_tab.win_fld(_wer,,'C_TW'  ,,,10,    ,,'Termin ważności'@);
_tab.win_fld(_wer,,'N_IL'  ,,,12,_dkl,,'Ilość do zmiany'@);
_tab.win_fld(_wer,,'N_TW'  ,,,10,    ,,'Termin do zmiany'@);
{? _edt='REDNL'
|| _tab.win_fld(_wer,,'L_IL'  ,,,12,_dkl,,'Ilość do zmiany'@);
   _tab.win_fld(_wer,,'L_TW'  ,,,10,    ,,'Termin do zmiany'@);
   ~~
?};

_tab.win_fml(_wer,,'C_ILD',,'ICON_BEFORE',"exec('FindAndGet','#table',STATS,cur_tab(1,1).C_STS,,\"STATS.ICON\",'')",2);
_tab.win_fml(_wer,,'N_IL',,'ICON_BEFORE' ,"exec('FindAndGet','#table',STATS,cur_tab(1,1).N_STS,,\"STATS.ICON\",'')",2);
_tab.win_fml(_wer,,'L_IL',,'ICON_BEFORE' ,"exec('FindAndGet','#table',STATS,cur_tab(1,1).L_STS,,\"STATS.ICON\",'')",2);

_tab.win_act(_wer,,'Formuła','Popraw'@@,,
            ,$("_tab:=cur_tab(1,1);{? exec('T4S_edit','statexam',_tab,'"+_edt+"')||_tab.put(1)?};0")
            ,,1);
_tab.win_act(_wer,,'Formuła','Akceptuj'@@,,,"{? FUN.ask('Nanieść zamiany?'@) || sel_exit() ?}");
:: grupowa zmiana statusu
::_tab.win_act(_wer,,'Formuła','sTatus',,, , ,,1,"exec('T4S_stats_chng','statexam',cur_tab(1,1)");
_auto | _tab.select()


\vstats_bfe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol w okienkach edycyjnych zmiennej VSTATS
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_tab:=VSTATS;

{? _fld='DOST_SYM'|| 0
|? _fld='M'       || 0
|? _fld='MGR'     || 0
|? _fld='C_STS'   || 0
|? _fld='C_ILDK'  || 0
|? _fld='C_ILSC'  || 0
|? _fld='C_ILU'   || 0
|? _fld='C_TW'    || 0
|? _fld='C_ILD'   || _tab.C_ILD:=_tab.C_ILSC-_tab.C_ILU;
                     exec('vstats_calc','statexam',_tab);
                     0
|? _fld='C_IL2'   || _tab.C_IL2:=_tab.C_ILSC2-_tab.C_ILU2;
                     0
|? _fld='N_STS'   || _tab.N_STS_E>0
|? _fld='N_BADH'  || _tab.N_BADH_E>0
|? _fld='N_IL'    || 1
|? _fld='N_IL2'   || 1
|? _fld='N_TW'    || ST.MAG().PAL<>'T' & _tab.M().SETW='P'
                   & {? var_pres('__dscsql')>0 || ~exec('ctrlSETW','magdok_wspolne',_tab.M,__dscsql) || 1 ?}
|? _fld='N_COMM'  || _tab.N_IL>0
|? _fld='N_NSC'   || _tab.N_DIV='T' & _tab.M().IDMOB='D' & _tab.M().SETW<>'P'
|? _fld='L_STS'   || _tab.L_STS_E>0
|? _fld='L_BADH'  || _tab.L_BADH_E>0
|? _fld='L_IL'    || 1
|? _fld='L_IL2'   || 1
|? _fld='L_TW'    || ST.MAG().PAL<>'T' & _tab.M().SETW='P'
                   & {? var_pres('__dscsql')>0 || ~exec('ctrlSETW','magdok_wspolne',_tab.M,__dscsql) || 1 ?}
|? _fld='L_COMM'  || _tab.L_IL>0
|? _fld='L_NSC'   || _tab.L_DIV='T' & _tab.M().IDMOB='D' & _tab.M().SETW<>'P'
?}


\vstats_calc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przelicza wartosci pol dla VSTATS
::   WE: _a - wskazanie na VSTATS
::   WY: ~~
::UWAGA: brak kontroli parametrow
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_nsc:=exec('get','#params',540102,2)='T' | (_tab.M().SETW='P' & _tab.C_TW<>_tab.N_TW);
_n_div:=_tab.N_DIV;
_l_div:=_tab.L_DIV;

:: nowa ilosc pozostala
_tab.L_IL:=_tab.C_ILD-_tab.N_IL;

_tab.L_DIV:={? _tab.L_STS<>null()
             & _tab.L_IL>0
             & _tab.L_IL<_tab.C_ILD
            || 'T'
            || 'N'
            ?};
{? _tab.L_DIV='N'            || _tab.L_NSC:='N'
|? _l_div<>_tab.L_DIV & _nsc || _tab.L_NSC:='T'
?};

_tab.N_DIV:={? _tab.L_STS=null()
            || {? _tab.N_IL<_tab.C_ILDK  || 'T' || 'N' ?}
            || {? _tab.N_IL>0 & _tab.C_ILD<_tab.C_ILDK || 'T' || 'N' ?}
            ?};
{? _tab.N_DIV='N'            || _tab.N_NSC:='N'
|? _n_div<>_tab.N_DIV & _nsc || _tab.N_NSC:='T'
?};

~~


\vstats_afe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: po redakcji pol w okienkach edycyjnych zmiennej VSTATS
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_tab:=VSTATS;

_edit:={? _fld='DOST_SYM'|| 0
       |? _fld='M'       || 0
       |? _fld='MGR'     || 0
       |? _fld='C_STS'   || 0
       |? _fld='C_ILDK'  || 0
       |? _fld='C_ILSC'  || 0
       |? _fld='C_ILU'   || 0
       |? _fld='C_ILD'   || 0
       |? _fld='C_ILSC2' || 0
       |? _fld='C_ILU2'  || 0
       |? _fld='C_IL2'   || 0
       |? _fld='C_TW'    || 0

       |? _fld='N_STS'   || {? fld()=null()
                            || FUN.info('Proszę wybrać nowy status.'@); 0
                            |? _tab.N_STS=_tab.C_STS
                            || FUN.info('Proszę wybrać status inny niż obecny.'@); 0
                            || 1
                            ?}

       |? _fld='N_BADH'  || {? fld()=null() || FUN.info('Proszę wybrać badanie.'@); 0 || 1 ?}

       |? _fld='N_IL'    || fld(fld()$VSTATS.M().DOKL);
                            _res:=exec('posjm','statexam');
                            {? ~_res || 0
                            |? _tab.N_IL<0 | (_tab.N_IL=0 & _tab.L_IL<=0)
                            || FUN.info('Proszę podać ilość do zmiany.'@); 0
                            |? _tab.N_IL+_tab.L_IL>_tab.C_ILD
                            || {? _tab.N_IL<=_tab.C_ILD
                               || _tab.L_IL:=_tab.C_ILD-_tab.N_IL; exec('vstats_set_efld_opt','statexam'); 1
                               || FUN.info('Ilość do zmiany nie może być większa od dostępnej\n'
                                          '(z uwzględnieniem aktualnych rezerwacji dla indeksu materiałowego).'@); 0
                               ?}
                            || _tab.L_IL:=_tab.C_ILD-_tab.N_IL; exec('vstats_set_efld_opt','statexam'); 1
                            ?}
       |? _fld='N_IL2'   || _res:=exec('posj2','statexam');
                            {? ~_res || 0
                            |? _tab.N_IL2<0 | (_tab.N_IL2=0 & _tab.L_IL2<=0)
                            || FUN.info('Proszę podać ilość do zmiany.'@); 0
                            |? _tab.N_IL2+_tab.L_IL2>_tab.C_IL2
                            || {? _tab.N_IL2<=_tab.C_IL2
                               || _tab.L_IL2:=_tab.C_IL2-_tab.N_IL2; exec('vstats_set_efld_opt','statexam'); 1
                               || FUN.info('Ilość do zmiany nie może być większa od dostępnej\n'
                                          '(z uwzględnieniem aktualnych rezerwacji dla indeksu materiałowego).'@); 0
                               ?}
                            || _tab.L_IL2:=_tab.C_IL2-_tab.N_IL2; exec('vstats_set_efld_opt','statexam'); 1
                            ?}
       |? _fld='N_TW'    || {? _tab.N_TW=date(0,0,0) & _tab.M().CZY_TW='T'
                            || FUN.info('Indeks materiałowy %1 wymaga podania terminu ważności.'@[_tab.M().KTM]);
                               0
                            |? var_pres('__datnag')>0 & __datnag<>date(0,0,0) & _tab.N_TW<__datnag
                            || FUN.info('Termin ważności jest wcześniejszy od daty dokumentu %1.'@[$__datnag]);
                               0
                            || 1
                            ?}

       |? _fld='N_COMM'  || 1
::                          {? form(fld())='' || FUN.ask('Czy pozostawić puste pole komentarza?'@) || 1 ?}
       |? _fld='N_NSC'   || 1

       |? _fld='L_STS'   || {? fld()=null()
                            || FUN.info('Proszę wybrać status dla pozostałej ilości.'@); 0
                            |? _tab.L_STS=_tab.C_STS
                            || FUN.info('Proszę wybrać status inny niż obecny.'@); 0
                            || 1
                            ?}

       |? _fld='L_BADH'  || {? fld()=null() || FUN.info('Proszę wybrać badanie.'@); 0 || 1 ?}

       |? _fld='L_IL'    || fld(fld()$VSTATS.M().DOKL);
                            exec('vstats_set_efld_opt','statexam');
                            {? _tab.L_IL<0 | (_tab.L_IL=0 & _tab.N_IL<=0)
                            || FUN.info('Proszę podać ilość do zmiany'@); 0
                            |? _tab.N_IL+_tab.L_IL>_tab.C_ILD
                            || {? _tab.L_IL<=_tab.C_ILD
                               || _tab.N_IL:=_tab.C_ILD-_tab.L_IL; 1
                               || FUN.info('Ilość do zmiany nie może być większa od dostępnej\n'
                                          '(z uwzględnieniem aktualnych rezerwacji dla indeksu materiałowego).'@); 0
                               ?}
                            || _tab.N_IL:=_tab.C_ILD-_tab.L_IL; 1
                            ?}

       |? _fld='L_COMM'  || 1
::                          {? form(fld())='' || FUN.ask('Czy pozostawić puste pole komentarza?'@) || 1 ?}

       |? _fld='L_NSC'   || 1

       ?};
{? _edit || exec('vstats_calc','statexam',_tab) ?};
_edit


\nd_dk_stats
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Nadaje/aktualizuje statusy dosatw
::   WE: _a - ND.ref()
::       _b - wymuszenie nadania statusu (domyslnie 0)
::   WY: ~~
::UWAGA: Formula wywolywana w transakcji w akc_dok/mag_fun.fml
::----------------------------------------------------------------------------------------------------------------------
:: jezeli nie jestesmy w transakcji to nie ma sensu tracic energii
{? do_state()=1
|| _NDref:={? _>0 & type_of(_a)=type_of(ND.ref()) || _a || return() ?};
   _force:={? _>1 & type_of(_b)=type_of(1)        || _b || 0 ?};
   ND.cntx_psh();
   DK.cntx_psh();

   DK.index('DOKMAG');
   DK.prefix(_NDref);
   {? DK.first()
    & ND.TYP().P='T'
    & 1+ND.MAG().TYP='D'
   ||
      _dfs_mg:=DK.N().MAG().DEFSTATS;
::    materialy dla magazynu (dokladniej domyslny status materialu w magazynie)
      MX.cntx_psh();
      MX.index('M_MG');
      MX.prefix(DK.N().MAG);
      MX.first();
::    stany cenowe dla magazynu
      SC.cntx_psh();
      SC.index('SN');
      SC.prefix(DK.N().MAG);
      SC.first();
::    teraz spacer po pozycjach dokumentu
      {!
      |?
         _kind:='A';
         _statsM:=exec('statsM','statexam',DK.M);
         _stats:={? _statsM=null() || _dfs_mg || _statsM ?};
         {? MX.find_key(DK.M)
          & MX.A='T'
          & MX.DEFSTATS<>null()
         || _stats:=MX.DEFSTATS;
            ~~
         ?};
         {? DK.STATS=null()
          | _force
         || _kind:='N';
            DK.STATS:=_stats;
            DK.put()
         ?};
::       aktualizacja na SC
         {? SC.find_key(DK.M,#DK.ref(),DK.name())
         || SC.STATS:=DK.STATS;
            SC.put();
            ~~
         ?};
         exec('DK_HS_new4DK','statexam',DK.ref(),_kind,,,DK.STATS);
         DK.next()
      !};
      MX.cntx_pop();
      SC.cntx_pop();
      ~~
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
?}


\mozna_wyc_dost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: zwraca informacje, czy mozna wycofac akceptacje dokumentu przychodowego z historia statusow
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ND.cntx_psh; DK.cntx_psh;

_nd:=
   {? ND.TYP().P='T'
   || ND.ref
   || ND.index('MM');
      ND.prefix($ND.ref,$ND.ref);
      {? ND.first || ND.ref || null ?}
   ?};
_bad:=_sta:=1;

{? _nd
||
   DK.index('DOKMAG');
   DK.prefix(ND.ref());
   {? DK.first
   ||
      DK_HS.cntx_psh;
      DK_HS.index('DK');
      _ok:=1;
      {!
      |?
         DK_HS.prefix(DK.ref);
         {? DK_HS.first
         ||
            _stats:=DK_HS.STATSNEW;
            {!
            |?
               {? _sta || _sta:=DK_HS.STATSNEW=_stats ?};
               {? _bad || _bad:=DK_HS.BADH=null ?};
               DK_HS.next
            !}
         ?};
         {? _sta=0 & _bad=0 || _ok:=0 ?};
         _ok & DK.next
      !};
      DK_HS.cntx_pop
   ?}
?};
ND.cntx_pop; DK.cntx_pop;

_wyn:=0;
{? ~_sta || _wyn+=1 ?};
{? ~_bad || _wyn+=2 ?};

_wyn


\copy_dk_hs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: kopiuje historie zrodlowej dostawy do nowej dostawy (wykorzystywane np. przy rozpisywaniu cech)
::   WE: _a - DK.ref() zrodlowe
::       _b - DK.ref() docelowe
::       _c - DK.IL - ilosc docelowa (gdy brak lub 0, to nie bedzie zmieniana DK_HS.IL)
::       [_d] - DK.IL2 - ilosc docelowa (gdy brak lub 0, to nie bedzie zmieniana DK_HS.IL)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_dk_src:={? _>0 & type_of(_a)=type_of(DK.ref()) || _a || return(-1) ?};
_dk_dst:={? _>1 & type_of(_b)=type_of(DK.ref()) || _b || return(-2) ?};
 _dk_il:={? _>2 & type_of(_c)=type_of(1.1)      || _c || 0          ?};
_dk_il2:={? _>3 & type_of(_d)=type_of(1.1)      || _d || 0          ?};

_tabt:=exec('Tools4Stats','statexam');
{? _dk_src<>null
|| _tabt.cntx_psh();
   _tabt.open_all(ref_name(_dk_src)+3);
   _tabt.clear();
   DK_HS.index('DK');
   DK_HS.prefix(_dk_src);
   {? DK_HS.last()
   ||
      DK_HS.cntx_psh();
      DK_HS.prefix();
      DK_HS.DK:=_dk_dst;
      DK_HS.NDK:=ref_name(_dk_dst);
      DK_HS.RDK:=#_dk_dst;
      DK_HS.IL:={? _dk_il>0 || _dk_il || DK_HS.IL ?};
      DK_HS.IL2:={? _dk_il2>0 || _dk_il2 || 0 ?};
      DK_HS.COMMENT:='Rozpisanie: '+OPERATOR.USER().KOD;
      DK_HS.add(1);
      DK_HS.cntx_pop()
   ?};
   _tabt.cntx_pop()
?};
~~


\SC_WER_bFH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: SC WER kwaliFikacja->Historia
::----------------------------------------------------------------------------------------------------------------------
exec('dk_hs_select4DK','statexam',SC.NDK,SC.RDK);
~~


\dk_hs_select4dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: wyswietla historie statusow dostawy
::   WE: _a - DK.ref()
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_dk_ref:={? _=1 & type_of(_a)=type_of(DK.ref()) || _a || DK.ref() ?};
exec('dk_hs_select4DK','statexam',ref_name(_dk_ref),#_dk_ref)


\dk_hs_select4DK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: wyswietla historie statusow dostawy
::   WE: _a - DK.name()
::       _b - #DK.ref()
::      [_c] - #DK_HS.ref() - rekord, na ktorym nalezy ustawic kursor (gdy 0 lub brak to na pierwszym)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
 _dk_nam:={? _>0 & type_of(_a)=2 || _a || return(-1) ?};
 _dknref:={? _>1 & type_of(_b)=1 || _b || return(-2) ?};
_dkhsset:={? _>2 & type_of(_c)=1 || _c || 0          ?};

{? _dk_nam='' | _dknref=0
|| _dknref:=#DK.ref();
   _dk_nam:=DK.name()
?};

_source:='';
_tabt:=exec('Tools4Stats','statexam');
_tabt.cntx_psh();
_tabt.open_all(_dk_nam+3);
_tabt.clear();
{? DK.seek(_dknref,_dk_nam)
|| _dk_ref:=DK.ref();
   BADVAR.ND:=DK.N;
   DK_HS.index('DK');
   DK_HS.prefix(_dk_ref);
   {? DK_HS.first()
   || {!
      |? _source:=DK_HS.SRC_SQL;
         _source='' & DK_HS.next()
      !}
   ?};
   {? _dkhsset || DK_HS.seek(_dkhsset,) ?};
   DK.cntx_psh;
   {? _source=''
   || DK.win_dict('WER_SM');
      DK_HS.win_sel('WER');
      DK_HS.select(,1,5);
      DK.f_clear()
   || VAR_DEL.delete('__dk_hs');
      __dk_hs:=tab_tmp(2,'DT','DATE','Data'@
                ,'TM','TIME','Godzina'@
                ,'IL','REAL','Ilość'@
                ,'STATSOLD','STRING[20]','Stary status'@
                ,'STATSNEW','STRING[20]','Nowy status'@
                ,'COMMENT','STRING[255]','Komentarz'@
                ,'COMMENTU','STRING[255]','Komentarz użytkownika'@
                ,'USERS','STRING[30]','Operator'@
                ,'TWOLD','DATE','Stary termin ważności'@
                ,'TWNEW','DATE','Nowy termin ważności'@
                ,'IL2','REAL','Ilość w drugiej jednostce miary'@
                ,'SCEANOLD','STRING[30]','Stary kod identyfikacji dostawy'@
                ,'SCEANNEW','STRING[30]','Nowy kod identyfikacji dostawy'@
                ,'KIND','STRING[1]','Rodzaj'@
                ,'SQL','STRING[16]','Ref SQL'@
                ,'NSC','STRING[1]','Nowy kod identyfikacyjny'@);
      _msk:=form(8+_source)+3;
      _akt:=DK.name()+3;
      {? _msk<>_akt
      || exec('mag_psh','open_tab');
         exec('mag_open','open_tab',1+_msk,_msk+2)
      ?};
      DK.cntx_psh();
      DK_HS.cntx_psh();
      DK.prefix();
      {? DK.seek(_source)
      || DK_HS.index('DK');
         DK_HS.prefix(DK.ref());
         {? DK_HS.first()
         || {!
            |? __dk_hs.blank();
               __dk_hs.DT:=DK_HS.DT;
               __dk_hs.TM:=DK_HS.TM;
               __dk_hs.IL:=DK_HS.IL;
               __dk_hs.IL2:=DK_HS.IL2;
               __dk_hs.STATSOLD:=DK_HS.STATSOLD().N;
               __dk_hs.STATSNEW:=DK_HS.STATSNEW().N;
               __dk_hs.TWOLD:=DK_HS.TWOLD;
               __dk_hs.TWNEW:=DK_HS.TWNEW;
               __dk_hs.COMMENT:=DK_HS.COMMENT;
               __dk_hs.COMMENTU:=DK_HS.COMMENTU;
               __dk_hs.USERS:=DK_HS.USERS().DANE;
               __dk_hs.KIND:=DK_HS.KIND;
               __dk_hs.SCEANOLD:=DK_HS.SCEANOLD;
               __dk_hs.SCEANNEW:=DK_HS.SCEANNEW;
               __dk_hs.SQL:=$DK_HS.ref();
               __dk_hs.NSC:=DK_HS.NSC;
               __dk_hs.add(1);
               DK_HS.next()
            !}
         ?}
      ?};
      DK.cntx_pop();
      DK_HS.cntx_pop();
      {? _msk<>_akt
      || exec('mag_pop','open_tab')
      ?};
      _win:=__dk_hs.mk_sel('Żródłowa dostawa'@,'P',0,'#sourcedst',,,,,'U',,,,,,'auto');
      __dk_hs.win_sel(_win);
      __dk_hs.win_fld(_win,,'DT',,,10,,0,'Data'@);
      __dk_hs.win_fld(_win,,'TM',,,5,,0,'Godzina'@);
      __dk_hs.win_fld(_win,,'IL',,,14,4,0,'Ilość'@);
      __dk_hs.win_fld(_win,,'STATSOLD',,,20,,0,'Poprzedni status'@);
      __dk_hs.win_fld(_win,,'STATSNEW',,,20,,0,'Nowy status'@);
      __dk_hs.win_fld(_win,,'COMMENT',,,50,,0,'Komentarz'@);
      __dk_hs.win_fld(_win,,'COMMENTU',,,40,,0,'Komentarz użytkownika'@);
      __dk_hs.win_act(_win,,'Kolejność');
      __dk_hs.win_act(_win,,'Szukaj');
      __dk_hs.win_act(_win,,'Wyświetl',,,,,"exec('FindAndGet','#table',DK_HS,__dk_hs.SQL,,\"display()\",'')");
      __dk_hs.prefix();
      __dk_hs.first();

      _win_grp:=DK_HS.grp_make('Historia zmian statusu'@,"",'#sourcedst_grp',,,"");
      DK_HS.grp_sel(_win_grp,DK_HS,'WER',,"grp_disp(__dk_hs,__dk_hs.win_sel('?'))",,,5,,,,,'maximized_with_title');
      DK_HS.grp_splt(_win_grp,'panel0','horizontal','sourceDST');
      DK_HS.grp_sel(_win_grp,__dk_hs,_win,,"",,,5,"",,,,'maximized_with_title');
      DK.win_dict('WER_SM');
      DK_HS.win_sel(_win_grp);
      DK_HS.select(,1,5);
      DK.f_clear();
      VAR_DEL.delete('__dk_hs')
   ?};
   DK.cntx_pop;
   ~~
?};
_tabt.cntx_pop();
~~


\DK_HS_WER_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed rekord w DK_HS.WER
::----------------------------------------------------------------------------------------------------------------------
{? DK_HS.BADH<>null()
|| DK_HS.win_edit('RED_BAD')
|| DK_HS.win_edit('RED')
?};
~~


\dk_hs_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: szukaj przed DK_HS
::----------------------------------------------------------------------------------------------------------------------
DK.prefix;
ND.cntx_psh;
DK.f_set('P','join ND using(DK.N,ND.reference)',$"DK.PLUS='T' and ND.MAG=:_a",BADVAR.ND().MAG);
ND.cntx_pop;
1


\BADMSEH_prefix
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: ograniczenie dziedziny zestawow badan dla materialu/grupy
::   WE: _a - 1 - grupa
::          [_b] - MGR.ref()
::       _a - 2 - material
::          [_b] - M.ref()
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_way:={? _>0 & type_of(_a)=1 || _a || 0 ?};
_prefix:={? _>1 & type_of(_b)=type_of(M.ref()) || _b || null() ?};
BADVAR.M:=null();
BADVAR.MGR:=null();
BADVAR.TYP_BAD:='M';
{? _way>0 & _way<3
||
   {? _prefix=null()
   || {? _way=1 || _prefix:=MGR.ref()
      |? _way=2 || _prefix:=M.ref()
      ?}
   ?};

   BADMSEH.index({? _way=1 || BADVAR.MGR:=_prefix; BADMSEH.win_edit('REDG'); 'MGRMBAD_'
                 |? _way=2 || BADVAR.M:=_prefix;   BADMSEH.win_edit('REDM'); 'MMGRBAD_'
                 ?}
                );

   {? _prefix<>null()
   || BADMSEH.prefix(_prefix,null());
      BADMSEH.first();
      ~~
   || 'ChkPrefix'
   ?};
   ~~
|| 'Błąd parametrów'
?};
~~


\ikonki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: ikonki pól okien wertowania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
formikon:="{? BADPAR.TYP='R'
           || BADPAR.TYP:=''; 'xwin16.png:46'
           |? BADPAR.TYP='D'
           || BADPAR.TYP:=''; 'xwin16.png:83'
           |? BADPAR.TYP='S'
           || BADPAR.TYP:=''; 'xwin16.png:190'
           |? BADPAR.TYP='W'
           || BADPAR.TYP:=''; 'xwin16.png:187'
           |? BADPAR.TYP='P'
           || BADPAR.TYP:=''; 'xwin16.png:21'
           || BADPAR.TYP:=''; ''
           ?}";
BADPAR.win_fml('WER',BADPAR,'TYP',,'ICON_BEFORE',formikon);
formikon:="{? BADVAR.TYP='R'
           || BADVAR.TYP:=''; 'xwin16.png:46'
           |? BADVAR.TYP='D'
           || BADVAR.TYP:=''; 'xwin16.png:83'
           |? BADVAR.TYP='S'
           || BADVAR.TYP:=''; 'xwin16.png:190'
           |? BADVAR.TYP='W'
           || BADVAR.TYP:=''; 'xwin16.png:187'
           |? BADVAR.TYP='P'
           || BADVAR.TYP:=''; 'xwin16.png:21'
           || BADVAR.TYP:=''; ''
           ?}";
BADSEP.win_fml('WER',BADVAR,'TYP',,'ICON_BEFORE',formikon);
BADSEP.win_fml('WERR',BADVAR,'TYP',,'ICON_BEFORE',formikon);
BADMSEP.win_fml('WER',BADVAR,'TYP',,'ICON_BEFORE',formikon);
formikon:="
   _icon:=exec('pusta','#icon');
   {? BADP.CZY_NAG='T'
   || _icon:='xwin16.png:50'
   ?};
   _icon
";
BADP.win_fml('WER_OP',,'BADPAR','N','ICON_BEFORE',formikon);
BADP.win_fml('OPER_ZL',,'BADPAR','N','ICON_BEFORE',formikon);
~~


\zwr_BADH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JSz [12.30]
:: OPIS: zwraca ref rekordu tabeli BADH dla pozycji dokumentu magazynowego
::   WE: _a - ref rekordu tabeli DK
::   WY: ref tabeli BADH
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_dkhs:=exec('zwrDK_HS','statexam',DK.NDK,DK.RDK,{? DK.PLUS='T' || DK.DOST || DK.N().D ?});
{? _dkhs<>null
|| DK_HS.cntx_psh();
   {? DK_HS.name()+3<>DK.NDK+3
   || DK_HS.use((DK_HS.name()-3)+(DK.NDK+3))
   ?};

   DK_HS.clear();
   {? DK_HS.seek(_dkhs)
   || {? DK_HS.BADH<>null
      || _wyn:=$DK_HS.BADH
      ?}
   ?};
   DK_HS.cntx_pop()
?};
_wyn


\usedBADM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: sprawdzenie wykorzystania zestawu
::   WY: 1-był wykorzystany 0-nie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
BADMSEP.cntx_psh();
BADMSEP.index('BADMHP');
BADMSEP.prefix(BADMSEH.ref());
{? BADMSEP.first()
|| {!
   |? _wyn:=exec('BADMSEP_WERbU','statexam',1);
      ~_wyn & BADMSEP.next
   !}
?};
BADMSEP.cntx_pop();
_wyn


\del4ZLGD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Usuwa badanie dla aktualnego rekordu robocizny
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;
:: Usuwam badanie kontroli jakości
BADH.cntx_psh();
{? ZLGD.BADH<>null()
|| ZLGD.BADH();
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

:: Odpinam badanie od ZLGD
   _badh:=ZLGD.BADH;
   ZLGD.BADH:=null();
   _can_continue:=ZLGD.put();

   {? _can_continue>0
   ||
::    Usuwam badanie
      _can_continue:=exec('BADH_WER_bU','statexam',0,0,0)
   ?};
   {? _can_continue<=0
   ||
      KOMM.add('Do zarejestrowanego wykonania wykonano już badania w module kontroli jakości, których nie można usunąć.'@,2,,1);
      undo()
   ?};

   {? _mydo || end() ?}
?};
BADH.cntx_pop();
:: Usuwam badanie przeprowadzane w trakcie wykonywania operacji
BADH.cntx_psh();
{? ZLGD.BAD_OP<>null()
|| ZLGD.BAD_OP();
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

:: Odpinam badanie od ZLGD
   _badh:=ZLGD.BAD_OP;
   ZLGD.BAD_OP:=null();
   _can_continue:=ZLGD.put();

   {? _can_continue>0
   ||
::    Zmieniam stan badanie, żeby umożliwić usunięcie
      BADH.STAN:='P';
::    Usuwam badanie
      _can_continue:=exec('BADH_WER_bU','statexam',0,0,0)
   ?};
   {? _can_continue<=0
   ||
      KOMM.add('Do zarejestrowanego wykonania wykonano już badania, których nie można usunąć.'@,2,,1);
      undo()
   ?};

   {? _mydo || end() ?}
?};
BADH.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\BADH_WER_bU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Usun w BADH WER
::       Kontekst pracy - bieżący rekord BADH
::   WE: [_a] - INTEGER - 0/[1] - czy sprawdzać czy użytkownik ma uprawnienia do usuwania badań
::       [_b] - INTEGER - 0/[1] - czy pytać o potwierdzenie usunięcia
::       [_c] - INTEGER - [1]/2 - komunikaty na ekran czy do KOMMa
::   WY: 0 - nie udało się usunąć
::       >0 - udało się usunąć
::----------------------------------------------------------------------------------------------------------------------
_chk_upr:=1;
{? var_pres('_a')=type_of(0)
|| _chk_upr:=_a
?};
_ask:=1;
{? var_pres('_b')=type_of(0)
|| _ask:=_b
?};

_komm:=1;
{? var_pres('_c')=type_of(0)
|| _komm:=_c
?};

{? _chk_upr>0
|| {? ~exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK')
   || _msg:='Użytkownik nie ma uprawnień do powoływania i usuwania badań.'@;
      {? _komm=1
      || FUN.info(_msg)
      |? _komm=2
      || KOMM.add(_msg,2,,1)
      ?};
      return(0)
   ?}
?};

_result:=0;

_del:=1;

_txt4ask:='Czy na pewno usunąć badanie?'@;

_testlink:=BADH.testlink();
{? _testlink.first()
|| _txt4ask:='Do badania występują następujące odwołania w systemie:'@+'\n';
   _tabelki:='#';
   {!
   |? {? _tabelki*('#'+_testlink.TABELA+'#')=0
      || {? _testlink.TABELA='BADP'
         ||          _txt4ask+='- '+'parametry badania'@+'\n'

         |? _testlink.TABELA='DK_HS'
         || _del:=0; _txt4ask+='- '+'badane dostawy'@+'\n'

         |? _testlink.TABELA='ZLGD'
         || _del:=0; _txt4ask+='- '+'badanie operacyjne'@+'\n'

         |? _testlink.TABELA='BADO'
         || _del:=0; _txt4ask+='- '+'zestaw badań do niezarejestrowanego wykonania'@+'\n'

         || _del:=0; _txt4ask+='- '+'nieopisane odwołanie - proszę zgłosić do administratora'@+'\n'
         ?};
         _tabelki+=_testlink.TABELA+'#'
      ?};
      _testlink.next()
   !};
   {? BADH.STAN='P' || 1
   |? BADH.STAN='W' || _del:=0; _txt4ask+='Badanie zostało już wykonane.'@+'\n'
   |? BADH.STAN='Z' || _del:=0; _txt4ask+='Badanie zostało już zaakceptowane.'@+'\n'
   ?};
   {? _del
   || _txt4ask+='\n'+'Czy na pewno usunąć zestaw badań?'@
   || _txt4ask+='\n'+'Usunięcie zestawu jest niemożliwe.'@
   ?}
?};

{? _del>0
||
   {? _ask>0
   || _del:=FUN.ask(_txt4ask)
   ?};
   {? _del>0
   || BADP.cntx_psh();
      BADP.index('BADHBPAR');
      BADP.prefix(BADH.ref());
      {? BADP.first()
      || {!
         |? BADP.del()
         !}
      ?};
      BADP.cntx_pop();
      POM.cntx_psh();
      POM.TAB:='BADH';
      POM.TYPDOK:='BAD';
      numer:=BADH.NR;
      oldnumer:=1;
      exec('nr_old','numery');
      exec('deladok','dokum','BADH');
      _result:=BADH.del(,1);
      POM.cntx_pop()
   ?};
   ~~
|? _del=0
 & _txt4ask<>''
|| {? _komm=1
   || FUN.info(_txt4ask)
   |? _komm=2
   || KOMM.add(_txt4ask,2,,1)
   ?};
   ~~
?};
_result


\BADH_akceptuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Akceptuje badanie
::   WE: _a - BADH.ref() - badanie
::       _b - STRING - nowy stan
::       _c - STRING - wynik P/N
::      [_d] - INTEGER - 0/[1]- czy dla badań operacyjnych uruchamiać kwalifikację dla ZLGD podczas
::                              zatwierdzania finalnego
::      [_e] - STRING - $ZLGD.ref()/$ZGP.ref() - dla badań operacyjnych, pozycja przewodnika z którego pochodzi operacja
::   WY: wynik BADH.put()
::----------------------------------------------------------------------------------------------------------------------
 _badh:={? _>0 & type_of(_a)=type_of(BADH.ref()) || _a   || BADH.ref() ?};
 _nowy:={? _>1 & type_of(_b)=type_of('')         || ~-_b || 'P'        ?};
_wynik:={? _>2 & type_of(_c)=type_of('')         || ~-_c || {? _nowy='Z' || return(0) || '' ?} ?};
_zldg:=1;
{? var_pres('_d')=type_of(0)
|| _zldg:=_d
?};
_ref:={? var_pres('_e')=type_of('a') || _e || '' ?};

{? 'WZ'*_nowy=0 || _nowy:='' ?};

_result:=0;

_tabt:=exec('Tools4Stats','statexam');
_tabt.cntx_psh();
_tabt.clear();

BADH.cntx_psh();
BADH.clear();
{? BADH.seek(_badh)
 & _nowy<>''
|| {? _nowy='W'
   || BADH.MAD_DT:=date();
      BADH.MAD_TM:=time();
      BADH.MAD_USER:=OPERATOR.USER;
      BADH.STAN:='W';
      _result:=BADH.put()

   |? _nowy='Z'
   || BADH.AKC_DT:=date();
      BADH.AKC_TM:=time();
      BADH.AKC_USER:=OPERATOR.USER;
      BADH.STAN:='Z';
      BADH.WYNIK:=_wynik;
      {? BADH.TYP='O'
      || {? _ref*'zguidep' || BADH.POOP:='N' || BADH.POOP:='T' ?}
      ?};
      _result:=BADH.put();
::    teraz poszukamy dostaw, ktore wyslano do tego badania
      _applytab:=1;
      BADH.cntx_psh();
      {? _result=1
      ||
         {? _wynik='P'
         || _stats_N:=BADH.STATS_Z; _stats_L:=BADH.STATS_N
         || _stats_N:=BADH.STATS_N; _stats_L:=BADH.STATS_Z
         ?};

         _tabcon:=exec('BADH_powiazane','statexam',BADH.ref(),0);
         {? _tabcon.first()
         ||
            _tab:=exec('T4S','statexam');
            _pl2mg:=tab_tmp(1,'REF','STRING[16]',''
                      ,'MG','STRING[16]',''
                      ,'MD','STRING[16]',''
                      ,'IL','REAL',''
                      ,'RDK','INTEGER',''
                      ,'NDK','STRING[8]','');

            KOMM.init();
            _T4Sadd:=obj_new(2);
            _ok:=1;
            _add2mg:=0;
            {!
            |?
               {? _tabcon.NDK<>''
               || obj_del(_T4Sadd);
                  {? (_scean:=exec('FindAndGet','#table',DK,_tabcon.RDK,_tabcon.NDK
                               ,"{? M().IDMOB='D' & M().IDZP || SCEAN || '' ?}",''); _scean<>'')
                  || _add2zp:=exec('pobSCEAN2PART','statexam',_pl2mg,_scean
                               ,exec('MaskInt2RefSql','#convert',_tabcon.NDK,_tabcon.RDK))
                  ?};
                  _add2mg:=exec('pobPLUS2MG','statexam',_pl2mg
                            ,exec('MaskInt2RefSql','#convert',_tabcon.NDK,_tabcon.RDK));
                  _T4Sadd:=exec('T4S_add_DK','statexam',_tab,_tabcon.NDK,_tabcon.RDK,'L',,,_add2mg);
                  {? _T4Sadd.Result
                   & _tab.seek(_T4Sadd.Ref)
                  ||
                     _tab.N_STS:=#_stats_N;
                     _tab.N_NBADH:=BADH.name();
                     _tab.N_RBADH:=#BADH.ref();

                     _tab.L_STS:=#_stats_L;
                     _tab.L_NBADH:=BADH.name();
                     _tab.L_RBADH:=#BADH.ref();

                     _tab.put()
                  || _ok:=0
                  ?}
               ?};
               _tabcon.next()
            !};
            _buf:=exec('T4S','statexam');
::          przesunięcia międzymagazynowe
            _pl2mg.prefix();
            {? _pl2mg.first()
            || {!
               |? obj_del(_T4Sadd);
                  _T4Sadd:=exec('T4S_add_DK','statexam',_tab,_pl2mg.NDK,_pl2mg.RDK,'L',,,{? ~_pl2mg.SCEAN || 1 || 2 ?});
                  {? _T4Sadd.Result
                   & _tab.seek(_T4Sadd.Ref)
                  ||
                     {? ~_tab.ONLY_TW
                     ||
                        _tab.N_STS:=#_stats_N;
                        _tab.N_NBADH:=BADH.name();
                        _tab.N_RBADH:=#BADH.ref();

                        _tab.L_STS:=#_stats_L;
                        _tab.L_NBADH:=BADH.name();
                        _tab.L_RBADH:=#BADH.ref();

                        _tab.put(1)
                     || _len:=_buf.fld_num();
                        _buf.blank();
                        {! _ii:=1.._len |! _buf[_ii]:=_tab[_ii] !};
                        _buf.add(1);
                        _tab.del()
                     ?}
                  || _ok:=0
                  ?};
                  _pl2mg.next()
               !}
            ?};
            obj_del(_pl2mg);
            _selkomm:=1;
            {? _ok=0 | _add2mg
            || _selkomm:=KOMM.select('Akceptacja badania - zmiana statusów badanych dostaw.'@,,,,,,,,,,1)
            ?};
            {? _selkomm & _tab.first()
            || _applytab:=0;
               _size:=_tab.size();
               {? _tab.first()
               || {? {? _size=1
                      & exec('T4S_edit','statexam',_tab,'REDNL')
                     || _tab.put(1)

                     |? _size>1
                      & exec('T4S_select','statexam',_tab,'REDNL')
                     || 1
                     ?}
                  || exec('aktSCEAN2TW','statexam',_tab,_buf);
                     _applytab:=exec('T4Szapiszzmiany','statexam',_tab).Result
                  ?};
                  ~~
               ?};
               ~~
            || _applytab:=-1
            ?};
            obj_del(_buf);
            ~~
         ?};
::       Akceptacja badania operacyjnego - uwalnia ilość na ZLGD i puszcza proces dalej do rejestracji
         {? BADH.TYP='O' & _zldg>0
         || _args_zlgd:=obj_new('RESULT','WYNIK');
            _args_zlgd.RESULT:=0;
            _args_zlgd.WYNIK:=_wynik;
            {? _ref*'zlgd'
            || ZLGD.cntx_psh();
               _msk_old:=ZLGD.name();
               _msk_new:=ref_name(_ref);
               {?_msk_old<>_msk_new
               || ZLGD.use(_msk_new)
               ?};
               ZLGD.clear();
               {? ZLGD.seek(_ref)
               || _args_zlgd.RESULT:=exec('zlgd_kwalifik','zl_wyk',_args_zlgd.WYNIK,0)
               ?};
               ZLGD.cntx_pop()
            |? _ref*'zguidep'
            || BADO.win_edit('KWAL');
               BADO.blank();
               _valid:="
                  _res:=1;
                  {? BADO.IL_BRAK<=0
                  || FUN.info('Kwalifikowana liczba braków musi być większa od zera'@);
                     _res:='IL_BRAK'
                  |? BADH.ZGP<>null
                  ||
                     {? exec('get','#params',500631,2)='T'
                     || _pop:=exec('il_pop','zl_guide',BADH.ZGP);
                        ZGP.cntx_psh();
                        ZGP.prefix();
                        BADH.ZGP();
                        {? _pop.FIRST=0
                        || _il:=_pop.IL_POP-ZGP.IL-ZGP.DEK_IL-ZGP.IL_BRAK-ZGP.DEK_BR;
                           {? BADO.IL_BRAK>_il
                           || FUN.info('Wpisana ilość braków jest większa od ilości, którą można jeszcze zarejetrować do operacji.\n'
                                       'Kwalifikowana liczba braków nie może być większa od %1.'@[$_il]);
                              _res:='IL_BRAK'
                           ?}
                        ?};
                        ZGP.cntx_pop()
                     ?}
                  ?};
                  _res
               ";
               {? BADO.edit(_valid)
               || BADO.BADH:=BADH.ref;
                  BADO.ZGP:=BADH.ZGP;
                  BADO.ILP:=BADO.IL_BRAK;
                  BADO.MAD_DT:=date();
                  BADO.MAD_TM:=time();
                  BADO.MAD_USER:=OPERATOR.USER;
                  _args_zlgd.RESULT:=BADO.add()
               ?}
            ?};
            _applytab:=_args_zlgd.RESULT
         ?};
         ~~
      ?};
      BADH.cntx_pop();
      {? _applytab<=0
      || BADH.AKC_DT:=date(0,0,0);
         BADH.AKC_TM:=time(0,0,0);
         BADH.AKC_USER:=null();
         BADH.STAN:='W';
         BADH.WYNIK:='O';
         _result:=BADH.put();
         ~~
      ?};
      ~~
   ?}
?};
BADH.cntx_pop();
_tabt.cntx_pop();
_result


\BADH_powiazane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Przygotowuje liste elementow powiazanych z badaniem
::   WE: _a - BADH.ref(), gdy brak to biezacy
::       _b - wyswietlic okno? 1/0
::   WY: uchwyt do tabeli powiazanych
::----------------------------------------------------------------------------------------------------------------------
_badh:={? _>0 & type_of(_a)=type_of(BADH.ref()) || _a || BADH.ref() ?};
_show:={? _>1 & type_of(_b)=type_of(1)          || _b || 1          ?};

_tabcon:=tab_tmp(3
                ,'PARENT'  ,'TREE_REF'   ,'Rodzic'
                ,'N'       ,'STRING[40]' ,'Dokument'
                ,'D'       ,'DATE'       ,'Data dokumentu'
                ,'DT'      ,'DATE'       ,'Data'
                ,'TM'      ,'TIME'       ,'Godzina'
                ,'M_KTM'   ,'STRING[50]' ,'Indeks'
                ,'M_N'     ,'STRING[100]','Materiał'
                ,'MGR_KOD' ,'STRING[8]'  ,'Grupa'
                ,'MGR_NAZ' ,'STRING[30]' ,'Grupa - nazwa'
                ,'DK_STATS','STRING[40]' ,'Status dostawy'
                ,'MG_SYM'  ,'STRING[10]' ,'Magazyn'
                ,'DESCRIPT','STRING[100]','Opis'
                ,'AFTLAB'  ,'REAL'       ,'Po badaniu'
                ,'LEFT'    ,'REAL'       ,'Pozostało'
::              techniczne pola
                ,'X_CANDEL','INTEGER'   ,'Mozna kasowac'
                ,'NDK'     ,'STRING[8]' ,'maska rekordu DK'
                ,'RDK'     ,'INTEGER'   ,'nr rekordu DK'
                ,'NDK_HS'  ,'STRING[8]' ,'maska rekordu DK_HS'
                ,'RDK_HS'  ,'INTEGER'   ,'nr rekordu DK_HS'
                ,'X_ICON'  ,'STRING[16]','ikona'
                );
_startndx:=_tabcon.index('?');
_tabconX:=_tabcon.ndx_tmp(,
                         ,'NDK',,
                         ,'RDK',,
                         );
_tabcon.index(_tabconX);

{? _show
|| _win:=_tabcon.mk_sel('Pozycje powiązane z badaniem'@,'P',0,'#badhconnectsel',1,1,,1);
   _tabcon.win_sel(_win);
   _tabcon.win_fld(_win,,'N'       ,,,30);
   _tabcon.win_fld(_win,,'D'       ,,,10);
   _tabcon.win_fld(_win,,'MG_SYM'  ,,, 8);
   _tabcon.win_fld(_win,,'M_KTM'   ,,,15);
   _tabcon.win_fld(_win,,'M_N'     ,,,20);
   _tabcon.win_fld(_win,,'DT'      ,,,10);
   _tabcon.win_fld(_win,,'TM'      ,,, 8);
   _tabcon.win_fld(_win,,'DESCRIPT',,,40);
   _tabcon.win_fld(_win,,'AFTLAB'  ,,,10,3);
   _tabcon.win_fld(_win,,'LEFT'  ,,,10,3);

   _tabcon.win_act(_win,,'Okienko',             ,,,"exec('zwrw_all','#tree',cur_tab(1,1),'PARENT',cur_tab(1,1).win_sel('?'))");
   _tabcon.win_act(_win,,'Formuła','Rozwiń/&zwiń'@@,,,"exec('zwrw_all','#tree',cur_tab(1,1),'PARENT',cur_tab(1,1).win_sel('?'))");
   _tabcon.win_act(_win,,'Formuła','Historia'@@,,,"_tab:=cur_tab(1,1);
                                                    exec('dk_hs_select4DK','statexam',_tab.NDK,_tab.RDK,_tab.RDK_HS)
                                                   ",,1);
   _fb:="
      {? ~FUN.ask('Usunąć dostawę z badania?'@) || return ?};
      do;
      _Tab:=cur_tab(1,1);
      _dk:=_stats:=null;
      DK_HS.cntx_psh;
      DK_HS.use(_Tab.NDK_HS);
      DK_HS.index('NDKRDKDG');
      DK_HS.prefix(_Tab.NDK,_Tab.RDK);
      {? DK_HS.first
      ||
         {!
         |?
            _dk:=DK_HS.DK;
            _stats:=DK_HS.STATSNEW;
            BADH.cntx_psh;
            _sym:=DK_HS.BADH().SYM;
            BADH.cntx_pop;
            DK_HS.BADH:=null;
            DK_HS.put & DK_HS.next
         !}
      ?};
      DK_HS.cntx_pop;
      {? _dk & _stats
      ||
         exec('DK_HS_new4DK','statexam',_dk,'C','Usunięte z badania '+_sym,,_stats);
         _Tab.del
      ||
         undo
      ?};
      end
   ";
   _tabcon.win_act(_win,,'Formuła','Usuń'@@,,,_fb);
   _tabcon.win_fml(_win,,'N'   ,,'ICON_BEFORE',"cur_tab(1,1).X_ICON");
   _fb:="
      _Tab:=cur_tab(1,1);
      _stan:='';
      {? _Tab.PARENT
      ||
         DK_HS.cntx_psh;
         DK_HS.use(_Tab.NDK_HS);
         DK_HS.prefix;
         {? DK_HS.seek(_Tab.RDK_HS,) || _stan:=DK_HS.BADH().STAN ?};
         DK_HS.cntx_pop
      ?};
      _Tab.actions(_Tab.win_sel('?'),
         {? _Tab.PARENT
         || {? ~exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK') | _stan='Z' | _stan='' || 'U' || '' ?}
         || 'HU'
         ?},,1);
      ~~
   ";
   _tabcon.win_act(_win,,'Rekord',,,,_fb);

   {? sec_superuser()=0
   ||  _tabcon.fld_attr(,2);
       _tabcon.fld_attr('M_KTM',3);
       _tabcon.fld_attr('M_N',3);
       _tabcon.fld_attr('MGR_KOD',3);
       _tabcon.fld_attr('MGR_NAZ',3);
       _tabcon.fld_attr('DK_STATS',3);
       ~~
   ?};
   ~~
?};

_testlink:=exec('FindAndGet','#table',BADH,_badh,,"testlink()",~~);
{? type_of(_testlink)>100
||

   _tabt:=exec('Tools4Stats','statexam');
   _tabt.cntx_psh();
   _tabt.clear();

   M.cntx_psh(); M.clear();
   MGR.cntx_psh(); MGR.clear();

   _ytab:=tab_tmp(4
                 ,'TABLE','STRING[8]','Tabela'
                 ,'DUMMA','INTEGER'  ,''
                 ,'SUFIX','STRING[8]','Sufiks'
                 ,'DUMMB','INTEGER'  ,''
                 );

   {? _testlink.first()
   ||
      {!
      |?
         _sufix:={? _testlink.TABELA='DK_HS' || _testlink.MASKA+3
                                             || ''
                 ?};

         {? _sufix<>''
          & ~_ytab.find_key(_testlink.TABELA,0,_sufix,0)
         || _ytab.blank();
            _ytab.TABLE:=_testlink.TABELA;
            _ytab.SUFIX:=_sufix;
            _ytab.add()
         ?};
         _testlink.next()
      !}

   ?};
   obj_del(_testlink); &_testlink;
:: mamy juz 'roczniki', wiec mozemy rozpoczac wedrowke po latach
   {? _ytab.first()
   ||
::    najpierw historia dostaw
      _ytab.prefix('DK_HS',0);
      {? _ytab.first()
      || _tabcon.blank();
         _tabcon.N:='Badania dostaw';
         _tabcon.X_CANDEL:=1;
         _tabcon.add();
         _parent:=#_tabcon.ref();
         {!
         |? _tabt.open_all(_ytab.SUFIX);
            _tabt.clear();
            DK_HS.index('BADHDTTM');
            DK_HS.prefix(_badh);
            {? DK_HS.first()
            || {!
               |? {? ~_tabcon.find_key(DK_HS.NDK,DK_HS.RDK)
                   & DK.seek(DK_HS.RDK,)
                   & ND.seek(DK.N)
                  || {? ND.TYP().P<>'T'
                     || DK_HS.del()
                     || _tabcon.blank();
                        _tabcon.PARENT:=_parent;
                        _tabcon.N:=ND.SYM+' poz.'+form(DK.P,,,'99');
                        _tabcon.D:=ND.D;
                        _tabcon.DT:=DK_HS.DT;
                        _tabcon.TM:=DK_HS.TM;
                        _tabcon.M_KTM:=DK.M().KTM;
                        _tabcon.M_N:=DK.M().N;
                        _tabcon.MGR_KOD:=DK.M().MGR().KOD;
                        _tabcon.MGR_NAZ:=DK.M().MGR().NAZ;
                        _tabcon.MG_SYM:=DK.N().MAG().SYM;
                        _tabcon.AFTLAB:=DK_HS.IL;
                        _tabcon.LEFT:=_tabcon.AFTLAB;
                        _tabcon.NDK:=DK_HS.NDK;
                        _tabcon.RDK:=DK_HS.RDK;
                        _tabcon.NDK_HS:=DK_HS.name();
                        _tabcon.RDK_HS:=#DK_HS.ref();
                        _tabcon.DESCRIPT:={? DK_HS.KIND='S' || 'Dostawa w badaniu.'
                                          |? DK_HS.KIND='L' || 'Dostawa została zbadana.'
                                                            || ''
                                          ?};
                        _tabcon.X_ICON:=DK.STATS().ICON;
                        _last:=exec('GetLastHS4DK','statexam',DK_HS.NDK,DK_HS.RDK);
                        _tabcon.X_CANDEL:=0;
                        {? _last=DK_HS.ref()
                        || _tabcon.X_CANDEL:=1;
                           _scs:=exec('GetSCS4DK','statexam',DK.RDK, DK.NDK);
                           {? _scs<DK.IL
                           || _tabcon.X_CANDEL:=0
                           || _uzycie:=exec('uzycie_dostawy','magdok_wspolne',DK.RDK,DK.NDK,DK.M).Result2;
                              {? _uzycie>0
                              || _tabcon.LEFT:=_tabcon.AFTLAB-_uzycie;
                                 _tabcon.X_CANDEL:=0
                              ?}
                           ?}
                        ?};
                        _tabcon.add();
                        DK_HS.next()
                     ?}
                  || DK_HS.next()
                  ?}
               !}
            ?};
            _ytab.next()
         !}
      ?}
   ?};
   _tabt.cntx_pop();
   M.cntx_pop();
   MGR.cntx_pop();
   ~~
?};
_tabcon.index(_startndx);
{? _tabcon.first()
 & _show
|| _tabcon.select()
|? _show
|| FUN.info('Brak powiązań.'@)
?};
_tabcon


\GetLastHS4DK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: zwraca ostatni rekord DK_HS dla dostawy wg DK
::   WE: STRING _a - DK.name()
::       NUMBER _b - #DK.ref()
::   WY: ostatni DK_HS.ref()
::----------------------------------------------------------------------------------------------------------------------
_nam:={? _>0 & type_of(_a)=2 || _a || return(-1) ?};
_ref:={? _>1 & type_of(_b)=1 || _b || return(-2) ?};

{? _nam='' | _ref=0
|| _ref:=#DK.ref();
   _nam:=DK.name()
?};

_last:=null();
DK_HS.cntx_psh();
DK_HS.clear();
{? DK_HS.name()+3<>_nam+3
|| DK_HS.use((DK_HS.name()-3)+(_nam+3))
?};
DK_HS.index('NDKRDKDG');
DK_HS.prefix(_nam,_ref);
{? DK_HS.last()
|| _last:=DK_HS.ref()
?};
DK_HS.cntx_pop();
_last


\GetSCS4DK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Zwraca wartosc SC.S dla podanego NDK i RDK
::   WE:  _a  - DK.RDK
::       [_b] - DK.NDK
::   WY: SC.S
::----------------------------------------------------------------------------------------------------------------------
__:=2; _rdk:={? _>=__ & type_of(_[__])=type_of(1)             || _[__] || #DK.ref() ?};
__:=1; _ndk:={? _>=__ & type_of(_[__])=type_of('')            || _[__] || DK.name() ?};
_result:=0;
SC.cntx_psh();
SC.index('SRN');
SC.prefix(_rdk,_ndk);
{? SC.first()
 & SC.A='T'
 & SC.S>0
||
   _result:=SC.S
?};
SC.cntx_pop();
_result


\BADSEH_TYP_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.46]
:: OPIS: Wartość początkowa pola BADSEH.TYP
::----------------------------------------------------------------------------------------------------------------------
BADVAR.TYP_BAD


\BADSEH_TYP_bE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.46]
:: OPIS: Przed redagowaniem pola BADSEH.TYP
::----------------------------------------------------------------------------------------------------------------------
1


\BADH_WER_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.46]
:: OPIS: Przed rekord dla okna BADH.WER
::----------------------------------------------------------------------------------------------------------------------
{? BADH.TYP='M'
|| BADVAR.TYP_OPIS:='Magazynowy'@
|| BADVAR.TYP_OPIS:='Operacyjny'@
?};
~~


\kwalifikacjadst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: wyswietla pozycje dostaw wg statusow
::----------------------------------------------------------------------------------------------------------------------
:: najpierw okienko z dostawami w podziale na status
_MGref:={? _>0 & type_of(_a)=type_of(MG.ref()) || _a || ST.MAG ?};

{? _MGref=null()
|| FUN.info('Brak aktywnego magazynu.\nOpcja niedostępna.'@);
   return(0)
?};
{? _MGref<>null() & ~(exec('FindAndGet','#table',MG,$_MGref,,"TYP",'')*'DOST')
|| FUN.info('Aktywny magazyn nie jest typu %1.\nOpcja niedostępna.'@['DOSTAWY lub DOSTEWI']);
   return(0)
?};

_palety:=exec('FindAndGet','#table',MG,$_MGref,,"PAL='T'",0);

SC.win_fml('WER_KD' ,,'S',,'ICON_BEFORE',"SC.STATS().ICON",2);

VAR_DEL.delete('KwalDost');
KwalDost:=obj_new('StatsTab'
                 ,'StatsWin'
                 ,'StatsGrp'
::               narzedzia do tabel
                 ,'tabt'
::               obsluga okienek
                 ,'grp_bo'
                 ,'win_bo'
                 ,'win_bZ'
                 ,'win_arf'
::             dane do stanow cenowych
::               akronim okna SC
                 ,'SCwin'
::               akronim aktualnego indeksu dla SC
                 ,'SCndxSTS'
::               akronim aktualnego indeksu dla SC
                 ,'SCndxKND'
::               akronim aktualnego indeksu dla SC
                 ,'SCndxALL'
::               odswiezanie nie zakladki
                 ,'SCdispl'
::               wskazanie na magazyn
                 ,'MGref'

                 );
_stats:=exec('stats_make','statexam',,1);
KwalDost.StatsTab:=_stats;

_tabt:=exec('Tools4Stats','statexam');
KwalDost.tabt:=_tabt;

KwalDost.grp_bo:="grp_disp(KwalDost.StatsTab,KwalDost.StatsWin); ~~";
KwalDost.win_bo:="KwalDost.StatsTab.tr_set(1,KwalDost.StatsWin,1); ~~";
KwalDost.win_bZ:="exec('zwin_rozwin','#tree'); 0";

_win:=_stats.mk_sel('Statusy'@,'P',0,'#statstree',1,,,1);
_stats.win_fld(_win,,'STATUS' ,,,25,,,,1);
_stats.win_act(_win,,'Formuła','Zwiń/rozwiń'@@,,,"KwalDost.win_bZ()");
_stats.win_act(_win,,'Szukaj');
_stats.win_act(_win,,'Okienko',             ,,,"KwalDost.win_bo()");

_stats.win_fml(_win,,'STATUS' ,,'ICON_BEFORE',"cur_tab(1,1).ICON");
_formbad:="exec('Badania_sel_','statexam')";
_stats.win_act(_win,,'Formuła','Badania'@@,,,_formbad,,,,,,'B');
task_attach('LMG_BAD_PBAD'); task_attach('LMG_BAD_DWYK'); task_attach('LMG_BAD_EAKC');
_stats.win_btn(_win,'text=%1,btn_label_align=center,panel=bottom,align=begin'['Badania'@],'menu:B',,,,,,'noempty');
task_attach('LMG_BAD_PBAD'); task_attach('LMG_BAD_DWYK'); task_attach('LMG_BAD_EAKC');
KwalDost.StatsWin:=_win;
_stats.win_sopt(_win,'select_record_checkbox=0');

_txt:={? _MGref
      || 'Kwalifikacja dostaw w magazynie %1'@[exec('FindAndGet','#table',MG,$_MGref,,"SYM",'')]
      || 'Kwalifikacja dostaw we wszystkich magazynach'@
      ?};
_grp:=_stats.grp_make(_txt,"KwalDost.grp_bo()",'#kwalifostawgrp',,,"exec('exit','zws',_a)");
KwalDost.StatsGrp:=_grp;

KwalDost.win_arf:="KwalDost.SCdispl:=1; grp_disp(SC,KwalDost.SCwin,1,0);
                   {? ST.MAG().PAL='T' || grp_disp(PAL,'BAD',1,0) ?};~~";
_stats.grp_sel(_grp ,_stats,_win,,"KwalDost.win_arf()",,,15,,,,,'maximized');
_stats.grp_splt(_grp,'','vertical','prawy','0, 33%');

KwalDost.SCndxSTS:='MGSTSMD';
KwalDost.SCndxKND:='MGKMD';
KwalDost.SCndxALL:='MGKMD';

KwalDost.SCdispl:=0;
KwalDost.SCwin:='WER_KD';
KwalDost.MGref:=_MGref;

DK_C.win_patt('SZUKA');
DK_C.win_edit('RED');
DK_C.win_dict('WER');
_act:=DK_C.actions('WER','DuP:D');
:: teraz dodajemy zakladki dla SC
_tabt.cntx_psh(); _tabt.clear();

OKR.cntx_psh();
OKR.index('MC'); OKR.prefix(REF.FIRMA,1);
_il:=0;
_st:=0;
{? OKR.last()
||
   _loop:=1;
   _panel:=0;
   _badan:=0;
   {!
   |?
      SC.use('stc__'+ST.ODDZ+($OKR.ROK+2));
      SC.index(KwalDost.SCndxALL);
      SC.prefix(KwalDost.MGref);
      {? SC.first() | _loop=0
      || _il+=1;
         _st+=SC.first();
         _stats.grp_sel(_grp
                       ,SC
                       ,KwalDost.SCwin
                       ,$OKR.ROK
                       ,"
                         {? KwalDost.SCdispl=1
                         || grp_disp(SC,KwalDost.SCwin,0,1)
                         ?};
                         KwalDost.SCdispl:=0;
                         ATR.MJS:='SC';
                         exec('odsw_sc','magazyn_stan',2)
                        "
                       ,
                       ,0
                       ,20
                       ,$("
                           _rok:="+$OKR.ROK+";
                           KwalDost.tabt.open_all(ST.ODDZ+($_rok+2));
                           KwalDost.tabt.clear();
                           _stats:=KwalDost.StatsTab;
                           {? _stats.RSTATS>0
                           || SC.index(KwalDost.SCndxSTS);
                              SC.prefix(KwalDost.MGref,exec('FindAndGet','#table',STATS,_stats.RSTATS,,'ref()',null()))

                           |? _stats.KIND<>''
                           || SC.index(KwalDost.SCndxKND);
                              SC.prefix(KwalDost.MGref,_stats.KIND)

                           || SC.index(KwalDost.SCndxALL);
                              SC.prefix(KwalDost.MGref)
                           ?};
                           SC.first();
                           {? (1+SC.MAG().TYP)='D' & ATR.CZY_ATR
                           || czy_dsp:=1;
                              _badp:=0;
                              {? exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_PBAD')
                              || _badp:=1;
                                 DK_HS.use('dokhs'+ST.ODDZ+($_rok+2))
                              ?};
                              ATR.MJS:='SC';
                              exec('odsw_sc','magazyn_stan',2)
                           |? (1+SC.MAG().TYP)='D' & exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_PBAD')
                           || czy_dsp:=1;
                              _badp:=1;
                              DK_HS.use('dokhs'+ST.ODDZ+($_rok+2));
                              ATR.MJS:='SC';
                              exec('odsw_sc','magazyn_stan',2)
                           ?}
                          "
                         )
                       ,
                       ,
                       ,
                       ,'maximized_with_title'
                       ,'main'+$_il
                       );
         {? (1+SC.MAG().TYP)='D' & ATR.CZY_ATR & ~_panel
         || _panel:=1
         |? (1+SC.MAG().TYP)='D' & exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_PBAD') & ~_badan
         || _badan:=1
         ?}
      ?};
      {? _loop || {? OKR.prev() || 1 || {? _il || 0 || OKR.last(); _loop:=0; 1 ?} ?} ?} & _il<16
   !}
?};
OKR.cntx_pop();
{? _palety
|| _stats.grp_sel(_grp,PAL,'BAD','Palety',"exec('pd_stPAL','statexam')",,0,20,"exec('pr_stPAL','statexam')"
    ,,,,'maximized_with_title','mainPAL')
?};

{? ~_st
|| FUN.info('Brak stanów w magazynie.\nOpcja niedostępna.'@);
   _tabt.cntx_pop();
   M.actions('NL_WER');
   DK_C.actions('WER');
   VAR_DEL.delete('KwalDost');
   return(0)
?};
{? _panel
||
::   _stats.grp_splt(_grp,'prawy','vertical','tab1');
::   _stats.grp_edit(_grp,DK_C,'DISPR',,"ATR.MJS:='SC';exec('odsw_sc','magazyn_stan',2)",,);
   {? exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_PBAD')
   || _stats.grp_splt(_grp,'prawy','horizontal','tab2');
      _stats.grp_sel(_grp,BADP,'WERDKP',,"ATR.MJS:='SC';exec('odsw_sc','magazyn_stan',2)",,0,12,,,0,,'maximized')
   ?}
|? _badan
|| _stats.grp_splt(_grp,'prawy','horizontal','tab1');
   _stats.grp_sel(_grp,BADP,'WERDKP',,"ATR.MJS:='SC';exec('odsw_sc','magazyn_stan',2)",,0,12,,,0,,'maximized')
?};
SC.win_edit('');
SC.win_patt('');
exec('fap_szuk','faktury_poz');

:: zakladki gotowe wyswietlamy okno
_stats.win_sel(_grp);
_stats.first();
:: teraz kontrola dostepnych akcji
_SCact:='';
{? ~exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK') || _SCact+='B' ?};
{? ~exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_EAKC') || _SCact+='M' ?};
SC.actions_grayed(KwalDost.SCwin,_SCact);
:: mozna wyswietlic okno
_stats.select(,,,,'main1');

_tabt.cntx_pop();
M.actions('NL_WER');
DK_C.actions('WER');
VAR_DEL.delete('KwalDost');
~~


\SC_WER_bFB
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: SC WER kwaliFikacja->Badania
::----------------------------------------------------------------------------------------------------------------------
exec('ScDk2laboratory','statexam',SC);
0


\SC_WER_bFM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: SC WER kwaliFikacja->zMien status
::----------------------------------------------------------------------------------------------------------------------
_mg:=BEER.MG; _mt:=BEER.M;
exec('ScDk_stats_chng','statexam',SC);
BEER.MG:=_mg; BEER.M:=_mt;
0


\BADP_BADH_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: blank BADP.BADH
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BADVAR.BADH


\badp_bfe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol BADP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='VALUE'   || exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK')
|? _fld='WAR'     || exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK')
|? _fld='COMMENT' || 1
|? _fld='BADPAR'  ||   BADP.BADMSEP=null()
                     & BADP.MAD_DT=date(0,0,0)
?}


\badp_afe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: po redakcji pol BADP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='VALUE'   || {? {? fld()=0 || FUN.ask('Czy na pewno ma pozostawić wartość zerową?'@) || 1 ?}
                     || BADP.MAD_DT:=date();
                        BADP.MAD_TM:=time();
                        BADP.MAD_USER:=OPERATOR.USER;
                        1
                     ?}
|? _fld='COMMENT' || 1
|? _fld='WAR'     || 1
|? _fld='BADPAR'  || {? fld()=null() || FUN.info('Proszę podać parametr.'@); 0 || 1 ?}
?}


\BADP_WER_bD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Dolacz w BADP.WER
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
BADP.win_edit('RED');
1


\BADP_WER_bP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed popraw w BADP.WER
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_stn:=BADP.BADH().STAN;
{? _stn='P'
|| {? exec('get_par','#parametr',141)<>'T'
   || {? exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK')
      || exec('BADP_WERR_bP','statexam')
      || FUN.info('Brak uprawnień do rejestracji wyników.\nModyfikacja wartości niemożliwa.'@);
         _wyn:=0
      ?}
   || exec('BADP_WERR_bP','statexam')
   ?}
|| FUN.info(
      {? _stn='W'
      || 'Badania zostały wykonane.\nModyfikacja wartości niemożliwa.'@
      || 'Badania zostały zaakceptowane.\nModyfikacja wartości niemożliwa.'@
      ?}
   );
   _wyn:=0
?};
{? _wyn>0
||
:: Jeżeli parametr składa się z elementów, to wyświetla się ich lista
   {? exec('badp_elem_chk','statexam')
   || exec('badp_elem_sel','statexam');
      _wyn:=0
   ?}
?};
_wyn


\BADP_WER_bU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Usun w BADP.WER
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć bieżący wiersz?'@)
|| _uid:={? BADP.CZY_NAG='T' || BADP.uidref() || '' ?};
   {? BADP.del(,1)
   || {? _uid<>''
      || BADP.cntx_psh();
         BADP.index('PARENT');
         BADP.prefix(_uid,);
         {? BADP.first()
         || {! |? BADP.del() !}
         ?};
         BADP.cntx_pop()
      ?}
   ?}
?};
~~


\BADP_WER_bM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed koMentarz w BADP.WER
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
BADP.win_edit('RED_KOM');
{? BADP.edit()
|| BADP.put(1)
?};
0


\BADP_WER_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed rekord w BADP.WER
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_branz:=exec('get_par','#parametr',141)='T';
_wbadp:=BADP.win_sel('?');
{? BADP.BADH().STAN<>'P' || _grayed:='Adpu:Ad' || _grayed:='' ?};
{? BADP.BADH().TYP='O' & BADP.CZY_NAG<>'T' || _grayed:='E'+_grayed ?};
BADP.actions_grayed(_wbadp,_grayed);

{? BADP.BADH().STAN<>'P' | _branz
|| _typ:={? BADP.BADMSEP<>null() || 'M' |? BADP.BADSEP<>null() || 'O' || '' ?};
   {? _typ<>'' & BADP.BADPAR().TYP='W'
   || _log:={? _typ='M'
            || {? BADP.BADMSEP().VALTN='T' || 1 || 0 ?}
            || {? BADP.BADSEP().VALTN='T' || 1 || 0 ?}
            ?};
      _val:={? ~_branz
            || BADP.VALUE
            || {? BADP.WAR='T' || 1 || 0 ?}
            ?};
      {? _log<>_val
      || Color.fnd_kol('BAD#01#05')
      || Color.fnd_kol('BAD#01#01')
      ?}
   |? _typ<>'' & (';RP'*BADP.BADPAR().TYP)>1
   || {? _typ='M'
      || _min:=BADP.BADMSEP().VALLOW;
         _max:=BADP.BADMSEP().VALHIGH
      || _min:=BADP.BADSEP().VALLOW;
         _max:=BADP.BADSEP().VALHIGH
      ?};
      _val:={? ~_branz
            || BADP.VALUE
            || #BADP.WAR
            ?};
      {? _val<_min || Color.fnd_kol('BAD#01#03')
      |? _val>_max || Color.fnd_kol('BAD#01#02')
                   || Color.fnd_kol('BAD#01#01')
      ?}
   || Color.fnd_kol('BAD#01#04')
   ?}
|| ~~
?}


\BADP_WER_bL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Legenda w BADP.WER
::   WE: [_a]: typ badań: 'O' - operacyjne ,'M' - magazynowe, [''] - dowolne
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') || _a || '' ?};
{? _typ='O'
|| exec('legenda','color','BAD#01','BADP#01')
|| exec('legenda','color','BAD#01')
?};
~~


\BADP_WER_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed wyswietl w BADP.WER
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? BADP.BADH().STAN='P' || BADP.win_edit('RED_KOM')
|? BADP.BADH().STAN='W' || BADP.win_edit('RED_KOM')
|? BADP.BADH().STAN='Z' || BADP.win_edit('RED_KOM')
?};
BADP.display();
BADP.win_edit();
~~


\BADP_WERR_bP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30]
:: OPIS: przed popraw w BADP.WERR
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? BADPAR.TYP='S' | BADPAR.TYP='W'
|| BADP.win_edit('RED_'+BADPAR.TYP);
   BADVAR.WARS:=BADP.WAR
|? BADPAR.TYP='D'
|| BADP.win_edit('RED_D');
   _date:=BADP.WAR;
   BADVAR.WARD:=date((#(4+_date)),#((7+_date)+2),#((10+_date)+2))
|? BADPAR.TYP='R' | BADPAR.TYP='P'
|| BADP.win_edit('RED_R');
   BADVAR.WARR:=#BADP.WAR
?};
1


\badvar_war_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30]
:: OPIS: po redakcji zmiennych BADVAR.WARS, BADVAR.WARD, BADVAR.WARR
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
:: Jeżeli zmienna __ENV_BAD istnieje to oznacza, że badania przeprowadzana są w trakcie rejestracji wykonania produkcji
:: i dane wtedy przetwarzane są na tabeli tymczasowej
_prod_rej:={? var_press('__ENV_BAD')>100 || 1 || 0 ?};
_tab:={? _prod_rej>0 || __ENV_BAD.TAB || BADP ?};

{? BADPAR.TYP='S' | BADPAR.TYP='W'
|| {? BADPAR.TYP='W'
      & (~-BADVAR.WARS<>'N' & ~-BADVAR.WARS<>'T')
   || FUN.info('Parametr może przyjmować tylko wartości T lub N.'@);
      _wyn:=0
   || {? BADPAR.TYP='W'
      || _tab.WAR:=~-(BADVAR.WARS);
         _tab.VALUE:={? _tab.WAR='T' || 1 || 0 ?}
      || _tab.WAR:=BADVAR.WARS;
         _tab.VALUE:=0
      ?}
   ?}
|? BADPAR.TYP='D'
|| _tab.WAR:=BADVAR.WARD$1;
   _tab.VALUE:=#BADVAR.WARD
|? BADPAR.TYP='R' | BADPAR.TYP='P'
|| {? BADPAR.TYP='P' & (BADVAR.WARR<0 | BADVAR.WARR>100)
   || FUN.info('Parametr jest wartością procentową i może zawierać się w zakresie od %1 do %2.'@['0','100']);
      _wyn:=0
   || _tab.WAR:=form(BADVAR.WARR,,,'9.');
      _tab.VALUE:=BADVAR.WARR
   ?}
?};
{? _wyn & _prod_rej=0
|| _tab.MAD_DT:=date();
   _tab.MAD_TM:=time();
   _tab.MAD_USER:=OPERATOR.USER
?};
_wyn


\badh_bfe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol w BADH
::   WY: 1/0 mozliwa redakcja pola
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? BADH.ZGH<>null
|| BADH.efld_opt(cur_win(),'editable=1',,'ZGP','NRP')
|| BADH.efld_opt(cur_win(),'editable=grayed',,'ZGP','NRP')
?};
{? type_of(fld)=7 || VAR.REF:=$fld ?};
{? _fld='NR'      || 0
|? _fld='BADMSEH' || 1
|? _fld='BADSEH'  || {? BADH.TYP='O' || BADVAR.TYP_BAD:='O'?};1
|? _fld='STATS_O' || {? fld()=null() || fld(BADH.BADSEH().STATS_O) ?}; 1
|? _fld='STATS_Z' || {? fld()=null() || fld(BADH.BADSEH().STATS_Z) ?}; 1
|? _fld='STATS_N' || {? fld()=null() || fld(BADH.BADSEH().STATS_N) ?}; 1
|? _fld='ZL'
|| ZL.f_set('SYM','join ZGP using (ZGP.ZL,ZL.REFERENCE) join ZTP using (ZL.TYP,ZTP.REFERENCE)',
                                 'ZL.STAN=\'O\' and  ZTP.WP<>\'W\'');1
|? _fld='ZGH'
|| {? BADH.ZL<>null
   || ZGH.f_set('NRPRZ','join ZL using (ZGH.ZLEC,ZL.REFERENCE) join ZGP using(ZGP.NRPRZ,ZGH.REFERENCE)',
                'ZL.SYM=\':_a\'',BADH.ZL().SYM);
      1
   || 0
   ?}
|? _fld='ZGP'
||  _param1:='';
    _param2:='';
    ZGP.clear();
   {? BADH.ZGH<>null & cur_nfld()<>'Operacja'@
   || ZGP.win_sel('WER_WKJ');
      ZGP.f_set('NRP','join ZGH using(ZGP.NRPRZ,ZGH.REFERENCE) join ZL using (ZGH.ZLEC,ZL.REFERENCE) join ZTP using (ZL.TYP,ZTP.REFERENCE)',
                'ZGH.NRPRZ=\':_a\' and ZTP.WP<>\'W\' and ZGP.TPZ=\'N\' and ZGP.WEW=\'T\' and ZGP.PL_GRP=\'N\'',BADH.ZGH().NRPRZ);
     1
   || ZGP.win_sel('WER_WKJS');
      {? BADH.ZL<>null | BADH.PLACE<>null
      || {? BADH.PLACE<>null & BADH.ZL=null
         ||
::       Wypełnione tylko stanowisko
            _join:=' join TWRKPLC using (ZGP.PLACE,TWRKPLC.REFERENCE)';
            _where:='ZL.STAN=\'O\' and TWRKPLC.KOD=\':_b\'';
            _param2:=BADH.PLACE().KOD;
            1
         || {? BADH.ZGH<>null
            ||
::           Wypełnione zlecenie i nagłówek przewodnika
               _join:=' join ZGH using (ZGP.NRPRZ,ZGH.REFERENCE)';
               _where:=' ZGH.NRPRZ=\':_a\'';
               _param1:=BADH.ZGH().NRPRZ
            ||
::           Wypełnione zlecenie bez przewodnika
               _join:=' ';
               _where:=' ZL.SYM=\':_a\'';
               _param1:=BADH.ZL().SYM
            ?};

            {? BADH.PLACE<>null
            ||
::        Wypełnione dodatkowo stanowisko
               _join+=' join TWRKPLC using (ZGP.PLACE,TWRKPLC.REFERENCE)';
               _where+=' and TWRKPLC.KOD=\':_b\'';
               _param2:=BADH.PLACE().KOD
            ?};
            1
         ?}
      ||
::     Brak dodatkowych danych
         _join:=' ';
         _where:='ZL.STAN=\'O\'';
            1
      ?};
::   ZGP.f_set('OPIS',_join,_where,{? _param1<>'' || _param1 ?},{? _param2<>'' || _param2 ?});
::   Zapisanie danych filtra
   _join+=' join ZL using (ZGP.ZL,ZL.REFERENCE) join ZTP using (ZL.TYP,ZTP.REFERENCE) ';
   _where+=' and ZTP.WP<>\'W\' and ZGP.TPZ=\'N\' and ZGP.WEW=\'T\' and ZGP.PL_GRP=\'N\'';
   POMOC.K1:=_join;
   POMOC.K2:=_where;
   POMOC.K3:=_param1;
   POMOC.K4:=_param2;
   exec('BADH_zakres_filtr','statexam')

   ?}
|? _fld='PLACE'
|| {? BADH.ZL<>null
   || {? BADH.ZGH<>null
      ||
::        Wypełnione zlecenie + przewodnik
         TWRKPLC.f_set('NA','join ZGP using (ZGP.PLACE,TWRKPLC.REFERENCE) join ZGH using (ZGP.NRPRZ,ZGH.REFERENCE)',
                       'ZGH.NRPRZ=\':_a\'',BADH.ZGH().NRPRZ);
         1
      ||
::        Wypełnione tylko zlecenie
         TWRKPLC.f_set('NA','join ZGP using (ZGP.PLACE,TWRKPLC.REFERENCE) join ZL using (ZGP.ZL,ZL.REFERENCE)  join ZTP using (ZL.TYP,ZTP.REFERENCE)',
                       'ZL.SYM=\':_a\' and ZTP.WP<>\'W\'',BADH.ZL().SYM);
         1
      ?}
   ||
::    Brak dodatkowych danych
      TWRKPLC.f_set('NA','join ZGP using (ZGP.PLACE,TWRKPLC.REFERENCE) join ZL using (ZGP.ZL,ZL.REFERENCE)  join ZTP using (ZL.TYP,ZTP.REFERENCE)',
                    'ZL.STAN=\'O\' and ZTP.WP<>\'W\'');
         1
   ?}
?}


\badh_afe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed redakcja pol w BADH
::   WY: 1/0 mozliwa redakcja pola
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_pval:=VAR.REF;
_chk:="
       _tab:=BADH;
       ( ( _tab.STATS_O<>null() & _tab.STATS_O=_tab.STATS_Z )
       | ( _tab.STATS_N<>null() & _tab.STATS_N=_tab.STATS_O )
       | ( _tab.STATS_Z<>null() & _tab.STATS_Z=_tab.STATS_N )
       )
      ";

{? _fld='NR'      || 0
|? _fld='BADMSEH' || 1
|? _fld='BADSEH'  || BADVAR.TYP_BAD:='';
                     1
|? _fld='STATS_O' || {? fld()=null() || 1
                     |? _chk()       || FUN.info('Wybrany status występuje już dla badania.'@); 0
                     || 1
                     ?}
|? _fld='STATS_Z' || {? fld()=null() || 1
                     |? _chk()       || FUN.info('Wybrany status występuje już dla badania.'@); 0
                     || 1
                     ?}
|? _fld='STATS_N' || {? fld()=null() || 1
                     |? _chk()       || FUN.info('Wybrany status występuje już dla badania.'@); 0
                     || 1
                     ?}
|? _fld='ZL'      || ZL.f_clear();
                     {? fld=null
                     || BADH.efld_opt(cur_win(),'editable=grayed',,'ZGH','NRPRZ');
                        BADH.efld_opt(cur_win(),'editable=grayed',,'ZGP','NRP')
                     || BADH.efld_opt(cur_win(),'editable=1',,'ZGH','NRPRZ')

                     ?};
                     {? $BADH.ZL<>_pval
                     || BADH.ZGH:=null;
                        BADH.ZGP:=null;
                        BADH.PLACE:=null()
                     ?};
                     1
|? _fld='ZGH'     || ZGH.f_clear();
                     {? fld=null
                     || BADH.efld_opt(cur_win(),'editable=grayed',,'ZGP','NRP')
                     || BADH.efld_opt(cur_win(),'editable=1',,'ZGP','NRP')
                     ?};
                     {? $BADH.ZGH<>_pval
                     || BADH.ZGP:=null;
                        BADH.PLACE:=null()
                     ?};
                     1
|? _fld='PLACE'   || TWRKPLC.f_clear();
                     {? $BADH.PLACE<>_pval
                     || BADH.ZGP:=null
                     ?};
                     1
|? _fld='ZGP'     || ZGP.f_clear();
                     {? fld()<>null
                     || BADH.ZGH:=BADH.ZGP().NRPRZ;
                        BADH.ZL:=BADH.ZGP().ZL;
                        BADH.PLACE:=BADH.ZGP().PLACE;
                        BADH.efld_opt(cur_win(),'editable=1',,'ZGP','NRP');
                        BADH.efld_opt(cur_win(),'editable=1',,'ZGH','NRPRZ')
                     ?};
                     1
?}


\BADH_WER_SEL_bW
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS:
::----------------------------------------------------------------------------------------------------------------------
($BADVAR.BADHSELA)()


\BADH_WER_bA
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed akceptacja badania
::----------------------------------------------------------------------------------------------------------------------
{? exec('lock','#record','BADH','SES_ID',BADH.ref)
||
   _txt:={? exec('BADH_powiazane','statexam',,0).first || '' || {? BADH.TYP='M' || 'Brak powiązań badania z dostawami.'@+'\n\n' || '' ?} ?};
   {? BADH.ZL<>null & BADH.ZL().STAN='Z' || _txt+='Zlecenie powiązane z badaniem zostało zamknięte.'@+'\n\n' ?};
   {? BADH.STAN='P'
   || {? exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK')
      || {? FUN.ask(_txt+'Czy potwierdzić wyniki badań - przedstawić badanie do akceptacji?'@)
         || _res:=exec('BADH_akceptuj','statexam',BADH.ref(),'W');
            {? FILTER.B_AREA='KJ'
            || {? _res
               ||  FUN.info('Badanie zostało pomyślnie zatwierdzone.'@);
                   sel_exit()
               ||  FUN.info('Wystąpił błąd podczas zatwierdzania badania.'@)
               ?}
            ?}
         ?}
      || FUN.info('Brak uprawnień użytkownika do potwierdzania wyników badań'@)
      ?}

   |? BADH.STAN='W'
   || {? exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_EAKC')
      || _wynik:=FUN.choice(_txt+'Z jakim wynikiem zaakceptować badanie?'@,,'Pozytywny'@,'Negatywny'@);
         {? _wynik>0
         || exec('BADH_akceptuj','statexam',BADH.ref(),'Z',{? _wynik=1 || 'P' || 'N' ?})
         ?}
      || FUN.info('Brak uprawnień użytkownika do akceptacji wyników badań'@)
      ?}

   |? BADH.STAN='Z'
   || FUN.info('Badanie zostało już zatwierdzone przez użytkownika %1.'@[BADH.AKC_USER().DANE])
   ?};
   exec('unlock','#record','BADH','SES_ID',BADH.ref())
?};
~~


\BADH_WER_bW
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: przed Wycofaj badania
::----------------------------------------------------------------------------------------------------------------------
{? exec('lock','#record','BADH','SES_ID',BADH.ref())
||
   {? BADH.STAN='P'
   || FUN.info('Badanie nie było jeszcze akceptowane.'@)

   |? BADH.STAN='W'
   || {? exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_EAKC')
      || {? FUN.ask('Czy wycofać potwierdzenie wyników badań?'@)
         || KOMM.init(250);
            exec('BADH_wycofaj','statexam',BADH.ref(),'W');
            KOMM.select('Wycofanie akceptacji badania'@,'')
         ?}
      || FUN.info('Brak uprawnień użytkownika do wycofania potwierdzenia wyników badań.'@)
      ?}

   |? BADH.STAN='Z'
   || {? exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_EAKC')
      || {? FUN.ask('Czy wycofać akceptację wyników badań?'@)
         || KOMM.init(250);
            exec('BADH_wycofaj','statexam',BADH.ref(),'Z');
            KOMM.select('Wycofanie akceptacji badania'@,'')
         ?}
      || FUN.info('Brak uprawnień użytkownika do wycofania akceptacji wyników badań'@)
      ?}
   ?};
   exec('unlock','#record','BADH','SES_ID',BADH.ref())
?};
~~


\BADH_WER_bI
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Wyswietla dokumenty powiazane z badaniem
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? BADH.TYP='M'
|| exec('BADH_powiazane','statexam',BADH.ref(),1)
|| exec('BADH_powiazane','zl_wyk',BADH.ref())
?};
~~


\Badania_sel_
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: selekcja badan wg podanego typu
::   WE: _a - typ
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=2 || _a || 'M' ?};

:: ponieważ redagowanie jest dla jednego typu operacji, to w oknie BADSEH.RED blokujemy pole TYP do redakcji
BADSEH.efld_opt('RED','editable=grayed',,'TYP');

_roln:=exec('get_par','#parametr',141);

exec('var_akord','zl_guide');

_env_bad:=obj_new('TAB_STATUS'
               ,'WER_STATUS'
               ,'WER_H');
params_set('env_bad',_env_bad);

_env_bad.TAB_STATUS:=exec('dsk_get_status','statexam');
_env_bad.WER_STATUS:=_env_bad.TAB_STATUS.mk_sel('Status'@,,0,'#badtabstat',,,,,'U');
_env_bad.TAB_STATUS.win_fld(_env_bad.WER_STATUS,,'NAZWA',,,10,,,'Status'@);
_env_bad.WER_H:='WER';
{? _typ='O'
|| _env_bad.WER_H:='WER_OPER'
?};

BADH.cntx_psh();
BADMSEH.cntx_psh(); BADMSEP.cntx_psh();
ZL.cntx_psh(); ZGP.cntx_psh(); ZGH.cntx_psh(); TWRKPLC.cntx_psh();
BADSEH.win_dict('WER');
BADMSEH.win_edit('RED');
BADMSEH.actions('WER','dup:d');
BADMSEP.actions('WER','dup:d');
_def_ZL:=ZL.actions('SLO_SL','WXY');
BADH.win_sel('WER');
BADH.win_edit('RED');
ZL.win_sel('SLO_SL');
ZGH.win_sel('SEL');

_grp:=ZGP.grp_make('Operacje'@,"grp_edisp(FILTER,'RED_BAD')",'grpzgp');
ZGP.grp_sel(_grp,,'WER_OPER',,,,,,,,,,'maximized');
ZGP.grp_splt(_grp,,'vertical','zgpfiltr');
ZGP.grp_edit(_grp,FILTER,'RED_BAD');
ZGP.win_sel(_grp);
TWRKPLC.win_sel('SLO');

FILTER.TMP:=_typ;
FILTER.STATUS:=exec('get','#params',8603,2,OPERATOR.USER);

_par:=exec('get','#params',8605,2,OPERATOR.USER);
FILTER.B_A:={? 1+_par<>'W' || 1+_par || ''?};
FILTER.B_DOREJ:={? 1+(1-_par)<>'W' || 1+(1-_par) || ''?};
FILTER.B_START:={? 1+(2-_par)<>'W' || 1+(2-_par) || ''?};
FILTER.B_WYK:={? 1+(3-_par)<>'W' || 1+(3-_par) || ''?};
FILTER.B_POTW:={? 1+(4-_par)<>'W' || 1+(4-_par) || ''?};

_wbadp:={? _roln<>'T' || {? _typ='O' || 'WER_OP' || 'WER' ?} || 'WERR' ?};

{? _wbadp='WER_OP'
|| BADP.actions(_wbadp);
   BADP.actions(_wbadp,'A:A')
?};
{? _typ='O'
|| BADP.win_sel(_wbadp)
?};

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'Status'@;
_formula:="
   params_set(params_get());
   _env:=params_get().env_bad;
::   exec('load','#desktop','selektor','lmg_bad.dsk',,,,,,0);
::   exec('set_name','#desktop','','selektor','status@panel','Status'@);
   exec('bad_akctit','statexam',FILTER.TMP,{? FILTER.STATUS='A' || '' || FILTER.STATUS ?});
   _tab:=_env.TAB_STATUS;
   _tab.cntx_psh();
   _view:=null();
   _last:=exec('get','#params',8603,type_of(''),OPERATOR.USER);
   {? _last<>''
   || _i2:=_tab.ndx_tmp(,,'KOD',,);
      _tab.index(_i2);
      _tab.prefix(_last,);
      {? _tab.first()
      || _view:=_tab.ref()
      ?}
   ?};
   _tab.cntx_pop();
   {? _view<>null()
   || _tab.seek(_view)
   ?};
   win_set('cur_row_pos=-1',_env.TAB_STATUS,_env.WER_STATUS);
   grp_disp(_env.TAB_STATUS,_env.WER_STATUS,1,1);
   1
";
_wnd:=BADH.grp_make(,_formula,'lmg_bad'+(-_typ),,,"exec('exit','zws','sel_exit')",
            ,{? _typ='O' || 'maximized' || 'html_maximized' ?});
::exec('create','#desktop',BADH,'selektor',_wnd,2);

_after_rfr:="
   params_set(params_get());
   _env:=params_get().env_bad;
   _tab:=_env.TAB_STATUS;
   FILTER.STATUS:=_tab.KOD;
   exec('set','#params',8603,FILTER.STATUS,OPERATOR.USER);
   exec('bad_akctit','statexam',FILTER.TMP,{? FILTER.STATUS='A' || '' || FILTER.STATUS ?});
   win_set('cur_row_pos=-1',BADH,_env.WER_H);
   grp_disp(BADH,_env.WER_H,1,1);
   ~~
";
BADH.grp_sel(_wnd,_env_bad.TAB_STATUS,_env_bad.WER_STATUS,,_after_rfr,,,,,,0,0,'maximized','WER_STAT');

BADH.grp_splt(_wnd,,'vertical','naglowki',',25');

_before:="
   _env:=params_get().env_bad;
   _tab:=_env.TAB_STATUS;
   {? grp_empty(_tab,_env.WER_STATUS)
   || '#disable'
   || ~~
   ?}
";

BADH.grp_sel(_wnd,BADH,_env_bad.WER_H,,"params_set(params_get());exec('po_badh','statexam')",,,,_before,,0,0,'maximized','WER_BADH');
BADH.grp_splt(_wnd,'naglowki','vertical','pozycje');
BADH.grp_sel(_wnd,BADP,_wbadp,,,,,,"
   _env:=params_get().env_bad;
   {? grp_empty(BADH,_env.WER_H)
   || '#disable'
   || BADP.actions_grayed(BADP.win_sel('?'),{? BADH.STAN<>'P' || 'Adpu:Ad' || '' ?});~~ ?}
",,,,'maximized','WER_BADP');

BADH.win_sel(_wnd);

{? _typ='O' || AreaTitle.setTitle() || BADH.hdr_sel('Badania'@) ?};
FILTER.B_AREA:='BAD';

:: Wyłączenie checkboxów zaznaczających na interm
_env_bad.TAB_STATUS.win_sopt(_env_bad.WER_STATUS,'select_record_checkbox=0');

:: Badania - ikonki pól
exec('ikonki','statexam');

BADH.select(,,,,'WER_BADH');
BADMSEH.actions('WER');
BADMSEP.actions('WER');
ZL.actions('SLO_SL',_def_ZL);
BADMSEH.cntx_pop(); BADMSEP.cntx_pop();
BADH.cntx_pop();ZL.cntx_pop();ZGP.cntx_pop();ZGH.cntx_pop();
TWRKPLC.cntx_pop();
~~


\badh_szuk_wg_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: szukanie badania wg dostawy
::----------------------------------------------------------------------------------------------------------------------
_Tab:=sql($"
   select distinct
      ND.D ND_D,
      ND.SYM ND_SYM,
      DK.P DK_P,
      M.KTM M_KTM,
      DK.IL DK_IL,
      BADH.SYM BADH_SYM,
      BADH.REFERENCE BADH_REF
   from
      @DK_HS
      join BADH using (DK_HS.BADH,BADH.reference)
      join @DK using (DK_HS.DK,DK.reference)
      join M using (DK.M,M.reference)
      join @ND using (DK.N,ND.reference)
   order by
      1,2
   ");

_wer:=_Tab.mk_sel('Dostawy powiązane z badaniami'@,'T',,'sdvnjakeraaierf',,,,,'U');
_Tab.win_sel(_wer);
_Tab.win_fld(_wer,,'ND_D',,,10,,,'Data'@);
_Tab.win_fld(_wer,,'ND_SYM',,,20,,,'Dostawa'@);
_Tab.win_fld(_wer,,'DK_P',,,4,,,'Pozycja'@);
_Tab.win_fld(_wer,,'M_KTM',,,20,,,'Indeks'@);
_Tab.win_fld(_wer,,'DK_IL',,,12,ST.DOKL,,'Ilość'@);
_Tab.win_fld(_wer,,'BADH_SYM',,,20,,,'Badanie'@);
_Tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1);
_Tab.win_act(_wer,,'Szukaj');
_Tab.win_act(_wer,,'Kolejność');

{? ~_Tab.first()
||
   FUN.info('Brak dostaw związanych z badaniami.'@)
|? _Tab.select()
||
   {? ~
      {? BADH.f_active()
      || BADH.f_seek(BIT.sqlint(_Tab.BADH_REF),)
      || BADH.seek(BIT.sqlint(_Tab.BADH_REF),)
      ?}
   ||
      FUN.info('Badanie nie zawiera się w bieżącym zakresie.'@)
   ?}
?}


\bad_akctit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: ustalenie prefixu tabeli BADH
::   WE: _a - typ
::       _b - stan
::----------------------------------------------------------------------------------------------------------------------
_typ:=_a;
_stan:=_b;

BADH.clear();
BADH.index('TSSYM');
{? _stan<>''
|| BADH.prefix(_typ,_stan)
|| BADH.prefix(_typ)
?};
~~


\BADH_wycofaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: wycofuje badanie
::   WE: BADH.ref() _a - badanie
::       STRING _b - aktualny status
::   WY: wynik BADH.put()
::----------------------------------------------------------------------------------------------------------------------
_badh:={? _>0 & type_of(_a)=type_of(BADH.ref()) || _a   || BADH.ref() ?};
_stan:={? _>1 & type_of(_b)=type_of('')         || ~-_b || 'P'        ?};

{? 'WZ'*_stan=0 || _stan:='' ?};

_result:=0;
_error:=0;
_stanold:=BADH.STAN;
BADH.cntx_psh();
BADH.clear();
{? BADH.seek(_badh)
 & _stan<>''
|| {? _stan='W'
   || BADH.MAD_DT:=date(0,0,0);
      BADH.MAD_TM:=time(0,0,0);
      BADH.MAD_USER:=null();
      BADH.STAN:='P';
      _result:=BADH.put()

   |? _stan='Z'
   || BADH.AKC_DT:=date(0,0,0);
      BADH.AKC_TM:=time(0,0,0);
      BADH.AKC_USER:=null();
      BADH.STAN:='W';
      BADH.WYNIK:='O';
::    teraz lista dostaw, ktore nalezy 'odkrecic'
      BADH.cntx_psh();
      _tabcon:=exec('BADH_powiazane','statexam',_badh,0);
      {? _tabcon.first()
      || _tabconX:=_tabcon.ndx_tmp(,
                                   ,'X_CANDEL',,
                                   ,'MG_SYM',,
                                   ,'N',,
                                  );
         _tabcon.index(_tabconX);
         _tabcon.prefix(0);
         {? _tabcon.first()
         || KOMM.add('Dostawy zbadane w badaniu zostały już rozchodowane lub ich statusy zostały zmienione.'@,81);
            _error:=1

         || _tabcon.prefix(1);
            {? _tabcon.first()
            || _tab:=exec('T4S','statexam');
               _T4Sadd:=obj_new(1);
               _sect:=KOMM.sect_beg('Wybór dostaw do uwzględnienia podczas wycofywania akceptacji badania'@);
               {!
               |?
                  {? _tabcon.NDK<>''
                  || obj_del(_T4Sadd);
                     _T4Sadd:=exec('T4S_add_DK','statexam',_tab,_tabcon.NDK, _tabcon.RDK,'S');
                     {? _T4Sadd.Result
                      & _tab.seek(_T4Sadd.Ref)
                     ||
                        _tab.N_STS:=#BADH.STATS_O;
                        _tab.N_NBADH:=BADH.name();
                        _tab.N_RBADH:=#BADH.ref();
                        _tab.N_COMM:='Wycofanie końcowej akceptacji badania '+BADH.SYM;
                        _tab.put()
                     || _error:=2
                     ?}
                  ?};
                  _tabcon.next()
               !};
               KOMM.sect_end();
               {? _error=0
                & _tab.first()
               || KOMM.del(_sect);
                  _error:=(1-exec('T4Szapiszzmiany','statexam',_tab).Result)*3
               ?}
            ?}
         ?}
      ?};

      {? BADH.TYP='O'
      || _chkak:=exec('get','#params',500631,2);
::       Dla badania operacyjnego, sprawdzam czy zostały zarejestrowane następne operacje
::       w procesie. Jeśli tak, to blokuję możliwość wycofania badania
         _args_zlgd:=obj_new('ILNEXT','WYNIK');
         _args_zlgd.ILNEXT:=0;
         {? _chkak='T'
         ||
            _formula:="
               _result:=0;
               _args:=_b;
               ZGP.cntx_psh();
               ZLGD.cntx_psh();
               ZLGD.index('BADH');
               ZLGD.prefix(BADH.ref());
               {? ZLGD.first()
               || {? ZLGD.ZGP<>null()
                  || ZLGD.ZGP();
                     _result:=1;
                     _args.ILNEXT+=exec('obl_ilw','zl_guide',_args.WYNIK,0)
                  ?}
               ?};
               ZLGD.cntx_pop();
               ZGP.cntx_pop();
               _result
            ";
            _oddzial:=1+(BADH.name+3);
            _msk_start:=(ZLGD.name()-3)+_oddzial+'01';
            _msk_end:=(ZLGD.name()-3)+_oddzial+'99';
            exec('for_each_mask','#table',ZLGD,_formula,_msk_start,_msk_end,_args_zlgd,0)
         ?};
         {? _args_zlgd.ILNEXT>0
         || _error:=1;
            KOMM.add('Badanie operacyjne jest powiązane z wykonaniami następnych operacji w procesie. '
                     'Wycofanie niemożliwe.'@,2,,1)
         ||
            obj_del(_args_zlgd);
            _args_zlgd:=obj_new('RESULT');
            _args_zlgd.RESULT:=1;
            _formula:="
               _result:=0;
               _args:=_b;
               ZGP.cntx_psh();
               ZLGD.cntx_psh();
               ZLGD.index('BADH');
               ZLGD.prefix(BADH.ref());
               {? ZLGD.first()
               || _result:=1;
                  _args.RESULT:=exec('odkwalifikuj','zl_wyk')
               ?};
               ZLGD.cntx_pop();
               ZGP.cntx_pop();
               _result
            ";
            _oddzial:=1+(BADH.name+3);
            _msk_start:=(ZLGD.name()-3)+_oddzial+'01';
            _msk_end:=(ZLGD.name()-3)+_oddzial+'99';
            exec('for_each_mask','#table',ZLGD,_formula,,,_args_zlgd,0);
            {? _args_zlgd.RESULT=0
            || _error:=1;
               KOMM.add('Nie udało się wyzerowanie ilości na akordzie powiązanym z badaniem.'@,2,,1)
            ?}
         ?};
::         Usunięcie powiązań BADO
            BADO.cntx_psh();
            BADO.index('BADH');
            BADO.prefix(BADH.ref);
            {? BADO.first()
            || {!
               |? BADO.del
               !}
            ?};
            BADO.cntx_pop()
      ?};

      BADH.cntx_pop();
      {? _error=0
      ||  BADH.ZLGD:=null;
         _result:=BADH.put()
      ?};
      ~~
   ?}
?};
{? _result
|| {? _stanold='W'
   || KOMM.add('Wycofano potwierdzenie wyników badania.'@,1)
   || KOMM.add('Akceptacja badania została wycofana.'@,1)
   ?}
|| {? _stanold='W'
   || KOMM.add('Wycofanie potwierdzenia wyników badania nie powiodło się.'@,2)
   || KOMM.add('Wycofanie akceptacji badania nie powiodło się.'@,2)
   ?}
?};
BADH.cntx_pop();
_result


\dsk_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Wybranie statusu w selektorze.
::----------------------------------------------------------------------------------------------------------------------
FILTER.STATUS:=exec('get_value','#desktop','','selektor','status@panel');
exec('set','#params',8603,FILTER.STATUS,OPERATOR.USER);
exec('bad_akctit','statexam',FILTER.TMP,{? FILTER.STATUS='A' || '' || FILTER.STATUS ?});
grp_disp(BADH,'WER',1,1);
win_activate('WER_BADH');
~~


\dsk_get_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zwraca dane dla selektora statusu.
::   WY: alias do tabeli tymczasowej zawierającej listę statusów.
::----------------------------------------------------------------------------------------------------------------------
_rs:=sql('select 0 as LP, S.SYSTEM as KOD, S.NAZWA as NAZWA from SLO_KOD as S where 0=1');

_rs.KOD:='P';
_rs.NAZWA:='Powołane'@;
_rs.add();

_rs.LP+=1;
_rs.KOD:='W';
_rs.NAZWA:='Wykonane'@;
_rs.add();

_rs.LP+=1;
_rs.KOD:='Z';
_rs.NAZWA:='Zatwierdzone'@;
_rs.add();

_rs.LP+=1;
_rs.KOD:='A';
_rs.NAZWA:='Wszystkie'@;
_rs.add();
_rs


\dsk_set_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Formuła odpowiada za ustawienie wartości wskazanych elementów pulpitu.
::   WE: _a - identyfikator elementu panelu.
::----------------------------------------------------------------------------------------------------------------------
_set:="exec('set_value','#desktop','','selektor',_a,_b)";
_set(_a,FILTER.STATUS);
win_activate('WER_BADH');
~~


\po_badh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Formuła odświeża pozycje badania (tabela BADP) i aktualizauje akcje w oknie badań (BADH)
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_bad;
_hid:=':';
_wykon:=exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_DWYK');
_akcep:=exec('chk_role','#b__box',OPERATOR.USER,'LMG_BAD_EAKC');
{? ~_wykon || _hid:='du'+_hid+'d' ?};

{? ~_wykon & ~_akcep || _hid:='AW'+_hid ?};

::{? FILTER.TMP='O' || _hid:='du'+_hid+'d' ?};
::
{? FILTER.STATUS<>''
|| {? FILTER.STATUS='P' || _hid:='W'+_hid
   |? FILTER.STATUS='W' || _hid:='du'+_hid+'d'
   |? FILTER.STATUS='Z' || _hid:='duA'+_hid+'d'
   ?}
?};

_stan:=BADH.STAN;
{? _stan='P' || _hid:='ONW'+{? ~_wykon || 'A' || '' ?}+_hid
|? _stan='W' || _hid:='uA'+{? ~_wykon || 'W' || '' ?}+_hid
|? _stan='Z' || _hid:='uONAP'+_hid
?};

_auto:=BADH.AUTO;
{? _auto<>'N' || _hid:='P'+_hid ?};

{? _hid<>':' || BADH.actions_grayed(_env.WER_H,_hid) || BADH.actions_grayed(_env.WER_H,) ?};

_typ:=BADH.TYP;
{? _typ<>'O' || BADH.actions(_env.WER_H,'pP',,1) ||  BADH.actions(_env.WER_H,'Tt',,1) ?};


exec('BADP_select','statexam',BADH.ref(),1);
~~


\badh_record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Akcje dla badań
::----------------------------------------------------------------------------------------------------------------------
{? BADH.ZLGD<>null || ZLGD.use(ref_name(BADH.ZLGD)) ?};
~~


\bad_positive
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Wynik pozytywny
::----------------------------------------------------------------------------------------------------------------------
{? BADH.TYP='O'
|| {? exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWZL')>0
   || _txt:={? BADH.ZL<>null & BADH.ZL().STAN='Z' || 'Zlecenie powiązane z badaniem zostało zamknięte.'@+'\n\n' || '' ?};
      {? FUN.ask(_txt+'Zatwierdzić badanie z wynikiem pozytywnym?'@)
      || _res:=exec('BADH_pow_ZLGD','zl_wyk',BADH.ref);
         {? _res='' || _res:=exec('BADH_choice','statexam')?};
         {? _res<>''
         || exec('BADH_akceptuj','statexam',BADH.ref(),'Z','P',,_res)
         ?}
      ?}
   || FUN.info('Nie można akceptować badań do operacji zleceń.\nBrak uprawnień do czynności %1.'@['TTE_WYK_DWZL'])
   ?}
|| {? FUN.ask('Zatwierdzić badanie z wynikiem pozytywnym?'@)
   || exec('BADH_akceptuj','statexam',BADH.ref(),'Z','P')
   ?}
?}


\bad_negative
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Wynik negatywny
::----------------------------------------------------------------------------------------------------------------------
{? BADH.TYP='O'
|| {? exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWZL')>0
   || _txt:={? BADH.ZL<>null & BADH.ZL().STAN='Z' || 'Zlecenie powiązane z badaniem zostało zamknięte.'@+'\n\n' || '' ?};
     {? FUN.ask(_txt+'Zatwierdzić badanie z wynikiem negatywnym?'@)
     || _res:=exec('BADH_pow_ZLGD','zl_wyk',BADH.ref);
        {? _res='' || _res:=exec('BADH_choice','statexam')?};
        {? _res<>''
        || exec('BADH_akceptuj','statexam',BADH.ref(),'Z','N',,_res)
        ?}
     ?}
   || FUN.info('Nie można akceptować badań do operacji zleceń.\nBrak uprawnień do czynności %1.'@['TTE_WYK_DWZL'])
   ?}
|| {? FUN.ask('Zatwierdzić badanie z wynikiem negatywnym?'@)
   || exec('BADH_akceptuj','statexam',BADH.ref(),'Z','N')
   ?}
?}


\badsep_add_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja przed Dołącz w oknie BADSEP
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
exec('badsep_efld_opt','statexam',BADSEP);
exec('badvar_def_load','statexam',0,BADSEP);
_result


\badsep_add_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja po Dołącz w oknie BADSEP
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_result


\badpar_add_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja przed Dołącz w oknie BADPAR
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_result


\badpar_add_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja po Dołącz w oknie BADPAR
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_result


\badpar_arec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Rekord po w oknie BADPAR
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
{? -menu_txt()='popraw'
|| _ref:=BADPAR.ref()
|| _ref:=null()
?};
:: Sprawdzam czy nie ma już parametru o takiej nazwie
BADPAR.cntx_psh();
BADPAR.index('N');
BADPAR.prefix(BADPAR.N,);
{? BADPAR.first() & (_ref<>BADPAR.ref() | BADPAR.size()>1)
|| _result:='N';
   FUN.emsg('Parametr o takiej nazwie już istnieje.'@)
?};
BADPAR.cntx_pop();
_result


\skid_kus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Przypisanie ikon zwiazane ze statusami dostaw
::----------------------------------------------------------------------------------------------------------------------
STATS.win_fml('WER',,'N'   ,,'ICON_BEFORE',"STATS.ICON");
STATS.win_fml('SLO',,'N'   ,,'ICON_BEFORE',"STATS.ICON");
STATS.win_efml('RED',,'ICON',,'ICON_BEFORE',"STATS.ICON");

:: Domyslny status magazynu
MG.win_efml('RED',,'DEFSTATS','N','ICON_BEFORE',"MG.DEFSTATS().ICON",2);
MG.win_fml('WER' ,,'DEFSTATS','N','ICON_BEFORE',"MG.DEFSTATS().ICON",2);

:: Domyslny status materialu w magazynie
MX.win_efml('REDM' ,,'DEFSTATS','N','ICON_BEFORE',"MX.DEFSTATS().ICON",2);
MX.win_efml('REDMG',,'DEFSTATS','N','ICON_BEFORE',"MX.DEFSTATS().ICON",2);

MX.win_fml('WER',,'DEFSTATS','N','ICON_BEFORE',"MX.DEFSTATS().ICON",2);
MX.win_fml('WM' ,,'DEFSTATS','N','ICON_BEFORE',"MX.DEFSTATS().ICON",2);
MX.win_fml('WMG',,'DEFSTATS','N','ICON_BEFORE',"MX.DEFSTATS().ICON",2);

:: Stany cenowe
SC.win_fml('WER'    ,,'S',,'ICON_BEFORE',"SC.STATS().ICON",2);
SC.win_fml('WER_KD' ,,'S',,'ICON_BEFORE',"SC.STATS().ICON",2);

_form:="{? DK.PLUS='T'
        || {? $DK.ref()<>DK.PRDK & ~DK.ZP
           || {? DK.STATS().ICON<>''
              || DK.STATS().ICON
              || 'xwin16.png:90'
              ?}
           || DK.STATS().ICON
           ?}
        || ''
        ?}";
:: Pozycje dokumentu magazynowego
DK.win_fml('WER'    ,,'IL',,'ICON_BEFORE',_form,2);
DK.win_fml('WERPAL' ,,'IL',,'ICON_BEFORE',_form,2);
DK.win_fml('WERSC'  ,,'IL',,'ICON_BEFORE',_form,2);
DK.win_fml('WERU'   ,,'IL',,'ICON_BEFORE',_form,2);
DK.win_fml('WER_DOK',,'IL',,'ICON_BEFORE',_form,2);
DK.win_fml('WER_POZ',,'IL',,'ICON_BEFORE',_form,2);
DK.win_fml('WER_KOO',,'IL',,'ICON_BEFORE',_form,2);
DK.win_fml('WER_SM' ,,'IL',,'ICON_BEFORE',_form,2);
DK.win_fml('WER_SMM',,'IL',,'ICON_BEFORE',_form,2);
DK.win_fml('WES'    ,,'IL',,'ICON_BEFORE',_form,2);
DK.win_fml('WESU'   ,,'IL',,'ICON_BEFORE',_form,2);

:: Historia statusu dostawy
DK_HS.win_fml('WER',,'STATSOLD','N','ICON_BEFORE',"DK_HS.STATSOLD().ICON",2);
DK_HS.win_fml('WER',,'STATSNEW','N','ICON_BEFORE',"DK_HS.STATSNEW().ICON",2);
DK_HS.win_efml('RED',,'STATSOLD','N','ICON_BEFORE',"DK_HS.STATSOLD().ICON",2);
DK_HS.win_efml('RED',,'STATSNEW','N','ICON_BEFORE',"DK_HS.STATSNEW().ICON",2);
_fbadhst:="{? DK_HS.BADH().STAN='P' || DK_HS.BADH().STATS_O().ICON
           |? DK_HS.BADH().STAN='W' || DK_HS.BADH().STATS_O().ICON
           |? DK_HS.BADH().STAN='Z' || {? DK_HS.BADH().WYNIK='P' || DK_HS.BADH().STATS_Z().ICON
                                       |? DK_HS.BADH().WYNIK='Z' || DK_HS.BADH().STATS_N().ICON
                                                                 || ''
                                       ?}
                                    || ''
           ?}
          ";
DK_HS.win_fml('WER',,'BADH','SYM','ICON_BEFORE',_fbadhst,2);

:: badania
 BADH.win_fml('WER',,'STATS_O','N','ICON_BEFORE',"BADH.STATS_O().ICON",2);
 BADH.win_fml('WER',,'STATS_Z','N','ICON_BEFORE',"BADH.STATS_Z().ICON",2);
 BADH.win_fml('WER',,'STATS_N','N','ICON_BEFORE',"BADH.STATS_N().ICON",2);
 BADH.win_fml('WER_SEL',,'STATS_O','N','ICON_BEFORE',"BADH.STATS_O().ICON",2);
 BADH.win_fml('WER_SEL',,'STATS_Z','N','ICON_BEFORE',"BADH.STATS_Z().ICON",2);
 BADH.win_fml('WER_SEL',,'STATS_N','N','ICON_BEFORE',"BADH.STATS_N().ICON",2);
BADH.win_efml('RED',,'STATS_O','N','ICON_BEFORE',"BADH.STATS_O().ICON",2);
BADH.win_efml('RED',,'STATS_Z','N','ICON_BEFORE',"BADH.STATS_Z().ICON",2);
BADH.win_efml('RED',,'STATS_N','N','ICON_BEFORE',"BADH.STATS_N().ICON",2);
:: status wyniku badania

_fbadhst:="{? BADH.STAN='P' || BADH.STATS_O().ICON
           |? BADH.STAN='W' || BADH.STATS_O().ICON
           |? BADH.STAN='Z' || {? BADH.WYNIK='P' || BADH.STATS_Z().ICON
                               |? BADH.WYNIK='N' || BADH.STATS_N().ICON
                                                 || ''
                                                 ?}
                                              || ''
                             ?}
          ";
 BADH.win_fml('WER'    ,,'SYM',,'ICON_BEFORE',_fbadhst,2);
 BADH.win_fml('WER_SEL',,'SYM',,'ICON_BEFORE',_fbadhst,2);

:: zrodlowe zestawy bada
 BADSEH.win_fml('WER',,'STATS_O','N','ICON_BEFORE',"BADSEH.STATS_O().ICON",2);
 BADSEH.win_fml('WER',,'STATS_Z','N','ICON_BEFORE',"BADSEH.STATS_Z().ICON",2);
 BADSEH.win_fml('WER',,'STATS_N','N','ICON_BEFORE',"BADSEH.STATS_N().ICON",2);
BADSEH.win_efml('RED',,'STATS_O','N','ICON_BEFORE',"BADSEH.STATS_O().ICON",2);
BADSEH.win_efml('RED',,'STATS_Z','N','ICON_BEFORE',"BADSEH.STATS_Z().ICON",2);
BADSEH.win_efml('RED',,'STATS_N','N','ICON_BEFORE',"BADSEH.STATS_N().ICON",2);
:: zestawy badan dla materialow i grup
 BADMSEH.win_fml('WER' ,,'STATS_O','N','ICON_BEFORE',"BADMSEH.STATS_O().ICON",2);
 BADMSEH.win_fml('WER' ,,'STATS_Z','N','ICON_BEFORE',"BADMSEH.STATS_Z().ICON",2);
 BADMSEH.win_fml('WER' ,,'STATS_N','N','ICON_BEFORE',"BADMSEH.STATS_N().ICON",2);
 BADMSEH.win_fml('WERG',,'STATS_O','N','ICON_BEFORE',"BADMSEH.STATS_O().ICON",2);
 BADMSEH.win_fml('WERG',,'STATS_Z','N','ICON_BEFORE',"BADMSEH.STATS_Z().ICON",2);
 BADMSEH.win_fml('WERG',,'STATS_N','N','ICON_BEFORE',"BADMSEH.STATS_N().ICON",2);
 BADMSEH.win_fml('WERM',,'STATS_O','N','ICON_BEFORE',"BADMSEH.STATS_O().ICON",2);
 BADMSEH.win_fml('WERM',,'STATS_Z','N','ICON_BEFORE',"BADMSEH.STATS_Z().ICON",2);
 BADMSEH.win_fml('WERM',,'STATS_N','N','ICON_BEFORE',"BADMSEH.STATS_N().ICON",2);
BADMSEH.win_efml('RED' ,,'STATS_O','N','ICON_BEFORE',"BADMSEH.STATS_O().ICON",2);
BADMSEH.win_efml('RED' ,,'STATS_Z','N','ICON_BEFORE',"BADMSEH.STATS_Z().ICON",2);
BADMSEH.win_efml('RED' ,,'STATS_N','N','ICON_BEFORE',"BADMSEH.STATS_N().ICON",2);
BADMSEH.win_efml('REDG',,'STATS_O','N','ICON_BEFORE',"BADMSEH.STATS_O().ICON",2);
BADMSEH.win_efml('REDG',,'STATS_Z','N','ICON_BEFORE',"BADMSEH.STATS_Z().ICON",2);
BADMSEH.win_efml('REDG',,'STATS_N','N','ICON_BEFORE',"BADMSEH.STATS_N().ICON",2);
BADMSEH.win_efml('REDM',,'STATS_O','N','ICON_BEFORE',"BADMSEH.STATS_O().ICON",2);
BADMSEH.win_efml('REDM',,'STATS_Z','N','ICON_BEFORE',"BADMSEH.STATS_Z().ICON",2);
BADMSEH.win_efml('REDM',,'STATS_N','N','ICON_BEFORE',"BADMSEH.STATS_N().ICON",2);

:: zmienna VSTATS
VSTATS.win_efml('REDN' ,,'C_STS','N','ICON_BEFORE',"VSTATS.C_STS().ICON",2);
VSTATS.win_efml('REDN' ,,'N_STS','N','ICON_BEFORE',"VSTATS.N_STS().ICON",2);
VSTATS.win_efml('REDN' ,,'L_STS','N','ICON_BEFORE',"VSTATS.L_STS().ICON",2);
VSTATS.win_efml('REDNL',,'C_STS','N','ICON_BEFORE',"VSTATS.C_STS().ICON",2);
VSTATS.win_efml('REDNL',,'N_STS','N','ICON_BEFORE',"VSTATS.N_STS().ICON",2);
VSTATS.win_efml('REDNL',,'L_STS','N','ICON_BEFORE',"VSTATS.L_STS().ICON",2);

~~


\badh_set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PS] [17.00]
:: OPIS: Ustawia wymagane pola dla okna redakcyjnego badania
::   WE: [_a] - STRING - Akronim okienka, domyślnie obecnie używane
::----------------------------------------------------------------------------------------------------------------------
_win_red:={? var_pres('_a')=type_of('') || _a || BADH.win_edit('?') ?};

_flag:={? BADSEH.ATEST='T' || 'mark=1' || 'mark=0' ?};
BADH.efld_opt(_win_red,_flag,,'ATEST');

{? BADH.TYP='O'
|| BADH.efld_opt(_win_red,'editable=1',,'ZGP','OPIS');
   BADH.efld_opt(_win_red,'editable=1',,'PLACE','NA');
   BADH.efld_opt(_win_red,'editable=1',,'ZL','SYM');
   {? BADH.ZL=null || BADH.efld_opt(_win_red,'editable=grayed',,'ZGH','NRPRZ')?};
   {? BADH.ZGH=null || BADH.efld_opt(_win_red,'editable=grayed',,'ZGP','NRP')?}
?};
~~


\vstats_set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PS] [17.00]
:: OPIS: Ustawia gwiazdkę przy polu 'Komentarz' przy zmianie ilości przy zmianie statustu badania.
::   WE: [_a] - STRING - Akronim okienka, domyślnie obecnie używane
::----------------------------------------------------------------------------------------------------------------------
_win_red:={? var_pres('_a')=type_of('') || _a || VSTATS.win_edit('?') ?};

_flag:={? VSTATS.L_IL>0 || 'mark=1' || 'mark=0' ?};
VSTATS.efld_opt(_win_red,_flag,,'L_COMM');
~~


\chk_badseh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Walidacja rekordu tabeli BADSEH (zestawy badań) - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk_rec:=__CHK.record(BADSEH,,'N','STATS_O','STATS_Z','STATS_N');
{? _chk_rec=''
|| {? BADSEH.STATS_O=BADSEH.STATS_Z
   || FUN.info('Statusy: \'w badaniu\' i \'wynik pozytywny\' powinny być różne.'@);
      _chk_rec:='STATS_Z'

   |? BADSEH.STATS_O=BADSEH.STATS_N
   || FUN.info('Statusy: \'w badaniu\' i \'wynik negatywny\' powinny być różne.'@);
      _chk_rec:='STATS_N'

   |? BADSEH.STATS_Z=BADSEH.STATS_N
   || FUN.info('Statusy: \'wynik pozytywny\' i \'wynik negatywny\' powinny być różne.'@);
      _chk_rec:='STATS_N'
   ?}
?};
{? _chk_rec=''
|| {? __CHK.index(BADSEH,_a)<>''
   || _chk_rec:='N'
   ?}
?};
:: Walidacja dla dedykowanych badań operacyjnych
{? _chk_rec='' & BADSEH.TYP='O' & BADSEH.TTOPER<>null()
|| {? BADSEH.TORP='T'
   || _chk_rec:=__CHK.record(BADSEH,,'TTOPER','MGR','TORP','BAD_OP')
   || _chk_rec:=__CHK.record(BADSEH,,'TTOPER','TORP','BAD_OP')
   ?};
:: Sprawdzenie unikalności (tylko 1 aktywne badanie dla danej operacji/grupy materiałowej)
   {? _chk_rec='' & BADSEH.AKT='T'
   || _ref:={? _a=0 || null() || BADSEH.ref() ?};
      _err:=0;
      BADSEH.cntx_psh();
      BADSEH.index('OPER');
      BADSEH.prefix(BADSEH.TYP,BADSEH.AKT,BADSEH.TTOPER,BADSEH.MGR,BADSEH.BAD_OP,BADSEH.TORP,);
      {? BADSEH.first()
      || {? _a=0
         || _err:=1
         || {? _ref<>BADSEH.ref()
            || _err:=1
            || _err:=BADSEH.next()
            ?}
         ?}
      ?};
      BADSEH.cntx_pop();
      {? _err>0
      || FUN.emsg('Istnieje już aktywne badanie dla danej operacji i grupy materiałowej.'@);
         _chk_rec:='TTOPER'
      ?}
   ?}
?};
_chk_rec


\podzielINP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.51]
:: OPIS: podział dostawy na arkuszu inwentaryzacyjnym
::   WE: _a - stare RDK
::       _b - stare NDK
::       _c - nowe RDK
::       _d - nowe NDK
::       _e - nowe SCSQL
::       _f - ilość
::   WY: 1-ok 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
INN.cntx_psh();
INP.cntx_psh();
INP.index('SC');
INP.prefix(_a,_b);
{? INP.first()
|| {!
   |? {? INP.IN().D=date(0,0,0)
      || _ref:=INP.ref();
         _ok:=INP.next();
         INP.cntx_psh();
         INP.prefix();
         {? INP.seek(_ref)
         || _stan:=INP.SS;
            _ew01:=exec('obl_se','magazyn_inw',INP.IN().MG,INP.M,INP.SCRDK,INP.SCNDK,date(),INP.ref());
            _ew02:=exec('obl_se','magazyn_inw',INP.IN().MG,INP.M,_c,_d,date(),INP.ref());
            _esum:=_ew01+_ew02;
            _ewid:=INP.SE;
            {? _esum<_ewid
            || INP.SE:=_ewid:=_esum;
               {? INP.SS>INP.SE || INP.SS:=_esum ?};
               INP.put(1)
            ?};
            _rozn:=_ewid-_f;
            _news:={? _stan>=_rozn || _stan-_rozn || 0 ?};
            {? _rozn=0
            || INP.SCRDK:=_c;
               INP.SCNDK:=_d;
               INP.SCSQL:=_e;
               INP.SC:=exec('FindAndGet','#table',SC,INP.SCSQL,,,null());
               {? ~INP.put(1) || _res:=0 ?}
            |? _rozn>0
            || INP.SE-=_f;
               INP.SS:={? _stan-_news>=0 || _stan-_news || 0 ?};
               {? ~INP.put(1) || _res:=0 ?};
               INP.SCRDK:=_c;
               INP.SCNDK:=_d;
               INP.SCSQL:=_e;
               INP.SC:=exec('FindAndGet','#table',SC,INP.SCSQL,,,null());
               INP.SE:=_f;
               INP.SS:=_news;
               {? ~INP.add(1) || _res:=0 ?}
            ?}
         ?};
         INP.cntx_pop()
      || _ok:=INP.next()
      ?};
      _ok
   !}
?};
INN.cntx_pop();
INP.cntx_pop();
_res


\DKLandSL
::---------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: dodanie nowej rozpiski wg wymiarów - praca w kontekście danego DK_L-a dla danego DK
::   WE: _a - stara lokalizacja
::       _b - stary termin ważności
::       _c - stara identyfikacja dostawy
::       [_d] - stara dostawa - ref SQL DK.ref() domyślnie dany $DK_L.DK
::       [_e] - nowa dostawa - ref SQL DK.ref() domyślnie dany $DK_L.DK
::   WY: 1-ok 0-nie
::---------------------------------------------------------------------------------------------------------------------
_res:=1;

_o_eanl:=_a;
_o_tw:=_b;
_o_scean:=_c;
_o_dk:={? var_pres('_d')=type_of('') & _d<>'' || _d || $DK_L.DK ?};

exec('SCEAN2DK_L','statexam',DK_L.DK);

_n_eanl:=DK_L.LOK;
_n_tw:=DK_L.TW;
_n_scean:={? DK_L.SCEAN<>'' || DK_L.SCEAN |? DK_L.DK().SCEAN<>'' || DK_L.DK().SCEAN || DK_L.SCEAN ?};
_n_dk:={? var_pres('_e')=type_of('') & _e<>'' || _e || $DK_L.DK ?};

_doroz:=DK_L.IL;
_mag:=DK_L.MG;
_mat:=DK_L.M;

__aktdkl.clear();
__aktdkl.prefix(_o_dk,);
{? __aktdkl.first()
|| {!
   |? {? _doroz>0 & __aktdkl.ILR>0
      || _ildkl:={? __aktdkl.ILR>_doroz || _doroz || __aktdkl.ILR ?};
         _r_eanl:=exec('FindAndGet','#table',EANL,__aktdkl.EANL,,,null());
         _r_tw:=__aktdkl.TW;
         _r_scean:=__aktdkl.SCEAN;

         DK.cntx_psh();
         DK.prefix();
         _o_ref:=exec('FindAndGet','#table',DK,_o_dk,,,null());
         _n_ref:=exec('FindAndGet','#table',DK,_n_dk,,,null());
         DK_L.cntx_psh();
         DK_L.index('DK');
         DK_L.prefix(_o_ref,null(),_o_eanl,null(),_o_tw,1,_o_scean,);
         {? DK_L.first()
         || DK_L.IL+=_ildkl;
            exec('reoIL2','magdok_wymiary');
            _oki:=DK_L.put(1)
         || DK_L.prefix();
            DK_L.DK:=_o_ref; DK_L.SCSQL:=_o_dk;
            DK_L.AUTO:=1; DK_L.LOK:=_o_eanl; DK_L.SCEAN:=_o_scean; DK_L.TW:=_o_tw; DK_L.IL:=_ildkl;
            exec('uzupIDkod','magdok_palety',DK_L);
            exec('reoIL2','magdok_wymiary');
            _oki:=DK_L.add(1)
         ?};
         {? _oki
         || _ildkl2:=exec('reoIL_IL2','magdok_wymiary',_mat,_ildkl,DK_L.WS2);
            {? ~exec('adddelsl','magazyn_stan',_mag,_mat,DK_L.LOK,DK_L.TW,_ildkl,1,null(),DK_L.SCEAN,_ildkl2)
            || undo()
            || {? DK_L.IL=0 || DK_L.del() ?}
            ?}
         || undo()
         ?};

         DK_L.index('DK');
         DK_L.prefix(_n_ref,null(),_n_eanl,null(),_n_tw,1,_n_scean,);
         {? DK_L.first()
         || DK_L.IL-=_ildkl;
            exec('reoIL2','magdok_wymiary');
            _oki:=DK_L.put(1)
         || DK_L.prefix();
            DK_L.DK:=_n_ref; DK_L.SCSQL:=_n_dk;
            _n_scean:=DK_L.DK().SCEAN;
            DK_L.AUTO:=1; DK_L.LOK:=_n_eanl; DK_L.SCEAN:=_n_scean; DK_L.TW:=_n_tw; DK_L.IL:=-_ildkl;
            exec('reoIL2','magdok_wymiary');
            exec('uzupIDkod','magdok_palety',DK_L);
            _oki:=DK_L.add(1)
         ?};
         {? _oki
         || _ildkl2:=exec('reoIL_IL2','magdok_wymiary',_mat,_ildkl,DK_L.WS2);
            {? ~exec('adddelsl','magazyn_stan',_mag,_mat,DK_L.LOK,DK_L.TW,-_ildkl,1,null(),DK_L.SCEAN,_ildkl2)
            || undo()
            || {? DK_L.IL=0 || DK_L.del() ?}
            ?}
         || undo()
         ?};

         DK_L.index('DK');
         DK_L.prefix(_o_ref,null(),_r_eanl,null(),_r_tw,1,_r_scean,);
         {? DK_L.first()
         || DK_L.IL-=_ildkl;
            exec('reoIL2','magdok_wymiary');
            _oki:=DK_L.put(1)
         || DK_L.prefix();
            DK_L.DK:=_o_ref; DK_L.SCSQL:=_o_dk;
            DK_L.AUTO:=1; DK_L.LOK:=_r_eanl; DK_L.SCEAN:=_r_scean; DK_L.TW:=_r_tw; DK_L.IL:=-_ildkl;
            exec('reoIL2','magdok_wymiary');
            exec('uzupIDkod','magdok_palety',DK_L);
            _oki:=DK_L.add(1)
         ?};
         {? _oki
         || _ildkl2:=exec('reoIL_IL2','magdok_wymiary',_mat,_ildkl,DK_L.WS2);
            {? ~exec('adddelsl','magazyn_stan',_mag,_mat,DK_L.LOK,DK_L.TW,-_ildkl,1,null(),DK_L.SCEAN,_ildkl2)
            || undo()
            || {? DK_L.IL=0 || DK_L.del() ?}
            ?}
         || undo()
         ?};

         DK_L.index('DK');
         DK_L.prefix(_n_ref,null(),_r_eanl,null(),_n_tw,1,_n_scean,);
         {? DK_L.first()
         || DK_L.IL+=_ildkl;
            exec('reoIL2','magdok_wymiary');
            _oki:=DK_L.put(1)
         || DK_L.prefix();
            DK_L.DK:=_n_ref; DK_L.SCSQL:=_n_dk;
            DK_L.AUTO:=1; DK_L.LOK:=_r_eanl; DK_L.SCEAN:=_n_scean; DK_L.TW:=_n_tw; DK_L.IL:=_ildkl;
            exec('reoIL2','magdok_wymiary');
            exec('uzupIDkod','magdok_palety',DK_L);
            _oki:=DK_L.add(1)
         ?};
         {? _oki
         || {? ~exec('adddelsl','magazyn_stan',_mag,_mat,DK_L.LOK,DK_L.TW,_ildkl,1,null(),DK_L.SCEAN)
            || undo()
            || {? DK_L.IL=0 || DK_L.del() ?}
            ?}
         || undo()
         ?};
         DK.cntx_pop();
         DK_L.cntx_pop();
         __aktdkl.ILR-=_ildkl;
         __aktdkl.put(1);
         _doroz-=_ildkl;
         {? __aktdkl.ILR>0 || _doroz>0 & __aktdkl.next() || __aktdkl.del() ?}
      || _doroz>0 & __aktdkl.next()
      ?}
   !}
?};
_res:=~_doroz;
_res


\SCEAN2DK_L
::---------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: zmienia zapisy dla pola SCEAN na DK_L-ach związanych z DK
::   WE: _a - ref DK
::   WY: 1-ok 0-nie
::---------------------------------------------------------------------------------------------------------------------
DK.cntx_psh();
DK_L.cntx_psh();
DK_L.index('DK');
DK_L.prefix(_a,null());
{? DK_L.first()
|| {!
   |? DK_L.SCEAN:=DK_L.DK().SCEAN;
      DK_L.put(1);
      DK_L.next()
   !}
?};
DK.cntx_pop();
DK_L.cntx_pop();
~~


\BADH_WER_bZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [19.42]
:: OPIS: Przed akcją "Zmień Zakres" podczas dołączania badania do operacji zleceń (Tabela ZGP)
::----------------------------------------------------------------------------------------------------------------------
FILTER.win_edit('RED_BAD2');

{? FILTER.edit("
   {? (FILTER.B_ODD > FILTER.B_DOD) & FILTER.B_DOD<>date(0,0,0)
   || FUN.info('Data końcowa nie może być wcześniejsza niż początkowa'@);
      'STARTD'
   || 1
   ?}
")
|| exec('BADH_zakres_filtr','statexam');
   grp_edisp(FILTER,'RED_BAD');
   exec('set','#params',8605,
      {? FILTER.B_A<>'' ||  FILTER.B_A || 'W' ?}+
      {? FILTER.B_DOREJ<>'' ||  FILTER.B_DOREJ || 'W' ?}+
      {? FILTER.B_START<>'' ||  FILTER.B_START || 'W' ?}+
      {? FILTER.B_WYK<>'' ||  FILTER.B_WYK || 'W' ?}+
      {? FILTER.B_POTW<>'' ||  FILTER.B_POTW || 'W' ?}
   ,OPERATOR.USER)
?}


\BADH_zakres_filtr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [19.42]
:: OPIS: Ustawienie filtru dla tabeli ZGP podczas dołączania badania do operacji zleceń
::----------------------------------------------------------------------------------------------------------------------
::Popranie parametrów aktywnego filtru
_join:=POMOC.K1;
_where:=POMOC.K2;
_param1:=POMOC.K3;
_param2:=POMOC.K4;

{? FILTER.B_A<>'' | FILTER.B_DOREJ<>'' | FILTER.B_WYK<>'' | FILTER.B_POTW<>'' |  FILTER.B_START<>''
|| _join+=' left join PROD_REJ using (PROD_REJ.ZGP,ZGP.REFERENCE) ';
   {? FILTER.B_A<>''
   || _where+=' and PROD_REJ.A=\''+FILTER.B_A+'\''
   ?};
   {? FILTER.B_DOREJ<>''
   || _where+=' and PROD_REJ.DOREJ=\''+FILTER.B_DOREJ+'\''
   ?};
   {? FILTER.B_WYK<>''
   || _where+=' and PROD_REJ.OK=\''+FILTER.B_WYK+'\''
   ?};
   {? FILTER.B_POTW<>''
   || _where+=' and PROD_REJ.POTW=\''+FILTER.B_POTW+'\''
   ?};
   {? FILTER.B_START<>''
   || _tmp:={? FILTER.B_START='T' || 'N' || 'T' ?};
      _join+=' left join @ZLGD using (ZLGD.ZGP,ZGP.REFERENCE) ';
     _where+=' and ZLGD.ZAK=\''+_tmp+'\''
   ?}
?};


{? FILTER.B_ODD<>date(0,0,0)
|| _where+=' and ZGP.STARTD > to_date(\''+$FILTER.B_ODD+'\')'
?};
{? FILTER.B_DOD<>date(0,0,0)
|| _where+=' and ZGP.STARTD < to_date(\''+$FILTER.B_DOD+'\')'
?};
ZGP.f_set('OPIS',_join,_where,{? _param1<>'' || _param1 ?},{? _param2<>'' || _param2 ?})


\BADH_WER_bP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [19.42]
:: OPIS: Przed akcją Popraw w BADH WER
::----------------------------------------------------------------------------------------------------------------------
exec('badh_set_efld_opt','statexam','RED');

BADH.win_edit('RED_OPER');
exec('badh_set_efld_opt','statexam','RED_OPER');

BADSEH.index('AN');
BADSEH.f_clear;
BADSEH.prefix('O');

_env_guide:=exec('env_guide','zl_guide');
params_set('env_guide',_env_guide);

{? BADH.edit()
|| BADH.put(1)
?};
0


\BADH_WER_bS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [19.42]
:: OPIS: Przed akcją Szukaj w BADH WER
::----------------------------------------------------------------------------------------------------------------------
{? BADH.TYP='O'
|| BADH.win_patt('SZUK_OPE');
   ZL.f_clear();
   ZGH.f_clear();
   ZGP.f_clear();
   TWRKPLC.f_clear
|| ~~
::   BADH.win_patt('SZUK')
?}

\BADH_WER_bWy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [19.42]
:: OPIS: Przed akcją Wyświetl w BADH WER
::----------------------------------------------------------------------------------------------------------------------
{? BADH.TYP='O'
|| BADH.win_edit('DIS_OPER')
|| BADH.win_edit('RED')
?};
BADH.display();
~~


\BADH_choice
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AKUL] [19.42]
:: OPIS: Umożliwia wybór konkretnego ZLGD przy akceptacji badań do operacji zlecenia
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(3,
'S','STRING[1]','Status wykonania produkcji, W-Wykonana, O-Otwarta ',
'STATUS','STRING[50]','Status',
'WYK','STRING[50]','Wykonawca',
'DT','DATE','Data',
'ZM','STRING[1]','Zmiana',
'DEK_IL','REAL','Ilość - dobre',
'DEK_BR','REAL','Ilość - braki',
'IL_W','STRING[20]','Ilość do wytworzenia',
'REF','STRING[20]','Ref ZLGD/ZGP'
);
_res:='';
{? BADH.ZGP<>null
|| BADH.ZGP();
   {? var_press('_pop')>100 || obj_del(_pop) ?};
   _pop:=exec('il_pop','zl_guide',ZGP.ref);
   _first:=_pop.FIRST;
   _pop_il:=_pop.IL_POP;
   _chk:=exec('get','#params',500631,2);
::   _chk1:=exec('get','#params',500634,2);
   _il_w:=ZGP.IL+ZGP.IL_BRAK+ZGP.DEK_IL+ZGP.DEK_BR;
   _il_dw:=0;
   _zgp_il:=ZGP.ILOSC;
   _ilosc:='';
   {? (_chk='T' & ~_first) | _pop_il>_zgp_il
   || _il_dw:=_pop_il
   || _il_dw:=_zgp_il
   ?};
   {? _first
   || _ilosc:=$_il_dw
   || _ilosc:=$_il_dw+ ' ('+$(_il_dw - _il_w)+')'
   ?};

   _formula:="
   _tab:=_b;
   ZLGD.cntx_psh();
   ZLGD.index('S2');
   ZLGD.prefix(BADH.ZGP);
   {? ZLGD.first()
   || {!
      |? _tab.S:='W';
         _tab.STATUS:='Zarejestrowane wykonanie operacji'@;
         _tab.WYK:=
            {? ZLGD.BP='P'
            || ZLGD.P().OSOBA().PIERWSZE+' '+ ZLGD.P().OSOBA().NAZWISKO
            || ZLGD.B().NAZ
            ?};
         _tab.DT:=ZLGD.DT;
         _tab.ZM:=ZLGD.ZMIANA;
         _tab.DEK_IL:=ZLGD.IL;
         _tab.DEK_BR:=ZLGD.IL_BRAK;
         _tab.REF:=$ZLGD.ref();
         _tab.add;
         ZLGD.next()
      !}
   ?};
   ZLGD.cntx_pop();
   1
   ";

   _oddzial:=1+(BADH.name+3);
   _msk_start:=(ZLGD.name()-3)+_oddzial+'01';
   _msk_end:=(ZLGD.name()-3)+_oddzial+'99';
   exec('for_each_mask','#table',ZLGD,_formula,_msk_start,_msk_end,_tab,1);

:: Jeśli operacja w trakcie wykonania to dodaje dodatkowy rekord
   {? BADH.ZGP<>null & BADH.ZGP().ZL().STAN<>'Z' & BADH.ZGP().STATUS<>'W'
   || _tab.blank(1);
      _tab.S:='O';
      _tab.STATUS:='Operacja w trakcie wykonywania'@;
      _tab.REF:=$BADH.ZGP;
      _tab.add
   ?};
::Sprawdzenie operacji naprawczych
::   BRAKI_K.cntx_psh();
::   BRAKI_K.index('ZGP_SRC');
::   BRAKI_K.prefix(BADH.ZGP);
::   {? BRAKI_K.first
::   || {!
::      |? __IL_C+=BRAKI_K.IL;
::         BRAKI_K.next
::      !}
::   ?};
::   BRAKI_K.cntx_pop();
::Wypełnienie pola IL_W
   {? _tab.first()
   || {!
      |? _tab.IL_W:=_ilosc;
         _tab.put;
         _tab.next()
      !}
   ?};

   _sel:=_tab.mk_sel('Wybór wykonania produkcji dla którego zarejestrować badanie'@,,0,'tabcho',,,,,'U');
   _tab.win_fld(_sel,,'STATUS',,,-30,,,'Status'@);
   _tab.win_fld(_sel,,'WYK',,,-30,,,'Wykonawca'@);
   _tab.win_fld(_sel,,'DT',,,,,,'Data'@);
   _tab.win_fld(_sel,,'DEK_IL',,,-15,,,'Ilość - dobre'@);
   _tab.win_fld(_sel,,'DEK_BR',,,-15,,,'Ilość - braki'@);
   _tab.win_fld(_sel,,'IL_W',,,-25,,,'Ilość - do wytworzenia (pozostało)'@);
   _tab.win_sel(_sel);
   _tab.fld_fml('WYK','BEFORE_DISPLAY',"_tab:=cur_tab(); {? _tab.S= 'O' || 0 || 1 ?}");
   _tab.fld_fml('DT','BEFORE_DISPLAY',"_tab:=cur_tab(); {? _tab.S= 'O' || 0 || 1 ?}");
   _tab.fld_fml('DEK_IL','BEFORE_DISPLAY',"_tab:=cur_tab(); {? _tab.S= 'O' || 0 || 1 ?}");
   _tab.fld_fml('DEK_BR','BEFORE_DISPLAY',"_tab:=cur_tab(); {? _tab.S= 'O' || 0 || 1 ?}");
   _tab.fld_fml('IL_W','DISPLAY_FORMAT',"exec('alignment_right','#field')");
   _tab.win_act(_sel,,'Formuła','Wybierz'@@,,,"sel_exit()");
   _tab.actions(_sel,,'W');
   _tab.fld_attr(,2);

   {? _tab.select()
   || _res:=_tab.REF
   || _res:=''
   ?}
?};
_res


\modDK_L
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: zmienia zapisy dla DK_L-a reorganizacji
::   WE: _a - poprzedni SCSQL
::       _b - nowy SCSQL
::   WY: 1-ok 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_o_sc:=_a;
_n_sc:=_b;
_o_tw:=exec('FindAndGet','#table',DK,_o_sc,,"TW",'');
_n_tw:=exec('FindAndGet','#table',DK,_n_sc,,"TW",'');
_o_ean:=exec('FindAndGet','#table',DK,_o_sc,,"SCEAN",'');
_n_ean:=exec('FindAndGet','#table',DK,_n_sc,,"SCEAN",'');
_o_il:=exec('FindAndGet','#table',DK,_o_sc,,"IL",'');
_n_il:=exec('FindAndGet','#table',DK,_n_sc,,"IL",'');

_mag:=exec('FindAndGet','#table',DK,_o_sc,,"N().MAG",null());
_mat:=exec('FindAndGet','#table',DK,_o_sc,,"M",null());

_dk_l:=tab_tmp(2,'SQL','STRING[16]','','REF','INTEGER','');
_dk_ln:=tab_tmp(1,'SQL','STRING[16]','','ROK','STRING[2]','','IL','REAL','');
_zwrot:=tab_tmp(2,'EANL','STRING[16]','','TW','DATE','','IL','REAL','');

VAR_DEL.delete('__blokada');
__blokada:='';
_isReturn:=0;
_isAddRet:=0;

OKR.cntx_psh();
exec('psh_cntx','powdok');
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.last()
|| {!
   |? exec('mag_open','open_tab',ST.ODDZ,$OKR.ROK+2);
      DK_L.index('SCSQL');
      DK_L.prefix(_mag,_mat,_o_sc,);
      {? DK_L.first()
      || {!
         |? {? DK_L.DK=null() & DK_L.Z_DO='Z'
            || _dk_ln.clear();
               _dk_ln.prefix($DK_L.DK_LN,);
               {? _dk_ln.first()
               || _dk_ln.IL+=fabs(DK_L.IL);
                  _dk_ln.put(1)
               || _dk_ln.blank();
                  _dk_ln.SQL:=$DK_L.DK_LN;
                  _dk_ln.ROK:=form(8+_dk_ln.SQL)+2;
                  _dk_ln.IL:=fabs(DK_L.IL);
                  _dk_ln.add(1)
               ?};
               _dk_l.prefix();
               _dk_l.blank();
               _dk_l.SQL:=$DK_L.DK_LN;
               _dk_l.REF:=#DK_L.ref();
               _dk_l.add(1)
            |? DK_L.DK<>null() & DK_L.DK().N().TYP().DN='T' & DK_L.DK().PLUS='T' & DK_L.DK().PRDK<>$DK_L.DK().ref()
            || _isReturn:=1;
               {? _o_tw=_n_tw   || _o_tw:=DK_L.DK().TW ?};
               {? _n_ean<>'' & _o_ean=_n_ean || _o_ean:=DK_L.DK().SCEAN ?};
               _zwrot.clear();
               _zwrot.prefix($DK_L.LOK,DK_L.TW);
               {? _zwrot.first()
               || _zwrot.IL+=DK_L.IL;
                  _zwrot.put(1)
               || _zwrot.blank();
                  _zwrot.EANL:=$DK_L.LOK;
                  _zwrot.TW:=DK_L.TW;
                  _zwrot.IL:=DK_L.IL;
                  _zwrot.add(1)
               ?}
            ?};
            _reo:=0;
::          pomniejszanie zapisów na zwrocie
            {? (DK_L.DK<>null() & DK_L.DK().Z='T' & DK_L.DK().PLUS='N')
             | (_reo:=DK_L.DK=null() & DK_L.Z='T' & DK_L.Z_DO='Z'; _reo)
            ||
::             dokument rozchodowy lub reorganizacja Z
               _zwrot.clear();
               _zwrot.prefix($DK_L.LOK,DK_L.TW);
               {? _zwrot.first()
               || _zwrot.IL-=fabs(DK_L.IL);
                  _zwrot.put(1)
               || _zwrot.blank();
                  _zwrot.EANL:=$DK_L.LOK;
                  _zwrot.TW:=DK_L.TW;
                  _zwrot.IL:=-fabs(DK_L.IL);
                  _zwrot.add(1)
               ?}
            ?};
            {? _reo
            ||
::             reorganizacja DO
               _zwrot.clear();
               _zwrot.prefix($DK_L.LOKDO,DK_L.TWDO);
               {? _zwrot.first()
               || _zwrot.IL+=fabs(DK_L.IL);
                  _zwrot.put(1)
               || _zwrot.blank();
                  _zwrot.EANL:=$DK_L.LOKDO;
                  _zwrot.TW:=DK_L.TWDO;
                  _zwrot.IL:=fabs(DK_L.IL);
                  _zwrot.add(1)
               ?}
            ?};
            {? DK_L.DK<>null() & DK_L.DK().PLUS='T' & $DK.ref()=_o_sc & _o_sc<>_n_sc
            || _zwrot.clear();
               _zwrot.prefix($DK_L.LOK,DK_L.TW);
               {? _zwrot.first()
               || _zwrot.IL+=DK_L.IL;
                  _zwrot.put(1)
               || _zwrot.blank();
                  _zwrot.EANL:=$DK_L.LOK;
                  _zwrot.TW:=DK_L.TW;
                  _zwrot.IL:=DK_L.IL;
                  _zwrot.add(1)
               ?}
            ?};
            DK_L.next()
         !}
      ?};
      OKR.prev()
   !}
?};
OKR.cntx_pop();
_dk_ln.clear(); _zwrot.clear();
_reozwr:=0;
_reozwr+={? _dk_ln.size()>0 || 1 || 0 ?};
_reozwr+={? _zwrot.size()>0 & _isReturn || 2 || 0 ?};

::& _o_tw<>_n_tw
{? _o_sc<>_n_sc & ~_reozwr
|| MKODK.index('RSQL');
   MKODK.prefix(_o_sc,_o_sc,_mat);
   {? MKODK.first()
   || MKODK.prefix();
      _scean:='';
      {? MKODK.RSQL<>'' & MKODK.M().IDMOB='D' || _scean:=exec('FindAndGet','#table',DK,MKODK.RSQL,,"SCEAN",'') ?};
      {? ~(_scean<>'' & _scean=MKODK.KODK)
      || MKODK.RSQL:=_n_sc;
         MKODK.put()
      ?}
   ?}
|? (_o_sc<>_n_sc & _reozwr) | _reozwr%2
||
:: nastąpił podział dostawy - zostanie wygenerowana reorganizacja dzieląca starą dostawę z nową
:: i zablokowane wszystkie poprzednie reorganizacje dotyczące starej dostawy
   exec('mag_open','open_tab',ST.ODDZ,$ST.AR+2);
   _dorozp:=_n_il;
:: pobieram ref-a nowej dostawy
   _refdk:=exec('FindAndGet','#table',DK,_n_sc,,,null());
   _olddk_l:=tab_tmp(1,'EANL','STRING[16]','','IL','REAL','','ZWR','REAL','');
   DK_L.index('DK');
   DK_L.prefix(_refdk);
   {? DK_L.first()
   || {!
      |? _olddk_l.blank();
         _olddk_l.EANL:=$DK_L.LOK;
         _olddk_l.IL:=fabs(DK_L.IL);
         _olddk_l.add(1);
         {? _isReturn
         || _zwrot.clear();
            _zwrot.prefix($DK_L.LOK,_o_tw);
            {? _zwrot.first()
            || _zwrot.IL+=DK_L.IL;
               _zwrot.put(1)
            || _zwrot.blank();
               _zwrot.EANL:=$DK_L.LOK;
               _zwrot.TW:=_o_tw;
               _zwrot.IL:=DK_L.IL;
               _zwrot.add(1)
            ?}
         ?};
         DK_L.next()
      !}
   ?};
   DK_LN.prefix();
   DK_LN.blank();
   DK_LN.MG:=_mag;
   DK_LN.RODZ:='K';
   DK_LN.ZDOK:=_n_sc;
   DK_LN.AKC:='N';
   {? DK_LN.add(1)
   || _newdk_ln:=DK_LN.ref();
      delay(1)
   || _newdk_ln:=null();
      _res:=0;
      undo()
   ?};
:: kwalifikacja dla zwrotu

   {? _res & _reozwr%2
   || _zwrot.clear();
      {? _zwrot.first()
      || {!
         |? _rozp:=_zwrot.IL;
            _olddk_l.clear();
            {? _olddk_l.first()
            || {!
               |? _stan:=_olddk_l.IL-_olddk_l.ZWR;
                  {? _stan>0
                  || _rozn:={? _rozp>_stan || _stan || _rozp ?};
                     {? _rozn>0
                     || {? _zwrot.EANL=_olddk_l.EANL
                        || _olddk_l.ZWR+=_rozn;
                           _olddk_l.put(1);
                           _rozp-=_rozn
                        || _lokdo:=exec('FindAndGet','#table',EANL,_olddk_l.EANL,,,null());
                           _lok:=exec('FindAndGet','#table',EANL,_zwrot.EANL,,,null());
::                ściągnięcie ze starej lokalizacji dostawy i wstawienie na nową
                           DK_L.clear();
                           DK_L.blank();
                           DK_L.DK:=null();
                           DK_L.DK_LN:=_newdk_ln;
                           DK_L.DT:=DK_L.DK_LN().DT;
                           DK_L.TM:=DK_L.DK_LN().TM;
                           DK_L.US:=DK_L.DK_LN().US;
                           DK_L.Z:=DK_L.DK_LN().AKC;
                           DK_L.MG:=_mag;
                           DK_L.Z_DO:='Z';
                           DK_L.LOK:=_lok;
                           DK_L.LOKDO:=_lokdo;
                           DK_L.TW:=DK_L.TWDO:=_o_tw;
                           DK_L.IL:=_rozn;
                           DK_L.M:=_mat;
                           DK_L.AUTO:=0;
                           DK_L.JM:=DK_L.M().J;
                           DK_L.FAP:=null();
                           DK_L.PAL:=DK_L.PALDO:=null();
                           DK_L.SCEAN:=_o_ean;
                           DK_L.SCSQL:=_o_sc;
                           exec('reoIL2','magdok_wymiary');
                           exec('uzupIDkod','magdok_palety',DK_L);
                           {? ~DK_L.add(1)
                           || _res:=0;
                              undo()
                           || _isAddRet:=1
                           ?};
                           _olddk_l.ZWR+=_rozn;
                           _olddk_l.put(1);
                           _rozp-=_rozn;
::                przeniesienie na nową lokalizację ze starej dostawy
                           DK_L.LOK:=_lokdo;
                           DK_L.LOKDO:=_lok;
                           DK_L.SCEAN:=_n_ean;
                           DK_L.SCSQL:=_n_sc;
                           DK_L.TW:=DK_L.TWDO:=_n_tw;
                           exec('reoIL2','magdok_wymiary');
                           exec('uzupIDkod','magdok_palety',DK_L);
                           {? ~DK_L.add(1)
                           || _res:=0;
                              undo()
                           ?}
                        ?}
                     ?}
                  ?};
                  _rozp>0 & _rozn>0 & _olddk_l.next()
               !}
            ?};
            _zwrot.next()
         !}
      ?}
   ?};
   __aktdkl.clear();
   {? _res & __aktdkl.first()
   || {!
      |? {? __aktdkl.ILE>0 & __aktdkl.DKREF=_o_sc
         || _rozn:={? __aktdkl.ILE>_dorozp || _dorozp || __aktdkl.ILE ?};
            _lok:=exec('FindAndGet','#table',EANL,__aktdkl.EANL,,,null());
            _olddk_l.clear();
            {? _olddk_l.first()
            || {!
               |? _stan:=_olddk_l.IL-_olddk_l.ZWR;
                  {? _stan>0
                  || _wgsc:={? _stan>_rozn || _rozn || _stan ?};
                     _lokdo:=exec('FindAndGet','#table',EANL,_olddk_l.EANL,,,null());
::                ściągnięcie ze starej dostawy
                     DK_L.clear();
                     DK_L.blank();
                     DK_L.DK:=null();
                     DK_L.DK_LN:=_newdk_ln;
                     DK_L.DT:=DK_L.DK_LN().DT;
                     DK_L.TM:=DK_L.DK_LN().TM;
                     DK_L.US:=DK_L.DK_LN().US;
                     DK_L.Z:=DK_L.DK_LN().AKC;
                     DK_L.MG:=_mag;
                     DK_L.Z_DO:='Z';
                     DK_L.LOK:=_lok;
                     DK_L.LOKDO:=_lokdo;
                     DK_L.TW:=DK_L.TWDO:=_o_tw;
                     DK_L.IL:=_wgsc;
                     DK_L.M:=_mat;
                     DK_L.AUTO:=0;
                     DK_L.JM:=DK_L.M().J;
                     DK_L.FAP:=null();
                     DK_L.PAL:=DK_L.PALDO:=null();
                     DK_L.SCEAN:=_o_ean;
                     DK_L.SCSQL:=_o_sc;
                     exec('reoIL2','magdok_wymiary');
                     exec('uzupIDkod','magdok_palety',DK_L);
                     {? ~DK_L.add(1)
                     || _res:=0;
                        undo()
                     ?};
::                wprowadzenie nowej dostawy
                     DK_L.LOK:=_lokdo;
                     DK_L.LOKDO:=_lok;
                     DK_L.SCEAN:=_n_ean;
                     DK_L.SCSQL:=_n_sc;
                     DK_L.TW:=DK_L.TWDO:=_n_tw;
                     exec('reoIL2','magdok_wymiary');
                     exec('uzupIDkod','magdok_palety',DK_L);
                     {? ~DK_L.add(1)
                     || _res:=0;
                        undo()
                     ?};
                     _rozn-=_wgsc;
                     _dorozp-=_wgsc;
                     _olddk_l.IL-=_wgsc;
                     _next:={? _olddk_l.IL=0 || _olddk_l.del() || _olddk_l.next() ?}
                  |? ~_isAddRet & ~_stan
                  || _wgsc:={? _olddk_l.IL>_rozn || _rozn || _olddk_l.IL ?};
                     _lokdo:=exec('FindAndGet','#table',EANL,_olddk_l.EANL,,,null());
::                ściągnięcie ze starej dostawy
                     DK_L.clear();
                     DK_L.blank();
                     DK_L.DK:=null();
                     DK_L.DK_LN:=_newdk_ln;
                     DK_L.DT:=DK_L.DK_LN().DT;
                     DK_L.TM:=DK_L.DK_LN().TM;
                     DK_L.US:=DK_L.DK_LN().US;
                     DK_L.Z:=DK_L.DK_LN().AKC;
                     DK_L.MG:=_mag;
                     DK_L.Z_DO:='Z';
                     DK_L.LOK:=_lok;
                     DK_L.LOKDO:=_lokdo;
                     DK_L.TW:=DK_L.TWDO:=__aktdkl.TW;
                     DK_L.IL:=_wgsc;
                     DK_L.M:=_mat;
                     DK_L.AUTO:=0;
                     DK_L.JM:=DK_L.M().J;
                     DK_L.FAP:=null();
                     DK_L.PAL:=DK_L.PALDO:=null();
                     DK_L.SCEAN:=_o_ean;
                     DK_L.SCSQL:=_o_sc;
                     exec('reoIL2','magdok_wymiary');
                     exec('uzupIDkod','magdok_palety',DK_L);
                     {? ~DK_L.add(1)
                     || _res:=0;
                        undo()
                     ?};
::                wprowadzenie nowej dostawy
                     DK_L.LOK:=_lokdo;
                     DK_L.LOKDO:=_lok;
                     DK_L.SCEAN:=_n_ean;
                     DK_L.SCSQL:=_n_sc;
                     DK_L.TW:=DK_L.TWDO:=_n_tw;
                     exec('reoIL2','magdok_wymiary');
                     exec('uzupIDkod','magdok_palety',DK_L);
                     {? ~DK_L.add(1)
                     || _res:=0;
                        undo()
                     ?};
                     _rozn-=_wgsc;
                     _dorozp-=_wgsc;
                     _olddk_l.IL-=_wgsc;
                     _next:={? _olddk_l.IL=0 || _olddk_l.del() || _olddk_l.next() ?}
                  || _next:=_olddk_l.del()
                  ?};
                  _rozn>0 & _next
               !}
            ?}
         ?};
         _dorozp>0 & __aktdkl.next()
      !}
   ?};
   {? _newdk_ln<>null()
   || {? exec('FindInSet','#table','DK_L','DK_LNLOK',_newdk_ln)<>null()
      || __blokada:=_n_sc; exec('akcreone','magdok_wymiary',_newdk_ln,0)
      || DK_LN.cntx_psh();
         DK_LN.prefix();
         {? DK_LN.seek(_newdk_ln) || exec('deldk_ln','magdok_wymiary',1) ?};
         DK_LN.cntx_pop()
      ?}
   ?}
|? _o_sc=_n_sc
||
:: zmieniono tylko termin ważności na dostawie - należy zmienić go na wszystkich poprzednich odwołaniach
:: typu reorganizacja
   _dk_ln.clear();
   {? _dk_ln.first()
   || _rok:='';
      {!
      |? {? _rok<>_dk_ln.ROK
         || exec('mag_open','open_tab',ST.ODDZ,_dk_ln.ROK);
            _rok:=_dk_ln.ROK
         ?};
         _dk_l.clear();
         _dk_l.prefix(_dk_ln.SQL,);
         {? _dk_l.first()
         || {!
            |? DK_L.prefix();
               {? DK_L.seek(_dk_l.REF,)
               || _ile:=fabs(DK_L.IL);
                  _o_tw:=DK_L.TW;
                  _o_ean:=DK_L.SCEAN;
                  DK_L.SCSQL:=_n_sc;
                  DK_L.TW:=DK_L.TWDO:=_n_tw;
                  DK_L.SCEAN:=_n_ean;
                  {? DK_L.put(1)
                  || {? DK_L.Z='T'
                     || {? ~exec('adddelsl','magazyn_stan',_mag,_mat,DK_L.LOK,_o_tw,-DK_L.IL,1,null(),_o_ean,-DK_L.IL2)
                        || _res:=0;
                           undo()
                        ?};
                        {? ~exec('adddelsl','magazyn_stan',_mag,_mat,DK_L.LOK,_n_tw,DK_L.IL,1,null(),_n_ean,DK_L.IL2)
                        || _res:=0;
                           undo()
                        ?};
::                      zapisy dla lokalizacji DO
                        DK_L.cntx_psh();
                        DK_L.index('DK_LN');
                        DK_L.prefix('D',DK_L.DK_LN,DK_L.M,DK_L.LOKDO,null(),_o_tw);
                        {? DK_L.first()
                        || {!
                           |? {? DK_L.IL=_ile & DK_L.SCSQL=_o_sc & DK_L.SCEAN=_o_ean & DK_L.TW=_o_tw
                              || DK_L.prefix();
                                 DK_L.TW:=DK_L.TWDO:=_n_tw;
                                 DK_L.SCEAN:=_n_ean;
                                 DK_L.SCSQL:=_n_sc;
                                 {? DK_L.put(1)
                                 || {? ~exec('adddelsl','magazyn_stan',_mag,_mat,DK_L.LOK,_o_tw,-DK_L.IL,1,null()
                                         ,_o_ean,-DK_L.IL2)
                                    || _res:=0;
                                       undo()
                                    ?};
                                    {? ~exec('adddelsl','magazyn_stan',_mag,_mat,DK_L.LOK,_n_tw,DK_L.IL,1,null()
                                         ,_n_ean,-DK_L.IL2)
                                    || _res:=0;
                                       undo()
                                    ?}
                                 ?};
                                 0
                              || DK_L.next()
                              ?}
                           !}
                        ?};
                        DK_L.cntx_pop()
                     ?}
                  || _res:=0;
                     undo()
                  ?}
               ?};
               _res & _dk_l.next()
            !}
         ?};
         _res & _dk_ln.next()
      !}
   ?}
?};
{? __blokada<>''
|| _dk_ln.clear();
   {? _dk_ln.first()
   || {!
      |? {? ~exec('FindAndGet','#table',DK_LN,_dk_ln.SQL,,"prefix();ZDOK:=__blokada;put(1)",0)
         || _res:=0;
            undo()
         ?};
         _dk_ln.next()
      !}
   ?}
?};
exec('pop_cntx','powdok');
obj_del(_dk_l);
obj_del(_dk_ln);
obj_del(_zwrot);
VAR_DEL.delete('__blokada');
_res


\update_ilp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Trigery obsługujące pola tabeli BADO na podstawie ZLGD (kontrola ilości braków przy kontroli w locie)
::   WE: _a - rodzaj trigera: 'add', 'put', 'del'
::----------------------------------------------------------------------------------------------------------------------
{? _a='add'
|| _before:=0; _after:=ZLGD.IL_BRAK+ZLGD.DEK_BR;_ref:=ZLGD.ZGP
|? _a='put'
|| _before:=bfld('IL_BRAK')+bfld('DEK_BR'); _after:=ZLGD.IL_BRAK+ZLGD.DEK_BR; _ref:=ZLGD.ZGP
|? _a='del'
|| _before:=bfld('IL_BRAK')+bfld('DEK_BR'); _after:=0; _ref:=bfld('ZGP')
?};
BADO.cntx_psh();
BADO.index('ZGP');
BADO.prefix(_ref);
{? BADO.last()
|| BADO.ILP-=_after-_before;
   BADO.put()
?};
BADO.cntx_pop();
~~


\badseh_wer_activate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [20.14]
:: OPIS: Aktywacja zestawu badań - BADSEH.WER
::----------------------------------------------------------------------------------------------------------------------
_tab:=BADSEH.sel_aget();
BADSEH.sel_adel();
BADSEH.cntx_psh();
_tab.clear();

{? _tab.first()
|| {? (_opc:=FUN.choice('Wybierz jedną z opcji dla zaznaczonych zestawów badań:'@
              ,,'Aktywacja'@,'Zmiana stanu'@)) & _opc>0
   || _err:=0;
      {!
      |? {? (BADSEH.clear(); BADSEH.seek(_tab.REF,)) & (_opc=2 | (_opc=1 & BADSEH.AKT<>'T'))
         || {? BADSEH.AKT<>'T'
            || BADSEH.AKT:='T';
               BADSEH.put(1)
            || _link:=sql(''+"select distinct tab.TABELA from :_a tab where tab.TABELA<>'BADSEP'",BADSEH.testlink());
               {? _link.first()
               || _err+=1
               || BADSEH.AKT:='N';
                  BADSEH.put(1)
               ?};
               obj_del(_link)
            ?}
         || _err+=1
         ?};
         _tab.next()
      !};
      {? _err<>0 || FUN.info('Pominięto: %1 zaznaczonych zestawów badań.'@[form(_err,,0,'99')]) ?}
   ?}
|? BADSEH.AKT='T'
|| FUN.info('Wskazany zestaw badań jest aktywny.'@)
|? BADSEH.AKT<>'T' & FUN.ask('Czy aktywować dany zestaw badań?'@)
|| BADSEH.AKT:='T';
   BADSEH.put(1)
?};
BADSEH.cntx_pop();
~~


\badseh_wer_deactivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [20.14]
:: OPIS: Dezaktywacja zestawu badań - BADSEH.WER
::----------------------------------------------------------------------------------------------------------------------
_tab:=BADSEH.sel_aget();
BADSEH.sel_adel();
BADSEH.cntx_psh();
_tab.clear();

{? _tab.first()
|| {? (_opc:=FUN.choice('Wybierz jedną z opcji dla zaznaczonych zestawów badań:'@
              ,,'Dezaktywacja'@,'Zmiana stanu'@)) & _opc>0
   || _err:=0;
      {!
      |? {? (BADSEH.clear(); BADSEH.seek(_tab.REF,)) & (_opc=2 | (_opc=1 & BADSEH.AKT='T'))
         || {? BADSEH.AKT<>'T'
            || BADSEH.AKT:='T';
               BADSEH.put(1)
            || _link:=sql(''+"select distinct tab.TABELA from :_a tab where tab.TABELA<>'BADSEP'",BADSEH.testlink());
               {? _link.first()
               || _err+=1
               || BADSEH.AKT:='N';
                  BADSEH.put(1)
               ?};
               obj_del(_link)
            ?}
         || _err+=1
         ?};
         _tab.next()
      !};
      {? _err<>0 || FUN.info('Pominięto: %1 zaznaczonych zestawów badań.'@[form(_err,,0,'99')]) ?}
   ?}
|? BADSEH.AKT='N'
|| FUN.info('Wskazany zestaw badań jest nieaktywny.'@)
|? BADSEH.AKT='T'
|| _link:=sql(''+"select distinct tab.TABELA from :_a tab where tab.TABELA<>'BADSEP'",BADSEH.testlink());
   {? _link.first()
   || FUN.info('Dany zestaw badań jest wykorzystywany w systemie.\nDezaktywacja niemożliwa.'@)
   |? FUN.ask('Czy dezaktywować dany zestaw badań?'@)
   || BADSEH.cntx_psh();
      BADSEH.prefix();
      BADSEH.AKT:='N';
      BADSEH.put(1);
      BADSEH.cntx_pop()
   ?};
   obj_del(_link)
?};
BADSEH.cntx_pop();
~~


\stats_wer_activate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [20.14]
:: OPIS: Aktywacja statusu dostaw - STATS.WER
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? STATS.A='T'
|| FUN.info('Wskazany status dostawy jest aktywny.'@)

|? STATS.A='N'
 & FUN.ask('Czy na pewno uaktywnić status?'@)
|| STATS.A:='T';
   STATS.put()
?};
0


\stats_wer_deactivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [20.14]
:: OPIS: Dezaktywacja statusu dostaw - STATS.WER
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? STATS.A='T'
 & FUN.ask('Po dezaktywacji status nie będzie dostępny do wyboru w słowniku statusów.'
           '\nCzy na pewno dezaktywować status?'@)
|| STATS.A:='N';
   STATS.put()

|? STATS.A='N'
|| FUN.info('Wskazany status dostawy jest nieaktywny.'@)
?};
0


\pobPLUS2MG
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Pobiera informacje o dokumentach przesunięcia między magazynowego dla danej dostawy pierwotnej
::   WE: _a - tabela danych
::       _b - dostawa pierwotna PRDK
::   WY: 1-zostało coś dodane 0-nic nie zostało dodane
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_tab:={? var_pres('_a')=type_of(FIRMA) || _a || return(_res) ?};
_prdk:={? var_pres('_b')=type_of('') & (+_b)=16 || _b || '' ?};

{? _prdk<>''
|| _odd:=1+(DK.name()+3);
   VAR_DEL.delete('__typd');
   OKR.cntx_psh();
   ND.cntx_psh();
   DK.cntx_psh();
   OKR.index('MC'); OKR.prefix(REF.FIRMA,1);
   {? OKR.first()
   || {!
      |? ND.use('nagdo'+_odd+form(OKR.ROK-2000,-2,0,'99'));
         DK.use('dokma'+_odd+form(OKR.ROK-2000,-2,0,'99'));
         DK.index('PRDK');
         DK.prefix(_prdk,);
         {? DK.first()
         || {!
            |? __typd:=DK.N().TYP().T;
               {? DK.PLUS='T' & DK.N().NDSQL<>''
                 & exec('FindAndGet','#table',ND,DK.N().NDSQL,,"TYP().DN='N' & TYP().TD=__typd",0)
                 & DK.PRDK<>$DK.ref() & (_tab.clear(); ~_tab.find_key($DK.ref()))
               || _tab.blank();
                  _tab.REF:=$DK.ref();
                  _tab.MG:=exec('FindAndGet','#table',ND,DK.N().NDSQL,,"$MAG",'');
                  _tab.MD:=$DK.N().MAG;
                  _tab.IL:=DK.IL;
                  _tab.RDK:=#DK.ref();
                  _tab.NDK:=DK.name();
                  _tab.SCEAN:=0;
                  {? _tab.add(1)
                  || _res:=1;
                     exec('pobPLUS2MG','statexam',_tab,$DK.ref())
                  ?}
               ?};
               DK.next()
            !}
         ?};
         OKR.next()
      !}
   ?};
   OKR.cntx_pop();
   ND.cntx_pop();
   DK.cntx_pop();
   VAR_DEL.delete('__typd')
?};
_res


\pobSCEAN2PART
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Pobiera informacje o dostawach z danym kodem identyfikacyjnym dostawy z partią
::   WE: _a - tabela danych
::       _b - kod SCEAN dostawy
::       _c - dostawa do pominięcia
::   WY: 1-zostało coś dodane 0-nic nie zostało dodane
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_tab:={? var_pres('_a')=type_of(FIRMA) || _a || return(_res) ?};
_scean:={? var_pres('_b')=type_of('') || _b || '' ?};
_nosql:={? var_pres('_c')=type_of('') || _c || '' ?};

{? _scean<>''
|| _odd:=1+(DK.name()+3);
   OKR.cntx_psh();
   OKR.index('MC');
   OKR.prefix(REF.FIRMA,1);
   {? OKR.last()
   || {!
      |? ND.cntx_psh();
         DK.cntx_psh();
         ND.use('nagdo'+_odd+form(OKR.ROK-2000,-2,0,'99'));
         DK.use('dokma'+_odd+form(OKR.ROK-2000,-2,0,'99'));
         DK.index('SCEAN');
         DK.prefix(_scean,_scean,'T');
         {? DK.first()
         || {!
            |? {? DK.PARTIA<>null() & $DK.ref()<>_nosql & (_tab.clear(); ~_tab.find_key($DK.ref()))
               || _tab.blank();
                  _tab.REF:=$DK.ref();
                  _tab.MG:=exec('FindAndGet','#table',ND,DK.N().NDSQL,,"$MAG",'');
                  _tab.MD:=$DK.N().MAG;
                  _tab.IL:=DK.IL;
                  _tab.RDK:=#DK.ref();
                  _tab.NDK:=DK.name();
                  _tab.SCEAN:=1;
                  {? _tab.add(1) || _res:=1 ?}
               ?};
               DK.next()
            !}
         ?};
         ND.cntx_pop();
         DK.cntx_pop();
         OKR.prev()
      !}
   ?};
   OKR.cntx_pop()
?};
_res


\aktSCEAN2TW
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: sktualizuje dane na inncyh dostawach wg pola SCEAN
::   WE: _a - tabela danych
::       _b - tabela dodatkowych danych
::   WY: 1-zostało coś dodane 0-nic nie zostało dodane
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_tab:={? var_pres('_a')=type_of(FIRMA) || _a || return(_res) ?};
_buf:={? var_pres('_b')=type_of(FIRMA) || _b || return(_res) ?};
_len:=_tab.fld_num();
_ndx:=_buf.ndx_tmp('',1,'SCEAN',,);
_tab.cntx_psh();
_tab.prefix();
{? _tab.first()
|| {!
   |? {? _tab.SCEAN<>'' & _tab.N_TW<>_tab.C_TW
      || _n_tw:=_tab.N_TW;
         _buf.index(_ndx);
         _buf.prefix(_tab.SCEAN,);
         {? _buf.first()
         || {!
            |? _tab.cntx_psh();
               _tab.prefix();
               _tab.blank();
               {! _ii:=1.._len |! _tab[_ii]:=_buf[_ii] !};
               _tab.N_TW:=_n_tw;
               _tab.N_STS:=_tab.C_STS;
               {? _tab.add(1) || _res:=1 ?};
               _tab.cntx_pop();
               _buf.del()
            !}
         ?}
      ?};
      _tab.next()
   !}
?};
_tab.cntx_pop();
_buf.ndx_drop();
obj_del(_buf);
obj_del(_tab);
_res


\env_bad_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Buduje środowisko do rejestrowania wyników badań przy rejestracji wykonania produkcji
::----------------------------------------------------------------------------------------------------------------------
{? var_press('__ENV_BAD')>100 || obj_del(__ENV_BAD) ?};
__ENV_BAD:=_env:=obj_new('TAB','BADSEH','WER','RED_D','RED_R','RED_S','RED_W','RED','NDX_UNIQ');

_env.BADSEH:=null();
_env.TAB:=_tab:=tab_tmp(2,
      'PAR','STRING[60]','Nazwa parametru',
      'SOURCE','STRING[255]','Domyślne źródło/metodyka',
      'VALUE','REAL','Wartość parametru',
      'WAR','STRING[30]','Wartość parametru (wersja nasienna)',
      'TYP','STRING[1]','Typ parametru',
      'PARREF','STRING[16]','BADPAR.ref'
);
_env.NDX_UNIQ:=_tab.ndx_tmp(,,'PARREF',,);

_tab.fld_attr(,2);

:: Okno wertowania
_env.WER:=_wer:=_tab.mk_sel('Parametry badania'@,'P',,'bad_op_wer',,,,,'U','T');
_tab.win_fld(_wer,,'PAR',,,-30,,1,'Parametr'@);
_tab.win_fld(_wer,,'SOURCE',,,-30,,1,'Domyślne źródło/metodyka'@);
_tab.win_fld(_wer,,'WAR',,,,,,'Wartość'@);
_tab.win_sel(_wer);

_formula:="
   _tab:=cur_tab(1,1);
   _env:=__ENV_BAD;
   _tab.win_edit(_env.RED);
   BADP.cntx_psh();
   BADP.blank();
   _valid:=\"
      _tab:=cur_tab(1,1);
      _env:=__ENV_BAD;
      _res:=1;
      _tab.cntx_psh();
      _tab.clear();
      {? _tab.find_tab(,'PARREF',,'=',$BADP.BADPAR)
      || _res:=0;
         FUN.info('Badanie posiada już wskazany parametr.'@)
      ?};
      _tab.cntx_pop();
      _res
   \";
   {? _tab.edit(_valid)
   || _tab.blank();
      _tab.PAR:=BADP.BADPAR().N;
      _tab.TYP:=BADP.BADPAR().TYP;
::      _tab.SOURCE:=BADSEP.SOURCE;
      _tab.PARREF:=$BADP.BADPAR;
      _tab.add(1)
   ?};
   BADP.cntx_pop();
   1
";
_tab.win_act(_wer,0,'Formuła','Dołącz'@,,,_formula);
_tab.win_act(_wer,1,'Formuła','Dołącz'@,,,_formula);

_formula:="
   _tab:=cur_tab(1,1);
   _env:=__ENV_BAD;
   {? _tab.TYP='S'
   || _tab.win_edit(_env.RED_S);
      BADVAR.WARS:=_tab.WAR
   |?  _tab.TYP='W'
   || _tab.win_edit(_env.RED_W);
      BADVAR.WARS:=_tab.WAR
   |? _tab.TYP='D'
   || _tab.win_edit(_env.RED_D);
      _date:=_tab.WAR;
      BADVAR.WARD:=date((#(4+_date)),#((7+_date)+2),#((10+_date)+2))
   |? _tab.TYP='R' | _tab.TYP='P'
   || _tab.win_edit(_env.RED_R);
      BADVAR.WARR:=#_tab.WAR
   ?};
   {? _tab.edit()
   || {? _tab.TYP='W'
      || _tab.WAR:=~-(BADVAR.WARS);
         _tab.VALUE:={? _tab.WAR='T' || 1 || 0 ?}
      |? _tab.TYP='S'
      || _tab.WAR:=BADVAR.WARS;
         _tab.VALUE:=0
      |? _tab.TYP='D'
      || _tab.WAR:=BADVAR.WARD$1;
         _tab.VALUE:=#BADVAR.WARD
      |? _tab.TYP='R' | _tab.TYP='P'
      || _tab.WAR:=form(BADVAR.WARR,,,'9.');
         _tab.VALUE:=BADVAR.WARR
      ?};
      _tab.put()
   ?};
   1
";
_tab.win_act(_wer,,'Formuła','Popraw'@,,,_formula,,1);
_tab.win_act(_wer,,'Usuń');
_formula:="
   _tab:=cur_tab(1,1);
   _env:=__ENV_BAD;
:: Podczytuje wartość parametru do zmiennej
   {? _tab.TYP='S'
   || BADVAR.WARS:=_tab.WAR
   |?  _tab.TYP='W'
   || BADVAR.WARS:=_tab.WAR
   |? _tab.TYP='D'
   || _date:=_tab.WAR;
      BADVAR.WARD:=date((#(4+_date)),#((7+_date)+2),#((10+_date)+2))
   |? _tab.TYP='R' | _tab.TYP='P'
   || BADVAR.WARR:=#_tab.WAR
   ?};
:: Podczytuje parametr
   BADPAR.prefix();
   BADPAR.seek(_tab.PARREF);
   ~~
";
_tab.win_act(_wer,,'Rekord',,,,_formula);

_formula:="
   _tab:=cur_tab(1,1);
   _env:=__ENV_BAD;
   {? _tab.TYP='S'
   || _tab.win_edit(_env.RED_S)
   |?  _tab.TYP='W'
   || _tab.win_edit(_env.RED_S)
   |? _tab.TYP='D'
   || _tab.win_edit(_env.RED_D)
   |? _tab.TYP='R' | _tab.TYP='P'
   || _tab.win_edit(_env.RED_R)
   ?};
   _tab.display()
";
_tab.win_act(_wer,,'Wyświetl',,,,_formula);

:: Okna redagowania
_env.RED_D:=_redd:=_tab.mk_edit('Wartość typu data'@,0,'bad_op_redd',,,,);
_tab.win_esep(_redd,'Dane podstawowe'@);
_tab.win_efld(_redd,,'PAR',,,34,0,1,'Parametr'@,);
_tab.win_efld(_redd,BADVAR,'WARD','','',10,0,0,'Wartość'@);
exec('ok_esc','#window',_tab,_redd);

_env.RED_R:=_redr:=_tab.mk_edit('Wartość liczbowa'@,0,'bad_op_redr',,,,);
_tab.win_esep(_redr,'Dane podstawowe'@);
_tab.win_efld(_redr,,'PAR',,,34,0,1,'Parametr'@,);
_tab.win_efld(_redr,BADVAR,'WARR','','',34,5,0,'Wartość'@);
exec('ok_esc','#window',_tab,_redr);

_env.RED_S:=_reds:=_tab.mk_edit('Wartość tekstowa'@,0,'bad_op_reds',,,,);
_tab.win_esep(_reds,'Dane podstawowe'@);
_tab.win_efld(_reds,,'PAR',,,34,0,1,'Parametr'@,);
_tab.win_efld(_reds,BADVAR,'WARS','','',34,0,0,'Wartość'@);
exec('ok_esc','#window',_tab,_reds);

_env.RED_W:=_redw:=_tab.mk_edit('Wartość Tak/Nie'@,0,'bad_op_redw',,,,);
_tab.win_esep(_redw,'Dane podstawowe'@);
_tab.win_efld(_redw,,'PAR',,,34,0,1,'Parametr'@,);
_tab.win_efld(_redw,BADVAR,'WARS','','',7,2,0,'Wartość'@,0,'','radio-buttons','left_label=1','Tak'@,
              "exec('str_t_','#blank')",'Nie'@,"exec('str_n_','#blank')");
exec('ok_esc','#window',_tab,_redw);

_env.RED:=_red:=_tab.mk_edit('Parametr badania'@,0,'bad_op_red',,,,);
_tab.win_esep(_red,'Dane podstawowe'@);
_tab.win_efld(_red,BADP,'BADPAR','N','N',60,0,0,'Parametr'@,0,'',,'add_to_dict=no,');
::_tab.win_efld(_red,BADP,'BADMSEP','SOURCE','*',60,0,1);
_tab.efld_opt(_red,'mark=1',BADP,'BADPAR','N');
exec('ok_esc','#window',_tab,_red);

_env


\zlgd_bad_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Wyświetla wyniki badań przeprowadzone w trakcie wykonywania operacji dla danego zapisu robocizny (ZLGD)
::       Działa na aktualnym rekordzie tabeli ZLGD
::----------------------------------------------------------------------------------------------------------------------
_zlgd:=ZLGD.ref();
{? _zlgd<>null()
|| BADH.cntx_psh();
   BADH.index('TZLGD');
   BADH.prefix('C',_zlgd,ref_name(_zlgd));
   {? BADH.first()
   || BADP.cntx_psh();
      BADP.index('BADHBPAR');
      BADP.prefix(BADH.ref());
      BADP.win_sel('WER_B_OP');
      _actions:=BADP.actions('WER_B_OP','DPUWA:DA','');
      BADP.select();
      BADP.actions('WER_B_OP',,_actions);
      BADP.cntx_pop()
   ?};
   BADH.cntx_pop()
?};
''


\posj2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Po redakcji dla drugiej jednostki ewidencyjnej
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('itsPositive','#field',1);
_dokl:={? VSTATS.M<>null || exec('jaka_dok_m','jm',VSTATS.M) || 3 ?};
_dokl_s:=exec('jaka_dok_mjm','jm',VSTATS.M,VSTATS.J2,VSTATS.M().J);
{? _dokl_s<0 || _dokl_s:=_dokl ?};
VSTATS.N_IL2:=VSTATS.N_IL2 $ _dokl_s;
roundmet(BEER.MDOKL);
{? _res
|| {? VSTATS.C_IL2=0 & VSTATS.WS2>0 || VSTATS.C_IL2:=VSTATS.N_IL2*VSTATS.WS2 $ VSTATS.M().DOKL ?};
    _n_il:=VSTATS.N_IL2*VSTATS.WS2 $ _dokl;
    roundmet(5);
    {? VSTATS.N_IL=0
     | (_n_il<>VSTATS.N_IL & (1 | FUN.ask('Przeliczyć ilość w jednostce podstawowej?'@)))
    || VSTATS.N_IL:=_n_il
    ?};
    VSTATS.WS2:={? VSTATS.C_IL2>0 & VSTATS.C_ILD>0 || VSTATS.C_ILD/VSTATS.C_IL2
                |? VSTATS.J2<>null() & VSTATS.C_IL2=0 || exec('oblWSP','jm',VSTATS.M)
                || 0
                ?}
?};
_res


\posjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Po redakcji dla pierwszej jednostki ewidencyjnej
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
{? VSTATS.M().J2<>null()
|| _dokl:={? VSTATS.M<>null || exec('jaka_dok_m','jm',VSTATS.M) || 3 ?};
   _dokl_s:=exec('jaka_dok_mjm','jm',VSTATS.M,VSTATS.J2,VSTATS.M().J);
   {? _dokl_s<0 || _dokl_s:=_dokl ?};
   VSTATS.N_IL:=VSTATS.N_IL$_dokl;
   _res:=exec('itsPositive','#field',1);
   {? _res & VSTATS.J2<>null()
   || _n_il2:=VSTATS.N_IL/VSTATS.WS2 $ (_dokl_s+1);
      roundmet(BEER.MDOKL);
      {? VSTATS.N_IL=0 || VSTATS.N_IL2:=0
      |? VSTATS.N_IL2=0
       | (_n_il2<>VSTATS.N_IL2 & (1 | FUN.ask('Przeliczyć ilość w drugiej jednostce ewidencyjnej?'@)))
      || VSTATS.N_IL2:=_n_il2
      ?}
   ?};
   VSTATS.WS2:={? VSTATS.C_IL2>0 & VSTATS.C_ILD>0 || VSTATS.C_ILD/VSTATS.C_IL2
               |? VSTATS.J2<>null() & VSTATS.C_IL2=0 || exec('oblWSP','jm',VSTATS.M)
               || 0
               ?}
?};
_res


\aktTWscean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: aktualizuje zapisy przy zmianie terminu
::   WE: _a - tabela
::       _b - SCEAN
::       _c - nowy termin ważności
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_scean:={? var_pres('_b')=type_of('') || _b || '' ?};
_n_tw:={? var_pres('_c')=type_of(date()) || _c || date(0,0,0) ?};
{? _scean<>'' & _n_tw<>date(0,0,0)
|| _tab.cntx_psh();
   _tab.prefix();
   {? _tab.first()
   || {!
      |? {? _tab.SCEAN=_scean
         || _tab.N_TW:=_n_tw;
            _tab.put(1)
         ?};
         _tab.next()
      !}
   ?};
   _tab.cntx_pop()
?};
~~


\statsM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: pobranie z tabeli M_DOD pola DEFSTATS
::   WE: _a - M.ref()
::   WY: status lub null()
::----------------------------------------------------------------------------------------------------------------------
_res:=null();
_firma:=exec('firma','ustawienia');
M_DOD.cntx_psh();
M_DOD.index('M_DOD');
M_DOD.prefix(_firma,_a);
{? M_DOD.first() || _res:=M_DOD.DEFSTATS ?};
M_DOD.cntx_pop();
_res


\badh_set_mzlgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Ustala pole BADH.MZLGD
::----------------------------------------------------------------------------------------------------------------------
{? BADH.ZLGD<>null()
|| BADH.MZLGD:=ref_name(BADH.ZLGD)
|| BADH.MZLGD:=''
?};
1


\badh_trig_add_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Trigger przed add() w tabeli BADH
::----------------------------------------------------------------------------------------------------------------------
:: Uzupełnienie pola MZLGD (maska ZLGD)
exec('badh_set_mzlgd','statexam');
1


\badh_trig_put_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Trigger przed put() w tabeli BADH
::----------------------------------------------------------------------------------------------------------------------
:: Uzupełnienie pola MZLGD (maska ZLGD)
exec('badh_set_mzlgd','statexam');
1


\badh_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Format wyświetlania dla pól tabeli BADH
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_fld:=cur_afld();
{? _fld='GET_DT' | _fld='MAD_DT' | _fld='AKC_DT'
|| _val:=fld();
   {? _val=date(0,0,0)
   || _result:='empty=1'
   ?}
?};
_result


\badp_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Format wyświetlania dla pól tabeli BADP
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_fld:=cur_afld();
{? _fld='MAD_DT'
|| _val:=fld();
   {? _val=date(0,0,0)
   || _result:='empty=1'
   ?}
|? _fld='MAD_TM'
|| {? BADP.MAD_DT=date(0,0,0)
   || _result:='empty=1'
   ?}
?};
_result


\zl_badh_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Wyświetla okno z badaniami dla zlecenia lub przewodnika (uruchamiana dla VAR.A_ZLEC lub VAR.A_NRPRZ)
::   WE: [_a] - INTEGER - kontekst wywołania: [1] - zlecenie, 0 - przewodnik zlecenia
::----------------------------------------------------------------------------------------------------------------------
__Mode:={? var_pres('_a')=type_of(0) || _a || 1 ?};
VAR.cntx_psh();
Cntx.psh(BADH,BADP,ZL,ZGH,ZGP);

_oddz:=ST.ODDZ;
BADH.use('badh_'+_oddz+'__');
BADP.use('badp_'+_oddz+'__');
BADH.prefix();

BADP.win_sel('OPER_ZL');
BADP.actions('WER_OPEL','PM');
_typ:=FILTER.TMP;
_status:=FILTER.STATUS;
FILTER.TMP:='O';
FILTER.STATUS:='';
{? __Mode=0
|| VAR.A_ZLEC:=VAR.A_NRPRZ().ZLEC
?};
_wp:=VAR.A_ZLEC().TYP().WP;

_formula:="
   ~~
";
_wnd:=BADH.grp_make('Badania'@,_formula,'badh4zl',,,,,'maximized');

_before:="
   FILTER.TMP:='O';
   exec('zl_badh_f_set','statexam');
   ~~
";
_after_rfr:="
   BADP.index('BADHPAR');
   BADP.prefix(BADH.ref(),'',);
   grp_disp(BADP,'OPER_ZL');
   ~~
";
:: Badania kwalifikacji jakości
{? _wp='P'
|| BADH.grp_sel(_wnd,BADH,'OPER_ZL2','Badania kontroli jakości'@,_after_rfr,,,,_before,,0,0,'maximized','ZL_BADHKJ');
   BADH.tab_splt(_wnd,,'horizontal','pozycje',15);
   BADH.grp_sel(_wnd,BADP,'OPER_ZL',,,,,,"
      {? grp_empty(BADH,'OPER_ZL2')
      || '#disable'
      || ~~
      ?}
   ",,,,'maximized_with_title','ZL_BADPKJ')
?};

_before:="
   FILTER.TMP:='C';
   FILTER.STATUS:='';
   exec('zl_badh_f_set','statexam');
   ~~
";
:: Badania do operacji podczas rejestarcji wykonania
BADH.grp_sel(_wnd,BADH,'OPER_ZL','Badania do operacji'@,_after_rfr,,,,_before,,0,0,'maximized','ZL_BADHOP');
BADH.tab_splt(_wnd,,'horizontal','pozycje',15);
BADH.grp_sel(_wnd,BADP,'OPER_ZL',,,,,,"
   {? grp_empty(BADH,'OPER_ZL')
   || '#disable'
   || ~~
   ?}
",,,,'maximized_with_title','ZL_BADPOP');

BADH.win_sel(_wnd);

:: Badania - ikonki pól
exec('ikonki','statexam');

BADH.select();

FILTER.TMP:=_typ;
FILTER.STATUS:=_status;
BADP.actions('WER_OPEL');

Cntx.pop(BADH,BADP,ZL,ZGH,ZGP);
VAR.cntx_pop();
VAR_DEL.delete('__Mode');
~~


\zgh_badh_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Badania w oknie przewodników zleceń - lista badań dla przewodnika (uruchamiana dla VAR.A_NRPRZ)
::   WE: [_a] - INTEGER - kontekst wywołania: [1] - zlecenie, 0 - przewodnik zlecenia
::------------------------------------------------------------------------------------------------------------------
exec('zl_badh_sel','statexam',0);
~~


\zl_badh_f_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Ustawia filtr programowy na tabelę BADH - filtruje badania dla zlecenia/przewodnika.
::       Działa w oparciu o kontekst ustawiony w __Mode oraz VAR.A_ZLEC lub VAR.A_NRPRZ
::----------------------------------------------------------------------------------------------------------------------
_sort:='SYM';
_where:='';
{? __Mode=0
|| _from:='left join ZGH using (BADH.ZGH,ZGH.REFERENCE)';
   _where+='ZGH.REFERENCE=:_a ';
   _ref:=VAR.A_NRPRZ
|| _from:='left join ZL using (BADH.ZL,ZL.REFERENCE)';
   {? VAR.A_ZLEC().RODZAJ='Z' | VAR.A_ZLEC().RODZAJ='N'
   || _where+='ZL.NRNZL=:_a '
   || _where+='ZL.UNRZL=:_a '
   ?};
   _ref:=VAR.A_ZLEC().UNRZL
?};
_where+=' and BADH.TYP=\':_b\' ';
{? FILTER.STATUS<>''
|| _where+=' and BADH.STAN=\':_c\' '
?};
BADH.f_set(_sort,_from,_where,_ref,FILTER.TMP,FILTER.STATUS);
~~


\zl_badh_zakr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Zakres widoku badań (widok badań od strony zleceń)
::----------------------------------------------------------------------------------------------------------------------
_choice:=FUN.choice('Zakres widoku badań:'@,,'Powołane'@,'Wykonane'@,'Zatwierdzone'@,'Wszystkie'@);

{? _choice=1 || FILTER.STATUS:='P'
|? _choice=2 || FILTER.STATUS:='W'
|? _choice=3 || FILTER.STATUS:='Z'
|? _choice=4 || FILTER.STATUS:=''
?};
_ref:=BADH.ref();
exec('zl_badh_f_set','statexam');
BADH.f_seek(_ref);
~~


\badseh_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Wartość początkowa dla pól tabeli BADSEH
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_res:=~~;
{? _fld='TORP'
|| _res:=''
|? _fld='BAD_OP'
|| _res:=''
?};
_res


\BADSEH_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Ustawienie właściwości pól w oknie redagowania RED tabeli BADSEH
::----------------------------------------------------------------------------------------------------------------------
_win:='RED';
{? BADSEH.TYP='O'
|| BADSEH.efld_opt(_win,'editable=1',,'TTOPER','KOD');
   BADSEH.efld_opt(_win,'editable=1',,'TTOPER','NA')
|| BADSEH.efld_opt(_win,'editable=grayed',,'TTOPER','KOD');
   BADSEH.efld_opt(_win,'editable=grayed',,'TTOPER','NA')
?};
{? BADSEH.TYP='O' & BADSEH.TTOPER<>null()
|| _mode:='1';
   _mark:={? BADSEH.TORP='T' || '1' || '0' ?}
|| _mode:='grayed';
   _mark:='0'
?};
BADSEH.efld_opt(_win,'editable=%1, mark=%2'[_mode,_mark],,'MGR','KOD');
BADSEH.efld_opt(_win,'editable=%1'[_mode],,'MGR','NAZ');
BADSEH.efld_opt(_win,'editable=%1'[_mode],,'TORP');
BADSEH.efld_opt(_win,'editable=%1'[_mode],,'BAD_OP');
~~


\get_badseh4oper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Zwraca zestaw badań o przekazanaych parametrach. (sprawdza tylko aktywne)
::   WE: _a - TTOPER.ref() - operacja
::       [_b] - MGR.ref() - grupa materiałowa
::       [_c] - miejsce definiowania: ['T'] - technologia , 'P' - przewodnik
::       [_d] - czy badanie w trakcie wykonywania operacji: 'T' - tak, ['N'] - nie
::   WY: BADSEH.ref() lub null(), gdy badanie nie istnieje
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
_ttoper:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_mgr:={? var_pres('_b')=type_of(null()) || _b || null() ?};
_torp:={? var_pres('_c')=type_of('') || _c || 'T' ?};
_bad_op:={? var_pres('_d')=type_of('') || _d || 'N' ?};

BADSEH.cntx_psh();
BADSEH.index('OPER');
BADSEH.prefix('O','T',_ttoper,_mgr,_bad_op,_torp,);
{? BADSEH.first()
|| _ref:=BADSEH.ref()
||
:: Jeżeli nie ma pod daną grupę materiałową, to sprawdzam czy jest badanie domyślne dla danej operacji
:: (tylko dla typu Przewodnik)
   {? _torp='P'
   || BADSEH.prefix('O','T',_ttoper,null(),_bad_op,_torp,);
      {? BADSEH.first()
      || _ref:=BADSEH.ref()
      ?}
   ?}
?};
BADSEH.cntx_pop();
_ref


\badseh_copypar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Kopiuje parametry badań (z jednego badania do drugiego)
::   WE: _a - BADSEH.ref() - badanie źródłowe
::       _b - BADSEH.ref() - badanie docelowe
::----------------------------------------------------------------------------------------------------------------------
_src:=_a;
_dst:=_b;
_ok:=1;
BADSEH.cntx_psh();
BADSEH.prefix();
{? BADSEH.seek(_src)
|| BADSEP.cntx_psh();
   BADSEP.index('SEHPAR_');
   BADSEP.prefix(BADSEH.ref());
   {? BADSEP.first()
   || {!
      |?
         BADSEP.BADSEH:=_dst;
         BADSEP.cntx_psh();
         BADSEP.prefix();
         _ok:=BADSEP.add();
         BADSEP.cntx_pop();
         BADSEP.next() & _ok>0
      !}
   ?};
   BADSEP.cntx_pop()
?};
BADSEH.cntx_pop();
{? _ok=0
|| FUN.emsg('Kopiowanie parametrów badania nie powiodło się.'@)
?};
~~


\badvar_def_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Przed redakcją zmiennych BADVAR.DEF_R, BADVAR.DEF_D, BADVAR.DEF_S, BADVAR.DEF_P, BADVAR.DEF_W
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_res:=1;
_tab:=cur_tab(1,1);
_czy_def:=_tab.CZY_DEF='T';
{? _fld='DEF_R' || {? _czy_def>0 & _tab.BADPAR().TYP='R'  || _res:=1 || _res:=0 ?}
|? _fld='DEF_D' || {? _czy_def>0 & _tab.BADPAR().TYP='D' || _res:=1 || _res:=0 ?}
|? _fld='DEF_S' || {? _czy_def>0 & _tab.BADPAR().TYP='S' || _res:=1 || _res:=0 ?}
|? _fld='DEF_P' || {? _czy_def>0 & _tab.BADPAR().TYP='P' || _res:=1 || _res:=0 ?}
|? _fld='DEF_W' || {? _czy_def>0 & _tab.BADPAR().TYP='W' || _res:=1 || _res:=0 ?}
?};
_res


\badvar_def_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Po redakcji zmiennych BADVAR.DEF_R, BADVAR.DEF_D, BADVAR.DEF_S, BADVAR.DEF_P, BADVAR.DEF_W
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_tab:=cur_tab(1,1);

_tab.BADPAR();

_def_w:=BADVAR.DEF_W;

{? BADPAR.TYP='S' | BADPAR.TYP='W'
|| {? BADPAR.TYP='W' & (~-_def_w<>'N' & ~-_def_w<>'T')
   || FUN.info('Parametr może przyjmować tylko wartości T lub N.'@);
      _wyn:=0
   || {? BADPAR.TYP='W'
      || _tab.DEF_VAL:=~-(_def_w)
      || _tab.DEF_VAL:=BADVAR.DEF_S
      ?}
   ?}
|? BADPAR.TYP='D'
|| _tab.DEF_VAL:=BADVAR.DEF_D$1
|? BADPAR.TYP='R' | BADPAR.TYP='P'
|| {? BADPAR.TYP='P' & (BADVAR.DEF_P<0 | BADVAR.DEF_P>100)
   || FUN.info('Parametr jest wartością procentową i może zawierać się w zakresie od %1 do %2.'@['0','100']);
      _wyn:=0
   || _val:={? BADPAR.TYP='P' || BADVAR.DEF_P || BADVAR.DEF_R ?};
::    Sprawdzenie zgodności wartości domyślnej z wartościami od/do
::      {? _tab.VALLOW<>0 | _tab.VALHIGH<>0
::      || {? _val<_tab.VALLOW
::         || FUN.info('Wartość domyślna nie może być mniejsza od określonej \'Wartości od\'.'@);
::            _wyn:=0
::         |? _val>_tab.VALHIGH
::         || FUN.info('Wartość domyślna nie może być większa od określonej \'Wartości do\'.'@);
::            _wyn:=0
::         ?}
::      ?};
      {? _wyn>0
      || _tab.DEF_VAL:=form(_val,,,'9.')
      ?}
   ?}
?};
_wyn


\badvar_def_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Przed wyświetl zmiennych BADVAR.DEF_R, BADVAR.DEF_D, BADVAR.DEF_S, BADVAR.DEF_P, BADVAR.DEF_W
::----------------------------------------------------------------------------------------------------------------------
~~


\badvar_def_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Format wyświetlenia zmiennych BADVAR.DEF_R, BADVAR.DEF_D, BADVAR.DEF_S, BADVAR.DEF_P, BADVAR.DEF_W
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_tab:=cur_tab(1,1);
_format:='';
_empty:=1;
{? _tab.CZY_DEF='T'
|| {? _fld='DEF_R' & _tab.BADPAR().TYP='R'
   || _empty:=0
   |? _fld='DEF_D' & _tab.BADPAR().TYP='D' & _tab.DEF_CURD<>'T'
   || _empty:=0
   |? _fld='DEF_S' & _tab.BADPAR().TYP='S'
   || _empty:=0
   |? _fld='DEF_P' & _tab.BADPAR().TYP='P'
   || _empty:=0
   |? _fld='DEF_W' & _tab.BADPAR().TYP='W'
   || _empty:=0
   ?}
?};
_format:='empty=%1'[$_empty];
{? _fld='DEF_R' | _fld='DEF_P'
|| _format+=',out_prec=5'
?};
_format


\badvar_def_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Format edytowania zmiennych BADVAR.DEF_R, BADVAR.DEF_D, BADVAR.DEF_S, BADVAR.DEF_P, BADVAR.DEF_W
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_format:='';
{? _fld='DEF_R' | _fld='DEF_P'
|| _format:='in_prec=5'
?};
_format


\badsep_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Ustawienie właściwości pól w oknie redagowania RED/RED_OPER tabeli BADSEP/BADMSEP
::   WE: _a - BADSEP/BADMSEP - dla jakiej tabeli wywoływana funkcja
::----------------------------------------------------------------------------------------------------------------------
_tab:={? var_pres('_a')>0 & var_pres('_a')=type_of(BADSEP) || _a || return(~~) ?};
_win:=_tab.win_edit('?');
_tab.efld_opt(_win,'editable=grayed',,'DEF_CURD');
_tab.efld_opt(_win,'editable=grayed',,'DEF_DNI');
_tab.efld_opt(_win,'editable=grayed',BADVAR,'DEF_R');
_tab.efld_opt(_win,'editable=grayed',BADVAR,'DEF_D');
_tab.efld_opt(_win,'editable=grayed',BADVAR,'DEF_S');
_tab.efld_opt(_win,'editable=grayed',BADVAR,'DEF_P');
_tab.efld_opt(_win,'editable=grayed',BADVAR,'DEF_W');
{? _tab.CZY_DEF='T'
|| {? _tab.BADPAR().TYP='R'
   || _tab.efld_opt(_win,'editable=1',BADVAR,'DEF_R')
   |? _tab.BADPAR().TYP='D'
   || _tab.efld_opt(_win,'editable=1',,'DEF_CURD');
      {? _tab.DEF_CURD='T'
      || _tab.efld_opt(_win,'editable=1',,'DEF_DNI')
      || _tab.efld_opt(_win,'editable=1',BADVAR,'DEF_D')
      ?}
   |? _tab.BADPAR().TYP='S'
   || _tab.efld_opt(_win,'editable=1',BADVAR,'DEF_S')
   |? _tab.BADPAR().TYP='P'
   || _tab.efld_opt(_win,'editable=1',BADVAR,'DEF_P')
   |? _tab.BADPAR().TYP='W'
   || _tab.efld_opt(_win,'editable=1',BADVAR,'DEF_W')
   ?}
?};
{? _tab=BADSEP
|| {? _tab.BADSEH().TYP='O'
   || {? _tab.CYKL_CO='T'
      || _tab.efld_opt(_win,'editable=1,mark=1',,'IL_CO')
      || _tab.efld_opt(_win,'editable=grayed,mark=0',,'IL_CO')
      ?}
   ?}
?};
win_disp();
~~


\badvar_def_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Podczytuje wartości zmiennych BADVAR.DEF_R, BADVAR.DEF_D, BADVAR.DEF_S, BADVAR.DEF_P, BADVAR.DEF_W
::   WE: [_a] - tryb uruchomienia: [0] - tylko czyści wartości, 1 - podczytuje wartość wg aktywnego rekordu BADSEP
::       _b - BADSEP/BADMSEP - dla jakiej tabeli wywoływana funkcja
::----------------------------------------------------------------------------------------------------------------------
_load:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_tab:={? var_pres('_b')>0 & var_pres('_b')=type_of(BADSEP) || _b || return(~~) ?};
BADVAR.DEF_R:=0;
BADVAR.DEF_D:=date(0,0,0);
BADVAR.DEF_S:='';
BADVAR.DEF_P:=0;
BADVAR.DEF_W:='';

{? _load>0
|| _war:=_tab.DEF_VAL;
   {? _war<>''
   || BADPAR.cntx_psh();
      BADPAR.prefix();
      _tab.BADPAR();
      {? BADPAR.TYP='R'
      || BADVAR.DEF_R:=exec('str2real','#convert',_war)
      |? BADPAR.TYP='W'
      || BADVAR.DEF_W:=_war
      |? BADPAR.TYP='S'
      || BADVAR.DEF_S:=_war
      |? BADPAR.TYP='D'
      || {? _tab.DEF_CURD<>'T'
         || BADVAR.DEF_D:=exec('str2date','#convert',_war)
         ?}
      |? BADPAR.TYP='P'
      || BADVAR.DEF_P:=exec('str2real','#convert',_war)
      ?};
      BADPAR.cntx_pop()
   ?}
?};
~~


\badsep_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Rekord Przed w oknach tabeli BADSEP
::----------------------------------------------------------------------------------------------------------------------
{? _a
||
:: Podczytanie wartości domyślnych dla zmiennych
   exec('badvar_def_load','statexam',1,BADSEP)
?};
~~


\badsep_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Przed wyświetleniem w oknach tabeli BADSEP
::----------------------------------------------------------------------------------------------------------------------
exec('badsep_efld_opt','statexam',BADSEP);
BADSEP.display();
~~


\badseh_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Przed wyświetleniem w oknach tabeli BADSEH
::----------------------------------------------------------------------------------------------------------------------
exec('BADSEH_efld_opt','statexam');
BADSEH.display();
~~


\getvalfromwar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Zwraca wartość parametru (VALUE) w postaci REAL na podstawie wartośći parametru (WAR) w postaci string
::   WE: _a - typ parametru (R,P,W,D,S)
::       _b - wartość parametru
::   WY: wartość parametru (REAL)
::----------------------------------------------------------------------------------------------------------------------
_value:=0;
_typ:=_a;
_war:=_b;
{? _typ='W'
|| _value:={? _war='T' || 1 || 0 ?}
|? _typ='S'
|| _value:=0
|? _typ='D'
|| _value:=#(exec('str2date','#convert',_war))
|? _typ='R' | _typ='P'
|| _value:=exec('str2real','#convert',_war)
?};
_value


\BADP_WER_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Po rekord dla BADP
::----------------------------------------------------------------------------------------------------------------------
exec('chk_badp','statexam',-menu_txt()='popraw')


\chk_badp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Walidacja rekordu tabeli BADP
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_edit:=_a;
_res:='';
:: Sprawdzenie unikalności (Badanie+Parametr) - tylko dla elementów nadrzędnych
{? BADP.PARENT=''
|| _ref:={? _a=0 || null() || BADP.ref() ?};
   _err:=0;
   BADP.cntx_psh();
   BADPAR.cntx_psh();
   BADP.index('BADHPAR');
   BADP.prefix(BADP.BADH,'',BADP.BADPAR().N);
   {? BADP.first()
   || {? _a=0
      || _err:=1
      || {? _ref<>BADP.ref()
         || _err:=1
         || _err:=BADP.next()
         ?}
      ?}
   ?};
   BADPAR.cntx_pop();
   BADP.cntx_pop();
   {? _err>0
   || FUN.emsg('Parametr: %1 w tym badaniu już istnieje.'@[BADP.BADPAR().N]);
      _res:='BADPAR'
   ?}
?};
_res


\badp_elem_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Sprawdza, czy dana pozycja badania (BADP) zawiera elementy podrzędne (wygenerowane cyklicznie).
::       Działa na aktualnym buforze tabeli BADP
::   WY: Ilość elementów pozycji badania
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
BADP.cntx_psh();
BADP.index('PARENT');
BADP.prefix(BADP.uidref());
_res:=BADP.size();
BADP.cntx_pop();
_res


\badp_elem_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Wyświetla listę elementów podrzędnych (wygenerowanych cyklicznie) dla danej pozycji badania.
::       Działa na aktualnym buforze tabeli BADP
::----------------------------------------------------------------------------------------------------------------------
BADP.cntx_psh();
BADP.index('PARENT');
BADP.prefix(BADP.uidref());
BADP.win_sel('WER_OPEL');
{? BADP.first()
|| BADP.select()
?};
BADP.cntx_pop();
~~


\badp_fld_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Przed wyśietleniem pól tabeli BADP
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='WAR'
|| {? BADP.CZY_NAG='T'
   ||
::    Sprawdzenie, czy wszystkie elementy mają tę samą wartość
      _str:='<różna>'@;
      BADP.cntx_psh();
      BADP.index('PARWAR');
      _uid:=BADP.uidref();
      BADP.prefix(_uid,);
      {? BADP.first()
      || _war:=BADP.WAR;
         _size:=BADP.size();
         BADP.prefix(_uid,_war,);
         {? _size=BADP.size()
         || _str:=_war
         ?}
      ?};
      BADP.cntx_pop();
      BADP.WAR:=_str
   ?}
?};
~~


\badp_elem_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Przed Popraw dla elementu pozycji zestawu badań
::----------------------------------------------------------------------------------------------------------------------
{? exec('BADP_WER_bP','statexam')
|| _tab:=BADP.sel_aget();
   _tab.clear();
   {? _tab.first()
   || {? BADP.edit()
      || BADP.cntx_psh();
         BADP.prefix();
         {!
         |?
            {? BADP.seek(_tab.REF)
            || exec('badvar_war_ae','statexam');
               BADP.put()
            ?};
            _tab.next()
         !};
         BADP.cntx_pop()
      ?}
   || {? BADP.edit()
      || BADP.put()
      ?}
   ?}
?};
0


\badmsep_add_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja przed Dołącz w oknie BADMSEP
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
exec('badsep_efld_opt','statexam',BADMSEP);
exec('badvar_def_load','statexam',0,BADMSEP);
_result


\badmsep_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Rekord Przed w oknach tabeli BADMSEP
::----------------------------------------------------------------------------------------------------------------------
{? _a
||
:: Podczytanie wartości domyślnych dla zmiennych
   exec('badvar_def_load','statexam',1,BADMSEP)
?};
~~


\badmsep_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Przed wyświetleniem w oknach tabeli BADMSEP
::----------------------------------------------------------------------------------------------------------------------
exec('badsep_efld_opt','statexam',BADMSEP);
BADMSEP.display();
~~


\badh_dokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Załączniki dla nagłówków badań
::----------------------------------------------------------------------------------------------------------------------
exec('sel_dok','dokum','BADH',,,,1)


\statspal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Ustalenie statusu dostawy wg palet
::----------------------------------------------------------------------------------------------------------------------
_roln:=exec('get_par','#parametr',141);
DK_L.DK().M().KTM;
_nag:=DK_L.DK().N;

{? DK.Z='N' & DK.PLUS='T' & ND.TYP().DN<>'T'
||
   {? DK.RDK=0 || DK.RDK:=#DK.ref() ?};
   {? form(DK.NDK)='' || DK.NDK:=DK.name() ?};
   {? form(DK.PRDK)='' || DK.PRDK:=DK.SRDK:=$DK.ref() ?};
   DK.put(1)
?};
{? ND.TYP().DN='T' & DK.PRDK<>$DK.ref() & ~DK.ZP
|| FUN.info('Operacja niemożliwa dla dokumentu zwrotnego.\n Wykonaj kwalifikację dostawy na pierwotnej dostawie'@)
|? _roln='N' & DK.Z='N'
|| FUN.info('Operacja niemożliwa dla niezakończonego dokumentu.'@)
|? _roln='T'  | DK.Z='T'
|| VAR_DEL.delete('__paldkl');
   __paldkl:=tab_tmp(1,'PAL','STRING[16]','');
   _ScDk:=DK;
   _sel:=tab_tmp(1,'REF','INTEGER','','ILE','REAL','');
   DK.cntx_psh();
   DK_L.cntx_psh();
   _zaz:=DK_L.sel_aget();
   DK_L.sel_adel();
   {? _zaz.first()
   || {!
      |? {? (DK_L.prefix(); DK_L.seek(_zaz.REF,))
         || _pal:=DK_L.PAL;
            DK_L.index('CZYPAL');
            DK_L.prefix(_nag,_pal);
            {? DK_L.first()
            || __paldkl.clear();
               __paldkl.prefix($_pal);
               {? ~__paldkl.first()
               || __paldkl.prefix();
                  __paldkl.blank();
                  __paldkl.PAL:=$_pal;
                  __paldkl.add(1)
               ?};
               {!
               |? _sel.clear();
                  _sel.prefix(#DK_L.DK);
                  {? ~_sel.first()
                  || _sel.prefix();
                     _sel.blank();
                     _sel.REF:=#DK_L.DK;
                     _sel.ILE:=DK_L.IL;
                     _sel.add(1)
                  || _sel.ILE+=DK_L.IL;
                     _sel.put(1)
                  ?};
                  DK_L.next()
               !}
            ?}
         ?};
         _zaz.del()
      !}
   || _pal:=DK_L.PAL;
      DK_L.index('CZYPAL');
      DK_L.prefix(_nag,_pal);
      {? DK_L.first()
      || __paldkl.clear();
         __paldkl.prefix($_pal);
         {? ~__paldkl.first()
         || __paldkl.prefix();
            __paldkl.blank();
            __paldkl.PAL:=$_pal;
            __paldkl.add(1)
         ?};
         {!
         |? _sel.clear();
            _sel.prefix(#DK_L.DK);
            {? ~_sel.first()
            || _sel.prefix();
               _sel.blank();
               _sel.REF:=#DK_L.DK;
               _sel.ILE:=DK_L.IL;
               _sel.add(1)
            || _sel.ILE+=DK_L.IL;
               _sel.put(1)
            ?};
            DK_L.next()
         !}
      ?}
   ?};
   DK.cntx_pop();
   DK_L.cntx_pop();
   obj_del(_zaz);
   _sel.clear();

   _pl2mg:=tab_tmp(1,'REF','STRING[16]',''
             ,'MG','STRING[16]',''
             ,'MD','STRING[16]',''
             ,'IL','REAL',''
             ,'RDK','INTEGER',''
             ,'NDK','STRING[8]',''
             ,'SCEAN','INTEGER','');

   _tab:=exec('T4S','statexam');

   _mk_adel:=1;
   _ScDk.cntx_psh(); _ScDk.clear();
   _ok:=1;
   KOMM.init();
   {? _sel.first()
   || {!
      |? {? _ScDk.seek(_sel.REF,)
         || {? _ScDk.M().IDMOB='D' & _ScDk.M().IDZP
            || _add2zp:=exec('pobSCEAN2PART','statexam',_pl2mg,_ScDk.SCEAN
                         ,exec('MaskInt2RefSql','#convert',_ScDk.NDK,_ScDk.RDK))
            ?};
            _add2mg:=exec('pobPLUS2MG','statexam',_pl2mg,exec('MaskInt2RefSql','#convert',_ScDk.NDK,_ScDk.RDK));
            _ok*=exec('T4S_add_DK','statexam',_tab,_ScDk.NDK,_ScDk.RDK,'C',,,_add2mg,_sel.ILE).Result
         ?};
         _sel.next()
      !}
   ?};
   _ScDk.cntx_pop();
:: przesunięcia międzymagazynowe i identyfikacje wg dostaw z partiami
   _pl2mg.prefix();
   {? _pl2mg.first()
   || {!
      |? _ok*=exec('T4S_add_DK','statexam',_tab,_pl2mg.NDK,_pl2mg.RDK,'C',,,{? ~_pl2mg.SCEAN || 1 || 2 ?}).Result;
         _pl2mg.next()
      !}
   ?};
   obj_del(_pl2mg);
   _selkomm:=1;
   {? _ok=0
   || _mk_adel:=0;
      _selkomm:=KOMM.select('Zmiana statusu dostawy'@,,,,,,,,,,1)
   ?};
   _tab.first();
   _size:=_tab.size();
   {? _selkomm & _tab.first()
   || _buf:=exec('T4S','statexam');
      _stats:=exec('choose_STATS','statexam');
      {? _stats<>null()
      || {!
         |? {? ~_tab.ONLY_TW
            || _tab.N_STS:=#_stats;
               _tab.put(1)
            || _len:=_buf.fld_num();
               _buf.blank();
               {! _ii:=1.._len |! _buf[_ii]:=_tab[_ii] !};
               _buf.add(1)
            ?};
            {? _tab.ONLY_TW | _tab.C_STS=_tab.N_STS
            || exec('CleanTableRow','statexam',_tab);
               _size-=1;
               _tab.del()
            || _tab.next()
            ?}
         !};
         {? _tab.first() & FUN.ask('Nanieść zamiany?'@) & exec('T4S_select','statexam',_tab,'REDN',,1)
         || exec('aktSCEAN2TW','statexam',_tab,_buf);
            _applytab:=exec('T4Szapiszzmiany','statexam',_tab)
         |? _tab.first()=0
         || FUN.info(
               'Brak dostaw, dla których jest możliwa zmiana statusu.'
               'Wybrane dostawy posiadają już wybrany status %1.'@
               [exec('FindAndGet','#table',STATS,#_stats,,"''''+N+''''",'')]
            );
            _mk_adel:=0
         ?}
      ?};
      obj_del(_buf);
      ~~
   ?};
   exec('CleanTableData','statexam',_tab);
   VAR_DEL.delete('__paldkl');
   1
?};
0


\palstats
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Ustalenie statusu dostawy wg palet
::----------------------------------------------------------------------------------------------------------------------
_roln:=exec('get_par','#parametr',141);


VAR_DEL.delete('__paldkl');
__paldkl:=tab_tmp(1,'PAL','STRING[16]','');
_ScDk:=DK;
_sel:=tab_tmp(1,'REF','INTEGER','','ILE','REAL','');


DK.cntx_psh();
DK_L.cntx_psh();
PAL.cntx_psh();
PAL_POZ.cntx_psh();

_dkn:=DK.name();
_nomsk:=0;
_nomag:=0;
_nodok:=0;
_nodst:=0;
_nopal:=0;
_err:=0;
_zaz:=PAL.sel_aget();
PAL.sel_adel();
{? ~_zaz.first() || _zaz.blank(); _zaz.REF:=#PAL.ref(); _zaz.add(1) ?};
{? _zaz.first()
|| {!
   |? {? (PAL.prefix(); PAL.seek(_zaz.REF,)) & (PAL.P='T' | PAL.ROZ='B') & PAL.AKT='T'
      || _rpal:=PAL.ref();
         _is_r:=PAL.ROZ='B';
         _dok:='';
         _isp:=0;
         PAL_POZ.use('paletyp');
         PAL_POZ.index('PAL');
         PAL_POZ.prefix(_rpal);
         {? PAL_POZ.first()
         || do();
            {!
            |? {? PAL_POZ.IL>0
               || _isp+=1;
                  {? form(8+PAL_POZ.SCSQL)<>_dkn || _err:=1; _nomsk+=1
                  |? ~exec('FindAndGet','#table',DK,PAL_POZ.SCSQL,,"N().MAG().TYP*'DOST'",0) || _err:=1; _nomag+=1
                  |? _dok<>'' & _dok<>exec('FindAndGet','#table',DK,PAL_POZ.SCSQL,,"$N",'') || _err:=1; _nodok+=1
                  || {? _dok='' || _dok:=exec('FindAndGet','#table',DK,PAL_POZ.SCSQL,,"$N",'') ?};
                     {? _is_r & PAL_POZ.RSQL<>''
                     || _pal:=exec('FindAndGet','#table',PAL,PAL_POZ.RSQL,,,_rpal)
                     || _pal:=_rpal
                     ?};
                     DK.cntx_psh();
                     DK.prefix();
                     {? DK.seek(PAL_POZ.SCSQL)
                     || DK_L.index('DK');
                        DK_L.prefix(DK.ref(),);
                        {? DK_L.first() & DK_L.find_tab('first','PAL',,'=',_pal)
                        || _sel.clear();
                           _sel.prefix(#DK_L.DK);
                           {? ~_sel.first()
                           || _sel.prefix();
                              _sel.blank();
                              _sel.REF:=#DK_L.DK;
                              _sel.ILE:=DK_L.IL;
                              _sel.add(1)
                           || _sel.ILE+=DK_L.IL;
                              _sel.put(1)
                           ?}
                        || _err:=1; _nodst+=1
                        ?}
                     || _err:=1; _nodst+=1
                     ?};
                     DK.cntx_pop()
                  ?}
               ?};
               ~_err & PAL_POZ.next()
            !};
            {? _err || undo() ?};
            end();
            {? ~_err & _isp
            || __paldkl.clear();
               __paldkl.prefix($_rpal);
               {? ~__paldkl.first()
               || __paldkl.prefix();
                  __paldkl.blank();
                  __paldkl.PAL:=$_rpal;
                  __paldkl.add(1)
               ?}
            ?}
         || _err:=1; _nopal+=1
         ?}
      || _err:=1; _nopal+=1
      ?};
      ~_err & _zaz.del()
   !}
?};
{? _err
|| _txt:={? _nomsk>0 || 'Dostawy z innego roku niż %1.'@[$ST.AR]
         |? _nomag>0 || 'Magazyn dostawy innego typu niż DOSTAWY lub DOSTEWI.'@
         |? _nodok>0 || 'Dostawy na palecie z różnych przyjęć.'@
         |? _nodst>0 || 'Nie znaleziono dostawy wynikającej z pozycji palety.'@
         |? _nopal>0 || 'Paleta nie spełnia kryteriów: jest aktywna, została przyjęta, ma pozycję.'@
         || 'Nieokreślony.'@
         ?};
   FUN.info('Niemożliwa kwalifikacja wskazanych palet.\n\nPowód: %1'@[_txt])
?};

PAL.cntx_pop();
PAL_POZ.cntx_pop();
DK.cntx_pop();
DK_L.cntx_pop();
obj_del(_zaz);
_sel.clear();

_pl2mg:=tab_tmp(1,'REF','STRING[16]',''
          ,'MG','STRING[16]',''
          ,'MD','STRING[16]',''
          ,'IL','REAL',''
          ,'RDK','INTEGER',''
          ,'NDK','STRING[8]',''
          ,'SCEAN','INTEGER','');

_tab:=exec('T4S','statexam');

_mk_adel:=1;
_ScDk.cntx_psh(); _ScDk.clear();
_ok:=1;
KOMM.init();
{? _sel.first()
|| {!
   |? {? _ScDk.seek(_sel.REF,)
      || {? _ScDk.M().IDMOB='D' & _ScDk.M().IDZP
         || _add2zp:=exec('pobSCEAN2PART','statexam',_pl2mg,_ScDk.SCEAN
                      ,exec('MaskInt2RefSql','#convert',_ScDk.NDK,_ScDk.RDK))
         ?};
         _add2mg:=exec('pobPLUS2MG','statexam',_pl2mg,exec('MaskInt2RefSql','#convert',_ScDk.NDK,_ScDk.RDK));
         _ok*=exec('T4S_add_DK','statexam',_tab,_ScDk.NDK,_ScDk.RDK,'C',,,_add2mg,_sel.ILE).Result
      ?};
      _sel.next()
   !}
?};
_ScDk.cntx_pop();
:: przesunięcia międzymagazynowe i identyfikacje wg dostaw z partiami
_pl2mg.prefix();
{? _pl2mg.first()
|| {!
   |? _ok*=exec('T4S_add_DK','statexam',_tab,_pl2mg.NDK,_pl2mg.RDK,'C',,,{? ~_pl2mg.SCEAN || 1 || 2 ?}).Result;
      _pl2mg.next()
   !}
?};
obj_del(_pl2mg);
_selkomm:=1;
{? _ok=0
|| _mk_adel:=0;
   _selkomm:=KOMM.select('Zmiana statusu dostawy'@,,,,,,,,,,1)
?};
_tab.first();
_size:=_tab.size();
{? ~_err & _selkomm & _tab.first()
|| _buf:=exec('T4S','statexam');
   _stats:=exec('choose_STATS','statexam');
   {? _stats<>null()
   || {!
      |? {? ~_tab.ONLY_TW
         || _tab.N_STS:=#_stats;
            _tab.put(1)
         || _len:=_buf.fld_num();
            _buf.blank();
            {! _ii:=1.._len |! _buf[_ii]:=_tab[_ii] !};
            _buf.add(1)
         ?};
         {? _tab.ONLY_TW | _tab.C_STS=_tab.N_STS
         || exec('CleanTableRow','statexam',_tab);
            _size-=1;
            _tab.del()
         || _tab.next()
         ?}
      !};
      {? _tab.first() & FUN.ask('Nanieść zamiany?'@) & exec('T4S_select','statexam',_tab,'REDN',,1)
      || exec('aktSCEAN2TW','statexam',_tab,_buf);
         _applytab:=exec('T4Szapiszzmiany','statexam',_tab)
      |? _tab.first()=0
      || FUN.info(
            'Brak dostaw, dla których jest możliwa zmiana statusu.'
            'Wybrane dostawy posiadają już wybrany status %1.'@
            [exec('FindAndGet','#table',STATS,#_stats,,"''''+N+''''",'')]
         );
         _mk_adel:=0
      ?}
   ?};
   obj_del(_buf);
   ~~
?};
exec('CleanTableData','statexam',_tab);
VAR_DEL.delete('__paldkl');
1


\pd_stPAL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: okienko grupowe wg palet
::----------------------------------------------------------------------------------------------------------------------
{? KwalDost.SCdispl=1 || grp_disp(SC,KwalDost.SCwin,0,1) ?};
KwalDost.SCdispl:=0;
ATR.MJS:='SC';
~~


\pr_stPAL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Ustalenie statusu dostawy wg palet
::----------------------------------------------------------------------------------------------------------------------
KwalDost.tabt.open_all(ST.ODDZ+($ST.AR+2));
_stats:=KwalDost.StatsTab;
{? _stats.RSTATS>0
|| PAL.index('MGSTATS');
   PAL.prefix(KwalDost.MGref,exec('FindAndGet','#table',STATS,_stats.RSTATS,,'ref()',null()))

|? _stats.KIND<>''
|| PAL.index('MGSKIND');
   PAL.prefix(KwalDost.MGref,_stats.KIND)

|| PAL.index('MGSTATS');
   PAL.prefix(KwalDost.MGref)
?};
PAL.first();
~~

:Sign Version 2.0 jowisz:1045 2024/02/19 13:57:32 92cbfc165e3ac95c6cd416c744490296367aeb305dd1a105724e24e73196d5769341dcfe4a57c965176b39d81e9a9921556490e166b42498420ec4936a095d2575aadde36fbfe39da1a262ccdfdee92e5996e6a997084d89801010a26e55635982cc024f55effb61e187c77b0af6735698d3c9f9cab6d7488f412b8a08fab07e
