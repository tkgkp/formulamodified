:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ro_szuk.fml
:: Utworzony: 26.01.2018
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły wyszukujące dane osobowe.
::======================================================================================================================
:: Zgodnie z założeniami projektowymi wyszukiwanie odbywa się na podstawie jednego z identyfikatorów.
:: Zapytania bez jakiegokolwiek identyfikatora najczęściej prowadziłyby do braku jednoznaczości (np. wyszukiwanie po
:: samym imieniu) dlatego nie jest obsługiwane.
::======================================================================================================================
:: Formuły są wywoływane w czterech sytuacjach:
::    1 Podczas rzeczywistego wyszukiwania danych osobowych. Zadaniem formuły jest zidentyfikowanie szukanego podmiotu.
::    2 Podczas grupowego wyszukiwania danych, które mogą być zapomniane. Zadaniem formuły jest zwrócenie wszystkich
::      podmiotów, tak aby dla każdego z nich mozliwe było sprawdzenie retencji.
::    3 Podczas tworzenia żądania dla RU o możliwości zapomnienia danych. Wtedy pobierane są identyfikatory uwzględniane
::      w treści żądania.
::    4 Podczas przygotowywania dokumnetu zgody na przetawrzanie danych osobowych.
:: O bieżącym trybie pracy decyduje parametr AUTO (patrz niżej).
::======================================================================================================================
:: Do formuł wywoływanych przez silnik wyszukiwania (zawartych w pliku) przekazywany jest jeden argument - tablica
:: nazwana z następującymi elementami:
::    ORG      - Oryginalne wartości parametrów wyszukiwania - tablica nazwana, której polami są:
::               NAZWISKO, PIERWSZE, DRUGIE, PESEL, NIP, REGON, DOWOD, PASZPORT, TELEFON, EMAIL.
::    UNI      - Zunifikowane wartości parametrów wyszukiwania - tablica nazwana o strukturze jak ORG.
::    IDS      - Zgromadzone informacje identyfikujące właściwe dla celu przetwarzania danych.
::    RODO     - Obiekt klasy RODO.
::    RECB     - Tabela, w której umieszczane będą znalezione rekordy.
::    AUTO     - Tryb pracy (patrz: informacje powyżej):
::                0 - Wyszukiwanie rzeczywiste;
::                1 - Wyszukiwanie grupowe
::    AUTO_TAB - Akronim tabeli z której pochodzi konkretny wiersz.
::    AUTO_REF - Numer wiersza, na którym należy się ustawić w celu pobrania identyfikatorów.
::    RET      - Tablica nazwana (patrz \ret_val/ro_cfg.fml) do umieszczenia statusu wyszukiwania.
::    isAuto   - Formuła sprawdzająca rodzaj wywołania. Zwraca 0 dla sytuacji 1, wpp zwraca 1.
::    lookFor  - Formuła ustalająca początkową wartość zmiennej sterującej pętlą. Argumentem obowiązkowym jest alias
::               tabeli, po zawartości której wykonywana będzie iteracja o schemacie:
::                _loop:=TAB.first();
::                {!
::                |? _loop
::                |! ...
::                   _loop:=TAB.next()
::                !}
::               zależnie od sytuacji lookFor(TAB) zadziała jak TAB.first() lub jak TAB.seek(AUTO_REF,)
::    next     - Formuła ustalająca wartość zmiennej sterującej pętlą dla kolejnych przebiegów. Argumentem obowiązkowym
::               jest alias tabeli, po zawartości której wykonywana będzie iteracja. Zaleznie od sytuacji next(TAB)
::               zadziała jak TAB.next() lub jak 0
::======================================================================================================================
:: W formułach wyszukujących należy uzupełnić następujące informacje:
::    _ids.NAZWISKO:='SurName';
::    _ids.PIERWSZE:='FirstName';
::    _ids.DRUGIE:='SecondName';
::    _ids.DATAUR:='BirthDate';
::    _ids.PESEL:='PESEL';
::    _ids.NIP:='TIN';
::    _ids.REGON:='REGON';
::    _ids.DOWOD:='IDCardNo';
::    _ids.PASZPORT:='PassportNo';
::    _ids.ZNIP:='ForeignTIN';
::    _ids.TELEFON:='PhoneNo';
::    _ids.FAX:='Fax';
::    _ids.EMAIL:='EMail';
::    _ids.WWW:='WWWPage';
::    _ids.ADRES:='Address';
::    _ids.ULICA:='Street';
::    _ids.DOM:='BldgNo';
::    _ids.LOKAL:='AptNo';
::    _ids.KODPOCZ:='ZipCode';
::    _ids.MIASTO:='City';
::    _ids.KRAJ:='Country';
::    _ids.WOJ:='District';
::    _ids.RU_DS:='DataSource';
::    _ids.RU_AD:='AutoDecision';
:: gdzie:
::    _ids:=_a.IDS
:: Jeśli jakaś dana nie występuje, to przypisanie można pominąć.
::======================================================================================================================


\osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła wyszukująca w tabeli OSOBA rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::       _b [STRING] - kod odpowiadający kodowi formy zatrudnienia. Na jego podstawie ustalne są identyfikatory po,
::                     których jest realizowane wyszukiwanie
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_f_zatr:={? var_pres('_b')=type_of('') || _b || '' ?};
_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? ~_auto & _uni.PESEL='' & _uni.NIP='' & _uni.DOWOD='' & _uni.PASZPORT='' & _uni.ZNIP='' &
:: dodatkowy warunek sprawdzający wypełnienie pól identyfikatorów dla formy zatrunienia R i T
   {? _f_zatr='R' | _f_zatr='T'
   || _uni.NAZWISKO='' | _uni.PIERWSZE='' | _uni.DATAUR=''
   || 1
   ?}
|| _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(OSOBA);
   return()
?};
OSOBA.cntx_psh();
OSOBA.prefix();
_loop:=_arg.lookFor(OSOBA);
{!
|? _loop
|! _znip:='';
   {? _auto |
      _RODO.equal('PESEL',_uni.PESEL,OSOBA.PESEL) |
      _RODO.equal('NIP',_uni.NIP,OSOBA.NIP) |
      _RODO.equal('DOWOD',_uni.DOWOD,OSOBA.DOWOD) |
      _RODO.equal('PASZPORT',_uni.PASZPORT,OSOBA.PASZPORT) |
      (_znip:=exec('_os_znip','ro_szuk',_arg))<>'' |
:: dla formy zatrudnienia R/T dodatkowa możliwość wyszukania po innych identyfikatorach
      {? _f_zatr='T' | _f_zatr='R'
      || (_RODO.equal('NAZWISKO',_uni.NAZWISKO,OSOBA.NAZWISKO) &
         _RODO.equal('PIERWSZE',_uni.PIERWSZE,OSOBA.PIERWSZE) &
         _RODO.equal('DATAUR',_uni.DATAUR,$OSOBA.UR_DATA))
      || 0
      ?}
   || _ids.NAZWISKO:=OSOBA.NAZWISKO;
      _ids.PIERWSZE:=OSOBA.PIERWSZE;
      _ids.DRUGIE:=OSOBA.DRUGIE;
      _ids.DATAUR:=$OSOBA.UR_DATA;
      _ids.PESEL:=OSOBA.PESEL;
      _ids.NIP:=OSOBA.NIP;
      _ids.DOWOD:=OSOBA.DOWOD;
      _ids.PASZPORT:=OSOBA.PASZPORT;
      _ids.ZNIP:=_znip;
      OS_ADRES.cntx_psh();
      OS_ADRES.index('OD');
      OS_ADRES.prefix(OSOBA.ref());
      {? OS_ADRES.last()
      || _ids.ULICA:=OS_ADRES.ULICA;
         _ids.DOM:=OS_ADRES.DOM;
         _ids.LOKAL:=OS_ADRES.LOKAL;
         _ids.KODPOCZ:=OS_ADRES.KOD;
         _ids.MIASTO:=OS_ADRES.MIASTO;
         _ids.KRAJ:=OS_ADRES.KRAJ().NAZ;
         _ids.WOJ:=OS_ADRES.WOJEWODZ;
         _ids.TELEFON:=OS_ADRES.TEL;
         _ids.EMAIL:=OS_ADRES.EMAIL
      ?};
      OS_ADRES.cntx_pop();
      exec('ins_recb','ro_cfg',_arg.RECB,OSOBA)
   ?};
   _loop:=_arg.next(OSOBA)
!};
OSOBA.cntx_pop();
~~


\_os_znip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła sprawdza, czy zagraniczny numer identyfikacyjny podatnika jest związany z bieżącą osobą.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: Zwraca pusty napis lub znaleziony numer.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('OS_ZNIP')<>type_of(OSOBA)
|| return('')
?};

_arg:=_a;
_uni:=_arg.UNI;
_RODO:=_arg.RODO;

_ret:='';
OS_ZNIP.cntx_psh();
OS_ZNIP.prefix();
OS_ZNIP.f_set('OSOBA',,'OSOBA=:_a',OSOBA.ref());
_loop:=OS_ZNIP.f_first();
{!
|? _loop
|! {? _RODO.equal('ZNIP',_uni.ZNIP,OS_ZNIP.ZNIP)
   || _ret:=OS_ZNIP.ZNIP;
      _loop:=0
   || _loop:=OS_ZNIP.f_next()
   ?}
!};
OS_ZNIP.f_clear();
OS_ZNIP.cntx_pop();
_ret


\rd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła wyszukująca w tabeli RD rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? ~_auto & _uni.PESEL='' &
   {? var_pres('NIP',RD)=27 || _uni.NIP='' || 1 ?} &
   {? var_pres('DOWOD',RD)=27 || _uni.DOWOD='' || 1 ?} &
   {? var_pres('PASZPORT',RD)=27 || _uni.PASZPORT='' || 1 ?}
|| _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(RD);
   return()
?};
RD.cntx_psh();
RD.prefix();
_loop:=_arg.lookFor(RD);
{!
|? _loop
|! {? _auto |
      _RODO.equal('PESEL',_uni.PESEL,RD.PESEL) |
      (var_pres('NIP',RD)=27 & _RODO.equal('NIP',_uni.NIP,RD.NIP)) |
      (var_pres('DOWOD',RD)=27 & _RODO.equal('DOWOD',_uni.DOWOD,RD.DOWOD)) |
      (var_pres('PASZPORT',RD)=27 & _RODO.equal('PASZPORT',_uni.PASZPORT,RD.PASZPORT))
   || _ids.NAZWISKO:=RD.NA;
      _ids.PIERWSZE:=RD.IM;
      _ids.DRUGIE:=RD.IMD;
      _ids.DATAUR:=$RD.DA;
      _ids.PESEL:=RD.PESEL;
      exec('ins_recb','ro_cfg',_arg.RECB,RD)
   ?};
   _loop:=_arg.next(RD)
!};
RD.cntx_pop();
~~


\rp7_os
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła wyszukująca w tabeli RP7_OS rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? ~_auto & _uni.PESEL='' & _uni.NIP='' & _uni.DOWOD='' & _uni.PASZPORT=''
|| _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(RP7_OS);
   return()
?};

RP7_OS.cntx_psh();
RP7_OS.prefix();
_loop:=_arg.lookFor(RP7_OS);
{!
|? _loop
|! {? _auto |
      _RODO.equal('PESEL',_uni.PESEL,RP7_OS.PESEL) |
      _RODO.equal('NIP',_uni.NIP,RP7_OS.NIP) |
      _RODO.equal('DOWOD',_uni.DOWOD,RP7_OS.DOWOD) |
      _RODO.equal('PASZPORT',_uni.PASZPORT,RP7_OS.PASZPORT)
   || _ids.NAZWISKO:=RP7_OS.NAZWISKO;
      _ids.PIERWSZE:=RP7_OS.PIERWSZE;
      _ids.DRUGIE:=RP7_OS.DRUGIE;
      _ids.DATAUR:=$RP7_OS.UR_DATA;
      _ids.PESEL:=RP7_OS.PESEL;
      _ids.NIP:=RP7_OS.NIP;
      _ids.DOWOD:=RP7_OS.DOWOD;
      _ids.PASZPORT:=RP7_OS.PASZPORT;
      _ids.TELEFON:=RP7_OS.TEL;
      _ids.ULICA:=RP7_OS.ULICA;
      _ids.DOM:=RP7_OS.DOM;
      _ids.LOKAL:=RP7_OS.LOKAL;
      _ids.KODPOCZ:=RP7_OS.KOD;
      _ids.MIASTO:=RP7_OS.MIASTO;
      _ids.WOJ:=RP7_OS.WOJEWODZ;
      exec('ins_recb','ro_cfg',_arg.RECB,RP7_OS)
   ?};
   _loop:=_arg.next(RP7_OS)
!};
RP7_OS.cntx_pop();

~~


\szk_tren
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła wyszukująca w tabeli RP_OSOBA rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? ~_auto & _uni.PESEL=''
|| _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(SZK_TREN);
   return()
?};

SZK_TREN.cntx_psh();
SZK_TREN.prefix();
ZZ_OSOBA.cntx_psh();
ZZ_OSOBA.prefix();
_loop:=_arg.lookFor(SZK_TREN);
{!
|? _loop
|! {? SZK_TREN.ZZ_OSOBA().get() & (_auto | _RODO.equal('PESEL',_uni.PESEL,ZZ_OSOBA.PESEL))
   || _ids.NAZWISKO:=ZZ_OSOBA.NAZWISKO;
      _ids.PIERWSZE:=ZZ_OSOBA.PIERWSZE;
      _ids.DRUGIE:=ZZ_OSOBA.DRUGIE;
      _ids.PESEL:=ZZ_OSOBA.PESEL;
      exec('ins_recb','ro_cfg',_arg.RECB,SZK_TREN)
   ?};
   _loop:=_arg.next(SZK_TREN)
!};
ZZ_OSOBA.cntx_pop();
SZK_TREN.cntx_pop();

~~


\adres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła wyszukująca w tabeli ADRES rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;


{? ~_auto & _uni.EMAIL=''
|| _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(ADRES);
   return()
?};

ADRES.cntx_psh();
ADRES.prefix();
_loop:=_arg.lookFor(ADRES);
{!
|? _loop
|! {? _auto | _RODO.equal('EMAIL',_uni.EMAIL,ADRES.EMAIL)
   || _arr:=spli_str(ADRES.NAZWA,' ');
      _len:=obj_len(_arr);
      _ids.NAZWISKO:=_arr[1];
      _ids.PIERWSZE:={? _len>1 || _arr[2] || '' ?};
      _ids.DRUGIE:={? _len>2 || _arr[3] || '' ?};
      obj_del(_arr);
      _ids.TELEFON:=ADRES.TEL;
      _ids.FAX:=ADRES.FAX;
      _ids.EMAIL:=ADRES.EMAIL;
      _ids.ULICA:=ADRES.ULICA;
      _ids.DOM:=ADRES.DOM;
      _ids.LOKAL:=ADRES.LOKAL;
      _ids.KODPOCZ:=ADRES.KOD_POCZ;
      _ids.MIASTO:=ADRES.MIASTO;
      exec('ins_recb','ro_cfg',_arg.RECB,ADRES)
   ?};
   _loop:=_arg.next(ADRES)
!};
ADRES.cntx_pop();

~~


\rp_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła wyszukująca w tabeli RP_OSOBA rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? var_pres('RP_OSOBA')<>type_of(OSOBA)
|| return()
?};

{? ~_auto & _uni.EMAIL=''
|| _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(RP_OSOBA);
   return()
?};

RP_OSOBA.cntx_psh();
RP_OSOBA.prefix();
_loop:=_arg.lookFor(RP_OSOBA);
{!
|? _loop
|! {? _auto | _RODO.equal('EMAIL',_uni.EMAIL,RP_OSOBA.EMAIL)
   || _ids.NAZWISKO:=RP_OSOBA.NAZWISKO;
      _ids.PIERWSZE:=RP_OSOBA.PIERWSZE;
      _ids.DRUGIE:=RP_OSOBA.DRUGIE;
      _ids.DATAUR:=$RP_OSOBA.DATA_UR;
      _ids.TELEFON:=RP_OSOBA.TEL;
      _ids.EMAIL:=RP_OSOBA.EMAIL;
      _ids.ULICA:=RP_OSOBA.ULICA;
      _ids.DOM:=RP_OSOBA.DOM;
      _ids.LOKAL:=RP_OSOBA.LOKAL;
      _ids.KODPOCZ:=RP_OSOBA.KOD;
      _ids.MIASTO:=RP_OSOBA.MIASTO;
      exec('ins_recb','ro_cfg',_arg.RECB,RP_OSOBA)
   ?};
   _loop:=_arg.next(RP_OSOBA)
!};
RP_OSOBA.cntx_pop();

~~


\kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła wyszukująca w tabeli KH rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? ~_auto & _uni.PESEL='' & _uni.NIP='' & _uni.REGON='' & _uni.EMAIL='' & _uni.DOWOD=''
|| _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(KH);
   return()
?};

_nip:=_uni.NIP;
{? _nip<>'' & _org.NIP<>''
|| {? 1+(2-_org.NIP)=' ' || _nip:=3-_org.NIP ?}
?};
KH.cntx_psh(); KH.index('KOD'); KH.prefix();
_loop:=_arg.lookFor(KH);

{!
|? _loop
|! {? _auto |
      (_RODO.equal('NIP',_nip,KH.NIP) |
       _RODO.equal('PESEL',_uni.PESEL,KH.PESEL) |
       _RODO.equal('REGON',_uni.REGON,KH.REG) |
       _RODO.equal('EMAIL',_uni.EMAIL,KH.EM) |
       _RODO.equal('DOWOD',_uni.DOWOD,KH.SN_DT)
      )
   || _ids.NAZWISKO:='';
      _ids.PIERWSZE:='';
      _ids.DRUGIE:='';
      _ids.PASZPORT:='';
      _ids.PESEL:=KH.PESEL;
      _ids.NIP:=KH.NIP;
      _ids.REGON:=KH.REG;
      _ids.DOWOD:=KH.SN_DT;
      _ids.TELEFON:={? KH.TEL<>'' || KH.TEL+' ' || '' ?}+KH.TX;
      _ids.EMAIL:=KH.EM;
      _ids.WWW:=KH.WWW;
      _ids.FAX:=KH.FAX;
      _ids.ADRES:=KH.UL;
      _ids.KODPOCZ:=KH.KPOCZ;
      _ids.MIASTO:=KH.MIASTO;
      _ids.KRAJ:=KH.KRAJ;
      _ids.WOJ:='';
      _ids.DATAUR:='';
      _ids.ULICA:='';
      _ids.DOM:='';
      _ids.LOKAL:='';
      exec('ins_recb','ro_cfg',_arg.RECB,KH)
   || _findn:=0;
      NIPY.cntx_psh(); NIPY.index('SNIP'); NIPY.prefix(KH.ref());
      {? NIPY.first()
      || {! |?
            {? _RODO.equal('NIP',_nip,NIPY.NIP)
            || _findn:=1;
               _ids.NAZWISKO:='';
               _ids.PIERWSZE:='';
               _ids.DRUGIE:='';
               _ids.PASZPORT:='';
               _ids.PESEL:=KH.PESEL;
               _ids.NIP:={? KH.NIP<>'' || KH.NIP || NIPY.NIP ?};
               _ids.REGON:=KH.REG;
               _ids.DOWOD:=KH.SN_DT;
               _ids.TELEFON:={? KH.TEL<>'' || KH.TEL+' ' || '' ?}+KH.TX;
               _ids.EMAIL:=KH.EM;
               _ids.WWW:=KH.WWW;
               _ids.FAX:=KH.FAX;
               _ids.ADRES:=KH.UL;
               _ids.KODPOCZ:=KH.KPOCZ;
               _ids.MIASTO:=KH.MIASTO;
               _ids.KRAJ:=KH.KRAJ;
               _ids.WOJ:='';
               _ids.DATAUR:='';
               _ids.ULICA:='';
               _ids.DOM:='';
               _ids.LOKAL:='';
               exec('ins_recb','ro_cfg',_arg.RECB,KH)
            ?};
            ~_findn & NIPY.next()
         !}
      ?};
      NIPY.cntx_pop()
   ?};
   _loop:=_arg.next(KH)
!};
KH.cntx_pop();
~~


\czy_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła wyszukująca w tabeli KH są rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ref znalezionego kontrahenta lub null
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

KH.cntx_psh(); KH.index('KOD'); KH.prefix();
_loop:=_arg.lookFor(KH);
_find:=null;
:: szukanie po "mocnych" identyfikatorach
{!
|? _loop
|! {? (_RODO.equal('PESEL',_uni.PESEL,KH.PESEL) |
       _RODO.equal('NIP',_uni.NIP,KH.NIP) |
       _RODO.equal('REGON',_uni.REGON,KH.REG) |
       _RODO.equal('DOWOD',_uni.DOWOD,KH.SN_DT) |
       _RODO.equal('EMAIL',_uni.EMAIL,KH.EM)
      )
   || _find:=KH.ref()
   || NIPY.cntx_psh(); NIPY.index('SNIP'); NIPY.prefix(KH.ref());
      {? NIPY.first()
      || {! |?
            {? _RODO.equal('NIP',_uni.NIP,NIPY.NIP) || _find:=KH.ref() ?};
            _find & NIPY.next()
         !}
      ?};
      NIPY.cntx_pop()
   ?};
   _loop:=(~_find & _arg.next(KH))
!};
KH.cntx_pop();
_find


\kh_odb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła wyszukująca w tabeli KH_ODB rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;

_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? ~_auto
   & _uni.NIP=''
   & _uni.DOWOD=''
   & _uni.EMAIL=''
||
   _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(KH_ODB);
   return()
?};

_find:=0;

KH_ODB.cntx_psh();
KH_ODB.prefix();
_loop:=_arg.lookFor(KH_ODB);

:: szukanie po NIP, numerze dowodu osobistego, adresie e-mail
{? _auto
   | _uni.NIP<>''
   | _uni.DOWOD<>''
   | _uni.EMAIL<>''
||
   {!
   |? _loop
   |!
      {? _auto |
         (  _RODO.equal('NIP',_uni.NIP,KH_ODB.NIP)
            | _RODO.equal('DOWOD',_uni.DOWOD,KH_ODB.NRD)
            | _RODO.equal('EMAIL',_uni.EMAIL,KH_ODB.EM)
         )
      || _find:=1;
         _ids.NIP:=KH_ODB.NIP;
         _ids.DOWOD:=KH_ODB.NRD;
         _ids.EMAIL:=KH_ODB.EM;
         _ids.ADRES:=KH_ODB.UL;
         _ids.KODPOCZ:=KH_ODB.KPOCZ;
         _ids.MIASTO:=KH_ODB.MIASTO;
         _ids.KRAJ:=KH_ODB.KRAJ;
         exec('ins_recb','ro_cfg',_arg.RECB,KH_ODB)
      ?};
      _loop:=_arg.next(KH_ODB)
   !}
?};
KH_ODB.cntx_pop();
~~


\kh_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła wyszukująca w tabeli KH_MSC rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;

_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? ~_auto
   & _uni.EMAIL=''
   & _uni.TELEFON=''
||
   _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(KH_MSC);
   return()
?};

KH_MSC.cntx_psh();
KH_MSC.prefix();
_loop:=_arg.lookFor(KH_MSC);

:: szukanie po adresie e-mail, telefonie
{? _auto
   | _uni.EMAIL<>''
   | _uni.TELEFON<>''
||
   {!
   |? _loop
   |!
      {? _auto
         | _RODO.equal('EMAIL',_uni.EMAIL,KH_MSC.EMAIL)
         | _RODO.equal('TELEFON',_uni.TELEFON,KH_MSC.TEL)
      ||
         _ids.EMAIL:=KH_MSC.EMAIL;
         _ids.TELEFON:=KH_MSC.TEL;
         _ids.ADRES:=KH_MSC.UL;
         _ids.KODPOCZ:=KH_MSC.KPOCZ;
         _ids.MIASTO:=KH_MSC.MIASTO;
         _ids.KRAJ:=KH_MSC.KRAJ;
         exec('ins_recb','ro_cfg',_arg.RECB,KH_MSC)
      ?};
      _loop:=_arg.next(KH_MSC)
   !}
?};
KH_MSC.cntx_pop();
~~


\han
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła wyszukująca w tabeli HAN rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;

_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? ~_auto
   & _uni.EMAIL=''
   & _uni.TELEFON=''
||
   _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(HAN);
   return(~~)
?};

HAN.cntx_psh();
HAN.prefix();
_loop:=_arg.lookFor(HAN);

:: szukanie adresie e-mail, telefonie
{? _auto
   | _uni.EMAIL<>''
   | _uni.TELEFON<>''
||
   {!
   |? _loop
   |!
      {? _auto
         | _RODO.equal('EMAIL',_uni.EMAIL,HAN.EMAIL)
         | _RODO.equal('TELEFON',_uni.TELEFON,HAN.TEL)
      ||
         _ids.EMAIL:=HAN.EMAIL;
         _ids.ADRES:=HAN.ADR;
         _ids.TELEFON:=HAN.TEL;
         exec('ins_recb','ro_cfg',_arg.RECB,HAN)
      ?};
      _loop:=_arg.next(HAN)
   !}
?};
HAN.cntx_pop();
~~


\kh_osob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła wyszukująca w tabeli KH_OSOB rekordy spełniające podane kryteria.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? ~_auto & _uni.EMAIL='' & _uni.TELEFON=''
|| _ret.STATUS:=1;
   _ret.INFO:=_RODO.msg.noId(KH_OSOB);
   return(_ret)
?};

KH_OSOB.cntx_psh(); KH_OSOB.prefix();
_loop:=_arg.lookFor(KH_OSOB);
_find:=0;

:: szukanie po adresie e-mail
{? _auto | _uni.EMAIL<>''
|| {!
   |? _loop
   |! {? _auto | _RODO.equal('EMAIL',_uni.EMAIL,KH_OSOB.EMAIL)
      || _find:=1;
         _ids.NAZWISKO:=KH_OSOB.NAZWISKO;
         _ids.PIERWSZE:=KH_OSOB.IMIE;
         _ids.DRUGIE:='';
         _ids.PASZPORT:='';
         _ids.PESEL:='';
         _ids.NIP:='';
         _ids.REGON:='';
         _ids.DOWOD:='';
         _ids.TELEFON:={? KH_OSOB.TEL<>'' || KH_OSOB.TEL+' ' || '' ?}+KH_OSOB.GSM;
         _ids.EMAIL:=KH_OSOB.EMAIL;
         _ids.WWW:='';
         _ids.FAX:=KH_OSOB.FAKS;
         _ids.ADRES:='';
         _ids.KODPOCZ:='';
         _ids.MIASTO:='';
         _ids.KRAJ:='';
         _ids.WOJ:='';
         _ids.DATAUR:='';
         _ids.ULICA:='';
         _ids.DOM:='';
         _ids.LOKAL:='';
          exec('ins_recb','ro_cfg',_arg.RECB,KH_OSOB)
      ?};
      _loop:=_arg.next(KH_OSOB)
   !}
?};

:: szukanie po nazwisku, imieniu i telefonie
{? ~_find & ~_auto
|| _loop:=KH_OSOB.first();
   {!
   |? _loop
   |! {? _RODO.equal('TELEFON',_uni.TELEFON,KH_OSOB.TEL) |
         _RODO.equal('TELEFON',_uni.TELEFON,KH_OSOB.GSM) |
         _RODO.equal('TELEFON',_uni.TELEFON,KH_OSOB.FAKS)
      || _ids.NAZWISKO:=KH_OSOB.NAZWISKO;
         _ids.PIERWSZE:=KH_OSOB.IMIE;
         _ids.DRUGIE:='';
         _ids.PASZPORT:='';
         _ids.PESEL:='';
         _ids.NIP:='';
         _ids.REGON:='';
         _ids.DOWOD:='';
         _ids.TELEFON:={? KH_OSOB.TEL<>'' || KH_OSOB.TEL+' ' || '' ?}+KH_OSOB.GSM;
         _ids.EMAIL:=KH_OSOB.EMAIL;
         _ids.WWW:='';
         _ids.FAX:=KH_OSOB.FAKS;
         _ids.ADRES:='';
         _ids.KODPOCZ:='';
         _ids.MIASTO:='';
         _ids.KRAJ:='';
         _ids.WOJ:='';
         _ids.DATAUR:='';
         _ids.ULICA:='';
         _ids.DOM:='';
         _ids.LOKAL:='';
         exec('ins_recb','ro_cfg',_arg.RECB,KH_OSOB)
      ?};
      _loop:=KH_OSOB.next()
   !}
?};
KH_OSOB.cntx_pop();
~~


\vat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła wyszukująca w celu prowadzenia ewidencji do rozliczeń podatkowych.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY] - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_org:=_arg.ORG;
_uni:=_arg.UNI;
_ids:=_arg.IDS;
_RODO:=_arg.RODO;
_auto:=_arg.isAuto();
_ret:=_arg.RET;

{? ~_auto & _uni.NIP=''
|| _ret.STATUS:=3;
   _ret.INFO:=_RODO.msg.noId(DOK);
   return()
?};

_find:=0;
:: wyszukiwanie tylko, jeśli nie znaleziono kontrahenta w tabeli
_dalej:=(exec('czy_kh','ro_szuk',_a)=null);
{? _dalej
|| _tab:=DOK.names();
   DOK.cntx_psh(); DOK_REJ.cntx_psh(); DOK_REJ.prefix();
   {? _tab.last()
   || _ndx:=DOK.ndx_tmp(,1,'DOP',,0);
      {! |?
         DOK.use(_tab.NAME); DOK.index(_ndx); DOK.prefix();
         _loop:={? _arg.AUTO_REF>0 || DOK.seek(_arg.AUTO_REF,) || DOK.last() ?};
         {!
         |? _loop
         |! {? (DOK.DOK_REJ().SLO().KOD='VAT' | DOK.DOK_REJ().SLO().KOD='SAD') &
               _RODO.equal('NIP',_uni.NIP,DOK.NIP)
            || _find:=1;
               _ids.NAZWISKO:='';
               _ids.PIERWSZE:='';
               _ids.DRUGIE:='';
               _ids.PASZPORT:='';
               _ids.PESEL:='';
               _ids.NIP:=DOK.NIP;
               _ids.REGON:='';
               _ids.DOWOD:='';
               _ids.TELEFON:='';
               _ids.EMAIL:='';
               _ids.WWW:='';
               _ids.FAX:='';
               _ids.ADRES:='';
               _ids.KODPOCZ:='';
               _ids.MIASTO:='';
               _ids.KRAJ:='';
               _ids.WOJ:='';
               _ids.DATAUR:='';
               _ids.ULICA:='';
               _ids.DOM:='';
               _ids.LOKAL:='';
               exec('ins_recb','ro_cfg',_arg.RECB,DOK)
            ?};
            _loop:=({? _arg.AUTO_REF=0 || DOK.prev() ?} & ~_find)
         !};
         ~_find & _tab.prev()
      !};
      DOK.ndx_drop()
   ?};
   DOK.cntx_pop(); DOK_REJ.cntx_pop()
?};
~~

:Sign Version 2.0 jowisz:1028 2019/10/14 09:21:35 6cc9a4b3daa85791f0b201af71ed62d302e2d6b1773ffe65ed3670031e91e74c6817dc761b54c49fcee45d5cb41c00e424a061d48fdc5b4096f412bb46e9a64daa7db88e706b4496dfe0fa762984e9db4337b9cd1a260877fddc5d1ceba86c8a113e0213df16d87d56a275ba426b93373e175d5ccb800d9be6089fa6717bd11c
