:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: wspolpraca.fml
:: Utworzony: 18.03.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Plik zawiera formuły wykorzystywane podczas nawiązywania współpracy dla różnych form.
::            Wymagana jest ODPOWIEDNIA budowa pliku czynności - istnienie formuł o określonych nazwach.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Główna formuła czynności.
::   WE: _a [STRING] - Kod (docelowej) formy współpracy.
::   WY:
::  OLD: \UMPRAC/ext_slo.fml
::----------------------------------------------------------------------------------------------------------------------
:: Poniższe linie mają charakter informacyjny - mówią o parametrach, które muszą być zdefiniowane w każdej z czynności
:: typu "nawiązanie współpracy" bez względu na formę tej współpracy.
::
::    # kind=WE,  symbol=OSOBA,  type=_OSOBA,  name=Wskazanie osoby,                required=N, keyref=N
::    # kind=WE,  symbol=EDOKUM, type=_EDOKUM, name=Wskazanie na dokument w obiegu, required=N, keyref=N
::
::    # kind=WEW, symbol=H,      type=_H,      name=Wskazanie angażu,               required=N, keyref=N
::
::    # kind=WY,  symbol=OSOBA,  type=_OSOBA,  name=Wskazanie osoby,                required=N, keyref=N
::    # kind=WY,  symbol=P,      type=_P,      name=Wskazanie pracownika,           required=N, keyref=N
::    # kind=WY,  symbol=H_UM,   type=_H_UM,   name=Wskazanie umowy,                required=N, keyref=N
::    # kind=WY,  symbol=H,      type=_H,      name=Wskazanie angażu,               required=N, keyref=N
::
::    # permissions=F_ZATR,UD_SKL
::
:: UWAGA: do poprawnego działania poza procesami wykorzystywany jest kontekst, w którym musi być określone
:: H wskazujące na rekord w przebiegu zatrudnienia

_par:=params_get();

_in:=_par.in;
_int:=_par.int;
_out:=_par.out;
_mp:=_par.mp;
_context:=_par.context;

:: Opis elementów tablicy _CFG.
::    F_ZATR   - Kod obsługiwanej (docelowej) formy współpracy.
::    AKCJA    - Informacja o wybranej przez użytkownika akcji (''/'ZAKOŃCZ'/'OK').
::    btnOSOBA - Identyfikator przycisku pozwalającego na wybór osoby, a nie ręczne jej wpisywanie.
::    btnZAST  - Identyfikator przycisku pozwalającego na wybrów zastępowanego pracownika.
::    TDUP     - Informacja o wybranej przez użytkownika zgodzie na duplikat numeru teczki.
_cfg:=obj_new('F_ZATR','AKCJA','btnOSOBA','btnZAST','ODDEL','TDUP');
_cfg.F_ZATR:=_a;
_cfg.AKCJA:='';
_cfg.ODDEL:=0;
_cfg.TDUP:=0;

params_set(
   'in',_in,
   'int',_int,
   'out',_out,
   'mp',_mp,
   'context',_context,
   'cfg',_cfg
);

_personel:=1;
__PERSONEL==_personel;
_akcja:=_mp.akcja();
_ret:=
   {? _akcja='DOŁĄCZ'
   || exec('akcja_dolacz','wspolpraca')
   |? _akcja='POPRAW'
   || exec('akcja_popraw','wspolpraca')
   |? _akcja='USUŃ'
   || exec('akcja_usun','wspolpraca')
   |? _akcja='WYŚWIETL'
   || exec('akcja_popraw','wspolpraca',1)
   |? ~_mp.isMicro()
   || {? type_of(_int.H)=type_of(null())
      || exec('akcja_popraw','wspolpraca')
      || exec('akcja_dolacz','wspolpraca')
      ?}
   ?};
__PERSONEL==_personel;

{? _ret='CANCEL'
|| _mp.cancel()

|? _ret=''
|| {? _mp.isMicro()
   || _mp.cancel()
   || _mp.save(_int,_out);
      {? _cfg.AKCJA='ZAKOŃCZ'
      || _mp.done()
      || _mp.keep()
      ?}
   ?}

|| _mp.error(_ret);
   FUN.emsg(_ret)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła zwracjająca elementy opisu zadania w tablicy nazwanej.
::   WE:
::   WY: tablica nazwana z elementami do opisu zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_int:=_mp.load(exec('kind_internal','#b_port'));
_tab:=exec('init_desc_tab','pracownik');

_filtr:=exec('cntx_psh','wspolpraca');

{? {? type_of(_int.H)=type_of(null()) & _int.H<>null()
   || H.use(ref_name(_int.H));
      {? H.seek(_int.H)
      || _tab.STN:=H.ST().ST;
         _tab.UD_SKL:=H.WYDZIAL().SYMBOL;
         H.P().OSOBA();
         1
      || type_of(_in.OSOBA)=type_of(null()) & OSOBA.seek(_in.OSOBA)
      ?}
   || type_of(_in.OSOBA)=type_of(null()) & OSOBA.seek(_in.OSOBA)
   ?}
|| _tab.ZAW_DANE:='T';
   _tab.NAZWISKO:=OSOBA.NAZWISKO;
   _tab.PIERWSZE:=OSOBA.PIERWSZE;
   _tab.OBCY:=OSOBA.OBCY;
   _tab.PASZPORT:=OSOBA.PASZPORT;
   _tab.PESEL:=OSOBA.PESEL;
   _tab.UR_DATA:=$OSOBA.UR_DATA
?};

exec('cntx_pop','wspolpraca',_filtr);

_tab


\wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła buduje okno redagowania tabeli P, wykorzystywane podczas nawiązywania współpracy.
::   WE:  _a  [STRING] - Obsługiwana (docelowa) forma współpracy.
::       [_b] [STRING] - Tytuł okna. Domyślnie tytuł związany jest z formą współpracy.
::       [_c] [NUMBER] - Zastosowanie okna:
::          0 - Okno do redagowania [domyślnie];
::          1 - Okno do wyświetlania.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_f_zatr:={? var_pres('_a')=type_of('') || _a || '' ?};
_title:=
   {? var_pres('_b')=type_of('')
   || _b
   |? _f_zatr='Z'
   || 'Rejestracja danych zleceniobiorcy'@
   |? _f_zatr='P'
   || 'Zawieranie umowy o pracę'@
   |? _f_zatr='K'
   || 'Rejestracja kontraktu menedżerskiego'@
   |? _f_zatr='R'
   || 'Rejestracja pracownika dla RCP'@
   |? _f_zatr='T'
   ||  'Rejestracja pracownika tymczasowego'@
   || 'Zawieranie umowy'@
   ?};
_display:=var_pres('_c')=type_of(0) & _c;

_we:=P.mk_edit(_title,,,,,'html_maximized');
{? _f_zatr='P'
|| P.win_etab(_we,'Dane osobowo-pracownicze'@);
   P.win_ewin(_we,P,'DOD_P',,,'100%');
   P.win_etab(_we,'Warunki zatrudnienia'@);
   P.win_ewin(_we,H_UM,'DOD_P',,,'100%');
   P.win_ecol(_we,'100%');
   {? _display
   || P.win_ewin(_we,H,'DOD_PD')
   || P.win_ewin(_we,H,'DOD_PE')
   ?};
   P.win_etab(_we,'Warunki zatrudnienia c.d.'@);
   P.win_ewin(_we,H,'WYN_P');
   P.win_ecol(_we,'100%');
   P.win_ewin(_we,H,'EXT_ZP');
   {? exec('lic_or','#b_domain','PRC')
   || P.win_ewin(_we,,'PRC_ZP')
   ?};
:: Okno z polami do aktywowania informacji o oddelegowaniu i zakładka oddelegowania z oknem do edycji oddelegowania
   {? PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD')
   || P.win_ewin(_we,H,'ODD_ZP');
      P.win_etab(_we,'Oddelegowania do pracy za granicą');
      P.win_ecol(_we,'100%');
      P.win_ewin(_we,H_ODDE,'RED')
   ?}

|? _f_zatr='Z'
|| P.win_ewin(_we,P,'DOD_Z',,,'100%');
   P.win_ecol(_we,'100%');
   P.win_ewin(_we,H_UM,'DOD_Z');
   {? _display
   || P.win_ewin(_we,H,'DOD_ZD')
   || P.win_ewin(_we,H,'DOD_ZE')
   ?};
   {? exec('lic_or','#b_domain','PRC')
   || P.win_ewin(_we,,'PRC')
   ?}

|? _f_zatr='K' | _f_zatr='R' | _f_zatr='T'
|| P.win_ewin(_we,P,'DOD_Z',,,'100%');
   P.win_ecol(_we,'100%');
   P.win_ewin(_we,H_UM,'DOD_K');
   {? _display
   || P.win_ewin(_we,H,'DOD_ZD')
   || P.win_ewin(_we,H,'DOD_ZE')
   ?};
   {? _f_zatr='K'
   || P.win_ewin(_we,,'KH','Kontrahent'@)
   |?  _f_zatr='T'
   || P.win_ewin(_we,,'KH','Agencja pracy tymczasowej'@)
   ?};
   {? exec('lic_or','#b_domain','PRC')
   || P.win_ewin(_we,,'PRC')
   ?}
?};

_we


\f_zatr2act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła zwraca identyfikator czynności "nawiązywania współpracy" dla podanej formy współpracy.
::   WE: _a [STRING] - Kod (docelowej) formy współpracy
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_f_zatr:={? var_pres('_a')=type_of('') || _a || '' ?};
{? _f_zatr='P' || 'PKD_ZAT_PZAT'
|? _f_zatr='Z' || 'PKD_ZAT_ZRDZ'
|? _f_zatr='K' || 'PKD_ZAT_ZRDK'
|? _f_zatr='R' || 'PKD_ZAT_ZRCP'
|? _f_zatr='T' || 'PKD_ZAT_ZRPT'
|| ''
?}


\conf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustala sposób edycji tabel.
::   WE:  _a  [ARRAY]  - Wskazanie tablicy parametrów działania.
::       [_b] [NUMBER] - Zastosowanie okna:
::                      0 - Okno do redagowania [domyślnie];
::                      1 - Okno do wyświetlania.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());

:: Jeżeli OSOBA nie została podana - pozwolimy na jej wybór.
_wybór:=(type_of(_a.in.OSOBA)<>type_of(null()) | _a.in.OSOBA=null());
_display:=var_pres('_b')=type_of(0) & _b;

_we:=exec('wnd','wspolpraca',_a.cfg.F_ZATR,,_display);
P.win_edit(_we);

{? ~_wybór
:: Jeżeli nie ma wybierania osoby, to nie ma redagowania poniższych pól.
|| OSOBA.fld_fml('NAZWISKO','BEFORE_EDIT',"0");
   OSOBA.fld_fml('PIERWSZE','BEFORE_EDIT',"0");
   OSOBA.fld_fml('PESEL','BEFORE_EDIT',"0");
   OSOBA.fld_fml('OBCY','BEFORE_EDIT',"0");
   OSOBA.fld_fml('PASZPORT','BEFORE_EDIT',"0")
?};

exec('h_efld_opt','pracownik','*',P,_we);
:: grupy uprawnień
exec('p_gp_def_efld_otp','pracownik',_we);
:: projekty
exec('p_projekty_efld_otp','pracownik',_we);

{? _par.cfg.F_ZATR='Z'
|| P.efld_opt(_we,'mark=1',P,'ODDZIAL')
?};
{? 'KTRZ'*_par.cfg.F_ZATR
|| P.efld_opt(_we,'mark=0',P,'ZAW')
?};

_ae:=
:: Część wspólna formuł wykonywanych po wskazaniu osoby.
   "  _cfg:=params_get().cfg;
      _we:=P.win_edit('?');
      P.efld_opt(_we,'enable=1,mark=0',OSOBA);
      P.efld_opt(_we,'enable=1',P);
      P.efld_opt(_we,'enable=0',P,'IP');
      exec('p_gp_def_efld_otp','pracownik');
      exec('p_projekty_efld_otp','pracownik');
      {? _cfg.F_ZATR='Z'
      || P.efld_opt(_we,'mark=1',P,'ODDZIAL')
      ?};
      {? 'KTRZ'*_cfg.F_ZATR
      || P.efld_opt(_we,'mark=0',P,'ZAW')
      ?};
      P.efld_opt(_we,'enable=1',H_UM);
      P.efld_opt(_we,'enable=1',H);
      P.efld_opt(_we,'enable=1',EDIT_VAR);
      P.btn_opt(_cfg.btnOSOBA,'state=grayed');
      exec('h_efld_opt','pracownik','*',P,_we)
   ";

: akcje
_act:=~_a.mp.isMicro();
{? _wybór
|| _par.cfg.btnOSOBA:=P.win_ebtn(_we,'text=%1' ['&Osoba'@]+',panel=bottom,align=begin',
      $("_ref:=REF.OSOBA;
         REF.OSOBA:=exec('osoba_wybierz','osoba',OSOBA.NAZWISKO,OSOBA.PIERWSZE,OSOBA.OBCY,OSOBA.IDENTYF);
         {? _ref<>REF.OSOBA & REF.OSOBA<>null()
         || REF.OSOBA();
            P.OSOBA:=REF.OSOBA;"+_ae+";
            'edit:T'
         || 'edit:NAZWISKO'
         ?}
      ")
   );
   P.btn_opt(_par.cfg.btnOSOBA,'tooltip="Wybranie z listy wcześniej wprowadzonej osoby"')
|| P.efld_opt(_we,'enable=0',P,'IP')
?};
{? _a.cfg.F_ZATR='P'
:: przycisk "Zastępstwo"
||
  {? _display
   || _par.cfg.btnZAST:=P.win_ebtn(_we,'text=%1,align=begin,display=1'['Zastępstwo'@],
      "params_exec('zastepstwo','pracownik',1); ''"
      )
   || _par.cfg.btnZAST:=P.win_ebtn(_we,'text=%1,align=begin,display=1'['Zastępstwo'@],
      "params_exec('zastepstwo','pracownik'); ''"
      )
   ?};
   P.btn_eopt(_we,_par.cfg.btnZAST,'state=%1'[{? REF.OSOBA=null || 'grayed' || 'normal' ?}])
?};

exec('zakoncz','#window',P,_we,_act,"params_get().cfg.AKCJA:='ZAKOŃCZ'; 'key:F2'",,
   exec('help_red_zakoncz','#window','PKD_A'),exec('text_red_zakoncz','#window','PKD_A'));
exec('ok_esc','#window',P,_we,_act,"params_get().cfg.AKCJA:='OK'; 'key:F2'",,,,
   exec('help_red_ok','#window','Z'),exec('text_red_ok','#window','Z'),exec('help_red_esc','#window','A'));

: ustaw okno edycji
P.win_edit(_we);

: okienko do wyboru adresu
OS_ADRES.win_sel('SLO');

: koniec "standardowej" obsługi
{? _wybór=0
|| return()
?};

: obsługa możliwości wskazania osoby do zatrudnienia
exec('fld_fml_pkd','osoba',1,1);

: początkowo "wyłącz" wszystkie pola
P.efld_opt(_we,'enable=0',OSOBA);

_opt:='mark=%1,enable=%1' [$_wybór];
P.efld_opt(_we,_opt,OSOBA,'NAZWISKO');
P.efld_opt(_we,_opt,OSOBA,'PIERWSZE');
P.efld_opt(_we,_opt,OSOBA,'PESEL');
P.efld_opt(_we,'enable='+$_wybór,OSOBA,'OBCY');
P.efld_opt(_we,'enable='+$_wybór,OSOBA,'PASZPORT');

: rozszerzona funkcjonalność pól ustalających osobę
_fld:=obj_new(5);
_fld[1]:='NAZWISKO';
_fld[2]:='PIERWSZE';
_fld[3]:='PESEL';
_fld[4]:='OBCY';
_fld[5]:='PASZPORT';
{! _ni:=1 .. obj_len(_fld)
|! OSOBA.fld_fml(_fld[_ni],'BEFORE_EDIT',"REF.OSOBA=null()");
   _fml:=
      "_ret:=("+OSOBA.fld_fml(_fld[_ni],'AFTER_EDIT')+");
      {? REF.OSOBA<>null()
      || "+_ae+"
      ?};
      _ret";
   OSOBA.fld_fml(_fld[_ni],'AFTER_EDIT',$_fml)
!};

: blokada wszystkich pól, jeśli nie ustalono osoby
_tab:=obj_new(4);
_tab[1]:=P;
_tab[2]:=H_UM;
_tab[3]:=H;
_tab[4]:=EDIT_VAR;
{! _ni:=1 .. obj_len(_tab)
|! P.efld_opt(_we,'enable=0',_tab[_ni]);
   {! _mi:=1 .. _tab[_ni].fld_num()
   |! _acr:=_tab[_ni].fld_acr(_mi);
      _fml:=_tab[_ni].fld_fml(_acr,'BEFORE_EDIT');
      {? _fml<>''
      || _fml:=$("{? REF.OSOBA<>null() || "+_fml+" ?}")
      || _fml:="REF.OSOBA<>null()"
      ?};
      _tab[_ni].fld_fml(_acr,'BEFORE_EDIT',_fml)
   !}
!};

: zmiany w gwiazdkowaniu pól z tabeli OSOBA
exec('osoba_efld_opt','osoba','*',P,_we);
~~


\check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Weryfikacja poprawności danych tabel P, H_UM i H
::   WE: _a [INTEGER] - tryb edycji:
::                0 - dodawanie,
::                1 - kontynuacja
::   WY: zgodny ze specyfikacją wymagań dla formuły typu rekord po
::  OLD: \h_czynadg_ae/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 & REF.OSOBA=null()
|| FUN.emsg(
      'Zapis informacji nie jest możliwy ze względu na brak lub niepoprawność danych '
      'niezbędnych do nawiązania współpracy.\n\n'
      '1. Należy podać "Nazwisko", "Imię" oraz "PESEL" ("Paszport" dla obcokrajowca)\n'
      '   celem odszukania w kartotece danych osobowych właściwego zapisu.'
      '2. W systemie nie istnieje osoba o wprowadzonych danych, '
      'rejestrację danych trzeba rozpocząć od Danych osobowych.'@
   );
   _ret:=__CHK.record(OSOBA,1,'NAZWISKO','PIERWSZE',{? exec('nieobcy','osoba') || 'PESEL' || 'PASZPORT' ?});
   {? _ret=''
   || _ret:='NAZWISKO'
   ?};
   return(_ret)
?};

_par:=params_get();
_cfg:=_par.cfg;

exec('test_p_ip','pracownik',_a,1);
::sprawdzenie unikalności numeru teczki jeśli wtyczka wdrożeniowa istnieje:
{? Plugin.run('PRACOWNI_T_T_001')<>'' & _cfg.TDUP=0
|| {? sql('select P.T from P join F_ZATR using(P.F_ZATR, F_ZATR.REFERENCE) '
          'where P.FIRMA=:_a and P.T=\':_b\' and P.IDADD<>\':_c\' and F_ZATR.KOD in (\':_d\',\':_e\')',
          exec('ref_firma','ustawienia'),P.T,P.IDADD,_cfg.F_ZATR,~_cfg.F_ZATR
         ).size()>0
   || {? FUN.ask('Numer teczki istnieje w kartotekach.\nCzy wygenerować następny wolny numer?'@)
      || P.T:=Plugin.run('PRACOWNI_T_T_001');
         return('T')
      || _cfg.TDUP:=1
      ?}
   ?}
?};

_chk:=__CHK.table(P,_a,,
   'T','IP',
   {? exec('is_active','gp_api') || 'GP_DEF' || '' ?}
);
{? type_of(_chk)<>type_of(0) | ~_chk
|| return(_chk)
?};

:: Sprawdzenie wypełnienia kodu wykonywanego zawodu z możliwością przejścia dalej (dla umów o dzieło):
{? ~('KTR'*_cfg.F_ZATR)
|| _chk:=__CHK.record(P,{? _cfg.F_ZATR='Z' || 1 || ~~ ?},'ZAW');
   _kont:=0;
   {? _chk<>''
   || {? _cfg.F_ZATR='Z' || _kont:=FUN.ask('Nie wypełniono zawodu wykonywanego.\nCzy kontynuować?'@) ?};
      {? ~_kont || return(_chk) ?}
   ?};
:  weryfikacja długości pola zawód wykonywany:
   {? ~_kont
   || _zaw:=exec('zaw','rap_zus',1);
      {? ~+_zaw
      || FUN.emsg('Błędna długość kodu zawodu wykonywanego (powinien mnieć 6 znaków).'@);
         return('ZAW')
      ?}
   ?}
?};
{? _cfg.F_ZATR='Z' & (_chk:=__CHK.record(P,,'ODDZIAL'))<>''
|| return(_chk)
?};

: sprawdź poprawność umowy o pracę i angażu
_chk:=exec('h_um_p_ae','pracownik',_a);
{? type_of(_chk)<>type_of(0) | ~_chk
|| return(_chk)
?};

: ok
1


\norm_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustala pracownika i osobę przy wywołaniu z pominięciem rejestracji danych osobowych (tryb wskazania osoby).
::   WE: _a - wskazanie na tablicę parametrów pracy
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ref:={? _a.mp.isMicro() || _a.context.H || _a.int.H ?};

{? type_of(_ref)=type_of(null()) & _ref<>null()
|| {? type_of(_a.in.OSOBA)<>type_of(null()) | _a.in.OSOBA=null()
   || H.cntx_psh();
      H.use(ref_name(_ref));
      H.prefix();
      {? H.seek(_ref)
      || _a.in.OSOBA:=H.P().OSOBA
      ?};
      H.cntx_pop()
   ?}
?};
~~


\akcja_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Dołącz".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:='';
params_set(_par:=params_get());
_in:=_par.in;
_int:=_par.int;
_out:=_par.out;
_mp:=_par.mp;
_cfg:=_par.cfg;

_filtr:=exec('cntx_psh','wspolpraca');
: uzupełnij kontekst wywołania
exec('norm_par','wspolpraca',_par);

: wybór osoby możliwy
_wybór:=0;

REF.OSOBA:=null();
{? type_of(_in.OSOBA)=type_of(null()) & _in.OSOBA<>null()
|| {? OSOBA.seek(_in.OSOBA)
   || REF.OSOBA:=OSOBA.ref()
   || exec('cntx_pop','wspolpraca',_filtr);
      return('Nie znaleziono wskazanej osoby.\nZatrudnienie nie jest możliwe.')
   ?}
|| _wybór:=1;
   OSOBA.blank()
?};

: ustal wartości początkowe
: pracownik
P.blank(1);
P.OSOBA:=REF.OSOBA;
P.ZA:='N';
P.KIN:='T';
P.GRAFIK:='N';
P.ODDEL:='N';
P.FIRMA:=exec('ref_firma','ustawienia');
P.F_ZATR:=exec('tmp4dest','f_zatr',_cfg.F_ZATR);
F_ZATR.cntx_psh();
_f_zatr:=P.F_ZATR().KOD;
F_ZATR.cntx_pop();
P.PORTAL:=exec('p_portal_bl','pracownik');
P.IP:=exec('p_ip_bl','pracownik',_f_zatr);
::wtyczka numeru teczki:
_teczka:=Plugin.run('PRACOWNI_T_T_001');
{? type_of(_teczka)=2 || P.T:=_teczka ?};
:: podpowiedź jednostki księgowej
{? -_f_zatr='z' || P.ODDZIAL:=exec('odd_default','wspolpraca') ?};
: umowa
H_UM.blank(1);
H_UM.RU:=exec('h_um_ru_bl','pracownik',null(),_cfg.F_ZATR);
H_UM.memo_set(,'UZASDN');
H_UM.EKW_LICZ:='N';
: angaż
H.blank(1);
H.memo_set(,'INNE');
H.RWYL:=H.RWYM:=H.RWY:=1;
exec('czytaj','#stalesys',,KST,'PRZEDST');
H.PRZEDST:=KST.PRZEDST;
H.KZ:=exec('h_kz_bl','pracownik');
H.PMP:='T';
H.ODDEL:=H.KODDEL:='N';

: przygotuj okienko redakcji
_buf:=obj_new('P','OSOBA','H_UM','H','EDIT_VAR');
_buf.P:=exec('save_fml_all','#field',P);
_buf.OSOBA:=exec('save_fml_all','#field',OSOBA);
_buf.H_UM:=exec('save_fml_all','#field',H_UM);
_buf.H:=exec('save_fml_all','#field',H);
_buf.EDIT_VAR:=exec('save_fml_all','#field',EDIT_VAR);
exec('conf','wspolpraca',_par);
:: Oddelegowanie
_oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');
_edit:=P.win_edit('?');
{? _oddelegowanie
|| _txt:='';
   _par.cfg.ODDEL:=1;
   exec('h_odde_edit_begin','oddelegowanie',0,P,_edit)
|| exec('acces2fld_h_odde','oddelegowanie',P,_edit,0,,0,1)
?};
:: jeżeli mamy parametr wejściowy EDOKUM to na jego podstawie wstępnie wypełniamy pola tabeli P,H_UM.H
:: wykorzystywane jest to w zatrudnieniu osoby po zaakceptowaniu wniosku w obiegu
{? var_pres('EDOKUM',_in)>0 & type_of(_in.EDOKUM)=type_of(null())
|| _P:=exec('obj_new','#buf','P');
   _H_UM:=exec('obj_new','#buf','H_UM');
   _H:=exec('obj_new','#buf','H');
   exec('prac_h_hum_h_woz_abs','form_ob',_in.EDOKUM,_P,_H_UM,_H);
   _P.set();
   _H_UM.set();
   _H.set()
?};

{? P.edit(
      "  params_set(params_get());
         _chk:=exec('check','wspolpraca',0);
         {? (type_of(_chk)=type_of('') & _chk<>'') | (type_of(_chk)=type_of(0) & _chk=0)
         || params_get().cfg.AKCJA:=''
         || {? PAR_SKID.get(261)='T' & params_get().cfg.ODDEL & H.ODDEL='T'
::             Sprawdzanie z parametrem _c - "nowa umowa":
            || _chk:=exec('h_odde_ae','oddelegowanie',1,'H_UM',1)
            ?}
         ?};
         _chk
      "
   )
|| P.OSOBA:=REF.OSOBA;
   do();
   P.cntx_psh();
   P.clear();
   {? P.add()
   || H_UM.clear();
      H_UM.P:=P.ref();
      {? H_UM.add(1) & H_UM.memo_put(,'UZASDN')
      || H.clear();
         H.P:=P.ref();
         H.UMOWA:=H_UM.ref();
         {? H.add() & H.memo_put(,'INNE')
         || _mp.keyRef(P.uidref());
            _int.H:=H.ref();
            _out.OSOBA:=OSOBA.ref();
            _out.P:=P.ref();
            _out.H_UM:=H_UM.ref();
            _out.H:=H.ref();
            exec('pracownik_aktualizuj','pracownik');
            exec('dod_kal_czesc','kaledit',P);
            {? _cfg.F_ZATR<>'P' & (_mp.isMicro() | _cfg.AKCJA='ZAKOŃCZ')
:              Krótka ścieżka. Dla form współpracy innych niż "p" "Zakończ" od razu przenosi dane do "czystopisu".
:              Jeżeli mikroczynność, to "Zakończ" jest niedostępne ale samo OK ma działanie kończące.
            || exec('zakoncz','wspolpraca')
            ?};
:: Dodanie oddelegowania do pracy za granicą.
            {? H.ODDEL='T'
            || H_ODDE.H:=H.ref();
::             Dodanie oddelegowania:
               {? ~exec('h_odde_add','wspolpraca')
               || undo()
               ?}
            ?}
         || undo()
         ?}
      || undo()
      ?}
   || undo()
   ?};
   {? ~end()
   || _ret:='Zapis do bazy danych nie powiódł się.'
   ?};
   P.cntx_pop();
   {? type_of(_out.P)=type_of(null) & _out.P
   || P.seek(_out.P);
::    informacja o zależnościach służbowych
      exec('p_zas_zs_def','pracownik',H_UM.P_ZAS)
   ?}

|? _wybór
|| _ret:='CANCEL'
?};

:: Koniec pracy z oddelegowaniem do pracy za granicą.
{? _oddelegowanie
|| exec('h_odde_edit_end','oddelegowanie',_txt)
?};

exec('restore_fml_all','#field',P,_buf.P);
exec('restore_fml_all','#field',OSOBA,_buf.OSOBA);
exec('restore_fml_all','#field',H_UM,_buf.H_UM);
exec('restore_fml_all','#field',H,_buf.H);
exec('restore_fml_all','#field',EDIT_VAR,_buf.EDIT_VAR);
exec('cntx_pop','wspolpraca',_filtr);

_ret


\akcja_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Popraw".
::   WE: [_a] [NUMBER] - Tryb podglądu.
::             0 - Nie (Popraw);
::             1 - Tak (Wyświetl).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_display:=var_pres('_a')=type_of(0) & _a;

params_set(_par:=params_get());
_in:=_par.in;
_int:=_par.int;
_mp:=_par.mp;
_context:=_par.context;
_cfg:=_par.cfg;

_filtr:=exec('cntx_psh','wspolpraca');
: uzupełnij kontekst wywołania
exec('norm_par','wspolpraca',_par);

_ref:={? _mp.isMicro() || _context.H || _int.H ?};

{? type_of(_ref)<>type_of(null()) | _ref=null()
|| exec('cntx_pop','wspolpraca',_filtr);
   return('Edycja danych nie jest możliwa.\nBrak parametrów wewnętrznych.')
?};

H.use(ref_name(_ref));

{? ~H.seek(_ref)
|| exec('cntx_pop','wspolpraca',_filtr);
   return('Edycja danych nie jest możliwa.\Nieprawidłowe parametry wewnętrzne.')
?};

REF.OSOBA:=H.P().OSOBA;
exec('otworz_h_um','pracownik',ref_name(H.UMOWA));

: zaktualizuj stan buforów
H.UMOWA().P().OSOBA();
H_UM.memo_get(,'UZASDN');
H.memo_get(,'INNE');
_p_zas:=H_UM.P_ZAS;

:  przygotuj okienko redakcji
_buf:=exec('save_fml_all','#field',P);
exec('conf','wspolpraca',_par,_display);
:: Ustawienie wartości z oddelegowania do pracy za granicą.
_oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');
_edit:=P.win_edit('?');
{? _oddelegowanie
|| exec('h_odde_edit_begin','oddelegowanie',1,P,_edit);
   P.efld_opt(_edit,
      'editable=%1,enable=%2'[{? exec('h_oddel_editable','oddelegowanie',1) || '1' || 'grayed' ?},$(#H.DO>0)],H,'ODDEL'
   );
   P.efld_opt(_edit,'editable=%1'[{? exec('h_koddel_editable','oddelegowanie') || '1' || 'grayed' ?}],H,'KODDEL');
   H_ODDE.fld_fml('O_OD','BEFORE_EDIT',"*");
   _par.cfg.ODDEL:=1;
   _txt:=''
|| exec('acces2fld_h_odde','oddelegowanie',P,_edit,0,,0,1)
?};

{? _display
|| P.display()

|? P.edit(
      "  params_set(params_get());
         _chk:=exec('check','wspolpraca',1);
         {? (type_of(_chk)=type_of('') & _chk<>'') | (type_of(_chk)=type_of(0) & _chk=0)
         || params_get().cfg.AKCJA:=''
         || {? PAR_SKID.get(261)='T' & params_get().cfg.ODDEL
            || {? H.ODDEL='T'
               || _chk:=exec('h_odde_ae','oddelegowanie',1,'H_UM')
               || _chk:=exec('h_odde_n_chk','oddelegowanie',1)
               ?}
            ?}
         ?};
         _chk
      "
   )
|| do();
:  ze względu na porównanie z wersją docelową należy
:  treść notatki zapisać w pierwszej kolejności
:  (tu tylko ze względu na spójność kodu)
   {? P.put() & H_UM.memo_put(,'UZASDN') & H_UM.put() & H.memo_put(,'INNE') & H.put()
   || exec('pracownik_aktualizuj','pracownik');
      {? _cfg.AKCJA='ZAKOŃCZ' & _cfg.F_ZATR<>'P'
:        Krótka ścieżka. Dla form współpracy innych niż "P" "Zakończ" od razu przenosi dane do "czystopisu".
      || exec('zakoncz','wspolpraca')
      ?};
:: Dodanie lub modyfikacja oddelegowania do pracy za granicą.
      {? H.ODDEL='T'
      || {? H_ODDE.H=null()
         || H_ODDE.H:=H.ref();
            {? ~H_ODDE.add(1)
            || undo()
            ?}
         || {? ~H_ODDE.put(1)
            || undo()
            ?}
         ?}
      ?}
   || undo()
   ?};
   end();
   {? H_UM.P_ZAS<>null & H_UM.P_ZAS<>_p_zas
::    informacja o zależnościach służbowych
   || exec('p_zas_zs_def','pracownik',H_UM.P_ZAS)
   ?}
?};

:: Zakończenie pracy z oddelegowaniem do pracy za granicą.
{? _oddelegowanie
|| exec('h_odde_edit_end','oddelegowanie',_txt)
?};
exec('restore_fml_all','#field',P,_buf);

exec('cntx_pop','wspolpraca',_filtr);
''


\akcja_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Usuń".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_mp:=_par.mp;
_in:={? _mp.isMicro() || _par.context || _par.int ?};
_cfg:=_par.cfg;

_filtr:=exec('cntx_psh','wspolpraca');

{? type_of(_in.H)<>type_of(null()) | _in.H=null()
|| exec('cntx_pop','wspolpraca',_filtr);
   return('Usunięcie danych nie jest możliwe.\nBrak parametrów wewnętrznych.')
?};

H.use(ref_name(_in.H));

{? ~H.seek(_in.H)
|| exec('cntx_pop','wspolpraca',_filtr);
   return('Usunięcie danych nie jest możliwe.\nNieprawidłowe parametry wewnętrzne.')
?};

H_UM.use(ref_name(H.UMOWA));

_ret:={? H.UMOWA().P & exec('p_usun','pracownik') || 'CANCEL' || '' ?};

exec('cntx_pop','wspolpraca',_filtr);

_ret


\cntx_psh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zachowanie i ustawienie odpowiedniego kontekstu obsługiwanych tabel.
::   WE:
::   WY: Tablica z zapamiętanymi filtrami.
::----------------------------------------------------------------------------------------------------------------------
_filtr:=obj_new('OS_ADRES','OSOBA','P','RU','H_UM','H','ODD','H_ODDE');

_filtr.OS_ADRES:=exec('get','#filter',OS_ADRES);
OS_ADRES.cntx_psh();
OS_ADRES.f_clear();
OS_ADRES.prefix();

_filtr.OSOBA:=exec('get','#filter',OSOBA);
OSOBA.cntx_psh();
OSOBA.f_clear();
OSOBA.prefix();

_filtr.P:=exec('get','#filter',P);
P.cntx_psh();
P.f_clear();
P.prefix();

_filtr.RU:=exec('get','#filter',RU);
RU.cntx_psh();
RU.f_clear();
RU.prefix();
RU.win_sel('UMPRAC');

_filtr.H_UM:=exec('get','#filter',H_UM);
H_UM.cntx_psh();
H_UM.use('h_u_');
H_UM.f_clear();
H_UM.index('OD');
H_UM.prefix();

_filtr.H:=exec('get','#filter',H);
H.cntx_psh();
H.use('_his_');
H.f_clear();
H.index('HISTUM');
H.prefix();

_filtr.ODD:=exec('get','#filter',ODD);
ODD.cntx_psh();
ODD.f_clear();
ODD.prefix();

_filtr.H_ODDE:=exec('get','#filter',H_ODDE);
H_ODDE.cntx_psh();
H_ODDE.use('h_odde_');
H_ODDE.f_clear();
H_ODDE.index('HOD');
H_ODDE.prefix();

exec('os_adres_cfg','osoba','BLANK','OSOBA');

BPMN.KK_DOM:='PPL';

_filtr


\cntx_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Odtworzenie kontekstu obsługiwanych tabel.
::   WE: _a [ARRAY] - Tablica z zapamiętanymi filtrami.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_filtr:=_a;

exec('set','#filter',H_ODDE,_filtr.H_ODDE);
H_ODDE.cntx_pop();
exec('set','#filter',ODD,_filtr.ODD);
ODD.cntx_pop();
exec('set','#filter',H,_filtr.H);
H.cntx_pop();
exec('set','#filter',H_UM,_filtr.H_UM);
H_UM.cntx_pop();
exec('set','#filter',RU,_filtr.RU);
RU.cntx_pop();
exec('set','#filter',P,_filtr.P);
P.cntx_pop();
exec('set','#filter',OSOBA,_filtr.OSOBA);
OSOBA.cntx_pop();
exec('set','#filter',OS_ADRES,_filtr.OS_ADRES);
OS_ADRES.cntx_pop();

exec('os_adres_cfg','osoba','BLANK','');
~~


\zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za akcję "Zakończ" (dla docelowych form współpracy innych niż P) - przenosi dane
::       do czystopisu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ds:=do_state();

{? _ds=0
|| do()
|? _ds=2
|| return()
?};

{? OSOBA.KALI<>'T'
|| OSOBA.KALI:='T';
   {? ~OSOBA.put(1)
   || undo()
   ?}
?};

{? P.F_ZATR().DOCELOWA<>'T'
|| P.F_ZATR:=exec('tmp2dest','f_zatr',F_ZATR.KOD)
?};
exec('test_p_ip','pracownik',1,1);
{? ~P.put(1)
|| undo()
?};

SLO_OSOB.cntx_psh();
SLO_OSOB.clear();
SLO_OSOB.blank(1);
SLO_OSOB.F_ZATR:=P.F_ZATR;
SLO_OSOB.OSOBA:=P.OSOBA;
SLO_OSOB.ID:=P.IP;
{? ~SLO_OSOB.find_rec() & ~SLO_OSOB.add(1)
|| undo()
?};
SLO_OSOB.cntx_pop();

{? ~exec('h_um_merge','pracownik')
|| undo()
?};

{? _ds=0
|| end()
|| do_state()=1
?}


\h_odde_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Dołącza rekord H_ODDE, ewentualnie (parametr) "dzieli" H na kilka przebiegów jeśli jest taka potrzeba.
::       Wymagane poprawne ustawienie bufora H.
::   WE: [_a][INTEGER] - 0/1 Czy dzielić przebiegi? Domyślnie 0 - nie
::   WY: _ok [INTEGER] - 0/1 Wynik operacji
::----------------------------------------------------------------------------------------------------------------------
_dziel:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_ok:=1;

{? _dziel
|| _ref:=H.ref();

   H.cntx_psh();
   H.index('HISTUM');
   H.prefix(H.UMOWA);
:: Dodanie oddelegowania do pracy za granicą z pozycjami.
   _add_h:=0;
   {? H.ODDEL='T'
   || H_ODDE.H:=_ref;
      _h_do:=H.DO;
      {? _ok:=H_ODDE.add(1)
      || exec('h_odde_wer_ad','oddelegowanie');
         _add_h:=H.ODDEL='T' & (H.DO=date(0,0,0) | H_ODDE.O_DO<H.DO);
::    Jeżeli redagowane było oddelegowanie do pracy za granicę to aktualizowana jest data końca aneksu na podstawie
::    daty zakończenia oddelegowania.
         {? _add_h
         || H.DO:=H_ODDE.O_DO;
            _ok:=H.put()
         ?}
      ?}
   || _ok:=1
   ?};

   {? _ok
   || _do:=H.OD-1;
      _h_od:=H.DO+1;
      {? H.prev()
      || _h_do:=H.DO;
         H.DO:=_do;
         {? H.put(1)
         || _ok:=1;
::          Jeżeli aneks z oddelegowaniem to odtworzenie oddelegowań.
            {? H.ODDEL='T'
            || _ok:=exec('zmiany_h2hodde','oddelegowanie','prev')
            ?}
         ?}
      || H.ODDEL:='N'
      ?};
      {? _add_h
::    Stoimy na poprzednim rekordzie (dołączenie przebiegu), albo na bieżącym (zatrudnienie):
      || H.OD:=_h_od;
         H.DO:=_h_do;
         _ok:=H.add(1)
      ?}
   ?};
   H.cntx_pop()

|| _ok:=H_ODDE.add(1)
?};

_ok


\odd_default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Wyszukanie domyślnej jednostki księgowej (uwzględnione uprawnienia i wartość parametru).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_odd:=null;
_par:=PAR_SKID.get(1);
ODD.cntx_psh();
ODD.index('ODDZIALY');
ODD.clear();
ODD.f_clear();
ODD.f_set(
   'OD,N',
   'left join USERSDEP using(USERSDEP.DEPT,ODD.REFERENCE)',
   '(:_a=1 or USERSDEP.USERS=:_b) and ODD.FIRMA=:_c',
   Perm.hasFull('FJKS'),OPERATOR.USER,REF.FIRMA
);
:: Jeśli mamy tylko jedną jednostkę księgową to ją zwracamy
{? ODD.f_first() & ODD.f_size()=1
|| _odd:=ODD.ref()
:: Jeśli więcej, to sprawdzamy jaka jednostka jest ustawiona przez parametr 1
|? ODD.f_size()>1
|| {? _par<>'' & ODD.f_find(_par,)
   || _odd:=ODD.ref()
   ?}
?};
ODD.f_clear();
ODD.cntx_pop();
_odd


:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:29 209a3d37d7652561fff5b7687c8cd123171dc8a2abd5d3283b7b501f73fce36db371b8501556f3fa8f30c3f14dd36f401168c8dc7d1fc2a6ba01b9c7e784149389a077a82f7c147d9df74d6bfd8a0a4e3dcf614febc2649d747702629b75821939530e9309b94fd16aea80cd6c436b5af70941a455852acdc43a0ec0b0d2e6f1
