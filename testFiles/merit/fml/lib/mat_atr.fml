:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mat_atr.fml [12.10]
:: Utworzony: 2011-02-24
:: Autor: Mario
::======================================================================================================================
:: Zawartość: Formuły do obsługi atrybutów dostaw oraz materiałów
::======================================================================================================================


\il_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Zwraca maksymalną liczbę argumentów w M_ATR\
::   WY: INTEGER
::  OLD: \il_atr/zparn.fml
:: DOST: PUBLIC
::----------------------------------------------------------------------------------------------------------------------
10


\pw_dk_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed wyświetleniem pola DK_C
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_jak:=exec('samgdost','mat_atr');
{? _jak=0 || _wyn:=exec('findfnv','#color')
|? _jak<0 || _wyn:=exec('findfnrd','color')
?};
_wyn


\samgdost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdza czy istnieją wg uprawnień magazyny typu dostaw
::   WE: [_a] - poziom stanów magazynowych
::   WY: 1-są 0-nie -1-są i nie do edycji
::----------------------------------------------------------------------------------------------------------------------

{? _>=1 || {? type_of(_a)<>2 || _a:='' ?} || _a:='' ?};

_wyn:=0;
ZK_N.cntx_psh();
{? BEER.ZK_N || ZK_N.use(ref_name(BEER.ZK_N)) ?};
{? _a='ZAM' | ATR.MJS='OFP' | ((ATR.MJS='ZK_P' | ATR.MJS='REZ') & BEER.ZK_N().T().R='Z')
|| {? _a='' & ATR.MJS='ZK_P' & ZK_P.RMAG<>null
   || _wyn:=ZK_P.RMAG().TYP*'DOST'
   || USERS_UP.index('MG');
      USERS_UP.prefix(OPERATOR.USER,'ZAM',ST.ODDZ);
      {? USERS_UP.first()
      || {!
         |? _wyn:=USERS_UP.MG().TYP*'DOST';
            ~_wyn & USERS_UP.next()
         !}
      || USERS_UP.index('MG');
         USERS_UP.prefix(null,'ZAM',ST.ODDZ);
         {? USERS_UP.first()
         || {!
            |? _wyn:=USERS_UP.MG().TYP*'DOST';
               ~_wyn & USERS_UP.next()
            !}
         ?}
      ?}
   ?}
|? _a='' & ((ATR.MJS='ZK_P' | ATR.MJS='REZ') & BEER.ZK_N().T().R='W') | ATR.MJS='PD_K' & PD_K.TYPYZAM().R='W'
|| {? ATR.MJS='ZK_P' & BEER.ZK_N().MG<>null()
   || _wyn:=(ZK_P.M().RODZ='U' & BEER.ZK_N().MG().U='N') | BEER.ZK_N().MG().TYP*'DOST'
   |? ATR.MJS='ZK_P' & ZK_P.RMAG<>null()
   || _wyn:=(ZK_P.M().RODZ='U' & ZK_P.RMAG().U='N') | ZK_P.RMAG().TYP*'DOST'
   |? ATR.MJS='ZK_P' & ZK_P.M().RODZ='U'
   || _wyn:=1
   || USERS_UP.index('MG');
      USERS_UP.prefix(OPERATOR.USER,'ZAW',ST.ODDZ);
      {? USERS_UP.first()
      || {!
         |? _wyn:=USERS_UP.MG().TYP*'DOST';
            ~_wyn & USERS_UP.next()
         !}
      || USERS_UP.index('MG');
         USERS_UP.prefix(null,'ZAW',ST.ODDZ);
         {? USERS_UP.first()
         || {!
            |? _wyn:=USERS_UP.MG().TYP*'DOST';
               ~_wyn & USERS_UP.next()
            !}
         ?}
      ?}
   ?}
|? _a='' & ATR.MJS='DK'
|| _wyn:=ND.TYP().KOOP='N' & ND.MAG().TYP*'DOST'
|? _a='' & ATR.MJS='ZPARN'
|| _wyn:=ZPARN.ZL().MG().TYP*'DOST'
|? _a='' & (';INP;INY;'*ATR.MJS)>1
|| _wyn:=INN.MG().TYP*'DOST'
|? _a='SPR' | ATR.MJS='ZD_POZ' | (ATR.MJS='FAP' & (FAKS.WHERE<>'G' | FAP.M().RODZ='U')) | ATR.MJS='PD_K' & PD_K.TYPYZAM().R='D'
|| {? _a='' & ATR.MJS='ZD_POZ' & ZD_POZ.M().RODZ='U'
   || _wyn:=1
   |? _a='' & ATR.MJS='ZD_POZ' & ZD_NAG.MG<>null
   || _wyn:=ZD_NAG.MG().TYP*'DOST'
   |? _a='' & ATR.MJS='ZD_POZ' & ZD_POZ.MG<>null
   || _wyn:=ZD_POZ.MG().TYP*'DOST'
   |? _a='' & ATR.MJS='FAP' & (FAKS.WHERE='P' | FAP.M().RODZ='U')
   || _wyn:=1
   |? _a='' & ATR.MJS='FAP' & FAKS.WHERE='M'
   || _wyn:=-1
   |? _a='' & ATR.MJS='FAP' & FAKS.MAG<>null
   || _wyn:=FAKS.MAG().TYP*'DOST'
   |? _a='SPR' | ATR.MJS='FAP'
   || USERS_UP.index('MG');
      USERS_UP.prefix(OPERATOR.USER,'MG',ST.ODDZ);
      {? USERS_UP.first()
      || {!
         |? _wyn:=USERS_UP.MG().TYP*'DOST';
            ~_wyn & USERS_UP.next()
         !}
      || USERS_UP.index('MG');
         USERS_UP.prefix(null,'MG',ST.ODDZ);
         {? USERS_UP.first()
         || {!
            |? _wyn:=USERS_UP.MG().TYP*'DOST';
               ~_wyn & USERS_UP.next()
            !}
         ?}
      ?}
   |? _a='' & ATR.MJS='PD_K' & PD_K.TYPYZAM().R='D' & PD_K.MG
   || _wyn:=PD_K.MG().TYP*'DOST'
   ?}
|? _a='ALL' | ATR.MJS='PAL_POZ' | ATR.MJS='EANX'
|| MG.cntx_psh();
   MG.index('MAG');
   MG.prefix(ST.ODDZ);
   {? MG.first()
   || {!
      |? _wyn:=MG.TYP*'DOST';
         ~_wyn & MG.next()
      !}
   ?};
   MG.cntx_pop()
|? ATR.MJS='REM_ZAS'
|| _wyn:=1
|? ATR.MJS='TR_ZLM' & (1+TR_ZLM.TR_ZL().TR_NZL().MG().TYP)='D'
|| _wyn:=1
?};
ZK_N.cntx_pop();
_wyn


\bd_atr_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: formuła przed wyświetleniem dla wartości atrybutu
::   WY: kolor
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_fld:=cur_afld();
_acr:='SL_'+(_fld+2);
_jest:=0;
{? ATR.MJS<>'M_ATR'
|| _mat:={? ATR.MJS<>'' || exec('acr2acr','mat_atr') || 'M' ?};
   _jest:=($(ATR.MJS+'.'+_mat+'().M_ATR().SYM'))()<>''
?};
{? ($('M_ATR.'+_acr))()=null
|| {? ATR.MJS<>'M_ATR' & ~_jest || ($(ATR.MJS+'.DK_C().M_ATR().SYM'))() ?};
   {? ($('M_ATR.'+_acr))()=null
   || _wyn:=exec('findfnv','#color')
   ?}
?};
{? _wyn='' &  (';TMAT;TCHMAT'*ATR.MJS)>1
||
:: Obsluga surowcow w technologii - jesli zaznaczony ptaszek dziedziczenia wartosci atrybutu
:: z produktu zlecenia to nie redaguje tej wartosci
   _rule_get:=$('ATR.ZL_WAR'+(cur_afld()+2));
   {? (ATR.FLAG_TEX=1 | ATR.FLAG_ED=2) & _rule_get()='T'
   || _wyn:=exec('findfnv','#color')
   ?}
?};
{? ~('M_ATR;EANP'*ATR.MJS) & ($(ATR.MJS+'.DK_C'))()=null() & ($(ATR.MJS+'.'+_mat+'().M_ATR'))()<>null()
|| DK_C.blank();
   DK_C.M_ATR:=($(ATR.MJS+'.'+_mat+'().M_ATR'))()
?};
{? (#(_fld+2))=1 || exec('set_efld_opt','mat_atr',ATR.MJS) ?};
_wyn


\acr2acr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: podmiana akronimu pola
::   WE: [_a] - acronim domyślnie ('M')
::   WY: nowy acronim
::---------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>2 || _a:='M' ?} || _a:='M' ?};

_wyn:=_a;
{? ATR.MJS='TMAT'
|| {? TMAT.TGDFLT<>null()
   || _wyn:='TGDFLT().PT'
   || _wyn:='PT'
   ?}
|? ATR.MJS='TCHMAT'
|| {? TCHMAT.TGDFLT<>null()
   || _wyn:='TGDFLT().PT'
   || _wyn:='PT'
   ?}
|? ATR.MJS='ZMAT' | ATR.MJS='ZLIM' | ATR.MJS='ZL' | ATR.MJS='ZPARN'
|| _wyn:='KTM'
|? ATR.MJS='EANX'
|| _wyn:='MPAL'
|? ATR.MJS='TR_ZLM'
|| _wyn:='TR_ZL().M'
?};
_wyn


\matrzpar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: sprawdza czy dany wzorzec ma slownik typu partia
::   WE: _a - ref M_ATR
::   WY: 1-tka 0-nie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
M_ATR.cntx_psh();
M_ATR.clear();
{? M_ATR.seek(_a)
|| _i:=1;
   {!
   |? _wyn:=($('M_ATR.SL_'+form(_i,-2,,'99')+'().TYP'))()='P';
      _i+=1;
      ~_wyn & _i<=10
   !}
?};
M_ATR.cntx_pop();
_wyn


\prnazatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed redakcja pola NAZ dla M_ATR
::   WE: [_a] - wypelnia bez pytania 1, 0-nie (domyslnie)
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

{? M_ATR.NAZ='' & M_ATR.SL_01<>null & (_a | FUN.ask('Czy wypełnić pole Nazwa kodami atrybutów?'@))
|| _i:=0;
   _naz:='';
   {!
   |? _i+=1;
      {? ($('M_ATR.SL_'+form(_i,-2,0,'99')))()<>null
      || _naz+=($('M_ATR.SL_'+form(_i,-2,0,'99')+'().NA'))()+' - ';
         _i<10
      || 0
      ?}
   !};
   M_ATR.NAZ:=_naz-3
?};
1


\bl_m_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: wartosc poczatkowa pola typ dla definicji atrybutow
::----------------------------------------------------------------------------------------------------------------------
POM.ATR_TYP


\bd_mat_atr_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: formuła przed wyświetleniem dla słowników
::   WE: [_a] 1-podczytaj 0(domyślnie)-nie
::   WY: kolor
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

_wyn:='';
_pop:=(1+menu_txt())<>'D' | var_pres('__winbad')=1 | var_pres('__adddkc');
_jest:=0;

_wg_sc:=var_pres('__winbad')=1;
_wg_m:=var_pres('__popktm')=1;
{? ATR.MJS<>'' & ATR.MJS<>'M_ATR' || ($(ATR.MJS+'.'+exec('acr2acr','mat_atr')+'().M_ATR().SYM'))() ?};

{? _wg_m
|| {? (_a | ($('M_ATR.'+cur_afld()))()<>null() | ($('M_ATR.'+cur_afld()))()<>null())
   || _wyn:=''
   || _wyn:=exec('findfnv','#color')
   ?}
|? _wg_sc
|| {? (5+__sc.DK_C)='dokce'
    & M_ATR.seek(exec('FindAndGet','#table',DK_C,__sc.DK_C,,"M_ATR",null())) & ($('M_ATR.'+cur_afld()))()<>null
   || _wyn:=''
   || _wyn:=exec('findfnv','#color')
   ?}
|? _pop | _a
|| _mat:={? ATR.MJS<>'' || exec('acr2acr','mat_atr') || 'M' ?};
   {? ATR.MJS='ZK_P' & ZK_P.RMAG<>null & ~(ZK_P.RMAG().TYP*'DOST')
   || _wyn:=exec('findfnv','#color')
   |? ATR.MJS<>'' & ATR.MJS<>'M_ATR'
    & ((_jest:=($(ATR.MJS+'.'+_mat+'().M_ATR().SYM'))()<>''; _a | ($('M_ATR.'+cur_afld()))()<>null)
     | {? ~_jest || (($(ATR.MJS+'.DK_C().M_ATR().SYM'))(); _a | ($('M_ATR.'+cur_afld()))()<>null) ?})
   || _wyn:=''
   |? ATR.MJS='' | ATR.MJS='M_ATR'
    & (_a | ($('M_ATR.'+cur_afld()))()<>null() | ($('M_ATR.'+cur_afld()))()<>null())
   || _wyn:=''
   || _wyn:=exec('findfnv','#color')
   ?};
   {? _wyn='' & ~('M_ATR;EANP;INY'*ATR.MJS) & ($(ATR.MJS+'.DK_C'))()=null()
    & ($(ATR.MJS+'.'+_mat+'().M_ATR'))()<>null()
   || DK_C.blank();
      DK_C.M_ATR:=($(ATR.MJS+'.'+_mat+'().M_ATR'))()
   ?}
?};
_wyn


\pr_m_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: formula przed redakcja dla slownikow
::   WY: kolor
::----------------------------------------------------------------------------------------------------------------------
{? exec('wyp_lic','wyp')='T' & exec('fst_lic','fst')='T'
|| TAT.win_edit('REDW')
?};
{? cur_afld()='AUTODL' & ~M_ATR.AUTONR
|| 0
|| POMOC.TAT_M:='L';
   1
?}


\af_m_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JSz [12.30]
:: OPIS: Po redagowaniu pól SL_01 do SL_10 tabeli M_ATR
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_slt:='M_ATR.'+cur_afld+'().TYP';
_slm:='M_ATR.MOD'+(cur_afld()+2);
_slb:='M_ATR.MOB'+(cur_afld()+2);
_slg:='M_ATR.GS1'+(cur_afld()+2);
{? POM.ATR_TYP='B' & (($_slt)())='P'
|| FUN.info('Nie można dodać atrybutu o typie "Partia" do zestawu atrybutów materiału.'@);
   _res:=0
|| _il:=0;
   {! _i:=1.. exec('il_atr','mat_atr') |!
      _pole:='SL_'+form(_i,-2);
      {? ($(('M_ATR.'+_pole+'().TYP')))()='P'
      || _il+=1
      ?}
   !};
   {? _il>1
   || FUN.info('Istnieje już atrybut o typie "Partia".\nMożna dodać tylko jeden atrybut tego typu.'@);
      _res:=0
   ?}
?};
{? fld=null() | (';PR'*(($_slt)()))>1 || (($_slm)()):=(($_slb)()):=0; (($_slg)()):='' ?};
_res


\prarmatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed redakcja M_ATR.ARCH
::   WY: 1-mozna edytowac 0-nie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_wyn


\pr_wzatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed redakcja kodu wzorca
::----------------------------------------------------------------------------------------------------------------------
{? M_ATR.TYP='B' | (M_ATR.TYP='C' & M_ATR.FSYM=null)
|| exec('f3_wzatr','mat_atr');
   win_disp()
?};
0


\f3_wzatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: f3 dla kodu wzorca
::   WY: wzorzec
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__lstatr','__strwzo','__npwzor','__sellst','__selwzo','__strwzi','__strwni','__selwzn','__strwzn','__sel_nw','__npwzn');

_czy_gat:=0;
_czy_odm:=0;

__lstatr:=tab_tmp(1,'LP','INTEGER',''
           ,'SYM','STRING[20]',''
           ,'TYP','STRING[4]','');
__strwzo:=tab_tmp(1,'NR','INTEGER',''
           ,'ATR','STRING[20]',''
           ,'TYP','STRING[4]',''
           ,'LP','INTEGER',''
           ,'OD','INTEGER',''
           ,'DO','INTEGER',''
           ,'NP','STRING[25]',''
           ,'WAR','STRING[25]','');
__strwzn:=tab_tmp(1,'NR','INTEGER',''
           ,'ATR','STRING[20]',''
           ,'TYP','STRING[4]',''
           ,'LP','INTEGER',''
           ,'OD','INTEGER',''
           ,'DO','INTEGER',''
           ,'NP','STRING[25]',''
           ,'WAR','STRING[25]',''
           ,'SLOTR','INTEGER','');
__npwzor:=tab_tmp(1,'TYP','STRING[1]',''
           ,'WAR','STRING[100]',''
           ,'OPI','STRING[20]','');
__npwzn:=tab_tmp(1,'TYP','STRING[1]',''
           ,'WAR','STRING[100]',''
           ,'OPI','STRING[20]','');

:: wypelnienie tabeli definicji wzorca
{? POM.ATR_TYP='B'
|| _czy_gat:=exec('get_par','#parametr',142)<>'B';
   _czy_odm:=exec('get_par','#parametr',143)<>'B';
   __lstatr.blank();
   __lstatr.LP:=0;
   __lstatr.SYM:='<GRUPA>';
   __lstatr.TYP:='MGRU';
   __lstatr.add(1);

   __lstatr.blank();
   __lstatr.LP:=0;
   __lstatr.SYM:='<PODGRUPA>';
   __lstatr.TYP:='MGRP';
   __lstatr.add(1);

   {? _czy_gat
   || __lstatr.blank();
      __lstatr.LP:=0;
      __lstatr.SYM:='<GATUNEK>';
      __lstatr.TYP:='MGAT';
      __lstatr.add(1)
   ?};
   {? _czy_odm
   || __lstatr.blank();
      __lstatr.LP:=0;
      __lstatr.SYM:='<ODMIANA>';
      __lstatr.TYP:='MODM';
      __lstatr.add(1)
   ?}
?};

_i:=0;
{!
|? _i+=1;
   _sl:='M_ATR.SL_'+form(_i,-2,0,'99');
   {? ($_sl)()<>null
   || __lstatr.blank();
      __lstatr.LP:=_i;
      __lstatr.SYM:=($(_sl+'().NA'))();
      __lstatr.TYP:='A';
      __lstatr.add(1);
      _i<10
   || {? M_ATR.NOATR='T' || _i<10 || 0 ?}
   ?}
!};
__lstatr.blank();
__lstatr.LP:=0;
__lstatr.SYM:='<DOWOLNY NAPIS>';
__lstatr.TYP:='S';
__lstatr.add(1);

:: wypelnienie tabeli struktury kodu na podstawie pola M_ATR.WZ
_npwz:='A0B1C2D3E4F5G6H7I8J9K0L1M';
_npww:='';
_wz:=M_ATR.WZ;
_i:=0;
{!
|? _ch:=1+_wz;
   {? _ch='['
   || _wz:=1-_wz;
      _nr:=_wz*']';
      _war:=#((_nr-1)+_wz);
      _sl:='M_ATR.SL_'+form(_war,-2,0,'99');
      _wz:=_nr-_wz;
      _ch:=1+_wz;
      {? _ch='('
      || _wz:=1-_wz;
         _nr:=_wz*')';
         _buf:=(_nr-1)+_wz;
         _wz:=_nr-_wz;
         _nr:=_buf*'-';
         _odn:=#((_nr-1)+_buf);
         _don:=#(_nr-_buf);
         _i+=1;
         __strwzo.blank();
         __strwzo.NR:=_i;
         __strwzo.LP:=_war;
         __strwzo.TYP:='A';
         __strwzo.ATR:=($(_sl+'().NA'))();
         __strwzo.OD:=_odn;
         __strwzo.DO:=_don;
         __strwzo.NP:=(1+_don-_odn)+((_odn-1)-_npwz);
         __strwzo.WAR:='['+form(_war,,0,'99')+']('+form(_odn,,0,'99')+'-'+form(_don,,0,'99')+')';
         __strwzo.add(1);
         _npww+=__strwzo.NP
      || _i+=1;
         __strwzo.blank();
         __strwzo.NR:=_i;
         __strwzo.LP:=_war;
         __strwzo.TYP:='A';
         __strwzo.ATR:=($(_sl+'().NA'))();
         __strwzo.NP:=_npwz;
         __strwzo.WAR:='['+form(_war,,0,'99')+']';
         __strwzo.add(1);
         _npww+=__strwzo.NP
      ?}
   |? _ch='s'
   || _wz:=1-_wz;
      _nr:=_wz*'s';
      _war:=(_nr-1)+_wz;
      _wz:=_nr-_wz;
      _i+=1;
      __strwzo.blank();
      __strwzo.NR:=_i;
      __strwzo.LP:=0;
      __strwzo.TYP:='S';
      __strwzo.ATR:='<DOWOLNY NAPIS>';
      __strwzo.NP:=_war;
      __strwzo.WAR:='s'+_war+'s';
      __strwzo.add(1);
      _npww+=__strwzo.NP
   |? _ch='M'
   || _slo:=_ch;
      _wz:=1-_wz;
      {! // 1..3
      |! _slo+=(1+_wz);
         _wz:=1-_wz
      !};
      _i+=1;
      __strwzo.NR:=_i;
      __strwzo.LP:=0;
      __strwzo.TYP:=__strwzo.WAR:=__strwzo.NP:=_slo;
      __strwzo.ATR:={? _slo='MGRU' || '<GRUPA>'
                    |? _slo='MGRP' || '<PODGRUPA>'
                    |? _slo='MGAT' & _czy_gat || '<GATUNEK>'
                    |? _slo='MODM' & _czy_odm || '<ODMIANA>'
                    || ''
                    ?};
      {? __strwzo.ATR<>''
      || __strwzo.add(1);
      _npww+=__strwzo.NP
      ?}
   || _wz:=1-_wz
   ?};
   (+_wz)
!};

:: wypelnienie tabeli struktury nazwy na podstawie pola M_ATR.WZN
_npwzn:='A0B1C2D3E4F5G6H7I8J9K0L1M';
_npwzt:=''; {! _ii:=97..122 |! _npwzt+=%_ii !};
_npwwn:='';
_wzn:=M_ATR.WZN;
_in:=0;
{!
|? _chn:=1+_wzn;
   {? _chn='['
   || _slotr:=0;
      _wzn:=1-_wzn;
      _nrn:=_wzn*']';
      _strn:=((_nrn-1)+_wzn);
      {? (_strn+1)='*' || _slotr:=1; _strn:=_strn-1 ?};
      _warn:=#_strn;
      _sln:='M_ATR.SL_'+form(_warn,-2,0,'99');
      _wzn:=_nrn-_wzn;
      _chn:=1+_wzn;
      {? _chn='('
      || _wzn:=1-_wzn;
         _nrn:=_wzn*')';
         _bufn:=(_nrn-1)+_wzn;
         _wzn:=_nrn-_wzn;
         _nrn:=_bufn*'-';
         _odnn:=#((_nrn-1)+_bufn);
         _donn:=#(_nrn-_bufn);
         _in+=1;
         __strwzn.blank();
         __strwzn.SLOTR:=_slotr;
         __strwzn.NR:=_i;
         __strwzn.LP:=_warn;
         __strwzn.TYP:='A';
         __strwzn.ATR:=($(_sln+'().NA'))();
         __strwzn.OD:=_odnn;
         __strwzn.DO:=_donn;
         __strwzn.NP:=(1+_donn-_odnn)+((_odnn-1)-{? __strwzn.SLOTR || _npwzt || _npwzn ?});
         __strwzn.WAR:='['+form(_warn,,0,'99')+{? __strwzn.SLOTR || '*' || '' ?}+']('
                       +form(_odnn,,0,'99')+'-'+form(_donn,,0,'99')+')';
         __strwzn.add(1);
         _npwwn+=__strwzn.NP
      || _in+=1;
         __strwzn.blank();
         __strwzn.SLOTR:=_slotr;
         __strwzn.NR:=_in;
         __strwzn.LP:=_warn;
         __strwzn.TYP:='A';
         __strwzn.ATR:=($(_sln+'().NA'))();
         __strwzn.NP:={? __strwzn.SLOTR || _npwzt || _npwzn ?};
         __strwzn.WAR:='['+form(_warn,,0,'99')+{? __strwzn.SLOTR || '*' || '' ?}+']';
         __strwzn.add(1);
         _npwwn+=__strwzn.NP
      ?}
   |? _chn='s'
   || _wzn:=1-_wzn;
      _nrn:=_wzn*'s';
      _warn:=(_nrn-1)+_wzn;
      _wzn:=_nrn-_wzn;
      _in+=1;
      __strwzn.blank();
      __strwzn.NR:=_in;
      __strwzn.LP:=0;
      __strwzn.TYP:='S';
      __strwzn.ATR:='<DOWOLNY NAPIS>';
      __strwzn.NP:=_warn;
      __strwzn.WAR:='s'+_warn+'s';
      __strwzn.add(1);
      _npwwn+=__strwzn.NP
   |? _chn='M'
   || _slon:=_chn;
      _wzn:=1-_wzn;
      {! // 1..3
      |! _slon+=(1+_wzn);
         _wzn:=1-_wzn
      !};
      _in+=1;
      __strwzn.NR:=_in;
      __strwzn.LP:=0;
      __strwzn.TYP:=__strwzn.WAR:=__strwzn.NP:=_slon;
      __strwzn.ATR:={? _slon='MGRU' || '<GRUPA>'
                    |? _slon='MGRP' || '<PODGRUPA>'
                    |? _slon='MGAT' & _czy_gat || '<GATUNEK>'
                    |? _slon='MODM' & _czy_odm || '<ODMIANA>'
                    || ''
                    ?};
      {? __strwzn.ATR<>''
      || __strwzn.add(1);
         _npwwn+=__strwzn.NP
      ?}
   || _wzn:=1-_wzn
   ?};
   (+_wzn)
!};

:: wypelnienie tabeli przykladu wzorca kodu
__npwzor.blank();
__npwzor.TYP:='W';
__npwzor.WAR:=M_ATR.WZ;
__npwzor.OPI:='STRUKTURA WZORCA';
__npwzor.add(1);
__npwzor.blank();
__npwzor.TYP:='P';
__npwzor.WAR:=_npww;
__npwzor.OPI:='PRZYKŁAD KODU';
__npwzor.add(1);

:: wypelnienie tabeli przykladu wzorca nazwy
__npwzn.blank();
__npwzn.TYP:='W';
__npwzn.WAR:=M_ATR.WZN;
__npwzn.OPI:='STRUKTURA WZORCA';
__npwzn.add(1);
__npwzn.blank();
__npwzn.TYP:='P';
__npwzn.WAR:=_npwwn;
__npwzn.OPI:='PRZYKŁAD NAZWY';
__npwzn.add(1);

__sellst:={? POM.ATR_TYP='B'
          || __lstatr.mk_sel('Atrybuty indeksu materiałowego'@,'P',0,'#m_atr_lst1')
          || __lstatr.mk_sel('Struktura kodu cechy dostawy'@,'P',0,'#mcatr_lst1')
          ?};
__lstatr.win_fld(__sellst,,'LP',,,2,0,1,'Lp.'@);
__lstatr.win_fld(__sellst,,'SYM',,,20,0,1,'Atrybut'@);
__lstatr.win_act(__sellst,0,'Rekord',,,,"exec('rekprzed','color','__lstatr#01')");
__lstatr.win_act(__sellst,0,'Formuła','&Akceptuj'@@,,,"exec('akc_wzor','mat_atr')",,,,,,'A');
__lstatr.win_act(__sellst,0,'Formuła','Do wzorca &kodu'@@,,,"exec('dropwzor','mat_atr',1,'M')"
     ,,,1,"exec('dropwzor','mat_atr',1,'M')",,'K');
{? POM.ATR_TYP='B'
|| __lstatr.win_act(__sellst,0,'Formuła','Do wzorca &nazwy'@@,,,"exec('dropwzn','mat_atr',1,'M')"
        ,,,1,"exec('dropwzn','mat_atr',1,'M')",,'N')
?};
__lstatr.win_act(__sellst,0,'Formuła','Legenda'@@,,,"exec('legenda','color','__lstatr#01','__strwzn#PRO#03')",,,,,,'L');
__lstatr.fld_fml('LP','BEFORE_DISPLAY',"exec('bd_wzn','mat_atr','LP')");
__lstatr.win_btn(__sellst,'text=%1, panel=bottom, align=begin'['&Akceptuj'@],'menu:A',,,,,,'noempty');

__selwzo:=__strwzo.mk_sel('Wzorzec kodu'@,'P',0,{? POM.ATR_TYP='B' || '#m_atr_lst2' || '#mcatr_lst2' ?});
__strwzo.win_fld(__selwzo,,'ATR',,,20,0,1,'Atrybut'@);
__strwzo.win_fld(__selwzo,,'OD',,,6,0,0,'Od nr'@);
__strwzo.win_fld(__selwzo,,'DO',,,6,0,0,'Do nr'@);
__strwzo.win_fld(__selwzo,,'NP',,,25,0,0,'Przykład/Wartość'@);
__strwzo.win_act(__selwzo,0,'Popraw',,,,"{? 1+__strwzo.TYP='M' || FUN.emsg('Poprawianie pola o podanym typie niemożliwe.'@) || 1?}","exec('po_wzat','mat_atr')",1);
__strwzo.win_act(__selwzo,0,'Usuń',,,,,"exec('po_wzat','mat_atr')",,1);
{? POM.ATR_TYP='B'
|| __strwzo.win_act(__selwzo,0,'Formuła','Pr&zykład kodu'@@,,,"exec('example','mat_atr',0)",,,,,,'Z')
?};
__strwzo.win_act(__selwzo,0,'Menu','Przesu&ń'@@,,,,,,,,,'Ń');
__strwzo.win_act(__selwzo,0,'Formuła','W &górę'@@,'Przesu&ń',,"exec('dropwzor','mat_atr',2,'U')",,,1
          ,"exec('dropwzor','mat_atr',2,'U')",,'U');
__strwzo.win_act(__selwzo,0,'Formuła','W &dół'@@,'Przesu&ń',,"exec('dropwzor','mat_atr',2,'D')",,,1
          ,"exec('dropwzor','mat_atr',2,'D')",,'D');
__strwzo.win_act(__selwzo,0,'Formuła','Do &numeru'@@,'Przesu&ń',,"exec('dropwzor','mat_atr',2,'N')",,,1
          ,"exec('dropwzor','mat_atr',2,'N')",,'N');
__strwzo.win_act(__selwzo,0,'Rekord',,,,,"exec('chk_wzat','mat_atr')");
__strwzo.win_act(__selwzo,0,'Formuła','&Legenda'@@,,,"exec('legenda','color','__strwzo#01','@__strwzo#PRO')",,,,,,'L');
__strwzo.fld_fml('ATR','BEFORE_DISPLAY',"exec('wzo_wzor','mat_atr','ATR')");
__strwzo.fld_fml('NP','PATTERN',"'u!'");
__strwzo.fld_fml('NP','BEFORE_DISPLAY',"exec('wzo_wzor','mat_atr','NP')");
__strwzo.fld_fml('OD','BEFORE_EDIT',"__strwzo.TYP='A'");
__strwzo.fld_fml('DO','BEFORE_EDIT',"__strwzo.TYP='A'");
__strwzo.fld_fml('NP','BEFORE_EDIT',"__strwzo.TYP='S'");
{? POM.ATR_TYP='B'
|| __strwzo.win_btn(__selwzo,'text=%1, panel=bottom, align=begin'['Pr&zykład kodu'@],'menu:Z'
    ,,,,,,'noempty')
?};

__sel_np:={? POM.ATR_TYP='B'
          || __npwzor.mk_sel('Przykład kodu. (Uwaga: KOD nie może być dłuższy niż 50 znaków -'
              ' maksymalny rozmiar INDEKSU MATERIAŁOWEGO)'@,'P',0,'#m_atr_lst3')
          || __npwzor.mk_sel('Przykład kodu. (Uwaga: KOD nie może być dłuższy niż 20 znaków -'
              ' maksymalny rozmiar KODU CECHY)'@,'P',0,'#mcatr_lst3')
          ?};
__npwzor.win_fld(__sel_np,,'OPI',,,20,0,1,'Opis'@);
__npwzor.win_fld(__sel_np,,'WAR',,,{? POM.ATR_TYP='B' || 54 || 24 ?},0,1,'Wartość'@);
__npwzor.win_act(__sel_np,0,'Formuła','Legenda'@@,,,"exec('legenda','color','__npwzor#01','@__npwzor#PRO')");
__npwzor.fld_fml('OPI','BEFORE_DISPLAY',"exec('nap_wzor','mat_atr','OPI')");
__npwzor.fld_fml('WAR','BEFORE_DISPLAY',"exec('nap_wzor','mat_atr','WAR')");
::__npwzor.fld_fml('WAR','BEFORE_DISPLAY',"exec('po_wzat','mat_atr')");

__selwzn:=__strwzn.mk_sel('Wzorzec nazwy'@,'P',0,'#m_atr_lst4');
__strwzn.win_fld(__selwzn,,'ATR',,,20,0,1,'Atrybut'@);
__strwzn.win_fld(__selwzn,,'OD',,,6,0,0,'od nr'@);
__strwzn.win_fld(__selwzn,,'DO',,,6,0,0,'do nr'@);
__strwzn.win_fld(__selwzn,,'NP',,,20,0,0,'Przykład/Wartość'@);
__strwzn.win_fld(__selwzn,,'SLOTR',,,3,0,0,'Treść'@,,'Czy pole treść ze słownika?'@,2,,"1","0");
__strwzn.win_act(__selwzn,0,'Popraw',,,,"{? 1+__strwzn.TYP='M' || FUN.emsg('Poprawianie pola o podanym typie niemożliwe.'@) || 1?}","exec('po_wznat','mat_atr')",1);
__strwzn.win_act(__selwzn,0,'Usuń',,,,,"exec('po_wznat','mat_atr')",,1);
{? POM.ATR_TYP='B'
|| __strwzn.win_act(__selwzn,0,'Formuła','Pr&zykład nazwy'@@,,,"exec('example','mat_atr',1)",,,,,,'Z');
   __strwzn.win_act(__selwzn,0,'Menu','Przesu&ń'@@,,,,,,,,,'Ń');
   __strwzn.win_act(__selwzn,0,'Formuła','W &góra'@@,'Przesu&ń',,"exec('dropwzn','mat_atr',2,'U')",,,1
             ,"exec('dropwzn','mat_atr',2,'U')",,'U');
   __strwzn.win_act(__selwzn,0,'Formuła','W &dół'@@,'Przesu&ń',,"exec('dropwzn','mat_atr',2,'D')",,,1
             ,"exec('dropwzn','mat_atr',2,'D')",,'D');
   __strwzn.win_act(__selwzn,0,'Formuła','Do &numeru'@@,'Przesu&ń',,"exec('dropwzn','mat_atr',2,'N')",,,1
             ,"exec('dropwzn','mat_atr',2,'N')",,'N')
?};
__strwzn.win_act(__selwzn,0,'Rekord',,,,,"exec('chk_wzn','mat_atr')");
__strwzn.win_act(__selwzn,0,'Formuła','Legenda'@@,,,"exec('legenda','color','__strwzn#01','@__strwzn#PRO')");
__strwzn.fld_fml('ATR','BEFORE_DISPLAY',"exec('wzo_wzn','mat_atr','ATR')");
__strwzn.fld_fml('NP','PATTERN',"'u!'");
__strwzn.fld_fml('NP','BEFORE_DISPLAY',"exec('wzo_wzn','mat_atr','NP')");
__strwzn.fld_fml('OD','BEFORE_EDIT',"__strwzn.TYP='A'");
__strwzn.fld_fml('DO','BEFORE_EDIT',"__strwzn.TYP='A'");
__strwzn.fld_fml('NP','BEFORE_EDIT',"__strwzn.TYP='S'");
__strwzn.fld_fml('SLOTR','BEFORE_EDIT',
                  "__strwzn.TYP='A' & ($('M_ATR.SL_'+form(__strwzn.LP,-2,0,'99')+'().TYP'))()='S'");
{? POM.ATR_TYP='B'
|| __strwzn.win_btn(__selwzn,'text=%1, panel=bottom, align=begin'['Pr&zykład nazwy'@],'menu:Z'
    ,,,,,,'noempty')
?};

__sel_nw:=__npwzn.mk_sel('Przykład nazwy. (Uwaga: NAZWA nie może być dłuższa niż 100 znaków - maksymalny rozmiar NAZWY MATERIAŁU)'@
 ,'P',0,'#m_atr_lst5');
__npwzn.win_fld(__sel_nw,,'OPI',,,20,0,1,'Opis'@);
__npwzn.win_fld(__sel_nw,,'WAR',,,56,0,1,'Wartość'@);
__npwzn.win_act(__sel_nw,0,'Formuła','Legenda'@@,,,"exec('legenda','color','__npwzn#01','@__npwzn#PRO')");
__npwzn.fld_fml('OPI','BEFORE_DISPLAY',"exec('nap_wzn','mat_atr','OPI')");
__npwzn.fld_fml('WAR','BEFORE_DISPLAY',"exec('nap_wzn','mat_atr','WAR')");
::__npwzn.fld_fml('WAR','BEFORE_DISPLAY',"exec('po_wznat','mat_atr')");

__strwzi:=__strwzo.ndx_tmp('',0,'NR',,0);
__strwni:=__strwzn.ndx_tmp('',0,'NR',,0);
{? POM.ATR_TYP='B'
|| __strwzo.dnd_sel(__selwzo,,'records.#m_atr_lst1',"exec('dropwzor','mat_atr',1)");
   __strwzo.dnd_sel(__selwzo,,'records.#m_atr_lst2',"exec('dropwzor','mat_atr',2)");
   __strwzn.dnd_sel(__selwzn,,'records.#m_atr_lst1',"exec('dropwzn','mat_atr',1)");
   __strwzn.dnd_sel(__selwzn,,'records.#m_atr_lst4',"exec('dropwzn','mat_atr',2)")
|| __strwzo.dnd_sel(__selwzo,,'records.#mcatr_lst1',"exec('dropwzor','mat_atr',1)");
   __strwzo.dnd_sel(__selwzo,,'records.#mcatr_lst2',"exec('dropwzor','mat_atr',2)")
?};

_acr_grp:=__lstatr.grp_make('Definicja wzorca kodu oraz nazwy'@,,'m_atr_wzorzec');

{? POM.ATR_TYP='B'
|| __lstatr.grp_sel(_acr_grp,__lstatr,__sellst,,"exec('akt_wzor','mat_atr')",,,12,,,,,'maximized_with_title');
   __lstatr.grp_splt(_acr_grp,,'vertical','tab1');
   __lstatr.grp_sel(_acr_grp,__strwzo,__selwzo,,,65,0,12,"",,,,'maximized_with_title');
   __lstatr.grp_splt(_acr_grp,'tab1','vertical','tab3');
   __lstatr.grp_sel(_acr_grp,__strwzn,__selwzn,,,135,0,12,"",,,,'maximized_with_title')
::   __lstatr.grp_splt(_acr_grp,,'horizontal','tab2');
::   __lstatr.grp_sel(_acr_grp,__npwzor,__sel_np,,,0,14,3,"",,,,'maximized_with_title');
::   __lstatr.grp_splt(_acr_grp,'tab2','vertical','tab4');
::   __lstatr.grp_sel(_acr_grp,__npwzn,__sel_nw,,,0,14,3,"",,,,'maximized_with_title')
|| __lstatr.grp_sel(_acr_grp,__lstatr,__sellst,,"exec('akt_wzor','mat_atr')",,,12,,,,,'maximized_with_title');
   __lstatr.grp_splt(_acr_grp,,'vertical','tab1');
   __lstatr.grp_sel(_acr_grp,__strwzo,__selwzo,,,,,,"",,,,'maximized_with_title');
   __lstatr.grp_splt(_acr_grp,,'vertical','tab2');
   __lstatr.grp_sel(_acr_grp,__npwzor,__sel_np,,,,,,"",,,,'maximized_with_title')
?};

__lstatr.win_sel(_acr_grp);

_akc:=0;
{!
|? {? __lstatr.select()
   || _akc:=1;
      0
   || {? FUN.ask('Czy opuścić Definicję wzorca kodu oraz nazwy bez jego zatwierdzenia?'@)
      || _akc:=0;
         0
      || 1
      ?}
   ?}
!};
{? _akc
|| __npwzor.last();
   M_ATR.WZ:=__npwzor.WAR;
   __npwzn.last();
   M_ATR.WZN:=__npwzn.WAR
?};

__strwzo.ndx_drop();
__strwzn.ndx_drop();

VAR_DEL.delete('__lstatr','__strwzo','__npwzor','__sellst','__selwzo','__strwzi','__strwni','__selwzn','__strwzn','__sel_nw','__npwzn');
~~


\bd_wzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PeKa] [12.30] według [rr] [12.10]
:: OPIS: podswietlenie pol w okienku __lstatr (wzorzec nazwy)
::----------------------------------------------------------------------------------------------------------------------
_lp:=__lstatr.LP;
_typ:=__lstatr.TYP;
_wyn:=0;
__strwzn.cntx_psh();
{? __strwzn.first() || {! |? {? __strwzn.LP=_lp & __strwzn.TYP=_typ || _wyn:=1; 0 || __strwzn.next() ?} !} ?};
__strwzn.cntx_pop();
{? _wyn
|| Color.fnd_kol('__strwzn#PRO#03')
|| ''
?}


\akc_wzor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: akceptacja wzorca kodu oraz nazwy
::----------------------------------------------------------------------------------------------------------------------
_err:=0;
__npwzor.cntx_psh();
__npwzor.clear();
{? __npwzor.find_key('X',) || _err+=1 ?};
__npwzor.cntx_pop();
__npwzn.cntx_psh();
__npwzn.clear();
{? __npwzn.find_key('X',) || _err+=2 ?};
__npwzn.cntx_pop();
{? _err
|| _msg:={? _err=1 || 'indeksu'@
         |? _err=2 || 'nazwy'@
         |? _err=3 || 'indeksu i nazwy'@
         || ''
         ?};
   FUN.info('Podany wzorzec %1 przekracza 100 znaków.\nAkceptacja niemożliwa.'@[_msg]);
   0
|? FUN.ask('Czy zatwierdzić wzorzec kodu oraz nazwy?'@)
|| sel_exit()
?}


\po_wzat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: po funkcji Popraw
::----------------------------------------------------------------------------------------------------------------------
_wzor:='A0B1C2D3E4F5G6H7I8J9K0L1M';
__strwzo.cntx_psh();
_npwzor:='';
_wzwzor:='';
{? __strwzo.first()
|| {!
   |? {? __strwzo.TYP='A' & __strwzo.OD>0
      || __strwzo.NP:=(1+__strwzo.DO-__strwzo.OD)+((__strwzo.OD-1)-_wzor);
         __strwzo.WAR:='['+form(__strwzo.LP,,0,'99')+']('+form(__strwzo.OD,,0,'99')+'-'+form(__strwzo.DO,,0,'99')+')';
         __strwzo.put(1)
      |? __strwzo.TYP='A' & __strwzo.OD=0
      || __strwzo.NP:=_wzor;
         __strwzo.WAR:='['+form(__strwzo.LP,,0,'99')+']';
         __strwzo.put(1)
      |? __strwzo.TYP='S'
      || __strwzo.WAR:='s'+__strwzo.NP+'s';
         __strwzo.put(1)
      ?};
      _npwzor+=__strwzo.NP;
      _wzwzor+=__strwzo.WAR;
      __strwzo.next()
   !}
?};
{? __npwzor.first()
|| {!
   |? {? __npwzor.TYP='W' || __npwzor.WAR:=_wzwzor
      |? __npwzor.TYP='P' || __npwzor.WAR:=_npwzor
      ?};
      __npwzor.put(1);
      __npwzor.next()
   !}
?};
_err:=(+_wzwzor)>100;
__npwzor.clear();
{? __npwzor.find_key('X',)
|| {? ~_err
   || __npwzor.del()
   || __npwzor.blank();
      __npwzor.TYP:='X';
      __npwzor.OPI:='BŁĄD';
      __npwzor.WAR:='Podany wzorzec indeksu przekracza 100 znaków. Brak możliwości akceptacji.';
      __npwzor.add(1)
   ?}
|? _err
|| __npwzor.blank();
   __npwzor.TYP:='X';
   __npwzor.OPI:='BŁĄD';
   __npwzor.WAR:='Podany wzorzec indeksu przekracza 100 znaków. Brak możliwości akceptacji.';
   __npwzor.add(1)
?};
__strwzo.cntx_pop();
__npwzor.first();
{? POM.ATR_TYP<>'B' || grp_disp(__npwzor,__sel_np) ?};
1


\chk_wzat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdzenie poprawnosci wypelnienia pol
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? __strwzo.TYP='S' & form(__strwzo.NP)=''
|| FUN.info('Należy podać wartość pola <DOWOLNY NAPIS>.\nUwaga. Znaki SPACJI na końcu napisu są pomijane.'@);
   _wyn:='NP'
|? __strwzo.TYP='A' & __strwzo.OD<0
|| FUN.info('Niepoprawna wartość - wymagana liczba z zakresu od 0 do 25.'@);
   _wyn:='OD'
|? __strwzo.TYP='A' & __strwzo.DO<0
|| FUN.info('Niepoprawna wartość - wymagana liczba z zakresu od 0 do 25.'@);
   _wyn:='DO'
|? __strwzo.TYP='A' & __strwzo.DO<__strwzo.OD
|| FUN.info('Wartość DO NR nie może być mniejsza od wartości OD NR.'@);
   _wyn:='DO'
|? __strwzo.TYP='A' & __strwzo.OD=0 & __strwzo.DO<>0
|| FUN.info('Wartość OD NR nie może być równa zero, gdy wartość DO NR jest różna od zera.'@);
   _wyn:='OD'
|? __strwzo.TYP='A' & __strwzo.DO>25
|| FUN.info('Wartość DO NR nie może być większa od 25.'@);
   _wyn:='DO'
?};
_wyn


\wzo_wzor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: podswietlenie pol w okienku __strwzo
::   WE: [_a] - akronim pola
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>2 || _a:='' ?} || _a:='' ?};

{? _a='' || ''
|? _a='ATR' || Color.fnd_kol('__strwzo#PRO#01')
|? _a='NP' || Color.fnd_kol('__strwzo#PRO#02')
|| ''
?}


\wzo_wzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30] według [rr] [12.10]
:: OPIS: podswietlenie pol w okienku __strwzn
::   WE: [_a] - akronim pola
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>2 || _a:='' ?} || _a:='' ?};

{? _a='' || ''
|? _a='ATR' || Color.fnd_kol('__strwzn#PRO#01')
|? _a='NP' || Color.fnd_kol('__strwzn#PRO#02')
|| ''
?}


\nap_wzor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: podswietlenie pol w okienku __npwzor
::   WE: [_a] - akronim pola
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>2 || _a:='' ?} || _a:='' ?};

{? __npwzor.TYP='X'            || Color.fnd_kol('__npwzn#PRO#03')
|? _a='' || ''
|? _a='WAR' & __npwzor.TYP='W' || Color.fnd_kol('__npwzor#PRO#01')
|? _a='WAR' & __npwzor.TYP='P' || Color.fnd_kol('__npwzor#PRO#02')
|? _a='OPI' || exec('findfnrd','color')
|| ''
?}


\nap_wzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30] według [rr] [12.10]
:: OPIS: podswietlenie pol w okienku __npwzn
::   WE: [_a] - akronim pola
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>2 || _a:='' ?} || _a:='' ?};

{? __npwzn.TYP='X'            || Color.fnd_kol('__npwzn#PRO#03')
|? _a='' || ''
|? _a='WAR' & __npwzn.TYP='W' || Color.fnd_kol('__npwzn#PRO#01')
|? _a='WAR' & __npwzn.TYP='P' || Color.fnd_kol('__npwzn#PRO#02')
|? _a='OPI' || exec('findfnrd','color')
|| ''
?}


\po_wznat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30] według [rr] [12.10]
:: OPIS: po funkcji Popraw(wzorzec nazwy)
::----------------------------------------------------------------------------------------------------------------------
_wzor:='A0B1C2D3E4F5G6H7I8J9K0L1M';
_wztr:=''; {! _i:=97..122 |! _wztr+=%_i !};
__strwzn.cntx_psh();
_npwzn:='';
_wzwzn:='';
{? __strwzn.first()
|| {!
   |? {? __strwzn.TYP='A' & __strwzn.OD>0
      || __strwzn.NP:={? __strwzn.SLOTR
                      || (1+__strwzn.DO-__strwzn.OD)+((__strwzn.OD-1)-_wztr)
                      || (1+__strwzn.DO-__strwzn.OD)+((__strwzn.OD-1)-_wzor)
                      ?};
         __strwzn.WAR:='['+form(__strwzn.LP,,0,'99')+{? __strwzn.SLOTR || '*' || '' ?}+']('
                       +form(__strwzn.OD,,0,'99')+'-'+form(__strwzn.DO,,0,'99')+')';
         __strwzn.put(1)
      |? __strwzn.TYP='A' & __strwzn.OD=0
      || __strwzn.NP:={? __strwzn.SLOTR || _wztr || _wzor ?};
         __strwzn.WAR:='['+form(__strwzn.LP,,0,'99')+{? __strwzn.SLOTR || '*' || '' ?}+']';
         __strwzn.put(1)
      |? __strwzn.TYP='S'
      || __strwzn.WAR:='s'+__strwzn.NP+'s';
         __strwzn.put(1)
      ?};
      _npwzn+=__strwzn.NP+' ';
      _wzwzn+=__strwzn.WAR;
      __strwzn.next()
   !}
?};
{? __npwzn.first()
|| {!
   |? {? __npwzn.TYP='W' || __npwzn.WAR:=_wzwzn
      |? __npwzn.TYP='P' || __npwzn.WAR:=_npwzn
      ?};
      __npwzn.put(1);
      __npwzn.next()
   !}
?};
_err:=(+_wzwzn)>100;
__npwzn.clear();
{? __npwzn.find_key('X',)
|| {? ~_err
   || __npwzn.del()
   || __npwzn.blank();
      __npwzn.TYP:='X';
      __npwzn.OPI:='BŁĄD';
      __npwzn.WAR:='Podany wzorzec nazwy przekracza 100 znaków. Brak możliwości akceptacji.';
      __npwzn.add(1)
   ?}
|? _err
|| __npwzn.blank();
   __npwzn.TYP:='X';
   __npwzn.OPI:='BŁĄD';
   __npwzn.WAR:='Podany wzorzec nazwy przekracza 100 znaków. Brak możliwości akceptacji.';
   __npwzn.add(1)
?};
__strwzn.cntx_pop();
__npwzn.first();
{? POM.ATR_TYP<>'B' || grp_disp(__npwzn,__sel_nw) ?};
1


\chk_wzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PeKa [12.30] według [rr] [12.10]
:: OPIS: sprawdzenie poprawnosci wypelnienia pol(wzorzec nazwy)
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? __strwzn.TYP='S' & form(__strwzn.NP)=''
|| FUN.info('Należy podać wartość pola <DOWOLNY NAPIS>.\nUwaga. Znaki SPACJI na końcu napisu są pomijane.'@);
   _wyn:='NP'
|? __strwzn.TYP='A' & __strwzn.OD<0
|| FUN.info('Niepoprawna wartość - wymagana liczba z zakresu od 0 do 25.'@);
   _wyn:='OD'
|? __strwzn.TYP='A' & __strwzn.DO<0
|| FUN.info('Niepoprawna wartość - wymagana liczba z zakresu od 0 do 25.'@);
   _wyn:='DO'
|? __strwzn.TYP='A' & __strwzn.DO<__strwzn.OD
|| FUN.info('Wartość DO NR nie może być mniejsza od wartości OD NR.'@);
   _wyn:='DO'
|? __strwzo.TYP='A' & __strwzn.OD=0 & __strwzn.DO<>0
|| FUN.info('Wartość OD NR nie może być równa zero, gdy wartość DO NR jest różna od zera.'@);
   _wyn:='OD'
|? __strwzn.TYP='A' & __strwzn.DO>25
|| FUN.info('Wartość DO NR nie może być większa od 25.'@);
   _wyn:='DO'
?};
_wyn


\dropwzor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przeniesienie rekordu do okienka
::   WE: _a-1-dla oddawania atrybutow 2-dla przemieszczania atrybutow
::       [_b] - tryb domyślnie '' d&d, akcja: 'U','D','N','M'
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_b')=type_of('') & (';UDNM'*_b)>1 || _b || '' ?};

{? _a=1
|| __lstatr.cntx_psh();
   __strwzo.cntx_psh();
   _nr:={? __strwzo.last() || __strwzo.NR || 0 ?}+1;
   {? _tryb=''
   || _tab:=dnd_info('dropped_records')
   || {? __lstatr.sel_size()
      || _tab:=__lstatr.sel_aget();
         __lstatr.sel_adel()
      || _tab:=tab_tmp(1,'REF','INTEGER','');
         _tab.blank();
         _tab.REF:=#__lstatr.ref();
         _tab.add(1)
      ?}
   ?};
   {? _tab.size() & _tab.first() & FUN.ask('Czy dołączyć wybrane atrybuty do wzorca kodu?'@)
   || {!
      |? {? (__lstatr.clear; __lstatr.seek(_tab.REF,))
         || __strwzo.blank();
            __strwzo.NR:=_nr;
            __strwzo.LP:=__lstatr.LP;
            __strwzo.TYP:=__lstatr.TYP;
            __strwzo.ATR:=__lstatr.SYM;
            __strwzo.NP:={? __lstatr.TYP='A'
                         || 'A0B1C2D3E4F5G6H7I8J9K0L1M'
                         |? __lstatr.TYP='MGRU'
                         || 'MGRU'
                         |? __lstatr.TYP='MGRP'
                         || 'MGRP'
                         |? __lstatr.TYP='MGAT'
                         || 'MGAT'
                         |? __lstatr.TYP='MODM'
                         || 'MODM'
                         || '-' ?};
            __strwzo.WAR:={? __lstatr.TYP='A'
                          || '['+form(__lstatr.LP,,0,'99')+']'
                         |? __lstatr.TYP='MGRU'
                         || 'MGRU'
                         |? __lstatr.TYP='MGRP'
                         || 'MGRP'
                         |? __lstatr.TYP='MGAT'
                         || 'MGAT'
                         |? __lstatr.TYP='MODM'
                         || 'MODM'
                          || 'ss' ?};
            __strwzo.add(1);
            _nr+=1
         ?};
         _tab.next()
      !}
   ?};
   __lstatr.cntx_pop();
   __strwzo.cntx_pop()
|? _a=2
|| __strwzo.cntx_psh();
   {? _tryb=''
   || _ref:=dnd_info('dest_record');
      {? __strwzo.seek(_ref) || exec('zmien_lp','#dragdrop','NR',__strwzi) ?}
   || exec('zmien_lpa','#dragdrop','NR',__strwzi,,,_tryb)
   ?};
   __strwzo.cntx_pop()
?};
exec('po_wzat','mat_atr');
1


\dropwzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Peka [12.30] według [rr] [12.10]
:: OPIS: przeniesienie rekordu do okienka(wzorzec nazwy)
::   WE: _a-1-dla oddawania atrybutow 2-dla przemieszczania atrybutow
::       [_b] - tryb domyślnie '' d&d, akcja: 'U','D','N','M'
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_b')=type_of('') & (';UDNM'*_b)>1 || _b || '' ?};

{? _a=1
|| __lstatr.cntx_psh();
   __strwzn.cntx_psh();
   _res:=1;
   _nr:={? __strwzn.last() || __strwzn.NR || 0 ?}+1;
   {? _tryb=''
   || _tab:=dnd_info('dropped_records')
   || {? __lstatr.sel_size()
      || _tab:=__lstatr.sel_aget();
         __lstatr.sel_adel()
      || _tab:=tab_tmp(1,'REF','INTEGER','');
         _tab.blank();
         _tab.REF:=#__lstatr.ref();
         _tab.add(1)
      ?}
   ?};
   {? _tab.size() & _tab.first() & FUN.ask('Czy dołączyć wybrane atrybuty do wzorca nazwy?'@)
   || {!
      |? {? (__lstatr.clear; __lstatr.seek(_tab.REF,)) &
           {? __lstatr.SYM='<DOWOLNY NAPIS>'
                          || FUN.info('<DOWOLNY NAPIS> możliwy do użycia tylko we wzorcu kodu.'@);
                             {? __strwzn.size() || __strwzn.first() ?};
              _res:=0;
              _res
           || 1
           ?}
         || __strwzn.blank();
            __strwzn.NR:=_nr;
            __strwzn.LP:=__lstatr.LP;
            __strwzn.TYP:=__lstatr.TYP;
            __strwzn.ATR:=__lstatr.SYM;
            __strwzn.NP:={? __lstatr.TYP='A'
                         || 'A0B1C2D3E4F5G6H7I8J9K0L1M'
                         |? __lstatr.TYP='MGRU'
                         || 'MGRU'
                         |? __lstatr.TYP='MGRP'
                         || 'MGRP'
                         |? __lstatr.TYP='MGAT'
                         || 'MGAT'
                         |? __lstatr.TYP='MODM'
                         || 'MODM'
                         || '-' ?};
           __strwzn.WAR:={? __lstatr.TYP='A'
                         || '['+form(__lstatr.LP,,0,'99')+']'
                         |? __lstatr.TYP='MGRU'
                         || 'MGRU'
                         |? __lstatr.TYP='MGRP'
                         || 'MGRP'
                         |? __lstatr.TYP='MGAT'
                         || 'MGAT'
                         |? __lstatr.TYP='MODM'
                         || 'MODM'
                         || 'ss' ?};
            __strwzn.add(1);
            _nr+=1
         ?};
         _res & _tab.next()
      !}
   ?};
   __lstatr.cntx_pop();
   __strwzn.cntx_pop()
|? _a=2
|| __strwzn.cntx_psh();
   {? _tryb=''
   || _ref:=dnd_info('dest_record');
      {? __strwzn.seek(_ref) || exec('zmien_lp','#dragdrop','NR',__strwni) ?}
   || exec('zmien_lpa','#dragdrop','NR',__strwni,,,_tryb)
   ?};
   __strwzn.cntx_pop()
?};
exec('po_wznat','mat_atr');
1


\akt_wzor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: aktualizacja okienek
::----------------------------------------------------------------------------------------------------------------------
__strwzo.first();
__npwzor.first();
_bud:=POM.ATR_TYP='B';
grp_disp(__lstatr,__sellst);
grp_disp(__strwzo,__selwzo);
{? ~_bud || grp_disp(__npwzor,__sel_np) ?};
{? _bud
|| __strwzn.first();
::   __npwzn.first();
   grp_disp(__strwzn,__selwzn)
::   grp_disp(__npwzn,__sel_nw)
?};
~~


\poautonr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: po zmianie wartości pola AUTONR
::----------------------------------------------------------------------------------------------------------------------
{? ~M_ATR.AUTONR || M_ATR.AUTODL:=0 ?};
1


\poautodl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: po polu dlugosc
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? ~M_ATR.AUTONR
|| M_ATR.AUTODL:=0;
   1
|| exec('itsPositive','#field',1,'T')
?}


\bl_matr_matr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.30]
:: OPIS: Wartość początkowa dla domyślnego atrybutu dostawy w atrybutach materiału
::----------------------------------------------------------------------------------------------------------------------
M_ATR.M_ATR:=''


\bd_matr_matr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.30]
:: OPIS: Przed wyświetleniem wartości dla domyślnego atrybutu dostawy w atrybutach materiału
::----------------------------------------------------------------------------------------------------------------------
''


\be_matr_matr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.30]
:: OPIS: Przed edycją wartości dla domyślnego atrybutu dostawy w atrybutach materiału
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\f3_matr_matr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.30]
:: OPIS: Wyświetlenie słownika do wyboru wartości dla domyślnego atrybutu dostawy w atrybutach materiału
::----------------------------------------------------------------------------------------------------------------------
POMOC.TAT_M:='L';
__matr:=M_ATR.M_ATR;
M_ATR.cntx_psh();
M_ATR.index('TYP');
M_ATR.clear();
M_ATR.prefix('C');
_wer:=M_ATR.mk_sel('Schemat cechy dostawy'@,,0,'schematcdost');
M_ATR.win_fld(_wer,,'SYM',,,20,,1,'Symbol'@);
M_ATR.win_fld(_wer,,'NAZ',,,30,,1,'Nazwa cechy'@);
M_ATR.win_act(_wer,0,'Formuła','&Wybierz'@@,,,"sel_exit()",,1,0,,,'W');
M_ATR.win_sel(_wer);
M_ATR.find_le(__matr);
__matr:={? M_ATR.select(,1,5)
        || M_ATR.SYM
        || ''
        ?};
M_ATR.cntx_pop();
M_ATR.M_ATR:=&__matr


\ae_matr_matr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.30]
:: OPIS: Po edycji wartości dla domyślnego atrybutu dostawy w atrybutach materiału
::----------------------------------------------------------------------------------------------------------------------
{? +M_ATR.M_ATR
|| POMOC.TAT_M:='L';
   __matr:=M_ATR.M_ATR;
   M_ATR.cntx_psh();
   M_ATR.index('TYP');
   M_ATR.clear();
   M_ATR.prefix('C');
   {? ~M_ATR.find_key(__matr,)
   || _wer:=M_ATR.mk_sel('Schemat cechy dostawy'@,,0,'schematcdost');
      M_ATR.win_fld(_wer,,'SYM',,,20,,1,'Symbol'@);
      M_ATR.win_fld(_wer,,'NAZ',,,30,,1,'Nazwa cechy'@);
      M_ATR.win_act(_wer,0,'Formuła','&Wybierz'@@,,,"__matr:=M_ATR.SYM;sel_exit()",,1,0,,,'W');
      M_ATR.win_sel(_wer);
      M_ATR.find_le(__matr);
      __matr:={? M_ATR.select(,1,5)
              || M_ATR.SYM
              || ''
              ?}
   ?};
   M_ATR.cntx_pop();
   M_ATR.M_ATR:=&__matr
?};
1


\pr_fsym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed redakcja FSYM
::----------------------------------------------------------------------------------------------------------------------
{? M_ATR.TYP='C' & M_ATR.WZ='' || exec('fl_rodz','formula','>') || 0 ?}


\mat_atr_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: poprawa definicji atrybutow
::----------------------------------------------------------------------------------------------------------------------
_count:=M_ATR.count();
_edit:=M_ATR.win_edit('?');
_ok:=~_count;
{? ~_ok & FUN.ask('Definicja atrybutu została już wykorzystana.\n'
                  'Modyfikacje ograniczone.\n\n'
                  'Czy modyfikować?'@)
|| M_ATR.win_edit({? M_ATR.TYP='C' || 'RED_WZ' |? M_ATR.NOATR<>'T' || 'REDB_WZ' || 'REDB_WZX' ?});
   _ok:=2
?};
{? M_ATR.TYP='B' & _ok=1
|| {? M_ATR.ADD=2
   || M_ATR.efld_opt('REDB','enable=0',,'NOATR')
   || M_ATR.efld_opt('REDB','enable=1',,'NOATR')
   ?};
   {? M_ATR.NOATR='T'
   || M_ATR.efld_opt('REDB','mark=0',,'SL_01','NA')
   || M_ATR.efld_opt('REDB','mark=1',,'SL_01','NA')
   ?}
?};
{? _ok & M_ATR.edit("exec('rpom_atr','mat_atr')")
|| _mod:='N';
   _ll:=exec('il_atr','mat_atr');
   _ii:=0;
   {!
   |? _ii+=1;
      {? ($('M_ATR.MOD%1'[form(_ii,-2,0,'99')]))() || _mod:='T' ?};
      _mod='N' & _ii<_ll
   !};
   M_ATR.MOD:=_mod;
   {? M_ATR.put() || exec('editwg_a','mat_atr') ?}
?};
M_ATR.win_edit(_edit);
''


\rpom_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: rekord po dla M_ATR
::   WE: [_a] - 'add' / 'put' - dołączenie lub poprawa rekordu, pusty string oznacza wywołanie w systemie
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ctrl:={? var_pres('_a')=type_of('') & (+_a)=3
       || _a
       |? (1+menu_txt())='P'
       || 'put'
       || 'add'
       ?};
_wyn:='';
{? M_ATR.SYM=''
|| FUN.info('Należy podać symbol definicji atrybutów.'@);
   _wyn:='SYM'
|? ~exec('unikmatr','mat_atr',M_ATR.SYM,{? _ctrl='put' || M_ATR.ref() || null ?})
|| FUN.info('Symbol definicji atrybutów wykorzystywany już w definicji atrybutów dostaw lub indeksów.'@);
   _wyn:='SYM'
|? M_ATR.NOATR<>'T' & M_ATR.SL_01=null()
|| FUN.info('Dla definicji atrybutów wymagane jest zdefiniowanie pierwszego słownika.'@);
   _wyn:='SL_01'
|? M_ATR.NOATR<>'T' & (_kod:=exec('spojmatr','mat_atr'))<>''
|| FUN.info('Brak ciągłości definicji.'@);
   _wyn:=_kod
?};
{? _wyn='' & M_ATR.TYP='B'
|| exec('prwz_atr','mat_atr');
   exec('prnazatr','mat_atr')
|? _wyn='' & ~ATR.EDIT & M_ATR.EDIT
|| ATR.EDIT:=M_ATR.EDIT
?};
{? _wyn='' & _ctrl='add'
|| _mod:='N';
   _ll:=exec('il_atr','mat_atr');
   _ii:=0;
   {!
   |? _ii+=1;
      {? ($('M_ATR.MOD%1'[form(_ii,-2,0,'99')]))() || _mod:='T' ?};
      _mod='N' & _ii<_ll
   !};
   M_ATR.MOD:=_mod
?};
_wyn


\unikmatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Sprawdzenie unikalnosci kodu
::   WE: _a - kod do sprawdzenia
::       _b - ref aktualnego rekordu
::   WY: 1-unikalny 0-nie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? _a<>''
|| M_ATR.cntx_psh();
   M_ATR.index('SYM');
   M_ATR.prefix(_a,_a);
   {? M_ATR.first() & M_ATR.ref()<>_b || _wyn:=0 ?};
   M_ATR.cntx_pop()
|| _wyn:=0
?};
_wyn


\spojmatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: kontrola spojnosci definicji
::   WY: ''-jest OK lub kod pola niewypelnionego
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_nr:=0;
_i:=0;
{!
|? _i+=1;
   {? ($('M_ATR.SL_'+form(_i,-2,0,'99')))()<>null
   || {? (_nr+1)=_i
      || _nr:=_i;
         _i<10
      || _wyn:='SL_'+form(_nr+1,-2,0,'99');
         0
      ?}
   || _i<10
   ?}
!};
_wyn


\prwz_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed redakcja pola NAZ dla M_ATR
::----------------------------------------------------------------------------------------------------------------------
{? M_ATR.WZ=''
|| _i:=0;
   _wz:='';
   {!
   |? _i+=1;
      {? ($('M_ATR.SL_'+form(_i,-2,0,'99')))()<>null
      || _wz+='['+$_i+']';
         _i<10
      || 0
      ?}
   !};
   M_ATR.WZ:=_wz
?}


\editwg_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: ustawia ATR.EDIT
::  OLD: \editwg_a/win_ust.fml
::----------------------------------------------------------------------------------------------------------------------
:: 1. pobranie max. wartości pola M_ATR.EDIT

_tab:=sql('select max(EDIT) from M_ATR where TYP=\'C\'');

ATR.EDIT:={? _tab.first() || _tab[1]<>0 ||  0 ?};

obj_del(_tab);
~~


\mat_atr_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: usuwanie definicji atrybutow
::----------------------------------------------------------------------------------------------------------------------
_typ:=M_ATR.TYP;
{? _typ='B'
||
   _ndx:=M.ndx_tmp('',,'M_ATR_B',,)
||
   _ndx:=M.ndx_tmp('',,'M_ATR',,)
?};
M.cntx_psh();
M.index(_ndx);
M.prefix(M_ATR.ref);

{? {? _typ='B' || ~M_ATR.count() || M_ATR.count()=M.size() ?}
|| {? FUN.ask('Usunąć bieżący wiersz?'@)
   ||
      do();
      {? M.first()
      ||
         {!
         |?
            M.cntx_psh();
            {? _typ='B'
            || M.M_ATR_B:=null
            || M.M_ATR:=null
            ?};
            M.prefix();
            M.put(1);
            M.cntx_pop();
            M.first()
         !}
      ?};
      M_ATR.del();
      end()
   ?}
|| FUN.info('Definicja atrybutu została już wykorzystana. Usunięcie niemożliwe.'@)
?};
M.ndx_drop(_ndx);
M.cntx_pop();
''


\kopiaatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: kopiuje zastaw atrybutów
::  OLD: \kopiaatr/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=M_ATR.ref();
_new:=null;
M_ATR.cntx_psh();
DK_C.cntx_psh();
_win_ed:=M_ATR.win_edit('?');
M_ATR.win_edit('RED_KOP');
M_ATR.get();
{? M_ATR.TYP='B'
|| {? FUN.ask('Czy skopiować wzorzec?'@) || _opc:=1 || _opc:=0 ?}
|| _opc:=FUN.choice('Wybierz opcję kopiowania zestawu atrybutów.'@,,'Definicja struktury'@,'Z zestawami atrybutów'@)
?};
{? _opc & M_ATR.edit("exec('symb_atr','mat_atr')")
|| {? M_ATR.add(1)
   || _new:=M_ATR.ref();
      {? _opc=2
      || DK_C.cntx_psh();
         ODDZ.cntx_psh();
         ODDZ.index('KOD');
         ODDZ.prefix();
         {? ODDZ.first()
         || {!
            |? DK_C.use('dokce'+ODDZ.KOD+'__');
               DK_C.index('M_ATR');
               DK_C.prefix(_ref);
               {? DK_C.first()
               || {!
                  |? DK_C.cntx_psh();
                     DK_C.clear();
                     DK_C.M_ATR:=_new;
                     DK_C.SYM:=$DK_C.tm_stamp();
                     DK_C.add(1);
                     DK_C.cntx_pop();
                     DK_C.next()
                  !}
               ?};
               ODDZ.next()
            !}
         ?};
         DK_C.cntx_pop();
         ODDZ.cntx_pop()
      ?}
   ?}
?};
M_ATR.win_edit(_win_ed);
M_ATR.win_patt(_win_ed);
M_ATR.cntx_pop();
DK_C.cntx_pop();
{? _new<>null || M_ATR.seek(_new) ?};
~~


\symb_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: kontrola podanego symbolu zestawu atrybutów
::   WY: ''-OK 'SYM'-blad
::  OLD: \symb_atr/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_sym:=M_ATR.SYM;
{? _sym=''
|| FUN.info('Należy podać symbol zestawu atrybutów.'@);
   _wyn:='SYM'
|? _sym<>'' & exec('FindInSet','#table','M_ATR','SYM',_sym,_sym)<>null
|| FUN.info('Podany symbol zestawu już istnieje. Należy podać inny.'@);
   _wyn:='SYM'
?};
_wyn


\tat_blank_nr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Wartosc poczatkowa pola TAT.NR
::  OLD: \tat_blank_nr/atrybuty.fml
::----------------------------------------------------------------------------------------------------------------------
0


\pwtyptat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed wyświetleniem pola TAT.TYP
::----------------------------------------------------------------------------------------------------------------------
{? TAT.TYP='S' | ('TP'*TAT.W_PORTAL>0 & 'TL'*TAT.TYP>0)
|| _enable:='enable=1'
|| _enable:='enable=0'
?};
TAT.efld_opt('RED',_enable,,'SLU');
TAT.efld_opt('REDO',_enable,,'SLU');
TAT.efld_opt('REDOWP',_enable,,'SLU');
{? TAT.win_edit('?')='REDO'
|| {? exec('prprectat','mat_atr')
   || TAT.efld_opt('REDO','enable=1',,'TSEP');
      TAT.efld_opt('REDO','enable=1',,'PREC')
   || TAT.efld_opt('REDO','enable=0',,'TSEP');
      TAT.efld_opt('REDO','enable=0',,'PREC')
   ?};
   {? exec('prudtat','mat_atr')
   || TAT.efld_opt('REDO','enable=1',,'UD_SCH')
   || TAT.efld_opt('REDO','enable=0',,'UD_SCH')
   ?}
|? TAT.win_edit('?')='REDOWP'
|| {? TAT.TYP='L'
   || TAT.efld_opt('REDOWP','enable=1',,'CZY_PREC')
   || TAT.efld_opt('REDOWP','enable=0',,'CZY_PREC')
   ?}
?};
''


\prtyptat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.30]
:: OPIS: przed redakcja pola TAT.TYP
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? ((-menu_txt())='popraw')
||
   {? TAT.W_PORTAL='S'
   || _wyn:=0
   || _buf:=obj_new(@.CLASS.BUFFER, 'TAT');
      _wyn:=TAT.count()=0;
      _buf.restore();
      {? _wyn=0 || FUN.info('Atrybut wykorzystywany, zmiana typu wartości niedozwolona.'@) ?}
   ?}
?};

{? _wyn || __typtat:=TAT.TYP ?};
_wyn


\potyptat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: po redakcji pola TAT.TYP
::----------------------------------------------------------------------------------------------------------------------
{? TAT.TYP<>'S' || TAT.SLU:=null ?};
{? TAT.TYP<>'U' || TAT.UD_SCH:=null ?};
win_disp();
1


\pwslutyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed wyświetleniem pola TAT.SLU
::----------------------------------------------------------------------------------------------------------------------
~~


\prslutat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10] WW [12.30]
:: OPIS: przed redakcja pola TAT.SLU
::   WY: 1-pozwala 0-nie wolno
::----------------------------------------------------------------------------------------------------------------------
{? 'TPs'*TAT.W_PORTAL>0
|| PORSLO.win_sel('WER');
   PORSLO.win_edit('RED');
   PorSloW:=1
?};
((TAT.TYP='S') | ('TPSs'*TAT.W_PORTAL>0 & TAT.TYP='T')) &
{? (-menu_txt())='popraw'
|| _buf:=obj_new(@.CLASS.BUFFER, 'TAT');
   _odp:=TAT.count()=0;
   _buf.restore();
   _odp
|| 1
?}


\arslutat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.30]
:: OPIS: Po redakcji TAT.SLU
::----------------------------------------------------------------------------------------------------------------------
{? TAT.SLU<>null() || TAT.UD_SCH:=null() ?};
~~


\tat_wymcz_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.30]
:: OPIS: Wartosc poczatkowa pola TAT.WYMCZ
::   WY: 0 / 1 - czy wolno
::  OLD: \tat_wymcz_bl/atrybuty.fml
::----------------------------------------------------------------------------------------------------------------------
::nie mozna redagowac, gdy TAT nalezy do ROZMP
ZNORMAT.ATROSO


\tat_wymcz_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed redagowaniem pola TAT.WYMCZ
::   WY: 0 / 1 - czy wolno
::  OLD: \tat_wymcz_be/atrybuty.fml
::----------------------------------------------------------------------------------------------------------------------
::nie mozna redagowac, gdy TAT nalezy do ROZMP
{? (-menu_txt())<>'dołącz'
||
   ROZMP.cntx_psh();
   ROZMP.index('TAT');
   ROZMP.prefix(TAT.ref());
   _odp:=~ROZMP.first();
   ROZMP.cntx_pop();
   {? _odp=1 & ZNORMAT.ATROSO='T'
   || _odp:=0
   ?};
   _odp
|| {? ZNORMAT.ATROSO='T'
   || 0
   || 1
   ?}
?}


\pwudtyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.30]
:: OPIS: Przed wyswietleniem TAT.UD_SCH
::----------------------------------------------------------------------------------------------------------------------
{? TAT.TYP=''
|| TAT.cntx_psh();
   TAT.get();
   _typ:=TAT.TYP;
   TAT.cntx_pop()
|| _typ:=TAT.TYP
?};
{? _typ='U'
|| ''
|| exec('findfnv','#color')
?}


\prudtat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.30]
:: OPIS: przed redakcja pola TAT.UD_SCH
::   WY: 1-pozwala 0-nie wolno
::----------------------------------------------------------------------------------------------------------------------
{? (-menu_txt())='popraw'
|| _buf:=obj_new(@.CLASS.BUFFER, 'TAT');
   _odp:=TAT.count()=0;
   _buf.restore();
   _odp
|| 1
?}
&
{? TAT.TYP='U'
|| UD_SCH.clear();
   UD_SCH.win_dict('WYB_KON');
   1
|| 0
?}


\arudtat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.30]
:: OPIS: Po redakcji TAT.UD_SCH
::----------------------------------------------------------------------------------------------------------------------
{? TAT.UD_SCH<>null() || TAT.SLU:=null() ?};
~~


\pwprectat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [BZ] [12.41]
:: OPIS: Przed wyswietleniem pola TAT.PREC
::----------------------------------------------------------------------------------------------------------------------
_edit:=(1+cur_kwin())='e';
_wyn:='';
{? ~_edit
|| TAT.cntx_psh();
   TAT.get()
?};
{? TAT.TYP<>'L' || _wyn:=exec('findfnv','#color') ?};
{? ~_edit
|| TAT.cntx_pop()
?};
_wyn


\prprectat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [BZ] [12.41]
:: OPIS: przed redakcja pola TAT.PREC i TAT.TSEP
::   WY: 1-pozwala 0-nie wolno
::----------------------------------------------------------------------------------------------------------------------
(TAT.TYP='L') &
{? (-menu_txt())='popraw'
|| _buf:=obj_new(@.CLASS.BUFFER, 'TAT');
   _odp:=TAT.count()=0;
   _buf.restore();
   _odp
|| 1
?}


\pwtseptat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [BZ] [12.41]
:: OPIS: Przed wyswietleniem pola TAT.TSEP
::----------------------------------------------------------------------------------------------------------------------
_edit:=(1+cur_kwin())='e';
_wyn:='';
{? ~_edit
|| TAT.cntx_psh();
   TAT.get()
?};
{? TAT.TYP<>'L' || _wyn:=0 ?};
{? ~_edit
|| TAT.cntx_pop()
?};
_wyn


\tat_f_rfresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: odzwiezenie filtra po redakcji TAT
::  OLD: \tat_f_rfresh/atrybuty.fml
::----------------------------------------------------------------------------------------------------------------------
{? TAT.f_active() || TAT.f_rfresh ?};
~~


\tat_po_dol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: po dolacz w TAT
::  OLD: \tat_po_dol/atrybuty.fml
::----------------------------------------------------------------------------------------------------------------------
exec('tat_f_rfresh','mat_atr');
~~


\tat_prp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2006]
:: OPIS: przed 'Popraw' w TAT
::   WY: 1 - jak nie ma powiązań
::       0 - wpp
::  OLD: \tat_prp/atrybuty.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
UAT.cntx_psh();
UAT.index('TYP');
UAT.prefix(TAT.ref());
{? UAT.first()
|| FUN.info('Typ już wykorzystywany — nie można poprawić.'@);
   _res:=0
?};
UAT.cntx_pop();
_res


\tat_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2006]
:: OPIS: po 'Popraw' w TAT
::  OLD: \tat_pop/atrybuty.fml
::----------------------------------------------------------------------------------------------------------------------
exec('tat_f_rfresh','mat_atr');
~~


\tat_pr_usu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Rafal Slotwinski [2010]
:: OPIS: Sprawdzenie czy mozna usunac element tabeli TAT
::  OLD: \tat_pr_usu/atrybuty.fml
::----------------------------------------------------------------------------------------------------------------------
_ttab:=TAT.testlink(0,TAT.count());
{? _ttab.first()
|| FUN.info('Wybrany atrybut jest wykorzystywany w systemie.\nUsunięcie niemożliwe.'@);
   return(0)
?};
~~


\tat_po_usu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: po usun w TAT
::  OLD: \tat_po_usu/atrybuty.fml
::----------------------------------------------------------------------------------------------------------------------
exec('tat_f_rfresh','mat_atr');
~~


\tat_rkpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: 'Rekord po' w oknie selekcji TAT
::   WE: [_a] - 'add' / 'put' - dołączenie lub poprawa rekordu, pusty string oznacza wywołanie w systemie
::  OLD: \tat_rkpo/atrybuty.fml
::----------------------------------------------------------------------------------------------------------------------
_ctrl:={? var_pres('_a')=type_of('') & (+_a)=3
       || _a
       |? -menu_txt()='popraw'
       || 'put'
       || 'add'
       ?};
_wyn:='';
{? form(TAT.NA)=''
|| FUN.info('Należy podać nazwę atrybutu.'@);
   _wyn:='NA'
|? TAT.OPIS='' & TAT.W_PORTAL<>'N'
|| FUN.info('Należy podać opis atrybutu.'@);
   _wyn:='OPIS'
|? TAT.TYP='U' & TAT.UD_SCH=null
|| FUN.info('Należy wskazać schemat struktury.'@);
   _wyn:='UD_SCH'
|? TAT.TYP='P' & TAT.WYMCZ='T'
|| FUN.info('Atrybut typu \'Partia\' nie może dotyczyć osoby.'@);
   _wyn:='TYP'
||
:: sprawdzenie czy dodawany wpis nie koliduje w indeksach unikalnych
   {? _ctrl='put'
   || _ttab:=sql('select * from TAT where TAT.REFERENCE<>:_b and NA=\':_a\'',TAT.NA,TAT.ref())
   || _ttab:=sql('select * from TAT where NA=\':_a\'',TAT.NA)
   ?};

   {? _ttab.first()
   || {? ZNORMAT.ATROSO<>'T'
      || _txt:='Nazwa musi być unikalna.'@
      || _txt:='Nazwa musi być unikalne dla wszystkich\n atrybutów (dotyczących i niedotyczących osoby).'@
      ?};
      FUN.info(_txt);
      _wyn:='NA'
   |? TAT.TYP='S'
   || {? TAT.SLU=null()
      || FUN.info('Należy wskazać słownik.'@);
         _wyn:='SLU'
      ?}
   ?};

   _pow:=0;
   _tab:=tab_tmp(,'SYM','STRING[20]','Symbol atrybutu'@);
   _tab.win_sel(_tab.mk_sel('Lista atrybutów, w których wystąpi podwojenie atrybutów o typie Partia'@,,1));
   {? _wyn='' & _ctrl='put'
   || {? TAT.TYP='P'
      || _reftat:=TAT.ref();
         _atrtab:=TAT.testlink();
         {? _atrtab.first()
         || {!
            |?
               {? _atrtab.TABELA='M_ATR'
               ||
                  TAT.cntx_psh();
                  M_ATR.cntx_psh();
                  M_ATR.clear();
                  {? M_ATR.seek(_atrtab.REF,)
                  || _il:=0;
                     {! _i:=1.. exec('il_atr','mat_atr') |!
                        _pole:='SL_'+form(_i,-2);
                        {? ($(('M_ATR.'+_pole+'().TYP')))()='P' & ($(('M_ATR.'+_pole)))()<>_reftat
                        || _il+=1
                        ?}
                     !};
                     {? _il>0 || _tab.SYM:=M_ATR.SYM; _tab.add() ?}
                  ?};
                  M_ATR.cntx_pop();
                  TAT.cntx_pop()
               ?};
               _atrtab.next()
            !}
         ?};
         {? _tab.first()
         || FUN.info('Nie można zmienić typu na Partia,\n'
                     'ponieważ dla atrybutu dostaw wystąpi podwojenie atrybutu typu Partia.'@);
            _tab.select();
            _wyn:='TYP'
         ?}
      ?}
   ?}
?};
_wyn


\disp_tat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: rekord przed dla TAT
::----------------------------------------------------------------------------------------------------------------------
TAT.get();
TAT.display();
~~


\be_atr_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: formula przed wyswietleniem dla wartosci atrybutu
::   WE: [_a] - STRING - akronim pola ktoremu sprawdzic redagowalnosc, domyslnie cur_afld
::   WY: czy mozna edytowac pole
::----------------------------------------------------------------------------------------------------------------------
_field:='';
{? var_pres('_a')=type_of('')
|| _field:=_a
|| _field:=cur_afld()
?};

_wyn:=0;
{? {? ATR.MOD || ($('M_ATR.MOD'+(_field+2)))() || 1 ?}
 & (ATR.FLAG | ATR.FLAG_ED=2)
 & {? ATR.MJS='ZK_P' & ZK_P.REZ & ZK_P.DOR>0 || 0 || 1 ?}
|| _acr:='SL_'+(_field+2);
   _wyn:=($('M_ATR.'+_acr))()<>null();

   {? _wyn>0
   ||
::    Obsluga partii zlecenia:
::    1. Jezeli partia wybrana na dokumencie to jej nie redaguje
::    2. Jezeli atrybut redagowany na zleceniu to partii nie redaguje
::    3. Jezeli atrybut redagowany na surowcu technologicznym to go nie redaguje
      _rule_chk:=$('M_ATR.'+_acr+'().TYP');
      _rule_sym:=$('ATR.'+_field);
      {? _rule_chk()='P' & ATR.FLAG_PAR=1 & (ATR.ZPARN_DK<>null() | ATR.ZL<>null() | ATR.FLAG_TEX)
      || _wyn:=0
      ?};
      {? _wyn>0 & _rule_chk()='P' & (';ZL;ZLIM;TMAT;TCHMAT;'*ATR.MJS)
      || _wyn:=0
      ?}
   ?};
   {? _wyn>0 & (';TMAT;TCHMAT'*ATR.MJS)>1
   ||
::    Obsluga surowcow w technologii - jesli zaznaczony ptaszek dziedziczenia wartosci atrybutu
::    z produktu zlecenia to nie redaguje tej wartosci
      _rule_get:=$('ATR.ZL_WAR'+(_field+2));
      {? (ATR.FLAG_TEX=1 | ATR.FLAG_ED=2) & _rule_get()='T'
      || _wyn:=0
      ?}
   ?};
   {? _wyn>0 & ATR.MJS='TR_ZLM' & var_pres('__nowar')=type_of('') & +__nowar
   || _wyn:=(1+(((#(_field+2))-1)-__nowar))<>'-'
   ?};
   {? _wyn>0 & ATR.MJS='ZPARN'
    & (($('M_ATR.%1().TYP'[_acr]))()='P'
     | ($('ZPARN.ZL().DK_C().WAR%1'[(_field+2)]))()<>'')
   || _wyn:=0
   ?};
   {? _wyn>0 & ATR.MJS='ZL' & ~exec('ctrlPOWzparn','mat_atr',_field+2)
   || _wyn:=0
   ?}
?};
_wyn


\bl_dk_c_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: ustawienie zestawu atrybutow dla DK_C
::   WY: M_ATR.ref
::----------------------------------------------------------------------------------------------------------------------
ATR.M_ATR


\bl_uzup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: wartość początkowa pola UZUP
::----------------------------------------------------------------------------------------------------------------------
ATR.UZUP


\blkoddkc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: wartość początkowa pola DK_C.KOD
::----------------------------------------------------------------------------------------------------------------------
''


\buffer
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Zwraca tablice nazwana - bufor wartosci atrybutow
::
::   WY: obj_new() - tablica nazwana
::
::       ----- Pola -------
::       WAR01..WAR10 - wartosci atrybutow
::       TAT01..TAT10 - typy atrybutow
::       TAT_NA01..TAT_NA10 - nazwy atrybutow
::       M_ATR - M_ATR.ref()
::
::       ----- Metody -----
::       .blank() - inicjuje wartosci pol WARxx
::       .is_empty() - sprawdza czy bufor zawiera jakies niepuste wartosci
::       .all_set() - sprawdza czy bufor jest w całości wypełniony
::       .get_atr() - pobiera wartosci atrybutow ze zmiennej ATR
::       .set_atr() - ustawia wartosci atrybutow do zmiennej ATR
::       .get_dkc() - pobiera definicje i wartosci atrybutow z aktualnego DK_C
::       .set_dkc() - ustawia wartosci atrybutow aktualnemu DK_C
::       .get_sc() - pobiera definicje i wartosci atrybutow z aktualnego SC
::       .set_sc() - ustawia wartosci atrybutow aktualnemu SC
::       .get_m() - pobiera definicje i wartosci atrybutow z aktualnego M
::       .set_m() - ustawia wartosci atrybutow aktualnemu M
::       .get_matr() - pobiera definicje atrybutow z aktualnego M_ATR
::       .set_tab(_tab) - ustawia wartosci atrybutow przekazanej tabeli - tabela MUSI MIEĆ pola WARxx typu string
::       .compare(buffer,0/1) - porownuje wartosci WARxx z przekazanym buforem, zwraca 1 jesli sa takie same
::                              lub wartosc ujemna wskazujaca pierwsza rozna wartosc.
::                              Parametr _b okresla czy ignorowac puste wartosci w _buffer
::
::       .merge(buffer) - scala wartosci z dwoch buforow
::       .inherit(buffer,'TTNN------') - dziedziczy wartosci z przekazanego bufora, o ile
::                                       przekazana maska tak specyfikuje. Przekazany bufor moze
::                                       miec inna strukture (wartosci sa szukane wg typow)
::       .has_part() - zwraca 0/1 - czy dany bufor zawiera wartosc typu 'partia'
::       .can_part() - zwraca 0/1 - czy dany bufor będzie mógł zawierać wartosc typu 'partia' (czy ma w typie partię)
::       .set_part(_zparn) - ustawia buforowi atrybut typu partia na przekazany w argumencie _a. Zwraca 0/1 w zależności
::                           od tego czy bufor miał arybut typu partia
::       .clear_part() - czyści wartość buforowi dla atrybutów typu partia
::       .has_tat(_tat_na) - zwraca 0/numer - czy dany bufor zawiera atrybut o nazwie _tat_na - zwraca numer atrybutu
::       .war(_tat_na) - pobiera wartosc atrybutu o podanej nazwie, jezeli nie wystepuje, to pusty tekst
::                       UWAGA: jezeli jest kilka atrybutow o tej samej nazwie, pobrana zostanie wartosc
::                              z atrybutu o najwyzszym numerze!
::       .clr4msk('TTNN------') - czysci wartosci w buforze, ktore wg przekazanej maski
::                                maja cos innego niz 'T'
::       .count() - zwraca liczbę atrybutów do wypełnienia
::----------------------------------------------------------------------------------------------------------------------
_buffer:=obj_new( 'NUM_MAX'
::                POLA
                  ,'WAR01'
                  ,'WAR02'
                  ,'WAR03'
                  ,'WAR04'
                  ,'WAR05'
                  ,'WAR06'
                  ,'WAR07'
                  ,'WAR08'
                  ,'WAR09'
                  ,'WAR10'
                  ,'TAT01'
                  ,'TAT02'
                  ,'TAT03'
                  ,'TAT04'
                  ,'TAT05'
                  ,'TAT06'
                  ,'TAT07'
                  ,'TAT08'
                  ,'TAT09'
                  ,'TAT10'
                  ,'TAT_NA01'
                  ,'TAT_NA02'
                  ,'TAT_NA03'
                  ,'TAT_NA04'
                  ,'TAT_NA05'
                  ,'TAT_NA06'
                  ,'TAT_NA07'
                  ,'TAT_NA08'
                  ,'TAT_NA09'
                  ,'TAT_NA10'
                  ,'M_ATR'

::                METODY
                  ,'blank'
                  ,'is_empty'
                  ,'all_set'
                  ,'get_atr'
                  ,'set_atr'
                  ,'get_dkc'
                  ,'set_dkc'
                  ,'set_tab'
                  ,'get_sc'
                  ,'set_sc'
                  ,'get_m'
                  ,'set_m'
                  ,'get_matr'
                  ,'compare'
                  ,'merge'
                  ,'inherit'
                  ,'has_part'
                  ,'can_part'
                  ,'set_part'
                  ,'clear_part'
                  ,'has_tat'
                  ,'war'
                  ,'clr4msk'
                  ,'count'
                );

_max:=10;
_buffer.NUM_MAX:=_max;

_buffer.blank:='';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.blank+='.WAR'+_fit+':=\'\';\n';
   _buffer.blank+='.TAT'+_fit+':=null();\n';
   _buffer.blank+='.TAT_NA'+_fit+':=\'\';\n'
!};
_buffer.blank:=$(_buffer.blank+'~~');

_buffer.get_atr:='';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.get_atr+='.WAR'+_fit+':=ATR.WAR'+_fit+';\n'
!};
_buffer.get_atr:=$(_buffer.get_atr+'~~');

_buffer.set_atr:='';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.set_atr+='ATR.WAR'+_fit+':=.WAR'+_fit+';\n'
!};
_buffer.set_atr:=$(_buffer.set_atr+'~~');

_buffer.get_dkc:='';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.get_dkc+='.WAR'+_fit+':=DK_C.WAR'+_fit+';\n';
   _buffer.get_dkc+='.TAT'+_fit+':=DK_C.M_ATR().SL_'+_fit+';\n';
   _buffer.get_dkc+='.TAT_NA'+_fit+':=DK_C.M_ATR().SL_'+_fit+'().NA;\n'
!};
_buffer.get_dkc+='.M_ATR:=DK_C.M_ATR;\n';
_buffer.get_dkc:=$(_buffer.get_dkc+'~~');

_buffer.set_dkc:='';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.set_dkc+='DK_C.WAR'+_fit+':=.WAR'+_fit+';\n'
!};
_buffer.set_dkc:=$(_buffer.set_dkc+'~~');

_buffer.get_sc:='';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.get_sc+='.WAR'+_fit+':=SC.WAR'+_fit+';\n';
   _buffer.get_sc+='.TAT'+_fit+':=SC.DK_C().M_ATR().SL_'+_fit+';\n';
   _buffer.get_sc+='.TAT_NA'+_fit+':=SC.DK_C().M_ATR().SL_'+_fit+'().NA;\n'
!};
_buffer.get_sc+='.M_ATR:=SC.DK_C().M_ATR;\n';
_buffer.get_sc:=$(_buffer.get_sc+'~~');

_buffer.set_sc:='';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.set_sc+='SC.WAR'+_fit+':=.WAR'+_fit+';\n'
!};
_buffer.set_sc:=$(_buffer.set_sc+'~~');

_buffer.get_m:='';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.get_m+='.WAR'+_fit+':=M.WAR'+_fit+';\n';
   _buffer.get_m+='.TAT'+_fit+':=M.M_ATR().SL_'+_fit+';\n';
   _buffer.get_m+='.TAT_NA'+_fit+':=M.M_ATR().SL_'+_fit+'().NA;\n'
!};
_buffer.get_m+='.M_ATR:=M.M_ATR;\n';
_buffer.get_m:=$(_buffer.get_m+'~~');

_buffer.set_m:='';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.set_m+='M.WAR'+_fit+':=.WAR'+_fit+';\n'
!};
_buffer.set_m:=$(_buffer.set_sc+'~~');

_buffer.get_matr:='';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.get_matr+='.TAT'+_fit+':=M_ATR.SL_'+_fit+';\n';
   _buffer.get_matr+='.TAT_NA'+_fit+':=M_ATR.SL_'+_fit+'().NA;\n'
!};
_buffer.get_matr+='.M_ATR:=M_ATR.ref();\n';
_buffer.get_matr:=$(_buffer.get_matr+'~~');

_buffer.set_tab:='';
_buffer.set_tab+='_tab:=_a;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.set_tab+='_tab.WAR'+_fit+':=.WAR'+_fit+';\n'
!};
_buffer.set_tab:=$(_buffer.set_tab+'~~');

_buffer.compare:='';
_buffer.compare+='_buffer:=_a;\n';
_buffer.compare+='_ignore:=0;\n';
_buffer.compare+='{? var_pres(\'_b\')=type_of(0) || _ignore:=_b ?};\n';
_buffer.compare+='_result:=1;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.compare+='{? _result>0\n';
   _buffer.compare+='||\n';
   _buffer.compare+='   {? _ignore=0\n';
   _buffer.compare+='   || {? .WAR'+_fit+'<>_buffer.WAR'+_fit+' || _result:='+$(_it*-1)+' ?}\n';
   _buffer.compare+='   || {? _buffer.WAR'+_fit+'<>\'\' & .WAR'+_fit+'<>_buffer.WAR'+_fit+' || _result:='+$(_it*-1)+' ?}\n';
   _buffer.compare+='   ?}\n';
   _buffer.compare+='?};\n'
!};
_buffer.compare:=$(_buffer.compare+'_result');

_buffer.is_empty:='';
_buffer.is_empty+='_result:=1;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.is_empty+='{? _result=1 & .WAR'+_fit+'<>\'\' || _result:=0 ?};\n'
!};
_buffer.is_empty:=$(_buffer.is_empty+'_result');

_buffer.all_set:='';
_buffer.all_set+='_result:=1;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.all_set+='_tat:=.TAT'+_fit+';\n';
   _buffer.all_set+='{? _tat<>null()\n';
   _buffer.all_set+='|| {? .WAR'+_fit+'=\'\' || _result:=0 ?}\n';
   _buffer.all_set+='?};\n'
!};
_buffer.all_set:=$(_buffer.all_set+'_result');

_buffer.merge:='';
_buffer.merge+='_buffer:=_a;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.merge+='{? _buffer.WAR'+_fit+'<>\'\'\n';
   _buffer.merge+='|| .WAR'+_fit+':=_buffer.WAR'+_fit+'\n';
   _buffer.merge+='|? .WAR'+_fit+'=\'\'\n';
   _buffer.merge+='|| .WAR'+_fit+':=_buffer.WAR'+_fit+'\n';
   _buffer.merge+='?};\n'
!};
_buffer.merge:=$(_buffer.merge+'~~');

_buffer.has_part:='';
_buffer.has_part+='_result:=0;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.has_part+='_tat:=.TAT'+_fit+';\n';
   _buffer.has_part+='_typ:=exec(\'FindAndGet\',\'#table\',TAT,_tat,,\"TYP\",\'\');\n';
   _buffer.has_part+='{? _result=0 & _typ=\'P\'\n';
   _buffer.has_part+='|| {? .WAR'+_fit+'<>\'\' || _result:=1 ?}\n';
   _buffer.has_part+='?};\n'
!};
_buffer.has_part:=$(_buffer.has_part+'_result');

_buffer.can_part:='';
_buffer.can_part+='_result:=0;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.can_part+='_tat:=.TAT'+_fit+';\n';
   _buffer.can_part+='_typ:=exec(\'FindAndGet\',\'#table\',TAT,_tat,,\"TYP\",\'\');\n';
   _buffer.can_part+='{? _result=0 & _typ=\'P\'\n';
   _buffer.can_part+='|| _result:=1\n';
   _buffer.can_part+='?};\n'
!};
_buffer.can_part:=$(_buffer.can_part+'_result');

_buffer.set_part:='';
_buffer.set_part+='_zparn:=_a;\n';
_buffer.set_part+='_zparn_sym:=exec(\'FindAndGet\',\'#table\',ZPARN,_zparn,,\"SYM\",\'\');\n';
_buffer.set_part+='_result:=0;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.set_part+='_tat:=.TAT'+_fit+';\n';
   _buffer.set_part+='_typ:=exec(\'FindAndGet\',\'#table\',TAT,_tat,,\"TYP\",\'\');\n';
   _buffer.set_part+='{? _typ=\'P\'\n';
   _buffer.set_part+='|| .WAR'+_fit+':=_zparn_sym;\n';
   _buffer.set_part+='   _result:=1\n';
   _buffer.set_part+='?};\n'
!};
_buffer.set_part:=$(_buffer.set_part+'_result');

_buffer.clear_part:='';
_buffer.clear_part+='_result:=~~;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.clear_part+='_tat:=.TAT'+_fit+';\n';
   _buffer.clear_part+='_typ:=exec(\'FindAndGet\',\'#table\',TAT,_tat,,\"TYP\",\'\');\n';
   _buffer.clear_part+='{? _typ=\'P\'\n';
   _buffer.clear_part+='|| .WAR'+_fit+':=\'\'\n';
   _buffer.clear_part+='?};\n'
!};
_buffer.clear_part:=$(_buffer.clear_part+'_result');

_buffer.has_tat:='';
_buffer.has_tat+='_tat_na:=_a;\n';
_buffer.has_tat+='_result:=0;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.has_tat+='{? _tat_na=.TAT_NA'+_fit+' || _result:='+$_it+' ?};\n'
!};
_buffer.has_tat:=$(_buffer.has_tat+'_result');

_buffer.war:='';
_buffer.war+='_tat_na:=_a;\n';
_buffer.war+='_result:=\'\';\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.war+='{? _tat_na=.TAT_NA'+_fit+' || _result:=.WAR'+_fit+' ?};\n'
!};
_buffer.war:=$(_buffer.war+'_result');

_buffer.inherit:="
   _parent:=_a;
   _mask:=_b;
   {! _it:=1..(.NUM_MAX)
   |!
      _fit:=form(_it,-2,0,'99');
      _char:=1+((_it-1)-_mask);
      {? _char='T'
      ||
::       W przekazanym buforze znajduje typ odpowiadajacy aktualnie przetwarzanemu atrybutowi
::       i pobieram wartosc z typu
         _my_tat:=($('.TAT'+_fit))();
         _par_val:='';
         {? _my_tat<>null()
         ||
            {! _it2:=1..(.NUM_MAX)
            |? _par_val=''
            |! _fit2:=form(_it2,-2,0,'99');
               _par_tat:=($('_parent:=_a;_parent.TAT'+_fit2))(_parent);
               {? _par_tat<>null() & _par_tat=_my_tat
               ||
                  _par_val:=($('_parent:=_a;_parent.WAR'+_fit2))(_parent)
               ?}
            !}
         ?};
::       Przypisuje wartosc do siebie
         {? _par_val<>''
         || _rule_set:=$('_buffer:=_a;_buffer.WAR'+_fit+':=_b');
            _rule_set(.,_par_val)
         ?}
      ?}
   !};
   ~~
";

_buffer.clr4msk:='';
_buffer.clr4msk+='_mask:=_a;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.clr4msk+='{? 1+(('+$_it+'-1)-_mask)<>\'T\'\n';
   _buffer.clr4msk+='|| \n';
   _buffer.clr4msk+='\t.WAR'+_fit+':=\'\';\n';
   _buffer.clr4msk+='\t.TAT'+_fit+':=null()\n';
   _buffer.clr4msk+='?};\n'
!};
_buffer.clr4msk:=$(_buffer.clr4msk+'~~');

_buffer.count:='';
_buffer.count+='_result:=0;\n';
{! _it:=1.._max
|! _fit:=form(_it,-2,0,'99');
   _buffer.count+='_tat:=.TAT'+_fit+';\n';
   _buffer.count+='{? _tat<>null()\n';
   _buffer.count+='|| _result+=1\n';
   _buffer.count+='?};\n'
!};
_buffer.count:=$(_buffer.count+'_result');

_buffer.blank();
_buffer


\czytadkc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: podczytuje DK_C
::   WE  _a - pole ref DK_C
::       _b - wartość pola RDKC
::   WY: 1-wg M_ATR 0-bez wzorca
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
:: zerowanie i podczytanie wartosci zmiennych
ATR.SYMDK_C:='';
ATR.KOD:='';
{! _i:=1.. exec('il_atr','mat_atr') |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !};
{? _a=null || ATR.M_ATR:=null(); M_ATR.blank() || DK_C.M_ATR().SYM ?};

{? _a<>null
|| DK_C.cntx_psh();
   _name:=ref_name(_a);
   {? _name<>'' & _name<>DK_C.name() || DK_C.use(_name) ?};
   DK_C.clear();
   {? DK_C.seek(_a)
   || _wyn:=DK_C.M_ATR<>null;
      ATR.M_ATR:=DK_C.M_ATR;
      DK_C.M_ATR().SYM;
      ATR.SYMDK_C:=DK_C.SYM;
      ATR.KOD:=DK_C.KOD;
      {! _i:=1.. exec('il_atr','mat_atr') |! ($('ATR.WAR'+form(_i,-2,0,'99')))():=($('DK_C.WAR'+form(_i,-2,0,'99')))() !}
   ?};
   DK_C.cntx_pop()
|? _b<>''
|| _msk:=DK_C.name();
   DK_C.cntx_psh();
   DK_C.use(form(8+_b));
   DK_C.clear();
   {? DK_C.seek(_b)
   || _wyn:=DK_C.M_ATR<>null;
      ATR.M_ATR:=DK_C.M_ATR;
      DK_C.M_ATR().SYM;
      ATR.SYMDK_C:=DK_C.SYM;
      ATR.KOD:=DK_C.KOD;
      {! _i:=1..exec('il_atr','mat_atr') |! ($('ATR.WAR'+form(_i,-2,0,'99')))():=($('DK_C.WAR'+form(_i,-2,0,'99')))() !}
   ?};
   DK_C.use(_msk);
   DK_C.cntx_pop()
|? ATR.M_ATR<>null()
|| ATR.M_ATR().SYM
?};
_wyn


\rozm_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: zwraca rozmiar M_ATR - ile atrybutów
::   WE: _a - ref M_ATR
::   WY: liczba atrybutów
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
M_ATR.cntx_psh();
M_ATR.clear();
{? M_ATR.seek(_a)
|| {? M_ATR.NOATR='T'
   || _wyn:=10
   || _i:=0;
      {!
      |? _i+=1;
         {? ($('M_ATR.SL_'+form(_i,-2,0,'99')))()<>null()
         || _wyn+=1;
            _i<10
         || 0
         ?}
      !}
   ?}
?};
M_ATR.cntx_pop();
_wyn


\dk_atr_dict
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: ustawienie okienka wertowania dla artybutów cech dla bieżącego M w buforze
::   WE: [_a] - 1-do rozpisania 0-nie (domyślnie),-2 z możliwością dołączenia
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
{? var_pres('__rozdkc')>0 & __rozdkc=1 || _a:=-2 ?};

_mat:={? ATR.MJS<>'' || exec('acr2acr','mat_atr') || 'M' ?};

ATR.M_ATR:=_m_atr:={? ~('M_ATR'*ATR.MJS) || ($(ATR.MJS+'.'+_mat+'().M_ATR'))() || M_ATR.ref() ?};
ATR.M_ATR().SYM;

ATR.UZUP:={? (';DKPAL_POZEANXINPEANPINY'*ATR.MJS)>1 | (ATR.MJS='FAP' & FAKS.SZ='Z')
          || exec('wz_uzup','mat_atr',ATR.M_ATR)
          || ''
          ?};
{? _m_atr<>null
|| DK_C.win_patt('SZUKA');
   {? ~_a || DK_C.win_edit('RED_ATR') ?};
   M_ATR.index('TYP');
   M_ATR.prefix('C');
   {? M_ATR.seek(_m_atr)
   || _acr:=DK_C.mk_sel('Atrybuty cechy'@,'P',0,'#usjgfeoibbdpwf',,,,,'U');
      _acs:=DK_C.mk_edit('Wartości szukania atrybutów'@,0,'#sawerfdvhstrae');
      {? (';EANP;INP;INY'*ATR.MJS)>1
      || DK_C.win_fld(_acr,ATR,'INAATR',,,3,0,1,'OK');
         DK_C.win_fml(_acr,ATR,'INAATR',,'ICON_BEFORE',"
           {? ATR.INAATR='A'
           || ATR.INAATR:=''; 'xwin16.png:50'

           |? ATR.INAATR='N'
           || ATR.INAATR:=''; 'xwin16.png:17'

           || ATR.INAATR:=''; ''
           ?}")
      ?};
      {! _i:=1.. exec('il_atr','mat_atr')
      |!
         {? ($('M_ATR.SL_'+form(_i,-2,,'99')))()<>null
         || ($('DK_C.win_fld(_a,,''WAR'+form(_i,-2,,'99')+''',,,-10,,,'''
             +($('M_ATR.SL_'+form(_i,-2,,'99')+'().NA'))()+''')'))(_acr);
            ($('DK_C.win_efld(_a,,''WAR'+form(_i,-2,,'99')+''',,,20,,,'''
             +($('M_ATR.SL_'+form(_i,-2,,'99')+'().NA'))()+''')'))(_acs)
         ?}
      !};
      {? _a=-2
      ||
         DK_C.win_act(_acr,,'Formuła','Wybierz'@@,,,"exec('ten_ctrl','mat_atr')",,1);
         DK_C.win_act(_acr,,'Formuła','Dołącz'@@,,,"exec('dk_c_add','mat_atr')",,);
         DK_C.win_act(_acr,1,'Formuła','Dołącz'@@,,,"exec('dk_c_add','mat_atr')",,1)
      |? ~_a
      || DK_C.win_act(_acr,,'Formuła','Dołącz'@@,,,"exec('dk_c_add','mat_atr')",,1);
         DK_C.win_act(_acr,1,'Formuła','Dołącz'@@,,,"exec('dk_c_add','mat_atr')",,1);
         DK_C.win_act(_acr,,'Formuła','Popraw'@@,,,"exec('dk_c_put','mat_atr')");
         DK_C.win_act(_acr,,'Formuła','Usuń'@@,,,"exec('dk_c_del','mat_atr')")
      || DK_C.win_act(_acr,,'Formuła','Wybierz'@@,,,"sel_exit",,1)
      ?};
      DK_C.win_act(_acr,,'Rekord',,,,"exec('dk_c_get','mat_atr')");
      DK_C.win_act(_acr,,'Szukaj');
      DK_C.win_act(_acr,,'Kolejność');
      {? ~_a
      || DK_C.win_dict(_acr);
         DK_C.win_patt(_acs)
      || DK_C.win_sel(_acr)
      ?}
   ?}
|| DK_C.win_patt('SZUKA');
   DK_C.win_edit('RED');
   DK_C.win_dict('WER')
?};
''


\f3_atr_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: formuła przed wyświetleniem dla wartości atrybutu
::----------------------------------------------------------------------------------------------------------------------
_wyn:=fld;
_slo:=0;
_acr:='SL_'+(3-cur_afld);
_slu:=($('M_ATR.'+_acr+'().SLU'))();
{? _slu<>null
|| _slo:=1;
   ($('M_ATR.'+_acr+'().SLU().NAZ'))();
   SLO.win_sel('ONE_SEL');
   SLO.index('SL');
   SLO.prefix(_slu);
   {? _wyn<>''
   ||
      SLO.find_key(_wyn)
   ?};
   {? SLO.select(,1,10)
   ||
      _wyn:=SLO.KOD
   || _wyn:=~~
   ?}
?};
{? ($('M_ATR.'+_acr+'().TYP'))()='P'
|| _slo:=1;
   ZPARN.cntx_psh();
   ZPARN.clear();
   ZPARN.win_sel('WERM');
   {? ST.TYPYDOK().ZLEC='T'
   || ZPARN.index('ZL');
      ZPARN.prefix(DK.ZL);

::    Dla dokumentów powiązanych ze zleceniem wyłączamy akcje w okienku
      ZPARN.actions('WERM','DPUp:D')

   || ZPARN.index('PARTIA');
      ZPARN.prefix()
   ?};
   {? ZPARN.select()
   || _wyn:=ZPARN.SYM;
      ATR.ZPARN:=ZPARN.ref
   || _wyn:=~~
   ?};
:: Przywracam akcje w oknie
   ZPARN.actions('WERM');

   ZPARN.cntx_pop()
?};
{? ($('M_ATR.'+_acr+'().TYP'))()='R'
|| _slo:=1;
   exec('SRD','object');
   SRSR.cntx_psh();
   SRSR.use('srsr'+'r'+REF.FIRMA().SYMBOL);
   SRSR.clear();
   SRSR.win_sel('SLO');
   SRSR.index('NRI');
   SRSR.prefix('T');
   {? fld()<>''
   || SRSR.find_key(fld())
   ?};
   {? SRSR.select(,1,5)
   || _wyn:=SRSR.NRI;
      ATR.SRSR:=SRSR.ref
   || _wyn:=~~
   ?};
:: Przywracam akcje w oknie
   SRSR.actions('WER');

   SRSR.cntx_pop()
?};
{? ~_slo
|| FUN.info('Wartość pola nie jest typu SŁOWNIK, PARTIA lub typu ŚRODEK TRWAŁY.'@);
   _wyn:=~~
?};
_wyn


\ae_atr_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: formuła po redakcji dla wartości atrybutu
::   WE: [_a] - numer pola, domyślnie cur_afld
::       [_b] - wartość pola, domyślnie fld
::   WY: czy mozna opuscic pole
::----------------------------------------------------------------------------------------------------------------------
:: {? var_pres('__mref')<0 || __mref:=null ||  {? type_of(__mref)<>7 || __mref:=null ?} ?};
_res:='';
_ispar:=0;
_nrfld:={? var_pres('_a')=type_of(0) & _a>0 & _a<11 || _ispar:=1; _a || 0 ?};
_value:={? _ispar & var_pres('_b')=type_of('') || _b || fld() ?};

_wyn:=1;
_wsk:={? _nrfld=0 || 3-cur_afld || form(_nrfld,-2,0,'99') ?};
_acr:='SL_%1'[_wsk];
_typ:=($('M_ATR.'+_acr+'().TYP'))();
:: Liczba 'L'
:: Data 'D'
:: Czas 'C'
:: Tekst 'T'
:: Slownik 'S'
:: Partia 'P'
:: Środek trwały 'R'
_par:=exec('get','#params',600020,2);
{? _typ='L'
|| _wyn:=exec('ctrltypp','#valid',{? _par='T' || 'N+' || 'N' ?},_value);
   {? (~type_of(_wyn) & errno) | ~_wyn
   || _wyn:=0;
      _txt:='Wymagana wartość liczbowa.'@;
      {? ~_ispar || FUN.info(_txt) || _res:=_txt ?}
   ?}
|? _typ='D'
|| _wyn:=exec('ctrltypp','#valid','D',_value);
   {? (~type_of(_wyn) & errno) | ~_wyn
   || _wyn:=0;
      _txt:='Wymagana wartość typu data.'@;
      {? ~_ispar || FUN.info(_txt) || _res:=_txt ?}
   ?}
|? _typ='C'
|| _wyn:=exec('ctrltypp','#valid','G',_value);
   {? (~type_of(_wyn) & errno) | ~_wyn
   || _wyn:=0;
      _txt:='Wymagana wartość typu czas.'@;
      {? ~_ispar || FUN.info(_txt) || _res:=_txt ?}
   ?}
|? _typ='T'
|| ''
|? _typ='S'
|| _slu:=($('M_ATR.'+_acr+'().SLU'))();
   _naz:=($('M_ATR.'+_acr+'().SLU().NAZ'))();
   {? _slu<>null & _value<>''
   ||
      SLO.index('SL');
      SLO.prefix(_slu);
      {? SLO.find_key(_value,)
      || {? ~_ispar || ($('ATR.WAR%1'[_wsk]))():=SLO.KOD ?}
      |? SLO.find_key(_value)
      || {? ~_ispar
         || ($('ATR.WAR%1'[_wsk]))():=SLO.KOD
         || _res:='Wymagana wartość ze słownika: %1.'@[_naz]
         ?}
      || _txt:='Wymagana wartość ze słownika: %1.'@[_naz];
         {? ~_ispar || FUN.info(_txt) || _res:=_txt ?};
         _wyn:=0
      ?}
   ?}
|? _typ='P'
|| {? (_ispar | ST.TYPYDOK().ZLEC='N') & _value<>''
   || ZPARN.win_edit('REDM');
      ZPARN.cntx_psh();
      ZPARN.clear();
      ZPARN.index('PARTIA');
      ZPARN.prefix(_value,);
      {? ZPARN.first()
      || ATR.ZPARN:=ZPARN.ref()
      || {? _ispar || _res:='Brak podanego nr partii.'@ ?};
         {? ~_ispar & FUN.ask('Brak podanego nr partii. Czy dodać do słownika?'@)
         || ZPARN.cntx_psh();
            ZPARN.clear();
            ZPARN.blank();
            ZPARN.SYM:=_value;
::          [rr] aktualnie pole wyłączone z obsługi
            ZPARN.efld_opt('REDM','enable=0',,'ZPEAN');
            {? ZPARN.edit()
            || ZPARN.SCEAN:=exec('blpp_sce','kody_kresk');
               ZPARN.ZPEAN:=exec('blpp2sce','kody_kresk');
               {? ZPARN.add(1)
               || {? ZPARN.SCEAN<>'' || exec('mkodkadd','kody_kresk',ZPARN.ZL().KTM,ZPARN.SCEAN,$ZPARN.ref()) ?};
                  {? ZPARN.ZPEAN<>'' & ZPARN.ZPEAN<>ZPARN.SCEAN
                  || exec('mkodkadd','kody_kresk',ZPARN.ZL().KTM,ZPARN.ZPEAN,$ZPARN.ref())
                  ?};
                  ATR.ZPARN:=ZPARN.ref()
               || _wyn:=0
               ?}
            ||  _wyn:=0
            ?};
            ZPARN.cntx_pop()
         || _wyn:=0
         ?}
      ?};
      ZPARN.cntx_pop()
   |? ATR.MJS='DK' & ST.TYPYDOK().ZLEC='T' & fld()<>'' & DK.ZL<>null()
   || ZL.cntx_psh();
      ZPARN.cntx_psh();
      ZPARN.index('ZL2');
      ZPARN.prefix(DK.ZL,fld());
      {? ZPARN.first()=0
      || _msg0:='';
         _msg1:='Na zleceniu brak partii o podanym symbolu.'@;
         _msg2:='Zlecenie: %1'@[DK.ZL().SYM];
         _msg3:='Symbol partii: %1'@[fld()];
         _msg4:='Wymagane podanie symbolu partii występującej na zleceniu,'@;
         _msg5:='lub wybór partii ze słownika (F3).'@;
         _msg_glued:=exec('form','#string','L',_msg1
                                             ,_msg0
                                             ,_msg2
                                             ,_msg3
                                             ,_msg0
                                             ,_msg4
                                             ,_msg5);
         FUN.emsg(_msg_glued);
         _wyn:=0
      ?};
      ZPARN.cntx_pop();
      ZL.cntx_pop()
   ?}
|? _typ='R' & ~_ispar
|| SRSR.index('NRI');
   SRSR.prefix('T',fld());
   {? SRSR.first()
   || SRST.cntx_psh();
      SRST.index('SROD');
      SRST.prefix(SRSR.ref(),SSTALE.AR,SSTALE.AO);
      {? SRST.first() & SRST.R<>'S'
      || {? SRSR.GRP<>'E' | __DTREE | __LELEM
         || _ref:=SRST.ref()
         || _sr_ref:=exec('get_srsr_root','fst',SRSR.ref());
            SRST.prefix(_sr_ref,SSTALE.AR,SSTALE.AO);
           {? SRST.first()  || _ref:=SRST.ref() || _ref:=null ?}
         ?}
      || _ref:=null
      ?};
      SRST.cntx_pop();
      {? _ref=null
      || FUN.info('Nie odnaleziono środka w danych bieżącego okresu.\n'
                  'Środek mógł zostać zlikwidowany lub zbyty do innej firmy grupy kapitałowej\n'
                  'w okresie wcześniejszym lub dołączony w okresie późniejszym.'@);
         _wyn:=0
      ?}
   || FUN.info('Środek nie został odnaleziony.'@);
      _wyn:=0
   ?}
?};
{? ~_ispar
|| _edt:=1;
   {? _wyn & ATR.FLAG_ED & ATR.FLAG<>1 & ~ATR.MOD
   || {? ';key:F2;~~;'*exec('akcepatr','mat_atr',0)>1 || _edt:=exec('ae_dk_ce','mat_atr') ?}
   ?};
   {? _edt=-1 || _wyn:=0 ?};
   {? _wyn & ATR.FLAG<>0 & ~ATR.MOD || DK_C.KOD:=exec('kod2matr','mat_atr',1) ?};
   _wyn
|| _res
?}

\akcepatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Akceptacja nowo wprowadzonych atrybutow
::   WE: [_a] 1(domyslnie)-redakcja dla DK_C 0-redakcja na zmiennych
::       [_b] 0(domyslnie)-dla niekontrolowanych nie dodawaj i nie poprawiaj 1-dodawaj/poprawiaj
::   WY: 'key:F2' etc.
::----------------------------------------------------------------------------------------------------------------------

{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};

_wyn:='';

:: sprawdzamy czy cos zostalo zmienione
_wgdkc:='';
_wgatr:='';
_uzup:='';
_jest:={? ATR.MJS='DK' || 1 || #($(ATR.MJS+'.ref()'))() ?} & ($(ATR.MJS+'.DK_C'))()<>null;
_ctrl:=(';DK;INP;INY;TR_ZLM;'*(';%1;'[ATR.MJS]))>0;
_kod:=DK_C.KOD;

_mat:={? ATR.MJS<>'' || exec('acr2acr','mat_atr') || 'M' ?};

_matr:=($(ATR.MJS+'.'+_mat+'().M_ATR'))();

DK_C.cntx_psh();
{! _i.. exec('il_atr','mat_atr')
|! _war:=($('ATR.WAR'+form(_i,-2,0,'99')))();
   _mod:=($(ATR.MJS+'.'+_mat+'().M_ATR().MOD'+form(_i,-2,,'99')))();
   _wgatr+=_war;
   _uzup+={? ($(ATR.MJS+'.'+_mat+'().M_ATR().SL_'+form(_i,-2,0,'99')))()=null
          || '-'
          || {? _war<>'' | _mod || '1' || '0' ?}
          ?};
   _wgdkc+={? _jest || ($(ATR.MJS+'.DK_C().WAR'+form(_i,-2,0,'99')))() || '' ?}
!};

_can_continue:=1;
{? (';TMAT;TCHMAT'*ATR.MJS)>1 & (ATR.FLAG_TEX=1 | (ATR.MJS='TMAT' & ATR.FLAG_ED=2) | (ATR.MJS='TCHMAT' & ATR.FLAG_ED=2))
||
:: Kontekst redagowania atrybutow na surowcach technologii:
:: 1. Jezeli wszystkie atrybuty maja znacznik dziedziczenia wartosci z produktow to nic nie
::    robie - nie zakladam DK_C, nie sprawdzam itp

   _buf_msk:=exec('atr_mask_buffer','tech_mater');
   _buf_msk.get_atr();
   _mask:=_buf_msk.shdw_atr(_matr);
   {? _mask*'N'=0
   || _can_continue:=0;
::    Czyszcze ceche jesli byla wypelniona
      _rule_dkc:=$(ATR.MJS+'.DK_C:=_a');
      _rule_dkc(null());
      _wyn:='key:F2'
   |? _mask*'T'>0
   ||
::    2. Jezeli ktorys z atrybutów ma byc dziedziczony z produktu, ale inne maja puste wartosci
::    to rowniez nic nie robie - nie zakladam DK_C, nie sprawdzam itp
      _buf_war:=exec('buffer','mat_atr');
      _buf_war.get_atr();
      {? _buf_war.is_empty()>0
      ||
         _can_continue:=0;
::       Czyszcze ceche jesli byla wypelniona
         _rule_dkc:=$(ATR.MJS+'.DK_C:=_a');
         _rule_dkc(null());
         _wyn:='key:F2'
      ?}
   ?};
:: Przypisuje maske do rekordu
   _rule_set:=$(ATR.MJS+'.ATR_MASK:=_a');
   _rule_set(_mask);
:: Jesli atrybut ma znacznik dziedziczenia wartosci z produktu to czyszcze wartosc w zmiennej ATR
:: po to by powstala cecha z pusta wartoscia na tej pozycji
   {! _it:=1.. exec('il_atr','mat_atr')
   |! _rule_chk:=$('_a.ZL_WAR'+form(_it,-2,0,'99'));
      _rule_set:=$('ATR.WAR'+form(_it,-2,0,'99')+':=_a');
      {? _rule_chk(_buf_msk)='T'
      || _rule_set('')
      ?}
   !}
?};

{? _can_continue>0
|| {? _jest & exec('dkccount','mat_atr',DK_C.ref()) & ~ATR.FLAG & ~ATR.FLAG_ED
   || _wyn:='key:F2'
   |? ~(_uzup*'1')
   || {? ~ATR.FLAG & ~ATR.FLAG_ED
      || FUN.info('Nie jesteś w trybie edycji atrybutów.\nNależy najpierw wybrać klawisz ZMIEŃ.'@);
         _wyn:=''
      || {? ~ATR.FLAG_ED
         || FUN.info('Brak atrybutów.\nAkceptacja niemożliwa.'@)
         |? ATR.FLAG_ED=2
         || ($(ATR.MJS+'.DK_C'))():=null()
         ?};
         _wyn:=exec('chk_red_field','mat_atr')
      ?}
   |? _ctrl & (_nr:=(_uzup*'0'))>0
   || {? ~ATR.FLAG & ~ATR.FLAG_ED
      || FUN.info('Nie jesteś w trybie edycji atrybutów.\nNależy najpierw wybrać klawisz ZMIEŃ.'@);
         _wyn:=''
      || {? ~ATR.FLAG_ED
         || FUN.info('Brak atrybutu: %1.\nAkceptacja niemożliwa.'@[($(ATR.MJS+'.'+_mat+'().M_ATR().SL_'+form(_nr,-2,0,'99')+'().NA'))()])
         |? ATR.FLAG_ED=2
         || ($(ATR.MJS+'.DK_C'))():=null()
         ?};
         _wyn:='edit:WAR'+form(_nr,-2,0,'99')
      ?}
   |? _wgatr=_wgdkc
   || {? _kod<>DK_C.KOD || DK_C.KOD:=_kod ?};
      DK_C.KOD:=exec('kod2matr','mat_atr');
      {? _jest || DK_C.put(1) ?};
      ATR.FLAG:=0;
      _wyn:='key:F2'
   || {? (_rdkc:=exec('unikdk_c','mat_atr',_matr,_uzup,($(ATR.MJS+'.DK_C'))()))=null
      || {? ~_jest | exec('dkccount','mat_atr',DK_C.ref())
         ||
::          dolaczenie nowego atrybutu
            {? {? ~_ctrl & ATR.FLAG_ED=2 || _b  || 1 ?}
             & (ATR.M_ATR().ADD | FUN.ask('Czy dołączyć nowy zestaw atrybutów?'@))
            || _partia:=exec('atr_get_partia','mat_atr',_matr);
               ($(ATR.MJS+'.DK_C'))():=exec('add2dk_c','mat_atr',null,_uzup,_partia,_kod);
               ATR.FLAG:=0;
               _wyn:='key:F2'
            |? ATR.FLAG_ED=2
            || ($(ATR.MJS+'.DK_C'))():=null();
               {? ATR.MJS='ZLIM' & cur_tab(1,1)<>ZLIM || ATR.SUR_DKC:=null() ?}
            || _wyn:=exec('chk_red_field','mat_atr')
            ?}
         ||
::          poprawa danego atrybutu lub dolaczenie nowego
            _dk_c:=($(ATR.MJS+'.DK_C'))();
            _popr:={? _dk_c=null || 1 || exec('FindInSet','#table','SC','DK_C',_dk_c)=null ?};
            {? {? ~_ctrl & ATR.FLAG_ED=2 || _b  || 1 ?}
             & (_opc:={? _popr
                      || FUN.choice('Wybierz jedną z opcji dla zestawu atrybutów.'@,,'Dołączenie nowego'@,'Poprawa danego'@)
                      |? ATR.M_ATR().ADD
                      || 1
                      || FUN.choice('Wybierz jedną z opcji dla zestawu atrybutów.'@,,'Dołączenie nowego'@)
                      ?})>0
            || _partia:=exec('atr_get_partia','mat_atr',_matr);
               ($(ATR.MJS+'.DK_C'))():=exec('add2dk_c','mat_atr',{? _opc=1 || null || ($(ATR.MJS+'.DK_C'))() ?}
                                        ,_uzup,_partia,_kod);
               ATR.FLAG:=0;
               _wyn:='key:F2'
            |? ATR.FLAG_ED=2
            || ($(ATR.MJS+'.DK_C'))():=null()
            || _wyn:=exec('chk_red_field','mat_atr')
            ?}
         ?}
      || {? ~_a | FUN.ask('Istnieje już taki zestaw atrybutów.\nCzy przypisać go jako cechę pozycji dokumentu?'@)
         || ($(ATR.MJS+'.DK_C'))():=_rdkc;
            {? _a
            || ATR.FLAG:=0;
               _wyn:='key:F2'
            || _wyn:='~~'
            ?}
         || _wyn:=exec('chk_red_field','mat_atr')
         ?}
      ?}
   ?}
?};
DK_C.cntx_pop();
_wyn


\unikdk_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdzenie unikalności dla DK_C
::   WE: _a - ref M_ATR
::       _b - UZUP
::       _c - ref DK_C
::   WY: ref DK_C-już jest null-nie ma
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();
DK_C.cntx_psh();
DK_C.index('UZUP');
DK_C.prefix(_a,_b);
_find:='DK_C.find_key(ATR.WAR01';
{! _i:=2.. exec('il_atr','mat_atr') |! _find+=',ATR.WAR'+form(_i,-2,0,'99') !}; _find+=',)';
{? ($_find)() || _wyn:={? _c=null || DK_C.ref() || {? _c<>DK_C.ref() || DK_C.ref() || _c ?} ?} ?};
DK_C.cntx_pop();
_wyn


\kod2matr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: wypełnia pole DK_C.KOD <--- UWAGA !!! dla aktualnego DK_C
::   WE: [_a] - 0(domyślnie) dla DK_C 1-dla ATR
::   WY: kod lub ''
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

_wyn:=DK_C.KOD;
M_ATR.cntx_psh();
DK_C.cntx_psh();
{? DK_C.M_ATR<>null & (DK_C.M_ATR().FSYM<>null | DK_C.M_ATR().WZ<>'')
|| {? DK_C.M_ATR().FSYM<>null()
   || _wyn:=($DK_C.M_ATR().FSYM().FORMULA)()
   || _wyn:=exec('readwzcs','mat_atr',_a)
   ?}
?};
M_ATR.cntx_pop();
DK_C.cntx_pop();
_wyn


\atr_get_partia
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Zwraca ZPARN.ref na podstawie wartości zmiennej ATR.WARx który jest partią
::   WE: _a - M_ATR.ref() - wzorzec atrybutów
::   WY: ZPARN.ref() lub null()
::  OLD: \atr_get_partia/zparn.fml
::----------------------------------------------------------------------------------------------------------------------
_matr:=_a;

_result:=null();

M_ATR.cntx_psh(); M_ATR.clear();
ZPARN.cntx_psh(); ZPARN.clear();

{? M_ATR.seek(_matr)
||
   _max:=exec('il_atr','mat_atr');
   {! _it:=1.._max
   |? _result=null()
   |! _rule_chk:=$('M_ATR.SL_'+form(_it,-2)+'().TYP');
      _rule_get:=$('ATR.WAR'+form(_it,-2));
      {? _rule_chk()='P'
      || _symbol:=_rule_get();
         {? _symbol<>''
         || ZPARN.index('SYM');
            ZPARN.prefix(_symbol,_symbol);
            {? ZPARN.first()
            || _result:=ZPARN.ref()
            ?}
         ?}
      ?}
   !}
?};

ZPARN.cntx_pop();
M_ATR.cntx_pop();
_result


\add2dk_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: dodaje, aktualizuje danego DK_C
::   WE: _a - ref DK_C
::       _b - wartość pola UZUP
::       [_c] - ZPARN.ref() - partia produkcyjna
::       [_d] - kod DK_C
::   WY: ref DK_C lub null
::----------------------------------------------------------------------------------------------------------------------
{? _>=4 || {? type_of(_d)<>2 || _d:='' ?} || _d:='' ?};

_pop:=_a<>null;
_wyn:=null;
_partia:=null();
{? var_pres('_c')=type_of(ZPARN.ref())
|| _partia:=_c
?};
DK_C.clear();
DK_C.blank();

_mat:={? ATR.MJS<>'' || exec('acr2acr','mat_atr') || 'M' ?};
_ref_mat:=($(ATR.MJS+'.'+_mat))();

DK_C.M_ATR:=($(ATR.MJS+'.'+_mat+'().M_ATR'))();
DK_C.UZUP:=_b;
DK_C.ZPARN:=_partia;
DK_C.SYM:=$DK_C.tm_stamp();
DK_C.KOD:=_d;
_umod:='';
{! _i.. exec('il_atr','mat_atr')
|! _war:=($('ATR.WAR'+form(_i,-2,0,'99')))();
   ($('DK_C.WAR'+form(_i,-2,0,'99')))():=_war;
   _umod+={? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
          || {? _war<>'' || '1' || '0' ?}
          || '-'
          ?}
!};
DK_C.UMOD:=_umod;
DK_C.KOD:=exec('kod2matr','mat_atr');
{? _pop
|| {? DK_C.put(1) || _wyn:=DK_C.ref() ?}
|| {? DK_C.add(1)
   || _wyn:=DK_C.ref();
      _idmob:=DK_C.M_ATR().IDMOB='T' & ~({? DK_C.M_ATR().MOD='T' || DK_C.UMOD || DK_C.UZUP ?}*'0');
      {? _idmob & _ref_mat<>null()
      || exec('mkodkadd','kody_kresk',_ref_mat
          ,{? ATR.SCEAN<>'' || ATR.SCEAN || exec('mkodkKODK','kody_kresk',_ref_mat) ?},$DK_C.ref())
      ?}
   ?}
?};
_wyn


\dkccount
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: sprawdzenie wykorzystania danej cechy
::   WE: _a - ref DK_C
::   WY: 1-jest wykorzystana 0-nie jest
::---------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_akt:={? ATR.MJS<>'' & ATR.MJS<>'M_ATR' || ($(ATR.MJS+'.DK_C'))() || null() ?};

{? ATR.MJS='ZD_POZ'
|| _kod:='ZD';
   _ref:={? _akt<>null() || $(($(ATR.MJS+'.ref()'))()) || '' ?}
|? ATR.MJS='ZK_P' & ZK_P.RODZ='Z'
|| _kod:='ZAM_SPR';
   _ref:={? _akt<>null() || $(($(ATR.MJS+'.ref()'))()) || '' ?}
|? ATR.MJS='ZK_P' & ZK_P.RODZ='W'
|| _kod:='ZAM_WEW';
   _ref:={? _akt<>null() || $(($(ATR.MJS+'.ref()'))()) || '' ?}
|? ATR.MJS='PD_K'
|| _kod:='PD_K';
   _ref:={? _akt<>null() || $(($(ATR.MJS+'.ref()'))()) || '' ?}
|| _kod:='';
   _ref:=''
?};
DK_C.cntx_psh();
{? _a<>null() || DK_C.use(ref_name(_a)) ?};
DK_C.clear();
{? DK_C.seek(_a)
|| _wyn:=DK_C.count()-{? _akt<>null() || DK_C.ref()=_akt || 0 ?};
   {? _kod<>'' & _ref<>''
   || _wyn-=DK_C.ref()=exec('FindInSet','#table','PD_BUF','REF',_ref,_kod,"PD_BUF.DK_C",,,null())
   ?};
   {? ~_wyn & DK_C.M_ATR().IDMOB='T'
   || MKODK.cntx_psh();
      MKODK.index('RSQL');
      MKODK.prefix($DK_C.ref(),);
      {? MKODK.first()
      || _size:=0;
         {!
         |? _size+={? exec('FindInSet','#table','EANP','SCEAN',MKODK.KODK,MKODK.KODK)=null() || 1 || 0 ?};
            MKODK.next()
         !};
         _wyn:=_size<=0
      ?};
      MKODK.cntx_pop()
   ?}
?};
DK_C.cntx_pop();
EANP.cntx_psh();

EANP.cntx_pop();
_wyn>0


\chk_red_field
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Sprawdza do którego pola można zwrócic redagowanie w oknie redagowania cechy
::   WY: STRING - 'edit:WARxx' - które pole można redagować lub '' jeżeli żadnego pola nie można redagować
::----------------------------------------------------------------------------------------------------------------------
_result:='';
{! _it:=1.. exec('il_atr','mat_atr')
|? _result=''
|! _field:='WAR'+form(_it,-2,0,'99');
:: Sprawdzam redagowalność pola
   {? exec('be_atr_war','mat_atr',_field)>0
   || _result:='edit:'+_field
   ?}
!};
_result


\matr_tmat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [WH] [12.30]
:: OPIS: Atrybuty dla tabeli TMAT
::   WY 0/1
::----------------------------------------------------------------------------------------------------------------------
_akc:=0;
_flag:=ATR.FLAG;
_flag_ed:=ATR.FLAG_ED;
ATR.FLAG:=0;
ATR.MJS:='TMAT';

_wyn:=0;
{? TMAT.TGDFLT<>null()
|| _m_atr:=TMAT.TGDFLT().PT().M_ATR
|| _m_atr:=TMAT.PT().M_ATR
?};
{? _m_atr<>null
|| {? TMAT.TGDFLT<>null()
   || TMAT.TGDFLT().PT().M_ATR().SYM
   || _m_atr:=TMAT.PT().M_ATR().SYM
   ?};
   ATR.FLAG_PAR:=1;

:: podczytanie wartości atrybutów
   exec('ustawatr','mat_atr','TMAT');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATRS','AKC','state=normal');
   DK_C.btn_eopt('RED_ATRS','NEW','state=normal');
   DK_C.btn_eopt('RED_ATRS','INF','state=normal');
   DK_C.win_edit('RED_ATRS');
   ATR.FLAG_TEX:=1;
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
ATR.FLAG_PAR:=0;
ATR.FLAG:=_flag;
ATR.FLAG_ED:=_flag_ed;
win_disp();
_wyn


\matr_zlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [WH] [12.30]
:: OPIS: Atrybuty dla tabeli ZLIM
::   WY 0/1
::----------------------------------------------------------------------------------------------------------------------
_akc:=0;
ATR.FLAG:=0;
ATR.MJS:='ZLIM';
_wyn:=0;
_m_atr:=ZLIM.KTM().M_ATR;
{? _m_atr<>null
|| ZLIM.KTM().M_ATR().SYM;
   ATR.FLAG_PAR:=1;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','ZLIM');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW',{? ~_jest | ~exec('dkccount','mat_atr',DK_C.ref()) || 'state=normal' || 'state=grayed' ?});
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
ATR.FLAG_PAR:=0;
_wyn


\wz_uzup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: zwraca wzorzec uzupełnienia dla M_ATR
::   WE: _a - M_ATR.ref()
::   WY: wzorzec uzupełnienia
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
M_ATR.cntx_psh();
M_ATR.clear();
{? M_ATR.seek(_a)
|| {! _i.. exec('il_atr','mat_atr') |! _wyn+={? ($('M_ATR.SL_'+form(_i,-2,0,'99')))()<>null || '1' || '-' ?} !}
?};
M_ATR.cntx_pop();
_wyn


\dk_c_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: dodawanie rekordu do tabeli DK_C
::----------------------------------------------------------------------------------------------------------------------
_ed:=DK_C.win_edit('?');
VAR_DEL.delete('__adddkc');
__adddkc:=1;
_flag:=ATR.FLAG;
ATR.FLAG:=1;
ATR.FLAG_PAR:=0;

_mat:={? ATR.MJS<>'' || exec('acr2acr','mat_atr') || 'M' ?};

_m_atr:={? ATR.MJS='M_ATR'
        || M_ATR.ref()
        || ($(ATR.MJS+'.'+_mat+'().M_ATR'))()
        ?};
{? _m_atr<>null
||
   DK_C.btn_eopt('RED_ATR','AKC','state=grayed');
   DK_C.btn_eopt('RED_ATR','NEW','state=grayed');
   DK_C.btn_eopt('RED_ATR','INF','state=grayed');
   exec('atr_tmp_addput','mat_atr','DK_C',_m_atr,'add')
||
   DK_C.win_edit('RED');
   DK_C.blank();
   DK_C.memo_set('','O');
   {? DK_C.edit()
   || DK_C.KOD:=exec('kod2matr','mat_atr');
      DK_C.add();
      DK_C.memo_put(,'O')
   ?}
?};
DK_C.win_edit(_ed);
VAR_DEL.delete('__adddkc');
ATR.FLAG:=_flag;
''


\dk_c_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: popraw rekordu w tabeli DK_C
::----------------------------------------------------------------------------------------------------------------------
{? exec('dkccount','mat_atr',DK_C.ref())
|| FUN.info('Cecha wykorzystana w systemie.\nModyfikacja niemożliwa.'@)
|| _flag:=ATR.FLAG;
   ATR.FLAG:=1;
   ATR.FLAG_PAR:=0;
   DK_C.memo_get(,'O');

   _mat:={? ATR.MJS<>'' || exec('acr2acr','mat_atr') || 'M' ?};

   _m_atr:={? ATR.MJS='M_ATR'
           || M_ATR.ref()
           || ($(ATR.MJS+'.'+_mat+'().M_ATR'))()
           ?};
   {? _m_atr=null & DK_C.M_ATR<>null || _m_atr:=DK_C.M_ATR ?};
   {? _m_atr<>null
   || M_ATR.index('TYP');
      M_ATR.prefix('C');
      {? M_ATR.seek(_m_atr)
      ||
         DK_C.btn_eopt('RED_ATR','AKC','state=grayed');
         DK_C.btn_eopt('RED_ATR','NEW','state=grayed');
         DK_C.btn_eopt('RED_ATR','INF','state=grayed');
         exec('atr_tmp_addput','mat_atr','DK_C',_m_atr,'put',,DK.M);
         {? 0 ||
         _czy_ok:=0;
         DK_C.win_edit('RED_ATR');
         _chk:='chk_rec(';
         {! _i:=1.. exec('il_atr','mat_atr')
         |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('DK_C.WAR'+form(_i,-2,,'99')))();
            {? ($('M_ATR.SL_'+form(_i,-2,,'99')))()<>null
            ||
               _czy_ok:=1;
               _chk+='''WAR'+form(_i,-2,,'99')+''','
            ?}
         !};
         DK_C.M_ATR:=_m_atr;
         _chk:=(_chk-1)+')';
         {? _czy_ok=1
         ||
            {? DK_C.edit($_chk)
            || _uzup:='';
               _umod:='';
               {! _i:=1.. exec('il_atr','mat_atr')
               |! _war:=($('ATR.WAR'+form(_i,-2,,'99')))();
                  _mod:=($('DK_C.M_ATR().MOD'+form(_i,-2,,'99')))();
                  ($('DK_C.WAR'+form(_i,-2,,'99')))():=_war();
                  _uzup+={? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
                         || {? _war<>'' | _mod || '1' || '0' ?}
                         || '-'
                         ?};
                  _umod+={? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
                         || {? _war<>'' || '1' || '0' ?}
                         || '-'
                         ?}
               !};
               DK_C.UZUP:=_uzup;
               DK_C.UMOD:=_umod;
               DK_C.KOD:=exec('kod2matr','mat_atr');
               {? DK_C.put(1)
               || DK_C.memo_put(,'O')
               || FUN.info('Istnieje już cecha o podanym zestawie atrybutów.'@)
               ?}
            ?}
         ||
            FUN.info('Nieprawidłowa definicja struktury.'@)
         ?}
         ?}
      ?}
   || DK_C.win_edit('RED');
      {? DK_C.edit()
      || DK_C.KOD:=exec('kod2matr','mat_atr');
         DK_C.put();
         DK_C.memo_put(,'O')
      ?}
   ?};
   ATR.FLAG:=_flag
?};
''


\dk_c_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: usuniecie rekordu DK_C
::----------------------------------------------------------------------------------------------------------------------
{? ATR.MJS<>'' & {? ATR.MJS<>'M_ATR' || ($(ATR.MJS+'.DK_C'))()<>DK_C.ref() || 1 ?}
 & ~exec('dkccount','mat_atr',DK_C.ref())
|| {? FUN.ask('Czy usunąć cechę?'@)
   || do();
      _oki:=1;
      MKODK.cntx_psh();
      MKODK.index('RSQL');
      MKODK.prefix($DK_C.ref(),$DK_C.ref());
      {? MKODK.first()
      || _oki:=0;
         {!
         |? _del:=MKODK.del(1,1);
            _oki:=_del>0;
            {? ~_oki || undo() ?};
            _del>1
         !}
      ?};
      MKODK.cntx_pop();
      {? _oki || DK_C.del() ?};
      end()
   ?}
|| FUN.info('Cecha wykorzystywana.\nUsunięcie niemożliwe.'@)
?};
~~


\dk_c_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: podczytanie wartości do bufora
::----------------------------------------------------------------------------------------------------------------------
{! _i.. exec('il_atr','mat_atr')
|! ($('ATR.WAR'+form(_i,-2,0,'99')))():=($('DK_C.WAR'+form(_i,-2,0,'99')))()
!};
ATR.ZPARN:=DK_C.ZPARN;
~~


\readwzcs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: odczyt wzorca dla kodu cechy dostawy <--- UWAGA !!! dla aktualnego DK_C
::       struktura [](od_nr-do_nr)ss
::   WE: [_a] - 0(domyślnie) dla DK_C 1-dla ATR
::   WY: wartość wg kodu wzorca
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

_wyn:='';

_wz:=DK_C.M_ATR().WZ;

{!
|? _ch:=1+_wz;
   {? _ch='['
   || _wz:=1-_wz;
      _nr:=_wz*']';
      _war:={? _a || 'ATR.WAR' || 'DK_C.WAR' ?}+form(#((_nr-1)+_wz),-2,0,'99');
      _wz:=_nr-_wz;
::    ograniczenie kodu
      _ch:=1+_wz;
      {? _ch='('
      || _wz:=1-_wz;
         _nr:=_wz*')';
         _buf:=(_nr-1)+_wz;
         _wz:=_nr-_wz;
         _nr:=_buf*'-';
         _odn:=#((_nr-1)+_buf);
         _don:=#(_nr-_buf)
      || _odn:=0;
         _don:=0
      ?};
      _buf:=($_war)();
      {? _odn
      || _wyn+=(1+_don-_odn)+((_odn-1)-_buf)
      || _wyn+=_buf
      ?}
   |? _ch='s'
   || _wz:=1-_wz;
      _nr:=_wz*'s';
      _war:=((_nr-1)+_wz);
      _wyn+=_war;
      _wz:=_nr-_wz
   || _wz:=1-_wz
   ?};
   +_wz
!};
_wyn


\ustawatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Ustawia wartości atrybutów wg zadanego DK_C
::   WE: [_a] - akronim tabeli
::       [_b] - DK_C.ref() - ewentualnie ref DK_C
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')>0
|| _ref:=($(_a+'.DK_C'))()
|? var_pres('_b')=type_of(DK_C.ref())
|| _ref:=_b
?};
{? _ref=null()
|| {! _i.. exec('il_atr','mat_atr') |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !}
|| DK_C.cntx_psh();
   DK_C.clear();
   {? DK_C.seek(_ref)
   || {! _i.. exec('il_atr','mat_atr') |! ($('ATR.WAR'+form(_i,-2,0,'99')))():=($('DK_C.WAR'+form(_i,-2,0,'99')))() !}
   ?};
   DK_C.cntx_pop()
?};
~~


\newakatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: sprawdzenie i akceptacja okienka
::----------------------------------------------------------------------------------------------------------------------
{? ATR.FLAG
|| _wyn:='';
   _pole:=exec('akcepatr','mat_atr');
   _wyn:={? (4+_pole)='edit' || 5-_pole || '' ?}
|| _wyn:=''
?};
_wyn


\retwar_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: przywraca ustwienie zmiennych ATR.WAR wg pola DK_C na podstawie ATR.MJS
::   WE: [_a] - INTEGER - 0/[1] - czy wykonywać win_disp
::----------------------------------------------------------------------------------------------------------------------
_disp:=1;
{? var_pres('_a')=type_of(0)
|| _disp:=_a
?};
{? ($(ATR.MJS+'.DK_C'))()<>null() & ($(ATR.MJS+'.DK_C().M_ATR'))()<>null()
|| {! _i:=1.. exec('il_atr','mat_atr') |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($(ATR.MJS+'.DK_C().WAR'+form(_i,-2,,'99')))() !}
|| {! _i:=1.. exec('il_atr','mat_atr') |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
?};
{? _disp>0
|| {? ATR.MJS<>'ZL' || win_disp() ?}
?};
~~


\atr_tmp_addput
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: dodanie rekordu do wskazanej tabeli. Akronimy pól z wartościami muszą być zgodne oraz pole M_ATR
::   WE:  _a  - akronim tabeli
::        _b  - grupa atrybutów M_ATR.ref
::        _c  - add/put - dodanie lub poprawa rekordu
::       [_d] - akronim ilości (jeżeli podano to dodatkowo będzie włączone pole ilość do redakcji)
::       [_e] - ref materiału
::----------------------------------------------------------------------------------------------------------------------
{? _>=4 || {? type_of(_d)<>2 || _d:='' ?} || _d:='' ?};

VAR_DEL.delete('__refik');

_czyilpo:=var_pres('il_po')>0;

_m_atr:=_b;
__refik:=($(_a+'.ref()'))();
_ref_mat:=null();
_kilka:=0;

M_ATR.index('TYP');
M_ATR.prefix('C');
{? M_ATR.seek(_m_atr)
 & {? ATR.SCEAN<>''
   || FUN.ask('Dodany zestaw zostanie zarejestrowany z danym kodem identyfikacyjnym.\nCzy kontynuować?'@)
   || 1
   ?}
|| _czy_ok:=1;
   {? _d<>''
   || DK_C.win_edit('RED_ATRI')
   || DK_C.win_edit('RED_ATR')
   ?};
   {? _c='add'
   || DK_C.KOD:='';
      _ref_mat:=exec('FindInSet','#table','M','M_ATR',M_ATR.ref(),'T');
      {? _ref_mat=null()
      || _ref_mat:=exec('FindInSet','#table','M','M_ATR',M_ATR.ref(),'N');
         {? _ref_mat<>null()
         || _kilka:=exec('FindInSet','#table','M','M_ATR',M_ATR.ref(),'N',"M.index(\'M_ATR\');M.prefix(\'N\',M_ATR.ref());M.size()")
         ?}
      || _kilka:=exec('FindInSet','#table','M','M_ATR',M_ATR.ref(),'T',"M.index(\'M_ATR\');M.prefix(\'T\',M_ATR.ref());M.size()")
      ?}
   ?};
   DK_C.SYM:=$DK_C.tm_stamp;
   _chk:={? _d<>'' || 'exec(\'chk_matr\',\'mat_atr\',1)' || 'exec(\'chk_matr\',\'mat_atr\',0)' ?};
   {? ($('type_of('+_a+'.M_ATR)'))()=7
   || ($(_a+'.M_ATR'))():=_m_atr
   || ($(_a+'.M_ATR'))():=#_m_atr
   ?};
   {? _czy_ok
   ||
::    uzupełnienie wartości
      {? _c='put'
      ||
         {? _d<>'' || ATR.ATR_IL:=($(_a+'.'+_d))() ?};
         {! _i:=1.. exec('il_atr','mat_atr')
         |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($(_a+'.WAR'+form(_i,-2,,'99')))()
         !};
         {? type_of(($(_a+'.ZPARN'))())=7
         || ATR.ZPARN:=($(_a+'.ZPARN'))()
         |? type_of(($(_a+'.ZPARN'))())=2 & ($(_a+'.ZPARN'))()<>''
         || ATR.ZPARN:=exec('FindAndGet','#table',ZPARN,($(_a+'.ZPARN'))(),,,null())
         ?}
      || {! _i:=1.. exec('il_atr','mat_atr')
         |! {? ATR.MJS='EANP'
            || ($('ATR.WAR'+form(_i,-2,,'99')))():=($('EANP.WAR'+form(_i,-2,,'99')))()
            || ($('ATR.WAR'+form(_i,-2,,'99')))():=''
            ?}
         !};
         ATR.ZPARN:=null;
         {? _czyilpo || ATR.ATR_IL:=il_po ?}
      ?};
      _czy_nowy:=1;
      {? _d<>'' & _c<>'put'
      || {? _czyilpo || ATR.ATR_IL:=il_po ?};
         exec('dk_atr_dict','mat_atr',1);
         DK_C.index('M_ATR');
         DK_C.prefix(_m_atr,ATR.UZUP);
         {? DK_C.select()
         ||
            _czy_nowy:=1;
            {! _i:=1.. exec('il_atr','mat_atr')
            |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('DK_C.WAR'+form(_i,-2,,'99')))()
            !};
            ATR.ZPARN:=DK_C.ZPARN;
            DK_C.get()
         || _czy_nowy:=0
         ?}
      ?};
      {? _czy_nowy & DK_C.edit($_chk)
      ||
         _ndx_zaw_tmp:='';
         _prf_zaw_tmp:='';
         _kod:=DK_C.KOD;
::       sprawdzenie unikalności - zakładanie indeksu tymcz. o strukturze indeksu stałego jak DK_C - ATR_WAR
::       dla DK_C powinien włączac się indeks stały, dla innch w celu przyspiszenia dodać taki indeks
         {! _i:=1.. exec('il_atr','mat_atr')
         |!
            _ndx_zaw_tmp+='\'WAR'+form(_i,-2,,'99')+'\',,,';
            _prf_zaw_tmp+='ATR.WAR'+form(_i,-2,,'99')+','
         !};
         ($(_a+'.cntx_psh()'))();
         _ndx_tmp:=($(_a+'.ndx_tmp(\'\',,'+_ndx_zaw_tmp+'\'M_ATR\',,'+')'))();
         _prfx:=$(_a+'.prefix('+_prf_zaw_tmp+$#_m_atr+')');
         ($(_a+'.index(_a)'))(_ndx_tmp);
         _prfx();

         {? _c='put'
         ||
            {? ~(($(_a+'.first()'))())
            || DK_C.M_ATR:=_m_atr;
               DK_C.KOD:=_kod;
               _uzup:='';
               _umod:='';
               {! _i:=1.. exec('il_atr','mat_atr')
               |! _war:=($('ATR.WAR'+form(_i,-2,,'99')))();
                  _mod:=($('DK_C.M_ATR().MOD'+form(_i,-2,,'99')))();
                  ($(_a+'.WAR'+form(_i,-2,,'99')))():=_war;
                  _uzup+={? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
                         || {? _war<>'' | _mod || '1' || '0' ?}
                         || '-'
                         ?};
                  _umod+={? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
                         || {? _war<>'' || '1' || '0' ?}
                         || '-'
                         ?}
               !};
               DK_C.UZUP:=_uzup;
               DK_C.UMOD:=_umod;
               DK_C.KOD:=exec('kod2matr','mat_atr');
               {? _d<>''
               || ($(_a+'.'+_d))():=ATR.ATR_IL;
                  ($(_a+'.SYM'))():=DK_C.SYM
               ?};
               {? type_of(($(_a+'.ZPARN'))())=7
               || ($(_a+'.ZPARN'))():=ATR.ZPARN
               |? type_of(($(_a+'.ZPARN'))())=2
               || ($(_a+'.ZPARN'))():=$ATR.ZPARN
               ?};

               {? ($(_a+'.put(1)'))() || exec('aktdkcsc','mat_atr',DK_C.ref()) ?}
            |? ($(_a+'.ref()'))()=__refik
            || DK_C.KOD:=_kod;
               DK_C.KOD:=exec('kod2matr','mat_atr');
               DK_C.put(1);
               {? _d<>''
               ||
                  ($(_a+'.'+_d))():=ATR.ATR_IL;
                  ($(_a+'.SYM'))():=DK_C.SYM;
                  {? type_of(($(_a+'.ZPARN'))())=7
                  || ($(_a+'.ZPARN'))():=ATR.ZPARN
                  |? type_of(($(_a+'.ZPARN'))())=2
                  || ($(_a+'.ZPARN'))():=$ATR.ZPARN
                  ?};
                  ($(_a+'.put(1)'))()
               ?}
            || FUN.info('Istnieje już taki zestaw atrybutów.\nZmiany atrybutów nie zostaną uwzględnione.'@)
            ?}
         || {? ~($(_a+'.first()'))()
            ||
               ($(_a+'.blank'))();
               _uzup:='';
               _umod:='';
               DK_C.M_ATR:=_m_atr;
               DK_C.SYM:=$DK_C.tm_stamp;
               DK_C.KOD:=_kod;
               {! _i:=1.. exec('il_atr','mat_atr')
               |! _war:=($('ATR.WAR'+form(_i,-2,,'99')))();
                  _mod:=($('DK_C.M_ATR().MOD'+form(_i,-2,,'99')))();
                  ($(_a+'.WAR'+form(_i,-2,,'99')))():=_war;
                  _uzup+={? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
                         || {? _war<>'' | _mod || '1' || '0' ?}
                         || '-'
                         ?};
                  _umod+={? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
                         || {? _war<>'' || '1' || '0' ?}
                         || '-'
                         ?}
               !};
               DK_C.UZUP:=_uzup;
               DK_C.UMOD:=_umod;
               DK_C.KOD:=_kod;
               DK_C.KOD:=exec('kod2matr','mat_atr');
               {? _d<>''
               || ($(_a+'.'+_d))():=ATR.ATR_IL;
                  ($(_a+'.SYM'))():=DK_C.SYM
               ?};
               {? ($('type_of('+_a+'.M_ATR)'))()=7
               || ($(_a+'.M_ATR'))():=_m_atr
               || ($(_a+'.M_ATR'))():=#_m_atr
               ?};
               {? type_of(($(_a+'.ZPARN'))())=7
               || ($(_a+'.ZPARN'))():=ATR.ZPARN
               |? type_of(($(_a+'.ZPARN'))())=2
               || ($(_a+'.ZPARN'))():=$ATR.ZPARN
               ?};
               {? ($(_a+'.add'))() & _a='DK_C'
               || _idmob:=DK_C.M_ATR().IDMOB='T' & ~({? DK_C.M_ATR().MOD='T' || DK_C.UMOD || DK_C.UZUP ?}*'0');
                  {? _idmob
                  || {? _kilka<=1 & _ref_mat<>null()
                     || {? ~exec('czydkc_m','material',$DK_C.ref(),_ref_mat)
                        || exec('mkodkadd','kody_kresk',_ref_mat
                             ,{? ATR.SCEAN<>'' || ATR.SCEAN || exec('mkodkKODK','kody_kresk',_ref_mat) ?},$DK_C.ref())
                        ?}
                     |? FUN.ask('Czy wygenerować kody identyfikacyjne dla wybranych indeksów materiałowych?'@)
                     || VAR_DEL.delete('__tab');
                        M.cntx_psh();
                        M.index('M_ATR');
                        M.prefix('T',_m_atr,'T');
                        M.win_sel('NL_WERG');
                        {? M.select()
                        || {? var_pres('__tab')>100
                           || __tab.clear();
                              {? __tab.first()
                              || {!
                                 |? {? (M.clear(); M.seek(__tab.REF,)) & ~exec('czydkc_m','material',$DK_C.ref(),M.ref())
                                    || exec('mkodkadd','kody_kresk',M.ref()
                                         ,{? ATR.SCEAN<>'' || ATR.SCEAN || exec('mkodkKODK','kody_kresk',M.ref()) ?}
                                         ,$DK_C.ref())
                                    ?};
                                    __tab.next()
                                 !}
                              ?};
                              VAR_DEL.delete('__tab')
                           || {? ~exec('czydkc_m','material',$DK_C.ref(),M.ref())
                              || exec('mkodkadd','kody_kresk',M.ref()
                                   ,{? ATR.SCEAN<>'' || ATR.SCEAN ||  exec('mkodkKODK','kody_kresk',M.ref()) ?}
                                   ,$DK_C.ref())
                              ?}
                           ?}
                        ?};
                        M.cntx_pop()
                     ?}
                  ?}
               ?};
               __refik:=($(_a+'.ref()'))();
               {? ATR.SCEAN<>'' || sel_exit() ?}
            || FUN.info('Istnieje już taki zestaw atrybutów.\nCecha nie zostanie dodana.'@)
            ?}
         ?};
         ($(_a+'.ndx_drop(_a)'))(_ndx_tmp);
         ($(_a+'.cntx_pop()'))();
         ($(_a+'.first()'))()
      ?}
   ||
      FUN.info('Nieprawidłowa definicja struktury.'@)
   ?}
?};
{? var_pres('__refik')>0 || ($(_a+'.seek(__refik)'))() ?};
VAR_DEL.delete('__refik');
''


\aktdkcsc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: aktualizuje pola WAR dla SC
::   WE: _a - ref DK_C
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
SC.cntx_psh();
OKR.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.first()
|| {!
   |? SC.use('stc__'+ST.ODDZ+($OKR.ROK+2));
      SC.index('DK_C');
      SC.prefix(_a);
      {? SC.first()
      || {!
         |? {! _i..10 |! ($('SC.WAR'+form(_i,-2,0,'99')))():=($('SC.DK_C().WAR'+form(_i,-2,0,'99')))() !};
            SC.put(1);
            SC.next()
         !}
      ?};
      _wyn & OKR.next()
   !}
?};
SC.cntx_pop();
OKR.cntx_pop();
_wyn


\pwdkcwar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed wyświetleniem pol WAR
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_wyn:={? DK_C.M_ATR<>null
      || {? ($('DK_C.M_ATR().SL_'+(cur_afld()+2)))()<>null
         || ''
         || exec('findfnv','#color')
         ?}
      || exec('findfnv','#color')
      ?};
_wyn


\be_dk_ce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009+]
:: OPIS: przed edycją pola <ATR.MJS=acronim tabeli>.DK_C
::   WE: _a - sprawdzenie inwentaryzacji
::            null - sprawdza ZK_RP (zamówienia), MAG.ref - bierze pod uwagę podany magazyn
::   WY: czy można edytować
::  OLD: \be_dk_ce/magazyn2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
DK_C.actions('WER');
{? ATR.MJS='DK' | ATR.MJS=''
|| _tmg:=(1+ND.MAG().TYP);
   {? ND.TYP().KOOP='N' & 'D'*_tmg & (ND.TYP().P='T' | ND.TYP().UPRW='T' | DK.M().RODZ='U')
   || exec('dk_atr_dict','mat_atr');
      _wyn:=ND.TYP().UPRW='T' | {? ATR.M_ATR().EDIT || 0 || 1 ?}
   ?}
|? ATR.MJS='INP'
|| _tmg:=(1+INN.MG().TYP);
   _dkc:={? INP.DK_C<>null() & INP.SCSQL<>''
         || exec('FindAndGet','#table',SC,INP.SCSQL,,"SC.DK_C",null())=null()
         || INP.DK_C=null()
         ?};
   {? 'D'*_tmg
    & {? INP.SCSQL<>'' || _dkc & {? ~BEER.INPSUM || INP.SS<=INP.SE || BEER.SE<=BEER.SS ?} || 0 ?}
   || _wyn:=0
   |? 'D'*_tmg
    & ((INP.SCEAN='' & INP.SCSQL='')
     | {? INP.SCSQL<>'' || _dkc & {? ~BEER.INPSUM || INP.SS>INP.SE || BEER.SE>BEER.SS ?} || 1 ?})
    & {? INP.M().IDMOB='A' || ~INN.ARKPOM | INP.SCEAN='' || 1 ?}
   || exec('dk_atr_dict','mat_atr');
      _wyn:={? ATR.M_ATR().EDIT || 0 || 1 ?}
   ?}
|? ATR.MJS='INY'
|| _atr:=(1+INN.MG().TYP)='D' & INN.MG().PAL<>'T' & INY.M<>null();
   _wyn:= {? _atr
          || exec('dk_atr_dict','mat_atr');
             {? ATR.M_ATR().EDIT || 0 || 1 ?}
          ?}
|? ATR.MJS='ZK_P' & ZK_P.M<>null() & ZK_P.M().RODZ='U'
|| _wyn:= {? ZK_P.MG<>null()
          || (1+ZK_P.MG().TYP)='D' &
             (exec('dk_atr_dict','mat_atr');
             {? ATR.M_ATR().EDIT || 0 || 1 ?})
          |? ZK_P.RMAG<>null()
          || (1+ZK_P.RMAG().TYP)='D' &
             (exec('dk_atr_dict','mat_atr');
             {? ATR.M_ATR().EDIT || 0 || 1 ?})
          || exec('dk_atr_dict','mat_atr');
             {? ATR.M_ATR().EDIT || 0 || 1 ?}
          ?}
|? ATR.MJS='ZK_P' & (exec('czysarez','rezerwacje')
 | (_magdst:={? ZK_P.RMAG<>null() || (1+ZK_P.RMAG().TYP)='D' || exec('samgdost','mat_atr') ?}; ~_magdst))
|| _wyn:=0
|? ATR.MJS='REZ' & (REZ.SC<>'' | (';DAPZ'*REZ.M().IDMOB)>1)
|| _wyn:=0
|? ATR.MJS='ZK_P' & ZK_P.RMAG<>null()
|| {? (1+ZK_P.RMAG().TYP)='D'
   || exec('dk_atr_dict','mat_atr');
      _wyn:={? ATR.M_ATR().EDIT || 0 || 1 ?}
   ?}
|? ATR.MJS='ZD_POZ' & ZD_POZ.MG<>null()
|| {? (1+ZD_POZ.MG().TYP)='D' & ZD_POZ.IL_ZRE=0
   || exec('dk_atr_dict','mat_atr');
      _wyn:={? ATR.M_ATR().EDIT || 0 || 1 ?}
   ?}
|? ATR.MJS='ZL' & ZL.STAN<>'N'
|| _wyn:=0
|? ATR.MJS='ZPARN'
|| _wyn:=0
|? ATR.MJS='FAP' & (';GM'*FAP.FAKS().WHERE)>1
|| 0
|? ATR.MJS='KARO' & KARO.TYP='W'
|| 0
|| _wyn:=exec('samgdost','mat_atr');
   {? _wyn || exec('dk_atr_dict','mat_atr') ?};
   {? _wyn & 'ZD_POZ;ZK_P;ZL;ZLIM;PD_K;OFP;TR_ZLM'*ATR.MJS || _wyn:={? ATR.M_ATR().EDIT || 0 || 1 ?} ?}
?};
_wyn


\tat_window_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: 'Okienko przed' dla okien wertowania tabeli TAT (ustawienie ikon)
::----------------------------------------------------------------------------------------------------------------------
_formikon:="
   {? TAT.TYP='L'
   || TAT.TYP:=''; 'xwin16.png:46'
   |? TAT.TYP='D'
   || TAT.TYP:=''; 'xwin16.png:83'
   |? TAT.TYP='C'
   || TAT.TYP:=''; 'xwin16.png:133'
   |? TAT.TYP='T'
   || TAT.TYP:=''; 'xwin16.png:190'
   |? TAT.TYP='B'
   || TAT.TYP:=''; 'xwin16.png:187'
   |? TAT.TYP='S'
   || TAT.TYP:=''; 'xwin16.png:11'
   |? TAT.TYP='P'
   || TAT.TYP:=''; 'xwin16.png:188'
   |? TAT.TYP='U'
   || TAT.TYP:=''; 'xwin16.png:50'
   |? TAT.TYP='X'
   || TAT.TYP:=''; 'xwin16.png:141'
   |? TAT.TYP='O'
   || TAT.TYP:=''; 'xwin16.png:50'
   || TAT.TYP:=''; ''
   ?}
";
TAT.win_fml(cur_win(1,1),TAT,'TYP',,'ICON_BEFORE',_formikon);
{? POMOC.TAT_M='W' & POMOC.W_PORTAL<>'' & TAT.ndx_no('ID_WP2')>0 & ETYPY.W_PORTAL<>'' & 'TPs'*ETYPY.W_PORTAL
|| TAT.index('ID_WP2');
   TAT.prefix(ETYPY.W_PORTAL,ETYPY.ID_WP+ETYP_ATR.ID_WP,)
?};
~~


\sym_dk_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: zwraca symbol DK_C lub jeśli jest oparte o strukture to kolejne wartosci atrybutow
::   WE: _a - ref DK_C
::   WY: symbol cechy
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
DK_C.cntx_psh();
_name:=ref_name(_a);
{? _name<>'' & _name<>DK_C.name() || DK_C.use(_name) ?};
DK_C.clear();
{? DK_C.seek(_a)
|| {? DK_C.M_ATR<>null
   || {! _i..10 |! _war:=form(($('DK_C.WAR'+form(_i,-2,0,'99')))()); _wyn+={? _war<>'' || _war+'  ' || '' ?} !};
      _wyn:=_wyn-2
   || _wyn:=DK_C.SYM
   ?}
?};
DK_C.cntx_pop();
_wyn


\mat_atr_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: wyświetlanie definicji atrybutów
::----------------------------------------------------------------------------------------------------------------------
exec('myDPRINT','object');
_atrmjs:=ATR.MJS;
ATR.MJS:='M_ATR';
POM.ATR_TYP:='C';
POMOC.TAT_M:='L';
M_ATR.index('TYP');
M_ATR.prefix(POM.ATR_TYP);
M_ATR.win_sel('WER');
M_ATR.win_edit('RED');
{? exec('wyp_lic','wyp')='T' & exec('fst_lic','fst')='T'
|| TAT.win_edit('REDW')
?};
M_ATR.select();
ATR.MJS:=_atrmjs;
''


\matrbsel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: definicja atrybutów budowy strukturalnej
::----------------------------------------------------------------------------------------------------------------------
_rodz:=POMOC.RODZ;
_atrmjs:=ATR.MJS;
ATR.MJS:='M_ATR';
POMOC.RODZ:='';
POM.ATR_TYP:='B';
POMOC.TAT_M:='L';
M_ATR.index('TYP');
M_ATR.prefix(POM.ATR_TYP);
M_ATR.win_sel('WER');
M_ATR.win_edit('REDB');
M_ATR.select(,,1);
ATR.MJS:=_atrmjs;
POMOC.RODZ:=_rodz;
''


\rekm_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: rekord przed dla M_ATR
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
{? POM.ATR_TYP='B' || M_ATR.actions('WER','OMATGJ',,1) || M_ATR.actions('WER','',,1) ?};
{? M_ATR.count()
|| 'M_ATR#01#01'
|| ''
?}


\mat_atr_mat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: wyświetlenie materiałów związanych z definicja atrybutu. Dla bieżącego atrybutu.
::   WE: [_a] T-indeksy materiałowe (domyślnie) U-usługi
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>2 || _a:='T' ?} || _a:='T' ?};

VAR_DEL.delete('__mat_ndx','__towusl');

__towusl:=_a;

{? M_ATR.TYP='B'
||
   __mat_ndx:=M.ndx_tmp('',,'RODZ',,,'M_ATR_B',,,'KTM',,)
||
   __mat_ndx:=M.ndx_tmp('',,'RODZ',,,'M_ATR',,,'KTM',,)
?};
M.index(__mat_ndx);
M.prefix(_a,M_ATR.ref);

_m_sel:=M.mk_sel({? __towusl='T' || 'Materiały'@ || 'Usługi'@ ?},'P',0,'#siawdgrtdfwrsk',,,,,'U');
M.win_fld(_m_sel,,'KTM',,,20);
M.win_fld(_m_sel,,'N',,,50);
M.win_fld(_m_sel,,'J','KOD',,10,,,'jm'@);
M.win_act(_m_sel,1,'Formuła','Dołącz'@@,,'Dodanie nowego indeksu'@,,"exec('mat_atr_addmat','mat_atr')",1);
M.win_act(_m_sel,0,'Formuła','Dołącz'@@,,'Dodanie nowego indeksu'@,,"exec('mat_atr_addmat','mat_atr')",1);
M.win_act(_m_sel,0,'Formuła','Usuń'@@,,'Usunięcie połączenia z indeksem'@,,"exec('mat_atr_delmat','mat_atr')");
M.win_act(_m_sel,,'Szukaj');
M.win_act(_m_sel,,'Kolejność');
M.win_sel(_m_sel);
::M.win_edit();
M.select();
M.ndx_drop(__mat_ndx);
VAR_DEL.delete('__mat_ndx','__towusl');
''


\mat_atr_addmat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: dodanie materiałów związanych z definicją atrybutu. Dla bieżącego atrybutu.
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__zaz','__zatw');

__zaz:=tab_tmp(1,'REF','STRING[16]','');
__zatw:=0;

M.cntx_psh();
M.index(__mat_ndx);
M.prefix(__towusl,0);
_m_sel:=M.mk_sel({? __towusl='T' || 'Materiały'@ || 'Usługi'@ ?},'P',0,'#wosajjkrtsswao',,,,,'U');
M.win_fld(_m_sel,BPMN,'ACCESS',,,,,,,,'Czy wybrano [T/N]?'@,2,,"'T'","'N'");
M.win_fld(_m_sel,,'KTM',,,20);
M.win_fld(_m_sel,,'N',,,50);
M.win_fld(_m_sel,,'J','KOD',,10,,,'jm'@);
_formula:="__zaz.clear(); {? ~__zaz.find_key($M.ref()) || __zaz.blank(); __zaz.REF:=$M.ref(); __zaz.add(1) ?}";
M.win_act(_m_sel,,'Formuła','Wybierz'@@,,,_formula,,1,1);
M.win_btn(_m_sel,'text=%1,panel=right,align=begin'['Wybierz'@],'menu:W',,,,,,'noempty');
_formula:="__zaz.clear(); {? __zaz.find_key($M.ref()) || __zaz.del() ?}";
M.win_act(_m_sel,,'Formuła','Odbierz'@@,,,_formula,,,1);
M.win_btn(_m_sel,'text=%1,panel=right,align=begin'['Odbierz'@],'menu:O',,,,,,'noempty');
_formula:="__zatw:=1; sel_exit()";
M.win_act(_m_sel,,'Formuła','Akceptuj'@@,,,_formula,,,,,,'A');
M.win_btn(_m_sel,'text=%1,btn_label_align=center,panel=bottom,align=end'['Akceptuj'@],'menu:A',,,,,,'noempty');
M.win_act(_m_sel,,'Szukaj');
M.win_act(_m_sel,,'Kolejność');
_formula:="__zaz.clear();
          {? __zaz.find_key($M.ref())
          || BPMN.ACCESS:='T';
             M.actions(M.win_sel('?'),,'O',1)
          || BPMN.ACCESS:='N';
             {? M.sel_size
             || M.actions(M.win_sel('?'),,'O',1)
             || M.actions(M.win_sel('?'),,'W',1)
             ?}
          ?}";
M.win_act(_m_sel,,'Rekord',,,,_formula);
M.win_sel(_m_sel);
M.win_btn(_m_sel,'text=%1,btn_label_align=center,panel=bottom,align=end'['A&nuluj'@],'key:Esc');
M.win_act(_m_sel,,'Okienko',,,,,"
   {? ~__zatw
   || FUN.ask('Czy zakończyć wybór indeksów?\nUwaga. Wprowadzone zmiany nie zostaną uwzględnione.'@)
   || 1
   ?}");
{? M.select()
|| __zaz.clear();
   {? __zaz.first()
   || _dkc:=0;
      M.prefix();
      {!
      |? {? M.seek(__zaz.REF)
         || ATR.CZYSADKC:=exec('czysadkc','mat_atr');

            {? M_ATR.TYP='B'
            || {? M.M_ATR_B=null || M.M_ATR_B:=M_ATR.ref ?}
            || {? ATR.CZYSADKC
               || {? M.M_ATR=null || M.M_ATR:=M_ATR.ref ?}
               || _dkc+=1
               ?}
            ?};
            M.put(1)
         ?};
         __zaz.next()
      !};
      {? _dkc
      || FUN.info('Ze względu na to, że wykorzystano cechy dostawy dla indeksu\n'
          'nie powiązano: %1 wskazanych indeksów.'@[form(_dkc,,0,'99')])
      ?}
   ?}
?};
M.cntx_pop();
VAR_DEL.delete('__zaz','__zatw');
''


\mat_atr_delmat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: usunięcie powiązania
::----------------------------------------------------------------------------------------------------------------------
ATR.CZYSADKC:=exec('czysadkc','mat_atr',0);
{? ATR.CZYSADKC
|| {? FUN.ask('Usunąć powiązanie?'@)
   || M.cntx_psh();
      M.prefix();
      M.M_ATR:=null;
      M.put;
      M.cntx_pop()
   ?}
|| FUN.info('Istnieją pozycje dokumentów z cechami dostaw dla danego indeksu.\n'
    'Usunięcie powiązania niemożliwe.'@)
?}


\list_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: wyświetla listę atrybutów na podstawie danej definicji atrybutów
::----------------------------------------------------------------------------------------------------------------------
_msk:=DK_C.name()+3;
_zm_msk:=(1+_msk)='_';
_stoddz:=ST.ODDZ;
_oki:=0;
DK_C.cntx_psh();
{? _zm_msk
|| ODDZ.cntx_psh();
   ODDZ.win_sel('SEL');
   ODDZ.index('KOD');
   ODDZ.prefix();
   ODDZ.first();
   {? ODDZ.size()=1 | ODDZ.select() || _oki:=1; DK_C.use('dokce'+ODDZ.KOD+'__'); ST.ODDZ:=ODDZ.KOD ?};
   ODDZ.cntx_pop()
|| _oki:=1
?};
{? _oki
|| ST.TYPYDOK:=null();
   ATR.MJS:='M_ATR';
   DK_C.cntx_psh();
   DK_C.index('M_ATR');
   DK_C.prefix(M_ATR.ref());
   DK_C.win_patt('SZUKA');
   DK_C.win_edit('RED_ATR');

   _acr:=DK_C.mk_sel('Atrybuty cechy'@,'P',0,'#usjgfhfgjsfhj',,,,,'U');
   _acs:=DK_C.mk_edit('Wartości szukania atrybutów'@,0,'#sawerfgfdsgf');
   {! _i:=1..10
   |!
      {? ($('M_ATR.SL_'+form(_i,-2,,'99')))()<>null
      || ($('DK_C.win_fld(_a,,''WAR'+form(_i,-2,,'99')+''',,,-10,,,'''
          +($('M_ATR.SL_'+form(_i,-2,,'99')+'().NA'))()+''')'))(_acr);
         ($('DK_C.win_efld(_a,,''WAR'+form(_i,-2,,'99')+''',,,20,,,'''
          +($('M_ATR.SL_'+form(_i,-2,,'99')+'().NA'))()+''')'))(_acs)
      ?}
   !};
   DK_C.win_act(_acr,,'Formuła','Dołącz'@@,,,"exec('dk_c_add','mat_atr')",,1);
   DK_C.win_act(_acr,1,'Formuła','Dołącz'@@,,,"exec('dk_c_add','mat_atr')",,1);
   DK_C.win_act(_acr,,'Formuła','Usuń'@@,,,"exec('dk_c_del','mat_atr')");
   DK_C.win_act(_acr,,'Formuła','Popraw'@@,,,"exec('dk_c_put','mat_atr')");
   DK_C.win_act(_acr,,'Formuła','Druku&j'@@,,,"rep_exec('wsp_dkcscean')");
   DK_C.win_act(_acr,,'Rekord',,,,"exec('dk_c_get','mat_atr')");
   DK_C.win_act(_acr,,'Szukaj');
   DK_C.win_act(_acr,,'Kolejność');
   DK_C.win_dict(_acr);
   DK_C.win_patt(_acs);
   DK_C.win_sel(_acr);
   DK_C.select();
   DK_C.cntx_pop();
   {? _zm_msk || DK_C.use('dokce'+_msk) ?}
?};
DK_C.cntx_pop();
ST.ODDZ:=_stoddz;
~~


\prkoddkc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: formuła przed redakcją pola DK_C.KOD
::----------------------------------------------------------------------------------------------------------------------
ATR.FLAG & (M_ATR.get(); {? M_ATR.ref()=null || 1 || M_ATR.FSYM=null & M_ATR.WZ='' ?})


\chk_matr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdza poprawność zdefiniowania DK_C
::   WE: _a - sprawdzenie ilości 0-nie 1-tak
::   WY: ''-gdy OK 'akronim pola',gdy złe
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_wgatr:='';
_uzup:='';
_sprdkc:=0;
_jest:={? ';M_ATR;EANP;INY;EANX;'*ATR.MJS || 0 || #($(ATR.MJS+'.ref()'))() & ($(ATR.MJS+'.DK_C'))()<>null ?};
_ctrl:='DK;INP;EANP;INY;PAL_POZ'*ATR.MJS | (ATR.MJS='FAP' & FAKS.SZ='Z');

_mat:={? ATR.MJS<>'' || exec('acr2acr','mat_atr') || 'M' ?};

_matr:={? ATR.MJS='M_ATR'
       || M_ATR.ref()
       || ($(ATR.MJS+'.'+_mat+'().M_ATR'))()
       ?};
{? _matr=null & DK_C.M_ATR<>null
|| _sprdkc:=1;
   _matr:=DK_C.M_ATR
?};
DK_C.cntx_psh();
{! _i..10
|! _war:=($('ATR.WAR'+form(_i,-2,0,'99')))();
   _mod:={? ATR.MJS='M_ATR'
         || ($('M_ATR.MOD'+form(_i,-2,0,'99')))()
         || ($(ATR.MJS+'.'+_mat+'().M_ATR().MOD'+form(_i,-2,0,'99')))()
         ?};
   _wgatr+=_war;
   _uzup+={? ~_sprdkc
          || {? ATR.MJS='M_ATR'
             || {? ($('M_ATR.SL_'+form(_i,-2,0,'99')))()=null || '-' || {? _war<>'' || '1' || '0' ?} ?}
             || {? ($(ATR.MJS+'.'+_mat+'().M_ATR().SL_'+form(_i,-2,0,'99')))()=null
                || '-'
                || {? _war<>'' | _mod || '1' || '0' ?}
                ?}
             ?}
          || {? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()=null || '-' || {? _war<>'' | _mod || '1' || '0' ?} ?}
          ?};
   ~~
!};
{? ~(_uzup*'1')
|| FUN.info('Brak atrybutów.\nAkceptacja niemożliwa.'@);
   _wyn:='WAR01'
|? _ctrl & (_nr:=(_uzup*'0'))>0
|| FUN.info('Brak atrybutu: '@+($(ATR.MJS+'.'+_mat+'().M_ATR().SL_'+form(_nr,-2,0,'99')+'().NA'))()+'.\n'
    +'Akceptacja niemożliwa.'@);
   _wyn:='WAR'+form(_nr,-2,0,'99')
|? _a & ATR.ATR_IL<=0
|| FUN.info('Należy podać ilość większą od zera.'@);
   _wyn:='ATR_IL'
?};
DK_C.cntx_pop();
_wyn


\dkcscean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: wydruk kodów kreskowych
::---------------------------------------------------------------------------------------------------------------------
rep_exec('wsp_dkcscean')


\ae_dk_ce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: Po redagowaniu pola DK.DK_C kontrola tylko dla ATR.MJS='REZ'
::   WY: 1/0 lub -1-błąd i blokuj
::  OLD: \ae_dk_ce/magazyn2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? ATR.MJS='REZ' & REZ.DK_C<>null
|| {? BEER.OKZKP<>0
   || {? ZK_P.DK_C<>null
      || {? ~exec('czyzawch','mat_atr',ZK_P.DK_C,REZ.DK_C)
         || _uzup:={? REZ.DK_C().M_ATR().MOD='T' || REZ.DK_C().UMOD || REZ.DK_C().UZUP ?};
            _atr:='Pozycja zamówienia || Pozycja rezerwacji\n';
            _i:=0;
            {!
            |? _i+=1;
               {? (1+_uzup)<>'-'
               || _uzup:=1-_uzup;
                  _wzkp:='ZK_P.DK_C().WAR'+form(_i,-2,0,'99');
                  _wrez:='REZ.DK_C().WAR'+form(_i,-2,0,'99');
                  _atr+={? ($_wzkp)()='' || '<dowolna wartość>' || ($_wzkp)() ?}+' || '+
                        {? ($_wrez)()='' || '<dowolna wartość>' || ($_wrez)() ?}+'\n'
               || _i:=10
               ?};
               _i<10
            !};
            FUN.info('Podana cecha nie jest zgodna z cechą podaną w pozycji zamówienia\n'
             '(zgodność podanych atrybutów cechy na pozycji zamówienia z atrybutami na pozycji rezerwacji).\n'
             '%1\n'
             'Przypisanie podanej cechy niemożliwe.'@[_atr]);
            _wyn:=0
         ?}
      ?}
   || {? ATR.DKCZKP<>null
      || {? ~exec('czyzawch','mat_atr',ATR.DKCZKP,REZ.DK_C)
         || _uzup:={? REZ.DK_C().M_ATR().MOD='T' || REZ.DK_C().UMOD || REZ.DK_C().UZUP ?};
            _atr:='Pozycja zamówienia || Pozycja rezerwacji\n';
            _i:=0;
            {!
            |? _i+=1;
               {? (1+_uzup)<>'-'
               || _uzup:=1-_uzup;
                  _wzkp:='ATR.DKCZKP().WAR'+form(_i,-2,0,'99');
                  _wrez:='REZ.DK_C().WAR'+form(_i,-2,0,'99');
                  _atr+={? ($_wzkp)()='' || '<dowolna wartość>' || ($_wzkp)() ?}+' || '+
                        {? ($_wrez)()='' || '<dowolna wartość>' || ($_wrez)() ?}+'\n'
               || _i:=10
               ?};
               _i<10
            !};
            FUN.info('Podana cecha nie jest zgodna z cechą podaną w pozycji zamówienia\n'
             '(zgodność podanych atrybutów cechy na pozycji zamówienia z atrybutami na pozycji rezerwacji).\n'
             '%1\n'
             'Przypisanie podanej cechy niemożliwe.'@[_atr]);
            _wyn:=0
         ?}
      ?}
   ?}
|| {? ATR.MJS='DK' & (1+DK.N().MAG().TYP)='D' & DK.M<>null & DK.M().IDMOB='A' & DK.DK_C<>null
   || {? ~exec('czydkc_m','material',$DK.DK_C,DK.M)
       & ~({? DK.DK_C().M_ATR().MOD='T' || DK.DK_C().UMOD || DK.DK_C().UZUP ?}*'0')
      || _scean:=exec('mkodkKODK','kody_kresk',DK.M);
         exec('mkodkadd','kody_kresk',DK.M,_scean,$DK.DK_C)
      ?};
      DK.SCEAN:=exec('zwrdkc_m','material',$DK.DK_C,DK.M)
   |? ATR.MJS='DK' & (1+DK.N().MAG().TYP)='D' & DK.M<>null & DK.M().IDMOB='D' & DK.M().IDZP & DK.DK_C<>null
   || DK.SCEAN:=exec('zwrdkc_m','material',$DK.DK_C,DK.M);
      _tw:=exec('twSCEANZP','magdok_wspolne',DK.SCEAN,DK.PRDK,DK.M);
      {? _tw<>date(1,1,1) || DK.TW:=EANX.TW:=_tw ?}
   |? ATR.MJS='INP'
   || _scean:=INP.SCEAN;
      {? INP.DK_C<>null() || INP.SCEAN:=exec('zwrdkc_m','material',$INP.DK_C,INP.M) ?};
      {? INP.SCEAN='' || INP.SCEAN:=_scean ?}
   |? ATR.MJS='INY'
   || _scean:=INY.SCEAN;
      {? INY.DK_C<>null() || INY.SCEAN:=exec('zwrdkc_m','material',$INY.DK_C,INY.M) ?};
      {? INY.SCEAN='' || INY.SCEAN:=_scean ?}
   ?};
   _srsr:=exec('atr_get_srsr','mat_atr',DK.M().M_ATR);
   {? ATR.MJS='DK' & DK.DK_C<>null & _srsr
   || exec('srsr_sync_dk','mat_atr',_srsr);
      DK.WAR:=(DK.IL*DK.C)$2;
      {? DK.N().MAG().SKL<>'T'
      || DK.SCC:=DK.C
      ?};
      DK.SCWAR:=(DK.IL*DK.SCC)$2;
      exec('obl_mwb','magdok_poz')
   ?};
   {? _wyn>0 &
      ATR.MJS='DK' &
      exec('nd_is_odp','magdok_wspolne',DK.N) &
      DK.N().TYP().ZLEC='T' &
      DK.ZL<>null() &
      DK.DK_C().ZPARN<>null()
   || ZL.cntx_psh();
      ZPARN.cntx_psh();
      ZPARN.index('ZL');
      ZPARN.prefix(DK.ZL,DK.DK_C().ZPARN().SYM,);
      {? ZPARN.first()=0
      || _msg:='Na zleceniu brak partii o podanym symbolu.\n\n'
               'Zlecenie: %1\n'
               'Symbol partii: %2\n\n'
               'Wymagane podanie symbolu partii występującej na zleceniu,\n'
               'lub wybór partii ze słownika (F3).'@[DK.ZL().SYM,DK.DK_C().ZPARN().SYM];
         FUN.emsg(_msg);
         _wyn:=-1
      ?};
      ZPARN.cntx_pop();
      ZL.cntx_pop()
   ?};

   {? ATR.MJS<>'M_ATR' & ATR.MJS<>'' & ($(ATR.MJS+'.DK_C'))()<>null() & ($(ATR.MJS+'.DK_C().M_ATR'))()<>null()
   || ($(ATR.MJS+'.DK_C().M_ATR().SL_01'))();
      {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($(ATR.MJS+'.DK_C().WAR'+form(_i,-2,,'99')))() !}
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
   ?};
   win_disp()
?};
{? _wyn || exec('set_efld_opt','mat_atr',ATR.MJS) ?};
_wyn


\czyzawch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdza czy podana cecha zawiera się w innej .. czy _a zawiera się w _b
::   WE: _a - cecha do sprawdzenia
::       _b - cecha sprawdzana
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? _a=null
||
:: brak cechy do sprawdzenia = zawsze spelnione
   _wyn:=1
|? _b=null
||
:: brak cechy sprawdzanej = zawsze nieprawda
   _wyn:=0
|? $_a=$_b
||
:: te same cechy
   _wyn:=1
|| _symdkc:='';
   _war:=obj_new(10); {! _i..10 |! _war[_i]:='' !};
   DK_C.cntx_psh();
   _name:=ref_name(_a);
   {? _name<>'' & _name<>DK_C.name() || DK_C.use(_name) ?};
   DK_C.clear();
   {? DK_C.seek(_a)
   || _matr:=DK_C.M_ATR;
      {? _matr<>null()
      || {! _i..10
         |! _czy:=1+((_i-1)-{? DK_C.M_ATR().MOD='T' || DK_C.UMOD || DK_C.UZUP ?});
            _war[_i]:=_czy+{? _czy='1' || ($('DK_C.WAR'+form(_i,-2,0,'99')))() |? _czy='' || '?' || '' ?}
         !}
      || _symdkc:=DK_C.SYM
      ?}
   ?};
   _name:=ref_name(_b);
   {? _name<>'' & _name<>DK_C.name() || DK_C.use(_name) ?};
   DK_C.clear();
   {? DK_C.seek(_b)
   || {? _matr=DK_C.M_ATR
      || {? _matr=null()
         || _wyn:=DK_C.SYM=_symdkc
         || _i:=0; _ok:=1;
            {!
            |? _i+=1;
               {? (1+_war[_i])='1' || _ok:=($('DK_C.WAR'+form(_i,-2,0,'99')))()=(1-_war[_i]) ?};
               _ok & _i<10
            !};
            _wyn:=_ok
         ?}
      ?}
   ?};
   DK_C.cntx_pop();
   obj_del(_war)
?};
_wyn


\zak2dk_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdza podanie atrybutow dostaw dla pozycji faktury zakupowej
::   WY: 1-jest OK 0-nie jest dobrze
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
FAKS.cntx_psh();
FAP.cntx_psh();
FAP.index('FAP');
FAP.prefix(FAKS.ref());
{? FAP.first() & FAP.FAKS().T().ZAL='N'
|| {!
   |? {? FAP.M().RODZ='T'
      || _wyn:=FAP.M().M_ATR=null() | (FAP.M().M_ATR<>null
             & FAP.DK_C<>null & ~({? FAP.DK_C().M_ATR().MOD='T' || FAP.DK_C().UMOD || FAP.DK_C().UZUP ?}*'0'))
      ?};
      _wyn & FAP.next()
   !}
?};
FAKS.cntx_pop();
FAP.cntx_pop();
_wyn


\czysadkc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdzenie czy dla danego M uzyto DK_C
::   WE: [_a] - 0-pomijac czy istnieja DK_C na podstawie M_ATR 1-nie (domyslnie)
::   WY: 0-tak 1-nie
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};

_ref_m:=M.ref();
_wyn:=1;
_ref_a:=M.M_ATR;
:: kontrola dla liczników odwołań w innych firmach
_count:=0;
{? _ref_a<>null() & M.count()>1
|| _count+=(M.count()
           -exec('FindInSet','#table','MKODK','M',M.ref(),,"MKODK.prefix(M.ref());MKODK.size",,,0)
           -exec('FindInSet','#table','MDOST','MREF',M.ref(),,"MDOST.prefix(M.ref());MDOST.size",,,0)
           -exec('FindInSet','#table','MJM','JM',M.ref(),,"MJM.prefix(M.ref());MJM.size",,,0)
           -exec('FindInSet','#table','MX','M',M.ref(),,"MX.prefix(M.ref());MX.size",,,0)
           -exec('FindInSet','#table','M_OPAKOW','M_OPAKOW',M.ref(),,"M_OPAKOW.prefix(M.ref());M_OPAKOW.size",,,0)
           -exec('FindInSet','#table','TRANSLAT','M',M.ref(),,"TRANSLAT.prefix(M.ref());TRANSLAT.size",,,0)
           -exec('FindInSet','#table','MST','MG',M.ref(),,"MST.prefix(M.ref());MST.size",,,0)
           -exec('FindInSet','#table','MZ','MZ',M.ref(),,"MZ.prefix(M.ref());MZ.size",,,0)
           -exec('FindInSet','#table','M_KH_SV','MAT',M.ref(),,"M_KH_SV.prefix(M.ref());M_KH_SV.size",,,0)
           -exec('FindInSet','#table','M_SV','OD',M.ref(),'0',"M_SV.prefix(\'0\',M.ref());M_SV.size",,,0)
           -exec('FindInSet','#table','CNM','M',M.ref(),,"CNM.prefix(M.ref());CNM.size",,,0)
           -exec('FindInSet','#table','BADMSEH','M',M.ref(),,"BADMSEH.prefix(M.ref());BADMSEH.size",,,0)
           -exec('FindInSet','#table','PTC','TO',M.ref(),,"PTC.prefix(M.ref());PTC.size",,,0))
?};

:: sprawdzenie w tabeli DK_C czy cos ma przypisane wg pola DK_C.M_ATR
{? _a & _ref_a<>null
|| DK_C.cntx_psh();
   DK_C.index('M_ATR');
   DK_C.prefix(_ref_a);
   _wyn:=~DK_C.first();
   DK_C.cntx_pop()
?};

{? _count>0 || _wyn:=0 ?};
{? _wyn
||
::    tabele niemaskowalne lub o stalej masce
   ODZAMPT.cntx_psh();
   ZK_P.cntx_psh();
   ZD_POZ.cntx_psh();
   PAL_POZ.cntx_psh();
   OFP.cntx_psh();
   INP.cntx_psh();
   ZL.cntx_psh();
   REZ.cntx_psh();
   PD_K.cntx_psh();
   TCHMAT.cntx_psh();
   TMAT.cntx_psh();

   _wyn:=exec('czytawar','mat_atr','ODZAMPT','MAT','DK_C',_ref_m,null);
   {? _wyn || _wyn:=exec('czytawar','mat_atr','ZK_P','MATMAT','DK_C',_ref_m,null) ?};
   {? _wyn || _wyn:=exec('czytawar','mat_atr','ZD_POZ','ZRE','DK_C',_ref_m,null) ?};
   {? _wyn || _wyn:=exec('czytawar','mat_atr','PAL_POZ','POZKTM','DK_C',_ref_m,null) ?};
   {? _wyn || _wyn:=exec('czytawar','mat_atr','OFP','MAT','DK_C',_ref_m,null) ?};
   {? _wyn || _wyn:=exec('czytawar','mat_atr','ZL','KTM','DK_C',_ref_m,null) ?};
   {? _wyn || _wyn:=exec('czytawar','mat_atr','REZ','M','DK_C',_ref_m,null) ?};
   {? _wyn || _wyn:=exec('czytawar','mat_atr','PD_K','M','DK_C',_ref_m,null) ?};
   {? _wyn || _wyn:=exec('czytawar','mat_atr','TCHMAT','KTAN','DK_C',_ref_m,null) ?};
   {? _wyn || _wyn:=exec('czytawar','mat_atr','TMAT','KTAN','DK_C',_ref_m,null) ?};
   {? _wyn || _wyn:=exec('czytawar','mat_atr','TMAT','KTAN','ATR_MASK',_ref_m,'T',1) ?};
   {? _wyn
   || _tab:=tab_tmp(1,'GRP','STRING[16]','');
      TTGP.index('PT');
      TTGP.prefix(_ref_m);
      {? TTGP.first()
      || {!
         |? {? TTGP.GR<>null() & (_tab.clear(); ~_tab.find_key($TTGP.GR))
            || _wyn:=exec('czytawar','mat_atr','TMAT','GN','ATR_MASK',TTGP.GR,'T',1);
               _tab.blank();
               _tab.GRP:=$TTGP.GR;
               _tab.add(1)
            ?};
            _wyn & TTGP.next()
         !}
      ?};
      obj_del(_tab)
   ?};

   ODZAMPT.cntx_pop();
   ZK_P.cntx_pop();
   ZD_POZ.cntx_pop();
   PAL_POZ.cntx_pop();
   OFP.cntx_pop();
   INP.cntx_pop();
   ZL.cntx_pop();
   REZ.cntx_pop();
   PD_K.cntx_pop();
   TCHMAT.cntx_pop();
   TMAT.cntx_pop()
?};

{? _wyn
||
:: kontrola po kolejnych tabelach maskowalnych
   OKR.cntx_psh();
   DK.cntx_psh();
   FAP.cntx_psh();
   ZK_P.cntx_psh();
   ZD_POZ.cntx_psh();
   PAL_POZ.cntx_psh();
   PX_OBJ.cntx_psh();
   SC.cntx_psh();
   INP.cntx_psh();
   REZ.cntx_psh();
   TCHMAT.cntx_psh();
   TMAT.cntx_psh();

   ODDZ.cntx_psh();
   ODDZ.index('KOD2');
   ODDZ.prefix();
   _loop:=ODDZ.first();
   {!
   |? _loop
   |!
      OKR.index('MC');
      OKR.prefix(REF.FIRMA,1);
      {? OKR.first()
      || {!
         |? exec('dkc_open','open_tab',ODDZ.KOD,2-$(OKR.ROK));

            _wyn:=exec('czytawar','mat_atr','DK','MAT','DK_C',_ref_m,null);
            {? _wyn || _wyn:=exec('czytawar','mat_atr','FAP','M','DK_C',_ref_m,null) ?};
            {? _wyn || _wyn:=exec('czytawar','mat_atr','ZK_P','MATMAT','DK_C',_ref_m,null) ?};
            {? _wyn || _wyn:=exec('czytawar','mat_atr','ZD_POZ','ZRE','DK_C',_ref_m,null) ?};
            {? _wyn || _wyn:=exec('czytawar','mat_atr','SC','SD','DK_C',_ref_m,null) ?};
            {? _wyn || _wyn:=exec('czytawar','mat_atr','INP','M','DK_C',_ref_m,null) ?};
            {? _wyn || _wyn:=exec('czytawar','mat_atr','PAL_POZ','POZKTM','DK_C',_ref_m,null) ?};
            {? _wyn || _wyn:=exec('czytawar','mat_atr','PX_OBJ','MAT','DK_C',_ref_m,null) ?};
            {? _wyn || _wyn:=exec('czytawar','mat_atr','TCHMAT','KTAN','DK_C',_ref_m,null) ?};
            {? _wyn || _wyn:=exec('czytawar','mat_atr','TMAT','KTAN','DK_C',_ref_m,null) ?};
            {? _wyn || _wyn:=exec('czytawar','mat_atr','TMAT','KTAN','ATR_MASK',_ref_m,'T',1) ?};
            {? _wyn
            || _tab:=tab_tmp(1,'GRP','STRING[16]','');
               TTGP.index('PT');
               TTGP.prefix(_ref_m);
               {? TTGP.first()
               || {!
                  |? {? TTGP.GR<>null() & (_tab.clear(); ~_tab.find_key($TTGP.GR))
                     || _wyn:=exec('czytawar','mat_atr','TMAT','GN','ATR_MASK',TTGP.GR,'T',1);
                        _tab.blank();
                        _tab.GRP:=$TTGP.GR;
                        _tab.add(1)
                     ?};
                     _wyn & TTGP.next()
                  !}
               ?};
               obj_del(_tab)
            ?};

            _wyn & OKR.next()
         !}
      ?};
      _loop:=_wyn & ODDZ.next()
   !};
   ODDZ.cntx_pop();
   DK.cntx_pop();
   FAP.cntx_pop();
   ZK_P.cntx_pop();
   ZD_POZ.cntx_pop();
   PAL_POZ.cntx_pop();
   PX_OBJ.cntx_pop();
   SC.cntx_pop();
   INP.cntx_pop();
   REZ.cntx_pop();
   TCHMAT.cntx_pop();
   TMAT.cntx_pop();
   OKR.cntx_pop()
?};
{? _wyn & _count || _wyn:=0 ?};
_wyn


\czytawar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy wartosc podanego pola jest rowna podanej wartosci dla wszystkich pol dziedziny
::   WE: _a - akronim tabeli
::       _b - akronim indeksu
::       _c - pole do kontroli
::       _d - wartosc prefiksu
::       _e - wartosc pola
::       _f - 0(domyslnie czy jest rowna) 1(czy nie zawiera)
::   WY: 1-tak 0-nie
::  OLD: \czytawar/podstawy.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=6 || {? type_of(_f)<>1 || _f:=0 ?} || _f:=0 ?};

_wyn:=1;
_tab:=$(_a);
_ind:=$(_a+'.index('''+_b+''')');
_fld:=$(_a+'.'+_c);

{| _tab()
|! cntx_psh;
   clear;
   _ind();
   prefix(_d);
   {? ~_f
   || {? first || _wyn:=~find_tab('first',_c,,'<>',_e) ?}
   || {? first || _wyn:=~find_tab('first',_c,,':-',_e) ?}
   ?};

::   {? first()
::   || {!
::      |? _wyn:={? ~_f || _fld()=_e || _fld()='' | ~(_fld()*_e) ?};
::        _wyn & next()
::      !}
::   ?};
   cntx_pop
|};
_wyn


\dkc_has_part
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Sprawdza czy dana cecha ma wypełnioną wartość typu 'partia'
::       Taka sytuacja powinna byc niedopuszczalna np dla cechy zlecenia
::   WE: _a - DK_C.ref()
::   WY: 0 - brak wartości typu partia
::       1 - wartość typu partia jest niepusta
::  OLD: \dkc_has_part/zparn.fml
::----------------------------------------------------------------------------------------------------------------------
_dkc:=_a;

_result:=0;

DK_C.cntx_psh(); DK_C.clear();
{? DK_C.seek(_dkc)
||
   _buffer:=exec('buffer','mat_atr');
   _buffer.get_dkc();
   _result:=_buffer.has_part()
?};
DK_C.cntx_pop();
_result


\m_atr_sprdod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [12.10]
:: OPIS: sprawdza czy jest rekord w m_atr dla podanych parametrów
::   WE:  _a - WAR01
::        _b - WAR02
::        _c - WAR03
::        _d - WAR04
::        _e - WAR05
::        _f - WAR06
::        _g - WAR07
::        _h - WAR08
::        _i - WAR09
::        _j - WAR10
::        _k - m_atr ref
::        _l - partia ref
::        [_m] - wartość pola KOD
::   WY: ref dodanego lub znalezionego DK_C
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_m')=type_of('') || _m || '' ?};

_wyn:=null;

_partia:=null();
{? var_pres('_l')>0
||
   {? type_of(_l)=type_of('')
   || _partia:=exec('zwrref_part','zl_partie',_l)
   |? type_of(_l)=type_of(ZPARN.ref())
   || _partia:=_l
   ?}
?};

DK_C.cntx_psh();
DK_C.index('ATR_WAR');
DK_C.prefix(_a,_b,_c,_d,_e,_f,_g,_h,_i,_j,_k);
{? DK_C.first()
|| _wyn:=DK_C.ref
|| _uzup:='';
   _umod:='';
   DK_C.blank();
   DK_C.WAR01:=_a;
   DK_C.WAR02:=_b;
   DK_C.WAR03:=_c;
   DK_C.WAR04:=_d;
   DK_C.WAR05:=_e;
   DK_C.WAR06:=_f;
   DK_C.WAR07:=_g;
   DK_C.WAR08:=_h;
   DK_C.WAR09:=_i;
   DK_C.WAR10:=_j;
   DK_C.M_ATR:=_k;
   DK_C.SYM:=$DK_C.tm_stamp;
   {! _ii:=1..exec('il_atr','mat_atr')
   |! _mod:=($('DK_C.M_ATR().MOD'+form(_ii,-2,,'99')))();
      _uzup+={? ($('DK_C.M_ATR().SL_'+form(_ii,-2,0,'99')))()<>null
             || {? _[_ii]<>'' | _mod || '1' || '0' ?}
             || '-'
             ?};
      _umod+={? ($('DK_C.M_ATR().SL_'+form(_ii,-2,0,'99')))()<>null
             || {? _[_ii]<>'' || '1' || '0' ?}
             || '-'
             ?}
   !};
   DK_C.UZUP:=_uzup;
   DK_C.UMOD:=_umod;
   DK_C.ZPARN:=_partia;
   DK_C.KOD:={? _kod='' || exec('kod2matr','mat_atr') || _kod ?};
   {? DK_C.add(1)
   || _wyn:=DK_C.ref
   ?}
?};
DK_C.cntx_pop();
_wyn


\partia_num_matr
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Zwraca numer atrybutu typu 'partia' we wzorcu atrybutow
::   WE: _a - M_ATR
::   WY: 0 - brak atrybutu typu partia w podanym wzorcu
::       lub
::       INTEGER 1..10 - numer atrybutu
::  OLD: \partia_num_matr/zparn.fml
::----------------------------------------------------------------------------------------------------------------------
_matr:=_a;

_result:=0;

M_ATR.cntx_psh(); M_ATR.clear();
TAT.cntx_psh();
{? M_ATR.seek(_matr)
|| _max:=exec('il_atr','mat_atr');
   {! _it:=1.._max
   |? _result=0
   |! _rule:=$('M_ATR.SL_'+form(_it,-2)+'().TYP');
      {? _rule()='P'
      || _result:=_it
      ?}
   !}
?};
M_ATR.cntx_pop();
TAT.cntx_pop();
_result


\uzup_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: Sprawdza ktore pole nie zostalo wypelnione jak wszystkie sa wypelnione to domyslnie ustawia na WAR01
::   WY: 'WAR'+nr pola
::----------------------------------------------------------------------------------------------------------------------
_wyn:='WAR01';
_i:=0;
{!
|? _i+=1;
   {? ($('ATR.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null()
   || _mod:=($('ATR.M_ATR().MOD'+form(_i,-2,0,'99')))();
      {? ~_mod & ($('ATR.WAR'+form(_i,-2,,'99')))()=''
      || _wyn:='WAR'+form(_i,-2,,'99');
         0
      || _i<10
      ?}
   || 0
   ?}
!};
{? _wyn<>'' & ~exec('be_atr_war','mat_atr',_wyn) || _wyn:={? ATR.MJS<>'' || exec('acr2acr','mat_atr') || 'M' ?} ?};
_wyn


\pwindatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: ustawia zmienna dla DK
::----------------------------------------------------------------------------------------------------------------------
ATR.INDATR:=(1+exec('ok_dk','magdok_poz',1));
{? ATR.INDATR=''
|| _dstbpal:=(1+ND.MAG().TYP)='D' & ND.MAG().PAL='N' & DK.PLUS='T';
   ATR.INDATR:={? _dstbpal & (DK.M().M_ATR<>null | DK.M().IDMOB='A')
             & (DK.DK_C=null | {? DK.DK_C().M_ATR().MOD='T' || DK.DK_C().UMOD || DK.DK_C().UZUP ?}*'0')
               || 'X'
               |? _dstbpal & DK.PLUS='T'
                & {? DK.M().M_ATR<>null
                  || DK.DK_C<>null & ~({? DK.DK_C().M_ATR().MOD='T' || DK.DK_C().UMOD || DK.DK_C().UZUP ?}*'0')
                  || 1
                  ?}
               || 'N'
               || ''
               ?};
   {? (ATR.INDATR='' | ATR.INDATR='N') & _dstbpal & DK.PLUS='T' & DK.PRDK<>DK.SRDK & DK.M().IDMOB='D'
    & DK.SCEAN<>exec('FindAndGet','#table',DK,DK.PRDK,,"SCEAN",'')
   || ATR.INDATR:='5'
   ?}
?};
ATR.INDATR


\matr_dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Atrybuty dla tabeli DK
::----------------------------------------------------------------------------------------------------------------------
_akc:=DK.N().Z='T';
_flag_ed:=ATR.FLAG_ED;
_flag:=ATR.FLAG;
ATR.FLAG_ED:=0;
ATR.FLAG:=0;
ATR.MJS:='DK';
ATR.FLAG_PAR:=0;

_wyn:=0;
_m_atr:=DK.M().M_ATR;
{? _m_atr<>null
|| DK.M().M_ATR().SYM;

:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','DK');

:: Obsluga dla zlecenia produkcyjnego
   {? _akc<1 & DK.ZL<>null()
   ||
      ATR.FLAG_PAR:=1;
::    podczytanie wartosci atrybutow zlecenia
      exec('merge_atr','mat_atr','ZL',0);

::    Partie na zleceniu
      {? exec('zlec_party','zl_common',DK.ZL)>0
      ||
::       Ustawiam wartosc zmiennej ATR na symbol wybranej partii
         _sym_part:=exec('dkc_partia_sym','zl_partie',DK.DK_C);
         {? _sym_part<>''
         || exec('atr_set_partia','mat_atr',_m_atr,_sym_part)
         || exec('atr_set_partia','mat_atr',_m_atr,ATR.ZPARN_DK().SYM)
         ?}
      ?}
   ?};

   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW','state=normal');
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
ATR.FLAG_PAR:=0;
ATR.FLAG_ED:=_flag_ed;
ATR.FLAG:=_flag;
_wyn


\matr_rp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [WH] [20.42]
:: OPIS: Atrybuty dla dokumentów RP
::       Zakłada rekord DK_C i przypisuje go w w pole .DK_C tabeli wskazywanej przez ATR.MJS
::   WE: _a - ZL.ref() - zlecenie
::       [_b] - DK_C.ref() - cecha
::   WY: DK_C.ref lub null
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_dk_c:=null();
{? var_pres('_b')=type_of(DK_C.ref())
|| _dk_c:=_b
?};
_wyn:=null;

M_ATR.cntx_psh();
M_ATR.prefix();
DK_C.cntx_psh();
DK_C.prefix();
ZL.cntx_psh(); ZL.prefix();
{? ZL.seek(_zl)
||
   _flag_ed:=ATR.FLAG_ED;
   _flag:=ATR.FLAG;
   ATR.FLAG_ED:=0;
   ATR.FLAG:=0;
   ATR.MJS:='DK';
   ATR.FLAG_PAR:=0;

   {? _dk_c<>null()
   || _m_atr:=DK_C.M_ATR
   || _m_atr:=ZL.KTM().M_ATR
   ?};
   {? _m_atr<>null
   ||
      {? M_ATR.seek(_m_atr)
      ||
::       podczytanie wartosci atrybutow
         {? _dk_c<>null()
         || exec('ustawatr','mat_atr',,_dk_c)
         ?};

::       Obsluga dla zlecenia produkcyjnego
         ATR.FLAG_PAR:=1;
::       podczytanie wartosci atrybutow zlecenia
         exec('merge_atr','mat_atr','ZL',0);

::       Partie na zleceniu
         {? exec('zlec_party','zl_common',ZL.ref())>0
         ||
::          Ustawiam wartosc zmiennej ATR na symbol wybranej partii
            _sym_part:=exec('dkc_partia_sym','zl_partie',_dk_c);
            {? _sym_part<>''
            || exec('atr_set_partia','mat_atr',_m_atr,_sym_part)
            || exec('atr_set_partia','mat_atr',_m_atr,ATR.ZPARN_DK().SYM)
            ?}
         ?};
         exec('set_efld_opt','mat_atr',ATR.MJS,DK_C,'RED_ATR');
         DK_C.btn_eopt('RED_ATR','AKC','state=normal');
         DK_C.btn_eopt('RED_ATR','NEW','state=normal');
         DK_C.btn_eopt('RED_ATR','INF','state=normal');
         DK_C.win_edit('RED_ATR');
         _valid:="
            _flag:=ATR.FLAG;
            ATR.FLAG:=1;
            _wyn:='';
            _pole:=exec('akcepatr','mat_atr');
            _wyn:={? (4+_pole)='edit'
                  || 5-_pole
                  || ''
                  ?};
            {? _wyn=''
            ||
::             Jeżeli walidacja ok, to przywracam poprzednią wartość zmiennej
::             jeżeli nie ok, to zostawiam w trybie edycji żeby móc wrócić do redagowanego
::             pola
               ATR.FLAG:=_flag
            ?};
            _wyn
         ";
         {? DK_C.edit(_valid)
         || _wyn:=($(ATR.MJS+'.DK_C'))()
         || exec('retwar_a','mat_atr',0)
         ?}
      ?}
   || FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
   ?};
   ATR.FLAG_PAR:=0;
   ATR.FLAG_ED:=_flag_ed;
   ATR.FLAG:=_flag
?};
ZL.cntx_pop();
DK_C.cntx_pop();
M_ATR.cntx_pop();
_wyn


\merge_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [WH] [12.30]
:: OPIS: Ustawia wartosci atrybutow wg zadanego DK_C
::       Jezeli przekazany pusty DK_C to nie czyszcze wartosci, w zaleznosci od argumentu _b
::       nadpisuje lub nie, wartosc atrubutu w zmiennej ATR
::   WE: _a - acronim tabeli
::       [_b] - INTEGER -  0 - jezeli w ATR.WARx ma niepusta wartosc to nie nadpisywac tej wartosci z DK_C
::                        [1] - do ATR.WARx zawsze wpisywac wartosc z przekazanego DK_C
::----------------------------------------------------------------------------------------------------------------------
_ref:=($(_a+'.DK_C'))();
_overwrite:=1;
{? var_pres('_b')=type_of(0)
|| _overwrite:=_b
?};

DK_C.cntx_psh();
DK_C.clear();
{? DK_C.seek(_ref)
|| _rule:='';
   {! _it:=1..10
   |! _num:=form(_it,-2,0,'99');
      _rule+={? _overwrite>0
             ||
::              Jezeli nadpisuje to do ATR przypisuje DK_C
                'ATR.WAR'+_num+':=DK_C.WAR'+_num+';\n'
             ||
::              A tutaj sprawdzam najpierw czy w ATR jest pusto i ewentualnie przypisuje DK_C
                '{? ATR.WAR'+_num+'='''' || ATR.WAR'+_num+':=DK_C.WAR'+_num+' ?};\n'
             ?}
   !};
   ($(_rule+'~~'))()
?};
DK_C.cntx_pop();
~~


\atr_set_partia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Ustawia wartosc zmiennej ATR.WARx jako symbol przekazanej partii
::   WE: _a - M_ATR.ref() - wzorzec atrybutow
::       _b - STRING - symbol partii
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \atr_set_partia/zparn.fml
:: DOST: PUBLIC
::----------------------------------------------------------------------------------------------------------------------
_matr:=_a;
_part_sym:=_b;

_result:=0;

M_ATR.cntx_psh(); M_ATR.clear();
{? M_ATR.seek(_matr)
||
   _max:=exec('il_atr','mat_atr');
   {! _it:=1.._max
   |? _result=0
   |! _rule_chk:=$('M_ATR.SL_'+form(_it,-2)+'().TYP');
      _rule_set:=$('ATR.WAR'+form(_it,-2)+':=_a');
      {? _rule_chk()='P'
      || _rule_set(_part_sym);
         _result:=1
      ?}
   !}
?};
M_ATR.cntx_pop();
_result


\renewatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Zmiana zawartosci
::----------------------------------------------------------------------------------------------------------------------
DK_C.btn_eopt('RED_ATR','AKC','default=0');
ATR.FLAG:=1;
exec('bd_mat_atr_slo','mat_atr',1);
:: Sprawdzam do ktorego pola mozna zwrocic redagowanie
_result:=exec('chk_red_field','mat_atr');
_result


\odd_matr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: tworzy analogiczna ceche w drugim oddziale
::   WE: _a - nowy oddzial
::       _b - stary oddzial
::       _c - cecha
::   WY: ref nowej cechy
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
{? _a='' | _a=_b | _c=null
|| _wyn:=_c
|| DK_C.cntx_psh();
   DK_C.clear();
   {? DK_C.seek(_c)
   || _sym:=DK_C.SYM;
      _naz:=DK_C.NAZ;
      _opi:=DK_C.O;
      _m_atr:=DK_C.M_ATR;
      _zparn:=DK_C.ZPARN;
      {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():=($('DK_C.WAR'+form(_i,-2,0,'99')))() !};
      _msk:=DK_C.name();
      _new:=(_msk-3)+_a+(_msk+2);
      DK_C.use(_new);
      {? _m_atr<>null
      || _wyn:=exec('m_atr_sprdod','mat_atr',ATR.WAR01,ATR.WAR02,ATR.WAR03,ATR.WAR04,ATR.WAR05,ATR.WAR06,ATR.WAR07
                ,ATR.WAR08,ATR.WAR09,ATR.WAR10,_m_atr,_zparn)
      || _wyn:=exec('FindInSet','#table','DK_C','SYM',_sym,_sym);
         {? _wyn=null
         || DK_C.clear();
            DK_C.blank();
            DK_C.SYM:=_sym;
            DK_C.NAZ:=_naz;
            DK_C.O:=_opi;
            DK_C.ZPARN:=_zparn;
            DK_C.KOD:=exec('kod2matr','mat_atr');
            _wyn:={? DK_C.add(1) || DK_C.ref() || null ?}
         ?}
      ?}
   ?};
   DK_C.cntx_pop()
?};
_wyn


\atrnarch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: archwizacja cech danego dokumentu, dodatkowo ustawiane sa znaczniki aktywnosci dla MKODK
::   WE: _a ref ND
::       _b - 1-archiwizacja 0-reinkarnacja
::----------------------------------------------------------------------------------------------------------------------
_buf:=tab_tmp(1,'SQL','STRING[16]','');
_sce:=tab_tmp(3,'SCE','STRING[30]',''
       ,'SC2','STRING[30]',''
       ,'MAT','STRING[16]',''
       ,'AKT','STRING[1]','');
DK.cntx_psh();
MKODK.cntx_psh();
DK.index('DOKMAG');
DK.prefix(_a);
{? DK.first() & DK.PLUS='N' & DK.N().TYP().TD=''
|| {? _b
   || {!
      |? _buf.clear();
         {? DK.M().M_ATR().ARCH='T' & DK.DK_C<>null & ~_buf.find_key($DK.DK_C)
         || _buf.blank();
            _buf.SQL:=$DK.DK_C;
            _buf.add(1);
            exec('arch_atr','mat_atr',1,DK.DK_C,'');
            {? DK.SCEAN<>'' & DK.M().IDMOB='A' & DK.RDKC<>''
             & (_sce.clear(); _sce.prefix(DK.SCEAN,DK.SCEAN,$DK.M); ~_sce.first())
            || _sce.clear();
               _sce.blank();
               _sce.SCE:=_sce.SC2:=DK.SCEAN;
               _sce.MAT:=$DK.M;
               _sce.AKT:='N';
               _sce.add(1)
            ?}
         ?};
         {? DK.SCEAN<>'' & (';DPZ'*DK.M().IDMOB)>1
          & (_sce.clear(); _sce.prefix(DK.SCEAN,DK.SCEAN,$DK.M); ~_sce.first())
         || _sce.clear();
            _sce.blank();
            _sce.SCE:=_sce.SC2:=DK.SCEAN;
            _sce.MAT:=$DK.M;
            _sce.AKT:='X';
            _sce.add(1)
         ?};
         DK.next()
      !}
   || {!
      |? _buf.clear();
         {? DK.RDKC<>'' & DK.DK_C=null & ~_buf.find_key(DK.RDKC)
         || _buf.blank();
            _buf.SQL:=DK.RDKC;
            _buf.add(1);
            exec('arch_atr','mat_atr',0,null,DK.RDKC);
            {? DK.SCEAN<>'' & DK.M().IDMOB='A' & DK.DK_C<>null
             & (_sce.clear(); _sce.prefix(DK.SCEAN,DK.SCEAN,$DK.M); ~_sce.first())
            || _sce.clear();
               _sce.blank();
               _sce.SCE:=_sce.SC2:=DK.SCEAN;
               _sce.MAT:=$DK.M;
               _sce.AKT:='T';
               _sce.add(1)
            ?}
         ?};
         {? DK.SCEAN<>'' & (';DPZ'*DK.M().IDMOB)>1
          & (_sce.clear(); _sce.prefix(DK.SCEAN,DK.SCEAN,$DK.M); ~_sce.first())
         || _sce.clear();
            _sce.blank();
            _sce.SCE:=_sce.SC2:=DK.SCEAN;
            _sce.MAT:=$DK.M;
            _sce.AKT:='X';
            _sce.add(1)
         ?};
         DK.next()
      !}
   ?}
?};
_sce.clear();
{? _sce.first()
|| {!
   |? MKODK.index('KK');
      MKODK.prefix(_sce.SCE,_sce.SCE);
      {? MKODK.first() & $MKODK.M=_sce.MAT
      || {? _sce.AKT='X'
         || exec('aktmkodk','material',MKODK.ref())
         || MKODK.AKT:=_sce.AKT;
            {? MKODK.M<>null & MKODK.OLD<>'T'
            || _ist:=0;
               MKODK.OPMOB:={? MKODK.M().FOMOB<>null
                            || ($MKODK.M().FOMOB().FORMULA)()
                            || _ist:=1;
                               _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,1,,MKODK.M().IDZP);
                               _op[1]
                            ?};
               MKODK.OPMOB2:={? _ist || _op[2] || '' ?};
               {? _ist || obj_del(_op) ?}
            ?};
            MKODK.put(1)
         ?}
      ?};
      _sce.next()
   !}
?};
DK.cntx_pop();
MKODK.cntx_pop();
obj_del(_buf);
obj_del(_sce);
~~


\arch_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: archiwizuje lub przywraca dana ceche dostaw
::   WE: _a - 1-archiwizacja 0-reinkarnacja
::       _b - DK_C.ref()
::       _c - ref SQL DK_C
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? _a & _b<>null() & exec('FindAndGet','#table',DK_C,_b,,"M_ATR().ARCH",'')<>'T' || return(1) ?};
{? _a & _b<>null
||
:: archwizacja cechy
   {? exec('godbyesc','mat_atr',_b) & exec('FindInSet','#table','REM_ZAS','DK_C',_b)=null()
   || _refdkc:=_b;
      _sqldkc:='';
      _olddkc:=$_refdkc;
      _amsk:=DK_C.name();
      _nmsk:=(_amsk-2)+form(ST.AR-2000,-2,0,'99');
      _tran:=~do_state();
      {? _tran || do() ?};
      DK_C.cntx_psh();
      DK_C.clear();
      {? DK_C.seek(_refdkc)
      || _m_atr:=DK_C.M_ATR;
         _w:=obj_new(10);
         {! _i:=1..10 |! _w[_i]:=($('DK_C.WAR'+form(_i,-2,0,'99')))() !};
         _partia:=DK_C.ZPARN;
         _kod:=DK_C.KOD;
         DK_C.use(_nmsk);
         DK_C.clear();
         _sqldkc:=$exec('m_atr_sprdod','mat_atr',_w[1],_w[2],_w[3],_w[4],_w[5],_w[6],_w[7],_w[8],_w[9],_w[10]
                    ,_m_atr,_partia,_kod);
         {? _sqldkc='' || undo() ?};
         obj_del(_w);
         DK_C.use(_amsk)
      ?};
      DK_C.cntx_pop();
      {? _sqldkc<>''
      || ODZAMPT.cntx_psh();
         ZK_P.cntx_psh();
         ZD_POZ.cntx_psh();
         PAL_POZ.cntx_psh();
         OFP.cntx_psh();

         {? _wyn & ~exec('wypdelfl','mat_atr','ODZAMPT','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','ZK_P','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','ZD_POZ','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','PAL_POZ','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','OFP','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','PX_OBJ','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','TMAT','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','TCHMAT','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','ZL','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','PX_SUR','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','REM_ZAS','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};
         {? _wyn & ~exec('wypdelfl','mat_atr','ZPARN','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
         || _wyn:=0; undo()
         ?};

         ODZAMPT.cntx_pop();
         ZK_P.cntx_pop();
         ZD_POZ.cntx_pop();
         PAL_POZ.cntx_pop();
         OFP.cntx_pop();

         DK.cntx_psh();
         FAP.cntx_psh();
         ZK_P.cntx_psh();
         ZD_POZ.cntx_psh();
         PAL_POZ.cntx_psh();
         SC.cntx_psh();
         PX_OBJ.cntx_psh();
         INP.cntx_psh();

         OKR.cntx_psh();
         OKR.index('MC');
         OKR.prefix(REF.FIRMA,1);
         {? OKR.first()
         || {!
            |? exec('dkc_open','open_tab',ST.ODDZ,2-$(OKR.ROK));

               {? _wyn & ~exec('wypdelfl','mat_atr','DK','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
               || _wyn:=0; undo()
               ?};
               {? _wyn & ~exec('wypdelfl','mat_atr','FAP','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
               || _wyn:=0; undo()
               ?};
               {? _wyn & ~exec('wypdelfl','mat_atr','ZK_P','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
               || _wyn:=0; undo()
               ?};
               {? _wyn & ~exec('wypdelfl','mat_atr','ZD_POZ','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
               || _wyn:=0; undo()
               ?};
               {? _wyn & ~exec('wypdelfl','mat_atr','INP','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
               || _wyn:=0; undo()
               ?};
               {? _wyn & ~exec('wypdelfl','mat_atr','SC','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
               || _wyn:=0; undo()
               ?};
               {? _wyn & ~exec('wypdelfl','mat_atr','PAL_POZ','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
               || _wyn:=0; undo()
               ?};
               {? _wyn & ~exec('wypdelfl','mat_atr','PX_OBJ','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
               || _wyn:=0; undo()
               ?};
               _wyn & OKR.next()
            !}
         ?};
         DK.cntx_pop();
         FAP.cntx_pop();
         ZK_P.cntx_pop();
         ZD_POZ.cntx_pop();
         PAL_POZ.cntx_pop();
         SC.cntx_pop();
         PX_OBJ.cntx_pop();
         INP.cntx_pop();
         OKR.cntx_pop();

::       Obsluga dla ZLIM - poniewaz sa maskowane inaczej niz oddzial,rok trzeba przejechac po wszystkich maskach
         ZLIM.cntx_psh();
         _names:=ZLIM.names();
         {? _names.first()
         || {!
            |?
               ZLIM.use(_names.NAME);
               {? _wyn & ~exec('wypdelfl','mat_atr','ZLIM','DK_C','DK_C','RDKC',null,_sqldkc,_refdkc)
               || _wyn:=0; undo()
               ?};
               _names.next() & _wyn>0
            !}
         ?};
         ZLIM.cntx_pop();
         ~~
      ?};
      DK_C.cntx_psh();
      DK_C.clear();
      {? DK_C.seek(_refdkc) & ~exec('dkccount','mat_atr',DK_C.ref()) || DK_C.del() ?};
      DK_C.cntx_pop();
      {? _wyn & _sqldkc<>''
      || MKODK.cntx_psh();
         MKODK.index('RSQL');
         MKODK.prefix(_olddkc,_olddkc);
         {? MKODK.first()
         || {!
            |? _ref:=MKODK.ref(); _next:=MKODK.next();
               MKODK.cntx_psh();
               MKODK.prefix();
               {? MKODK.seek(_ref)
               || MKODK.RSQL:=_sqldkc;
                  {? ~MKODK.put(1) || undo() ?}
               ?};
               MKODK.cntx_pop();
               _next
            !}
         ?};
         MKODK.cntx_pop()
      ?};
      {? _tran || end() ?}
   ?}
|? ~_a & _c<>''
||
:: przywrocenie cechy do zycia
   _refdkc:=null;
   _sqldkc:=_c;
   _amsk:=DK_C.name();
   _tran:=~do_state();
   {? _tran || do() ?};
   DK_C.cntx_psh();
   DK_C.use(form(8+_sqldkc));
   DK_C.clear();
   {? DK_C.seek(_sqldkc)
   || _m_atr:=DK_C.M_ATR;
      _kod:=DK_C.KOD;
      _w:=obj_new(10);
      {! _i:=1..10 |! _w[_i]:=($('DK_C.WAR'+form(_i,-2,0,'99')))() !};
      DK_C.use(_amsk);
      DK_C.clear();
      _refdkc:=exec('m_atr_sprdod','mat_atr',_w[1],_w[2],_w[3],_w[4],_w[5],_w[6],_w[7],_w[8],_w[9],_w[10],_m_atr,,_kod);
      {? _refdkc=null || undo() ?};
      obj_del(_w)
   ?};
   _newdkc:=$_refdkc;
   DK_C.cntx_pop();
   {? _refdkc<>null
   || ODZAMPT.cntx_psh();
      ZK_P.cntx_psh();
      ZD_POZ.cntx_psh();
      PAL_POZ.cntx_psh();
      OFP.cntx_psh();

      {? _wyn & ~exec('wypdelfl','mat_atr','ODZAMPT','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};
      {? _wyn & ~exec('wypdelfl','mat_atr','ZK_P','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};
      {? _wyn & ~exec('wypdelfl','mat_atr','ZD_POZ','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};
      {? _wyn & ~exec('wypdelfl','mat_atr','PAL_POZ','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};
      {? _wyn & ~exec('wypdelfl','mat_atr','OFP','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};
      {? _wyn & ~exec('wypdelfl','mat_atr','PX_OBJ','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};
      {? _wyn & ~exec('wypdelfl','mat_atr','TMAT','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};
      {? _wyn & ~exec('wypdelfl','mat_atr','TCHMAT','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};
      {? _wyn & ~exec('wypdelfl','mat_atr','ZL','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};
      {? _wyn & ~exec('wypdelfl','mat_atr','PX_SUR','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};
      {? _wyn & ~exec('wypdelfl','mat_atr','ZPARN','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
      || _wyn:=0; undo()
      ?};

      ODZAMPT.cntx_pop();
      ZK_P.cntx_pop();
      ZD_POZ.cntx_pop();
      PAL_POZ.cntx_pop();
      OFP.cntx_pop();

      DK.cntx_psh();
      FAP.cntx_psh();
      ZK_P.cntx_psh();
      ZD_POZ.cntx_psh();
      PAL_POZ.cntx_psh();
      SC.cntx_psh();
      PX_OBJ.cntx_psh();
      INP.cntx_psh();

      OKR.cntx_psh();
      OKR.index('MC');
      OKR.prefix(REF.FIRMA,1);
      {? OKR.first()
      || {!
         |? exec('dkc_open','open_tab',ST.ODDZ,2-$(OKR.ROK));

            {? _wyn & ~exec('wypdelfl','mat_atr','DK','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
            || _wyn:=0; undo()
            ?};
            {? _wyn & ~exec('wypdelfl','mat_atr','FAP','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
            || _wyn:=0; undo()
            ?};
            {? _wyn & ~exec('wypdelfl','mat_atr','ZK_P','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
            || _wyn:=0; undo()
            ?};
            {? _wyn & ~exec('wypdelfl','mat_atr','ZD_POZ','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
            || _wyn:=0; undo()
            ?};
            {? _wyn & ~exec('wypdelfl','mat_atr','INP','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
            || _wyn:=0; undo()
            ?};
            {? _wyn & ~exec('wypdelfl','mat_atr','SC','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
            || _wyn:=0; undo()
            ?};
            {? _wyn & ~exec('wypdelfl','mat_atr','PAL_POZ','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
            || _wyn:=0; undo()
            ?};
            {? _wyn & ~exec('wypdelfl','mat_atr','PX_OBJ','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
            || _wyn:=0; undo()
            ?};
            _wyn & OKR.next()
         !}
      ?};
      DK.cntx_pop();
      FAP.cntx_pop();
      ZK_P.cntx_pop();
      ZD_POZ.cntx_pop();
      PAL_POZ.cntx_pop();
      SC.cntx_pop();
      PX_OBJ.cntx_pop();
      INP.cntx_pop();
      OKR.cntx_pop();

::    Obsluga dla ZLIM - poniewaz sa maskowane inaczej niz oddzial,rok trzeba przejechac po wszystkich maskach
      ZLIM.cntx_psh();
      _names:=ZLIM.names();
      {? _names.first()
      || {!
         |?
            ZLIM.use(_names.NAME);
            {? _wyn & ~exec('wypdelfl','mat_atr','ZLIM','SDK_C','RDKC','DK_C','',_refdkc,_sqldkc,_sqldkc)
            || _wyn:=0; undo()
            ?};
            _names.next() & _wyn>0
         !}
      ?};
      ZLIM.cntx_pop();
      ~~
   ?};
   {? _wyn & _newdkc<>''
   || MKODK.cntx_psh();
      MKODK.index('RSQL');
      MKODK.prefix(_sqldkc,_sqldkc);
      {? MKODK.first()
      || {!
         |? _ref:=MKODK.ref(); _next:=MKODK.next();
            MKODK.cntx_psh();
            MKODK.prefix();
            {? MKODK.seek(_ref)
            || MKODK.RSQL:=_newdkc;
               {? ~MKODK.put(1) || undo() ?}
            ?};
            MKODK.cntx_pop();
            _next
         !}
      ?};
      MKODK.cntx_pop()
   ?};
   {? _tran || end() ?}
?}


\wypdelfl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: zamienia  wartosc pol ... czy cos podobnego
::   WE: _a - akronim tabeli
::       _b - akronim indeks
::       _c - pole do wyzerowania
::       _d - pole do wypelnienia
::       _e - wartosc wyzerowania
::       _f - wartosc do wypelnienia
::       _g - wartosc prefiksu
::       _h - druga wartosc prefiksu
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;

_tab:=$(_a);
_ind:=$(_a+'.index('''+_b+''')');
{| _tab()
|! cntx_psh;
   clear;
   _ind();
   {? _=8 || prefix(_g,_h) || prefix(_g) ?};
   {? first()
   || {!
      |? _ref:=ref(); _ok:=next();
         cntx_psh();
         clear();
         {? seek(_ref)
         || ($(_a+'.'+_c))():=_e;
            ($(_a+'.'+_d))():=_f;
            _wyn:=put(1)
         ?};
         cntx_pop();
         _wyn & _ok
      !}
   ?};
   cntx_pop
|};
_wyn


\godbyesc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdza czy na dostawach z dana cecha nic juz nie nzostalo
::   WE: _a - ref DK_C
::   WY: 1-nic juz nie ma 0-jeszcze jest
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
SC.cntx_psh();
OKR.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.first()
|| {!
   |? SC.use('stc__'+ST.ODDZ+($OKR.ROK+2));
      SC.index('DK_C');
      SC.prefix(_a);
      {? SC.first()
      || {!
         |? _wyn:=SC.S<=0;
            _wyn & SC.next()
         !}
      ?};
      _wyn & OKR.next()
   !}
?};
SC.cntx_pop();
OKR.cntx_pop();
_wyn


\info_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: informacja o danym zestawie atrybutów
::----------------------------------------------------------------------------------------------------------------------
_dkc:=($(ATR.MJS+'.DK_C'))();

_mate:={? ATR.MJS<>'' || exec('acr2acr','mat_atr') || 'M' ?};

_mat:=($(ATR.MJS+'.'+_mate))();
_atr:=($(ATR.MJS+'.'+_mate+'().M_ATR'))();
_jmm:=($(ATR.MJS+'.'+_mate+'().J().KOD'))();
_ktm:=($(ATR.MJS+'.'+_mate+'().KTM'))();

:: ilosci na dostepnych magazynach
:: informacje z zamowien sprzedazy
:: informacje z zamowien wewnetrznych
:: informacje z zamowien dostaw
:: informacje z ofert
:: informacje o wykorzystaniu cechy dla innych indeksow materialowych

VAR_DEL.delete('__infatr','__winatr');

_max:=exec('rozm_atr','mat_atr',_atr);

_tab:='tab_tmp(4,\'TREE\',\'TREE_REF\',\'\',\'LP\',\'INTEGER\',\'\',\'LAB\',\'STRING[255]\',\'\',\'DKC\',\'STRING[16]\',\'\',\'ILE\''+
      ',\'REAL\',\'\',\'JM\',\'STRING[10]\',\'\'';
{! _i:=1.._max |! _tab+=',\'W'+form(_i,-2,0,'99')+'\',\'STRING[20]\',\'\'' !};
_tab+=')';

__infatr:=($_tab)();

_win_sel:=__infatr.mk_sel('Informacja o wykorzystaniu zestawu atrybutów'@,'P',,'#inf_m_atr',,,__infatr.size(),1);
__winatr:=_win_sel;
__infatr.win_fld(_win_sel,,'LAB',,,25,,1,'');
__infatr.win_fld(_win_sel,,'ILE',,,10,3,1,'');
__infatr.win_fld(_win_sel,,'JM',,,4,,1,'jm');
{! _i:=1.._max |! __infatr.win_fld(_win_sel,,'W'+form(_i,-2,0,'99'),,,7,,1,'') !};
__infatr.win_act(_win_sel,0,'Rekord',,,,"~__infatr.TREE");
__infatr.win_act(_win_sel,0,'Szukaj');
__infatr.win_act(_win_sel,0,'Kolejność');
__infatr.tr_fml(_win_sel,,"{? _a || {? __infatr.TREE=0 || 1 || _a ?} || _a ?}");
__infatr.win_fml(_win_sel,,'LAB',,'ICON_BEFORE',"
         {? ~__infatr.TREE & __infatr.LP=0
         || 'xwin16.png:19'
         |? ~__infatr.TREE & __infatr.LP=1
         || 'xwin16.png:99'
         |? ~__infatr.TREE & __infatr.LP=2
         || 'xwin16.png:38'
         |? ~__infatr.TREE & __infatr.LP=3
         || 'xwin16.png:61'
         |? ~__infatr.TREE & __infatr.LP=4
         || 'xwin16.png:116'
         |? ~__infatr.TREE & __infatr.LP=5
         || 'xwin16.png:56'
         || ''
         ?}
     ");
__infatr.fld_fml('ILE','DISPLAY_FORMAT',"{? ~__infatr.TREE & ~__infatr.LP || 'empty=1' || 'empty=0' ?}");

:: ustalenie uprawnien do magazynow
_mag:=tab_tmp(,'SYM','STRING[8]',''
       ,'SQL','STRING[16]','');

_tab:='';
{? ATR.MJS='DK'
   | ATR.MJS='FAP'
   | ATR.MJS='ZD_POZ'
   | ATR.MJS='INP'
   | ATR.MJS='ZL'
   | ATR.MJS='TMAT'
   | ATR.MJS='ZMAT'
   | ATR.MJS='ZLIM'
   | ATR.MJS='PD_K'
|| _tab:='MG'
|? ATR.MJS='OFP' | (ATR.MJS='ZK_P' & ZK_P.RODZ='Z') | (ATR.MJS='REZ' & REZ.ZK_P().RODZ='Z')
|| _tab:='ZAM'
|? (ATR.MJS='ZK_P' & ZK_P.RODZ='W') | (ATR.MJS='REZ' & REZ.ZK_P().RODZ='W')
|| _tab:='ZAW'
?};

{? _tab<>''
|| USERS_UP.index('MG');
   USERS_UP.prefix(OPERATOR.USER,_tab,ST.ODDZ);
   {? USERS_UP.first()
   || {!
      |? {? USERS_UP.MG().TYP*'DOST'
         || _mag.clear();
            _mag.blank();
            _mag.SYM:=USERS_UP.MG().SYM;
            _mag.SQL:=$USERS_UP.MG;
            _mag.add(1)
         ?};
         USERS_UP.next()
      !}
   || USERS_UP.index('MG');
      USERS_UP.prefix(null,_tab,ST.ODDZ);
      {? USERS_UP.first()
      || {!
         |? {? USERS_UP.MG().TYP*'DOST'
            || _mag.clear();
               _mag.blank();
               _mag.SYM:=USERS_UP.MG().SYM;
               _mag.SQL:=$USERS_UP.MG;
               _mag.add(1)
            ?};
            USERS_UP.next()
         !}
      ?}
   ?}
?};

{? _mag.size()
||
   M_ATR.cntx_psh();
   MG.cntx_psh();
   SM.cntx_psh();
   ND.cntx_psh(); DK.cntx_psh();
   ZK_N.cntx_psh(); ZK_P.cntx_psh();
   ZD_NAG.cntx_psh(); ZD_POZ.cntx_psh();
   FAKS.cntx_psh(); FAP.cntx_psh();
   OFE.cntx_psh(); OFP.cntx_psh();

   M_ATR.clear();
   {? M_ATR.seek(_atr)
   ||
::    informacja ogolna
      __infatr.clear();
      __infatr.blank();
      __infatr.TREE:=0;
      __infatr.LP:=0;
      __infatr.LAB:=M_ATR.SYM+' - '+_ktm;
      __infatr.JM:=_jmm;
      {! _i.._max |! ($('__infatr.W'+form(_i,-2,0,'99')))():=($('M_ATR.SL_'+form(_i,-2,0,'99')+'().NA'))() !};
      __infatr.add(1);

::    stan danego atrybutu na roznych magazynach
      _mag.clear();
      {? _mag.first()
      || _kref:=null;
         {!
         |? _magik:=exec('FindAndGet','#table',MG,_mag.SQL,,,null());
            SM.index('SM');
            SM.prefix(_magik,_mat);
            {? SM.first()
            || exec('sc_tymczas','magazyn_stan',SM.MAG,SM.M,'T');
               {? __sc.first()
               || {!
                  |? {? __sc.S>0
                     || _dk_c:={? __sc.DK_C<>'' || exec('FindAndGet','#table',DK_C,__sc.DK_C,,,null()) || null() ?};
                        _dkcs:={? __sc.DK_C='' || 'brak' || __sc.DK_C ?};
                        {? exec('czyzawch','mat_atr',_dkc,_dk_c)
                        || {? _kref=null
                           || __infatr.clear();
                              __infatr.blank();
                              __infatr.TREE:=0;
                              __infatr.LP:=1;
                              __infatr.ILE:=0;
                              __infatr.JM:=_jmm;
                              __infatr.LAB:='Stan na magazynach';
                              _kref:={? __infatr.add(1) || __infatr.ref() || null ?}
                           ?};
                           {? _kref<>null
                           || __infatr.clear();
                              {? __infatr.find_key(_kref,1,_mag.SYM,_dkcs)
                              || __infatr.ILE+=__sc.S;
                                 __infatr.put(1)
                              || __infatr.blank();
                                 __infatr.TREE:=_kref;
                                 __infatr.LP:=1;
                                 __infatr.ILE:=__sc.S;
                                 __infatr.LAB:=_mag.SYM;
                                 __infatr.JM:=_jmm;
                                 __infatr.DKC:=_dkcs;
                                 {! _i.._max |! __infatr[6+_i]:=($('__sc.WAR'+form(_i,-2,0,'99')))() !};
                                 __infatr.add(1)
                              ?};
                              __infatr.clear();
                              {? __infatr.seek(_kref)
                              || __infatr.ILE+=__sc.S;
                                 __infatr.put(1)
                              ?}
                           ?}
                        ?}
                     ?};
                     __sc.next()
                  !}
               ?}
            ?};
            _mag.next()
         !}
      ?};
::    zamowienia sprzedazy i zamowienia wewnetrzne
      _mag.clear();
      {? _mag.first()
      || _zref:=null;
         _wref:=null;
         {!
         |? _magik:=exec('FindAndGet','#table',MG,_mag.SQL,,,null());
            ZK_P.index('AKT');
            ZK_P.prefix('A',_magik,_mat,'Z');
            {? ZK_P.first()
            || {!
               |? {? ZK_P.ILP>0 & ZK_P.DK_C<>null & exec('czyzawch','mat_atr',ZK_P.DK_C,_dkc)
                  || {? ZK_P.RODZ='Z'
                     || {? _zref=null
                        || __infatr.clear();
                           __infatr.blank();
                           __infatr.TREE:=0;
                           __infatr.LP:=2;
                           __infatr.ILE:=0;
                           __infatr.JM:=_jmm;
                           __infatr.LAB:='Zamówienia sprzedaży';
                           {! _i.._max |! __infatr[6+_i]:='' !};
                           _zref:={? __infatr.add(1) || __infatr.ref() || null ?}
                        ?};
                        {? _zref<>null
                        || __infatr.clear();
                           {? __infatr.find_key(_zref,1,_mag.SYM,$ZK_P.DK_C)
                           || __infatr.ILE+=ZK_P.ILP;
                              __infatr.put(1)
                           || __infatr.blank();
                              __infatr.TREE:=_zref;
                              __infatr.LP:=2;
                              __infatr.ILE:=ZK_P.ILP;
                              __infatr.JM:=_jmm;
                              __infatr.LAB:=_mag.SYM;
                              __infatr.DKC:=$ZK_P.DK_C;
                              {! _i.._max |! __infatr[6+_i]:=($('ZK_P.DK_C().WAR'+form(_i,-2,0,'99')))() !};
                              __infatr.add(1)
                           ?};
                           __infatr.clear();
                           {? __infatr.seek(_zref)
                           || __infatr.ILE+=ZK_P.ILP;
                              __infatr.put(1)
                           ?}
                        ?}
                     || {? _wref=null
                        || __infatr.clear();
                           __infatr.blank();
                           __infatr.TREE:=0;
                           __infatr.LP:=3;
                           __infatr.ILE:=0;
                           __infatr.JM:=_jmm;
                           __infatr.LAB:='Zamówienia wewnętrzne';
                           {! _i.._max |! __infatr[6+_i]:='' !};
                           _wref:={? __infatr.add(1) || __infatr.ref() || null ?}
                        ?};
                        {? _wref<>null
                        || __infatr.clear();
                           {? __infatr.find_key(_wref,1,_mag.SYM,$ZK_P.DK_C)
                           || __infatr.ILE+=ZK_P.ILP;
                              __infatr.put(1)
                           || __infatr.blank();
                              __infatr.TREE:=_wref;
                              __infatr.LP:=3;
                              __infatr.ILE:=ZK_P.ILP;
                              __infatr.JM:=_jmm;
                              __infatr.LAB:=_mag.SYM;
                              __infatr.DKC:=$ZK_P.DK_C;
                              {! _i.._max |! __infatr[6+_i]:=($('ZK_P.DK_C().WAR'+form(_i,-2,0,'99')))() !};
                              __infatr.add(1)
                           ?};
                           __infatr.clear();
                           {? __infatr.seek(_wref)
                           || __infatr.ILE+=ZK_P.ILP;
                              __infatr.put(1)
                           ?}
                        ?}
                     ?}
                  ?};
                  ZK_P.next()
               !}
            ?};
            _mag.next()
         !}
      ?};
::    bez magazynu - pole RMAG


::    zamowienia dostaw
      _mag.clear();
      {? _mag.first()
      || _zref:=null;
         {!
         |? _magik:=exec('FindAndGet','#table',MG,_mag.SQL,,,null());
            ZD_POZ.index('ZRE');
            ZD_POZ.prefix(_mat,_magik);
            {? ZD_POZ.first()
            || {!
               |? {? ZD_POZ.IL_POZ>0 & ZD_POZ.DK_C<>null & exec('czyzawch','mat_atr',ZD_POZ.DK_C,_dkc)
                  || {? _zref=null
                     || __infatr.clear();
                        __infatr.blank();
                        __infatr.TREE:=0;
                        __infatr.LP:=4;
                        __infatr.ILE:=0;
                        __infatr.JM:=_jmm;
                        __infatr.LAB:='Zamówienia dostaw';
                        {! _i.._max |! __infatr[6+_i]:='' !};
                        _zref:={? __infatr.add(1) || __infatr.ref() || null ?}
                     ?};
                     {? _zref<>null
                     || __infatr.clear();
                        {? __infatr.find_key(_zref,1,_mag.SYM,$ZD_POZ.DK_C)
                        || __infatr.ILE+=ZD_POZ.IL_POZ;
                           __infatr.put(1)
                        || __infatr.blank();
                           __infatr.TREE:=_zref;
                           __infatr.LP:=4;
                           __infatr.ILE:=ZD_POZ.IL_POZ;
                           __infatr.JM:=_jmm;
                           __infatr.LAB:=_mag.SYM;
                           __infatr.DKC:=$ZD_POZ.DK_C;
                           {! _i.._max |! __infatr[6+_i]:=($('ZD_POZ.DK_C().WAR'+form(_i,-2,0,'99')))() !};
                           __infatr.add(1)
                        ?};
                        __infatr.clear();
                        {? __infatr.seek(_zref)
                        || __infatr.ILE+=ZD_POZ.IL_POZ;
                           __infatr.put(1)
                        ?}
                     ?}
                  ?};
                  ZD_POZ.next()
               !}
            ?};
            _mag.next()
         !}
      ?};
::    oferty
      _zref:=null;
      OFP.index('MAT');
      OFP.prefix(_mat);
      {? OFP.first()
      || {!
         |? {? OFP.IL>0 & OFP.DK_C<>null & exec('czyzawch','mat_atr',OFP.DK_C,_dkc)
            || {? _zref=null
               || __infatr.clear();
                  __infatr.blank();
                  __infatr.TREE:=0;
                  __infatr.LP:=5;
                  __infatr.ILE:=0;
                  __infatr.JM:=_jmm;
                  __infatr.LAB:='Oferty';
                  {! _i.._max |! __infatr[6+_i]:='' !};
                  _zref:={? __infatr.add(1) || __infatr.ref() || null ?}
               ?};
               {? _zref<>null
               || __infatr.clear();
                  {? __infatr.find_key(_zref,1,OFP.OFE().SYM,$OFP.DK_C)
                  || __infatr.ILE+=OFP.IL;
                     __infatr.put(1)
                  || __infatr.blank();
                     __infatr.TREE:=_zref;
                     __infatr.LP:=5;
                     __infatr.ILE:=OFP.IL;
                     __infatr.JM:=_jmm;
                     __infatr.LAB:=OFP.OFE().SYM;
                     __infatr.DKC:=$OFP.DK_C;
                     {! _i.._max |! __infatr[6+_i]:=($('OFP.DK_C().WAR'+form(_i,-2,0,'99')))() !};
                     __infatr.add(1)
                  ?};
                  __infatr.clear();
                  {? __infatr.seek(_zref)
                  || __infatr.ILE+=OFP.IL;
                     __infatr.put(1)
                  ?}
               ?}
            ?};
            ZD_POZ.next()
         !}
      ?}
   ?};

   M_ATR.cntx_pop();
   MG.cntx_pop();
   SM.cntx_pop();
   ND.cntx_pop(); DK.cntx_pop();
   ZK_N.cntx_pop(); ZK_P.cntx_pop();
   ZD_NAG.cntx_pop(); ZD_POZ.cntx_pop();
   FAKS.cntx_pop(); FAP.cntx_pop();
   OFE.cntx_pop; OFP.cntx_pop();

   __infatr.win_sel(_win_sel);
   __infatr.select()
?};
VAR_DEL.delete('__infatr','__winatr');
''


\matr_fap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Atrybuty dla tabeli FAP
::----------------------------------------------------------------------------------------------------------------------
_akc:=FAKS.AKC='T' | FAKS.WHERE='M';
ATR.FLAG:=0;
ATR.MJS:='FAP';

_wyn:=0;
_m_atr:=FAP.M().M_ATR;
{? FAP.M=null
|| FUN.info('Brak indeksu materiałowego.'@)
|? _m_atr<>null
||  FAP.M().M_ATR().SYM;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','FAP');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW',{? ~_jest | ~exec('dkccount','mat_atr',DK_C.ref()) ||'state=normal' || 'state=grayed' ?});
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
_wyn


\ten_ctrl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: wybor cechy z kontrola czy przypadkiem nie jest juz przypisana
::  OLD: \ten_ctrl/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__rozdkc')<=0 & ATR.SCEAN<>'' & exec('FindInSet','#table','MKODK','RSQL',$DK_C.ref(),$DK_C.ref())<>null()
|| FUN.info('Wybrany zestaw atrybutów został już przypisany\n'
            'do innego kodu identyfikacyjnego.\n\nWybór niemożliwy.'@);
   0
|| sel_exit()
?}


\del_dk_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: Czy mozna usunac ceche
::   WY: 0/1
::  OLD: \del_dk_c/magazyn2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? DK_C.count()
|| FUN.info('Cecha wykorzystana w systemie usunięcie niemożliwe.'@);
   _wyn:=0
?};
_wyn


\rekatrbt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: rekord dla __infatr
::----------------------------------------------------------------------------------------------------------------------
{? ~__infatr.TREE & __infatr.M_ATR<>'xxx'
|| '__infatr#01#01'
|? ~__infatr.TREE & __infatr.M_ATR='xxx'
|| '__infatr#01#02'
|| ''
?}


\rekfndbt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: rekord dla __infatr
::----------------------------------------------------------------------------------------------------------------------
{? ~__infatr.TREE & __infatr.M_ATR='+'
|| '__infatr#02#01'
|? ~__infatr.TREE & __infatr.M_ATR='-'
|| '__infatr#02#02'
|| ''
?}


\prdkcjed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed polem EANX.DK_C
::----------------------------------------------------------------------------------------------------------------------
{? (';JB'*EANX.KOPIA)>1 & EANX.MPAL<>null
|| ATR.MJS:='EANX';
   ATR.M_ATR:=EANX.MPAL().M_ATR;
   exec('be_dk_ce','mat_atr');
   ~~
|| 0
?}


\matr_sc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Atrybuty dla tabeli FAP-__wyb_mag
::----------------------------------------------------------------------------------------------------------------------
_atrflag:=ATR.FLAG;
_atrmjs:=ATR.MJS;
ATR.FLAG:=0;
ATR.MJS:='SC';

_m_atr:=SC.M().M_ATR;

{? _m_atr<>null
|| _ref:=SC.DK_C;
   SC.M().M_ATR().SYM;

   {? _ref=null
   || {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !}
   || DK_C.cntx_psh();
      DK_C.clear();
      {? DK_C.seek(_ref)
      || {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():=($('DK_C.WAR'+form(_i,-2,0,'99')))() !}
      ?};
      DK_C.cntx_pop()
   ?};
   DK_C.win_edit('RED_ATR');
   DK_C.display()
?};
ATR.FLAG:=_atrflag;
ATR.MJS:=_atrmjs;
'activate:browse'


\matr_ofp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Atrybuty dla tabeli OFP
::----------------------------------------------------------------------------------------------------------------------

_akc:=OFE.A='Z';
ATR.FLAG:=0;
ATR.MJS:='OFP';

_wyn:=0;
_m_atr:=OFP.M().M_ATR;
{? _m_atr<>null
|| OFP.M().M_ATR().SYM;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','OFP');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW',{? ~_jest | ~exec('dkccount','mat_atr',DK_C.ref()) ||'state=normal' || 'state=grayed' ?});
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
_wyn


\matr_zdp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Atrybuty dla tabeli ZD_POZ
::----------------------------------------------------------------------------------------------------------------------

_akc:=ZD_NAG.STAN<>'N';
_flag_ed:=ATR.FLAG_ED;
_flag:=ATR.FLAG;
ATR.FLAG_ED:=0;
ATR.FLAG:=0;
ATR.MJS:='ZD_POZ';
ATR.FLAG_PAR:=0;

_wyn:=0;
_m_atr:=ZD_POZ.M().M_ATR;
{? _m_atr<>null
|| ZD_POZ.M().M_ATR().SYM;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','ZD_POZ');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW','state=normal');
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
ATR.FLAG_ED:=_flag_ed;
ATR.FLAG:=_flag;
ATR.FLAG_PAR:=0;
_wyn


\matr_zkp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Atrybuty dla tabeli ZK_P
::----------------------------------------------------------------------------------------------------------------------
_akc:=ZK_P.ILP<>ZK_P.ILZ;
_flag_ed:=ATR.FLAG_ED;
_flag:=ATR.FLAG;
ATR.FLAG_ED:=0;
ATR.FLAG:=0;
ATR.MJS:='ZK_P';

_wyn:=0;
_m_atr:=ZK_P.M().M_ATR;
{? _m_atr<>null
|| ZK_P.M().M_ATR().SYM;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','ZK_P');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW','state=normal');
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
ATR.FLAG_ED:=_flag_ed;
ATR.FLAG:=_flag;
_wyn


\matr_rez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: Atrybuty dla tabeli REZ
::----------------------------------------------------------------------------------------------------------------------
_akc:=REZ.ZK_P().ILP<>REZ.ZK_P().ILZ;
ATR.FLAG:=0;
ATR.MJS:='REZ';

_wyn:=0;
_m_atr:=REZ.M().M_ATR;
{? _m_atr<>null
|| REZ.M().M_ATR().SYM;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','REZ');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW','state=normal');
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
_wyn


\set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: wygaszanie/pokazanie pol
::   WE: _a - ATR.MJS
::       [_b] - tabela - do mechanizmu uniwersalnego wyszarzania
::       [_c] - okienko - do mechanizmu uniwersalnego wyszarzania
::----------------------------------------------------------------------------------------------------------------------
_tab:={? var_pres('_a')=type_of('') || _a || '' ?};

{? _tab<>'' & (';ZK_P;DK;ZD_POZ;INP;INY;REZ;'*_tab)>1
|| _zmienne:=ATR.MOD & ATR.MJS='DK';
   _win_red:={? _zmienne || ($('ZMIENNE.win_edit(\'?\')'))() || ($(_tab+'.win_edit(\'?\')'))() ?};
   _m_atr:=($(_tab+'.DK_C().M_ATR'))();
   _mat:=exec('acr2acr','mat_atr');
   _val:=($(_tab+'.'+_mat+'().M_ATR'))()<>null();
   {? _m_atr=null()
   || _m_atr:=($(_tab+'.'+_mat+'().M_ATR'))();
      {? _m_atr<>null()
      || {? (_tab='ZD_POZ' & (1+($(_tab+'.MG().TYP'))())<>'D')
          | (_tab='DK' & (1+($(_tab+'.N().MAG().TYP'))())<>'D')
          | (_tab='INP' & (1+($(_tab+'.IN().MG().TYP'))())<>'D')
         || _m_atr:=null()
         ?}
      ?}
   ?};
   M_ATR.cntx_psh();
   M_ATR.clear();
   {? _m_atr<>null() & M_ATR.seek(_m_atr) & _win_red<>''
   || {? _val & (';DK;INP;INY;REZ;'*_tab)>1 & ~_zmienne || ($_tab)().efld_opt(_win_red,'mark=1',,'DK_C','SYM') ?};
      {! _i:=1..10
      |! _onoff:=($('M_ATR.SL_'+form(_i,-2,0,'99')))()<>null();
         {? ~_zmienne
         || {| ($_tab)()
            |! efld_opt(_win_red,{? _onoff || 'enable=1' || 'enable=0' ?},M_ATR,'SL_'+form(_i,-2,0,'99'));
               efld_opt(_win_red,{? _onoff || 'enable=1' || 'enable=0' ?},ATR,'WAR'+form(_i,-2,0,'99'))
            |}
         || {| ZMIENNE
            |! efld_opt(_win_red,{? _onoff || 'enable=1' || 'enable=0' ?},M_ATR,'SL_'+form(_i,-2,0,'99'));
               efld_opt(_win_red,{? _onoff || 'enable=1' || 'enable=0' ?},ATR,'WAR'+form(_i,-2,0,'99'))
            |}
         ?}
      !}
   |? _m_atr=null() & _win_red<>''
   || {? ~_zmienne || ($_tab)().efld_opt(_win_red,'mark=0',,'DK_C','SYM') ?};
      {! _i:=1..10
      |! {? ~_zmienne
         || {| ($_tab)()
            |! efld_opt(_win_red,'enable=0',M_ATR,'SL_'+form(_i,-2,0,'99'));
               efld_opt(_win_red,'enable=0',ATR,'WAR'+form(_i,-2,0,'99'))
            |}
         || {| ZMIENNE
            |! efld_opt(_win_red,'enable=0',M_ATR,'SL_'+form(_i,-2,0,'99'));
               efld_opt(_win_red,'enable=0',ATR,'WAR'+form(_i,-2,0,'99'))
            |}
         ?}
      !}
   ?};
   M_ATR.cntx_pop();
:: Mechanizm dodatkowego wyłączania z redagowania atrybutu w bieżącym oknie: danego typu lub o danej nazwie
   {? var_pres('ATR_GRAY')>100
   ||
      _uni_tab:=~~;
      {? var_pres('_b')>0
      || _uni_tab:=_b
      || _uni_tab:=cur_tab(1,1)
      ?};
      _uni_win:=~~;
      {? var_pres('_c')>0
      || _uni_win:=_c
      || _uni_win:=cur_win(1,1)
      ?};
      _types:=ATR_GRAY.types;
      _names:=ATR_GRAY.names;

      _arr_onoff:=obj_new(10);

      {! _i:=1..10
      |!
         _onoff:=1;
         _typ:=($('M_ATR.SL_'+form(_i,-2,0,'99')+'().TYP'))();
         {? _types<>'' & _typ<>''
         || _typ:=_typ+',';
            {? _types*_typ>0
            || _onoff:=0
            ?}
         ?};

         _na:=($('M_ATR.SL_'+form(_i,-2,0,'99')+'().NA'))();
         {? _names<>'' & _na<>''
         || _na:=_na+',';
            {? _names*_na>0
            || _onoff:=0
            ?}
         ?};
         _arr_onoff[_i]:=_onoff
      !};
      {! _i:=1..10
      |!
         _onoff:=_arr_onoff[_i];
         {| _uni_tab
         |! {? _onoff>0
            || efld_opt(_uni_win,'enable=1',ATR,'WAR'+form(_i,-2,0,'99'))
            || efld_opt(_uni_win,'enable=0',ATR,'WAR'+form(_i,-2,0,'99'))
            ?}
         |}
      !}
   ?}
?};
~~


\parnadkc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: sprawdza czy podana partia wystepuje na DK_C
::   WE: _a - ref partii
::   WY: 1 - jest 0 - nie ma
::----------------------------------------------------------------------------------------------------------------------

_wyn:=0;
_wyn:=exec('FindInSet','#table','DK_C','PARTIA',_a)<>null;
{? ~_wyn
||
:: kontrola po maskach
   DK_C.cntx_psh();
   OKR.cntx_psh();
   OKR.index('MC');
   OKR.prefix(REF.FIRMA,1);
   {? OKR.first()
   || {!
      |? DK_C.use('dokce'+ST.ODDZ+($OKR.ROK+2));
         _wyn:=exec('FindInSet','#table','DK_C','PARTIA',_a)<>null;
         ~_wyn & OKR.next()
      !}
   ?};
   DK_C.cntx_pop();
   OKR.cntx_pop()
?};
_wyn


\pwinaatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: ustawia zmienna dla DK_C
::----------------------------------------------------------------------------------------------------------------------
ATR.INAATR:={? exec('czydkc_m','material',$DK_C.ref(),($(ATR.MJS+'.M'))())
            || 'A'
            || 'N'
            ?}


\opisdk_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: zwraca kolejne atrybuty lub kod cechy
::   WE: _a - ref DK_C
::   WY: ciag atrybutow po sredniku lub kod DK_C
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
DK_C.cntx_psh();
_name:=ref_name(_a);
{? _name<>'' & _name<>DK_C.name() || DK_C.use(_name) ?};
DK_C.clear();
{? DK_C.seek(_a)
|| {? DK_C.M_ATR=null
   || _wyn:=DK_C.SYM
   || {! _i..10
      |! _war:=($('DK_C.WAR'+form(_i,-2,0,'99')))();
         {? _war<>'' || _wyn+=_war+'; ' ?}
      !};
      _wyn:=_wyn-2
   ?}
?};
DK_C.cntx_pop();
_wyn


\matr_gap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Atrybuty dla tabeli FAP-__wyb_mag
::----------------------------------------------------------------------------------------------------------------------
ATR.FLAG:=0;
ATR.MJS:='FAP';

_m_atr:=FAP.M().M_ATR;

{? _m_atr<>null & __wyb_mag.RSQL<>''
|| FAP.M().M_ATR().SYM;
   _ref:=exec('FindAndGet','#table',SC,__wyb_mag.RSQL,,"DK_C",null());

   {? _ref=null
   || {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !}
   || DK_C.cntx_psh();
      DK_C.clear();
      {? DK_C.seek(_ref)
      || {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():=($('DK_C.WAR'+form(_i,-2,0,'99')))() !}
      ?};
      DK_C.cntx_pop()
   ?};
   DK_C.win_edit('RED_ATR');
   DK_C.display()
?};
'activate:browse'


\chk_na
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Po redakcji pola TAT.NA
::----------------------------------------------------------------------------------------------------------------------
{? TAT.NA=''
|| FUN.info('Nie wprowadzono nazwy atrybutu.'@); 0
|| 1
?}


\pwinzatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: ustawia zmienna dla ZD_POZ
::----------------------------------------------------------------------------------------------------------------------
ATR.INZATR:={? FAP.FAKS().T().ZAL='N'
            || {? FAP.M().M_ATR<>null
                & FAP.DK_C<>null
                & ({? FAP.DK_C().M_ATR().MOD='T' || FAP.DK_C().UMOD || FAP.DK_C().UZUP ?}*'0')
               || 'Y'
               |? FAP.M().M_ATR<>null & FAP.DK_C=null
               || 'X'
               || 'N'
               ?}
            || 'N'
            ?}


\f3_zm_dk_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: akcja F3 dla cech podczas rozpisywania magazynu
::   WY: wybrana wartosc
::  OLD: \f3_zm_dk_c/magazyn2.fml
::----------------------------------------------------------------------------------------------------------------------
DK_C.win_sel('SEL');
DK_C.prefix();
{? DK_C.select()
|| _wyn:=DK_C.SYM
|| _wyn:=fld()
?};
_wyn


\chk_dk_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: akcja rekord po dla cech DK_C
::  OLD: \chk_dk_c/defin.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(DK_C,,'SYM')


\matr_pdk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: Atrybuty dla tabeli PD_K
::----------------------------------------------------------------------------------------------------------------------
_akc:=PD_K.POZ_REF<>'';
ATR.FLAG:=0;
ATR.MJS:='PD_K';

_wyn:=0;
_m_atr:=PD_K.M().M_ATR;
{? _m_atr<>null
|| PD_K.M().M_ATR().SYM;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','PD_K');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW','state=normal');
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
_wyn


\matr_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [WH] [12.30]
:: OPIS: Atrybuty dla tabeli ZL
::   WY 0/1
::----------------------------------------------------------------------------------------------------------------------
_akc:=0;
ATR.FLAG:=0;
ATR.MJS:='ZL';
_wyn:=0;
_m_atr:=ZL.KTM().M_ATR;
{? _m_atr<>null
|| ZL.KTM().M_ATR().SYM;
   ATR.FLAG_PAR:=1;
   ATR.ZL:=ZL.ref();
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','ZL');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   _can_edit:=1;
   {? ZL.STAN<>'N'
   || _can_edit:=0
   ?};
   DK_C.btn_eopt('RED_ATR','NEW',{? _can_edit ||'state=normal' || 'state=grayed' ?});
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
ATR.FLAG_PAR:=0;
ATR.ZL:=null();
_wyn


\sel_rozmp_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Wyświetlenie atrybutów wybranego pracownika
::   WE: [_a] - P.ref()
::----------------------------------------------------------------------------------------------------------------------
{? (_<1)|(_a=~~)|(type_of(_a)<>(type_of(null()))) || _a:=P.ref ?};
ROZMP.cntx_psh();
ROZMP.index('OSOBA');
ROZMP.prefix(P.OSOBA().ref());
ROZMP.win_sel('WER');
{? ROZMP.first()
|| POMOC.TAT_M:='L';
   ROZMP.select()
|| FUN.info('Lista atrybutów osoby jest pusta.'@)
?};
ROZMP.cntx_pop();
~~


\atr_get_srsr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Zwraca SRSR.ref na podstawie wartości zmiennej ATR.WARx który jest środkiem trwałym
::   WE: _a - M_ATR.ref() - wzorzec atrybutów
::   WY: SRSR.ref() lub null()
::----------------------------------------------------------------------------------------------------------------------
_matr:=_a;

_result:=null();

M_ATR.cntx_psh(); M_ATR.clear();
SRSR.cntx_psh(); SRSR.clear();
DK_C.cntx_psh(); DK_C.clear();

{? M_ATR.seek(_matr)
||
   _max:=exec('il_atr','mat_atr');
   {! _it:=1.._max
   |? _result=null()
   |! _rule_chk:=$('M_ATR.SL_'+form(_it,-2)+'().TYP');
      {? ATR.MJS='DK'
      || _rule_get:=$('DK.DK_C().WAR'+form(_it,-2))
      || _rule_get:=$('ATR.WAR'+form(_it,-2))
      ?};
      {? _rule_chk()='R'
      || _nri:=_rule_get();
         {? _nri<>''
         || SRSR.index('NRI');
            SRSR.prefix('T',_nri);
            {? SRSR.first()
            || _result:=SRSR.ref()
            ?}
         ?}
      ?}
   !}
?};
DK_C.cntx_pop();
SRSR.cntx_pop();
M_ATR.cntx_pop();
_result


\atr_czy_srsr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Sprawdza, czy podany wzorzec atrybutów posiada atrybut, który jest typu środek trwały
::   WE: _a - M_ATR.ref() - wzorzec atrybutów
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_matr:=_a;

_result:=0;

M_ATR.cntx_psh();
M_ATR.clear();
{? M_ATR.seek(_matr)
||
   _max:=exec('il_atr','mat_atr');
   {! _it:=1.._max
   |? _result=0
   |! _rule_chk:=$('M_ATR.SL_'+form(_it,-2)+'().TYP');
      {? _rule_chk()='R'
      || _result:=1
      ?}
   !}
?};
M_ATR.cntx_pop();
_result


\srsr_sync_dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Ustala ilość i cenę na DK dla dokumentów związanych ze środkami trwałymi
::   WE: _a - SRSR.ref
::       [_b] - 0 lub brak - wynik zapisywany do DK, 1 - wynik zapisywany do ZMIENNE.
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>type_of(0) || _b:=0 ?} || _b:=0 ?};
_srsr:=_a;
_msg:='';
SRSR.cntx_psh();
SRSR.prefix();
{? SRSR.seek(_srsr)
||
   {? _b
   || {? ZMIENNE.IL<>1
      || _msg+=('To wyposażenie jest środkiem trwałym. Jego ilość powinna wynosić 1.'@)
      ?}
   || {? DK.IL<>1
      || _msg+=('To wyposażenie jest środkiem trwałym. Jego ilość powinna wynosić 1.'@)
      ?}
   ?};
   SRST.cntx_psh();
   SRST.index('SROD');
   SRST.prefix(SRSR.ref(),SSTALE.AR,SSTALE.AO);
   {? SRST.first()
   || {? SRSR.GRP<>'E' | __DTREE | __LELEM
      || _srst:=SRST.ref()
      || _srsr:=exec('get_srsr_root','fst',SRSR.ref());
         SRST.prefix(_srsr,SSTALE.AR,SSTALE.AO);
        {? SRST.first()  || _srst:=SRST.ref() || _srst:=null ?}
      ?}
   || _srst:=null
   ?};
   {? _srst<>null()
   || {? _b
      || {? SRST.NETF>0 & ZMIENNE.C<>SRST.NETF
         || {? _msg<>''
            || _msg+=(' Jego cena powinna być zgodna z wartością w kartotece.'@)
            || _msg+=('To wyposażenie jest środkiem trwałym. Jego cena powinna być zgodna z wartością w kartotece.'@)
            ?};

            ZMIENNE.C:=SRST.NETF
         ?}
      || {? SRST.NETF>0 & DK.C<>SRST.NETF
         || DK.C:=SRST.NETF
         ?}
      ?}
   ?};
   SRST.cntx_pop()
?};
{? _msg<>''
|| FUN.info(_msg)
?};
SRSR.cntx_pop()


\srsr_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Akcja Wybierz w oknie środków trwałych - słowniku dla wartosci atrybutu
::----------------------------------------------------------------------------------------------------------------------
SRST.cntx_psh();
SRST.index('SROD');
SRST.prefix(SRSR.ref(),SSTALE.AR,SSTALE.AO);
{? SRST.first() & SRST.R<>'S'
|| {? SRSR.GRP<>'E' | __DTREE | __LELEM
   || _ref:=SRST.ref()
   || _sr_ref:=exec('get_srsr_root','fst',SRSR.ref());
      SRST.prefix(_sr_ref,SSTALE.AR,SSTALE.AO);
     {? SRST.first()  || _ref:=SRST.ref() || _ref:=null ?}
   ?}
|| _ref:=null
?};
SRST.cntx_pop();
{? _ref
|| SRST.seek(_ref);
   sel_exit()

|| FUN.info('Nie odnaleziono środka w danych bieżącego okresu.\n'
            'Środek mógł zostać zlikwidowany lub zbyty do innej firmy grupy kapitałowej\n'
            'w okresie wcześniejszym lub dołączony w okresie późniejszym.'@)
?}


\rek_wzor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: podswietlenie uzytych rekordow
::----------------------------------------------------------------------------------------------------------------------
_lp:=__lstatr.LP;
_typ:=__lstatr.TYP;
_wyn:=0;
__strwzo.cntx_psh();
{? __strwzo.first() || {! |? {? __strwzo.LP=_lp & __strwzo.TYP=_typ || _wyn:=1; 0 || __strwzo.next() ?} !} ?};
__strwzo.cntx_pop();
{? _wyn
|| '__lstatr#01#01'
|| ''
?}


\ctrlMfirm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: kontrola występowania atrybutu odwołań do atrybutu w innych firmach
::   WE: _a - ref M_ATR-a
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_ref_a:=_a;
_count:=0;
{? ~_count
|| M.cntx_psh();
   M.index('M_ATR');
   M.prefix('T',_ref_a);
   {? M.first()
   || {!
      |? _count+=(M.count()
                 -exec('FindInSet','#table','MKODK','M',M.ref(),,"MKODK.prefix(M.ref());MKODK.size",,,0)
                 -exec('FindInSet','#table','MDOST','MREF',M.ref(),,"MDOST.prefix(M.ref());MDOST.size",,,0)
                 -exec('FindInSet','#table','MJM','JM',M.ref(),,"MJM.prefix(M.ref());MJM.size",,,0)
                 -exec('FindInSet','#table','MX','M',M.ref(),,"MX.prefix(M.ref());MX.size",,,0)
                 -exec('FindInSet','#table','M_OPAKOW','M_OPAKOW',M.ref(),,"M_OPAKOW.prefix(M.ref());M_OPAKOW.size",,,0)
                 -exec('FindInSet','#table','TRANSLAT','M',M.ref(),,"TRANSLAT.prefix(M.ref());TRANSLAT.size",,,0)
                 -exec('FindInSet','#table','MST','MG',M.ref(),,"MST.prefix(M.ref());MST.size",,,0)
                 -exec('FindInSet','#table','MZ','MZ',M.ref(),,"MZ.prefix(M.ref());MZ.size",,,0)
                 -exec('FindInSet','#table','M_KH_SV','MAT',M.ref(),,"M_KH_SV.prefix(M.ref());M_KH_SV.size",,,0)
                 -exec('FindInSet','#table','M_SV','OD',M.ref(),'0',"M_SV.prefix(\'0\',M.ref());M_SV.size",,,0)
                 -exec('FindInSet','#table','CNM','M',M.ref(),,"CNM.prefix(M.ref());CNM.size",,,0)
                 -exec('FindInSet','#table','BADMSEH','M',M.ref(),,"BADMSEH.prefix(M.ref());BADMSEH.size",,,0)
                 -exec('FindInSet','#table','PTC','TO',M.ref(),,"PTC.prefix(M.ref());PTC.size",,,0));
         ~_count & M.next()
      !}
   ?};
   M.index('M_ATR');
   M.prefix('N',_ref_a);
   {? M.first()
   || {!
      |? _count+=(M.count()
                 -exec('FindInSet','#table','MKODK','M',M.ref(),,"MKODK.prefix(M.ref());MKODK.size",,,0)
                 -exec('FindInSet','#table','MDOST','MREF',M.ref(),,"MDOST.prefix(M.ref());MDOST.size",,,0)
                 -exec('FindInSet','#table','MJM','JM',M.ref(),,"MJM.prefix(M.ref());MJM.size",,,0)
                 -exec('FindInSet','#table','MX','M',M.ref(),,"MX.prefix(M.ref());MX.size",,,0)
                 -exec('FindInSet','#table','M_OPAKOW','M_OPAKOW',M.ref(),,"M_OPAKOW.prefix(M.ref());M_OPAKOW.size",,,0)
                 -exec('FindInSet','#table','TRANSLAT','M',M.ref(),,"TRANSLAT.prefix(M.ref());TRANSLAT.size",,,0)
                 -exec('FindInSet','#table','MST','MG',M.ref(),,"MST.prefix(M.ref());MST.size",,,0)
                 -exec('FindInSet','#table','MZ','MZ',M.ref(),,"MZ.prefix(M.ref());MZ.size",,,0)
                 -exec('FindInSet','#table','M_KH_SV','MAT',M.ref(),,"M_KH_SV.prefix(M.ref());M_KH_SV.size",,,0)
                 -exec('FindInSet','#table','M_SV','OD',M.ref(),'0',"M_SV.prefix(\'0\',M.ref());M_SV.size",,,0)
                 -exec('FindInSet','#table','CNM','M',M.ref(),,"CNM.prefix(M.ref());CNM.size",,,0)
                 -exec('FindInSet','#table','BADMSEH','M',M.ref(),,"BADMSEH.prefix(M.ref());BADMSEH.size",,,0)
                 -exec('FindInSet','#table','PTC','TO',M.ref(),,"PTC.prefix(M.ref());PTC.size",,,0));
         ~_count & M.next()
      !}
   ?};
   M.cntx_pop()
?};
{? _count>0 || _res:=0 ?};
_res


\matr_inp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: Atrybuty dla tabeli INP
::----------------------------------------------------------------------------------------------------------------------
_akc:=INN.D<>date(0,0,0);
_flag_ed:=ATR.FLAG_ED;
_flag:=ATR.FLAG;
ATR.FLAG_ED:=0;
ATR.FLAG:=0;
ATR.FLAG_PAR:=0;

_wyn:=0;
ATR.MJS:='INP';

_m_atr:=INP.M().M_ATR;
{? _m_atr<>null
|| INP.M().M_ATR().SYM;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','INP');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW','state=normal');
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
ATR.FLAG_ED:=_flag_ed;
ATR.FLAG:=_flag;
ATR.FLAG_PAR:=0;
_wyn


\prczyprec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [20.42]
:: OPIS: przed redakcja pola TAT.CZY_PREC
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? ((-menu_txt())='popraw')
|| _buf:=obj_new(@.CLASS.BUFFER, 'TAT');
   _wyn:=TAT.count()=0;
   _buf.restore();
   {? _wyn=0 || FUN.info('Atrybut wykorzystywany, zmiana typu wartości niedozwolona.'@) ?}
?};
{? _wyn || __typtat:=TAT.CZY_PREC ?};
_wyn


\poczyprec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [JK] [20.42]
:: OPIS: po redakcji pola TAT.CZY_PREC
::----------------------------------------------------------------------------------------------------------------------
{? TAT.CZY_PREC='N' || TAT.PREC:=0 ?};
win_disp();
1


\pwczyprec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [JK] [20.42]
:: OPIS: przed wyświetleniem pola TAT.CZY_PREC
::----------------------------------------------------------------------------------------------------------------------
{? TAT.win_edit('?')='REDOWP'
|| {? exec('prprectat','mat_atr') & TAT.CZY_PREC='T'
   || TAT.efld_opt('REDOWP','enable=1',,'PREC')
   || TAT.efld_opt('REDOWP','enable=0',,'PREC')
   ?}
?}


\gray_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Inicjuje mechanizm wyszarzania
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('ATR_GRAY')<=0
|| ATR_GRAY:=obj_new('types'
                     ,'names');
   ATR_GRAY.types:='';
   ATR_GRAY.names:='';
   ~~
?};
~~


\pr_mod_m_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: przed redakcją możliwości modyfikacji atrybutu
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_fld:=cur_afld();
_sla:='M_ATR.SL_'+(_fld+2);
_slt:=_sla+'().TYP';
{? (($_sla)())=null() | (';PR'*(($_slt)()))>1 || _res:=0 ?};
_res


\isMOD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: sprawdza czy dla danego wzorca dostępna jest modyfikacja
::   WE: _a - M_ATR
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_m_atr:={? var_pres('_a')=type_of(null()) || _a || null() ?};

{? _m_atr<>null()
|| M_ATR.cntx_psh();
   M_ATR.prefix();
   {? M_ATR.seek(_m_atr)
   || _ii:=0;
      {!
      |? _ii+=1;
         {? ($('M_ATR.SL_'+form(_ii,-2,0,'99')))()<>null()
         || {? ($('M_ATR.MOD'+form(_ii,-2,0,'99')))()
            || _res:=1;
               0
            || _ii<10
            ?}
         || 0
         ?}
      !}
   ?};
   M_ATR.cntx_pop()
?};
_res


\bl_umod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: wartość początkowa pola UMOD
::----------------------------------------------------------------------------------------------------------------------
ATR.UZUP


\ctrlDK_C
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: sprawdza czy dana cecha z brakiem wartości nie została wykorzystana w innych miejscach
::   WE: _a - cecha
::       _b - wskazanie na dostawę PRDK
::   WY: 1-została 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;

DK_C.cntx_psh();
DK_C.prefix();
{? DK_C.seek(_a) & DK_C.M_ATR<>null()
|| _ll:=exec('rozm_atr','mat_atr',DK_C.M_ATR);
:: sprawdzamy czy cecha ma jakieś braki w wartościach dla pozycji do modyfikacji
   _nowar:=0;
   {? _ll>0
   || _ii:=0;
      {!
      |? _ii+=1;
         _nowar:=($('DK_C.WAR%1'[form(_ii,-2,0,'99')]))()='' & ($('DK_C.M_ATR().MOD%1'[form(_ii,-2,0,'99')]))();
         ~_nowar & _ii<_ll
      !}
   ?};
   _res:=exec('otherDK_C','mat_atr',DK_C.ref(),_b,~_nowar)
?};
DK_C.cntx_pop();
_res


\otherDK_C
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: sprawdzenie czy wykorzystano daną cechę w innych miejscach
::   WE: [_a] - DK_C.ref()
::       [_b] - ref sql dostawy
::       [_c] - 1-kontrola tylko dokumentów magazynowych z różną dostawą  0(domyslnie)-nie
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_dk_c:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_prdk:={? var_pres('_b')=type_of('') || _b || '' ?};
_only:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_ff:="exec('FindInSet','#table','%1'[_a],'DK_C',_b)<>null()";

:: tabele niemaskowalne lub o stalej masce
ODZAMPT.cntx_psh();
ZK_P.cntx_psh();
ZD_POZ.cntx_psh();
PAL_POZ.cntx_psh();
OFP.cntx_psh();
INP.cntx_psh();
ZL.cntx_psh();
REZ.cntx_psh();
PD_K.cntx_psh();
TCHMAT.cntx_psh();
TMAT.cntx_psh();
ZPARN.cntx_psh();


{? ~_only & ~_res || _res:=_ff('ODZAMPT',_dk_c) ?};
{? ~_only & ~_res || _res:=_ff('ZK_P',_dk_c) ?};
{? ~_only & ~_res || _res:=_ff('ZD_POZ',_dk_c) ?};
{? ~_only & ~_res || _res:=_ff('PAL_POZ',_dk_c) ?};
{? ~_only & ~_res || _res:=_ff('OFP',_dk_c) ?};
{? ~_only & ~_res || _res:=_ff('ZL',_dk_c) ?};
:: {? ~_res || _res:=_ff('REZ',_dk_c) ?};
:: {? ~_res || _res:=_ff('PD_K',_dk_c) ?};
{? ~_only & ~_res || _res:=_ff('TCHMAT',_dk_c) ?};
{? ~_only & ~_res || _res:=_ff('TMAT',_dk_c) ?};
{? ~_only & ~_res || _res:=_ff('ZPARN',_dk_c) ?};

ODZAMPT.cntx_pop();
ZK_P.cntx_pop();
ZD_POZ.cntx_pop();
PAL_POZ.cntx_pop();
OFP.cntx_pop();
INP.cntx_pop();
ZL.cntx_pop();
REZ.cntx_pop();
PD_K.cntx_pop();
TCHMAT.cntx_pop();
TMAT.cntx_pop();
ZPARN.cntx_pop();

{? ~_res
||
:: kontrola po kolejnych tabelach maskowalnych
   OKR.cntx_psh();
   DK.cntx_psh();
   FAP.cntx_psh();
   ZK_P.cntx_psh();
   ZD_POZ.cntx_psh();
   PAL_POZ.cntx_psh();
   PX_OBJ.cntx_psh();
   SC.cntx_psh();
   INP.cntx_psh();
   REZ.cntx_psh();
   TCHMAT.cntx_psh();
   TMAT.cntx_psh();

   ODDZ.cntx_psh();
   ODDZ.index('KOD2');
   ODDZ.prefix();
   _loop:=ODDZ.first();
   {!
   |? _loop
   |!
      OKR.index('MC');
      OKR.prefix(REF.FIRMA,1);
      {? OKR.first()
      || {!
         |? exec('dkc_open','open_tab',ODDZ.KOD,2-$(OKR.ROK));

            {?      1 & ~_res || _res:=~exec('czytawar','mat_atr','DK','DK_C','PRDK',_dk_c,_prdk) ?};
            {? ~_only & ~_res || _res:=_ff('FAP',_dk_c) ?};
            {? ~_only & ~_res || _res:=_ff('ZK_P',_dk_c) ?};
            {? ~_only & ~_res || _res:=_ff('ZD_POZ',_dk_c) ?};
            {? ~_only & ~_res || _res:=_ff('INP',_dk_c) ?};
            {? ~_only & ~_res || _res:=_ff('PAL_POZ',_dk_c) ?};
            {? ~_only & ~_res || _res:=_ff('TCHMAT',_dk_c) ?};
            {? ~_only & ~_res || _res:=_ff('TMAT',_dk_c) ?};
            {? ~_only & ~_res || _res:=_ff('PX_OBJ',_dk_c) ?};
            ~_res & OKR.next()
         !}
      ?};
      _loop:=~_res & ODDZ.next()
   !};
   ODDZ.cntx_pop();
   DK.cntx_pop();
   FAP.cntx_pop();
   ZK_P.cntx_pop();
   ZD_POZ.cntx_pop();
   PAL_POZ.cntx_pop();
   PX_OBJ.cntx_pop();
   SC.cntx_pop();
   INP.cntx_pop();
   REZ.cntx_pop();
   TCHMAT.cntx_pop();
   TMAT.cntx_pop();
   OKR.cntx_pop()
?};
_res


\matr_iny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Atrybuty dla tabeli INY
::----------------------------------------------------------------------------------------------------------------------
_akc:=INN.D<>date(0,0,0);
_flag_ed:=ATR.FLAG_ED;
_flag:=ATR.FLAG;
ATR.FLAG_ED:=0;
ATR.FLAG:=0;
ATR.FLAG_PAR:=0;

_wyn:=0;
ATR.MJS:='INY';

_m_atr:=INY.M().M_ATR;
{? _m_atr<>null
|| INY.M().M_ATR().SYM;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','INY');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW','state=normal');
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
ATR.FLAG_ED:=_flag_ed;
ATR.FLAG:=_flag;
ATR.FLAG_PAR:=0;
_wyn


\defgs1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Kody GS1 dla atrybutów dostaw
::----------------------------------------------------------------------------------------------------------------------
_edit:=M_ATR.win_edit('?');
M_ATR.win_edit('REDGS1');
{? M_ATR.edit() || M_ATR.put(1) ?};
M_ATR.win_edit(_edit);
~~


\prgs1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Przed redakcją GS1
::----------------------------------------------------------------------------------------------------------------------
_nr:=cur_afld()+2;
($('M_ATR.SL_'+_nr))()<>null()


\f3gs1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Słownik dla GS1
::----------------------------------------------------------------------------------------------------------------------
_fld:=fld();
_wyb:='';
_nr:=cur_afld()+2;
EAND.cntx_psh();
EAND.index('R');
EAND.prefix('A');
{? EAND.first()
|| EAND.find_key(_fld,);
   _sel:=EAND.win_sel('?');
   EAND.win_sel('SEL');
   {? EAND.select(,1) || _wyb:=EAND.KOD || _wyb:=_fld ?};
   EAND.win_sel(_sel)
|| FUN.info('Brak możliwości wyboru kodów GS1.'@);
   _wyb:=_fld
?};
EAND.cntx_pop();
($('M_ATR.GS1'+_nr))():=_wyb;
_wyb



\pogs1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Po redakcji GS1
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_fld:=fld();
{? _fld<>''
|| {? exec('FindInSet','#table','EAND','R',_fld,'A',,1)=null()
   || {? exec('FindInSet','#table','EAND','R',_fld,'A')<>null()
      || _nr:=cur_afld()+2;
         ($('M_ATR.GS1'+_nr))():=exec('FindInSet','#table','EAND','R',_fld,'A',"@.EAND.KOD",,,'')
      || _res:=0
      ?}
   ?}
?};
_res


\example
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Wyświetlenie przykładu kodu lub nazwy
::   WE: _a - 0-kod, 1-nazwa
::----------------------------------------------------------------------------------------------------------------------
{? ~_a
|| __npwzor.win_sel(__sel_np);
   __npwzor.first();
   __npwzor.select()
|| __npwzn.win_sel(__sel_nw);
   __npwzn.first();
   __npwzn.select()
?};
~~


\matr_zparn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Atrybuty dla tabeli ZPARN
::----------------------------------------------------------------------------------------------------------------------
::_akc:=OFE.A='Z';
_akc:=1;
ATR.FLAG:=0;
ATR.MJS:='ZPARN';

_wyn:=0;
_m_atr:=ZPARN.KTM().M_ATR;
{? _m_atr<>null
|| ZPARN.KTM().M_ATR().SYM;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr','ZPARN');
   _jest:=($(ATR.MJS+'.DK_C'))()<>null;
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW',{? ~_jest | ~exec('dkccount','mat_atr',DK_C.ref()) ||'state=normal' || 'state=grayed' ?});
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   {? _akc
   || DK_C.display()
   || {? ~(_wyn:=DK_C.edit("exec('newakatr','mat_atr')"))
      || exec('retwar_a','mat_atr')
      ?}
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
_wyn


\ctrlPOWzparn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Kontrola powiązań na niższym poziomie partii
::   WE: _a - numer atrybutu
::   WY: 1-można edytować 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_num:=_a;
{? ZL.DK_C<>null()
|| _ref:=ZL.ref();
   _ktm:=ZL.KTM;
   _war:=($('ZL.DK_C().WAR%1'[_num]))();
   ZL.cntx_psh();
   ZPARN.cntx_psh();
   _ref:=ZL.ref();
   _nrnzl:={? ZL.NRNZL=0 || ZL.UNRZL || ZL.NRNZL ?};
   ZL.index('NRNZL');
   ZL.prefix(_nrnzl);
   {? ZL.first()
   || {!
      |? _ref:=ZL.ref();
         ZPARN.index('ZL2');
         ZPARN.prefix(_ref);
         {? ZPARN.first()
         || {!
            |? {? ZPARN.DK_C<>null() & (_ktm<>ZPARN.KTM | ($('ZPARN.DK_C().WAR%1'[_num]))()<>'') || _res:=0 ?};
               _res & ZPARN.next()
            !}
         ?};
         _res & ZL.next()
      !}
   ?};
   ZL.cntx_pop();
   ZPARN.cntx_pop()
?};
_res


\cechaWGparti
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: zwraca cechę dostawy wg parti
::   WE: _a - M_ATR
::       _b - partia
::   WY: null lub cecha
::----------------------------------------------------------------------------------------------------------------------
  _res:=null();
_m_atr:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_zparn:={? var_pres('_b')=type_of(null()) || _b || null() ?};

ZPARN.cntx_psh();
{? _m_atr<>null() & _zparn<>null() & (ZPARN.prefix(); ZPARN.seek(_zparn))
|| _part_num:=exec('partia_num_matr','mat_atr',_m_atr);
   _war:=obj_new(10);
   {! _ii:=1..10
   |! _war[_ii]:={? _ii=_part_num
                 || ZPARN.SYM
                 || {? ZPARN.DK_C<>null()      || ($('ZPARN.DK_C().WAR%1'[form(_ii,-2,0,'99')]))()
                    |? ZPARN.ZL().DK_C<>null() || ($('ZPARN.ZL().DK_C().WAR%1'[form(_ii,-2,0,'99')]))()
                    || ''
                    ?}
                 ?}
   !};
   _res:=exec('m_atr_sprdod','mat_atr'
          ,_war[1],_war[2],_war[3],_war[4],_war[5]
          ,_war[6],_war[7],_war[8],_war[9],_war[10]
          ,_m_atr,_zparn);
   obj_del(_war)
?};
ZPARN.cntx_pop();
_res


\matr_sur
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Atrybuty dla tabeli tymczasowej SUR (rozliczanie odpadów na podstawie raportów produkcji)
::   WY 0/1
::----------------------------------------------------------------------------------------------------------------------
ATR.FLAG:=0;
ATR.MJS:='ZLIM';
_wyn:=0;
_sur:=cur_tab(1,1);
_m_atr:=ATR.M_ATR;
{? _m_atr<>null
|| ATR.M_ATR();
   ATR.FLAG_PAR:=1;
:: podczytanie wartosci atrybutow
   exec('ustawatr','mat_atr',,ATR.SUR_DKC);
   _jest:=ATR.SUR_DKC<>null();
:: Czyszcę pole z partią
::   exec('atr_set_partia','mat_atr',ATR.M_ATR,'');
   DK_C.btn_eopt('RED_ATR','AKC','state=normal');
   DK_C.btn_eopt('RED_ATR','NEW'
      ,{? ~_jest | ~exec('dkccount','mat_atr',DK_C.ref()) || 'state=normal' || 'state=grayed' ?});
   DK_C.btn_eopt('RED_ATR','INF','state=normal');
   DK_C.win_edit('RED_ATR');
   _wyn:=DK_C.edit("exec('newakatr','mat_atr')");
   {? _wyn>0
   || ATR.SUR_DKC:=ZLIM.DK_C;
::    Partie na zleceniu (przypisanie symbolu partii do widoku w oknie redagowania)
      _zl:=exec('FindAndGet','#table',ZL,_sur.ZL_REF,,,null());
      {? exec('zlec_party','zl_common',_zl)>0
      ||
::       Ustawiam wartosc zmiennej ATR na symbol partii
         exec('atr_set_partia','mat_atr',ATR.M_ATR,ATR.ZPARN_DK().SYM)
      ?};
      win_disp()
::   || exec('retwar_a','mat_atr')
   ?}
|| FUN.info('Indeks materiałowy bez określenia wzorca atrybutów dostaw.'@)
?};
ATR.FLAG_PAR:=0;
:: Przywrócenie flagi edycji
ATR.FLAG:={? ATR.FLAG_ED || 2 || 0 ?};
_wyn


\elastic_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Wyświetlanie atrybutów dla ElasticSearch z poziomu tabeli M
::----------------------------------------------------------------------------------------------------------------------
{? M.M_ATR_B=null() || return('') ?};
M_ATR.cntx_psh();
TAT.cntx_psh();
:: otwieramy M_ATR
M.M_ATR_B();
_nr:=_a+2;
{? ($('M_ATR.SL_'+_nr))()=null() || M_ATR.cntx_pop();TAT.cntx_pop();return('') ?};
:: otwieramy TAT
($('M_ATR.SL_'+_nr+'()'))();
_wyn:=(50+TAT.NA)+' '+(50+($('M.'+_a))());
M_ATR.cntx_pop();
TAT.cntx_pop();
_wyn


\elastic_atr_dk_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Wyświetlanie atrybutów dla ElasticSearch z poziomu tabeli DK
::----------------------------------------------------------------------------------------------------------------------
{? DK_C.M_ATR=null() || return('') ?};
M_ATR.cntx_psh();
TAT.cntx_psh();
:: otwieramy M_ATR
DK_C.M_ATR();
_nr:=_a+2;
{? ($('M_ATR.SL_'+_nr))()=null() || M_ATR.cntx_pop();TAT.cntx_pop();return('') ?};
:: otwieramy TAT
($('M_ATR.SL_'+_nr+'()'))();
_wyn:=(50+TAT.NA)+' '+(50+($('DK_C.'+_a))());
M_ATR.cntx_pop();
TAT.cntx_pop();
_wyn


\pr_noatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Przed redakcją pola bez kontroli atrybutów
::----------------------------------------------------------------------------------------------------------------------
{? M_ATR.TYP='B' & M_ATR.ADD=2 || 0 || 1 ?}


\po_noatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Po redakcji pola bez kontroli atrybutów
::----------------------------------------------------------------------------------------------------------------------
{? M_ATR.TYP='B'
|| {? M_ATR.NOATR='T'
   || M_ATR.efld_opt('REDB','mark=0',,'SL_01','NA')
   || M_ATR.efld_opt('REDB','mark=1',,'SL_01','NA')
   ?}
?};
1


\po_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Po redakcji pola sposób rejestracji indeksu
::----------------------------------------------------------------------------------------------------------------------
{? M_ATR.TYP='B'
|| {? M_ATR.ADD=2
   || M_ATR.efld_opt('REDB','enable=0',,'NOATR')
   || M_ATR.efld_opt('REDB','enable=1',,'NOATR')
   ?};
   {? M_ATR.ADD=2
   || M_ATR.NOATR:='N';
      exec('po_noatr','mat_atr')
   ?}
?};
1


\pr_mob_m_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: przed redakcją dostępności na urządzeniu mobilnym atrybutu
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_fld:=cur_afld();
_sla:='M_ATR.SL_'+(_fld+2);
_slt:=_sla+'().TYP';
{? (($_sla)())=null() | (';PR'*(($_slt)()))>1 || _res:=0 ?};
_res

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:36 3c4971ac5debf4b422d34ef99c27b0810d1cd17415cbe2bfb209ed651a969c07c0a898738b8606808ac4f5ef5ede1f62f83526d3200cffb5f12db07596af91e2599d929a75945cc99a0056b72229ad16147fda312504bdc274de39fd9f8295c6b828b7381da21e2348163b0d86605fbe3414aa44d24daaaef383cb0ac874b25b
