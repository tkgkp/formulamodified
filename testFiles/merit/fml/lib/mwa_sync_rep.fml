:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_sync_rep.fml
:: Utworzony: 18.02.2019
:: Autor: Markus
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi sync_rep przez MacroWebAPI
::======================================================================================================================


\serialize_syncRep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji rekordów z tabeli SYNC_REP.
::   WE: _a - FILE - obiekt plikowy przeznaczony do zapisu wynikowego JSONa
::   WY: 0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

_data:="
   SYNC_REP.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'REFERENCE',,'SYNC_PD',,'NAZ',,'NR',,'AKT',
   );
   ''
";
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('resp',_resp);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);

_resp


\read_syncRep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje wszystkie rekordy tabeli SYNC_REP.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
:: #PARAM pd Przeznaczenie danych np. MOBIL, OLAP. Domyślnie - wyświetla ze wszystkich.
::_pd:={? (_i:=exec('get_option','#webservice',_options,'pd'))<>'' || _i || '' ?};

_par:=params_get();
_pd:={? (_i:=exec('get_option','mwapi',_par,'Pd').value)<>'' || _i || '' ?};

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

SYNC_REP.cntx_psh();
SYNC_REP.index('PD');
{? _pd=''
|| SYNC_REP.prefix()
|| SYNC_PD.cntx_psh();
   SYNC_PD.index('SYM');
   SYNC_PD.prefix(_pd);
   {? SYNC_PD.first()
   || SYNC_REP.prefix(SYNC_PD.ref())
   || _wsenv.add_error('Nie znaleziono przeznaczenia danych %1.'@[_pd])
   ?};
   SYNC_PD.cntx_pop()
?};

{? _wsenv.has_errors()
|| _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
|| _result:=exec('serialize_syncRep','mwa_sync_rep',_par)
?};
SYNC_REP.cntx_pop();
_result


\read_syncRep_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje rekord tabeli SYNC_REP wg refa.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_ref:=exec('get_option','mwapi',_par,'Ref').value;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

SYNC_REP.cntx_psh();
SYNC_REP.clear();
{? type_of(ref_tab(_ref))>0 & SYNC_REP.seek(_ref)
|| SYNC_REP.index('PDNR');
   SYNC_REP.prefix(SYNC_REP.SYNC_PD,SYNC_REP.NR);
   {? SYNC_REP.first()
   ||
      _result:=exec('serialize_syncRep','mwa_sync_rep',_par)
   ||
      _wsenv.add_error('Nie znaleziono repliki %1.'@[_ref])
   ?}
||
   _wsenv.add_error('Nie znaleziono repliki %1.'@[_ref])
?};
SYNC_REP.cntx_pop();

{? _wsenv.has_errors()
|| _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result


\prolog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła startowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('prolog','mwapi',_par);
~~


\epilog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Fomuła końcowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
exec('epilog','mwapi');
~~

:Sign Version 2.0 jowisz:1028 2019/06/07 15:59:55 4ec8e3dacedb8ac1e1fe93c78eb4b1ff65e45bdd7736f40d266fd33f3689a9773eec184e71d8cd4ac5e736e09cf78c98cc64880dfbe28d75cde8d6a7a30ff3c0ab427cf639634341c90a6bd66450ca2845b330c9b363218b051e7f565a0cdfc4c77c359d69568f14c2cda26569b0c5be6c2302c4f9e34b8690eb941ff8935db4
