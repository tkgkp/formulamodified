:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zl_wkj.fml
:: Utworzony: 27.04.2016
:: Autor: MagLak
::======================================================================================================================
:: Zawartosc: Formuły do obsługi kontroli jakości
::======================================================================================================================


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [17.00]
:: OPIS: selekcja operacji kontroli jakości
::----------------------------------------------------------------------------------------------------------------------
ZGP.cntx_psh();
ZGH.cntx_psh();

_ikon:="exec('icon_status','zl_guide',ZGP.STATUS)";
ZGP.win_fml('WER_WKJ',,'STATUS',,'ICON_BEFORE',_ikon,2);

ZGP.index('KONTR1');

FILTER.STATUS:=exec('get','#params',8600,2,OPERATOR.USER);
FILTER.TMP:=exec('get','#params',8604,2,OPERATOR.USER);

:: Inicjalizacja środowiska
_env_kj:=obj_new('TAB_ZGP','TAB_ZLGD','WER_ZGP','WER_ZLGD');
_env_braki:=obj_new('TAB','RELOAD');
_env_braki.RELOAD:=0;
_env_braki.TAB:='Operacje naprawcze do braków'@;
_env:=obj_new('env_limit');
_env.env_limit:=exec('env_limit','zl_limit');

params_set('env_kj',_env_kj,'env_braki',_env_braki,'env',_env);

_env_kj.TAB_ZGP:=exec('dsk_get_status_zgp','zl_wkj');
_env_kj.WER_ZGP:=_env_kj.TAB_ZGP.mk_sel('Status'@,,0,'kjzgpstat',,,,,'U');
_env_kj.TAB_ZGP.win_fld(_env_kj.WER_ZGP,,'NAZWA',,,20,,,'Status'@);

_env_kj.TAB_ZLGD:=exec('dsk_get_status_zlgd','zl_wkj');
_env_kj.WER_ZLGD:=_env_kj.TAB_ZLGD.mk_sel('Status'@,,0,'#kjzlgdstat',,,,,'U');
_env_kj.TAB_ZLGD.win_fld(_env_kj.WER_ZLGD,,'NAZWA',,,20,,,'Status'@);

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'Status'@;
_formula:="
::   exec('load','#desktop','selektor_zgp','tte_wkj_zgp.dsk',,,,,,0);
::   exec('set_name','#desktop','','selektor_zgp','status_zgp@panel','Status'@);
::   exec('load','#desktop','selektor_zlgd','tte_wkj_zlgd.dsk',,,,,,0);
::   exec('set_name','#desktop','','selektor_zlgd','status_zlgd@panel','Status'@);
   params_set(params_get());
   _env:=params_get().env_kj;
::   exec('load','#desktop','selektor','lmg_bad.dsk',,,,,,0);
::   exec('set_name','#desktop','','selektor','status@panel','Status'@);
   exec('skip','zl_wkj');
:: Ustawienie się na zapamiętanych wcześniej statusach
   _tab_zgp:=_env.TAB_ZGP;
   _view_zgp:=null();
   _last_zgp:=exec('get','#params',8600,type_of(''),OPERATOR.USER);
   {? _last_zgp<>''
   || _tab_zgp.cntx_psh();
      _i2:=_tab_zgp.ndx_tmp(,,'KOD',,);
      _tab_zgp.index(_i2);
      _tab_zgp.prefix(_last_zgp,);
      {? _tab_zgp.first()
      || _view_zgp:=_tab_zgp.ref()
      ?};
      _tab_zgp.cntx_pop()
   ?};
   {? _view_zgp<>null()
   || _tab_zgp.seek(_view_zgp)
   ?};
   _tab_zlgd:=_env.TAB_ZLGD;
   _view_zlgd:=null();
   _last_zlgd:=exec('get','#params',8604,type_of(''),OPERATOR.USER);
   {? _last_zlgd<>''
   || _tab_zlgd.cntx_psh();
      _i2:=_tab_zlgd.ndx_tmp(,,'KOD',,);
      _tab_zlgd.index(_i2);
      _tab_zlgd.prefix(_last_zlgd,);
      {? _tab_zlgd.first()
      || _view_zlgd:=_tab_zlgd.ref()
      ?};
      _tab_zlgd.cntx_pop()
   ?};
   {? _view_zlgd<>null()
   || _tab_zlgd.seek(_view_zlgd)
   ?};
   win_set('cur_row_pos=-1',_env.TAB_ZGP,_env.WER_ZGP);
   grp_disp(_env.TAB_ZGP,_env.WER_ZGP,1,1);
   win_set('cur_row_pos=-1',_env.TAB_ZLGD,_env.WER_ZLGD);
   grp_disp(_env.TAB_ZLGD,_env.WER_ZLGD,1,1);
   1
";
_layout:='jterm';
{? exec('interm','#system')
|| _layout:='lumen'
?};
_wnd:=ZGP.grp_make(,_formula,'tte_wkj',,,"exec('exit','zws',_a)",,'maximized',_layout);
::exec('create','#desktop',ZGP,'selektor_zgp',_wnd,2,,,'Operacje'@);
_after_rfr:="
   params_set(params_get());
   _env:=params_get().env_kj;
   _tab:=_env.TAB_ZGP;
   FILTER.STATUS:=_tab.KOD;
   exec('set','#params',8600,FILTER.STATUS,OPERATOR.USER);
   exec('skip','zl_wkj');
   win_set('cur_row_pos=-1',ZGP,'WER_WKJ');
   grp_disp(ZGP,'WER_WKJ',1,1);
   ~~
";
ZGP.grp_sel(_wnd,_env_kj.TAB_ZGP,_env_kj.WER_ZGP,'Operacje'@,_after_rfr,,,,,,0,0,'maximized','WER_STAT_ZGP');
ZGP.tab_splt(_wnd,,'vertical','panel_zgp','30,30');
_before:="
   _env:=params_get().env_kj;
   _tab:=_env.TAB_ZGP;
   {? grp_empty(_tab,_env.WER_ZGP)
   || '#disable'
   || ~~
   ?}
";

:: Wyłączenie checkboxów zaznaczających na interm
_env_kj.TAB_ZGP.win_sopt(_env_kj.WER_ZGP,'select_record_checkbox=0');

ZGP.grp_sel(_wnd,ZGP,'WER_WKJ',,,,,,_before,,0,0,'maximized','ZGP');
::exec('create','#desktop',ZGP,'selektor_zlgd',_wnd,2,,,'Kwalifikacja'@);
_after_rfr:="
   params_set(params_get());
   _env:=params_get().env_kj;
   _tab:=_env.TAB_ZLGD;
   FILTER.TMP:=_tab.KOD;
   exec('set','#params',8604,FILTER.TMP,OPERATOR.USER);
   exec('zlgd_reload','zl_wkj',FILTER.TMP);
   win_set('cur_row_pos=-1',ZLGD,'WER_WKJ');
   grp_disp(ZLGD,'WER_WKJ',1,1);
   ~~
";
ZGP.grp_sel(_wnd,_env_kj.TAB_ZLGD,_env_kj.WER_ZLGD,'Kwalifikacja'@,_after_rfr,,,,,,0,0,'maximized','WER_STAT_ZLGD');
:: Wyłączenie checkboxów zaznaczających na interm
_env_kj.TAB_ZLGD.win_sopt(_env_kj.WER_ZLGD,'select_record_checkbox=0');
ZGP.tab_splt(_wnd,,'vertical','panel_zlgd','30,30');
_before:="
   _env:=params_get().env_kj;
   _tab:=_env.TAB_ZLGD;
   {? grp_empty(_tab,_env.WER_ZLGD)
   || '#disable'
   || exec('zlgd_reload','zl_wkj',FILTER.TMP)
   ?}
";
ZGP.grp_sel(_wnd,ZLGD,'WER_WKJ',,,,,,_before,,,,'maximized','ZLGD');
:: Operacje naprawcze do braków
{? exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DGBR',,2)
|| exec('select','braki_k',1,ZGP,_wnd,_env_braki.TAB)
?};
:: Zakwalifikowane braki
{? exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DGBR',,2)
|| _before:="
      BRAKI_GD.index('ZL');
      BRAKI_GD.prefix();
      ~~
   ";
   ZGP.grp_sel(_wnd,BRAKI_GD,'WER','Zakwalifikowane braki'@,,,,,_before,,0,0,'maximized','BRAKI_GD')
?};
:: Problemy na produkcji
ZGP.grp_sel(_wnd,EK_PROB,'WER','Problemy'@,,,,,,,,,'maximized');
task_attach('TTE_WKJ_DPRO');
task_attach('TTE_WKJ_EPRO');
EK_PROB.win_fml('WER',,'EK_SLOP','NAZ','ICON_BEFORE',"exec('ikon_prob','zl_wkj')");

ZGP.win_sel(_wnd);

AreaTitle.setTabWin(ZGP,_wnd);
AreaTitle.setTitle();
FILTER.B_AREA:='KJ';

ZLGD.win_fml('WER_WKJ',,'ZL','SYM','ICON_BEFORE',"
   _kj_bad:=ZLGD.ZGP().KJ_BAD;
   {? _kj_bad='P'
   || 'xwin16.png:94'
   |? _kj_bad='B'
   || 'xwin16.png:93'
   || 'xwin16.png:110'
   ?}
");

exec('var_akord','zl_guide');
::ZGP.select(,,,,'ZGP');
ZGP.select();

ZGP.f_clear();
ZGP.clear();

ZGH.cntx_pop();
ZGP.cntx_pop();
~~


\il_na_poprz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [12.46]
:: OPIS: zwraca ilosc z poprzednika
::   WE: _a ZGP.ref() - ref pozycji przewodnika
::   OLD: \il_na_poprz/zl_kontr.fml
::----------------------------------------------------------------------------------------------------------------------
_il:=exec('il_pop','zl_guide',_a);
_il.IL_POP


\skip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [12.46]
:: OPIS: Przejscie do operacji kontroli jakości o zadanym statusie
::   WE: _a - ZGP.STATUS
::   OLD: \skip/zl_kontr.fml
::----------------------------------------------------------------------------------------------------------------------
AreaTitle.setTitle();
ZGP.index('KONTR1');
{? FILTER.STATUS<>'' & FILTER.STATUS<>'A'
|| ZGP.prefix(ST.ODDZ_KOD,'T','T',FILTER.STATUS)
|| ZGP.prefix(ST.ODDZ_KOD,'T','T')
?};
~~


\sl_wkj_rec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [17.00]
:: OPIS: Przed rekord dla kontroli jakosci
::----------------------------------------------------------------------------------------------------------------------
exec('przp_dsp','zl_guide');
VAR.ILOSC:=exec('il_na_poprz','zl_wkj',ZGP.ref());
~~


\legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [17.00]
:: OPIS: Legenda w oknie kontroli jakosci
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','#ZGP#01')


\dsk_status_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [17.00]
:: OPIS: Wybranie statusu operacji w selektorze.
::----------------------------------------------------------------------------------------------------------------------
FILTER.STATUS:=exec('get_value','#desktop','','selektor_zgp','status_zgp@panel');
exec('set','#params',8600,FILTER.STATUS,OPERATOR.USER);
exec('skip','zl_wkj');
grp_disp(ZGP,'WER_WKJ',1,1);
win_activate('ZGP');
~~


\dsk_status_zlgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [17.00]
:: OPIS: Wybranie statusu kwalifikacji w selektorze.
::----------------------------------------------------------------------------------------------------------------------
FILTER.TMP:=exec('get_value','#desktop','','selektor_zlgd','status_zlgd@panel');
exec('set','#params',8604,FILTER.TMP,OPERATOR.USER);
exec('zlgd_reload','zl_wkj',FILTER.TMP);
grp_disp(ZLGD,'WER_WKJ',1,1);
win_activate('ZLGD');
~~


\dsk_get_status_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [17.00]
:: OPIS: Zwraca dane dla selektora statusu dla operacji (tabela ZLGD)
::   WY: alias do tabeli tymczasowej zawierającej listę statusów.
::----------------------------------------------------------------------------------------------------------------------
_rs:=sql('select 0 as LP, S.SYSTEM as KOD, S.NAZWA as NAZWA from SLO_KOD as S where 0=1');

_rs.KOD:='N';
_rs.NAZWA:='Nowe'@;
_rs.add();

_rs.LP+=1;
_rs.KOD:='C';
_rs.NAZWA:='Oczekujące'@;
_rs.add();

_rs.LP+=1;
_rs.KOD:='W';
_rs.NAZWA:='Zakończone'@;
_rs.add();

_rs.LP+=1;
_rs.KOD:='O';
_rs.NAZWA:='Wykonywane'@;
_rs.add();
_rs;

_rs.LP+=1;
_rs.KOD:='A';
_rs.NAZWA:='Wszystkie'@;
_rs.add();
_rs


\dsk_get_status_zlgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca dane dla selektora statusu dla kwalifikacji (tabela ZLGD)
::   WY: alias do tabeli tymczasowej zawierającej listę statusów.
::----------------------------------------------------------------------------------------------------------------------
_rs:=sql('select 0 as LP, S.SYSTEM as KOD, S.NAZWA as NAZWA from SLO_KOD as S where 0=1');

_rs.KOD:='P';
_rs.NAZWA:='Do kwalifikacji ilościowej'@;
_rs.add();

_rs.LP+=1;
_rs.KOD:='B';
_rs.NAZWA:='Do badania'@;
_rs.add();

_rs.LP+=1;
_rs.KOD:='A';
_rs.NAZWA:='Wszystkie'@;
_rs.add();
_rs


\dsk_set_status_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [17.00]
:: OPIS: Formuła odpowiada za ustawienie wartości wskazanych elementów pulpitu.
::   WE: _a - identyfikator elementu panelu.
::----------------------------------------------------------------------------------------------------------------------
_set:="exec('set_value','#desktop','','selektor_zgp',_a,_b)";
_set(_a,FILTER.STATUS);
win_activate('ZGP');
~~


\dsk_set_status_zlgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła odpowiada za ustawienie wartości wskazanych elementów pulpitu.
::   WE: _a - identyfikator elementu panelu.
::----------------------------------------------------------------------------------------------------------------------
_set:="exec('set_value','#desktop','','selektor_zlgd',_a,_b)";
_set(_a,FILTER.TMP);
win_activate('ZLGD');
~~


\zgh_poz_wkj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MagLak [17.00]
:: OPIS: wyświetla pozycje przewodnika
::----------------------------------------------------------------------------------------------------------------------
_env_guide:=exec('env_guide','zl_guide');
_env_guide.used:=1;
_env_guide.WP:=ZGH.ZLEC().TYP().WP;
params_set('env_guide',_env_guide);

ZGP.cntx_psh();
exec('przh_poz','zl_guide',2,ZGP.ref());
ZGP.cntx_pop();
~~


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ustawienie parametru sesji w obszarze roboczym TTE_WKJ
::----------------------------------------------------------------------------------------------------------------------
{? __PARSES.editPar('OddzialLogProd','OkresRok')
|| exec('skip','zl_wkj')
?};
~~


\zlgd_reload
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przeładowuje zawartość zakładki ZLGD wymagających kwalifikacji
::   WE: _a - zakres danych 'B' badania KJ, 'P' potwierdzenie ilości
::----------------------------------------------------------------------------------------------------------------------
{? _a='A' | _a=''
|| ZLGD.index('KJ_NEED');
   ZLGD.prefix('T')
|| ZLGD.index('KJ_NEED');
   ZLGD.prefix('T','P',_a)
?};
~~


\wer_wkjs_okno_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja Okienko przed dla okna WER_WKJS tabeli ZGP
::----------------------------------------------------------------------------------------------------------------------
ZGP.index('NRPRZ');
~~


\upr_problem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Czy użytkownik posiada uprawnienie do zgłaszania (i przeglądania) problemów
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
::exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWBZ')=1 | exec('get','#params',8707,2,OPERATOR.USER)='T'
exec('chk_role','#b__box',OPERATOR.USER,'TTE_WKJ_DPRO')


\upr_xproblem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Czy użytkownik posiada uprawnienie do rozwiązywania problemów
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
::exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWBZ')=1 | exec('get','#params',8751,2,OPERATOR.USER)='T'
exec('chk_role','#b__box',OPERATOR.USER,'TTE_WKJ_EPRO')


\prob_class_information
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Klasa problemu - informacja
::   WE: [_a] - wersja tłumaczona (1) / wersja oryginalna [0]
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a=1
|| 'Informacja'@
|| 'Informacja'
?}


\prob_class_suspensing
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Klasa problemu - wstrzymujący produkcję
::   WE: [_a] - wersja tłumaczona (1) / wersja oryginalna [0]
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a=1
|| 'Wstrzymujący produkcję'@
|| 'Wstrzymujący produkcję'
?}


\prob_class_blocking
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Klasa problemu - blokujący produkcję
::   WE: [_a] - wersja tłumaczona (1) / wersja oryginalna [0]
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a=1
|| 'Blokujący produkcję'@
|| 'Blokujący produkcję'
?}


\simple_problem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Czy włączona jest uproszczona obsługa problemów
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
exec('get','#params',500670,type_of(''))='T'


\problem_sloo_win
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Okienko opisów problemów
::----------------------------------------------------------------------------------------------------------------------
_wer:=EK_SLOO.mk_sel('Opisy standardowe'@,,,'eksloo');
{? VEK.TERM='T'
|| EK_SLOO.win_fld(_wer,,'DESC',,,96);
   EK_SLOO.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W')
|| EK_SLOO.win_fld(_wer,,'DESC',,,100);
   EK_SLOO.win_act(_wer,0,'Dołącz');
   EK_SLOO.win_act(_wer,1,'Dołącz',,,,,,1);
   EK_SLOO.win_act(_wer,,'Popraw');
   EK_SLOO.win_act(_wer,,'Usuń');
   EK_SLOO.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W')
?};
_wer


\problem_desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wybór standardowego opisu problemu
::   WE: _a - typ pozycji w słowniku
::----------------------------------------------------------------------------------------------------------------------
VAR.EK_SOTYP:=_a;

_result:=~~;
EK_SLOO.cntx_psh();
EK_SLOO.index('DESC');
EK_SLOO.prefix(VAR.EK_SOTYP);
_wer:=exec('problem_sloo_win','zl_wkj');
EK_SLOO.win_sel(_wer);
{? EK_SLOO.select()
|| _result:=EK_SLOO.DESC
?};
EK_SLOO.cntx_pop();
_result


\ek_sloo_typ_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wartość początkowa pola EK_SLOO.TYP
::----------------------------------------------------------------------------------------------------------------------
VAR.EK_SOTYP


\problem_win
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Okno redakcyjne problemu
::   WE: _a - [0]/1 - czy wersja redakcyjna (domyślnie okno w wersji display)
::   WY: akronim okna
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _edit:=_a || _edit:=0 ?};
_title:={? EK_PROB.PROBLEM='T' || 'Zgłoszony problem'@ || 'Rozwiązany problem'@ ?};
_red:=EK_PROB.mk_edit(_title,,'ek_prob_edit'+(-EK_PROB.PROBLEM)+$_edit);
_width:=50;
EK_PROB.win_esep(_red,'Problem'@);
EK_PROB.win_efld(_red,,'EK_SLOP','KOD',,_width-3,,1);
EK_PROB.win_efld(_red,,'EK_SLOP','NAZ',,_width-3,,1);
EK_PROB.win_efld(_red,,'EK_SLOP','KLASA',,_width-3,,1);
EK_PROB.win_esep(_red,'Zgłoszenie'@);
EK_PROB.win_efld(_red,,'ZGL_D',,,10,,1,'Data'@);
EK_PROB.win_efld(_red,,'ZGL_T',,,13,,1,'Czas'@);
EK_PROB.win_efld(_red,,'ZGL_US','DANE',,_width-3,,1,'Zgłosił'@);
EK_PROB.win_efld(_red,,'ZGL_DESC',,,_width,-3,1,'Opis'@);
{? EK_PROB.PROBLEM='R' | _edit>0
|| EK_PROB.win_esep(_red,'Rozwiązanie'@);
   EK_PROB.win_efld(_red,,'ROZ_D',,,10,,1,'Data'@);
   EK_PROB.win_efld(_red,,'ROZ_T',,,13,,1,'Czas'@);
   EK_PROB.win_efld(_red,,'ROZ_US','DANE',,_width-3,,1,'Rozwiązał'@);
   EK_PROB.win_efld(_red,,'ROZ_DESC',,,_width,-3,0,'Opis'@)
?};
_red


\problem_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wyświetla dane problemu
::       Kontekst wywołania: rekord EK_PROB
::----------------------------------------------------------------------------------------------------------------------
{? VEK.TERM='T'
|| exec('problem_display','ekioski')
|| EK_PROB.win_edit(exec('problem_win','zl_wkj'));
   EK_PROB.display()
?};
~~


\gen_rem_zgl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Generuje zgłoszenie remontowe na podstawie problemu (aktualnego rekordu tabeli EK_PROB)
::----------------------------------------------------------------------------------------------------------------------
{? EK_PROB.size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return(0) ?};

:: Sprawdzenie, czy było już generowane zgłoszenie do danego problemu
_rem_zgl:=exec('prob_czy_rem','zl_wkj',,1);
{? _rem_zgl=null()
||
:: Sprawdzenie statusu problemu (tylko nierozwiązane)
   {? EK_PROB.PROBLEM='T'
   || _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:='TRE_ZGL_DZGL';
      _args.AKCJA:='DOŁĄCZ_Z_PROBLEMU';
      _args.PROC_START:='T';
      _args.CONTEXT:=obj_new('REM_ZGL');
      _args.CONTEXT.REM_ZGL:=null();
      _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

      exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'EK_PROB',EK_PROB.ref());

      exec('mp_run','#b__box',_args);

      {? _args.CONTEXT.REM_ZGL<>null()
      || FUN.info(
            'Wygenerowano zgłoszenie remontowe o symbolu %1.'@
            [exec('FindAndGet','#table',REM_ZGL,_args.CONTEXT.REM_ZGL,,"REM_ZGL.SYM",'')]
         )
      ?}
   || FUN.info(
         'Nieprawidłowy status problemu.\n'
         'Zgłoszenie można generować wyłącznie do nierozwiązanych problemów.'@
      )
   ?}
|| _choice:=FUN.choice('Do problemu zostało już wygenerowane zgłoszenie remontowe.'@,,'Podgląd'@);
   {? _choice=1
   || exec('action_display','remonty_zgloszenia',_rem_zgl)
   ?}
?};
~~


\prob_czy_rem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Sprawdza, czy do danego problemu zostało wygenerowane zgłoszenie remontowe
::   WE: [_a] - EK_PROB.ref() lub aktualny rekord, jeżeli nie podany
::       [_b] - INTEGER - typ zwracany: [0] - 0/1, 1 - ref() powiązanego zgłoszenia lub null() w przypadku jego braku
::   WY: 0/1 lub ref powiązanego zgłoszenia (zależne od _b)
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of('') || _a || EK_PROB.ref() ?};
_type:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_res:={? _type || null() || 0 ?};
REM_ZGL.cntx_psh();
REM_ZGL.index('EK_PROB');
REM_ZGL.prefix(_ref);
{? REM_ZGL.first()
|| _res:={? _type || REM_ZGL.ref() || 1 ?}
?};
REM_ZGL.cntx_pop();
_res


\rkprz_prob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Kolorowanie w oknie problemów
::----------------------------------------------------------------------------------------------------------------------
_result:='';
{? EK_PROB.PROBLEM='R'
|| _result:='EK_PROB#01#01'
?};
_result


\ikon_prob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Ikony w oknie problemów
::----------------------------------------------------------------------------------------------------------------------
{? exec('prob_czy_rem','zl_wkj') || 'xwin16.png:158' || exec('pusta','#icon') ?}


\legenda_prob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Legenda w oknie problemów
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','EK_PROB#01#01','#EK_PROB#01')


\max_problem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wyznacza maksymalną klasę problemu dla danego zapisu
::   WE: $tab.ref(), gdzie tab: ZGP, GROP, PL_OPER, PX_POZ
::   WY: [1] - T/N, [2] klasa problemu
::----------------------------------------------------------------------------------------------------------------------
_sqlref:=_a;
_result:=obj_new(2); _result[1]:='N'; _result[2]:='';
EK_PROB.cntx_psh();
EK_PROB.index('SRC');
EK_PROB.prefix('T',_sqlref,exec('prob_class_blocking','zl_wkj'),);
{? EK_PROB.first()
|| _result[1]:='T';
   _result[2]:=exec('prob_class_blocking','zl_wkj')
|| EK_PROB.prefix('T',_sqlref,exec('prob_class_suspensing','zl_wkj'),);
   {? EK_PROB.first()
   || _result[1]:='T';
      _result[2]:=exec('prob_class_suspensing','zl_wkj')
   || EK_PROB.prefix('T',_sqlref,exec('prob_class_information','zl_wkj'),);
      {? EK_PROB.first()
      || _result[1]:='T';
         _result[2]:=exec('prob_class_information','zl_wkj')
      ?}
   ?}
?};
EK_PROB.cntx_pop();
_result


\chk_ek_slop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Walidacja rekordu tabeli EK_SLOP - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(EK_SLOP,,'KOD','NAZ','KLASA');
{? _chk=''
|| {? __CHK.index(EK_SLOP,_a)=''
   || ''
   || 'KOD'
   ?}
|| _chk
?}


\ek_prob_after_rfr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Po odświeżeniu w oknie EK_PROB umieszczonym w oknie zasobów
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_env:=params_get().env_zasoby;

{? REM_ZAS.TWRKPLC=null()
|| _env.DISABLE:='#disable'
|| EK_PROB.index('PLACE');
   EK_PROB.prefix(REM_ZAS.TWRKPLC);
   EK_PROB.first()
?};
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:38 20d219a9a363006cdc5dae59e10e94ea8e1d6cce024f97546e8400e43ebba66123b8b6677691afa25ecdf30d7c2c42adad346619dc2f319bad6d9cff560220589cae2f54b0b49fba9c411aa4e62d82ebef4f233b4376f1d1e6662c5886f34b48353cd5f0f135efc894867c79dccf0de6672863eff24f83d472dfa0dd97caa075
