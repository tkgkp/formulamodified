:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: ppk_pod.fml [12.51]
:: Utworzony: 2019/10/16
:: Systemy: PPK
::======================================================================================================================
:: Zawartosc: Formuły odpowiedzialne za obsługę kwot wpłat uwzględnianych w przychodzie.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed dołączeniem lub poprawieniem wiersza tabeli PPK_POD.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_POD.WYL_KW:=PPK_POD.WYL_KW$2;
P.cntx_psh();
PPK_POD.OSOBA:=PPK_POD.P().OSOBA;
P.cntx_pop();

{? PPK_POD.WYL_RH<>null
:: wskazano rachunek wyliczeń
|| RH.cntx_psh();
   PPK_POD.WYL_O:=PPK_POD.WYL_RH().O;
   RH.cntx_pop()
?};

{? PPK_POD.POD_RH<>null
:: wskazano rachunek opodatkowania
|| RH.cntx_psh();
   PPK_POD.POD_O:=PPK_POD.POD_RH().O;
   RH.cntx_pop()
?};

{? PPK_POD.WYL_O<>null
:: wskazano listę wyliczeń
|| O.cntx_psh();
   PPK_POD.WYL_O();
   PPK_POD.WYL_R:=O.RP;
   PPK_POD.WYL_M:=O.MP;
   PPK_POD.WYL_LT:=~-O.LT;
:: Ustawienie daty przekazania wpłat, aby po zmianie na O i przeliczeniu były aktualne dane:
   {? PPK_POD.PRZ_WYK<>'T'
   || PPK_POD.PRZ_DATA:=exec('prz_data','ppk_pod');
      PPK_POD.POD_R:=PPK_POD.PRZ_DATA~1;
      PPK_POD.POD_M:=PPK_POD.PRZ_DATA~2
   ?};
   O.cntx_pop()
?};

{? PPK_POD.PRZ_WYK='T' & PPK_POD.PRZ_DATA<>date(0,0,0)
:: środki zostały przekazane i to jest informacja o największej wadze
|| PPK_POD.POD_R:=PPK_POD.PRZ_DATA~1;
   PPK_POD.POD_M:=PPK_POD.PRZ_DATA~2;
   {? PPK_POD.POD_O<>null
   || O.cntx_psh();
      PPK_POD.POD_O();
      PPK_POD.POD_LT:=~-O.LT;
      O.cntx_pop()
   ?}

|? PPK_POD.POD_O<>null
:: wskazano listę opodatkowania
|| O.cntx_psh();
   PPK_POD.POD_O();
   PPK_POD.POD_R:=O.RP;
   PPK_POD.POD_M:=O.MP;
   PPK_POD.POD_LT:=~-O.LT;
   O.cntx_pop()
?};

~~


\_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(PPK_POD,
   $("_a.table(_b,"+$_mode+",,'P','WYL_LT','WYL_R','WYL_M','POD_R','POD_M')"),
   "_a.in_set(_b,'POD_LICZ',,'T','N')",
   "_a.in_set(_b,'PRZ_WYK',,'T','N')",
   "{? _b.PRZ_WYK='T' || __CHK.record(_b,,'PRZ_DATA') || 1 ?}",
   "  {? _b.WYL_R>1900 || return(1) ?};
      _a.err_incorrect(MS.name(_b,'WYL_R'));
      'WYL_R'
   ","
      {? _b.WYL_M>=1 & _b.WYL_M<=12 || return(1) ?};
      _a.err_incorrect(MS.name(_b,'WYL_M'));
      'WYL_M'
   ","
      {? _b.POD_R>1900 || return(1) ?};
      _a.err_incorrect(MS.name(_b,'POD_R'));
      'POD_R'
   ","
      {? _b.POD_M>=1 & _b.POD_M<=12 || return(1) ?};
      _a.err_incorrect(MS.name(_b,'POD_M'));
      'POD_M'
   "
)


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli PPK_POD.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_pod');
exec('_chk','ppk_pod',0)


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli PPK_POD.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_pod');
exec('_chk','ppk_pod',1)


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli PPK_POD.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',PPK_POK,'UNIQUE',PPK_POD.ref())


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Zwraca wskazanie bieżącego wiersza tabeli PPK_POD.
::   WE:
::   WY: wskazanie wiersza tabeli PPK_POD
::----------------------------------------------------------------------------------------------------------------------
PPK_POD.ref()


\szukaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyszukuje informację o przychodzie pracownika z tytułu wpłat wyliczonych na danej liście.
::   WE: _a _P - wskazanie pracownika
::       _b _O/_RH - wskazanie listy płac/rachunku
::   WY: wskazanie wiersza tabeli PPK_POD lub null
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_pref:=_a;
_oref:=_b;
_rref:=null;

{? $_b*RH.name()<>0
:: wskazano rachunek
|| _oref:=null;
   _rref:=_b;
   RH.cntx_psh();
   RH.prefix();
   {? RH.seek(_rref)
::    ustal listę płac
   || _oref:=RH.O
   ?};
   RH.cntx_pop()
?};

_ref:=null;
PPK_POD.cntx_psh();
PPK_POD.index('UNIQUE');
PPK_POD.prefix(_pref,_oref);
{? PPK_POD.find_key(_rref)
|| _ref:=PPK_POD.ref()
?};
PPK_POD.cntx_pop();
_ref


\zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Dodaje/aktualizuje informację o przychodzie pracownika z tytułu wpłat wyliczonych na danej liście.
::   WE: _a _P - wskazanie pracownika
::       _b _O/_RH - wskazanie listy płac/rachunku
::   WY: wskazanie wiersza tabeli PPK_POD lub null
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_pref:=_a;
_xref:=_b;
_oref:=_b;
_rref:=null;

{? $_b*RH.name()<>0
:: wskazano rachunek
|| _oref:=null;
   _rref:=_b;
   RH.cntx_psh();
   RH.prefix();
   {? RH.seek(_rref)
::    ustal listę płac
   || _oref:=RH.O
   ?};
   RH.cntx_pop()
?};

{? (_ref:=exec('szukaj','ppk_pod',_pref,_xref))<>null
:: rekord już istnieje, nie będzie dodawany
|| return(_ref)
?};

PPK_POD.cntx_psh();
PPK_POD.prefix();
PPK_POD.blank();
PPK_POD.P:=_pref;
PPK_POD.WYL_O:=_oref;
PPK_POD.WYL_RH:=_rref;
PPK_POD.REJ_TRYB:='A';
:: ustal datę przekazania wpłat
PPK_POD.PRZ_DATA:=exec('prz_data','ppk_pod');
:: ustal miesiąc na podstawie daty powstania obowiązku
PPK_POD.POD_R:=PPK_POD.PRZ_DATA~1;
PPK_POD.POD_M:=PPK_POD.PRZ_DATA~2;

{? PPK_POD.add()
|| _ref:=PPK_POD.ref()
?};
PPK_POD.cntx_pop();

_ref


\dod_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed dołączeniem w okienkach tabeli PPK_POD.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
PPK_POD.blank();
_ok:=1;

P.cntx_psh();
{? PPK_POD.P().F_ZATR().KOD='P'
|| PPK_POD.win_edit('RED_O')
|| PPK_POD.win_edit('RED_RH');
   ZC.cntx_psh();
   ZC.index('ZLECPRAC');
   ZC.prefix(PPK_POD.P);
   {? ~ZC.first()
   || FUN.info('Nie znaleziono umów cywilno-prawnych.'@);
      ZC.cntx_pop();
      return(0)
   ?};
   RH.cntx_psh();
   RH.index('RACHUNKI');
:: okno wyboru umowy cywilno-prawnej
   _wzc:=ZC.mk_sel('Umowy'@,'P',0,'#ppk_pod_zc');
   ZC.win_fld(_wzc,,'NU',,,-9,,,'Umowa'@);
   ZC.win_fld(_wzc,,'RU','K',,-2,,,'RU'@);
   ZC.win_fld(_wzc,,'TYP',,,-2,,,'Typ'@);
   ZC.win_fld(_wzc,,'DU',,,-10,,,'Od dnia'@);
   ZC.win_fld(_wzc,,'DW',,,-10,,,'Do dnia'@);
   ZC.win_fld(_wzc,,'KU',,,-10,2,,'Kwota/stawka'@);
   ZC.win_fld(_wzc,,'CZYWAL',,,-2,,,'Wal.'@);
:: okno wyboru rachunku wystawionego do umowy
   _wrh:=RH.mk_sel('Historia wypłat'@,'P',0,'#ppk_pod_rh');
   RH.win_fld(_wrh,,'DWY',,,-10);
   RH.win_fld(_wrh,,'KOR',,,-3,,,,,,2,,"'T'","'N'");
   RH.win_fld(_wrh,UZ,'LT',,,-8);
   RH.win_fld(_wrh,UZ,'STAWKA',,,-7,2);
   RH.win_fld(_wrh,UZ,'GODZ',,,-7,2);
   RH.win_fld(_wrh,UZ,'RH',,,-7,2);
   RH.win_act(_wrh,,'Formuła','Wybierz'@@,,,,"sel_exit()",1);
   RH.win_act(_wrh,,'Rekord',,,,"exec('rh_bd','zlec_rh',_a)");
:: panel wyboru rachunku wystawionego do umowy
   _mode:='maximized_with_title';
   _grp:=ZC.grp_make('Umowy cywilno-prawne'@,,'#ppk_pod_zr');
   ZC.grp_sel(_grp,ZC,_wzc,,$('grp_disp(RH,\''+_wrh+'\')'),,,10,,,,,_mode);
   ZC.grp_splt(_grp,,'vertical','right');
   ZC.grp_sel(_grp,RH,_wrh,,,,,10,"RH.prefix(ZC.ref())",,,,_mode);

   _drh:=1;
   UZ.DRH==_drh;
   ZC.win_sel(_grp);
   {? ZC.select()
::    wskazano rachunek
   || PPK_POD.WYL_RH:=RH.ref();
      exec('_modb','ppk_pod')
   || _ok:=0
   ?};
   UZ.DRH==_drh;

:: porządki
   RH.cntx_pop();
   ZC.cntx_pop();
   ZC.win_del(_grp);
   ZC.win_del(_wzc);
   RH.win_del(_wrh)
?};
P.cntx_pop();
_ok


\dod_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Dołączanie zapisu w okienkach tabeli PPK_POD.
::   WE:
::   WY: rezultat próby utworzenia wiersza
::----------------------------------------------------------------------------------------------------------------------
PPK_POD.REJ_TRYB:='R';
PPK_POD.REJ_DATA:=date();
PPK_POD.REJ_KTO:=OPERATOR.USER().DANE;

{? PPK_POD.edit("_ret:=exec('data_chk','ppk_pod');{? ~+_ret || _ret:=exec('_chk','ppk_pod',0) ?}; _ret") & PPK_POD.add()
:: uzupełnij informacje w tabeli kwot przychodu na podstawie podanej listy
|| _rn:=spli_str(__RUB.sys_sql(726,date(PPK_POD.WYL_R,PPK_POD.WYL_M,0)),',');
   PPK_POK.cntx_psh();
   PPK_POK.prefix();
   LS.cntx_psh();
   LS.use(-PPK_POD.WYL_LT);
   LS.index('PRACNRRU');
   LS.prefix(PPK_POD.P);
   {! _ii:=1..obj_len(_rn)
   |! {? LS.find_key(#_rn[_ii])
::       wpłata zwiększa przychód
      || PPK_POK.blank(1);
         PPK_POK.PPK_POD:=PPK_POD.ref();
         PPK_POK.R:=LS.RB;
         PPK_POK.KW:=LS.KW;
         PPK_POK.add()
      ?}
   !};
   LS.cntx_pop();
   PPK_POK.cntx_pop()
?}


\pop_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed poprawieniem w okienkach tabeli PPK_POD.
::   WE:
::   WY: 0/1 - nie można zmieniać rekordu/zmiana jest możliwa
::----------------------------------------------------------------------------------------------------------------------
:: czy modyfikacja wiersza jest dopuszczalna?
{? PPK_POD.POD_O<>null
|| FUN.emsg(
      'Informacja została uwzględniona w wyliczeniu przychodu.\n'
      'Modyfikacja wiersza nie jest możliwa.'@
   );
   return(0)
?};
{? PPK_POD.get()
|| {? PPK_POD.P().F_ZATR().KOD='P'
   || PPK_POD.win_edit('RED_O')
   || PPK_POD.win_edit('RED_RH')
   ?}
?}


\pop_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Poprawianie zapisu w okienkach tabeli PPK_POD.
::   WE:
::   WY: rezultat próby aktualizacji wiersza
::----------------------------------------------------------------------------------------------------------------------
:: zapamiętaj wartości pól
_len:=PPK_POD.fld_num();
_fld:=obj_new(_len);
{! _ii:=1.._len
|! _fld[_ii]:=PPK_POD[_ii]
!};
:: edytuj wiersz
{? PPK_POD.edit("_ret:=exec('data_chk','ppk_pod');{? ~+_ret || _ret:=exec('_chk','ppk_pod',1) ?}; _ret")
:: edycja została zakończona
|| _mod:=0;
   {! _ii:=1.._len
   |? _mod=0
   |! _mod:=(_fld[_ii]<>PPK_POD[_ii])
   !};
   {? _mod<>0
::    wprowadzono zmiany
   || PPK_POD.REJ_TRYB:='R';
      PPK_POD.REJ_DATA:=date();
      PPK_POD.REJ_KTO:=OPERATOR.USER().DANE;
      PPK_POD.put()
   ?}
?}


\usu_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed usunięciem w okienkach tabeli PPK_POD.
::   WE:
::   WY: 0/1 - nie można usuwać rekordu/usunięcie jest możliwe
::----------------------------------------------------------------------------------------------------------------------
:: czy usunięcie wiersza jest dopuszczalne?
{? PPK_POD.POD_O<>null
|| FUN.emsg(
      'Informacja została uwzględniona w wyliczeniu przychodu.\n'
      'Usunięcie wiersza nie jest możliwe.'@
   );
   0
|| 1
?}


\wnd_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: "Okienko przed" okienek tabeli PPK_POD. Ustawienie okienek i formuł pól.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: okna redakcji i wzorca
PPK_POD.win_edit('RED_O');
PPK_POD.win_patt('WZO');

_be:='BEFORE_EDIT';
_ae:='AFTER_EDIT';
_n_pod_o:="PPK_POD.POD_O=null";

:: symbol listy wyliczenia
PPK_POD.fld_fml('WYL_LT',_be,"
   -menu_txt()<>'popraw'
");
PPK_POD.fld_fml('WYL_LT',_ae,"
   {? +fld()<>8
   || fld('');
      PPK_POD.WYL_O:=null;
      return(1)
   || _ok:=0;
      O.cntx_psh();
      O.index('LISTYPZN');
      O.prefix(exec('ref_firma','ustawienia'),-fld);
      {? O.first()
      || PPK_POD.WYL_O:=O.ref();
         exec('_modb','ppk_pod');
         win_disp();
         _ok:=1
      || FUN.emsg('Nieprawidłowe oznaczenie listy płac.'@)
      ?};
      O.cntx_pop();
      _ok
   ?}
");

:: naliczenie podatku
PPK_POD.fld_fml('POD_LICZ',_be,_n_pod_o);

:: przekazanie wpłat
PPK_POD.fld_fml('PRZ_WYK',_be,_n_pod_o);
PPK_POD.fld_fml('PRZ_DATA',_be,_n_pod_o);
PPK_POD.fld_fml('PRZ_DATA',_ae,"
   {? PPK_POD.PRZ_DATA<>date(0,0,0)
   || PPK_POD.POD_R:=PPK_POD.PRZ_DATA~1;
      PPK_POD.POD_M:=PPK_POD.PRZ_DATA~2;
      PPK_POD.PRZ_WYK:='T'
   ?};
   1
");

:: rok i miesiąc opodatkowania
PPK_POD.fld_fml('POD_R',_be,"
   PPK_POD.PRZ_DATA=date(0,0,0) & PPK_POD.POD_LT=''
");
PPK_POD.fld_fml('POD_M',_be,"
   PPK_POD.PRZ_DATA=date(0,0,0) & PPK_POD.POD_LT=''
");

:: symbol listy opodatkowania
PPK_POD.fld_fml('POD_LT',_be,_n_pod_o);
PPK_POD.fld_fml('POD_LT',_ae,"
   {? +fld()<>8
   || fld('');
      PPK_POD.POD_O:=null;
      return(1)
   ?};
   _prz:=(PPK_POD.PRZ_DATA<>date(0,0,0));
   {? _prz<>0
   || PPK_POD.POD_R:=PPK_POD.PRZ_DATA~1;
      PPK_POD.POD_M:=PPK_POD.PRZ_DATA~2
   ?};
   _ok:=0;
   O.cntx_psh();
   O.index('LISTYPZN');
   O.prefix(exec('ref_firma','ustawienia'),-fld);
   {? O.first()
   || {? _prz<>0
      || {? O.RP<>PPK_POD.POD_R | O.MP<>PPK_POD.POD_M
         || FUN.emsg('Lista płac niezgodna z miesiącem przekazania środków.'@)
         || _ok:=1
         ?}
      |? O.Z='T'
      || FUN.emsg('Lista płac została zamknięta.'@)
      || PPK_POD.POD_R:=O.RP;
         PPK_POD.POD_M:=O.MP;
         _ok:=1
      ?}
   || FUN.emsg('Nieprawidłowe oznaczenie listy płac.'@)
   ?};
   O.cntx_pop();
   exec('_modb','ppk_pod');
   win_disp();
   _ok
");

1


\wnd_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: "Okienko po" okienek tabeli PPK_POD. Przywrócenie domyślnej obsługi pól.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_fml:=spli_str('BEFORE_EDIT,AFTER_EDIT',',');
_len:=obj_len(_fml);
_num:=PPK_POD.fld_num();
{! _ii:=1.._len
|! {! _nn:=1.._num
   |! {? _fml[_ii]<>'F3' | PPK_POD.fld_join(_nn)=''
      || PPK_POD.fld_fml(PPK_POD.fld_acr(_nn),_fml[_ii],"*")
      ?}
   !}
!}


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Udostępnia zawartość tabel PPK_POD i PPK_POD.
::   WE: _a _P - wskazanie pracownika
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_pref:=_a;

_oldp:=REF.P;
REF.P:=_a;

P.cntx_psh();
OSOBA.cntx_psh();
PPK_POD.cntx_psh();

PPK_POD.index('WYLICZ');
PPK_POD.prefix(_pref);
PPK_POD.win_sel(exec('grp_make','ppk_pod'));
PPK_POD.hdr_sel(exec('win_title_ext','pracownik'));

exec('wnd_b','ppk_pod');
PPK_POD.select();
exec('wnd_a','ppk_pod');

:: porządki
PPK_POD.hdr_sel();
PPK_POD.cntx_pop();
OSOBA.cntx_pop();
P.cntx_pop();
REF.P==_oldp;
~~


\sel_rh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Udostępnia zawartość tabel PPK_POD i PPK_POD.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('select','ppk_pod',P.ref());
~~


\grp_make
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy okienko grupowe dla przeglądania danych wybranego pracownika.
::   WE:
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_acr:='WER';
{? (_wnd:=__WND.SEL.get(PPK_POD,_acr))='';1
:: utwórz okienko grupowe zawierające okna tabel PPK_POD i PPK_POK
|| _wnd:=PPK_POD.grp_make('Przychody z tytułu wpłat na PPK'@,
::    przed wyświetleniem
      "  PPK_POK.cntx_psh();
         PPK_POK.index('RN');
         1
      ",
::    identyfikator, położenie
      '#ppk_pod_grp',,,
::    przy zamknięciu
      "  PPK_POK.cntx_pop();
         1
      ",,
      'html_maximized'
   );

:: po odświeżeniu okna tabeli PPK_POD - odrysuj okienko tabeli PPK_POK
   _ar:="grp_disp(PPK_POK,'WER')";
:: przed obsługą okna tabeli PPK_POK - ogranicz dziedzinę i ustaw akcje
   _bs:="
      _ref:=null;
      _aid:='dpu:d';
      {? {? PPK_POD.f_active() || PPK_POD.f_size() || PPK_POD.size() ?}
      || _ref:=PPK_POD.ref();
         _aid:=''
      ?};
      PPK_POK.prefix(_ref);
      PPK_POK.actions(cur_win(1,1),_aid,,1)
   ";
   _mode:='maximized_with_title';

:: zwiększenie przychodu z tytułu wpłat
   PPK_POD.grp_sel(_wnd,PPK_POD,'WER',,_ar,,,,,,,,_mode);
:: szczegóły zwiększenia przychodu
   PPK_POD.grp_splt(_wnd,,'vertical','right','0,70%');
   PPK_POD.grp_sel(_wnd,PPK_POK,'WER',,,,,,_bs,,,,_mode);

:: zapamiętaj akronim utworzonego okna
   __WND.SEL.put(PPK_POD,_acr,_wnd)
?};
_wnd


\usunzlis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła usuwająca dane związane z listą pracownika.
::   WE: _a _P - wskazanie pracownika
::       _b _O/_RH - wskazanie listy płac/rachunku
::   WY: ~~
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_pref:=_a;
_xref:=_b;

_lz:='l';
{? $_b*RH.name()<>0
:: wskazano rachunek
|| _lz:='z'
?};

PPK_POD.cntx_psh();
PPK_POD.prefix();

:: ustal kryterium filtrowania
_xval:='';
{? _lz='l'
:: przychody bez wskazanej listy
|| _xval:='PPK_POD.WYL_O=:_b'
|? _lz='z'
:: przychody bez wskazanego rachunku
|| _xval:='PPK_POD.WYL_RH=:_b'
?};

:: usuń wiersze właściwe dla wyliczenia wpłat na liście/rachunku
PPK_POD.f_set(,,'PPK_POD.P=:_a and '+_xval,_pref,_xref);
{!
|? PPK_POD.f_first()
|! {? PPK_POD.POD_RH<>null
   || {? PPK_POD.POD_RH<>PPK_POD.WYL_RH
      || RH.cntx_psh();
         ZC.cntx_psh();
         RAPLS.msg(
            P.T,OSOBA.NAZWISKO,OSOBA.PIERWSZE,
            'Przychód z tytułu wpłat na PPK został już rozliczony.\n'
            'Należy zweryfikować wyliczenia na rachunku z dnia %1\n'
            'wystawionym do umowy cywilno-prawnej o numerze "%2".'@
            [$PPK_POD.POD_RH().DRA,form(RH.ZLE().NU)]
         );
         ZC.cntx_pop();
         RH.cntx_pop()
      ?}
   |? PPK_POD.POD_O<>null
   || {? PPK_POD.POD_O<>PPK_POD.WYL_O
      || RAPLS.msg(
            P.T,OSOBA.NAZWISKO,OSOBA.PIERWSZE,
            'Przychód z tytułu wpłat na PPK został już rozliczony.\n'
            'Należy zweryfikować wyliczenia na liście %1.'@
            [PPK_POD.POD_LT]
         )
      ?}
   ?};
   PPK_POD.del()
!};

:: ustal kryterium filtrowania
_xval:='';
{? _lz='l'
:: przychody bez wskazanej listy
|| _xval:='PPK_POD.POD_O=:_b'
|? _lz='z'
:: przychody bez wskazanego rachunku
|| _xval:='PPK_POD.POD_RH=:_b'
?};

:: odłącz wiersze właściwe dla listy/rachunku opodatkowania
PPK_POD.f_set(,,'PPK_POD.P=:_a and '+_xval,_pref,_xref);
_loop:=PPK_POD.f_first();
{!
|? _loop
|! PPK_POD.POD_O:=null;
   PPK_POD.POD_RH:=null;
   {? PPK_POD.REJ_TRYB='A'
   || PPK_POD.POD_LT:=''
   ?};
   PPK_POD.put();
   _loop:=PPK_POD.f_next()
!};

PPK_POD.f_clear();
PPK_POD.cntx_pop();
~~


\prz_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Zwraca domyślną datę przekazania wpłat. Wyodrębnione z \zapisz/ppk_pod.fml
::   WE:
::   WY: _wyn [DATE] - domyślna data przekazania wpłat
::----------------------------------------------------------------------------------------------------------------------
:: ustal domyślny miesiąc opodatkowania
_zd:=date(0,0,0);
_dp:=_zd;

KST_PPK.cntx_psh();
{? PPK_POD.WYL_RH=null
|| O.cntx_psh();
   PPK_POD.WYL_O();
   _dtO:={? O.D=_zd
         || date(O.RP,O.MP,1)
         || O.D
         ?};
   exec('czytaj','#stalesys',_dtO,KST_PPK,'POD_WMW','D_PRZWPL');
:: uwzględnij informację o miesiącu uwzględnienia wpłat w przychodzie
   _dp:=
      {? KST_PPK.POD_WMW='N'
      || date(O.RP,O.MP,0)+1
      || _dtO
      ?};
   O.cntx_pop()
|| RH.cntx_psh();
   PPK_POD.WYL_RH();
   exec('czytaj','#stalesys',RH.DWY,KST_PPK,'POD_WMW','D_PRZWPL');
:: uwzględnij informację o miesiącu uwzględnienia wpłat w przychodzie
   _dp:=
      {? KST_PPK.POD_WMW='N'
      || date(RH.DWY~1,RH.DWY~2,0)+1
      || RH.DWY
      ?};
   RH.cntx_pop()
?};
:: ustal datę przekazania wpłat
_wyn:=date(_dp~1,_dp~2,
   {? KST_PPK.POD_WMW='N' & KST_PPK.D_PRZWPL=0 || 1
   |? KST_PPK.POD_WMW<>'N' & KST_PPK.D_PRZWPL<_dp~3 || _dp~3
   |? date(_dp~1,_dp~2,0)~3<KST_PPK.D_PRZWPL || 0
   || KST_PPK.D_PRZWPL
   ?}
);
KST_PPK.cntx_pop();

_wyn


\data_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Funkcja sprawdza poprawne wypełnienie pola PRZ_DATA oraz miesiąca podatkowego w stosunku do miesiąca wyliczeń
::   WE:
::   WY: Akronim pola PRZ_DATA/POD_M lub ciąg pusty w przypadku prawidłowego wypełnienia
::----------------------------------------------------------------------------------------------------------------------
_dw:=date(PPK_POD.WYL_R,PPK_POD.WYL_M,{? PPK_POD.WYL_R<=0 | PPK_POD.WYL_M<=0 || 0 || 1 ?});
{? ~(PPK_POD.PRZ_DATA=date(0,0,0) | _dw<=PPK_POD.PRZ_DATA)
|| FUN.error('Błędna wartość pola %1'@[MS.name(PPK_POD,'PRZ_DATA')]);
   return('PRZ_DATA')
?};

_dw:=date(PPK_POD.WYL_R,PPK_POD.WYL_M,0);
_dp:=date(PPK_POD.POD_R,PPK_POD.POD_M,0);
{? ~(_dw<=_dp)
|| FUN.error('Miesiąc opodatkowania nie może być wcześniejszy od miesiąca wyliczeń.'@);
   return('POD_M')
?};

''


\jest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Sprawdza, czy dla bieżącego uczestnika istnieją informacje o przychodach z tytułu wpłat na PPK.
::   WE:
::   WY: 0/1 - brak/znaleziono
::----------------------------------------------------------------------------------------------------------------------
PPK_POD.cntx_psh();
PPK_POD.index('OSOBA');
PPK_POD.prefix(PPK_UCZ.FIRMA,PPK_UCZ.OSOBA);
_test:=PPK_POD.first();
PPK_POD.cntx_pop();
_test



:Sign Version 2.0 jowisz:1045 2024/01/31 10:45:25 d5409de9dd563e782126a10ad178ed2402a95b01a7c2c4245165d5a006295c91ac050568d1e5c1a36ab4cf40b5c9f93db17da80d6c17299edc2b68fc56870e653f80ff6d80597e0f7a08934e06c795e93764c4f64ffa242133643c9da92616cb5c60492f4319c5928fcaea82edfcc10600ffefd9c66be2be6e697ae923aafedf
