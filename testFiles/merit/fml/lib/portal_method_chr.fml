:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: portal_method_chr.fml
:: Utworzony: 17.12.2020
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły obsługujące metody dostępu do HR Portal (patrz opis w portal_method.fml).
::======================================================================================================================


::======================================================================================================================
:: Metody dostępu do portalu - chr_Person (pracownik).
::======================================================================================================================


\chr_PersonModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonModify.
::       Kontekst wywołania - rekord tabeli P.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   return(0)
?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: Dostępne statusy PPK: W programie / Zrezygnowano / Możliwość dołączenia / Niedostępny.
:: Formuła wykonywana na poziomie uczestnika PPK (PPK_UCZ).
:: Obecnie PPK_UCZ.AKTYWNY zawsze ma wartość 'T'. Zatem o aktywności uczestnika świadczą jedynie złożone przez niego
:: wnioski. Ponieważ portal prezentuje dane na dzień dzisiejszy - interesuje nas stan wniosków na dzień dzisiejszy.
_getStatus:="
   _ret:=obj_new('StatusPPK','PPKAutoJoinDate');
   _ret.PPKAutoJoinDate:=~~;
   {? var_pres('_a')=type_of('')
   || _ret.StatusPPK:=_a;
      return(_ret)
   ?};
   _ret.StatusPPK:='W programie';
   PPK_WNU.cntx_psh();
   PPK_WNU.index('OSOBA_OD');
   PPK_WNU.prefix(PPK_UCZ.FIRMA,PPK_UCZ.OSOBA,PPK_UCZ.PPK_UMO);
:: Uwaga: w indeksie 'OSOBA_OD' pole 'OD' ma kolejność MALEJĄCĄ - dlatego daty wcześniejsze są szukane metodą
:: find_ge() a nie find_le().
   {? PPK_WNU.find_ge(date())
   || PPK_WRD.cntx_psh();
      PPK_WRD.prefix();
      _again:=1;
      {!
      |? _again
      |! PPK_WNU.PPK_WRD();
         {? ',WODW,AWW,'*',%1,' [PPK_WRD.SYMBOL]
::          Wycofanie wniosku o rezygnację lub Automatyczne wznowienie. Status "W programie" jest ok.
         || _again:=0
         |? PPK_WRD.SYMBOL='DRZW'
         || _again:=0;
            _ret.StatusPPK:='Zrezygnowano';
            _rok_rezygnacji:=PPK_WNU.OD~1;
            {? _rok_rezygnacji>2019
            || exec('czytaj','#stalesys',PPK_WNU.OD,KST_PPK);
               _rok_wznowienia:=_rok_rezygnacji+KST_PPK.WZN_OKR-(_rok_rezygnacji-2019)%*KST_PPK.WZN_OKR;
               _dt:=date(_rok_wznowienia,KST_PPK.WZN_MS,KST_PPK.WZN_DN);
               {? PPK_UCZ.OSOBA().UR_DATA>(date((_dt~1)-KST_PPK.LAT_WYM,_dt~2,{? _dt~2=2 & _dt~3=29 || 0 || _dt~3 ?}))
               || _ret.PPKAutoJoinDate:=_dt
               ?}
            ?}
         || _again:=PPK_WNU.next()
         ?}
      !};
      PPK_WRD.cntx_pop()
   ?};
   PPK_WNU.cntx_pop();
   _ret
";

_ret:=0;
KST_PPK.cntx_psh();
FIRMA.cntx_psh();
FIRMA.prefix();
OSOBA.cntx_psh();
OSOBA.prefix();
P.OSOBA();
_year:={? OSOBA.UR_DATA<>#0 || __KAL.rdat(OSOBA.UR_DATA,date()) || 100 ?};
{? _year>=70
|| _status:=_getStatus('Niedostępny')
|| PPK_UCZ.cntx_psh();
   PPK_UCZ.index('AKTYWNY');
   PPK_UCZ.prefix(P.OSOBA,P.FIRMA);
   _status:={? PPK_UCZ.first() || _getStatus() || _getStatus('Możliwość dołączenia') ?};
   PPK_UCZ.cntx_pop()
?};

_domain_user_name:=_email:=_of365:=_log2:=~~;
USERS.cntx_psh();
USERS.index('OSOBA');
USERS.prefix(OSOBA.ref(),'T',);
{? USERS.first() & USERS.PORTAL='T' & USERS.WEBLOGIN<>'' & exec('mail_ok','#email',USERS.WEBLOGIN)
|| _email:=USERS.WEBLOGIN;
   {? USERS.OF365='T' & USERS.CAS='T' || _domain_user_name:=USERS.CASUID ?};
   _of365:=(USERS.OF365='T');
   _log2:=(USERS.LOG2='T')
?};
USERS.cntx_pop();

{? _status.StatusPPK<>''
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('FirstName',OSOBA.PIERWSZE);
   _obj.set('MiddleName',OSOBA.DRUGIE);
   _obj.set('Gender',OSOBA.PLEC);
   _obj.set('LastName',OSOBA.NAZWISKO);
   _obj.set('__ModifiedDate_erp',P.idput_value());
   _obj.set('__id_erp',P.uidref());
:: !!! Czy to pole jest wykorzystywane?
   _obj.set('PersonDescription','Nr teczki / Identyf.: %1 / %2' [P.T,$P.IP]);
   _obj.set('BirthDate',OSOBA.UR_DATA);
   _obj.set('PESEL',OSOBA.PESEL);
   _obj.set('SeniorityDateFrom',P.DS);
   _obj.set('TIN',OSOBA.NIP);
   _obj.set('StatusPPK',_status.StatusPPK);
   _obj.set('EmailAddress',_email);
   _obj.set('DomainUserName',_domain_user_name);
   _obj.set('DomainRemoteProvider',_of365);
   _obj.set('MultiFactorAuthentication',_log2);
   _obj.set('PPKAutoJoinDate',_status.PPKAutoJoinDate);
   _obj.set('TenantCompanyId__id_ERP',P.FIRMA().uidref());

   _ret:=_obj.save()
?};

OSOBA.cntx_pop();
FIRMA.cntx_pop();
KST_PPK.cntx_pop();
_ret


\chr_PersonModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych pracownika - parametr zapytania chr_PersonModify.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_P_ID',_formula_json)


\chr_PersonModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonModify.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_P_ID')


\chr_PersonDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_P_ID')


\chr_PersonDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonDelete.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_P_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonAddress (adres pracownika).
::======================================================================================================================


\chr_PersonAddressModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: JSON dla zapytania chr_PersonAddressModify.
::       Kontekst wywołania - rekord tabeli OS_ADRES.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

:: W tym zastosowaniu wystawianie są tylko adresy osób
{? OS_ADRES.OSOBA=null()
|| KOMM.add('Adres nie dotyczy osoby.'@);
   return(0)
|? date(0,0,0)<OS_ADRES.DO & OS_ADRES.DO<date()
|| KOMM.add('Adres nieaktualny.'@);
   return(0)
?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_tab:=type_of(_TAB_ID)<>type_of(~~);
{? _tab
|| _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
   _TAB_ID.cntx_psh();
   _TAB_ID.index(_ndx)
?};

_ret:=0;
P.cntx_psh();
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),OS_ADRES.OSOBA);
{? P.first()
|| KRAJE.cntx_psh();
   KRAJE.prefix();
   {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
         P.next()
      || _obj.create();

         _obj.set('AddressType',exec('rodzaj','osoba',OS_ADRES.RODZAJ));
         _obj.set('ApartmentNumber',OS_ADRES.LOKAL);
         _obj.set('City',OS_ADRES.MIASTO);
         _obj.set('CountryName',OS_ADRES.KRAJ().NAZ);
         _obj.set('DateFrom',OS_ADRES.OD);
         _obj.set('DateTo',OS_ADRES.DO);
         _obj.set('District',OS_ADRES.GMINA);
         _obj.set('HouseNumber',OS_ADRES.DOM);
         _obj.set('PersonId__id_Erp',P.uidref());
         _obj.set('Post',OS_ADRES.POCZTA);
         _obj.set('PostalCode',OS_ADRES.KOD);
         _obj.set('Province',OS_ADRES.WOJEWODZ);
         _obj.set('Street',OS_ADRES.ULICA);
         _obj.set('SubProvince',OS_ADRES.POWIAT);
         _obj.set('__ModifiedDate_erp',OS_ADRES.idput_value());
         _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
         _obj.set('__id_erp',OS_ADRES.uidref()+P.uidref());

         _ret:=_obj.save();
         _ret & P.next()
      ?}
   !};
   KRAJE.cntx_pop()
?};
P.cntx_pop();

{? _tab
|| _TAB_ID.cntx_pop();
   _TAB_ID.ndx_drop(_ndx)
?};

_ret


\chr_PersonAddressModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodanie/modyfikacja danych adresu osoby - parametr zapytania chr_PersonAddressModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonAddressModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_OS_ADRES_ID',_formula_json,1)


\chr_PersonAddressModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAddressModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_OS_ADRES_ID')


\chr_PersonAddressDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonAddressDelete
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_OS_ADRES_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   OS_ADRES.cntx_psh();
   OS_ADRES.prefix();
   {? OS_ADRES.seek(_uidref)
   || {? date(0,0,0)<OS_ADRES.DO & OS_ADRES.DO<date()
      || _ret:=params_exec('Delete_args','portal_core',_sync_id)
      || _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
::       Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
::       W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
::       _TAB.ID     = __id_cloud | __ModifiedDate_cloud
::       _TAB.OPIS   = Dodatkowe informacje z __id_erp
         {? _TAB.first()
         || P.cntx_psh();
            P.prefix();
            {!
            |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::                Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
               || _TAB.del()
               || _TAB.next()
               ?}
            !};
            P.cntx_pop()
         ?};
         {? _TAB.first()
         || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
         || KOMM.add('Wiersz nie wymagał usunięcia.'@)
         ?}
      ?}
   ?};
   OS_ADRES.cntx_pop()

|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\chr_PersonAddressDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAddressDelete
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_OS_ADRES_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonFamily (członek rodziny pracownika).
::======================================================================================================================


\chr_PersonFamilyModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: JSON dla zapytania chr_PersonFamilyModify.
::       Kontekst wywołania - rekord tabeli RD.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_tab:=type_of(_TAB_ID)<>type_of(~~);
{? _tab
|| _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
   _TAB_ID.cntx_psh();
   _TAB_ID.index(_ndx)
?};

_ret:=0;
P.cntx_psh();
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),RD.OSOBA);
{? P.first()
|| S_ZUS.cntx_psh();
   S_ZUS.prefix();
   {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
         P.next()
      || _obj.create();

         _obj.set('BirthDate',RD.DA);
         _obj.set('DeregistrationDate',RD.UZDO);
         _obj.set('DisabilityLvlZUSCode',RD.STNP().KOD);
         _obj.set('FirstName',RD.IM);
         _obj.set('LastName',RD.NA);
         _obj.set('NotificationDate',RD.UZOD);
         _obj.set('PESEL',RD.PESEL);
         _obj.set('PersonId__id_Erp',P.uidref());
         _obj.set('RelationshipName',{? RD.STPK().get() || S_ZUS.memo_txt(,1,'OPIS') || ~~ ?});
         _obj.set('RelationshipZUSCode',RD.STPK().KOD);
         _obj.set('IsAvaliable4CareLeave',',01,11,30,31,'*',%1,'[RD.STPK().KOD]>0);
         _obj.set('__ModifiedDate_erp',RD.idput_value());
         _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
         _obj.set('__id_erp',RD.uidref()+P.uidref());

         _ret:=_obj.save();

         _ret & P.next()
      ?}
   !};
   S_ZUS.cntx_pop()
?};
P.cntx_pop();

{? _tab
|| _TAB_ID.cntx_pop();
   _TAB_ID.ndx_drop(_ndx)
?};

_ret


\chr_PersonFamilyModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodanie/modyfikacja danych rodziny osoby - parametr zapytania chr_PersonFamilyModify
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonFamilyModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_RD_ID',_formula_json,1)


\chr_PersonFamilyModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonFamilyModify
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_RD_ID')


\chr_PersonFamilyDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_PersonFamilyDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_RD_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
::    _TAB.ID     = __id_cloud | __ModifiedDate_cloud
::    _TAB.OPIS   = Dodatkowe informacje z __id_erp
   {? _TAB.first()
   || P.cntx_psh();
      P.prefix();
      {!
      |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::          Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
         || _TAB.del()
         || _TAB.next()
         ?}
      !};
      P.cntx_pop()
   ?};
   {? _TAB.first()
   || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@)
   ?}

|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\chr_PersonFamilyDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonFamilyDelete.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_RD_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonEducation (wykształcenie / ukończone szkoły).
::======================================================================================================================


\chr_PersonEducationModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: JSON dla zapytania chr_PersonEducationModify.
::       Kontekst wywołania - rekord tabeli wykształcenia OS_SZKOL.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_tab:=type_of(_TAB_ID)<>type_of(~~);
{? _tab
|| _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
   _TAB_ID.cntx_psh();
   _TAB_ID.index(_ndx)
?};

_ret:=0;
P.cntx_psh();
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),OS_SZKOL.OSOBA);
{? P.first()
|| ADRES.cntx_psh();
   ADRES.prefix();
   WYK.cntx_psh();
   WYK.prefix();
   {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
         P.next()
      || _obj.create();

         _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
         _obj.set('DateOfCompletion',OS_SZKOL.DO);
         _obj.set('SchoolName',OS_SZKOL.SZKOLA().NAZWA);
         _obj.set('AcademicTitle',OS_SZKOL.WYK().WK);
         _obj.set('__ModifiedDate_erp',OS_SZKOL.idput_value());
         _obj.set('__id_erp',OS_SZKOL.uidref()+P.uidref());
         _obj.set('Department',OS_SZKOL.WYDZIAL);
         _obj.set('DateStart',OS_SZKOL.OD);
         _obj.set('PersonId__id_Erp',P.uidref());

         _ret:=_obj.save();

         _ret & P.next()
      ?}
   !};
   WYK.cntx_pop();
   ADRES.cntx_pop()
?};
P.cntx_pop();

{? _tab
|| _TAB_ID.cntx_pop();
   _TAB_ID.ndx_drop(_ndx)
?};

_ret


\chr_PersonEducationModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodanie/modyfikacja danych wykształcenia osoby - parametr zapytania chr_PersonEducationModify
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonEducationModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_OS_SZKOL_ID',_formula_json,1)


\chr_PersonEducationModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonEducationModify
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_OS_SZKOL_ID')


\chr_PersonEducationDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Parametr zapytania chr_PersonEducationDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_OS_SZKOL_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
::    _TAB.ID     = __id_cloud | __ModifiedDate_cloud
::    _TAB.OPIS   = Dodatkowe informacje z __id_erp
   {? _TAB.first()
   || P.cntx_psh();
      P.prefix();
      {!
      |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::          Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
         || _TAB.del()
         || _TAB.next()
         ?}
      !};
      P.cntx_pop()
   ?};
   {? _TAB.first()
   || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@)
   ?}

|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\chr_PersonEducationDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonEducationDelete.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_OS_SZKOL_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonBankAccount -> chr_PersonBankAcc (rachunek bankowy pracownika).
::======================================================================================================================


\payoutMethodName
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Definicja sposobu płatności. Wspólna dla metod chr_PersonBankAccount i chr_PersonPayoutMethod.
::   WE: [_a] [DICT] - tabela, która jest aktualnie przetwarzana (domyślnie PKO)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:='ROR_';
_TAB:={? var_pres('_a')=type_of(PKO) || _a || PKO ?};

{? _TAB=PKO
|| R.cntx_psh();
   R.prefix();
   _ret+=$PKO.R().RN;
   R.cntx_pop()
|? _TAB=R
|| _ret+=$R.RN
?};
_ret


\chr_PersonBankAccModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: JSON dla zapytania chr_PersonBankAccountModify.
::       Kontekst wywołania - rekord tabeli PKO.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_tab:=type_of(_TAB_ID)<>type_of(~~);
{? _tab
|| _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
   _TAB_ID.cntx_psh();
   _TAB_ID.index(_ndx)
?};

_ret:=0;
P.cntx_psh();
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),PKO.OSOBA);
{? P.first()
|| B.cntx_psh();
   B.prefix();
   BANORG.cntx_psh();
   BANORG.prefix();
   {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
         P.next()
      || _obj.create();

         _obj.set('AccountNumber',PKO.N);
         _obj.set('BankName',PKO.BA().BANORG().NAZ);
         _obj.set('DateFrom',P.DZA);
         _obj.set('PayoutMethod',exec('payoutMethodName','portal_method_chr'));
         _obj.set('PersonId__id_Erp',P.uidref());
         _obj.set('__ModifiedDate_erp',PKO.idput_value());
         _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
         _obj.set('__id_erp',PKO.uidref()+P.uidref());

         _ret:=_obj.save();

         _ret & P.next()
      ?}
   !};
   BANORG.cntx_pop();
   B.cntx_pop()
?};
P.cntx_pop();

{? _tab
|| _TAB_ID.cntx_pop();
   _TAB_ID.ndx_drop(_ndx)
?};

_ret


\chr_PersonBankAccModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodanie/modyfikacja danych rachunków osoby - parametr zapytania chr_PersonBankAccountModify
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonBankAccModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_PKO_N_ID',_formula_json,1)


\chr_PersonBankAccModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonBankAccountModify
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PKO_N_ID')


\chr_PersonBankAccDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonBankAccountDelete
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_PKO_N_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
::    _TAB.ID     = __id_cloud | __ModifiedDate_cloud
::    _TAB.OPIS   = Dodatkowe informacje z __id_erp
   {? _TAB.first()
   || P.cntx_psh();
      P.prefix();
      {!
      |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::          Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
         || _TAB.del()
         || _TAB.next()
         ?}
      !};
      P.cntx_pop()
   ?};
   {? _TAB.first()
   || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@)
   ?}

|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\chr_PersonBankAccDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonBankAccountDelete
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PKO_N_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonPayoutMethod -> chr_PersonPayMeth (sposób wypłaty - wysokość przelewu).
::======================================================================================================================


\chr_PersonPayMethModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonPayoutMethodModify.
::       Kontekst wywołania - rekord tabeli rachunków - PKO.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_tab:=type_of(_TAB_ID)<>type_of(~~);
{? _tab
|| _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
   _TAB_ID.cntx_psh();
   _TAB_ID.index(_ndx)
?};

_ret:=0;
P.cntx_psh();
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),PKO.OSOBA);
R.cntx_psh();
R.prefix();
{? P.first()
|| {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
         P.next()
      || _obj.create();

         _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
         _obj.set('DateFrom',P.DZA);
         _obj.set('PayoutMethodName',PKO.R().RT);
         _obj.set('Percentage',{? PKO.K<=1 || 100*PKO.K || 0 ?});
         _obj.set('FixedAmount',{? PKO.K<=1 || 0 || PKO.K ?});
::       Portal obsługuje jedynie 'Podstawowa' i 'Dodatkowa'. Najlepiej więc zostawić niewypełnioną.
::         _obj.set('PayrollType',);
         _obj.set('__ModifiedDate_erp',PKO.idput_value());
         _obj.set('__id_erp',PKO.uidref()+P.uidref());
         _obj.set('PayoutMethod',exec('payoutMethodName','portal_method_chr'));
::         _obj.set('PayrollTypeName',);
         _obj.set('OrderNumber',PKO.R().LP);
         _obj.set('PersonId__id_Erp',P.uidref());

         _ret:=_obj.save();

         _ret & P.next()
      ?}
   !}
?};
R.cntx_pop();
P.cntx_pop();

{? _tab
|| _TAB_ID.cntx_pop();
   _TAB_ID.ndx_drop(_ndx)
?};

_ret


\chr_PersonPayMethModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych rachunków osoby - parametr zapytania chr_PersonPayoutMethodModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonPayMethModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_PKO_K_ID',_formula_json,1)


\chr_PersonPayMethModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonPayoutMethodModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PKO_K_ID')


\chr_PersonPayMethDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonPayoutMethodDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_PKO_K_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
::    _TAB.ID     = __id_cloud | __ModifiedDate_cloud
::    _TAB.OPIS   = Dodatkowe informacje z __id_erp
   {? _TAB.first()
   || P.cntx_psh();
      P.prefix();
      {!
      |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::          Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
         || _TAB.del()
         || _TAB.next()
         ?}
      !};
      P.cntx_pop()
   ?};
   {? _TAB.first()
   || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@)
   ?}

|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\chr_PersonPayMethDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonPayoutMethodDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PKO_K_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PayoutMethod (sposób wypłaty).
::======================================================================================================================

\chr_PayoutMethodModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: JSON dla zapytania chr_PayoutMethodModify.
::       Kontekst wywołania - rekord tabeli rubryk - R.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: przetwarzamy tylko rekordy należące do klasy 'B' (rachunki bankowe)
{? R.RK<>'B' || return(0) ?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('PayoutMethod',exec('payoutMethodName','portal_method_chr',R));
_obj.set('PayoutMethodName',R.RT);
_obj.set('IsActive',1);
_obj.set('__ModifiedDate_erp',R.idput_value());
_obj.set('__id_erp',R.uidref());

_obj.save()


\chr_PayoutMethodModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Dodanie/modyfikacja sposobów płatności - parametr zapytania chr_PayoutMethodModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PayoutMethodModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_R_PM_ID',_formula_json)


\chr_PayoutMethodModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PayoutMethodModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_R_PM_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonTaxOffice (urząd skarbowy pracownika).
::======================================================================================================================


\chr_PersonTaxOfficeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: JSON dla zapytania chr_PersonTaxOfficeModify.
::       Kontekst wywołania - rekord tabeli urzędów skarbowych OS_US.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_tab:=type_of(_TAB_ID)<>type_of(~~);
{? _tab
|| _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
   _TAB_ID.cntx_psh();
   _TAB_ID.index(_ndx)
?};

_ret:=0;
P.cntx_psh();
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),OS_US.OSOBA);
{? P.first()
|| US.cntx_psh();
   US.prefix();
   {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
         P.next()
      || _obj.create();

         _obj.set('DateFrom',OS_US.OD);
         _obj.set('DateTo',OS_US.DO);
         _obj.set('PersonId__id_Erp',P.uidref());
         _obj.set('TaxOfficeName',OS_US.US().NU);
         _obj.set('__ModifiedDate_erp',OS_US.idput_value());
         _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
         _obj.set('__id_erp',OS_US.uidref()+P.uidref());

         _ret:=_obj.save();

         _ret & P.next()
      ?}
   !};
   US.cntx_pop()
?};
P.cntx_pop();

{? _tab
|| _TAB_ID.cntx_pop();
   _TAB_ID.ndx_drop(_ndx)
?};

_ret


\chr_PersonTaxOfficeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodanie/modyfikacja danych urzędów skarbowych osoby - parametr zapytania chr_PersonTaxOfficeModify
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonTaxOfficeModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_OS_US_ID',_formula_json,1)


\chr_PersonTaxOfficeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonTaxOfficeModify
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_OS_US_ID')


\chr_PersonTaxOfficeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonTaxOfficeDelete
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_OS_US_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
::    _TAB.ID     = __id_cloud | __ModifiedDate_cloud
::    _TAB.OPIS   = Dodatkowe informacje z __id_erp
   {? _TAB.first()
   || P.cntx_psh();
      P.prefix();
      {!
      |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::          Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
         || _TAB.del()
         || _TAB.next()
         ?}
      !};
      P.cntx_pop()
   ?};
   {? _TAB.first()
   || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@)
   ?}

|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\chr_PersonTaxOfficeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonTaxOfficeDelete
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_OS_US_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonInsuranceInfo -> chr_PersonInsurInfo (dane ubezpieczeniowe pracownika).
::======================================================================================================================


\is_P_INFO_OK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.14]
:: OPIS: Sprawdza czy bieżący rekord tabeli P_INFO spełnia kryteria obowiązywania na bieżącą datę
::       Formuła bazuje na ustawionym kontekście tabeli P_INFO
::   WE: _a [STRING] - uidref rekordu P_INFO
::   WY: -1/0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=-1;
_uidref:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

:: sprawdzamy jakie rekordy na bieżącą datę są "obowiązujące"
P_INFO.cntx_psh();
P_INFO.prefix();
{? P_INFO.seek(_uidref,,1)
|| P_INFO.cntx_psh();
   _p_info:=exec('zn_ttub','pracownik',P_INFO.OSOBA);
   _od:=exec('FindAndGet','#table',P_INFO,_p_info,,"OD",#0);
   _p_info_m:=exec('zn_ttub','pracownik',P_INFO.OSOBA,,'m');
   _od_m:=exec('FindAndGet','#table',P_INFO,_p_info_m,,"OD",#0);
   {? _od_m<_od || _p_info_m:=null() ?};
   _p_info_w:=exec('zn_ttub','pracownik',P_INFO.OSOBA,,'w');
   _od_w:=exec('FindAndGet','#table',P_INFO,_p_info_w,,"OD",#0);
   {? _od_w<_od || _p_info_w:=null() ?};
   P_INFO.cntx_pop();

:: nie przetwarzamy rekordu, który nie jest "aktualny"
   _result:=~(P_INFO.ref()<>_p_info & P_INFO.ref()<>_p_info_m & P_INFO.ref()<>_p_info_w)
?};
P_INFO.cntx_pop();
_result


\chr_PersonInsurInfoModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: JSON dla zapytania chr_PersonInsuranceInfoModify.
::       Kontekst wywołania - rekord tabeli danych ubezpieczeniowych P_INFO.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;
_uidref:=_env.Param;
:: nie przetwarzamy rekordu, który nie jest "aktualny"
{? exec('is_P_INFO_OK','portal_method_chr',_uidref)<=0
|| return(0)
?};

_tab:=type_of(_TAB_ID)<>type_of(~~);
{? _tab
|| _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
   _TAB_ID.cntx_psh();
   _TAB_ID.index(_ndx)
?};

_ret:=0;
P.cntx_psh();
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),P_INFO.OSOBA);
{? P.first()
|| S_ZUS.cntx_psh();
   S_ZUS.index('S_ZUS');
   S_ZUS.prefix();
   _kodZUS_opis:=
      {? P_INFO.TTUB
      || P_INFO.TTUB();
         '%1 %2 %3'[S_ZUS.KOD,exec('txt_sep','portal_core'),S_ZUS.memo_txt(,1,'OPIS')]
      || ''
      ?};

   ADRES.cntx_psh();
   ADRES.prefix();
   {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
         P.next()
      || _obj.create();

         _obj.set('DateFrom',P_INFO.OD);
         _obj.set('DateTo',);
         _obj.set('DegreeOfDisability',P_INFO.STNP().KOD);
         _obj.set('NationalHealthFund',P_INFO.KC().NAZWA);
         _obj.set('Pension',);
         _obj.set('PersonId__id_Erp',P.uidref());
         _obj.set('ZUSCode',_kodZUS_opis);
         _obj.set('__ModifiedDate_erp',P_INFO.idput_value());
         _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
         _obj.set('__id_erp',P_INFO.uidref()+P.uidref());

         _ret:=_obj.save();

         _ret & P.next()
      ?}
   !};
   ADRES.cntx_pop();
   S_ZUS.cntx_pop()
?};
P.cntx_pop();

{? _tab
|| _TAB_ID.cntx_pop();
   _TAB_ID.ndx_drop(_ndx)
?};

_ret


\chr_PersonInsurInfoModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodanie/modyfikacja danych ubezpieczeniowych osoby - parametr zapytania chr_PersonInsuranceInfoModify
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonInsurInfoModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_P_INFO_ID',_formula_json,1)


\chr_PersonInsurInfoModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonInsuranceInfoModify
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_P_INFO_ID')


\chr_PersonInsurInfoDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonInsuranceInfoDelete
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_P_INFO_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
|| _uidref:=_env.Param;
   {? exec('is_P_INFO_OK','portal_method_chr',_uidref)<=0
   || _ret:=params_exec('Delete_args','portal_core',_sync_id)
   || _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
      {? _TAB.first()
      || P.cntx_psh();
         P.prefix();
         {!
         |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::                Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
            || _TAB.del()
            || _TAB.next()
            ?}
         !};
         P.cntx_pop()
      ?};
      {? _TAB.first()
      || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
      || KOMM.add('Wiersz nie wymagał usunięcia.'@)
      ?}
   ?}
|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\chr_PersonInsurInfoDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonInsuranceInfoDelete
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_P_INFO_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_BenefitType (definicja benefitu).
::======================================================================================================================


\chr_BenefitTypeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_BenefitTypeModify.
::       Kontekst wywołania - rekord tabeli BNFTT.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('BenefitType',BNFTT.AKRONIM);
_obj.set('BenefitDesc',BNFTT.NAZWA);
_obj.set('__ModifiedDate_erp',BNFTT.idput_value());
_obj.set('__id_erp',BNFTT.uidref());
_obj.set('FinancingSource',
   {? BNFTT.ZRODLO=exec('bnftt_zrodlo_val_pracodawca','portal_benefity')
   || 'Środki pracodawcy'
   || BNFTT.ZRODLO
   ?}
);
_obj.set('HasChangingNature',BNFTT.ZMIENNY='T');

_obj.save()


\chr_BenefitTypeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z definicją benefitu - parametr zapytania chr_BenefitTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_BenefitTypeModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_BNFTT_ID',_formula_json)


\chr_BenefitTypeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_BenefitTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_BNFTT_ID')


\chr_BenefitTypeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_BenefitTypeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_BNFTT_ID')


\chr_BenefitTypeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_BenefitTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_BNFTT_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_Position (stanowisko).
::======================================================================================================================


\chr_PositionModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_PositionModify.
::       Kontekst wywołania - rekord tabeli STN.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('Position',$STN.ref());
_obj.set('PositionName',STN.ST);
_obj.set('__ModifiedDate_erp',STN.idput_value());
_obj.set('__id_erp',STN.uidref());

_obj.save()


\chr_PositionModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja stanowiska - parametr zapytania chr_PositionModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PositionModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_STN_ID',_formula_json)


\chr_PositionModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PositionModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_STN_ID')


\chr_PositionDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_PositionDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_STN_ID')


\chr_PositionDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PositionDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_STN_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_WorkCharacter (charakter pracy).
::======================================================================================================================


\chr_WorkCharacterModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_WorkCharacterModify.
::       Kontekst wywołania - rekord tabeli CP.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('WorkCharacter',CP.CP);
_obj.set('__ModifiedDate_erp',CP.idput_value());
_obj.set('__id_erp',CP.uidref());
_obj.set('WorkCharacterDesc',CP.O);

_obj.save()


\chr_WorkCharacterModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja charakteru pracy - parametr zapytania chr_WorkCharacterModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_WorkCharacterModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_CP_ID',_formula_json)


\chr_WorkCharacterModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_WorkCharacterModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_CP_ID')


\chr_WorkCharacterDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_WorkCharacterDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_CP_ID')


\chr_WorkCharacterDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_WorkCharacterDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_CP_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonContract (umowa pracownika [zarówno o pracę jak i cywilnoprawna]).
::======================================================================================================================


\chr_PersonContract_ContractNr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła zwracająca numer umowy. Wykorzystywana również przy synchronizacji rachunków. Zakłada się prawidłowo
::       podczytany bufor tabeli.
::   WE: _a - Uchwyt tabeli, z której pochodzi rekord.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a=H_UM
|| H_UM.NUMER
|? _a=ZC
|| '%1 [%2]' [ZC.NU,$ZC.ref()+8]
|| ''
?}


\chr_PersonContract_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='H_UM'
   || 'PORTAL_HUM_ID'
   |? _a='ZC'
   || 'PORTAL_ZC_ID'
   || ''
   ?};
_ret


\chr_PersonContractModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonContractModify.
::       Kontekst wywołania - rekord tabeli przebiegu H_UM lub ZC.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_cfg:=exec('chr_PersonContract_cfg','portal_method_chr',_env.TabAcr);
_sep:=exec('txt_sep','portal_core');
_pomin:=0;

P.cntx_psh();
P.prefix();
F_ZATR.cntx_psh();
F_ZATR.prefix();
_cfg.TAB.P();
_pUid:='';
_pDza:=date(0,0,0);
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _pomin:=1
|? _cfg.TAB=H_UM & P.F_ZATR().KOD='Z'
::  Dla umów cywilnoprawnych źródłem informacji o umowach ma byc tabela ZC, a nie H_UM.
|| _pomin:=1
|| _pDza:=P.DZA;
   _pUid:=P.uidref()
?};
F_ZATR.cntx_pop();
P.cntx_pop();

:: Sprawdzenie czy umowa cywilnoprawna znajduje się w okresie retencji:
{? ~_pomin & _cfg.TAB=ZC
|| _rtn:=exec('retentionPersonContract','portal_lib');
:: Albo umowa mieści się w okresie retencji, albo ma conajmniej jeden rachunek na liście ze znacznikiem PORTAL='T':
   {? _rtn<>0 & (exec('ost_rh_dt','zlec_rh',ZC.ref,0,1,1)~1)<((date()~1)-_rtn)
   || KOMM.add('Umowa cywilnoprawna starsza niż zakładany okres retencji.'@);
      _pomin:=1
   ?}
?};

{? ~_pomin
|| RU.cntx_psh();
   RU.prefix();
   {? _cfg.TAB=H_UM
   || H.cntx_psh();
      H.use(exec('h_name','pracownik',H_UM.ref()));
      H.index('HISTUM');
      H.prefix(H_UM.ref());
      {? H.first()
      || _od:=H_UM.OD;
         _do:=H_UM.DO;
         _dzaw:=H.PODPIS;
         _typ_um:='%1 %2 %3' ['Umowa o pracę',_sep,H.UMOWA().RU().O];
         _st_typ:=~~;
         _st_kw:=~~;
         _tresc:=~~;
         _ch_pr:=H.CP().CP;
         _wy1:='%1/%2' [$H.WYL,$H.WYM];
         {? H.WY=1
         || _wy2:='Pełen etat'
         || _ulamek:=exec('ulamek','#convert',H.WYL,H.WYM);
            _wy2:='%1 etatu' [~(1+_ulamek)+(1-_ulamek)]
         ?}
      ?};
      H.cntx_pop()
   |? _cfg.TAB=ZC
   || _od:=ZC.DU;
      _do:=ZC.DW;
      _dzaw:=ZC.DZ;
      _typ_um:='%1 %2 %3' ['Umowa cywilnoprawna',_sep,ZC.RU().O];
      _st_typ:=
         {? ZC.TYP='N' || 'Ustalona kwota'
         |? ZC.TYP='M' || 'Stawka miesięczna'
         |? ZC.TYP='G' || 'Stawka godzinowa'
         |? ZC.TYP='D' || 'Stawka dzienna'
         || ''
         ?};
      _st_kw:=ZC.KU;
      _tresc:=exec('strcut','#string',ZC.memo_txt(0,1,'TRESC'),6000,1);
      _ch_pr:=~~;
      _wy1:=_wy2:=~~
   ?};
   RU.cntx_pop();

   _obj.create();

   _obj.set('AmountAtStake',_st_kw);
   _obj.set('ContractNumber',exec('chr_PersonContract_ContractNr','portal_method_chr',_cfg.TAB));
::   _obj.set('ContractStatus',);
   _obj.set('ContractSubject',_tresc);
   _obj.set('ContractTypeName',_typ_um);
   _obj.set('DateFrom',_od);
   _obj.set('DateOfConclusion',_dzaw);
   _obj.set('DateTo',_do);
   _obj.set('HireDate',_pDza);
   _obj.set('IsContractOfEmployment',_cfg.TAB=H_UM);
   _obj.set('PersonId__id_Erp',_pUid);
   _obj.set('StakeType',_st_typ);
   _obj.set('WorkCharacter',_ch_pr);
   _obj.set('WorkingHours',_wy1);
   _obj.set('WorkingHoursName',_wy2);
   _obj.set('__ModifiedDate_erp',_cfg.TAB.idput_value());
   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('__id_erp',_cfg.TAB.uidref());

   _ret:=_obj.save()

|| _ret:=0
?};

_ret


\chr_PersonContractModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z przebiegu zatrudnienia - parametr zapytania chr_PersonContractModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonContract_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_PersonContractModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_PersonContractModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonContractModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonContract_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_PersonContractDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonContractDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonContract_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_args','portal_core',_cfg.id)


\chr_PersonContractDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonContractDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonContract_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonEmployInfo (jednostka organizacyjna pracownika).
::======================================================================================================================


\chr_PersonEmployModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonEmployInfoModify.
::       Kontekst wywołania - rekord tabeli przebiegu - H.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

P.cntx_psh();
P.prefix();
H.P();
UD_SKL.cntx_psh();
UD_SKL.prefix();

{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _ret:=0
|| _obj.create();

   _obj.set('DateFrom',H.OD);
   _obj.set('DateTo',H.DO);
   _obj.set('Department',H.WYDZIAL().SYMBOL);
   _obj.set('DepartmentName',H.WYDZIAL().OPIS);
   _obj.set('PersonId__id_Erp',P.uidref());
   _obj.set('__ModifiedDate_erp',H.idput_value());
   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('__id_erp',H.uidref());

   _ret:=_obj.save()
?};
UD_SKL.cntx_pop();
P.cntx_pop();

_ret


\chr_PersonEmployModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z przebiegu zatrudnienia (wydział) - parametr zapytania chr_PersonEmployInfoModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonEmployModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_H_WYD_ID',_formula_json)


\chr_PersonEmployModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonEmployInfoModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_H_WYD_ID')


\chr_PersonEmployDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonEmployInfoDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_H_WYD_ID')


\chr_PersonEmployDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonEmployInfoDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_H_WYD_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PositionInOrganization -> chr_PositionInOrg (pozycja w organizacji).
::======================================================================================================================


\chr_PositionInOrgModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_PositionInOrganizationModify.
::       Kontekst wywołania - rekord tabeli PSTO.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=1;

STO.cntx_psh();
STO.prefix();
UD_SKL.cntx_psh();
UD_SKL.prefix();

_fud:=exec('firma4ud_skl','schemat',,,PSTO.UD_SKL);
{? _fud.STATUS='B'
|| KOMM.error('Ustalenie firmy dla elementu struktury nie powiodło się.'@,0);
   _ret:=0
|? _fud.STATUS='I'
|| KOMM.add(_fud.MSG)
|? _fud.STATUS='OK' & _fud.VAL<>exec('ref_firma','ustawienia')
|| KOMM.add('Element z innej firmy.'@);
   _ret:=0
?};

{? _ret
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('PositionInOrganization',PSTO.KOD);
   _obj.set('Description',PSTO.OPIS);
   _obj.set('Position',$PSTO.STO().STN);
   _obj.set('Department',PSTO.UD_SKL().SYMBOL);
   _obj.set('__ModifiedDate_erp',PSTO.idput_value());
   _obj.set('__id_erp',PSTO.uidref());

   _ret:=_obj.save()
?};

UD_SKL.cntx_pop();
STO.cntx_pop();

_ret


\chr_PositionInOrgModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja pozycji w organizacji - parametr zapytania chr_PositionInOrganizationModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PositionInOrgModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_PSTO_ID',_formula_json)


\chr_PositionInOrgModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PositionInOrganizationModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PSTO_ID')


\chr_PositionInOrgDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_PositionInOrganizationDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_PSTO_ID')


\chr_PositionInOrgDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PositionInOrganizationDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PSTO_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonPosition (stanowisko pracownika).
::======================================================================================================================


\chr_PersonPositionModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonPositionModify.
::       Kontekst wywołania - rekord tabeli przebiegu - H.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

P.cntx_psh();
P.prefix();
H.P();
STN.cntx_psh();
STN.prefix();
POZWORG.cntx_psh();

{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _ret:=0
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('DateFrom',H.OD);
   _obj.set('DateTo',H.DO);
   _obj.set('Position',$H.ST);
   _obj.set('PositionName',H.ST().ST);
   _obj.set('PositionInOrganization',H.POZWORG().KOD);
   _obj.set('__ModifiedDate_erp',H.idput_value());
   _obj.set('__id_erp',H.uidref());
   _obj.set('PersonId__id_Erp',P.uidref());

   _ret:=_obj.save()
?};

POZWORG.cntx_pop();
STN.cntx_pop();
P.cntx_pop();

_ret


\chr_PersonPositionModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z przebiegu zatrudnienia (stanowisko) - parametr zapytania chr_PersonPositionModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonPositionModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_H_ST_ID',_formula_json)


\chr_PersonPositionModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonPositionModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_H_ST_ID')


\chr_PersonPositionDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonPositionDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_H_ST_ID')


\chr_PersonPositionDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonPositionDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_H_ST_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonWorkplace (miejsce wykonywania pracy).
::======================================================================================================================


\chr_PersonWorkplaceModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonWorkplaceModify.
::       Kontekst wywołania - rekord tabeli przebiegu - H.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

P.cntx_psh();
P.prefix();
H.P();

{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _ret:=0
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('DateFrom',H.OD);
   _obj.set('DateTo',H.DO);
   _obj.set('WorkplaceName',H.MIEJSCE);
   _obj.set('__ModifiedDate_erp',H.idput_value());
   _obj.set('__id_erp',H.uidref());
   _obj.set('PersonId__id_Erp',P.uidref());

   _ret:=_obj.save()
?};

P.cntx_pop();

_ret


\chr_PersonWorkplaceModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z przebiegu zatrudnienia (miejsce wykonywania pracy) - parametr zapytania
::       chr_PersonWorkplaceModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonWorkplaceModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_H_MIEJSCE_ID',_formula_json)


\chr_PersonWorkplaceModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkplaceModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_H_MIEJSCE_ID')


\chr_PersonWorkplaceDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonWorkplaceDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_H_MIEJSCE_ID')


\chr_PersonWorkplaceDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkplaceDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_H_MIEJSCE_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonWorkingHours -> chr_PersonWorkingH (historia zmian etatu zatrudnienia).
::======================================================================================================================


\chr_PersonWorkingHModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_PersonWorkingHoursModify.
::       Kontekst wywołania - rekord tabeli przebiegu - H.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

P.cntx_psh();
P.prefix();
H.P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _ret:=0
|| _obj.create();

   _norma:=exec('norma_fml','godziny');

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('WorkingHours','%1/%2' [$H.WYL,$H.WYM]);
   _obj.set('DateFrom',H.OD);
   _obj.set('DateTo',H.DO);
   _obj.set('__ModifiedDate_erp',H.idput_value());
   _obj.set('__id_erp',H.uidref());
   _obj.set('HoursToDaysRatio',_norma(H.OD));
   _obj.set('PersonId__id_erp',P.uidref());

   _ret:=_obj.save()
?};

P.cntx_pop();

_ret


\chr_PersonWorkingHModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja danych z historią zmiany etatu - parametr zapytania chr_PersonWorkingHoursModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonWorkingHModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_H_ETAT_ID',_formula_json)


\chr_PersonWorkingHModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkingHoursModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_H_ETAT_ID')


\chr_PersonWorkingHDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_PersonWorkingHoursDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_H_ETAT_ID')


\chr_PersonWorkingHDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkingHoursDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_H_ETAT_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonContractAccount -> chr_PersonCntrctA (rachunki umów cywilnoprawnych).
::======================================================================================================================


\chr_PersonCntrctAModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_PersonContractAccountModify.
::       Kontekst wywołania - rekord tabeli RH.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;
_pomin:=0;

ZC.cntx_psh();
ZC.prefix();
P.cntx_psh();
P.prefix();
RH.ZLE().P();

{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _pomin:=1
?};

:: Sprawdzenie czy umowa cywilnoprawna znajduje się w okresie retencji:
{? ~_pomin
|| _rtn:=exec('retentionPersonContract','portal_lib');
:: Albo umowa mieści się w okresie retencji, albo ma conajmniej jeden rachunek na liście ze znacznikiem PORTAL='T':
   {? _rtn<>0 & (exec('ost_rh_dt','zlec_rh',ZC.ref,0,1,1)~1)<((date()~1)-_rtn)
   || KOMM.add('Umowa cywilnoprawna starsza niż zakładany okres retencji.'@);
      _pomin:=1
   ?}
?};

{? _pomin
|| _ret:=0
||
   _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('ContractNumber',exec('chr_PersonContract_ContractNr','portal_method_chr',ZC));
   _obj.set('AccountNumber','%1 [%2]' [RH.N,$RH.ref()+8]);
   _obj.set('DateOfInvoice',RH.DRA);
   _obj.set('DateOfPayment',RH.DWY);
   _obj.set('ContractTypeName','Umowa cywilnoprawna');
   _obj.set('AmountAtStake',exec('licz_rhs','lista_licz',200));
::   _obj.set('ContractAccountSubject',);
   _obj.set('__ModifiedDate_erp',RH.idput_value());
   _obj.set('__id_erp',RH.uidref());
   _obj.set('PersonId__id_Erp',P.uidref());

   _ret:=_obj.save()
?};

P.cntx_pop();
ZC.cntx_pop();

_ret


\chr_PersonCntrctAModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja rachunku umowy cywilnoprawnej - parametr zapytania chr_PersonContractAccountModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonCntrctAModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_RH_ID',_formula_json)


\chr_PersonCntrctAModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonContractAccountModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_RH_ID')


\chr_PersonCntrctADelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_PersonContractAccountDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_RH_ID')


\chr_PersonCntrctADelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonContractAccountDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_RH_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonReprimand (kara/upomnienie).
::======================================================================================================================


\chr_PersonReprimandModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonReprimandModify.
::       Kontekst wywołania - rekord tabeli KART_DOD.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

KART_DEF.cntx_psh();
KART_DEF.prefix();
_def:=KART_DOD.KART_DEF().SYMBOL;
KART_DEF.cntx_pop();

_typ:={? KART_DOD.KT='K' || 'Kara' |? KART_DOD.KT='!' || 'Nagana' || '' ?};

{? _def<>'WYR_KAR' | _typ=''
|| KOMM.add('Wiersz nie dotyczy kartoteki wyróżnień / kar albo nie jest karą lub naganą.'@);
   return(0)
?};

_tab:=type_of(_TAB_ID)<>type_of(~~);
{? _tab
|| _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
   _TAB_ID.cntx_psh();
   _TAB_ID.index(_ndx)
?};

_ret:=0;
P.cntx_psh();
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),KART_DOD.OSOBA);
{? P.first()
|| {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.');
         P.next()
      || _obj.create();

         _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
         _obj.set('ReprimandType',_typ);
         _obj.set('ReprimandDescription',KART_DOD.OPIS);
         _obj.set('__ModifiedDate_erp',KART_DOD.idput_value());
         _obj.set('__id_erp',KART_DOD.uidref()+P.uidref());
         _obj.set('DateFrom',KART_DOD.OD);
         _obj.set('DateTo',KART_DOD.DO);
         _obj.set('PersonId__id_Erp',P.uidref());

         _ret:=_obj.save();

         _ret & P.next()
      ?}
   !}
?};
P.cntx_pop();

{? _tab
|| _TAB_ID.cntx_pop();
   _TAB_ID.ndx_drop(_ndx)
?};

_ret


\chr_PersonReprimandModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych o karze/upomnieniu - parametr zapytania chr_PersonReprimandModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonReprimandModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_KART_DOD_WYR_KAR_ID',_formula_json,1)


\chr_PersonReprimandModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonReprimandModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_KART_DOD_WYR_KAR_ID')


\chr_PersonReprimandDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonReprimandDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_KART_DOD_WYR_KAR_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania" rekordu tabeli KART_DOD w serwisie usuwającym rekordy.
|| _uidref:=_env.Param;
   KART_DOD.cntx_psh();
   KART_DOD.prefix();
   {? KART_DOD.seek(_uidref)
   || KART_DEF.cntx_psh();
      KART_DEF.prefix();
      {? KART_DOD.KART_DEF().SYMBOL<>'WYR_KAR' | (KART_DOD.KT<>'K' & KART_DOD.KT<>'!')
::       Jeżeli zapis nie jest już karą lub naganą, to usuwamy.
      || _ret:=params_exec('Delete_args','portal_core',_sync_id)
      || _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
         {? _TAB.first()
         || P.cntx_psh();
            P.prefix();
            {!
            |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::                Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
               || _TAB.del()
               || _TAB.next()
               ?}
            !};
            P.cntx_pop()
         ?};
         {? _TAB.first()
         || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
         || KOMM.add('Wiersz nie wymagał usunięcia.'@)
         ?}
      ?};
      KART_DEF.cntx_pop()
   ?};
   KART_DOD.cntx_pop()
|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\chr_PersonReprimandDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonReprimandDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_KART_DOD_WYR_KAR_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PayElementsConfig -> chr_PayElemCfg (elementy warunków współpracy - nagłówek).
::======================================================================================================================


\chr_PayElemCfgModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_PayElementsConfigModify.
::       Kontekst wywołania - rekord tabeli GSWN.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

{? GSWN.GSWN=0
|| KOMM.add('Element nadrzędny nie jest synchronizowany.'@);
   return(0)
?};

BNFTT.cntx_psh();
BNFTT.prefix();
GSXW.cntx_psh();
GSXW.index('NFLAGA');
GSXW.prefix(GSWN.FIRMA,GSWN.uidref());

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
:: Wynagrodzenie / Benefity (z rodzica).
_obj.set('ConfigGroup',exec('FindAndGet','#table',GSWN,GSWN.GSWN,GSWN.name(),"OPIS"));
_obj.set('ConfigGroupElem',$GSWN.ref());
_obj.set('BenefitType',{? GSWN.BNFTT || GSWN.BNFTT().AKRONIM || ~~ ?});
_obj.set('IsDescriptive',{? GSWN.BNFTT || GSWN.BNFTT().NOMINAL=0 ?});
_obj.set('Description',GSWN.OPIS);
_obj.set('OrderNumber',exec('FindAndGet','#table',GSWN,GSWN.GSWN,GSWN.name(),"LP",0)*100+GSWN.LP);
_obj.set('__ModifiedDate_erp',GSWN.idput_value());
_obj.set('__id_erp',GSWN.uidref());
_obj.set('IsInPersonCoopTerms',GSXW.find_key('IsInPersonCoopTerms',));
_obj.set('IsInTeamCoopTerms',GSXW.find_key('IsInTeamCoopTerms',));
_obj.set('IsInPersonRecord',GSXW.find_key('IsInPersonRecord',));

_ret:=_obj.save();

GSXW.cntx_pop();
BNFTT.cntx_pop();

_ret


\chr_PayElemCfgModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja grupy warunków współpracy - parametr zapytania chr_PayElementsConfigModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PayElemCfgModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_GSWN_N_ID',_formula_json)


\chr_PayElemCfgModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PayElementsConfigModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_GSWN_N_ID')


\chr_PayElemCfgDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_PayElementsConfigDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_GSWN_N_ID')


\chr_PayElemCfgDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PayElementsConfigDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_GSWN_N_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PayElementsConfigD -> chr_PayElemCfgD (elementy warunków współpracy - pozycja).
::======================================================================================================================


\chr_PayElemCfgDModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_PayElementsConfigDModify.
::       Kontekst wywołania - rekord tabeli GSWN.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

{? GSWN.GSWN=0
|| KOMM.add('Element nadrzędny nie jest synchronizowany.'@);
   return(0)
?};

BNFTT.cntx_psh();
BNFTT.prefix();
R.cntx_psh();
R.prefix();
GSPN.cntx_psh();
GSPN.prefix();
GSPP.cntx_psh();
GSPP.index('FRRN');
GSPP.prefix(GSWN.FIRMA);

{? GSWN.BNFTT
|| _skl:=GSWN.BNFTT().R().RN
:: Jeżeli to nie jest benefit, to nazwa jest numerem rubryki.
|| _skl:=#GSWN.NAZWA
?};

_grp:={? GSPP.find_key(_skl) || GSPP.GSPN().SYMBOL || ~~ ?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('PayElementCode',$_skl);
_obj.set('ComponentGroup',_grp);
_obj.set('__ModifiedDate_erp',GSWN.idput_value());
_obj.set('__id_erp',GSWN.uidref());
_obj.set('PayElementsConfigId__id_erp',GSWN.uidref());

_ret:=_obj.save();

GSPP.cntx_pop();
GSPN.cntx_pop();
R.cntx_pop();
BNFTT.cntx_pop();

_ret


\chr_PayElemCfgDModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja pozycji warunków współpracy - parametr zapytania chr_PayElementsConfigDModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PayElemCfgDModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_GSWN_P_ID',_formula_json)


\chr_PayElemCfgDModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PayElementsConfigDModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_GSWN_P_ID')


\chr_PayElemCfgDDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_PayElementsConfigDDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_GSWN_P_ID')


\chr_PayElemCfgDDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PayElementsConfigDDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_GSWN_P_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PayCompGroupConfig -> chr_PayCompGrpCfg (grupy składników płacowych).
::======================================================================================================================


\chr_PayCompGrpCfgModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PayCompGroupConfigModify.
::       Kontekst wywołania - rekord tabeli GSPN.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

GSXW.cntx_psh();
GSXW.index('NFLAGA');
GSXW.prefix(GSPN.FIRMA,GSPN.uidref());

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('ComponentGroup',GSPN.SYMBOL);
_obj.set('CompGroupShortTitle',GSPN.TYTK);
_obj.set('ComponentGroupTitle',GSPN.TYTW);
_obj.set('OrderNumber',GSPN.LP);
_obj.set('__ModifiedDate_erp',GSPN.idput_value());
_obj.set('__id_erp',GSPN.uidref());
_obj.set('IsInPayHistory',GSXW.find_key('IsInPayHistory',));
_obj.set('IsTotalGrossAmount',GSPN.SYMBOL='$BRUTTO');
_obj.set('IsTotalNetAmount',GSPN.SYMBOL='$NETTO');
_obj.set('IsOnPayAnalysisChart',GSXW.find_key('IsOnPayAnalysisChart',));
_obj.set('IsOnPayCompChart',GSXW.find_key('IsOnPayCompChart',));
_obj.set('CompGroupItemColor',{? GSPN.KOLOR='' || ~~ || exec('dec2hex','#color',GSPN.KOLOR) ?});

_ret:=_obj.save();

GSXW.cntx_pop();

_ret


\chr_PayCompGrpCfgModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych o grupach składników płacowych - parametr zapytania chr_PayCompGroupConfigModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PayCompGrpCfgModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_GSPN_ID',_formula_json)


\chr_PayCompGrpCfgModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PayCompGroupConfigModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_GSPN_ID')


\chr_PayCompGrpCfgDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PayCompGroupConfigDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_GSPN_ID')


\chr_PayCompGrpCfgDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PayCompGroupConfigDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_GSPN_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonPayElement -> chr_PersonPayElem (element wynagrodzenia).
::======================================================================================================================


\chr_PersonPayElem_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='H'
   || 'PORTAL_H_ID'
   |? _a='BNFTP'
   || 'PORTAL_BNFTP_ID'
   || ''
   ?};
_ret


\chr_PersonPayElemModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonPayElementModify.
::       Kontekst wywołania - rekord tabeli przebiegu H lub BNFTP.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_cfg:=exec('chr_PersonPayElem_cfg','portal_method_chr',_env.TabAcr);

_ret:=0;
P.cntx_psh();
P.prefix();
R.cntx_psh();
R.index('RUBKOD');
R.prefix();
BNFTT.cntx_psh();
BNFTT.index('RN');
BNFTT.prefix(exec('ref_firma','ustawienia'));
($_env.TabAcr)().P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@)
|? _env.TabAcr='H'
|| CP.cntx_psh();
   CP.prefix();
   _cp:=-(1+H.CP().S);
   CP.cntx_pop();

:: Wysyłamy dane podczas zasilania (_id=0) lub podczas modyfikacji - ale tylko 'S1'.
:: W przypadku modyfikacji wysyłany jest cały komplet danych (S1, S2, S3, KUP), jeżeli więc dostajemy do "przetworzenia"
:: S2, to został on już przetworzony w ramach S1.
:: Wysyłamy dane również z wartościami zerowymi - obsługując w ten sposób sytuację zmiany wartości z X na 0.
   _ok:=_id=0 | _ext='S1';
   {? _ok
   || {? _cp='f'
      || _rn:=spli_str('100,102,110',',')
      |? _cp='u'
      || _rn:=spli_str('100,101,110',',')
      || _ok:=0
      ?}
   ?};

   {? _ok
   || _d0:=date(0,0,0);
      _dt:=date();
      {? _dt<H.OD
      || _dt:=H.OD
      |? H.DO<>_d0 & H.DO<_dt
      || _dt:=H.DO
      ?};
      _hsx:=exec('hsx','lista_licz',_dt,_dt);

      _TAB:=exec('get_id','portal_core',_cfg.id,H.uidref());
      _TAB.index(_TAB.ndx_tmp(,,'OPIS',,));

      _s0:=_s1:=0;
      {! _lp:=1 .. 3
      |! _val:=($('_a.S'+$_lp))(_hsx);
         {? _val>0
         || _opis:='S%1' [$_lp];
            _obj.create();

            _obj.set('BenefitType',{? BNFTT.find_key(#_rn[_lp]) || BNFTT.AKRONIM || ~~ ?});
            _obj.set('DateFrom',H.OD);
            _obj.set('DateTo',H.DO);
            _obj.set('PayElementCode',_rn[_lp]);
            _obj.set('PayElementDesc',{? R.find_key(#_rn[_lp]) || R.RT || _rn[_lp] ?});
            _obj.set('PayElementValue',_val);
            _obj.set('PayElementCodeTech','BaseSalary%1' [$_lp]);
            _obj.set('PersonId__id_Erp',H.P().uidref());
            _obj.set('__ModifiedDate_erp',H.idput_value());
            _obj.set('__id_cloud',{? _TAB.find_key(_opis,) || #_TAB.ID || ~~ ?});
            _obj.set('__id_erp',H.uidref()+_opis);

            {? _obj.save()
            || _s1+=1
            || _s0+=1
            ?}
         ?}

      !};

::    KUP 50%
      {? ',K,P,G,'*',%1,' [H.PAT]
      || _opis:='KUP';
         _obj.create();

         _obj.set('DateFrom',H.OD);
         _obj.set('DateTo',H.DO);
         _obj.set('PayElementCode','KUP');
         _obj.set('PayElementDesc','Prawa autorskie - podwyższone koszty uzyskania przychodu');
         _obj.set('PayElementValue',1);
         _obj.set('PersonId__id_Erp',H.P().uidref());
         _obj.set('__ModifiedDate_erp',H.idput_value());
         _obj.set('__id_cloud',{? _TAB.find_key(_opis,) || #_TAB.ID || ~~ ?});
         _obj.set('__id_erp',H.uidref()+_opis);

         {? _obj.save()
         || _s1+=1
         || _s0+=1
         ?}
      ?};

      {? _s1>0 & _s0=0
      || _ret:=1
      ?}
   ?}

|? _env.TabAcr='BNFTP'
|| BNFTP.BNFTT();
   _obj.create();

   _value:=
      {? BNFTP.NOMINAL>0
      || BNFTP.NOMINAL
      |? BNFTT.NOMINAL>0
      || BNFTT.NOMINAL
      || 1
      ?};

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('DateFrom',BNFTP.OD);
   _obj.set('DateTo',BNFTP.DO);
   _obj.set('PayElementCode',$BNFTT.R().RN);
   _obj.set('PayElementValue',_value);
   _obj.set('PayElementDesc',BNFTT.NAZWA);
   _obj.set('BenefitType',BNFTT.AKRONIM);
   _obj.set('__ModifiedDate_erp',BNFTP.idput_value());
   _obj.set('__id_erp',BNFTP.uidref());
   _obj.set('PersonId__id_Erp',BNFTP.P().uidref());

   _ret:=_obj.save()
?};
BNFTT.cntx_pop();
R.cntx_pop();
P.cntx_pop();

_ret


\chr_PersonPayElemModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z przebiegu zatrudnienia - parametr zapytania chr_PersonPayElementModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonPayElem_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_PersonPayElemModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_PersonPayElemModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonPayElementModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonPayElem_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_PersonPayElemDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonPayElementDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_cfg:=exec('chr_PersonPayElem_cfg','portal_method_chr',_env.TabAcr);

{? _env.Type=exec('mwac_type_send','synchro') & _env.TabAcr='H'
:: Obsługa "wysyłania" rekordu tabeli H w serwisie usuwającym rekordy.
|| _ret:=~~;
   _uidref:=_env.Param;
   H.cntx_psh();
   H.prefix();
   {? H.seek(_uidref)
   || _TAB:=exec('get_id','#sync_id',_cfg.id,_uidref);
::    Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem tabeli H).
::    W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
      {? _TAB.first()
      || {!
         |? {? (',S1,S2,S3,'*',%1,' [_TAB.OPIS] & ($('H.'+_TAB.OPIS))()>0) |
               (_TAB.OPIS='KUP' & ',K,P,G,'*',%1,' [H.PAT])
::             Jeżeli w odpowiednim polu tabeli H dane występują, to tego rekordu nie usuwamy - a więc usuwamy go z
::             listy rekordów do usunięcia.
            || _TAB.del()
            || _TAB.next()
            ?}
         !}
      ?};
      {? _TAB.first()
      || _ret:=params_exec('Delete_args','portal_core',_cfg.id,_TAB)
      || KOMM.add('Wiersz nie wymagał usunięcia.'@)
      ?}
   ?};
   H.cntx_pop();
   _ret
|| params_exec('Delete_args','portal_core',_cfg.id)
?}


\chr_PersonPayElemDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonPayElementDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonPayElem_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonLoan (pożyczki).
::======================================================================================================================


\chr_PersonLoanRefCode
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dla bieżącego rekordu tabeli K formuła zwraca "numer pożyczki".
::   WE:
::   WY: Numer pożyczki.
::----------------------------------------------------------------------------------------------------------------------
'P/%1/%2/%3' [$K.DU,$K.PO().RN,$K.ref()+8]


\chr_PersonLoanModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonLoanModify.
::       Kontekst wywołania - rekord tabeli K (tutaj: tylko pożyczki).
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;
{? K.KP<0 & K.KS<=0
|| P.cntx_psh();
   P.prefix();
   K.P();
   {? P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
   || R.cntx_psh();
      R.prefix();
      K.PO();

      _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('LoanRefCode',exec('chr_PersonLoanRefCode','portal_method_chr'));
      _obj.set('LoanDesc',R.RT);
      _obj.set('DateOfLoan',K.DU);
      _obj.set('DateOfRepayBegin',K.DR);
      _obj.set('LoanAmount',-K.KP);
      _obj.set('LoanRate',K.PR);
      _obj.set('InstalmentCount',K.MR);
      _obj.set('InstalmentAmount',K.KR);
      _obj.set('__ModifiedDate_erp',K.idput_value());
      _obj.set('__id_erp',K.uidref());
      _obj.set('PersonId__id_Erp',P.uidref());

      _ret:=_obj.save();

      R.cntx_pop()
   ?};
   P.cntx_pop()
|| KOMM.add('Wiersz nie dotyczy pożyczki.'@)
?};
_ret


\chr_PersonLoanModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z przebiegu zatrudnienia - parametr zapytania chr_PersonLoanModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonLoanModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_K_P_ID',_formula_json)


\chr_PersonLoanModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonLoanModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_K_P_ID')


\chr_PersonLoanDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonLoanDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_K_P_ID')


\chr_PersonLoanDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonLoanDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_K_P_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonLoanRepayment -> chr_PersonLoanR (spłata [rozliczenie] pożyczki).
::======================================================================================================================


\chr_PersonLoanRModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonLoanRepaymentModify.
::       Kontekst wywołania - rekord tabeli KRE_HIS (tutaj: tylko pożyczki).
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;
K.cntx_psh();
K.prefix();
{? KRE_HIS.KREDYT().KP<0 & K.KS<=0
:: Dla pożyczek kwota początkowa jest ujemna.
|| P.cntx_psh();
   P.prefix();
   K.P();
   {? P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
   || R.cntx_psh();
      R.prefix();

::    Wymyślenie liczby porządkowej (OrderNumber).
      KRE_HIS.cntx_psh();
      KRE_HIS.index('KRE_HIS');
      KRE_HIS.prefix(KRE_HIS.KREDYT,KRE_HIS.DATA);
      _ref:=KRE_HIS.ref();
      _lp:=0;
      {? KRE_HIS.first()
      || {!
         |? {? KRE_HIS.ref()<>_ref
            || _lp+=1;
               KRE_HIS.next()
            ?}
         !}
      ?};
      KRE_HIS.cntx_pop();

      _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('LoanRefCode',exec('chr_PersonLoanRefCode','portal_method_chr'));
      _obj.set('OrderNumber',(KRE_HIS.DATA-K.DR)*10+_lp);
      _obj.set('RepaymentAmount',KRE_HIS.KWOTA);
::    Tylko dla statusu 'Spłacona' kwota jest odejmowana od całkowitego zadłużenia.
      _obj.set('DateOfRepayment',KRE_HIS.DATA);
      _obj.set('RepaymentStatus','Spłacona');
      _obj.set('__ModifiedDate_erp',KRE_HIS.idput_value());
      _obj.set('__id_erp',KRE_HIS.uidref());
      _obj.set('InterestAmount',0);
      _obj.set('PersonId__id_Erp',P.uidref());

      _ret:=_obj.save();

      R.cntx_pop()
   ?};
   P.cntx_pop()
|| KOMM.add('Wiersz nie dotyczy pożyczki.'@)
?};
K.cntx_pop();
_ret


\chr_PersonLoanRModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z spłatami kredytów - parametr zapytania chr_PersonLoanRepaymentModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonLoanRModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_KRE_HIS_P_ID',_formula_json)


\chr_PersonLoanRModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonLoanRepaymentModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_KRE_HIS_P_ID')


\chr_PersonLoanRDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonLoanRepaymentDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_KRE_HIS_P_ID')


\chr_PersonLoanRDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonLoanRepaymentDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_KRE_HIS_P_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonContribution -> chr_PersonContrib (wkłady).
::======================================================================================================================


\chr_PersonContribModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonContributionModify.
::       Kontekst wywołania - rekord tabeli K (tutaj: tylko wkłady).
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;
{? K.KP>=0 & K.KS>=0
|| P.cntx_psh();
   P.prefix();
   K.P();
   {? P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
   || R.cntx_psh();
      R.prefix();
      K.PO();

      _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('FundType',$R.RN);
      _obj.set('FundTypeName',R.RT);
      _obj.set('DateOfJoinTheFund',K.DU);
      _obj.set('RegFeeAmount',K.KP);
      _obj.set('MonthlyAmount',K.KR);
      _obj.set('CurrentTotalAmount',K.KS);
      _obj.set('__ModifiedDate_erp',K.idput_value());
      _obj.set('__id_erp',K.uidref());
      _obj.set('PersonId__id_Erp',P.uidref());

      _ret:=_obj.save();

      R.cntx_pop()
   ?};
   P.cntx_pop()
|| KOMM.add('Wiersz nie dotyczy wkładu.'@)
?};
_ret


\chr_PersonContribModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z wkładami - parametr zapytania chr_PersonContributionModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonContribModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_K_W_ID',_formula_json)


\chr_PersonContribModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonContributionModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_K_W_ID')


\chr_PersonContribDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonContributionDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_K_W_ID')


\chr_PersonContribDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonContributionDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_K_W_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonContributionPay -> chr_PersonContribP (wpłaty wkładu).
::======================================================================================================================


\chr_PersonContribPModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonContributionPayModify.
::       Kontekst wywołania - rekord tabeli KRE_HIS (tutaj: tylko wkłady).
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;
K.cntx_psh();
K.prefix();
{? KRE_HIS.KREDYT().KP>=0 & K.KS>=0
|| P.cntx_psh();
   P.prefix();
   K.P();
   {? P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
   || R.cntx_psh();
      R.prefix();
      K.PO();

::    Wymyślenie liczby porządkowej (OrderNumber).
      KRE_HIS.cntx_psh();
      KRE_HIS.index('KRE_HIS');
      KRE_HIS.prefix(KRE_HIS.KREDYT,KRE_HIS.DATA);
      _ref:=KRE_HIS.ref();
      _lp:=0;
      {? KRE_HIS.first()
      || {!
         |? {? KRE_HIS.ref()<>_ref
            || _lp+=1;
               KRE_HIS.next()
            ?}
         !}
      ?};
      KRE_HIS.cntx_pop();

      _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('FundType',$R.RN);
      _obj.set('OrderNumber',(KRE_HIS.DATA-K.DR)*10+_lp);
      _obj.set('PayAmount',KRE_HIS.KWOTA);
      _obj.set('DateOfPay',KRE_HIS.DATA);
      _obj.set('__ModifiedDate_erp',KRE_HIS.idput_value());
      _obj.set('__id_erp',KRE_HIS.uidref());
      _obj.set('PersonContributionId__id_erp',K.uidref());
      _obj.set('PersonId__id_Erp',P.uidref());

      _ret:=_obj.save();

      R.cntx_pop()
   ?};
   P.cntx_pop()
|| KOMM.add('Wiersz nie dotyczy wkładu.'@)
?};
K.cntx_pop();
_ret


\chr_PersonContribPModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z wpłatami wkładu - parametr zapytania chr_PersonContributionPayModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonContribPModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_KRE_HIS_W_ID',_formula_json)


\chr_PersonContribPModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonContributionPayModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_KRE_HIS_W_ID')


\chr_PersonContribPDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonContributionPayDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_KRE_HIS_W_ID')


\chr_PersonContribPDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonContributionPayDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_KRE_HIS_W_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonContact (kontakt).
::======================================================================================================================


\chr_PersonContact_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='P_DODINF'
   || 'PORTAL_P_DODINF_ID'
   |? _a='USERS'
   || 'PORTAL_USERS_MAIL_ID'
   || ''
   ?};
_ret


\chr_PersonContactModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonContactModify.
::       Kontekst wywołania - rekord tabeli P_DODINF lub USERS.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja (tylko dla I_USERS).
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~ (tylko dla I_USERS).
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_cfg:=exec('chr_PersonContact_cfg','portal_method_chr',_env.TabAcr);

_ret:=0;
P.cntx_psh();
P.prefix();
{? _env.TabAcr='P_DODINF'
|| SLO_KOD.cntx_psh();
   SLO_KOD.prefix();
   SLO_RODZ.cntx_psh();
   SLO_RODZ.prefix();
   {? P_DODINF.RODZ().SLO_KOD().KOD<>'KONTAKT'
   || KOMM.add('Rodzaj informacji nieprezentowany na portalu.'@)
   |? P_DODINF.P();
      P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
   || _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('DateFrom',P_DODINF.OD);
      _obj.set('DateTo',P_DODINF.DO);
      _obj.set('ContactType',P_DODINF.RODZ().NAZWA);
      _obj.set('ContactText',P_DODINF.TRESC);
      _obj.set('OrderNumber',SLO_RODZ.LP);
      _obj.set('__ModifiedDate_erp',P_DODINF.idput_value());
      _obj.set('__id_erp',P_DODINF.uidref());
      _obj.set('PersonId__id_Erp',P_DODINF.P().uidref());

      _ret:=_obj.save()
   ?};
   SLO_RODZ.cntx_pop();
   SLO_KOD.cntx_pop()

|? _env.TabAcr='USERS'
|| {? USERS.AKT='T' & USERS.OSOBA<>null() & USERS.EMAIL<>''
   || _tab:=type_of(_TAB_ID)<>type_of(~~);
      {? _tab
      || _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
         _TAB_ID.cntx_psh();
         _TAB_ID.index(_ndx)
      ?};
      _hash:=hash(USERS.EMAIL);
::    Adres mailowy ma ustalony typ = 'E-mail'.
::    Dla adresu mailowego z użytkownika przyjmijmy stałą datę początkową i otwartą datę końcową.
::    Nie musimy wysyłać OrderNumber, ponieważ miejsce prezentacji tego pola jest ustalone.
      P.index('OSOZATR');
      P.prefix(exec('firma','ustawienia'),USERS.OSOBA);
      {? P.first()
      || {!
         |? {? P.PORTAL<>'T'
            || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
               P.next()
            |? _tab & _TAB_ID.find_key(P.uidref()+'|'+_hash,)
            || KOMM.add('E-mail nie wymagał aktualizacji.'@);
               P.next()
            || _obj.create();

               _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
               _obj.set('DateFrom',date(2020,1,1));
               _obj.set('ContactType','E-mail');
               _obj.set('ContactText',USERS.EMAIL);
::               _obj.set('OrderNumber');
               _obj.set('__ModifiedDate_erp',USERS.idput_value());
               _obj.set('__id_erp',USERS.uidref()+P.uidref()+'|'+_hash);
               _obj.set('PersonId__id_Erp',P.uidref());

               _ret:=_obj.save();
               _ret & P.next()
            ?}
         !}
      ?};
      {? _tab
      || _TAB_ID.cntx_pop();
         _TAB_ID.ndx_drop(_ndx)
      ?}
   || KOMM.add('Użytkownik nieprezentowany na portalu.')
   ?}
?};
P.cntx_pop();

_ret


\chr_PersonContactModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja kontaktu - parametr zapytania chr_PersonContactModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonContact_cfg','portal_method_chr',_env.TabAcr);
{? _env.TabAcr='USERS'
|| _formula_json:="params_exec('chr_PersonContactModify_json','portal_method_chr',_a,_b,_c,_d)";
   params_exec('Modify_args','portal_core',_cfg.id,_formula_json,1)
|| _formula_json:="params_exec('chr_PersonContactModify_json','portal_method_chr',_a,_b,~~,~~)";
   params_exec('Modify_args','portal_core',_cfg.id,_formula_json)
?}


\chr_PersonContactModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonContactModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonContact_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_PersonContactDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonContactDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonContact_cfg','portal_method_chr',_env.TabAcr);

{? _env.Type=exec('mwac_type_send','synchro')
|| _ret:=~~;
   {? _env.TabAcr='USERS'
   || _uidref:=_env.Param;
      USERS.cntx_psh();
      USERS.prefix();
      {? USERS.seek(_uidref)
      || _hash:=hash(USERS.EMAIL);
         _TAB:=exec('get_id','#sync_id',_cfg.id,_uidref);
         {? _TAB.first()
         || P.cntx_psh();
            P.prefix();
            {!
            |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T' & (49-_TAB.OPIS)=_hash
               || _TAB.del()
               || _TAB.next()
               ?}
            !};
            P.cntx_pop();
            {? _TAB.first()
            || _ret:=params_exec('Delete_args','portal_core',_cfg.id,_TAB)
            || KOMM.add('Wiersz nie wymagał usunięcia.'@)
            ?}
         ?}
      ?};
      USERS.cntx_pop()
   ?};
   _ret
|| params_exec('Delete_args','portal_core',_cfg.id)
?}


\chr_PersonContactDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonContactDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonContact_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - chr_QuestionCategory -> chr_QuestionCat (kategorie pytań do działu kadr).
::======================================================================================================================


\chr_QuestionCatModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_QuestionCategoryModify.
::       Kontekst wywołania - rekord tabeli BIPKAT.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

{? ~(',KDR,OGL_PYT,ULP_PYT,'*',%1,'[BIPKAT.FUNKC])
|| KOMM.add('Wiersz nieobsługiwany przez metodę.'@);
   return(0)
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('QuestCategoryName',BIPKAT.NAZWA);
_obj.set('OrderNumber',#BIPKAT.ref());
_obj.set('__ModifiedDate_erp',BIPKAT.idput_value());
_obj.set('__id_erp',BIPKAT.uidref());
_obj.set('QuestionCategory','%1^%2'[BIPKAT.FUNKC,BIPKAT.KOD]);
:: Flaga IsAdsImprovementCategory - Czy kategoria dla ulepszeń i ogłoszeń? (tinyint NOT NULL)
:: przyjmuje wartości:
:: 0 - kategoria nie dotyczy ogłoszeń i ulepszeń,
:: 1 - kategoria dotyczy ogłoszeń,
:: 2 - kategoria dotyczy ulepszeń.
_ogulp:=0;
{? (',OGL_PYT,ULP_PYT,'*',%1,'[BIPKAT.FUNKC])>0
|| _ogulp:=1+(BIPKAT.FUNKC='ULP_PYT')
?};
_obj.set('IsAdsImprovementCategory',_ogulp);

_obj.save()


\chr_QuestionCatModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja kategorii pytań do działu kadr - parametr zapytania chr_QuestionCategoryModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_QuestionCatModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_BIPKAT_KDR_ID',_formula_json)


\chr_QuestionCatModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_QuestionCategoryModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_BIPKAT_KDR_ID')


\chr_QuestionCatDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_QuestionCategoryDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_BIPKAT_KDR_ID')


\chr_QuestionCatDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_QuestionCategoryDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_BIPKAT_KDR_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_Question (pytania do działu kadr: wątek).
::======================================================================================================================


\chr_QuestionModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_QuestionModify.
::       Kontekst wywołania - rekord tabeli BIPPYTN.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

BIPKAT.cntx_psh();
BIPKAT.prefix();
_funkc:=BIPPYTN.BIPKAT().FUNKC;
_kod:=BIPKAT.KOD;
BIPKAT.cntx_pop();
_pomin:=0;
_idErp:='';
:: Sprawdzenie czy ogłoszenie/ulepszenie prezentowane na portalu:
{? (',OGL_PYT,ULP_PYT,'*',%1,'[_funkc])
|| BIPULP.cntx_psh();
   BIPULP.index('ZZ_DOK');
   BIPULP.prefix(BIPPYTN.NP_DOK,BIPPYTN.ZZ_LINK);
   _pomin:=(BIPULP.first() & BIPULP.PORTAL<>'T');
   {? ~_pomin
   || _idErp:=BIPULP.uidref()+BIPULP.HASH
   ?};
   BIPULP.cntx_pop()
|? (',KDR,'*',%1,'[_funkc])
:: Sprawdzenie czy wątek pytania do działu kadr znajduję się w okresie retencji:
|| _rtn:=exec('retentionQuestion','portal_lib');
   _pomin:=_rtn<>0 & ({? BIPPYTN.DTOP>BIPPYTN.DTOO || BIPPYTN.DTOP~1 || BIPPYTN.DTOO~1 ?})<((date()~1)-_rtn)
|| KOMM.add('Wiersz nieobsługiwany przez metodę.'@);
   return(0)
?};
{? _pomin
|| KOMM.add('Wątek znajdujący się poza okresem retencji.'@);
   return(0)
?};

P.cntx_psh();
P.prefix();
BIPPYTN.P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.');
   _ret:=0
|| _obj.create();
   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('CloseDate',BIPPYTN.DTZ,BIPPYTN.GDZ);
   _obj.set('QuestionDate',BIPPYTN.DTO,BIPPYTN.GDO);
   _obj.set('QuestionCategory','%1^%2'[_funkc,_kod]);
   _obj.set('__ModifiedDate_erp',BIPPYTN.idput_value());
   _obj.set('__id_erp',BIPPYTN.uidref());
   _obj.set('QuestionTitle',BIPPYTN.TYTUL);
   _obj.set('PersonId__id_Erp',P.uidref());
   {? (',OGL_PYT,ULP_PYT,'*',%1,'[_funkc])
   || _obj.set('AdsImprovementId__id_Erp',_idErp)
   ?};

   _ret:=_obj.save()
?};
P.cntx_pop();

_ret


\chr_QuestionModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja wątku pytania do działu kadr - parametr zapytania chr_QuestionModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_QuestionModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_BIPPYTN_KDR_ID',_formula_json)


\chr_QuestionModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_QuestionModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_BIPPYTN_KDR_ID')


\chr_QuestionGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobranie wątków - parametr zapytania chr_QuestionGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_QuestionGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła aktualizująca dane w tabeli BIPPYTN na podstawie wyniku zapytania chr_QuestionGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu - dla akcji 'add', '' - dla akcji 'put' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
:: Teoretycznie na portalu nie ma usuwania ...
|| return()
?};

_pid:=_obj.getValue('PersonId');
_pref:=exec('getPref','portal_core',_pid);
{? _pref=null()
|| KOMM.error('Odnalezienie zapisu dla %1=%2 nie powiodło się.'@ ['PersonId',$_pid],0);
   return()
?};

_funkc:=_kat:='';
_Category:=spli_str(_obj.getValue('QuestionCategory'),'^');
{? obj_len(_Category)
|| _funkc:=_Category[1];
   _kat:=_Category[2];
   obj_del(_Category)
|| obj_del(_Category);
   return(~~)
?};
BIPKAT.cntx_psh();
BIPKAT.index('KOD');
BIPKAT.prefix(exec('ref_firma','ustawienia'),_funkc,);
_katref:={? BIPKAT.find_key(_kat) || BIPKAT.ref() || null() ?};
BIPKAT.cntx_pop();
{? _katref=null()
|| KOMM.error('Odnalezienie kategorii pytań "%1" nie powiodło się.'@ [_kat],0);
   return()
?};

_open:=exec('getDateTime','portal_core',_obj.getValue('QuestionDate'));
_close:=exec('getDateTime','portal_core',_obj.getValue('CloseDate'));

{? _act='add'
|| BIPPYTN.blank();
   BIPPYTN.P:=_pref
|? BIPPYTN.P<>_pref
|| KOMM.error('Zmiana twórcy wątku.'@,0);
   return()
?};

:: Podpięcie ZZ_DOKów dla ogłoszeń i ulepszeń:
{? ',ULP_PYT,OGL_PYT,'*',%1,'[_funkc]
|| _adImId:=_obj.getValue('AdsImprovementId');
   _ogulRef:=
      {? type_of(_adImId)=type_of(0)
      || exec('get_id_erp','portal_core','PORTAL_BIPULP_OGUL_ID',_adImId)
      || null()
      ?};
   BIPULP.cntx_psh();
   BIPULP.prefix();
   {? _ogulRef=null() | ~BIPULP.seek(_ogulRef)
   || KOMM.error('Znalezienie ogłoszenia / ulepszenia nie powiodło się.'@,0);
      BIPULP.cntx_pop();
      return()
   ?};
   BIPPYTN.ZZ_LINK:=BIPULP.ZZ_DOK;
   BIPPYTN.NP_DOK:=BIPULP.NP_DOK;
   BIPULP.cntx_pop()
?};

BIPPYTN.BIPKAT:=_katref;
BIPPYTN.DTO:=_open.date;
BIPPYTN.GDO:=_open.time;
BIPPYTN.DTZ:=_close.date;
BIPPYTN.GDZ:=_close.time;
BIPPYTN.TYTUL:={? ',ULP_PYT,OGL_PYT,'*',%1,'[_funkc]
               || 'Prywatne pytania do autora'
               || _obj.getValue('QuestionTitle')
               ?};
{? _act='add'
|| {? BIPPYTN.add()
   || BIPPYTN.uidref()
   || ~~
   ?}
|| {? BIPPYTN.put()
   || ''
   || ~~
   ?}
?}


\chr_QuestionGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_QuestionGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli BIPPYTN.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_BIPPYTN_KDR_ID',
   "exec('chr_QuestionGet_update','portal_method_chr',_a,_b)")


\chr_QuestionDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_QuestionDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_id:='PORTAL_BIPPYTN_KDR_ID';

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _DEL:=exec('get_id','#sync_id',_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.

   {? ~_DEL.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
      return()
   ?};

   _del:=0;
   BIPPYTN.cntx_psh();
   BIPPYTN.prefix();
:: Sprawdzenie czy ogłoszenie/ulepszenie prezentowane na portalu:
   {? BIPPYTN.seek(_uidref)
   || BIPULP.cntx_psh();
      BIPULP.index('ZZ_DOK');
      BIPULP.prefix(BIPPYTN.NP_DOK,BIPPYTN.ZZ_LINK);
      _del:=(BIPULP.first() & BIPULP.PORTAL<>'T');
      BIPULP.cntx_pop()
   ?};
   BIPPYTN.cntx_pop();

   {? _del
   || params_exec('Delete_args','portal_core',_id,_DEL)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}
|| params_exec('Delete_args','portal_core',_id)
?}


\chr_QuestionDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_QuestionDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_BIPPYTN_KDR_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_QuestionDetail (pytania do działu kadr: treść).
::======================================================================================================================


\chr_QuestionDetailModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_QuestionDetailModify.
::       Kontekst wywołania - rekord tabeli BIPPYTP.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

P.cntx_psh();
P.prefix();
BIPKAT.cntx_psh();
BIPKAT.prefix();
BIPPYTN.cntx_psh();
BIPPYTN.prefix();
_funkc:=BIPPYTP.BIPPYTN().BIPKAT().FUNKC;
_pomin:=1;
{? BIPPYTN.P().PORTAL<>'T'
|| KOMM.add('Twórca wątku nieprezentowany na portalu.'@)
|? (',OGL_PYT,ULP_PYT,'*',%1,'[_funkc])
:: Sprawdzenie czy ogłoszenie/ulepszenie prezentowane na portalu:
|| BIPULP.cntx_psh();
   BIPULP.index('ZZ_DOK');
   BIPULP.prefix(BIPPYTN.NP_DOK,BIPPYTN.ZZ_LINK);
   {? ~BIPULP.first()
   || KOMM.error('Nie znaleziono nagłówka ogłoszenia / ulepszenia.'@,0)
   |? BIPULP.PORTAL<>'T'
   || KOMM.add('Właściciel ogłoszenia / ulepszenia nieprezentowany na portalu.')
   || _pomin:=0
   ?};
   BIPULP.cntx_pop()
|? (',KDR,'*',%1,'[_funkc])
:: Sprawdzenie czy wątek pytania do działu kadr znajduje się w okresie retencji:
|| _rtn:=exec('retentionQuestion','portal_lib');
   {? _rtn<>0 & ({? BIPPYTN.DTOP>BIPPYTN.DTOO || BIPPYTN.DTOP~1 || BIPPYTN.DTOO~1 ?})<((date()~1)-_rtn)
   || KOMM.add('Pytanie poza okresem retencji.'@)
   || _pomin:=0
   ?}
|| KOMM.add('Wiersz nieobsługiwany przez metodę.'@)
?};
{? ~_pomin
|| _QID:=exec('get_id','portal_core','PORTAL_BIPPYTN_KDR_ID',BIPPYTN.uidref())
?};
BIPPYTN.cntx_pop();
BIPKAT.cntx_pop();
P.cntx_pop();
{? _pomin
|| return(0)
|? ~_QID.first()
|| KOMM.error('Nie znaleziono identyfikatora pytania.'@,0);
   return(0)
?};

P.cntx_psh();
P.prefix();
BIPPYTP.P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _ret:=0

|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('QuestionId',#_QID.ID);
   _obj.set('QuestDetailDate',BIPPYTP.DT,BIPPYTP.GD);
   _obj.set('QuestionDetail',exec('strcut','#string',BIPPYTP.memo_txt(,1,'TRESC'),6000,1));
   _obj.set('PersonId',exec('getPid','portal_core',P.uidref()));
   _obj.set('IsPhoneAnswer',BIPPYTP.TEL='T');
   {? BIPPYTP.ZAL<>null()
   || _hash:=exec('hash','#blob',BIPPYTP.ZAL);
      {? _ext=_hash
      || _obj.skip_attach()
      || _obj.attach(BIPPYTP.ZAL)
      ?}
   || _hash:=''
   ?};
   _obj.set('__ModifiedDate_erp',BIPPYTP.idput_value());
   _obj.set('__id_erp',BIPPYTP.uidref()+_hash);

   _ret:=_obj.save()
?};
P.cntx_pop();

_ret


\chr_QuestionDetailModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja pytania do działu kadr - parametr zapytania chr_QuestionDetailModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_QuestionDetailModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_BIPPYTP_KDR_ID',_formula_json)


\chr_QuestionDetailModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_QuestionDetailModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_BIPPYTP_KDR_ID')


\chr_QuestionDetailGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobranie wątków - parametr zapytania chr_QuestionDetailGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_QuestionDetailGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła aktualizująca dane w tabeli BIPPYTN na podstawie wyniku zapytania chr_QuestionDetailGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu - dla akcji 'add', '' - dla akcji 'put' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
|| return()
?};

_pid:=_obj.getValue('PersonId');
_pref:=exec('getPref','portal_core',_pid);
{? _pref=null()
|| KOMM.error('Odnalezienie zapisu dla %1=%2 nie powiodło się.'@ ['PortalId',$_pid],0);
   return()
?};

_pytn:=_obj.getValue('QuestionId');
_pytnref:=exec('get_id_erp','portal_core','PORTAL_BIPPYTN_KDR_ID',_pytn);
{? _pytnref=null()
|| KOMM.error('Odnalezienie zapisu dla %1=%2 nie powiodło się.'@ ['QuestionId',$_pytn],0);
   return()
?};

_t_akt:='';
{? _act='add'
|| BIPPYTP.blank();
   BIPPYTP.BIPPYTN:=_pytnref;
   BIPPYTP.P:=_pref;
   BIPPYTP.memo_set(,'TRESC')
|? BIPPYTP.BIPPYTN<>_pytnref
|| KOMM.error('Zmiana wątku.'@,0);
   return()
|? BIPPYTP.P<>_pref
|| KOMM.error('Zmiana autora pytania.'@,0);
   return()
|| _t_akt:=BIPPYTP.memo_txt(,1,'TRESC')
?};

_dt:=exec('getDateTime','portal_core',_obj.getValue('QuestDetailDate'));
BIPPYTP.DT:=_dt.date;
BIPPYTP.GD:=_dt.time;
BIPPYTP.TEL:={? _obj.getValue('IsPhoneAnswer') || 'T' || 'N' ?};

_t_new:=_obj.getValue('QuestionDetail');
:: Ze względu na walidację rekordu tabeli BIPPYTP (i sprawdzanie bufora pola notatnikowego):
BIPPYTP.memo_set(_t_new,'TRESC');

:: Zgodnie z założeniami, pytanie może posiadać co najwyżej JEDEN załącznik.
_ATT:=exec('get_attachments','portal_engine',_obj).ATT;
{? _ATT.first()
|| {? exec('hash','#blob',BIPPYTP.ZAL)<>exec('hash','#blob',_ATT.BLOB)
::    Zmieniamy zawartość pola, jeżeli zmieniła się zawartość pliku. Ponowne podpięcie tego samego pliku jednak
::    zmienia wartość pola, a więc i znacznik modyfikacji rekordu (a tego chcemy uniknąć).
   || BIPPYTP.ZAL:=_ATT.BLOB
   ?}
|| BIPPYTP.ZAL:=null()
?};

{? _act='add'
|| _ret:={? BIPPYTP.add() || BIPPYTP.uidref()+exec('hash','#blob',BIPPYTP.ZAL) || ~~ ?}
|| _ret:={? BIPPYTP.put() || '' || ~~ ?}
?};

{? _ret<>~~
|| {? (_t_akt<>_t_new & ~BIPPYTP.memo_put(,'TRESC'))
::    Metoda memo_put() zmienia znacznik modyfikacji rekordu, nawet jeżeli nie zmieniła się treść notki.
   || _ret:=~~
   ?}
?};

_ret


\chr_QuestionDetailGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_QuestionDetailGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli BIPPYTP.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_BIPPYTP_KDR_ID',
   "exec('chr_QuestionDetailGet_update','portal_method_chr',_a,_b)"
)


\chr_QuestionDetailDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_QuestionDetailDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_id:='PORTAL_BIPPYTP_KDR_ID';

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _DEL:=exec('get_id','#sync_id',_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.

   {? ~_DEL.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
      return()
   ?};

   _del:=0;
   BIPPYTP.cntx_psh();
   BIPPYTP.prefix();
   {? BIPPYTP.seek(_uidref)
   || _del:=_DEL.OPIS<>exec('hash','#blob',BIPPYTP.ZAL);
::    Sprawdzenie czy ogłoszenie/ulepszenie prezentowane na portalu:
      {? ~_del
      || BIPPYTN.cntx_psh();
         BIPPYTN.prefix();
         BIPULP.cntx_psh();
         BIPULP.index('ZZ_DOK');
         BIPULP.prefix(BIPPYTP.BIPPYTN().NP_DOK,BIPPYTN.ZZ_LINK);
         _del:=(BIPULP.first() & BIPULP.PORTAL<>'T');
         BIPULP.cntx_pop();
         BIPPYTN.cntx_pop()
      ?}
   ?};
   BIPPYTP.cntx_pop();
   {? _del
   || params_exec('Delete_args','portal_core',_id,_DEL)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}
|| params_exec('Delete_args','portal_core',_id)
?}


\chr_QuestionDetailDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_QuestionDetailDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_BIPPYTP_KDR_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_KnowledgeBaseCategory -> chr_KnowledgeBCat (kategorie elementów bazy wiedzy).
::======================================================================================================================


\chr_KnowledgeBCatModify_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='BIPKAT'
   || 'PORTAL_BIPKAT_WIEDZA_ID'
   |? _a='BNFTT'
   || 'PORTAL_BNFTT_WIEDZA_ID'
   || ''
   ?};
_ret


\chr_KnowledgeBCatModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_KnowledgeBaseCategoryModify.
::       Kontekst wywołania - rekord tabeli BIPKAT.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_cfg:=exec('chr_KnowledgeBCatModify_cfg','portal_method_chr',_env.TabAcr);

{? _env.TabAcr='BIPKAT' & (',WIEDZA,WDRZ,BLTN,ZAL,'*',%1,'[BIPKAT.FUNKC])
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('Category','%1^%2' [BIPKAT.FUNKC,BIPKAT.KOD]);
   _obj.set('CategoryName',BIPKAT.NAZWA);
   _obj.set('Description',BIPKAT.OPIS);
   _obj.set('IsKnowledgeBase',(',WIEDZA,BLTN,ZAL,'*',%1,'[BIPKAT.FUNKC])>0);
   _obj.set('IsRequest',BIPKAT.WNIOSEK<>null());
   _obj.set('SortOrder',#BIPKAT.ref());
   _obj.set('__ModifiedDate_erp',BIPKAT.idput_value());
   _obj.set('__id_erp',BIPKAT.uidref());
   _obj.set('Icon',BIPKAT.IKONA);
   {? BIPKAT.WNIOSEK
   || ETYPY.cntx_psh();
      ETYPY.prefix();
      _obj.set('RequestType',BIPKAT.WNIOSEK().ID_WP);
      ETYPY.cntx_pop()
   ?};
::   _obj.set('BenefitType',);
   _obj.set('IsEvent',BIPKAT.FUNKC='WDRZ');
   _obj.set('IsNewsletter',BIPKAT.FUNKC='BLTN');
   _obj.set('ShowNotification',BIPKAT.POW_LIST='T');
   _obj.set('ShowPushNotification',BIPKAT.POW_PUSH='T');
:: Czy kategoria zawiera nagłówki przezanczone tylko jednemu odbiorcy:
   _obj.set('IsPersonal',(BIPKAT.FUNKC='ZAL'));
:: Grupa kategorii:
   _obj.set('GroupName',exec('_funkc','portal_bip','NAZWA',BIPKAT.FUNKC));

   _obj.set('IsTutorial',BIPKAT.SAMOUCZ='T');

   _obj.save()

|? _env.TabAcr='BNFTT'
|| _obj.create();

:: Póki nie ma kategorii benefitów, to przyjmujemy, że jedynym wnioskiem, który może być złozony jest wniosek papierowy.
   BIPKAT.cntx_psh();
   BIPKAT.prefix();
   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('Category','%1^%2' [BNFTT.BIPKAT().FUNKC,BNFTT.AKRONIM]);
   _obj.set('CategoryName',BNFTT.NAZ_S);
   _obj.set('Description',exec('strcut','#string',BNFTT.memo_txt(,1,'OPIS'),255,1));
   _obj.set('IsKnowledgeBase',1);
   _obj.set('IsRequest',1);
   _obj.set('SortOrder',#BNFTT.ref());
   _obj.set('__ModifiedDate_erp',BNFTT.idput_value());
   _obj.set('__id_erp',BNFTT.uidref());
   _obj.set('Icon',BNFTT.IKONA);
   _obj.set('RequestType','WniosekPapierowy');
   _obj.set('BenefitType',BNFTT.AKRONIM);
::   _obj.set('ShowNotification',);
::   _obj.set('ShowPushNotification',);
   _obj.set('IsPersonal',0);
   _obj.set('GroupName',exec('_funkc','portal_bip','NAZWA',BIPKAT.FUNKC));
   BIPKAT.cntx_pop();

   _obj.save()
?}


\chr_KnowledgeBCatModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja kategorii pytań do działu kadr - parametr zapytania chr_KnowledgeBaseCategoryModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_KnowledgeBCatModify_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_KnowledgeBCatModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_KnowledgeBCatModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_KnowledgeBaseCategoryModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_KnowledgeBCatModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_KnowledgeBCatDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_KnowledgeBaseCategoryDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_KnowledgeBCatModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_args','portal_core',_cfg.id)


\chr_KnowledgeBCatDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_KnowledgeBaseCategoryDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_KnowledgeBCatModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonWorkSchedule (Harmonogram pracy).
::======================================================================================================================


\chr_PersonWSchedModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: JSON dla zapytania chr_PersonWorkSchedulerModify.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
::_id:=_a;
::_ext:=_b;
::_tab_id:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;
{? ~exec('PKALSYND_mask','pkalsync',PKALSYNC.ROK)
|| KOMM.add('Błąd otwarcia maski.');
   return(_ret)
?};

:: liczba wysłanych dni
_sent:=0;

:: dla celów optymalizacyjnych wyłączamy konieczność sprawdzania odbudowy tabeli dni świątecznych
__KAL.ws.chkRebuild:=0;

:: czy włączone są niepłatne przerwy
_par321:=exec('get_par','#parametr',321,2)='T';

P.cntx_psh();
P.prefix();
_sync_uidref:=PKALSYNC.uidref();
_p_uidref:=PKALSYNC.P().uidref();
_rok:=PKALSYNC.ROK;
PKALSYND.cntx_psh();
PKALSYND.index('SYNC');
PKALSYND.prefix(PKALSYNC.ref());
:: Sprawdzenie okresu retencji kalendarza:
_rtn:=exec('retentionPersonWorkSchedule','portal_lib');
{? _rok<(date()~1)-_rtn
|| KOMM.add('Kalendarz współpracownika poza okresem retencji.'@)
|? P.PORTAL<>'T'
|| KOMM.add('Dane współpracownika nieprezentowanego na portalu.'@)
|? __KAL.set_cal(P.KAL,_rok,1)=0
|| KOMM.add('Brak kalendarza współpracownika dla roku: %1.'@[$_rok])
|? PKALSYND.first()
|| _toSend:=PKALSYND.size();
   {!
   |? {? PKALSYND.SEND
      || _data:=PKALSYND.DATA;
::       na wstępie ustawiamy _ret:=1 aby, móc pętlić np. w przypadku zatrudnienia w trakcie roku
         _ret:=1;
         {? __KAL.get_day(_data)
         || _obj.create();
::         _obj.set('__id_cloud',{? _id || _id || ~~ ?});
            _obj.set('CalDate',_data);
            _dayType:=exec('dayType','pkalsync',KAL_DEF.TYP+KAL_DEF.TYPWS);
            _obj.set('DayType',_dayType);
::          wyliczenie liczby godzin zgodnie z przypisanym kalendarzem
            _hours:=__KAL.w_hours(_data,_data,,'T');
            _obj.set('TotalHours',(*_hours/60));
            _obj.set('IsHoliday',KAL_DEF.TYP<>'R');
            _obj.set('__ModifiedDate_erp',PKALSYND.idput_value());
            _obj.set('__id_erp',_sync_uidref+$PKALSYND.ref());
            _obj.set('TimeFrom',KAL_DEF.DATA,KAL_DEF.POCZATEK);
::          w przypadku niepełnego wymiary czasu pracy wartość KAL_DEF.CZAS może się różnić od __KAL.w_hours()
            {? KAL_DEF.CZAS=_hours
            || _koniec:=KAL_DEF.KONIEC;
               _dataW:=KAL_DEF.DATAW
            || _koniec:=KAL_DEF.POCZATEK+_hours;
               _dataW:=_data;
               {? _koniec>=time(24,0,0)
               || _koniec-=time(24,0,0);
                  _dataW:=(_data+1)
               ?}
            ?};
            _obj.set('TimeTo',_dataW,_koniec);
::          niepłatna przerwa
            {? _par321
            || _obj.set('UnpaidBreakTimeFrom',KAL_DEF.P_DATA,KAL_DEF.P_START);
               _koniec:=KAL_DEF.P_START+KAL_DEF.P_CZAS;
               _dataW:=KAL_DEF.P_DATA;
               {? _koniec>=time(24,0,0)
               || _koniec-=time(24,0,0);
                  _dataW:=(_data+1)
               ?};
               _obj.set('UnpaidBreakTimeTo',_dataW,_koniec)
            ?};
            _obj.set('PersonId__id_erp',_p_uidref);
            _ret:=_obj.save();
::          jeżeli, dla któregoś dnia nie uda się zapisać zmian, to przerywamy wysyłanie danych dla całej paczki
            {? _ret || _sent+=1 || _sent:=0 ?}
         ?};
         _ret & PKALSYND.next()
      || PKALSYND.next()
      ?}
   !};
   {? _sent=0
   || KOMM.add('Nie wysłano żadnego dnia kalendarza współpracownika z roku: %1'@[$_rok])
   || KOMM.add('Wysłano %1 z %2 dni kalendarza współpracownika z roku: %3'@[$_sent,$_toSend,$_rok])
   ?}
?};
PKALSYND.cntx_pop();
P.cntx_pop();
__KAL.ws.chkRebuild:=1;

_sent


\chr_PersonWSchedModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Dodanie/modyfikacja danych
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonWSchedModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_PKALSYNC_ID',_formula_json,1)


\chr_PersonWSchedModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkSchedulerModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_fml_after:="
   _ref:=_b;
   {? PKALSYND.seek(_ref,ref_name(_ref),1)
   || PKALSYND.SEND:=0;
      PKALSYND.put()
   ?}
";
params_exec('Modify_parse','portal_core','PORTAL_PKALSYNC_ID',_fml_after)


\chr_PersonWSchedDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parametr zapytania chr_PersonWorkSchedulerDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_id:='PORTAL_PKALSYNC_ID';

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania" rekordu tabeli PKALSYNC w serwisie usuwającym rekordy.
|| _ret:=~~;
   _uidref:=_env.Param;
   PKALSYNC.cntx_psh();
   PKALSYNC.prefix();
   {? PKALSYNC.seek(_uidref)
   || _TAB:=exec('get_id','#sync_id',_id,_uidref);
::    Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu
::    (związanymi ze zmienionym rekordem tabeli PKALSYNC).
::    W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
      {? _TAB.first()
      || {!
         |? _pozostaw:=1;
            {? exec('PKALSYND_mask','pkalsync',PKALSYNC.ROK)
            || PKALSYND.prefix();
               {? type_of(ref_tab(16+_TAB.OPIS))<>type_of(~~)
               || _pozostaw:=PKALSYND.seek(16+_TAB.OPIS)
               ?}
            ?};
            {? _pozostaw
            || _TAB.del()
            || _TAB.next()
            ?}
         !}
      ?};
      {? _TAB.first()
      || _ret:=params_exec('Delete_args','portal_core',_id,_TAB)
      || KOMM.add('Wiersz nie wymagał usunięcia.'@)
      ?}
   ?};
   PKALSYNC.cntx_pop();
   _ret
|| params_exec('Delete_args','portal_core',_id)
?}


\chr_PersonWSchedDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkSchedulerDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PKALSYNC_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_AbsenceType (typ nieobecności).
::======================================================================================================================


\chr_AbsenceTypeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_AbsenceTypeModify.
::       Kontekst wywołania - rekord tabeli R.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

{? R.RK<>'N'
|| KOMM.add('Rubryka nie jest nieobecnością.'@);
   return(0)
?};

_okol:=__RUB.sys_attr(R.RN,1161);
_loop:=_id=0 & _ext='' & _okol;

_ret:=0;
_dt:=date();
{! _lp:=1 .. _loop+1
|? _delta:={? _okol & 1+_ext='D' || #(1-_ext) || _lp ?}-1;
   _map:=exec('merit2portal','portal_nieobecnosci',R.ref(),_dt,_dt+_delta);
   {? ~_map.ok
   || KOMM.error('Odnalezienie mapowania nieobecności %1 - %2 nie powiodło się.'@[$R.RN,R.RT],0)
   |? _map.SubType=~~ | _map.ext='*'
::    W _map znajduje się mapowanie zarówno typu jak i podtypu. Wysyłamy, jeżeli albo nie ma podtypu, albo jest to
::    "rekord główny" dla kategorii nieobecności.
   || _NBKOLOR:=exec('kolory','portal_nieobecnosci',R.RN);

      _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('AbsenceType',_map.Type);
      _obj.set('AbsenceTypeName',_map.TypeName);
      _obj.set('__ModifiedDate_erp',R.idput_value());
      _obj.set('__id_erp',R.uidref()+_map.ext);
      _obj.set('OrderNumber',R.LP*2+_delta-1);
      _obj.set('AbsenceVariant',_map.Variant);
      _obj.set('CanBePlanned',_map.TypeTech='UW' | _map.TypeTech='UD');
      {? _NBKOLOR.TAB.find_key(R.RN)
      || _obj.set('AbsTypeItemColor',exec('dec2hex','#color',_NBKOLOR.TAB.KOLOR))
      ?};
      _obj.set('IsLimitedLeave',_map.TypeTech='UW' | _map.TypeTech='UD' | __RUB.sys_attr(R.RN,1931));
      _obj.set('IsLeaveThatCanBePartOfDay',__RUB.sys_attr(R.RN,199));
      _obj.set('CanBeTakenInAdvance',~__RUB.sys_attr(R.RN,1933));
      _obj.set('IsAmountOfLeaveInWorkdays',
         (type_of(_map.TypeTech)=type_of('') & ',UW,UO,U1,U2,UD,'*',%1,'[_map.TypeTech]) | __RUB.sys_attr(R.RN,152)
      );
      _obj.set('RequiredChildAgeTo',{? _map.TypeTech='UO' || 14 || ~~ ?});
      _obj.set('AbsenceTypeTech',_map.TypeTech);
      _obj.set('IsOnPersonAbsenceRequest',_map.RequestType='T');
      _obj.set('RangeOfDaysBackForRequest',_map.RangeOfDaysBackForRequest);
      _obj.set('IsAttachmentEnabled',_map.IsAttachmentEnabled);
      _obj.set('AdditionalInfo',{? _map.SubType=~~ || _map.AdditionalInfo || ~~ ?});
::      _obj.set('IsParentalLeave',); Urlop wychowawczy - na przyszłość.

      _ret:=_obj.save();

      obj_del(_NBKOLOR)
   ?};
   obj_del(_map);

   _ret

!};
_ret


\chr_AbsenceTypeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z typem nieobecności - parametr zapytania chr_AbsenceTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_AbsenceTypeModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_R_NT_ID',_formula_json)


\chr_AbsenceTypeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_AbsenceTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_R_NT_ID')


\chr_AbsenceTypeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_AbsenceTypeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_R_NT_ID')


\chr_AbsenceTypeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_AbsenceTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_R_NT_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_AbsenceSubType (podtyp nieobecności).
::======================================================================================================================


\chr_AbsenceSubTypeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_AbsenceSubTypeModify.
::       Kontekst wywołania - rekord tabeli R.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

{? R.RK<>'N'
|| KOMM.add('Rubryka nie jest nieobecnością.'@);
   return(0)
?};

_dt:=date();
_map:=exec('merit2portal','portal_nieobecnosci',R.ref(),_dt,_dt);
{? ~_map.ok
|| KOMM.error('Odnalezienie mapowania nieobecności %1 - %2 nie powiodło się.'@[$R.RN,R.RT],0);
   return(0)
|? _map.SubType=~~
|| KOMM.add('Nieobecność nie ma zdefiniowanych podtypów.'@);
   return(0)
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('AbsenceType',_map.Type);
_obj.set('AbsenceSubType',_map.SubType);
_obj.set('AbsenceSubTypeName',_map.SubTypeName);
_obj.set('OrderNumber',R.LP);
_obj.set('__ModifiedDate_erp',R.idput_value());
_obj.set('__id_erp',R.uidref());
_obj.set('AbsenceSubtypeTech',_map.SubtypeTech);
_obj.set('IsOnPersonAbsenceRequest',_map.RequestSubType='T');
_obj.set('AdditionalInfo',_map.AdditionalInfo);
_obj.set('RangeOfDaysBackForRequest',_map.RangeOfDaysBackForRequest);

_ret:=_obj.save();

_ret


\chr_AbsenceSubTypeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja danych z podtypem nieobecności - parametr zapytania chr_AbsenceSubTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_AbsenceSubTypeModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_R_NP_ID',_formula_json)


\chr_AbsenceSubTypeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AbsenceSubTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_R_NP_ID')


\chr_AbsenceSubTypeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_AbsenceSubTypeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_R_NP_ID')


\chr_AbsenceSubTypeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AbsenceSubTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_R_NP_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonAbsence (nieobecności).
::======================================================================================================================


\chr_PersonAbsenceModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonAbsenceModify.
::       Kontekst wywołania - rekord tabeli N.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

{? N.KOR<>'N'
|| KOMM.add('Nieobecność korygowana nie jest synchronizowana.'@);
   return(0)
?};

:: Sprawdzenie czy nieobceność znajduje się w okresie retencji:
_rtn:=exec('retentionPersonAbsence','portal_lib');
{? _rtn<>0 & N.ROK<((date()~1)-_rtn)
|| KOMM.add('Nieobecność starsza niż zakładany okres retencji.'@);
   return(0)
?};

R.cntx_psh();
R.prefix();
P.cntx_psh();
P.prefix();
N.P();

_ret:=0;
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@)

|? _map:=exec('merit2portal','portal_nieobecnosci',N.NB,N.OD,N.DO);
   ~_map.ok
|| KOMM.error('Odnalezienie mapowania nieobecności %1 - %2 nie powiodło się.'@[$N.NB().RN,R.RT],0)

|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('DateFrom',N.OD);
   _obj.set('DateTo',N.DO);
   {? N.PARTDAY='T'
   || __KAL.set_cal(P.KAL);
      _timeFrom:={? __KAL.get_day(N.OD) || KAL_DEF.POCZATEK || *0 ?};
      _obj.set('IsPartOfDayAbsence',1);
      _obj.set('TimeFrom',N.OD,_timeFrom);
      _timeTo:=_timeFrom+60*N.NG;
      _dateTo:={? _timeTo>=time(24,0,0)
               || _timeTo-=time(24,0,0);
                  N.DO+1
               || N.DO
               ?};
      _obj.set('TimeTo',_dateTo,_timeTo)
   ?};
   _obj.set('AbsenceType',_map.Type);
   _obj.set('AbsenceTypeName',_map.TypeName);
   _obj.set('AbsenceSubType',_map.SubType);
   _obj.set('AbsenceSubTypeName',_map.SubTypeName);
   _obj.set('AbsenceVariant',_map.Variant);
   _obj.set('AbsenceDays',{? __RUB.sys_attr(N.NB,152,N.OD) || N.NK || N.NR ?});
   _obj.set('AbsenceHours',N.NG);
   _obj.set('__ModifiedDate_erp',N.idput_value());
   _obj.set('__id_erp',N.uidref());
   _obj.set('IsOverdueLeave',exec('zalegly','portal_nieobecnosci'));
   _obj.set('IsLeaveOnRequest',__RUB.sys_attr(N.NB,1111,N.OD));
   _obj.set('PersonId__id_Erp',P.uidref());

   _ret:=_obj.save()
?};

P.cntx_pop();
R.cntx_pop();

_ret


\chr_PersonAbsenceModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z nieobecnością - parametr zapytania chr_PersonAbsenceModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonAbsenceModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_N_ID',_formula_json)


\chr_PersonAbsenceModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAbsenceModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_N_ID')


\chr_PersonAbsenceDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonAbsenceDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _DEL:=exec('get_id','#sync_id','PORTAL_N_ID',_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.

   {? ~_DEL.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Nieobecność nie została jeszcze wysłana na portal.'@);
      return()
   ?};

   _del:=0;
:: Sprawdzenie czy nieobceność znajduje się w okresie retencji:
   _rtn:=exec('retentionPersonAbsence','portal_lib');
   {? _rtn<>0
   || N.cntx_psh();
      N.prefix();
      {? N.seek(_uidref)
      || _del:=(N.ROK<((date()~1)-_rtn))
      ?};
      N.cntx_pop()
   ?};
   {? _del
   || params_exec('Delete_args','portal_core','PORTAL_N_ID',_DEL)
   || KOMM.add('Nieobecność nie wymagała usunięcia.'@);
      ~~
   ?}

|| params_exec('Delete_args','portal_core','PORTAL_N_ID')
?}


\chr_PersonAbsenceDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAbsenceDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_N_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonLeaveLimit -> chr_PersonAbsLimit (limity nieobecności).
::======================================================================================================================


\chr_PersonAbsLimit_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='KART_URL'
   || 'PORTAL_KART_URL_ID'
   |? _a='DS'
   || 'PORTAL_DS_ID'
   || ''
   ?};
_ret


\chr_PersonAbsLimitModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_PersonLeaveLimitModify.
::       Kontekst wywołania - rekord tabeli KART_URL lub DS.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_cfg:=exec('chr_PersonAbsLimit_cfg','portal_method_chr',_env.TabAcr);

_ret:=0;
P.cntx_psh();
P.prefix();
_cfg.TAB.P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@)
|| R.cntx_psh();
   R.prefix();
   _ok:=1;
   {? _env.TabAcr='KART_URL'
   || _limit:=exec('limit_ku','portal_nieobecnosci');
      _lwg:="2";
      _nz:="int(_a.NZD)";
      _pierwszy:=_limit.pierwszy

   |? _env.TabAcr='DS'
   || _limit:=exec('limit_ds','portal_nieobecnosci');
      _lwg:="_a.TYP='G'";
      _nz:="~~";
      _pierwszy:=0

   || _ok:=0
   ?};

   {? _ok & _limit.TAB.first()
   || _TAB:=_limit.TAB;
      _rn:=-1;
      _map:=obj_new('ok');
      _map.ok:=0;
      {!
      |? {? _rn<>_TAB.RN
         || _rn:=_TAB.RN;
            obj_del(_map);
            _map:=exec('merit2portal','portal_nieobecnosci',__RUB.ref(_rn),_TAB.OD)
         ?};
         {? ~_map.ok
         || KOMM.error('Odnalezienie mapowania nieobecności o kodzie %1 nie powiodło się.'@[$_TAB.RN],0);
            _ret:=0
         || _obj.create();

            _obj.set('__id_cloud',{? _id || _id || ~~ ?});
            _obj.set('DateFrom',_TAB.OD);
            _obj.set('DateTo',_TAB.DO);
            _obj.set('AbsenceType',_map.Type);
            _obj.set('CurrentDayLimit',_TAB.AKTD);
            _obj.set('CurrentHourLimit',_TAB.AKTG);
            _obj.set('OverdueDayLimit',_TAB.ZALD);
            _obj.set('OverdueHourLimit',_TAB.ZALG);
            _obj.set('PeriodDayLimit',_TAB.LRD);
            _obj.set('PeriodHourLimit',_TAB.LRG);
            _obj.set('ShowLimitInHours',_lwg(_TAB));
            _obj.set('__ModifiedDate_erp',_cfg.TAB.idput_value());
            _obj.set('__id_erp','%1%2 - %3|%4' [_cfg.TAB.uidref(),$_TAB.OD,$_TAB.DO,_map.Type]);
            _obj.set('LeaveOnRequestLimit',_nz(_TAB));
            _obj.set('IsFirstJob',_pierwszy);
            _obj.set('CheckLimitInHours',_lwg(_TAB)>0);
            _obj.set('PersonId__id_Erp',P.uidref());

            _ret:=_obj.save()
         ?};

         _ret & _TAB.next()
      !}
   ?};
   R.cntx_pop()
?};

P.cntx_pop();

_ret


\chr_PersonAbsLimitModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja kontaktu - parametr zapytania chr_PersonLeaveLimitModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonAbsLimit_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_PersonAbsLimitModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_PersonAbsLimitModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonLeaveLimitModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonAbsLimit_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_PersonAbsLimitDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_PersonLeaveLimitDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonAbsLimit_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_args','portal_core',_cfg.id)


\chr_PersonAbsLimitDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonLeaveLimitDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonAbsLimit_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonLanguage (znajomość języków).
::======================================================================================================================


\chr_PersonLanguageModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonLanguageModify.
::       Kontekst wywołania - rekord tabeli ZJ.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_tab:=type_of(_TAB_ID)<>type_of(~~);
{? _tab
|| _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
   _TAB_ID.cntx_psh();
   _TAB_ID.index(_ndx)
?};

_ret:=0;
P.cntx_psh();
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),ZJ.OSOBA);
{? P.first()
|| SLO_NAZ.cntx_psh();
   SLO_NAZ.prefix();
   {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
         P.next()
      || _obj.create();

         _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
         _obj.set('LanguageName',ZJ.JO().NAZWA);
         _obj.set('LanguageProficiency',ZJ.SZ().NAZWA);
         _obj.set('CertificateDate',ZJ.DATA);
         _obj.set('CertificateDescription',ZJ.OD);
         _obj.set('__ModifiedDate_erp',ZJ.idput_value());
         _obj.set('__id_erp',ZJ.uidref()+P.uidref());
         _obj.set('Exam',ZJ.EGZAMIN);
         _obj.set('PersonId__id_Erp',P.uidref());

         _ret:=_obj.save();

         _ret & P.next()
      ?}
   !};
   SLO_NAZ.cntx_pop()
?};
P.cntx_pop();

{? _tab
|| _TAB_ID.cntx_pop();
   _TAB_ID.ndx_drop(_ndx)
?};

_ret


\chr_PersonLanguageModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja znajomości języków - parametr zapytania chr_PersonLanguageModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonLanguageModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_ZJ_ID',_formula_json,1)


\chr_PersonLanguageModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonLanguageModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_ZJ_ID')


\chr_PersonLanguageDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonLanguageDelete
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_ZJ_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
::    _TAB.ID     = __id_cloud | __ModifiedDate_cloud
::    _TAB.OPIS   = Dodatkowe informacje z __id_erp
   {? _TAB.first()
   || P.cntx_psh();
      P.prefix();
      {!
      |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::          Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
         || _TAB.del()
         || _TAB.next()
         ?}
      !};
      P.cntx_pop()
   ?};
   {? _TAB.first()
   || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@)
   ?}

|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\chr_PersonLanguageDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonLanguageDelete
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_ZJ_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonTraining (kursy i szkolenia / badania lekarskie).
::======================================================================================================================


\chr_PersonTraining_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='SZK_PRAC'
   || 'PORTAL_SZK_PRAC_ID'
   |? _a='BDO'
   || 'PORTAL_BDO_ID'
   |? _a='KART_DOD'
   || 'PORTAL_KART_DOD_SZKOLBHP_ID'
   || ''
   ?};
_ret


\chr_PersonTrainingModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonTrainingModify.
::       Kontekst wywołania - rekord tabeli SZK_PRAC, BDO lub KART_DOD.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja (tylko dla KART_DOD)
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~ (tylko dla KART_DOD)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_cfg:=exec('chr_PersonTraining_cfg','portal_method_chr',_env.TabAcr);

_ret:=0;
P.cntx_psh();
P.prefix();
{? _cfg.TAB=SZK_PRAC
|| {? SZK_PRAC.P=null()
   || ~~
   |? SZK_PRAC.P();
      P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
   || SZK_OPIS.cntx_psh();
      SZK_OPIS.prefix();
      SZK_TEM.cntx_psh();
      SZK_TEM.prefix();
      SZK_ORG.cntx_psh();
      SZK_ORG.prefix();

      _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('DateFrom',SZK_PRAC.SZKOL().OD);
      _obj.set('DateTo',SZK_PRAC.SZKOL().DO);
      _obj.set('CourseType','EDUKACJA');
      _obj.set('CourseName',100+SZK_PRAC.SZKOL().TEMAT().TEMAT);
      _obj.set('TrainingProvider',SZK_PRAC.SZKOL().ORG().NAZWA);
      _obj.set('CompensationAmount',SZK_PRAC.SUMA-SZK_PRAC.KOSZT);
      _obj.set('__ModifiedDate_erp',SZK_PRAC.idput_value());
      _obj.set('__id_erp',SZK_PRAC.uidref());
      {? SZK_PRAC.UMLOJN
      || UMLOJN.cntx_psh();
         UMLOJN.prefix();
         SZK_PRAC.UMLOJN();
         _obj.set('LoyalAgrmtDateFrom',UMLOJN.DTP);
         _ir:=UMLOJN.DTP~1;
         _im:=UMLOJN.DTP~2+UMLOJN.OKRES;
         {? _im>12
         || _ir+=_im%12;
            _im:=_im%*12
         ?};
         _obj.set('LoyalAgrmtDateTo',date(_ir,_im,1)-1+(UMLOJN.DTP~3));
         _obj.set('ExpirationDate',UMLOJN.DTZ);
         UMLOJN.cntx_pop()
      ?};
      _obj.set('CertificateNumber',SZK_PRAC.CERT_NR);
      _obj.set('CertificateDate',SZK_PRAC.CERT_DT);
      _obj.set('CertificateDescription',SZK_PRAC.CERT_TXT);
::      _obj.set('DaysBeforeExpiryDateReminder',);
      _obj.set('IsMedicalExamination',0);
      _obj.set('PersonId__id_Erp',P.uidref());

      _ret:=_obj.save();

      SZK_ORG.cntx_pop();
      SZK_TEM.cntx_pop();
      SZK_OPIS.cntx_pop()

   ?}
|? _cfg.TAB=BDO
|| BDO.P();
   {? P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
   || SLO_KOD.cntx_psh();
      SLO_KOD.prefix();
      S_ZUS.cntx_psh();
      S_ZUS.prefix();

      _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('DateFrom',BDO.DTO);
::      _obj.set('DateTo',);
      _obj.set('CourseType','BADANIA');
      _obj.set('CourseName',100+BDO.TYP().NAZWA);
::      _obj.set('TrainingProvider',);
::      _obj.set('CompensationAmount',);
      _obj.set('__ModifiedDate_erp',BDO.idput_value());
      _obj.set('__id_erp',BDO.uidref());
      _obj.set('ExpirationDate',{? BDO.WYNIK().KOD='21' || BDO.DTNB || BDO.DTO ?});
      _obj.set('DaysBeforeExpiryDateReminder',30);
      _obj.set('IsMedicalExamination',1);
      BDO.WYNIK();
      _obj.set('MedicalCertificate',exec('strcut','#string',S_ZUS.memo_txt(,1,'OPIS'),6000,1));
      _obj.set('Annotations',exec('strcut','#string',BDO.memo_txt(,1,'ADNOT'),6000,1));

      _obj.set('PersonId__id_Erp',P.uidref());

      _ret:=_obj.save();

      S_ZUS.cntx_pop();
      SLO_KOD.cntx_pop()
   ?}

|? _cfg.TAB=KART_DOD
|| KART_DEF.cntx_psh();
   KART_DEF.prefix();
   {? KART_DOD.KART_DEF().SYMBOL='SZKOLBHP'
   || _tab:=type_of(_TAB_ID)<>type_of(~~);
      {? _tab
      || _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
         _TAB_ID.cntx_psh();
         _TAB_ID.index(_ndx)
      ?};

      P.index('OSOZATR');
      P.prefix(exec('firma','ustawienia'),KART_DOD.OSOBA);
      {? P.first()
      || {!
         |? {? P.PORTAL<>'T'
            || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
               P.next()
            || _obj.create();

               _obj.set('__id_cloud',{? _tab & _TAB_ID.find_key(P.uidref(),) || #spli_str(_TAB_ID.ID,'|')[1] || ~~ ?});
               _obj.set('DateFrom',KART_DOD.OD);
               _obj.set('DateTo',KART_DOD.DO);
               _obj.set('CourseType','BHP/PPOZ');
               _obj.set('CourseName',100+'%1. %2' [exec('kt_opis','kart_dod'),KART_DOD.OPIS]);
               _obj.set('__ModifiedDate_erp',KART_DOD.idput_value());
               _obj.set('__id_erp',KART_DOD.uidref()+P.uidref());
               _obj.set('ExpirationDate',KART_DOD.DO);
               _obj.set('DaysBeforeExpiryDateReminder',30);
               _obj.set('IsMedicalExamination',0);
               _obj.set('PersonId__id_Erp',P.uidref());

               _ret:=_obj.save();

               _ret & P.next()
            ?}
         !}
      ?};
      {? _tab
      || _TAB_ID.cntx_pop();
         _TAB_ID.ndx_drop(_ndx)
      ?}

   ?};
   KART_DEF.cntx_pop()
?};
P.cntx_pop();
_ret


\chr_PersonTrainingModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych z przebiegu zatrudnienia - parametr zapytania chr_PersonTrainingModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonTraining_cfg','portal_method_chr',_env.TabAcr);
{? _cfg.TAB=KART_DOD
|| _formula_json:="params_exec('chr_PersonTrainingModify_json','portal_method_chr',_a,_b,_c,_d)";
   params_exec('Modify_args','portal_core',_cfg.id,_formula_json,1)
|| _formula_json:="params_exec('chr_PersonTrainingModify_json','portal_method_chr',_a,_b,~~,~~)";
   params_exec('Modify_args','portal_core',_cfg.id,_formula_json)
?}


\chr_PersonTrainingModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonTrainingModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonTraining_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_PersonTrainingDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonTrainingDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_cfg:=exec('chr_PersonTraining_cfg','portal_method_chr',_env.TabAcr);

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _TAB:=exec('get_id','#sync_id',_cfg.id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
::    _TAB.ID     = __id_cloud | __ModifiedDate_cloud
::    _TAB.OPIS   = Dodatkowe informacje z __id_erp
   {? _TAB.first()
   || P.cntx_psh();
      P.prefix();
      {!
      |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::          Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
         || _TAB.del()
         || _TAB.next()
         ?}
      !};
      P.cntx_pop()
   ?};
   {? _TAB.first()
   || _ret:=params_exec('Delete_args','portal_core',_cfg.id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@)
   ?}

|| _ret:=params_exec('Delete_args','portal_core',_cfg.id)
?};
_ret


\chr_PersonTrainingDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonTrainingDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonTraining_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - chr_PPKContract (umowy PPK).
::======================================================================================================================


\chr_PPKContractModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PPKContractModify.
::       Kontekst wywołania - rekord tabeli PPK_UZA.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

ADRES.cntx_psh();
ADRES.prefix();
PPK_UZA.ADRES();

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('InstitutionName',ADRES.NAZWA);
_obj.set('InstitutionAddressLine1','%1 %2' [ADRES.KOD_POCZ,{? ADRES.POCZTA='' || ADRES.MIASTO || ADRES.POCZTA ?}]);
_obj.set('InstitutionAddressLine2','%1 %2' [ADRES.ULICA,ADRES.DOM]);
_obj.set('__ModifiedDate_erp',PPK_UZA.idput_value());
_obj.set('__id_erp',PPK_UZA.uidref());
_obj.set('DateFrom',PPK_UZA.OD);
_obj.set('DateTo',PPK_UZA.DO);

_ret:=_obj.save();

ADRES.cntx_pop();

_ret


\chr_PPKContractModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych o umowach PPK - parametr zapytania chr_PPKContractModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PPKContractModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_PPK_UZA_ID',_formula_json)


\chr_PPKContractModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PPKContractModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PPK_UZA_ID')


\chr_PPKContractDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PPKContractDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_PPK_UZA_ID')


\chr_PPKContractDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PPKContractDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PPK_UZA_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PPKParticipation -> chr_PPKPart (PPK uczestnictwo).
::======================================================================================================================


\chr_PPKPartModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PPKParticipationModify.
::       Kontekst wywołania - rekord tabeli PPK_UCZ.
::       Zakładamy, że dane będą synchronizowane całościowo, czyli po każdej zmianie najpierw będą usuwane (wszystkie),
::       a potem wysyłane (wszystkie). Zatem id_cloud zawsze powinno być 0.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;
:: Zapytania produkujące JSON-a wyjściowego "przemiatają" wszystkie rekordy tabeli P związane z PPK_UCZ.OSOBA.
:: Parametry _c i _d funkcji nie są wykorzystywane, ale dzięki takiej obsłudze metoda wywoływana jest jeden raz.

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;

_firma:=PPK_UCZ.FIRMA;
P.cntx_psh();
P.index('OSOZATR');
P.prefix(_firma,PPK_UCZ.OSOBA);
{? P.first()
||
:: Obsługiwane (istotne) wnioski:
::  * DRZW - Deklaracja rezygnacji z wpłat
::  * WODW - Wniosek o dokonywanie wpłat (powrót - wycofanie się z rezygnacji)
::  * AWW  - Automatyczne wznowienie wpłat (2023-04-01 + n*4y)
   _WNU:=sql(
      'select PPK_WNU.OD, PPK_WRD.SYMBOL '
      'from PPK_WNU join PPK_WRD using (PPK_WNU.PPK_WRD,PPK_WRD.REFERENCE) '
      'where PPK_WNU.FIRMA=:_a and PPK_WNU.OSOBA=:_b and PPK_WNU.PPK_UMO=:_c '
            'and PPK_WRD.SYMBOL in (\'AWW\',\'WODW\',\'DRZW\') '
      'order by 1, 2',
      _firma,P.OSOBA,PPK_UCZ.PPK_UMO
   );

:: Tabela z datami zmian. Ponieważ jest budowana dla P lub OSOBA, to (niestety) dotyczy wszystkich umów, a nie tylko
:: umowy bieżącego PPK_UCZ. Wymaga zatem przefiltrowania.
   _sqlDT:=
      'select distinct PPK_PWP.OD as "DT" '
      'from PPK_PWP '
      'where (PPK_PWP.REF=:_b or PPK_PWP.REF=:_c) '
      'order by 1 '
      'union distinct '
      'select distinct KST_WAR.DATA as "DT" '
      'from KST_WAR join KST_DEF using(KST_WAR.KST_DEF,KST_DEF.REFERENCE) '
      'where KST_WAR.FIRMA=:_a and KST_DEF.SYMBOL in (\'KST_PPK.SK_PF\',\'KST_PPK.SK_DOMDF\',\'KST_PPK.SK_MAXPU\') '
            'and KST_WAR.DATA>=to_date(:_d)'
      'order by 1 '
      'union distinct '
      'select distinct OD from :_e order by 1';
   _val:=obj_new('FP','FD','PP','PD','d0','tNUMBER','set');
   _val.d0:=date(0,0,0);
   _val.tNUMBER:=type_of(0);
   _val.set:="
      .FP:={? var_pres('_a')=.tNUMBER || _a || ~~ ?};
      .FD:={? var_pres('_b')=.tNUMBER || _b || ~~ ?};
      .PP:={? var_pres('_c')=.tNUMBER || _c || ~~ ?};
      .PD:={? var_pres('_d')=.tNUMBER || _d || ~~ ?};
      ~~
   ";

   PPK_UMO.cntx_psh();
   PPK_UMO.prefix();
   PPK_UZA.cntx_psh();
   PPK_UZA.prefix();
   ADRES.cntx_psh();
   ADRES.prefix();
   {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.');
         P.next()
      || _DT:=sql(_sqlDT,_firma,P.ref(),P.OSOBA,PPK_UCZ.OD,_WNU);
::       Przygotowanie danych.
         _TAB:=tab_tmp(1,
            'OD','DATE','Od',
            'DO','DATE','DO',
            'FP','REAL','Firma - podstawowa (710)',
            'FD','REAL','Firma - dodatkowa (711)',
            'PP','REAL','Pracownik - podstawowa (712)',
            'PP_DT','DATE','Pracownik - podstawowa (data zmiany)',
            'PD','REAL','Pracownik - dodatkowa (713)',
            'PD_DT','DATE','Pracownik - dodatkowa (data zmiany)',
            'DTR','DATE','Data rezygnacji',
            'WZNOW','INTEGER','Wznowienie'
         );
         PPK_UCZ.PPK_UMO();
         {? _DT.find_ge(PPK_UCZ.OD) & (PPK_UMO.DO=_val.d0 | _DT.DT<=PPK_UMO.DO)
         || _val.set();
            KST_PPK.cntx_psh();
            {!
            |? {? _WNU.find_key(_DT.DT)
::                Wniosek - zachowujemy procenty wpłat.
               || _TAB.OD:=_DT.DT;
                  _TAB.PP_DT:=_TAB.PD_DT:=_TAB.DTR:=_val.d0;
                  _TAB.WZNOW:=0;
                  {? _WNU.SYMBOL='DRZW'
                  || _TAB.DTR:=_TAB.OD
                  |? ',AWW,WODW,'*',%1,' [_WNU.SYMBOL]
                  || _TAB.WZNOW:=1
                  ?};
::                Na razie wszystkie obsługiwane wnioski mają wspólną konsekwencję - dodanie rekordu.
                  _TAB.add()
               || _TAB.blank();
                  _TAB.OD:=_DT.DT;
                  exec('czytaj','#stalesys',_TAB.OD,KST_PPK,'PWP_NUD','SK_DOMDF','SK_MAXPU','SK_PF');
                  _TAB.FP:=exec('licz_pwp','ppk',P.ref(),__RUB.sys_kod(710,_TAB.OD),_TAB.OD);
                  _TAB.FD:=exec('licz_pwp','ppk',P.ref(),__RUB.sys_kod(711,_TAB.OD),_TAB.OD);
                  _TAB.PP:=exec('licz_pwp','ppk',P.ref(),__RUB.sys_kod(712,_TAB.OD),_TAB.OD);
                  _TAB.PD:=exec('licz_pwp','ppk',P.ref(),__RUB.sys_kod(713,_TAB.OD),_TAB.OD);
                  {? _val.FP<>_TAB.FP | _val.FD<>_TAB.FD | _val.PP<>_TAB.PP | _val.PD<>_TAB.PD
                  || {? (_val.PP<>~~ | _TAB.PP) & _val.PP<>_TAB.PP
                     || _TAB.PP_DT:=_TAB.OD
                     ?};
                     {? (_val.PD<>~~ | _TAB.PD) & _val.PD<>_TAB.PD
                     || _TAB.PD_DT:=_TAB.OD
                     ?};
                     _val.set(_TAB.FP,_TAB.FD,_TAB.PP,_TAB.PD);
                     _TAB.add()
                  ?}
               ?};
               _DT.next() & (PPK_UMO.DO=_val.d0 | _DT.DT<=PPK_UMO.DO)
            !};
            KST_PPK.cntx_pop();
            {? _TAB.last()
            || _do:={? _TAB.OD<PPK_UMO.DO || PPK_UMO.DO || _val.d0 ?};
               {!
               |? _TAB.DO:=_do;
                  _TAB.put();
                  _do:=_TAB.OD-1;
                  _TAB.prev()
               !}
            ?}
         ?};

         _loop:=_TAB.first();
         {!
         |? _loop
         |!
            _obj.create();

::         _obj.set('__id_cloud',{? _id || _id || ~~ ?});
            _obj.set('DateFrom',_TAB.OD);
            _obj.set('PersonJoinDate',PPK_UCZ.OD);
            _obj.set('PersonResignationDate',_TAB.DTR);
            _obj.set('InstitutionName',PPK_UCZ.PPK_UMO().PPK_UZA().ADRES().NAZWA);
            _obj.set('PayerBasicContributionPerc',_TAB.FP);
            _obj.set('PayerAdditionalContributionPerc',_TAB.FD);
            _obj.set('PersonBasicContributionPerc',_TAB.PP);
:: !!! Obniżenie składki podstawowej pracownika - Co to ma być?
:: 2% przy niskich zarobach (120%) można obniżyć do 0,5%
:: DWWP - Deklaracja wysokości wpłaty podstawowej
::         _obj.set('PersoncBasicContributionLowPerc',_TAB.PD);
            _obj.set('PersonAddContributionChangeDate',_TAB.PD_DT);
            _obj.set('IsParticipant',_TAB.DTR=_val.d0);
            _obj.set('IsResumption',_TAB.WZNOW);
            _obj.set('__ModifiedDate_erp',PPK_UCZ.idput_value());
            _obj.set('__id_erp','%1%2|%3 - %4' [PPK_UCZ.uidref(),P.uidref(),$_TAB.OD,$_TAB.DO]);
            _obj.set('PersonAdditionalContributionPerc',_TAB.PD);
            _obj.set('PersonBasicContributionChangeDate',_TAB.PP_DT);
            _obj.set('DateTo',_TAB.DO);
            _obj.set('PersonId__id_Erp',P.uidref());

            {? _obj.save()
            || _ret:=1;
               _loop:=_TAB.next()
            || _ret:=_loop:=0
            ?}
         !};

         obj_del(_TAB);
         obj_del(_DT);

         _ret & P.next()
      ?}
   !};
   ADRES.cntx_pop();
   PPK_UZA.cntx_pop();
   PPK_UMO.cntx_pop()
?};
P.cntx_pop();

_ret


\chr_PPKPartModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych o umowach PPK - parametr zapytania chr_PPKParticipationModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PPKPartModify_json','portal_method_chr',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_PPK_UCZ_PWP_ID',_formula_json,1)


\chr_PPKPartModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PPKParticipationModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PPK_UCZ_PWP_ID')


\chr_PPKPartDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PPKParticipationDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_PPK_UCZ_PWP_ID')


\chr_PPKPartDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PPKParticipationDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PPK_UCZ_PWP_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonPayCalc (lista płac pracownika).
::======================================================================================================================


\chr_PersonPayCalc_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='O_P'
   || 'PORTAL_O_P_ID'
   |? _a='RH'
   || 'PORTAL_RH_LS_ID'
   || ''
   ?};
_ret


\chr_PersonPayCalcModify_body
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła wewnętrzna przygotowujaca dane dla jednej listy płac / jednego rachunku. Zakładamy, że ustalona jest
::       dziedzina tabel: O, LS.
::       Poprawność parametrów nie jest weryfikowana.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - Znacznik modyfikacji rekordu wyzwalajacego wysyłkę.
::       _d [ARRAY]  - Tablica ze środowiskiem
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext1:=_b;
_ext2:=_c;
_env:=_d;

params_set(params_get());

_ret:=0;
{? LS.first()
|| _SRC:=($_env.TabAcr)();
   _obj:=_env.Adds.obj;

   _GSPN:=tab_tmp(1,
      'GRUPA','STRING[40]','Symbol grupy',
      'KW','REAL','Kwota',
      'UID','STRING[48]','uidref'
   );
   _GSPP:=tab_tmp(2,
      'GRUPA','STRING[40]','Symbol grupy',
      'RN','INTEGER','Numer rubryki',
      'KW','REAL','Kwota',
      'KAT','STRING[1]','Kategoria',
      'NAZWA','STRING[100]','Nazwa składnika',
      'LP','INTEGER','Lp.',
      'BENEFIT','STRING[20]','Benefit'
   );

   _firma:=exec('ref_firma','ustawienia');
   GSPP.cntx_psh();
   GSPP.index('FR');
   GSPP.prefix(_firma);
   R.cntx_psh();
   R.prefix();
   BNFTT.cntx_psh();
   BNFTT.index('RN');
   BNFTT.prefix(_firma);
   {!
   |? {? GSPP.find_key(LS.RB)
      || GSPP.GSPN();
         {? _ext1='' | _ext1=GSPN.uidref()
::          Warunek powyżej jest istotny tylko dla RH. Dla O_P _ext1 powinien być zawsze '' - przy synchronizacji
::          całościowej rekordy przed synchronizacją są usuwane.
         || LS.RB();
            _kw:=LS.KW*{? GSPP.MINUS='T' || -1 || 1 ?};
::          Aktualizacja grupy (nagłówka).
            {? ~(_put:=_GSPN.find_key(GSPN.SYMBOL))
            || _GSPN.blank();
               _GSPN.GRUPA:=GSPN.SYMBOL;
               _GSPN.UID:=GSPN.uidref()
            ?};
            _GSPN.KW+=_kw;
            {? _put
            || _GSPN.put()
            || _GSPN.add()
            ?};
::          Aktualizacja składników (pozycji).
            {? ~(_put:=_GSPP.find_key(GSPN.SYMBOL,R.RN))
            || _GSPP.blank();
               _GSPP.GRUPA:=GSPN.SYMBOL;
               _GSPP.RN:=R.RN;
               _GSPP.KAT:=GSPN.KAT;
               _GSPP.NAZWA:={? GSPP.NAZWA='' || R.RT || GSPP.NAZWA ?};
               _GSPP.LP:=R.LP;
               {? BNFTT.find_key(R.RN)
               || _GSPP.BENEFIT:=BNFTT.AKRONIM
               ?}
            ?};
            _GSPP.KW+=_kw;
            {? _put
            || _GSPP.put()
            || _GSPP.add()
            ?}
         ?}
      ?};
      LS.next()
   !};
   BNFTT.cntx_pop();
   R.cntx_pop();
   GSPP.cntx_pop();

   {? _GSPN.first()
   || _jman:=exec('json_man','__jsonm','{}');
      {!
      |? _GSPP.prefix(_GSPN.GRUPA,);
         _loop:=_GSPP.first();
         _jman.load('{}');
         _jman.setObject(_jman.addChildElement('','Components'),'[]');
         {!
         |? _loop
         |! _jman.setObject(_path:=_jman.addChildElement('Components'),'{}');
            _jman.setValue(_jman.addChildElement(_path,'PayElementCode'),$_GSPP.RN);
            _jman.setValue(_jman.addChildElement(_path,'ComponentCategory'),
               {? _GSPP.KAT='I' || 'ILOSC' || _GSPP.KAT ?}
            );
            _jman.setValue(_jman.addChildElement(_path,'OrderNumber'),_GSPP.LP);
            _jman.setValue(_jman.addChildElement(_path,'PayElementValue'),_GSPP.KW);
            _jman.setValue(_jman.addChildElement(_path,'PayElementName'),_GSPP.NAZWA);
            _jman.setValue(_jman.addChildElement(_path,'BenefitType'),
               {? +_GSPP.BENEFIT || _GSPP.BENEFIT || ~~ ?}
            );
            _loop:=_GSPP.next()
         !};

         _type:={? ',u,f,r,'*',%1,' [-O.F] || 'Podstawowa' || 'Dodatkowa' ?};

         _obj.create();

         _obj.set('__id_cloud',{? _id || _id || ~~ ?});
         _obj.set('PersonId',exec('getPid','portal_core',P.uidref()));
         _obj.set('PayrollCode','%1 [%2]' [O.LT,$_SRC.ref()]);
         _obj.set('ComponentGroup',_GSPN.GRUPA);
         _obj.set('PayrollNumber',~O.LT);
         _obj.set('PayrollName','%1' [_type]);
         _obj.set('PayrollYear',O.R);
         _obj.set('PayrollMonth',O.M);
         _obj.set('PayDate',O.D);
         _obj.set('ComponentGroupValue',_GSPN.KW);
         _obj.set('__ModifiedDate_erp',_SRC.idput_value());
         _obj.set('__id_erp',_SRC.uidref()+_GSPN.UID+_ext2);
         _obj.set('PayrollType',_type);
::         _obj.set('PaymentReference',);
         _obj.set('__JSON',_jman.getJSON());
::       P.PORTAL jest sprawdzany w formule nadrzędnej.
         _obj.set('PersonId__id_Erp',P.uidref());

         _ret:=_obj.save();

         _ret & _GSPN.next()
      !}
   ?}

?};
_ret


\chr_PersonPayCalcModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: JSON dla zapytania chr_PersonPayCalcModify.
::       Kontekst wywołania - rekord tabeli O_P lub RH.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_cfg:=exec('chr_PersonPayCalc_cfg','portal_method_chr',_env.TabAcr);

_ret:=0;
_pomin:=0;
O.cntx_psh();
O.prefix();
KT.cntx_psh();
KT.prefix();
LS.cntx_psh();
P.cntx_psh();
P.prefix();
GSPN.cntx_psh();
GSPN.index('LP');
GSPN.prefix(exec('ref_firma','ustawienia'));
{? GSPN.first()
|| _txt:='Współpracownik nieprezentowany na portalu.'@;
   _pPortal:="
      {? P.PORTAL<>'T'
      || KOMM.add(_a);
         1
      || 0
      ?}";

   {? _env.TabAcr='O_P' & O_P.O().Z='T' & O.PORTAL='T'
   || O_P.P();
      _pomin:=_pPortal(_txt);

      {? ~_pomin
      || O.T();
         LS.use(O.LT);
         LS.index('PRACLPRU');
         LS.prefix(O_P.P);
         _ret:=exec('chr_PersonPayCalcModify_body','portal_method_chr',_id,_ext,O_P.idput_value(),_env)
      ?}

   |? _env.TabAcr='RH' & RH.O<>null()
   || ZC.cntx_psh();
      ZC.prefix();
      RH.ZLE().P();
      _pomin:=_pPortal(_txt);

      {? ~_pomin
      || RH.O().T();
::       Jeżeli na liście rachunku jest PORTAL='T' to znaczy, że umowa cywilnoprawna, również została wysłana:
         {? O.PORTAL='T' & (RH.BL='T' | (-PAR_SKID.get(180)='t' & O.Z='T'))
         || LS.use(O.LT);
            LS.index('ZLECLPRU');
            LS.prefix(RH.ref());
            _ret:=exec('chr_PersonPayCalcModify_body','portal_method_chr',_id,_ext,RH.idput_value(),_env)
         ?}
      ?};
      ZC.cntx_pop()

   ?}
?};
GSPN.cntx_pop();
P.cntx_pop();
LS.cntx_pop();
KT.cntx_pop();
O.cntx_pop();
_ret


\chr_PersonPayCalcModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Dodanie/modyfikacja danych o listach płac pracownika - parametr zapytania chr_PersonPayCalcModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonPayCalc_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_PersonPayCalcModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_PersonPayCalcModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonPayCalcModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonPayCalc_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_PersonPayCalcDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parametr zapytania chr_PersonPayCalcDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=params_get().env;
_cfg:=exec('chr_PersonPayCalc_cfg','portal_method_chr',_env.TabAcr);

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _del:=0;

   _uidref:=_env.Param;
   _DEL:=exec('get_id','#sync_id',_cfg.id,_uidref);

   {? ~_DEL.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
      return()
   ?};

   _ext1:=48+_DEL.OPIS;
   _ext2:=48-_DEL.OPIS;
   {? ',O_P,RH,'*',%1,' [_env.TabAcr]
   || _TAB:=($_env.TabAcr)();
      _TAB.cntx_psh();
      _TAB.prefix();
      {? _TAB.seek(_env.Param)
      || {? _TAB.idput_value()<>_ext2
         || _del:=1
         || O.cntx_psh();
            O.prefix();
            _TAB.O();
            {? _env.TabAcr='RH'
            || _del:=O.PORTAL='N' | ~(RH.BL='T' | (-PAR_SKID.get(180)='t' & O.Z='T'))
            |? _env.TabAcr='O_P'
            || _del:=O.PORTAL='N' | O.Z='N'
            ?};
            O.cntx_pop()
         ?}
      ?};
      _TAB.cntx_pop()
   ?};

   {? _del
   || params_exec('Delete_args','portal_core',_cfg.id,_DEL)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}

|| params_exec('Delete_args','portal_core',_cfg.id)
?}


\chr_PersonPayCalcDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonPayCalcDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonPayCalc_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonBonusForAssignment -> chr_PersonBonusFA (budżety premii uznaniowych).
::======================================================================================================================


\chr_PersonBonusFAModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_PersonBonusForAssignmentModify.
::       Kontekst wywołania - rekord tabeli PM_BUDZ.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

P.cntx_psh();
P.prefix();
PM_BUDZ.P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.');
   _ret:=0
|| R.cntx_psh();
   R.prefix();
   PM_BUDZ.R();

   _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('BonusSymbol',PM_BUDZ.SYMBOL);
   _obj.set('BonusDescription',PM_BUDZ.OPIS);
   _obj.set('DateFrom',PM_BUDZ.OD);
   _obj.set('DateTo',{? PM_BUDZ.DO=date(0,0,0) || date(2999,12,31) || PM_BUDZ.DO ?});
   _obj.set('Limited',PM_BUDZ.LIMIT='T');
   _obj.set('LimitAmount',{? PM_BUDZ.LIMIT='T' || PM_BUDZ.PLAN || ~~ ?});
   _obj.set('__ModifiedDate_erp',PM_BUDZ.idput_value());
   _obj.set('__id_erp',PM_BUDZ.uidref());
   _obj.set('PayElementCode',$R.RN);
   _obj.set('PayElementDesc',R.RT);
   _obj.set('PersonId__id_Erp',P.uidref());

   _ret:=_obj.save();

   R.cntx_pop()
?};
P.cntx_pop();

_ret


\chr_PersonBonusFAModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja budżetu premii uznaniowych - parametr zapytania chr_PersonBonusForAssignmentModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonBonusFAModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_PM_BUDZ_ID',_formula_json)


\chr_PersonBonusFAModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonBonusForAssignmentModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PM_BUDZ_ID')


\chr_PersonBonusFADelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_PersonBonusForAssignmentDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_PM_BUDZ_ID')


\chr_PersonBonusFADelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonBonusForAssignmentDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PM_BUDZ_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonAbsenceRequest -> chr_PersonAbsReq (wnioski urlopowe).
::======================================================================================================================


\nwu_edokum_mask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła zwraca maskę tabeli EDOKUM, w której przechowywane są wnioski urlopowe.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'skid_vwu'


\chr_PersonAbsReqModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania chr_PersonAbsenceRequestModify.
::       Kontekst wywołania - rekord tabeli EDOKUM.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_nwu:=exec('edokum2nwu','portal_nieobecnosci',EDOKUM.ref());

{? _nwu=null()
|| KOMM.add('Dokument niezwiązany z wnioskiem urlopowym.'@);
   return(0)
?};

_ret:=0;
NWU.cntx_psh();
NWU.prefix();
{? NWU.seek(_nwu)
|| R.cntx_psh();
   R.prefix();
   P.cntx_psh();
   P.prefix();
   _creator:={? NWU.CREATOR || NWU.CREATOR().uidref() || '' ?};
   NWU.P();
   {? P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.')

   |? _map:=exec('merit2portal','portal_nieobecnosci',NWU.R,NWU.OD,NWU.DO);
      ~_map.ok
   || KOMM.error('Odnalezienie mapowania nieobecności %1 - %2 nie powiodło się.'@[$NWU.R().RN,R.RT],0)

::    Aktualizacja statusu wniosku urlopowego (NWU) na podstawie statusu dokumentu w obiegu (EDOKUM) odbywa się w ramach
::    obsługi czynności OBE_FAW_EAKP - Akceptacja wniosku w obiegu, a dokładniej: jej odpowiednio ustawionych parametrów
::    wejściowych:
::       * FORM_ODR - Formuła wykonywana przy kończeniu odrzucania;
::       * FORM_PRZ - Formuła wykonywana przy kończeniu akceptacji.
::    Należy przy tym pamiętać, aby parametr FORM_PRZ był wypełniony tylko dla ostatniej akceptacji.
::    Jedynym wyjątkiem (aktualizacji statusu wniosku urlopowego) jest status 'P', który ma szansę wystąpić w trakcie
::    walidacji przed rejestacją wniosku.
   || _status:=exec('EDOKOS_status','portal_wnioski',EDOKUM.STATUS);
      {? EDOKUM.STATUS='P'
      || _status:='ODRZUCONY';
         NWU.AZ:='N';
         NWU.put()
      ?};

      _params:=json_parse(EDOKUM.memo_txt(0,1,'PARAMS'));
      _params_is_ntab:=obj_ntab(_params);

      _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('DateFrom',NWU.OD);
      _obj.set('DateTo',NWU.DO);
      _obj.set('AbsenceType',_map.Type);
      _obj.set('AbsenceSubtype',_map.SubType);
      _obj.set('CreateDate',EDOKUM.DATA_OD,EDOKUM.GODZ_OD);
      _obj.set('ReqAbsHours',{? NWU.G || NWU.G || ~~ ?});
      _obj.set('RequestStatus',_status);
      _obj.set('RequestComment',NWU.KOMENT);
::    Data dnia do odbioru - nie obsługujemy.
::   _obj.set('DayToReceive',);
::    "Urlop na żądanie" jest obsługiwany osobną nieobecnością, flaga "IsLeaveOnRequest" nie ma dla nas znaczenia.
::   _obj.set('IsLeaveOnRequest',);
      _obj.set('IsAbsenceOverLimit',NWU.PLW='T');
      _obj.set('__ModifiedDate_erp',EDOKUM.idput_value());
      _obj.set('__id_erp',EDOKUM.uidref());
      _obj.set('IsReadyForAccept'
         ,_params_is_ntab & var_pres('IsReadyForAccept',_params)=type_of(0) & _params.IsReadyForAccept
      );
::    Portal nie odbiera już tego pola.
::      _obj.set('__JSON',);
      _obj.set('CreatorPersonId__id_erp',_creator);
      _obj.set('PersonId__id_erp',P.uidref());
::    Przy składaniu wniosku nie wskazujemy osoby zastępującej nas.
::      _obj.set('CorrectionReason',);
      _obj.set('__BinAttachment',exec('EDOKUM_att_json','portal_wnioski',2));

      {? _params_is_ntab
      || {? var_pres('OnHourlyBasisDecision',_params)=type_of(0)
         || _obj.set('OnHourlyBasisDecision',_params.OnHourlyBasisDecision)
         ?};
         {? var_pres('PersonFamilyId',_params)=type_of(0)
         || _obj.set('PersonFamilyId',_params.PersonFamilyId)
         ?};
         {? var_pres('Reason',_params)=type_of('')
         || _obj.set('Reason',_params.Reason)
         ?};
         {? var_pres('AdditionalData__JSON',_params)=type_of(obj_new(1))
::          Pole AdditionalData__JSON zawiera tablicę JSON-a
         || _obj.set('AdditionalData__JSON',json_obj(_params.AdditionalData__JSON))
         ?}
      ?};

      _ret:=_obj.save()
   ?};

   P.cntx_pop();
   R.cntx_pop()
?};
NWU.cntx_pop();

_ret


\chr_PersonAbsReqModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja wniosku urlopowego - parametr zapytania chr_PersonAbsenceRequestModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonAbsReqModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_EDOKUM_NWU_ID',_formula_json)


\chr_PersonAbsReqModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAbsenceRequestModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_EDOKUM_NWU_ID')


\chr_PersonAbsReqGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Pobranie wątków - parametr zapytania chr_PersonAbsenceRequestGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_PersonAbsReqGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła aktualizująca dane w tabelach NWU i EDOKUM na podstawie wyniku zapytania chr_PersonAbsenceRequestGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu - dla akcji 'add', '' - dla akcji 'put' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;
_ext:=_c;

{? _act='del'
|| _nwu:=exec('edokum2nwu','portal_nieobecnosci',EDOKUM.ref());
   {? _nwu<>null
   || NWU.cntx_psh();
      NWU.prefix();
      {? NWU.seek(_nwu)
      || NWU.del(1,1)
      ?};
      NWU.cntx_pop()
   ?};
   {? exec('EDOKUM_del','portal_wnioski')
   || return('')
   || return()
   ?}
|? _act='put'
:: Nie przetwarzajmy rekordu, który został poprawiony w Mericie.
|| _mod:=_obj.getValue('__ModifiedDate_erp');
   {? type_of(_mod)=type_of('') & +_mod
   || _mdp:=exec('str2date','#convert',10+_mod);
      _mtp:=exec('str2time','#convert',8+(11-_mod));
      _mde:=exec('str2date','#convert',10+EDOKUM.IDPUT);
      _mte:=exec('str2time','#convert',8+(11-EDOKUM.IDPUT));
      {? ~(_mde<=_mdp & _mte<=_mtp)
      || return('')
      ?}
   ?}
?};

_at:=_obj.getValue('AbsenceType');
{? type_of(_at)<>type_of('')
|| _at:=''
?};
_ast:=_obj.getValue('AbsenceSubtype');
{? type_of(_ast)<>type_of('')
|| _ast:=''
?};
_map:=exec('portal2merit','portal_nieobecnosci',_at,_ast);
{? _map.R=null()
|| KOMM.error('Odnalezienie typu nieobecności [%1]/[%2] nie powiodło się.'@[_at,_ast],0);
   return()
|? _map.ETYPY=null()
|| KOMM.error('Nieobecność [%1 - %2] niepowiązana z typem wniosku.'@[$_map.RN,_map.RT],0);
   return()
?};

_pid:=_obj.getValue('PersonId');
_pref:=exec('getPref','portal_core',_pid);
{? _pref=null()
|| KOMM.error('Odnalezienie zapisu dla %1=%2 nie powiodło się.'@ ['PersonId',$_pid],0);
   return()
?};

_cid:=_obj.getValue('CreatorPersonId');
{? type_of(_cid)<>type_of(0)
|| _cid:=0
?};
_cref:={? _cid=_pid || _pref || exec('getPref','portal_core',_cid) ?};
{? _cref=null()
|| KOMM.error('Odnalezienie zapisu dla %1=%2 nie powiodło się.'@ ['CreatorPersonId',$_pid],0);
   return()
?};

P.cntx_psh();
P.prefix();
{? P.seek(_pref)
|| _osoba:=P.OSOBA;
   _firma:=P.FIRMA;
   __KAL.set_cal(P.KAL)
|| _osoba:=_firma:=null()
?};
P.cntx_pop();

{? _osoba=null() | _firma=null()
|| KOMM.error('Odnalezienie wnioskodawcy nie powiodło się.'@,0);
   return()
?};

_user:=exec('FindInSet','#table','USERS','OSOBA',_osoba,,,,,null());
{? _user=null()
|| KOMM.error('Odnalezienie użytkownika, związanego z wnioskodawcą nie powiodło się.'@,0);
   return()
?};

_continue:=1;

:: W notatce PARAMS przechowywany jest JSON (tablica) z dodatkowymi elementami / parametrami.
{? _act='add'
|| EDOKUM.cntx_psh();
   EDOKUM.use(exec('nwu_edokum_mask','portal_method_chr'));
   EDOKUM.prefix();
   EDOKUM.blank(1);
   EDOKUM.FIRMA:=_firma;
   EDOKUM.TYP:=_map.ETYPY;
   EDOKUM.USERS:=_user;
   EDOKUM.DOSTAWCA:=_osoba;
   EDOKUM.OSOBAWWW:=$_pref
|? EDOKUM.FIRMA<>_firma
|| KOMM.error('Zmiana firmy.'@,0);
   _continue:=0
|? EDOKUM.TYP<>_map.ETYPY
|| KOMM.error('Zmiana typu wniosku.'@,0);
   _continue:=0
|? EDOKUM.USERS<>_user
|| KOMM.error('Zmiana użytkownika.'@,0);
   _continue:=0
|? EDOKUM.DOSTAWCA<>_osoba
|| KOMM.error('Zmiana osoby.'@,0);
   _continue:=0
|? EDOKUM.OSOBAWWW<>$_pref
|| KOMM.error('Zmiana wnioskodawcy [%1].'@ ['EDOKUM'],0);
   _continue:=0
?};

{? _act='add' & ~_continue
|| EDOKUM.cntx_pop();
   return()
?};

:: Na razie załóżmy, że parametry (json) zmieszczą się w zmiennej.
_params:=exec('obj_ntab_set','#array',
:: Czy wniosek jest gotowy do akceptacji
   ,'IsReadyForAccept',_obj.getValue('IsReadyForAccept')
);

_b_status:={? _act='put' || EDOKUM.STATUS || '' ?};

_create:=exec('getDateTime','portal_core',_obj.getValue('CreateDate'));
EDOKUM.DATA_OD:=_create.date;
EDOKUM.GODZ_OD:=_create.time;

NWU.cntx_psh();
NWU.prefix();

{? +EDOKUM.DOK_POW=48 & type_of(ref_tab(EDOKUM.DOK_POW))>0 & ref_tab(EDOKUM.DOK_POW)=NWU & NWU.seek(EDOKUM.DOK_POW)
|| _actnwu:='put';
   {? NWU.P<>_pref
   || KOMM.error('Zmiana wnioskodawcy [%1].'@ ['NWU'],0);
      NWU.cntx_pop();
      {? _act='add'
      || EDOKUM.cntx_pop()
      ?};
      return()
   ?}
|| EDOKUM.DOK_POW:='';
   _actnwu:='add';
   NWU.blank();
   NWU.P:=_pref
?};

NWU.CREATOR:=_cref;
NWU.D:=_create.date;
NWU.OD:=exec('getDateTime','portal_core',_obj.getValue('DateFrom')).date;
NWU.DO:=exec('getDateTime','portal_core',_obj.getValue('DateTo')).date;
NWU.R:=_map.R;
_koment:=_obj.getValue('RequestComment');
{? type_of(_koment)=type_of('')
|| NWU.KOMENT:=_koment
?};

:: Dni / godziny
NWU.NR:=__KAL.w_days(NWU.OD,NWU.DO);
P.cntx_psh();
P.prefix();
{? P.seek(_pref)
|| NWU.NG:=exec('nominal','godziny',NWU.OD,NWU.DO)
?};
P.cntx_pop();

_lg:=_obj.getValue('ReqAbsHours');
{? type_of(_lg)<>type_of(0)
|| _lg:=0
?};
{? _lg>0
|| NWU.G:=_lg;
   NWU.PARTDAY:='T'
|| NWU.G:=0;
   NWU.PARTDAY:='N'
?};

:: !!! Co z obsługą przekraczania limitu?
NWU.PLW:={? _obj.getValue('IsAbsenceOverLimit') || 'T' || 'N' ?};

:: -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
{? __RUB.sys_attr(NWU.R,1153,NWU.OD)
:: Urlop ojcowski
|| _fld:='PersonFamilyId';
   {? _obj.isPath(_fld) & _obj.typeOf(_fld)=_obj.Const.TYPE.NUMBER
   || _id:=_obj.getValue(_fld);
      _arr:=exec('obj_ntab_set','#array',_params
         ,_fld,_id
         ,'PersonFamilyId__ID_ERP',exec('get_id_erp','portal_core','PORTAL_RD_ID',_id)
      );
      obj_del(_params); _params:=_arr; obj_del(_arr)
   ?}

|? __RUB.sys_attr(NWU.R,1181,NWU.OD)
:: Siła wyższa
|| _fld:='OnHourlyBasisDecision';
   {? _obj.isPath(_fld) & _obj.typeOf(_fld)=_obj.Const.TYPE.NUMBER
   || _arr:=exec('obj_ntab_set','#array',_params,_fld,_obj.getValue(_fld));
      obj_del(_params); _params:=_arr; obj_del(_arr)
   ?}

|? __RUB.sys_attr(NWU.R,1191,NWU.OD)
:: Urlop opiekuńczy
|| _fld:='PersonFamilyId';
:: Jeżeli opieka dotyczy członka rodziny, który jest wprowadzony do ERP-a, to informacja o nim przyjdzie w polu
:: PersonFamilyId. Dodatkowo zapamiętajmy jego ref-a.
   {? _obj.isPath(_fld) & _obj.typeOf(_fld)=_obj.Const.TYPE.NUMBER
   || _id:=_obj.getValue(_fld);
      _arr:=exec('obj_ntab_set','#array',_params
         ,_fld,_id
         ,'PersonFamilyId__ID_ERP',exec('get_id_erp','portal_core','PORTAL_RD_ID',_id)
      );
      obj_del(_params); _params:=_arr; obj_del(_arr)
   ?};
   _fld:='Reason';
   {? _obj.isPath(_fld) & _obj.typeOf(_fld)=_obj.Const.TYPE.STRING
   || _arr:=exec('obj_ntab_set','#array',_params,_fld,_obj.getValue(_fld));
      obj_del(_params); _params:=_arr; obj_del(_arr)
   ?};
   _fld:='AdditionalData__JSON';
   {? _obj.isPath(_fld) & _obj.typeOf(_fld)=_obj.Const.TYPE.STRING
::    Pole zawiera tablicę elementów, stąd jako wartość do poniższej formuły przekazywany jest wynik json_parse().
   || _arr:=exec('obj_ntab_set','#array',_params,_fld,json_parse(_obj.getValue(_fld)));
      obj_del(_params); _params:=_arr; obj_del(_arr)
   ?}

?};
:: -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

{? ~_continue
|| NWU.cntx_pop();
   {? _act='add' || EDOKUM.cntx_pop() ?};
   return()
?};

_status:=_obj.getValue('RequestStatus');
{? _status='WYSŁANY'
|| {? ~_params.IsReadyForAccept
   || NWU.AZ:='';
      EDOKUM.STATUS:='R'
   || NWU.AZ:='?';
      {? -EDOKUM.STATUS<>'s'
      || EDOKUM.STATUS:='S'
      ?}
   ?}
|? _status='ZAAKCEPTOWANY'
|| NWU.AZ:='T';
   EDOKUM.STATUS:='Y'
|? _status='ODRZUCONY'
|| NWU.AZ:='N';
   EDOKUM.STATUS:='D'
?};

_ret:=1;
{? _actnwu='add'
|| {? NWU.add()
   || EDOKUM.DOK_POW:=NWU.uidref()
   || _ret:=~~
   ?}
?};

NWU.cntx_pop();

{? _ret=1
|| {? _act='add'
   || _ret:=exec('EDOKUM_add','portal_wnioski')
   || _ret:=exec('EDOKUM_put','portal_wnioski')
   ?}
?};

{? _ret<>~~
|| _par_ext:=json_obj(_params);
   {? _par_ext<>EDOKUM.memo_txt(,1,'PARAMS')
   || EDOKUM.memo_set(_par_ext,'PARAMS');
      EDOKUM.memo_put(,'PARAMS')
   ?};
   exec('EDOKUM_att','portal_wnioski',_obj);
   exec('EDOKUM_to_valid','portal_wnioski',_b_status)
?};

{? _act='add'
|| EDOKUM.cntx_pop()
?};

_ret


\chr_PersonAbsReqGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAbsenceRequestGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli EDOKUM.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_EDOKUM_NWU_ID',
   "exec('chr_PersonAbsReqGet_update','portal_method_chr',_a,_b,_c)"
)


\chr_PersonAbsReqDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania chr_PersonAbsReqDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
:: !!! Czy będziemy usuwali? Jeżeli tak, to należy usunąć również NWU.
params_set(params_get());
_env:=params_get().env;
_uidref:=_env.Param;
{? ref_name(_uidref)=exec('nwu_edokum_mask','portal_method_chr')
|| _id:='PORTAL_EDOKUM_NWU_ID';
   _tab:=exec('get_id','#sync_id',_id,_uidref);
   params_exec('Delete_args','portal_core',_id,_tab)
|| KOMM.add('Rekord nie dotyczy wniosku urlopowego.');
   ~~
?}


\chr_PersonAbsReqDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAbsReqDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
:: !!! Czy będziemy usuwali? Jeżeli tak, to należy usunąć również NWU.
params_exec('Delete_parse','portal_core','PORTAL_EDOKUM_NWU_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_EquipmentType (typy wyposażenia).
::======================================================================================================================


\chr_EquipmentTypeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: JSON dla zapytania chr_EquipmentTypeModify.
::       Kontekst wywołania - rekord tabeli MGRP.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

:: W tym zastosowaniu wystawiane są wszystkie podgrupy materiałowe
:: (w systemie Merit nie ma ograniczeń co do wykorzystania materiałów z dowolnych pogrup w ewidencji wyposażenia)

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('EquipmentType',$MGRP.ref());
_obj.set('EquipmentTypeName',MGRP.NAZ);
_obj.set('__ModifiedDate_erp',MGRP.idput_value());
_obj.set('__id_erp',MGRP.uidref());

_obj.save()


\chr_EquipmentTypeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodanie/modyfikacja typu wyposażenia - parametr zapytania chr_EquipmentTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_EquipmentTypeModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_MGRP_ID',_formula_json)


\chr_EquipmentTypeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_EquipmentTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_MGRP_ID')


\chr_EquipmentTypeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parametr zapytania chr_EquipmentTypeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_MGRP_ID')


\chr_EquipmentTypeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_EquipmentTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_MGRP_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_Equipment (wyposażenie).
::======================================================================================================================


\DK_prefix
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła służąca do ograniczenia dziedziny rekordów tabeli DK
::       przetwarzanych podczas pierwszego zasilenia portalu
::   WE: _a - tabala DK
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100 & _a=DK
|| DK.index('WYP');
   DK.prefix(1,'T')
?}


\DK_condition
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Warunek pobierania zmodyfikowanych rekordów tabeli DK
::       Uwaga: nie może spowodować późniejszego "wypadnięcia" rekordu z przetwarzania
::----------------------------------------------------------------------------------------------------------------------
:: Uwzględniane są zapisy dostaw pierwotnych dotyczących obrotu wyposażeniem - po ustawieniu znacznika KD.WYP=1
:: nie jest on już zmieniany na 0, nawet jak zostanie usunięte wydanie wyposażenia dotyczącego tej dostawy.
DK.WYP=1 & DK.PLUS='T'


\chr_EquipmentModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: JSON dla zapytania chr_EquipmentModify.
::       Kontekst wywołania - rekord tabeli DK.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

:: W tym zastosowaniu wystawiane są tylko dostawy użyte w obrocie wyposażeniem (na tabeli KARO)
_is_karo:=0;
_srsr:='';
{? exec('DK_condition','portal_method_chr') & DK.M().MGRP<>null()
|| KARO.cntx_psh();
   KARO.index('PRDK');
   KARO.prefix($DK.ref(),);
   {? KARO.first()
   || _srsr:=KARO.RSRSR;
      _is_karo:=1
   ?};
   KARO.cntx_pop()
?};
{? ~_is_karo || return(0) ?};

:: Pobranie danych ze środka trwałego
_SRSR:=exec('obj_new','#buf','SRSR');
_formula:="_b.get()";
exec('FindAndGet','#table',SRSR,_srsr,,_formula,,_SRSR);

:: Pobranie wartości ze środka trwałego z okresu zgodnego z bieżącą datą
{? _srsr<>''
|| SRST.cntx_psh();
   SRST.use('srst'+(ref_name(_srsr)+4));
   _srst:=exec('FindInSet','#table','SRST','PODAT',date()~2,BIT.sqlint(_srsr),"SRST.ref()",,date()~1,null());
   SRST.cntx_pop();
   _SRST:=exec('obj_new','#buf','SRST');
   _formula:="_b.get()";
   exec('FindAndGet','#table',SRST,_srst,,_formula,,_SRST);
   _warf:=_SRST.WARF;
   _netf:=_SRST.NETF
|| _warf:=0;
   _netf:=0
?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('EquipmentType',$DK.M().MGRP);
_obj.set('EquipmentSymbol',$DK.ref());
_obj.set('EquipmentName',DK.M().N);
_obj.set('InventoryNumber',_SRSR.NRI);
_obj.set('SerialNumber',_SRSR.NF);
_obj.set('InitialValue',_warf);
_obj.set('CurrentValue',_netf);
_obj.set('IsFixedAsset',_srsr<>'');
_obj.set('__ModifiedDate_erp',DK.idput_value());
_obj.set('__id_erp',DK.uidref()+'dostawa');

_obj.save()


\chr_EquipmentModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodanie/modyfikacja wyposażenia - parametr zapytania chr_EquipmentModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_EquipmentModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_DK_ID',_formula_json)


\chr_EquipmentModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_EquipmentModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_DK_ID')


\chr_EquipmentDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parametr zapytania chr_EquipmentDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_DK_ID')


\chr_EquipmentDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_EquipmentDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_DK_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_EquipmentAttr (atrybuty wyposażenia).
::======================================================================================================================


\chr_EquipmentAttrModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: JSON dla zapytania chr_EquipmentAttrModify.
::       Kontekst wywołania - rekord tabeli DK.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

:: W tym zastosowaniu wystawiane są tylko dostawy użyte w obrocie wyposażeniem (na tabeli KARO)
:: (warunek musi być identyczny jak dla EquimentModify z dodatkowym sprawdzeniem obecności cechy)
_is_karo_and_dkc:=0;
{? DK.PLUS='T' & DK.M().MGRP<>null() & DK.DK_C<>null()
|| KARO.cntx_psh();
   KARO.index('PRDK');
   KARO.prefix($DK.ref(),);
   {? KARO.first()
   || _is_karo_and_dkc:=1
   ?};
   KARO.cntx_pop()
?};
{? ~_is_karo_and_dkc || return(0) ?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_result:=1;

DK_C.cntx_psh();
DK_C.use(ref_name(DK.DK_C));

_it:=1; _loop:=1;

{! _it:=1 .. exec('il_atr','mat_atr')
|? _atr:=form(_it,-2,,'99');
   {? ($'DK.DK_C().M_ATR().SL_%1'[_atr])()=null()
   || _loop:=0
   || _obj.create();
      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('EquipmentSymbol',$DK.ref());
      _obj.set('EquipmentAttrName',($'DK.DK_C().M_ATR().SL_%1().NA'[_atr])());
      _obj.set('EquipmentAttrValue',($'DK.DK_C().WAR%1'[_atr])());
      _obj.set('__ModifiedDate_erp',DK.idput_value());
      _obj.set('__id_erp',DK.uidref()+'atrybut%1'[_atr]);
      _result:=_obj.save()
   ?};
   _loop>0 & _result>0
!};

DK_C.cntx_pop();
_result


\chr_EquipmentAttrModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodanie/modyfikacja atrybutów wyposażenia - parametr zapytania chr_EquipmentAttrModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_EquipmentAttrModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_DK_ID',_formula_json)


\chr_EquipmentAttrModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_EquipmentAttrModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_DK_ID')


\chr_EquipmentAttrDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parametr zapytania chr_EquipmentAttrDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_DK_ID')


\chr_EquipmentAttrDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_EquipmentAttrDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_DK_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonEquipment (wyposażenie pracownika).
::======================================================================================================================


\KARO_filter
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła służąca do ograniczenia dziedziny rekordów tabeli KARO
::       przetwarzanych podczas pierwszego zasilenia portalu
::   WE: _a - tabala DK
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100 & _a=KARO
|| KARO.clear();
   KARO.f_set(,,'KARO.TYP=\'W\' and (KARO.STATUS=\'T\' or KARO.STATUS=\'D\')')
?}


\KARO_condition
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Warunek pobierania zmodyfikowanych rekordów tabeli KARO
::       Uwaga: nie może spowodować późniejszego "wypadnięcia" rekordu z przetwarzania
::----------------------------------------------------------------------------------------------------------------------
:: Uwzględniane są tylko zapisy wydania
KARO.TYP='W'


\chr_PersonEquipmentModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: JSON dla zapytania chr_PersonEquipmentModify.
::       Kontekst wywołania - rekord tabeli KARO.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

:: W tym zastosowaniu przetwarzane są tylko zaakceptowane wydania wyposażenia
{? KARO.TYP<>'W' | (KARO.STATUS<>'T' & KARO.STATUS<>'D')
|| return(0)
?};

:: Odfiltrowanie materiałów bez pogrupy (nie powinny się pojawić)
{? KARO.M().MGRP=null()
|| KOMM.add('Dokument %1 bez wypełnionej podgrupy.'@[exec('record','#to_string',KARO.ref())]);
   return(0)
?};

:: Odfiltrowanie dokumentów bez dostawy pierwotnej (nie powinny się pojawić)
{? KARO.PRDK=''
|| KOMM.add('Dokument %1 bez dostawy pierwotnej.'@[exec('record','#to_string',KARO.ref())]);
   return(0)
?};

{? exec('FindAndGet','#table',P,KARO.P,,"P.PORTAL",'N')<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   return(0)
?};

:: Wyciągnięcie danych z zaakceptowanych zwrotów: czy wszystko rozliczone, data ostatniego rozliczenia
exec('obl_zwr4w','wyp_head');
_is_settled:=((ZKARO.ILZUZ+ZKARO.ILZWR)>=KARO.IL);
{? ZKARO.DATA=date(0,0,0)
|| _return_date:=KARO.DATAZ
|| _return_date:=ZKARO.DATA
?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('PersonId__id_Erp',exec('FindAndGet','#table',P,KARO.P,,"P.uidref()",''));
_obj.set('TransferDate',KARO.DATA);
_obj.set('ReturnDate',_return_date);
_obj.set('IsSettled',_is_settled);
_obj.set('EquipmentSymbol',KARO.PRDK);
_obj.set('__ModifiedDate_erp',KARO.idput_value());
_obj.set('__id_erp',KARO.uidref());

_obj.save()


\chr_PersonEquipmentModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodanie/modyfikacja wyposażenia pracownika - parametr zapytania chr_PersonEquipmentModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonEquipmentModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_KARO_ID',_formula_json)


\chr_PersonEquipmentModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonEquipmentModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_KARO_ID')


\chr_PersonEquipmentDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parametr zapytania chr_PersonEquipmentDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;

:: Obsługa "wysyłania", czyli zmienił się rekord.
{? _env.Type=exec('mwac_type_send','synchro')
|| KARO.cntx_psh();
   KARO.prefix();
:: Jeżeli została wycofana akceptacja wydania wyposażenia, to dane są usuwane z portalu
   {? KARO.seek(_env.Param)
   || _ok:=KARO.TYP='W' & (KARO.STATUS='N' | KARO.STATUS='Z')
   || _ok:=0
   ?};
   KARO.cntx_pop()
|| _ok:=1
?};

{? _ok
|| params_exec('Delete_args','portal_core','PORTAL_KARO_ID')
|| KOMM.add('Wiersz nie wymagał usunięcia.'@);
   ~~
?}


\chr_PersonEquipmentDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonEquipmentDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_KARO_ID')


::======================================================================================================================


\chr_PersonRequestType_GET_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Parametr zapytania chr_PersonRequestType_GET
::   WY:
::----------------------------------------------------------------------------------------------------------------------
''


\chr_PersonRequestType_GET_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonRequestType_GET
:: ~OST: INWINBTN
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;

params_set(params_get());
_env:=params_get().env;
_response:=_env.InetResponse;
_method:=_env.MethodName;
_methodParam:=
   {? var_pres('Param',_env)=type_of(obj_new(1))
   || _env.Param
   || obj_new('showProgress','id','type')
   ?};
_progress:={? var_pres('showProgress',_methodParam)=type_of(0) || _methodParam.showProgress || 0 ?};
_etypy_id:={? var_pres('id',_methodParam)=type_of('') || _methodParam.id || '' ?};
_reqTypes:=exec('types','portal_wnioski');
_reqType:={? var_pres('type',_methodParam)=type_of('') || _methodParam.type || _reqTypes.portal ?};

{? _progress || exec('PROGRESS','#object') ?};
exec('__RQ_BT','object');
_buffer:=obj_new('response','types');
_buffer.response:=obj_new('id','name','type','paperless');
_buffer.types:=tab_tmp(3,
   'ID_WP'     ,'STRING[%1]'[$MS.fld_len('ETYPY','ID_WP')]     ,MS.comment('ETYPY','ID_WP'),
   'ID_WP_B'   ,'STRING[%1]'[$MS.fld_len('ETYPY','ID_WP_B')]   ,MS.comment('ETYPY','ID_WP_B'),
   'W_PORTAL'  ,'STRING[%1]'[$MS.fld_len('ETYPY','W_PORTAL')]  ,MS.comment('ETYPY','W_PORTAL'),
   'NAZWA'     ,'STRING[%1]'[$MS.fld_len('ETYPY','NAZWA')]     ,MS.comment('ETYPY','NAZWA'),
   'CH'        ,'STRING[1]'                                    ,'Wybrany [\'T\'/\'N\']'@,
   'REF'       ,'STRING[16]'                                   ,'ETYPY.ref'
);
_index:=_buffer.types.ndx_tmp(,,'CH',,,'ID_WP',,,'ID_WP_B',,);

:: _data zawiera zawsze plik w unikodzie do odczytu
_data:=exec('datafile','sync_mwa',_response.Data);

{? _response.Status=200
|| _jman:=exec('json_man','__jsonm',_data,'silent');
   _obj:=json_parse(_data
      ,'%1Response'[_method],'Response'
      ,'Array%1Result'[_method],'ArrayResult'
      ,'%1Result'[_method],'Result'
   );
   {? _jman.Valid=0
   || KOMM.error(exec('status_notOK','portal_engine',_response.Status,_data),0)
   || {? _jman.getValue('%1Response.Array%1Result.Status'[_method])<>1
      || KOMM.error(
            'Błąd %1 (%2)'@
            [$_obj.Response.ArrayResult.ErrorCode,utf8_maz(_obj.Response.ArrayResult.ErrorMessage)],0
         )

      |? _jman.typeOf('%1Response.Array%1Result.%1Result'[_method],1)='A'
      ||
         TYPOBIEG.cntx_psh();
         TYPOBIEG.index('UNIK'); TYPOBIEG.prefix('Obieg wniosków',);
         _buffer.response.type:={? TYPOBIEG.first() || TYPOBIEG.ref() || null() ?};
         TYPOBIEG.cntx_pop();
         _params:=obj_ntab_add(params_get(),'buffer','index','progress','etypy_id','reqType','modes');
         _params.buffer:=_buffer;
         _params.index:=_index;
         _params.progress:=_progress;
         _params.etypy_id:=_etypy_id;
         _params.reqType:=_reqType;
         _params.modes:=obj_new('parent','child');
         _params.modes.parent:=0;
         _params.modes.child:=1;
         params_set(_params);
         exec('parse','portal_method_chr',_data,
            "
               _params:=params_get();
               _buffer:=_params.buffer;
               _reqType:=_params.reqType;
               _modes:=_params.modes;
               _etypy_id:=_params.etypy_id;
               _mode:={? var_pres('_a')=type_of(0) || _a || return() ?};
               _element:={? var_pres('_b')=type_of('') || _b || return() ?};
               _value:=_c;
               _isHeader:=\"_el:={? var_pres('_a')=type_of('') || _a || return(0) ?}; 1+_el='['\";

               {? _mode=_modes.parent
               || {? _isHeader(_element)
                  || _buffer.response.id:=_buffer.response.name:='';
                     _buffer.response.paperless:=0
                  ?}
               |? _mode=_modes.child
               || {? _element='ParDefName'
                  || _buffer.response.id:=_value
                  |? _element='ParDefDescription'
                  || _buffer.response.name:=_value
                  |? _element='IsPaperless'
                  || _buffer.response.paperless:=_value
                  |? _isHeader(_element)
                  || typobi:=2;
                     ETYPY.cntx_psh();
                     ETYPY.index('UNIK_WP');
                     ETYPY.prefix(_buffer.response.type,_reqType,_buffer.response.name,);
                     {? (_etypy_id='' & ~ETYPY.first()) | (_etypy_id<>'' & ETYPY.first() & ETYPY.ID_WP=_etypy_id)
                     ||
                        _buffer.types.blank();
                        _buffer.types.ID_WP:=_buffer.response.id;
                        _buffer.types.ID_WP_B:=_buffer.response.id;
                        _buffer.types.W_PORTAL:=_reqType;
                        _buffer.types.NAZWA:=_buffer.response.name;
                        _buffer.types.CH:={? _etypy_id='' || 'N' || 'T' ?};
                        _buffer.types.add(1)
                     ?};
                     ETYPY.cntx_pop()
                  ?}
               ?}
            "
         );

         _download:="""
            _params:=params_get();
            _buffer:=_params.buffer;
            _index:=_params.index;
            _windowActive:=('""+_a+""'='T');

            _buffer.types.cntx_psh();
            _buffer.types.index(_index);
            _buffer.types.prefix('T',);
            _selected:=_buffer.types.first();
            _buffer.types.cntx_pop();

            {? _selected
            ||
               {? _windowActive || sel_exit() ?};

               ETYPY.cntx_psh();
               _buffer.types.index(_index);
               _buffer.types.prefix('T',);
               {? _loop:=_buffer.types.first()
               ||
                  {? _windowActive
                  || {!
                     |? _loop
                     |!
                        ETYPY.prefix();
                        ETYPY.blank();
                        ETYPY.TYPOBIEG:=_buffer.response.type;
                        ETYPY.ID_WP:=_buffer.types.ID_WP;
                        ETYPY.ID_WP_B:=_buffer.types.ID_WP_B;
                        ETYPY.W_PORTAL:=_buffer.types.W_PORTAL;
                        ETYPY.NAZWA:=_buffer.types.NAZWA;
                        ETYPY.AKTYWNY:='N';
                        ETYPY.BT_WP:={? __RQ_BT.exists(ETYPY.ID_WP_B) || 'T' || 'N' ?};
                        {? ETYPY.add(1)
                        || KOMM.add('Dodano typ wniosku: [%1]'@[_buffer.types.NAZWA]);
                           _buffer.types.REF:=$ETYPY.ref();
                           _buffer.types.put(1)
                        || KOMM.error('Nie udało się dodać typu wniosku: [%1 (%2)]'@
                              [_buffer.types.NAZWA,_buffer.types.ID_WP],0
                           )
                        ?};
                        _loop:=_buffer.types.next()
                     !}
                  ||
                     _buffer.types.REF:=$ETYPY.ref();
                     _buffer.types.put(1)
                  ?}
               ?};
               ETYPY.cntx_pop();

               _progress:=_params.progress;
               _etypy_id:=_params.etypy_id;
               _reqType:=_params.reqType;

               {? _buffer.types.first()
               || {? _progress || PROGRESS.set(_buffer.types.size,'Pobieranie definicji wniosków'@) ?};
                  {!
                  |?
                     {? (_etypy_id='' & _buffer.types.REF<>'') | _etypy_id=_buffer.types.ID_WP
                     ||
                        _methodParam:=obj_new('id','type','ref');
                        _methodParam.id:=_buffer.types.ID_WP;
                        _methodParam.type:=_reqType;
                        _methodParam.ref:=_buffer.types.REF;
                        exec('run_mwac','sync_mwa','PORTAL_HR_CFG','chr_PersonRequestParDefsGet',0,,_methodParam);
                        obj_del(_methodParam)
                     ?};
                     {? _progress || PROGRESS.next() ?};

                     _buffer.types.next()
                  !};
                  {? _progress || PROGRESS.close() ?}
               ?}
            || FUN.info('Nie wybrano typów wniosków do pobrania.'@)
            ?}
         """;

         _showWindow:=({? _etypy_id='' || 'T' || 'N' ?});

         {? _showWindow='T'
         ||
            _height:={? _buffer.types.size()<9 || _buffer.types.size()+1 || 30 ?};
            _ws:=_buffer.types.mk_sel('Typy wniosków z Portalu HR'@,,0,'#reqtypespor',,,_height,,'U');
            _buffer.types.win_fld(_ws,,'ID_WP',,,20);
            _buffer.types.win_fld(_ws,,'NAZWA',,,40);
            _buffer.types.win_fld(_ws,,'CH',,,-8,,,'Wybrany'@,,'Wybrany [\'T\'/\'N\']'@,2,,"'T'","'N'");

            _act:=obj_new('download','choose');
            _act.download:=obj_new('name','tag','form','btn_cfg');
            _act.choose:=obj_new('name','tag','form','btn_cfg');

            _act.download.name:='Pobierz%1'@@[{? _reqType=_reqTypes.paperless || ' jako paperless'@ || '' ?}];
            _act.download.tag:='P';
            _act.download.form:=$_download(_showWindow);
            _act.download.btn_cfg:=',panel=bottom,align=end';

            _act.choose.name:='Wybierz'@@;
            _act.choose.tag:='W';
            _act.choose.form:="
               _tab:=cur_tab(1,1);
               _tab.CH:={? _tab.CH='N' || 'T' || 'N' ?};
               _tab.put()
            ";
            _act.choose.btn_cfg:=',panel=right,align=begin';

            _buffer.types.win_act(_ws,
               ,'Formuła',_act.choose.name,,,_act.choose.form,,1,1,"sel_nchk()",,_act.choose.tag
            );
            _buffer.types.win_act(_ws,
               ,'Formuła',_act.download.name,,,_act.download.form,,,,,,_act.download.tag);

            _buffer.types.win_btn(_ws,'text=%1%2'[_act.choose.name,_act.choose.btn_cfg],
               'menu:%1' [_act.choose.tag]
            );
            _buffer.types.win_btn(_ws,'text=%1%2'[_act.download.name,_act.download.btn_cfg],
               'menu:%1' [_act.download.tag]
            );

            _buffer.types.win_sel(_ws);

            {? ~_buffer.types.select()
            || KOMM.add('%1. %2.'@['Operacja wycofana'@,'Nie pobrano nowych typów wniosków'@])
            ?}
         ||
            ($_download(_showWindow))()
         ?}
      ?}
   ?}

|| KOMM.error(exec('status_notOK','portal_engine',_response.Status,_data),0)
?};

_buffer.types.ndx_drop(_index);
obj_del(_data);

_result


\chr_PersonReqDefsGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parametr zapytania chr_PersonRequestParDefsGet
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_methodParam:={? var_pres('Param',_env)=type_of(obj_new(1)) || _env.Param || ~~ ?};
_id_wp:=
   {? var_pres('_methodParam')=type_of(obj_new(1)) & var_pres('id',_methodParam)=type_of('')
   || _methodParam.id
   || ''
   ?};

_jman:=exec('json_man','__jsonm','{}');
_jman.setObject(_path:=_jman.addChildElement('','Arraychr_PersonRequestParDefsGetData'),'{}');
_jman.setObject(_path:=_jman.addChildElement(_path,'chr_PersonRequestParDefsGetData'),'[]');
_jman.setObject(_path1:=_jman.addChildElement(_path),'{}');
_jman.setValue(_jman.addChildElement(_path1,'ParDefName'),_id_wp);

_args:=obj_new('JSON');
_args.JSON:=_jman.getJSON();

_args


\chr_PersonReqDefsGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonRequestParDefsGet
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_response:=_env.InetResponse;
_method:=_env.MethodName;
_methodParam:={? var_pres('Param',_env)=type_of(obj_new(1)) || _env.Param || obj_new('type','ref') ?};
_reqTypes:=exec('types','portal_wnioski');
_reqType:={? var_pres('type',_methodParam)=type_of('') || _methodParam.type || _reqTypes.portal ?};
_ref:={? var_pres('ref',_methodParam)=type_of('') & +_methodParam.ref=16 || _methodParam.ref || null ?};
_result:=~~;

:: _data zawiera zawsze plik w unikodzie do odczytu
_data:=exec('datafile','sync_mwa',_response.Data);

{? _response.Status=200
|| _jman:=exec('json_man','__jsonm',_data,'silent');
   _obj:=json_parse(_data
      ,'%1Response'[_method],'Response'
      ,'Array%1Result'[_method],'ArrayResult'
      ,'%1Result'[_method],'Result'
   );
   {? _jman.Valid=0
   || KOMM.error(exec('status_notOK','portal_engine',_response.Status,_data),0)
   || {? _jman.getValue('%1Response.Array%1Result.Status'[_method])<>1
      || KOMM.error(
            'Błąd %1 (%2)'@
            [$_obj.Response.ArrayResult.ErrorCode,utf8_maz(_obj.Response.ArrayResult.ErrorMessage)],0
         )

      |? _jman.typeOf('%1Response.Array%1Result.%1Result'[_method],1)='A'
      ||
         VAR_DEL.delete('TmpObj');
         TmpObj:=obj_new(
            'clear','set',
            'ParDefName','Caption','ParType','LookupField','LookupType','LookupCode',
            'Width','DesignProps_Column','DesignProps_Row','SectionName','MaxLength','Hint',
            'CaptionWidth','Visible','Readonly','Required','MinValue','MaxValue',
            'FormatString','DefaultValue','IsSTD','Idx'
         );
         TmpObj.clear:="
            .ParDefName:=.Caption:=.ParType:=.LookupField:=.LookupType:=.LookupCode:='';
            .Width:=.DesignProps_Column:=.DesignProps_Row:=0;
            .SectionName:=.Hint:='';
            .MaxLength:=.CaptionWidth:=.Visible:=.Readonly:=.Required:=.MinValue:=.MaxValue:=0;
            .FormatString:=.DefaultValue:='';
            .IsSTD:=.Idx:=0
         ";
         TmpObj.set:="
            {? var_pres(_a,TmpObj)>0
            || ($('TmpObj.'+_a+':=_a'))(_b)
            ?}
         ";
         _params:=obj_ntab_add(params_get(),'reqType','reqTypes','ref');
         _params.reqType:=_reqType;
         _params.reqTypes:=_reqTypes;
         _params.ref:=_ref;
         params_set(_params);
         exec('parse','portal_method_chr',_data,"
            _par:=params_get();
            _reqType:=_par.reqType;
            _reqTypes:=_par.reqTypes;
            _ref:=_par.ref;
            ETYPY.cntx_psh();
            ETYPY.prefix();
            {? ETYPY.seek(_ref,,1)
            || {? _a=0
               || {? 1+_b='['
                  || TmpObj.clear()
                  ?}
               |? _a=1
               || {? 1+_b='['
                  || _str:=spli_str(TmpObj.ParDefName,'\\\\');
                     {? obj_len(_str)=4
                     || _id_wp:=_str[3]+_str[4];
                        TAT.cntx_psh();
                        TAT.index('ID_WP');
                        TAT.prefix(_id_wp,);
                        {? TAT.first()
                        || 1
                        || TAT.cntx_psh();
                           TAT.index('NA'); TAT.prefix();
                           _nr2:=0;
                           {!
                           |? _naz:={? _reqType=_reqTypes.paperless || 'paperless' || 'portal' ?}+$_nr2;
                              {? TAT.find_key(_naz,)
                              || _nr2+=1; 1
                              ?}
                           !};
                           TAT.cntx_pop();
                           TAT.blank();
                           TAT.NA:=_naz;
                           TAT.ID_WP:=_id_wp;
                           TAT.MIEJSCE:='W';
                           TAT.add()
                        ?};
                        TAT.TYP:=exec('ETYPY_fld_typ','portal_method_chr',TmpObj.ParType,1);
                        TAT.OPIS:={? TAT.TYP='O' & TmpObj.DefaultValue<>'' || TmpObj.DefaultValue || TmpObj.Caption ?};
                        TAT.W_PORTAL:=_reqType;
                        _lookup_type:={? TmpObj.LookupField=exec('customField','portal_slowniki')
                                      || ''
                                      || TmpObj.LookupType
                                      ?};
                        TAT.PORSLO:=exec('porslo_add','portal_slowniki',
                           TmpObj.LookupField,_lookup_type,TmpObj.LookupCode,,,,'N'
                        );
                        {? TmpObj.LookupField=exec('customField','portal_slowniki')
                        || TAT.PORTYPE:=TmpObj.LookupType
                        ?};
                        TAT.put();
                        _tat:=TAT.ref();
                        TAT.cntx_pop();
                        ETYP_ATR.cntx_psh();
                        ETYP_ATR.index('TATZ');
                        ETYP_ATR.prefix(ETYPY.ref(),null,_tat);
                        {? ETYP_ATR.first()
                        || 1
                        || ETYP_ATR.cntx_psh();
                           ETYP_ATR.index('KOLZ'); ETYP_ATR.prefix(ETYPY.ref(),null);
                           _nr:={? ETYP_ATR.last() || ETYP_ATR.KOL+1 || 1 ?};
                           ETYP_ATR.cntx_pop();
                           ETYP_ATR.blank();
                           ETYP_ATR.ETYPY:=ETYPY.ref();
                           ETYP_ATR.TAT:=_tat;
                           ETYP_ATR.KOL:=_nr;
                           ETYP_ATR.add()
                        ?};
                        ETYP_ATR.ID_WP:=_str[4];
                        ETYP_ATR.SEC_IDX:=TmpObj.Idx;
                        ETYP_ATR.SECTION:=TmpObj.SectionName;
                        ETYP_ATR.HINT:=TmpObj.Hint;
                        ETYP_ATR.MAX_LENG:=TmpObj.MaxLength;
                        ETYP_ATR.WIDTH:=TmpObj.Width;
                        ETYP_ATR.COLUMN:=TmpObj.DesignProps_Column;
                        ETYP_ATR.ROW:=TmpObj.DesignProps_Row;
                        ETYP_ATR.MINVALUE:=TmpObj.MinValue;
                        ETYP_ATR.MAXVALUE:=TmpObj.MaxValue;
                        TAT.cntx_psh();
                        {? ETYP_ATR.TAT().TYP<>'W' | var_press('DEF_MEMO',ETYP_ATR)<=0
                        || ETYP_ATR.DEFAULT:=TmpObj.DefaultValue
                        || ETYP_ATR.memo_set(TmpObj.DefaultValue,'DEF_MEMO');
                           ETYP_ATR.memo_put(,'DEF_MEMO')
                        ?};
                        TAT.cntx_pop();
                        ETYP_ATR.WYMAG:={? TmpObj.Required || 'T' || 'N' ?};
                        ETYP_ATR.EDIT:={? TmpObj.Readonly || 'T' || 'N' ?};
                        ETYP_ATR.VISIBLE:=TmpObj.Visible;
                        ETYP_ATR.CAP_SIZE:=TmpObj.CaptionWidth;
                        ETYP_ATR.put();
                        ETYP_ATR.cntx_pop()
                     ?}
                  || TmpObj.set(_b,_c);
                     {? _b='IsSTD' & var_pres('IsSTD',TmpObj)=type_of(1)
                     || _std_wp:=ETYPY.STD_WP='T';
                        {? _std_wp<>TmpObj.IsSTD
                        || ETYPY.STD_WP:={? TmpObj.IsSTD || 'T' || 'N' ?};
                           ETYPY.put()
                        ?}
                     ?}
                  ?}
               ?}
            ?};
            ETYPY.cntx_pop()
         ")
      ?}
   ?}
?};

obj_del(_data);

_result


\ETYPY_fld_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Ustawia typ danego pola (TAT.TYP)
::   WE: _a - typ
::       _b - 1 z json do TAT.TYP, 2 z TAT.TYP do json
::----------------------------------------------------------------------------------------------------------------------
{? _b=1
|| {? _a='TSLBoolean' | _a='Statement'
::    Typ "Statement" wymaga dedykowanej obsługi, ale w tej chwili możemy sobie pozwolić jedynie na obejście tematu.
   || 'B'
   |? _a='TSLDescription' | _a='Napis'
   || 'T'
   |? _a='TSLDate' | _a='Data'
   || 'D'
   |? _a='TSLInt'
   || TAT.CZY_PREC:='N';
      'L'
   |? _a='TSLAmount' | _a='TSLMoneyWL'
   || TAT.CZY_PREC:='T';
      'L'
   |? _a='TSLMemo' | _a='Memo'
   || 'W'
   |? _a='TSLTime'
   || 'C'
   |? _a='TSLDateTime'
   || 'I'
   |? _a='Label'
   || 'O'
   || '?'
   ?}
|| {? _a='B'
   || 'TSLBoolean'
   |? _a='T'
   || 'TSLDescription'
   |? _a='D'
   || 'TSLDate'
   |? _a='L'
   || {? TAT.CZY_PREC<>'T'
      || 'TSLInt'
::       'TSLAmount' | 'TSLMoneyWL'
      || 'TSLMoneyWL'
      ?}
   |? _a='W'
   || 'TSLMemo'
   |? _a='C'
   || 'TSLTime'
   |? _a='I'
   || 'TSLDateTime'
   |? _a='O'
   || 'Label'
   || '?'
   ?}
?}


\chr_PersonReqDefsModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Wysyłanie definicji typów wniosków - argumenty
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_json:=~~;

:: Parametr wejściowy ETYPY.uidref
_uidref:=_env.Param;
ETYPY.cntx_psh();
ETYPY.prefix();
{? ETYPY.seek(_uidref) & ETYPY.AKTYWNY='T'
|| {? 'TPs'*ETYPY.W_PORTAL & exec('is_act_b_proc','obiegi2',ETYPY.ref())
   || _customField:=exec('customField','portal_slowniki');
      _jman:=exec('json_man','__jsonm','{}');
      _jman.setObject(_path:=_jman.addChildElement('','Arraychr_PersonRequestParDefsModifyData'),'{}');
      _jman.setObject(_path:=_jman.addChildElement(_path,'chr_PersonRequestParDefsModifyData'),'[]');
      _jman.setObject(_path1:=_jman.addChildElement(_path),'{}');
      _jman.setValue(_jman.addChildElement(_path1,'ParDefName'),ETYPY.ID_WP);
      _jman.setValue(_jman.addChildElement(_path1,'Caption'),ETYPY.NAZWA);
      _jman.setValue(_jman.addChildElement(_path1,'RowRightsName'),ETYPY.ID_WP);
      _jman.setObject(_path2:=_jman.addChildElement(_path1,'Arraychr_PersonRequestParDefsModifyDataItem'),'{}');
      _jman.setObject(_path3:=_jman.addChildElement(_path2,'chr_PersonRequestParDefsModifyDataItem'),'[]');
      ETYP_ATR.cntx_psh();
      ETYP_ATR.index('KOLZ'); ETYP_ATR.prefix(ETYPY.ref(),null);
      {? ETYP_ATR.first()
      || {!
         |? _jman.setObject(_path4:=_jman.addChildElement(_path3),'{}');
            _jman.setValue(_jman.addChildElement(_path4,'ParDefName'),
               'SLO\\chr_PersonRequest\\%1\\%2'[ETYPY.ID_WP,ETYP_ATR.ID_WP]);
            _jman.setValue(_jman.addChildElement(_path4,'Caption'),{? ETYP_ATR.TAT().TYP='O' & ETYP_ATR.DEFAULT<>'' || ETYP_ATR.DEFAULT || ETYP_ATR.TAT().OPIS ?});
            _parTyp:=exec('ETYPY_fld_typ','portal_method_chr',ETYP_ATR.TAT().TYP,2);
            _jman.setValue(_jman.addChildElement(_path4,'ParType'),_parTyp);
            _lookupField:={? TAT.PORSLO || TAT.PORSLO().FIELD || '' ?};
            _jman.setValue(_jman.addChildElement(_path4,'LookupField'),_lookupField);
            _lookupType:={? _lookupField=_customField
                         || TAT.PORTYPE
                         || {? TAT.PORSLO || TAT.PORSLO().TYPE || '$$$' ?}
                         ?};
            _jman.setValue(_jman.addChildElement(_path4,'LookupType'),_lookupType);
            _lookupCode:={? TAT.PORSLO || TAT.PORSLO().CODE || ~~ ?};
            _jman.setValue(_jman.addChildElement(_path4,'LookupCode'),_lookupCode);
            _jman.setValue(_jman.addChildElement(_path4,'Width'),ETYP_ATR.WIDTH);
            _jman.setValue(_jman.addChildElement(_path4,'DesignProps_Column'),ETYP_ATR.COLUMN);
            _jman.setValue(_jman.addChildElement(_path4,'DesignProps_Row'),ETYP_ATR.ROW);
            _jman.setValue(_jman.addChildElement(_path4,'Idx'),ETYP_ATR.SEC_IDX);
            _jman.setValue(_jman.addChildElement(_path4,'SectionName'),ETYP_ATR.SECTION);
            _jman.setValue(_jman.addChildElement(_path4,'MaxLength'),ETYP_ATR.MAX_LENG);
            _jman.setValue(_jman.addChildElement(_path4,'Hint'),ETYP_ATR.HINT);
            _jman.setValue(_jman.addChildElement(_path4,'CaptionWidth'),ETYP_ATR.CAP_SIZE);
            _jman.setValue(_jman.addChildElement(_path4,'Visible'),ETYP_ATR.VISIBLE);
            _jman.setValue(_jman.addChildElement(_path4,'Readonly'),ETYP_ATR.EDIT='T');
            _jman.setValue(_jman.addChildElement(_path4,'Required'),ETYP_ATR.WYMAG='T');
            _jman.setValue(_jman.addChildElement(_path4,'MinValue'),ETYP_ATR.MINVALUE);
            _jman.setValue(_jman.addChildElement(_path4,'MaxValue'),ETYP_ATR.MAXVALUE);
            _jman.setValue(_jman.addChildElement(_path4,'FormatString'),~~);
            _jman.setValue(_jman.addChildElement(_path4,'DefaultValue'),exec('etypatr_default','obiegi2'));
            _jman.setValue(_jman.addChildElement(_path4,'RowRightsName'),ETYPY.ID_WP);
            ETYP_ATR.next()
         !}
      ?};
      ETYP_ATR.cntx_pop();
      _json:=_jman.getJSON()
   |? ETYPY.W_PORTAL='N' & ETYPY.IN_POR & exec('is_act_b_proc','obiegi2',ETYPY.ref())
   || _jman:=exec('json_man','__jsonm','{}');
      _jman.setObject(_path:=_jman.addChildElement('','Arraychr_PersonRequestParDefsModifyData'),'{}');
      _jman.setObject(_path:=_jman.addChildElement(_path,'chr_PersonRequestParDefsModifyData'),'[]');
      _jman.setObject(_path1:=_jman.addChildElement(_path),'{}');
      _jman.setValue(_jman.addChildElement(_path1,'ParDefName'),ETYPY.ID_WP);
      _jman.setValue(_jman.addChildElement(_path1,'Caption'),ETYPY.NAZWA);
      _jman.setObject(_path2:=_jman.addChildElement(_path1,'Arraychr_PersonRequestParDefsModifyDataItem'),'{}');
      _jman.setObject(_path3:=_jman.addChildElement(_path2,'chr_PersonRequestParDefsModifyDataItem'),'[]');
      {! _ii:=1..3
      |! _jman.setObject(_path4:=_jman.addChildElement(_path3),'{}');
         _jman.setValue(
            _jman.addChildElement(_path4,'ParDefName'),
            'SLO\\chr_PersonRequest\\%1\\%2'[ETYPY.ID_WP,'par'+$_ii]
         );
         _caption:={? _ii=1 || 'Id'
                   |? _ii=2 || 'Treść'
                   || 'Opis'
                   ?};
         _jman.setValue(_jman.addChildElement(_path4,'Caption'),_caption);
         _parTyp:=exec('ETYPY_fld_typ','portal_method_chr','T',2);
         _jman.setValue(_jman.addChildElement(_path4,'ParType'),_parTyp);
         _jman.setValue(_jman.addChildElement(_path4,'LookupField'),'');
         _jman.setValue(_jman.addChildElement(_path4,'LookupType'),'$$$');
         _jman.setValue(_jman.addChildElement(_path4,'LookupCode'),~~);
         ~~
      !};
      _jman.setValue(_jman.addChildElement(_path1,'RowRightsName'),ETYPY.ID_WP);
      _jman.setValue(_jman.addChildElement(_path1,'RemoteAddLink'),exec('ETYPY_link','portal_interm'));
      _json:=_jman.getJSON()
   ?}
?};
ETYPY.cntx_pop();
_json


\chr_PersonReqDefsModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Wysyłanie definicji typów wniosków - interpretacja odpowiedzi
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_response:=_env.InetResponse;
_result:=~~;

:: _data zawiera zawsze plik w unikodzie do odczytu
_data:=exec('datafile','sync_mwa',_response.Data);

{? _response.Status=200
|| VAR_DEL.delete('TmpRes');
   TmpRes:=obj_new(
      'set','clear',
      'Status','ErrorCode','ErrorMessage'
   );
   TmpRes.clear:="
      .Status:=-1;
      .ErrorCode:=-1;
      .ErrorMessage:=''
   ";
   TmpRes.set:="
      {? var_pres(_a,TmpRes)>0
      || ($('TmpRes.'+_a+':=_a'))(_b)
      ?}
   ";
   TmpRes.clear();
   exec('parse','portal_method_chr',_data,"{? _a=1 & 1+_b<>'[' || TmpRes.set(_b,_c) ?}");
   {? TmpRes.Status<>1
   || KOMM.error(exec('status_notOK','portal_engine',_response.Status,_data),0)
   || _result:=1
   ?}
|| KOMM.error(exec('status_notOK','portal_engine',_response.Status,_data),0)
?};

obj_del(_data);

_result


\parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: _a - json (tekst, plik) lub tabela
::       _b - formuła wykonywana dla elementów
::       _c - element nadrzędny tabeli
::----------------------------------------------------------------------------------------------------------------------
_fml:={? var_pres('_b')>0 || _b || "" ?};
_nad:={? var_pres('_c')>0 || _c || 0 ?};
params_set(params_get());
{? var_pres('_a')=type_of('') | var_pres('_a')=exec('type_of_file','#var')
|| _tab:=json_tparse(_a,,0);
   {? var_pres('_tab')>0
   || _i2:=_tab.ndx_tmp('',1,'TREE',,0, 'INDEX',,0);
      _tab.index(_i2)
::      _win:=_tab.mk_sel('test','P',,'jtparse',,,,1);
::      _tab.win_fld(_win,,'NAME',,,30);
::      _tab.win_sel(_win);
::      _tab.select()

   || return()
   ?}
|| _tab:=_a
?};
_tab.cntx_psh();
_tab.prefix(_nad);
_tab.cntx_psh();
_ch:=_tab.first();
_tab.cntx_pop();
_val:={? _tab.TYPE='N' || #_tab.VAL || {? _tab.VTRUNC='N' || _tab.VAL || exec('blob2txt','portal_engine',_tab.BVAL) ?} ?};
{? _ch
|| _fml(0,_tab.NAME,_val)
?};
{? _tab.first()
|| {!
   |? params_exec('parse','portal_method_chr',_tab,_fml,#_tab.ref());
      _tab.next()
   !}
?};
_tab.cntx_pop();
_fml(1,_tab.NAME,_val)


\chr_PersonReqDefsDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Kasowanie definicji typów wniosków - argumenty
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_method:=_env.MethodName;
_id_wp:=_env.Param;

:: sytuacja wyjątkowa bo w tym zapytaniu nie mamy __id_erp oraz __id_cloud wysyłamy tylko identyfikator wniosku
_par:='[{"ParDefName":"%1"}]'[_id_wp];
_res:='{"Array%1Data": {"%1Data": %2}}'[ _method,_par];
_res


\chr_PersonReqDefsDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Kasowanie definicji typów wniosków - argumenty
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','')


\chr_RequestTypeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: JSON dla zapytania  chr_RequestTypeModify.
::       Kontekst wywołania - rekord tabeli ETYPY.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

:: Wnioski o urlop - wysyłamy.
_wu:=ETYPY.W_PORTAL='X' & ETYPY.AKTYWNY='T' & ETYPY.RODZ_WP;
{? _wu
|| 'Wysyłamy'
:: przetwarzane są tylko rekordy z zaznaczonym polem WID_WP
|? 'TPsDN'*ETYPY.W_PORTAL=0 | ETYPY.W_PORTAL='N' & ~ETYPY.IN_POR | ETYPY.WID_WP<>'T'
|| return(0)
?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();
_obj.set('__id_cloud',{? _id || _id || ~~ ?});
{? ETYPY.W_PORTAL='D'
|| _typ:=(12-ETYPY.ID_WP);
   _obj.set('RequestType',_typ);
   _obj.set('RequestName',ETYPY.NAZWA);
   _obj.set('RequestTarget',255);
   _obj.set('IsActive',ETYPY.AKTYWNY='T');
   _obj.set('BaseRequestType',_typ);
   _obj.set('IsPaperless',0)
|| exec('__RQ_GR','object');
   _obj.set('RequestType',ETYPY.ID_WP);
   _obj.set('RequestName',ETYPY.NAZWA);
   _obj.set('RequestDescription',ETYPY.NAZWA);
   _obj.set('RequestGroup',ETYPY.GRUPA_WP);
   _obj.set('Icon',__RQ_GR.getIcon(ETYPY.GRUPA_WP));
   _obj.set('RequestTag',ETYPY.TAGI_WP);
   _obj.set('IsAttachmentReq',ETYPY.ZAL_WP);
   _obj.set('RequestTarget',ETYPY.RODZ_WP);
   _obj.set('IsActive',ETYPY.AKTYWNY='T');
   _obj.set('BaseRequestType',ETYPY.ID_WP_B);
   _obj.set('IsPaperless',ETYPY.W_PORTAL='P')
?};
{? (_json:=exec('ETYPY_akc_json','portal_paperless'))<>''
|| _obj.set('AcceptanceCondition',_json)
?};
_obj.set('__ModifiedDate_erp',ETYPY.idput_value());
_obj.set('__id_erp',ETYPY.uidref());

_obj.set('IsVisible',ETYPY.WID_WP='T');
::_obj.set('MailLink',);


_obj.save()


\chr_RequestTypeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Mmodyfikacja typu wniosku - rekord tabeli ETYPY.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_RequestTypeModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_ETYPY_RT_ID',_formula_json)


\chr_RequestTypeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_RequestTypeModify.
::   WEl
::----------------------------------------------------------------------------------------------------------------------
_res:=params_exec('Modify_parse','portal_core','PORTAL_ETYPY_RT_ID');
{? type_of(_res)=0
|| _env:=params_get().env;
   _uidref:=_env.Param;
:: !!! Obsługa paczki | _env.Param jest napisem (uidref-em) lub tabelą tymczasową, z jednym polem UIDREF.
   ETYPY.cntx_psh();
   ETYPY.index('UNIK_WP');
   ETYPY.prefix();
   {? ETYPY.seek(_uidref) & ETYPY.STD_WP<>'N'
   || ETYPY.STD_WP:='N';
      ETYPY.trig_off('*','*');
      ETYPY.put();
      ETYPY.trig_on('*','*')
   ?};
   ETYPY.cntx_pop()
?};
_res


\chr_RequestTypeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parametr zapytania chr_RequestTypeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;

:: Obsługa "wysyłania", czyli zmienił się rekord.
_ok:=1;
{? _env.Type=exec('mwac_type_send','synchro')
|| ETYPY.cntx_psh();
   ETYPY.prefix();
:: Jeżeli została wycofana widoczność typu wniosku, to dane są usuwane z portalu
   {? ETYPY.seek(_env.Param)
   || _ok:=
         (ETYPY.W_PORTAL='X' & (ETYPY.AKTYWNY<>'T' | ~ETYPY.RODZ_WP)) |
         (ETYPY.W_PORTAL='T' & (ETYPY.WID_WP<>'T' | ETYPY.AKTYWNY<>'T'))
   ?};
   ETYPY.cntx_pop()
?};

{? _ok
|| params_exec('Delete_args','portal_core','PORTAL_ETYPY_RT_ID')
|| KOMM.add('Wiersz nie wymagał usunięcia.'@);
   ~~
?}


\chr_RequestTypeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_RequestTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_ETYPY_RT_ID')


\chr_PersonRequestGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Parametry zapytania dla chr_PersonRequestGet
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_PersonRequestGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Przetwarzanie wyniku zapytania chr_PersonRequestGet
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_EDOKUM_ID',
   "exec('chr_PersonRequestGet_update','portal_method_chr',_a,_b)"
)


\chr_PersonRequestGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Przetwarzanie wyniku zapytania chr_PersonRequestGet
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu - dla akcji 'add', '' - dla akcji 'put','del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
|| {? exec('EDOKUM_del','portal_wnioski')
   || return('')
   || return(~~)
   ?}
?};

:: Zabezpieczenie przed dublowaniem wniosków
{? _act='add'
|| _id_erp:=_obj.getValue('__id_erp');
   {? var_pres('_id_erp')=type_of('') & _id_erp<>'' & exec('EDOKUM_pow','portal_wnioski',_id_erp)
   || return(~~)
   ?}
?};

_pid:=_obj.getValue('PersonId');
_pref:=null;
{? var_pres('_pid')>0
|| _pref:=exec('getPref','portal_core',_pid);
   {? _pref=null()
   || KOMM.error('Odnalezienie zapisu dla %1=%2 nie powiodło się.'@ ['PortalId',$_pid],0);
      return()
   ?};
   _osoba:=exec('FindAndGet','#table',P,_pref,,"P.OSOBA");
   {? _osoba=null
   || KOMM.error('Brak powiązania osoby z pracownikiem: %1'@[$_pref],0);
      return()
   ?};
   _usr:=exec('FindInSet','#table','USERS','OSOBA',_osoba,,,,,null);
   {? _usr=null
   || KOMM.error('Nie znaleziono użytkownika związanego z pracownikiem: %1'@[$_pref],0);
      return()
   ?}
|| _json_str:=_obj.getValue('__JSON');
   {? var_pres('_json_str')=type_of('')
   || _json:=json_parse(_json_str);
      {? var_pres('_json')>0
      || {? var_pres('TenantUser',_json)>0 & var_pres('LoginName',_json.TenantUser)>0
         || _login:=_json.TenantUser.LoginName;
            _usr:=exec('FindInSet','#table','USERS','WEBLOGIN',_login,,,,,null);
            {? _usr=null
            || KOMM.error('Nie znaleziono użytkownika: %1'@[_login],0);
               return()
            ?}
         ?};
         &_json
      ?}
   ?}
?};

_typ:=_obj.getValue('RequestType');
_etyp:=exec('FindInSet','#table','ETYPY','ID_WP',_typ,,,1,,null);
{? _etyp=null
|| KOMM.error('Nie znaleziono typu wniosku w obiegu o ID: %1'@[_typ],0);
   return()
?};
_ref:=~~;
_b_status:='';
EDOKUM.cntx_psh();
EDOKUM.prefix();
{? _act='add'
|| EDOKUM.use('skid_v_1');
   EDOKUM.prefix();
   EDOKUM.blank(1);
   EDOKUM.TYP:=_etyp;
   {? var_pres('_usr')>0
   || EDOKUM.USERS:=_usr
   ?};
   {? var_pres('_pref')>0
   || EDOKUM.OSOBAWWW:=$_pref
   ?};
   EDOKUM.STATUS:=exec('EDOKOS_status','portal_wnioski',_obj.getValue('RequestStatus'));
   _dtc:=_obj.getValue('CreateDate');
   {? var_pres('_dtc')=type_of('')
   || EDOKUM.DATAW:=exec('str2date','#convert',10+_dtc);
      {? var_pres('CZASW',EDOKUM)>0
      || EDOKUM.CZASW:=exec('str2time','#convert',8+(11-_dtc))
      ?}
   ?};
   _ref:=exec('EDOKUM_add','portal_wnioski')
|? _act='put'
|| _mod:={? _obj.isPath('__ModifiedDate_erp') || _obj.getValue('__ModifiedDate_erp') || '' ?};
   {? type_of(_mod)=type_of('')&+_mod
   || _mdp:=exec('str2date','#convert',10+_mod);
      _mtp:=exec('str2time','#convert',8+(11-_mod));
      _mde:=exec('str2date','#convert',10+EDOKUM.IDPUT);
      _mte:=exec('str2time','#convert',8+(11-EDOKUM.IDPUT));
::    sprawdzenie czy nie ma nowszych zmian w ERPie niż to co dostaliśmy z portalu
      _ts_erp:=exec('create','#tm_stamp',_mde,_mte);
      _ts_por:=exec('create','#tm_stamp',_mdp,_mtp);
      {? _ts_por<=_ts_erp
      || _put:=0;
         {? $_pref<>EDOKUM.OSOBAWWW
         || _put+=1;
            EDOKUM.OSOBAWWW:=$_pref
         ?};
         _b_status:=EDOKUM.STATUS;
         _new_status:=exec('EDOKOS_status','portal_wnioski',_obj.getValue('RequestStatus'));
         {? _new_status<>_b_status
         || EDOKUM.STATUS:=_new_status;
            _put+=1
         ?};
         _ref:={? _put
               || exec('EDOKUM_put','portal_wnioski')
               || EDOKUM.uidref()
               ?}
      ?}
   ?}
?};
{? _ref<>~~
|| exec('EDOKUM_att','portal_wnioski',_obj);
   _json_str:=_obj.getValue('__JSON');
   {? var_pres('_json_str')=type_of('')
   || _json:=json_parse(_json_str);
      {? var_pres('_json')>0
      || exec('EDOKUM_parse','portal_wnioski',_json)
      ?}
   ?};
   exec('EDOKUM_to_valid','portal_wnioski',_b_status)
?};
EDOKUM.cntx_pop();
_ref


\chr_PersonRequestModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Parametry zapytania dla chr_PersonRequestModify
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonRequestModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_EDOKUM_ID',_formula_json)


\chr_PersonRequestModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Parametry zapytania dla chr_PersonRequestModify
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_ret:=1;

:: walidacja
_portal:=EDOKUM.TYP().W_PORTAL;
{? 'TPsN'*_portal=0 | _portal='N' & ETYPY.IN_POR=0 | EDOKUM.STATUS=''
|| return(0)
?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('RequestType',EDOKUM.TYP().ID_WP);

_obj.set('RequestStatus',exec('EDOKOS_status','portal_wnioski',EDOKUM.STATUS));

::{? EDOKUM.STATUS='P'
::|| _obj.set('RequestComment',EDOKUM.memo_txt(,1,'UW_OPDL'))
::?};

{? 'TPN'*_portal
|| P.cntx_psh();
   P.prefix();
   _p_erp_id:={? _seek:=P.seek(EDOKUM.OSOBAWWW) || P.uidref() || EDOKUM.OSOBAWWW ?};
   {? _seek & P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.');
      _ret:=0
   ?};
   P.cntx_pop()
|? _portal='s'
|| {? exec('FindInSet','#table','USERSF','UNIK',EDOKUM.USERS,REF.FIRMA,"USERSF.PORTAL2")<>'T'
   || KOMM.add('Użytkownik: %1 nieprezentowany na portalu.'@[EDOKUM.USERS().KOD]);
      _ret:=0
   ?}
?};
{? _ret=1
|| {? var_pres('_p_erp_id')>0
   || _obj.set('PersonId__id_Erp',_p_erp_id)
   ?};
   _obj.set('__ModifiedDate_erp',EDOKUM.idput_value());
   _obj.set('__id_erp',EDOKUM.uidref());
   _obj.set('CreateDate',EDOKUM.DATAW,{? var_pres('CZASW',EDOKUM)>0 || EDOKUM.CZASW || time(0,0,0) ?});
   _obj.set('__JSON',exec('EDOKUM_atr_json','portal_wnioski'));
   _obj.set('IsPaperless',EDOKUM.PAPERLES);
   _obj.set('__BinAttachment',exec('EDOKUM_att_json','portal_wnioski'));
   {? _portal='s'
   || _obj.set('TenantCompanyId__id_erp',EDOKUM.FIRMA().uidref());
      _obj.set('TenantUserId__id_erp',EDOKUM.USERS().WEBLOGIN);
      {? EDOKUM.TYP().ZAPOT=1
      || _stat:={? EDOKUM.STATUS='Y' || 10 ?};
         _obj.set('SEODRequestStatus',_stat)
      ?}
   ?};
   _ret:=_obj.save()
?};
_ret


\chr_PersonRequestModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Parametry zapytania dla chr_PersonRequestModify
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_EDOKUM_ID')


\chr_PersonRequestDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.14]
:: OPIS: Parametr zapytania chr_PersonRequestDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_uidref:=_env.Param;
{? ref_name(_uidref)<>exec('nwu_edokum_mask','portal_method_chr')
|| _id:='PORTAL_EDOKUM_ID';
   _tab:=exec('get_id','#sync_id',_id,_uidref);
   params_exec('Delete_args','portal_core',_id,_tab)
|| KOMM.add('Rekord nie dotyczy wniosku kadrowego.');
   ~~
?}


\chr_PersonRequestDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonRequestDelete
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_EDOKUM_ID')


\chr_PersonReplacementGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parametry zapytania dla chr_PersonReplacementGet
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_PersonReplacementGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Przetwarzanie wyniku zapytania chr_PersonReplacementGet
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonReplacement_cfg','portal_method_chr',_env.TabAcr);
params_exec('Get_parse','portal_core',_cfg.id,
   "params_exec('chr_PersonReplacementGet_update','portal_method_chr',_a,_b)"
)


\chr_PersonReplacementGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Przetwarzanie wyniku zapytania chr_PersonReplacementGet
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu - dla akcji 'add', '' - dla akcji 'put','del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;
_result:=~~;

_env:=params_get().env;
_cfg:=exec('chr_PersonReplacement_cfg','portal_method_chr',_env.TabAcr);
{? _cfg.id='' || return(_result) ?};

_role:=_obj.getValue('ReplacementRole');
_uidref:=_obj.getValue('__id_erp');
_zast_nag:=~(
   sql(
      'select KOD '
      'from SLO_KOD '
      'join SLO_TYP '
      'using(SLO_KOD.SLO_TYP,SLO_TYP.REFERENCE) '
      'where KOD=\':_a\' '
      'and '
      'SLO_TYP.SYMBOL=\':_b\'',
      _role,
      'TYPPOZ'
   ).size()
);

{? _env.TabAcr='ZAST_NAG' & _zast_nag
||
   {? _act='put' | _act='del'
   || ZAST_NAG.cntx_psh();
       {? var_pres('_uidref')=type_of('') & _uidref<>'' || _uidref:=48+_uidref ?};
       {? var_pres('_uidref')<>type_of('') | _uidref='' | ~ZAST_NAG.seek(_uidref)
       || KOMM.add('Nie znaleziono zastępstwa%1'@[{? var_pres('_uidref')<>type_of('') || '' || ': '+ _uidref ?}]);
          ZAST_NAG.cntx_pop();
          return(~~)
       ?};
       ZAST_NAG.cntx_pop()
   ?};

   _b_status:='';
   ZAST_NAG.cntx_psh();
   {? _act='add'
   || B_ROLE.cntx_psh();
      B_ROLE.index('UNIK');
      B_ROLE.prefix(REF.FIRMA);
      P.cntx_psh();
      {? B_ROLE.seek(_role)
      || ZAST_NAG.blank(1);
         _zapis:=1;
         _zastepowany:=_obj.getValue('ReplacedPersonId');
         USERS.index('OSOBA');
         P.prefix();
         P.seek(exec('get_id_erp','portal_core','PORTAL_P_ID',_zastepowany));
         USERS.prefix(P.OSOBA);
         {? USERS.first()
         || ZAST_NAG.USERS:=USERS.ref()
         || KOMM.add('Dla pracownika %1 %2 nie znaleziono użytkownika'@[P.OSOBA().PIERWSZE,P.OSOBA().NAZWISKO]);
            _zapis:=0
         ?};
         _zastepujacy:=_obj.getValue('PersonId');
         P.prefix();
         P.seek(exec('get_id_erp','portal_core','PORTAL_P_ID',_zastepujacy));
         USERS.prefix(P.OSOBA);
         {? USERS.first()
         || ZAST_NAG.ZASTEPCA:=USERS.ref()
         || KOMM.add('Dla pracownika %1 %2 nie znaleziono użytkownika'@[P.OSOBA().PIERWSZE,P.OSOBA().NAZWISKO]);
            _zapis:=0
         ?};
         {? _zapis=1
         || _data_od:=exec('getDateTime','portal_core',_obj.getValue('DateFrom'));
            ZAST_NAG.DATA_OD:=_data_od.date;
            _data_do:=exec('getDateTime','portal_core',_obj.getValue('DateTo'));
            ZAST_NAG.DATA_DO:=_data_do.date;
            ZAST_NAG.ZASTNIEO:={? _obj.getValue('OnlyInPersonAbsence') || 'T' || 'N' ?};
            {? type_of(_obj.getValue('ReplComment'))=type_of('')
            || ZAST_NAG.UW:=_obj.getValue('ReplComment')
            ?};
::exec('getDateTime','portal_core',_obj.getValue('QuestDetailDate'))
::exec('get_id_erp','portal_core','PORTAL_BIPPYTN_KDR_ID',_pytn)
            ZAST_NAG.FIRMA:=REF.FIRMA;
            ZAST_NAG.B_ROLE:=B_ROLE.ref();
            OBIEGI.USERS:=ZAST_NAG.ZASTEPCA;
            OBIEGI.B_USRROL:=ZAST_NAG.B_ROLE().NAME;
            x_user:=ZAST_NAG.USERS;
            {? exec('powiel_zast','zastepstwa')
            || KOMM.add('Wprowadzony zakres dat jest używany w innym zastępstwie.'@);
               _zapis:=0
            ?};
            {? _zapis=1
            || ZAST_NAG.add();
::Dodawanie zastępstw czynności
               ZAST_POZ.cntx_psh(); ZAST_POZ.prefix();
               _rola_wyb:=B_ROLE.ref();
               B_ACTROL.cntx_psh();
               B_ACTROL.index('B_ROLE');
               B_ACTROL.prefix(B_ROLE.ref());
               {? B_ACTROL.first()
               || {!
                  |?  B_ACTROL.B_ACTION().B_DOMAIN();
                     {? B_ACTION.PROC='T' & B_ACTION.AKT='T'
                     || _dalej:=1;
                        _od:=ZAST_NAG.DATA_OD; _do:=ZAST_NAG.DATA_DO;
                        _ref:=ZAST_NAG.ref(); _firma:=ZAST_NAG.FIRMA; _users:=ZAST_NAG.USERS;
                        ZAST_NAG.cntx_psh(); ZAST_NAG.index('DISP'); ZAST_NAG.prefix();
                        ZAST_POZ.cntx_psh(); ZAST_POZ.index('FIND1'); ZAST_POZ.prefix(REF.FIRMA,_users,B_ACTION.ref());
                        {? ZAST_POZ.first()
                        || {! |?
                              ZAST_POZ.ZAST_NAG();
                              {? ZAST_NAG.ref()<>_ref & ZAST_NAG.B_ROLE=_rola_wyb &
                                 ((_od>=ZAST_NAG.DATA_OD & _od<=ZAST_NAG.DATA_DO) |
                                  (_do>=ZAST_NAG.DATA_OD & _do<=ZAST_NAG.DATA_DO)
                                 )
                              || _dalej:=0
                              ?};
                              _dalej & ZAST_POZ.next()
                           !}
                        ?};
                        ZAST_NAG.cntx_pop(); ZAST_POZ.cntx_pop();

                        {? _dalej=1
                        ||  ZAST_POZ.index('UNIK'); ZAST_POZ.prefix(ZAST_NAG.ref(),B_ACTION.ref());
                            {? ~ZAST_POZ.first()
                            || ZAST_POZ.blank();
                               ZAST_POZ.B_ACTION:=B_ACTROL.B_ACTION;
                               ZAST_POZ.USERS:=ZAST_NAG.ZASTEPCA;
                               ZAST_POZ.ZAST_NAG:=ZAST_NAG.ref();
                               ZAST_POZ.add()
                            ?}
                        ?}
                     ?};
                     B_ACTROL.next()
                  !}
               ?};
               B_ACTROL.cntx_pop(); ZAST_POZ.cntx_pop();
               B_ROLE.cntx_psh(); B_ROLE.index('UNIK'); B_ROLE.prefix(ZAST_NAG.FIRMA,OBIEGI.B_USRROL,);
               {? B_ROLE.first() || OBIEGI.B_ROLE:=B_ROLE.ref() ?};
               B_ROLE.cntx_pop();
               exec('add_upr_zast','zastepstwa');
               _result:=ZAST_NAG.uidref()
            ?}
         ?}
      ?};
      P.cntx_pop();
      B_ROLE.cntx_pop()
   |? _act='put'
   || _result:='';
      {? ZAST_NAG.seek(_uidref)
      || _kasuj:=_role<>$ZAST_NAG.B_ROLE;
         B_ROLE.cntx_psh(); P.cntx_psh();
         B_ROLE.index('UNIK');
         B_ROLE.prefix(REF.FIRMA);
         {? B_ROLE.seek(_role)
         || _zastepowany:=_obj.getValue('ReplacedPersonId');
            USERS.index('OSOBA');
            P.prefix();
            {? P.seek(exec('get_id_erp','portal_core','PORTAL_P_ID',_zastepowany))
            || USERS.prefix(P.OSOBA);
            {? USERS.first()
            || ZAST_NAG.USERS:=USERS.ref()
               ?}
            ?};
            _zastepujacy:=_obj.getValue('PersonId');
            {? P.seek(exec('get_id_erp','portal_core','PORTAL_P_ID',_zastepujacy))
            || USERS.prefix(P.OSOBA);
            {? USERS.first()
            || ZAST_NAG.ZASTEPCA:=USERS.ref()
               ?}
            ?};
            _data_od:=exec('getDateTime','portal_core',_obj.getValue('DateFrom'));
            ZAST_NAG.DATA_OD:=_data_od.date;
            _data_do:=exec('getDateTime','portal_core',_obj.getValue('DateTo'));
            ZAST_NAG.DATA_DO:=_data_do.date;
            ZAST_NAG.ZASTNIEO:={? _obj.getValue('OnlyInPersonAbsence') || 'T' || 'N' ?};
            _comm:=_obj.getValue('ReplComment');
            {? type_of(_comm)=type_of('') || ZAST_NAG.UW:=_comm || ZAST_NAG.UW:='' ?};
::exec('getDateTime','portal_core',_obj.getValue('QuestDetailDate'))
::exec('get_id_erp','portal_core','PORTAL_BIPPYTN_KDR_ID',_pytn)
            ZAST_NAG.FIRMA:=REF.FIRMA;
            ZAST_NAG.B_ROLE:=B_ROLE.ref();
            ZAST_NAG.put();
::Dodawanie zastępstw czynności
            ZAST_POZ.cntx_psh(); ZAST_POZ.prefix();
            _rola_wyb:=B_ROLE.ref();
::Jeżeli zmieniła się rola zastępstwa, to musze od nowa generoważ ZAST_POZ
            {? _kasuj
            || ZAST_POZ.cntx_psh();
               ZAST_POZ.index('UNIK');
               ZAST_POZ.prefix(ZAST_NAG.ref());
               {? ZAST_POZ.first()
               || {!
                  |? ZAST_POZ.del
                  !}
               ?};
               ZAST_POZ.cntx_pop();

               B_ACTROL.cntx_psh();
               B_ACTROL.index('B_ROLE');
               B_ACTROL.prefix(B_ROLE.ref());
               {? B_ACTROL.first()
               || {!
                  |?  B_ACTROL.B_ACTION().B_DOMAIN();
                     {? B_ACTION.PROC='T' & B_ACTION.AKT='T'

                     || _dalej:=1;
                        _od:=ZAST_NAG.DATA_OD; _do:=ZAST_NAG.DATA_DO;
                        _ref:=ZAST_NAG.ref(); _firma:=ZAST_NAG.FIRMA; _users:=ZAST_NAG.USERS;
                        ZAST_NAG.cntx_psh(); ZAST_NAG.index('DISP'); ZAST_NAG.prefix();
                        ZAST_POZ.cntx_psh(); ZAST_POZ.index('FIND1'); ZAST_POZ.prefix(REF.FIRMA,_users,B_ACTION.ref());
                        {? ZAST_POZ.first()
                        || {! |?
                              ZAST_POZ.ZAST_NAG();
                              {? ZAST_NAG.ref()<>_ref & ZAST_NAG.B_ROLE=_rola_wyb &
                                 ((_od>=ZAST_NAG.DATA_OD & _od<=ZAST_NAG.DATA_DO) |
                                  (_do>=ZAST_NAG.DATA_OD & _do<=ZAST_NAG.DATA_DO)
                                 )
                              || _dalej:=0
                              ?};
                              _dalej & ZAST_POZ.next()
                           !}
                        ?};
                        ZAST_NAG.cntx_pop(); ZAST_POZ.cntx_pop();

                        {? _dalej=1
                        ||  ZAST_POZ.index('UNIK'); ZAST_POZ.prefix(ZAST_NAG.ref(),B_ACTION.ref());
                            {? ~ZAST_POZ.first()
                            || ZAST_POZ.blank();
                               ZAST_POZ.B_ACTION:=B_ACTROL.B_ACTION;
                               ZAST_POZ.USERS:=ZAST_NAG.ZASTEPCA;
                               ZAST_POZ.ZAST_NAG:=ZAST_NAG.ref();
                               ZAST_POZ.add()
                            ?}
                        ?}
                     ?};
                     B_ACTROL.next()
                  !}
               ?};
               B_ACTROL.cntx_pop()
            ?};
            ZAST_POZ.cntx_pop()
         ?};
         B_ROLE.cntx_pop(); P.cntx_pop()
      ?}
   |? _act='del'
   || {? ZAST_NAG.seek(_uidref)
      || exec('zast_nag_del1','zastepstwa');
         _result:=''
      ?}
   ?};
   ZAST_NAG.cntx_pop()

|? _env.TabAcr='P_PZ' & ~_zast_nag
||
   {? _act='put' | _act='del'
   || P_PZ.cntx_psh();
       {? var_pres('_uidref')=type_of('') & _uidref<>'' || _uidref:=48+_uidref ?};
       {? var_pres('_uidref')<>type_of('') | _uidref='' | ~P_PZ.seek(_uidref)
       || KOMM.add('Nie znaleziono zastępstwa%1'@[{? var_pres('_uidref')<>type_of('') || '' || ': '+ _uidref ?}]);
          P_PZ.cntx_pop();
          return(~~)
       ?};
       P_PZ.cntx_pop()
   ?};

   _ref:='';
   _isAdd:=(_act='add'); _isPut:=(_act='put'); _isDel:=(_act='del');
   _ok:=1;

   _id_cloud:=$_obj.getValue('__id_cloud');
   _komm:={? _id_cloud<>'' || ' dla: %1'@[_id_cloud] || '' ?};

   _ref:={? type_of(_uidref)=type_of('') & _uidref<>'' || 48+_uidref || '' ?};
   P_PZ.cntx_psh();
   {? _ref<>''
   || {? ref_tab(_ref)=P_PZ
      || {? (_isPut | _isDel) & ~P_PZ.seek(_ref,,1)
         || KOMM.add('Nie znaleziono zastępstwa służbowego%1.'@[_komm]);
            _ok*=0
         ?}
      || _result:=''; _ok*=0
      ?}
   ?};
   P_PZ.cntx_pop();
   {? ~_ok || return(_result) ?};

   {? _ref<>'' || _komm:=' dla: %1'@[_uidref] ?};

   {? _ok
   ||
      _ref_slo:=exec('FindInSet','#table','SLO_KOD','KOD',_role,
         exec('FindInSet','#table','SLO_TYP','SYMBOL','TYPPOZ','TYPPOZ',,1,,null),,1,_role,null
      );
      {? ~_ref_slo
      || KOMM.add(
            'Błąd konfiguracji roli zastępstw - brak pozycji o kodzie \'%1\' w słowniku dostępnych ról.'@
            [_role]
         );
         _ok*=0
      ?};

      {? _ok
      || P_PZ.cntx_psh();
         {? _isAdd | _isPut
         ||
            P.cntx_psh(); OSOBA.cntx_psh();
            P.prefix(); OSOBA.prefix();
            {? _isPut
            || _put:=obj_new('cnt','P','PZ','P_OSO','PZ_OSO','OD','DO','NB');
               _put.cnt:=0
            ?};
            {? _isAdd || P_PZ.blank(1) ?};
            {? _isPut & ~(_seek:=P_PZ.seek(_ref,,1))
            ||
               KOMM.add('Nie odnaleziono zapisu do zaktualizowania%1'@[_komm]);
               _ok*=0
            |? _isPut & _seek
            || _put.P:=P_PZ.P().ref();
               _put.P_OSO:=P.OSOBA().ref();
               _put.PZ:=P_PZ.PZ().ref();
               _put.PZ_OSO:=P.OSOBA().ref();
               _put.OD:=P_PZ.OD;
               _put.DO:=P_PZ.DO;
               _put.NB:=P_PZ.NB
            ?};
            _pReplaced:=null();
            _pReplacing:=null();
            _replacedPersonUid:=_obj.getValue('ReplacedPersonId');
            {? ~P.seek(exec('get_id_erp','portal_core','PORTAL_P_ID',_replacedPersonUid),,1)
            || KOMM.add('W systemie nie odnaleziono pracownika zastępowanego%1%2.'@
                  [{? $_replacedPersonUid<>'' || ': %1 '[$_replacedPersonUid] || '' ?},_komm]
               )
            || P_PZ.P:=P.ref();
               {? _isPut & P_PZ.P<>_put.P || _put.cnt+=1 ?};
               {? _isPut & P_PZ.P().OSOBA().ref()<>_put.P_OSO || _put.cnt+=1 ?};
               _pReplaced:=P.OSOBA().ref();
               _personUid:=_obj.getValue('PersonId');
               {? ~P.seek(exec('get_id_erp','portal_core','PORTAL_P_ID',_personUid),,1)
               || KOMM.add('W systemie nie odnaleziono pracownika zastępującego%1%2.'@
                     [{? $_personUid<>'' || ': %1 '[$_personUid] || '' ?},_komm]
                  )
               || P_PZ.PZ:=P.ref();
                  {? _isPut & P_PZ.PZ<>_put.PZ || _put.cnt+=1 ?};
                  {? _isPut & P_PZ.PZ().OSOBA().ref()<>_put.PZ_OSO || _put.cnt+=1 ?};
                  _pReplacing:=P.OSOBA().ref();
                  _d0:=date(0,0,0);
                  _dateFrom:=(exec('getDateTime','portal_core',_obj.getValue('DateFrom'))).date;
                  {? _dateFrom=_d0
                  || KOMM.add('Nieprawidłowa data rozpoczęcia zastępstwa%1.'@[_komm]);
                     _ok*=0
                  ?};
                  {? _isPut & _dateFrom<>_put.OD || _put.cnt+=1 ?};
                  _dateTo:=(exec('getDateTime','portal_core',_obj.getValue('DateTo'))).date;
                  {? _ok & _dateTo<>_d0 & _dateTo<_dateFrom
                  || KOMM.add(
                        'Data zakończenia nie może być wcześniejsza od daty rozpoczęcia zastępstwa%1'@
                           [_komm]
                     );
                     _ok*=0
                  ?};
                  {? _isPut & _dateTo<>_put.DO || _put.cnt+=1 ?};
                  _onlyDuringAbsence:={? _obj.getValue('OnlyInPersonAbsence') || 'T' || 'N' ?};
                  {? _isPut & _onlyDuringAbsence<>_put.NB || _put.cnt+=1 ?};
                  {? _ok
                  || P_PZ.KLASA:='Z';
                     P_PZ.TYP:=_ref_slo;
                     P_PZ.CO:='T';
                     P_PZ.NB:=_onlyDuringAbsence;
                     P_PZ.OD:=_dateFrom;
                     P_PZ.DO:=_dateTo;
                     P_PZ.P_OSO:=_pReplaced;
                     P_PZ.PZ_OSO:=_pReplacing;
                     {? P_PZ.P=P_PZ.PZ
                     || KOMM.add('Pracownik nie może być swoim zastępcą%1.'@[_komm]);
                        _ok*=0
                     ?};
                     {? _ok & P_PZ.P_OSO=P_PZ.PZ_OSO
                     || KOMM.add('Osoba nie może być swoim zastępcą%1.'@[_komm]);
                        _ok*=0
                     ?};
                     {? #exec('get_par','#portal','CheckReplRoleIsUniqueForPeriod')
                        & (_chk:=exec('p_pz_okres_ae','kart_poz',_isPut))<>''
                     || KOMM.add(_chk);
                        _ok*=0
                     ?};
                     {? _ok
                     || {? _isAdd & P_PZ.add(1)
                        || _result:=P_PZ.uidref()
                        |? _isPut
                        || {? _put.cnt>0 & P_PZ.put(1)
                           || _result:=P_PZ.uidref()
                           || _result:=''
                           ?}
                        ?}
                     ?}
                  ?}
               ?}
            ?};
            OSOBA.cntx_pop(); P.cntx_pop()
         |? _isDel
         || {? P_PZ.seek(_ref,,1)
            || {? P_PZ.del(,1)
               || _result:=''
               ?}
            ?}
         ?};
         P_PZ.cntx_pop()
      ?}
   ?}
|| {? _uidref<>''
   || _result:=''
   ?}
?};
_result


\chr_PersonReplacement_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='ZAST_NAG'
   || 'PORTAL_ZAST_NAG_ID'
   |? _a='P_PZ'
   || 'PORTAL_P_PZ_ID'
   || ''
   ?};
_ret


\chr_PersonRepModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parametry zapytania dla chr_PersonReplacementModify
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonReplacement_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_PersonRepModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_PersonRepModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parametry zapytania dla chr_PersonReplacementModify
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_ret:=0;
_obj:=_env.Adds.obj;

_cfg:=exec('chr_PersonReplacement_cfg','portal_method_chr',_env.TabAcr);
{? _cfg.id='' || return(0) ?};

{? _env.TabAcr='ZAST_NAG'
||
:: Pętla tylko przy zasilaniu.
   _loop:=_id=0 & _ext='';

   OSOBA.cntx_psh();
   {? OSOBA.seek(ZAST_NAG.USERS().OSOBA)
   || P.cntx_psh();
      P.index('OSOZATR');
      P.prefix( REF.FIRMA,OSOBA.ref());
      {? {? _loop || P.first() || P.seek(_ext+48) ?}
      || {!
         |? {? P.PORTAL<>'T'
            || KOMM.add('Współpracownik nieprezentowany na portalu.');
               _ret:=0
            || _zastepowany:=P.uidref();
               {? OSOBA.seek(ZAST_NAG.ZASTEPCA().OSOBA)
               || P.cntx_psh();
                  P.index('OSOZATR');
                  P.prefix(REF.FIRMA,OSOBA.ref());
                  {? {? _loop || P.first() || P.seek(48+_ext) ?}
                  || {!
                     |? {? P.PORTAL<>'T'
                        || KOMM.add('Współpracownik nieprezentowany na portalu.');
                           _ret:=0
                        || _obj.create();
::            _PersonId:=exec('get_id','#sync_id','PORTAL_P_ID',P.uidref());
::            _obj.set('PersonId',#_PersonId.ID);
::                  _obj.set('ReplacedPersonId',_ReplacedPersonId);
                           _obj.set('__id_cloud',{? _id || _id || ~~ ?});
                           _obj.set('DateFrom',ZAST_NAG.DATA_OD);
                           _obj.set('DateTo',ZAST_NAG.DATA_DO);
                           _obj.set('OnlyInPersonAbsence',ZAST_NAG.ZASTNIEO='T');
                           _obj.set('ReplComment',ZAST_NAG.UW);
                           _obj.set('ReplacementRole',$ZAST_NAG.B_ROLE);
                           _obj.set('PersonId__id_Erp',P.uidref());
                           _obj.set('ReplacedPersonId__id_erp',_zastepowany);
                           _obj.set('__id_erp',ZAST_NAG.uidref()+P.uidref()+_zastepowany);
                           _ret:=_obj.save()
                        ?};
                        _loop & P.next()
                     !}
                  || KOMM.add('Dla użytkownika %1 nie znaleziono pracownika'[ZAST_NAG.ZASTEPCA().DANE])
                  ?};
                  P.cntx_pop()
               ?}
            ?};
            _loop & P.next()
         !}
      || KOMM.add('Dla użytkownika %1 nie znaleziono pracownika'[ZAST_NAG.USERS().DANE])
      ?};
      P.cntx_pop()
   ?};
   OSOBA.cntx_pop()

|? _env.TabAcr='P_PZ'
|| {? P_PZ.KLASA<>'Z'
   || KOMM.add('Zapis nie dotyczy zastępstwa - nie będzie wysłany na portal.'@);
      return(0)
   ?};

   _firma:=exec('ref_firma','ustawienia');

   P.cntx_psh();
   P.prefix();
   _P:=obj_new('uid','firma','portal');
   P_PZ.P();
   _P.uid:=P.uidref();
   _P.firma:=P.FIRMA;
   _P.portal:=P.PORTAL;
   _PZ:=obj_new('uid','firma','portal');
   P_PZ.PZ();
   _PZ.uid:=P.uidref();
   _PZ.firma:=P.FIRMA;
   _PZ.portal:=P.PORTAL;
   P.cntx_pop();

   {? _P.firma<>_firma | _PZ.firma<>_firma
   || KOMM.add('Zastępstwo nie dotyczy bieżącej firmy - zostało pominięte.'@);
      return(0)
   |? P_PZ.OD=date(0,0,0)
   || KOMM.add('Data od zastępstwa nie została określona.'@);
      return(0)
   |? _P.portal<>'T'
   || KOMM.add('Pracownik zastępowany nie jest prezentowany na portalu. Zastępstwo zostało pominięte.'@);
      return(0)
   |? _PZ.portal<>'T'
   || KOMM.add('Pracownik zastępujący nie jest prezentowany na portalu. Zastępstwo zostało pominięte.'@);
      return(0)
   ?};

   SLO_KOD.cntx_psh(); SLO_KOD.prefix();
   _kod:=P_PZ.TYP().KOD;
   SLO_KOD.cntx_pop();

   _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
:: _obj.set('PersonId',);
:: _obj.set('ReplacedPersonId',);
   _obj.set('DateFrom',P_PZ.OD);
   _obj.set('DateTo',P_PZ.DO);
   _obj.set('OnlyInPersonAbsence',P_PZ.NB='T');
   _obj.set('ReplComment','');
:: _obj.set('__ModifiedDate_cloud',);
   _obj.set('__ModifiedDate_erp',P_PZ.idput_value());
   _obj.set('__id_erp',P_PZ.uidref());
   _obj.set('ReplacementRole',_kod);
::   _obj.set('CreatorLogin',);
::   _obj.set('CreatorPersonName',);
   _obj.set('PersonId__id_Erp',_PZ.uid);
   _obj.set('ReplacedPersonId__id_erp',_P.uid);

   _ret:=_obj.save()
?};
_ret


\chr_PersonRepModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parametry zapytania dla chr_PersonReplacementModify
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonReplacement_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_ReplacementRole_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='B_ROLE'
   || 'PORTAL_B_ROLE_ID'
   |? _a='SLO_KOD'
   || 'PORTAL_ZASLU_ID'
   || ''
   ?};
_ret


\chr_ReplacementRoleModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: JSON dla zapytania chr_ReplacementRoleModify.
::       Kontekst wywołania - rekord tabeli P lub PPK_UCZ.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_cfg:=exec('chr_ReplacementRole_cfg','portal_method_chr',_env.TabAcr);
{? _cfg.id='' || return(0) ?};

{? _env.TabAcr='B_ROLE'
||
   _obj.create();

   _obj.set('ReplRoleName',B_ROLE.NAME);
   _obj.set('__ModifiedDate_erp',B_ROLE.idput_value());
   _obj.set('__id_erp',B_ROLE.uidref());
   _obj.set('ReplacementRole',$B_ROLE.ref());
   _obj.set('IsRolePublic',0);

   _ret:=_obj.save()
|? _env.TabAcr='SLO_KOD'
||
   SLO_TYP.cntx_psh(); SLO_TYP.prefix();
   _symbol:=SLO_KOD.SLO_TYP().SYMBOL;
   SLO_TYP.cntx_pop();

   {? _symbol<>'TYPPOZ' || return(0) ?};

   _obj.create();

   _obj.set('ReplRoleName',SLO_KOD.NAZWA);
   _obj.set('ReplacementRole',SLO_KOD.KOD);
   _obj.set('IsRolePublic',1);
   _obj.set('__ModifiedDate_erp',SLO_KOD.idput_value());
   _obj.set('__id_erp',SLO_KOD.uidref());

   _ret:=_obj.save()
?};
_ret


\chr_ReplacementRoleModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Dodanie/modyfikacja danych pracownika - parametr zapytania chr_ReplacementRoleModify.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_ReplacementRole_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_ReplacementRoleModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_ReplacementRoleModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_ReplacementRoleModify.
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_ReplacementRole_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_ReplacementRoleDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parametr zapytania chr_ReplacementRoleDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_ReplacementRole_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_args','portal_core',_cfg.id)


\chr_ReplacementRoleDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_ReplacementRoleDelete.
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_ReplacementRole_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


\chr_PersonRepDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonReplacementDelete.
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_cfg:=exec('chr_PersonReplacement_cfg','portal_method_chr',_env.TabAcr);

{? _env.TabAcr='P_PZ' & _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania" rekordu tabeli P_PZ w komunikacie usuwającym rekordy.
|| P_PZ.cntx_psh();
   P_PZ.prefix();
   _ok:=P_PZ.seek(_env.Param) & P_PZ.KLASA<>'Z';
   P_PZ.cntx_pop()
|| _ok:=1
?};

{? _ok
|| params_exec('Delete_args','portal_core',_cfg.id)
|| KOMM.add('Wiersz nie wymagał usunięcia.'@);
   ~~
?}


\chr_PersonRepDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonReplacementDelete.
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonReplacement_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


\chr_PersonRepRoleModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parametry zapytania dla chr_PersonReplacementRoleModify
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonRepRoleModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_B_USRROL_ID',_formula_json)


\chr_PersonRepRoleModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parametry zapytania dla chr_PersonReplacementRoleModify
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
params_set(_par:=params_get());
_env:=_par.env;
_zap:=1;
_obj:=_env.Adds.obj;
_ret:=0;
:: Pętla tylko przy zasilaniu.
_loop:=_id=0 & _ext='';

B_USRROL.cntx_psh();
OSOBA.cntx_psh();
OSOBA.seek(B_USRROL.USERS().OSOBA);
P.index('OSOZATR');
P.prefix(REF.FIRMA,OSOBA.ref());
{? {? _loop || P.first() || P.seek(_ext) ?}
|| {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.');
         _ret:=0;
         _loop & P.next()
      || _obj.create();
::   _PersonId:=exec('get_id','#sync_id','PORTAL_P_ID',P.uidref());
         _obj.set('__id_cloud',{? _id || _id || ~~ ?});
::   _obj.set('PersonId',#_PersonId.ID);
         _obj.set('ReplacementRole',$B_USRROL.B_ROLE);
         _obj.set('DateFrom',B_USRROL.STARTD);
         _obj.set('__id_erp',B_USRROL.uidref()+P.uidref());
         _obj.set('PersonId__id_Erp',P.uidref());
         _ret:=_obj.save();
::  &_PersonId;
         _loop & _ret & P.next()
      ?}
   !}
|| KOMM.add('Dla użytkownika %1 nie znaleziono pracownika'[B_USRROL.USERS().DANE]);
   _zap:=0
?};
OSOBA.cntx_pop();
B_USRROL.cntx_pop();
{? _zap=0
|| _ret:=0
?};
_ret


\chr_PersonRepRoleModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parametry zapytania dla chr_PersonReplacementRoleModify
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_B_USRROL_ID')


\chr_PersonRepRoleDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [23.25]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonReplacementRoleDelete.
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_B_USRROL_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
::    _TAB.ID     = __id_cloud | __ModifiedDate_cloud
::    _TAB.OPIS   = Dodatkowe informacje z __id_erp
   {? _TAB.first()
   || P.cntx_psh();
      P.prefix();
      {!
      |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::          Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
         || _TAB.del()
         || _TAB.next()
         ?}
      !};
      P.cntx_pop()
   ?};
   {? _TAB.first()
   || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@)
   ?}
|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\chr_PersonRepRoleDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [23.25]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonReplacementRoleDelete.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_B_USRROL_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonHierarchy (zależność służbowa pracownika).
::======================================================================================================================


\chr_PersonHierarchyModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: JSON dla zapytania chr_PersonHierarchyModify.
::       Kontekst wywołania - rekord tabeli zależności służbowej - ZS_DEF.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: Wysyłamy domyślny typ zależności:
{? ZS_DEF.ZS_TYP<>exec('domyslny','zs_typ')
|| KOMM.add('Zależność innego typu niż domyślny.'@);
   return(0)
?};

:: Przyjmijmy wstępnie, że pracownik nie ma przełożonego (sam jest swoim przełożonym):
_pSupIdE:='';
_depSup:='';
:: A teraz zbierzmy informacje o bezpośrednim przełożonym:
{? ZS_DEF.ZS_DEF
|| P.cntx_psh();
   P.prefix();
   ZS_DEF.cntx_psh();
   ZS_DEF.prefix();
   {? ZS_DEF.seek(ZS_DEF.ZS_DEF) & ZS_DEF.P().PORTAL='T'
   || UD_SKL.cntx_psh();
      UD_SKL.prefix();
      _pSupIdE:=P.uidref();
      _depSup:=P.WYDZIAL().uidref();
      UD_SKL.cntx_pop()
   ?};
   ZS_DEF.cntx_pop();
   P.cntx_pop()
?};

_podwladni:="
   _jest:=0;
   P.cntx_psh();
   P.prefix();
   ZS_DEF.cntx_psh();
   ZS_DEF.index('TREE');
   ZS_DEF.prefix(_a,_b);
   _dalej:=ZS_DEF.first();
   {!
   |? ~_jest & _dalej
   |! {? ZS_DEF.P().PORTAL='T'
      || _jest:=1
      || _dalej:=ZS_DEF.next()
      ?}
   !};
   ZS_DEF.cntx_pop();
   P.cntx_pop();
   _jest
";

:: Na portal właściwie nie są wysyłani przełożeni - są wysyłani pracownicy i ich przełożeni. Dodatkowo wysyłani są
:: pracownicy (czyli bez podwładnych), którzy nie mają przełożonych (tzw. "wolne elektrony").
:: Jeżeli więc pracownik NIE ma przełożonego ale ma podwładnych, to nie jest wysyłany.
{? _pSupIdE='' & _podwladni(ZS_DEF.ZS_TYP,#ZS_DEF.ref())
|| KOMM.add('Współpracownik nadrzędny niewymagający wysyłki (posiada podwładnych).'@);
   return(0)
?};

P.cntx_psh();
P.prefix();
UD_SKL.cntx_psh();
UD_SKL.prefix();
ZS_DEF.P();

{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _ret:=0
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('DateFrom',P.DZA);
   _obj.set('__ModifiedDate_erp',ZS_DEF.idput_value());
   _obj.set('__id_erp',ZS_DEF.uidref()+P.uidref());
   _obj.set('DepartmentId__id_Erp',P.WYDZIAL().uidref());
   _obj.set('DepartmentIdOfSuper__id_Erp',_depSup);
   _obj.set('PersonId__id_Erp',P.uidref());
   _obj.set('PersonIdSuper__id_Erp',_pSupIdE);

   _ret:=_obj.save()
?};

UD_SKL.cntx_pop();
P.cntx_pop();

_ret


\chr_PersonHierarchyModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Dodanie/modyfikacja danych z zależności służbowej - parametr zapytania chr_PersonHierarchyModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonHierarchyModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_ZS_DEF_ID',_formula_json)


\chr_PersonHierarchyModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonHierarchyModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_ZS_DEF_ID')


\chr_PersonHierarchyDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parametr zapytania chr_PersonHierarchyDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_ZS_DEF_ID';

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _ok:=0;
   _uidref:=_env.Param;
:: Tabela z powiązanymi identyfikatorami rekordu (rekordami na portalu):
   _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
   {? var_pres('_TAB')=type_of(SYSLOG) & _TAB.first()
::    Czy należy nie zachowywać rekordu:
   || _ok:=exec('preserve_ZS_DEF','portal_method_chr',_uidref,_TAB)<=0
   ?}
|| _ok:=1
?};

{? _ok
|| params_exec('Delete_args','portal_core',_sync_id)
|| KOMM.add('Wiersz nie wymagał usunięcia.'@);
   ~~
?}


\preserve_ZS_DEF
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Sprawdza czy bieżący rekord tabeli ZS_DEF spełnia kryteria obowiązywania na bieżącą datę i powinien zostać
::       zachowany na Portal HR. Formuła bazuje na ustawionym kontekście tabeli ZS_DEF.
::   WE: _a [STRING] - uidref rekordu ZS_DEF
::       _b [_TAB]   - tabela z powiązanymi identyfikatorami rekordu (rekordami na portalu)
::   WY: -1/0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=-1;
_uidref:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
_TAB:={? var_pres('_b')=type_of(SYSLOG) || _b || return(_result) ?};

ZS_DEF.cntx_psh();
{? ZS_DEF.seek(_uidref,,1)
|| ZS_TYP.cntx_psh();
   ZS_TYP.prefix();
   P.cntx_psh();
   P.prefix();
   {? ZS_DEF.ZS_TYP().DOMYSLNY<>'T'
::    Jeżeli typ nie jest domyślny, to nie powinien być na portalu.
   || _result:=0

   |? ~_TAB.find_key(P.uidref(),)
::    Obecny pracownik nie jest tym, który był wysłany na portal (zmiana przez "Popraw") - rekord należy usunąć.
   || _result:=0

   |? ZS_DEF.P().PORTAL<>'T'
   || _result:=0

   || _przelozony:="
         ZS_DEF.cntx_psh();
         ZS_DEF.prefix();
         _jest:=ZS_DEF.seek(_a) & ZS_DEF.P().PORTAL='T';
         ZS_DEF.cntx_pop();
         _jest
      ";
      _podwladni:="
         _jest:=0;
         ZS_DEF.cntx_psh();
         ZS_DEF.index('TREE');
         ZS_DEF.prefix(_a,_b);
         _dalej:=ZS_DEF.first();
         {!
         |? ~_jest & _dalej
         |! {? ZS_DEF.P().PORTAL='T'
            || _jest:=1
            || _dalej:=ZS_DEF.next()
            ?}
         !};
         ZS_DEF.cntx_pop();
         _jest
      ";
::    Patrz uwaga o zakresie wysyłanych danych w komunikacie Modify.
      _result:=(ZS_DEF.ZS_DEF & _przelozony(ZS_DEF.ZS_DEF)) | ~_podwladni(ZS_DEF.ZS_TYP,#ZS_DEF.ref())
   ?};
   P.cntx_pop();
   ZS_TYP.cntx_pop()
?};
ZS_DEF.cntx_pop();
_result


\chr_PersonHierarchyDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonHierarchyDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_ZS_DEF_ID')


::======================================================================================================================
:: Metody dostępu do portalu - DepartmentModify (jednostka organizacyjna).
::======================================================================================================================


\chr_DepartmentModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: JSON dla zapytania chr_DepartmentModify.
::       Kontekst wywołania - rekord tabeli UD_SKL.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

{? UD_SKL.UD_TYP<>exec('szukaj_ud_typ','schemat','PODZORG')
|| KOMM.add('Schemat innego typu niż wymagany na portalu.'@);
   return(0)
|? UD_SKL.DOMYSLNY<>'T'
:: Jeżeli jednostka organizacyjna nie występuje w domyślnym drzewie, to nie będzie wysyłana na portal.
:: I w ogóle nie kłóci się to z tym, że może być ona użyta w przebiegu zatrudnienia (H).
|| KOMM.add('Element nie występuje w strukturze domyślnej.'@);
   return(0)
?};

_fud:=exec('firma4ud_skl','schemat',,,UD_SKL.ref());
{? _fud.STATUS='B'
|| KOMM.error('Ustalenie firmy dla elementu struktury nie powiodło się.'@,0);
   return(0)
|? _fud.STATUS='I'
|| KOMM.add(_fud.MSG)
|? _fud.STATUS='OK' & _fud.VAL<>exec('ref_firma','ustawienia')
|| KOMM.add('Element z innej firmy.'@);
   return(0)
?};

:: Wysyłamy tylko "używane" jednostki organizacyjne.
_uzywana:=0;
_TL:=UD_SKL.testlink(2);
{? _TL.first()
:: Lista tabel (powiązanych z UD_SKL) wysyłanych na portal.
|| _tab:=spli_str('H,UD_DEF,PSTO,ZS_DEF',',');
   {! _lp:=1 .. obj_len(_tab)
   |? _uzywana=0
   |! _uzywana:=_TL.find_key(_tab[_lp],)
   !}
?};
{? _uzywana=0
|| KOMM.add('Element nie jest wykorzystywany.'@);
   return(0)
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('Department',UD_SKL.SYMBOL);
_obj.set('DepartmentName',UD_SKL.OPIS);
_obj.set('__ModifiedDate_erp',UD_SKL.idput_value());
_obj.set('__id_erp',UD_SKL.uidref());

_obj.save()


\chr_DepartmentModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Dodanie/modyfikacja jednostki organizacyjnej - parametr zapytania chr_DepartmentModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_DepartmentModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_UD_SKL_PODZORG_ID',_formula_json)


\chr_DepartmentModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_DepartmentModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_UD_SKL_PODZORG_ID')


\chr_DepartmentDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parametr zapytania chr_DepartmentDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_UD_SKL_PODZORG_ID')


\chr_DepartmentDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_DepartmentDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_UD_SKL_PODZORG_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_KnowledgeBaseItem -> chr_KnowledgeBItem (nagłówski elementów bazy wiedy).
::======================================================================================================================


\chr_KnowledgeBItemModify_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='BIPNAG'
   || 'PORTAL_BIPNAG_WIEDZA_ID'
   |? _a='BNFTT'
   || 'PORTAL_BNFTT_NAG_ID'
   |? _a='ZALACZ'
   || 'PORTAL_ZALACZ_ID'
   || ''
   ?};

_ret


\chr_KnowledgeBItemModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: JSON dla zapytania chr_KnowledgeBaseItemModify.
::       Kontekst wywołania - rekord tabeli BIPNAG/BNFTT.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

_par:=params_get();
params_set(_par);
_env:=_par.env;
_obj:=_env.Adds.obj;

{? _env.TabAcr='ZALACZ'
:: obsługa modyfikacji załączników przeznaczonych dla współpracownika
|| return(params_exec('chr_KnowledgeBFileModify_json','portal_method_chr',_id,_ext))
?};

_TAB:=($_env.TabAcr)();
{? _TAB<>BIPNAG & _TAB<>BNFTT
|| KOMM.error('Metoda wywołana na nieoczekiwanej tabeli.'@,0);
   return(0)
?};

:: Sprawdzenie czy kategoria dotyczy bazy wiedzy lub benefitu:
BIPKAT.cntx_psh();
BIPKAT.prefix();
_TAB.BIPKAT();
_funkc:=BIPKAT.FUNKC;
_kod:=BIPKAT.KOD;
BIPKAT.cntx_pop();
{? (',WIEDZA,BNFT,WDRZ,BLTN,'*',%1,'[_funkc]=0) |
   (',WIEDZA,WDRZ,BLTN,'*',%1,'[_funkc] & BIPNAG.AKT='N')
:: Element bazy wiedzy, Wydarzenie firmowe i Biuletyny muszą być zaakceptowane aby można je było wysyłać.
:: Benefity - wysyłamy zawsze (nawet niezaakceptowane), przy czym dla niezaakceptowanych NIE wysyłamy potencjalnych.
|| KOMM.add('Inna funkcjonalność lub element niezaakceptowany.'@);
   return(0)
?};

:: Sprawdzenie okresu retencji dla wydarzeń:
{? ',WDRZ,'*',%1,'[_funkc]
|| _rtn:=exec('retentionKnowledgeBaseItem','portal_lib');
   {? _rtn<>0 & (BIPNAG.DT2~1<>0) & (BIPNAG.DT2~1)<((date()~1)-_rtn)
   || KOMM.add('Wydarzenie starsze niż zakładany okres retencji.'@);
      return(0)
   ?}
?};

_ok:=1;
P.cntx_psh();
P.prefix();
_TAB.AUTOR();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _ok:=0
|| _puidref:=P.uidref()
?};
P.cntx_pop();
{? ~_ok
|| return(0)
?};

_jman:=exec('json_man','__jsonm','{}');

{? _TAB=BIPNAG
:: Wyszukanie odnośników związanych z nagłówkiem:
|| BIPODN.cntx_psh();
   BIPODN.index('LINK');
   BIPODN.prefix(BIPNAG.NP_DOK,BIPNAG.ZZ_DOK);
   {? BIPODN.first()
   || _jman.setObject(_jman.addChildElement('','Links'),'[]');
      {!
      |? _jman.setObject(_path:=_jman.addChildElement('Links'),'{}');
         _jman.setValue(_jman.addChildElement(_path,'Link'),BIPODN.memo_txt(,1,'ADRES'));
         _jman.setValue(_jman.addChildElement(_path,'Description'),BIPODN.ETYKIETA);
         _ed:=exec('strcut','#string',BIPODN.memo_txt(0,1,'OPIS'),6000,1);
         {? _ed<>''
         || _jman.setValue(_jman.addChildElement(_path,'ExtendedDescription'),_ed)
         ?};
         BIPODN.next()
      !}
   ?};
   BIPODN.cntx_pop()
?};

:: Dodanie kontaktu:
_jman.setObject(_jman.addChildElement('','Contacts'),'[]');
_jman.setObject(_path:=_jman.addChildElement('Contacts'),'{}');
_jman.setValue(_jman.addChildElement(_path,'ContactOrder'),'10');
_jman.setValue(_jman.addChildElement(_path,'ContactDescription'),_TAB.memo_txt(,1,'KONTAKT'));
_jman.setValue(_jman.addChildElement(_path,'ContactPerson__id_Erp'),_puidref);

:: Wyszukanie odbiorców związanych z nagłówkiem:
{? _TAB.AKT='T'
|| P.cntx_psh();
   P.prefix();
   BIPODB.cntx_psh();
   BIPODB.index('LINK');
   BIPODB.prefix(_TAB.NP_DOK,_TAB.ZZ_DOK);
   {? BIPODB.first()
   || _jman.setObject(_jman.addChildElement('','Persons'),'[]');
      {!
      |? {? BIPODB.STATUS<>'W' & BIPODB.P().PORTAL='T'
         || _jman.setObject(_path:=_jman.addChildElement('Persons'),'{}');
            _jman.setValue(_jman.addChildElement(_path,'Person__id_Erp'),P.uidref())
         ?};
         BIPODB.next()
      !}
   ?};
   BIPODB.cntx_pop();
   P.cntx_pop()
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('Category',{? _TAB=BIPNAG || '%1^%2' [_funkc,_kod] || '%1^%2' ['BNFT',BNFTT.AKRONIM] ?});
_obj.set('AddDate',{? _TAB=BIPNAG || BIPNAG.DT1 || BNFTT.OD ?});
_obj.set('Description',exec('strcut','#string',_TAB.memo_txt(,1,'OPIS'),6000,1));
_obj.set('__ModifiedDate_erp',_TAB.idput_value());

:: Sprawdzanie załączników powiązanych z rekordem BIPNAG/BNFTT:
ZZ_DOKZ.cntx_psh();
ZZ_DOKZ.index('CZAS');
ZZ_DOKZ.prefix(_TAB.NP_DOK,_TAB.ZZ_DOK);
{? ZZ_DOKZ.first()
|| {? _ext=_TAB.HASH
   || _obj.skip_attach()
   || {!
      |? _obj.attach(ZZ_DOKZ.PLIK);
         ZZ_DOKZ.next()
      !}
   ?}
?};
ZZ_DOKZ.cntx_pop();

_obj.set('__id_erp',_TAB.uidref()+_TAB.HASH);
_obj.set('ShortDescription',{? _TAB=BIPNAG || BIPNAG.TYTUL || BNFTT.NAZWA ?});
_obj.set('__JSON',_jman.getJSON());
{? _TAB=BIPNAG
|| _obj.set('Location',BIPNAG.MIEJSCE);
   _obj.set('DateFrom',BIPNAG.DT1,BIPNAG.GD1);
   _obj.set('DateTo',BIPNAG.DT2,BIPNAG.GD2)
|| _obj.set('DateFrom',BNFTT.OD);
   _obj.set('DateTo',BNFTT.DO)
?};

_obj.save()


\chr_KnowledgeBFileModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: JSON dla zapytania chr_KnowledgeBaseItemModify o załączniki dla współpracownika.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

{? ZALACZ.WWWE='N' | ZALACZ.WWW='N'
:: niedostępny
|| KOMM.add('Załącznik niedostępny dla pracownika.'@);
   return(0)
?};

_test:=0;
_category:='';
BIPKSN.cntx_psh();
BIPKSN.index('UNIQUE');
BIPKSN.prefix(ZALACZ.FIRMA,'ZAL',);
{? BIPKSN.find_key(ZALACZ.TYP_ZAL)
:: typ załącznika z określoną kategorią
|| _category:=BIPKSN.BIPKAT().KOD;
   _test:=1
?};
BIPKSN.cntx_pop();
{? _test=0
|| KOMM.add('Typ załącznika nie jest prezentowany na portalu.'@);
   return(0)
?};

{? exec('retentionZALACZ','portal_lib',ZALACZ.ref())
|| KOMM.add('Załącznik starszy niż zakładany okres retencji.'@);
   return(0)
?};

_jman:=exec('json_man','__jsonm','{}');
:: kolekcja identyfikatorów współpracowników
_coll:=_jman.addChildElement('','Persons');
_jman.setObject(_coll,'[]');

_firma:=exec('ref_firma','ustawienia');
_test:=0;
P.cntx_psh();
{? ZALACZ.P=null()
|| P.index('OSOBA');
   P.prefix(ZALACZ.OSOBA,_firma);
   _loop:=P.first();
   {!
   |? _loop
::    dodaj wszystkich współpracowników właściwych według osoby załącznika
   |! {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
      || _item:=_jman.addChildElement(_coll);
         _jman.setObject(_item,'{}');
         _jman.setValue(_jman.addChildElement(_item,'Person__id_Erp'),P.uidref());
         _test+=1
      ?};
      _loop:=P.next()
   !}
|| P.prefix();
   ZALACZ.P();
   {? P.FIRMA<>_firma
   || KOMM.add('Współpracownik z innej firmy.'@)
   |? P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
   || _item:=_jman.addChildElement(_coll);
      _jman.setObject(_item,'{}');
      _jman.setValue(_jman.addChildElement(_item,'Person__id_Erp'),P.uidref());
      _test:=1
   ?}
?};
P.cntx_pop();
{? _test=0
|| return(0)
?};

_par:=params_get();
params_set(_par);
_obj:=_par.env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('Category','%1^%2' ['ZAL',_category]);
_obj.set('AddDate',ZALACZ.DATA);
SLO_NAZ.cntx_psh();
SLO_NAZ.prefix();
_obj.set('Description',
   'Typ dokumentu: %1' [ZALACZ.TYP_ZAL().NAZWA]+'\n'+
   'Opis: %1' [ZALACZ.LOK]+'\n'+
   'Data i czas utworzenia: %1 %2' [$ZALACZ.bl_info('ZAL','CREAT_DATE'),$ZALACZ.bl_info('ZAL','CREAT_TIME')]+'\n'+
   'Rozmiar: %1' [$ZALACZ.bl_info('ZAL','SIZE')]
);
SLO_NAZ.cntx_pop();
_obj.set('__ModifiedDate_erp',ZALACZ.idput_value());
_obj.set('__id_erp',ZALACZ.uidref()+ZALACZ.HASH);
_obj.set('ShortDescription',ZALACZ.ZAL_NAME);
_obj.set('__JSON',_jman.getJSON());
:: __BinAttachment
{? _ext=ZALACZ.HASH
|| _obj.skip_attach()
|| _obj.attach(ZALACZ.ZAL,ZALACZ.uidref())
?};

_obj.save()


\chr_KnowledgeBItemModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Dodanie/modyfikacja elementu do bazy wiedzy - parametr zapytania chr_KnowledgeBaseItemModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_KnowledgeBItemModify_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_KnowledgeBItemModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_KnowledgeBItemModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_KnowledgeBaseItemModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_KnowledgeBItemModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_KnowledgeBItemGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Pobranie wydarzeń firmowych - parametr zapytania chr_KnowledgeBaseItemGet. Mimo, że w encji przechowywane są
::       również inne informacje (Elementy bazy wiedzy, Biuletyny, ...) to na portalu można wprowadzać wyłącznie
::       wydarzenia firmowe.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_KnowledgeBItemGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli BIPNAG (i powiązanych) na podstawie wyniku zapytania
::       chr_KnowledgeBaseItemGet. Na portalu możliwe jest definiowanie WYŁĄCZNIE "Wydarzeń firmowych".
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;
_ext:=_c;

_funckat:=spli_str(_obj.getValue('Category'),'^');
{? _funckat[1]<>'WDRZ'
|| KOMM.add('Wiersz nieobsługiwany przez metodę.'@);
   return({? _act='add' || 0 || '' ?})
?};

{? _act='del'
|| {? BIPNAG.del(1,1)
   || return('')
   || KOMM.error('Usunięcie wiersza nie powiodło się.'@,0);
      return()
   ?}
?};

_ret:=~~;
BIPKAT.cntx_psh();
BIPKAT.index('KOD');
BIPKAT.prefix(exec('firma','ustawienia'),_funckat[1],_funckat[2],);
{? BIPKAT.first()
|| P.cntx_psh();
   P.prefix();

   ZZ_DOK.cntx_psh();
   exec('otworz_dok','phr_tab');
   ZZ_DOK.prefix();

   _ok:=1;
   _opis_akt:='';
   {? _act='add'
   || BIPNAG.blank();
      BIPNAG.FIRMA:=BIPKAT.FIRMA;
      BIPNAG.memo_set(,'OPIS')
   |? BIPNAG.FIRMA<>BIPKAT.FIRMA
   || KOMM.error('Zmiana firmy.'@,0);
      _ok:=0
   || _opis_akt:=BIPNAG.memo_txt(,1,'OPIS')
   ?};

   {? _ok
   || BIPNAG.TYTUL:=_obj.getValue('ShortDescription');
      BIPNAG.BIPKAT:=BIPKAT.ref();
      _opis_new:=_obj.getValue('Description');
      {? type_of(_opis_new)<>type_of('')
      || _opis_new:=''
      ?};
      BIPNAG.memo_set(_opis_new,'OPIS');
      BIPNAG.AKT:='T';
      _from:=exec('getDateTime','portal_core',_obj.getValue('DateFrom'));
      BIPNAG.DT1:=_from.date;
      BIPNAG.GD1:=_from.time;
      _to:=exec('getDateTime','portal_core',_obj.getValue('DateTo'));
      BIPNAG.DT2:=_to.date;
      BIPNAG.GD2:=_to.time;
      _miejsce:=_obj.getValue('Location');
      {? type_of(_miejsce)<>type_of('')
      || _miejsce:=''
      ?};
      BIPNAG.MIEJSCE:=_miejsce;

      _jman:=_obj.new(_obj.getValue('__JSON'));

::    Organizator (autor).
      BIPNAG.AUTOR:=null();
      {? _jman.typeOf('Contacts')=_jman.Const.TYPE.ARRAY
      || _id:=_jman.getValue('Contacts[1].ContactPerson__id_Erp');
         {? P.seek(_id)
         || BIPNAG.AUTOR:=P.ref()
         ?}
      ?};

::    Odczyt uczestników.
      _UCZ:=tab_tmp(1,'UIDREF','STRING[48]','P.uidref()');
      {? _jman.typeOf('Persons')=_jman.Const.TYPE.ARRAY
      || _size:=_jman.countChildren('Persons');
         {! _lp:=1 .. _size
         |! _UCZ.blank();
            _UCZ.UIDREF:=_jman.getValue('Persons[%1].Person__id_Erp'[$_lp]);
            _UCZ.add()
         !}
      ?};

::    Odczyt załączników.
      _ATT:=exec('get_attachments','portal_engine',_obj).ATT;

      do();
      {? {? _act='add' || BIPNAG.add() || BIPNAG.put() ?}
      || {? _opis_akt<>_opis_new
::          Metoda memo_put() zmienia znacznik modyfikacji rekordu, nawet jeżeli nie zmieniła się treść notki.
         ||  BIPNAG.memo_put(,'OPIS')
         ?};

         _zz_typ:=exec('typ_find','phr_dane','P','ODB');
         _dbk:=exec('dbk','portal_bip',BIPNAG);
         BIPODB.cntx_psh();
         BIPODB.index('LINK');
         BIPODB.prefix(BIPNAG.NP_DOK,BIPNAG.ZZ_DOK);
::       Najpierw usuniemy usuniętych.
         {? BIPODB.first()
         || {!
            |? {? _UCZ.find_key(BIPODB.P().uidref(),)
::                Uczestnik jest i w Mericie i na portalu. Co najwyżej zmieńmy mu status.
               || {? BIPODB.STATUS='W'
                  || BIPODB.STATUS:=
                        {? _zz_typ<>null() & exec('test_kryt','phr_dane',BIPNAG.ZZ_DOK,_zz_typ,0,_dbk,P)>0
                        || 'A'
                        || 'R'
                        ?};
                     BIPODB.put()
                  ?};
                  BIPODB.next()
::             Uczestnik jest w Mericie, a nie występuje na portalu.
               |? BIPODB.STATUS='A'
               || BIPODB.STATUS:='W';
                  BIPODB.put()
               |? BIPODB.STATUS='R'
               || BIPODB.del()
               ?}
            !}
         ?};
::       A teraz dodamy dodanych.
         {? _UCZ.first()
         || {!
            |? {? P.seek(_UCZ.UIDREF) & ~BIPODB.find_key(P.ref())
               || BIPODB.blank();
                  BIPODB.P:=P.ref();
                  BIPODB.ZZ_LINK:=BIPNAG.ZZ_DOK;
                  BIPODB.STATUS:=
                     {? BIPODB.P=BIPNAG.AUTOR
                     || 'O'
                     |? _zz_typ<>null() & exec('test_kryt','phr_dane',BIPNAG.ZZ_DOK,_zz_typ,0,_dbk,P)>0
                     || 'A'
                     || 'R'
                     ?};
                  exec('bipodb_set','portal_bip','BIPNAG');
                  BIPODB.add()
               ?};
               _UCZ.next()
            !}
         ?};
         BIPODB.cntx_pop();

::       Aktualizacja załączników.
         ZZ_DOKZ.cntx_psh();
         ZZ_DOKZ.index('CZAS');
         ZZ_DOKZ.prefix(BIPNAG.NP_DOK,BIPNAG.ZZ_DOK);
         _update:=1;
         {? _act='put'
         || _hash:='';
            {? _ATT.first()
            || {!
               |? _hash+=exec('hash','#blob',_ATT.BLOB);
                  _ATT.next()
               !}
            ?};
            _hash:=hash(_hash);
            {? _hash=_ext
            || _update:=0
            || {? ZZ_DOKZ.first()
               || {!
                  |? ZZ_DOKZ.del()
                  !}
               ?}
            ?}
         ?};
         {? _update & _ATT.first()
         || UD_DEF.cntx_psh();
            UD_DEF.prefix();
            _ud_skl:={? UD_DEF.seek(exec('typzal_root','phr_dane',BIPNAG)) || UD_DEF.UD_SKL || null() ?};
            UD_DEF.cntx_pop();

            {!
            |? ZZ_DOKZ.blank();
               ZZ_DOKZ.NP_DOK:=BIPNAG.NP_DOK;
               ZZ_DOKZ.ZZ_LINK:=BIPNAG.ZZ_DOK;
               ZZ_DOKZ.UD_SKL:=_ud_skl;
               ZZ_DOKZ.PLIK:=_ATT.BLOB;
               ZZ_DOKZ.add();
               _ATT.next()
            !}
         ?};
         ZZ_DOKZ.cntx_pop();

         _ret:={? _act='add' || BIPNAG.uidref()+BIPNAG.HASH || '' ?}
      ?};
      {? ~end()
      || _ret:=~~
      ?}
   ?};

   ZZ_DOK.cntx_pop();
   P.cntx_pop()

|| KOMM.error('"Wydarzenia firmowe" - brak kategorii "%1".'[_funckat[2]],0)
?};
BIPKAT.cntx_pop();
_ret


\chr_KnowledgeBItemGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_KnowledgeBaseItemGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli BIPNAG (i powiązanych).
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_KnowledgeBItemModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Get_parse','portal_core',_cfg.id,"exec('chr_KnowledgeBItemGet_update','portal_method_chr',_a,_b,_c)")


\chr_KnowledgeBItemDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parametr zapytania chr_KnowledgeBaseItemDelete.
::   WE:
::   WY: JSON lub ~~
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_KnowledgeBItemModify_cfg','portal_method_chr',_env.TabAcr);

{? _cfg.id=''
|| return()
?};

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _DEL:=exec('get_id','#sync_id',_cfg.id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.

   {? ~_DEL.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
      return()
   ?};

   _del:=0;
   _TAB:=($_env.TabAcr)();
   _TAB.cntx_psh();
   _TAB.prefix();
   {? _TAB.seek(_uidref)
   || {? _TAB=ZALACZ
      || {? ZALACZ.WWWE='N' | ZALACZ.WWW='N' | ZALACZ.HASH<>_DEL.OPIS
         || _del:=1
         || BIPKSN.cntx_psh();
            BIPKSN.index('UNIQUE');
            BIPKSN.prefix(ZALACZ.FIRMA,'ZAL',);
::          brak kategorii dla typu oznacza usunięcie
            _del:=~BIPKSN.find_key(ZALACZ.TYP_ZAL);
            BIPKSN.cntx_pop()
         ?}
      |? _TAB=BIPNAG | _TAB=BNFTT
      || {? _TAB.AKT='N'
         || _del:=1
::          Porównanie hash załączników z tym zapisanym przy identyfikatorze rekordu:
         || _del:=(_TAB.HASH<>_DEL.OPIS)
         ?}
      ?}
   ?};
   _TAB.cntx_pop();
   {? _del
   || params_exec('Delete_args','portal_core',_cfg.id,_DEL)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}

|| params_exec('Delete_args','portal_core',_cfg.id)
?}


\chr_KnowledgeBItemDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_KnowledgeBaseItemDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_KnowledgeBItemModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - chr_ContractType (typy umów).
::======================================================================================================================


\contractOrderNumber
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Określa kolejność dla przekazanego kodu typu umowy
::   WE: _a [REFERENCE] - wskazanie na typ
::       _b [STRING]    - kod typu umowy
::   WY: numer
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_typ:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
_kod:={? var_pres('_b')=type_of('')     || _b || return(_result) ?};

RU.cntx_psh();
RU.index('K');
RU.prefix(_typ);
{? RU.first()
|| _dalej:=1;
   {!
   |? _result+=1;
      {? RU.K=_kod || _dalej:=0 ?};
      _dalej & RU.next()
   !};
   {? _dalej || _result:=0 ?}
?};
RU.cntx_pop();
_result


\chr_ContractTypeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: JSON dla zapytania chr_ContractTypeModify.
::       Kontekst wywołania - rekord tabeli RU.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

SLO_TYP.cntx_psh();

:: Ponieważ ContractType ma być unikalne na portalu, który nie rozróżnia wielkości liter, to dla małych liter
:: doklejamy '_'.
_kod:={? (~-RU.K)<>RU.K || RU.K+'_' || RU.K ?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('ContractType','%1_%2'[RU.TYP().SYMBOL,_kod]);
_obj.set('ContractTypeName',RU.O);
_obj.set('IsContractOfEmployment',RU.TYP().SYMBOL='UMPRAC');
_obj.set('IsActive',1);
_obj.set('__ModifiedDate_erp',RU.idput_value());
_obj.set('__id_erp',RU.uidref());
_obj.set('OrderNumber',exec('contractOrderNumber','portal_method_chr',RU.TYP,RU.K));
_obj.set('IsFixedTermContract',RU.K<>'C');

_ret:=_obj.save();
SLO_TYP.cntx_pop();

_ret


\chr_ContractTypeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Dodanie/modyfikacja danych o typach umów - parametr zapytania chr_ContractTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_ContractTypeModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_RU_UMPRAC_ID',_formula_json)


\chr_ContractTypeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_ContractTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_RU_UMPRAC_ID')


\chr_ContractTypeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parametr zapytania chr_ContractTypeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_RU_UMPRAC_ID')


\chr_ContractTypeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_ContractTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_RU_UMPRAC_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_WorkPlace (miejsca pracy).
::======================================================================================================================


\chr_WorkPlaceModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: JSON dla zapytania chr_WorkPlaceModify.
::       Kontekst wywołania - rekord tabeli SLO_NAZ.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: przetwarzamy tylko rekordy miejsc pracy
SLO_TYP.cntx_psh();
_end:=SLO_NAZ.SLO_TYP().SYMBOL<>'MIEJSCPR';
SLO_TYP.cntx_pop();
{? _end || return(0) ?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('WorkPlace',SLO_NAZ.idadd_value()+'|'+($SLO_NAZ.ref()+8));
_obj.set('WorkPlaceName',SLO_NAZ.NAZWA);
_obj.set('__ModifiedDate_erp',SLO_NAZ.idput_value());
_obj.set('__id_erp',SLO_NAZ.uidref());

_ret:=_obj.save();


_ret


\chr_WorkPlaceModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Dodanie/modyfikacja danych o miejscach pracy - parametr zapytania chr_WorkPlaceModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_WorkPlaceModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_SLO_NAZ_MIEJSCPR_ID',_formula_json)


\chr_WorkPlaceModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_WorkPlaceModify.
::   Wml
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_SLO_NAZ_MIEJSCPR_ID')


\chr_WorkPlaceDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parametr zapytania chr_WorkPlaceDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_SLO_NAZ_MIEJSCPR_ID')


\chr_WorkPlaceDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_WorkPlaceDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_SLO_NAZ_MIEJSCPR_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_DepartmentHierarchy -> chr_DepartmentHier (struktura jednostek organizacyjnych).
::======================================================================================================================


\chr_DepartmentHierModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: JSON dla zapytania chr_DepartmentHierModify.
::       Kontekst wywołania - rekord tabeli UD_DEF.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

_fud:=exec('firma4ud_skl','schemat',,,UD_DEF.UD_SKL);
{? _fud.STATUS='B'
|| KOMM.error('Ustalenie firmy dla elementu struktury nie powiodło się.'@,0);
   return(0)
|? _fud.STATUS='I'
|| KOMM.add(_fud.MSG)
|? _fud.STATUS='OK' & _fud.VAL<>exec('ref_firma','ustawienia')
|| KOMM.add('Element z innej firmy.'@);
   return(0)
?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

UD_SKL.cntx_psh();
UD_SKL.prefix();
{? UD_DEF.UD_DEF=0 |
   UD_DEF.UD_SKL().UD_TYP<>exec('szukaj_ud_typ','schemat','PODZORG')
:: Jeżeli jednostka organizacyjna występuje w drzewie, to ma ustawioną flagę UD_SKL.DOMYSLNY='T' - nie musimy tego
:: sprawdzać.
|| KOMM.add('Schemat innego typu niż wymagany na portalu.'@);
   UD_SKL.cntx_pop();
   return(0)
|? UD_DEF.UD_DEF=0
|| KOMM.add('Element główny (niewysyłany).'@);
   UD_SKL.cntx_pop();
   return(0)
?};
:: Wyszukanie nadrzędnego:
UD_DEF.cntx_psh();
{? UD_DEF.seek(UD_DEF.UD_DEF,,1)
|| _nadrz:=UD_DEF.UD_SKL().uidref();
   UD_DEF.cntx_pop()
|| UD_SKL.cntx_pop();
   UD_DEF.cntx_pop();
   KOMM.error('Nie udało się ustalić schematu nadrzędnego.'@,0);
   return(0)
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
:: Portal pobiera wartości na godzinę 00:00 w związku z czym nowo założone jednostki pokazałyby się dnia następnego...
_obj.set('DateFrom',(10+UD_DEF.idadd_value())+' 00:00:00 ###########');
::_obj.set('DateTo',);
_obj.set('__ModifiedDate_erp',UD_DEF.idput_value());
_obj.set('__id_erp',UD_DEF.uidref());
_obj.set('DepartmentId__id_Erp',UD_DEF.UD_SKL().uidref());
_obj.set('DepartmentIdSuper__id_Erp',_nadrz);
UD_SKL.cntx_pop();

_obj.save()


\chr_DepartmentHierModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Dodanie/modyfikacja jednostki organizacyjnej - parametr zapytania chr_DepartmentHierModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_DepartmentHierModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_UD_DEF_JEDN_ID',_formula_json)


\chr_DepartmentHierModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_DepartmentHierModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_UD_DEF_JEDN_ID')


\chr_DepartmentHierDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parametr zapytania chr_DepartmentHierDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_UD_DEF_JEDN_ID')


\chr_DepartmentHierDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_DepartmentHierDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_UD_DEF_JEDN_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_RequestSubTypeModify (podrodzaje wniosków).
::======================================================================================================================


\chr_RequestSubTypeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: JSON dla zapytania chr_RequestSubTypeModify.
::       Kontekst wywołania - rekord tabeli REM_KATG.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
params_set(_par:=params_get());
_env:=_par.env;
_ret:=0;
:: Pętla tylko przy zasilaniu
_loop:=_id=0 & _ext='';
:: Wnioski administracyjne

{? _env.TabAcr='REM_KATG'
|| ETYPY.cntx_psh();
   ETYPY.index('RODZ_WP');
   ETYPY.prefix(3);
   {? {? _loop || ETYPY.first() || ETYPY.seek(_ext) ?}
   || _obj:=_env.Adds.obj;
      {!
      |?
         _obj.create();
         _obj.set('__id_cloud',{? _id || _id || ~~ ?});
         _obj.set('RequestType',ETYPY.ID_WP);
         _obj.set('RequestSubType',REM_KATG.SYMBOL);
         _obj.set('Description',REM_KATG.SYMBOL);
         _obj.set('IsActive',1);
         _obj.set('__ModifiedDate_erp',REM_KATG.idput_value());
         _obj.set('__id_erp',REM_KATG.uidref()+ETYPY.uidref());
         _ret:=_obj.save();
         _loop & _ret & ETYPY.next()
      !}
   ?};
   ETYPY.cntx_pop()
|? _env.TabAcr='ETYPY'
||
   ETYPY.cntx_psh();
   ETYPY.prefix();
   {? ETYPY.seek(_env.Param)
:: !!! Obsługa paczki | _env.Param jest napisem (uidref-em) lub tabelą tymczasową, z jednym polem UIDREF.
   ||
::    Jeżeli ustawiona widocznośc na portalu to dodaje podkategorie do wniosku administracyjnego
      _ok:=ETYPY.RODZ_WP=3 & ETYPY.W_PORTAL='T' & ETYPY.WID_WP='T' & ETYPY.AKTYWNY='T';
      {? _ok
      || REM_KATG.cntx_psh();
         REM_KATG.clear();
         {? REM_KATG.first()
         || _obj:=_env.Adds.obj;
            {!
            |?
               _obj.create();
               _obj.set('__id_cloud',{? _id || _id || ~~ ?});
               _obj.set('RequestType',ETYPY.ID_WP);
               _obj.set('RequestSubType',REM_KATG.SYMBOL);
               _obj.set('Description',REM_KATG.SYMBOL);
               _obj.set('IsActive',1);
               _obj.set('__ModifiedDate_erp',ETYPY.idput_value());
               _obj.set('__id_erp',REM_KATG.uidref()+ETYPY.uidref());
               _ret:=_obj.save();
               _ret & REM_KATG.next()
            !}
         ?};
         REM_KATG.cntx_pop()
      ?}
   ?};
   ETYPY.cntx_pop()
?};
_ret


\chr_RequestSubTypeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Dodanie/modyfikacja podtypu wniosku - parametr zapytania chr_RequestSubTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_RequestSubTypeModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_REM_KATG_ID',_formula_json)


\chr_RequestSubTypeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_RequestSubTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_REM_KATG_ID')


\chr_RequestSubTypeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Parametr zapytania chr_RequestSubTypeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_uidref:=_env.Param;

{? _env.TabAcr='ETYPY'
||
:: Obsługa "wysyłania", czyli zmienił się rekord.
   _ok:=1;
   _TAB:=~~;
   {? _env.Type=exec('mwac_type_send','synchro')
   || ETYPY.cntx_psh();
      ETYPY.prefix();
::    Jeżeli została wycofana widoczność typu wniosku, to dane są usuwane z portalu
      {? ETYPY.seek(_uidref)
      || _ok:=(ETYPY.W_PORTAL='T') & (ETYPY.WID_WP<>'T' | ETYPY.AKTYWNY<>'T')
      ?};
      ETYPY.cntx_pop()
   ?};

   {? _ok
   ||
      _id:='PORTAL_REM_KATG_ID';
::    Wyznaczam tabelę z listą rekordów do usunięcia
      REM_KATG.cntx_psh();
      REM_KATG.clear();
      {? REM_KATG.first()
      || {!
         |?
            {? var_pres('_TAB')<100
            || _TAB:=exec('get_id','#sync_id',_id,REM_KATG.uidref(),_uidref)
            || {? var_pres('_TAB_TMP')>100 || obj_del(_TAB_TMP) ?};
               _TAB_TMP:=exec('get_id','#sync_id',_id,REM_KATG.uidref(),_uidref);
               {? _TAB_TMP.first()
               || {!
                  |?
                     _TAB.ID:=_TAB_TMP.ID;
                     _TAB.OPIS:=_TAB_TMP.OPIS;
                     _TAB.add();
                     _TAB_TMP.next()
                  !}
               ?}
            ?};
            REM_KATG.next()
         !}

      ?};
      REM_KATG.cntx_pop()
   ?};
   {? var_pres('_TAB')>100
   || params_exec('Delete_args','portal_core','PORTAL_REM_KATG_ID',_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}
|| params_exec('Delete_args','portal_core','PORTAL_REM_KATG_ID')
?}


\chr_RequestSubTypeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_RequestSubTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_REM_KATG_ID')


::======================================================================================================================
:: Metody dostępu do portalu - \chr_RequestResponsiblePerson (Osoby odpowiedzialne za wnioski administracyjne).
::======================================================================================================================


\chr_RequestRespPerModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: JSON dla zapytania chr_RequestResponsiblePersonModify.
::       Kontekst wywołania - rekord tabeli REM_KAT.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
params_set(_par:=params_get());
_env:=_par.env;
_ret:=0;

{? _env.TabAcr='REM_KAT'
||
:: Przetwarzam tylko katetegorie z przypisanym typem dokumentu
   {? REM_KAT.TYP<>null()
   || ETYPY.cntx_psh();
      REM_KAT.TYP();
::    Jeżeli ustawiona widocznośc na portalu to dodaje osoby odpowiedzialne do wniosku administracyjnego
      _ok:=ETYPY.RODZ_WP=3 & ETYPY.W_PORTAL='T' & ETYPY.WID_WP='T' & ETYPY.AKTYWNY='T';
      {? _ok
      ||
         REM_KATO.cntx_psh();
         REM_KATO.index('REM_KAT');
         REM_KATO.prefix(REM_KAT.ref());
         {? REM_KATO.first()
         || _obj:=_env.Adds.obj;
            {!
            |?
               _ret:=1;
               P.index('OSOBA');
               P.prefix(REM_KATO.USERS().OSOBA,exec('ref_firma','ustawienia'));
               {? P.first()
               ||
                  {!
                  |?
                     {? P.PORTAL<>'T'
                     || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
                        P.next()
                     || _obj.create();
                        _obj.set('__id_cloud',{? _id || _id || ~~ ?});
                        _obj.set('RequestType',ETYPY.ID_WP);
::                        _obj.set('PersonId',exec('getPid','portal_core',P.uidref()));
                        _obj.set('__ModifiedDate_erp',REM_KAT.idput_value());
                        _obj.set('__id_erp',REM_KATO.uidref()+REM_KAT.uidref());
                        _obj.set('PersonId__id_Erp',P.uidref());
                        _ret:=_obj.save();
                        P.next()
                     ?}
                  !}
               ?};
               _ret & REM_KATO.next()
            !}
         ?};
         REM_KATO.cntx_pop()
      ?};
      ETYPY.cntx_pop()
   ?}
|? _env.TabAcr='REM_KATO'
||
:: Przetwarzam tylko katetegorie z przypisanym typem dokumentu
   {? REM_KATO.REM_KAT().TYP<>null()
   || ETYPY.cntx_psh();
      REM_KAT.TYP();
::    Jeżeli ustawiona widocznośc na portalu to dodaje osoby odpowiedzialne do wniosku administracyjnego
      _ok:=ETYPY.RODZ_WP=3 & ETYPY.W_PORTAL='T' & ETYPY.WID_WP='T' & ETYPY.AKTYWNY='T';
      {? _ok
      ||
         P.index('OSOBA');
         P.prefix(REM_KATO.USERS().OSOBA,exec('ref_firma','ustawienia'));
         {? P.first()
         || _obj:=_env.Adds.obj;
            {!
            |?
               {? P.PORTAL<>'T'
               || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
                  P.next()
               ||
                  _obj.create();
                  _obj.set('__id_cloud',{? _id || _id || ~~ ?});
                  _obj.set('RequestType',ETYPY.ID_WP);
::                  _obj.set('PersonId',exec('getPid','portal_core',P.uidref()));
                  _obj.set('__ModifiedDate_erp',REM_KATO.idput_value());
                  _obj.set('__id_erp',REM_KATO.uidref()+REM_KAT.uidref());
                  _obj.set('PersonId__id_Erp',P.uidref());
                  _ret:=_obj.save();
                  P.next()
               ?}
            !}
         ?}
      ?};
      ETYPY.cntx_pop()
   ?}
|? _env.TabAcr='ETYPY'
||
   ETYPY.cntx_psh();
   ETYPY.prefix();
   {? ETYPY.seek(_env.Param)
   ||
::    Jeżeli ustawiona widocznośc na portalu to dodaje osoby odpowiedzialne do wniosku administracyjnego
      _ok:=ETYPY.RODZ_WP=3 & ETYPY.W_PORTAL='T' & ETYPY.WID_WP='T' & ETYPY.AKTYWNY='T';
      {? _ok
      || REM_KAT.cntx_psh();
         REM_KAT.index('TYP');
         REM_KAT.prefix(ETYPY.ref());
         {? REM_KAT.first()
         || REM_KATO.cntx_psh();
            REM_KATO.index('REM_KAT');
            REM_KATO.prefix(REM_KAT.ref());
            {? REM_KATO.first()
            || _obj:=_env.Adds.obj;
               {!
               |?
                  _ret:=1;
                  P.index('OSOBA');
                  P.prefix(REM_KATO.USERS().OSOBA,exec('ref_firma','ustawienia'));
                  {? P.first()
                  || {!
                     |?
                        {? P.PORTAL<>'T'
                        || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
                           P.next()
                        ||
                           _pid:=exec('getPid','portal_core',P.uidref());
                           {? _pid>0
                           ||
                              _obj.create();
                              _obj.set('__id_cloud',{? _id || _id || ~~ ?});
                              _obj.set('RequestType',ETYPY.ID_WP);
::                           _obj.set('PersonId',_pid);
                              _obj.set('__ModifiedDate_erp',ETYPY.idput_value());
                              _obj.set('__id_erp',REM_KATO.uidref()+REM_KAT.uidref());
                              _obj.set('PersonId__id_Erp',P.uidref());
                              _ret:=_obj.save()
                           ?};
                           P.next()
                        ?}
                     !}
                  ?};
                  _ret & REM_KATO.next()
               !}
            ?};
            REM_KATO.cntx_pop()
         ?};
         REM_KAT.cntx_pop()
      ?}
   ?};
   ETYPY.cntx_pop()
?};
_ret


\chr_RequestRespPerModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Dodanie/modyfikacja osób odpowiedzialnych za wnioski administracyjne - parametr zapytania
::       chr_RequestResponsiblePersonModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_RequestRespPerModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_REM_KATO_ID',_formula_json)


\chr_RequestRespPerModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_RequestResponsiblePersonModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_REM_KATO_ID')


\chr_RequestRespPerDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Parametr zapytania chr_RequestResponsiblePersonDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_id:='PORTAL_REM_KATO_ID';
_uidref:=_env.Param;
{? _env.TabAcr='ETYPY'
||
:: Obsługa "wysyłania", czyli zmienił się rekord.
   _ok:=1;
   _typ:=null();
   _TAB:=~~;
   {? _env.Type=exec('mwac_type_send','synchro')
   || ETYPY.cntx_psh();
      ETYPY.prefix();
::    Jeżeli została wycofana widoczność typu wniosku, to dane są usuwane z portalu
      {? ETYPY.seek(_uidref)
      || _typ:=ETYPY.ref();
         _ok:=(ETYPY.W_PORTAL='T') & (ETYPY.WID_WP<>'T' | ETYPY.AKTYWNY<>'T')
      ?};
      ETYPY.cntx_pop()
   ?};

   {? _ok & _typ<>null()
   ||
::    Wyznaczam tabelę z listą rekordów do usunięcia
      REM_KAT.cntx_psh();
      REM_KAT.index('TYP');
      REM_KAT.prefix(_typ);
      {? REM_KAT.first()
      || REM_KATO.cntx_psh();
         REM_KATO.index('REM_KAT');
         REM_KATO.prefix(REM_KAT.ref());
         {? REM_KATO.first()
         || {!
            |?
               {? var_pres('_TAB')<100
               || _TAB:=exec('get_id','#sync_id',_id,REM_KATO.uidref(),REM_KAT.uidref())
               || {? var_pres('_TAB_TMP')>100 || obj_del(_TAB_TMP) ?};
                  _TAB_TMP:=exec('get_id','#sync_id',_id,REM_KATO.uidref(),REM_KAT.uidref());
                  {? _TAB_TMP.first()
                  || {!
                     |?
                        _TAB.ID:=_TAB_TMP.ID;
                        _TAB.OPIS:=_TAB_TMP.OPIS;
                        _TAB.add();
                        _TAB_TMP.next()
                     !}
                  ?}
               ?};
               REM_KATO.next()
            !}
         ?};
         REM_KATO.cntx_pop()
      ?};
      REM_KAT.cntx_pop()
   ?};
   {? var_pres('_TAB')>100
   || params_exec('Delete_args','portal_core',_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}
|? _env.TabAcr='REM_KATO'
|| params_exec('Delete_args','portal_core','PORTAL_REM_KATO_ID')
|? _env.TabAcr='REM_KAT'
||
:: Obsługa "wysyłania", czyli zmienił się rekord.
   {? _env.Type=exec('mwac_type_send','synchro')
   ||
      _TAB:=~~;
::    Wyznaczam tabelę z listą rekordów do usunięcia
      REM_KAT.cntx_psh();
      REM_KAT.clear();
      {? REM_KAT.seek(_uidref)
      || REM_KATO.cntx_psh();
         REM_KATO.index('REM_KAT');
         REM_KATO.prefix(REM_KAT.ref());
         {? REM_KATO.first()
         || {!
            |?
               {? var_pres('_TAB')<100
               || _TAB:=exec('get_id','#sync_id',_id,REM_KATO.uidref(),_uidref)
               || {? var_pres('_TAB_TMP')>100 || obj_del(_TAB_TMP) ?};
                  _TAB_TMP:=exec('get_id','#sync_id',_id,REM_KATO.uidref(),_uidref);
                  {? _TAB_TMP.first()
                  || {!
                     |?
                        _TAB.ID:=_TAB_TMP.ID;
                        _TAB.OPIS:=_TAB_TMP.OPIS;
                        _TAB.add();
                        _TAB_TMP.next()
                     !}
                  ?}
               ?};
               REM_KATO.next()
            !}
         ?};
         REM_KATO.cntx_pop()
      ?};
      REM_KAT.cntx_pop();
      {? var_pres('_TAB')>100
      || params_exec('Delete_args','portal_core',_id,_TAB)
      || KOMM.add('Wiersz nie wymagał usunięcia.'@);
         ~~
      ?}
   || ~~
   ?}
|| ~~
?}


\chr_RequestRespPerDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_RequestResponsiblePersonDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_REM_KATO_ID')


::======================================================================================================================
:: Metody dostępu do portalu - \chr_RequestExecutingPerson (Osoby realizujące wnioski administracyjne).
::======================================================================================================================


\chr_RequestExecPerModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: JSON dla zapytania chr_RequestExecutingPersonModify.
::       Kontekst wywołania - rekord tabeli WAOR.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
params_set(_par:=params_get());
_env:=_par.env;
_ret:=0;

{? _env.TabAcr='WAOR'
||
   ETYPY.cntx_psh();
   REM_KATG.cntx_psh();
   P.cntx_psh();
   P.clear();
   WAOR.TYP();
:: Jeżeli ustawiona widocznośc na portalu to dodaje osoby realizujące do wniosku administracyjnego
   _ok:=ETYPY.RODZ_WP=3 & ETYPY.W_PORTAL='T' & ETYPY.WID_WP='T' & ETYPY.AKTYWNY='T';
   {?  _ok
   || {? WAOR.P().PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
      || _obj:=_env.Adds.obj;
         _obj.create();
         _obj.set('__id_cloud',{? _id || _id || ~~ ?});
         _obj.set('RequestType',WAOR.TYP().ID_WP);
         _obj.set('RequestSubType',WAOR.KAT().SYMBOL);
::         _obj.set('PersonId',exec('getPid','portal_core',WAOR.P().uidref()));
         _obj.set('__ModifiedDate_erp',WAOR.idput_value());
         _obj.set('__id_erp',WAOR.uidref());
         _obj.set('PersonId__id_Erp',WAOR.P().uidref());
         _ret:=_obj.save()
      ?}
   ?};
   P.cntx_pop();
   REM_KATG.cntx_pop();
   ETYPY.cntx_pop()
|? _env.TabAcr='ETYPY'
||
   ETYPY.cntx_psh();
   ETYPY.prefix();
   {? ETYPY.seek(_env.Param)
   ||
::    Jeżeli ustawiona widocznośc na portalu to dodaje osoby realizujące do wniosku administracyjnego
      _ok:=ETYPY.RODZ_WP=3 & ETYPY.W_PORTAL='T' & ETYPY.WID_WP='T' & ETYPY.AKTYWNY='T';
      {? _ok
      ||
         REM_KATG.cntx_psh();
         P.cntx_psh();
         P.clear();
         WAOR.cntx_psh();
         WAOR.index('TYP');
         WAOR.prefix(ETYPY.ref());
         {? WAOR.first()
         || _obj:=_env.Adds.obj;
            {!
            |?
               {? WAOR.P().PORTAL<>'T'
               || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
                  WAOR.next()
               || _pid:=exec('getPid','portal_core',WAOR.P().uidref());
                  {? _pid>0
                  || _obj.create();
                     _obj.set('__id_cloud',{? _id || _id || ~~ ?});
                     _obj.set('RequestType',WAOR.TYP().ID_WP);
                     _obj.set('RequestSubType',WAOR.KAT().SYMBOL);
::                  _obj.set('PersonId',_pid);
                     _obj.set('__ModifiedDate_erp',WAOR.idput_value());
                     _obj.set('__id_erp',WAOR.uidref());
                     _obj.set('PersonId__id_Erp',WAOR.P().uidref());
                     _ret:=_obj.save()
                  ?};
                  _ret & WAOR.next()
               ?}
            !}
         ?};
         WAOR.cntx_pop();
         P.cntx_pop();
         REM_KATG.cntx_pop()
      ?}
   ?};
   ETYPY.cntx_pop()
?};
_ret


\chr_RequestExecPerModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Dodanie/modyfikacja osób odpowiedzialnych za wnioski administracyjne - parametr zapytania
::       chr_RequestExecutingPersonModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_RequestExecPerModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_WAOR_ID',_formula_json)


\chr_RequestExecPerModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_RequestExecutingPersonModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_WAOR_ID')


\chr_RequestExecPerDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Parametr zapytania chr_RequestExecutingPersonDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_uidref:=_env.Param;
{? _env.TabAcr='ETYPY'
||
:: Obsługa "wysyłania", czyli zmienił się rekord.
   _ok:=1;
   _typ:=null();
   _TAB:=~~;
   {? _env.Type=exec('mwac_type_send','synchro')
   || ETYPY.cntx_psh();
      ETYPY.prefix();
::    Jeżeli została wycofana widoczność typu wniosku, to dane są usuwane z portalu
      {? ETYPY.seek(_uidref)
      || _typ:=ETYPY.ref();
         _ok:=(ETYPY.W_PORTAL='T') & (ETYPY.WID_WP<>'T' | ETYPY.AKTYWNY<>'T')
      ?};
      ETYPY.cntx_pop()
   ?};

   {? _ok & _typ<>null()
   ||
      _id:='PORTAL_WAOR_ID';
::    Wyznaczam tabelę z listą rekordów do usunięcia
      WAOR.cntx_psh();
      WAOR.index('TYP');
      WAOR.prefix(_typ);
      {? WAOR.first()
      || {!
         |?
            {? var_pres('_TAB')<100
            || _TAB:=exec('get_id','#sync_id',_id,WAOR.uidref())
            || {? var_pres('_TAB_TMP')>100 || obj_del(_TAB_TMP) ?};
               _TAB_TMP:=exec('get_id','#sync_id',_id,WAOR.uidref());
               {? _TAB_TMP.first()
               || {!
                  |?
                     _TAB.ID:=_TAB_TMP.ID;
                     _TAB.OPIS:=_TAB_TMP.OPIS;
                     _TAB.add();
                     _TAB_TMP.next()
                  !}
               ?}
            ?};
            WAOR.next()
         !}
      ?};
      WAOR.cntx_pop()
   ?};
   {? var_pres('_TAB')>100
   || params_exec('Delete_args','portal_core',_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}
|? _env.TabAcr='WAOR'
|| params_exec('Delete_args','portal_core','PORTAL_WAOR_ID')
|| KOMM.add('Wiersz nie wymagał usunięcia.'@);
   ~~
?}


\chr_RequestExecPerDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_RequestExecutingPersonDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_WAOR_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_ZUSCode (kody w dokumentach ZUS).
::======================================================================================================================


\chr_ZUSCodeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: JSON dla zapytania chr_ZUSCodeModify.
::       Kontekst wywołania - rekord tabeli kodów w dokumentach ZUS - S_ZUS.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_rodzaj:=S_ZUS.RODZAJ;
{? _rodzaj<>'I' & _rodzaj<>'R' & _rodzaj<>'N'
|| return(0)
|| {? _rodzaj='I'
   || _rodzaj:='RODZAJDOKU'
   |? _rodzaj='R'
   || _rodzaj:='POKREWIENS'
   |? _rodzaj='N'
   || _rodzaj:='NIEPELNOSP'
   ?}
?};
_codeName:='';
{? S_ZUS.memo_get(,'OPIS')
|| _codeName:=S_ZUS.memo_txt(,,'OPIS')
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('ZUSCode',S_ZUS.KOD);
_obj.set('ZUSCodeName',_codeName);
_obj.set('ZUSCodeType',_rodzaj);
:: _obj.set('ZUSCodeDescription',);
_obj.set('IsActive',1);
{? S_ZUS.RODZAJ='R' & S_ZUS.KOD='11'
|| _obj.set('ZUSCodeName4CareLeave','syn, córka')
?};
_obj.set('__ModifiedDate_erp',S_ZUS.idput_value());
_obj.set('__id_erp',S_ZUS.uidref());

_obj.save()


\chr_ZUSCodeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Dodanie/modyfikacja danych kodów w dokumentach ZUS - parametr zapytania chr_ZUSCodeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_ZUSCodeModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_S_ZUS_ID',_formula_json)


\chr_ZUSCodeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_ZUSCodeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_S_ZUS_ID')


\chr_ZUSCodeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Parametr zapytania chr_ZUSCodeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_S_ZUS_ID')


\chr_ZUSCodeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_ZUSCodeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_S_ZUS_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_Institution (Instytucje).
::======================================================================================================================


\chr_InstitutionModify_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='US'
   || 'PORTAL_US_ID'
   |? _a='ADRES'
   || 'PORTAL_ADRES_NFZ_ID'
   || ''
   ?};
_ret


\chr_InstitutionModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: JSON dla zapytania chr_InstitutionModify.
::       Możliwe konteksty wywołania:
::       - rekord tabeli danych urzędów skarbowych i celnych - US
::       - rekord tabeli danych Urzędów/Instytucji - ADRES
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_cfg:=exec('chr_InstitutionModify_cfg','portal_method_chr',_env.TabAcr);
{? _cfg.id='' || return(0) ?};

{? _env.TabAcr='US'
||
   _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('Institution','%1^%2'[_env.TabAcr,US.EDEK_SYM]);
   _obj.set('InstitutionName',US.NU);
:: _obj.set('InstitutionDescription',);
   _obj.set('__ModifiedDate_erp',US.idput_value());
   _obj.set('__id_erp',US.uidref());
   _obj.set('InstitutionType','USK');

   _obj.save()

|? _env.TabAcr='ADRES'
||
:: Uwzględniamy tylko te rekordy z tabeli ADRES, które dotyczą oddziałów NFZ
   _symbol:='KASACH';
   SLO_TYP.cntx_psh();
   SLO_TYP.index('SYMBOL');
   _slo_typ:={? SLO_TYP.find_key(_symbol,_symbol)
            || SLO_TYP.ref()
            || null()
            ?};
   SLO_TYP.cntx_pop();

   {? ADRES.TYP<>_slo_typ || return(0) ?};

   _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('Institution','%1^%2'['NFZ',ADRES.SYMBOL]);
   _obj.set('InstitutionName',ADRES.NAZWA);
:: _obj.set('InstitutionDescription',);
   _obj.set('__ModifiedDate_erp',ADRES.idput_value());
   _obj.set('__id_erp',ADRES.uidref());
   _obj.set('InstitutionType','NFZ');

   _obj.save()
?}


\chr_InstitutionModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Dodanie/modyfikacja danych urzędów skarbowych i celnych / Urzędów/Instytucji - parametr zapytania
::       chr_InstitutionModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_InstitutionModify_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_InstitutionModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_InstitutionModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_InstitutionModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_InstitutionModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_InstitutionDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Parametr zapytania chr_InstitutionDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_InstitutionModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_args','portal_core',_cfg.id)


\chr_InstitutionDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_InstitutionDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_InstitutionModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody konfiguracyjne - chr_RequestTypeParDefParam (Parametry wniosku).
::======================================================================================================================


\chr_RequestTParDefPModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: JSON dla zapytania chr_RequestTypeParDefParamModify.
::       Kontekst wywołania - rekord tabeli schematów dodatkowych informacji dokumentów w obiegu - ETYP_ATR.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;
_result:=0;

{? _env.TabAcr='ETYPY' & ETYPY.W_PORTAL='N' & ETYPY.IN_POR
|| {! _ii:=1..3
   |! {? _id=0 | _ext=$_ii
      || _obj.create();
         _obj.set('__id_cloud',{? _id || _id || ~~ ?});
         _obj.set('RequestType',ETYPY.ID_WP);
         _obj.set('RequestField','par'+$_ii);
         _desc:={? _ii=1 || 'Id'
                |? _ii=2 || 'Treść'
                || 'Opis'
                ?};
         _obj.set('DashboardFieldDesc',_desc);
         _obj.set('DashboardFieldOrderNumber',_ii);
::          _obj.set('__ModifiedDate_cloud',);
         _obj.set('__ModifiedDate_erp',ETYPY.idput_value());
         _obj.set('__id_erp',ETYPY.uidref()+$_ii);
         _result:=_obj.save()
      ?}
   !}
|| ETYPY.cntx_psh();
   ETYPY.prefix();
   ETYP_ATR.ETYPY();
   {? ',T,P,s,'*',%1,'[ETYPY.W_PORTAL] & ETYPY.AKTYWNY='T' & ETYPY.WID_WP='T'
   || _cur:=ETYP_ATR.ref();
:: Liczba pól wyświetlanych w dashbordzie wniosków.
      _dashBoardKolLimit:=3;
      _ok:=0;

      ETYP_ATR.cntx_psh();
      ETYP_ATR.index('KOLZ');
      ETYP_ATR.prefix(ETYP_ATR.ETYPY,ETYP_ATR.ZDARZT);
      {? ETYP_ATR.first()
      || TAT.cntx_psh();
         TAT.prefix();
         _lp:=0;
         {!
         |? {? ETYP_ATR.TAT().TYP<>'W' & exec('process_params','portal_wnioski',ETYP_ATR.ref())
            || _lp+=1;
               _ok:=ETYP_ATR.ref()=_cur
            ?};
            _ok=0 & _lp<_dashBoardKolLimit & ETYP_ATR.ref()<>_cur & ETYP_ATR.next()
         !};
         TAT.cntx_pop()
      ?};
      ETYP_ATR.cntx_pop();

      {? _ok
      || _obj.create();

         _obj.set('__id_cloud',{? _id || _id || ~~ ?});
         _obj.set('RequestType',ETYP_ATR.ETYPY().ID_WP);
         _obj.set('RequestField',ETYP_ATR.ID_WP);
         _obj.set('DashboardFieldDesc',ETYP_ATR.TAT().OPIS);
         _obj.set('DashboardFieldOrderNumber',_lp);
         _obj.set('__ModifiedDate_erp',ETYP_ATR.idput_value());
         _obj.set('__id_erp',ETYP_ATR.uidref());

         _result:=_obj.save()
      ?}
   ?};
   ETYPY.cntx_pop()
?};
_result


\chr_RequestTParDefPModify_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [23.25]
:: OPIS: Dodanie/modyfikacja schematów dodatkowych informacji dokumentów w obiegu - parametr zapytania
::       chr_RequestTypeParDefParamModify.
::   WE: _a - tabela
::   WY: identyfiaktor
::----------------------------------------------------------------------------------------------------------------------
{? _a='ETYPY' || 'PORTAL_ETYPY_DS_IT_ID' || 'PORTAL_ETYP_ATR_ID' ?}


\chr_RequestTParDefPModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Dodanie/modyfikacja schematów dodatkowych informacji dokumentów w obiegu - parametr zapytania
::       chr_RequestTypeParDefParamModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_id:=exec('chr_RequestTParDefPModify_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_RequestTParDefPModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_id,_formula_json)


\chr_RequestTParDefPModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_RequestTypeParDefParamModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_id:=exec('chr_RequestTParDefPModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_id)


\chr_RequestTParDefPDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Parametr zapytania chr_RequestTypeParDefParamDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_ETYP_ATR_ID';

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _ok:=0;
:: Jeżeli po zmianie, bieżącego rekordu nie ma na "liście" rekordów, które powinny być wysłane,
:: a istnieją dla niego identyfikatory id_cloud, to musimy je usunąć z portalu.
   _uidref:=_env.Param;
   _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
   _ok:=var_pres('_TAB')>100 & _TAB.first()
|| _ok:=1
?};

{? _ok
|| params_exec('Delete_args','portal_core',_sync_id)
|| KOMM.add('Wiersz nie wymagał usunięcia.'@);
   ~~
?}


\chr_RequestTParDefPDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_RequestTypeParDefParamDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_id:=exec('chr_RequestTParDefPModify_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_id)


::======================================================================================================================
:: Metody konfiguracyjne - chr_Nationality (Obywatelstwo).
::======================================================================================================================


\chr_NationalityModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: JSON dla zapytania chr_NationalityModify.
::       Kontekst wywołania - rekord tabeli typów zapisu - SLO_KOD.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

SLO_TYP.cntx_psh(); SLO_TYP.prefix();
{? SLO_KOD.SLO_TYP().SYMBOL<>'OBYWATEL'
|| SLO_TYP.cntx_pop();
   return(0)
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('Nationality',SLO_KOD.KOD);
_obj.set('NationalityName',SLO_KOD.NAZWA);
_obj.set('__ModifiedDate_erp',SLO_KOD.idput_value());
_obj.set('__id_erp',SLO_KOD.uidref());

_result:=_obj.save();

SLO_TYP.cntx_pop();
_result


\chr_NationalityModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Dodanie/modyfikacja typów zapisu - parametr zapytania chr_NationalityModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_NationalityModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_SLO_KOD_ID',_formula_json)


\chr_NationalityModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Parsowanie odpowiedzi dla chr_NationalityModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_SLO_KOD_ID')


\chr_NationalityDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Parametr zapytania chr_NationalityDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_SLO_KOD_ID')


\chr_NationalityDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Parsowanie odpowiedzi dla chr_NationalityDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_SLO_KOD_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_CourseDefinition (Wzorce szkoleń).
::======================================================================================================================


\chr_CourseDefinModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: JSON dla zapytania chr_CourseDefinitionModify.
::       Kontekst wywołania - rekord tabeli wzorców szkoleń - SZK_WZO.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

{? SZK_WZO.PORTAL<>'T'
|| return(0)
?};

SZK_TEM.cntx_psh();

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('CourseDefinition',SZK_WZO.OPIS);
_obj.set('CourseDefinitionName',SZK_WZO.TEMAT().TEMAT);
::_obj.set('__ModifiedDate_cloud',);
_obj.set('__ModifiedDate_erp',SZK_WZO.idput_value());
_obj.set('__id_erp',SZK_WZO.uidref());

SZK_TEM.cntx_pop();

_obj.save()


\chr_CourseDefinModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Dodanie/modyfikacja typów zapisu - parametr zapytania chr_CourseDefinitionModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_CourseDefinModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_SZK_WZO_ID',_formula_json)


\chr_CourseDefinModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Parsowanie odpowiedzi dla chr_CourseDefinitionModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_SZK_WZO_ID')


\chr_CourseDefinDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Parametr zapytania chr_CourseDefinitionDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_SZK_WZO_ID')


\chr_CourseDefinDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Parsowanie odpowiedzi dla chr_CourseDefinitionDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_SZK_WZO_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonAnnualPayComp -> chr_PersonAPC
:: (Zestawienia wynagrodzeń rocznych pracowników: nagłówek).
::======================================================================================================================


\chr_PersonAPCModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: JSON dla zapytania chr_PersonAnnualPayCompModify.
::       Kontekst wywołania - rekord tabeli ZRDN.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;
P.cntx_psh();
P.prefix();
ZRDN.P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@)
|| ZRDR.cntx_psh();
   ZRDR.prefix();
   ZRDN.ZRDR();

   _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('PersonAnnualPayCompIdent',$ZRDN.ref());
::   _obj.set('PersonId',);
   _obj.set('PayYear',ZRDR.ROK);
   _obj.set('PayYearDecription',$ZRDR.ROK);
   _obj.set('LastChange',ZRDN.DOZ);
   _obj.set('PITAnnual',ZRDN.PITR);
   _obj.set('PITAnnualAvg',ZRDN.PITM);
   _obj.set('PayAnnualAvg',ZRDN.WZM);
   _obj.set('PayLast',ZRDN.WZO);
   _obj.set('OtherAnnual',ZRDN.WPR);
   _obj.set('OtherAnnualAvg',ZRDN.WPM);
   _obj.set('TaxDeductCostRev',ZRDN.KPAR);
::   _obj.set('__ModifiedDate_cloud',);
   _obj.set('__ModifiedDate_erp',ZRDN.idput_value());
   _obj.set('__id_erp',ZRDN.uidref());
   _obj.set('ShowToEmployee',ZRDN.PRACWID='T');
   _obj.set('PersonId__id_Erp',P.uidref());

   _ret:=_obj.save();

   ZRDR.cntx_pop()
?};
P.cntx_pop();
_ret


\chr_PersonAPCModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Dodanie/modyfikacja zestawienia rocznego - parametr zapytania chr_PersonAnnualPayCompModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonAPCModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_ZRDN',_formula_json)


\chr_PersonAPCModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAnnualPayCompModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_ZRDN')


\chr_PersonAPCDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Parametr zapytania chr_PersonAnnualPayCompDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_ZRDN')


\chr_PersonAPCDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAnnualPayCompDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_ZRDN')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonAnnualPayCompDet -> chr_PersonAPCDet
:: (Zestawienia wynagrodzeń rocznych pracowników: pozycje).
::======================================================================================================================


\chr_PersonAPCDetModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: JSON dla zapytania chr_PersonAnnualPayCompDetModify.
::       Kontekst wywołania - rekord tabeli ZRDP.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;
P.cntx_psh();
P.prefix();
ZRDN.cntx_psh();
ZRDN.prefix();
ZRDP.ZRDN().P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@)
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('PersonAnnualPayCompIdent',$ZRDN.ref());
   _obj.set('PersonAnnualPayCompDetIdent',$ZRDP.ref());
   _obj.set('DetailGroup',ZRDP.GRUPA);
   _obj.set('DetailDate',ZRDP.DATA);
   _obj.set('DetailValue',ZRDP.KW);
   _obj.set('DetailDescription',ZRDP.RN);
::   _obj.set('__ModifiedDate_cloud',);
   _obj.set('__ModifiedDate_erp',ZRDP.idput_value());
   _obj.set('__id_erp',ZRDP.uidref());

   _ret:=_obj.save()
?};
ZRDN.cntx_pop();
P.cntx_pop();
_ret


\chr_PersonAPCDetModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Dodanie/modyfikacja pozycji zestawienia rocznego - parametr zapytania chr_PersonAnnualPayCompDetModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonAPCDetModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_ZRDP',_formula_json)


\chr_PersonAPCDetModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAnnualPayCompDetModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_ZRDP')


\chr_PersonAPCDetDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Parametr zapytania chr_PersonAnnualPayCompDetDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_ZRDP')


\chr_PersonAPCDetDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonAnnualPayCompDetDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_ZRDP')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonWorkCalendar (Rejestrowanie wejścia/wyjścia).
::======================================================================================================================


\chr_PersonWorkCalGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Pobranie wejść/wyjść - parametr zapytania chr_PersonWorkCalendarGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_PersonWorkCalGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
::  MOD: IgPtasze [22.26]
:: OPIS: Formuła aktualizująca dane w tabeli R_POR_WW na podstawie wyniku zapytania chr_PersonWorkCalendarGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

_pzd:=exec('is_pzd03','ppsf');

_par:=obj_new('active','stop','option');
_par.active:=#exec('get_par','#portal','IsPersonWorkCalActive');
_par.stop:=#exec('get_par','#portal','PersonWorkCalStopProcActive');
_par.option:=#exec('get_par','#portal','PersonWorkCalOption');

_option:=obj_new('no_edit','with_edit');
_option.with_edit:=obj_new('single_entry','double_entry');
_option.no_edit:=1; _option.with_edit.single_entry:=2; _option.with_edit.double_entry:=3;

_entry:=obj_new('single','double');
_entry.single:=1; _entry.double:=2;

_pid:=_obj.getValue('PersonId');
_prac:=obj_new('ref','name');
_prac.ref:=exec('getPref','portal_core',_pid);
{? _prac.ref=null()
|| KOMM.error('Odnalezienie zapisu dla %1=%2 nie powiodło się.'@ ['PortalId',$_pid],0);
   return()
?};
_prac.name:='';
P.cntx_psh(); OSOBA.cntx_psh();
P.prefix(); OSOBA.prefix();
{? P.seek(_prac.ref,,1)
|| _prac.name:='%1 %2'[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE]
?};
OSOBA.cntx_pop(); P.cntx_pop();
:: Nazwy atrybutów komunikatu
_methAttr:=obj_new('calDate','fromPortal','event','workType');
_methAttr.event:=obj_new('count','time','type');
_methAttr.calDate:='CalDate';
_methAttr.fromPortal:='IsDataFromCHR';
_methAttr.event.count:='EventCount4Day';
_methAttr.event.time:='TimeOfEvent';
_methAttr.event.type:='TypeOfEvent';
_methAttr.workType:='WorkRelatedEventTypeId';
:: Pobranie atrybutów komunikatu
_buf:=obj_new('calDate','fromPortal','event','workType');
_buf.event:=obj_new('count','time','type');
_buf.calDate:=exec('getDateTime','portal_core',_obj.getValue(_methAttr.calDate)).date;
_buf.fromPortal:=_obj.getValue(_methAttr.fromPortal);
_buf.event.count:=_obj.getValue(_methAttr.event.count);
_timeOfEvent:=exec('getDateTime','portal_core',_obj.getValue(_methAttr.event.time));
_buf.event.time:=obj_new('day','val');
_buf.event.time.day:=_timeOfEvent.date;
_buf.event.time.val:=_timeOfEvent.time;
_buf.event.type:=obj_new('val','desc');
_buf.event.type.val:=_obj.getValue(_methAttr.event.type);
{? _pzd ||_buf.workType:=_obj.getValue(_methAttr.workType) ?};

_propTypes:=obj_new('WE','WY');
_propTypes.WE:=exec('r_por_ww_tp_we','ppsf');
_propTypes.WY:=exec('r_por_ww_tp_wy','ppsf');

_buf.event.type.desc:=
{? _buf.event.type.val=_propTypes.WE
|| 'Rozpoczęcie pracy'@
|? _buf.event.type.val=_propTypes.WY
|| 'Zakończenie pracy'@
?};

_result:=~~;
{? _buf.calDate=date(0,0,0)
|| KOMM.add('Nieprawidłowa data dla zapisu oznaczającego \"%1\", dla: %2.'@
      [_buf.event.type.desc,_prac.name]
   );
   return(_result)
?};
_ok:=1;
_date:=_buf.calDate;
_year:=($(_date~1))+2;
_month:={? (_msc:=(_date~2))>=10 || $_msc || '0%1'[$_msc] ?};
{? _pzd || _ppsft:=exec('get_id_erp','portal_core','PORTAL_PPSFT_ID',_buf.workType) ?};

R_POR_WW.cntx_psh();
R_POR_WW.use('r_ph%1%2'[_year,_month]);
{? _act='add'
||
:: Sprawdzenie prawidłowości zawartości komunikatu
   {? _ok & ~_buf.fromPortal
   || KOMM.add('Odebrany typ danych nie jest właściwy dla zapisu.'@);
      _ok*=0
   ?};
   {? _ok & ~_buf.event.count
   || KOMM.add('Licznik zdarzenia na dzień nie jest właściwy dla zapisu.'@);
      _ok*=0
   ?};
   {? _ok & _buf.event.count
   || R_POR_WW.cntx_psh();
      {? _pzd
      || R_POR_WW.index('P_NR');
         R_POR_WW.prefix(_prac.ref,_buf.calDate,_ppsft,_buf.event.count)
      || R_POR_WW.index('NR');
         R_POR_WW.prefix(_prac.ref,_buf.calDate,_buf.event.count)
      ?};
      {? _buf.event.type.val=_propTypes.WY & ~(R_POR_WW.first() & R_POR_WW.TP=_propTypes.WE)
      || KOMM.add('Dla zapisu brak korespondującego zapisu wejścia.'@);
         _ok*=0
      ?};
      _ts_bufor:=exec('create','#tm_stamp',R_POR_WW.DZ,R_POR_WW.GD);
      _ts_event:=exec('create','#tm_stamp',_buf.event.time.day,_buf.event.time.val);
      {? _ok & _ts_bufor>_ts_event
      || KOMM.add(
            '%1 %2 - %3: Data i godzina zakończenia pracy nie może być wcześniejsza od daty i godziny rozpoczęcia.'@
               [_prac.name,$_buf.calDate,_buf.event.type.desc]
         );
         _ok*=0
      ?};
      R_POR_WW.cntx_pop();
      {? _ok & _buf.event.count=2
      || {? _par.option<>3
         || KOMM.add('Przy obecnej parametryzacji niemożliwe jest dodanie kolejnej pary zdarzeń na ten sam dzień.'@);
            _ok*=0
         |? _par.stop=0
         || R_POR_WW.cntx_psh();
            {? _pzd
            || R_POR_WW.index('P_TP');
               R_POR_WW.prefix(_prac.ref,_buf.calDate,_ppsft)
            || R_POR_WW.index('TP');
               R_POR_WW.prefix(_prac.ref,_buf.calDate)
            ?};
            {? R_POR_WW.find_key(_propTypes.WE,_buf.event.count-1) & R_POR_WW.GD>_buf.event.time.val
            || KOMM.add('Niepoprawna kolejność zdarzeń.'@);
               _ok*=0
            ?};
            R_POR_WW.cntx_pop()
         ?}
      ?}
   ?};
   {? _ok & _buf.event.type.val<>_propTypes.WE & _buf.event.type.val<>_propTypes.WY
   || KOMM.add('Nieprawidłowy typ zapisu.'@)
   ?};
:: Sprawdzenie stanu zapisów systemu
   {? _ok
   || R_POR_WW.cntx_psh();
      {? _pzd
      || R_POR_WW.index('P_NR');
         R_POR_WW.prefix(_prac.ref,_buf.calDate,_ppsft,_buf.event.count,_buf.event.type.val)
      || R_POR_WW.index('NR');
         R_POR_WW.prefix(_prac.ref,_buf.calDate,_buf.event.count,_buf.event.type.val)
      ?};
      {? R_POR_WW.first()
      || KOMM.add('Dla %1 w dniu %2 zostało już zarejestrowane zdarzenie: %3. Dodanie zapisu nie jest możliwe.'@
            [_prac.name,$_buf.calDate,_buf.event.type.desc]
         );
         _ok*=0
      ?};
      R_POR_WW.cntx_pop()
   ?};

:: Ustalenie NR
{? _pzd
|| _nr:=1;
   R_POR_WW.cntx_psh();
   R_POR_WW.index('DZK');
   R_POR_WW.prefix(_prac.ref,_buf.calDate);
   {? R_POR_WW.first()
   || {!
      |? {? R_POR_WW.DZ<_buf.event.time.day | (R_POR_WW.DZ=_buf.event.time.day & R_POR_WW.GD<_buf.event.time.val)
         || _tmp:={? R_POR_WW.TP=_buf.event.type.val || R_POR_WW.NR+1 || R_POR_WW.NR ?};
            {? _tmp>_nr || _nr:=_tmp ?};
            R_POR_WW.next()
         || 0
         ?}
      !}
   ?};
   R_POR_WW.cntx_pop()
?};

:: Zapisanie zawartości komunikatu do systemu - utworzenie zapisu
   R_POR_WW.blank();
   R_POR_WW.P:=_prac.ref;
   R_POR_WW.DZK:=_buf.calDate;
   {? _pzd
   || R_POR_WW.POR_NR:=_buf.event.count;
      R_POR_WW.NR:=_nr;
      R_POR_WW.PPSFT:=_ppsft;
      R_POR_WW.SR:=$_par.option
   || R_POR_WW.NR:=_buf.event.count
   ?};
   R_POR_WW.DZ:=_buf.event.time.day;
   R_POR_WW.GD:=_buf.event.time.val;
   R_POR_WW.TP:=_buf.event.type.val;
   R_POR_WW.POR:={? _buf.fromPortal || 'T' || 'N' ?};
   R_POR_WW.POR_DT:=_buf.event.time.day;
   R_POR_WW.POR_GD:=_buf.event.time.val;
   _result:={? R_POR_WW.add(1) || R_POR_WW.uidref() || 0 ?}

|? _act='put'
|| _uidref:=_obj.getValue('__id_erp');
:: Sprawdzenie czy zapis istnieje w systemie
   R_POR_WW.cntx_psh();
   R_POR_WW.prefix();
   {? var_pres('_uidref')=type_of('') & _uidref<>'' || _uidref:=48+_uidref ?};
   {? var_pres('_uidref')<>type_of('') | _uidref='' | ~R_POR_WW.seek(_uidref,,1)
   || KOMM.add('Nie znaleziono zapisu%1.'@[{? var_pres('_uidref')<>type_of('') || '' || ': %1'[_uidref] ?}]);
      _ok*=0
   ?};
   {? R_POR_WW.DZK<>_buf.calDate | R_POR_WW.DZ<_buf.event.time.day
   || KOMM.add('Niedozwolona zmiana daty dla zapisu.'@)
   ?};
   {? (_pzd & R_POR_WW.POR_NR<>_buf.event.count) | (~_pzd & R_POR_WW.NR<>_buf.event.count)
   || KOMM.add('Niedozwolona zmiana licznika zdarzenia.'@)
   ?};
   {? R_POR_WW.TP<>_buf.event.type.val
   || KOMM.add('Niedozwolona zmiana typu zdarzenia.'@)
   ?};
   _mod_erp1:=exec('idtime2iso8601','#convert',R_POR_WW.IDPUT);
   _mod_erp2:=_obj.getValue('__ModifiedDate_erp');
   {? _ok & _mod_erp1<=_mod_erp2
   || _result:='';
      {? (R_POR_WW.DZ<>_buf.event.time.day) | (R_POR_WW.GD<>_buf.event.time.val)
      || R_POR_WW.DZ:=_buf.event.time.day;
         R_POR_WW_GD:=_buf.event.time.val;
         _result:={? R_POR_WW.put(1) || '' || ~~ ?}
      ?}
   ?};
   R_POR_WW.cntx_pop()
?};
R_POR_WW.cntx_pop();
_result


\chr_PersonWorkCalGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkCalendarGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli R_POR_WW.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_R_POR_WW_ID',
   "exec('chr_PersonWorkCalGet_update','portal_method_chr',_a,_b)"
)


\chr_PersonWorkCalModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Dodanie/modyfikacja danych ewidencji wejść/wyjść - parametr zapytania chr_PersonWorkCalendarModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersonWorkCalModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_R_POR_WW_ID',_formula_json)


\chr_PersonWorkCalModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
::  MOD: IgPtasze [22.26]
:: OPIS: JSON dla zapytania chr_PersonWorkCalendarModify.
::       Kontekst wywołania - rekord tabeli R_POR_WW.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;
_ret:=0;

P.cntx_psh();
P.prefix();
R_POR_WW.P();
{? P.PORTAL='T' & (_pid:=exec('getPid','portal_core',P.uidref()))>0
|| _pzd03:=exec('is_pzd03','ppsf');
   {? _pzd03 & R_POR_WW.PPSFT=null()
   || KOMM.add('Brak wskazania typu świadczenia pracy poza siedzibą firmy. Rekord nie został wysłany na Portal.'@)
   || _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('PersonId',_pid);
      _obj.set('CalDate',R_POR_WW.DZK,*0);
      _obj.set('TimeOfEvent',R_POR_WW.DZ,R_POR_WW.GD);
      _obj.set('TypeOfEvent',R_POR_WW.TP);
      _obj.set('IsDataFromCHR',R_POR_WW.POR='T');
::      _obj.set('__ModifiedDate_cloud',);
      _obj.set('__ModifiedDate_erp',R_POR_WW.idput_value());
      _obj.set('__id_erp',R_POR_WW.uidref());
      {? _pzd03
      || PPSFT.cntx_psh();
         PPSFT.prefix();
         R_POR_WW.PPSFT();
         _ppsft:=exec('get_id_cloud','portal_core','PORTAL_PPSFT_ID',PPSFT.uidref());
         _obj.set('WorkRelatedEventTypeId',_ppsft);
         _obj.set('EventCount4Day',R_POR_WW.POR_NR);
         PPSFT.cntx_pop()
      || _obj.set('EventCount4Day',R_POR_WW.NR)
      ?};

      _ret:=_obj.save()
   ?}

|| KOMM.add('Współpracownik nieprezentowany na portalu.'@)
?};
P.cntx_pop();
_ret


\chr_PersonWorkCalModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkCalendarModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_R_POR_WW_ID')


\chr_PersonWorkCalDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Parametr zapytania chr_PersonWorkCalendarDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_R_POR_WW_ID')


\chr_PersonWorkCalDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkCalendarDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_R_POR_WW_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_DeclarationType (Typy deklaracji/oświadczeń składanych przez pracownika).
::======================================================================================================================


\chr_DeclarationType_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod chr_DeclarationType* w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='OS_ZWSLO'
   || 'PORTAL_OS_ZWSLO_ID'
   |? _a='PPSF_NO'
   || 'PORTAL_PPSF_NO_ID'
   || ''
   ?};
_ret


\chr_DeclarationTypeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Dodanie/modyfikacja typów dekl./ośw. składanych przez pracownika - parametr zapytania
::       chr_DeclarationTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_DeclarationType_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_DeclarationTypeModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_DeclarationTypeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: JSON dla zapytania chr_DeclarationTypeModify.
::       Kontekst wywołania - rekord tabeli OS_ZWSLO / PPSF_PO.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_result:=0;

{? _env.TabAcr='OS_ZWSLO'
|| _pit_zero:=exec('types_pit_zero_codes','portal_walidacja');

   _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('DeclarationType',OS_ZWSLO.KOD);
   _obj.set('DeclarationDesc','%1%2'
      [OS_ZWSLO.RODZAJ,{? OS_ZWSLO.KOD=_pit_zero.employeeUnder26 || ' - rezygnacja z ulgi'@ || '' ?}]
   );
   _obj.set('__ModifiedDate_erp',OS_ZWSLO.idput_value());
   _obj.set('__id_erp',OS_ZWSLO.uidref());

   _result:=_obj.save()

|? _env.TabAcr='PPSF_NO'
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('DeclarationType',PPSF_NO.KOD);
   _obj.set('DeclarationDesc',PPSF_NO.OPIS);
   _obj.set('__ModifiedDate_erp',PPSF_NO.idput_value());
   _obj.set('__id_erp',PPSF_NO.uidref());

   _result:=_obj.save()

?};

_result


\chr_DeclarationTypeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Parsowanie odpowiedzi dla chr_DeclarationTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_DeclarationType_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_DeclarationTypeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Parametr zapytania chr_DeclarationTypeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_DeclarationType_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_args','portal_core',_cfg.id)


\chr_DeclarationTypeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Parsowanie odpowiedzi dla chr_DeclarationTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_DeclarationType_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonDeclaration (Oświadczenia pracownika).
::======================================================================================================================


\chr_PersonDecl_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod chr_PersonDeclaration* w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='OS_ZWPOD'
   || 'PORTAL_OS_ZWPOD_ID'
   |? _a='PPSF_PO'
   || 'PORTAL_PPSF_PO_ID'
   || ''
   ?};
_ret


\chr_PersonDeclModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Dodanie/modyfikacja typów dekl./ośw. składanych przez pracownika - parametr zapytania
::       chr_PersonDeclarationModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonDecl_cfg','portal_method_chr',_env.TabAcr);
_formula_json:="params_exec('chr_PersonDeclModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\chr_PersonDeclModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: JSON dla zapytania chr_PersonDeclarationModify.
::       Kontekst wywołania - rekord tabeli OS_ZWPOD.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_result:=0;

{? _env.TabAcr='OS_ZWPOD'
|| OS_ZWSLO.cntx_psh();
   OS_ZWSLO.prefix();
   _kod:=OS_ZWPOD.OS_ZWSLO().KOD;
   OS_ZWSLO.cntx_pop();

   _pit_zero:=exec('types_pit_zero_codes','portal_walidacja');
   {? OS_ZWPOD.AKTYWNY<>'T' & _kod<>_pit_zero.employeeUnder26 || return(_result) ?};

   P.cntx_psh();
   P.index('OSOBA');
   {? OS_ZWPOD.OSOBA<>null()
   || {? OS_ZWPOD.FIRMA<>null()
      || P.prefix(OS_ZWPOD.OSOBA,OS_ZWPOD.FIRMA);
         {? _loop:=P.first()
         || {!
            |? _loop
            |! {? P.PORTAL='T' & (_pid:=exec('getPid','portal_core',P.uidref()))>0
               ||
                  OS_ZWSLO.cntx_psh();
                  OS_ZWSLO.prefix();

                  _obj.create();

                  _obj.set('__id_cloud',{? _id || _id || ~~ ?});
::               _obj.set('PersonId',_pid);
                  _obj.set('DeclarationType',OS_ZWPOD.OS_ZWSLO().KOD);
                  _obj.set('DateFrom',OS_ZWPOD.D_OB);
                  _obj.set('DateTo',OS_ZWPOD.D_OW);
::               _obj.set('__ModifiedDate_cloud',);
                  _obj.set('__ModifiedDate_erp',OS_ZWPOD.idput_value());
                  _obj.set('__id_erp',OS_ZWPOD.uidref());
                  _obj.set('PersonId__id_Erp',P.uidref());

                  _result:=_obj.save();

                  OS_ZWSLO.cntx_pop()

               || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
               ?};
               _loop:=P.next()
            !}
         ?}
      || KOMM.add('Do zapisu dot. oświadczenia nie przypisano firmy [%1].'@ ['FIRMA'])
      ?}
   || KOMM.add('Do zapisu dot. oświadczenia nie przypisano osoby [%1].'@ ['OSOBA'])
   ?};
   P.cntx_pop()

|? _env.TabAcr='PPSF_PO'
|| P.cntx_psh();
   P.prefix();
   PPSF_PO.P();
   {? P.PORTAL='T' & (_pid:=exec('getPid','portal_core',P.uidref()))>0
   || PPSF_NO.cntx_psh();
      PPSF_NO.prefix();
      _obj.create();
      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('DeclarationType',PPSF_PO.PPSF_NO().KOD);
      _obj.set('DateFrom',PPSF_PO.OD);
      _obj.set('DateTo',PPSF_PO.DO);
      _obj.set('__ModifiedDate_erp',PPSF_PO.idput_value());
      _obj.set('__id_erp',PPSF_PO.uidref());
      _obj.set('PersonId__id_Erp',P.uidref());
      _result:=_obj.save();
      PPSF_NO.cntx_pop()
   || KOMM.add('Współpracownik nieprezentowany na portalu.'@)
   ?};
   P.cntx_pop()
?};

_result


\chr_PersonDeclModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonDeclarationModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonDecl_cfg','portal_method_chr',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\chr_PersonDeclDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Parametr zapytania chr_PersonDeclarationDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_cfg:=exec('chr_PersonDecl_cfg','portal_method_chr',_env.TabAcr);

{? _env.TabAcr='OS_ZWPOD' & _env.Type=exec('mwac_type_send','synchro')
|| _ok:=0;
   _uidref:=_env.Param;

   OS_ZWSLO.cntx_psh();
   OS_ZWSLO.prefix();
   _pit_zero:=exec('types_pit_zero_codes','portal_walidacja');
   _kod:=OS_ZWPOD.OS_ZWSLO().KOD;
   OS_ZWSLO.cntx_pop();
   {? OS_ZWPOD.AKTYWNY<>'T' & _kod<>_pit_zero.employeeUnder26
   || _TAB:=exec('get_id','#sync_id',_cfg.id,_uidref);
      _ok:=var_pres('_TAB')>100 & _TAB.first()
   ?}
|| _ok:=1
?};

{? _ok
|| params_exec('Delete_args','portal_core',_cfg.id)
|| KOMM.add('Wiersz nie wymagał usunięcia.'@);
   ~~
?}


\chr_PersonDeclDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonDeclarationDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('chr_PersonDecl_cfg','portal_method_chr',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - chr_SystemLogToERPGet (historia logowań).
::======================================================================================================================


\chr_SystemLogToERPGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Pobranie definicji uprawnień do funkcjonalności - parametr zapytania chr_SystemLogToERPGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_SystemLogToERPGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Formuła aktualizująca dane w tabeli PORTALU na podstawie wyniku zapytania chr_SystemLogToERPGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
:: Teoretycznie na portalu nie ma usuwania ...
|| return()
|? _act='put'
:: Dla put nic nie robimy, bo zapisy nie zmieniają się po stronie chmury
|| return('')
?};

_result:=~~;

{? _act='add'
|| _username:=_obj.getValue('UserName');
   USERS.cntx_psh();
   USERS.index('WEBLOGIN');
   USERS.prefix(_username,);
   {? USERS.first() || _user:=USERS.ref() || _user:=null() ?};
   USERS.cntx_pop();

   {? _user<>null()
   || I_LOG.cntx_psh();
      I_LOG.prefix();
      I_LOG.blank(1);
      I_LOG.USERS:=_user;
      I_LOG.DATA_LOG:=iso_datetime_parse(_obj.getValue('LogData')).date;
      I_LOG.CZAS_LOG:=iso_datetime_parse(_obj.getValue('LogData')).time;
      I_LOG.IP_LOG:='';
      I_LOG.ID_LOG:='';
      I_LOG.OPIS:=_obj.getValue('Message');
      I_LOG.OK_LOG:='T';
      I_LOG.TYPE:='P';
      {? I_LOG.add() || _result:=I_LOG.uidref() ?};
      I_LOG.cntx_pop()
   || KOMM.add('Brak użytkownika o identyfikatorze %1'@[_username]);
      _result:=0
   ?}
?};

_result


\chr_SystemLogToERPGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Parsowanie odpowiedzi dla chr_SystemLogToERPGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli I_LOG
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core',
   'PORTAL_I_LOG_ID',"exec('chr_SystemLogToERPGet_update','portal_method_chr',_a,_b)"
)


::======================================================================================================================
:: Metody konfiguracyjne - chr_PersonResendRegMail (ponowienie e-maila rejestracyjnego)
::======================================================================================================================


\chr_PResendRegMailModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: JSON dla zapytania chr_PersonResendRegMailModify.
::       Kontekst wywołania - rekord tabeli USERS
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / '' (nie używany w tej formule)
::       _c [ANY]    - parametr opcjonalny (zawierać może adres e-mail przekierowania)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;

_redirect_mail:={? var_pres('_c')=type_of('') || _c || '' ?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: Aktywni użytkownicy webowi, którzy mają wpisany login webowy będący poprawnym adresem e-mail
{? USERS.AKT='T' & USERS.PORTAL='T' & USERS.WEBLOGIN<>'' & exec('mail_ok','#email',USERS.WEBLOGIN)
|| _personid_erp:='';
   P.cntx_psh();
   P.index('OSOZATR');
   P.prefix(REF.FIRMA,USERS.OSOBA);
   {? P.first()
   || {!
      |? {? P.PORTAL='T' || _personid_erp:=P.uidref() ?};
         _personid_erp='' & P.next()
      !}
   ?};
   P.cntx_pop();

   {? _personid_erp<>''
   ||
      _obj.create();

      _obj.set('__id_cloud',{? _id=0 || ~~ || _id ?});
:: Brany bieżący znacznik czasowy, bo w tym momencie nie jest robiony put()
      _obj.set('__ModifiedDate_erp',date(),time());
      _obj.set('__id_erp',USERS.uidref());
::----------------------------------------------------------
::   _obj.set('PersonId',_PersonId);
      _obj.set('ResendRequestDate',date(),time());
      {? _redirect_mail<>'' || _obj.set('RedirectMail',_redirect_mail) ?};
      _obj.set('Personid__id_erp',_personid_erp);
      _obj.save()
   || KOMM.error('Brak powiązania użytkownika %1 z pracownikiem'[USERS.WEBLOGIN],0)
   ?}
?}


\chr_PResendRegMailModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Dodanie/modyfikacja użytkowników portalu - parametr zapytania chr_PersonResendRegMailModify.
::       Funkcja jest używana w trybie 'Uruchomienie' w kontekście rekordu USERS,
::       Sposób działania: adres e-mail przekierowania przekazany jest w env.Param.action
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PResendRegMailModify_json','portal_method_chr',_a,_b,_c)";
params_exec('Modify_args','portal_core','PORTAL_USERS_RSND_ID',_formula_json)


\chr_PResendRegMailModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonResendRegMailModify.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_USERS_RSND_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_WorkingHours (słownik etatów).
::======================================================================================================================


\chr_WorkingHoursModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: JSON dla zapytania chr_WorkingHoursModify.
::       Kontekst wywołania - rekord tabeli PORSLOIT.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

PORSLO.cntx_psh();
PORSLO.prefix();
_code:=PORSLOIT.PORSLO().CODE;
PORSLO.cntx_pop();
{? _code<>'chr_WorkingHours'
|| return(0)
?};

_owh:=exec('chr_workinghours_obj','portal_slowniki');
_wyl:=_owh.wyl(PORSLOIT.VALUE);
_wym:=_owh.wym(PORSLOIT.VALUE);

{? _wyl=0 | _wym=0
|| KOMM.error('Nieprawidłowa wartość: "%1".'[PORSLOIT.VALUE]);
   return(0)
?};

_kod:={? _wyl=_wym || '1/1' || '%1/%2'[$_wyl,$_wym] ?};
_lp:=_owh.lp(_wyl,_wym);

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('WorkingHours',_kod);
_obj.set('WorkingHoursName',PORSLOIT.DESC);
_obj.set('OrderNumber',_lp);
_obj.set('IsActive',1);
::_obj.set('__ModifiedDate_cloud',);
_obj.set('__ModifiedDate_erp',PORSLOIT.idput_value());
_obj.set('__id_erp',PORSLOIT.uidref());

_obj.save()


\chr_WorkingHoursModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Dodanie/modyfikacja elementu słownika wymiaru etatów - parametr zapytania chr_WorkingHoursModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_WorkingHoursModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_PORSLOITJ_WORKINGHOURS',_formula_json)


\chr_WorkingHoursModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Parsowanie odpowiedzi dla chr_WorkingHoursModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PORSLOITJ_WORKINGHOURS')


\chr_WorkingHoursDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Parametr zapytania chr_WorkingHoursDelete
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_PORSLOITJ_WORKINGHOURS')


\chr_WorkingHoursDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Parsowanie odpowiedzi dla chr_WorkingHoursDelete
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PORSLOITJ_WORKINGHOURS')


::======================================================================================================================
:: Metody dostępu do portalu - chr_WorkRelatedEventType -> chr_WorkRelEventT (Typy pracy poza siedzibą firmy).
::======================================================================================================================


\chr_WorkRelEventTDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Parametr zapytania chr_WorkRelatedEventTypeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_PPSFT_ID')


\chr_WorkRelEventTDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Parsowanie odpowiedzi dla chr_WorkRelatedEventTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PPSFT_ID')


\chr_WorkRelEventTModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Dodanie/modyfikacja typów pracy poza siedzibą firmy - parametr zapytania chr_WorkRelatedEventTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_WorkRelEventTModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_PPSFT_ID',_formula_json)


\chr_WorkRelEventTModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: JSON dla zapytania chr_WorkRelatedEventTypeModify.
::       Kontekst wywołania - rekord tabeli PPSFT.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_decl:='';
{? PPSFT.OSW_WYM='T' & PPSFT.PPSF_NO<> null()
|| PPSF_NO.cntx_psh();
   PPSF_NO.prefix();
   PPSFT.PPSF_NO();
   {! _lp:=1..8 |!
   {? (_tr:=($'PPSF_NO.TR%1'[$_lp])())<>''
   || _decl+=_tr+' '
   ?}
   !};
   PPSF_NO.cntx_pop()
?};
PPSFR.cntx_psh();
PPSFR.prefix();
PPSFT.PPSFR();
PPSF_NO.cntx_psh();
PPSF_NO.prefix();

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('WorkType',PPSFR.KOD);
_obj.set('WorkTypeDesc',PPSFR.NAZWA);
_obj.set('IsPartOfDayWork',PPSFT.PARTDAY='T');
_obj.set('IsDeclarationRequired',PPSFT.OSW_WYM='T');
_obj.set('Declaration',_decl-1);
::_obj.set('__ModifiedDate_cloud',);
_obj.set('__ModifiedDate_erp',PPSFT.idput_value());
_obj.set('__id_erp',PPSFT.uidref());
_obj.set('IsDefault',0);
_obj.set('ShowStartStop',PPSFT.SKL_RCP='T');
_obj.set('ShowOnRequest',PPSFT.SKL_WN='T');
_obj.set('WorkRelatedEventTypeDesc',PPSFT.OPIS);
::_obj.set('WorkTypeShortDesc',PPSFR.SKROT);
:: Obecnie przełożony nie ma możliwości złożenia wniosku w imieniu pracownika.
_obj.set('IsOnlyForEmployee',0 & PPSFR.TD_PRAC='T');
:: Możliwość wskazania adresu jest WYŁĄCZONA ze względu na brak obsługi typu TSLSloPanel.
_obj.set('CanSelectAddress',0 & PPSFR.WSK_ADR='T');
_obj.set('IsInManagerTeamCalendar',PPSFR.KAL_ZESP='T');
_obj.set('IsAddressOnlyForEmployee',PPSFR.OCHR_ADR='T');
{? PPSFT.PPSF_NO
|| _obj.set('RequiredDeclarationTypeList',PPSFT.PPSF_NO().KOD)
?};
_obj.set('ShowDeclOnlyWhenAddrChange',PPSFT.OSW_WZA='T');
_obj.set('CanLimitBeModified',PPSFR.MODLIM='T');
_obj.set('IsWorkTypeLimited',PPSFR.LIMITY='T');
:: W związku z brakiem obsługi typu TSLSloPanel wyłączamy "Niestandardowe harmonogramy".
_obj.set('IsCustomScheduleAvailable',0);
_obj.set('IsOverlappingPersiodsBlocked',1);
_obj.set('IsReqTransparent4InOut',1);
_obj.set('IsCheckStartFromYesterdayDisabled',1);

_ret:=_obj.save();

PPSF_NO.cntx_pop();
PPSFR.cntx_pop();

_ret


\chr_WorkRelEventTModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Parsowanie odpowiedzi dla chr_WorkRelatedEventTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PPSFT_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_LimWorkType (Definicje rozkładów pracy poza siedzibą firmy).
::======================================================================================================================


\chr_LimWorkTypeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Parametr zapytania chr_LimWorkTypeDelete
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_PPSFROZD_ID')


\chr_LimWorkTypeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Parsowanie odpowiedzi dla chr_LimWorkTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PPSFROZD_ID')


\chr_LimWorkTypeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Dodanie/modyfikacja definicji rozkładów pracy poza siedzibą firmy - parametr zapytania chr_LimWorkTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_LimWorkTypeModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_PPSFROZD_ID',_formula_json)


\chr_LimWorkTypeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: JSON dla zapytania chr_LimWorkTypeModify.
::       Kontekst wywołania - rekord tabeli PPSFROZD.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

PPSFR.cntx_psh();
PPSFR.prefix();

_okres:='';
{? PPSFROZD.OL='T'
|| _okres:='Tygodniowy'
|? PPSFROZD.OL='M'
|| _okres:='Miesięczny'
|? PPSFROZD.OL='R'
|| _okres:='Roczny'
?};
_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('LimWorkType',PPSFROZD.KOD);
_obj.set('LimWorkTypeDesc',PPSFROZD.NAZWA);
_obj.set('WorkType',PPSFROZD.PPSFR().KOD);
_obj.set('LimitAmount',PPSFROZD.WARTD);
_obj.set('CheckLimitPeriod',_okres);
:: Ponieważ nie obsługujemy widoku "Ewidencji pracy", to wyłączamy też prezentację wirtualną.
_obj.set('IsVirtual',0 & PPSFROZD.AUTOKAL='T');
::_obj.set('__ModifiedDate_cloud',);
_obj.set('__ModifiedDate_erp',PPSFROZD.idput_value());
_obj.set('__id_erp',PPSFROZD.uidref());
_obj.set('ShowOnRemoteWorkDeclRequest',PPSFROZD.OSW='T');

_ret:=_obj.save();

PPSFR.cntx_pop();

_ret


\chr_LimWorkTypeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Parsowanie odpowiedzi dla chr_LimWorkTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PPSFROZD_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonWorkRelatedEventL -> chr_PersWorkREventL (Limity pracy poza siedzibą firmy).
::======================================================================================================================


\chr_PersWorkREventLModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: JSON dla zapytania chr_PersonWorkRelatedEventLModify.
::       Kontekst wywołania - rekord tabeli PPSFL.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

{? ~PPSFL.P
|| KOMM.add('Limity domyślne nie są wysyłane.');
   return(0)
?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

P.cntx_psh();
P.prefix();
PPSFL.P();

_ret:=0;
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@)
|| PPSFR.cntx_psh();
   PPSFR.prefix();
   PPSFL.PPSFR();

   _type:='???';
   _amount:=0;
   {? PPSFL.SL='D'
   || _type:='DniWOkresie';
      _amount:=PPSFL.L
   |? PPSFL.SL='G'
   || _type:='GodzWOkresie';
      _amount:=(*PPSFL.LG)/60
   |? PPSFL.SL='H'
   || _type:='GodzWDniu';
      _amount:=(*PPSFL.LG)/60
   ?};

   _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('WorkType',PPSFR.KOD);
   _obj.set('DateFrom',date(PPSFL.R,1,1));
   _obj.set('DateTo',date(PPSFL.R,12,31));
   _obj.set('LimitType',_type);
   _obj.set('LimitAmount',_amount);
   _obj.set('__ModifiedDate_erp',PPSFL.idput_value());
   _obj.set('__id_erp',PPSFL.uidref());
::_obj.set('LimWorkType',);
   _obj.set('PersonId__Id_erp',P.uidref());

   _ret:=_obj.save();

   PPSFR.cntx_pop()
?};
P.cntx_pop();

_ret


\chr_PersWorkREventLModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Dodanie/modyfikacja typów pracy poza siedzibą firmy - parametr zapytania chr_PersonWorkRelatedEventLModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PersWorkREventLModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_PPSFL_ID',_formula_json)


\chr_PersWorkREventLModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkRelatedEventLModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PPSFL_ID')


\chr_PersWorkREventLGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Pobranie limitów - parametr zapytania chr_PersonWorkRelatedEventLGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_PersWorkREventLGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła aktualizuje dane w tabeli PPSFL na podstawie wyniku zapytania chr_PersonWorkRelatedEventLGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu - dla akcji 'add', '' - dla akcji 'put' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
|| {? PPSFL.del()
   || return('')
   || return()
   ?}
?};

_pid:=_obj.getValue('PersonId');
_pref:=exec('getPref','portal_core',_pid);
{? _pref=null()
|| KOMM.error('Odnalezienie zapisu dla %1=%2 nie powiodło się.'@ ['PersonId',$_pid],0);
   return()
?};

_firma:=exec('ref_firma','ustawienia');

_wt:=_obj.getValue('WorkType');
PPSFR.cntx_psh();
PPSFR.index('KOD');
PPSFR.prefix(_firma,_wt,);
_ppsfr:={? PPSFR.first() || PPSFR.ref() || null() ?};
PPSFR.cntx_pop();

{? _ppsfr=null()
|| KOMM.error('Odnalezienie definicji rodzaju [%1] pracy poza siedzibą firmy nie powiodło się.'@[_wt]);
   return()
?};

{? _act='add'
|| PPSFL.blank();
   PPSFL.FIRMA:=_firma;
   PPSFL.P:=_pref

|? PPSFL.FIRMA<>_firma
|| KOMM.error('Zmiana firmy.'@,0);
   return()
|? PPSFL.P<>_pref
|| KOMM.error('Zmiana współpracownika.'@,0);
   return()
?};

PPSFL.PPSFR:=_ppsfr;

:: Obsługujemy wyłącznie okresy roczne.
_t0:=time(0,0,0);

_froms:=_obj.getValue('DateFrom');
_tos:=_obj.getValue('DateTo');
_from:=exec('getDateTime','portal_core',_froms);
_to:=exec('getDateTime','portal_core',_tos);

{? _from.date~2<>1 | _from.date~3<>1 | _from.time<>_t0
|| KOMM.error('Nieprawidłowa wartość początku okresu [%1].'@[_froms],0);
   return()
|? _to.date~2<>12 | _to.date~3<>31 | _to.time<>_t0
|| KOMM.error('Nieprawidłowa wartość końca okresu [%1].'@[_tos],0);
   return()
|? _from.date~1<>_to.date~1 | _to.date<_from.date
|| KOMM.error('Nieprawidłowy okres (%1 - %2).'@[_from.date$1,_to.date$1],0);
   return()
?};

PPSFL.R:=_from.date~1;

_type:=_obj.getValue('LimitType');
_amount:=_obj.getValue('LimitAmount');
{? _type='DniWOkresie'
|| PPSFL.SL:='D';
   PPSFL.L:=_amount;
   PPSFL.LG:=_t0
|? _type='GodzWOkresie'
|| PPSFL.SL:='G';
   PPSFL.L:=0;
   PPSFL.LG:=time(_amount,0,0)
|? _type='GodzWDniu'
|| PPSFL.SL:='H';
   PPSFL.L:=0;
   PPSFL.LG:=time(_amount,0,0)

|| KOMM.error('Nieprawidłowa wartość sposobu limitowania [%1].'@[_type],0);
   return()
?};

{? _act='add'
|| {? PPSFL.add()
   || PPSFL.uidref()
   || ~~
   ?}
|| {? PPSFL.put()
   || ''
   || ~~
   ?}
?}


\chr_PersWorkREventLGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkRelatedEventLGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli PPSFL.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_PPSFL_ID',
   "exec('chr_PersWorkREventLGet_update','portal_method_chr',_a,_b)")


\chr_PersWorkREventLDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Parametr zapytania chr_PersonWorkRelatedEventLDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_PPSFL_ID')


\chr_PersWorkREventLDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonWorkRelatedEventLDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PPSFL_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_PersonLimWorkType (Rodzaje pracy limitowanej pracownika).
::======================================================================================================================


\chr_PerLimWorkTModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Dodanie/modyfikacja rodzaju pracy limitowanej pracownika - parametr zapytania chr_PersonLimWorkTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_PerLimWorkTModify_json','portal_method_chr',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_PPSF_H_ID',_formula_json)


\chr_PerLimWorkTModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: JSON dla zapytania chr_PersonLimWorkTypeModify.
::       Kontekst wywołania - rekord tabeli PPSF_H.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;
_ret:=0;

P.cntx_psh();
P.prefix();
PPSF_H.P();
{? P.PORTAL='T' & (_pid:=exec('getPid','portal_core',P.uidref()))>0
|| PPSFROZD.cntx_psh();
   PPSFROZD.prefix();
   PPSF_H.PPSFROZD();

   _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
::_obj.set('PersonId',_pid);
   _obj.set('LimWorkType',PPSFROZD.KOD);
   _obj.set('DateFrom',PPSF_H.OD);
   _obj.set('DateTo',PPSF_H.DO);
::_obj.set('__ModifiedDate_cloud',);
   _obj.set('__ModifiedDate_erp',PPSF_H.idput_value());
   _obj.set('__id_erp',PPSF_H.uidref());
   _obj.set('WorkType',PPSFROZD.PPSFR().KOD);
   _obj.set('AddressType','DOMYŚLNY');
   _obj.set('AddressType2','DODATKOWY');
   _obj.set('PersonId__id_Erp',P.uidref());

   _ret:=_obj.save();
   PPSFROZD.cntx_pop()
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@)
?};
P.cntx_pop();
_ret


\chr_PerLimWorkTModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonLimWorkTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PPSF_H_ID')


\chr_PerLimWorkTDelete_args
::----------------------------------------------------------------------------------------------------------------------
::UTW: IgPtasze [12.51]
:: OPIS: Parametr zapytania chr_PersonLimWorkTypeDelete
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_PPSF_H_ID')


\chr_PerLimWorkTDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Parsowanie odpowiedzi dla chr_PersonLimWorkTypeDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PPSF_H_ID')

:Sign Version 2.0 jowisz:1045 2024/02/26 10:22:29 9afac285709eeceb92584cea211799b35ab58f6115de00c86c7180c83784b6d8815c68dab4e14b8d9f9795cf13cf7b9a63614e55cdfea499c5edca5f4e14c0b64e1e2a59ed1148adc1b79fec6bb6a07d55d723d6e3f07000f5700813dd7436ffd2241d593bdf750162de196b4be63b1e333f55637e0c279d0bde7ea8a55f5286
