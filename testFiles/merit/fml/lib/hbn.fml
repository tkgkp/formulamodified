:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: hbn.fml
:: Utworzony: 17.02.2015
:: Autor: MB
::======================================================================================================================
:: Zawartość: Formuły oraz wywoływacze obszaru HBN
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Formuła inicjująca dla obszaru HBN
::----------------------------------------------------------------------------------------------------------------------
exec('rach_slo','rachunki');
exec('RB','object');
exec('F','object');
exec('init','jpk_v');
~~


\hbn_prz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Główna formuła obszaru HBN_PRZ - Przelewy elektroniczne
::----------------------------------------------------------------------------------------------------------------------
exec('init','hbn');
:: wyłączenie formuł wersji budżetowej
PB.fld_fml('ZAD','BEFORE_DISPLAY',"");
PB.fld_fml('ZAD','BEFORE_EDIT',"");
PB.fld_fml('ZAD','F3',"");
PB.fld_fml('ZAD','AFTER_EDIT',"");
PB.fld_fml('RZ','BEFORE_DISPLAY',"");
PB.fld_fml('RZ','BEFORE_EDIT',"");
PB.fld_fml('RZ','F3',"");
PB.fld_fml('RZ','AFTER_EDIT',"");
PB.fld_fml('PG','BEFORE_DISPLAY',"");
PB.fld_fml('PG','BEFORE_EDIT',"");
PB.fld_fml('PG','F3',"");
PB.fld_fml('PG','AFTER_EDIT',"");
exec('main','!hbn_prz_zapr');
~~


\hbn_wba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Główna formuła wywoływacza HBN_WBA - Wyciągi bankowe
::----------------------------------------------------------------------------------------------------------------------
exec('init','hbn');
exec('main','!hbn_wba_zawy');
~~


\wyciagi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula decyduje o podswietleniu wiersza z plikiem wyciagu bankowego
::        ST_FILES.Z='T' - przetworzony i zaimportowany
::        ST_FILES.Z='B' - brak specyfikacji lub nieznany bank
::  OLD: \wyciagi/tech_hb.fml
::----------------------------------------------------------------------------------------------------------------------
{? pwb_fil || _grayed:='N' || _grayed:='Y' ?};
PWB.actions_grayed('WER',_grayed);
{? PWB.Z='T' || 'PWB#01#01'
|? PWB.Z='B' || 'PWB#01#03'
|| ''
?}


\test_odd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Test czy biezacy uzytkownik ma prawo do plikow z danej jednostki ksiegowej
::   WE: kod jednostki ksiegowej
::  OLD: \test_odd/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
_wy:=0;
OPERATOR.USER();
exec('get_usersf','users');
{? _>0 & _a<>'' || _wy:=exec('usr_fjks','b_perm',_a) ?};
_wy


\get_rach
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: W podanym pliku wyciagu wyszukuje numer rachunku
::   WE: _a - plik, b - czy wg pth
::   WY: string z numerem rachunku lub pusty string
::  OLD: \get_rach/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
_wiersz:='';_rach:='';_poz:=0;
{? _file:=fopen(_a,'r',_b)
|| {! |? (_wiersz:=fread(_file))<>'\n' |!
      {? 4+_wiersz=':25:'
      || _rach:=|(4-_wiersz);
         _poz:=_rach*'/PL';
         {? _rach<>'' & _poz>0 || _rach:=1-_rach ?};
         TMP_RACH.RACH:=_rach;
         TMP_RACH.add()
:: inne oznaczenia
:: wersja dla BGK
      |? 8+_wiersz='<WYCIAGI'
      || _rach:=26+(61-_wiersz);
         _poz:=_rach*'/PL';
         {? _rach<>'' & _poz>0 || _rach:=1-_rach ?};
         TMP_RACH.RACH:=_rach;
         TMP_RACH.add()
:: dla pliku szeroki 2
      |? (1+(|_wiersz)='"') & ((12+|_wiersz)+1)='"' & #(26+(14-_wiersz))>0
      || _rach:=26+(14-_wiersz);
         _poz:=_rach*'/PL';
         TMP_RACH.RACH:=_rach;
         TMP_RACH.add()
      ?}
   !};
   fclose(_file)
?};
_rach


\get_rach_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009+]
:: OPIS: W podanym pliku wyciagu xml wyszukuje numer rachunku
::   WE: _a - plik, b - czy wg pth
::   WY: string z numerem rachunku lub pusty string
::  OLD: \get_rach_xml/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
_wiersz:='';_rach:='';_poz:=0;_bufor:='';
{? _file:=fopen(_a,'r',_b)
|| {! |? (_wiersz:=fread(_file))<>'\n' |!
      _bufor+=_wiersz;
      _tag:='rachunek="';
      _poz:=_wiersz*_tag;
      {? _poz>0
      || _wiersz:=(_poz-1)-_wiersz;
         _wiersz:=+_tag-_wiersz;
         _poz:=_wiersz*'"';
         _rach:=(_poz-1)+_wiersz;
         TMP_RACH.RACH:=_rach;
         TMP_RACH.add()
      ?}
   !};
   fclose(_file);
   {? _rach=''
   || _loop:=1;
      {! |?
         _obj:=exec('cut_xml_node','hbn',_bufor,'<ns6:Stmt>','<ns6:Bal>','<ns6:Ntry>');
         _line:=_obj[1];_bufor:=_obj[2];obj_del(_obj);
         {? _line<>''
         || {? +_line
            || _rbl:=exec('get_xml_node','hbn',_line,'<ns6:BBAN>','</ns6:BBAN>');
               _rach:=RB.get_rbel(2,_rbl);
               TMP_RACH.RACH:=_rach;
               TMP_RACH.add()
            ?}
         || _loop:=0
         ?};
         _loop
      !}
   ?}
?};
_rach


\pwb_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Formuła na blank dla pola PW.PLIK
::   WY: ref rekordu tabeli PWB
::  OLD: \pwb_ref/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
PWB.ref()


\pwn_plik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Formuła na blank dla pola PWN.PLIK
::   WY: ref rekordu tabeli PWB
::----------------------------------------------------------------------------------------------------------------------
PWB.ref()


\pw_trig
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [12.41]
:: OPIS: Trigger dla tabeli PW - add przed i put przed
::  OLD: \pw_trig/dol_dok.fml
::----------------------------------------------------------------------------------------------------------------------
{? PW.SYM_ZEW='' || PW.SYM_ZEW:=PW.SYM ?};
exec('trig_pw','hbn');
1


\f3_pbkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: F3 na kontrahencie
::  OLD: \f3_pbkh/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
{? PB.USTYPPL<>'' & PB.USOKRES<>''
|| US.index('URZSKNAZ');
   US.prefix();
   {? ~US.find_key(PB.W) || US.first() ?};
   US.win_sel('SELHOME');
   {? US.select(,1) || PB.W:=US.NU ?}
|? PB.KD<>'KALI: płace'
|| KH.index('NAZ');
   KH.prefix(2);
   {? ~KH.find_key(PB.W,PB.M,PB.UL) & ~KH.find_key(PB.W) || KH.first() ?};
   KH.win_sel('WERHOME');
   KH.actions('WERHOME','F');
   {? -menu_txt*'szukaj' || SKID_RBK.actions('WER_RBO','DuP:D') ?};
   {? KH.select(,1)
   || SKID_RBK.actions('WER_RBO');
      __F3PBKH:=KH.ref();
      __BEPBKH:=KH.NAZ+PB.M+PB.UL;
      _wy:=KH.NAZ
   || SKID_RBK.actions('WER_RBO');
      _wy:=~~
   ?};
   KH.actions('WERHOME');
   _wy
?}


\ae_pbkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Po redakcji kontrahenta w PB
::  OLD: \ae_pbkh/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
{? PB.RODZ<>'KU' & PB.KD<>'KALI: płace'
|| KH.index('NAZ'); KH.prefix(2);
   _is_kh:=var_pres('__F3PBKH')=7 & __BEPBKH=PB.W+PB.M+PB.UL & KH.seek(__F3PBKH) | (PB.W<>'' & KH.find_key(PB.W));
   {? (__PBWINE='EDIT' | __PBWINE='EDIT_W' | __PBWINE='PB_EDI1' | __PBWINE='PB_EDIW') & _is_kh
   || PB.M:=KH.MIASTO;
      PB.UL:=exec('kh_ul','rozrach_przel');
      PB.KP:=KH.KPOCZ;
      {? ~RB.getrrban(PB.RW,'KH',#KH.ref())
      || _rw:=RACHBANK.RB_KH_PB;
          PB.RW:=RACHBANK.RB_KH_PB:=RACHBANK.KB_3R:=RB.get_drb(2,'KH',#KH.ref());
          {? |PB.RW='' || PB.RW:=RACHBANK.RB_KH_PB:=RACHBANK.KB_3R:=_rw ?}
      ?};
      {? 1+PB.RODZ='K'
      || PB.NBW:=RB.getrbank(4,RACHBANK.RB_KH_PB,XINFO.KRAJ().KODISO)
      || PB.NBW:=RB.getrbank(4,RACHBANK.RB_KH_PB,PB.KRAJ_BAN().KODISO)
      ?};
      PB.KH:=KH.ref();
      PB.W:=KH.NAZ
   |? __PBWINE='EDIT_R' & _is_kh & KH.NAZ=PB.W
   || {? PB.KH=null | PB.KH<>KH.ref()
      || PB.M:=KH.MIASTO;
         PB.UL:=exec('kh_ul','rozrach_przel');
         PB.KP:=KH.KPOCZ;
         {? ~RB.getrrban(PB.RW,'KH',#KH.ref())
         || PB.RW:=RACHBANK.KB_3R:=RB.get_drb(2,'KH',#KH.ref())
         ?};
         PB.KH:=KH.ref();
         PB.NBW:=RB.getrbank(4,RACHBANK.KB_3R,XINFO.KRAJ().KODISO)
      ?}
   || {? PB.KH<>null
      || PB.M:=PB.UL:=PB.RW:=RACHBANK.RB_KH_PB:=RACHBANK.KB_3R:='';
         PB.NBW:=PB.KH:=null
      ?}
   ?};
   VAR_EDIT.KW:=0;
   VAR_DEL.delete('__F3PBKH','__BEPBKH')
|? PB.KD<>'KALI: płace'
|| US.index('URZSKNAZ');
   US.prefix();
   {? US.find_key(PB.W)
   || PB.M:=US.MU;
      PB.UL:=US.UU;
      PB.W:=US.NU;
      PAR_WYDR.TABAKR:='US';
      PAR_WYDR.REF:=#US.ref;
      PB.RW:=RACHBANK.RB_US_PB:='';
      PB.NBW:=null;
      {? +PB.USTYPPL
      || SLO.index('SL_TR');
         SLO.prefix(XINFO.SLTYPPL,PB.USTYPPL);
         {? SLO.first()
         || SKID_RBK.index('TAB');
            SKID_RBK.prefix(null,'US','US',#US.ref(),SLO.ref());
            {? SKID_RBK.first()
            || PB.RW:=RACHBANK.RB_US_PB:=RB.get_rbtx(1,SKID_RBK.ref(),'');
               PB.NBW:=RB.getrbank(4,RACHBANK.RB_US_PB,XINFO.KRAJ().KODISO)
            ?}
         ?}
      ?}
   || PB.M:=PB.UL:=PB.RW:=RACHBANK.RB_US_PB:='';
      PB.NBW:=null
   ?}
?};
1


\is_pw_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Czy są pozycje PW_OP
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
PW_OP.cntx_psh();
PW_OP.index('PW');
PW_OP.prefix(PW.ref());
_wy:=PW_OP.size();
{? _wy=1
|| {? PW_OP.first() & PW_OP.AN<>''
   || PW.AN:=PW_OP.AN
   |? PW_OP.first() & PW_OP.AN=''
   || _wy:=0
   ?}
?};
PW_OP.cntx_pop();
_wy


\be_pwsym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Poprawianie zaimportowanych wyciagow bankowych; Przed redagowaniem symbolu rozrachunku
::  OLD: \be_pwsym/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_pw_op','hbn')=0
|| {? var_pres('g_impwb')>0 & g_impwb=1
   || _v:=1; _vr:='';
      {? KONTO.K1<>''
      || KS.index('SYM');
         KS.prefix(SSTALE.AR,SSTALE.AR().SYNT+KONTO.K1);
         {? KS.first()
         || {! |? {? KS.SYM=SSTALE.AR().SYNT+KONTO.K1 || _vr:=KS.ROZR; _v:=0 ?}; _v & KS.next() !}
         ?}
      ?};
      KH.index('NAZ');
      KH.prefix(2,PW.KONTR);
      {? PW.KONTR<>'' & KH.first() || 1 || {? _vr<>'Z' & _vr<>'' || 1 || 0 ?} ?}
   || 1
   ?}
|| 0
?}


\f3_pwsym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Poprawianie zaimportowanych wyciagow bankowych; F3 na symbolu rozrachunku
::  OLD: \f3_pwsym/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('g_impwb')>0 & g_impwb=1
|| {? var_pres('g_impwbk')<0 || g_impwbk:=0  ?};
   _v:=1; _vr:='';
   {? KONTO.K1<>''
   || KS.index('SYM');
      KS.prefix(SSTALE.AR,SSTALE.AR().SYNT+KONTO.K1);
      {? KS.first()
      || {! |? {? KS.SYM=SSTALE.AR().SYNT+KONTO.K1 || _vr:=KS.ROZR; _v:=0 ?}; _v & KS.next() !}
      ?}
   ?};
   {? _vr<>'' & _vr<>'Z'
   || {? PAR_WYDR.ODD_R
      || OP.index('STAN_O'); OP.prefix(SSTALE.WAL,PAR_WYDR.ODD_R,'N',KONTO.K1)
      || OP.index('STAN'); OP.prefix(SSTALE.WAL,'N',KONTO.K1)
      ?}
   || OP.index('KH');
      {? PAR_WYDR.ODD_R
      || OP.prefix(SSTALE.WAL,g_impwbk,'N',PAR_WYDR.ODD_R)
      || OP.prefix(SSTALE.WAL,g_impwbk,'N')
      ?}
   ?};
   OP.win_sel('SLO_WB');
   OP.hdr_sel(' nierozliczone'@);
   ROZRACH.TABELA:='DOK';
   {? +fld() || exec('pos_op','hbn',fld()) ?};
   {? OP.select(,+fld()<>0)
   || g_impwbr:=OP.ref();
      PW.SYM:=OP.SYM;
      PW.SYM_ZEW:=OP.SYM_ZEW
   ?}
|| 1
?}


\pos_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Znajduje rozrachunek w biezacej dziedzinie wg symbolu
::   WE: _a: symbol rozrachunku
::  OLD: \pos_op/przelew2.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
{? OP.first() || {! |? {? OP.SYM=_a || _ret:=1 ?}; ~_ret & OP.next() !} ?};
{? ~_ret || OP.first() ?}; _ret


\ae_pwsym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Poprawianie zaimportowanych wyciagow bankowych; Po redagowaniu symbolu rozrachunku
::  OLD: \ae_pwsym/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
_vop:=1;
_cntop:=0;
{? var_pres('g_impwb')>0 & g_impwb=1
|| {? PW.SYM<>''
   || {? var_pres('g_impwbr')<0
      || OP.index('KHSM');
         OP.prefix(FINFO.NAROD,g_impwbk,PW.SYM,PW.SYM);
         {? OP.first()
         || {? OP.size()>1
            || {! |? {? (OP.AN=PW.AN & PW.AN<>'') | PW.AN='' || _cntop+=1 ?}; OP.next() !}
            || _cntop:=0
            ?};
            {? _cntop>1
            || FUN.emsg('W kartotece rozrachunków istnieje więcej niż jeden rozrachunek\no podanym '
                        'identyfikatorze!\nNależy wybrać właściwy rozrachunek korzystając ze słownika '
                        '(klawisz F3).'@);
               _vop:=0
            || {? OP.size()>1 || g_impwbr:=0 || g_impwbr:=OP.ref() ?}
            ?}
         || g_impwbr:=0
         ?}
      ?}
   || {? PW.AN='' | PW.SYM='' || PW.WSK_R:='N' ?}
   ?};
   {? _vop & var_pres('g_impwbr')>=0 & g_impwbr
   || {? OP.seek(g_impwbr)
      || {? PW.AN<>'' & PW.AN<>OP.AN
         || FUN.info('Zmieniono numer konta analitycznego na związany z rozrachunkiem.'@)
         ?};
         PW.AN:=KONTO.K1:=OP.AN;
         PW.SYM:=OP.SYM;
         PW.SYM_ZEW:=OP.SYM_ZEW;
         PW.WSK_R:='T'
      ?}
   ?}
?};
_vop


\rb_impwb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DPU [2008]
:: OPIS:
::  OLD: \rb_impwb/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
RACHBANK.KB_1R:={? PW.RBL<>'' || RB.get_rbtx(2,PW.RBL) || '' ?};
{? PW.WSK_R='T' || 'PW#01#01' || '' ?}


\rb_pwn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Kolorowanie rekordów PWN o statusie 'T' (przygotowany do zadekretowania)
::----------------------------------------------------------------------------------------------------------------------
{? PWN.STATUS='T' || _grayed:='D' || _grayed:='AR' ?};
PWN.actions_grayed('WER',_grayed);
{? PWN.STATUS='T' || 'PWN#01#01' || '' ?}


\pw_op_trig
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [12.41]
:: OPIS: Trigger dla tabeli PW_OP - add przed i put przed
::  OLD: \pw_op_trig/dol_dok.fml
::----------------------------------------------------------------------------------------------------------------------
{? PW_OP.SYM_ZEW='' || PW_OP.SYM_ZEW:=PW_OP.SYM ?};
1


\aktwal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [8.50]
:: OPIS: Funkcja zmienia aktywna walute w pozycjach wyciągów
::  OLD: \aktwal/oper.fml
::----------------------------------------------------------------------------------------------------------------------
_wal:=SSTALE.WAL;
{? exec('par_w','dok_fks')
|| SLO.seek(SSTALE.WAL);
   SLO.win_sel('ONE_SEL');
   SLO.hdr_sel();
   SLO.hdr_sel(SLU.NAZ);
   SLO.win_edit('WAL');
   {? SLO.select(,1)
   || {? SLO.ref()<>_wal
      || SSTALE.WAL:=SLO.ref();
         PW.hdr_sel(); PW.hdr_sel(', waluta: %1'@[SSTALE.WAL().KOD]);
         exec('setf','hbn_filtr',0,'I','D')
      ?}
   ?};
   SLO.hdr_sel()
?};
1


\findttr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Znajduje rekord tabeli TYPYTRAN
::  OLD: \findttr/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
SLU.cntx_psh(); SLO.cntx_psh(); SKID_RBK.cntx_psh();
SLO.index('SL');
TYPYTRAN.index('TYP');
TYPYTRAN.prefix('IMP_WYC_BAN',PW.BL,PW.TYPTRAN,PW.TYPTRAN);
_ok:=0;
{? TYPYTRAN.first()
|| {? TYPYTRAN.RODZ='K'
   || _ok:=1
   |? TYPYTRAN.RODZ='Z'
   || SKID_RBK.index('TAB');
      {!
      |? SLO.prefix();
         {? SLO.seek(TYPYTRAN.TYP)
         || SKID_RBK.prefix(null,'ZUS','ZUS',0,SLO.ref());
            _ok:=SKID_RBK.first() & SKID_RBK.N=PW.RBK
         ?};
         _ok=0 & TYPYTRAN.next()
      !}
   |? TYPYTRAN.RODZ='U'
   || SKID_RBK.index('WEKTOR');
      _typ:=TYPYTRAN.TYP().KOD;
      {!
      |? SLO.prefix(XINFO.SLTYPPL,_typ);
         {? SLO.first()
         || {!
            |? SKID_RBK.prefix('US',PW.RBK);
               _slo:=SLO.ref();
               {? SKID_RBK.first()
               || {!
                  |? _ok:=SKID_RBK.SLO=_slo;
                     _ok=0 & SKID_RBK.next()
                  !}
               ?};
               _ok=0 & SLO.next()
            !}
         ?};
         _ok=0 & TYPYTRAN.next()
      !}
   ?}
?};
SLU.cntx_pop(); SLO.cntx_pop(); SKID_RBK.cntx_pop();
_ok


\findkhrb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.40]
:: OPIS: Wspomaga ustalanie kontrahenta na podstawie nr rachunku
::       bankowego (uzupelnienie do \rbsearch w trybie 1)
::  OLD: \findkhrb/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_vrb:="_nr:=RB.get_rbel(2,PW.RBK,'');
       SKID_RBK.cntx_psh();
       _act_rbk:=SKID_RBK.ndx_tmp('',1,'TAB',,0, 'AKTYWNY',,0, 'N',,0);
       SKID_RBK.index(_act_rbk);
       SKID_RBK.prefix('KH','T',_nr);
       _ret:={? SKID_RBK.first() & SKID_RBK.size()=1 || SKID_RBK.ref() || null ?};
       SKID_RBK.ndx_drop(_act_rbk);
       SKID_RBK.cntx_pop();
       _ret"();
:: rachunek licencjobiocy inny w pozycji i w naglowku rownoznaczne jest z wypelnionym w pozycji subkoncie rach. licencjobiocy
_vrbls:={? PW.RBL<>PW.PWN().RBL || RB.getrrban(PW.RBL,REF.FIRMA().SYMBOL+'KH2') || 0 ?};

{? _vrb
|| SKID_RBK.prefix();
   SKID_RBK.seek(_vrb);
   _ret:=1
|? _vrbls
|| SKID_RBK.prefix();
   SKID_RBK.seek(_vrbls);
   _ret:=1
|| {? _a
   || SKID_RBK.index('TAB');
      SKID_RBK.prefix(RACHBANK.FIRMA,'KH');
      _v:=1;
      KH.cntx_psh(); KH.clear();
      {? SKID_RBK.size()>1 & SKID_RBK.first()
      || {! |?
            {? KH.seek(SKID_RBK.REF,'kontr') & -KH.NAZ=-(60+PW.KONTR) || _v:=0; _ret:=1 ?};
            _v & SKID_RBK.next()
         !};
         {? _v
         || {? var_pres('TTMP')>0 || VAR_DEL.delete('TTMP') ?};
            TTMP:=tab_tmp(2,
               'KOD','STRING[8]','Kod',
               'SKR','STRING[10]','Skrót',
               'NAZ','STRING[60]','Nazwa',
               'REF','REAL','REF',
               'KH','REAL','KH',
               'RB','STRING[1]','Czy ma rachunek bankowy?');
            SKID_RBK.first();
            {! |?
               {? KH.seek(SKID_RBK.REF,'kontr')
               || {? ~TTMP.find_key(KH.KOD,KH.SKR)
                  || TTMP.KOD:=KH.KOD;
                     TTMP.SKR:=KH.SKR;
                     TTMP.NAZ:=KH.NAZ;
                     TTMP.REF:=#SKID_RBK.ref();
                     TTMP.KH:=#KH.ref();
                     TTMP.RB:='T';
                     TTMP.add()
                  ?}
               ?}; SKID_RBK.next()
            !};
            KH.index('KOD');
            KH.prefix(2);
            {? KH.first()
            || {! |?
                  {? ~TTMP.find_key(KH.KOD,KH.SKR)
                  || TTMP.KOD:=KH.KOD; TTMP.SKR:=KH.SKR; TTMP.NAZ:=KH.NAZ; TTMP.KH:=#KH.ref();
                     TTMP.REF:=0; TTMP.RB:='N'; TTMP.add()
                  ?};
                  KH.next()
               !}
            ?};
            _wsel:=TTMP.mk_sel('Rachunek: '@,'P',0,'ttmp_wer',,,,,'U');
            TTMP.win_fld(_wsel,,'KOD'); TTMP.win_fld(_wsel,,'SKR'); TTMP.win_fld(_wsel,,'NAZ'); TTMP.win_fld(_wsel,,'RB');
            TTMP.win_act(_wsel,,'Formuła','Wy&bierz'@@,,,,"KH.seek(TTMP.KH); exec('add_kh_rbk','hbn');sel_exit()",1,,,,'B');
            TTMP.win_act(_wsel,,'Kolejność',);
            TTMP.win_sel(_wsel);
            TTMP.hdr_sel(PW.RBK);
            {? TTMP.select() || {? SKID_RBK.seek(TTMP.REF,'skid_rbk') || _ret:=1 ?} ?};
            obj_del(TTMP)
         ?}
      ?};
      KH.cntx_pop()
   ?}
?};
_ret


\add_kh_rbk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [IFZ] [21.37]
:: OPIS: Wspomaga wpisanie rachunku bankowego dla wybranego kontrahenta podstawie wyciągu
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('~~Dla kontrahenta nie istnieje rachunek bankowy podany na przelewie.\nCzy '
           'dodać rachunek dla kontrahenta?'@)
|| SKID_RBK.prefix();
   SKID_RBK.blank();
   SKID_RBK.TAB:='KH';
   SKID_RBK.REF:=TTMP.KH;
   SKID_RBK.RD:='N';
   SKID_RBK.SLU:=SKID_RBK.SLO:=SKID_RBK.SKID_RBK:=0;
   SKID_RBK.KOD:='';
   SKID_RBK.N:=RB.get_rbel(2,PW.RBK);
   SKID_RBK.BANK:=RB.getrbank(4,SKID_RBK.N,SKID_RBK.KRAJ().KODISO);
   exec('berbwal','rachunki');
   RACHBANK.RB_KH_SR:='';
   SKID_RBK.win_edit('RED_RBO');
   {? SKID_RBK.edit("exec('ar_rbo','rachunki',0)") || {? SKID_RBK.add() ||  TTMP.REF:=#SKID_RBK.ref();  TTMP.put() ?} ?}
?}


\fbimpwbr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Formula rozpoznaje zaimportowane przelewy
::   WE:  _a  - tryb pracy: 0 - grupa rekordow; 1 - jeden rekord
::       [_b] - zapisac zmiany? [1]-tak 0-nie
::  OLD: \fbimpwbr/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=1 || _b:=1 ?};
 _tt:=sql('select DOK_REJ.EDSYMZEW,DOK_REJ.JPK_FA_T,DOK_REJ.JPK_V_T '+
            'from DOK_REJ where DOK_REJ.EDSYMZEW=\'T\' and DOK_REJ.JPK_FA_T=\'Z\' order by 1');
CzySymZew:=_tt.first();
SKID_RBK.prefix();
_vref:=PW.ref();
{? _a
|| _kod:=Plugin.run('ROZPOZWB_HB_001',_a);
   {? _kod=0
   || exec('rozpozwb','hbn',_a)
   ?};
   PW.RBK:=RB.get_rbel(2,PW.RBK);
   {? _b || PW.put() ?}
|| {? PW.first()
   || _kod:=1;
      {! |?
         {? _kod=1 || _kod:=Plugin.run('ROZPOZWB_HB_001',_a) ?};
         {? _kod=0
         || exec('rozpozwb','hbn',_a)
         ?};
         PW.RBK:=RB.get_rbel(2,PW.RBK);
         {? _b || PW.put() ?};
         PW.next()
      !}
   ?}
?};
VAR_DEL.delete('CzySymZew');
{? PW.ref()<>_vref || PW.seek(_vref) ?}; 1


\rozpozwb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Formula rozpoznaje zaimportowane przelewy. Uzupelnia w tabeli PW pola zgodnie z opisem:
::       WSK_R: 'T' - operacja rozpoznana jednoznacznie, 'N' - operacja nierozpoznana
::       AN: symbol konta analitycznego
::   WE: _a: tryb pracy: 0 - grupa rekordow; 1 - jeden rekord
::   ZM: _vr: czy poszukiwac rozrachunek: 0 - nie; 1 - tak
::  OLD: \rozpozwb/przelewy.fml
::  OLD: \rozpozwb/!hbn_wba_droz.fml
::----------------------------------------------------------------------------------------------------------------------
_vr:=1;
_find_tt:=0;
{? PW.TYPTRAN<>''
|| _find_tt:=exec('findttr','hbn');
   {? _find_tt & TYPYTRAN.ROZR='N' || _vr:=0 ?}
?};
_czy_spn:=PW.WSK_R<>'T' & ~+PW.AN & PW.SP='T' & PW.RBK<>'';
_tytul:=PW.TYTOP;
:: czy przelew podzielonej płatności (Split payment)
{? _czy_spn & PW.STR='Wn'
|| _act_rbk:=SKID_RBK.ndx_tmp('',1,'AKTYWNY',,0, 'N',,0);
   SKID_RBK.index(_act_rbk);
   SKID_RBK.prefix('T');
   {? (~SKID_RBK.find_key(RB.get_rbel(2,PW.RBK),) | SKID_RBK.VAT<>'T') &
      (~SKID_RBK.find_key(RB.get_rbel(2,PW.RBL),) | SKID_RBK.VAT<>'T')
   || PW.WSK_R:='N';
      KH.cntx_psh();
      KH.index('SNIP'); KH.prefix(2,PW.SP_KHNIP,);
      {? KH.first() & ~KH.next()
      || {? exec('nrfak_okro','rozrach_przel',PW.SP_NRFAK)=0
::       split payment prosty
         || _nrfak:=PW.SP_NRFAK;
            {? _nrfak*'zaliczka'
            || _nrfak:=|STR.gsub(_nrfak,'zaliczka','')
            ?};
            {? var_press('CzySymZew')>0 & CzySymZew
            || OP.index('KHSZ');
               OP.prefix(FINFO.NAROD,KH.ref(),_nrfak,);
               _ok:=~OP.first()
            || _ok:=1
            ?};
            {? _ok
            || OP.index('KHSM'); OP.prefix(FINFO.NAROD,KH.ref(),_nrfak,)
            ?};
            {? OP.first()
            || {? ~OP.next() & (1+OP.TYP='N' | 1+OP.TYP='Z')
               || PW.AN:=OP.AN;
                  PW.SYM:=OP.SYM;
                  PW.SYM_ZEW:=OP.SYM_ZEW;
                  PW.WSK_R:='T';
                  sym_zew:=OP.SYM_ZEW;
                  exec('cr_pwop','hbn',PW.ref(),OP.WAL().KOD,OP.ODD,OP.AN,OP.SYM,PW.KW,PW.DK);
                  VAR_DEL.delete('sym_zew')
               |? OP.first()
               || {!
                  |? {? (1+OP.TYP='N' | 1+OP.TYP='Z') & OP.ODD=PW.ODD
                     || PW.AN:=OP.AN;
                        PW.SYM:=OP.SYM;
                        PW.SYM_ZEW:=OP.SYM_ZEW;
                        PW.WSK_R:='T';
                        sym_zew:=OP.SYM_ZEW;
                        exec('cr_pwop','hbn',PW.ref(),OP.WAL().KOD,OP.ODD,OP.AN,OP.SYM,PW.KW,PW.DK);
                        VAR_DEL.delete('sym_zew')
                     || 1
                     ?} & OP.next()
                  !}
               ?}
            ?}
::       split payment zbiorczy
         || _jest:=exec('imp_zb','rozrach_przel','xxxx');
            _rok:=SSTALE.AR().POCZ_ROK~1;
            {? ~_jest || _jest:=exec('imp_zb','rozrach_przel',$_rok) ?};
            {? ~_jest || _jest:=exec('imp_zb','rozrach_przel',$(_rok-1)) ?};
            {? ~_jest || _jest:=exec('imp_zb','rozrach_przel',$(_rok-2)) ?};
            {? _jest
            || PW.WSK_R:='T'
            ?}
         ?}
      ?};
      KH.cntx_pop()
?};
   SKID_RBK.ndx_drop(_act_rbk)
?};
{? PW.WSK_R<>'T' & ~+PW.AN & (_vr & ~+PW.SYM | ~_vr | (_find_tt & TYPYTRAN.RODZ<>'K'))
|| PW.AN:='';
   {? (_find_tt & TYPYTRAN.RODZ='K') || PW.SYM:=PW.SYM_ZEW:='' ?};
   _vrbl:=RB.getrrban(PW.PWN().RBL,REF.INFO,0); _vrbwal:=null; _vrbwalk:='';
   {? _vrbl
   || {? SKID_RBK.seek(_vrbl)
      || _vrbwal:=SKID_RBK.WAL; _vrbwalk:=SKID_RBK.WAL().KOD
      ?}
   ?};
   SLO.cntx_psh();
   SLU.cntx_psh();
   SLUAPPL.cntx_psh();
   SLO.index('SL');
   SLO.prefix(FINFO.SLWAL().SLU,{? +PW.WAL || PW.WAL || _vrbwalk ?});
   _vwalslo:={? SLO.first() || SLO.ref() || null ?};
   SLO.cntx_pop();
   SLU.cntx_pop();
   SLUAPPL.cntx_pop();
:: czy taki przelew zbiorczy istnieje?
   {? +PW.TYTOP>=35 & -(18+PW.TYTOP)='przelew zbiorczy -'
   || _vref:=PW.ref();
      PW.cntx_psh();
      PW_OP.cntx_psh();
      _vp:=exec('impwb_rl','hbn','xxxx',form(18-PW.TYTOP),_vref);
      {? ~_vp
      || OKRO_F.cntx_psh();
         OKRO_F.index('ROK');
         OKRO_F.prefix(SSTALE.AR);
         {? OKRO_F.first() & OKRO_F.POCZ<>date(0,0,0)
         || _vr:=4+$OKRO_F.POCZ
         || {? OKRO_F.next()
            || _vr:=4+$OKRO_F.POCZ()
            || {? OKRO_F.prev() || _vr:=4+$OKRO_F.POCZ() ?}
            ?}
         ?};
         OKRO_F.cntx_pop();
         _vp:=exec('impwb_rl','hbn',_vr,form(18-_tytul),_vref);
         {? ~_vp || _vr:=$(#_vr-1); _vp:=exec('impwb_rl','hbn',_vr,form(18-_tytul),_vref) ?};
         {? ~_vp || _vr:=$(#_vr+2); _vp:=exec('impwb_rl','hbn',_vr,form(18-_tytul),_vref) ?}
      ?};
      PW.cntx_pop();
      PW_OP.cntx_pop();
      {? _vp || PW.WSK_R:='T' ?}
:: to nie jest przelew zbiorczy
   || PW.WSK_R:='N';
:: Jezeli transakcja jest rozrachunkowa i platnosc zwykla (nie ZUS ani US)
      {? _vr & ((_find_tt & TYPYTRAN.RODZ='K') | ~_find_tt)
:: Jezeli rozpoznano kontrahenta
      || {? exec('findkhrb','hbn',_a)
         || KH.cntx_psh();
            KH.prefix();
            {? KH.seek(SKID_RBK.REF,'kontr') & {? var_pres('g_impwbk')>0 || KH.ref=g_impwbk || 1 ?}
            || PW.KH:=KH.ref();
               PW.KONTR:=KH.NAZ;
               PW.put()
            ?};
            _khtyp:=KH.TYP;
            KH.cntx_pop();
            {? _khtyp='R'
            || _pos:=_tytul*'Data VAT RR:';
               {? _pos
               || _str:=(_pos-1)+12-_tytul;
                  _data:=10+_str;
                  _tytul:=STR.gsub(_tytul,' Data VAT RR:'+_data,'')
               ?}
            ?};
            PW_OP.index('PW');
            PW_OP.prefix(PW.ref());
            {? PW_OP.first() || {! |? PW_OP.del() !} ?};
            OP.index('KHSM');
            OP.prefix(_vwalslo,SKID_RBK.REF,_tytul,_tytul);
:: Jezeli jest tylko jeden rozrachunek o tym symbolu dla kontrahenta
            {? OP.first() & (1+OP.TYP='N' | 1+OP.TYP='Z') & OP.size()=1 & OP.SYM=_tytul
            || PW.AN:=OP.AN;
               PW.SYM:=OP.SYM;
               PW.SYM_ZEW:=OP.SYM_ZEW;
               PW.WSK_R:='T';
               sym_zew:=OP.SYM_ZEW;
               {? +PW.WAL & _vrbwalk<>PW.WAL
               || exec('cr_pwop','hbn',PW.ref(),OP.WAL().KOD,OP.ODD,OP.AN,OP.SYM,PW.KW_WAL,PW.DK)
               || exec('cr_pwop','hbn',PW.ref(),OP.WAL().KOD,OP.ODD,OP.AN,OP.SYM,PW.KW,PW.DK)
               ?};
               VAR_DEL.delete('sym_zew')
:: Jezeli jest wiele rozrachunkow o tym symbolu dla kontrahenta to trzeba sprawdzic z jakiego ODD
            |? OP.size()>1
            || _vl:=1;
               {! |?
                  {? (1+OP.TYP='N' | 1+OP.TYP='Z') & PW.ODD=OP.ODD
                  || PW.AN:=OP.AN;
                     PW.SYM:=OP.SYM;
                     PW.SYM_ZEW:=OP.SYM_ZEW;
                     PW.WSK_R:='T';
                     _vl:=0;
                     sym_zew:=OP.SYM_ZEW;
                     {? +PW.WAL & _vrbwalk<>PW.WAL
                     || exec('cr_pwop','hbn',PW.ref(),OP.WAL().KOD,OP.ODD,OP.AN,OP.SYM,PW.KW_WAL,PW.DK)
                     || exec('cr_pwop','hbn',PW.ref(),OP.WAL().KOD,OP.ODD,OP.AN,OP.SYM,PW.KW,PW.DK)
                     ?};
                     VAR_DEL.delete('sym_zew')
                  ?};
                  _vl & OP.next()
               !}
:: Jezeli nie ma rozrachunku o tym symbolu dla kontrahenta
:: sprawdza czy byl taki przelew zbiorczy
            || _vcont:=1;
               PB.cntx_psh();
               PB_OP.cntx_psh();
               SLO.cntx_psh();
               KH.prefix();
               SLO.index('SL');
               SLO.prefix(FINFO.SLWAL().SLU,{? +PW.WAL || PW.WAL || FINFO.NAROD().KOD ?});
               {? SLO.first() & KH.seek(SKID_RBK.REF,'kontr')
               || PB.use('pb'+(4+$date()));
                  PB_OP.use('pop'+(4+$date()));
                  PBHIST.use('ph'+(4+$date()));
                  {? exec('rozpozw2','hbn')
                  || PB.use('pb'+$(#(4+$date())-1));
                     PB_OP.use('pop'+$(#(4+$date())-1));
                     PBHIST.use('ph'+$(#(4+$date())-1));
                     {? exec('rozpozw2','hbn')
                     || PB.use('pb'+$(#(4+$date())+1));
                        PB_OP.use('pop'+$(#(4+$date())+1));
                        PBHIST.use('ph'+$(#(4+$date())+1));
                        _vcont:=exec('rozpozw2','hbn')
                     || _vcont:=0
                     ?}
                  || _vcont:=0
                  ?}
               ?};
               PB.cntx_pop();
               PB_OP.cntx_pop();
               SLO.cntx_pop();
:: Jezeli nie ma przelewu zbiorczego, szuka fragmentow pola TYTOP
               {? _vcont
               || OP.prefix(_vwalslo,SKID_RBK.REF);
                  {? OP.first()
                  || _vkw:={? +PW.WAL & PW.KW_WAL || PW.KW_WAL || PW.KW ?};
                     _vsp:=PW.SP_V;
                     _sp:=PW.SP='T';
                     {! |? 
                        {? (1+OP.TYP='N' | 1+OP.TYP='Z') & -_tytul*-OP.SYM>0 & PW.ODD=OP.ODD & OP.WN<>OP.MA
                        || _vsal:={? PW.STR='Wn' || OP.MA-OP.WN || OP.WN-OP.MA ?};
                           _vsal_sp:={? _sp || exec('f_vat','fks_sp') ?};
                           PW.AN:=OP.AN;
                           PW.SYM:=OP.SYM;
                           PW.SYM_ZEW:=OP.SYM_ZEW;
                           sym_zew:=OP.SYM_ZEW;
                           exec('cr_pwop','hbn',PW.ref(),OP.WAL().KOD,OP.ODD,OP.AN,OP.SYM,
                           {? _vkw-_vsal>0 || _vsal || _vkw ?},PW.DK,_tytul);
                           VAR_DEL.delete('sym_zew');
                           _vkw-=_vsal;
                           _vsp-=_vsal_sp
                        ?};
                        _vkw>0 & (_sp=0 | _vsp>0) & OP.next()
                     !};
:: Jezeli nie rozdysponowano calej kwoty transakcji
                     {? ((+PW.WAL & PW.KW_WAL & PW.KW_WAL>=_vkw) | PW.KW>_vkw) & _vkw>0
                     || exec('cr_pwop','hbn',PW.ref(),'',null,'','',_vkw,PW.DK,_tytul,{? _sp & _vsp>0 || _vsp ?})
                     ?};
:: Jezeli dodano zapisy o rozrachunkach
                     PW_OP.prefix(PW.ref());
                     {? PW_OP.first()
                     || _vl:=0;
                        {? PW_OP.size>1
                        || PW.AN:='';
                           PW.SYM:=PW.SYM_ZEW:='';
                           _vl:=1
                        || {! |?
                              {? PW.AN<>PW_OP.AN
                              || PW.AN:='';
                                 PW.SYM:=PW.SYM_ZEW:='';
                                 _vl:=1
                              ?};
                              {? PW.SYM<>PW_OP.SYM
                              || PW.SYM:=PW.SYM_ZEW:='';
                                 _vl:=1
                              ?};
                              PW_OP.next()
                           !}
                        ?};
                        {? _vkw<=0 || PW.WSK_R:='T' ?};
                        {? _vl | _vkw<=0 || PW.put() ?}
                     ?}
                  ?}
               ?}
            ?}
:: Jezeli nie rozpoznano kontrahenta
         || OP.index('SYM');
            OP.prefix(FINFO.NAROD,_tytul,_tytul);
:: Jezeli jest tylko jeden rozrachunek o tym symbolu
            {? OP.first() & OP.size()=1 & (~(_czy_spn & PW.STR='Ma') | OP.TYP='NAL')
            || PW.AN:=OP.AN;
               PW.SYM:=OP.SYM;
               PW.SYM_ZEW:=OP.SYM_ZEW;
               PW.WSK_R:='T';
               sym_zew:=OP.SYM_ZEW;
               exec('cr_pwop','hbn',PW.ref(),OP.WAL().KOD,OP.ODD,OP.AN,OP.SYM,PW.KW,PW.DK);
               VAR_DEL.delete('sym_zew')
            ?}
         ?};
         {? PW.WSK_R<>'T' & PW.TYPTRAN<>''
         || TYPYTRAN.index('TYP');
            TYPYTRAN.prefix('IMP_WYC_BAN',PW.BL,PW.TYPTRAN,PW.TYPTRAN);
            {? TYPYTRAN.first() & TYPYTRAN.ROZR='T'
            || {? form(TYPYTRAN.KONTO)<>'' || PW.AN:=($(TYPYTRAN.KONTO))() ?};
               PW.SYM:=_tytul
            ?}
         ?}
:: Jezeli transakcja nie jest rozrachunkowa lub platnosci sa ZUS lub US
      || {? _find_tt
         || {? form(TYPYTRAN.KONTO)<>'' || PW.AN:=($(TYPYTRAN.KONTO))() ?};
            PW.WSK_R:='T'
         ?}
      ?}
   ?};
   {? PW.BK=0 & PW.KONTR<>''
   || _v:=PW.RBK;
      {? +form(3+_v)=2 & +form(12+_v)=11 || _v:=3-_v ?};
      {? (9+_v)+1=' ' | (9+_v)+1='-'
      || _vb:=(8+_v); B.cntx_psh(); B.index('BANKID'); B.prefix(_vb);
         {? _vb<>'' & B.first() & B.NUMER=_vb || PW.BK:=B.ref() ?}; B.cntx_pop()
      ?}
   ?}
?};
1


\trig_pwn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Trigger przed put/add dla PWN
::----------------------------------------------------------------------------------------------------------------------
{? PWN.RBL<>'' & PWN.RBL*' ' || PWN.RBL:=exec('rb_nosp','#string',PWN.RBL) ?};
1


\trig_pw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Trigger przed put/add dla PW
::----------------------------------------------------------------------------------------------------------------------
{? PW.RBL<>'' & PW.RBL*' ' || PW.RBL:=exec('rb_nosp','#string',PW.RBL) ?};
1


\f3_pwkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Poprawianie zaimportowanych wyciagow bankowych; F3 na kontrahencie
::  OLD: \f3_pwkh/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
KH.index('NAZ');
KH.prefix(2);
{? ~KH.find_key(PW.KONTR) || KH.first() ?};
_m:={? exec('ps_65','rachunki')='T' || 'N' || 'C' ?};
KH.win_sel('WERHOME');
{? KH.select(,1,,_m) || g_impwbk:=KH.ref();
PW.KONTR:=KH.NAZ;
PW.KH:=KH.ref() ?}


\hbn_parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Zmiana parametrów pracy w obszarze HBN
::----------------------------------------------------------------------------------------------------------------------
{? __PARSES.editDom('HBN','FKS') || AreaTitle.setTitle() ?}


\hbn_prz_dlis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy polecenia przelewów wynagrodzenia pracowników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('hbn_prz_dlis','ppl',__PARSES.getVal('ListaPłac').REF);
exec('setf','hbn_filtr',0,'E','B')


\hbn_prz_dwsk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Tworzy polecenia przelewów wybranego składnika.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('hbn_prz_dwsk','ppl',__PARSES.getVal('ListaPłac').REF);
exec('setf','hbn_filtr',0,'E','B')


\hbn_prz_dlkr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy polecenia przelewów komorniczych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_lista:=__PARSES.getVal('ListaPłac');
_okres:=exec('wybierz_rok_miesiac','daty',_lista.R,_lista.M);
{? _okres.R<>0 & _okres.M<>0
|| exec('hbn_prz_dlkr','ppl',,_okres.R,_okres.M)
?};
exec('setf','hbn_filtr',0,'E','B')


\hbn_prz_dluz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy polecenia przelewów dla umów cywilnoprawnych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('hbn_prz_dluz','ppl');
exec('setf','hbn_filtr',0,'E','B')


\hbn_prz_dlus_4
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy polecenie przelewu dla deklaracji PIT-4
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('hbn_prz_dlus','hbn','PIT-4')


\hbn_prz_dlus_8a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy polecenie przelewu dla deklaracji PIT-8A
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('hbn_prz_dlus','hbn','PIT-8AR')


\hbn_prz_dlus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy polecenie przelewu do urzędu skarbowego
::       _a [STRING] - rodzaj deklaracji: PIT-4, PIT-8A
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('hbn_prz_dlus','ppl',_a);
PB.f_rfresh()


\hbn_prz_dppk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy polecenie przelewu wpłat na PPK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('hbn_prz_dppk','ppl');
exec('setf','hbn_filtr',0,'E','B')


\pb_confirm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Przelewy elektroniczne - Zatwierdź/Anuluj
::----------------------------------------------------------------------------------------------------------------------
{? PB.KID='' | 1+PB.KID<>'l'
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='HBN_PRZ_EAKC';
   _params.AKCJA:='Zatwierdź/Anuluj';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   _params.UIDREF:=PB.uidref();
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'PB',PB.ref());
   _params.PROC_START:='N';
   exec('mp_run','#b__box',_params)
|? PB.sel_size()=0
|| _ref:=exec('find_o','hbn',PB.KID);
   O.cntx_psh();
   O.prefix();
   {? _ref & O.seek(_ref)
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='HBN_PRZ_EAKW';
      _params.AKCJA:=menu_txt();
      _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
      _params.UIDREF:=O.uidref();
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'O',O.ref());
      _params.PROC_START:='N';
      exec('mp_run','#b__box',_params)
   ?};
   O.cntx_pop()
?}


\find_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Znajduje listę płac na podstawie indentyfikatora PB.KID
::   WE: _a - identyikator z PB.KID
::----------------------------------------------------------------------------------------------------------------------
_lt:=8+_a;
_a:=9-_a;
_firma:=3+_a;
_f_zatr:=1+(3-_a);
O.cntx_psh();
O.index('FFZLT');
O.prefix(exec('from_sym','#firma',_firma),_f_zatr,_lt);
_ref:={? O.first() || O.ref() || null ?};
O.cntx_pop();
_ref


\kbFromO
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Zwraca KB dla listy płac
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
F_ZATR.cntx_psh();
_kb:=O.LT+'/'+O.FIRMA().SYMBOL+O.F_ZATR().KOD;
F_ZATR.cntx_pop();
FIRMA.cntx_pop();
_kb


\pb_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Akceptacja/Anulowanie przelewu grupowe
::   WE: _a - operacja: 1-akceptacja 2-anulowania
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_press('g_cnt')<=0 || g_cnt:=0 ?};
{? _a=2
|| {? PB.ZT='T'
   || PB.USER_ZTW:='';
      PB.D_ZTW:=date(0,0,0);
      PB.ZT:='N';
      PAR_WYDR.RPAR1-=PB.KW;
      PAR_WYDR.RPAR2+=PB.KW;
      g_cnt+=1;
      1
   ?}
|| {? PB.ZT='N'
   || {? PB.RW<>'' & (PB.RODZ<>'W' | PB.RODZZAGR<>null) & PB.KW>0
      || PB.USER_ZTW:=exec('name','users');
         PB.D_ZTW:=date();
         PB.ZT:='T';
         PAR_WYDR.RPAR1+=PB.KW;
         PAR_WYDR.RPAR2-=PB.KW;
         g_cnt+=1;
         1
      ?}
   ?}
?}


\podsuma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: podsumowanie przelewow zatwierdzonych i niezatwierdzonych
::  OLD: \podsuma/!hbn_prz_eakw.fml
::----------------------------------------------------------------------------------------------------------------------
PB.cntx_psh();
_ref:=PB.ref();
PAR_WYDR.RPAR1:=PAR_WYDR.RPAR2:=PAR_WYDR.RPAR3:=0;
{? PB.f_first()
|| {! |?
      {? PB.ZT='T' || PAR_WYDR.RPAR1+=PB.KW || PAR_WYDR.RPAR2+=PB.KW ?};
      PB.f_next()
   !};
   PAR_WYDR.RPAR3:=PAR_WYDR.RPAR1+PAR_WYDR.RPAR2
?};
PB.f_seek(_ref);
PB.cntx_pop();
1


\impwb_rl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.40]
:: OPIS: Wyszukuje przelew zbiorczy i dodaje do pozycji wyciagu bankowego dane rozrachunkow
::       (tabela PW_OP).
::   WE: _a: maska dla tabel PB i PB_OP; _b: tytul przelewu; _c: ref do PW (pozycja wyciagu)
::  OLD: \impwb_rl/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
_v:=0;
PB.use('pb'+_a);
PB.index('IPS');
PB.prefix(_b,_b);
PB_OP.use('pop'+_a);
PB_OP.index('PB');
PW_OP.prefix();
PBHIST.use('ph'+_a);
{? PB.first()
|| {! |?
      {? PB.PR='T' & PW.RBL=PB.RD
      || {? PB_OP.prefix(PB.ref()); PB_OP.first()
         || {! |?
               PW_OP.blank();
               PW_OP.PW:=_c;
               PW_OP.WAL:=PB_OP.WAL;
               PW_OP.ODD:=PB_OP.ODD;
               PW_OP.AN:=PB_OP.AN;
               PW_OP.SYM:=PB_OP.SYM;
               PW_OP.SYM_ZEW:=PB_OP.SYM_ZEW;
               PW_OP.K:=PB_OP.K;
               PW_OP.DP:=PB_OP.DP;
               PW_OP.TYT:=PB_OP.TYT;
               PW_OP.add();
               PB_OP.next()
             !}; _v:=1
         ?}
      ?};
      PB.next
   !}
?}; _v


\cr_pwop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Tworzy rekordy w PW_OP podczas rozpoznawania pozycji wyciagu.
::   WE: _a - ref do PW;
::       _b - kod waluty
::       _c - ref do ODD
::       _d - konto analityczne
::       _e - symbol rozrachunku
::       _f - kwota
::       _g - data przelewu
::       _h - pelny tytul przelewu
::       _i - kwota VAT
::  OLD: \cr_pwop/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
PW_OP.prefix();
PW_OP.blank();
PW_OP.PW:=_a;
PW_OP.WAL:=_b;
PW_OP.ODD:=_c;
PW_OP.AN:=_d;
PW_OP.SYM:=_e;
PW_OP.TYT:={? _>=8 || _h || _e ?};
PW_OP.K:=_f;
PW_OP.DP:=_g;
PW_OP.SYM_ZEW:={? var_pres('sym_zew')>0 || sym_zew || '' ?};
{? var_press('_i')>0
|| PW_OP.SP_V:=_i
?};
PW_OP.add()


\rozpozw2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Pomocnicza do \rozpozwb
::  OLD: \rozpozw2/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
PB.index('KH_O');
PB.prefix(SLO.ref(),KH.ref(),PW.ODD);
PB_OP.index('PB');
{? PB.first()
|| {! |?
      {? STR.gsub(PB.TYT,' ','')=STR.gsub(PW.TYTOP,' ','') & PW.KW=PB.KW
      || PB_OP.prefix(PB.ref());
         {? PB_OP.first()
         || PW.WSK_R:='T';
            {! |?
               PW_OP.prefix();
               PW_OP.blank();
               PW_OP.PW:=PW.ref();
               PW_OP.WAL:=PB_OP.WAL;
               PW_OP.ODD:=PB_OP.ODD;
               PW_OP.AN:=PB_OP.AN;
               PW_OP.SYM:=PB_OP.SYM;
               PW_OP.SYM_ZEW:=PB_OP.SYM_ZEW;
               PW_OP.K:=PB_OP.K;
               PW_OP.DP:=PB_OP.DP;
               PW_OP.TYT:=PB_OP.TYT;
               PW_OP.add();
               PB_OP.next()
            !}
         ?}; _ret:=0
      || PB.next()
      ?}
   !}
?};
_ret


\bepbslb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Przed redakcja pol zlaczeniowych do TYPYTRAN w PB lub zmiennej ROZNE
::       - wlasciwie prefiksuje slownik oraz zezwala lub nie na redakcje
::   WE: _a: kod rodzaju slownika
::  OLD: \bepbslb/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
{? cur_tab()=PB
|| _vbank:=PB.NBD
|? cur_tab()=WYDRUKIN
|| _vbank:=RB.getrbank(3,RACHBANK.KB_1R)
|| _vbank:=null
?};
{? _vbank
|| TYPYTRAN.index('KOD'); TYPYTRAN.prefix(_a,_vbank);
   {? TYPYTRAN.first()
   || ROZNE.RODZSL:=_a;
      ROZRACH.BANK:=ROZNE.BBANK:=_vbank;
      TYPYTRAN.win_dict('WER2');
      TYPYTRAN.win_sel('WER2');
      TYPYTRAN.actions('WER2','B');
      exec('cr_tt_rs','homebank','FE');
      {? TT_SELRS.find_key(_a)
      || B.clear();
         {? B.seek(_vbank)
         || TYPYTRAN.hdr_sel();
            TYPYTRAN.hdr_sel(B.NB+' - '+TT_SELRS.ORODZSL)
         ?}
      ?};
      VAR_DEL.delete('TT_SELRS');
      _ret:=1
   ?}
?};
_ret


\rb_pbgen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.40]
:: OPIS: Rekord przed w oknie tabeli OPTMP (wyroznia przelewy
::       elektroniczne, ktore beda generowane).
::       Kolorowanie przelewow dla ktorych istnieje pierwotny rozarachunek
::       w innej walucie niż narodowa
::  OLD: \rb_pbgen/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
{? OPTMP.ZNACZ='T' || 'OPTMP#03#01' || '' ?}


\br_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.40]
:: OPIS: Rekord przed dla tabeli PB - wyroznia przelew zatwierdzony. (FIKS, HOMEBANK)
::  OLD: \rb_pb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? 6+PB.win_sel('?')='PB_GRP'
|| _grayed:='';
   {? (PB.USTYPPL<>'' & PB.RODZ='KU') | PB.RODZ='KZ'
   || _grayed+='H'
   || PB_OP.index('PB');
      PB_OP.prefix(PB.ref());
      {? ~PB_OP.first() || _grayed+='H' ?}
   ?};
   {? PB.sel_size()>0 || _default:='T'
   |? PB.ZT='T' || _grayed+='PUF(C)I'; _default:='Y'
   |? PB.ZT='N' || _grayed+='Y'; _default:='I'
   ?};
   {? PB.sel_size()=0 & PB.WSK_S<>'T' || _grayed+='J' ?};
   {? PB.sel_size()=0 & PB.WSK_S='T' || _grayed+='G' ?};
   {? PB.sel_size()=0 & PB.ZT='N' || _grayed+='G' ?};
   {? PAR_SKID.get(68)='T' || _win:='PB_WER1W' || _win:='PB_WER1' ?};
   PB.actions_grayed(_win,_grayed);
   PB.actions(_win,'',_default,1)
?};
exec('set_split_field','homebank','PB_EDI1');
RACHBANK.KB_5R_BD:='RACHBANK.KB_5R:=RB.get_rbtx(2,PB.RD,PB.NBD().KODISO().KODISO)';
RACHBANK.KB_4R_BD:='RACHBANK.KB_4R:=RB.get_rbtx(2,PB.RW,PB.NBW().KODISO().KODISO)';
{? PB.ZT='T' || 'PB#01#01' || '' ?}


\cut_xml_node
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Prymitywna funkcja wycinajaca zawartosc wskazanego wezla xml z podanego bufora
::   WE: _a = bufor tekstowy, _b=wezel start, _c=wezel stop, _d- jesli jest to nie szukac dalej niz wskazany tag
::   WY: 2 elementowa tablica, [1] - zawartosc wezla lub pusty string, [2] - reszta bufora
::  OLD: \cut_xml_node/bconnect.fml
::----------------------------------------------------------------------------------------------------------------------
_dalej:=1;
_wynik:='';
_tmp:=obj_new(2);
{? _<3 | form(_a)='' | form(_b)='' || _dalej=0 ?};
{? _dalej
|| {? _>=4 || _halt:=_a*_d || _halt:=+_a?};
   {? _halt=0 || _halt:=+_a?};
   _start:=_a*_b;
   {? _start<_halt
   || _start:=exec('xml_tag_end','hbn',_a,_start);
      _stop:=_a*_c;
      _len:=_stop-_start;
      {? _len>0 || _wynik:=exec('mid','#string',_a,_start,_len) ?}
   ?}
?};
{? _wynik<>''
|| _stop:=exec('xml_tag_end','hbn',_a,_stop);
   _a:=(_stop-1)-_a
?};
:: zwrot wyniku w tablicy, 1 - wyciety tekst, 2 - to co pozostalo z bufora
_tmp[1]:=_wynik;
_tmp[2]:=_a;
_tmp


\get_xml_node
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Prymitywna funkcja zwracajaca zawartosc wskazanego wezla xml z podanego bufora
::   WE: _a = bufor tekstowy, _b=wezel start, _c=wezel stop
::   WY: zawartosc wezla lub pusty string
::  OLD: \get_xml_node/bconnect.fml
::----------------------------------------------------------------------------------------------------------------------
_dalej:=1;
_wynik:='';
{? _<3 | form(_a)='' | form(_b)='' || _dalej=0 ?};
{? _dalej
|| _start:=_a*_b;
   _start:=exec('xml_tag_end','hbn',_a,_start);
   _stop:=_a*_c;
   _len:=_stop-_start;
   {? _len>0 || _wynik:=exec('mid','#string',_a,_start,_len) ?}
?};
_wynik


\xml_tag_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Zwraca pozycje zakonczenia tagu (znak '>')
::   WE: _a = bufor tekstowy, _b - pozycja startowa
::  OLD: \xml_tag_end/bconnect.fml
::----------------------------------------------------------------------------------------------------------------------
_next:=1;
{! |?
   _char:=exec('mid','#string',_a,_b,1);
   {? _char='>'
   || _b+=1;
      _next:=0
   || _b+=1;
      {? _b>+_a || _next:=0 ?}
   ?};
   _next
!};
_b


\set_pwn_buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.22]
:: OPIS: Ustawia bufor tabeli PWN podczas importu wyciągu
::   WE: _a - nr rachunku licencjobiorcy, _b- wskazanie na oddział banku, _c - wskazanie na jednostkę księgową,
::       _d - numer wyciągu, _e - wskazanie na plik wyciągu
::----------------------------------------------------------------------------------------------------------------------
PWN.index('PWN');
PWN.prefix(_b,_a,_d);
{? ~PWN.first()
|| PWN.blank();
   PWN.BL:=_b;
   PWN.NRW:=_d;
   PWN.ODD:=_c;
   PWN.PLIK:=_e;
   PWN.RBL:=_a;
   PWN.STATUS:='N';
   PWN.add()
?};
PWN.ref()


\get_pb_by_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Sprawdza, czy przelew o podanym identyfikatorze może być zmodyfikowany/utworzony.
::   WE: _a [STRING] - identyfikator przelewu
::       _b [ARRAY] - wskazanie na tablicę nazw tabeli PB (może być pominięty)
::   WY: wskazanie na tablicę nazwaną o strukturze;
::       ACTION [STRING] - tekst określający tryb generowania przelewu
::          'add' - przelew może być utworzony
::          'put' - przelew należy zaktualizować
::          'none' - przelew nie może być utworzony ani zaktualizowany
::       REF [_PB] - wskazanie znalezionego przelewu (null dla ACTION='add')
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('ACTION','REF','ALL');
_ret.ACTION:='';
_ret.REF:=null;
_ret.ALL:=~~;

_kid:=_a;
_defm:='pbxxxx';

_epilog:="
   PB.cntx_pop();
   ~~
";

PB.cntx_psh();
: w pierwszej kolejności sprawdź zbiór roboczy
: w nim może znajdować się już wygenerowany przelew
PB.use(_defm);
PB.index('PBKO');
PB.prefix(_kid,_kid);
{? PB.first()
:  przelew istnieje
|| _ret.ALL:=obj_new(PB.size());
   _cnt:=1;
   {!
   |? _ret.ALL[_cnt]:=PB.ref();
:     ustal dostępność aktualizacji
      {? _ret.ACTION='' & ~(PB.PR<>'N' | PB.ZT<>'N')
      || _ret.ACTION:='put';
         _ret.REF:=PB.ref()
      ?};
      _cnt+=1;
      PB.next()
   !};
   {? _ret.ACTION=''
:     pozwól na modyfikację przelewu, jeśli ustawiony jest parametr
   || _ret.ACTION:={? PAR_SKID.get(262)<>'T' || 'none' || 'put' ?};
      _ret.REF:=PB.ref()
   ?};
   _epilog();
   return(_ret)
?};

: jeśli umożliwiono powtórne generowanie przelewów,
: to sprawdzanie archiwum jest zbędną operacją
{? PAR_SKID.get(262)='T'
|| _ret.ACTION:='add';
   _epilog();
   return(_ret)
?};

: brak przelewu w zbiorze roboczym, przeglądaj archiwa
: (w iteracjach zaleca się dostarczenie tablicy nazw)
_mask:=
   {? var_pres('_b')<100
   || exec('tab_names','#table',PB)
   || _b
   ?};
_len:=obj_len(_mask);

: przeglądaj archiwa
{! _ni:=1.._len
|? _ret.ACTION<>'none'
|! _mdb:=_mask[_ni];
   {? _mdb<>_defm
   || PB.use(_mdb);
      PB.index('PBKO');
      PB.prefix(_kid,_kid);
      {? PB.first()
:        znaleziono przelew
      || _cnt:=1;
         {? type_of(_ret.ALL)>100
         || _cnt:=obj_len(_ret.ALL);
            _all:=obj_new(_cnt+PB.size());
            {! _ni:=1.._cnt
            |! _all[_ni]:=_ret.ALL[_ni]
            !};
            obj_del(_ret.ALL);
            _ret.ALL:=_all
         || _ret.ALL:=obj_new(PB.size())
         ?};
         {!
         |? _ret.ALL[_cnt]:=PB.ref();
            _cnt+=1;
            PB.next()
         !};
         {? _ret.ACTION='' & (PB.PR='T' | {? PB.ZT='T' || PB.PR<>'A' ?})
:           aktualizacja niemożliwa
         || _ret.ACTION:='none';
            _ret.REF:=PB.ref()
         ?}
      ?}
   ?}
!};
{? _ret.ACTION=''
|| _ret.ACTION:='add'
?};

_epilog();
_ret


\cant_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Wyświetla komunikat o tym, że przelew nie może być utworzony/zmodyfikowany.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
FUN.emsg(
   'Przelewu nie można utworzyć/zaktualizować.\n'
   'Istnieje już zatwierdzony/przekazany przelew.'@
);
~~


\spr_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMA [8.70]
:: OPIS: Rekord po. Sprawdzenie poprawności danych dołączonych do tabeli B
::  OLD: \spr_b/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
_r:='';
_r:=__CHK.record(B,,'NB','NUMER','KODISO');
{? _r='' & (+(|B.K))<>0 & B.K<>'  -' & ~exec('chkForm','#string',B.K,'%c%c-%c%c%c',0)
|| FUN.emsg('Wartość pola \'Kod pocztowy\' niezgodna z formatem 00-000.');
   _r:='K'
?};
{? _r='' & var_press('CurRec')>0
|| _kod:=B.KOD;
   {? _kod<>''
   || B.cntx_psh(); B.clear();
      {? B.first()
      || {! |?
            {? CurRec<>B.ref() & _kod=B.KOD
            || FUN.emsg('Oddział banku o kodzie '+form(B.KOD)+' już występuje w słowniku.');
               _r:='KOD'; 0
            || B.next()
            ?}
         !}
      ?};
      B.cntx_pop();
      {? form(_r)='KOD' || B.KOD:='' ?}
   ?}
?};
_r


\chk_fvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [12.51]
:: OPIS: Formuła do sprawdzenia podczas dołączania przelewu bankowego, czy rozrachunek dotyczy faktury VAT.
::   WE: _a - tabela PB lub OPTMP
::   WY: 1 / 0
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
SLO.cntx_psh(); POZ.cntx_psh(); DOK.cntx_psh(); DOK_REJ.cntx_psh(); ZAP_OP.cntx_psh();
ZAP_OP.use('rozzap'+(OP.name()+2));
ZAP_OP.index('OP');
ZAP_OP.prefix(OP.ref());
{? ZAP_OP.first()
|| {!
   |? {? ZAP_OP.MA<>0 & ZAP_OP.POZDOK<>null
      || POZ.use(form(($ZAP_OP.POZDOK)-8));
         POZ.prefix();
         {? POZ.seek(ZAP_OP.POZDOK)
         || _maska:=POZ.name()+4;
            DOK.use('doku'+_maska);
            _typ:=POZ.DOK().DOK_REJ().SLO().KOD;
            {? (_typ='VAT' | _typ='SAD')
            || _result:=1;
               {? var_pres('_a')>0
               || _brutto:=0;
                  VPOZ.cntx_psh();
                  VPOZ.use('pozv'+_maska);
                  VPOZ.index('VDOK'); VPOZ.prefix(DOK.ref());
                  {? VPOZ.first()
                  || {!
                     |? _brutto+=VPOZ.BRUTTO;
                        VPOZ.next()
                     !}
                  ?};
                  VPOZ.cntx_pop();
                  _a.BRUTTO:=_brutto
               ?}
            ?}
         ?}
       ?};
       ~_result & ZAP_OP.next()
   !}
?};
SLO.cntx_pop(); POZ.cntx_pop(); DOK.cntx_pop(); DOK_REJ.cntx_pop(); ZAP_OP.cntx_pop();
_result


\rb_optmp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SG [23.25]
:: OPIS: Formuła na rekord przed tabeli OPTMP
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('przel_edit','rozrach_przel',0);
{? _result
|| {? PB.ZT='T'
   || OPTMP.actions_grayed(cur_win(),'I:')
   || OPTMP.actions_grayed(cur_win(),'A:')
   ?}
?}


:Sign Version 2.0 jowisz:1045 2023/11/29 14:21:33 550da6c13820bc919b7c271cd7ad9c822ece10aa6473165b830054b2947b6dc74f940cda9b7e3a1a35dfa5cddd24e72ceb27c87c6635b066eb56caed4497760527786c7143298a15166349535a8c43b0b336a12c0fe97864850eece0ba9759b36ce595adfdb75d186af7941f0aabcd746541f3f9b8a68b0f31f03f203d54b645
