:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: fiksobi.fml
:: Utworzony: ??.??.????
:: Autor: -
::======================================================================================================================
:: Zawartosc: Procedura do obslugi obiektu F
::======================================================================================================================

::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Opis funkcji klasy FUNKCJE (obiekt F)
::----------------------------------------------------------------------------------------------------------------------

::Funkcje dostępne w obiekcie:
::
::set_odd(ref_jednostki_ksiegowej) - od momentu wywołania tej funkcji do wywołania
::resetodd() wszystkie funkcje będą zwracać wyniki dla wybranej jednostki księgowej
::lub dla wszystkich jednostek księgowych, jeśli paraemtrem set_odd było zero
::
::resetodd() - działanie funkcji wyliczających wartoŚci z kont jest od tej pory
::takie jak wczśniej - zależne od aktualnej jednostki księgowej operatora
::
::Km( maska [, m1, m2] )
::działanie:
::   Zwraca obroty strony Ma kont odpowiadających masce w okresach od m1 do m2
::   włączne, bieżącego roku bilansowego. Domyślną wartością m1 i m2 jest
::   okres ustawiony w parametrach pracy.
::argumenty:
::   maska - string, maska konta odpowiadająca oznaczeniu konta, dowolny znak
::           w symbolu konta może być zastąpiony znakiem zapytania.
::   m1 - number, numer okresu poczatkowego, w ramach wybranego roku bilansowego
::   m2 - number, numer okresu końcowego, w ramach wybranego roku bilansowego
::typ wyniku:
::   number
::
::Kw( maska [, m1, m2] )
::działanie:
::   Zwraca obroty strony Wn kont odpowiadających masce w okresach od m1 do m2
::   włączne, bieżącego roku bilansowego. Domyślną wartością m1 i m2 jest
::   okres ustawiony w parametrach pracy.
::argumenty:
::   maska - string, maska konta odpowiadająca oznaczeniu konta, dowolny znak
::           w symbolu konta może być zastąpiony znakiem zapytania.
::   m1 - number, numer okresu poczatkowego, w ramach wybranego roku bilansowego
::   m2 - number, numer okresu końcowego, w ramach wybranego roku bilansowego
::typ wyniku:
::   number
::
::Ma( [m1, m2] )
::działanie:
::   Zwraca obroty strony Ma bieżącego konta, w okresach od m1 do m2 włączne,
::   bieżącego roku bilansowego. Domyślną wartością m1 i m2 jest okres
::   ustawiony w parametrach pracy.
::argumenty:
::   m1 - number, numer okresu poczatkowego, w ramach wybranego roku bilansowego
::   m2 - number, numer okresu końcowego, w ramach wybranego roku bilansowego
::typ wyniku:
::   number
::
::Wn( [m1, m2] )
::działanie:
::   Zwraca obroty strony Ma bieżącego konta, w okresach od m1 do m2 włączne,
::   bieżącego roku bilansowego.
::   Domyślną wartością m1 i m2 jest okres
::   ustawiony w parametrach pracy.
::argumenty:
::   m1 - number, numer okresu poczatkowego, w ramach wybranego roku bilansowego
::   m2 - number, numer okresu końcowego, w ramach wybranego roku bilansowego
::typ wyniku:
::   number
::
::Obr( maska , m1,  m2)
::działanie:
::   Nalicza obroty po stronie wn i ma dla kont odpowiadajacych masce
::   w okresach od m1 do m2 włączne i zapamiętuje je w odpowiednio
::   w polach .wn i .ma.
::argumenty:
::   maska - string, maska konta odpowiadająca oznaczeniu konta, dowolny znak
::           w symbolu konta może być zastąpiony znakiem zapytania.
::   m1 - number, numer okresu poczatkowego, w ramach wybranego roku bilansowego
::   m2 - number, numer okresu końcowego, w ramach wybranego roku bilansowego
::typ wyniku: ~~
::
::
::Obr1( m1,  m2)
::działanie:
::   Nalicza obroty po stronie wn i ma dla konta w buforze tabeli AN
::   w okresach od m1 do m2 włączne i zapamiętuje je w odpowiednio
::   w polach .wn i .ma.
::argumenty:
::   maska - string, maska konta odpowiadająca oznaczeniu konta, dowolny znak
::           w symbolu konta może być zastąpiony znakiem zapytania.
::   m1 - number, numer okresu poczatkowego, w ramach wybranego roku bilansowego
::   m2 - number, numer okresu końcowego, w ramach wybranego roku bilansowego
::typ wyniku: ~~
::
::
::Saldo(m)
::działanie:
::   Nalicza obroty po stronie wn i ma dla konta w buforze tabeli AN
::   w okresach od Bilansu Otwarcia do m włączne i zapamiętuje je w odpowiednio
::   w polach .wn i .ma.
::argumenty:
::   m - number, numer okresu końcowego, w ramach wybranego roku bilansowego
::typ wyniku: ~~
::
::
::Pm( [m] )
::działanie:
::   Zwraca saldo Ma obrotów z okresów od 0 do m bieżącego konta. Domyślną
::   wartością m jest okres ustawiony w parametrach pracy.
::argumenty:
::   m - number, numer okresu, w ramach wybranego roku bilansowego
::typ wyniku:
::   number
::
::Pw( [m] )
::działanie:
::   Zwraca Saldo Wa obrotów z okresów od 0 do m bieżącego konta. Domyślną
::   wartością m jest okres ustawiony w parametrach pracy.
::argumenty:
::   m - number, numer okresu, w ramach wybranego roku bilansowego
::typ wyniku:
::   number
::
::SMa( w, m )
::działanie:
::   Zwraca saldo Ma dwóch liczb, a więc wynik następującej funkcji:
::   jeśli wartość bezwzględna w jest jest mniejsza od wartości bezwzględnej m,
::   zwróć różnicę m i w. W przeciwnym wypadku zwróć 0.
::argumenty:
::   w, n - number
::typ wyniku:
::   number
::
::SWn( w, m )
::działanie:
::   Zwraca saldo Wn dwóch liczb, a więc wynik następującej funkcji:
::   jeśli wartość bezwzględna m jest jest mniejsza od wartości bezwzględnej w,
::   zwróć różnicę w i m. W przeciwnym wypadku zwróć 0.
::argumenty:
::   w, n - number
::typ wyniku:
::   number
::
::DObr( konto,d1,d2,[typ_dat] )
::działanie:
::   Nalicza obroty po stronie wn i ma dla kont odpowiadajacych masce
::   w podanym zakresie dat i zapamiętuje je w odpowiednio w polach
::   .dwn i .dma. Obie daty muszą należeć do aktywnego roku obrotowego.
::argumenty:
::   konto - string, maska konta
::   d1, d2 - date, data początkowa i końcowa zakresu naliczania
::   [typ_dat] - 1 (domyslne) data zapisu DTW, 0 - operacji DOP
::   typ wyniku: ~~
::
::
::DWObr()
::działanie:
::   Zwraca zawartość pola .dwn
::argumenty: brak
::typ wyniku: number
::
::DMObr()
::działanie:
::   Zwraca zawartość pola .dma
::argumenty: brak
::typ wyniku: number
::
::====== od wersji 7.10 (autor: J.Socha)
::Pw2( [konto, m] )
::działanie:
::   Zwraca saldo "rozwarte" Wa kont o masce konto z okresów od 0 do m bieżącego konta.
::   Saldo to liczone jest jako suma sald Wn kont analitycznych o masce konto.
::   Domyślną wartością m jest okres ustawiony w parametrach pracy.
::argumenty:
::   konto - string, maska konta odpowiadająca oznaczeniu konta,
::           dowolny znak w symbolu konta może być zastąpiony znakiem zapytania.
::   m - number, numer okresu, w ramach wybranego roku bilansowego.
::typ wyniku:
::   number
::
::Pm2( [konto, m] )
::działanie:
::   Zwraca saldo "rozwarte" Ma kont o masce konto z okresów od 0 do m bieżącego konta.
::   Saldo to liczone jest jako suma sald Ma kont analitycznych o masce konto.
::   Domyślną  wartością m jest okres ustawiony w parametrach pracy.
::argumenty:
::   konto - string, maska konta odpowiadająca oznaczeniu konta,
::           dowolny znak w symbolu konta może być zastąpiony znakiem zapytania.
::   m - number, numer okresu, w ramach wybranego roku bilansowego
::typ wyniku:
::   number
::
::DOrej(konto,m1,m2,rej)
::działanie:
::   Nalicza obroty wn i obroty ma w rejestrze [rej] dla konta [konto]
::   od okresu [m1] do okresu m2.
::   Wynik zapamiętuje odpowiednio w polach .dwn i .dma.
::   Okresy m1 i m2 muszą należeć do aktywnego roku obrotowego.
::argumenty:
::   konto - string, maska konta
::   m1, m2 - integer, miesiŃc początkowy i końcowy zakresu naliczania
::   rej  - string, symbol rejestru ksi©gowego.
::   typ wyniku: ~~
::
::====== od wersji [8.60] (UTW: MM)
::DDOrej(konto,d1,d2,rej,[typ_dat])
::dzialanie:
::   Nalicza obroty wn i obroty ma w rejestrze [rej] dla konta [konto]
::   w podanym zakresie dat.
::   Wynik zapamietuje odpowiednio w polach .dwn i .dma.
::   Obie daty musza nalezec do aktywnego roku obrotowego.
::argumenty:
::   konto - string, maska konta
::   d1, d2 - date, data poczatkowa i koncowa zakresu naliczania
::   rej  - string, symbol rejestru ksiegowego.
::   [typ_dat] - 1 (domyslne) data zapisu DTW, 0 - operacji DOP
::   typ wyniku: ~~
::
::====== od wersji 7.20 (autor: Artur Makos),
::RWn(ref,data)
::działanie:
::  Zwraca saldo winien rozrachunku (tabela OP) na podaną datę
::argumenty:
::   ref - ref rekordu tabeli OP
::   data - data na ktorą ma być policzone saldo
::typ wyniku:
::   number
::
::RMa(ref,data)
::działanie:
::  Zwraca saldo ma rozrachunku (tabela OP) na podaną datę
::argumenty:
::   ref - ref rekordu tabeli OP
::   data - data na ktorą ma byc policzone saldo
::typ wyniku:
::   number
::
::ROw(ref,data)
::działanie:
::  Zwraca obroty winien rozrachunku (tabela OP) na podaną datę
::argumenty:
::   ref - ref rekordu tabeli OP
::   data - data na ktorą mają byc policzone obroty
::typ wyniku:
::   number
::
::ROm(ref,data)
::działanie:
::  Zwraca obroty ma rozrachunku (tabela OP) na podaną datę
::argumenty:
::   ref - ref rekordu tabeli OP
::   data - data na ktorą mają byc policzone obroty
::typ wyniku:
::   number
::
::RObr( ref,data,[projekt] )
::działanie:
::   Nalicza obroty po stronie wn i ma dla wskazanego rozrachunku (i projektu gdy podany _SLO)
::   (tabela OP) na podaną datę i zapamiętuje je w odpowiednio
::   w polach .rwn i .rma.
::argumenty:
::   ref - ref rekordu tabeli OP
::   data - data na ktorą mają byc policzone obroty
::   [projekt] - pozycja slownika projektow
::   typ wyniku: ~~
::
::RObr2(ref,data,typ)
::działanie:
::   Nalicza obroty po stronie wn i ma dla wskazanego rozrachunku
::   (tabela OP) na podaną datę i zapamiętuje je odpowiednio
::   w polach .rwn i .rma oraz dla drugiej waluty w polach .rwwn i .rwma
::   a takze nalicza obroty wn i ma dla zapisow oznaczonych typem
::   przekazanym jako argument
::argumenty:
::   ref - ref rekordu tabeli OP
::   data - data na ktorą mają byc policzone obroty
::   typ - typ zapisu
::   typ wyniku: ~~
::
::RObr3(ref,okro_f,okro_f)
::działanie:
::   Nalicza obroty po stronie wn i ma dla wskazanego rozrachunku (tabela OP)
::   w podanym okresie obrachunkowym i zapamiętuje je odpowiednio w polach .rwn i .rma.
::argumenty:
::   ref - ref rekordu tabeli OP
::   okro_f - nr okresu obrachunkowego od
::   okro_f - nr okresu obrachunkowego do
::   typ wyniku: ~~
::
::RObr4(ref,kod roku,data1,data2)
::działanie:
::   Nalicza obroty po stronie wn i ma dla wskazanego rozrachunku (tabela OP)
::   w podanym roku bilansowym w zakresie dat i zapamiętuje je odpowiednio w polach .rwn, .rma,
::   oraz obroty narastająco do daty2 (zapamiętanie w polach .rtwn i .rtma).
::argumenty:
::   ref - ref rekordu tabeli OP
::   kod - ROK_F.KOD
::   data - data od
::   data - data do
::   typ wyniku: ~~
::
::RObr5(ref,data,typ)
::działanie:
::   Nalicza obroty po stronie wn i ma dla wskazanego rozrachunku
::   (tabela OP) na podaną datę i zapamiętuje je odpowiednio
::   w polach .rwn i .rma oraz dla drugiej waluty w polach .rwwn i .rwma
::   a takze nalicza obroty wn i ma dla zapisow oznaczonych typem
::   przekazanym jako argument
::argumenty:
::   ref - ref rekordu tabeli OP
::   data - data na ktorą mają byc policzone obroty
::   typ - typ zapisu
::   typ wyniku: ~~
::
::========== od wersji 7.20 (autor: Renata Łukasik) =======================
::        (opis dotyczy funkcji wirtualnych określonych w formule \fun_virt)
::
::WK( strona, maska [, m1, m2 , słownik wyróżnika , kod wyróżnika] )
::działanie:
::   Zwraca obroty strony podanej w parametrze 'strona' kont odpowiadających
::   'masce' w okresach od 'm1' do 'm2' włączne, bieżącego roku bilansowego.
::   Uwzględniane obroty są sumą wartości odpowiednich pozycji dokumentów
::   źródłowych oznaczonych 'słownikiem' lub 'słownikiem' i 'kodem wyróżnika'.
::   Jeśli liczba podanych argumentów nie przekracza czterech - wywoływane
::   są odpowiednio metody Kw lub Km (w zależności od parametru 'strona').
::argumenty:
::   strona - string, oznaczenie strony kont: 'Wn' lub 'Ma'
::   maska - string, maska konta odpowiadająca oznaczeniu konta, dowolny znak
::           w symbolu konta może być zastąpiony znakiem zapytania.
::   m1 - number, numer okresu poczatkowego, w ramach wybranego roku bilansowego
::   m2 - number, numer okresu końcowego, w ramach wybranego roku bilansowego
::   słownik wyróżnika - ref tabeli SLUAPPL, wskazanie na słownik użytkownika,
::                       który zawiera wyróżniki klasyfikacyjne.
::   kod wyróżnika - string, kod lub prefiks kodów wyróżników klasyfikacyjnych
::                   zawartych w słowniku wskazanym parametrem 'słownik wyróżnika'
::typ wyniku:
::   number
::
::WP2( strona [,konto, m, słownik wyróżnika, kod wyróżnika] )
::działanie:
::   Zwraca saldo "rozwarte" strony podanej w parametrze 'strona' kont
::   o masce 'konto' z okresów od 0 do 'm' roku bilansowego.
::   Saldo to liczone jest jako suma sald 'strony' kont analitycznych
::   o masce konto. Kwoty uwzględniane w saldach pochodzą z wartości
::   odpowiednich pozycji dokumentów źródłowych oznaczonych 'słownikiem' lub
::   'słownikiem' i 'kodem wyróżnika'.
::   Jeśli liczba podanych argumentów nie przekracza trzech - wywoływane
::   są odpowiednio metody Pw2 lub Pm2 (w zależności od parametru 'strona').
::
::argumenty:
::   strona - string, oznaczenie strony kont: 'Wn' lub 'Ma'
::   konto - string, maska konta odpowiadająca oznaczeniu konta,
::           dowolny znak w symbolu konta może być zastąpiony znakiem zapytania.
::   m - number, numer okresu, w ramach wybranego roku bilansowego.
::   słownik wyróżnika - ref tabeli SLUAPPL, wskazanie na słownik użytkownika,
::                       który zawiera wyróżniki klasyfikacyjne.
::   kod wyróżnika - string, kod lub prefiks kodów wyróżników klasyfikacyjnych
::                   zawartych w słowniku wskazanym parametrem 'słownik wyróżnika'
::typ wyniku:
::   number
::
::WDOrej(konto ,m1 ,m2 ,rej [,słownik wyróżnika, kod wyróżnika])
::działanie:
::   Nalicza obroty Wn i obroty Ma w rejestrze 'rej' dla konta 'konto'
::   od okresu 'm1' do okresu 'm2' z wartości pozycji dokumentów źródłowych
::   oznaczonych 'słownikiem wyróżnika' lub 'słownikiem' i 'kodem wyróżnika'.
::   Wynik zapamiętuje odpowiednio w polach .dwn i .dma.
::   Okresy m1 i m2 muszą należeć do aktywnego roku obrotowego.
::   Jeśli liczba podanych argumentów nie przekracza trzech - wywoływana
::   jest metoda DOrej.
::argumenty:
::   konto - string, maska konta
::   m1 - number, numer okresu poczatkowego, w ramach wybranego roku bilansowego
::   m2 - number, numer okresu końcowego, w ramach wybranego roku bilansowego
::   rej  - string, symbol rejestru księgowego.
::   słownik wyróżnika - ref tabeli SLUAPPL, wskazanie na słownik użytkownika,
::                       który zawiera wyróżniki klasyfikacyjne.
::   kod wyróżnika - string, kod lub prefiks kodów wyróżników klasyfikacyjnych
::                   zawartych w słowniku wskazanym parametrem 'słownik wyróżnika'
::typ wyniku: ~~
::
::==========
::PObr(konto , [ waluta , [ identyfikator]])
::działanie:
::   Nalicza obroty Wn i obroty Ma dla kont (prefiksu kont) w aktualnym dokumencie
::   opcjonalnie uwzgledniajac walute w pozycji i identyfikator rozrachunku
::   Wynik zapamiętuje odpowiednio w polach .wn i .ma.
::argumenty:
::   konto - string, symbol konta (prefix)
::   waluta - ref tabeli SLO, waluta obca , domyslnie null (dla waluty narodowej)
::   identyfikator - string, symbol rozrachunku
::typ wyniku: ~~
::
::spr_mask(wzorzec,parametr)
::dzialanie:
::   Sprawdza, czy parametr zawiera sie we wzorcu. Sprawdzane sa po kolei
::   wszystkie znaki z argumentu inne niz znak '?'
::argumenty:
::   parametr - string, najczesciej konto do sprawdzenia, moze zawierac znaki '?'
::   wzorzec - string. wzorzec do porownania z parametrem
::typ wyniku: 1 - argument zgodny z wzorcem
::            0 - niezgodny
::
::sprmsk(wzorzec,parametr,separator)
::dzialanie:
::   Sprawdza, czy parametr zawiera sie we wzorcu. Sprawdzane sa po kolei
::   wszystkie znaki z argumentu inne niz znak '?'
::   Metoda analogiczna do spr_mask ale w algorytmie brak odwolan przez podczytanie do tabel
::argumenty:
::   parametr - string, najczesciej konto do sprawdzenia, moze zawierac znaki '?'
::   wzorzec - string. wzorzec do porownania z parametrem
::   separator - separator analityk
::typ wyniku: 1 - argument zgodny z wzorcem
::            0 - niezgodny
::
::
::WObr(konto, okres1, okres2, slownik, pozycja)
::dzialanie:
::   Nalicza obroty wyroznikow dla konta (lub maski konta) dla okresow o numerach
::   od okres1 do okres2 w slowniku i dla pozycji w slowniku
::   i zapamietuje je w polach .wn i .ma
::argumenty:
::   konto - analizowane konto analityczne (moze byc maska)
::   okres1, okres2 - numery okresow - przedzial analizy
::   slownik - ref tabeli SLUAPPL
::   pozycja - kod pozycji w slowniku, jesli pusty to wszystkie pozycje
::typ wyniku: .wn, .ma - zapamietane wartosci w tych polach
::
::----------------------------------------------------------------------------


\funkcje
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Deklaracja klasy FUNKCJEF
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('FUNKCJEF',@.CLASS)>0
|| return
?};
obj_decl( 'FUNKCJEF',
obj_virt('WK',""),
obj_virt('WObr',""),
obj_virt('WObr0',""),
obj_virt('sum',""),
obj_virt('WP2',""),
obj_virt('WSaldo2',""),
obj_virt('WSaldo0',""),
obj_virt('WDOrej',""),
obj_virt('Wzapisy',""),
obj_virt('Wzapisy0',""),
obj_virt('ile_kod',""),
obj_virt('PObr',""),

obj_meth('Km',"
{? _<1 | _>3 | type_of(_a)<>2 |
   _>1 & _b<>~~& type_of(_b)<>1 |
   _>2 & _c<>~~& type_of(_c)<>1 ||
   msg('\n'+.InfKw+'\n'+.InfArgK+'\n');
   0
|| {? _< 3 | _b=~~ | _c=~~
   || OKRO_F.cntx_psh;
      OKRO_F.prefix;
      _ao:=SSTALE.AO().NR;
      OKRO_F.cntx_pop;
      {? _<3 | _c=~~ || _c:=_ao ?};
      {? _=1 | _b=~~ || _b:=_ao ?}
   ?};
   .Obr(_a,_b,_c);
   .ma
?}
"),

obj_meth('Kw',"
{? _<1 | _>3 | type_of(_a)<>2 |
   _>1 & _b<>~~& type_of(_b)<>1 |
   _>2 & _c<>~~& type_of(_c)<>1 ||
   msg('\n'+.InfKw+'\n'+.InfArgK+'\n');
   0
|| {? _< 3 | _b=~~ | _c=~~
   || OKRO_F.cntx_psh;
      OKRO_F.prefix;
      _ao:=SSTALE.AO().NR;
      OKRO_F.cntx_pop;
      {? _<3 | _c=~~ || _c:=_ao ?};
      {? _=1 | _b=~~ || _b:=_ao ?}
   ?};
   .Obr(_a,_b,_c);
   .wn
?}
"),

obj_meth('Obr',"
_sep:=SSTALE.AR().SEP;
_wal:={? var_pres('wal_obr')>0 || wal_obr || SSTALE.WAL ?};
{! |? _a+1='?' | _a+1=_sep & _sep<>',' & .PAR14_T |! _a:=_a-1 !};
{? .DOM_ODD || .ODDZIAL:=OPERATOR.DEPT; .ODD:=$.ODDZIAL ?};
.wn:=.ma:=0;
{? var_pres('TT_AGR')>0
|| SLO.cntx_psh(); SLO.prefix;
   {? SLO.seek(_wal) || _wal:=SLO.KOD || FUN.info('Błędny kod waluty'@); _wal:='' ?};
   SLO.cntx_pop();
   TT_AGR.prefix(_wal,{? _l:=_a*'?' || (_l-1)+_a || _a ?});
   {? TT_AGR.first()
   || {! |?
         {? (~_l | .sprmsk((_l-1)-_a,(_l-1)-TT_AGR.SYM,_sep)) & (~.ODDZIAL | .ODD=TT_AGR.ODD) & .sprfml(TT_AGR.SYM)
         || {! _i:=_b .. _c
            |! .wn+=TT_AGR[2*_i+1]; .ma+=TT_AGR[2*_i+2]
            !}
         ?};
         TT_AGR.next()
      !}
   ?}
|| OBR.cntx_psh(); OBR.index('OKR');
   AN.cntx_psh(); AN.index('WALSYM');
   AN.prefix(_wal,{? _l:=_a*'?' || (_l-1)+_a || _a ?} );
   {? AN.first()
   || {! |?
         {?  (~_l | .sprmsk((_l-1)-_a,(_l-1)-AN.SYM,_sep)) & .sprfml(AN.SYM)
         || {! _i:=_b .. _c
            |! {? .ODDZIAL
               || OBR.prefix(_i,AN.ref,.ODDZIAL);
                  {? OBR.first() || .wn+=OBR.WN; .ma+=OBR.MA ?}
               || OBR.prefix(_i,AN.ref);
                  {? OBR.first() || {! |? .wn+=OBR.WN; .ma+=OBR.MA; OBR.next() !} ?}
               ?}
            !}
         ?};
         AN.next()
      !}
   ?};
   AN.cntx_pop(); OBR.cntx_pop()
?}
"),

obj_meth('spr_mask',"
_sep:=SSTALE.AR().SEP;
_ok:=1;
_spr_sep:={? .PAR14_T || _sep<>','|| 0 ?};
{! _i:=1 .. +_a
|? _ok
|! _c:=_i+_a+1;
   {? _c<>'?' & {? _spr_sep || _c<>_sep || 1 ?} & _c<>(1+((_i-1)-_b))
   || _ok:=0
   ?}
!};
_ok
"),

obj_meth('sprmsk',"
_ok:=1;
_sep:=_c;
_spr_sep:={? .PAR14_T || _sep<>',' || 0 ?};
{! _i:=1 .. +_a
|? _ok
|! _c:=_i+_a+1;
   {? _c<>'?' & {? _spr_sep || _c<>_sep || 1 ?} & _c<>(1+((_i-1)-_b))
   || _ok:=0
   ?}
!};
_ok
"),

obj_virt('sprfml',"1",type_of('')),

obj_meth('Ma',"
{? _>2 | _>0 & _a<>~~ & type_of(_a)<>1 |
   _>1 & _b<>~~ & type_of(_b)<>1 ||
   msg('\n'+.InfMa+'\n'+.InfArg1+'\n');
   0
|| {? _< 2 | _a=~~ | _b=~~
   || OKRO_F.cntx_psh;
      OKRO_F.prefix;
      _ao:=SSTALE.AO().NR;
      OKRO_F.cntx_pop;
     {? _<2 | _b=~~ || _b:=_ao ?};
     {? _=0 | _a=~~ || _a:=_ao ?}
   ?};
   .Obr1(_a,_b);
   .ma
?}
"),

obj_meth('Wn',"
{? _>2 | _>0 & _a<>~~ & type_of(_a)<>1 |
   _>1 & _b<>~~ & type_of(_b)<>1 ||
   msg('\n'+.InfWn+'\n'+.InfArg1+'\n');
   0
|| {? _< 2 | _a=~~ | _b=~~
   || OKRO_F.cntx_psh;
      OKRO_F.prefix;
      _ao:=SSTALE.AO().NR;
      OKRO_F.cntx_pop;
      {? _<2 | _b=~~ || _b:=_ao ?};
      {? _=0 | _a=~~ || _a:=_ao ?}
    ?};
    .Obr1(_a,_b);
    .wn
?}
"),

obj_meth('Obr1',"
.wn:=.ma:=0;
{? var_pres('TT_AGR')>0 & AN.get()
|| TT_AGR.prefix(AN.WAL().KOD,AN.SYM);
   {? TT_AGR.first()
   || {!
      |? {? ~.ODDZIAL=null() | .ODD=TT_AGR.ODD
         || {! _i:=_a .. _b
            |! .wn+=TT_AGR[2*_i+1]; .ma+=TT_AGR[2*_i+2]
            !}
         ?};
         TT_AGR.next
      !}
   ?}
|| OBR.cntx_psh;
   OBR.index('OKR');
   {? .DOM_ODD || .ODDZIAL:=OPERATOR.DEPT; .ODD:=$.ODDZIAL ?};
   {? AN.get
   || {! _i:=_a .. _b
      |! {? .ODDZIAL || OBR.prefix(_i,AN.ref,.ODDZIAL) || OBR.prefix(_i,AN.ref) ?};
         {? OBR.first() || {!|? .wn+=OBR.WN; .ma+=OBR.MA; OBR.next() !} ?}
      !}
   ?};
   OBR.cntx_pop
?}
"),

obj_meth('Pw',"
{? _>1 | _=1 & _a<>~~ & type_of(_a)<>1
|| msg('\n'+.InfPw+'\n'+.InfArgP+'\n');
   0
|| {? _< 1 | _a=~~
   || OKRO_F.cntx_psh;
      OKRO_F.prefix;
      _a:=SSTALE.AO().NR;
      OKRO_F.cntx_pop
   ?};
   .Saldo(_a);
   .SWn(.wn, .ma)
?}
"),

obj_meth('Pm',"
{? _>1 | _=1 & _a<>~~ & type_of(_a)<>1
|| msg('\n'+.InfPm+'\n'+.InfArgP+'\n');
   0
|| {? _< 1 | _a=~~
   || OKRO_F.cntx_psh;
      OKRO_F.prefix;
      _a:=SSTALE.AO().NR;
      OKRO_F.cntx_pop
   ?};
   .Saldo(_a);
   .SMa(.wn, .ma)
?}
"),

obj_meth('Saldo',"
.wn:=.ma:=0;
{? var_pres('TT_AGR')>0 & AN.get()
|| TT_AGR.prefix(AN.WAL().KOD,AN.SYM);
   {? TT_AGR.first()
   || {!
      |? {? ~.ODDZIAL | .ODD=TT_AGR.ODD
         || {! _i:= 0 .. _a
            |! .wn+=TT_AGR[2*_i+1]; .ma+=TT_AGR[2*_i+2]
            !}
         ?};
         TT_AGR.next
      !}
   ?}
|| OBR.cntx_psh;
   OBR.index('OKR');
   {? .DOM_ODD || .ODDZIAL:=OPERATOR.DEPT; .ODD:=$.ODDZIAL ?};
   {? AN.get
   || {! _i:=0 .. _a
      |! {? .ODDZIAL || OBR.prefix(_i,AN.ref,.ODDZIAL) || OBR.prefix(_i,AN.ref) ?};
         {? OBR.first()
         || {! |? .wn+=OBR.WN; .ma+=OBR.MA; OBR.next() !}
         ?}
      !}
   ?};
   OBR.cntx_pop
?}
"),


obj_meth('SWn',"
{? _<>2 | type_of(_a)<>1 | type_of(_b)<>1
|| msg('\n'+.InfSWn+'\n'+.InfArgS+'\n');
   0
|| {? _a>_b
   || _a-_b
   || 0
   ?}
?}
"),

obj_meth('SMa',"
{? _<>2 | type_of(_a)<>1 | type_of(_b)<>1
|| msg('\n'+.InfSMa+'\n'+.InfArgS+'\n');
   0
|| {? _b>_a
   || _b-_a
   || 0
   ?}
?}
"),

obj_meth('DWObr',"
.dwn
"),

obj_meth('DMObr',"
.dma
"),

obj_meth('Psh',"
DOK.cntx_psh; POZ.cntx_psh; AN.cntx_psh;
OKRO_F.cntx_psh
"),

obj_meth('Pop',"
OKRO_F.cntx_pop;
DOK.cntx_pop; POZ.cntx_pop; AN.cntx_pop
"),

obj_meth('obr_odd',"
.set_odd();
{? .ODDZIAL
|| OBR.prefix(_a,AN.ref,.ODDZIAL)
|| OBR.prefix(_a,AN.ref)
?}
"),

obj_meth('set_odd',"
{? .DOM_ODD
|| .ODD:=$OPERATOR.DEPT;
   .ODDZIAL:=OPERATOR.DEPT
?}
",-1,-1),

obj_meth('ROw',"
.RObr(_a,_b);
.rwn
",type_of(null),type_of(date(0,0,0))),

obj_meth('ROm',"
.RObr(_a,_b);
.rma
",type_of(null),type_of(date(0,0,0))),

obj_meth('RObr',"
   .rma:=.rwn:=0;
   {? _>=3 || {? type_of(_c)<>7 || _c:=null ?} || _c:=null ?};
   OP.cntx_psh();
   OP.prefix();
   {? OP.seek(_a)
   || {? _c=null
      || ZAP_OP.cntx_psh(); ZAP_OP.index('OP'); ZAP_OP.prefix(_a);
         {? ZAP_OP.first()
         || {!
            |? {? ZAP_OP.DATA<=_b || .rwn+=ZAP_OP.WN; .rma+=ZAP_OP.MA  ?};
               ZAP_OP.next()
            !}
         ?};
         ZAP_OP.cntx_pop()
      || OP_PROJ.cntx_psh(); OP_PROJ.index('OP'); OP_PROJ.prefix(OP.ref(),_c);
         {? OP_PROJ.first()
         || ZAP_PROJ.cntx_psh(); ZAP_PROJ.index('OP_PROJ'); ZAP_PROJ.prefix(OP_PROJ.ref());
            {? ZAP_PROJ.first()
            || {!
               |? {? ZAP_PROJ.DATA<=_b || .rwn+=ZAP_PROJ.WN; .rma+=ZAP_PROJ.MA ?};
                  ZAP_PROJ.DATA<=_b & ZAP_PROJ.next()
               !}
            ?};
            ZAP_PROJ.cntx_pop()
         ?};
         OP_PROJ.cntx_pop()
      ?}
   || FUN.info('Nie znaleziono rekordu w tabeli OP.'@);0
   ?};
   OP.cntx_pop()
",type_of(null),type_of(date(0,0,0))),

obj_meth('RObr2',"
.rma:=.rwn:=.rwwn:=.rwma:=.rtwn:=.rtma:=0; OP.cntx_psh(); OP.prefix(); 
{? _=2 || _c:=''; _d:=null() ?}; {? _=3 || _d:=null() ?};
{? OP.seek(_a)
|| ZAP_OP.cntx_psh(); ZAP_OP.index('OP'); ZAP_OP.prefix(_a);
   {? ZAP_OP.first()
   || {!
      |? {? ZAP_OP.DATA<=_b & (_d=null() | (ZAP_OP.WAL2=_d | ZAP_OP.RK='T'))
         || .rwn+=ZAP_OP.WN; .rma+=ZAP_OP.MA;
            {? ZAP_OP.WAL2 || .rwwn+=ZAP_OP.WN2; .rwma+=ZAP_OP.MA2 ?};
            {? ZAP_OP.TYP=_c & ZAP_OP.PAR_POZ=null || .rtwn+=ZAP_OP.WN; .rtma+=ZAP_OP.MA ?}
         ?};
         ZAP_OP.next()
      !}
   ?};
   ZAP_OP.cntx_pop()
|| FUN.info('Nie znaleziono rekordu w tabeli OP.'@); 0
?}; OP.cntx_pop()
",type_of(null),type_of(date(0,0,0))),

obj_meth('RObr3',"
.rma:=.rwn:=.rtwn:=.rtma:=.wn:=.ma:=.rwwn:=.rwma:=.dwn:=.dma:=0;
OP.cntx_psh(); OP.prefix(); OKRO_F.cntx_psh();
{? OP.seek(_a)
|| OKRO_F.index('ROK'); OKRO_F.prefix(SSTALE.AR);
   _vdb:={? OKRO_F.find_key(_b) || OKRO_F.POCZ || date(0,0,0) ?};
   _vde:=date(0,0,0);
   {? OKRO_F.find_key(_c)
   || {? OKRO_F.KON<>_vde | (~OKRO_F.next() & OKRO_F.prev() & OKRO_F.KON<>_vde) || _vde:=OKRO_F.KON ?}
   ?};
::   _vde:={? OKRO_F.find_key(_c) || {? OKRO_F.KON || date(0,0,0) ?};
   ZAP_OP.cntx_psh(); ZAP_OP.index('OP'); ZAP_OP.prefix(_a);
   {? ZAP_OP.first()
   || {! |?
         {? ZAP_OP.OKRO().ROK().POCZ_ROK<SSTALE.AR().POCZ_ROK | (ZAP_OP.OKRO().ROK=SSTALE.AR & ZAP_OP.OKRO().NR=0)
         || .rtwn+=ZAP_OP.WN; .rtma+=ZAP_OP.MA; .wn+=ZAP_OP.WN; .ma+=ZAP_OP.MA
         |? ZAP_OP.DATA<_vdb & ZAP_OP.OKRO().NR<_b
         || .wn+=ZAP_OP.WN; .ma+=ZAP_OP.MA
         || {? ZAP_OP.DATA>=_vdb & ZAP_OP.DATA<=_vde
            || .rwn+=ZAP_OP.WN; .rma+=ZAP_OP.MA;
               {? ZAP_OP.DATA<=_vde || .wn+=ZAP_OP.WN; .ma+=ZAP_OP.MA ?};
               {? ZAP_OP.OKRO().NR<_b
               || .rwwn-=ZAP_OP.WN; .rwma-=ZAP_OP.MA
               |? ZAP_OP.OKRO().NR>_c
               || .dwn-=ZAP_OP.WN; .dma-=ZAP_OP.MA
               ?}
            |? (ZAP_OP.DATA<_vdb | ZAP_OP.DATA>_vde) & ZAP_OP.OKRO().NR>=_b & ZAP_OP.OKRO().NR<=_c
            || {? ZAP_OP.DATA<=_vde || .wn+=ZAP_OP.WN; .ma+=ZAP_OP.MA ?};
               {? ZAP_OP.DATA>_vde
               || .dwn+=ZAP_OP.WN; .dma+=ZAP_OP.MA
               || .rwwn+=ZAP_OP.WN; .rwma+=ZAP_OP.MA
               ?}
            ?}
         ?}; ZAP_OP.next()
      !}
   ?};
   ZAP_OP.cntx_pop()
|| FUN.info('Nie znaleziono rekordu w tabeli OP.'@); 0
?};
OP.cntx_pop(); OKRO_F.cntx_pop()
",type_of(null),type_of(1),type_of(1)),

obj_meth('RObr4',"
.rma:=.rwn:=.rtwn:=.rtma:=0;
OP.cntx_psh(); ZAP_OP.cntx_psh();
OP.use('operac'+_b); ZAP_OP.use('rozzap'+_b);
OP.clear(); ZAP_OP.clear();  ZAP_OP.index('OP');
{? OP.seek(_a) & OP.DO<=_d
|| ZAP_OP.prefix(_a);
   {? ZAP_OP.first()
   || {!|? {? ZAP_OP.DATA>=_c & ZAP_OP.DATA<=_d
           || .rwn+=ZAP_OP.WN; .rma+=ZAP_OP.MA
           ?};
           {? ZAP_OP.DATA<=ZAP_OP.DATA
           || .rtwn+=ZAP_OP.WN; .rtma+=ZAP_OP.MA
           ?}; ZAP_OP.next()
      !}
   ?}
|| FUN.info('Nie znaleziono rekordu w tabeli OP.'@); 0
?};
OP.cntx_pop(); ZAP_OP.cntx_pop()
",type_of(null),type_of(''),type_of(date),type_of(date)),

obj_meth('RObr5',"
.rma:=.rwn:=.rwwn:=.rwma:=.rtwn:=.rtma:=0; OP.cntx_psh(); OP.prefix(); {? _=2 || _c:='' ?};
DOK.cntx_psh(); POZ.cntx_psh();
{? OP.seek(_a)
|| ZAP_OP.cntx_psh(); ZAP_OP.index('OP'); ZAP_OP.prefix(_a);
   {? ZAP_OP.first()
   || {!
      |? _maska:=ZAP_OP.OKRO().ROK().KOD+form(OKRO_F.NR,-2);
         DOK.use('doku'+_maska);
         POZ.use('pozy'+_maska);
         {? ZAP_OP.POZDOK().DOK().DTO<=_b
         || .rwn+=ZAP_OP.WN; .rma+=ZAP_OP.MA;
            {? ZAP_OP.WAL2 || .rwwn+=ZAP_OP.WN2; .rwma+=ZAP_OP.MA2 ?};
            {? ZAP_OP.TYP=_c & ZAP_OP.PAR_POZ=null || .rtwn+=ZAP_OP.WN; .rtma+=ZAP_OP.MA ?}
         ?};
         ZAP_OP.next()
       !}
   ?};
   ZAP_OP.cntx_pop()
|| FUN.info('Nie znaleziono rekordu w tabeli OP.'@); 0
?}; OP.cntx_pop(); DOK.cntx_pop(); POZ.cntx_pop()
",type_of(null),type_of(date(0,0,0))),

obj_meth('RWn',"
.RObr(_a,_b);
.SWn(.rwn,.rma)
",type_of(null),type_of(date(0,0,0))),

obj_meth('RMa',"
.RObr(_a,_b);
.SMa(.rwn,.rma)
",type_of(null),type_of(date(0,0,0))),

obj_virt('resetodd',"
.DOM_ODD:=1
",-1,-1),

obj_meth('set_odd',"
.ODDZIAL:=_a;
.DOM_ODD:=0;
.ODD:=$_a
",7,-1),

obj_meth('zapisy',"
{? POZ.first
|| {! |?
      _k:=_a;
      {! |? _k+1='?' |! _k:=_k-1 !};
      {? .spr_mask(_k,POZ.KON)
      || {? SSTALE.WAL=FINFO.NAROD
          || {? -POZ.STR='wn' || .dwn+=POZ.SUM || .dma+=POZ.SUM ?}
          || {? -POZ.STR='wn' || .dwn+=POZ.SUMW || .dma+=POZ.SUMW ?}
         ?}
      ?};
      POZ.next()
   !}
?}
"),

obj_meth('DObr',"
.dwn:=.dma:=0;
{? _>=4 || {? type_of(_d)<>1 || _d:=1 ?} || _d:=1 ?}; {? _d<0 | _d>1 || _d:=1 ?};
exec('mask_psh','fiksobi',14,'DOK','POZ','POW','AN','OKRO_F','AN_SLU',
   'ML_POZB','ML_OBRCZ','ML_OBRDZ','ML_OBRRZ','ML_OBRPG','ML_OBRPP','ML_POZTR','ML_OBRTR');
{? .DOM_ODD || .ODDZIAL:=OPERATOR.DEPT; .ODD:=$.ODDZIAL ?};
OKRO_F.index('FIRMA_NR'); OKRO_F.prefix(REF.FIRMA);
{? OKRO_F.first()
|| {! |?
      {? (_b>=OKRO_F.POCZ & _b<=OKRO_F.KON) | (_c>=OKRO_F.POCZ & _c<=OKRO_F.KON) |
         (_b<=OKRO_F.POCZ & _c>=OKRO_F.KON) | (OKRO_F.POCZ=date(0,0,0))
      || _v:=OKRO_F.ROK().KOD+form(OKRO_F.NR,-2); exec('use_dok','fiksobi',ROK_F.KOD,_v);
         {? .ODDZIAL
         || DOK.index('PR'); DOK.prefix('T','T',.ODDZIAL)
         || DOK.index('PR1'); DOK.prefix('T','T')
         ?};
         {? SSTALE.WAL<>FINFO.NAROD || POZ.index('CECHY') || POZ.index('DOK') ?};
         {? DOK.first
         || {! |?
               {? (_d=1 & DOK.DTW>=_b & DOK.DTW<=_c) | (_d<>1 & DOK.DOP>=_b & DOK.DOP<=_c)
               || {? SSTALE.WAL<>FINFO.NAROD || POZ.prefix(DOK.ref,SSTALE.WAL)
                  || POZ.prefix(DOK.ref)
                  ?};
                  .zapisy(_a)
               ?};
               DOK.next()
            !}
         ?}
      ?};
      OKRO_F.next()
    !}
?};
exec('mask_pop','fiksobi',14)
"),

obj_meth('DObr2',"
.dwn:=.dma:=0;
{? _>=4 || {? type_of(_d)<>1 || _d:=1 ?} || _d:=1 ?}; {? _d<0 | _d>1 || _d:=1 ?};
exec('mask_psh','fiksobi',14,'DOK','POZ','POW','AN','OKRO_F','AN_SLU',
   'ML_POZB','ML_OBRCZ','ML_OBRDZ','ML_OBRRZ','ML_OBRPG','ML_OBRPP','ML_POZTR','ML_OBRTR');
{? .DOM_ODD || .ODDZIAL:=OPERATOR.DEPT; .ODD:=$.ODDZIAL ?};
OKRO_F.index('FIRMA_NR'); OKRO_F.prefix(REF.FIRMA);
{? OKRO_F.first()
|| {!
   |? {? (_b>=OKRO_F.POCZ & _b<=OKRO_F.KON) | (_c>=OKRO_F.POCZ & _c<=OKRO_F.KON) |
         (_b<=OKRO_F.POCZ & _c>=OKRO_F.KON)
      || _v:=OKRO_F.ROK().KOD+form(OKRO_F.NR,-2); exec('use_dok','fiksobi',ROK_F.KOD,_v);
         {? .ODDZIAL
         || DOK.index('PR'); DOK.prefix('T','T',.ODDZIAL)
         || DOK.index('PR1'); DOK.prefix('T','T')
         ?};
         {? SSTALE.WAL<>FINFO.NAROD || POZ.index('D_KON') || POZ.index('D_KON2') ?};
         {? DOK.first()
         || {!
            |? {? (_d=1 & DOK.DTW>=_b & DOK.DTW<=_c) | (_d<>1 & DOK.DOP>=_b & DOK.DOP<=_c)
               || {? SSTALE.WAL<>FINFO.NAROD
                  || POZ.prefix(DOK.ref(),SSTALE.WAL,_a,)
                  || POZ.prefix(DOK.ref(),_a,)
                  ?};
                  {? POZ.first()
                  || {!
                     |? {? SSTALE.WAL=FINFO.NAROD
                        || {? -POZ.STR='wn' || .dwn+=POZ.SUM || .dma+=POZ.SUM ?}
                        || {? -POZ.STR='wn' || .dwn+=POZ.SUMW || .dma+=POZ.SUMW ?}
                        ?};
                        POZ.next()
                     !}
                  ?}
               ?};
               DOK.next()
            !}
         ?}
      ?};
      OKRO_F.next()
    !}
?};
exec('mask_pop','fiksobi',14)
"),

obj_meth('DOrej',".dwn:=.dma:=0;_poczatek:=_b;_koniec:=_c;_konto:=_a;_rej:=_d;
OKRO_F.index('ROK');OKRO_F.prefix(SSTALE.AR);
{? OKRO_F.find_key(_poczatek)
|| {!|? _v:=SSTALE.AR().KOD+form(OKRO_F.NR,-2);
        exec('use_dok','fiksobi',ROK_F.KOD,_v); REJ.index('KOD'); ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
        {? {? OPERATOR.DEPT || OPERATOR.DEPT(); 1 || ODD.first() ?}
        || {!|? REJ.prefix(SSTALE.AR,ODD.ref(),_rej,_rej);
                {? REJ.first()
                || _rejref:=REJ.ref(); DOK.index('PR1'); DOK.prefix('T','T',_rejref);
                   {? DOK.first()
                   || {!|? POZ.index('CECHY');
                           {? SSTALE.WAL<>FINFO.NAROD
                           || POZ.prefix(DOK.ref,SSTALE.WAL)
                           || POZ.prefix(DOK.ref)
                           ?}; .zapisy(_konto); DOK.next()
                      !}
                   ?}
                ?}; OPERATOR.DEPT=null & ODD.next()
           !}
        ?}; {? OKRO_F.NR<_koniec || OKRO_F.next() || 0 ?}
   !}; exec('use_dok','fiksobi',SSTALE.AO().ROK().KOD,ROK_F.KOD+form(SSTALE.AO().NR,-2)); REJ.prefix()
?}
"),

obj_meth('DDOrej',".dwn:=.dma:=0;
{? _>=5 || {? type_of(_e)<>1 || _e:=1 ?} || _e:=1 ?}; {? _e<0 | _e>1 || _e:=1 ?};
exec('mask_psh','fiksobi',14,'DOK','POZ','POW','AN','OKRO_F','AN_SLU',
   'ML_POZB','ML_OBRCZ','ML_OBRDZ','ML_OBRRZ','ML_OBRPG','ML_OBRPP','ML_POZTR','ML_OBRTR');
OKRO_F.index('FIRMA_NR'); OKRO_F.prefix(REF.FIRMA); REJ.index('KOD');
{? OKRO_F.first
|| {!|? {? (_b>=OKRO_F.POCZ & _b<=OKRO_F.KON) | (_c>=OKRO_F.POCZ & _c<=OKRO_F.KON) |
           (_b<=OKRO_F.POCZ & _c>=OKRO_F.KON) | (OKRO_F.POCZ=date(0,0,0))
        || _v:=OKRO_F.ROK().KOD+form(OKRO_F.NR,-2); exec('use_dok','fiksobi',ROK_F.KOD,_v);
           {? SSTALE.WAL<>FINFO.NAROD || POZ.index('CECHY') || POZ.index('DOK') ?};
           {? {? OPERATOR.DEPT || OPERATOR.DEPT();1 || ODD.first() ?}
           || {!|? REJ.prefix(SSTALE.AR,ODD.ref(),_d,_d);
                   {? REJ.first()
                   || DOK.index('PR'); DOK.prefix('T','T',ODD.ref(),REJ.ref());
                      {? DOK.first()
                      || {!|? {? (_e=1 & DOK.DTW>=_b & DOK.DTW<=_c) | (DOK.DOP>=_b & DOK.DOP<=_c)
                              || {? SSTALE.WAL<>FINFO.NAROD
                                 || POZ.prefix(DOK.ref,SSTALE.WAL)
                                 || POZ.prefix(DOK.ref())
                                 ?}; .zapisy(_a)
                              ?}; DOK.next()
                         !}
                      ?}
                   ?}; OPERATOR.DEPT=null & ODD.next()
              !}
           ?}
        ?}; OKRO_F.next()
   !}
?}; exec('mask_pop','fiksobi',14)
"),

obj_meth('Pw2',"
{? _<1 | _>2 | type_of(_a)<>2 |
   (_>1 & _b<>~~ & type_of(_b)<>1)
|| msg('\n'+.InfPw2+'\n'+.InfArgP2+'\n');
   0
|| {? _=1 | _b=~~
   || OKRO_F.cntx_psh;
      OKRO_F.prefix;
      _b:=SSTALE.AO().NR;
      OKRO_F.cntx_pop
   ?};
   .dwn:=.dma:=0;
   .Saldo2(_a,_b);
   .dwn
?}
"),

obj_meth('Pm2',"
{? _<1 | _>2 | type_of(_a)<>2 |
   _>1 & _b<>~~ & type_of(_b)<>1
|| msg('\n'+.InfPm2+'\n'+.InfArgP2+'\n');
   0
|| {? _=1 | _b=~~
   || OKRO_F.cntx_psh;
      OKRO_F.prefix;
      _b:=SSTALE.AO().NR;
      OKRO_F.cntx_pop
   ?};
   .dwn:=.dma:=0;
   .Saldo2(_a,_b);
   .dma
?}
"),

obj_meth('Saldo2',"
{! |?_a+1='?'|! _a:=_a-1 !};
AN.cntx_psh;
AN.index('WALSYM');
AN.prefix(SSTALE.WAL, {? _l:=_a*'?' || (_l-1)+_a || _a ?} );
{? AN.first
|| {!
   |? {?  (~_l | .spr_mask(_a,AN.SYM)) & .sprfml(AN.SYM)
      || .Saldo(_b);
         .dwn+=.SWn(.wn,.ma);
         .dma+=.SMa(.wn,.ma)
      ?};
      AN.next()
   !}
?};
AN.cntx_pop
"),

obj_fld('wn',0),
obj_fld('ma',0),
obj_fld('dwn',0),
obj_fld('dma',0),
obj_fld('rwn',0),
obj_fld('rma',0),
obj_fld('rwwn',0),
obj_fld('rwma',0),
obj_fld('rtwn',0),
obj_fld('rtma',0),
obj_fld('InfKm','Funkcja Km( maska [, m1, m2] ) : Obroty strony Ma'),
obj_fld('InfKw','Funkcja Kw( maska [, m1, m2] ) : Obroty strony Wn'),
obj_fld('InfArgK','argumenty: maska - string, m1 - number, m2 - number'),
obj_fld('InfMa','Funkcja Ma( [m1, m2] ) : Obroty strony Ma bieżącego konta'),
obj_fld('InfWn','Funkcja Wn( [m1, m2] ) : Obroty strony Wn bieżącego konta'),
obj_fld('InfArg1','argumenty: m1 - number, m2 - number'),
obj_fld('InfPw','Funkcja Pw( [m] ) : Saldo Wn obrotów z okresów od 0 do m\n'+
                'bieżącego konta'),
obj_fld('InfPm','Funkcja Pm( [m] ) : Saldo Ma obrotów z okresów od 0 do m\n'+
                'bieżącego konta'),
obj_fld('InfPw2','Funkcja Pw2( maska [, m] ) : Saldo "rozwarte" Wn dla  okresu od 0 do m'),
obj_fld('InfPm2','Funkcja Pm2( maska [, m] ) : Saldo "rozwarte" Ma dla okresu od 0 do m'),
obj_fld('InfArgP','argumenty: m - number'),
obj_fld('InfArgP2','argumenty: maska - maska konta, m - number'),
obj_fld('InfSWn','Funkcja SWn( w, m ) : Saldo Wn dwóch liczb'),
obj_fld('InfSMa','Funkcja SMa( w, m ) : Saldo Ma dwóch liczb'),
obj_fld('InfArgS','argumenty: w - number, m - number'),
obj_fld('InfWK','Funkcja WK(strona,maska,nr okresu1,nr okresu2,\n'+
                'słownik wyróżnika[,kod wyróżnika])\n'+
                 ' : Obroty strony z wyróżnikiem'),
obj_fld('InfWP2','Funkcja WP2(strona,maska,nr okresu,słownik wyróżnika[,kod wyróżnika])\n'+
                 ' : Saldo "rozwarte" strony z wyróżnikiem'),
obj_fld('InfWDOr','Funkcja WDOrej(maska,nr okresu 1,nr okresu 2,kod rejestru\n'+
                  'słownik wyróżnika[,kod wyróżnika])\n'+
                 ' : Obroty w rejestrze z wyróżnikiem'),
obj_fld('ODDZIAL',0),
        'czy aktualne wyliczenie dla jednostki ksiegowej domyslnej (0)
        czy dla wskazanej przez ostanio ustawiona jednostke ksiegowa';
obj_fld('DOM_ODD',0),
obj_fld('ODD',''),
obj_fld('PAR14_T',PAR_SKID.get(14)='T'),
)


\def_objf
exec('funkcje','fiksobi');
F:=obj_new(@.CLASS.FUNKCJEF);
exec('fun_virt','fiksobi')


\del
obj_del(F); &F


\mask_psh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JS
:: OPIS: zapamietuje nazwy tabel, ktorych kontekst bedzie zapamietywany
::   WE: _a - liczba tabel
::       _b,... - pozostale argumenty, akronimy tabel
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('maski')<=0 || maski:=obj_new(_a) ?};
{? var_pres('akron')<=0 || akron:=obj_new(_a) ?};
{? _a>1
|| {! _ii:=2..(_a+1)
   |! _xx:=form(_[_ii])+'.name()';
      akron[_ii-1]:=_[_ii];
      maski[_ii-1]:=($_xx)()
   !}
|| FUN.info('Błędna wartość argumentów funkcji mask_psh.'@);0
?}


\mask_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JS
:: OPIS: Otwiera tabele, ktorych maski zapamietano uprzednio funkcja mask_psh
::   WE: _a - liczba zapamietanych tabel
::       _b,... - pozostale argumenty, akronimy tabel
::----------------------------------------------------------------------------------------------------------------------
{? _a>0
|| {! _ii:=1..(_a)
   |! _xx:=form(akron[_ii])+'.use('''+maski[_ii]+''')';
      ($_xx)()
   !}
|| FUN.info('Błędna wartość argumentu funkcji mask_pop.'@);0
?};
obj_del(maski); &maski; obj_del(akron); &akron


\use_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL
:: OPIS: Otwiera tabele z dokumentami i kontami dla roku o kodzie _a  i okresu o kodzie _b (czteroznakowy string)
::   WE: _a - kod roku
::       _b - kod okresu
::----------------------------------------------------------------------------------------------------------------------
DOK.use('doku'+_b);   POZ.use('pozy'+_b);
AN.use('koan__'+_a);  AN_SLU.use('koansl'+_a);
POW.use('pow_'+_b);
::Poczatek modyfikacji dla Maclex Fiks 09-10-2009 AK [1120]
ML_POZB.use('pozb'+_b);
ML_OBRCZ.use('obrcz_'+_a);  ML_OBRDZ.use('obrdz_'+_a);  ML_OBRRZ.use('obrrz_'+_a); ML_OBRPG.use('obrpg_'+_a);
ML_OBRPP.use('obrpp_'+_a);  ML_POZTR.use('mlpozt'+_a); ML_OBRTR.use('mlobrt'+_a)
::Koniec modyfikacji dla Maclex Fiks


\fun_virt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.20]
:: OPIS: Funkcja deklaruje metody wirtualne obiektu F.
::       Metoda: WK (ktora wywoluje metode: WObr i posrednio WObr0)
::       Metoda: WP2 (ktora wywoluje metode: WSaldo i posrednio WSaldo0)
::       Metoda: WDOrej (ktora wywoluje metode: Wzapisy i posrednio Wzapisy0)
::----------------------------------------------------------------------------------------------------------------------
set_virt(F,'WK',"
{? _<1 |
   (_>1 & type_of(_a)<>2 & (1+(~-_a))<>'W' & (1+(~-_a))<>'M') |
   (_>4 &
   (type_of(_b)<>2 | type_of(_c)<>1 | type_of(_d)<>1 | (_c>_d) |
    type_of(_e)<>7 | (_>5 & type_of(_f)<>2) ))
|| msg('\n'+.InfWK+'\n');
   0
|? (_<5 & _>1) | (_>=5 & _e=null)
|| _a:=1+(~-_a);
   {? _a='W' & _=2 || .Kw(_b)
   |? _a='W' & _=3 || .Kw(_b,_c)
   |? _a='W' & _>=4 || .Kw(_b,_c,_d)
   |? _a='M' & _=2 || .Km(_b)
   |? _a='M' & _=3 || .Km(_b,_c)
   |? _a='M' & _>=4 || .Km(_b,_c,_d)
   ?}
|| {? _=5 || _f:='' ?};
   .WObr(_b,_c,_d,_e,_f);
   {? 1+(~-_a)='W' || .wn || .ma ?}
?}
");

set_virt(F,'WObr',"
.wn:=.ma:=0;
{? SSTALE.WAL=FINFO.NAROD
|| {!|? _a+1='?'|! _a:=_a-1 !};
   OKRO_F.cntx_psh(); OKRO_F.index('ROK');
   OKRO_F.prefix(SSTALE.AR);
   {? OKRO_F.find_key(_b)
   || {!|? exec('use_dok','fiksobi',OKRO_F.ROK().KOD,OKRO_F.ROK().KOD+form(OKRO_F.NR,-2));
           .WObr0(_a,_d,_e);
           OKRO_F.NR<_c & OKRO_F.next()
      !};
      exec('use_dok','fiksobi',SSTALE.AO().ROK().KOD,SSTALE.AO().ROK().KOD+form(SSTALE.AO().NR,-2))
   ?}; OKRO_F.cntx_pop()
?}
");

set_virt(F,'WObr0',"
_ok:=1;
POW.cntx_psh();
{? _c<>''
|| POW.index('KS');
   _dl:=.ile_kod(_b,_c);
   {? _dl=0 || _ok:=0
   |? _dl=1 || {? _a*'?'=0 || POW.prefix(_b,_c,_a) || POW.prefix(_b,_c) ?}
   |? _dl>1 || POW.prefix(_b,_c)
   ?}
|| POW.index('SLU');
   {? _a*'?'=0 || POW.prefix(_b,_a) || POW.prefix(_b) ?}
?};
{? _ok & POW.first()
|| _l:=_a*'?';
   {!|? {? (POW.POZ().ZP='T' | POZ.ZK='T') &
           (OPERATOR.DEPT=null | (OPERATOR.DEPT<>null & POZ.DOK().ODD=OPERATOR.DEPT)) &
           (_l=0 | (_l>0 & .spr_mask(_a,POZ.KON))) & .sprfml($POW.SLU+$POW.SLO)
        || .sum()
        ?};
        POW.next()
   !}
?};
POW.cntx_pop()
");

set_virt(F,'sum',"{? 1+POZ.STR='W' || .wn+=POW.KW || .ma+=POW.KW ?}");

set_virt(F,'ile_kod',"
_size:=0;
SLUAPPL.cntx_psh();
SLUAPPL.prefix();
{? SLUAPPL.seek(_a)
|| SLO.cntx_psh(); SLO.index('SL'); SLO.prefix(SLUAPPL.SLU,_b);
   _size:=SLO.size();
   SLO.cntx_pop()
?};
SLUAPPL.cntx_pop();
_size
");

set_virt(F,'WP2',"
{? _<1 |
   (_>1 & type_of(_a)<>2 & (1+(~-_a))<>'W' & (1+(~-_a))<>'M') |
   (_>3 &
   (type_of(_b)<>2 | type_of(_c)<>1 |
    type_of(_d)<>7 | (_>4 & type_of(_e)<>2) | ( _>4 & _d=null & _e<>'' )))
|| msg('\n'+.InfWP2+'\n');
   0
|? (_<4 & _>1) |  | (_=4 & _d=null) | (_=5 & _d=null & _e='')
|| _a:=1+(~-_a);
   {? _a='W' & _=2 || .Pw2(_b)
   |? _a='W' & _>=3 || .Pw2(_b,_c)
   |? _a='M' & _=2 || .Pm2(_b)
   |? _a='M' & _>=3 || .Pm2(_b,_c)
   ?}
|| {? _=4 || _e:='' ?};
   .dwn:=.dma:=0;
   .WSaldo2(_b,_c,_d,_e);
   {? 1+(~-_a)='W' || .dwn || .dma ?}
?}
");

set_virt(F,'WSaldo2',"
{? SSTALE.WAL=FINFO.NAROD
|| {! |?_a+1='?'|! _a:=_a-1 !};
   OKRO_F.cntx_psh(); AN.cntx_psh;
   AN.index('WALSYM'); AN.prefix(SSTALE.WAL,{? _l:=_a*'?' || (_l-1)+_a || _a ?});
   {? AN.first
   || {!|? AN.cntx_psh();
          {?~_l | .spr_mask(_a,AN.SYM)
          || _wn:=_ma:=0;
             OKRO_F.index('ROK'); OKRO_F.prefix(SSTALE.AR);
             {? OKRO_F.first()
             || {!|? OKRO_F.cntx_psh();
                     exec('use_dok','fiksobi',OKRO_F.ROK().KOD,OKRO_F.ROK().KOD+form(OKRO_F.NR,-2));
                     .WSaldo0(AN.SYM,_c,_d); _wn+=.wn; _ma+=.ma;
                     OKRO_F.cntx_pop();
                     OKRO_F.next() & OKRO_F.NR<=_b
                !}
             ?}; .dwn+=.SWn(_wn,_ma); .dma+=.SMa(_wn,_ma)
          ?};
          AN.cntx_pop(); AN.next
      !}
   ?};
   exec('use_dok','fiksobi',SSTALE.AO().ROK().KOD,SSTALE.AO().ROK().KOD+form(SSTALE.AO().NR,-2));
   OKRO_F.cntx_pop(); AN.cntx_pop()
?}
");

set_virt(F,'WSaldo0',"
.wn:=.ma:=0;
POW.cntx_psh();
POW.index('KONTO');
POW.prefix(_a,_b,_c);
{? POW.first()
|| {!|? {? ( (POW.POZ().ZP='T' | POZ.ZK='T') &
            (OPERATOR.DEPT=null |
            (OPERATOR.DEPT<>null & POW.POZ().DOK().ODD=OPERATOR.DEPT)) )
        || .sum()
        ?};
        POW.next()
   !}
?};
POW.cntx_pop()
");

set_virt(F,'WDOrej',"
{? _<4 |
   (_>4 &
   (type_of(_a)<>2 | type_of(_b)<>1 | type_of(_c)<>1 | (_b>_c) | type_of(_d)<>2 |
    type_of(_e)<>7 | (_>5 & type_of(_f)<>2) ))
|| msg('\n'+.InfWDOr+'\n');
   0
|? _=4 | (_=5 & _e=null) | (_=6 & _e=null & _f='')
|| .DOrej(_a,_b,_c,_d)
|| {? _=5 || _f:='' ?};
   .Wzapisy(_a,_b,_c,_d,_e,_f)
?}
");

set_virt(F,'Wzapisy',".dwn:=.dma:=0;
{? SSTALE.WAL=FINFO.NAROD
|| REJ.cntx_psh();REJ.index('KOD');ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
  DOK.cntx_psh();OKRO_F.cntx_psh();OKRO_F.index('ROK');OKRO_F.prefix(SSTALE.AR);
  {? OKRO_F.find_key(_b)||
    {!|? exec('use_dok','fiksobi',OKRO_F.ROK().KOD,ROK_F.KOD+form(OKRO_F.NR,-2));
      {? {? OPERATOR.DEPT|| OPERATOR.DEPT();1 || ODD.first() ?} ||
        {! |?
          REJ.prefix(SSTALE.AR,ODD.ref(),_d,_d);
          {? REJ.first()
          || DOK.index('REJ'); DOK.prefix(REJ.ref());
             {? DOK.first()
             || {!|? {? DOK.ZP='T' | DOK.ZK='T'|| .Wzapisy0(_a,_e,_f) ?};  DOK.next() !}
             ?}
          ?};
          OPERATOR.DEPT=null & ODD.next()
        !}
      ?};OKRO_F.NR<_c & OKRO_F.next
    !};
    exec('use_dok','fiksobi',SSTALE.AO().ROK().KOD,ROK_F.KOD+form(OKRO_F.NR,-2))
  ?};
  OKRO_F.cntx_pop();DOK.cntx_pop();REJ.cntx_pop()
?}
");

set_virt(F,'Wzapisy0',"
{!|? _a+1='?' |! _a:=_a-1 !};
_ok:=1; .wn:=.ma:=0;
POW.cntx_psh(); POW.index('DOK');
{? _c<>''
|| _dl:=.ile_kod(_b,_c);
   {? _dl=0 || _ok:=0
   |? _dl=1 || {? _a*'?'>0
               || POW.prefix(DOK.ref(),_b,_c)
               || POW.prefix(DOK.ref(),_b,_c,_a)
               ?}
   |? _dl>1 || POW.prefix(DOK.ref(),_b,_c)
   ?}
|| POW.prefix(DOK.ref(),_b)
?};
_l:=_a*'?';
{? _ok & POW.first()
|| {!|? {? .spr_mask(_a,POW.POZ().KON) & .sprfml(POZ.KON) || .sum() ?}; POW.next !}
?};
POW.cntx_pop;
.dwn+=.wn; .dma+=.ma
");

set_virt(F,'PObr',"
.wn:=.ma:=.dwn:=.dma:=0;
POZ.cntx_psh(); POZ.index('D_KON');
{? _=1 || _b:=null; POZ.prefix(DOK.ref,_b,_a)
|? _=2 || POZ.prefix(DOK.ref,_b,_a) || POZ.prefix(DOK.ref,_b,_a,_c,)
?};
{? POZ.first()
|| {! |?
      {? 1+POZ.STR='W'
      || {? ~_b || .wn+=POZ.SUM$2 || .wn+=POZ.SUMW$2; .dwn+=POZ.SUM$2 ?}
      || {? ~_b || .ma+=POZ.SUM$2 || .ma+=POZ.SUMW$2; .dma+=POZ.SUM$2 ?}
      ?};
      POZ.next
   !}
?};
POZ.cntx_pop()
")

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:17 1c73065440fc176e9c351b357d0cc1aa2dc736eab42d03eab90236d5e0bccdb43fe26d0cc88ef993e72ad9b29ad4eba5e40154e90ecf8ffa0276b82018822ad842e19e54a8bfb842cc8a617bda65f66e3626d7519566b76941cc94e6b9f0311c2d0cb20b2377b2f0ab1194e5e6f78f8ca69dd88013c2e22683638b02f0c7574c
