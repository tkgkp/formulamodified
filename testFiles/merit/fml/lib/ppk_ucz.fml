:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_ucz.fml [12.51]
:: Utworzony: 06.03.2019
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Funkcje do obsługi umów uczestników PPK.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed dołączeniem lub poprawieniem wiersza tabeli PPK_UCZ.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie danych i obsługa informacji redundantnych
{? PPK_UCZ.UID=0 || PPK_UCZ.UID:=exec('tm_stamp','#tm_stamp') ?};
{? PPK_UCZ.ID_PPK<>'' || PPK_UCZ.ZG:='T' ?};
:: pielęgnuj anomalie
PPK_UZA.cntx_psh();
PPK_UMO.cntx_psh();
PPK_UCZ.FIRMA:=PPK_UCZ.PPK_UMO().PPK_UZA().FIRMA;
PPK_UMO.cntx_pop();
PPK_UZA.cntx_pop();
1


\_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(PPK_UCZ,
   "_a.field(_b,'PPK_UMO')",
   $("_a.table(_b,"+$_mode+",,'OSOBA','OD')"),
   "  _b.PPK_UMO();
      {? _b.DO<>date(0,0,0) & _b.DO<_b.OD
      || _a.err_emsg('Wprowadzono niespójne daty.'@); 'OD'

      |? _b.OD<_b.PPK_UMO().OD
      || _a.err_msg('""Data przystąpienia"" nie może być wcześniejsza od daty rozpoczęcia programu.'@); 'OD'

      |? _b.PPK_UMO().DO<>date(0,0,0) & _b.PPK_UMO().DO<_b.OD
      || _a.err_msg('""Data przystąpienia"" nie może być późniejsza od daty zakończenia programu.'@); 'OD'

      || 1
      ?}
   "
)


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli PPK_UCZ.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_ucz') & exec('_chk','ppk_ucz',0)


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli PPK_UCZ.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_ucz') & exec('_chk','ppk_ucz',1)


\_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po dołącz" tabeli PPK_UCZ.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

exec('wer_akt','ppk_ucz',PPK_UCZ.OSOBA);
exec('last_mod_set','#table',PPK_UCZ);
{? exec('lic','#b_domain','POR')
|| exec('idput_ndx','#table',P,'OSOBA',PPK_UCZ.OSOBA)
?};
~~


\_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po popraw" tabeli PPK_UCZ.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? ~exec('_update','ppk_zal',bfld('UID'),PPK_UCZ.UID)
|| undo();
   return()
?};
exec('last_mod_set','#table',PPK_UCZ);
{? exec('lic','#b_domain','POR')
|| exec('idput_ndx','#table',P,'OSOBA',PPK_UCZ.OSOBA)
?};
~~


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli PPK_UCZ.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
_result:=(
   exec('del_ndx','#table',PPK_WNU,'UCZ_OD',PPK_UCZ.ref()) &
   exec('del_ndx','#table',PPK_KOM,'UCZ_KRD',PPK_UCZ.ref()) &
   exec('del_ndx','#table',PPK_WIF,'UCZ_NAZ',PPK_UCZ.ref()) &
   exec('del_ndx','#table',PPK_ZDN,'DATA',PPK_UCZ.ref())
);

{? _result
:: Zostały już tylko wnioski nieprzypięte do uczestnika, próba usunięcia procentów wpłat na wniosek z nich pochodzących
|| _PNW:=
      sql('
         select PPK_PNW.REFERENCE
         from PPK_PNW
            join PPK_WPW using(PPK_PNW.PPK_WPW, PPK_WPW.REFERENCE)
         where
            PPK_WPW.PPK_WNU in
               (select PPK_WNU.REFERENCE
                from PPK_WNU
                where PPK_WNU.PPK_UCZ is null and PPK_WNU.OSOBA=:_a
               )
         ',PPK_UCZ.OSOBA);
   {? type_of(_PNW)<>type_of(SYSLOG)
   || _result:=0
   |? _PNW.first()
   || PPK_PNW.cntx_psh();
      {!
      |? {? PPK_PNW.seek(_PNW.REFERENCE,,1)
         || _result:=(PPK_PNW.del(,1)>0)
         ?};

         _result & _PNW.next()
      !};
      PPK_PNW.cntx_pop()
   ?}
?};

{? _result
:: Usunięcie definicji procentu wpłat uczestnika powiązanych z umową o prowadzenie PPK w zakresie dat jej obowiązywania
|| _PWP:=
      sql('
         select PPK_PWP.REFERENCE as REFERENCE
         from PPK_PWP
         where
            PPK_PWP.FIRMA=:_a and PPK_PWP.OD>=to_date(:_b) and (PPK_PWP.OD<=to_date(:_c) or to_date(:_c) is null)
            and
            (PPK_PWP.OSOBA=:_d
            or
            PPK_PWP.P in (select P.REFERENCE from P where P.OSOBA=:_d)
            or
            PPK_PWP.ZC in (select ZC.REFERENCE from ZC where ZC.OSOBA=:_d))',
         exec('firma','ustawienia'),PPK_UMO.OD,PPK_UMO.DO,PPK_UCZ.OSOBA
      );
   {? type_of(_PWP)<>type_of(SYSLOG)
   || _result:=0
   |? _PWP.first()
   || PPK_PWP.cntx_psh();
      {!
      |? {? PPK_PWP.seek(_PWP.REFERENCE,,1)
         || _result:=(PPK_PWP.del(,1)>0)
         ?};

         _result & _PWP.next()
      !};
      PPK_PWP.cntx_pop()
   ?}
?};

_result


\_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po usuń" tabeli PPK_UCZ.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? ~exec('_remove','ppk_zal',bfld('UID'))
|| undo();
   return()
?};
exec('last_mod_set','#table',PPK_UCZ);
{? exec('lic','#b_domain','POR')
|| exec('idput_ndx','#table',P,'OSOBA',bfld('OSOBA'))
?};
~~


\nie_akt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Sprawdza, czy uczestnik jest aktywny i jeśli nie, to pyta czy kontynuować działanie
::   WE:
::   WY: 0/1 - wynik testu lub decyzja użytkownika
::----------------------------------------------------------------------------------------------------------------------
PPK_UCZ.AKTYWNY<>'T' & ~FUN.ask('Uczestnik nie jest aktywny.\nCzy kontynuować działanie?'@)


\wer_akt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Weryfikuje aktywność uczestnika. Wykorzystanie w wyzwalaczach tabel P i PRZ.
::   WE: _a _OSOBA - dane osobowe
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_osoba:=_a;
_firma:=exec('firma','ustawienia');

:: czy osoba jest uczestnikiem?
PPK_UCZ.cntx_psh();
PPK_UCZ.index('AKTYWNY');
PPK_UCZ.prefix(_osoba);
{? ~PPK_UCZ.find_key(_firma)
|| PPK_UCZ.cntx_pop();
   return()
?};

:: test współpracy
_za:=0;
_fz:='PZ';

P.cntx_psh();
P.index('PRACOSOB');
{! _ii:=1..+_fz
|? _za=0
|! P.prefix(_firma,_ii+_fz+1,_osoba);
   _za:=P.find_tab(,'ZA',,'=','T')
!};
P.cntx_pop();

_szukaj:={? _za=0 || 'T' || 'N' ?};
_zmiana:={? _za=0 || 'N' || 'T' ?};
PPK_UCZ.prefix(_osoba,_firma);
{!
|? PPK_UCZ.find_tab(0,'AKTYWNY',,'=',_szukaj)
|! {? PPK_UCZ.AKTYWNY<>_zmiana
   || PPK_UCZ.AKTYWNY:=_zmiana;
      PPK_UCZ.put()
   ?}
!};

PPK_UCZ.cntx_pop();
~~


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wskazanie aktualnego uczestnika programu.
::   WE:
::   WY: Wskazanie wiersza tabeli PPK_UCZ
::----------------------------------------------------------------------------------------------------------------------
PPK_UCZ.ref()


\id_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wartość domyślna identyfikatora wewnętrznego.
::   WE:
::   WY: identyfikator
::----------------------------------------------------------------------------------------------------------------------
_ch:='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';

PPK_UCZ.cntx_psh();
PPK_UCZ.index('ID_APP');
PPK_UCZ.prefix(exec('firma','ustawienia'));
{!
|? _id:='';
   {! _mi:=1..5
   |! {! _ni:=1..5
      |! _id+=int(rand*+_ch)+1+_ch+1
      !};
      _id+='-'
   !};
   _id:=_id-1;
   PPK_UCZ.find_key(_id,)
!};
PPK_UCZ.cntx_pop();

_id


\ppk_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Po redakcji pola ID_PPK tabeli PPK_UCZ
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? PPK_UCZ.ID_PPK<>'' & PPK_UCZ.ZG<>'T'
|| PPK_UCZ.ZG:='T';
   win_disp()
?};
1


\zg_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed edycją pola PPK_UCZ.ZG.
::   WE:
::   WY: 0/1 - pole zablokowane/dostępne
::----------------------------------------------------------------------------------------------------------------------
PPK_UCZ.ID_PPK=''


\email
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Zwraca adres poczty elektronicznej osoby.
::   WE: _a _OSOBA - wskazanie wiersza tabeli OSOBA.
::       _b [DATE] - data do wyszukania aktualnego adresu osoby.
::   WY: adres poczty elektronicznej lub tekst pusty
::----------------------------------------------------------------------------------------------------------------------

:: Wyszukanie adresu e-mail w tabeli użytkowników internetowych.
_usr_email:=
   "  _email:='';
      USERS.cntx_psh();
      USERS.index('OSOBA');
      USERS.prefix(_a);
      {? USERS.first()
      || {!
         |? {? USERS.AKT='T'
            || _email:=USERS.EMAIL
            ?};
            _email='' & USERS.next()
         !}
      ?};
      USERS.cntx_pop();
      _email
   ";

:: Wyszukanie adresu e-mail w tabeli z adresami osoby.
_os_email:=
   "  _email:='';
      OS_ADRES.cntx_psh();
      _r_adr:=spli_str('C,S,K,I',',');
      {! _ii:=1 .. 4
      |! {? _email='' & exec('szukaj','osoba',_r_adr[_ii],_a)
         || _email:=OS_ADRES.EMAIL;
            {? +_email
            || OS_ADRES.cntx_pop();
               return(_email)
            ?}
         ?}
      !};
      OS_ADRES.cntx_pop();
      _email
   ";

:: Ustalenie adresu e-mail zgodnie z ustawionym parametrem.

{? KST_PPK.PPKEMAIL='P'
|| _email:=_os_email(_b);
   {? _email=''
   || _email:=_usr_email(_a)
   ?}
|| _email:=_usr_email(_a);
   {? _email=''
   || _email:=_os_email(_b)
   ?}
?};
_email


\sel_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Zwraca akronim dedykowanego okienka słownika dla tabeli OSOBA.
::   WE:
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_com:="exec('fldComment','#field',OSOBA,_a)";

_wnd:=OSOBA.mk_sel('Dane osobowe'@,'P',0,'#ppk_osoba',,,,,'U');
OSOBA.win_fld(_wnd,,'NAZWISKO',,,,,,,,_com('NAZWISKO'));
OSOBA.win_fld(_wnd,,'PIERWSZE',,,,,,,,_com('PIERWSZE'));
OSOBA.win_fld(_wnd,,'UR_DATA',,,,,,,,_com('UR_DATA'));
OSOBA.win_fld(_wnd,,'PESEL',,,',13',,,,,_com('PESEL'));
OSOBA.win_fld(_wnd,,'DOWOD',,,',13',,,,,_com('DOWOD'));
OSOBA.win_fld(_wnd,,'PASZPORT',,,,,,,,_com('PASZPORT'));

OSOBA.win_act(_wnd,,'Szukaj');
OSOBA.win_act(_wnd,,'Kolejność');

_wnd


\wyb_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyświetla okienko wyboru pracowników.
::   WE: _a _OSOBA - wskazanie osoby
::   WY: wskazanie wybranego pracownika lub null
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_osoba:=_a;
_ref:=null;

:: lista dostępnych pracowników
_wnd:=exec('sel_p','ppk_ucz');
P.win_act(_wnd,,'Formuła','Wybierz'@,,,,"sel_exit",1);

P.cntx_psh();
P.prefix();
_UPR:=exec('q_p_upr','ppk_ucz',_osoba);
exec('filtr_p','ppk_ucz',_a,_UPR);
{? P.f_size()=1 & P.f_first()
|| _ref:=P.ref()
|| P.win_sel(_wnd);
   {? P.select()
   || _ref:=P.ref()
   ?}
?};
P.f_clear();
P.cntx_pop();
obj_del(_UPR);
P.win_del(_wnd);

_ref


\sel_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy okienko selekcji pracowników.
::   WE:
::   WY: akronim utworzonego okienka
::----------------------------------------------------------------------------------------------------------------------
_lab:="exec('fldLabel','#field',P,_a)";
_com:="exec('fldComment','#field',P,_a)";

_wnd:=P.mk_sel('Zatrudnienie uczestnika'@,'P',,'#ppk_ucz_p',,,,,'P',,,,,'html_maximized');
P.win_fld(_wnd,,'T',,,-10,,,_lab('T'),,_com('T'));
P.win_fld(_wnd,,'WYDZIAL','SYMBOL',,-16,,,_lab('WYDZIAL'),,_com('WYDZIAL'));
P.win_fld(_wnd,,'ST','ST',,-33,,,_lab('ST'),,_com('ST'));
P.win_fld(_wnd,,'CP','CP',,-8,,,_lab('CP'),,_com('CP'));
P.win_fld(_wnd,,'F_ZATR','KOD',,-5,,,_lab('F_ZATR'),,_com('F_ZATR'));
P.win_fld(_wnd,,'ZA',,,-3,,,_lab('ZA'),,_com('ZA'),2,,"'T'","'N'");
P.win_fld(_wnd,,'DZA',,,-10,,,_lab('DZA'),,_com('DZA'));
P.win_fld(_wnd,,'DZ',,,-10,,,_lab('DZ'),,_com('DZ'));
:: ustalenie kontekstu przeglądania
P.win_act(_wnd,,'Rekord',,,,"
   REF.P:=P.ref;
   REF.OSOBA:=P.OSOBA;
   0
");
_wnd


\q_p_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Zwraca listę pracowników, do których uczestnik ma dostęp.
::   WE: _a [_OSOBA] - wskazanie osoby
::   WY: alias tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
_dom:='PPK';
_f_zatr:='P,Z';
{? var_pres('_a')=type_of(null) & _a<>null
|| exec('dostepne_p_osoba','schemat',_dom,_f_zatr,,$_a)
|| exec('dostepne_p','schemat',_dom,_f_zatr)
?}


\filtr_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Ustawia filtr tabeli P
::   WE: _a _OSOBA - wskazanie osoby
::       _b _TABLE - alias tabeli tymczasowej z dostępnymi pracownikami
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
P.f_set(,,'P.OSOBA=:_a and P.REFERENCE in (select :_b.REF from :_b)',_a,_b);
~~


\sel_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Aktywuje/dezaktywuje akcje okienka tabeli PPK_UCZ.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_wnd:=cur_win(1,1);
_aid:='';
_awf:='';
{? _wnd='WERI'
|| _awf:='J(C)'
|| _awf:='C'
?};
{? ~exec('usun__','ppk_ucz') & PPK_UCZ.sel_size()=0
|| _aid+='U'
?};
{? exec('ses_get','xfilter',_wnd).SES=null
|| _aid:='%1%2:%1'[_awf,_aid]
?};

PPK_UCZ.actions_grayed(_wnd,_aid);
~~


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Udostępnia zawartość kartoteki bieżącej firmy PPK_UCZ.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_loop:=1;
{!
|? _loop
|!
:: ustal kontekst działania
   _inTerm:=
      {? ~exec('interm','#system')
      || exec('pxx_widok_uproszczony','pkd','PPK_UCZ')
      || 1
      ?};

   {? exec('pre_sel','ppk')=0
   || return()
   ?};

:: sprawdzamy uprawnienia do czynności
   _act:=obj_new('ANY','pwp','wnu','kom','zdn','wif','kwk','kwz','pod');
   _names:=obj_ntab_names(_act);
   _act.ANY:=0;
   {! _lp:=2 .. obj_len(_names)
   |! _act[_lp]:=
         exec('chk_role','#b__box',OPERATOR.USER,'PPK_EWI_R'+(~_names[_lp])) |
         exec('chk_role','#b__box',OPERATOR.USER,'PPK_EWI_P'+(~_names[_lp]));
      _act.ANY+=_act[_lp]
   !};

:: utwórz listę osób, do których użytkownik ma dostęp
   VAR_DEL.delete('__P_UPR','__O_UPR');
   __P_UPR:=exec('q_p_upr','ppk_ucz');
   __O_UPR:=sql(
      'select distinct Q.OSOBA as REF '+
      'from :_a as Q '+
      'order by REF',
      __P_UPR
   );

   {? __O_UPR.size()=0
   || FUN.emsg(
         'Działanie funkcji zostanie przerwane ze względu na brak uprawnień do współpracowników.\n'
         'Sprawdź uprawnienia do jednostek organizacyjnych w dziedzinie PPK.'@
      );
      VAR_DEL.delete('__P_UPR','__O_UPR');
      return()
   ?};

:: sposób wyświetlania okien
   _mode:='maximized_with_title';
:: akronim głównego okienka
   _main:='';
   {? ~_inTerm
   ||
      _main:='WER';
::    pasek przycisków
      _bar:=KST_PPK.mk_edit(,,'#kst_ppk_ucz');

::    Zestawienia i raporty
      _btn:=KST_PPK.win_ebtn(_bar,
         'text=%1,panel=bottom,align=end,display=1'['Zestawienia i raporty'@],
         "  exec('np_run','#b__box','PPK_ZES_WYDR');
            win_activate('UCZ_PWP');
            ''
         "
      );
      _bst:='grayed';
      {? exec('chk_role','#b__box',OPERATOR.USER,'PPK_ZES_WYDR')
      || _bst:='normal'
      ?};
      KST_PPK.btn_eopt(_bar,_btn,'state=%1,default=1'[_bst]);

::    Operacje grupowe
      _btn:=KST_PPK.win_ebtn(_bar,
         'text=%1,panel=bottom,align=end,display=1'['Operacje grupowe'@],
         "  exec('ppk_ucz_wer_bbfo','ppk_ucz');
            win_activate('UCZ_PWP');
            ''
         "
      );
      KST_PPK.btn_eopt(_bar,_btn,'state=normal,default=1')
   ||
      _main:='WERI'
   ?};
:: dedykowane okienka składowe
:: lista dla procentów wpłat
   _opw:=exec('sel_p','ppk_ucz');
   P.win_act(_opw,,'Formuła','Umowy'@@,,,"exec('umo_ucz','ppk_ucz')",,1);
:: lista dla korekt wpłat
   _opk:=exec('sel_p','ppk_ucz');
:: lista dla przychodów
   _opp:=exec('sel_p','ppk_ucz');

:: tymczasowe okna składowe grupy
   _wnd:=obj_new('opw','opp','opk','main');
   _wnd.opw:=_opw;
   _wnd.opp:=_opp;
   _wnd.opk:=_opk;
   _wnd.main:=_main;

:: kontekst interakcji
   _ctx:=obj_new('in_main');
   _ctx.in_main:=1;

:: kontekst działania dla okna grupowego
   params_set('ctx',_ctx,'act',_act,'wnd',_wnd);

:: panel zawierający informacje o uczestnikach programu
   _grp:=PPK_UCZ.grp_make('Uczestnicy programu'@,
::    przed otwarciem
      "  P.cntx_psh();
         P.clear();
         PPK_PWP.cntx_psh();
         PPK_PWP.index('ODRN');
         exec('_setup','ppk_pwp',P);
         PPK_WNU.cntx_psh();
         PPK_WNU.index('OSOBA_OD');
         PPK_ZDN.cntx_psh();
         _p236:=PAR_SKID.get(236)='T';
         _ind:={? _p236 || 'DATAX' || 'DATA' ?};
         PPK_ZDN.index(_ind);
         PPK_ZDP.cntx_psh();
         PPK_ZDP.index('NUMER');
         PPK_WIF.cntx_psh();
         PPK_WIF.index('UCZ_NAZ');
         PPK_KOM.cntx_psh();
         PPK_KOM.index('OS_DATA');
         PPK_POD.cntx_psh();
         PPK_POD.index('WYLICZ');
         PPK_POK.cntx_psh();
         PPK_POK.index('RN');
         exec('wnd_b','ppk_pod');
         PPK_KWN.cntx_psh();
         PPK_KWK.cntx_psh();
         PPK_KWK.index('RN');
         _aid:='';
            {? exec('chk_role','#b__box',OPERATOR.USER,'ZWS_DOS_PPDA')=0 &
               exec('chk_role','#b__box',OPERATOR.USER,'ZWS_DOS_PRDA')=0
            || _aid:='A'
            ?};
         _aid+={? exec('fun_perm','ppk') || 'G:G' || 'G:G' ?};
         _wnd:=params_get().wnd.main;
         PPK_UCZ.actions(_wnd,_aid,,1);
         1
      ",
::    identyfikator
      '#ppk_ucz_grp',,,
::    podczas zamykania
      "  {? exec('exit','zws')
         || P.cntx_pop();
            PPK_PWP.cntx_pop();
            PPK_ZDP.cntx_pop();
            PPK_ZDN.cntx_pop();
            PPK_WIF.cntx_pop();
            PPK_WNU.cntx_pop();
            PPK_KOM.cntx_pop();
            PPK_KWN.cntx_pop();
            PPK_KWK.cntx_pop();
            PPK_UCZ.sel_adel();
            PPK_UCZ.f_clear();
            PPK_POK.cntx_pop();
            PPK_POD.cntx_pop();
            exec('wnd_a','ppk_pod');
            PPK_KWN.f_clear();
            P.f_clear();
            PPK_KWN.fld_fml('TYP','BLANK',""*"");
            1
         ?}
      ",,,
::    rozkład
      {? _inTerm
      || 'lumen'
      || 'jterm'
      ?}
   );

   {? ~_inTerm
   ||
::    wstaw dodatkową listwę przycisków
      PPK_UCZ.grp_edit(_grp,KST_PPK,_bar,,,,,,'maximized');
      PPK_UCZ.grp_splt(_grp,,'horizontal','main')
   ?};

:: zasadnicza część obszaru roboczego
   PPK_UCZ.grp_sel(_grp,,_main,,
::    po odświeżeniu
      "  _par:=params_get();
         params_set(_par);
         _ctx:=_par.ctx;
         _act:=_par.act;
         _wnd:=_par.wnd;
         _div:=':';
         _aid:='';
         {? exec('interm','#system')
         || _aid:='J(I)';
            _aid:='%1%2%1'[_aid,_div];
            _div:=''
         ?};

         REF.OSOBA:={? grp_empty(PPK_UCZ,cur_win(1,1)) || null || PPK_UCZ.OSOBA ?};
         exec('lm_ar','ppk_ucz');
         {? _act.pwp || grp_disp(P,_wnd.opw,1,1) ?};
         {? _act.wnu || grp_disp(PPK_WNU,'WER',_ctx.in_main<>0,1) ?};
         {? _act.kom || grp_disp(PPK_KOM,'WER',1,1) ?};
         {? _act.zdn || grp_disp(PPK_ZDN,'WER',1,1) ?};
         {? _act.wif | _act.wnu || grp_disp(PPK_WIF,'WERU',1,1) ?};
         {? _wnd.opp<>'' & _act.pod || grp_disp(P,_wnd.opp,1,1) ?};
         {? _act.kwk || grp_disp(P,_wnd.opk,1,1) ?};
         {? _act.kwz || grp_disp(PPK_KWN,'WERO',1,1) ?};
         exec('sel_act','ppk_ucz');
         PPK_UCZ.actions_grayed(cur_win(1,1),_aid);
         ~~
      ",,,
::    wysokość
      12,
::    przed obsługą
      "  {? _a<>0
         || _ctx:=params_get().ctx;
            _ctx.in_main:=1
         ?};

         PPK_UCZ.sel_adel();
         {? KST_PPK.PPK_UMO=null | __O_UPR.size()=0
         || return('#disable')
         ?};
         _ses:=exec('ses_get','xfilter',cur_win(1,1));
         PPK_UCZ.f_set('OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',
            _ses.JOIN,
            'PPK_UCZ.PPK_UMO=:_a and PPK_UCZ.OSOBA in (select :_b.REF from :_b)'+
            {? _ses.WHERE<>'' || ' and '+_ses.WHERE || '' ?},
            KST_PPK.PPK_UMO,__O_UPR
         );
         exec('lm_bs','ppk_ucz')
      ",
::    po obsłudze
      "  {? _a<>0
         || _ctx:=params_get().ctx;
            _ctx.in_main:=0
         ?}
      ",,,
::    tryb
      _mode,
::    identyfikator
      'UCZ_PWP',1
   );
   {? _act.ANY
   || PPK_UCZ.grp_splt(_grp,,'horizontal','bottom')
   ?};
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   {? _act.pwp
   ||
::    lista współpracowników
      PPK_UCZ.grp_sel(_grp,P,_opw,'Procentowe wysokości wpłat'@,
::    po odświeżeniu
         "  REF.P:=P.ref();
            REF.OSOBA:=OSOBA.ref();
            _aid:='';
            {? (P.F_ZATR().KOD='P' &
                  exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_PPZA')=0 &
                  exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_RPZA')=0) |
               (P.F_ZATR().KOD='Z' &
                  exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_PUZC')=0 &
                  exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_RUZC')=0 &
                  exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_PRAC')=0 &
                  exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_RRAC')=0)
            || _aid:='U'
            ?};
            P.actions_grayed(cur_win(1,1),_aid);
            grp_disp(PPK_PWP,'WERU',1,1)
         ",,,
::       wysokość
         4,
::       przed obsługą
         "  _wnd:=params_get().wnd.main;
            P.sel_adel();
            {? grp_empty(PPK_UCZ,_wnd)
            || return('#disable')
            ?};
            exec('filtr_p','ppk_ucz',PPK_UCZ.OSOBA,__P_UPR)
         ",,,,
::       tryb
         _mode
      );
::    procenty wpłat
      PPK_UCZ.tab_splt(_grp,,'horizontal','bottom');
      PPK_UCZ.grp_sel(_grp,PPK_PWP,'WERU',,
::    po odświeżeniu
         "  _aid:='';
            {? exec('is_mod','ppk_pwp')=0
            || _aid:='pu'
            || PPK_PNW.cntx_psh();
               PPK_PNW.index('PPK_PWP');
               PPK_PNW.prefix(PPK_PWP.ref());
               {? PPK_PNW.size()<>0
               || _aid:='pu'
               ?};
               PPK_PNW.cntx_pop()
            ?};
            PPK_PWP.actions_grayed('WERU',_aid)
         ",,,
::       wysokość
         7,
::       przed obsługą
         "  KST_PPK.PPK_UMO();
            {? grp_empty('UCZ_PWP')
            || return('#disable')
            ?};
            exec('filtruj','ppk_pwp',REF.P,REF.OSOBA,PPK_UMO.OD,PPK_UMO.DO)
         ",,,,
::       tryb
         _mode
      )
   ?};
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   {? _act.wnu
   ||
::    lista wniosków i deklaracji
      PPK_UCZ.grp_sel(_grp,PPK_WNU,'WER','Deklaracje i wnioski'@,
::    po odświeżeniu
         "  _par:=params_get();
            params_set(_par);
            _ctx:=_par.ctx;
            _wnd:=_par.wnd.main;
            _aid:='';
            {? PPK_WNU.PPK_RDA<>null
            || _aid+='u'
            ?};
            {? PPK_WNU.WER_WYM='N' | PPK_WNU.PWP_STAT='T'
            || _aid+='W'
            ?};
            {? ~exec('drukuj_b','ppk_wnu','u',1)
            || _aid+='J'
            ?};
            PPK_WNU.actions_grayed('WER',_aid);
            grp_disp(PPK_WPW,'WER',1,1);
            grp_disp(PPK_UCZ,_wnd,_ctx.in_main=0)
         ",,,
::       wysokość
         7,
::       przed obsługą
         "  _wnd:=params_get().wnd.main;
            {? grp_empty(PPK_UCZ,_wnd)
            || return('#disable')
            ?};
            PPK_WNU.index('OSOBA_OD');
            PPK_WNU.prefix(exec('ref_firma','#firma'),PPK_UCZ.OSOBA,exec('ref','ppk_umo'))
         ",,,,
::    tryb
         _mode
      );
::    deklarowane procenty wpłat
      PPK_UCZ.tab_splt(_grp,,'horizontal','bottom');
      PPK_UCZ.grp_sel(_grp,PPK_WPW,'WER',,,,,
::    wysokość
         4,
::       przed obsługą
         "  {? grp_empty(PPK_WNU,'WER')
            || return('#disable')
            ?};
            PPK_WPW.prefix(PPK_WNU.ref())
         ",,,,
::       tryb
         _mode
      )
   ?};
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   {? _act.kom
   ||
::    komunikaty
      PPK_UCZ.grp_sel(_grp,PPK_KOM,'WER','Komunikaty'@,,,,,
::    przed obsługą
         "  _wnd:=params_get().wnd.main;
            {? grp_empty(PPK_UCZ,_wnd)
            || return('#disable')
            ?};
            PPK_KOM.prefix(exec('ref_firma','#firma'),PPK_UCZ.OSOBA,exec('ref','ppk_umo'))
         ",,,,
::    tryb
         _mode
      )
   ?};
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   {? _act.zdn
   ||
::    historia danych
      PPK_UCZ.grp_sel(_grp,PPK_ZDN,'WER','Historia danych'@,
::       po odświeżeniu
         "  _aid:=':';
            {? PPK_UCZ.sel_size()=0 & PPK_UCZ.f_size()=0
            || _aid:=':D'
            ?};
            {? PPK_ZDN.PPK_RDA<>null()
::             Dane użyte w raporcie - blokujemy "Popraw" i "Usuń".
            || _aid:='PU'+_aid
            || _ref:=PPK_ZDN.ref();
               PPK_ZDN.cntx_psh();
               PPK_ZDN.index('XEL');
               PPK_ZDN.prefix(PPK_UCZ.ref(),PPK_ZDN.PPK_XEL);
               {? ~(PPK_ZDN.last() & PPK_ZDN.ref()=_ref)
::             Nie stoimy na ostatnim rekordzie - blokujemy "Popraw".
               || _aid:='P'+_aid
               ?};
               PPK_ZDN.cntx_pop()
            ?};
            PPK_ZDN.actions('WER',_aid,,1);
            grp_disp(PPK_ZDP,'WER',1,1)
         ",,,
::       wysokość
         ,
::       przed obsługą
         "  _wnd:=params_get().wnd.main;
            {? grp_empty(PPK_UCZ,_wnd)
            || return('#disable')
            ?};
            PPK_ZDN.prefix(PPK_UCZ.ref())
         ",,,,
::       tryb
         _mode
      );
      PPK_UCZ.tab_splt(_grp,,'horizontal','bottom',10);
      PPK_UCZ.grp_sel(_grp,PPK_ZDP,'WER',,,,,,
::       przed obsługą
         "  {? grp_empty(PPK_ZDN,'WER')
            || return('#disable')
            ?};
            PPK_ZDP.prefix(PPK_ZDN.ref())
         ",,,,
::       tryb
         _mode
      )
   ?};
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   {? _act.wif | _act.wnu
::    Jeżeli ktoś ma uprawnienia do "Deklaracji i wniosków" to może tam przeglądać / rejestrować instytucje finansowe.
::    W takim wypadku - nawet jak nie ma bezpośrednich uprawnień do "Instytucji finansowych" - pokażmy tę zakładkę.
   ||
::    instytucje finansowe
      PPK_UCZ.grp_sel(_grp,PPK_WIF,'WERU','Instytucje finansowe'@,,,,,
::       przed obsługą
         "  _wnd:=params_get().wnd.main;
            {? grp_empty(PPK_UCZ,_wnd)
            || return('#disable')
            ?};
            PPK_WIF.prefix(PPK_UCZ.ref())
         ",,,,
::       tryb
         _mode
      )
   ?};
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   {? _opp<>'' & _act.pod
   ||
::    lista współpracowników
      PPK_UCZ.grp_sel(_grp,P,_opp,'Przychody z tytułu wpłat'@,
::       po odświeżeniu
         "  REF.P:=P.ref();
            REF.OSOBA:=OSOBA.ref();
            grp_disp(PPK_POD,'WER',1,1)
         ",,,
::       wysokość
         4,
::       przed obsługą
         "  _wnd:=params_get().wnd.main;
            P.sel_adel();
            {? grp_empty(PPK_UCZ,_wnd)
            || return('#disable')
            ?};
            exec('filtr_p','ppk_ucz',PPK_UCZ.OSOBA,__P_UPR)
         ",,,,
::       tryb
         _mode,
::       identyfikator
         'UCZ_POD'
      );
::    przychód
      PPK_UCZ.tab_splt(_grp,,'horizontal','bottom');
      PPK_UCZ.grp_sel(_grp,PPK_POD,'WER',,
::       po odświeżeniu
         "  _aid:=
               {? grp_empty('UCZ_POD') || 'DPu:D'
               |? PPK_POD.POD_O<>null || 'Pu'
               || ''
               ?};
            PPK_POD.actions_grayed('WER',_aid);
            _inTerm:=
               {? ~exec('interm','#system')
               || exec('pxx_widok_uproszczony','pkd','PPK_UCZ')
               || 1
               ?};
            {? ~(cur_win(1,0)='WERI') & ~_inTerm
            || grp_disp(PPK_POK,'WER',1,1)
            ?}
         ",,,
::       wysokość
         7,
::       przed obsługą
         "  {? grp_empty('UCZ_POD')
            || return('#disable')
            ?};
            PPK_POD.prefix(P.ref())
         ",,,,
::       tryb
         _mode
      );
      {? ~_inTerm
      || PPK_UCZ.tab_splt(_grp,'bottom','vertical','right');
         PPK_UCZ.grp_sel(_grp,PPK_POK,'WER',,
::          po odświeżeniu
            "  grp_disp(PPK_POD,'WER',0,1)
            ",,,
::          wysokość
            7,
::          przed obsługą
            "  {? grp_empty(PPK_POD,'WER')
               || return('#disable')
               ?};
               _aid:='dpu:d';
               {? PPK_POD.POD_O=null
               || _aid:=''
               ?};
               PPK_POK.prefix(PPK_POD.ref());
               PPK_POK.actions_grayed('WER',_aid)
            ",,,,
::          tryb
            _mode
         )
      ?}
   ?};
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   {? _act.kwk
   ||
::    lista współpracowników
      PPK_UCZ.grp_sel(_grp,P,_opk,'Korekty wpłat'@,
::       po odświeżeniu
         "  REF.P:=P.ref();
            REF.OSOBA:=OSOBA.ref();
            grp_disp(PPK_KWN,'WERP',1,1)
         ",,,
::       wysokość
         4,
::       przed obsługą
         "  _wnd:=params_get().wnd.main;
            P.sel_adel();
            {? grp_empty(PPK_UCZ,_wnd)
            || return('#disable')
            ?};
            exec('filtr_p','ppk_ucz',PPK_UCZ.OSOBA,__P_UPR)
         ",,,,
::       tryb
         _mode,
::       identyfikator
         'UCZ_KWN'
      );
::    korekty wpłat
      PPK_UCZ.tab_splt(_grp,,'horizontal','bottom');
      PPK_UCZ.grp_sel(_grp,PPK_KWN,'WERP',,
::       po odświeżeniu
         "  _aid:='';
            {? PPK_KWN.PPK_RDA<>null()
            || _aid+='pu'
            ?};
            PPK_KWN.actions_grayed('WERP',_aid);
            _inTerm:=
               {? ~exec('interm','#system')
               || exec('pxx_widok_uproszczony','pkd','PPK_UCZ')
               || 1
               ?};
            {? ~(cur_win(1,0)='WERI') &  ~_inTerm
            || grp_disp(PPK_KWK,'WERP',1,1)
            ?}
         ",,,
::       wysokość
         7,
::       przed obsługą
         "  {? grp_empty('UCZ_KWN')
            || return('#disable')
            ?};
            {? _a
            || PPK_KWN.fld_fml('TYP','BLANK',""'R'"");
               PPK_KWN.fld_fml('P','BLANK',""REF.P"")
            ?};
            PPK_KWN.win_edit('REDP');
            PPK_KWN.prefix();
            PPK_KWN.f_set('R^,M^,TYP',,'PPK_KWN.P=:_a and PPK_KWN.TYP in (\\'R\\',\\'W\\')',P.ref())
         ",
::       po obsłudze
         "  {? _a
            || PPK_KWN.fld_fml('P','BLANK',""*"");
               PPK_KWN.fld_fml('TYP','BLANK',""*"")
            ?}
         ",,,
::       tryb
         _mode
      );
      {? ~_inTerm
      || PPK_UCZ.tab_splt(_grp,'bottom','vertical','right');
         PPK_UCZ.grp_sel(_grp,PPK_KWK,'WERP',,,,,
::          wysokość
            7,
::          przed obsługą
            "  {? grp_empty(PPK_KWN,'WERP')
               || return('#disable')
               ?};
               PPK_KWK.prefix(PPK_KWN.ref())
            ",,,,
::          tryb
            _mode
         )
      ?}
   ?};
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   {? _act.kwz
   ||
::    zwroty
      PPK_UCZ.grp_sel(_grp,PPK_KWN,'WERO','Zwroty/wyrównania wpłat'@,
::       po odświeżeniu
         "  _aid:='';
            {? PPK_KWN.PPK_RDA<>null
            || _aid+='pu'
            ?};
            PPK_KWN.actions_grayed('WERO',_aid);
            _inTerm:=
               {? ~exec('interm','#system')
               || exec('pxx_widok_uproszczony','pkd','PPK_UCZ')
               || 1
               ?};

            {? ~(cur_win(1,0)='WERI') &  ~_inTerm
            || grp_disp(PPK_KWK,'WERO',1,1)
            ?}
         ",,,,
::       przed obsługą
         "  _wnd:=params_get().wnd.main;
            {? grp_empty(PPK_UCZ,_wnd)
            || return('#disable')
            ?};
            {? _a
            || PPK_KWN.fld_fml('TYP','BLANK',""'Z'"")
            ?};
            PPK_KWN.win_edit('REDO');
            PPK_KWN.f_clear();
            PPK_KWN.index('ZWR');
            PPK_KWN.prefix(exec('firma','ustawienia'),PPK_UCZ.OSOBA,'Z',)
         ",
::       po obsłudze
         "  {? _a
            || PPK_KWN.fld_fml('TYP','BLANK',""*"")
            ?}
         ",,,
::       tryb
         _mode
      );
      {? ~_inTerm
      || PPK_UCZ.tab_splt(_grp,,'vertical','right');
         PPK_UCZ.grp_sel(_grp,PPK_KWK,'WERO',,,,,,
::          przed obsługą
            "  {? grp_empty(PPK_KWN,'WERO')
               || return('#disable')
               ?};
               _aid:='';
               {? PPK_KWN.PPK_RDA<>null
               || _aid+='p'
               ?};
               PPK_KWK.actions_grayed('WERO',_aid);
               PPK_KWK.prefix(PPK_KWN.ref())
            ",,,,
::          tryb
            _mode
         )
      ?}
   ?};
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

   PPK_WRD.fld_fml('RODZAJ','BLANK',"'U'");
   PPK_KRD.fld_fml('RODZAJ','BLANK',"'U'");
   PPK_UCZ.cntx_psh();
   PPK_UCZ.prefix();
   PPK_UCZ.win_sel(_grp);
   _loop:=PPK_UCZ.select();
   PPK_UCZ.cntx_pop();
:: porządki
   PPK_WRD.fld_fml('RODZAJ','BLANK',"*");
   PPK_KRD.fld_fml('RODZAJ','BLANK',"*");
   VAR_DEL.delete('__P_UPR','__O_UPR');
   PPK_UCZ.win_del(_grp);
   obj_del(_act);
   obj_del(_names);
   obj_del(_wnd);
   obj_del(_ctx);
   P.win_del(_opw);
   P.win_del(_opk)
!};
~~


\lm_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Unikanie nadmiarowego odświeżania filtra przy pierwszym wejściu do obszaru.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.UCZ_LM:=exec('last_mod_get','#table',PPK_UCZ);
~~


\lm_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Rozszerzenie formuły "Po odświeżeniu" o sprawdzenie, czy nie zaszły zmiany na liście uczestników na skutek
::       działań w innych instancjach i (ewentualne) odświeżenie filtra.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Jeżeli w oknie zaznaczony jest co najmniej jeden rekord, nie wolno nam (technologicznie) odświeżyć widoku.
:: Oznacza to, że nie zobaczymy nowych rekordów, które zostały dodane na innym stanowisku.
:: Nie aktualizujemy wartości zmiennej EDIT_VAR.UCZ_LM - odświeżenie "nie minie nas", zostanie jednak wykonane
:: później. Nie zmienia to faktu, że w przeglądanym oknie będą się odświeżały wartości rekordów po których chodzimy.
{? PPK_UCZ.sel_size()
|| return()
?};

_lm:=exec('last_mod_get','#table',PPK_UCZ);
{? EDIT_VAR.UCZ_LM<>_lm
|| EDIT_VAR.UCZ_LM:=_lm;
   PPK_UCZ.f_rfresh();
   win_disp()
?};
~~


\dod_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed dołączeniem wiersza tabeli PPK_UCZ.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
PPK_UCZ.fld_fml('OSOBA','BEFORE_EDIT',"*");
1


\dod_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po dołączeniu wiersza tabeli PPK_UCZ.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? exec('jest','ppk') & exec('fun_perm','ppk')
|| exec('czytaj','#stalesys',PPK_UCZ.OD,KST_PPK);
   _TAB:=exec('tab_ucz','ppk_ucz');
   OSOBA.cntx_psh();
   PPK_UCZ.OSOBA();
   _TAB.blank(1);
   _TAB.OSOBA:=OSOBA.ref();
   _TAB.NAZWISKO:=OSOBA.NAZWISKO;
   _TAB.PIERWSZE:=OSOBA.PIERWSZE;
   _TAB.PESEL:=OSOBA.PESEL;
   _TAB.PASZPORT:=OSOBA.PASZPORT;
   _TAB.SK_PF:=KST_PPK.SK_PF;
   _TAB.SK_DF:={? KST_PPK.SK_UWDF='S' || KST_PPK.SK_DOMDF || 0 ?};
   _TAB.SK_PU:=KST_PPK.SK_MAXPU;
   _TAB.SK_DU:=0;
   _TAB.OD:=PPK_UCZ.OD;
   _TAB.UR_DATA:=OSOBA.UR_DATA;
   _TAB.Z:=PPK_UCZ.ZG;
   _TAB.P_P:='Art.12. ust.2. pkt 2)';
   _TAB.add();
   OSOBA.cntx_pop();

   exec('add_pwp','ppk_ucz',_TAB);
   exec('zap_kom','ppk_kom',_TAB.OD,'U','IUCZ')
?};
PPK_UCZ.f_rfresh();
~~


\pop_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed poprawieniem wiersza tabeli PPK_UCZ.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_UCZ.fld_fml('OSOBA','BEFORE_EDIT',"0");
1


\pop_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po poprawieniu wiersza tabeli PPK_UCZ.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_UCZ.f_rfresh();
~~


\zmo_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Akcja "Zmień opis wpłat" okienek tabeli PPK_UCZ.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\pow_env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Ustala odpowiednie środowisko pracy tabeli PPK_KOM na potrzeby akcji "Utwórz powiadomienia"
::       UWAGA! Należy pamiętać o przywróceniu kontekstu.
::   WE: [_a][STRING] - 'U'/'O' - uczestnik/osoba, domyślnie: 'U'
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') & ',U,O,'*',%1,'[_a] || _a || 'U' ?};
PPK_KOM.cntx_psh();
PPK_KOM.prefix();
PPK_KOM.win_edit('RED_U');
PPK_KOM.blank();
PPK_KOM.memo_set(,'TRESC');
PPK_KOM.TYP:=_typ;
PPK_KOM.PPK_UCZ:=PPK_UCZ.ref();

~~


\pow_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Akcja "Utwórz powiadomienia" operacji grupowych tabeli PPK_UCZ.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: ustaw parametry edytora
_kom:=exec('gr_param','ppk_kom');
_kom.EXT_TAB:=spli_str(
   'NIE_AKTU|STRING[1]|%1|'
   'NIE_JEST|STRING[1]|%2'[
      'aktualnie nieaktywnego'@,
      'jeśli istnieje komunikat na podaną datę'@
   ],'|'
);
_kom.EXT_VAL:="
   _a.NIE_AKTU:='N';
   _a.NIE_JEST:='T';
   ~~
";
_kom.EXT_WND:="
   _a.win_efld(_b,AH,'H',,,,,,'Pomiń uczestnika:'@);
   _a.win_efld(_b,,'NIE_AKTU',,,,,,,,
      'Pomiń uczestnika aktualnie nieaktywnego. [T/N]'@,
      'check-box',,$('''T'''),$('''N''')
   );
   _a.win_efld(_b,,'NIE_JEST',,,,,,,,
      'Pomiń uczestnika, jeśli istnieje komunikat na podaną datę. [T/N]'@,
      'check-box',,$('''T'''),$('''N''')
   );
   ~~
";

:: ustaw parametry wybieracza
_ucz:=exec('gr_param','ppk_ucz');
_ucz.TEST_FML:="exec('kom_wyb','ppk_ucz',_a)";
_ucz.TEST_PAR:=_kom;

:: wprowadź komunikatu dla wybranych uczestników
exec('gr_dodaj','ppk_kom',_kom,_ucz);
~~


\kom_wyb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Kryterium uwzględnienia uczestnika dla komunikatów.
::   WE: _a OBJECT - tablica nazwana zawierająca informacje o tworzonym komunikacie
::   WY: 0/1 - wynik testu spełnienia kryterium uwzględnienia na liście uczestników
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_arg:=_a;
_par:=_arg.TEST_PAR;
_kom:=_par.TRESC;

{? _kom.NIE_AKTU='T' & PPK_UCZ.AKTYWNY<>'T'
|| return(0)
?};

_test:=1;
{? _kom.NIE_JEST='T'
|| PPK_KOM.cntx_psh();
   PPK_KOM.index('UCZ_DATA');
   PPK_KOM.prefix(_arg.PPK_UCZ,_kom.DATA);
   _test:=~PPK_KOM.find_key(_par.SYMBOL);
   PPK_KOM.cntx_pop()
?};

_test<>0


\bl25_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Akcja "Blokada naliczania wpłat (art. 25)" okienek tabeli PPK_UCZ.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('bl25_1','ppk_ucz');
~~


\bl25_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Swobodne wprowadzenie wniosków "Blokada naliczania wpłat (art. 25)".
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: ustaw parametry edytora
_wnu:=exec('gr_param','ppk_wnu');
_wnu.SYMBOL:='WB25B';
_wnu.EXT_TAB:=spli_str(
   'NIE_AKTU|STRING[1]|%1|'
   'NIE_JEST|STRING[1]|%2|'
   'NIE_BLOK|STRING[1]|%3|'
   'NIE_WYPL|STRING[1]|%4'[
      'aktualnie nieaktywnego'@,
      'jeśli istnieje blokada na podstawie art. 25'@,
      'gdy złożył deklarację rezygnacji z wpłat'@,
      'któremu wypłacono środki po 60 roku życia'@
   ],'|'
);
_wnu.EXT_VAL:="
   _a.NIE_AKTU:='N';
   _a.NIE_JEST:='T';
   _a.NIE_BLOK:='T';
   _a.NIE_WYPL:='T';
   ~~
";
_wnu.EXT_WND:="
   _a.win_efld(_b,AH,'H',,,,,,'Pomiń uczestnika:'@);
   _a.win_efld(_b,,'NIE_AKTU',,,,,,,,
      'Pomiń uczestnika aktualnie nieaktywnego. [T/N]'@,
      'check-box',,$('''T'''),$('''N''')
   );
   _a.win_efld(_b,,'NIE_JEST',,,,,,,,
      'Pomiń uczestnika, jeśli istnieje blokada na podstawie art. 25. [T/N]'@,
      'check-box',,$('''T'''),$('''N''')
   );
   _a.win_efld(_b,,'NIE_BLOK',,,,,,,,
      'Pomiń uczestnika, gdy złożył deklarację rezygnacji z wpłat. [T/N]'@,
      'check-box',,$('''T'''),$('''N''')
   );
   _a.win_efld(_b,,'NIE_WYPL',,,,,,,,
      'Pomiń uczestnika, któremu wypłacono środki po 60 roku życia. [T/N]'@,
      'check-box',,$('''T'''),$('''N''')
   );
   ~~
";

:: ustaw parametry wybieracza
_ucz:=exec('gr_param','ppk_ucz');
_ucz.TEST_FML:="exec('bl25_wyb','ppk_ucz',_a)";
_ucz.TEST_PAR:=_wnu;

:: wprowadź wniosek dla wybranych uczestników
exec('gr_dodaj','ppk_wnu',_wnu,_ucz,"exec('wb25_dod','ppk_ucz',_a)");

~~


\bl25_wyb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Kryterium uwzględnienia uczestnika dla wniosku WB25B.
::   WE: _a OBJECT - tablica nazwana zawierająca informacje o tworzonym wniosku
::   WY: 0/1 - wynik testu spełnienia kryterium uwzględnienia na liście uczestników
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_arg:=_a;
_par:=_arg.TEST_PAR;
_wnu:=_par.WNIOSEK;

{? _wnu.NIE_AKTU='T' & PPK_UCZ.AKTYWNY<>'T'
|| return(0)
?};

_jest:=0;
PPK_WNU.cntx_psh();
PPK_WNU.index('UCZ_OD');
PPK_WNU.prefix(_arg.PPK_UCZ);
:: wniosek o blokadę na podstawie art. 25
{? _jest=0 & _wnu.NIE_JEST='T' & PPK_WNU.find_tab(,
      'PPK_WRD','SYMBOL','=',_par.SYMBOL,
      'DATA',,'<=',_wnu.DATA
   )
|| _jest:=1;
   _data:=PPK_WNU.DATA;
:: zniesienie blokady na podstawie art. 25
   {? PPK_WNU.find_tab(,'PPK_WRD','SYMBOL','=','WB25W','DATA',,'>',_data)
   || _jest:=0
   ?}
?};
:: złożono deklarację rezygnacji z wpłat
{? _jest=0 & _wnu.NIE_BLOK='T' & PPK_WNU.find_tab(,
      'PPK_WRD','SYMBOL','=','DRZW',
      'DATA',,'<=',_wnu.DATA
   )
|| _jest:=1;
   _data:=PPK_WNU.DATA;
:: wznowienie automatyczne lub na wniosek
   {? PPK_WNU.find_tab(,'PPK_WRD','SYMBOL','=','WODW','DATA',,'>',_data) |
      PPK_WNU.find_tab(,'PPK_WRD','SYMBOL','=','AWW','DATA',,'>',_data)
   || _jest:=0
   ?}
?};
:: złożono deklarację rezygnacji z wpłat
{? _jest=0 & _wnu.NIE_WYPL='T' & PPK_WNU.find_tab(,
      'PPK_WRD','SYMBOL','=','WS60',
      'DATA',,'<=',_wnu.DATA
   )
|| _jest:=1
?};
PPK_WNU.cntx_pop();

_jest=0


\wb25_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Akcja "Wycofanie blokady wpłat (art. 25)" okienek tabeli PPK_UCZ.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('wb25_1','ppk_ucz');
~~


\wb25_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Swobodne wprowadzenie wniosków "Wycofanie blokady wpłat (art. 25)".
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: ustaw parametry edytora
_wnu:=exec('gr_param','ppk_wnu');
_wnu.SYMBOL:='WB25W';
_wnu.EXT_TAB:=spli_str(
   'NIE_AKTU|STRING[1]|%1|'
   'NIE_JEST|STRING[1]|%2|'
   'NIE_BLOK|STRING[1]|%3|'
   'NIE_WYPL|STRING[1]|%4'[
      'aktualnie nieaktywnego'@,
      'jeśli nie wprowadzono blokady z art. 25'@,
      'gdy złożył deklarację rezygnacji z wpłat'@,
      'któremu wypłacono środki po 60 roku życia'@
   ],'|'
);
_wnu.EXT_VAL:="
   _a.NIE_AKTU:='N';
   _a.NIE_JEST:='T';
   _a.NIE_BLOK:='T';
   _a.NIE_WYPL:='T';
   ~~
";
_wnu.EXT_WND:="
   _a.win_efld(_b,AH,'H',,,,,,'Pomiń uczestnika:'@);
   _a.win_efld(_b,,'NIE_AKTU',,,,,,,,
      'Pomiń uczestnika aktualnie nieaktywnego. [T/N]'@,
      'check-box',,$('''T'''),$('''N''')
   );
   _a.win_efld(_b,,'NIE_JEST',,,,,,,,
      'Pomiń uczestnika, jeśli nie wprowadzono blokady z art. 25. [T/N]'@,
      'check-box',,$('''T'''),$('''N''')
   );
   _a.win_efld(_b,,'NIE_BLOK',,,,,,,,
      'Pomiń uczestnika, gdy złożył deklarację rezygnacji z wpłat. [T/N]'@,
      'check-box',,$('''T'''),$('''N''')
   );
   _a.win_efld(_b,,'NIE_WYPL',,,,,,,,
      'Pomiń uczestnika, któremu wypłacono środki po 60 roku życia. [T/N]'@,
      'check-box',,$('''T'''),$('''N''')
   );
   ~~
";

:: ustaw parametry wybieracza
_ucz:=exec('gr_param','ppk_ucz');
_ucz.TEST_FML:="exec('wb25_wyb','ppk_ucz',_a)";
_ucz.TEST_PAR:=_wnu;

:: wprowadź wniosek dla wybranych uczestników
exec('gr_dodaj','ppk_wnu',_wnu,_ucz,"~~");
~~


\wb25_wyb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Kryterium uwzględnienia uczestnika dla wniosku WB25W.
::   WE: _a OBJECT - tablica nazwana zawierająca informacje o tworzonym wniosku
::   WY: 0/1 - wynik testu spełnienia kryterium uwzględnienia na liście uczestników
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_arg:=_a;
_par:=_arg.TEST_PAR;
_wnu:=_par.WNIOSEK;

{? _wnu.NIE_AKTU='T' & PPK_UCZ.AKTYWNY<>'T'
|| return(0)
?};

_test:=1;
PPK_WNU.cntx_psh();
PPK_WNU.index('UCZ_OD');
PPK_WNU.prefix(_arg.PPK_UCZ);
:: wniosek o wycofanie blokady na podstawie art. 25
{? _test<>0 & _wnu.NIE_JEST='T' & PPK_WNU.find_tab(,
      'PPK_WRD','SYMBOL','=','WB25B',
      'DATA',,'<=',_wnu.DATA
   )
|| _data:=PPK_WNU.DATA;
:: zniesienie blokady na podstawie art. 25
   {? PPK_WNU.find_tab(,'PPK_WRD','SYMBOL','=',_par.SYMBOL,'DATA',,'>',_data)
   || _test:=0
   ?}
|| _test:=0
?};
:: złożono deklarację rezygnacji z wpłat
{? _test<>0 & _wnu.NIE_BLOK='T' & PPK_WNU.find_tab(,
      'PPK_WRD','SYMBOL','=','DRZW',
      'DATA',,'<=',_wnu.DATA
   )
|| _test:=0;
   _data:=PPK_WNU.DATA;
:: wznowienie automatyczne lub na wniosek
   {? PPK_WNU.find_tab(,'PPK_WRD','SYMBOL','=','WODW','DATA',,'>',_data) |
      PPK_WNU.find_tab(,'PPK_WRD','SYMBOL','=','AWW','DATA',,'>',_data)
   || _test:=1
   ?}
?};
:: złożono deklarację rezygnacji z wpłat
{? _test<>0 & _wnu.NIE_WYPL='T' & PPK_WNU.find_tab(,
      'PPK_WRD','SYMBOL','=','WS60',
      'DATA',,'<=',_wnu.DATA
   )
|| _test:=0
?};
PPK_WNU.cntx_pop();

_test<>0


\wb25_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Uzupełnienie wniosku WB25W.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\umo_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła przed akcją "Wybierz umowę" okienek tabeli PPK_UCZ.
::   WE:
::   WY: 0/1 - umowa nie została wskazana/wybrano inną umowę
::----------------------------------------------------------------------------------------------------------------------
exec('wyb_umo','ppk')


\umo_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła po akcji "Wybierz umowę" okienek tabeli PPK_UCZ.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_wnd:=_par.wnd.main;
grp_disp(PPK_UCZ,_wnd,1);
~~


\adr_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Adresy" menu okienek tabeli PPK_UCZ.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: po ustaleniach realizacja przez dedykowany kod zamiast wywołania czynności
OS_ADRES.cntx_psh();
OS_ADRES.index('RODZAJ');
OS_ADRES.prefix(PPK_UCZ.OSOBA);
OS_ADRES.index('OD');
OS_ADRES.prefix(PPK_UCZ.OSOBA);

OS_ADRES.win_sel('SLO');
OS_ADRES.actions('SLO','dpu:d');
OS_ADRES.win_edit('RED');
OS_ADRES.win_patt('SZUK');

OS_ADRES.select();

OS_ADRES.actions('SLO');
OS_ADRES.cntx_pop();
1


\zal_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Załączniki" menu okienek tabeli PPK_UCZ.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('setup','ppk_zal',PPK_UCZ,PPK_UCZ.UID,,'PPK_EWI_RUCZ');
1


\rek_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji wiersza tabeli PPK_UCZ.
::   WE:
::   WY: 1 w przypadku gdy rekord jest poprawny, akronim wymaganego pola lub 0 gdy doszło do powielenia klucza.
::----------------------------------------------------------------------------------------------------------------------
_chk:=exec('_chk','ppk_ucz',-menu_txt()='popraw');
{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & _chk=0)
|| return(_chk)
?};

__KAL.rdat(PPK_UCZ.OSOBA().UR_DATA,PPK_UCZ.OD);
:: weryfikacja wieku uczestnika
{? __KAL.year<KST_PPK.LAT_MIN
:: osoba jest zbyt młoda
|| {? ~FUN.ask(
         'Osoba nie osiągnęła wymaganego wieku %1 lat.\n'
         'Czy mimo to uwzględnić ją w planie kapitałowym?'@
         [$KST_PPK.LAT_MIN]
      )
   || return(0)
   ?}

|? KST_PPK.LAT_MAX<__KAL.year
:: osoba jest za stara
|| {? ~FUN.ask(
         'Osoba przekroczyła dopuszczalny wiek %1 lat.\n'
         'Czy mimo to uwzględnić ją w planie kapitałowym?'@
         [$KST_PPK.LAT_MAX]
      )
   || return(0)
   ?}
?};

1


\umo_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Obsługa akcji "Umowy" na liście wystąpienia uczestnika jako pracownika lub zleceniobiorcy.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_f_zatr:=P.F_ZATR().KOD;
_mode:='maximized_with_title';
_title:='Umowy: %1 %2 (nr teczki: %3)'@[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,form(P.T)];

{? _f_zatr='P'
:: umowy o pracę
|| _u_com:="exec('fldComment','#field',H_UM,_a)";
   _h_com:="exec('fldComment','#field',H,_a)";
   _hum:=H_UM.mk_sel('Umowy o pracę'@,'P',,'#ppk_ucz_um',,,10,,'U');
   H_UM.win_fld(_hum,,'NUMER',,,-15,,,,,_u_com('NUMER'));
   H_UM.win_fld(_hum,,'OD',,,-10,,,,,_u_com('OD'));
   H_UM.win_fld(_hum,,'DO',,,-10,,,,,_u_com('DO'));
   H_UM.win_fld(_hum,,'RU','O',,-30,,,,,_u_com('RU'));
   H_UM.win_act(_hum,,'Szukaj');
   H_UM.win_act(_hum,,'Kolejność');
   _his:=H.mk_sel('Przebieg umowy'@,'P',,'#ppk_ucz_h',,,10,,'U');
   H.win_fld(_his,,'OD',,,-10,,,,,_h_com('OD'));
   H.win_fld(_his,,'DO',,,-10,,,,,_h_com('DO'));
   H.win_fld(_his,,'CP','CP',,-9,,,,,_h_com('CP'));
   H.win_fld(_his,,'WY',,,-6,3,,,,_h_com('WY'));
   H.win_fld(_his,,'S1',,,-10,2,,,,_h_com('S1'));
   H.win_fld(_his,,'S2',,,-10,2,,,,_h_com('S2'));
   H.win_fld(_his,,'S3',,,-10,2,,,,_h_com('S3'));
   H.win_act(_his,,'Szukaj');
   H.win_act(_his,,'Kolejność');

:: panel prezentacji umów o pracę i ich przebiegu
   _wnd:=H_UM.grp_make(_title,
::    przed wyświetleniem
      "  H.cntx_psh();
         H.index('HISTUM');
         H.fld_fml('WY','BEFORE_DISPLAY',""1"");
         1
      ",
      '#ppk_ucz_pgrp',
      10,10,
::    przy zamknięciu
      "  H.cntx_pop();
         H.fld_fml('WY','BEFORE_DISPLAY',""*"");
         1
      "
   );
:: umowy o pracę
   H_UM.grp_sel(_wnd,H_UM,_hum,,
::    po odświeżeniu
      $('grp_disp(H,\''+_his+'\')'),,,
::    wysokość
      10,,,,,
::    tryb
      _mode
   );
   H_UM.grp_splt(_wnd,,'vertical','right',',35%');
:: przebieg wybranej umowy o pracę
   H_UM.grp_sel(_wnd,H,_his,,,,,
::    wysokość
      10,
::    przed obsługą
      $('{? grp_empty(H_UM,\''+_hum+'\') '
        '|| return(\'#disable\') '
        '?};'
        'H.prefix(H_UM.ref())'
      ),,,,
::    tryb
      _mode
   );

   H_UM.cntx_psh();
   H_UM.index('OD');
   H_UM.prefix(P.ref());
   H_UM.win_sel(_wnd);
   H_UM.select();
   H_UM.cntx_pop();

   H_UM.win_del(_wnd);
   H_UM.win_del(_hum);
   H.win_del(_his)

|? _f_zatr='Z'
:: umowy cywilno-prawne
|| _u_lab:="exec('fldLabel','#field',ZC,_a)";
   _u_com:="exec('fldComment','#field',ZC,_a)";
   _r_com:="exec('fldComment','#field',RH,_a)";
   _zle:=ZC.mk_sel('Umowy cywilno-prawne'@,'P',,'#ppk_ucz_zc',,,10,,'U');
   ZC.win_fld(_zle,,'NU',,,-15,,,,,_u_com('NU'));
   ZC.win_fld(_zle,,'DZ',,,-10,,,,,_u_com('DZ'));
   ZC.win_fld(_zle,,'DU',,,-10,,,,,_u_com('DU'));
   ZC.win_fld(_zle,,'DW',,,-10,,,,,_u_com('DW'));
   ZC.win_fld(_zle,,'RU','O',,'30,0,15',,,_u_lab('RU'),,'Opis rodzaju umowy'@);
   ZC.win_fld(_zle,,'KU',,,'10,10',2,,,,_u_com('KU'));
   ZC.win_fld(_zle,,'TYP',,,-3,,,,,_u_com('TYP'));
   ZC.win_act(_zle,,'Formuła','Procentowe wysokości wpłat'@,,,
      "exec('wpl_b','ppk_pwp',ZC)",
      "exec('wpl_a','ppk_pwp')"
   );
   ZC.win_act(_zle,,'Szukaj');
   ZC.win_act(_zle,,'Kolejność');
   _rch:=RH.mk_sel('Rachunki'@,'P',,'#ppk_ucz_rh',,,10,,'U');
   RH.win_fld(_rch,,'DRA',,,-10,,,,,_r_com('DRA'));
   RH.win_fld(_rch,,'DWY',,,-10,,,,,_r_com('DWY'));
   RH.win_fld(_rch,UZ,'RH',,,-10,2,,,,'Kwota rachunku'@);
   RH.win_act(_rch,,'Szukaj');
   RH.win_act(_rch,,'Kolejność');
   RH.win_act(_rch,,'Rekord',,,,"exec('rh_bd','zlec_rh',_a)");

:: panel prezentacji umów cywilno-prawnych i rachunków
   _wnd:=ZC.grp_make(_title,
::    przed wyświetleniem
      "  RH.cntx_psh();
         RH.index('RACHUNKC');
         1
      ",
      '#ppk_ucz_zgrp',
      10,10,
::    przy zamknięciu
      "  RH.cntx_pop();
         1
      "
   );
:: umowy cywilno-prawne
   ZC.grp_sel(_wnd,ZC,_zle,,
::    po odświeżeniu
      $('grp_disp(RH,\''+_rch+'\')'),,,
::    wysokość
      10,,,,,
::    tryb
      _mode
   );
   ZC.grp_splt(_wnd,,'vertical','right',',65%');
:: rachunki wybranej umowy cywilno-prawnej
   ZC.grp_sel(_wnd,RH,_rch,,,,,
::    wysokość
      10,
::    przed obsługą
      $('{? grp_empty(ZC,\''+_zle+'\') '
        '|| return(\'#disable\') '
        '?};'
        'RH.prefix(ZC.ref())'
      ),,,,
      _mode
   );

   ZC.cntx_psh();
   ZC.index('ZLECPRZ');
   ZC.prefix(P.ref());
   ZC.win_sel(_wnd);
   UZ.DRH:=1;
   ZC.select();
   ZC.cntx_pop();

   ZC.win_del(_wnd);
   ZC.win_del(_zle);
   RH.win_del(_rch)
?};
~~


\wnd_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: "Okienko po" wszystkich okienek tabeli PPK_UCZ.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
PPK_UCZ.fld_fml('OSOBA','BEFORE_EDIT',"*");
OSOBA.f_clear();
1


\tab_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [19.22]
:: OPIS: Tabela z listą osób, w imieniu których należy odprowadzać wpłaty do PPK. Używana m.in. w \uzu_b oraz \dod_a
::   WE:
::   WY: Tabela tymczasowa
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(3,
   'NAZWISKO','STRING[30]','Nazwisko aktualne'@,
   'PIERWSZE','STRING[20]','Pierwsze imię'@,
   'PESEL','STRING[11]','Numer PESEL'@,
   'PASZPORT','STRING[20]','Seria i numer paszportu'@,
   'OSOBA','INTEGER','Wskazanie na osobę'@,
   'SK_PF','REAL','Wpłata podstawowa zatrudniający'@,
   'SK_DF','REAL','Wpłata dodatkowa zatrudniający'@,
   'SK_PU','REAL','Wpłata podstawowa uczestnik'@,
   'SK_DU','REAL','Wpłata dodatkowa uczestnik'@,
   'OD','DATE','Data rozpoczęcia'@,
   'OD_UCZ','DATE','Data przynależności'@,
   'DO_OB','DATE','Data obowiązku zapisania'@,
   'UR_DATA','DATE','Data urodzenia'@,
   'Z','STRING[1]','Zatwierdzony'@,
   'P_P','STRING[100]','Podstawa prawna/Uwagi'@,
   'ERR','STRING[100]','Opis błędu'@
)


\ppk_ucz_wer_bbfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.22]
:: OPIS: Formuła przed akcją na przycisk Operacje grupowe
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_user:=OPERATOR.USER;

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

PPK_UCZ.cntx_psh();

{? exec('fun_perm','ppk')
|| exec('xxx_grp_act','personel',_set,'PPK_GRP_ALIU','Uzupełnij listę uczestników'@,
      'Przygotowanie listy nowych uczestników PPK'@
   );
   exec('xxx_grp_act','personel',_set,'PPK_EWI_ARNW','Autozapis: Wznowienie wpłat'@,
      'Generowanie wznowień dla współpracowników, którzy zrezygnowali z uczestnictwa'@,,
      "exec('wznowienie_wplat','ppk_eml',1); ''"
   )
?};

{? exec('chk_role','#b__box',_user,'PPK_WMD_RRPL')
|| exec('xxx_grp_act','personel',_set,'PPK_WMD_RRPL','Raporty pracodawcy'@,
      'Tworzenie raportów dla instytucji finansowej'@
   )

|? exec('chk_role','#b__box',_user,'PPK_WMD_PRPL')
|| exec('xxx_grp_act','personel',_set,'PPK_WMD_PRPL','Raporty pracodawcy'@,
      'Przeglądanie raportów pracodawcy'@
   )
?};

exec('xxx_grp_act','personel',_set,'PPK_WMD_AIMP','Importuj raporty PPK'@,
   'Import raportów przygotowanych przez instytucję finansową'@
);

exec('xxx_grp_act','personel',_set,'HBN_PRZ_DPPK','Utwórz przelew wpłat'@,
   'Utworzenie polecenia przelewu wpłat dla instytucji finansowej'@,,
   "exec('hbn_prz_dppk','ppl'); ''"
);

{? exec('fun_perm','ppk')
|| _sym:='BLOKADA';
   _set.add_grp('Blokada wpłat'@,_sym);
   exec('xxx_grp_act','personel',_set,'PPK_GRP_A25B','Blokada naliczania wpłat'@,
      'Tworzenie wniosków WB25B dla grupy uczestników PPK'@,,,,_sym
   );
   exec('xxx_grp_act','personel',_set,'PPK_GRP_A25W','Wycofanie blokady wpłat'@,
      'Tworzenie wniosków WB25W dla grupy uczestników PPK'@,,,,_sym
   );
   exec('xxx_grp_act','personel',_set,'PPK_GRP_AUPO','Utwórz powiadomienia'@,
      'Tworzenie komunikatów do uczestników'@
   )
?};

_set.run('Operacje grupowe'@);

PPK_UCZ.cntx_pop();
~~


\uzu_lis_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Obsługa akcji "Uzupełnij listę" w oknach tabeli PPK_UCZ
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('np_run','#b__box','PPK_GRP_ALIU');
~~


\uzu_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Przygotowanie listy nowych uczestników, w imieniu których należy odprowadzać wpłaty do PPK.
::   WE: _a [INTEGER] - Tryb pracy (1-bez dialogów wywołany z alertu).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_alert:=var_pres('_a')=type_of(0) & _a;
_db:=date();
_d0:=date(0,0,0);
_firma:=exec('ref_firma','ustawienia');
:: Tabela z listą osób, w imieniu których należy odprowadzać wpłaty do PPK.
_TAB:=exec('tab_ucz','ppk_ucz');

:: Nie kwalifikuje nowych uczestników PPK jeżeli:
:: - nie podano daty obowiązywania ustawy o PPK,
:: - umowa o prowadzenie nie jest już aktywna.
exec('czytaj','#stalesys',,KST_PPK,'UST_OD','PRZEJ_DO');

{? KST_PPK.UST_OD=_d0
|| _txt:='W parametrach programu nie wprowadzono wartości w polu "Data objęcia przez ustawę".'@+'\n';
   _txt+='Lista uczestników nie może być uzupełniona.'@
|? PPK_UMO.DO<>_d0 & PPK_UMO.DO<_db
|| _txt:='Nie można uzupełnić listy uczestników ponieważ umowa została zakończona.'@
|? exec('jest_a05','ppk') & KST_PPK.PRZEJ_DO=_d0
|| _txt:='W parametrach programu nie wprowadzono wartości w polu "Data końca okresu przejściowego".\n'+
         'Lista uczestników nie może być uzupełniona.'@
|| _txt:=''
?};

{? +_txt
|| {? ~_alert
   || FUN.info(_txt)
   ?};
   return(_TAB)
?};

:: Utworzenie listy uczestników, których należy dopisać do nowej umowy (Art. 12 pkt 2 1)).
_next:=0;
_ppk_umo:=PPK_UMO.ref();
_ppk_dz:=PPK_UMO.PPK_UZA().DZ;
PPK_UMO.cntx_psh();
PPK_UMO.index('F_OD');
PPK_UMO.prefix(_firma);

{? PPK_UMO.size()>1
|| {? PPK_UMO.first() & PPK_UMO.ref()=_ppk_umo
   || _NEW:=sql('select PPK_UCZ.OSOBA from PPK_UCZ where PPK_UCZ.PPK_UMO=\':_a\'',$PPK_UMO.ref());
      PPK_UMO.next();
:: Uczestnicy z poprzedniej umowy zatrudnieniu w dniu poprzedzającym datę zawarcia nowej umowy (Art. 12 pkt 2 1)).
      _OLD:=
         sql('
            select PPK_UCZ.OSOBA
            from PPK_UCZ
            where PPK_UCZ.PPK_UMO=\':_a\' and PPK_UCZ.OSOBA not in (select :_b.OSOBA from :_b)
            order by 1',
            $PPK_UMO.ref(),_NEW
         );
      {? _OLD.first() & _NEW.size()=0
      || _next:=1
      ?}
   ?}
?};

PPK_UMO.cntx_pop();

:: Data kwalifikacji osób zatrudnionych do uczestnictwa w PPK, na którą zostanie przygotowana lista.
{? _next
|| _dt:=_ppk_dz+7
|| _dt:=
      {? _db<PPK_UMO.OD
      || PPK_UMO.OD
      || _db
      ?}
?};
{? ~_alert
|| undefine();
   define('DT',_dt,'Data od','Data zapisania do PPK',10,12);
   def_btn('text=%1,icon=xwin16.png:13'['OK'@],'key:F2');
   def_btn('text=%1,icon=xwin16.png:14'['Anuluj'@],'key:Esc');
   {? def_edit(
         "  {? DEFINE.DT<PPK_UMO.OD
            || FUN.emsg('Wartość w polu \"Data od\" nie może być mniejsza od daty rozpoczęcia umowy o prowadzenie.'@);
               0
            |? PPK_UMO.DO<>date(0,0,0) & DEFINE.DT>PPK_UMO.DO
            || FUN.emsg('Wartość w polu \"Data od\" nie może być większa od daty zakończenia umowy o prowadzenie.'@);
               0
            || 1
            ?}
         ",'Data zapisania do PPK'@
      )
   || _dt:=DEFINE.DT;
      undefine()
   || undefine();
      return(_TAB)
   ?}
?};

_msg:='';
{? _alert
||
:: Do alertu nie sprawdzamy uprawnień do form współpracy.
   _prac:=_zlec:=1
|| _prac:=__F_ZATR.upr('P');
   _zlec:=__F_ZATR.upr('Z');

:: Sprawdzenie uprawnień do formy współpracy P i Z.
:: Wykonanie funkcji możliwe tylko gdy użytkownik posiada uprawnienia przynajmniej do jednej z nich.
   {? ~(_prac | _zlec)
   || FUN.info('Brak uprawnień do formy współpracy P i Z.'@);
      return(_TAB)
   ?}
?};
exec('czytaj','#stalesys',_dt,KST_PPK);

:: Czy na liście znalazły się osoby przebywające na urlopach bezpłatnych:
_osZurl:=0;
:: Czy na liście znalazły się osoby z niezweryfikowaną deklaracją rezygnacji z wpłat:
_osZnzdr:=0;
:: Czy na liście znalazły się osoby przebywające na oddelegowaniu bez ZUS:
_osZodd:=0;

_TAB.cntx_psh();
_TAB.index(_TAB.ndx_tmp(,1,'OSOBA',,));
{? _next
||
:: Przygotowanie listy aktywnych uczestników z poprzedniej umowy PPK.
   {? _OLD.first()
   || {!
      |? {? OSOBA.seek(_OLD.OSOBA,)
            & exec('aktywny','ppk_ucz',OSOBA.ref(),_dt,_firma)
            & ~_TAB.find_key(#OSOBA.ref())
         || _TAB.blank(1);
            _TAB.OSOBA:=#OSOBA.ref();
            _TAB.NAZWISKO:=OSOBA.NAZWISKO;
            _TAB.PIERWSZE:=OSOBA.PIERWSZE;
            _TAB.PESEL:=OSOBA.PESEL;
            _TAB.PASZPORT:=OSOBA.PASZPORT;
            _TAB.SK_PF:=KST_PPK.SK_PF;
            _TAB.SK_DF:={? KST_PPK.SK_UWDF='S' || KST_PPK.SK_DOMDF || 0 ?};
            _TAB.SK_PU:=KST_PPK.SK_MAXPU;
            _TAB.SK_DU:=0;
            _TAB.OD:=_dt;
            _TAB.UR_DATA:=OSOBA.UR_DATA;
            _TAB.Z:='T';
            _TAB.P_P:='Art.12. ust.2. pkt 2)'@;
            _TAB.add()
         ?};
         _OLD.next()
      !}
   || _msg:='Brak brak uczestników, których można zapisać do listy.'@
   ?}
||
:: Przygotowanie listy nowych uczestników PPK.
:: Osoby zapisane jako uczestnicy PPK.
   _UCZ:=
      sql('
         select distinct PPK_UCZ.OSOBA
         from PPK_UCZ
         where PPK_UCZ.PPK_UMO=\':_a\'',
         $PPK_UMO.ref()
      );

:: Pracownicy i zleceniobiorcy wg uprawnień użytkownika.
   _UPR:=
      {? _alert
      || P.f_set(
            'OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',
            'left join F_ZATR using("P".F_ZATR,F_ZATR.REFERENCE)',
            'P.FIRMA=\''+$exec('ref_firma','ustawienia')+'\' and (F_ZATR.KOD=\'P\' or F_ZATR.KOD=\'Z\')'
         )
      || exec('dostepne_p','schemat','PPK','P,Z')
      ?};

:: Data "graniczna" - miesiąc przed automatycznym wznowieniem odprowadzania wpłat:
   _rokDt:=_dt~1;
   _mcGran:=KST_PPK.WZN_MS-1;
   _dtGran:=_d0;
   _rokSt:=2019;
   {? _rokDt>_rokSt+KST_PPK.WZN_OKR
   || _dtGran:=date(_rokSt+((_rokDt-_rokSt)%KST_PPK.WZN_OKR)*KST_PPK.WZN_OKR,_mcGran,KST_PPK.WZN_DN)
   |? _rokDt=_rokSt+KST_PPK.WZN_OKR & (_dt~2>_mcGran | (_dt~2=_mcGran & _dt~3>=KST_PPK.WZN_DN))
   || _dtGran:=date(_rokSt+KST_PPK.WZN_OKR,_mcGran,KST_PPK.WZN_DN)
   ?};
:: Osoby, które złożyły deklarację o rezygnacji z wpłat, przed datą zapisania do PPK, po dacie granicznej:
:: (osoby mogą mieć zweryfikowane tylko DRZW, zweryfikowanie WOU skutkuje założeniem uczestnika - uczestnicy
:: są wykluczani osobnym zbiorem)
:: Bierzemy deklaracje osób ze wszystkich umów - deklaracje osób obowiązują również po zmianie instytucji.
   _DEKL:=
      sql('
         select distinct PPK_WNU.OSOBA
         from PPK_WNU
         join PPK_WRD using(PPK_WNU.PPK_WRD, PPK_WRD.REFERENCE)
         where PPK_WNU.PPK_UCZ is null
            and PPK_WNU.DATA<=to_date(:_a) and PPK_WNU.WER_STAT=\'T\' and PPK_WRD.SYMBOL=\':_b\' '+
            {? _dtGran<>_d0
            || 'and PPK_WNU.DATA>=to_date(:_c)'
            || ''
            ?},
         _dt,'DRZW',_dtGran
      );

:: Pracownicy z aktywnym zatrudnieniem.
   {? _prac
   || _PRAC:=
         sql('
            select distinct P.OSOBA as OSOBA, P.REFERENCE as REF
            from P join F_ZATR
            where
               P.FIRMA=:_e and
               F_ZATR.KOD=\'P\' and P.DZA<=to_date(:_a) and (P.DZ is null or P.DZ>=to_date(:_a))'+
               {? _alert
               || ''
               || ' and P.REFERENCE in (select :_b.REF from :_b)'
               ?}+
               ' and P.OSOBA not in (select :_c.OSOBA from :_c) and P.OSOBA not in (select :_d.OSOBA from :_d)',
            _dt,_UPR,_UCZ,_DEKL,_firma
         )
   || _PRAC:=''
   ?};

:: Zleceniobiorcy z aktywną umową cywilnoprawną.
:: Pomijane świadczenia byłych pracowników, osoby zagraniczne (art.29) oraz prawa majątkowe.
   {? _zlec
   || _ZLEC:=
         sql('
            select distinct ZC_INFO.OSOBA as OSOBA, ZC.P as REF
            from ZC_INFO join ZC using (ZC_INFO.ZC,ZC.REFERENCE) join P using (ZC.P,P.REFERENCE) join F_ZATR join RU
            where
                ZC_INFO.FIRMA=:_e and
                ZC_INFO.ZUS=\'T\' and ZC_INFO.WN_ZUS=\'N\' and ZC_INFO.DU<=to_date(:_a) and ZC_INFO.DW>=to_date(:_a)
                and RU.K not in (\'7\',\'8\',\'m\')'+
               {? _alert
               || ''
               || ' and ZC.P in (select :_b.REF from :_b)'
               ?}+
               ' and ZC.OSOBA not in (select :_c.OSOBA from :_c) and ZC.OSOBA not in (select :_d.OSOBA from :_d)',
            _dt,_UPR,_UCZ,_DEKL,_firma
         )
   || _ZLEC:=''
   ?};

:: Lista kandydatów do uczestnictwa w PPK.
   _where:=
      {? _prac
      || 'P.REFERENCE in (select :_a.REF from :_a)'+
         {? _zlec
         || ' or P.REFERENCE in (select :_b.REF from :_b)'
         || ''
         ?}
      |? _zlec
      || 'P.REFERENCE in (select :_b.REF from :_b)'
      ?};

:: Czy deklaracja rezygnacji z wpłat wymaga weryfikacji:
   _werDrzw:=1;
   PPK_WRD.cntx_psh();
   PPK_WRD.index('SYMBOL');
   PPK_WRD.prefix('O','DRZW',);
   {? PPK_WRD.first()
   || _werDrzw:=(PPK_WRD.WER_WYM='T')
   ?};
   PPK_WRD.cntx_pop();

   P.cntx_psh();
   P.clear();
   P.f_clear();
   P.f_set(,,_where,_PRAC,_ZLEC);
   {? P.f_first()
   ||
:: Tabela z okresami wykonywania pracy
      _OKR:=exec('okr_tab_tmp','ppk_ucz');
:: Parametry raportów/listy uczestników:
      _PARRAP:=exec('parrap_b','ppk_uza',1);
:: Pasek postępu:
      {? ~_alert
      || exec('PROGRESS','#object');
         PROGRESS.set(P.f_size(),'\n%1'['Trwa weryfikacja kandydatów.'@])
      ?};

:: Zapisanie na listę uczestników ze względu na wiek i staż zatrudnienia
      {!
      |? {? P.OSOBA().UR_DATA<(date((_dt~1)-KST_PPK.LAT_MIN,_dt~2,{? _dt~2=2 & _dt~3=29 || 0 || _dt~3 ?}))
            &
            OSOBA.UR_DATA>(date((_dt~1)-KST_PPK.LAT_MAX,_dt~2,{? _dt~2=2 & _dt~3=29 || 0 || _dt~3 ?}))
            &
            ~_TAB.find_key(#OSOBA.ref())
         || exec('okr_prac','ppk_ucz',_OKR);
            _art134:=
::          Sprawdzenie czy osoba będzie zapisana z art. 134, t.j. czy osoba na dzień objęcia przez ustawę
::          spełnia znamiona zatrudnionej (ma umowę o pracę lub umowę zlecenie i nie przebywa na bezpł. bez przychodu):
               exec('aktywny','ppk_ucz',OSOBA.ref(),KST_PPK.UST_OD) &
               exec('zatr_url','ppk_ucz',OSOBA.ref(),KST_PPK.UST_OD) &
::             Sprawdzenie czy przebywa na oddelegowaniu bez opłacania składek ZUS:
               ~exec('czy_osoba_odd','oddelegowanie',OSOBA.ref(),KST_PPK.UST_OD) &
               {? exec('jest_a05','ppk')
::                Dodatkowo sprawdzenie czy w okresie przejściowym nie ma przerwy w zatrudnieniu,
::                co wykluczałoby zastosowanie art. 134:
               || exec('ciag_zatr','ppk_ucz',KST_PPK.UST_OD,KST_PPK.PRZEJ_DO,_OKR,0).zat
               || 1
               ?};
            _artNr:={? _art134 || 134 || 16 ?};

::          Czy na datę zapisu OSOBA spełnia znamiona zatrudnionej (nie przebywa na bezpł. bez przychodu):
            _zatrUrl:=exec('zatr_url','ppk_ucz',OSOBA.ref(),_dt);

::          Sprawdzam czy osoba jest z Art 23. (wznowienie co 4 lata), czyli czy miał DRZW już nieobowiązujące:
            {? _dtGran<>_d0 &
               sql('select PPK_WNU.DATA from PPK_WNU join PPK_WRD using(PPK_WNU.PPK_WRD, PPK_WRD.REFERENCE)
                    where PPK_WNU.OSOBA=:_a and (PPK_WNU.PPK_UCZ is null or PPK_WNU.PPK_UMO=:_b)
                       and PPK_WNU.DATA<=to_date(:_c)
                       and PPK_WNU.DATA<to_date(:_d) and PPK_WNU.WER_STAT=\'T\' and PPK_WRD.SYMBOL=\':_e\'',
                    OSOBA.ref(),PPK_UMO.ref(),_dt,_dtGran,'DRZW').size() &
               exec('aktywny','ppk_ucz',OSOBA.ref(),_dt) &
               _zatrUrl
            || _artNr:=23
            ?};

::          Zmiana daty granicznej dla art 23. na zgodną z datą zapisu z parametru:
            {? _artNr=23 & _dtGran<>_d0 & _PARRAP.UZU_MC & _PARRAP.UZU_DZ>=0
            || _dtGran:=date(_dtGran~1,_PARRAP.UZU_MC,_PARRAP.UZU_DZ)
            ?};

::          Początkowe wyliczenie daty przynależności:
            _uod:=exec('kwal2ppk','ppk_ucz',_dt,_OKR,_artNr,OSOBA.ref(),_dtGran,_PARRAP);
::          Czy osoba posiada niezweryfikowaną deklarację rezygnacji:
            _nzwDrzw:=exec('nz_drzw','ppk_ucz',OSOBA.ref(),_dt);
::          Czy na datę zapisu OSOBA spełnia znamiona zatrudnionej (nie przebywa na oddelegowaniu bez ZUS):
            _zatrOdd:=exec('zatr_odd','ppk_ucz',OSOBA.ref(),_dt);
            {? #_uod & ~(_werDrzw=0 & _nzwDrzw)
            || _osZurl+=~_zatrUrl;
               _osZnzdr+=_nzwDrzw;
               _osZodd+=~_zatrOdd;
               _TAB.blank(1);
               _TAB.OSOBA:=#OSOBA.ref();
               _TAB.NAZWISKO:=OSOBA.NAZWISKO;
               _TAB.PIERWSZE:=OSOBA.PIERWSZE;
               _TAB.PESEL:=OSOBA.PESEL;
               _TAB.PASZPORT:=OSOBA.PASZPORT;
               _TAB.SK_PF:=KST_PPK.SK_PF;
               _TAB.SK_DF:={? KST_PPK.SK_UWDF='S' || KST_PPK.SK_DOMDF || 0 ?};
               _TAB.SK_PU:=KST_PPK.SK_MAXPU;
               _TAB.SK_DU:=0;
               _TAB.OD:=_dt;

::             Czy zatrudniony na dzień podpisania umowy o prowadzenie:
               _zUrlUmo:=exec('zatr_url','ppk_ucz',OSOBA.ref(),KST_PPK.PPK_UMO().DZ);

               _TAB.OD_UCZ:=
::                Jest zatrudniony (nie przebywa na url. bezp.) na datę generowania:
                  {? _zatrUrl & _zatrOdd
::                   Jeśli data uzyskania wymaganego stażu jest różna od zerowej:
                  || {? _uod<>_d0
::                      Jeśli na datę pospiania umowy o prow. osoba spełnia znamiona zatrudnionej:
                     || {? _zUrlUmo
::                         Jeśli data uzyskania wymaganego stażu jest mniejsza niż data podpisania umowy o prow.:
                        || {? _uod<KST_PPK.PPK_UMO().DZ || KST_PPK.PPK_UMO().DZ || _uod ?}
::                         Jeśli nie to data powrotu z urlopu po dacie podpisania umowy o prow. ...
                        || _dtKurl:=exec('dt_k_url','ppk_ucz',OSOBA.ref(),KST_PPK.PPK_UMO().DZ,_dt);
::                         ... o ile jest wcześniejsza od wcześniej wyliczonej daty przynależności:
                           {? _uod<_dtKurl || _dtKurl || _uod ?}
                        ?}
                     || _uod
                     ?}
::                          Nie jest zatrudniony na datę generowania:
                  || _d0
                  ?};
::             Dodatkowe przesunięcie daty przynależności na datę faktycznego końca urlopu bezpłatnego
::             (niepełnomiesięcznego) jeżeli parametr DT_KURL jest ustawiony na T.
               {? _PARRAP.DT_KURL='T' & _TAB.OD_UCZ<>_d0   & ~_zUrlUmo
               || _TAB.OD_UCZ:=exec('fakt_k_url','ppk_ucz',OSOBA.ref(),_TAB.OD_UCZ,112,'B','standard')
               ?};
::             Dodatkowe sprawdzenie czy w wyżej wyznaczonej dacie jest zatrudniony/ma aktywną umowę zlecenie,
::             Jeśli nie - podstawiana pierwsza data z następnego zatrudnienia:
               {? _TAB.OD_UCZ<>_d0
               || _cZatr:=exec('ciag_zatr','ppk_ucz',_TAB.OD_UCZ,_TAB.OD_UCZ,_OKR,1,,1);
                  {? ~_cZatr.zat
                  || _TAB.OD_UCZ:=_cZatr.dt
                  ?};
                  obj_del(_cZatr)
               ?};

::             Data obowiązku zapisania:
               _TAB.DO_OB:=
                  {? (_artNr=134 | (_artNr=23 & _PARRAP.STAZ_23='N')) & _zatrUrl & _zatrOdd
                  || _TAB.OD_UCZ
                  |? (_zatrOdd | _zatrUrl) & _TAB.OD_UCZ<>_d0
::                   Zgodnie z Art. 16 ("...nie później niż do 10. dnia miesiąca następującego po miesiącu,
::                   w którym upłynął termin 3-miesięcy zatrudnienia...") termin upłynął przed datą przynależności:
                  || _uodPierw:=exec('staz12','ppk_ucz',_dt,_OKR,KST_PPK.ZAW_UM,OSOBA.ref(),,1);
::                   Ten warunek będzie spełniony tylko gdy numer atrybutu będzie różny od 134 i 23 dlatego _uodPierw
::                   liczone jak dla art 16...
                     {? _TAB.OD_UCZ>_uodPierw || _uodPierw:=_TAB.OD_UCZ ?};
                     exec('ucz_d_ob','ppk_ucz',_uodPierw-1,0)
                  || _d0
                  ?};
::             Dodatkowe sprawdzenie czy w wyżej wyznaczonej dacie jest zatrudniony/ma aktywną umowę zlecenie,
::             Jeśli nie - dodawany jest odpowiedni komentarz oraz data cofana do ostaniej daty aktywnej umowy:
               _obKom:='';
               {? _TAB.DO_OB<>_d0
               || _cZatrOb:=exec('ciag_zatr','ppk_ucz',_TAB.DO_OB,_TAB.DO_OB,_OKR,1,,1);
                  {? ~_cZatrOb.zat
                  || _TAB.DO_OB:=_cZatrOb.dtk;
                     _obKom:='Skrócony okres na zaw. umowy.'@
                  ?};
                  obj_del(_cZatrOb)
               ?};

               _TAB.UR_DATA:=OSOBA.UR_DATA;
               _TAB.Z:={? _zatrUrl & ~_nzwDrzw & _zatrOdd || 'T' || 'N' ?};

::             Sprawdzenie czy to nie jest osoba z poprzedniej umowy:
::             Jeśli osoba nie "wchodzi" z początkiem obecnej umowy o prowadzenie, to nie jest już rozpatrywana
::             z art. 12:
               {? _TAB.OD_UCZ=KST_PPK.PPK_UMO().DZ
               || PPK_UCZ.cntx_psh();
                  PPK_UCZ.index('AKTYWNY');
                  PPK_UCZ.prefix(OSOBA.ref(),_firma);
                  {? PPK_UCZ.first()
                  || _artNr:=12
                  ?};
                  PPK_UCZ.cntx_pop()
               ?};

::             Czy po dacie przynależności osoba posiada deklarację rezygnacji:
               _osDrwzDt:=exec('spr_wnu_po','ppk_wnu',OSOBA.ref,'DRZW',_TAB.OD_UCZ,1,1,1,1);

               _TAB.P_P:=
                  {? ~_zatrUrl
                  || 'Przebywa na urlopie bezpłatnym.'@
                  |? ~_zatrOdd
                  || 'Przebywa na oddelegowaniu bez ZUS.'@
                  |? _nzwDrzw
                  || 'Posiada niezwer. dekl. rezygnacji.'@
                  |? _osDrwzDt<>_d0
                  || 'Posiada dekl. rezygnacji %1. Zweryfikuj dane.'@[$_osDrwzDt]
                  |? _artNr=12
                  || 'Art.12. ust.2. pkt 2)'@
                  |? _artNr=134
                  || 'Art.134. ust.2.'@
                  |? _artNr=23
                  || 'Art.23. ust.6.'@
                  || 'Art.16.'@
                  ?}+' '+_obKom;

               _TAB.add()
            ?}
         ?};
         {? ~_alert || PROGRESS.next() ?};
         P.f_next()
      !};
      {? ~_alert || PROGRESS.close() ?};
      obj_del(_PARRAP)
   || _msg:='Brak nowych uczestników, za których należy odprowadzać wpłaty do PPK.'@
   ?};
   P.f_clear();
   P.cntx_pop()
?};
_TAB.cntx_pop();
_TAB.ndx_drop();

:: Wyświetlenie listy osób w imieniu, których należy odprowadzać wpłaty do PPK.
{? ~_alert
|| {? _TAB.first()
   || {? _osZurl | _osZnzdr | _osZodd
      || _kom:='Lista zawiera niezaznaczone osoby '@;
         {? _osZurl
         || _kom+='przebywające na urlopie bezpłatnym'@;
            {? _osZnzdr | _osZodd
            || _kom+='\noraz '@
            ?}
         ?};
         {? _osZnzdr
         || _kom+='posiadające niezweryfikowaną deklarację rezygnacji z wpłat'@;
            {? _osZodd
            || _kom+='\noraz '@
            ?}
         ?};
         {? _osZodd
         || _kom+='przebywające na oddelegowaniu bez opłacania składek ZUS'@
         ?};
         _kom+='.\nNależy zdecydować czy spełniają wymogi i powinny być dodane do zapisania.'@;

         FUN.emsg(_kom)
      ?};
      exec('wyswietl','ppk_ucz',_TAB)
   || _msg:='Brak nowych uczestników, za których należy odprowadzać wpłaty do PPK.'@
   ?}
?};
{? ~_alert & +_msg
|| FUN.emsg(_msg)
?};

_TAB


\okr_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Okresy pracy osoby ze stosunku pracy i umów cywilnoprawnych.
:: Dane o okresach pracy analizowane są bez ograniczenia wynikającego z uprawnień użytkownika.
::   WE: _a [TABLE] - Tabela okresów pracy osoby.
::   WY: Data końcowa uczestnictwa w PPK.
::----------------------------------------------------------------------------------------------------------------------
_OKR:=_a;
_OKR.erase();
_do:=date(1900,1,1);
_d0:=date(0,0,0);

:: Zebranie danych o okresach zatrudnienia pracownika.
P.cntx_psh();
P.index('PRACOSOB');
P.prefix(exec('firma','ustawienia'),'P',OSOBA.ref());
{? P.first()
|| {!
   |? {? P.F_ZATR().KOD='P'
      || _OKR.blank(1);
         _OKR.OSOBA:=#OSOBA.ref();
         _OKR.OD:=P.DZA;
         _OKR.DO:=P.DZ;
         _OKR.P:=#P.ref();
         _OKR.ZC:=0;
         _OKR.add();
         {? _OKR.DO=_d0 | (_do<>_d0 & _OKR.DO>_do)
         || _do:=_OKR.DO
         ?}
      ?};
      P.next()
   !}
?};
P.cntx_pop();

:: Zebranie danych o okresach trwania umów cywilnoprawnych.
:: Pomijane świadczenia byłych pracowników, osoby zagraniczne (art.29) oraz prawa majątkowe.
ZC_INFO.cntx_psh();
ZC_INFO.index('ZLECDAT');
ZC_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
{? ZC_INFO.first()
|| {!
   |? _ru:=ZC_INFO.ZC().RU().K;
      {? ZC_INFO.ZUS='T' & ZC_INFO.WN_ZUS='N' & _ru<>'7' & _ru<>'8' & _ru<>'m'
      || _OKR.blank(1);
         _OKR.OSOBA:=#OSOBA.ref();
         _OKR.OD:=ZC_INFO.DU;
         _OKR.DO:=ZC_INFO.DW;
         _OKR.P:=#ZC_INFO.ZC().P;
         _OKR.ZC:=#ZC_INFO.ref();
         _OKR.add();
         {? _OKR.DO=_d0 | (_do<>_d0 & _OKR.DO>_do)
         || _do:=_OKR.DO
         ?}
      ?};
      ZC_INFO.next()
   !}
?};
ZC_INFO.cntx_pop();
_do


\kwal2ppk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Kwalifikacja uczestnika do PPK wg stażu zatrudnienia i wieku.
::       Podstawa prawna: Ustawa z dnia 4 października 2018 r. o pracowniczych planach kapitałowych.
::       W celu uzyskania poprawnej kwalifikacji przed wywołaniem funkcji należy ustawić właściwe stałe dla PPK,
::       osobę i pracownika.
::   WE: _a [DATE] - Data sprawdzenia warunków uczestnictwa.
::       _b [TABLE] - Tabela z okresami pracy dla formy współpracy (P i Z).
::       _c [INTEGER] - Numer artykułu ustawy o PPK, na mocy którego jest czyniony zapis.
::       _d [_OSOBA] - OSOBA.ref - wskazanie na osobę
::       _e [DATE] - Data graniczna ponownego zapisu do PPK (art 23)
::       _f [OBJ] - Tablica z parametrami raportów (umowy) _PARRAP
::   WY: Jeżeli data kwalifikacji osoby różna od zerowej to kwalifikacja do uczestnictwa w PPK.
::----------------------------------------------------------------------------------------------------------------------
_wyn:=_d0:=date(0,0,0);
_dt:=_dt55:=_a;
_OKR:=_b;
_artNr:=_c;
_osoba:=_d;
_dtGran:={? var_pres('_e')=type_of(_d0) || _e || _d0 ?};
_PARRAP:={? var_pres('_f')=117 || _f || exec('parrap_b','ppk_uza',1) ?};

:: Dla art. 23 ukończenie 55lat sprawdzenie wieku odbywa się na datę o jeden dzień mniejszą
:: od wznowienia (np. 31/03/2023) zgodnie z art 9. ust 8 i 9 ustawy o PPK
{? _artNr=23 & _dtGran<>_d0
|| _dt55:=(date(_dtGran~1,KST_PPK.WZN_MS,KST_PPK.WZN_DN))-1
?};

:: Jeżeli osoba młodsza niż 55 lat:
{? OSOBA.UR_DATA>exec('dt_uk_lat','ppk_ucz',_dt55,KST_PPK.LAT_WYM,0)
|| {? _artNr=134
   || _wyn:=KST_PPK.PPK_UMO().DZ
   || _okrPopZaw:={? var_pres('POP_ZAW',KST_PPK)>0 || KST_PPK.POP_ZAW || 14 ?};
      _staz12:=_wyn:=exec('staz12','ppk_ucz',_dt,_OKR,KST_PPK.ZAW_UM,_osoba,_okrPopZaw);
      {? _artNr=23 & _dtGran<>_d0
      || {? _PARRAP.STAZ_23='N'
         || _wyn:=_dtGran
::       Zapisujemy z art. 23, ale liczymy staż jak w art. 16:
         || {? _staz12=_d0 | _staz12>_dtGran
            || _wyn:=_staz12
            || _wyn:=_dtGran
            ?}
         ?}
      ?}
   ?}
:: Ustawa z dnia 28 kwietnia 2022 r. o zasadach realizacji zadań finansowanych ze środków europejskich w perspektywie
:: finansowej 2021-2027 (Dz.U. 2022 poz. 1079)
:: wprowadziła zmianę - nie kontrolujemy już stażu w poprzednich 12 miesiącach dla osoby, która ukończyła 55 lat.
:: Osoba ukończyła 55 lat. Wysyłamy komuniat o możliwości przystąpienia:
|| exec('zap_kom','ppk_kom',_dt,'O','DUOS')
?};

_wyn


\staz12
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Ustalenie stażu pracy z 12 miesięcy wstecz od podanej daty.
::       Podstawa prawna: Ustawa z dnia 4 października 2018 r. o pracowniczych planach kapitałowych.
::  AKT: IS [12.51]
:: OPIS: Uwzględnienie okresów przebywania na urlopie bezpł. bez przychodu.
::   WE: _a [DATE] - Data sprawdzenia warunków uczestnictwa.
::       _b [TABLE] - Tabela z okresami pracy dla formy współpracy (P i Z).
::       _c [INTEGER] - Minimalna liczba miesięcy do weryfikacji okresu zatrudnienia.
::       _d [_OSOBA] - OSOBA.ref - wskazanie na osobę
::      [_e][INTEGER] - Minimalna liczba dni do weryfikacji okresu zatrudnienia. UWAGA! Podanie wartości nadpisuje _c
::      [_f][INTEGER] - Lata "w przód" sprawdzania (sprawdzenie wymaganego stażu, który dopiero wystąpi). Domyślnie 0
::   WY: Jeżeli data różna od zerowej to kwalifikacja ze względu na staż pracy w ostatnich 12 miesiącach.
::----------------------------------------------------------------------------------------------------------------------
_wyn:=_stop:=_a;
_OKR:=_b;
_limit:=_c*30;
{? var_pres('_e')=type_of(0)
|| _limit:=_e
?};
_osoba:=_d;
_latPlus:={? var_pres('_f')=type_of(0) || _f || 0 ?};

_d0:=date(0,0,0);
_rz:=_stop~1;
_mz:=_stop~2;
_dz:=_stop~3;
_start:=date(_rz-1,_mz,{? _mz=2 || {? _dz=29 || 28 || _dz ?} || _dz ?})-1;
:: 12 miesięcy poprzedzających pierwszy dzień ponownego zatrudnienia liczone zgodnie z kodeksem cywilnym,
:: np. dla ponownego zatrudnienia 12.05.2020 poprzedzające 12 miesięcy to okres 11.05.2019-11.05.2020.

:: Pzesunięcie daty _start na dzień 12 miesięcy wstecz od daty początku zatrudnienia przypadającego na datę generowania:
_M12PLUS:=tab_tmp(1,
   'OD','DATE','Data początku zatrudnienia',
   'DO','DATE','Data końca zatrudnienia'
);
:: Przepisanie z _OKR:
_OKR.cntx_psh();
{? _OKR.first()
|| {!
   |? _M12PLUS.OD:=_OKR.OD;
      _M12PLUS.DO:=_OKR.DO;
      _M12PLUS.add();

      _OKR.next()
   !}
?};
_OKR.cntx_pop();
:: Normalizacja okresów _M12PLUS:
exec('norm_okr','ppk_ucz',_M12PLUS);
:: Przypisanie daty początku badanego okresu na 12 miesięcy wstecz od początku okresu zatrudnienia:
{? _M12PLUS.find_le(_stop) & (_M12PLUS.DO=_d0 | _M12PLUS.DO>=_stop)
|| _rz:=_M12PLUS.OD~1;
   _mz:=_M12PLUS.OD~2;
   _dz:=_M12PLUS.OD~3;
   _start:=date(_rz-1,_mz,{? _mz=2 || {? _dz=29 || 28 || _dz ?} || _dz ?})-1
?};
obj_del(_M12PLUS);

:: Ograniczenie sprawdzanych lat:
_dtPocz:=date((KST_PPK.UST_OD~1)-1,1,1);
{? _start<_dtPocz
|| _start:=_dtPocz
?};

:: Tymczasowa tabela z okresami pracy danego pracownika do dalszych obliczeń:
_TMP:=tab_tmp(,
   'OD','DATE','Data początku zatrudnienia',
   'DO','DATE','Data końca zatrudnienia'
);

:: Przepisanie danych o okresach zatrudnienia osoby w ciągu 12 miesięcy wstecz od podanej daty do _TMP
:: z "obięciem" do początku i końca badanego okresu:
{? _latPlus
|| _stop:=date((_stop~1)+_latPlus,_stop~2,_stop~3)
?};
_OKR.cntx_psh();
{? _OKR.first()
|| {!
   |? {? _OKR.OD<=_stop & (_OKR.DO=_d0 | _OKR.DO>_start)
      || _TMP.OD:={? _OKR.OD<_start || _start || _OKR.OD ?};
         _TMP.DO:={? _OKR.DO=_d0 | _OKR.DO>_stop || _stop || _OKR.DO ?};

         _TMP.add()
      ?};

      _OKR.next()
   !}
?};
_OKR.cntx_pop();

:: Normalizacja okresów _TMP:
exec('norm_okr','ppk_ucz',_TMP);

:: Odjęcie od okresów _TMP okresów przebywania na urlopie:
exec('burl_okr','ppk_ucz',_osoba,_start,_stop,_TMP);

:: Mając _TMP z "czystymi" (bez urlopów) okresami pracy sprawdzam kiedy wymagany _limit upłynął:
_nLimit:=1;
{? _TMP.first()
|| {!
   |? _nLimit:=_limit-(_TMP.DO-_TMP.OD+1);
::    Od obecnego liitu odjęto obecnie badany okres. 0 - dzień w którym upływa 90 dni, -1 dzień następny, w którym
::    należy delikwenta zakwalifikować do PPK.
      {? _nLimit>-1
      || _limit:=_nLimit
      || _wyn:=_TMP.OD+_limit
      ?};

      _nLimit>-1 & _TMP.next()
   !}
?};
:: Nie osiągnięto tyle dni pracy w _TMP aby wyzerować limit i przejść do dnia następnego:
{? _nLimit>-1 || _wyn:=_d0 ?};
obj_del(_TMP);

_wyn


\wyswietl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Wyświetlenie nowych uczestników, za których należy odprowadzać wpłaty do PPK.
::   WE: _a [TABLE] - Tabela z danymi osób kwalifikowanych do odprowadzania wpłat do PPK.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_TAB.fld_fml('SK_DF','BEFORE_DISPLAY',"KST_PPK.SK_UWDF=\'S\'");

:: Okno wertowania.
_wer:=_TAB.mk_sel('Umowy o prowadzenie'@,,,'kandydacippk',,,,,'U',,,,,'maximized');
_TAB.win_fld(_wer,,'Z',,,,,-5,'Do zapisania'@,,'Uczestnik wybrany do zapisania do PPK [T/N]'@,2,,"'T'","'N'");
_TAB.win_fld(_wer,,'NAZWISKO',,,-30,,1,'Nazwisko'@,,'Nazwisko aktualne'@);
_TAB.win_fld(_wer,,'PIERWSZE',,,-20,,1,'Imię'@,,'Imię pierwsze'@);
_TAB.win_fld(_wer,,'UR_DATA',,,-10,,1,'Data urodzenia'@,,'Data urodzenia'@);
_TAB.win_fld(_wer,,'SK_PF',,,-5,2,1,'Wpłata podstawowa zatrudniającego'@,,'Procent wpłaty podstawowej firma'@);
_TAB.win_fld(_wer,,'SK_DF',,,-5,2,1,'Wpłata dodatkowa zatrudniającego'@,,'Procent wpłaty dodatkowej firma'@);
_TAB.win_fld(_wer,,'SK_PU',,,-5,2,1,'Wpłata podstawowa uczestnika'@,,'Procent wpłaty podstawowej uczestinka'@);
_TAB.win_fld(_wer,,'SK_DU',,,-5,2,1,'Wpłata dodatkowa uczestnika'@,,'Procent wpłaty dodatkowej uczestnika'@);
_TAB.win_fld(_wer,,'OD',,,-10,,1,'Data od'@,,'Data zgłoszenia do PPK'@);
_TAB.win_fld(_wer,,'P_P',,,-25,,1,'Podstawa prawna/Uwagi'@,,'Podstawa prawna uczestnictwa w PPK/Uwagi'@);
_TAB.win_fld(_wer,,'OD_UCZ',,,-10,,1,'Data przynależności'@,,'Data przynależności uczestnika do PPK'@);
_TAB.win_fld(_wer,,'DO_OB',,,-10,,1,'Data obowiązku zapisania'@,,'Data, do której należy zapisać uczestnika'@);

_TAB.win_act(_wer,,'Formuła','Pomiń'@@,,'Pominięcie osoby podczas zawierania umowy'@,
   "  cur_tab().Z:='N';
      cur_tab().put()
   ",,,1,,,'P'
);
_TAB.win_act(_wer,,'Formuła','Wybierz'@@,,'Wybranie osoby do zawarcia umowy'@,
   "  cur_tab().Z:='T';
      cur_tab().put()
   ",,,1,,,'W'
);
_TAB.win_act(_wer,,'Formuła','Zapisz'@@,,'Zawarcie umowy z wybranymi osobami'@,
   "  exec(\'add_ucz\',\'ppk_ucz\',cur_tab())
   ",,,,,,'Z'
);
_TAB.win_act(_wer,,'Kolejność');
_TAB.win_act(_wer,,'Rekord',,,,
   "  _TAB:=cur_tab();
      _wer:=cur_win();
      {? _TAB.sel_size()
      || _hid:='PW';
         _POM:=_TAB.sel_aget();

         {? _POM.first()
         || _TAB.cntx_psh();
            {!
            |? {? _TAB.seek(_POM.REF,,1)
               || {? _TAB.Z='N'
                  || {? _hid*'W' || _hid:=_hid-1 ?}
                  || {? _hid*'P' || _hid:=1-_hid ?}
                  ?}
               ?};
               _POM.next() & +_hid
            !};
            _TAB.cntx_pop()
         ?}
      || {? _TAB.Z='N'
         || _hid:='P'
         || _hid:='W'
         ?};
         _TAB.cntx_psh();
         _TAB.clear();
         {? ~_TAB.find_tab(1,'Z',,'=','T')
         || _hid+='Z'
         ?};
         _TAB.cntx_pop()
      ?};
      _TAB.actions_grayed(_wer,_hid)
   "
);

_TAB.win_btn(_wer,'text=%1,panel=right,align=begin'['Pomiń'@],'menu:P');
_TAB.win_btn(_wer,'text=%1,panel=right,align=begin'['Wybierz'@],'menu:W');
_TAB.win_btn(_wer,'text=%1,panel=bottom,align=end'['Zapisz'@],'menu:Z');
_TAB.win_btn(_wer,'text=%1,icon=xwin16.png:14,panel=bottom,align=end'['Anuluj'@],'key:Esc');

_TAB.win_sel(_wer);
_TAB.select();
~~


\add_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Dołączenie zakwalifikowanych osób do listy uczestników PPK.
::   WE: _a [TABLE] - Tabela z danymi osób kwalifikowanych do odprowadzania wpłat do PPK.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;

OSOBA.cntx_psh();
OSOBA.prefix();
PPK_UCZ.cntx_psh();
PPK_UCZ.prefix();
PPK_PWP.cntx_psh();
PPK_PWP.prefix();
_TAB.cntx_psh();
_TAB.index(_TAB.ndx_tmp(,1,'Z',,));
_TAB.prefix('T');

{? _TAB.first()
|| {!
   |? {? OSOBA.seek(_TAB.OSOBA,)
      || {? ~PPK_UCZ.find_tab(1,'PPK_UMO',,'=',PPK_UMO.ref(),'OSOBA',,'=',OSOBA.ref())
         || PPK_UCZ.blank();
            PPK_UCZ.FIRMA:=PPK_UMO.PPK_UZA().FIRMA;
            PPK_UCZ.OSOBA:=OSOBA.ref();
            PPK_UCZ.OD:=_TAB.OD;
            PPK_UCZ.SR:='A';
            {? PPK_UCZ.add(1)
            || PPK_UCZ.f_add();
               exec('add_pwp','ppk_ucz',_TAB);
               exec('zap_kom','ppk_kom',_TAB.OD,'U','IUCZ');
               _next:=_TAB.del()
            || _TAB.ERR:='Zapis do PPK nie powiódł się';
               _TAB.put();
               _next:=_TAB.next()
            ?}
         || _TAB.ERR:='Osoba już zapisana do PPK';
            _TAB.put();
            _next:=_TAB.next()
         ?}
      || _TAB.ERR:='Brak osoby';
         _TAB.put();
         _next:=_TAB.next()
      ?};
      _next
   !}
?};

_TAB.cntx_pop();
PPK_PWP.cntx_pop();
PPK_UCZ.cntx_pop();
OSOBA.cntx_pop();
~~


\add_pwp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Dołączenie wpłat uczestnika.
::   WE: _a [TABLE] - Tabela z danymi osób kwalifikowanych do odprowadzania wpłat do PPK.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_attr:=710;

{! _ii:=6 .. 9
|! _acr:=_TAB.fld_acr(_ii);
   _stawka:=($('_a.'+_acr))(_TAB);

   {? _stawka
   || PPK_PWP.blank();
      PPK_PWP.ZC:=null();
      PPK_PWP.OD:=_TAB.OD;
      PPK_PWP.R:=__RUB.ref(__RUB.sys_rub(_attr).RN);
      PPK_PWP.OSOBA:=PPK_UCZ.OSOBA;
      PPK_PWP.P:=null();
      PPK_PWP.REF:=$PPK_UCZ.OSOBA;
      PPK_PWP.STAWKA:=_stawka;
      PPK_PWP.SR:='A';
      PPK_PWP.add(1)
   |? _attr=711 & KST_PPK.SK_UWDF='O'
   || PPK_PWP.blank();
      PPK_PWP.ZC:=null();
      PPK_PWP.OD:=_TAB.OD;
      PPK_PWP.R:=__RUB.ref(__RUB.sys_rub(_attr).RN);
      PPK_PWP.OSOBA:=null();
      PPK_PWP.ZMIANA:='T';
      exec('add_wp2P','ppk_ucz',_TAB.OD)
   ?};
   _attr+=1
!};
~~


\aktywny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Sprawdzenie czy osoba jest zatrudniona.
::   WE: _a [REFERENCE] - Wskazanie na osobę.
::       _b [DATE] - Data sprawdzenia.
::      [_c][REFERENCE] - Wskazanie na firmę.
::   WY: (0/1) - Osoba niema/ma aktywne zatrudnienie.
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_dt:=_b;
_firma:={? var_pres('_c')=type_of(null()) || _c || exec('ref_firma','ustawienia') ?};

:: Sprawdzenie czy osoba jest aktywnym pracownikiem.
_PRAC:=sql('
   select P.OSOBA
   from P join F_ZATR
   where P.FIRMA=:_c and F_ZATR.KOD=\'P\' and P.OSOBA=:_a and P.DZA<=to_date(:_b) and
   (P.DZ is null or P.DZ>=to_date(:_b))',
   _osoba,_dt,_firma
);

:: Jeżeli nie jest aktywnym pracownikiem to sprawdzenie czy osoba ma aktywną umowę cywilnoprawną.
{? ~_PRAC.size()
|| _ZLEC:=sql('
      select ZC_INFO.OSOBA
      from ZC_INFO join ZC using (ZC_INFO.ZC,ZC.REFERENCE) join P using (ZC.P,P.REFERENCE) join F_ZATR join RU
      where
         ZC_INFO.FIRMA=:_c and F_ZATR.KOD=\'Z\' and ZC.OSOBA=:_a and RU.K not in (\'7\',\'8\',\'m\') and
         ZC_INFO.ZUS=\'T\' and ZC_INFO.WN_ZUS=\'N\' and ZC_INFO.DU<=to_date(:_b) and ZC_INFO.DW>=to_date(:_b)',
      _osoba,_dt,_firma
   );
   _ZLEC.size()
|| 1
?}


\uczestn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Sprawdzenie czy osoba jest uczestnikiem PPK.
::   WE: _a [REFERENCE] - Wskazanie na umowę.
::       _b [REFERENCE] - Wskazanie na osobę.
::   WY: (1/0) - Osoba jest/nie jest uczestnikiem PPK.
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
_ppk_umo:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
_osoba:={? var_pres('_b')=type_of(null()) || _b || return(_result) ?};

PPK_UCZ.cntx_psh();
PPK_UCZ.index('UNIQUE');
PPK_UCZ.prefix(_ppk_umo,_osoba);
{? PPK_UCZ.first() || _result:=PPK_UCZ.ref() ?};
PPK_UCZ.cntx_pop();
_result


\upr2ucze
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Uprawnienia użytkownika do osoby wg uprawnień do jednostki organizacyjnej i formy współpracy P lub Z.
::   WE: _a [REFERENCE] - Wskazanie na osobę.
::   WY: (1/0) - Użytkownik posiada uprawnienia.
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;

_TAB:=exec('dostepne_p_osoba','schemat','PPK','P,Z',,$_osoba);
_TAB.first()


\add_wp2P
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Zapisanie różnicowanej wpłaty dodatkowej finansowanej ze środków pracodawcy do aktywnych współpracowników.
::   WE: _a [DATE] - Data od kiedy współpracownik jest uczestnikiem PPK.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dt:=_a;

_add:=
   "  _stawka:=
         {? +KST_PPK.SK_FORMF
         || ($KST_PPK.SK_FORMF)(_a,_b)
         || 0
         ?};
      {? _stawka
      || PPK_PWP.P:=_b;
         PPK_PWP.REF:=$_b;
         PPK_PWP.STAWKA:=_stawka;
         PPK_PWP.SR:='A';
         PPK_PWP.add(1)
      ?}
   ";

P.cntx_psh();
P.index('PRACOSOB');

:: Pracownicy.
P.prefix(exec('firma','ustawienia'),'P',OSOBA.ref());
{? P.first()
|| {!
   |? {? P.DZ=date(0,0,0) | P.DZ>=_dt
      || _add(_dt,P.ref())
      ?};
      P.next()
   !}
?};

:: Zleceniobiorcy.
P.prefix(exec('firma','ustawienia'),'Z',OSOBA.ref());
{? P.first()
|| ZC.cntx_psh();
   ZC.index('ZLECPRZ');
   {!
   |? ZC.prefix(P.ref());
      {? ZC.find_tab(1,'DW',,'>=',_dt)
      || _add(_dt,P.ref())
      ?};
      P.next()
   !};
   ZC.cntx_pop()
?};

P.cntx_pop();
~~


\info_wzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Utworzenie listy uczestników PPK, którym należy wznowić naliczanie i odprowadzanie wpłat do PPK (Art.23.).
::       Na listę kwalifikowani są uczestnicy, którzy:
::       -  złożyli deklarację o rezygnacji z odprowadzania wpłat na PPK,
::       -  są aktywnymi uczestnikami PPK w dniu, w którym należy im rozpocząć dokonywanie wpłat,
::       -  w dniu, w którym należy im rozpocząć dokonywanie wpłat nie mają ukończonych 55 lat,
::       -  nie złożyli ponownie deklaracji o rezygnacji z odprowadzania wpłat,
::       -  nie złożyli wniosku o dokonywanie wpłat po wcześniejszym zadeklarowaniu rezygnacji z wpłat.
::   WE: [_a][INTEGER] - Rok sprawdzania i generowania komunikatu (generowanie nastąpi jeśli rok będzie zgodny
::                       z okresem wznawiania). Domyślnie: date()~1
::       [_b][INTEGER] - 0/1 Czy wywołanie z generowania AWW? Domyślnie 0
::       [_c][INTEGER] - 0/1 Nie twórz komunikatów. Domyślnie 0 (tworzone komunikaty gdy ich brakuje)
::       [_d][INTEGER] - 0/1 Ogranicz wiek osób do KST_PPK.LAT_WYM (55lat). Domyślnie 0 (ogranicznie do KST_PPK.LAT_MAX)
::       [_e][INTEGER] - 0/1 Pomijaj sprawdzanie wymaganego stażu. Domyślnie: 0 - nie pomijaj
::       [_f][INTEGER] - Ogranicznie rodzaju podmiotu (współpracownika):
::                         0 - wszyscy (osoby i uczestnicy) - domyślnie
::                         1 - tylko uczestnicy
::                         2 - tylko osoby
::       [_g][INTEGER] - 0/1 Czy pokazywać pasek postępu, komunikaty, itp.? Domyślnie 0 - nie pokazuj
::       [_h][INTEGER] - 0/1 Czy wywołanie z czynności serwisowej? Domyślnie 0 - nie
::   WY: Tabela z informacją o uczestnikach PPK, którym należy wznowić naliczanie wpłat.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('tab_ucz','ppk_rep');
_d0:=date(0,0,0);
_rok:={? var_pres('_a')=type_of(0) || _a || date()~1 ?};
_generowanie:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_nieKom:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_ogr55:={? var_pres('_d')=type_of(0) || _d || 0 ?};
_pomStaz:={? var_pres('_e')=type_of(0) || _e || 0 ?};
_ogrPodm:={? var_pres('_f')=type_of(0) || _f || 0 ?};
_pokaz:={? var_pres('_g')=type_of(0) || _g || 0 ?};
_service:={? var_pres('_h')=type_of(0) || _h || 0 ?};
:: Wznowienie odprowadzania wpłat od 1 kwietnia, naliczanie od 1 marca, komunikat koniec lutego (Art. 23. ust.6):
_dk:=date(_rok,2,0);
exec('czytaj','#stalesys',_dk,KST_PPK);

:: Data z jaką należy wznowić wpłaty do PPK osobom, które złożyły deklarację rezygnacji z odprowadzania tych wpłat.
:: Wznowienie należy wykonać co 4 lata (KST_PPK.WZN_OKR) rozpoczynając od roku wejścia w życie ustawy o PPK
:: (Art.23. ust.6.). Data wejścia w życie ustawy o PPK - 01/01/2019.
_dt:=
   {? _rok<>2019 & (_rok-2019)%*KST_PPK.WZN_OKR=0
   || date(_rok,KST_PPK.WZN_MS,KST_PPK.WZN_DN)
   || _d0
   ?};

PPK_UMO.cntx_psh();
{? _dt<>_d0 & exec('init','ppk_umo',_dt)<>null()
|| _firma:=exec('firma','ustawienia');

:: Ustalenie listy uczestników, którzy złożyli deklarację o zaprzestaniu odprowadzania wpłat do PPK.
:: Bierzemy deklaracje osób ze wszystkich umów - deklaracje osób obowiązują również po zmianie instytucji.
   _DRZW:=
      sql('
         select PPK_WNU.PPK_UCZ as PPK_UCZ, PPK_WNU.OD as OD, PPK_WNU.OSOBA as OSOBA, OSOBA.NAZWISKO as NAZWISKO
         from PPK_WNU
            join PPK_WRD using(PPK_WRD.REFERENCE,PPK_WNU.PPK_WRD)
            join PPK_UMO using(PPK_UMO.REFERENCE,PPK_WNU.PPK_UMO)
            join OSOBA using(OSOBA.REFERENCE,PPK_WNU.OSOBA)
         where PPK_WNU.FIRMA=:_a and PPK_WRD.SYMBOL=\':_b\'
            and PPK_WNU.OD<=to_date(:_c) and PPK_WNU.OD>to_date(:_d)
            and (PPK_WNU.PPK_UCZ is null or PPK_UMO.PPK_UZA=:_e) '+
            {? _ogrPodm=1
            || 'and PPK_WNU.PPK_UCZ is not null '
            |? _ogrPodm=2
            || 'and PPK_WNU.PPK_UCZ is null '
            || ''
            ?}+
         'order by NAZWISKO',
         _firma,'DRZW',_dk,date(_rok-KST_PPK.WZN_OKR,2,0),PPK_UMO.PPK_UZA
      );

:: Analiza aktywności oraz wieku uczestnika w dniu wznowienia dokonywania wpłat.
   {? _DRZW.first()
   || _lp:=0;
      PPK_KOM.cntx_psh();
      PPK_KOM.index('OS_KRD');
      PPK_KOM.prefix(_firma);
      PPK_UCZ.cntx_psh();
      PPK_UCZ.index('ID_APP');
      PPK_UCZ.prefix(_firma);
      OSOBA.cntx_psh();
      OSOBA.prefix();
      PPK_KRD.cntx_psh();
      PPK_UZA.cntx_psh();
      PPK_UMO.PPK_UZA();
::    Parametry:
      _PARRAP:=exec('parrap_b','ppk_uza',1);
      _powNakt:=(_PARRAP.POW_NAKT='T');
      _zapNakt:=(_PARRAP.ZAP_NAKT='T');
      _powPono:=(_PARRAP.POW_PONO='T');
      _staz23:=(_PARRAP.STAZ_23='T');
      _mcUcz:={? _PARRAP.AWW_MC || _PARRAP.AWW_MC || KST_PPK.WZN_MS-1 ?};
      _dzUcz:={? _PARRAP.AWW_DZ || _PARRAP.AWW_DZ || KST_PPK.WZN_DN ?};
      _mcOs:={? _PARRAP.UZU_MC || _PARRAP.UZU_MC || KST_PPK.WZN_MS-1 ?};
      _dzOs:={? _PARRAP.UZU_DZ || _PARRAP.UZU_DZ || KST_PPK.WZN_DN ?};
      _dtAwwPucz:=date(_rok,_mcUcz,_dzUcz);
      _dtAwwPos:=date(_rok,_mcOs,_dzOs);
      obj_del(_PARRAP);
      _okrPopZaw:={? var_pres('POP_ZAW',KST_PPK)>0 || KST_PPK.POP_ZAW || 14 ?};
:: Pasek postępu:
      {? _pokaz
      || exec('PROGRESS','#object');
         PROGRESS.set(_DRZW.size(),'\n%1'['Trwa weryfikacja kandydatów.'@])
      ?};
      {!
      |? {? OSOBA.seek(_DRZW.OSOBA)
         ||
::          Sprawdzenie uprawnień (jeśli to nie czynność serwisowa) użytkownika do osoby
::          Sprawdzenie wieku uczestnika, któremu należy wznowić naliczenie wpłat.
::          Sprawdzenie wieku odbywa się na datę o jeden dzień mniejszą od wznowienia (np. 31/03/2023)
::          zgodnie z art 9. ust 8 i 9 ustawy o PPK, nie zapisujemy jeśli przed 1 kwietnia ukończył
            {? (_service | exec('upr2ucze','ppk_ucz',OSOBA.ref())) &
               OSOBA.UR_DATA>exec('dt_uk_lat','ppk_ucz',_dt-1,{? _ogr55 || KST_PPK.LAT_WYM || KST_PPK.LAT_MAX ?})
            ||
::             Czy to osoba czy uczestnik:
               _osoba:=(~+_DRZW.PPK_UCZ);
               _dtAwwP:={? ~_osoba || _dtAwwPucz || _dtAwwPos ?};
               {? var_pres('_WNU')>100 || obj_del(_WNU) ?};
               _WNU:=sql('
                  select PPK_WNU.PPK_UCZ as PPK_UCZ, PPK_WNU.OD as OD
                  from PPK_WNU
                     join PPK_WRD using (PPK_WRD.REFERENCE,PPK_WNU.PPK_WRD)
                     join PPK_UMO using (PPK_UMO.REFERENCE,PPK_WNU.PPK_UMO)
                  where
                     PPK_WNU.OSOBA=\':_a\'
                     and PPK_WNU.OD>=to_date(:_b) and PPK_WNU.OD<=to_date(:_i)
                     and (PPK_WRD.SYMBOL=\':_c\' or PPK_WRD.SYMBOL=\':_d\' or PPK_WRD.SYMBOL=\':_g\'
                          or PPK_WRD.SYMBOL=\':_h\')
                     and ((PPK_WNU.PPK_UCZ is null and PPK_WNU.FIRMA=:_f) or
                           (PPK_WNU.PPK_UCZ is not null and PPK_UMO.PPK_UZA=:_e))',
                  _DRZW.OSOBA,_DRZW.OD,'WODW','AWW',PPK_UMO.PPK_UZA,_firma,'WS60','WOU',
::                Jeśli lista do generowania to sprawdzamy czy nie wznowił już uczestnictwa do daty generowania
::                z parametrów, a jeśli lista do komunikatu IAWW to sprawdzamy czy nie wznowił do końca poprzedniego
::                okresu PPK:
                  {? _generowanie || _dtAwwP || _dk ?}
               );
::             Sprawdzenie czy po deklaracji rezygnacji nie został złożony wniosek o dokonywanie wpłat do PPK,
::             lub wypłatę środków po 60 r. ż.
               {? ~_WNU.size()
               || _uwagi:='';
                  _uczRef:=
                     {? ~_osoba & PPK_UCZ.seek(_DRZW.PPK_UCZ)
                     || PPK_UCZ.ref()
                     || null()
                     ?};
                  _aktywny:=exec('aktywny','ppk_ucz',OSOBA.ref(),date());
::                Jest to uczestnik:
                  {? _uczRef
                  ||
::                   Jeśli wołane z generowania AWW (alert lub akcja grupowa) to uczestnika zapisujemy
::                   nawet gdy nieaktywny
                     _kwalifikuj:=(_generowanie | _powNakt | _aktywny)

::                Jest to osoba (nie uczestnik):
                  || {? _staz23 & ~_pomStaz
::                   Jeśli parametr każe nam sprawdzać staż przy art. 23, to sprawdzamy jak przy art. 16:
                     || _OKR:=exec('okr_tab_tmp','ppk_ucz');
                        exec('okr_prac','ppk_ucz',_OKR);
                        _maStaz23:=(exec('staz12','ppk_ucz',date(),_OKR,KST_PPK.ZAW_UM,OSOBA.ref(),_okrPopZaw)<>_d0);
                        obj_del(_OKR)
                     || _maStaz23:=1
                     ?};
::                   Jeśli wołane z generowania AWW (alert lub akcja grupowa) to osobę zapisujemy
::                   gdy nieaktywny zgodnie z parametrem "Automatyczny zapis nieaktywnych osób"
                     _kwalifikuj:=(_generowanie & _zapNakt) | (~_generowanie & _powNakt) | (_aktywny);
::                   Wyklucznie z listy osób, które nie osiągnęły wymaganego stażu do zapisu z art. 23 (jeśli
::                   parametr sprawdzania stażu jak w art. 16). Dla czytelności w oddzielnym warunku.
                     {? _kwalifikuj & _generowanie & ~_maStaz23
                     || _kwalifikuj:=0
                     ?}
                  ?};
                  {? _kwalifikuj
::                   Sprawdzenie czy już przygotowano informację o terminie wznowienia wpłat:
                  || _jestKom:=PPK_KOM.find_tab(,'PPK_UCZ',,'=',_uczRef,'OSOBA',,'=',OSOBA.ref(),
                                                 'PPK_KRD','SYMBOL','=','IAWW','DATA',,'=',_dk,
                                                 'PPK_UMO',,'=',PPK_UMO.ref());
::                   Parametr "Ponawiaj wysyłanie", wysłamy ponownie e-mail:
                     {? _powPono & _jestKom & ~_nieKom & exec('fun_perm','ppk')
                     || exec('wyslij','ppk_kom',PPK_KOM.ref(),0)
                     ?};

                     {? ~_jestKom & ~_nieKom
                     || _zap_kom:=exec('zap_kom','ppk_kom',_dk,{? _osoba || 'O' || 'U' ?},'IAWW');
                        {? _zap_kom.ref<>null()
                        || _jestKom:=(PPK_KOM.seek(_zap_kom.ref))
                        ?};
                        obj_del(_zap_kom)
                     ?};

                     {? _jestKom | _nieKom
                     || {? _jestKom & PPK_KOM.PRZ_DATA<>_d0
                        || _uwagi:='Wysłano'
                        ?};

                        _TAB.blank(1);
                        _TAB.LP:=_lp+=1;
                        _TAB.NAZWISKO:=OSOBA.NAZWISKO;
                        _TAB.PIERWSZE:=OSOBA.PIERWSZE;
                        _TAB.IDENTYF:=OSOBA.IDENTYF;
                        _TAB.PESEL:=OSOBA.PESEL;
                        _TAB.PASZPORT:=OSOBA.PASZPORT;
                        _TAB.DRUGIE:=OSOBA.DRUGIE;
                        _TAB.UR_DATA:=OSOBA.UR_DATA;
                        _TAB.AKT:={? _aktywny || 'Tak' || 'Nie' ?};
                        {? +OSOBA.DOWOD
                        || _typ:='Dowód';
                           _sym:=OSOBA.DOWOD
                        |? +OSOBA.PASZPORT
                        || _typ:='Paszport';
                           _sym:=OSOBA.PASZPORT
                        || _typ:='Inne';
                           _sym:=''
                        ?};
                        _TAB.TYPDOK:=_typ;
                        _TAB.SYMDOK:=_sym;
                        _dtAdr:=
                           {? _jestKom
                           || PPK_KOM.DATA
                           || _dt
                           ?};
                        _TAB.DATA_UTW:=
                           {? _jestKom
                           || PPK_KOM.DATA
                           || _d0
                           ?};
                        _TAB.RODZAJ:={? _osoba || 'Osoba' || 'Uczestnik' ?};
                        _r_adr:=spli_str('C,S,K,I',',');
                        {! _ii:=1 .. 4
                        |? _TAB.ADRES=''
                        |! _TAB.ADRES:=exec('adres','osoba',_r_adr[_ii],_dtAdr)
                        !};
                        obj_del(_r_adr);
                        &_r_adr;
                        _TAB.EMAIL:=exec('email','ppk_ucz',OSOBA.ref(),_dtAdr);
                        _TAB.OK:='N';
                        _TAB.UWAGI:=_uwagi;
                        _TAB.PRZ_POW:=
                           {? ~_jestKom | PPK_KOM.PRZ_DATA=_d0
                           || 'nie'
                           |? PPK_KOM.PRZ_LIST='T'
                           || 'e-mail'
                           |? PPK_KOM.PPK_KRD().PORTAL='T'
                           || 'portal'
                           || 'wydruk'
                           ?};
                        _TAB.DATA:={? _jestKom || PPK_KOM.PRZ_DATA || _d0 ?};
                        _TAB.add()
                     ?}
                  ?}
               ?}
            ?}
         ?};
         {? _pokaz || PROGRESS.next() ?};
         _DRZW.next()
      !};
      {? _pokaz || PROGRESS.close() ?};
      PPK_UZA.cntx_pop();
      PPK_KRD.cntx_pop();
      OSOBA.cntx_pop();
      PPK_UCZ.cntx_pop();
      PPK_KOM.cntx_pop()
   ?}
?};
PPK_UMO.cntx_pop();
_TAB


\dekl_dwt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Lista uczestników, za których należy wysłać deklarację wpłaty transferowej.
::   WE: _a [DATE] - Data sprawdzenia.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dt:=_a;
_firma:=exec('firma','ustawienia');
_lp:=0;
_uwagi:='';
_TAB:=exec('tab_ucz','ppk_rep');

:: KST_PPK.DWT_OKR - Przesunięcie raportowania o KST_PPK.DWT_OKR dni:
{? exec('jest_a11','ppk')
|| exec('czytaj','#stalesys',_dt,KST_PPK,'DWT_OKR');
   _dwtOkr:=KST_PPK.DWT_OKR
|| _dwtOkr:=0
?};

_DWT:=sql('select PPK_WNU.REFERENCE as REF '
          'from PPK_WNU join PPK_WRD using (PPK_WRD.REFERENCE,PPK_WNU.PPK_WRD) '
          'where PPK_WNU.FIRMA=:_a and PPK_WNU.PPK_RDA is null and PPK_WNU.DATA<=to_date(:_b) '
          'and (PPK_WRD.SYMBOL=\':_c\' or PPK_WRD.SYMBOL=\':_d\')',
          _firma,_dt-_dwtOkr,'DWT','DWP');

{? _DWT.first()
|| PPK_WNU.cntx_psh();
   PPK_WNU.prefix();
   {!
   |? {? PPK_WNU.seek(_DWT.REF,) & ~exec('spr_wnu','ppk_wnu',PPK_WNU.OSOBA,PPK_WNU.DATA,,'DWWT')
      || _TAB.blank(1);
         _TAB.LP:=_lp+=1;
         _TAB.NAZWISKO:=PPK_WNU.OSOBA().NAZWISKO;
         _TAB.PIERWSZE:=OSOBA.PIERWSZE;
         _TAB.OBCY:=OSOBA.OBCY;
         _TAB.IDENTYF:=OSOBA.IDENTYF;
         _TAB.PESEL:=OSOBA.PESEL;
         _TAB.PASZPORT:=OSOBA.PASZPORT;
         _TAB.DRUGIE:=OSOBA.DRUGIE;
         _TAB.UR_DATA:=OSOBA.UR_DATA;
         {? +OSOBA.DOWOD
         || _typ:='Dowód';
            _sym:=OSOBA.DOWOD
         |? +OSOBA.PASZPORT
         || _typ:='Paszport';
            _sym:=OSOBA.PASZPORT
         || _typ:=_sym:=''
         ?};
         _TAB.TYPDOK:=_typ;
         _TAB.SYMDOK:=_sym;
         _r_adr:=spli_str('C,S,K,I',',');
         {! _ii:=1 .. 4
         |? _TAB.ADRES=''
         |! _TAB.ADRES:=exec('adres','osoba',_r_adr[_ii],PPK_WNU.DATA)
         !};
         obj_del(_r_adr);
         &_r_adr;
         _TAB.EMAIL:=exec('email','ppk_ucz',OSOBA.ref(),PPK_WNU.DATA);
         _TAB.OK:='N';
         _TAB.DATA:=PPK_WNU.DATA;
         _TAB.add(1)
      ?};

      _DWT.next()
   !};
   PPK_WNU.cntx_pop()
?};
_TAB


\zatr_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Sprawdza czy w danej dacie (miesiącu z daty) dana OSOBA przebywa przez cały miesiąc na urlopie bezpłatnym
::       i nie ma przychodu (atr. 562 - Chorobowo-Wypadkowa).
::       Jeżeli osoba przebywa na urlopie bezpłatnym i nie ma w danym miesiącu przychodów
::       (atr. 562 - Chorobowo-Wypadkowa) to nie spełnia znamion osoby zatrudnionej.
::   WE: _a [_OSOBA] - OSOBA.ref
::       _b [DATE]   - data, w której sprawdzamy
::   WY: _ret [NUMBER] - 0/1, 0-nie spełnia znamion osoby zatrudnionej, 1-spełnia znamiona osoby zatrudnionej
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_rok:=_b~1;
_msc:=_b~2;
:: Tabela z okresami całomiesięcznych bezpłatnych urlopów bez przychodu osoby w danym (datą) miesiącu:
_TAB:=exec('url_b_tb','ppk_ucz',_osoba,562,112,'B',date(_rok,_msc,1),date(_rok,_msc,0),'standard');
_ret:=~_TAB.first();

_ret


\ucz_d_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Zwraca datę do któej należy zapisać uczestnika do PPK.
::       10-tego dnia następnego miesiąca po 3 miesiącach od objęcia przez ustawę lub od zatrudnienia (staż).
::       Jeśli 10-ty nie jest dniem roboczym to kolejny roboczy dzień.
::   WE: _a [DATA] - data odniesienia
::       _b [NUMBER] - 0/1 czy ma zastosowanie art. 134
::   WY: _ret [DATA] - data obowiązku zapisu uczestnika
::----------------------------------------------------------------------------------------------------------------------
_rok:=_a~1;
_mies:=_a~2;
_art134:=_b;

:: Jeśli uczestnik zapisany z art134 to datą odniesienia jest data objęcia przez ustawę:
{? _art134
|| _rok:=KST_PPK.PPK_UMO().OD~1;
   _mies:=KST_PPK.PPK_UMO().OD~2 + KST_PPK.ZAW_UM + 1
|| _mies+=1
?};

{? _mies>12
|| _rok+=_mies%12;
   _mies:=_mies%*12
?};

_ret:=date(_rok,_mies,10);
:: Dopóki _ret jest niedzielą lub świętem zwiększaj o 1 dzień.
{!
|? __KAL.all_holiday(_ret)
|! _ret+=1
!};

_ret


\okr_tab_tmp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Tabela z okresami wykonywania pracy (struktura)
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(2,
 'OSOBA','INTEGER','Wskazanie na osobę'@,
 'OD','DATE','Data rozpoczęcia'@,
 'DO','DATE','Data zakończenia'@,
 'P','INTEGER','Pracownik'@,
 'ZC','INTEGER','Umowa cywilnoprawna'@
 )


\nz_drzw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Sprawdza czy osoba posiada niezweryfikowaną deklarację rezygnacji z wpłat z datą wcześniejszą niż podana.
::   WE: _a [REF] - wskazanie na osobę
::       _b [DATE] - data do której należy sprawdzać
::   WY: _ret [NUMBER] - 0/1, 0-nie posiada niezweryfikowanej deklaracji, 1-posiada niezweryfikowaną deklarację wpłat
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_dt:=_b;
_ret:=0;

PPK_WNU.cntx_psh();
PPK_WNU.prefix();
:: Filtr na wniosek: dla konkretnej osoby, nieprzypisany do uczestnika ppk, przypisany do obecnej umowy ppk,
::                   z datą złożenia nie większą niż podana, niezweryfikowany pozytywnie,
::                   typu "Deklaracja rezygnacji z wpłat"
PPK_WNU.f_set(,
   'join PPK_WRD using(PPK_WNU.PPK_WRD, PPK_WRD.REFERENCE)',
   'PPK_WNU.OSOBA=:_a and PPK_WNU.PPK_UCZ is null and PPK_WNU.PPK_UMO=:_b and PPK_WNU.DATA<=to_date(:_c)'+
   ' and PPK_WNU.WER_STAT!=\'T\' and PPK_WRD.SYMBOL=\'DRZW\'',
   _osoba,PPK_UMO.ref(),_dt);

:: Jeżeli jest tego typu wniosek:
{? PPK_WNU.f_first() || _ret:=1 ?};
PPK_WNU.f_clear();
PPK_WNU.cntx_pop();

_ret


\url_b_tb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Zwraca tabelę z okresami przebywania przez pracownika na urlopie bezpłatnym bez posiadania przychodu (podany
::       atrybut) przez cały miesiąc. Przebywanie na urlopie bezpłatnym przez cały miesiąc jest rozstrzygane poprzez
::       dodanie do początku i końca okresu przebywania na urlopie dni ustawowo wolnych z kalendarza standardowego
::       o ile nie wykraczają poza miesiąc.
::   WE: _a [_OSOBA] - OSOBA.ref
::       _b [INTEGER]- atrybut, numer atrubutu (np. 562 - Chorobowo-Wypadkowa), którego posiadanie składników
::                     będzie warunkowało ewentualne zapisanie okresu do tabeli
::       _c [INTEGER]- atrybut, numer atrubutu (np. 112 - Bezpłatny), który będzie używany do badania nieobcności w N
::       _d [STRING] - symbol, symbol przebiegu zatrudnienia (np. 'B'), który będzie używany do badania nieobcności w H
::       _e [DATE]   - data, od której sprawdzamy
::       _f [DATE]   - data, do której sprawdzamy
::      [_g][STRING] - nazwa kalendarza wg. którego będą sprawdzane dni robocze, domyślnie: "standard"
::   WY: _TAB - tabela z okresami całomiesięcznych bezpłatnych urlopów bez przychodu w zadanym okresie.
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_dtStart:=_e;
_dtStop:=_f;
_symH:=_d;
_kalNaz:={? var_pres('_g')<>type_of('') || 'standard' || _g ?};

:: Zwracana tablica z okresami przebywania na url. bezpł.:
_TAB:=exec('okr_tab_tmp','ppk_ucz');

{? _dtStart>_dtStop
|| FUN.error('Początkowa data nie może być większa od końcowej.'@);
   return(_TAB)
?};
_mscStop:=_dtStop~2;
_rokStop:=_dtStop~1;
_mscStrt:=_dtStart~2;
_rokStrt:=_dtStart~1;
_firma:=exec('firma','ustawienia');

exec('__RUB','object');
:: Tablica z rubrykami należącymi do atrybutu przychodu:
_ATRPRZ:=__RUB.sys_rub(_b,_dtStop);
{? ~_ATRPRZ.first()
|| FUN.error('Brak rubryk w zadanym atrybucie przychodu.'@);
   return(_TAB)
?};

:: Tablica z rubrykami należącymi do atrybutu nieobecności w tabeli N:
_ATRN:=__RUB.sys_rub(_c,_dtStop);
{? ~_ATRN.first()
|| FUN.error('Brak rubryk w zadanym atrybucie nieobecności.'@);
   return(_TAB)
?};

:: Tablica elementów nazwanych, przechowująca aktualnie badany miesiąc i rok:
_bData:=obj_new('rok','msc');
_bData.rok:=_rokStrt;
_bData.msc:=_mscStrt;

:: Zapamiętanie stanu kalendarza:
_kalSt:=obj_new('naz','rok');
_kalSt.naz:=__KAL.nazwa;
_kalSt.rok:=__KAL.rok;

_err:='';

:: Przechodzę po miesiącach od daty start do daty stop:
{! |? (_bData.rok<_rokStop) | (_bData.rok=_rokStop & _bData.msc<=_mscStop)
|! {? exec('exist_c','kalendarz',__KAL,_bData.rok,,1)
   || _dniNb:=0;
      _przych:=0;
:: Ustawienie kalendarza na podany parametrem oraz rok odpowiadający aktualnie badanemu:
      __KAL.set_cal(_kalNaz,_bData.rok);
:: Sprawdzam czy w danym miesiącu występuje okreslony atrybutem składnik:
      O.cntx_psh();
      O.index('LISTYUBZ');
      O.prefix(_firma,_bData.rok,_bData.msc);
      LS.cntx_psh();
:: Przechodzę po listach płac z danego miesiąca:
      _loop:=O.first();
      {!
      |? _loop
      |! LS.use(-O.LT);
         LS.index('OSOBAKOD');
::    Przechodzę po rubrykach atrybutu:
         _ATRPRZ.first();
         {!
         |? LS.prefix(_firma,_osoba,_ATRPRZ.RN);
            {? LS.first()
            || _przych+=LS.KW
            ?};

            _ATRPRZ.next()
         !};
         _loop:=O.next()
      !};
      LS.cntx_pop();
      O.cntx_pop();

:: Dalej sprawdzam tylko jeżeli nie było przychodu. Sprawdzam czy przez cały miesiąc osoba
:: przebywa na urlopie bezpłatnym:
      {? _przych<=0
      || N.cntx_psh();
         N.index('NIOSOBNB');
         N.prefix();
::    Maksymalna kwalifikująca data startu urlopu (czyli pierwszy dzień miesiąca):
         _maxStr:=date(_bData.rok,_bData.msc,1);
::    Maksymalna kwalifikująca data końca urlopu (czyli ostatni dzień miesiąca):
         _maxStp:=date(_bData.rok,_bData.msc,0);
::    Norma - liczba dni pracujących w danym miesiącu:
         _norm:=__KAL.w_days(_maxStr,_maxStp);

         _ATRN.first();
::    Przechodzę po rubrykach podanego atrybutu nieobecności:
         {!
         |? N.prefix('N',_firma,_osoba,_ATRN.RN);
::       Jeśli jest zapis o dacie początkowej niemniejszej niż pierwszy dzień miesiąca:
            {? N.find_ge(_maxStr)
            || {!
               |? {? N.DO<=_maxStp
                  || _dniNb+=N.NR
                  |? N.OD<=_maxStp
                  || _dniNb+=__KAL.w_days(N.OD,_maxStp)
                  ?};

                  N.next() & N.OD<=_maxStp
               !}
            ?};

            _ATRN.next()
         !};
         N.cntx_pop();

::    Jeśli w N nie było tyle roboczych dni nieobecności ile potrzeba do całego miesiąca:
         {? _dniNb<_norm
::       Sprawdzam przebywanie na urlopie przez cały miesiąc wynikające z przebiegu zatrudnienia:
         || P.cntx_psh();
            H.cntx_psh();
::       Idę po pracownikach związanych z osobą:
            P.index('OSOBA');
            P.prefix(_osoba,_firma);
            {? P.first()
            || {!
               |? H.index('_HISTKOD');
::             Idę po przebiegach. Prefiks na pracownika i symbol przebiegu:
                  H.prefix(P.ref(),_symH,);
                  {? H.first()
                  || {!
::                   Sprawdzam czy dany przebieg obejmuje badany miesiąc:
                     |? {? H.OD<=_maxStp & H.DO>=_maxStr
                        || _str:={? H.OD>_maxStr || H.OD || _maxStr ?};
                           _stp:={? H.DO<_maxStp || H.DO || _maxStp ?};
                           _dniNb+=__KAL.w_days(_str,_stp)
                        ?};

                        H.next()
                     !}
                  ?};

                  P.next()
               !}
            ?};
            H.cntx_pop();
            P.cntx_pop()
         ?}

:: Koniec warunku na brak przychodu:
      ?};

:: Jeśli brak przychodu i robocze dni nieobecności wypełniają normę to taki miesiąc wpisujemy do tabeli wynikowej:
      {? ~_przych & _dniNb>=_norm
      || _TAB.blank();
         _TAB.OSOBA:=#_osoba;
::    Obcięcie dat początkowych i końcowych do dat startu i stopu badanego okresu:
         {? _bData.msc=_mscStrt & _bData.rok=_rokStrt
         || _TAB.OD:=_dtStart
         || _TAB.OD:=date(_bData.rok,_bData.msc,1)
         ?};
         {? _bData.msc=_mscStop & _bData.rok=_rokStop
         || _TAB.DO:=_dtStop
         || _TAB.DO:=date(_bData.rok,_bData.msc,0)
         ?};
         _TAB.add()
      ?};

:: Zwiększenie badanego miesiąca o 1:
      {? _bData.msc<12
      || _bData.msc+=1
      || _bData.rok+=1;
         _bData.msc:=1
      ?}

:: Brak kalendarza na dany rok. Zapisanie roku do błędu, zwiększenie badanego roku o 1:
   || _err+=$_bData.rok+', ';
      _bData.rok+=1;
      _bData.msc:=1
   ?}
!};
:: Przywrócenie stanu kalendarza:
__KAL.set_cal(_kalSt.naz,_kalSt.rok);
obj_del(_kalSt);
obj_del(_bData);
:: Zapisanie treści braku kalendarzy do wydruku:
{? +_err & var_pres('ppklos55')=117
|| ppklos55.err:=
      'Brak kalendarza na rok: %1. Nieobecności z tego okresu nie zostały uwzględnione w wyliczeniach.'@[_err-2]
?};

_TAB


\dt_k_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wyznacza datę dnia następnego po końcu urlopu bezpłatnego trwającego podczas podanej daty.
::   WE: _a [_OSOBA] - OSOBA.ref
::       _b [DATE]   - data, w której sprawdzamy
::       _c [DATE]   - data górnego ograniczenia, w której wiemy, że osoba już spełnia znamiona zatrudnionej
::   WY: _ret [DATE] - data dnia następnego po końcu urlopu bezpłatnego
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_dtBad:=_b;
_d0:=_ret:=date(0,0,0);

:: Tabela z okresami całomiesięcznych bezpłatnych urlopów bez przychodu osoby w danym okresie:
_TMP:=exec('url_b_tb','ppk_ucz',_osoba,562,112,'B',date(_dtBad~1,_dtBad~2,1),date(_c~1,_c~2,0),'standard');

:: Normalizacja okresów _TMP:
exec('norm_okr','ppk_ucz',_TMP);

:: Znalezienie właściwego okresu w _TMP:
{? _TMP.first()
|| {!
   |? {? _TMP.OD<=_dtBad & _TMP.DO>=_dtBad
::       Znaleźliśmy właściwy urlop:
      || _ret:=_TMP.DO+1
      ?};

      _TMP.next() & _ret=_d0
   !}
?};
obj_del(_TMP);
:: Dodatkowe zabezpieczenie (nie może być data zerowa):
{? _ret=_d0 || _ret:=_dtBad ?};

_ret


\fakt_k_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Sprawdza czy podana data wypada w trakcie urlopu bezpłatnego. Jeżeli tak to szuka daty dzień po końcu urlopu.
::       Szuka jedynie do końca miesiąca, jeżeli nie znajdzie to zwraca podaną datę.
::   WE: _a [_OSOBA] - OSOBA.ref
::       _b [DATE]   - data, w którą sprawdzamy
::       _c [INTEGER]- atrybut, numer atrubutu (np. 112 - Bezpłatny), który będzie używany do badania nieobcności w N
::       _d [STRING] - symbol, symbol przebiegu zatrudnienia (np. 'B'), który będzie używany do badania nieobcności w H
::      [_e][STRING] - nazwa kalendarza wg. którego będą sprawdzane dni robocze, domyślnie: "standard"
::   WY: _ret [DATE] - data dnia następnego po końcu urlopu bezpłatnego
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_dtBad:=_ret:=_b;
_d0:=date(0,0,0);
_symH:=_d;
_kalNaz:={? var_pres('_e')<>type_of('') || 'standard' || _e ?};
_firma:=exec('firma','ustawienia');

:: Tablica z rubrykami należącymi do atrybutu nieobecności w tabeli N:
_ATRN:=__RUB.sys_rub(_c,_dtBad);
{? ~_ATRN.first()
|| FUN.error('Brak rubryk w zadanym atrybucie nieobecności.'@);
   return(0)
?};

:: Zapamiętanie stanu kalendarza:
_kalSt:=obj_new('naz','rok');
_kalSt.naz:=__KAL.nazwa;
_kalSt.rok:=__KAL.rok;

:: Ustawienie kalendarza na podany parametrem oraz rok odpowiadający aktualnie badanemu:
__KAL.set_cal(_kalNaz,_dtBad~1);

N.cntx_psh();
N.index('NIOSOBNB');
H.cntx_psh();
H.index('_HISTKOD');
P.cntx_psh();
P.index('OSOBA');
P.prefix(_osoba,_firma);
:: Maksymalna kwalifikująca data startu urlopu (czyli pierwszy dzień miesiąca - nieobecności w N są dzielone na mies.):
_maxStr:=date(_dtBad~1,_dtBad~2,1);
:: Maksymalna kwalifikująca data startu urlopu (czyli ostatni dzień miesiąca):
_maxStp:=date(_dtBad~1,_dtBad~2,0);

:: Główna pętla. Powtarza się po każdej zmianie, żeby wyłapać nieobcności między N, H, różnymi rubrykami z atrybutu
:: i różnymi pracownikami dla osoby w H.
{!
|? _zmiana:=0;
   _ATRN.first();
:: Przechodzę po rubrykach podanego atrybutu nieobecności:
   {!
   |? N.prefix('N',_firma,_osoba,_ATRN.RN);
::    Jeśli jest zapis o dacie początkowej niemniejszej niż pierwszy dzień miesiąca:
      {? N.find_ge(_maxStr)
      || {!
::          Znalajduję nieobecność w której mieści się nasza badana data:
         |? {? N.OD<=_dtBad & N.DO>=_dtBad
            || _dtBad:=N.DO+1;
::             Zwiększenie badanej daty do momentu dnia roboczego:
               {!
               |? __KAL.all_holiday(_dtBad)
               |! _dtBad+=1
               !};
               _zmiana:=1
            ?};

            N.next() & N.OD<=_maxStp
         !}
      ?};

      _ATRN.next()
   !};

:: Sprawdzam nieobecności w H:
   {? P.first()
   || {!
      |? H.prefix(P.ref(),_symH,);
::       Idę po przebiegach. Prefiks na pracownika i symbol przebiegu:
         {? H.last()
         || {!
::             Czy badana data mieści się w przebiegu:
            |? {? H.OD<=_dtBad & H.DO>=_dtBad
               || _dtBad:=H.DO+1;
::                Zwiększenie badanej daty do momentu dnia roboczego:
                  {!
                  |? __KAL.all_holiday(_dtBad)
                  |! _dtBad+=1
                  !};
                  _zmiana:=1
               ?};

               H.prev() & H.DO>=_maxStr
            !}
         ?};

         P.next()
      !}
   ?};
:: Warunek kontynuacji głównej pętli:
   _zmiana & _dtBad<=_maxStp
!};
P.cntx_pop();
H.cntx_pop();
N.cntx_pop();

:: Przepisanie badanej daty do zwracanej daty jeśli nie wykracza poza miesiąc:
{? _dtBad<>_ret & _dtBad<=_maxStp
|| _ret:=_dtBad
?};
:: Przywrócenie stanu kalendarza:
__KAL.set_cal(_kalSt.naz,_kalSt.rok);
obj_del(_kalSt);

_ret


\gr_wybor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wybiera uczestników. Zakłada się, że dziedzina uczestników została wcześniej ograniczona.
::   WE: _a [OBJECT] - wskazanie obiektu zwracane przez formułę exec('gr_param','ppk_ucz')
::   WY: wskazanie tablicy zawierającej:
::          WYBOR INTEGER - 0/1 - zrezygnowano/wybrano
::          LISTA TABLE - alias tabeli zawierającej listę wybranych uczestników
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

_ret:=obj_new('WYBOR','LISTA');
_ret.WYBOR:=0;
_ret.LISTA:=~~;

_BUF:=exec('gr_lista','ppk_ucz',_par.TEST_FML,_par.TEST_PAR,_par.EXT_TAB,_par.EXT_VAL);
_wnd:=exec('gr_oknow','ppk_ucz',_BUF,_par.EXT_WND);
_BUF.win_sel(_wnd);

_wnd:=exec('gr_oknos','ppk_ucz',_BUF);
_BUF.win_patt(_wnd);

{? _BUF.select()
|| _ret.WYBOR:=1;
   _ret.LISTA:=_BUF
?};

_ret


\gr_param
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy tablicę parametrów wywołania wybieracza.
::   WE:
::   WY: wskazanie tablicy nazwanej o strukturze:
::       TEST_FML [FORMULA/STRING] - treść formuły warunku umieszczenia uczestnika na liście do wyboru
::       TEST_PAR [ANY] - parametr formuły warunkowego umieszczenia uczestnika na liście
::       EXT_TAB [OBJECT] - wskazanie tablicy zawierającej definicje dodatkowych kolumn
::       EXT_VAL [FORMULA/STRING] - treść formuły uzupełniającej dodatkowe kolumny
::       EXT_WND [FORMULA/STRING] - treść formuły wstawiającej dodatkowe kolumny
::       OBJ [ANY] - dane dowolnego przeznaczenia
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new(
:: parametry wejściowe
   'TEST_FML','TEST_PAR','EXT_TAB','EXT_VAL','EXT_WND',
:: parametry wewnętrzne
   'OBJ'
);

_par.TEST_FML:="1";
_par.TEST_PAR:=~~;
_par.EXT_TAB:=~~;
_par.EXT_VAL:="~~";
_par.EXT_WND:="~~";
_par.OBJ:=~~;

_par


\gr_lista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przygotowuje listę uczestników do wyboru. Zakłada się, że dziedzina uczestników została wcześniej ograniczona.
::   WE: _a [FORMULA/STRING] - treść formuły warunku umieszczenia uczestnika na liście do wyboru
::       _b [ANY] - parametr dla formuły warunkowego umieszczenia uczestnika na liście
::       _c [OBJECT] - wskazanie tablicy zawierającej definicje dodatkowych kolumn
::       _d [FORMULA/STRING] - treść formuły uzupełniającej dodatkowe kolumny
::   WY: alias tabeli tymczasowej lub ~~ jeśli nie udało się jej utworzyć
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_cnd:=
:: warunek umieszczenia uczestnika na liście
   {? var_pres('_a')=type_of('') || $_a
   |? var_pres('_a')=type_of("") || _a
   || "1"
   ?};
_obj:=
:: wartość przekazywana do formuły
   {? var_pres('_b')>0 || _b
   || ~~
   ?};
_col:=
:: dodatkowe kolumny
   {? var_pres('_c')>100
   || _c
   || ~~
   ?};
_ext:=
:: uzupełnienie dodatkowych kolumn
   {? var_pres('_d')=type_of('') || $_d
   |? var_pres('_d')=type_of("") || _d
   || "~~"
   ?};

:: utwórz tabelę wyboru uczestników
_BUF:=exec('gr_bufor','ppk_ucz',_col);

_first:=
   {? PPK_UCZ.f_active()<>0
   || "PPK_UCZ.f_first()"
   || "PPK_UCZ.first()"
   ?};
_next:=
   {? PPK_UCZ.f_active()<>0
   || "PPK_UCZ.f_next()"
   || "PPK_UCZ.next()"
   ?};

:: parametry doboru uczestnika
_par:=obj_new('PPK_UCZ','OSOBA','TEST_PAR');
_par.TEST_PAR:=_obj;

OSOBA.cntx_psh();
OSOBA.prefix();
PPK_UCZ.cntx_psh();
_base:=PPK_UCZ.ref();
_size:=
   {? PPK_UCZ.f_active()<>0
   || PPK_UCZ.f_size()
   || PPK_UCZ.size()
   ?};
_cnt:=0;
_loop:=_first();
{!
|? _loop
|! progress(100*(_cnt+=1)/_size,'Trwa przygotowywanie listy uczestników...'@,FUN.TYT);
   _par.PPK_UCZ:=PPK_UCZ.ref();
   _par.OSOBA:=PPK_UCZ.OSOBA;
   {? _cnd(_par)
   || PPK_UCZ.OSOBA();
      _BUF.blank();
::    dane osobowe
      _BUF.NAZWISKO:=OSOBA.NAZWISKO;
      _BUF.PIERWSZE:=OSOBA.PIERWSZE;
      _BUF.PESEL:=OSOBA.PESEL;
      _BUF.NIP:=OSOBA.NIP;
      _BUF.UR_DATA:=OSOBA.UR_DATA;
      _BUF.PLEC:=OSOBA.PLEC;
      _BUF.OBCY:=OSOBA.OBCY;
      _BUF.DOWOD:=OSOBA.DOWOD;
      _BUF.PASZPORT:=OSOBA.PASZPORT;
      _BUF.DRUGIE:=OSOBA.DRUGIE;
      _BUF.RODOWE:=OSOBA.RODOWE;
::    dane uczestnika
      _BUF.OD:=PPK_UCZ.OD;
      _BUF.DO:=PPK_UCZ.DO;
      _BUF.SR:=PPK_UCZ.SR;
      _BUF.ZG:=PPK_UCZ.ZG;
      _BUF.AKTYWNY:=PPK_UCZ.AKTYWNY;
      _BUF.NR_RACH:=PPK_UCZ.NR_RACH;
      _BUF.ID_APP:=PPK_UCZ.ID_APP;
      _BUF.ID_PPK:=PPK_UCZ.ID_PPK;
::    kolumny techniczne
      _BUF.OSOBA:=$PPK_UCZ.OSOBA;
      _BUF.PPK_UCZ:=$PPK_UCZ.ref();
::    wybór i kolumny dodatkowe
      _BUF.WYBRANY:='N';
      _ext(_BUF,PPK_UCZ.ref(),PPK_UCZ.OSOBA);
::    dodaj
      _BUF.add()
   ?};
   _loop:=_next()
!};
PPK_UCZ.cntx_pop();
OSOBA.cntx_pop();
prgs_clr();

{? PPK_UCZ.f_active()
|| PPK_UCZ.f_seek(_base)
|| PPK_UCZ.seek(_base)
?};

_BUF


\gr_bufor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy alias tabeli tymczasowej zawierającej informacje o wyborze uczestników.
::   WE: _a [OBJECT] - wskazanie tablicy zawierającej definicje dodatkowych kolumn
::   WY: alias tabeli tymczasowej lub ~~ jeśli nie udało się jej utworzyć
::----------------------------------------------------------------------------------------------------------------------
_fml:="tab_tmp(3,
:: dane osobowe
   'NAZWISKO','STRING[30]','Nazwisko'@,
   'PIERWSZE','STRING[20]','Imię'@,
   'PESEL','STRING[11]','PESEL'@,
   'NIP','STRING[13]','NIP'@,
   'UR_DATA','DATE','Data urodzenia'@,
   'PLEC','STRING[1]','Płeć'@,
   'OBCY','STRING[1]','Obcokrajowiec'@,
   'DOWOD','STRING[11]','Dowód osobisty'@,
   'PASZPORT','STRING[20]','Paszport'@,
   'DRUGIE','STRING[20]','Drugie imię'@,
   'RODOWE','STRING[30]','Nazwisko rodowe'@,
:: dane uczestnika
   'OD','DATE','Data zawarcia umowy'@,
   'DO','DATE','Data zakończenia'@,
   'SR','STRING[1]','Sposób rejestrowania'@,
   'ZG','STRING[1]','Zgłoszony'@,
   'AKTYWNY','STRING[1]','Aktywny'@,
   'NR_RACH','STRING[50]','Numer rachunku'@,
   'ID_APP','STRING[30]','Identyfikator wewnętrzny'@,
   'ID_PPK','STRING[30]','Identyfikator w ewidencji'@,
:: kolumny techniczne
   'OSOBA','STRING[16]','Dane osobowe'@,
   'PPK_UCZ','STRING[16]','Uczestnik PPK'@,
   'DANE','SYS_MEMO','Dodatkowe dane'@,
:: wybór, informacje i kolumny dodatkowe
   'WYBRANY','STRING[1]','Wybrany'@,
   'STATUS','STRING[20]','Status'@,
   'INFO','SYS_MEMO','Komentarz'@
";

{? var_pres('_a')>=100
|| _str:=type_of('');
   _def:=_a;
   _len:=obj_len(_def);
   {! _ii:=1.._len
   |! _fml+=',';
      {? var_pres('['+$_ii+']',_def)=_str
      || _fml+='\''+_def[_ii]+'\''
      ?}
   !}
?};

_fml+=")";

($_fml)()


\gr_oknow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy okienko wertowania tabeli tymczasowej zawierającej informacje o wyborze uczestników.
::   WE: _a TABLE - alias tabeli tymczasowej zawierającej listę uczestników do wyboru
::       _b [FORMULA/STRING] - treść formuły wstawiającej dodatkowe kolumny, wywoływanej z argumentami: _a alias tabeli,
::          _b akronim okienka
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;
_ext:=
:: dodatkowe kolumny
   {? var_pres('_b')=type_of('') || $_b
   |? var_pres('_b')=type_of("") || _b
   || ""
   ?};

:: okno wyboru uczestników
_wnd:=_BUF.mk_sel('Uczestnicy planu'@,'P',0,'#gr_ppk_uczw',,,,,'U',,,,,'html_maximized');

:: kolumny stałe
_BUF.win_fld(_wnd,,'WYBRANY',,,-3,,,,,'Wybrany [T/N]'@,2,,"'T'","'N'");
_BUF.win_fld(_wnd,,'NAZWISKO',,,-30,,,,,MS.comment(OSOBA,'NAZWISKO'));
_BUF.win_fld(_wnd,,'PIERWSZE',,,-20,,,,,MS.comment(OSOBA,'PIERWSZE'));
_BUF.win_fld(_wnd,,'PESEL',,,-11,,,,,MS.comment(OSOBA,'PESEL'));
_BUF.win_fld(_wnd,,'UR_DATA',,,-10,,,,,MS.comment(OSOBA,'UR_DATA'));
_BUF.win_fld(_wnd,,'OD',,,-10,,,,,MS.comment(PPK_UCZ,'OD'));
_BUF.win_fld(_wnd,,'SR',,,-3,,,,,MS.comment(PPK_UCZ,'SR'));
_BUF.win_fld(_wnd,,'ZG',,,-3,,,,,MS.comment(PPK_UCZ,'ZG'),2,,"'T'","'N'");
_BUF.win_fld(_wnd,,'AKTYWNY',,,-3,,,,,MS.comment(PPK_UCZ,'AKTYWNY'),2,,"'T'","'N'");
:: dodatkowe kolumny
_ext(_BUF,_wnd);

:: obsługa listy uczestników
_BUF.win_act(_wnd,,'Formuła','Wybierz'@,,,"cur_tab(1,1).WYBRANY:='T'","cur_tab(1,1).put()",,1);
_BUF.win_act(_wnd,,'Formuła','Pomiń'@,,,"cur_tab(1,1).WYBRANY:='N'","cur_tab(1,1).put()",,1);
_BUF.win_act(_wnd,,'Formuła','Dalej'@,,,"sel_exit()",,,,,,,,'target=window');
_grp:='Grupa'@;
_dep:='z Jednostki organizacyjnej'@;
_pos:='zatrudnionych na Stanowisku'@;
_BUF.win_act(_wnd,,'Menu',_grp,,,,,,,,,,,'target=window');
_sub:='Wybierz'@;
_pth:='%1,%2'[_grp,_sub];
_BUF.win_act(_wnd,,'Menu',_sub,_grp);
_BUF.win_act(_wnd,,'Formuła',_dep,_pth,,"exec('gr_grupa','ppk_ucz','UD_SKL','T')");
_BUF.win_act(_wnd,,'Formuła',_pos,_pth,,"exec('gr_grupa','ppk_ucz','STN','T')");
_sub:='Pomiń'@;
_pth:='%1,%2'[_grp,_sub];
_BUF.win_act(_wnd,,'Menu',_sub,_grp);
_BUF.win_act(_wnd,,'Formuła',_dep,_pth,,"exec('gr_grupa','ppk_ucz','UD_SKL','N')");
_BUF.win_act(_wnd,,'Formuła',_pos,_pth,,"exec('gr_grupa','ppk_ucz','STN','N')");
_BUF.win_act(_wnd,,'Formuła','Zatrudnienie'@,,,"
   {? PPK_UCZ.seek(cur_tab(1,1).PPK_UCZ)
   || P.cntx_psh();
      P.prefix();
      _p_upr:=exec('q_p_upr','ppk_ucz',PPK_UCZ.OSOBA);
      exec('filtr_p','ppk_ucz',PPK_UCZ.OSOBA,_p_upr);
      _wnd:=exec('sel_p','ppk_ucz');
      P.win_sel(_wnd);
      P.select();
      P.f_clear();
      P.cntx_pop();
      P.win_del(_wnd)
   ?}
");
_BUF.win_act(_wnd,,'Rekord',,,,"
   {? _a=0 || return() ?};
   PPK_UCZ.seek(cur_tab(1,1).PPK_UCZ,,1);
   _TAB:=cur_tab(1,1);
   _aid:=
      {? _TAB.sel_size()>0 || ''
      |? _TAB.WYBRANY='T'  || 'W'
      |? _TAB.WYBRANY='N'  || 'P'
      || 'WPD'
      ?};
   _TAB.cntx_psh();
   {? ~_TAB.find_tab(,'WYBRANY',,'=','T')
   || _aid+='D'
   ?};
   _TAB.cntx_pop();
   _TAB.actions_grayed(cur_win(1,1),_aid)
");
exec('gr_akcje','ppk_ucz',_BUF,_wnd);
:: przyciski dla głównych akcji okienka
_BUF.win_btn(_wnd,'text=%1'['Wybierz'@],'menu:W');
_BUF.win_btn(_wnd,'text=%1'['Pomiń'@],'menu:P');
_BUF.win_btn(_wnd,'text=%1'['Dalej'@],'menu:D');

_wnd


\gr_oknor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy okienko raportu z wykonania operacji grupowej.
::   WE: _a TABLE - alias tabeli tymczasowej zawierającej listę uczestników
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;

:: okno raportu wykonania grupowej rejestracji wniosków
_wnd:=_BUF.mk_sel('Raport wykonania'@,'P',0,'#gr_ppk_uczr',,,,,'U',,,,,'html_maximized');

:: siatka danych
_BUF.win_fld(_wnd,,'STATUS',,,-10,,,,,'Status %1/%2/%3/%4'@['sukces'@,'błąd'@,'ostrzeżenie'@,'nieznany'@]);
_BUF.win_fld(_wnd,,'NAZWISKO',,,-30,,,,,MS.comment(OSOBA,'NAZWISKO'));
_BUF.win_fld(_wnd,,'PIERWSZE',,,-20,,,,,MS.comment(OSOBA,'PIERWSZE'));
_BUF.win_fld(_wnd,,'PESEL',,,-11,,,,,MS.comment(OSOBA,'PESEL'));
_BUF.win_fld(_wnd,,'UR_DATA',,,-10,,,,,MS.comment(OSOBA,'UR_DATA'));
_BUF.win_fld(_wnd,,'OD',,,-10,,,,,MS.comment(PPK_UCZ,'OD'));
_BUF.win_fld(_wnd,,'SR',,,-3,,,,,MS.comment(PPK_UCZ,'SR'));
_BUF.win_fld(_wnd,,'ZG',,,-3,,,,,MS.comment(PPK_UCZ,'ZG'),2,,"'T'","'N'");
_BUF.win_fld(_wnd,,'AKTYWNY',,,-3,,,,,MS.comment(PPK_UCZ,'AKTYWNY'),2,,"'T'","'N'");
_BUF.win_fld(_wnd,,'INFO',,,-50,,,,,'Dodatkowe informacje'@);

_wnd


\gr_oknos
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Tworzy okienko wzorca tabeli tymczasowej zawierającej informacje o wyborze uczestników.
::   WE: _a TABLE - alias tabeli tymczasowej zawierającej listę uczestników do wyboru
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;

:: utwórz okno wyszukiwania uczestnika
_wnd:=_BUF.mk_edit('Uczestnik'@,,'#gr_ppk_uczs');
_len:=MS.fld_len(OSOBA,'NAZWISKO');
_BUF.win_esep(_wnd,'Dane podstawowe'@);
_BUF.win_efld(_wnd,,'NAZWISKO',,,_len,,,,,MS.comment(OSOBA,'NAZWISKO'));
_BUF.win_efld(_wnd,,'PIERWSZE',,,_len,,,,,MS.comment(OSOBA,'PIERWSZE'));
_BUF.win_efld(_wnd,,'PESEL',,,_len,,,,,MS.comment(OSOBA,'PESEL'));
_BUF.win_efld(_wnd,,'OD',,,,,,,,MS.comment(PPK_UCZ,'OD'));
_BUF.win_efld(_wnd,,'AKTYWNY',,,,,,,,MS.comment(PPK_UCZ,'AKTYWNY'),
   'check-box','left_label=1,check_label=%1'['Uczestnik jest współpracownikiem'@],
   "'T'","'N'","''"
);
_BUF.win_esep(_wnd,'Ewidencja uczestników'@);
_BUF.win_efld(_wnd,,'ID_APP',,,_len,,,,,MS.comment(PPK_UCZ,'ID_APP'));
_BUF.win_efld(_wnd,,'ID_PPK',,,_len,,,,,MS.comment(PPK_UCZ,'ID_PPK'));
_BUF.win_efld(_wnd,,'NR_RACH',,,_len,,,,,MS.comment(PPK_UCZ,'NR_RACH'));
_BUF.win_efld(_wnd,,'ZG',,,,,,,,MS.comment(PPK_UCZ,'ZG'),
   'check-box','left_label=1,check_label=%1'['Uczestnik zgłoszony do instytucji'@],
   "'T'","'N'","''"
);
:: dodaj standardowe przyciski
exec('ok_esc','#window',_BUF,_wnd);

_wnd


\gr_akcje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.14]
:: OPIS: Dodaje do okienka wyboru uczestników domyślne akcje: Szukaj, Kolejność, Wyświetl, Okienko.
::   WE: _a TABLE - alias tabeli tymczasowej zawierającej listę uczestników do wyboru
::       _b STRING - akronim okienka wertowania listy uczestników do wyboru
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;
_wnd:=_b;

_BUF.win_act(_wnd,,'Szukaj');
_BUF.win_act(_wnd,,'Kolejność');
_BUF.win_act(_wnd,,'Wyświetl',,,,"
   _TAB:=cur_tab(1,1);
   {? $PPK_UCZ.OSOBA<>_TAB.PPK_UCZ
   || {? ~PPK_UCZ.seek(_TAB.PPK_UCZ,,1)
      || FUN.emsg('Nie znaleziono zapisu \"%1\".'@[_TAB.PPK_UCZ]);
         return()
      ?}
   ?};
   PPK_UCZ.display()
");

_wb:="
   PPK_UCZ.cntx_psh();
   PPK_UCZ.win_edit('RED');
   1
";
_wa:="PPK_UCZ.cntx_pop()";
_BUF.win_act(_wnd,1,'Okienko',,,,_wb,_wa);
_BUF.win_act(_wnd,0,'Okienko',,,,_wb,_wa);

~~


\gr_grupa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Obsługa akcji menu "Grupa" wybieracza uczestników.
::   WE: _a [STRING] - identyfikator akcji grupowej: UD_SKL, STN
::       _b [STRING] - wartość do ustawienia w kolumnie WYBRANY
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_aid:=_a;
_val:=_b;

_BUF:=cur_tab(1,1);
_ref:=_BUF.ref();

_SEL:=~~;

{? _aid='UD_SKL'
:: w jednostce organizacyjnej
|| {? (_skl:=exec('ud_def_wybierz','schemat',,,'PPK',,,1).UD_SKL)=null
   || return()
   ?};
:: osoby z zatrudnieniem w wybranej jednostce
   _SEL:=sql('select distinct P.OSOBA as OSOBA from P where P.WYDZIAL=:_a',_skl)

|? _aid='STN'
:: na stanowisku
|| _wnd:=STN.mk_sel('Stanowiska'@,'P',0,'#ppk_ucz_grupa',,,,,'U');
   STN.win_fld(_wnd,,'ST');
   STN.win_act(_wnd,,'Formuła','Wybierz'@,,,"sel_exit()",,1);
   STN.win_act(_wnd,,'Szukaj');
   STN.win_act(_wnd,,'Kolejność');
   STN.cntx_psh();
   STN.index('STANOZAT');
   STN.prefix('T');
   STN.win_sel(_wnd);
   {? STN.select()
::    osoby z zatrudnieniem na wybranym stanowisku
   || _SEL:=sql(
         'select distinct P.OSOBA as OSOBA '
         'from P '
         'where P.FIRMA=:_a and P.ST=:_b',
         exec('ref_firma','ustawienia'),STN.ref()
      )
   ?};
   STN.cntx_pop();
   STN.win_del(_wnd)
?};

{? type_of(_SEL)=type_of(SYSLOG)
|| _BUF.f_set(,'join :_b using(:_a.OSOBA,:_b.OSOBA)',,_BUF,_SEL);
   {? _BUF.f_size()<>0
   || _cnt:=0;
      _loop:=_BUF.f_first();
      {!
      |? _loop
      |! _BUF.WYBRANY:=_val;
         _cnt+=_BUF.put();
         _loop:=_BUF.f_next()
      !};
      FUN.info('Liczba uczestników spełniających kryterium: %1.'@[$_cnt])
   || FUN.info('Nie znaleziono uczestników spełniających kryterium.'@)
   ?}
?};

_BUF.f_clear(1);
{? _BUF.f_active()<>0
|| _BUF.f_seek(_ref)
|| _BUF.seek(_ref)
?};
~~


\usun__
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Sprawdzenie, czy usunięcie uczestnika jest możliwe
::   WE: [_a][INTEGER] - 0/1 Czy komunikować powód odmowy? Domyślnie 0 - brak komunikatów
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kom:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_ret:=1;
{? exec('jest','ppk_pod')<>0
:: podstawowy test dostępności akcji "Usuń"
:: zablokuj, jeśli są przychody z tytułu wpłat
|| {? _kom
   || FUN.info('Uczestnik posiada przychody z tytułu wpłat. Usunięcie niemożliwe.'@)
   ?};
   _ret:=0

|? exec('jest','ppk_ruc')<>0
:: kolejny test dostępności akcji "Usuń"
:: zablokuj, jeśli są raporty i brak uprawnień do usunięcia
|| {? ~exec('chk_role','#b__box',OPERATOR.USER,'PPK_EWI_UUCZ')
   || {? _kom
      || FUN.info('Uczestnik uwzględniony w raportach wysyłanych do instytucji finansowej.\nUsunięcie niemożliwe.'@)
      ?};
      _ret:=0
   ?}
?};

_ret


\usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed usunięciem uczestnika.
::   WE:
::   WY: 0/1 - usunięcie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
{? exec('usun__','ppk_ucz',1)=0
:: usunięcie niemożliwe
|| return(0)
?};

{? var_pres('__UCZ_SEL')=type_of(SYSLOG)
:: usuń jeden wiersz z zapamiętanej grupy
|| {? __UCZ_SEL.find_key(#PPK_UCZ.ref())
   || __UCZ_SEL.del(,1)
   ?}

|? PPK_UCZ.sel_size()=0
:: usuń pojedyńczy wiersz
|| {? exec('del_conf','#table')=0
::    rezygnacja
   || return(0)
   ?};
   {? exec('jest','ppk_ruc')<>0
::    wymagane potwierdzenie
   || PPK_UCZ.OSOBA();
      exec('usun_wer','ppk_ucz','%1 %2 %3'[
         OSOBA.NAZWISKO,
         OSOBA.PIERWSZE,
         {? +OSOBA.PESEL || OSOBA.PESEL
         |? +OSOBA.NIP || OSOBA.NIP
         |? +OSOBA.PASZPORT || OSOBA.PASZPORT
         || $#OSOBA.ref()
         ?}
      ],0)<>0
   || 1
   ?}
?}


\usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Usunięcie uczestnika.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_RPL.trig_off('put','');
:: lista raportów do ponownego zapisu
_RPL:=tab_tmp(1,
   'REF','INTEGER','Plik',
   'WYS_STAT','STRING[1]','Wysłano'
);

PPK_UZA.cntx_psh();
PPK_UMO.cntx_psh();
PPK_RPL.cntx_psh();
PPK_RPL.clear();
PPK_RDA.cntx_psh();
PPK_RDA.prefix();
PPK_RUC.cntx_psh();
PPK_RUC.index('FK_2');
PPK_RUC.prefix(PPK_UCZ.ref());

do();
_err:=0;
:: usuwanie danych z raportów
_loop:=PPK_RUC.first();
{!
|? _loop & ~_err
|! _RPL.blank();
   _RPL.REF:=#PPK_RUC.PPK_RPL;
   _RPL.WYS_STAT:=PPK_RPL.WYS_STAT;
   {? ~_RPL.find_key(_RPL.REF)
   || _RPL.add()
   ?};
   {? PPK_RUC.PPK_RPL().WYS_STAT='T'
   || PPK_RPL.WYS_STAT:='N';
      {? ~PPK_RPL.put()
      || _err:=1
      ?}
   ?};
   {? ~_err
   || {? PPK_RUC.PPK_RDA<>null
::       usuń dane z raportu uczestnika
      || {? ~PPK_RDA.seek(PPK_RUC.PPK_RDA) | ~PPK_RDA.del(,1)
         || _err:=1
         ?}
      ?}
   ?};
   _loop:=PPK_RUC.next()
!};

_par:=exec('gen_par','ppk_rpl');
:: normalizacja i status raportów
_loop:=(~_err & _RPL.first());
{!
|? _loop & ~_err
|! {? PPK_RPL.seek(_RPL.REF)
   || _par.RPL:=PPK_RPL.ref();
      exec('gen_norm','ppk_rpl',_par);
      PPK_RPL.WYS_STAT:=_RPL.WYS_STAT;
      {? PPK_RPL.put()
      || _loop:=_RPL.next()
      || _err:=1
      ?}
   || _err:=1
   ?}
!};
{? ~_err
:: usuń uczestnika
|| {? ~PPK_UCZ.del(,1)
   || _err:=1;
      undo()
   ?}
|| undo()
?};
end();

:: ponowny zapis raportów
_loop:=(~_err & _RPL.first());
{!
|? _loop & ~_err
|! {? PPK_RPL.seek(_RPL.REF)
   || PPK_RPL.PPK_UMO().PPK_UZA();
      _par.RPL:=PPK_RPL.ref();
      _par.UMO:=PPK_UMO.ref();
      _par.PARRAP:=exec('parrap_b','ppk_uza',1);
      exec('rap2xml','ppk_rpl',_par);
      obj_del(_par.PARRAP);
      PPK_RPL.WYS_STAT:=_RPL.WYS_STAT;
      {? PPK_RPL.put()
      || _loop:=_RPL.next()
      || _err:=1
      ?}
   || _err:=1
   ?}
!};

:: porządki
PPK_RUC.cntx_pop();
PPK_RDA.cntx_pop();
PPK_RPL.cntx_pop();
PPK_UMO.cntx_pop();
PPK_UZA.cntx_pop();
PPK_RPL.trig_on('put','');
~~


\usun_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed usunięciem grupy uczestników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('del_conf','#table',PPK_UCZ)=0
:: rezygnacja
|| return(0)
?};

_SEL:=PPK_UCZ.sel_aget();

{? exec('chk_role','#b__box',OPERATOR.USER,'PPK_EWI_UUCZ')<>0
:: możliwe usuwanie uczestników uwzględnionych w raportach
|| _exit:=0;
   _conf:=0;
   _loop:=_SEL.first();
   PPK_UCZ.cntx_psh();
   {!
   |? _loop
   |! {? PPK_UCZ.seek(_SEL.REF,)
      || {? exec('jest','ppk_ruc')=0
::          bez dodatkowego potwierdzenia
         || _loop:=_SEL.next()
         || _conf:=1;
            _loop:=0
         ?}
      || _exit:=1;
         _loop:=0
      ?}
   !};
   PPK_UCZ.cntx_pop();

   {? _exit<>0
::    błąd ustalenia wiersza w tabeli PPK_UCZ
   || exec('err_rec_acc','#message',_SEL.REF,PPK_UCZ);
      return(0)

   |? _conf<>0
::    wymagane dodatkowe potwierdzenie
   || {? exec('usun_wer','ppk_ucz','%1 %2 %3'[
            exec('gen_id','#id',5),
            exec('gen_id','#id',5),
            exec('gen_id','#id',5)
         ],1)=0
::       anulowano
      || return(0)
      ?}
   ?}
?};

:: dla ewentualnego zaznaczenia wierszy, których nie udało się usunąć
:: zmienna "żyje" tylko w czasie wykonywania grupowej akcji usuwania
_SEL.index(_SEL.ndx_tmp(,,'REF',,));
__UCZ_SEL:=_SEL;
1


\usun_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Po usunięciu grupy uczestników.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_UCZ.cntx_psh();
{? __UCZ_SEL.first() & FUN.ask(
      'Usunięcie wszystkich zaznaczonych uczestników nie było możliwe.\n'
      'Pozostawić zaznaczenie pominiętych uczestników (liczba wierszy: %1)?'@
      [$__UCZ_SEL.size()]
   )
|| _loop:=1;
   {!
   |? _loop
   |! {? PPK_UCZ.seek(__UCZ_SEL.REF,)
::       przywróć zaznaczenie
      || sel_add()
      ?};
      _loop:=__UCZ_SEL.next()
   !}
?};
obj_del(__UCZ_SEL);
&__UCZ_SEL;
PPK_UCZ.cntx_pop();
~~


\usun_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Weryfikacja "świadomego" usunięcia danych w przypadku uwzględnienia ich w raportach.
::   WE: _a STRING - klucz potwierdzenia
::       _b INTEGER - operacja grupowa [1/0]
::   WY: 0/1 - rezygnacja/potwierdzenie
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_key:=_a;
_grp:=_b;

_hd1:=
   {? _grp<>0
   || 'Usunięte będą wszystkie zapisy powiązane z uczestnikami:'@
   || 'Usunięte będą wszystkie zapisy powiązane z uczestnikiem:'@
   ?};
_hd2:='wysokości wpłat, deklaracje i wnioski, komunikaty, ...'@;
_lb2:='Operacja będzie wykonana po przepisaniu tekstu'@;

_BUF:=tab_tmp(1,
   'KEY','STRING[%1]'[$+_key],'Klucz potwierdzający'@,
   'VAL','STRING[%1]'[$+_key],'Przepisany tekst'@
);
_wnd:=_BUF.mk_edit('Weryfikacja decyzji użytkownika'@,0,'#ucz_usun_wer',20,10);
_BUF.win_esep(_wnd,'Potwierdzenie usunięcia danych'@);
_BUF.win_efld(_wnd,AH,'H',,,,,,_hd1);
_BUF.win_efld(_wnd,AH,'H',,,,,,_hd2);
_BUF.win_efld(_wnd,AH,'H');
_BUF.win_efld(_wnd,,'KEY',,,,,,_lb2);
_BUF.win_efld(_wnd,,'VAL');
:: blokada edycji KEY, wymóg podania VAL
_BUF.efld_opt(_wnd,'editable=0',,'KEY');
_BUF.efld_opt(_wnd,'mark=1',,'VAL');
:: standardowe przyciski okna edycji
exec('ok_esc','#window',_BUF,_wnd,,,,,,'Potwierdzenie usunięcia danych'@,'Usuń'@);

_BUF.KEY:=_key;
_BUF.win_edit(_wnd);
_BUF.edit($(
   '_BUF:=cur_tab(1,1);'
   '{? _BUF.VAL=\'\' || FUN.emsg(\'%1\'); 0'
   '|? _BUF.VAL<>_BUF.KEY || FUN.emsg(\'%2\'); 0'
   '|| 1'
   '?}'[
      'Klucz weryfikujący musi być podany.'@,
      'Podany klucz jest niezgodny ze wzorcem.'@
]))


\ciag_zatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Sprawdza czy okres zadany dwoma datami mieści się w okresach zatrudnienia przekazanych w tabeli.
::       Jeśli występują przerwy w zatrudnieniu w zadanym datami okresie funkcja zwraca 0, w wypadku braku przerw 1.
::   WE: _a [DATE]    - data początkowa badanego okresu
::       _b [DATE]    - data końcowa badanego okresu
::       _c [TABLE]   - tabela z okresami pracy jednej osoby, zgodna z \okr_tab_tmp/ppk_ucz.fml
::      [_d][INTEGER] - 0/1 - Czy odejmować okresy przebywania na całomiesięcznym urlopie bezpłatnym bez przychodów
::                      od okresów zatrudnienia? Domyślnie: 0 (nie odejmować)
::      [_e][_OSOBA]  - wskazanie na osobę, domyślnie: OSOBA.ref()
::      [_f][INTEGER] - 0/1 - Czy odejmować okresy przebywania na całomiesięcznym oddelegowaniu bez opłacania
::                      składek ZUS? Domyślnie: 0 (nie odejmować)
::   WY: _ret [OBJ]   - tablica elementów nazwanych:
::                      .zat [INTEGER] - 0/1 - Czy jest ciągłość zatrudnienia w badanym okresie?
::                      .dt  [DATE]    - Jeśli brak ciągłości zatrudnienia w badanym okresie - data początku następnego
::                                       okresu zatrudnienia. Jeśli brak takiego - data zerowa.
::                                       Jeśli jest ciągłość zatrudnienia - data początku obecnego okresu zatrudnienia.
::                      .dtk [DATE]    - Jeśli brak ciągłości zatrudnienia w badanym okresie - data końca ostatniego
::                                       okresu zatrudnienia. Jeśli brak takiego - data zerowa.
::                                       Jeśli jest ciągłość zatrudnienia - data końca obecnego okresu zatrudnienia.
::----------------------------------------------------------------------------------------------------------------------
_tDate:=type_of(date());
{? var_pres('_a')<>_tDate | var_pres('_b')<>_tDate | var_pres('_c')<>118
|| FUN.error('Błąd parametrów wejściowych');
   return(0)
?};
_dtOd:=_a;
_dtDo:=_b;
_TMP:=exec('okr_tab_tmp','ppk_ucz');
_c.cntx_psh();
exec('tab2tab','#table',_c,_TMP,1);
_c.cntx_pop();
_bUrl:={? var_pres('_d')=type_of(0) || _d || 0 ?};
_osoba:={? var_pres('_e')=type_of(null()) & _e<>null() & ref_tab(_e)=OSOBA || _e || OSOBA.ref() ?};
_bOdd:={? var_pres('_f')=type_of(0) || _f || 0 ?};
_d0:=date(0,0,0);
_ret:=obj_new('zat','dt','dtk');
_ret.zat:=0;
_ret.dt:=_ret.dtk:=_d0;

_ind:=_TMP.ndx_tmp(,1,'OD',,);
_TMP.index(_ind);

:: Normalizacja okresów w _TMP (połącznie zachodzących na siebie okresów):
exec('norm_okr','ppk_ucz',_TMP);

:: Badamy ciągłość w okresie od-do. Jeśli podano datę zerową zwracam puste wartości:
{? _dtOd=_d0 | _dtDo=_d0
|| _TMP.ndx_drop(_ind);
   obj_del(_TMP);
   FUN.error('Błąd badania ciągłości zatrudnienia. Podano zerową datę.'@);
   return(_ret)
?};

:: Ew. usunięcie z okresów zatr. okresów przebywania na url. bezpł. bez przychodów:
{? _bUrl
:: Chcemy usunąć z przebiegu całomiesięczne bezpłatne urlopy bez przychodu z okresu jaki będzie miał wpływ na zapisanie
:: do PPK. Jeśli konieczne - pomniejszamy datę OD do KST_PPK.UST_OD
|| exec('burl_okr','ppk_ucz',_osoba,{? _dtOd<KST_PPK.UST_OD || _dtOd || KST_PPK.UST_OD ?},_dtDo,_TMP)
?};
:: Ew. usunięcie z okresów zatr. okresów przebywania na oddelegowaniu bez ZUS:
{? _bOdd
|| exec('bodd_okr','ppk_ucz',_osoba,{? _dtOd<KST_PPK.UST_OD || _dtOd || KST_PPK.UST_OD ?},_dtDo,_TMP)
?};

:: Ustawiam się na pierwszym wpisie o dacie OD mniejszej bądź równej początkowi badanego okresu:
{? _TMP.first() & _TMP.find_le(_dtOd)
:: Jeśli data DO wpisu jest niemniejsza niż koniec badanego okresu mamy ciągłość w badanym okresie:
|| _ret.dtk:=_TMP.DO;
   {? _TMP.DO=_d0 | _TMP.DO>=_dtDo
   || _ret.zat:=1;
      _ret.dt:=_TMP.OD
   |? _TMP.next()
   || _ret.dt:=_TMP.OD
   ?}
?};
_TMP.ndx_drop(_ind);
obj_del(_TMP);

_ret


\norm_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Normalizacja (połączenie zachodzących na siebie) okresów zastrudnienia w tabeli tymczasowej.
::       Poprawność struktury tabeli w parametrze wejściowym nie jest weryfikowana. Kluczowe jest aby miała
::       pola OD i DO, oraz była posortowana rosnąco po polu dacie OD.
::   WE: _a [TAB] - tabela z okresami, np. \okr_tab_tmp/ppk_ucz.fml
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>118
|| FUN.error('Błąd parametrów wejściowych');
   return(0)
?};
_d0:=date(0,0,0);

_TMP:=_a;
{? _TMP.first()
|| {!
   |? _od:=_TMP.OD;
      _do:=_TMP.DO;
      _ref:=_TMP.ref();
      {? _TMP.next()
      || {? _do=_d0 | _TMP.OD<=(_do+1)
         || _do:=_TMP.DO;
            _TMP.del();
            _TMP.seek(_ref);
            {? _TMP.DO<>_d0 & (_do=_d0 | _TMP.DO<_do)
            || _TMP.DO:=_do;
               _TMP.put()
            ?};
            1
         || 1
         ?}
      ?}
   !}
?};

~~


\burl_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Odjęcie od okresów zatrudnienia w tabeli tymczasowej okresów przebywania na urlopie bezpłatnym bez przychodów.
::   WE: _a [_OSOBA] - wskazanie na osobę
::       _b [DATE]   - początek okresu do badania urlopów bezpłatnych
::       _c [DATE]   - koniec okresu do badania urlopów bezpłatnych
::       _d [TABLE]  - wskazanie na tabelę tymczasową z okresami zatrudnienia, którą będziemy pomniejszać o urlopy.
::                     Poprawność struktury tabeli w parametrze wejściowym nie jest weryfikowana. Kluczowe jest
::                     aby miała pola OD i DO, oraz była posortowana rosnąco po polu dacie OD.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_tDate:=type_of(date());
{? var_pres('_a')<>7 | var_pres('_b')<>_tDate | var_pres('_c')<>_tDate | var_pres('_d')<>118
|| FUN.error('Błąd parametrów wejściowych');
   return(0)
?};
_osoba:=_a;
_start:=_b;
_stop:=_c;
_TMP:=_d;

:: Tabela z okresami całomiesięcznych bezpłatnych urlopów bez przychodu osoby w danym okresie:
_URL:=exec('url_b_tb','ppk_ucz',_osoba,562,112,'B',_start,_stop,'standard');

:: Odjęcie od okresów _TMP okresów przebywania na urlopie:
{? _URL.first()
|| {!
   |? {? _TMP.first()
      || {!
         |? _del:=0;
::          Sprawdzam czy data OD urlopu jest niewiększa niż data DO okresu pracy oraz czy data DO urlopu
::          jest niemniejsza niż data OD okresu:
            {? _URL.OD<=_TMP.DO & _URL.DO>=_TMP.OD
::             Jeżeli ten urlop zaczyna się niepóżniej niż z początkiem okresu:
            || {? _URL.OD<=_TMP.OD
::                i jeżeli kończy się przed końcem okresu:
               || {? _URL.DO<_TMP.DO
                  || _TMP.OD:=_URL.DO+1;
                     _TMP.put()
                  || _del:=_TMP.del(,1)
                  ?}
::             Urlop zaczyna się w trakcie okresu:
::                i trwa do końca okresu lub dłużej:
               || {? _URL.DO>=_TMP.DO
                  || _TMP.DO:=_URL.OD-1;
                     _TMP.put()
::                zaczyna się w trakcie i nie trwa do końca:
                  || _nOd:=_URL.DO+1;
                     _nDo:=_TMP.DO;
                     _ref:=_TMP.ref();
                     _TMP.DO:=_URL.OD-1;
                     _TMP.put();
                     _TMP.OD:=_nOd;
                     _TMP.DO:=_nDo;
                     _TMP.add();
                     _TMP.seek(_ref)
                  ?}
               ?}
            ?};

            (_del & _TMP.size()) | _TMP.next()
         !}
      ?};

      _URL.next()
   !}
?};
obj_del(_URL);

~~


\ppk_ucz_widok_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Zmiana widoku uproszczony/rozbudowany.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pxx_widok_zmien','pkd','PPK_UCZ')


\ppk_p_kwoty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Wyświetlenie okna kwot wpłat.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_POK.cntx_psh();
PPK_POK.win_sel('WER');
_aid:='dpu:d';
{? PPK_POD.POD_O=null
|| _aid:=''
?};
PPK_POK.prefix(PPK_POD.ref());
PPK_POK.actions_grayed('WER',_aid);
PPK_POK.select();
PPK_POK.cntx_pop()


\ppk_k_kwoty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Wyświetlenie okna kwot korekt.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_KWK.cntx_psh();
PPK_KWK.win_sel('WERP');
PPK_KWK.prefix(PPK_KWN.ref());
PPK_KWK.select();
PPK_KWK.cntx_pop()


\ppk_z_kwoty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Wyświetlenie okna kwot zwrotów/wyrównań.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_KWK.cntx_psh();
PPK_KWK.win_sel('WERO');
_aid:='';
{? PPK_KWN.PPK_RDA<>null
|| _aid+='p'
?};
PPK_KWK.actions_grayed('WERO',_aid);
PPK_KWK.prefix(PPK_KWN.ref());
PPK_KWK.select();
PPK_KWK.cntx_pop()


\zatr_odd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Sprawdza czy w danej dacie (miesiącu z daty) dana OSOBA przebywa przez cały miesiąc na oddelegowaniu
::       bez opłacania składek ZUS.
::       Jeżeli osoba (wszyscy pracownicy z nią związani) przebywa na oddelegowaniu bez opłacania
::       składek ZUS to nie spełnia znamion osoby zatrudnionej.
::   WE: _a [_OSOBA] - OSOBA.ref
::       _b [DATE]   - data, w której sprawdzamy
::   WY: _ret [NUMBER] - 0/1, 0-nie spełnia znamion osoby zatrudnionej, 1-spełnia znamiona osoby zatrudnionej
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_rok:=_b~1;
_msc:=_b~2;
_start:=date(_rok,_msc,1);
_stop:=date(_rok,_msc,0);
_ret:=1;

P.cntx_psh();
P.use('pracowni');
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),_osoba,'T');
{? P.first()
|| _odd:=0;
   {!
   |? _odd:=exec('okr_odd_bzus','oddelegowanie',P.ref(),_start,_stop);

      _odd & P.next()
   !};
   _ret:=~_odd
?};
P.cntx_pop();

_ret


\bodd_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Odjęcie od okresów zatrudnienia w tabeli tymczasowej okresów przebywania na oddelegowaniu bez ZUS.
::   WE: _a [_OSOBA] - wskazanie na osobę
::       _b [DATE]   - początek okresu do badania oddelegowań bez ZUS
::       _c [DATE]   - koniec okresu do badania oddelegowań bez ZUS
::       _d [TABLE]  - wskazanie na tabelę tymczasową z okresami zatrudnienia, którą będziemy pomniejszać
::                     o oddelegowania bez ZUS.
::                     Poprawność struktury tabeli w parametrze wejściowym nie jest weryfikowana. Kluczowe jest
::                     aby miała pola OD i DO, oraz była posortowana rosnąco po polu dacie OD.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_tDate:=type_of(date());
{? var_pres('_a')<>7 | var_pres('_b')<>_tDate | var_pres('_c')<>_tDate | var_pres('_d')<>118
|| FUN.error('Błąd parametrów wejściowych');
   return(0)
?};
_osoba:=_a;
_start:=_b;
_stop:=_c;
_TMP:=_d;

:: Tabela z okresami całomiesięcznych oddelegowań bez ZUS osoby w danym okresie:
_ODD:=tab_tmp(1,'OD','DATE','Data od','DO','DATE','Data do');
P.cntx_psh();
P.use('pracowni');
P.index('OSOZATR');
P.prefix(exec('firma','ustawienia'),_osoba,'T');
:: Zebranie danych dla każdego pracownika osoby:
{? P.first()
|| {!
::    Zbierane dla pełnych miesięcy - po normalizacji trzeba będzie sprawdzić czy oddelegowania są całomiesięczne...
   |? _ODD_P:=exec('h_odde_b_zus','oddelegowanie',P.ref(),0,1,date(_start~1,_start~2,1),date(_stop~1,_stop~2,0));
      {? _ODD_P.first()
      || {!
         |? _ODD.OD:=_ODD_P.O_OD;
            _ODD.DO:=_ODD_P.O_DO;
            _ODD.add();

            _ODD_P.next()
         !}
      ?};
      obj_del(_ODD_P);

      P.next()
   !};
   {? _ODD.first()
   || exec('norm_okr','ppk_ucz',_ODD);
      {!
      |? _del:=_fnd:=0;
::       Poprawa okresów niepełnomiesięcznych:
         {? _ODD.OD~2=_ODD.DO~2
         || {? _ODD.OD~3<>1 | _ODD.DO<>date(_ODD.DO~1,_ODD.DO~2,0)
            || _del:=_ODD.del(1,1)
            ?}
         |? _ODD.OD~3<>1
         || _tmpOd:=_ODD.OD;
            _ODD.OD:=date(_ODD.OD~1,(_ODD.OD~2)+1,1);
            _ODD.put();
::          Ustaw się na następnym rekordzie (względem poprzedniej pozycji poprawianego):
            _fnd:=_ODD.find_ge(_tmpOd)
         |? _ODD.DO<>date(_ODD.DO~1,_ODD.DO~2,0)
         || _ODD.DO:=date(_ODD.DO~1,(_ODD.DO~2)-1,0);
            _ODD.put()
         ?};

         _fnd | _del=2 | _ODD.next()
      !}
   ?}
?};
P.cntx_pop();

:: Odjęcie od okresów _TMP okresów przebywania na oddelegowaniu bez ZUS:
{? _ODD.first()
|| {!
   |? {? _TMP.first()
      || {!
         |? _del:=0;
::          Sprawdzam czy data OD oddelegowania jest niewiększa niż data DO okresu pracy oraz czy data DO oddelegowania
::          jest niemniejsza niż data OD okresu:
            {? _ODD.OD<=_TMP.DO & _ODD.DO>=_TMP.OD
::             Jeżeli to oddelegowania zaczyna się niepóżniej niż z początkiem okresu:
            || {? _ODD.OD<=_TMP.OD
::                i jeżeli kończy się przed końcem okresu:
               || {? _ODD.DO<_TMP.DO
                  || _TMP.OD:=_ODD.DO+1;
                     _TMP.put()
                  || _del:=_TMP.del(,1)
                  ?}
::             Oddelegowanie zaczyna się w trakcie okresu:
::                i trwa do końca okresu lub dłużej:
               || {? _ODD.DO>=_TMP.DO
                  || _TMP.DO:=_ODD.OD-1;
                     _TMP.put()
::                zaczyna się w trakcie i nie trwa do końca:
                  || _nOd:=_ODD.DO+1;
                     _nDo:=_TMP.DO;
                     _ref:=_TMP.ref();
                     _TMP.DO:=_ODD.OD-1;
                     _TMP.put();
                     _TMP.OD:=_nOd;
                     _TMP.DO:=_nDo;
                     _TMP.add();
                     _TMP.seek(_ref)
                  ?}
               ?}
            ?};

            (_del & _TMP.size()) | _TMP.next()
         !}
      ?};

      _ODD.next()
   !}
?};
obj_del(_ODD);

~~


\dt_uk_lat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Ustala graniczną datę ukończenia X lat. Gdy osoba ma datę urodzenia większą niż wynik, to znaczy, że nie
::       ukończyła jeszcze X lat.
::   WE: [_a][DATE]    - Data sprawdzenia, domyślnie: date()
::       [_b][INTEGER] - Liczba lat do sprawdzenia, domyślnie: KST_PPK.LAT_WYM
::       [_c][INTEGER] - Liczba pomniejszenia liczby lat, domyślnie: 0
::UWAGA: Jeśli nie podano parametru _b, kontekst zmiennej KST_PPK musi być ustalony
::   WY: _ret [DATE] - graniczna data ukończenia podanej liczby lat
::----------------------------------------------------------------------------------------------------------------------
_dt:={? var_pres('_a')=type_of(date()) || _a || date() ?};
_latWym:={? var_pres('_b')=type_of(0) || _b || KST_PPK.LAT_WYM ?};
_latPom:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_ret:=date((_dt~1)-_latWym-_latPom,_dt~2,{? _dt~2=2 & _dt~3=29 || 0 || _dt~3 ?});

_ret

:Sign Version 2.0 jowisz:1045 2024/01/31 10:45:25 37a50971386d78906c73336aa090439f509b6e00347a0d9642e6cf3c5daa62a6f5cede3a0c1e5d637cc1149c5817c0df1f99a8c10d8e6972c7434cd4dd08cb5d64b65400fc96b9644aa9a9c63d560c4e4f7aab8a099aada5bd4f1469bd4212cb4598151287c82698d49c8209b3573afb2a1dd95100ff41a9cf365b975403b90d
