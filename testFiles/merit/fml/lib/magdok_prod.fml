:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: magdok_prod.fml
:: Utworzony: 10.03.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły do specyficznej obsługi dokumentów magazynowych od strony produkcji
::======================================================================================================================


\spr_pdok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Funkcja ma za zadanie sprawdzać poprawność wypełnienia znacznika generowania dokumentu raportującego produkcję
::       w tabelach TOPER, ZGP
::   WE: _a - Akronim tabeli ('TOPER', 'ZGP')
::       _b - Akronim indeksu
::       _c - Prefix
::       _d - Tekst do komentarza
::       [_e] - Czy inicjować i wyświetlać komunikat
::       [_f] - dialogi czy automatyczne (domyślne działanie)
::       [_g] - czy umożliwić wyjście z błędem
::   WY: 0 / 1
::  OLD: \spr_pdok/polap.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_e')=type_of(0) || _ini_komm:=_e || _ini_komm:=1 ?};
{? var_pres('_f')=type_of(0) || _dialog:=_f || _dialog:=1 ?};
{? var_pres('_g')=type_of(0) || _blokuj:=~_g || _blokuj:=1 ?};

_wynik:=1;
_tab_acr:=_a;
_tab:=($_tab_acr)();
_ind:=_b;
_prefix:=_c;
_txt:=_d;

_mg:={? _tab=ZGP || exec('FindAndGet','#table',ZL,_tab.ZL,,"MG",null()) || null() ?};

_ktm_rodzaj:='';
{? _tab=ZGP
|| _ktm_rodzaj:=exec('FindAndGet','#table',ZL,_tab.ZL,,"KTM().RODZ",'')
|? _tab=TOPER
|| _ktm_rodzaj:=exec('FindAndGet','#table',TKTL,_tab.NRK,,"KTM().RODZ",'')
?};

_InPDOK:=exec('get_RDOK','magdok_prod',_mg,1);
{? _InPDOK=null() || return(1) ?};

_typydok:='';
_InPName:=exec('FindAndGet','#table',TYPYDOK,_InPDOK,,"T",'');
{? _ktm_rodzaj='U'
||
:: Dla usuług przypisujemy zawsze RRU
   _InPDOK:=exec('get_typydok','zl_uslugi');
   _InPName:=exec('FindAndGet','#table',TYPYDOK,_InPDOK,,"T",'');
   _typydok:=_InPName+' '
?};

{? _ktm_rodzaj<>'U'
||
   {? _typydok:=exec('get','#params',500701,2,null());
      _typydok=''
   || return(1)
   ?}
?};

_kor:=(_tab=TOPER & exec('FindAndGet','#table',TKTL,_tab.NRK,,"STAN='T'",0));

_oper:=tab_tmp(3
              ,'MASK'    ,'STRING[8]'  ,'TAB.name()'
              ,'REF'     ,'INTEGER'    ,'#TAB.ref()'
              ,'SQLREF'  ,'STRING[16]' ,'$TAB.ref()'
              ,'OPIS'    ,'STRING[255]','Wartość'@
              ,'TYPYDOKT','STRING[20]' ,'TYPYDOK.T'
              ,'TYPYDOKR','INTEGER'    ,'#TYPYDOK.ref()'
              );

_tab.clear();
_tab.index(_ind);
_tab.prefix(_prefix);
{? _tab.first()
|| {!
   |?
      _oper_split:=0;
      {? _tab_acr='ZGP'
      || {? _tab.UID_SRC<>''
         || _oper_split:=1
         ?}
      ?};

      {? _tab.DOK<>null()
       & (' '+_typydok)*(' '+_tab.DOK().T+' ')>0
       & _tab.TPZ='N'
       & _oper_split=0
       & {? _tab=TOPER || _tab.ACT='T' || 1 ?}
      || _oper.MASK:=_tab.name();
         _oper.REF:=#_tab.ref();
         _oper.SQLREF:=$_tab.ref();
         _oper.OPIS:={? _tab=TOPER || exec('get_oper_nr','tech_oper',TOPER.UNROP,'.')+'. '+TOPER.OPER().NA
                                   || $ZGP.NRP+' '+ZGP.OPIS
                     ?};
         _oper.TYPYDOKT:=_tab.DOK().T;
         _oper.TYPYDOKR:=#_tab.DOK;
         _oper.add()
      ?};
      _tab.next()
   !};
:: teraz analiza tego co zebraliśmy
   _przyp_rp:=exec('get','#params',500402,2);
   {? _oper.first()=0
   || _test_rp:=exec('test_rp','magdok_prod',_tab,_prefix);
      {? _test_rp
      || {? _dialog & _przyp_rp='N'
         || {? _kor
            || _wynik:=~FUN.choice(
                  {? _txt=''
                  || 'Brak przypisanego dokumentu raportującego produkcję %1.\n\n'
                     'Należy poprawić dane, w przeciwnym wypadku użycie karty może powodować błędy.'@[_InPName]
                  || 'Brak przypisanego dokumentu raportującego produkcję %1 %2.\n\n'
                     'Należy poprawić dane, w przeciwnym wypadku użycie karty może powodować błędy.'@[_InPName,_txt]
                  ?}
                  ,,'Powróć do redagowania'@,,,,'Anuluj'@
               )
            || {? FUN.ask(
                     {? _txt=''
                     || 'Brak przypisanego dokumentu raportującego produkcję %1.\n\n'
                        'Czy przypisać go do ostatniej operacji?\n\n\n'
                        'Uwaga: rezygnacja oznacza konieczność ręcznej modyfikacji\n'
                        'wybranej operacji — później można powrócić do zatwierdzania.'@[_InPName]
                     || 'Brak przypisanego dokumentu raportującego produkcję %1 %2.\n\n'
                        'Czy przypisać go do ostatniej operacji?\n\n\n'
                        'Uwaga: rezygnacja oznacza konieczność ręcznej modyfikacji\n'
                        'wybranej operacji — później można powrócić do zatwierdzania.'@[_InPName,_txt]
                     ?}
                  )
               || _wynik:=exec('add_rp','magdok_prod',_tab,_prefix,_InPDOK)
               || _wynik:=0
               ?}
            ?}
         || _wynik:=exec('add_rp','magdok_prod',_tab,_prefix,_InPDOK)
         ?}
      || {? _ini_komm=1
         || KOMM.init(,,'Zatwierdzenie'@,'')
         ?};
         KOMM.sect_beg(
            {? _txt=''
            || 'Zatwierdzenie nie jest możliwe'@
            || 'Zatwierdzenie %1 nie jest możliwe'@[_txt]
            ?}
         );
         KOMM.add(
            {? _txt=''
            || 'Brak przypisanego dokumentu raportującego produkcję %1.'@[_InPName]
            || 'Brak przypisanego dokumentu raportującego produkcję %1 %2.'@[_InPName,_txt]
            ?}
         );

         {? VAR.GRUPA='N'
         || {? _ini_komm=1 || KOMM.select() ?}
         || KOMM.sect_end()
         ?};
         _wynik:=0
      ?}
   |? _oper.size()>1
   || {? _ini_komm=1
      || KOMM.init(,,{? _kor || 'Szczegóły'@ || 'Zatwierdzenie'@ ?},'')
      ?};
      KOMM.sect_beg({? _kor || 'Kontynuowanie'@ || 'Zatwierdzenie'@ ?}+{? _txt<>''||' nie jest możliwe %1'@[_txt] || ' nie jest możliwe'@ ?});
      KOMM.sect_beg('Dokument raportujący produkcję jest przypisany do wielu operacji:'@);

      {? _oper.first()
      || {!
         |? KOMM.add('['+form(_oper.TYPYDOKT)+']  '+_oper.OPIS);
            _oper.next()
         !}
      ?};

      {? VAR.GRUPA='N'
      || {? _kor
         || _choice:=FUN.choice(
               'Dokument raportujący produkcję jest przypisany do wielu operacji.\n\n'
               'Należy poprawić dane, w przeciwnym wypadku użycie karty może powodować błędy.'@
               ,,'Powróć do redagowania'@,'Szczegóły'@,,,'Anuluj'@
            );
            {? _choice=0
            || _wynik:=1
            |? _choice=1
            || _wynik:=0
            |? _choice=2
            || _wynik:=~KOMM.select()
            ?};
            _wynik:={? _choice=0 || 1 || 0 ?}
         || _wynik:=~KOMM.select();
            {? _blokuj || _wynik:=0 ?}
         ?}
      || {? _ini_komm=1 || KOMM.sect_end() ?};
         KOMM.sect_end();
         _wynik:=0
      ?}
   ?}
?};
_wynik


\test_rp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Testuje, czy można przypisać znacznik wygenerowania dokumentu raportującego na ostatniej pozycji operacji
::   WE:  _a - alias tabeli (TOPER, ZGP)
::        _b - Prefix
::  OLD: \test_rp/polap.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=1;
_wybrane:=0;

_tab:=_a;
_prf:=_b;

_tab.cntx_psh();
_tab.clear();
{? _tab=TOPER
|| NASTOPER.index('OPER');
   NASTOPER.prefix('T',_prf);
   {? NASTOPER.first()
   || {!
      |? _nast:=NASTOPER.NRNAST;
         NASTOPER.NRNAST();
         NASTOPER.cntx_psh();
         NASTOPER.index('OPNAST');
         NASTOPER.prefix('T',_nast);
         {? ~NASTOPER.first()
         ||
::            _wynik:=TOPER.SRW='S';
            _wynik:=1;
            _wybrane:=1
         ?};
         NASTOPER.cntx_pop();
         _wybrane=0 & NASTOPER.next()
      !}
   ?}

|? _tab=ZGP
|| _zl:=ZGP.NRZLP().ZLEC;
   NASZGP.index('ZLPOPNA');
   NASZGP.prefix(_zl,_zl);
   {? NASZGP.first()
   || {!
      |? {? NASZGP.OPER().NRPRZ=_prf | NASZGP.OPER().NRZLP=_prf
         || _nast:=NASZGP.NRNAST;
            NASZGP.NRNAST();
            NASZGP.cntx_psh();
            NASZGP.index('OPNAST');
            NASZGP.prefix(_nast);
            {? ~NASZGP.first()
            ||
::               _wynik:=ZGP.SRW='S';
               _wynik:=1;
               _wybrane:=1
            ?};
            NASZGP.cntx_pop()
         ?};
         _wybrane=0 & NASZGP.next()
      !}
   ?}

|| FUN.wdrerror('Błędny argument formuły test_rp/magdok_prod.'@);
   _wynik:=0
?};

_tab.cntx_pop();

_wynik


\add_rp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Przypisuje znacznik wygenerowania dokumentu RP na ostatniej pozycji operacji
::   WE:  _a - Alias tabeli (TOPER, ZGP)
::        _b - Prefix
::        _c - TYPYDOK.ref()
::  OLD: \add_rp/polap.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=1;
_wybrane:=0;

_tab:=_a;
_prf:=_b;
_InPDOK:=_c;

_tab.cntx_psh();
_tab.clear();

{? _a=TOPER
|| NASTOPER.index('OPER');
   NASTOPER.prefix('T',_prf);
   {? NASTOPER.size()>0
   ||
      {? NASTOPER.first()
      || {!
         |? _nast:=NASTOPER.NRNAST;
            NASTOPER.NRNAST();
            NASTOPER.cntx_psh();
            NASTOPER.index('OPNAST');
            NASTOPER.prefix('T',_nast);
            {? ~NASTOPER.first()
            || TOPER.DOK:=_InPDOK;
               _wynik:=TOPER.put();
               _wybrane:=1
            ?};
            NASTOPER.cntx_pop();
            _wybrane=0 & NASTOPER.next()
         !}
      ?}
   ||
::    Brak następników więc wybieram pierwszą operację na karcie
      TOPER.cntx_psh();
      TOPER.index('ANNN');
      TOPER.prefix('T','N',_prf);
      {? TOPER.first()
      || TOPER.DOK:=_InPDOK;
         _wynik:=TOPER.put()
      ?};
      TOPER.cntx_pop()
   ?}
|? _a=ZGP
|| _zl:=ZGP.NRZLP().ZLEC;
   NASZGP.index('ZLPOPNA');
   NASZGP.prefix(_zl,_zl);
   {? NASZGP.size()>0
   ||
      {? NASZGP.first()
      || {!
         |? {? NASZGP.OPER().NRPRZ=_prf | NASZGP.OPER().NRZLP=_prf
            || _nast:=NASZGP.NRNAST;
               NASZGP.NRNAST();
               NASZGP.cntx_psh();
               NASZGP.index('OPNAST');
               NASZGP.prefix(_nast);
               {? ~NASZGP.first()
               || ZGP.DOK:=_InPDOK;
                  _wynik:=ZGP.put();
                  _wybrane:=1
               ?};
               NASZGP.cntx_pop()
            ?};
            _wybrane=0 & NASZGP.next()
         !}
      ?}
   ||
::    Brak następników więc wybieram pierwszą pozycję przewodnika
      ZGP.cntx_psh();
      ZGP.index('PNRPP');
      ZGP.prefix(_prf,'N');
      {? ZGP.first()
      || ZGP.DOK:=_InPDOK;
         _wynik:=ZGP.put()
      ?};
      ZGP.cntx_pop();
      ~~
   ?}
|| FUN.wdrerror('Błędny argument formuły add_rp/magdok_prod.'@);
   _wynik:=0
?};

_tab.cntx_pop();

_wynik


\zlst_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [7.53] Uwaga_82
:: OPIS: Podgląd pozycji dokumentów dla zlecenia albo limitu
::   WE: [_a] 1 - wszystkie dokumenty do zlecenia VAR.A_ZLEC albo grupy operacji VAR.A_GROP
::            2 - wszystkie dokumenty do zlecenia VAR.A_ZLEC albo grupy operacji VAR.A_GROP,
::                dodatkowo zwraca a nie niszczy tabelę zamiast ją wyświetlać
::            3 - tylko dokumenty do danego ZLIM
::            4 - wszystkie dokumenty kooperacji do zlecenia VAR.A_ZLEC,
::                dodatkowo zwraca a nie niszczy tabelę zamiast ją wyswietlać
::            5 - wszystkie dokumenty do aktywnej partii ZPARN.ref(),
::                dodatkowo zwraca a nie niszczy tabelę zamiast ją wyświetlać
::       [_b] - ZGP.ref() - pozycja przewodnika, którego dokumenty zbierać
::       [_c] - ZGH.ref() - nagłówek przewodnika, którego dokumenty zbierać
::   WY: .TAB, .WER - w przypadku _a=2
::       ~~ - w przypadku _a=1, _a=3
::  OLD: \zlst_dok/dokmag.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _opcja:=_a || _opcja:=0 ?};
{? _opcja<1 | _opcja>5
|| FUN.emsg('Błędny argument wywołania formuły %1.'@['zlst_dok/magdok_prod']);
   return()
?};
_zgp:=null();
{? var_pres('_b')=type_of(ZGP.ref())
|| _zgp:=_b
?};
_zgh:=null();
{? var_pres('_c')=type_of(ZGH.ref())
|| _zgh:=_c
?};

Cntx.psh(ZL,ND,DK);

VAR_DEL.delete('__Tab');

__Tab:=tab_tmp(3,
   'D','DATE','ND.D - Data',
   'SYM','STRING[20]','ND.SYM - Dokument',
   'M_KTM','STRING[50]','M.KTM',
   'ODDZ','STRING[1]','ND.ODDZ - Oddział',
   'T','STRING[8]','TYPYDOK.T - Typ dokumentu',
   'P','INTEGER','DK.P - Pozycja',
   'IL','REAL','DK.IL - Ilość',
   'JM','STRING[10]','jm'@,
   'C','REAL','DK.C - Cena',
   'WAR','REAL','DK.WAR - Wartość'@,
   'PRDK','STRING[16]','DK.PRDK',
   'M','STRING[16]','DK.M',
   'MAG','STRING[8]','MG.SYM - Magazyn',
   'M_N','STRING[100]','Nazwa materiału'@,
   'OPERATOR','STRING[30]','Operator'@,
   'ZL_SYM','STRING[20]','Zlecenie'@,
   'KH','STRING[20]','Kontrahent'@,
   'DK_SRC','STRING[20]','Dok. źródłowy'@,
   'DK_REF','STRING[16]','Ref SQL dokumentu',
   'DK_UID','STRING[48]','uidref dokumentu',
   'AKC','STRING[1]','Zaakceptowany'@,
   'STAT_REJ','STRING[1]','Stan rejestracji dokumentu'@
);

__Tab.fld_attr(,2);
__Tab.fld_attr('OPERATOR',3);
__Tab.fld_attr('ZL_SYM',3);
{? _opcja=1 | _opcja=2 || __Tab.fld_attr('M_N',3) ?};
__Tab.fld_attr('P',,2);
{? _opcja=1 | _opcja=2 || __Tab.fld_attr('IL',,2) ?};
__Tab.fld_attr('C',,2);

exec('war_hid','ceny',__Tab,'C','WAR');

exec('refresh_dok','magdok_prod',__Tab,_opcja,_zgp,_zgh);

__Tab.first();

_wer:=__Tab.mk_sel(
   'Pozycje dokumentów','P',0,'poz_dok'+$_opcja,1,
   {? _opcja=1 | _opcja=2 || 10 || 24 ?},
   {? _opcja=1 | _opcja=2 || 24 || 10 ?},,'U',,,,,'html_maximized',,'on'
);
__Tab.win_fld(_wer,,'T',,,-8,,,'Typ dokumentu'@);
__Tab.win_fld(_wer,,'KH',,,-10,,,'Kontrahent'@);
__Tab.win_fld(_wer,,'D',,,10,,,'Data'@);
__Tab.win_fld(_wer,,'SYM',,,20,,,'Symbol dokumentu'@);
__Tab.win_fld(_wer,,'ODDZ',,,-5,,,'Oddział'@);
__Tab.win_fld(_wer,,'MAG',,,8,,,'Magazyn'@);
__Tab.win_fld(_wer,,'P',,,-4,0,,'Pozycja'@);
__Tab.win_fld(_wer,,'IL',,,15,
   {? _opcja=1 | _opcja=2 | _opcja=4 || ST.DOKL
   |? _opcja=3             || ZLIM.KTM().DOKL
                           || ST.DOKL
   ?},,'Ilość'@);
__Tab.win_fld(_wer,,'JM',,,5,,,'jm'@);
__Tab.win_fld(_wer,,'C',,,10,2,,'Cena'@);
__Tab.win_fld(_wer,,'WAR',,,15,2,,'Wartość'@);
__Tab.win_fld(_wer,@.VAR,'DATE',,,,,,'Data dostawy'@);
__Tab.win_fld(_wer,,'DK_SRC',,,,,,'Dokument źródłowy'@);
{? _opcja=1 | _opcja=2 | _opcja=4 || __Tab.win_fld(_wer,,'M_KTM',,,20,,,'Kod materiału'@) ?};
::__Tab.win_fld(_wer,,'AKC' ,,,5,,,'Akc.',0,,2,,"\'T\'","\'N\'");

_formula:="
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(cur_tab(1,1).DK_UID));
   DK.prefix();
   {? DK.seek(cur_tab(1,1).DK_UID)
   || ND.use(ref_name(DK.N));
      exec('his_dost','magdok_wspolne')
   || FUN.info('Dokument został usunięty'@);
      exec('refresh_dok','magdok_prod',cur_tab(1,1),"+$_opcja+",\'"+$_zgp+"\',\'"+$_zgh+"\')
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
";
_formula:=$_formula;
__Tab.win_act(_wer,,'Formuła','Historia dostawy'@@,,,_formula,,,,,,'H');

_formula:="
   _var_a_zlec:=VAR.A_ZLEC;
   _nd:=exec('FindAndGet','#table',DK,cur_tab(1,1).DK_UID,,\"$N\",'');
   {? _nd<>''
   || exec('disp_dk','magdok_wspolne',1,_nd,,,1)
   || FUN.info('Dokument został usunięty.'@)
   ?};
   VAR.A_ZLEC:=_var_a_zlec;
   exec('refresh_dok','magdok_prod',cur_tab(1,1),"+$_opcja+",\'"+$_zgp+"\',\'"+$_zgh+"\');
   ~~
";
_formula:=$_formula;
__Tab.win_act(_wer,,'Formuła','Pokaż &dokument'@@,,,_formula,,1,,,,'D');

__Tab.win_act(_wer,,'Menu','Fu&nkcje'@@,,,,,,,,,'N');

_formula:="
   _tab:=cur_tab(1,1);
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(_tab.DK_UID));
   DK.prefix();
   {? DK.seek(_tab.DK_UID)
   || ND.use(ref_name(DK.N));
      ND.prefix();
      {? ND.seek(DK.N)
      || _stat_rej:=ND.STAT_REJ;
         exec('wyc_dokr','magdok_nag');
         {? ND.STAT_REJ<>_stat_rej
         || _tab.cntx_psh();
            _tab.prefix();
            exec('refresh_dok','magdok_prod',_tab,"+$_opcja+");
            _tab.cntx_pop()
         ?}
      ?}
   || FUN.info('Dokument został usunięty.'@);
      _tab.cntx_psh();
      _tab.prefix();
      exec('refresh_dok','magdok_prod',_tab,"+$_opcja+");
      _tab.cntx_pop()
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
";
_formula:=$_formula;
__Tab.win_act(_wer,,'Formuła','&Wycofaj dokument'@@,'#N',,_formula,,,,,,'W');
{? _opcja=4
|| task_attach('TTE_WYK_DKOP');
   task_attach('TTE_WYK_DKOW')
|| task_attach('LMG_MAG_DAPZ');
   task_attach('LMG_MAG_DWYD')
?};
task_attach('LMG_MAG_EWMG');

_formula:="
   _tab:=cur_tab(1,1);
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(_tab.DK_UID));
   DK.prefix();
   {? DK.seek(_tab.DK_UID)
   || ND.use(ref_name(DK.N));
      ND.prefix();
      {? ND.seek(DK.N)
      || exec('nd_usun','magdok_nag');
         {? ~DK.seek(_tab.DK_UID)
         || _tab.cntx_psh();
            _tab.prefix();
            exec('refresh_dok','magdok_prod',_tab,"+$_opcja+");
            _tab.cntx_pop()
         ?}
      ?}
   || FUN.info('Dokument został usunięty.'@);
      _tab.cntx_psh();
      _tab.prefix();
      exec('refresh_dok','magdok_prod',_tab,"+$_opcja+");
      _tab.cntx_pop()
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
";
_formula:=$_formula;
__Tab.win_act(_wer,,'Formuła','&Usuń dokument'@@,'#N',,_formula,,,,,,'U');
{? _opcja=4
|| task_attach('TTE_WYK_DKOP');
   task_attach('TTE_WYK_DKOW')
|| task_attach('LMG_MAG_DAPZ');
   task_attach('LMG_MAG_DWYD')
?};

_formula:="
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(cur_tab(1,1).DK_UID));
   DK.prefix();
   {? DK.seek(cur_tab(1,1).DK_UID)
   || ND.use(ref_name(DK.N));
      exec('todo_select','#b__box',DK.N().uidref())
   || FUN.info('Dokument został usunięty.'@);
      exec('refresh_dok','magdok_prod',cur_tab(1,1),"+$_opcja+",\'"+$_zgp+"\',\'"+$_zgh+"\')
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
";
_formula:=$_formula;
__Tab.win_act(_wer,,'Formuła','Zadania&'@@,,,_formula,,,,,,'Ż');

_formula:="
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(cur_tab(1,1).DK_UID));
   DK.prefix();
   {? DK.seek(cur_tab(1,1).DK_UID)
   || ND.use(ref_name(DK.N));
      exec('disp_dkm','magdok_poz');
      _result:=1
   || FUN.info('Dokument został usunięty.'@);
      exec('refresh_dok','magdok_prod',cur_tab(1,1),"+$_opcja+",\'"+$_zgp+"\',\'"+$_zgh+"\')
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
";
_formula:=$_formula;
__Tab.win_act(_wer,,'Wyświetl',,,,_formula);

__Tab.win_act(_wer,,'Kolejność');
_formula:="
   _prdk:=cur_tab(1,1).PRDK;
   DK.cntx_psh();
   DK.prefix();
   {? _prdk<>'' & DK.seek(_prdk,ref_name(_prdk),1)
   || VAR.DATE:=DK.DOST
   || VAR.DATE:=date(0,0,0)
   ?};
   DK.cntx_pop();
   ~~
";
__Tab.win_act(_wer,0,'Rekord',,,,_formula,,1);

_formula:="
   {? cur_tab(1,1).STAT_REJ='T' || exec('zaakceptowany','icon')
   |? cur_tab(1,1).STAT_REJ='Z' || exec('zarejestrowany','icon')
   |? cur_tab(1,1).STAT_REJ='N' || exec('pusta','#icon')
   || exec('pusta','#icon')
   ?}
";
__Tab.win_fml(_wer,,'SYM',,'ICON_BEFORE',_formula);

{? _opcja=2 | _opcja=4 | _opcja=5
|| _res:=obj_new('TAB','WER');
   _res.TAB:=__Tab;
   _res.WER:=_wer
|| __Tab.win_sel(_wer);
   __Tab.select()
?};

VAR_DEL.delete('__Tab');
Cntx.pop(ZL,ND,DK);

{? _opcja=2 | _opcja=4 | _opcja=5 || _res || ~~ ?}


\pobrania
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RS [7.53]
:: OPIS: pobrania surowca nielimitowanego na zlecenie, pobrania do limitu zlecenia
::   WE: [_a] - czy uruchamiana z poziomu tymczasowej tabeli _ZLIM surowców limitowanych zlecenia: [0] -nie , 1 -tak
::  OLD: \pobr_aut/sur_nlim.fml
::  OLD: \zlim_pob/zl_limit.fml
::----------------------------------------------------------------------------------------------------------------------
_czy_lim:={? var_pres('_a')=type_of(0) || _a || 0 ?};
exec('zlst_dok','magdok_prod',3);
{? _czy_lim>0
||
:: Odświeżenie wartości limitu, dla którego uruchomiono akcję
   _tab:=cur_tab(1,1);
   {? _tab.PARENT=0
   || exec('GetChildVals','zl_limit',_tab);
      exec('UpdateZLIMALIL','zl_limit',_tab,0)
   ?}
?};
~~


\dostawy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Wyświetla dokumenty PZ powiązane z RW dla limitu
::       Kontekst pracy - rekord ZLIM
::  OLD: \dostawy/zl_limit.fml
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
GROP.cntx_psh();

:: Tworzę tabelkę tymczasową ktorą będę wyświetlał
_tab:=tab_tmp(1,
::    'POLE','TYP','Nazwa w oknie'@,
   'PZ_REF','STRING[16]','SQL ref dok PZ'@,
   'RW_REF','STRING[16]','SQL ref dok RW'@,
   'PZ_SYM','STRING[50]','Symbol dostawy'@,
   'PZ_DATE','STRING[10]','Data dostawy'@,
   'PZ_POZ','INTEGER','Pozycja'@,
   'PZ_CENA','REAL','Cena dostawy'@,
   'PZ_ILOSC','REAL','Ilość na dostawie'@
);
_args:=obj_new('ZLIM'
               ,'TAB'
               );
_args.ZLIM:=ZLIM.ref();
_args.TAB:=_tab;

_rule:="
   _args:=_b;
   _result:=0;
   _can_continue:=1;

   _args.TAB.cntx_psh();
   ND.cntx_psh();
   DK.cntx_psh();
   DK.index('ZLIM');
   DK.prefix(ref_name(_args.ZLIM),_args.ZLIM);
   {? DK.first()
   || {!
      |?
         _prdk:=DK.PRDK;
         _rw:=$DK.ref();
         {? _prdk<>''
         ||
            DK.cntx_psh();
            DK.use(8+_prdk);
            DK.clear();
            {? DK.seek(_prdk)
            ||
               ND.use(ref_name(DK.N));

::             Stoję na źródłowej dostawie
               _args.TAB.prefix($DK.ref());
               {? _args.TAB.size()=0
               ||
                  _args.TAB.blank();
                  _args.TAB.RW_REF:=_rw;
                  _args.TAB.PZ_REF:=$DK.ref();
                  _args.TAB.PZ_SYM:=DK.N().SYM;
                  _args.TAB.PZ_DATE:=$DK.DOST;
                  _args.TAB.PZ_POZ:=DK.P;
                  _args.TAB.PZ_CENA:=DK.C;
                  _args.TAB.PZ_ILOSC:=DK.IL;
                  _can_continue:=_args.TAB.add()
               ?}
            ?};
            DK.cntx_pop()
         ?};
         DK.next()
      !}
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   _args.TAB.cntx_pop();
   {? _can_continue>0
   || _result:=1
   ?};
   _result
";



_name:=5+DK.name();
{? ZLIM.GROP<>null()
||
:: Podczytanie grupy
   ZLIM.GROP();
   _msk_start:=_name+GROP.ODDZ+(2-$(GROP.DATA));
   _msk_end:=~~;
   _rok:=exec('max','#math',GROP.ROK_MAX,GROP.DATA~1);
   _msk_end:=_name+GROP.ODDZ+(2-$(_rok))
||
:: Podczytanie zlecenia
   ZLIM.ZLEC();
   _name:=5+DK.name();
   _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD));
   _msk_end:=~~;
   {? ZL.STAN='Z'
   || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   ?}
?};

:: Zasilam tabelę danymi
exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_args);

:: Tworzę okno tymczasowej tabeli
_wer:=_tab.mk_sel('Dostawy dla limitu'@,'P',0,'#zlimdost',5,5,20,,'U');
_tab.win_fld(_wer,,'PZ_SYM',,,30,,,'Dostawa'@);
_tab.win_fld(_wer,,'PZ_POZ',,,10,,,'Pozycja'@);
_tab.win_fld(_wer,,'PZ_DATE',,,10,,,'Data dostawy'@);
_tab.win_fld(_wer,,'PZ_CENA',,,10,,,'Cena dostawy'@);
_tab.win_fld(_wer,,'PZ_ILOSC',,,10,,,'Ilość'@);

_tab.win_sel(_wer);
_tab.select();

ZL.cntx_pop();
GROP.cntx_pop();
~~


\rw_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: Dodanie do dokumentu RW pozycji z limitów zlecenia.
::   WE: _a: ND.ZL
::       _b: ND.WYD
::  OLD: \rw_dok/zlec5.fml
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
_zlec:={?_>0 & type_of(_a)>6 || _a || null() ?};
_wydz:={?_>1 & type_of(_b)>6 || _b || null() ?};

_dowyhtd:=1;

{? FUN.ask('Funkcja przekształci dokument w realizację zamówienia wewnętrznego.\nCzy kontynuować?'@)=0
|| _dowyhtd:=0

|? _zlec=null()
||
:: gdy nie podane zlecenie, należy wybrać odpowiednie paramerty
   ZMSLAPP.ZL:='';
   ZMSLAPP.ZL6:='';
   VAR.A_WYD:=null;
   VAR.A_ZLEC:=null;
   exec('czytaj','#stalesys',,XINFO,'SLWYDZIA');
   XINFO.SLWYDZIA();
   VAR.win_edit('ZLEC_WYD');
   _dowyhtd:={? VAR.edit()
             || _zlec:=VAR.A_ZLEC;
                _wydz:=VAR.A_WYD;
                1
             || 0
             ?}
?};
{? _dowyhtd
|| {? _zlec<>null()
   || exec('wyd2lim_dok','zamsiw_rea',_zlec,_wydz,ND.ref())
   || FUN.info('Nie podano zlecenia dla którego miałby zostać wypełniony dokument.'@);0
   ?}
|| 0
?};
ZL.cntx_pop()


\lim_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: Dodanie do dokumentu RW pozycji z limitów zlecenia.
::   WE: _a: ND.ZL
::       _b: ND.WYD
:;       _c: czy inicjować i wyświetlać KOMM
::       _d: ND.ref()
::       _e - 1-domyślnie 0-z dokumentu magazynowego
::  OLD: \lim_add/zlec5.fml
::----------------------------------------------------------------------------------------------------------------------
_zlecenie:={? _>0 & type_of(_a)>6 || _a || null() ?};
 _wydzial:={? _>1 & type_of(_b)>6 || _b || null() ?};
  _noKOMM:={? _>2 & type_of(_c)=1 || _c || 0      ?};
   _ndref:={? _>3 & type_of(_d)>6 || _d || null() ?};
    _skad:={? _>4 & type_of(_e)=1 || _e || 1 ?};

_zlwar:="($ZK_N.WYD='"+$_wydzial+"')";
_dodwar:="1";

_zlidod:=exec('WhatZLiZLDOD','zl_limit',_zlecenie);
{? _zlidod.Zlec=_zlecenie
|| _ndx:="
           ZK_N.ndx_tmp('',1
                       ,'LIM',,
                       ,'A'  ,,
                       ,'ZL' ,'UNRZL',
                       ,'T'  ,'TYPYDOK',
                       ,'WYD',,
                       )
         ";
   _zlwar:=_zlwar+" & (ZK_N.ZL().UNRZL=";
   _pfx:=1
|? _zlidod.ZlDod=_zlecenie
|| _ndx:="
           ZK_N.ndx_tmp('',1
                       ,'LIM',,
                       ,'A'  ,,
                       ,'ZL' ,'UNRZL',
                       ,'T'  ,'TYPYDOK',
                       ,'WYD',,
                       )
         ";
   _zlwar:=_zlwar+" & (ZK_N.ZL().NRNZL=";
   _dodwar:="ZLIM.cntx_psh();
             ZLIM.use(ref_name(ZK_P.ZLIM));
             _wyn:=$ZK_P.ZLIM().ZLDOD='"+$_zlecenie+"';
             ZLIM.cntx_pop();
             _wyn";
   _pfx:=2
|| {? _noKOMM=0 || FUN.info('Nie udało się zweryfikować zlecenia.'@) ?};
   return()
?};

ZL.cntx_psh();
ZL.clear();
{? ZL.seek(_zlecenie)
|| _pfx:={? _pfx=1 || ZL.UNRZL
         |? _pfx=2 || {? ZL.RODZAJ='Z' || ZL.UNRZL || ZL.NRNZL ?}
         ?};
   _zlwar:=$(_zlwar+form(_pfx,,,'9.')+')')
?};
ZL.cntx_pop();

ND.cntx_psh();
ND.clear();
{? ND.seek(_ndref)
|| ZK_N.cntx_psh();
   ZK_N.clear();
   _ndx:=_ndx();
   ZK_N.index(_ndx);
   ZK_N.prefix(
                'T'
               ,'A'
               ,_pfx
               ,ND.TYP
               ,_wydzial
               );
   {? ZK_N.first()
   ||
      exec('real_dok','zamsiw_rea',0,ND.ref(),~_noKOMM,_zlwar,$_dodwar,_skad)
   || {? _noKOMM=0
      || FUN.info('Nie znaleziono zamówień możliwych do realizacji dokumentem %1.'@[ND.TYP().T])
      ?}
   ?};
   ZK_N.cntx_pop();
   ZK_N.ndx_drop(_ndx)
?};
ND.cntx_pop();
~~


\zl_po_re1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: Po redkacji pola ZMSLAPP.ZL
::  OLD: \zl_po_re1/polap.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=0;
{? ZMSLAPP.ZL=''
|| FUN.info('Proszę wypełnić pole.'@)
|? ZMSLAPP.ZL<>''
|| ZL.cntx_psh();
   ZL.clear();
   ZL.index('SYM');
   _wynik:=ZL.find_tab(0,'SYM',,'=',ZMSLAPP.ZL,'NRNZL',,'=',0,'ST_O',,'=','T');
   {? _wynik=0
   || FUN.info('Brak w słowniku otwartego zlecenia o podanym symbolu.'@)
   || VAR.A_ZLEC:=ZL.ref;
      VAR.A_WYD:=ZL.JORG;
      _wynik:=1
   ?};
   ZL.cntx_pop()
|| _wynik:=1
?};
win_disp();
_wynik


\zl_p_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: Przed redkacja pola ZMSLAPP.ZL6
::  OLD: \zl_p_red/polap.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZMSLAPP.ZL<>''
|| _ok:=1;
   ZL.cntx_psh();
   ZL.index('SYM');
   ZL.prefix(ZMSLAPP.ZL);
   {? ZL.first
   || {? ZL.RODZAJ='P'
      || _ok:=0
      || _ok:=1
      ?}
   || _ok:=0
   ?};
   ZL.cntx_pop();
   _ok
|| 1
?}


\zl_po_r3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: Po redakcji pola ZMSLAPP.ZL6
::  OLD: \zl_po_r3/polap.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=0;
{? ZMSLAPP.ZL6=''
||
:: FUN.info('Proszę wprowadzić symbol zlecenia'@);
   _wynik:=FUN.ask('W przypadku niewypełnionego pola, system będzie uwzględniał całe zlecenie nadrzędne.\n'
                   'Czy zlecenie podrzędne ma pozostać niewypełnione?'@
                  )
|| ZL.cntx_psh();
   ZL.clear();
   ZL.index('SYM');
   _wynik:=ZL.find_tab(0,'SYM',,'=',ZMSLAPP.ZL6,'NRNZL',,'<>',0);
   {? _wynik=0
   || FUN.info('Niepoprawny symbol zlecenia.'@)
   || VAR.A_ZLEC:=ZL.ref;
      VAR.A_WYD:=ZL.JORG;
      _wynik:=1
   ?};
   ZL.cntx_pop()
?};
_wynik


\ilegen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Tworzy tabelę tymczasową zawierającą informacje o tym co można utworzyć, na ile można wygenerowac raport,
::       oraz na jaką ilość zaktualizować przewodnik i zlecenie
::       Kontekst wywołania - rekord tabeli ZLGD albo ZGP
::   WE: [_a] - ZPARN.ref() - opcjonalnie partia do której ograniczyć analizę
::       [_b] - STRING - kontekst działania: 'ZLGD' albo 'ZGP'
::   WY: ilosc na jaka nalezy zaktualizowac ilosc wykonana w tabelach - obj.ilegen
::       Tabela tymczasowa w formacie: _obj.typ_tab
::  OLD: \ilegen/zl_akor1.fml
::----------------------------------------------------------------------------------------------------------------------
_zparn:=null();
{? var_pres('_a')=type_of(ZPARN.ref())
|| _zparn:=_a
?};

_context:='ZLGD';
{? var_pres('_b')=type_of('')
|| _context:=_b
?};

_typ_tab:=tab_tmp(1
   ,'NR' ,'INTEGER'   ,'Numer'@
   ,'TYP','INTEGER'   ,'#TYPYDOK.ref()'
   ,'ILE','REAL'      ,'Ilość'@
   ,'T'  ,'STRING[20]','TYPYDOK.T'
);
_ilegen:=0;

_chkak:=exec('get','#params',500631,2);

ZGH.cntx_psh(); ZGP.cntx_psh();

:: Podczytanie niezbędnego kontekstu
{? _context='ZLGD'
|| ZLGD.ZGH();
   ZLGD.ZGP();
   ZLGD.ZL();
   ~~
|? _context='ZGP'
|| ZGP.NRPRZ();
   ZGH.ZLEC();
   ~~
?};

:: Dla zlecenia na którym mogą powstawać dokumenty sprawdzamy przypisanie typu (nie musi być to ostatnia operacja)
{? ZL.RP='T'
|| {? ZGP.DOK<>null()
   ||
      {? _zparn<>null()
      || _ilegen:=exec('get_ilosc_zlgd','zl_partie',_zparn,ZGP.ref(),1);
         _ilepart:=exec('FindAndGet','#table',ZPARN,_zparn,,"IL",0);
         _ilegen:=exec('min','#math',_ilegen,_ilepart)
      ||
         _uj:=ZGP.ILGEN;
         _ilegen:=ZGP.IL;
         _ilegen-=_uj
      ?};
      exec('add_tab','magdok_prod',_typ_tab,_ilegen,ZGP.DOK,ZGP.NRP,ZGP.DOK().T)
   ?}
?};

ZGH.cntx_pop(); ZGP.cntx_pop();

_typ_tab.prefix();
_typ_tab.first();
_fo_pdok:=exec('get','#params',500701,2,null());
{!
|? {? _fo_pdok<>''
    & (' '+_fo_pdok)*(' '+_typ_tab.T+' ')>0
   || _wynik:=_typ_tab.ILE
   || _wynik:=0
   ?};
   _typ_tab.next()
!};
_wynik:=obj_new('ilegen','typ_tab');
_wynik.ilegen:=_ilegen;
_wynik.typ_tab:=_typ_tab;
_wynik


\add_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Dodaje pozycje do tabeli tymczasowej: typ dokumentu + ilosc
::   WE: _a - typ_tab
::       _b - Ilosc
::       _c - TYPYDOK.ref()
::       _d - Numer pozycji przewodnika
::       _e - TYPYDOK.T
::  OLD: \add_tab/zl_akor1.fml
::----------------------------------------------------------------------------------------------------------------------
_typ_tab:=_a;

{? _c<>null() & _b<>0
|| _typ_tab.prefix(_d);
   {? ~_typ_tab.first()
   || _typ_tab.TYP:=#_c;
      _typ_tab.ILE:=_b;
      _typ_tab.NR:=_d;
      _typ_tab.T:=_e;
      _typ_tab.add()
   ?}
?};
~~


\pozrap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2006]
:: OPIS: Wyświetla wszystkie pozycje dokumentów raportów produkcji dla danego zlecenia
::       Kontekst: VAR.A_ZLEC/ZPARN.ref()
::   WE: [_a] - INTEGER - 0/[1] - czy zakładka Raportów produkcji dostępna
::       [_b] - INTEGER - 0/[1] - czy zakładka Dokumenty magazynowe dostępna
::       [_c] - INTEGER - 0/[1] - czy zakładka Dokumenty kooperacji dostępna
::       [_d] - ND.ref() lub tab_tmp - dokument na jakim się ustawić lub tablica z dokumentami które zostawić w oknie
::       [_e] - INTEGER - kontekst wywołania - [1] - zlecenie, 0 - partia, 2 - ZLGD.ref, 3 - ZGP.ref, 4 - ZGH.ref
::  OLD: \pozrap/produ1.fml
::----------------------------------------------------------------------------------------------------------------------
_zak_rp:=1;
{? var_pres('_a')=type_of(0)
|| _zak_rp:=_a
?};
_zak_dok:=1;
{? var_pres('_b')=type_of(0)
|| _zak_dok:=_b
?};
_zak_koop:=1;
{? var_pres('_c')=type_of(0)
|| _zak_koop:=_c
?};

_view_nd:=null();
{? var_pres('_d')=type_of(ND.ref())
|| _view_nd:=_d
|? var_pres('_d')>100
|| _view_nd:=_d
?};
__Mode:=1;
{? var_pres('_e')=type_of(0)
|| __Mode:=_e
?};

_menu_pth:=BEER.MENU_PTH;
BEER.MENU_PTH:='MR';

:: Jak warsztatowe, to bez raportów produkcyjnych
{? VAR.A_ZLEC().TYP().WP='W'
|| exec('zlst_dok','magdok_prod',1);
   return()
?};

Cntx.psh(ZL,ND,DK,DK_L,VAR);
_exit:="Cntx.pop(ZL,ND,DK,DK_L,VAR)";

:: Raporty produkcji do zlecenia "montażowego" oraz "nad-zlecenia"
{? VAR.A_ZLEC().RODZAJ='P'
|| _zloz:=0
|| _zloz:=1
?};

_zgp:=null();
{? __Mode=3
|| _zgp:=ZGP.ref()
?};

_zgh:=null();
{? __Mode=4
|| _zgh:=ZGH.ref()
?};

VAR_DEL.delete('__TABQPD','__Tab1','__Tab2');

__TABQPD:=tab_tmp(3,
   'DT','DATE','ND.D - Data',
   'ZL','STRING[20]','ZL.SYM - Zlecenie',
   'ND','STRING[20]','ND.SYM - Dokument',
   'ND_REF','STRING[16]','Ref SQL dokumentu',
   'IL','REAL','DK.IL - Ilość',
   'JM','STRING[10]','jm',
   'CENA','REAL','DK.C - Cena',
   'WAR','REAL','DK.WAR - Wartość',
   'REF','STRING[16]','$DK.ref()',
   'POZ','INTEGER','DK.P - Pozycja',
   'OKRES','INTEGER','ND.AM - Okres',
   'ROK','INTEGER','ND.AR - Rok',
   'AKC','STRING[1]','Zaakceptowany',
   'MAG','STRING[8]','MG.SYM - Magazyn',
   'M_KTM','STRING[50]','M.KTM - Kod materiału',
   'M_N','STRING[100]','M.N - Nazwa materiału',
   'OPERATOR','STRING[30]','Operator',
   'SYM','STRING[25]','ZPARN.SYM - Symbol partii',
   'DK_SRC','STRING[20]','Dok. źródłowy',
   'DK_REF','STRING[16]','Ref SQL dokumentu',
   'DK_UID','STRING[48]','uidref dokumentu',
   'ZGH','STRING[30]','Przewodnik'
);

exec('war_hid','ceny',__TABQPD,'CENA','WAR');

{? _zak_rp>0
|| exec('refresh_rp','magdok_prod',__TABQPD,__Mode)
?};

__TABQPD.fld_attr(,2);
__TABQPD.fld_attr('OPERATOR',3);
__TABQPD.fld_attr('ROK',,2);
__TABQPD.fld_attr('OKRES',,2);
__TABQPD.fld_attr('POZ',,2);
__TABQPD.fld_attr('CENA',,2);

_wer:=__TABQPD.mk_sel('Pozycje raportów produkcji'@,'P',,'zl_pozrap'+$_zloz,1,15,,,'U',,,,,'html_maximized',,'on');
{? _zloz || __TABQPD.win_fld(_wer,,'ZL',,,15,,,'Zlecenie'@) ?};
__TABQPD.win_fld(_wer,,'DT',,,10,,,'Data'@);
__TABQPD.win_fld(_wer,,'ROK',,,4,,,'Rok'@);
__TABQPD.win_fld(_wer,,'OKRES',,,5,,,'Okres'@);
__TABQPD.win_fld(_wer,,'MAG',,,8,,,'Magazyn'@);
__TABQPD.win_fld(_wer,,'ND',,,15,,,'Dokument'@);
__TABQPD.win_fld(_wer,,'POZ',,,-3,,,'Pozycja'@);
__TABQPD.win_fld(_wer,,'M_KTM',,,17,,,'Kod materiału'@);
__TABQPD.win_fld(_wer,,'M_N',,,25,,,'Nazwa materiału'@);
__TABQPD.win_fld(_wer,,'ZGH',,,15,,,'Przewodnik'@);
{? __Mode>0 || __TABQPD.win_fld(_wer,,'SYM',,,13,,,'Symbol partii'@) ?};
__TABQPD.win_fld(_wer,,'IL',,,10,ST.DOKL,,'Ilość'@);
__TABQPD.win_fld(_wer,,'JM',,,10,,,'jm'@);
__TABQPD.win_fld(_wer,,'CENA',,,10,2,,'Cena'@);
__TABQPD.win_fld(_wer,,'WAR',,,10,2,,'Wartość'@);
__TABQPD.win_fld(_wer,,'AKC' ,,,-5,,,'Zaakceptowany'@,0,,2,,"\'T\'","\'N\'");

_formula:="
   _tab:=cur_tab(1,1);
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(_tab.DK_UID));
   DK.prefix();
   {? DK.seek(_tab.DK_UID)
   || ND.use(ref_name(DK.N));
      exec('his_dost','magdok_wspolne')
   || FUN.info('Dokument został usunięty.'@);
      _tab.cntx_psh();
      _tab.prefix();
      exec('refresh_rp','magdok_prod',_tab,__Mode);
      _tab.cntx_pop()
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
";
__TABQPD.win_act(_wer,,'Formuła','Historia dostawy'@@,,,_formula,,,,,,'H');

_formula:="
   _tab:=cur_tab(1,1);
   _dk_ref:=_tab.DK_UID;
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(_dk_ref));
   DK.prefix();
   {? DK.seek(_dk_ref)
   || ND.use(ref_name(DK.N));
      exec('disp_dk','magdok_wspolne',1,$DK.N,,,1)
   || FUN.info('Dokument został usunięty.'@)
   ?};
:: Odświeżam tabelkę bo w akcji pokaż dokument dokument mógł zniknąć albo zmienić swój stan
   _tab.cntx_psh();
   _tab.prefix();
   exec('refresh_rp','magdok_prod',_tab,__Mode);
   _tab.cntx_pop();
   DK.cntx_pop();
   ND.cntx_pop();

   _tab.blank();
   _tab.DK_UID:=_dk_ref;
   _tab.find_rec();
   ~~
";
__TABQPD.win_act(_wer,,'Formuła','Pokaż &dokument'@@,,,_formula,,1,,,,'D');

__TABQPD.win_act(_wer,,'Menu','Fu&nkcje'@@,,,,,,,,,'N');

_formula:="
   _tab:=cur_tab(1,1);
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(_tab.DK_UID));
   DK.prefix();
   {? DK.seek(_tab.DK_UID)
   || ND.use(ref_name(DK.N));
      ND.prefix();
      {? ND.seek(DK.N)
      || _stat_rej:=ND.STAT_REJ;
         exec('wyc_dokr','magdok_nag');
         {? ND.STAT_REJ<>_stat_rej
         || _tab.cntx_psh();
            _tab.prefix();
            exec('refresh_rp','magdok_prod',_tab,__Mode);
            _tab.cntx_pop()
         ?}
      ?}
   || FUN.info('Dokument został usunięty.'@);
      _tab.cntx_psh();
      _tab.prefix();
      exec('refresh_rp','magdok_prod',_tab,__Mode);
      _tab.cntx_pop()
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
";
__TABQPD.win_act(_wer,,'Formuła','&Wycofaj dokument'@@,'#N',,_formula,,,,,,'W');
task_attach('LMG_MAG_DAPZ');
task_attach('LMG_MAG_DWYD');
task_attach('LMG_MAG_EWMG');

_formula:="
   _tab:=cur_tab(1,1);
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(_tab.DK_UID));
   DK.prefix();
   {? DK.seek(_tab.DK_UID)
   || ND.use(ref_name(DK.N));
      ND.prefix();
      {? ND.seek(DK.N)
      || exec('nd_usun','magdok_nag');
         {? ~DK.seek(_tab.DK_UID)
         || _tab.cntx_psh();
            _tab.prefix();
            exec('refresh_rp','magdok_prod',_tab,__Mode);
            _tab.cntx_pop()
         ?}
      ?}
   || FUN.info('Dokument został usunięty.'@);
      _tab.cntx_psh();
      _tab.prefix();
      exec('refresh_rp','magdok_prod',_tab,__Mode);
      _tab.cntx_pop()
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
";
__TABQPD.win_act(_wer,,'Formuła','&Usuń dokument'@@,'#N',,_formula,,,,,,'U');
task_attach('LMG_MAG_DAPZ');
task_attach('LMG_MAG_DWYD');

_formula:="
   _tab:=cur_tab(1,1);
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(_tab.DK_UID));
   DK.prefix();
   {? DK.seek(_tab.DK_UID)
   || ND.use(ref_name(DK.N));
      exec('todo_select','#b__box',DK.N().uidref())
   || FUN.info('Dokument został usunięty.'@);
      _tab.cntx_psh();
      _tab.prefix();
      exec('refresh_rp','magdok_prod',_tab,__Mode);
      _tab.cntx_pop()
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
";
__TABQPD.win_act(_wer,,'Formuła','Zadania&'@@,,,_formula,,,,,,'Ż');

__TABQPD.win_act(_wer,,'Kolejność');
__TABQPD.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','RPD#01')",,0,,,,'L',,'target=window');
__TABQPD.win_act(_wer,,'Rekord',,,,"{? __TABQPD.AKC='T' || Color.rekprzed('RPD#01#01') || '' ?}",,1);

_formula:="
   _tab:=cur_tab(1,1);
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(_tab.DK_UID));
   DK.prefix();
   {? DK.seek(_tab.DK_UID)
   || ND.use(ref_name(DK.N));
      exec('disp_dkm','magdok_poz');
      _result:=1
   || FUN.info('Dokument został usunięty.'@);
      _tab.cntx_psh();
      _tab.prefix();
      exec('refresh_rp','magdok_prod',_tab,__Mode);
      _tab.cntx_pop()
   ?};
   DK.cntx_pop();
   ND.cntx_pop();
   ~~
";
__TABQPD.win_act(_wer,,'Wyświetl',,,,_formula);

{? _zak_dok>0
|| _tmp:={? __Mode>0 || exec('zlst_dok','magdok_prod',2,_zgp,_zgh) ||  exec('zlst_dok','magdok_prod',5,_zgp,_zgh) ?};
   __Tab1:=_tmp.TAB;
   _werr:=_tmp.WER
?};

{? _zak_koop>0
|| _tmp2:=exec('zlst_dok','magdok_prod',4,_zgp,_zgh);
   __Tab2:=_tmp2.TAB;
   _werrk:=_tmp2.WER
?};

::       [_e] - INTEGER - kontekst wywołania - [1] - zlecenie, 0 - partia, 2 - ZLGD.ref, 3 - ZGP.ref, 4 - ZGH.ref

_title:=
   {? __Mode=0
   || 'Dokumenty do partii'@
   |? __Mode=2
   || 'Dokumenty do robocizny'@
   |? __Mode=3
   || 'Dokumenty do pozycji przewodnika'@
   |? __Mode=4
   || 'Dokumenty do przewodnika'@
   || 'Dokumenty do zlecenia'@
   ?};
_grp:=__TABQPD.grp_make(_title,,'zl_doki'+$_zloz,1,16,,,'html_maximized');
_after_refresh:="
   DK_L.index('DK');
   DK.prefix();
   {? DK.seek(__TABQPD.REF,ref_name(__TABQPD.REF))
   || ND.use(ref_name(DK.N));
      DK_L.prefix(DK.ref(),null());
      {? ~DK_L.first()
      || DK_L.LOK:=null();
         DK_L.IL:=0;
         DK_L.IL2:=0;
         DK_L.DT:=date(0,0,0)
      ?}
   || ND.use((5+ND.name())+(DK.name()+3));
      DK_L.LOK:=null();
      DK_L.IL:=0;
      DK_L.IL2:=0;
      DK_L.DT:=date(0,0,0)
   ?};
   ~~
";
_before:="";
{? _zak_rp>0
|| __TABQPD.grp_sel(_grp,,_wer,'Raporty produkcji'@,_after_refresh,,,12,,,,,'maximized_with_title')
?};
{? _zak_dok>0
||
:: Modyfikacje w zakładce z dokumentami RP mogły wpłynać na dokumenty - odświeżenie zawartości
   {? _zak_rp>0
   || _before:="
         exec('refresh_dok','magdok_prod',__Tab1,{? __Mode>0 || 2 || 5 ?},\'"+$_zgp+"\',\'"+$_zgh+"\');
         ~~
      ";
      _before:=$_before
   ?};

   __TABQPD.grp_sel(_grp,__Tab1,_werr,'Dokumenty magazynowe'@,,,,15,_before,,,,'maximized_with_title')
?};
{? _zak_koop>0
||
:: Modyfikacje w zakładce z dokumentami RP mogły wpłynać na dokumenty - odświeżenie zawartości
   {? _zak_rp>0
   || _before:="
         exec('refresh_dok','magdok_prod',__Tab2,4,\'"+$_zgp+"\',\'"+$_zgh+"\');
         ~~
      ";
      _before:=$_before
   ?};
   __TABQPD.grp_sel(_grp,__Tab2,_werrk,'Dokumenty kooperacji'@,,,,15,_before,,,,'maximized_with_title')
?};
__TABQPD.win_sel(_grp);
{? type_of(_view_nd)=type_of(ND.ref()) & _view_nd<>null()
|| _i2:=__TABQPD.ndx_tmp('',1,'ND_REF',,0, 'POZ',,0);
   __TABQPD.cntx_psh();
   __TABQPD.index(_i2);
   __TABQPD.prefix($_view_nd);
   __TABQPD.first();
   __TABQPD.select(,1);
   __TABQPD.cntx_pop()
|? type_of(_view_nd)>100
||  __TABQPD.cntx_psh();
   {? __TABQPD.first()
   || _can_continue:=1;
      {!
      |? _next:=0;
         _ref_nxt:=null();
         __TABQPD.cntx_psh();
         {? __TABQPD.next()
         || _ref_nxt:=__TABQPD.ref()
         ?};
         __TABQPD.cntx_pop();

         {? __TABQPD.ND_REF<>''
         ||
            _view_nd.prefix(__TABQPD.ND_REF);
            {? _view_nd.first()=0
            || _can_continue:=__TABQPD.del(,1)
            ?}
         ?};

         {? _ref_nxt<>null()
         || _next:=__TABQPD.seek(_ref_nxt)
         ?};
         _next>0 & _can_continue>0
      !}
   ?};
   __TABQPD.first();
   __TABQPD.select(,1);
   __TABQPD.cntx_pop()
|| __TABQPD.select()
?};

VAR.fld_fml('REAL','BEFORE_DISPLAY',"*");
VAR.fld_fml('REAL3','BEFORE_DISPLAY',"*");
VAR.fld_fml('REAL4','BEFORE_DISPLAY',"*");
VAR_DEL.delete('__TABQPD','__Tab1','__Tab2','__Mode');

_exit();
BEER.MENU_PTH:=_menu_pth;
~~


\zlnd_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Wyświetla dokumenty wygenerowane z poziomu rejestracji akordu
::       Kontekst wywołania: rekord tabeli ZLGD
::  OLD: \zlnd_sel/zl_akor1.fml
::----------------------------------------------------------------------------------------------------------------------
exec('pozrap','magdok_prod',1,0,0,,2);
~~


\zgp_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Wyświetla dokumenty RP wygenerowane do pozycji przewodnika
::       Kontekst wywołania: rekord tabeli ZGP
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=1;
ZGP.cntx_psh();
{? cur_tab(1,1)=PROD_REJ
||
   {? PROD_REJ.ZGP<>null()
   || PROD_REJ.ZGP()
   || FUN.emsg('Funkcja dostępna tylko dla zapisów powiązanych z przewodnikiem.'@)
   ?}
?};
{? _can_continue>0
|| exec('pozrap','magdok_prod',1,1,0,,3)
?};
ZGP.cntx_pop();
~~


\zgp_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2011]
:: OPIS: Wyświetla dokumenty zarejestrowane do pozycji przewodnika
::  OLD: \zgp_dok/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
params_exec('zgp_sel','magdok_prod');
~~


\get_RDOK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Pobiera TYPYDOK.ref() domyślnego dokumentu raportującego produkcję na magazyn _a
::   WE: _a - MG.ref()
::       _b - czy włączone dialogi (1) / bez dialogów (0)
::   WY: TYPYDOK.ref() / null()
::----------------------------------------------------------------------------------------------------------------------
_mg:=_a;
_mg_sym:=exec('FindAndGet','#table',MG,_mg,,"SYM",'');
_dialog:=_b;

_RDOK:=null();

_typdok:=exec('GetTabFromList','#table',TYPYDOK,'T',exec('get','#params',500702,2,null()));
{? type_of(_typdok)<>type_of(SYSLOG) | _typdok.first()=0
|| FUN.wdrerror(
      '(get_RDOK/magdok_prod.fml)\n\n'+
      'Wystąpił błąd podczas tworzenia tabeli domyślnych typów dokumentów magazynowych 500702.'@
   );
   return(null())
?};

:: dodatkowe sprawdzenie czy typy nie są przypadkiem przypisane do magazynu = to wtedy je usuwa z listy
{? exec('FindInSet','#table','T2MG','T',_mg)<>null()
|| _typdok.clear();
   {? _typdok.last()
   || {!
      |? _typs:=exec('FindAndGet','#table',TYPYDOK,_typdok.SQLREF);
         {? exec('FindInSet','#table','T2MG','T',_typs,_mg)<>null()
         || _typdok.prev()
         || _typdok.del()
         ?}
      !}
   ?}
?};

{? _typdok.first()=0
|| {? _dialog
   || FUN.error(
         'Nie zdefiniowano formuły systemu nr %1\n'
         'lub wskazany w tym parametrze typ dokumentu nie jest przypisany do magazynu %2.'@['500702',_mg_sym]
      )
   ?};
   return(null())
|| TYPYDOK.cntx_psh();
   TYPYDOK.clear();
   {? TYPYDOK.seek(_typdok.REF,)
   || _RDOK:=TYPYDOK.ref()
   ?};
   TYPYDOK.cntx_pop()
?};
_RDOK


\kontr_pdp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [7.62]
:: OPIS: niezaakceptowane dokumenty magazynowe powiązane ze zleceniem/grupą
::   WE: ustawione VAR.A_ZLEC = ZL.ref() lub VAR.A_GROP = GROP.ref()
::       _a - T: analizować, N: nic nie robić
::       [_b] - parametr wywołania 'A','R',['S']
::       [_c] - tabela z niezaakceptowanymi dokumentami, jeżeli podana to aktualizowane dane
::       [_d] - INTEGER - tabela, dla której uruchamiana: [0] - zlecenia (ZL), 1 - grupy operacji (GROP)
::   WY: 0: ok, _tab: są dokumenty niezaakceptowane
::  OLD: \kontr_pdp/zlec2.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')=type_of('') || _param:=_b || _param:='S' ?};
{? var_pres('_c')>100 || _aktu:=1; _tab_rob:=_c || _aktu:=0; _tab_rob:=~~ ?};
{? var_pres('_d')=type_of(0) || _where:=_d || _where:=0 ?};

{? _a='T'
|| {? _where=0
   || _ref:=VAR.A_ZLEC
   || _ref:=VAR.A_GROP
   ?};
   _tab:=sql('
    select
     case M.R
     when \'W\' then \':_b\'
     when \'P\' then \':_c\'
     when \'S\' then \':_d\'
     when \'T\' then \':_e\'
                else \'\'
     end as WPM,
     M.KTM KOD,
     M.N NAZ,
     ND.SYM SYMDOK,
     SLO.KOD SLO,
     ND.D DATA,
     DK.REFERENCE as DK_REF,
     ND.REFERENCE as ND_REF
    from @DK
     join M using(DK.M,M.REFERENCE)
      join @ND using(DK.N,ND.REFERENCE)
       left join SLO using(DK.WYD,SLO.REFERENCE)
    where '
    +{? _where=0 || ' DK.ZL=:_a ' || ' DK.GROP=:_a ' ?}+'
      and ND.Z=''N''
    order by KOD, SYMDOK',
   _ref,'Wyrób gotowy'@,'Półprodukt'@,'Surowiec'@,'Wyrób zewnętrzny'@);
:: Przepisanie danych do tabeli docelowej w przypadku aktualizacji danych
   {? _aktu>0
   ||
::    Zapamiętanie refa, do którego dokumentu wrócić
      _dok:=_tab_rob.DK_REF;
      exec('tab2tab','#table',_tab,_tab_rob,0,1);
      _tab_rob.find_tab(,'DK_REF',,'=',_dok)
   ?};
   {? type_of(_tab)>100
   || {? _tab.first() & _aktu=0
      || _ident:={? _where=0 || 'zlec' || 'grop' ?}+'2_pdp_sel';
         _wer:=_tab.mk_sel('Niezaakceptowane dokumenty magazynowe'@,'N',0,_ident,,,,,'U');
         _tab.win_fld(_wer,,'WPM',,,16,,,'Rodzaj materiału'@,,'Rodzaj materiału'@);
         _tab.win_fld(_wer,,'KOD',,,,,,'Indeks materiału'@);
         _tab.win_fld(_wer,,'SYMDOK',,,,,,'Symbol dokumentu'@);
         _tab.win_fld(_wer,,'DATA',,,,,,'Data'@);
         _tab.win_fld(_wer,,'SLO',,,,,,'Wydział'@);
         {? _param='R'
         || {? _where=0
            || _tab.win_act(_wer,,'Formuła','Zamknij zlecenie'@@,,'Zamknij zlecenie mimo niezgodności'@,
                  "sel_exit()",,1,,,,'Z',,'target=window')
            || _tab.win_act(_wer,,'Formuła','Zamknij grupę'@@,,'Zamknij grupę mimo niezgodności'@,
                  "sel_exit()",,1,,,,'Z',,'target=window')
            ?}
         ?};
         _formula:="
            _stan_b:=exec('FindAndGet','#table',ND,cur_tab(1,1).ND_REF,,\"STAT_REJ\",'');
            exec('disp_dk','magdok_wspolne',1,exec('FindAndGet','#table',DK,cur_tab(1,1).DK_REF,,\"$N\",''),,,1);
            _stan_a:=exec('FindAndGet','#table',ND,cur_tab(1,1).ND_REF,,\"STAT_REJ\",'');
            {? _stan_b<>_stan_a
            || VAR.RFR_LIM:=VAR.RFR_NLI:=1;
               exec('kontr_pdp','magdok_prod','T',,cur_tab(1,1),{? VAR.A_GROP<>null() || 1 || 0 ?})
            ?};
            ~~
         ";
         _tab.win_act(_wer,,'Formuła','Pokaż &dokument'@@,,,_formula,,,,,,'D');
         {? _where=0
         || _formula:="params_set(params_get()); rep_exec('tte_rapzmkzl',,1)"
         || _formula:="params_set(params_get()); rep_exec('tte_rapzmkgr',,1)"
         ?};
         _tab.win_act(_wer,,'Formuła','Druku&j'@@,,,_formula
            ,,{? _param='R' || 0 || 1 ?},,,,'J',,'target=window,icon=print');
         _formula:="
            ND.cntx_psh();
            DK.cntx_psh();
            DK.use(8+cur_tab(1,1).DK_REF);
            DK.clear();
            {? DK.seek(cur_tab(1,1).DK_REF)
            || ND.use(8+$DK.N);
               exec('disp_dkm','magdok_poz')
            ?};
            DK.cntx_pop();
            ND.cntx_pop();
            ~~

         ";
         _tab.win_act(_wer,,'Wyświetl',,,,_formula);
         _tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Druku&j'@],'menu:J');
         {? _param='R'
         || {? _where=0
            || _tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Zamknij zlecenie'@],'menu:Z')
            || _tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Zamknij grupę'@],'menu:Z')
            ?}
         ?};
         _tab.win_sel(_wer);
::----------------------------------------------------------------------------------------------------------------------
:: Wynik - jeśli są jakieś rekordy, to niedobrze
::----------------------------------------------------------------------------------------------------------------------
         _res:=obj_new(2);
         _res[1]:=_tab;
         _res[2]:=_wer;
         _res
      || 0
      ?}
   || exec('err_sql','#sql');
      0
   ?}
|| 0
?}


\refresh_rp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Ładuje do tabelki przekazanej argumentem dokumenty RP
::   WE: _a - tab_tmp() - tabelka którą zasilić
::       [_b] - INTEGER - tryb ładowania dokumentów: [1] - dla zlecenia, 0 - dla partii, 2 - dla ZLGD, 3 - dla ZGP
::                        4 - dla ZGH
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_mode:={? var_press('_b')=type_of(0) || _b || 1 ?};
ZL.cntx_psh();
ND.cntx_psh();
DK.cntx_psh();
MG.cntx_psh();
TYPYDOK.cntx_psh();
USERS.cntx_psh();
JM.cntx_psh();
M.cntx_psh();
ZPARN.cntx_psh();
ZGH.cntx_psh();

_tab.erase();

_zlecenia:=tab_tmp(1,'REF','INTEGER','#ZL.ref()');

:: Raporty produkcji do zlecenia "montażowego" oraz "nad-zlecenia"
{? _mode=0
|| _zlecenia.REF:=#ZPARN.ZL;
   _zlecenia.add()
|? _mode=2
|| _zlecenia.REF:=#ZLGD.ZL;
   _zlecenia.add()
|? _mode=3
|| _zlecenia.REF:=#ZGP.ZL;
   _zlecenia.add()
|? _mode=4
|| _zlecenia.REF:=#ZGH.ZLEC;
   _zlecenia.add()
|? VAR.A_ZLEC().RODZAJ='P'
|| _zlecenia.REF:=#VAR.A_ZLEC;
   _zlecenia.add()
|| ZL.index('NRNZL');
   ZL.prefix(VAR.A_ZLEC().UNRZL);
   {? ZL.first()
   || {!
      |? _zlecenia.REF:=#ZL.ref();
         _zlecenia.add();
         ZL.next()
      !}
   ?}
?};

_rule_dk:="";
_rule_zlgd:="";
{? _mode=2
||
   _rule_zlgd:="
      _args:=_a;

      _dk_uidref:=exec('FindAndGet','#table',ZLGD,_args.ZLGD,,\"DK\");

      {? _dk_uidref<>''
      || ND.cntx_psh();
         DK.cntx_psh();
         DK.use(ref_name(_dk_uidref));
         _msk:=(5+ND.name())+(DK.name()+3);
         ND.use(_msk);
         DK.prefix();
         {? DK.seek(_dk_uidref)
         || {? DK.N().TYP().KOOP<>'T' & (TYPYDOK.WYR='T' | TYPYDOK.WYR='U')
            || exec('rp2tab','magdok_prod',_args)
            ?}
         ?};
         DK.cntx_pop();
         ND.cntx_pop()
      ?};
      _mask_zlgd:=ZLGD.name();
      ZL_WYRGD.cntx_psh();
      ZL_WYRGD.use(5+ZL_WYRGD.name()+(_mask_zlgd+3));
      ZL_WYRGD.index('ZLGD');
      ZL_WYRGD.prefix(_args.ZLGD);
      {? ZL_WYRGD.first()
      || {!
         |?
            {? ZL_WYRGD.DK<>''
            ||
               ND.cntx_psh();
               DK.cntx_psh();
               DK.use(ref_name(ZL_WYRGD.DK));
               _msk:=(5+ND.name())+(DK.name()+3);
               ND.use(_msk);
               DK.prefix();
               {? DK.seek(ZL_WYRGD.DK)
               || {? DK.N().TYP().KOOP<>'T' & (TYPYDOK.WYR='T' | TYPYDOK.WYR='U')
                  || exec('rp2tab','magdok_prod',_args)
                  ?}
               ?};
               DK.cntx_pop();
               ND.cntx_pop()
            ?};
            ZL_WYRGD.next()
         !}
      ?};
      ZL_WYRGD.cntx_pop();
      1
   "
||
   _rule_dk:="
      _args:=_b;
      _msk:='nagdo'+(DK.name()+3);
      ND.use(_msk);
      {? _args.MODE='ZL'
      || DK.index('DOKZL');
         DK.prefix(_args.ZL)
      |? _args.MODE='ZPARN'
      || DK.index('PARTIA');
         DK.prefix(_args.ZPARN)
      |? _args.MODE='ZGP'
      || DK.index('ZGP');
         DK.prefix(_args.ZGP)
      |? _args.MODE='ZGH'
      || DK.index('ZGH');
         DK.prefix(_args.ZGH)
      ?};
      {? DK.first()
      || {!
         |? {? DK.N().TYP().KOOP<>'T' & (TYPYDOK.WYR='T' | TYPYDOK.WYR='U')
            || exec('rp2tab','magdok_prod',_args)
            ?};
            DK.next()
         !}
      ?}
   "
?};

ZL.clear();
_args:=obj_new('TAB','ZL','M','ZPARN','MODE','ZLGD','ZGP','ZGH','TAB_DK');
_args.TAB:=_tab;
_args.ZPARN:=null();
_args.ZLGD:=null();
_args.ZGP:=null();
_args.ZGH:=null();
_args.MODE:={? _mode=0
            || 'ZPARN'
            |? _mode=2
            || 'ZLGD'
            |? _mode=3
            || 'ZGP'
            |? _mode=4
            || 'ZGH'
            || 'ZL'
            ?};

{? _zlecenia.first()
|| {!
   |? {? ZL.seek(_zlecenia.REF,)
      || _args.ZL:=ZL.ref();
         _args.M:=ZL.KTM;
         _args.ZPARN:={? _mode=0 || ZPARN.ref() ?};
         _args.ZLGD:={? _mode=2 || ZLGD.ref() ?};
         _args.ZGP:={? _mode=3 || ZGP.ref() ?};
         _args.ZGH:={? _mode=4 || ZGH.ref() ?};

         _tabname:='';
         _msk_start:='';
         _msk_stop:='';

         {? _mode=2
         || _rule_zlgd(_args)
         ?};

         {? _rule_dk<>""
         || _tabname:='dokma';
            _msk_start:=_tabname+ZL.ODDZ+(2-$(ZL.OD~1));
            {? ZL.STAN='Z'
            || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
               _msk_stop:=_tabname+ZL.ODDZ+(2-$(_rok))
            || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
               _msk_stop:=_tabname+ZL.ODDZ+(2-$(_rok))
            ?};
            exec('for_each_mask','#table',DK,_rule_dk,_msk_start,_msk_stop,_args)
         ?}
      ?};
      _zlecenia.next()
   !}
?};
ZL.cntx_pop();
ND.cntx_pop();
DK.cntx_pop();
MG.cntx_pop();
TYPYDOK.cntx_pop();
USERS.cntx_pop();
JM.cntx_pop();
M.cntx_pop();
ZPARN.cntx_pop();
ZGH.cntx_pop();
~~


\rp2tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS:
::   WE:
::   WY:
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_args.TAB.blank();
_args.TAB.ZL:=DK.ZL().SYM;
_args.TAB.ND:=DK.N().SYM;
_args.TAB.ND_REF:=$DK.N;
_args.TAB.DK_REF:=$DK.ref();
_args.TAB.DK_UID:=DK.uidref();
_args.TAB.DT:=ND.D;
_args.TAB.IL:={? DK.PLUS='T' | exec('is_usluga_typ','zl_uslugi',DK.N().TYP) || DK.IL || -DK.IL ?};
_args.TAB.CENA:=DK.C;
_args.TAB.WAR:={? DK.PLUS='T' | exec('is_usluga_typ','zl_uslugi',DK.N().TYP) || DK.WAR || -DK.WAR ?};
_args.TAB.REF:=$DK.ref();
_args.TAB.POZ:=DK.P;
_args.TAB.OKRES:=ND.AM;
_args.TAB.ROK:=ND.AR;
_args.TAB.AKC:=ND.Z;
_args.TAB.MAG:=ND.MAG().SYM;
_args.TAB.M_KTM:=DK.M().KTM;
_args.TAB.M_N:=M.N;
_args.TAB.JM:=M.J().KOD;
_args.TAB.OPERATOR:=ND.US().DANE;
_args.TAB.SYM:=DK.PARTIA().SYM;
_args.TAB.ZGH:=DK.ZGH().NRPRZ;
{? DK.SRDK<>'' & DK.SRDK<>$DK.ref()
|| _srdk:=DK.SRDK;
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(8+DK.SRDK);
   ND.use((5+ND.name())+(DK.name()+3));
   DK.clear();
   {? DK.seek(_srdk)
   || _args.TAB.DK_SRC:=DK.N().SYM
   ?};
   DK.cntx_pop();
   ND.cntx_pop()
?};
_args.TAB.add();
~~


\refresh_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Odświeża pozostałe dokumenty powiązane ze zleceniem / grupą operacji (w zleżności od opcji)
::   WE: _a - tab_tmp() - tabelka którą zasilić
::       _b - INTEGER - opcja
::       [_c] - ZGP.ref/ZGP.ref - pozycja przewodnika
::       [_d] - ZGH.ref/$ZGH.ref - przewodnik zlecenia
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_opcja:=_b;
_zgp:=null();
{? var_pres('_c')=type_of(ZGP.ref())
|| _zgp:=_c
|? var_pres('_c')=type_of('')
|| _zgp:=exec('FindAndGet','#table',ZGP,_c,,,null())
?};
_zgh:=null();
{? var_pres('_d')=type_of(ZGH.ref())
|| _zgh:=_d
|? var_pres('_d')=type_of('')
|| _zgh:=exec('FindAndGet','#table',ZGH,_d,,,null())
?};

_dk_ref:=_tab.DK_UID; _tab.erase();

_args:=obj_new('TAB','OPCJA','ZL','GROP','ZLIM','ZGP','ZGH','ZPARN');
_args.TAB:=_tab;
_args.OPCJA:=_opcja;
_args.ZL:={? _opcja=1 | _opcja=2 | _opcja=4 || VAR.A_ZLEC |? _opcja=3 || '' ?};
_args.GROP:={? _opcja=1 | _opcja=2 | _opcja=4 || VAR.A_GROP |? _opcja=3 || '' ?};
_args.ZLIM:={? _opcja=3 || ZLIM.ref() || '' ?};
_args.ZPARN:={? _opcja=5 || ZPARN.ref() || '' ?};
_args.ZGP:=_zgp;
_args.ZGH:=_zgh;

_rule:="
   _args:=_b;
   _rule:=\"
      _args:=_a;
      ND.cntx_psh();
      ND.use((5+ND.name())+(DK.name()+3));
      {? _args.ZGP<>null() & _args.OPCJA=4
      || DK.index('ZGP');
         DK.prefix(_args.ZGP)
      |? _args.ZGH<>null() & _args.OPCJA=4
      || DK.index('ZGH_2');
         DK.prefix(_args.ZGH)
      |? (_args.OPCJA=1 | _args.OPCJA=2 | _args.OPCJA=4) & _args.ZL<>null()
      || DK.index('DOKZL');
         DK.prefix(_args.ZL)
      |? (_args.OPCJA=1 | _args.OPCJA=2 | _args.OPCJA=4) & _args.GROP<>null()
      || DK.index('DOKGROP');
         DK.prefix(_args.GROP)
      |? _args.OPCJA=3
      || DK.index('ZLIM');
         DK.prefix(ref_name(_args.ZLIM),_args.ZLIM)
      |? _args.OPCJA=5
      || DK.index('PARTIA');
         DK.prefix(_args.ZPARN)
      ?};
      ZLIM.cntx_psh();
      ZGP.cntx_psh();
      ZGP.prefix();
      {? DK.first()
      || {!
         |?
            DK.N().TYP();
            {? DK.ZLIM<>null()
            || ZLIM.use(8+$DK.ZLIM)
            ?};
            {? TYPYDOK.WYR='N' &
               {? _args.OPCJA=4 || TYPYDOK.KOOP='T' |? _args.OPCJA=2 || TYPYDOK.KOOP<>'T' & TYPYDOK.ZLEC='T' || 1 ?} &
               {? _args.OPCJA<>4 & _args.ZGP<>null() || DK.ZLIM().ZGP=_args.ZGP || 1 ?} &
               {? _args.OPCJA<>4 & _args.ZGH<>null() || DK.ZLIM().ZGP().NRPRZ=_args.ZGH || 1 ?}
            || _args.TAB.blank();
               _args.TAB.ODDZ:=ND.ODDZ;
               _args.TAB.DK_REF:=$DK.ref();
               _args.TAB.DK_UID:=DK.uidref();
               _args.TAB.SYM:=ND.SYM;
               _args.TAB.AKC:=DK.Z;
               _args.TAB.STAT_REJ:=ND.STAT_REJ;
               _args.TAB.T:=ND.TYP().T;
               _args.TAB.D:=ND.D;
               _args.TAB.P:=DK.P;
               _args.TAB.IL:={? DK.PLUS='T' || -DK.IL || DK.IL ?};
               _args.TAB.C:=DK.C;
               _args.TAB.WAR:={? DK.PLUS='T' || -DK.WAR || DK.WAR ?};
               _args.TAB.PRDK:=DK.PRDK;
               _args.TAB.M:=$DK.M;
               _args.TAB.MAG:=ND.MAG().SYM;
               _args.TAB.M_KTM:=DK.M().KTM;
               _args.TAB.M_N:=M.N;
               _args.TAB.JM:=M.J().KOD;
               _args.TAB.OPERATOR:=ND.US().DANE;
               _args.TAB.ZL_SYM:=DK.ZL().SYM;
               _args.TAB.KH:=ND.KH().SKR;
               {? DK.SRDK<>'' & DK.SRDK<>$DK.ref()
               || _srdk:=DK.SRDK;
                  ND.cntx_psh();
                  DK.cntx_psh();
                  DK.use(8+DK.SRDK);
                  ND.use((5+ND.name())+(DK.name()+3));
                  DK.clear();
                  {? DK.seek(_srdk)
                  || _args.TAB.DK_SRC:=DK.N().SYM
                  ?};
                  DK.cntx_pop();
                  ND.cntx_pop()
               ?};
               _args.TAB.add()
            ?};
            DK.next()
         !}
      ?};
      ZLIM.cntx_pop();
      ZGP.cntx_pop();
      ND.cntx_pop();
      ~~
   \";
   _rule(_args);
   {? _args.OPCJA<>3 & _args.OPCJA<>5
   || ZL.cntx_psh();
      _zl:=_args.ZL;
      ZL.clear();
      {? ZL.seek(_args.ZL)
      || {? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
         || ZL.index('NRNZL');
            ZL.prefix(ZL.UNRZL);
            {? ZL.first()
            || {!
               |? _args.ZL:=ZL.ref();
                  _rule(_args);
                  ZL.next()
               !}
            ?}
         ?}
      ?};
      _args.ZL:=_zl;
      ZL.cntx_pop()
   ?}
";

{? VAR.A_GROP<>null()
|| _msk_start:=(5+DK.name())+VAR.A_GROP().ODDZ+(2-$(GROP.DATA~1));
   _rok:=exec('max','#math',GROP.ROK_MAX,GROP.DATA~1);
   _msk_stop:=(5+DK.name())+GROP.ODDZ+(2-$(_rok))
|| _msk_start:=(5+DK.name())+VAR.A_ZLEC().ODDZ+(2-$(ZL.OD~1));
   {? ZL.STAN='Z'
   || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
      _msk_stop:=(5+DK.name())+ZL.ODDZ+(2-$(_rok))
   || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
      _msk_stop:=(5+DK.name())+ZL.ODDZ+(2-$(_rok))
   ?}
?};

exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_stop,_args);

_tab.blank();
_tab.DK_UID:=_dk_ref;
_tab.find_rec();
~~


\robocizna_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Argumenty dla formuł związanych z robocizną
::   WY: obj_new
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('ZGP','ZPARN','DK','TAB_DK','MODE');
_args.MODE:='ZLGD';
_args.ZGP:=null();
_args.DK:='';
_args.ZPARN:=null();
_args.TAB_DK:=tab_tmp(2
      ,'MODE','STRING[8]','Tryb działania'
      ,'DK','STRING[48]','DK.uidref'
      ,'IL','REAL','Ilość na dokumencie');
_args


\robocizna_dk_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Nawija powiązania między robocizną a pozycją dokumentu
::   WE: _a - STRING - $DK.ref - ref dokumentu
::       [_b] - ZGP.ref() - pozycja przewodnika dla którego obrobić robociznę
::       [_c] - ZPARN.ref - partia dla której obrobić robociznę
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_dk_sql:=_a;
_zgp:=null();
{? var_pres('_b')=type_of(ZGP.ref())
|| _zgp:=_b
?};
_zparn:=null();
{? var_pres('_c')=type_of(ZPARN.ref())
|| _zparn:=_c
?};
_can_continue:=1;
_result:=0;

ZL.cntx_psh();
ZL.prefix();

_zl:=null();
{? _zgp<>null()
|| _zl:=exec('FindAndGet','#table',ZGP,_zgp,,"ZL",null())
|? _zparn<>null()
|| _zl:=exec('FindAndGet','#table',ZPARN,_zparn,,"ZL",null())
?};

{? ZL.seek(_zl)
||
   _args:=exec('robocizna_args','magdok_prod');
   _args.DK:=_dk_sql;
   _args.ZGP:=_zgp;
   _args.ZPARN:=_zparn;

   _rule:="
      _args:=_b;

      _can_continue:=1;
      _result:=0;
      {? _args.ZGP=null() & _args.ZPARN=null()
      || return(0)
      ?};

      _mask_zlgd:=ZLGD.name();

      _zl:=null();
      {? _args.ZPARN<>null()
      || _zl:=exec('FindAndGet','#table',ZPARN,_args.ZPARN,,\"ZPARN.ZL\",null())
      |? _args.ZGP<>null()
      || _zl:=exec('FindAndGet','#table',ZGP,_args.ZGP,,\"ZGP.ZL\",null())
      ?};

      {? exec('zl_czy_wyr','zl_wyr',_zl)
      ||
         ZL_WYRGD.cntx_psh();
         {? _args.ZPARN<>null()
         || ZLGD.index('ZPARN');
            ZLGD.prefix(_args.ZPARN)
         |? _args.ZGP<>null()
         || ZLGD.index('S2');
            ZLGD.prefix(_args.ZGP)
         ?};
         {? ZL_WYRGD.first()
         ||
            {!
            |?
               _zlgd_left:=ZL_WYRGD.IL-ZL_WYRGD.ILGEN;
               {? ZL_WYRGD.ZGP().DOK<>null() & _zlgd_left>0
               || _uidref:=exec('FindAndGet','#table',DK,_args.DK,,\"DK.uidref()\",'');
                  ND.cntx_psh();
                  DK.cntx_psh();
                  DK.use(ref_name(_args.DK));
                  ND.use((ND.name()-3)+(ref_name(_args.DK)+3));
                  DK.prefix();
                  {? DK.seek(_args.DK)
                  || {? $DK.ZGP=$ZL_WYRGD.ZGP &
                        $DK.N().MAG=$ZL_WYRGD.MG &
                        $DK.M=$ZL_WYRGD.KTM
                     || ZL_WYRGD.DK:=_uidref;
                        _can_continue:=ZL_WYRGD.put()
                     ?}
                  ?};
                  DK.cntx_pop();
                  ND.cntx_pop()
               ?};
               ZL_WYRGD.next()
            !}
         ?};
         ZL_WYRGD.cntx_pop();
         ~~
      ||
         ZLGD.cntx_psh();
         ZLGD.index('S2');
         {? _args.ZPARN<>null()
         || ZLGD.index('ZPARN');
            ZLGD.prefix(_args.ZPARN)
         |? _args.ZGP<>null()
         || ZLGD.index('S2');
            ZLGD.prefix(_args.ZGP)
         ?};
         ZL_WYRGD.cntx_psh();
         ZL_WYRGD.use(5+ZL_WYRGD.name()+(_mask_zlgd+3));
         ZL_WYRGD.index('ZLGD');
         {? ZLGD.first()
         ||
            {!
            |?
               ZL_WYRGD.prefix(ZLGD.ref());
               {? ZL_WYRGD.first()
               ||
::                Są rekordy ZL_WYRGD, na nich robię powiązanie do DK
                  {!
                  |?
                     _zlgd_left:=ZL_WYRGD.IL-ZL_WYRGD.ILGEN;
                     {? ZL_WYRGD.ZGP().DOK<>null() & _zlgd_left>0
                     || _uidref:=exec('FindAndGet','#table',DK,_args.DK,,\"DK.uidref()\",'');
                        ND.cntx_psh();
                        DK.cntx_psh();
                        DK.use(ref_name(_args.DK));
                        ND.use((ND.name()-3)+(ref_name(_args.DK)+3));
                        DK.prefix();
                        {? DK.seek(_args.DK)
                        || {? $DK.ZGP=$ZL_WYRGD.ZGP &
                              $DK.N().MAG=$ZL_WYRGD.MG &
                              $DK.M=$ZL_WYRGD.KTM
                           || ZL_WYRGD.DK:=_uidref;
                              _can_continue:=ZL_WYRGD.put()
                           ?}
                        ?};
                        DK.cntx_pop();
                        ND.cntx_pop()
                     ?};
                     ZL_WYRGD.next()
                  !}
               ||
::                Brak rekordów ZL_WYRGD, powiązanie z DK jest na ZLGD
                  _zlgd_left:=ZLGD.IL-ZLGD.ILGEN;
                  {? ZLGD.ZGP().DOK<>null() & _zlgd_left>0
                  || _uidref:=exec('FindAndGet','#table',DK,_args.DK,,\"DK.uidref()\",'');
                     ND.cntx_psh();
                     DK.cntx_psh();
                     DK.use(ref_name(_args.DK));
                     ND.use((ND.name()-3)+(ref_name(_args.DK)+3));
                     DK.prefix();
                     {? DK.seek(_args.DK)
                     || {? $ZLGD.ZGP=$DK.ZGP &
                           $ZLGD.ZPARN=$DK.PARTIA
                        || ZLGD.DK:=_uidref;
                           _can_continue:=ZLGD.put()
                        ?}
                     ?};
                     DK.cntx_pop();
                     ND.cntx_pop()
                  ?}
               ?};
               ZLGD.next() & _can_continue>0
            !};
            ~~
         ?};
         ZL_WYRGD.cntx_pop();
         ZLGD.cntx_pop()
      ?};

      {? _can_continue>0
      || _result:=1
      ?};
      _result
   ";

   _name:=5+ZLGD.name();
   _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
   _msk_end:=~~;
   {? ZL.STAN='Z'
   || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   ?};

   _can_continue:=exec('for_each_mask','#table',ZLGD,_rule,_msk_start,_msk_end,_args,1);
   {? _can_continue>0
   ||
::    Powiązania z DK zrobione, trzeba nawinąć pola ILGEN
      _can_continue:=exec('robocizna_ilgen','magdok_prod',_zgp,_zparn)
   ?}
?};

ZL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\robocizna_dk_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Odwija powiązania między robocizną a pozycją dokumentu
::   WE: _a - STRING - DK.uidref - uidref dokumentu
::       [_b] - ZGP.ref() - pozycja przewodnika dla którego obrobić robociznę
::       [_c] - ZPARN.ref - partia dla której obrobić robociznę
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_dk_uid:=_a;
_zgp:=null();
{? var_pres('_b')=type_of(ZGP.ref())
|| _zgp:=_b
?};
_zparn:=null();
{? var_pres('_c')=type_of(ZPARN.ref())
|| _zparn:=_c
?};
_can_continue:=1;
_result:=0;

ZL.cntx_psh();
ZL.prefix();

_zl:=null();
{? _zgp<>null()
|| _zl:=exec('FindAndGet','#table',ZGP,_zgp,,"ZL",null())
|? _zparn<>null()
|| _zl:=exec('FindAndGet','#table',ZPARN,_zparn,,"ZL",null())
?};

{? ZL.seek(_zl)
||
   _args:=exec('robocizna_args','magdok_prod');
   _args.DK:=_dk_uid;
   _args.ZGP:=_zgp;
   _args.ZPARN:=_zparn;

   _rule:="
      _args:=_b;

      _can_continue:=1;
      _result:=0;

      _tab:=($_args.MODE)();
      _tab.cntx_psh();
      _tab.index('DK');
      _tab.prefix(_args.DK,);
      {? _tab.first()
      || {!
         |? _tab.cntx_psh();
            _tab.clear();
            _tab.DK:='';
            _can_continue:=_tab.put();
            _tab.cntx_pop();
            _tab.first() & _can_continue>0
         !}
      ?};
      _tab.cntx_pop();

      {? _can_continue>0
      || _result:=1
      ?};
      _result
   ";

   {? _can_continue>0
   ||
      _name:=5+ZLGD.name();
      _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
      _msk_end:=~~;
      {? ZL.STAN='Z'
      || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
         _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
      || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
         _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
      ?};
      _args.MODE:='ZLGD';
      _can_continue:=exec('for_each_mask','#table',ZLGD,_rule,_msk_start,_msk_end,_args,1)
   ?};

   {? _can_continue>0
   ||
      _name:=5+ZL_WYRGD.name();
      _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
      _msk_end:=~~;
      {? ZL.STAN='Z'
      || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
         _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
      || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
         _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
      ?};
      _args.MODE:='ZL_WYRGD';
      _can_continue:=exec('for_each_mask','#table',ZL_WYRGD,_rule,_msk_start,_msk_end,_args,1)
   ?};

   {? _can_continue>0
   ||
::    Powiązania z DK usunięte, trzeba nawinąć pola ILGEN
      _can_continue:=exec('robocizna_ilgen','magdok_prod',_zgp,_zparn)
   ?}
?};

ZL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\robocizna_ilgen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Nawija pole ZLGD.ILGEN na podstawie powiązań na zleceniach
::   WE: [_a] - ZGP.ref() - pozycja przewodnika dla którego obrobić robociznę
::       [_b] - ZPARN.ref - partia dla której obrobić robociznę
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_zgp:=null();
{? var_pres('_a')=type_of(ZGP.ref())
|| _zgp:=_a
?};

_zparn:=null();
{? var_pres('_b')=type_of(ZPARN.ref())
|| _zparn:=_b
?};

_can_continue:=1;
_result:=0;

ZL.cntx_psh();
ZL.prefix();

_zl:=null();
{? _zgp<>null()
|| _zl:=exec('FindAndGet','#table',ZGP,_zgp,,"ZL",null())
|? _zparn<>null()
|| _zl:=exec('FindAndGet','#table',ZPARN,_zparn,,"ZL",null())
?};

{? ZL.seek(_zl)
||
   _name:=5+ZLGD.name();
   _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
   _msk_end:=~~;
   {? ZL.STAN='Z'
   || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   ?};

   _args:=exec('robocizna_args','magdok_prod');
   _args.ZGP:=_zgp;
   _args.ZPARN:=_zparn;
:: 1. Zerowanie pola ZLGD.ILGEN i ZL_WYRGD.ILGEN
   {? _can_continue>0
   ||
      _rule_zero:="
         _args:=_b;
         exec('robocizna_zero','magdok_prod',_args)
      ";
      _can_continue:=exec('for_each_mask','#table',ZLGD,_rule_zero,_msk_start,_msk_end,_args,1)
   ?};

:: 2. Zbieranie powiązanych dokumentów
   {? _can_continue>0
   ||
      _rule_collect_dk:="
         _args:=_b;
         exec('robocizna_collect_dk','magdok_prod',_args)
      ";
      _can_continue:=exec('for_each_mask','#table',ZLGD,_rule_collect_dk,_msk_start,_msk_end,_args,1)
   ?};

:: 3. Rozpisanie ilości z powiązanych dokumentów na ZLGD lub ZL_WYRGD
   {? _can_continue>0 & _args.TAB_DK.first()
   ||
      _rule_set_ilgen:="";
      {? _args.MODE<>''
      ||
         {? _args.MODE='ZLGD'
         || _name:=5+ZLGD.name();
            _rule_set_ilgen:="
               _args:=_b;
               exec('robocizna_set_zlgd','magdok_prod',_args)
            "
         |? _args.MODE='ZL_WYRGD'
         || _name:=5+ZL_WYRGD.name();
            _rule_set_ilgen:="
               _args:=_b;
               exec('robocizna_set_zl_wyrgd','magdok_prod',_args)
            "
         ?};
         _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
         _msk_end:=~~;
         {? ZL.STAN='Z'
         || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
            _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
         || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
            _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
         ?};
         _can_continue:=exec('for_each_mask','#table',_args.MODE,_rule_set_ilgen,_msk_start,_msk_end,_args,1)
      ?}
   ?};

   _zgh:=null();

:: 4. Aktualizacja ilości ZGP.ILGEN
   {? _can_continue>0 & _zgp<>null()
   || ZGP.cntx_psh(); ZGP.prefix();
      {? ZGP.seek(_zgp)
      || _zgh:=ZGP.NRPRZ;
         ZGP.ILGEN:=0;
         _args_dk:=exec('ilosc_dk_a','zl_common');
         _args_dk.ZGP:=ZGP.ref();
         _args_dk.ZL:=ZGP.ZL;

         _args_dk.RP:=1;
         _ilosc:=exec('get_ilosc_dk','zl_common',_args_dk);
         {? _ilosc>0
         || ZGP.ILGEN:=_ilosc
         ?};
         _can_continue:=ZGP.put()
      ?};
      ZGP.cntx_pop();
      ~~
   ?};

   {? _zparn<>null()
   || _zgh:=exec('FindAndGet','#table',ZPARN,_zparn,,"ZPARN.ZGH",null())
   ?};

:: 5. Aktualizacja ilości ZGH.ILGEN
   {? _can_continue>0 & _zgh<>null()
   || ZGH.cntx_psh(); ZGH.prefix();
      {? ZGH.seek(_zgh)
      ||
         ZGH.ILGEN:=0;
         _args_dk2:=exec('ilosc_dk_a','zl_common');
         _args_dk2.ZGH:=ZGH.ref();
         _args_dk2.ZL:=ZGH.ZLEC;

         _args_dk2.RP:=1;
         _ilosc:=exec('get_ilosc_dk','zl_common',_args_dk2);
         {? _ilosc>0
         || ZGH.ILGEN:=_ilosc
         ?};
         _can_continue:=ZGH.put();

         {? _can_continue>0
         ||
::          Odddaję przewodnik jeżeli cała robocizna zarejestrowana i cały produkt w magazynie
            exec('set_oddany','zl_guide')
         ?}
      ?};
      ZGH.cntx_pop();
      ~~
   ?}
?};
ZL.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\robocizna_zero
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Zeruje pola ILGEN na robociźnie do danego przewodnika
::   WE: _args - obj_new() - argumenty funkcji, wynik wywołania: exec('robocizna_args','magdok_prod')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_can_continue:=1;
_result:=0;

{? _args.ZGP=null() & _args.ZPARN=null()
|| return(0)
?};

_mask_zlgd:=ZLGD.name();

ZL_WYRGD.cntx_psh();
ZL_WYRGD.use(5+ZL_WYRGD.name()+(_mask_zlgd+3));
ZLGD.cntx_psh();
{? _args.ZPARN<>null()
|| ZLGD.index('ZPARN');
   ZLGD.prefix(_args.ZPARN);
   ZL_WYRGD.index('ZPARN');
   ZL_WYRGD.prefix(_args.ZPARN)
|? _args.ZGP<>null()
|| ZLGD.index('S2');
   ZLGD.prefix(_args.ZGP);
   ZL_WYRGD.index('ZGP');
   ZL_WYRGD.prefix(_args.ZGP)
?};

{? _can_continue>0
|| {? ZL_WYRGD.first()
   || {!
      |? _old:=ZL_WYRGD.ILGEN;

         ZL_WYRGD.ILGEN:=0;
         _can_continue:=ZL_WYRGD.put();

         {? _can_continue>0
         || ZLGD.cntx_psh(); ZLGD.prefix();
            {? ZLGD.seek(ZL_WYRGD.ZLGD)
            || ZLGD.ILGEN-=_old;
               {? ZLGD.ILGEN<0
               || ZLGD.ILGEN:=0
               ?};
               _can_continue:=ZLGD.put()
            ?};
            ZLGD.cntx_pop()
         ?};
         ZL_WYRGD.next()
      !}
   ?}
?};

{? ZLGD.first()
||
   {!
   |?
      ZLGD.ILGEN:=0;
      _can_continue:=ZLGD.put();
      ZLGD.next() & _can_continue>0
   !};
   ~~
?};



ZLGD.cntx_pop();
ZL_WYRGD.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\robocizna_collect_dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Zbiera pozycje dokumentów magazynowych powiązanych z robocizną
::   WE: _args - obj_new() - argumenty funkcji, wynik wywołania: exec('robocizna_args','magdok_prod')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_can_continue:=1;
_result:=0;

{? _args.ZGP=null() & _args.ZPARN=null()
|| return(0)
?};

_mask_zlgd:=ZLGD.name();

_tab:=_args.TAB_DK;

ZLGD.cntx_psh();
ZL_WYRGD.cntx_psh();
ZL_WYRGD.use(5+ZL_WYRGD.name()+(_mask_zlgd+3));

_czy_wyr:=0;
{? _args.ZGP<>null()
||
   ZLGD.index('S2');
   ZLGD.prefix(_args.ZGP);
   {? ZLGD.first()
   || ZL_WYRGD.cntx_psh();
      ZL_WYRGD.index('ZLGD');
      {!
      |?
         ZL_WYRGD.prefix(ZLGD.ref());
         {? ZL_WYRGD.first()
         || _czy_wyr:=1
         ?};
         ZLGD.next() & _czy_wyr=0
      !};
      ZL_WYRGD.cntx_pop()
   ?}
|? _args.ZPARN<>null()
||
   ZL_WYRGD.index('ZPARN');
   ZL_WYRGD.prefix(_args.ZPARN);
   {? ZL_WYRGD.first()
   || _czy_wyr:=1
   ?}
?};

{? _czy_wyr>0
|| _args.MODE:='ZL_WYRGD'
?};

{? _args.ZPARN<>null()
|| ZLGD.index('ZPARN');
   ZLGD.prefix(_args.ZPARN);
   ZL_WYRGD.index('ZPARN');
   ZL_WYRGD.prefix(_args.ZPARN)
|? _args.ZGP<>null()
|| ZLGD.index('S2');
   ZLGD.prefix(_args.ZGP);
   ZL_WYRGD.index('ZGP');
   ZL_WYRGD.prefix(_args.ZGP)
?};

{? _args.MODE='ZLGD'
||
:: Brak rekordów ZL_WYRGD, powiązanie z DK jest na ZLGD
   {? ZLGD.first()
   || {!
      |? {? ZLGD.DK<>''
         || _dk:=exec('FindAndGet','#table',DK,ZLGD.DK,,,null());
            _nd:=exec('FindAndGet','#table',DK,ZL_WYRGD.DK,,"N",null());
            _il:=exec('FindAndGet','#table',DK,_dk,,"DK.IL",null());
            _ildok:=exec('obl_wgzp','magdok_wspolne',_nd,#_dk,_il);
            {? _ildok>0
            || _tab.prefix('ZLGD',ZLGD.DK,);
               {? _tab.first()=0
               || _tab.blank();
                  _tab.MODE:='ZLGD';
                  _tab.DK:=ZLGD.DK;
                  _tab.IL:=_ildok;
                  _can_continue:=_tab.add()
               ?}
            ?}
         ?};
         ZLGD.next() & _can_continue>0
      !}
   ?}
|? _args.MODE='ZL_WYRGD'
||
   {? ZL_WYRGD.first()
   ||
::    Są rekordy ZL_WYRGD
      {!
      |?
         {? ZL_WYRGD.DK<>''
         || _dk:=exec('FindAndGet','#table',DK,ZL_WYRGD.DK,,,null());
            _nd:=exec('FindAndGet','#table',DK,ZL_WYRGD.DK,,"N",null());
            _il:=exec('FindAndGet','#table',DK,_dk,,"DK.IL",null());
            _ildok:=exec('obl_wgzp','magdok_wspolne',_nd,#_dk,_il);
            {? _ildok>0
            || _tab.prefix('ZL_WYRGD',ZL_WYRGD.DK,);
               {? _tab.first()=0
               || _tab.blank();
                  _tab.MODE:='ZL_WYRGD';
                  _tab.DK:=ZL_WYRGD.DK;
                  _tab.IL:=_ildok;
                  _can_continue:=_tab.add()
               ?}
            ?}
         ?};
         ZL_WYRGD.next() & _can_continue>0
      !}
   ?}
?};

_tab.prefix();
ZLGD.cntx_pop();
ZL_WYRGD.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\robocizna_set_ilgen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Na podstawie zebranych danych wypełnia pole .ILGEN w danej tabeli
::   WE: _args - obj_new() - argumenty funkcji, wynik wywołania: exec('robocizna_args','magdok_prod')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_tab:=($_args.MODE)();

_can_continue:=1;
_result:=0;

_tab_dk:=_args.TAB_DK;

_tab.cntx_psh();
_tab.index('DK');

_tab_dk.prefix();
{? _tab_dk.first()
|| {!
   |?
      _ildok:=_tab_dk.IL;
      _tab.prefix(_tab_dk.DK,);
      {? _ildok>0 & _tab.first()
      ||
         {!
         |? _tab.ILGEN:=0;
            {? _ildok>0
            ||
               _min:=exec('min','#math',_ildok,_tab.IL);
               _tab.ILGEN:=_min;
               _ildok-=_min
            ?};
            _can_continue:=_tab.put();
            _tab.next() & _can_continue>0
         !};
         ~~
      ?};
      _tab_dk.IL:=_ildok;
      _can_continue:=_tab_dk.put();
      _tab_dk.next() & _can_continue>0
   !}
?};
_tab.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\robocizna_set_zlgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Na podstawie zebranych danych wypełnia pole .ILGEN w danej tabeli
::   WE: _args - obj_new() - argumenty funkcji, wynik wywołania: exec('robocizna_args','magdok_prod')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_can_continue:=1;
_result:=0;

_tab_dk:=_args.TAB_DK;

ZLGD.cntx_psh();
ZLGD.index('DK');

_tab_dk.prefix();
{? _tab_dk.first()
|| {!
   |?
      _ildok:=_tab_dk.IL;
      ZLGD.prefix(_tab_dk.DK,);
      {? _ildok>0 & ZLGD.first()
      ||
         {!
         |? ZLGD.ILGEN:=0;
            {? _ildok>0
            ||
               _min:=exec('min','#math',_ildok,ZLGD.IL);
               ZLGD.ILGEN:=_min;
               _ildok-=_min
            ?};
            _can_continue:=ZLGD.put();
            ZLGD.next() & _can_continue>0
         !};
         ~~
      ?};
      _tab_dk.IL:=_ildok;
      _can_continue:=_tab_dk.put();
      _tab_dk.next() & _can_continue>0
   !}
?};
ZLGD.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\robocizna_set_zl_wyrgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Na podstawie zebranych danych wypełnia pole .ILGEN w danej tabeli
::   WE: _args - obj_new() - argumenty funkcji, wynik wywołania: exec('robocizna_args','magdok_prod')
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_can_continue:=1;
_result:=0;

_tab_dk:=_args.TAB_DK;

ZL_WYRGD.cntx_psh();
ZL_WYRGD.index('DK');

_tab_dk.prefix();
{? _tab_dk.first()
|| {!
   |?
      _ildok:=_tab_dk.IL;
      ZL_WYRGD.prefix(_tab_dk.DK,);
      {? _ildok>0 & ZL_WYRGD.first()
      ||
         {!
         |? ZL_WYRGD.ILGEN:=0;
            {? _ildok>0
            ||
               _min:=exec('min','#math',_ildok,ZL_WYRGD.IL);
               ZL_WYRGD.ILGEN:=_min;
               _ildok-=_min
            ?};
            _can_continue:=ZL_WYRGD.put();

            {? _can_continue>0 & ZL_WYRGD.ZLGD<>null()
            || ZLGD.cntx_psh();
               ZLGD.use(5+ZLGD.name()+(ZL_WYRGD.name()+3));
               ZLGD.prefix();
               {? ZLGD.seek(ZL_WYRGD.ZLGD)
               || ZLGD.ILGEN+=ZL_WYRGD.ILGEN;
                  _can_continue:=ZLGD.put()
               ?};
               ZLGD.cntx_pop()
            ?};
            ZL_WYRGD.next() & _can_continue>0
         !};
         ~~
      ?};
      _tab_dk.IL:=_ildok;
      _can_continue:=_tab_dk.put();
      _tab_dk.next() & _can_continue>0
   !}
?};
ZL_WYRGD.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\transfer_zlnd4zlgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Dla aktualnego rekordu ZLGD odszukuje powiązaną pozycję dokumentu
::       Używane podczas transferu
::       Kontekst pracy - rekord ZLGD
::   WY: DK.uidref() lub '' jeżeli nie znaleziono
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('DK','ZLGD');
_args.DK:='';
_args.ZLGD:=ZLGD.ref();

{? ZLGD.ZL<>null()
|| ZLGD.ZL();
   _rule:="
      _args:=_b;

      _can_continue:=1;
      ZLND.cntx_psh();
      ZLND.index('ZN');
      ZLND.prefix(_args.ZLGD);
      {? ZLND.first()
      || {!
         |? {? ref_name(ZLND.ZLGD)=ref_name(_args.ZLGD)
            || {? ZLND.ND<>null()
               || ND.cntx_psh();
                  ND.use(ref_name(ZLND.ND));
                  DK.cntx_psh();
                  DK.use((DK.name()-3)+(ref_name(ZLND.ND)+3));
                  DK.index('DOKMAG');
                  DK.prefix(ZLND.ND);
                  {? DK.first()
                  || {!
                     |? {? ZLGD.ZPARN<>null()
                        ||
::                         Jeżeli robocizna do partii to szukam pozycji dokumentu z tą samą partią
                           {? $DK.PARTIA=$ZLGD.ZPARN
                           || _can_continue:=0;
                              _args.DK:=DK.uidref()
                           ?}
                        ||
::                         Robocizna bez partii
                           _can_continue:=0;
                           _args.DK:=DK.uidref()
                        ?};
                        DK.next() & _can_continue>0
                     !}
                  ?};
                  DK.cntx_pop();
                  ND.cntx_pop()
               ?}
            ?};
            ZLND.next() & _can_continue>0
         !}
      ?};
      ZLND.cntx_pop();
      _can_continue
   ";
   _name:=5+ZLND.name();
   _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
   _msk_end:=~~;
   {? ZL.STAN='Z'
   || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   ?};
   exec('for_each_mask','#table',ZLND,_rule,_msk_start,_msk_end,_args,1)
?};
_args.DK


\zgh_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Wyświetla dokumenty zarejestrowane do nagłówka przewodnika (dla VAR.A_NRPRZ)
::----------------------------------------------------------------------------------------------------------------------
VAR.A_ZLEC:=VAR.A_NRPRZ().ZLEC;
exec('pozrap','magdok_prod',1,1,1,,4);
~~


\zlim_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Aktualizuje ilości oraz wartości pobrań/zwrotów dla ZLIMa po aktualizacji pozycji dokumentu DK
::   WE: _a - ilość zmodyfikowana (o ile się zmieniło)
::       _b - wartość zmodyfikowana(o ile się zmieniła)
::       _c - przychód/rozchód - wartość pola DK.PLUS
::       _d - ZLIM.ref(), którego aktualizować
::----------------------------------------------------------------------------------------------------------------------
_diff_il:=_a;
_diff_war:=_b;
_plus:=_c;
_zlim:=_d;
ZLIM.cntx_psh();
{? ZLIM.name()<>ref_name(_zlim) || ZLIM.use(ref_name(_zlim)) ?};
ZLIM.prefix();
{? ZLIM.seek(_zlim)
|| {? _plus='T'
   || ZLIM.IL_ZW+=_diff_il;
      ZLIM.WAR_ZW+=_diff_war
   || ZLIM.IL_RW+=_diff_il;
      ZLIM.WAR_RW+=_diff_war
   ?};
   ZLIM.put()
?};
ZLIM.cntx_pop();
~~


\zl_rok_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Aktualizuje pole ZL.ROK_MAX po aktualizacji pozycji dokumentu DK
::   WE: _a - ZL.ref() - zlecenie, które aktualizować
::       _b - rok pozycji dokumentu (DK.AR)
::----------------------------------------------------------------------------------------------------------------------
_zl:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_dkrok:={? var_pres('_b')=type_of(0) || _b || 0 ?};
ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_zl)
|| {? _dkrok>ZL.ROK_MAX
   || ZL.ROK_MAX:=_dkrok;
      ZL.put()
   ?}
?};
ZL.cntx_pop();
~~


\grop_rok_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Aktualizuje pole GROP.ROK_MAX po aktualizacji pozycji dokumentu DK
::   WE: _a - GROP.ref() - grupa, którą aktualizować
::       _b - rok pozycji dokumentu (DK.AR)
::----------------------------------------------------------------------------------------------------------------------
_grop:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_dkrok:={? var_pres('_b')=type_of(0) || _b || 0 ?};
GROP.cntx_psh();
GROP.prefix();
{? GROP.seek(_grop)
|| {? _dkrok>GROP.ROK_MAX
   || GROP.ROK_MAX:=_dkrok;
      GROP.put()
   ?}
?};
GROP.cntx_pop();
~~


\zl_chk4zw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Sprawdza, czy do podanego zlecenia/grupy operacji istnieją niezaakceptowane pozycje dokumentu ZW
::       (zwroty surowca z produkcji)
::   WE: _a - ZL.ref()/GROP.ref()
::   WY: 1 - są, 0 - nie ma
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null()) || _a || return(0) ?};
_tab:=ref_tab(_ref);
{? type_of(_tab)=type_of(~~)
|| return(0)
?};
_where:={? _tab=ZL || 0 |? _tab=GROP || 1 || return(0) ?};

_res:=0;
_tab.cntx_psh();
_tab.prefix();
{? _tab.seek(_ref)
|| DK.cntx_psh();
   _rule:="
      _ref:=_b.REF;
      _where:=_b.WHERE;
      _res:=0;
      {? _where=0
      || DK.index('GENZL')
      || DK.index('DOKGROP')
      ?};
      DK.prefix(_ref);
      {? DK.first()
      || _res:=DK.find_tab(,'Z',,'<>','T','PLUS',,'=','T')
      ?};
      ~_res
   ";
   _param:=obj_new('REF','WHERE');
   _param.WHERE:=_where;
   _name:=5+DK.name();
   {? _where=0
   || {? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
      || ZL.index('NRNZL');
         ZL.prefix(ZL.UNRZL);
         {? ZL.first()
         || {!
            |?
               _param.REF:=ZL.ref();
               _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
               _msk_end:=~~;
               {? ZL.STAN='Z'
               || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
                  _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
               || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
                  _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
               ?};
               _res:=(~exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_param,1));
               ZL.next() & _res=0
            !}
         ?}

      || _param.REF:=ZL.ref();
         _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
         _msk_end:=~~;
         {? ZL.STAN='Z'
         || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
            _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
         || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
            _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
         ?};
         _res:=(~exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_param,1))
      ?}
   || _param.REF:=GROP.ref();
      _msk_start:=_name+GROP.ODDZ+(2-$(GROP.DATA~1));
      _msk_end:=~~;
      _rok:=exec('max','#math',GROP.ROK_MAX,date()~1,ST.AR);
      _msk_end:=_name+GROP.ODDZ+(2-$(_rok));
      _res:=(~exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_param,1))
   ?};
   DK.cntx_pop()
?};
_tab.cntx_pop();
_res


\adddk4zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: Tworzy pozycję dokumentu magazynowego powiązaną ze zleceniem produkcyjnym / grupą operacji
::   WE: _a - ZL.ref()
::       _b - WYD.ref()
::       _c - Ilosc
::       _d - M.ref()
::       _e - ND.ref()
::       _f - MG.ref() (ND.MAG)
::       _g - PRDK
::       [_h] - DK_C.ref() - wskazanie na ceche, ktora okresla wartosci atrybutow na dostawie
::       [_i] - ZLIM.ref() - wskazanie na limit z ktorym powiazac utworzony dokument magazynowy
::       [_j] - STRING[15] - tm_stamp ktorymi osteplowac utworzone DK
::       [_k] - ZGH.ref()
::       [_l] - ZPARN.ref() - wskazanie na partię z którą powiazać utworzony dokument magazynowy
::       [_m] - ZGP.ref() - wskazanie na pozycję przewodnika z ktorą powiazać utworzony dokument magazynowy
::       [_n] - tabela przechowująca ilości zarezerwowane dla poszczególnych dostaw
::       [_o] - $EANL.ref() - wskazania ne lokalizację, z która powiązać pozycję dokumentu
::       [_p] - kod identyfikacyjny (SCEAN) - jeżeli podany, to bierze pod uwagę wyłącznie te dostawy o podanym kodzie
::       [_q] - dopuszczalne rodzaje statusow (NOZ), domyślnie wg statusów przypisanych na typie dokumentu
::       [_r] - termin ważności z partii
::       [_s] - $SC.ref() - ref konkretnej dostawy
::       [_t] - tabela przechowująca refy pozycji utworzonych na podstawie dedykowanych rezerwacji do nielimitów
::              (tabela wypełniana wewnątrz funkcji)
::       [_u] - ref elementu, na podstawie którego generowany jest dokument ($ZLGD.ref(), $ZGP.ref, $ND.ref())
::       [_v] - GROP.ref() - podawać w przypadku generowania do rejestracji wykonań do grup operacji
::       [_w] - ZLGD.ref() - podawać w przypadku generowania do rejestracji wykonań do grup operacji
::       [_x] - STRING[30] - kod palety, wg której rozpisać pozycję dokumentu
::   WY: obj_new() - wynik działania exec('result_gendok','magdok_wspolne')
::  OLD: \gen_dk4zl/magdok_wspolne.fml
::----------------------------------------------------------------------------------------------------------------------
_mpdoks:=exec('get','#params',500705,2,null());
_mpdoks_zw:=exec('get','#params',500709,2,null());
::_mpdoksT:=exec('GetTabFromList','#table','TYPYDOK','T',_mpdoks);
_tw:=date(0,0,0);

ND.cntx_psh();
ZK_P.cntx_psh();
_wyd:=_b;
_ilwd:=_c;

_prdk:='';
{? var_pres('_g')=type_of('')
|| _prdk:=_g
?};

_dk_c:=null();
_buf_dkc:=exec('buffer','mat_atr');
{? var_pres('_h')=type_of(DK_C.ref())
|| _dk_c:=_h;
   DK_C.cntx_psh(); DK_C.clear();
   {? DK_C.seek(_dk_c)
   || _buf_dkc.get_dkc()
   ?};
   DK_C.cntx_pop();
   ~~
?};
_zlim:=null();
{? var_pres('_i')=type_of(ZLIM.ref())
|| _zlim:=_i
?};
_tm_stamp:='';
{? var_pres('_j')=type_of('')
|| _tm_stamp:=_j
?};
_zgh:=null();
{? var_pres('_k')=type_of(ZGH.ref())
|| _zgh:=_k
?};
_zparn:=null();
{? var_pres('_l')=type_of(ZPARN.ref())
|| _zparn:=_l;
   {? _zparn<>null() || _tw:=exec('FindAndGet','#table',ZPARN,_zparn,,"TW",date(0,0,0)) ?}
?};
_zgp:=null();
{? var_pres('_m')=type_of(ZGP.ref())
|| _zgp:=_m
?};
_tab_rez:=~~;
{? var_pres('_n')>100
|| {? var_pres('_tab_rez')>100 || obj_del(_tab_rez) ?};
   _tab_rez:=_n;
   _tab_rez.cntx_psh();
   _ndx1:=_tab_rez.ndx_tmp(,,'TYP',,,'REF',,);
   _tab_rez.index(_ndx1);
   _tab_rez.prefix()
?};
_eanl:='';
{? var_pres('_o')=type_of('')
|| _eanl:=_o
?};
_scean:='';
{? var_pres('_p')=type_of('')
|| _scean:=_p
?};
_stats:='';
{? var_pres('_q')=type_of('')
|| _stats:=_q
?};
:: Jak nie podano statusów, to dane wyciągane z typu dokumentu
{? _stats=''
|| _stats:=exec('FindAndGet','#table',ND,_e,
               ,"{? TYP().P='T'
                 || 'NOZ'
                 || {? TYP().STATS_N='T' || 'N'  || '' ?}+
                    {? TYP().STATS_O='T' || 'O'  || '' ?}+
                    {? TYP().STATS_Z='T' || 'Z'  || '' ?}
                 ?}",'NOZ')
?};
{? var_pres('_r')=type_of(date()) & _r<>date(0,0,0)
|| _tw:=_r
?};
_sc:='';
{? var_pres('_s')=type_of('')
|| _sc:=_s
?};
_dk_rez:=~~;
{? var_pres('_t')>100
|| _dk_rez:=_t
?};
_src_ref:='';
{? var_pres('_u')=type_of('')
|| _src_ref:=_u
?};
_grop:=null();
{? var_pres('_v')=type_of(GROP.ref())
|| _grop:=_v
?};
_zlgd:=null();
{? var_pres('_w')=type_of(ZLGD.ref())
|| _zlgd:=_w
?};
_kodpal:='';
{? var_pres('_x')=type_of('')
|| _kodpal:=_x
?};
_where:={? _src_ref*'zlgd' || 2 |? _src_ref*'zguidep' || 1 || 0 ?};

_can_continue:=1;
_result:=exec('result_gendok','magdok_wspolne');

ND.clear();
{? ND.seek(_e)
|| _result.ND:=ND.ref();
   _mj:=exec('FindAndGet','#table',M,#_d,ref_name(_d),"J",null());
   {? _mj<>null()
   || exec('przyjdod','jm',$_mj,1,_ilwd)
   ?};

   _tmg:=1+ND.MAG().TYP;
   _ewi:=ND.MAG().TYP*'EWI';
   {? 'FLŚ'*_tmg
   || {? ND.MAG().IL<>'T' & (ND.TYP().WYR='T'& ND.TYP().P='T' | (' '+_mpdoks)*(' '+ND.TYP().T+' ')
         | (' '+_mpdoks_zw)*(' '+ND.TYP().T+' '))
      || {? _sc<>'' & (' '+_mpdoks_zw)*(' '+ND.TYP().T+' ')
         ||
::          Zwrot z produkcji (cena wg dostawy pierwotnej)
            _cena:=exec('FindAndGet','#table',SC,_sc,,"SC.C"
               ,exec('mptz_prop','zl_common',_d,exec('get','#params',500711),_a))
         || _cena:=exec('mptz_prop','zl_common',_d,exec('get','#params',500711),_a)
         ?}
      || _cena:=0
      ?};
      {? 'Ś'*_tmg & _prdk<>'' & _sc<>'' & (' '+_mpdoks_zw)*(' '+ND.TYP().T+' ') & ND.TYP().DN='T'
      ||
::       Podana dostawa pierwotna, pozycja będzie z nią powiązana
         _rdk:=exec('FindAndGet','#table',SC,_sc,,"SC.RDK",0);
         _ndk:=exec('FindAndGet','#table',SC,_sc,,"SC.NDK",'');
         _dt_dost:=exec('FindAndGet','#table',SC,_sc,,"SC.D",date(0,0,0));
         _srdk:=exec('FindAndGet','#table',SC,_sc,,"SC.SRDK",'');
         _result.DK:=exec('adddk','magdok_poz',_e,_d,_ilwd,_cena
                          ,_dt_dost,,,,,,,,7,_rdk,_ndk,,_srdk,_prdk,,_a,_wyd,,,,,_tw)
      || _result.DK:=exec('adddk','magdok_poz',_e,_d,_ilwd,_cena,,,,,,,,,7,,,,,,,_a,_wyd,,,,,_tw)
      ?};
      {? _result.DK
      || _result.RESULT:=1;
::       Po utworzeniu DK uzupelniam dodatkowe pola
         DK.cntx_psh(); DK.clear();
         {? DK.seek(_result.DK)
         || _put:=0;
            {? _zlim<>null()
            || DK.ZLIM:=_zlim;
               DK.M_ZLIM:=ref_name(_zlim);
               _put:=1
            ?};
            {? _tm_stamp<>''
            || DK.TM_STAMP:=_tm_stamp;
               _put:=1
            ?};
            {? _zgh<>null()
            || DK.ZGH:=_zgh;
               _put:=1
            ?};
            {? _zgp<>null()
            || DK.ZGP:=_zgp;
               _put:=1
            ?};
            {? _grop<>null()
            || DK.GROP:=_grop;
               _put:=1
            ?};
            {? _zlgd<>null()
            || DK.ZLGD:=_zlgd;
               _put:=1
            ?};
            {? DK.M().J2<>null()
            || DK.J2:=DK.M().J2;
               DK.T2:='M';
               DK.WS2:=exec('oblWSP','jm',DK.M);
               DK.IL2:=0;
               exec('oblJMG','jm',DK,'IL',DK.PLUS='T');
               _put:=1
            ?};
            {? _put>0
            || _result.RESULT:=DK.put()
            ?};
::          Rozpisanie wg lokalizacji
            {? DK.N().MAG().PAL='T' & ND.TYP().P='N'
            ||
::             Magazyn paletowy - rozpisywanie FIFO
               exec('initNOPAL','magdok_palety');
               exec('rozpNOPAL','magdok_palety');
               exec('doneNOPAL','magdok_palety')
            ?};
            {? DK.PLUS='N'
            || {? DK.M().J2<>null()
               || exec('update','rezerwacje','DK',DK.ref(),DK.N().MAG,DK.M,DK.IL,DK.SRDK,,,,,,DK.IL2,DK.J2,DK.WS2)
               || exec('update','rezerwacje','DK',DK.ref(),DK.N().MAG,DK.M,DK.IL,DK.SRDK)
               ?}
            ?}
         ?};
         DK.cntx_pop()
      ?}
   |? 'E' * _tmg=1
   || _cena:=exec('biez_cen','ceny_dok',_d,_f,ND.D);
      {? _cena=0
      || {? ND.MAG().IL<>'T' & (ND.TYP().WYR='T'& ND.TYP().P='T' | (' '+_mpdoks)*(' '+ND.TYP().T+' ')
            | (' '+_mpdoks_zw)*(' '+ND.TYP().T+' '))
         || _cena:=exec('mptz_prop','zl_common',_d,exec('get','#params',500711),_a)
         || _cena:=0
         ?}
      ?};
      _result.DK:=exec('adddk','magdok_poz',_e,_d,_ilwd,_cena,,,,,,,,,7,,,,,,,_a,_wyd,,,,,_tw);
      {? _result.DK
      || _result.RESULT:=1;
::       Po utworzeniu DK uzupełniam dodatkowe pola
         DK.cntx_psh(); DK.clear();
         {? DK.seek(_result.DK)
         || _result.DK_C:=DK.DK_C;
            _put:=0;
            {? _zlim<>null()
            || DK.ZLIM:=_zlim;
               DK.M_ZLIM:=ref_name(_zlim);
               _put:=1
            ?};
            {? _tm_stamp<>''
            || DK.TM_STAMP:=_tm_stamp;
               _put:=1
            ?};
            {? _zgh<>null()
            || DK.ZGH:=_zgh;
               _put:=1
            ?};
            {? _zgp<>null()
            || DK.ZGP:=_zgp;
               _put:=1
            ?};
            {? _grop<>null()
            || DK.GROP:=_grop;
               _put:=1
            ?};
            {? _zlgd<>null()
            || DK.ZLGD:=_zlgd;
               _put:=1
            ?};
            {? DK.M().J2<>null()
            || DK.J2:=DK.M().J2;
               DK.T2:='M';
               DK.WS2:=exec('oblWSP','jm',DK.M);
               DK.IL2:=0;
               exec('oblJMG','jm',DK,'IL',DK.PLUS='T');
               _put:=1
            ?};
            {? _put>0
            || _result.RESULT:=DK.put()
            ?};
::          Rozpisanie wg lokalizacji
            {? DK.N().MAG().PAL='T' & ND.TYP().P='N'
            ||
::             Magazyn paletowy - rozpisywanie FIFO
               exec('initNOPAL','magdok_palety');
               exec('rozpNOPAL','magdok_palety');
               exec('doneNOPAL','magdok_palety')
            ?};
            {? DK.PLUS='N'
            || {? DK.M().J2<>null()
               || exec('update','rezerwacje','DK',DK.ref(),DK.N().MAG,DK.M,DK.IL,DK.SRDK,,,,,,DK.IL2,DK.J2,DK.WS2)
               || exec('update','rezerwacje','DK',DK.ref(),DK.N().MAG,DK.M,DK.IL,DK.SRDK)
               ?}
            ?}
         ?};
         DK.cntx_pop()
      ?}
   |? 'D' *_tmg=1
   || _cewi:={? _ewi || exec('biez_cen','ceny_dok',_d,_f,ND.D) || -1 ?};

      {? ND.TYP().P='N' & exec('is_usluga_typ','zl_uslugi',ND.TYP)=0
      || ilosc:=_ilwd;
         OKR.cntx_psh();
         OKR.index('MC');
         OKR.prefix(REF.FIRMA,1);
         {? OKR.first()
         || {!
            |?
               {? _sc=''
               || SC.use('stc__'+ST.ODDZ+($OKR.ROK+2));
                  SC.index('SA');
                  SC.prefix(_f,_d,'T')
               || SC.clear()
               ?};
               {? {? _sc='' || SC.first() || SC.seek(_sc,ref_name(_sc),1) ?}
               || _result.RESULT:=1;
                  {!
                  |?
                     _can_continue:=1;
::                   Jesli podana cecha, to szukam takiej dostawy ktorej wartosci atrybutow sie
::                   zgadzaja z podana cecha
                     {? _dk_c<>null()
                     ||
                        {? var_pres('_buf_sc')>100
                        || obj_del(_buf_sc)
                        ?};
                        _buf_sc:=exec('buffer','mat_atr');
                        DK.cntx_psh();
                        {? SC.DK_C<>null()
                        || SC.DK_C();
                           _buf_sc.get_dkc();

::                         Porownuje wartosci atrybutow na cesze wejsciowej i cesze dostawy
                           _can_continue:=_buf_sc.compare(_buf_dkc,1)
                        ?};
                        DK.cntx_pop();
                        ~~
                     ?};

::                   Jesli podana pierwotna dostawa (lub kod identyfikacyjny) to sprawdzam czy sie zgadza
                     {? _can_continue>0 & _prdk<>''
                     || {? SC.PRDK<>_prdk
                        || _can_continue:=0
                        ?}
                     |? _can_continue>0 & _scean<>''
                     || {? SC.SCEAN<>_scean
                        || _can_continue:=0
                        ?}
                     ?};
::                   Sprawdzany status dostawy
                     {? _can_continue>0
                     || _can_continue:={? SC.STATS().KIND<>'' || _stats*SC.STATS().KIND || 1 ?}
                     ?};
                     {? _can_continue>0
                     ||
::                      _sta_r - ilość zarezerwowana do dostawy podczas rejestracji wykonania produkcji
::                      _sta_d - ilość zarezerwowana do surowca nielimitowanego (na daną dostawę)
::                      _sta_sc - dostępny stan dostawy
                        _sta_r:=_sta_d:=_sta_sc:=0;
                        {? _sc<>'' & _scean='' & _kodpal='' & _zlim<>null()
                        || _sta_d:=_sta:=exec('sc_il_rez','zl_nlimit',SC.SRDK,$_zlim)
                        || _sta_sc:=exec('obl_stsc','magazyn_stan');
::                         Jeżeli rozliczam nielimity z przypisaną dostawą to do stanu dodaję ilości wcześniej
::                         podrezerwowane (przy rejestracji wykonania produkcji)
                           {? var_pres('_tab_rez')>100
                           || {? _tab_rez.find_key('R',$SC.ref())
                              || _sta_r:=exec('rej_mat_il_rez','zl_common',_src_ref,$_zlim,SC.MAG
                                                ,SC.SRDK,,{? _where=2 || 'ZLGD' || 'ZGP' ?},_kodpal)
                              ?}
                           ?};
::                         Doliczenie dedykowanych rezerwacji nielimitów
                           {? _zlim<>null()
                           || _sta_d:=exec('sc_il_rez','zl_nlimit',SC.SRDK,$_zlim)
                           ?};
                           _sta:=_sta_sc+_sta_r+_sta_d
                        ?};
                        {? _sta>0
                        ||
                           {? ilosc<=_sta
                           || wydano:={? _ilwd >0 & _ilwd <=ilosc
                                      || _ilwd
                                      || ilosc
                                      ?};
                              ilosc:=ilosc-wydano
                           || wydano:={? _ilwd >0 & _ilwd <=_sta
                                      || _ilwd
                                      || _sta
                                      ?};
                              ilosc:=ilosc-wydano
                           ?};
                           _result.DK:=exec('adddk','magdok_poz',_e,_d,wydano,{? _cewi>0 || _cewi || SC.C ?},SC.D,,,,,,,,7
                                     ,SC.RDK,SC.NDK,SC.DK_C,,SC.PRDK,,_a,_wyd,,,,SC.SCEAN
                                     ,{? SC.M().SETW<>'P' || date(0,0,0) || SC.TW ?} );
                           {? _result.DK
                           || _result.RESULT:=1;
::                            Po utworzeniu DK uzupelniam dodatkowe pola
                              DK.cntx_psh(); DK.clear();
                              {? DK.seek(_result.DK)
                              || _result.DK_C:=DK.DK_C;
                                 _put:=0;
                                 {? _zlim<>null()
                                 || DK.ZLIM:=_zlim;
                                    DK.M_ZLIM:=ref_name(_zlim);
                                    _put:=1
                                 ?};
                                 {? _tm_stamp<>''
                                 || DK.TM_STAMP:=_tm_stamp;
                                    _put:=1
                                 ?};
                                 {? _zparn<>null()
                                 || DK.PARTIA:=_zparn;
                                    _put:=1
                                 ?};
                                 {? _zgh<>null()
                                 || DK.ZGH:=_zgh;
                                    _put:=1
                                 ?};
                                 {? _zgp<>null()
                                 || DK.ZGP:=_zgp;
                                    _put:=1
                                 ?};
                                 {? _grop<>null()
                                 || DK.GROP:=_grop;
                                    _put:=1
                                 ?};
                                 {? _zlgd<>null()
                                 || DK.ZLGD:=_zlgd;
                                    _put:=1
                                 ?};
                                 {? DK.M().J2<>null()
                                 || DK.J2:=DK.M().J2;
                                    DK.T2:='M';
                                    DK.WS2:=exec('oblWSP','jm',DK.M);
                                    DK.IL2:=0;
                                    exec('oblJMG','jm',DK,'IL',DK.PLUS='T');
                                    _put:=1
                                 ?};
                                 {? _put>0
                                 || _result.RESULT:=DK.put()
                                 ?};
::                               Rozpisanie wg lokalizacji
                                 {? DK.N().MAG().PAL='T'
                                 ||
::                                  Magazyn paletowy - jeżeli podano paletę/lokalizację to rozpisywanie wg nich,
::                                  w przeciwnym razie rozpisywanie FIFO
                                    _eanl_ref:={? _eanl<>'' || exec('FindAndGet','#table',EANL,_eanl,,,null) || null ?};
                                    exec('initNOPAL','magdok_palety',_kodpal,_eanl_ref);
                                    exec('rozpNOPAL','magdok_palety');
                                    exec('doneNOPAL','magdok_palety')
                                 |? _eanl<>''
                                 || exec('adddkl4zl','magdok_prod',_eanl)
                                 ?};
                                 {? DK.PLUS='N'
                                 || {? _sc=''
                                    || _sta_r:=exec('rej_mat_il_rez','zl_common',_src_ref,$_zlim,SC.MAG
                                                ,'',,{? _where=2 || 'ZLGD' || 'ZGP' ?},,_kodpal);
                                       _sta_d:=exec('sc_il_rez','zl_nlimit','',$_zlim,SC.MAG)
                                    ?};
                                    {? _sta_r>0 | _sta_d>0
                                    || _ilosc:=exec('update_rezerwacje','zl_nlimit'
                                          ,{? _sc<>'' || SC.SRDK || '' ?},DK.IL,_src_ref);
::                                     Uzupełnienie tabeli z refami DK (jeżeli utworzono na podstawie rezerwacji)
                                       {? _ilosc>0 & type_of(_dk_rez)<>type_of(~~)
                                       || _dk_rez.REF:=$DK.ref();
                                          _dk_rez.add()
                                       ?};
                                       {? DK.M().J2<>null()
                                       || exec('update','rezerwacje','DK',DK.ref(),DK.N().MAG,DK.M,DK.IL-_ilosc,DK.SRDK
                                           ,,,,,,DK.IL2,DK.J2,DK.WS2)
                                       || exec('update','rezerwacje','DK',DK.ref(),DK.N().MAG,DK.M,DK.IL-_ilosc,DK.SRDK)
                                       ?}
                                    || {? DK.M().J2<>null()
                                       || exec('update','rezerwacje','DK',DK.ref(),DK.N().MAG,DK.M,DK.IL,DK.SRDK
                                           ,,,,,,DK.IL2,DK.J2,DK.WS2)
                                       || exec('update','rezerwacje','DK',DK.ref(),DK.N().MAG,DK.M,DK.IL,DK.SRDK)
                                       ?}
                                    ?}
                                 ?}
                              ?};
                              DK.cntx_pop()
                           ?}
                        ?}
                     ?};
                     _sc='' & SC.next() & ilosc>0 & _result.RESULT=1
                  !}
               ?};
               _sc='' & OKR.next() & ilosc>0
            !};
            {? ilosc>0 || _result.RESULT:=0 ?}
         || _result.RESULT:=0
         ?};
         OKR.cntx_pop()
      ||
         {? _sc<>'' & (' '+_mpdoks_zw)*(' '+ND.TYP().T+' ')
         ||
::          Zwrot z produkcji (cena wg dostawy pierwotnej)
            _cena:=exec('FindAndGet','#table',SC,_sc,,"SC.C"
               ,exec('mptz_prop','zl_common',_d,exec('get','#params',500711),_a))
         || _cena:=exec('mptz_prop','zl_common',_d,exec('get','#params',500711),_a)
         ?};
         {? _prdk<>'' & _sc<>'' & (' '+_mpdoks_zw)*(' '+ND.TYP().T+' ') & ND.TYP().DN='T'
         ||
::          Podana dostawa pierwotna, pozycja będzie z nią powiązana
            _rdk:=exec('FindAndGet','#table',SC,_sc,,"SC.RDK",0);
            _ndk:=exec('FindAndGet','#table',SC,_sc,,"SC.NDK",'');
            _dt_dost:=exec('FindAndGet','#table',SC,_sc,,"SC.D",date(0,0,0));
            _srdk:=exec('FindAndGet','#table',SC,_sc,,"SC.SRDK",'');
            _result.DK:=exec('adddk','magdok_poz',_e,_d,_c,{? _cewi>0 || _cewi || _cena ?}
                             ,_dt_dost,,,,,,,,7,_rdk,_ndk,_dk_c,_srdk,_prdk,,_a,_wyd,,,,,_tw)
         || _result.DK:=exec('adddk','magdok_poz',_e,_d,_c,{? _cewi>0 || _cewi || _cena ?}
                             ,,,,,,,,,7,,,_dk_c,,,,_a,_wyd,,,,,_tw)
         ?};
         {? _result.DK
         || _result.RESULT:=1;
::          Po utworzeniu DK uzupelniam dodatkowe pola
            DK.cntx_psh(); DK.clear();
            {? DK.seek(_result.DK)
            || _result.DK_C:=DK.DK_C;
               _put:=0;
               {? _cewi>0
               || DK.WARZ:=DK.IL*_cena $2;
                  _put:=1
               ?};
               {? _zlim<>null()
               || DK.ZLIM:=_zlim;
                  DK.M_ZLIM:=ref_name(_zlim);
                  _put:=1
               ?};
               {? _zparn<>null()
               || DK.PARTIA:=_zparn;
                  _put:=1
               ?};
               {? _zgp<>null()
               || DK.ZGP:=_zgp;
                  _put:=1
               ?};
               {? _tm_stamp<>''
               || DK.TM_STAMP:=_tm_stamp;
                  _put:=1
               ?};
               {? _zgh<>null()
               || DK.ZGH:=_zgh;
                  _put:=1
               ?};
               {? _grop<>null()
               || DK.GROP:=_grop;
                  _put:=1
               ?};
               {? _zlgd<>null()
               || DK.ZLGD:=_zlgd;
                  _put:=1
               ?};
               {? DK.M().J2<>null()
               || DK.J2:=DK.M().J2;
                  DK.T2:='M';
                  DK.WS2:=exec('oblWSP','jm',DK.M);
                  DK.IL2:=0;
                  exec('oblJMG','jm',DK,'IL',DK.PLUS='T');
                  _put:=1
               ?};
               {? _put>0
               || _result.RESULT:=DK.put()
               ?};
               {? DK.PLUS='N'
               || {? DK.M().J2<>null()
                  || exec('update','rezerwacje','DK',DK.ref(),DK.N().MAG,DK.M,DK.IL,DK.SRDK,,,,,,DK.IL2,DK.J2,DK.WS2)
                  || exec('update','rezerwacje','DK',DK.ref(),DK.N().MAG,DK.M,DK.IL,DK.SRDK)
                  ?}
               ?}
            ?};
            DK.cntx_pop()
         ?}
      ?}
   ?};
   exec('dk_sum','magdok_wspolne',ND.ref());
   {? _result.RESULT
   || exec('obl_stan','magazyn_stan',_d,1,ND.MAG)
   ?}
|| _result.RESULT:=0
?};
{? var_pres('_tab_rez')>100
|| _tab_rez.cntx_pop();
   _tab_rez.ndx_drop(_ndx1)
?};
ZK_P.cntx_pop();
SC.clear();
ND.cntx_pop();
_result


\adddkl4zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Rozpisanie pozycji dokumentu rozchodowego dla wymiarow do konkretnej lokalizacji.
::       Działa na aktualnym rekordzie tabeli DK.
::   WE: _a - $EANL.ref - ref lokalizacji
::----------------------------------------------------------------------------------------------------------------------
_eanl:={? var_press('_a')=type_of('') || _a || '' ?};
{? _eanl='' || return() ?};

VAR_DEL.delete('__stansl');

:: tabela kontrolujaca juz rozpisane pozycje
_ilwyk:=tab_tmp(2,'SL','STRING[16]',''
         ,'SCEAN','STRING[128]',''
         ,'ILL','REAL','');

ND.cntx_psh();
DK.N();
_mag:=BEER.MG;
BEER.MG:=ND.MAG;
_tmg:=(1+BEER.MG().TYP)='D';

_typ_lok:=ND.MAG().SP_REANL;
_wgmggr:=ND.MAG().WGMGGR='T';
_wgscean:=ND.MAG().SP_IDMOB;

_doroz:={? DK.M().RODZ='T' || DK.IL || 0 ?};
:: Zawsze sprawdzana wyłącznie lokalizacja, nie brany pod uwagę termin ważności
_scsql:='xxx';
_sprtw:=0;
::{? DK.M().SETW='P' & DK.DOST<>date(0,0,0)
::|| _scsql:=DK.SRDK;
::   _sprtw:=DK.TW
::|| _scsql:='xxx';
::   _sprtw:=0
::?};
{? (~DK.ZP | _tmg) & _doroz>0
||
::  rozpiska wg lokalizacji
::  dla typow T i W dwa przebiegi - drugi dla terminow zerowych
   _ilep:={? 'TW'*_typ_lok || 2 || 1 ?};
:: Dodatkowy przebieg, jeżeli na pozycji dokumentu określony termin (termin ważności wg dostawy)
  _czytw:={? DK.TW<>date(0,0,0) || 1 || 0 ?};
   VAR_DEL.delete('__stansl');
   __stansl:=exec('sort_sl','magazyn_stan',_typ_lok,_wgmggr,ND.MAG,DK.M,ND.DLAKH,null(),0,DK.SCEAN,1,_sprtw,DK.STATS);
   {? __stansl.size()
   || {!
      |? __stansl.clear();
         {? __stansl.first()
         || {!
            |?
               _scean:={? __stansl.SCEAN<>'' || __stansl.SCEAN || 'xxxx' ?};
::             Przebiegi tylko dla lokalizacji zgodne z podanym parametrem
               {? DK.SCEAN=_scean & __stansl.EAN=_eanl & (SL.clear(); SL.seek(__stansl.SQL))
                  & (_czytw=0 | (_czytw=1 & DK.TW=SL.TW))
               ||
::                ustawienie zmiennych
                  _sl_tw:=SL.TW;
                  _sl_mg:=SL.MG;
                  _sl_mt:=SL.M;
                  _sl_lk:=exec('zwrocdok','wymiary_mag',SL.EANL,_sl_mg,1);
                  _sl_sq:=$SL.ref();
                  _sl_pl:=SL.PAL;
                  {? __stansl.SCEAN<>''
                  || SLD.cntx_psh();
                     SLD.index('SCEAN');
                     SLD.prefix(_scean,_scean,SL.MG,SL.ref());
                     _il_tmp:={? SLD.first() || _il_tmp:=SLD.IL || 0 ?};
                     SLD.cntx_pop();
                     _sl_il:=_il_tmp-exec('ilwydsce','magazyn_stan',_sl_mg,_sl_mt,_scean,_sl_lk,_sl_tw,null(),0,1)
::                     _sl_il:=exec('ilenasld','magazyn_stan',SL.ref(),SL.MG,_scean,$DK.N)
                  || _sl_il:=SL.IL
                  ?};

                  {? {? 'TW'*_typ_lok & _ilep=2 || _sl_tw<>date(0,0,0)
                     |? 'TW'*_typ_lok & _ilep=1 || _sl_tw=date(0,0,0)
                     || 1
                     ?}
                  || _ilwyk.clear();
                     _ile:=_sl_il-{? _ilwyk.find_key(_sl_sq,_scean,) || _ilwyk.ILL || 0 ?};
                     {? _ile>0 & _ile>=_doroz
                     ||
                        DK_L.index('DK');
                        DK_L.prefix(DK.ref(),null);
                        {? {? __stansl.SCEAN<>''
                           || DK_L.find_key(_sl_lk,_sl_pl,_sl_tw,1,__stansl.SCEAN)
                           || DK_L.find_key(_sl_lk,_sl_pl,_sl_tw,1)
                           ?}
                        || DK_L.IL+=_doroz;
                           exec('reoIL2','magdok_wymiary');
                           DK_L.put(1)
                        || DK_L.clear();
                           DK_L.blank();
                           DK_L.DK:=DK.ref();
                           DK_L.MG:=ND.MAG;
                           DK_L.DK_LN:=null;
                           DK_L.Z:='N';
                           DK_L.LOK:=_sl_lk;
                           DK_L.TW:=_sl_tw;
                           DK_L.IL:=_doroz;
                           DK_L.M:=DK.M;
                           DK_L.JM:=DK.M().J;
                           DK_L.AUTO:=0;
                           DK_L.SCSQL:={? _scsql='xxx' || DK.SRDK || _scsql ?};
                           DK_L.SCEAN:=__stansl.SCEAN;
                           exec('reoIL2','magdok_wymiary');
                           exec('uzupIDkod','magdok_palety',DK_L);
                           DK_L.add(1)
                        ?};
                        _ilwyk.clear();
                        {? _ilwyk.find_key(_sl_sq,_scean,)
                        || _ilwyk.ILL+=_doroz;
                           _ilwyk.put(1)
                        || _ilwyk.blank();
                           _ilwyk.SL:=_sl_sq;
                           _ilwyk.ILL:=_doroz;
                           _ilwyk.SCEAN:=_scean;
                           _ilwyk.add(1)
                        ?};
                        _doroz:=0
                     |? _ile>0 & _ile<_doroz
                     ||
                        DK_L.index('DK');
                        DK_L.prefix(DK.ref(),null);
                        {? {? __stansl.SCEAN<>''
                           || DK_L.find_key(_sl_lk,_sl_pl,_sl_tw,1,__stansl.SCEAN)
                           || DK_L.find_key(_sl_lk,_sl_pl,_sl_tw,1)
                           ?}
                        || DK_L.IL+=_ile;
                           exec('reoIL2','magdok_wymiary');
                           DK_L.put(1)
                        || DK_L.clear();
                           DK_L.blank();
                           DK_L.DK:=DK.ref();
                           DK_L.MG:=ND.MAG;
                           DK_L.DK_LN:=null;
                           DK_L.Z:='N';
                           DK_L.LOK:=_sl_lk;
                           DK_L.TW:=_sl_tw;
                           DK_L.IL:=_ile;
                           DK_L.M:=DK.M;
                           DK_L.JM:=DK.M().J;
                           DK_L.AUTO:=0;
                           DK_L.SCSQL:={? _scsql='xxx' || DK.SRDK || _scsql ?};
                           DK_L.SCEAN:=__stansl.SCEAN;
                           exec('reoIL2','magdok_wymiary');
                           exec('uzupIDkod','magdok_palety',DK_L);
                           DK_L.add(1)
                        ?};
                        _ilwyk.clear();
                        {? _ilwyk.find_key(_sl_sq,_scean)
                        || _ilwyk.ILL+=_ile;
                           _ilwyk.put(1)
                        || _ilwyk.blank();
                           _ilwyk.SL:=_sl_sq;
                           _ilwyk.ILL:=_ile;
                           _ilwyk.SCEAN:=_scean;
                           _ilwyk.add(1)
                        ?};
                        _doroz-=_ile
                     ?}
                  ?}
               ?};
               _doroz & __stansl.next()
            !}
         ?};
         {? _czytw>0
         || _czytw:=0
         || _ilep-=1
         ?};
         _ilep>0 & _doroz>0
      !}
   ?}
?};
BEER.MG:=_mag;
VAR_DEL.delete('__stansl');
ND.cntx_pop();
~~

:Sign Version 2.0 jowisz:1045 2024/02/05 12:18:36 2f04177ec0ffcfa5941f5a82415a335423000b3954338dc7096075f02eb0729e7b00fe980da4f3ba3ca954078b496d9cd6bb306201f4758a1c0c8d6f2783dcdb3694f5b2c0c584637e411230a2faf74a51541bd53270d51823250007bfaeccfd4e316a0e2bb2d72e66ea37b015469262fe58e6264c841900209843685e4bb1f1
