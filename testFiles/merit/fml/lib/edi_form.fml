:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: edi_form.fml
:: Utworzony: 20.05.2016
:: Autor: AWI
::======================================================================================================================
:: Zawartość: Formuły komunikatów edi
::======================================================================================================================


\inv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formułą główna komunikatu ECOD-INV v7.53 | Faktura (z dnia 2013-12-18)
::   WE: _a - instrukcja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
{? _a='ports'
|| exec('FindAndGet','#table',B_PREL,_b,,"
      {? B_PREL.ISTDEF_T='R'
::    Odczyt dokumentu zakupu
      || exec('ports','#b_port','edi_form','b_port_fakz')
::    Zapis faktury sprzedaży
      || exec('ports','#b_port','edi_form','b_port_faks')
      ?}")
|? _a='parses'
|| 1
|? _a='setEnv'
|| exec('FindAndGet','#table',B_PREL,_b,,"
      {? B_PREL.ISTDEF_T='R'
::    Odczyt dokumentu zakupu
      || __PARSES.setEnv('LZK_ZAK_DZAK');
         exec('init','lzk');
         exec('init_zak','lzk')
::    Zapis faktury sprzedaży
      || __PARSES.setEnv('LSP_FAK_DRFP');
         exec('init','lsp');
         exec('init_fak','lsp');
         exec('czytaj','#stalesys',,XINFO)
      ?}");
   ~~
|| ~~
?}


\orders
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formułą główna komunikatu ECOD-ORDERS v2.0. | Zamówienie (z dnia 2012-11-06)
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::       _a='parses' - 0/1
::       _a='setEnv' - ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a='ports'
|| exec('FindAndGet','#table',B_PREL,_b,,"
      {? B_PREL.ISTDEF_T='R'
::    Odczyt zamówienie sprzedaży
      || exec('ports','#b_port','edi_form','b_port_zk_n')
::    Zapis zamówienie dostaw
      || exec('ports','#b_port','edi_form','b_port_zd_nag')
      ?}")
|? _a='parses'
|| 1
|? _a='setEnv'
|| exec('FindAndGet','#table',B_PREL,_b,,"
      {? B_PREL.ISTDEF_T='R'
::    Odczyt zamówienie sprzedaży
      ||
         __PARSES.setEnv('LSP_ZKN_DRZK');
         _log:=fopen('edi.log','a',1);
         fwrite(_log,ST.ODDZ+' - '+$ST.AR+' - '+$ST.AM+' - '+ZK_N.name());
         fclose(_log);
         exec('init','lsp');
         exec('init_zkn','lsp')
::    Zapis zamówienie dostaw
      ||
         __PARSES.setEnv('LZK_ZDS_DZAD');
         exec('init','lzk');
         exec('init_zds','lzk')
      ?}");
   ~~
|| ~~
?}


\b_port_faks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Porty FAKS - dokument sprzedaży
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=FAKS,      type=_FAKS,    name=Dokument sprzedaży,   required=N,    fml_val="NOT_EDITABLE"
::# kind=WY,   symbol=FAKS,      type=_FAKS,    name=Dokument sprzedaży,   required=N
1


\b_port_fakz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Porty FAKS - dokument zakupu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=ZAK,       type=_FAKS,    name=Dokument zakupu,      required=N,    fml_val="NOT_EDITABLE"
::# kind=WY,   symbol=ZAK,       type=_FAKS,    name=Dokument zakupu,      required=N
1


\b_port_zk_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Porty ZK_N
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=ZK_N,      type=_ZK_N,    name=Zamówienie sprzedaży,    required=N,    fml_val="NOT_EDITABLE"
::# kind=WY,   symbol=ZK_N,      type=_ZK_N,    name=Zamówienie sprzedaży,    required=N
1


\b_port_zd_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Porty ZD_NAG
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=ZD_NAG,    type=_ZD_NAG,  name=Zamówienie dostawy,    required=N,    fml_val="NOT_EDITABLE"
::# kind=WY,   symbol=ZD_NAG,    type=_ZD_NAG,  name=Zamówienie dostawy,    required=N
1


\verify_inv_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: weryfikacja komunikatow invoice typu xml
::----------------------------------------------------------------------------------------------------------------------
_kh:=exec('find_kh','edi_form',XML_D.SEL_GLN);
{? _kh=null
||
:: dodanie informacji do tabeli z komunikatem zwrotnym
   exec('add_kom','#message','Brak kontrahenta o kodzie %1.'@[XML_D.SEL_GLN],2,XML_D.INV_NR);
   EDI_Z.POMIN:='T'
?};
{? ST.ODDZ='' | ST.AR=0 | ST.AM=0
||
   exec('add_kom','#message','Nie powiodło się ustawienie parametrów pracy.'@,2,XML_D.INV_NR);
   EDI_Z.POMIN:='T'
?};
_ar:=XML_D.INV_DATE~1;
_am:=XML_D.INV_DATE~2;
{? ~exec('czy_z_ok','okresy',-3,0,_ar,_am)
||
:: kontrola zamkniętego okresu
   _okr:=form(date(_ar,_am,0),,8);
   exec('add_kom','#message','Okres %1 aktualnie jest zamknięty brak możliwości rejestracji dokumentu.'@[_okr],2,XML_D.INV_NR);
   EDI_Z.POMIN:='T'
?};
XML_PDM.prefix(XML_D.TM_STAM);
{? XML_PDM.first()
||
   {!
   |?
      _mat:=exec('find_m','edi_form',XML_PDM.EAN,_kh);
      _jm:=exec('jm','edi_form','I',XML_PDM.JM);
      {? _mat=null
      ||
         exec('add_kom','#message','Brak materiału o kodzie %1.'@[XML_PDM.EAN],2,XML_D.INV_NR);
         EDI_Z.POMIN:='T'
      |? _jm=null()
      || exec('add_kom','#message','Pozycja %1 - brak odpowiednika jednostki miary.'@[$XML_PDM.POZ],2,XML_D.INV_NR);
         EDI_Z.POMIN:='T'
      |? _jm<>exec('FindAndGet','#table',M,$_mat,,"M.J",null())
      || exec('add_kom','#message','Pozycja %1 - jednostka miary niezgodna z kartoteką materiałową.'@[$XML_PDM.POZ],2,XML_D.INV_NR);
         EDI_Z.POMIN:='T'
      ?};
      XML_PDM.next()
   !}
?};
{? _kh & XML_D.INV_NR<>''
|| _Chk:=sql('
      select count(ID) COUNT_ID
      from @FAKS
      where KH=:_a and ID=\':_b\' '
      ,_kh,XML_D.INV_NR);
   {? _Chk.first() & _Chk.COUNT_ID
   || exec('add_kom','#message','Dokument w systemie już istnieje.'@,2,XML_D.INV_NR);
      EDI_Z.POMIN:='T'
   ?}
?}


\find_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wyznaczanie KH.reference na podstawie GLN
::   WE: _a - GLN kontrahneta
::   WY: KH.reference jesli KH.GLN = _a, null - wpp
::----------------------------------------------------------------------------------------------------------------------
{? _a='' || return(null()) ?};
_wyn:=exec('FindInSet','#table','KH','GLN',_a,2,,1);
{? $_wyn=''
|| FIND_KH2:=_a
?};
_wyn


\find_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: znajduje towar zgodny z nadanym numerem GTIN
::   WE: _a - GTIN
::       _b - KH.ref
::       _c - indeks wg kontrahenta
::   WY: M.reference jesli M.KODK = _a, null - wpp
::----------------------------------------------------------------------------------------------------------------------
_c:={? var_pres('_c')=type_of('') || _c || '' ?};
{? _a='' & _c='' || return(null()) ?};
{? var_pres('_b')<>type_of(null) || _b:=ZK_N.KH ?};
FIND_M:=_a;

_mref:={? _b=null || null || exec('findm_kh_kk','edi_form',_b,_a,_c) ?};
{? _mref=null & _a<>'' || exec('FindInSet','#table','M','KODK',_a,,,1) || _mref ?}


\findm_kh_kk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wyszukuje material wg kodu kreskowego kontrahenta
::   WE: _a - KH.reference
::       _b - kod kreskowy
::       _c - indeks wg kontrahenta
::   WY: M.reference lub null jesli nie znaleziono materialu wg kodu kreskowego kontrahenta
::----------------------------------------------------------------------------------------------------------------------
_c:={? var_pres('_c')=type_of('') || _c || '' ?};
{? _b='' & _c='' || return(null()) ?};
MKODK.cntx_psh();
{? _b<>''
||
   MKODK.index('KH_KK');
   MKODK.prefix(_a,_b,_b);
   _find:=MKODK.first()
|?
   _c<>''
||
   MKODK.index('KH_KTM');
   MKODK.prefix();
   _find:=MKODK.find_tab(,'KH',,'=',_a,'KTM',,':*',form(50+_c))
?};
_return:=
   {? (_b<>'' | _c<>'') & _find
   || {? var_pres('__P')=type_of(obj_new('obj')) & var_pres('MKDOK',__P) || __P.MKODK:=MKODK.ref() ?};
      MKODK.M
   || null
   ?};
MKODK.cntx_pop();

_return


\jm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Jednostka miary
::   WE: _a - E-zapis, I-odczyt
::       _b - jednostka miary
::   WY: _a=E - string
::       _a=I - SLO.ref()
::----------------------------------------------------------------------------------------------------------------------
_jm:=_b;

{? _a='E'
|| {? _jm='m'     || 'MTR'
   |? _jm='m2'    || 'MTK'
   |? _jm='kg'    || 'KGM'
   |? _jm='l'     || 'LTR'
   |? _jm='szt'   || 'PCE'
   |? _jm=''      || 'PR'
   |? _jm='t'     || 'TNE'
:: jednostki uzgodnione- poza definicją EDI
   |? _jm='kpl'   || 'SET'
   |? _jm='op'    || 'PA'
                  || ''
   ?}
|? _a='I'
|| JM.cntx_psh();
   JM.index('KOD');
   JM.prefix();
   _wyn:=
      {? _jm='MTR' & JM.find_key('m','m')       || JM.ref()
      |? _jm='MTK' & JM.find_key('m2','m2')     || JM.ref()
      |? _jm='KGM' & JM.find_key('kg','kg')     || JM.ref()
      |? _jm='LTR' & JM.find_key('l','l')       || JM.ref()
      |? _jm='PCE' & JM.find_key('szt','szt')   || JM.ref()
      |? _jm='PR'  & JM.find_key('','')         || JM.ref()
      |? _jm='TNE' & JM.find_key('t','t')       || JM.ref()
:: jednostki uzgodnione- poza definicją EDI
      |? _jm='SET' & JM.find_key('kpl','kpl')   || JM.ref()
      |? _jm='PA'  & JM.find_key('op','op')     || JM.ref()
                                                || null()
      ?};
   JM.cntx_pop();
   _wyn
?}


\bl_faks_z
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: poczatek dokumentu zakupu
::   WE: _a - typ dokumentu zakupu
::       _b - numer dokumentu
::----------------------------------------------------------------------------------------------------------------------
BEER.WYSTFAKS:=null();
_typsp:=exec('FindInSet','#table','TYPYSP','TYPYKOD',_a,_a);
{? _typsp=null()
|| EDI_Z.POMIN:='T';
   exec('add_kom','#message','Brak typu dokumentu %1.'@[_a],4,_b);
   0
|? EDI_Z.POMIN='N'
||
   POM.TAB:='FAKS';
   POM.TYPDOK:=exec('FindInSet','#table','TYPYSP','TYPYKOD',_a,_a,"TYPYSP.T",,,'');
   POM.NRT:=exec('FindInSet','#table','TYPYSP','TYPYKOD',_a,_a,"TYPYSP.NRT",,,0);
   BEER.SZ:='Z';
   HELP.WHERE:=FAKS.WHERE:='Z';

   FAKS.clear(); FAKS.blank(); FAKS.memo_set(,'UWAGI');
   {? exec('add','faktury_nag',_typsp,,,null,,,,,,,,'N')
   || BEER.WYSTFAKS:=FAKS.ref()
   ?}
?}


\platnosc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: <InvoiceHeader><InvoiceDueDate>
::----------------------------------------------------------------------------------------------------------------------
FAKS.TZ


\formplat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Forma platnosci
::   WE: _a - E-zapis, I-odczyt
::       _b - jesli _a='I' forma platnosci
::       _c - jesli _a='I' ilosc dni platnosci
::----------------------------------------------------------------------------------------------------------------------
{? _a='E'
|| _wyn:='';
   {? FAKS.PL
   || ZR_SLO.cntx_psh();
      ZR_SLO.index('SLO_NR');
      ZR_SLO.prefix(FAKS.PL,1);
      {? ZR_SLO.first() || _wyn:={? ZR_SLO.WAR='T' || '10' || '42' ?} ?};
      ZR_SLO.cntx_pop()
   ?};
   _wyn
|? _a='I'
|| _wyn:=null();
   {? XINFO.SLP
   || SLO.cntx_psh();
      ZR_SLO.cntx_psh();
      SLO.index('SL');
      SLO.prefix(XINFO.SLP);
      _loop:=SLO.first();
      {!
      |? _loop
      |!
         ZR_SLO.index('SLO_NR');
         ZR_SLO.prefix(SLO.ref(),1);
         {? ZR_SLO.first()
         || {? _b='10' & ZR_SLO.WAR='T'
            || _wyn:=SLO.ref()
            |? _b='42' & ZR_SLO.WAR='N'
            || ZR_SLO.prefix(SLO.ref(),2);
               {? #ZR_SLO.WAR=_c || _wyn:=SLO.ref() ?}
            ?}
         ?};
         _loop:=SLO.next()
      !};
      ZR_SLO.cntx_pop();
      SLO.cntx_pop()
   ?};
   _wyn
?}


\isOrder
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Sprawdza czy jedno zamowienie do faktury
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_Order:=exec('order','edi_form');
_loop:=_Order.first();
_zam_kl:=_Order.ZAM_KL;
{!
|? _loop
|!
   _wyn:=_zam_kl=_Order.ZAM_KL;
   _loop:=_wyn & _Order.next()
!};
_wyn


\order
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Zwraca tabele pozycji faktury i odpowiadajacych im zamowien
::----------------------------------------------------------------------------------------------------------------------
_faks:={? FAKS.FKSQL='' || FAKS.ref() || exec('FindAndGet','#table',FAKS,FAKS.FKSQL,,,null()) ?};

_wyn:=_Tab:=tab_tmp(1
   ,'POZ'      ,'INTEGER'     ,'Pozycja'
   ,'ZAM_KL'   ,'STRING[50]'  ,'Symbol'
   ,'DP'       ,'DATE'        ,'Data');

{? _faks=null() || return(_wyn) ?};

_oddz:=1+(8+($_faks)+3);

FAP.cntx_psh();
FAP.use((FAP.name()-3)+(ref_name(_faks)+3));
DK.cntx_psh();
ZK_RN.cntx_psh();
ZK_N.cntx_psh();
OKR.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
_loop:=OKR.first();
{!
|? _loop
|!
   FAP.index('FAP');
   FAP.prefix(_faks);
   _loop:=FAP.first();
   {!
   |? _loop
   |!
      DK.use('dokma'+_oddz+(($OKR.ROK)+2));
      DK.index('FAP');
      DK.prefix($FAP.ref());
      _loop:=DK.first();
      {!
      |? _loop
      |!
         {? DK.ZAM_RN<>''
         || ZK_RN.use(8+DK.ZAM_RN);
            ZK_RN.prefix();
            {? ZK_RN.seek(DK.ZAM_RN)
            || _Tab.POZ:=FAP.POZ;
               _Tab.ZAM_KL:=exec('FindAndGet','#table',ZK_N,$ZK_RN.N,,"ZK_N.ZAM_KL",'');
               _Tab.DP:=exec('FindAndGet','#table',ZK_N,$ZK_RN.N,,"ZK_N.DP",'');
               _Tab.add()
            ?}
         ?};
         _loop:=DK.next()
      !};
      _loop:=FAP.next()
   !};
   _loop:=OKR.next()
!};
OKR.cntx_pop();
ZK_N.cntx_pop();
ZK_RN.cntx_pop();
DK.cntx_pop();
FAP.cntx_pop();

_wyn


\buyerOrderN
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: <Order><BuyerOrderNumber>
::   WE: _a - [N]aglowek, [P]ozycja
::       _b - Jesli _a='P' numer pozycji
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_Order:=exec('order','edi_form');
{? _a='N' || {? _Order.first() || _wyn:=_Order.ZAM_KL ?}
|? _a='P' || {? _Order.find_key(_b) || _wyn:=_Order.ZAM_KL ?}
?};
_wyn


\buyerOrderD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: <Order><BuyerOrderDate>
::   WE: _a - [N]aglowek, [P]ozycja
::       _b - Jesli _a='P' numer pozycji
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_Order:=exec('order','edi_form');
{? _a='N' || {? _Order.first() || _wyn:=_Order.DP ?}
|? _a='P' || {? _Order.find_key(_b) || _wyn:=_Order.DP ?}
?};
_wyn


\where_delivery
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: umieszczac informacje o dostawie
::   WE: _a - 0-sprawdzane dla pozycji, 1-sprawdzane dla naglowka
::       _b - =-1-zwroc GLN albo pole podane w _d
::            =0-pierwsze wywolanie
::            =1-kolejne
::            =2-ostatnie wywolanie
::       _c - $FAP.ref()
::       _d - akronim pola do zwrocenia dla _b=-1
::   WY: _b=-1 - =GLN miejsca dostawy albo pole podane w _d
::       _b=0
::       _b=1
::       _b=2  - =1-umieszczac informacje o dostawie, =0-wpp
::----------------------------------------------------------------------------------------------------------------------
{? SKID.EXP_IMP='E'
||
   _wyn:=0;
   {? _b=-1
   || _wyn:=
         {? _a=0 & __Mscgln.find_key(_c)
            | _a & __Mscgln.first()
         || ($('__Mscgln.'+_d))()
         || ''
         ?}
   |? _b=0
   || VAR_DEL.delete('__deliv','__Mscgln');
      __deliv:=0;
      __Mscgln:=tab_tmp(1
         ,'POZ'   ,'INTEGER'     ,'Pozycja faktury'
         ,'D'     ,'DATE'        ,'Data'
         ,'SYM'   ,'STRING[20]'  ,'Symbol'
         ,'GLN'   ,'STRING[13]'  ,'GLN'
         ,'NAZ'   ,'STRING[175]' ,'Nazwa'
         ,'UL'    ,'STRING[150]' ,'Ulica'
         ,'MIASTO','STRING[35]'  ,'Miasto'
         ,'KPOCZ' ,'STRING[9]'   ,'Kod pocztowy'
         ,'KRAJ'  ,'STRING[3]'   ,'Kraj');
      ND.cntx_psh(); DK.cntx_psh(); OKR.cntx_psh(); KH_MSC.cntx_psh(); KH_ODB.cntx_psh(); KH.cntx_psh(); KRAJE.cntx_psh(); FAP.cntx_psh();
      KRAJE.index('NAZ');
      _ref:={? FAKS.FKSQL<>'' || FAKS.FKSQL || $FAKS.ref ?};
      _oddz:=1+(5-_ref);
      OKR.index('MC'); OKR.prefix(REF.FIRMA,1);
      {? OKR.last
      ||
         _kh_odb:=_msc:=null();
         {!
         |?
            _msc_dos:='';
            _maska:=_oddz+($OKR.ROK+2);
            ND.use('nagdo'+_maska);
            ND.index('FAKS_REF'); ND.prefix(_ref,_ref);
            {? ND.first()
            || {!
               |? _msc:={? ND.KH_MSC || 1 |? ND.KH_ODB || 2 || 3 ?};
                  DK.use('dokma'+_maska);
                  DK.index('DOKMAG'); DK.prefix(ND.ref());
                  _loop1:=DK.first();
                  {!
                  |? _loop1
                  |!
                     {? DK.FAP<>''
                     ||
                        FAP.use(8+DK.FAP);
                        FAP.prefix();
                        _poz:={? FAP.seek(DK.FAP) || FAP.POZ ?};
                        {? _poz & __Mscgln.find_key(_poz)=0
                        ||
                           _tab:={? _msc=1 || 'ND.KH_MSC().' |? _msc=2 || 'ND.KH_ODB().' || 'ND.KH().' ?};
                           __Mscgln.POZ:=_poz;
                           __Mscgln.D:=ND.D;
                           __Mscgln.SYM:=ND.SYM;
                           __Mscgln.GLN:=($(_tab+'GLN'))();
                           __Mscgln.NAZ:=($(_tab+'NAZ'))();
                           __Mscgln.UL:=($(_tab+'UL'))();
                           __Mscgln.MIASTO:=($(_tab+'MIASTO'))();
                           __Mscgln.KPOCZ:=($(_tab+'KPOCZ'))();
                           _kraj:=-($(_tab+'KRAJ'))(); _kraj:=~(1+_kraj)+(1-_kraj);
                           __Mscgln.KRAJ:={? _kraj<>'' & KRAJE.find_key(_kraj) || KRAJE.KODISO || '' ?};
                           __Mscgln.add()
                        ?}
                     ?};
                     _loop1:=DK.next()
                  !};
                  _msc:={? _msc=1 || $ND.KH_MSC |? _msc=2 || $ND.KH_ODB || $ND.KH ?}+form(ND.D)+ND.SYM;
                  {? __deliv=0 || _msc_dos:=_msc; __deliv:=1
                  |? (_msc_dos*_msc)=0 || _msc_dos+=_msc; __deliv+=1
                  ?};
                  ND.next()
               !}
            ?};
            OKR.prev
         !}
      ?};
      ND.cntx_pop(); DK.cntx_pop(); OKR.cntx_pop(); KH_MSC.cntx_pop(); KH_ODB.cntx_pop(); KH.cntx_pop(); KRAJE.cntx_pop(); FAP.cntx_pop();
      {? __deliv>1
      || FAP.cntx_psh();
         FAP.use('fakpo'+(FAKS.name()+3));
         FAP.index('FAP');
         FAP.prefix(FAKS.ref());
         {? FAP.first()
         || {!
            |? {? ~__Mscgln.find_key(FAP.POZ)
               || __Mscgln.POZ:=FAP.POZ;
                  __Mscgln.D:=FAKS.DW;
                  __Mscgln.SYM:=FAKS.SYM;
                  __Mscgln.GLN:=FAKS.KH().GLN;
                  __Mscgln.NAZ:=FAKS.KH().NAZ;
                  __Mscgln.UL:=FAKS.KH().UL;
                  __Mscgln.MIASTO:=FAKS.KH().MIASTO;
                  __Mscgln.KPOCZ:=FAKS.KH().KPOCZ;
                  _kraj:=-FAKS.KH().KRAJ;
                  _kraj:=~(1+_kraj)+(1-_kraj);
                  __Mscgln.KRAJ:={? _kraj<>'' & KRAJE.find_key(_kraj) || KRAJE.KODISO || '' ?};
                  __Mscgln.add()
               ?};
               FAP.next()
            !}
         ?};
         FAP.cntx_pop()
      ?};
      _wyn:={? _a || __deliv=1 || __deliv>1 ?}
   |? _b=1
   || _wyn:={? _a || __deliv=1 || __deliv>1 ?}
   |? _b=2
   || _wyn:={? _a || __deliv=1 || __deliv>1 ?};
      VAR_DEL.delete('__deliv','__Mscgln')
   ?};
   _wyn
||
   0
?}


\dokument_wz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2008]
:: OPIS: Zwraca dowolna wartosc pola w powiazanym dokumencie WZ
::   WE: _a - akronim pola ktore ma byc zwrocone
::   WY: wartosc zadanego pola
::----------------------------------------------------------------------------------------------------------------------
_pole:='ND.'+_a;
_null:=exec('null_wyniku','edi_form',_pole);
_wyn:=_null;

ND.cntx_psh(); OKR.cntx_psh;

_ref:={? FAKS.FKSQL<>'' || FAKS.FKSQL || $FAKS.ref ?};
_oddz:=1+(5-_ref);

OKR.index('MC'); OKR.prefix(REF.FIRMA,1);
{? OKR.last
||
   {!
   |?
      ND.use('nagdo'+_oddz+($OKR.ROK+2));
      ND.index('FAKS_REF'); ND.prefix(_ref,_ref);
      {? ND.first() || _wyn:=($_pole)() ?};
      _wyn=_null & OKR.prev
   !}
?};

ND.cntx_pop(); OKR.cntx_pop;
_wyn


\null_wyniku
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: zwraca wartosc zerowa zgodna z typem przekaznej wartosci
::   WE: _a-wartosc dowolnego typu
::   WY: patrz opis
::----------------------------------------------------------------------------------------------------------------------
_typ:=type_of( ($_a)() );
{? _typ=7 || null
|? _typ=5 || time(0,0,0)
|? _typ=4 || date(0,0,0)
|? _typ=3 || "~~"
|? _typ=2 || ''
|? _typ=1 || 0
|| ~~
?}


\licenc_gln
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wartosc pola _a ze stalych systemu
::   WY: _a - akronim pola
::       _b - 0/1 - wczytywać KSTE, XINFO
::   WY: wartosc pola
::----------------------------------------------------------------------------------------------------------------------
_b:={? var_pres('_b')=type_of(0) || _b || 1 ?};
_result:='';
{? _b
||
   {? ODDZ.KOD<>'' & KSTE.name()<>'permane'+ODDZ.KOD
   || KSTE.use('permane'+ODDZ.KOD);
      KSTE.prefix();
      KSTE.first()
   ?};

   KSTE.get()
?};

{? _a<>'KRAJ' || exec('czytaj','#stalesys',,XINFO,_a) ?};

{? _a='KRAJ'
||
   _kst_kra:='';
   KRAJE.cntx_psh;
   _kst_kod:=KSTE.KRAJ().KOD;
   {? _kst_kod<>''
   ||
      KRAJE.index('KRAJE'); KRAJE.prefix(_kst_kod);
      {? KRAJE.first
      ||
         {!
         |?
            {? KRAJE.SYM=_kst_kod || _kst_kra:=KRAJE.KODISO ?};
            _kst_kra='' & KRAJE.next
         !}
      ?}
   ?};
   KRAJE.cntx_pop;
   {? _kst_kra<>'' || _kst_kra || XINFO.KRAJ().KODISO ?}
|? _a='UL'
||
   _kst_fld:='KSTE.'+_a;
   _inf_fld:='XINFO.'+_a;
   {? ($_kst_fld)()<>exec('null_wyniku','edi_form',_kst_fld)
   || _result:=($_kst_fld)()+' '+KSTE.NR_D;
     {? KSTE.NR_L<>''
     || _result+='/'+KSTE.NR_L
     ?}
   || _result:=($_inf_fld)()+' '+XINFO.NR_D;
     {? XINFO.NR_L<>''
     || _result+='/'+XINFO.NR_L
     ?}
   ?};
   _result
|? _a='GLN'
||  exec('czytaj','#stalesys',,KST,'GLN');
   _kst_fld:='KSTE.'+_a;
   _inf_fld:='XINFO.'+_a;
   _gln_fld:='KST.'+_a;
   {? ($_kst_fld)()<>exec('null_wyniku','edi_form',_kst_fld) || ($_kst_fld)()
   |? ($_gln_fld)()<>exec('null_wyniku','edi_form',_gln_fld) || ($_gln_fld)()
   || ($_inf_fld)()
   ?}
|| _kst_fld:='KSTE.'+_a;
   _inf_fld:='XINFO.'+_a;
   {? ($_kst_fld)()<>exec('null_wyniku','edi_form',_kst_fld) || ($_kst_fld)()
   || ($_inf_fld)()
   ?}
?}


\kz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2009]
:: OPIS: opis dotyczacy kapitalu zakladowego
::   WY: patrz opis
::----------------------------------------------------------------------------------------------------------------------
kap_zak:=kap_wpl:=0; org_rej:=nr_rej:=''; dru_wpl:=(exec('get_par','#parametr',34)='A'); dru_kap:=0;
{? PAR_SKID.get(34)<>'P' || dru_kap:=1; kap_zak:=XINFO.KAP_ZAK ?};
{? dru_wpl || kap_wpl:=XINFO.KAP_WPL ?};
{? XINFO.OREJ<>'' || org_rej:=XINFO.OREJ ?};
{? XINFO.NREJ<>'' || nr_rej:=XINFO.NREJ ?};

_wyn:=
   {? dru_kap=1
   ||
      'Rejestr: '+org_rej+', '+'numer: '+nr_rej+', Kapitał zakładowy: '+
      form(kap_zak,,2,' ,')+' PLN'+{? dru_wpl=1 || ' kapitał wpłacony: '+form(kap_wpl,,2,' ,')+' PLN' || '' ?}
   ||
      ''
   ?};
VAR_DEL.delete('kap_zak','kap_wpl','org_rej','nr_rej','dru_kap','dru_wpl');
_wyn


\add_faks_z
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: dodaje naglowek dokumentu zakupu
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
|| FAKS.NR:=exec('numer_new','numery','PACZKA');
   exec('znak','numery','FAKS');
   FZ.TERMPLAT:=FAKS.TZ;
   FZ.FORMAPLA:=FAKS.PL().KOD;
   exec('term_por','faktury_plat',FAKS.ref(),1);
   FAKS.EDI_R:='T';
   {? FAKS.KH | FAKS.KH_ODB
   ||
      exec('duplikuj_dane','faktury_wspolne','KH','KH_ODB');
      FAKS.put()
   ?}
|| {? BEER.WYSTFAKS || exec('usun_fak','faktury_nag',0,,0) ?};
   0
?}


\bl_fap_z
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: poczatek pozycji dokumentu zakupu
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
|| FAP.prefix();

   ATR.MJS:='FAP';

   TAZ.RAB_TYP:=FAKS.RAB_TYP;

   BEER.MW:='K';
   exec('ustaw_ww','eurusd',BEER.MW); BEER.LW:={? BEER.WW || 'W' || '' ?};

   exec('ustafprz','faktury_wspolne');
   BEER.TAB:='FAP';
   FAP.blank();
   FAP.WAL:={? FAP.FAKS().WAL<>null || FAP.FAKS().WAL || INFO.NAROD ?};
   FAP.WAL_H:=FAP.WAL;
   exec('istatr_faks2fap','faktury_nag');
   FAP.KH:=FAP.FAKS().KH;
   FAP.KH_ODB:=FAP.FAKS().KH_ODB;
   FAP.add()
?}


\sv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: stawka vat w postaci 7.00
::   WE: _a - SLO.KOD
::       _b - E-zapis, I-odczyt
::       _c - kad stawki
::----------------------------------------------------------------------------------------------------------------------
{? _<2 || _b:='E' ?};

{? _b='E'
|| _wsk:=_a*'%';
   {? _wsk
   || form(#((_wsk-1)+_a),,2,'9.')
   || ''
   ?}
|? _b='I'
|| _wyn:=null();
   SLU.cntx_psh();
   SLU.index('NAZ');
   SLU.prefix('~STAWKI VAT PL');
   {? SLU.first()
   || SLO.cntx_psh();
      SLO.index('SL');
      {? _c='S' | _c='AE'
      || SLO.prefix(SLU.ref(),(' '+($#_a)+' %'));
         {? SLO.first()
         || _wyn:=SLO.ref()
         || SLO.prefix(SLU.ref(),(($#_a)+' %'));
            {? SLO.first() || _wyn:=SLO.ref() ?}
         ?}
      |? _c='E'
      || SLO.prefix(SLU.ref(),'Zwol.'); {? SLO.first() || _wyn:=SLO.ref() ?}
      |? _c='NA'
      || SLO.prefix(SLU.ref(),' -'); {? SLO.first() || _wyn:=SLO.ref() ?}
      ?};
      SLO.cntx_pop()
   ?};
   SLU.cntx_pop();
   _wyn
?}


\kod_sv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: zwraca kod odpowiadajacy stawce vat
::   WE: _a-stawka vat
::       _b-NDVAT
::   WY: patrz opis
::----------------------------------------------------------------------------------------------------------------------
{? _<2 || _b:='' ?};

{? _b='O' |_a=' -o'        || 'AE'
|? _a*'%'                  || 'S'
|? _a='Zwol.' | _a=' -zw0' || 'E'
|? 2+_a=' -'               || 'NA'
                           || ''
?}


\isLineOrder
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Sprawdza czy wiele zamowien do faktury
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? ~exec('isOrder','edi_form')
|| _Order:=exec('order','edi_form');
   _loop:=_Order.first();
   _poz:=_Order.POZ;
   _zam_kl:=_Order.ZAM_KL;
   {!
   |? _loop
   |!
      {? _poz<>_Order.POZ || _poz:=_Order.POZ; _zam_kl:=_Order.ZAM_KL ?};
      _wyn:=_zam_kl=_Order.ZAM_KL;
      _loop:=_wyn & _Order.next()
   !}
?};
_wyn


\add_fap_z
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: dodaje pozycje dokumentu zakupu
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
|| FAP.J2:=FAP.JM; FAP.WS2:=1; FAP.IL2:=FAP.IL;
   FAP.VWAL:=FAP.VWAL_P:=FAP.WV;
   FAP.WWAL:=FAP.WWAL_P:=FAP.WN;
   FAP.BWAL:=FAP.BWAL_P:=FAP.WB:=FAP.WV+FAP.WN;

   {? FAP.put()
   || exec('inf_dod','fakso',0,5+FAP.name())
   ?}
?}


\end_faks_z
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: zakonczenie dokumentu zakupu
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
|| exec('sumfak','faktury_wspolne');
   exec('plat_przel','faktury_plat',FAKS.ref());
   EDI_Z.SYM:=FAKS.SYM; EDI_Z.KH:=FAKS.KH;
   1
|? EDI_Z.POMIN='T'
|| {? BEER.WYSTFAKS || exec('usun_fak','faktury_nag',0,,0) ?};
   0
?}


\efcnt000
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: CNT_000
::   WY: ilosc pozycji
::----------------------------------------------------------------------------------------------------------------------
_ref:=FAKS.ref();
FAP.cntx_psh();
FAP.clear();
FAP.index('FAP');
FAP.prefix(_ref);
_wyn:=FAP.size();
FAP.cntx_pop();
form(_wyn,,0,'99')


\verify_note_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: weryfikacja komunikatow invoice typu xml
::----------------------------------------------------------------------------------------------------------------------
_kh:=exec('find_kh','edi_form',XML_D.SEL_GLN);
{? _kh=null
||
:: dodanie informacji do tabeli z komunikatem zwrotnym
   exec('add_kom','#message','Brak kontrahenta o kodzie %1.'@[XML_D.SEL_GLN],2,XML_D.INV_NR);
   EDI_Z.POMIN:='T'
?};
{? ST.ODDZ='' | ST.AR=0 | ST.AM=0
||
   exec('add_kom','#message','Nie powiodło się ustawienie parametrów pracy.'@,2,XML_D.INV_NR);
   EDI_Z.POMIN:='T'
?};
_ar:=XML_D.INV_DATE~1;
_am:=XML_D.INV_DATE~2;
{? ~exec('czy_z_ok','okresy',-3,0,_ar,_am)
||
:: kontrola zamkniętego okresu
   _okr:=form(date(_ar,_am,0),,8);
   exec('add_kom','#message','Okres %1 aktualnie jest zamknięty brak możliwości rejestracji dokumentu.'@[_okr],2,XML_D.INV_NR);
   EDI_Z.POMIN:='T'
?};
XML_PDM.prefix(XML_D.TM_STAM);
{? XML_PDM.first()
||
   {!
   |?
      _mat:=exec('find_m','edi_form',XML_PDM.EAN,_kh);
      _jm:=exec('jm','edi_form','I',XML_PDM.JM);
      {? _mat=null
      ||
         exec('add_kom','#message','Brak materiału o kodzie %1.'@[XML_PDM.EAN],2,XML_D.INV_NR);
         EDI_Z.POMIN:='T'
      |? _jm=null()
      || exec('add_kom','#message','Pozycja %1 - brak odpowiednika jednostki miary.'@[$XML_PDM.POZ],2,XML_D.INV_NR);
         EDI_Z.POMIN:='T'
      |? _jm<>exec('FindAndGet','#table',M,$_mat,,"M.J",null())
      || exec('add_kom','#message','Pozycja %1 - jednostka miary niezgodna z kartoteką materiałową.'@[$XML_PDM.POZ],2,XML_D.INV_NR);
         EDI_Z.POMIN:='T'
      ?};
      XML_PDM.next()
   !}
?};
{? _kh & XML_D.INV_NR<>''
|| _Chk:=sql('
      select count(ID) COUNT_ID
      from @FAKS
      where KH=:_a and ID=\':_b\' '
      ,_kh,XML_D.INV_NR);
   {? _Chk.first() & _Chk.COUNT_ID
   || exec('add_kom','#message','Dokument w systemie już istnieje.'@,2,XML_D.INV_NR);
      EDI_Z.POMIN:='T'
   ?}
?}


\bl_faks_zk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: poczatek dokumentu korekty zakupu
::   WE: _a - typ dokumentu korekty zakupu
::       _b - numer dokumentu korekty
::       _c - gln kontrahenta
::       _d - numer dokumentu korygowanego
::       _e - data dokumentu korygowanego
::----------------------------------------------------------------------------------------------------------------------
BEER.WYSTFAKS:=null();
_typsp:=exec('FindInSet','#table','TYPYSP','TYPYKOD',_a,_a);
{? _typsp=null()
|| EDI_Z.POMIN:='T';
   exec('add_kom','#message','Brak typu dokumentu %1.'@[_a],4,_b);
   0
|| _kh:=exec('find_kh','edi_form',_c);
   _kid:=_d;
   _kda:=_e;
:: _kref - FAKS.ref() dokumentu korygowanego
   _kref:=null();

   {? _kh & _kid<>'' & _kda<>date(0,0,0)
   || _Chk:=sql('
         select REFERENCE as REF
         from @FAKS
         where KH=:_a and ID=\':_b\' and DW=to_date(:_c)'
         ,_kh,_kid,_kda);
      {? _Chk.first() & _Chk.REF<>''
      || {? exec('FindAndGet','#table',FAKS,_Chk.REF,,"FAKS.AKC",'N')='T'
         || _fda:=exec('FindAndGet','#table',FAKS,_Chk.REF,,"FAKS.D",date(0,0,0));
            {? exec('szuk_kor','faktury_nag',_Chk.REF,_fda,1)
            || _kref:=exec('FindAndGet','#table',FAKS,_Chk.REF,,,null())
            || exec('add_kom','#message','Nie wszystkie korekty są zaakceptowane.'@,2,_kid)
            ?}
         || exec('add_kom','#message','Dokument korygowany jest niezaakceptowany.'@,2,_kid)
         ?}
      || exec('add_kom','#message','Korygowany dokument nie istnieje w systemie.'@,2,_kid)
      ?}
   ?};

   {? _kref=null() || EDI_Z.POMIN:='T'; return() ?};

   POM.TAB:='FAKS';
   POM.TYPDOK:=exec('FindInSet','#table','TYPYSP','TYPYKOD',_a,_a,"TYPYSP.T",,,'');
   POM.NRT:=exec('FindInSet','#table','TYPYSP','TYPYKOD',_a,_a,,"TYPYSP.NRT",,,0);
   BEER.SZ:='Z';
   HELP.WHERE:=FAKS.WHERE:='Z';

   _kor:=exec('szuk_kor','faktury_nag',$_kref,_kda);
   {? _kor=0
   || _fksql:=$_kref;
      _lksql:=$_kref;
      _ofnum:=1;
      _frab:=exec('FindAndGet','#table',FAKS,$_kref,,"FAKS.RAB",0)
   || _fksql:=$_kref;
      _lksql:=form(xx_nam)+((('0'*8)+(-BB.hex(xx_ref)))+8);
      _ofnum:=xx_num+1;
      _frab:=xx_rab
   ?};
   _dsprz:=exec('FindAndGet','#table',FAKS,$_kref,,"FAKS.D",date(0,0,0));
   _fsym:=exec('FindAndGet','#table',FAKS,$_kref,,"FAKS.SYM",'');
   _dwyst:=
      {? date()>=date(ST.AR,ST.AM,1) & date()<=date(ST.AR,ST.AM,0)
      || date()
      || date(ST.AR,ST.AM,0)
      ?};

   FAKS.clear(); FAKS.blank(); FAKS.memo_set(,'UWAGI');
   {? exec('add','faktury_nag',_typsp,_dsprz,_lksql,_kh,_fksql,_fsym,,_frab,,,_dwyst,,_ofnum)
   || BEER.WYSTFAKS:=FAKS.ref
   ?}
?}


\add_faks_zk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: dodaje naglowek korekty dokumentu zakupu
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
|| FAKS.NR:=exec('numer_new','numery','PACZKA');
   exec('znak','numery','FAKS');
   FZ.TERMPLAT:=FAKS.TZ;
   FZ.FORMAPLA:=FAKS.PL().KOD;
   exec('term_por','faktury_plat',FAKS.ref(),1);
   FAKS.STS:=ST.STZ;
   FAKS.CB:=exec('FindAndGet','#table',FAKS,FAKS.FKSQL,,"FAKS.CB",'N');
   {? FAKS.put()
   || exec('copypoz','faktury_poz',FAKS.ref(),FAKS.name(),1);
      1
   ?}
|| {? BEER.WYSTFAKS || exec('usun_fak','faktury_nag',0,,0) ?};
   0
?}


\bl_fap_zk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: poczatek pozycji dokumentu korekty zakupu
::   WE: _a - pozycja
::       _b - ilosc przed korekta
::       _c - cena netto przed korekta
::       _d - stawka vat przed korekta
::       _e - kwota vat przed korekta
::       _f - wartosc netto przed korekta
::----------------------------------------------------------------------------------------------------------------------
FAP.index('FAP');
FAP.prefix(BEER.WYSTFAKS,_a);
{? FAP.first()
|| exec('wysw_kor','faktury_poz');
   {? FKOR.IL<>_b | FKOR.CN<>_c | exec('sv','edi_form',FKOR.SV().KOD)<>_d | FKOR.WV<>_e | FKOR.WN<>_f
   || exec('add_kom','#message','Pozycja %1: niezgodne wartości przed korektą.'@[$FAP.POZ],2,FAKS.ID);
      EDI_Z.POMIN:='T'
   ?};
   FAP.get()
|| exec('add_kom','#message','Pozycja %1: brak pozycji przed korektą.'@[$FAP.POZ],2,FAKS.ID);
   EDI_Z.POMIN:='T'
?}


\ndvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zwraca wartosc FAKS.NDVAT
::   WE: _a - $FAKS.ref
::   WY: FAKS.NDVAT
::----------------------------------------------------------------------------------------------------------------------
exec('FindAndGet','#table',FAKS,_a,,"NDVAT",'')


\powkor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: powod korekty
::   WE: _a - tresc powodu korekty
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();

{? INFO.POWKOR & _a<>''
|| SLO.cntx_psh();
   SLO.index('SL_TR');
   SLO.prefix(INFO.POWKOR);
   _loop:=SLO.first();
   {!
   |? _loop
   |!
      {? STR.maz2nop(SLO.TR)=_a || _wyn:=SLO.ref() ?};
      _loop:=_wyn=null() & SLO.next()
   !};
   SLO.cntx_pop()
?};

_wyn


\add_fap_zk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: dodaje pozycje dokumentu korekty zakupu
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
|| FAP.IL2:=FAP.IL;
   FAP.VWAL:=FAP.VWAL_P:=FAP.WV;
   FAP.WWAL:=FAP.WWAL_P:=FAP.WN;
   FAP.BWAL:=FAP.BWAL_P:=FAP.WB:=FAP.WV+FAP.WN;

   {? FAP.put()
   || exec('inf_dod','fakso',0,5+FAP.name())
   ?}
?}


\end_faks_zk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: zakonczenie dokumentu korekty zakupu
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
|| exec('sumfak','faktury_wspolne');
   exec('plat_przel','faktury_plat',FAKS.ref());
   EDI_Z.SYM:=FAKS.SYM; EDI_Z.KH:=FAKS.KH;
   1
|? EDI_Z.POMIN='T'
|| {? BEER.WYSTFAKS || exec('usun_fak','faktury_nag',0,,0) ?};
   0
?}


\kor_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+] wg Grzeska Alberskiego
:: OPIS: wyliczenie wartosci dla tablei __D
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=0 ?};


{? _a=0
||
   VAR_DEL.delete('__D');

   __D:=tab_tmp(1,'PRE_NTTO','REAL','Netto na fakturze korygowanej'
         ,'PRE_KVAT','REAL'      ,'VAT  na fakturze korygowanej'
         ,'PRE_BRUT','REAL'      ,'Brutto na fakturze korygowanej'
         ,'KOR_NTTO','REAL'      ,'Korekta netto'
         ,'KOR_KVAT','REAL'      ,'Korekta kwoty VAT'
         ,'KOR_BRUT','REAL'      ,'Korekta brutto'
         ,'PRE_NTTW','REAL'  ,'Netto walutowe na fakturze korygowanej'
         ,'PRE_KVAW','REAL'  ,'VAT walutowy na fakturze korygowanej'
         ,'PRE_BRUW','REAL'  ,'Brutto walutowe na fakturze korygowanej'
         ,'KOR_NTTW','REAL'  ,'Korekta walutowa netto'
         ,'KOR_KVAW','REAL'  ,'Korekta walutowa kwoty VAT'
         ,'KOR_BRUW','REAL'  ,'Korekta walutowa brutto')
?};

{? FAKS.FKSQL=''
|| return
|| _name:=form(8+FAKS.LKSQL);
   _refk:=FAKS.LKSQL
?};

FAKS.cntx_psh();
FAKS.use(_name);
FAKS.clear();
{? FAKS.seek(_refk,)
||
   {? __D.first
   ||
      __D.PRE_NTTO+=FAKS.NETTO;
      __D.PRE_KVAT+=FAKS.VAT;
      __D.PRE_BRUT+=FAKS.BRUTTO;
      __D.PRE_NTTW+=FAKS.NETW;
      __D.PRE_KVAW+=(FAKS.BRTW-FAKS.NETW);
      __D.PRE_BRUW+=FAKS.BRTW;
      __D.put()
   ||
      __D.blank();
      __D.PRE_NTTO:=FAKS.NETTO;
      __D.PRE_KVAT:=FAKS.VAT;
      __D.PRE_BRUT:=FAKS.BRUTTO;
      __D.PRE_NTTW:=FAKS.NETW;
      __D.PRE_KVAW:=FAKS.BRTW-FAKS.NETW;
      __D.PRE_BRUW:=FAKS.BRTW;
      __D.add()
   ?}
?};
exec('kor_d','edi_form',1);
FAKS.cntx_pop();

{? _a=0
||
   {? __D.first
   ||
      __D.KOR_NTTO:=__D.PRE_NTTO+FAKS.NETTO;
      __D.KOR_KVAT:=__D.PRE_KVAT+FAKS.VAT;
      __D.KOR_BRUT:=__D.PRE_BRUT+FAKS.BRUTTO;
      __D.KOR_NTTW:=__D.PRE_NTTW+FAKS.NETW;
      __D.KOR_KVAW:=__D.PRE_KVAW+FAKS.BRTW-FAKS.NETW;
      __D.KOR_BRUW:=__D.PRE_BRUW+FAKS.BRTW;
      __D.put()
   ||
      __D.KOR_NTTO:=FAKS.NETTO;
      __D.KOR_KVAT:=FAKS.VAT;
      __D.KOR_BRUT:=FAKS.BRUTTO;
      __D.KOR_NTTW:=FAKS.NETW;
      __D.KOR_KVAW:=FAKS.BRTW-FAKS.NETW;
      __D.KOR_BRUW:=FAKS.BRTW;
      __D.add()
   ?}
?};
1


\kor_dsum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+] wg Grzeska Alberskiego
:: OPIS: wyliczenie wartosci dla tablei __DSUM
::   WE: _a=1-wywolanie samej siebie; =0-wpp
::----------------------------------------------------------------------------------------------------------------------

{? var_pres('_a')<>type_of(1) || _a:=0 ?};

{? _a=0
||
   VAR_DEL.delete('__DSUM');

   __DSUM:=tab_tmp(1
            ,'PRE_SVAT','STRING[5]' ,'Stawka VAT na fakturze korygowanej'
            ,'PRE_NTTO','REAL'      ,'Netto na fakturze korygowanej'
            ,'PRE_KVAT','REAL'      ,'VAT  na fakturze korygowanej'
            ,'PRE_BRUT','REAL'      ,'Brutto na fakturze korygowanej'
            ,'KOR_NTTO','REAL'      ,'Korekta netto'
            ,'KOR_KVAT','REAL'      ,'Korekta kwoty VAT'
            ,'KOR_BRUT','REAL'      ,'Korekta brutto'
            ,'KOR_SVAT','STRING[5]','Stawka VAT na korekcie'
            ,'PRE_NTTW','REAL'      ,'Netto walutowe na fakturze korygowanej'
            ,'PRE_KVAW','REAL'      ,'VAT walutowy na fakturze korygowanej'
            ,'PRE_BRUW','REAL'      ,'Brutto walutowe na fakturze korygowanej'
            ,'KOR_NTTW','REAL'      ,'Korekta walutowa netto'
            ,'KOR_KVAW','REAL'      ,'Korekta kwoty walutowej VAT'
            ,'KOR_BRUW','REAL'      ,'Korekta walutowa brutto')
?};

_st_vat:=FAKSV.SV().KOD;

{? FAKS.FKSQL=''
|| return
|| _name:=form(8+FAKS.LKSQL);
   _refk:=FAKS.LKSQL
?};

FAKS.cntx_psh();
FAKSV.cntx_psh();

FAKS.use(_name);
FAKS.clear();
{? FAKS.seek(_refk,)
|| FAKSV.use('faksv'+(FAKS.name+3));
   FAKSV.index('FAKS_SV');
   FAKSV.prefix($FAKS.ref,_st_vat);
   {? FAKSV.first()
   ||
      {? __DSUM.first
      ||
         __DSUM.PRE_NTTO+=FAKSV.WN;
         __DSUM.PRE_KVAT+=FAKSV.WV;
         __DSUM.PRE_BRUT+=FAKSV.WB;
         __DSUM.PRE_NTTW+=exec('WNVWal','edi_fo_ufd');
         __DSUM.PRE_KVAW+=exec('WVVWal','edi_fo_ufd');
         __DSUM.PRE_BRUW+=FAKSV.WW;
         __DSUM.put
      ||
         __DSUM.blank;
         __DSUM.PRE_NTTO:=FAKSV.WN;
         __DSUM.PRE_KVAT:=FAKSV.WV;
         __DSUM.PRE_BRUT:=FAKSV.WB;
         __DSUM.PRE_SVAT:=__DSUM.KOR_SVAT:=FAKSV.SV().KOD;
         __DSUM.PRE_NTTW:=exec('WNVWal','edi_fo_ufd');
         __DSUM.PRE_KVAW:=exec('WVVWal','edi_fo_ufd');
         __DSUM.PRE_BRUW:=FAKSV.WW;
         __DSUM.add
      ?}
   ?};
   exec('kor_dsum','edi_form',1)
?};
FAKSV.cntx_pop();
FAKS.cntx_pop();

{? _a=0
||
   {? __DSUM.first()
   ||
      __DSUM.KOR_NTTO:=__DSUM.PRE_NTTO+FAKSV.WN;
      __DSUM.KOR_KVAT:=__DSUM.PRE_KVAT+FAKSV.WV;
      __DSUM.KOR_BRUT:=__DSUM.PRE_BRUT+FAKSV.WB;
      __DSUM.KOR_NTTW:=__DSUM.PRE_NTTW+exec('WNVWal','edi_fo_ufd');
      __DSUM.KOR_KVAW:=__DSUM.PRE_KVAW+exec('WVVWal','edi_fo_ufd');
      __DSUM.KOR_BRUW:=__DSUM.PRE_BRUW+FAKSV.WW;
      __DSUM.put()
   ||
      __DSUM.KOR_NTTO:=FAKSV.WN;
      __DSUM.KOR_KVAT:=FAKSV.WV;
      __DSUM.KOR_BRUT:=FAKSV.WB;
      __DSUM.KOR_SVAT:=__DSUM.PRE_SVAT:=FAKSV.SV().KOD;
      __DSUM.KOR_NTTW:=exec('WNVWal','edi_fo_ufd');
      __DSUM.KOR_KVAW:=exec('WVVWal','edi_fo_ufd');
      __DSUM.KOR_BRUW:=FAKSV.WW;
      __DSUM.add()
   ?}
?};
1


\verify_ord_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: weryfikacja komunikatow orders typu xml
::----------------------------------------------------------------------------------------------------------------------
_kh:=exec('find_kh','edi_form',XML_ZAM.BUY_GLN);
{? _kh=null
||
:: dodanie informacji do tabeli z komunikatem zwrotnym
   exec('add_kom','#message','Brak kontrahenta o kodzie %1.'@[XML_ZAM.BUY_GLN],2,XML_ZAM.ORD_NR);
   EDI_Z.POMIN:='T'
?};
{? ST.ODDZ='' | ST.AR=0 | ST.AM=0
||
   exec('add_kom','#message','Nie powiodło się ustawienie parametrów pracy.'@,2,XML_D.INV_NR);
   EDI_Z.POMIN:='T'
?};
XML_ZAMP.prefix(XML_ZAM.TM_STAM);
{? XML_ZAMP.first()
||
   {!
   |?
      {? exec('find_m','edi_form',XML_ZAMP.EAN,_kh)=null
      ||
         exec('add_kom','#message','Brak materiału o kodzie %1.'@[XML_ZAMP.EAN],2,XML_ZAM.ORD_NR);
         EDI_Z.POMIN:='T'
      ?};
      XML_ZAMP.next()
   !}
?}


\bl_zkn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [2008]
:: OPIS: poczatek zamowienia klienta
::   WE: _a - typ zamowienia klienta
::       _b - ODDZ.KOD - kod oddziału
::       _c - STS.KOD - kod stanowiska sprzedaży
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BEER.TYPYZAM:=exec('FindInSet','#table','TYPYZAM','TYP',_a,'Z');
_oddz:=_b;
_sts:=exec('FindInSet','#table','STS','KOD',_c,'S',,1,_oddz);

_date:=date();
EDI_Z.POMIN:='T';

{? BEER.TYPYZAM=null()
||
   exec('add_kom','#message','Brak typu zamówienia %1.'@[_a],4,ZK_N.ZAM_KL)

||
   POM.TAB:='ZK_N';
   POM.TYPDOK:=exec('FindInSet','#table','TYPYZAM','TYP',_a,'Z',"TYPYZAM.KOD",,,'');

:: ustawienie środowiska pracy
   __PARSES.setVal('OddzialLogProd',_oddz);
   __PARSES.setVal('StSprzedazy',_sts);
   _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LSP';
   _args.AR:=_date~1;
   _args.AM:=_date~2;
   __PARSES.setVal('OkresRok',_args);
   {? __PARSES.setEnv('LSP_ZKN_DRZK')
   ||
      EDI_Z.POMIN:='N';
      ZK_N.clear(); ZK_N.blank(); ZK_N.memo_set(,'UW');
      ZK_N.SPOBLRAB:=exec('get','#params',800810,2);
      ZK_N.RAB_TYP:={? ZK_N.T().R='W' || '' || 'P' ?};
      ZK_N.SPP:=exec('spp_bl','ceny')
   ?}
?};
~~


\zd_han
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2008]
:: OPIS: przypisanie handlowca w naglowku zamowienia od klienta
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZK_N.KH<>null
||
   {? __War_f('KH_DOD','HAN',ZK_N.KH)=null
   ||
      {? EDI_Z.CHK='N'
      || exec('add_kom','#message','Brak handlowca na zamówieniu.'@,2,{? ZK_N.ZAM_KL='' || ZK_N.SYM || ZK_N.ZAM_KL ?})
      ?}
   ||
      ZK_N.HAN:=__War_f('KH_DOD','HAN',ZK_N.KH)
   ?}
?}


\deliveryP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: Miejsce dostawy
::   WE: _a - kod pola
::       _b - ref KH_MSC
::   WY: wartosc dla pola
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_fld:=_a;
{? _b<>null()
|| {? _fld='MIA' || _fld:='MIASTO'
   |? _fld='KOD_P' || _fld:='KPOCZ'
   ?};
   _wyn:={? _fld<>'' || exec('FindAndGet','#table','KH_MSC',$_b,,_fld) || '' ?};
   {? _fld='KRAJ'
   || _kraj:=-_wyn; _kraj:=~(1+_kraj)+(1-_kraj);
      _wyn:={? _kraj<>'' & (KRAJE.index('NAZ'); KRAJE.find_key(_kraj)) || KRAJE.KODISO || '' ?}
   ?};
   {? _fld='UL'
   || _dom:=exec('FindAndGet','#table','KH_MSC',$_b,,'DOM');
      _lokal:=exec('FindAndGet','#table','KH_MSC',$_b,,'LOKAL');
      _wyn:=exec('adr','faktury_wydruk',_wyn,_dom,_lokal)
   ?}
|| _wyn:=exec('licenc_gln','edi_form',_fld)
?};
_wyn


\add_zkn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [2008]
:: OPIS: dodaje naglowek zamowienia do systemu
::   WE: _a - 0-komunikaty przez __komm; 1-komunikaty przez __emsg
::       _b - 'webservice', 'edi'
::       _c - nazwa konfiguracji (BASELINKER/ABSTOREB2B/ABSTOREB2C)
::----------------------------------------------------------------------------------------------------------------------
_emsg:={? var_pres('_a')=type_of(0) || _a || 1 ?};
_context:={? var_pres('_b')=type_of('') || _b || 'edi' ?};
_name_conf:={? var_pres('_c')=type_of('')|| _c || '' ?};
BEER.ZK_N:=null();

{? EDI_Z.POMIN='N'
||
   ZK_N.R:=ZK_N.DP~1;
   ZK_N.M:=ZK_N.DP~2;
   ZK_N.RR:=ZK_N.DT~1;
   ZK_N.RM:=ZK_N.DT~2;
   ZK_N.RT:=exec('NumberOfWeek','#datetime',ZK_N.DT);
   {? _context='edi'
         &
      ZK_N.MG=null()
   ||
      _form:=exec('FindInSet','#table','EDI_D','K','_MAGAZYN',EDI_Z.C,"EDI_D.FLF",,,'');
      ZK_N.MG:={? _form='' || null || ($_form)() ?}
   ?};
:: kontrola uprawnien magazynowych

   _jest:=0;
   _bylus:=0;
   _dommgu:=null;
   _dommgg:=null;

   USERS_UP.index('MG');
   USERS_UP.prefix(OPERATOR.USER,'ZAM',ST.ODDZ_KOD);
   {? USERS_UP.first()
   || _bylus:=1;
      {!
      |? {? ~_jest & ZK_N.MG<>null || _jest:=USERS_UP.MG=ZK_N.MG ?};
         {? USERS_UP.DOM='T' || _dommgu:=USERS_UP.MG ?};
         USERS_UP.next()
      !}
   ?};

:: parametry globalne
   USERS_UP.index('MG');
   USERS_UP.prefix(null,'ZAM',ST.ODDZ_KOD);
   {? USERS_UP.first()
   || {!
      |? {? ~_jest
         || {? ZK_N.MG<>null
            || _jest:=USERS_UP.MG=ZK_N.MG
            |? _context='webservice' & _bylus=0
            || _jest:=1
            ?}
         ?};
         {? USERS_UP.DOM='T' || _dommgg:=USERS_UP.MG ?};
         USERS_UP.next()
      !}
   || _msg:='Brak uprawnionych magazynów do wystawiania zamówień.'@;
      {? _emsg
      || FUN.emsg(_msg)
      || exec('add_kom','#message',_msg,4,ZK_N.ZAM_KL)
      ?};
      return(0)
   ?};

:: dodatkowe sprawdzenie czy domyslny magazyn ogolny jest uprawniony na uzytkownika
   {? _dommgg<>null & _dommgu=null
   ||
      USERS_UP.index('MG');
      USERS_UP.prefix(OPERATOR.USER,'ZAM',ST.ODDZ_KOD);
      {? USERS_UP.first()
      || _czy:=0;
         {!
         |? {? USERS_UP.MG=_dommgg
            || _czy:=1;
               0
            || USERS_UP.next()
            ?}
         !};
         {? ~_czy || _dommgg:=null ?}
      ?}
   ?};

   ZK_N.EDI_R:='T';
   ZK_N.WG:='T';
   BEER.WG:='';
   {? _context='edi' & ~_jest & (_dommgu<>null | _dommgg<>null)
   || ZK_N.MG:={? _dommgu<>null || _dommgu || _dommgg ?};
      _jest:=1
   |? _name_conf='BASELINKER'
   || _jest:=1
   ?};

   {? ~_jest
   || _msg:=
         {? _context='webservice'
         || 'Nie podano magazynu lub brak uprawnień do magazynu.'@
         || 'Brak uprawnionych lub domyślnych magazynów do wystawienia zamówień.'@
         ?};
      {? _emsg
      || FUN.emsg(_msg)
      || exec('add_kom','#message',_msg,4,ZK_N.ZAM_KL)
      ?};
      EDI_Z.POMIN:='T'
   || _zam:=exec('jest_zam_kl','edi_form',ZK_N.KH,ZK_N.ZAM_KL,ZK_N.ODB);
      {? _zam<>''
      ||
::       dodanie informacji do tabeli z komunikatem zwrotnym
         _msg:='Zamówienie %1 jest już w systemie.'@[_zam];
         {? _emsg
         || FUN.emsg(_msg)
         || exec('add_kom','#message',_msg,4,ZK_N.ZAM_KL)
         ?};
         EDI_Z.POMIN:='T'
      ||
         {? ZK_N.add(1) & ZK_N.memo_put(,'UW')
         ||
            ZK_N.NR:=exec('numer_new','numery','PACZKA');
            exec('znak','numery','ZK_N');
            ZK_N.put();
::          dodanie informacji do tabeli z komunikatem zwrotnym
            exec('add_kom','#message','Dodano zamówienie %1.'@[ZK_N.SYM],1,{? ZK_N.ZAM_KL='' || ZK_N.SYM || ZK_N.ZAM_KL ?});
            EDI_Z.DOK:=BB.refsql(ZK_N.ref()); EDI_Z.SYM:=ZK_N.SYM; EDI_Z.KH:=ZK_N.KH;
            {? ZK_N.DP<>date()
            || ZK_N.DP:=date();
               exec('add_kom','#message','Zmieniono datę rejestracji zamówienia w systemie na datę bieżącą.'@,2,
                {? ZK_N.ZAM_KL='' || ZK_N.SYM || ZK_N.ZAM_KL ?})
            ?};
            {? ZK_N.DT<ZK_N.DP
            || {? ZK_N.KH().DREA>0
               || ZK_N.DT:=ZK_N.DP+ZK_N.KH().DREA;
                  exec('add_kom','#message','Zmieniono termin realizacji wg danych kontrahenta.'@,2,
                       {? ZK_N.ZAM_KL='' || ZK_N.SYM || ZK_N.ZAM_KL ?})
               || ZK_N.DT:=ZK_N.DP;
                  exec('add_kom','#message','Zmieniono termin realizacji na datę rejestracji zamówienia w systemie.'@,2,
                       {? ZK_N.ZAM_KL='' || ZK_N.SYM || ZK_N.ZAM_KL ?})
               ?};
               ZK_N.put()
            ?};
::          wypełnienie pól wg ustawień formuły 100303 (tylko kontekst EDI)
            {? _context='edi'
            || _p100303:=exec('get','#params',100303,2);
               {? _p100303<>''
               || {? _p100303*'PL'
                  || {? ZK_N.KH().PLATNOSC=null()
                     || exec('add_kom','#message','Nie zmieniono formy i terminu płatności - brak ich w danych kontrahenta.'@,
                            2,{? ZK_N.ZAM_KL='' || ZK_N.SYM || ZK_N.ZAM_KL ?})
                     || ZK_N.PL:=ZK_N.KH().PLATNOSC;
                        FZ.FORMAPLA:=ZK_N.PL().KOD;
                        FZ.PL:=ZK_N.PL;
                        FZ.TERMPLAT:=exec('term_plat','faktury_plat','PL','N',ZK_N.ref());
                        ZK_N.TZ:=FZ.TERMPLAT;
                        exec('plat_one','faktury_plat',ZK_N.ref());
                        exec('add_kom','#message','Zmieniono formę i termin płatności wg danych kontrahenta.'@,2,
                            {? ZK_N.ZAM_KL='' || ZK_N.SYM || ZK_N.ZAM_KL ?})
                     ?}
                  ?};
                  {? _p100303*'RAB'
                  || ZK_N.RAB:=exec('sp_plat','kontrahent',ZK_N.KH,1);
                     exec('add_kom','#message','Zmieniono rabat wg danych kontrahenta.'@,2,
                          {? ZK_N.ZAM_KL='' || ZK_N.SYM || ZK_N.ZAM_KL ?})
                  ?};
                  ZK_N.put()
               ?}
            ?};
            exec('spr_nzam','zamsiw_nag',1);
            ZK_N.put(1);
            exec('inf_dod','fakso',0,'zknag');
            BEER.ZK_N:=ZK_N.ref();
            BEER.WG:=ZK_N.WG;
            exec('st_licz_wz','ceny','ZK_N')
         ?}
      ?}
   ?}
?};

BEER.ZK_N<>null


\jest_zam_kl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: sprawdza czy jest zamowienie klienta w systemie
::   WE: _a - KH.reference
::       _b - symbol zamowienia klienta
::       _c - KH_ODB.reference
::   WY: symbol istniejacego zamowienia, ''-wpp
::----------------------------------------------------------------------------------------------------------------------
_return:='';

{? _b<>''
||
   _maski:=ZK_N.names();

   ZK_N.cntx_psh();
   {? _maski.first()
   ||
      {!
      |? ZK_N.use(_maski.NAME);
         ZK_N.cntx_psh();
         ZK_N.index('ZAM_KL'); ZK_N.prefix('Z',_a,_b,_b,_c);
         {? ZK_N.first() || _return:=ZK_N.SYM ?};
         ZK_N.cntx_pop();
         _maski.next()
      !}
   ?};
   ZK_N.cntx_pop()
?};

_return


\bl_zkp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [2008]
:: OPIS: poczatek pozycji zamowienia
::----------------------------------------------------------------------------------------------------------------------
ZK_P.clear(); ZK_P.blank(); ZK_P.T:='Z'; ZK_P.N:=BEER.ZK_N


\add_zkp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [2008]
:: OPIS: dodaje pozycje zamowienia do systemu,
::       EDI_Z.POMIN ustawiane dla komunikatow xml w systuacji kiedy nie mozna odczytac komunikatu
::       poniewaz dokument juz istnieje w systemie
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
||
   {? BEER.ZK_N=null
   || FUN.info(exec('msg','edi_wspolne','ERR_EDI_BRAK_WSK_ZK_N'))
   || BEER.TYP:='Z'; BEER.ZK_N:=ZK_P.N;
      {? ZK_P.N().MG=null() & ZK_P.MG<>null() & ZK_P.RODZ='Z' & ZK_P.M().RODZ<>'U'
      || ZK_P.RMAG:=ZK_P.MG
      || ZK_P.RMAG:=ZK_P.MG:={? (ZK_P.RODZ='Z' | ZK_P.M().RODZ<>'U') || ZK_P.N().MG || null() ?}
      ?};
      ZK_P.DOST:=0;
      ZK_P.REZ:=0;
      ZK_P.ILP:=ZK_P.ILZ;
      ZK_P.JM:=ZK_P.M().J;
      {? ZK_P.IL2=0 || ZK_P.IL2:=ZK_P.ILP ?};
      {? ZK_P.WS2=0 || ZK_P.WS2:=1 ?};
      ZK_P.T2:='G';
      {? ZK_P.J2=null() || ZK_P.J2:=ZK_P.JM ?};
      ZK_P.NR:=exec('bl_nrpoz','zamsiw_poz');
      ZK_P.ILBEZ:=ZK_P.ILP;
      ZK_P.CZYBEZ:='T';
      ZK_P.ZBB:='T';
      ZK_P.KH:=ZK_P.N().KH;
      ZK_P.KH_ODB:=ZK_P.N().ODB;
      {? ZK_P.add(1)
      || exec('aktznzkp','zamsiw_poz',ZK_P.ref(),1);
         _zkp:=ZK_P.ref();
         exec('admatzkp','rezerwacje',$ZK_P.M,ZK_P.NR,ZK_P.ILP,$ZK_P.N,$ZK_P.ref());
         {? exec('get','#params',100300,2)='T' & exec('get','#params',3001,2,OPERATOR.USER)='T'
         || ZK_P.cntx_psh();
            ZK_P.REZ:=0;
            exec('rez_pozy','rezerwacje',0,,,,,0);
            ZK_P.cntx_pop();
            ZK_P.get()
         ?};
         exec('war_pozz','zamsiw_poz');
         ZK_P.put(1);
         exec('inf_dod','fakso',0,'zkpoz')
      ?}
   ?}
?}


\end_zkn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: koniec zamowienia
::----------------------------------------------------------------------------------------------------------------------
exec('aktznzkn','zamsiw_nag',BEER.ZK_N,1);
exec('obl_warz','zamsiw_nag',BEER.ZK_N);
exec('akt_rezy','rezerwacje')


\ezcnt000
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: CNT_000
::   WE: [_a] 0(domyslnie) - ilosc pozycji 1-suma ilosci 2-suma wartosci
::   WY: ilosc pozycji/suma ilosci na pozycjach/suma wartosci na pozycjach
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

_wyn:=0;
_ref:=ZD_NAG.ref();
ZD_POZ.cntx_psh();
ZD_POZ.index('POZ');
ZD_POZ.prefix(_ref);
{? ~_a
|| _wyn:=ZD_POZ.size()
|? ZD_POZ.first()
|| {!
   |? _wyn+={? _a=1 || ZD_POZ.IL || ZD_POZ.WAR $2 ?};
      ZD_POZ.next()
   !}
?};
ZD_POZ.cntx_pop();
_wyn


\efsg1rff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: SG1_RFF
::   WY: numer odnosnika (symbol zamowienia klienta)
::----------------------------------------------------------------------------------------------------------------------
exec('zk_n_wart_pola','edi_form','SYM')


\zk_n_wart_pola
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: zwraca wartosc pola _a tabeli ZK_N
::   WE: _a-akronim pola tabeli ZK_N
::   WY: patrz opis
::----------------------------------------------------------------------------------------------------------------------
_return:=~~;

_pole:='ZK_N.'+_a;
_return:=exec('null_wyniku','edi_form',_pole);

_faks:=exec('FindInSet','#table','ND','FAKS_REF',BB.refsql(FAKS.ref()));
{? _faks <> null()
|| exec('list_zam','magdok_wspolne',_faks);
   {? __list_zk.first()
   ||
      _ff:=$("($('ZK_N.'+'"+_a+"'))()");
      exec('FindAndGet','#table',ZK_N,__list_zk.REF,,_ff,_return)
   ?};
   {? var_pres('__list_zk')>100 || obj_del(__list_zk); &__list_zk ?}
?};

_return


\efdtm171
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: DTM_171
::   WY: data odnosnika (data zamowienia klienta)
::----------------------------------------------------------------------------------------------------------------------
_return:='';
_data:=exec('zk_n_wart_pola','edi_form','DP');
{? _data<>date(0,0,0)
|| _return:=(4+form(_data))+(2+(5-form(_data)))+(form(_data)+2)
?};
_return


\efrffdqq
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: REF_DQQ
::   WY: numer wz
::----------------------------------------------------------------------------------------------------------------------
_nr:=exec('FindInSet','#table','ND','FAKS_REF',BB.refsql(FAKS.ref()),BB.refsql(FAKS.ref()),"ND.NR");
form(_nr,,0,'99')


\efnaddpa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: NAD_DPA
::   WY: GLN miejsca dostawy
::----------------------------------------------------------------------------------------------------------------------
FAKS.KH_ODB().GLN


\efnadbuy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: NAD_BUY, NAD_IV1
::   WY: GLN nabywcy, fakturowanego
::----------------------------------------------------------------------------------------------------------------------
FAKS.KH().GLN


\efnadbu1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: NAD_BU1, NAD_IV1
::   WY: nazwa nabywcy, fakturowanego
::----------------------------------------------------------------------------------------------------------------------
STR.maz2nop(~- exec('FindInSet','#table','KH','KOD',FAKS.KH().KOD,2,"KH.NAZ",,,''))


\efnadbu4
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: NAD_BU4, NAD_IV4
::   WY: adres nabywcy, fakturowanego
::----------------------------------------------------------------------------------------------------------------------
STR.maz2nop(~-exec('FindInSet','#table','KH','KOD',FAKS.KH().KOD,2,"KH.UL",,,''))


\efnadbu7
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: NAD_BU7, NAD_IV7
::   WY: miasto nabywcy, fakturowanego
::----------------------------------------------------------------------------------------------------------------------
STR.maz2nop(~-exec('FindInSet','#table','KH','KOD',FAKS.KH().KOD,2,"KH.MIASTO",,,''))


\efnadbu8
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: NAD_BU8, NAD_IV8
::   WY: kod pocztowy nabywcy, fakturowanego
::----------------------------------------------------------------------------------------------------------------------
STR.maz2nop(~-exec('FindInSet','#table','KH','KOD',FAKS.KH().KOD,2,"KH.POCZ",,,''))


\efpatdni
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: PAT_DNI
::   WY: ilosc dni od daty wystawienia faktury: termin platnosci
::----------------------------------------------------------------------------------------------------------------------
{? FAKS.DW>FAKS.TZ || '0' || form(FAKS.TZ-FAKS.DW,,0,'99') ?}


\eflininu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: LIN_INU
::   WY: kod GTIN towaru
::----------------------------------------------------------------------------------------------------------------------
FAP.M().KODK


\efpiainu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: PIA_INU
::   WY: numer towaru makro
::----------------------------------------------------------------------------------------------------------------------
FAP.M().KTM


\efimd000
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: IMD_000
::   WY: opis pozycji
::----------------------------------------------------------------------------------------------------------------------
STR.maz2nop(~-FAP.M().N)


\eftaxvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: TAX_VAT
::   WY: stawka vat
::----------------------------------------------------------------------------------------------------------------------
form(#((FAP.SV().KOD*'%')+FAP.SV().KOD-1),,,'9.')


\efsg5kat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: SG5_KAT
::   WY: kategoria podatku
::----------------------------------------------------------------------------------------------------------------------
exec('kod_sv','edi_form',FAKSV.SV().KOD)


\efsg5stw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: SG5_STW, SG5_TAX
::   WY: stawka podatku
::----------------------------------------------------------------------------------------------------------------------
form(#((FAKSV.SV().KOD*'%')+FAKSV.SV().KOD-1),,,'9.')


\verify_inv_ff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: weryfikacja komunikatow invoice typu ff
::----------------------------------------------------------------------------------------------------------------------
_return:=1;

EDI_Z.CHK:='T';
{? Ebuf.first()
||
   {!
   |? {? Ebuf.KOD='BGM_INU'
         | Ebuf.KOD='NAD_PEE'
         | Ebuf.KOD='LIN_INU'
         | Ebuf.KOD='DTM_137'
      ||
         EDI_D.clear();
         EDI_D.index('K');
         EDI_D.prefix(EDI_Z.C);
         {? EDI_D.find_key(Ebuf.KOD) & EDI_D.TAB<>''
         ||
            {? EDI_D.FLD<>''
            ||
               ($(EDI_D.TAB+'.'+EDI_D.FLD))():=
                  {? EDI_D.T='N' || #Ebuf.WAR
                  |? EDI_D.T='S' || Ebuf.WAR
                  |? EDI_D.T='D' || date(#(4+Ebuf.WAR),#(2+(4-Ebuf.WAR)),#(2+(6-Ebuf.WAR)))
                  |? EDI_D.T='T' || time(#(2+Ebuf.WAR),#(2+(2-Ebuf.WAR)),#(2+(4-Ebuf.WAR)))
                  ?}
            ||
               ($EDI_D.FLF)()
            ?}
         ?};
         {? Ebuf.KOD='BGM_ONU'
         ||
            _sym:=FAKS.ID
         |? Ebuf.KOD='NAD_BUY'
         ||
            {? FAKS.KH=null
            ||
               exec('add_kom','#message','Brak kontrahenta o kodzie %1.'@[Ebuf.WAR],2,_sym);
               _return:=0
            ?}
         |? Ebuf.KOD='DTM_137'
         || _ar:=FAKS.DW~1;
            _am:=FAKS.DW~2;
            {? ~exec('czy_z_ok','okresy',-3,0,_ar,_am)
            ||
::             kontrola zamkniętego okresu
               _okr:=form(date(_ar,_am,0),,8);
               exec('add_kom','#message'
                ,'Okres %1 aktualnie jest zamknięty brak możliwości rejestracji dokumentu.'@[_okr],2,_sym);
               _return:=0
            ?}
         |? Ebuf.KOD='LIN_INU'
         ||
            {? FAP.M=null
            ||
               exec('add_kom','#message','Brak materiału o kodzie %1.'@[Ebuf.WAR],2,_sym);
               _return:=0
            ?}
         ||
            ''
         ?}
      ?};
      Ebuf.next()
   !};
   {? FAKS.KH & FAKS.ID<>''
   || _Chk:=sql('
         select count(ID) COUNT_ID
         from @FAKS
         where KH=:_a and ID=\':_b\' '
         ,FAKS.KH,FAKS.ID);
      {? _Chk.first() & _Chk.COUNT_ID
      || exec('add_kom','#message','Dokument w systemie już istnieje.'@,2,FAKS.ID);
         _return:=0
      ?}
   ?}
?};
EDI_Z.CHK:='N';

_return


\pkwiu_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Mechanizm importów PKWIU - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=MPKW,      type=_MPKW,    name=PKWiU,    required=N
::# kind=WY,   symbol=MPKW,      type=_MPKW,    name=PWKiU,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','pkwiu_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\pkwiu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki MPKW
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '@+form(__nrlkom,6,0,'99')+' ';
{? MPKW.KOD=''
|| exec('add_kom','#message',_ln+'Brak wartości pola KOD. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _kod:=MPKW.KOD;
   MPKW.cntx_psh();
   MPKW.index('KOD');
   MPKW.prefix(MPKW.KOD,);
   _ref:=null;
   {? MPKW.first()
   || exec('add_kom','#message','%1Istnieje już kod PKWiU %2. Rekordu nie dodano.'@[_ln,MPKW.KOD],184
       ,'JUŻ JEST W BAZIE'@);
      _ref:=MPKW.ref();
      0
   ?};
   MPKW.cntx_pop();

   {? _ref=null
   || MPKW.prefix();
      {? MPKW.add(1)
      || exec('add_kom','#message','Dodano PKWiU o kodzie: %1.'@[MPKW.KOD],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message','%1Nie dodano PKWiU o kodzie: %2.'@[_ln,MPKW.KOD],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\add_faks_zk_ff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: dodaje naglowek korekty dokumentu zakupu - ff
::   WE: _a - typ dokumentu korekty zakupu
::----------------------------------------------------------------------------------------------------------------------
_td:=_a;
_id:=FAKS.ID;
_gln:=FAKS.KH().GLN;
_kid:=FAKS.KOR;
_kda:=FAKS.KZ_OD;
exec('bl_faks_zk','edi_form',_td,_id,_gln,_kid,_kda);
FAKS.ID:=_id;
exec('add_faks_zk','edi_form')


\add_fap_zk_ff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: dodaje pozycje dokumentu korekty zakupu - ff
::----------------------------------------------------------------------------------------------------------------------
_poz:=FAP.POZ;
_uw:=FAP.U;
_il:=FAP.IL;
_cn:=FAP.CN;
_wn:=FAP.WN;
_wv:=FAP.WV;
_sv:=FAP.SV;
_pk_il:=FKOR.BIL;
_pk_cn:=FKOR.BCN;
_pk_vat:=exec('sv','edi_form',FKOR.SV().KOD);
_pk_wv:=FKOR.BWV;
_pk_wn:=FKOR.BWN;
_powkor:=FAP.POWKOR;
exec('bl_fap_zk','edi_form',_poz,_pk_il,_pk_cn,_pk_vat,_pk_wv,_pk_wn);
FAP.IL:=_il;
FAP.CN:=_cn;
FAP.CPR:=FAP.CN;
FAP.WN:=_wn;
FAP.WV:=_wv;
FAP.SV:=_sv;
FAP.POWKOR:=_powkor;
exec('add_fap_zk','edi_form')


\verify_note_ff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: weryfikacja komunikatow invoice korekta typu ff
::----------------------------------------------------------------------------------------------------------------------
_return:=1;

EDI_Z.CHK:='T';
{? Ebuf.first()
||
   {!
   |? {? Ebuf.KOD='BGM_INU'
         | Ebuf.KOD='NAD_PEE'
         | Ebuf.KOD='LIN_INU'
         | Ebuf.KOD='DTM_137'
      ||
         EDI_D.clear();
         EDI_D.index('K');
         EDI_D.prefix(EDI_Z.C);
         {? EDI_D.find_key(Ebuf.KOD) & EDI_D.TAB<>''
         ||
            {? EDI_D.FLD<>''
            ||
               ($(EDI_D.TAB+'.'+EDI_D.FLD))():=
                  {? EDI_D.T='N' || #Ebuf.WAR
                  |? EDI_D.T='S' || Ebuf.WAR
                  |? EDI_D.T='D' || date(#(4+Ebuf.WAR),#(2+(4-Ebuf.WAR)),#(2+(6-Ebuf.WAR)))
                  |? EDI_D.T='T' || time(#(2+Ebuf.WAR),#(2+(2-Ebuf.WAR)),#(2+(4-Ebuf.WAR)))
                  ?}
            ||
               ($EDI_D.FLF)()
            ?}
         ?};
         {? Ebuf.KOD='BGM_ONU'
         ||
            _sym:=FAKS.ID
         |? Ebuf.KOD='NAD_BUY'
         ||
            {? FAKS.KH=null
            ||
               exec('add_kom','#message','Brak kontrahenta o kodzie %1.'@[Ebuf.WAR],2,_sym);
               _return:=0
            ?}
         |? Ebuf.KOD='DTM_137'
         || _ar:=FAKS.DW~1;
            _am:=FAKS.DW~2;
            {? ~exec('czy_z_ok','okresy',-3,0,_ar,_am)
            ||
::             kontrola zamkniętego okresu
               _okr:=form(date(_ar,_am,0),,8);
               exec('add_kom','#message'
                ,'Okres %1 aktualnie jest zamknięty brak możliwości rejestracji dokumentu.'@[_okr],2,_sym);
               _return:=0
            ?}
         |? Ebuf.KOD='LIN_INU'
         ||
            {? FAP.M=null
            ||
               exec('add_kom','#message','Brak materiału o kodzie %1.'@[Ebuf.WAR],2,_sym);
               _return:=0
            ?}
         ||
            ''
         ?}
      ?};
      Ebuf.next()
   !};
   {? FAKS.KH & FAKS.ID<>''
   || _Chk:=sql('
         select count(ID) COUNT_ID
         from @FAKS
         where KH=:_a and ID=\':_b\' '
         ,FAKS.KH,FAKS.ID);
      {? _Chk.first() & _Chk.COUNT_ID
      || exec('add_kom','#message','Dokument w systemie już istnieje.'@,2,FAKS.ID);
         _return:=0
      ?}
   ?}
?};
EDI_Z.CHK:='N';

_return


\efqty47b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: inicjuje pozycje korekty dla komunikatu korekty
::   WY: ilosc przed korekta
::----------------------------------------------------------------------------------------------------------------------
exec('wysw_kor','faktury_poz');
exec('uzallkor','edi_form');
form(FKOR.IL,,,'9.')


\uzallkor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: uzupelnia tabelke podsumowan
::----------------------------------------------------------------------------------------------------------------------
_stprzed:=FKOR.SV().KOD;
_stpo:=FAP.SV().KOD;

:: przed korekta po stawce
__sumkor.clear();
{? __sumkor.find_key(_stprzed,_stpo)
|| __sumkor.BRT+=FKOR.WB;
   __sumkor.NET+=FKOR.WWAL_P;
   __sumkor.VAT+=FKOR.WV;
   __sumkor.KWB+=FKOR.BWB;
   __sumkor.KWN+=FKOR.BWWAL_P;
   __sumkor.KWV+=FKOR.BWV;
   __sumkor.put(1)
|| __sumkor.STV:=_stprzed;
   __sumkor.KST:=_stpo;
   __sumkor.BRT:=FKOR.WB;
   __sumkor.NET:=FKOR.WWAL_P;
   __sumkor.VAT:=FKOR.WV;
   __sumkor.KWB:=FKOR.BWB;
   __sumkor.KWN:=FKOR.BWWAL_P;
   __sumkor.KWV:=FKOR.BWV;
   __sumkor.add(1)
?};


:: podsumowanie
__sumkor.clear();
{? __sumkor.find_key('xx','xx')
|| __sumkor.BRT+=FKOR.WB;
   __sumkor.NET+=FKOR.WWAL_P;
   __sumkor.VAT+=FKOR.WV;
   __sumkor.KWB+=FKOR.BWB;
   __sumkor.KWN+=FKOR.BWWAL_P;
   __sumkor.KWV+=FKOR.BWV;
   __sumkor.put(1)
|| __sumkor.STV:='xx';
   __sumkor.KST:='xx';
   __sumkor.BRT:=FKOR.WB;
   __sumkor.NET:=FKOR.WWAL_P;
   __sumkor.VAT:=FKOR.WV;
   __sumkor.KWB:=FKOR.BWB;
   __sumkor.KWN:=FKOR.BWWAL_P;
   __sumkor.KWV:=FKOR.BWV;
   __sumkor.add(1)
?};
1


\zd_nabyw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [2008]
:: OPIS: dodatek dotyczacy marketow OBI, ustawia ZK_N.KH, ZK_N.HAN
::----------------------------------------------------------------------------------------------------------------------
_war:=Ebuf.WAR;
{? 5+_war='43999'
|| _slu:=exec('FindInSet','#table','SLU','NAZ','43999');
   {? _slu<>null
   || _slo:=exec('FindInSet','#table','SLO','SL',5-_war,_slu,"SLO.TR",,,'');
      {? +_slo=13 || _war:=_slo ?}
   ?}
?};

ZK_N.KH:=exec('FindInSet','#table','KH','GLN',_war,2);
exec('zd_han','edi_form')


\zd_odbio
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [2008]
:: OPIS: wyznaczenie odbiorcy
::----------------------------------------------------------------------------------------------------------------------
_war:=Ebuf.WAR;
{? 5+_war='43999' & ZK_N.KH=null
|| Ebuf.cntx_psh(); exec('zd_nabyw','edi_form'); Ebuf.cntx_pop()
?};
ZK_N.ODB:=exec('FindInSet','#table','KH_ODB','GLN',_war)


\ean_zkp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: numer kodu wg dostawcy
::----------------------------------------------------------------------------------------------------------------------
{? +form(Ebuf.WAR)=13
||
   _mref:={? ZK_N.KH=null || null || exec('findm_kh_kk','edi_form',ZK_N.KH,Ebuf.WAR) ?};
   ZK_P.M:={? _mref=null || exec('FindInSet','#table','M','KODK',Ebuf.WAR) || _mref ?};
   ZK_P.SV:=exec('m_vat','material',ZK_P.M,ZK_N.KH,,ZK_N.DP~1,ZK_N.DP~2)
||
   ZK_P.M:=null;
   ''
?}


\verify_order_ff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: weryfikacja komunikatow orders typu ff
::----------------------------------------------------------------------------------------------------------------------
_return:=1;

EDI_Z.CHK:='T';
{? Ebuf.first()
||
   {!
   |? {? Ebuf.KOD='BGM_ONU'
         | Ebuf.KOD='NAD_BUY'
         | Ebuf.KOD='PIA_IN2'
      ||
         EDI_D.clear();
         EDI_D.index('K');
         EDI_D.prefix(EDI_Z.C);
         {? EDI_D.find_key(Ebuf.KOD) & EDI_D.TAB<>''
         ||
            {? EDI_D.FLD<>''
            ||
               ($(EDI_D.TAB+'.'+EDI_D.FLD))():=
                  {? EDI_D.T='N' || #Ebuf.WAR
                  |? EDI_D.T='S' || Ebuf.WAR
                  |? EDI_D.T='D' || date(#(4+Ebuf.WAR),#(2+(4-Ebuf.WAR)),#(2+(6-Ebuf.WAR)))
                  |? EDI_D.T='T' || time(#(2+Ebuf.WAR),#(2+(2-Ebuf.WAR)),#(2+(4-Ebuf.WAR)))
                  ?}
            ||
               ($EDI_D.FLF)()
            ?}
         ?};
         {? Ebuf.KOD='BGM_ONU'
         ||
            _sym:=ZK_N.ZAM_KL
         |? Ebuf.KOD='NAD_BUY'
         ||
            {? ZK_N.KH=null
            ||
               exec('add_kom','#message','Brak kontrahenta o kodzie %1.'@[Ebuf.WAR],2,_sym);
               _return:=0
            ?}
         |? Ebuf.KOD='PIA_IN2'
         ||
            {? ZK_P.M=null
            ||
               exec('add_kom','#message','Brak materiału o kodzie %1.'@[Ebuf.WAR],2,_sym);
               _return:=0
            ?}
         ||
            ''
         ?}
      ?};
      Ebuf.next()
   !}
?};
EDI_Z.CHK:='N';

_return


\magazyn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: domyslny magazyn
::   WE: _a - symbol magazynu
::----------------------------------------------------------------------------------------------------------------------
_return:=null();

{? _a<>''
||
   MG.cntx_psh();
   MG.index('MAGAZYNY');
   MG.prefix(_a);
   {? MG.first()
   ||
      _cont:=1;
      {!
      |? {? MG.SYM=_a || _cont:=0; _return:=MG.ref() ?};
         _cont=1 & MG.next()
      !}
   ?};
   MG.cntx_pop()
?};

_return


\ean_zdp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: numer kodu wg dostawcy
::----------------------------------------------------------------------------------------------------------------------
{? +form(Ebuf.WAR)=13
|| ZD_POZ.M:=exec('FindInSet','#table','M','KODK',Ebuf.WAR)
|| ''
?}


\bl_zdn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: poczatek zamowienia dostawy
::   WE: _a - typ zamowienia klienta
::----------------------------------------------------------------------------------------------------------------------
BEER.TYPYZAM:=exec('FindInSet','#table','TYPYZAM','TYP',_a,'D');
POM.TAB:='ZD_NAG'; POM.TYPDOK:=exec('FindInSet','#table','TYPYZAM','TYP',_a,'D',"TYPYZAM.KOD",,,'');

ZD_NAG.clear();
ZD_NAG.blank();
ZD_NAG.memo_set(,'UW')


\add_zdn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: dodaje naglowek zamowienia do systemu
::   WE: 1 - jesli dodano naglowek zamowienia, 0 - wpp
::----------------------------------------------------------------------------------------------------------------------
BEER.ZD_NAG:=null();

{? EDI_Z.POMIN='N'
||
   ZD_NAG.R:=ZD_NAG.DATA~1;
   ZD_NAG.M:=ZD_NAG.DATA~2;
   ZD_NAG.K:=exec('zwr_okr','#datetime',date(ZD_NAG.R,ZD_NAG.M,1),5);
   ZD_NAG.EDI_R:='T';

   {? ZD_NAG.add(1) & ZD_NAG.memo_put(,'UW')
   ||
      ZD_NAG.NR:=exec('numer_new','numery','PACZKA');
      exec('znak','numery','ZD_NAG');
      ZD_NAG.put();
::    dodanie informacji do tabeli z komunikatem zwrotnym
      exec('add_kom','#message','Dodano zamówienie: %1'@[ZD_NAG.SYM],1,ZD_NAG.SYM);
      EDI_Z.DOK:=BB.refsql(ZD_NAG.ref()); EDI_Z.SYM:=ZD_NAG.SYM; EDI_Z.KH:=ZD_NAG.KH;
      BEER.ZD_NAG:=ZD_NAG.ref()
   ?}
?};

BEER.ZD_NAG<>null


\bl_zdp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: poczatek pozycji zamowienia dostawy
::----------------------------------------------------------------------------------------------------------------------
ZD_POZ.clear(); ZD_POZ.blank(); ZD_POZ.ZD_NAG:=BEER.ZD_NAG


\add_zdp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: rr [2008]
:: OPIS: dodaje pozycje zamowienia dostawy do systemu,
::       EDI_Z.POMIN ustawiane dla komunikatow xml w systuacji kiedy nie mozna odczytac komunikatu
::       poniewaz dokument juz istnieje w systemie
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
||
   {? BEER.ZD_NAG=null
   ||
      FUN.info(exec('msg','edi_wspolne','ERR_EDI_BRAK_WSK_ZK_N'))
   ||
      ZD_POZ.IL:=ZD_POZ.IL_ZAM;
      ZD_POZ.KH:=ZD_POZ.ZD_NAG().KH;
      ZD_POZ.KH_MSC:=ZD_POZ.ZD_NAG().KH_MSC;
      ZD_POZ.add(1)
   ?}
?}


\end_zdn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: koniec zamowienia dostaw
::----------------------------------------------------------------------------------------------------------------------
exec('war_zam','zamdst_wspolne',ZD_NAG.ref);
exec('aktu_zam','zamdst_wspolne',BEER.ZD_NAG)


\verify_ord_csv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: weryfikacja komunikatow orders typu csv
::----------------------------------------------------------------------------------------------------------------------
_return:=1;

{? Ebuf.first()
||
   {!
   |? {? Ebuf.KOD='LIN_INU'
      ||
         EDI_D.clear();
         EDI_D.index('K');
         EDI_D.prefix(EDI_Z.C);
         {? EDI_D.find_key(Ebuf.KOD) & EDI_D.TAB<>''
         ||
            {? EDI_D.FLD<>''
            ||
               ($(EDI_D.TAB+'.'+EDI_D.FLD))():=
                  {? EDI_D.T='N' || #Ebuf.WAR
                  |? EDI_D.T='S' || Ebuf.WAR
                  |? EDI_D.T='D' || date(#(4+Ebuf.WAR),#(2+(4-Ebuf.WAR)),#(2+(6-Ebuf.WAR)))
                  |? EDI_D.T='T' || time(#(2+Ebuf.WAR),#(2+(2-Ebuf.WAR)),#(2+(4-Ebuf.WAR)))
                  ?}
            ||
               ($EDI_D.FLF)()
            ?}
         ?};
         {? Ebuf.KOD='LIN_INU'
         ||
            {? ZD_POZ.M=null
            ||
               exec('add_kom','#message','Brak materiału o kodzie %1.'@[Ebuf.WAR],2,$Ebuf.LP);
               _return:=0
            ?}
         ||
            ''
         ?}
      ?};
      Ebuf.next()
   !}
?};

_return


\zamowienie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: <OrderParty><BuyerOrderNumber>
::   WE: _a - akronim pola ktore ma byc zwrocone
::   WY: symbol zamowienia klienta
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? FAKS.FKSQL=''
||
   _wyn:=exec('zk_n_wart_pola','edi_form',_a)
||
   FAKS.cntx_psh;
   FAKS.use(8+FAKS.FKSQL);
   FAKS.prefix;
   {? FAKS.seek(FAKS.FKSQL)
   ||
      _wyn:=exec('zk_n_wart_pola','edi_form',_a)
   ?};
   FAKS.cntx_pop
?};
_wyn


\mgr_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Mechanizm importów MGR - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=MGR,       type=_MGR,     name=Grupa materiałowa lub usługowa,      required=N
::# kind=WY,   symbol=MGR,       type=_MGR,     name=Grupa materiałowa lub usługowa,      required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','mgr_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\mgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki MGR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '@+form(__nrlkom,6,0,'99')+' ';
{? MGR.KOD=''
|| exec('add_kom','#message','%1Brak wartości pola KOD. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? MGR.RODZ=''
|| exec('add_kom','#message','%1Brak wartości pola RODZ. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? MGR.NAZ=''
|| exec('add_kom','#message','%1Brak wartości pola NAZ. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? MGR.RODZ<>'T' & MGR.RODZ<>'U'
|| exec('add_kom','#message','%1Dostępne wartości dla pola RODZ: T,U. Rekordu nie dodano.'@[_ln],15,'OKREŚLONE WARTOŚCI'@)
||
:: cena dla uslug do dwoch miejsc
   {? MGR.RODZ='U' || MGR.DOKL_C:=2 ?};
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _kod:=MGR.KOD;
   MGR.cntx_psh();
   MGR.index('KOD');
   MGR.prefix(MGR.RODZ,MGR.KOD,);
   _ref:=null;
   {? MGR.first()
   || exec('add_kom','#message','%1Istnieje już grupa o kodzie %2. Rekordu nie dodano.'@[_ln,MGR.KOD],184
       ,'JUŻ JEST W BAZIE'@);
      _ref:=MGR.ref();
      0
   ?};
   MGR.cntx_pop();

   {? _ref=null
   || MGR.prefix();
      {? MGR.add(1)
      || exec('add_kom','#message','Dodano grupę materiałowo-usługową o kodzie: %1.'@[MGR.KOD],38
          ,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message','%1Nie dodano grupy materiałowo-usługowej o kodzie: %2.'@[_ln,MGR.KOD],81
          ,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\zlaczref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: poszukuje ref-a dla danego pola i daje komunikat w przypadku ref-a null
::   WE: _a - tabela.pole do ktorej przypisujemy np. M.MGR
::       _b - wartosc pola
::       _c - tabela w ktorej szukamy
::       _d - indeks wg ktorego szukamy
::       _e - pole dokladnej wartosci poszukiwan
::       _f - komunikat o bledzie (rejestrowany 14 jako INNE BLEDY)
:: np. exec('zlaczref','edi_form','KH_ODB.OBS',Ebuf.WAR,'OBS','KOD','KOD'
::      ,'Brak obszaru sprzedaży o kodzie: '+Ebuf.WAR+'. Pole OBS nie zostało wypełnione.')
::   WY: 1-usterka 0-OK
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
($_a)():={? _b<>''
         || exec('FindInSet','#table',_c,_d,_b,,,1)
         || null
         ?};
{? _b<>'' & ($_a)()=null
|| _res:=1;
   {? _f<>'' || exec('add_kom','#message',_f,81,'INNE BŁĘDY'@) ?}
?};
_res


\matusl_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Mechanizm importów M - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=M,   type=_M,  name=Materiał lub usługa,  required=N
::# kind=WY,   symbol=M,   type=_M,  name=Materiał lub usługa,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','matusl_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\matusl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki M
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '@+form(__nrlkom,6,0,'99')+' ';
{? M.KTM=''
|| exec('add_kom','#message','%1Brak wartości pola KTM. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? M.RODZ=''
|| exec('add_kom','#message','%1Brak wartości pola RODZ. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? M.N=''
|| exec('add_kom','#message','%1Brak wartości pola N. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? M.J=null
|| exec('add_kom','#message','%1Brak wartości pola JM. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? M.VAT=null
|| exec('add_kom','#message','%1Brak wartości pola SVAT. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? M.MGR=null
|| exec('add_kom','#message','%1Brak wartości pola MGR. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? M.RODZ<>'T' & M.RODZ<>'U'
|| exec('add_kom','#message','%1Dostępne wartości dla pola RODZ: T,U. Rekordu nie dodano.'@[_ln],15,'OKREŚLONE WARTOŚCI'@)
|? ~exec('uplowstr','#string',M.KTM,1)
|| exec('add_kom','#message','%1Wartość pola KTM powinna zawierać tylko duże litery. Rekordu nie dodano.'@[_ln]
    ,15,'OKREŚLONE WARTOŚCI'@)
|? M.DOKL<0
|| exec('add_kom','#message','%1Wartość pola DOKL powinna być większa lub równa zero. Rekordu nie dodano.'@[_ln]
    ,15,'OKREŚLONE WARTOŚCI'@)
|? M.DOKL_C<0
|| exec('add_kom','#message','%1Wartość pola DOKL_C powinna być większa lub równa zero. Rekordu nie dodano.'@[_ln]
    ,15,'OKREŚLONE WARTOŚCI'@)
|? M.OPAKOW<>'T' & M.OPAKOW<>'N'
|| exec('add_kom','#message','%1Dostępne wartości dla pola OPAKOW: T,N. Rekordu nie dodano.'@[_ln],15,'OKREŚLONE WARTOŚCI'@)
|? ~exec('unik_ean','kody_kresk','M',M.KODK,null)
|| exec('add_kom','#message','%1Kod kreskowy wykorzystywany w systemie (pole KODK: %2. Rekordu nie dodano.'@[_ln,M.KODK]
    ,15,'OKREŚLONE WARTOŚCI'@)
|? M.KP<>'' & exec('find_sl','intrastat','007',M.KP)=null
|| exec('add_kom','#message','%1Niedozwolona wartość pola KP (dostępne wartości: słownik 007-Kody krajów): %2'
    '. Rekordu nie dodano.'@[_ln,M.KP],15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ref:=null;
   M.cntx_psh();
   M.index('MATKTM');
   M.prefix(M.KTM,M.KTM);
   {? M.first()
   || exec('add_kom','#message','%1Istnieje już indeks o kodzie %2. Rekordu nie dodano.'@[_ln,M.KTM],184
              ,'JUŻ JEST W BAZIE'@);
      _ref:=M.ref()
   ?};
   M.cntx_pop();

   {? _ref=null
   || M.prefix();
      {? M.add(1)
      || exec('add_kom','#message','Dodano indeks o kodzie: %1.'@[M.KTM],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message','%1Nie dodano indeksu o kodzie: %2.'@[_ln,M.KTM],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\kh_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Mechanizm importów KH - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=KH,      type=_KH,  name=Kontrahent,  required=N
::# kind=WY,   symbol=KH,      type=_KH,  name=Kontrahent,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','kh_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki KH
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '@+form(__nrlkom,6,0,'99')+' ';

{? KH.KOD=''
|| exec('add_kom','#message',_ln+'Brak wartości pola KOD. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? KH.SKR=''
|| exec('add_kom','#message',_ln+'Brak wartości pola SKR. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? KH.NAZ=''
|| exec('add_kom','#message',_ln+'Brak wartości pola NAZ. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? KH.NAZ_P=''
|| exec('add_kom','#message',_ln+'Brak wartości pola NAZ_P. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? ~exec('mail_ok','#email',KH.EM)
|| exec('add_kom','#message',_ln+'Nieprawidłowy format adresu email: %1. Rekordu nie dodano.'@[KH.EM]
      ,15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ref:=null;
   {! _ii:=1..2
   |?
      _kod:=KH.KOD;
      KH.cntx_psh();
      KH.index('KOD');
      KH.prefix(_ii,KH.KOD);
      {? KH.first()
      || {!
         |? {? KH.KOD=_kod
            || exec('add_kom','#message',_ln+'Istnieje już kontrahent o kodzie %1. Rekordu nie dodano.'@[KH.KOD],184
                  ,'JUŻ JEST W BAZIE'@);
               _ref:=KH.ref();
               0
            || KH.next()
            ?}
         !}
      ?};

      {? _ref=null
      || KH.index('SKR');
         KH.prefix(_ii);
         _ref:={? KH.find_key(KH.SKR,KH.SKR)
               || exec('add_kom','#message',_ln+'Istnieje już kontrahent o skrócie %1. Rekordu nie dodano.'@[KH.SKR],184
                    ,'JUŻ JEST W BAZIE'@);
                  KH.ref()
               || null
               ?}
      ?};
      KH.cntx_pop()
   !};

:: pole Typ Kontrahenta
   _typ:=KH.TYP;
   {? _ref=null() & (_typ='' | ~('PURI'*_typ))
   || exec('add_kom','#message','Zmieniono Typ kontrahenta na domyślny P-płatnik podatku VAT.'@,2,KH.KOD);
      KH.TYP:='P';
      _typ:='P'
   ?};
:: obsługa pól NIP, PESEL, NIP_UE oraz wypelnienie pole SNIP w zależności od typu kontrahenta
   _kraj:='';
   _nip:='';
   _snip:='';
   _kslo:=null();
   {? _typ='I'
   || {? INTRAST.NIPUE='-'
      || KH.NIP:=''
      || _snip:=exec('niptostr','#string',INTRAST.NIPUE);
         {? (+INTRAST.NIPUE)<=13 & (+_snip)<=11
         || KH.SNIP:=_snip;
            KH.NIP:=INTRAST.NIPUE
         ?}
      ?}
   |? 'PUR'*_typ
   || _snip:=exec('niptostr','#string',INTRAST.NIPUE);
      KH.SNIP:=_snip;
:      {? (+INTRAST.NIPUE)<=13 || KH.NIP:=INTRAST.NIPUE ?};
      {? (+INTRAST.NIPUE)<=20 || KH.NIP:=INTRAST.NIPUE ?};
      {? _typ='R' & (+KH.SNIP)=11 & (+INTRAST.NIPUE)=11
      || KH.PESEL:=INTRAST.NIPUE;
         KH.NIP:=''
      |? _typ='U'
      || _kraj:=2+form(_snip);
         _kslo:=exec('kraj_slo','edi_form',_kraj);
         _nip:=form(2-form(_snip));
         {? KH.NIP='' & _kslo=null() & (+INTRAST.NIPUE)<=13 || KH.NIP:=INTRAST.NIPUE ?};
         {? (+_snip)>11 & KH.NIP<>'' || KH.SNIP:=2-_snip ?}
      ?};
      {? KH.PESEL<>'' & KH.NIP=''  || KH.SNIP:=KH.PESEL ?}
   ?};

   {? _ref=null
   || KH.prefix();
      {? KH.add(1)
      || {? (_zmhan:=var_pres('__han')>0; _zmhan) | KH.TYP='P'
         || exec('kh_dod_ini','kontrahent');
            {? _zmhan
            || KH_DOD.HAN:=__han;
               KH_DOD.put
            ?}
         ?};
         {? _nip<>'' & _kslo<>null()
         || _add:=0;
            {? _kslo<>null()
            || NIPY.cntx_psh();
               NIPY.index('SNIP');
               NIPY.prefix(KH.ref(),_nip,);
               {? NIPY.first()
               || _add:=2
               || NIPY.prefix();
                  NIPY.blank();
                  NIPY.KH:=KH.ref();
                  NIPY.KRAJ:=_kslo;
                  NIPY.NIP:=_nip;
                  NIPY.SNIP:=_snip;
                  _add:=NIPY.add(1)
               ?};
               NIPY.cntx_pop()
            ?}
         ?};
         exec('add_kom','#message','Dodano kontrahenta o kodzie: %1.'@[KH.KOD],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message',_ln+'Nie dodano kontrahenta o kodzie: %1.'@[KH.KOD],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\srsr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [BZ] [11.22f]
:: OPIS: Dodanie pozycji kartoteki SRSR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------

_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
_wynik:=0;
:: weryfikacja czy istnieją zamknięte okresy w obszarze FST
{? exec('fst_zamk_okr','fst')
|| exec('add_kom','#message',_ln+'Środek trwały (%1) - w systemie istnieją zamknięte okresy w obszarze Środków trwałych, import środka niemożliwy.'@[SRSR.NRI]
            ,4,'BŁĘDY W DANYCH - REKORDU NIE DODANO'@);
   SRSR.NRI:=''
?};

:: weryfikacja czy w systemie istnieje nowy nie zainicjowany rok (bez uzupełnionego rejestru stanów)
{? SRSR.NRI<>''
|| SRST.cntx_psh();
   SRST.index('ROK'); SRST.prefix();
   {? SRST.first() || _all:=1 || _all:=0 ?};
   SRST.cntx_pop();
   {? _all & ~exec('last_year_data','fst')
   || exec('add_kom','#message',_ln+'Środek trwały (%1) - w systemie istnieje nowo zdefiniowany rok bez uzupełnionego rejestru stanów, import środka niemożliwy.'@[SRSR.NRI]
            ,4,'BŁĘDY W DANYCH - REKORDU NIE DODANO'@);
      SRSR.NRI:=''
   ?}
?};

{? SRSR.NRI<>''
|| {? +SRSR.NRI=18 & SRSR.NRI+1<>'.'
   || SRSR.NRI:=1-SRSR.NRI;
      SRSR.NRI+='.'
   |? SRSR.NRI+1<>'.'
   || SRSR.NRI+='.'
   ?};
   SRSR.cntx_psh();
   _global:=PAR_SKID.get(200)<>'T';
   {? _global
   || SRSR.index('NRI');
      SRSR.prefix();
      _find:=SRSR.find_key('T',SRSR.NRI)
   || SRSR.index('NRI_O');
      SRSR.prefix();
      _find:=SRSR.find_key(SRSR.ODD,'T',SRSR.NRI)
   ?};
   _ref:=
      {? _find
      || exec('add_kom','#message',_ln+'Istnieje środek trwały o numerze inwent.: %1. Rekordu nie dodano.'@[SRSR.NRI],184
           ,'JUŻ JEST W BAZIE'@);
         SRSR.ref()
      || null
      ?};
   SRSR.cntx_pop();
   {? _ref=null
   || _ok:=1;
      {? SRSR.R<>'T' & SRSR.R<>'N'
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (R) - rodzaj środka dostępne wartości dla pola: T,N.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.ODD=null
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (ODD) - jednostka księgowa nie znajduje się w słowniku.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.ODD<>null & ~exec('usr_fjks','b_perm',SRSR.ODD)
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (ODD) - bieżący użytkownik nie ma uprawnień do jednostki księgowej.'@[SRSR.NRI]
            ,15,'UPRAWNIENIA - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.GR=null
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (GR) - grupa środka trwałego nie znajduje się w słowniku.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.DZ=date(0,0,0)
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (DZ) - data zakupu musi być wypełniona.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.DE=date(0,0,0)
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (DE) - data eksploatacji musi być wypełniona.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.KONPOD=null
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (KONPOD) - zestaw kont podatkowych nie znajduje się w słowniku.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.KONFIN=null
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (KONFIN) - zestaw kont finansowych nie znajduje się w słowniku.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.JORG=null
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (JORG) - jednostka organizacyjna nie znajduje się w słowniku.'[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO');
         _ok:=0
      ?};
      {? SRSR.MP=null
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (MP) - metoda amortyzacji podatkowej nie znajduje się w słowniku.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {?  SRSR.R='N' & SRSR.MP<>null & SRSR.MP().NISKO<>'T'
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (MP) - wypełniona metoda amortyzacji podatkowej nie może być użyta dla środka niskocennego.'@[SRSR.NRI]
            ,4,'BŁĘDY W DANYCH - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.MF=null
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (MF) - metoda amortyzacji finansowej nie znajduje się w słowniku.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {?  SRSR.R='N' & SRSR.MF<>null & SRSR.MF().NISKO<>'T'
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (MF) - wypełniona metoda amortyzacji finansowej nie może być użyta dla środka niskocennego.'@[SRSR.NRI]
            ,4,'BŁĘDY W DANYCH - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.PRZYCHOD=null
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (PRZYCHOD) - rodzaj przychodu nie znajduje się w słowniku.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? SRSR.DZ>SRSR.DE
      || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (DZ) - data zakupu nie może być późniejsza od daty eksploatacji.'@[SRSR.NRI]
            ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
         _ok:=0
      ?};
      {? _ok
      || SRSR.OKRO_F:=exec('find_okro_f','fst',SRSR.DE);
         {? SRSR.OKRO_F=null
         || SRSR.OKRO_F:=exec('first_obsz_okr','fst')
         ?};
         {? SRSR.OKRO_F<>null
         || SRSR.ROK_F:=SRSR.OKRO_F().ROK;
            SRSR.OKRES:=SRSR.OKRO_F().OES;
            SRSR.ROK:=SRSR.OKRO_F().RES
         ?};
         {? SRSR.OKRO_F<>null & SRSR.DE>SRSR.OKRO_F().ROK().POCZ_ROK
         || exec('add_kom','#message',_ln+'Środek trwały (%1) pole (DE) - data eksploatacji jest późniejsza niż początek pierwszego roku systemu.'@[SRSR.NRI]
                 ,15,'OKREŚLONE WARTOŚCI - REKORDU NIE DODANO'@);
            _ok:=0
         ?}
      ?};
      {? _ok
      ||
         SRSR.prefix();
         SRSR.WKP:=SRSR.WKF:=1;
         SRSR.WARP:=(SRSR.WARP)$FINFO.DOKL;
         SRSR.NETP:=(SRSR.WARP-SRSR.UMOP)$FINFO.DOKL;
         SRSR.WARF:=(SRSR.WARF)$FINFO.DOKL;
         SRSR.NETF:=(SRSR.WARF-SRSR.UMOF)$FINFO.DOKL;
         {? SRSR.OKRO_F<>null
         || SRSR.ROK_F:=SRSR.OKRO_F().ROK;
            SRSR.OKRES:=SRSR.OKRO_F().OES;
            SRSR.ROK:=SRSR.OKRO_F().RES
         ?};

         do();
         _wynik:=SRSR.add(1);
         {? ~_wynik
         || undo()
         || SRD.updateRecState()
         ?};
         end();

         {? _wynik
         || exec('add_kom','#message','Dodano środek trwały o numerze inwent.: %1.'@[SRSR.NRI],38,'ZAPISANE REKORDY'@)
         || exec('add_kom','#message',_ln+'Nie dodano środka trwałego o numerze inwent.: %1.'@[SRSR.NRI],81,'INNE BŁĘDY'@)
         ?}
      ?}
   ?}
?};
_wynik


\brak_slow_srod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [11.22f]
:: OPIS: Formula dodaje komentarz dla nie wymagalnych pol podczas importu
::   WE: _a - akronim pola
::----------------------------------------------------------------------------------------------------------------------

_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? _a='POM'
|| exec('add_kom','#message',_ln+'Środek trwały (%1) pole (POM) - pomieszczenie nie znajduje się w słowniku.'@[SRSR.NRI]
     ,4,'OKREŚLONE WARTOŚCI'@)
|? _a='OSOBA'
|| exec('add_kom','#message',_ln+'Środek trwały (%1) pola (IMIE, NAZWISKO) - osoba nie znajduje się w słowniku.'@[SRSR.NRI]
     ,4,'OKREŚLONE WARTOŚCI'@)
?}


\add_srdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [11.22f]
:: OPIS: Formula dodaje dokument OT na wartosci w buforze
::   WY: ref dokumentu OT
::----------------------------------------------------------------------------------------------------------------------

_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
_sym:=SRDO.SYMBOL; _nr:=SRDO.NR; _dw:=SRDO.DW; _do:=SRDO.DO;
_ref:=null();
SRDT.cntx_psh();
SRDT.index('SRDT');
SRDT.prefix('P');
{? SRDT.first()
|| _typ:=SRDT.ref()
|| exec('add_kom','#message',_ln+'Nie dodano dokumentu OT: %1 dla środka nr inw.: %2 - brak typu dok. OT.'@[_sym,SRSR.NRI],81,'INNE BŁĘDY'@);
   _typ:=null
?};
SRDT.cntx_pop();
{? _typ
|| SRDO.cntx_psh();SRSR.cntx_psh();
   SRDO.index('RODZAJ');
   SRDO.prefix('P',_sym,);
   {? SRDO.first()
   || _s_tmp:='';
      _loop:=1;
      {! |?
         _s_tmp:=_sym+' ('+$_loop+')';
         SRDO.prefix('P',_s_tmp,);
         {? ~SRDO.first() || _loop:=0 || _loop+=1 ?};
         _loop
      !};
      exec('add_kom','#message',_ln+'Zmieniono symbol dokumentu OT z %1 na %3 dla śr. o nr.: %2 - nieunikalny dok. OT.'@[_sym,SRSR.NRI,_s_tmp],81,'INNE BŁĘDY'@);
      _sym:=_s_tmp
   ?};
   SRDO.blank();
   SRDO.OKRO_F:=exec('find_okro_f','fst',_do);
   {? SRDO.OKRO_F<>null
   || SRDO.ROK_F:=SRDO.OKRO_F().ROK;
      SRDO.OKRES:=SRDO.OKRO_F().OES;
      SRDO.ROK:=SRDO.OKRO_F().RES
   ?};
   SRDO.TYP:=_typ;
   SRDO.RODZ:='P';
   SRDO.SYMBOL:=_sym;
   _nr:=exec('bl_srdo_nr','fst');
   SRDO.NR:=_nr;
   SRDO.DW:=_dw;
   SRDO.DO:=_do;
   {? SRDO.add() || _ref:=SRDO.ref() ?};
   SRDO.cntx_pop(); SRSR.cntx_pop()
?};
_ref


\srod_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Mechanizm importów środków trwałych - formuła główna
::   WE: _a - instrukcja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WY,   symbol=SRSR,      type=_SRSR,    name=Środek trwały,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','srod_set')
|? _a='parses'
|| 1
|? _a='setEnv'
|| exec('init','fst');
   ~~
|| ~~
?}


\wal_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JH [11.22f]
:: OPIS: Szukanie waluty
::   WE: _a - kod waluty
::   WY: ref SLO z waluta
::  OLD: \wal_slo/edi_form.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
SLU.cntx_psh();
SLU.index('NAZ');
SLU.prefix('WALUTY',);
{? SLU.first()
|| SLO.cntx_psh();
   SLO.index('SL');
   SLO.prefix(SLU.ref(),_a,);
   {? SLO.first() || _ref:=SLO.ref() ?};
   SLO.cntx_pop()
?};
SLU.cntx_pop();
_ref


\dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JH [11.22f]
:: OPIS: Zakladanie naglowka dokumentu ksiegowego dla importow danych
:: WY: ref dokumentu
::  OLD: \dok/edi_form.fml
::----------------------------------------------------------------------------------------------------------------------
exec('RB','object');
_ref:=null;
_akt:=POMOC.AKC;
POMOC.AKC:='O';
czystart:=1; dolndok:=0; DokBez:=2;
SSTALE.AO:=__PARSES.getVal('OkresRok').OKRO_F;
SSTALE.AR:=SSTALE.AO().ROK;
exec('open_tabele','open_tab','F');
{? exec('rodz_dok','dok_fks') & exec('dol_dok','dok_fks')
|| _ref:=DOK.ref()
|| exec('add_kom','#message','Import przerwany przez użytkownika'@,38,'UWAGA'@)
?};
VAR_DEL.delete('czystart','dolndok','DokBez');
POMOC.AKC:=_akt;
_ref


\rozrach
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [JH] [11.22f]
:: OPIS: Dodanie pozycji dokumentu prostego - obsluga standardowych bledow
::   WY: ~~
::  OLD: \rozrach/edi_form.fml
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? __RefDok=null
|| exec('add_kom','#message',_ln+'Nie dodano nagłówka - import przerwany'@,38,'BRAK NAGŁÓWKA'@)
|| POZ.DOK:=__RefDok;
   {? POZ.SUM<>0 || POZ.SUM:=POZ.SUM$2 ?};
   {? POZ.DOK().DOK_REJ().CZY_ROZL='T' & POZ.DATA_R=date(0,0,0) || POZ.DATA_R:=POZ.DO ?};
   {? POZ.KURS<>0 & POZ.SUMW<>0
   || POZ.KURS:=POZ.KURS$6;
      POZ.SUMW:=POZ.SUMW$2;
      exec('ae_kurs','dok_fks',2)
   ?};
   POZ.TID:=~-POZ.TID;
   {? POZ.ID='' || POZ.ODD:=null ?};
   POZ.POZ:=__Lp;
   __Lp+=1;
   _koment:='';
   {? POZ.add()
   || exec('konta','edi_form');
      exec('add_kom','#message','Dodano pozycję:'@+$POZ.POZ,38,'ZAPISANE REKORDY'@);
      {? POZ.SUMW<>0 &
         ~exec('czy_wiel','edi_form',SSTALE.AR().SYNT+POZ.KON) &
         POZ.WAL=null
      || exec('add_kom','#message',_ln+'Błędny rodzaj dekretu konta (walutowość) dla pozycji:'@+$POZ.POZ,38,'BŁĄD DEKRETU'@)
      ?};
      {? __Wal<>'' & POZ.WAL=null
      || exec('add_kom','#message',_ln+'Błędnie podana waluta dla pozycji: '@+$POZ.POZ,38,'BŁĄD DEKRETU'@)
      ?};
      {? POZ.ID<>'' | POZ.TID<>'' | POZ.DO<>date(0,0,0) | POZ.TP<>date(0,0,0)
      || {? POZ.ID='' || _koment+='Brak symbolu rozrachunku'@ ?};
         {? POZ.TID=''
         || {? _koment<>''
            || _koment+=', brak typu identyfikatora rozrachunku'@
            || _koment+='Brak typu identyfikatora rozrachunku'@
            ?}
         || {? POZ.TID<>'NAL' & POZ.TID<>'NOD' & POZ.TID<>'ZOB' & POZ.TID<>'ZOD' & POZ.TID<>'INN' & POZ.TID<>'RMK' & POZ.TID<>'RMP'
            || {? _koment<>''
               || _koment+=', błędny typ identyfikatora rozrachunku'@
               || _koment+='Błędny typ identyfikatora rozrachunku'@
               ?}
            ?}
         ?};
         {? POZ.DO=date(0,0,0)
         || {? _koment<>''
            || _koment+=', brak daty otwarcia rozrachunku'@
            || _koment+='Brak daty otwarcia rozrachunku'@
            ?}
         ?};
         {? POZ.TP=date(0,0,0)
         || {? _koment<>''
            || _koment+=', brak terminu płatności'@
            || _koment+='Brak terminu płatności'@
            ?}
         ?};
         {? _koment<>'' || exec('add_kom','#message',_ln+_koment+' dla pozycji: '@+$POZ.POZ,38,'BŁĄD DEKRETU'@) ?}
      ?};
      {? POZ.STR=''
      || exec('add_kom','#message',_ln+'Brak strony zapisu lub błędnie podana strona dla pozycji: '@+$POZ.POZ,38,'BŁĄD DEKRETU'@)
      ?};
      {? exec('akc_kont','edkonto',POZ.KON)
      || exec('add_kom','#message',_ln+'Błędny symbol konta dla pozycji: '@+$POZ.POZ,38,'BŁĄD DEKRETU'@)
      ?}
   || exec('add_kom','#message',_ln+'Nie udało się dodać pozycji: '@+$POZ.POZ,38,'BŁĄD DEKRETU'@)
   ?}
?};
~~


\czy_wiel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JH [11.22f]
:: OPIS: Sprawdza czy konto jest wielowalutowe
:: WE: _a - symbol konta syntetycznego
:: WY:  1 - walutowe
::      0 - niewalutowe
::  OLD: \czy_wiel/edi_form.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
KS.cntx_psh();
KS.index('SYM');
KS.prefix(SSTALE.AR,_a,);
{? KS.first() & KS.WIELO='T' || _wyn:=1 ?};
KS.cntx_pop();
_wyn


\dok_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Mechanizm importów dokumentów - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=DOK,      type=_DOK,    name=Dokument księgowy,    required=N
::# kind=WY,   symbol=DOK,      type=_DOK,    name=Dokument księgowy,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','dok_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\kasowanie_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu kasowanie danych bez powiązań z obszaru kadrowo-płacowego - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=OSOBA,      type=_OSOBA,    name=kasowanie danych,    required=N
::# kind=WY,   symbol=OSOBA,      type=_OSOBA,    name=kasowanie danych,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','kasowanie_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\OSOBA_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu danych osobowych - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=OSOBA,      type=_OSOBA,    name=Dane osobowe,    required=N
::# kind=WY,   symbol=OSOBA,      type=_OSOBA,    name=Dane osobowe,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','OSOBA_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\OS_ADRES_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu danych adresowych - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=OS_ADRES,      type=_OS_ADRES,    name=Dane adresowe osoby,    required=N
::# kind=WY,   symbol=OS_ADRES,      type=_OS_ADRES,    name=Dane adresowe osoby,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','OS_ADRES_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\PKO_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu rachunków bankowych osoby - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=PKO,      type=_PKO,    name=Rachunki bankowe osoby,    required=N
::# kind=WY,   symbol=PKO,      type=_PKO,    name=Rachunki bankowe osoby,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','PKO_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\OS_US_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu urzędów skarbowych osoby - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=OS_US,      type=_OS_US,    name=Urzędy skarbowe osoby,    required=N
::# kind=WY,   symbol=OS_US,      type=_OS_US,    name=Urzędy skarbowe osoby,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','OS_US_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\P_INFO_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu informacji ubezpieczeniowych - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=P_INFO,      type=_P_INFO,    name=Informacje ubezpieczeniowe osoby,    required=N
::# kind=WY,   symbol=P_INFO,      type=_P_INFO,    name=Informacje ubezpieczeniowe osoby,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','P_INFO_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\RD_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu stan rodzinny osoby - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=RD,      type=_RD,    name=Stan rodzinny,    required=N
::# kind=WY,   symbol=RD,      type=_RD,    name=Stan rodzinny,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','PKO_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\STAZ_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu okresów poprzedniego zatrudnienia osoby - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=STAZ,      type=_STAZ,    name=Okresy poprzedniego zatrudnienia,    required=N
::# kind=WY,   symbol=STAZ,      type=_STAZ,    name=Okresy poprzedniego zatrudnienia,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','STAZ_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\STAZ_H_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu informacji uzupełniających okresy poprzedniego zatrudnienia osoby - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=STAZ_H,      type=_STAZ_H,    name=Uzupełnienie okresów poprzedniego zatrudnienia,    required=N
::# kind=WY,   symbol=STAZ_H,      type=_STAZ_H,    name=Uzupełnienie okresów poprzedniego zatrudnienia,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','STAZ_H_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\OS_SZKOL_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu ukończonych szkół - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=OS_SZKOL,      type=_OS_SZKOL,    name=Okresy nauki,    required=N
::# kind=WY,   symbol=OS_SZKOL,      type=_OS_SZKOL,    name=Okresy nauki,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','OS_SZKOL_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\SZKOLBHP_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu szkolenia bhp i ppoż. osoby - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=KART_DOD,      type=_KART_DOD,    name=Szkolenia bhp i ppoż. osoby,    required=N
::# kind=WY,   symbol=KART_DOD,      type=_KART_DOD,    name=Szkolenia bhp i ppoż. osoby,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','SZKOLBHP_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\WYR_KAR_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu wyróżnienia i kary osoby - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=KART_DOD,      type=_KART_DOD,    name=Wyróżnienia i kary osoby,    required=N
::# kind=WY,   symbol=KART_DOD,      type=_KART_DOD,    name=Wyróżnienia i kary osoby,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','WYR_KAR_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\DOD_KWAL_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu dodatkowe kwalifikacje osoby - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=KART_DOD,      type=_KART_DOD,    name=Dodatkowe kwalifikacje osoby ,    required=N
::# kind=WY,   symbol=KART_DOD,      type=_KART_DOD,    name=Dodatkowe kwalifikacje osoby ,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','DOD_KWAL_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\P_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu pracowników - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=P,      type=_P,    name=Pracownicy,    required=N
::# kind=WY,   symbol=P,      type=_P,    name=Pracownicy,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','P_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\H_UM_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu umów o pracę - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=H_UM,      type=_H_UM,    name=Umowy o pracę,    required=N
::# kind=WY,   symbol=H_UM,      type=_H_UM,    name=Umowy o pracę,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','H_UM_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\H_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu aneksów do umowy o pracę - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=H,      type=_H,    name=Aneksy do umowy o pracę,    required=N
::# kind=WY,   symbol=H,      type=_H,    name=Aneksy do umowy o pracę,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','H_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\H_ODDE_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Mechanizm importu oddelegowań pracowników - formuła główna
::   WE: _a - instrukcja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=H_ODDE,      type=_H_ODDE,    name=Ewidencja oddelegowań do pracy za granicą,    required=N
::# kind=WY,   symbol=H_ODDE,      type=_H_ODDE,    name=Ewidencja oddelegowań do pracy za granicą,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','H_ODDE_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\KART_URL_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu kart urlopowych - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=KART_URL,      type=_KART_URL,    name=Karty urlopowe,    required=N
::# kind=WY,   symbol=KART_URL,      type=_KART_URL,    name=Karty urlopowe,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','KART_URL_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\P_IPOD_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu informacji podatkowych pracowników - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=P_IPOD,      type=_P_IPOD,    name=Informacje podatkowe,    required=N
::# kind=WY,   symbol=P_IPOD,      type=_P_IPOD,    name=Informacje podatkowe,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','P_IPOD_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\BADANIE_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu informacji o badaniach lekarskich pracowników - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=BDO,      type=_BDO,    name=Badania lekarskie,    required=N
::# kind=WY,   symbol=BDO,      type=_BDO,    name=Badania lekarskie,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','BADANIE_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\TAB_R_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu tablicy translacji kodów składników płacowych - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=R,      type=_R,    name=Tablica kodów sładników płacowych,    required=N
::# kind=WY,   symbol=R,      type=_R,    name=Tablica kodów sładników płacowych,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','TAB_R_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\N_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu nieobecności - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=N,      type=_N,    name=Nagłówki list płac,    required=N
::# kind=WY,   symbol=N,      type=_N,    name=Nagłówki list płac,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','N_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\G_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu przepracowanych godzin - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=G,      type=_G,    name=Godziny pracy,    required=N
::# kind=WY,   symbol=G,      type=_G,    name=Godziny pracy,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','G_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\LSS_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu dodatkowych składników płacowych - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=LSS,      type=_LSS,    name=Dodatkowe składniki listy płac,    required=N
::# kind=WY,   symbol=LSS,      type=_LSS,    name=Dodatkowe składniki listy płac,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','LSS_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\K_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu kredytów - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=K,      type=_K,    name=Kredyty,    required=N
::# kind=WY,   symbol=K,      type=_K,    name=Kredyty,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','K_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\O_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu nagłówków list płac - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=O,      type=_O,    name=Nagłówki list płac,    required=N
::# kind=WY,   symbol=O,      type=_O,    name=Nagłówki list płac,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','O_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\LS_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu składników płacowych - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=LS,      type=_LS,    name=Składniki listy płac,    required=N
::# kind=WY,   symbol=LS,      type=_LS,    name=Składniki listy płac,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','LS_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\TZ_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu nagłówków list płac - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=TZ,      type=_TZ,    name=Rozliczenie nieobecności,    required=N
::# kind=WY,   symbol=TZ,      type=_TZ,    name=Rozliczenie nieobecności,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','TZ_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\KRE_HIS_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu historii spłaty kredytów - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=KRE_HIS,      type=_KRE_HIS,    name=Historia spłayt kredytów,    required=N
::# kind=WY,   symbol=KRE_HIS,      type=_KRE_HIS,    name=Historia spłaty kredytów,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','O_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\umowy_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu umów dla pracowników - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=P,      type=_P,    name=Pracownicy i umowy,    required=N
::# kind=WY,   symbol=P,      type=_P,    name=Pracownicy i umowy,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','umowy_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\han_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów HAN - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=HAN,       type=_HAN,     name=Handlowcy,      required=N
::# kind=WY,   symbol=HAN,       type=_HAN,     name=Handlowcy,      required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','han_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\han
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [RF] [17.00]
:: OPIS: Dodanie pozycji kartoteki HAN
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '@+form(__nrlkom,6,0,'99')+' ';
{? HAN.KOD=''
|| exec('add_kom','#message','%1Brak wartości pola KOD. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? HAN.NAZ=''
|| exec('add_kom','#message','%1Brak wartości pola NAZ. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   HAN.cntx_psh();
   HAN.index('KOD');
   HAN.prefix(HAN.KOD,HAN.KOD,);
   _ref:=null;
   {? HAN.first()
   || exec('add_kom','#message','%1Istnieje już handlowiec o kodzie %2. Rekordu nie dodano.'@[_ln,HAN.KOD],184
       ,'JUŻ JEST W BAZIE'@);
      _ref:=HAN.ref();
      0
   ?};
   HAN.cntx_pop();

   {? _ref=null
   || HAN.prefix();
      {? HAN.add(1)
      || exec('add_kom','#message','Dodano handlowca o kodzie: %1.'@[HAN.KOD],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message','%1Nie dodano handlowca o kodzie: %2.'@[_ln,HAN.KOD],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\grkh_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów GRKH - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=GRKH,       type=_GRKH,     name=Grupy kontrahentów,      required=N
::# kind=WY,   symbol=GRKH,       type=_GRKH,     name=Grupy kontrahentów,      required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','grkh_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\grkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [RF] [17.00]
:: OPIS: Dodanie pozycji kartoteki GRKH
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '@+form(__nrlkom,6,0,'99')+' ';
{? GRKH.KOD=''
|| exec('add_kom','#message','%1Brak wartości pola KOD. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
|? GRKH.NAZ=''
|| exec('add_kom','#message','%1Brak wartości pola NAZ. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _kod:=GRKH.KOD;
   GRKH.cntx_psh();
   GRKH.index('KOD');
   GRKH.prefix(GRKH.KOD);
   _ref:=null;
   {? GRKH.first()
   || {!
      |? {? GRKH.KOD=_kod
         || exec('add_kom','#message','%1Istnieje już grupa kontrahentów o kodzie %2. Rekordu nie dodano.'@[_ln,GRKH.KOD]
            ,184,'JUŻ JEST W BAZIE'@);
            _ref:=GRKH.ref();
            0
         || GRKH.next()
         ?}
      !}
   ?};
   GRKH.cntx_pop();

   {? _ref=null
   || GRKH.prefix();
      {? GRKH.add(1)
      || exec('add_kom','#message','Dodano grupę kontrahentów o kodzie: %1.'@[GRKH.KOD],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message','%1Nie dodano grupy kontrahentów o kodzie: %2.'@[_ln,GRKH.KOD],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\obs_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów OBS - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=OBS,       type=_OBS,     name=Obszary sprzedaży,      required=N
::# kind=WY,   symbol=OBS,       type=_OBS,     name=Obszary sprzedaży,      required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','obs_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\obs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [RF] [17.00]
:: OPIS: Dodanie pozycji kartoteki OBS
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '@+form(__nrlkom,6,0,'99')+' ';
{? OBS.KOD=''
|| exec('add_kom','#message','%1Brak wartości pola KOD. Rekordu nie dodano.'@[_ln],8,'BRAK WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _kod:=OBS.KOD;
   OBS.cntx_psh();
   OBS.index('KOD');
   OBS.prefix(OBS.KOD);
   _ref:=null;
   {? OBS.first()
   || {!
      |? {? OBS.KOD=_kod
         || exec('add_kom','#message','%1Istnieje już obszar sprzedaży o kodzie %2. Rekordu nie dodano.'@[_ln,OBS.KOD]
            ,184,'JUŻ JEST W BAZIE'@);
            _ref:=OBS.ref();
            0
         || OBS.next()
         ?}
      !}
   ?};
   OBS.cntx_pop();

   {? _ref=null
   || OBS.prefix();
      {? OBS.add(1)
      || exec('add_kom','#message','Dodano obszar sprzedaży o kodzie: %1.'@[OBS.KOD],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message','%1Nie dodano obszaru sprzedaży o kodzie: %2.'@[_ln,OBS.KOD],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\kh_odbi_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów KH_ODB - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=KH_ODB,      type=_KH_ODB,  name=Odbiorcy kontrahenta,  required=N
::# kind=WY,   symbol=KH_ODB,      type=_KH_ODB,  name=Odbiorcy kontrahenta,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','kh_odbi_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\kh_odbi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Dodanie pozycji kartoteki KH_ODB
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '@+form(__nrlkom,6,0,'99')+' ';
{? KH_ODB.KOD=''
|| exec('add_kom','#message',_ln+'Brak wartości pola KOD. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? KH_ODB.NAZ=''
|| exec('add_kom','#message',_ln+'Brak wartości pola NAZ. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? ~exec('mail_ok','#email',KH_ODB.EM)
|| exec('add_kom','#message',_ln+'Nieprawidłowy format adresu email: %1. Rekordu nie dodano.'@[KH_ODB.EM]
      ,15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   KH_ODB.cntx_psh();
   KH_ODB.index('KH_ODB');
   KH_ODB.prefix(KH_ODB.KH,KH_ODB.KOD,KH_ODB.KOD);
   _ref:=null;
   {? KH_ODB.first()
   || exec('add_kom','#message',_ln+'Istnieje już kontrahent o kodzie %1. Rekordu nie dodano.'@[KH_ODB.KOD],184
         ,'JUŻ JEST W BAZIE'@);
      _ref:=KH_ODB.ref();
      0
   ?};
   KH_ODB.cntx_pop();

:: wypelnia pole SNIP
   KH_ODB.SNIP:=exec('niptostr','#string',KH_ODB.NIP);

   {? _ref=null
   || KH_ODB.prefix();
      {? KH_ODB.add(1)
      || exec('add_kom','#message','Dodano kontrahenta o kodzie: %1.'@[KH_ODB.KOD],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message',_ln+'Nie dodano kontrahenta o kodzie: %1.'@[KH_ODB.KOD],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\kraj_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JH [12.30]
:: OPIS: Szukanie waluty
::   WE: _a - kod kraju
::   WY: ref SLO z kraju
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
SLU.cntx_psh();
SLU.index('NAZ');
SLU.prefix('~KRAJE UE',);
{? SLU.first()
|| SLO.cntx_psh();
   SLO.index('SL');
   SLO.prefix(SLU.ref(),_a,);
   {? SLO.first() || _ref:=SLO.ref() ?};
   SLO.cntx_pop()
?};
SLU.cntx_pop();
_ref


\nipy_ue_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów NIPY - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=NIPY,      type=_NIPY,  name=Nipy UE,  required=N
::# kind=WY,   symbol=NIPY,      type=_NIPY,  name=Nipy UE,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','nipy_ue_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\nipy_ue
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [JH] [12.30]
:: OPIS: Dodanie pozycji kartoteki NIPY
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------

_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? NIPY.KH=null
|| exec('add_kom','#message',_ln+'Brak wartości pola NIPY.KH lub nie znaleziono kontrahenta. Rekordu nie dodano.'@,8
      ,'BRAK WARTOŚCI'@)
|? NIPY.KRAJ=null()
|| exec('add_kom','#message',_ln+'Brak wartości pola NIPY.KRAJ lub nie znaleziono kraju. Rekordu nie dodano.'@,8
      ,'BRAK WARTOŚCI'@)
|? NIPY.NIP=''
|| exec('add_kom','#message',_ln+'Brak wartości pola NIPY.NIP. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|| NIPY.cntx_psh();
   _ref:=null;
   NIPY.index('SNIP');
   NIPY.prefix(NIPY.KH,NIPY.SNIP);
   {? NIPY.first()
   ||   exec('add_kom','#message',_ln+'Istnieje NIP UE %1 dla kontrahenta o kodzie %2 - %3. Rekordu nie dodano.'@
                                  [NIPY.SNIP,NIPY.KH().KOD,NIPY.KH().SKR],184,'JUŻ JEST W BAZIE'@);
        _ref:=NIPY.ref();
        0
   ?};
   NIPY.cntx_pop();
   {? _ref=null
   || NIPY.prefix();
        {? NIPY.add(1)
        || exec('add_kom','#message','Dla kontrahenta %1 - %2 dodano NIP UE o kodzie: %3.'@
                                     [NIPY.KH().KOD,NIPY.KH().SKR,NIPY.SNIP],38,'ZAPISANE REKORDY'@)
        || exec('add_kom','#message',_ln+'Dla kontrahenta %1 - %2 nie dodano NIP UE o kodzie: %3.'@
                                     [NIPY.KH().KOD,NIPY.KH().SKR,NIPY.SNIP],81,'INNE BŁĘDY'@)
        ?}
   ?}
?};
~~


\mjm_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów MJM - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=MJM,      type=_MJM,  name=Jednostki miary,  required=N
::# kind=WY,   symbol=MJM,      type=_MJM,  name=Jednostki miary,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','mjm_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\mjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki MJM
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------

_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? MJM.M=null
|| exec('add_kom','#message',_ln+'Brak wartości pola KTM. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MJM.JM=null
|| exec('add_kom','#message',_ln+'Brak wartości pola JM. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MJM.JP=null
|| exec('add_kom','#message',_ln+'Brak wartości pola JP. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MJM.PRZ<=0
|| exec('add_kom','#message',_ln+'Wartość pola PRZ powinna być większa od zera. Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
|? MJM.M().J=MJM.JM
|| exec('add_kom','#message',_ln+'Wartość pola JM (%1) powinna być różna od jednostki miary materiału.'@[MJM.JM().KOD]+
                             'Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
|? (_txt:=exec('po_mjm','jm',1))<>''
|| exec('add_kom','#message',_ln+_txt+' Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ref:=null;
   MJM.cntx_psh();
   MJM.index('JM');
   MJM.prefix(MJM.M,MJM.JM,MJM.JP);
   {? MJM.first()
   || exec('add_kom','#message',_ln+'Istnieje już przelicznik dla %1 (%2,%3). Rekordu nie dodano'@
                                [MJM.M().KTM,MJM.JM().KOD,MJM.JP().KOD],184,'JUŻ JEST W BAZIE'@);
      _ref:=MJM.ref();
      0
   ?};
   MJM.cntx_pop();

   {? _ref=null
   || MJM.prefix();
      {? MJM.add(1)
      || exec('add_kom','#message','Dodano przelicznik dla: %1 (%2,%3).'@
                                   [MJM.M().KTM,MJM.JM().KOD,MJM.JP().KOD],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message',_ln+'Nie dodano przelicznika dla: %1 (%2,%3).'@
                                   [MJM.M().KTM,MJM.JM().KOD,MJM.JP().KOD],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\mz_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów MZ - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=MZ,      type=_MZ,  name=Zamienniki materiałów,  required=N
::# kind=WY,   symbol=MZ,      type=_MZ,  name=Zamienniki materiałów,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','mz_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\mz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki MZ
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------

_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? MZ.M=null
|| exec('add_kom','#message',_ln+'Brak wartości pola M. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MZ.MZ=null
|| exec('add_kom','#message',_ln+'Brak wartości pola MZ. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MZ.M=MZ.MZ
|| exec('add_kom','#message',_ln+'Kod materiału musi być różny od kodu zamiennika. Rekordu nie dodano.'@
    ,15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ref:=null;
   MZ.cntx_psh();
   MZ.index('MZ');
   MZ.prefix(MZ.M,MZ.MZ);
   {? MZ.first()
   || exec('add_kom','#message',_ln+'Dla materiału %1 istnieje już zamiennik: %2. Rekordu nie dodano.'@
       [MZ.M().KTM,MZ.MZ().KTM],184,'JUŻ JEST W BAZIE'@);
      _ref:=MZ.ref();
      0
   ?};
   MZ.cntx_pop();

   {? _ref=null
   || MZ.prefix();
      {? MZ.add(1)
      || exec('add_kom','#message','Dla materiału %1 dodano zamiennik: %2'@[MZ.M().KTM,MZ.MZ().KTM]
          ,38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message',_ln+'Dla materiału %1 nie dodano zamiennia: %2'@[MZ.M().KTM,MZ.MZ().KTM]
          ,81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\mkodk_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów MKODK - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=MKODK,      type=_MKODK,  name=Kody kreskowe,  required=N
::# kind=WY,   symbol=MKODK,      type=_MKODK,  name=Kody kreskowe,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','mkodk_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\mkodk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki MKODK
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------

_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? MKODK.M=null
|| exec('add_kom','#message',_ln+'Brak wartości pola M. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MKODK.KTM=''
|| exec('add_kom','#message',_ln+'Brak wartości pola KTM. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MKODK.IL<0
|| exec('add_kom','#message',_ln+'Wartość pola IL nie może być mniejsza od zera. Rekordu nie dodano.'@
    ,15,'OKREŚLONE WARTOŚCI'@)
|? MKODK.M().KODK='' & MKODK.KODK<>''
||  exec('add_kom','#message',_ln+'Indeks materiałowy %1 nie ma przypisanego kodu kreskowego. '@[MKODK.M().KTM]+
     'Niemożliwe dodanie kodu kreskowego %1. Rekordu nie dodano.'@[MKODK.KODK],15,'OKREŚLONE WARTOŚCI'@)
|? MKODK.IL>0 & ~exec('unik_ean','kody_kresk','M',MKODK.KODK,null)
|| exec('add_kom','#message',_ln+'Kod kreskowy wykorzystywany w systemie (pole KODK: %1). Rekordu nie dodano.'@
                             [MKODK.KODK],15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ktm:=MKODK.KTM;
   _kk:=MKODK.KODK;
   _ref:=null;
   MKODK.cntx_psh();
   MKODK.index('UNIK');
   MKODK.prefix(null,MKODK.M);
   {? MKODK.first()
   ||
      {!
      |? {? MKODK.KTM<>'' & MKODK.KTM=_ktm
         || exec('add_kom','#message',_ln+'Istnieje już kod zewnętrzny: %1 (%2). '@[MKODK.KTM,MKODK.M().KTM]+
             'Rekordu nie dodano.',184,'JUŻ JEST W BAZIE'@);
            _ref:=MKODK.ref();
            0
         |? MKODK.KODK<>'' & MKODK.KODK=_kk
         || exec('add_kom','#message',_ln+'Istnieje już kod zewnętrzny o kodzie kreskowym: %1 (%2). '@
             [MKODK.KODK,MKODK.M().KTM],184,'JUŻ JEST W BAZIE'@);
            _ref:=MKODK.ref();
            0
         || MKODK.next()
         ?}
      !}
   ?};
   MKODK.cntx_pop();

   {? _ref=null
   || MKODK.prefix();
      {? MKODK.add(1)
      || exec('add_kom','#message','Dodano dodatkowy kod dla: %1 o kodzie: %2.'@[MKODK.M().KTM,MKODK.KTM]
          ,38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message',_ln+'Nie dodano dodatkowego kodu dla: %1 o kodzie: %2.'@[MKODK.M().KTM,MKODK.KTM]
          ,81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\dlok_mag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Domyslna lokalizacja dla magazynu
::   WE: _a - kod domyslnej lokalizacji
::   WY: ref domyslnej lokalizacji lub null
::----------------------------------------------------------------------------------------------------------------------

_wyn:=null;
EANX.MG:=MG.ref();
EANL.cntx_psh();
EANL.index('KOD');
EANL.prefix(_a,_a);
{? EANL.first()
|| _wyn:=null
|| EANL.clear;
   EANL.blank();
   EANL.DOK:='T';
   EANL.AKT:='T';
   EANL.MG:=EANX.MG;
   EANL.KOD:=_a;
   {? EANL.add(1) || _wyn:=EANL.ref() ?}
?};
EANL.cntx_pop();
_wyn


\magazyny_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów MG - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=MG,      type=_MG,  name=Magazyny,  required=N
::# kind=WY,   symbol=MG,      type=_MG,  name=Magazyny,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','magazyny_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\magazyny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki MG
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? MG.SYM=''
|| exec('add_kom','#message',_ln+'Brak wartości pola SYM. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MG.NAZ=''
|| exec('add_kom','#message',_ln+'Brak wartości pola NAZ. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MG.TYP=''
|| exec('add_kom','#message',_ln+'Brak wartości pola TYP. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MG.ODDZ=''
|| exec('add_kom','#message',_ln+'Brak wartości pola ODDZ. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? ~exec('uplowstr','#string',MG.SYM,1)
|| exec('add_kom','#message',_ln+'Wartość pola SYM powinna zawierać tylko duże litery. Rekordu nie dodano.'@
    ,15,'OKREŚLONE WARTOŚCI'@)
|? ~('TN'*MG.MGR)
|| exec('add_kom','#message',_ln+'Wartość pola MGR powinna być T lub N. Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
|? ~('TN'*MG.U)
|| exec('add_kom','#message',_ln+'Wartość pola U powinna być T lub N. Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
|? ~('TN'*MG.SL)
|| exec('add_kom','#message',_ln+'Wartość pola SL powinna być T lub N. Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
|? ~('DFLŚE'*(1+MG.TYP))
|| exec('add_kom','#message',_ln+'Wartość pola TYP powinna być D,F,L,Ś lub E. Rekordu nie dodano.'@
    ,15,'OKREŚLONE WARTOŚCI'@)
|? MG.SL='T' & __oznlok=''
|| exec('add_kom','#message',_ln+'Brak wartości pola DLOK (pole wymagane dla magazynu z zastosowaniem wymiarów). '@
       +'Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? MG.SL='T' & exec('FindInSet','#table','EANL','KOD',__oznlok,__oznlok)<>null
|| exec('add_kom','#message',_ln+'Podana wartość pola DLOK: %1 istnieje już w systemie. Rekordu nie dodano.'@
    [__oznlok],15,'OKREŚLONE WARTOŚCI'@)
|? exec('FindInSet','#table','ODDZ','KOD',MG.ODDZ)=null
|| exec('add_kom','#message',_ln+'Brak Oddziału o kodzie: %1. Rekordu nie dodano.'@[MG.ODDZ],15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ref:=null;
   MG.cntx_psh();
   MG.index('MAGAZYNY');
   MG.prefix(MG.SYM,MG.SYM);
   {? MG.first()
   || exec('add_kom','#message',_ln+'Istnieje już definicja magazynu: %1. Rekordu nie dodano.'@[MG.SYM]
       ,184,'JUŻ JEST W BAZIE'@);
      _ref:=MG.ref();
      0
   ?};
   MG.cntx_pop();
   {? _ref=null() & MG.IL='T'
   || MG.TYP:='DOSTAWY';
      MG.KSG:='N';
      MG.SKL:='N';
      MG.SKL_WAL:=null()
   || MG.IL:='N'
   ?};
   {? _ref=null
   || MG.prefix();
      {? MG.add(1)
      ||
::       dodanie domyslnej lokalizacji
         {? MG.SL='T'
         || MG.EANL:=exec('dlok_mag','edi_form',__oznlok);
            MG.put(1);
            _ok:=MG.EANL<>null
         || MG.EANL:=null();
            MG.put(1);
            _ok:=1
         ?};
         {? _ok
         || exec('add_kom','#message','Dodano definicję magazynu: %1.'@[MG.SYM],38,'ZAPISANE REKORDY'@)
         || MG.del();
            exec('add_kom','#message',_ln+'Nie dodano definicji magazynu: %1 (błąd dodania domyślnej lokalizacji).'@
             [MG.SYM],81,'INNE BŁĘDY'@)
         ?}
      || exec('add_kom','#message',_ln+'Nie dodano definicji magazynu: %1.'@[MG.SYM],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\beg_bomg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Deklaracja zmiennych komunikatu
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------

VAR_DEL.delete('__nagbo','__n_p','__datbo','__rok','__mc','__mask');
__nagbo:=null;
__n_p:=0;
__datbo:=date();
~~


\end_bomg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Deklaracja zmiennych komunikatu
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------

VAR_DEL.delete('__nagbo','__n_p','__datbo','__rok','__mc','__mask');
1


\ini_bomg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Określenie maski i okresu w imporcie BO, przywrócenie maski i okresu po imporcie BO
::   WE: _a=1 Określanie, _a=0 Przywracanie
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
__PARSES.setEnv('LMG_MAG_DAPZ');
exec('init','lmg');
{? _a
||
   {? __datbo=date(0,0,0) || __datbo:=date() ?};
   __rok:=ST.AR;
   __mc:=ST.AM;
   __mask:=ND.name()+3;
   _oddz:={? ST.ODDZ<>'' || ST.ODDZ || 1+__mask ?};
   _maskbo:=ST.ODDZ+($(__datbo~1)+2);
   ND.use('nagdo'+_maskbo);
   DK.use('dokma'+_maskbo)
||
   ND.use('nagdo'+__mask);
   DK.use('dokma'+__mask);
   ST.AR:=__rok;
   ST.AM:=__mc
?};
1


\bl_bomg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Wartosc poczatkowa zmiennych
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------

{? __n_p=1
|| ND.blank();
   ND.TYP:=exec('FindInSet','#table','TYPYDOK','TYP','BO','BO');
   POM.TAB:='ND';
   POM.TYPDOK:=ND.TYP().KOD
|? __n_p=2
|| ND.cntx_psh();
   ND.clear();
   ND.seek(__nagbo);
   DK.blank();
   DK.N:=__nagbo;
   ND.cntx_pop()
?};
~~


\bo_mag_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów BO  - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=ND,      type=_ND,  name=Dokument BO,  required=N
::# kind=WY,   symbol=ND,      type=_ND,  name=Dokument BO,  required=N
{? ~exec('ctrlODDZ','edi_form') || return(0) ?};
{? _a='ports'
|| exec('ports','#b_port','edi_form','bo_mag_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\bo_mag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki BO
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------

_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? __n_p=1
|| {? ND.MAG=null
   || exec('add_kom','#message',_ln+'Brak wartości pola KTM_MG (Magazyn). Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@);
      __nagbo:=null
   |? ND.D=date(0,0,0)
   || exec('add_kom','#message',_ln+'Brak wartości pola DATA. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@);
      __nagbo:=null
   |? ND.TYP=null
   || exec('add_kom','#message',_ln+'Brak definicji dokumentu typu BO. Rekordu nie dodano.'@,81,'INNE BŁĘDY'@);
      __nagbo:=null
   |? ~(ND.D>=date(ST.AR,ST.AM,1) & ND.D<=date(ST.AR,ST.AM,0))
   || exec('add_kom','#message',_ln+'Data dokumenty musi być z aktywnego okresu (%1). '@[form(date(ST.AR,ST.AM,1),,8)]+
       'Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@);
      __nagbo:=null
   || ST.MAG:=ND.MAG;
      ND.NR:=
      {? ND.add(1)
      || exec('add_kom','#message','Dodano nagłówek dokumentu BO dla magazynu: %1.'@[ND.MAG().SYM]
          ,38,'ZAPISANE REKORDY'@);
         __nagbo:=ND.ref()
      || exec('add_kom','#message',_ln+'Nie dodano nagłówka dokumentu BO dla magazynu: %1.'@[ND.MAG().SYM]
          ,81,'INNE BŁĘDY'@);
         __nagbo:=null
      ?}
   ?}
|? __n_p=2
|| {? DK.N=null
   || exec('add_kom','#message',_ln+'Brak nagłówka dokumentu. Rekordu nie dodano.'@,81,'INNE BŁĘDY'@)
   |? DK.P<0
   || exec('add_kom','#message',_ln+'Wartość pola POZ powinna być większa od zera. Rekordu nie dodano.'@
       ,15,'OKREŚLONE WARTOŚCI'@)
   |? DK.M=null
   || exec('add_kom','#message',_ln+'Brak wartości pola KTM_MG (Indeks materiałowy). Rekordu nie dodano.'@
       ,8,'BRAK WARTOŚCI'@)
   |? DK.M().RODZ='U'
   || exec('add_kom','#message',_ln+'Na bilansie otwarcia nie mogą się znajdować usługi. Rekordu nie dodano.'@
       ,15,'OKREŚLONE WARTOŚCI')
   |? DK.IL<=0
   || exec('add_kom','#message',_ln+'Wartość pola IL powinna być większa od zera. Rekordu nie dodano.'@
       ,15,'OKREŚLONE WARTOŚCI'@)
   |? DK.DOST>DK.N().D
   || exec('add_kom','#message',_ln+'Wartość pola Data dostawy nie może być większa niż Data dokumentu. '@+
      'Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI')
   ||
::    sprawdzenie istnienia rekordu pod katem unikalnosci
      _ref:=null;
      DK.cntx_psh();
      DK.index('DOKMAG');
      DK.prefix(DK.N,DK.P);
      {? DK.first()
      || exec('add_kom','#message',_ln+'Istnieje już pozycja dokumentu BO: %1. Rekordu nie dodano.'@[$DK.P]
          ,184,'JUŻ JEST W BAZIE'@);
         _ref:=DK.ref();
         0
      ?};
      DK.cntx_pop();

      _ref:=null;
      {? _ref=null
      || DK.JM:=DK.M().J;
         {? DK.N().MAG().IL='T' || DK.C:=0; DK.CWAL:=0 ?};
         exec('dk_sv','magdok_poz');
         exec('war_mag','magdok_poz');
         DK.KH:=DK.N().KH;
         DK.KH_ODB:=DK.N().KH_ODB;
         DK.prefix();
         {? DK.add(1)
         || exec('add_kom','#message','Dodano pozycję BO: %1.'@[$DK.P],38,'ZAPISANE REKORDY'@)
         || exec('add_kom','#message',_ln+'Nie dodano pozycji BO: %1.'@[$DK.P],81,'INNE BŁĘDY'@)
         ?}
      ?}
   ?}
|| exec('add_kom','#message',_ln+'Nie dodano dodatkowego pozycji BO. Niepoprawny numer pozycji.'@
    ,81,'INNE BŁĘDY'@)
?};
~~


\kodcn_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów CN  - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=CN,      type=_CN,  name=Kody CN,  required=N
::# kind=WY,   symbol=CN,      type=_CN,  name=Kody CN,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','kodcn_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\kodcn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki CN
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------

_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? CN.KOD=''
|| exec('add_kom','#message',_ln+'Brak wartości pola KOD. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? CN.OPIS=''
|| exec('add_kom','#message',_ln+'Brak wartości pola OPIS. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? ~((#(CN.KOD+'1'))>1)
|| exec('add_kom','#message',_ln+'Kod CN może zawierać tylko cyfry (%1). Rekordu nie dodano.'@[CN.KOD]
    ,15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ref:=null;
   CN.cntx_psh();
   CN.index('KOD');
   CN.prefix(CN.KOD,CN.KOD);
   {? CN.first()
   || exec('add_kom','#message',_ln+'Istnieje już kod CN: %1. Rekordu nie dodano.'@[CN.KOD],184,'JUŻ JEST W BAZIE'@);
      _ref:=CN.ref();
      0
   ?};
   CN.cntx_pop();

   {? _ref=null
   || CN.prefix();
      {? CN.add(1)
      || exec('add_kom','#message','Dodano kod CN: %1.'@[CN.KOD],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message',_ln+'Nie dodano kodu CN: %1.'@[CN.KOD],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\eanl_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Mechanizm importów EANL  - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=EANL,      type=_EANL,  name=Lokalizacje w magazynach,  required=N
::# kind=WY,   symbol=EANL,      type=_EANL,  name=lokalizacje w magazynach,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','eanl_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\eanl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Dodanie pozycji kartoteki EANL
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? EANL.MG=null
|| exec('add_kom','#message',_ln+'Brak wartości pola MAG. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? EANL.MG().SL='N'
|| exec('add_kom','#message',_ln+'Magazyn %1 nie obsługuję lokalizacji. Rekordu nie dodano.'@[EANL.MG().SYM]
    ,15,'OKREŚLONE WARTOŚCI'@)
|? EANL.KOD=''
|| exec('add_kom','#message',_ln+'Brak wartości pola KOD. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? {? EANL.MG().MWS='T' || EANL.DOK<>'T' & EANL.DOK<>'N' || EANL.DOK:='T'; 0 ?}
|| exec('add_kom','#message',_ln+'Dostępne wartości dla pola TYP: T, N. Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
|? EANL.MG().MWS='T' & ~exec('sprkeanl','magdok_wymiary',EANL.KOD,EANL.DOK)
|| exec('add_kom','#message',_ln+'Niepoprawna struktura kodu lokalizacji dla magazynu typu MWS. Rekordu nie dodano.'@
    ,15,'OKREŚLONE WARTOŚCI'@)
|? EANL.ILPAL<0
|| exec('add_kom','#message',_ln+'Wartość pola LPAL powinna być większa lub równa zero. Rekordu nie dodano.'@
    ,15,'OKREŚLONE WARTOŚCI'@)
|? EANL.SZER<0
|| exec('add_kom','#message',_ln+'Wartość pola SZER powinna być większa lub równa zero. Rekordu nie dodano.'@
    ,15,'OKREŚLONE WARTOŚCI'@)
|? EANL.DLUG<0
|| exec('add_kom','#message',_ln+'Wartość pola DLUG powinna być większa lub równa zero. Rekordu nie dodano.'@
    ,15,'OKREŚLONE WARTOŚCI'@)
|? EANL.WYS<0
|| exec('add_kom','#message',_ln+'Wartość pola WYS powinna być większa lub równa zero. Rekordu nie dodano.'@
    ,15,'OKREŚLONE WARTOŚCI'@)
|? EANL.MASA<0
|| exec('add_kom','#message',_ln+'Wartość pola MASA powinna być większa lub równa zero. Rekordu nie dodano.'@
    ,15,'OKREŚLONE WARTOŚCI'@)
|? ~exec('unik_ean','kody_kresk','EANL',EANL.EAN,null)
|| exec('add_kom','#message',_ln+'Kod kreskowy wykorzystywany w systemie (pole KODK: %1). '@[EANL.EAN]+
    'Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ref:=null;
   EANL.cntx_psh();
   EANL.index('KOD');
   EANL.prefix(EANL.KOD,EANL.KOD);
   {? EANL.first()
   || exec('add_kom','#message',_ln+'Istnieje już lokalizacja o kodzie %1. Rekordu nie dodano.'@[EANL.KOD],184
              ,'JUŻ JEST W BAZIE'@);
      _ref:=EANL.ref()
   ?};
   EANL.cntx_pop();

   {? _ref=null
   || {? EANL.MG().MWS='T' & EANL.EAN=''
      || EANL.EAN:=(2+EANL.KOD)+(2+(3-EANL.KOD))+(2+(6-EANL.KOD))+(2+(9-EANL.KOD))+($EANL.MG().ref()+2)
      ?};
      EANL.prefix();
      {? EANL.add(1)
      || exec('add_kom','#message','Dodano lokalizację o kodzie: %1.'@[EANL.KOD],38
          ,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message',_ln+'Nie dodano lokalizacji o kodzie: %1.'@[EANL.KOD],81
          ,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\ctrlODDZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Kontrola do uprawnień do oddziału i czy jest ustawiony
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_oddz:=__PARSES.getVal('OddzialLogProd').KOD;
_refo:={? _oddz<>'' || exec('FindInSet','#table','ODDZ','KOD2',_oddz,_oddz) || null() ?};
{? _oddz<>'' & _refo<>null()
|| {? ~exec('usr_upr','b_perm','ODDZ',_refo,OPERATOR.USER)
   || FUN.info('Brak uprawnień do oddziału %1.\Import niemożliwy.'@[exec('record','#to_string',PARSES.ODDZ)]);

      _wyn:=0
   || ST.ODDZ_KOD:=ST.ODDZ:=_oddz;
      ST.ODDZ_REF:=_refo
   ?}
|| FUN.info('Nieustawiono oddziału w parametrach pracy.\nImport niemożliwy.'@);
   _wyn:=0

?};
_wyn


\ZC_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu umów cywilnoprawnych - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=ZC,      type=_ZC,    name=Umowy cywilnoprawne,    required=N
::# kind=WY,   symbol=ZC,      type=_ZC,    name=Umowy cywilnoprawne,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','ZC_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\RH_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu nagłówków list płac - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=RH,      type=_RH,    name=Rachunki do umów cywilnoprawnych,    required=N
::# kind=WY,   symbol=RH,      type=_RH,    name=Rachunki do umów cywilnoprawnych,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','RH_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\P_H_H_UM_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Mechanizm importu współpracowników - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=P,      type=_P,    name=Współpracownicy,    required=N
::# kind=WY,   symbol=P,      type=_P,    name=Współpracownicy,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','P_H_H_UM_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\pal_dok_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Mechanizm importów faktur paliwowych - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=DOK,      type=_DOK,    name=Dokument księgowy,    required=N
::# kind=WY,   symbol=DOK,      type=_DOK,    name=Dokument księgowy,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','pal_dok_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\pal_obg_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Mechanizm importów faktur paliwowych - formuła główna, wersja tworząca faktury w obiegu
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=EDOKUM,      type=_EDOKUM,    name=Faktura w obiegu,    required=N
::# kind=WY,   symbol=EDOKUM,      type=_EDOKUM,    name=Faktura w obiegu,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','pal_obg_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\tel_dok_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Mechanizm importów faktur telekomunikacyjnych - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=DOK,      type=_DOK,    name=Dokument księgowy,    required=N
::# kind=WY,   symbol=DOK,      type=_DOK,    name=Dokument księgowy,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','tel_dok_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\tel_obg_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Mechanizm importów faktur telekomunikacyjnych - formuła główna, wersja tworząca faktury w obiegu
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=EDOKUM,      type=_EDOKUM,    name=Faktura w obiegu,    required=N
::# kind=WY,   symbol=EDOKUM,      type=_EDOKUM,    name=Faktura w obiegu,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','tel_obg_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\bil_zws_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.28]
:: OPIS: Mechanizm importów bilingów telekomunikacyjnych - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=BILINGI,      type=_BILINGI,    name=Biling,    required=N
::# kind=WY,   symbol=BILINGI,      type=_BILINGI,    name=biling,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','bil_zws_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\desadv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: Formułą główna komunikatu ECOD-DESADV v2.9 | Awizo wysyłki (z dnia 2017-01-16)
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
{? _a='ports'
|| exec('FindAndGet','#table',B_PREL,_b,,"
      {? B_PREL.ISTDEF_T='R'
::    Odczyt dokumentu przychodoweg
      || exec('ports','#b_port','edi_form','b_port_nd')
::    Zapis dokumentu rochodowego
      || exec('ports','#b_port','edi_form','b_port_nd')
      ?}")
|? _a='parses'
|| 1
|? _a='setEnv'
|| exec('FindAndGet','#table',B_PREL,_b,,"
      {? B_PREL.ISTDEF_T='R'
::    Odczyt dokumentu przychodowego
      || __PARSES.setEnv('LMG_MAG_DAPZ');
         exec('init','lmg')
::    Zapis dokumentu rozchodowego
      || __PARSES.setEnv('LMG_MAG_DWYD');
         exec('init','lmg')
      ?}");
   ~~
|| ~~
?}


\b_port_nd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: Porty ND - dokument magazynowy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=ND,        type=_ND,      name=Dokument magazynowy,  required=N,    fml_val="NOT_EDITABLE"
::# kind=WY,   symbol=ND,        type=_ND,      name=Dokument magazynowy,  required=N
1


\verify_desadv_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: weryfikacja komunikatow awizo wysyłki (desadv) typu xml
::   WE: _a - numer dokumentu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nrdok:=_a;

_Nag:=XML_N;
_Poz:=XML_P;

_kh:=exec('find_kh','edi_form',_Nag.SEL_GLN);
{? _kh=null
||
:: dodanie informacji do tabeli z komunikatem zwrotnym
   exec('add_kom','#message','Brak kontrahenta o kodzie %1.'@[_Nag.SEL_GLN],2,_nrdok);
   EDI_Z.POMIN:='T'
?};
_tow:=0;
_Poz.prefix(_Nag.TM_STAM);
{? _Poz.first()
||
   {!
   |?
      _mat:=exec('find_m','edi_form',_Poz.LLI_EAN,_kh);
      _tow+=exec('FindAndGet','#table',M,_mat,,"M.RODZ='T'",0);
      _jm:=exec('jm','edi_form','I',_Poz.LLI_UOM);
      {? _mat=null
      ||
         exec('add_kom','#message','Brak materiału o kodzie %1.'@[_Poz.LLI_EAN],2,_nrdok);
         EDI_Z.POMIN:='T'
      |? _jm=null()
      ||
         exec('add_kom','#message','Pozycja %1 - brak odpowiednika jednostki miary.'@[$_Poz.LLI_LN],2,_nrdok);
         EDI_Z.POMIN:='T'
      |? _jm<>exec('FindAndGet','#table',M,$_mat,,"M.J",null())
      ||
         exec('add_kom','#message','Pozycja %1 - jednostka miary niezgodna z kartoteką materiałową.'@[$_Poz.LLI_LN],2,_nrdok);
         EDI_Z.POMIN:='T'
      ?};
      _Poz.next()
   !}
?};
{? ~_tow
||
   exec('add_kom','#message','Dokument nie ma pozycji towarowych.'@,2,_nrdok);
   EDI_Z.POMIN:='T'

|? _kh & _nrdok<>''
||
   _Chk:=sql('
      select count(ID) COUNT_ID
      from @ND
      where KH=:_a and ID=\':_b\' '
      ,_kh,_Nag.DAH_NR);
   {? _Chk.first() & _Chk.COUNT_ID
   ||
      exec('add_kom','#message','Dokument w systemie już istnieje.'@,2,_nrdok);
      EDI_Z.POMIN:='T'
   ?}
?}


\bl_nd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: dodanie nagłówka dokumentu przychodowego
::   WE: _a - numer dokumentu
::       _b - typ dokumentu przychodowego
::       _c - magazyn
::       _d - data dokumentu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='T' || return(~~) ?};

_nrdok:=_a;
_typydok_t:=_b;
_mg_sym:=_c;
_date:=_d;

:: DRO_TODO_AWI: jeśli jest zamówienie to pobierać z niego magazyn - założenie, że magazyn jest jeden dla całego zamówienia

_typydok:=exec('FindInSet','#table','TYPYDOK','TYP',_typydok_t,_typydok_t);
_mg:=exec('FindInSet','#table','MG','MAGAZYNY',_mg_sym,_mg_sym,,1);
_oddz:=exec('FindAndGet','#table',MG,_mg,,"MG.ODDZ",'');
BEER.NDPOW:=null();
EDI_Z.POMIN:='T';

{? _typydok=null()
||
   exec('add_kom','#message','Brak typu dokumentu %1.'@[_a],4,_nrdok)

|? _mg=null()
||
   exec('add_kom','#message','Brak magazynu %1.'@[_c],4,_nrdok)

|? _oddz=''
||
   exec('add_kom','#message','Nie określono oddziału.'@,4,_nrdok)
||
   POM.TAB:='ND';
   POM.TYPDOK:=exec('FindInSet','#table','TYPYDOK','TYP',_typydok_t,_typydok_t,"TYPYDOK.T",,,'');
   POM.NRT:=exec('FindInSet','#table','TYPYDOK','TYP',_typydok_t,_typydok_t,"TYPYDOK.NRT",,,0);

:: ustawienie środowiska pracy
   __PARSES.setVal('OddzialLogProd',_oddz);
   __PARSES.setVal('Magazyn',_mg);
   _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LMG';
   _args.AR:=_date~1;
   _args.AM:=_date~2;
   __PARSES.setVal('OkresRok',_args);
   {? __PARSES.setEnv('LMG_MAG_DAPZ')
   ||
      ND.clear(); ND.blank();
      _nd:=exec('addnag','magdok_nag',_mg,ST.AR,ST.AM,_typydok,'N',,,,,,,,,,,-1);
      ND.prefix();
      {? _nd & ND.seek(_nd)
      ||
         EDI_Z.POMIN:='N';
         BEER.NDPOW:=_nd
      ?}
   ?}
?};
~~


\add_nd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: aktualizacja nagłówka dokumentu przychodowego
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
||
   ND.NR:=exec('numer_new','numery','PACZKA');
   exec('znak','numery','ND');
   exec('poland_save','jpk_log',0);
   ND.EDI_R:='T';
   ND.put();
:: dodanie informacji do tabeli z komunikatem zwrotnym
   exec('add_kom','#message','Dodano dokument magazynowy: %1'@[ND.SYM],1,ND.SYM);
   EDI_Z.DOK:=BB.refsql(ND.ref()); EDI_Z.SYM:=ND.SYM; EDI_Z.KH:=ND.KH
||
   {? BEER.NDPOW || exec('usun_fak','faktury_nag',0,,0) ?};
   0
?}


\bl_dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: dodanie pozycji dokumentu przychodowego
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
||
   DK.prefix();

   ATR.MJS:='DK';
   exec('ustawprz','magdok_poz');

   BEER.MW:='M';
   exec('ustaw_ww','eurusd',BEER.MW); BEER.LW:={? BEER.WW || 'W' || '' ?};

   BEER.TAB:='DK';

   DK.blank();
   DK.WAL:={? DK.N().WAL<>null || DK.N().WAL || INFO.NAROD ?};
   exec('istatr_nd2dk','magdok_poz');
   DK.KH:=DK.N().KH;
   DK.KH_ODB:=DK.N().KH_ODB;
   DK.add()
?}


\add_dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: aktualizacja pozycji dokumentu przychodowego
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.POMIN='N'
||
   DK.J2:=DK.JM; DK.WS2:=1; DK.IL2:=DK.IL;
   DK.WAR:=(DK.IL*DK.C)$2;
:: wypelnienie stawki VAT jesli DK.M wypelnione i brak stawki
   {? DK.M<>null & DK.SV=null
   || exec('dk_sv','magdok_poz')
   ?};

   {? DK.put()
   ||
      exec('inf_dod','fakso',0,5+DK.name())
   ?}
?}


\end_nd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: zakonczenie dokumentu przychodowego
::   WE: _a - numer zamówienia kupującego
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nrdok:={? var_pres('_a')=type_of('') || _a || '' ?};

_nd:=BEER.NDPOW;

{? _nd
||
   {? EDI_Z.POMIN='N'
   ||
      EDI_Z.SYM:=ND.SYM; EDI_Z.KH:=ND.KH;
::    aktualizacja wartości dokumentu
      exec('dk_sum','magdok_wspolne',_nd);
::    wygenerowanie realizacji zamówienia
      _kh:=ND.KH;
      {? _kh & _nrdok<>''
      ||
         _Zd_nag:=sql('
            select ZD_NAG.REFERENCE REF
            from @ZD_NAG
            where KH=:_a and SYM=\':_b\' '
            ,_kh,_nrdok);
         {? _Zd_nag.first() & ~_Zd_nag.next()
         ||
            _zd_nag:=exec('FindAndGet','#table',ZD_NAG,_Zd_nag.REF,,,null());
            {? _zd_nag
            ||
               VAR_DEL.delete('__pozydk');
               __pozydk:=tab_tmp(3
                  ,'SQL','STRING[16]',''
                  ,'ILE','REAL',''
                  ,'ILP','REAL','');
               do();
               exec('reawgzam','zamdst_rea',_zd_nag,$_nd,_zd_nag);
               end()
            ?}
         ?}
      ?};
      1

   |? EDI_Z.POMIN='T'
   ||
      exec('n_usun','magdok_nag',0);
      0
   ?}
?}


\isOrderNd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: Sprawdza czy jedno zamowienie do dokumentu rozchodowego
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_Order:=exec('orderNd','edi_form');
_loop:=_Order.first();
_zam_kl:=_Order.ZAM_KL;
{!
|? _loop
|!
   _wyn:=_zam_kl=_Order.ZAM_KL;
   _loop:=_wyn & _Order.next()
!};
_wyn


\isLineOrderNd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: Sprawdza czy wiele zamowien do dokumentu rozchodowego
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? ~exec('isOrderNd','edi_form')
||
   _Order:=exec('orderNd','edi_form');
   _loop:=_Order.first();
   _poz:=_Order.P;
   _zam_kl:=_Order.ZAM_KL;
   {!
   |? _loop
   |!
      {? _poz<>_Order.P || _poz:=_Order.P; _zam_kl:=_Order.ZAM_KL ?};
      _wyn:=_zam_kl=_Order.ZAM_KL;
      _loop:=_wyn & _Order.next()
   !}
?};
_wyn


\orderNd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: Zwraca tabele pozycji dokumentu rozchodowego i odpowiadajacych im zamowien
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__Order');
_wyn:=__Order:=tab_tmp(1
   ,'P'        ,'INTEGER'     ,'Pozycja'
   ,'ZAM_KL'   ,'STRING[50]'  ,'Nr zamówienia (kupującego)'
   ,'SYM'      ,'STRING[20]'  ,'Nr zamówienia (dostawcy)'
   ,'ZAM_KL_D' ,'DATE'        ,'Data zamówienia (kupującego)'
   ,'DP'       ,'DATE'        ,'Data zamówienia (dostawcy)'
   ,'ZKP_POZ'  ,'INTEGER'     ,'Pozycja zamówienia'
   ,'ZKP_ILZ'  ,'REAL'        ,'Ilość zamówiona');

DK.cntx_psh();
ZK_RN.cntx_psh();
ZK_N.cntx_psh();
DK.use('dokma'+ST.ODDZ+(($OKR.ROK)+2));
DK.index('DOKMAG');
DK.prefix(ND.ref());
_loop:=DK.first();
{!
|? _loop
|!
   {? DK.ZAM_RN<>'' & DK.ZAM_RP<>''
   ||
      __Order.blank();
      __Order.P:=DK.P;
      exec('FindAndGet','#table',ZK_RN,DK.ZAM_RN,,"
         exec('FindAndGet','#table',ZK_N,ZK_RN.N,,\"
            __Order.ZAM_KL:=ZK_N.ZAM_KL;
            __Order.SYM:=ZK_N.SYM;
            __Order.ZAM_KL_D:=
            __Order.DP:=ZK_N.DP
            \")
         ");
      exec('FindAndGet','#table',ZK_RP,DK.ZAM_RP,,"
         exec('FindAndGet','#table',ZK_P,ZK_RP.P,,\"
            __Order.ZKP_POZ:=ZK_P.POZ;
            __Order.ZKP_ILZ:=ZK_P.ILZ
            \")
         ");
      __Order.add()
   ?};
   _loop:=DK.next()
!};
ZK_N.cntx_pop();
ZK_RN.cntx_pop();
DK.cntx_pop();

_wyn


\orderFldNd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: Zwrca wartość pola tabeli __Order
::   WE: _a - [N]aglowek, [P]ozycja
::       _b - Jesli _a='P' numer pozycjl
::       _c - akronim pola
::   WY: __Order.[_c]
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? _a='N' || {? __Order.first() || _wyn:=($('__Order.'+_c))() ?}
|? _a='P' || {? __Order.find_key(_b) || _wyn:=($('__Order.'+_c))() ?}
?};
_wyn


\inv_edok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [19.22]
:: OPIS: Formuła główna komunikatów PEF30 dla dokumentu w obiegu.
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
{? _a='ports'
|| exec('FindAndGet','#table',B_PREL,_b,,"exec('ports','#b_port','edi_form','b_port_edok')")
|? _a='parses'
|| 1
|? _a='setEnv'
|| exec('FindAndGet','#table',B_PREL,_b,,"__PARSES.setEnv('OBG_FZO_DARK'); exec('init','obg')");
   ~~
|| ~~
?}


\inv_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [19.22]
:: OPIS: Formuła główna komunikatów PEF30 dla dokumentu księgowego.
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
{? _a='ports'
|| exec('FindAndGet','#table',B_PREL,_b,,"exec('ports','#b_port','edi_form','b_port_dok')")
|? _a='parses'
|| 1
|? _a='setEnv'
|| exec('FindAndGet','#table',B_PREL,_b,,"__PARSES.setEnv('FKS_DKS_DARK'); exec('init','fks')");
   ~~
|| ~~
?}


\b_port_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Porty FAKS - dokument sprzedaży
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=DOK,      type=_DOK,    name=Dokument księgowy,   required=N,    fml_val="NOT_EDITABLE"
::# kind=WY,   symbol=DOK,      type=_DOK,    name=Dokument księgowy,   required=N
1


\b_port_edok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Porty FAKS - dokument sprzedaży
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=EDOKUM,      type=_EDOKUM,    name=Dokument w obiegu,   required=N,    fml_val="NOT_EDITABLE"
::# kind=WY,   symbol=EDOKUM,      type=_EDOKUM,    name=Dokument w obiegu,   required=N
1


\odpg_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Mechanizm importów ODPG - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=ODPG,      type=_ODPG,  name=Grupa odpadów,  required=N
::# kind=WY,   symbol=ODPG,      type=_ODPG,  name=Grupa odpadów,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','odpg_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\odpg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Dodanie pozycji kartoteki ODPG
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? ODPG.KOD=''
|| exec('add_kom','#message',_ln+'Brak wartości pola KOD. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ref:=null;
   ODPG.cntx_psh();
   ODPG.index('ODPG');
   ODPG.prefix(ODPG.KOD,);
   {? ODPG.first()
   || exec('add_kom','#message',_ln+'Istnieje już definicja grupy odpadów: %1. Rekordu nie dodano.'@[ODPG.KOD]
       ,184,'JUŻ JEST W BAZIE'@);
      _ref:=ODPG.ref();
      0
   ?};
   ODPG.cntx_pop();

   {? _ref=null
   || ODPG.prefix();
      {? ODPG.add(1)
      || exec('add_kom','#message','Dodano definicję grupy odpadów: %1.'@[ODPG.KOD],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message',_ln+'Nie dodano definicji grupy odpadów: %1.'@[ODPG.KOD],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\odpp_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Mechanizm importów ODPP - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=ODPP,      type=_ODPP,  name=Podgrupa odpadów,  required=N
::# kind=WY,   symbol=ODPP,      type=_ODPP,  name=Podgrupa odpadów,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','odpp_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\odpp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Dodanie pozycji kartoteki ODPG
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? ODPP.KOD=''
|| exec('add_kom','#message',_ln+'Brak wartości pola KOD. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? ODPP.ODPG=null()
|| exec('add_kom','#message',_ln+'Nie znaleziono grupy odpadów. Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ref:=null;
   ODPP.cntx_psh();
   ODPP.index('ODPP');
   ODPP.prefix(ODPP.ODPG,ODPP.KOD,);
   {? ODPP.first()
   || exec('add_kom','#message'
       ,_ln+'Istnieje już definicja podgrupy odpadów: %1 (grupa %2). Rekordu nie dodano.'@[ODPP.KOD,ODPP.ODPG().KOD]
       ,184,'JUŻ JEST W BAZIE'@);
      _ref:=ODPP.ref();
      0
   ?};
   ODPP.cntx_pop();

   {? _ref=null
   || ODPP.prefix();
      {? ODPP.add(1)
      || exec('add_kom','#message'
          ,'Dodano definicję podgrupy odpadów: %1 (grupa %2).'@[ODPP.KOD,ODPP.ODPG().KOD],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message'
          ,_ln+'Nie dodano definicji podgrupy odpadów: %1 (grupa %2).'@[ODPP.KOD,ODPP.ODPG().KOD],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\odp_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Mechanizm importów ODP - formuła główna
::   WE: _a - instrukacja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=ODP,      type=_ODP,  name=Odpad,  required=N
::# kind=WY,   symbol=ODP,      type=_ODP,  name=Odpad,  required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','odp_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\odp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Dodanie pozycji kartoteki ODPG
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ln:='L. '+form(__nrlkom,6,0,'99')+' ';
{? ODP.NB=''   || ODP.NB:='N' ?};
{? ODP.BIOD='' || ODP.BIOD:='N' ?};
{? ODP.KOD=''
|| exec('add_kom','#message',_ln+'Brak wartości pola KOD. Rekordu nie dodano.'@,8,'BRAK WARTOŚCI'@)
|? ~(';TN'*ODP.NB)
|| exec('add_kom','#message'
    ,_ln+'Nieprawidłowa wartość pola NB (wymagane T lub N). Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
|? ~(';TN'*ODP.BIOD)
|| exec('add_kom','#message'
    ,_ln+'Nieprawidłowa wartość pola BIOD (wymagane T lub N). Rekordu nie dodano.'@,15,'OKREŚLONE WARTOŚCI'@)
||
:: sprawdzenie istnienia rekordu pod katem unikalnosci
   _ref:=null;
   ODP.cntx_psh();
   ODP.index('KOD');
   ODP.prefix(ODP.KOD,ODP.KOD,ODP.PODZ,);
   {? ODP.first()
   || exec('add_kom','#message'
       ,_ln+'Istnieje już definicja odpadu: %1 (podział %2). Rekordu nie dodano.'@[ODP.KOD,ODP.PODZ]
       ,184,'JUŻ JEST W BAZIE'@);
      _ref:=ODP.ref();
      0
   ?};
   ODP.cntx_pop();

   {? _ref=null
   || ODP.prefix();
      {? ODP.add(1)
      || exec('add_kom','#message'
          ,'Dodano definicję odpadu: %1 (podział %2).'@[ODP.KOD,ODP.PODZ],38,'ZAPISANE REKORDY'@)
      || exec('add_kom','#message'
          ,_ln+'Nie dodano definicji odpadu: %1 (podział %2).'@[ODP.KOD,ODP.PODZ],81,'INNE BŁĘDY'@)
      ?}
   ?}
?};
~~


\ini_bomg_eksp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RF [17.00]
:: OPIS: Określenie maski i okresu w imporcie BO, przywrócenie maski i okresu po imporcie BO
::   WE: _a=1 Określanie, _a=0 Przywracanie
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? _a
||
   __PARSES.setEnv('LMG_MAG_DAPZ');
   exec('init','lmg');
   {? __datbo=date(0,0,0) || __datbo:=date() ?};
   __rok:=ST.AR;
   __mc:=ST.AM;
   __mask:=ND.name()+3;
   _oddz:={? ST.ODDZ<>'' || ST.ODDZ || 1+__mask ?};
   {? _oddz<>'_'
   ||
      _maskbo:=_oddz+($(__datbo~1)+2);
      ND.use('nagdo'+_maskbo);
      DK.use('dokma'+_maskbo);
      DK.first()
   ?}
||
   ND.use('nagdo'+__mask);
   DK.use('dokma'+__mask);
   ST.AR:=__rok;
   ST.AM:=__mc
?};
1


\PPK_UCZ_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Mechanizm importu uczestników PPK - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=PPK_UCZ,      type=_PPK_UCZ,    name=Uczestnik PPK,    required=N
::# kind=WY,   symbol=PPK_UCZ,      type=_PPK_UCZ,    name=Uczestnik PPK,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','PPK_UCZ_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\PPK_WNU_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Mechanizm importu deklaracji/wniosków związanych z PPK - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=PPK_WNU,      type=_PPK_WNU,    name=Deklaracja/wniosek PPK,    required=N
::# kind=WY,   symbol=PPK_WNU,      type=_PPK_WNU,    name=Deklaracja/wniosek PPK,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','PPK_WNU_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\PPK_PWP_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Mechanizm importu procentów wpłat związanych z PPK - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=PPK_PWP,      type=_PPK_PWP,    name=Procent wpłaty na PPK,    required=N
::# kind=WY,   symbol=PPK_PWP,      type=_PPK_PWP,    name=Procent wpłaty na PPK,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','PPK_PWP_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\OS_ZWPOD_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IGPTASZE
:: OPIS: Mechanizm importu oświadczeń do zwolnienia przychodu od opodatkowania - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=OS_ZWPOD,      type=_OS_ZWPOD,    name=Oświadczenia do zwolnienia przychodu od opodatkowania,    required=N
::# kind=WY,   symbol=OS_ZWPOD,      type=_OS_ZWPOD,    name=Oświadczenia do zwolnienia przychodu od opodatkowania,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','OS_ZWPOD_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\OS_ZWZAL_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IGPTASZE
:: OPIS: Mechanizm importu wniosków - zwolniony podatek - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=OS_ZWZAL,      type=_OS_ZWZAL,    name=Wnioski - zwolniony podatek,    required=N
::# kind=WY,   symbol=OS_ZWZAL,      type=_OS_ZWZAL,    name=Wnioski - zwolniony podatek,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','OS_ZWZAL_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\P_IPOD_Z_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IGPTASZE
:: OPIS: Mechanizm importu informacji podatkowych zleceniobiorców - formuła główna
::   WE: _a - instrukacja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=P_IPOD,      type=_P_IPOD,    name=Informacje podatkowe,    required=N
::# kind=WY,   symbol=P_IPOD,      type=_P_IPOD,    name=Informacje podatkowe,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','P_IPOD_Z_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\ZC_INFO_x2m_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Mechanizm importu - Informacje ubezpieczeniowe umowy/zlecenia - formuła główna
::   WE: _a - instrukcja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=ZC_INFO,      type=_ZC_INFO,    name=Informacje ubezpieczeniowe umowy/zlecenia,    required=N
::# kind=WY,   symbol=ZC_INFO,      type=_ZC_INFO,    name=Informacje ubezpieczeniowe umowy/zlecenia,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','ZC_INFO_x2m_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\KZ_x2m_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.14]
:: OPIS: Mechanizm importu - Karta zarobkowa - formuła główna
::   WE: _a - instrukcja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=KZ,      type=_KZ,    name=Karta zarobkowa,    required=N
::# kind=WY,   symbol=KZ,      type=_KZ,    name=Karta zarobkowa,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','KZ_x2m_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\KP_x2m_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Mechanizm importu - Karta podatkowa - formuła główna
::   WE: _a - instrukcja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=KP,      type=_KP,    name=Karta podatkowa,    required=N
::# kind=WY,   symbol=KP,      type=_KP,    name=Karta podatkowa,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','KP_x2m_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\DS_x2m_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Mechanizm importu - Dyscyplina pracy - formuła główna
::   WE: _a - instrukcja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=DS,      type=_DS,    name=Dyscyplina pracy,    required=N
::# kind=WY,   symbol=DS,      type=_DS,    name=Dyscyplina pracy,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','DS_x2m_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\konta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: Uzupełnienie słowników konta opartych o wzorzec kontrahent
::----------------------------------------------------------------------------------------------------------------------
_synt:=SSTALE.AR().SYNT;
_sep:=SSTALE.AR().SEP;
_ks:=_synt+POZ.KON;
KS.cntx_psh();
KS.index('SYM'); KS.prefix(SSTALE.AR);
{? KS.find_key(_ks,)
|| BUD.cntx_psh();
   BUD.index('KS');
   BUD.prefix(KS.ref());
   {? BUD.first()
   || _kon:=_synt-POZ.KON;
      SLUAPPL.cntx_psh();
      SLU.cntx_psh();
      RS.cntx_psh();
      RS.index('RS'); RS.prefix();
      SLO.cntx_psh();
      SLO.index('SL'); SLO.prefix();
      {!
      |? {? _sep<>',' || _kon:=1-_kon ?};
         {? -BUD.SLU().SLU().WZ<>'' & RS.find_key(SLU.WZ,) & RS.TAB='KH'
         || _kod:=SLU.DL+_kon;
            {? ~SLO.find_key(SLU.ref(),_kod,)
            || KH.index('KOD'); KH.prefix(2);
               KH.blank(1);
               ($('KH.'+RS.KOD+':=_a'))(_kod);
               {? KH.find_rec()
               || SLO.blank(1);
                  SLO.SLU:=SLU.ref();
                  SLO.KOD:=_kod;
                  SLO.TR:=($('KH.'+RS.TR))();
                  SLO.add()
               ?}
            ?}
         ?};
         _kon:=BUD.SLU().SLU().DL-_kon;
         BUD.next()
      !};
      SLO.cntx_pop();
      RS.cntx_pop();
      SLU.cntx_pop();
      SLUAPPL.cntx_pop()
   ?};
   BUD.cntx_pop()
?};
KS.cntx_pop()


\inv_zak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [23.25]
:: OPIS: Formułą główna komunikatu Faktura zakupu RR
::   WE: _a - instrukcja
::       _b - B_PREL.ref()
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
{? _a='ports'
|| exec('FindAndGet','#table',B_PREL,_b,,"
      {? B_PREL.ISTDEF_T='R'
::    Odczyt faktury sprzedaży
      || exec('ports','#b_port','edi_form','b_port_faks')
::    Zapis dokumentu zakupu
      || exec('ports','#b_port','edi_form','b_port_fakz')
      ?}")
|? _a='parses'
|| 1
|? _a='setEnv'
|| exec('FindAndGet','#table',B_PREL,_b,,"
      {? B_PREL.ISTDEF_T='R'
::    Odczyt dokumentu sprzedaży
      || __PARSES.setEnv('LSP_FAK_DRFP');
         exec('init','lzk');
         exec('init_zak','lzk')
::    Zapis dokumentu zakupu
      || __PARSES.setEnv('LZK_ZAK_DZAK');
         exec('init','lsp');
         exec('init_fak','lsp');
         exec('czytaj','#stalesys',,XINFO)
      ?}");
   ~~
|| ~~
?}


\PPSF_ADR_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RN
:: OPIS: Mechanizm importu - Adres świadczenia pracy zdalnej - formuła główna
::   WE: _a - instrukcja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=PPSF_ADR,      type=_PPSF_ADR,    name=Adres świadczenia pracy zdalnej,    required=N
::# kind=WY,   symbol=PPSF_ADR,      type=_PPSF_ADR,    name=Adres świadczenia pracy zdalnej,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','PPSF_ADR_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\PPSF_H_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RN
:: OPIS: Mechanizm importu - Praca zdalna stała - formuła główna
::   WE: _a - instrukcja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=PPSF_H,      type=_PPSF_H,    name=Praca zdalna stała,    required=N
::# kind=WY,   symbol=PPSF_H,      type=_PPSF_H,    name=Praca zdalna stała,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','PPSF_H_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\PPSFN_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RN
:: OPIS: Mechanizm importu - Praca poza siedzibą firmy - formuła główna
::   WE: _a - instrukcja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=PPSFN,      type=_PPSFN,    name=Praca poza siedzibą firmy,    required=N
::# kind=WY,   symbol=PPSFN,      type=_PPSFN,    name=Praca poza siedzibą firmy,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','PPSFN_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\PPSF_PO_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RN
:: OPIS: Mechanizm importu - Oświadczenia pracy poza siedzibą - formuła główna
::   WE: _a - instrukcja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=PPSF_PO,      type=_PPSF_PO,    name=Oświadczenia pracy poza siedzibą,    required=N
::# kind=WY,   symbol=PPSF_PO,      type=_PPSF_PO,    name=Oświadczenia pracy poza siedzibą,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','PPSF_PO_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}


\KOT_TEST_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RN
:: OPIS: Mechanizm importu - Kontrola trzeźwości - formuła główna
::   WE: _a - instrukcja
::   WY: _a='ports' - zwraca porty
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=KOT_TEST,      type=_KOT_TEST,    name=Kontrola trzeźwości,    required=N
::# kind=WY,   symbol=KOT_TEST,      type=_KOT_TEST,    name=Kontrola trzeźwości,    required=N
{? _a='ports'
|| exec('ports','#b_port','edi_form','KOT_TEST_main')
|? _a='parses'
|| 1
|? _a='setEnv'
|| ~~
|| ~~
?}

:Sign Version 2.0 jowisz:1045 2024/02/28 10:00:15 2e8033609fd2f8e5c05e60680da17bc2f85688f0d0e7cc477666fd3c5102eb95f54f538dfaebb2074e9f025af0d72d86ac1ccb611d805288bb3b06afbe6a5cbbf95de14e88912a01b049adc68b9783bf77966fdd8f76c14c486442cfef8901e06cc5e728f16ad02bdbe7683ed848ccf6cc8877f5c6d29aba1028e57521264abd
