:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: prc.fml
:: Utworzony: 21.04.2017
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Formuły oraz obszary robocze dziedziny PRC.
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.28]
:: OPIS: Formuła inicjująca dla dziedziny PRC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BPMN.SYM_DOM:='PRC';
exec('czytaj','#stalesys',,KST,KST_PAR,XINFO);

exec('__F_ZATR','object');
exec('__KAL','object');
exec('__HARM','object');
exec('__RUB','object');
exec('__WND','object');
exec('__STALE','object');
exec('FUNKCJE','object');
exec('MASK','object');
exec('KOMM','#object');
exec('dekl_sarray','#array');
exec('PROGRESS','#object');

exec('set_win','kaledit');
A_OKRD.win_edit('RED');
A_OKRP.win_edit('SZUKAJ');
A_SCPP.win_edit('RED');
A_RWN.win_edit('RED');
R_MARG.win_edit('RED');
R_KARHIS.win_edit('RED');

VAR_EDIT.FLAGA:=2;
~~


\prc_har
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Główna formuła obszaru roboczego PRC_HAR - Deklaracje.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('init','prc');
__PERSONEL:=1;
_ref:=null();

_id:='OkresRozliczeniowy_Harmonogramy';
_parSes:=__PARSES.getVal(_id);

{? ~type_of(_parSes)
|| FUN.info('Nie określono parametru sesji: okres rozliczeniowy'@);
   return()
|| _ref:=__PARSES.getVal(_id).REF;
   {? _ref=null()
   || {? __PARSES.editPar(_id)
      || _ref:=__PARSES.getVal(_id).REF
      || return()
      ?}
   ?}
?};

A_OKR.cntx_psh();
A_OKR.clear();
{? A_OKR.seek(_ref)
|| exec('wybierz_okres','okres')
|| FUN.emsg('Okres rozliczeniowy nie został określony.'@);
   A_OKR.cntx_pop();
   return()
?};

:: Ustalenie treści linku i ustawienie domyślnych parametrów pracy
_params:=params_get();
{? type_of(_params)>0 & var_pres('LINK',_params)
|| _link:=_params.LINK
|| _link:=''
?};

UD_TYP.cntx_psh();
UD_SCH.cntx_psh();
P.cntx_psh();
{? exec('domyslny','schemat','PODZORG')
|| H.cntx_psh();
   H_UM.cntx_psh();
   _loop:=1;
   {!
   |? _loop
   |!
::    Zmiana aktywnej zakładki przy uruchamianiu, zależy nam na wszystkich współpracownikach
      {? _link=''
      || _cfg:=exec('prc_har_config','prc')
      || _cfg:=exec('prc_har_config','prc','PRC_ALL')
      ?};
      params_set(
         'cfg',_cfg,
         'link',_link
      );
      H.use('_hist');
      exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));
      P.cntx_psh();
      P.win_edit('RED_P');
      P.win_sel(_cfg.window);
      ($_cfg.prolog)();
      AreaTitle.setTabWin(P,_cfg.window);
      AreaTitle.setTitle();
      _loop:={? _link<>''
             || exec('prcharLinkSelect','prc',_link)
             || P.select()
             ?};
      ($_cfg.epilog)();
      P.cntx_pop();
      P.win_del(_cfg.window);
      obj_del(_cfg)
   !};
   H_UM.cntx_pop();
   H.cntx_pop();
   exec('otworz_h_um','pracownik')
?};
P.cntx_pop();
UD_SCH.cntx_pop();
UD_TYP.cntx_pop();
A_OKR.cntx_pop();
~~


\prc_har_dsk_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła przygotowuje tłumaczenia dla kontrolki prc_har.dsk.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('elements_table','#desktop');
_add:="_a.blank(); _a.ID_SYS:=_b; _a.NAME:=_c; _a.add()";

_add(_TAB,'schCB@panel','Schemat'@);
_add(_TAB,'statusCB@panel','Status'@);
_add(_TAB,'formCB@panel','Forma współpracy'@);
_add(_TAB,'btnA_OKR@panel','Wybierz okres'@);
_add(_TAB,'przyciskRap@panel','Zestawienia i raporty'@);
_add(_TAB,'przyciskGrp@panel','Operacje grupowe'@);

_TAB


\prc_har_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Formuła tworząca interfejs użytkownika dla obszaru roboczego HAR (Harmonogramy) w dziedzinie PRC.
::   WE: [_a] - aktywna zakładka (akronim okienka) [PRC_HAR/PRC_ALL, domyślnie PRC_HAR]
::   WY: tablica elementów nazwanych z konfiguracją.
::----------------------------------------------------------------------------------------------------------------------
_activeTab:={? var_pres('_a')=type_of('') & 'PRC_HAR,PRC_ALL'*_a || _a || 'PRC_HAR' ?};
_inTerm:=
   {? ~exec('interm','#system')
   || exec('pxx_widok_uproszczony','pkd','PRC_HAR')
   || 1
   ?};
_main:='';
_side:='';
_mode:='maximized';
_main_all:='';
_high:=14;
{? ~_inTerm
|| _main:='PRC_HAR';
   _side:='NAW_MIN';
   _main_all:='PRC_ALL';
:  okienko główne obszaru - kontener do wstawiania zakładek
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "  exec('load','#desktop','selektor','prc_har.dsk',,,,,exec('prc_har_dsk_pl','prc'),1);
         params_exec('stdor_bf','pkd','T');
         grp_disp(UD_DEF,'NAW_MIN',1,1);
         {? params_get().link<>''
         || exec('prcharLinkActivate','prc')
         ?};
         1
      ",
:     identyfikator
      'or_prc_har',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdor_oc','pkd')
         ?}
      ",,,
::    rozkład
      'jterm'
   );

:  utwórz selektor schematu jako kontrolkę
   exec('create','#desktop',P,'selektor',_wnd,2);

:  drzewko struktury organizacyjnej
   P.grp_splt(_wnd,,'horizontal','panel');
   P.grp_sel(_wnd,UD_DEF,_side,,
:  po odświeżeniu
      "params_exec('stdor_def_ar','pkd')",
:     położenie i wysokość
      ,,15,
:     przed obsługą
      "params_exec('stdor_def_bs','pkd',_a)",
:     po obsłudze
      "params_exec('stdor_def_as','pkd',_a)",
:     utrwalenie, aktywacja, wypełnienie
      0,0,_mode,
:     identyfikator
      _side
   );

: listy pracowników
   P.grp_splt(_wnd,'panel','vertical','right')
||
   _main:='PRC_HARI';
   _main_all:='PRC_ALLI';
   _wnd:=P.grp_make(,
:  po wyświetleniu
      "  params_exec('stdin_bf','pkd','T');
         1
      ",
:  identyfikator
      'or_prc_har',
:  położenie
      ,,
:  zamknięcie
      "_val:=exec('exit','zws'); {? _val || params_exec('stdin_oc','pkd') ?}"
   )
?};
P.grp_sel(_wnd,P,_main,'Rozliczani w okresie',
:  po odświeżeniu
   "  _ev:=EDIT_VAR.P_LM;
      EDIT_VAR.P_LM:=1;
      params_exec('stdor_p_ar','pkd');
      EDIT_VAR.P_LM:=_ev;
      params_exec('stdor_all_ar','prc');
      _div:=':';
      _wnd:=cur_win(1,1);
      _aid:={? A_OKR.S='Z' | ~__HARM.KW_AUTO || 'W' || '' ?};
      {? exec('interm','#system')
      || _act:='J(I)';
         _aid:='%1%2%3%1'[_act,_aid,_div];
         _div:=''
      ?};
      {? exec('ses_get','xfilter',_wnd).SES=null
      || {? _wnd='PRC_HARI'
         || _aid:='J(W)%1%2J(W)'[_aid,{? _aid*':'=0 || ':' || '' ?}]
         || _aid:='C%1%2C'[_aid,{? _aid*':'=0 || ':' || '' ?}]
         ?}
      ?};
      P.actions_grayed(_wnd ,_aid)
   ",
:  położenie i wysokość
   ,,_high,
:  przed obsługą
   "  _par:=params_get();
      _par.cfg.nav.main:=cur_win(1,1);
      params_exec('stdor_p_bs_har','prc',_a);
      P.f_seek(_par.cfg.extra.REF_HAR)
   ",
:  po obsłudze
   "  _par:=params_get();
      _par.cfg.extra.REF_HAR:=P.ref();
      params_exec('stdor_p_as','pkd',_a)
   ",
:  utrwalenie, aktywacja, wypełnienie
   0,0,_mode,
:  identyfikator
   _main,
:  główne
   {? _main*_activeTab || 1 || 0 ?}
);

P.grp_sel(_wnd,P,_main_all,'Wszyscy',
:  po odświeżeniu
   "  params_exec('stdor_p_ar','pkd');
      params_exec('stdor_all_ar','prc');
      A_OKRP.cntx_psh();
      A_OKRP.index('A_OKRPR');
      A_OKRP.prefix(__HARM.OKR_REF);
      _wnd:=cur_win(1,1);
      _aid:={? P.DZA>A_OKR.DO | (#P.DZ & P.DZ<A_OKR.OD) | A_OKRP.find_key(P.ref())
            || 'D'
            || ''
            ?};
      {? exec('interm','#system')
      || _aid+='J(I)'
      ?};
      A_OKRP.cntx_pop();
      _aid+={? P.GRAFIK='T' || 'A(D)' || 'A(B)' ?};
      {? exec('ses_get','xfilter',_wnd).SES=null
      || {? _wnd='PRC_ALLI'
         || _aid:='J(W)%1%2J(W)'[_aid,{? _aid*':'=0 || ':' || '' ?}]
         || _aid:='C%1%2C'[_aid,{? _aid*':'=0 || ':' || '' ?}]
         ?}
      ?};
      P.actions_grayed(_wnd,_aid)
   ",
:  położenie i wysokość
   ,,_high,
:  przed obsługą
   "  _par:=params_get();
      _par.cfg.nav.main:=cur_win(1,1);
      params_exec('stdor_p_bs_all','prc',_a);
      P.f_seek(_par.cfg.extra.REF_ALL)
   ",
:  po obsłudze
   "  _par:=params_get();
      _par.cfg.extra.REF_ALL:=P.ref();
      params_exec('stdor_p_as','pkd',_a)
   ",
:  utrwalenie, aktywacja, wypełnienie
   0,0,_mode,
:  identyfikator
   _main_all,
:  główne
   {? _main_all*_activeTab || 1 || 0 ?}
);

: obszar zakładek kartotek stowarzyszonych
P.grp_splt(_wnd,,'horizontal','bottom');

: przygotuj konfigurację obszaru roboczego
{? _main*_activeTab
|| _cfg:=exec('pkd_conf','pkd','PRC_HAR',P,_wnd,_main,_side)
|| _cfg:=exec('pkd_conf','pkd','PRC_HAR',P,_wnd,_main_all,_side)
?};
_cfg.extra:=obj_new('REF_HAR','REF_ALL','R_ODP_OK');
_cfg.extra.REF_HAR:=null();
_cfg.extra.REF_ALL:=null();
_cfg.extra.R_ODP_OK:=0;
_cfg.final:='T';

: dołącz kolejne zakładki
exec('prc_conf_dprz','prc',_cfg);
exec('prc_conf_dpsy','prc',_cfg);
exec('prc_conf_druc','prc',_cfg);
exec('prc_conf_dmpr','prc',_cfg);
exec('prc_conf_pkap','prc',_cfg);
exec('prc_conf_dodb','prc',_cfg);
exec('prc_conf_dodo','prc',_cfg);
exec('prc_conf_dnad','prc',_cfg);
exec('ppl_conf_ppsf','ppl',_cfg);
exec('prc_conf_dpok','prc',_cfg);
exec('prc_conf_pmcr','prc',_cfg);
exec('prc_conf_pkor','prc',_cfg);
exec('pkd_conf_r_wzcz','pkd',_cfg);
exec('pkd_conf_n','pkd',_cfg);
exec('pkd_conf_p_kk','pkd',_cfg);
exec('prc_conf_dppn','prc',_cfg);
exec('pkd_conf_ppsf_zds','pkd',_cfg);

: finalizuj konfigurację obszaru
exec('pkd_conf_end','pkd',_cfg);

: konfiguracja
_cfg


\stdor_def_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Po odświeżeniu drzewa struktury w oknie obszaru EZK dziedziny PKD.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
grp_disp(A_OKRP,_par.cfg.nav.main,1,1)


\stdor_all_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Po odświeżeniu okienka nawigatorów i list pracowników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_lm:=exec('last_mod_get','#table',A_OKR);
{? EDIT_VAR.A_OKR_LM=0
|| EDIT_VAR.A_OKR_LM:=_lm
|? EDIT_VAR.A_OKR_LM<>_lm
|| EDIT_VAR.A_OKR_LM:=_lm;
   exec('dsk_set_callback','pkd','okresTXT@panel');
   AreaTitle.setTitle()
?};
~~


\stdor_p_bs_har
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Przed obsługą listy pracowników w oknie obszaru PRC_HAR dziedziny PRC.
::   WE: 0 - wywołana przez grp_disp, nie zero - wywołana przez aktywowanie
::----------------------------------------------------------------------------------------------------------------------
{? ~_a
|| params_exec('x_main_bs','pkd',_a)
?};
_ses:=exec('ses_get','xfilter',cur_win(1,1));

exec('filtruj_p','schemat',
   'PRC',
   P_FILTER.UD_DEF,
   P_FILTER.F_ZATR().KOD,
   params_get().cfg.final,
   P_FILTER.STATUS,
   _ses.JOIN,
::  uwzględnij pracowników z wybranego okresu rozliczeniowego
   'P.REFERENCE in (select A_OKRP.P from A_OKRP where A_OKRP.OKR=\''+$__HARM.OKR_REF+'\' order by 1)'+
   {? _ses.WHERE<>'' || ' and '+_ses.WHERE || '' ?}
);
exec('stdor_p_bs_ext','pkd');

{? _a
|| params_exec('x_main_bs','pkd',_a)
?}


\stdor_p_bs_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą listy pracowników w oknie obszaru PPL_RST dziedziny PPL.
::   WE: 0 - wywołana przez grp_disp, nie zero - wywołana przez aktywowanie
::----------------------------------------------------------------------------------------------------------------------
_ses:=exec('ses_get','xfilter',cur_win(1,1));

exec('filtruj_p','schemat',
   'PRC',
   P_FILTER.UD_DEF,
   P_FILTER.F_ZATR().KOD,
   params_get().cfg.final,
   P_FILTER.STATUS,
   _ses.JOIN,
   _ses.WHERE
);
exec('stdor_p_bs_ext','pkd')


\prc_conf_a_okrp_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Udostępnia miesiące pracownika w okresie rozliczeniowym
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,A_OKRP_M,'A_OKRPM','WER','','','PRC_HAR_1234','PRC_HAR_1234',P)
|| return()
?};

_a.prolog+="A_OKRP_M.cntx_psh();";
_a.epilog+="A_OKRP_M.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Miesiące w okresie'@,"",,,,
   $($_a.bs)(_a.map),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\dsk_set_callback
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Formuła odpowiada za ustawienie wartości wskazanych elementów pulpitu.
::   WE: _a - \
::       ...   > Pełne identyfikatory elementów panelu.
::       _? - /
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_set:="exec('set_value','#desktop','','selektor',_a,_b)";

{! _lp:=1 .. _
|! _el:=_[_lp];
   {? _el='schCB@panel'
   || _set(_el,$P_FILTER.UD_SCH)

   |? _el='statusCB@panel'
   || _set(_el,P_FILTER.STATUS)

   |? _el='formCB@panel'
   || _set(_el,$P_FILTER.F_ZATR)

   |? _el='okresTXT@panel'
   || _set(_el,exec('record','#to_string',__HARM.OKR_REF))
   ?}
!};
win_activate(_par.cfg.nav.main)


\dsk_callback_okres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Obsługa przycisku "Okres okres" w obszarze PRC_HAR.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('sel_okr','okres');
params_set(_par:=params_get());
exec('dsk_set_callback','prc','okresTXT@panel');
AreaTitle.setTitle();

_act:=_par.cfg.nav.main;
_dis:={? _act='PRC_HAR' || 'PRC_ALL' || 'PRC_HAR' ?};
grp_disp(P,_dis,0,0);
win_activate(_act)


\prc_har_akcje_grupowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Główna formuła - Operacje grupowe (harmonogramy).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

:: zachowaj stan
OSOBA.cntx_psh();
P.cntx_psh();

exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DEXP',
   'Plik importu wejść/wyjść z Excel'@,
   'Przygotowanie pliku do importu wejść i wyjść z arkusza Excel'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DIMP',
   'Import wejść/wyjść z Excel'@,
   'Import wejść i wyjść z arkusza Excel'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_IMPO',
   'Wejścia/wyjścia z czytników'@,
   'Import wejść i wyjść z czytników RCP'@,,,
   KST.R_RC<>null()
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DBWW',
   'Błędy danych wejścia/wyjścia'@,
   'Przeglądanie błędów danych wejścia i wyjścia'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DWYK',
   'Wykonanie na podstawie planu'@,
   'Wypełnienie wejść/wyjść wykonania na podstawie przypisanego kalendarza'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DDWE',
   'Wejścia/wyjścia dla współpracowników'@,
   'Wprowadzanie wejść i wyjść dla grupy współpracowników'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DUCP',
   'Usunięcie danych'@,
   'Usunięcie danych z tabel zawierających dane do rozliczenia czasu pracy'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DATD',
   'Aktualizacja tabeli dziennej'@,
   'Ponowny zapis danych do tabeli z informacją o rozliczeniu czasu pracy'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DWKN',
   'Weryfikacja konfliktów nieobecności'@,
   'Weryfikacja konfliktu nieobecności z innymi zapisami w tabelach'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DWZG',
   'Weryfikacja zatwierdzonych godzin'@,
   'Weryfikacja zatwierdzonych godzin dla wszystkich współpracowników'@
);
_acc:=(A_OKR.S='O');
_sym:='RAP_KONTROLNE';
_set.add_grp('Raporty kontrolne'@,_sym);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_RAPK',
   'Nieobecności ad-hoc'@,
   'Przeglądanie nieobecności ad-hoc.'@,,
   "exec('ad_hoc','prc_raportykontrolne')",
   _acc,
   _sym
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_RAPK',
   'Odpracowania do korekty'@,
   'Raport odpracowań do korekty.'@,,
   "exec('odpracowania','prc_raportykontrolne')",
   _acc,
   _sym
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_RAPK',
   'Nadmiary w czasie pracy'@,
   'Raport nadmiarów w czasie pracy.'@,,
   "exec('nadmiary','prc_raportykontrolne')",
   _acc,
   _sym
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_RAPK',
   'Niedobory w czasie pracy'@,
   'Raport niedoborów w czasie pracy.'@,,
   "exec('niedobory','prc_raportykontrolne')",
   _acc,
   _sym
);
_sym:='GRP_OKRES';
_set.add_grp('Przypisanie do okresu'@,_sym);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DPOK',
   'Na podstawie okresu domyślnego'@,
   'Przypisanie współpracowników do okresu na podstawie domyślnego okresu.'@,,
   "exec('domyslny','!prc_grp_dpok')",
   _acc,
   _sym
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DPOK',
   'Z poprzedniego okresu'@,
   'Przypisanie współpracowników do okresu na podstawie poprzedniego okresu.'@,,
   "exec('poprzedni','!prc_grp_dpok')",
   _acc,
   _sym
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DPOK',
   'Na podstawie kalendarza'@,
   'Przypisanie pracowników do okresu na podstawie wzorca kalendarza.'@,,
   "exec('kalendarz','!prc_grp_dpok')",
   _acc,
   _sym
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DPRO',
   'Przypisanie rodzaju okresu'@,
   'Przypisanie rodzaju okresu rozliczeniowego dla grupy współpracowników'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DPSY',
   'Przypisanie systemu czasu pracy'@,
   'Przypisanie systemu czasu pracy dla grupy współpracowników'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_GRUC',
   'Ruchomy czas pracy - grupa'@,
   'Grupowe przypisanie pracowników do ruchomego czasu pracy obowiązującego w firmie'@
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DBRL',
   'Blokada rozliczeń'@,
   'Grupowa blokada rozliczeń pracowników'@
);
_sym:='POZA_SIEDZIBA';
_set.add_grp('Praca poza siedzibą firmy'@,_sym);
exec('xxx_grp_act','personel',
   _set,
   'PPL_GRP_PPSF',
   'Praca poza siedzibą firmy'@,
   'Grupowe wertowanie oraz redagowanie pracy poza siedzibą firmy'@,,,,
   _sym
);
exec('xxx_grp_act','personel',
   _set,
   'PPL_GRP_PPSL',
   'Limity pracy poza siedzibą firmy'@,
   'Grupowe wertowanie oraz redagowanie limitów pracy poza siedzibą firmy'@,,,,
   _sym
);
exec('xxx_grp_act','personel',
   _set,
   'PPL_GRP_PPSW',
   'Wejścia/wyjścia - praca poza siedzibą'@,
   'Generowanie wejść/wyjść dla pracy poza siedzibą firmy'@,,,,
   _sym
);
exec('xxx_grp_act','personel',
   _set,
   'PPL_GRP_PPSW',
   'Wejścia/wyjścia - Portal'@,
   'Generowanie wejść/wyjść dla rejestracji Start/Stop na portalu'@,,
   "exec('StartStop','!ppl_grp_ppsw')",,
   _sym
);
exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DRPN',
   'Godziny pracy nocnej'@,
   'Grupowe wprowadzanie godzin pracy nocnej'@
);

_set.run('Operacje grupowe'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();

exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\prc_har_raporty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Główna formuła - Zestawienia i raporty (harmonogramy).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

:: zachowaj stan tabel
OSOBA.cntx_psh();
P.cntx_psh();

:: Wydruki zestawień czasu pracy
exec('xxx_grp_act','personel',_set,'PRC_CZP_WYDR','Wydruki zestawień czasu pracy'@);

:: Analizy BI dla czasu pracy
exec('xxx_grp_act','personel',_set,'BIQ_PER_PRCA','Analizy BI'@);

_set.run('Zestawienia i raporty'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();

exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\SetChk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Uzupełnienie informacj o utworzonych zbiorach maskowalnych w tabeli R_SPR.
::   WE:
::   WY:
::  OLD: \setchk/sprdane.fml
::       \definiuj/funkcje.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=1 & var_pres('_b')=1
|| 'wywołanie ok!'
|? var_pres('_a')=4
|| _b:=_a~2;
   _a:=_a~1
|| _a:=date()~1;
   _b:=date()~2
?};

_dt:=date(_a,_b,1);
R_SPR.blank(1);
R_SPR.RM:=_dt;
{? ~R_SPR.find_rec()
|| R_SPR.MSC:=((_dt$8)*' '-1)+(_dt$8);
   R_SPR.ROK:=_a;
   R_SPR.add(1)
?};
1


\DataMask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Zwraca odpowiedną wartość typu data w zależności od aktualnej zawartości pól zmiennej VAR_EDIT.
::   WE:
::   WY:
::  OLD: \definiuj/funkcje.fml
::----------------------------------------------------------------------------------------------------------------------
{? VAR_EDIT.ROK & VAR_EDIT.MSC
|| {? (date()~1<>VAR_EDIT.ROK) | (date()~2<>VAR_EDIT.MSC)
   || date(VAR_EDIT.ROK,VAR_EDIT.MSC,1)
   || date()
   ?}
|| date(0,0,0)
?}


\p_prc_har_rekord_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Rekord przed w oknie wertowania PRC_HAR tabeli P
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
A_OKRP.index('A_OKPP');
A_OKRP.prefix(__HARM.OKR_REF,P.ref());
{? A_OKRP.first()
|| A_OKRP.get()
?};
~~


\prc_conf_dprz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.28]
:: OPIS: Domyślne rodzaj okresu rozliczeniowego dla współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'PODX' || 'POD' ?};
{? ~_a.init(_a,A_OKRD,_ind,'WER','Z','Z','PRC_CZP_DPRZ','PRC_CZP_DPRZ',P)
|| return()
?};

_a.prolog+="A_OKRD.cntx_psh();";
_a.epilog+="A_OKRD.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Domyślne okresy rozliczeniowe'@,,,,,
   $($_a.bs)(_a.map,
     "A_OKRN.actions('WER','WY');
      _ndx:=A_OKRD.index('?');
      A_OKRD.index('POD');
      A_OKRD.prefix(P.ref());
      A_OKRD.index('PODX');
      A_OKRD.prefix(P.ref());
      A_OKRD.index(_ndx);
      A_OKRD.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\prc_conf_dpsy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.28]
:: OPIS: Domyślne systemy czasu pracy dla współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'PODX' || 'POD' ?};
{? ~_a.init(_a,A_SCPP,_ind,'WER','Z','Z','PRC_CZP_DPSY','PRC_CZP_DPSY',P)
|| return()
?};

_a.prolog+="A_SCPP.cntx_psh();";
_a.epilog+="A_SCPP.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Domyślne systemy czasu pracy'@,,,,,
   $($_a.bs)(_a.map,
      "  A_SCP.actions('WER','WY');
         _ndx:=A_SCPP.index('?');
         A_SCPP.prefix(P.ref());
         A_SCPP.index('POD');
         A_SCPP.prefix(P.ref());
         A_SCPP.index('PODX');
         A_SCPP.prefix(P.ref());
         A_SCPP.index(_ndx);
         A_SCPP.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map,
      "  A_SCP.actions('WER','W')
      "
   ),
   ,,_a.mode
)


\prc_conf_dmpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.28]
:: OPIS: Marginesy we/wy dla współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_MARG,'R_MARG','WER',{? R_MARG.size() || 'D' || '' ?}+'Z','Z','PRC_CZP_DMPR','PRC_CZP_DMPR',P)
|| return()
?};

_a.prolog+="R_MARG.cntx_psh();";
_a.epilog+="R_MARG.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Marginesy'@,,,,,
   $($_a.bs)(_a.map,
      "  R_MARG.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\prc_conf_druc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Ruchomy czas pracy.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'A_RWNX' || 'A_RWN' ?};
{? ~_a.init(_a,A_RWN,_ind,'WER','Z','Z','PRC_CZP_DRUC','PRC_CZP_DRUC',P)
|| return()
?};

_a.prolog+="A_RWN.cntx_psh(); A_RWN.win_fml('WER',,'OPIS',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");";
_a.epilog+="A_RWN.cntx_pop();";

_a.table.grp_sel(
   _a.window,
   ($_a.map.TABLE)(),
   _a.map.WINDOW,
   'Ruchomy czas pracy'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=A_RWN.index('?');
         A_RWN.index('A_RWN');
         A_RWN.prefix(P.ref());
         A_RWN.index('A_RWNX');
         A_RWN.prefix(P.ref());
         A_RWN.index(_ndx);
         A_RWN.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),,,
   _a.mode
)


\prc_conf_dpok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Okresy rozliczeniowe współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'A_OKRDPX' || 'A_OKRDP' ?};
{? ~_a.init(_a,A_OKRP,_ind,'WERP','','','PRC_CZP_DPOK','PRC_CZP_DPOK',P)
|| return()
?};

_a.prolog+="A_OKRP.cntx_psh();";
_a.epilog+="A_OKRP.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Okresy rozliczeniowe współpracownika'@,,,,,
   $($_a.bs)(_a.map,
      " _ndx:=A_OKRP.index('?');
         A_OKRP.index('A_OKRDP');
         A_OKRP.prefix(P.ref());
         A_OKRP.index('A_OKRDPX');
         A_OKRP.prefix(P.ref());
         A_OKRP.index(_ndx);
         A_OKRP.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\prc_conf_dodb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wprowadzenie wniosków o odbiór nadgodzin.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_WO,'PORM','WER','','','PRC_CZP_DODB','PRC_CZP_DODB',P)
|| return()
?};

_a.prolog+="R_WO.cntx_psh();R_WYK.cntx_psh();R_WO.win_edit('RED');";
_a.epilog+="R_WO.cntx_pop();R_WYK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wnioski o odbiór'@,
   "  params_set(params_get());
      exec('conf_dodb_af','prc')
   ",,,,
   $($_a.bs)(_a.map,
      "  R_WO.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),,,_a.mode
);

_a.table.tab_splt(_a.window,,'vertical','r_wyk');
_a.table.grp_sel(_a.window,R_WYK,'WER',,,,9,5,,,,,_a.mode)


\conf_dodb_af
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła do odświeżenia okna WER z tabeli R_WO i R_WYK w zakładce
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
R_WYK.index('R_WYKWO');
_ref:=
   {? {? R_WO.f_active() || R_WO.f_size() || R_WO.size() ?}
   || R_WO.ref()
   || null()
   ?};
R_WYK.prefix(_ref);

_gray:='';
:: badamy zamknięcie miesiąca na datę odbioru
_do_otw:=__HARM.mc_otw(R_WO.DO,0);

:: badamy zamknięcie miesiąca na datę poszczególnych nadgodzin
_dn_otw:=1;
{? R_WYK.first()
|| {!
   |? _dn_otw*=__HARM.mc_otw(R_WYK.DN,0);
      R_WYK.next()
   !}
?};
R_WYK.first();

{? ~_do_otw | ~_dn_otw
|| _gray+='pOS';
:: jeżeli data odbioru jest w zamkniętym miesiącu to nie umożliwiamy zmiany daty
   {? ~_do_otw || _gray+='Z' ?};
   {? R_WYK.first()
   || _gray+='U'
   ?}
|?  R_WYK.first() & R_WO.AUTO='T'
|| _gray+='O'
?};
{? R_WO.W='S' | R_WO.W='W'
|| _gray+='Z'
?};
R_WO.actions_grayed('WER',_gray);
win_disp();
grp_disp(R_WYK,'WER')


\prc_conf_dodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wprowadzenie wniosków o czas wolny.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'PRACX' || 'PRAC' ?};
{? ~_a.init(_a,R_ODN,_ind,'WER','','','PRC_CZP_DODO','PRC_CZP_DODO',P)
|| return()
?};

_a.prolog+="
   R_ODN.cntx_psh();
   R_ODN.win_fml('WER',,'DW',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   R_ODP.cntx_psh();
   R_ODN.win_edit('RED');
   R_ODP.win_edit('RED');";
_a.epilog+="R_ODN.cntx_pop();R_ODP.cntx_pop();";
_a.extra.R_ODP_OK:=1;

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wnioski o czas wolny'@,
   "params_exec('conf_dodo_af','prc')",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=R_ODN.index('?');
         R_ODN.index('PRAC');
         R_ODN.prefix(P.ref());
         R_ODN.index('PRACX');
         R_ODN.prefix(P.ref());
         R_ODN.index(_ndx);
         R_ODN.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),,,_a.mode
);

_a.table.tab_splt(_a.window,,'vertical','r_odp',',60%');
_a.table.grp_sel(_a.window,R_ODP,'WER',,,,9,5,
   "  params_get().cfg.extra.R_ODP_OK:=_a;
      {? {? R_ODN.f_active() || ~R_ODN.f_size() || ~R_ODN.size() ?}
      || return('#disable')
      ?}
   ",,,,_a.mode,'R_ODP'
)


\conf_dodo_af
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła do odświeżenia okna WER z tabeli R_ODP w zakładce
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
params_get().cfg.extra.R_ODP_OK:=0;
_ind:={? PAR_SKID.get(236)='T' || 'NAGX' || 'NAG' ?};
R_ODP.index(_ind);
_ref:=
   {? {? R_ODN.f_active() || R_ODN.f_size() || R_ODN.size() ?}
   || R_ODN.ref()
   || null()
   ?};
R_ODP.prefix(_ref);
R_ODP.first();
grp_disp(R_ODP,'WER')


\prc_conf_dnad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Redakcja wniosków o pracę w nadgodzinach.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'PRDATAX' || 'PRDATA' ?};
{? ~_a.init(_a,R_NADG,_ind,'WER','','','PRC_CZP_DNAD','PRC_CZP_DNAD',P)
|| return()
?};

_a.prolog+="
   R_NADG.cntx_psh();
   R_NADGK.cntx_psh();
   R_NADG.win_fml('WER',POLA_GRP,'TXT_1',,'ICON_BEFORE',""exec('czy_pocz_icon','prc_nadg',R_NADG.CZY_POCZ)"");
   R_NADG.fld_attr('TYP',2);
   R_NADG.fld_attr('G',2);
   R_NADG.fld_attr('CZY_WYPL',2);
   R_NADG.fld_attr('CZY_POCZ',2);
   R_NADG.win_edit('RED');
   BPMN.KK_DOM:='PPL';
";
_a.epilog+="R_NADG.cntx_pop();R_NADGK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wnioski o nadgodziny'@,
   "params_exec('conf_dnad_af','prc')",,,,
   $($_a.bs)(_a.map,
      "  {? R_NADG.f_active() || R_NADG.f_clear() ?};
         _ndx:=R_NADG.index('?');
         R_NADG.index('PRDATAX');
         R_NADG.prefix(P.ref());
         R_NADG.index('PRDATA');
         R_NADG.prefix(P.ref());
         R_NADG.index(_ndx);
         R_NADG.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),,,_a.mode
);

_a.table.tab_splt(_a.window,,'vertical','r_nadg',',70%');
_a.table.grp_sel(_a.window,R_NADGK,'WER',,,,9,5,,,,,_a.mode,'R_NADG')


\conf_dnad_af
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuła do odświeżenia okna WER z tabeli R_NADGK w zakładce
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_ind:={? PAR_SKID.get(236)='T' || 'WNIOSEK1' || 'WNIOSEK' ?};
R_NADGK.index(_ind);
_ref:=
   {? {? R_NADG.f_active() || R_NADG.f_size() || R_NADG.size() ?}
   || R_NADG.ref()
   || null()
   ?};
R_NADGK.prefix(_ref);
R_NADGK.first();
grp_disp(R_NADGK,'WER')


\prc_conf_pkap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Przypisanie karty pracy dla współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'PR_DATAX' || 'PR_DATA' ?};
{? ~_a.init(_a,R_KARHIS,_ind,'WER','Z','Z','PRC_CZP_PKAP','PRC_CZP_PKAP',P)
|| return()
?};

_a.prolog+=
   "R_KARHIS.cntx_psh(); R_KARHIS.use('r_karhis'); R_KARTY.cntx_psh(); R_KARTY.win_sel('WER'); R_KARTY.win_edit('RED');
   ";
_a.epilog+="R_KARHIS.cntx_pop(); R_KARTY.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Karty pracy'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=R_KARHIS.index('?');
         R_KARHIS.index('PR_DATA');
         R_KARHIS.prefix(P.ref());
         R_KARHIS.index('PR_DATAX');
         R_KARHIS.prefix(P.ref());
         R_KARHIS.index(_ndx);
         R_KARHIS.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\prc_conf_pmcr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyświetlenie miesięcy w okresie rozliczeniowym dla współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,A_OKRP_M,'A_OKRPM','WER','','','PRC_CZP_PMCR','PRC_CZP_PMCR',P)
|| return()
?};

_a.prolog+="A_OKRP_M.cntx_psh();";
_a.epilog+="A_OKRP_M.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Miesiące w okresie'@,,,,,
   $($_a.bs)(_a.map,
      "  A_OKRP.cntx_psh();
         A_OKRP.index('A_OKRPR');
         A_OKRP.prefix(A_OKR.ref(),P.ref());
         _a_okrp:={? A_OKRP.first() || A_OKRP.ref() || null() ?};
         A_OKRP.cntx_pop();
         A_OKRP_M.prefix(_a_okrp)
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\prc_conf_pkor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyświetlenie korekt planowania czasu pracy współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_okno:={? exec('isEnabled','prc_przerwy') || 'WER_P' || 'WER' ?};
{? ~_a.init(_a,KAL_KORH,'PRACOKR',_okno,'','','PRC_CZP_PKOR','PRC_CZP_PKOR',P)
|| return()
?};

_a.prolog+="KAL_KORH.cntx_psh();KAL_KORN.cntx_psh();";
_a.epilog+="KAL_KORH.cntx_pop();KAL_KORN.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Korekty planowania'@,
   "  KAL_KORN.prefix();
      KAL_KORN.f_clear(1);
      KAL_KORN.f_set('START_D,WERSJA','','KAL_KORN.REFERENCE=:_a',KAL_KORH.KAL_KORN);
      KAL_KORH.f_rfresh();
      grp_disp(KAL_KORN,'WER');

      ~~
   ",,,,
   $($_a.bs)(_a.map,
      "  KAL_KORH.prefix(P.ref(),A_OKR.ref())
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
);

_a.table.tab_splt(_a.window,,'vertical','kal_korn');
_a.table.grp_sel(_a.window,KAL_KORN,'WER',,,,9,5,,,,,_a.mode)


\ustal_okres_prc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.28]
:: OPIS: Ustalenie okresu i daty do wyświetlania danych w zakładkach w obszarze PRC
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
A_OKR.cntx_psh();
{? A_OKR.seek(__HARM.OKR_REF,,1)
|| {? A_OKR.DO<date()
   || VAR_EDIT.DATA:=A_OKR.DO
   |? A_OKR.OD>date()
   || VAR_EDIT.DATA:=A_OKR.OD
   || VAR_EDIT.DATA:=date()
   ?}
|| VAR_EDIT.DATA:=date()
?};
VAR_EDIT.ROK:=VAR_EDIT.DATA~1;
VAR_EDIT.MSC:=VAR_EDIT.DATA~2;
A_OKR.cntx_pop();
~~


\a_scpp_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.28]
:: OPIS: Formuła po rekordzie w tabeli SCPP - sprawdzenie wypełnienia pól.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=__CHK.record2(A_SCPP,'OD',,'A_SCP','Nazwa'@);
{? _result=''
|| _data:=A_SCPP.OD;
   _idadd:=A_SCPP.IDADD;
   A_SCPP.cntx_psh();
   A_SCPP.index('POD');
   A_SCPP.prefix(P.ref());
   {? A_SCPP.find_key(_data) & _idadd<>A_SCPP.IDADD
   || FUN.emsg('%1\n%2'
         [  'Domyślny system czasu pracy rozpoczynający się od podanej daty już istnieje.'@,
            'Proszę podać inną datę.'@
         ]
      );
      _result:='OD'
   ?};
   A_SCPP.cntx_pop()
?};
_result


\a_scpp_trigger
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Trigger po add, put i del w tabeli A_SCPP.
::   WE: _a - [STRING] - rozaj akcji dla triggera
::       [_b] - [INTEGER] - tylko dla trigera po del - wynik akcji del
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a='del' & _b
|| _old_od:=bfld('OD');
   _od:=_old_od;
   _do:=date(0,0,0);
   _scp_ref:=bfld('A_SCP');
   _prac:=A_SCPP.P;
   A_SCPP.cntx_psh();
   A_SCPP.index('POD');
   A_SCPP.prefix(_prac);
:: sprawdzenie czy są jakieś wpisy przed datą modyfikacji
   {? A_SCPP.find_le(_old_od-1) & A_SCPP.OD<_old_od
   || _scp_ref:=A_SCPP.A_SCP
   || _scp_ref:=null()
   ?};
:: sprawdzenie czy są jakieś wpisy po dacie modyfikacji
   {? A_SCPP.find_ge(_old_od+1) & A_SCPP.OD>_old_od
   || _do:=A_SCPP.OD - 1
   ?};
   A_SCPP.cntx_pop();
   KAL_BUFF.index('PRACDATA');
   KAL_BUFF.prefix(_prac);
   {? KAL_BUFF.find_ge(_od) | KAL_BUFF.first()
   || {!
      |? {? (_od<>#0 & KAL_BUFF.DATA>=_od)
            &
            (_do=#0 | KAL_BUFF.DATA<=_do)
         || KAL_BUFF.A_SCP:=_scp_ref;
            KAL_BUFF.TM_X:=KAL_BUFF.tm_stamp();
            KAL_BUFF.put()
         ?};
         KAL_BUFF.next()
      !}
   ?}
|? _a='add' | _a='put'
|| KAL_BUFF.index('PRACDATA');
   _od:=A_SCPP.OD;
   _do:=date(0,0,0);
   _prac:=A_SCPP.P;
   A_SCPP.cntx_psh();
   A_SCPP.index('POD');
   A_SCPP.prefix(_prac);
:: sprawdzenie czy są jakies wpisy po dacie modyfikacji
   {? A_SCPP.find_ge(A_SCPP.OD+1) & A_SCPP.OD>_od
   || _do:=A_SCPP.OD - 1
   ?};
   A_SCPP.cntx_pop();
   KAL_BUFF.prefix(_prac);
   {? KAL_BUFF.find_ge(_od) | KAL_BUFF.first()
   || {!
      |? {? (KAL_BUFF.DATA>=_od)
            &
            (_do=#0 | KAL_BUFF.DATA<=_do)
         || KAL_BUFF.A_SCP:=A_SCPP.A_SCP;
            KAL_BUFF.TM_X:=KAL_BUFF.tm_stamp();
            KAL_BUFF.put()
         ?};
         KAL_BUFF.next()
      !}
   ?}
?};
~~


\do_bez_plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Ustalenie znacznika P.GRAFIK.
::   WE: _a - [STRING] 'T' do planowania, 'N' bez planowania
::   WY:
::  OLD: \do_bez_plan/okres.fml
::----------------------------------------------------------------------------------------------------------------------
P.GRAFIK:=_a;
P.put(1)


\prc_all_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Ustalenie znacznika P.GRAFIK
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
A_OKRP.clear();
HA.A_OKRP:={? A_OKRP.find_tab(1,'OKR',,'=',__HARM.OKR_REF,'P',,'=',P.ref()) || 'T' || 'N' ?};
~~


\prc_har_bfr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2006]
:: OPIS: Wyświetlenie okna kwalifikacji dla pracownika w okresie
::   WE:
::   WY:
::  OLD: \ten_p/okres.fml
::----------------------------------------------------------------------------------------------------------------------
params_exec('kwalifikacja','prc_rozlicz');
~~


\rcp_dod_nag_P
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Dodanie ruchomego czasu pracy na wniosek pracownika.
::   WE: _a = 1 - akcja popraw
::       _b > 0 - akcja popraw dla pracowników w grupie
::   WY:
::  OLD: \rcp_dod_nag_P/okres.fml
::----------------------------------------------------------------------------------------------------------------------
_put:={? var_pres('_a')=type_of(0) || _a ?};
_group:={? var_pres('_b')=type_of(0) || _b ?};

{? ~_put
|| A_RWN.blank();
   _wp:=A_RWN.WP:='T';
   A_RWN.P:=P.ref();
   A_RWN.OPIS:=P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' IP:'+$P.IP+' ('+P.F_ZATR().OPIS+')'
|| _b_od:=A_RWN.OD;
   _b_do:=A_RWN.DO;
   _wp:=A_RWN.WP
?};

A_RWN.efld_opt('RED',{? A_RWN.WP='N' || 'mark=1,enable=1' || 'mark=0,enable=0' ?},RCP,'NAZWA');
exec('rcp_Czytaj','prc',_put);

{? A_RWN.edit(
      "  {? A_RWN.WP='N' & RCP.NAZWA=''
         || FUN.emsg('%1\n%2'['Pole \"Nazwa\", musi być wypełnione.'@,'Należy uzupełnić brakujące informacje.'@]);
            return('NAZWA')
         ?};
         _wyn:=__CHK.record2(A_RWN,'OD','Data rozpoczęcia'@,'DO','Data zakończenia'@);
         {? _wyn=''
         || {?  A_RWN.OD>A_RWN.DO
            || FUN.emsg('Data rozpoczęcia nie może być późniejsza od daty zakończenia.'@);
               return('OD')
            || _wyn:=0;
               {! _ind:=1..7
               |! _wyn+=('GZ'*($('RCP.ND'+($_ind)))());
                  {? ($('RCP.W'+($_ind)))()='T' & ($('RCP.GDO'+($_ind)))()=*0
                  || FUN.emsg('Pole \"Do godziny\" w dniu: \"%1\", musi być uzupełnione.'@
                        [MS.name(RCP,'ND'+($_ind))]
                     );
                     return('GDO'+($_ind))
                  ?};
                  {? ($('RCP.W'+($_ind)))()='T' & ($('RCP.GOD'+($_ind)))()>($('RCP.GDO'+($_ind)))()
                  || FUN.emsg('%1 \"%2\"'
                        [  'Wartość w polu \"Od godziny\" nie może być większa od wartości \"Do godziny\" w dniu:'@,
                           MS.name(RCP,'ND'+($_ind))
                        ]
                     );
                     return('GOD'+($_ind))
                  ?}
               !}
            ?}
         || _wyn
         ?}
      "
   )
|| _ref:={? _put || A_RWN.ref() || null() ?};
   A_RWN.cntx_psh();
   _od:=A_RWN.OD;
   _do:=A_RWN.DO;
   _ok:=1;
   A_RWN.index('WN_PRAC');
   A_RWN.prefix(A_RWN.WP,A_RWN.P);
   {? A_RWN.first()
   || {!
      |? {? _ref<>A_RWN.ref() & A_RWN.OD<=_do & A_RWN.DO>=_od || _ok:=0 ?};
         _ok & A_RWN.next()
      !}
   ?};
   {? _group
   || {? A_RWN.seek(_group,,1)
      || {? A_RWN.OD>_od | A_RWN.DO<_do || _ok:=0 ?}
      ?}
   ?};
   A_RWN.cntx_pop();
   {? ~_ok
   || {? _group
      || FUN.emsg('%1\n%2'
            [  'Istnieje zapis w danym terminie lub termin wykracza poza przedział grupy.'@,
               'Proszę wprowadzić poprawne dane.'@
            ]
         )
      || FUN.emsg('%1\n%2'['Istnieje zapis w danym terminie.'@,'Proszę wprowadzić poprawne dane.'@])
      ?};
      return(0)
   ?};
   {? {? _put
      || {? _b_od<>A_RWN.OD | _b_do<>A_RWN.DO || A_RWN.put() ?};
         1
      || A_RWN.add()
      ?}
   || {? _put & A_RWN.WP='N' & _wp<>A_RWN.WP
      || A_RWP.cntx_psh();
         A_RWP.index('A_RWP');
         A_RWP.prefix(A_RWN.ref());
         {? A_RWP.first()
         ||  {! |? A_RWP.del() !}
         ?};
         A_RWP.cntx_pop()
      ?};
      {? ~_group & A_RWN.WP='T' || exec('rcp_edit_prac','prc') ?}
   ?}
?}


\rcp_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Usuwa zapis nagłówkowy wraz z pozycjami.
::   WE:
::   WY:
::  OLD: \rcp_del/okres.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy na pewno usunąć ruchomy czas pracy?'@)
|| A_RWP.index('A_RWP');
   A_RWP.prefix(A_RWN.ref());
   do();
   {? A_RWP.first()
   || {! |? A_RWP.del() !}
   ?};
   {? ~A_RWP.first()
   || {? ~A_RWN.del(,1) || undo() ?}
   ?};
   end()
?}


\rcp_edit_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Edycja ruchomego czasu pracy dla pracownika.
::   WE: _a - [INTEGER] - (1/0) Wyświetlenie
::   WY:
::  OLD: \rcp_edit_prac/okres.fml
::----------------------------------------------------------------------------------------------------------------------
_displ:={? var_pres('_a')=type_of(0) || _a ?};
A_RWP.index('A_RWP');
A_RWP.prefix(A_RWN.ref());
{? ~_displ
|| exec('rcp_zapisz','prc')
|| exec('rcp_Czytaj','prc',1);
   A_RWN.display()
?}


\rcp_Czytaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wczytanie danych do zmiennej RCP.
::   WE: _a - [INTEGER} - uzupełnianie pól zmiennej RCP: 0 - podczas dodawania, 1 - podczas wyświetlania i poprawiania.
::   WY:
::  OLD: \rcp_Czytaj/okres.fml
::----------------------------------------------------------------------------------------------------------------------
_tak:='mark=1,enable=1';
_nie:='mark=0,enable=0';
_win:=A_RWN.win_edit('?');
RCP.blank();
{? _a
|| RCP.NAZWA:=A_RWN.OPIS;
   A_RWN.efld_opt(_win,'mark=0,enable='+$(A_RWN.WP='N'),RCP,'NAZWA');
   A_RWP.index('A_RWP');
   A_RWP.prefix(A_RWN.ref);
   A_RWP.first();
   {! _ind:=1..7
   |! {? A_RWP.find_key(_ind)
      || ($('RCP.ND'+($_ind)))():={? A_RWP.W='N' || 'G' || 'Z' ?};
         ($('RCP.W'+($_ind)))():=A_RWP.W;
         ($('RCP.GOD'+($_ind)))():=A_RWP.GOD;
         ($('RCP.GDO'+($_ind)))():=A_RWP.GDO;
         A_RWN.efld_opt(
            _win,
            {? 'GZ'*($('RCP.ND'+($_ind)))() || 'mark=0,enable=1' || 'mark=0,enable=0' ?},
            RCP,
            'GOD'+($_ind)
         );
         A_RWN.efld_opt(_win,{? ($('RCP.W'+($_ind)))()='T' || _tak || _nie ?},RCP,'GDO'+($_ind))
      || A_RWN.efld_opt(_win,_nie,RCP,'GOD'+($_ind));
         A_RWN.efld_opt(_win,_nie,RCP,'GDO'+($_ind))
      ?}
   !}
|| {! _ind:=1..7
   |! A_RWN.efld_opt(_win,'mark=0,enable=0',RCP,'GOD'+($_ind));
      A_RWN.efld_opt(_win,'mark=0,enable=0',RCP,'GDO'+($_ind))
   !}
?};
A_RWN.efld_opt(_win,{? A_RWN.P & A_RWN.WP='N' || 'mark=0' || 'mark=1' ?},,'OD');
A_RWN.efld_opt(_win,{? A_RWN.P & A_RWN.WP='N' || 'mark=0' || 'mark=1' ?},,'DO');
1


\rcp_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Zapis danych ze zmiennej RCP.
::   WE:
::   WY:
::  OLD: \rcp_zapisz/okres.fml
::----------------------------------------------------------------------------------------------------------------------
{! _ind:=1..7
|! {? ($('RCP.ND'+($_ind)))()<>'N'
   || _wid:=($('RCP.W'+($_ind)))();
      _god:=($('RCP.GOD'+($_ind)))();
      _gdo:=($('RCP.GDO'+($_ind)))();
      {? A_RWP.find_key(_ind)
      || _put:=0;
         {? A_RWP.W<>_wid || A_RWP.W:=_wid; _put:=1 ?};
         {? A_RWP.GOD<>_god || A_RWP.GOD:=_god; _put:=1 ?};
         {? A_RWP.GDO<>_gdo || A_RWP.GDO:=_gdo; _put:=1 ?};
         {? _put || A_RWP.put(1) ?}
      || A_RWP.blank();
         A_RWP.ND:=_ind;
         A_RWP.A_RWN:=A_RWN.ref();
         A_RWP.W:=_wid;
         A_RWP.GOD:=_god;
         A_RWP.GDO:=_gdo;
         A_RWP.add(1)
      ?}
   || {? A_RWP.find_key(_ind)
      || A_RWP.del()
      ?}
   ?}
!};
1


\rcp_disp_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Akcja Wyświetl dla grupy.
::   WE:
::   WY:
::  OLD: \rcp_disp_prac/okres.fml
::----------------------------------------------------------------------------------------------------------------------
{? A_RWN.F='T'
|| exec('rcp_edit_prac','prc',1)
|| A_RWN.cntx_psh();
   A_RWN.seek(A_RWN.A_RWN,,1);
   exec('rcp_edit_prac','prc',1);
   A_RWN.cntx_pop()
?};
1


\a_rwn_bfp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji popraw w tabeli A_RWN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? A_RWN.WP='T' || 1 || FUN.emsg('Opcja dostępna tylko dla wniosku pracowniczego.'@); 0 ?}


\a_rwn_aw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji Wyświetl w tabeli A_RWN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? A_RWN.WP='T' || exec('rcp_edit_prac','prc',1) || exec('rcp_disp_prac','prc') ?};
~~


\rcp_ver_widelki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Ustalenie danych daty do w zmiennej RCP.
::   WE:
::   WY:
::  OLD: \rcp_ver_widelki/okres.fml
::----------------------------------------------------------------------------------------------------------------------
_numer:=cur_afld()+1;
{? fld='N'
|| ($('RCP.GDO'+_numer))():=time(0,0,0);
   _options:='mark=0,enable=0'
|| _options:='mark=1,enable=1'
?};
RCP.efld_opt('RED',_options,,'GDO'+_numer);
win_disp();
1


\rcp_ndx_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po edycji pól ND1..7 w zmiennej RCP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_numer:=cur_afld()+1;
_win:=A_RWN.win_edit('?');

{? ($('RCP.ND'+_numer))()='N'
|| ($('RCP.W'+_numer))():='N';
   ($('RCP.GOD'+_numer))():=($('RCP.GDO'+_numer))():=time(0,0,0);
   A_RWN.efld_opt(_win,'mark=0,enable=0',RCP,'GOD'+_numer);
   A_RWN.efld_opt(_win,'mark=0,enable=0',RCP,'GDO'+_numer)
|? ($('RCP.ND'+_numer))()='G'
|| ($('RCP.W'+_numer))():='N';
   ($('RCP.GDO'+_numer))():=time(0,0,0);
   A_RWN.efld_opt(_win,'mark=0,enable=1',RCP,'GOD'+_numer);
   A_RWN.efld_opt(_win,'mark=0,enable=0',RCP,'GDO'+_numer)
|| ($('RCP.W'+_numer))():='T';
   A_RWN.efld_opt(_win,'mark=0,enable=1',RCP,'GOD'+_numer);
   A_RWN.efld_opt(_win,'mark=1,enable=1',RCP,'GDO'+_numer)
?}


\a_rwn_wp_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed redakcjąi pola WP z tabeli A_RWN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
A_RWN.cntx_psh();
A_RWN.index('WN_FIRMA');
A_RWN.prefix('T');
_wyn:=A_RWN.size();
A_RWN.cntx_pop();
_wyn


\a_rwn_wp_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po redakcji pola WP z tabeli A_RWN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
A_RWN.GROUP:='';
A_RWN.A_RWN:=0;
{? A_RWN.WP='N'
|| RCP.blank();
   A_RWN.OD:=A_RWN.DO:=date(0,0,0);
   {! _ind:=1..7
   |! A_RWN.efld_opt('RED','mark=0,enable=0',RCP,'GOD'+($_ind));
      A_RWN.efld_opt('RED','mark=0,enable=0',RCP,'GDO'+($_ind))
   !}
|| {! _ind:=1..7
   |! A_RWN.efld_opt(
         'RED',
         {? 'GZ'*($('RCP.ND'+($_ind)))()
         || 'mark=0,enable=1'
         || 'mark=0,enable=0'
         ?},
         RCP,'GOD'+($_ind)
      );
      A_RWN.efld_opt(
         'RED',
         {? ($('RCP.W'+($_ind)))()='T'
         || 'mark='+{? A_RWN.WP='T' || '1' || '0' ?}+',enable=1'
         || 'mark=0,enable=0'
         ?},
         RCP,
         'GDO'+($_ind)
      )
   !}
?};
A_RWN.efld_opt('RED',{? A_RWN.WP='T' || 'mark=0,enable=0' || 'mark=1,enable=1' ?},RCP,'NAZWA');
A_RWN.efld_opt('RED',{? A_RWN.WP='T' || 'mark=1' || 'mark=0' ?},,'OD');
A_RWN.efld_opt('RED',{? A_RWN.WP='T' || 'mark=1' || 'mark=0' ?},,'DO')


\a_rwn_i_rcp_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed edycją pól OD i DO w tabeli A_RWN oraz pól ze zmiennej RCP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? A_RWN.P & A_RWN.WP='N' || 0 || 1 ?}


\rcp_nazwa_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyświetlenie słownika grup zdefiniowanych dla ruchomego czasu pracy w firmie.
::   WE:
::   WY:
::  OLD: \rcp_nazwa_f3/!prc_czp_druc.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=sql('select A_RWN.OPIS as NAZWA from A_RWN where A_RWN.F=\'T\'');

_wer:=_TAB.mk_sel('Ruchomy czas pracy'@,,,,,,,,'U',,,,,'maximized');
_TAB.win_fld(_wer,,'NAZWA',,,20,,1,'Nazwa'@,,'Nazwa grupy dla ruchomego czasu pracy ustalonego przez pracodawcę'@);
_TAB.win_act(_wer,,'Formuła','Wybierz'@@,,'Wybór pozycji ze słownika'@,,"sel_exit()",1,,,,'W');
_TAB.win_sel(_wer);
{? _TAB.select()
|| RCP.NAZWA:=_TAB.NAZWA
?}


\rcp_nazwa_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po redakcji słownika grup zdefiniowanych dla ruchomego czasu pracy w firmie.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_a_rwn:=0;
_od:=_do:=date(0,0,0);
A_RWN.cntx_psh();
A_RWN.index('WN_FIRMA');
A_RWN.prefix('T');
{? +RCP.NAZWA
|| {? A_RWN.find_key(RCP.NAZWA)
   || RCP.NAZWA:=A_RWN.OPIS;
      _a_rwn:=#A_RWN.ref();
      _od:=A_RWN.OD;
      _do:=A_RWN.DO;
      A_RWP.cntx_psh();
      A_RWP.index('A_RWP');
      A_RWP.prefix(A_RWN.ref);
      A_RWP.first();
      {! _ind:=1..7
      |! {? A_RWP.find_key(_ind)
         || ($('RCP.ND'+($_ind)))():={? A_RWP.W='N' || 'G' || 'Z' ?};
            ($('RCP.W'+($_ind)))():=A_RWP.W;
            ($('RCP.GOD'+($_ind)))():=A_RWP.GOD;
            ($('RCP.GDO'+($_ind)))():=A_RWP.GDO;
            A_RWN.efld_opt(
               'RED',
               {? 'GZ'*($('RCP.ND'+($_ind)))()
               || 'mark=0,enable=1'
               || 'mark=0,enable=0'
               ?},
               RCP,'GOD'+($_ind)
            );
            A_RWN.efld_opt(
               'RED',
               {? ($('RCP.W'+($_ind)))()='T'
               || 'mark='+{? A_RWN.WP='T' || '1' || '0' ?}+',enable=1'
               || 'mark=0,enable=0'
               ?},
               RCP,
               'GDO'+($_ind)
            )
         || A_RWN.efld_opt('RED','mark=0,enable=0',RCP,'GOD'+($_ind));
            A_RWN.efld_opt('RED','mark=0,enable=0',RCP,'GDO'+($_ind))
         ?}
      !};
      A_RWP.cntx_pop()
   || FUN.emsg('%1\n%2'['Brak pozycji w słowniku.'@,'Proszę wybrać pozycję ze słownika.'@]);
      _wyn:=0
   ?}
?};
A_RWN.cntx_pop();
A_RWN.A_RWN:=_a_rwn;
A_RWN.OD:=_od;
A_RWN.DO:=_do;
A_RWN.GROUP:=RCP.NAZWA;
_wyn


\a_rwn_wer_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją rekord w oknie WER tabeli A_RWN.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _par:=params_get();
   {? var_pres('_par')>100 & var_pres('cfg',_par)>100 & var_pres('done',_par.cfg)>100 &
      var_pres('noempty',_par.cfg.done)=type_of('') & var_pres('empty',_par.cfg.done)=type_of('')
   || _gray:=_par.cfg.done.noempty+':'+_par.cfg.done.empty
   || _gray:=''
   ?};
   _gray:={? A_RWN.WP='N' || 'P' || '' ?}+_gray;
   A_RWN.actions_grayed('WER',_gray)
?};
0


\akt_buff_a_rw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [TMR 12.30]
:: OPIS: Trigery dla tabel A_RWN i A_RWP
::   WE: _a [STRING] - Rodzaj akcji dla trigera
::       _b [TABLE] - uchwyt do tabeli
::  OLD: \akt_buff_a_rw/plan_kal.fml
::----------------------------------------------------------------------------------------------------------------------
A_OKR.cntx_psh();
KAL_BUFF.cntx_psh();
_ndx:=KAL_BUFF.ndx_tmp(,1,'CZY_OKR',,,'P',,,'DATA',,);
KAL_BUFF.index(_ndx);
{? _b=A_RWN
|| {? _a='add'
      |
      (_a='put' & (bfld('OD')<>_b.OD | bfld('DO')<>_b.DO))
   || _od:=_b.OD;
      _do:=_b.DO;
      _p_ref:=_b.P;
      A_RWP.cntx_psh();
      A_RWP.index('A_RWP');
      P.cntx_psh();
      {? P.seek(_p_ref)
      || {! _ind:=#_od..#_do
         |! _data:=#_ind;
:: sprawdzenie czy dla wskazanej daty istnieje dzień należący do otwartego okresu rozliczeniowego
            _orp_ref:=exec('find_okr','grafik',_p_ref,_data,'okrp');
            {? _orp_ref<>null()
            || _open:=exec('getStatusM_Plan','okres',_orp_ref,_data~1,_data~2)<>'Z';
               KAL_BUFF.prefix('T',_p_ref,_data);
               {? _open & KAL_BUFF.first()
               || {? __HARM.RCP(_data) & __HARM.RCP_DET & KAL_BUFF.TYP='R'
                  || KAL_BUFF.POCZATEK:=__HARM.RCP_GOD;
                     KAL_BUFF.KONIEC:=KAL_BUFF.POCZATEK+KAL_BUFF.CZAS;
                     {? KAL_BUFF.KONIEC>time(24,0,0)
                     || KAL_BUFF.KONIEC-=time(24,0,0);
                        KAL_BUFF.DATAW:=KAL_BUFF.DATA+1
                     || KAL_BUFF.DATAW:=KAL_BUFF.DATA
                     ?};
                     KAL_BUFF.TM_X:=KAL_BUFF.tm_stamp();
                     {? KAL_BUFF.put()
                     ||
:: sprawdzenie zapisów tego samego dnia, nie należących do okresu
                        KAL_BUFF.cntx_psh();
                        KAL_BUFF.prefix('N',_p_ref,_data);
                        {? KAL_BUFF.first()
                        || {!
                           |? KAL_BUFF.POCZATEK:=A_RWP.GOD;
                              KAL_BUFF.KONIEC:=KAL_BUFF.POCZATEK+KAL_BUFF.CZAS;
                              {? KAL_BUFF.KONIEC>time(24,0,0)
                              || KAL_BUFF.KONIEC-=time(24,0,0);
                                 KAL_BUFF.DATAW:=KAL_BUFF.DATA+1
                              || KAL_BUFF.DATAW:=KAL_BUFF.DATA
                              ?};
                              KAL_BUFF.TM_X:=KAL_BUFF.tm_stamp();
                              KAL_BUFF.put();
                              KAL_BUFF.next()
                           !}
                        ?};
                        KAL_BUFF.cntx_pop()
                     ?}
                  ?}
               ?}
            ?}
         !}
      ?};
      P.cntx_pop();
      A_RWP.cntx_pop()
   ?}
|? _b=A_RWP
|| {? _a='add'
      |
      (_a='put' & (bfld('GOD')<>_b.GOD | bfld('GDO')<>_b.GDO))
   || _fml:=
         "  _p_ref:=_a;
            _od:=_b;
            _do:=_c;
            P.cntx_psh();
            {? P.seek(_p_ref)
            || {! _ind:=#_od..#_do
               |! _data:=#_ind;
                  _orp_ref:=exec('find_okr','grafik',_p_ref,_data,'okrp');
                  {? _orp_ref<>null()
                  || _open:=exec('getStatusM_Plan','okres',_orp_ref,_data~1,_data~2)<>'Z';
                     KAL_BUFF.prefix('T',_p_ref,_data);
                     {? _open & KAL_BUFF.first() & KAL_BUFF.DATA~4=A_RWP.ND
                     || {? __HARM.RCP(_data) & __HARM.RCP_DET & KAL_BUFF.TYP='R'
                        || KAL_BUFF.POCZATEK:=__HARM.RCP_GOD;
                           KAL_BUFF.KONIEC:=KAL_BUFF.POCZATEK+KAL_BUFF.CZAS;
                           {? KAL_BUFF.KONIEC>time(24,0,0)
                           || KAL_BUFF.KONIEC-=time(24,0,0);
                              KAL_BUFF.DATAW:=KAL_BUFF.DATA+1
                           || KAL_BUFF.DATAW:=KAL_BUFF.DATA
                           ?};
                           KAL_BUFF.TM_X:=KAL_BUFF.tm_stamp();
                           {? KAL_BUFF.put()
                           ||
:: sprawdzenie zapisów tego samego dnia, nie należących do okresu
                              KAL_BUFF.cntx_psh();
                              KAL_BUFF.prefix('N',_p_ref,_data);
                              {? KAL_BUFF.first()
                              || {!
                                 |? KAL_BUFF.POCZATEK:=A_RWP.GOD;
                                    KAL_BUFF.KONIEC:=KAL_BUFF.POCZATEK+KAL_BUFF.CZAS;
                                    {? KAL_BUFF.KONIEC>time(24,0,0)
                                    || KAL_BUFF.KONIEC-=time(24,0,0);
                                       KAL_BUFF.DATAW:=KAL_BUFF.DATA+1
                                    || KAL_BUFF.DATAW:=KAL_BUFF.DATA
                                    ?};
                                    KAL_BUFF.TM_X:=KAL_BUFF.tm_stamp();
                                    KAL_BUFF.put();
                                    KAL_BUFF.next()
                                 !}
                              ?};
                              KAL_BUFF.cntx_pop()
                           ?}
                        ?}
                     ?}
                  ?}
               !}
            ?};
            P.cntx_pop()
         ";

      A_RWN.cntx_psh();
      A_RWP.cntx_psh();
      {? _b.A_RWN().P=null()
      || A_RWN.index('TREE');
:: jeżeli nastapiła modyfikacja wniosku grupowego to należy zmodyfikować dla wszystkich pracowników podpiętych
         A_RWN.prefix(_b.A_RWN);
         {? A_RWN.first()
         || {!
            |? {? A_RWN.P<>null()
               || _fml(A_RWN.P,A_RWN.OD,A_RWN.DO)
               ?};
               A_RWN.next()
            !}
         ?}
      || _fml(_b.A_RWN().P,_b.A_RWN().OD,_b.A_RWN().DO)
      ?};
      A_RWP.cntx_pop();
      A_RWN.cntx_pop()
   ?}
?};
KAL_BUFF.ndx_drop(_ndx);
KAL_BUFF.cntx_pop();
A_OKR.cntx_pop();
~~


\prc_mcr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Główna formuła obszaru roboczego PRC_MCR - wywołanie okienka z miesiącami do rozliczenia.
::   WE:
::   WY:
::  OLD: \harm16/okres.fml
::----------------------------------------------------------------------------------------------------------------------
exec('__F_ZATR','object');
exec('__KAL','object');
exec('__HARM','object');
exec('__RUB','object');
exec('__STALE','object');
exec('MASK','object');
exec('KOMM','#object');
exec('PROGRESS','#object');

exec('init','prc');
__PERSONEL:=1;
_p236:=PAR_SKID.get(236)='T';
_ind:={? _p236 || 'A_OKRMRX' || 'A_OKRMR' ?};
A_OKRM.index(_ind);
A_OKRM.prefix();
{? ~A_OKRM.find_key(date()~1,date()~2)
|| {? _p236 || A_OKRM.first() || A_OKRM.last() ?}
?};
A_OKRM.actions('WER',,{? A_OKRM.S_PLAN='O' || 'Z' |? A_OKRM.S='O' || 'R' || '' ?});
_grp:=A_OKRM.grp_make(,,,,,"exec('exit','zws')",,);
A_OKRM.grp_sel(_grp,,'WER',,,,,,,,,,'maximized_with_title',,1);
A_OKRM.win_sel(_grp);
A_OKRM.select(,1);
~~


\r_karhis_wer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji "Rekord" w oknie WER tabeli R_KARHIS
::   WE:
::   WY:
::  OLD: \RKHrekpo/karty.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=__CHK.record2(R_KARHIS,'K','Numer karty'@,'OD','Od daty'@);
{? _result=''
|| {? R_KARHIS.DO<>#0 & R_KARHIS.OD>R_KARHIS.DO
   || FUN.emsg('Data w polu \"Od daty\" musi być wcześniejsza od daty w polu \"Do daty\".'@);
      _result:='OD'
   |? R_KARHIS.ZW='T'
   || {? ~exec('SprKarty','prc',R_KARHIS.K,R_KARHIS.OD,R_KARHIS.DO) || _result:='K' ?}
   || _result:=1
   ?}
?};
_result


\SprKarty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji "Rekord" w oknie WER tabeli R_KARHIS.
::   WE: _a - [REFERENCE] - wskazanie karty pracy
::       _b - [DATE] - początek okresu obowiązywania karty
::       _c - [DATE] - koniec okresu obowiązywania karty
::   WY: (0/1) Informacja czy w podanym okresie karta pracy jest wykorzystywana.
::  OLD: \SprKarty/karty.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_ref:={? -menu_txt()='popraw' || R_KARHIS.ref() || null() ?};
P.cntx_psh();
OSOBA.cntx_psh();
R_KARHIS.cntx_psh();
R_KARHIS.index('ZW_KAR_D');
R_KARHIS.prefix('T',_a);
{? R_KARHIS.first()
|| {!
   |? {? _ref<>R_KARHIS.ref()
      || _result:=
            (_b<R_KARHIS.OD & _c<R_KARHIS.OD & #_c)
            |
            (#R_KARHIS.DO & _b>R_KARHIS.DO & (_c>R_KARHIS.DO |_c=#0));
         _msg:=R_KARHIS.P().T+' '+P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE
      ?};
      R_KARHIS.next() & _result
   !};
   {? ~_result
   || FUN.emsg('%1\n%2.'['Karta jest przypisana do współpracownika:'@,_msg])
   ?}
?};
R_KARHIS.cntx_pop();
OSOBA.cntx_pop();
P.cntx_pop();
_result


\a_okrp_m_wer_bfz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Zablokowanie planowania dla współpracownika w wybramnym miesiącu aktualnego okresu rozliczeniowego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zam_msc_plan','okres',A_OKRP_M.A_OKRP,A_OKRP_M.ROK,A_OKRP_M.MSC,A_OKRP_M.sel_size())


\a_okrp_m_wer_bfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Odblokowanie planowania dla współpracownika w wybramnym miesiącu aktualnego okresu rozliczeniowego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zam_msc_plan','okres',A_OKRP_M.A_OKRP,A_OKRP_M.ROK,A_OKRP_M.MSC,A_OKRP_M.sel_size())


\a_okrp_m_wer_bfd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Odblokowanie przeniesienia danych dla współpracownika w wybramnym miesiącu aktualnego okresu rozliczeniowego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? A_OKRP_M.STATUS='X'
|| {? A_OKRP_M.A_OKRP().S_PLAN='X'
      &
      ~FUN.ask('%1\n%2'
         [  'Przeniesienie danych z okresu rozliczeniowego współpracownika zostało zablokowane.'@,
            'Czy chcesz odblokować przenoszenie danych z miesiąca należącego do tego okresu?'@
         ]
      )
   || return()
   ?};
   A_OKRP_M.STATUS:='Z';
   A_OKRP_M.put()
?}


\a_okrm_p_wer_afb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wynik weryfikacji planowania po stronie CMS.
::       Dla współpracownika w wybramnym miesiącu aktualnego okresu rozliczeniowego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('wer_selm','prc_errcms')


\a_okrp_m_wer_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła "rekord przed" w oknie WER w tabeli A_OKRP_M.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:=
   {? A_OKRP_M.STATUS='O'
   || 'Odblokowany'
   |? A_OKRP_M.STATUS='Z'
   || 'Zablokowany'
   |? A_OKRP_M.STATUS='K'
   || 'Odblokowany do korekty'
   |? A_OKRP_M.STATUS='X'
   || 'Dane przeniesione'
   ?};
{? _a
|| _gray:={? A_OKRP_M.STATUS='O' | A_OKRP_M.STATUS='K' || 'ODM' |? A_OKRP_M.STATUS='Z' || 'ZD' || 'OZM' ?};
   A_OKRP_M.actions_grayed('WER',_gray)
?};
~~


\kal_korh_wer_bfe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Informacje szczegółowe dotyczące korygowanego dnia.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KAL_KORH.display();
~~


\kal_korn_wer_bfe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Informacje szczegółowe dotyczące korekty planu pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KAL_KORN.display();
~~


\radio_choice
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wybór znacznika planowania lub rozliczenia dla okresu i miesiąca rozliczeniowego.
::   WE: _a - [STRING] - 'P'-planowanie, 'R'-rozliczenie
::   WY: tablica z parametrami
::----------------------------------------------------------------------------------------------------------------------
_radio:=obj_new('var','txt');
_var:=obj_new('O','Z');
_txt:=obj_new('O','Z');
_var.O:='O';
_var.Z:='Z';
_txt.O:={? _a='P' || 'Odblokowany' || 'Otwarty' ?};
_txt.Z:={? _a='P' || 'Zablokowany' || 'Zamknięty' ?};
_radio.var:=_var;
_radio.txt:=_txt;
_radio


\a_okrmp_m_wer_afm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Zamknięcie miesiąca z przeniesieniem godzin pracy do rozliczenia dla wybranego współpracownika.
::   WE:
::   WY:
::  OLD: \zamk_mc_prac/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
{? A_OKRP_M.STATUS='X'
|| FUN.emsg('%1\n%2'
      [  'Wybrany miesiąc ma status "X - Dane przeniesione".'@,
         'Aby wykonać funkcję należy odblokować dane.'@
      ]
   );
   return(~~)
|? A_OKRP_M.STATUS<>'Z'
|| FUN.emsg('%1\n%2'
      [  'Wybrany miesiąc ma status "O - Otwarty".'@,
         'Aby wykonać funkcję miesiąc musi być wcześniej zablokowany do planowania.'@
      ]
   );
   return(~~)
?};

{? ~FUN.ask('%1\n%2'
      [  'Funkcja przenosi dane o przepracowanych godzinach do kartoteki rozliczenia godzin.'@,
         'Czy kontynuować?'@
      ]
   )
|| return(~~)
?};
_rok:=A_OKRP_M.ROK;
_msc:=A_OKRP_M.MSC;
_dz:=date(_rok,_msc,0);
_r_nast:=_rok;
_m_nast:=
   {? _msc=12
   || _r_nast+=1;
      1
   || _msc+1
   ?};
{? exec('lista_sum_zamk','godziny',_rok,_msc,1)
|| return(~~)
?};
A_OKRM.index('A_OKRMR');
A_OKRM.prefix(_rok,_msc);
{? A_OKRM.first() & A_OKRM.S='Z'
|| {? ~FUN.ask('%1\n%2'
         [  'Wybrany miesiąc ma status "Zamknięty".'@,
            'Czy kontynuować?'@
         ]
      )
   || return(~~)
   ?};
   _dz:={? A_OKRM.DZ<_dz || A_OKRM.DZ || _dz ?}
?};
_blokada:=FUN.ask('Czy blokować kwalifikację dla dni przenoszonych do rozliczenia?'@);

:: Umożliwienie zwrotu dodatku gdy nie może nastąpić zaplanowany odbiór przekroczeń dobowych.
_tab:=exec('zwrot_bufor','godziny');
exec('zwrot_odbioru','prc_mscrozlicz',_tab,_rok,_msc,A_OKRP_M.A_OKRP().P);
{? exec('zwrot_zapisz','prc_mscrozlicz',_tab)
|| {? ~FUN.ask('%1\n%2\n%3'
         [  'Istnieją odbiory w dni wolne, które nie zostały zaznaczone do wypłaty.'@,
            'Należy zmienić dzień odbioru lub zaznaczyć wypłatę dodatku.'@,
            'Czy mimo to kontynuować procedurę zamknięcia miesiąca?'@
         ]
      )
   || return(~~)
   ?}
?};

exec('del_godz','godziny',_rok,_msc);
:: Usuwanie w następnym miesiącu rozliczeniowym, godzin pochodzących z bieżącego miesiąca i nie rozliczonych.
exec('del_godz','godziny',_r_nast,_m_nast,0,date(_rok,_msc,1),date(_rok,_msc,0));

:: Znalezienie przekroczeń dla niepełnoetatowca - jeżeli jest następuje zamiana ze składnika 64 na składnik 65.
{? __HARM.KW_AUTO || exec('przekroczenie','prc_mscrozlicz',_rok,_msc,_rok,_msc) ?};

exec('akt_godz','godziny', _rok, _msc,,,,,date(_rok,_msc,1),date(_rok,_msc,_dz~3),_blokada);
exec('akt_godz','godziny', date(_rok,_msc-1,0)~1, date(_rok,_msc-1,0)~2,_rok,_msc,,1,,,_blokada);
exec('zwrot_dodatek','prc_mscrozlicz',_tab,_rok,_msc);
A_OKRP_M.STATUS:='X';
A_OKRP_M.put();
:: Sprawdzenie czy zamykamy miesiąc z datą ostatniego dnia miesiąca i czy następny miesiąc rozliczeniowy jest zamknięty.
_txt:='Dane o godzinach pracy pracownika za miesiąc %1 zostały przeniesione do rozliczenia.'[_dz$8];
{? _dz<>date(_rok,_msc,0)
|| A_OKRM.cntx_psh();
   A_OKRM.prefix(_r_nast,_m_nast);
   {? A_OKRM.first() & A_OKRM.S='Z'
   || _txt+='\n'+'Miesiąc %1 jest zamknięty.'@[date(_r_nast,_m_nast,1)$8];
      _txt+='\n'+'Aby prawidłowo rozliczyć godziny pracy po dacie %1, należy ponownie otworzyć i zamknąć miesiąc %2.'@
         [$_dz,date(_r_nast,_m_nast,1)$8]
   ?};
   A_OKRM.cntx_pop()
?};
FUN.info(_txt);
~~


\sel_r_errcms
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Wyniki weryfikacji planowania po stronie CMS - wyświetlanie w oknie WER tabeli A_OKRM.
::   WE: _a - [REFERENCE] Parametr do wywołania funkcji wyświetlającej błędy planowania.
::   WY:
::  OLD: \rap_err/rap_kont.fml
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_ok:=1;

_tabtmp:=tab_tmp(1,
   'OD','DATE','Od',
   'DO','DATE','Do',
   'ZAKRES','STRING[1]','ZAKRES'
);
:: Ustalenie miejsca wywołania funkcji, jeżeli funkcja będzie wywoływana bez parametru lub parametr będzie wskazywał
:: na tabelę inną niż A_OKR lub A_OKRM zostanie wyświetlone okno do edycji parametrów do wyświetlania błędów planowania.
{? _a
|| {? ref_tab(_a)=A_OKR
   || _tabtmp.OD:=A_OKR.OD;
      _tabtmp.DO:=A_OKR.DO;
      _tabtmp.ZAKRES:='T'
   |? ref_tab(_a)=A_OKRM
   || _tabtmp.OD:=date(A_OKRM.R,A_OKRM.M,1);
      _tabtmp.DO:=date(A_OKRM.R,A_OKRM.M,0);
      _tabtmp.ZAKRES:='N'
   || _ok:=0
   ?}
|| _ok:=0
?};
:: Przygotowanie i wyświetlenie okna do edycji parametrów do wyświetlania błędów planowania gdy przekazany parametr
:: nie pozwolił na ustalenie wartości domyślnych.
{? ~_ok
|| {? __HARM.WYBRANY
   || A_OKR.seek(__HARM.OKR_REF);
      _tabtmp.OD:=A_OKR.OD;
      _tabtmp.DO:=A_OKR.DO;
      _tabtmp.ZAKRES:='T'
   || _tabtmp.OD:=date(date()~1,date()~2,1);
      _tabtmp.DO:=date(date()~1,date()~2,0);
      _tabtmp.ZAKRES:='N'
   ?};

   _ed:=_tabtmp.mk_edit('Parametry raportu błędów w planowaniu czasu pracy'@,,'iderr20170413');
   _tabtmp.win_edit(_ed);
   _tabtmp.win_esep(_ed,'Dane podstawowe');
   _tabtmp.win_efld(_ed,,'OD',,,10,,,'Od'@,,'Początek zakresu wyświetlanych błędów'@);
   _tabtmp.win_efld(_ed,,'DO',,,10,,,'Do'@,,'Koniec zakresu wyświetlanych błędów'@);
   _tabtmp.win_efld(
      _ed,,
      'ZAKRES',,,,,
      ~__HARM.WYBRANY,
      'Raport dla wybranego okresu rozliczeniowego'@,,,
      'check-box',,
      "'T'",
      "'N'"
   );
   exec('ok_esc','#window',_tabtmp,_ed);
   _ok:=_tabtmp.edit(
      "  _result:=__CHK.record(cur_tab(),,'OD','DO');
         {? _result=''
         || {? cur_tab().OD>cur_tab().DO
            || FUN.emsg('Data \"Od\" nie może być większa od daty \"Do\".'@);
               _result:='OD'
            ?}
         ?};
         _result
      "
   )
?};
_tabtmp.add();

{? _ok
|| _tab:=exec('gen_sel_r_errcms','prc',_tabtmp.OD,_tabtmp.DO,{? _tabtmp.ZAKRES='T' || A_OKR.ref() || 0 ?});
   _tab.index(_tab.ndx_tmp(,,'TYP',,,'NAZW',,,'IMIE',,,'DATA',,));

   _wer:=_tab.mk_sel('Raport błędów w planowaniu czasu pracy'@,,,'rap_errcms',,,,,'U',,,,,'maximized');
   _tab.win_fld(_wer,,'TYP',,,1,,1,'Typ'@,,'Źródło danych: \'P\'-plan,\'G\'-grafik'@);
   _tab.win_fld(_wer,POLA_GRP,'TXT_1',,,-10,,1,'Typ - opis'@,,'Opis źródła danych'@);
   _tab.win_fld(_wer,,'RODZAJ',,,1,,1,'Rodzaj'@,,'Błąd dotyczy: \'M\'-miesiąca, \'O\'-okresu, \'D\'-dnia'@);
   _tab.win_fld(_wer,POLA_GRP,'TXT_2',,,20,,1,'Rodzaj - opis'@,,'Opis rodzaju błędu'@);
   _tab.win_fld(_wer,,'T',,,10,,1,'Nr teczki'@,,'Numer teczki współpracownika'@);
   _tab.win_fld(_wer,,'NAZW',,,15,,1,'Nazwisko'@,,'Nazwisko współpracownika'@);
   _tab.win_fld(_wer,,'IMIE',,,12,,1,'Imię'@,,'Imię współpracownika'@);
   _tab.win_fld(_wer,,'WYDZIAL',,,-10,,,'Jednostka organizacyjna'@,,'Jednostka organizacyjna współpracownika'@);
   _tab.win_fld(_wer,,'STN',,,15,,1,'Stanowisko'@,,'Stanowisko współpracownika'@);
   _tab.win_fld(_wer,,'DATA',,,10,,1,'Data'@,,'Dzień błędnie zaplanowany'@);
   _tab.win_fld(_wer,,'KIEROW',,,20,,1,'Przełożony'@,,'Przełożony współpracownika'@);
   _tab.win_fld(_wer,,'DESCR',,,40,,1,'Opis'@,,'Informacja o błędzie'@);
   {! _ii:=0..1
   |! _tab.win_act(_wer,_ii,'Formuła','Plan'@@,,,
         "  cur_tab.prefix('P');
            cur_tab().actions_grayed(cur_win(),'P');
            cur_tab.first()
         ",,,,,,'P'
      );
      _tab.win_act(_wer,_ii,'Formuła','Grafik'@@,,,
         "  cur_tab.prefix('G');
            cur_tab().actions_grayed(cur_win(),'G');
            cur_tab.first()
         ",,,,,,'G'
      );
      _tab.win_act(_wer,_ii,'Rekord',,,,
         "  POLA_GRP.TXT_1:=
               {? cur_tab().TYP='G'
               || 'Grafik'
               || 'Plan'
               ?};
            POLA_GRP.TXT_2:=
               {? cur_tab().RODZAJ='O'
               || 'Błędy planowania okresu'
               |? cur_tab().RODZAJ='M'
               || 'Błędy planowania miesiąca'
               || 'Błędy planowania dnia'
               ?}
         "
      )
   !};
   _tab.win_act(_wer,,'Kolejność');
   _tab.win_act(_wer,,'Szukaj');
   _tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Plan'@],'menu:P');
   _tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Grafik'@],'menu:G');
   _tab.win_btn(_wer,'text=%1,icon=xwin16.png:14,panel=bottom,align=end'['Anuluj'@],'key:Esc');

   _tab.prefix('P');
   _tab.actions_grayed(_wer,'P');
   _tab.win_sel(_wer);
   _tab.select();
   _tab.ndx_drop()
?};
obj_del(_tabtmp);
~~


\gen_sel_r_errcms
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PM [12.41]
:: OPIS: Raport błędów w planowaniu w portalu
::   WE: _a - [DATE] Data od.
::       _b - [DATE] Data do.
::       [_c] - [REFERENCE] Okres rozliczeniowy.
::   WY: Tabela tymczasowa
::  OLD: \gen_err/rap_kont.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('
   select T T,
      OSOBA.NAZWISKO NAZW,
      OSOBA.PIERWSZE IMIE,
      \'                \' WYDZIAL,
      STN.ST STN,
      R_ERRCMS.P,
      R_ERRCMS.TYP,
      R_ERRCMS.RODZAJ,
      R_ERRCMS.DATA,
      R_ERRCMS.DESCR,
      \'                                                                      \' KIEROW
   from R_ERRCMS join P using(R_ERRCMS.P, P.REFERENCE) join OSOBA using (P.OSOBA, OSOBA.REFERENCE)
      join STN using(P.ST,STN.reference)
      join A_OKRP using (R_ERRCMS.A_OKRP, A_OKRP.REFERENCE) join A_OKR using (A_OKRP.OKR, A_OKR.REFERENCE)
   where R_ERRCMS.DATA>=to_date(:_a) and R_ERRCMS.DATA<=to_date(:_b) and
      R_ERRCMS.P in (select :_d.REF from :_d) '+
      {? var_pres('_c')=type_of(A_OKR.ref())
      || 'and A_OKR.REFERENCE=:_c'
      || ''
      ?}+'
   order by 2,3,9',
   _a,_b,_c,exec('dostepne_p','schemat','PRC','*T')
);

P.cntx_psh();
P.use('pracowni');
H.cntx_psh();
H.index('_HISTKOD');
_podzorg:=
   "  H.prefix(P.ref(),'Z');
      {? H.find_le(_b) || ($('H.'+_a))() || '' ?}
   ";
_prac:=sql('select distinct P,DATA,\'                                                  \' KIEROW
            from :_a
            order by 1,2',
            _tab
);
{? _prac.first()
|| {!
   |? {? P.seek(_prac.P,,1)
      || _szef:=exec('prac_nad','stanprac',P.ref(),,'TYPPOZ','PLANCZP',,1,'KPRT',0);
         _prac.KIEROW:={? _szef.first() || _szef.IMIE+ ' ' +_szef.NAZWISKO || '' ?};
         _prac.put();
         obj_del(_szef);
         &_szef
      ?};
      _prac.next()
   !}
?};
_rub:=__RUB.sys_sql(112)+','+__RUB.sys_sql(1323)+','+__RUB.sys_sql(133)+','+__RUB.sys_sql(1227);
{? +_rub
|| _NB:=sql('select N.OD, N.DO, N.REFERENCE as REF , N.P '+
            'from N join R using (N.NB,R.REFERENCE) join :_c using (N.P,:_c.P) '+
            'where N.KOR=\'N\' and R.RN in ('+_rub+') and N.OD<=to_date(:_b) and to_date(:_a)<=N.DO order by P, OD, DO',
            _a,_b,_prac
   );
   {? _tab.first()
   || FUN.prg_start(_tab.size(),'Weryfikacja błędów w planowaniu.'@,,2);
      {!
      |? _del:=0;
         _NB.prefix(_tab.P);
         {? P.seek(_tab.P,,1) & P.GRAFIK='T' & ~(_NB.find_le(_a) & _NB.DO>=_b)
         || _tab.KIEROW:={? _prac.find_key(_tab.P) || _prac.KIEROW || '' ?};
            _tab.WYDZIAL:=_podzorg('WYDZIAL().SYMBOL',_tab.DATA);
            _tab.STN:=_podzorg('ST().ST',_tab.DATA);
            _tab.put()
         || _del:=1
         ?};
         FUN.prg_next();
         {? _del || _tab.del(,1)=2 || _tab.next() ?}
      !};
      FUN.prg_stop()
   ?}
?};
H.cntx_pop();
P.cntx_pop();
_tab


\r_errkar_wer_afp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Import danych z plików generowanych przez czytniki RCP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('czytdane','prc',1);
~~


\czytdane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.28]
::  MOD: MicKoc [22.26]
:: OPIS: Import danych z plików generowanych przez czytniki RCP.
::   WE: _a - [INTEGER] 1- ponowny odczyt z tabeli R_ERRKAR.
::   WY:
::  OLD: \czytdane/czytniki.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~R_BUFFER.lock(2,1)
|| FUN.info('%1\n%2'['Akcja została wywołana przez innego użytkownika.'@,'Proszę spróbować później.'@]);
   return(0)
|| R_BUFFER.erase()
?};
_przerwy:=exec('isEnabled','prc_przerwy');
_a:={? var_pres('_a')=1 || _a || 0 ?};
_komunikat:=
   {? _a
   || '%1\n%2'['Powtórny odczyt danych z błędnych zapisów.'@,'Czy kontynuować?'@]
   || '%1\n%2'['Odczyt danych z pliku czytników.'@,'Czy kontynuować?'@]
   ?};

{? FUN.choice(_komunikat,'ASK','Tak'@,,,,'Nie'@)
|| exec('czytaj','#stalesys',date());
   P.cntx_psh();
   P.prefix();
   VAR_DEL.delete('TAB_ERR');
   TAB_ERR:=tab_tmp(4,
      'NA','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko'@,
      'IM','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię'@,
      'K','STRING['+$MS.fld_len(R_KARTY,'O')+']','Karta'@,
      'D','DATE','Data'@,
      'T','TIME','Czas'@,
      'O','STRING[100]','Opis'@
   );
   _tab_prac:=tab_tmp(1,'REF','INTEGER','Ref');
   _tab_kart:=tab_tmp(1,
      'P','INTEGER','Pracownik',
      'START','STRING[50]','Start',
      'STOP','STRING[50]','Stop'
   );
   _DataOd:=_DataDo:=_ZDate:=_DataOdK:=_DataDoK:=_ZDateK:=date(0,0,0);
   _server:=(1+KST.R_ASCII)<>'@';
   _SrcName:=KST.R_ASCII+exec('sep','#file',_server)+KST.R_RC().P;
   _Akt_Err:=
      "  _a.CZ:=_b.CZ;
         _a.KP:=_b.KP;
         _a.R:=_b.R;
         _a.M:=_b.M;
         _a.D:=_b.D;
         _a.ST:=_b.ST;
         _a.TR:=_b.TR;
         _a.MD:=_b.MD;
         _a.GODZ:=_b.GODZ;
         _a.MIN:=_b.MIN;
         _a.DOD:=_b.DOD
      ";
   _SrcFile:=_err_kart:=0;

   {? ~_a
   || _ChkOn:=(fexists(_SrcName,0) & fcopy(_SrcName,'dane.txt',0,1,1));
      _SrcFile:=
         {? _ChkOn
         || fopen('dane.txt','r',1)
         || FUN.emsg('%1 %2.\n%3'['Brak pliku:'@,_SrcName,'Operacja zostanie przerwana.'@]);
            0
         ?};
      &_ChkOn
   ?};

   R_BUFFER.index('R_BUFFER');
   R_KARTY.index('R_KARTY');
   {? _SrcFile | _a
   || R_BUFFER.blank();
      {? _a
      || exec('SetChk','prc',VAR_EDIT.ROK,VAR_EDIT.MSC);

         echo('Trwa odczyt z kartoteki błędów'@);
         MASK.Use('R_ERRKAR',VAR_EDIT.ROK,VAR_EDIT.MSC);
         R_ERRKAR.clear();
         {? ~R_ERRKAR.first()
         || FUN.info('Brak zapisów w kartotece błędów.'@);
            R_BUFFER.unlock();
            P.cntx_pop();
            VAR_DEL.delete('TAB_ERR');
            return(0)
         ?};
         {!
         |? _Akt_Err(R_BUFFER,R_ERRKAR);
            R_BUFFER.R:=
               {? #R_BUFFER.R
               || R_BUFFER.R
               || _r:=#(((R_ERRKAR.name())-2)+2);
                  _r:={? _r<80 || $(2000+_r) || $(1900+_r); &_r ?}
               ?};
            {? {? _przerwy
               || ~R_BUFFER.find_key(R_BUFFER.KP,R_BUFFER.M,R_BUFFER.D,R_BUFFER.GODZ,R_BUFFER.MIN,R_BUFFER.CZ)
               || ~R_BUFFER.find_key(R_BUFFER.KP,R_BUFFER.M,R_BUFFER.D,R_BUFFER.GODZ,R_BUFFER.MIN)
               ?}
            || {? R_BUFFER.add(1)
               || R_BUFFER.blank();
                  R_ERRKAR.del()
               || R_BUFFER.blank;
                  R_ERRKAR.next()
               ?}
            || R_BUFFER.blank();
               R_ERRKAR.del()
            ?}
         !};
         echo()
      || echo('%1 %2.'['Trwa odczyt pliku:',_SrcName]);
         {!
         |? (_Rekord:=fread(_SrcFile))<>'\n'
         |! {? +_Rekord
            || ($(KST.R_RC().FORMULA().FORMULA))(_Rekord);
               R_BUFFER.R:=
               {? #R_BUFFER.R
               || R_BUFFER.R
               || _Msc:={? #R_BUFFER.M || #R_BUFFER.M || date()~2 ?};
                  {? _Msc>date()~2
                  || $((date()~1)-1)
                  || $(date()~1)
                  ?}
               ?};
               {? {? _przerwy
                  || ~R_BUFFER.find_key(R_BUFFER.KP,R_BUFFER.M,R_BUFFER.D,R_BUFFER.GODZ,R_BUFFER.MIN,R_BUFFER.CZ)
                  || ~R_BUFFER.find_key(R_BUFFER.KP,R_BUFFER.M,R_BUFFER.D,R_BUFFER.GODZ,R_BUFFER.MIN)
                  ?}
               || R_BUFFER.add(1)
               ?};
               R_BUFFER.blank()
            ?}
         !};
         echo()
      ?};
      _TestData:=date(0,0,0);
      MASK.Init();
      _Zn_Prac:=
         "  {? R_KARTY.find_key(_a,)
            || R_KARHIS.index('ZW_KAR_D');
               R_KARHIS.prefix('T',R_KARTY.ref());
               {? R_KARHIS.find_le(_b) || R_KARHIS.P || null() ?}
            || null()
            ?}
         ";

:: marginesy wejścia i wyjścia
      _MARGWEWY:="
         _Kalend:=
            {? R_WZCZ.find_le(R_REJ_WW.DZK)
            || {? R_WZCZ.GRAFIK='T' || R_WZCZ.CZESC || R_WZCZ.KAL ?}
            || P.KAL
            ?};
         {? _Kalend
         || _KalOk:=0;
            KAL_ROK.prefix(_Kalend);
            {? KAL_ROK.find_key(R_REJ_WW.DZK~1)
            || KAL_DEF.index('KAL_DEF');
               KAL_DEF.prefix(KAL_ROK.ref());
               {? KAL_DEF.find_key(R_REJ_WW.DZK)
               || {!
                  |? {? KAL_DEF.TYP<>'R'
                     || KAL_DEF.prev()
                     || _KalOk:=1;
                        0
                     ?}
                  !}
               ?}
            ?};
            {? _KalOk
            || _ok:=0;
               _KalWej:=KAL_DEF.POCZATEK;
               _KalWyj:=KAL_DEF.KONIEC;
               _MargRo:='';
               _MargWe:=_MargWy:=time(0,0,0);
               R_MARG.index('R_MARG');
               R_MARG.prefix();
               {? R_MARG.find_key(P.ref())
               || _MargWe:=time(R_MARG.WE~1,R_MARG.WE~2,0);
                  _MargWy:=time(R_MARG.WY~1,R_MARG.WY~2,0);
                  _Marg_P_We:=time(R_MARG.PWE~1,R_MARG.PWE~2,0);
                  _Marg_P_Wy:=time(R_MARG.PWY~1,R_MARG.PWY~2,0);
                  _MargRo:=R_MARG.RODZAJ;
                  _ok:=1
               ?};
               {? ~_ok
               || _MargWe:=time(KST.R_WE~1,KST.R_WE~2,0);
                  _MargWy:=time(KST.R_WY~1,KST.R_WY~2,0);
                  _Marg_P_We:=time(KST.R_PWE~1,KST.R_PWE~2,0);
                  _Marg_P_Wy:=time(KST.R_PWY~1,KST.R_PWY~2,0);
                  _MargRo:=KST.R_WEWY_R;
                  {? _MargWe=*0 & _MargWy=*0
                  || _MargWe:=time(KAL_DEF.ROK().NAZWA().WE~1,KAL_NAZW.WE~2,0);
                     _MargWy:=time(KAL_DEF.ROK().NAZWA().WY~1,KAL_NAZW.WY~2,0);
                     _MargRo:='S'
                  ?}
               ?};
               {? _MargRo<>''
               || {? R_REJ_WW.ST=2
                  || {? _MargRo='P'
                     || {? (R_REJ_WW.GD<_KalWej & R_REJ_WW.GD+_MargWe>=_KalWej) |
                           (R_REJ_WW.GD>_KalWej & R_REJ_WW.GD-_Marg_P_We<=_KalWej)
                        || R_REJ_WW.GD:=_KalWej
                        ?}
                     |? _MargRo='S'
                     ||  R_REJ_WW.GD+=_MargWe
                     ?}
                  |? R_REJ_WW.ST=3
                  || {? _MargRo='P'
                     || {? (R_REJ_WW.GD>_KalWyj & R_REJ_WW.GD-_MargWy<=_KalWyj) |
                           (R_REJ_WW.GD<_KalWyj & R_REJ_WW.GD+_Marg_P_Wy>=_KalWyj)
                        || R_REJ_WW.GD:=_KalWyj
                        ?}
                     |? _MargRo='S'
                     ||  R_REJ_WW.GD-=_MargWy
                     ?}
                  ?}
               ?}
            ?}
         ?}";

      {? R_BUFFER.first()
      || {!
         |? _Dzn:={? #R_BUFFER.D || #R_BUFFER.D || date()~3 ?};
            _Msc:={? #R_BUFFER.M || #R_BUFFER.M || date()~2 ?};
            _Rok:=
               {? #R_BUFFER.R
               || #R_BUFFER.R
               || {? _Msc>date()~2
                  || (date()~1)-1
                  || date()~1
                  ?}
               ?};
            _ok:=0;
            _maska:='?';
            {? R_KARTY.find_key(R_BUFFER.KP,)
            || R_KARHIS.index('ZW_KAR_D');
               R_KARHIS.prefix('T',R_KARTY.ref());
               {? R_KARHIS.find_le(date(_Rok,_Msc,_Dzn))
               || _ok:=R_KARHIS.P;
                  _maska:=P.name();
                  0
               || _ok:=0;
                  1
               ?}
            ?};
            R_BUFFER.MA:=_maska;
            R_BUFFER.put();
            R_BUFFER.next()
         !};
::       zapamiętanie zakresu importowanych danych dla poszczególnych pracowników
         {? R_BUFFER.first()
         || R_BUFFER.cntx_psh();
            {!
            |? _Dzn:={? #R_BUFFER.D || #R_BUFFER.D || date~3 ?};
               _Msc:={? #R_BUFFER.M || #R_BUFFER.M || date~2 ?};
               _Rok:=
                  {? #R_BUFFER.R
                  || #R_BUFFER.R
                  || {? _Msc>date~2
                     || (date~1)-1
                     || date~1
                     ?}
                  ?};
               _pracow:=_Zn_Prac(R_BUFFER.KP,date(_Rok,_Msc,_Dzn));
               _tab_kart.prefix(_pracow);
               {? ~_tab_kart.first()
               || _tab_kart.P:=_pracow;
                  _tab_kart.START:=_tab_kart.STOP:=$date(#R_BUFFER.R,#R_BUFFER.M,#R_BUFFER.D)+' '+
                                   $time(#R_BUFFER.GODZ,#R_BUFFER.MIN,0);
                  _tab_kart.add(1)
               || _tab_kart.STOP:=$date(#R_BUFFER.R,#R_BUFFER.M,#R_BUFFER.D)+' '+
                                  $time(#R_BUFFER.GODZ,#R_BUFFER.MIN,0);
                 _tab_kart.put(1)
               ?};
               R_BUFFER.next()
            !};
            R_BUFFER.cntx_pop()
         ?};
::       usunięcie zapisów 'D' oraz 'N'
         R_REJ_WW.cntx_psh();
         {? R_BUFFER.first()
         || {!
            |? R_REJ_WW.use('r_hw'+(($_Rok)+2)+(('0'+$_Msc)+2));
               R_REJ_WW.index('R_REJ_WW');
               MASK.Use('R_REJ_WW',_Rok,_Msc);
               R_REJ_WW.index('R_REJ_WW');
               _Dzn:={? #R_BUFFER.D || #R_BUFFER.D || date()~3 ?};
               _Msc:={? #R_BUFFER.M || #R_BUFFER.M || date()~2 ?};
               _Rok:=
                  {? #R_BUFFER.R
                  || #R_BUFFER.R
                  || {? _Msc>date()~2
                     || (date()~1)-1
                     || date()~1
                     ?}
                  ?};
               {? #(R_REJ_WW.name()+2)<>_Msc
               || R_REJ_WW.use('r_hw'+(($_Rok)+2)+(('0'+$_Msc)+2));
                  R_REJ_WW.index('R_REJ_WW');
                  MASK.Use('R_REJ_WW',_Rok,_Msc);
                  R_REJ_WW.index('R_REJ_WW')
               ?};
               _data:=date(_Rok,_Msc,_Dzn);
               _pracow:=_Zn_Prac(R_BUFFER.KP,_data);
               {? P.seek(_pracow)
               || R_REJ_WW.prefix(P.ref(),_data);
                  _tab_kart.prefix(_pracow);
                  {? R_REJ_WW.first() & _tab_kart.first()
                  || {!
                     |? _rej_time:=$R_REJ_WW.DZ+' '+$R_REJ_WW.GD;
                        {? ('D'*R_REJ_WW.ZM & (_rej_time<=_tab_kart.STOP)) |
                           ('N'*R_REJ_WW.ZM & (_rej_time>=_tab_kart.START & _rej_time<=_tab_kart.STOP))
                        || {? ~exec('isBlokada','prc_rozlicz',P.ref(),_data)
                           || R_REJ_WW.del()
                           || R_REJ_WW.next()
                           ?}
                        || R_REJ_WW.next()
                        ?}
                     !}
                  ?}
               ?};
               R_BUFFER.next()
            !}
         ?};
         R_REJ_WW.cntx_pop();

         {? _a
         || {? ~R_BUFFER.select()
            || {? R_BUFFER.first()
               || {!
                  |? _err_kart:=exec('add_err','czytniki',VAR_EDIT.ROK,VAR_EDIT.MSC,_Akt_Err);
                     R_BUFFER.next()
                  !}
               ?};
               R_BUFFER.unlock();
               P.cntx_pop();
               VAR_DEL.delete('TAB_ERR');
               return(0)
            ?}
         ?}
      ?};
      R_BUFFER.index('R_BUFFEM');
      _Zn_WeWy:=
         "  {? KST.R_KW().O='status'
            || R_WEWY.find_key(#R_BUFFER.ST)
            || R_WEWY.find_key(#R_BUFFER.TR,#R_BUFFER.MD)
            ?}
         ";
      _Akt_Tab:=
         "  _a.ST:=_b.ST;
            _a.TP:=_b.TP;
            _a.RD:=_b.RD
         ";
      _Dod_Rej:=
         "  R_REJ_WW.cntx_psh();
            R_REJ_WW.index('R_REJ_WW');
            R_REJ_WW.prefix(R_REJ_WW.P,R_REJ_WW.DZ);
            {? R_REJ_WW.find_key(R_REJ_WW.GD,R_REJ_WW.ST)
            || R_REJ_WW.del()
            ?};
            R_REJ_WW.cntx_pop();
            R_REJ_WW.add()
         ";

      R_REJ_WW.cntx_psh();
      R_REJ_WW.index('R_REJ_WW');
      R_KARHIS.index('KAR_DATA');
      R_KARTY.clear();
      R_WEWY.index({? KST.R_KW().O='status' || 'R_STATUS' || 'R_TR_MOD' ?});
      R_OPCZYT.index('R_OPCZYT');
      R_OPCZYT.clear();
      PROGRESS.set(R_BUFFER.size(),'Trwa aktualizacja tabeli wejść/wyjść.'@);

      {? R_BUFFER.first()
      || exec('ini_kom','#message',
            'Uwagi do wprowadzanych danych po imporcie we/wy.'@,,
            65535,1,
            MS.fld_len('OSOBA','NAZWISKO')+MS.fld_len('OSOBA','PIERWSZE')+MS.fld_len('P','T')+15
         );
         OSOBA.cntx_psh();
         OSOBA.prefix();
         {!
         |? _Dzn:={? #R_BUFFER.D || #R_BUFFER.D || date()~3 ?};
            _Msc:={? #R_BUFFER.M || #R_BUFFER.M || date()~2 ?};
            _Rok:=
               {? #R_BUFFER.R
               || #R_BUFFER.R
               || {? _Msc>date()~2
                  || (date()~1)-1
                  || date()~1
                  ?}
               ?};
            _data:=date(_Rok,_Msc,_Dzn);
            R_REJ_WW.GD:=time(#R_BUFFER.GODZ,#R_BUFFER.MIN,0);
            R_REJ_WW.DZ:=_data;
            R_REJ_WW.CZ:=R_BUFFER.CZ;
            R_REJ_WW.ZM:='A';
            {? _DataOd=_ZDate | _DataOd>R_REJ_WW.DZ
            || _DataOd:=R_REJ_WW.DZ
            ?};
            {? _DataDo=_ZDate | _DataDo<R_REJ_WW.DZ
            || _DataDo:=R_REJ_WW.DZ
            ?};
            {? R_BUFFER.MA<>'?'
            || {? P.name()<>R_BUFFER.MA
               || P.use(R_BUFFER.MA);
                  MASK.Init();
                  R_REJ_WW.index('R_REJ_WW');
                  R_KARHIS.index('KAR_DATA')
               ?};
               {? R_OPCZYT.find_key(R_REJ_WW.CZ,)
                  &
                  R_OPCZYT.SYMBOL<>'<WEJWYJ>'
               || {? _Zn_WeWy() || _Akt_Tab(R_REJ_WW,R_WEWY) ?};
                  {? ~(R_REJ_WW.P:=_Zn_Prac(R_BUFFER.KP,R_REJ_WW.DZ))
                  || _err_kart:=exec('add_err','czytniki',R_REJ_WW.DZ~1,R_REJ_WW.DZ~2,_Akt_Err)
                  || exec('add_zap','r_kart',R_OPCZYT.SYMBOL)
                  ?}
               || R_REJ_WW.P:=_Zn_Prac(R_BUFFER.KP,R_REJ_WW.DZ);
                  {? exec('isBlokada','prc_rozlicz',R_REJ_WW.P,R_REJ_WW.DZ)
                  || exec('add_kom','#message',
                        'W dniu %1 dane zablokowane do edycji.'@[R_REJ_WW.DZ$1],
                        157,
                        '%1 %2 %3:'[R_REJ_WW.P().OSOBA().NAZWISKO,OSOBA.PIERWSZE,'[nr teczki - %1]'@[form(P.T)]]
                     )
                  || {? R_REJ_WW.P
                     || {? _Zn_WeWy() || _Akt_Tab(R_REJ_WW,R_WEWY) ?};
                        _Mask:=MASK.Name('R_REJ_WW',R_REJ_WW.DZ~1,R_REJ_WW.DZ~2);
                        {? R_REJ_WW.name()<>(_Mask)
                        || R_REJ_WW.use(_Mask);
                           R_REJ_WW.index('R_REJ_WW')
                        ?};
                        R_REJ_WW.prefix(R_REJ_WW.P,R_REJ_WW.DZ);

                        _tab_prac.REF:=#R_REJ_WW.P;
                        _tab_prac.add(1);
                        R_REJ_WW.P().OSOBA();
:: ustalenie daty kwalifikacji
                        R_WZCZ.cntx_psh();
                        R_WZCZ.index('R_WZCZ');
                        R_WZCZ.prefix(P.name(),P.ref());
                        exec('set_dzk','czytniki');
:: dodanie zapisu pierwotnego
                       __HARM.add_hist();
:: dodanie zapisu do kwalifikacji po uwzględnieniu marginesów
                        _MARGWEWY();
                        _Dod_Rej();

                        R_WZCZ.cntx_pop()
                     || _err_kart:=exec('add_err','czytniki',R_REJ_WW.DZ~1,R_REJ_WW.DZ~2,_Akt_Err)
                     ?}
                  ?};
                  {? _DataOdK=_ZDateK | _DataOdK>R_REJ_WW.DZ
                  || _DataOdK:=R_REJ_WW.DZK
                  ?};
                  {? _DataOdK=_ZDateK | _DataDoK<R_REJ_WW.DZ
                  || _DataDoK:=R_REJ_WW.DZK
                  ?};
                  {? (_Rok<>_TestData~1) | (_Msc<>_TestData~2)
                  || _TestData:=date(_Rok,_Msc,1);
                     exec('SetChk','prc',_Rok,_Msc)
                  ?}
               ?}
            || _err_kart:=exec('add_err','czytniki',R_REJ_WW.DZ~1,R_REJ_WW.DZ~2,_Akt_Err)
            ?};
            PROGRESS.next();
            R_BUFFER.del()
         !};
         OSOBA.cntx_pop();
         TAB_ERR.win_sel(TAB_ERR.mk_sel('Błędy rejestracji wejść/wyjść'@,,1));
         {? TAB_ERR.first() || TAB_ERR.select() ?};

         P.cntx_psh();
         MASK.Init();
         P.prefix();
         _tab_p_g:=sql('select distinct REF from :_a',_tab_prac);
         {? _tab_p_g.first() & {? VAR_EDIT.FLAGA=2 || _DataOdK<>#0 || _DataOd<>#0 ?}
         || PROGRESS.set(_tab_p_g.size(),'Trwa aktualizacja tabeli dziennej.'@);
            {!
            |? {? P.seek(_tab_p_g.REF,)
               || {? VAR_EDIT.FLAGA=2
                  || exec('akt_prac','prc_wewy',_DataOdK,_DataDoK,1,1)
                  || exec('akt_prac','prc_wewy',_DataOd,_DataDo)
                  ?}
               ?};
               PROGRESS.next();
               _tab_p_g.next()
            !}
         ?};
         P.cntx_pop();
         exec('end_kom','#message')
      ?};
      PROGRESS.close();
      R_REJ_WW.cntx_pop();
      echo();

      {? ~_a
      || fclose(_SrcFile);
         ferase(_SrcName,0);
         _BckName:=('0'+$(date()~2)+2)+('0'+$(date()~3)+2);
         _BckName+=('0'+$(time()~1)+2)+('0'+$(time()~2)+2)+'.txt';
         {? fcopy('dane.txt',_BckName,1,1,1) || ferase('dane.txt',1) ?}
      ?}
   ?};

   KST.R_DO:=date();
   exec('zapisz','#stalesys',1,KST,'R_DO');
   P.cntx_pop();
   VAR_DEL.delete('TAB_ERR');
   MASK.Init();
   _msg:='Import danych z pliku zakończony.'@;
   {? _err_kart
   || _msg+='\n%1\n%2'
         [  'W trakcie importu pojawiły się zapisy z nieaktywnymi kartami pracy.'@,
            'Proszę zweryfikować błędy.'@
         ]
   ?};
   FUN.info(_msg)
|| FUN.info('Operacja przerwana przez użytkownika.'@)
?};
R_BUFFER.unlock();
~~


\get_wodb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Wyszukanie wniosków o odbiór na podany dzień.
::   WE: _a - [REFERENCE] P.ref()
::       [_b] - [REFERENCE] A_OKR.ref
::       _c - [DATE] Data
::   WY: Zwracana jest tabela z wnoskami o odbiór
::  OLD: \get_wodb/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
  _p_ref:={? var_pres('_a')=type_of(null()) || _a || return(0) ?};
_okr_ref:={? var_pres('_b')=type_of(null()) || _b || null()    ?};
  _dzien:={? var_pres('_c')=type_of(#0)     || _c || return(0) ?};

_sql:='select * from R_WO where R_WO.P=:_a and R_WO.DO=to_date(:_c)';
{? _okr_ref || _sql+=' and R_WO.A_OKR=:_b' ?};
_tab:=sql(_sql,_p_ref,_okr_ref,_dzien);
_tab


\get_r_odp_czas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Zliczenie czasu odpracowanego na podany dzień.
::   WE: _a - [REFERENCE] P.ref()
::       _b - [DATE] Data
::       [_c] - [REFERENCE] R_ODN.ref() zliczanie tylko dla wskazanego wniosku w tym dniu.
::       [_d] - [STRING] Co zliczamy.
::   WY: Zwracany jest czas odebranych godzin w milisekundach
::  OLD: \get_r_odp_czas/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')<>type_of(null()) || return(0) || _a ?};
_dzien:={? var_pres('_b')<>type_of(#0) || return(0) || _b ?};
_w_ref:={? var_pres('_c')<>type_of(null()) || null() || _c ?};
_co:={? var_pres('_d')<>type_of('') || 'G' || _d ?};
_czas:=0;
_godz:=time(0,0,0);

R_ODP.cntx_psh();
R_ODP.index('PRAC');
R_ODP.clear();
R_ODP.prefix(_p_ref,_dzien);
{? R_ODP.first()
|| {!
   |? {? R_ODP.R_ODN().A='T' & (_w_ref=null() | _w_ref=R_ODP.R_ODN)
      || {? _co='G'
         || {!
            |? _godz+=R_ODP.G;
               R_ODP.next()
            !}
         ?};
         {? _co='GO'
         || {!
            |? _godz+=R_ODP.GO;
               R_ODP.next()
            !}
         ?};
         _czas+=(*_godz)*60*1000
      ?};
      R_ODP.next()
   !}
?};
R_ODP.cntx_pop();
_czas


\chk_VAR_EDIT_ZAKR_DAT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Weryfikacja poprawności podanych parametrów dat w oknie ZAKR_DAT ze zmiennej VAR_EDIT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=__CHK.record(VAR_EDIT,,'D_OD','D_DO');
{? _result=''
|| {? VAR_EDIT.D_OD>VAR_EDIT.D_DO
   || FUN.emsg('Wartość w polu "Od daty" nie może być większa od wartości w polu "Do daty".'@);
      _result:='D_OD'
   ?}
?};
_result


\r_marg_plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK[20.xx]
:: OPIS: Czy margines pracownika zgodny z planem.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R_MARG.RODZAJ='P'


\r_marg_zero_plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK[20.xx]
:: OPIS: Usunięcie danych o dodatkowym marginesie dla typu "P - zgodny z planem".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? R_MARG.RODZAJ<>'P'
|| R_MARG.PWE:=*0;
   R_MARG.PWY:=*0;
   R_MARG.efld_opt('RED', 'enable=0',, 'PWE');
   R_MARG.efld_opt('RED', 'enable=0',, 'PWY')
|| R_MARG.efld_opt('RED', 'enable=1',, 'PWE');
   R_MARG.efld_opt('RED', 'enable=1',, 'PWY')
?};
~~


\prc_mcr_godz_raporty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Główna formuła - Zestawienia i raporty (godziny pracy).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

:: zachowaj stan tabel
OSOBA.cntx_psh();
P.cntx_psh();

:: Wydruki zestawień czasu pracy
exec('xxx_grp_act','personel',_set,'PRC_CZP_WYDR','Wydruki zestawień czasu pracy'@,,,
      "exec('rep_exec','#b_report','PRC_CZP_WYDR','prc_raportmiesieczny*',,1);''");

_set.run('Zestawienia i raporty'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();

exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\prc_mcr_godz_akcje_grupowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Główna formuła - Operacje grupowe (godziny pracy).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

:: zachowaj stan filtra i tabel
_nfo:=exec('get','#filter',P);
OSOBA.cntx_psh();
P.cntx_psh();

exec('xxx_grp_act','personel',
   _set,
   'PRC_GRP_DWZG',
   'Weryfikacja zatwierdzonych godzin'@,
   'Weryfikacja zatwierdzonych godzin dla wszystkich współpracowników'@
);

_set.run('Operacje grupowe'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();

exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\prc_har_parametry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Formuła główna - Zakres danych (Harmonogramy) w dziedzinie PRC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? __PARSES.editPar('F_ZATR','JednostkaOrganizacyjna','ZakresDanych','OkresRozliczeniowy_Harmonogramy')
|| _sch:=exec('domyslny','schemat','PODZORG');
   _skl:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
   P_FILTER.UD_DEF:=exec('szukaj_ud_def','schemat',_sch,_skl).REF;
   P_FILTER.F_ZATR:=__PARSES.getVal('F_ZATR').REF;
   P_FILTER.STATUS:=__PARSES.getVal('ZakresDanych');
   _okrRef:=__PARSES.getVal('OkresRozliczeniowy_Harmonogramy').REF;
   A_OKR.seek(_okrRef);

:: odrysuj okienko obszaru
   params_exec('pxx_odrysuj','pkd')
?}


\prc_conf_dppn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Wyświetlenie indywidualnych godzin pory nocnej pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,GDPN,'GDPNPD','WER','Z','Z','PRC_CZP_DRPN','PRC_CZP_DPPN',P,,1)
|| return()
?};

_a.prolog+="GDPN.cntx_psh(); GDPN.win_edit('RED'); ";
_a.epilog+="GDPN.cntx_pop(); ";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Pora nocna'@,,,,,
   $($_a.bs)(_a.map,
      "  GDPN.prefix(P.ref())
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\gdpn_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Rekord - po" dla tabeli GDPN.
::   WE: [_a] [STRING] - Wywołanie grupowe [T/N - domyślnie]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_grupa:={? var_pres('_a')=type_of('') || _a || 'N' ?};
_owner:=P.ref();
_ref:=GDPN.ref();
_dataod:=GDPN.DOD;

{? (_chk:=__CHK.record(GDPN,,'DOD','GOD','GDO'))<>''
|| return(_chk)
?};
{? GDPN.DDO<>date(0,0,0) & GDPN.DOD>GDPN.DDO
|| return(__CHK.err_fld(GDPN,'DDO',1,'"Data do" nie może być wcześniejsza niż "Data od".'@))
?};

{? _grupa='N'
|| _err:=0;
   GDPN.cntx_psh();
   GDPN.index('GDPNPD');
   GDPN.prefix(_owner);
   {? GDPN.find_key(GDPN.DOD) & (-menu_txt()='dołącz' | GDPN.ref<>_ref)
   || _err:=1
   ?};
   GDPN.cntx_pop();
   {? _err
   || FUN.emsg('Zapis od dnia %1 już występuje w kartotece.'@[GDPN.DOD$1]);
      return('DOD')
   || {? (_chk:=exec('gdpn_over','prc',GDPN.DOD,GDPN.DDO,_owner))<>''
      || FUN.emsg('Wprowadzono niespójne daty'@);
         return(_chk)
      ?}
   ?}
?};

''


\prc_har_widok_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Zmiana widoku uproszczony/rozbudowany.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pxx_widok_zmien','pkd','PRC_HAR')


\gdpn_over
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Walidacja rekordu tabeli GDPN.
::   WE: _a [DATE] - Data rozpoczęcia
::       _b [DATE] - Data zakończenia
::       _c [REFERENCE] - Wskazanie na pracownika
::----------------------------------------------------------------------------------------------------------------------
_od:=   {? var_pres('_a')=type_of(date()) || _a || date(0,0,0) ?};
_do:=   {? var_pres('_b')=type_of(date()) || _b || date(0,0,0) ?};
_pref:= {? var_pres('_c')=type_of(null)   || _c || null ?};
_ret:='';
_zdate:=date(0,0,0);
_gdpn:={? -menu_txt()='popraw' || GDPN.ref() || null() ?};

GDPN.cntx_psh();
GDPN.index('GDPNPD');
GDPN.prefix(_pref);
{? GDPN.last()
|| {!
   |? {? _gdpn<>GDPN.ref()
      || {? {? GDPN.DDO=_zdate | _od=_zdate || 1 || _od<=GDPN.DDO ?} &
            {? GDPN.DOD=_zdate | _do=_zdate || 1 || GDPN.DOD<=_do ?}
         || {? (GDPN.DDO=_zdate | GDPN.DDO>=_do) & _od>GDPN.DOD
            || GDPN.DDO:=_od-1;
               GDPN.put()
            || _ret:='DDO'
            ?}
         ?}
      ?};
      _ret='' & GDPN.prev()
   !}
?};
GDPN.cntx_pop();

_ret


\wyp_buff_pierw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wypełnia bufor tabeli tymczasowej zapisów pierwotnych dla pracownika.
::   WE: _a - data od
::       _b - data do
::   WY: _a - [DICT] - tymczasowa tabela we/wy.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('buff_pierwotny','prc');

_add:="
   _a.P:=#R_REJ_WW.P;
      _a.GD:=R_REJ_WW.GD;
      _a.DZ:=R_REJ_WW.DZ;
      _a.DZK:=R_REJ_WW.DZK;
      _a.TP:=R_REJ_WW.TP;
      _a.RD:=R_REJ_WW.RD;
      _a.CZ:=R_REJ_WW.CZ;
      _a.ST:=R_REJ_WW.ST;
      _a.add()";

_od:=_a;
_do:=_b;
_maska:='';

{! _ind:=0..(_do-_od)
|! _dzien:=_od+_ind;
   _Rok:=_dzien~1;
   _Msc:=_dzien~2;
   {? R_REJ_WW.name()<>_maska
   || R_REJ_WW.use('r_hw'+(($_Rok)+2)+(('0'+$_Msc)+2));
      R_REJ_WW.index('R_REJ_WX');
      _maska:=R_REJ_WW.name()
   ?};
   R_REJ_WW.prefix(P.ref,_dzien);
   {? R_REJ_WW.first()
   || {!
      |? _add(_TAB);
         R_REJ_WW.next()
      !}
   ?}
!};
_TAB


\buff_pierwotny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Tworzy bufor tabeli tymczasowej zapisów pierwotnych dla pracownika.
::   WE:
::   WY: bufor tabeli we/wy.
::----------------------------------------------------------------------------------------------------------------------
_Buff:=tab_tmp(4,'P','INTEGER','Pracownik',
      'DZK','DATE','Data kwalifikacji',
      'DZ','DATE','Data zdarzenia',
      'GD','TIME','Godzina',
      'TP','STRING[7]','Typ zdarzenia',
      'RD','STRING[9]','Rodzaj zdarzenia',
      'CZ','STRING[5]','Kod czytnika',
      'ST','INTEGER','Status operacji');
_Buff


\del_dane_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Usunięcie danych o wewy i kwalifikacji dla bieżącego pracownika bez usuwania zapisów pierwotnych.
::   WE: _a - [DATE] data od
::       _b - [DATE] data do
::       [_c] - [INT]  1- kasowanie również zapisów pierwotnych - domyslnie bez usuwania
::   WY:  integer wynik operacji
::----------------------------------------------------------------------------------------------------------------------
_od:=_a;
_do:=_b;
_hist:=var_pres('_c')=type_of(0) & _c=1;
{! _ii:=#_od..#_do
|! _dt:=#_ii;
   {? ~exec('isBlokada','prc_rozlicz',P.ref(),_dt)
:: Usunięcie zapisów z tabeli błędów kalendarza współpracownika
   ||
:: Usunięcie zapisów z tabel WE/WY, kwalifikacji czasu pracy, odbiorów za nadgodziny oraz tabeli przepracowanych dni
      exec('usun_wewy','prc_wewy',P.ref(),_dt~1,_dt~2,,_dt,_hist)
   ?}
!};

1


\kwal_wewy_z_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Ponowna kwalifikacja zapisów na podstawie wejść pierwotnych
::   WE: _a - [DICT] - tymczasowa tabela pierwotnych zapisów we/wy.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_BUFFER:=_a;

{? _BUFFER.first()
|| exec('czytaj','#stalesys',date());
   P.cntx_psh();
   P.prefix();
   _tab_prac:=tab_tmp(1,'REF','INTEGER','Ref');
   _DataOd:=_DataDo:=_ZDate:=_DataOdK:=_DataDoK:=_ZDateK:=date(0,0,0);
   _TestData:=date(0,0,0);
   MASK.Init();
   _Zn_Prac:=" {? P.seek(_a) || P.ref || null() ?} ";

:: marginesy wejścia i wyjścia
   _MARGWEWY:="
      _Kalend:=
         {? R_WZCZ.find_le(R_REJ_WW.DZK)
         || {? R_WZCZ.GRAFIK='T' || R_WZCZ.CZESC || R_WZCZ.KAL ?}
         || P.KAL
         ?};
      {? _Kalend
      || _KalOk:=0;
         KAL_ROK.prefix(_Kalend);
         {? KAL_ROK.find_key(R_REJ_WW.DZK~1)
         || KAL_DEF.index('KAL_DEF');
            KAL_DEF.prefix(KAL_ROK.ref());
            {? KAL_DEF.find_key(R_REJ_WW.DZK)
            || {!
               |? {? KAL_DEF.TYP<>'R'
                  || KAL_DEF.prev()
                  || _KalOk:=1;
                     0
                  ?}
               !}
            ?}
         ?};
         {? _KalOk
         || _ok:=0;
            _KalWej:=KAL_DEF.POCZATEK;
            _KalWyj:=KAL_DEF.KONIEC;
            _MargRo:='';
            _MargWe:=_MargWy:=time(0,0,0);
            R_MARG.index('R_MARG');
            R_MARG.prefix();
            {? R_MARG.find_key(P.ref())
            || _MargWe:=time(R_MARG.WE~1,R_MARG.WE~2,0);
               _MargWy:=time(R_MARG.WY~1,R_MARG.WY~2,0);
               _Marg_P_We:=time(R_MARG.PWE~1,R_MARG.PWE~2,0);
               _Marg_P_Wy:=time(R_MARG.PWY~1,R_MARG.PWY~2,0);
               _MargRo:=R_MARG.RODZAJ;
               _ok:=1
            ?};
            {? ~_ok
            || _MargWe:=time(KST.R_WE~1,KST.R_WE~2,0);
               _MargWy:=time(KST.R_WY~1,KST.R_WY~2,0);
               _Marg_P_We:=time(KST.R_PWE~1,KST.R_PWE~2,0);
               _Marg_P_Wy:=time(KST.R_PWY~1,KST.R_PWY~2,0);
               _MargRo:=KST.R_WEWY_R;
               {? _MargWe=*0 & _MargWy=*0
               || _MargWe:=time(KAL_DEF.ROK().NAZWA().WE~1,KAL_NAZW.WE~2,0);
                  _MargWy:=time(KAL_DEF.ROK().NAZWA().WY~1,KAL_NAZW.WY~2,0);
                  _MargRo:='S'
               ?}
            ?};
            {? _MargRo<>''
            || {? R_REJ_WW.ST=2
               || {? _MargRo='P'
                  || {? (R_REJ_WW.GD<_KalWej & R_REJ_WW.GD+_MargWe>=_KalWej) |
                        (R_REJ_WW.GD>_KalWej & R_REJ_WW.GD-_Marg_P_We<=_KalWej)
                     || R_REJ_WW.GD:=_KalWej
                     ?}
                  |? _MargRo='S'
                  ||  R_REJ_WW.GD+=_MargWe
                  ?}
               |? R_REJ_WW.ST=3
               || {? _MargRo='P'
                  || {? (R_REJ_WW.GD>_KalWyj & R_REJ_WW.GD-_MargWy<=_KalWyj) |
                        (R_REJ_WW.GD<_KalWyj & R_REJ_WW.GD+_Marg_P_Wy>=_KalWyj)
                     || R_REJ_WW.GD:=_KalWyj
                     ?}
                  |? _MargRo='S'
                  ||  R_REJ_WW.GD-=_MargWy
                  ?}
               ?}
            ?}
         ?}
      ?}";

   {? _BUFFER.first()
   || {!
      |? _Dzn:=_BUFFER.DZK~3;
         _Msc:=_BUFFER.DZK~2;
         _Rok:=_BUFFER.DZK~1;
         _Mask:=MASK.Name('R_REJ_WW',_Rok,_Msc);
         {? R_REJ_WW.name()<>(_Mask) || R_REJ_WW.use(_Mask) ?};
         R_REJ_WW.index('R_REJ_ST');
         {? #(R_REJ_WW.name()+2)<>_Msc
         ||
            MASK.Use('R_REJ_WW',_Rok,_Msc);
            R_REJ_WW.index('R_REJ_ST')
         ?};
         _data:=date(_Rok,_Msc,_Dzn);
         _pracow:=_Zn_Prac(_BUFFER.P);
         {? P.seek(_pracow)
         || R_REJ_WW.prefix(P.ref(),_data);
            {? R_REJ_WW.first()
            || {!
               |? {? R_REJ_WW.ZM='D'
                  || {? ~exec('isBlokada','prc_rozlicz',P.ref(),_data)
                     || R_REJ_WW.del()
                     || R_REJ_WW.next()
                     ?}
                  || R_REJ_WW.next()
                  ?}
               !}
            ?}
         ?};
         _BUFFER.next()
      !}
   ?};
   _Zn_WeWy:=
      "  {? KST.R_KW().O='status'
         || R_WEWY.find_key(_BUFFER.ST)
         || R_WEWY.find_key(_BUFFER.TR,_BUFFER.MD)
         ?}
      ";
   _Akt_Tab:=
      "  _a.ST:=_b.ST;
         _a.TP:=_b.TP;
         _a.RD:=_b.RD
      ";
   _Dod_Rej:=
      "  R_REJ_WW.cntx_psh();
         R_REJ_WW.index('R_REJ_WW');
         R_REJ_WW.prefix(R_REJ_WW.P,R_REJ_WW.DZ);
         {? R_REJ_WW.find_key(R_REJ_WW.GD,R_REJ_WW.ST)
         || R_REJ_WW.del()
         ?};
         R_REJ_WW.cntx_pop();
         R_REJ_WW.add()
      ";

   R_REJ_WW.cntx_psh();
   R_REJ_WW.index('R_REJ_WW');
   R_KARHIS.index('KAR_DATA');
   R_KARTY.clear();
   R_WEWY.index({? KST.R_KW().O='status' || 'R_STATUS' || 'R_TR_MOD' ?});
   R_OPCZYT.index('R_OPCZYT');
   R_OPCZYT.clear();
   PROGRESS.set(_BUFFER.size(),'Trwa aktualizacja tabeli wejść/wyjść.'@);
   VAR_DEL.delete('TAB_ERR');
   TAB_ERR:=tab_tmp(4,
      'NA','STRING[30]','Nazwisko'@,
      'IM','STRING[25]','Imię'@,
      'K','STRING[13]','Karta'@,
      'D','DATE','Data'@,
      'T','TIME','Czas'@,
      'O','STRING[100]','Opis'@
   );
{? _BUFFER.first()
   || {!
      |? _Dzn:=_BUFFER.DZ~3;
         _Msc:=_BUFFER.DZ~2;
         _Rok:=_BUFFER.DZ~1;
         _data:=_BUFFER.DZ;
         R_REJ_WW.GD:=_BUFFER.GD;
         R_REJ_WW.DZ:=_BUFFER.DZ;
         R_REJ_WW.CZ:=_BUFFER.CZ;
         R_REJ_WW.ZM:='A';
         {? _DataOd=_ZDate | _DataOd>R_REJ_WW.DZ
         || _DataOd:=R_REJ_WW.DZ
         ?};
         {? _DataDo=_ZDate | _DataDo<R_REJ_WW.DZ
         || _DataDo:=R_REJ_WW.DZ
         ?};

          R_REJ_WW.P:=_Zn_Prac(_BUFFER.P);
               {? exec('isBlokada','prc_rozlicz',R_REJ_WW.P,R_REJ_WW.DZ)
               || exec('add_kom','#message',
                     'W dniu %1 dane zablokowane do edycji.'@[R_REJ_WW.DZ$1],
                     157,
                     '%1 %2 %3:'[P.OSOBA().NAZWISKO,P.OSOBA().PIERWSZE,'[nr teczki - %1]'@[form(P.T)]]
                  )
               || {? R_REJ_WW.P
                  || _Akt_Tab(R_REJ_WW,_BUFFER);
                     _Mask:=MASK.Name('R_REJ_WW',R_REJ_WW.DZ~1,R_REJ_WW.DZ~2);
                     {? R_REJ_WW.name()<>(_Mask)
                     || R_REJ_WW.use(_Mask);
                        R_REJ_WW.index('R_REJ_WW')
                     ?};
                     R_REJ_WW.prefix(R_REJ_WW.P,R_REJ_WW.DZ);

                     _tab_prac.REF:=#R_REJ_WW.P;
                     _tab_prac.add(1);
                     R_REJ_WW.P().OSOBA();

:: ustalenie daty kwalifikacji
                     R_WZCZ.cntx_psh();
                     R_WZCZ.index('R_WZCZ');
                     R_WZCZ.prefix(P.name(),P.ref());
                     exec('set_dzk','czytniki');

:: dodanie zapisu do kwalifikacji po uwzględnieniu marginesów
                     _MARGWEWY();
                     _Dod_Rej();

                     R_WZCZ.cntx_pop()
                  ?}
               ?};
               {? _DataOdK=_ZDateK | _DataOdK>R_REJ_WW.DZ
               || _DataOdK:=R_REJ_WW.DZK
               ?};
               {? _DataOdK=_ZDateK | _DataDoK<R_REJ_WW.DZ
               || _DataDoK:=R_REJ_WW.DZK
               ?};
               {? (_Rok<>_TestData~1) | (_Msc<>_TestData~2)
               || _TestData:=date(_Rok,_Msc,1);
                  exec('SetChk','prc',_Rok,_Msc)
               ?};
         PROGRESS.next();
         _BUFFER.next()
      !}
   ?};
   TAB_ERR.win_sel(TAB_ERR.mk_sel('Błędy rejestracji wejść/wyjść'@,,1));
   {? TAB_ERR.first() || TAB_ERR.select() ?};

   P.prefix();
   _tab_p_g:=sql('select distinct REF from :_a',_tab_prac);
   {? _tab_p_g.first() & _DataOdK<>#0
   || PROGRESS.set(_tab_p_g.size(),'Trwa aktualizacja tabeli dziennej.'@);
      {!
      |? {? P.seek(_tab_p_g.REF,)
         || exec('akt_prac','prc_wewy',_DataOdK,_DataDoK,1,1)
         ?};
         PROGRESS.next();
         _tab_p_g.next()
      !}
   ?};

   PROGRESS.close();
   R_REJ_WW.cntx_pop();
   echo();
   P.cntx_pop();
   VAR_DEL.delete('TAB_ERR')
?};
~~


\prcharLinkSelect
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Rozbudowany "select" dla obszaru PRC_HAR (okienko grupowe) z uwzględnieniem wejścia przez wynik wyszukiwarki
::       danych.
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
params_set(_par:=params_get());
_link:=_par.link;
_TAB:=ref_tab(_link);

_TAB.cntx_psh();
{? (_TAB=PPSFN) & _TAB.seek(_link)
|| {? P.seek(_TAB.P)
   ||
::    Ustawiamy się na odpowiedniej formie współpracy
      _id:='F_ZATR';
      _args:=__PARSES.args(_id);
      _args.REF:=P.F_ZATR;
      __PARSES.setVal(_id,_args);

      _result:=P.select(,1,5)
   ?}
?};
_TAB.cntx_pop();
_result


\prcharLinkActivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Aktywacja zakładki związanej z linkiem
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());

_MAP:=_par.cfg.map;
_MAP.cntx_psh();
_MAP.prefix();

_link:=_par.link;
_TAB:=ref_tab(_link);
_TAB.cntx_psh();
{? _TAB.seek(_link)
|| {? _MAP.find_tab(,'TABLE',,'=',!_TAB)
   || win_set('cur_row_pos=1',_TAB,_MAP.WINDOW,_MAP.NRTAB,'bottom')
   ?};
   {? _TAB=PPSFN
   || win_activate('zdalna')
   ?}
?};
_TAB.cntx_pop();
_MAP.cntx_pop();
1

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:28 15841a91012ee93b0ef17cee5b0c84dc9427b98bed084b28b09ec43d525c7235896a0b5b89deaa111e0870e6f6ba94814968c198ad1d977424b476b07908d50835f1c74612fe9be663342e560f492d3602c9ebd80697b2f19b1b79a67db5a7819c6b16443885d189c5b7b31a5ea2ca5050ac7cf96875824fb5662d990f5970e8
