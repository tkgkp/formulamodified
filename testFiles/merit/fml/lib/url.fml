:!UTF-8
::(c) Macrologic S.A. Wszelkie prawa zastrzeżone
::====================================================================================================
:: Nazwa pliku: url.fml (dawniej skid_url) [2008]
:: Utworzony: 27.03.2007
:: Autor: PJ
:: ====================================================================================================
:: Zawartość: Definicja klasy URL, która udostępnia możliwość pobierania plików poprzez protokół http
::            oraz komunikacje z WebService poprzez SSL.
::            Klasa URL korzysta z biblioteki download.jar.
::            Od wersji INTERM funkcjonalność działa bez użycia biblioteki download.jar
::====================================================================================================
:: OPIS:
::
:: Zadeklarowanie
:: klasy             : exec('url_decl','url');
:: Powołanie obiektu
:: klasy             : myURL:=obj_new(@.CLASS.URL);
::
:: Wykorzystanie     :
::          myURL.GetFile(adres, path) - pobiera plik ze wskazanego
::          adresu i zapisuje w podanej ścieżce. Zwraca '' jeśli pobieranie się
::          powiodło lub komunikat o błędzie.
::          parametry : adres(string) - adres pliku do pobrania
::                      path(string) - ścieżka docelowa do zapisania pobranego pliku
::
::          myURL.GetString(adres) - pobiera plik ze wskazanego
::          adresu i zwraca jego zawartość w formie zmiennej tekstowej.
::          parametry : adres(string) - adres pliku do pobrania.
::          W przypadku błedu zwracany jest komunikat o błedzie.
::          Rozmiar pliku nie moze byc większy niż maksymalny rozmiar zmiennej
::          typu string - obecnie 524 172 znaki
::
::          !!UWAGA!!: wszystkie powyższe parametry tekstowe powinny być przekazywane w stronie
::          kodowej Mazovia, przy wywołaniu metod z bibliotek dll obiekt dokonuje ich
::          konwersji na strone kodową Windows.
::          ===================================================================================
::
::          myURL.SslSendReceive(host, port, klucz_kl, haslo_kl, cert, haslo_cert, cert_akc, err, plik_wys, plik_wyn)
::              - funkcja do komunikacji z WebSerwisami (do przesłania komunikatu w ssl i otrzymania odpowiedzi,
::                połączenie jest nawiazywane tylko na tą transmisje)
::          parametry:
::            host(string) - nazwa hosta docelowego
::            port(int)  - port docelowy
::            klucz_kl(string) - nazwa pliku zawierającego klucz klienta, przy czym powinna byc dozwolona nazwa pusta,
::                               wtedy bez klucza klienta (plik pfx lub jks)
::            haslo_kl(string) - hasło do klucza klienta
::            cert(string) - nazwa pliku zawierającego zaufane certyfikaty serwerów, przy czym jeśli podana nazwa
::                           pusta to powinien być jks w %appdata%/MacroBASE przechowywany dla wszystkich jtermów danego usera
::            haslo_cert(string) - hasło do magazynu certyfikatów
::            cert_akc(int) - sposob akceptowania nowych certyfikatów:
::                              0 - bez dialogu odrzuć nowy certyfikat
::                              1 - bez dialogu zaakceptuj nowy certyfikat
::                              2 - zadaj pytanie o akceptacje nowego certyfikatu
::            err(int) - wyświetlaj komunikaty o błędach w nawiazaniu połączenia:
::                          0 - brak komunikatów
::                          1 - komunikaty wyświetlane
::            plik_wys(string) - nazwa pliku źródłowego do wysłania (to co mamy wysłac)
::            plik_wyn(string) - nazwa pliku odebranego (to co przyszło)
::
::            myURL.SslGetLastError() - brak parametrów
::                - Pobranie opisu błędu, który wystąpił podczas ostatniego wywołania SslSendReceive
::                  Zwraca wynik w postaci tekstu błędu lub "OK"
::          ===================================================================================
::            Funkcje związane z użyciem Proxy:
::            myURL.SetProxy(host, port) - ustawia parametry serwera PROXY, które mają być użyte podczas połączenia
::            myURL.SetProxyAuth(user, password) - ustawia parametry autentykacji (typu Basic) serwera PROXY
::            myURL.GetProxyHost() - zwraca string z adresem hosta (jeśli był ustawiony)
::            myURL.GetProxyPort() - zwraca numer portu (int) jeśli był ustawiony
::            myURL.IsProxyAuth() - zwraca 1 jeśli autentykacja proxy jest obecnie ustawione, 0 jeśli nie jest
::            myURL.GetStatus() - zwraca kod odpowiedzi serwera HTTP (200, 400 itp) lub -1 gdy nie udało się połaczenie
::
::            Powyższe parametry raczej bez polskich znaków
::
:: Usunięcie obiektu
:: klasy            : obj_del(myURL);
::====================================================================================================

:: TODO: !!! Do usunięcia - zmiana nazwy

\url_decl
::-----------------------------------------------------------------------------
:: UTW  : PJ [2008]
:: OPIS : Deklaracja klasy URL
:: ~OST: INFOPEN
::-----------------------------------------------------------------------------
{? var_pres('URL', @.CLASS) < 0
|| obj_decl('URL',

   obj_fld('OK',"PUBLIC: czy pobieranie pliku zakonczone sukcesem?";0),
   obj_fld('Progress',"PUBLIC: czy wyswietlac pasek postepu (tylko dla metody ToString!)?";0),

   obj_meth('ToFile',"PUBLIC";"
     {? _=0 || _a:=''
     |? _=1 || _b:='' ?};
     {? 7+_a<>'http://' & 8+_a<>'https://' & _a<>'' || _a:='http://'+_a ?};
     _http:=exec('inet_get','proxy',{? exec('interm','#system') || '' || '@' ?}+_a,_b);
     _f:=fopen('@'+_b,'bw',,,1);
     {? _f.is_open()
     || no_msg(1);
        _status:=_http.http_get(_f);
        _lasterr:=errno();
        _ret:='';
        {? _status<>200 & _lasterr<>0
        || _ret:='[ERR] ' + $_status + ', [ERR] ' + $_lasterr
        |? _status<>200 & _lasterr=0
        || _ret:='[ERR] ' + $_status
        ?};
        no_msg(0);
        fclose(_f)
     || _ret:='prawdopodobnie brak połączenia z internetem'
     ?};
     _ret
     "),

::Formuła ToFile używająca inet_get na serwerze (bez '@') - wykorzystanie w INTERM
   obj_meth('ToFileIN',"PUBLIC";"
     {? _=0 || _a:=''
     |? _=1 || _b:='' ?};
     {? 7+_a<>'http://' & 8+_a<>'https://' & _a<>'' || _a:='http://'+_a ?};
     _http:=exec('inet_get','proxy',_a,_b);
     _f:=fopen(_b,'bw',,,1);
     {? _f.is_open()
     || no_msg(1);
        _status:=_http.http_get(_f);
        _lasterr:=errno();
        _ret:='';
        {? _status<>200 & _lasterr<>0
        || _ret:='[ERR] ' + $_status + ', [ERR] ' + $_lasterr
        |? _status<>200 & _lasterr=0
        || _ret:='[ERR] ' + $_status
        ?};
        no_msg(0);
        fclose(_f)
     || _ret:='prawdopodobnie brak połączenia z internetem'
     ?};
     _ret
     "),

   obj_meth('ToString',"PUBLIC";"
     {? var_pres('_a')<=0 || _a:='' ?};
     {? var_pres('_b')<=0 || _b:=0 ?};
     {? 7+_a<>'http://' & 8+_a<>'https://' & _a<>'' || _a:='http://'+_a ?};
     {? cli_ver()='cgi' | exec('interm','#system') || _url:=_a || _url:='@'+_a ?};

     _http:=exec('inet_get','proxy',_url,_b);
     _http.http_get();
     _wyn:=_http.get_data();
     .OK:=_http.get_status()=200;
     _wyn
     ")

   )
?}

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:25 d8c3d995d179bad96a1e04ef0fd4771d29024543898a61f05e03509c86f7a3c47249350a7816e084d6baf1559d036e4caabf49650ef0351817fa6104e20722d4da4c0856d8c81a58c05181ea1da1adeedbd928bb21997ba847c9ea945d5a7d39d2b4e623e84765e8f1eb6a7bac2ee230007345284fcce0a26cd1d832c4a08d63
