:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: edi_wspolne.fml
:: Utworzony: 21.09.2015
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Komunikaty edi - doatkowa obsługa
::======================================================================================================================


\edi_i_akt_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: aktualizacja EDI_I.DOK z wartosci _a na _b
::   WE: _a - stare zlaczenie do dokumentu
::       _b - nowe zlaczenie do dokumentu
::  OLD: \edi_i_akt_dok/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_Mask:=EDI_I.names();
_loop:=_Mask.first();
{!
|? _loop
|!
   EDI_I.cntx_psh();
   EDI_I.use(_Mask.NAME);
   EDI_I.index('DOK');
   EDI_I.prefix(_a);
   {? EDI_I.first()
   ||
      {!
      |? EDI_I.cntx_psh();
         EDI_I.prefix();
         EDI_I.DOK:=_b;
         EDI_I.put();
         EDI_I.cntx_pop();
         EDI_I.first()
      !}
   ?};
   EDI_I.cntx_pop();
   _loop:=_Mask.next()
!}


\msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: komunikaty pliku edison
::   WE: _a - kod komunikatu
::       _b,... - parametry wykorzystywane w komunikacie
::   WY: komunikat odpowiadajacy kodowi _a
::  OLD: \msg/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>2 || _a:='' ?} || _a:='' ?};

{? _a = ''
|| FUN.info('Błąd przekazywanych parametrów do funkcji msg.'@)
||
   {? _a = 'ERR_ADD'
   || return('Nie powiodło się dodanie rekordu do tabeli '@)
   |? _a = 'ERR_FOPEN'
   || return('Błąd otwarcia pliku '@)
   |? _a = 'ERR_EDI_GEN_NAG'
   || return('Błąd utworzenia nagłówka dokumentu.'@)
   |? _a = 'ERR_PAR_FUN'
   || return('Błąd przekazywanych parametrów do funkcji '@)
   |? _a = 'ERR_PUT'
   || return('Nie powiodła się aktualizacja rekordu %1.'@[_b])
   |? _a = 'ERR_SEEK'
   || return('Nie znaleziono rekordu %1.'@[_b])
   |? _a = 'MSG_EDI_BRAK_ZEZ'
   || return('Brak zezwoleń na odczyt komunikatu.'@)
   |? _a = 'MSG_EDI_BRAK_PLIKOW'
   || return('Brak plików do odczytu lub dostępu do nich.'@)
   |? _a = 'MSG_EDI_BRAK_UPRAWNIEN'
   || return('Brak uprawnień.'@)
   |? _a = 'MSG_EDI_ODCZYT_BRAK_KOM'
   || return('Brak komunikatów do odczytu.'@)
   |? _a = 'WARNING_DEZEZW_ZAPIS'
   || return('Nie znaleziono zezwolenia na zapisywanie komunikatu.'@)
   |? _a = 'WARNING_EDI_DEF'
   || return('Nie wskazano definicji komunikatu EDI w funkcji '@)
   |? _a = 'WARNING_EDI_DEF_PAR'
   || {? _ > 1 || {? type_of(_b)<>type_of('') || _b:='' ?} || _b:='' ?};
      return('Definicja komunikatu: '+_b+'\njest niewłaściwie sparametryzowana.'@)
   |? _a = 'WARNING_EDI_DEF_WR'
   || return('Nie wskazano, że komunikat jest odczytwany lub zapisywany w funkcji '@)
   |? _a = 'WARNING_EDI_NIEZNANY_FORMAT'
   || return('Nieznany format komunikatu.'@)
   |? _a = 'WARNING_EDI_NIEOBSLUGIWANY_FORMAT'
   || return('Nie obsługiwany format.'@)
   |? _a = 'MSG_EDI_BRAK_DANYCH'
   || return('Brak wymaganych danych '@)
   ?}
?}


\zapis_faks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: zapis komunikatow opartych na dokumentach z tabeli FAKS do pliku,
::       wymagane jest wczesniejsze ustawienie zmiennej EDI_Z.C
::       gdy zmienna BEER.MW='F' to wywolanie dla biezacej faktury w buforze bez dodatkowego dialogu
::   WE: [_a] 0-zwykla faktura 1-faktura korygujaca
::       [_b] 0-faktura do wyboru 1-FAKS.ref()
::   WY: gdy wywolywane dla biezacej faktury to zwraca ref dodanego komunikatu
::  OLD: \zapis_faks/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
_one_faks:={? var_press('_b')=type_of(null()) || _b || null() ?};

_wyn:=null;

_edi:=exec('edi','edi_wspolne');

{? EDI_Z.C=null
||
   exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_DEF')+'zapis_faks.')
||
   {? _one_faks
   ||
      FAKS.cntx_psh();
      _oddz:=1+(FAKS.name()+3);
      _rok:=FAKS.name()+2;
      exec('open_tabele','open_tab','L',1+(ref_name(_one_faks)+3),ref_name(_one_faks)+2);
      FAKS.prefix();
      {? FAKS.seek(_one_faks) || _wyn:=exec('zapis_faks_one','edi_wspolne') ?};
      exec('open_tabele','open_tab',_oddz,_rok);
      FAKS.cntx_pop()

   |? _edi.sza
   ||
      exec('logOrInfo','edi_wspolne','Podczas automatycznego przetwarzania oczekiwane wskazanie dokumentu.'@)
   ||
      FAKS.prefix();

      _sort:='KH,DW,SYM';
      _from:='join KH using("FAKS".KH,KH.reference) '+
         'join DEZEZW using(DEZEZW.KH,KH.reference) '+
         'join TYPYSP using("FAKS".T,TYPYSP.reference) ';
      _where:='DEZEZW.ISTDEF like :_a'+
         ' and DEZEZW.WR = \':_b\''+
         ' and DEZEZW.B = \'N\''+
         {? ~_a || ' and TYPYSP.KOR = \'N\'' || ' and TYPYSP.KOR = \'T\' and FAKS.KZ=\'\'' ?}+
         ' and TYPYSP.PAR = \'N\''+
         ' and TYPYSP.ZAL = \'N\''+
         ' and "FAKS".SZ = \'S\''+
         ' and "FAKS".EDI_W = \'N\''+
         ' and "FAKS".AKC = \'T\''+
         ' and "FAKS".DW >= DEZEZW.OD and ("FAKS".DW <= DEZEZW.DO or DEZEZW.DO is null)';
      FAKS.f_set(_sort,_from,_where,EDI_Z.C,EDI_Z.WR);

::    __ZAZ tworzone po wywolaniu funkcji Zatwierdz w oknie __FAKS_W tabeli FAKS
      VAR_DEL.delete('__ZAZ');

      {? _a || exec('efallkor','edi_wspolne') ?};
      {? ~FAKS.f_first()
      ||
         FUN.info('Brak dokumentów do zapisu.'@)
      ||
         __FAKS_W:=FAKS.mk_sel('EDI - dokumenty do zapisu'@,,0,,,,,,'U');
         FAKS.win_sel(__FAKS_W);
         FAKS.win_fld(__FAKS_W,,'KH','NAZ',,30,,1,'Kontrahent'@);
         FAKS.win_fld(__FAKS_W,,'DW',,,10,,1,'Data'@);
         FAKS.win_fld(__FAKS_W,,'SYM',,,20,,1,'Symbol'@);
         FAKS.win_fld(__FAKS_W,,'BRUTTO',,,12,2,1,'Wartość'@);
         FAKS.win_act(__FAKS_W,0,'Szukaj',,,,,,0);
         FAKS.win_act(__FAKS_W,0,'Formuła','&Zatwierdź'@@,,'Uruchamia zapis wybranych dokumentów'@,
            "{? FAKS.sel_size()=0 || sel_exit ?}","",1,1,"__ZAZ:=FAKS.sel_aget()","sel_exit()",'Z');
         FAKS.win_act(__FAKS_W,0,'Wyświetl',,,,"FAKS.f_get(); exec('fall_rek','faktury_nag')",,0);

         {? FAKS.select()
         ||
            {? var_pres('__ZAZ')<0
            ||
               __ZAZ:=tab_tmp(1,'REF','INTEGER','numer rekordu w bieżacej masce',
                  'CRC','INTEGER','suma kontrolna');
               {? FAKS.f_get() || __ZAZ.REF:=#FAKS.ref(); __ZAZ.add() ?}
            ?};

            {? __ZAZ.first()
            ||
               {!
               |?
                  {? ~FAKS.seek(__ZAZ.REF,FAKS.name())
                  || FUN.info('Nie znaleziono dokumentu.'@)
                  || {? FAKS.r_lock(1,1,1)
                     || {? FAKS.EDI_W='T'
                        || FUN.info('Dokument %1 jest już zapisany.'@[FAKS.SYM])
                        || exec('zapis_faks_one','edi_wspolne');
                           {? _a || __sumkor.erase() ?}
                        ?};
                        FAKS.r_unlock()
                     || FUN.info('Dokument %1 obsługiwany przez innego użytkownika.'@[FAKS.SYM])
                     ?}
                  ?};
                  __ZAZ.next()
               !}
            ?}
         ?};
         &__FAKS_W
      ?};
      FAKS.f_clear();
      {? _a || exec('efdelkor','edi_wspolne') ?}
   ?}
?};
VAR_DEL.delete('__ZAZ');
_wyn


\zapis_faks_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: zapis pojedynczego komunikatu
::   WY: ref dodanego rekordu lub null gdy nie dodano
::  OLD: \one_faks/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;

_edi:=exec('edi','edi_wspolne');

:: EDI_Z.PTH ustawiana w funkcji find_zezw w edison.fml
{? exec('find_zezw','edi_wspolne',FAKS.DW,FAKS.KH,'W',EDI_Z.C)<>null
||
   {? ~FAKS.r_lock(1,1,1)
   ||
      exec('add_kom','#message','Dokument obsługiwany przez innego użytkownika.'@,2,FAKS.SYM)
   ||
      _plik:='';
      _ext:={? EDI_Z.C().FORMAT='F' || '.csv' || '.xml' ?};
      _plikFullPath:=EDI_Z.PTH+STR.gsub(form(FAKS.KH().KOD)+'_'+form(FAKS.SYM)+_ext,'/','');
      _can_continue:=exec('indevice_chk','edi_wspolne',_plikFullPath,FAKS.SYM);
      {? _can_continue>0
      ||
         EDI_Z.DOK:=$FAKS.ref(); EDI_Z.SYM:=FAKS.SYM; EDI_Z.KH:=FAKS.KH;
         {? EDI_Z.C().FORMAT='F'
         ||
            _plik:=exec('zapis_ff','edi_wspolne',_plikFullPath)

         |? EDI_Z.C().FORMAT='X'
         ||
            _plik:=exec('zapis_xml','edi_wspolne',_plikFullPath,FAKS.SYM)
         ||
            exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_NIEZNANY_FORMAT'))
         ?}
      ?};

::    dodanie zapisu w dzienniku
      {? _plik=''
      ||
         exec('add_kom','#message','Nie powiodło się zapisanie dokumentu.'@,2,FAKS.SYM)
      ||
         _edi.plikAdd(_plikFullPath,EDI_Z.PTH);
         _wyn:=exec('dzien_add','edi_wspolne',EDI_Z.C,EDI_Z.WR,date(),time(),OPERATOR.USER,EDI_Z.DOK,EDI_Z.SYM
            ,EDI_Z.KH,'',_plikFullPath);
         {? _wyn=null
         ||
            exec('logOrInfo','edi_wspolne','Nie powiodło się dodanie zapisu do dziennika.'@)
         ||
            FAKS.EDI_W:='T';
            FAKS.put()
         ?};
         exec('add_kom','#message','Zapisano dokument w pliku %1.'@[_plik],1,FAKS.SYM)
      ?};
      FAKS.r_unlock()
   ?}
?};
_wyn


\find_zezw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: szuka waznego zezwolenia dla kontrahenta _b na zapisywanie lub odczytywanie komunikatu _d,
::       ustawia zmienna EDI_Z.PTH
::   WE: _a - data
::       _b - KH.reference
::       _c - 'W'-zapis lub 'R'-odczyt
::       _d - ISTDEF.reference
::   WY: DEZEZW.reference-jesli jest wazne zezwolenie, null-wpp
::  OLD: \find_zezw/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=null();

DEZEZW.cntx_psh();
DEZEZW.index('WR');
DEZEZW.prefix('ZWS',_d,_c,_b);

_find:=0;
{? DEZEZW.first()
||
   {!
   |? {? DEZEZW.OD <= _a & (DEZEZW.DO >= _a | DEZEZW.DO = date(0,0,0))
         & DEZEZW.B='N'
      ||
         _find:=1;
         EDI_Z.PTH:=
            {? (1+DEZEZW.FILE_PTH)='@'
               | ((2+DEZEZW.FILE_PTH)+1)=':'
               | (2+DEZEZW.FILE_PTH)='\\\\'
               | (1+DEZEZW.FILE_PTH)='/'
            ||
::          przypadki:
::          - sciezka na komputerze lokalnym (@), zaklada sie ze zawsze bezwzgledna
::          - bezwzgledna (c:)
::          - sieciowa windowsowa (\\)
::          - linuxowa (/)
               DEZEZW.FILE_PTH
            ||
::          przypadek sciezka wzgledna od katalogu wyznaczonego pth_dir()
               {? sys_name(1)='WINDOWS'
               ||
                  pth_dir('a.xml')+{? (1+DEZEZW.FILE_PTH)='\\' || '' || '\\' ?}+DEZEZW.FILE_PTH
               ||
                  pth_dir('a.xml')+{? (1+DEZEZW.FILE_PTH)='/' || '' || '/' ?}+DEZEZW.FILE_PTH
               ?}
            ?}
            +
            {? sys_name(1)='WINDOWS'
            ||
               {? (DEZEZW.FILE_PTH+1)='\\' || '' || '\\' ?}
            ||
               {? (DEZEZW.FILE_PTH+1)='/' || '' || '/' ?}
            ?};
         _return:=DEZEZW.ref()
      ?};
      _find=0 & DEZEZW.next()
   !}
?};

{? _find=0 || FUN.info(exec('msg','edi_wspolne','WARNING_DEZEZW_ZAPIS')) ?};

DEZEZW.cntx_pop();

_return


\zapis_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: zapis do pliku komunikatu typu xml,
::       wymagane jest wczesniejsze ustawienie zmiennej EDI_Z.C,
::       komunikat jest zapisywany na podstawie zawartosci bufora tabeli FAKS
::   WE: _a - sciezka do pliku w ktorym umieszczony bedzie komunikat
::       _b - nazwa sekcji komunikatu
::   WY: plik wraz ze sciezka bezwzgledna, '' - jesli wystapil blad
::  OLD: \faks_xml/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_return:='';

_naz_kom:='';
{? var_pres('_b')=type_of('')
|| _naz_kom:=_b
?};

{? EDI_Z.C=null
||
   exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_DEF')+'zapis_xml.')
||
   _plik:=_a;
   _can_continue:=exec('indevice_chk','edi_wspolne',_plik);
   {? _can_continue>0
   || _file:=fopen(_plik,'uw')
   || _file:=0
   ?};

   {? ~_file
   ||
      exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','ERR_FOPEN')+_plik+'.')
   ||
      fwrite(_file,'<?xml version="1.0" encoding="utf-8"?>');
      _dobrze:=exec('exp_wyp_plik','edi_wspolne',EDI_Z.C,_file,_naz_kom);
      fclose(_file);
      {? _dobrze
      || _return:=_plik
      || ferase(_plik)
      ?}
   ?}
?};

_return


\exp_wyp_plik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula zapisuje do pliku xml dane z dokumentu zgodnie z zdefiniowana
::       specyfikacja EDI (parametr _a)
::   WE: _a - ref definicji ISTDEF.ref (specyfikacji EDI)
::       _b - uchwyt do pliku xml
::       _c - nazwa sekcji komunikatu
::   WY: 1 - OK, 0 - błędne dane
::  OLD: \exp_wyp_plik/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
SKID.EXP_IMP:='E';
_out:=_b;
_tab:=%9;
_il_tab:=0;

:: prefix na definicji
ISTDEFS.index('LP');
ISTDEFI.index('LP');
ISTDEFS.prefix(_a);

_dobrze:=1;
_naz_kom:='';
{? var_pres('_c')=type_of('')
|| _naz_kom:=_c
?};
{? ISTDEFS.first()
|| {!|?
      _tag:=ISTDEFS.OPIS;
      {? _tag<>''
      || fwrite(_out,_tab*_il_tab+_tag)
      ?};
:: run formula przed
      _przed:={? ISTDEFS.FORMULA<>'' || ($ISTDEFS.FORMULA)() || 1 ?};
      {? _przed
      || ISTDEFI.prefix(ISTDEFS.ref());
         {!|?
            {? 'TAB'*ISTDEFS.WYM
            || 1
            |? ISTDEFI.first() & 'EOM'*ISTDEFS.WYM
            || {!
               |?
                  {? ISTDEFI.LOG='' | ($ISTDEFI.LOG)()
                  ||
                     {? 'TAB'*ISTDEFI.WYM
                     || {? (2+ISTDEFI.NAZ)<>'</' || _il_tab+=1 ?};
                        fwrite(_out,_tab*_il_tab+ISTDEFI.NAZ);
                        {? (2+ISTDEFI.NAZ)='</' || _il_tab-=1 ?}
                     |? 'EOM'*ISTDEFI.WYM
                     || _txt:='';
                        _wyn:={? ISTDEFI.REGULY<>'' || ($ISTDEFI.REGULY)() || '' ?};
                        _typ_wyn:=type_of(_wyn);
:: formatowanie wyniku
                        _txt:={? _typ_wyn=5 || $_wyn
                              |? _typ_wyn=4 || STR.gsub(_wyn$1,'/','-')
                              |? _typ_wyn=3 || ''
                              |? _typ_wyn=2 || exec('cdata','edi_wspolne',_wyn)
                              |? _typ_wyn=1 & ISTDEFI.TYP='INTEGER' || $_wyn
                              |? _typ_wyn=1 & ISTDEFI.TYP='REAL' || form(_wyn,,,'0.')
                              || ''
                              ?};
                        _null:=
                        {? _typ_wyn=5 || time(0,0,0)
                        |? _typ_wyn=4 || date(0,0,0)
                        |? _typ_wyn=2 || ''
                        |? _typ_wyn=1 || 0
                        || ~~
                        ?};
                        {? ISTDEFI.WYM='M' & (_txt='' | _wyn=_null)
                        || _dobrze:=0;
                           {? _naz_kom<>''
                           || _msg:=exec('msg','edi_wspolne','MSG_EDI_BRAK_DANYCH')
                                    +ISTDEFS.OPIS+' '+ISTDEFI.NAZ+'.';
                              exec('add_kom','#message',_msg,2,_naz_kom)
                           ?}
                        ?};
                        fwrite(_out,_tab*(_il_tab+1)+ISTDEFI.NAZ+_txt+'</'+(1-ISTDEFI.NAZ))
                     ?}
                  ?};
                  ISTDEFI.next()
               !}
            ?};
:: run formula kontynuacji
            _kont:={? ISTDEFS.REGULY<>'' || ($ISTDEFS.REGULY)() || 0 ?};
            _kont
         !};
:: run formula po
         _po:={? ISTDEFS.FORM_XML<>'' || ($ISTDEFS.FORM_XML)() || 1 ?}
      ?};
      {? 'EOM'*ISTDEFS.WYM & _tag<>'' || fwrite(_out,_tab*_il_tab+('</'+(1-_tag))) ?};
      ISTDEFS.next()
   !}
?};

_dobrze


\cdata
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: otoczenie wartosci polem cdata jesli zawiera znaki z przedzialu "0x80" do "0xFF"
::   WE: _a - sting
::   WY: string
::  OLD: \cdata/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
_cdata:=0;

_meth:=exec('get','#params',100302,2);
{? _meth<>'' & ('maz2w95'=_meth | 'maz2iso'=_meth | 'maz2nop'=_meth | 'maz852'=_meth)
|| _a:=($('STR.'+_meth+'(_a)'))(_a)
?};

_dl:=+_a;
{! _ii.._dl
|? _ii<=_dl & _cdata=0
|!
   _char:=%((_ii+_a)+1);
   _cdata:=_char=%'&' | _char=%'>' | _char=%'<' | 128<=_char & _char<=255
!};

{? _cdata
|| '<![CDATA['+_a+']]>'
|| _a
?}


\zapis_ff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: zapis do pliku komunikatu typu flat file,
::       wymagane jest wczesniejsze ustawienie zmiennej EDI_Z.C,
::       komunikat jest zapisywany na podstawie zawartosci bufora tabeli FAKS
::   WE: _a - sciezka do pliku w ktorym umieszczony bedzie komunikat
::   WY: plik wraz ze sciezka bezwzgledna, '' - jesli wystapil blad
::  OLD: \faks_ff/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<>type_of(0) || _b:=1 ?};

_return:='';

{? EDI_Z.C=null
||
   exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_DEF')+'zapis_ff.')
||
   _plik:=_a;
   _file:=fopen(_plik,'w');
   _ref:={? _b=1 || FAKS.ref() || ZD_NAG.ref() ?};
   _czy_kor:=_b=1 & FAKS.T().KOR='T';

   {? ~_file
   ||
      exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','ERR_FOPEN')+exec('inf_path','edi_wspolne',_plik)+'.')
   ||
      _return:=_plik;
::    naglowek faktury
      EDI_D.index('LM');
      EDI_D.prefix(EDI_Z.C,'N');
      {? EDI_D.first()
      || {!
         |? exec('writeone','edi_wspolne',_file);
            EDI_D.next()
         !}
      ?};

      {? _b=1
      ||
::       pozycje faktury
         FAP.index('FAP');
         FAP.prefix(_ref);
         {? FAP.first()
         || {!
            |? EDI_D.index('LM');
               EDI_D.prefix(EDI_Z.C,'P');
               {? EDI_D.first()
               || {!
                  |? exec('writeone','edi_wspolne',_file);
                     EDI_D.next()
                  !}
               ?};
               FAP.next()
            !}
         ?}
      ||
::       pozycje zamowienia
         ZD_POZ.index('POZ');
         ZD_POZ.prefix(_ref);
         {? ZD_POZ.first()
         || {!
            |? EDI_D.index('LM');
               EDI_D.prefix(EDI_Z.C,'P');
               {? EDI_D.first()
               || {!
                  |? exec('writeone','edi_wspolne',_file);
                     EDI_D.next()
                  !}
               ?};
               ZD_POZ.next()
            !}
         ?}
      ?};

::    pozycje podsumowujace
      EDI_D.index('LM');
      EDI_D.prefix(EDI_Z.C,'X');
      {? EDI_D.first()
      || {!
         |? exec('writeone','edi_wspolne',_file);
            EDI_D.next()
         !}
      ?};

::    stopka faktury
::    UWAGA. w przypadku korekty faktury wedrujemy po tabeli __sumkor oczywiscie jesli istnieje ;)

      {? _b=1 & _czy_kor & var_pres('__sumkor')>100
      || _tab:=sql('select STV,KST from :_a where :_a.STV<>\'xx\' order by 1,2',__sumkor);
         _tab.clear;
         {? _tab.first()
         || {!
            |? __sumkor.clear;
               __sumkor.prefix(_tab.STV,_tab.KST);
               __sumkor.first();
               EDI_D.index('LM');
               EDI_D.prefix(EDI_Z.C,'I');
               {? EDI_D.first()
               || {!
                  |? exec('writeone','edi_wspolne',_file);
                     EDI_D.next()
                  !}
               ?};
               _tab.next()
            !}
         ?};
         obj_del(_tab)
      |? _b=1
      || FAKSV.index('FAKS_SV');
         FAKSV.prefix(BB.refsql(_ref));
         {? FAKSV.first()
         || {!
            |? EDI_D.index('LM');
               EDI_D.prefix(EDI_Z.C,'I');
               {? EDI_D.first()
               || {!
                  |? exec('writeone','edi_wspolne',_file);
                     EDI_D.next()
                  !}
               ?};
               FAKSV.next()
            !}
         ?}
      |? _b=2
      || EDI_D.index('LM');
         EDI_D.prefix(EDI_Z.C,'I');
         {? EDI_D.first()
         || {!
            |? exec('writeone','edi_wspolne',_file);
               EDI_D.next()
            !}
         ?}
      ?};

      fclose(_file)
   ?}
?};

_return


\inf_path
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: zmienia format wyswietlania sciezki pod katem systemu
::   WE: _a - sciezka
::   WY: format zgodny z systemem
::  OLD: \inf_path/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:={? sys_name(1)='WINDOWS' || gsub(_a,'/','\\') || gsub(_a,'\\','/') ?};
_wyn


\writeone
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: zapisuje jedna pozycje
::   WE: _a - uchwyt pliku
::  OLD: \writeone/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? {? EDI_D.RL<>'' || ($EDI_D.RL)() || 1 ?}
|| {? EDI_D.FLD<>''
   || _war:=($(EDI_D.TAB+'.'+EDI_D.FLD))();
      _wyn:={? EDI_D.T='N' || form(_war,,,'9.')
            |? EDI_D.T='S' || form(_war)
            |? EDI_D.T='D' || (4+form(_war))+(2+(5-form(_war)))+(form(_war)+2)
            |? EDI_D.T='G' || (2+form(_war))+(form(_war)+2)
            ?}
   |? EDI_D.FLF<>''
   || _wyn:=($EDI_D.FLF)()
   || _wyn:=''
   ?}
?};
{? _wyn<>'' || fwrite(_a,EDI_D.K+'^'+_wyn) ?}


\dzien_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: dodaje opis zdarzenia do dziennika edi
::   WE: _a - typ komunikatu ISTDEF.reference
::       _b - rodzaj zdarzenia 'R'-odczyt, 'W'-zapis
::       _c - data rejestracji
::       _d - czas rejestracji
::       _e - rejestrowal US.reference
::       _f - dokument refsql
::       _g - symbol dokumentu
::       _h - kontrahent KH.reference
::       _i - uwagi
::       _j - sciezka i nazwa zalacznika nr 1
::       _k - zalacznik nr 1
::       [_l] - zalacznik nr 2
::       [_m] - typ zdarzenia
::   WY: ref dodanego rekordu lub null gdy sie nie powiodlo
::  OLD: \dzien_add/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_k')<>type_of('') || _k:=_j ?};
{? _>=12 || {? type_of(_l)<>2 || _l:='' ?} || _l:='' ?};
{? var_pres('_m')<>type_of('') || _m:='L' ?};

_wyn:=null;

_edi:=exec('edi','edi_wspolne');
_context:=_edi.context;
_Pliki:=_edi.PLIKI;

EDI_I.cntx_psh();
EDI_I.use('edi_i_'+($(_c~1)+2));
EDI_I.prefix(); EDI_I.blank();

EDI_I.ISTDEF:=_a;
EDI_I.R:=_b;
EDI_I.D:=_c;
EDI_I.T:=_d;
EDI_I.US:=_e;
EDI_I.DOK:=_f;
EDI_I.SYM:=_g;
EDI_I.KH:=_h;
EDI_I.U:=_i;
EDI_I.FNAME:=_j;
EDI_I.TYP:=_m;

{? EDI_I.add() || _wyn:=EDI_I.ref() ?};
{? _wyn<>null
||
   {? _j<>''
   ||
      _file:=~~;
      _fname:=tm_stamp();
      {? _Pliki.find_key(_k)
      ||
         _file:=fopen(_Pliki.BLOB,'r',,,1);
         {? _file.is_open()
         ||
            _fname:={? _Pliki.PTH='' || _Pliki.PLIK || gsub(_Pliki.PLIK,_Pliki.PTH,'') ?};
            {? EDI_I.bl_put('Z1',_file,,,_fname)
            ||
               _Pliki.OK:='T';
               _Pliki.put()
            ?}
         ?}
      ?};
      POM.TAB:='DOKUM';
      POM.TYPDOK:='SYS';
      DOKUM.prefix();
      DOKUM.blank();
      DOKUM.NR:=exec('numer_new','numery','PACZKA');
      DOKUM.REFSQL:=$EDI_I.ref();
      DOKUM.NAZWA:=EDI_I.FNAME;
      DOKUM.TYP:='I';
      DOKUM.KR_OP:=EDI_I.SYM;
      DOKUM.BL:=_context.DOK2REJKOM;
      {? DOKUM.add() & type_of(_file)<>type_of(~~) & _file.is_open()
      ||
         exec('znak','numery','DOKUM');
         DOKUM.bl_put('DOKUM',_file,,,_fname)
      ?}
   ?};
   {? _l<>''
   ||
      _file1:=~~;
      _fname:=tm_stamp();
      {? _Pliki.find_key(_l)
      ||
         _file1:=fopen(_Pliki.BLOB,'r',,,1);
         {? _file1.is_open()
         ||
            _fname:={? _Pliki.PTH='' || _Pliki.PLIK || gsub(_Pliki.PLIK,_Pliki.PTH,'') ?};
            {? EDI_I.bl_put('Z2',_file1,,,_fname)
            ||
               _Pliki.OK:='T';
               _Pliki.put()
            ?}
         ?}
      ?}
   ?}
?};

{? _wyn=null
||
   FUN.info(exec('msg','edi_wspolne','ERR_ADD') + 'EDI_I.')
?};
EDI_I.cntx_pop();
_wyn


\efallkor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: inicjuje tabelke podsumowan
::  OLD: \efallkor/edi_form.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__sumkor');
__sumkor:=tab_tmp(2,'STV','STRING[8]',''
           ,'KST','STRING[8]',''
           ,'BRT','REAL',''
           ,'NET','REAL',''
           ,'VAT','REAL',''
           ,'KWB','REAL',''
           ,'KWN','REAL',''
           ,'KWV','REAL','')


\efdelkor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: usuwa tabelke podsumowan
::  OLD: \efdelkor/edi_form.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__sumkor');
1


\odczyt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: odczyt komunikatow z plikow i zapis do tabeli ZK_N,
::       wymagane jest wczesniejsze ustawienie zmiennej EDI_Z.C
::  OLD: \odczyt_zk_n/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_edi:=exec('edi','edi_wspolne');

{? EDI_Z.C = null
||
   exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_DEF')+'odczyt_zk_n.')
||
   _ok:=0;
   VAR_DEL.delete('__ZEZ','__PLIKI');

:: __PLIKI tabela z plikami do odczytania
   __PLIKI:=_edi.PLIKI;
   __I_PLIK:=__PLIKI.ndx_tmp(,,'PLIK',,0,'PLIK',,0);
   __I_LP:=__PLIKI.ndx_tmp(,,'LP',,0);
   __PLIKI.index(__I_PLIK);

   {? __PLIKI.first()
   ||
::    Przekazano pliki do czynności więc nie pobieramy plików wg zezwoleń
      _ok:=1
   ||
::    Nie przekazano plików do czynności więc pobieramy pliki wg zezwoleń

::    __ZEZ zezwolenia na odczyt komunikatow danego typu
      {? EDI_Z.WR='W'
      || __ZEZ:=sql(
            'select distinct DEZEZW.FILE_PTH FILE_PTH, DEZEZW.FILE_SIG SIG '+
            'from DEZEZW '+
            'where DEZEZW.ISTDEF like :_a '+
            '  and DEZEZW.B = \'N\' '+
            '  and to_date(:_b) >= DEZEZW.OD and (to_date(:_b) <= DEZEZW.DO or DEZEZW.DO is null) '+
            '  and DEZEZW.WR = '':_c''',
            EDI_Z.C,date(),EDI_Z.WR)
      || __ZEZ:=sql(
            'select distinct DEZEZW.FILE_PTH FILE_PTH, DEZEZW.FILE_SIG SIG '+
            'from DEZEZW '+
            'where DEZEZW.ISTDEF like :_a '+
            '  and DEZEZW.B = \'N\' '+
            '  and DEZEZW.WR = '':_b''',
            EDI_Z.C,EDI_Z.WR)
      ?};


      {? ~__ZEZ.first()
      ||
         exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','MSG_EDI_BRAK_ZEZ'))
      ||
         _ok:=1;
::       pobranie listy plikow z komunikatami do zmiennej

         {!
         |? _pth:=
               {? (1+__ZEZ.FILE_PTH)='@'
                  | ((2+__ZEZ.FILE_PTH)+1)=':'
                  | (2+__ZEZ.FILE_PTH)='\\\\'
                  | (1+__ZEZ.FILE_PTH)='/'
               ||
::                przypadki:
::                - sciezka na komputerze lokalnym (@), zaklada sie ze zawsze bezwzgledna
::                - bezwzgledna (c:)
::                - sieciowa windowsowa (\\)
::                - linuxowa (/)
                  __ZEZ.FILE_PTH
               ||
::                przypadek sciezka wzgledna od katalogu wyznaczonego pth_dir()
                  {? sys_name(1)='WINDOWS'
                  ||
                     pth_dir('a.xml')+{? (1+__ZEZ.FILE_PTH)='\\' || '' || '\\' ?}+__ZEZ.FILE_PTH
                  ||
                     pth_dir('a.xml')+{? (1+__ZEZ.FILE_PTH)='/' || '' || '/' ?}+__ZEZ.FILE_PTH
                  ?}
               ?};
            _can_continue:=exec('indevice_chk','edi_wspolne',_pth);
            {? _can_continue>0
            ||
               {? exec('interm','#system') & 1+_pth='@'
               ||
::                Spawarka, funkcja fdir na razie niedostępna na interm dla ścieżek
::                @ nawet z indevice, więc użyty zamiennnik dir\#file. Jeżeli fdir będzie
::                działał na interm to można to rozgałęzienie wyciąć
                  _pliki:=exec('dir','#file',_pth);

                  {? _pliki.first()
                  ||
                     {!
                     |? __PLIKI.index(__I_PLIK);
                        __PLIKI.PLIK:=_pliki.FILEPATH;
                        __PLIKI.PTH:=gsub(_pliki.FILEPATH,_pliki.FILENAME,'');
                        __PLIKI.SIG:=__ZEZ.SIG;
                        __PLIKI.OK:='N';
                        __PLIKI.IN:='N';
                        {? __PLIKI.add()
                        ||
                           __PLIKI.bl_put('BLOB',__PLIKI.PLIK,0)
                        ?};
                        _pliki.next()
                     !}
                  ?}
               ||
                  _pliki:=exec('pliki','#file',_pth);

                  {? _pliki.first()
                  ||
                     {!
                     |? __PLIKI.index(__I_PLIK);
                        __PLIKI.PLIK:=_pliki.LINE;
                        __PLIKI.PTH:=gsub(_pliki.LINE,_pliki.FILENAME,'');
                        __PLIKI.SIG:=__ZEZ.SIG;
                        __PLIKI.OK:='N';
                        __PLIKI.IN:='N';
                        {? __PLIKI.add()
                        ||
                           __PLIKI.bl_put('BLOB',__PLIKI.PLIK,0)
                        ?};
                        _pliki.next()
                     !}
                  ?}
               ?};
               obj_del(_pliki)
            || _ok:=0
            ?};
            _ok & __ZEZ.next()
         !}
      ?}
   ?};

   {? _ok=0
   ||
      exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','ERR_ADD')+'__PLIKI.')
   ||
::    przetworzenie komunikatow
      {? EDI_Z.C().FORMAT='F'
      ||
         exec('odczyt_ff','edi_wspolne');
::       odtwarzanie statusow zamowien
         exec('akt_rezy','rezerwacje')

      |? EDI_Z.C().FORMAT='X'
      ||
         exec('odczyt_xml','edi_wspolne');
::       odtwarzanie statusow zamowien
         exec('akt_rezy','rezerwacje')

      ||
         exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_NIEZNANY_FORMAT'))
      ?}
   ?};

   VAR_DEL.delete('__ZEZ','__PLIKI'); &__I_PLIK; &__I_LP
?}


\odczyt_ff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: odczyt komunikatow typu flat file,
::       wymagane jest wczesniejsze ustawienie zmiennej __PLIKI
::  OLD: \zk_n_ff/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_edi:=exec('edi','edi_wspolne');

VAR_DEL.delete('__matakt','__EDITMS');
__matakt:=tab_tmp(2,'REF','STRING[16]',''
           ,'NRK','INTEGER',''
           ,'ILR','REAL',''
           ,'ZKP','STRING[16]',''
           ,'ZKN','STRING[16]','');
_editms:='tmp_'+tm_stamp();

{? var_pres('__PLIKI')<100
||
   FUN.info(exec('msg','edi_wspolne','MSG_EDI_BRAK_PLIKOW')+'odczyt_ff.')
||
   {? ~__PLIKI.first()
   ||
      FUN.info(exec('msg','edi_wspolne','MSG_EDI_ODCZYT_BRAK_KOM'))
   ||
      exec('initredi','edi_wspolne'); _lp:=0;
      {!
      |?
         _lp+=1;
         exec('read_edi','edi_wspolne',__PLIKI.BLOB,_lp);
         __PLIKI.LP:=_lp; __PLIKI.put();
         __PLIKI.next()
      !};

      EDI_Z.CHK:='N';
      Ebuf.prefix();
      {? ~Ebuf.first()
      ||
         exec('add_kom','#message','Pusty komunikat.'@,4,'Uwaga')
      ||
::       weryfikacja danych w buforze
         _form:=exec('FindInSet','#table','EDI_D','K','_VER_ORD',EDI_Z.C,"EDI_D.FLF",,,'');
         {? ($_form)()=1
         ||
            {! _i:=1.._lp
            |!
               EDI_Z.POMIN:='N';
               {? exec('gen_nagl','edi_wspolne',_i)=0
               ||
                  {? EDI_Z.POMIN='N'
                  ||
                     exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','ERR_EDI_GEN_NAG'))
                  ?};
                  _edi.err()
               ||
                  exec('gen_pozy','edi_wspolne',_i)
               ?}
            !}
         ?}
      ?};

      VAR_DEL.delete('Ebuf')
   ?}
?};
VAR_DEL.delete('__matakt');
~~


\initredi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: inicjuje bufor dla komunikatow typu ff
::  OLD: \initredi/edison.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('Ebuf');
Ebuf:=tab_tmp(4,'LP' ,'INTEGER'    ,''
               ,'TP' ,'STRING[1]'  ,''
               ,'NRK','INTEGER'    ,''
               ,'KOD','STRING[20]' ,''
               ,'WAR','STRING[255]',''
               ,'ERR','STRING[50]' ,''
               ,'NRL','INTEGER'    ,'')


\read_edi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: odczyt zestawu komunikatow EDI typu ff
::   WE: _a - odczytywany plik
::       _b - kolejny numer LP
::  OLD: \read_edi/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_file:=fopen(_a,'r',0,,1);
{? _file.is_open()
||
   EDI_D.cntx_psh();
   EDI_D.index('K');
   EDI_D.prefix(EDI_Z.C);
   _i:=0;
   {!
   |? (_w:=fread(_file))<>'\n'
   |! _nr:=_w*'^';
      Ebuf.blank(); Ebuf.prefix();
      Ebuf.KOD:=(_nr-1)+_w; _w:=_nr-_w;
      Ebuf.WAR:=exec('delspace','#string',{? EDI_D.UPPER='T' || ~-_w || _w ?},2);
      Ebuf.LP:=_b;
      Ebuf.TP:={? _find:=EDI_D.find_key(Ebuf.KOD) || EDI_D.M || '' ?};
      Ebuf.ERR:={? _find=0 || 'Brak definicji kodu' || '' ?};
      _i+=1;
      Ebuf.NRK:=_i;
      Ebuf.add(1)
   !};
   EDI_D.cntx_pop();
   fclose(_file)
?}


\gen_nagl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: generowanie naglowka dokumentu z komunikatu typu ff,
::       wymagane jest wczesniejsze ustawienie zmiennej EDI_Z.C
::   WE: _a - liczba porzadkowa
::   WY: 1 - jesli dodano naglowek zamowienia, 0 - wpp
::  OLD: \gen_nagl/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=0;

{? EDI_Z.C = null
||
   FUN.info(exec('msg','edi_wspolne','WARNING_EDI_DEF')+'gen_nagl.')
||
   Ebuf.prefix(_a,'N');
   {? Ebuf.first()
   || _form:=exec('FindInSet','#table','EDI_D','K','_N__BL_',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)();
      _mech:=EDI_Z.C().IST_ISTK='M';

      {! |? EDI_D.index('K');
            EDI_D.prefix(EDI_Z.C);
            {? EDI_D.find_key(Ebuf.KOD) & EDI_D.TAB<>'' & {? EDI_D.RL<>'' || ($EDI_D.RL)() || 1 ?}
            || {? EDI_D.FLD <> ''
               || ($(EDI_D.TAB+'.'+EDI_D.FLD))():=
                     {? EDI_D.T='N' || exec('str2real','#convert',Ebuf.WAR)
                     |? EDI_D.T='S' || Ebuf.WAR
                     |? EDI_D.T='D' || {? _mech
                                       || {? Ebuf.WAR=''
                                          || date(0,0,0)
                                          || exec('str2date','#convert',Ebuf.WAR)
                                          ?}
                                       || date(#(4+Ebuf.WAR),#(2+(4-Ebuf.WAR)),#(2+(6-Ebuf.WAR)))
                                       ?}
                     |? EDI_D.T='G' || {? _mech
                                       || {? Ebuf.WAR=''
                                          || time(0,0,0)
                                          || exec('str2time','#convert',Ebuf.WAR)
                                          ?}
                                       || time(#(2+Ebuf.WAR),#(2+(2-Ebuf.WAR)),#(2+(4-Ebuf.WAR)))
                                       ?}
                     ?}
               || ($EDI_D.FLF)()
               ?}
            ?};
            Ebuf.next()
      !};

      _form:=exec('FindInSet','#table','EDI_D','K','_N__ADD',EDI_Z.C,"EDI_D.FLF",,,'');
      _return:=($_form)(); {? type_of(_return)<>type_of(0) || _return:=0 ?}
   ?}
?};

_return


\gen_pozy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: generowanie pozycji dokumentow z komunikatu typu ff,
::       wymagane jest wczesniejsze ustawienie zmiennych EDI_Z.C, EDI_Z.WR
::   WE: _a - liczba porzadkowa
::  OLD: \gen_pozy/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.C = null
||
   FUN.info(exec('msg','edi_wspolne','WARNING_EDI_DEF')+'zapis_faks.')
|? 'WR' * EDI_Z.WR = 0
||
   FUN.info(exec('msg','edi_wspolne','WARNING_EDI_DEF_WR')+'zapis_faks!')
||
   Ebuf.prefix(_a,'P');
   {? Ebuf.first()
   ||
      _buf:=''; _poz:=0;
      _form:=exec('FindInSet','#table','EDI_D','K','_P__BL_',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)();

      {!
      |? EDI_D.index('K');
         EDI_D.prefix(EDI_Z.C);
         {? EDI_D.find_key(Ebuf.KOD) & EDI_D.TAB<>'' & {? EDI_D.RL<>'' || ($EDI_D.RL)() || 1 ?}
         ||
            {? EDI_D.FLD <> ''
            || ($(EDI_D.TAB+'.'+EDI_D.FLD))() :=
                  {? EDI_D.T = 'N' || #Ebuf.WAR
                  |? EDI_D.T = 'S' || Ebuf.WAR
                  |? EDI_D.T = 'D' || date(#(4+Ebuf.WAR),#(2+(4-Ebuf.WAR)),#(2+(6-Ebuf.WAR)))
                  |? EDI_D.T = 'G' || time(#(2+Ebuf.WAR),#(2+(2-Ebuf.WAR)),#(2+(4-Ebuf.WAR)))
                  ?}
            || ($EDI_D.FLF)()
            ?}
         ?};
         {? _buf = 'LIN_LNU'
         ||
            _poz+=1;
            _form:=exec('FindInSet','#table','EDI_D','K','LIN_LNU',EDI_Z.C,"EDI_D.FLF",,,'');
            {? _form<>''
            ||
               ($_form)()
            ||
               _tab:=exec('FindInSet','#table','EDI_D','K','LIN_LNU',EDI_Z.C,"EDI_D.TAB",,,'');
               _fld:=exec('FindInSet','#table','EDI_D','K','LIN_LNU',EDI_Z.C,"EDI_D.FLD",,,'');
               ($(_tab+'.'+_fld))():=_poz
            ?};

            _form:=exec('FindInSet','#table','EDI_D','K','_P__ADD',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)();
            _form:=exec('FindInSet','#table','EDI_D','K','_P__BL_',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)();
            _ok:=Ebuf.next(); _buf:=Ebuf.KOD
         ||
            _ok:=Ebuf.next(); _buf:=Ebuf.KOD
         ?};
         _ok
      !};

      _poz+=1;
      _form:=exec('FindInSet','#table','EDI_D','K','LIN_LNU',EDI_Z.C,"EDI_D.FLF",,,'');
      {? _form<>''
      ||
         ($_form)()
      ||
         _tab:=exec('FindInSet','#table','EDI_D','K','LIN_LNU',EDI_Z.C,"EDI_D.TAB",,,'');
         _fld:=exec('FindInSet','#table','EDI_D','K','LIN_LNU',EDI_Z.C,"EDI_D.FLD",,,'');
         ($(_tab + '.' + _fld))():=_poz
      ?};

      _form:=exec('FindInSet','#table','EDI_D','K','_P__ADD',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)();
      _form:=exec('FindInSet','#table','EDI_D','K','_P__END',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)();
      _form:=exec('FindInSet','#table','EDI_D','K','_N__DOD',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)();

      __PLIKI.cntx_psh();
      __PLIKI.index(__I_LP); __PLIKI.prefix(_a);
      {? __PLIKI.first()
      ||
::       dodanie zapisu w dzienniku
::       zmienne EDI_Z.DOK, EDI_Z.SYM, EDI_Z.KH ustawiane w formule dodajacej naglowek dokumentu
         _dzien_a:=exec('dzien_add','edi_wspolne',EDI_Z.C,EDI_Z.WR,date(),time(),OPERATOR.USER,EDI_Z.DOK,EDI_Z.SYM
            ,EDI_Z.KH,'',__PLIKI.PLIK);
         {? _dzien_a=null
         ||
            FUN.info('Nie powiodło się dodanie zapisu do dziennika.'@);  _ok:=0
         ?}
      ?};
      __PLIKI.cntx_pop()
   ?}
?}


\odczyt_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: odczyt komunikatow typu xml,
::       wymagane jest wczesniejsze ustawienie zmiennej EDI_Z.C,
::       wymagane jest wczesniejsze ustawienie zmiennej __PLIKI
::  OLD: \zk_n_xml/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_edi:=exec('edi','edi_wspolne');

VAR_DEL.delete('__matakt');
__matakt:=tab_tmp(2,'REF','STRING[16]',''
           ,'NRK','INTEGER',''
           ,'ILR','REAL',''
           ,'ZKP','STRING[16]',''
           ,'ZKN','STRING[16]','');

{? var_pres('__PLIKI')<100
||
   exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','MSG_EDI_BRAK_PLIKOW')+'odczyt_xml.')

|? EDI_Z.C = null
||
   exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_DEF')+'odczyt_xml.')
||
   {? ~__PLIKI.first()
   ||
      exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','MSG_EDI_ODCZYT_BRAK_KOM'))
   ||
      _ok:=exec('gen_tab','edi_wspolne',EDI_Z.C);
      {? _ok=0
      ||
         exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARING_EDI_DEF_PAR'))
      ||
         {!
         |?
            _in:=fopen(__PLIKI.BLOB,'b',0,,1);
            {? ~_in.is_open()
            ||
               exec('logOrInfo','edi_wspolne',
                  exec('msg','edi_wspolne','ERR_FOPEN')+exec('inf_path','edi_wspolne',__PLIKI.PLIK)+'.')
            ||
               exec('imp_wyp_buf','edi_wspolne',EDI_Z.C,_in,__PLIKI.PLIK,__PLIKI.PTH,__PLIKI.SIG);
               fclose(_in)
            ?};
            obj_del(_in);
            __PLIKI.next()
         !};

::       podglad bufora z komunikatami
         _Tab:=($wer[1][1])();
         {? _Tab.first()
         ||
            {? ~_edi.sza
            ||
               _Tab.select()
            ||
               _loop:=_Tab.first();
               {!
               |? _loop
               |!
                  exec('run_form_imp','edi_wspolne',_Tab.ISTDEF,_Tab.TM_STAM);
                  _loop:=_Tab.next()
               !}
            ?}
         ||
            exec('logOrInfo','edi_wspolne','Brak dokumentów do odczytu.'@)
         ?}
      ?}
   ?}
?};
VAR_DEL.delete('__matakt');
~~


\gen_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula tworzy tabele tymczasowe na podstawie definicji
::   WE: _a - ref definicji na podstawie ktorej maja zosta stworzone tabele tymczasowe
::       _b - jaki rodzaj pol z definicji ma zostac utworzony w tabeli tymczasowej (opcjonalny)
::       [_c] - 0-edi logistyka, 1-edi finanse
::   WY: 1/0
::  OLD: \gen_tab/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
_edi_fin:={? var_press('_c')=type_of(0) || _c || 0 ?};

: wszystkie oprocz T-tagow
{? _<2 || _b:='EOM'?};
_tab:=sql('select count(distinct(ISTDEFS.NAZTAB)) as SUMA from ISTDEFS
            where ISTDEFS.NAZTAB!=\'\' and ISTDEFS.ISTDEF=:_a',_a);
ile:={? _tab.first() & _tab.SUMA || _tab.SUMA || 1 ?};
VAR_DEL.delete('wer');
wer:=obj_new(ile); {! _i:=1..ile |! wer[_i]:=obj_new(5) !};
{! _i:=1..ile |! wer[_i][1]:=''; wer[_i][2]:=''; wer[_i][3]:=''; wer[_i][4]:=''; wer[_i][5]:='' !};
_i:=0;
ISTDEFI.index('TAB_LP');
ISTDEFI.prefix(_a);
_naztab:='';
{? ISTDEFI.first()
|| {!|?
      {? _b*ISTDEFI.WYM & _naztab<>ISTDEFI.ISTDEFS().NAZTAB
      || ISTDEFI.cntx_psh();
         _naztab:=ISTDEFS.NAZTAB;
         VAR_DEL.delete(_naztab);
         _tab_tmp:='1,';
         ISTDEFI.prefix(_a,ISTDEFS.NAZTAB);
         {? ISTDEFI.first()
         || {!|?
               {? _naztab=ISTDEFI.ISTDEFS().NAZTAB & _b*ISTDEFI.WYM
               || _tab_tmp+='\''+ISTDEFI.NAZFLD+'\',\''+ISTDEFI.TYP+'\',\''+
                      {? ISTDEFI.OPIS_FLD<>'' || ISTDEFI.OPIS_FLD || ISTDEFI.NAZ ?}+'\','
               ?};
               ISTDEFI.next()
            !};
            _i+=1;
            ($(_naztab+':=tab_tmp('+(_tab_tmp)
                          +{? _i=1 || '\'FILE_PTH\',\'STRING[250]\',\'Plik\',' || '' ?}
                          +{? _i=1 || '\'FILE_SIG\',\'STRING[250]\',\'Pliku z podpisem\',' || '' ?}
                          +'\'TM_STAM\',\'REAL\',\'CRC\''
                          +{? ~_edi_fin & _i=1 || ',\'ISTDEF\',\'STRING[16]\',\'Definicja\'' || '' ?}
                          +')'
                          ))();
            _naz_fld:=_naztab;
: akronim tabeli
            wer[_i][1]:=_naztab;
::          uchwyt do tabeli
            _Tab:=($wer[_i][1])();
: akronim okienka wertowania
            wer[_i][2]:=($(_naztab+'.mk_sel(\''+_naz_fld+'\',,1,\''+'#'+(-_naz_fld)+'\')'))();
            {? _i=1
            || {? _edi_fin
               || ($(_naztab+'.win_act(\''+wer[_i][2]+'\',,\'Formuła\',\'dEkretowanie\',,\'Dekretowanie komunikatu EDI\',
                     "exec(\'edi_dekr\',\'efaktury\')",,1,1,"exec(\'gb_dekr\',\'efaktury\')",
                     "exec(\'ga_dekr\',\'efaktury\')")'))();
                  ($(_naztab+'.win_act(\''+wer[_i][2]+'\',,\'Formuła\',\'Dokument w obiegu\',,\'Tworzenie dokumentu w obiegu na podstawie komunikatu EDI\',
                     "exec(\'edi_add\',\'skid_dob\')",,1,1,"exec(\'gbedidob\',\'skid_dob\')",
                     "exec(\'gaedidob\',\'skid_dob\')")'))()
               ||
                  _fb:=$("exec('run_form_imp','edi_wspolne',"
                     +_naztab+".ISTDEF,"
                     +_naztab+".TM_STAM); sel_exit()");
                  _Tab.win_act(wer[_i][2],,'Formuła','Generuj',,,_fb,,,1)
               ?}
            ?};
            ($(_naztab+'.win_sel(\''+wer[_i][2]+'\')'))();
            wer[_i][5]:=($(_naztab+'.mk_edit(\''+_naz_fld+'\',1)'))();
            ($(_naztab+'.win_edit(\''+wer[_i][5]+'\')'))();
            obj_del(_Tab)
         ?};
         ISTDEFI.cntx_pop()
      ?};
      ISTDEFI.next()
   !}
?};
{! _i:=1..ile |! {? wer[_i][1]<>'' || wer[_i][3]:=($(wer[_i][1]+'.ndx_tmp(,1,\'TM_STAM\',,)'))() ?} !};
{! _i:=1..ile |! {? wer[_i][1]<>'' || ($(wer[_i][1]+'.index(\''+wer[_i][3]+'\')'))() ?} !};
{? wer[1][1]<>''
|| {| ($(wer[1][1]))() |!
      {? _edi_fin
      || wer[1][4]:=grp_make('Dokumenty komunikatu '@+ISTDEF.VER )
      || wer[1][4]:=grp_make('Dokumenty / Zamówienia'@)
      ?};
      _wiersze:=(35%ile)-2;
      grp_sel(wer[1][4],($(wer[1][1]))(),wer[1][2],,
      " {! _i:=2..ile
        |! {? wer[_i][1]<>''
           || {| ($(wer[_i][1]))()
              |! index(wer[_i][3]);
                 prefix(($(wer[1][1]+'.TM_STAM'))());
                 first();
                 grp_disp(($(wer[_i][1]))(),wer[_i][2])
              |}
           ?}
        !}
      ",0,0,_wiersze,,,,,'maximized_with_title');
      _panel:='panel0';
      {! _i:=2..ile
      |! _new_panel:='panel'+$_i;
         {? wer[_i][1]<>''
         || grp_splt(wer[1][4],_panel,'horizontal',_new_panel,_wiersze+3);
            grp_sel(wer[1][4],($(wer[_i][1]))(),wer[_i][2],,,0,,,,,,,'maximized_with_title');
            _panel:=_new_panel
         ?}
      !};
      win_sel(wer[1][4])
   |};
   1
|| 0
?}


\run_form_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: formula wykonuje wszystkie formuly dla importu dla rekordow z tabeli
::       tymczasowej,
::      wymagane jest wczesniejsze ustawienie zmiennych EDI_Z.C, EDI_Z.WR
::   WE: _a - ref definicji refSQL (string[16])
::       _b - znacznik CRC wg scalone sa dane
::  OLD: \run_form_imp/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
_edi:=exec('edi','edi_wspolne');

__DATE:=date(); __TIME:=time();

ISTDEFI.cntx_psh();
ISTDEFS.cntx_psh();
_typ:='EOM';
ISTDEFI.index('TAB_LP');
_istdef:=BB.sqlint(_a);
ISTDEFI.prefix(_istdef);
_naztab:=_file:=_uwaga:='';
_dzien_a:=1;
EDI_Z.POMIN:='N';

:: utworzenie dokumentu na podstawie komunikatu
{? ISTDEFI.first()
||
   {!
   |? {? _typ*ISTDEFI.WYM & _naztab<>ISTDEFI.ISTDEFS().NAZTAB
      ||
         ISTDEFI.cntx_psh();
         _naztab:=ISTDEFS.NAZTAB;
         {| ($(_naztab))()
         |! cntx_psh();
            prefix(_b);
            {? first() & EDI_Z.POMIN='N'
            ||
               {? _file='' & var_pres('FILE_PTH',($(_naztab))())>0 || _file:=FILE_PTH ?};
               {!
               |?
                  cntx_psh();
                  _last:=~next();
                  cntx_pop();
                  ISTDEFI.prefix(_istdef,_naztab);
                  {? ISTDEFI.first()
                  ||
                     {!
                     |? {? _naztab=ISTDEFI.ISTDEFS().NAZTAB
                           & (ISTDEFI.LOG='' | ($ISTDEFI.LOG)(_last))
                        ||
                           _null:=
                              {? ISTDEFI.TYP='DATE' || date(0,0,0)
                              |? ISTDEFI.TYP='TIME' || time(0,0,0)
                              |? ISTDEFI.TYP='INTEGER' || 0
                              |? ISTDEFI.TYP='REAL' || 0
                              |? ISTDEFI.TYP*'STRING' || ''
                              || ~~
                              ?};
                           {? 0 & ISTDEFI.WYM='M' & ($(_naztab+'.'+ISTDEFI.NAZFLD))()=_null
                           ||
                              undo();
                              exec('logOrInfo','edi_wspolne',
                                 'Niewypełnione pole: %1 (%2.%3)'
                                 '\nPole jest typu M - Mandatory i musi byc wypełnione.'@[ISTDEFI.NAZ,_naztab,ISTDEFI.NAZFLD])

                           |? ISTDEFI.REGULY <> '' & _naztab = ISTDEFI.ISTDEFS().NAZTAB
                           ||
                              ($ISTDEFI.REGULY)(_last)
                           ?}
                        ?};
                        ISTDEFI.next()
                     !}
                  ?};
                  next()
               !}
            ?};
            cntx_pop()
         |};
         ISTDEFI.cntx_pop()
      ?};
      ISTDEFI.next()
   !}
?};

{? EDI_Z.POMIN='N'
||
:: dodanie zapisu w dzienniku
:: zmienne EDI_Z.DOK, EDI_Z.SYM, EDI_Z.KH ustawiane w formule dodajacej naglowek dokumentu
   _dzien_a:=exec('dzien_add','edi_wspolne',EDI_Z.C,EDI_Z.WR,__DATE,__TIME,OPERATOR.USER,EDI_Z.DOK,
      EDI_Z.SYM, EDI_Z.KH,_uwaga,_file);
   {? _dzien_a=0 || FUN.info('Nie powiodło się dodanie zapisu do dziennika.'@) ?}
||
   _edi.err()
?};

:: usuniecie komunikatu z bufora
{? ISTDEFI.first()
||
   {!
   |? {? _typ*ISTDEFI.WYM & _naztab<>ISTDEFI.ISTDEFS().NAZTAB
      ||
         ISTDEFI.cntx_psh();
         _naztab:=ISTDEFS.NAZTAB;
         {| ($(_naztab))()
         |! cntx_psh();
            prefix(_b);
            {? first || {! |? del() !} ?};
            cntx_pop()
         |};
         ISTDEFI.cntx_pop()
      ?};
      ISTDEFI.next()
   !}
?};
ISTDEFS.cntx_pop();
ISTDEFI.cntx_pop();

&__DATE; &__TIME


\imp_wyp_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula odczytuje dane zapisane w pliku xml i zapisuje je do tabeli
::       tymczasowej zgodnie z specyfikacja EDI (parametr _a)
::   WE: _a - ref definicji ISTDEF.ref (specyfikacji EDI)
::       _b - uchwyt do pliku xml
::       _c - sciezka wraz z nazwa pliku xml
::       _d - sciezka do plikow xml
::       _e - rozszerzenie dodatkowego pliku
::  OLD: \imp_wyp_buf/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
SKID.EXP_IMP:='I';
_in:=_b;
_token:=obj_new(4); _token[1]:=''; _token[2]:=0;

SKID.TM_STAM:=exec('tm_stamp','#tm_stamp');
SKID.FILE_PTH:=_c;

_xml_path:=exec('xml_path','edi_wspolne',_a);

_poziom:=0;
_stos:=obj_new(100);
_cont:=1;
{!|?
   _token[1]:=''; _rr:=exec('getToken','edi_wspolne',_in,_token);
   {? _rr=0
   || _cont:=0
   ||
      {? (1+_token[1])='<' & (_token[1]+2)='/>'
         | (2+_token[1])='<?'
         | (4+_token[1])='<!--' & (_token[1]+3)='-->'
      ||
         1
      ||
         _ctoken:='';
         {? (2+_token[1])='</' || _poziom-=1; _ctoken:=_token[1]
         |? (1+_token[1])='<' || _poziom+=1; _stos[_poziom]:=_token[1]
         ?};
         _tag_poz:=exec('tag_poz','edi_wspolne',_xml_path,_stos,_poziom,_ctoken);
         {? _tag_poz*'B'
         || SKID.TM_STAM:=exec('tm_stamp','#tm_stamp')
         |? _tag_poz*'A'
: na koncu sekwencji powtarzanej w definicji powinien sie znalesc tag z wymagalnoscia A
         || {? _tag_poz*'I'
            || {| ($ISTDEFI.ISTDEFS().NAZTAB)()
               |! add();
                  blank()
               |}
            |? _tag_poz*'S'
            || {| ($ISTDEFS.NAZTAB)()
               |! add();
                  blank()
               |}
            ?}
         |? _tag_poz='IP'
         || _ident:=_token[1];
            _token[1]:=''; _rr:=exec('getToken','edi_wspolne',_in,_token);
            {? _rr=2
            || exec('wyp_tab_tmp','edi_wspolne',_token[1],_d,_e)
            || {? _rr=1
               || {? (2+_token[1])='</' || _poziom-=1
                  |? (1+_token[1])='<' || _poziom+=1; _stos[_poziom]:=_token[1]
                  ?}
               ?};
               exec('wyp_tab_tmp','edi_wspolne','',_d,_e)
            ?};
            {? _rr=0 || _cont:=0 ?}
         |? _tag_poz=''
         || _cont=0
         ?}
      ?}
   ?};
   _cont
!}


\getToken
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Pobiera tag lub dane.
::   WE: _a - uchwyt do pliku
::       _b - zmienna obj(2) (na pierwszej pozycji wartosc danej, na drugiej
::            pozycja odczytywana z pliku)
::   WY: _rr - status
::           = 0 - nieoczekiwana wartość
::           = 1 - odczytano tag
::           = 2 - odczytano dane
::  OLD: \getToken/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:='';
_in:=_a;
_token:=_b;
{! |? _znak:=fread(_in); _token[2]+=1;
     (_znak=9 | _znak=10 | _znak=32 | _znak=13 | _znak=254 | _znak=255 | _znak=0) & _znak<>-1
|! 1
!};
{? _znak=-1
|| _rr:=0
|| _znak1:=%_znak;
   {? '<'=_znak1
   || _rr:=1
   || _rr:=2
   ?}
?};
{? _rr
|| _wk:={? _rr=1 || '>' || '<' ?};
   _cont:=1;
   {! |? _znak1<>_wk & _cont |!
      _token[1]+=_znak1;
      _znak:=fread(_in); _token[2]+=1;
      {? _znak=-1 || _cont:=0 || _znak1:=%_znak ?}
   !};
   {? _cont
   || {? _rr=1
      || _token[1]+=%_znak
      || _token[2]-=1;
         fseek(_in,_token[2])
      ?}
   || _rr:=0
   ?};
   _wsk:=_token[1]*'CDATA[';
   {? _wsk>0
   ||
      _token[1]:=(_wsk+5)-_token[1];
      _token[1]:=(_token[1]*']]>'-1)+_token[1];
      _token[2]-=1;
      fseek(_in,_token[2]);
      _rr:=2
   ?}
?};
_rr


\wyp_tab_tmp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula wypelnia pole tabeli tymczasowej
::   WE: _a - wartosc ktora ma byc wypelniona
::       _b - sciezka do plikow xml
::       _c - rozszerzenie dodatkowego pliku
::  OLD: \wyp_tab_tmp/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
_war:=_a;
_pth:=_b;
_ext:=_c;

{? 'MOE'*ISTDEFI.WYM
|| ($(ISTDEFI.ISTDEFS().NAZTAB+'.TM_STAM'))():=SKID.TM_STAM;
   {? var_pres('FILE_PTH',($(ISTDEFI.ISTDEFS().NAZTAB))())>0
   || ($(ISTDEFI.ISTDEFS().NAZTAB+'.FILE_PTH'))():=SKID.FILE_PTH
   ?};
   {? _ext<>'' & var_pres('FILE_SIG',($(ISTDEFI.ISTDEFS().NAZTAB))())>0
   || _ile:=_pth*'*';
      {? _ile
      ||  _ile_roz:=+(_ile-_pth);
         _nazwa:=(SKID.FILE_PTH-_ile_roz);
         _in:=fopen(_nazwa+'.'+_ext,'br',0);
         {? _in
         || ($(ISTDEFI.ISTDEFS().NAZTAB+'.FILE_SIG'))():=_nazwa+'.'+_ext;
            fclose(_in)
         ?}
      ?}
   ?};
   {? var_pres('ISTDEF',($(ISTDEFI.ISTDEFS().NAZTAB))())>0
   || ($(ISTDEFI.ISTDEFS().NAZTAB+'.ISTDEF'))():=BB.refsql(ISTDEFI.ISTDEFS().ISTDEF)
   ?};
   _wyn:={? ISTDEFI.TYP='DATE' || date(#(4+_war),#(2+(5-_war)),#(2+(8-_war)))
         |? ISTDEFI.TYP='TIME' || time(#(2+_war),#(2+(3-_war)),#(2+(6-_war)))
         |? ISTDEFI.TYP='INTEGER' || #_war
         |? ISTDEFI.TYP='REAL' || #_war
         |? ISTDEFI.TYP*'STRING' || _war
         || ~~
         ?};
   ($(ISTDEFI.ISTDEFS().NAZTAB+'.'+ISTDEFI.NAZFLD))():=_wyn
?}


\edi_i_em_pw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed wyswietleniem pola EDI_I.EM
::   WY: kolor
::  OLD: \edi_i_em_pw/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_kolor:={? EDI_I.EM='T' || 'EDI_I#01#01' || exec('edi_i_kol','edi_wspolne') ?};
{? _kolor<>'' || Color.fnd_kol(_kolor) || '' ?}


\edi_i_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: zwraca kod koloru w oknie WER tabeli EDI_I
::   WY: kod koloru lub ''
::  OLD: \edi_i_kol/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? EDI_I.A = 'T' || 'EDI_I#01#03'
|? EDI_I.Z2<>null || 'EDI_I#01#02'
|? EDI_I.EM = 'T' || 'EDI_I#01#01'
|| ''
?}


\edi_i_szuk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Szukaj przed okna WER tabeli EDI_I
::  OLD: \edi_i_szuk/edison.fml
::----------------------------------------------------------------------------------------------------------------------
EDI_I.win_patt('SZUK'); 1


\edi_i_anul
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Anuluj przed okna WER tabeli EDI_I
::  OLD: \edi_i_anul/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=exec('get','#params',5001,2,OPERATOR.USER);
{? _par='N' | _par=''
|| FUN.info(exec('msg','edi_wspolne','MSG_EDI_BRAK_UPRAWNIEN'))
|? EDI_I.R <> 'W'
|| FUN.info('Zabronione anulowanie zdarzeń tego typu.'@)
|? exec('FindInSet','#table','DOKUM','DOKUM',$EDI_I.ref(),REF.FIRMA,"@.DOKUM.BL='A'",1,,0)
||
   FUN.info('Zabronione anulowanie zdarzenia powiązanego z zapisem w rejestrze komunikacji.'@)
||
   {? {? EDI_I.Z2<>null
      || FUN.ask('Dokument został podpisany. Czy anulować zdarzenie?'@)
      || FUN.ask('Czy anulować zdarzenie?'@)
      ?}
   || exec('dzien_anul','edi_wspolne',date(),time(),OPERATOR.USER)
   ?}
?}


\dzien_anul
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: anuluje zapis w dzienniku zdarzen edi oraz zmienia znacznik odczyt lub zapis
::       na dokumentach zwiazanych z anulowanym zdarzeniem,
::       zaklada sie ze anulowany bedzie biezacy rekord tabeli EDI_I
::   WE: _a - data anulowania
::       _b - czas anulowania
::       _c - anulowal US.reference
::   WY: 1 - anulowanie zapisu w dzienniku powiodlo sie, 0 - wpp
::  OLD: \dzien_anul/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=0;

_do_state:=do_state();
{? _do_state=0 || do() ?};
EDI_I.A:='T';
EDI_I.A_D:=_a;
EDI_I.A_T:=_b;
EDI_I.A_US:=_c;
_return:=EDI_I.put();

{? _return=0
||
   undo(); FUN.info(exec('msg','edi_wspolne','ERR_PUT',$EDI_I.ref()))
||
:: zmiana znacznika odczyt lub zapis na dokumencie
   _return:=0;
   {? type_of(ref_tab(EDI_I.DOK))<>type_of(~~)
   ||
      _Tab:=ref_tab(EDI_I.DOK);
      _continue:=exec('FindAndGet','#table',_Tab,EDI_I.DOK,,"
         _Tab:=_b;
         {? EDI_I.R='W' & var_pres('EDI_W',_Tab)=27 || _Tab.EDI_W:='N'
         |? EDI_I.R='R' & var_pres('EDI_R',_Tab)=27 || _Tab.EDI_R:='N'
         ?};
         {? ~_Tab.put()
         ||
            undo(); FUN.info(exec('msg','edi_wspolne','ERR_PUT',$_Tab))
         ?}
      ",-1,_Tab);
      {? _continue=-1
      ||
         undo(); FUN.info(exec('msg','edi_wspolne','ERR_SEEK',EDI_I.DOK))
      ?}
   ?}
?};
{? _do_state=0 || end() ?};

_return


\edi_i_rec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Record przed okna WER tabeli EDI_I
::   WE: _a - 0-nie ostatni w dziedzinie, 1-ostatni w dziedzinie
::   WY: kolor rekordu
::  OLD: \edi_i_rec/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a
||
::   EDI_I.actions('WER','U',,1);
   _grayed:={? EDI_I.TYP='B' || '' || 'E' ?};
   {? type_of(ref_tab(EDI_I.DOK))=type_of(~~) || _grayed+='A' ?};
   EDI_I.actions_grayed('WER',_grayed)
?};
exec('rekprzed','color','EDI_I#01')


\edi_i_wys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Wyswietl przed okna WER tabeli EDI_I
::  OLD: \edi_i_wys/edison.fml
::----------------------------------------------------------------------------------------------------------------------
EDI_I.win_edit('RED'); EDI_I.display()


\edi_read
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: odczyt plikow z komunikatami edi
::   WE: [_a] - konkretny ref komunikatu
::       [_b] - 0/1 - bl_dokum_link
::  OLD: \edi_read/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_istdef:={? var_press('_a')=type_of(null()) || _a || null ?};
_bl_dokum_link:={? var_pres('_b')=type_of(0) || _b || 1 ?};

_edi:=exec('edi','edi_wspolne');

SKID.ISTDEF:='E';
EDI_Z.WR:='R';
EDI_Z.C:=
   {? _istdef
   ||
      _istdef
   |? _edi.sza
   ||
      exec('logOrInfo','edi_wspolne','Nie określono komunikatu EDI.'@)
   ||
      {? ISTDEF.select(,1,2) || ISTDEF.ref() || null ?}
   ?};
{? EDI_Z.C<>null
||
   EDI_Z.C();
:: przetwarzany dokument
   EDI_Z.DOK:='';
   exec('ini_kom','#message','Informacje o odczycie komunikatów'@,,,1,200);
:: statystyki użycia
   exec('stat_add','st_common','A_EDI','EDIR',ISTDEF.K,ISTDEF.N);
::
   ($EDI_Z.C().FR)();
:: statystyki użycia
   exec('stat_add','st_common','A_EDIE','EDIR',ISTDEF.K,ISTDEF.N);
:: komunikat o wyniku funkcji
   __kom.save(_edi.LOG);
:: dokument Businesslink
:: zakłda się, że w kontekście dokument Businesslink przetwarzany jest tylko jeden dokument
   {? _bl_dokum_link || exec('bl_dokum_link','zbl_dok',EDI_Z.DOK) ?};
   {? ~_edi.sza
   ||
      exec('end_kom','#message')
   ?}
?}


\edi_write
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: generacja plikow z komunikatami edi
::   WE: [_a] - konkretny ref komunikatu
::  OLD: \edi_writ/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_istdef:={? var_press('_a')=type_of(null()) || _a || null ?};
_ref:={? var_press('_b')=type_of(null()) || _b || null ?};

_edi:=exec('edi','edi_wspolne');

SKID.ISTDEF:='E'; EDI_Z.WR:='W';
BEER.MW:='';
EDI_Z.C:=
   {? _istdef
   ||
      _istdef

   |? _edi.sza
   ||
      exec('logOrInfo','edi_wspolne','Nie określono komunikatu EDI.'@);
      null()
   ||
      {? ISTDEF.select(,1,2) || ISTDEF.ref() || null ?}
   ?};

{? EDI_Z.C<>null
||
   EDI_Z.C();
:: przetwarzany dokument
   EDI_Z.DOK:='';
:: inicjacja bazy komunikatow
   exec('ini_kom','#message','Informacje o zapisie komunikatów'@,,,,200);
:: statystyki użycia
   exec('stat_add','st_common','A_EDI','EDIW',ISTDEF.K,ISTDEF.N);
::
   ($EDI_Z.C().FW)(_ref);
:: statystyki użycia
   exec('stat_add','st_common','A_EDIE','EDIW',ISTDEF.K,ISTDEF.N);
:: komunikat o wyniku funkcji
   __kom.save(_edi.LOG);
   {? ~_edi.sza
   ||
      exec('end_kom','#message')
   ?}
?}


\edi_i_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Wyswietlanie zalacznika
::  OLD: \edi_i_zal/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? EDI_I.Z1=null()
|| FUN.info('Brak załącznika.'@)
|| exec('bl_view','#blob',EDI_I,'Z1')
?}


\edi_i_kop_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: kopiowanie pliku na lokalny
::  OLD: \edi_i_kop_zal/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? EDI_I.Z1 <> null
||
   _name:={? EDI_I.FNAME<>'' || EDI_I.FNAME || EDI_I.bl_info('Z1', 'NAME') ?};
   _ext:=EDI_I.bl_info('Z1', 'EXTENSION');

    _txt:=exec('bl_save','#blob',EDI_I,'Z1');
   {? _txt<>''
   || FUN.info('Skopiowano plik:\n'@+_txt)
   || FUN.info('Kopiowanie pliku:\n%1\nnie powiodło się lub rezygnacja.'@[_name])
   ?}
||
   FUN.info('Brak załącznika.'@)
?};
''


\edi_i_pod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: Wyswietlanie podpisanego zalacznika
::  OLD: \edi_i_pod/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? EDI_I.Z2 = null
|| FUN.info('Brak załącznika.'@)
|| exec('bl_view','#blob',EDI_I,'Z2')
?}


\edi_i_kop_pod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: kopiowanie pliku na lokalny
::  OLD: \edi_i_kop_pod/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? EDI_I.Z2<>null()
||
   _name:=EDI_I.bl_info('Z2', 'NAME');

   _txt:=exec('bl_save','#blob',EDI_I,'Z2');
   {? _txt<>''
   || FUN.info('Skopiowano plik:\n'@+_txt)
   || FUN.info('Kopiowanie pliku:\n%1\nnie powiodło się lub rezygnacja.'@[_name])
   ?}
||
   FUN.info('Brak załącznika.'@)
?};
''


\zapis_zd_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: zapis komunikatow opartych na zamowieniach dostaw z tabeli ZD_NAG do pliku,
::       wymagane jest wczesniejsze ustawienie zmiennej EDI_Z.C
::       gdy zmienna BEER.MW='W' to wywolanie dla biezacego zamowienia w buforze bez dodatkowego dialogu
::       [_a] 0-zamówienie do wyboru 1-zamówienie z bufora ZD_NAG
::       [_b] 0-faktura do wyboru 1-ZD_NAG.ref()
::   WY: gdy wywolywane dla biezacej faktury to zwraca ref dodanego komunikatu
::  OLD: \zapis_zd_nag/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
_one_zdnag:={? var_press('_b')=type_of(null()) || _b || null() ?};

_wyn:=null;

_edi:=exec('edi','edi_wspolne');

{? EDI_Z.C=null
||
   exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_DEF')+'zapis_zd_nag.')
||
   __PARSES.setEnv('LZK_ZDS_DZAD');
   exec('init','lzk');
   exec('init_zds','lzk');

   {? _one_zdnag
   ||
      ZD_NAG.cntx_psh();
      _oddz:=1+(ZD_NAG.name()+3);
      _rok:=ZD_NAG.name()+2;
      exec('open_tabele','open_tab','L',1+(ref_name(_one_zdnag)+3),ref_name(_one_zdnag)+2);
      ZD_NAG.prefix();
      {? ZD_NAG.seek(_one_zdnag) || _wyn:=exec('zapis_zd_nag_one','edi_wspolne') ?};
      exec('open_tabele','open_tab',_oddz,_rok);
      ZD_NAG.cntx_pop()
   |? _edi.sza
   ||
      exec('logOrInfo','edi_wspolne','Podczas automatycznego przetwarzania oczekiwane wskazanie dokumentu.'@)
   ||
      ZD_NAG.prefix();

      _sort:='KH,DATA,SYM';
      _from:='join KH using("ZD_NAG".KH,KH.reference) '+
         'join DEZEZW using(DEZEZW.KH,KH.reference) '+
         'join TYPYZAM using("ZD_NAG".T,TYPYZAM.reference) ';
      _where:='DEZEZW.ISTDEF like :_a'+
         ' and DEZEZW.WR = \':_b\''+
         ' and DEZEZW.B = \'N\''+
         ' and TYPYZAM.R = \'D\''+
         ' and "ZD_NAG".EDI_W = \'N\''+
         ' and "ZD_NAG".ST = \'A\''+
         ' and "ZD_NAG".DATA >= DEZEZW.OD and ("ZD_NAG".DATA <= DEZEZW.DO or DEZEZW.DO is null)';
      ZD_NAG.f_set(_sort,_from,_where,EDI_Z.C,EDI_Z.WR);

::    __ZAZ tworzone po wywolaniu funkcji Zatwierdz w oknie __ZDNAG_W tabeli ZD_NAG
      VAR_DEL.delete('__ZAZ');

      {? ~ZD_NAG.f_first()
      ||
         FUN.info('Brak dokumentów do zapisu.'@)
      ||
         __ZDNAG_W:=ZD_NAG.mk_sel('EDI - zamówienia do zapisu'@,,0,,,,,,'U');
         ZD_NAG.win_sel(__ZDNAG_W);
         ZD_NAG.win_fld(__ZDNAG_W,,'KH','NAZ',,30,,1,'Kontrahent'@);
         ZD_NAG.win_fld(__ZDNAG_W,,'DATA',,,10,,1,'Data'@);
         ZD_NAG.win_fld(__ZDNAG_W,,'SYM',,,20,,1,'Symbol'@);
         ZD_NAG.win_fld(__ZDNAG_W,,'WAR',,,12,2,1,'Wartość'@);
         ZD_NAG.win_act(__ZDNAG_W,0,'Szukaj',,,,,,0);
         ZD_NAG.win_act(__ZDNAG_W,0,'Formuła','&Zatwierdź'@@,,'Uruchamia zapis wybranych dokumentów'@,
            "{? ZD_NAG.sel_size()=0 || sel_exit ?}","",1,1,"__ZAZ:=ZD_NAG.sel_aget()","sel_exit()",'Z');
         ZD_NAG.win_act(__ZDNAG_W,0,'Wyświetl',,,,"ZD_NAG.f_get(); ZD_NAG.display()",,0);

         {? ZD_NAG.select()
         ||
            {? var_pres('__ZAZ')<0
            ||
               __ZAZ:=tab_tmp(1,'REF','INTEGER','numer rekordu w bieżacej masce',
                  'CRC','INTEGER','suma kontrolna');
               {? ZD_NAG.f_get() || __ZAZ.REF:=#ZD_NAG.ref(); __ZAZ.add() ?}
            ?};

            {? __ZAZ.first()
            ||
               {!
               |? {? ~ZD_NAG.seek(__ZAZ.REF,ZD_NAG.name())
                  ||
                     FUN.info('Nie znaleziono zamówienia.'@)
                  ||
                     exec('zapis_zd_nag_one','edi_wspolne')
                  ?};
                  __ZAZ.next()
               !}
            ?}
         ?};
         &__ZDNAG_W
      ?};
      ZD_NAG.f_clear()
   ?}
?};
VAR_DEL.delete('__ZAZ');
_wyn


\zapis_zd_nag_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: zapis pojedynczego komunikatu
::   WY: ref dodanego rekordu lub null gdy nie dodano
::  OLD: \one_zd_nag/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;

_edi:=exec('edi','edi_wspolne');

:: EDI_Z.PTH ustawiana w funkcji find_zezw w edison.fml
{? exec('find_zezw','edi_wspolne',ZD_NAG.DATA,ZD_NAG.KH,'W',EDI_Z.C)<>null
||
   {? ~ZD_NAG.r_lock(1,1,1)
   ||
      exec('add_kom','#message','Dokument obsługiwany przez innego użytkownika.'@,2,ZD_NAG.SYM)
   ||
      _plik:='';
      _plikFullPath:=EDI_Z.PTH+STR.gsub(form(ZD_NAG.KH().KOD)+'_'+form(ZD_NAG.SYM)+'.xml','/','');
      EDI_Z.DOK:=$ZD_NAG.ref(); EDI_Z.SYM:=ZD_NAG.SYM; EDI_Z.KH:=ZD_NAG.KH;
      {? EDI_Z.C().FORMAT='F'
      ||
         _plik:=exec('zapis_ff','edi_wspolne',EDI_Z.PTH,2)

      |? EDI_Z.C().FORMAT='X'
      ||
         _plik:=exec('zapis_xml','edi_wspolne',_plikFullPath,ZD_NAG.SYM)
      ||
         exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_NIEZNANY_FORMAT'))
      ?};

::    dodanie zapisu w dzienniku
      {? _plik=''
      ||
         exec('add_kom','#message','Nie powiodło się zapisanie zamówienia.'@,2,ZD_NAG.SYM)
      ||
         _edi.plikAdd(_plikFullPath,EDI_Z.PTH);
         _wyn:=exec('dzien_add','edi_wspolne',EDI_Z.C,EDI_Z.WR,date(),time(),OPERATOR.USER,EDI_Z.DOK,EDI_Z.SYM
            ,EDI_Z.KH,'',_plikFullPath);
         {? _wyn=null
         ||
            exec('logOrInfo','edi_wspolne','Nie powiodło się dodanie zapisu do dziennika.'@)

         ||
            ZD_NAG.EDI_W:='T';
            ZD_NAG.put()
         ?};
         exec('add_kom','#message','Zapisano zamówienie w pliku %1.'@[_plik],1,ZD_NAG.SYM)
      ?};
      ZD_NAG.r_unlock()
   ?}
?};
_wyn


\read_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: odczyt komunikatow typu flat file - kartoteka materialowa
::   WE: _a - nazwa pliku
::       _b - akronim pola wyroznika
::             pole od ktorego zaczyna sie kolejny pakiet danych,
::             w przypadku Mechanizmu importu powinien byc tutaj kod pierwszego pola o Miejscu odniesienia = Pozycja
::   WY: 1-zdecydowano sie na odczyt 0-zrezygnowano
::  OLD: \read_slo/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;

{? _>=1
|| {? type_of(_a)<>2 || _a:=exec('filemimp','edi_wspolne',ISTDEF.ref()) ?} || _a:=exec('filemimp','edi_wspolne',ISTDEF.ref())
?};

{? _a=''
|| FUN.info('Brak deklaracji pliku importu.\nOdczyt niemożliwy.'@)
|? FUN.ask(ISTDEF.N+'.\n\n'+{? EDI_Z.TEST || 'Test poprawności komunikatu?'@ || 'Odczytać komunikat?'@ ?})
|| _wyn:=1;
   _bad:=1;
   exec('initredi','edi_wspolne');

   {? ISTDEF.IST_ISTK<>'M'
   || exec('read_edi','edi_wspolne',pth_dir('m.txt')+'/'+_a,1)
   |? ISTDEF.IST_ISTK='M'
   || {? exec('sprPIS','edi_imp')
      || {? var_pres('file_csv')>0 || file_csv:=_a ?};
         EDI_Z.SYM:=_a;
         EDI_Z.KH:=null;
         {? file_csv<>'' & fexists(file_csv,1)
         || {? ISTDEF.r_lock(1,1,1)
            || exec('initmimp','edi_imp',ISTDEF.ref());
               _bad:=exec('read_edi_csv','edi_wspolne',_a,1,1);
               ISTDEF.r_unlock()
            || _bad:=0;
               exec('add_kom','#message','Definicja importu zablokowana przez innego użytkownika (odczyt niemożliwy).'@
                ,4,'Uwaga')
            ?}
         || exec('add_kom','#message','Brak pliku: %1 (odczyt niemożliwy).'@[exec('inf_path','edi_wspolne',file_csv)],4,'Uwaga')
         ?}
      || exec('add_kom','#message','Def.imp.zawiera pozycje o MJS.ODNIESIENIA Nagłówek '
           '(formuła odczytu nie obsługuję takiej definicji).'@,4,'Uwaga');
         _wyn:=0
      ?}
   ?};

   {? ~Ebuf.first()
   || {? _bad || exec('add_kom','#message','Pusty komunikat.'@,4,'Uwaga') ?}
   |? ISTDEF.IST_ISTK='M' & exec('err_mimp','edi_imp')
   || 0
   || {? ~EDI_Z.TEST || exec('gen_slo','edi_wspolne',_b,'P',1) ?}
   ?};
   {? ISTDEF.IST_ISTK='M' || exec('donemimp','edi_imp') ?};
   VAR_DEL.delete('Ebuf')
?};
_wyn


\filemimp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: zwraca plik importu zdefiniowany w kodzie _FILE
::   WE: _a - ref definicji
::   WY: plik lub pusty string
::  OLD: \filemimp/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
EDI_D.cntx_psh();
EDI_D.index('K');
EDI_D.prefix(_a,'_FILE');
{? EDI_D.first()
|| {!
   |? {? EDI_D.K='_FILE' & EDI_D.M='I'
      || _wyn:=EDI_D.FLF;
         0
      || EDI_D.next()
      ?}
   !}
?};
EDI_D.cntx_pop();
_wyn


\read_edi_csv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: odczyt zestawu komunikatow EDI typu ff
::   WE: _a - odczytywany plik
::       _b - kolejny numer LP
::       [_c] - czy z konwersja na mazowie
::   WY: 1-normalnie 0-zla struktura pliku (dla importow)
::  OLD: \read_edi_csv/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=3 || {? type_of(_c)<>1 || _c:=0 ?} || _c:=0 ?};

_wyn:=1;

_czyimp:=EDI_Z.C().IST_ISTK='M';

_form:=exec('FindInSet','#table','EDI_D','K','_SEP',EDI_Z.C,"EDI_D.FLF",,,'');
_sep:={? _form='' || ';' || ($(_form))() ?};

_li:=0;
_tp:=time();

_file:=fopen(_a,'b',ISTDEF.IST_ISTK='M');
{? _file
|| _size:=fgetsize(_file);
   fclose(_file)
|| _size:=0
?};

echo(); prgs_clr();

{? _czyimp & ~_size
||
:: blad odczytu pliku, np. trzymany przez inna aplikacje Excel
   exec('add_kom','#message','Błąd otwarcia pliku (np.plik otwarty w innej aplikacji)'@,4,'Uwaga');
   _file:=0
|| _file:=fopen(_a,'ur',ISTDEF.IST_ISTK='M')
?};
{? _file
||
:: odczyt naglowka pliku csv - do pominiecia
   _ch:=_sep;
   _str:='';
   EDI_D.cntx_psh();
   EDI_D.index('LP');
   EDI_D.prefix(EDI_Z.C);
   {? EDI_D.first()
   || {!
      |? {? EDI_D.M='P' || _str+={? +_str || _ch || '' ?}+EDI_D.K ?};
         EDI_D.next()
      !}
   ?};
   EDI_D.cntx_pop();
   EDI_D.cntx_psh();
   EDI_D.index('LM');
   EDI_D.prefix(EDI_Z.C);
   {? EDI_D.first()
   ||
      _i:=0; _nrlini:=0; _oks:=1; _no_esc:=1;
      _no_esc:={? _czyimp
               || progress(100*1/_size
                     ,{? EDI_Z.TEST || 'Test odczytu' || 'Odczyt' ?}
                        +' danych ... linia: '+form(_nrlini,9,0,'99')+'.'
                     ,,0,,,,'Anuluj')<0
               || 1
               ?};
      {!
      |? _oks & _no_esc & (_ww:=fread(_file))<>'\n' & {? EDI_Z.TEST || _nrlini<20 || 1 ?}
      |!
         _nrlini+=1;

         _li+=(+_ww)+2;
         _no_esc:={? _czyimp
                  || progress(100*_li/_size
                        ,{? EDI_Z.TEST || 'Test odczytu' || 'Odczyt' ?}
                           +' danych ... linia: '+form(_nrlini,9,0,'99')+'.'
                        ,,0,,,,'Anuluj')<0
                  || 1
                  ?};

         {? _czyimp || exec('wyczysuk','edi_imp') ?};

         {? _czyimp & _nrlini=1 & -_str<>-((form(_ww)))
         || exec('add_kom','#message','Niezgodna struktura pliku z definicją importu'@,4,'Uwaga');
            _oks:=0;
            _wyn:=0
         |? form(_ww)<>_str
         ||
            {? _c & ~_czyimp || _ww:=STR.w952maz(_ww) ?};
::          rozebranie linii _w zapisanej w formacie csv na format ff
            _oki:=EDI_D.first();
            {!
            |? {? _czyimp || _oki || _ww<>'' ?}
            |! _buf:=exec('onewwcsv','edi_wspolne',_ww,_sep);
::             ustawienie komunikatu z EDI_D
               _nextkom:=0;
               {? 1+EDI_D.K='_'
               ||
                  {!
                  |? {? EDI_D.next()
                     ||
                        {? 1+EDI_D.K='_' || 1 || _nextkom:=1; 0 ?}
                     ?}
                  !}
               ||
                  _nextkom:=1
               ?};

               {? _nextkom=0
               ||
::                jesli brak kolejnego komunikatu w EDI_D to przerwanie odczytu
                  _ww:=''
               ||
::                odczyt wartosci dla komunikatu z EDI_D
                  _war:=_buf[1];
                  _ww:=_buf[2];
                  obj_del(_buf);
                  Ebuf.blank();
                  Ebuf.prefix();
                  Ebuf.KOD:=EDI_D.K;
                  Ebuf.WAR:=exec('delspace','#string',{? EDI_D.UPPER='T' || ~-_war || _war ?},2);
                  Ebuf.LP:=_b;
                  Ebuf.TP:=EDI_D.M;
                  Ebuf.ERR:='';
                  _i+=1;
                  Ebuf.NRK:=_i;
                  Ebuf.NRL:=_nrlini;
                  Ebuf.add(1);
                  {? _czyimp || exec('ctrlpola','edi_imp',_nrlini,_war) ?}
               ?};
               _oki:=EDI_D.next()
            !};
            {? _czyimp || exec('ctrl_key','edi_imp',_nrlini,_b) ?}
         ?};
         {? _czyimp & ~_no_esc
         || exec('add_kom','#message','Przerwano import.'@,4,'Uwaga')
         ?}
      !};
      prgs_clr()
   ?};
   EDI_D.cntx_pop();
   fclose(_file)
?};
echo(); prgs_clr();
_wyn


\onewwcsv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: zwraca wartosc jednego kodu z pliku csv
::   WE: _a - wartosc
::       [_b] - separator pól w wierszu
::   WY: tablica danych: wartosc kodu, to co zostalo
::  OLD: \onewwcsv/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=obj_new(2); _wyn[1]:=''; _wyn[2]:='';
{? _>=2 & _b<>'' || _sr:=_b || _sr:=';' ?};
_nw:='"';
_buf:=_a;
_war:='';
_be:=0;

:: sprawdzamy czy w apostrofach
_ch:=(1+_buf); _buf:=1-_buf;
{? _ch=_nw
|| _be:=1
|? _ch=_sr
|| _be:=-1
|| _war:=_ch
?};

{? _be>=0
|| {!
   |? _ch:=(1+_buf); _buf:=1-_buf;
      {? ~_be & _ch=_sr
      || 0
      |? _ch=_nw
      || _ch:=(1+_buf); _buf:=1-_buf;
         {? _ch=_sr
         || 0
         || _war+=_ch;
            _buf<>''
         ?}
      || _war+=_ch;
         _buf<>''
      ?}
   !}
?};
_wyn[1]:=_war;
_wyn[2]:=_buf;
_wyn


\gen_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: obliczenie wartosci kodow komunikatow i zapisanie do podanych pol tabeli,
::       wymagane jest wczesniejsze ustawienie zmiennej EDI_Z.C
::   WE: _a - akronim pola wyroznika
::       _b - miejsce odniesienia
::       _c - numer komunikatu
::   WY: ~~
::  OLD: \gen_slo/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=3 || {? type_of(_c)<>1 || _c:=1 ?} || _c:=1 ?};

VAR_DEL.delete('__nrlkom');

{? EDI_Z.C=null
||
   FUN.info(exec('msg','edi_wspolne','WARNING_EDI_DEF')+'gen_slo.')
|? 'WR'*EDI_Z.WR=0
||
   FUN.info(exec('msg','edi_wspolne','WARNING_EDI_DEF_WR')+'gen_slo.')
||
   _mech:=EDI_Z.C().IST_ISTK='M';
   _form:=exec('FindInSet','#table','EDI_D','K','_INI',EDI_Z.C,"EDI_D.FLF",,,'');

   {? _form='' | ($_form)(_b)=1
   ||
      Ebuf.prefix(_c,_b);
      {? Ebuf.first()
      ||
         _ok:=1; _cont:=1;
         _buf:='';
         _form:=exec('FindInSet','#table','EDI_D','K','_BL_',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)(_b);

         {!
         |? {? Ebuf.KOD=''
            ||
               exec('add_kom','#message','Brak kodu komunikatu.'@,2,'Błąd');
               _ok:=_cont:=0
            ||
               {? _buf=_a
               ||
                  _form:=exec('FindInSet','#table','EDI_D','K','_AKT',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)(_b);
                  _form:=exec('FindInSet','#table','EDI_D','K','_BL_',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)(_b);
                  {? EDI_D.find_key(Ebuf.KOD) & EDI_D.TAB<>'' & {? EDI_D.RL<>'' || ($EDI_D.RL)() || 1 ?}
                  ||
                     {? EDI_D.FLD<>''
                     || ($(EDI_D.TAB+'.'+EDI_D.FLD))():=
                           {? EDI_D.T='N' || exec('str2real','#convert',Ebuf.WAR)
                           |? EDI_D.T='S' || Ebuf.WAR
                           |? EDI_D.T='D' || {? _mech
                                             || {? Ebuf.WAR=''
                                                || date(0,0,0)
                                                || exec('str2date','#convert',Ebuf.WAR)
                                                ?}
                                             || date(#(4+Ebuf.WAR),#(2+(4-Ebuf.WAR)),#(2+(6-Ebuf.WAR)))
                                             ?}
                           |? EDI_D.T='G' || {? _mech
                                             || {? Ebuf.WAR=''
                                                || time(0,0,0)
                                                || exec('str2time','#convert',Ebuf.WAR)
                                                ?}
                                             || time(#(2+Ebuf.WAR),#(2+(2-Ebuf.WAR)),#(2+(4-Ebuf.WAR)))
                                             ?}
                           ?}
                     || ($EDI_D.FLF)()
                     ?}
                  ?};
                  __nrlkom:=Ebuf.NRL;
                  _ok:=Ebuf.next(); _buf:=Ebuf.KOD
               ||
                  EDI_D.index('K');
                  EDI_D.prefix(EDI_Z.C);
                  {? EDI_D.find_key(Ebuf.KOD) & EDI_D.TAB<>'' & {? EDI_D.RL<>'' || ($EDI_D.RL)() || 1 ?}
                  ||
                     {? EDI_D.FLD<>''
                     || ($(EDI_D.TAB+'.'+EDI_D.FLD))():=
                           {? EDI_D.T='N' || exec('str2real','#convert',Ebuf.WAR)
                           |? EDI_D.T='S' || Ebuf.WAR
                           |? EDI_D.T='D' || {? _mech
                                             || {? Ebuf.WAR=''
                                                || date(0,0,0)
                                                || exec('str2date','#convert',Ebuf.WAR)
                                                ?}
                                             || date(#(4+Ebuf.WAR),#(2+(4-Ebuf.WAR)),#(2+(6-Ebuf.WAR)))
                                             ?}
                           |? EDI_D.T='G' || {? _mech
                                             || {? Ebuf.WAR=''
                                                || time(0,0,0)
                                                || exec('str2time','#convert',Ebuf.WAR)
                                                ?}
                                             || time(#(2+Ebuf.WAR),#(2+(2-Ebuf.WAR)),#(2+(4-Ebuf.WAR)))
                                             ?}
                           ?}
                     || ($EDI_D.FLF)()
                     ?}
                  ?};
                  __nrlkom:=Ebuf.NRL;
                  _cont:=Ebuf.next(); _buf:=Ebuf.KOD
               ?}
            ?};
            _cont
         !};

         {? _ok=1 || _form:=exec('FindInSet','#table','EDI_D','K','_AKT',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)(_b) ?}
      ?}
   ?};

   _form:=exec('FindInSet','#table','EDI_D','K','_END',EDI_Z.C,"EDI_D.FLF",,,''); ($_form)(_b)
?};
VAR_DEL.delete('__nrlkom');
~~


\odczyt_zd_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: odczyt komunikatow z plikow i zapis do tabeli ZD_NAG,
::       wymagane jest wczesniejsze ustawienie zmiennej EDI_Z.C
::  OLD: \odczyt_zd_nag/edison.fml
::----------------------------------------------------------------------------------------------------------------------
{? EDI_Z.C = null
||
   exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_DEF')+'odczyt_zk_n.')
||
   _ok:=0;
   VAR_DEL.delete('__ZEZ','__PLIKI');

:: __PLIKI tabela z plikami do odczytania
   __PLIKI:=_edi.PLIKI;
   __I_PLIK:=__PLIKI.ndx_tmp(,,'PLIK',,0,'PLIK',,0);
   __I_LP:=__PLIKI.ndx_tmp(,,'LP',,);
   __PLIKI.index(__I_PLIK);

   {? __PLIKI.first()
   ||
::    Przekazano pliki do czynności więc nie pobieramy plików wg zezwoleń
      _ok:=1
   ||
::    Nie przekazano plików do czynności więc pobieramy pliki wg zezwoleń

::    __ZEZ zezwolenia na odczyt komunikatow danego typu
      {? EDI_Z.WR='W'
      || __ZEZ:=sql(
            'select distinct DEZEZW.FILE_PTH FILE_PTH, DEZEZW.FILE_SIG SIG '+
            'from DEZEZW '+
            'where DEZEZW.ISTDEF like :_a '+
            '  and DEZEZW.B = \'N\' '+
            '  and to_date(:_b) >= DEZEZW.OD and (to_date(:_b) <= DEZEZW.DO or DEZEZW.DO is null) '+
            '  and DEZEZW.WR = '':_c''',
            EDI_Z.C,date(),EDI_Z.WR)
      ||
         __ZEZ:=sql(
            'select distinct DEZEZW.FILE_PTH FILE_PTH, DEZEZW.FILE_SIG SIG '+
            'from DEZEZW '+
            'where DEZEZW.ISTDEF like :_a '+
            '  and DEZEZW.B = \'N\' '+
            '  and DEZEZW.WR = '':_b''',
            EDI_Z.C,EDI_Z.WR)
      ?};

      {? ~__ZEZ.first()
      ||
         FUN.info(exec('msg','edi_wspolne','MSG_EDI_BRAK_ZEZ'))
      ||
         _ok:=1;
::       pobranie listy plikow z komunikatami do zmiennej
         {!
         |? _pth:=
               {? (1+__ZEZ.FILE_PTH)='@'
                  | ((2+__ZEZ.FILE_PTH)+1)=':'
                  | (2+__ZEZ.FILE_PTH)='\\\\'
                  | (1+__ZEZ.FILE_PTH)='/'
               ||
::                przypadki:
::                - sciezka na komputerze lokalnym (@), zaklada sie ze zawsze bezwzgledna
::                - bezwzgledna (c:)
::                - sieciowa windowsowa (\\)
::                - linuxowa (/)
                  __ZEZ.FILE_PTH
               ||
::                przypadek sciezka wzgledna od katalogu wyznaczonego pth_dir()
                  {? sys_name(1)='WINDOWS'
                  ||
                     pth_dir('a.xml')+{? (1+__ZEZ.FILE_PTH)='\\' || '' || '\\' ?}+__ZEZ.FILE_PTH
                  ||
                     pth_dir('a.xml')+{? (1+__ZEZ.FILE_PTH)='/' || '' || '/' ?}+__ZEZ.FILE_PTH
                  ?}
               ?};
            _can_continue:=exec('indevice_chk','edi_wspolne',_pth);
            {? _can_continue>0
            ||
               {? exec('interm','#system') & 1+_pth='@'
               ||
::                Spawarka, funkcja fdir na razie niedostępna na interm dla ścieżek
::                @ nawet z indevice, więc użyty zamiennnik dir\#file. Jeżeli fdir będzie
::                działał na interm to można to rozgałęzienie wyciąć
                  _pliki:=exec('dir','#file',_pth);

                  {? _pliki.first()
                  ||
                     {!
                     |? __PLIKI.index(__I_PLIK);
                        __PLIKI.PLIK:=_pliki.FILEPATH;
                        __PLIKI.PTH:=gsub(_pliki.FILEPATH,_pliki.FILENAME,'');
                        __PLIKI.SIG:=__ZEZ.SIG;
                        __PLIKI.OK:='N';
                        __PLIKI.IN:='N';
                        {? __PLIKI.add()
                        ||
                           __PLIKI.bl_put('BLOB',__PLIKI.PLIK,0)
                        ?};
                        _pliki.next()
                     !}
                  ?}
               ||
                  _pliki:=exec('pliki','#file',_pth);

                  {? _pliki.first()
                  ||
                     {!
                     |? __PLIKI.index(__I_PLIK);
                        __PLIKI.PLIK:=_pliki.LINE;
                        __PLIKI.PTH:=gsub(_pliki.LINE,_pliki.FILENAME,'');
                        __PLIKI.SIG:=__ZEZ.SIG;
                        __PLIKI.OK:='N';
                        __PLIKI.IN:='N';
                        {? __PLIKI.add()
                        ||
                           __PLIKI.bl_put('BLOB',__PLIKI.PLIK,0)
                        ?};
                        __PLIKI.add() & _pliki.next()
                     !}
                  ?}
               ?};
               obj_del(_pliki)
            || _ok:=0
            ?};

            _ok & __ZEZ.next()
         !}
      ?};

      {? _ok=0
      ||
         exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','ERR_ADD')+'__PLIKI.')
      ||
::       przetworzenie komunikatow
         {? EDI_Z.C().FORMAT = 'F'
         || exec('zd_nag_ff','edi_wspolne')
         |? EDI_Z.C().FORMAT = 'X'
         || exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_NIEOBSLUGIWANY_FORMAT'))
         || exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_NIEZNANY_FORMAT'))
         ?}
      ?}
   ?};

   VAR_DEL.delete('__ZEZ','__PLIKI'); &__I_PLIK; &__I_LP
?}


\zd_nag_ff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: odczyt komunikatow typu flat file,
::       wymagane jest wczesniejsze ustawienie zmiennej __PLIKI
::  OLD: \zd_nag_ff/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_edi:=exec('edi','edi_wspolne');

{? var_pres('__PLIKI')<100
||
   exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','MSG_EDI_BRAK_PLIKOW')+'zk_n_ff.')
||
   {? ~__PLIKI.first()
   ||
      exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','MSG_EDI_ODCZYT_BRAK_KOM'))
   ||
      exec('initredi','edi_wspolne'); _lp:=0;
      {!
      |? _lp+=1; exec('read_edi_csv','edi_wspolne',__PLIKI.PLIK,_lp);
         __PLIKI.LP:=_lp; __PLIKI.put();
         __PLIKI.next()
      !};

      {? ~Ebuf.first()
      ||
         exec('add_kom','#message','Pusty komunikat.'@,4,'Uwaga')
      ||
::       weryfikacja danych w buforze
         _form:=exec('FindInSet','#table','EDI_D','K','_VER_ORD',EDI_Z.C,"EDI_D.FLF",,,'');
         {? ($_form)()=1
         ||
            {! _i:=1.._lp
            |!
               EDI_Z.POMIN:='N';
               {? exec('gen_nagl','edi_wspolne',_i)=0
               ||
                  {? EDI_Z.POMIN='N'
                  ||
                     exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','ERR_EDI_GEN_NAG'))
                  ?};
                  _edi.err()
               ||
                  exec('gen_pozy','edi_wspolne',_i)
               ?}
            !}
         ?}
      ?};

      VAR_DEL.delete('Ebuf')
   ?}
?}


\edi_i_zalaczniki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Załączniki dziennika EDI
::----------------------------------------------------------------------------------------------------------------------
_akcje:={? EDI_I.A='T' || 1 || 2 ?};
exec('sel_dok','dokum','EDI_I',,_akcje,$EDI_I.ref())


\find_zasob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Import faktury paliwowej/telekomunikacyjnej - wyszukiwanie zasobu związanego z pozycją faktury
::   WE: _a - unikalna nazwa zasobu np. nr rejestracyjny pojazdu, nr telefony
::       _b - rodzaj zasobu - 'P' - paliwo, 'S' - telekomunikacja
::   WY: wskazanie na zasób, ZASOB.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
ZASOBY.cntx_psh();
{? _b='P'
|| POJAZDY.cntx_psh();
   POJAZDY.index('NRREJ');
   POJAZDY.prefix(REF.FIRMA,_a);
   {? POJAZDY.first()
   || ZASOBY.index('ZASOBY');
      ZASOBY.prefix(POJAZDY.ID);
      {? ZASOBY.first() || _ref:=ZASOBY.ref() ?}
   ?};
   POJAZDY.cntx_pop()
|? _b='S'
|| NRKRTSIM.cntx_psh();
   NRKRTSIM.index('DISP');
   NRKRTSIM.prefix(REF.FIRMA,_a);
   {? NRKRTSIM.first()
   || ZASOBY.index('ZASOBY');
      ZASOBY.prefix(NRKRTSIM.ID);
      {? ZASOBY.first() || _ref:=ZASOBY.ref() ?}
   ?};
   NRKRTSIM.cntx_pop()
?};
ZASOBY.cntx_pop();
_ref


\find_slokh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Import faktury paliwowej - formuła zwraca pozycję słownika kontrahentów
::   WE: _a - DOK_REJ.ref()
::       _b - skrót kontrahenta
::   WY: SLO.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
DOK_REJ.cntx_psh();
DOK_REJ.prefix();
{? DOK_REJ.seek(_a)
|| _slu:=DOK_REJ.POCH().SLU;
   {? _slu<>null
   || KH.cntx_psh();
      KH.index('SKR');
      KH.prefix(2,_b,_b);
      {? KH.first() || _kod:=KH.KOD || _kod:='' ?};
      KH.cntx_pop();
      {? _kod<>''
      || SLO.cntx_psh();
         SLO.index('SL');
         SLO.prefix(_slu,_kod);
         {? SLO.first() || _ref:=SLO.ref() ?};
         SLO.cntx_pop()
      ?}
   ?}
?};
DOK_REJ.cntx_pop();
_ref


\rejestr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Import faktury paliwowej - formuła zwraca rejestr
::   WE: _a - OKRO_F.ref
::       _b - j. księgowa (ODD.ref())
::       _c - kod rejestru księgowego
::   WY: REJ.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
SSTALE.AO:=_a;
SSTALE.AR:=SSTALE.AO().ROK;
REJ.cntx_psh();
REJ.index('KOD');
REJ.prefix(SSTALE.AR,_b,_c);
{? REJ.first() || _ref:=REJ.ref() ?};
REJ.cntx_pop();
_ref


\rejvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Import faktury paliwowej - formuła zwraca rejestr VAT
::   WE: _a = rejestr księgowy (REJ.ref())
::       _b - kod
::   WY: VAT_REJ.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
RVAT.cntx_psh();
VAT_REJ.cntx_psh();
RVAT.index('SYM');
RVAT.prefix(REF.FIRMA,_b,_b);
{? RVAT.first()
|| VAT_REJ.index('REJ_VREF');
   VAT_REJ.prefix(_a,RVAT.ref());
   {? VAT_REJ.first() || _ref:=VAT_REJ.ref() ?}
?};
VAT_REJ.cntx_pop();
RVAT.cntx_pop();
_ref


\dokrej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Import faktury paliwowej - formuła zwraca rodzaj dokumentu
::   WE: _a - rejetr (REJ.ref())
::       _b - kod rodzaju dokumentu
::   WY: DOK_REJ.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
DOK_REJ.cntx_psh();
DOK_REJ.index('NAZ');
DOK_REJ.prefix(_a,_b,);
{? DOK_REJ.first()
|| {? DOK_REJ.JPK_FA_P='T'
   || _ref:=DOK_REJ.ref()
   || exec('add_kom','#message','Typ dokumentu księgowego (%1, w roku %2) nie obsługuje pozycji faktur.'@[DOK_REJ.NAZ,SSTALE.AR().NAZ],38,'UWAGA'@)
   ?}
?};
DOK_REJ.cntx_pop();
_ref


\dokrej_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [22.26]
:: OPIS: Import faktury w obiegu z webserwisu API - formuła zwraca rodzaj dokumentu
::   WE: _a - rejetr (REJ.ref())
::       _b - kod rodzaju dokumentu
::   WY: DOK_REJ.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
DOK_REJ.cntx_psh();
DOK_REJ.index('NAZ');
DOK_REJ.prefix(_a,_b,);
{? DOK_REJ.first()
|| _ref:=DOK_REJ.ref()
?};
DOK_REJ.cntx_pop();
_ref


\typfak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Import faktury paliwowej - formuła zwraca typ faktury w obiegu
::   WE: _a - nazwa typu faktury w obiegu
::      [_b] - 1 - Komunikat EDI
::   WY: ETYPY.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;

TYPOBIEG.cntx_psh();
TYPOBIEG.index('UNIK');
TYPOBIEG.prefix('Obieg faktur','Obieg faktur');
_typobieg:={? TYPOBIEG.first() || TYPOBIEG.ref() || null ?};
{? _typobieg
|| ETYPY.cntx_psh();
   ETYPY.index('U_WP_A');
   ETYPY.prefix(_typobieg,'T');
   _obj:=exec('obj_typ_dok','obiegi2');
   _obj.set(_a);
   _nazwa:=_obj.NAZWA;
   _w_portal:=_obj.W_PORTAL;
   {? ETYPY.find_key(_w_portal,_nazwa)
   || {? ETYPY.POZF='T' | (var_press('_b')>0 & _b=1)
      || _ref:=ETYPY.ref()
      || exec('add_kom','#message','Typ faktury w obiegu (%1) nie obsługuje pozycji faktur.'@[ETYPY.NAZWA],38,'UWAGA'@)
      ?}
   ?};
   ETYPY.cntx_pop()
?};
TYPOBIEG.cntx_pop();
_ref


\find_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Import faktury paliwowej - formuła zwraca wskazanie na kontrahenta
::   WE: _a - skrót kontrahenta
::   WY: KH.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
KH.cntx_psh();
KH.index('SKR');
KH.prefix(2,_a,_a);
{? KH.first() || _ref:=KH.ref() ?};
KH.cntx_pop();
_ref


\jm_litr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Import faktury paliwowej - jednostka miary - litr
::   WY: JM.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
JM.cntx_psh();
JM.index('KOD');
JM.prefix('l','l');
{? JM.first() || _ref:=JM.ref() ?};
JM.cntx_pop();
_ref


\jm_szt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Import faktury paliwowej - jednostka miary - sztuka
::   WY: JM.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
JM.cntx_psh();
JM.index('KOD');
JM.prefix('szt','szt');
{? JM.first() || _ref:=JM.ref() ?};
JM.cntx_pop();
_ref


\find_zas_poj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.28]
:: OPIS: Formuła znajduje zasób związany ze środkiem trwałym, będącym pojazdem
::   WE: _a - SRSR.ref()
::   WY: ZASOBY.ref()
::----------------------------------------------------------------------------------------------------------------------
{? _=0 | type_of(_a)<>type_of(null) | _a=null || return(null) ?};
_ref:=null;
POJAZDY.cntx_psh();
POJAZDY.index('FIRSRSR');
POJAZDY.prefix(REF.FIRMA,_a);
{? POJAZDY.first()
|| ZASOBY.cntx_psh();
   ZASOBY.index('ZASOBY');
   ZASOBY.prefix(POJAZDY.ID);
   {? ZASOBY.first() || _ref:=ZASOBY.ref() ?};
   ZASOBY.cntx_pop()
?};
POJAZDY.cntx_pop();
_ref


\edi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: Zwraca środowisko czynności ZWS_EDI_UNIW
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
__ZWSEDIUNIW


\logOrInfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: Zapis do log czynności lub komunikat na ekran
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_edi:=exec('edi','edi_wspolne');
{? _edi.sza || _edi.log(_a) || FUN.info(_a) ?}


\zapis_nd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: zapis komunikatow opartych na dokumentach z tabeli ND do pliku,
::       wymagane jest wczesniejsze ustawienie zmiennej EDI_Z.C
::       gdy zmienna BEER.MW='F' to wywolanie dla biezacej faktury w buforze bez dodatkowego dialogu
::   WE: [_a] 0-dokument wydania do wyboru 1-ND.ref()
::   WY: gdy wywolywane dla biezacej faktury to zwraca ref dodanego komunikatu
::----------------------------------------------------------------------------------------------------------------------
_nd_one:={? var_press('_a')=type_of(null()) || _a || null() ?};

_wyn:=null;

_edi:=exec('edi','edi_wspolne');

{? EDI_Z.C=null
||
   exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_DEF')+'zapis_nd.')
||
   {? _nd_one
   ||
      ND.cntx_psh();
      _oddz:=1+(ND.name()+3);
      _rok:=ND.name()+2;
      exec('open_tabele','open_tab','L',1+(ref_name(_nd_one)+3),ref_name(_nd_one)+2);
      ND.prefix();
      {? ND.seek(_nd_one) || _wyn:=exec('zapis_nd_one','edi_wspolne') ?};
      exec('open_tabele','open_tab',_oddz,_rok);
      ND.cntx_pop()

   |? _edi.sza
   ||
      exec('logOrInfo','edi_wspolne','Podczas automatycznego przetwarzania oczekiwane wskazanie dokumentu.'@)
   ||
      ND.prefix();

      _sort:='KH,D,SYM';
      _from:='join KH using("ND".KH,KH.reference) '+
         'join DEZEZW using(DEZEZW.KH,KH.reference) '+
         'join TYPYDOK using("ND".TYP,TYPYDOK.reference) ';
      _where:='DEZEZW.ISTDEF like :_a'+
         ' and DEZEZW.WR = \':_b\''+
         ' and DEZEZW.B = \'N\''+
         ' and TYPYDOK.Z = \'T\''
         ' and TYPYDOK.P = \'N\''+
         ' and "ND".EDI_W = \'N\''+
         ' and "ND".Z = \'T\''+
         ' and "ND".D >= DEZEZW.OD and ("ND".D <= DEZEZW.DO or DEZEZW.DO is null)';
      ND.f_set(_sort,_from,_where,EDI_Z.C,EDI_Z.WR);

::    __ZAZ tworzone po wywolaniu funkcji Zatwierdz w oknie _wer tabeli ND
      VAR_DEL.delete('__ZAZ');

      {? ~ND.f_first()
      ||
         FUN.info('Brak dokumentów do zapisu.'@)
      ||
         _wer:=ND.mk_sel('EDI - dokumenty do zapisu'@,,0,'zapis_nd',,,,,'U');
         ND.win_sel(_wer);
         ND.win_fld(_wer,,'KH','NAZ',,30,,1,'Kontrahent'@);
         ND.win_fld(_wer,,'D',,,10,,1,'Data'@);
         ND.win_fld(_wer,,'SYM',,,20,,1,'Symbol'@);
         ND.win_fld(_wer,,'WAR',,,12,2,1,'Wartość'@);
         ND.win_act(_wer,0,'Szukaj',,,,,,0);
         ND.win_act(_wer,0,'Formuła','&Zatwierdź'@@,,'Uruchamia zapis wybranych dokumentów'@,
            "{? ND.sel_size()=0 || sel_exit ?}","",1,1,"__ZAZ:=ND.sel_aget()","sel_exit()",'Z');
         ND.win_act(_wer,0,'Wyświetl',,,,"ND.f_get(); exec('wysallnd','magdok_nag')",,0);

         {? ND.select()
         ||
            {? var_pres('__ZAZ')<0
            ||
               __ZAZ:=tab_tmp(1,'REF','INTEGER','numer rekordu w bieżacej masce',
                  'CRC','INTEGER','suma kontrolna');
               {? ND.f_get() || __ZAZ.REF:=#ND.ref(); __ZAZ.add() ?}
            ?};

            {? __ZAZ.first()
            ||
               {!
               |?
                  {? ~ND.seek(__ZAZ.REF,ND.name())
                  ||
                     FUN.info('Nie znaleziono dokumentu.'@)
                  ||
                     {? ND.r_lock(1,1,1)
                     ||
                        {? ND.EDI_W='T'
                        ||
                           FUN.info('Dokument %1 jest już zapisany.'@[ND.SYM])

                        ||
                           exec('zapis_nd_one','edi_wspolne');
                           {? _a || __sumkor.erase() ?}
                        ?};
                        ND.r_unlock()

                     ||
                        FUN.info('Dokument %1 obsługiwany przez innego użytkownika.'@[ND.SYM])
                     ?}
                  ?};
                  __ZAZ.next()
               !}
            ?}
         ?}
      ?};
      ND.f_clear()
   ?}
?};
VAR_DEL.delete('__ZAZ');
_wyn


\zapis_nd_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: zapis pojedynczego komunikatu
::   WY: ref dodanego rekordu lub null gdy nie dodano
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;

_edi:=exec('edi','edi_wspolne');

:: Ustawienie EDI_Z.PTH
{? exec('find_zezw','edi_wspolne',ND.D,ND.KH,'W',EDI_Z.C)<>null
||
   {? ~ND.r_lock(1,1,1)
   ||
      exec('add_kom','#message','Dokument obsługiwany przez innego użytkownika.'@,2,ND.SYM)
   ||
      _plik:='';
      _plikFullPath:=EDI_Z.PTH+STR.gsub(form(ND.KH().KOD)+'_'+form(ND.SYM)+'.xml','/','');
      EDI_Z.DOK:=$ND.ref(); EDI_Z.SYM:=ND.SYM; EDI_Z.KH:=ND.KH;
      {? EDI_Z.C().FORMAT='F'
      ||
         _plik:=exec('zapis_ff','edi_wspolne',EDI_Z.PTH)

      |? EDI_Z.C().FORMAT='X'
      ||
         _plik:=exec('zapis_xml','edi_wspolne',_plikFullPath,ND.SYM)
      ||
         exec('logOrInfo','edi_wspolne',exec('msg','edi_wspolne','WARNING_EDI_NIEZNANY_FORMAT'))
      ?};

::    dodanie zapisu w dzienniku
      {? _plik=''
      ||
         exec('add_kom','#message','Nie powiodło się zapisanie dokumentu.'@,2,ND.SYM)
      ||
         _edi.plikAdd(_plikFullPath,EDI_Z.PTH);
         _wyn:=exec('dzien_add','edi_wspolne',EDI_Z.C,EDI_Z.WR,date(),time(),OPERATOR.USER,EDI_Z.DOK,EDI_Z.SYM
            ,EDI_Z.KH,'',_plikFullPath);
         {? _wyn=null
         ||
            exec('logOrInfo','edi_wspolne','Nie powiodło się dodanie zapisu do dziennika.'@)
         ||
            ND.EDI_W:='T';
            ND.put()
         ?};
         exec('add_kom','#message','Zapisano dokument w pliku %1.'@[_plik],1,ND.SYM)
      ?};
      ND.r_unlock()
   ?}
?};
_wyn


\xml_path
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: asocjacja ścieżki xml z $ISTDEFS.ref lub $ISTDEFI.ref()
::   WE: _a - ISTDEF.ref()
::       _b - uchwyt do pliku
::   WY: tabela asocjacji
::----------------------------------------------------------------------------------------------------------------------
_istdef:=_a;
_log:={? var_pres('_b')=type_of(0) || _b || 0 ?};

_pth:='';
_pth_hash:=tab_tmp(1
   ,'HASH'  ,'STRING[40]'  ,'Skrót ścieżki'
   ,'REF'   ,'STRING[16]'  ,'$ISTDEFS.ref() lub $ISTDEFI.ref()');

ISTDEFS.cntx_psh();
ISTDEFS.index('LP');
ISTDEFS.prefix(_istdef);
_loop:=ISTDEFS.first();
{!
|? _loop
|!
   {? 'P'<>ISTDEFS.WYM
   ||
      _pth_prev:=_pth;
      {? 2+ISTDEFS.OPIS='</'
      ||
         _pth-=+ISTDEFS.OPIS-1;
         _pth+=ISTDEFS.OPIS

      |? 1+ISTDEFS.OPIS='<'
      ||
         _pth+=ISTDEFS.OPIS
      ?};
      _pth_s:=_pth_prev<>_pth;
      {? _pth_s
      ||
         _pth_hash.HASH:=hash(_pth);
         _pth_hash.REF:=$ISTDEFS.ref();
         {? ~_pth_hash.find_key(_pth_hash.HASH)
         ||
            _pth_hash.add();
            {? _log || fwrite(_log,_pth) ?}
         ?}
      ?};
      {? 2+ISTDEFS.OPIS='</'
      ||
         _pth-=+ISTDEFS.OPIS

      |? 1+ISTDEFS.OPIS='<'
      ||
         ISTDEFI.cntx_psh();
         ISTDEFI.index('LP');
         ISTDEFI.prefix(ISTDEFS.ref());
         _loop:=ISTDEFI.first();
         {!
         |? _loop
         |!
            {? 'P'<>ISTDEFI.WYM
            ||
               _pth_prev:=_pth;
               {? 2+ISTDEFI.NAZ='</'
               ||
                  _pth-=+ISTDEFI.NAZ-1;
                  _pth+=ISTDEFI.NAZ

               |? 1+ISTDEFI.NAZ='<'
               ||
                  _pth+=ISTDEFI.NAZ
               ?};
               _pth_i:=_pth_prev<>_pth;
               {? _pth_i
               ||
                  _pth_hash.HASH:=hash(_pth);
                  _pth_hash.REF:=$ISTDEFI.ref();
                  {? ~_pth_hash.find_key(_pth_hash.HASH)
                  ||
                     _pth_hash.add();
                     {? _log || fwrite(_log,_pth) ?}
                  ?}
               ?};
               {? 2+ISTDEFI.NAZ='</'
               ||
                  _pth-=+ISTDEFI.NAZ

               |? 1+ISTDEFI.NAZ='<'
               ||
                  {? _pth_i & 'MOE'*ISTDEFI.WYM
                  ||
                     _pth-=+ISTDEFI.NAZ
                  ?}
               ?}
            ?};
            _loop:=ISTDEFI.next()
         !};
         ISTDEFI.cntx_pop();
         {? _pth_s & 'MOE'*ISTDEFS.WYM
         ||
            _pth-=+ISTDEFS.OPIS
         ?}
      ?}
   ?};
   _loop:=ISTDEFS.next()
!};
ISTDEFS.cntx_pop();
_pth_hash


\tag_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: ustala kod sterujący odczytem do bufora
::   WE: _a - tabela asocjacji
::       _b - aktualny stos
::       _c - rozmiar stosu
::       _d - token zamykający
::   WY: kod sterujący odczytem do bufora
::----------------------------------------------------------------------------------------------------------------------
_xml_path:=_a;
_stos:=_b;
_stos_size:=_c;
_token:=_d;

_result:='';

_pth:=''; {! _ii:=1.._stos_size |! _pth+=_stos[_ii] !}; _pth+=_token;
{? _xml_path.find_key(hash(_pth))
||
   {? 6+_xml_path.REF='itdefs'
   ||
      ISTDEFS.index('OPIS');
      ISTDEFS.prefix();
      {? ISTDEFS.seek(_xml_path.REF)
      ||
         _result:=
            {? ISTDEFS.WYM='T' || 'ST'
            |? ISTDEFS.WYM='B' || 'SB'
            |? ISTDEFS.WYM='A' || 'SA'
            |? ISTDEFS.WYM='M' | ISTDEFS.WYM='O' | ISTDEFS.WYM='E' || 'SP'
            || ''
            ?}
      ?}

   |? 6+_xml_path.REF='itdefi'
   ||
      ISTDEFI.index('NAZ');
      ISTDEFI.prefix();
      {? ISTDEFI.seek(_xml_path.REF)
      ||
         _result:=
            {? ISTDEFI.WYM='T' || 'IT'
            |? ISTDEFI.WYM='B' || 'IB'
            |? ISTDEFI.WYM='A' || 'IA'
            |? ISTDEFI.WYM='M' | ISTDEFI.WYM='O' | ISTDEFI.WYM='E' || 'IP'
            || ''
            ?}
      ?}
   ?}
?};

_result


\find_ppk_umo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Znajduje ostatnie PPK_UMO wprowadzone do systemu.
::   WE:
::   WY: Ostatnie PPK_UMO wprowadzone do systemu lub null
::----------------------------------------------------------------------------------------------------------------------
_ppkUmo:=null;
PPK_UZA.cntx_psh();
PPK_UMO.cntx_psh();
PPK_UZA.index('OD');
PPK_UZA.prefix(exec('ref_firma','ustawienia'));
{? PPK_UZA.first()
|| _loopUza:=PPK_UZA.first();
   {!
   |? _loopUza
   |! PPK_UMO.index('OD');
      PPK_UMO.prefix(PPK_UZA.ref);
      {? PPK_UMO.first()
      || _ppkUmo:=PPK_UMO.ref;
         _loopUza:=0
      || _loopUza:=PPK_UZA.next()
      ?}
   !}
?};
PPK_UMO.cntx_pop();
PPK_UZA.cntx_pop();

{? PPK_UMO.seek(_ppkUmo,,1)
|| {? PPK_UMO.DO<>date(0,0,0) & PPK_UMO.DO<date() || return(null) ?}
?};
_ppkUmo


\ppk_pwp_exp_st
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Przygotowuje przykładowe dane do eksportu csv dla procentu wpłat o kodzie składnika przekazanym w argumencie.
::   WE: [_a] [INTEGER] - kod składnika, możliwe wartości:
::       - 710 - procent wpłaty podstawowej (firma)
::       - 711 - procent wpłaty dodatkowej (firma)
::       - 712 - procent wpłaty podstawowej (uczestnik)
::       - 713 - procent wpłaty dodatkowej (uczestnik)
::   WY: Przykładowa wartość PPK_PWP.STAWKA dla kodu składnika przekazanego w argumencie lub 0
::----------------------------------------------------------------------------------------------------------------------
_attr:={? var_pres('_a')=type_of(0) & +$_a=3 & '710,711,712,713'*$_a || _a || return(0) ?};

_rate:=0;
_firma:=exec('ref_firma','ustawienia');
{? ~(var_pres('__RUB')>0) || exec('__RUB','object') ?};

PPK_PWP.cntx_psh();
PPK_PWP.index('UNIQUE');
PPK_PWP.prefix(_firma);
{? PPK_PWP.find_tab(,'R','RN','=',__RUB.sys_rub(_attr).RN,'STAWKA',,'>',0)
|| _rate:=PPK_PWP.STAWKA
|? PPK_PWP.find_tab(,'R','RN','=',__RUB.sys_rub(_attr).RN)
|| _rate:=PPK_PWP.STAWKA
?};
PPK_PWP.cntx_pop();
_rate


\ppk_pwp_exp_memo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Przygotowuje przykładowe dane do eksportu csv dla opisu zasady ustalania procentu wpłaty (pole SYS_MEMO).
::   WE:
::   WY: Przykładowa wartość PPK_PWP.OWD lub ''
::----------------------------------------------------------------------------------------------------------------------
_firma:=exec('ref_firma','ustawienia');
_memo:='';
PPK_PWP.cntx_psh();
PPK_PWP.index('UNIQUE');
PPK_PWP.prefix(_firma);
_loop:=PPK_PWP.first();
{!
|? _loop
|! {? PPK_PWP.memo_get(,'OWD') || _memo:=PPK_PWP.memo_txt(,,'OWD') ?};
   {? +_memo || _loop:=0 || _loop:=PPK_PWP.next() ?}
!};
PPK_PWP.cntx_pop();
_memo


\m_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Przygotowuje dane do importu pola złączeniowego M_PRAC (typ: H_ODDA, Miejsce pracy, do którego pracownik jest
::       oddelegowywany) dla dodawanego rekordu H_ODDE (Ewidencja oddelegowań do pracy za granicą).
::       Tworzy do tego celu zmienną globalną m_prac - tablicę nazwaną z elementami dla rekordu H_ODDA
::   WE: _a [STRING] - kod dla zapisywanej wartości
::       _b [STRING] - wartość do wpisania w odpowiednie pole zmiennej m_prac
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_sym:={? var_pres('_a')=type_of('') || _a || '' ?};
_val:={? var_pres('_b')=type_of('') || _b || '' ?};

{? var_pres('m_prac')<100
|| m_prac:=obj_new('NAZWA','KRAJ','MIASTO','ULICA','DOM','LOKAL','KOD','POCZTA','TEL','EMAIL','RODZAJ','SIZE');
   m_prac.SIZE:=0;
   m_prac.NAZWA:='';
   m_prac.KRAJ:='';
   m_prac.MIASTO:='';
   m_prac.ULICA:='';
   m_prac.DOM:='';
   m_prac.LOKAL:='';
   m_prac.KOD:='';
   m_prac.POCZTA:='';
   m_prac.TEL:='';
   m_prac.EMAIL:='';
   m_prac.RODZAJ:='P'
?};

{? +_val
|| {? _sym='MP_ODD'
   || m_prac.NAZWA:=_val; m_prac.SIZE+=1
   |? _sym='MP_KRAJ'
   || m_prac.KRAJ:=_val; m_prac.SIZE+=1
   |? _sym='MP_M'
   || m_prac.MIASTO:=_val; m_prac.SIZE+=1
   |? _sym='MP_U'
   || m_prac.ULICA:=_val; m_prac.SIZE+=1
   |? _sym='MP_D'
   || m_prac.DOM:=_val; m_prac.SIZE+=1
   |? _sym='MP_L'
   || m_prac.LOKAL:=_val; m_prac.SIZE+=1
   |? _sym='MP_KOD'
   || m_prac.KOD:=_val; m_prac.SIZE+=1
   |? _sym='MP_POCZ'
   || m_prac.POCZTA:=_val; m_prac.SIZE+=1
   |? _sym='MP_TEL'
   || m_prac.TEL:=_val; m_prac.SIZE+=1
   |? _sym='MP_EM'
   || m_prac.EMAIL:=_val; m_prac.SIZE+=1
   ?}
?}


\m_zam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Przygotowuje dane do importu pola złączeniowego M_ZAM (typ: H_ODDA, Adres zamieszkania podczas oddelegowania do
::       pracy za granicą) dla dodawanego rekordu H_ODDE (Ewidencja oddelegowań do pracy za granicą).
::       Tworzy do tego celu zmienną globalną m_zam - tablicę nazwaną z elementami dla rekordu H_ODDA
::   WE: _a [STRING] - kod dla zapisywanej wartości
::       _b [STRING] - wartość do wpisania w odpowiednie pole zmiennej m_zam
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_sym:={? var_pres('_a')=type_of('') || _a || '' ?};
_val:={? var_pres('_b')=type_of('') || _b || '' ?};

{? var_pres('m_zam')<100
|| m_zam:=obj_new('NAZWA','KRAJ','MIASTO','ULICA','DOM','LOKAL','KOD','POCZTA','TEL','EMAIL','RODZAJ','SIZE');
   m_zam.SIZE:=0;
   m_zam.NAZWA:='';
   m_zam.KRAJ:='';
   m_zam.MIASTO:='';
   m_zam.ULICA:='';
   m_zam.DOM:='';
   m_zam.LOKAL:='';
   m_zam.KOD:='';
   m_zam.POCZTA:='';
   m_zam.TEL:='';
   m_zam.EMAIL:='';
   m_zam.RODZAJ:='Z'
?};

{? +_val
|| {? _sym='MZ_ODD'
   || m_zam.NAZWA:=_val; m_zam.SIZE+=1
   |? _sym='MZ_KRAJ'
   || m_zam.KRAJ:=_val; m_zam.SIZE+=1
   |? _sym='MZ_M'
   || m_zam.MIASTO:=_val; m_zam.SIZE+=1
   |? _sym='MZ_U'
   || m_zam.ULICA:=_val; m_zam.SIZE+=1
   |? _sym='MZ_D'
   || m_zam.DOM:=_val; m_zam.SIZE+=1
   |? _sym='MZ_L'
   || m_zam.LOKAL:=_val; m_zam.SIZE+=1
   |? _sym='MZ_KOD'
   || m_zam.KOD:=_val; m_zam.SIZE+=1
   |? _sym='MZ_POCZ'
   || m_zam.POCZTA:=_val; m_zam.SIZE+=1
   |? _sym='MZ_TEL'
   || m_zam.TEL:=_val; m_zam.SIZE+=1
   |? _sym='MZ_EM'
   || m_zam.EMAIL:=_val; m_zam.SIZE+=1
   ?}
?}


\dokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: Powołanie i wypełnia obj_new('REF','DOKUM','E_DOKUM')
::   WE: _a - $TAB.ref()
::       _b - ISTDEF.ref()
::   WY: uchwyt do obj_new('REF','DOKUM','E_DOKUM')
::  OLD: \dokum/!zws_edi_uniw.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=obj_new('REF','DOKUM','E_DOKUM','EDI_I');
_return.REF:=null();
_return.DOKUM:=null();
_return.E_DOKUM:=null();
EDI_I.use('edi_i_'+($(date()~1)+2));
EDI_I.index('DOK');
EDI_I.prefix(_a,_b,'N');
{? EDI_I.last()
||
:: nieanulowany zapis w dzienniku edi
   _return.EDI_I:=EDI_I.ref();
   DOKUM.cntx_psh();
   DOKUM.index('DOKUM');
   DOKUM.prefix(REF.FIRMA,$EDI_I.ref());
   {? DOKUM.first()
   ||
      {? EDI_I.R='W' || _return.REF:=DOKUM.ref() ?};
      _return.DOKUM:=DOKUM.DOKUM;
      _return.E_DOKUM:=DOKUM.E_DOKUM
   ?};
   DOKUM.cntx_pop()
?};
_return


\context_type_default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Kontekst domyślny
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'DEFAULT'


\context_type_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Kontekst Dokument Businesslink
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'BL'


\context_obj_default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Kontekst domyślny - objekt
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_context:=obj_new('TYPE','DOK2REJKOM');
:: TYPE
::    typ kontekstu
_context.TYPE:=exec('context_type_default','edi_wspolne');
:: DOK2REJKOM
::    steruje włączeniem DOKUM do rejestru komunikacji
_context.DOK2REJKOM:=Plugin.run('BL_DOK2REJKOM');
_context


\context_obj_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Kontekst e-invoicing - objekt
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_context:=obj_new('TYPE','DOK2REJKOM','LOG','DOKUM','FAKS','SET_READY_TO_SEND','OCR','BL_TYPE','BL_VER','DOK','SCHEMA',
   'MAP','VERIFY_ONLY','ZD_NAG','DOKUMZ');
:: TYPE
::    typ kontekstu
_context.TYPE:=exec('context_type_bl','edi_wspolne');
:: DOK2REJKOM
::    steruje włączeniem DOKUM do rejestru komunikacji
::    przypisanie DOKUM.BL:='A' - wyłącza DOKUM z rejestru komunikacji i przepisuje DOKUM.DOKUM do DOKUMZ.DOKUM
::    dokum'a wygenerowanego automatycznie do faktury
_context.DOK2REJKOM:='N';
:: DOKUM
::    wskazanie na zapis z rejestru komunikacji
_context.DOKUM:=null();
:: DOKUMZ
::    wzkazanie na załącznik
_context.DOKUMZ:=null();
:: FAKS/DOK/ZD_NAG
::    akronim musi być zgodny z akronimem dynamicznego parametru wejściowego komunikatu edi
::    wykorzystywane do przekazania refa dokumentu
_context.FAKS:=null();
_context.DOK:=null();
_context.ZD_NAG:=null();
:: SET_READY_TO_SEND
::    0/1 - ustawiać flagę, że dokument gotowy do wysłania
_context.SET_READY_TO_SEND:=0;
:: OCR
::    0/1 - dokument po OCR
_context.OCR:=0;
:: BL_TYPE
::    typ załącznika np. INV, KSeF_INV
_context.BL_TYPE:='';
:: BL_VER
::    wersja dokumentu
_context.BL_VER:='';
:: SCHEMA
::    schema xml
_context.SCHEMA:='';
:: MAP
::    indeksy z dokumentu do ewentualnego mapowania
_context.MAP:=exec('map_tab','edi_wspolne');
:: VERIFY_ONLY
::    0/1 - podczas parsowania xml tylko przebieg weryfikacyjny
_context.VERIFY_ONLY:=0;
_context


\map_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: Tabela indeksów do mapowania pochodzących z dokumentu Businesslink
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(1,'KTM','STRING[50]','Indeks wg kontrahenta')


\env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.42]
:: OPIS: Środowisko czynności zws_edi_uniw
::   WE:
::   WY: uchwyt do środowiska
::  OLD: \env/!zws_edi_uniw.fml
::----------------------------------------------------------------------------------------------------------------------

::UWAGA: _fld, i _mth to formułki pomocnicze, żeby wygodniej tworzyć tablice i komentować poszczególne jej elementy
::       powiedzmy, że to bedzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to bedzie metoda
         _mth:="31+form(_a)";

_env:=obj_new(
::             pola
                _fld('mp',                   'Menadżer procesu')
               ,_fld('sza',                  'Tryb ciychy wykonania czynności')
               ,_fld('PLIKI',                'PLIKI tabela z plikami do odczytania')
               ,_fld('LOG',                  'Log czynności w trybie cichym')
               ,_fld('LOGTAB',               'Log czynności w trybie cichym')
               ,_fld('logIsOpen',            'Jest uchwyt do log')
               ,_fld('result',               'Wynik czynności')
               ,_fld('REF',                  'wartość dynamicznego portu wejściowego')
               ,_fld('context',              'context')
               ,_fld('xml_xsd_validate',     'Sprawdzaj zgodności pliku XML z zadanym XSD')

::             metody
               ,_mth('init',                 'Init')
               ,_mth('done',                 'Done')
               ,_mth('plikAdd',              'Dodanie zapisu do tabeli .PLIKI')
               ,_mth('log',                  'Zapis do loga')
               ,_mth('logSave',              'Zapis log wykonania czynności')
               ,_mth('blobSave',             'Zapis nieprzetworzonych blob')
               ,_mth('resultSet',            'Ustawia .result')
               ,_mth('resultGet',            'Zwraca .result')
               ,_mth('ok',                   '.result(''OK'')')
               ,_mth('err',                  '.result(''ERROR'')')
               );

_env.init:="
   _mp_active:=type_of(params_get())<>type_of(~~) & var_pres('mp',params_get())>100;
::   _mp_active:={? var_pres('_a')=type_of(0) || _a || 1 ?};
:: menadżer procesu
   {? _mp_active || .mp:=params_get().mp; _mp:=.mp ?};
:: tryb cichy wykonania czynności [0-nie, 1-tak]
   {? _mp_active || .sza:=_mp.isAutoRun() | _mp.isService() ?};
:: PLIKI tabela z plikami do odczytania
   .PLIKI:=tab_tmp(1
      ,'PLIK', 'STRING[250]', 'Plik z bezwzględną ścieżką'
      ,'PTH',  'STRING[250]', 'Ścieżka bezwzględna do pliku'
      ,'SIG',  'STRING[8]',   'Rozszerzenie pliku z podpisem elektronicznym'
      ,'LP',   'INTEGER',     'LP nadawana podczas zbiorczego odczytu komunikatów'
      ,'BLOB', 'BLOBRAW',     'Plik'
      ,'IN',   'STRING[1]',   'BLOB przekazany parametrem'
      ,'OK',   'STRING[1]',   'Plik przetworzony bez problemu');
   _Pliki:=.PLIKI;
:: wypełnienie tabeli PLIKI plikami podanymi na wejściu czynności przez parametr DEDI
   {? _mp_active
   ||
      _blob:=params_get().in.BLOB;
      {? _blob<>~~ & _blob
      ||
         _Blob:=_mp.bl_get(_blob);
         _loop:=_Blob.first();
         {!
         |? _loop
         |!
            _Pliki.blank();
            _file:=fopen(_Blob.BLOB,'r',,,1);
            {? _file.is_open()
            ||
               _Pliki.PLIK:=_Blob.bl_info('BLOB','NAME');
               _Pliki.OK:='N';
               _Pliki.IN:='T';
               {? _Pliki.add()
               ||
                  _Pliki.bl_put('BLOB',_file,,,_Pliki.PLIK)
               ?}
            ?};
            obj_del(_file);
            _loop:=_Blob.next()
         !}
      ?}
   ?};
:: log
   .LOGTAB:=tab_tmp(1
      ,'BLOB'   ,'BLOBRAW'  ,'Log');
   .LOGTAB.add();
   .LOG:=fopen(.LOGTAB.BLOB,'ua',,,1);
   .logIsOpen:=.LOG.is_open();
:: wynik czynności
   .ok();
:: wyłączenie sprawdzenia zgodności pliku XML z zadanym XSD
   .xml_xsd_validate:=0;
:: return [0/1]
   .logIsOpen
";

_env.done:="
   VAR_DEL.delete('__ZWSEDIUNIW')
";

_env.plikAdd:="
   _Pliki:=.PLIKI;
   _Pliki.PLIK:=_a;
   _Pliki.PTH:=_b;
   _Pliki.OK:='N';
   {? _Pliki.add()
   ||
      {? var_pres('_c')>100
      ||
         _fname:=_Pliki.PLIK;
         _Pliki.bl_put('BLOB',_c,,,_fname)
      ||
         _fname:={? _Pliki.PTH='' || _Pliki.PLIK || gsub(_Pliki.PLIK,_Pliki.PTH,'') ?};
         _can_continue:=exec('indevice_chk','edi_wspolne',_a);
         {? _can_continue>0
         || _Pliki.bl_put('BLOB',_a,0,,_fname)
         ?}
      ?}
   ?}
";

_env.log:="
   {? .logIsOpen & var_pres('_a')=type_of('')
   ||
      fwrite(.LOG,_a)
   ?}
";

_env.logSave:="
   _mp_active:=var_pres('mp',.)>100;
   {? _mp_active || _mp:=.mp ?};
   _result:=null();
   {? .logIsOpen
   || .LOGTAB.bl_put('BLOB',.LOG,,,'log');
      {? _mp_active || _mp.bl_add('LOG',exec('kind_out','#b_port'),.LOGTAB.BLOB) ?};
      {? _a
      ||
         EDI_I.cntx_psh();
         EDI_I.use(ref_name(_a));
         EDI_I.prefix();
         {? EDI_I.seek(_a)
         ||
            EDI_I.FNAME:='mimp'
                  +form(date()~1-2000,-2,0,'99')+form(date()~2,-2,0,'99')+form(date()~3,-2,0,'99')
                  +form(time()~1,-2,0,'99')+form(time()~2,-2,0,'99')+form(time()~3,-2,0,'99')
                  +'.log';
            EDI_I.U+=' -> '+EDI_I.FNAME;
            EDI_I.put();
            {? EDI_I.bl_put('Z1',.LOG,,,EDI_I.FNAME)
            ||
               obj_del(.LOG);
               .LOG:=fopen(.LOGTAB.BLOB,'ua',,,1);
               .logIsOpen:=.LOG.is_open();
               _result:=EDI_I.Z1
            ?}
         ?};
         EDI_I.cntx_pop()
      ?}
   ?};
   _result
";

_env.blobSave:="
   _mp:=.mp;
   _Pliki:=.PLIKI;
   _loop:=_Pliki.first();
   {!
   |? _loop
   |!
      {? _Pliki.OK='N'
      ||
         _mp.bl_add('BLOB',exec('kind_out','#b_port'),_Pliki.BLOB)
      |? _Pliki.IN='N'
      ||
::       usuniecie przetworzonego pliku z komunikatem
         ferase(_Pliki.PLIK,0)
      ?};
      _loop:=_Pliki.next()
   !}
";

_env.resultSet:="
   .result:=_a
";

_env.resultGet:="
   .result
";

_env.ok:="
   .resultSet('OK')
";


_env.err:="
   .resultSet('ERROR')
";

VAR_DEL.delete('__ZWSEDIUNIW');
__ZWSEDIUNIW:=_env;
_env


\ediii_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_Sel:=EDI_I.sel_aget();
{? ~_Sel.first() || _Sel.REF:=#EDI_I.ref(); _Sel.add() ?};

{? _Sel.first() & _Sel.next()
||
   {? ~FUN.ask('Czy usunąć zaznaczone wiersze?'@) || return(0) ?}
||
   {? ~FUN.ask('Czy usunąć bieżący wiersz?'@) || return(0) ?}
?};
exec('ini_kom','#message','Usuń defincję kwoty rabatu');
EDI_I.cntx_psh();
DOKUM.cntx_psh();
_loop:=_Sel.first();
{!
|? _loop
|!
   {? EDI_I.seek(_Sel.REF,)
   ||
      DOKUM.index('DOKUM');
      DOKUM.prefix(REF.FIRMA,$EDI_I.ref());
      {? DOKUM.first() || exec('del_dok','dokum',1) ?};
      EDI_I.del()
   ?};
   _loop:=_Sel.next()
!};
DOKUM.cntx_pop();
EDI_I.cntx_pop();
EDI_I.sel_adel();
exec('end_kom','#message');
0


\dokum2pilki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Pobiera plik z DOKUMZ.DOKUM do przetwarzania w czynności EDI
::   WE: _a - DOKUM.ref()
::       _b - ksef/ufd
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dokumz:=exec('dokumz','edi_fo_ufd',_a,_b);

exec('FindAndGet','#table',DOKUMZ,_dokumz,,"
   _edi:=exec('edi','edi_wspolne');
   _Pliki:=_edi.PLIKI;
   _Pliki.blank();
   _file:=fopen(DOKUMZ.DOKUM,'r',,,1);
   {? _file.is_open()
   ||
      _Pliki.PLIK:=DOKUMZ.bl_info('DOKUM','NAME');
      _Pliki.OK:='N';
      _Pliki.IN:='T';
      {? _Pliki.add()
      ||
         _Pliki.bl_put('BLOB',_file,,,_Pliki.PLIK)
      ?}
   ?};
   obj_del(_file)
");
_dokumz


\atta_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Załącznik - dodanie
::   WE: _a - $TAB.ref()
::       _b - ISTDEF.ref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_istdef:=_b;

{? _ref='' | _istdef=null() || return() ?};

_edi:=exec('edi','edi_wspolne');
_context:=_edi.context;
{? _context.TYPE<>exec('context_type_bl','edi_wspolne') || return() ?};
{? _context.DOK2REJKOM<>'A' || return() ?};

_dokum:=_context.DOKUM;
_bl_type:=_context.BL_TYPE;

:: pobranie załączników
DOKUM.cntx_psh();
DOKUM.prefix();
{? DOKUM.seek(_dokum)
||
   _dokum_r:=DOKUM.ref();
   _dokum:=exec('dokum','edi_wspolne',_ref,_istdef);
   {? _dokum.DOKUM
   ||
      DOKUMZ.cntx_psh();
      DOKUMZ.prefix();
      DOKUMZ.blank();
      DOKUMZ.DOK:=_dokum_r;
      {? exec('upgrade2325_blbc1','zbl')
      || DOKUMZ.REFSQL:=DOKUM.REFSQL
      ?};
      DOKUMZ.KR_OP:=DOKUM.KR_OP;
      DOKUMZ.DOKUM:=_dokum.DOKUM;
      DOKUMZ.NAZWA:=DOKUMZ.bl_info('DOKUM','NAME');
      DOKUMZ.DATE:=date();
      DOKUMZ.TIME:=time();
      DOKUMZ.EDI_I:=$_dokum.EDI_I;
      DOKUMZ.BL_TYPE:=_bl_type;
      DOKUMZ.SCHEMAT:=_context.SCHEMA;
      {? DOKUMZ.add()
      ||
         {? _edi.result='OK'
         ||
            {? exec('xml_xsd_validate','edi_wspolne',DOKUMZ.DOKUM)
            ||
               {? _context.SET_READY_TO_SEND & exec('is_redy_to_send','zbl_dok',_dokum_r)
               ||
                  _bl_stat:=exec('ready_to_send','zbl_stat');
                  {? (-_bl_type)*'ksef'
                  ||
                     exec('FindAndGet','#table',USERS,OPERATOR.USER,,"
                        {? exec('get_usersf','users') & USERSF.KSEF_UL='T' || DOKUM.KSEFAUTH:=OPERATOR.USER ?}
                     ");
                     {? DOKUM.KSEFAUTH=null() || _bl_stat:=exec('waiting_auth','zbl_stat') ?}
                  ?};
                  DOKUM.BL_STAT:=_bl_stat;
                  DOKUM.BL_TERM:=exec('bl_term','zbl_dok');
                  {? var_pres('__MANSKSEF')=type_of('') & __MANSKSEF='BC'
                  ||
                     __MANSKSEF:='BC_ATTA_ADD';
                     DOKUM.DOKUM:=DOKUMZ.DOKUM;
                     {? exec('upgrade2325_blbc1','zbl') || DOKUM.BLC_KIND:='P' ?}
                  ?};
                  DOKUM.put()
               ?}
            ||
               DOKUM.BL_STAT:=exec('validation_failed','zbl_stat');
               DOKUM.put()
            ?}
         ?}
      ?};
      DOKUMZ.cntx_pop()
   ?}
?};
DOKUM.cntx_pop()


\xml_xsd_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: Walidacja xml
::   WE: _a - blob xml
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_edi:=exec('edi','edi_wspolne');
{? _edi.xml_xsd_validate=0 || return(1) ?};
_schema:=_edi.context.SCHEMA; {? _schema='' || return(1) ?};
{? ~fexists('v_ksef_'+_schema,1)
|| _edi.log('Brak schematu walidacji:\n%1\n'[_schema]);
   return(0)
?};

_blob:=_a;
_result:=1;

_download:="
   _split:=spli_str(_a,'/');
   _fname:='v_ksef_'+_split[obj_len(_split)];
   _f:=fopen(_fname,'b',1,,1);
   _f
";
::   _schema:=_download('https://www.gov.pl/attachment/b24a1626-e6b9-4654-99bb-1e7f5f2310e9');
_schema:=_download(_schema);
_xml:=fopen(_blob,'ur',0,,1);
{? _schema.is_open()
||
   no_msg(1);
   _result:=xml_xsd_validate(_schema,_xml,_download);
   no_msg(0);
   _err:=xml_err();
   {? _err<>'' || _edi.log('Wynik walidacji xsd:\n%1\n'[_err]) ?};
   obj_del(_schema)
?};
_result


\indevice_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Sprawdza czy do zapisania pliku w danej ścieżce jest potrzebny indevice i jeżeli tak to czy jest dostępny
::   WE: _a - STRING - ścieżka do pliku
::       [_b] - STRING - element grupujący dla KOMM
::   WY: 0 - brak wymaganego indevice, nie można kontynuować zapisu
::       1 - indevice niepotrzebny, lub dostępny. Można kontynuować zapis
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_path:=_a;
_grp:='';
{? var_pres('_b')=type_of('')
|| _grp:=_b
?};
_result:=1;
{? 1+_path='@' | 2+_path='\\\\'
|| {? exec('cli_functions','#system')=0
   || _result:=0;
      exec('add_kom','#message','Zapis do ścieżki: %1 wymaga inDevice.'@[_path],2,_grp)
   ?}
?};
_result

:Sign Version 2.0 jowisz:1045 2024/01/29 14:27:18 778bac440f19339572aa9fa4eb2714e9ffb8670a81501066040749688d98ac3c9b04bc968f0a12a4e522df91e40f6a4718c551ed15f7e03f20ef27d4f7c58f72c2be72f3f03661e54f48b06a2917114bcf750d094cbcedf23fcabf4d2b419471d0e992124bd9516038e84901c0de250ef9975e5c850f416b82274b1847059d2e
