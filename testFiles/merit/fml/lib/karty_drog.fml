:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: karty_drog.fml
:: Utworzony: 2019/01/17
:: Autor: MW
::======================================================================================================================
:: Zawartość: Biblioteka funkcji związanych z obsługą kart drogowych
::======================================================================================================================


\bl_sam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: blank - samochod (może do usunięcia?)
::  OLD: \bl_sam/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
~~


\chk_pojazd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Walidacja rekordu tabeli POJAZDY
::----------------------------------------------------------------------------------------------------------------------
exec('chk_pojazd_core','karty_drog',-menu_txt()='popraw')


\chk_pojazd_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Walidacja rekordu tabeli POJAZDY
::       - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
{? _<1 | type_of(_a)<>1 | (_a<>0 & _a<>1) || _a:=0 ?};
_ref:={? _a=1 || POJAZDY.ref() || null ?};

_chk:=__CHK.record(POJAZDY,,'NAZ');

{? _chk='' & POJAZDY.NRREJ<>''
|| POJAZDY.cntx_psh();
   POJAZDY.index('DISP');
   POJAZDY.prefix(REF.FIRMA,POJAZDY.NAZ,POJAZDY.NRREJ,);
   {? POJAZDY.first() & (_ref=null | _ref<>POJAZDY.ref())
   || FUN.info('Znaleziono pojazd o podanej nazwie i numerze rejestracyjnym.'@);
      _chk:='NRREJ'
   ?};
   POJAZDY.cntx_pop()
?};

{? _chk='' & POJAZDY.NRREJ<>''
|| POJAZDY.cntx_psh();
   POJAZDY.index('NRREJ');
   POJAZDY.prefix(REF.FIRMA,POJAZDY.NRREJ,);
   {? POJAZDY.first() & (_ref=null | _ref<>POJAZDY.ref())
   || FUN.info('Znaleziono pojazd o podanym numerze rejestracyjnym.'@);
      _chk:='NRREJ'
   ?};
   POJAZDY.cntx_pop()
?};

{? _chk='' & POJAZDY.NAZ<>''
|| POJAZDY.cntx_psh();
   POJAZDY.index('DISP');
   POJAZDY.prefix(REF.FIRMA,POJAZDY.NAZ,);
   {? POJAZDY.first() & (_ref=null | _ref<>POJAZDY.ref())
   || FUN.info('Znaleziono pojazd o podanej nazwie.'@);
      _chk:='NAZ'
   ?};
   POJAZDY.cntx_pop()
?};

_chk


\be_usun_pojazd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: Przed usunięciem rekordu tabeli POJAZDY. Sprawdza, czy nie wykorzystywany
::   WY: 0 - nie można usuwać, zapis wykorzystywany w innych danych systemie
::       1 - można usuwać
::----------------------------------------------------------------------------------------------------------------------
_count:=POJAZDY.count();
{? _count
|| FUN.emsg('Nie można usunąć danych tego pojazdu. Istnieją powiązane struktury.'@)
|| {? POJAZDY.r_lock(1,1,1)
   || {? FUN.ask('Czy usunąć dane pojazdu?'@)
      || POJAZDY.del()
      ?};
      unlock_r()
   || unlock_r();
      FUN.info('Dane pojazdu wykorzystywane przez innego użytkownika.'@)
   ?}
?};
0


\bl_pojazd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: blank - pojazd
::----------------------------------------------------------------------------------------------------------------------
POJAZDY.ref()


\bl_nwyr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: wyroznik
::  OLD: \bl_nwyr/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
NWYR.ref


\bl_koszg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: koszty
::  OLD: \bl_koszg/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SUM.KC-SUM.SKC


\bl_koszg_t
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: koszty TIME
::----------------------------------------------------------------------------------------------------------------------
exec('float2time','#convert',SUM.KC-SUM.SKC)


\bl_koszk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: koszty
::  OLD: \bl_koszk/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SUM.KKM-SUM.SKKM


\bl_pal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: paliwo
::  OLD: \bl_pal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMK.SAMN().RODZPAL().ref()


\samk_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: karta drogowa
::  OLD: \samk_ref/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMK.ref()


\be_samkosz_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Formula przed redakcja pola SAMKOSZ.GODZ
::  OLD: \be_samkosz_godz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? (SAMKOSZ.SAMK().SAMN().RJ='M' & SAMKOSZ.ND<>'T')
   | (SAMKOSZ.SAMK().POJAZD().ND='T' & SAMKOSZ.SAMK().SAMN().RJ2='M' & SAMKOSZ.ND='T')
|| 1
|| 0
?}


\be_samkosz_km
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Przed redakcja pola SAMKOSZ.KM
::  OLD: \be_samkosz_km/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? (SAMKOSZ.SAMK().SAMN().RJ='M' & SAMKOSZ.ND<>'T')
   | (SAMKOSZ.SAMK().POJAZD().ND='T' & SAMKOSZ.SAMK().SAMN().RJ2='M' & SAMKOSZ.ND='T')
|| 0
|| 1
?}


\be_samkosz_nd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Przed redakcja pola SAMKOSZ.ND. Pole redagowalne tylko w przypadku pojazdu ze zbiornikiem
::       dodatkowym i rodzajem jednostek: motogodziny
::  OLD: \be_samkosz_nd/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMKOSZ.SAMK().POJAZD().ND='T' & SAMKOSZ.SAMK().SAMN().RJ2='M' || 1 || 0 ?}


\ae_samkosz_nd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Po redakcji pola SAMKOSZ.ND
::  OLD: \ae_samkosz_nd/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMKOSZ.ND='T' & SAMKOSZ.SAMK().SAMN().RJ<>'M' || SAMKOSZ.GODZ:=0 ?};
1


\ae_mtgkm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: przelicza motogodziny na km
::  OLD: \ae_mtgkm/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld<>0
|| {? SAMKOSZ.ND<>'T'
   || SAMKOSZ.KM:=fld * SAMKOSZ.SAMK().SAMN().MTKM
   || SAMKOSZ.KM:=fld * SAMKOSZ.SAMK().SAMN().MTKM2
   ?}
|| SAMKOSZ.KM:=0
?};
1


\poz_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: nadaje pozycje a la order (musi byc ustawiony prawidlowy indeks i prefix)
::   WE:  _a - akronim tabeli
::        _b - akronim pola
::   WY: numer
::  OLD: \poz_bl/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
($(_a+'.cntx_psh()'))();
 _num:={? ($(_a+'.last()'))() || ($(_a+'.'+_b))() +1 || 1 ?};
($(_a+'.cntx_pop()'))();
_num


\thismont
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JF [2008]
:: OPIS: data z biezacego m-ca
::  OLD: \thismont/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? date()<date(KARTDROG.AR,KARTDROG.AM,1)
|| date(KARTDROG.AR,KARTDROG.AM,1)
|? date()>date(KARTDROG.AR,KARTDROG.AM,0)
|| date(KARTDROG.AR,KARTDROG.AM,0)
|| date()
?}


\monthok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: kontrola czy data jest z biezacego m-ca
::   WY: 1/0
::  OLD: \thismont/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? fld()<date(KARTDROG.AR,KARTDROG.AM,1) | fld()>date(KARTDROG.AR,KARTDROG.AM,0)
|| FUN.info('Data musi pochodzić z bieżącego miesiąca:\n%1.'@[date(KARTDROG.AR,KARTDROG.AM,1)$8])
|| SAMK.SAMN:=exec('ust_norma','karty_drog',SAMK.D);
   NORMA.RJ_TXT:={? SAMK.SAMN().RJ='K' || 'km' |? SAMK.SAMN().RJ='M' || 'mth' |? SAMK.SAMN().RJ='H' || 'h' || '' ?};
   NORMA.RODZPAL:=SAMK.SAMN().RODZPAL;
   {? POJAZDY.ND='T'
   || NORMA.RJ2_TXT:={? SAMK.SAMN().RJ2='K' || 'km' |? SAMK.SAMN().RJ2='M' || 'mth' |? SAMK.SAMN().RJ2='H' || 'h' || '' ?};
      NORMA.RODZPAL2:=SAMK.SAMN().RODZPAL2
   ?}
?};
_wyn


\ae_samk_sp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula po redakcji pola SAMK.SP
::  OLD: \ae_samk_sp/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
KARTDROG.PRZ:=SAMK.SK-SAMK.SP;
{? KARTDROG.PRZ<0 || KARTDROG.PRZ:=0 ?};
SAMK.PRZ:=KARTDROG.PRZ;
1


\ae_samk_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula po redakcji pola SAMK.SK
::  OLD: \ae_samk_sk/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.SK>=SAMK.SP
|| KARTDROG.PRZ:=SAMK.SK-SAMK.SP;
   _wyn:=1
|| KARTDROG.PRZ:=0;
   _wyn:=0;
   FUN.emsg('Stan końcowy licznika nie może być mniejszy od początkowego.'@)
?};
SAMK.PRZ:=KARTDROG.PRZ;
_wyn


\kart_km
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: karty drogowe samochodow
::  OLD: \kart_km/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.PRZ=0 & SAMK.SK>0 & SAMK.SP>=SAMK.SK
|| SAMK.PRZ:=SAMK.SK-SAMK.SP
?};
{? SAMK.PRZ<0 || SAMK.PRZ:=0 ?};
1


\kart_kmp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009]
:: OPIS: Po redakcji pola SAMK.PRZ (karty drogowe samochodu, pole przejechano)
::  OLD: \kart_kmp/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.SK<>0
|| {? SAMK.PRZ<>(SAMK.SK-SAMK.SP)
   || {? FUN.ask(
            'Liczba przejechanych kilometrów jest inna\n'
            'niż różnica stanu końcowego i początkowego licznika.\n'
            'Kontynuować?'@
         )
      || 1
      || 0
      ?}
   || 1
   ?}
|? SAMK.SP<>0
|| FUN.ask(
      'Nie podano stanu początkowego i(lub) stanu końcowego licznika.\n'
      'Nie można obliczyć przejechanej odległości. Akceptować mimo to?'@
   )
|| 1
?}


\ae_wjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009]
:: OPIS: Formula po redakcji pola SAMK.WJM
::  OLD: \ae_wjm/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.WJM>0 & SAMK.WJM>SAMK.PRZ
|| FUN.emsg(
      'Wprowadzono większą ilość km jazdy miejskiej\n'
      'niż km przejechanych w ogóle.'@
   )
?};
1


\aktu_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: rok
::  OLD: \aktu_rok/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
KARTDROG.AR


\aktu_mc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: miesiac
::  OLD: \aktu_mc/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
KARTDROG.AM


\bl_samk_sym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula na blank dla pola SAMK.NR
::  OLD: \bl_samk_sym/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
exec('sym_form','karty_drog')


\be_samk_lad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed redagowaniem pol zwiazanych z ladunkiem i przejazdami z ladunkiem w oknach kart drogowych
::  OLD: \be_samk_lad/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.POJAZD().LAD='T' || 1 || 0 ?}


\ae_samk_lad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula po redagowaniu pola SAMK.TO
::  OLD: \ae_samk_lad/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.TO>0 & POJAZDY.DOPL<>0 || SAMK.ST_LAD:=(SAMK.TO/POJAZDY.DOPL) || SAMK.ST_LAD:=0 ?};
KARTDROG.ST_LAD:=SAMK.ST_LAD*100;
1


\bs_samk_lad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wyswietleniem pol zwiazanych z ladunkiem i przejazdami z ladunkiem w oknach kart drogowych
::   WY: Kod koloru dla pola nieredagowalnego lub pusty string
::  OLD: \bs_samk_lad/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.POJAZD().LAD='T' || '' || exec('findfnrd','color') ?}


\bs_zd_norma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wyswietleniem pol SAMK.ZD_*
::   WY: Kod koloru dla pola nieredagowalnego lub pusty string
::  OLD: \bs_zd_norma/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.size()=0 | SAMK.ZD_RZECZ=0 || exec('findfnrd','color') || '' ?}


\bs_zd_norma_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wyswietleniem pola SAMK.ZD_PO3
::   WY: Kod koloru dla pola nieredagowalnego lub pusty string
::  OLD: \bs_zd_norma_r/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.size()=0 | SAMK.PO3='NIE DOTYCZY' || exec('findfnrd','color') || '' ?}


\ae_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: przeliczenie jazdy + nal + rozl = prac / inne
::  OLD: \ae_godz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_gi_obl:=(exec('get','#params',700800,2)='T');
_suma:=SAMK.GJ+SAMK.GN+SAMK.GR;
SAMK.GP:=_suma;
exec('fld_real2time','karty_drog','SAMK','GP_T');
{? _gi_obl
|| {? _suma<8
   || SAMK.GI:=8-_suma
   || SAMK.GI:=0
   ?};
   exec('fld_real2time','karty_drog','SAMK','GI_T')
?};
1


\be_samk_przepl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed redagowaniem pol zwiazanych z ladunkiem i przejazdami z ladunkiem w oknach kart drogowych
::  OLD: \ae_samk_przepl/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.POJAZD().PRZEPL='T' || 1 || 0 ?}


\bs_samk_przepl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wyswietleniem pol zwiazanych z ladunkiem i przejazdami z ladunkiem w oknach kart drogowych
::   WY: Kod koloru dla pola nieredagowalnego lub pusty string
::  OLD: \bs_samk_przepl/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.POJAZD().PRZEPL='T' || '' || exec('findfnrd','color') ?}


\bl_sam_nd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula na blank dla pola SAMK.ND
::  OLD: \bl_sam_nd/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
POJAZDY.ND


\bl_samk_nrlicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula na wartosc poczatkowa pola SAMK.NNRLICZ
::  OLD: \bl_samk_nrlicz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_new:=1;
_sql:='select max(SAMK.NRLICZ) as MAXL from SAMK where SAMK.POJAZD ='''+$POJAZDY.ref()+''' and SAMK.D<=to_date(:_a)';
VAR_DEL.delete('__TMPMAX');
__TMPMAX:=sql(_sql,SAMK.D);
{? __TMPMAX.first() & __TMPMAX.MAXL>0 || _new:=__TMPMAX.MAXL ?};
VAR_DEL.delete('__TMPMAX');
_new


\test_norma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula testuje czy jest jakas norma dla pojazdu
::   WE: [_a] - ref pojazdu (POJAZDY.ref()), jesli nie podano to sprawdza dla biezacego rekordu tabeli POJAZDY.
::   WY: 1 - ok, jest norma, 0 - brak norm
::  OLD: \test_norma/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMN.cntx_psh();
SAMN.index('SAMN');
{? _=0 || _a:=POJAZDY.ref() ?};
SAMN.prefix(_a);
{? SAMN.first()
|| {? SAMN.OD>date(KARTDROG.AR,KARTDROG.AM,0)
   || _wy:=-1
   || _wy:=1
   ?}
|| _wy:=0
?};
SAMN.cntx_pop();
_wy


\ust_norma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula ustawia norme wedlug podanej daty, dla biezacego samochodu
::   WE: _a = data dla której należy znalezc obowiazujaca norme
::   WY: wskazanie na norme (SAMN.ref())
::  OLD: \ust_norma/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=0 | type_of(_a)<>4
|| FUN.emsg('Nieprawidłowe dane wejściowe dla formuły: ust_norma.'@);
   return(0)
?};
_norma:=null;
SAMN.index('SAMN');
SAMN.prefix(POJAZDY.ref());
{? SAMN.last()
|| _dalej:=1;
   {! |?
      {? _a>= SAMN.OD
      || _norma:=SAMN.ref();
         _dalej:=0
      ?};
      _dalej & SAMN.prev()
   !}
?};
_norma


\obl_st_lad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Oblicza stopien zaladowania dla karty
::   WE: _a = ref karty drogowej (SAMK), jesli = null to dla biezacej
::   WY: stopien zaladowania
::  OLD: \obl_st_lad/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a<>null
|| SAMK.cntx_psh();
   SAMK.prefix();
   SAMK.seek(_a)
?};
_st_lad:=0;
{? SAMK.POJAZD().DOPL<>0 || _st_lad:=(SAMK.TO/POJAZDY.DOPL) ?};
{? _a<>null || SAMK.cntx_pop() ?};
_st_lad


\obl_pob_pal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Sumuje popbrane paliwo dla karty
::   WE: _a = SAMK.ref, jesli = null to dla biezacej
::       _b = 'P' - zbiornik podstawowy, lub 'D' - zbiornik dodatkowy
::   WY: suma pobranego paliwa dla karty
::  OLD: \obl_pob_pal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_ile:=0;
{? _<2 || _b:='P' ?};
{? _a<>null
|| SAMK.cntx_psh();
   SAMK.prefix();
   SAMK.seek(_a)
?};
SAMP.index('SAMK');
SAMP.prefix(SAMK.ref(),_b);
{? SAMP.first()
|| {! |?
       _ile+=SAMP.IL;
       SAMP.next()
   !}
?};
{? _a<>null || SAMK.cntx_pop() ?};
_ile


\obl_rzecz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula oblicza rzeczywiste zuzycie dla karty
::   WE: _a = SAMK.ref(), jesli _a = null to dla biezacej,
::       _b = 'P' - zbiornik podstawowy, lub 'D' - zbiornik dodatkowy
::   WY: rzeczywiste zuzycie dla karty
::  OLD: \obl_rzecz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_ile:=0;
{? _<2 || _b:='P' ?};
{? _a<>null
|| SAMK.cntx_psh();
   SAMK.prefix();
   SAMK.seek(_a)
?};
_ile:=exec('obl_pob_pal','karty_drog',_a,_b);
{? _b='P'
|| _ile:=_ile+(SAMK.SPP-SAMK.SKP)
|| _ile:=_ile+(SAMK.SPP2-SAMK.SKP2)
?};
{? _a<>null || SAMK.cntx_pop() ?};
_ile


\obl_wg_normy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Zuzycie paliwa (zbiornik podstawowy lub dodatkowy) wg normy dla biezacej lub wskazanej karty drogowej
::   WE: [_a] - ref karty drogowej (SAMK.ref()), jesli null to liczy dla biezacej
::       [_b] - zbiornik (P)odstawowy lub (D)odatkowy
::   WY: ilosc paliwa
::  OLD: \obl_wg_normy/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a<>null
|| SAMK.cntx_psh();
   SAMK.prefix();
   SAMK.seek(_a)
?};
{? _<2 || _b:='P' ?};
_ile_n:=0;
{? _b='P' & SAMK.SAMN().NA>0
||
:: przebieg miejski z zaladunkiem
   _j_m_lad:=SAMK.PRZELM;
:: przebieg miejski pusty
   _j_m_pus:=SAMK.WJM-SAMK.PRZELM;
:: przebieg pozamiejski z zaladunkiem
   _j_p_lad:=SAMK.PRZEL-SAMK.PRZELM;
:: przebieg pozamiejski pusty
   _j_p_pus:=SAMK.PRZ-(SAMK.WJM+_j_p_lad);
:: stopien zaladowania
   _st_zal:=exec('obl_st_lad','karty_drog',_a);
:: przeliczenie normy pozamiejskiej z zaladunkiem wg stopnia zaladowania
   _norpz:=SAMK.SAMN().NORP+((SAMK.SAMN().NORP100-SAMK.SAMN().NORP)*_st_zal);
:: przeliczenie normy miejskiej z zaladunkiem wg stopnia zaladowania
   _normz:=SAMK.SAMN().NORM+((SAMK.SAMN().NORM100-SAMK.SAMN().NORM)*_st_zal);
:: jazda pozamiejska pustym wg normy
   _ile_n+=(_j_p_pus*SAMK.SAMN().NORP)/SAMK.SAMN().NA;
:: jazda pozamiejska z zaladunkiem wg normy
   _ile_n+=(_j_p_lad*_norpz)/SAMK.SAMN().NA;
:: jazda miejska pustym wg normy
   _ile_n+=(_j_m_pus*SAMK.SAMN().NORM)/SAMK.SAMN().NA;
:: jazda miejska z zaladunkiem  wg normy
   _ile_n+=(_j_m_lad*_normz)/SAMK.SAMN().NA;
:: zaladunki pozamiejskie wg normy
   _ile_n+=SAMK.ILZP*SAMK.SAMN().NORPZ;
:: zaladunki miejskie wg normy
   _ile_n+=SAMK.ILZM*SAMK.SAMN().NORMZ;
:: praca dodatkowa wg normy
   _ile_n+=SAMK.PR_DOD_P*SAMK.SAMN().PR_DOD_P;
:: dodatek paliwa do karty wg normy
   {? SAMK.PRZ<>0 | SAMK.PR_DOD_P<>0 || _ile_n+=SAMK.SAMN().DODP ?};
:: jesli wspolczynik zimowy
   {? SAMK.U_WSPZ='T' || _ile_n:=_ile_n*SAMK.SAMN().WSPZ ?}
|? _b='D' & SAMK.SAMN().NA2>0
||
::    przebieg miejski z zaladunkiem dla zb. dodatkowego
   _j_m_lad:=SAMK.PRZELM2;
::    przebieg miejski pusty dla zb. dodatkowego
   _j_m_pus:=SAMK.WJM2-SAMK.PRZELM2;
::    przebieg pozamiejski z zaladunkiem dla zb. dodatkowego
   _j_p_lad:=SAMK.PRZEL2-SAMK.PRZELM2;
::    przebieg pozamiejski pusty dla zb. dodatkowego
   _j_p_pus:=SAMK.PRZ2-(SAMK.WJM2+_j_p_lad);
:: stopien zaladowania
   _st_zal:=exec('obl_st_lad','karty_drog',_a);
::    przeliczenie normy pozamiejskiej z zaladunkiem wg stopnia zaladowania dla zb. dodatkowego
   _norpz:=SAMK.SAMN().NORP2+((SAMK.SAMN().NORPZ2-SAMK.SAMN().NORP2)*_st_zal);
::    przeliczenie normy miejskiej z zaladunkiem wg stopnia zaladowania dla zb. dodatkowego
   _normz:=SAMK.SAMN().NORM2+((SAMK.SAMN().NORMZ2-SAMK.SAMN().NORM2)*_st_zal);
::    jazda pozamiejska pustym wg normy dla zb. dodatkowego
   {? SAMK.SAMN().NA2>0 || _ile_n+=(_j_p_pus*SAMK.SAMN().NORP2)/SAMK.SAMN().NA2 ?};
::    jazda pozamiejska z zaladunkiem wg normy dla zb. dodatkowego
   {? SAMK.SAMN().NA2>0 || _ile_n+=(_j_p_lad*SAMK.SAMN().NORPZ2)/SAMK.SAMN().NA2 ?};
::    jazda miejska pustym wg normy dla zb. dodatkowego
   {? SAMK.SAMN().NA2>0 || _ile_n+=(_j_m_pus*SAMK.SAMN().NORM2)/SAMK.SAMN().NA2 ?};
::    jazda miejska z zaladunkiem  wg normy dla zb. dodatkowego
   {? SAMK.SAMN().NA2>0 || _ile_n+=(_j_m_lad*SAMK.SAMN().NORMZ2)/SAMK.SAMN().NA2 ?};
::    zaladunki pozamiejskie wg normy dla zb. dodatkowego
   _ile_n+=SAMK.ILZP2*SAMK.SAMN().NORPZ2;
::    zaladunki miejskie wg normy dla zb. dodatkowego
   _ile_n+=SAMK.ILZM2*SAMK.SAMN().NORMZ2;
::    praca dodatkowa wg normy dla zb. dodatkowego
   _ile_n+=SAMK.PR_DOD_D*SAMK.SAMN().PR_DOD_D;
::    dodatek paliwa do karty wg normy dla zb. dodatkowego
   {? SAMK.PRZ2<>0 | (SAMK.PR_DOD_D<>time(0,0,0)) || _ile_n+=SAMK.SAMN().DODD ?};
::    jesli wspolczynik zimowy
   {? SAMK.U_WSPZ='T' || _ile_n:=_ile_n*SAMK.SAMN().WSPZ2 ?}
?};
{? _a<>null || SAMK.cntx_pop() ?};
_ile_n


\obl_przepal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula oblicza zuzycie wedlug normy, rzeczywiste i przepal/oszczednosc dla biezacej karty
::  OLD: \obl_przepal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
:: zbiornik podstawowy
:: sprawdzenie czy sa dane do obliczen
{? SAMK.PRZ=0 | SAMK.SAMN().NA=0 | SAMK.SAMN().NORP=0 | SAMK.SAMN().NORM=0
|| _dane:=0
|| _dane:=1
?};
{? _dane=1
|| SAMK.ST_LAD:=exec('obl_st_lad','karty_drog',null);
   SAMK.Z_RZECZ:=exec('obl_rzecz','karty_drog',null,'P');
   SAMK.Z_NORMA:=exec('obl_wg_normy','karty_drog',null,'P');
   SAMK.ZU_KART:=SAMK.Z_RZECZ-SAMK.Z_NORMA;
   SAMK.PALIWO:=SAMK.SAMN().RODZPAL().KOD;
   {? SAMK.ZU_KART>0
   || SAMK.PO:='PRZEPAŁ'
   |? SAMK.ZU_KART=0
   || SAMK.PO:='NORMA'
   || SAMK.PO:='OSZCZĘDNOŚĆ'
   ?}
|| SAMK.PO:='BRAK DANYCH'
?};

:: zbiornik dodatkowy
{? SAMK.POJAZD().ND='T'
||
:: sprawdzenie czy sa dane do obliczen
   {? SAMK.PRZ2=0 | SAMK.SAMN().NA2=0 | SAMK.SAMN().NORP2=0 | SAMK.SAMN().NORM2=0
   || _dane:=0
   || _dane:=1
   ?};
   {? _dane=1
   || SAMK.ST_LAD:=exec('obl_st_lad','karty_drog',null);
      SAMK.ZD_RZECZ:=exec('obl_rzecz','karty_drog',null,'D');
      SAMK.ZD_NORMA:=exec('obl_wg_normy','karty_drog',null,'D');
      SAMK.ZU_KART2:=SAMK.ZD_RZECZ-SAMK.ZD_NORMA;
      {? SAMK.ZU_KART2>0
      || SAMK.PO2:='PRZEPAŁ'
      |? SAMK.ZU_KART2=0
      || SAMK.PO2:='NORMA'
      || SAMK.PO2:='OSZCZĘDNOŚĆ'
      ?};
      {? SAMK.SAMN().RODZPAL=SAMK.SAMN().RODZPAL2
      || SAMK.ZU_KARTR:=SAMK.ZU_KART+SAMK.ZU_KART2;
         {? SAMK.ZU_KARTR>0
         || SAMK.PO3:='PRZEPAŁ'
         |? SAMK.ZU_KARTR=0
         || SAMK.PO3:='NORMA'
         || SAMK.PO3:='OSZCZĘDNOŚĆ'
         ?}
      || SAMK.ZU_KARTR:=0;
         SAMK.PO3:='NIE DOTYCZY'
      ?}
   || SAMK.PO2:='BRAK DANYCH';
      SAMK.ZU_KART2:=0;
      SAMK.ZU_KARTR:=0;
      SAMK.PO3:='NIE DOTYCZY'
   ?}
|| SAMK.ZU_KART2:=SAMK.ZD_RZECZ:=SAMK.ZD_NORMA:=0;
   SAMK.PO2:='BRAK DANYCH';
   SAMK.ZU_KARTR:=0;
   SAMK.PO3:='NIE DOTYCZY'
?};
SAMK.put()


\samk_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: ustawia okienko redakcji dla kart drogowych
::  OLD: \samk_red/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? POJAZDY.ND='T'
|| SAMK.win_edit('RED_D1')
|| SAMK.win_edit('RED1')
?};
''


\kosz_kar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: wyswietlanie kosztow do karty drogowej
::  OLD: \kosz_kar/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.STATUS='S'
|| FUN.info('Dla kart specjalnych (wymiana licznika) nie można wprowadzać kosztów.'@);
   return(0)
?};
SUM.SKC:=0;
SUM.SKKM:=0;
{? SAMK.SAMN().RJ='M'
|| SUM.KKM:=SAMK.PRZ*SAMK.SAMN().MTKM
|| SUM.KKM:=SAMK.PRZ
?};
SUM.KC:=SAMK.GP;
SUM.KC_T:=exec('float2time','#convert',SUM.KC);
SAMKOSZ.index('SAMK');
SAMKOSZ.prefix(SAMK.ref());
:: wybor okna wertowania: bez motogodzin lub z kolumna motogodziny
{? SAMK.SAMN().RJ='M' | (SAMK.POJAZD().ND='T' & SAMK.SAMN().RJ2='M')
|| _wer:='WERM'
|| _wer:='WER'
?};
SAMKOSZ.win_sel(_wer);
{? exec('chk_role','#b__box',OPERATOR.USER,'LTR_KAR_DKAR')
|| {? SAMK.STATUS='T' & SAMK.POJAZD().A='T'
   || SAMKOSZ.actions(_wer,'PDU:D',,1)
   |? SAMK.POJAZD().A='N'
   || SAMKOSZ.actions(_wer,'PDU:D',,1)
   || SAMKOSZ.actions(_wer,,,1)
   ?}
|| SAMKOSZ.actions(_wer,'PDU:D',,1)
?};
SAMKOSZ.hdr_sel();
SAMKOSZ.hdr_sel(' '+SAMK.SYM);
SAMKOSZ.select();
{? SAMKOSZ.size()>0
|| {? SUM.KKM<>SUM.SKKM
   || FUN.info('Niezgodna ilość kilometrów. Powinno być: %1'@[$SUM.KKM])
   |? SUM.KC<>SUM.SKC
   || FUN.info('Niezgodna ilość godzin. Powinno być: %1'@[$SUM.KC])
   ?}
?};
''


\kosz_sum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: aktualizacja sumy dla kosztow karty drogowej
::  OLD: \kosz_sum/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMKOSZ.cntx_psh();
SUM.SKC:=0;
SUM.SKKM:=0;
{? SAMKOSZ.first()
|| {!
   |?
      SUM.SKC+=SAMKOSZ.CZAS;
      SUM.SKKM+=SAMKOSZ.KM;
      SAMKOSZ.next()
   !}
?};

SAMKOSZ.cntx_pop();
''


\samk_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: wyswietlanie dodatkow pobranych do karty drogowej
::  OLD: \samk_dod/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.STATUS='S'
|| FUN.info('Dla kart specjalnych (wymiana licznika) nie można wprowadzać dodatków.'@);
   return(0)
?};
JM.f_clear;
JM.win_sel('WER2');
JM.win_dict('SLO');
M.win_dict('SLO_M');
POMOC.RODZ:='T';
ZAKR.MATU:='T';
SAMDOD.index('SAMK');
SAMDOD.prefix(SAMK.ref());
SAMDOD.win_sel('WER');
{? exec('chk_role','#b__box',OPERATOR.USER,'LTR_KAR_DKAR')
|| {? SAMK.STATUS='T' & SAMK.POJAZD().A='T'
   || SAMDOD.actions('WER','PDU:D',,1)
   |? SAMK.POJAZD().A='N'
   || SAMDOD.actions('WER','PDU:D',,1)
   || SAMDOD.actions('WER',,,1)
   ?}
|| SAMDOD.actions('WER','PDU:D',,1)
?};
SAMDOD.select();
''


\samk_pal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: wyswietla pobrane paliwo do karty drogowej
::  OLD: \samk_pal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.STATUS='S'
|| FUN.info('Dla kart specjalnych (wymiana licznika) nie można wprowadzać paliwa.'@);
   return(0)
?};
_ref:=SAMK.ref();
SAMP.index('SAMK');
SAMP.prefix(SAMK.ref());
SAMP.win_sel('WER');
{? exec('chk_role','#b__box',OPERATOR.USER,'LTR_KAR_DKAR')
|| {? SAMK.STATUS='T' & SAMK.POJAZD().A='T'
   || SAMP.actions('WER','PDU:D',,1)
   |? SAMK.POJAZD().A='N'
   || SAMP.actions('WER','PDU:D',,1)
   || SAMP.actions('WER',,,1)
   ?}
|| SAMP.actions('WER','PDU:D',,1)
?};
SAMP.hdr_sel(' do karty nr '+SAMK.SYM);
{? SAMK.ND='T'
|| SAMP.win_edit('RED2')
|| SAMP.win_edit('RED')
?};
SAMP.select();
exec('obl_przepal','karty_drog');
''


\samk_pra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: wyswietlanie pracownikow do karty drogowej
::  OLD: \samk_pra/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.STATUS='S'
|| FUN.info('Dla kart specjalnych (wymiana licznika) nie można wprowadzać pracowników.'@);
   return(0)
?};
KARTDROG.PKAPSUMA:=0;
P_KAP.index('SAMK');
P_KAP.win_sel('WER_KART');
{? exec('chk_role','#b__box',OPERATOR.USER,'LTR_KAR_DKAR')
|| {? SAMK.STATUS='T' & SAMK.POJAZD().A='T'
   || P_KAP.actions('WER_KART','PDU:D',,1)
   |? SAMK.POJAZD().A='N'
   || P_KAP.actions('WER_KART','PDU:D',,1)
   || P_KAP.actions('WER_KART',,,1)
   ?}
|| P_KAP.actions('WER_KART','PDU:D',,1)
?};
P_KAP.prefix(SAMK.ref());
{? P_KAP.first()
|| {! |?
      {? P_KAP.TYP='T' || KARTDROG.PKAPSUMA+=P_KAP.PRZEBIEG ?};
      P_KAP.next()
   !}
?};
P_KAP.first();
{! |?
   _suma:=_sumag:=_dalej:=0;
   P_KAP.select();
   _kierowcy:=0;
   {? P_KAP.first()
   || {! |?
         {? P_KAP.TYP='T'
         || _kierowcy:=1;
            _suma+=P_KAP.PRZEBIEG;
            _sumag+=P_KAP.IL
         ?};
         P_KAP.next()
      !}
   ?};
   {? _kierowcy & _suma<>(SAMK.SK-SAMK.SP)
   || _dalej:=FUN.ask(
         'Suma przebiegów kierowców (%1 km) różni się od przebiegu na karcie drogowej (%2 km).\n'
         'Wrócić do edycji pracowników?'@[$_suma,$(SAMK.SK-SAMK.SP)]
      )
   ?};
   {? _dalej=0
   || {? _kierowcy & _sumag<>SAMK.GP
      || _dalej:=FUN.ask(
            'Suma godzin pracy kierowców (%1) różni się od liczby godzin pracy na karcie drogowej (%2).\n'
            'Wrócić do edycji pracowników?'@[$_sumag,$SAMK.GP]
         )
      ?}
   ?};
   _dalej
!};
''


\samk_trasy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Lista tras podpietych pod biezaca karte drogowa
::  OLD: \samk_trasy/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.STATUS='S'
|| FUN.info('Dla kart specjalnych (wymiana licznika) nie można wprowadzać tras.'@);
   return(0)
?};
SAMK_TRA.win_sel('WER');
SAMK_TRA.index('SAMK_TRA');
SAMK_TRA.prefix(SAMK.ref());
{? exec('chk_role','#b__box',OPERATOR.USER,'LTR_KAR_DKAR')
|| {? SAMK.STATUS='T' | SAMK.POJAZD().A='N'
   || SAMK_TRA.actions('WER','DPU:D')
   || SAMK_TRA.actions('WER')
   ?}
|| SAMK_TRA.actions('WER','DPU:D',,1)
?};
SAMK_TRA.select()


\samk_koszt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdzanie wypelnienia na rekord dla kosztow samochodow
::   WY: czy wypelniono pole
::  OLD: \samk_koszt/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(SAMKOSZ,,'NWYR');
{? _wyn='' & SAMKOSZ.KM<0
||
   FUN.info('Ilość kilometrów nie może być ujemna.'@);
   _wyn:='KM'
?};
{? _wyn='' & SAMKOSZ.GODZ<0
||
   FUN.info('Ilość motogodzin nie może być ujemna.'@);
   _wyn:='GODZ'
?};
{? _wyn='' & SAMKOSZ.GODZ=0 & SAMKOSZ.KM=0
|| {? ~FUN.ask('Nie wprowadzono wartości. Wprowadzić pustą kartę?'@)
   || _wyn:='NWYR'
   ?}
?};
_wyn


\chk_samk_licz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula weryfikuje poprawnosc wypelnienia okna redagowania zmiany licznika przebiegu pojazdu
::   WY: '' lub kod pola z nieprawidlowa zawartoscia
::  OLD: \chk_samk_licz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? SAMK.SYM=''
|| FUN.emsg('Numer karty musi być wypełniony.'@);
   _wyn:='SYM'
?};
{? _wyn=''
|| {? SAMK.D=date(0,0,0)
   || FUN.emsg('Data karty musi zostać podana.'@);
      _wyn:='D'
   ?}
?};
{? _wyn=''
|| {? ~(SAMK.D~1=KARTDROG.AR & SAMK.D~2=KARTDROG.AM)
   || FUN.emsg('Data musi pochodzić z bieżącego miesiąca:\n%1.'@[date(KARTDROG.AR,KARTDROG.AM,1)$8]);
      _wyn:='D'
   ?}
?};
{? _wyn=''
|| {? SAMK.POJAZD().DK<>date(0,0,0) & SAMK.D>SAMK.POJAZD().DK
   || FUN.emsg('Data karty nie może być późniejsza niż data kasacji pojazdu (%1).'@[$SAMK.POJAZD().DK]);
      _wyn:='D'
   ?}
?};
_data:=SAMK.D;
SAMK.cntx_psh();
SAMK.index('STATUS');
SAMK.prefix(POJAZDY.ref(),'S',_data);
{? SAMK.first()
|| FUN.emsg('W systemie istnieje już karta zmieniająca licznik pojazdu z identyczną datą wystawienia.'@);
   _wyn:='D'
?};
SAMK.cntx_pop();
{? _wyn=''
|| _sql:='select SAMK.D, SAMK.NRLICZ from SAMK where SAMK.POJAZD='''+$POJAZDY.ref()+''' and SAMK.D>=to_date(:_a)';
   VAR_DEL.delete('__TMPMAX');
   __TMPMAX:=sql(_sql,SAMK.D);
   {? __TMPMAX.first()
   || FUN.emsg('W systemie istnieją już karty z równą lub późniejszą datą niż podana data wymiany licznika.'@);
      _wyn:='D'
   ?};
   VAR_DEL.delete('__TMPMAX')
?};
{? _wyn=''
|| {? SAMK.SP<0
   || FUN.emsg('Stan licznika nie może być mniejszy od zera.'@);
      _wyn:='SP'
   ?}
?};
_wyn


\samk_zm_licz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula do obslugi wymiany licznika przebiegu pojazdu
::  OLD: \samk_zm_licz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? POJAZDY.A='N'
|| FUN.emsg('Pojazd jest nieaktywny.\nNie można wymienić licznika.'@);
   return(0)
?};
{? POJAZDY.DK<>date(0,0,0)
|| {? date(KARTDROG.AR,KARTDROG.AM,1)>POJAZDY.DK
   || FUN.emsg('Obecny okres jest późniejszy od daty kasacji pojazdu.\nNie można wymienić licznika.'@);
      return(0)
   ?}
?};
{? ~FUN.ask('Funkcja wymiany licznika przebiegu pojazdu. Kontynuować?'@)
|| return(0)
?};
SAMK.win_edit('LICZNIK');
SAMK.blank();
SAMK.SYM:='LICZNIK';
SAMK.STATUS:='S';
VAR_DEL.delete('__TMPMAX');
__TMPMAX:=sql('select max(NRLICZ) as MAXL from SAMK where SAMK.POJAZD='''+$SAMK.POJAZD+'''');
{? __TMPMAX.first() || _newlicz:=__TMPMAX.MAXL+1 || _newlicz:=1 ?};
VAR_DEL.delete('__TMPMAX');
SAMK.NRLICZ:=_newlicz;
{? SAMK.edit("exec('chk_samk_licz','karty_drog')")
|| SAMK.DK:=SAMK.D;
   SAMK.SK:=SAMK.SP;
   SAMK.PO:=SAMK.PO2:=SAMK.PO3:='NIE DOTYCZY';
   SAMK.add()
?}


\samk_test_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Funkcja testuje czy wszystkie wczesniejsze w stosunku do obecnej karty drogowe
::       sa zatwierdzone.
::   WY: 1 - wszystkie zatwierdzone, 0 - znaleziono niezatwierdzone wczesniejsze karty
::  OLD: \samk_test_akc/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_licznik:=SAMK.SK;
_nr:=SAMK.NRLICZ;
SAMK.cntx_psh();
SAMK.index('LICZNIK');
SAMK.prefix(POJAZDY.ref(),_nr);
SAMK.find_key(_licznik);
_status:=1;
{? SAMK.prev()
|| {! |?
      {? SAMK.STATUS<>'T' & SAMK.STATUS<>'S' || _status:=0 ?};
      _status & SAMK.prev()
   !}
?};
SAMK.cntx_pop();
_status


\samk_test_wyc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Funkcja testuje czy wszystkie późniejsze w stosunku do obecnej karty drogowe
::       sa niezatwierdzone.
::   WY: 1 - wszystkie niezatwierdzone, 0 - znaleziono zatwierdzone późniejsze karty
::----------------------------------------------------------------------------------------------------------------------
_licznik:=SAMK.SK;
_nr:=SAMK.NRLICZ;
SAMK.cntx_psh();
SAMK.index('LICZNIK');
SAMK.prefix(POJAZDY.ref(),_nr);
SAMK.find_key(_licznik);
_status:=1;
{? SAMK.next()
|| {! |?
      {? (SAMK.STATUS='T' | SAMK.STATUS='S') & (SAMK.SK>_licznik) || _status:=0 ?};
      _status & SAMK.next()
   !}
?};
SAMK.cntx_pop();
_status


\samk_test_prz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula testuje ciaglosc wpisanych przebiegow (stanow licznika) dla zatwierdzanych kart.
::   WE: Test wykonywany jest dla biezacej karty biezacego pojazdu
::   WY: 1 - ok, 0 - wystapil problem - zatwierdzana karta pokrywa się z wczesniej zatwierdzonymi
::  OLD: \samk_test_prz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wy:=1;
VAR_DEL.delete('__SAMK');
_sql:='Select * from SAMK where SAMK.NRLICZ='+$SAMK.NRLICZ+' and SAMK.POJAZD='''+$SAMK.POJAZD
   +''' and SAMK.STATUS=''T'' and ((SAMK.SP>'+form(SAMK.SP,,,'0.')+' and SAMK.SP<'+form(SAMK.SK,,,'0.')+') or'
   +' (SAMK.SK>'+form(SAMK.SP,,,'0.')+' and SAMK.SK<'+form(SAMK.SK,,,'0.')+'))';
__SAMK:=sql(_sql);
{? __SAMK.first() || _wy:=0 ?};
_wy


\samk_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula akceptuje karte drogowa
::   WE: jesli _a i _a=1 to akceptacja grupy kart - brak komunikatow
::   WE: [_b] - 1-automatycznie 0-nie(domyślnie)
::  OLD: \samk_akcept/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>0 & _a=1
|| _grp:=1
|| {? SAMK.sel_size()>0
   || _grp:=1
   || _grp:=0
   ?}
?};
_auto:=(~_grp & _>1 & _b);

_wyn:=0;

{? SAMK.STATUS='S'
|| {? _grp=0 || FUN.info('Kart specjalnych (wymiana licznika) nie można zaakceptowć.'@) ?};
   return(0)
?};
{? SAMK.r_lock(1,1)
|| {? SAMK.STATUS<>'T'
   || {? _grp | _auto | FUN.ask('Zaakceptować kartę drogową?'@)
      || _test:=exec('samk_test_akc','karty_drog');
         {? _test
         || _test:=exec('samk_test_prz','karty_drog');
            {? _test
            || _test:=exec('samk_test_mtg','karty_drog');
               {? _test
               || SAMK.STATUS:='T';
                  SAMK.KTO_AKC:=OPERATOR.USER().KOD;
                  SAMK.DATA_AKC:=date();
                  SAMK.CZAS_AKC:=time();
                  {? SAMK.put()
                  || _wyn:=_wyn+1;
                     exec('test_przebieg','karty_drog',SAMK.ref(),_grp)
                  ?}
               || {? ~_grp & FUN.ask(
                     'Motogodziny wprowadzone dla bieżącej karty\n'
                     'pokrywają się z motogodzinami dla już zaakceptowanych kart.\n'
                     'Wyświetlić listę kart, które pokrywają się z bieżącą?'@
                     )
                  || _win:=__SAMK.mk_sel('Karty drogowe pokrywające się z bieżącą'@,'P',0,'__samk',2,2,12);
                     __SAMK.win_fld(_win,__SAMK,'SYM',,,15,,,'Symbol'@);
                     __SAMK.win_fld(_win,__SAMK,'D',,,10,,,'Data'@);
                     __SAMK.win_fld(_win,__SAMK,'MOTGD_P',,,12,0,,'Stan pocz.'@);
                     __SAMK.win_fld(_win,__SAMK,'MOTGD_K',,,12,0,,'Stan koń.'@);
                     __SAMK.win_sel(_win);
                     __SAMK.select()
                  ?};
                  VAR_DEL.delete('__SAMK')
               ?}
            || {? ~_grp & FUN.ask(
                     'Stany licznika wprowadzone dla bieżącej karty\n'
                     'pokrywają się ze stanami licznika dla już zaakceptowanych kart.\n'
                     'Wyświetlić listę kart, które pokrywają się z bieżącą?'@
                  )
               || _win:=__SAMK.mk_sel('Karty drogowe pokrywające się z bieżącą'@,'P',0,'__samk',2,2,12);
                  __SAMK.win_fld(_win,__SAMK,'SYM',,,15,,,'Symbol'@);
                  __SAMK.win_fld(_win,__SAMK,'D',,,10,,,'Data'@);
                  __SAMK.win_fld(_win,__SAMK,'SP',,,12,0,,'Stan pocz.'@);
                  __SAMK.win_fld(_win,__SAMK,'SK',,,12,0,,'Stan koń.'@);
                  __SAMK.win_sel(_win);
                  __SAMK.select()
               ?};
               VAR_DEL.delete('__SAMK')
            ?}
         || {? ~_grp || FUN.emsg('Istnieją niezaakceptowane karty wcześniejsze od obecnej.'@) ?}
         ?}
      ?};
      SAMK.r_unlock()
   || SAMK.r_unlock();
      {? ~_grp || FUN.info('Wskazana karta jest już zaakceptowana.'@) ?}
   ?}
|| {? ~_grp || FUN.info('Wskazana karta jest modyfikowana przez innego użytkownika.'@) ?}
?};
_wyn


\g_samk_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wykonaniem akcji Zatwierdz dla grupy kart drogowych
::   WY: 1 - start akcji dla grupy, 0 - rezygnacja z akcji dla grupy rekordow
::  OLD: \g_samk_akcept/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Zaakceptować zaznaczone karty drogowe?'@)
|| 1
|| 0
?}


\samk_wycofaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula wycofuje zatwierdzenie karty drogowej
::   WE: jesli _a i _a=1 to wycofywanie grupowe
::  OLD: \samk_wycofaj/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>0 & _a=1
|| _grp:=1
|| {? SAMK.sel_size()>0
   || _grp:=1
   || _grp:=0
   ?}
?};
{? SAMK.STATUS='S'
|| {? _grp=0 || FUN.info('Karty specjalne (wymiana licznika) nie podlegają wycofywaniu akceptacji.'@) ?};
   return(0)
?};
{? SAMK.r_lock(1,1)
|| {? SAMK.STATUS='T'
   || _pytanie:='Wycofać akceptację karty drogowej?'@;
      {? _grp | FUN.ask(_pytanie)
      || _test:=exec('samk_test_wyc','karty_drog');
         {? _test
         || SAMK.STATUS:='N';
            SAMK.KTO_AKC:='';
            SAMK.DATA_AKC:=date(0,0,0);
            SAMK.CZAS_AKC:=time(0,0,0);
            SAMK.put()
         || {? ~_grp || FUN.emsg('Istnieją zaakceptowane karty późniejsze od obecnej.'@) ?}
         ?}
      ?};
      SAMK.r_unlock()
   |? SAMK.STATUS='N'
   || SAMK.r_unlock();
      {? ~_grp || FUN.info('Wskazana karta nie jest zaakceptowana.'@) ?}
   ?};
   SAMK.r_unlock()
|| {? ~_grp || FUN.info('Wskazana karta jest modyfikowana przez innego użytkownika.'@) ?}
?}


\g_samk_wycofaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wykonaniem akcji Wycofaj dla grupy kart drogowych
::   WY: 1 - start akcji dla grupy, 0 - rezygnacja z akcji dla grupy rekordow
::  OLD: \g_samk_wycofaj/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Wycofać akceptację dla zaznaczonych kart drogowych?'@)
|| 1
|| 0
?}


\chk_samk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdzanie wypelnienia na rekord dla paliwa samochodow
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: czy wypelniono pole
::  OLD: \chk_samk/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _<1 | type_of(_a)<>1 | (_a<>0 & _a<>1)
|| _a:=0
?};
_wyn:='';
{? SAMK.SYM=''
|| FUN.emsg('Numer karty musi być wypełniony.'@);
   _wyn:='SYM'
?};
{? _wyn=''
|| {? SAMK.D=date(0,0,0)
   || FUN.emsg('Data karty musi zostać podana.'@);
      _wyn:='D'
   ?}
?};
{? _wyn=''
|| {? SAMK.DK=date(0,0,0)
   || FUN.emsg('Data końcowa karty musi zostać podana.'@);
      _wyn:='DK'
   ?}
?};
{? _wyn=''
|| {? ~(SAMK.D~1=KARTDROG.AR & SAMK.D~2=KARTDROG.AM)
   || FUN.emsg('Data musi pochodzić z bieżącego miesiąca:\n%1.'@[date(KARTDROG.AR,KARTDROG.AM,1)$8]);
      _wyn:='D'
   ?}
?};
{? _wyn=''
|| {? SAMK.D>SAMK.DK
   || FUN.emsg('Data końcowa nie może być wcześniejsza niż data początkowa karty.'@);
      _wyn:='DK'
   ?}
?};
{? _wyn=''
|| {? SAMK.POJAZD().DK<>date(0,0,0)
   || {? SAMK.D>SAMK.POJAZD().DK | SAMK.DK>SAMK.POJAZD().DK
      || FUN.emsg('Daty karty nie mogą być późniejsze niż data kasacji pojazdu.'@);
         _wyn:='D'
      ?}
   ?}
?};
{? _wyn=''
|| SAMN.cntx_psh();
   SAMN.index('SAMN');
   SAMN.prefix(POJAZDY.ref());
   {? SAMN.first()
   || {? SAMN.OD>SAMK.D
      || FUN.emsg(
            'Data karty (%1) nie może być wcześniejsza\n'
            'od daty obowiązywania pierwszej normy paliwowej (%2).'@[$SAMK.D,$SAMN.OD]
         );
         _wyn:='D'
      ?}
   ?};
   SAMN.cntx_pop()
?};
{? _wyn=''
|| _ref:={? menu_pth()+1<>'D' || SAMK.ref() || null ?};
   _data:=SAMK.D;
   _datak:=SAMK.DK;
   SAMK.cntx_psh();
   SAMK.index('SAMOKR');
   SAMK.prefix(POJAZDY.ref(),KARTDROG.AR,KARTDROG.AM);
   _pokrywa:=0;
   {? SAMK.first()
   || {! |?
         {? SAMK.ref()<>_ref
         ||  _test1:=(_data>=SAMK.D & _data<=SAMK.DK) | (_datak>=SAMK.D & _datak<=SAMK.DK);
            _test2:=_data<=SAMK.D & _datak>=SAMK.D;
            _test3:=_data<=SAMK.DK & _datak>=SAMK.DK;
            {? _test1 | _test2 | _test3
            || _pokrywa:=1
            ?}
         ?};
         _pokrywa=0 & SAMK.next()
      !}
   ?};
   SAMK.cntx_pop();
   {? _pokrywa
   || {? ~FUN.ask(
            'Dla pojazdu wprowadzono już karty drogowe\n'
            'o datach pokrywajacych się z bieżącą. Kontynuować?'@
         )
      || _wyn:='D'
      ?}
   ?}
?};
{? _wyn=''
|| _data:=SAMK.D;
   SAMK.cntx_psh();
   SAMK.index('STATUS');
   SAMK.prefix(POJAZDY.ref(),'S');
   _wcz:=0;
   {? SAMK.first()
   || {! |?
         {? _data<SAMK.D || _wcz:=1 ?};
         _wcz=0 & SAMK.next()
      !}
   ?};
   SAMK.cntx_pop();
   {? _wcz
   || {? ~FUN.ask(
            'Data karty drogowej jest wcześniejsza niż data karty technicznej\n'
            '(zerowanie licznika). Kontynuować?'@
         )
      || _wyn:='D'
      ?}
   ?}
?};
{? _wyn=''
|| {? SAMK.SP<0
   || FUN.emsg('Stan początkowy nie może być mniejszy od zera.'@);
      _wyn:='SP'
   ?}
?};
{? _wyn=''
|| {? SAMK.SK<0
   || FUN.emsg('Stan końcowy nie może być mniejszy od zera.'@);
      _wyn:='SK'
   ?}
?};
{? _wyn=''
|| {? SAMK.PRZ<0
   || FUN.emsg('"Przejechano" nie może być mniejsze od zera.'@);
      _wyn:='PRZ'
   ?}
?};
{? _wyn=''
|| {? SAMK.WJM<0
   || FUN.emsg('"W tym jazda miejska" nie może być mniejsze od zera.'@);
      _wyn:='WJM'
   ?}
?};
{? _wyn=''
|| {? SAMK.PRZEL<0
   || FUN.emsg('"W tym z ładunkiem->Ogółem" nie może być mniejsze od zera.'@);
      _wyn:='PRZEL'
   ?}
?};
{? _wyn=''
|| {? SAMK.PRZELM<0
   || FUN.emsg('"W tym z ładunkiem->W mieście" nie może być mniejsze od zera.'@);
      _wyn:='PRZELM'
   ?}
?};
{? _wyn=''
|| {? SAMK.PRZEL2<0
   || FUN.emsg('"W tym z ładunkiem->Ogółem" (zbiornik dodatkowy)\n nie może być mniejsze od zera.'@);
      _wyn:='PRZEL2'
   ?}
?};
{? _wyn=''
|| {? SAMK.PRZELM2<0
   || FUN.emsg('"W tym z ładunkiem->W mieście" (zbiornik dodatkowy)\n nie może być mniejsze od zera.'@);
      _wyn:='PRZELM2'
   ?}
?};
{? _wyn=''
|| {? SAMK.PRZ<>(SAMK.SK-SAMK.SP)
   || FUN.emsg(
         'Liczba przejechanych kilometrów jest inna\n'
         'niż różnica stanu końcowego i początkowego licznika.'@
      );
      _wyn:='PRZ'
   ?}
?};
{? _wyn=''
|| {? SAMK.TO<0
   || FUN.emsg('"Przewóz w tonach" nie może być mniejsze od zera.'@);
      _wyn:='TO'
   ?}
?};
{? _wyn=''
|| {? SAMK.SPP<0
   || FUN.emsg('"Stan początkowy paliwa" nie może być mniejszy od zera.'@);
      _wyn:='SPP'
   ?}
?};
{? _wyn=''
|| {? SAMK.LPP<0
   || FUN.emsg('"Licznik paliwa początkowy" nie może być mniejszy od zera.'@);
      _wyn:='LPP'
   ?}
?};
{? _wyn=''
|| {? SAMK.LPP2<0
   || FUN.emsg('"Licznik paliwa początkowy" (zbiornik dodatkowy)\n nie może być mniejszy od zera.'@);
      _wyn:='LPP2'
   ?}
?};
{? _wyn=''
|| {? SAMK.LPK<0
   || FUN.emsg('"Licznik paliwa końcowy" nie może być mniejszy od zera.'@);
      _wyn:='LPK'
   ?}
?};
{? _wyn=''
|| {? SAMK.LPK2<0
   || FUN.emsg('"Licznik paliwa końcowy" (zbiornik dodatkowy)\n nie może być mniejszy od zera.'@);
      _wyn:='LPK2'
   ?}
?};
{? _wyn=''
|| {? SAMK.ILZM<0
   || FUN.emsg('"Ilość załadunków miejskich" nie może być mniejsza od zera.'@);
      _wyn:='ILZM'
   ?}
?};
{? _wyn=''
|| {? SAMK.ILZM2<0
   || FUN.emsg('"Ilość załadunków miejskich" (zbiornik dodatkowy)\n nie może być mniejsza od zera.'@);
      _wyn:='ILZM2'
   ?}
?};
{? _wyn=''
|| {? SAMK.ILZP<0
   || FUN.emsg('"Ilość załadunków pozamiejskich" nie może być mniejsza od zera.'@);
      _wyn:='ILZP'
   ?}
?};
{? _wyn=''
|| {? SAMK.ILZP2<0
   || FUN.emsg('"Ilość załadunków pozamiejskich (zbiornik dodatkowy)"\nnie może być mniejsza od zera.'@);
      _wyn:='ILZP2'
   ?}
?};
{? _wyn=''
|| {? SAMK.SK<SAMK.SP
   || FUN.emsg('Stan końcowy nie może być mniejszy od stanu początkowego.'@);
      _wyn:='SK'
   ?}
?};
{? _wyn=''
|| {? SAMK.PRZEL>SAMK.PRZ
   || FUN.emsg(
         'Pozycja "W tym z ładunkiem->Ogółem" nie może być większa\n'
         'od "Przejechano->Ogółem".'@
      );
      _wyn:='PRZEL'
   ?}
?};
{? _wyn=''
|| {? SAMK.WJM>SAMK.PRZ
   || FUN.emsg(
         'Pozycja "Przejechano->W mieście" nie może być większa\n'
         'od "Przejechano->Ogółem".'@
      );
      _wyn:='WJM'
   ?}
?};

{? _wyn=''
|| {? SAMK.PRZELM>SAMK.WJM
   || FUN.emsg(
         'Pozycja "W tym z ładunkiem->W mieście" nie może być większa\n'
         'od "Przejechano->W mieście".'@
      );
      _wyn:='PRZELM'
   ?}
?};
{? _wyn=''
|| {? SAMK.PRZEL2>SAMK.PRZ2
   || FUN.emsg(
         'Pozycja "W tym z ładunkiem->Ogółem" nie może być większa\n'
         'od "Przejechano->Ogółem" (zbiornik dodatkowy).'@
      );
      _wyn:='PRZEL2'
   ?}
?};
{? _wyn=''
|| {? SAMK.WJM2>SAMK.PRZ2
   || FUN.emsg(
         'Pozycja "Przejechano->W mieście" nie może być większa\n'
         'od "Przejechano->Ogółem" (zbiornik dodatkowy).'@
      );
      _wyn:='WJM2'
   ?}
?};

{? _wyn=''
|| {? SAMK.PRZELM2>SAMK.WJM2
   || FUN.emsg(
         'Pozycja "W tym z ładunkiem->W mieście" nie może być większa\n'
         'od "Przejechano->W mieście" (zbiornik dodatkowy).'@
      );
      _wyn:='PRZELM2'
   ?}
?};

{? _wyn=''
|| {? SAMK.MOTGD_P<0
   || FUN.emsg('Stan początkowy motogodzin nie może być mniejszy od zera.'@);
      _wyn:='MOTGD_P'
   ?}
?};
{? _wyn=''
|| {? SAMK.MOTGD_K<0
   || FUN.emsg('Stan końcowy motogodzin nie może być mniejszy od zera.'@);
      _wyn:='MOTGD_K'
   ?}
?};
{? _wyn=''
|| {? SAMK.MOTGD_K<SAMK.MOTGD_P
   || FUN.emsg('Stan końcowy motogodzin nie może być mniejszy od stanu początkowego.'@);
      _wyn:='MOTGD_K'
   ?}
?};

{? _wyn='' & _a=0
|| _sym_obl:=(SAMK.SYM=exec('bl_samk_sym','karty_drog'));
   SAMK.NR:=exec('poz_bl','karty_drog','SAMK','NR');
   {? _sym_obl
   || SAMK.SYM:=exec('bl_samk_sym','karty_drog')
   ?}
?};

_wyn


\add_kart_pojazd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: dodaje rekord w kartach drogowych
::   WE: POJAZDY.ref
::   WY: SAMK.ref dodanej karty drogowej
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
{? _>0
|| _poj:=_a;
   POJAZDY.cntx_psh();
   POJAZDY.f_clear();
   {? ~POJAZDY.seek(_poj)
   || _poj:=null
   ?};
   POJAZDY.cntx_pop()
|| _poj:=null
?};
{? _poj<>null
|| exec('samk_rf','karty_drog',_poj);
   _wyn:=exec('add_kart','karty_drog')
?};
_wyn


\add_kart
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: dodaje rekord w kartach drogowych
::   WY: SAMK.ref dodanej karty drogowej
::  OLD: \add_kart/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();

{? KARTDROG.OKR=''
|| FUN.emsg('Nie ustawiono aktywnego okresu w parametrach pracy.'@);
   return(_wyn)
?};

{? POJAZDY.DK<>date(0,0,0)
|| {? date(KARTDROG.AR,KARTDROG.AM,1)>POJAZDY.DK
   || FUN.emsg(
         'Obecny okres jest późniejszy od daty kasacji pojazdu.\n'
         'Nie można dodawać nowych kart drogowych.'@
      );
      return(_wyn)
   ?}
?};
{? POJAZDY.DPS>date(KARTDROG.AR,KARTDROG.AM,0)
|| FUN.emsg(
      'Obecny okres jest wcześniejszy od daty wprowadzenia pojazdu na stan.\n'
      'Nie można jeszcze dodawać kart drogowych.'@
   );
   return(_wyn)
?};
_test:=exec('test_norma','karty_drog');
{? _test=0
|| FUN.emsg(
      'Dla bieżącego pojazdu brak norm paliwowych.\n'
      'Nie można dodawać kart drogowych.'@
   );
   return(_wyn)
|? _test=-1
|| FUN.emsg(
      'Dla bieżącego pojazdu brak normy paliwowej\n'
      'obowiązującej w bieżącym okresie.\n'
      'Nie można dodawać kart drogowych.'@
   );
   return(_wyn)
?};
exec('samk_red','karty_drog');
SAMK.cntx_psh;
SAMK.index('OKD');
SAMK.prefix(KARTDROG.AR,KARTDROG.AM,POJAZDY.ref());
_licznik:=0;
_licz_mtg:=0;

{? SAMK.last()
|| _licznik:=SAMK.SK;
   _paliwo :=SAMK.SKP;
   _data   :=SAMK.DK;
   _paliwo2:=SAMK.SKP2;
   _pal_lic:=SAMK.LPK;
   _licz_mtg:=SAMK.MOTGD_K
||
:: jesli to pierwsza karta od momentu przyjecia do stan licznika z tabeli POJAZD
   SAMK.cntx_psh();
   SAMK.index('D');
   SAMK.prefix(POJAZDY.ref());
   {? SAMK.first()
   || _licznik:=KARTDROG.SK
   || _licznik:=POJAZDY.ST
   ?};
   SAMK.cntx_pop();
   _paliwo :=KARTDROG.SKP;
   _data   :=date(0,0,0);
   _paliwo2:=VAR.LIL;
   _pal_lic:=KARTDROG.LPAL
?};
SAMK.cntx_pop;
_nx:=SAMK.index('?');
_px:=SAMK.cur_prfx();
SAMK.index('OKR');
SAMK.prefix(KARTDROG.AR,KARTDROG.AM,POJAZDY.ref());
SAMK.blank();
SAMK.SP  :=_licznik;
SAMK.SPP :=_paliwo;
SAMK.SPP2:=_paliwo2;
SAMK.LPP :=_pal_lic;
{? _data<>date(0,0,0) || SAMK.D:=_data+1 ?};
SAMK.DK:=SAMK.D;
SAMK.POJAZD :=POJAZDY.ref();
SAMK.U_WSPZ:=KARTDROG.U_WSPZ;
SAMK.MOTGD_P:=_licz_mtg;
KARTDROG.PRZ:=SAMK.SK-SAMK.SP;
{? KARTDROG.PRZ<0 || KARTDROG.PRZ:=0 ?};
SAMK.hdr_edit();
SAMK.hdr_edit(': '+POJAZDY.NAZ + ' ['+POJAZDY.NRREJ+']');
SAMK.SAMN:=exec('ust_norma','karty_drog',SAMK.D);
NORMA.RJ_TXT:={? SAMK.SAMN().RJ='K' || 'km' |? SAMK.SAMN().RJ='M' || 'mth' |? SAMK.SAMN().RJ='H' || 'h' || '' ?};
NORMA.RODZPAL:=SAMK.SAMN().RODZPAL;
{? POJAZDY.ND='T'
|| NORMA.RJ2_TXT:={? SAMK.SAMN().RJ2='K' || 'km' |? SAMK.SAMN().RJ2='M' || 'mth' |? SAMK.SAMN().RJ2='H' || 'h' || '' ?};
   NORMA.RODZPAL2:=SAMK.SAMN().RODZPAL2
?};
exec('samk_edit_lad_ustaw', 'karty_drog');
{? SAMK.edit("exec('chk_samk','karty_drog')")
|| {? SAMK.add()
   || _ref:=SAMK.ref();
      exec('obl_przepal','karty_drog');
      {? KARTDROG.DOD_AUTO='T'
      || exec('samk_dod','karty_drog');
         SAMK.seek(_ref)
      ?};
      {? KARTDROG.PAL_AUTO='T'
      || exec('samk_pal','karty_drog');
         SAMK.seek(_ref)
      ?};
      {? KARTDROG.PRA_AUTO='T'
      || exec('samk_pra','karty_drog');
         SAMK.seek(_ref)
      ?};
      {? KARTDROG.TRA_AUTO='T'
      || exec('samk_trasy','karty_drog');
         SAMK.seek(_ref)
      ?};
      {? KARTDROG.KOS_AUTO='T'
      || exec('kosz_kar','karty_drog');
         SAMK.seek(_ref)
      ?};
      {? KARTDROG.ODP_AUTO='T'
      || {? exec('luo_view','odpady')
         || exec('samk_sambr','karty_drog');
            SAMK.seek(_ref)
         ?}
      ?};
      _wyn:=_ref
   ?}
?};
SAMK.index(_nx);
($('SAMK.prefix('+_px+')'))();
SAMK.hdr_edit();

_wyn


\ed_kart
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: edytuje rekord w kartach drogowych
::  OLD: \ed_kart/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? SAMK.STATUS='S'
|| FUN.info('Kart specjalnych (wymiana licznika) nie można poprawiać.'@);
   return(_wyn)
?};
{? SAMK.r_lock(1,1)
|| NORMA.RJ_TXT:={? SAMK.SAMN().RJ='K' || 'km' |? SAMK.SAMN().RJ='M' || 'mth' |? SAMK.SAMN().RJ='H' || 'h' ?};
   NORMA.RODZPAL:=SAMK.SAMN().RODZPAL;
   {? SAMK.ND='T'
   || SAMK.win_edit('RED_D1');
      NORMA.RJ2_TXT:={? SAMK.SAMN().RJ2='K' || 'km' |? SAMK.SAMN().RJ2='M' || 'mth' |? SAMK.SAMN().RJ2='H' || 'h' ?};
      NORMA.RODZPAL2:=SAMK.SAMN().RODZPAL2
   || SAMK.win_edit('RED1')
   ?};
   SAMK.hdr_edit();
   SAMK.hdr_edit(': '+POJAZDY.NAZ + ' ['+POJAZDY.NRREJ+']');
   KARTDROG.PRZ:=SAMK.SK-SAMK.SP;
   {? KARTDROG.PRZ<0
   || KARTDROG.PRZ:=0
   ?};
   exec('samk_edit_lad_ustaw', 'karty_drog');
   {? SAMK.edit("exec('chk_samk','karty_drog',1)")
   || SAMK.SAMN:=exec('ust_norma','karty_drog', SAMK.D);
      SAMK.put();
      exec('obl_przepal','karty_drog');
      _wyn:=1
   ?};
   SAMK.r_unlock();
   SAMK.hdr_edit()
|| SAMK.r_unlock();
   FUN.info('Wskazana karta jest modyfikowana przez innego użytkownika.'@)
?};
_wyn


\del_kart
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: kasuje rekord z kart drogowych
::  OLD: \del_kart/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? SAMK.r_lock(1,1,1)
|| {? SAMK.count()>0
   || {? exec('luo_view','odpady')
      || _pyt:=
            'Usunąć kartę wraz z powiązaniami\n'
            '(paliwo, pracownicy, trasy, dodatki, koszty, transportowane odpady)?'@
      || _pyt:=
            'Usunąć kartę wraz z powiązaniami\n'
            '(paliwo, pracownicy, trasy, dodatki, koszty)?'@
      ?};
      {? FUN.ask(_pyt)
      || do();
         SAMP.index('SAMK');
         SAMP.prefix(SAMK.ref());
         {? SAMP.first()
         || {!
            |? SAMP.del()
            !}
         ?};
         P_KAP.index('SAMK');
         P_KAP.prefix(SAMK.ref());
         {? P_KAP.first()
         || {!
            |? P_KAP.del()
            !}
         ?};
         SAMDOD.index('SAMK');
         SAMDOD.prefix(SAMK.ref());
         {? SAMDOD.first()
         || {!
            |? SAMDOD.del()
            !}
         ?};
         SAMKOSZ.index('SAMK');
         SAMKOSZ.prefix(SAMK.ref());
         {? SAMKOSZ.first()
         || {!
            |? SAMKOSZ.del()
            !}
         ?};
         SAMK_TRA.index('SAMK_TRA');
         SAMK_TRA.prefix(SAMK.ref());
         {? SAMK_TRA.first()
         || {!
            |? SAMK_TRA.del()
            !}
         ?};
         SAMBR.index('SAMK');
         SAMBR.prefix(SAMK.ref());
         {? SAMBR.first()
         || {!
            |? SAMBR.del()
            !}
         ?};
         _wyn:=SAMK.del();
         end()
      ?}
   || {? FUN.ask('Usunąć kartę?'@)
      || _wyn:=SAMK.del(1)
      ?}
   ?};
   SAMK.r_unlock()
|| SAMK.r_unlock();
   FUN.info('Wskazana karta jest modyfikowana przez innego użytkownika.'@)
?};
_wyn


\samk_druk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Druk karty drogowej
::  OLD: \samk_druk/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.sel_size()=0
|| exec('tmp_samk_ini','karty_drog');
   exec('tmp_samk_add','karty_drog');
   exec('rep_exec','#b_report','','karta_dr','Karta drogowa',2,,,,,,'W');
   VAR_DEL.delete('__SAMK')
|| exec('tmp_samk_add','karty_drog')
?}


\tmp_samk_ini
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula tworzy tabele tymczasowa __SAMK
::  OLD: \tmp_samk_ini/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__SAMK');
__SAMK:=tab_tmp(1,'NAZ','STRING[60]','Nazwa',
                  'SYM','STRING[10]','Symbol',
                  'NRREJ','STRING[10]','Nr rejestracyjny',
                  'D','DATE','Data początkowa',
                  'DK','DATE','Data końcowa',
                  'SP','REAL','Stan licznika pocz.',
                  'SK','REAL','Stan licznika końcowy',
                  'GP','REAL','Godzin pracy',
                  'Z_NORMA','REAL','Wg normy',
                  'Z_RZECZ','REAL','Rzeczywiste',
                  'ZU_KART','REAL','Wynik',
                  'PO','STRING[20]','Przepał',
                  'STATUS','STRING[1]','Status',
                  'DATA_AKC','DATE','Data akceptacji',
                  'REF','INTEGER','Ref',
                  'OPIS','STRING[200]','Opis')


\tmp_samk_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula dodaje dane karty drogowej do tabeli tymczasowej
::  OLD: \tmp_samk_add/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
__SAMK.blank();
__SAMK.REF:=#SAMK.ref();
__SAMK.NAZ:=SAMK.POJAZD().NAZ;
__SAMK.SYM:=SAMK.SYM;
__SAMK.NRREJ:=SAMK.POJAZD().NRREJ;
__SAMK.D:=SAMK.D;
__SAMK.DK:=SAMK.DK;
__SAMK.SP:=SAMK.SP;
__SAMK.SK:=SAMK.SK;
__SAMK.GP:=SAMK.GP;
__SAMK.Z_NORMA:=SAMK.Z_NORMA;
__SAMK.Z_RZECZ:=SAMK.Z_RZECZ;
__SAMK.ZU_KART:=SAMK.ZU_KART;
__SAMK.PO:=SAMK.PO;
__SAMK.STATUS:=SAMK.STATUS;
__SAMK.DATA_AKC:=SAMK.DATA_AKC;
__SAMK.OPIS:=SAMK.INFO;
__SAMK.add()


\b_grp_samk_druk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Przed akcja grupowa Wydruk dla tabeli kart drogowych (SAMK)
::  OLD: \b_grp_samk_druk/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
exec('tmp_samk_ini','karty_drog')


\a_grp_samk_druk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Po akcji grupowej Wydruk dla tabeli kart drogowych (SAMK)
::  OLD: \a_grp_samk_druk/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rep_exec','#b_report','','karta_dr','Karta drogowa',2,,,,,,'W');
VAR_DEL.delete('__SAMK')


\samk_wys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula wyswietla dane karty drogowej
::  OLD: \samk_wys/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.STATUS='S'
|| SAMK.win_edit('LICZNIK')
|| NORMA.RJ_TXT:={? SAMK.SAMN().RJ='K' || 'km' |? SAMK.SAMN().RJ='M' || 'mth' |? SAMK.SAMN().RJ='H' || 'h' ?};
   NORMA.RODZPAL:=SAMK.SAMN().RODZPAL;
   {? SAMK.ND='T'
   || SAMK.win_edit('RED_D1');
      NORMA.RJ2_TXT:={? SAMK.SAMN().RJ2='K' || 'km' |? SAMK.SAMN().RJ2='M' || 'mth' |? SAMK.SAMN().RJ2='H' || 'h' ?};
      NORMA.RODZPAL2:=SAMK.SAMN().RODZPAL2
   || SAMK.win_edit('RED1')
   ?}
?};
KARTDROG.PRZ:=SAMK.SK-SAMK.SP;
exec('samk_edit_lad_ustaw', 'karty_drog');
SAMK.hdr_edit();
SAMK.hdr_edit(': '+SAMK.POJAZD().NAZ + ' ['+SAMK.POJAZD().NRREJ+']');
SAMK.display();
SAMK.hdr_edit()


\samk_rf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009]
:: OPIS: Odswiezanie tabeli SAMK w oknie grupowym
::   WE: _a - ref pojazdu
::  OLD: \samk_rf/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>0 || _ref:=_a || _ref:=null ?};
exec('samk_red','karty_drog');

SAMK.index('OKD');
{? KARTDROG.AM=1
|| SAMK.prefix(KARTDROG.AR-1,12,_ref)
|| SAMK.prefix(KARTDROG.AR,KARTDROG.AM-1,_ref)
?};
_licznik:=0;
_paliwo :=0;
_licz_pl:=0;
_paliw2:=0;
{? SAMK.last()
|| _licznik:=SAMK.SK;
   _paliwo :=SAMK.SKP;
   _licz_pl:=SAMK.LPK;
   _paliw2:=SAMK.SKP2
:: poszukaj wczesniejszych
|| SAMK.cntx_psh();
   SAMK.index('D');
   SAMK.prefix(_ref);
   {? SAMK.find_le(date(KARTDROG.AR,KARTDROG.AM,1))
   || _licznik:=SAMK.SK;
      _paliwo :=SAMK.SKP;
      _licz_pl:=SAMK.LPK;
      _paliw2:=SAMK.SKP2
   ?};
   SAMK.cntx_pop()
?};
KARTDROG.SK :=_licznik;
KARTDROG.SKP:=_paliwo;
KARTDROG.LPAL:=_licz_pl;
:: Przechowujemy w zmiennej również wartości dla licznika dodatkowego
:: VAR.LIL - stan licznika koncowy
VAR.LIL:=_paliw2;

SAMK.prefix(KARTDROG.AR,KARTDROG.AM,_ref);

{? POJAZDY.size()>0 & POJAZDY.ref()<>_ref
|| POJAZDY.seek(_ref)
?};
{? POJAZDY.size()=0 | POJAZDY.A<>'T'
|| SAMK.actions('WER','DPUAWM:DM',,1)
|| SAMK.actions('WER',,,1)
?};
{? POJAZDY.size()>0
|| {? POJAZDY.A='T'
   || POJAZDY.actions_grayed('WER_K','A')
   || POJAZDY.actions_grayed('WER_K','Z')
   ?}
?};
~~


\samk_show
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009]
:: OPIS: Wyswietlenie kart
::  OLD: \samk_show/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? POJAZDY.size()>0 || _ref:=POJAZDY.ref() || _ref:=null ?};
exec('samk_rf','karty_drog',_ref);
{? SAMK.size()=0
|| SAMK.blank();
   KARTDROG.PALN:=0;
   KARTDROG.PAL:=0;
   KARTDROG.PO:=''
?};
grp_disp(SAMK, 'WER');
grp_edisp(SAMK,'INFO')


\ae_samp_pal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: po edycja pola paliwo
::   WY: czy mozna redagowac pole
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? fld<>0
|| SAMP.C:=SAMP.RODZPAL().AC;
   SAMP.W:=(SAMP.IL * SAMP.C)$2
?};
_wyn


\ae_samp_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: po polu ilosc dla paliwa
::   WY: czy opuscic redakcje
::  OLD: \ae_samp_il/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
SAMP.W:=(SAMP.IL * SAMP.C)$2;
_wyn


\be_samp_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: przed edycja pola cena dla paliwa
::   WY: czy mozna redagowac pole
::  OLD: \be_samp_c/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? fld=0
||
   SAMP.C:=SAMP.RODZPAL().AC
?};
_wyn


\ae_samp_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: po polu cena dla paliwa
::   WY: czy opuscic redakcje
::  OLD: \ae_samp_c/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
SAMP.W:=(SAMP.IL * SAMP.C)$2;
_wyn


\be_samp_licz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed redakcja SAMP.STANLICZ
::  OLD: \be_samp_licz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
1


\ae_samp_licz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula po redakcji SAMP.STANLICZ
::  OLD: \ae_samp_licz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
1


\samp_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdzanie tankowania zbornika po redakcji pola
::  OLD: \samp_r/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld<>'P' & fld<>'D'
|| FUN.emsg('Dozwolone wartości:\nP - zbiornik Podstawowy, D - zbiornik Dodatkowy'@);
   0
|| 1
?}


\samp_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdzanie wypelnienia na rekord dla paliwa samochodow
::   WY: czy wypelniono pole
::  OLD: \samp_chk/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(SAMP,,'SAMK','RODZPAL','IL');
{? _wyn='' & SAMP.IL <0
||
   FUN.emsg('Ilość paliwa nie może być ujemna.'@,ST.MAG);
   _wyn:='IL'
?};
_wyn


\chk_samp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Sprawdzanie rodzaju paliwa oraz przeliczen w tabeli SAMP
::  OLD: \chk_samp/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=exec('samp_chk','karty_drog');
{? _wyn<>''
|| return(_wyn)
?};
RODZPAL.cntx_psh();
_pal:=#SAMP.SAMK().SAMN().RODZPAL;
_pal_naz:=SAMP.SAMK().SAMN().RODZPAL().KOD;
_pal2:=#SAMP.SAMK().SAMN().RODZPAL2;
_pal_naz2:=SAMP.SAMK().SAMN().RODZPAL2().KOD;
RODZPAL.cntx_pop();
{? SAMP.IL=0
|| _wyn:='IL';
   FUN.emsg('Nie podano ilości litrów.'@)
?};
{? _wyn=''
|| {? SAMP.RODZ='P' & SAMP.IL>SAMP.SAMK().SAMN().POJB
   || {? ~FUN.ask(
            'Podana ilość paliwa przekracza\npojemność zbiornika podstawowego (%1).\n'
            'Zaakceptować?'@[$SAMP.SAMK().SAMN().POJB]
         )
      || _wyn:='IL'
      ?}
   |? SAMP.RODZ='D' & SAMP.IL>SAMP.SAMK().SAMN().POJBD
   || {? ~FUN.ask(
            'Podana ilość paliwa przekracza\npojemność zbiornika dodatkowego (%1).\n'
            'Zaakceptować?'@[$SAMP.SAMK().SAMN().POJBD]
         )
      || _wyn:='IL'
      ?}
   ?}
?};
{? _wyn='' & SAMP.SAMK().POJAZD().ND='T'
|| {? SAMP.RODZ='P' & SAMP.SAMK().POJAZD().ND='T'
   || {? #SAMP.RODZPAL<>_pal
      || {? ~FUN.ask('Nieprawidłowy rodzaj paliwa\ndla zbiornika podstawowego\n\nRodzaj paliwa w normach - %1'@[_pal_naz])
         || _wyn:='RODZPAL'
         ?}
      ?}
   || {? #SAMP.RODZPAL<>_pal2
      || {? ~FUN.ask('Nieprawidłowy rodzaj paliwa\ndla zbiornika dodatkowego\n\nRodzaj paliwa w normach - %1'@[_pal_naz2])
         || _wyn:='RODZPAL2'
         ?}
      ?}
   ?}
?};
{? SAMP.IL<>0 & SAMP.C<>0 || SAMP.W:=(SAMP.IL * SAMP.C)$2 ?};
{? _wyn='' & SAMP.IL<0
|| FUN.emsg('Ilość paliwa nie może być mniejsza od zera.'@);
   _wyn:='IL'
?};
{? _wyn='' & SAMP.C<0
|| FUN.emsg('Cena paliwa nie może być mniejsza od zera.'@);
   _wyn:='C'
?};
_wyn


\samp_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Sprawdzanie rodzaju paliwa po edycji paliwa do karty drogowej oraz przeliczen
::   WE: _a - 1 - add, 0 lub brak put
::  OLD: \samp_red/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1
|| {? type_of(_a)<>1 || _a:=0 ?}
|| _a:=0
?};
{? _a  || SAMP.blank() ?};
{? SAMP.edit("exec('chk_samp','karty_drog')")
|| {? _a || SAMP.add() || SAMP.put() ?}
?};
''


\rp_samk_tra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula na rekord przed dla tabeli SAMK_TRA
::  OLD: \rp_samk_tra/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
~~


\chk_samk_tra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula weryfikujaca poprawnosc wypelnienia rekordu tabeli SAMK_TRA
::   WE:
::   WY: pusty string lub akronim blednie wypelnionego pola
::  OLD: \chk_samk_tra/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(SAMK_TRA,,'SAMK','SAMTRAS')


\chk_trasa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula weryfikujaca poprawnosc rekordu tabeli SAMTRASA
::   WY: '' - ok, akronim pola - blad podczas wypelniania
::  OLD: \chk_trasa/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wy:=__CHK.record(SAMTRASA,,'OPIS','ODL');
{? _wy=''
|| {? SAMTRASA.ODL<=0
   || FUN.emsg('Odległość nie została podana lub jest niepoprawna.'@);
      _wy:='ODL'
   ?}
?};
_wy


\bf_usu_tras
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Przed usunieciem trasy przejazdu ze slownika tras
::   WY: 1 - mozna usunac, 0 - nie
::  OLD: \bf_usu_tras/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMTRASA.count()=0
|| 1
|| FUN.info('Wskazana trasa jest wykorzystywana\nw systemie i nie można jej usunąć.'@);
   0
?}


\bl_kier
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula na blank dla pola P_KAP.OSOBA (Kierowca)
::  OLD: \bl_kier/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? POJAZDY.KIEROWCA<>null
|| POJAZDY.KIEROWCA
|| null
?}


\bl_p_kap_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula na wartosc poczatkowa dla pola P_KAP.IL
::  OLD: \bl_p_kap_il/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? P_KAP.size()=0 || P_KAP.SAMK().GP || 0 ?}


\bl_p_kap_il_t
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: Formula na wartosc poczatkowa dla pola P_KAP.IL_T
::----------------------------------------------------------------------------------------------------------------------
{? P_KAP.size()=0 || exec('float2time','#convert',P_KAP.SAMK().GP) || time(0,0,0) ?}


\ae_p_kap_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula po redakcji pola P_KAP.TYP
::  OLD: \ae_p_kap_typ/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld<>'T' & fld<>'N' & (-(6+menu_txt()))<>'szukaj'
|| FUN.info('Dozwolone wartości to >T< i >N<'@);0
|| {? P_KAP.TYP='N' || P_KAP.PRZEBIEG:=0 ?};
   1
?}


\be_p_kap_przebi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed redakcja pola P_KAP.PRZEBIEG
::   WY: 1 - mozna edytowac pole, 0 - nie mozna
::  OLD: \be_p_kap_przebi/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? P_KAP.TYP='T' || 1 || 0 ?}


\p_kap_suma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Suma przebiegow dla kart drogowych
::  OLD: \p_kap_suma/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
KARTDROG.PKAPSUMA:=0;
P_KAP.cntx_psh();
{? P_KAP.first()
|| {! |?
      {? P_KAP.TYP='T' || KARTDROG.PKAPSUMA+=P_KAP.PRZEBIEG ?};
      P_KAP.next()
   !}
?};
P_KAP.cntx_pop();
1


\chk_pkap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdzanie wypelnienia na rekord dla pracownikow do karty drogowej
::   WY: czy wypelniono pole
::  OLD: \chk_pkap/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(P_KAP,,'TYP','OSOBA','IL');
{? _wyn=''
|| {? P_KAP.IL<0  || _wyn:='IL'
   |? P_KAP.N50<0 || _wyn:='N50'
   |? P_KAP.N100<0|| _wyn:='N100'
   |? P_KAP.GN<0  || _wyn:='GN'
   ?};
   {? _wyn<>'' || FUN.emsg('Ilość nie może być ujemna.'@) ?}
?};
{? _wyn=''
|| {? P_KAP.N50>P_KAP.IL
   || FUN.emsg('Wartość w polu <W tym: 50%%> nie może być większa od liczby godzin ogółem.'@);
      _wyn:='N50'
   ?}
?};
{? _wyn=''
|| {? P_KAP.N100>P_KAP.IL
   || FUN.emsg('Wartość w polu <W tym: 100%%> nie może być większa od liczby godzin ogółem.'@);
      _wyn:='N100'
   ?}
?};
{? _wyn=''
|| {? P_KAP.GN>P_KAP.IL
   || FUN.emsg('Wartość w polu <W tym: nocne> nie może być większa od liczby godzin ogółem.'@);
      _wyn:='GN'
   ?}
?};
{? _wyn=''
|| {? (P_KAP.N50+P_KAP.N100+P_KAP.GN)>P_KAP.IL
   || FUN.emsg('Suma wartości pól <W tym: 50%%>, <W tym: 100%%> i <W tym: nocne>\n'@
              +'nie może być większa od liczby godzin ogółem.'@);
      _wyn:='N50'
   ?}
?};
_wyn


\be_m_sdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009]
:: OPIS: Formula przed redakcja pola SAMDOD.M
::  OLD: \be_m_sdo/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
1


\ae_m_sdod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: formula po polu M dla dodatkow do karty drogowej
::   WY: czy mozliwe opuszczenie redakcji pola
::  OLD: \ae_m_sdod/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMDOD.NAZ:=M.N;
{? SAMDOD.M<>null()
|| SAMDOD.JM:=SAMDOD.M().J
?};
1


\chk_samdod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdzanie wypelnienia na rekord dla dodatkow do karty drogowej
::   WY: czy wypelniono pole
::  OLD: \chk_samdod/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(SAMDOD,,'M');
{? _wyn='' & SAMDOD.IL<=0
|| FUN.info('Należy podać ilość większą od zera.'@);
   _wyn:='IL'
?};
{? _wyn='' & SAMDOD.WAR<=0
|| FUN.info('Należy podać wartość większą od zera.'@);
   _wyn:='WAR'
?};
_wyn


\be_samn_lad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed redagowaniem pol zwiazanych z ladunkiem i przejazdami z ladunkiem w oknach norm paliwowoych
::  OLD: \be_samn_lad/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMN.POJAZD().LAD='T' || 1 || 0 ?}


\bs_samn_lad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wyswietleniem pol zwiazanych z ladunkiem i przejazdami z ladunkiem w oknach norm paliwowych
::   WY: Kod koloru dla pola nieredagowalnego lub pusty string
::  OLD: \bs_samn_lad/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMN.POJAZD().LAD='T' || '' || exec('findfnrd','color') ?}


\ae_samn_rj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formuła po redakcji pola SAMN.RJ
::  OLD: \ae_samn_rj/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMN.RJ='H' || SAMN.NA:=1 ?};
1


\ae_samn_rj2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formuła po redakcji pola SAMN.RJ2
::  OLD: \ae_samn_rj2/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMN.RJ2='H' || SAMN.NA2:=1 ?};
1


\be_norm2100
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Przed redakcja pola SAMN.NORM2100
::  OLD: \be_norm2100/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMN.POJAZD().POJTYPY<>null & SAMN.POJAZD().POJTYPY().NAZWA='OSOBOWY'
|| 0
|| 1
?}


\test_samkz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula sprawdza czy istnieja powiazane z norma zatwierdzone karty drogowe
::   WE: [_a] - SAMN.ref(), jesli nie podano to dla biezacego rekordu tabeli SAMN.
::   WY: 1 - sa karty, 0 - nie ma kart
::  OLD: \test_samkz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=0 || _a:=SAMN.ref() ?};
SAMK.cntx_psh();
SAMK.index('SAMN2');
SAMK.prefix(_a,'T');
{? SAMK.first() || _wy:=1 || _wy:=0 ?};
SAMK.cntx_pop();
_wy


\test_samk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula sprawdza czy istnieja powiazane z norma niezatwierdzone karty drogowe
::   WE: [_a] - SAMN.ref(), jesli nie podano to dla biezacego rekordu tabeli SAMN.
::   WY: 1 - sa karty, 0 - nie ma kart
::  OLD: \test_samk/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=0 || _a:=SAMN.ref() ?};
SAMK.cntx_psh();
SAMK.index('SAMN2');
SAMK.prefix(_a);
{? SAMK.first() || _wy:=1 || _wy:=0 ?};
SAMK.cntx_pop();
_wy


\chk_samn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Weryfikacja po oknie redagowania normy
::   WE: _a = 'D' przy Dolacz, _a = 'P' przy Popraw
::   WY: '' - jesli ok, akronim pola w przypadku bledu
::  OLD: \chk_samn/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:='';
{? SAMN.OD=date(0,0,0)
|| FUN.info('Data obowiązywania musi być określona.'@);
   _fld:='OD'
?};
{? _fld=''
|| {? SAMN.RODZPAL=null
   || FUN.info('Należy wskazać rodzaj paliwa dla zbiornika podstawowego.'@);
      _fld:='RODZPAL'
   ?}
?};
{? _fld=''
|| SAMN.cntx_psh();
   {? _a='P' || _ref:=SAMN.ref() || _ref:=null() ?};
   _do:=SAMN.OD;
   SAMN.index('SAMN');
   SAMN.prefix(POJAZDY.ref());
   {? SAMN.last()
   || {? SAMN.OD>=_do & (_a='D' | (_a='P' & _ref<>SAMN.ref()))
      || FUN.info('W systemie istnieje już norma obowiązująca\nod podanej lub późniejszej daty.'@);
         _fld:='OD'
      ?}
   ?};
   SAMN.cntx_pop()
?};
{? _fld='' & SAMN.POJB<=0
|| FUN.info('Pole: Pojemność (zbiornika podstawowego).\nNależy podać wartość większą od zera.'@);
   _fld:='POJB'
?};
{? _fld='' & SAMN.NORM<0
|| FUN.info('Pole: Norma miejska.\nNależy podać wartość większą lub równą zero.'@);
   _fld:='NORM'
?};
{? _fld='' & SAMN.NORMZ<0
|| FUN.info('Pole: Norma miejska na załadunek.\nNależy podać wartość większą lub równą zero.'@);
   _fld:='NORMZ'
?};
{? _fld='' & SAMN.NORP<0
|| FUN.info('Pole: Norma pozamiejska.\nNależy podać wartość większą lub równą zero.'@);
   _fld:='NORP'
?};
{? _fld='' & SAMN.NORPZ<0
|| FUN.info('Pole: Norma pozamiejska na załadunek.\nNależy podać wartość większą lub równą zero.'@);
   _fld:='NORPZ'
?};
{? _fld='' & SAMN.DODP<0
|| FUN.info('Pole: Dodatkowo do karty.\nNależy podać wartość większą lub równą zero.'@);
   _fld:='DODP'
?};
{? _fld='' & SAMN.POJBD<0
|| FUN.info('Pole: Pojemność (zbiornika dodatkowego).\nNależy podać wartość większą lub równą zero.'@);
   _fld:='POJBD'
?};
{? _fld='' & SAMN.NORM2<0
|| FUN.info('Pole: Norma miejska (dla zbiornika dodatkowego).\nNależy podać wartość większą lub równą zero.'@);
   _fld:='NORM2'
?};
{? _fld='' & SAMN.NORMZ2<0
|| FUN.info('Pole: Norma miejska na załadunek (dla zbiornika dodatkowego).\nNależy podać wartość większą lub równą zero.'@);
   _fld:='NORMZ2'
?};
{? _fld='' & SAMN.NORP2<0
|| FUN.info('Pole: Norma pozamiejska (dla zbiornika dodatkowego).\nNależy podać wartość większą lub równą zero.'@);
   _fld:='NORP2'
?};
{? _fld='' & SAMN.NORPZ2<0
|| FUN.info('Pole: Norma pozamiejska na załadunek (dla zbiornika dodatkowego).\nNależy podać wartość większą lub równą zero.'@);
   _fld:='NORPZ2'
?};
{? _fld='' & SAMN.DODD<0
|| FUN.info('Pole: Dodatkowo do karty (dla zbiornika dodatkowego).\nNależy podać wartość większą lub równą zero.'@);
   _fld:='DODD'
?};
{? _fld='' & SAMN.WSPZ<1
|| FUN.info('Pole: Współczynnik zimowy.\nNależy podać wartość większą lub równą 1.'@);
   _fld:='WSPZ'
?};
{? _fld='' & SAMN.WSPZ2<1
|| FUN.info('Pole: Współczynnik zimowy (dla zbiornika dodatkowego).\nNależy podać wartość większą lub równą 1.'@);
   _fld:='WSPZ2'
?};
{? _fld=''
|| {? SAMN.NORM=0 & SAMN.NORP=0
   || FUN.info(
         'Nie podano wartości dla podstawowych norm: miejskiej oraz pozamiejskiej.\n'
         'Należy podać przynajmniej jedną z nich.'@
      );
      _fld:='NORM'
   ?}
?};
_fld


\samn_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Dodawanie normy paliwowej
::  OLD: \samn_add/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? POJAZDY.DK<>date(0,0,0)
|| FUN.info('Pojazd został skasowany.\nDodawanie norm paliwowych nie jest możliwe.'@);
   return(0)
?};
{? POJAZDY.A='N'
|| FUN.info('Pojazd jest nieaktywny.\nDodawanie norm paliwowych nie jest możliwe.'@);
   return(0)
?};
{? POJAZDY.ND='N' || SAMN.win_edit('RED')
|? POJAZDY.ND='T' || SAMN.win_edit('REDD')
?};
{? SAMN.size()=0
|| SAMN.blank()
|| SAMN.last();
   SAMN.OD:=date(0,0,0)
?};
SAMN.hdr_edit();
SAMN.hdr_edit(' dla: '+POJAZDY.NAZ + ' ['+POJAZDY.NRREJ+']');
{? SAMN.edit("exec('chk_samn','karty_drog','D')")
||
:: Pole RJ2 nie moze byc puste nawet przy jednym zbiorniku
   {? SAMN.RJ2='' || SAMN.RJ2:='K' ?};
   SAMN.add()
?};
SAMN.hdr_edit()


\samn_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Poprawianie normy paliwowej
::  OLD: \samn_pop/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? POJAZDY.DK<>date(0,0,0)
|| FUN.info('Pojazd został skasowany. Edycja normy niemożliwa.'@);
   return(0)
?};
{? exec('test_samkz','karty_drog')
|| FUN.emsg(
      'Istnieją zaakceptowane karty drogowe powiązane z bieżącą normą.\n'
      'Edycja normy niemożliwa.'@
   );
   return(0)
?};
{? exec('test_samk','karty_drog')
|| {? ~FUN.ask(
         'Istnieją niezaakceptowane karty drogowe powiązane z bieżącą normą.\n'
         'Modyfikacja normy wymusi przeliczenie wszystkich kart. Kontynuować?'@
      )
   || return(0)
   ?}
?};
{? SAMN.ND='N' || SAMN.win_edit('RED')
|? SAMN.ND='T' || SAMN.win_edit('REDD')
?};
{? SAMN.r_lock(1,1)
|| SAMN.hdr_edit();
   SAMN.hdr_edit(' dla: '+POJAZDY.NAZ + ' ['+POJAZDY.NRREJ+']');
   {? POJAZDY.A='T'
   || {? SAMN.edit("exec('chk_samn','karty_drog','P')")
      || SAMN.put();
         SAMK.cntx_psh();
         SAMK.index('SAMN');
         SAMK.prefix(POJAZDY.ref(),SAMN.ref());
         {? SAMK.first()
         || FUN.info('W wyniku modyfikacji normy zostanie przeliczonych: %1 kart drogowych.'@[$SAMK.size()]);
            {! |?
                exec('obl_przepal','karty_drog');
                SAMK.next()
            !}
         ?};
         SAMK.cntx_pop()
      ?}
   || {? FUN.ask('Pojazd jest nieaktywny. Wyświetlić normę (bez edycji)?'@)
      || SAMN.display()
      ?}
   ?};
   SAMN.hdr_edit();
   SAMN.r_unlock()
|| FUN.info('Norma jest obsługiwana przez innego operatora.'@)
?}


\samn_usu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Usuwanie normy paliwowej
::  OLD: \samn_usu/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? POJAZDY.DK<>date(0,0,0)
|| FUN.info('Pojazd został skasowany.\nUsuwanie norm paliwowych nie jest możliwe.'@);
   return(0)
?};
{? POJAZDY.A='N'
|| FUN.info('Pojazd jest nieaktywny.'@)
|| {? SAMN.r_lock(1,1)
   || {? SAMN.count()=0
      || {? FUN.ask('Usunąć wskazaną normę paliwową?'@)
         || SAMN.r_unlock();
            SAMN.del()
         || SAMN.r_unlock()
         ?}
      || SAMN.r_unlock();
         FUN.emsg('Wskazana norma paliwowa jest wykorzystywana w systemie\ni nie można jej usunąć.'@)
      ?}
   || FUN.info('Norma jest obsługiwana przez innego operatora.'@)
   ?}
?}


\samn_wys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula na Wyswietl dla tabeli SAMN
::  OLD: \samn_wys/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SAMN.ND='N' || SAMN.win_edit('RED')
|? SAMN.ND='T' || SAMN.win_edit('REDD')
?};
SAMN.display()


\sam_pali
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Wyswietlenie listy norm paliwowych dla biezacego pojazdu
::  OLD: \sam_pali/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMN.index('SAMN');
SAMN.prefix(POJAZDY.ref());
SAMN.win_sel('WER');
{? POJAZDY.ND='N' || SAMN.win_edit('RED')
|? POJAZDY.ND='T' || SAMN.win_edit('REDD')
?};
SAMN.fld_fml('NORM2100','BEFORE_DISPLAY',"exec('bs_samn_lad','karty_drog')");
SAMN.fld_fml('NORM2100','BEFORE_EDIT'   ,"exec('be_samn_lad','karty_drog')");
SAMN.fld_fml('NORPZ2'  ,'BEFORE_DISPLAY',"exec('bs_samn_lad','karty_drog')");
SAMN.hdr_sel();
SAMN.hdr_sel(' dla: '@+POJAZDY.NAZ + ' ['+POJAZDY.NRREJ+']');
SAMN.select();
SAMN.hdr_sel()


\stan_licznika
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula wyswietla stan licznika i przebieg samochodu na koniec biezacego miesiaca
::  OLD: \stan_licznika/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
KARTDROG.STAN_POC:=KARTDROG.STAN_KON:=KARTDROG.PRZEB_M:=KARTDROG.PRZEB_O:=0;
{? KARTDROG.AR=0 | KARTDROG.AM=0
|| KARTDROG.AR:=ST.AR;
   KARTDROG.AM:=ST.AM
?};
SAMK.cntx_psh();
SAMK.index('OKD');
SAMK.prefix(KARTDROG.AR,KARTDROG.AM,POJAZDY.ref());
{? SAMK.last() || KARTDROG.STAN_KON:=SAMK.SK ?};
{? SAMK.first()
|| KARTDROG.STAN_POC:=SAMK.SP;
   {! |?
      KARTDROG.PRZEB_M+=(SAMK.SK-SAMK.SP);
      SAMK.next()
   !}
?};
SAMK.index('D');
SAMK.prefix(POJAZDY.ref());
{? KARTDROG.STAN_POC=0
|| {? SAMK.last()
   || _data:=date(KARTDROG.AR, KARTDROG.AM,1);
      {! |?
         {? SAMK.D<_data
         || KARTDROG.STAN_POC:=SAMK.SK;
            0
         || SAMK.prev()
         ?}
      !}
   || KARTDROG.STAN_POC:=POJAZDY.ST
   ?};
   KARTDROG.STAN_KON:=KARTDROG.STAN_POC
?};
{? SAMK.first()
|| {! |?
       KARTDROG.PRZEB_O+=(SAMK.SK-SAMK.SP);
       SAMK.next()
   !}
?};
SAMK.cntx_pop();
KARTDROG.win_edit('STAN');
KARTDROG.display()


\get_licznik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula zwraca stan licznika wskazanego pojazu
::   WE: _a = POJAZDY.ref() - wskazanie na pojazd
::   WY: stan licznika
::  OLD: \get_licznik/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_licznik:=0;
POJAZDY.cntx_psh();
SAMK.cntx_psh();
POJAZDY.prefix();
POJAZDY.seek(_a);
SAMK.index('D');
SAMK.prefix(_a);
{? SAMK.last() || _licznik:=SAMK.SK || _licznik:=POJAZDY.ST ?};
SAMK.cntx_pop();
POJAZDY.cntx_pop();
_licznik


\chk_spal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: sprawdzanie wypelnienia na rekord dla rodzajow paliwa
::   WY: czy wypelniono pole
::  OLD: \chk_spal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(SPAL,,'KOD');
{? _wyn='' & SPAL.AC<=0
|| FUN.info('Cena musi być większa od zera.'@);
   _wyn:='AC'
?};
_wyn


\usu_spal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed usunieciem rodzaju paliwa
::   WY: 1 - mozna usuwac, 0 - rekord powiazany
::  OLD: \usu_spal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? SPAL.count()>0
|| FUN.info('Wskazany rodzaj paliwa jest wykorzystywany\nw systemie i nie można go usunąć.'@);
   0
|| 1
?}


\bs_kartdrog_prz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wyswietleniem pola KARTDROG.PRZ
::   WY: Kod koloru dla pola nieredagowalnego lub pusty string
::  OLD: \bs_kartdrog_prz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
exec('findfnrd','color')


\bs_st_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wyswietleniem pola KARTDROG.ST_ZAL
::   WY: Kod koloru dla pola nieredagowalnego lub pusty string
::  OLD: \bs_st_zal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
exec('findfnrd','color')


\bs_norma_pal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wyswietleniem pola NORMA.RODZPAL i NORMA.RODZPAL2
::   WY: Kod koloru dla pola nieredagowalnego
::  OLD: \bs_norma_pal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
exec('findfnrd','color')


\bs_norma_rj_txt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed wyswietleniem pola NORMA.RJ_TXT i NORMA.RJ2_TXT
::   WY: Kod koloru dla pola nieredagowalnego
::  OLD: \bs_norma_rj_txt/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
exec('findfnrd','color')


\usu_tan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed usunieciem miejsca tankowania
::   WY: 1 - mozna usuwac, 0 - rekord powiazany
::  OLD: \usu_tan/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? TAN.count()>0
|| FUN.info('Wskazane miejsce tankowania jest wykorzystywane\nw systemie i nie można go usunąć.'@);
   0
|| 1
?}


\chk_tan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdzanie wypelnienia na rekord dla pracownikow do karty drogowej
::   WY: czy wypelniono pole
::  OLD: \chk_tan/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(TAN,,'KOD','NAZ');
_wyn


\nwyr_rek_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: akcja rekord po dla tabeli NWYR
::  OLD: \nwyr_rek_po/magazyn.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(NWYR,,'NAZ')


\who_rlock_samk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Sprawdzenie kto blokuje rekord SAMK
::   WE: _a - 0-sprawdzać kto blokuje, 1-nie sprawdzać i zapisać informację do __kom
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')=type_of(0) & _a
|| __kom.add('Kartę drogową obsługuje inny użytkownik.'@,7)
|| {? FUN.ask('Kartę drogową %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[SAMK.SYM]) & SAMK.r_lock(1,,1)
   || SAMK.r_unlock()
   ?}
?}


\sym_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Standardowa formula generujaca symbol (numer) karty drogowej XX.MMRRRR
::  OLD: \sym_form/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
$SAMK.NR+'/'+form(SAMK.AM,-2,0)+'/'+form(SAMK.AR,,0,'9')


\wys_karty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Odswiezenie widoku kart
::  OLD: \wys_karty/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_win:=SAMK.win_sel('PWER');
SAMK.index('OKD');
SAMK.hdr_sel();
{? __YEAR.MONTH<>''
|| SAMK.prefix(#__YEAR.MONTH,(#(4+__YEAR.YEAR)));
   SAMK.hdr_sel('. OKRES: '+form(4+__YEAR.YEAR)+'/' + __YEAR.MONTH+', LICZBA KART: ' + $SAMK.size())
|| SAMK.prefix(#__YEAR.YEAR);
   SAMK.hdr_sel('. OKRES: '+__YEAR.YEAR+', LICZBA KART: ' + $SAMK.size())
?};
SAMK.first();
SAMK.win_sel(_win);
grp_disp(SAMK, 'PWER')


\wys_poj_karty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Odswiezenie widoku kart podczas przegladania kart wedlug pojazdow
::  OLD: \wys_poj_karty/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_win:=SAMK.win_sel('PWER');
SAMK.index('SAMOKR');
SAMK.hdr_sel();
{? __YEAR_POJAZD.T=null
|| SAMK.prefix(#__YEAR_POJAZD.POJAZD);
   SAMK.hdr_sel(': '+__YEAR_POJAZD.NPOJAZD+', LICZBA KART: ' + $SAMK.size())
|| {? __YEAR_POJAZD.MONTH<>''
   || SAMK.prefix(#__YEAR_POJAZD.POJAZD,#__YEAR_POJAZD.MONTH,(#(4+__YEAR_POJAZD.YEAR)));
      SAMK.hdr_sel(': '+__YEAR_POJAZD.NPOJAZD+'. OKRES: '+form(4+__YEAR_POJAZD.YEAR)+'/'
           +__YEAR_POJAZD.MONTH+', LICZBA KART: ' + $SAMK.size())
   || SAMK.prefix(#__YEAR_POJAZD.POJAZD,#__YEAR_POJAZD.YEAR);
      SAMK.hdr_sel(': '+__YEAR_POJAZD.NPOJAZD+'. OKRES: '+__YEAR_POJAZD.YEAR
           +', LICZBA KART: ' + $SAMK.size())
   ?}
?};
SAMK.first();
SAMK.win_sel(_win);
grp_disp(SAMK, 'PWER')


\samk_pal_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Wyswietla paliwo pobrane do karty drogowej (tylko do odczytu)
::  OLD: \samk_pal_p/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMP.index('SAMK');
SAMP.prefix(SAMK.ref());
SAMP.win_sel('WER');
SAMP.actions('WER','DUP:D',,1);
SAMP.select();
SAMP.actions('WER')


\samk_pra_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Wyswietla pracownikow przypisanych do karty drogowej (tylko do odczytu)
::  OLD: \samk_pra_p/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
KARTDROG.PKAPSUMA:=0;
P_KAP.index('SAMK');
P_KAP.prefix(SAMK.ref());
P_KAP.win_sel('WER_KART');
P_KAP.actions('WER_KART','PDU:D',,1);
{? P_KAP.first()
|| {! |?
      {? P_KAP.TYP='T' || KARTDROG.PKAPSUMA+=P_KAP.PRZEBIEG ?};
      P_KAP.next()
   !};
   P_KAP.first()
?};
P_KAP.select();
P_KAP.actions('WER_KART')


\samk_dod_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Wyswietla dodatki pobrane do karty drogowej (tylko do odczytu)
::  OLD: \samk_dod_p/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMDOD.index('SAMK');
SAMDOD.prefix(SAMK.ref());
SAMDOD.win_sel('WER');
SAMDOD.actions('WER','PDU:D',,1);
SAMDOD.select();
SAMDOD.actions('WER',,,1)


\samk_trasy_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Lista tras podpietych pod biezaca karte drogowa (tylko do odczytu)
::  OLD: \samk_trasy/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMK_TRA.win_sel('WER');
SAMK_TRA.index('SAMK_TRA');
SAMK_TRA.prefix(SAMK.ref());
SAMK_TRA.actions('WER','DPU:D',,1);
SAMK_TRA.select()


\ae_wybkart
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: formuła po edycji KARTDROG.WYBKART (Okres M - aktualny miesiąc, Z - zakres dat, W - wszysko)
::----------------------------------------------------------------------------------------------------------------------
{? KARTDROG.WYBKART='Z'
|| {? KARTDROG.KARTY_OD=date(0,0,0) | KARTDROG.KARTY_OD=date(0,0,0)
   || KARTDROG.KARTY_OD:=date(KARTDROG.AR,KARTDROG.AM,1);
      KARTDROG.KARTY_DO:=date(KARTDROG.AR,KARTDROG.AM,0)
   ?};
   KARTDROG.OKR:=''
|? KARTDROG.WYBKART='W'
|| KARTDROG.KARTY_OD:=date(0,0,0);
   KARTDROG.KARTY_DO:=date(0,0,0);
   KARTDROG.OKR:=''
|| KARTDROG.OKR:=ST.OKR;
   KARTDROG.AR:=ST.AR;
   KARTDROG.AM:=ST.AM;
   KARTDROG.KARTY_OD:=date(KARTDROG.AR,KARTDROG.AM,1);
   KARTDROG.KARTY_DO:=date(KARTDROG.AR,KARTDROG.AM,0)
?}


\wyb_okres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009]
:: OPIS: Formula do wyboru okresu z systemu Logistyka
::  OLD: \wyb_okres/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
OKR.win_sel('WER_1');
OKR.actions('WER_1','L');
OKR.cntx_psh();
OKR.index('NAZ');
OKR.prefix();
OKR.first();
_naz:=KARTDROG.OKR;
_ref:={? OKR.find_key(_naz) || OKR.ref() || null ?};
OKR.cntx_pop();
OKR.index('OKR');
OKR.prefix();
{? _ref || OKR.seek(_ref) || OKR.first() ?};
{? OKR.select(,1,12)
|| KARTDROG.AR:=OKR.ROK;
   KARTDROG.AM:=OKR.MC;
   KARTDROG.OKR:=OKR.NAZ
?}


\ae_okres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009]
:: OPIS: Po redakcji pola OKR zmiennej KARTDROG
::  OLD: \ae_okres/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:=form(date~1,,0,'99');
OKR.cntx_psh();
OKR.index('NAZ');
OKR.prefix(KARTDROG.OKR);
{? ~OKR.last()
|| FUN.emsg('Nie ma takiego okresu w systemie.'@);
   _ok:=0
|| {? OKR.size()>1 || _ok:=0; {! |? {? (OKR.NAZ+4)=_rok || _ok:=1; 0 || OKR.prev() ?} !} || _ok:=1 ?};
   {? OKR.NAZ<>KARTDROG.OKR & _ok
   || KARTDROG.OKR:=OKR.NAZ;
      KARTDROG.AR:=OKR.ROK;
      KARTDROG.AM:=OKR.MC;
      _ok:=1
   |? ~_ok
   || FUN.emsg('Nie ma takiego okresu w systemie.'@); _ok:=0
   ?}
?};
OKR.cntx_pop();
win_disp();
_ok


\be_karty_od
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula przed redakcja pol KARTYDROG.KARTY_OD i KARTYDROG.KARTY_DO
::  OLD: \be_karty_od/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? KARTDROG.WYBKART='Z' || 1 || 0 ?}


\oblicz_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formula obliczajaca miesiecznie (lub w zadanym okresie) ilosc zaladunkow zarejestrowana do kart drogowych dla samochodu
::   WE: _a - POJAZDY.ref()
::       _b - data od
::       _c - data_do
::       _d - status kart drogowych 'T' - zatwierdzone, 'N' - niezatwierdzone, 'W' - wszystkie, jesli brak przyjmuje 'W'
::       _e - jesli podano _e i _e='W' to oba zb. razem, jesli _e='P' - zb. podstawowy, _e='D' - zbiornik dodatkowy,
::            jesli nie podano to przyjmuje e='W'
::       jesli parametry c i d sa rowne date(0,0,0) to miesiecznie, jesli podano te parametry to wedlug zakresu
::   WY: miesieczna (lub dla zadanego okresu) ilosc zaladunkow zarejestrowana do kart drogowych
::  OLD: \oblicz_zal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)<>7 | type_of(_b)<>4 | type_of(_c)<>4
|| FUN.emsg('Niepoprawne parametry formuły: %1'@['oblicz_zal']);
   return(0)
?};
{? _<5 || _e:='W' ?};
{? _<4 || _d:='W' ?};
SAMK.cntx_psh();
_ile:=0;
{? _b<>date(0,0,0) & _c<>date(0,0,0)
|| SAMK.index('D');
   SAMK.prefix(_a)
|| SAMK.index('OKR');
   SAMK.prefix(KARTDROG.AR,KARTDROG.AM,_a)
?};
{? SAMK.first()
|| {! |?
       {? (_d='W' | (_d=SAMK.STATUS))
       || {? _<3 | (SAMK.D>=_b & SAMK.D<=_c)
          || {? _<5 | _e<>'D'
             || _ile+=SAMK.ILZM;
                _ile+=SAMK.ILZP
             ?};
             {? (_=5 & (_e='W' | _e='D')) & SAMK.POJAZD().ND='T'
             || _ile+=SAMK.ILZM2;
                _ile+=SAMK.ILZP2
             ?}
          ?}
       ?};
       SAMK.next()
    !}
?};
SAMK.cntx_pop();
_ile


\oblicz_zpaln
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formula obliczajaca miesiecznie (lub dla zadanego okresu) ilosc paliwa zuzytego wg norm dla samochodu
::   WE: _a - POJAZDY.ref()
::       _b - od daty
::       _c - do daty
::       _d - status kart drogowych 'T' - zatwierdzone, 'N' - niezatwierdzone, 'W' - wszystkie, jesli brak przyjmuje 'W'
::       _e - zbiornik 'P' - podstawowy, 'D' - dodatkowy, 'W' - razem, jesli brak przyjmuje 'P'
::       jesli parametry _b i _c sa rowne date(0,0,0) to miesiecznie, jesli podano te parametry to wedlug zakresu
::   WY: miesieczne (lub dla zadanego okresu) ilosci paliwa wg norm
::  OLD: \oblicz_zpaln/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)<>7 | type_of(_b)<>4 | type_of(_c)<>4
|| FUN.emsg('Niepoprawne parametry formuły: %1'@['oblicz_zpaln']);
   return(0)
?};
{? _<5 || _e:='P' ?};
{? _<4 || _d:='W' ?};
SAMP.index('SAMK');
SAMK.cntx_psh();
{? _b=date(0,0,0) & _c=date(0,0,0)
|| SAMK.index('OKR');
   SAMK.prefix(KARTDROG.AR,KARTDROG.AM,_a)
|| SAMK.index('D');
   SAMK.prefix(_a)
?};
_ile_p:=0;
_ile_d:=0;
{? SAMK.first()
|| {! |?
      {? ((_b=date(0,0,0) & _c=date(0,0,0)) | (SAMK.D>=_b & SAMK.D<=_c)) & (_d='W' | _d=SAMK.STATUS)
      || _ile_p+=SAMK.Z_NORMA;
         {? _e<>'P' || _ile_d+=SAMK.ZD_NORMA ?}
      ?};
      SAMK.next()
  !}
?};
SAMK.cntx_pop();
_ile_p+_ile_d


\oblicz_zpalm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formula obliczajaca miesiecznie (lub w zadanym okresie) ilosc paliwa zarejestrowana do kart drogowych dla samochodu
::   WE: _a - POJAZDY.ref()
::       _b - od daty
::       _c - do daty
::       _d - status kart drogowych
::       _e - 'P' - zbiornik podstawowy, 'D' - zbiornik dodatkowy, 'W' - wszystkie, jesli nie podano to 'P'
::       jesli parametry _b i _c sa rowne date(0,0,0) to miesiecznie, jesli podano te parametry to wedlug zakresu
::   WY: miesieczna (lub dla zadanego okresu) ilosc paliwa zarejestrowana do kart drogowych
::  OLD: \oblicz_zpalm/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)<>7 | type_of(_b)<>4 | type_of(_c)<>4
|| FUN.emsg('Niepoprawne parametry formuły: %1.'@['oblicz_zpalm.']);
   return(0)
?};
{? _<5 || _e:='P' ?};
{? _<4 || _d:='W' ?};
SAMP.index('SAMK');
SAMK.cntx_psh();
{? _b<>date(0,0,0) & _c<>date(0,0,0)
|| SAMK.index('D');
   SAMK.prefix(_a)
|| SAMK.index('OKR');
   SAMK.prefix(KARTDROG.AR,KARTDROG.AM,_a)
?};
_ile:=0;
{? SAMK.first()
|| {! |?
      {? ((_b=date(0,0,0) & _c=date(0,0,0)) | (SAMK.D>=_b & SAMK.D<=_c)) & (_d='W' | _d=SAMK.STATUS)
      || SAMP.prefix(SAMK.ref(),_e);
         {? SAMP.first()
         || {! |?
               _ile+=SAMP.IL;
               SAMP.next()
            !}
         ?}
      ?};
      SAMK.next()
  !}
?};
SAMK.cntx_pop();
_ile


\oblicz_prz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formula obliczajaca miesiecznie (lub w zadanym okresie) przebieg zarejestrowany na kartach drogowych dla samochodu
::   WE: _a - POJAZDY.ref()
::       _b - data od
::       _c - data_do
::       _d - status kart drogowych 'T' - zatwierdzone, 'N' - niezatwierdzone, 'W' - wszystkie, jesli brak przyjmuje 'W'
::       _e - jesli podano _e i _e='P' - zb. podstawowy, _e='D' - zbiornik dodatkowy,
::            jesli nie podano to przyjmuje e='P'
::       jesli parametry c i d sa rowne date(0,0,0) to miesiecznie, jesli podano te parametry to wedlug zakresu
::   WY: miesieczny (lub dla zadanego okresu) przebieg zarejestrowany na kartach drogowych
::  OLD: \oblicz_prz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)<>7 | type_of(_b)<>4 | type_of(_c)<>4
|| FUN.emsg('Niepoprawne parametry formuły: %1.'@['oblicz_prz']);
   return(0)
?};
{? _<5 || _e:='P' ?};
{? _<4 || _d:='W' ?};
SAMK.cntx_psh();
_ile:=0;
{? _b<>date(0,0,0) & _c<>date(0,0,0)
|| SAMK.index('D');
   SAMK.prefix(_a)
|| SAMK.index('OKR');
   SAMK.prefix(KARTDROG.AR,KARTDROG.AM,_a)
?};
{? SAMK.first()
|| {! |?
       {? (_d='W' | (_d=SAMK.STATUS))
       || {? (_b=date(0,0,0) & _b=date(0,0,0)) | (SAMK.D>=_b & SAMK.D<=_c)
          || {? _e='P'
             || _ile+=SAMK.PRZ
             |? _e='D'
             || _ile+=SAMK.PRZ2
             ?}
          ?}
       ?};
       SAMK.next()
    !}
?};
SAMK.cntx_pop();
_ile


\oblicz_rzecz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formula obliczajaca miesiecznie (lub w zadanym okresie) zuzycie rzeczywiste zarejestrowany
::       na kartach drogowych dla samochodu
::   WE: _a - POJAZDY.ref()
::       _b - data od
::       _c - data_do
::       _d - status kart drogowych 'T' - zatwierdzone, 'N' - niezatwierdzone, 'W' - wszystkie, jesli brak przyjmuje 'W'
::       _e - jesli podano _e i _e='P' - zb. podstawowy, _e='D' - zbiornik dodatkowy,
::            jesli nie podano to przyjmuje e='P'
::       jesli parametry c i d sa rowne date(0,0,0) to miesiecznie, jesli podano te parametry to wedlug zakresu
::   WY: miesieczne (lub dla zadanego okresu) rzeczywiste zuzycie paliwa
::  OLD: \oblicz_rzecz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)<>7 | type_of(_b)<>4 | type_of(_c)<>4
|| FUN.emsg('Niepoprawne parametry formuły: %1.'@['oblicz_rzecz']);
   return(0)
?};
{? _<5 || _e:='P' ?};
{? _<4 || _d:='W' ?};
SAMK.cntx_psh();
SAMP.cntx_psh();
_ile:=0;
{? _b<>date(0,0,0) & _c<>date(0,0,0)
|| SAMK.index('D');
   SAMK.prefix(_a)
|| SAMK.index('OKR');
   SAMK.prefix(KARTDROG.AR,KARTDROG.AM,_a)
?};
{? SAMK.first()
|| {! |?
       {? (_d='W' | (_d=SAMK.STATUS))
       || {? (_b=date(0,0,0) & _b=date(0,0,0)) | (SAMK.D>=_b & SAMK.D<=_c)
          ||
             'suma pobranego paliwa z tankowan';
             _ile_p:=0;
             SAMP.index('SAMK');
             SAMP.prefix(SAMK.ref(),_e);
             {? SAMP.first()
             || {! |?
                  _ile_p+=SAMP.IL;
                  SAMP.next()
                !}
             ?};
            'zuzycie rzeczywiste paliwa';
            {? _e='P' || _ile+=_ile_p+(SAMK.SPP-SAMK.SKP)
            |? _e='D' || _ile+=_ile_p+(SAMK.SPP2-SAMK.SKP2)
            ?}
          ?}
       ?};
       SAMK.next()
    !}
?};
SAMP.cntx_pop();
SAMK.cntx_pop();
_ile


\i_palz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formula obliczajaca ilosc paliwa zarejestrowana do karty drogowej
::   WE: _a - ref karty drogowej
::       _b - rodzaj zbiornika 'P'- podstawowy, 'D'- dodatkowy
::   WY: patrz opis
::  OLD: \i_palz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)<>7
|| FUN.emsg('Niepoprawne parametry formuły: %1.'@['i_palz.']);
   return(0)
?};
{? _<2 || _b:='P' ?};
_ile:=0;
SAMP.prefix(_a,_b);
{? SAMP.first()
|| {! |? _ile+=SAMP.IL;
         SAMP.next()
   !}
?};
_ile


\i_palz_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formula obliczajaca miesięcznie (lub w zadanym okresie) ilosc paliwa zarejestrowana do kart drogowych
::       dla biezacego miesiaca (lub w zadanym okresie) w stalych systemu
::   WE: _a - ref samochodu dla ktorego obliczamy
::       _b - rodzaj zbiornika 'P'- podstawowy, 'D'- dodatkowy
::       _c - data od
::       _d - data do
::       _e - status kart drogowych
::       jesli parametry c i d sa rowne date(0,0,0) to miesiecznie, jesli podano te parametry to wedlug zakresu
::   WY: patrz opis
::  OLD: \i_palz_m/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMP.index('SAMK');
SAMK.cntx_psh();
{? _c<>date(0,0,0) & _d<>date(0,0,0)
|| SAMK.index('D');
   SAMK.prefix(_a)
|| SAMK.index('OKR');
   SAMK.prefix(KARTDROG.AR,KARTDROG.AM,_a)
?};
_ile:=0;
{? SAMK.first()
|| {! |?
      {? ((_c=date(0,0,0) & _d=date(0,0,0)) | (SAMK.D>=_c & SAMK.D<=_d)) & (_e='W' | _e=SAMK.STATUS)
      || _ile+=exec('i_palz','karty_drog',SAMK.ref(),_b)
      ?};
      SAMK.next()
   !}
?};
SAMK.cntx_pop();
_ile


\i_paln_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formula obliczajaca miesiecznie (lub w zadanym okresie) ilosc paliwa zuzytego wg norm
::       dla biezacego miesiaca w stalych systemu (lub w zadanym okresie)
::   WE: _a - ref samochodu dla ktorego obliczamy
::       _b - data od
::       _c - data do
::       _d - status karty drogowej
::       _e - rodzaj zbiornika 'P' - podstawowy, 'D'- dodatkowy
::       jesli parametry c i d sa rowne date(0,0,0) to miesiecznie, jesli podano te parametry to wedlug zakresu
::   WY: patrz opis
::  OLD: \i_paln_m/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)<>7 | type_of(_b)<>4 | type_of(_c)<>4
|| FUN.emsg('Niepoprawne parametry formuły: %1.'@['i_paln_m']);
   return(0)
?};
{? _<5 || _e:='P' ?};
SAMK.cntx_psh();
{? _b<>date(0,0,0) & _c<>date(0,0,0)
|| SAMK.index('D');
   SAMK.prefix(_a)
|| SAMK.index('OKR');
   SAMK.prefix(KARTDROG.AR,KARTDROG.AM,_a)
?};
_ile:=0;
{? SAMK.first
||
   {! |?
      {? ((_b=date(0,0,0) & _c=date(0,0,0)) | (SAMK.D>=_b & SAMK.D<=_c)) & (_d='W' | _d=SAMK.STATUS)
      || {? _e='P'
         || _ile+=SAMK.Z_NORMA
         |? _e='D'
         || _ile+=SAMK.ZD_NORMA
         ?}
      ?};
      SAMK.next()
   !}
?};
SAMK.cntx_pop();
_ile


\i_prac_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formula obliczajaca miesięcznie (lub w zadanym okresie) ilosc przepracowanych
::       w biezacym miesiacu (lub dla okresu ze stalych systemu)
::       przez pojazd godzin (h) (na podstawie pol praca dodatkowa w kartach drogowych)
::   WE: _a - ref samochodu dla ktorego obliczamy
::       _b - od daty
::       _c - do daty
::       _d - status kart drogowych
::       _e - zbiornik (P)odstawowy, (D)odatkowy
::       jesli parametry _b i _c sa rowne date(0,0,0) to miesiecznie, jesli podano te parametry to wedlug zakresu
::   WY: patrz opis
::  OLD: \i_prac_m/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)<>7 | type_of(_b)<>4 | type_of(_c)<>4
|| FUN.emsg('Niepoprawne parametry formuły: %1.'@['i_prac_m']);
   return(0)
?};
{? _<5 || _e:='P' ?};
{? _<4 || _d:='W' ?};
SAMP.index('SAMK');
SAMK.cntx_psh();
{? _b<>date(0,0,0) & _c<>date(0,0,0)
|| SAMK.index('D');
   SAMK.prefix(_a)
|| SAMK.index('OKR');
   SAMK.prefix(KARTDROG.AR,KARTDROG.AM,_a)
?};
_ile:=0;
{? SAMK.first
|| {! |?
      {? ((_b=date(0,0,0) & _c=date(0,0,0)) | (SAMK.D>=_b & SAMK.D<=_c)) & (_d='W' | _d=SAMK.STATUS)
      || {? _e='P' || _ile+=SAMK.PR_DOD_P
         |? _e='D' || _ile+=SAMK.PR_DOD_D
         ?}
      ?};
      SAMK.next()
   !}
?};
SAMK.cntx_pop();
_ile


\tmp_kier
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula uzupelnia tymczasowa tabele TMP_KIER z danymi dotyczacymi zuzycia dla kierowcow
::       dla wskazanego pojazdu
::   WE: _a = POJAZDY.ref(), _b = od, _c = do, _d='P' - tylko zbiornik podstawowy, _d='D' takze zbiornik dodatkowy
::  OLD: \tmp_kier/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)<>7 | type_of(_b)<>4 | type_of(_c)<>4
|| FUN.emsg('Niepoprawne parametry formuły: %1.'@['tmp_kier']);
   return(0)
?};
POJAZDY.cntx_psh();
POJAZDY.prefix();
{? ~POJAZDY.seek(_a)
|| FUN.emsg('Nie znaleziono pojazdu.'@);
   POJAZDY.cntx_pop();
   return(0)
?};
SAMK.cntx_psh();
SAMK.index('D');
SAMK.prefix(POJAZDY.ref());
P_KAP.index('K');
{? SAMK.first()
|| {! |?
      {? (SAMK.D>=_b & SAMK.D<=_c) & (KARTDROG.WYB_STAT='W' | KARTDROG.WYB_STAT=SAMK.STATUS)
      || P_KAP.prefix(SAMK.ref(),'T');
         {? P_KAP.first()
         || _temp:=0;
            {! |?
               _temp+=P_KAP.PRZEBIEG;
               P_KAP.next()
            !};
            P_KAP.first();
            {! |?
               {? ~TMP_KIER.find_key(#P_KAP.OSOBA)
               || _new:=1;
                  TMP_KIER.blank();
                  TMP_KIER.REF_KIER:=#P_KAP.OSOBA;
                  TMP_KIER.NAZW:='   '+P_KAP.OSOBA().NAZWISKO+' '+P_KAP.OSOBA().PIERWSZE
               || _new:=0
               ?};
               'jesli podano przebiegi dla kierowcow to wg nich jesli nie to proporcjonalnie do liczby kierowcow';
               {? _temp<>0
               || {? (SAMK.SK-SAMK.SP)>0
                  || _udzial:=P_KAP.PRZEBIEG/(SAMK.SK-SAMK.SP)
                  || _udzial:=0
                  ?}
               || _udzial:=1/P_KAP.size()
               ?};
               TMP_KIER.JAZDY+=((SAMK.SK-SAMK.SP)*_udzial);
               _pobrano:=exec('i_palz','karty_drog',SAMK.ref(),'P');
               TMP_KIER.POBRANO+=_pobrano*_udzial;
               TMP_KIER.WG_NORMY+=SAMK.Z_NORMA*_udzial;
               TMP_KIER.RZECZYW+=SAMK.Z_RZECZ*_udzial;
               {? _d='D'
               || TMP_KIER.D_JAZD+=((SAMK.PRZ2)*_udzial);
                  _pobrano:=exec('i_palz','karty_drog',SAMK.ref(),'D');
                  TMP_KIER.D_POBRAN+=_pobrano*_udzial;
                  TMP_KIER.D_WG_NOR+=SAMK.ZD_NORMA*_udzial;
                  TMP_KIER.D_RZECZY+=SAMK.ZD_RZECZ*_udzial
               ?};
               {? _new || TMP_KIER.add() || TMP_KIER.put() ?};
               P_KAP.next()
            !}
         ?}
      ?};
      SAMK.next()
   !}
?};
SAMK.cntx_pop();
{? _d='P'
|| TMP_KIER.for_each("_zu:=(TMP_KIER.RZECZYW-TMP_KIER.WG_NORMY);
                   {? _zu>0 || TMP_KIER.PRZEPAL:=|(_zu)
                   |? _zu<0 || TMP_KIER.OSZCZ:=|(_zu)
                   ?};
                   TMP_KIER.put()")
|| TMP_KIER.for_each("_zu:=(TMP_KIER.RZECZYW-TMP_KIER.WG_NORMY);
                   {? _zu>0 || TMP_KIER.PRZEPAL:=|(_zu)
                   |? _zu<0 || TMP_KIER.OSZCZ:=|(_zu)
                   ?};
                   _zu:=(TMP_KIER.D_RZECZY-TMP_KIER.D_WG_NOR);
                   {? _zu>0 || TMP_KIER.D_PRZEPA:=|(_zu)
                   |? _zu<0 || TMP_KIER.D_OSZCZ:=|(_zu)
                   ?};
                   TMP_KIER.put()")
?};
POJAZDY.cntx_pop()


\tmp_kier_pal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula uzupelnia tymczasowa tabele TMP_KIER z danymi dotyczacymi pobranego paliwa dla kierowcow
::       dla wskazanego pojazdu
::   WE: _a = od, _b = do
::  OLD: \tmp_kier_pal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMP.prefix();
P_KAP.index('K');
{? SAMP.first()
|| {! |?
      {? (SAMP.SAMK().D>=_a & SAMP.SAMK().D<=_b) & (KARTDROG.WYB_STAT='W' | KARTDROG.WYB_STAT=SAMP.SAMK().STATUS)
      || _rodz:=SAMP.RODZPAL().KOD;
         P_KAP.prefix(SAMP.SAMK,'T');
         {? P_KAP.first()
         || _temp:=0;
            {! |?
               _temp+=P_KAP.PRZEBIEG;
               P_KAP.next()
            !};
            P_KAP.first();
            {! |?
               {? ~TMP_KIER.find_key(#P_KAP.OSOBA,_rodz)
               || _new:=1;
                  TMP_KIER.blank();
                  TMP_KIER.REF_KIER:=#P_KAP.OSOBA;
                  TMP_KIER.PALIWO:=_rodz;
                  TMP_KIER.NAZW:='   '+P_KAP.OSOBA().NAZWISKO+' '+P_KAP.OSOBA().PIERWSZE
               || _new:=0
               ?};
               'jesli podano przebiegi dla kierowcow to wg nich jesli nie to proporcjonalnie do liczby kierowcow';
               {? _temp<>0
               || {? (SAMP.SAMK().SK-SAMP.SAMK().SP)>0
                  || _udzial:=P_KAP.PRZEBIEG/(SAMP.SAMK().SK-SAMP.SAMK().SP)
                  || _udzial:=0
                  ?}
               || _udzial:=1/P_KAP.size()
               ?};
               TMP_KIER.POBRANO+=SAMP.IL*_udzial;
               TMP_KIER.WARTOSC+=SAMP.W;
               {? _new || TMP_KIER.add() || TMP_KIER.put() ?};
               P_KAP.next()
            !}
         ?}
      ?};
      SAMP.next()
   !}
?}


\zle_kosz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: wyliczanie kosztow zlecenia (ilosci kilomerow) dla samochodu oraz konta w zakresie dat
::   WE:  _a - ref samochodu POJAZDY.ref
::        _b - ref kontra    NWYR.ref
::        _c - od daty
::        _d - do daty
::        _e - uwzgledniac status kart
::   WY: wyliczony koszt
::  OLD: \zle_kosz/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _<5 || _e:=0 ?};
_wyn:=0;
SAMKOSZ.cntx_psh();
_ndx:=SAMKOSZ.ndx_tmp('',,'SAMK','POJAZD',,'NWYR',,);
SAMKOSZ.index(_ndx);
SAMKOSZ.prefix(_a,_b);
{? SAMKOSZ.first()
||
   {!|?
      {? ((SAMKOSZ.SAMK().D>=_c | _c = date(0,0,0)) & (SAMKOSZ.SAMK().D<=_d | _d=date(0,0,0)))
         & (_e=0 | (KARTDROG.WYB_STAT='W' | SAMKOSZ.SAMK().STATUS=KARTDROG.WYB_STAT))
      || _wyn+=SAMKOSZ.KM
      ?};
      SAMKOSZ.next
   !}
?};
SAMKOSZ.ndx_drop(_ndx);
SAMKOSZ.cntx_pop();
_wyn


\wys_cart
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Odswieza widok kart wg aktualnego kierowcy
::  OLD: \wys_cart/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
__CART.prefix(__DRIVER.REF_OSO);
__CART.hdr_sel();
__CART.hdr_sel(', Liczba kart: ' + $__CART.size());
__CART.first();
grp_disp(__CART, __WIN_CART)


\cart_view
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Funkcja wyswietla dane wskazanej karty drogowej
::  OLD: \cart_view/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMK.cntx_psh();
SAMK.prefix();
{? SAMK.seek(__CART.R_SAMK,SAMK.name())
|| {? SAMK.POJAZD().ND<>'T' || SAMK.win_edit('RED1') || SAMK.win_edit('RED_D1') ?};
   exec('samk_edit_lad_ustaw', 'karty_drog');
   SAMK.hdr_edit(': '+SAMK.POJAZD().NAZ + ' ['+SAMK.POJAZD().NRREJ+']');
   SAMK.display();
   SAMK.hdr_edit()
?};
SAMK.cntx_pop();
1


\cart_pal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula wyswietla paliwo pobrane do karty drogowej
::  OLD: \cart_pal/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMP.index('SAMK');
SAMP.prefix(__CART.R_SAMK);
SAMP.win_sel('WER');
SAMP.actions('WER','DUP:D',,1);
SAMP.select();
SAMP.actions('WER')


\cart_pra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula wyswietla pracownikow przypisanych do karty drogowej
::  OLD: \cart_pra/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
KARTDROG.PKAPSUMA:=0;
P_KAP.index('SAMK');
P_KAP.prefix(__CART.R_SAMK);
P_KAP.win_sel('WER_KART');
P_KAP.actions('WER_KART','PDU:D',,1);
{? P_KAP.first()
|| {! |?
      {? P_KAP.TYP='T' || KARTDROG.PKAPSUMA+=P_KAP.PRZEBIEG ?};
      P_KAP.next()
   !};
   P_KAP.first()
?};
P_KAP.select();
P_KAP.actions('WER_KART')


\cart_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula wyswietla dodatki pobrane do karty drogowej
::  OLD: \cart_dod/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMDOD.index('SAMK');
SAMDOD.prefix(__CART.R_SAMK);
SAMDOD.win_sel('WER');
SAMDOD.actions('WER','PDU:D',,1);
SAMDOD.select();
SAMDOD.actions('WER',,,1)


\cart_tra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Formula wyswietla trasy dla karty drogowej
::  OLD: \cart_dod/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMK_TRA.index('SAMK_TRA');
SAMK_TRA.prefix(__CART.R_SAMK);
SAMK_TRA.win_sel('WER');
SAMK_TRA.actions('WER','PDU:D',,1);
SAMK_TRA.select();
SAMK_TRA.actions('WER',,,1)


\samk_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: ustawienie kolorowania dla kart drogowych
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? SAMK.STATUS='T'
|| _wyn:='SAMK#01#01'
|? SAMK.STATUS='S'
|| _wyn:='SAMK#01#02'
?};
_wyn


\samk_sym_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MW] [19.22]
:: OPIS: Formuła ikony dla SAMK.STATUS
::----------------------------------------------------------------------------------------------------------------------
"{? SAMK.STATUS='T' | SAMK.STATUS='S'
 || exec('zaakceptowany','icon')
 || exec('zarejestrowany','icon')
 ?}
"


\samk_chk_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Usunięcie karty drogowej - sprawdzenie, czy można
::----------------------------------------------------------------------------------------------------------------------
_moz:=1;
{? SAMK.STATUS='T'
|| _moz:=0;
   FUN.info('Karta drogowa %1 zaakceptowana.\nUsunięcie niemożliwe.'@[SAMK.SYM])
?};
{? SAMK.STATUS='S'
|| _licznik:=SAMK.SK;
   _nr:=SAMK.NRLICZ;
   SAMK.cntx_psh();
   SAMK.index('LICZNIK');
   SAMK.prefix(POJAZDY.ref(),_nr);
   {? SAMK.first()
   || {!
      |? {? SAMK.STATUS<>'S'
         || _moz:=0
         ?};
         _moz & SAMK.next()
      !}
   ?};
   SAMK.cntx_pop();
   {? ~_moz
   || FUN.info('Istnieją karty drogowe dla licznika %1.\nUsunięcie niemożliwe.'@[$_nr])
   ?}
?};
_moz


\test_przebieg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula testuje czy wystapily warunki do utworzenia przegladu z przebiegu i ew. go tworzy
::   WE: _a - wskazanie na karte drogowa (SAMK.ref()), [_b - blokada wyswietlania komunikatow]
::  OLD: \test_przebieg/skid_rem.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>1 & _b=1 || _show:=0 || _show:=1 ?};
SAMK.cntx_psh();
{? SAMK.ref()<>_a
|| SAMK.prefix();
   SAMK.seek(_a,SAMK.name())
?};
_licznik:=exec('get_licznik','karty_drog',SAMK.POJAZD);
SAMK.cntx_pop()


\samk_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dołączenie karty drogowej
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_KAR_DKAR';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';

exec('mp_run','#b__box',_params)


\samk_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Modyfikacja karty drogowej
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.STATUS<>'T'
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LTR_KAR_DKAR';
   _params.UIDREF:=SAMK.uidref();
   _params.AKCJA:='Popraw';
   exec('mp_run','#b__box',_params)
|| FUN.info('Karta drogowa %1 zaakceptowana.\nPoprawianie niemożliwe.'@[SAMK.SYM])
?}


\samk_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Usunięcie karty drogowej
::----------------------------------------------------------------------------------------------------------------------
{? exec('samk_chk_usun','karty_drog')
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LTR_KAR_DKAR';
   _params.UIDREF:=SAMK.uidref();
   _params.AKCJA:='Usuń';
   exec('mp_run','#b__box',_params)
?}


\samk_akceptuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Akceptacja karty drogowej
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_KAR_AKAR';
_params.UIDREF:=SAMK.uidref();
_params.AKCJA:='Akceptuj';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);

exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'SAMK',SAMK.ref());
exec('mp_run','#b__box',_params)


\samk_akcept_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Akceptacja karty drogowej z listy zadań (TODO)
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.STATUS='S'
|| FUN.info('Karta specjalna (wymiana licznika)'@);
   return(0)
?};

NORMA.RJ_TXT:={? SAMK.SAMN().RJ='K' || 'km' |? SAMK.SAMN().RJ='M' || 'mth' |? SAMK.SAMN().RJ='H' || 'h' ?};
NORMA.RODZPAL:=SAMK.SAMN().RODZPAL;
{? SAMK.ND='T'
|| _win_red:='RED_D1A';
   NORMA.RJ2_TXT:={? SAMK.SAMN().RJ2='K' || 'km' |? SAMK.SAMN().RJ2='M' || 'mth' |? SAMK.SAMN().RJ2='H' || 'h' ?};
   NORMA.RODZPAL2:=SAMK.SAMN().RODZPAL2
|| _win_red:='RED1A'
?};

SAMK.win_edit(_win_red);
exec('samk_edit_lad_ustaw', 'karty_drog');
SAMK.hdr_edit();
SAMK.hdr_edit(': '+SAMK.POJAZD().NAZ + ' ['+SAMK.POJAZD().NRREJ+']');
SAMK.edit();
SAMK.hdr_edit();
SAMK.win_edit('')


\samk_akcept_f2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Akceptacja karty drogowej z listy zadań (TODO) - formuła przycisku "Akceptuj" w oknie karty
::----------------------------------------------------------------------------------------------------------------------
_wyn:=exec('samk_akcept','karty_drog');
{? _wyn>0
|| 'key:F2'
|| ''
?}


\pojazd_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Wybór pojazdu przy dopisywaniu karty drogowej w procesie
::   WY: ref pojazdu
::----------------------------------------------------------------------------------------------------------------------
_poj:=null;
POJAZDY.cntx_psh();
POJAZDY.f_clear();
POJAZDY.index('FIRAKTNR');
POJAZDY.prefix(REF.FIRMA,'T');
POJAZDY.first();
_win0:=POJAZDY.win_sel('?');
POJAZDY.win_sel('WER_KW');
{? POJAZDY.select()
|| _poj:=POJAZDY.ref()
?};
POJAZDY.cntx_pop();
POJAZDY.win_sel(_win0);
_poj


\pojazd_activate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Aktywacja pojazdu
::----------------------------------------------------------------------------------------------------------------------
{? POJAZDY.A='T'
|| FUN.info('Wskazany pojazd jest aktywny.'@)
|? FUN.ask('Aktywować wskazany pojazd?'@)
|| POJAZDY.A:='T';
   POJAZDY.put()
?};
~~


\pojazd_deactivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dezaktywacja pojazdu (ostrzeżenie gdy są powiązania)
::----------------------------------------------------------------------------------------------------------------------
{? POJAZDY.A='N'
|| FUN.info('Wskazany pojazd jest nieaktywny.'@)
|| {? POJAZDY.count()>0
   || _odp:=FUN.ask('Wskazany pojazd jest już użyty w systemie.'@+'\n'
            +'Dezaktywować wskazany pojazd?'@)
   || _odp:=FUN.ask('Dezaktywować wskazany pojazd?'@)
   ?};
   {? _odp
   || POJAZDY.A:='N';
      POJAZDY.put()
   ?}
?};
~~


\samk_edit_lad_ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: SAMK - w oknie edycji ewentualne wyszarzenie pola POJAZD.DOPL (dopuszczalna ładowność)
::----------------------------------------------------------------------------------------------------------------------
POJAZDY.cntx_psh();
SAMK.cntx_psh();
_okn:=SAMK.win_edit('?');
{? _okn = ''
|| _okn:='RED1'
?};
{? SAMK.size()>0 & (_okn='RED1' | _okn='RED1A' | _okn='RED_D1' | _okn='RED_D1A')
|| {? SAMK.POJAZD().LAD='T' & _okn<>'RED1A' & _okn<> 'RED_D1A'
   || SAMK.efld_opt(_okn, 'enable=1', SAMK, 'POJAZD', 'DOPL')
   || SAMK.efld_opt(_okn, 'enable=0', SAMK, 'POJAZD', 'DOPL')
   ?}
?};
SAMK.cntx_pop();
POJAZDY.cntx_pop();
~~


\samk_okresy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.42]
:: OPIS: tabela zawierająca miesiąc / rok dla dat z karty drogowej SAMK
::----------------------------------------------------------------------------------------------------------------------
_wyn:=tab_tmp(2,'ROK','INTEGER','Rok',
                'MIESIAC','INTEGER','Miesiąc');
_d1:=SAMK.D;
_d2:=SAMK.DK;
_d:=_d1;
{!
|? _d<=_d2
|! _wyn.ROK:=_d~1;
   _wyn.MIESIAC:=_d~2;
   _wyn.add;
   _d:=exec('add_months','#interval',_d,1)
!};
_wyn


\samk_transport
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.42]
::   WE: _a SAMK.ref
:: OPIS: pokazanie tabeli tymczasowej zawierającej transport TR_NAG dla karty drogowej SAMK
::----------------------------------------------------------------------------------------------------------------------
{? _>=1
|| SAMK.cntx_psh();
   SAMK.seek(_a)
?};

_m:=exec('samk_okresy','karty_drog');
_m.blank();
_m.ROK:=0;
_m.MIESIAC:=0;
_m.add();
_tab:=tab_tmp(2,'WYJ_D','DATE','Wyjazd'@,
                'SYM','STRING[20]','Symbol'@,
                'TR_ZEWN','STRING[20]','Zewnętrzny'@,
                'TR_RODZ','STRING[20]','Rodzaj'@,
                'ZAL','INTEGER','Załadunków'@,
                'ROZ','INTEGER','Rozładunków'@,
                'SPEC','STRING[255]','Specyfikacja'@);

{? _m.first()
|| TR_NAG.cntx_psh();
   {!
   |? {? _m.ROK=0
      || TR_NAG.use('trnt____')
      || TR_NAG.use('trnt'+(form(_m.ROK,-4,0,'0')+2)+form(_m.MIESIAC,-2,0,'0'))
      ?};
      TR_NAG.index('POJAZD');
      TR_NAG.prefix(SAMK.POJAZD);
      {? TR_NAG.find_ge(SAMK.D) & TR_NAG.WYJ_D<=SAMK.DK
      || {!
         |? _tab.blank();
            _tab.WYJ_D:=TR_NAG.WYJ_D;
            _tab.SYM:=TR_NAG.SYM;
            _tab.ZAL:=TR_NAG.ZAL;
            _tab.ROZ:=TR_NAG.ROZ;
            _tab.SPEC:=TR_NAG.SPEC;
            {? TR_NAG.TR_ZEWN<>null()
            || _tab.TR_ZEWN:=TR_NAG.TR_ZEWN().KOD
            ?};
            {? TR_NAG.TR_RODZ<>null()
            || _tab.TR_RODZ:=TR_NAG.TR_RODZ().KOD
            ?};
            _tab.add();
            TR_NAG.next() & TR_NAG.WYJ_D<=SAMK.DK
         !}
      ?};
      _m.next()
   !};
   TR_NAG.cntx_pop()
?};

{? _>=1
|| SAMK.cntx_pop()
?};

{? _tab.size()>0
|| _okn:=_tab.mk_sel('Transport'@,,1);
   _tab.win_sel(_okn);
   _tab.select()
|| FUN.info('Brak transportu powiązanego z kartą drogową.'@)
?};
~~


\sambr_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Dopisywanie i poprawianie transportu odpadów dla karty drogowej
::   WE: _a - 1 - add, 0 lub brak put
::  OLD: \samp_red/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1
|| {? type_of(_a)<>1
   || _a:=0
   ?}
|| _a:=0
?};
{? _a
|| SAMBR.blank()
?};
{? SAMBR.edit("exec('chk_sambr','karty_drog')")
|| {? _a
   || SAMBR.add()
   ?};
   exec('sambr_zapisz','karty_drog')
?};
''


\chk_sambr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: sprawdzanie poprawności danych transportu odpadów dla karty drogowej
::   WY: czy wypelniono pole
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(SAMBR,,'WYS','ODP');
{? _wyn=''
|| _wyn := __CHK.record2(SAMBR,'MG','Masa')
?};
{? _wyn='' & SAMBR.MG<=0
|| FUN.info('Należy podać masę większą od zera.'@);
   _wyn:='MG'
?};
_wyn


\sambr_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: dla tabeli SAMBR wypełnienie pola LP
::----------------------------------------------------------------------------------------------------------------------
SAMBR.D:=SAMBR.SAMK().D;
SAMBR.put();
{? SAMBR.LP<=0
|| _lp:=0;
   _ref:=SAMBR.ref();
   _samk:=SAMBR.SAMK;
   SAMBR.cntx_psh();
   SAMBR.index('SAMK');
   SAMBR.prefix(_samk);
   {? SAMBR.last() & SAMBR.ref()<>_ref
   || _lp := SAMBR.LP+1
   ?};
   {? _lp<=0
   || _lp:=1
   ?};
   SAMBR.cntx_pop();
   {? SAMBR.ref()=_ref
   || SAMBR.LP:=_lp;
      SAMBR.put()
   ?}
?};
~~


\samk_sambr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: wyswietlanie i edycja transportowanych odpadów do karty drogowej
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.STATUS='S'
|| FUN.info('Dla kart specjalnych (wymiana licznika) nie można wprowadzać transportowanych odpadów.'@);
   return(0)
?};
_env:=exec('env_create','odpady');
params_set('env',_env);
{? ST.ODDZ<>''
|| exec('kpo_open','open_tab', ST.ODDZ, ($ST.AR)+2)
?};
SAMBR.index('SAMK');
SAMBR.prefix(SAMK.ref());
SAMBR.win_sel('WER_KPO');
{? exec('chk_role','#b__box',OPERATOR.USER,'LTR_KAR_DKAR')
|| {? SAMK.STATUS='T' & SAMK.POJAZD().A='T'
   || SAMBR.actions('WER_KPO','PDU:D',,1)
   |? SAMK.POJAZD().A='N'
   || SAMBR.actions('WER_KPO','PDU:D',,1)
   || SAMBR.actions('WER_KPO',,,1)
   ?}
|| SAMBR.actions('WER_KPO','PDU:D',,1)
?};
SAMBR.select();
''


\samk_sambr_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Wyswietla transportowane odpady do karty drogowej (tylko do odczytu)
::----------------------------------------------------------------------------------------------------------------------
SAMBR.index('SAMK');
SAMBR.prefix(SAMK.ref());
SAMBR.win_sel('WER_KPO');
SAMBR.actions('WER_KPO','PDU:D',,1);
SAMBR.select();
SAMBR.actions('WER_KPO',,,1)


\cart_sambr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Formula wyswietla transportowane odpady dla karty drogowej
::  OLD: \cart_dod/skid_sam.fml
::----------------------------------------------------------------------------------------------------------------------
SAMBR.index('SAMK');
SAMBR.prefix(__CART.R_SAMK);
SAMBR.win_sel('WER');
SAMBR.actions('WER','PDU:D',,1);
SAMBR.select();
SAMBR.actions('WER',,,1)


\sambr_add_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Dołączanie odpadów dla karty drogowej
::----------------------------------------------------------------------------------------------------------------------
KPO.cntx_psh();
{? ST.ODDZ <> ''
|| exec('kpo_open','open_tab', ST.ODDZ, ($ST.AR)+2)
?};
KPO.win_sel('SEL');
_actions:=KPO.actions('SEL','JE:E');
KPO.index('R');
KPO.f_set(,'left join SAMBR using (SAMBR.KPO,KPO.REFERENCE) left join SAMK using (SAMBR.SAMK,SAMK.REFERENCE)'
          ,'KPO.KORW=\'K\' and KPO.DTR>=to_date(:_a) and KPO.DTR<=to_date(:_b)'
          ,SAMK.D,SAMK.DK
         );
params_set(params_get());
{? KPO.select()
|| SAMBR.cntx_psh();
   SAMBR.index('KPO');
   SAMBR.prefix(SAMK.ref,KPO.ref);
   {? SAMBR.first()
   || FUN.info('Wybrana karta przekazania odpadów znajduje się już na liście transportowanych odpadów karty drogowej.'@)
   || SAMBR.prefix();
      SAMBR.SAMK:=SAMK.ref;
      SAMBR.KPO:=KPO.ref;
      SAMBR.add()
   ?};
   SAMBR.cntx_pop()
?};
KPO.f_clear();
KPO.actions('SEL',_actions);
KPO.cntx_pop();
0


\sambr_disp_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Wyświetlenie karty przekazania odpadów dla karty drogowej
::----------------------------------------------------------------------------------------------------------------------
KPO.cntx_psh();
KPO.use(ref_name(SAMBR.KPO));
KPO.win_edit('REDE');
KPO.index('R');
KPO.prefix('K');
{? KPO.seek(SAMBR.KPO)
|| exec('kpo_display','odpady')
?};
KPO.cntx_pop()


\fld_real2time
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: Wylicza wartość pola TIME na podstawie wartości pola REAL
::   WE: _a - STRING - akronim tabeli
::       _b - STRING - akronim pola TIME
::   WY: TIME - wartość
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_fld:=_b;
{? _tab='SAMK' & _fld='PR_DOD_T'
|| _fld_real:='PR_DOD_P'
|? _tab='SAMK' & _fld='PR_DO2_T'
|| _fld_real:='PR_DOD_D'
|| _fld_real:=_fld-2
?};
_value_real:=($(_tab+'.'+_fld_real))();
_value_time:=exec('float2time','#convert',_value_real);
($(_tab+'.'+_fld+':=_a'))(_value_time);
_value_time


\fld_time2real
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: Wylicza wartość pola REAL na podstawie wartości pola TIME
::   WE: _a - STRING - akronim tabeli
::       _b - STRING - akronim pola TIME
::   WY: REAL - przeliczona wartość
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_fld:=_b;
{? _tab='SAMK' & _fld='PR_DOD_T'
|| _fld_real:='PR_DOD_P'
|? _tab='SAMK' & _fld='PR_DO2_T'
|| _fld_real:='PR_DOD_D'
|| _fld_real:=_fld-2
?};
_value_time:=($(_a+'.'+_fld))();
_value_real:=exec('time2float','#convert',_value_time);
($(_a+'.'+_fld_real+':=_a'))(_value_real);
_value_real


\fld_real_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: po redakcji pola REAL zawierającego czas
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('tab_acr','#table',cur_tfld());
_fld:=cur_afld();
{? _tab='SAMK' & _fld='PR_DOD_P'
|| _fld_time:='PR_DOD_T'
|? _tab='SAMK' & _fld='PR_DOD_D'
|| _fld_time:='PR_DO2_T'
|| _fld_time:=_fld+'_T'
?};
_result:=1;
{? _tab='SAMK' & (_fld='GJ' | _fld='GN' | _fld='GR' | _fld='GU' | _fld='GI')
|| _result:=exec('ae_godz','karty_drog')
?};
exec('fld_real2time','karty_drog',_tab,_fld_time);
_result


\fld_time_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: przed redakcją pola TIME
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('tab_acr','#table',cur_tfld());
_fld:=cur_afld();
_result:=1;
VAR_DEL.delete('TIME_BEFORE');
TIME_BEFORE:=exec('obj_new','#buf',_tab);
exec('fld_real2time','karty_drog',_tab,_fld);
win_disp();
TIME_BEFORE.get();
_result


\fld_time_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: po redakcji pola TIME
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('tab_acr','#table',cur_tfld());
_fld:=cur_afld();
_result:=1;
{? var_pres('TIME_BEFORE')>100
||
   _value_before:=($('TIME_BEFORE.'+_fld))();
   _value_current:=($(_tab+'.'+_fld))();
   {? _value_before<>_value_current
   || exec('fld_time2real','karty_drog',_tab,_fld);
      {? _tab='SAMK' & (_fld='GJ_T' | _fld='GN_T' | _fld='GR_T' | _fld='GU_T' | _fld='GI_T')
      || _result:=exec('ae_godz','karty_drog')
      ?}
   ?};
   win_disp()
?};
VAR_DEL.delete('TIME_BEFORE');
_result


\samk_rekprz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: przed rekordem tabeli SAMK, okno WERK
::   WE: _a - wskazanie czy ostatni odrysowany rekord
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _bez:='';
   {? SAMK.STATUS='T'
   || _bez:='PUA'
   |? SAMK.STATUS='S'
   || _bez:='AC(T)FIOPRTWZ'
   || _bez:='F'
   ?};
   SAMK.actions_grayed('WER',_bez)
?};
exec('rekprzed','color','SAMK#01#')


\chk_rodzpal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: sprawdzanie wypelnienia na rekord dla rodzajow paliwa
::   WY: czy wypelniono pole
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(RODZPAL,,'KOD');
{? _wyn=''
|| {? __CHK.index(RODZPAL,-menu_txt(,)='popraw')<>''
   || _wyn:='KOD'
   ?}
?};
{? _wyn='' & RODZPAL.AC<=0
|| FUN.info('Cena musi być większa od zera.'@);
   _wyn:='AC'
?};
_wyn


\usu_rodzpal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: Formula przed usunieciem rodzaju paliwa
::   WY: 1 - mozna usuwac, 0 - rekord powiazany
::----------------------------------------------------------------------------------------------------------------------
{? RODZPAL.count()>0
|| FUN.info('Wskazany rodzaj paliwa jest wykorzystywany\nw systemie i nie można go usunąć.'@);
   0
|| 1
?}


\ae_samk_motgdp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.37]
:: OPIS: Formula po redakcji pola SAMK.MOTGD_P (motogodziny - początek)
::----------------------------------------------------------------------------------------------------------------------
_mtg:=SAMK.MOTGD_K-SAMK.MOTGD_P;
{? _mtg<0
|| _mtg:=0
?};
SAMK.MOTGD:=_mtg;
1


\ae_samk_motgdk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.37]
:: OPIS: Formula po redakcji pola SAMK.MOTGD_K (motogodziny - koniec)
::----------------------------------------------------------------------------------------------------------------------
{? SAMK.MOTGD_K>=SAMK.MOTGD_P
|| _mtg:=SAMK.MOTGD_K-SAMK.MOTGD_P;
   _wyn:=1
|| _mtg:=0;
   _wyn:=0;
   FUN.emsg('Stan końcowy motogodzin nie może być mniejszy od początkowego.'@)
?};
SAMK.MOTGD:=_mtg;
_wyn


\samk_test_mtg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.37]
:: OPIS: Formula testuje ciaglosc wpisanych motogodzin dla zatwierdzanych kart.
::   WE: Test wykonywany jest dla biezacej karty biezacego pojazdu
::   WY: 1 - ok, 0 - wystapil problem - zatwierdzana karta pokrywa się z wczesniej zatwierdzonymi
::----------------------------------------------------------------------------------------------------------------------
_wy:=1;
VAR_DEL.delete('__SAMK');
_sql:='Select * from SAMK where SAMK.POJAZD='''+$SAMK.POJAZD
   +''' and SAMK.STATUS=''T'' and SAMK.MOTGD_K>'+form(SAMK.MOTGD_P,,,'0.');
__SAMK:=sql(_sql);
{? __SAMK.first() || _wy:=0 ?};
_wy

:Sign Version 2.0 jowisz:1045 2023/08/10 15:47:51 817e7f3f09b10768c3860af911cc685788e972784f0d5921258bb166b1a8afa76b4c84ad8a60438fad5b9aef5947c4e90a59ceea0ce4d7ef272d45be00afbcd41fb43393c531051eef5103b3604777ca29b237a79912fe3ca8000b548dfe2c90284b0826bf8634afedbdbf8cdabb037e3a6c1dcd43baf1cd0837ba75e9b0bd27
