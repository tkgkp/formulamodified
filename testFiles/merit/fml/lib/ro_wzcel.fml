:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ro_wzcel.fml
:: Utworzony: 26.01.2018
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły weryfikujące realizację celu przetwarzania danych.
::======================================================================================================================
:: Zakłada się, że formuły są wykonywane w odpowiednim kontekście - przy ustawionym buforze tabeli głównej.
:: UWAGA: formuły są wywoływane w dwóch sytuacjach:
::          - Podczas udzielania indywidualnej odpowiedzi na żądanie.
::          - Podczas grupowego wyszukiwania danych, które mogą być zapomniane.
::======================================================================================================================


\_osobakali
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła sprawdza, czy OSOBA jest "wykorzystywana" personelowo.
::   WE:
::   WY: Kody współpracy otoczone przecinkami lub napis pusty (np. '' lub ',P,' lub ',P,Z,').
::----------------------------------------------------------------------------------------------------------------------
_ret:=',';

_fzatr:=var_pres('F_ZATR',P)=26;
_jf:=var_pres('FIRMA',P)=26;

P.cntx_psh();
P.prefix();
P.f_set(
   {? _jf || 'FIRMA,' || '' ?}+'OSOBA',,
   {? _jf || '"P".FIRMA=:_a and ' || '' ?}+'"P".OSOBA=:_b',
   REF.FIRMA,OSOBA.ref()
);
{? P.f_first()
|| {? _fzatr
   || F_ZATR.cntx_psh();
      F_ZATR.prefix();
      {!
      |? _fz:=P.F_ZATR().KOD;
         {? _ret*(','+_fz+',')=0
         || _ret+=_fz+','
         ?};
         P.f_next()
      !};
      F_ZATR.cntx_pop()
   || _ret+='P,'
   ?}
?};
P.f_clear();
P.cntx_pop();

{? ~_fzatr
|| PRZ.cntx_psh();
   PRZ.prefix();
   PRZ.f_set('OSOBA',,'"PRZ".OSOBA=:_a',OSOBA.ref());
   {? PRZ.f_first()
   || _ret+='Z,'
   ?};
   PRZ.f_clear();
   PRZ.cntx_pop()
?};

{? _ret=','
|| _ret:=''
?};

_ret


\umprac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła sprawdza, czy w systemie istnieją informacje, związane z bieżącym rekordem tabeli OSOBA, dotyczące
::       umów o pracę.
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_osobakali:=exec('_osobakali','ro_wzcel');
_osobakali='' | _osobakali*',P,'


\umzlec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła sprawdza, czy w systemie istnieją informacje,związane z bieżącym rekordem tabeli OSOBA, dotyczące
::       umów cywilnoprawnych.
::       rekordem tabeli OSOBA.
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_TAB:=sql(
   'select distinct RU.K '+
   'from ZC join RU using(ZC.RU,RU.REFERENCE) '+
   'where ZC.OSOBA=:_a '+
   'order by RU.K',
   OSOBA.ref()
);
{? _TAB.size()=1 & _TAB.find_key('m',)
:: Jeżeli jedynym rodzajem zawartej umowy jest m - prawa majątkowe, to uznajemy, że celem nie jest umowa cywilnoprawna
:: (tylko prawa majątkowe po zmarłym pracowniku).
|| return(0)
?};

exec('_osobakali','ro_wzcel')*',Z,'


\kontrakt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła sprawdza, czy w systemie istnieją informacje, związane z bieżącym rekordem tabeli OSOBA, dotyczące
::       umów kontraktowych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('_osobakali','ro_wzcel')*',K,'


\spadkobierca
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła sprawdza, czy w systemie istnieją informacje dotyczące wypłaty (umowy) z tytułu praw majątkowych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=sql(
   'select distinct RU.K '+
   'from ZC join RU using(ZC.RU,RU.REFERENCE) '+
   'where ZC.OSOBA=:_a '+
   'order by RU.K',
   OSOBA.ref()
);
_TAB.find_key('m',)


\rcp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Formuła sprawdza, czy w systemie istnieją informacje, związane z bieżącym rekordem tabeli OSOBA, dotyczące
::       prowadzenia ewidencji czasu pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('_osobakali','ro_wzcel')*',R,'


\tymczas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Formuła sprawdza, czy w systemie istnieją informacje, związane z bieżącym rekordem tabeli OSOBA, dotyczące
::       realizacji postanowień umowy o pracę tymczasową
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('_osobakali','ro_wzcel')*',T,'


\rp7_os
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła sprawdza, czy bieżący odbiorca RP7 został wprowadzony "ręcznie" - nie ma swojego odpowiednika wśród
::       pracowników.
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('P',RP7_OS)=26 & RP7_OS.P<>null()
:: Jeżeli w schemacie występuje juz relacja do P i jest uzupełniona, to odbiorca RP7 na pewno ma swój odpowiednik
:: wśród pracowników. Określenie okresu retencji i zapomnienie będzie się zatem odbywać z tamtego poziomu.
|| return(0)

|? RP7_OS.PESEL='' & RP7_OS.NIP='' & RP7_OS.DOWOD='' & RP7_OS.PASZPORT=''
|| return(0)
?};

exec('init','rod');
_RODO:=obj_new(@.CLASS.RODO);

_uni:=obj_new('PESEL','NIP','DOWOD','PASZPORT');
_uni.PESEL:=_RODO.unify('PESEL',RP7_OS.PESEL);
_uni.NIP:=_RODO.unify('NIP',RP7_OS.NIP);
_uni.DOWOD:=_RODO.unify('DOWOD',RP7_OS.DOWOD);
_uni.PASZPORT:=_RODO.unify('PASZPORT',RP7_OS.PASZPORT);

_ret:=1;
OSOBA.cntx_psh();
OSOBA.prefix();
_loop:=OSOBA.first();
{!
|? _loop
|! {? _RODO.equal('PESEL',_uni.PESEL,OSOBA.PESEL) |
      _RODO.equal('NIP',_uni.NIP,OSOBA.NIP) |
      _RODO.equal('DOWOD',_uni.DOWOD,OSOBA.DOWOD) |
      _RODO.equal('PASZPORT',_uni.PASZPORT,OSOBA.PASZPORT)
   || _ret:=~exec('umprac','ro_wzcel')
   ?};
   _loop:=_ret & OSOBA.next()
!};
OSOBA.cntx_pop();
_ret


\szk_tren
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła sprawdza, czy bieżący trener jest trenerem zewnętrznym (nie jest pracownikiem / zleceniobiorcą).
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
ZZ_OSOBA.cntx_psh();
ZZ_OSOBA.prefix();
_zz_link:=SZK_TREN.ZZ_OSOBA().ZZ_LINK;
ZZ_OSOBA.cntx_pop();

P.cntx_psh();
P.prefix();
P.f_set('ZZ_DOK',,'"P".ZZ_DOK=:_a',_zz_link);
_s1:=P.f_first();
P.f_clear();
P.cntx_pop();

{? var_pres('F_ZATR',P)=26
:: Jeżeli w P jest już forma współpracy, to są tam również zleceniobiorcy.
|| _s2:=0
|| PRZ.cntx_psh();
   PRZ.prefix();
   PRZ.f_set('ZZ_DOK',,'"PRZ".ZZ_DOK=:_a',_zz_link);
   _s2:=PRZ.f_size();
   PRZ.f_clear();
   PRZ.cntx_pop()
?};

_s1=0 & _s2=0


\wierzyciel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła sprawdza, czy bieżący rekord tabeli ADRES jest wykorzystywany jako wierzyciel w potrąceniach
::       komorniczych.
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
sql('select KOM_OS.REFERENCE as REF from KOM_OS where KOM_OS.WIE=:_a',ADRES.ref()).first()


\kh_odb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła sprawdza czy odbiorca kontrahenta (bieżący rekord KH_ODB) wykorzystany w danych
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_count:=KH_ODB.count();
:: zapis tylko w KH_ODB
{? _count=0 || return(1) ?};
_Tl:=KH_ODB.testlink();
:: zapisy tylko w innej firmie
{? ~_Tl.first() || return(0) ?};
_size:=_Tl.size();
:: zapisy tylko w bieżacej firmie
{? _count=_size || return(1) ?};
:: zapisy w różnych firmach
:: tutaj minusujemy _size o wystąpienia w definicji
:: tylko definicja
{? _size=0 || return(0) ?};
:: pozostałe użycia
:: nie trzeba nic więcej sprawdzać
1


\kh_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła sprawdza czy miejsce dostawy kontrahenta (bieżący rekord KH_MSC) wykorzystany w danych
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? KH_MSC.count()=0 | KH_MSC.count()=KH_MSC.testlink().size() || return(1) ?};
0


\han
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła sprawdza czy handlowiec (bieżący rekord HAN) wykorzystany w danych
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
::_Tl:=HAN.testlink();
:: ETYPY
:: I_USERS
:: KH_DOD
:: ???
{? HAN.count()=0 | HAN.count()=HAN.testlink().size() || return(1) ?};
0


\istw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła sprawdza czy wypełniający intrastat (bieżący rekord HAN) wykorzystany w danych
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
1


\istz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła sprawdza czy zobowiązany do intrastat (bieżący rekord HAN) wykorzystany w danych
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
1


\find
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Szuka wartości _a w polu _c we wszystkich maskach tabeli _b
::   WE: _a - szukana wartość
::       _b - tabela
::       _c - akronim pola
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_val:=_a;
_Tab:=_b;
_fld_acr:=_c;

_result:=0;

_ndx:=_Tab.ndx_tmp(,,_fld_acr,,,_fld_acr,,);
_Names:=_Tab.names();
_loop:=_Names.first();
{!
|? _loop
|!
   _Tab.use(_Names.NAME);
   _Tab.index(_ndx);
   _Tab.prefix(_val,_val);
   _result:=_Tab.first();
   _loop:=~_result & _Names.next()
!};
_Tab.ndx_drop();
_result


\tl_find
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Sprawdza czy występuje rekord w tabeli _a ograniczonej _b
::   WE: _a - tabela wynik metody testlink
::       _b - akronim tabeli
::       _c - akronim pola
::       _d - wartość do porównania
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_Tl:=_a;
_tab_acr:=_b;
_fld_acr:=_c;
_val:=_d;

_result:=0;

_Tab:=($_tab_acr)();
_fld_val:=$(_tab_acr+'.'+_fld_acr);

_Tab.cntx_psh();
_Tl.prefix(_tab_acr);
_loop:=_Tl.last();
{!
|? _loop
|!
   _Tab.use(_Tl.NAME);
   _Tab.prefix();
   _result:=_Tab.seek(_Tl.REF,) & _fld_val()=_val;
   _loop:=~_result & _Tl.next()
!};
_Tab.cntx_pop();
_result


\tl_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Zwraca ilość rekordów w tabeli _a ograniczonej _b
::   WE: _a - tabela wynik metody testlink
::       _b - wartość do prefix
::   WY: ilość rekordów
::----------------------------------------------------------------------------------------------------------------------
_Tl:=_a;
_prfx:=_b;
_Tl.prefix(_prfx);
_Tl.size()


\kh_skip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Wykluczenie z tabeli _a zapisów niedotyczących bieżącej firmy
::   WE: _a - tabela wynik metody testlink
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: wersja 1802
:: FAKZ
_usun:=0;


_usun


\kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła sprawdza, czy dla kontrahenta są zdefiniowane struktury
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
:: wersja jednofirmowa
{? REF.WFIRM=0 || return(1) ?};
_kh:=KH.ref();
_count:=KH.count();
:: zapis tylko w KH
{? _count=0 || return(1) ?};
_Tl:=KH.testlink();
:: pominięcie zapisów dotyczących innych firm z _Tl
_count-=exec('kh_skip','ro_wzcel',_Tl);
:: zapisy tylko w innej firmie
{? ~_Tl.first()
||
:: sprawdzenie SLO
   return(exec('sprkhslo','ro_wzcel',_kh,0))
?};
_size:=_Tl.size();
:: zapisy tylko w bieżacej firmie
{? _count=_size || return(1) ?};
:: zapisy w różnych firmach
:: tylko definicja
:: tutaj minusujemy _size o wystąpienia w definicji
:: tabela GIODO
_size-=exec('tl_size','ro_wzcel',_Tl,'GIODO');
:: użytkownicy internetowi
{? var_pres('I_USERS')>0 || _size-=exec('tl_size','ro_wzcel',_Tl,'I_USERS') ?};
:: NIP-y UE
_size-=exec('tl_size','ro_wzcel',_Tl,'NIPY');
:: adresy korespondencyjne
_size-=exec('tl_size','ro_wzcel',_Tl,'OS_ADRES');
:: historia sprawdzeń symbolu NIP
{? var_pres('KHCHKNIP')>0 || _size-=exec('tl_size','ro_wzcel',_Tl,'KHCHKNIP') ?};
:: kontrahenci - dane firmy
{? var_pres('KH_DOD')>0 || _size-=exec('tl_size','ro_wzcel',_Tl,'KH_DOD') ?};
:: zezwolenia na wystawianie dokumentów elektronicznych
_size-=exec('tl_size','ro_wzcel',_Tl,'DEZEZW');
:: branże kontrahenta
_size-=exec('tl_size','ro_wzcel',_Tl,'KHBRANZE');
:: miejsca dostaw
_size-=exec('tl_size','ro_wzcel',_Tl,'KH_MSC');
:: odbiorcy kontrahenta
_size-=exec('tl_size','ro_wzcel',_Tl,'KH_ODB');
:: osoby kontaktowe
_size-=exec('tl_size','ro_wzcel',_Tl,'KH_OSOB');
:: kody kreskowe, kontrahenta
_size-=exec('tl_size','ro_wzcel',_Tl,'MKODK');
:: domyślne stawki VAT dla kontrahenta i materiału
_size-=exec('tl_size','ro_wzcel',_Tl,'M_KH_SV');
{? _size=0
||
:: sprawdzenie SLO
   return(exec('sprkhslo','ro_wzcel',_kh,0))
?};
:: pozostałe użycia
:: nie trzeba nic więcej sprawdzać
1


\kh1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dla kontrahenta są zdefiniowane struktury
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? REF.WFIRM
|| _ret:=1
||
:: sprawdzenie, czy kontrahent nie ma żadnych powiązań - jeśli tak od razu jest pokazywany dla celu
   _count:=KH.count();
   _ret:=(_count=0);
   _kh:=KH.ref();
:: sprawdzenie, czy kontrahent zawiera wyłącznie własne dane
   {? ~_ret
   ||
:: tabela GIODO
      _ile:=exec('spr_tabs','ro_wzcel',GIODO,'KH');
:: użytkownicy internetowi
      {? var_pres('I_USERS')>0 || _ile+=exec('spr_tabs','ro_wzcel',I_USERS,'KH') ?};
:: NIP-y UE
      _ile+=exec('spr_tabs','ro_wzcel',NIPY,'KH');
:: adresy korespondencyjne
      _ile+=exec('spr_tabs','ro_wzcel',OS_ADRES,'KH');
:: historia sprawdzeń symbolu NIP
      {? var_pres('KHCHKNIP')>0 || _ile+=exec('spr_tabs','ro_wzcel',KHCHKNIP,'KH') ?};
:: kontrahenci - dane firmy
      {? var_pres('KH_DOD')>0 || _ile+=exec('spr_tabs','ro_wzcel',KH_DOD,'KH') ?};
:: zezwolenia na wystawianie dokumentów elektronicznych
      _ile+=exec('spr_tabs','ro_wzcel',DEZEZW,'KH');
:: branże kontrahenta
      _ile+=exec('spr_tabs','ro_wzcel',KHBRANZE,'KH');
:: miejsca dostaw
      _ile+=exec('spr_tabs','ro_wzcel',KH_MSC,'KH');
:: odbiorcy kontrahenta
      _ile+=exec('spr_tabs','ro_wzcel',KH_ODB,'KH');
      {? var_pres('KH_LNK',KH_ODB)>0 || _ile+=exec('spr_tabs','ro_wzcel',KH_ODB,'KH_LNK') ?};
:: osoby kontaktowe
      _ile+=exec('spr_tabs','ro_wzcel',KH_OSOB,'KH');
:: kody kreskowe, kontrahenta
      _ile+=exec('spr_tabs','ro_wzcel',MKODK,'KH');
:: domyślne stawki VAT dla kontrahenta i materiału
      _ile+=exec('spr_tabs','ro_wzcel',M_KH_SV,'KH');
::
      {? _count=_ile || _ret:=1 ?}
   ?};
   _kh_tl:=KH.testlink();

:: kontrahent ma więcej niż własne dane - sprawdzanie w strukturach
:: sprawdzanie w umowach długoterminowych
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',UDT,'ZLEC',KH.ref()) ?};
:: sprawdzenie w schematach windykacyjnych
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',SER_WOW,'KH',KH.ref()) ?};
:: sprawdzenie w środkach trwałych
   {? ~_ret & var_pres('SROD')>0 || _ret:=exec('spr_tab','ro_wzcel',SROD,'KH',KH.ref()) ?};
:: sprawdzenie w pulpicie windykatora
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',WIND_KH,'KH',KH.ref()) ?};
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',WIND_OP,'KH',KH.ref()) ?};
:: Zdarzenia związane z kontrahentem
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',ZDARZ,'KH',KH.ref()) ?};
:: sprawdzanie w dokumentach powiązanych (kontaktach)
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',DOKUM,'KH',KH.ref()) ?};
:: sprawdzenie w dokumentach księgowych
   {? ~_ret || _ret:=exec('spr_dok','ro_wzcel') ?};
:: sprawdzenie w rozrachunkach
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',OP,'KH',KH.ref()) ?};
:: sprawdzenie w dokumentach w obiegu
   {? ~_ret || _ret:=exec('spr_edok','ro_wzcel') ?};
:: sprawdzenie w przelewach
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',PB,'KH',KH.ref()) ?};
:: sprawdzenie w wyciągach bankowych
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',PW,'KH',KH.ref()) ?};
:: sprawdzenie w korespondencji seryjnej
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',SER_NAG,'KH',KH.ref()) ?};

:: LOGISTYKA
:: nagłówki operacji - kody kreskowe
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',EANN,'KH',_kh) ?};
:: dziennik zdarzeń EDI
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',EDI_I,'KH',_kh) ?};
:: faktury
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',FAKS,'KH',_kh) ?};
:: zlecenia fakturowania
   {? ~_ret & var_pres('FAKS_Z')>0 || _ret:=exec('spr_tab','ro_wzcel',FAKS_Z,'KH',_kh) ?};
:: powiązania pomiędzy fakturami zaliczkowymi, końcowymi
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',FAPOW,'KH',_kh) ?};
:: nagłówki dokumentów magazynowych
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',ND,'KH',_kh) ?};
:: dostawcy dla materiału
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',MDOST,'KH',_kh) ?};
:: strefa magazynowania
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',MG_GR,'KH',_kh) ?};
:: oferty
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',OFE,'KH',_kh) ?};
:: pozycje ofert
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',OFP,'KH',_kh) ?};
:: nagłowek dokumentu opakowań
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',OPAK_N,'KH',_kh) ?};
:: stany opakowań
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',OPAK_SM,'KH',_kh) ?};
:: plan dostaw - koszyk
   {? ~_ret & var_pres('PD_K')>0 || _ret:=exec('spr_tab','ro_wzcel',PD_K,'KH',_kh) ?};
:: okresy i parametry dla użytkowników
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',OZ,'ZK_KH',KH.ref()) ?};
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',OZ,'ZD_KH',KH.ref()) ?};
:: pozycje planu sprzedaży
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',PSP,'KH',_kh) ?};
:: rezerwacje dla pozycji zamówień, tymczasowe, wydania
   {? ~_ret & var_pres('REZ')>0 || _ret:=exec('spr_tab','ro_wzcel',REZ,'KH',_kh) ?};
:: nagłówki cenników
   _ret:=exec('spr_tab','ro_wzcel',TAR,'KH',_kh);
:: cenniki pozycje grup uprawnień
   {? ~_ret & var_pres('TARGP')>0 || _ret:=exec('spr_tab','ro_wzcel',TARGP,'KH',_kh) ?};
:: typy dokumentów sprzedaży i zakupu
   _ret:=exec('spr_tab','ro_wzcel',TYPYSP,'KH',_kh);
:: parametry i okienka wydruków
   _ret:=exec('spr_tab','ro_wzcel',WYDRUKIL,'KH_OD',_kh);
   _ret:=exec('spr_tab','ro_wzcel',WYDRUKIL,'KH_DO',_kh);

:: PRODUKCJA
:: okno rejestracji produkcji
   {? ~_ret & var_pres('PROD_REJ')>0 || _ret:=exec('spr_tab','ro_wzcel',PROD_REJ,'KH',_kh) ?};
:: wielowymiarowy plan pojemnościowy - obiekty planowane
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',PX_OBJ,'KH',_kh) ?};
:: operacje/czynności procesu technologicznego
   {? ~_ret & var_pres('KONTRAH',TOPER)>0 || _ret:=exec('spr_tab','ro_wzcel',TOPER,'KONTRAH',_kh) ?};
:: taryfikator operacji zewnętrznych (w kooperacji)
   {? ~_ret & var_pres('KONTRAH',TTOUT)>0 || _ret:=exec('spr_tab','ro_wzcel',TTOUT,'KONTRAH',_kh) ?};

:: UMOWY
:: paczka faktur
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',FPACZ,'KH_OD',_kh) ?};
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',FPACZ,'KH_DO',_kh) ?};
:: karty ewidencji odpadów
   {? ~_ret & var_pres('KEO')>0 || _ret:=exec('spr_tab','ro_wzcel',KEO,'KH',_kh) ?};
:: karty przekazania odpadów
   {? ~_ret & var_pres('KPO')>0 || _ret:=exec('spr_tab','ro_wzcel',KPO,'KH',_kh) ?};
   {? ~_ret & var_pres('KPO')>0 || _ret:=exec('spr_tab','ro_wzcel',KPO,'KHP',_kh) ?};
:: transporty do karty przekazania odpadów
   {? ~_ret & var_pres('KPOT')>0 || _ret:=exec('spr_tab','ro_wzcel',KPOT,'KH',_kh) ?};
:: posesje
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',POS,'KH',_kh) ?};
:: umowy kontrahenta
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',UM,'KH',_kh) ?};
:: umowa miejska
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',UMM,'KH',_kh) ?};

:: PROJEKTY
:: nagłówki projektów
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',PROJEKTY,'KH',_kh) ?};
:: zasoby dla zadań (RMS)
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',PROJRMS,'PODWYKON',_kh) ?};
:: sprzęty zewnętrzne
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',PROJSZ,'KH',_kh) ?};
:: umowy - sprzęty zewnetrzne i podwykonawcy
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',PROJSZU,'PODWYKON',_kh) ?};


:: WYPOSAŻENIE
:: rejestr wydań i zwrotów wyposażenia
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',KARO,'KH',_kh) ?};

:: MOBILNY HANDLOWIEC
:: wpłaty gotówkowe dla mobilnego handlowca
   {? ~_ret || _ret:=exec('spr_tab','ro_wzcel',MBWPL,'KH',_kh) ?};
:: dziennik zdarzeń dla mobilnego handlowca
   {? ~_ret & var_pres('MBZAD')>0 || _ret:=exec('spr_tab','ro_wzcel',MBZAD,'KH',_kh) ?}
?};
_ret


\spr_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dla kontrahent jest wykorzystywany w dokumentach księgowych
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
DOK.cntx_psh();
_ndx1:=SLO.ndx_tmp(,1,'SLU','WZ',0,'KOD',,0,'KOD',,0);
SLO.cntx_psh(); SLO.index(_ndx1); SLO.prefix('Kontrahent',KH.KOD,KH.KOD);
{? SLO.first()
|| _tab:=DOK.names();
   _ndx2:=DOK.ndx_tmp(,1,'WYS',,0);
   {! |?
      {? _tab.last()
      || {! |?
            DOK.use(_tab.NAME); DOK.index(_ndx2); DOK.prefix(SLO.ref());
            _ret:=DOK.first();
            ~_ret & _tab.prev()
         !}
      ?};
      ~_ret & SLO.next()
   !};
   DOK.ndx_drop()
?};
SLO.cntx_pop(); DOK.cntx_pop(); SLO.ndx_drop();
_ret


\spr_edok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dla kontrahent jest wykorzystywany w dokumentach w obiegu
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
EDOKUM.cntx_psh(); _tab:=EDOKUM.names();
{? type_of('KHKH',EDOKUM)>0
|| _ndx:=EDOKUM.ndx_tmp(,1,'KHKH',,0);
   {? _tab.last()
   || {! |?
         EDOKUM.use(_tab.NAME); EDOKUM.index(_ndx); EDOKUM.prefix(KH.ref());
         _ret:=EDOKUM.first();
         ~_ret & _tab.prev()
      !}
   ?};
   EDOKUM.ndx_drop()
|| _ndx1:=SLO.ndx_tmp(,1,'SLU','WZ',0,'KOD',,0,'KOD',,0);
   SLO.cntx_psh(); SLO.index(_ndx1); SLO.prefix('Kontrahent',KH.KOD,KH.KOD);
   {? SLO.first()
   || _ndx2:=EDOKUM.ndx_tmp(,1,'KH',,0);
      {! |?
         {? _tab.last()
         || {! |?
               EDOKUM.use(_tab.NAME); EDOKUM.index(_ndx2); EDOKUM.prefix(SLO.ref());
               _ret:=EDOKUM.first();
               ~_ret & _tab.prev()
            !}
         ?};
         ~_ret & SLO.next()
      !};
      EDOKUM.ndx_drop()
   ?};
   SLO.cntx_pop(); SLO.ndx_drop()
?};
EDOKUM.cntx_pop();
_ret


\spr_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy wartość prefiksowana (_c) występuje w kartotece w prefiksowanym polu
::   WE: _a - alias do sprawdzanej tabeli maskowanej
::       _b - akronim pola prefiksowanego
::       _c - prefiks
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_tab:=_a.names();
_ndx:=_a.ndx_tmp(,1,_b,,0);
_a.cntx_psh();
{? _tab.last()
|| {! |?
      _a.use(_tab.NAME); _a.index(_ndx); _a.prefix(_c);
      _ret:=_a.first();
      ~_ret & _tab.prev()
   !}
?};
_a.cntx_pop(); _a.ndx_drop();
_ret


\spr_tabs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, liczbę złączeń do kontrahenta w kartotece
::   WE: _a - alias do sprawdzanej tabeli maskowanej
::       _b - akronim pola ze wskazaniem do KH
::   WY: INTEGER - liczba złączeń do KH
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_tab:=_a.names();
_ndx:=_a.ndx_tmp(,1,_b,,0);
_a.cntx_psh();
{? _tab.last()
|| {! |?
      _a.use(_tab.NAME); _a.index(_ndx); _a.prefix(KH.ref());
      _ret+=_a.size();
      _tab.prev()
   !}
?};
_a.cntx_pop(); _a.ndx_drop();
_ret


\sprkhslo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła zwraca zakres SLO dla KH
::   WE: _a - dotychczasowa odpowiedź
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_odp:=_a;
_ret:=0;
_ndx1:=SLO.ndx_tmp(,1,'SLU','WZ',0,'KOD',,0,'KOD',,0);
SLO.cntx_psh(); SLO.index(_ndx1); SLO.prefix('Kontrahent',KH.KOD,KH.KOD);
{? SLO.first()
||
   {!
   |?
      _ret:=exec('slo_kh','ro_wzcel',_odp);
      _ret=0 & SLO.next()
   !}
?};
SLO.cntx_pop(); SLO.ndx_drop();
_ret


\slo_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła sprawdza czy kontrahent (bieżący rekord SLO) wykorzystany w danych
::   WE: _a - dotychczasowa odpowiedź
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_odp:=_a;
_count:=SLO.count();
:: zapis tylko w SLO
{? _count=0 || return(_odp) ?};
_Tl:=SLO.testlink();
:: zapisy tylko w innej firmie
{? ~_Tl.first() || return(0) ?};
_size:=_Tl.size();
:: zapisy tylko w bieżacej firmie
{? _count=_size || return(1) ?};
:: zapisy w różnych firmach
:: tutaj minusujemy _size o wystąpienia w definicji
:: tylko definicja
{? _size=0 || return(0) ?};
:: pozostałe użycia
:: nie trzeba nic więcej sprawdzać
1

:Sign Version 2.0 jowisz:1028 2019/10/14 09:21:35 18a17c15a6a20784823c8025864882c2c349d2fc3f3e1bb92868d00f20f2e17b9a6a380c559b8644ba3c7cd00af2b6b5c822d17d3984d284a2ff75701ce7b05379c0771741d3da8957c1a1a7e5f078a35a3932531dffe66ce3e50cd70b4f9ef29530c3f71a15efb09face22825f73b97c17531c52ac61b8abccabb0a86aba016
