:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_rpl.fml [12.51]
:: Utworzony: 2019/05/09
:: Autor: jaws
:: Systemy: PPK
::======================================================================================================================
:: Zawartość: Formuły odpowiedzialne za obsługę kartoteki plików raportów.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli PPK_RPL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPK_RPL.R:=PPK_RPL.DATA~1;
PPK_RPL.M:=PPK_RPL.DATA~2;
1


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli PPK_RPL.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_rpl');

:: ustal numer kolejny w miesiącu
PPK_RPL.NUMER:=exec('numer','ppk_rpl');

:: stan początkowy
PPK_RPL.LICZ_BL:=0;
PPK_RPL.LICZ_OS:=0;
PPK_RPL.BLEDY:='N';

exec('_chk','ppk_rpl',0)


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli PPK_RPL.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_rpl');
PPK_RPL.BLEDY:={? PPK_RPL.LICZ_BL<>0 | PPK_RPL.LICZ_OS<>0 || 'T' || 'N' ?};
exec('_chk','ppk_rpl',1)


\_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po popraw" tabeli PPK_RPL.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? PPK_RPL.WYS_STAT<>bfld('WYS_STAT')
|| PPK_RTP.cntx_psh();
   PPK_RTP.index('OPIS');
   PPK_RTP.prefix(PPK_RPL.ref());
   {? PPK_RTP.find_tab(,'PPK_XEL','SYMBOL','=','REJESTRACJA')
   || PPK_UCZ.cntx_psh();
      PPK_UCZ.prefix();
      PPK_RUC.cntx_psh();
      PPK_RUC.prefix();
      PPK_RAP.cntx_psh();
      PPK_RAP.index('OSOBA');
      PPK_RAP.prefix(PPK_RTP.ref());
      _loop:=PPK_RAP.first();
      {!
      |? _loop
      |! {? PPK_RAP.PPK_RUC().PPK_UCZ().ID_PPK=''
         || {? PPK_UCZ.ZG='N' & PPK_RPL.WYS_STAT='T'
            || PPK_UCZ.ZG:='T';
               PPK_UCZ.put()
            |? PPK_UCZ.ZG='T' & PPK_RPL.WYS_STAT='N'
            || PPK_UCZ.ZG:='N';
               PPK_UCZ.put()
            ?}
         ?};
         _loop:=PPK_RAP.next()
      !};
      PPK_RAP.cntx_pop();
      PPK_RUC.cntx_pop();
      PPK_UCZ.cntx_pop()
   ?};
   PPK_RTP.cntx_pop()
?};
~~


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli PPK_RPL.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
{? PPK_RPL.WYS_STAT='T'
|| return(0)
?};

exec('del_ndx','#table',PPK_RTP,'UNIQUE',PPK_RPL.ref()) &
exec('del_ndx','#table',PPK_RUC,'UNIQUE',PPK_RPL.ref()) &
exec('del_ndx','#table',PPK_RDA,'NUMER',PPK_RPL.ref()) &
exec('del_ndx','#table',PPK_RBL,'NUMER',PPK_RPL.ref()) &
exec('del_ndx','#table',PPK_RPZ,'RODZAJ',PPK_RPL.ref())


\_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PPK_RPL.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(PPK_RPL,
   $("_a.table(_b,"+$_put+",,'DATA','PPK_XWE')"),
   "  {? PPK_RPL.R<1999 | PPK_RPL.R>9999
      || _a.err_fld(_b,'R',1)
      |? PPK_RPL.M<1 | PPK_RPL.M>12
      || _a.err_fld(_b,'M',1)
      || 1
      ?}
   "
)


\numer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Ustala numer kolejny raportu.
::   WE:
::   WY: numer kolejny
::----------------------------------------------------------------------------------------------------------------------
_numer:=0;
PPK_RPL.cntx_psh();
PPK_RPL.index('NUMER');
PPK_RPL.prefix(PPK_RPL.PPK_UMO);
{? PPK_RPL.first()
|| _numer:=PPK_RPL.NUMER
?};
PPK_RPL.cntx_pop();
_numer+1


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wskazanie aktualnego pliku raportów.
::   WE:
::   WY: wskazanie wiersza tabeli PPK_RPL
::----------------------------------------------------------------------------------------------------------------------
PPK_RPL.ref()


\xwe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wartość pola PPK_XWE bieżącego wiersza tabeli PPK_RPL.
::   WE:
::   WY: wskazanie wiersza tabeli PPK_RPL
::----------------------------------------------------------------------------------------------------------------------
PPK_RPL.PPK_XWE


\ust_fbe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Ustawia formuły przed redakcją dla pól R, M, PPK_XWE, WYS_STAT
::   WE: _a [INTEGER] - określenie możliwości zmiany pól:
::          brak - stan domyślny;
::          0 - można edytować R, M, PPK_XWE;
::          wpp - można edytować WYS_STAT
::
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_type:='BEFORE_EDIT';
{? var_pres('_a')<>type_of(0)
|| PPK_RPL.fld_fml('DATA',_type,"*");
   PPK_RPL.fld_fml('R',_type,"*");
   PPK_RPL.fld_fml('M',_type,"*");
   PPK_RPL.fld_fml('PPK_XWE',_type,"*");
   PPK_RPL.fld_fml('WYS_STAT',_type,"*")

|? _a=0
|| PPK_RPL.fld_fml('DATA',_type,"1");
   PPK_RPL.fld_fml('R',_type,"1");
   PPK_RPL.fld_fml('M',_type,"1");
   PPK_RPL.fld_fml('PPK_XWE',_type,"1");
   PPK_RPL.fld_fml('WYS_STAT',_type,"0")

|| PPK_RPL.fld_fml('DATA',_type,"0");
   PPK_RPL.fld_fml('R',_type,"0");
   PPK_RPL.fld_fml('M',_type,"0");
   PPK_RPL.fld_fml('PPK_XWE',_type,"0");
   PPK_RPL.fld_fml('WYS_STAT',_type,"1")
?};
~~


\wys_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji pola WYS_STAT tabeli PPK_RPL.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
PPK_RPL.WYS_DATA:=date();
PPK_RPL.WYS_KTO:=userdata();
1


\dod_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed dołączeniem w okienkach tabeli PPK_RPL.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('ust_fbe','ppk_rpl',0);
PPK_RPL.win_edit('DOD');
1


\pop_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed poprawieniem w okienkach tabeli PPK_RPL.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_in_use:=
   exec('jest_rtp','ppk_rpl')<>0 |
   exec('jest_ruc','ppk_rpl')<>0 |
   exec('jest_rtz','ppk_rpl')<>0;

exec('ust_fbe','ppk_rpl',_in_use);
PPK_RPL.win_edit('POP');
1


\jest_rtp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Sprawdza, czy dla pliku wymiany są określone typy raportów
::   WE: _a _PPK_RPL - plik wymiany danych
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ppk_rpl:={? type_of('_a')<>type_of(null) || PPK_RPL.ref() || _a ?};

PPK_RTP.cntx_psh();
PPK_RTP.index('UNIQUE');
PPK_RTP.prefix(_ppk_rpl);
_jest:=PPK_RTP.size();
PPK_RTP.cntx_pop();
_jest<>0


\jest_ruc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Sprawdza, czy dla pliku wymiany są uczestnicy
::   WE: _a _PPK_RPL - plik wymiany danych
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ppk_rpl:={? type_of('_a')<>type_of(null) || PPK_RPL.ref() || _a ?};

PPK_RUC.cntx_psh();
PPK_RUC.index('UNIQUE');
PPK_RUC.prefix(_ppk_rpl);
_jest:=PPK_RUC.size();
PPK_RUC.cntx_pop();
_jest<>0


\jest_rtz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Sprawdza, czy dla pliku wymiany są załączniki
::   WE: _a _PPK_RPL - plik wymiany danych
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ppk_rpl:={? type_of('_a')<>type_of(null) || PPK_RPL.ref() || _a ?};

PPK_RPZ.cntx_psh();
PPK_RPZ.index('RODZAJ');
PPK_RPZ.prefix(_ppk_rpl);
_jest:=PPK_RPZ.size();
PPK_RPZ.cntx_pop();
_jest<>0


\usu_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed usunięciem wiersza tabeli PPK_UCZ.
::   WE:
::   WY: 0/1 - możliwość wykonania akcji
::----------------------------------------------------------------------------------------------------------------------
{? PPK_RPL.WYS_STAT='T'
|| FUN.emsg('Plików oznaczonych jako wysłane nie można usunąć.'@);
   return(0)
?};
1


\rek_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji wiersza tabeli PPK_RPL.
::   WE:
::   WY: 1 w przypadku gdy rekord jest poprawny, akronim wymaganego pola
::----------------------------------------------------------------------------------------------------------------------
exec('_chk','ppk_rpl',-menu_txt()='popraw')


\wys_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Obsługa akcji "Wyświetl - przed".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPK_RPL.win_edit('POP');
PPK_RPL.display()


\gen_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Generuj" okienek tabeli PPK_RPL.
::   WE:
::   WY: 0/1 - wykonanie zasadniczej akcji (blokada/wykonanie)
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
PPK_RTP.cntx_psh();
PPK_RTP.index('OPIS');
PPK_RTP.prefix(PPK_RPL.ref());
{? ~PPK_RTP.first()
|| _ret:=0;
   FUN.info('Nie wybrano rodzajów raportów, operacja zakończona.')
?};
PPK_RTP.cntx_pop();

_ret



\gen_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Akcja "Generuj" okienek tabeli PPK_RPL.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('generuj','ppk_rpl');

PPK_RTP.index('OPIS');
PPK_RTP.prefix(PPK_RPL.ref());
PPK_RTP.first();

PPK_RUC.index('OSOBA');
PPK_RUC.prefix(PPK_RPL.ref());
PPK_RUC.first();
~~


\umo_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła przed akcją "Wybierz umowę" okienek tabeli PPK_RPL.
::   WE:
::   WY: 0/1 - umowa nie została wskazana/wybrano inną umowę
::----------------------------------------------------------------------------------------------------------------------
exec('wyb_umo','ppk')


\umo_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Formuła po akcji "Wybierz umowę" okienek tabeli PPK_RPL.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
grp_disp(PPK_RPL,'WER',1);
~~


\zaw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Obsługa akcji "Zawartość" okienek tabeli PPK_RPL.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('zaw_a','ppk_rda',PPK_RPL.ref(),0);
~~


\ble_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Obsługa akcji "Błędy" okienek tabeli PPK_RPL.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
PPK_RBL.cntx_psh();
PPK_RBL.index('NUMER');
PPK_RBL.prefix(PPK_RPL.ref());
PPK_RBL.first();
PPK_RBL.win_sel('WER');
PPK_RBL.select();
PPK_RBL.cntx_pop();
~~


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Udostępnia zawartość kartoteki PPK_RPL.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: ustal kontekst działania
{? exec('pre_sel','ppk')=0
|| return()
?};

_mode:='maximized_with_title';
:: panel zawierający informacje o zawartości raportów
_grp:=PPK_RPL.grp_make('Pliki wymiany danych',
:: przed otwarciem
   "  PPK_RPL.cntx_psh();
      PPK_RPL.index('NUMER');
      PPK_RPL.prefix(KST_PPK.PPK_UMO);
      PPK_RPL.index('PPK_RPL');
      PPK_RPL.prefix(KST_PPK.PPK_UMO);
      PPK_RPL.index('DATA');
      PPK_RPL.prefix(KST_PPK.PPK_UMO);
      PPK_RPZ.cntx_psh();
      PPK_RPZ.index('TYP');
      PPK_RUC.cntx_psh();
      PPK_RUC.index('OSOBA');
      PPK_RTP.cntx_psh();
      PPK_RTP.index('OPIS');
      PPK_RAP.cntx_psh();
      1
   ",
:: identyfikator
   '#ppk_rpl_grp',,,
:: podczas zamykania
   "  PPK_RPL.cntx_pop();
      PPK_RPZ.cntx_pop();
      PPK_RUC.cntx_pop();
      PPK_RTP.cntx_pop();
      PPK_RAP.cntx_pop();
      1
   "
);
:: lista wersji plików
PPK_RPL.grp_sel(_grp,PPK_RPL,'WER',,
:: po odświeżeniu
   "  _aid:='';
      {? PPK_RPL.WYS_STAT='T'
      || _aid+='puGO(P)'
      || _aid+='O(W)';
         {? exec('jest_ruc','ppk_rpl') | exec('jest_rtz','ppk_rpl')
         || _aid+='p'
         ?}
      ?};
      PPK_RPL.actions_grayed('WER',_aid);
      grp_disp(PPK_RPZ,'WER',1,1);
      grp_disp(PPK_RTP,'WER',1,1);
      grp_disp(PPK_RUC,'WER',1,1);
      ~~
   ",,,,
:: przed obsługą
   "  PPK_RPL.prefix(KST_PPK.PPK_UMO)
   ",,,,
:: tryb
   _mode,
   'ppk_rpl'
);
:: widok z perspektywy typów raportów
PPK_RPL.grp_splt(_grp,,'vertical','right');
PPK_RPL.grp_sel(_grp,PPK_RTP,'WER','Utworzone raporty',
:: po odświeżeniu
   "  _aid:='';
      {? (PPK_RPL.f_active() & ~PPK_RPL.f_size()) | ~PPK_RPL.size()
      || _aid:=':D'
      |? PPK_RPL.WYS_STAT='T'
      || _aid:='Dpu:D'
      ?};
      PPK_RTP.actions('WER',_aid,,1);
      grp_disp(PPK_RAP,'UCZ',1,1)
   ",,,
:: wysokość
   8,
:: przed obsługą
   "  {? grp_empty('ppk_rpl')
      || '#disable'
      || PPK_RTP.prefix(PPK_RPL.ref())
      ?}
   ",,,,
:: tryb
   _mode,
   'ppk_rtp'
);
PPK_RPL.tab_splt(_grp,,'horizontal','bottom');
PPK_RPL.grp_sel(_grp,PPK_RAP,'UCZ',,
:: po odświeżeniu
   "grp_disp(PPK_RPZ,'WER',1)",,,,
:: przed obsługą
   "  {? grp_empty('ppk_rtp')
      || '#disable'
      || PPK_RAP.index('OSOBA');
         PPK_RAP.prefix(PPK_RTP.ref())
      ?}
   ",,,,
:: tryb
   _mode
);
:: widok z perspektywy uczestników
PPK_RPL.grp_sel(_grp,PPK_RUC,'WER','Uwzględnieni uczestnicy',
   "  _aid:='';
      {? (PPK_RPL.f_active() & ~PPK_RPL.f_size()) | ~PPK_RPL.size()
      || _aid:=':d'
      |? PPK_RPL.WYS_STAT='T'
      || _aid:='dpu:d'
      ?};
      PPK_RUC.actions('WER',_aid,,1);
      grp_disp(PPK_RAP,'RAP',1,1)
   ",,,
:: wysokość
   20,
:: przed obsługą
   "  {? grp_empty('ppk_rpl')
      || '#disable'
      || PPK_RUC.prefix(PPK_RPL.ref())
      ?}
   ",,,,
:: tryb
   _mode,
   'ppk_ruc'
);
PPK_RPL.tab_splt(_grp,,'horizontal','bottom');
PPK_RPL.grp_sel(_grp,PPK_RAP,'RAP',,
:: po odświeżeniu
   "grp_disp(PPK_RPZ,'WER',1,1)",,,,
:: przed obsługą
   "  {? grp_empty('ppk_ruc')
      || '#disable'
      || PPK_RAP.index('OPIS');
         PPK_RAP.prefix(PPK_RUC.ref())
      ?}
   "
   ,,,,
:: tryb
   _mode
);
:: załączniki
PPK_RPL.grp_sel(_grp,PPK_RPZ,'WER','Załączniki',
:: po odświeżeniu
   "  _aid:='';
      {? PPK_RPL.WYS_STAT='T'
      || _aid:='u'
      ?};
      PPK_RPZ.actions('WER',_aid,,1)
   ",,,,
:: przed obsługą
   "  {? grp_empty('ppk_rpl')
      || '#disable'
      || PPK_RPZ.prefix(PPK_RPL.ref())
      ?}
   ",,,,
:: tryb
   _mode
);

:: podgląd danych
_org:=PPK_RPL.win_sel('?');
PPK_RPL.win_sel(_grp);
PPK_RPL.select();
PPK_RPL.win_sel(_org);
PPK_RPL.win_del(_grp);
~~


\generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Obsługa akcji "Generuj" okienek tabeli PPK_RPL.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: parametry działania formuł
_par:=exec('gen_par','ppk_rpl');

:: ustal "ogólne" parametry
_par.UMO:=PPK_RPL.PPK_UMO;
PPK_UMO.cntx_psh();
PPK_UMO.prefix();
PPK_UZA.cntx_psh();
PPK_UZA.prefix();
PPK_RPL.PPK_UMO().PPK_UZA();
_par.PARRAP:=exec('parrap_b','ppk_uza',1);
PPK_UZA.cntx_pop();
PPK_UMO.cntx_pop();
_par.RPL:=PPK_RPL.ref();
_par.R:=PPK_RPL.R;
_par.M:=PPK_RPL.M;
_par.DATA:=PPK_RPL.DATA;

:: wczytaj stałe na ostatni dzień miesiąca raportu
exec('czytaj','#stalesys',_par.DATA,KST_PPK);

:: wyczyść poprzednio utworzone dane raportu
exec('del_ndx','#table',PPK_RPZ,'RODZAJ',_par.RPL);
exec('del_ndx','#table',PPK_RDA,'NUMER',_par.RPL);
{? exec('del_ndx','#table',PPK_RBL,'NUMER',_par.RPL)
|| PPK_RPL.LICZ_BL:=PPK_RPL.LICZ_OS:=0;
   PPK_RPL.AKT_DATA:=date();
   PPK_RPL.AKT_GODZ:=time();
   PPK_RPL.AKT_KTO:=userdata();
   PPK_RPL.put()
?};

:: generuj według wersji pliku
_par.WER:=PPK_RPL.PPK_XWE().NUMER;
_jest:=1;

{? _par.WER='1.00' | _par.WER='1.02' | _par.WER='2.00'
|| exec('g100','ppk_rpl',_par)
|| FUN.emsg('Wersja "%1" nie jest obsługiwana.'@[_par.WER]);
   _jest:=0
?};

{? _jest
|| PPK_RPL.get();
   {? PPK_RPL.BLEDY='T'
   || exec('ble_a','ppk_rpl')
   || FUN.info('Zakończono tworzenie raportu.'@)
   ?}
?};
~~


\gen_norm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Normalizacja zawartości raportów
::   WE: _a OBJECT - wskazanie tablicy parametrów
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

PPK_RAP.cntx_psh();
PPK_RAP.index('PPK_RDA');
PPK_RAP.prefix(_par.RPL,null);
{? PPK_RAP.first()
|| {!
   |? PPK_RAP.del()
   !}
?};
PPK_RAP.cntx_pop();

PPK_RUC.cntx_psh();
PPK_RUC.index('OSOBA');
PPK_RUC.prefix(_par.RPL);

_loop:=PPK_RUC.first();
{!
|? _loop
|! {? PPK_RUC.ILOSC=0
   || _rda:=PPK_RUC.PPK_RDA;
      _loop:=PPK_RUC.del();
      {? _rda<>null
      || exec('usun','ppk_rda',_rda)
      ?}
   || _loop:=PPK_RUC.next()
   ?}
!};

PPK_RUC.cntx_pop();
~~


\gen_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Zwraca tablicę parametrów generowania raportów.
::   WE:
::   WY: wskazanie tablicy
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new(
:: ogólne parametry formuł
:: umowa o prowadzenie
   'UMO',
:: Tabela tymczasowa (bufor) z parametrzami raportów
   'PARRAP',
:: plik raportu
   'RPL',

:: kontekst danych
:: katalog raportów
   'ROOT',
:: rok kalendarzowy
   'R',
:: miesiąc kalendarzowy
   'M',
:: Data generowania raportu
   'DATA',
:: uczestnik
   'UCZ',
:: osoba
   'OSOBA',
   'DIU',
:: wersja raportu:
   'WER',

:: skrócone wywołania
   'dodaj','usun',
   'blad','uwaga','info'
);

_par.dodaj:="
   exec('dodaj','ppk_rda',
      .RPL,
      _a,
      _b,
      {? var_pres('_c')=type_of('') || _c || '' ?},
      {? var_pres('_d')=type_of('') || _d || 'W' ?},
      {? var_pres('_e')=type_of(0) || _e || 0 ?}
   )
";
_par.usun:="
   _ret:=-1;
   PPK_RDA.cntx_psh();
   PPK_RDA.prefix();
   {? PPK_RDA.seek(_a)
   || _ret:=PPK_RDA.del(1,1)
   ?};
   PPK_RDA.cntx_pop();
   _ret
";

_par.blad:="exec('dodaj','ppk_rbl',.RPL,'B',_a,{? var_pres('_b')=type_of('') || _b || '' ?})";
_par.uwaga:="exec('dodaj','ppk_rbl',.RPL,'O',_a,{? var_pres('_b')=type_of('') || _b || '' ?})";
_par.info:="exec('dodaj','ppk_rbl',.RPL,'I',_a,{? var_pres('_b')=type_of('') || _b || '' ?})";

_par


\g100
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Generowanie raportu w wersji 1.00, 1.02, 2.00
::   WE: _a OBJECT - wskazanie tablicy parametrów
::   WY: wskazanie utworzonej/znalezionej sekcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

_ref:=exec('g100nag','ppk_rpl',_par);
exec('g100fir','ppk_rpl',_ref,_par);
exec('g100dan','ppk_rpl',_ref,_par);
exec('gen_norm','ppk_rpl',_par);

exec('rap2xml','ppk_rpl',_par);
exec('rap2csv','ppk_rpl',_par);

_ref


\g100nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Dane nagłówkowe (wersja 1.00)
::   WE: _a OBJECT - wskazanie tablicy parametrów
::   WY: wskazanie utworzonej/znalezionej sekcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

_ref:=_par.dodaj(null,'PPK',,'S');
_par.dodaj(_ref,'wersja','1.0','A');
_par.dodaj(_ref,'WERSJA','GRUPA_PPK %1'[_par.WER]);
_par.dodaj(_ref,'GENERACJA',gsub($date(),'/','-')+' '+time()$3);

_ref


\g100fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Dane identyfikacyjne pracodawcy (wersja 1.00)
::   WE: _a _PPK_RDA - element nadrzędny
::       _b OBJECT - wskazanie tablicy parametrów
::   WY: wskazanie utworzonej/znalezionej sekcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_rda:=_a;
_par:=_b;

_ref:=null;

PPK_UZA.cntx_psh();
PPK_UZA.prefix();
PPK_UMO.cntx_psh();
PPK_UMO.prefix();
{? PPK_UMO.seek(_par.UMO)
|| PPK_UMO.PPK_UZA();
   _ref:=_par.dodaj(_rda,'PRACODAWCA',,'S');
   _patt:=spli_str(' ,-',',');
   {? PPK_UZA.IDR='N'
   || _par.dodaj(_ref,'NIP',gsub(KST.NIP,_patt,''));
      _par.dodaj(_ref,'REGON',gsub(KST.REG,_patt,''))
   |? PPK_UZA.IDF<>''
   || _par.dodaj(_ref,'DOK_TOZ_TYP',PPK_UZA.IDR);
      _par.dodaj(_ref,'DOK_TOZ_SYM',gsub(PPK_UZA.IDF,_patt,''))
   || _par.blad('Dane identyfikacyjne firmy','Brak identyfikatora')
   ?};
   {? _par.PARRAP.UZA_NUM='T'
   || _par.dodaj(_ref,'NR_UMOWY_PPK',PPK_UZA.NUMER)
   ?};
   {? (_kom:=PPK_UZA.memo_txt(,1,'KOM'))<>''
   || {? +_kom>200
      || _kom:=200+_kom;
         _par.uwaga('Dane kontaktowe dla instytucji',
            'Wartość skrócona do 200 znaków. Należy poprawić dane zawartej umowy o zarządzanie.')
      ?};
      _par.dodaj(_ref,'KONTAKT',_kom)
   ?}
?};
PPK_UMO.cntx_pop();
PPK_UZA.cntx_pop();

_ref


\g100ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Dane identyfikacyjne uczestnika (wersja 1.00)
::   WE: _a _PPK_RDA - element nadrzędny
::       _b OBJECT - wskazanie tablicy parametrów
::   WY: Dane identyfikacyjne zostały dodane [0/1].
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;

_ret:=0;

OSOBA.cntx_psh();
OSOBA.prefix();
PPK_UCZ.cntx_psh();
PPK_UCZ.prefix();
{? PPK_UCZ.seek(_par.UCZ)
:: dane identyfikacyjne
|| PPK_UCZ.OSOBA();

   PPK_XEL.cntx_psh();
   PPK_XEL.prefix();

   _el:='UCZESTNIK_ZMIANA';

   _xel:=exec('szukaj','ppk_xel',_el);
   {? _xel=null()
   || _par.blad(_par.DIU,'Brak definicji elementu "'+_el+'".')
   ?};

   _BUF:=exec('_cfg','ppk_zdn',_el);

   PPK_ZDN.cntx_psh();
   PPK_ZDN.index('XEL');
   PPK_ZDN.prefix(_par.UCZ,_xel,);
   {? ~PPK_ZDN.first()
::    Brak zapisu - utwórzmy go.
   || _bor:=null();
      PPK_ZDN.blank();
      PPK_ZDN.PPK_UCZ:=PPK_UCZ.ref();
      PPK_ZDN.DATA:=PPK_UCZ.OD;
      PPK_ZDN.PPK_XEL:=_xel;
      PPK_ZDN.PPK_RDA:=_nad;
      PPK_ZDN.AUTO:='T';
      _BUF.set(,PPK_ZDN.DATA,_par);
      _chk:=_BUF.ae(_BUF.TAB,1);
      {? _chk=''
      || _BUF.write(0)
      || _par.blad(_par.DIU,
            'Ustalenie danych identyfikacyjnych nie powiodło się. '+
            'Należy ręcznie utworzyć zapis w "Historii danych", '+
            'zwracając uwagę na pole "'+MS.name(_BUF.TAB,_chk)+'".'
         )
      ?}
   || _bor:=PPK_ZDN.ref()
   ?};

:: _old wskazuje na ostatnio wysłane dane.
:: _new wskazuje na wartości aktualne.
   _old:=_new:=null();
:: _rap - czy aktualne wartości zostały zaraportowane?
   _rap:=0;
   {? PPK_ZDN.find_le(_par.DATA)
   || _old:=_new:=PPK_ZDN.ref();
      _rap:=PPK_ZDN.PPK_RDA<>null();
::    Szukamy danych, o których wie instytucja finansowa.
      {? ~_rap & PPK_ZDN.prev()
      || {!
         |? {? PPK_ZDN.PPK_RDA=null()
            || PPK_ZDN.prev()
            || _old:=PPK_ZDN.ref();
               0
            ?}
         !}
      ?};

      {? _new=_bor & PPK_ZDN.PPK_RDA=null()
::       Jeżeli "wykorzystujemy" nieużytego jeszcze rekordu otwarcia (BO), to postawmy na nim stempel.
      || PPK_ZDN.PPK_RDA:=_nad;
         PPK_ZDN.put()
      ?}
   ?};

   {? _old=null()
   || _par.blad(_par.DIU,'Odnalezienie danych identyfikacyjnych obowiązujących %1 roku nie powiodło się.' [_par.DATA$6])
   || PPK_ZDP.cntx_psh();
      PPK_ZDP.index('SYMBOL');
      PPK_ZDP.prefix(_old);

::    Lista TAG-ów, które mogą się znaleźć na wniosku o zmianę danych identyfikacyjnych.
      _tag:=spli_str('ID_KADRY,IMIE,IMIE_2,NAZWISKO,PLEC,OBYW,NR_PESEL,DATA_UR,DOK_TOZ_TYP,DOK_TOZ_SYM',',');
      _pl:=_pesel:=0;
      {! _lp:=1 .. obj_len(_tag)
      |! _sym:=_tag[_lp];
         {? (_sym='PLEC' & _par.PARRAP.PLEC='N')
            |
            (_sym='DATA_UR' & _pesel & ((_par.PARRAP.DATA_UR='N' & _pl) | (_par.PARRAP.OB_PSL='N' & ~_pl)))
            |
            ( (_sym='DOK_TOZ_TYP'|_sym='DOK_TOZ_SYM')
              &
              _pesel
              &
              ((_par.PARRAP.DOK_TOZ='N' & _pl) | (_par.PARRAP.OB_PSL='N' & ~_pl))
            )
::          Zgodnie z ustawionymi parametrami - pomijamy w eksporcie.
         || ~~
         |? PPK_ZDP.find_key(_sym,)
         || {? _sym='OBYW' & PPK_ZDP.WARTOSC='PL'
            || _pl:=1
            |? _sym='NR_PESEL' & +PPK_ZDP.WARTOSC=11
            || _pesel:=1
            ?};
            _par.dodaj(_nad,_sym,PPK_ZDP.WARTOSC)
         ?}
      !};
      PPK_ZDP.cntx_pop();
::    ... i kilka dodatkowych pól.
      _par.dodaj(_nad,'ID_PPK',PPK_UCZ.ID_PPK);
      _par.dodaj(_nad,'PZIF_RACH_PPK',PPK_UCZ.NR_RACH);
      _ret:=1

   ?};

   {? _old<>_new & ~_rap
::    Potrzebny będzie raport "Zmiana danych identyfikacyjnych". Jest przewidziany w bieżącym pliku?
::    Chyba, że dane zostały już zaraportowane.
   || _xra:='Zmiana danych identyfikacyjnych';
      PPK_RTP.cntx_psh();
      PPK_RTP.index('OPIS');
      PPK_RTP.prefix(_par.RPL,_xra,);
      {? ~PPK_RTP.first()
      || _par.blad(_par.DIU,'W pliku wymiany danych brakuje raportu "%1".' [_xra])
      ?};
      PPK_RTP.cntx_pop()
   ?};

   PPK_ZDN.cntx_pop();
   PPK_XEL.cntx_pop()

?};
PPK_UCZ.cntx_pop();
OSOBA.cntx_pop();

_ret


\g100dan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Dane raportu (wersja 1.00, 1.02, 2.00)
::   WE: _a _PPK_RDA - element nadrzędny
::       _b OBJECT - wskazanie tablicy parametrów
::   WY: wskazanie utworzonej/znalezionej sekcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;

{? (_ref:=_par.dodaj(_nad,'DANE_UCZESTNIKA',,'S'))=null
:: zakończ działanie
|| return(_ref)
?};

:: katalog raportów
_par.ROOT:=_ref;

OSOBA.cntx_psh();
OSOBA.prefix();
PPK_UCZ.cntx_psh();
PPK_UCZ.index('OSOBA');
PPK_UCZ.prefix(_par.UMO);
_loop:=PPK_UCZ.first();
_size:=PPK_UCZ.size();
{! _ii:=1
|? _loop
|! progress(int(_ii/_size*100),'Proszę czekać. Trwa przetwarzanie danych...',FUN.TYT);
   {? PPK_UCZ.OD<=_par.DATA
   || PPK_UCZ.OSOBA();
      _par.UCZ:=PPK_UCZ.ref();
      _par.OSOBA:=PPK_UCZ.OSOBA().ref();
      _par.DIU:='%1 %2'[OSOBA.NAZWISKO,OSOBA.PIERWSZE];
      exec('g100rap','ppk_rpl',_ref,_par)
   ?};
   _loop:=PPK_UCZ.next()
!};
PPK_UCZ.cntx_pop();
OSOBA.cntx_pop();
prgs_clr();

_ref


\g100rap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Raporty dla uczestnika (wersja 1.00, 1.02, 2.00)
::   WE: _a _PPK_RDA - element nadrzędny
::       _b OBJECT - wskazanie tablicy parametrów
::   WY: wskazanie utworzonej/znalezionej sekcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;

_ref:=null;

SEEK.OSOBA:=_par.OSOBA;
SEEK.OSOBA();

PPK_RTP.cntx_psh();
PPK_RTP.index('OPIS');
PPK_RTP.prefix(_par.RPL);
{? PPK_RTP.first()
|| _loop:=1;
   _test:=0;
   _ref:=_par.dodaj(_nad,'UCZESTNIK',,'S',1);
   _ruc:=exec('dodaj','ppk_ruc',_par.RPL,_par.UCZ,_ref);
   {!

   |? _loop
   |! _symbol:=PPK_RTP.PPK_XEL().SYMBOL;
      _par.DIU:='%1: %2 %3'[PPK_XEL.OPIS,OSOBA.NAZWISKO,OSOBA.PIERWSZE];
      _rda:=
         {? _symbol='SKLADKA'
         || exec('g100wpl','ppk_rpl',_ref,_par)
         |? _symbol='DANE_KOREKT'
         || exec('g100kor','ppk_rpl',_ref,_par)
         |? _symbol='REJESTRACJA'
         || exec('g100rej','ppk_rpl',_ref,_par)
         |? _symbol='DANE_DEKLARACJI'
         || {? _par.WER='1.02' | _par.WER='2.00'
            || exec('g102dekl','ppk_rpl',_ref,_par)
            || exec('g100dekl','ppk_rpl',_ref,_par)
            ?}
         |? _symbol='UCZESTNIK_ZMIANA' | _symbol='DANE_ZMIANA'
         || exec('g100zmiana','ppk_rpl',_ref,_par,_symbol)
         |? _symbol='ZWOLNIENIE'
         || exec('g100zwzu','ppk_rpl',_ref,_par)
         |? _symbol='TRANSFER'
::       Sprawdzenie czy definicja zawiera elementy aktualizacji 20.14_11:
         || {? exec('jest_a11','ppk')
            || exec('g200tran','ppk_rpl',_ref,_par)
            || FUN.error('Nie można wygenerować raportu Transfer PPK. Definicja nie zawiera aktualizacji.');
               PPK_RTP.cntx_pop();
               return(null())
            ?}
         || null
         ?};
      {? _rda<>null
::       twórz dane uczestnika wtedy, gdy są jakieś raporty
      || _test+={? 'REJESTRACJA|DANE_ZMIANA|UCZESTNIK_ZMIANA'*_symbol || -1 || 1 ?};
         exec('dodaj','ppk_rap',_ruc,PPK_RTP.ref(),_rda)
      ?};
      _loop:=PPK_RTP.next()
   !};
   {? _test>0
::    uzupełnij dane identyfikacyjne
   || exec('g100ucz','ppk_rpl',_ref,_par)
   ?};
:: uwzględnienie wymagania ER/WRT/XP/12.51/2001/0006 spowodowało zamianę miejscami
:: danych identyfikacyjnych i sekcji raportów, sekcje zostaną teraz przesunięte na
:: właściwe miejsce
   PPK_RDA.cntx_psh();
   PPK_RDA.index('PPK_RDA');
   PPK_RDA.prefix(_ref);
   _loop:=PPK_RDA.first();
   _size:=PPK_RDA.size();
   {!
   |? _loop
   |! {? PPK_RDA.RODZAJ='S'
      || PPK_RDA.NUMER+=_size;
         PPK_RDA.put()
      ?};
      _loop:=PPK_RDA.next()
   !};
   PPK_RDA.cntx_pop()
?};
PPK_RTP.cntx_pop();

_ref


\g100_wp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy tablicę do przechowywania kwot wpłat (wersja 1.00)
::   WE:
::   WY: wskazanie tablicy zawierającej kwoty wpłat
::----------------------------------------------------------------------------------------------------------------------
_wpl:=obj_new('FIR_POD','FIR_DOD','UCZ_POD','UCZ_DOD','WPU_NOB');
{! _ii:=1..obj_len(_wpl) |! _wpl[_ii]:=0 !};
_wpl


\g100_kw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Zwraca kwoty wpłat osoby w danym miesiącu (wersja 1.00)
::   WE: _a OBJECT - wskazanie tablicy parametrów
::   WY: wskazanie tablicy zawierającej kwoty wpłat
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

_od:=_par.DATA;
_ret:=exec('g100_wp','ppk_rpl');

exec('czytaj','#stalesys',_od,KST,'NK');

:: sumowanie według osoby
_sum:="
   _sum:=0;
   LS.index('OSOBAKOD');
   LS.prefix(exec('ref_firma','ustawienia'),_a,__RUB.sys_kod(_b,_c,1));
   _loop:=LS.first();
   {!
   |? _loop
   |! _sum+=LS.KW;
      _loop:=LS.next()
   !};
   _sum
";

_spwppu:=__RUB.sys_kod(712,_od,1);
_firma:=exec('ref_firma','ustawienia');

LS.cntx_psh();
O.cntx_psh();
O.index('LISTYPLU');
O.prefix(_firma,'P',_par.R,_par.M);
:: pobierz kwoty tylko dla pracowników
_loop:=O.first();
{!
|? _loop
|! {? O.D<=_od
::    listy do daty raportowania
   || LS.use(-O.LT);
      _ret.FIR_POD+=_sum(_par.OSOBA,720,_od);
      _ret.FIR_DOD+=_sum(_par.OSOBA,721,_od);
      _ret.UCZ_POD+=_sum(_par.OSOBA,722,_od);
      _ret.UCZ_DOD+=_sum(_par.OSOBA,723,_od);
      {? _ret.WPU_NOB=0
      || LS.index('OSOBAKOD');
         LS.prefix(_firma,_par.OSOBA,_spwppu);
::       Sprawdzam czy są składniki procentu wpłaty podstawowej uczestnika:
         {? LS.first()
         || _ret.WPU_NOB:=LS.find_tab(,'KW',,'=',KST_PPK.SK_MAXPU)
::          Jeśli nie ma, sprawdzam czy nie nastąpiło przekroczenie 120%:
         || {? _sum(_par.OSOBA,70,_od)>(KST.NK*KST_PPK.WMW)$2
            || _ret.WPU_NOB:=1
::          Nie nastąpiło przekorczenie. Sprawdzam ostatni wpis procentowy (PPK_PWP) nie będący zerem:
            || PPK_PWP.cntx_psh();
               PPK_PWP.index('RNOD');
               PPK_PWP.prefix(_firma,$_par.OSOBA,_spwppu);
               {? PPK_PWP.find_le(_od)
               || {!
                  |? _pwp:=exec('licz_pwp','ppk',_par.OSOBA,_spwppu,PPK_PWP.OD,'-O');
                     {? _pwp=KST_PPK.SK_MAXPU
                     || _ret.WPU_NOB:=1
                     ?};

                     _pwp=0 & PPK_PWP.prev()
                  !}
               ?};
               PPK_PWP.cntx_pop()
            ?}
         ?}
      ?}
   ?};
   _loop:=O.next()
!};

:: sumowanie według rachunku
_sum:="
   _sum:=0;
   LS.index('ZLEC');
   LS.prefix(_a,__RUB.sys_kod(_b,_c,1));
   _loop:=LS.first();
   {!
   |? _loop
   |! _sum+=LS.KW;
      _loop:=LS.next()
   !};
   _sum
";
RH.cntx_psh();
RH.index('RACHDATA');
RH.prefix(_firma,_par.OSOBA,_par.R,_par.M);
:: pobierz kwoty z rachunków od umów cywilno prawnych
_loop:=RH.first();
{!
|? _loop
|! {? RH.DWY<=_od
::    rachunki do daty raportowania
   || LS.use(-RH.O().LT);
      _ret.FIR_POD+=_sum(RH.ref(),720,_od);
      _ret.FIR_DOD+=_sum(RH.ref(),721,_od);
      _ret.UCZ_POD+=_sum(RH.ref(),722,_od);
      _ret.UCZ_DOD+=_sum(RH.ref(),723,_od);
      {? _ret.WPU_NOB=0
      || LS.index('OSOBAKOD');
         LS.prefix(_firma,_par.OSOBA,_spwppu);
::       Sprawdzam czy są składniki procentu wpłaty podstawowej uczestnika:
         {? LS.first()
         || _ret.WPU_NOB:=LS.find_tab(,'KW',,'=',KST_PPK.SK_MAXPU)
::          Jeśli nie ma, sprawdzam czy nie nastąpiło przekroczenie 120%:
         || {? _sum(RH.ref(),70,_od)>(KST.NK*KST_PPK.WMW)$2
            || _ret.WPU_NOB:=1
::          Nie nastąpiło przekorczenie. Sprawdzam ostatni wpis procentowy (PPK_PWP) nie będący zerem:
            || PPK_PWP.cntx_psh();
               PPK_PWP.index('RNOD');
               PPK_PWP.prefix(_firma,$RH.ZLE,_spwppu);
               {? PPK_PWP.find_le(_od)
               || {!
                  |? _pwp:=exec('licz_pwp','ppk',RH.ZLE,_spwppu,PPK_PWP.OD,'-O');
                     {? _pwp=KST_PPK.SK_MAXPU
                     || _ret.WPU_NOB:=1
                     ?};

                     _pwp=0 & PPK_PWP.prev()
                  !}
               ?};
               PPK_PWP.cntx_pop()
            ?}
         ?}
      ?}
   ?};
   _loop:=RH.next()
!};
RH.cntx_pop();

O.cntx_pop();
LS.cntx_pop();

_ret


\g100_zw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Zwraca kwoty korekt/zwrotów dla osoby w danym miesiącu (wersja 1.00) ale tylko do daty określonej w _a.DATA
::   WE: _a OBJECT - wskazanie tablicy parametrów
::       _b [STRING] - określenie typu:
::          'Z' zwrot/wyrównanie,
::          'R' lub 'W' korekta,
::          '*' wszystkie
::       _c [STRING] - określenie rodzaju:
::          'P' pracodawca (domyślnie),
::          'I' instytucja,
::          '*' wszystkie
::       _d [STRING] - określenie tytułu:
::          '*' (domyślnie) określaj zgodnie z wartością pola RODZAJ,
::          '+' pozostaw kwotę bez zmian,
::          '-' wymnóż kwotę przez wartość -1,
::          '|' wartość bezwzględna kwoty
::       _e [_PPK_RDA] - wskazanie danych raportu, w kolumnę PPK_KWN będzie wstawiana wartość podana argumentem
::       _f [STRING] - Akronim indeksu dla tabeli PPK_KWN
::   WY: wskazanie tablicy zawierającej kwoty wpłat
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

_atp:={? var_pres('_b')<>type_of('') | _b='' || 'Z' || _b ?};
_ard:={? var_pres('_c')<>type_of('') | _c='' || 'P' || _c ?};
_att:={? var_pres('_d')<>type_of('') | _d='' || '*' || _d ?};
_rda:={? var_pres('_e')<>type_of(null) || null || _e ?};

_od:=_par.DATA;
_ret:=exec('g100_wp','ppk_rpl');
_rub:=~~;

PPK_KWN.cntx_psh();
{? var_pres('_f')<>type_of('') | _f='' || PPK_KWN.index('O_MSC_T') || PPK_KWN.index(_f) ?};

:: korekty/zwroty dla osoby w miesiącu raportowania
{? _atp='*'
|| PPK_KWN.prefix(REF.FIRMA,_par.OSOBA,_par.R,_par.M)
|| PPK_KWN.prefix(REF.FIRMA,_par.OSOBA,_par.R,_par.M,_atp)
?};
_loop:=PPK_KWN.first();
{? _loop
|| _rub:=obj_new(6);
   _rub[1]:=__RUB.ref(__RUB.sys_kod(720,_od,1));
   _rub[2]:=__RUB.ref(__RUB.sys_kod(721,_od,1));
   _rub[3]:=__RUB.ref(__RUB.sys_kod(722,_od,1));
   _rub[4]:=__RUB.ref(__RUB.sys_kod(723,_od,1));
   _rub[5]:=__RUB.ref(__RUB.sys_kod(7721,_od,1));
   _rub[6]:=__RUB.ref(__RUB.sys_kod(7722,_od,1))
?};
{!
|? _loop
|! {? PPK_KWN.DATA_KOR<=_par.DATA & (_ard='*' | PPK_KWN.RODZAJ=_ard)
   || PPK_KWK.cntx_psh();
      PPK_KWK.index('RN');
      PPK_KWK.prefix(PPK_KWN.ref());
      _loop:=PPK_KWK.first();
      {!
      |? _loop
      |! _rr:=PPK_KWK.R;
         _kw:=
            {? _att='|'
::             weź wartość bezwzględną
            || fabs(PPK_KWK.KW)

            || {? _att='*'
::                zgodnie z polem TYTUL
               || _att:=PPK_KWN.TYTUL
               ?};
::             sumowana/odejmowana kwota
               PPK_KWK.KW*{? _att='-' || -1 || 1 ?}
            ?};
         {? _rr=_rub[1] | _rr=_rub[5] || _ret.FIR_POD+=_kw
         |? _rr=_rub[2] | _rr=_rub[6] || _ret.FIR_DOD+=_kw
         |? _rr=_rub[3] || _ret.UCZ_POD+=_kw
         |? _rr=_rub[4] || _ret.UCZ_DOD+=_kw
         ?};
         _loop:=PPK_KWK.next()
      !};
      PPK_KWK.cntx_pop();

      {? PPK_KWN.PPK_RDA=null & _rda<>null
::       zabezpiecz przed modyfikacjami
      || PPK_KWN.PPK_RDA:=_rda;
         PPK_KWN.put()
      ?}
   ?};
   _loop:=PPK_KWN.next()
!};
PPK_KWN.cntx_pop();

_ret


\g100wpl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wpłaty uczestnika (wersja 1.00, 1.02, 2.00)
::   WE: _a _PPK_RDA - element nadrzędny
::       _b OBJECT - wskazanie tablicy parametrów
::   WY: wskazanie utworzonej/znalezionej sekcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;
_d0:=date(0,0,0);

:: pobierz kwoty nominalne wpłat
_wpl:=exec('g100_kw','ppk_rpl',_par);
:: z rozliczenia (np. zbyt długich nieobecności) mogą pochodzić ujemne wpłaty
:: póki co nie przerywaj tworzenia raportu, ale później ewentualnie ostrzeż
_min_wpl:=(_wpl.FIR_POD<0 | _wpl.FIR_DOD<0 | _wpl.UCZ_POD<0 | _wpl.UCZ_DOD<0);

:: pobierz kwoty zwrotów/wyrównań wpłat, jeśli zwroty zerują wpłaty, to może nie być wogóle wpisu dla uczestnika,
:: dlatego ewentualne zwroty/wyrównania będą oznaczane jako uwzględnione w katalogu głównym raportów
_zwr:=exec('g100_zw','ppk_rpl',_par,,,,_par.ROOT);
:: uwzględnij zwroty/wyrównania
_wpl.UCZ_POD+=_zwr.UCZ_POD;
_wpl.UCZ_DOD+=_zwr.UCZ_DOD;
_wpl.FIR_POD+=_zwr.FIR_POD;
_wpl.FIR_DOD+=_zwr.FIR_DOD;
:: po uwzględnieniu wyrównań pochodzących od zatrudniającego kwoty mogą być ujemne
:: póki co nie przerywaj tworzenia raportu, ale później ewentualnie ostrzeż
_min_zwr:=(_wpl.FIR_POD<0 | _wpl.FIR_DOD<0 | _wpl.UCZ_POD<0 | _wpl.UCZ_DOD<0);

:: Czy są dopuszczone zerowe wpłaty (uwzględnienie parametru):
_w0:=0;
_w0par:=(_par.PARRAP.WPL_ZER='T');
{? _wpl.FIR_POD=0 & _wpl.FIR_DOD=0 & _wpl.UCZ_POD=0 & _wpl.UCZ_DOD=0
:: brak wpłat do wykazania
:: jeśli dopuszcza raportowanie zerowych wpłat:
|| {? ~_w0par
   || return(null)
   ?}
?};

_min_wra:=0;

:: pobierz kwoty wykazane na raportach
_wra:=exec('g100wra','ppk_rpl',_par);
_wpl.UCZ_POD-=_wra.UCZ_POD;
_wpl.UCZ_DOD-=_wra.UCZ_DOD;
_wpl.FIR_POD-=_wra.FIR_POD;
_wpl.FIR_DOD-=_wra.FIR_DOD;
:: po uwzględnieniu wpłat wykazanych na innych raportach kwoty mogą być ujemne
_min_wra:=(_wpl.FIR_POD<0 | _wpl.FIR_DOD<0 | _wpl.UCZ_POD<0 | _wpl.UCZ_DOD<0);

{? _wpl.FIR_POD=0 & _wpl.FIR_DOD=0 & _wpl.UCZ_POD=0 & _wpl.UCZ_DOD=0
:: brak wpłat do wykazania
::    Jeśli dopuszcza się raportowanie zerowych wpłat i uczestnik jest aktywny:
|| {? _w0par & exec('aktywny','ppk_ucz',_par.OSOBA,_par.DATA)
   || _dtWS60:=exec('spr_wnu','ppk_wnu',_par.OSOBA,,_par.DATA,'WS60',1);
::    Jeśli jest wniosek o wypłatę po 60r.ż. nie raportuj:
      {? _dtWS60<>_d0
      || return(null())
      || _dtDRZW:=exec('spr_wnu','ppk_wnu',_par.OSOBA,,_par.DATA,'DRZW',1);
::       Jeśli jest dekl. rezygnacji późniejsza niż jej ew. odwołania WODW lub AWW to nie raportuj uczestnika:
         {? _dtDRZW<>_d0
            &
            _dtDRZW>exec('spr_wnu','ppk_wnu',_par.OSOBA,,_par.DATA,'WODW',1)
            &
            _dtDRZW>exec('spr_wnu','ppk_wnu',_par.OSOBA,,_par.DATA,'AWW',1)
         || return(null())
::       Nie było DRZW (lub odwołana) i WS60, można zaraportować wpłaty zerowe:
         || _w0:=1
         ?}
      ?}
   || return(null())
   ?}
?};

:: zapisz raport o miejscu powstania ujemnych kwot
:: nie zgłaszaj błędu tylko ostrzeż - błąd zablokuje utworzenie pliku,
:: który do tej pory przed przesłaniem do instytucji można było poprawić
{? _min_wpl<>0 || _par.uwaga(_par.DIU,'Z list płac/rachunków pobrano ujemne wpłaty.'@)
|? _min_zwr<>0 || _par.uwaga(_par.DIU,'Po uwzględnieniu wyrównań kwoty wpłat są ujemne.'@)
|? _min_wra<>0 || _par.uwaga(_par.DIU,'Po uwzględnieniu innych raportów kwoty wpłat są ujemne.'@)
?};

:: komunikat w miesiącu wznowienia - osoba po automatycznym wznowieniu
:: Dodatkowo sprawdzane czy raport generowany w bieżącym miesiącu (data aktualizacji - date()), jeśli gen. później to
:: nie ma sensu komunikować.
_rok:=_par.DATA~1;
_mc:=_par.DATA~2;
{? _rok<>2019 & (_rok-2019)%*KST_PPK.WZN_OKR=0 & _mc=KST_PPK.WZN_MS-1 & _rok>=date()~1 & _mc>=date()~2
|| _AWWod:=date(_rok,KST_PPK.WZN_MS-1,1);
   _AWWdo:=date(_rok,KST_PPK.WZN_MS-1,0);
   _dtAWW:=exec('spr_wnu','ppk_wnu',_par.OSOBA,_AWWod,_AWWdo,'AWW',1);
:: Czy w miesiącu przed wznowieniem ma AWW:
   {? _dtAWW<>_d0
   || _par.uwaga(_par.DIU,'Automatyczne wznowienie wpłat od %1. Raport do instytucji finansowej można przekazać od %2.'@
                 [$_dtAWW,$date(_rok,KST_PPK.WZN_MS,KST_PPK.WZN_DN)])
   ?}
?};

:: składki uczestnika
_ref:=_par.dodaj(_nad,'SKLADKA',,'S');
_par.dodaj(_ref,'SKL_ZA_OKRES',form(_par.R,4,,'99')+'-'+form(_par.M,-2,,'99'));
_par.dodaj(_ref,'UCZ_WAR_POD',form(_wpl.UCZ_POD,,2,'9.'));
_par.dodaj(_ref,'UCZ_WAR_DOD',form(_wpl.UCZ_DOD,,2,'9.'));
_par.dodaj(_ref,'FIR_WAR_POD',form(_wpl.FIR_POD,,2,'9.'));
_par.dodaj(_ref,'FIR_WAR_DOD',form(_wpl.FIR_DOD,,2,'9.'));
_par.dodaj(_ref,'UCZ_OBNIZ_SKL_POD',{? _wpl.WPU_NOB || 'N' || 'T' ?});

_ref


\g100wra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wpłaty uczestnika wykazane na innych raportach (wersja 1.00)
::   WE: _a OBJECT - wskazanie tablicy parametrów
::   WY: wskazanie tablicy zawierającej kwoty wpłat
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

_wpl:=exec('g100_wp','ppk_rpl');
_xel:=exec('szukaj','ppk_xel','SKLADKA');
{? _xel=null
:: dla pewności
|| return(_wpl)
?};

:: należy przeszukać wszystkie raporty rozliczeniowe uczestnika przygotowane w miesiącu tworzonego raportu
:: zsumowane wartości UCZ_WAR_POD, UCZ_WAR_DOD, FIR_WAR_POD i FIR_WAR_DOD pomniejszą wykazywane na raporcie kwoty
PPK_RPL.cntx_psh();
PPK_RPL.index('PPK_RPL');
PPK_RPL.prefix(_par.UMO,_par.R,_par.M);
:: przeglądaj raporty z danego miesiąca
_loop:=PPK_RPL.first();
{!
|? _loop
|! {? PPK_RPL.ref()<>_par.RPL & PPK_RPL.DATA<=_par.DATA
   || _xra:=exec('szukaj','ppk_xra',PPK_RPL.PPK_XWE,_xel);
::    czy w pliku są raporty typu 'SKLADKA'?
      {? _xra<>null
      || PPK_RTP.cntx_psh();
         PPK_RTP.index('UNIQUE');
         PPK_RTP.prefix(PPK_RPL.ref(),_xra);
         {? PPK_RTP.first()
::          są raporty
         || _ruc:=exec('szukaj','ppk_ruc',PPK_RPL.ref(),_par.UCZ);
::          czy w raporcie został uwzględniony uczestnik?
            {? _ruc<>null
::             jest uczestnik
            || PPK_RDA.cntx_psh();
               PPK_RDA.index('PPK_RDA');
               PPK_RAP.cntx_psh();
               PPK_RAP.index('UNIQUE');
               {!
::                przeglądaj raporty 'SKLADKA' uczestnika
               |? PPK_RAP.prefix(_ruc,PPK_RTP.ref());
                  _loop:=PPK_RAP.first();
                  {!
                  |? _loop
                  |! PPK_RDA.prefix(PPK_RAP.PPK_RDA);
                     _loop:=PPK_RDA.first();
                     {!
                     |? _loop
                     |! {? (_kw:=#PPK_RDA.WARTOSC)<>0
                        || _sym:=PPK_RDA.PPK_XEL().SYMBOL;
                           {? _sym='UCZ_WAR_POD' || _wpl.UCZ_POD+=_kw
                           |? _sym='UCZ_WAR_DOD' || _wpl.UCZ_DOD+=_kw
                           |? _sym='FIR_WAR_POD' || _wpl.FIR_POD+=_kw
                           |? _sym='FIR_WAR_DOD' || _wpl.FIR_DOD+=_kw
                           ?}
                        ?};
                        _loop:=PPK_RDA.next()
                     !};
                     _loop:=PPK_RAP.next()
                  !};
                  PPK_RTP.next()
               !};
               PPK_RAP.cntx_pop();
               PPK_RDA.cntx_pop()
            ?}
         ?}
      ?};
      PPK_RTP.cntx_pop()
   ?};
   _loop:=PPK_RPL.next()
!};
PPK_RPL.cntx_pop();

_wpl


\g100kor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Korekty wpłat (wersja 1.00)
::   WE: _a _PPK_RDA - element nadrzędny
::       _b OBJECT - wskazanie tablicy parametrów
::   WY: wskazanie utworzonej/znalezionej sekcji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;

_kor:=_par.dodaj(_nad,'DANE_KOREKT',,'S');
_ref:=_par.dodaj(_kor,'KOREKTA',,'S');

_wpl:=exec('g100_wp','ppk_rpl');

_firma:=exec('ref_firma','ustawienia');

PPK_KWK.cntx_psh();
PPK_KWK.index('RN');
PPK_KWN.cntx_psh();
PPK_KWN.index('O_MSC_T');
PPK_KWN.f_set(,,
   'PPK_KWN.OSOBA=:_a and PPK_KWN.R=:_b and PPK_KWN.M=:_c and '+
   'PPK_KWN.TYP in (\'R\',\'W\') and PPK_KWN.PPK_RDA is null and '+
   'PPK_KWN.DATA_KOR<=to_date(:_d) ',
   _par.OSOBA,_par.R,_par.M,_par.DATA
);
_loop:=PPK_KWN.f_first();
{!
|? _loop
:: korekty uczestnika
|! PPK_KWK.prefix(PPK_KWN.ref());
   _put:=0;
   {? PPK_KWK.find_key(__RUB.sys_kod(722,,1))
   || _wpl.UCZ_POD+=PPK_KWK.KW;
      _put+=1
   ?};
   {? PPK_KWK.find_key(__RUB.sys_kod(723,,1))
   || _wpl.UCZ_DOD+=PPK_KWK.KW;
      _put+=1
   ?};
   {? PPK_KWK.find_key(__RUB.sys_kod(720,,1))
   || _wpl.FIR_POD+=PPK_KWK.KW;
      _put+=1
   ?};
   {? PPK_KWK.find_key(__RUB.sys_kod(721,,1))
   || _wpl.FIR_DOD+=PPK_KWK.KW;
      _put+=1
   ?};
   {? _put & PPK_KWN.PPK_RDA=null()
   || PPK_KWN.PPK_RDA:=_ref;
      PPK_KWN.put()
   ?};
   _loop:=PPK_KWN.f_next()
!};
PPK_KWN.cntx_pop();
PPK_KWK.cntx_pop();

LS.cntx_psh();
O.cntx_psh();
O.index('LISTYUBZ');
O.prefix(_firma,_par.R,_par.M);
_loop:=O.first();
{!
|? _loop & _wpl.WPU_NOB=0
|! {? O.D<=_par.DATA
   || LS.use(-O.LT);
      LS.index('OSOBAKOD');
      LS.prefix(_firma,_par.OSOBA,__RUB.sys_kod(712,_par.DATA,1));
      _wpl.WPU_NOB:=LS.find_tab(,'KW',,'=',KST_PPK.SK_MAXPU)
   ?};
   _loop:=O.next()
!};
O.cntx_pop();
LS.cntx_pop();

{? _wpl.UCZ_POD<>0 | _wpl.UCZ_DOD | _wpl.FIR_POD | _wpl.FIR_DOD
|| _par.dodaj(_ref,'SKL_ZA_OKRES',form(_par.R,4,,'99')+'-'+form(_par.M,-2,,'99'));
   _par.dodaj(_ref,'UCZ_WAR_POD',form(fabs(_wpl.UCZ_POD),,2,'9.'));
   _par.dodaj(_ref,'UCZ_WAR_DOD',form(fabs(_wpl.UCZ_DOD),,2,'9.'));
   _par.dodaj(_ref,'FIR_WAR_POD',form(fabs(_wpl.FIR_POD),,2,'9.'));
   _par.dodaj(_ref,'FIR_WAR_DOD',form(fabs(_wpl.FIR_DOD),,2,'9.'));
   _par.dodaj(_ref,'UCZ_OBNIZ_SKL_POD',{? _wpl.WPU_NOB=0 || 'T' || 'N' ?})
|| _par.usun(_kor);
   _kor:=null()
?};

_kor


\g100rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Rejestracja uczestnika (wersja 1.00)
::   WE: _a [_PPK_RDA] - Element nadrzędny.
::       _b [OBJECT]   - Wskazanie tablicy parametrów.
::   WY: Wskazanie utworzonej/znalezionej sekcji.
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;

_ref:=null();

:: w pierwszej kolejności sprawdź, czy:
:: - czy uczestnik został zgłoszony do instytucji finansowej
:: - czy dla uczestnika istnieją dane wykazane na nieprzekazanym raporcie
:: - czy wszystkie dane identyfikacyjne uczestnika są poprawne
{? PPK_UCZ.ZG='T'
:: już zgłoszony
|| return(_ref)
?};

PPK_ZDN.cntx_psh();
PPK_ZDN.index('XEL');
PPK_ZDN.prefix(_par.UCZ,exec('szukaj','ppk_xel','UCZESTNIK_ZMIANA'));
:: czy istnieją dane uwzględnione na nieprzekazanym raporcie
{? PPK_ZDN.first() & PPK_ZDN.PPK_RDA<>null
|| PPK_RPL.cntx_psh();
   PPK_ZDN.PPK_RDA().PPK_RPL();
   _par.info(_par.DIU,
      'Raport rejestrujący uczestnika występuje już w zestawie '+
      'numer '+$PPK_RPL.NUMER+' z dnia '+PPK_RPL.DATA$6+'.'
   );
   PPK_RPL.cntx_pop();
   PPK_ZDN.cntx_pop();
   return(_ref)
?};
PPK_ZDN.cntx_pop();

{? exec('g100ucz','ppk_rpl',_nad,_par)=0
:: dane są błędne, zgłoszenie się nie uda
|| return(_ref)
?};

_ref:=_par.dodaj(_nad,'REJESTRACJA',,'S');
:: !!! Data obowiązku to nie jest to samo co data zawarcia.
_data:='';
{? -_par.PARRAP.RPZ_TYP<>'c'
|| _data:=7+xml_value(PPK_UCZ.OD)
|| _data:=($_par.PARRAP.CSV_FDO)(PPK_UCZ.OD)
?};
_par.dodaj(_ref,'DATA_OBOWIAZKU',_data);

:: Tablica do obsługi "Procentu składki dodatkowej pracodawcy".
_dod:=obj_new('il','suma','pr');
{! _lp:=1 .. obj_len(_dod)
|! _dod[_lp]:=0
!};

_dza:=_d0:=date(0,0,0);
P.cntx_psh();
P.index('PRACOSOW');
P.prefix(exec('firma','ustawienia'),_par.OSOBA);
F_ZATR.cntx_psh();
_loop:=P.last();
{!
|? _loop
|! {? (P.DZ=_d0 | P.DZ>=PPK_UCZ.OD)
   || {? P.F_ZATR().KOD='P' & (_dza=_d0 | P.DZA<_dza)
      || _dza:=P.DZA
      ?};
::   Zbieramy dane dotyczące procentu składki dodatkowej pracodawcy.
      _dod.il+=1;
      _dod.suma+=exec('licz_pwp','ppk',P.ref(),__RUB.sys_kod(711,PPK_UCZ.OD),PPK_UCZ.OD)
   ?};
   _loop:=P.prev()
!};
F_ZATR.cntx_pop();
P.cntx_pop();
{? _dza<>_d0
|| _par.dodaj(_ref,'DATA_ZATRUDNIENIA',xml_value(_dza))
?};

OS_ADRES.cntx_psh();
OS_ADRES.index('RODZAJ');

:: C - X:zamieszkania     / M:zamieszkania
:: K - X:korespondencji   / M:korespondencji
:: S - X:pobytu stałego   / M:zameldowania

{? _par.PARRAP.MAIL='T' | _par.PARRAP.TEL='T'
|| _find:="
      _osoba:=_a;
      _typ:=_b;
      _kontakt:=_c;
      {? _kontakt.email='' | _kontakt.tel=''
      || OS_ADRES.prefix(_osoba,_typ,);
         {? OS_ADRES.find_le(PPK_UCZ.OD) & (OS_ADRES.DO=date(0,0,0) | PPK_UCZ.OD<=OS_ADRES.DO)
         || {? _kontakt.email=''
            || _kontakt.email:=OS_ADRES.EMAIL
            ?};
            {? _kontakt.tel=''
            || _kontakt.tel:=OS_ADRES.TEL
            ?};
            _kontakt.email<>'' & _kontakt.tel<>''
         ?}
      ?}
   ";
   _kontakt:=obj_new('email','tel');
   _kontakt.email:=_kontakt.tel:='';
   _find(_par.OSOBA,'K',_kontakt) | _find(_par.OSOBA,'C',_kontakt) | _find(_par.OSOBA,'S',_kontakt);
   {? _par.PARRAP.MAIL='T' & _kontakt.email<>''
   || _par.dodaj(_ref,'KONTAKT_EMAIL',_kontakt.email)
   ?};
   {? _par.PARRAP.TEL='T' & _kontakt.tel<>''
   || _tel:=exec('g100tel','ppk_rpl',_kontakt.tel);
      {? _tel.status=0
      || _par.uwaga(_par.DIU,_tel.info)
      || _par.dodaj(_ref,'KONTAKT_TEL',_tel.numer)
      ?}
   ?}
?};

:: Adres zamieszkania lub pobytu stałego.
{? (OS_ADRES.prefix(_par.OSOBA,'C',); OS_ADRES.find_le(PPK_UCZ.OD) & (OS_ADRES.DO=_d0 | PPK_UCZ.OD<=OS_ADRES.DO)) |
   (OS_ADRES.prefix(_par.OSOBA,'S',); OS_ADRES.find_le(PPK_UCZ.OD) & (OS_ADRES.DO=_d0 | PPK_UCZ.OD<=OS_ADRES.DO))
|| {? OS_ADRES.KRAJ
   || _par.dodaj(_ref,'ADR_ZAM_KRAJ',OS_ADRES.KRAJ().KODISO)
   ?};
   {? OS_ADRES.KOD=''
   || _par.blad(
         _par.DIU,
         {? OS_ADRES.RODZAJ='C'
         || 'Brak kodu pocztowego w adresie zamieszkania ['+OS_ADRES.OD$1+'].'
         || 'Brak kodu pocztowego w adresie pobytu stałego ['+OS_ADRES.OD$1+'].'
         ?}
      )
   |? OS_ADRES.KRAJ().KODISO='PL' & ~exec('chkForm','#string',OS_ADRES.KOD,'%c%c-%c%c%c',0)
   || _par.blad(
         _par.DIU,
         {? OS_ADRES.RODZAJ='C'
         || 'Kod pocztowy w adresie zamieszkania ['+OS_ADRES.OD$1+'] jest niezgodny z formatem 00-000.'
         || 'Kod pocztowy w adresie pobytu stałego ['+OS_ADRES.OD$1+'] jest niezgodny z formatem 00-000.'
         ?}
      )
   || _par.dodaj(_ref,'ADR_ZAM_KOD_POCZ',OS_ADRES.KOD)
   ?};
   {? OS_ADRES.MIASTO<>''
   || _par.dodaj(_ref,'ADR_ZAM_MSC',OS_ADRES.MIASTO)
   ?};
   {? OS_ADRES.ULICA<>''
   || _par.dodaj(_ref,'ADR_ZAM_ULICA',OS_ADRES.ULICA)
:: Uzupełnianie ulicy miejscowością w przypadku braku ulicy i ustawionego parametru:
   |? _par.PARRAP.UL_MSC='T' & OS_ADRES.MIASTO<>''
   || _par.dodaj(_ref,'ADR_ZAM_ULICA',OS_ADRES.MIASTO)
   ?};
   {? OS_ADRES.DOM<>''
   || _par.dodaj(_ref,'ADR_ZAM_NR_DOMU',OS_ADRES.DOM)
   ?};
   {? OS_ADRES.LOKAL<>''
   || _par.dodaj(_ref,'ADR_ZAM_NR_MIESZ',OS_ADRES.LOKAL)
   ?}
|| _par.blad(_par.DIU,'Brak wymaganego adresu zamieszkania.')
?};

:: Adres do korespondencji.
OS_ADRES.prefix(_par.OSOBA,'K',);
{? OS_ADRES.find_le(PPK_UCZ.OD) & (OS_ADRES.DO=_d0 | PPK_UCZ.OD<=OS_ADRES.DO)
|| {? OS_ADRES.KRAJ
   || _par.dodaj(_ref,'ADR_KOR_KRAJ',OS_ADRES.KRAJ().KODISO)
   ?};
   {? OS_ADRES.KOD<>''
   || {? OS_ADRES.KRAJ().KODISO='PL' & ~exec('chkForm','#string',OS_ADRES.KOD,'%c%c-%c%c%c',0)
      || _par.blad(
            _par.DIU,
            'Kod pocztowy w adresie do korespondencji ['+OS_ADRES.OD$1+'] jest niezgodny z formatem 00-000.'
         )
      || _par.dodaj(_ref,'ADR_KOR_KOD_POCZ',OS_ADRES.KOD)
      ?}
   ?};
   {? OS_ADRES.MIASTO<>''
   || _par.dodaj(_ref,'ADR_KOR_MSC',OS_ADRES.MIASTO)
   ?};
   {? OS_ADRES.ULICA<>''
   || _par.dodaj(_ref,'ADR_KOR_ULICA',OS_ADRES.ULICA)
:: Uzupełnianie ulicy miejscowością w przypadku braku ulicy i ustawionego parametru:
   |? _par.PARRAP.UL_MSC='T' & OS_ADRES.MIASTO<>''
   || _par.dodaj(_ref,'ADR_KOR_ULICA',OS_ADRES.MIASTO)
   ?};
   {? OS_ADRES.DOM<>''
   || _par.dodaj(_ref,'ADR_KOR_NR_DOMU',OS_ADRES.DOM)
   ?};
   {? OS_ADRES.LOKAL<>''
   || _par.dodaj(_ref,'ADR_KOR_NR_MIESZ',OS_ADRES.LOKAL)
   ?}
?};

OS_ADRES.cntx_pop();

:: Procent składki dodatkowej pracodawcy liczony jest jako średnia.
{? _dod.il
|| _dod.pr:=_dod.suma/_dod.il$2
?};
_par.dodaj(_ref,'FIR_SKL_DOD_PROCENT',form(_dod.pr,,2,'9.'));

:: Opis sposobu wyliczania wpłaty dodatkowej pracodawcy
:: Pobierz wszystkie opisy dla osoby, pracownika i zleceń
_cnd:='PPK_PWP.FIRMA=:_d and to_date(:_b)<=PPK_PWP.OD and PPK_PWP.R=:_c and';
_TAB:=sql(
   'select PPK_PWP.REFERENCE as REF '
   'from PPK_PWP '
   'where '+_cnd+' PPK_PWP.OSOBA=:_a '
   'union '
   'select PPK_PWP.REFERENCE as REF '
   'from PPK_PWP join P using (PPK_PWP.P,P.REFERENCE) '
   'where '+_cnd+' P.OSOBA=:_a and P.FIRMA=:_d '
   'union '
   'select PPK_PWP.REFERENCE as REF '
   'from PPK_PWP join ZC using (PPK_PWP.ZC,ZC.REFERENCE) join P using(ZC.P,P.REFERENCE) '
   'where '+_cnd+' ZC.OSOBA=:_a and P.FIRMA=:_d',
   _par.OSOBA,PPK_UCZ.OD,__RUB.ref(__RUB.sys_kod(711,PPK_UCZ.OD,1)),exec('firma','ustawienia')
);
_opis:='';
{? type_of(_TAB)=type_of(SYSLOG)
|| PPK_PWP.cntx_psh();
   PPK_PWP.clear();
   _TAB.cntx_psh();
   _TAB.prefix();
   _loop:=_TAB.first();
   {!
   |? _loop
   |! {? PPK_PWP.seek(_TAB.REF,)
      || {? (_owd:=PPK_PWP.memo_txt(,1,'OWD'))<>''
         || _opis+=_owd+'\n'
         ?}
      ?};
      _loop:=_TAB.next()
   !};
   _TAB.cntx_pop();
   PPK_PWP.cntx_pop();
   {? _opis<>''
   || _opis-=1
   ?}
?};

{? _opis=''
:: Brak indywidualnych opisów, pobierz z umowy o zarządzanie
|| PPK_UMO.cntx_psh();
   PPK_UZA.cntx_psh();
   PPK_UZA.prefix();
   PPK_UCZ.PPK_UMO().PPK_UZA();
   _opis:=PPK_UZA.memo_txt(,1,'OWD');
   PPK_UZA.cntx_pop();
   PPK_UMO.cntx_pop()
?};
{? +_opis>255
   || _opis:=255+_opis;
      _par.uwaga('Zasada ustalania wpłaty dodatkowej',
         'Wartość skrócona do 255 znaków. Należy sprawdzić poprawność danych.')
?};
_par.dodaj(_ref,'FIR_SKL_DOD_OPIS',_opis);


:: Jeżeli uczestnik PPK od początku deklaruje opłacanie składki dodatkowej, to razem z informacją o rejestracji
:: należy przekazać informację o deklaracji uczestnika PPK, z typem UCZ_ZMIANA_SKŁADKI_DOD. Oznacza to, że dla
:: bieżącego pliku wymiany danych musi być zdefiniowany raport "Deklaracje uczestnika".

_xra:='Deklaracje uczestnika';
PPK_RTP.cntx_psh();
PPK_RTP.index('OPIS');
PPK_RTP.prefix(_par.RPL,_xra,);
{? ~PPK_RTP.first()
:: Brak raportu "Deklaracje uczestnika". A potrzebny?
|| _jest:=0;
   _dpo:=date(_par.R,_par.M,1);
   _dko:=_par.DATA;
   PPK_WNU.cntx_psh();
   PPK_WNU.index('UMO_WRD');
   PPK_WNU.prefix(KST_PPK.PPK_UMO,_par.OSOBA,'DWWD',);
   {? PPK_WNU.find_ge(_dpo)
   || {!
      |? {? _dpo<=PPK_WNU.OD & PPK_WNU.OD<=_dko
         || _jest+=1
         ?};
         {? PPK_WNU.OD<=_dko
         || PPK_WNU.next()
         ?}
      !}
   ?};
   PPK_WNU.cntx_pop();
   {? _jest
   || _par.blad(_par.DIU,'W pliku wymiany danych brakuje raportu "'+_xra+'" .')
   ?}
?};
PPK_RTP.cntx_pop();

_ref


\g100dekl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Deklaracja uczestnika (wersja 1.00, 1.02, 2.00)
::   WE: _a [_PPK_RDA] - Element nadrzędny.
::       _b [OBJECT]   - Wskazanie tablicy parametrów.
::   WY: Wskazanie utworzonej/znalezionej sekcji.
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;

_ref:=null();

:: Przesunięcie o KST_PPK.DWT_OKR dni, dla wniosków innych niż UCZ_WYPŁATA_TRANSFEROWA, korygowane później:
{? exec('jest_a11','ppk')
|| exec('czytaj','#stalesys',_par.DATA,KST_PPK,'DWT_OKR');
   _dwtOkr:=KST_PPK.DWT_OKR
|| _dwtOkr:=0
?};
_dpo:=date(_par.R,_par.M,1)-_dwtOkr;

_dko:=_par.DATA;

PPK_WNU.cntx_psh();
PPK_WNU.prefix();
PPK_WNU.f_set(
   'DATA',
   'join PPK_WRD using(PPK_WNU.PPK_WRD,PPK_WRD.REFERENCE)',
   'PPK_WNU.PPK_RDA is null and (PPK_WRD.WER_WYM=\'N\' or PPK_WNU.WER_STAT=\'T\') and '+
   'PPK_WNU.PPK_UCZ=:_a and PPK_WRD.RAP_ZEW=\'T\' and '+
   'to_date(:_b)<=PPK_WNU.DATA and PPK_WNU.DATA<=to_date(:_c)',
   _par.UCZ,_dpo,_dko
);
{? PPK_WNU.f_first()
|| {!
   |? _kod:=PPK_WNU.PPK_WRD().KOD;
      _dodDekl:=1;
::    Jeśli jest to wypłata, która nie pójdzie w raporcie ze względu na konieczne opóźnienie, to nie dodawać deklaracji:
      {? _kod='UCZ_WYPŁATA_TRANSFEROWA'
::       Opóżnienie raportowania wniosku o wypłatę transferową:
      || _dtOp:=_par.DATA-_dwtOkr;
::       Jeśli data wniosku jest większa niż data opóźnienia to nie raportuj:
         {? PPK_WNU.DATA>_dtOp
         || _dodDekl:=0
         ?};
::       Jeśli nie ma PPK_WIF bez blokady to nie raportuj:
         {? _dodDekl
         || PPK_WIF.cntx_psh();
            PPK_WIF.index('WNU_NAZ');
            PPK_WIF.prefix(PPK_WNU.ref());
::          Sprawdzenie, czy są PPK_WIF bez blokady:
            {? ~PPK_WIF.find_tab(0,'BLOKADA',,'=','N')
            || _dodDekl:=0
            ?};
            PPK_WIF.cntx_pop()
         ?}
::    Dla wniosków innych niż UCZ_WYPŁATA_TRANSFEROWA korekta początkowo rozszerzonego zakresu dat wniosków:
      || {? PPK_WNU.DATA<_dpo+_dwtOkr
         || _dodDekl:=0
         ?}
      ?};
      {? _dodDekl
      || {? _ref=null()
         || _ref:=_par.dodaj(_nad,'DANE_DEKLARACJI',,'S')
         ?};

         _dekl:=_par.dodaj(_ref,'DEKLARACJA',,'S',1);
         _par.dodaj(_dekl,'DATA_DEKLARACJI',xml_value(PPK_WNU.DATA));
         _par.dodaj(_dekl,'TYP_DEKLARACJI',_kod);
         PPK_WNU.PPK_RDA:=_dekl;
         PPK_WNU.put();

         {? _kod='UCZ_ZMIANA_SKŁADKI_POD' | _kod='UCZ_ZMIANA_SKŁADKI_DOD'
::       zmiana wpłaty podstawowej lub dodatkowej uczestnika
         || PPK_WPW.cntx_psh();
            PPK_WPW.index('RN');
            _atr:={? _kod+3='POD' || 712 || 713 ?};
            PPK_WPW.prefix(PPK_WNU.ref(),__RUB.sys_kod(_atr,PPK_WNU.OD));
            {? PPK_WPW.first()
            || _par.dodaj(_dekl,'PROCENT_SKLADKI',form(PPK_WPW.STAWKA,,2,'9.'))
            || _par.blad(
                  OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE+' - dane deklaracji uczestnika',
                  'Raport "'+_kod+'" - nieprawidłowo zdefiniowany procent wpłaty'
               )
            ?};
            PPK_WPW.cntx_pop()
         |? _kod='UCZ_WYPŁATA_TRANSFEROWA'
::       wypłata transferowa
         || _if:='';
            PPK_WIF.cntx_psh();
            PPK_WIF.index('WNU_NAZ');
            PPK_WIF.prefix(PPK_WNU.ref());
            _loop:=PPK_WIF.first();
            {!
            |? _loop
            |! {? PPK_WIF.BLOKADA<>'T'
               || _if+=PPK_WIF.ADRES().NAZWA
               ?};
               _loop:=PPK_WIF.next();
               {? _loop & _if<>'' & PPK_WIF.BLOKADA<>'T'
               || _if+=', '
               ?}
            !};
            PPK_WIF.cntx_pop();
            {? _if<>''
            || _par.dodaj(_dekl,'POP_PZIF_ID',_if)
            || _par.blad(
                  OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE+' - dane deklaracji uczestnika',
                  'Raport "'+_kod+'" - brak instytucji finansowej do wypłaty'
               )
            ?}
         ?}
      ?};

      PPK_WNU.f_next()
   !}
?};
PPK_WNU.f_clear();
PPK_WNU.cntx_pop();

_ref


\g100zmiana
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Zmiana danych (wersja 1.00)
::   WE: _a [_PPK_RDA] - Element nadrzędny.
::       _b [OBJECT]   - Wskazanie tablicy parametrów.
::       _c [STRING]   - Symbol zmiany (UCZESTNIK_ZMIANA / DANE_ZMIANA).
::   WY: Wskazanie utworzonej/znalezionej sekcji.
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;
_el:=_c;

_ref:=null();

:: najpierw dodaj dane identyfikacyjne
{? exec('g100ucz','ppk_rpl',_nad,_par)=0
:: dane są błędne, aktualizacja się nie uda
|| return(_ref)
?};

OSOBA.cntx_psh();
OSOBA.prefix();
PPK_UCZ.cntx_psh();
PPK_UCZ.prefix();
{? PPK_UCZ.seek(_par.UCZ)
:: dane identyfikacyjne
|| PPK_UCZ.OSOBA();

   PPK_XEL.cntx_psh();
   PPK_XEL.prefix();
   _xel:=exec('szukaj','ppk_xel',_el);
   {? _xel=null()
   || _par.blad(_par.DIU,'Brak definicji elementu "'+_el+'".')
   ?};

   PPK_ZDN.cntx_psh();
   PPK_ZDN.index('XEL');
   PPK_ZDN.prefix(PPK_UCZ.ref(),_xel);

:: _old wskazuje na ostatnio wysłane dane.
:: _new wskazuje na wartości aktualne.
   _old:=_new:=null();
:: _rap - czy aktualne wartości zostały zaraportowane?
   _rap:=0;
   {? PPK_ZDN.find_le(_par.DATA)
   || _new:=PPK_ZDN.ref();
      _rap:=PPK_ZDN.PPK_RDA<>null();
::    Szukamy danych, o których wie instytucja finansowa.
      {? PPK_ZDN.prev()
      || {!
         |? {? PPK_ZDN.PPK_RDA=null()
            || PPK_ZDN.prev()
            || _old:=PPK_ZDN.ref();
               0
            ?}
         !}
      ?}
   ?};

   {? ~(_el='UCZESTNIK_ZMIANA' & _old=null()) & _old<>_new & ~_rap &
      ~(_el='DANE_ZMIANA' & _par.PARRAP.MAIL='N' & _par.PARRAP.TEL='N')
   || PPK_ZDP.cntx_psh();
      PPK_ZDP.index('NUMER');
      PPK_ZDP.prefix(_new);
      {? PPK_ZDP.first()
      || _ref:=_par.dodaj(_nad,_el,,'S');
         _lp:=_pl:=_pesel:=0;
         {!
         |? _sym:=PPK_ZDP.PPK_XEL().SYMBOL;
            {? (_sym='PLEC' & _par.PARRAP.PLEC='N')
               |
               (_sym='DATA_UR' & _pesel & ((_par.PARRAP.DATA_UR='N' & _pl) | (_par.PARRAP.OB_PSL='N' & ~_pl)))
               |
               ( (_sym='DOK_TOZ_TYP'|_sym='DOK_TOZ_SYM')
                 &
                 _pesel
                 &
                 ((_par.PARRAP.DOK_TOZ='N' & _pl) | (_par.PARRAP.OB_PSL='N' & ~_pl))
               )
               |
               (_sym='KONTAKT_EMAIL' & _par.PARRAP.MAIL='N')
               |
               (_sym='KONTAKT_TEL' & _par.PARRAP.TEL='N')
::             Zgodnie z ustawionymi parametrami - pomijamy w eksporcie.
            || ~~
            |? _sym='KONTAKT_TEL'
::             Specjalna obsługa numeru telefonu (już wiemy, że nie jest pomijany).
            || _tel:=exec('g100tel','ppk_rpl',PPK_ZDP.WARTOSC);
               {? _tel.status=0
               || _par.uwaga(_par.DIU,_tel.info)
               || _lp+=(_par.dodaj(_ref,_sym,_tel.numer)<>null)
               ?}
            || {? _sym='OBYW' & PPK_ZDP.WARTOSC='PL'
               || _pl:=1
               |? _sym='NR_PESEL' & +PPK_ZDP.WARTOSC=11
               || _pesel:=1
               ?};
               _lp+=(_par.dodaj(_ref,_sym,PPK_ZDP.WARTOSC)<>null)
            ?};
            PPK_ZDP.next()
         !};
         {? _lp>1
::          Utworzono więcej niż DATA_ZMIANY.
         || {? PPK_ZDP.PPK_ZDN().PPK_RDA<>_ref
            || PPK_ZDN.PPK_RDA:=_ref;
               PPK_ZDN.put()
            ?}
         || _par.usun(_ref);
            _ref:=null()
         ?}
      ?};
      PPK_ZDP.cntx_pop()
   ?};

   PPK_ZDN.cntx_pop();

   PPK_XEL.cntx_pop()
?};
PPK_UCZ.cntx_pop();
OSOBA.cntx_pop();

_ref


\g100tel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Weryfikuje, czy numer telefonu można uznać za numer polskiego telefonu komórkowego
::   WE: _a STRING - oryginalny numer telefonu
::   WY: wskazanie tablicy nazwanej zawierającej:
::       status INTEGER - wynik weryfikacji numeru telefonu
::       numer STRING - znormalizowany numer telefonu
::       info STRING - treść komunikatu
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_num:=form(_a);

:: wartość zwracana - znormalizowany numer
_tel:=obj_new('status','numer','info');
_tel.status:=1;
_tel.numer:='';
_tel.info:='';

{? _num=''
|| return(_tel)
?};

:: usuń nieakceptowane znaki
_num:=gsub(_num,' ','');
_num:=gsub(_num,'-','');

{? _num*'+48'=1
|| _num:=3-_num
?};

{? +_num=9
|| _tel.numer:=_num
|| _tel.status:=0;
   _tel.info:='Numer telefonu "'+_a+'" nie jest numerem polskiego telefonu komórkowego.'
?};

_tel


\g100zwzu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Zakończenie współpracy z uczestnikiem (wersja 1.00)
::   WE: _a [_PPK_RDA] - Element nadrzędny.
::       _b [OBJECT]   - Wskazanie tablicy parametrów.
::   WY: Wskazanie utworzonej/znalezionej sekcji.
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;

:: wartość zwracana
_ref:=null;

{? (_wrd:=exec('szukaj','ppk_wrd','U','ZWZU'))=null
|| return(null)
?};

_zd:=date(0,0,0);
_od:=date(_par.R,_par.M,1);
_do:=_par.DATA;

:: czy z osobą zakończono współpracę w miesiącu raportowania?
_prac:=0;
_zwol:=_zd;
ZC.cntx_psh();
ZC.index('ZLECPRZ');
P.cntx_psh();
P.index('OSOBA');
P.prefix(_par.OSOBA);
_loop:=P.first();
{!
|? _loop & ~_prac
|! _f_zatr:=P.F_ZATR().KOD;
   {? _f_zatr='P'
::    pracownicy
   || {? P.DZA<=_do
::       aktualne zatrudnienie
      || {? P.DZ=_zd | P.DZ>_do
::          nadal współpracuje
         || _zwol:=_zd;
            _prac:=1

         |? _od<=P.DZ & P.DZ<=_do
::          potencjalne zwolnienie
         || _zwol:=P.DZ
         ?}
      ?}
   |? _f_zatr='Z'
::    zleceniobiorcy
   || ZC.prefix(P.ref());
      _loop:=ZC.first();
      {!
      |? _loop & ~_prac
      |! {? ZC.DU<=_do & '78m'*ZC.RU().K=0
::          aktualna umowa cywilno-prawna
         || {? ZC.DW=_zd | ZC.DW>_do
::             nadal współpracuje
            || _zwol:=_zd;
               _prac:=1

            |? _od<=ZC.DW & ZC.DW<=_do
::             sprawdzenie parametru ciągłości:
            || {? ZC.DW=_do & _par.PARRAP.ZLC_CG='T' & ZC.next()
               || {? ZC.DU=_do+1
::                   nadal współpracuje
                  || _zwol:=_zd;
                     _prac:=1;
                     ZC.prev()
                  || ZC.prev();
                     _zwol:=ZC.DW
                  ?}

::                potencjalne zakończenie
               || _zwol:=ZC.DW
               ?}
            ?}
         ?};
         _loop:=ZC.next()
      !}
   ?};
   _loop:=P.next()
!};
P.cntx_pop();
ZC.cntx_pop();

{? _prac=1
:: osoba nadal współpracuje
:: usuń utworzone wnioski
|| PPK_WNU.cntx_psh();
   PPK_WNU.prefix();
   PPK_WNU.f_set(
      'DATA',,
      'PPK_WNU.PPK_UCZ=:_a and PPK_WRD=:_b and '+
      'PPK_WNU.PPK_RDA is null and PPK_WNU.REJ_TRYB=\'A\' and '+
      'to_date(:_c)<=PPK_WNU.DATA and PPK_WNU.DATA<=to_date(:_d)',
      _par.UCZ,_wrd,_od,_do
   );
   {!
   |? PPK_WNU.f_first()
   |! PPK_WNU.del()
   !};
   PPK_WNU.f_clear();
   PPK_WNU.cntx_pop();
   return(_ref)

|? _zwol<>_zd
:: zaprzestano współpracy
|| _jest:=0;
   _rda:=null;
   PPK_WNU.cntx_psh();
:: uzupełnienie wniosków
   PPK_WNU.index('UCZ_OD');
   PPK_WNU.prefix(_par.UCZ,_zwol);
   {? ~PPK_WNU.find_tab(,'PPK_WRD',,'=',_wrd)
   || PPK_WNU.blank();
      PPK_WNU.PPK_UCZ:=_par.UCZ;
      PPK_WNU.PPK_WRD:=_wrd;
      PPK_WNU.DATA:=_zwol;
      PPK_WNU.OD:=_zwol;
      PPK_WNU.REJ_TRYB:='A';
      _jest:=PPK_WNU.add()
   || _rda:=PPK_WNU.PPK_RDA;
      _jest:=1
   ?};
   {? _jest & _rda=null
   || _ref:=_par.dodaj(_nad,'ZWOLNIENIE',,'S');
      _par.dodaj(_ref,'DATA_ZWOLNIENIA',xml_value(_zwol));
      PPK_WNU.PPK_RDA:=_ref;
      PPK_WNU.put()
   ?};
   PPK_WNU.cntx_pop()
?};

_ref


\rap_zap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Sprawdza, czy zestaw raportów może być zapisany do pliku.
::   WE: _a _PPK_RPL - Wskazanie na rekord tabeli PPK_RPL
::   WY: 0/1 - porażka/sukces
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_rpl:=_a;

_ret:=0;

{? exec('jest_rtp','ppk_rpl',_rpl)=0 | exec('jest_ruc','ppk_rpl',_rpl)=0
:: nie twórz plików dla pustego zestawu (brak raportów lub uczetników)
|| return(_ret)
?};

PPK_RPL.cntx_psh();
PPK_RPL.prefix();
{? PPK_RPL.seek(_rpl)
:: czy raport zawiera błędy?
|| _ret:=(PPK_RPL.LICZ_BL=0)
?};
PPK_RPL.cntx_pop();

_ret


\rap2xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła tworzy plik wymiany danych z raportem PPK w formacie XML i załącza go pod wskazany rekord.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::   WY: Wynik operacji: 0/1.
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;
:: czy dopuszczalne jest tworzenie xml?
{? -_par.PARRAP.RPZ_TYP<>'x'
|| return(0)
?};

_rpl:=_par.RPL;

{? exec('rap_zap','ppk_rpl',_rpl)=0
:: raport nie może być zapisany
|| return(0)
?};

_ret:=0;

PPK_RPL.cntx_psh();
PPK_RPL.prefix();
{? PPK_RPL.seek(_rpl)
|| PPK_RDA.cntx_psh();
   PPK_RDA.f_clear();
   PPK_RDA.index('NUMER');
   PPK_XEL.cntx_psh();
   PPK_XEL.prefix();

   _run:="
      _run:=_a;
      _rpl:=_b;
      _rda:=_c;
      _xml:=_d;
      _parent:=_e;

      _ret:=0;
      PPK_RDA.cntx_psh();
      PPK_RDA.prefix(_rpl,_rda);
      _loop:=PPK_RDA.first();
      {!
      |? _loop
      |! {? PPK_RDA.RODZAJ='S'
         || _ret+=1;
            _el:=_xml.addElement(PPK_RDA.PPK_XEL().SYMBOL,,_parent);
            _ret+=_run(_run,_rpl,#PPK_RDA.ref(),_xml,_el)
         |? PPK_RDA.RODZAJ='A'
         || _xml.addAttr(PPK_RDA.PPK_XEL().SYMBOL,PPK_RDA.WARTOSC)
         |? PPK_RDA.RODZAJ='W'
         || _ret+=1;
            _xml.addElement(PPK_RDA.PPK_XEL().SYMBOL,PPK_RDA.WARTOSC,_parent)
         ?};
         _loop:=PPK_RDA.next()
      !};
      PPK_RDA.cntx_pop();
      _ret
   ";

   exec('xml_t_decl','#xml_t');
   _xml:=obj_new(@.CLASS.XML_T);

   _pth:='';
   _tmp_dir:=fmk_tmp_dir(0);
   {? type_of(_tmp_dir)<>type_of(~~)
   || _pth:=_tmp_dir.get_path();
      _file:='';
      _sep:=exec('sep','#file',2);
      _file:=_pth+_sep
   || FUN.emsg('Nie udało się utworzenie katalogu tymczasowego po stronie serwera.'@);
      PPK_XEL.cntx_pop();
      PPK_RDA.cntx_pop();
      PPK_RPL.cntx_pop();
      return(0)
   ?};
   _fn:=_file+$PPK_RDA.tm_stamp()+'.xml';

   _ret:=_run(_run,PPK_RPL.ref(),0,_xml,0) & _xml.write(_fn);
   {? _ret
   || _name:='exp_'+form(PPK_RPL.R,-4,0,'9.')+'_'+form(PPK_RPL.M,-2,0,'9.')+'_'+form(PPK_RPL.NUMER,-4,0,'9.')+'.'+
         _par.PARRAP.XML_EXT;
      exec('update','ppk_rpz',PPK_RPL.ref(),'xml',,_fn,_name);
      ferase(_fn)
   || exec('update','ppk_rpz',PPK_RPL.ref(),'xml')
   ?};

   PPK_XEL.cntx_pop();
   PPK_RDA.cntx_pop()

?};
PPK_RPL.cntx_pop();

_ret


\xml2tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła odczytuje wskazany przez użytkownika plik XML i buduje na jego podstawie tabelę tymczasową.
::       Tabela, poza polami związanymi z uczestnikiem, zawiera informację o rodzaju raportu (SEKCJA) i specyficznych
::       dla niego parametrów (PAR). Treść pola PAR jest tablicą zapisaną w formacie JSON.
::   WE: _a [TABLE] - Tablica z parametrami (patrz \import/ppk_rpl.fml).
::   WY: Tablica elementów nazwanych.
::          err - Pole zawiera informację o przyczynie niepowodzenia lub jedną z wartości:
::                'ESC' - jeżeli użytkownik nie wskazał pliku;
::                ''    - jeżeli odczyt i analiza pliku przebiegła prawidłowo.
::          TAB - Pole może mieć wartość ~~ lub (jeżeli err='') być uchwytem do tabeli tymczasowej.
::          wer - Wersja importowanego pliku [STRING], np. '1.00'
::----------------------------------------------------------------------------------------------------------------------
_PAR:=_a;

_ret:=obj_new('err','TAB','wer');
:: Początkowa wartość:
_ret.wer:='0.00';
_ret.err:='';
_path:=_PAR.NAZWA;
{? ~exec('interm','#system')
|| _path:='@'+_PAR.NAZWA
?};

_fh:=fopen(_path,'ur',,,1,1);
{? ~_fh.is_open()
|| _ret.err:='Próba dostępu do pliku '+(1-_path)+' nie powiodła się.';
   return(_ret)
?};

:: Wstępne sprawdzenie wersji dostarczonego pliku:
params_set('ret',_ret);
xml_sax_parse(_fh,,,,,"
   _ret:=params_get().ret;
   {? _a*'GRUPA_PPK'
   || {? _ret.wer<>'0.00'
      || _ret.err:='Powtórzona sekcja z nazwą i wersją pliku.';
         return(0)
      ?};
      _wer:=form(gsub(_a,'GRUPA_PPK',''));
      {? ~('1.00,1.01'*_wer | ('1.02,2.00'*_wer & exec('jest_a11','ppk')))
      || _ret.err:='Nieprawidłowa nazwa i/lub numer wersji pliku.';
         return(0)
      ?};
      _ret.wer:=_wer
   ?};
   1
");
{? _ret.err<>''
|| return(_ret)
?};

:: Definicja obsługiwanych sekcji. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_SEKCJA:=obj_new('TAB','add','new');
_SEKCJA.TAB:=tab_tmp(1,
   'ID','STRING[32]','Identyfikator sekcji',
   'NEW','SYS_MEMO','Formuła tworząca tablicę nazwaną'
);
_SEKCJA.add:="
   .TAB.blank();
   .TAB.ID:=_a;
   .TAB.memo_set($_b,'NEW');
   .TAB.add() & .TAB.memo_put(,'NEW')
";
_SEKCJA.new:="($.TAB.memo_txt(,1,'NEW'))()";

:: Wartości początkowe w formule tworzącej tablicę nazwaną służą do określenia metody konwersji napisu (odczytanego z
:: pliku) na typ charakterystyczny dla danego pola. Obecnie obsługiwane typy:
::    0 - typ pusty;
::    1 - liczba;
::    2 - napis [domyślnie];
::    4 - data.
_SEKCJA.add('WYPLATA_SRODKOW',"_ret:=obj_new('DATA_WYPLATY'); _ret.DATA_WYPLATY:=date(0,0,0); _ret");
_SEKCJA.add('ZWROT_SRODKOW',"
   _ret:=obj_new('DATA_WYPLATY','SKL_ZA_OKRES','UCZ_WAR_POD','UCZ_WAR_DOD','FIR_WAR_POD','FIR_WAR_DOD');
   _ret.DATA_WYPLATY:=date(0,0,0);
   _ret.SKL_ZA_OKRES:='';
   _ret.UCZ_WAR_POD:=_ret.UCZ_WAR_DOD:=_ret.FIR_WAR_POD:=_ret.FIR_WAR_DOD:=0;
   _ret"
);
{? _ret.wer='1.00' | _ret.wer='1.01'
|| _SEKCJA.add('WYPLATA_TRANSFEROWA',"
      _ret:=obj_new('DATA_WYPLATY','POP_PZIF_ID');
      _ret.DATA_WYPLATY:=date(0,0,0);
      _ret.POP_PZIF_ID:='';
      _ret
   ")
|| _SEKCJA.add('WYPLATA_TRANSFEROWA',"
      _ret:=obj_new('DATA_WYPLATY','PZIF_WYPLACAJACA_NIP');
      _ret.DATA_WYPLATY:=date(0,0,0);
      _ret.PZIF_WYPLACAJACA_NIP:='';
      _ret
   ")
?};
_SEKCJA.add('NUMER_PPK',"
   _ret:=obj_new('ID_PPK','PZIF_RACH_PPK');
   _ret.ID_PPK:=_ret.PZIF_RACH_PPK:='';
   _ret"
);
_SEKCJA.add('ZWROT',"_ret:=obj_new('DATA_WYPLATY'); _ret.DATA_WYPLATY:=date(0,0,0); _ret");

:: Tabela z opisem struktury uczestnika.   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_STRU:=exec('imp_def','ppk_rpl');
_STRU.add('IMIE_2','DRUGIE','STRING['+$MS.fld_len(OSOBA,'DRUGIE')+']',MS.name(OSOBA,'DRUGIE'));
_STRU.add('DATA_UR','UR_DATA','DATE',MS.name(OSOBA,'UR_DATA'));
_STRU.add('PLEC','PLEC','STRING['+$MS.fld_len(OSOBA,'PLEC')+']',MS.name(OSOBA,'PLEC'));
_STRU.add('OBYW','OBYW','STRING[2]','Obywatelstwo');

_uczs:=obj_new('array','blank');
_uczs.array:=_uczs.blank:='';
_loop:=_STRU.TAB.first();
{!
|? {? _STRU.TAB.TAG<>''
   || _uczs.array+=',\''+_STRU.TAB.TAG+'\'';
      _uczs.blank+='; .array.'+_STRU.TAB.TAG+':='+{? _STRU.TAB.TYPE='DATE' || 'date(0,0,0)' || '\'\'' ?}
   ?};
   _loop:=_STRU.TAB.next()
!};

_STRU.TAB.index(_STRU.NDX.TAG);

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_buf:=obj_new('SEKCJA','STRU','TAB','err','check','ucz','sekcja','text');
:: Obiekt z opisem obsługiwanych struktur.
_buf.SEKCJA:=_SEKCJA;
:: Obiekt ze strukturą uczestnika.
_buf.STRU:=_STRU;
:: Tabela z płaską strukturą odczytanych danych.
_ret.TAB:=_buf.TAB:=_STRU.create();
:: Element, w którym będzie zapisany komunikat o błędzie - przyczyna niepowodzenia analizy.
_buf.err:='';
:: Lista punktów kontrolnych - warunków, które muszą zostać spełnione przez zawartość pliku.
_buf.check:=obj_new('wersja','nip','regon');
{! _lp:=1 .. obj_len(_buf.check)
|! _buf.check[_lp]:=0
!};
:: Element z danymi o uczestniku.
_buf.ucz:=obj_new('array','blank');
_buf.ucz.array:=($('obj_new('+(1-_uczs.array)+')'))();
_buf.ucz.blank:=$(2-_uczs.blank);

params_set('buf',_buf);
no_msg(1);
_parse:=xml_sax_parse(_fh,,,
:: Start element - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   "  _buf:=params_get().buf;
      _depth:=xml_path();
      _path:='';
      {! _lp:=1 .. _depth
      |! _path+='<'+xml_path('name',_depth-_lp)+'>'
      !};

      {? _path*'<PPK>'=0
::       Weryfikacja nazwy elementu głównego.
      || _buf.err:='Nieprawidłowy element główny.';
         return(0)

      |? _path='<PPK>'
::       Weryfikacja wersji elementu głównego.
      || _ok:=0;
         {! _lp:=1 // 4 .. obj_len(_e)
         |? ~_ok
         |! _ok:=_e[_lp]='wersja' & ('1.00,1.01,1.02,2.00'*_e[_lp+3])
         !};
         {? ~_ok
         || _buf.err:='<PPK> Brak atrybutu ""wersja"" lub nieprawidłowa wartość.';
            return(0)
         ?}

      |? _path='<PPK><DANE_UCZESTNIKA><UCZESTNIK>'
::       Początek sekcji uczestnika - czyszczenie tablicy nazwanej.
      || _buf.ucz.blank()

      |? _depth=4 & _path*'<PPK><DANE_UCZESTNIKA><UCZESTNIK>'=1
::       Przetwarzanie uczestnika.
      || _fld:=xml_path('name',0);
         {? _buf.SEKCJA.TAB.find_key(_fld,)
::          Jeżeli jest to początek obsługiwanej sekcji, to przygotujmy tablicę nazwaną na parametry / elementy sekcji.
         || _buf.sekcja:=_buf.SEKCJA.new()
         ?}
      ?};

      _buf.text:='';
      1
   ",
:: End element - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   "  _buf:=params_get().buf;
      _depth:=xml_path();
      _path:='';
      {! _lp:=1 .. _depth
      |! _path+='<'+xml_path('name',_depth-_lp)+'>'
      !};

      {? _path='<PPK><PRACODAWCA><NIP>'
      || _patt:=obj_new(2);
         _patt[1]:='-';
         _patt[2]:=' ';
         {? gsub(KST.NIP,_patt,'')=gsub(_buf.text,_patt,'')
         || _buf.check.nip+=1
         || _buf.err:='Niezgodny numer NIP pracodawcy.';
            return(0)
         ?}

      |? _path='<PPK><PRACODAWCA><REGON>'
      || _patt:=obj_new(2);
         _patt[1]:='-';
         _patt[2]:=' ';
         {? gsub(KST.REG,_patt,'')=gsub(_buf.text,_patt,'')
         || _buf.check.regon+=1
         || _buf.err:='Niezgodny numer REGON pracodawcy.';
            return(0)
         ?}

      |? _path*'<PPK><DANE_UCZESTNIKA><UCZESTNIK>'=1
::       Koniec przetwarzania elementu związanego z uczestnikiem.
      || _fld:=xml_path('name',0);
         {? _depth=5
::          Koniec pola sekcji.
         || _sec:=xml_path('name',1);
            {? _buf.SEKCJA.TAB.find_key(_sec,) & (_vp:=var_pres(_fld,_buf.sekcja))>0
::             Jeżeli jest to sekcja, którą obsługujemy i odpowiednie pole znajduje się w buforze,
::             to zapamiętajmy wartość tego pola (w postaci napisu!).
            || _val:=
                  {? _vp=1
                  || #_buf.text
                  |? _vp=4
                  || exec('str2date','#convert',_buf.text)
                  || _buf.text
                  ?};
               ($('_a.'+_fld+':=_b'))(_buf.sekcja,_val)
            ?}
         |? _depth=4
::          Koniec pola prostego uczestnika lub sekcji.
         || {? _buf.SEKCJA.TAB.find_key(_fld,)
::             Koniec obsługiwanej sekcji.
            || _buf.TAB.blank();
               _buf.TAB.SEKCJA:=_fld;
               _buf.TAB.memo_set(exec('array2fml','#array',_buf.sekcja),'PAR');
               _loop:=_buf.STRU.TAB.first();
               {!
               |? _loop
               |! {? _buf.STRU.TAB.TAG<>''
                  || ($('_a.'+_buf.STRU.TAB.ACR+':=_b.'+_buf.STRU.TAB.TAG))(_buf.TAB,_buf.ucz.array)
                  ?};
                  _loop:=_buf.STRU.TAB.next()
               !};
               _buf.TAB.add();
               _buf.TAB.memo_put(,'PAR');
               obj_del(_buf.sekcja)
            |? _buf.STRU.TAB.find_key(_fld,)
::             Koniec obsługiwanego pola.
            || _val:={? _buf.STRU.TAB.TYPE='DATE' || exec('str2date','#convert',_buf.text) || _buf.text ?};
               ($('_a.'+_fld+':=_b'))(_buf.ucz.array,_val)
            ?}
         ?}

      ?};

      1
   ",
:: Text  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   "params_get().buf.text+=_a"
);
no_msg(0);

_ret.err:=
   {? _parse
::    Analiza zakończyła sie sukcesem - sprawdźmy, czy spełnione zostały wszystkie warunki.
   || {? _buf.check.nip=0 & _buf.check.regon=0
      || 'Brak numeru NIP i REGON pracodawcy.'
      |? _buf.check.nip>1
      || 'Powtórzona sekcja z NIP-em pracodawcy.'
      || ''
      ?}
   |? _buf.err<>''
   || _buf.err
   || _xe:=xml_err();
      'Analiza i import danych z pliku '+_path+' nie była możliwa.'+
      {? _xe<>''
      || '\n\nDodatkowe informacje techniczne:\n'+_xe
      || ''
      ?}
   ?};

{? _ret.err<>''
|| _ret.TAB.erase()
?};

_ret


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła sterująca importem.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::
::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].

:: utworzenie katalogu tymczasowego w którym przechowywany będzie wybrany plik na serwerze
_file_pth:='';
_tmp_dir:=fmk_tmp_dir(0);
{? type_of(_tmp_dir)<>type_of(~~)
|| _pth:=_tmp_dir.get_path()
|| FUN.emsg('Nie udało się utworzyć katalogu tymczasowego po stronie serwera.'@)
?};

_efld_opt:="
   _tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
   {? var_pres('_b')=type_of(SYSLOG)
   || _TAB:=_b
   |? _tryb='1'
   || _TAB:=cur_tab(1,1)
   || return(0)
   ?};
   {? var_pres('_c')=type_of('')
   || _we:=_c
   |? _tryb='1'
   || _we:=cur_win(1,1)
   || return(0)
   ?};
   {? var_pres('_d')=type_of('')
   || _fld:=_d
   |? _tryb='1'
   || _fld:=cur_afld()
   || _fld:=''
   ?};

   _TAB.RPZ_TYP:='X';
   _TAB.CSV_NFO:='N';
   _TAB.XML_EXT:='ppk';
   {? KST_PPK.PPK_UMO
   || PPK_UZA.cntx_psh();
      PPK_UZA.prefix();
      KST_PPK.PPK_UMO().PPK_UZA();
      _PARRAP:=exec('parrap_b','ppk_uza',1);
      _TAB.RPZ_TYP:=_PARRAP.RPZ_TYP;
      _TAB.CSV_NFO:=_PARRAP.CSV_NFO;
      _TAB.CSV_NTR:=_PARRAP.CSV_NTR;
      _TAB.CSV_NT1:=_PARRAP.CSV_NT1;
      _TAB.CSV_NT2:=_PARRAP.CSV_NT2;
      _TAB.CSV_NT3:=_PARRAP.CSV_NT3;
      _TAB.CSV_NT4:=_PARRAP.CSV_NT4;
      _TAB.CSV_NT5:=_PARRAP.CSV_NT5;
      _TAB.XML_EXT:=_PARRAP.XML_EXT;
      PPK_UZA.cntx_pop()
   ?};

   {? _fld='' | _fld='PPK_UMO'
   || _TAB.efld_opt(_we,'enable=%1'[$(_TAB.RPZ_TYP='C')],,'TYP');
      _TAB.efld_opt(_we,'editable=%1'[$(KST_PPK.PPK_UMO<>null())],,'NAZWA')
   ?};

   {? _fld='' | _fld='NAZWA'
   || {? _TAB.RPZ_TYP='C' & _TAB.CSV_NFO='T' & _TAB.CSV_NTR>0 & _TAB.NAZWA<>''
      || _es:=1;
         _fh:=fopen(_TAB.NAZWA,'r',0,0,1);
         {? _fh.is_open()
         || _txt:=_fh.fread();
            {? _txt<>'\n' & _txt<>''
            || _kod:='';
               _nfo:=spli_str(_txt,';');
               {? _TAB.CSV_NTR<=obj_len(_nfo)
               || _kod:=gsub(_nfo[_TAB.CSV_NTR],'""','');
                  {? _kod=_TAB.CSV_NT1 || _TAB.TYP:=3
                  |? _kod=_TAB.CSV_NT2 || _TAB.TYP:=1
                  |? _kod=_TAB.CSV_NT3 || _TAB.TYP:=4
                  |? _kod=_TAB.CSV_NT4 || _TAB.TYP:=2
                  |? _kod=_TAB.CSV_NT5 || _TAB.TYP:=5
                  || _kod:=''
                  ?}
               ?};
               _es:=(_kod='')
            ?};
            _fh.fclose();
            obj_del(_fh)
         ?};
         _TAB.efld_opt(_we,'editable=%1,enable=%1'[$_es],,'TYP')
      ?};
      _TAB.efld_opt(_we,'editable=%1'[$(_TAB.NAZWA='')],KST_PPK,'PPK_UMO')
   ?};

   1
";

:: parametry działania
_PAR:=tab_tmp(1,
   'NAZWA','STRING[255]','Nazwa pliku'@,
   'TYP','INTEGER','Rodzaj raportu'@,
:: Pola techniczne
   'RPZ_TYP','STRING[1]','Format plików'@,
   'CSV_NFO','STRING[1]','Nagłówek informacyjny'@,
   'CSV_NTR','INTEGER','Pole określające typ importowanego raportu'@,
   'CSV_NT1','STRING[20]','"Zwrot środków w wyniku rozliczenia korekty"'@,
   'CSV_NT2','STRING[20]','"Nadanie uczestnikowi numeru w ewidencji"'@,
   'CSV_NT3','STRING[20]','"Wypłata środków przez uczestnika"'@,
   'CSV_NT4','STRING[20]','"Wypłata transferowa"'@,
   'CSV_NT5','STRING[20]','"Zwrot"'@,
   'XML_EXT','STRING[3]','Rozszerzenie pliku raportu'@,
   'TMP_DIR','STRING[255]','Ścieżka do pliku na serwerze'@
);
{? exec('interm','#system')
|| _PAR.TMP_DIR:=_pth
|| _PAR.TMP_DIR:=''
?};

:: obsługa wyboru pliku po naciśnięciu klawisza F3
_PAR.fld_fml('NAZWA','F3',
   "  _TAB:=cur_tab(1,1);
      exec('imp_src','ppk_rpl',_TAB.RPZ_TYP,{? _TAB.RPZ_TYP='C' || 'csv' || _TAB.XML_EXT ?},_TAB.TMP_DIR)
   "
);
_PAR.fld_fml('NAZWA','AFTER_EDIT',_efld_opt);

:: okienko parametrów importu danych z pliku wymiany
_wnd:=_PAR.mk_edit('Import raportu PPK'@,0,'#imp');
_PAR.win_esep(_wnd,'Dane podstawowe'@);
:: dla określenia umowy o prowadzenie
_PAR.win_efld(_wnd,KST_PPK,'PPK_UMO','NUMER','*',40,,,'Umowa o prowadzenie'@,,
   'Numer umowy o prowadzenie pracowniczego planu kapitałowego'@
);
:: nazwa pliku z danymi
_PAR.win_efld(_wnd,,'NAZWA',,,40,,,,,
   'Nazwa pliku z danymi przekazanymi przez instytucję finansową'@,,
   'F3_button=1'
);
:: wybór rodzaju importowanych informacji
_PAR.win_efld(_wnd,,'TYP',,,,,,,,
   'Rodzaj informacji przekazanej przez instytucję finansową'@,
   'radio-buttons',,
   'Zwrot środków w wyniku rozliczenia korekty',"1",
   'Nadanie uczestnikowi numeru w ewidencji'@,"2",
   'Wypłata środków przez uczestnika'@,"3",
   'Wypłata transferowa'@,"4",
   'Zwrot'@,"5"
);
:: oznaczenie wymaganych pól i przyciski
_PAR.efld_opt(_wnd,'mark=1',KST_PPK,'PPK_UMO');
_PAR.efld_opt(_wnd,'mark=1',,'NAZWA');
exec('ok_esc','#window',_PAR,_wnd,,,,,,,'Importuj'@);
_PAR.win_edit(_wnd);

KST_PPK.cntx_psh();
_buf_ae:=KST_PPK.fld_fml('PPK_UMO','AFTER_EDIT',_efld_opt);
PPK_UMO.cntx_psh();
PPK_UMO.prefix();
PPK_UMO.f_clear();
PPK_UMO.f_set(
   'NUMER',
   'join PPK_UZA using(PPK_UMO.PPK_UZA,PPK_UZA.REFERENCE)',
   'PPK_UZA.FIRMA=:_a',
   exec('ref_firma','ustawienia')
);
PPK_UMO.actions('WYB','W');
PPK_UMO.win_dict('WYB');
PPK_UZA.cntx_psh();
PPK_UZA.prefix();

_efld_opt('*',_PAR,_wnd);

{? _PAR.edit("
      _PAR:=cur_tab();
      _plik:='';
      {? exec('interm','#system')
      || _PAR.NAZWA:=_PAR.TMP_DIR+exec('sep','#file',1)+_PAR.NAZWA;
         _plik:=_PAR.NAZWA
      || _plik:='@'+_PAR.NAZWA
      ?};
      {? (_chk:=__CHK.record(KST_PPK,,'PPK_UMO'))<>'' || _chk
      |? (_chk:=__CHK.record(_PAR,,'NAZWA'))<>'' || _chk
      |? ~fexists(_plik)
      || FUN.emsg('Plik \"%1\" nie istnieje.'@[_PAR.NAZWA]);
         'NAZWA'
      || 1
      ?}
   ")
|| {? _PAR.RPZ_TYP='X' || exec('imp_xml','ppk_rpl',_PAR)
   |? _PAR.RPZ_TYP='C' || exec('imp_csv','ppk_rpl',_PAR)
   ?}
?};

:: porządki
PPK_UZA.cntx_pop();
PPK_UMO.f_clear();
PPK_UMO.actions('WYB');
PPK_UMO.cntx_pop();
KST_PPK.fld_fml('PPK_UMO','AFTER_EDIT',_buf_ae);
KST_PPK.cntx_pop();
obj_del(_PAR);

~~


\imex_str
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Tworzy bufor potrzebny do zapisu informacji o strukturze danych uczestnika.
::   WE:
::   WY: wskazanie tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_STRU:=obj_new('TAB','NDX','add','create');

_STRU.TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.',
   'TAG','STRING[32]','XML Tag',
   'ACR','STRING[8]','Akronim pola',
   'TYPE','STRING[12]','Typ pola',
   'NAME','STRING[64]','Nazwa pola'
);

_STRU.NDX:=obj_new('LP','TAG');
_STRU.NDX.LP:=_STRU.TAB.index('?');
_STRU.NDX.TAG:=_STRU.TAB.ndx_tmp(,,'TAG',,);

_STRU.add:="
   _lp:=.TAB.size()+1;
   .TAB.blank();
   .TAB.LP:=_lp;
   .TAB.TAG:={? var_pres('_a')=type_of('') || _a || '' ?};
   .TAB.ACR:=_b;
   .TAB.TYPE:=_c;
   .TAB.NAME:=_d;
   .TAB.add()
";

_STRU.create:="
   _cols:='';
   .TAB.cntx_psh();
   .TAB.index(.NDX.LP);
   _loop:=.TAB.first();
   {!
   |? _loop
   |! _cols+=',\\'%1\\',\\'%2\\',\\'%3\\''[.TAB.ACR,.TAB.TYPE,.TAB.NAME];
      _loop:=.TAB.next()
   !};
   .TAB.cntx_pop();
   ($('tab_tmp(1'+_cols+')'))()
";

_STRU


\imex_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Tworzy bufor potrzebny do zapisu informacji o strukturze danych uczestnika i wypełnia domyślne wartości.
::   WE:
::   WY: wskazanie tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_STRU:=exec('imex_str','ppk_rpl');

_STRU.add(,'LP','INTEGER','Liczba porządkowa');
_STRU.add('NR_PESEL','PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']',MS.name(OSOBA,'PESEL'));
_STRU.add('DOK_TOZ_TYP','DOK_TYP','STRING[1]','Dokument tożsamości - typ');
_STRU.add('DOK_TOZ_SYM','DOK_SYM','STRING[50]','Dokument tożsamości - seria i numer');
_STRU.add('ID_KADRY','ID_APP','STRING['+$MS.fld_len(PPK_UCZ,'ID_APP')+']',MS.name(PPK_UCZ,'ID_APP'));
_STRU.add('NAZWISKO','NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']',MS.name(OSOBA,'NAZWISKO'));
_STRU.add('IMIE','PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']',MS.name(OSOBA,'PIERWSZE'));
_STRU.add('ID_PPK','ID_PPK','STRING['+$MS.fld_len(PPK_UCZ,'ID_PPK')+']',MS.name(PPK_UCZ,'ID_PPK'));
_STRU.add('PZIF_RACH_PPK','NR_RACH','STRING['+$MS.fld_len(PPK_UCZ,'NR_RACH')+']',MS.name(PPK_UCZ,'NR_RACH'));

_STRU


\imp_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Tworzy bufor potrzebny do zapisu informacji o strukturze danych uczestnika i wypełnia domyślne wartości.
::   WE:
::   WY: wskazanie tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_STRU:=exec('imex_def','ppk_rpl');

_STRU.add(,'SEKCJA','STRING[32]','Symbol sekcji');
_STRU.add(,'PAR','SYS_MEMO','Parametry');

_STRU


\imp_src
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Wyświetla okienko wyboru plików.
::   WE: _a [STRING] - typ pliku [C/X]
::       _b [STRING] - rozszerzenie pliku [csv/ppk/xml]
::       [_c] [STRING] - ścieżka do pliku na serwerze (argument wymagany dla inTerm)
::   WY: ścieżka do wybranego pliku lub pusty ciąg znaków
:: ~OST: INFILECHOOSER
::----------------------------------------------------------------------------------------------------------------------
_inTerm:=exec('interm','#system');
_type:=_a;
_ext:=_b;

_sec:='PPK';
_par:='OpenDir';
_dir:=exec('get','#profile',,_sec,_par);
{? _inTerm
|| _pth:=_c;
   _ext1:='.'+_ext;
   {? _type='X'
   || _ext2:={? _ext='ppk' || 'xml' || 'ppk' ?};
      _ext1+=',.'+_ext2
   ?};
   dlg_upload(_pth,0,_ext1)
||
   ctr_set('!application','filechooser','reset');
   ctr_set('!application','filechooser','addDefaultFilter','Pliki wymiany danych PPK (%1)'@ [_ext],_ext);
   {? _type='X'
   || _ext2:={? _ext='ppk' || 'xml' || 'ppk' ?};
      ctr_set('!application','filechooser','addFilter','Pliki wymiany danych PPK (%1)'@ [_ext2],_ext2)
   ?};
   ctr_set('!application','filechooser','setMultiSelectionEnabled',0);
   ctr_set('!application','filechooser','setFileSelectionMode','FILES_ONLY');
   ctr_set('!application','filechooser','setCurrentDirectory',_dir);
   {? ctr_call('!application','filechooser','showOpenDialog')
   || _path:=ctr_call('!application','filechooser','getSelectedFile');
      _sep:={? sys_name(0)='U_LINUX' || %47 || %92 ?};
      _dira:=spli_str(1-_path,_sep);
      _dir:=_path-(+_dira[obj_len(_dira)]+1);
      exec('set','#profile',,_sec,_par,1-_dir);
      _path
   || ''
   ?}
?}


\imp_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła zajmująca się wdrożeniem informacji odczytanych z pliku XML.
::   WE: _a [TABLE] - Tablica z parametrami (patrz \import/ppk_rpl.fml).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_PAR:=_a;

_plik:=exec('xml2tab','ppk_rpl',_PAR);
{? _plik.err<>''
|| FUN.info(_plik.err);
   return()
?};

exec('imp_tab','ppk_rpl',_plik.TAB,_plik.wer)


\imp_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła zajmująca się wdrożeniem informacji odczytanych z importowanego pliku i "przełożonych" do odpowiedniej
::       struktury.
::   WE: _a TABLE - alias tymczasowej tabeli z danymi
::       _b [STRING] - oznaczenie wersji raportu (domyślnie '1.00')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_DANE:=_a;
_wer:=
   {? var_pres('_b')<>type_of('') | _b=''
   || '1.00'
   || _b
   ?};

_RAP:=obj_new('TAB','add');
_RAP.TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.',
   'ID_APP','STRING['+$MS.fld_len(PPK_UCZ,'ID_APP')+']',MS.name(PPK_UCZ,'ID_APP'),
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']',MS.name(OSOBA,'NAZWISKO'),
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']',MS.name(OSOBA,'PIERWSZE'),
   'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']',MS.name(OSOBA,'PESEL'),
   'SEKCJA','STRING['+$MS.fld_len(_DANE,'SEKCJA')+']','Rodzaj raportu',
   'RODZAJ','STRING[1]','Rodzaj',
   'OPIS','SYS_MEMO','Opis przyczyny'
);
_RAP.add:="
   _DANE:=_a;
   _rodzaj:=_b;
   _opis:=_c;

   _lp:=.TAB.size()+1;
   .TAB.blank();
   .TAB.LP:=_lp;
   .TAB.SEKCJA:=_DANE.SEKCJA;
   .TAB.ID_APP:=_DANE.ID_APP;
   .TAB.NAZWISKO:=_DANE.NAZWISKO;
   .TAB.PIERWSZE:=_DANE.PIERWSZE;
   .TAB.PESEL:=_DANE.PESEL;
   .TAB.RODZAJ:=_b;
   .TAB.memo_set(_c,'OPIS');
   .TAB.add() & .TAB.memo_put(,'OPIS')
";

PPK_UCZ.cntx_psh();
PPK_UCZ.clear();
_loop:=_DANE.first();
{!
|? _loop
|! _jest:=0;
   {? ~_jest & _DANE.ID_APP<>''
   || PPK_UCZ.index('ID_APP');
      _jest:=PPK_UCZ.find_key(exec('firma','ustawienia'),_DANE.ID_APP,)
   ?};
   {? ~_jest & _DANE.NAZWISKO<>'' & _DANE.PIERWSZE<>'' & _DANE.PESEL<>''
   || PPK_UCZ.index('OSOBA');
      _jest:=PPK_UCZ.find_key(KST_PPK.PPK_UMO,_DANE.NAZWISKO,_DANE.PIERWSZE,_DANE.PESEL,)
   ?};
   {? ~_jest
   || _RAP.add(_DANE,'B','Identyfikacja uczestnika nie powiodła się.')
   || {? (_memo:=_DANE.memo_txt(,1,'PAR'))<>''
      || _par:=($_memo)()
      || _par:=~~
      ?};

      {? _DANE.SEKCJA='NUMER_PPK'
      || {? PPK_UCZ.ID_PPK=_par.ID_PPK & PPK_UCZ.NR_RACH=_par.PZIF_RACH_PPK
         || _RAP.add(_DANE,'O',
               'Aktualizacja danych uczestnika ("Identyfikator w ewidencji" i/lub "Numer rachunku") '+
               'nie była wymagana (dane były już zaktualizowane).'
            )
         |? PPK_UCZ.ID_PPK:=_par.ID_PPK;
            PPK_UCZ.NR_RACH:=_par.PZIF_RACH_PPK;
            PPK_UCZ.put()
         || _RAP.add(_DANE,'I',
               'Dane uczestnika ("Identyfikator w ewidencji" i/lub "Numer rachunku") zostały zaktualizowane.'
            )
         || _RAP.add(_DANE,'B',
               'Aktualizacja danych uczestnika ("Identyfikator w ewidencji" i/lub "Numer rachunku") nie powiodła się.'
            )
         ?}

      |? _DANE.SEKCJA='WYPLATA_SRODKOW'
      || _dt:=_par.DATA_WYPLATY;
         _wrds:='WS60';
         _wrdr:=exec('szukaj','ppk_wrd','U',_wrds);
         {? _wrdr=null()
         || _RAP.add(_DANE,'B','Brak definicji wniosku "'+_wrds+'".')
         |? exec('szukaj','ppk_wnu',PPK_UCZ.PPK_UMO,PPK_UCZ.OSOBA,_wrds,_dt)<>null()
         || _RAP.add(_DANE,'O','Wniosek "'+_wrds+'" z '+(_dt$6)+' roku już istnieje.')
         || _ret:=exec('dodaj','ppk_wnu',
               PPK_UCZ.OSOBA,'U',_dt,,PPK_UCZ.PPK_UMO,PPK_UCZ.ref(),_wrdr,OPERATOR.USER().DANE
            );
            {? _ret.ok
            || exec('zmien','ppk_wnu',_ret.ppk_wnu,"PPK_WNU.REJ_TRYB:=_a[1]",'I');
               _RAP.add(_DANE,'I','Wniosek "'+_wrds+'" z '+(_dt$6)+' roku został zarejestrowany.')
            || _RAP.add(_DANE,'B',
                  'Zarejestrowanie wniosku  "'+_wrds+'" z '+(_dt$6)+' roku '+
                  'nie powiodło się.'+{? _ret.errMsg<>'' || ' '+_ret.errMsg || '' ?}
               )
            ?};

            obj_del(_ret)
         ?}

      |? _DANE.SEKCJA='ZWROT_SRODKOW'
      || _dt:=_par.DATA_WYPLATY;
         _okres:=_par.SKL_ZA_OKRES;
         _rok:=#(4+_okres);
         _mc:=#(_okres+2);
         _id:='"Zwroty wpłat" dla '+(2-date(_rok,_mc,1)$6)+' roku';
         PPK_KWN.cntx_psh();
         PPK_KWN.index('ZWR');
         PPK_KWN.prefix(PPK_UCZ.FIRMA,PPK_UCZ.OSOBA,'Z',_rok,_mc,_dt);
         {? PPK_KWN.first()
         || _RAP.add(_DANE,'O','Zapis w kartotece '+_id+' już istnieje.')
         || do();
            PPK_KWN.blank();
            PPK_KWN.P:=null();
            PPK_KWN.R:=_rok;
            PPK_KWN.M:=_mc;
            PPK_KWN.TYP:='Z';
            PPK_KWN.AUTO:='T';
            PPK_KWN.DATA_KOR:=date(_rok,_mc,0);
            PPK_KWN.RODZAJ:='I';
            PPK_KWN.TYTUL:='-';
            PPK_KWN.OSOBA:=PPK_UCZ.OSOBA;
            PPK_KWN.DATA_WYP:=_par.DATA_WYPLATY;
            PPK_KWN.FIRMA:=PPK_UCZ.FIRMA;
            {? PPK_KWN.add()
            || exec('add_attr','ppk_kwk',PPK_KWN.ref(),720,_par.FIR_WAR_POD);
               exec('add_attr','ppk_kwk',PPK_KWN.ref(),721,_par.FIR_WAR_DOD);
               exec('add_attr','ppk_kwk',PPK_KWN.ref(),722,_par.UCZ_WAR_POD);
               exec('add_attr','ppk_kwk',PPK_KWN.ref(),723,_par.UCZ_WAR_DOD)
            ?};
            {? end()
            || _RAP.add(_DANE,'I','Zapis w kartotece '+_id+' został utworzony.')
            || _RAP.add(_DANE,'B','Utworzenie zapisu w kartotece '+_id+' nie powiodło się.')
            ?}
         ?};
         PPK_KWN.cntx_pop()

      |? _DANE.SEKCJA='WYPLATA_TRANSFEROWA' | _DANE.SEKCJA='ZWROT'
      || _dt:=_par.DATA_WYPLATY;
         {? _DANE.SEKCJA='WYPLATA_TRANSFEROWA'
         || _krd:='WYPTRANS';
            _pzif:=
               {? _wer='1.00' | _wer='1.01'
               || _par.POP_PZIF_ID
               || _par.PZIF_WYPLACAJACA_NIP
               ?};
            _tresc:=exec('wyptrans','ppk_krd',_dt,_pzif,_wer)
         || _krd:='ZWROT';
            _tresc:=exec('zwrot','ppk_krd',_dt)
         ?};
         _id:='"'+_krd+'" z '+_dt$6+' roku';

         _PARRAP:=exec('parrap_b','ppk_uza',1);
         {? _PARRAP.GEN_KOM<>'T'
         || _RAP.add(_DANE,'B','Niezaznaczony parametr "'+MS.name(_PARRAP,'GEN_KOM')+'" - '+
                               'nie utworzono komunikatu "'+_krd+'".')
         |? exec('szukaj','ppk_krd','U',_krd)=null()
         || _RAP.add(_DANE,'B','Brak definicji komunikatu "'+_krd+'".')
         |? _tresc=''
         || _RAP.add(_DANE,'B','Utworzenie treści komunikatu '+_id+' nie powiodło się.')
         |? exec('szukaj_ucz','ppk_kom',PPK_UCZ.ref(),_krd,_dt,_tresc)
         || _RAP.add(_DANE,'O','Komunikat '+_id+' już istnieje.')
         |? (_kom:=exec('dodaj','ppk_kom',PPK_UCZ.ref(),_krd,_dt,'T',_tresc))=null()
         || _RAP.add(_DANE,'B','Utworzenie komunikatu '+_id+' nie powiodło się.')

::          Obsługa wysyłki komunikatu.
         |? exec('fun_perm','ppk')
         || {? _PARRAP.GEN_MAIL='T'
            || {? exec('wyslij','ppk_kom',_kom,0)
               || _RAP.add(_DANE,'I','Komunikat '+_id+' został utworzony i wysłany.')
               || _RAP.add(_DANE,'O','Komunikat '+_id+' został utworzony ale nie udało się go wysłać.')
               ?}
            || _RAP.add(_DANE,'O','Komunikat '+_id+' został utworzony ale nie został wysłany. '+
                                  'Niezaznaczony parametr "'+MS.name(_PARRAP,'GEN_MAIL')+'".')
            ?}
         || _RAP.add(_DANE,'I','Komunikat '+_id+' został utworzony.')
         ?};
         obj_del(_PARRAP)

      || _RAP.add(_DANE,'O','Brak obsługi sekcji.')
      ?};

      {? var_pres('_par')>100
      || obj_del(_par)
      ?}
   ?};

   _loop:=_DANE.next()
!};
PPK_UCZ.cntx_pop();

{? _RAP.TAB.first()
|| _dh:=_RAP.TAB.size()+2;
   {? _dh<5
   || _dh:=5
   |? _dh>30
   || _dh:=30
   ?};
   _ws:=_RAP.TAB.mk_sel('Raport z przetwarzania'@,,,'#imperr',,,_dh,,'U');
   _RAP.TAB.win_fld(_ws,,'LP',,,-5,,,,,'Liczba porządkowa'@);
   _RAP.TAB.win_fld(_ws,,'ID_APP',,,,,,,,MS.comment(PPK_UCZ,'ID_APP'));
   _RAP.TAB.win_fld(_ws,,'NAZWISKO',,,20,,,,,MS.comment(OSOBA,'NAZWISKO'));
   _RAP.TAB.win_fld(_ws,,'PIERWSZE',,,15,,,,,MS.comment(OSOBA,'PIERWSZE'));
   _RAP.TAB.win_fld(_ws,,'PESEL',,,,,,,,MS.comment(OSOBA,'PESEL'));
   _RAP.TAB.win_fld(_ws,,'SEKCJA',,,20,,,,,'Symbol rodzaju raportu'@);
   _RAP.TAB.win_fld(_ws,,'RODZAJ',,,-3,,,,,'Rodzaj komunikatu [Błąd/Ostrzeżenie/Informacja]'@);
   _RAP.TAB.win_fld(_ws,,'OPIS',,,80,,,,,'Opis przyczyny'@);
   _RAP.TAB.win_act(_ws,,'Szukaj');
   _RAP.TAB.win_act(_ws,,'Kolejność');
   _RAP.TAB.win_sel(_ws);
   _we:=_RAP.TAB.mk_edit('Pozycja raportu z przetwarzania'@,,'#imperr');
   _szer:=30;
   _RAP.TAB.win_esep(_we,'Dane identyfikacyjne'@);
   _RAP.TAB.win_efld(_we,,'ID_APP',,,_szer,,,,,MS.comment(PPK_UCZ,'ID_APP'));
   _RAP.TAB.win_efld(_we,,'NAZWISKO',,,_szer,,,,,MS.comment(OSOBA,'NAZWISKO'));
   _RAP.TAB.win_efld(_we,,'PIERWSZE',,,_szer,,,,,MS.comment(OSOBA,'PIERWSZE'));
   _RAP.TAB.win_efld(_we,,'PESEL',,,_szer,,,,,MS.comment(OSOBA,'PESEL'));
   _RAP.TAB.win_esep(_we,'Raport'@);
   _RAP.TAB.win_efld(_we,,'SEKCJA',,,_szer,,,,,'Symbol rodzaju raportu'@);
   _RAP.TAB.win_ecol(_we);
   _RAP.TAB.win_esep(_we,'Komunikat'@);
   _RAP.TAB.win_efld(_we,,'RODZAJ',,,,,,,,,'radio-buttons','left_label=1',
      'Informacja'@,"'I'",
      'Ostrzeżenie'@,"'O'",
      'Błąd'@,"'B'"
   );
   _RAP.TAB.win_efld(_we,,'OPIS',,,60,-5);
   _RAP.TAB.win_edit(_we);
   _RAP.TAB.select()
|| FUN.info('Import danych został zakończony.'@)
?};

~~


\rap2csv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Formuła tworzy pliki wymiany danych z raportem PPK w formacie CSV i załącza je pod wskazany rekord.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::   WY: wynik operacji: 0/1 - porażka/sukces.
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;
:: czy dopuszczalne jest tworzenie csv?
{? -_par.PARRAP.RPZ_TYP<>'c'
|| return(0)
?};

_rpl:=_par.RPL;

{? exec('rap_zap','ppk_rpl',_rpl)=0
:: raport nie może być zapisany
|| return(0)
?};

_ret:=0;
_fml:=obj_new('DAT','EXP','NFO','RAP');
_xel:=exec('c100_xel','ppk_rpl');

PPK_RPL.cntx_psh();
PPK_RPZ.cntx_psh();
PPK_RPZ.index('RODZAJ');
PPK_RPZ.prefix(_rpl);
PPK_RTP.cntx_psh();
PPK_RTP.index('OPIS');
PPK_RTP.prefix(_rpl);

_loop:=PPK_RTP.first();
{!
|? _loop
|! {? PPK_RTP.ILOSC>0
::    Tworzony plik nie powienien być pusty - wymagamy co najmniej jednego raportu.
   || _fml.DAT:=_fml.EXP:='';
      _fml.NFO:='c100_nfo';
      _fml.RAP:='';
      _rtp:=PPK_RTP.ref();
      _sym:=PPK_RTP.PPK_XEL().SYMBOL;
      _wer:=PPK_RTP.PPK_RPL().PPK_XWE().NUMER;
::    ustal nazwy formuł tworzących załącznik
      {? _sym='SKLADKA'
::       wpłaty
      || _fml.DAT:='c100dwpl';
         _fml.EXP:='c100xwpl'

      |? _sym='DANE_KOREKT'
::       korekty wpłat
      || _fml.DAT:='c100dkor';
         _fml.EXP:='c100xwpl'

      |? _sym='REJESTRACJA'
::       rejestracja
      || _fml.DAT:='c100drej';
         _fml.EXP:='c100xrej'

      |? _sym='DANE_ZMIANA'
::       zmiana danych kontaktowych
      || _fml.DAT:='c100dzdk';
         _fml.EXP:='c100xzdk'

      |? _sym='UCZESTNIK_ZMIANA'
::       zmiana danych identyfikacyjnych
      || _fml.DAT:='c100dzdi';
         _fml.EXP:='c100xzdi'

      |? _sym='DANE_DEKLARACJI'
::       wnioski i deklaracje
      || _fml.DAT:='c100ddek';
         _fml.EXP:='c100xdek'

      |? _sym='ZWOLNIENIE'
::       zakończenie współpracy
      || _fml.DAT:='c100dzwo';
         _fml.EXP:='c100xzwo'

      |? _sym='TRANSFER'
::       transfer PPK
      || {? _wer='2.00'
         || {? ~exec('jest_a11','ppk')
            || FUN.error('Nie można wygenerować raportu Transfer PPK. Definicja nie zawiera aktualizacji.'@);
               PPK_RTP.cntx_pop();
               PPK_RPZ.cntx_pop();
               PPK_RPL.cntx_pop();
               return(0)
            ?};
            _fml.DAT:='c200dtra';
            _fml.EXP:='c200xtra'
         ?}
      ?};
      {? _fml.DAT<>'' & _fml.EXP<>''
      || _csv:='%1_%2_%3_%4.csv'[
            -_sym,
            form(PPK_RPL.R,-4,,'99'),
            form(PPK_RPL.M,-2,,'99'),
            form(PPK_RPL.NUMER,-4,,'99')
         ];
         _out:=fopen(null,'w!',,,1);
         _fld:=exec(_fml.EXP,'ppk_rpl');
         _BUF:=exec(_fml.DAT,'ppk_rpl',_par,_rtp,_xel);
         {? _fld<>'' & type_of(_BUF)=type_of(SYSLOG)
         ||    _tmp_dir:=fmk_tmp_dir(0);
               {? type_of(_tmp_dir)<>type_of(~~)
               || _pth:=_tmp_dir.get_path();
                  _file:='';
                  _sep:=exec('sep','#file',2);
                  _tmp:=_pth+_sep+'ppk_%1.csv' [$PPK_RPL.tm_stamp()]
               || FUN.emsg('Nie udało się utworzenie katalogu tymczasowego po stronie serwera.'@);
                  PPK_RTP.cntx_pop();
                  PPK_RPZ.cntx_pop();
                  PPK_RPL.cntx_pop();
                  return(0)
               ?};
::          Do pliku _tmp eksportowane są dane z tabeli _BUF. W zależności od ustawień (.CSV_KOL) plik zawiera lub
::          nie nagłówki kolumn. Na razie separatorem pól jest tabulacja (%9), a same pola nie są otoczone znakami '"'.
::          Jeżeli operacja powiodła się, to zaczynamy przygotowywać finalna wersję pliku (_out).
            {? exec('c100_exp','ppk_rpl',_par,_BUF,_tmp,_fld)
            || {? _par.PARRAP.CSV_FLDK='T'
::                Pola z kwalifikatorami.
               || _conv:="
                     _line:=_a-1;
                     _line:=gsub(_line,'""','');
                     _line:=gsub(_line,';','');
                     _line:='""'+gsub(_line,%9,'"";""')+'"";';
                     _line"
               || _conv:="
                     _line:=_a-1;
                     _line:=gsub(_line,'""','');
                     _line:=gsub(_line,';','');
                     _line:=gsub(_line,%9,';')+';';
                     _line"
               ?};
               {? _par.PARRAP.CSV_NFO='T'
::                Zapisanie w pliku _out pierwszego wiersza z dodatkowymi informacjami.
               || exec('c100_nfo','ppk_rpl',_out,_rpl,_xel,_sym,_conv)
               ?};
::             Czas na przekopiowanie (z odpowiednią konwersją) linii z pliku _tmp do pliku _out.
               {? exec('c100_csv','ppk_rpl',_tmp,_out,_conv)
               || _jest:=1;
                  {? ~PPK_RPZ.find_key(_rtp)
                  || PPK_RPZ.blank(1);
                     PPK_RPZ.TYP:='csv';
                     PPK_RPZ.PPK_RTP:=_rtp;
                     _jest:=PPK_RPZ.add()
                  ?};
                  {? _jest
                  || PPK_RPZ.bl_put('ZAL',_out,,,_csv)
                  ?}
               ?};
               ferase(_tmp)
            ?};
            obj_del(_BUF)
         ?};
         _out.fclose();
         obj_del(_out)
      ?}
   ?};
   _loop:=PPK_RTP.next()
!};

PPK_RTP.cntx_pop();
PPK_RPZ.cntx_pop();
PPK_RPL.cntx_pop();

_ret


\c100_xel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy tablicę nazwaną ze wskazaniami elementów raportu.
::   WE:
::   WY: tablica nazwana
::----------------------------------------------------------------------------------------------------------------------
_xel:=obj_new(
   'NAZWISKO','PIERWSZE','DRUGIE','UR_DATA','PLEC','PESEL','OBYWATEL',

   'DOK_TYP','DOK_SYM','ID_APP','NR_RACH','ID_PPK',

   'SKL_ZA','UCZ_POD','UCZ_DOD','FIR_POD','FIR_DOD','OBN_SKL',

   'DATA_DEK','TYP_DEK','PROC_SKL','POP_RACH',

   'DATA_OB','DATA_ZA','DATA_ZM','EMAIL','TEL',
   'ZAM_UL','ZAM_DOM','ZAM_LOK','ZAM_KOD','ZAM_MIEJ','ZAM_KRAJ',
   'KOR_UL','KOR_DOM','KOR_LOK','KOR_KOD','KOR_MIEJ','KOR_KRAJ',
   'DOD_PROC','DOD_OPIS',

   'DATA_ZW',

   'PPK','WER','GEN','FIRMA','NIP','REGON','NR_UMOWY',

   'TYP_TRAN','NUMER_RA','PZIF_NAZ','PZIF_NIP'
);

_ref:="exec('szukaj','ppk_xel',_a)";

_xel.NAZWISKO:=_ref('NAZWISKO');
_xel.PIERWSZE:=_ref('IMIE');
_xel.DRUGIE:=_ref('IMIE_2');
_xel.UR_DATA:=_ref('DATA_UR');
_xel.PLEC:=_ref('PLEC');
_xel.PESEL:=_ref('NR_PESEL');
_xel.OBYWATEL:=_ref('OBYW');
_xel.DOK_TYP:=_ref('DOK_TOZ_TYP');
_xel.DOK_SYM:=_ref('DOK_TOZ_SYM');
_xel.ID_APP:=_ref('ID_KADRY');
_xel.NR_RACH:=_ref('PZIF_RACH_PPK');
_xel.ID_PPK:=_ref('ID_PPK');

_xel.SKL_ZA:=_ref('SKL_ZA_OKRES');
_xel.UCZ_POD:=_ref('UCZ_WAR_POD');
_xel.UCZ_DOD:=_ref('UCZ_WAR_DOD');
_xel.FIR_POD:=_ref('FIR_WAR_POD');
_xel.FIR_DOD:=_ref('FIR_WAR_DOD');
_xel.OBN_SKL:=_ref('UCZ_OBNIZ_SKL_POD');

_xel.DATA_DEK:=_ref('DATA_DEKLARACJI');
_xel.TYP_DEK:=_ref('TYP_DEKLARACJI');
_xel.PROC_SKL:=_ref('PROCENT_SKLADKI');
_xel.POP_RACH:=_ref('POP_PZIF_ID');

_xel.DATA_OB:=_ref('DATA_OBOWIAZKU');
_xel.DATA_ZA:=_ref('DATA_ZATRUDNIENIA');
_xel.DATA_ZM:=_ref('DATA_ZMIANY');
_xel.EMAIL:=_ref('KONTAKT_EMAIL');
_xel.TEL:=_ref('KONTAKT_TEL');
_xel.ZAM_UL:=_ref('ADR_ZAM_ULICA');
_xel.ZAM_DOM:=_ref('ADR_ZAM_NR_DOMU');
_xel.ZAM_LOK:=_ref('ADR_ZAM_NR_MIESZ');
_xel.ZAM_KOD:=_ref('ADR_ZAM_KOD_POCZ');
_xel.ZAM_MIEJ:=_ref('ADR_ZAM_MSC');
_xel.ZAM_KRAJ:=_ref('ADR_ZAM_KRAJ');
_xel.KOR_UL:=_ref('ADR_KOR_ULICA');
_xel.KOR_DOM:=_ref('ADR_KOR_NR_DOMU');
_xel.KOR_LOK:=_ref('ADR_KOR_NR_MIESZ');
_xel.KOR_KOD:=_ref('ADR_KOR_KOD_POCZ');
_xel.KOR_MIEJ:=_ref('ADR_KOR_MSC');
_xel.KOR_KRAJ:=_ref('ADR_KOR_KRAJ');
_xel.DOD_PROC:=_ref('FIR_SKL_DOD_PROCENT');
_xel.DOD_OPIS:=_ref('FIR_SKL_DOD_OPIS');

_xel.DATA_ZW:=_ref('DATA_ZWOLNIENIA');

_xel.PPK:=_ref('PPK');
_xel.WER:=_ref('WERSJA');
_xel.GEN:=_ref('GENERACJA');
_xel.FIRMA:=_ref('PRACODAWCA');
_xel.NIP:=_ref('NIP');
_xel.REGON:=_ref('REGON');
_xel.NR_UMOWY:=_ref('NR_UMOWY_PPK');

_xel.TYP_TRAN:=_ref('TYP_TRANSFERU');
_xel.NUMER_RA:=_ref('NUMER_RACHUNKU_PPK_Z');
_xel.PZIF_NAZ:=_ref('PZIF_WYPLACAJACA_NAZWA');
_xel.PZIF_NIP:=_ref('PZIF_WYPLACAJACA_NIP');

_xel


\c100_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Domyślny zestaw kolumn bufora gromadzącego dane.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::   WY: tekst zawierający argumenty tab_tmp
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;

_str:=exec('imex_str','ppk_rpl');
_str.add(,'LP',      'INTEGER',   _par.PARRAP.CSV_ALP);
_str.add(,'NAZWISKO','STRING[32]','NAZWISKO');
_str.add(,'PIERWSZE','STRING[20]','IMIE');
_str.add(,'PESEL',   'STRING[11]','NR_PESEL');
_str.add(,'DOK_TYP', 'STRING[1]', 'DOK_TOZSAMOSCI_RODZAJ');
_str.add(,'DOK_SYM', 'STRING[50]','DOK_TOZSAMOSCI_SERIA_NUMER');
_str.add(,'ID_APP',  'STRING[50]','UCZESTNIK_IDENTYFIKATOR_INFORMATYCZNY');
_str.add(,'ID_PPK',  'STRING[50]','ID_EPPK_UCZESTNIKA');
_str.add(,'NR_RACH', 'STRING[50]','PZIF_RACH_PPK');
_str


\c100_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Ustawia w wierszu tabeli tymczasowej wartości właściwe dla uczestnika programu.
::   WE: _a TABLE - alias tabeli tymczasowej (patrz \c100_buf)
::       _b _PPK_RDA - wskazanie węzła, do którego podpięte są informacje z danymi uczestnika
::       _c OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;
_rda:=_b;
_xel:=_c;

PPK_RDA.cntx_psh();
PPK_RDA.index('PPK_RDA');
PPK_RDA.prefix(_rda);
{? ~PPK_RDA.first()
|| PPK_RDA.cntx_pop();
   return()
?};
PPK_RDA.index('MAIN');
PPK_RDA.prefix(PPK_RDA.PPK_RPL,_rda);

:: przypisz dane uczestnika
{? PPK_RDA.find_key(_xel.ID_APP)   || _BUF.ID_APP:=PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.PIERWSZE) || _BUF.PIERWSZE:=PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.NAZWISKO) || _BUF.NAZWISKO:=PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.PESEL)    || _BUF.PESEL:=PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.DOK_TYP)  || _BUF.DOK_TYP:=PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.DOK_SYM)  || _BUF.DOK_SYM:=PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.ID_PPK)   || _BUF.ID_PPK:=PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.NR_RACH)  || _BUF.NR_RACH:=PPK_RDA.WARTOSC ?};

:: porządki
PPK_RDA.cntx_pop();
~~


\c100_wpl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Wczytuje do pól wiersza kwoty wpłat.
::   WE: _a TABLE - alias tabeli zawierającej informacje o wpłatach i korektach
::       _b _PPK_RDA - wskazanie węzła, do którego podpięte są informacje z danymi uczestnika
::       _c OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;
_rda:=_b;
_xel:=_c;

_BUF.R:=_BUF.M:=0;
_BUF.UCZ_POD:=_BUF.UCZ_DOD:=0;
_BUF.FIR_POD:=_BUF.FIR_DOD:=0;
_BUF.OBN_SKL:='';

PPK_RDA.cntx_psh();
PPK_RDA.index('PPK_RDA');
PPK_RDA.prefix(_rda);
{? ~PPK_RDA.first()
|| PPK_RDA.cntx_pop();
   return()
?};
PPK_RDA.index('MAIN');
PPK_RDA.prefix(PPK_RDA.PPK_RPL,_rda);

:: przypisz dane wpłaty
{? PPK_RDA.find_key(_xel.SKL_ZA)  || _BUF.R:=#(4+PPK_RDA.WARTOSC); _BUF.M:=#(PPK_RDA.WARTOSC+2) ?};
{? PPK_RDA.find_key(_xel.UCZ_POD) || _BUF.UCZ_POD:=#PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.UCZ_DOD) || _BUF.UCZ_DOD:=#PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.FIR_POD) || _BUF.FIR_POD:=#PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.FIR_DOD) || _BUF.FIR_DOD:=#PPK_RDA.WARTOSC ?};
{? PPK_RDA.find_key(_xel.OBN_SKL) || _BUF.OBN_SKL:=PPK_RDA.WARTOSC ?};

:: porządki
PPK_RDA.cntx_pop();
~~


\c100_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Zapisuje do pliku zawartość tabeli.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::       _b TABLE - alias tabeli zawierającej dane do przekazania
::       _c STRING - pełna ścieżka dostępu do pliku, w którym mają być zapisane dane
::       _d STRING - lista pól do zapisu
::   WY: wynik działania metody export
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_BUF:=_b;
_csv:=_c;
_fld:=spli_str(_d,',');
_len:=obj_len(_fld);

:: przygotuj formułę eksportującą
_fml:='_a.export(_b,,%9,\'Windows,nopth,'+{? _par.PARRAP.CSV_KOL='T' || 'header' || 'noheader' ?}+'\',';
{! _ii:=1.._len
|! _acr:=_fld[_ii];
   {? _acr<>''
   || _fml+=',\''+_acr+'\',,'+$_ii+',';
      {? var_pres(_acr,_BUF)=20
      || _fml+='\'9'+_par.PARRAP.CSV_DEC+'2\''
      ?}
   ?}
!};
_fml+=')';

($_fml)(_BUF,_csv)


\c100_nfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Wstawia do pliku raportu wiersz informacyjny.
::   WE: _a FILE - obiekt pliku docelowego
::       _b _PPK_RPL - wskazanie zestawu raportów
::       _c OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::       _d STRING - znacznik xml typu raportu
::       _e RULE - formuła konwersji linii
::   WY: wynik działania fwrite
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_dst:=_a;
_rpl:=_b;
_xel:=_c;
_sym:=_d;
_conv:=_e;

_epilog:="
   PPK_RDA.cntx_pop();
   PPK_RPL.cntx_pop();
   PPK_UMO.cntx_pop();
   PPK_UZA.cntx_pop();
   ~~
";

PPK_UZA.cntx_psh();
PPK_UZA.prefix();
PPK_UMO.cntx_psh();
PPK_RPL.cntx_psh();
PPK_RDA.cntx_psh();
PPK_RDA.index('MAIN');
PPK_RDA.prefix(_rpl,0);
{? PPK_RDA.find_key(_xel.PPK)
|| PPK_RDA.prefix(_rpl,#PPK_RDA.ref());
   PPK_RDA.PPK_RPL().PPK_UMO().PPK_UZA()
|| _epilog();
   return()
?};
_nfo:='%1\t%2\t%3\t%4\t%5\t%6\t%7\t%8\t%9\t%10\t'[
   {? _sym='SKLADKA'          || '11'
   |? _sym='DANE_KOREKT'      || '21'
   |? _sym='REJESTRACJA'      || '10'
   |? _sym='DANE_ZMIANA'      || '100'
   |? _sym='UCZESTNIK_ZMIANA' || '200'
   |? _sym='DANE_DEKLARACJI'  || '31'
   |? _sym='ZWOLNIENIE'       || '300'
   |? _sym='TRANSFER'         || '6000'
   || ''
   ?},
   {? PPK_RDA.find_key(_xel.WER)      || PPK_RDA.WARTOSC || '' ?},
   {? PPK_RDA.find_key(_xel.GEN)      || PPK_RDA.WARTOSC || '' ?},
   {? PPK_RDA.find_key(_xel.FIRMA)    || PPK_RDA.prefix(_rpl,#PPK_RDA.ref()) ?};
   {? PPK_RDA.find_key(_xel.NIP)      || PPK_RDA.WARTOSC || '' ?},
   {? PPK_RDA.find_key(_xel.REGON)    || PPK_RDA.WARTOSC || '' ?},
   {? PPK_RDA.find_key(_xel.DOK_TYP)  || PPK_RDA.WARTOSC || '' ?},
   {? PPK_RDA.find_key(_xel.DOK_SYM)  || PPK_RDA.WARTOSC || '' ?},
   {? PPK_RDA.find_key(_xel.NR_UMOWY) || PPK_RDA.WARTOSC || '' ?},
   PPK_UZA.memo_txt(,1,'KOM'),
   PPK_UZA.IDF
];
_epilog();

_dst.fwrite(_conv(_nfo)+%13+%10)


\c100_csv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Zapisuje zawartość pliku w formacie CSV do pliku w formacie bardziej CSV.
::   WE: _a STRING - pełna ścieżka dostępu do pliku źródłowego
::       _b FILE - obiekt pliku docelowego
::       _c RULE - formuła konwersji linii
::   WY: 0/1 - porażka/sukces
::----------------------------------------------------------------------------------------------------------------------
:: otwórz plik źródłowy
_src:=fopen(_a,'r',0,0,1);
{? _src.is_open()=0
|| return(0)
?};

:: plik docelowy
_dst:=_b;
_conv:=_c;
{!
|? (_line:=_src.fread())<>'\n'
:: wiersz zgodny ze specyfikacją
|! _dst.fwrite(_conv(_line)+%13+%10)
!};
_src.fclose();
1


\c100dwpl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy i wypełnia danymi tabelę tymczasową zawierającą wpłaty uczestników.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::       _b _PPK_RTP - wskazanie typu raportu w zestawie
::       _b OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::   WY: alias tabeli tymczasowej z danymi do zapisania w pliku
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_rtp:=_b;
_xel:=_c;

:: utwórz bufor danych
_str:=exec('c100_def','ppk_rpl',_par);
_str.add(,'R',      'INTEGER',  'ZA_ROK');
_str.add(,'M',      'INTEGER',  'ZA_MIESIAC');
_str.add(,'UCZ_POD','REAL',     'WARTOSC_PODST_PRACOWNIKA');
_str.add(,'UCZ_DOD','REAL',     'WARTOSC_DODATK_PRACOWNIKA');
_str.add(,'FIR_POD','REAL',     'WARTOSC_PODST_PRACODAWCY');
_str.add(,'FIR_DOD','REAL',     'WARTOSC_DODATK_PRACODAWCY');
_str.add(,'OBN_SKL','STRING[1]','UCZ_OBNIZ_SKL_POD');
_BUF:=_str.create();

PPK_RUC.cntx_psh();
PPK_RAP.cntx_psh();
PPK_RAP.index('OSOBA');
PPK_RAP.prefix(_rtp);

:: pobierz dane wpłat
_loop:=PPK_RAP.first();
_lp:=1;
{!
|? _loop
|! _BUF.blank();
   _BUF.LP:=_lp;
   PPK_RAP.PPK_RUC();
:: uzupełnij dane identyfikacyjne uczestnika i kwoty wpłat
   exec('c100_ucz','ppk_rpl',_BUF,PPK_RUC.PPK_RDA,_xel);
   exec('c100_wpl','ppk_rpl',_BUF,PPK_RAP.PPK_RDA,_xel);
   {? _BUF.add()
   || _lp+=1
   ?};
   _loop:=PPK_RAP.next()
!};

:: porządki
PPK_RAP.cntx_pop();
PPK_RUC.cntx_pop();

:: dane do zapisu w pliku
_BUF


\c100xwpl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn do zapisu informacji o wpłatach i ich korektach.
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'UCZ_POD,'
'UCZ_DOD,'
'FIR_POD,'
'FIR_DOD,'
'OBN_SKL,'
'M,'
'R,'

'NR_RACH,'
'ID_PPK,'


\c100dkor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy i wypełnia danymi tabelę tymczasową zawierającą korekty wpłaty uczestników.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::       _b _PPK_RTP - wskazanie typu raportu w zestawie
::       _b OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::   WY: alias tabeli tymczasowej z danymi do zapisania w pliku
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_rtp:=_b;
_xel:=_c;

:: utwórz bufor danych
_str:=exec('c100_def','ppk_rpl',_par);
_str.add(,'R',      'INTEGER',  'ZA_ROK');
_str.add(,'M',      'INTEGER',  'ZA_MIESIAC');
_str.add(,'UCZ_POD','REAL',     'WARTOSC_PODST_PRACOWNIKA');
_str.add(,'UCZ_DOD','REAL',     'WARTOSC_DODATK_PRACOWNIKA');
_str.add(,'FIR_POD','REAL',     'WARTOSC_PODST_PRACODAWCY');
_str.add(,'FIR_DOD','REAL',     'WARTOSC_DODATK_PRACODAWCY');
_str.add(,'OBN_SKL','STRING[1]','FLAGA_OBNIZENIA_SKL_PODST_PRACOWNIKA');
_BUF:=_str.create();

PPK_RUC.cntx_psh();
PPK_RDA.cntx_psh();
PPK_RDA.index('PPK_RDA');
PPK_RAP.cntx_psh();
PPK_RAP.index('OSOBA');
PPK_RAP.prefix(_rtp);

:: pobierz dane korekt
_loop:=PPK_RAP.first();
_lp:=1;
{!
|? _loop
|! _BUF.blank();
   PPK_RAP.PPK_RUC();
:: uzupełnij dane identyfikacyjne uczestnika
   exec('c100_ucz','ppk_rpl',_BUF,PPK_RUC.PPK_RDA,_xel);
   PPK_RDA.prefix(PPK_RAP.PPK_RDA);
   _loop:=PPK_RDA.first();
   {!
   |? _loop
   |! {? PPK_RDA.PPK_XEL().SYMBOL='KOREKTA'
::       nie powinno być nic innego, ale dla pewności...
      || exec('c100_wpl','ppk_rpl',_BUF,#PPK_RDA.ref(),_xel);
         _BUF.LP:=_lp;
         {? _BUF.add()
         || _lp+=1
         ?}
      ?};
      _loop:=PPK_RDA.next()
   !};
   _loop:=PPK_RAP.next()
!};

:: porządki
PPK_RAP.cntx_pop();
PPK_RDA.cntx_pop();
PPK_RUC.cntx_pop();

:: dane do zapisu w pliku
_BUF


\c100ddek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy i wypełnia danymi tabelę tymczasową zawierającą wnioski i deklaracje.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::       _b _PPK_RTP - wskazanie typu raportu w zestawie
::       _b OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::   WY: alias tabeli tymczasowej z danymi do zapisania w pliku
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_rtp:=_b;
_xel:=_c;

:: utwórz bufor danych
_str:=exec('c100_def','ppk_rpl',_par);
_str.add(,'DATA_DEK','STRING[10]','DATA_DEKLARACJI');
_str.add(,'TYP_DEK', 'STRING[50]','TYP_DEKLARACJI');
_str.add(,'PROC_SKL','REAL',      'PROCENT_SKLADKI');
_str.add(,'POP_RACH','STRING[50]','EPPK_ID_PZIF_DO_WYPLATY');
_BUF:=_str.create();

PPK_RUC.cntx_psh();
PPK_RDA.cntx_psh();
PPK_RDA.index('PPK_RDA');
PPK_RAP.cntx_psh();
PPK_RAP.index('OSOBA');
PPK_RAP.prefix(_rtp);

:: pobierz dane deklaracji
_loop:=PPK_RAP.first();
_lp:=1;
{!
|? _loop
|! _BUF.blank();
   PPK_RAP.PPK_RUC();
:: uzupełnij dane identyfikacyjne uczestnika
   exec('c100_ucz','ppk_rpl',_BUF,PPK_RUC.PPK_RDA,_xel);
   PPK_RDA.prefix(PPK_RAP.PPK_RDA);
   _loop:=PPK_RDA.first();
   {!
   |? _loop
   |! _BUF.DATA_DEK:='';
      _BUF.TYP_DEK:='';
      _BUF.PROC_SKL:=0;
      _BUF.POP_RACH:='';
      {? PPK_RDA.PPK_XEL().SYMBOL='DEKLARACJA'
::       nie powinno być nic innego, ale dla pewności...
      || PPK_RDA.cntx_psh();
         PPK_RDA.index('MAIN');
         PPK_RDA.prefix(PPK_RUC.PPK_RPL,#PPK_RDA.ref());
         {? PPK_RDA.find_key(_xel.DATA_DEK) || _BUF.DATA_DEK:=PPK_RDA.WARTOSC ?};
         {? PPK_RDA.find_key(_xel.TYP_DEK)  || _BUF.TYP_DEK:=PPK_RDA.WARTOSC ?};
         {? PPK_RDA.find_key(_xel.PROC_SKL) || _BUF.PROC_SKL:=#PPK_RDA.WARTOSC ?};
         {? PPK_RDA.find_key(_xel.POP_RACH) || _BUF.POP_RACH:=PPK_RDA.WARTOSC ?};
         PPK_RDA.cntx_pop();
         _BUF.LP:=_lp;
         {? _BUF.add()
         || _lp+=1
         ?}
      ?};
      _loop:=PPK_RDA.next()
   !};
   _loop:=PPK_RAP.next()
!};

:: porządki
PPK_RAP.cntx_pop();
PPK_RDA.cntx_pop();
PPK_RUC.cntx_pop();

:: dane do zapisu w pliku
_BUF


\c100xdek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn do zapisu informacji o wnioskach i deklaracjach.
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'DATA_DEK,'
'TYP_DEK,'
'PROC_SKL,'
'POP_RACH,'

'NR_RACH,'
'ID_PPK,'


\c100drej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy i wypełnia danymi tabelę tymczasową zawierającą zgłoszenia uczestników.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::       _b _PPK_RTP - wskazanie typu raportu w zestawie
::       _b OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::   WY: alias tabeli tymczasowej z danymi do zapisania w pliku
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_rtp:=_b;
_xel:=_c;

:: utwórz bufor danych
_str:=exec('c100_def','ppk_rpl',_par);
_str.add(,'DRUGIE',  'STRING[20]', 'IMIE_2');
_str.add(,'UR_DATA', 'STRING[10]', 'DATA_URODZENIA');
_str.add(,'PLEC',    'STRING[1]',  'PLEC');
_str.add(,'OBYWATEL','STRING[3]',  'OBYWATELSTWO');
_str.add(,'DATA_OB', 'STRING[10]', 'DATA_OBOWIAZKU');
_str.add(,'DATA_ZA', 'STRING[10]', 'DATA_ZATRUDNIENIA');
_str.add(,'EMAIL',   'STRING[50]', 'KONTAKT_EMAIL');
_str.add(,'TEL',     'STRING[20]', 'KONTAKT_TELEFON');

_str.add(,'ZAM_UL',  'STRING[100]','ADR_ZAMIESZKANIA_ULICA');
_str.add(,'ZAM_DOM', 'STRING[10]', 'ADR_ZAMIESZKANIA_NR_DOMU');
_str.add(,'ZAM_LOK', 'STRING[10]', 'ADR_ZAMIESZKANIA_NR_MIESZ');
_str.add(,'ZAM_KOD', 'STRING[10]', 'ADR_ZAMIESZKANIA_KOD_POCZ');
_str.add(,'ZAM_POCZ','STRING[10]', 'ADR_ZAMIESZKANIA_POCZ');
_str.add(,'ZAM_MIEJ','STRING[50]', 'ADR_ZAMIESZKANIA_MSC');
_str.add(,'ZAM_KRAJ','STRING[3]',  'ADR_ZAMIESZKANIA_KRAJ');

_str.add(,'KOR_UL',  'STRING[100]','ADR_KORESPOND_ULICA');
_str.add(,'KOR_DOM', 'STRING[10]', 'ADR_KORESPOND_NR_DOMU');
_str.add(,'KOR_LOK', 'STRING[10]', 'ADR_KORESPOND_NR_MIESZ');
_str.add(,'KOR_KOD', 'STRING[10]', 'ADR_KORESPOND_KOD_POCZ');
_str.add(,'KOR_POCZ','STRING[10]', 'ADR_KORESPOND_POCZ');
_str.add(,'KOR_MIEJ','STRING[50]', 'ADR_KORESPOND_MSC');
_str.add(,'KOR_KRAJ','STRING[3]',  'ADR_KORESPOND_KRAJ');

_str.add(,'DOD_PROC','REAL',       'PRACODAWCA_WPLATA_DOD_PROCENT');
_str.add(,'DOD_OPIS','STRING[255]','PRACODAWCA_WPLATA_DOD_OPIS');
_str.add(,'DANE_UPR','STRING[255]','FIRMA_DZIAL_OSOBA_UPRAWNIONA_DO_DANYCH');
_BUF:=_str.create();

PPK_RUC.cntx_psh();
PPK_RDA.cntx_psh();
PPK_RDA.index('MAIN');
PPK_RAP.cntx_psh();
PPK_RAP.index('OSOBA');
PPK_RAP.prefix(_rtp);

:: pobierz dane rejestracji
_loop:=PPK_RAP.first();
_upr:='';
{? _loop<>0
|| PPK_RPL.cntx_psh();
   PPK_UMO.cntx_psh();
   PPK_UZA.cntx_psh();
   PPK_UZA.prefix();
   PPK_RAP.PPK_RDA().PPK_RPL().PPK_UMO().PPK_UZA();
   _upr:=PPK_UZA.memo_txt(,1,'KOM');
   PPK_UZA.cntx_pop();
   PPK_UMO.cntx_pop();
   PPK_RPL.cntx_pop();
   ~~
?};
_lp:=1;
{!
|? _loop
|! _BUF.blank();
   _BUF.LP:=_lp;
   PPK_RAP.PPK_RUC();
:: uzupełnij dane identyfikacyjne uczestnika
   exec('c100_ucz','ppk_rpl',_BUF,PPK_RUC.PPK_RDA,_xel);
   PPK_RDA.prefix(PPK_RUC.PPK_RPL,PPK_RUC.PPK_RDA);
   {? PPK_RDA.find_key(_xel.DRUGIE)   || _BUF.DRUGIE:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.UR_DATA)  || _BUF.UR_DATA:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.PLEC)     || _BUF.PLEC:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.OBYWATEL) || _BUF.OBYWATEL:=PPK_RDA.WARTOSC ?};
:: uzupełnij dane zgłoszeniowe
   PPK_RDA.prefix(PPK_RUC.PPK_RPL,PPK_RAP.PPK_RDA);
   {? PPK_RDA.find_key(_xel.DATA_OB)  || _BUF.DATA_OB:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.DATA_ZA)  || _BUF.DATA_ZA:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.EMAIL)    || _BUF.EMAIL:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.TEL)      || _BUF.TEL:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.ZAM_KRAJ) || _BUF.ZAM_KRAJ:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.ZAM_KOD)  || _BUF.ZAM_KOD:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.ZAM_MIEJ) || _BUF.ZAM_MIEJ:=_BUF.ZAM_POCZ:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.ZAM_UL)   || _BUF.ZAM_UL:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.ZAM_DOM)  || _BUF.ZAM_DOM:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.ZAM_LOK)  || _BUF.ZAM_LOK:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.KOR_KRAJ) || _BUF.KOR_KRAJ:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.KOR_KOD)  || _BUF.KOR_KOD:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.KOR_MIEJ) || _BUF.KOR_MIEJ:=_BUF.KOR_POCZ:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.KOR_UL)   || _BUF.KOR_UL:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.KOR_DOM)  || _BUF.KOR_DOM:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.KOR_LOK)  || _BUF.KOR_LOK:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.DOD_PROC) || _BUF.DOD_PROC:=#PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.DOD_OPIS) || _BUF.DOD_OPIS:=PPK_RDA.WARTOSC ?};
   _BUF.DANE_UPR:=_upr;
   {? _par.PARRAP.CSV_ADRK='T' &
      _BUF.KOR_KRAJ='' & _BUF.KOR_KOD='' & _BUF.KOR_MIEJ='' & _BUF.KOR_UL='' & _BUF.KOR_DOM='' & _BUF.KOR_LOK=''
   || _BUF.KOR_KRAJ:=_BUF.ZAM_KRAJ;
      _BUF.KOR_KOD:=_BUF.ZAM_KOD;
      _BUF.KOR_MIEJ:=_BUF.ZAM_MIEJ;
      _BUF.KOR_UL:=_BUF.ZAM_UL;
      _BUF.KOR_DOM:=_BUF.ZAM_DOM;
      _BUF.KOR_LOK:=_BUF.ZAM_LOK
   ?};
   {? _BUF.add()
   || _lp+=1
   ?};
   _loop:=PPK_RAP.next()
!};

:: porządki
PPK_RAP.cntx_pop();
PPK_RDA.cntx_pop();
PPK_RUC.cntx_pop();

:: dane do zapisu w pliku
_BUF


\c100xrej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn do zapisu informacji o zgłoszeniach.
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
'LP,'
'PIERWSZE,'
'DRUGIE,'
'NAZWISKO,'
'OBYWATEL,'
'PESEL,'
'PLEC,'
'DOK_TYP,'
'DOK_SYM,'
'UR_DATA,'
'EMAIL,'
'TEL,'
'ID_APP,'
'DATA_ZA,'
'DANE_UPR,'

'ZAM_UL,'
'ZAM_DOM,'
'ZAM_LOK,'
'ZAM_KOD,'
'ZAM_POCZ,'
'ZAM_MIEJ,'
'ZAM_KRAJ,'

'KOR_UL,'
'KOR_DOM,'
'KOR_LOK,'
'KOR_KOD,'
'KOR_POCZ,'
'KOR_MIEJ,'
'KOR_KRAJ,'

'DATA_OB,'
'DOD_PROC,'
'DOD_OPIS,'


\c100dzwo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy i wypełnia danymi tabelę tymczasową zawierającą inforacje o zaprzestaniu współpracy.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::       _b _PPK_RTP - wskazanie typu raportu w zestawie
::       _b OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::   WY: alias tabeli tymczasowej z danymi do zapisania w pliku
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_rtp:=_b;
_xel:=_c;

:: utwórz bufor danych
_str:=exec('c100_def','ppk_rpl',_par);
_str.add(,'DATA_ZW','STRING[10]','DATA_ZWOLNIENIA');
_BUF:=_str.create();

PPK_RUC.cntx_psh();
PPK_RDA.cntx_psh();
PPK_RDA.index('MAIN');
PPK_RAP.cntx_psh();
PPK_RAP.index('OSOBA');
PPK_RAP.prefix(_rtp);

:: pobierz dane o zwolnieniach
_loop:=PPK_RAP.first();
_lp:=1;
{!
|? _loop
|! _BUF.blank();
   PPK_RAP.PPK_RUC();
:: uzupełnij dane identyfikacyjne uczestnika
   exec('c100_ucz','ppk_rpl',_BUF,PPK_RUC.PPK_RDA,_xel);
:: pobierz z raportu datę zwolnienia
   PPK_RDA.prefix(PPK_RUC.PPK_RPL,PPK_RAP.PPK_RDA);
   {? PPK_RDA.find_key(_xel.DATA_ZW)
   || _BUF.DATA_ZW:=PPK_RDA.WARTOSC;
      _BUF.LP:=_lp;
      {? _BUF.add()
      || _lp+=1
      ?}
   ?};
   _loop:=PPK_RAP.next()
!};

:: porządki
PPK_RAP.cntx_pop();
PPK_RDA.cntx_pop();
PPK_RUC.cntx_pop();

:: dane do zapisu w pliku
_BUF


\c100xzwo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn do zapisu informacji o zaprzestaniu współpracy.
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'DATA_ZW,'

'NR_RACH,'
'ID_PPK,'


\c100dzdi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy i wypełnia danymi tabelę tymczasową zawierającą inforacje o zmianie danych identyfikacyjnych.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::       _b _PPK_RTP - wskazanie typu raportu w zestawie
::       _b OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::   WY: alias tabeli tymczasowej z danymi do zapisania w pliku
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_rtp:=_b;
_xel:=_c;

:: utwórz bufor danych
_str:=exec('c100_def','ppk_rpl',_par);
_str.add(,'DATA_ZM', 'STRING[10]','DATA_ZMIANY');
_str.add(,'N_NAZ',   'STRING[32]','NAZWISKO');
_str.add(,'N_IM',    'STRING[20]','IMIE');
_str.add(,'N_IM_2',  'STRING[20]','IMIE_2');
_str.add(,'N_D_UR',  'STRING[10]','DATA_URODZENIA');
_str.add(,'N_PLEC',  'STRING[1]', 'PLEC');
_str.add(,'N_PESEL', 'STRING[11]','NR_PESEL');
_str.add(,'N_OBYW',  'STRING[3]', 'OBYWATELSTWO');
_str.add(,'N_D_TYP', 'STRING[1]', 'DOK_TOZSAMOSCI_RODZAJ');
_str.add(,'N_D_SYM', 'STRING[50]','DOK_TOZSAMOSCI_SERIA_NUMER');
_str.add(,'N_ID_APP','STRING[50]','UCZESTNIK_IDENTYFIKATOR_INFORMATYCZNY');
_BUF:=_str.create();

PPK_RUC.cntx_psh();
PPK_RDA.cntx_psh();
PPK_RDA.index('MAIN');
PPK_RAP.cntx_psh();
PPK_RAP.index('OSOBA');
PPK_RAP.prefix(_rtp);

:: pobierz dane o zwolnieniach
_loop:=PPK_RAP.first();
_lp:=1;
{!
|? _loop
|! _BUF.blank();
   _BUF.LP:=_lp;
   PPK_RAP.PPK_RUC();
:: uzupełnij dane identyfikacyjne uczestnika
   exec('c100_ucz','ppk_rpl',_BUF,PPK_RUC.PPK_RDA,_xel);
:: pobierz zmienione dane identyfikacyjne uczestnika
   PPK_RDA.prefix(PPK_RUC.PPK_RPL,PPK_RAP.PPK_RDA);
   {? PPK_RDA.find_key(_xel.DATA_ZM)  || _BUF.DATA_ZM:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.ID_APP)   || _BUF.N_ID_APP:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.PIERWSZE) || _BUF.N_IM:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.DRUGIE)   || _BUF.N_IM_2:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.NAZWISKO) || _BUF.N_NAZ:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.UR_DATA)  || _BUF.N_D_UR:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.PLEC)     || _BUF.N_PLEC:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.OBYWATEL) || _BUF.N_OBYW:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.PESEL)    || _BUF.N_PESEL:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.DOK_TYP)  || _BUF.N_D_TYP:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.DOK_SYM)  || _BUF.N_D_SYM:=PPK_RDA.WARTOSC ?};
   {? _BUF.add()
   || _lp+=1
   ?};
   _loop:=PPK_RAP.next()
!};

:: porządki
PPK_RAP.cntx_pop();
PPK_RDA.cntx_pop();
PPK_RUC.cntx_pop();

:: dane do zapisu w pliku
_BUF


\c100xzdi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn do zapisu informacji o zmianie danych identyfikacyjnych.
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'DATA_ZM,'
'N_ID_APP,'
'N_IM,'
'N_IM_2,'
'N_NAZ,'
'N_OBYW,'
'N_PESEL,'
'N_PLEC,'
'N_D_TYP,'
'N_D_SYM,'
'N_D_UR,'

'NR_RACH,'
'ID_PPK,'


\c100dzdk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy i wypełnia danymi tabelę tymczasową zawierającą inforacje o zmianie danych kontaktowych.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::       _b _PPK_RTP - wskazanie typu raportu w zestawie
::       _b OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::   WY: alias tabeli tymczasowej z danymi do zapisania w pliku
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_rtp:=_b;
_xel:=_c;

:: utwórz bufor danych
_str:=exec('c100_def','ppk_rpl',_par);
_str.add(,'DATA_ZM','STRING[10]','DATA_ZMIANY');
_str.add(,'EMAIL',  'STRING[50]','KONTAKT_EMAIL');
_str.add(,'TEL',    'STRING[20]','KONTAKT_TELEFON');
_BUF:=_str.create();

PPK_RUC.cntx_psh();
PPK_RDA.cntx_psh();
PPK_RDA.index('MAIN');
PPK_RAP.cntx_psh();
PPK_RAP.index('OSOBA');
PPK_RAP.prefix(_rtp);

:: pobierz dane o zwolnieniach
_loop:=PPK_RAP.first();
_lp:=1;
{!
|? _loop
|! _BUF.blank();
   _BUF.LP:=_lp;
   PPK_RAP.PPK_RUC();
:: uzupełnij dane identyfikacyjne uczestnika
   exec('c100_ucz','ppk_rpl',_BUF,PPK_RUC.PPK_RDA,_xel);
   PPK_RDA.prefix(PPK_RUC.PPK_RPL,PPK_RAP.PPK_RDA);
   {? PPK_RDA.find_key(_xel.DATA_ZM) || _BUF.DATA_ZM:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.EMAIL)   || _BUF.EMAIL:=PPK_RDA.WARTOSC ?};
   {? PPK_RDA.find_key(_xel.TEL)     || _BUF.TEL:=PPK_RDA.WARTOSC ?};
   {? _BUF.add()
   || _lp+=1
   ?};
   _loop:=PPK_RAP.next()
!};

:: porządki
PPK_RAP.cntx_pop();
PPK_RDA.cntx_pop();
PPK_RUC.cntx_pop();

:: dane do zapisu w pliku
_BUF


\c100xzdk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn do zapisu informacji o zmianie danych kontaktowych.
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'DATA_ZM,'
'EMAIL,'
'TEL,'

'NR_RACH,'
'ID_PPK,'


\c200dtra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Tworzy i wypełnia danymi tabelę tymczasową zawierającą transfery PPK.
::   WE: _a OBJECT - wskazanie tablicy parametrów
::       _b _PPK_RTP - wskazanie typu raportu w zestawie
::       _b OBJECT - tablica nazwana zawierająca wskazania elemenów raportów
::   WY: alias tabeli tymczasowej z danymi do zapisania w pliku
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_rtp:=_b;
_xel:=_c;

:: utwórz bufor danych
_str:=exec('c100_def','ppk_rpl',_par);
_str.add(,'TYP_TRAN','STRING[3]','TYP_TRANSFERU');
_str.add(,'NUMER_RA', 'STRING[50]','NUMER_RACHUNKU_PPK_Z');
_str.add(,'PZIF_NAZ','STRING[100]','PZIF_WYPLACAJACA_NAZWA');
_str.add(,'PZIF_NIP','STRING[10]','PZIF_WYPLACAJACA_NIP');
_BUF:=_str.create();

PPK_RUC.cntx_psh();
PPK_RDA.cntx_psh();
PPK_RDA.index('PPK_RDA');
PPK_RAP.cntx_psh();
PPK_RAP.index('OSOBA');
PPK_RAP.prefix(_rtp);

:: pobierz dane deklaracji
_loop:=PPK_RAP.first();
_lp:=1;
{!
|? _loop
|! _BUF.blank();
   PPK_RAP.PPK_RUC();
:: uzupełnij dane identyfikacyjne uczestnika
   exec('c100_ucz','ppk_rpl',_BUF,PPK_RUC.PPK_RDA,_xel);
   PPK_RDA.prefix(PPK_RAP.PPK_RDA);
   _loop:=PPK_RDA.first();
   {!
   |? _loop
   |! _BUF.TYP_TRAN:='';
      _BUF.NUMER_RA:='';
      _BUF.PZIF_NAZ:='';
      _BUF.PZIF_NIP:='';
      {? PPK_RDA.PPK_XEL().SYMBOL='TRANSFER'
::       nie powinno być nic innego, ale dla pewności...
      || PPK_RDA.cntx_psh();
         PPK_RDA.index('MAIN');
         PPK_RDA.prefix(PPK_RUC.PPK_RPL,#PPK_RDA.ref());
         {? PPK_RDA.find_key(_xel.TYP_TRAN) || _BUF.TYP_TRAN:=PPK_RDA.WARTOSC ?};
         {? PPK_RDA.find_key(_xel.NUMER_RA) || _BUF.NUMER_RA:=PPK_RDA.WARTOSC ?};
         {? PPK_RDA.find_key(_xel.PZIF_NAZ) || _BUF.PZIF_NAZ:=PPK_RDA.WARTOSC ?};
         {? PPK_RDA.find_key(_xel.PZIF_NIP) || _BUF.PZIF_NIP:=PPK_RDA.WARTOSC ?};
         PPK_RDA.cntx_pop();
         _BUF.LP:=_lp;
         {? _BUF.add()
         || _lp+=1
         ?}
      ?};
      _loop:=PPK_RDA.next()
   !};
   _loop:=PPK_RAP.next()
!};

:: porządki
PPK_RAP.cntx_pop();
PPK_RDA.cntx_pop();
PPK_RUC.cntx_pop();

:: dane do zapisu w pliku
_BUF


\c200xtra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Lista kolumn do zapisu informacji o transferach PPK.
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'TYP_TRAN,'
'NUMER_RA,'
'PZIF_NAZ,'
'PZIF_NIP,'

'NR_RACH,'
'ID_PPK,'


\imp_csv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Rozpoczyna import danych przekazanych w plikach csv.
::   WE: _a [TABLE] - Tablica z parametrami (patrz \import/ppk_rpl.fml).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_PAR:=_a;

:: formuły odczytu i ustawień
_fml:=obj_new('DAT','IMP');
_fml.DAT:=spli_str('c100ckor,c100cppk,c100cwyp,c100ctrn,c100czwr',',');
_fml.IMP:=spli_str('c100ikor,c100ippk,c100iwyp,c100itrn,c100izwr',',');
:: utwórz i ustaw parametry dla funkcji importu
_arg:=obj_new('PPK_UMO','NAZWA','PAR');
KST_PPK.PPK_UMO().PPK_UZA();
_arg.PPK_UMO:=PPK_UMO.ref();
_arg.NAZWA:=_PAR.NAZWA;
_arg.PAR:=exec('parrap_b','ppk_uza',1);

_tmp:=_arg.NAZWA;
{? _arg.PAR.CSV_NFO='T'
:: importowany plik zawiera wiersz informacyjny, którego trzeba się pozbyć
|| _pth:=spli_str(_arg.NAZWA,{? sys_name(0)='U_LINUX' || '/' || '\\' ?});
   _tmp:=gsub(_arg.NAZWA,_pth[obj_len(_pth)],$SYSLOG.tm_stamp()+'.csv');
   {? (_out:=fopen(_tmp,'w',0,0,1)).is_open()
::    plik tymczasowy dostępny do zapisu danych
   || {? (_src:=fopen(_arg.NAZWA,'r',0,0,1)).is_open()
::       plik źródłowy dostępny do odczytu danych
      || {? _src.fread()<>'\n'
::          pomiń linię...
         || {!
            |? (_txt:=_src.fread())<>'\n'
::             przepisz kolejne linie
            |! _out.fwrite(_txt)
            !}
         ?};
         _src.fclose()
      ?};
      _out.fclose()
   ?}
?};

on_error(3);
_nm:=no_msg(1);
_tmp==_arg.NAZWA;
:: spróbuj wczytać dane z pliku wymiany
_fld:=exec(_fml.IMP[_PAR.TYP],'ppk_rpl');
_BUF:=exec(_fml.DAT[_PAR.TYP],'ppk_rpl',_arg,_fld);
_tmp==_arg.NAZWA;
{? (_err:=errno())<>0
|| FUN.error(
      {? _err=423
      || 'Próba importu danych zakończyła się niepowodzeniem.\n(błędny format pliku "%1")'@[_PAR.NAZWA]
      || 'Podczas próby importu pliku "%1" wystąpił błąd o kodzie %2.'@[_PAR.NAZWA,$_err]
      ?}
   )
?};
no_msg(_nm);
on_error();

{? _tmp<>_arg.NAZWA & fexists(_tmp,0)
|| ferase(_tmp,0)
?};

{? type_of(_BUF)=type_of(SYSLOG)
:: włącz wczytane informacje do bazy
|| exec('imp_tab','ppk_rpl',_BUF);
   obj_del(_BUF)
?};

~~


\c100_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Zapisuje do pliku zawartość tabeli.
::   WE: _a TABLE - alias tabeli do której mają być wczytane dane
::       _b OBJECT - parametry działania (tablica nazwana)
::       _c STRING - lista pól do wypełnienia
::   WY: wynik działania metody import
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;
_arg:=_b;
_fld:=spli_str(_c,',');
_len:=obj_len(_fld);

:: przygotuj formułę importującą
_fml:='_a.import(_b,,0,,\'Windows,nopth,%1\','[{? _arg.PAR.CSV_KOL='T' || 'header' || 'noheader' ?}];
{! _ii:=1.._len
|! _acr:=_fld[_ii];
   {? _acr<>''
   || _fml+=',\''+_acr+'\',,'+$_ii+',';
      {? var_pres(_acr,_BUF)=20
      || _fml+='\'9'+_arg.PAR.CSV_DEC+'2\''
      ?}
   ?}
!};
_fml+=')';

($_fml)(_BUF,'@'+_arg.NAZWA)


\set_disc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy wyzwalacz, który ustala wartość pola SEKCJA w buforze pliku wymiany.
::   WE: _a TABLE - alias tabeli
::       _b STRING - wartość dyskryminatora
::   WY: wynik trig_b
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_BUF:=_a;
_val:=_b;

_BUF.trig_b('add',$('ref_tab(\'%1\').SEKCJA:=\'%2\';1'[form(_BUF.name(),8)+'00000001',_val]))


\c100ckor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Import danych raportu "Zwrot środków w wyniku rozliczenia korekty".
::   WE: _a OBJECT - parametry działania (tablica nazwana)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_fld:=_b;

:: podstawowy zestaw danych
_str:=exec('imp_def','ppk_rpl');
:: dodatkowe kolumny w raporcie
_str.add(,'DATA_WYP','STRING[10]','DATA_WYPLATY');
_str.add(,'M',       'INTEGER',   'ZA_MIESIAC');
_str.add(,'R',       'INTEGER',   'ZA_ROK');
_str.add(,'POD_UCZ', 'REAL',      'WARTOSC_PODST_PRACOWNIKA');
_str.add(,'DOD_UCZ', 'REAL',      'WARTOSC_DODATK_PRACOWNIKA');
_str.add(,'POD_FIR', 'REAL',      'WARTOSC_PODST_PRACODAWCY');
_str.add(,'DOD_FIR', 'REAL',      'WARTOSC_DODATK_PRACODAWCY');
_BUF:=_str.create();
:: dyskryminator dla formuły imp_tab
exec('set_disc','ppk_rpl',_BUF,'ZWROT_SRODKOW');

{? ~exec('c100_imp','ppk_rpl',_BUF,_par,_fld)
:: danych nie udało się zaimportować
|| return()
?};

_BUF.cntx_psh();
_loop:=_BUF.first();
{!
|? _loop
|! _BUF.memo_set(
::    wartości uwzględniane w formule imp_tab dla sekcji ZWROT_SRODKOW
      '_par:=obj_new('
         '\'DATA_WYPLATY\',\'SKL_ZA_OKRES\','
         '\'UCZ_WAR_POD\',\'UCZ_WAR_DOD\','
         '\'FIR_WAR_POD\',\'FIR_WAR_DOD\''
      ');'
      '_par.DATA_WYPLATY:=date(%1);'
      '_par.SKL_ZA_OKRES:=\'%2-%3\';'
      '_par.UCZ_WAR_POD:=%4;'
      '_par.UCZ_WAR_DOD:=%5;'
      '_par.FIR_WAR_POD:=%6;'
      '_par.FIR_WAR_DOD:=%7;'
      '_par'[
         gsub(_BUF.DATA_WYP,'-',','),
         form(_BUF.R,4,,'99'),form(_BUF.M,-2,,'99'),
         form(_BUF.POD_UCZ,,2,'9.'),
         form(_BUF.DOD_UCZ,,2,'9.'),
         form(_BUF.POD_FIR,,2,'9.'),
         form(_BUF.DOD_FIR,,2,'9.')
      ],'PAR'
   );
   _BUF.memo_put(,'PAR');
   _loop:=_BUF.next()
!};
_BUF.cntx_pop();

:: dane
_BUF


\c100ikor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn raportu "Zwrot środków w wyniku rozliczenia korekty".
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
:: kolejność determinuje położenie kolumn
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'ID_PPK,'
'NR_RACH,'

'DATA_WYP,'
'M,'
'R,'
'POD_UCZ,'
'DOD_UCZ,'
'POD_FIR,'
'DOD_FIR,'


\c100cppk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Import danych raportu "Nadanie uczestnikowi numeru w ewidencji".
::   WE: _a OBJECT - parametry działania (tablica nazwana)
::       _b STRING - lista pól do wypełnienia
::   WY: alias tabeli z danymi w przypadku sukcesu lub ~~ gdy import nie powiódł się
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_fld:=_b;

:: wystarczy podstawowy zestaw danych
_str:=exec('imp_def','ppk_rpl');
_BUF:=_str.create();
:: dyskryminator dla formuły imp_tab
exec('set_disc','ppk_rpl',_BUF,'NUMER_PPK');

{? ~exec('c100_imp','ppk_rpl',_BUF,_par,_fld)
:: danych nie udało się zaimportować
|| return()
?};

_BUF.cntx_psh();
_loop:=_BUF.first();
{!
|? _loop
|! _BUF.memo_set(
::    wartości uwzględniane w formule imp_tab dla sekcji NUMER_PPK
      '_par:=obj_new(\'ID_PPK\',\'PZIF_RACH_PPK\');'
      '_par.ID_PPK:=\'%1\';'
      '_par.PZIF_RACH_PPK:=\'%2\';'
      '_par'[
         _BUF.ID_PPK,
         _BUF.NR_RACH
      ],'PAR'
   );
   _BUF.memo_put(,'PAR');
   _loop:=_BUF.next()
!};
_BUF.cntx_pop();

:: dane
_BUF


\c100ippk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn raportu "Nadanie uczestnikowi numeru w ewidencji".
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
:: kolejność determinuje położenie kolumn
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'ID_PPK,'
'NR_RACH,'


\c100cwyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Import danych raportu "Wypłata środków przez uczestnika".
::   WE: _a OBJECT - parametry działania (tablica nazwana)
::       _b STRING - lista pól do wypełnienia
::   WY: alias tabeli z danymi w przypadku sukcesu lub ~~ gdy import nie powiódł się
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_fld:=_b;

:: podstawowy zestaw danych
_str:=exec('imp_def','ppk_rpl');
:: dodatkowe kolumny w raporcie
_str.add(,'DATA_WYP','STRING[10]','DATA_WYPLATY');
_BUF:=_str.create();
:: dyskryminator dla formuły imp_tab
exec('set_disc','ppk_rpl',_BUF,'WYPLATA_SRODKOW');

{? ~exec('c100_imp','ppk_rpl',_BUF,_par,_fld)
:: danych nie udało się zaimportować
|| return()
?};

_BUF.cntx_psh();
_loop:=_BUF.first();
{!
|? _loop
|! _BUF.memo_set(
::    wartości uwzględniane w formule imp_tab dla sekcji WYPLATA_SRODKOW
      '_par:=obj_new(\'DATA_WYPLATY\');'
      '_par.DATA_WYPLATY:=date(%1);'
      '_par'[
         gsub(_BUF.DATA_WYP,'-',',')
      ],'PAR'
   );
   _BUF.memo_put(,'PAR');
   _loop:=_BUF.next()
!};
_BUF.cntx_pop();

:: dane
_BUF


\c100iwyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn raportu "Wypłata środków przez uczestnika".
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
:: kolejność determinuje położenie kolumn
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'ID_PPK,'
'NR_RACH,'

'DATA_WYP,'


\c100ctrn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Import danych raportu "Wypłata transferowa".
::   WE: _a OBJECT - parametry działania (tablica nazwana)
::       _b STRING - lista pól do wypełnienia
::   WY: alias tabeli z danymi w przypadku sukcesu lub ~~ gdy import nie powiódł się
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_fld:=_b;

:: podstawowy zestaw danych
_str:=exec('imp_def','ppk_rpl');
:: dodatkowe kolumny w raporcie
_str.add(,'DATA_WYP','STRING[10]','DATA_WYPLATY');
_str.add(,'RACH_WYP','STRING[50]','POP_PZIF_ID');
_BUF:=_str.create();
:: dyskryminator dla formuły imp_tab
exec('set_disc','ppk_rpl',_BUF,'WYPLATA_TRANSFEROWA');

{? ~exec('c100_imp','ppk_rpl',_BUF,_par,_fld)
:: danych nie udało się zaimportować
|| return()
?};

_BUF.cntx_psh();
_loop:=_BUF.first();
{!
|? _loop
|! _BUF.memo_set(
::    wartości uwzględniane w formule imp_tab dla sekcji WYPLATA_TRANSFEROWA
      '_par:=obj_new(\'DATA_WYPLATY\',\'POP_PZIF_ID\');'
      '_par.DATA_WYPLATY:=date(%1);'
      '_par.POP_PZIF_ID:=\'%2\';'
      '_par'[
         gsub(_BUF.DATA_WYP,'-',','),
         _BUF.RACH_WYP
      ],'PAR'
   );
   _BUF.memo_put(,'PAR');
   _loop:=_BUF.next()
!};
_BUF.cntx_pop();

:: dane
_BUF


\c100itrn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn raportu "Wypłata transferowa".
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
:: kolejność determinuje położenie kolumn
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'ID_PPK,'
'NR_RACH,'

'DATA_WYP,'
'RACH_WYP,'


\c100czwr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Import danych raportu "Zwrot".
::   WE: _a OBJECT - parametry działania (tablica nazwana)
::       _b STRING - lista pól do wypełnienia
::   WY: alias tabeli z danymi w przypadku sukcesu lub ~~ gdy import nie powiódł się
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_par:=_a;
_fld:=_b;

:: podstawowy zestaw danych
_str:=exec('imp_def','ppk_rpl');
:: dodatkowe kolumny w raporcie
_str.add(,'DATA_WYP','STRING[10]','DATA_WYPLATY');
_BUF:=_str.create();
:: dyskryminator dla formuły imp_tab
exec('set_disc','ppk_rpl',_BUF,'ZWROT');

{? ~exec('c100_imp','ppk_rpl',_BUF,_par,_fld)
:: danych nie udało się zaimportować
|| return()
?};

_BUF.cntx_psh();
_loop:=_BUF.first();
{!
|? _loop
|! _BUF.memo_set(
::    wartości uwzględniane w formule imp_tab dla sekcji ZWROT
      '_par:=obj_new(\'DATA_WYPLATY\');'
      '_par.DATA_WYPLATY:=date(%1);'
      '_par'[
         gsub(_BUF.DATA_WYP,'-',',')
      ],'PAR'
   );
   _BUF.memo_put(,'PAR');
   _loop:=_BUF.next()
!};
_BUF.cntx_pop();

:: dane
_BUF


\c100izwr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Lista kolumn raportu "Zwrot".
::   WE:
::   WY: lista akronimów kolumn oddzielonych przecinkami
::----------------------------------------------------------------------------------------------------------------------
:: kolejność determinuje położenie kolumn
'LP,'
'PESEL,'
'DOK_TYP,'
'DOK_SYM,'
'ID_APP,'
'NAZWISKO,'
'PIERWSZE,'

'ID_PPK,'
'NR_RACH,'

'DATA_WYP,'


\wys_stat_zm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Zmiana stanu znacznika wysłania raportu.
::   WE: [_a] [STRING] - Nowa wartość znacznika [T*/N].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_new:={? var_pres('_a')=type_of('') & (_a='T' | _a='N') || _a || 'T' ?};
{? PPK_RPL.WYS_STAT=_new
|| return()
?};

_put:=0;
{? PPK_RPL.WYS_STAT='N'
|| {? PPK_RPL.LICZ_BL
   || FUN.info('Raport zawiera błędy. Wysłanie nie jest możliwe.'@)
   |? ~exec('jest_rtz','ppk_rpl')
   || FUN.info('Raport nie zawiera załączników. Wysłanie nie jest możliwe.'@)
   || PPK_RPL.WYS_STAT:='T';
      _put+=1
   ?}
|| PPK_RPL.WYS_STAT:='N';
   _put+=1
?};
{? _put
:: Zmiana znacznika zawsze pozostawia ślad.
|| PPK_RPL.WYS_DATA:=date();
   PPK_RPL.WYS_KTO:=userdata();
   PPK_RPL.put()
?}


\data_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Po redagowaniu pola  PPK_RPL.DATA;
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPK_RPL.R:=PPK_RPL.DATA~1;
PPK_RPL.M:=PPK_RPL.DATA~2;
:: Szukam wersji adekwatnej do daty:
PPK_XWE.cntx_psh();
PPK_XWE.index('DATA');
PPK_XWE.prefix();
{? PPK_XWE.find_ge(date())
|| PPK_RPL.PPK_XWE:=PPK_XWE.ref()
?};
PPK_XWE.cntx_pop();

1


\g102dekl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Deklaracja uczestnika (wersja 1.02, 2.00)
::   WE: _a [_PPK_RDA] - Element nadrzędny.
::       _b [OBJECT]   - Wskazanie tablicy parametrów.
::   WY: Wskazanie utworzonej/znalezionej sekcji.
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;

_ref:=null();

_dpo:=date(_par.R,_par.M,1);
_dko:=_par.DATA;

:: Wysyłać dla zatrudnionych osób:
_rpAwwOZ:=(_par.PARRAP.R_AWW_OZ='T');
:: Wysyłać dla niezatrudnionych osób:
_rpAwwON:=(_par.PARRAP.R_AWW_ON='T');
:: Wysyłać dla zatrudnionych uczestników:
_rpAwwUZ:=(_par.PARRAP.R_AWW_UZ='T');
:: Wysyłać dla niezatrudnionych uczestników:
_rpAwwUN:=(_par.PARRAP.R_AWW_UN='T');

PPK_WRD.cntx_psh();
PPK_WNU.cntx_psh();
PPK_WNU.prefix();
PPK_WNU.f_set(
   'DATA',
   'join PPK_WRD using(PPK_WNU.PPK_WRD,PPK_WRD.REFERENCE)',
   'PPK_WNU.PPK_RDA is null and (PPK_WRD.WER_WYM=\'N\' or PPK_WNU.WER_STAT=\'T\') and '+
   'PPK_WNU.PPK_UCZ=:_a and PPK_WRD.RAP_ZEW=\'T\' and '+
   'to_date(:_b)<=PPK_WNU.DATA and PPK_WNU.DATA<=to_date(:_c) and '+
   'PPK_WRD.KOD!=\'UCZ_WYPŁATA_TRANSFEROWA\' '+
   {? ~_rpAwwOZ & ~_rpAwwON & ~_rpAwwUZ & ~_rpAwwUN
   || 'and PPK_WRD.KOD!=\'UCZ_WZNOWIENIE_4\''
   |? ~_rpAwwOZ & ~_rpAwwON
   || 'and (PPK_WRD.KOD!=\'UCZ_WZNOWIENIE_4\' or PPK_WRD.RODZAJ!=\'O\')'
   |? ~_rpAwwUZ & ~_rpAwwUN
   || 'and (PPK_WRD.KOD!=\'UCZ_WZNOWIENIE_4\' or PPK_WRD.RODZAJ!=\'U\')'
   || ''
   ?},
   _par.UCZ,_dpo,_dko
);
{? PPK_WNU.f_first()
|| {!
   |? _kod:=PPK_WNU.PPK_WRD().KOD;
      _rodzaj:=PPK_WRD.RODZAJ;
      _aktywny:=(_kod<>'UCZ_WZNOWIENIE_4' | exec('aktywny','ppk_ucz',OSOBA.ref(),PPK_WNU.DATA));

      {? _kod<>'UCZ_WZNOWIENIE_4' |
         (_rodzaj='O' & ((_rpAwwOZ & _aktywny) | (_rpAwwON & ~_aktywny))) |
         (_rodzaj='U' & ((_rpAwwUZ & _aktywny) | (_rpAwwUN & ~_aktywny)))
      || {? _ref=null()
         || _ref:=_par.dodaj(_nad,'DANE_DEKLARACJI',,'S')
         ?};
         _dekl:=_par.dodaj(_ref,'DEKLARACJA',,'S',1);
         _par.dodaj(_dekl,'DATA_DEKLARACJI',xml_value(PPK_WNU.DATA));
         _par.dodaj(_dekl,'TYP_DEKLARACJI',_kod);
         PPK_WNU.PPK_RDA:=_dekl;
         PPK_WNU.put();
         {? _kod='UCZ_ZMIANA_SKŁADKI_POD' | _kod='UCZ_ZMIANA_SKŁADKI_DOD'
::       zmiana wpłaty podstawowej lub dodatkowej uczestnika
         || PPK_WPW.cntx_psh();
            PPK_WPW.index('RN');
            _atr:={? _kod+3='POD' || 712 || 713 ?};
            PPK_WPW.prefix(PPK_WNU.ref(),__RUB.sys_kod(_atr,PPK_WNU.OD));
            {? PPK_WPW.first()
            || _par.dodaj(_dekl,'PROCENT_SKLADKI',form(PPK_WPW.STAWKA,,2,'9.'))
            || _par.blad(
                  OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE+' - dane deklaracji uczestnika',
                  'Raport "'+_kod+'" - nieprawidłowo zdefiniowany procent wpłaty'
               )
            ?};
            PPK_WPW.cntx_pop()
         |? _kod='UCZ_WZNOWIENIE_4'
::       automatyczne wznowienie wpłat
         || _osDrwzDt:=exec('spr_wnu_po','ppk_wnu',PPK_WNU.OSOBA,'DRZW',PPK_WNU.DATA,1,1,1,1);
::       Czy osoba miała wcześniej wprowadzone DRZW z datą po AWW:
            {? _osDrwzDt<>date(0,0,0)
            || _par.uwaga(_par.DIU,
                  'Osoba posiada niepowiązaną z uczestnikiem deklarację rezygnacji z datą %1. '
                  'Należy zweryfikować wnioski/deklaracje uczestnika.'@[$_osDrwzDt])
            ?}
         ?}
      ?};
      PPK_WNU.f_next()
   !}
?};
PPK_WNU.f_clear();
PPK_WNU.cntx_pop();
PPK_WRD.cntx_pop();

_ref


\g200tran
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Transfer PPK (wersja 2.00)
::   WE: _a [_PPK_RDA] - Element nadrzędny.
::       _b [OBJECT]   - Wskazanie tablicy parametrów.
::   WY: Wskazanie utworzonej/znalezionej sekcji.
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_nad:=_a;
_par:=_b;

_ref:=null();

:: Podczytanie stałej odpowiedzialnej za opóżnienie raportowania wniosku o wypłatę transferową:
exec('czytaj','#stalesys',_par.DATA,KST_PPK,'DWT_OKR');

_dpo:=date(_par.R,_par.M,1)-KST_PPK.DWT_OKR;
_dko:=_par.DATA-KST_PPK.DWT_OKR;

PPK_WNU.cntx_psh();
PPK_WNU.prefix();
PPK_WNU.f_set(
   'DATA',
   'join PPK_WRD using(PPK_WNU.PPK_WRD,PPK_WRD.REFERENCE)',
   'PPK_WNU.PPK_RDA is null and (PPK_WRD.WER_WYM=\'N\' or PPK_WNU.WER_STAT=\'T\') and '+
   'PPK_WNU.PPK_UCZ=:_a and PPK_WRD.RAP_ZEW=\'T\' and '+
   'to_date(:_b)<=PPK_WNU.DATA and PPK_WNU.DATA<=to_date(:_c) and '+
   'PPK_WRD.KOD=\'UCZ_WYPŁATA_TRANSFEROWA\'',
   _par.UCZ,_dpo,_dko
);
{? PPK_WNU.f_first()
|| PPK_WRD.cntx_psh();
   PPK_WRD.prefix();
   {!
   |? _sym:=PPK_WNU.PPK_WRD().SYMBOL;
::    Transfer DWP - zmiana zarządzającego (kod 12) - 'podstawa prawna art.12 ust.4 UoPPK'
::    Transfer DWT - wypłata transferowa (kod 19) - 'podstawa prawna art.19 ust.4 UoPPK':
      _saWIF:=0;
      PPK_WIF.cntx_psh();
      PPK_WIF.index('WNU_NAZ');
      PPK_WIF.prefix(PPK_WNU.ref());
::    Sprawdzenie, czy są odpowiednie PPK_WIF i jest sens zakładać sekcję LISTA_TRANSFEROW:
      {? PPK_WIF.find_tab(0,'BLOKADA',,'=','N','NR_RACH',,'<>','','ADRES','NAZWA','<>','','ADRES','NIP','<>','')
      || _saWIF:=1;
         {? _ref=null()
         || _ref:=_par.dodaj(_nad,'LISTA_TRANSFEROW',,'S')
         ?}
      ?};
      {? PPK_WIF.first()
      || {!
         |? {? PPK_WIF.BLOKADA<>'T'
            ||  ADRES.cntx_psh();
                ADRES.prefix();
                _ifNaz:=PPK_WIF.ADRES().NAZWA;
                _ifNip:=ADRES.NIP;
                ADRES.cntx_pop();
                _wifRach:=PPK_WIF.NR_RACH;
                {? +_ifNaz & +_ifNip & +_wifRach
                || _dekl:=_par.dodaj(_ref,'TRANSFER',,'S',1);
                   _par.dodaj(_dekl,'TYP_TRANSFERU',xml_value({?_sym='DWP' || 12 || 19 ?}));
                   _par.dodaj(_dekl,'NUMER_RACHUNKU_PPK_Z',_wifRach);
                   _par.dodaj(_dekl,'PZIF_WYPLACAJACA_NAZWA',_ifNaz);
                   _patt:=spli_str(' ,-',',');
                   _par.dodaj(_dekl,'PZIF_WYPLACAJACA_NIP',xml_value(gsub(_ifNip,_patt,'')));
                   obj_del(_patt)
                || _err:='';
                   {? ~(+_ifNaz) | ~(+_ifNip)
                   || _err+='Brak ';
                      {? ~(+_ifNaz)
                      || _err+='nazwy';
                         {? ~(+_ifNip) || _err+=' oraz NIP' ?}
                      || _err+='NIP'
                      ?};
                      _err+=' instytucji finansowej. '
                   ?};
                   {? ~(+_wifRach) || _err+='Brak numeru rachunku uczestnika.' ?};
                   _par.blad(OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE+' - transfer',_err)
                ?}
            ?};

            PPK_WIF.next()
         !}
      || _par.blad(OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE+' - transfer','Brak instytucji finansowej do wypłaty')
      ?};
      PPK_WIF.cntx_pop();
      {? _saWIF
      || PPK_WNU.PPK_RDA:=_dekl;
         PPK_WNU.put()
      ?};

      PPK_WNU.f_next()
   !};
   PPK_WRD.cntx_pop()
?};
PPK_WNU.f_clear();
PPK_WNU.cntx_pop();

_ref


\pop_umo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wyszukuje informacje o instytucji i/lub numerze rachunku uczestnika z poprzedniej umowy o zarządzanie.
::       Przechodzi do poprzedniej umowy o zarządzanie i pobiera dane instytucji, następnie przechodzi do ostatniej
::       umowy o prowadzenie w tej umowie o zarządzanie i pobiera dane uczestnika.
::   WE:  _a  [_PPK_UMO] - wskazanie na obecną umowę o prowadzenie
::       [_b] [_OSOBA] - wskazanie na osobę, jeśli brak w wyniku nie znajdzie się numer rachunku uczestnika
::   WY: _ret [OBJ] - tablica elementów nazwanych ze zwracanymi wartościami:
::          'PZIF_NAZWA' [STRING] - nazwa poprzedniej IF
::          'PZIF_NIP' [STRING] - nip poprzedniej IF
::          'PZIF_ADRES' [_ADRES] - wskazanie na IF
::          'UCZ_NR_RACH' [STRING] - numer rachunku uczestnika jeśli podano wskazanie na osobę lub pusty
::          'BLAD' [STRING] - treść błędu jeśli wystąpił lub pusty
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>7
|| FUN.error('Brak lub błędny typ argumentu wejściowego');
   return(0)
|| _umo:=_a
?};
_osoba:={? var_pres('_b')<>7 || null() || _b ?};

:: Zwracany obiekt:
_ret:=obj_new('PZIF_NAZWA','PZIF_NIP','PZIF_ADRES','UCZ_NR_RACH','BLAD');
_ret.PZIF_NAZWA:=_ret.PZIF_NIP:=_ret.UCZ_NR_RACH:=_ret.BLAD:='';
_ret.PZIF_ADRES:=null();

:: Szukam poprzedniej umowy o zarządzanie:
PPK_UMO.cntx_psh();
PPK_UMO.prefix();
{? PPK_UMO.seek(_umo)
|| PPK_UZA.cntx_psh();
   _firma:=PPK_UMO.PPK_UZA().FIRMA;
   _uzaOd:=PPK_UZA.OD;
   PPK_UZA.index('OD');
   PPK_UZA.prefix(_firma);
:: W indeksie data jest w kolejności malejącej, więc find_ge:
   {? PPK_UZA.find_ge(_uzaOd-1)
   || {? _osoba
      || PPK_UMO.index('OD');
::       Szukam ostatniej umowy o prowadzenie z poprzedniej umowy o zarządzanie:
         PPK_UMO.prefix(PPK_UZA.ref());
         {? PPK_UMO.first()
         || PPK_UCZ.cntx_psh();
::          Szukam obecnego uczestnika pod poprzednią umową:
            PPK_UCZ.index('UNIQUE');
            PPK_UCZ.prefix(PPK_UMO.ref(),_osoba);
            {? PPK_UCZ.first() & +PPK_UCZ.NR_RACH
            || _ret.UCZ_NR_RACH:=PPK_UCZ.NR_RACH
::          Nie powinno mieć miejsca:
            || _ret.BLAD:='Brak uczestnika lub brak numeru rachunku uczestnika na poprzedniej umowie'@
            ?};
            PPK_UCZ.cntx_pop()
::       Nie powinno mieć miejsca:
         || _ret.BLAD:='Brak poprzedniej umowy o prowadzenie'@
         ?}
      ?};

      {? ~+_ret.BLAD
::    Pobieram dane o NIP i nazwie poprzedniej IF:
      || ADRES.cntx_psh();
         ADRES.prefix();
         _ret.PZIF_NAZWA:=PPK_UZA.ADRES().NAZWA;
         _ret.PZIF_ADRES:=ADRES.ref();
         _patt:=spli_str(' ,-',',');
         _ret.PZIF_NIP:=xml_value(gsub(ADRES.NIP,_patt,''));
         obj_del(_patt);
         ADRES.cntx_pop()
      ?}
:: Nie powinno mieć miejsca:
   || _ret.BLAD:='Brak poprzedniej umowy o zarządzanie'@
   ?};
   PPK_UZA.cntx_pop()
:: Nie powinno mieć miejsca:
|| _ret.BLAD:='Brak umowy o prowadzenie'@
?};
PPK_UMO.cntx_pop();

_ret


:Sign Version 2.0 jowisz:1045 2023/07/25 12:00:33 ce070108842f55b4b4addc03e464fb049b38b1407799c8272ce2b8767778e7a96051d51daa8979980ef92bf37aef468f3033223721c9e7767e1e98283fdc402dc30b47248a5c60c026dde6a1e8e0e161304060241717c80258ea9fca8ef2f0c8e91915be18172247afb2425d1d1158785cf1309bb7895e448a04f4cde5a91386
