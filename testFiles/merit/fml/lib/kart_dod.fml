:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: kart_dod.fml [1998]
:: Utworzony: 1998/09/23
:: Autor: GS
::======================================================================================================================
:: Zawartość: Definicje funkcji odpowiedzialnych za obsługę kartotek dodatkowych pracownika:
::            badania okresowe, szkolenia BHP, wyróżnienia i kary, dodatkowe kwalifikacje.
::======================================================================================================================


\systemowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła zwraca listę akronimów kartotek dodatkowych, obsługiwanych w sposób dedykowany.
::   WE: [_a] [STRING] - Kod oczekiwanego wyniku.
::                      ''    - Elementy są rozdzielone przecinkami. Przecinków nie ma przed pierwszym
::                              i po ostatnim elemencie.
::                      'SQL' - Wynik jest listą, którą można użyć w zapytaniach SQL.
::   WY: Lista w formacie określonym przez parametr _a.
::----------------------------------------------------------------------------------------------------------------------
_tret:={? var_pres('_a')=type_of('') & (_a='' | _a='SQL') || _a || '' ?};

_lista:='DOD_KWAL,FP_FGSP,KART_NIP,SZKOLBHP,WYR_KAR';
{? _tret='SQL'
|| _arr:=spli_str(_lista,',');
   _ret:='';
   {! _lp:=1 .. obj_len(_arr)
   |! _ret+='\''+_arr[_lp]+'\','
   !};
   _ret-1

|| _lista
?}


\f_set_nosys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła zakłada fitr na tabelę KART_DEF, ukrywając kartoteki 'systemowe'.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KART_DEF.f_set('SYMBOL',,'SYMBOL not in ('+exec('systemowe','kart_dod','SQL')+')')


\kart_def_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.14]
:: OPIS: Formuła eksportująca wartość parametru typu _KART_DEF.
::   WE: _a [REFERENCE] - Wskazanie kartoteki dodatkowej.
::   WY: Treść formuły do wykonania podczas importu.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=KART_DEF
|| _kart_def:=_a
|| return('')
?};

_fml:='';
KART_DEF.cntx_psh();
KART_DEF.prefix();
{? KART_DEF.seek(_kart_def)
|| _fml:=exec('formulizer_clean','#b_export','exec(\'kart_def\',\'kart_dod\',\'%1\')' [KART_DEF.SYMBOL])
?};
KART_DEF.cntx_pop();
_fml


\kart_def_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.41]
:: OPIS: Formuła usuwa zapisy i definicję kartoteki dodatkowej o wskazanym symbolu.
::   WE:  _a  [STRING] - Symbol kartoteki dodatkowej do usunięcia.
::       [_b] [NUMBER] - Czy wyświetlac pytania, komunikaty?
::            0 - Nie;
::            1 - Tak [domyślnie]
::   WY: '' lub przyczyna niepowodzenia (tekst).
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _nazwa:=_a
|| return('Błędny argument wywołania.')
?};
_msg:={? var_pres('_b')=type_of(0) || _b || 1 ?};

_ret:='';

KART_DEF.cntx_psh();
KART_DEF.index('SYMBOL');
KART_DEF.prefix(_nazwa,_nazwa);
{? KART_DEF.first()
|| _txt:=KART_DEF.SYMBOL+' - '+KART_DEF.OPIS;
   {? ~_msg |
      FUN.ask('Czy na pewno chcesz usunąć wszystkie zapisy i samą definicję kartoteki dodatkowej\n[%1]\n?'@ [_txt])
   || do();
      KART_DOD.cntx_psh();
      KART_DOD.index('KART_DOD');
      KART_DOD.prefix(exec('ref_firma','ustawienia'),KART_DEF.ref());
      {? KART_DOD.first()
      || {! |? KART_DOD.del() !}
      ?};
      KART_DOD.cntx_pop();

      {? KART_DOD.count()=0
      || _last:=1;
         SLO_TYP.cntx_psh();
         SLO_TYP.index('SYMBOL');
         SLO_TYP.prefix(_nazwa,_nazwa);
         {? SLO_TYP.first()
         || SLO_NAZ.cntx_psh();
            SLO_NAZ.index('NAZWA');
            SLO_NAZ.prefix(SLO_TYP.ref());
            {? SLO_NAZ.first()
            || {! |? SLO_NAZ.del() !}
            ?};
            SLO_NAZ.cntx_pop();

            SLO_KOD.cntx_psh();
            SLO_KOD.index('KOD');
            SLO_KOD.prefix(SLO_TYP.ref());
            {? SLO_KOD.first()
            || {! |? SLO_KOD.del() !}
            ?};
            SLO_KOD.cntx_pop()
         ?};
         SLO_TYP.cntx_pop();

         KART_DEF.del()
      || _last:=0
      ?};

      {? end()
      || {? _msg
         || {? _last
            || FUN.info('%1\nDefinicja kartoteki i wszystkie zapisy zostały usunięte.'@ [_txt])
            || FUN.info(
                  '%1\nWszystkie zapisy zostały usunięte.\nDefinicja kartoteki wykorzystywana w innych firmach.'@ [_txt]
               )
            ?}
         ?}
      || _ret:='Usunięcie kartoteki nie powiodło się.'@;
         {? _msg
         || FUN.emsg('%1\n%2\nWszystkie zmiany wycofane.'@ [_txt,_ret])
         ?}
      ?}

   || _ret:='Rezygnacja.'@
   ?}

?};
KART_DEF.cntx_pop();

_ret


\params_kart_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła zwracająca parametry wykorzystywane podczas pracy w obszarach robocztch.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('REF','SYMBOL');
_ret.REF:=null();
_ret.SYMBOL:='';
_ret


\kart_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
::       RWR [17.00]
:: OPIS: Wyszukuje lub zakłada wskazaną kartotekę dodatkową. Wynikiem jest KART_DEF.ref() lub null() w przypadku błędu.
::       Formuła zmienia bufor tabeli KART_DEF - po zakończeniu działania wczytany jest rekord wskazanej kartoteki.
::       Formuła wykorzystywana również jako formuła na wartość początkową pola KART_DOD.KART_DEF.
::   WE: _a [STRING] - Symbol kartoteki.
::  OLD: \opis/kart_dod.fml
::  OLD: \opisw/kart_dod.fml
::  OLD: \ustaw/kart_dod.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') || EDIT_VAR.KART_DEF:=_a ?};
{? form(EDIT_VAR.KART_DEF)=''
|| return(null())
?};

_ret:=null();
_symbol:=EDIT_VAR.KART_DEF;

KART_DEF.clear();
KART_DEF.index('SYMBOL');
{? KART_DEF.find_key(_symbol,_symbol)
|| _ret:=KART_DEF.ref()

|| KART_DEF.blank();
   KART_DEF.SYMBOL:=_symbol;
   KART_DEF.memo_set(,'F3');

   {? _symbol='SZKOLBHP'
   || KART_DEF.NAZWA:='Szkolenie BHP i PPOŻ';
      KART_DEF.WER:='KART';
      KART_DEF.OPIS:='Opis szkolenia';
      KART_DEF.OD:='Data';
      KART_DEF.DO:='Ważne do';
      KART_DEF.WARTOSC:='Koszt szkolenia';
      KART_DEF.KT:='Rodzaj';
      KART_DEF.memo_set(
         '\'O\'|\'Okresowe\'\n'+
         '\'J\'|\'Jednorazowe\'\n','F3')


   |? _symbol='WYR_KAR'
   || KART_DEF.NAZWA:='Wyróżnienie / kara';
      KART_DEF.WER:='KART';
      KART_DEF.OPIS:='Opis';
      KART_DEF.OD:='Data';
      KART_DEF.DO:='Ważne do';
      KART_DEF.WARTOSC:='Kwota';
      KART_DEF.KT:='Symbol';
      KART_DEF.memo_set(
         '\'W\'|\'Wyróżnienie\'\n'+
         '\'N\'|\'Nagroda\'\n'+
         '\'K\'|\'Kara\'\n'+
         '\'!\'|\'Nagana\'\n','F3')

   |? _symbol='DOD_KWAL'
   || KART_DEF.NAZWA:='Dodatkowa kwalifikacja';
      KART_DEF.WER:='ODDO';
      KART_DEF.OPIS:='Opis';
      KART_DEF.OD:='Data';
      KART_DEF.DO:='Ważne do'

   |? _symbol='FP_FGSP'
   || KART_DEF.NAZWA:='Przerwa w opłacaniu składek na FP i FGŚP';
      KART_DEF.WER:='ODDO';
      KART_DEF.OPIS:='Opis';
      KART_DEF.OD:='Data od';
      KART_DEF.DO:='Data do'

   |? _symbol='KART_NIP'
   || KART_DEF.NAZWA:='Prowadzenie działalności gospodarczej';
      KART_DEF.WER:='ODDO';
      KART_DEF.OPIS:='Opis';
      KART_DEF.OD:='Data od';
      KART_DEF.DO:='Data do'

   |? _symbol='PODW_MAC'
   || KART_DEF.NAZWA:='Podwyższenie zasiłku mac. inne zatrud.';
      KART_DEF.WER:='ODDO';
      KART_DEF.OPIS:='Opis';
      KART_DEF.WARTOSC:='Kwota';
      KART_DEF.OD:='Data od';
      KART_DEF.DO:='Data do'

   |? _symbol='PODW_OCH'
   || KART_DEF.NAZWA:='Zwiększenie ochrony minimalnego wynagr.';
      KART_DEF.WER:='ODDO';
      KART_DEF.OPIS:='Powód zwiększenia';
      KART_DEF.WARTOSC:='Procent zwiększenia';
      KART_DEF.OD:='Data od';
      KART_DEF.DO:='Data do'

   |? _symbol='WYR_TARC'
   || KART_DEF.NAZWA:='Wyrównanie wypłaconych zasiłków: TARCZA.';
      KART_DEF.WER:='ODDO';
      KART_DEF.OPIS:='Opis';
      KART_DEF.OD:='Data od';
      KART_DEF.DO:='Data do'

   || KART_DEF.NAZWA:=KART_DEF.SYMBOL+' (utworzona)';
      KART_DEF.WER:='ODDO';
      KART_DEF.OPIS:='Opis';
      KART_DEF.OD:='Data od';
      KART_DEF.DO:='Data do'
   ?};

:  Domyślnie wymagalność pól jest ustawiona na 1 (poza KART_DEF.OPISW i KART_DEF.WARTOSCW).
:  Zmiana wymagalności pól w związku z typem okna.
   {? KART_DEF.WER='ODDO'
:     Od dnia, Do dnia, Opis (ze szczególnym uwzględnieniem kartoteki KART_NIP)
   || KART_DEF.DOW:=KART_DEF.SYMBOL<>'KART_NIP' & KART_DEF.SYMBOL<>'PODW_OCH' & KART_DEF.SYMBOL<>'WYR_TARC';
      KART_DEF.KTW:=0

   |? KART_DEF.WER='KTOD'
:     Kategoria, Od dnia, Opis
   || KART_DEF.DOW:=0
   ?};

   KART_DEF.CZYWART:={? KART_DEF.WARTOSC='' || '' || '_' ?};

   {? KART_DEF.add(1)
   || KART_DEF.memo_put(,'F3');
      _ret:=KART_DEF.ref()
   ?}
?};
_ret


\kat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła analizuje zawartość pola notatnikowego KART_DEF.F3 i tworzy tabelę tymczasową ze "słownikiem".
::       Wynikiem jest tablica, której elementami (oprócz tabeli tymczasowej - pole TAB) są dodatkowe informacje:
::       - STATUS - pole zawierające informację o napotkanym problemie lub '' w przypadku powodzenia.
::   WE: [_a] [INTEGER] - Źrodlo danych:
::             0 - Pole jest czytane z bufora;
::             1 - Pole jest czytane z bazy [domyślnie].
::       [_b] [STRING] - Zakres komunikatów, które są "wyłączane" - lista, ktorej elementami mogą być litery:
::             P - pusta tablica (brak definicji)
::             T - typ kartoteki (nie obsługuje kategorii)
::             [domyślnie: '' - wszystkie błędy są komunikowane]
::   WY: Tablica z dwoma nazwanymi elementami.
::----------------------------------------------------------------------------------------------------------------------
_db:={? var_pres('_a')=type_of(0) || _a || 1 ?};
_err:={? var_pres('_b')=type_of('') || _b || '' ?};

_kat:=obj_new('TAB','STATUS');
_kat.TAB:=tab_tmp(1,'SYMBOL','STRING[1]','Symbol','OPIS','STRING[255]','Opis');
_kat.STATUS:='';

{? KART_DEF.WER='ODDO' & _err*'T'=0
|| _kat.STATUS:='Kartoteka nie obsługuje pola "%1".'@ [MS.name(KART_DEF,'KT')];
   return(_kat)
?};

_def:=KART_DEF.memo_txt(,_db,'F3');

_arr:=spli_str(_def,'\n');
{! _lp:=1 .. obj_len(_arr)
|? _kat.STATUS=''
|! _prolog:='Linia nr %1\n%2\n'@ [$_lp,_arr[_lp]];
   {? _arr[_lp]=''
   || 'To nie jest błąd.'; ~~

   |? _poz:=_arr[_lp]*'|';
      _poz=0
   || _kat.STATUS:=_prolog+'Nieprawidłowa struktura - brak podziału na pola.'@

   |? _symbol:=form((_poz-1)+_arr[_lp]);
      1+_symbol<>'\'' | _symbol+1<>'\''
   || _kat.STATUS:=_prolog+'Nieprawidłowa budowa pola "%1" - brak apostrofów.'@ ['SYMBOL']
   |? +_symbol<>3
   || _kat.STATUS:=_prolog+'Pole "%1" musi być jednoznakowy.'@ ['SYMBOL']

   |? _opis:=form(_poz-_arr[_lp]);
      1+_opis<>'\'' | _opis+1<>'\''
   || _kat.STATUS:=_prolog+'Nieprawidłowa budowa pola "%1" - brak apostrofów.'@ ['OPIS']
   |? +_opis<3 | +_opis>152
   || _kat.STATUS:=_prolog+'Pole "%1" musi zawierać od 1 do 150 znaków.'@ ['OPIS']

   |? _kat.TAB.blank();
      _kat.TAB.SYMBOL:=1-_symbol-1;
      _kat.TAB.OPIS:=1-_opis-1;
      ~_kat.TAB.add()
   || _kat.STATUS:=_prolog+'Błąd wewnętrzny - nie udało się dodać pozycji do słownika.'@

   ?}
!};

{? _kat.STATUS='' & _kat.TAB.size()=0 & _err*'P'=0
|| _kat.STATUS:='Brak definicji kategorii.'@
?};

_kat


\format_kolumn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustalająca format wyświetlania pól.
::   WE: [_a] [NUMBER] - Tryb pracy:
::                        1 - Ustawienie formatu wyświetlania.
::                        0 - Przywrócenie standardowego formatu wyświetlania [domyślnie].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tryb:=var_pres('_a')=type_of(0) & _a;

{? _tryb
|| _on:=KART_DEF.WER<>'KTOD';
   KART_DOD.fld_fml('DO','DISPLAY_FORMAT',$('\'empty='+$(~_on)+'\''));

   _on:=KART_DEF.WER<>'ODDO';
   KART_DOD.fld_fml('KT','DISPLAY_FORMAT',$('\'empty='+$(~_on)+'\''));

   _on:=KART_DEF.CZYWART='_';
   KART_DOD.fld_fml('WARTOSC','DISPLAY_FORMAT',$('\'empty='+$(~_on)+'\''));
   ~~

|| KART_DOD.fld_fml('DO','DISPLAY_FORMAT',"*");
   KART_DOD.fld_fml('KT','DISPLAY_FORMAT',"*");
   KART_DOD.fld_fml('WARTOSC','DISPLAY_FORMAT',"*");
   ~~
?}


\mk_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła dla BIEŻĄCEGO rekordu tabeli KART_DEF, zgodnie z zawartymi w nim informacjami, tworzy okienko
::       wertowania danych tabeli KART_DOD.
::   WE: [_a] [STRING]  - Identyfikator czynności redagowania danych.
::       [_b] [STRING]  - Identyfikator czynności przeglądania danych.
::       [_c] [FORMULA] - Formuła dla akcji Zakończ. Brak formuły = brak akcji i przycisku.
::       [_d] [STRING]  - Dziedzina akcji/przycisku Zakończ. Parametr może przyjmować wartości zgodne z parametrem
::                        domain metody win_btn.
::   WY: Akronim utworzonego okienka lub '' w przypadku braku uprawnień.
::----------------------------------------------------------------------------------------------------------------------
_act_mod:={? var_pres('_a')=type_of('') || _a || '' ?};
_act_view:={? var_pres('_b')=type_of('') || _b || '' ?};
_done:={? var_pres('_c')=type_of("") || _c || ~~ ?};
_domain:={? var_pres('_d')=type_of('') & (_d='' | _d='empty' | _d='noempty') || _d || '' ?};

_mod:={? _act_mod<>'' || exec('chk_role','#b__box',OPERATOR.USER,_act_mod) ?};
_view:=_mod | {? _act_view<>'' || exec('chk_role','#b__box',OPERATOR.USER,_act_view) ?};

{? ~_view || return('') ?};

_ws:=KART_DOD.mk_sel(KART_DEF.NAZWA,'P',,(-KART_DEF.SYMBOL)+'_wer'+$_mod,,,7,,'U','T');

_szer:=0;
_mob:='mobile_visible=1';

: Pola
{? KART_DEF.WER='KART'
|| KART_DOD.win_fld(_ws,,'OD',,,-10,,,KART_DEF.OD,,KART_DEF.OD,,,,,,_mob);
   KART_DOD.win_fld(_ws,,'DO',,,-10,,,KART_DEF.DO,,KART_DEF.DO,,,,,,_mob);
   KART_DOD.win_fld(_ws,,'KT',,,-3,,,KART_DEF.KT+' - kod',,KART_DEF.KT+' - kod');
   KART_DOD.win_fld(_ws,SKID,'KAT_OPIS',,,-20,,,KART_DEF.KT+' - opis',,KART_DEF.KT+' - opis',,,,,,_mob);
   _szer:=43+3

|? KART_DEF.WER='KTOD'
|| KART_DOD.win_fld(_ws,,'OD',,,-10,,,KART_DEF.OD,,KART_DEF.OD,,,,,,_mob);
   KART_DOD.win_fld(_ws,,'KT',,,-3,,,KART_DEF.KT,,KART_DEF.KT);
   KART_DOD.win_fld(_ws,SKID,'KAT_OPIS',,,-20,,,KART_DEF.KT+' - opis',,KART_DEF.KT+' - opis',,,,,,_mob);
   _szer:=33+2

|? KART_DEF.WER='ODDO'
|| KART_DOD.win_fld(_ws,,'OD',,,-10,,,KART_DEF.OD,,KART_DEF.OD,,,,,,_mob);
   KART_DOD.win_fld(_ws,,'DO',,,-10,,,KART_DEF.DO,,KART_DEF.DO,,,,,,_mob);
   _szer:=20+1
?};

_sw:={? KART_DEF.CZYWART='_' || 17 ?};

_pozost:=130-_szer-_sw-1;
_szopis:=_pozost%2;
_szuwagi:=_pozost-_szopis;

KART_DOD.win_fld(_ws,,'OPIS',,,-_szopis,,,KART_DEF.OPIS,,KART_DEF.OPIS,,,,,,_mob);
KART_DOD.win_fld(_ws,,'UWAGI',,,-_szuwagi,,,,,'Adnotacje i uwagi');
{? _sw
|| KART_DOD.win_fld(_ws,,'WARTOSC',,,-(_sw-1),2,,KART_DEF.WARTOSC,,KART_DEF.WARTOSC)
?};

: Akcje
{? _mod
|| KART_DOD.win_act(_ws,1,'Dołącz',,,,"SKID.KAT_OPIS:=''; 1",,1);
   KART_DOD.win_act(_ws,0,'Dołącz',,,,,,1);
   _fb:="
      _result:=1;
      {? exec('is_pzd01','ppsf') & KART_DOD.KART_DEF().SYMBOL='WYR_KAR'
      || KOT_TEST.cntx_psh();
         KOT_TEST.index('KART_DOD');
         KOT_TEST.prefix();
         _txt:='Nagana jest powiązana z wynikiem badania trzeźwości.'@;
         _txt+='\n';
         _txt+='Zmiana danych nagany nie wpłynie na zarejestrowane badanie trzeźwości.'@;
         _txt+='\n';
         {? KOT_TEST.find_key(KART_DOD.ref())
         || FUN.info(_txt)
         ?};
         KOT_TEST.cntx_pop()
      ?};
      _result
   ";
   KART_DOD.win_act(_ws,0,'Popraw',,,,_fb);
   _fb:="
      _result:=1;
      {? exec('is_pzd01','ppsf') & KART_DOD.KART_DEF().SYMBOL='WYR_KAR'
      || KOT_TEST.cntx_psh();
         KOT_TEST.index('KART_DOD');
         KOT_TEST.prefix();
         _txt:='Nagana jest powiązana z wynikiem badania trzeźwości.'@;
         _txt+='\n';
         _txt+='Usunięcie nagany spowoduje usunięcie powiązania.'@;
         _txt+='\n';
         _txt+='Czy chcesz kontynuować?'@;
         {? KOT_TEST.find_key(KART_DOD.ref())
         || {? FUN.ask(_txt)
            || KOT_TEST.KART_DOD:=null();
               _result:=KOT_TEST.put()
            || _result:=0
            ?}
         ?};
         KOT_TEST.cntx_pop()
      ?};
      _result
   ";
   KART_DOD.win_act(_ws,0,'Usuń',,,,_fb);
   {? _done<>~~
   || {? _domain='' | _domain='empty'
      || KART_DOD.win_act(_ws,1,'Formuła','Zakończ'@@,,,_done,,,,,,'Z')
      ?};
      {? _domain='' | _domain='noempty'
      || KART_DOD.win_act(_ws,0,'Formuła','Zakończ'@@,,,_done,,,,,,'Z')
      ?}
   ?}
?};
KART_DOD.win_act(_ws,,'Formuła','Zmian&y'@@,,,"mb_exec('ZMIANY()')",,,,,,'Y');
KART_DOD.win_act(_ws,0,'Kolejność');
KART_DOD.win_act(_ws,1,'Rekord',,,,,"exec('kart_dod_ae','kart_dod')");
KART_DOD.win_act(_ws,0,'Rekord',,,,,"exec('kart_dod_ae','kart_dod')");

: Przyciski
{? _mod
|| _bla:=',btn_label_align=center';
   _panel:=',panel=right,align=begin';
   KART_DOD.win_btn(_ws,'text='+'Dołącz'@+_bla+_panel,'menu:D',,,,,,'');
   KART_DOD.win_btn(_ws,'text='+'Popraw'@+_bla+_panel,'menu:P',,,,,,'noempty');
   KART_DOD.win_btn(_ws,'text='+'Usuń'@+_bla+_panel,'menu:U',,,,,,'noempty');

   {? _done<>~~
   || _panel:=',panel=bottom,align=end';
      KART_DOD.win_btn(_ws,'text='+exec('text_red_zakoncz','#window','PKD_L')+_bla+_panel,'menu:Z',,,,,,_domain)
   ?}
?};

_ws


\mk_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła dla BIEŻĄCEGO rekordu tabeli KART_DEF, zgodnie z zawartymi w nim informacjami, tworzy okienko
::       redagowania danych tabeli KART_DOD.
::   WE:
::   WY: Akronim utworzonego okienka.
::----------------------------------------------------------------------------------------------------------------------
_we:=KART_DOD.mk_edit(KART_DEF.NAZWA,,(-KART_DEF.SYMBOL)+'_red');

KART_DOD.win_esep(_we,'Dane podstawowe'@);

_szer:=40;
{? KART_DEF.WER='KART'
|| KART_DOD.win_efld(_we,,'OD',,,10,,,KART_DEF.OD,,KART_DEF.OD);
   KART_DOD.win_efld(_we,,'DO',,,10,,,KART_DEF.DO,,KART_DEF.DO);
   KART_DOD.win_efld(_we,,'KT',,,_szer-3,,,KART_DEF.KT,,KART_DEF.KT+' - '+'kod'@,,'F3_button=1');
   KART_DOD.win_efld(_we,SKID,'KAT_OPIS',,,_szer,,1,,1,KART_DEF.KT+' - '+'opis'@)

|? KART_DEF.WER='KTOD'
|| KART_DOD.win_efld(_we,,'OD',,,10,,,KART_DEF.OD,,KART_DEF.OD);
   KART_DOD.win_efld(_we,,'KT',,,_szer-3,,,KART_DEF.KT,,KART_DEF.KT+' - '+'kod'@,,'F3_button=1');
   KART_DOD.win_efld(_we,SKID,'KAT_OPIS',,,_szer,,1,,1,KART_DEF.KT+' - '+'opis'@)

|? KART_DEF.WER='ODDO'
|| KART_DOD.win_efld(_we,,'OD',,,10,,,KART_DEF.OD,,KART_DEF.OD);
   KART_DOD.win_efld(_we,,'DO',,,10,,,KART_DEF.DO,,KART_DEF.DO)
?};

KART_DOD.win_efld(_we,,'OPIS',,,_szer,,,KART_DEF.OPIS,,KART_DEF.OPIS);
{? KART_DEF.CZYWART='_'
|| KART_DOD.win_efld(_we,,'WARTOSC',,,_szer,2,,KART_DEF.WARTOSC,,KART_DEF.WARTOSC)
?};
KART_DOD.win_efld(_we,,'UWAGI',,,_szer,-5,,,,'Adnotacje'@);

exec('ok_esc','#window',KART_DOD,_we,,,,,,,exec('text_red_ok','#window'));

{? KART_DEF.ODW
|| KART_DOD.efld_opt(_we,'mark=1',KART_DOD,'OD')
?};
{? KART_DEF.DOW
|| KART_DOD.efld_opt(_we,'mark=1',KART_DOD,'DO')
?};
{? KART_DEF.KTW
|| KART_DOD.efld_opt(_we,'mark=1',KART_DOD,'KT')
?};
{? KART_DEF.OPISW
|| KART_DOD.efld_opt(_we,'mark=1',KART_DOD,'OPIS')
?};
{? KART_DEF.WARTOSCW
|| KART_DOD.efld_opt(_we,'mark=1',KART_DOD,'WARTOSC')
?};

_we


\kt_wart
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
::       RWR [17.00]
:: OPIS: Zwraca dozwolone wartości dla pola KART_DOD.KT.
::   WY: Oddzielone przecinkami ciąg znaków zawierający dopuszczalne wartości dla pola KART_DOD.KT.
::----------------------------------------------------------------------------------------------------------------------
_val:='';
_symbol:=KART_DOD.KART_DEF().SYMBOL;
SLO_TYP.cntx_psh();
SLO_TYP.index('SYMBOL');
SLO_TYP.prefix(_symbol,_symbol);
{? SLO_TYP.first()
|| SLO_KOD.cntx_psh();
   SLO_KOD.index('KOD');
   SLO_KOD.prefix(SLO_TYP.ref());
   {? SLO_KOD.first()
   || {!
      |? _val+='\''+SLO_KOD.KOD+'\',';
         SLO_KOD.next()
      !}
   ?};
   SLO_KOD.cntx_pop()
?};
SLO_TYP.cntx_pop();
{? +_val || ','+_val || '' ?}


\kt_opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Zwraca opis wartości pola KART_DOD.KT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? KART_DOD.KT=''
|| _ret:=''
|| _ret:='???';
  KART_DEF.cntx_psh();
  SLO_TYP.cntx_psh();
  SLO_TYP.index('SYMBOL');
  SLO_TYP.prefix(KART_DOD.KART_DEF().SYMBOL,KART_DOD.KART_DEF().SYMBOL);
  {? SLO_TYP.first()
  || SLO_KOD.cntx_psh();
     SLO_KOD.index('KOD');
     SLO_KOD.prefix(SLO_TYP.ref(),KART_DOD.KT,);
     {? SLO_KOD.first()
     || _ret:=SLO_KOD.NAZWA
     ?};
     SLO_KOD.cntx_pop()
  ?};
  SLO_TYP.cntx_pop();
  KART_DEF.cntx_pop()
?};
_ret


\kart_dod_opis_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2010]
:: OPIS: Formuła na wzorzec dla pola KART_DOD.OPIS.
::  OLD: \KDOD/ext_slo.fml
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.SLO_TYP:=EDIT_VAR.KART_DEF;
''


\kart_dod_kt_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wybór F3" dla pola KART_DOD.KT.
::   WE:
::   WY:
::  OLD: \kt_f3/kart_dod.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:=fld();
_symbol:=KART_DOD.KART_DEF().SYMBOL;
SLO_TYP.cntx_psh();
SLO_TYP.index('SYMBOL');
SLO_TYP.prefix(_symbol,_symbol);
{? SLO_TYP.first()
|| SLO_KOD.cntx_psh();
   SLO_KOD.index('KOD');
   SLO_KOD.prefix(SLO_TYP.ref());
   _dh:=SLO_KOD.size()+1;
   {? _dh<5
   || _dh:=5
   |? _dh>30
   || _dh:=30
   ?};
   _ws:=SLO_KOD.mk_sel('Słownik'@,'P',,'#ktf3',,,_dh,,'U');
   SLO_KOD.win_fld(_ws,,'KOD',,,,,1,'Kod'@,,MS.comment(SLO_KOD,'KOD'));
   SLO_KOD.win_fld(_ws,,'NAZWA',,,70,,1,KART_DOD.KART_DEF().NAZWA,,KART_DOD.KART_DEF().NAZWA);
   SLO_KOD.win_act(_ws,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
   SLO_KOD.win_act(_ws,,'Szukaj');
   SLO_KOD.win_act(_ws,,'Kolejność');
   SLO_KOD.win_sel(_ws);
   {? _fld=''
   || SLO_KOD.first()
   || SLO_KOD.find_key(_fld)
   ?};
   {? SLO_KOD.select(,1)
   || _fld:=SLO_KOD.KOD
   ?};
   SLO_KOD.win_sel();
   SLO_KOD.cntx_pop()
?};
SLO_TYP.cntx_pop();
_fld


\kart_dod_kt_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed wyświetleniem pola KART_DOD.KT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SKID.KAT_OPIS:=exec('kt_opis','kart_dod');
1


\kart_dod_kt_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola KART_DOD.KT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SKID.KAT_OPIS:=exec('kt_opis','kart_dod');
1


\kart_dod_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed wyświetleniem okna WER tabeli KART_DOD.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_ref:=KART_DOD.fld_fml('KART_DEF','*BLANK')();

KART_DEF.cntx_psh();
{? KART_DEF.seek(_ref,,1)
|| _wnd:=cur_win(1,1);
   KART_DOD.fld_opt(_wnd,'col_name=%1'[KART_DEF.OD],,'OD');
   KART_DOD.fld_opt(_wnd,'col_name=%1'[KART_DEF.DO],,'DO');
   KART_DOD.fld_opt(_wnd,'col_name=%1'[KART_DEF.KT],,'KT');
   KART_DOD.fld_opt(_wnd,'col_name=%1'[KART_DEF.KT],SKID,'KAT_OPIS');
   KART_DOD.fld_opt(_wnd,'col_name=%1'[KART_DEF.OPIS],,'OPIS');
   KART_DOD.fld_opt(_wnd,'col_name=%1'[KART_DEF.WARTOSC],,'WARTOSC')
?};
KART_DEF.cntx_pop();
1


\kart_dod_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
::       RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - po" dla tabeli KART_DOD.
::       Weryfikacja poprawności danych dla kartotek dodatkowych.
::       Formuła wykorzystywana przez jTerm-a i webTerm-a.
::   WE:
::   WY: Akronim błędnego pola.
::  OLD: \sprawdz/kart_dod.fml
::----------------------------------------------------------------------------------------------------------------------
: Kontrola wypełnienia pól zgodnie z definicją kartoteki
{? KART_DEF.ODW>0 & (_chk:=__CHK.record2(KART_DOD,'OD',KART_DEF.OD))<>''
|| return(_chk)

|? KART_DEF.DOW>0 & (_chk:=__CHK.record2(KART_DOD,'DO',KART_DEF.DO))<>''
|| return(_chk)

|? KART_DEF.KTW>0 & (_chk:=__CHK.record2(KART_DOD,'KT',KART_DEF.KT))<>''
|| return(_chk)

|? KART_DEF.OPISW>0 & (_chk:=__CHK.record2(KART_DOD,'OPIS',KART_DEF.OPIS))<>''
|| return(_chk)

|? KART_DEF.WARTOSCW>0 & (_chk:=__CHK.record2(KART_DOD,'WARTOSC',KART_DEF.WARTOSC))<>''
|| return(_chk)

?};

_d0:=date(0,0,0);

: Weryfikacja spójności dat
{? (KART_DEF.WER='KART' | KART_DEF.WER='ODDO')
|| {? KART_DOD.OD<>_d0 & KART_DOD.DO<>_d0 & KART_DOD.DO<KART_DOD.OD
   || FUN.info('"%1" nie może być późniejsza niż "%2".'@ [KART_DEF.OD,KART_DEF.DO]);
      return('OD')
   ?}
?};

: Weryfikacja kategorii
{? (KART_DEF.WER='KART' | KART_DEF.WER='KTOD') & KART_DOD.KT<>''
|| _wart:=exec('kt_wart','kart_dod');
   {? +_wart & ~(_wart*(',\''+KART_DOD.KT+'\','))
   || _wart:=(1-_wart)-1;
      FUN.info('Błędna wartość pola "%1"\n(dozwolone wartości to: %2).'@ [KART_DEF.KT,_wart]);
      return('KT')
   ?}
?};

:: Weryfikacja wypełnienia KST.ZUSOSW
{? KART_DEF.SYMBOL='ZUS_RIA'
|| _err:='';
   exec('czytaj','#stalesys',,KST,'ZUSOSW');
   {? KST.ZUSOSW=_d0
   || _err:='Przed wprowadzeniem informacji o ZUS RIA należy wprowadzić\n'
            'w "Stałych obszaru - płace" dane o złożonym raporcie ZUS OSW'@
   |? KART_DOD.OD<>_d0 & KST.ZUSOSW>KART_DOD.OD
   || _err:='Data "%1" mniejsza niż "%2".'@ [MS.comment(KART_DOD,'OD'),MS.comment(KST,'ZUSOSW')]
   ?};
   {? +_err
   || FUN.info(_err);
      return('OD')
   ?}
?};

''


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Główna formuła (biblioteczna) obsługująca czynności typu redagowanie kartoteki dodatkowej.
::       W formule dostępne sa parametry oferowane przez menadżera procesów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_mp:=_par.mp;
_in:=_par.in;
_akcja:=_mp.akcja();
_fml:='!'+(-_mp.buf_act.UID);

_result:='';

_uidref:=exec('ref2uid','#table',_in.OSOBA);
{? _uidref=''
|| _result:=exec('error',_fml)

|? _mp.isMicro()
|| {? _akcja='START'
::    Wejście do okienka w ramach obszaru roboczego - uruchomienie procesu i pozostawienie go na liście zadań.
   || _mp.keyRef(_uidref);
      _mp.keep()

   |? _akcja='STOP'
::    Wyjście z okienka w ramach obszaru roboczego - anulowanie procesu.
   || _mp.delRef(_uidref);
      _mp.cancel()

   |? _akcja<>''
   || _result:='Czynność %1 nie obsługuje akcji %2.'@ [_mp.buf_act.UID,_akcja]

   ?}

|| {? _akcja='ZAKOŃCZ'
   || _mp.done()

   |? _mp.pathTodo()
   || _value:=exec('select',_fml,_in.OSOBA);
      {? type_of(_value)=type_of('')
      || _result:=_value
      |? _value
      || _mp.done()
      || _mp.keep()
      ?}
   ?}
?};

{? _result<>''
:  Obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa czynności typu rejestracja danych w kartotece dodatkowej - wywołanie z listy zadań.
::   WE:  _a  [REFERENCE]        - Wskazanie osoby.
::        _b  [STRING/REFERENCE] - Akronim lub wskazanie kartoteki dodatkowej.
::       [_c] [STRING]           - Identyfikator czynności typu rejestracja.
::       [_d] [STRING]           - Identyfikator czynności typu przeglądanie.
::       [_e] [STRING]           - Tekst doklejany do akronimu okna wertowania [domyślnie: ''].
::       [_f] [RULE]             - Formuła wykonywana przed wywołaniem KART_DOD.web_select() [domyślnie: ""]. Do formuły
::                                 przekazywany jest akronim okna, które zostanie wyświetlone.
::       [_g] [RULE]             - Formuła wykonywana przy próbie zamknięcia okna [domyślnie: "web_top_close()"]
::   WY: Komunikat o błędzie lub informacja o wyjściu z okna poprzez wywołanie sel_exit() - czyli "Zakończ".
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null())
|| _osoba:=_a
|| return('Nieprawidłowy typ parametru OSOBA.')
?};

{? var_pres('_b')=type_of('')
|| _def:=exec('kart_def','kart_dod',_b)
|? var_pres('_b')=type_of(null())
|| _def:=_b
|| return('Nieprawidłowy typ parametru KART_DEF.')
?};

_act_mod:={? var_pres('_c')=type_of('') || _c || '' ?};
_act_view:={? var_pres('_d')=type_of('') || _d || '' ?};

{? _act_mod='' & _act_view=''
|| return('Co najmniej jeden z parametrów ACT_MOD i ACT_VIEW musi być podany.')
?};

_wsfx:={? var_pres('_e')=type_of('') || _e || '' ?};
_before_select:={? var_pres('_f')=type_of("") || _f || "" ?};
_esc_form:={? var_pres('_g')=type_of("") || _g || "web_top_close()" ?};

_fml:='!'+{? _act_mod<>'' || -_act_mod || -_act_view ?};

KART_DEF.cntx_psh();
KART_DEF.prefix();
OSOBA.cntx_psh();
OSOBA.prefix();
{? ~(_def<>null() & KART_DEF.seek(_def))
|| _ret:='Nieprawidłowe wskazanie kartoteki dodatkowej.'

|? ~(_osoba<>null() & OSOBA.seek(_osoba))
|| _ret:=exec('error',_fml)

|| _webTerm:=app_info('web_sesid')<>'';
   {? (~_webTerm) & (_ws:=exec('mk_sel','kart_dod',_act_mod,_act_view,"exec('kart_dod_zb','kart_dod')",''))=''
   || _ret:='Utworzenie okna wertowania kartoteki dodatkowej "%1" nie powiodło się.' [KART_DEF.SYMBOL]

   || _symbol:=KART_DEF.SYMBOL;
      EDIT_VAR.KART_DEF==_symbol;
      KART_DOD.cntx_psh();
      KART_DOD.index('KART_DOD');
      KART_DOD.prefix(exec('ref_firma','ustawienia'),_def,OSOBA.ref());

      {? _webTerm
::       Zakładamy, że bieżąca formuła nie jest wywoływana jako pierwsza z dialogu. Oznacza to, że w bieżącej obsłudze
::       mogły być juz ustawione (poprzez web_params_set()) jakieś parametry. Aby je rozszerzyć funkcję
::       web_params_get() należy wywołać z parametrem 1.
      || web_params_set(
            exec('obj_ntab_set','#array',web_params_get(1),
               'KART_DEF_ref',KART_DEF.ref(),
               'KART_DOD_OSOBA',OSOBA.ref()
            )
         );
         _ws:=KART_DEF.WER+KART_DEF.CZYWART+_wsfx;

::       Pola
         KART_DOD.web_fld_init(_ws,,'label=%1,help=%1' [KART_DEF.OD],KART_DOD,'OD');
         KART_DOD.web_fld_init(_ws,,'label=%1,help=%1' [KART_DEF.DO],KART_DOD,'DO');
         KART_DOD.web_fld_init(_ws,,'label=%1,help=%1' [KART_DEF.KT],KART_DOD,'KT');
         KART_DOD.web_fld_init(_ws,,'label=%1,help=%1' [KART_DEF.OPIS],KART_DOD,'OPIS');

         {? KART_DEF.WER='KART' | KART_DEF.WER='KTOD'
         || KART_DOD.web_fld_init(_ws,,'label=%1,help=%1' [KART_DEF.KT+' - '+'kod'@],KART_DOD,'KT');
            KART_DOD.web_fld_init(_ws,,'label=%1,help=%1' [KART_DEF.KT+' - '+'opis'@],SKID,'KAT_OPIS')
         ?};

         {? KART_DEF.CZYWART='_'
         || KART_DOD.web_fld_init(_ws,,'label=%1,help=%1' [KART_DEF.WARTOSC],KART_DOD,'WARTOSC')
         ?};

         KART_DOD.web_win_init(_ws,,'title=%1: %2' [KART_DEF.NAZWA,OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE]);
         _before_select(_ws);
         KART_DOD.web_select(_ws,,,,_esc_form);
         _ret:=''

      || _we:=exec('mk_edit','kart_dod');
         _grp:=KART_DOD.grp_make(KART_DEF.NAZWA,"grp_edisp(OSOBA,'INFO')");
         KART_DOD.grp_edit(_grp,OSOBA,'INFO');
         KART_DOD.grp_splt(_grp,,'horizontal','kart_dod');
         KART_DOD.grp_sel(_grp,,_ws,,,,,,,,,,'maximized',,1);
         KART_DOD.win_sel(_grp);
         KART_DOD.win_edit(_we);
         _ret:=KART_DOD.select()
      ?};

      KART_DOD.cntx_pop();
      EDIT_VAR.KART_DEF==_symbol
   ?}
?};
OSOBA.cntx_pop();
KART_DEF.cntx_pop();
_ret


\kart_dod_zb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli KART_DOD z doklejonym oknem redagowania tabeli OSOBA);
::          - w ramach obszaru roboczego (okno wertowania tabeli KART_DOD jako składowa okna grupowego tabeli OSOBA).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=KART_DOD
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\select4cp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wertowanie wskazanej kartoteki dodatkowej dla bieżącej osoby.
::   WE: _a [STRING] - Akronim kartoteki dodatkowej.
::       _b [STRING] - Identyfikator czynności typu rejestracja.
::       _c [STRING] - Identyfikator czynności typu przeglądanie (opcjonalnie).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _kdef:=_a
|| FUN.error('"%1" - nieprawidłowy argument wywołania.\n%2'@ ['_a','\\select4cp/kart_dod.fml']);
   return()
?};

{? var_pres('_b')=type_of('')
|| _act_mod:=_b
|| FUN.error('"%1" - nieprawidłowy argument wywołania.\n%2'@ ['_b','\\select4cp/kart_dod.fml']);
   return()
?};

{? var_pres('_c')<=0
|| _act_view:=''
|? var_pres('_c')=type_of('')
|| _act_view:=_c
|| FUN.error('"%1" - nieprawidłowy argument wywołania.\n%2'@ ['_c','\\select4cp/kart_dod.fml']);
   return()
?};

{? (_def:=exec('kart_def','kart_dod',_kdef))=null()
:  Odnalezienie lub utworzenie kartoteki - ustawienie bieżącego rekordu w KART_DEF (ważne ze względu na tworzenie
:  okna wertowania i redagowania na podstawie "bieżącego" rekordu KART_DEF.).
|| FUN.emsg('Znalezienie definicji kartoteki dodatkowej "%1" nie powiodło się.'@ [_kdef]);
   return()
?};

{? (_ws:=exec('mk_sel','kart_dod',_act_mod,_act_view))=''
:  Sprawdzenie uprawnień.
|| FUN.emsg('Utworzenie okna wertowania kartoteki dodatkowej "%1" nie powiodło się.'@ [_kdef]);
   return()
?};

KART_DOD.cntx_psh();
KART_DOD.index('KART_DOD');
KART_DOD.prefix(exec('ref_firma','ustawienia'),_def,OSOBA.ref());
KART_DOD.win_sel(_ws);
KART_DOD.win_edit(exec('mk_edit','kart_dod'));
KART_DOD.select();
KART_DOD.cntx_pop();
~~


\kart_dod_web_wer_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed obsługą okienek wertowania dla tabeli KART_DOD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kart_def:=web_params_get().KART_DEF_ref;
KART_DEF.prefix();
KART_DEF.seek(_kart_def)


\web_def_2_kart_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła kopiuje wartości pól okna tymczasowego do pól bufora tabeli KART_DOD
::   WE: _a [ARRAY] - Tablica nazwana z polami okna i ich wartościami.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fld:=_a;

_name:=obj_ntab_names(_fld);
{! _lp:=1 .. obj_len(_name)
|! {? var_pres(_name[_lp],KART_DOD)>0
   || ($('KART_DOD.%1:=_a.%1' [_name[_lp]]))(_fld)
   ?}
!};
_fld


\kart_dod_kt_web_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła obsługi F3 dla pola "KART_DOD.KT" w oknie tymczasowym z polem.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? KART_DOD.web_cntx_load(1)=0
|| return(0)
?};
KART_DEF.cntx_psh();
KART_DEF.prefix();
_symbol:=KART_DOD.KART_DEF().SYMBOL;
SLO_TYP.cntx_psh();
SLO_TYP.index('SYMBOL');
SLO_TYP.prefix(_symbol,_symbol);
{? SLO_TYP.first()
|| SLO_KOD.cntx_psh();
   SLO_KOD.index('KOD');
   SLO_KOD.prefix(SLO_TYP.ref());
   _fld:=web_def_get();
   {? _fld.KT=''
   || SLO_KOD.first()
   || SLO_KOD.find_key(_fld.KT)
   ?};
:: Uwaga: funkcja web_top_def_fld_update() może aktualizować wartość pola tylko w oknie na wierzchu. Dlatego najpierw
:: musimy zamknąć okno wertowania słownika, z którego wybierana była wartość, a dopiero potem zaktualizować wartość
:: pola.
   web_params_set(
      'SLO_KOD_WEBWYB1_WYBIERZ_A',
         "  web_top_close(0);
            {? exec('exist','#record')
            || web_top_def_fld_update(1,1,SLO_KOD.KOD)
            ?}
         "
   );
   SLO_KOD.web_select('WEBWYB1',,1);
   SLO_KOD.cntx_pop()
?};
SLO_TYP.cntx_pop();
KART_DEF.cntx_pop();
~~


\kart_dod_kt_web_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła "Po redagowaniu" dla pola "KART_DOD.KT" w oknie tymczasowym z polem.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? KART_DOD.web_cntx_load(1)=0
|| return(0)
?};
KART_DEF.cntx_psh();
KART_DEF.prefix();
KART_DOD.KART_DEF();
_fld:=web_def_get();
exec('web_def_2_kart_dod','kart_dod',_fld);
:: Funkcja wywoływana poniżej zakłada prawidłowe wypełnienie bufora tabeli KART_DOD, stąd:
::    1. Przywrócenie (na początku bieżącej formuły) zapamiętanego konteksu.
::    2. Przepisanie wartości pól okna tymczasowego do bufora (formuła powyżej).
_fld.KAT_OPIS:=exec('kt_opis','kart_dod');
KART_DEF.cntx_pop();
web_def_update(,_fld);
1


\web_define
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła tworzy okno tymczasowe do wykorzystania pod webTerm-em. Wywoływana jest przez akcje Dołącz, Popraw.
::       Formuła zakłada istnienie parametru KART_DEF, w którym zapisany jest numer rekordu definicji kartoteki.
::   WE: [_a] [NUMBER] - Tryb modyfikacji danych:
::          0 - dołączanie (domyślnie);
::          1 - poprawianie.
::   WY: Identyfikator utworzonego okna lub ~~ w przypadku wystąpienia błędu.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a<>0;

_def:=~~;

web_params_set(_par:=web_params_get());

{? ~( obj_ntab(_par) &
      var_pres('KART_DEF_ref',_par)=type_of(null()) & _par.KART_DEF_ref<>null() & ref_tab(_par.KART_DEF_ref)=KART_DEF &
      var_pres('KART_DOD_OSOBA',_par)=type_of(null()) & _par.KART_DOD_OSOBA<>null() & ref_tab(_par.KART_DOD_OSOBA)=OSOBA
   )
|| return(_def)
?};

KART_DEF.cntx_psh();
KART_DEF.prefix();
{? KART_DEF.seek(_par.KART_DEF_ref)
|| {? _put
   || KART_DOD.get()
   || EDIT_VAR.KART_DEF:=KART_DEF.SYMBOL;
      KART_DOD.blank();
      KART_DOD.KART_DEF:=KART_DEF.ref();
      KART_DOD.OSOBA:=_par.KART_DOD_OSOBA
   ?};
   KART_DOD.web_cntx_save(1);

   _szer:=40;
   _def:=web_define();
   web_def_sep(_def,'Dane podstawowe'@);

   {? KART_DEF.WER='KART'
   || web_def_fld(_def,'OD',KART_DOD.OD,KART_DEF.OD,KART_DEF.OD,,,,'mark=%1' [$KART_DEF.ODW]);
      web_def_fld(_def,'DO',KART_DOD.DO,KART_DEF.DO,KART_DEF.DO,,,,'mark=%1' [$KART_DEF.DOW]);
      web_def_fld(_def,'KT',KART_DOD.KT,KART_DEF.KT,KART_DEF.KT+' - '+'kod'@,_szer-3,,,'mark=%1' [$KART_DEF.KTW]);
      web_def_fld(_def,'KAT_OPIS',exec('kt_opis','kart_dod'),'',KART_DEF.KT+' - '+'opis'@,_szer,,,'editable=0');
      web_def_fld_fml(_def,'KT','F3',"exec('kart_dod_kt_web_f3','kart_dod')");
      web_def_fld_fml(_def,'KT','AFTER_EDIT',"exec('kart_dod_kt_web_ae','kart_dod')")

   |? KART_DEF.WER='KTDO'
   || web_def_fld(_def,'OD',KART_DOD.OD,KART_DEF.OD,KART_DEF.OD,,,,'mark=%1' [$KART_DEF.ODW]);
      web_def_fld(_def,'KT',KART_DOD.KT,KART_DEF.KT,KART_DEF.KT+' - '+'kod'@,_szer-3,,,'mark=%1' [$KART_DEF.KTW]);
      web_def_fld(_def,'KAT_OPIS',exec('kt_opis','kart_dod'),'',KART_DEF.KT+' - '+'opis'@,_szer,,,'editable=0');
      web_def_fld_fml(_def,'KT','F3',"exec('kart_dod_kt_web_f3','kart_dod')");
      web_def_fld_fml(_def,'KT','AFTER_EDIT',"exec('kart_dod_kt_web_ae','kart_dod')")

   |? KART_DEF.WER='ODDO'
   || web_def_fld(_def,'OD',KART_DOD.OD,KART_DEF.OD,KART_DEF.OD,,,,'mark=%1' [$KART_DEF.ODW]);
      web_def_fld(_def,'DO',KART_DOD.DO,KART_DEF.DO,KART_DEF.DO,,,,'mark=%1' [$KART_DEF.DOW])
   ?};

   web_def_fld(_def,'OPIS',KART_DOD.OPIS,KART_DEF.OPIS,KART_DEF.OPIS,150,_szer,0,'mark=%1' [$KART_DEF.OPISW]);

   {? KART_DEF.CZYWART='_'
   || web_def_fld(_def,'WARTOSC',KART_DOD.WARTOSC,KART_DEF.WARTOSC,KART_DEF.WARTOSC,,_szer,2,
         'mark=%1' [$KART_DEF.WARTOSCW])
   ?};

   web_def_btn(_def,'OK','text=%1,icon=%2,key=F2' ['OK'@,exec('ok','#icon')]);
   web_def_btn(_def,'ANULUJ','text=%1,icon=%2,key=Esc' ['Anuluj'@,exec('anuluj','#icon')])

?};
KART_DEF.cntx_pop();

_def


\kart_dod_web_button_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła obsługi przycisków w oknie tymczasowym tabeli KART_DOD.
::   WE:  _a  [STRING] - Identyfikator wybranego przycisku.
::        _b  [ARRAY]  - Tablica nazwana z polami okna i ich wartościami.
::        _c  [STRING] - Akronim okna.
::       [_d] [NUMBER] - Czy popraw? [1/0*]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_btn:=_a;
::_arr:=_b;
:: !!! Błąd systemowy - brak wartości w tablicy.
_arr:=web_def_get();
_def:=_c;
_put:=var_pres('_d')=type_of(0) & _d;

{? _btn='OK' & KART_DOD.web_cntx_load(1)<>0
|| KART_DOD.KART_DEF();
    exec('web_def_2_kart_dod','kart_dod',_arr);
   _ret:=exec('kart_dod_ae','kart_dod');
   {? _ret=''
   || {? _put
      || KART_DOD.put()
      || KART_DOD.add()
      ?};
      KART_DOD.web_refresh(web_top_win(1))
::    Jak jest błąd, to nie zamykamy okna, tylko wracamy do niewypełnionego pola.
   || web_def_update(_def,_arr,_ret);
      return()
   ?}
?};
web_def_close()


\kart_dod_web_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Wspólna obsługa akcji "Dołącz" i "Popraw" w oknach wertowania @webTerm tabeli KART_DOD.
::   WE: [_a] - Tryb pracy:
::             0 - Dołącz [domyślnie].
::             1 - Popraw.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

_def:=exec('web_define','kart_dod',_put);
{? _def=~~
|| return()
?};

_ae:=$("exec('kart_dod_web_button_form','kart_dod',_a,_b,_c,"+$_put+")");

_kart:='Pozycja kartoteki dodatkowej'@;
_osoba:='';
web_params_set(_par:=web_params_get());
{? obj_ntab(_par)
|| {? var_pres('KART_DEF_ref',_par)=type_of(null()) & _par.KART_DEF_ref<>null()
   || KART_DEF.cntx_psh();
      KART_DEF.prefix();
      {? KART_DEF.seek(_par.KART_DEF_ref)
      || _kart:=KART_DEF.NAZWA
      ?};
      KART_DEF.cntx_pop()
   ?};
   {? var_pres('KART_DOD_OSOBA',_par)=type_of(null()) & _par.KART_DOD_OSOBA<>null()
   || OSOBA.cntx_psh();
      OSOBA.prefix();
      {? OSOBA.seek(_par.KART_DOD_OSOBA)
      || _osoba:=OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE
      ?};
      OSOBA.cntx_pop()
   ?}
?};
_tyt:={? _kart<>'' & _osoba<>'' || _kart+': '+_osoba || _kart+_osoba ?};

web_def_edit(_def,_ae,_tyt);
~~


\kart_dod_web_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Dołącz - po" w oknach wertowania tabeli KART_DOD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('kart_dod_web_edit','kart_dod',0)


\kart_dod_web_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Popraw - po" w oknach wertowania tabeli KART_DOD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('kart_dod_web_edit','kart_dod',1)


\kart_dod_web_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Usuń - po" w oknach wertowania tabeli KART_DOD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(web_params_get());
{? ~(exec('env_wt','poc') & exec('exist','#record'))
|| return()
?};

KART_DOD.web_cntx_save(1);
web_ask(
   "  {? ~_a
      || return()
      ?};
      {? exec('env_wt','poc') & KART_DOD.web_cntx_load(1)>0
      || {? KART_DOD.del(1,1)
         || KART_DOD.web_refresh()
         ?}
      ?}
   ",
   'Czy usunąć bieżący wiersz?'@,
   FUN.TYT
);
~~


\kart_dod_web_adnotacje_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Adnotacje - po" w oknach wertowania tabeli KART_DOD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(web_params_get());
{? ~(exec('env_wt','poc') & exec('exist','#record') & KART_DOD.memo_get(,'UWAGI'))
|| return()
?};

KART_DEF.cntx_psh();
KART_DEF.prefix();
KART_DOD.KART_DEF();
OSOBA.cntx_psh();
OSOBA.prefix();
KART_DOD.OSOBA();
_tyt:='%1: %2' [KART_DEF.NAZWA,OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE];
OSOBA.cntx_pop();
KART_DEF.cntx_pop();

_we:='WEBADN';
KART_DOD.web_ewin_init(_we,,'title=%1' [_tyt]);
KART_DOD.web_edit(_we,,,,
   "  {? _a='OK' & exec('exist','#record')
      || KART_DOD.memo_put(,'UWAGI');
         KART_DOD.web_refresh(web_top_win(1))
      ?};
      web_top_close(0)
   ");

~~


\kart_dod2bdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [23.25]
:: OPIS: Pozwala uzupełnić i przenieść dane dotyczące badań lekarskich z kartotek dodatkowych (KART_DOD)
::       do kartoteki badań lekarskich (BDO).
::   WE:
::   WY: _result [STRING] - treść błędu lub '' w przypadku powodzenia
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_query:='
   select OSOBA.NAZWISKO as "Nazwisko", OSOBA.PIERWSZE as "Imię",
          P.T as "Numer teczki", P.ZA as "Zatrudniony?", UD_SKL.SYMBOL as "Jednostka", CP.CP as "Charakter pracy",
          P.REFERENCE as "P.ref",
          KART_DOD.OD as "Od (KART_DOD)", KART_DOD.DO as "Ważne do (KART_DOD)", KART_DOD.KT as "Rodzaj",
          KART_DOD.OPIS as "Opis", KART_DOD.WARTOSC as "Koszt badania", KART_DOD.REFERENCE as "REF",
          KART_DEF.SYMBOL as "Symbol", space(150) as "Deskrypcja wyniku",
          space(9) as "Wynik orzeczenia", KART_DOD.OD as "Skierowanie (data)", KART_DOD.OD as "Orzeczenie (data)",
          to_date(\'0000/00/00\') as "Utrata zdolności (data)", KART_DOD.DO as "Następne badanie (data)",
          space(20) as "Nr orzeczenia", \'N\' as "Przenosić?", \'T\' as "Usuń KART_DOD",
          case
             when (select count(*) from BDO where BDO.P=P.REFERENCE and BDO.DTO=KART_DOD.OD and BDO.DTNB=KART_DOD.DO)>0
                then \'T\'
                else \'N\'
          end as "BDO istnieje?"
   from KART_DOD
   join KART_DEF using(KART_DOD.KART_DEF, KART_DEF.REFERENCE)
   join OSOBA using(KART_DOD.OSOBA, OSOBA.REFERENCE)
   left join P using(P.OSOBA, OSOBA.REFERENCE)
   join CP using(P.CP, CP.REFERENCE)
   join UD_SKL using(P.WYDZIAL, UD_SKL.REFERENCE)
   where KART_DOD.FIRMA=:_a and KART_DEF.SYMBOL=\':_b\'
   order by "Nazwisko","Imię","Od (KART_DOD)" desc
   ';
_LIST_ALL:=sql(_query,exec('ref_firma','ustawienia'),'BADANIE');
:: Lista dostępnych pracowników (uprawnienia):
_PDOST:=exec('dostepne_p','schemat','PKD','*');
_LIST:=sql('select * from :_a where :_a.P in (select :_b.REF from :_b)',_LIST_ALL,_PDOST);

{? _LIST.first()
|| _info:=
      'Zostanie wyświetlona lista badań lekarskich pobranych z kartotek dodatkowych. Należy zweryfikować, uzupełnić '
      'wygenerowane dane oraz zatwierdzić przeniesienie badań do kartoteki badań lekarskich.\n\n'
      'Czy kontynuować?'@;
   {? ~FUN.ask(_info)
   || _result:='Zrezygnowano z kontynuowania.'@
   ?}
|| {? _LIST_ALL.first()
   || _result:='Istnieją rekordy do przeniesienia. Brak uprawnień do pracowników spełniających warunki.'@
   || _result:='Brak pracowników spełniających warunki.'@
   ?}
?};
{? +_result
|| FUN.info(_result);
   return(_result)
?};

:: Formuły:
_popraw:=
   "_LIST:=cur_tab();
    {? _LIST.edit(""__CHK.record(cur_tab(),,'SKIEROWA','ORZECZEN','WYNIK')"")
    || _LIST.put()
    ?}";
_przenos:=
   "_LIST:=cur_tab();
    {? _LIST.PRZENOSI='T'
    || _LIST.PRZENOSI:='N'
    || _LIST.PRZENOSI:='T'
    ?};
    _LIST.put()";
:: Znacznik usuwania zmieniamy na wszystkich rekordach pochodzących z jednego KART_DOD:
_usun:=
   "_LIST:=cur_tab();
    _zmienPowiazane:=
      (~_LIST.sel_size()) |
      ((sql('select REF from :_a as SEL where SEL.X_3=\\':_b\\'',_LIST.sel_aget(),_LIST.REF).size())<=1);
    {? _zmienPowiazane
    || _val:={? _LIST.USUŃ='T' || 'N' || 'T' ?};
       _kRef:=_LIST.REF;
       _LIST.cntx_psh();
       _LIST.prefix();
       {? _LIST.first()
       || {!
          |? {? _LIST.REF=_kRef
             || _LIST.USUŃ:=_val;
                _LIST.put()
             ?};
             _LIST.next()
          !}
       ?};
       _LIST.cntx_pop()
    ?}";
_wynikF3:=
   "_LIST:=cur_tab();
    S_ZUS.cntx_psh();
    _wsZUS:=S_ZUS.mk_sel('Kody w dokumentach ubezpieczeniowych'@,'N',0,'#s_zuskart_dod',1,1,32,0,'U','T',0,0,0,
                         'html_maximized','','on','lumen');
    S_ZUS.win_fld(_wsZUS,S_ZUS,'KOD',,,8,0,0,'',0,'Symbol / kod'@,,);
    S_ZUS.win_fld(_wsZUS,S_ZUS,'OPIS',,,60,5,0,'',0,'Krótki opis'@,,);
    S_ZUS.win_act(_wsZUS,0,'Szukaj','','','',,,0,0,,,'',0,'mobile=1,target=window');
    S_ZUS.win_act(_wsZUS,0,'Formuła','Wybierz'@,,'Wybierz'@,""sel_exit()"",,1);
    S_ZUS.win_sel(_wsZUS);
    S_ZUS.index('S_ZUS');
    S_ZUS.prefix('BADLEKO',);
    S_ZUS.select();
    _LIST.WYNIK:=S_ZUS.KOD;
    _LIST.DESKRYPC:=S_ZUS.memo_txt(,1,'OPIS');
    win_disp();
    S_ZUS.cntx_pop()
   ";
_uzupelnij:=
   "_LIST:=cur_tab();
    {? ~+(form(_LIST.WYNIK))
    || _LIST.WYNIK:='21';
       _LIST.put()
    ?};
    1";
_deskrypc_bd:=
   "_LIST:=cur_tab();
    _txt:='';
    {? +(form(_LIST.WYNIK))
    || S_ZUS.cntx_psh();
       S_ZUS.index('S_ZUS');
       S_ZUS.prefix('BADLEKO',_LIST.WYNIK,);
       {? S_ZUS.first()
       || _txt:=S_ZUS.memo_txt(,1,'OPIS')
       ?};
       S_ZUS.cntx_pop()
    ?};
    _LIST.DESKRYPC:=_txt;
    +_txt";
_eksport:=
   "_LIST:=cur_tab();
    _ind:='';
    {? FUN.ask('Czy wyeksportować tylko zaznaczone do przeniesienia?'@)
    || _LIST.cntx_psh();
       _ind:=_LIST.ndx_tmp(,1,'PRZENOSI',,0);
       _LIST.index(_ind);
       _LIST.prefix('T')
    ?};
    _folder:=fmk_tmp_dir(0).get_path();
    _plik:=_folder+'\\\\badania_lek.csv';
    _exp:=_LIST.export(
             _plik,,,'UTF-8,header,nopth',,
             'PRZENOSI',,1,,
             'NAZWISKO',,2,,
             'IMIĘ',,3,,
             'NUMER',,4,,
             'WYNIK',,5,,
             'SKIEROWA',,6,1,
             'ORZECZEN',,7,1,
             'NR',,8,,
             'UTRATA',,9,1,
             'NASTĘPNE',,10,1,
             'BDO',,11,,
             'ZATRUDNI',,12,,
             'JEDNOSTK',,13,,
             'CHARAKTE',,14,,
             'P',,15,,
             'OD',,16,,
             'WAŻNE',,17,,
             'RODZAJ',,18,,
             'OPIS',,19,,
             'KOSZT',,20,,
             'REF',,21,,
             'SYMBOL',,22,,
             'USUŃ',,23,
             );
    {? +_ind
    || _LIST.ndx_drop(_ind);
       _LIST.cntx_pop()
    ?};
    {? _exp
    || _zapis:=dlg_save(_plik);
       {? type_of(_zapis)=type_of('')
       || {? +_zapis
          || _eksp:='Wyeksportowano do: %1'@[_zapis]
          || _eksp:='Użytkownik zrezygnował z zapisania pliku'@
          ?}
       || _eksp:='Błąd podczas zapisywania pliku'@
       ?}
    || _eksp:='Eksport do pliku zakończył się niepowodzeniem.'@
    ?};
    FUN.info(_eksp)";

:: Okno redagowania:
_we:=_LIST.mk_edit('Badanie lekarskie'@,0,'#bdokartdod',1,1,'html_maximized','','lumen');
_LIST.win_esep(_we,'Skierowanie'@);
_LIST.win_efld(_we,_LIST,'SKIEROWA',,,10,0,0,'Data skierowania'@,0,'Data skierowania na badania'@);
_LIST.efld_opt(_we,'mark=1',_LIST,'SKIEROWA');
_LIST.win_efld(_we,_LIST,'RODZAJ',,,13,0,1,'Typ badania'@,0,'Typ badania (wstępne/okresowe/kontrolne)'@);
_LIST.win_esep(_we,'Orzeczenie'@);
_LIST.win_efld(_we,_LIST,'NR',,,40,0,0,'Numer orzeczenia'@,0,'Numer orzeczenia lekarskiego'@);
_LIST.win_efld(_we,_LIST,'ORZECZEN',,,10,0,0,'Data orzeczenia'@,0,'Data orzeczenie lekarskiego'@);
_LIST.efld_opt(_we,'mark=1',_LIST,'ORZECZEN');
_LIST.win_efld(_we,_LIST,'WYNIK',,,10,0,0,'Wynik orzeczenia'@,0,'Wynik orzeczenia lekarskiego - kod'@,,'F3_button=1,');
_LIST.fld_fml('WYNIK','F3',_wynikF3);
_LIST.efld_opt(_we,'mark=1',_LIST,'WYNIK');
_LIST.win_efld(_we,_LIST,'DESKRYPC',,,40,0,1,'',1,'Wynik orzeczenia lekarskiego - opis'@);
_LIST.win_efld(_we,_LIST,'UTRATA',,,10,0,0,'Data utraty zdolności'@,0,
               'Data utraty zdolności wykonywania dotychczasowej pracy'@);
_LIST.win_efld(_we,_LIST,'NASTĘPNE',,,10,0,0,'Data następnego badania'@,0,'Data następnego badania'@);
exec('ok_esc','#window',_LIST,_we,,,,,,,exec('text_red_ok','#window'));
_LIST.win_edit(_we);

:: Okno werotwania:
_tytul:='Lista badań lekarskich, które można przenieść do kartoteki badań lekarskich'@;
_ws:=_LIST.mk_sel(_tytul,,,'#placa_oddeleg',,,,,'U');
_LIST.win_fld(_ws,,'PRZENOSI',,,-3,,,'Przenieś'@,,'Czy przenośić dane do badań lekarskich?'@,2,,"'T'","'N'");
_LIST.win_fld(_ws,,'NAZWISKO',,,25,,,'Nazwisko'@);
_LIST.win_fld(_ws,,'IMIĘ',,,20,,,'Imię'@);
_LIST.win_fld(_ws,,'NUMER',,,MS.fld_len(P,'T'),,,'Numer teczki'@,,'Numer teczki'@);
_LIST.fld_fml('NUMER','DISPLAY_FORMAT',"exec('alignment_right','#field')");
_LIST.win_fld(_ws,,'JEDNOSTK',,,4,,,'Jednostka organizacyjna'@,,'Symbol jednostki organizacyjnej'@);
_LIST.win_fld(_ws,,'WYNIK',,,9,,,'Wynik'@,,'Wynik orzeczenia - symbol'@);
_LIST.win_fld(_ws,,'SKIEROWA',,,-10,,,'Data skierowania'@,,'Data skierowania'@);
_LIST.win_fld(_ws,,'ORZECZEN',,,-10,,,'Data orzeczenia'@,,'Data orzeczenia lekarskiego'@);
_LIST.win_fld(_ws,,'NR',,,-10,,,'Numer orzeczenia'@,,'Numer orzeczenia lekarskiego'@);
_LIST.win_fld(_ws,,'UTRATA',,,-10,,,'Data utraty zdolności'@,,'Data utraty zdolności'@);
_LIST.win_fld(_ws,,'NASTĘPNE',,,-10,,,'Data następnego badania'@,,'Data następnego badania'@);
_LIST.win_fld(_ws,,'BDO',,,-3,,,'BDO'@,,'Czy istnieje zapis BDO o tożsamych datach?'@,2,,"'T'","'N'");
_LIST.win_fld(_ws,,'USUŃ',,,-3,,,'Usuń KART_DOD'@,,
              'Czy po przeniesieniu usunąć powiązany zapis w kartotekach dodatkowych?'@,2,,"'T'","'N'");
_LIST.win_act(_ws,0,'Formuła','Popraw'@@,,'Popraw wygenerowane dane'@,_popraw);
_LIST.win_btn(_ws,'text=%1,btn_label_align=center,panel=right,align=begin'['Popraw'@],'menu:P');
_LIST.win_act(_ws,0,'Formuła','Zmień p&rzenoszenie'@@,,'Zmień znacznik przeniesienia'@,_przenos,,,1);
_LIST.win_btn(_ws,'text=%1,btn_label_align=center,panel=right,align=begin'['Zmień p&rzenoszenie'@],'menu:R');
_LIST.win_act(_ws,0,'Formuła','Z&mień usuwanie'@@,,'Zmień znacznik usuwania'@,_usun,,,1);
_LIST.win_btn(_ws,'text=%1,btn_label_align=center,panel=right,align=begin'['Z&mień usuwanie'@],'menu:M');
_LIST.win_act(_ws,0,'Formuła','U&zupełnij wynik'@@,,'Uzupełnij wybrane wynikiem "21"'@,_uzupelnij,,,1);
_LIST.win_btn(_ws,'text=%1,btn_label_align=center,panel=right,align=begin'['U&zupełnij wynik'@],'menu:Z');
_LIST.win_act(_ws,0,'Formuła','Eksport do CSV'@@,,'Eksport listy do pliku CSV'@,_eksport);
_LIST.win_btn(_ws,'text=%1,btn_label_align=center,panel=right,align=begin'['Eksport do CSV'@],'menu:E');
_LIST.win_act(_ws,,'Formuła','Dalej'@@,,'Rozpoczyna wprowadzanie danych'@,,"sel_exit()",,,,,,,'target=window');
_LIST.win_act(_ws,0,'Kolejność');
_LIST.win_btn(_ws,'text=%1,panel=bottom,align=end'['Dalej'@],'menu:D');
_LIST.win_sel(_ws);

_d0:=date(0,0,0);
_LIST.DESKRYPC:='';
_LIST.fld_fml('DESKRYPC','BEFORE_DISPLAY',_deskrypc_bd);
_question:='Kontunuacja spowoduje utworzenie zapisów w kartotece badań lekarskich '
           '(BDO) oraz usunięcie zaznaczonych zapisów z kartotek dodatkowych (KART_DOD) '
           'na podstawie wprowadzonych danych. Do badań lekarskich zostaną domyślnie przypisane wszystkie stanowiska '
           'pracownika.  \nCzy na pewno kontynuować?'@;
_ind:=_LIST.ndx_tmp(,1,'PRZENOSI',,0,'REF',,,'NAZWISKO',,,'IMIĘ',,,'OD',,);
_ind2:=_LIST.ndx_tmp(,1,'NAZWISKO',,,'IMIĘ',,,'OD',,,'REF',,);
{!
|? _again:=_err:=_note:=0;
   _allP:=1;
   _txt:='';
   KOMM.init(,,'Komunikaty przenoszenia badań lekarskich'@);
   _LIST.index(_ind2);
   _LIST.prefix();
   {? _LIST.select() & (_again | FUN.ask(_question))
   || _LIST.index(_ind);
      _LIST.prefix('T');
      {? _LIST.first()
      || {!
::       Sprawdzenie czy nie występują braki lub błędy w kluczowych polach:
         |? {? _LIST.SKIEROWA=_d0
            || _txt:='Data skierowania musi być wypełniona.'@
            |? _LIST.ORZECZEN=_d0
            || _txt:='Data orzeczenia musi być wypełniona.'@
            |? ',21,'*',%1,'[_LIST.WYNIK] & _LIST.NASTĘPNE=_d0
            || _txt:='Nie wypełniono daty następnego badania.'@
            |? ',23,'*',%1,'[_LIST.WYNIK] & _LIST.UTRATA=_d0
            || _txt:='Nie wypełniono daty utraty zdolności.'@
            |? ~+_LIST.RODZAJ |
               exec('FindInSet','#table','SLO_KOD','KOD',_LIST.RODZAJ,exec('slo_typ','ext_slo','BADLEKT'),,0)=null()
            || _txt:='Brak podanego typu badania w słowniku.'@
            |? ~+_LIST.WYNIK | exec('FindInSet','#table','S_ZUS','S_ZUS',_LIST.WYNIK,'BADLEKO',,1)=null()
            || _txt:='Brak podanego wyniku orzeczenia w słowniku.'@
            ?};
            {? +_txt
            || KOMM.set_root('Błędy'@);
               KOMM.add('%1 %2 %3 %4: %5'[_LIST.NAZWISKO, _LIST.IMIĘ, _LIST.NUMER, _LIST.JEDNOSTK, _txt]);
               _err:=1
            ?};
::          Odpisanie informacji o rekordach, które mają potencjalne pokrycie w BDO (już istnieją w BDO):
            {? _LIST.BDO='T'
            || KOMM.set_root('Uwagi'@);
               KOMM.add('%1 %2 %3 %4: %5'[_LIST.NAZWISKO, _LIST.IMIĘ, _LIST.NUMER, _LIST.JEDNOSTK,
                           'Istnieje już zapis w badaniach lekarskich o tożsamych datach.'@]);
               _note:=1
            ?};
::          Sprawdzenie czy zaznaczono do przeniesienia dla wszystkich pracowników osoby. KART_DOD było na osobę,
::          a BDO jest na pracownika, gdyby przeniesiono tylko dla części pracowników i skasowano KART_DOD to dla tych
::          nieprzeniesionych pracowników informacja zostanie utracona (jeśli zaznaczono usuwanie):
            {? _LIST.USUŃ='T'
            || _LIST.cntx_psh();
               _LIST.prefix();
               _allP:=~(_LIST.find_tab(,'REF',,'=',_LIST.REF,'PRZENOSI',,'=','N'));
               _LIST.cntx_pop();
               {? ~_allP
               || KOMM.set_root('Uwagi'@);
                  KOMM.add('%1 %2 %3 %4: %5'[_LIST.NAZWISKO, _LIST.IMIĘ, _LIST.NUMER, _LIST.JEDNOSTK,
                              'Istnieje niezaznaczony do przeniesienia rekord (współpracownik) powiązany '
                              'z tym samym rekordem w kartotekach dodatkowych.'@]);
                  _note:=1
::             Dodatkowo sprawdzam czy rekord związany z danym KART_DOD nie występuje na liście wszystkich, a na mojej
::             go nie ma (czyli nie mam uprawnień):
               || _allP:=~((sql('select :_a.P from :_a where :_a.REF=\':_c\' and :_a.P not in '
                                '(select :_b.P from :_b where :_b.REF=\':_c\')',_LIST_ALL,_LIST,_LIST.REF)).size());
                  {? ~_allP
                  || KOMM.set_root('Uwagi'@);
                     KOMM.add('%1 %2 %3 %4: %5'[_LIST.NAZWISKO, _LIST.IMIĘ, _LIST.NUMER, _LIST.JEDNOSTK,
                                 'Istnieje niezaznaczony do przeniesienia rekord (brak uprawnień do '
                                 'współpracownika) powiązany z tym samym rekordem w kartotekach dodatkowych.'@]);
                     _note:=1
                  ?}
               ?}
            ?};

            _LIST.next()
         !};

         {? KOMM.get_size()
         || KOMM.select()
         ?};

         {? _err
         || _again:=FUN.ask('%1\n%2'['Wystąpiły błędy wypelnienia danych.'@,'Czy powrócić do listy?'@]);
            {? ~_again
            || _result:='Zrezygnowano z kontynuowania.'@
            ?}
         || {? ~_note |
               FUN.ask('%1\n%2\n%3'['Wystąpiły uwagi.'@,{? _allP || '' || 'Po kontynuacji nie będzie możliwości '
                                    'ponownego wygenerowania zapisu dla niezaznaczonych współpracowników.'@ ?},
                                    'Czy kontynuować przenoszenie?'@])
            || do();
               BDO.cntx_psh();
               BDO.prefix();
               P.cntx_psh();
               P.prefix();
               KART_DOD.cntx_psh();
               KART_DOD.prefix();
               {? ~_LIST.first() || undo() ?};
               {!
               |? BDO.blank();
                  {? P.seek(_LIST.P)
                  || BDO.P:=P.ref()
                  || undo()
                  ?};
                  {? KART_DOD.seek(_LIST.REF)
                  || _adnotacje:=KART_DOD.memo_txt(,1,'UWAGI');
                     {? KART_DOD.WARTOSC<>0
                     || _adnotacje:='%1: %2\n%3'['Koszt'@,$KART_DOD.WARTOSC,_adnotacje]
                     ?}
                  || undo()
                  ?};
                  BDO.DTS:=_LIST.SKIEROWA;
                  BDO.NRO:=_LIST.NR;
                  BDO.DTO:=_LIST.ORZECZEN;
                  BDO.TYP:=exec('FindInSet','#table','SLO_KOD','KOD',_LIST.RODZAJ,exec('slo_typ','ext_slo','BADLEKT'),,
                                0);
                  BDO.WYNIK:=exec('FindInSet','#table','S_ZUS','S_ZUS',_LIST.WYNIK,'BADLEKO',,1);
                  {? BDO.TYP=null() | BDO.WYNIK=null() || undo() ?};
                  BDO.DTNB:=_LIST.NASTĘPNE;
                  BDO.DTUZ:=_LIST.UTRATA;
                  {? BDO.add()
                  || {? +_adnotacje
                     || BDO.memo_set(_adnotacje,'ADNOT');
                        BDO.memo_put(,'ADNOT')
                     ?};
                     _work:=-PAR_SKID.get(180)='t';
                     {? ~_work
                     || F_ZATR.cntx_psh();
                        _work:=-P.F_ZATR().DOCELOWA='n';
                        F_ZATR.cntx_pop()
                     ?};
                     _sql:=
                        'select distinct STN.ST '+
                        'from '+{? _work || '@H' || 'H' ?}+' join STN using(H.ST,STN.REFERENCE) '+
                        'where H.P=:_a '+
                        'order by 1';
                     _STN:=sql(_sql,P.ref());
                     {? _STN.first()
                     || BDS.cntx_psh();
                        BDS.index('ST');
                        BDS.prefix();
                        STN.cntx_psh();
                        STN.index('STANONAZ');
                        STN.prefix();
                        {!
                        |? {? STN.find_key(_STN.ST,)
                           || BDS.blank();
                              BDS.BDO:=BDO.ref();
                              BDS.STN:=STN.ref();
                              BDS.add()
                           ?};

                           _STN.next()
                        !};
                        STN.cntx_pop();
                        BDS.cntx_pop()
                     ?};
                     obj_del(_STN)
                  ?};

                  _LIST.next()
               !};
::             Usuwanie zapisów z KART_DOD:
               {? ~_LIST.first() || undo() ?};
               _kRef:='';
               {!
               |? {? _kRef<>_LIST.REF
                  || _kRef:=_LIST.REF;
                     {? _LIST.USUŃ='T'
                     || {? ~KART_DOD.seek(_LIST.REF) | ~KART_DOD.del(1,1)
                        || undo()
                        ?}
                     ?}
                  ?};

                  _LIST.next()
               !};
               KART_DOD.cntx_pop();
               P.cntx_pop();
               BDO.cntx_pop();
               {? ~end()
               || _result:='Wystąpiły błędy przetwarzania w transakcji.'@
               ?}
            || _again:=1
            ?}
         ?}
      || _again:=FUN.ask('Nie wybrano żadnego rekordu do przeniesienia.\nCzy powrócić do listy?'@);
         {? ~_again
         || _result:='Zrezygnowano z kontynuowania.'@
         ?}
      ?}
   ?};

   _again
!};
_LIST.ndx_drop();
{? +_result || FUN.emsg(_result) ?};

_result

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:29 d79b1772d19c534ff005c2d306d51598c410a881a11085977b00ccd703ab7482e911845e7e6b3ba3e454e7c2678807e920bfea7dc8b9a1ea234800393b3aa4fab88fb076fc50d361fc702da281a1242c97a8ca97ba7c2ddafc3db9041035ee5719e84efa3196b118eafd939f63683e387c019d6e85e90c91c01ecd3a202cad64
