:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_wrd.fml [12.51]
:: Utworzony: 2019/03/27
:: Autor: jaws
:: Systemy: PPK
::======================================================================================================================
:: Zawartość: Formuły odpowiedzialne za obsługę słownika rodzajów wniosków.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed dołączeniem lub poprawieniem wiersza tabeli PPK_WRD.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
{? PPK_WRD.RAP_ZEW<>'T'
|| PPK_WRD.KOD:=''
?};
1


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli PPK_WRD.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_wrd')


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli PPK_WRD.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_wrd')


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli PPK_WRD.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',PPK_WST,'UNIQUE',PPK_WRD.ref())


\xxx_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed edycją pól tabeli PPK_WRD
::   WE:
::   WY: 0/1 - pole zablokowane/dostępne do edycji
::----------------------------------------------------------------------------------------------------------------------
PPK_WRD.SYSTEM<>'T'


\zew_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji pola RAP_ZEW tabeli PPK_WRD
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
PPK_WRD.efld_opt('RED','enable=%1,mark=%1'[$(PPK_WRD.RAP_ZEW='T')],,'KOD')


\kod_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed wyświetleniem wartości pola KOD tabeli PPK_WRD
::   WE:
::   WY: 0/1 - zawartość ukryta/widoczna
::----------------------------------------------------------------------------------------------------------------------
{? exec('xxx_be','ppk_wrd')
|| PPK_WRD.RAP_ZEW='T'
?}


\kod_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed wyświetleniem wartości pola KOD tabeli PPK_WRD
::   WE:
::   WY: 0/1 - zawartość ukryta/widoczna
::----------------------------------------------------------------------------------------------------------------------
PPK_WRD.efld_opt('RED','enable=%1,mark=%1'[$(PPK_WRD.RAP_ZEW='T')],,'KOD')


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Udostępnia zawartość słownika rodzajów wniosków.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: kontekst przeglądania
VAR_DEL.delete('__CTX');
_ctx:="
   _obj:=obj_new('KEY','REF');
   _obj.KEY:='SYMBOL';
   _obj.REF:=null;
   _obj
";
__CTX:=obj_new(2);
__CTX[1]:=_ctx();
__CTX[2]:=_ctx();

:: tryb wyświetlania okienek
_mode:='maximized_with_title';
:: po odświeżeniu rodzajów wniosków
_wrd_ar:="grp_disp(PPK_WST,'WER',1,1)";
:: po odświeżeniu struktury wniosku
_wst_ar:="
   _aid:='';
   {? (PPK_WRD.f_active()<>0 & PPK_WRD.f_size()=0) | PPK_WRD.size()=0
   || _aid:=':D'
   |? PPK_WRD.SYSTEM='T'
   || _aid:='DPU:D'
   ?};
   PPK_WST.actions('WER',_aid,,1)
";
:: przed obsługą struktury wniosku
_wst_bs:="
   {? _a=0
   || PPK_WST.prefix(PPK_WRD.ref())
   ?}
";

:: panel zarządzania rodzajami wniosków
_wnd:=PPK_WRD.grp_make('Rodzaje wniosków'@,
:: przed otwarciem
   "  PPK_WST.cntx_psh();
      PPK_WST.index('RN');
      1
   ",
:: identyfikator
   '#ppk_wrd_grp',,,
:: podczas zamykania
   "  PPK_WST.cntx_pop();
      1
   "
);
:: lista rodzajów wniosków dla uczestnika
PPK_WRD.grp_sel(_wnd,PPK_WRD,'WER','Uczestnik'@,
:: po odświeżeniu
   _wrd_ar,,,
:: wysokość
   10,
:: przed obsługą
   "  PPK_WRD.fld_fml('RODZAJ','BLANK',$('\\'U\\''));
      PPK_WRD.index(__CTX[1].KEY);
      PPK_WRD.prefix('U');
      PPK_WRD.seek(__CTX[1].REF)
   ",
:: po obsłudze
   "  __CTX[1].KEY:=PPK_WRD.index('?');
      __CTX[1].REF:=PPK_WRD.ref()
   ",,,
:: tryb
   _mode
);
PPK_WRD.tab_splt(_wnd,,'horizontal','bottom',',66%');
PPK_WRD.grp_sel(_wnd,PPK_WST,'WER',,
:: po odświeżeniu
   _wst_ar,,,
:: wysokość
   6,
:: przed obsługą
   _wst_bs,,,,
:: tryb
   _mode
);
:: lista rodzajów wniosków dla osoby
PPK_WRD.grp_sel(_wnd,PPK_WRD,'WER','Osoba'@,
:: po odświeżeniu
   _wrd_ar,,,
:: wysokość
   10,
:: przed obsługą
   "  PPK_WRD.fld_fml('RODZAJ','BLANK',$('\\'O\\''));
      PPK_WRD.index(__CTX[2].KEY);
      PPK_WRD.prefix('O');
      PPK_WRD.seek(__CTX[2].REF)
   ",
:: po obsłudze
   "  __CTX[2].KEY:=PPK_WRD.index('?');
      __CTX[2].REF:=PPK_WRD.ref()
   ",,,
:: tryb
   _mode
);
PPK_WRD.tab_splt(_wnd,,'horizontal','bottom',',66%');
PPK_WRD.grp_sel(_wnd,PPK_WST,'WER',,
:: po odświeżeniu
   _wst_ar,,,
:: wysokość
   6,
:: przed obsługą
   _wst_bs,,,,
:: tryb
   _mode
);

:: udostępnij dane
PPK_WRD.cntx_psh();
PPK_WRD.index('SYMBOL');
PPK_WRD.win_sel(_wnd);
PPK_WRD.select();
PPK_WRD.cntx_pop();

:: porządki
PPK_WRD.fld_fml('RODZAJ','BLANK',"*");
VAR_DEL.delete('__CTX');
PPK_WRD.win_del(_wnd);
~~


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wskazanie aktualnego rodzaju wniosku.
::   WE:
::   WY: Wskazanie wiersza tabeli PPK_WRD
::----------------------------------------------------------------------------------------------------------------------
PPK_WRD.ref()


\usu_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed usunięciem wiersza tabeli PPK_WRD.
::   WE:
::   WY: 0/1 - akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
{? PPK_WRD.SYSTEM='T'
|| FUN.emsg('Zapis systemowy nie może być usunięty.'@);
   0
|| 1
?}


\rek_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji wiersza tabeli PPK_WRD.
::   WE:
::   WY: 1 w przypadku gdy rekord jest poprawny, akronim wymaganego pola lub 0 gdy doszło do powielenia klucza.
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.table(PPK_WRD,-menu_txt()='popraw',,'SYMBOL','OPIS');
{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & _chk=0)
|| return(_chk)
?};
{? PPK_WRD.RAP_ZEW='T'
|| __CHK.record(PPK_WRD,,'KOD')
|| 1
?}


\dane_sys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Uzupełnia listę rodzajów wniosków.
::   WE:
::   WY: ilość dodanych wniosków i deklaracji.
::----------------------------------------------------------------------------------------------------------------------
_add:=0;
:: <DEKLARACJE UCZESTNIKA PPK>
_ref:=exec('dodaj','ppk_wrd','U','AWW','Automatyczne wznowienie wpłat','UCZ_WZNOWIENIE_4','N');
{? _ref<>null
|| exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(710));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(711));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(712));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(713));
   _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','U','WODW','Wniosek o dokonywanie wpłat','UCZ_WZNOWIENIE','N');
{? _ref<>null
|| exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(710));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(711));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(712));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(713));
   _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','U','DRZW','Deklaracja rezygnacji z wpłat','UCZ_REZYGNACJA','T');
{? _ref<>null
|| exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(710),'T');
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(711),'T');
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(712),'T');
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(713),'T');
   _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','U','DWWP','Deklaracja wysokości wpłaty podstawowej','UCZ_ZMIANA_SKŁADKI_POD','T');
{? _ref<>null
|| exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(712),,'T');
   _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','U','DWWD','Deklaracja wysokości wpłaty dodatkowej','UCZ_ZMIANA_SKŁADKI_DOD','N');
{? _ref<>null
|| exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(713),,'T');
   _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','U','DRWD','Deklaracja rezygnacji z wpłaty dodatkowej','UCZ_ZMIANA_SKŁADKI_DOD','N');
{? _ref<>null
|| exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(713),,'T');
   _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','U','DWT','Deklaracja wypłaty transferowej','UCZ_WYPŁATA_TRANSFEROWA','N');
{? _ref<>null
|| _add+=1
?};
_ref:=exec('dodaj','ppk_wrd','U','DWWT','Deklaracja wstrzymania wypłaty transferowej',,'N');
{? _ref<>null
|| _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','O','DRZW','Deklaracja rezygnacji z wpłat','UCZ_REZYGNACJA','T');
{? _ref<>null
|| exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(710),'T');
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(711),'T');
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(712),'T');
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(713),'T');
   _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','U','DOWU25','Deklaracja opłacania wpłat uczestnika art. 25',,'N','T');
:: </DEKLARACJE UCZESTNIKA PPK>

:: <WNIOSKI SYSTEMOWE>
_ref:=exec('dodaj','ppk_wrd','U','WS60','Wypłata środków po 60. roku życia',,'T');
{? _ref<>null
|| exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(710),'T');
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(711),'T');
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(712),'T');
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(713),'T');
   _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','U','WB25B','Blokada wpłat na podstawie art. 25',,'N','N');

_ref:=exec('dodaj','ppk_wrd','U','WB25W','Wznowienie wpłat na podstawie art. 25',,'N','N');
:: </WNIOSKI SYSTEMOWE>

_ref:=exec('dodaj','ppk_wrd','O','WOU','Wniosek o uczestnictwo',,'T');
{? _ref<>null
|| exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(710));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(711));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(712));
   _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','O','AWW','Automatyczne wznowienie wpłat','UCZ_WZNOWIENIE_4','N');
{? _ref<>null
|| exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(710));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(711));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(712));
   exec('dodaj','ppk_wst',_ref,__RUB.sys_kod(713));
   _add+=1
?};

_ref:=exec('dodaj','ppk_wrd','U','ZWZU','Zakończenie współpracy z uczestnikiem',,'N','N');
{? _ref<>null
|| _add+=1
?};

_opis:='Deklaracja wypłaty trans.-zmiana zarządzającego';
_ref:=exec('dodaj','ppk_wrd','U','DWP',_opis,'UCZ_WYPŁATA_TRANSFEROWA','N','N');
{? _ref<>null
|| _add+=1
?};

_add


\dodaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Tworzy zapis w tabeli PPK_WRD.
::   WE: _a STRING - rodzaj: U-uczestnik, O-osoba
::       _b STRING - symbol
::       _c STRING - opis
::       _d STRING - kod w dokumentach
::       _e [STRING] - wymagana weryfikacja [T/N] (domyślnie N)
::   WY: wskazanie utworzonego/istniejącego zapisu lub null w przypadku błędu
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_rodzaj:=_a;
_symbol:=_b;
_opis:=_c;
_kod:={? var_pres('_d')=type_of('') & _d<>'' || _d || '' ?};
_wer_wym:={? var_pres('_e')=type_of('') & _e<>'' & 'TN'*_e<>0 || _e || 'N' ?};

_ref:=null;
PPK_WRD.cntx_psh();
PPK_WRD.index('SYMBOL');
PPK_WRD.prefix(_rodzaj);
{? PPK_WRD.find_tab(0,'SYMBOL',,'=',_symbol)
|| _ref:=PPK_WRD.ref();
   {? PPK_WRD.SYSTEM='T'
   || _mod:=0;
      {? PPK_WRD.OPIS<>_opis
      || PPK_WRD.OPIS:=_opis;
         _mod+=1
      ?};
      {? PPK_WRD.KOD<>_kod
      || PPK_WRD.RAP_ZEW:={? _kod<>'' || 'T' || 'N' ?};
         PPK_WRD.KOD:=_kod;
         _mod+=1
      ?};
      {? PPK_WRD.WER_WYM<>_wer_wym
      || PPK_WRD.WER_WYM:=_wer_wym;
         _mod+=1
      ?};
      {? _mod<>0
      || PPK_WRD.put()
      ?}
   ?}
|| PPK_WRD.blank(1);
   PPK_WRD.RODZAJ:=_rodzaj;
   PPK_WRD.SYMBOL:=_symbol;
   PPK_WRD.OPIS:=_opis;
   PPK_WRD.RAP_ZEW:={? _kod<>'' || 'T' || 'N' ?};
   PPK_WRD.KOD:=_kod;
   PPK_WRD.WER_WYM:=_wer_wym;
   PPK_WRD.SYSTEM:='T';
   {? PPK_WRD.add()
   || _ref:=PPK_WRD.ref()
   ?}
?};
PPK_WRD.cntx_pop();
_ref


\szukaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Zwraca wskazanie na rekord rodzaju wniosku
::   WE: _a [STRING] - rodzaj wniosku (O - osoba, U - uczestnik)
::       _b [STRING] - unikalny symbol wniosku
::   WY: null/ref
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
_rodzaj:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
_symbol:={? var_pres('_b')=type_of('') || _b || return(_result) ?};

PPK_WRD.cntx_psh();
PPK_WRD.index('SYMBOL');
PPK_WRD.prefix(_rodzaj,_symbol);
{? PPK_WRD.first()
|| _result:=PPK_WRD.ref()
?};
PPK_WRD.cntx_pop();
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:36 0527ef2292f97cb5a232327eb30664f84ce21f8a5e279fe01e8a3661d1c0d44bad781bc160ca78467c46fcd72f21ba07f8ec9e048e592df79c67a4f4cd26f450cef5ca465c4007aa2b53e5f21f507fc78c16c69957392d6c48c8e3e6089915e56d4b8d3b7697e1cf5a4eece7781d56aace524ff1a2ba58aeb53c654a2ac52ef0
