:!UTF-8
::(c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: po_wyk.fml [17.00]
:: Utworzony: 2016-01-12
:: Autor: WH
::======================================================================================================================
:: Zawartość: Rejestracja wykonań do planu operacyjnego (planu zasobów)
::======================================================================================================================


\has_wyk_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Sprawdza czy dla zlecenia zostały zarejestrowane PL_WYKi
::   WE: _a - ZL.ref()
::   WY: 0 - brak PL_WYKow
::       1 - sa PL_WYKi
::  OLD: \has_wyk_zl/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;

_result:=0;
_can_continue:=1;

PL_WYK.cntx_psh();
PL_PART.cntx_psh();
GROPP.cntx_psh();
PL_OGR.cntx_psh();
PL_OGR.index('GROP');
GROP.cntx_psh();

PL_PART.index('ZL_START');
PL_PART.prefix(_zl);
{? PL_PART.first()
|| {!
   |? {? exec('has_wyk_plpart','po_wyk',PL_PART.ref())>0
      || _result:=1;
         _can_continue:=0
      ?};
      PL_PART.next() & _can_continue>0
   !}
?};

:: Jesli nie znalazlem w PL_PARTach to szukam wykonan do PL_OGRow
GROPP.index('ZL');
GROPP.prefix(_zl);
{? GROPP.first()
|| {!
   |?
      GROPP.GROP();
      PL_OGR.prefix(GROP.ref());
      {? PL_OGR.first()
      || {!
         |? {? exec('has_wyk_plogr','po_wyk',PL_OGR.ref())>0
            || _result:=1;
               _can_continue:=0
            ?};
            PL_OGR.next() & _can_continue>0
         !}
      ?};
      GROPP.next()
   !}
?};

GROP.cntx_pop();
PL_OGR.cntx_pop();
GROPP.cntx_pop();
PL_PART.cntx_pop();
PL_WYK.cntx_pop();
_result


\has_wyk_plpart
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Sprawdza czy dla PL_PARTa zostaly zarejestrowane PL_WYKi
::   WE: _a - PL_PART.ref()
::   WY: 0 - brak PL_WYKow
::       1 - sa PL_WYKi
::  OLD: \has_wyk_plpart/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_plpart:=_a;

_result:=0;
_can_continue:=1;

PL_PART.cntx_psh(); PL_PART.clear();
{? PL_PART.seek(_plpart)
||
   PL_OPER.cntx_psh();
   PL_OPER.index('PL_PART');
   PL_OPER.prefix(PL_PART.ref());
   {? PL_OPER.first()
   || {!
      |?
         {? exec('has_wyk_ploper','po_wyk',PL_OPER.ref())>0
         || _result:=1;
            _can_continue:=0
         ?};
         PL_OPER.next() & _can_continue>0
      !}
   ?};
   PL_OPER.cntx_pop()
?};
PL_PART.cntx_pop();
_result


\has_wyk_ploper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Sprawdza czy dla PL_OPERa zostaly zarejestrowane PL_WYKi
::   WE: _a - PL_OPER.ref()
::       [_b] - INTEGER - [0]/1 - 0 - czy uzwględniać wszystkie wykonania,
::                                1 - czy tylko te normalne a nie TPZ
::                                2 - czy tylko te dotycząte TP lub TZ
::   WY: 0 - brak PL_WYKow
::       1 - sa PL_WYKi
::  OLD: \has_wyk_ploper/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_ploper:=_a;

_mode:=0;
{? var_pres('_b')=type_of(0)
|| _mode:=_b
?};

_result:=0;

PL_OPER.cntx_psh(); PL_OPER.clear();
{? PL_OPER.seek(_ploper)
|| PL_WYK.cntx_psh();
   PL_WYK.index('PL_OPER');
   PL_WYK.prefix(PL_OPER.ref());
   {? _mode=0
   || {? PL_WYK.size()>0
      || _result:=1
      ?}
   |? _mode=1
   || {? PL_WYK.first()
      || {!
         |? {? PL_WYK.TP='N' | PL_WYK.TZ='N'
            || _result:=1
            ?};
            PL_WYK.next() & _result=0
         !}
      ?}
   |? _mode=2
   || {? PL_WYK.first()
      || {!
         |? {? PL_WYK.TP='T' | PL_WYK.TZ='T'
            || _result:=1
            ?};
            PL_WYK.next() & _result=0
         !}
      ?}
   ?};
   PL_WYK.cntx_pop();
   ~~
?};
PL_OPER.cntx_pop();
_result


\has_wyk_plogr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Sprawdza czy dla PL_OGRa zostaly zarejestrowane PL_WYKi
::   WE: _a - PL_OGR.ref
::   WY: 0 - brak PL_WYKow
::       1 - sa PL_WYKi
::  OLD: \has_wyk_plogr/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_plogr:=_a;

_result:=0;

PL_OGR.cntx_psh(); PL_OGR.clear();
{? PL_OGR.seek(_plogr)
||
   PL_WYK.cntx_psh();
   PL_WYK.index('PL_OGR');
   PL_WYK.prefix(PL_OGR.ref());
   {? PL_WYK.size()>0
   || _result:=1
   ?};
   PL_WYK.cntx_pop()
?};
PL_OGR.cntx_pop();
_result


\del_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Kasuje dane z tabeli do rejestracji wykonan - zapisy dotyczace planu operacyjnego (PL)
::  OLD: \del_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(PROD_REJ,PROD_NXT);
Cntx.clr(PROD_REJ,PROD_NXT);

PROD_REJ.index('PL_OPER');
PROD_REJ.prefix('PL');
{? PROD_REJ.first()
|| {!
   |? PROD_NXT.index('PROD_REJ');
      PROD_NXT.prefix(PROD_REJ.ref());
      {? PROD_NXT.first() || {! |? PROD_NXT.del() !} ?};
      PROD_NXT.index('NEXT');
      PROD_NXT.prefix(PROD_REJ.ref());
      {? PROD_NXT.first() || {! |? PROD_NXT.del() !} ?};
      PROD_REJ.del()
   !}
?};

Cntx.pop(PROD_REJ,PROD_NXT);
~~


\get_pxobj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Zwraca PX_OBJ powiazany z PL_WYKiem pod warunkiem ze PL_WYK mial wypelnione pole PL_OPER a nie PL_OGR
::   WE: [_a] - PL_WYK.ref() - plwyk dla ktorego zwracac PX_OBJ - jesli argument nie podany
::                             to brac biezacego
::   WY: null() lub PX_OBJ.ref()
::  OLD: \get_pxobj/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
_can_continue:=1;

PL_WYK.cntx_psh();
PL_OPER.cntx_psh();
PL_PART.cntx_psh();
{? var_pres('_a')=type_of(PL_WYK.ref())
||
   _pl_wyk:=_a;
   PL_WYK.clear();
   {? PL_WYK.seek(_pl_wyk)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| {? PL_WYK.PL_OPER<>null()
   ||
      _zl:=PL_WYK.PL_OPER().PL_PART().ZL;
      _zkp:=PL_WYK.PL_OPER().PL_PART().ZK_P;

      {? _zl<>null()
      || _result:=exec('get_zl_object','px_obj',_zl)
      |? _zkp<>null()
      || _result:=exec('get_zkp_object','px_obj',_zkp)
      ?}
   ?}
?};
PL_OPER.cntx_pop();
PL_WYK.cntx_pop();
PL_PART.cntx_pop();
_result


\il_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zwraca minimalna ilosc zarejestrowana na poprzednikach operacji
::   WE: _a - PROD_REJ.ref()
::   WY: [1] ilosc, [2] znacznik, czy pilnowac maksimum
::  OLD: \il_pop/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_prod_rej:=_a;

_res:=obj_new('IL_POP','MAX');
_res.IL_POP:=0;
_res.MAX:=0;

Cntx.psh(PROD_REJ,PL_OPER);
Cntx.clr(PROD_REJ);

{? PROD_REJ.seek(_prod_rej)
||
   {? PROD_REJ.PL_OGR<>null()
   ||
::    Dla operacji grupowej nie wyliczamy ilosci, mozliwosc rejestracji zalezy od tego czy bylo cokolwiek zrealizowane
::    w kazdej z poprzedzajacych operacji
      _res.IL_POP:=0;
      PROD_NXT.index('NEXT');
      PROD_NXT.prefix(PROD_REJ.ref());
      {? PROD_NXT.first()
      || {!
         |? {? PROD_NXT.PROD_REJ().ILW=0 || _res.MAX:=1 ?};
            PROD_NXT.next()
         !}
      ?}
   |? PROD_REJ.PL_OPER<>null()
   || PROD_NXT.index('NEXT');
      PROD_NXT.prefix(PROD_REJ.ref());
      {? PROD_NXT.first()
      || _pl_ogr:=PROD_NXT.PROD_REJ().PL_OGR;
         _zl:=PROD_NXT.NEXT().PL_OPER().PL_PART().ZL;
::       Jezeli poprzednik jest operacja grupowa, to liczymy ilosc na podstawie rejestracji akordu dla zlecenia
         {? _pl_ogr<>null()
         || {!
            |? PL_WYK.index('PL_OGR');
               PL_WYK.prefix(_pl_ogr);
               {? PL_WYK.first()
               || {!
                  |? ZLGD.index('PL_WYK');
                     ZLGD.prefix(PL_WYK.UID);
                     {? ZLGD.first()
                     || {!
                        |? {? ZLGD.ZL=_zl || _res.IL_POP+=ZLGD.IL ?};
                           ZLGD.next()
                        !}
                     ?};
                     PL_WYK.next()
                  !}
               ?};
               PROD_NXT.next()
            !}
         ||
:: Tymczasowo nie uwzględniam krotności między operacjami
::            _coef:=1;
::            _coef:=PROD_NXT.NEXT().ILC/PROD_NXT.PROD_REJ().ILC;
::            _res.IL_POP:=PROD_NXT.PROD_REJ().ILW*_coef;
::            {!
::            |?
:: Tymczasowo nie uwzględniam krotności między operacjami
::               _coef:=1;
::               _coef:=PROD_NXT.NEXT().ILC/PROD_NXT.PROD_REJ().ILC;
::               _il_pop:=PROD_NXT.PROD_REJ().ILW*_coef;
::               {? _il_pop<_res.IL_POP || _res.IL_POP:=_il_pop ?};
::               PROD_NXT.next()
::            !}

::          Jezeli poprzednik jest zwykla operacja, to wyznaczamy minimum z rejestracji do roznych operacji.
::          Kryteria przynaleznosci do tej samej operacji:
::          1) identyczna wartosc pola PL_OPER.TOPER
::          2) identyczna wartosc pola PL_OPER.NUM
            _tab:=tab_tmp(2
               ,'TOPER','STRING[16]','$PL_OPER.TOPER'
               ,'NUM','INTEGER','PL_OPER.NUM'
               ,'IL','REAL','Ilość'
            );
            {!
            |?
               _coef:=1;
::               _coef:=PROD_NXT.NEXT().ILC/PROD_NXT.PROD_REJ().ILC;
::             Uwaga: podczytanie rekordow powiazanych!
               _toper:=PROD_NXT.PROD_REJ().PL_OPER().TOPER;
               _num:={? _toper=null() || PL_OPER.NUM || 0 ?};
               _il:=PROD_REJ.ILW*_coef;
               _tab.prefix($_toper,_num);
               {? _tab.first()
               || _tab.IL+=_il;
                  _tab.put()
               || _tab.TOPER:=$_toper;
                  _tab.NUM:=_num;
                  _tab.IL:=_il;
                  _tab.add()
               ?};
               PROD_NXT.next()
            !};
            {? _tab.first()
            || _res.IL_POP:=_tab.IL;
               {!
               |? {? _tab.IL<_res.IL_POP || _res.IL_POP:=_tab.IL ?};
                  _tab.next()
               !}
            ?}
         ?};
         _res.MAX:=1
      ?}
   ?}
?};

Cntx.pop(PROD_REJ,PL_OPER);

_res


\il_nast
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.20]
:: OPIS: Zwraca ilosc zarejestrowana w nastepnej operacji
::   WE: _a - PROD_REJ.ref()
::   WY: [1] ilosc rzeczywista, [2] ilosc skorygowana do analizowanej operacji
::  OLD: \il_nast/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_prod_rej:=_a;

_res:=obj_new('IL_NAST','ILCNAST');
_res.IL_NAST:=0;
_res.ILCNAST:=0;

PROD_REJ.cntx_psh();
PROD_REJ.clear();

{? PROD_REJ.seek(_prod_rej)
||
   {? PROD_REJ.PL_OGR<>null()
   ||
::    Gdy nastepna operacja grupowa, jesli cokolwiek wykonane to blokowac
      _ilw:=PROD_REJ.ILW;
      PROD_NXT.index('PROD_REJ');
      PROD_NXT.prefix(PROD_REJ.ref());
      {? PROD_NXT.first()
      || {!
         |? {? PROD_NXT.NEXT().ILW<>0 || _res.IL_NAST:=_ilw ?};
            PROD_NXT.next()
         !}
      ?}
   |? PROD_REJ.PL_OPER<>null()
   ||
      _ilc:=PROD_REJ.ILC;
      PROD_NXT.index('PROD_REJ');
      PROD_NXT.prefix(PROD_REJ.ref());
      {? PROD_NXT.first()
      || {!
         |? _coef:=_ilc/PROD_NXT.NEXT().ILC;
            _ilw:=PROD_NXT.NEXT().ILW;
            {? _ilw>_res.IL_NAST
            || _res.IL_NAST:=_ilw;
               _res.ILCNAST:=_res.IL_NAST*_coef
            ?};
            PROD_NXT.next()
         !}
      ?}
   ?}
?};

PROD_REJ.cntx_pop();
_res


\update_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Aktualizacja tabel PROD_REJ, PROD_NXT
::       na podstawie zmian w tabelach PL_OPER, PL_NEXT, PL_OZ, PL_WYK, ZL, PL_OGR, GROP (obsluga triggerow)
::   WE: _a - rodzaj triggera: 'add', 'put', 'del'
::       _b - tabela: PL_OPER, PL_NEXT, PL_OZ, PL_WYK, ZL, PL_OGR, GROP
::   WY: wynik sterujacy dla triggera, czyli ~~ albo 0/1
::  OLD: \update_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? _b=PL_OPER
||
   {? _a='add'
   ||
::    Dla PL_OPER bez PL_OZow (kooperacja) dodanie PROD_REJ
      Cntx.psh(PROD_REJ,PL_OZ,PL_PART,ZGP);

      PL_OZ.index('PL_OPER');
      PL_OZ.prefix(PL_OPER.ref());
      {?
         exec('pl_oper_koop','po_plan')
      ||
         PROD_REJ.clear();
         PROD_REJ.blank(1);
         PROD_REJ.STARTD:=PL_OPER.STARTD;
         PROD_REJ.STARTT:=PL_OPER.STARTT;
         PROD_REJ.ENDD:=PL_OPER.ENDD;
         PROD_REJ.ENDT:=PL_OPER.ENDT;
         PROD_REJ.PRIORITY:='N';
         PROD_REJ.SRODZ:='PL';
         PROD_REJ.SOURCE:=$PL_OPER.ref();
         PROD_REJ.PL_OPER:=PL_OPER.ref();
         PROD_REJ.PL_OGR:=null();
         PROD_REJ.GROP:=null();
         PROD_REJ.PL_OZ:=null();
         exec('fields_4rej','po_wyk');
         PROD_REJ.RP:='N';
         {? PL_OPER.ZGP<>null()
         ||
            PL_OPER.ZGP();
            PROD_REJ.KONTROLA:=ZGP.KONTROLA;
            PROD_REJ.KJ_BAD:=ZGP.KJ_BAD;
            PROD_REJ.WYD:=exec('wyd','zl_guide');
            {? ZGP.DOK<>null
            || PROD_REJ.RP:='T'
            ?}
         ||
            PROD_REJ.KONTROLA:='N';
            PROD_REJ.KJ_BAD:='N';
            PROD_REJ.WYD:=null()
         ?};

::       Zlecenie albo zamowienie
         PL_OPER.PL_PART();
         {? PL_PART.ZL<>null()
         ||
            PROD_REJ.ZL:=PL_PART.ZL
         |? PL_PART.ZK_P<>null()
         ||
            PROD_REJ.ZK_P:=PL_PART.ZK_P;
            PROD_REJ.ZK_N:=PL_PART.ZK_P().N
         ?};

         PROD_REJ.M:=PL_PART.M;
         PROD_REJ.JM:=PL_PART.M().J;
         PROD_REJ.RES_SYM:='{KOOPERACJA}';
         PROD_REJ.RES_NAZ:='Kooperacja';
         PROD_REJ.ILC:=PL_OPER.ILOSC;
         PROD_REJ.ILW:=PL_OPER.IL_WYK;
         PROD_REJ.IL:=PL_OPER.ILOSC-PL_OPER.IL_WYK-PL_OPER.DEK_IL;
         PROD_REJ.START:='N';
         PROD_REJ.OK:='N';
         PROD_REJ.POTW:='N';
         PROD_REJ.PROBLEM:=PL_OPER.PROBLEM;
         PROD_REJ.PROBKLAS:=PL_OPER.PROBKLAS;
         PROD_REJ.PRAC:='N';
         PROD_REJ.BRYG:='N';
         PROD_REJ.KOOP:='T';

         {? PROD_REJ.ZL<>null()
         ||
            PROD_REJ.ZL();
            PROD_REJ.A:={? 1+ZL.STAN='O' || 'T' || 'N' ?}
         |? PROD_REJ.ZK_P<>null()
         ||
            PROD_REJ.A:='T'
         ||
            PROD_REJ.A:='N'
         ?};

         PROD_REJ.DOREJ:='T';
         PROD_REJ.add(1)
      ?};

      Cntx.pop(PROD_REJ,PL_OZ,PL_PART,ZGP);
      ~~
   |? _a='put'
   ||
::    Zawsze aktualizacja
      Cntx.psh(PROD_REJ,PL_OZ,PL_NEXT);

      PROD_REJ.index('PL_OPER');
      PROD_REJ.prefix('PL',PL_OPER.ref());
      {? PROD_REJ.first()
      ||
         PROD_REJ.STARTD:=PL_OPER.STARTD;
         PROD_REJ.STARTT:=PL_OPER.STARTT;
         PROD_REJ.ENDD:=PL_OPER.ENDD;
         PROD_REJ.ENDT:=PL_OPER.ENDT;
         exec('fields_4rej','po_wyk');
         {? PL_OPER.ZGP<>null()
         ||
            PL_OPER.ZGP();
            PROD_REJ.KONTROLA:=ZGP.KONTROLA;
            PROD_REJ.KJ_BAD:=ZGP.KJ_BAD;
            PROD_REJ.WYD:=exec('wyd','zl_guide')
         ||
            PROD_REJ.KONTROLA:='N';
            PROD_REJ.KJ_BAD:='N';
            PROD_REJ.WYD:=null()
         ?};

         PROD_REJ.ILC:=PL_OPER.ILOSC;
         PROD_REJ.ILW:=PL_OPER.IL_WYK;
         PROD_REJ.IL:=PL_OPER.ILOSC-PL_OPER.IL_WYK-PL_OPER.DEK_IL;
         {? PROD_REJ.IL<=0 || PROD_REJ.IL:=0; PROD_REJ.OK:='T' || PROD_REJ.OK:='N' ?};
         PROD_REJ.PROBLEM:=PL_OPER.PROBLEM;
         PROD_REJ.PROBKLAS:=PL_OPER.PROBKLAS;
         PROD_REJ.put(1);

:: - Aktualizacja znacznika 'do rejestracji' PROD_REJ.DOREJ na nastepnych operacjach
         PROD_REJ.cntx_psh();
         PL_NEXT.index('PL_OPER');
         PL_NEXT.prefix(PL_OPER.ref());
         {? PL_NEXT.first()
         || PROD_REJ.prefix('PL',PL_NEXT.NEXT);
            {? PROD_REJ.first()
            || {!
               |?
                  _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
                  {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX || PROD_REJ.DOREJ:='T' || PROD_REJ.DOREJ:='N' ?};
                  PROD_REJ.put();
                  obj_del(_il);

                  PROD_REJ.next()
               !}
            ?}
         ?};
         PROD_REJ.cntx_pop();

::    - Aktualizacja ilosci i znacznikow na powiazanych PROD_REJ z PL_OZ powiazanych z danym PL_OPER
::       biezacy PROD_REJ, zeby go drugi raz nie aktualizowac
         _prod_rej:=PROD_REJ.ref();
::       pola do przeniesienia
         _ilc:=PROD_REJ.ILC;
         _ilw:=PROD_REJ.ILW;
         _il:=PROD_REJ.IL;
         _ok:=PROD_REJ.OK;

         PL_OZ.index('PL_OPER');
         PL_OZ.prefix(PL_OPER.ref());
         {? PL_OZ.first()
         || {!
            |? PROD_REJ.index('PL_OZ');
               PROD_REJ.prefix('PL',PL_OZ.ref());
               {? PROD_REJ.first()
               || {!
                  |?
                     {? PROD_REJ.ref()<>_prod_rej
                     || PROD_REJ.ILC:=_ilc;
                        PROD_REJ.ILW:=_ilw;
                        PROD_REJ.IL:=_il;
                        {? PROD_REJ.IL<0 || PROD_REJ.IL:=0 ?};
                        PROD_REJ.OK:=_ok;
                        PROD_REJ.put()
                     ?};
                     PROD_REJ.next()
                  !}
               ?};
               PL_OZ.next()
            !}
         ?}
      ?};

      Cntx.pop(PROD_REJ,PL_OZ,PL_NEXT);
      ~~
   |? _a='del'
   ||
::    Dla PL_OPER bez PL_OZow (kooperacja) usuniecie PROD_REJ, dla tych z PL_OZami powinny byc juz usuniete
      Cntx.psh(PROD_REJ);

      PROD_REJ.index('PL_OPER');
      PROD_REJ.prefix('PL',PL_OPER.ref());
      {? PROD_REJ.first()
      ||
         PROD_NXT.index('PROD_REJ');
         PROD_NXT.prefix(PROD_REJ.ref());
         {? PROD_NXT.first() || {! |? PROD_NXT.del() !} ?};

         PROD_NXT.index('NEXT');
         PROD_NXT.prefix(PROD_REJ.ref());
         {? PROD_NXT.first() || {! |? PROD_NXT.del() !} ?};

         PROD_REJ.del()
      ?};
      _res:=~PROD_REJ.first();

      Cntx.pop(PROD_REJ);
      _res
   ||
      ~~
   ?}
|? _b=PL_NEXT
||
   {? _a='add'
   ||
::    Po dodaniu nastepnika dolaczany jest zapis PROD_NXT
      Cntx.psh(PROD_REJ,PROD_NXT);
      Cntx.clr(PROD_NXT);

      {? PL_NEXT.PL_OGR<>null()
      ||
         PROD_REJ.index('PL_OGR');
         PROD_REJ.prefix('PL',PL_NEXT.PL_OGR);
         {? PROD_REJ.first()
         || PROD_NXT.blank(1);
            PROD_NXT.PROD_REJ:=PROD_REJ.ref();

            PROD_REJ.index('PL_OPER');
            PROD_REJ.prefix('PL',PL_NEXT.NEXT);
            {? PROD_REJ.first()
            || _has_wyk:=exec('has_wyk_plogr','po_wyk',PL_NEXT.PL_OGR);
               {? _has_wyk=0
               || PROD_REJ.DOREJ:='N';
                  PROD_REJ.put(1)
               ?};
               PROD_NXT.NEXT:=PROD_REJ.ref();
               PROD_NXT.add(1)
            ?}
         ?};
         PROD_REJ.prefix('PX',PL_NEXT.PL_OGR);
         {? PROD_REJ.first()
         || PROD_NXT.blank(1);
            PROD_NXT.PROD_REJ:=PROD_REJ.ref();

            PROD_REJ.index('PL_OPER');
            PROD_REJ.prefix('PX',PL_NEXT.NEXT);
            {? PROD_REJ.first()
            || _has_wyk:=exec('has_wyk_plogr','po_wyk',PL_NEXT.PL_OGR);
               {? _has_wyk=0
               || PROD_REJ.DOREJ:='N';
                  PROD_REJ.put(1)
               ?};
               PROD_REJ.put(1);
               PROD_NXT.NEXT:=PROD_REJ.ref();
               PROD_NXT.add(1)
            ?}
         ?}
      |? PL_NEXT.PL_OPER<>null()
      ||
         PROD_REJ.index('PL_OPER');
         PROD_REJ.prefix('PL',PL_NEXT.PL_OPER);
         {? PROD_REJ.first()
         || PROD_NXT.blank(1);
            PROD_NXT.PROD_REJ:=PROD_REJ.ref();
            {? PL_NEXT.NEXT_OGR<>null()
            ||
               PROD_REJ.index('PL_OGR');
               PROD_REJ.prefix('PL',PL_NEXT.NEXT_OGR);
               {? PROD_REJ.first()
               || _has_wyk:=exec('has_wyk_ploper','po_wyk',PL_NEXT.PL_OPER);
                  {? _has_wyk=0
                  || PROD_REJ.DOREJ:='N';
                     PROD_REJ.put(1)
                  ?};
                  PROD_NXT.NEXT:=PROD_REJ.ref();
                  PROD_NXT.add(1)
               ?}
            |? PL_NEXT.NEXT<>null()
            ||
               PROD_REJ.index('PL_OPER');
               PROD_REJ.prefix('PL',PL_NEXT.NEXT);
               {? PROD_REJ.first()
               || _has_wyk:=exec('has_wyk_ploper','po_wyk',PL_NEXT.PL_OPER);
                  {? _has_wyk=0
                  || PROD_REJ.DOREJ:='N';
                     PROD_REJ.put(1)
                  ?};
                  PROD_NXT.NEXT:=PROD_REJ.ref();
                  PROD_NXT.add(1)
               ?}
            ?}
         ?};
         PROD_REJ.prefix('PX',PL_NEXT.PL_OPER);
         {? PROD_REJ.first()
         || PROD_NXT.blank(1);
            PROD_NXT.PROD_REJ:=PROD_REJ.ref();
            {? PL_NEXT.NEXT_OGR<>null()
            ||
               PROD_REJ.index('PL_OGR');
               PROD_REJ.prefix('PX',PL_NEXT.NEXT_OGR);
               {? PROD_REJ.first()
               || _has_wyk:=exec('has_wyk_ploper','po_wyk',PL_NEXT.PL_OPER);
                  {? _has_wyk=0
                  || PROD_REJ.DOREJ:='N';
                     PROD_REJ.put(1)
                  ?};
                  PROD_NXT.NEXT:=PROD_REJ.ref();
                  PROD_NXT.add(1)
               ?}
            |? PL_NEXT.NEXT<>null()
            ||
               PROD_REJ.index('PL_OPER');
               PROD_REJ.prefix('PX',PL_NEXT.NEXT);
               {? PROD_REJ.first()
               || _has_wyk:=exec('has_wyk_ploper','po_wyk',PL_NEXT.NEXT);
                  {? _has_wyk=0
                  || PROD_REJ.DOREJ:='N';
                     PROD_REJ.put(1)
                  ?};
                  PROD_NXT.NEXT:=PROD_REJ.ref();
                  PROD_NXT.add(1)
               ?}
            ?}
         ?}
      ?};

      Cntx.pop(PROD_REJ,PROD_NXT);
      ~~
   |? _a='del'
   ||
::    Przed usunieciem nastepnika usuwany jest zapis PROD_NXT
      Cntx.psh(PROD_REJ,PROD_NXT);

      _res:=1;
      PROD_REJ.index('PL_OPER');
      PROD_REJ.prefix('ZL',PL_NEXT.PL_OPER);
      {? PROD_REJ.first()
      ||
         PROD_NXT.index('PROD_REJ');
         PROD_NXT.prefix(PROD_REJ.ref());
         {? PROD_NXT.first()
         || {! |? PROD_NXT.del() !}
         ?};
         _res1:=~PROD_NXT.first();

         PROD_NXT.index('NEXT');
         PROD_NXT.prefix(PROD_REJ.ref());
         {? PROD_NXT.first()
         || {! |? PROD_NXT.del() !}
         ?};
         _res2:=~PROD_NXT.first();

         _res:=_res1*_res2
      ?};

      Cntx.pop(PROD_REJ,PROD_NXT);
      _res
   ||
      ~~
   ?}
|? _b=PL_OZ
||
   {? _a='add'
   ||
::    Dodanie PL_OZ = nowy PROD_REJ
::    Uwaga: wazna jest sekwencja pol ze wzgledu na podczytywanie relacji (optymalizacja kodu)
      Cntx.psh(PROD_REJ,PL_OPER,PL_PART,ZL);

      PROD_REJ.clear();
      PROD_REJ.blank(1);
      PROD_REJ.STARTD:=PL_OZ.PL_OPER().STARTD;
      PROD_REJ.STARTT:=PL_OPER.STARTT;
      PROD_REJ.ENDD:=PL_OPER.ENDD;
      PROD_REJ.ENDT:=PL_OPER.ENDT;
      PROD_REJ.PRIORITY:='N';
      PROD_REJ.SRODZ:='PL';
      PROD_REJ.SOURCE:=$PL_OZ.ref();
      PROD_REJ.PL_OPER:=PL_OPER.ref();
      PROD_REJ.PL_OGR:=null();
      PROD_REJ.GROP:=null();
      PROD_REJ.PL_OZ:=PL_OZ.ref();
      exec('fields_4rej','po_wyk');
      PL_OPER.ZGP();
      PROD_REJ.KONTROLA:=ZGP.KONTROLA;
      PROD_REJ.KJ_BAD:=ZGP.KJ_BAD;
      PROD_REJ.RP:='N';
      {? ZGP.DOK<>null
      || PROD_REJ.RP:='T'
      ?};
      PL_OZ.PL_RES();
      PROD_REJ.WYD:=exec('szukaj_ud_skl','schemat','PODZORG',PL_RES.WYD);

      PROD_REJ.ZL:=PL_OPER.PL_PART().ZL;
      PROD_REJ.M:=PL_PART.M;
      PROD_REJ.JM:=PL_PART.M().J;
      PROD_REJ.RES_SYM:=PL_RES.SYM;
      PROD_REJ.RES_NAZ:=PL_RES.NAZ;
      PROD_REJ.ILC:=PL_OPER.ILOSC;
      PROD_REJ.ILW:=PL_OPER.IL_WYK;
      PROD_REJ.IL:=PL_OPER.ILOSC-PL_OPER.IL_WYK;
      PROD_REJ.START:='N';
      PROD_REJ.OK:='N';
      PROD_REJ.POTW:='N';
      PROD_REJ.PROBLEM:=PL_OPER.PROBLEM;
      PROD_REJ.PROBKLAS:=PL_OPER.PROBKLAS;
      PROD_REJ.PRAC:='N';
      PROD_REJ.BRYG:='N';
      PROD_REJ.KOOP:='N';

      {? PROD_REJ.ZL<>null()
      ||
         PROD_REJ.ZL();
         PROD_REJ.A:={? 1+ZL.STAN='O' || 'T' || 'N' ?}
      |? PROD_REJ.ZK_P<>null()
      ||
         PROD_REJ.A:='T'
      ||
         PROD_REJ.A:='N'
      ?};

      PROD_REJ.DOREJ:='T';
      PROD_REJ.add(1);

      Cntx.pop(PROD_REJ,PL_OPER,PL_PART,ZL);
      ~~
   |? _a='put'
   ||
::    Modyfikacja PL_OZ - zmiana zasobu i zmiana znacznikow czasowych
      Cntx.psh(PROD_REJ);

      PROD_REJ.index('PL_OZ');
      PROD_REJ.prefix('PL',PL_OZ.ref());
      {? PROD_REJ.first()
      ||
         PROD_REJ.STARTD:=PL_OZ.PL_OPER().STARTD;
         PROD_REJ.STARTT:=PL_OPER.STARTT;
         PROD_REJ.ENDD:=PL_OPER.ENDD;
         PROD_REJ.ENDT:=PL_OPER.ENDT;
         PROD_REJ.RES_SYM:=PL_OZ.PL_RES().SYM;
         PROD_REJ.RES_NAZ:=PL_RES.NAZ;
         PROD_REJ.PROBLEM:=PL_OPER.PROBLEM;
         PROD_REJ.put(1)
      ?};

      Cntx.pop(PROD_REJ);
      ~~
   |? _a='del'
   ||
::    Usuniecie PL_OZ = usuniecie PROD_REJ
      Cntx.psh(PROD_REJ);

      PROD_REJ.index('PL_OZ');
      PROD_REJ.prefix('PL',PL_OZ.ref());
      {? PROD_REJ.first()
      || {!
         |?
            PROD_NXT.index('PROD_REJ');
            PROD_NXT.prefix(PROD_REJ.ref());
            {? PROD_NXT.first() || {! |? PROD_NXT.del() !} ?};

            PROD_NXT.index('NEXT');
            PROD_NXT.prefix(PROD_REJ.ref());
            {? PROD_NXT.first() || {! |? PROD_NXT.del() !} ?};

            _can_continue:=PROD_REJ.del(,1);

            PROD_REJ.first() & _can_continue>0
         !}
      ?};
      _res:=~PROD_REJ.first();

      Cntx.pop(PROD_REJ);
      _res
   ||
      ~~
   ?}
|? _b=PL_WYK
||
:: modyfikacje PL_WYK wplywaja na znacznik PROD_REJ.START
   {? _a='add' | _a='put' || _pl_oz:=PL_WYK.PL_OZ; _pl_ogr:=PL_WYK.PL_OGR; _pl_oper:=PL_WYK.PL_OPER
   |? _a='del' || _pl_oz:=bfld('PL_OZ'); _pl_ogr:=PL_WYK.PL_OGR; _pl_oper:=PL_WYK.PL_OPER
               || return()
   ?};

   Cntx.psh(PROD_REJ,PROD_NXT,PL_WYK);

   _start:=0;

   {? _pl_oz<>null()
   ||
::    Pojedyncza operacja
::    Operacja wystartowana - jezeli ostatnia zarejestrowana nie ma daty zakonczenia
::    Operacja do potwierdzenia - jezeli ktorakolwiek rejestracja nie jest potwierdzona
      _start:='N';
      _potw:='N';
      PL_WYK.index('PL_OZ');
      PL_WYK.prefix(_pl_oz);
      {? PL_WYK.first()
      || _potw:='T';
         {!
         |? {? PL_WYK.ENDD=null() || _start:='T' ?};
            {? PL_WYK.POTW='N' || _potw:='N' ?};
            PL_WYK.next()
         !}
      ?};

      PROD_REJ.index('PL_OZ');
      PROD_REJ.prefix('PL',_pl_oz);
      {? PROD_REJ.first()
      ||
         PROD_REJ.START:=_start;
         PROD_REJ.POTW:=_potw;
         _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
         {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX || PROD_REJ.DOREJ:='T' || PROD_REJ.DOREJ:='N' ?};
         obj_del(_il);

         {? PROD_REJ.put()
         ||
            _prod_rej:=PROD_REJ.ref();
            PROD_REJ.cntx_psh();
            PROD_REJ.clear();

            PROD_NXT.index('PROD_REJ');
            PROD_NXT.prefix(_prod_rej);
            {? PROD_NXT.first()
            || {!
               |?
                  PROD_NXT.cntx_psh();
                  PROD_NXT.NEXT();
                  _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
                  {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX
                  || PROD_REJ.DOREJ:='T'; PROD_REJ.put()
                  || PROD_REJ.DOREJ:='N'; PROD_REJ.put()
                  ?};
                  obj_del(_il);
                  PROD_NXT.cntx_pop();

                  PROD_NXT.next()
               !}
            ?};

            PROD_NXT.index('NEXT');
            PROD_NXT.prefix(_prod_rej);
            {? PROD_NXT.first()
            || {!
               |?
                  PROD_NXT.cntx_psh();
                  PROD_NXT.PROD_REJ();
                  _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
                  {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX
                  || PROD_REJ.DOREJ:='T'; PROD_REJ.put()
                  || PROD_REJ.DOREJ:='N'; PROD_REJ.put()
                  ?};
                  obj_del(_il);
                  PROD_NXT.cntx_pop();

                  PROD_NXT.next()
               !}
            ?};

            PROD_REJ.cntx_pop();
            ~~
         ?}
      ?};
      ~~

   |? _pl_oper<>null()
   ||
::    Kooperacja (brak PL_OZ)
::    Operacja wystartowana - jezeli ostatnia zarejestrowana nie ma daty zakonczenia
      _start:='N';
      PL_WYK.index('PL_OPER');
      PL_WYK.prefix(_pl_oper);
      {? PL_WYK.first()
      || {!
         |? {? PL_WYK.ENDD=null() || _start:='T' ?};
            PL_WYK.next()
         !}
      ?};

      PROD_REJ.index('PL_OPER');
      PROD_REJ.prefix('PL',_pl_oper);
      {? PROD_REJ.first()
      ||
         PROD_REJ.START:=_start;
         _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
         {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX || PROD_REJ.DOREJ:='T' || PROD_REJ.DOREJ:='N' ?};
         obj_del(_il);

         {? PROD_REJ.put()
         ||
            _prod_rej:=PROD_REJ.ref();
            PROD_REJ.cntx_psh();
            PROD_REJ.clear();

            PROD_NXT.index('PROD_REJ');
            PROD_NXT.prefix(_prod_rej);
            {? PROD_NXT.first()
            || {!
               |?
                  PROD_NXT.cntx_psh();
                  PROD_NXT.NEXT();
                  _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
                  {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX
                  || PROD_REJ.DOREJ:='T'; PROD_REJ.put()
                  || PROD_REJ.DOREJ:='N'; PROD_REJ.put()
                  ?};
                  obj_del(_il);
                  PROD_NXT.cntx_pop();

                  PROD_NXT.next()
               !}
            ?};

            PROD_NXT.index('NEXT');
            PROD_NXT.prefix(_prod_rej);
            {? PROD_NXT.first()
            || {!
               |?
                  PROD_NXT.cntx_psh();
                  PROD_NXT.PROD_REJ();
                  _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
                  {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX
                  || PROD_REJ.DOREJ:='T'; PROD_REJ.put()
                  || PROD_REJ.DOREJ:='N'; PROD_REJ.put()
                  ?};
                  obj_del(_il);
                  PROD_NXT.cntx_pop();

                  PROD_NXT.next()
               !}
            ?};

            PROD_REJ.cntx_pop();
            ~~
         ?}
      ?};
      ~~

   |? _pl_ogr<>null()
   ||
::    Grupa operacji
::    Operacja wystartowana - jezeli ostatnia zarejestrowana nie ma daty zakonczenia
::    Operacja do potwierdzenia - jezeli ktorakolwiek rejestracja nie jest potwierdzona
      _start:='N';
      _potw:='N';
      PL_WYK.index('PL_OGR');
      PL_WYK.prefix(_pl_ogr);
      {? PL_WYK.first()
      || _potw:='T';
         {!
         |? {? PL_WYK.ENDD=null() || _start:='T' ?};
            {? PL_WYK.POTW='N' || _potw:='N' ?};
            PL_WYK.next()
         !}
      ?};

      PROD_REJ.index('PL_OGR');
      PROD_REJ.prefix('PL',_pl_ogr);
      {? PROD_REJ.first()
      ||
         PROD_REJ.START:=_start;
         PROD_REJ.POTW:=_potw;
         _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
         {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX || PROD_REJ.DOREJ:='T' || PROD_REJ.DOREJ:='N' ?};
         obj_del(_il);

         {? PROD_REJ.put()
         ||
            _prod_rej:=PROD_REJ.ref();
            PROD_REJ.cntx_psh();
            PROD_REJ.clear();

            PROD_NXT.index('PROD_REJ');
            PROD_NXT.prefix(_prod_rej);
            {? PROD_NXT.first()
            || {!
               |?
                  PROD_NXT.cntx_psh();
                  PROD_NXT.NEXT();
                  _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
                  {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX
                  || PROD_REJ.DOREJ:='T'; PROD_REJ.put()
                  || PROD_REJ.DOREJ:='N'; PROD_REJ.put()
                  ?};
                  obj_del(_il);
                  PROD_NXT.cntx_pop();

                  PROD_NXT.next()
               !}
            ?};

            PROD_NXT.index('NEXT');
            PROD_NXT.prefix(_prod_rej);
            {? PROD_NXT.first()
            || {!
               |?
                  PROD_NXT.cntx_psh();
                  PROD_NXT.PROD_REJ();
                  _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
                  {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX
                  || PROD_REJ.DOREJ:='T'; PROD_REJ.put()
                  || PROD_REJ.DOREJ:='N'; PROD_REJ.put()
                  ?};
                  obj_del(_il);
                  PROD_NXT.cntx_pop();

                  PROD_NXT.next()
               !}
            ?};

            PROD_REJ.cntx_pop();
            ~~
         ?}
      ?};
      ~~

   ?};

   Cntx.pop(PROD_REJ,PROD_NXT,PL_WYK);
   ~~
|? _b=ZL
||
::  modyfikacja stanu zlecenia = zmiana aktywnosci odpowiednich PROD_REJ
   {? _a='put'
   || Cntx.psh(PROD_REJ);

      PROD_REJ.index('ZL');
      PROD_REJ.prefix('PL',ZL.ref());
      {? PROD_REJ.first()
      || {!
         |?
            PROD_REJ.A:={? 1+ZL.STAN='O' || 'T' || 'N' ?};
            PROD_REJ.put();
            PROD_REJ.next()
         !}
      ?};

      Cntx.pop(PROD_REJ)
   ?};
   ~~
|? _b=PL_OGR
||
   {? _a='add'
   ||
::    Dodanie PL_OGR = nowy PROD_REJ
::    Uwaga: wazna jest sekwencja pol ze wzgledu na podczytywanie relacji (optymalizacja kodu)
      Cntx.psh(PROD_REJ,PL_OGR,GROP);

      PROD_REJ.clear();
      PROD_REJ.blank(1);
      PROD_REJ.STARTD:=PL_OGR.STARTD;
      PROD_REJ.STARTT:=PL_OGR.STARTT;
      PROD_REJ.ENDD:=PL_OGR.ENDD;
      PROD_REJ.ENDT:=PL_OGR.ENDT;
      PROD_REJ.PRIORITY:='N';
      PROD_REJ.SRODZ:='PL';
      PROD_REJ.SOURCE:=$PL_OGR.ref();
      PROD_REJ.PL_OPER:=null();
      PROD_REJ.PL_OGR:=PL_OGR.ref();
      PROD_REJ.GROP:=PL_OGR.GROP;
      PROD_REJ.PL_OZ:=null();
      exec('fields_4rej','po_wyk');
      PROD_REJ.ZL:=null();
      PROD_REJ.M:=null();
      PROD_REJ.JM:=null();
      PROD_REJ.RES_SYM:=PL_OGR.PL_RES().SYM;
      PROD_REJ.RES_NAZ:=PL_RES.NAZ;
      PROD_REJ.WYD:=exec('szukaj_ud_skl','schemat','PODZORG',PL_RES.WYD);
      PROD_REJ.ILC:=PL_OGR.ILOSC;
      PROD_REJ.ILW:=0;
      PROD_REJ.IL:=PL_OGR.ILOSC;
      PROD_REJ.START:='N';
      PROD_REJ.OK:='N';
      PROD_REJ.POTW:='N';
      PROD_REJ.PROBLEM:='N';
      PROD_REJ.PRAC:='N';
      PROD_REJ.BRYG:='N';
      PROD_REJ.KOOP:='N';
      PROD_REJ.RP:='N';
      PROD_REJ.A:={? PL_OGR.GROP().AKC='T' & GROP.STATUS='O' || 'T' || 'N' ?};
      PROD_REJ.DOREJ:='T';
      PROD_REJ.KONTROLA:='N';
      PROD_REJ.KJ_BAD:='N';
      PROD_REJ.add(1);

      Cntx.pop(PROD_REJ,PL_OGR,GROP);
      ~~
   |? _a='put'
   ||
::    Modyfikacja PL_OGR - zawsze aktualizacja
      Cntx.psh(PROD_REJ,PL_NEXT);

      PROD_REJ.index('PL_OGR');
      PROD_REJ.prefix('PL',PL_OGR.ref());
      {? PROD_REJ.first()
      ||
         PROD_REJ.STARTD:=PL_OGR.STARTD;
         PROD_REJ.STARTT:=PL_OGR.STARTT;
         PROD_REJ.ENDD:=PL_OGR.ENDD;
         PROD_REJ.ENDT:=PL_OGR.ENDT;
         exec('fields_4rej','po_wyk');
         PROD_REJ.RES_SYM:=PL_OGR.PL_RES().SYM;
         PROD_REJ.RES_NAZ:=PL_RES.NAZ;
         PROD_REJ.WYD:=exec('szukaj_ud_skl','schemat','PODZORG',PL_RES.WYD);
         PROD_REJ.A:={? PL_OGR.GROP().AKC='T' & GROP.STATUS='O' || 'T' || 'N' ?};
         PROD_REJ.ILC:=PL_OGR.ILOSC;
         PROD_REJ.ILW:=PL_OGR.IL_WYK;
         PROD_REJ.IL:=PL_OGR.ILOSC-PL_OGR.IL_WYK;
         {? PROD_REJ.IL<=0 || PROD_REJ.IL:=0; PROD_REJ.OK:='T' || PROD_REJ.OK:='N' ?};
         PROD_REJ.put(1);

:: - Aktualizacja znacznika 'do rejestracji' PROD_REJ.DOREJ dla kolejnych operacji
         PL_NEXT.index('PL_OGR');
         PL_NEXT.prefix(PL_OGR.ref());
         {? PL_NEXT.first()
         || PROD_REJ.index('PL_OPER');
            PROD_REJ.prefix('PL',PL_NEXT.NEXT);
            {? PROD_REJ.first()
            || {!
               |? _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
                  {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX || PROD_REJ.DOREJ:='T' || PROD_REJ.DOREJ:='N' ?};
                  PROD_REJ.put();
                  obj_del(_il);

                  PROD_REJ.next()
               !}
            ?}
         ?}
      ?};

      Cntx.pop(PROD_REJ,PL_NEXT);
      ~~
   |? _a='del'
   ||
::    Usuniecie PL_OGR = usuniecie PROD_REJ
      Cntx.psh(PROD_REJ);

      PROD_REJ.index('PL_OGR');
      PROD_REJ.prefix('PL',PL_OGR.ref());
      {? PROD_REJ.first()
      ||
         PROD_NXT.index('PROD_REJ');
         PROD_NXT.prefix(PROD_REJ.ref());
         {? PROD_NXT.first() || {! |? PROD_NXT.del() !} ?};

         PROD_NXT.index('NEXT');
         PROD_NXT.prefix(PROD_REJ.ref());
         {? PROD_NXT.first() || {! |? PROD_NXT.del() !} ?};

         PROD_REJ.del()
      ?};
      _res:=~PROD_REJ.first();

      Cntx.pop(PROD_REJ);
      _res
   ||
      ~~
   ?}
|? _b=GROP
||
::  modyfikacja stanu grupy operacji = zmiana aktywnosci odpowiednich PROD_REJ
   {? _a='put'
   || Cntx.psh(PROD_REJ);

      PROD_REJ.index('GROP');
      PROD_REJ.prefix('PL',GROP.ref());
      {? PROD_REJ.first()
      || {!
         |? PROD_REJ.A:={? GROP.STATUS='O' & GROP.AKC='T' || 'T' || 'N' ?};
            PROD_REJ.put();
            PROD_REJ.next()
         !}
      ?};

      Cntx.pop(PROD_REJ)
   ?};
   ~~
||
   ~~
?}


\load_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Ładuje dane do tabeli do rejestracji wykonań - plan operacyjny
::       Funkcja służy tylko do zainicjowania danych - na bieżąco działają triggery
::   WE: [_a] - czy pytać o wykonanie funkcji
::       [_b] - PL_PART.ref() - przewodnik planistyczny dla którego uruchomić odwarzanie PROD_REJ
::  OLD: \load_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _dialog:=_a || _dialog:=1 ?};

{? _dialog
||
   {? ~FUN.ask('Czy zainicjować ponownie tabelę do rejestracji produkcji dla planu operacyjnego?'@)
   || return('')
   ?}
?};
_plpart:=null();
{? var_pres('_b')=type_of(PL_PART.ref())
|| _plpart:=_b
?};

exec('del_4rej','po_wyk');

Cntx.psh(PROD_REJ,PROD_NXT,PL_OZ,PL_OPER,PL_OGR,PL_PART,ZL,PL_NEXT);
Cntx.clr(PROD_REJ,PROD_NXT,PL_OZ,PL_OPER,PL_OGR,PL_PART,ZL);

:: Obsługa dla operacji pojedynczych na zasobach oraz dla operacji bez zasobów (np. kooperacja)
{? _plpart<>null()
|| PL_OPER.index('PL_PART');
   PL_OPER.prefix(_plpart)
|| PL_OPER.index('STARTD');
   PL_OPER.prefix()
?};
{? PL_OPER.first()
|| {!
   |? PL_OZ.index('PL_OPER');
      PL_OZ.prefix(PL_OPER.ref());
      {? PL_OZ.first()
      ||
::       Jeżeli są PL_OZy, czyli operacja zaplanowana na zasobach (dalej sekcja bez PL_OZów, czyli dla kooperacji)
         {!
         |?
::          Uwaga: ważna jest sekwencja pól ze względu na podczytywanie relacji (optymalizacja kodu)
            PROD_REJ.blank(1);
            PROD_REJ.STARTD:=PL_OPER.STARTD;
            PROD_REJ.STARTT:=PL_OPER.STARTT;
            PROD_REJ.ENDD:=PL_OPER.ENDD;
            PROD_REJ.ENDT:=PL_OPER.ENDT;
            PROD_REJ.PRIORITY:='N';
            PROD_REJ.SRODZ:='PL';
            PROD_REJ.SOURCE:=$PL_OZ.ref();
            PROD_REJ.PL_OPER:=PL_OPER.ref();
            PROD_REJ.PL_OGR:=null();
            PROD_REJ.GROP:=null();
            PROD_REJ.PL_OZ:=PL_OZ.ref();
            exec('fields_4rej','po_wyk');
            PL_OPER.ZGP();
            PROD_REJ.KONTROLA:=ZGP.KONTROLA;
            PROD_REJ.KJ_BAD:=ZGP.KJ_BAD;
            PROD_REJ.RP:='N';
            {? ZGP.DOK<>null
            || PROD_REJ.RP:='T'
            ?};
            PL_OZ.PL_RES();
            PROD_REJ.WYD:=exec('szukaj_ud_skl','schemat','PODZORG',PL_RES.WYD);

::          Zlecenie albo zamówienie
            PL_OPER.PL_PART();
            {? PL_PART.ZL<>null()
            || PROD_REJ.ZL:=PL_PART.ZL
            |? PL_PART.ZK_P<>null()
            || ZK_P.use(ref_name(PL_PART.ZK_P));
               PROD_REJ.ZK_P:=PL_PART.ZK_P;
               ZK_N.use(ref_name(PL_PART.ZK_P().N));
               PROD_REJ.ZK_N:=PL_PART.ZK_P().N
            ?};

            PROD_REJ.M:=PL_PART.M;
            PROD_REJ.JM:=PL_PART.M().J;
            PROD_REJ.RES_SYM:=PL_RES.SYM;
            PROD_REJ.RES_NAZ:=PL_RES.NAZ;
            PROD_REJ.IL:=PL_OPER.ILOSC-PL_OPER.IL_WYK;
            {? PROD_REJ.IL<0 || PROD_REJ.IL:=0 ?};
            PROD_REJ.ILW:=PL_OPER.IL_WYK;
            PROD_REJ.ILC:=PL_OPER.ILOSC;

::          Operacja wystartowana - jezeli ostatnia zarejestrowana nie ma daty zakonczenia
::          Operacja do potwierdzenia - jezeli ktorakolwiek rejestracja nie jest potwierdzona
            PROD_REJ.START:='N';
            PROD_REJ.POTW:='N';
            PL_WYK.index('PL_OZ');
            PL_WYK.prefix(PL_OZ.ref());
            {? PL_WYK.first()
            || PROD_REJ.POTW:='T';
               {!
               |? {? PL_WYK.ENDD=null() || PROD_REJ.START:='T' ?};
                  {? PL_WYK.POTW<>'T' || PROD_REJ.POTW:='N' ?};
                  PL_WYK.next()
               !}
            ?};

            PROD_REJ.OK:={? PROD_REJ.ILW>=PROD_REJ.ILC || 'T' || 'N' ?};
            PROD_REJ.PROBLEM:=PL_OPER.PROBLEM;
            PROD_REJ.PRAC:='N';
            PROD_REJ.BRYG:='N';
            PROD_REJ.KOOP:='N';

            {? PROD_REJ.ZL<>null()
            || PROD_REJ.ZL();
               PROD_REJ.A:={? ZL.STAN='O' || 'T' || 'N' ?};
               PROD_REJ.DOREJ:='N'
            |? PROD_REJ.ZK_P<>null()
            || PROD_REJ.A:='T';
               PROD_REJ.DOREJ:='N'
            || PROD_REJ.A:='N';
               PROD_REJ.DOREJ:='N'
            ?};

            {? PROD_REJ.add(1)
            || _prod_rej:=PROD_REJ.ref();
               PROD_REJ.cntx_psh();

::             Następniki operacji
               PL_NEXT.index('PL_OPER');
               PL_NEXT.prefix(PL_OPER.ref());
               {? PL_NEXT.first()
               || {!
                  |? PROD_NXT.blank(1);
                     PROD_NXT.PROD_REJ:=_prod_rej;
                     {? PL_NEXT.NEXT<>null()
                     ||
::                      następna jest PL_OPER
                        PROD_REJ.index('PL_OPER');
                        PROD_REJ.prefix('PL',PL_NEXT.NEXT);
                        {? PROD_REJ.first()
                        || PROD_NXT.NEXT:=PROD_REJ.ref();
                           PROD_NXT.add(1)
                        ?}
                     |? PL_NEXT.NEXT_OGR<>null()
                     ||
::                      następna jest PL_OGR
                        PROD_REJ.index('PL_OGR');
                        PROD_REJ.prefix('PL',PL_NEXT.NEXT_OGR);
                        {? PROD_REJ.first()
                        || PROD_NXT.NEXT:=PROD_REJ.ref();
                           PROD_NXT.add(1)
                        ?}
                     ?};
                     PL_NEXT.next()
                  !}
               ?};

::             Poprzedniki operacji
               PL_NEXT.index('NEXT');
               PL_NEXT.prefix(PL_OPER.ref());
               {? PL_NEXT.first()
               || {!
                  |? PROD_NXT.blank(1);
                     PROD_NXT.NEXT:=_prod_rej;
                     {? PL_NEXT.PL_OPER<>null()
                     ||
::                      poprzednia jest PL_OPER
                        PROD_REJ.index('PL_OPER');
                        PROD_REJ.prefix('PL',PL_NEXT.PL_OPER);
                        {? PROD_REJ.first()
                        || PROD_NXT.PROD_REJ:=PROD_REJ.ref();
                           PROD_NXT.add(1)
                        ?}
                     |? PL_NEXT.PL_OGR<>null()
                     ||
::                      poprzednia jest PL_OGR
                        PROD_REJ.index('PL_OGR');
                        PROD_REJ.prefix('PL',PL_NEXT.PL_OGR);
                        {? PROD_REJ.first()
                        || PROD_NXT.PROD_REJ:=PROD_REJ.ref();
                           PROD_NXT.add(1)
                        ?}
                     ?};
                     PL_NEXT.next()
                  !}
               ?};
               PROD_REJ.cntx_pop()
            ?};
            PL_OZ.next()
         !}
      ||
::       Brak PL_OZ, czyli kooperacja albo inna operacja w planie, ale bez obciążeń zasobów (nie dotyczy zamówienia)
::       Uwaga: ważna jest sekwencja pól ze względu na podczytywanie relacji (optymalizacja kodu)
         PROD_REJ.blank(1);
         PROD_REJ.STARTD:=PL_OPER.STARTD;
         PROD_REJ.STARTT:=PL_OPER.STARTT;
         PROD_REJ.ENDD:=PL_OPER.ENDD;
         PROD_REJ.ENDT:=PL_OPER.ENDT;
         PROD_REJ.PRIORITY:='N';
         PROD_REJ.SRODZ:='PL';
         PROD_REJ.SOURCE:=$PL_OPER.ref();
         PROD_REJ.PL_OPER:=PL_OPER.ref();
         PROD_REJ.PL_OGR:=null();
         PROD_REJ.GROP:=null();
         PROD_REJ.PL_OZ:=null();
         exec('fields_4rej','po_wyk');
         PROD_REJ.RP:='N';
         {? PL_OPER.ZGP<>null()
         || PL_OPER.ZGP();
            PROD_REJ.KONTROLA:=ZGP.KONTROLA;
            PROD_REJ.KJ_BAD:=ZGP.KJ_BAD;
            PROD_REJ.WYD:=exec('wyd','zl_guide');
            {? ZGP.DOK<>null
            || PROD_REJ.RP:='T'
            ?}
         || PROD_REJ.KONTROLA:='N';
            PROD_REJ.KJ_BAD:='N';
            PROD_REJ.WYD:=null()
         ?};
         PROD_REJ.ZL:=PL_OPER.PL_PART().ZL;
         PROD_REJ.M:=PL_PART.M;
         PROD_REJ.JM:=PL_PART.M().J;
         PROD_REJ.RES_SYM:='{KOOPERACJA}';
         PROD_REJ.RES_NAZ:='Kooperacja';
         PROD_REJ.IL:=PL_OPER.ILOSC-PL_OPER.IL_WYK;
         {? PROD_REJ.IL<0 || PROD_REJ.IL:=0 ?};
         PROD_REJ.ILW:=PL_OPER.IL_WYK;
         PROD_REJ.ILC:=PL_OPER.ILOSC;

::       Operacja wystartowana - jezeli ostatnia zarejestrowana nie ma daty zakonczenia
::       Operacja do potwierdzenia - jezeli ktorakolwiek rejestracja nie jest potwierdzona
         PROD_REJ.START:='N';
         PROD_REJ.POTW:='N';
         PL_WYK.index('PL_OZ');
         PL_WYK.prefix(PL_OZ.ref());
         {? PL_WYK.first()
         || PROD_REJ.POTW:='T';
            {!
            |? {? PL_WYK.ENDD=null() || PROD_REJ.START:='T' ?};
               {? PL_WYK.POTW<>'T' || PROD_REJ.POTW:='N' ?};
               PL_WYK.next()
            !}
         ?};

         PROD_REJ.OK:={? PROD_REJ.ILW>=PROD_REJ.ILC || 'T' || 'N' ?};
         PROD_REJ.PROBLEM:=PL_OPER.PROBLEM;
         PROD_REJ.PRAC:='N';
         PROD_REJ.BRYG:='N';
         PROD_REJ.KOOP:='T';
::       Podczytanie zlecenia
         PROD_REJ.ZL();
         PROD_REJ.A:={? ZL.STAN='O' || 'T' || 'N' ?};
         PROD_REJ.DOREJ:='N';
         {? PROD_REJ.add(1)
         ||
            _prod_rej:=PROD_REJ.ref();
            PROD_REJ.cntx_psh();

::          Nastepniki operacji
            PL_NEXT.index('PL_OPER');
            PL_NEXT.prefix(PL_OPER.ref());
            {? PL_NEXT.first()
            || {!
               |? PROD_NXT.blank(1);
                  PROD_NXT.PROD_REJ:=_prod_rej;
                  {? PL_NEXT.NEXT<>null()
                  ||
::                   nastepna jest PL_OPER
                     PROD_REJ.index('PL_OPER');
                     PROD_REJ.prefix('PL',PL_NEXT.NEXT);
                     {? PROD_REJ.first()
                     || PROD_NXT.NEXT:=PROD_REJ.ref();
                        PROD_NXT.add(1)
                     ?}
                  |? PL_NEXT.NEXT_OGR<>null()
                  ||
::                   nastepna jest PL_OGR
                     PROD_REJ.index('PL_OGR');
                     PROD_REJ.prefix('PL',PL_NEXT.NEXT_OGR);
                     {? PROD_REJ.first()
                     || PROD_NXT.NEXT:=PROD_REJ.ref();
                        PROD_NXT.add(1)
                     ?}
                  ?};
                  PL_NEXT.next()
               !}
            ?};

::          Poprzedniki operacji
            PL_NEXT.index('NEXT');
            PL_NEXT.prefix(PL_OPER.ref());
            {? PL_NEXT.first()
            || {!
               |? PROD_NXT.blank(1);
                  PROD_NXT.NEXT:=_prod_rej;
                  {? PL_NEXT.PL_OPER<>null()
                  ||
::                   poprzednia jest PL_OPER
                     PROD_REJ.index('PL_OPER');
                     PROD_REJ.prefix('PL',PL_NEXT.PL_OPER);
                     {? PROD_REJ.first()
                     || PROD_NXT.PROD_REJ:=PROD_REJ.ref();
                        PROD_NXT.add(1)
                     ?}
                  |? PL_NEXT.PL_OGR<>null()
                  ||
::                   poprzednia jest PL_OGR
                     PROD_REJ.index('PL_OGR');
                     PROD_REJ.prefix('PL',PL_NEXT.PL_OGR);
                     {? PROD_REJ.first()
                     || PROD_NXT.PROD_REJ:=PROD_REJ.ref();
                        PROD_NXT.add(1)
                     ?}
                  ?};
                  PL_NEXT.next()
               !}
            ?};
            PROD_REJ.cntx_pop()
         ?}
      ?};
      PL_OPER.next()
   !}
?};

:: Obsługa dla operacji grupowych na zasobach
PL_OGR.index('TM_START');
PL_OGR.prefix();
{? PL_OGR.first()
|| {!
   |?
::    Uwaga: ważna jest sekwencja pól ze względu na podczytywanie relacji (optymalizacja kodu)
      PROD_REJ.blank(1);
      PROD_REJ.STARTD:=PL_OGR.STARTD;
      PROD_REJ.STARTT:=PL_OGR.STARTT;
      PROD_REJ.ENDD:=PL_OGR.ENDD;
      PROD_REJ.ENDT:=PL_OGR.ENDT;
      PROD_REJ.PRIORITY:='N';
      PROD_REJ.SRODZ:='PL';
      PROD_REJ.SOURCE:=$PL_OGR.ref();
      PROD_REJ.PL_OPER:=null();
      PROD_REJ.PL_OGR:=PL_OGR.ref();
      PROD_REJ.GROP:=PL_OGR.GROP;
      PROD_REJ.PL_OZ:=null();
      exec('fields_4rej','po_wyk');

::    Operacja grupowa nie dotyczy bezposrednio zlecenia
      PROD_REJ.ZL:=null();

::    Operacja grupowa nie dotyczy bezposrednio produktu
      PROD_REJ.M:=null();
      PROD_REJ.JM:=null();

      PROD_REJ.RES_SYM:=PL_OGR.PL_RES().SYM;
      PROD_REJ.RES_NAZ:=PL_RES.NAZ;
      PROD_REJ.WYD:=exec('szukaj_ud_skl','schemat','PODZORG',PL_RES.WYD);
      PROD_REJ.IL:=PL_OGR.ILOSC-PL_OGR.IL_WYK;
      {? PROD_REJ.IL<0 || PROD_REJ.IL:=0 ?};
      PROD_REJ.ILW:=PL_OGR.IL_WYK;
      PROD_REJ.ILC:=PL_OGR.ILOSC;

::    Operacja wystartowana - jezeli ostatnia zarejestrowana nie ma daty zakonczenia
::    Operacja do potwierdzenia - jezeli ktorakolwiek rejestracja nie jest potwierdzona
      PROD_REJ.START:='N';
      PROD_REJ.POTW:='N';
      PL_WYK.index('PL_OGR');
      PL_WYK.prefix(PL_OGR.ref());
      {? PL_WYK.first()
      || PROD_REJ.POTW:='T';
         {!
         |? {? PL_WYK.ENDD=null() || PROD_REJ.START:='T' ?};
            {? PL_WYK.POTW<>'T' || PROD_REJ.POTW:='N' ?};
            PL_WYK.next()
         !}
      ?};

      PROD_REJ.OK:={? PROD_REJ.ILW>=PROD_REJ.ILC || 'T' || 'N' ?};
      PROD_REJ.PROBLEM:='N';
      PROD_REJ.PRAC:='N';
      PROD_REJ.BRYG:='N';
      PROD_REJ.KOOP:='N';
      PROD_REJ.KONTROLA:='N';
      PROD_REJ.KJ_BAD:='N';
      PROD_REJ.RP:='N';

::    Aktywne sa zaakceptowane grupy
      PROD_REJ.A:={? PROD_REJ.GROP().AKC='T' & GROP.STATUS='O' || 'T' || 'N' ?};

::    Czy do rejestracji, zalezy potem czy ma poprzednika
      PROD_REJ.DOREJ:='N';

      {? PROD_REJ.add(1)
      ||
         _prod_rej:=PROD_REJ.ref();
         PROD_REJ.cntx_psh();

::       Nastepniki operacji
         PL_NEXT.index('PL_OGR');
         PL_NEXT.prefix(PL_OGR.ref());
         {? PL_NEXT.first()
         || {!
            |? PROD_NXT.blank(1);
               PROD_NXT.PROD_REJ:=_prod_rej;
               {? PL_NEXT.NEXT<>null()
               ||
::                nastepna jest PL_OPER
                  PROD_REJ.index('PL_OPER');
                  PROD_REJ.prefix('PL',PL_NEXT.NEXT);
                  {? PROD_REJ.first()
                  || PROD_NXT.NEXT:=PROD_REJ.ref();
                     PROD_NXT.add(1)
                  ?}
               ||
::                nastepna jest PL_OGR
                  PROD_REJ.index('PL_OGR');
                  PROD_REJ.prefix('PL',PL_NEXT.NEXT_OGR);
                  {? PROD_REJ.first()
                  || PROD_NXT.NEXT:=PROD_REJ.ref();
                     PROD_NXT.add(1)
                  ?}
               ?};
               PL_NEXT.next()
            !}
         ?};

::       Poprzedniki operacji
         PL_NEXT.index('NEXT_OGR');
         PL_NEXT.prefix(PL_OGR.ref());
         {? PL_NEXT.first()
         || {!
            |?
               PROD_NXT.blank(1);
               PROD_NXT.NEXT:=_prod_rej;
               {? PL_NEXT.PL_OPER<>null()
               ||
::                poprzednia jest PL_OPER
                  PROD_REJ.index('PL_OPER');
                  PROD_REJ.prefix('PL',PL_NEXT.PL_OPER);
                  {? PROD_REJ.first()
                  || PROD_NXT.PROD_REJ:=PROD_REJ.ref();
                     PROD_NXT.add(1)
                  ?}
               ||
::                poprzednia jest PL_OGR
                  PROD_REJ.index('PL_OGR');
                  PROD_REJ.prefix('PL',PL_NEXT.PL_OGR);
                  {? PROD_REJ.first()
                  || PROD_NXT.PROD_REJ:=PROD_REJ.ref();
                     PROD_NXT.add(1)
                  ?}
               ?};
               PL_NEXT.next()
            !}
         ?};

         PROD_REJ.cntx_pop()
      ?};

      PL_OGR.next()
   !}
?};

:: Ustalenie stanu do rejestracji dla poszczegolnych operacji
PROD_REJ.index('PL_OPER');
PROD_REJ.prefix('PL');
{? PROD_REJ.first()
|| {!
   |? _il:=exec('il_pop','po_wyk',PROD_REJ.ref());
      {? _il.IL_POP>PROD_REJ.ILW | ~_il.MAX || PROD_REJ.DOREJ:='T'; PROD_REJ.put() ?};
      obj_del(_il);

      PROD_REJ.next()
   !}
?};

Cntx.pop(PROD_REJ,PROD_NXT,PL_OZ,PL_OPER,PL_OGR,PL_PART,ZL,PL_NEXT);
{? _dialog || FUN.info('Zainicjowano tabelę do rejestracji produkcji dla planu operacyjnego.'@) ?};
''


\display_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsluga 'wyświetl' w oknie rejestracji wykonan - plan operacyjny
::       Kontekst pracy: PROD_REJ
::  OLD: \display_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.PL_OPER<>null()
||
:: Zaplanowana operacja
   PROD_REJ.PL_OPER();
   _red:=PL_OPER.mk_edit('Operacja w planie'@,,'ploperedit');
   PL_OPER.win_esep(_red,'Dane podstawowe'@);
   PL_OPER.win_efld(_red,,'OPIS',,,40,,,'Opis'@);
   PL_OPER.win_esep(_red,'Czasy'@);
   PL_OPER.win_efld(_red,,'DURATION',,,15,4,,'Czas trwania (ogółem) [min]'@);
   PL_OPER.win_efld(_red,,'TP',,,15,4,,'Czas przygotowawczy [min]'@);
   PL_OPER.win_efld(_red,,'WYK',,,15,4,,'Czas wykonany [min]'@);
   PL_OPER.win_esep(_red,'Ilości'@);
   PL_OPER.win_efld(_red,,'ILOSC',,,15,ST.DOKL,,'Ilość do wykonania'@);
   PL_OPER.win_efld(_red,,'IL_WYK',,,15,ST.DOKL,,'Ilość wykonana'@);
   PL_OPER.win_efld(_red,,'IL_BRAK',,,15,ST.DOKL,,'Ilość braków'@);
   PL_OPER.win_edit(_red);
   {? VEK.TERM='T'
   || exec('uni_display','#desktop',PL_OPER,_red,'Operacja w planie'@,16,3,'ploperedit')
   || PL_OPER.display()
   ?}
||
:: Zaplanowana grupa operacji
   PROD_REJ.PL_OGR();
   _red:=PL_OGR.mk_edit('Grupa operacji w planie'@,,'groperedit');
   PL_OGR.win_esep(_red,'Dane podstawowe'@);
   PL_OGR.win_efld(_red,,'OPIS',,,40,,,'Opis'@);
   PL_OGR.win_esep(_red,'Czasy'@);
   PL_OGR.win_efld(_red,,'DURATION',,,15,4,,'Czas trwania (ogółem) [min]'@);
   PL_OGR.win_efld(_red,,'WYK',,,15,4,,'Czas wykonany [min]'@);
   PL_OGR.win_esep(_red,'Ilości'@);
   PL_OGR.win_efld(_red,,'ILOSC',,,15,0,,'Ilość uruchomień'@);
   PL_OGR.win_efld(_red,,'IL_WYK',,,15,0,,'Ilość wykonana'@);
   PL_OGR.win_efld(_red,,'IL_POTW',,,15,0,,'Ilość potwierdzona'@);
   PL_OGR.win_edit(_red);
   {? VEK.TERM='T'
   || exec('uni_display','#desktop',PL_OGR,_red,'Grupa operacji w planie'@,16,3,'groperedit')
   || PL_OGR.display()
   ?}
?};
~~


\mat_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Informacja o materiałach wyświetlana z poziomu rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::  OLD: \mat_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
ZGP.prefix();
{? ZGP.seek(PROD_REJ.PL_OPER().ZGP)
|| exec('mat_4zgp','zl_wyk')
|| FUN.info('Pozycja planu nie jest powiązana z przewodnikiem zlecenia.'@)
?};
~~


\fields_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Ustala wartosci pol PROD_REJ zalezne od innych pol
::       Do uzycia w formulach exec('update_4rej','pl_wyk'), exec('load_4rej','pl_wyk')
::  OLD: \fields_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.PL_OPER<>null()
|| PROD_REJ.OPIS:=PROD_REJ.PL_OPER().SYMBOL+' '+PL_OPER.OPIS
|? PROD_REJ.PL_OGR<>null()
|| PROD_REJ.OPIS:=PROD_REJ.PL_OGR().SYMBOL+' (Grupa operacji) '+PL_OGR.OPIS
|| PROD_REJ.OPIS:='???'
?};
PROD_REJ.OPER:='['+$PROD_REJ.STARTD+' '+$PROD_REJ.STARTT+'] '+PROD_REJ.OPIS;
~~


\problem_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsługa przycisku 'Zgłoś problem' w oknie rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::  OLD: \problem_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
exec('problem','prod_rej',PROD_REJ.PL_OPER);
~~


\xproblem_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Obsługa przycisku 'Rozwiąż problem' w oknie rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::----------------------------------------------------------------------------------------------------------------------
exec('xproblem','prod_rej',PROD_REJ.PL_OPER);
~~


\doc_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Informacja o dokumentach wyświetlana z poziomu rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::  OLD: \doc_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
ZGP.prefix();
{? ZGP.seek(PROD_REJ.PL_OPER().ZGP)
|| _env_oper:=exec('env_oper','tech_oper');
   _env_oper.used:=1;
   params_set('env_oper',_env_oper);
   params_exec('doc_4zgp','zl_guide')
|| FUN.info('Pozycja planu nie jest powiązana z przewodnikiem zlecenia.'@)
?};
~~


\npu_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Informacja o NPU wyświetlana z poziomu rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::----------------------------------------------------------------------------------------------------------------------
ZGP.prefix();
{? ZGP.seek(PROD_REJ.PL_OPER().ZGP)
|| _env_tool:=exec('env_tool','tech_tool');
   _env_tool.used:=1;
   params_set('env_tool',_env_tool);
   params_exec('npu_4zgp','zl_guide')
|| FUN.info('Pozycja planu nie jest powiązana z przewodnikiem zlecenia.'@)
?};
~~


\start_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsługa przycisku 'Start' w oknie rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::  OLD: \start_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('access','po_wyk') || return(0) ?};

_dalej:=0;
_tp_end:=0;

:: Walidacje

{? PROD_REJ.PROBLEM='T'
|| FUN.info('Zgłoszony problem — nie można rejestrować wykonania.'@);
   return(_dalej)
?};

{? date(ST.AR,ST.AM,0)<>date(,,0)
|| FUN.info('Nie można rejestrować wykonania — wybrany okres obrachunkowy musi być zgodny z bieżącą datą.'@);
   return(_dalej)
?};

{? PROD_REJ.OK='T'
|| FUN.info('Zapis niedostępny do rejestracji — operacja już wykonana.'@);
   return(_dalej)
?};

{? PROD_REJ.A<>'T'
|| FUN.info('Zapis nieaktywny — nie można rejestrować wykonania.'@);
   return(_dalej)
?};

{? exec('get','#params',500632,2)='T' & PROD_REJ.DOREJ<>'T'
|| FUN.info('Zapis niedostępny do rejestracji — najpierw należy zarejestrować operacje poprzedzające.'@);
   return(_dalej)
?};

{? PROD_REJ.PL_OGR<>null()
||
:: Sprawdzenie, czy dla operacji grupowej wszystkie zlecenia sa otwarte
   GROPP.index('GROP');
   GROPP.prefix(PROD_REJ.GROP);
   {? GROPP.first()
   || {!
      |?
         {? GROPP.ZGP().NRZLP().ZLEC().STAN<>'O'
         || FUN.info(
               'W skład grupy wchodzi operacja zlecenia %1, które nie jest otwarte.\n'
               'Nie można rejestrować wykonania dla tej grupy.'[ZL.SYM]
            );
            return(_dalej)
         ?};
         GROPP.next()
      !}
   ?}
?};

:: Rejestracja

{? PROD_REJ.PL_OGR<>null()
||
:: Grupa operacji
   PL_WYK.index('PL_OGR');
   PL_WYK.prefix(PROD_REJ.PL_OGR);
   {? PL_WYK.last()
   || {? PL_WYK.ENDD=null()
      || FUN.info('Rozpoczęta operacja nie została zakończona — nie można rejestrować nowego wykonania.'@)
      || _dalej:=1
      ?}
   || _dalej:=1
   ?}
|? PROD_REJ.PL_OZ<>null()
||
:: Operacja pojedyncza
   PL_WYK.index('APL_OZ');
   PL_WYK.prefix('N',PROD_REJ.PL_OZ);
   '-*-e-kioski-*-';
   {? PL_WYK.last()
   || {! |?
         {? PL_WYK.ENDD=null() & (VEK.TERM<>'T' | (VEK.TERM='T' & (PL_WYK.P=VEK.P | (PL_WYK.ZLBR & PL_WYK.ZLBR=VEK.A_ZLBR))))
         || FUN.info('Rozpoczęta operacja nie została zakończona — nie można rejestrować nowego wykonania.'@)
         || _dalej:=1
         ?};
         _dalej & VEK.TERM='T' & PL_WYK.prev()
      !}
   || _dalej:=1
   ?};
:: Ustalenie, czy rejestracja operacji Tpz zostala zakonczona
   {? PROD_REJ.PL_OPER().TP<>0
   || {? PL_WYK.last()
      || {!
         |? {? PL_WYK.OK='T' || _tp_end:=1 ?};
            PL_WYK.prev() & _tp_end=0
         !}
      ?}
   ?}
|? PROD_REJ.PL_OPER<>null()
||
:: Kooperacja
   PL_WYK.index('APL_OPER');
   PL_WYK.prefix('N',PROD_REJ.PL_OPER);
   {? PL_WYK.last()
   || {? PL_WYK.ENDD=null()
      || FUN.info('Rozpoczęta operacja nie została zakończona — nie można rejestrować nowego wykonania.'@)
      || _dalej:=1
      ?}
   || _dalej:=1
   ?}
||
   _dalej:=1
?};

:: Decyzja o rejestracji Tpz
_tpz:=0;
{? _dalej
|| {? PROD_REJ.KOOP<>'T' &
      PROD_REJ.PL_OPER<>null() &
      PROD_REJ.GROP=null() &
      PROD_REJ.PL_OPER().TP<>0 &
      _tp_end=0
   || _tpz:=FUN.ask('Operacja z Tpz, czy chcesz zarejestrować przezbrojenie?'@)
   ?}
?};

:: Czy rejestracja pojedynczego pracownika (P) czy brygady, czy kooperacji?
_zlbr:=_pracownik:=null();
{? _dalej
||
:: Kooperacja - tu bedzie w przyszlosci wybor kontrahenta (kooperanta)
   {? PROD_REJ.KOOP='T'
   || _dalej:=1

:: Operacja tylko z czasem maszynowym
   |? _tpz=0 & PROD_REJ.PL_OPER<>null() & PROD_REJ.PL_OPER().ZGP().NTIME=0
   || {? VEK.TERM='T'
      || _pracownik:=VEK.P;
         {? _pracownik=null()
         || _dalej:=0
         ?}
      || _dalej:=1
      ?}

:: Operacja brygadowa
   |? (PROD_REJ.PL_OPER<>null() & PROD_REJ.PL_OPER().ZGP().BRYG='T') |
      (PROD_REJ.PL_OGR<>null() & exec('grop_bryg','zl_grop',PROD_REJ.PL_OGR().GROP)='T')
   ||
      '-*-e-kioski-*-';
      {? VEK.TERM='T'
      || {? VEK.A_ZLBR=null()
         || FUN.info(
               'Nie wybrano brygady z którą aktualnie pracujesz.\n'
               'Uruchomienie operacji niemożliwe.'@
            )
         ?};
         _zlbr:=VEK.A_ZLBR
      || _zlbr:=exec('zlbr_select','prod_rej')
      ?};
      exec('zlbs_f_set','zasoby',_zlbr,date());
      {? _zlbr=null()
      || _dalej:=0
      |? ZLBS.f_size()=0
      || FUN.info('Pusty skład brygady na dzień %1.'@[$date()]);
         _dalej:=0
      ?}

:: Operacja pracownika
   ||
      '-*-e-kioski-*-';
      {? VEK.TERM='T'
      || _pracownik:=VEK.P
      ||
         {? exec('is_fast_wyk','prod_rej')>0
         || _pracownik:=exec('p_select_simple','prod_rej')
         || _pracownik:=exec('p_select','prod_rej')
         ?}
      ?};
      {? _pracownik=null()
      || _dalej:=0
      ?}
   ?}
?};

{? _dalej
|| PROD_REJ.PL_OPER();
   VPRODREJ.PROD_REJ:=PROD_REJ.ref();
   VPRODREJ.M:=PROD_REJ.M;
   VPRODREJ.OPER:=PROD_REJ.OPER;
   VPRODREJ.JM:=PROD_REJ.JM;
   VPRODREJ.EDIT_ILP:=0;
   VPRODREJ.EDIT_IL:=1;
   VPRODREJ.EDIT_OK:=1;
   VPRODREJ.STARTD:=date();
   VPRODREJ.STARTT:=time();
:: Tutaj mozna sterowac redagowaniem daty i godziny rozpoczecia operacji
   VPRODREJ.EDIT_STA:=1;
   {? PROD_REJ.GROP<>null()
   || VPRODREJ.win_edit('GR_START');
      VPRODREJ.EDIT_IL:=0;
      VPRODREJ.IL_PLAN:=PROD_REJ.ILC;
      VPRODREJ.IL_DOREJ:=VPRODREJ.IL:=1;
::         {? VPRODREJ.MAX || VPRODREJ.IL_POP-PL_OPER.IL_WYK || PROD_REJ.IL ?};
      VPRODREJ.IL_BRAK:=0;
      VPRODREJ.DOKL:=0;
      VPRODREJ.TP:='N'
   |? PL_OPER.TP<>0 & _tp_end=0 & (
         {? _tpz=0 & exec('get','#params',500632,2)='T'
         || FUN.info('Operacja nie może być rozpoczęta — najpierw należy zakończyć wykonywanie operacji Tpz.'@);
            return(0)
         || _tpz
         ?} )
   || VPRODREJ.win_edit('PL_ST_TP');
      VPRODREJ.IL_PLAN:=0;
      VPRODREJ.IL_DOREJ:=0;
      VPRODREJ.IL_BRAK:=0;
      VPRODREJ.DOKL:=0;
      VPRODREJ.TP:='T'
   || VPRODREJ.win_edit('PL_START');
      VPRODREJ.IL_PLAN:=PROD_REJ.ILC;
      '-*-e-kioski-*-';
      VPRODREJ.IL_DOREJ:=VPRODREJ.IL:={? VEK.TERM='T'
                                      || 0
                                      || {? VPRODREJ.MAX || VPRODREJ.IL_POP-PL_OPER.IL_WYK-PL_OPER.DEK_IL || PROD_REJ.IL ?}
                                      ?};
      VPRODREJ.IL_BRAK:=0;
      VPRODREJ.DOKL:=PROD_REJ.M().DOKL;
      VPRODREJ.TP:='N'
   ?};
   VPRODREJ.IL:=VPRODREJ.IL_DOREJ;
   VPRODREJ.OK:='N';

   _valid:="
      '-*-e-kioski-*-';
      {? VPRODREJ.TP='N' & VPRODREJ.IL=0 & VPRODREJ.IL_BRAK=0 & VEK.TERM<>'T'
      || FUN.info('Ilość musi być określona.'@);
         'IL'
      |? VPRODREJ.TP='N' & VPRODREJ.IL<0 & PROD_REJ.GROP=null() & VEK.TERM<>'T'
      || FUN.info('Proszę podać ilość większą lub równą zero.'@);
         'IL'
      |? VPRODREJ.TP='N' & VPRODREJ.IL<=0 & PROD_REJ.GROP<>null()
      || FUN.info('Proszę podać ilość większą od zera.'@);
         'IL'
      |? exec('get','#params',500632,2)='T' & VPRODREJ.TP='N' & VPRODREJ.MAX & VPRODREJ.IL>VPRODREJ.IL_DOREJ
      || FUN.info('Proszę podać ilość nie większą niż %1'@[$VPRODREJ.IL_DOREJ]);
         'IL'
      |? VPRODREJ.STARTD=date(0,0,0)
      || FUN.info('Data początkowa musi być podana.'@);
         'STARTD'
      |? date(ST.AR,ST.AM,0)<>date(VPRODREJ.STARTD~1,VPRODREJ.STARTD~2,0)
      || FUN.info('Data początkowa musi należeć do wybranego okresu.'@);
         'STARTD'
      || 1
      ?}
   ";
   '-*-e-kioski-*-';
   _chk:={? VEK.TERM='T'
         || _ret:=_valid();
            {? type_of(_ret)=1
            || _ret
            |? type_of(_ret)=2
            || _ret=''
            || 0
            ?}
         || 0
         ?};
   {? _chk | VPRODREJ.edit(_valid)
   ||
      {? PROD_REJ.get()
      || PL_WYK.blank(1);
         PL_WYK.AUTO:='N';
         PL_WYK.PL_OPER:=PROD_REJ.PL_OPER;
         PL_WYK.PL_OGR:=PROD_REJ.PL_OGR;
         PL_WYK.ZL:=PROD_REJ.ZL;
         PL_WYK.STARTD:=exec('get','daty',VPRODREJ.STARTD);
         PL_WYK.STARTT:=VPRODREJ.STARTT;
         PL_WYK.ILOSC:=VPRODREJ.IL;
         PL_WYK.P:=_pracownik;
         PL_WYK.ZLBR:=_zlbr;
         PL_WYK.USER:=OPERATOR.USER;
         PL_WYK.UID:=exec('uid','#blank');
         PL_WYK.POTW:='N';
         PL_WYK.TP:=VPRODREJ.TP;
         PL_WYK.OK:=VPRODREJ.OK;
         {? PL_OPER.ZGP<>null() & PL_OPER.ZGP().KJ_BAD<>'N'
         || PL_WYK.KJ_DONE:='P'
         || PL_WYK.KJ_DONE:='N'
         ?};

::       Uzupelnienie zapisow wszystkich PL_OZ dla danego PL_OPER (pozostale zasoby dla danej operacji)
::       Dla kooperacji (brak zasobow) tylko jeden PL_OPER
         Cntx.psh(PL_WYK);
         PL_WYK.prefix();

         PL_OZ.index('PL_OPER');
         PL_OZ.prefix(PROD_REJ.PL_OPER);
         {? PL_OZ.first()
         || {!
            |? PL_WYK.PL_OZ:=PL_OZ.ref();
               PL_WYK.add(0);
               PL_OZ.next()
            !}
         || PL_WYK.PL_OZ:=null();
            PL_WYK.add(0)
         ?};

         Cntx.pop(PL_WYK)

      || FUN.emsg('Nie można wystartować operacji.\nOperacja została usunięta.'@);
         PROD_REJ.f_del();
         _dalej:=0
      ?}
   ||
      _dalej:=0
   ?};
   '-*-e-kioski-*-';
   {? VEK.TERM='T' & _dalej
   ||
      {? exec('upr_kierownik','ekioski')=0 & exec('get_user_param','ekioski',8780,type_of(''))='T'
      || eSelect.key_Logout:=1
      ?};
      sel_exit()
   ?}
?};

_dalej


\stop_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsługa przycisku 'Koniec' w oknie rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::  OLD: \stop_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('access','po_wyk') || return(0) ?};

_res:=0;

{? PROD_REJ.PROBLEM='T'
|| FUN.info('Zgłoszony problem — nie można rejestrować wykonania.'@);
   return(_res)
?};

{? date(ST.AR,ST.AM,0)<>date(,,0)
|| FUN.info('Nie można rejestrować wykonania — wybrany okres obrachunkowy musi być zgodny z bieżącą datą.'@);
   return(_res)
?};

{? PROD_REJ.START='T'
||
   {? PROD_REJ.PL_OGR<>null()
   ||
::    Grupa operacji
      PL_WYK.index('PL_OGR');
      PL_WYK.prefix(PROD_REJ.PL_OGR);
      {? PL_WYK.first()
      || {!
         |? '-*-Wersja lasery- 07.04.2015';
            {? exec('getUsrEndPlWyk','ekioski') & PL_WYK.ENDD=null() & PL_WYK.ENDT=time(0,0,0)
            || _res:=exec('pl_wyk_koniec','po_wyk');
               return(_res)
            ?};
            PL_WYK.next()
         !}
      ?}
   |? PROD_REJ.PL_OZ<>null()
   ||
::    Pojedyncza operacja
      PL_WYK.index('APL_OZ');
      PL_WYK.prefix('N',PROD_REJ.PL_OZ);
      {? PL_WYK.first()
      || {!
         |? '-*-Wersja lasery- 07.04.2015';
            {? exec('getUsrEndPlWyk','ekioski') & PL_WYK.ENDD=null() & PL_WYK.ENDT=time(0,0,0)
            || _res:=exec('pl_wyk_koniec','po_wyk');
               return(_res)
            ?};
            PL_WYK.next()
         !}
      ?}
   |? PROD_REJ.PL_OPER<>null()
   ||
::    Kooperacja
      PL_WYK.index('APL_OPER');
      PL_WYK.prefix('N',PROD_REJ.PL_OPER);
      {? PL_WYK.first()
      || {!
         |? '-*-Wersja lasery- 07.04.2015';
            {? exec('getUsrEndPlWyk','ekioski') & PL_WYK.ENDD=null() & PL_WYK.ENDT=time(0,0,0)
            || _res:=exec('pl_wyk_koniec','po_wyk');
               return(_res)
            ?};
            PL_WYK.next()
         !}
      ?}
   ?}
|| FUN.info('Operacji nierozpoczętej nie można zakończyć.'@)
?};

_res


\pl_wyk_koniec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsługa przycisku 'Koniec' w oknie zarejestrowanych wykonań (PL_WYK) oraz ogólnej rejestracji (PROD_REJ)
::       Kontekst pracy: PL_WYK, PROD_REJ
::  OLD: \pl_wyk_koniec/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_dalej:=0;

{? PL_WYK.ENDD=null() & PL_WYK.ENDT=time(0,0,0)
||
   {? PL_WYK.TM_START<PL_WYK.tm_stamp()-8*60*exec('minute','#tm_stamp')
   || _dalej:=FUN.ask(
         'Czas realizacji pracy większy niż 8 godzin.\n\n'
         'Czy na pewno chcesz zarejestrować zakończenie operacji?'@
      )
   || _dalej:=1
   ?};
   {? _dalej
   ||
      VPRODREJ.PROD_REJ:=PROD_REJ.ref();
      VPRODREJ.OPER:=PROD_REJ.OPER;
      VPRODREJ.M:=PROD_REJ.M;
      VPRODREJ.JM:=PROD_REJ.JM;
      VPRODREJ.IL_PLAN:=PROD_REJ.ILC;
      VPRODREJ.IL_DOREJ:=PL_WYK.ILOSC;
      VPRODREJ.IL:=PL_WYK.ILOSC;
      VPRODREJ.IL_BRAK:=0;
      VPRODREJ.EDIT_ILP:=0;
      VPRODREJ.EDIT_ILB:=1;
      VPRODREJ.EDIT_OK:=1;
      VPRODREJ.STARTD:=PL_WYK.STARTD().DATA;
      VPRODREJ.STARTT:=PL_WYK.STARTT;
      VPRODREJ.ENDD:=date();
      VPRODREJ.ENDT:=time();
::    Tutaj mozna sterowac redagowaniem daty i godziny rozpoczecia i zakonczenia operacji
      VPRODREJ.EDIT_STA:=0;
      VPRODREJ.EDIT_END:=1;
      VPRODREJ.TP:=PL_WYK.TP;
      VPRODREJ.ZPARN:=null();
::      VPRODREJ.PLACE:=PL_WYK.PL_OPER().ZGP().PLACE;


      {? PROD_REJ.GROP<>null()
      || VPRODREJ.win_edit('GR_STOP');
         VPRODREJ.DOKL:=0;
         VPRODREJ.EDIT_IL:=0;
::       Jeżeli do grupy przypisany 1 zasób to podpowiadam
         GROPS.cntx_psh();
         PL_RES.cntx_psh();
         GROPS.index('GROP');
         GROPS.prefix(PROD_REJ.GROP);
         {? GROPS.size()=1 & GROPS.first()
         || VPRODREJ.PLACE:=GROPS.PL_RES().FROM_STA
         || VPRODREJ.PLACE:=null()
         ?};
         PL_RES.cntx_pop();
         GROPS.cntx_pop()
      |? VPRODREJ.TP='T'
      || VPRODREJ.win_edit('PL_SP_TP');
         VPRODREJ.DOKL:=0;
         VPRODREJ.EDIT_IL:=0;
         VPRODREJ.PLACE:=PL_WYK.PL_OPER().ZGP().PLACE
      || VPRODREJ.win_edit('PL_STOP');
         VPRODREJ.DOKL:=PROD_REJ.M().DOKL;
         VPRODREJ.EDIT_IL:=1;
         VPRODREJ.PLACE:=PL_WYK.PL_OPER().ZGP().PLACE
      ?};

      _zl_synchro:=0;
      {? PROD_REJ.SRODZ='PL' & exec('get','#params',500621,2)='P'
      ||
::       Jesli jestem na planie operacyjnym to wypelniam partie tylko
::       jesli jest wlaczona synchronizacja PL->ZL czyli par 500621 ma wartosc P
         _zl_synchro:=1
      ?};

      {? _zl_synchro>0
      ||
::       Sprawdzam czy pole z partią musi być wypełnione
         _party_req:=exec('party_req','zl_wyk',PROD_REJ.ZL);
         {? _party_req>0
         ||
::          Sprawdzam czy zlecenie produkcyjne jest zleceniem na ktore rejestruje robocizne
::          jesli tak, to moge sprobowac podpowiedziec partie. Jesli nie to pewnie jest przypadek
::          zlecenia zlozonego i nie moge podpowiedziec partii
::          Jesli zlecenie jest partiowane to sprawdzam ile partii ma przewodnik - jesli tylko jedna
::          to podpowiadam partie
            ZPARN.cntx_psh();
            ZPARN.index('ZGH');
            _zgh:=PL_WYK.PL_OPER().ZGP().NRZLP;

            {? _zgh<>null()
            || _party_zgh:=exec('party_first_zgh','zl_guide',_zgh);
               {? _party_zgh<>null()
               ||
                  ZPARN.prefix(_party_zgh);
                  {? ZPARN.size()=1
                  || {? ZPARN.first()
                     || VPRODREJ.ZPARN:=ZPARN.ref()
                     ?}
                  ?}
               ?}
            ?};
            ZPARN.cntx_pop();
            ~~
         ?}
      ?};

      _valid:="
         _result:='';
         '-*-e-kioski-*-';
         _il:={? VEK.TERM='T' & VPRODREJ.TP='N' || PROD_REJ.IL || PL_WYK.ILOSC ?};
         _prec:={? PROD_REJ.M || exec('jaka_dok_m','jm',PROD_REJ.M) || 0 ?};
         _pos_il:=($VPRODREJ.IL)*','; _pos_brak:=($VPRODREJ.IL_BRAK)*',';
         _dec_il:=$(_pos_il-($VPRODREJ.IL)); _dec_brak:=$(_pos_brak-($VPRODREJ.IL_BRAK));
         {? VEK.TERM='T' & _pos_il>0 & +_dec_il>_prec
         || FUN.info(
               'Wprowadzono za dużo znaków po przecinku do pola \'\'Ilość dobra\'\'.\n'
               'Wprowadzone: %1, dopuszczalna dokładność: %2.'@
               [$+_dec_il,$_prec]
            );
            _result:='IL'
         |? VEK.TERM='T' & _pos_brak>0 & +_dec_brak>_prec
         || FUN.info(
               'Wprowadzono za dużo znaków po przecinku do pola \'\'Ilość braków\'\'.\n'
               'Wprowadzone: %1, dopuszczalna dokładność: %2.'@
               [$+_dec_brak,$_prec]
            );
            _result:='IL_BRAK'
         |? VPRODREJ.TP='N' & VPRODREJ.IL=0 & VPRODREJ.IL_BRAK=0
         || FUN.info('Proszę podać ilość większą od zera.'@);
            _result:='IL'
         |? VPRODREJ.TP='N' & VPRODREJ.IL<0
         || FUN.info('Ilość nie może być ujemna.'@);
            _result:='IL'
         |? VPRODREJ.TP='N' & VPRODREJ.IL_BRAK<0
         || FUN.info('Ilość braków nie może być ujemna.'@);
            _result:='IL_BRAK'
         |? VPRODREJ.TP='N' & VPRODREJ.IL+VPRODREJ.IL_BRAK>_il
         || FUN.info('Suma ilości zarejestrowanej nie może być większa od pobranej do wykonania.'@);
            _result:='IL'
         |? VPRODREJ.TP='N' & VPRODREJ.IL+VPRODREJ.IL_BRAK<_il & VEK.TERM<>'T'
         || FUN.info('Suma ilości zarejestrowanej nie może być mniejsza od pobranej do wykonania.'@);
            _result:='IL'
         |? exec('create','#tm_stamp',VPRODREJ.STARTD,VPRODREJ.STARTT)>exec('create','#tm_stamp',VPRODREJ.ENDD,VPRODREJ.ENDT)
         || FUN.info('Proszę podać koniec operacji późniejszy niż początek.'@);
            _result:='ENDD'
         |? date(ST.AR,ST.AM,0)<>date(VPRODREJ.ENDD~1,VPRODREJ.ENDD~2,0)
         || FUN.info('Data końcowa musi należeć do wybranego okresu.'@);
            _result:='ENDD'
         |? exec('get','#params',500632,2)='T' & VPRODREJ.MAX & VPRODREJ.IL>VPRODREJ.IL_DOREJ
         || FUN.info('Proszę podać ilość nie większą niż %1.'@[$VPRODREJ.IL_DOREJ]);
            _result:='IL'
         |? VPRODREJ.PLACE=null()
         || FUN.info('Należy wskazać stanowisko, na którym została wykonana operacja.'@);
            _result:='PLACE'
         ?};
::       Kontrola partii
         {? _result=''
         ||
            _zl_synchro:=0;
            {? PROD_REJ.SRODZ='PL' & exec('get','#params',500621,2)='P'
            ||
::             Jesli jestem na planie operacyjnym to wypelniam partie tylko
::             jesli jest wlaczona synchronizacja PL->ZL czyli par 500621 ma wartosc P
               _zl_synchro:=1
            ?};

            {? _zl_synchro>0
            ||
::             Sprawdzam czy zlecenie na ktorym powstaje produkt jest zleceniem partiowanym
::               _party:=exec('zlec_party','zl_common',_prod_zl);
::             Sprawdzam czy pole z partią musi być wypełnione
               _party_req:=exec('party_req','zl_wyk',PROD_REJ.ZL);

               {? _party_req>0
               ||
                  {? VPRODREJ.ZPARN=null()
                  || _party_zl:=exec('party_first','zl_link',PROD_REJ.ZL);
                     _zl_sym:=exec('record','#to_string',_party_zl);
                     _msg:='Zlecenie: %1 jest partiowane.\n'
                           'Należy wskazać partię do której zostanie przypisana rejestrowana robocizna.'@[_zl_sym];
                     FUN.emsg(_msg);
                     _result:='ZPARN'
                  ?}
               ?}
            ?}
         ?};
         _result
      ";

      '-*-e-kioski-*-';
      {? VEK.TERM='T'
      || _chk:=exec('setEndVar','ekioski',_valid)
      || _chk:=0
      ?};

      {? _chk>=0 & (_chk | VPRODREJ.edit(_valid))
      ||
::       Uzupelnienie zapisow wszystkich PL_OZ dla danego PL_OPER (pozostale zasoby dla danej operacji)
         Cntx.psh(PL_WYK);

         PL_WYK.index('UID');
         PL_WYK.prefix(PL_WYK.UID);
         {? PL_WYK.first()
         || {!
            |?
               '-*-e-kioski-*-';
               _can_continue:=1;
               {? VEK.TERM='T'
               ||
                  {? VPRODREJ.TP='N'
                  || PL_WYK.ILOSC:=VPRODREJ.IL+VPRODREJ.IL_BRAK;
                     PL_WYK.STARTT:=VPRODREJ.STARTT
                  |? VPRODREJ.TP='T'
                  || PL_WYK.STARTT:=VPRODREJ.STARTT;
                     _choice:=FUN.choice('Czy zakończyć wykonywanie operacji Tpz?'@,,'Tak'@,'Nie'@);
                     {? _choice=1
                     || VPRODREJ.OK:='T'
                     |? _choice=2
                     || VPRODREJ.OK:='N'
                     || _dalej:=0
                     ?}
                  ?}
               ?};
               {? _dalej
               || PL_WYK.ENDD:=exec('get','daty',VPRODREJ.ENDD);
                  PL_WYK.ENDT:=VPRODREJ.ENDT;
                  {? PL_WYK.PL_OPER().ZGP<>null() & PL_WYK.PL_OPER().ZGP().KJ_BAD<>'N'
                  || PL_WYK.DEK_IL:=VPRODREJ.IL;
                     PL_WYK.DEK_BR:=VPRODREJ.IL_BRAK
                  || PL_WYK.IL_WYK:=VPRODREJ.IL;
                     PL_WYK.IL_BRAK:=VPRODREJ.IL_BRAK
                  ?};
                  PL_WYK.ZPARN:=VPRODREJ.ZPARN;
                  PL_WYK.PLACE:=VPRODREJ.PLACE;
                  PL_WYK.OK:=VPRODREJ.OK;
                  {? PL_WYK.put()
                  || exec('end_akord_4po','zl_wyk',PL_WYK.UID)
                  ?}
               ?};
               PL_WYK.next()
            !}
         ?};

         Cntx.pop(PL_WYK)
      ||
         _dalej:=0
      ?};
      undefine()
   ?}
||
   FUN.info('Operacja już zakończona.'@)
?};

_dalej


\rej_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obluga przycisku 'Rejestracje' w oknie rejestracji wykonan - plan zasobow
::   WE: _a - czy zapis jest zablokowany przez innego operatora
::       Kontekst pracy: PROD_REJ
::  OLD: \rej_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.PL_OZ<>null()
||
:: Pojedyncza operacja
   PL_WYK.index('PL_OZ');
   PL_WYK.prefix(PROD_REJ.PL_OZ);
   PL_WYK.win_sel('WER');
   PL_WYK.hdr_sel();
   PL_WYK.hdr_sel({? _a || ' — '+'PODGLĄD'@ || '' ?});
   PL_WYK.win_edit('RED');
   PL_WYK.select(,,,{? _a || 'PUCWIO' || '' ?})
|? PROD_REJ.PL_OGR<>null()
||
:: Grupa operacji
   PL_WYK.index('PL_OGR');
   PL_WYK.prefix(PROD_REJ.PL_OGR);
   PL_WYK.win_sel('WER');
   PL_WYK.hdr_sel();
   PL_WYK.hdr_sel({? _a || ' — '+'PODGLĄD'@ || '' ?});
   PL_WYK.win_edit('RED');
   PL_WYK.select(,,,{? _a || ':' || '' ?})
|? PROD_REJ.PL_OPER<>null()
||
:: Kooperacja
   PL_WYK.index('PL_OPER');
   PL_WYK.prefix(PROD_REJ.PL_OPER);
   PL_WYK.win_sel('WER');
   PL_WYK.hdr_sel();
   PL_WYK.hdr_sel({? _a || ' — '+'PODGLĄD'@ || '' ?});
   PL_WYK.win_edit('RED');
   PL_WYK.select(,,,{? _a || ':' || '' ?})
?};
~~


\wykon_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsługa przycisku 'Wykonano' w oknie rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::       Uwaga: funkcja w oparciu o treść exec('start_4rej','po_wyk')
::  OLD: \wykon_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('access','po_wyk') || return(0) ?};

_dalej:=0;
_tp_end:=0;

{? PROD_REJ.PROBLEM='T'
|| FUN.info('Zgłoszony problem — nie można rejestrować wykonania.'@);
   return(_dalej)
?};

{? date(ST.AR,ST.AM,0)<>date(,,0)
|| FUN.info('Nie można rejestrować wykonania — wybrany okres obrachunkowy musi być zgodny z bieżącą datą.'@);
   return(_dalej)
?};

{? PROD_REJ.OK='T'
|| FUN.info('Zapis niedostępny do rejestracji — operacja już wykonana.'@);
   return(_dalej)
?};

{? PROD_REJ.A<>'T'
|| FUN.info('Zapis nieaktywny — nie można rejestrować wykonania.'@);
   return(_dalej)
?};

{? PROD_REJ.PL_OPER().ZGP().SRW='M'
|| FUN.info('Rejestracja wykonań możliwa poprzez moduł magazynowy.'@);
   return(_dalej)
?};

{? exec('get','#params',500632,2)='T' & PROD_REJ.DOREJ<>'T'
|| FUN.info('Zapis niedostępny do rejestracji — najpierw należy zarejestrować operacje poprzedzające.'@);
   return(_dalej)
?};

{? PROD_REJ.PL_OGR<>null()
||
:: Sprawdzenie, czy dla operacji grupowej wszystkie zlecenia sa otwarte
   GROPP.index('GROP');
   GROPP.prefix(PROD_REJ.GROP);
   {? GROPP.first()
   || {!
      |?
         {? GROPP.ZGP().NRZLP().ZLEC().STAN<>'O'
         || FUN.info(
               'W skład grupy wchodzi operacja zlecenia %1, które nie jest otwarte.\n'
               'Nie można rejestrować wykonania dla tej grupy.'@[ZL.SYM]
            );
            return(_dalej)
         ?};
         GROPP.next()
      !}
   ?}
?};

{? PROD_REJ.PL_OGR<>null()
||
:: Grupa operacji
   PL_WYK.index('PL_OGR');
   PL_WYK.prefix(PROD_REJ.PL_OGR);
   {? PL_WYK.last()
   || {? PL_WYK.ENDD=null()
      || FUN.info('Rozpoczęta operacja nie została zakończona — nie można rejestrować nowego wykonania.'@)
      || _dalej:=1
      ?}
   || _dalej:=1
   ?}
|? PROD_REJ.PL_OZ<>null()
||
:: Operacja pojedyncza
   PL_WYK.index('APL_OZ');
   PL_WYK.prefix('N',PROD_REJ.PL_OZ);
   {? PL_WYK.last()
   || {? PL_WYK.ENDD=null()
      || FUN.info('Rozpoczęta operacja nie została zakończona — nie można rejestrować nowego wykonania.'@)
      || _dalej:=1
      ?}
   || _dalej:=1
   ?};
:: Ustalenie, czy rejestracja operacji Tpz zostala zakonczona
   {? PROD_REJ.PL_OPER().TP<>0
   || {? PL_WYK.last()
      || {!
         |? {? PL_WYK.OK='T' || _tp_end:=1 ?};
            PL_WYK.prev() & _tp_end=0
         !}
      ?}
   ?}
|? PROD_REJ.PL_OPER<>null()
||
:: Kooperacja
   PL_WYK.index('APL_OPER');
   PL_WYK.prefix('N',PROD_REJ.PL_OPER);
   {? PL_WYK.last()
   || {? PL_WYK.ENDD=null()
      || FUN.info('Rozpoczęta operacja nie została zakończona — nie można rejestrować nowego wykonania.'@)
      || _dalej:=1
      ?}
   || _dalej:=1
   ?}
||
   _dalej:=1
?};

:: Decyzja o rejestracji Tpz
_tpz:=0;
{? _dalej
|| {? PROD_REJ.KOOP<>'T' &
      PROD_REJ.PL_OPER<>null() &
      PROD_REJ.GROP=null() &
      PROD_REJ.PL_OPER().TP<>0 &
      _tp_end=0
   || _tpz:=FUN.ask('Operacja z Tpz, czy chcesz zarejestrować przezbrojenie?'@)
   ?}
?};

:: Czy rejestracja pojedynczego pracownika (P) czy brygady, czy kooperacji?
_zlbr:=_pracownik:=null();
{? _dalej
||
:: Kooperacja - tu bedzie w przyszlosci wybor kontrahenta (kooperanta)
   {? PROD_REJ.KOOP='T'
   || _dalej:=1

:: Operacja tylko z czasem maszynowym, ale nie Tpz
   |? _tpz=0 & PROD_REJ.PL_OPER<>null() & PROD_REJ.PL_OPER().ZGP().NTIME=0
   || _dalej:=1

:: Operacja brygadowa
   |? PROD_REJ.PL_OPER().ZGP().BRYG='T' |
      (PROD_REJ.PL_OGR<>null() & exec('grop_bryg','zl_grop',PROD_REJ.PL_OGR().GROP)='T')
   || _zlbr:=exec('zlbr_select','prod_rej');
      exec('zlbs_f_set','zasoby',_zlbr,date());
      {? _zlbr=null()
      || _dalej:=0
      |? ZLBS.f_size()=0
      || FUN.info('Pusty skład brygady na dzień %1.'@[$date()]);
         _dalej:=0
      ?}

:: Operacja pracownika
   || {? exec('is_fast_wyk','prod_rej')>0
      || _pracownik:=exec('p_select_simple','prod_rej')
      || _pracownik:=exec('p_select','prod_rej')
      ?};
      {? _pracownik=null()
      || _dalej:=0
      ?}
   ?}
?};

{? _dalej
||
   PROD_REJ.PL_OPER();
   VPRODREJ.PROD_REJ:=PROD_REJ.ref();
   VPRODREJ.OPER:=PROD_REJ.OPER;
   VPRODREJ.M:=PROD_REJ.M;
   VPRODREJ.JM:=PROD_REJ.JM;
   VPRODREJ.EDIT_ILP:=0;
   VPRODREJ.EDIT_IL:=1;
   VPRODREJ.EDIT_ILB:=1;
   VPRODREJ.EDIT_OK:=1;

   VPRODREJ.STARTD:=date();
   VPRODREJ.STARTT:=time();
:: Tutaj mozna sterowac redagowaniem daty i godziny rozpoczecia operacji
   VPRODREJ.EDIT_STA:=1;
   VPRODREJ.ENDD:=date();
   VPRODREJ.ENDT:=time();
:: Tutaj mozna sterowac redagowaniem daty i godziny zakonczenia operacji
   VPRODREJ.EDIT_END:=1;
   {? PROD_REJ.GROP<>null()
   || VPRODREJ.win_edit('GR_WYK');
      VPRODREJ.EDIT_IL:=0;
      VPRODREJ.IL_PLAN:=PROD_REJ.ILC;
      VPRODREJ.IL_DOREJ:=VPRODREJ.IL:=1;
::         {? VPRODREJ.MAX || VPRODREJ.IL_POP-PL_OPER.IL_WYK || PROD_REJ.IL ?};
      VPRODREJ.IL_BRAK:=0;
      VPRODREJ.DOKL:=0;
      VPRODREJ.TP:='N'
   |? PL_OPER.TP<>0 & _tp_end=0 & (
         {? _tpz=0 & exec('get','#params',500632,2)='T'
         || FUN.info('Zapis niedostępny do rejestracji — najpierw należy zakończyć wykonywanie operacji Tpz.'@);
            return(0)
         || _tpz
         ?} )
   || VPRODREJ.win_edit('PL_WY_TP');
      VPRODREJ.IL_PLAN:=0;
      VPRODREJ.IL_DOREJ:=0;
      VPRODREJ.IL_BRAK:=0;
      VPRODREJ.DOKL:=PROD_REJ.M().DOKL;
      VPRODREJ.TP:='T'
   || VPRODREJ.win_edit('PL_WYK');
      VPRODREJ.IL_PLAN:=PROD_REJ.ILC;
      VPRODREJ.IL_DOREJ:=VPRODREJ.IL:=
         {? VPRODREJ.MAX
         || {? PROD_REJ.IL<VPRODREJ.IL_POP
            || PROD_REJ.IL
            || VPRODREJ.IL_POP-PL_OPER.IL_WYK-PL_OPER.DEK_IL
            ?}
         || PROD_REJ.IL
         ?};
      VPRODREJ.IL_BRAK:=0;
      VPRODREJ.DOKL:=0;
      VPRODREJ.TP:='N'
   ?};
   {? _tpz=0 & exec('is_fast_wyk','prod_rej') & VPRODREJ.IL_DOREJ<=0 & exec('get','#params',500634)<>'T'
   || VPRODREJ.IL_DOREJ:=PROD_REJ.ILC-PROD_REJ.PL_OPER().ZGP().DEK_IL-ZGP.DEK_BR-exec('count_napr4zgp','braki',ZGP.ref())
   ?};
   VPRODREJ.IL:=VPRODREJ.IL_DOREJ;
   VPRODREJ.ZPARN:=null();
   {? PROD_REJ.PL_OGR<>null()
   ||
::       Jeżeli do grupy przypisany 1 zasób to podpowiadam
         GROPS.cntx_psh();
         GROPS.index('GROP');
         GROPS.prefix(PROD_REJ.PL_OGR().GROP);
         PL_RES.cntx_psh();
         {? GROPS.size()=1 & GROPS.first()
         || VPRODREJ.PLACE:=GROPS.PL_RES().FROM_STA
         || VPRODREJ.PLACE:=null()
         ?};
         PL_RES.cntx_pop();
         GROPS.cntx_pop()
   || VPRODREJ.PLACE:=PL_OPER.ZGP().PLACE
   ?};

   VPRODREJ.OK:='N';

:: Sprawdzam czy pole z partią musi być wypełnione
   _party_req:=exec('party_req','zl_wyk',PROD_REJ.ZL);
   {? _party_req>0 & exec('get','#params',500621,2)='P'
   ||
::    Sprawdzam czy zlecenie produkcyjne jest zleceniem na ktore rejestruje robocizne
::    jesli tak, to moge sprobowac podpowiedziec partie. Jesli nie to pewnie jest przypadek
::    zlecenia zlozonego i nie moge podpowiedziec partii
::    Jesli zlecenie jest partiowane to sprawdzam ile partii ma przewodnik - jesli tylko jedna
::    to podpowiadam partie
      ZPARN.cntx_psh();
      ZPARN.index('ZGH');
      _zgh:=null();
      _zgp:=null();
      {? PROD_REJ.SRODZ='ZL'
      || _zgh:=PROD_REJ.ZGH;
         _zgp:=PROD_REJ.ZGP
      |? PROD_REJ.SRODZ='PL'
      || _zgh:=PROD_REJ.PL_OPER().ZGP().NRZLP;
         _zgp:=PROD_REJ.PL_OPER().ZGP
      ?};
      {? _zgh<>null()
      || _party_zgh:=exec('party_first_zgh','zl_guide',_zgh);
         {? _party_zgh<>null()
         ||
            {? exec('is_fast_wyk','prod_rej')
            || VPRODREJ.ZPARN:=exec('first_not_completed','zl_partie',null(),_party_zgh,'R',_zgp)
            || ZPARN.prefix(_party_zgh);
               {? ZPARN.size()=1
               || {? ZPARN.first()
                  || VPRODREJ.ZPARN:=ZPARN.ref()
                  ?}
               ?}
            ?}
         ?}
      ?};
      ZPARN.cntx_pop();
      ~~
   ?};
   {? _tpz=0 & exec('is_fast_wyk','prod_rej') & VPRODREJ.ZPARN<>null()
   ||
::    Zmniejszam ilość do rejestracji na tą dostępną dla partii, pod warunkiem że partia jest dla tego zlecenia do którego
::    rejestruję. W przypadku zleceń złożonych może być przypadek że rejestruję do półfabrykatu którego jest 400
::    a na zleceniu montażowym partia ma 100, wiec nie powinienem ograniczać ilości
      {? VPRODREJ.ZPARN().ZL=PROD_REJ.ZL
      || VPRODREJ.IL_DOREJ:=exec('min','#math',VPRODREJ.IL_DOREJ,exec('ilosc_left','zl_partie',VPRODREJ.ZPARN,'R',PROD_REJ.PL_OPER().ZGP))
      ?}
   ?};

   _valid:="
      _result:='';
      _tm_start:=exec('create','#tm_stamp',VPRODREJ.STARTD,VPRODREJ.STARTT);
      _tm_end:=exec('create','#tm_stamp',VPRODREJ.ENDD,VPRODREJ.ENDT);
      {? ~PROD_REJ.get()
      || FUN.info('Nie znaleziono pozycji do rejestracji wykonania.'@);
         _result:='IL'
      |? VPRODREJ.TP='N' & VPRODREJ.IL=0 & VPRODREJ.IL_BRAK=0
      || FUN.info('Ilość musi być określona.'@);
         _result:='IL'
      |? VPRODREJ.TP='N' & VPRODREJ.IL<0 & PROD_REJ.GROP=null()
      || FUN.info('Proszę podać ilość większą lub równą zero.'@);
         _result:='IL'
      |? VPRODREJ.TP='N' & VPRODREJ.IL<=0 & PROD_REJ.GROP<>null()
      || FUN.info('Proszę podać ilość większą od zera.'@);
         _result:='IL'
      |? VPRODREJ.TP='N' & VPRODREJ.IL_BRAK<0
      || FUN.info('Proszę podać ilość większą lub równą zero.'@);
         _result:='IL_BRAK'
      |? VPRODREJ.STARTD=date(0,0,0)
      || FUN.info('Data początkowa musi być podana.'@);
         _result:='STARTD'
      |? _tm_start>_tm_end
      || FUN.info('Proszę podać koniec operacji późniejszy niż początek.'@);
         _result:='ENDD'
      |? date(ST.AR,ST.AM,0)<>date(VPRODREJ.STARTD~1,VPRODREJ.STARTD~2,0) &
         (date(ST.AR,ST.AM,1)-1)<>VPRODREJ.STARTD
      || FUN.info('Data początkowa musi należeć do wybranego okresu.'@);
         _result:='STARTD'
      |? date(ST.AR,ST.AM,0)<>date(VPRODREJ.ENDD~1,VPRODREJ.ENDD~2,0)
      || FUN.info('Data końcowa musi należeć do wybranego okresu.'@);
         _result:='ENDD'
      |? exec('get','#params',500632,2)='T' & VPRODREJ.MAX & VPRODREJ.IL>VPRODREJ.IL_DOREJ
      || FUN.info('Proszę podać ilość nie większą niż %1'@[$VPRODREJ.IL_DOREJ]);
         _result:='IL'
      |? VPRODREJ.PLACE=null()
      || FUN.info('Należy wskazać stanowisko, na którym została wykonana operacja.'@);
         _result:='PLACE'
      ?};
::    Kontrola partii
      {? _result='' & exec('get','#params',500621,2)='P'
      ||
::       Sprawdzam czy pole z partią musi być wypełnione
         _party_req:=exec('party_req','zl_wyk',PROD_REJ.ZL);
         {? _party_req>0
         ||
            {? VPRODREJ.ZPARN=null()
            || _party_zl:=exec('party_first','zl_link',PROD_REJ.ZL);
               _zl_sym:=exec('record','#to_string',_party_zl);
               _msg:='Zlecenie: %1 jest partiowane.\n'
                     'Należy wskazać partię do której zostanie przypisana rejestrowana robocizna.'@[_zl_sym];
               FUN.emsg(_msg);
               _result:='ZPARN'
            ?}
         ?}
      ?};
      _result
   ";

   _can_fast:=0;
   _edited:=0;
   {? exec('is_fast_wyk','prod_rej') & (VPRODREJ.IL_DOREJ>0 | _tpz>0)
   ||
      _val_result:=_valid();

      {? type_of(_val_result)=type_of(0) & _val_result>0
      || _can_fast:=1
      ?};
      {? type_of(_val_result)=type_of('') & _val_result=''
      || _can_fast:=1
      ?}
   ?};
   {? _can_fast>0
   ||
      {? _tpz>0
      ||
::       Tpz
         VPRODREJ.OK:='T';
         _edited:=1
      ||
         {? VPRODREJ.ZPARN<>null()
         || _msg:='Czy zarejestrować wykonanie w ilości: %1 dobrych do partii: \'%2\'?'@[$VPRODREJ.IL_DOREJ,exec('record','#to_string',VPRODREJ.ZPARN)]
         || _msg:='Czy zarejestrować wykonanie w ilości: %1 dobrych?'@[$VPRODREJ.IL_DOREJ]
         ?};
         _choice:=FUN.choice(_msg,,'Tak'@,'Popraw...'@);
         {? _choice=1
         || _edited:=1
         |? _choice=2
         || _edited:=VPRODREJ.edit(_valid)
         || _edited:=0
         ?}
      ?}
   || _edited:=VPRODREJ.edit(_valid)
   ?};

   {? _edited>0
   ||
      PL_WYK.blank(1);
      PL_WYK.AUTO:='N';
      PL_WYK.PL_OPER:=PROD_REJ.PL_OPER;
      PL_WYK.PL_OGR:=PROD_REJ.PL_OGR;
      PL_WYK.ZL:=PROD_REJ.ZL;
      PL_WYK.STARTD:=exec('get','daty',VPRODREJ.STARTD);
      PL_WYK.STARTT:=VPRODREJ.STARTT;
      PL_WYK.ENDD:=exec('get','daty',VPRODREJ.ENDD);
      PL_WYK.ENDT:=VPRODREJ.ENDT;
      PL_WYK.ILOSC:=VPRODREJ.IL+VPRODREJ.IL_BRAK;
      {? PL_OPER.ZGP<>null() & PL_OPER.ZGP().KJ_BAD<>'N'
      || PL_WYK.DEK_IL:=VPRODREJ.IL;
         PL_WYK.DEK_BR:=VPRODREJ.IL_BRAK;
         PL_WYK.KJ_DONE:='P'
      || PL_WYK.IL_WYK:=VPRODREJ.IL;
         PL_WYK.IL_BRAK:=VPRODREJ.IL_BRAK;
         PL_WYK.KJ_DONE:='N'
      ?};
      PL_WYK.P:=_pracownik;
      PL_WYK.ZLBR:=_zlbr;
      PL_WYK.USER:=OPERATOR.USER;
      PL_WYK.UID:=exec('uid','#blank');
      PL_WYK.POTW:='N';
      PL_WYK.TP:=VPRODREJ.TP;
      PL_WYK.ZPARN:=VPRODREJ.ZPARN;
      PL_WYK.PLACE:=VPRODREJ.PLACE;
      PL_WYK.OK:=VPRODREJ.OK;

::    Uzupelnienie zapisow wszystkich PL_OZ dla danego PL_OPER (pozostale zasoby dla danej operacji)
::    Dla kooperacji (brak zasobow) tylko jeden PL_OPER
      Cntx.psh(PL_WYK);
      PL_WYK.prefix();

      PL_OZ.index('PL_OPER');
      PL_OZ.prefix(PROD_REJ.PL_OPER);
      {? PL_OZ.first()
      || {!
         |? PL_WYK.PL_OZ:=PL_OZ.ref();
            {? PL_WYK.add(0)
            || exec('end_akord_4po','zl_wyk',PL_WYK.UID)
            ?};
            PL_OZ.next()
         !}
      || PL_WYK.PL_OZ:=null();
         {? PL_WYK.add(0)
         || exec('end_akord_4po','zl_wyk',PL_WYK.UID)
         ?}
      ?};

      Cntx.pop(PL_WYK)
   ||
      _dalej:=0
   ?}
?};

_dalej


\xwykon_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsługa przycisku 'Wycofaj' w oknie rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::  OLD: \xwykon_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('access','po_wyk') || return(0) ?};

{? PROD_REJ.A<>'T'
|| FUN.info('Zapis nieaktywny — nie można wycofać wykonania.'@);
   return(0)
?};

{? PROD_REJ.PL_OPER<>null()
||
:: Zarejestrowano w tej operacji
   _il_oper:=PROD_REJ.PL_OPER().IL_WYK;

   _il_zap:=0;
   PL_WYK.cntx_psh();
   PL_WYK.index('PL_OPER');
   PL_WYK.prefix(PROD_REJ.PL_OPER);
   {? PL_WYK.first()
   || {!
      |?
         _il_zap+=1;
         {? PL_WYK.AUTO='T'
         || FUN.info('Występują zapisy automatyczne — nie można wycofać wszystkich zapisów.'@);
            PL_WYK.cntx_pop();
            return(0)
         ?};
         PL_WYK.next()
      !}
   ?};
   PL_WYK.cntx_pop();

   {? _il_zap=0
   || FUN.info('Brak zapisów do wycofania.'@);
      return(0)
   ?};

:: Kolejna operacja
   _il_next:=exec('il_nast','po_wyk',PROD_REJ.ref());

:: Ustawienie srodowiska
   VPRODREJ.JM:=PROD_REJ.JM;

   {? exec('get','#params',500632,2)='T' & _il_next.ILCNAST<>0
   ||
      FUN.emsg(
         'Nie można usunąć %1.\nW następnym etapie procesu zarejestrowano: %2.'@
         [$_il_oper+' '+VPRODREJ.JM().KOD,$_il_next.IL_NAST+' '+JM.KOD]
      )
   ||
      {? FUN.ask('Czy chcesz wycofać wszystkie zapisy dla tej operacji?'@)
      || KOMM.init(,,'Usuwanie rejestracji wykonania pozycji planu'@);
::       Uzupelnienie zapisow wszystkich PL_OZ dla danego PL_OPER (pozostale zasoby dla danej operacji)
         Cntx.psh(PL_WYK);

         PL_WYK.index('PL_OPER');
         PL_WYK.prefix(PROD_REJ.PL_OPER);
         {? PL_WYK.first()
         || {!
            |?
::             Na wszelki wypadek pomijam zapisy automatyczne, bo mogl je ktos wprowadzic w miedzyczasie
               {? PL_WYK.AUTO<>'T'
               || PL_WYK.del()
               || PL_WYK.next()
               ?}
            !}
         ?};

         Cntx.pop(PL_WYK);
         KOMM.select()
      ?}
   ?}
|? PROD_REJ.PL_OGR<>null()
||
   _il_zap:=0;
   PL_WYK.cntx_psh();
   PL_WYK.index('PL_OGR');
   PL_WYK.prefix(PROD_REJ.PL_OGR);
   {? PL_WYK.first()
   || {!
      |?
         _il_zap+=1;
         {? PL_WYK.POTW='T'
         || FUN.info('Występują zapisy potwierdzone — nie można wycofać wszystkich zapisów.'@);
            PL_WYK.cntx_pop();
            return(0)
         ?};
         PL_WYK.next()
      !}
   ?};
   PL_WYK.cntx_pop();

   {? _il_zap=0
   || FUN.info('Brak zapisów do wycofania.'@);
      return(0)
   ?};

   {? FUN.ask('Czy chcesz wycofać wszystkie zapisy dla tej grupy operacji?'@)
   || KOMM.init(,,'Usuwanie rejestracji wykonania grupy operacji planu'@);

      Cntx.psh(PL_WYK);

      PL_WYK.index('PL_OGR');
      PL_WYK.prefix(PROD_REJ.PL_OGR);
      {? PL_WYK.first()
      || {!
         |?
::          Na wszelki wypadek pomijam zapisy potwierdzone, bo mogl je ktos potwierdzic w miedzyczasie
            {? PL_WYK.POTW<>'T'
            || PL_WYK.del()
            || PL_WYK.next()
            ?}
         !}
      ?};

      Cntx.pop(PL_WYK);
      KOMM.select()
   ?}
?};
1


\potw_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsługa przycisku 'Potwierdź' w oknie rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::  OLD: \potw_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('access','po_wyk') || return(0) ?};

{? PROD_REJ.A<>'T'
|| FUN.info('Zapis nieaktywny — nie można potwierdzić wykonania.'@);
   return(0)
?};

{? PROD_REJ.PL_OGR=null()
|| FUN.info('Potwierdzenie wykonania dostępne tylko dla grup operacji.'@)
|| PL_WYK.index('PL_OGR');
   PL_WYK.prefix(PROD_REJ.PL_OGR);
   _size:=PL_WYK.size();
   {? _size=0
   || FUN.info('Brak zapisów do potwierdzenia.'@)
   |? _size=1
   || {? PL_WYK.first() || exec('pl_wyk_potw','po_wyk') ?}
   || PL_WYK.win_sel('WER');
      PL_WYK.select(,,,'O')
   ?}
?};
1


\xpotw_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Obsługa przycisku 'Odrzuć' w oknie rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('access','po_wyk') || return(0) ?};

{? PROD_REJ.A<>'T'
|| FUN.info('Zapis nieaktywny — nie można odrzucić wykonania.'@);
   return(0)
?};

{? PROD_REJ.PL_OGR=null()
|| FUN.info('Odrzucenie wykonania dostępne tylko dla grup operacji.'@)
|| PL_WYK.index('PL_OGR');
   PL_WYK.prefix(PROD_REJ.PL_OGR);
   _size:=PL_WYK.size();
   {? _size=0
   || FUN.info('Brak zapisów do odrzucenia.'@)
   |? _size=1
   || {? PL_WYK.first() || exec('pl_wyk_xpotw','po_wyk') ?}
   || PL_WYK.win_sel('WER');
      PL_WYK.select(,,,'I')
   ?}
?};
1


\pl_wyk_potw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Potwierdzenie biezacego wykonania
::       Kontekst pracy - rekord PL_WYK
::  OLD: \pl_wyk_potw/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(PL_NEXT,GROPP,ZLGD);

{? PL_WYK.PL_OGR=null()
|| FUN.info('Potwierdzenie wykonania dostępne tylko dla grup operacji.'@)
|? PL_WYK.ENDD().DATA=date(0,0,0)
|| FUN.info('Operacja nie została zakończona.'@)

|? PL_WYK.POTW='N'
||
:: Potwierdzenie
   {? exec('get','#params',500621,2)='P'
   ||
      ProdRej.GROPP.TAB.clear();
      ProdRej.GROPP.TAB.erase();
      ProdRej.GROPP.TAB.index(ProdRej.GROPP.NdxOpis);

      GROPP.index('GROP');
      GROPP.prefix(PL_WYK.PL_OGR().GROP);

::    Planowany czas technologiczny grupy
      _czasm:=0;
      {? GROPP.first()
      || {!
         |? _czasm+=GROPP.CZASM;
            GROPP.next()
         !}
      ?};

      _coef:={? _czasm=0 || 1 || (PL_WYK.TM_END-PL_WYK.TM_START)/exec('minute','#tm_stamp')/_czasm ?};
      {? GROPP.first()
      || {!
         |? ProdRej.GROPP.TAB.GROPP:=#GROPP.ref();
            ProdRej.GROPP.TAB.ZGP_REF:=#GROPP.ZGP;
            ProdRej.GROPP.TAB.ZGP_OPIS:=GROPP.ZGP().NRZLP().NRPRZ+' poz. '+$ZGP.NRP;
            ProdRej.GROPP.TAB.IL:=GROPP.IL;
            ProdRej.GROPP.TAB.IL_WYK:=GROPP.IL;
            ProdRej.GROPP.TAB.CZASM:=GROPP.CZASM*_coef;
            ProdRej.GROPP.TAB.DOKL:=GROPP.ZGP().NRZLP().ZLEC().KTM().DOKL;
            ProdRej.GROPP.TAB.JM:=M.J().KOD;
            ProdRej.GROPP.TAB.PARTY:=exec('zlec_party','zl_common',exec('FindAndGet','#table',ZGP,GROPP.ZGP,,"ZGP.ZL",null));
            {? ProdRej.GROPP.TAB.PARTY
            ||
::             Sprawdzam czy przewodnik posiada dokladnie jedna partie, wtedy moge ja przypisać
               ZPARN.cntx_psh();
               ZPARN.index('ZGH');
               ZPARN.prefix(GROPP.ZGP().NRZLP);
               {? ZPARN.size()=1
               || {? ZPARN.first()
                  || ProdRej.GROPP.TAB.ZPARN:=#ZPARN.ref();
                     ProdRej.GROPP.TAB.PARSYM:=ZPARN.SYM
                  ?}
               || ProdRej.GROPP.TAB.ZPARN:=-1;
                  ProdRej.GROPP.TAB.PARSYM:=''
               ?};
               ZPARN.cntx_pop()
            || ProdRej.GROPP.TAB.ZPARN:=-1;
               ProdRej.GROPP.TAB.PARSYM:=''
            ?};
            ProdRej.GROPP.TAB.add();
            GROPP.next()
         !}
      ?};
      _wer:=ProdRej.GROPP.TAB.mk_sel('Potwierdzenie wykonania grupy operacji'@,,0,'rozpiszgropp',20,10);
      ProdRej.GROPP.TAB.win_fld(_wer,,'ZGP_OPIS',,,40,,1,'Pozycja przewodnika'@);
      ProdRej.GROPP.TAB.win_fld(_wer,,'JM',,,5,,1,'jm'@);
      ProdRej.GROPP.TAB.win_fld(_wer,,'IL',,,15,ST.DOKL,1,'Ilość planowana'@);
      ProdRej.GROPP.TAB.win_fld(_wer,,'IL_WYK',,,15,ST.DOKL,,'Ilość wykonana'@);
      ProdRej.GROPP.TAB.win_fld(_wer,,'PARSYM',,,25,,,'Partia'@);
      ProdRej.GROPP.TAB.win_fld(_wer,,'CZASM',,,15,4,1,'Czas [min]'@);
      ProdRej.GROPP.TAB.win_act(_wer,,'Popraw',,,,,,1);

      _ok:="
      _result:=1;
      {? ProdRej.GROPP.TAB.first()
      || {!
         |?
            {? ProdRej.GROPP.TAB.PARTY>0 & ( ProdRej.GROPP.TAB.PARSYM='' |
               exec('FindInSet','#table','ZPARN','ZL2', ProdRej.GROPP.TAB.PARSYM,
               exec('FindAndGet','#table',ZGP,ProdRej.GROPP.TAB.ZGP_REF,,\"ZGP.ZL\",''),\"ZPARN.ref()\",1,,null)=null())
            || _result:=0;
               FUN.emsg('Do przewodnika %1 przypisano niepoprawną partię.'@[ProdRej.GROPP.TAB.ZGP_OPIS])
            ?};
            _result & ProdRej.GROPP.TAB.next()
         !}
      ?};
      {? _result
      || sel_exit()
      ?}
      ";
      ProdRej.GROPP.TAB.win_act(_wer,,'Formuła','Akceptuj'@@,,,_ok,,,,,,'A',,'target=window');
      ProdRej.GROPP.TAB.win_act(_wer,1,'Formuła','Akceptuj'@@,,,_ok,,,,,,'A',,'target=window');

::      ProdRej.GROPP.TAB.win_act(_wer,,'Formuła','Akceptuj'@@,,,"sel_exit()",,,,,,'A');
      _valid:="
         {? ProdRej.GROPP.TAB.IL_WYK<0
         || FUN.emsg('Ilość nie może być ujemna.'@);
            0
         |? ProdRej.GROPP.TAB.IL_WYK>ProdRej.GROPP.TAB.IL
         || FUN.emsg('Ilość wykonana nie może być większa niż planowana.'@);
            0
         |? ProdRej.GROPP.TAB.PARTY>0 & ProdRej.GROPP.TAB.PARSYM=''
         || FUN.emsg('Zlecenie jest partiowane. Należy wskazać partię.'@);
            0
         |? ProdRej.GROPP.TAB.PARTY>0 & exec('FindInSet','#table','ZPARN','ZL2', ProdRej.GROPP.TAB.PARSYM,
            exec('FindAndGet','#table',ZGP,ProdRej.GROPP.TAB.ZGP_REF,,\"ZGP.ZL\",''),\"ZPARN.ref()\",1,,null)=null
         || FUN.emsg('Nie odnaleziono partii o wskazanym symbolu.'@);
            0
         || 1
         ?}
      ";
      ProdRej.GROPP.TAB.win_act(_wer,,'Rekord',,,,,_valid);
      ProdRej.GROPP.TAB.win_btn(_wer,'text=%1,panel=bottom'['&Akceptuj'@],'menu:A');
      ProdRej.GROPP.TAB.win_btn(_wer,'text=%1,panel=bottom'['&Zamknij'@],'key:Esc');
      ProdRej.GROPP.TAB.win_sel(_wer);

::    Dla PL_WYK.put() trigger generuje zapisy w tabelach ZLGD/ZLGB
      {? ProdRej.GROPP.TAB.select()
      || PL_WYK.POTW:='T';
         {? PL_WYK.put()
         || exec('end_akord_4po','zl_wyk',PL_WYK.UID)
         ?}
      ?}

   || {? FUN.ask('Czy potwierdzić bieżący zapis?'@)
      || PL_WYK.POTW:='T';
         PL_WYK.put()
      ?}
   ?}
||
:: Odrzucenie
   ~~
?};

Cntx.pop(PL_NEXT,GROPP,ZLGD);
~~


\pl_wyk_xpotw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Odrzucenie bieżącego wykonania
::       Kontekst pracy - rekord PL_WYK
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(PL_NEXT,GROPP,ZLGD);

{? PL_WYK.PL_OGR=null()
|| FUN.info('Odrzucenie wykonania dostępne tylko dla grup operacji.'@)
|? PL_WYK.ENDD().DATA=date(0,0,0)
|| FUN.info('Operacja nie została zakończona.'@)

|? PL_WYK.POTW='N'
||
:: Potwierdzenie
   ~~
||
:: Odrzucenie
   _can_continue:=1;
   PL_NEXT.index('PL_OGR');
   PL_NEXT.prefix(PL_WYK.PL_OGR);
   {? PL_NEXT.first()
   || {!
      |? PL_WYK.cntx_psh();
         PL_WYK.index('PL_OPER');
         PL_WYK.prefix(PL_NEXT.NEXT);
         {? PL_WYK.size()>0 || _can_continue:=0 ?};
         PL_WYK.cntx_pop();
         _can_continue & PL_NEXT.next()
      !}
   ?};

   {? _can_continue>0
   || ZLGD.index('PL_WYK');
      ZLGD.prefix(PL_WYK.UID);
      {? ZLGD.size()=0
      || _txt:='Czy odrzucić potwierdzenie bieżącego zapisu?'@
      || _txt:='Czy odrzucić potwierdzenie bieżącego zapisu?\n\n'
               'Wycofane zostaną również zapisy powiązane z zarejestrowanymi ilościami do przewodników zleceń.'@
      ?};
      {? FUN.ask(_txt)
      ||
:: Dla PL_WYK.put() trigger usuwa zapisy w tabelach ZLGD/ZLGB
         PL_WYK.POTW:='N';
         PL_WYK.put()
      ?}
   || FUN.info('Nie można odrzucić potwierdzenia — zarejestrowano wykonania dla kolejnych operacji.'@)
   ?}
?};

Cntx.pop(PL_NEXT,GROPP,ZLGD);
~~


\prac_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsługa przycisku 'Pracownik' w oknie rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::  OLD: \prac_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.info('W tym kontekście (plan operacyjny) funkcja \'Pracownik\' nie jest obsługiwana.'@);
~~


\bryg_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsługa przycisku 'Brygada' w oknie rejestracji wykonań - plan operacyjny
::       Kontekst pracy: PROD_REJ
::  OLD: \bryg_4rej/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.info('W tym kontekście (plan operacyjny) funkcja \'Brygada\' nie jest obsługiwana.'@);
~~


\args_4pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zwraca wspolne wartosci argumentow dla rejestracji do planu operacyjnego
::       Uzyte z formulach exec('rej_zlec','pl_wyk')
::  OLD: \args_4pl/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('rejestracja_a','prod_rej');
_args.F_NAWIG:=0;
_args.F_FILTER:=1;
_args.F_START:=1;
_args.F_STOP:=1;
_args.F_WYKON:=1;
_args.F_XWYKON:=0;
_args.F_PROB:=0;
_args.F_DOC:=1;
_args.F_MAT:=1;
_args.F_PRAC:=0;
_args.F_BRYG:=0;
_args.F_REJ:=1;
_args.F_NPU:=1;
_args.FILTR_PX:=0;
_args.FILTR_PL:=1;
_args.FILTR_ZL:=0;
_args.PR_DATA:=date(0,0,0);
_args.ED_DATA:=0;
_args.ED_ZAKR:=0;
_args.ED_RES:=1;
_args.ED_M:=1;
_args.ED_WYD:=1;
_args.ED_OPIS:=1;
_args.ED_START:=1;
_args.ED_OK:=1;
_args.ED_PROB:=0;
_args.ED_PRAC:=0;
_args.ED_BRYG:=0;
_args.ED_KOOP:=1;
_args.ED_GROP:=1;
_args.ED_A:=1;
_args.ED_DOREJ:=1;
_args.ED_PX:=0;
_args.ED_PL:=1;
_args.ED_ZL:=0;
_args.CLOSE:="";
_args


\rej_zlec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Rejestracja wykonan do planu operacyjnego - z poziomu zlecenia
::  OLD: \rej_zlec/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('access','po_wyk') || return() ?};

_args:=exec('args_4pl','po_wyk');
{? var_pres('__GRUPA')<0
||
   {? VAR.A_ZLEC().RODZAJ='P'
   ||
      _args.WHERE:='ZL.REFERENCE=\''+$VAR.A_ZLEC+'\''
   ||
      _args.WHERE:='ZL.REFERENCE in (select :_a.REF from :_a)';
      _args.TAB:=tab_tmp(1,'REF','STRING[16]','$ZL.ref()');
      ZL.cntx_psh();
      ZL.index('NRNZL');
      ZL.prefix(VAR.A_ZLEC().UNRZL);
      {? ZL.first()
      || {!
         |?
            _args.TAB.REF:=$ZL.ref();
            _args.TAB.add();
            ZL.next()
         !}
      ?};
      ZL.cntx_pop()
   ?}
||
   _args.WHERE:='ZL.REFERENCE in (select :_a.REF from :_a)';
   _args.TAB:=tab_tmp(1,'REF','STRING[16]','$ZL.ref()');
   {? __GRUPA.first()
   || {!
      |?
         {? ZL.seek(__GRUPA.REF,)
         ||
            {? ZL.RODZAJ='P'
            ||
               _args.TAB.REF:=$ZL.ref();
               _args.TAB.add()
            ||
               ZL.cntx_psh();
               ZL.index('NRNZL');
               ZL.prefix(ZL.UNRZL);
               {? ZL.first()
               || {!
                  |?
                     _args.TAB.REF:=$ZL.ref();
                     _args.TAB.add();
                     ZL.next()
                  !}
               ?};
               ZL.cntx_pop()
            ?}
         ?};
         __GRUPA.next()
      !}
   ?}
?};
exec('rejestracja','prod_rej',_args);
~~


\auto_pl_wyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Trigger aktualizujacy zapisy w PL_WYK na podstawie ZLGD
::   WE: _a - rodzaj triggera: 'add', 'put', 'del'
::  OLD: \auto_pl_wyk/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('get','#params',500621,2)='P' & ZLGD.ZGP().SRW<>'M'
||
:: Jezeli aktualizacja PL->ZL i rozliczenie kooperacji 'standardowe', to trigger nic nie robi
   {? _a='del' || 1 || ~~ ?}
||
:: Aktualizacja ZL->PL lub rozliczenie kooperacji 'magazynowe'
   {? _a='add'
   ||
      PL_WYK.cntx_psh(); PL_WYK.prefix();
      PL_OPER.cntx_psh();
      PL_OGR.cntx_psh();

      {? ZLGD.ZGP<>null()
      ||
         _tpz:=ZLGD.ZGP().TPZ;
         _zgp:={? _tpz='T' || exec('main_ref','zl_guide',ZLGD.ZGP) || ZLGD.ZGP ?};

         PL_OPER.index('ZGP');
         PL_OPER.prefix(_zgp);
         {? PL_OPER.first()
         ||
            PL_OZ.index('PL_OPER');
            PL_OZ.prefix(PL_OPER.ref());
            {? PL_OZ.first()
            || _pl_oz:=PL_OZ.ref()
            || _pl_oz:=null()
            ?};

            PL_WYK.blank(1);
            PL_WYK.AUTO:='T';
            PL_WYK.TP:=_tpz;
            {? ZLGD.ENDD<>null()
            ||
               PL_WYK.STARTD:=ZLGD.STARTD;
               PL_WYK.STARTT:=ZLGD.STARTT;
               PL_WYK.ENDD:=ZLGD.ENDD;
               PL_WYK.ENDT:=ZLGD.ENDT
            ||
               PL_WYK.ENDD:=exec('get','daty',{? ZLGD.ZMIANA='3' || ZLGD.DT+1 || ZLGD.DT ?});
               PL_WYK.ENDT:=
                  {? ZLGD.ZMIANA='1' || time(14,0,0)
                  |? ZLGD.ZMIANA='2' || time(22,0,0)
                  |? ZLGD.ZMIANA='3' || time(6,0,0)
                                     || time(23,59,59)
                  ?};
               _tm_end:=exec('create','#tm_stamp',PL_WYK.ENDD().DATA,PL_WYK.ENDT);
               _tm_start:=_tm_end-ZLGD.TIME*exec('minute','#tm_stamp')*60;
               PL_WYK.STARTD:=exec('get','daty',exec('tm_stamp2date','#tm_stamp',_tm_start));
               PL_WYK.STARTT:=exec('tm_stamp2time','#tm_stamp',_tm_start)
            ?};
            PL_WYK.ILOSC:=ZLGD.IL_N;
            PL_WYK.IL_WYK:=ZLGD.IL;
            PL_WYK.IL_BRAK:=ZLGD.IL_BRAK;
            PL_WYK.ZLGD:=$ZLGD.ref();
            PL_WYK.PL_OPER:=PL_OPER.ref();
            PL_WYK.PL_OZ:=_pl_oz;
            PL_WYK.ZL:=ZLGD.ZL;
            PL_WYK.USER:=OPERATOR.USER;
            PL_WYK.P:=ZLGD.P;
            PL_WYK.ZLBR:=ZLGD.B;
            PL_WYK.KJ_DONE:='N';
            PL_WYK.OK:=ZLGD.OK;
            PL_WYK.PLACE:=ZLGD.PLACE;
            PL_WYK.add(1)
         ?}
      |? ZLGD.GROP<>null()
      ||
         PL_OGR.index('GROP');
         PL_OGR.prefix(ZLGD.GROP);
         {? PL_OGR.first()
         ||
            PL_WYK.blank(1);
            PL_WYK.AUTO:='T';
            PL_WYK.TP:='N';
            {? ZLGD.ENDD<>null()
            ||
               PL_WYK.STARTD:=ZLGD.STARTD;
               PL_WYK.STARTT:=ZLGD.STARTT;
               PL_WYK.ENDD:=ZLGD.ENDD;
               PL_WYK.ENDT:=ZLGD.ENDT
            ||
               PL_WYK.ENDD:=exec('get','daty',{? ZLGD.ZMIANA='3' || ZLGD.DT+1 || ZLGD.DT ?});
               PL_WYK.ENDT:=
                  {? ZLGD.ZMIANA='1' || time(14,0,0)
                  |? ZLGD.ZMIANA='2' || time(22,0,0)
                  |? ZLGD.ZMIANA='3' || time(6,0,0)
                                     || time(23,59,59)
                  ?};
               _tm_end:=exec('create','#tm_stamp',PL_WYK.ENDD().DATA,PL_WYK.ENDT);
               _tm_start:=_tm_end-ZLGD.TIME*exec('minute','#tm_stamp')*60;
               PL_WYK.STARTD:=exec('get','daty',exec('tm_stamp2date','#tm_stamp',_tm_start));
               PL_WYK.STARTT:=exec('tm_stamp2time','#tm_stamp',_tm_start)
            ?};
            PL_WYK.ILOSC:=ZLGD.IL_N;
            PL_WYK.IL_WYK:=ZLGD.IL;
            PL_WYK.IL_BRAK:=ZLGD.IL_BRAK;
            PL_WYK.ZLGD:=$ZLGD.ref();
            PL_WYK.PL_OGR:=PL_OGR.ref();
            PL_WYK.ZL:=ZLGD.ZL;
            PL_WYK.USER:=OPERATOR.USER;
            PL_WYK.P:=ZLGD.P;
            PL_WYK.ZLBR:=ZLGD.B;
            PL_WYK.KJ_DONE:='N';
            PL_WYK.OK:=ZLGD.OK;
            PL_WYK.PLACE:=ZLGD.PLACE;
            PL_WYK.POTW:=ZLGD.POTW;
            PL_WYK.add(1)
         ?}
      ?};

      PL_WYK.cntx_pop();
      PL_OPER.cntx_pop();
      PL_OGR.cntx_pop();
      ~~
   |? _a='put'
   ||
      PL_WYK.cntx_psh();

      PL_WYK.index('ZLGD');
      PL_WYK.prefix($ZLGD.ref());
      {? PL_WYK.first()
      ||
         {? ZLGD.ENDD<>null()
         ||
            PL_WYK.STARTD:=ZLGD.STARTD;
            PL_WYK.STARTT:=ZLGD.STARTT;
            PL_WYK.ENDD:=ZLGD.ENDD;
            PL_WYK.ENDT:=ZLGD.ENDT
         ||
            PL_WYK.ENDD:=exec('get','daty',{? ZLGD.ZMIANA='3' || ZLGD.DT+1 || ZLGD.DT ?});
            PL_WYK.ENDT:=
               {? ZLGD.ZMIANA='1' || time(14,0,0)
               |? ZLGD.ZMIANA='2' || time(22,0,0)
               |? ZLGD.ZMIANA='3' || time(6,0,0)
                                  || time(23,59,59)
               ?};
            _tm_end:=exec('create','#tm_stamp',PL_WYK.ENDD().DATA,PL_WYK.ENDT);
            _tm_start:=_tm_end-ZLGD.TIME*exec('minute','#tm_stamp')*60;
            PL_WYK.STARTD:=exec('get','daty',exec('tm_stamp2date','#tm_stamp',_tm_start));
            PL_WYK.STARTT:=exec('tm_stamp2time','#tm_stamp',_tm_start)
         ?};
         PL_WYK.ILOSC:=ZLGD.IL_N;
         PL_WYK.IL_WYK:=ZLGD.IL;
         PL_WYK.IL_BRAK:=ZLGD.IL_BRAK;
         PL_WYK.OS_VIEW:=ZLGD.OS_VIEW;
         PL_WYK.ZLBR:=ZLGD.B;
         PL_WYK.OK:=ZLGD.OK;
         PL_WYK.PLACE:=ZLGD.PLACE;
         PL_WYK.POTW:=ZLGD.POTW;
         PL_WYK.put()
      ?};

      PL_WYK.cntx_pop();
      ~~
   |? _a='del'
   ||
      PL_WYK.cntx_psh();

      PL_WYK.index('ZLGD');
      PL_WYK.prefix($ZLGD.ref());
      {? PL_WYK.first()
      || {! |? PL_WYK.del() !}
      ?};
      _res:=~PL_WYK.first();

      PL_WYK.cntx_pop();
      _res
   || ~~
   ?}
?}


\zlec_pl_wyk_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Selekcja wykonan do zlecenia (bez PROD_REJ)
::  OLD: \zlec_pl_wyk_sel/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
exec('var_akord','zl_guide');

ZL.cntx_psh();

{? ZL.RODZAJ='P'
||
   PL_WYK.index('ZL');
   PL_WYK.prefix(ZL.ref());
   PL_WYK.win_sel('WER');
   PL_WYK.win_edit('RED');
   PL_WYK.select(,,,'PU')
||
   _tab:=tab_tmp(1,'REF','STRING[16]','$ZL.ref()');
   ZL.index('NRNZL');
   ZL.prefix(ZL.UNRZL);
   {? ZL.first()
   || {!
      |? _tab.REF:=$ZL.ref();
         _tab.add();
         ZL.next()
      !}
   ?};
   PL_WYK.clear();
   PL_WYK.f_set('TM_START',,'PL_WYK.ZL in (select :_a.REF from :_a)',_tab);
   PL_WYK.win_sel('WER');
   PL_WYK.win_edit('RED');
   PL_WYK.select(,,,'PU');
   PL_WYK.f_clear()
?};

ZL.cntx_pop();
~~


\pl_wyk2rs
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Wypelnia RestultSet biezaca zawartoscia bufora tabeli PL_WYK
::   WE: _a - ResultSet
::  OLD: \pl_wyk2rs/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_rs:=_a;

_rs.REF:=$PL_WYK.ref();
_rs.PLOPER:=$PL_WYK.PL_OPER;
_rs.PLOZ:=$PL_WYK.PL_OZ;
_rs.AUTO:=PL_WYK.AUTO;
_rs.ZLGD:=PL_WYK.ZLGD;
_rs.STRSTART:=exec('to_string','#tm_stamp',PL_WYK.TM_START);
_rs.STREND:=exec('to_string','#tm_stamp',PL_WYK.TM_END);
_rs.STRMOD:=exec('to_string','#tm_stamp',PL_WYK.TM_MOD);
_rs.ILWYK:=PL_WYK.IL_WYK;
_rs.PLOGR:=$PL_WYK.PL_OGR;
_rs.POTW:=PL_WYK.POTW;
_rs.TP:=PL_WYK.TP;
_rs.TZ:=PL_WYK.TZ;
_rs.ILOSC:=PL_WYK.ILOSC;
_rs.BRAKI:=PL_WYK.IL_BRAK;
_rs.OPERATOR:=PL_WYK.USER().DANE;
_rs.OK:=PL_WYK.OK;
~~


\rej_grop_pr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Rejestracja wykonan - z poziomu grup operacji (akcja przed)
::  OLD: \rej_grop_pr/gr_oper.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('access','po_wyk') || return() ?};

{? GROP.sel_size()=0
|| _args:=exec('args_4grop','po_wyk');
   _args.WHERE:='PROD_REJ.GROP in (select :_a.REF from :_a)';
   _args.JOIN:='';
   _args.TAB:=tab_tmp(1,'REF','STRING[16]','$GROP.ref()');
   _args.TAB.REF:=$GROP.ref();
   _args.TAB.add();
   exec('rejestracja','prod_rej',_args)
?};
~~


\rej_grop_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Rejestracja wykonan - z poziomu grup operacji (akcja po)
::  OLD: \rej_grop_po/gr_oper.fml
::----------------------------------------------------------------------------------------------------------------------
~~


\rej_grop_gpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Rejestracja wykonan - z poziomu grup operacji (akcja przed grupa rekordow)
::  OLD: \rej_grop_gpr/gr_oper.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('access','po_wyk') || return(0) ?};

GROP.cntx_psh();
GROP.clear();
sel_nchk();
_args:=exec('args_4grop','po_wyk');
_args.WHERE:='PROD_REJ.GROP in (select :_a.REF from :_a)';
_args.JOIN:='';
_tab:=GROP.sel_aget();
_args.TAB:=tab_tmp(1,'REF','STRING[16]','$GROP.ref()');
{? _tab.first()
|| {!
   |? {? GROP.seek(_tab.REF,)
      || _args.TAB.REF:=$GROP.ref();
         _args.TAB.add()
      ?};
      _tab.next()
   !}
?};
exec('rejestracja','prod_rej',_args);
GROP.cntx_pop();
1


\rej_grop_gpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Rejestracja wykonań - z poziomu grup operacji (akcja po grupie rekordoów)
::  OLD: \rej_grop_gpo/gr_oper.fml
::----------------------------------------------------------------------------------------------------------------------
~~


\args_4grop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zwraca wspólne wartości argumentow dla rejestracji do grup operacji
::       Użyte z formułach exec('rej_grop_pr','po_wyk'), exec('rej_grop_gpr','po_wyk')
::  OLD: \args_4grop/gr_oper.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('rejestracja_a','prod_rej');
_args.F_NAWIG:=0;
_args.F_FILTER:=1;
_args.F_START:=1;
_args.F_STOP:=1;
_args.F_WYKON:=1;
_args.F_XWYKON:=1;
_args.F_POTW:=1;
_args.F_XPOTW:=1;
_args.F_PROB:=0;
_args.F_XPROB:=0;
_args.F_DOC:=0;
_args.F_MAT:=0;
_args.F_PRAC:=0;
_args.F_BRYG:=0;
_args.F_REJ:=1;
_args.FILTR_PX:=0;
_args.FILTR_PL:=1;
_args.FILTR_ZL:=0;
_args.PR_DATA:=date(0,0,0);
_args.PR_GROP:='T';
_args.ED_DATA:=0;
_args.ED_ZAKR:=0;
_args.ED_RES:=1;
_args.ED_M:=0;
_args.ED_WYD:=0;
_args.ED_KH:=0;
_args.ED_OPIS:=1;
_args.ED_START:=1;
_args.ED_OK:=1;
_args.ED_POTW:=1;
_args.ED_PROB:=0;
_args.ED_PRAC:=0;
_args.ED_BRYG:=0;
_args.ED_KOOP:=0;
_args.ED_GROP:=1;
_args.ED_A:=1;
_args.ED_DOREJ:=1;
_args.ED_PX:=0;
_args.ED_PL:=1;
_args.ED_ZL:=0;
_args.CLOSE:="";
_args


\trig_add_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Trigger tabeli PL_WYK (przed add)
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.PL_WYK='T'
|| return(1)
?};
exec('pl_wyk_trig_b','po_wyk');
1


\trig_add_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Trigger tabeli PL_WYK (po add)
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.PL_WYK='T'
|| return()
?};
exec('pl_wyk_trig_a','po_wyk','add');
exec('auto_px_wyk','px_wyk','add',PL_WYK);
exec('auto_zlgd','zl_wyk','add');
~~


\trig_put_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Trigger tabeli PL_WYK (przed put)
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.PL_WYK='T'
|| return(1)
?};
exec('pl_wyk_trig_b','po_wyk');
1


\trig_put_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Trigger tabeli PL_WYK (przed add)
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.PL_WYK='T'
|| return()
?};
exec('pl_wyk_trig_a','po_wyk','put');
exec('auto_px_wyk','px_wyk','put',PL_WYK);
exec('auto_zlgd','zl_wyk','put');
~~


\trig_del_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Trigger tabeli PL_WYK (przed del)
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.PL_WYK='T'
|| return(1)
?};
exec('auto_px_wyk','px_wyk','del',PL_WYK);
exec('auto_zlgd','zl_wyk','del');
1


\trig_del_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Trigger tabeli PL_WYK (po del)
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.PL_WYK='T'
|| return()
?};
{? _a || exec('pl_wyk_trig_a','po_wyk','del') || ~~ ?}


\pl_wyk_trig_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Trigger przed add() i przed put() w tabeli PL_WYK.
::       Automatycznie wypelnia pola: PL_WYK.TM_START, PL_WYK.TM_END, PL_WYK.TM_MOD, PL_WYK.TM_SRC_S, PL_WYK.TM_SRC_E
::  OLD: \pl_wyk_trig_b/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
PL_WYK.TM_START:=exec('create','#tm_stamp',PL_WYK.STARTD().DATA,PL_WYK.STARTT);
PL_WYK.TM_END:=exec('create','#tm_stamp',PL_WYK.ENDD().DATA,PL_WYK.ENDT);
PL_WYK.TM_MOD:=PL_WYK.tm_stamp();
{? PL_WYK.PL_OPER<>null()
|| PL_WYK.TM_SRC_S:=PL_WYK.PL_OPER().TM_START;
   PL_WYK.TM_SRC_E:=PL_OPER.TM_END
|? PL_WYK.PL_OGR<>null()
|| PL_WYK.TM_SRC_S:=PL_WYK.PL_OGR().TM_START;
   PL_WYK.TM_SRC_E:=PL_OGR.TM_END
?};
1


\pl_wyk_trig_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Trigger po add(), put(), del() w tabeli PL_WYK.
::       Automatycznie wypelnia PL_OPER.WYK, PL_OPER.IL_WYK, PL_OPER.IL_BRAK, PL_OPER.DEK_IL, PL_OPER.DEK_BR
::       albo PL_OGR.WYK, PL_OGR.IL_WYK
::   WE: _a - rodzaj triggera: 'add', 'put', 'del'
::  OLD: \pl_wyk_trig_a/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a='add' | _a='put' || _pl_oper:=PL_WYK.PL_OPER; _pl_oz:=PL_WYK.PL_OZ; _pl_ogr:=PL_WYK.PL_OGR
|? _a='del'            || _pl_oper:=bfld('PL_OPER'); _pl_oz:=bfld('PL_OZ'); _pl_ogr:=bfld('PL_OGR')
                       || return()
?};

_wyk:=_il_wyk:=_il_brak:=_id_wyk:=_id_brak:=_il_potw:=0;
Cntx.psh(PL_WYK,PL_OPER,PL_OZ,PL_OGR);
Cntx.clr(PL_OPER,PL_OZ,PL_OGR);

{? _pl_oz<>null() & PL_OPER.seek(_pl_oper)
||
:: Operacja pojedyncza
   PL_WYK.index('PL_OZ');
   PL_WYK.prefix(_pl_oz);
   {? PL_WYK.first()
   || {!
      |?
         _wyk+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.TM_END-PL_WYK.TM_START ?};
         _il_wyk+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.IL_WYK ?};
         _il_brak+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.IL_BRAK ?};
         {? PL_WYK.KJ_DONE<>'T'
         || _id_wyk+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.DEK_IL ?};
            _id_brak+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.DEK_BR ?}
         ?};
         PL_WYK.next()
      !}
   ?};
   PL_OPER.WYK:=_wyk/exec('minute','#tm_stamp');
   PL_OPER.IL_WYK:=_il_wyk;
   PL_OPER.IL_BRAK:=_il_brak;
   PL_OPER.DEK_IL:=_id_wyk;
   PL_OPER.DEK_BR:=_id_brak;
   PL_OPER.put()

|? PL_OPER.seek(_pl_oper)
||
:: Kooperacja (brak PL_OZ)
   PL_WYK.index('PL_OPER');
   PL_WYK.prefix(_pl_oper);
   {? PL_WYK.first()
   || {!
      |?
         _wyk+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.TM_END-PL_WYK.TM_START ?};
         _il_wyk+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.IL_WYK ?};
         _il_brak+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.IL_BRAK ?};
         {? PL_WYK.KJ_DONE<>'T'
         || _id_wyk+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.DEK_IL ?};
            _id_brak+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.DEK_BR ?}
         ?};
         PL_WYK.next()
      !}
   ?};
   PL_OPER.WYK:=_wyk/exec('minute','#tm_stamp');
   PL_OPER.IL_WYK:=_il_wyk;
   PL_OPER.IL_BRAK:=_il_brak;
   PL_OPER.DEK_IL:=_id_wyk;
   PL_OPER.DEK_BR:=_id_brak;
   PL_OPER.put()

|? _pl_ogr<>null() & PL_OGR.seek(_pl_ogr)
||
:: Grupa operacji
   PL_WYK.index('PL_OGR');
   PL_WYK.prefix(_pl_ogr);
   {? PL_WYK.first()
   || {!
      |?
         _wyk+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.TM_END-PL_WYK.TM_START ?};
         _il_wyk+={? PL_WYK.ENDD().DATA=date(0,0,0) || 0 || PL_WYK.IL_WYK ?};
         _il_potw+={? PL_WYK.POTW='T' || PL_WYK.IL_WYK || 0 ?};
         PL_WYK.next()
      !}
   ?};
   PL_OGR.WYK:=_wyk/exec('minute','#tm_stamp');
   PL_OGR.IL_WYK:=_il_wyk;
   PL_OGR.IL_POTW:=_il_potw;
   PL_OGR.put()

?};

Cntx.pop(PL_WYK,PL_OPER,PL_OZ,PL_OGR);
~~


\pl_wyk_fld_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsluga przed wyswietl dla pol w tabeli PL_WYK
::  OLD: \pl_wyk_fld_bd/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='POTW'
|| {? PL_WYK.PL_OGR=null()
   || 0
   || 1
   ?}
|| 1
?}


\pl_wyk_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsluga przed redakcja dla pol w tabeli PL_WYK
::  OLD: \pl_wyk_fld_be/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
1


\pl_wyk_fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsluga po redakcji dla pol w tabeli PL_WYK
::  OLD: \pl_wyk_fld_ae/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
1


\pl_wyk_fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Format wyswietlania dla pol w tabeli PL_WYK
::  OLD: \pl_wyk_fld_fd/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='';
{? cur_afld()='ILOSC' | cur_afld()='IL_WYK' | cur_afld()='IL_BRAK'
|| _result:='out_prec='+{? (2+cur_kwin())='e_'
                        || {? PL_WYK.ZL().KTM=null() || $ST.DOKL_P || $PL_WYK.ZL().KTM().DOKL ?}
                        || $ST.DOKL_P
                        ?}
?};
_result


\pl_wyk_fld_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Format redagowania dla pol w tabeli PL_WYK
::  OLD: \pl_wyk_fld_fe/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
''


\display_wyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Wyswietlenie rekordu rejestracji wykonania do planu operacyjnego (zasobow) PL_WYK
::  OLD: \display_wyk/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
PL_WYK.P();
PL_WYK.win_edit('RED');
PL_WYK.display();
~~


\popraw_wyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Poprawienie wykonania do planu operacyjnego (zasobow) PL_WYK
::  OLD: \popraw_wyk/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? PL_WYK.AUTO='T'
|| FUN.info('Zapis automatyczny — nie można poprawić.'@)
|? PL_WYK.POTW='T'
|| FUN.info('Zapis potwierdzony — nie można poprawić.'@)
||
   PROD_REJ.cntx_psh();

:: Znajdz odpowiedni PROD_REJ
   {? PL_WYK.PL_OGR<>null()
   || PROD_REJ.index('PL_OGR');
      PROD_REJ.prefix('PL',PL_WYK.PL_OGR);
      _dalej:=PROD_REJ.first()
   |? PL_WYK.PL_OPER<>null()
   || PROD_REJ.index('PL_OPER');
      PROD_REJ.prefix('PL',PL_WYK.PL_OPER);
      _dalej:=PROD_REJ.first()
   ?};

   {? _dalej
   ||
      VPRODREJ.M:=PROD_REJ.M;
      VPRODREJ.IL:=PL_WYK.IL_WYK;
      VPRODREJ.IL_BRAK:=PL_WYK.IL_BRAK;
      VPRODREJ.IL_PLAN:=PL_WYK.ILOSC;
      VPRODREJ.JM:=PROD_REJ.JM;
      VPRODREJ.STARTD:=PL_WYK.STARTD().DATA;
      VPRODREJ.STARTT:=PL_WYK.STARTT;
      VPRODREJ.ENDD:=PL_WYK.ENDD().DATA;
      VPRODREJ.ENDT:=PL_WYK.ENDT;
      _edit_end:=VPRODREJ.ENDD<>date(0,0,0) & VPRODREJ.ENDT<>time(0,0,0);
      VPRODREJ.EDIT_ILP:=0;
      VPRODREJ.EDIT_ILB:={? _edit_end  || 1 || 0 ?};
      VPRODREJ.EDIT_STA:=1;
      VPRODREJ.EDIT_END:={? _edit_end  || 1 || 0 ?};
      VPRODREJ.TP:=PL_WYK.TP;
      {? PROD_REJ.GROP<>null()
      || VPRODREJ.win_edit('GR_POPR');
         VPRODREJ.DOKL:=0;
         VPRODREJ.EDIT_IL:=0
      |? VPRODREJ.TP='T'
      || VPRODREJ.win_edit('PL_PO_TP');
         VPRODREJ.DOKL:=0;
         VPRODREJ.EDIT_IL:=0;
         VPRODREJ.btn_eopt('PL_PO_TP','END',{? _edit_end || 'state=normal' || 'state=grayed' ?})
      || VPRODREJ.win_edit('PL_POPR');
         VPRODREJ.DOKL:=PROD_REJ.M().DOKL;
         VPRODREJ.EDIT_IL:={? _edit_end  || 1 || 0 ?}
      ?};
      VPRODREJ.EDIT_OK:={? _edit_end || 1 || 0 ?};
      VPRODREJ.PLACE:=PL_WYK.PLACE;

      _zl_synchro:=0;
      {? PROD_REJ.SRODZ='PL' & exec('get','#params',500621,2)='P'
      ||
::       Jesli jestem na planie operacyjnym to wypelniam partie tylko
::       jesli jest wlaczona synchronizacja PL->ZL czyli par 500621 ma wartosc P
         _zl_synchro:=1
      ?};

      {? _zl_synchro>0
      ||
::       Sprawdzam czy pole z partią musi być wypełnione
         _party_req:=exec('party_req','zl_wyk',PL_WYK.ZL);

         {? _party_req>0
         ||
::          Sprawdzam czy zlecenie produkcyjne jest zleceniem na ktore rejestruje robocizne
::          jesli tak, to moge sprobowac podpowiedziec partie. Jesli nie to pewnie jest przypadek
::          zlecenia zlozonego i nie moge podpowiedziec partii
::          Jesli zlecenie jest partiowane to sprawdzam ile partii ma przewodnik - jesli tylko jedna
::          to podpowiadam partie
            ZPARN.cntx_psh();
            ZPARN.index('ZGH');
            _zgh:=PL_WYK.PL_OPER().ZGP().NRZLP;
            {? _zgh<>null()
            || _party_zgh:=exec('party_first_zgh','zl_guide',_zgh);
               {? _party_zgh<>null()
               || ZPARN.prefix(_party_zgh);
                  {? ZPARN.size()=1
                  || {? ZPARN.first()
                     || VPRODREJ.ZPARN:=ZPARN.ref()
                     ?}
                  ?}
               ?}
            ?};
            ZPARN.cntx_pop();
            ~~
         ?}
      ?};

      {? _edit_end
      ||
         _valid:="
            _result:='';
::          Ilosc do pomniejszenia
            _il_del:=PL_WYK.IL_WYK-VPRODREJ.IL;

::          Zarejestrowano w tej operacji
            _il_oper:=PL_WYK.PL_OPER().IL_WYK;

::          Kolejna operacja
            _il_next:=exec('il_nast','po_wyk',PROD_REJ.ref());

::          Ilosc do wykonania
            _il:=PL_WYK.ILOSC;

::          tm_stapmy
            _tm_start:=exec('create','#tm_stamp',VPRODREJ.STARTD,VPRODREJ.STARTT);
            _tm_end:=exec('create','#tm_stamp',VPRODREJ.ENDD,VPRODREJ.ENDT);

            {? VPRODREJ.TP='N' & VPRODREJ.IL=0 & VPRODREJ.IL_BRAK=0
            || FUN.info('Proszę podać ilość większą od zera.'@);
               _result:='IL'
            |? VPRODREJ.TP='N' & VPRODREJ.IL<0
            || FUN.info('Ilość nie może być ujemna.'@);
               _result:='IL'
            |? VPRODREJ.TP='N' & VPRODREJ.IL_BRAK<0
            || FUN.info('Ilość braków nie może być ujemna.'@);
               _result:='IL_BRAK'
            |? VPRODREJ.TP='N' & VPRODREJ.IL+VPRODREJ.IL_BRAK>_il
            || FUN.info('Suma ilości zarejestrowanej nie może być większa od pobranej do wykonania.'@);
               _result:='IL'
            |? VPRODREJ.TP='N' & VPRODREJ.IL+VPRODREJ.IL_BRAK<_il
            || FUN.info('Suma ilości zarejestrowanej nie może być mniejsza od pobranej do wykonania.'@);
               _result:='IL'
            |? exec('get','#params',500632,2)='T' & _il_del>0 & _il_next.ILCNAST<>0 & (_il_oper-_il_del<_il_next.ILCNAST)
            || FUN.info(
                  'Nie można zmniejszyć ilosci o '+$_il_del+' '+VPRODREJ.JM().KOD+' z '+$_il_oper+' '+JM.KOD+' zarejestrowanych.\n'+
                  'W następnym etapie procesu zarejestrowano: '+$_il_next.IL_NAST+' '+JM.KOD+'.'
               );
               _result:='IL'
            |? VPRODREJ.STARTD=date(0,0,0)
            || FUN.info('Data początkowa musi być podana.'@);
               _result:='STARTD'
            |? _tm_end<_tm_start
            || FUN.info('Zakończenie operacji nie może być wcześniejsze od rozpoczęcia.'@);
               _result:='STARTD'
            |? _tm_end-_tm_start>8*60*exec('minute','#tm_stamp')
            ||
               {? FUN.ask(
                     'Czas realizacji pracy większy niż 8 godzin.\n\n'
                     'Czy na pewno chcesz zarejestrować zakończenie opearcji?'@
                  )
               || 1
               || _result:='STARTD'
               ?}
            ?};
            {? _result='' & VPRODREJ.PLACE=null()
            || FUN.info('Należy wskazać stanowisko, na którym została wykonana operacja.'@);
               _result:='PLACE'
            ?};
::          Kontrola partii
            {? _result='' & exec('get','#params',500621,2)='P'
            ||
::             Sprawdzam czy pole z partią musi być wypełnione
               _party_req:=exec('party_req','zl_wyk',PL_WYK.ZL);

               {? _party_req>0
               ||
                  {? VPRODREJ.ZPARN=null()
                  || _party_zl:=exec('party_first','zl_link',PL_WYK.ZL);
                     _zl_sym:=exec('record','#to_string',_party_zl);
                     _msg:='Zlecenie: %1 jest partiowane.'
                           'Należy wskazać partię do której zostanie przypisana rejestrowana robocizna.'@[_zl_sym];
                     FUN.emsg(_msg);
                     _result:='ZPARN'
                  ?}
               ?}
            ?};
            _result
         "
      ||
         _valid:="
            {? VPRODREJ.STARTD=date(0,0,0)
            || FUN.info('Data początkowa musi być podana.'@);
               'STARTD'
            || 1
            ?}
         "
      ?};

      {? VPRODREJ.edit(_valid)
      ||
::       Uzupelnienie zapisow wszystkich PL_OZ dla danego PL_OPER (pozostale zasoby dla danej operacji)
         Cntx.psh(PL_WYK);

         PL_WYK.index('UID');
         PL_WYK.prefix(PL_WYK.UID);
         {? PL_WYK.first()
         || {!
            |? PL_WYK.STARTD:=exec('get','daty',VPRODREJ.STARTD);
               PL_WYK.STARTT:=VPRODREJ.STARTT;
               PL_WYK.ENDD:=exec('get','daty',VPRODREJ.ENDD);
               PL_WYK.ENDT:=VPRODREJ.ENDT;
               PL_WYK.IL_WYK:=VPRODREJ.IL;
               PL_WYK.IL_BRAK:=VPRODREJ.IL_BRAK;
               PL_WYK.ZPARN:=VPRODREJ.ZPARN;
               PL_WYK.OK:=VPRODREJ.OK;
               PL_WYK.PLACE:=VPRODREJ.PLACE;
               PL_WYK.put();
               PL_WYK.next()
            !}
         ?};

         Cntx.pop(PL_WYK)
      ?};
      undefine()
   ?};

   Cntx.pop(PROD_REJ)
?};
~~


\usun_wyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Usuniecie wykonania do planu operacyjnego (zasobow) PL_WYK
::  OLD: \usun_wyk/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? PL_WYK.AUTO='T'
|| FUN.info('Zapis automatyczny — nie można usunąć.'@)
|? PL_WYK.POTW='T'
|| FUN.info('Zapis potwierdzony — nie można usunąć.'@)
||
   Cntx.psh(PROD_REJ);

:: Znajdz odpowiedni PROD_REJ
   _dalej:=0;
   {? PL_WYK.PL_OGR<>null()
   || PROD_REJ.index('PL_OGR');
      PROD_REJ.prefix('PL',PL_WYK.PL_OGR);
      _dalej:=PROD_REJ.first()
   |? PL_WYK.PL_OPER<>null()
   || PROD_REJ.index('PL_OPER');
      PROD_REJ.prefix('PL',PL_WYK.PL_OPER);
      _dalej:=PROD_REJ.first();
::    Próba odtworzenia PROD_REJ dla bieżącego zapisu
      {? _dalej=0 || exec('load_4rej','po_wyk',0,PL_WYK.PL_OPER().PL_PART) ?};
      _dalej:=PROD_REJ.first()
   ?};

   {? _dalej
   ||
::    Sprawdzenie, czy mozna usunac (czy sa rejestracje do nastepnikow)
::    Ilosc do usuniecia
      _il_del:=PL_WYK.IL_WYK;

::    Zarejestrowano w tej operacji
      _il_oper:=PL_WYK.PL_OPER().IL_WYK;

::    Kolejne operacje (maksimum wykonane) albo operacje grupowe
      _il_next:=exec('il_nast','po_wyk',PROD_REJ.ref());

::   FUN.info('Usunąć '+$_il_del+' z '+$_il_oper+'.\nW następnym etapie procesu zarejestrowano: '+$_il_next+'.');

::    Ustawienie srodowiska
      VPRODREJ.JM:=PL_WYK.PL_OPER().PL_PART().M().J;

      {? exec('get','#params',500632,2)='T' & _il_next.ILCNAST<>0 & (_il_oper-_il_del<_il_next.ILCNAST)
      ||
         FUN.emsg(
            'Nie można usunąć %1 %2 z %3 %2 zarejestrowanych.\n'
            'W następnym etapie procesu zarejestrowano: %4 %2.'@
            [$_il_del,VPRODREJ.JM().KOD,$_il_oper,$_il_next.IL_NAST]
         )
      ||
         {? FUN.ask('Czy usunąć zapis?'@)
         || KOMM.init(,,'Usuwanie rejestracji wykonania pozycji planu'@);
::          Uzupelnienie zapisow wszystkich PL_OZ dla danego PL_OPER (pozostale zasoby dla danej operacji)
            Cntx.psh(PL_WYK);

            PL_WYK.index('UID');
            PL_WYK.prefix(PL_WYK.UID);
            {? PL_WYK.first()
            || {! |? PL_WYK.del() !}
            ?};

            Cntx.pop(PL_WYK);
            KOMM.select()
         ?}
      ?}
   || FUN.info(
         'Nie znaleziono zapisu dla %1.'@
         [{? PL_WYK.PL_OGR<>null() || PL_WYK.PL_OGR().SYMBOL ||  PL_WYK.PL_OPER().SYMBOL ?}]
      )
   ?};

   Cntx.pop(PROD_REJ)
?};
~~


\pl_wyk_stop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Obsluga przycisku 'Koniec' w oknie zarejestrowanych wykonan (PL_WYK)
::       Kontekst pracy: PL_WYK
::  OLD: \pl_wyk_stop/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(PROD_REJ);
{? PL_WYK.PL_OGR<>null()
|| PROD_REJ.index('PL_OGR');
   PROD_REJ.prefix('PL',PL_WYK.PL_OGR);
   {? PROD_REJ.first()
   || exec('pl_wyk_koniec','po_wyk')
   || FUN.emsg('Nie znaleziono zapisu.'@)
   ?}
|| PROD_REJ.index('PL_OPER');
   PROD_REJ.prefix('PL',PL_WYK.PL_OPER);
   {? PROD_REJ.first()
   || exec('pl_wyk_koniec','po_wyk')
   || FUN.emsg('Nie znaleziono zapisu.'@)
   ?}
?};
Cntx.pop(PROD_REJ);
~~


\pl_wyk_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przypisanie pracownika/brygady do biezacego zapisu PL_WYK
::  OLD: \pl_wyk_pb/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
{? PL_WYK.AUTO='T'
|| FUN.info('Nie można modyfikować — zapis automatyczny.'@)

|? PL_WYK.POTW='T'
|| FUN.info('Nie można modyfikować — zapis potwierdzony.'@)

||
:: Przypisanie pracownika (N)/brygady (T)
   _bryg:='N';
   {? PL_WYK.PL_OGR<>null()
   || _grop:=PL_WYK.PL_OGR().GROP;
      _bryg:=exec('grop_bryg','zl_grop',_grop)
   |? PL_WYK.PL_OPER<>null()
   || _bryg:=PL_WYK.PL_OPER().ZGP().BRYG
   ?};

   {? _bryg='T'
   || _zlbr:=exec('zlbr_select','prod_rej',PL_WYK.ZLBR);
      {? _zlbr<>null()
      || exec('zlbs_f_set','zasoby',_zlbr,PL_WYK.STARTD().DATA);
         {? ZLBS.f_size()=0
         || FUN.info('Pusty skład brygady na dzień %1.'@[$PL_WYK.STARTD().DATA])
         || PL_WYK.ZLBR:=_zlbr;
            PL_WYK.put()
         ?}
      ?}

   |? _bryg='N'
   || {? PL_WYK.PL_OPER().ZGP().WYK_FAST='T'
      || _pracownik:=exec('p_select_simple','prod_rej')
      || _pracownik:=exec('p_select','prod_rej')
      ?};
      {? _pracownik<>null()
      || PL_WYK.P:=_pracownik;
         PL_WYK.put()
      ?}

   ?}
?};
~~


\pl_wyk_ties
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Wyswietla powiazania zarejestrowanej operacji z rejestracjami zrodlowymi i wynikowymi
::  OLD: \pl_wyk_ties/pl_wyk.fml
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(ZLGD,ZLGB,PL_WYK,PX_WYK);

{? PL_WYK.AUTO='T'
||
:: Zrodlowa ZLGD
   ZLGD.clear();
   {? ZLGD.seek(PL_WYK.ZLGD,8+PL_WYK.ZLGD)
   || ZLGD.win_edit('RED');
      ZLGD.display()
   || FUN.info('Brak danych źródłowych.'@)
   ?}
||
   _px_wyk:=0;
   _zlgd:=0;

:: Wynikowe PX_WYK
   PX_WYK.index('PL_WYK');
   PX_WYK.prefix($PL_WYK.ref());
   {? PX_WYK.first()
   || _px_wyk:=1;
      PX_WYK.PX_POZ();
      _il_wym:=PX_POZ.PX_KONT().IL_WYM;
      _max_wym:=exec('il_wym','px_param');
      {! _it:=1.._il_wym
      |! ($('PX_VAR.TITD'+$_it+':=PX_KONT.JM'+$_it+'().KOD+\' - \'+JM.NAZ'))();
         _war:=($('PX_VAR.TITD'+$_it))();
         PX_WYK.fld_opt('WER_PL','col_name=%1'[_war],PX_WYK,'CAP_WYK'+$_it)
      !};
      {? _il_wym<_max_wym
      || {! _it:=_il_wym+1.._max_wym
         |! ($('PX_VAR.TITD'+$_it+':=\'""\''))();
            _war:=($('PX_VAR.TITD'+$_it))();
            PX_WYK.fld_opt('WER_PL','col_name=%1'[_war],PX_WYK,'CAP_WYK'+$_it)
         !}
      ?}
   ?};

:: Wynikowe ZLGD/ZLGB
   ZLGD.index('PL_WYK');
   ZLGD.prefix(PL_WYK.UID);
   {? ZLGD.first()
   || _zlgd:=1
   ?};

:: Selekcja
   PX_WYK.actions('WER_PL','DPUZ:D');
   ZLGD.actions('WER','dPUCAO:dCA');

   {? _px_wyk & _zlgd
   || _grp:=PX_WYK.grp_make('Zapisy wynikowe'@,,'plwyktieswyn',,,,,'normal','jterm');
      PX_WYK.grp_sel(_grp,,'WER_PL',,,,,10,"grp_disp(ZLGD,'WER')",,,,'maximized_with_title');
      PX_WYK.grp_splt(_grp,,'horizontal','zlgd');
      PX_WYK.grp_sel(_grp,ZLGD,'WER',,,,,10,,,,,'maximized_with_title');
      PX_WYK.win_sel(_grp);
      PX_WYK.select()
   |? _px_wyk & ~_zlgd
   ||
      PX_WYK.win_sel('WER_PL');
      PX_WYK.select()
   |? ~_px_wyk & _zlgd
   ||
      ZLGD.win_sel('WER');
      ZLGD.select()
   ||
      FUN.info('Brak zapisów wynikowych.'@)
   ?};

   PX_WYK.actions('WER_PL');
   ZLGD.actions('WER')
?};

Cntx.pop(ZLGD,ZLGB,PL_WYK,PX_WYK);
~~


\access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdzenie, czy jest dostęp do rejestracji wykonań do planu operacyjnego
::   WE: [_a] - czy komunikaty (1 - tak, domyslnie), 0 - nie
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _msg:=_a || _msg:=1 ?};

{? exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWPO')=0 | exec('get','#params',500612,2)='N'
||
   {? _msg || FUN.info('Brak uprawnień do rejestracji wykonań do planu operacyjnego.'@) ?};
   0
|? exec('get','#params',500621,2)='Z'
||
   {? _msg
   || FUN.info(exec('form','#string','L',
         'Brak dostępu do rejestracji wykonań do planu operacyjnego.'@,
         'Ustawiona synchronizacja wykonań z przewodników zleceń.'@
      ))
   ?};
   0
||
   1
?}


\pl_wyk_record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rekord przed w oknie PL_WYK
::----------------------------------------------------------------------------------------------------------------------
_grayed:=':';

{? PL_WYK.POTW='T'
|| _grayed:='I'+_grayed
|| _grayed:='O'+_grayed
?};

PL_WYK.actions_grayed('WER',_grayed);
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:38 c9250dd5885817917f67f71c10507d6860f70e61c70618a429267077011301446fdfcc9107b09d48ef8684c2f3d07b9a83ff3456616d10236210c55cdd84fdead8465d6ca6947ea98eda77387ccb4babaa96a99814c6df693aef548c7cb29b00a9d1f7f9a0583eb13e9919dd15ec5f820648f8997d5ac089db9a7666a66b52a9
