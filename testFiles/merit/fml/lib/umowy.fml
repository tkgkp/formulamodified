:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrze�one
::======================================================================================================================
:: Nazwa pliku: umowy.fml
:: Utworzony: 09.11.2018
:: Autor: MW
:: Systemy: Merit
::======================================================================================================================
:: Zawartość: Umowy
::======================================================================================================================


\chk_stu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: akcja rekord po dla slownika statusow umowy
::----------------------------------------------------------------------------------------------------------------------
exec('chk_stu_core','umowy',-menu_txt()='popraw')


\chk_stu_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: Walidacja rekordu tabeli STU (statusy umów)
::       - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(STU,,'KOD','NAZ');
{? _chk=''
|| {? STU.RODZ<>'' & STU.A='T'
   || FUN.info('Tylko umowa ze statusem Inny może być aktywna.'@);
      _chk:='A'
   |? form(STU.F)=''
   || FUN.info('Wymagane podanie Formuły przed.\nUwaga. Jeśli nie jest ona wykorzystywana należy wpisać: 1.'@);
      _chk:='F'
   |? form(STU.FP)=''
   || FUN.info('Wymagane podanie Formuły po.\nUwaga. Jeśli nie jest ona wykorzystywana należy wpisać: 1.'@);
      _chk:='FP'
   |? __CHK.index(STU,_a)=''
   || _chk:=''
   || _chk:='KOD'
   ?}
?};
_chk


\chk_fas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: akcja rekord po dla slownika sposobów fakturowania umów kontrahenta
::----------------------------------------------------------------------------------------------------------------------
exec('chk_fas_core','umowy',-menu_txt()='popraw')


\chk_fas_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: Walidacja rekordu tabeli FAS (Sposób fakturowania umów kontrahenta)
::       - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(FAS,,'KOD','NAZ');
{? _chk=''
|| {?__CHK.index(FAS,_a)=''
   || ''
   || 'KOD'
   ?}
|| _chk
?}


\chk_usl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: akcja rekord po dla slownika rodzajów usług
::----------------------------------------------------------------------------------------------------------------------
exec('chk_usl_core','umowy',-menu_txt()='popraw')


\chk_usl_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: Walidacja rekordu tabeli USL (Rodzaje usług)
::       - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(USL,,'KOD','NAZ');
{? _chk=''
|| {?__CHK.index(USL,_a)=''
   || ''
   || 'KOD'
   ?}
|| _chk
?}


\chk_upsys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: akcja rekord po dla slownika systemów usług
::----------------------------------------------------------------------------------------------------------------------
exec('chk_upsys_core','umowy',-menu_txt()='popraw')


\chk_upsys_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: Walidacja rekordu tabeli UPSYS (Systemy usług)
::       - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(UPSYS,,'KOD','NAZ');
{? _chk=''
|| {?__CHK.index(UPSYS,_a)=''
   || ''
   || 'KOD'
   ?}
|| _chk
?}


\bl_umwys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: blank zmiennej
::  OLD: \bl_umwys/um.fml
::----------------------------------------------------------------------------------------------------------------------
UMO.WYS


\ae_odp_k
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: po redakcji pola KOD w ODP
::  OLD: \ae_odp_k/um.fml
::----------------------------------------------------------------------------------------------------------------------
ODP.KOD:=exec('odp_kod','umowy');
1


\odp_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: tworzenie kodu w ODP na podstawie slownikow
::       dla biezacej wartosci ODP w buforze
::   WY: _wyn - kod odpadu
::  OLD: \odp_kod/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? ODP.ODPG<>null
|| _wyn:=ODP.ODPG().KOD
|| _wyn:='  '
?};
{? ODP.ODPP<>null
|| _wyn+=ODP.ODPP().KOD
|| _wyn+='  '
?};
{? ODP.K<>''
|| _wyn+=ODP.K
|| _wyn+='  '
?};
_wyn


\be_odp_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: przed redakcją pola grupa w ODP
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__temp_odp_odpg');
__temp_odp_odpg:=ODP.ODPG;
1


\ae_odp_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: po redakcji pola grupa w ODP
::  OLD: \ae_odp_s/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? fld=null
||
   FUN.info('Pole jest wymagane do dalszej edycji.'@);
   _wyn:=0
||
::   {? 1+(-menu_txt)<>'p'
::   ||
   {? __temp_odp_odpg<>ODP.ODPG
   ||
      ODP.ODPP:=null
   ?}
?};
{? _wyn=1
||
   _wyn:=exec('ae_odp_k','umowy')
?};
_wyn


\odpg_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: ODPG.ref
::  OLD: \odpg_ref/um.fml
::----------------------------------------------------------------------------------------------------------------------
ODPG.ref()


\chk_odp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: po rekord tab. ODP
::  OLD: \chk_odp/um.fml
::----------------------------------------------------------------------------------------------------------------------
exec('chk_odp_core','umowy',-menu_txt()='popraw')


\be_usun_odpg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: przed usunięciem rekordu ODPG
::----------------------------------------------------------------------------------------------------------------------
_count:=ODPG.count();
{? _count || FUN.emsg('Nie można usunąć grupy. Istnieją zapisy z nią powiązane.'@) ?};
~_count


\be_usun_odpp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: przed usunięciem rekordu ODPP
::----------------------------------------------------------------------------------------------------------------------
_count:=ODPP.count();
{? _count || FUN.emsg('Nie można usunąć podgrupy. Istnieją zapisy z nią powiązane.'@) ?};
~_count


\ae_odp_wm3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: po redakcji pola WM3 w ODP
::----------------------------------------------------------------------------------------------------------------------
{? ODP.WM3<0
||
   FUN.info('Podano nieprawidłową wagę odpadów.'@);
   return(0)
?};
1


\be_usun_usl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: Przed usunięciem rekordu tabeli USL. Sprawdza, czy nie wykorzystywany
::   WY: 0 - nie można usuwać, zapis wykorzystywany w innych danych systemie
::       1 - można usuwać
::----------------------------------------------------------------------------------------------------------------------
_count:=USL.count();
{? _count || FUN.emsg('Nie można usunąć tego rodzaju usług. Istnieją zapisy z nim powiązane.'@) ?};
~_count


\be_usun_upsys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: Przed usunięciem rekordu tabeli USL. Sprawdza, czy nie wykorzystywany
::   WY: 0 - nie można usuwać, zapis wykorzystywany w innych danych systemie
::       1 - można usuwać
::----------------------------------------------------------------------------------------------------------------------
_count:=UPSYS.count();
{? _count || FUN.emsg('Nie można usunąć tego systemu usług. Istnieją zapisy z nim powiązane.'@) ?};
~_count


\chk_odpg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: po rekord tab. ODPG
::----------------------------------------------------------------------------------------------------------------------
exec('chk_odpg_core','umowy',-menu_txt()='popraw')


\chk_odpp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: po rekord tab. ODPG
::----------------------------------------------------------------------------------------------------------------------
exec('chk_odpp_core','umowy',-menu_txt()='popraw')


\chk_odpg_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: Walidacja rekordu tabeli ODPG
::       - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(ODPG,,'KOD','NAZ');
{? _chk=''
|| {?__CHK.index(ODPG,_a)=''
   || ''
   || 'KOD'
   ?}
|| _chk
?}


\chk_odpp_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: Walidacja rekordu tabeli ODPG
::       - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(ODPP,,'KOD','NAZ');
{? _chk=''
|| {?__CHK.index(ODPP,_a)=''
   || ''
   || 'KOD'
   ?}
|| _chk
?}


\be_usun_odp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: przed usunięciem rekordu ODP
::----------------------------------------------------------------------------------------------------------------------
_count:=ODP.count();
{? _count || FUN.emsg('Nie można usunąć rodzaju odpadów. Istnieją zapisy z nim powiązane.'@) ?};
~_count


\chk_odp_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: Walidacja rekordu tabeli ODP
::       - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(ODP,,'ODPG','ODFPP','K','NAZ');
{? _wyn='' || ODP.KOD:=exec('odp_kod','umowy') ?};
{? _wyn=''
||
   {? __CHK.index(ODP,_a)=''
   || _wyn:=''
   || _wyn:='K'
   ?}
?};
_wyn


\set_win
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: ustawia okna dla ZLBR, PRACW
::  OLD: \set_win/um.fml
::----------------------------------------------------------------------------------------------------------------------
ZLBR.win_dict('SLO');
ZLBR.win_edit();
PRACW.win_dict('SLO');
PRACW.win_edit();
''


\um_st_np
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: formula po zmianie statusu - nowego
::   WY: czy umowa jest prawidlowo uzupelniona
::  OLD: \um_st_np/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
UP.index('UM');
UP.prefix(UM.ref());
{? UP.first()
|| _txt:='';
   {!
   |? exec('tpos_bd','umowy');
      {? exec('chk_up','umowy',' dla poz. %1 umowy'@[$UP.POZ],1)<>'' || _wyn:=0 ?};
      {? _wyn=1 & UP.H<>null
      ||
         {? UP.H<>null
         ||
            {? ~exec('harm_spr','umowy_harm',UP.H)
            ||
               _txt+='Harmonogram użyty w poz. %1 nie ma aktywnych pozycji.\nCzy zatwierdzić?'@[form(UP.POZ)];
               _wyn:=0
            ?}
         ?}
      ?};
      UP.next() & _wyn
   !};
   {? _txt<>'' || {? FUN.ask(_txt) || _wyn:=1 ?} ?}
||
   _wyn:=0;
   FUN.info('Umowa nie posiada pozycji.\nZmiana statusu niemożliwa.'@)
?};
{? _wyn & UM.DO<>date(0,0,0) || exec('um_st_ap','umowy',,,,1) ?};
_wyn


\tpos_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: przed wyswietl POS_NR
::   WE: [_a] rodzaj  0 - dla poz umowy,  1 - dla pozycji zlecenia, 2 - pozycja kosztow dodatkowych
::          , 3-zlecenia transportowego
::  OLD: \tpos_bd/um.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=type_of(cur_tab());
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
{? _a=0 & _tab & cur_tab.name()='umk_p' || _a:=2 ?};
{? _a=1 & _tab & (4+cur_tab.name())='trnl' || _a:=3 ?};

{? _a=0
||
   {? UP.POS<>null
   ||
      mia:=UP.POS().MIA().NAZ;
      ul:=UP.POS().UL().UL;
      UMO.POS_NR:=UP.POS().NR
   ||
      mia:=ul:=nr:='';
      UMO.POS_NR:=''
   ?}
|? _a=1
||
   {? ZLE.POS<>null
   ||
      mia:=ZLE.POS().MIA().NAZ;
      ul:=ZLE.POS().UL().UL;
      ZLEC.POS_NR:=ZLE.POS().NR
   ||
      mia:=ul:=nr:='';
: warunek jeśli wtyczka modyfikowała ZLEC.POS_NR
      {? var_pres('__nrp')<=0
      ||
         ZLEC.POS_NR:=''
      ||
         exec('tpos_ae','umowy',1);
         VAR_DEL.delete('__nrp')
      ?}
   ?}
|? _a=2
||
   {? UMK_P.POS<>null
   ||
      mia:=UMK_P.POS().MIA().NAZ;
      ul:=UMK_P.POS().UL().UL;
      UMO.POS_NR:=UMK_P.POS().NR
   ||
      mia:=ul:=nr:='';
      ZLEC.POS_NR:=''
   ?}
|? _a=3
||
   {? TR_NZL.POS<>null
   ||
      mia:=TR_NZL.POS().MIA().NAZ;
      ul:=TR_NZL.POS().UL().UL;
      ZLEC.POS_NR:=TR_NZL.POS().NR
   ||
      mia:=ul:=nr:='';
      ZLEC.POS_NR:=''
   ?}
?};
1


\chk_up
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: po rekord dla tab. UP - pozycje umowy
::   WE: [_a] - dodatkowy opis w koumikacie
::       [_b] - pomijać sprawdzenie harmonogramu na pozycji
::  OLD: \chk_up/um.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>2 || _a:='' ?} || _a:='' ?};
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?}  || _b:=0 ?};

_wyn:='';

{? UMO.POS_NR=''
||
   FUN.info('Należy podać numer posesji kontrahenta %1.'@[UM.KH().SKR]);
   _wyn:='POS_NR'
?};
{? _wyn='' & UP.TAR=null
||
   FUN.info('Należy podać cennik%1.'@[_a]);
   _wyn:='TAR'
?};
{? _wyn='' & UP.WAL=null
||
   FUN.info('Należy podać walutę%1.'@[_a]);
   _wyn:='WAL'
?};

:: harmonogram i ryczalt
{? _wyn='' & (';HC'*UM.TYP_HR)>1
||

   {? UM.FAS().KOD<>'D'
   ||
::    kontrola uslug
      {? _wyn='' & UP.MJ=null & UP.M=null
      ||
         FUN.info('Należy podać usługę podstawową dla harmonogramu\nlub usługę podstawową ryczałtu.'@);
         _wyn:='MJ'
      ?};
::    co fakturowac
      {? _wyn='' & UM.FAS().KOD<>'N' & UP.F='N' & UP.M=null
      ||
         FUN.info('Należy zaznaczyć pole '
                  '[Fakturuj wg harmonogramu]%1'@[{? UM.TYP_HR<>'C'
                                                    || '\nlub uzupełnić usługę podstawową ryczałtu.'@
                                                    || '.'
                                                    ?}]);
         _wyn:={? UM.TYP_HR<>'C' || 'F' || 'M' ?}
      ?}
   ||
::    kontrola uslug - dzienne
      {? _wyn='' & UP.MJ=null
      ||
         FUN.info('Należy podać usługę podstawową dla harmonogramu.'@);
         _wyn:='MJ'
      ?};
      {? _wyn='' & UP.M<>null
      ||
         FUN.info('Dzienny sposób fakturowania - usługa ryczałtowa nie będzie obsługiwana.'@);
         _wyn:='M'
      ?};
::    co fakturowac
      {? _wyn='' & UP.F='N'
      ||
         FUN.info('Należy zaznaczyć pole [Fakturuj wg harmonogramu].'@);
         _wyn:='F'
      ?}
   ?};

:: kontrola harmonogramu
   {? _wyn='' & (UP.MJ<>null | UP.F='T') & UP.H=null
   ||
      FUN.info('Należy podać harmonogram.'@);
      _wyn:='HNK'
   ?};
   {? _wyn='' & (UP.H<>null | UP.F='T') & UP.MJ=null
   ||
      FUN.info('Należy podać usługę podstawową dla harmonogramu.'@);
      _wyn:='MJ'
   ?};
   {? _wyn='' & ~_b & UP.H<>null & exec('chk_zharm','umowy_harm')=0
   ||
::    komunikaty sa w \chk_zharm
      _wyn:='HNK'
   ?}
?};

:: tylko ryczalty
{? _wyn='' & UM.TYP_HR='R' & UP.M=null
||
   FUN.info('Należy podać usługę podstawową ryczałtu.'@);
   _wyn:='M'
?};

:: kontrola ilosci
{? _wyn='' & UP.MJ<>null & UP.IL=0
||
   FUN.info('Należy podać ilość dla usługi podstawowej harmonogramu.'@);
   _wyn:='IL'
?};
{? _wyn='' & UP.M_D<>null & ((UP.ILD=0 & UP.PRD=0) | (UP.ILD>0 & UP.PRD>0))
||
   FUN.info('Należy podać ilość dla dodatku wg harmonogramu.'@);
   _wyn:='ILD'
?};
{? _wyn='' & UP.M<>null & UP.ILM=0
||
   FUN.info('Należy podać ilość dla usługi podstawowej ryczałtu.'@);
   _wyn:='ILM'
?};
{? _wyn='' & UP.M<>null & UP.ILM>0 & UP.WSP=0
||
   FUN.info('Należy podać współczynnik dla usługi podstawowej ryczałtu.'@);
   _wyn:='WSP'
?};
{? _wyn='' & UP.DM<>null & ((UP.DILM=0 & UP.DPR=0) | (UP.DILM>0 & UP.DPR>0))
||
   FUN.info('Należy podać ilość dla dodatku ryczałtu.'@);
   _wyn:='DILM'
|? UP.IL<0
|| FUN.info('Ilośc nie może być liczbą ujemną.'@);
   _wyn:='IL'
|? UP.IL2<0
|| FUN.info('Ilośc nie może być liczbą ujemną.'@);
   _wyn:='IL2'
|? UP.ILD<0
|| FUN.info('Ilośc nie może być liczbą ujemną.'@);
   _wyn:='ILD'
|? UP.ILM<0
|| FUN.info('Ilośc nie może być liczbą ujemną.'@);
   _wyn:='ILM'
|? UP.DILM<0
|| FUN.info('Ilośc nie może być liczbą ujemną.'@);
   _wyn:='DILM'

?};
_wyn


\zlbr_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: rekord przed tab. ZLBR
::  OLD: \zlbr_act/um.fml
::----------------------------------------------------------------------------------------------------------------------
_act:='';
_def:='';
{? HA.F3='T'
|| _def:='T'
|| _act+='T'
?};
ZLBR.actions('SLOH',_act,_def,1);
''


\umst_ak2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: formula przed zmiana statusu umowy na aktywny sprawdza i ew.
::       generuje pozycje zlecen oraz podpina je do generacji automatycznych
::   WE: [_a] czy transakcja jest wywolana zewnetrznie - 1 tak / 0 nie
::  OLD: \umst_ak2/um3.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('ae_kh','kontrahent',0,UM.KH,0)=0 || return(0) ?};

UM.cntx_psh();
_wyn:=0;

{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

{? _a=0 || do ?};
echo('Zmiana statusu ..... proszę czekać'@);
_data1:={? UM.DTMP=date(0,0,0) || UM.OD || UM.DTMP ?};

:: sprawdzanie od kiedy mozna odtwarzac i odtwarzamy wszystko
_data_pom:=date(0,0,0);
_data:=date(0,0,0);

_um:=UM.ref();
echo('Sprawdzam zgłoszenia .... proszę czekać'@);
UM.cntx_psh();
_df:=_od:=exec('um_sp_dt','umowy_aneks',_um);
UM.cntx_pop();

{? _od=date(0,0,0) || _od:=exec('d_hgenod','umowy_wspolne',UM.ODDZ) || _od:=_od+1 ?};
_do:=exec('d_hgen_do','umowy_wspolne',UM.ODDZ);
{? _od<=_do
||
   {? exec('um_sp_us','umowy_aneks',_um,_od,_do,1,1,0);n_fakt=1
   ||
      echo('Usuwam zgłoszenia .... proszę czekać'@);
      exec('usu_mmm','umowy_wspolne',_um,_od,_do,1,0,0);
      echo('Odtwarzam zgłoszenia .... proszę czekać'@);
      _wyn:=exec('um_gen','umowy_zlecenia',_um,_od,_do,0,1)
   ?};
   UMAN.index('POZ');
   UMAN.prefix(_um);
   UM.prefix();
   {? UM.seek(_um)
   ||
      {? ((UMAN.last & UMAN.DF<>date(0,0,0)))
      ||
         UP.index('POZ');
         UP.prefix(_um);
         {? UP.first
         ||
            _do:=_df;
            {? UM.AN=0 || _od:=UM.OD || _od:=UMAN.D ?};

            {? exec('um_sp_us','umowy_aneks',_um,_od,_do,1,1,0);n_fakt=1
            ||
               echo('Usuwam zgłoszenia.... proszę czekać'@);
               exec('usu_mmm','umowy_wspolne',_um,_od,_do,1,0,0);
               echo('Odtwarzam zgłoszenia.... proszę czekać'@);
               exec('um_gen','umowy_zlecenia',_um,_od,_do,0,1)
            ?}
         ?}

      ?}
   ?}
||
::  zostala zafakturowana do konca okresu wygenerowanego
   _wyn:=1
?};
echo();

{? _wyn=0 & _a=0 || undo ?};
{? _a=0 || end() ?};
UM.cntx_pop();
_wyn


\up_umo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: ustawianie zmiennych UMO
::   WE: [_a] - 0 - zeruje, 1 - ustawia wg UP
::  OLD: \up_umo/um.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};
POMOC.RODZ:='U';
POMOC.USL:=UP.USL;
{? _a=0
||
   UMO.JM1:=null;
   UMO.JM2:=null;
   UMO.JM3:=null;
   UMO.JM4:=null;
   UMO.JM5:=null;
   UMO.JM6:=null;
   UMO.C1:=0;
   UMO.C2:=0;
   UMO.C3:=0;
   UMO.C4:=0;
   UMO.C5:=0;
   UMO.C6:=0;
   UMO.IL2:=0
||
   UMO.JM1:=UP.MJ().J;
   UMO.JM2:=exec('par_m3','jm');
   UMO.JM3:=UP.M_2().J;
   UMO.JM4:=UP.M_D().J;
   UMO.JM5:=UP.M().J;
   UMO.JM6:=UP.DM().J;
   TAZ.SD:='S';
   _params:=exec('tar_cenm_a','ceny');
   _params.TAR:=UP.TAR;
   _params.M:=UP.MJ;
   _params.WAL:=UP.WAL;
   _params.JM:=UMO.JM1;
   _params.D:=date();
   _params.BRT:=UP.UM().CB;
   _c1:=exec('tar_cenm','ceny',_params);
   _params.JM:=UMO.JM2;
   _c2:=exec('tar_cenm','ceny',_params);
   _params.M:=UP.M_2;
   _params.JM:=UMO.JM3;
   _c3:=exec('tar_cenm','ceny',_params);
   _params.M:=UP.M_D;
   _params.JM:=UMO.JM4;
   _c4:=exec('tar_cenm','ceny',_params);
   _params.M:=UP.M;
   _params.JM:=UMO.JM5;
   _c5:=exec('tar_cenm','ceny',_params);
   _params.M:=UP.DM;
   _params.JM:=UMO.JM6;
   _c6:=exec('tar_cenm','ceny',_params);
   UMO.C1:=_c1[1];
   UMO.C2:=_c2[1];
   UMO.C3:=_c3[1];
   UMO.C4:=_c4[1];
   UMO.C5:=_c5[1];
   UMO.C6:=_c6[1];
:: wg przelicznika jednostek dla m3
   UMO.OBJ:=exec('przel','jm',UP.MJ,UMO.JM2,UMO.JM1);
   _dokl:=exec('jaka_dok_mjm','jm',UP.MJ,UMO.JM2,UMO.JM1);
   roundmet(BEER.MDOKL);
   UMO.IL2:={? UMO.OBJ>0 || (UP.IL/UMO.OBJ)$_dokl || 0 ?};
   roundmet(5)
?};
''


\um_st_ap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: sprawdzenie zlecen wywolywana rowniez podczas wystawiania zawieszen
::   WE:  _a  - ref umowy
::       [_b] - od daty
::       [_c] - do daty ... jezeli chcemy cos zrobic od .. do
::       [_d] - 1-aneks kończący, 0(domyślnie)-nie
::   WY: 0 - sa wygenerowane zlecenia, 1 - nie ma zlecen, -1-zrezygnowano z usunięcia zleceń
::  OLD: \um_st_ap/um.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>4 || _b:=date(0,0,0) ?} || _b:=date(0,0,0) ?};
{? _>=3 || {? type_of(_c)<>4 || _c:=date(0,0,0) ?} || _c:=date(0,0,0) ?};
_end:={? var_pres('_d')=type_of(0) || _d || 0 ?};
VAR_DEL.delete('__dumdo');
__dumdo:=UM.DO;

_wyn:=0;

:: czy jakies zlecenie bylo juz zafakturowane
n_fakt:=1;

:: zawieszenie umowy
_zaw:=_b<>date(0,0,0) & _c<>date(0,0,0);

oodd:=_b;
dood:=_c;

_umr:=UM.ref;
_um:=UM.SYM;


exec('mmm_init','umowy_wspolne');

:: ustalanie daty od do sprawdzania
{? UM.AN=0
|| _dat:=UM.OD;
:: dodano sprawdzanie 1 daty generacji aby bylo szybciej
   _hgen:=exec('d_hgenod','umowy_wspolne',ST.ODDZ);
   {? _dat<_hgen || _dat:=_hgen ?}
|| UMAN.index('POZ');
   UMAN.prefix(UM.ref());
   {? UMAN.last()
   || _dat:=UMAN.D
   || _dat:=UM.OD
   ?}
?};

:: formulka dodajaca rekord od tabeli tymczasowej MMM
__f_add:="
   {? (oodd=date(0,0,0) & dood=date(0,0,0)) | (ZLP.DW>=oodd & ZLP.DW<=dood)
   ||
      MMM.blank();
      MMM.ZLE:=ZLE.SYM;
      MMM.DW:=ZLP.DW;
      MMM.F:=ZLP.FAKS;
      {? ZLP.FAKS='T' | ZLP.SR<>'N'
      ||
         FAKS.cntx_psh();
         FAP.cntx_psh();
         _msk:=(6+ZLP.name())+3;
         FAKS.use('faktu'+_msk);
         FAP.use('fakpo'+_msk);
         n_fakt:=0;
         MMM.FAKS:=ZLP.FAP().FAKS().SYM;
         MMM.FPOZ:=ZLP.FAP().POZ;
         FAP.cntx_pop();
         FAKS.cntx_pop()
      ?};
      {? ZLP.KPOZ<>''
      ||
         KPOZ.cntx_psh();
         _msk:=(6+ZLP.name())+3;
         KPOZ.use('kprpo'+_msk);
         n_fakt:=0;
         MMM.KPOZ:='Karta nr %1'@[KPOZ.KPO().SYM];
         KPOZ.cntx_pop()
      ?};
      MMM.SR:=ZLP.SR;
      {? ZLP.SR<>'N' || n_fakt:=0 ?};
      MMM.MASK:=ZLP.name();
      MMM.REF:=#ZLP.ref;
      MMM.RP:=ZLP.RP;
      MMM.add()
   ?}
";

:: formulka sprawdzajaca zlecenie
_form:="
   HGEN.index('ODDZ');HGEN.prefix(ST.ODDZ);
   {? HGEN.last() || _dat_do:=HGEN.DO || _dat_do:=_a ?};
   {!
   |?
      exec('zle_open','open_tab',UM.ODDZ,2-$(_a~1),form((_a~2),-2));
      ZLP.index('ZLE');ZLP.prefix(ZLE.ref());
      {? ZLP.first()
      || {!
         |? {? ~_b
             | (UM.DO<>date(0,0,0)
                & ((ZLP.ODD<>date(0,0,0) & ZLP.ODD>UM.DO)
                 | (ZLP.DOD<>date(0,0,0) & ZLP.DOD>UM.DO)))
            || __f_add()
            ?};
            ZLP.next()
         !}
      ?};
      _a:=exec('add_mies','umowy_wspolne',_a);
      _dat_do>=_a
   !}
";

:: sprawdzanie i przygotowywanie danych
echo('szukam zgłoszeń..... proszę czekać'@);
UP.index('UM');
UP.prefix(UM.ref());
{? UP.first()
||
   {!
   |?
      ZLE.index('USL');
      ZLE.prefix('T',UM.ref,UP.ref);
      {? ZLE.first()
      ||
         {!
         |?
            _form(_dat,_end);
            ZLE.next()
         !}
      ?};
      UP.next()
   !}
?};

echo();
{? _zaw
||
   _ndx:=MMM.ndx_tmp(,,'RP',,,'DW',,);
   MMM.index(_ndx);
   MMM.prefix('H')
?};
{? MMM.size()=0
||
   _wyn:=1
||
   {? ~_end & FUN.ask('Wygenerowano zgłoszenia.\nWyświetlić szczegóły?'@)
   ||
      _akr:=MMM.mk_sel('Zgłoszenia'@,,0,'#isdplttifnssya',,,,,'U');
      MMM.win_fld(_akr,,'ZLE',,,20,,,'Zlecenie'@);
      MMM.win_fld(_akr,,'DW',,,10,,,'Data'@);
      MMM.win_fld(_akr,,'FAKS',,,20,,,'Faktura'@);
      MMM.win_fld(_akr,,'FPOZ',,,4,,,'Pozycja'@);
      MMM.win_fld(_akr,,'KPOZ',,,-20,,,'Karta przekazania odpadów'@);
      MMM.win_fld(_akr,,'SR',,,4,,,'Status'@);
      MMM.win_sel(_akr);
      MMM.select()
   ?};
   {? n_fakt=1
   ||
      {? _end
       | {? FUN.ask('Usunąć pozycje zgłoszeń %1?'@[{? _zaw || ' związanych z harmonogramem'@ || '' ?}])
         || 1
         || _wyn:=-1;
            0
         ?}
      || do();
         echo('usuwam zgłoszenia..... proszę czekać'@);
         {? MMM.first()
         ||
            {!
            |?
               exec('zle_open','open_tab',UM.ODDZ,((4-MMM.MASK)-2),(6-MMM.MASK));
               ZLP.clear;{? ZLP.seek(MMM.REF,MMM.MASK) || exec('zlp_usu','umowy_zlecenia',1) ?};
               MMM.next()
            !}
         ?};
         echo();
         {? end() || _wyn:=1 ?}
      ?}
   ||
      FUN.info('Usunięcie pozycji zgłoszeń niemożliwe.'@)
   ?}
?};
{? _zaw || MMM.ndx_drop(_ndx) ?};

UM.seek(_umr);
VAR_DEL.delete('MMM','n_fakt','__f_add');
exec('zle_open','open_tab',ST.ODDZ,2-$ST.AR,form(ST.AM,-2));
VAR_DEL.delete('__dumdo');
_wyn


\um_be_ee
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: formula przed zmiania statusu na aneksowany
::  OLD: \um_be_ee/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
UMAN.cntx_psh();
UMAN.index('POZ');
UMAN.prefix(UM.ref());
{? UMAN.first() || _wyn:=1 || FUN.info('Umowa nie była aneksowana.\nZmiana statusu niemożliwa.'@) ?};
UMAN.cntx_pop();
_wyn


\um_st_ee
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: formula po zmianie statusu na aneksowany
::  OLD: \um_st_ee/um.fml
::----------------------------------------------------------------------------------------------------------------------
exec('um_st_np','umowy')


\um_be_zz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: formula przed zmiania statusu na zakonczony
::  OLD: \um_be_zz/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? UM.STU().KOD<>'E'
|| FUN.info('Umowa może być zakończona tylko jeżeli była aneksowana.'@);
   _wyn:=0
?};
{? _wyn || exec('umst_ak2','umowy') ?};
_wyn


\set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zaznacza wymagalne pola w nagłówku umowy
::   WE: _a - akronim okna redakcji
::       [_b] - tabela kontekstu wywołania - domyślnie UM
::----------------------------------------------------------------------------------------------------------------------
_win_red:={? var_pres('_a')=type_of('') || _a || UM.win_edit('?') ?};
_tab:={? var_pres('_b')=type_of(SYSLOG) || _b || UM ?};

:: okno informacyjne
{? _win_red='INFO'
|| _enable:={? {? _tab.f_active()
               || ~_tab.f_size | ~_tab.f_get()
               || ~_tab.size() | ~_tab.get()
               ?}
            || 'enable=0'
            || 'enable=1'
            ?};
   UM.efld_opt(_win_red,_enable,,'KH');
   UM.efld_opt(_win_red,_enable,,'KH_ODB');
   UM.efld_opt(_win_red,_enable,,'TYP_HR');
   UM.efld_opt(_win_red,_enable,,'DF');
   UM.efld_opt(_win_red,_enable,,'OD');
   UM.efld_opt(_win_red,_enable,,'DO');
   UM.efld_opt(_win_red,_enable,,'DP');
   UM.efld_opt(_win_red,_enable,,'DPO');
   UM.efld_opt(_win_red,_enable,,'DF')
|? _win_red='RED'
|| UM.efld_opt(_win_red,'mark=1',,'KH');
   UM.efld_opt(_win_red,'mark=1',,'FAS');
   UM.efld_opt(_win_red,'mark=1',,'OD');
   UM.efld_opt(_win_red,'mark=1',,'DP')
?};
{? exec('get','#params',100177,2)='T'
|| UM.efld_opt(_win_red,'enable=1',,'PROJEKTY')
|| UM.efld_opt(_win_red,'enable=0',,'PROJEKTY')
?};
~~


\um_win_edit_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Ustawia okno redakcji tabeli UM, wymagane pola, okna słowników
::   WE: [_a] - 1-bez zakończ 0-(domyślnie) z zakończ
::----------------------------------------------------------------------------------------------------------------------
_disp:={? var_pres('_a')=type_of(0) || _a || 0 ?};

BPMN.END:=0;
_win_red:=exec('um_win_edit','umowy');
exec('set_efld_opt','umowy',_win_red);
{? ~_disp
|| {? UM.STAT_REJ='N'
   || _ff:="params_exec('um_pozycje_red','umowy')";
      _btn:=UM.win_ebtn(_win_red,'text='+'Poz&ycje'@+',btn_label_align=center,panel=bottom,align=begin',_ff);
      UM.btn_opt(_btn,'tooltip='+'Pozycje umowy cyklicznej'@);

      _ff:="params_exec('priority_action_red','#b__box')";
      UM.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin'['Pr&iorytet'@],_ff);

      {? UM.STAT_REJ='N'
      || _ff:="params_exec('um_zakoncz_red','umowy')";
         exec('zakoncz','#window',UM,_win_red,1,_ff,0, exec('help_red_zakoncz','#window','U'),
            exec('text_red_zakoncz','#window','U'))
      ?}
   ?};
   exec('ok_esc','#window',UM,_win_red,1,,,,,exec('help_red_ok','#window','Z'),exec('text_red_ok','#window')
      ,exec('help_red_esc','#window','A'))
?};
UM.win_edit(_win_red);
exec('set_efld_opt','umowy',_win_red);
exec('sel_win_kh','ustawienia')


\um_win_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Umowa - tymczasowe okienko redakcji
::----------------------------------------------------------------------------------------------------------------------
_win_akr:='RED';
:: Tymczasowe okno redakcji
_title:='Dane umowy cyklicznej';
_win_red:=UM.mk_edit(_title,,,,,'html_maximized');
UM.win_ewin(_win_red,,_win_akr);
_win_red


\umowa_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Dołączenie umowy cyklicznej
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUM_UMO_DRUM';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';

{? UMO.MJS='POS'
|| UMO.KH:=POS.KH;
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'KH',UMO.KH)
?};

exec('mp_run','#b__box',_params)


\umowa_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Modyfikacja umowy cyklicznej
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUM_UMO_DRUM';
_params.UIDREF:=UM.uidref();
_params.AKCJA:='Popraw';

exec('mp_run','#b__box',_params)


\umowa_kopiuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Kopiowanie umowy cyklicznej
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUM_UMO_DRUM';
_params.UIDREF:=UM.uidref();
_params.AKCJA:='Kopiuj';
_params.PROC_START:='T';

exec('mp_run','#b__box',_params)


\umowa_pozycje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Pozycje umowy cyklicznej
::   WE: [_a] - UP.uidref(), na którym ma stanąć selektor
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('')
|| _a:=''
?};
BPMN.END:=0;
params_exec('up_sel','umowy',,_a);
~~


\umowa_pozycje3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Pozycje umowy cyklicznej
::----------------------------------------------------------------------------------------------------------------------
BPMN.END:=0;
exec('up_sel','umowy','WER3');
~~


\umowa_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Usunięcie umowy cyklicznej
::----------------------------------------------------------------------------------------------------------------------
{? UM.STAT_REJ<>'T'
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LUM_UMO_DRUM';
   _params.UIDREF:=UM.uidref();
   _params.AKCJA:='Usuń';

   exec('mp_run','#b__box',_params)
|| FUN.info('Umowa %1 zaakceptowana.\nUsunięcie niemożliwe.'@[UM.SYM])
?}


\umowa_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zakończenie umowy cyklicznej
::----------------------------------------------------------------------------------------------------------------------
{? UM.STAT_REJ<>'E'
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LUM_UMO_DRUM';
   _params.UIDREF:=UM.uidref();
   _params.AKCJA:='Zakończ_wer';
   exec('mp_run','#b__box',_params)
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LUM_UMO_EANE';
   _params.UIDREF:=UM.uidref();
   _params.AKCJA:='Zakończ_wer';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'UM',UM.ref());
   exec('mp_run','#b__box',_params)
?};
~~


\um_new
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: dodanie nowej umowy
::   WE: [_a] - kontrahent KH.ref (zalozenie ze jak podajemy kh to nie ma prefixu dla statusu)
::       [_b] - status umowy (domyślnie pobierany z parametru 100150)
::   WY: UM.ref dodanej umowy
::  OLD: \um_new/um.fml
::----------------------------------------------------------------------------------------------------------------------
{?_>=1 || {? type_of(_a)<>7 || _a:=null ?} || _a:=null ?};
_stu:={? var_pres('_b')=type_of(null()) & _b<>null()
      || _b
      || _kod:=exec('get','#params',100150,2);
         {? _kod='' || null() || exec('FindInSet','#table','STU','KOD',_kod,_kod) ?}
      ?};
_fas:={? var_pres('_c')=type_of(null()) & _c<>null()
      || _c
      || _kod:=exec('get','#params',100130,2);
         {? _kod='' || null() || exec('FindInSet','#table','FAS','KOD',_kod,_kod) ?}
      ?};

_bie_um:=#UM.ref();
_new_um:=null();
_wyn:=null;
_res:=0;
UMO.STU:=_stu;
UMO.WYS:='T';
{? UMO.STU=null()
|| {? do_state=1 || undo ?};
   FUN.info('Brak statusu umowy.\n'
            'Nie został on przekazany oraz nie zdefiniowano parametru aplikacyjnego 100150.\n'
            'Wystawienie umowy niemożliwe.'@)
|| _pom_tab:=POM.TAB;
   _pom_typdok:=POM.TYPDOK;
   POM.TAB:='UM';
   POM.TYPDOK:='UMO';

   UM.cntx_psh();
   UM.clear();
   UM.blank();
   {? UMO.RKH='N' || UM.KH:=_a ?};
   UM.memo_set(,'U');
   UM.FAS:=_fas;
   {? UM.add() & UM.r_lock(1,1,1)
   ||
      _new_um:=UM.ref();

      _var_umpop:=exec('var_umpop','umowy');
      _var_umpop.KH:=null();
      _var_umpop.KH_ODB:=null();
      _var_umpop.HAN:=null();
      _var_umpop.DP:=date(0,0,0);
      _var_umpop.DPO:=date(0,0,0);
      _var_umpop.OD:=date(0,0,0);
      _var_umpop.DO:=date(0,0,0);
      _var_umpop.TYP_HR:='';
      _var_umpop.FAS:=null();
      _var_umpop.CB:='';
      _var_umpop.NRT:='';
      _var_umpop.PO_FIRST:=1;

      _context:=params_get();

      params_set('context',_context,'var_umpop',_var_umpop);
      exec('um_win_edit_set','umowy');

      {? UM.edit("params_exec('chk_um','umowy')")
      || {? UM.DPO=date(0,0,0) || UM.DPO:=UM.OD ?};
         UM.UM_SRC:=$UM.ref;

::       dodanie umowy
         _res:=UM.put();
         {? _res
         || UM.memo_put(,'U');
            UM.cntx_psh();
            {? UM.f_active() & UM.f_test() || UM.f_add() ?};
            UM.cntx_pop();
            _wyn:=UM.ref();
            {? _var_umpop.PO_FIRST=1
            || {? exec('FindInSet','#table','UP','POZ',UM.ref())=null()
               || BPMN.END:=1;
                  exec('up_sel','umowy',,,1);
                  {? BPMN.END=2 & exec('FindInSet','#table','UP','POZ',UM.ref())<>null()
                  || params_set('context',_context,'var_umpop',_var_umpop);
                     exec('um_zakoncz_red','umowy')
                  ?}
               ?}
            ?}
         ?};
         UM.r_unlock()
      ||
::       usuwanie numeru
         _uidref:=UM.uidref();
         exec('um_del','umowy',1);
         POM.TAB:=_pom_tab;
         POM.TYPDOK:=_pom_typdok;
         {? ~UM.seek(_uidref) || _new_um:=null ?}
      ?}
   ||
      FUN.info('Nieudana próba zablokowania tabeli nagłówka umowy.\nSpróbuj ponownie.'@)
   ?};
   UM.cntx_pop();
   POM.TAB:=_pom_tab;
   POM.TYPDOK:=_pom_typdok
?};
{? _new_um=null
||
   {? _bie_um>0 || {? UM.f_active() || UM.f_rfresh(); UM.f_seek(_bie_um,) || UM.seek(_bie_um,) ?} ?}
||
   {? {? UM.f_active() || UM.f_rfresh(); UM.f_seek(_new_um,) || UM.seek(_new_um,) ?}=0
   ||
      {? exec('FindInSet','#table','UP','POZ',_new_um)=null()
      || FUN.info('Aktualnie zredagowana umowa cykliczna nie posiada pozycji (posesji).\n'
               'Umowa nie jest dostępna w ustawionym zakresie widoku umów.'@)
      || FUN.info('Aktualnie zredagowana umowa cykliczna '
               'nie jest dostępna w ustawionym zakresie widoku umów.'@)
      ?};
      {? _bie_um>0 || {? UM.f_active() || UM.f_rfresh(); UM.f_seek(_bie_um,) || UM.seek(_bie_um,) ?} ?}
   ?}
?};

_wyn


\chk_um
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: po redakcji tabeli POS posesje
::  OLd: \chk_um/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_var_umpop:=params_get().var_umpop;
_po_first:=_var_umpop.PO_FIRST;

{? _po_first=1
|| ''
?};

_wyn:=__CHK.record(UM,,'KH','DP','OD','FAS');
{? _wyn='' & UM.TYP_HR='R' & UM.FAS().KOD='D'
|| FUN.info('Dla umowy ryczałtowej należy wybrać sposób fakturowania inny niż [Dziennie].'@);
   _wyn:='FAS'
?};
{? _wyn='' & UM.DO<>date(0,0,0) & UM.DO<UM.DO
|| FUN.info('Data obowiązywania umowy do jest nieprawidłowa.'@);
   _wyn:='DO'
?};
{? _wyn='' & UM.NR=0 & UM.SYM=''
:: Wyznaczenie numeru jeśli nie określony w trakcie redakcji nagłówka
:: !!! Wyznaczenie numeru ma być na końcu tej funkcji !!!
|| {? exec('wol_nr','numery','UM',,1)
   || _wyn:='NR'
   ?}
?};
_wyn


\um_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: usuwanie umowy
::   WE: [_a] - czy wyswietlac pytanie 0 -tak, 1 -nie
::   WY: wynik UM.del
::  OLD: \um_del/um.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
_wyn:=0;

{? UM.r_lock(1,1,1)
||
   UM.get();
   {? UM.STAT_REJ='N' & UM.STU().A<>'T'
   || {? {? _a=1 || _pyt:=1 || _pyt:=FUN.ask('Usunąć umowę nr %1?'@[UM.SYM]) ?};_pyt
      || do();

::       usuwanie powiazanego zlecenia
         ZLE.index('USL');
         ZLE.prefix('T',UM.ref());
         {? ZLE.first()
         || {!
            |?
               _del:=0;
               {? ZLE.count()=0 || _del:=ZLE.del() ?};
               _del
            !}
         ?};

::       usuwani pozycji umowy
         UP.index('POZ');
         UP.prefix(UM.ref());
         {? UP.first()
         || {!
            |?
               _del:=0;
               {? UP.count()=0 || _del:=UP.del() ?};
               _del
            !}
         ?};

::       Usuwanie pojemników
         UMPOJ.cntx_psh();
         UMPOJ.index('UM_SRC');
         UMPOJ.prefix($UM.ref());
         {? UMPOJ.first()
         || {!
            |? _can_continue:=UMPOJ.del(,1);
               UMPOJ.first() & _can_continue>0
            !}
         ?};
         UMPOJ.cntx_pop();

         {? UM.count()=0 & exec('deladok','dokum','UM')=1
         ||
            POM.TAB:='UM';
            POM.TYPDOK:='UMO';
            numer:=UM.NR;
            oldnumer:=1;
            exec('nr_old','numery');
            _wyn:=UM.del()
         ||
            undo();
            FUN.info('Umowa została już wykorzystana w systemie.\nUsunięcie niemożliwe.'@)
         ?};
         end()
      ?};
      UM.r_unlock()
   || FUN.info('Umowa %1 nie podlega modyfikacji.\nUsunięcie niemożliwe.'@[UM.SYM])
   ?}
||
   {? FUN.ask('Dokument obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@) & UM.r_lock(1,,1)
   || UM.r_unlock()
   ?}
?};
_wyn


\pos_upan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: wyswietla aneks wraz ze zmianami dla podanej poseji w podziale na umowy
::  OLD: \pos_upan/umowy.fml
::----------------------------------------------------------------------------------------------------------------------
UP.cntx_psh();
UM.cntx_psh();
{? var_pres('X_Xa')>0 || obj_del(X_Xa) ?};

   PARAM_W.TAB_TMP:='X_Xa';
   PARAM_W.TAB_POL:='';
   PARAM_W.TAB_TYT:='Warunki posesji wraz ze zmianami'@;
   X_Xa:=psql(exec('f_umo003','umowy'),ST.ODDZ,POS.ref);
   PARAM_W.TAB_POL:=$X_Xa.fld_num()+';';
   PARAM_W.TAB_SUM:='';
   t_sumk:='';
   _acr:=X_Xa.mk_sel('Warunki umów dla posesji wraz ze zmianami'@,,0,,,,,,'U');
   X_Xa.win_fld(_acr,,'SYM',,,15,,,'Symbol'@);
   X_Xa.win_fld(_acr,,'OD_DATY',,,10,,,'Obowiązuje od'@);
   X_Xa.win_fld(_acr,,'CENNIK',,,6);
   X_Xa.win_fld(_acr,,'R_USL',,,-5,,,'Rodzaj usługi'@);
   X_Xa.win_fld(_acr,,'S_USL',,,-5,,,'System usług'@);
   X_Xa.win_fld(_acr,,'HARM',,,4,,,'Harmonogram'@);
   X_Xa.win_fld(_acr,,'WG_H',,,-4,,,'Wg harmonogramu'@,,,2,,"'T'","'N'");
   X_Xa.win_fld(_acr,,'WG_R',,,-4,,,'Wg ryczałtu'@,,,2,,"'T'","'N'");
   X_Xa.win_fld(_acr,,'WAL',,,3,,,'Waluta'@);
   X_Xa.win_fld(_acr,,'USLUGA_H',,,15,,,'Usługa'@);
   X_Xa.win_fld(_acr,,'ILOSC',,,10,3,,'Ilość'@);
   X_Xa.win_fld(_acr,,'USLUGA_R',,,15,,,'Ryczałt'@);
   X_Xa.win_fld(_acr,,'ILOSC_R',,,10,3,,'Ilość ryczałtu'@);

_disp_pos:="
   _up:=X_Xa.REF;
   UP.clear();
   UM.clear();
   {? UP.seek(_up,form((8+_up)))
   ||
      UMO.MIA:=UP.POS().UL().MIA;
      UMO.UL:=UP.POS().UL;
      UMO.HNK:=UP.H().KOD;
      echo(UP.UM().SYM);
      exec('up_umo','umowy');
      exec('up_red','umowy');
      UP.display();
      echo()
   ?}
";
_druk:="
   _kod:=cur_tab(1,1).HARM;
   {? _kod<>''
   ||
      HN.cntx_psh();
      HN.index('ODDZ');
      HN.prefix(ST.ODDZ,_kod,_kod);
      {? HN.first()
      || exec('drukuj','umowy_harm')
      || FUN.emsg('Nie znaleziono harmonogramu: %1.'@[_kod])
      ?};
      HN.cntx_pop()
   || FUN.emsg('Brak harmonogramu dla umowy: %1.'@[cur_tab(1,1).SYM])
   ?};
   ''
";
   X_Xa.win_act(_acr,,'Wyświetl'@,,,,,_disp_pos);
   X_Xa.win_act(_acr,,'Formuła','Drukuj harmonogram'@@,,,,_druk,1);
   X_Xa.win_sel(_acr);

_old:=obj_new(X_Xa.fld_num());
{! _i:=1..X_Xa.fld_num() |! _old[_i]:='' !};

_new:=obj_new(X_Xa.fld_num());
{! _i:=1..X_Xa.fld_num() |! _new[_i]:='' !};


{? X_Xa.first
||
   {! _i:=1..X_Xa.fld_num()-2 |! _old[_i]:=X_Xa[_i] !};
   _next:=1;
   {!|?
      {? _next =1 || _next:=X_Xa.next ?};
      {? _next
      ||
         _ok:=1;
         {! _i:=1..X_Xa.fld_num()-2 |! {? _i<>2 || {? _old[_i]<>X_Xa[_i] || _ok:=0 ?} ?}!};
         {? _ok=1
         ||
            X_Xa.cntx_psh();
            _ne:=X_Xa.next ;
            X_Xa.cntx_pop();
            X_Xa.prev(); _del:=X_Xa.del; X_Xa.next;
            {? _ne || _next:=2 || _next:=0 ?}
         || _next:=1;
            {! _i:=1..X_Xa.fld_num()-2 |! _old[_i]:=X_Xa[_i] !}
         ?}
      ?};
      _next
   !}
?};

X_Xa.select();

UM.cntx_pop();
UP.cntx_pop();
''


\f_umo003
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MaX [2014]
:: OPIS: Zapytanie przeniesione do fml
::  OLD: \f_umo003/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:="
select
     UM.SYM Sym,
     UM.OD Od_daty,
     TAR.KOD Cennik,
     USL.KOD R_usl,
     UPSYS.KOD S_usl,
     WAL.KOD Wal,
     UP.F wg_h,
     UP.TFAK wg_r,
     HN.KOD Harm,
     MJ.KTM Usluga_h,
     MJ.N Nazwa_h,
     UP.IL Ilosc,
     UP.C Cena,
     M_D.KTM Dodat_h,
     M_D.N Nazwa_Dh,
     UP.ILD Ilosc_d,
     UP.C_D Cena_d,
     UP.PRD Proc_d,
     M.KTM Usluga_r,
     M.N Nazwa_r,
     UP.ILM Ilosc_r,
     UP.C_R Cena_r,
     UP.WSP Wsp_r,
     DM.KTM Dodat_r,
     DM.N Nazwa_Dr,
     UP.DILM Il_d_r,
     UP.DC_R Cena_d_r,
     UP.DPR Wsp_d_r,
     UP.REFERENCE ref

from UP
     join UM using (UP.UM, UM.REFERENCE)
     join USL using (UP.USL, USL.REFERENCE)
     join TAR using (UP.TAR, TAR.REFERENCE)
     left join SLO as WAL using (UP.WAL, WAL.REFERENCE)
     left join HN using (UP.H, HN.REFERENCE)
     left join M as MJ using (UP.MJ, MJ.REFERENCE)
     left join M as M_D using (UP.M_D, M_D.REFERENCE)
     left join M using (UP.M, M.REFERENCE)
     left join M as DM using (UP.DM, DM.REFERENCE)
     left join UPSYS using (UP.UPSYS, UPSYS.REFERENCE)

where UM.ODDZ = ':_a'
  and UP.POS = :_b

order by 1,2 desc
";
$_wyn


\up_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: ustawienie okienka redakcji dla pozycji umow
::  OLD: \up_red/um.fml
::----------------------------------------------------------------------------------------------------------------------
_win_acr:='REDHDR';
{? UM.TYP_HR='R'    || _win_acr:='UREDHD'
|? UM.TYP_HR='C'
 | UM.FAS().KOD='D' || _win_acr:='REDHD'
?};
_win_pat:='RED_SZUK';
UP.win_edit(_win_acr);
UP.win_patt(_win_pat);
''


\pos_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: akcja rekord dla posesji
::  OLD: \pos_rek/um.fml
::----------------------------------------------------------------------------------------------------------------------
UMO.REJON:='';
exec('rekprzed','color','POS#01')


\um_re_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: akcja przed wyswietleniem dla umow
::   WY: kolor
::  OLD: \um_re_bd/um2.fml
::----------------------------------------------------------------------------------------------------------------------
UMO.KH:=UM.KH;
STR.split(UM.KH().NAZ_P);
UMO.KHN:=STR.line(57);
UMO.KHNAZ:=STR.line(100);
params_exec('umowy_actions','umowy');
exec('rekprzed','color','UM#01')


\bl_umst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2010]
:: OPIS: wartość początkowa pola status umowy
::  OLD: \bl_umst/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
UMO.STU


\del_pozu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: usuwanie pozycji umowy
::   WE: [_a] -1-usuwanie grupy 0(domyślnie)-nie
::  OLD: \del_pozu/um2.fml
::----------------------------------------------------------------------------------------------------------------------
_grp:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? max1m=1 & ~_grp || exec('delwpozu','umowy') || exec('del1pozu','umowy',,_grp) ?}


\del_poza
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: akcja grupowa usuwania pozycji umowy
::----------------------------------------------------------------------------------------------------------------------
_tab:=UP.sel_aget();
UP.sel_adel();
UP.cntx_psh();
_tab.clear();
{? _tab.first() & FUN.ask('Czy usunąć zaznaczone pozycje umowy?'@)
|| exec('ini_kom','#message','Informacje o nieusuniętych pozycjach umowy'@);
   {!
   |? {? (UP.prefix(); UP.seek(_tab.REF,)) || exec('del_pozu','umowy',1) ?};
      _tab.next()
   !};
   exec('end_kom','#message')
?};
UP.cntx_pop();
obj_del(_tab);
~~


\delwpozu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: usuwanie pozycji umowy
::  OLD: \delwpozu/um3.fml
::----------------------------------------------------------------------------------------------------------------------
UP.cntx_psh;
_upref:=#UP.ref;
UP.index('R_UP');
UP.clear;
UP.prefix(_upref);
{? UP.first
|| {!
   |?
      {? UP.ZM <>'T'
      ||
      "PRZYPISZ WAR DO UP";
      _upref:=#UP.ref;
          {? FUN.ask('Zmiana wsteczna.\nCzy usunąć także pozycję z kolejnych warunków umowy?'@)
          || exec('del1pozu','umowy','wst');
             UP.index('R_UP');
             UP.clear;
             UP.prefix(_upref);
             UP.first
          || 0
          ?}
      ||
         {? FUN.ask('Zmiana wsteczna.\nPozycja błąd już zmieniana.\nUsunąć ją?'@)
         ||
            _upref:=#UP.ref;
            {? FUN.ask('Zmiana wsteczna.\nCzy usunąć także pozycję z kolejnych warunków umowy?'@)
            || exec('del1pozu','umowy','wst')
            ?};
            UP.index('R_UP');
            UP.clear;
            UP.prefix(_upref);
            UP.first
         ||
            0
         ?}
      ?}
   !}
?};
UP.cntx_pop;
exec('del1pozu','umowy')


\del1pozu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: usuwanie pozycji umowy (usuawnie pojemników do poz um oraz ew zlecenia jezeli nie ma pozycji)
::   WE: [_a] - usuwanie wstecz, domyślnie nie
::       [_b] - 1-usuwanie grupy 0(domyślnie)-nie
::  OLD: \del1pozu/um2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>2 || _a:='' ?} || _a:='' ?};
_grp:={? var_pres('_b')=type_of(0) || _b || 0 ?};
echo('Usuwam pozycję umowy ...... Proszę czekać'@);
UM.cntx_psh();
UP.cntx_psh();
_msg1:='Usunąć bieżący wiersz?'@;
{? _a='wst' || msg1:='Usunąć bieżący wiersz oraz wiersze w warunkach wstecznych?'@ ?};
{? _grp | FUN.ask(_msg1)
||
   {? UP.count()<>0
   ||
      do();
      {? UP.count()<>0
      ||
         ZLE.index('USL');
         ZLE.prefix('T',UP.UM,UP.ref);
         {? ZLE.first()
         ||
            {!
            |?
               _um:=UP.UM;_up:=UP.ref;
               _next:=0;
::             usuwanie ZLP
               {? ZLE.count()>0
               ||
                  UM.cntx_psh();
                  UP.cntx_psh();
                  ZLE.cntx_psh();
                  {? exec('um_sp_us','umowy_zlecenia',_um,,,1,1,0,,_up);n_fakt=1
                  || exec('usu_mmm','umowy_wspolne',_um,,,1,0,0,,_up)
                  ?};
                  echo('Sprawdzanie powiązań. Proszę czekać'@);
                  echo();
                  ZLE.cntx_pop();
                  UP.cntx_pop();
                  UM.cntx_pop()
               ?};
               {? ZLE.count()=0
               ||
                  POM.TAB:='ZLE';
                  POM.TYPDOK:='ZLE';
                  numer:=ZLE.NR;
                  oldnumer:=1;
                  exec('nr_old','numery');
                  _next:=ZLE.del()
               ?};
               _next
            !}
         ?}
      ?};
      end()
   ?};
   {? UP.count()=0
   || _ref:=UP.ref();
      {? UP.del(,1)>0
      ||
         _can_continue:=1;
::       Usuwanie pojemników
         UMPOJ.cntx_psh();
         UMPOJ.index('UP_SRC');
         UMPOJ.prefix($_ref);
         {? UMPOJ.first()
         || {!
            |? _can_continue:=UMPOJ.del(,1);
               UMPOJ.first() & _can_continue>0
            !}
         ?};
         UMPOJ.cntx_pop()
      ?};
      exec('ReNumAfterDel','#table','UP','POZ','@.UP.index(\'POZ\');@.UP.prefix(UM.ref())')
   || {? _grp
      ||  exec('add_kom','#message','Pozycja %1. jest powiązana w systemie.'@[$UP.POZ],2
            ,'Informacje o nieusuniętych pozycjach umowy',__lp+=1)
      || FUN.info('Pozycja umowy powiązana. Usunięcie niemożliwe.'@)
      ?}
   ?}
?};
UP.cntx_pop();
UM.cntx_pop();
echo();
''


\ump_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: historia zmian - poprzednie warunki
::  OLD: \ump_war/um2.fml
::----------------------------------------------------------------------------------------------------------------------
UM.cntx_psh();
UP.cntx_psh();
UP.index('HISTW');
UP.prefix(UP.UP_SRC,UP.UP_SRC);
{? UP.UP_SRC<>'' & UP.first() & UP.size()>1
||
   UP.win_sel('WER3');
   UP.select(,,,'H')
||
   FUN.info('Bieżąca pozycja nie była aneksowana.'@)
?};
UP.cntx_pop();
UM.cntx_pop();
''


\um_kop_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: kopiowanie umowy jako nowej (dla biez umowy w buforze)
::   WE: [_a] - kontrahent
::       [_b] - status nowej umowy
::   WY: 1-skopiowano 0-nie
::  OLD: \um_kop_n/um2.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
ref_new:=null();
_kh:={? var_pres('_a')=type_of(null()) & _a<>null() || _a || null() ?};
_kst_stu:={? var_pres('_b')=type_of(null()) & _b<>null() || _b || exec('kst_stu','umowy_wspolne') ?};

UM.get();
{? exec('um_lock','umowy') & UM.r_lock(1,1,1)
||
   {? _kst_stu<>null & FUN.ask('Kopiować umowę %1?'@[UM.SYM])
   ||
      UM.r_unlock();
      UM.cntx_psh();

      ref_old:=UM.ref();

      _um:=obj_new(100);
      _up:=obj_new(100);
      _il_um:=UM.fld_num();
      _il_up:=UP.fld_num();

::    pominięcie memo
      _il_um:=_il_um;

      UM.clear();
      UM.seek(ref_old);
      {! _licz:=1.._il_um |! {? var_pres(UM.fld_acr(_licz),UM)<>36 || _um[_licz]:=UM[_licz] ?} !};

::    obsługa memo
      _memo:=UM.memo_get('r','U');

      UM.blank();
      _dr:=UM.DR;
      _user:=UM.USERS;
      {! _licz:=1.._il_um |! {? var_pres(UM.fld_acr(_licz),UM)<>36 || UM[_licz]:=_um[_licz] ?} !};

      UM.DR:=_dr;
      UM.USERS:=_user;

      UM.STU:=_kst_stu;
      UM.DP:=UM.DPO:=UM.OD:=UM.OD+1;
      UM.AN:=0;
      UM.STAT_REJ:='N';
      {? UM.add()
      ||
         UM.NR:=0;
         UM.SYM:='';
         POM.TAB:='UM';
         POM.TYPDOK:='UMO';
         UM.NR:=0;
         UM.NR:=exec('numer_new','numery','PACZKA');
         exec('znak','numery','UM');
         UM.UM_SRC:=$UM.ref();
         UM.put();
         ref_new:=UM.ref();
         {? _memo.is_open || UM.memo_put(_memo,'U') ?}
      || undo()
      ?};
      UP.index('POZ');
      UP.prefix(ref_old);
      {? UP.first()
      ||
         {!
         |?
            {! _licz:=1.._il_up |! {? var_pres(UP.fld_acr(_licz),UP)<>36 & UP.fld_acr(_licz)<>'UP_SRC' || _up[_licz]:=UP[_licz] ?} !};
            _r_up:=#UP.ref();
            UP.cntx_psh();
            UP.clear();
            UP.blank();
            {! _licz:=1.._il_up |! {? var_pres(UP.fld_acr(_licz),UP)<>36 & UP.fld_acr(_licz)<>'UP_SRC' || UP[_licz]:=_up[_licz] ?} !};
            UP.UM:=ref_new;
            UP.R_UP:=0;
            {? UP.add() || UP.UP_SRC:=$UP.ref(); UP.put() ?};
            _ref_up:=UP.ref();
            UP.cntx_pop();

            UP.next()
         !}
      ?};
      UM.cntx_pop();
      {? UM.seek(ref_new) || exec('inny_kh','umowy',_kh); UM.get() ?};
      {? UM.f_active() || UM.f_rfresh(); UM.f_seek(ref_new) ?}
   ||
      UM.r_unlock()
   ?}
||
   {? FUN.ask('Umowę %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[UM.SYM])
   || UM.r_lock(1,,1)
   ?}
?};
_res:=ref_new<>null();
_res


\inny_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: poprawia kontrahenta w umowie dla biezacej umowy
::   WE: [_a] - kontrahent
::  OLD: \inny_kh/um3.fml
::----------------------------------------------------------------------------------------------------------------------
_new_kh:={? var_pres('_a')=type_of(null()) & _a<>null() || _a || null() ?};
_wsel:=_new_kh<>null();

UM.cntx_psh();
_kh:=UM.KH().KOD;
{? _wsel | FUN.ask('Przenieść umowę na innego kontrahenta?'@)
||
   KH.cntx_psh();
   {? ~_wsel
   || KH.win_sel('SEL');
      {!
      |?
         KH.win_sel('SEL');
         _wsel:=KH.select();
         _exit:=0;
         {? _wsel
         || {? exec('ae_kh','kontrahent',0,KH.ref,0)=0
            || _wsel:=0;
               _exit:=1
            ?}
         ?};
         _exit
      !}
   || KH.prefix();
      {? KH.seek(_new_kh)
      || {? exec('ae_kh','kontrahent',0,_new_kh,0)=0
         || _wsel:=0;
            _exit:=1
         ?}
      || _wsel:=0;
         _exit:=1
      ?}
   ?};
   {? _wsel
   ||
      _new_kh:=KH.ref();
      {? _new_kh<>null
      ||
         UM.clear();
         {? UM.seek(ref_new)
         || _odbcopy:=UM.KH_ODB & FUN.ask('Kopiować odbiorcę?'@);
            do();
            _old_kh:=UM.KH;
            _old_odb:=UM.KH_ODB;
            UM.KH:=_new_kh;
            UM.KH_ODB:={? _odbcopy
                       || _odb:=null();
                          KH_ODB.cntx_psh();
                          KH_ODB.prefix();
                          {? KH_ODB.seek(_old_odb)
                          || KH_ODB.index('KH_ODB');
                             {? KH_ODB.find_key(_new_kh,KH_ODB.KOD)
                             || _odb:=KH_ODB.ref()
                             |? KH_ODB.seek(_old_odb)
                             || KH_ODB.KH:=_new_kh;
                                {? KH_ODB.add() || _odb:=KH_ODB.ref() ?}
                             ?}
                          ?};
                          KH_ODB.cntx_pop();
                          _odb
                       || null()
                       ?};
            UM.put(1);
            UP.index('UM');
            UP.prefix(UM.ref());
            {? UP.first()
            ||
               {!
               |?
                  _mia:=UP.POS().UL().MIA().NAZ;
                  _ul:=UP.POS().UL().UL;
                  _nr:=UP.POS().NR;
                  _old_pos:=POS.ref();
                  UP.cntx_psh();
                  POS.index('KHM');
                  POS.prefix(_new_kh,_mia,_mia,_ul,_ul,_nr,_nr);
                  _pos:=null;
                  {? POS.first()
                  ||
                     _pos:=POS.ref()
                  ||
                     POS.clear();
                     POS.seek(_old_pos);
                     POS.KH:=_new_kh;
                     {? POS.add()
                     ||
                        _pos:=POS.ref()
                     ||
                        undo();
                        FUN.info('Dodanie posesji nie powiodło się.'@)
                     ?}
                  ?};
                  UP.cntx_pop();
                  {? _pos<>null || UP.POS:=_pos; UP.put() ?};
                  UP.next()
               !};
               FUN.info('Kopiowanie zakończone.'@)
            ?};
            end()
         ?}
      || FUN.info('Nie znalazłem podanego kontrahenta.'@)
      ?}
   ?};
   KH.cntx_pop()
?};
UM.cntx_pop();
''


\um_uwagi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: wyswietlanie opisu do umowy
::  OLD: \um_uwagi/um2.fml
::----------------------------------------------------------------------------------------------------------------------
UM.memo_get(,'U');
{? UM.memo_edi(,'U')
|| UM.memo_put(,'U')
?};
''


\up_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: wyswietlenie pozycji umow
::   WE: [_a] - nazwa okienka wertowania UP - domyślnie 'WER'
::       [_b] - UP.uidref(), na którym ma stanąć selektor
::       [_c] - 1-bez blokowania nagłówka, 0-domyślnie blokuje
::  OLD: \up_sel/um.fml
::----------------------------------------------------------------------------------------------------------------------
_up_wer:={? _ > 0 || {? type_of(_a)=type_of('') || _a || 'WER' ?} || 'WER' ?};
{? var_pres('_b')<>type_of('') || _b:='' ?};
_nolock:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_actpoj:=POJAZDY.actions('SLO_J','W');
BEER.MW:='F';
exec('ustaw_ww','eurusd',BEER.MW);
max1m:=0;
HELP.POJ:='I';
POMOC.RODZ:='U';
POMOC.MGR:=POMOC.MGRF:=null;
exec('slo_m_ok','material','U',,,'W','W');
POS.win_dict('WER');

UMO.KH:=UM.KH().ref();
UMO.KHPOS:=UM.KH;
UMO.ILPOZ:=0;
UMO.ZMOD:=date(0,0,0);
UMO.C_H:=0;
UMO.C_R:=0;

HN.win_sel('SLO');
HARMON.win_sel('WER_H');
_akt:=UM.STU().A;
_zam:={? UM.STAT_REJ<>'E' & UM.STU().A='N' & UM.STU().RODZ='' || 'T' || 'N' ?};
TAR.win_dict('WER');

{? _b<>''
|| _sek:=$('UP.seek(\'%1\')'[_b])
|| _sek:=
   "
   {? UMO.T_POS<>null
   ||
      _jest:=null;
      UP.cntx_psh();
      UP.index('UMP');
      UP.prefix();
      {? UP.find_key(UM.ref(),UMO.T_POS)
      || _jest:=UP.ref()
      ?};
      UP.cntx_pop();
      {? _jest<>null || UP.seek(_jest) ?}
   ||
      UP.first()
   ?}
   "
?};

:: pozycje umowy
UP.win_sel(_up_wer);
{? _akt='T' | _zam='T'
|| UP.actions('WER','DUPI:D')
|| UP.actions('WER','EC')
?};
{? (type_of(params_get())=117 & var_press('env_prj',params_get())=117) || UP.actions('WER','ZHEMWDUPI:D') ?};
UP.actions_grayed('WER','');

:: ustawianie okienka redakcji
exec('up_red','umowy');

_up_ind:='POZ';
{? exec('get','#params',100102,2)='T'
|| _up_ind:='POS2'
?};

{? {? UM.STU().A<>'T' & ~_nolock || UM.r_lock(1,1,1) || 1 ?}
||
   {? UM.STU().A='T' & UM.OD>date() & UM.AN>0 & _b=''
   ||
      _ask:=FUN.choice('Wyświetl warunki'@,1,'Bieżące'@,'Ostatnie'@)-1;
      {? _ask=1
      ||
         UP.index(_up_ind);
         UP.prefix(UM.ref());
         _sek();
         UP.select(,1)
      |? _ask=0
      ||
         UM.cntx_psh();
         _ref:=null;
         UMAN.index('POZ');
         UMAN.prefix(UM.ref());
         {? UMAN.last()
         ||
            {!
            |?
               _ref:=UMAN.ref();
               UMAN.prev() & UMAN.D>date()
            !}
         ?};
         {? _ref<>null
         ||
            UM.index('AN');
            UM.prefix(_ref);
            {? UM.first()
            ||
               UP.index(_up_ind);
               UP.prefix(UM.ref());
               _sek();
               UP.select(,1)
            ?}
         ?};
         UM.cntx_pop()
      ?}
   ||
      UP.index(_up_ind);
      UP.prefix(UM.ref());
      _sek();
      {? _b<>''
      || UP.select(,1,5,,,,1)
      || UP.select(,1)
      ?}
:: DRO [rr] teraz w procesie
::    pytanie jak dla pozycji dokumentow magazynowych - czy akceptowac
::      _pyt:=exec('get','#params',100160,2);
::      {? UM.STU().A='N'& UP.size()>0
::      ||
::         {? _pyt='T' & FUN.ask('Zmienić status umowy?'@)
::         || exec('um_stat','um')
::         ?}
::      ?}
   ?};
   {? ~_nolock || UM.r_unlock() ?}
||
   {? FUN.ask('Umowę %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[UM.SYM])
   || UM.r_lock(1,,1)
   ?}
?};
UMO.KHPOS:=null();
POJAZDY.actions('SLO_J',_actpoj);
''


\umo_zm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: uzupelnianie zmiennych tymczasowych - UL i MIA
::  OLD: \umo_zm/um.fml
::----------------------------------------------------------------------------------------------------------------------
UM.cntx_psh();

UP.cntx_psh();
UMO.ILPOZ:=UP.size();
UP.cntx_pop();

{? UP.get()
||
   UMO.MIA:=UP.POS().UL().MIA().ref;
   UMO.UL:=UP.POS().UL().ref;

   exec('up_umo','umowy');
:: cena uslugi podstawowej
   {? UP.C=0
   || UMO.C_H:={? UP.RFAK=3 || UMO.C2 || UMO.C1 ?}
   || UMO.C_H:=UP.C
   ?};
:: cena dodatku
   {? UP.M<>null & UP.C_R=0
   || UMO.C_R:=UMO.C3
   || UMO.C_R:=UP.C_R
   ?};

   UMAN.cntx_psh();
   UM.cntx_psh();
   UP.cntx_psh();
   _end:=1;
   {!
   |?
      {? UP.ZM<>'T'
      ||
         _ref:=UP.R_UP;
         UP.clear();
         {? UP.seek(_ref,UP.name)
         ||
            {? UP.ZM='T'
            ||
               {? UP.UM().UMAN<>null
               ||
                  UMO.ZMOD:=UP.UM().UMAN().D;
                  _poz_an:=UP.UM().UMAN;
                  _um:=UMAN.BIE;
                  UMAN.index('POZ');
                  UMAN.prefix(_um);
                  {? UMAN.seek(_poz_an)
                  || {? UMAN.prev || UMO.ZMOD:=UMAN.D ?}
                  ?};
                  _end:=0
               ?}
            ||
               {? UP.UM().UMAN<>null
               ||
                  UMO.ZMOD:=UP.UM().DPO;
                  _end:=0
               ?}
            ?}
         ||
            UMO.ZMOD:=UP.UM().OD;
            _end:=0
         ?}
      ||
         UMO.ZMOD:=UP.UM().OD;
         _end:=0
      ?};
      _end
   !};
   UP.cntx_pop();
   UM.cntx_pop();
   UMAN.cntx_pop()
||
   UMO.MIA:=null;
   UMO.UL:=null;
   UMO.C_H:=0;
   UMO.C_R:=0;
   exec('up_umo','umowy',0)
?};
echo(UP.UM().SYM);
exec('up_red','umowy');
UP.ZM='T';
echo();

_stat_rej:=UP.UM().STAT_REJ;
{? var_press('__x_xan')>=100
||
   __x_xan.cntx_psh(); UM.cntx_psh();
   {? __x_xan.last()
   ||
      UM.prefix();
      {? UM.seek(__x_xan.UM_REF,) || _stat_rej:=UM.STAT_REJ ?}
   ?};
   __x_xan.cntx_pop(); UM.cntx_pop()
?};

:: wyswietlanie pozycji przez okno WER2
_pyt:=exec('get','#params',100176,2);
{? UM.STU().RODZ='E'
|| UP.actions(UP.win_sel('WER2'),'',,1)
|? _pyt='T'
|| UP.actions('WER2','',,1)
|| UP.actions(UP.win_sel('WER2'),'DP',,1)
?};

UM.cntx_pop();
_endum:=exec('umTheEnd','umowy_aneks',UM.ref());
_actions:={? (';ZTX'*_stat_rej)>1 || 'DPUIZM:D'
          |? _endum               || 'DPUIM:D'
          || ''
          ?};
UP.actions_grayed(cur_win(1,1),_actions);
''


\up_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: dolaczanie pozycji umow
::  OLD: \up_add/um.fml
::----------------------------------------------------------------------------------------------------------------------
USL.win_sel('SLO');
UMO.UL:=null;
UMO.MIA:=null;
exec('up_umo','umowy',0);

UP.blank();
exec('up_umo','umowy');

{? UM.AN>0 || UP.ZM:='T' ?};
UP.UM:=UM.ref();

POS.index('KH');
POS.prefix(UM.KH);
{? POS.size=1
|| POS.first();
   UMO.POS_NR:=POS.NR;
   UP.POS:=POS.ref();
   UMO.POS_NR:=POS.NR;
   UMO.UL:=POS.UL;
   UMO.MIA:=POS.UL().MIA;
   UP.I_MIA:=POS.UL().MIA().NAZ;
   UP.I_UL:=POS.UL().UL
?};

exec('set_efld_opt_up','umowy');
{? UP.edit("exec('chk_up','umowy')")
||
   UP.add();
   UP.UP_SRC:=$UP.ref();
   UP.put();
   exec('zmwstadd','umowy')
?};
HA.TYP:=UP.USL().TYP;
''


\zmwstadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: dodaje pozycje w zmianach wstecznych
::  OLD: \zmwstadd/um3.fml
::----------------------------------------------------------------------------------------------------------------------
{? max1m=1
||
   {? FUN.ask('Zmiana wsteczna.\nCzy dodać pozycję do następnych warunków?'@)
   ||
      __x_xan.cntx_psh();
      UMAN.cntx_psh();
      UM.cntx_psh();
      UP.cntx_psh();
      _r_up:=#UP.ref();
      _up_src:=$UP.ref();
      UP.clear();
      UM.clear();
      _up:=obj_new(100);
      _il_up:=UP.fld_num();
::    pominiecie pola ZM
      _il_up:=_il_up-1;
      {! _licz:=1.._il_up |! _up[_licz]:=UP[_licz] !};
::    petla po X_XAM
      __x_xan.next();
      {!
      |?
         _umref:=__x_xan.UM;
         _umanref:=__x_xan.UMAN;
         UM.seek(#UMAN.BIE,UM.name());
         UP.blank();
         UP.add();
         {! _licz:=1.._il_up |! UP[_licz]:=_up[_licz] !};
         UP.ZM:='N';
         UP.UM:=UMAN.BIE;
         UP.R_UP:=_r_up;
         UP.UP_SRC:=_up_src;
         UP.put();
         __x_xan.next()
      !};
      UP.cntx_pop();
      UM.cntx_pop();
      UMAN.cntx_pop();
      __x_xan.cntx_pop()
   ?}
|? max1m=2
||
   {? FUN.ask('Zmiana wsteczna.\nCzy dodać pozycję do następnych warunków?'@)
   ||
      __x_xan.cntx_psh();
      UMAN.cntx_psh();
      UM.cntx_psh();
      UP.cntx_psh();
      _r_up:=#UP.ref();
      _up_src:=$UP.ref();
      _up:=obj_new(100);
      _il_up:=UP.fld_num();
::    pominiecie pola ZM
      _il_up:=_il_up;
      {! _licz:=1.._il_up
      |! _rfld:=var_pres(UP.fld_acr(_licz),UP);
         {? _rfld<>36 & _rfld<>25 || _up[_licz]:=UP[_licz] ?}
      !};
::    petla po X_XAM
      {? __x_xan.next()
      ||
         {!
         |?
            _umref:=__x_xan.UM;
            _umanref:=__x_xan.UMAN;
            UM.prefix();
            UP.prefix();
            UMAN.prefix();
            {? UM.seek(__x_xan.UM_REF,)
            ||
               UP.blank();
               UP.add();
               {! _licz:=1.._il_up
               |! _rfld:=var_pres(UP.fld_acr(_licz),UP);
                  {? _rfld<>36 & _rfld<>25 || UP[_licz]:=_up[_licz] ?}
               !};
               UP.ZM:='N';
               UP.UM:=UM.ref;
               UP.R_UP:=_r_up;
               UP.UP_SRC:=_up_src;
               UP.D_REJ:=date();
               UP.C_REJ:=time();
               UP.put();
               _r_up:=#UP.ref()
            ?};
            __x_xan.next()
         !}
      ?};
      UP.cntx_pop();
      UM.cntx_pop();
      UMAN.cntx_pop();
      __x_xan.cntx_pop()
   ?}
?};
''


\up_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009+]
:: OPIS: poprawa pozycji umowy
::  OLD: \up_put/um3.fml
::----------------------------------------------------------------------------------------------------------------------
_up:=UP.ref;
UP.cntx_psh();
UM.cntx_psh();
_data_f:=exec('um_sp_date_poz','umowy_aneks',_up);
UMAN.cntx_psh();
UMAN.index('POZ');
UP.seek(_up);
UMAN.prefix(UP.UM);
_wyn:=_data_f>=UP.UM().OD & UMAN.last() & UMAN.DF=date(0,0,0);
UMAN.cntx_pop();
UP.cntx_pop();
UM.cntx_pop();
{? _wyn
||
   FUN.info('Pozycja umowy zafakturowana. Edycja niemożliwa.'@)
||
   HELP.UL:=null;
   UMO.JM:=UP.JM;
   UP.get();
   {? -menu_txt='popraw' || UP.ZM:='T' ?};
   exec('set_efld_opt_up','umowy');
   {? UP.edit("exec('chk_up','umowy')")
   ||
      {? UP.put()
      || {? var_pres('max1m')>0 & max1m=1 || exec('zmwstem','umowy') ?}
      ?}
   ?}
?};
1


\zmwstem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009+]
:: OPIS: funkcja kopiuje zmienione warunki pozycji umowy na kolejne aneksy
::  OLD: \zmwstem/um3.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Zmiana wsteczna.\nCzy poprawiać pozycję w następnych warunkach?'@)
||
   UP.cntx_psh;
   _up:=obj_new(100);
   {? UP.ZM='T'
   ||
      _il_up:=UP.fld_num;
      {! _licz:=1.._il_up |! {? type_of(UP[_licz])<>0 & var_pres(UP.fld_acr(_licz),UP)<>36 & var_pres(UP.fld_acr(_licz),UP)<>25 || _up[_licz]:=UP[_licz] ?} !};

      _upref:=UP.ref;
      _up_src:=UP.UP_SRC;
      UP.index('HISTW');
      UP.prefix(_up_src,_up_src,);
      {? UP.seek(_upref) & UP.next
      || {!
         |?
            {? UP.ZM <>'T'
            ||
               _lref:=UP.R_UP;
               _uref:=UP.UM;
               {! _licz:=1.._il_up |! {? type_of(UP[_licz])<>0 & var_pres(UP.fld_acr(_licz),UP)<>36 & var_pres(UP.fld_acr(_licz),UP)<>25 || UP[_licz]:=_up[_licz] ?} !};
               UP.R_UP:=_lref;
               UP.UM:=_uref;
               UP.ZM:='N';
               UP.put;
               UP.next

            ||
               {? FUN.ask('Zmiana wsteczna.\nPozycja była już zmieniana.\nNadpisać warunki?'@)
               ||
                  _lref:=UP.R_UP;
                  _uref:=UP.UM;
                  {! _licz:=1.._il_up |! {? type_of(UP[_licz])<>0 & var_pres(UP.fld_acr(_licz),UP)<>36 & var_pres(UP.fld_acr(_licz),UP)<>25 || UP[_licz]:=_up[_licz] ?} !};
                  UP.R_UP:=_lref;
                  UP.UM:=_uref;
                  UP.ZM:='N';
                  UP.put;
                  UP.next
               || 0
               ?}
            ?}
         !}
      || FUN.info('Brak następnych warunków dla pozycji.'@)
      ?}
   ?};
   obj_del(_up);
   UP.cntx_pop
?}


\up_kop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009+]
:: OPIS: kopiowanie pozycji umowy
::  OLD: \up_kop/um3.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Kopiować pozycję umowy?'@)
||
   UM.cntx_psh();
   UP.cntx_psh();
   do();
   _up:=obj_new(100);
   _il_up:=UP.fld_num;

   {! _licz:=1.._il_up |! _up[_licz]:=UP[_licz] !};
   _r_up:=#UP.ref;
   UP.clear;
   UP.blank;
   _poz:=exec('NewOrder','#table','UP','POZ','POZ',UM.ref());
   {! _licz:=1.._il_up |! UP[_licz]:=_up[_licz] !};
   UP.POZ:=_poz;
   UP.R_UP:=0;
   {? UP.add() || UP.UP_SRC:=$UP.ref(); UP.put() ?};
   _ref_up:=UP.ref();
   end();
   UP.cntx_pop();
   UM.cntx_pop();
   UP.seek(_ref_up)
?};
''


\um_up_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: zakończenie edycji umowy cyklicznej
::----------------------------------------------------------------------------------------------------------------------
{? UM.STAT_REJ<>'E'
|| _txt:='Zakończyć rejestrację umowy cyklicznej %1?'@[UM.SYM];
   _uid:='LUM_UMO_DRUM';
   exec('btn_EndPosition','okienka',_uid,UM.uidref(),UM,'Zakończ_wer',_txt)
|| {? BPMN.END=-1
   || sel_exit();
      BPMN.END:=1
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='LUM_UMO_EANE';
      _params.UIDREF:=UM.uidref();
      _params.AKCJA:='Zakończ_wer';
      _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'UM',UM.ref());
      exec('mp_run','#b__box',_params)
   ?}
?};
~~


\pos_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: kolorowanie posesji jezeli jest aktywna umowa
::  OLD: \pos_kol/um2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
POS.cntx_psh();
_kh:=POS.KH;
_pos:=POS.ref();
{? 2+menu_pth()='UM'
||
   UM.cntx_psh();
   UM.index('KH');
   UM.prefix(ST.ODDZ,_kh,'N');
   {? UM.first() || _wyn:='POS#01#01' || _wyn:='' ?};
   UM.cntx_pop()
||
   UP.cntx_psh();
   UP.index('KH');
   UP.prefix(ST.ODDZ,_kh,'N',_pos);
   {? UP.first() || _wyn:='POS#01#01' || _wyn:='' ?};
   UP.cntx_pop()
?};
POS.cntx_pop();
_wyn


\um_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: ustawienie kolorowania dla umow
::  OLD: \um_kol/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? UM.DO<>date(0,0,0) & UM.STU().A='T'
|| _ildni:=UM.DO-date();
   {? _ildni<0   || _wyn:=''
   |? _ildni<=10 || _wyn:='UM#01#03'
   |? _ildni<=30 || _wyn:='UM#01#02'
   |? _ildni<=60 || _wyn:='UM#01#01'
   ?}
?};
_wyn


\um_sym_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Formuła ikony dla STAT_REJ
::----------------------------------------------------------------------------------------------------------------------
"  FILTER.UM:=UM.ref();
   {? UM.STAT_REJ='T' || exec('zaakceptowany','icon')
   |? UM.STAT_REJ='Z' || exec('zarejestrowany','icon')
   |? UM.STAT_REJ='N' || exec('pusta','#icon')
   |? UM.STAT_REJ='E' || exec('zmieniany','icon')
   |? UM.STAT_REJ='X' || exec('zakonczony','icon')
   || exec('pusta','#icon')
   ?}
"


\var_umpop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zmienna - Poprawa nagłówka
::   WY: uchwyt do zmiennej
::----------------------------------------------------------------------------------------------------------------------
_wyn:=obj_new('PO_FIRST','KH','KH_ODB','HAN','DP','DPO','OD','DO','TYP_HR','FAS','CB','NRT');
_wyn


\um_zakoncz_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Umowa cykliczna - Zakończ - okno redagowania
::   WE: params_get()   - ustawiane w exec('zdptw_pop','zamdst_ptw')
::                      - ustawiane w exec('zddol','zamdst_nag')
::   WY: 'key:F2' - jeśli pola nagłówka dokumentu sprzedażyprawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka dokumentu sprzedaży
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().context.mp;
_autoakc:=exec('autoAkc','#b__box',_mp,100080,'LUM_UMO_EAUM');

_btnRuleResult:='';

_fld:=params_exec('um_edit_finisher','umowy',UM.ref());
{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| {? exec('zakoncz','umowy',_autoakc)
   || _btnRuleResult:='key:F2';
      _mp.done()
   ?}
?};

_btnRuleResult


\um_edit_finisher
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Kod wykańczający po UM.edit() w różnych kontekstach
::   WE: _a - UM.ref()
::   WE: params_get()
::----------------------------------------------------------------------------------------------------------------------
:: Sprawdzenie poprawności wypełnienia pól nagłówka dokumentu sprzedaży
_aneks:=ref_name(_a)*'aneks';
_fld:={? _aneks
      || params_exec('chk_an','umowy_aneks')
      || params_exec('chk_um','umowy')
      ?};
{? _fld<>''
|| _fld
|| _out:=params_get().context.out;
   _mp:=params_get().context.mp;
   _akcja:={? var_pres('akcja',params_get().context)>0 || params_get().context.akcja || 'Popraw' ?};
   _var_umpop:=params_get().var_umpop;

   {? _akcja='Dołącz' | _akcja='START_TODO' | _mp.pathProc()
   || params_set('var_umpop',_var_umpop);
      exec('um_pop_po','umowy',_aneks);
      _var_umpop.PO_FIRST:=2
   |? _akcja='Popraw' | _mp.pathTodo()
   || params_set('var_umpop',_var_umpop);
      exec('um_pop_po','umowy',_aneks)
   ?};
   ''
?}


\um_pop_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Obsługa popraw po zakończeniu edycji (UM.edit)
::   WE: [_a] - kontekst wywołania domyślnie 0-UM, 1-UMAN
::----------------------------------------------------------------------------------------------------------------------
_aneks:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_var_umpop:=params_get().var_umpop;

{? _aneks
|| _rodz:=_var_umpop.RODZ;
   _d:=_var_umpop.D;
   _sym:=_var_umpop.SYM;
   _opis:=_var_umpop.OPIS;
   _po_first:=_var_umpop.PO_FIRST;
   {? _po_first=1
:: Dotyczy wywołania dla Dołącz - wtedy jako wartości przd ustawia zmienne z nagłówka
   || _rodz:=UMAN.RODZ;
      _d:=UMAN.D;
      _sym:=UMAN.SYM;
      _opis:=UMAN.OPIS
   ?};
   UMAN.put()
|| _kh:=_var_umpop.KH;
   _kh_odb:=_var_umpop.KH_ODB;
   _han:=_var_umpop.HAN;
   _dp:=_var_umpop.DP;
   _dpo:=_var_umpop.DPO;
   _od:=_var_umpop.OD;
   _do:=_var_umpop.DO;
   _typ_hr:=_var_umpop.TYP_HR;
   _fas:=_var_umpop.FAS;
   _cb:=_var_umpop.CB;
   _nrt:=_var_umpop.NRT;
   _po_first:=_var_umpop.PO_FIRST;

   {? _po_first=1
:: Dotyczy wywołania dla Dołącz - wtedy jako wartości przd ustawia zmienne z nagłówka
   || _kh:=UM.KH;
      _kh_odb:=UM.KH_ODB;
      _han:=UM.HAN;
      _typ_hr:=UM.TYP_HR;
      _fas:=UM.FAS;
      _cb:=UM.CB;
      _nrt:=UM.NRT
   ?};
   {? UM.put() || UM.memo_put(,'U') ?}
?};
''


\zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Umowa cykliczna - Zakończenie rejestracji
::   WE: params_get()   - ustawiane w main
::       [_a] - 1-automatyczna akceptacja 0(domyślnie)-nie
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_autoakc:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_lock:=UM.r_lock(1,1,1);

{? _lock
|| _no_pos:=exec('FindInSet','#table','UP','POZ',UM.ref())=null();
   _aneks:=UM.STU().RODZ='E' & exec('FindInSet','#table','UMAN','UMAN',UM.ref())<>null();
   _endum:=_aneks & exec('umTheEnd','umowy_aneks',UM.ref());
   _txtum:={? ~_aneks || 'umowy cyklicznej'@
           |? _endum  || 'zakończenia umowy cyklicznej'@
                      || 'aneksu umowy cyklicznej'@
           ?};

   UM.cntx_psh();
   {? UM.STAT_REJ='T'
   || FUN.info('Umowa cykliczna została już zaakceptowana.'@);
      _result:=1
   |? UM.STAT_REJ='Z'
   || _txt:='Zakończono już rejestrację %1.'@[_txtum];
      FUN.info(_txt);
      _result:=1
   || _ok:=1;
      {? UM.KH=null()
      || FUN.info('Należy uzupełnić dostawcę w nagłówku %1.'@[_txtum]);
         _ok:=0
      |? _no_pos
      || FUN.info('Brak pozycji na umowie cyklicznej.\nOperacja niemożliwa.'@);
         _ok:=0
      ?};

      {? _ok & (BPMN.END=2 | FUN.ask('Zakończyć rejestrację %2 %1?'@[UM.SYM,_txtum]))
      || UM.STAT_REJ:='Z';
         {? UM.put() || _result:=1 ?}
      ?}
   ?};
   {? _result & _autoakc || exec('umowa_akceptuj','umowy',1) ?};
   UM.cntx_pop();
   {? ~_no_pos & _result || UM.get() ?}
|| {? FUN.ask('Umowę %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[UM.SYM])
   || UM.r_lock(1,,1)
   ?}

?};
UM.r_unlock();
_result


\um_pozycje_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Umowy cykliczne - Pozycje - okno redagowania
::   WE: [_a] - kontekst wywołania domyślnie 0-UM, 1-UMAN
::       params_get()   - ustawiane w exec('um_pop','umowy')
::   WY: 'key:F2' - jeśli pola nagłówka dokumentu sprzedażyprawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka dokumentu sprzedaży
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_aneks:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_btnRuleResult:='';

_fld:=params_exec('um_edit_finisher','umowy',{? _aneks || UMAN.ref() || UM.ref() ?});

{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| BPMN.END:=1;
   exec('up_sel','umowy');
   {? BPMN.END=2 || _btnRuleResult:=params_exec('um_zakoncz_red','umowy') ?}
?};

_btnRuleResult


\tpos_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: przed redakcja POS_NR
::  OLD: \tpos_be/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
:: [rr] nie ma takiej ścieżki menu
:: {? 2+menu_pth()='UE' || _wyn:=0 ?};
UMO.POS_NR:=form(UMO.POS_NR);
ZLEC.POS_NR:=form(ZLEC.POS_NR);
_wyn


\tpos_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: F3 - POS_NR
::   WE: [_a] rodzaj  0 - dla poz umowy,  1 - dla pozycji zlecenia, 2 - pozycja kosztow dodatkowych
::          , 3-zlecenia transportowego
::  OLD: \tpos_f3/um.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
{? _a=0 & cur_tab.name()='umk_p' || _a:=2 ?};
{? _a=1 & (4+cur_tab.name())='trnl' || _a:=3 ?};

{? _a=0
||
   mia:=UP.POS().MIA().NAZ;
   ul:=UP.POS().UL().UL;
   nr:=UP.POS().NR;
   POS.index('KHM');
   POS.prefix(UP.UM().KH)
|? _a=1
||
   mia:=ZLE.POS().MIA().NAZ;
   ul:=ZLE.POS().UL().UL;
   nr:=ZLE.POS().NR;
   UMO.KHPOS:=ZLE.KH;
   POS.index('KHM');
   {? ZLE.KH<>null() & ZLE.KH>0
   || POS.prefix(ZLE.KH)
   || POS.prefix()
   ?}
|? _a=2
||
   mia:=UMK_P.POS().MIA().NAZ;
   ul:=UMK_P.POS().UL().UL;
   nr:=UMK_P.POS().NR;
   POS.index('KHM');
   POS.prefix(UMO.KH)
|? _a=3
|| mia:=TR_NZL.POS().MIA().NAZ;
   ul:=TR_NZL.POS().UL().UL;
   nr:=TR_NZL.POS().NR;
   UMO.KHPOS:=TR_NZL.KH;
   POS.index('KHM');
   {? TR_NZL.KH<>null() & TR_NZL.KH>0
   || POS.prefix(TR_NZL.KH)
   || POS.prefix()
   ?}
?};
POS.win_sel('SEL');

{? POS.cur_prfx()='' | ~POS.find_key(mia,mia,ul,ul,nr,nr)
|| POS.first
?};
mia:=POS.MIA().NAZ;
ul:=POS.UL().UL;
{? POS.select(,1,5)
|| mia:=POS.MIA().NAZ;
   ul:=POS.UL().UL;

   {? _a=0
   ||
      UMO.POS_NR:=POS.NR;
      UP.POS:=POS.ref()
   |? _a=1
   ||
      ZLEC.POS_NR:=POS.NR;
      ZLE.POS:=POS.ref()
   |? _a=2
   ||
      UMO.POS_NR:=POS.NR;
      UMK_P.POS:=POS.ref()
   |? _a=3
   ||
      ZLEC.POS_NR:=POS.NR;
      TR_NZL.POS:=POS.ref()
   ?}
?};
{? _a=0
|| UMO.POS_NR
|? _a=1 | _a=3
|| ZLEC.POS_NR
|? _a=2
|| UMO.POS_NR
?}


\tpos_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: wartosc poczatkowa pola POS_NR
::   WE: [_a] rodzaj  0 - dla poz umowy,  1 - dla pozycji zlecenia, 2 - pozycja kosztow dodatkowych
::          , 3-zlecenia transportowego
::  OLD: \tpos_ae/um.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
{? _a=0 & cur_tab.name()='umk_p' || _a:=2 ?};
{? _a=1 & (4+cur_tab.name())='trnl' || _a:=3 ?};

{? _a=0 & +UMO.POS_NR || UMO.POS_NR:=exec('wz_pos_nr','podz_admin',UMO.POS_NR) ?};
{? (_a=1 | _a=3) & +ZLEC.POS_NR || ZLEC.POS_NR:=exec('wz_pos_nr','podz_admin',ZLEC.POS_NR) ?};
_wyn:=0;

_skr:={? _a=0 || UM.KH().SKR |? _a=1 || ZLE.KH().SKR |? _a=2 || UMO.KH().SKR |? _a=3 || TR_NZL.KH().SKR ?};

_form:="
   UMO.UL:=ZLEC.UL:=POS.UL;
   UMO.MIA:=ZLEC.MIA:=POS.UL().MIA;
   {? _a=0
   ||
      UMO.POS_NR:=POS.NR;
      UP.POS:=POS.ref();
      UP.I_MIA:=POS.UL().MIA().NAZ;
      UP.I_UL:=POS.UL().UL
   |? _a=1
   ||
      {? ZLE.KH<>POS.KH
      || ZLE.KH:=POS.KH
      ?};
      ZLEC.POS_NR:=POS.NR;
      ZLE.POS:=POS.ref()
   |? _a=2
   ||
      UMO.POS_NR:=POS.NR;
      UMK_P.POS:=POS.ref()
   |? _a=3
   ||
      {? TR_NZL.KH<>POS.KH
      || TR_NZL.KH:=POS.KH
      ?};
      ZLEC.POS_NR:=POS.NR;
      TR_NZL.POS:=POS.ref()
   ?};
   1
";

{? fld<>''
||
   {? _a=0
   ||
      POS.index('KHM');
      POS.prefix(UP.UM().KH)
   |? _a=1
   ||
      {? ZLE.KH<>POS.KH
      || ZLE.KH:=POS.KH
      ?};
      POS.index('KHM');
      POS.prefix(ZLE.KH)
   |? _a=2
   ||
      POS.index('KHM');
      POS.prefix(UMO.KH)
   |? _a=3
   ||
      {? TR_NZL.KH<>POS.KH
      || TR_NZL.KH:=POS.KH
      ?};
      POS.index('KHM');
      POS.prefix(TR_NZL.KH)
   ?};

   _kh:={? _a=0 || UP.UM().KH
        |? _a=1 || ZLE.KH
        |? _a=2 || UMO.KH
        |? _a=3 || TR_NZL.KH
        || null()
        ?};
   {? POS.find_key( mia,mia,ul,ul,fld,fld)
   || _wyn:=_form(_a)
   |? fld<>''
   ||
      POS.index('KHN');
      POS.prefix(_kh);

      {? POS.find_key(fld)
      || _wyn:=_form(_a);
         mia:='';
         ul:=''
      || _wyn
      ?}
   ||
      _wyn:=0
   ?}
||
   {? _a=0
   ||
      UMO.UL:=ZLEC.UL:=null;
      UMO.MIA:=ZLEC.MIA:=null;
      UP.POS:=ZLE.POS:=null
   |? _a=1
   ||
      ZLE.POS:=null
   |? _a=2
   ||
      UMK_P.POS:=null
   |? _a=3
   || ZLEC.UL:=ZLEC.MIA:=null();
      TR_NZL.POS:=null()
   ?};
   _wyn:=1
?};
{? _wyn=0
|| FUN.info('Brak pozycji w słowniku posesji kontrahenta.\n'
            'Użyj F3 aby wybrać lub dodać posesję do słownika.'@)
?};
{? _wyn & _a=3 || params_exec('po_miejsce','transport_zlec') ?};
_wyn


\bl_zrejo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: obsluga zmiennej z rejonem
::  OLD: \bl_zrejo/um.fml
::----------------------------------------------------------------------------------------------------------------------
''


\bd_zrejo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: obsluga zmiennej z rejonem
::  OLD: \bd_zrejo/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? POS.REJO<>null & (POS.UL().REJO<>null | POS.UL().REJO2<>null)
|| _wyn:=UMO.REJON:=POS.REJO().NAZ
|| _wyn:=UMO.REJON:=''
?};
_wyn


\be_zrejo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: obsluga zmiennej z rejonem
::  OLD: \be_zrejo/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? POS.UL<>null
|| {? POS.UL().REJO<>null | POS.UL().REJO2<>null
   || _wyn:=1
   ?}
?};
_wyn


\f3_zrejo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: obsluga zmiennej z rejonem
::  OLD: \f3_zrejo/um.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('X_Xa')>0 || obj_del(X_Xa) ?};

X_Xa:=tab_tmp(,'NAZ','STRING[30]','Rejon'@);

_acr:=X_Xa.mk_sel('Rejony dla ulicy'@,,1,'#umorejon',,,,,'U');
X_Xa.win_act(_acr,0,'Formuła','Wybierz'@@,,,,"sel_exit();1",1);
X_Xa.win_sel(_acr);
{? POS.UL().REJO<>null || X_Xa.NAZ:=POS.UL().REJO().NAZ; X_Xa.add() ?};
{? POS.UL().REJO2<>null || X_Xa.NAZ:=POS.UL().REJO2().NAZ; X_Xa.add() ?};
{? X_Xa.select()
|| UMO.REJON:=X_Xa.NAZ;
   {? UMO.REJON=POS.UL().REJO().NAZ
   || POS.REJO:=POS.UL().REJO
   |? UMO.REJON=POS.UL().REJO2().NAZ
   || POS.REJO:=POS.UL().REJO2
   ?}
?};
1


\ae_zrejo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: obsluga zmiennej z rejonem
::  OLD: \ae_zrejo/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? UMO.REJON<>''
|| {? UMO.REJON=POS.UL().REJO().NAZ
   || POS.REJO:=POS.UL().REJO
   |? UMO.REJON=POS.UL().REJO2().NAZ
   || POS.REJO:=POS.UL().REJO2
   ?}
||
   POS.REJO:=null
?};
_wyn


\aek_prze
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009+]
:: OPIS: po redakcji zmiennej UMO.PRZEL
::  OLD: \aek_prze/um.fml
::----------------------------------------------------------------------------------------------------------------------
{? UMO.CHK1='N' & UMO.PRZEL>0 || UMO.CHK1:='T' ?};
1


\aek_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009+]
:: OPIS: po redakcji zmiennej UMO.IL
::  OLD: \aek_il/um.fml
::----------------------------------------------------------------------------------------------------------------------
{? UMO.CHK2='N' & UMO.IL>0 || UMO.CHK2:='T' ?};
1


\aek_cena
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009+]
:: OPIS: po redakcji zmiennej UMO.CENA
::  OLD: \aek_cena/um.fml
::----------------------------------------------------------------------------------------------------------------------
{? UMO.CHK3='N' & UMO.CENA>0 || UMO.CHK3:='T' ?};
1


\aek_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009+]
:: OPIS: po redakcji zmiennej UMO.WAR
::  OLD: \aek_war/um.fml
::----------------------------------------------------------------------------------------------------------------------
''


\um_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: poprawa nagłówka umowy cyklicznej
::   WE: [_a] - 1-kopiowanie umowy, 0-domyślnie-nie
::   WY: '' - ok, 'esc' - zrezygnowano przy kopiowaniu
::  OLD: \um_pop/um.fml
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_copy:={? var_pres('_a')=type_of(0) || _a || 0 ?};
UM.cntx_psh();
UMO.WYS:='T';
{? exec('um_lock','umowy') & UM.r_lock(1,1,1)
||
   _var_umpop:=exec('var_umpop','umowy');
   _var_umpop.KH:=UM.KH;
   _var_umpop.KH_ODB:=UM.KH_ODB;
   _var_umpop.HAN:=UM.HAN;
   _var_umpop.DP:=UM.DP;
   _var_umpop.DPO:=UM.DPO;
   _var_umpop.OD:=UM.OD;
   _var_umpop.DO:=UM.DO;
   _var_umpop.TYP_HR:=UM.TYP_HR;
   _var_umpop.FAS:=UM.FAS;
   _var_umpop.CB:=UM.CB;
   _var_umpop.NRT:=UM.NRT;
   _var_umpop.PO_FIRST:=0;

   params_set('context',params_get(),'var_umpop',_var_umpop);

   _ctrl:=exec('ctrlUm','umowy');
   {? _ctrl & UM.STU().A='N' & (';NE'*UM.STAT_REJ)>1
   ||
      exec('um_win_edit_set','umowy');
      _stat_rej:=UM.STAT_REJ;
      {? UM.edit("params_exec('chk_um','umowy')")
      || {? _stat_rej=UM.STAT_REJ || exec('um_pop_po','umowy') ?}
      |? _copy
      || _res:='esc'
      ?}
   ||
      FUN.info({? ~_ctrl
               || 'Zafakturowano umowę cykliczną %1.'
                  '\n\nModyfikacja nagłówka umowy cyklicznej niemożliwa.'@[UM.SYM]
               |? UM.STAT_REJ='Z'
               || 'Zakończono redakcję umowy cyklicznej %1.'
                  '\n\nModyfikacja nagłówka umowy cyklicznej niemożliwa.'@[UM.SYM]
               |? UM.STU().A<>'N'
               || 'Zaakceptowano umowę cykliczną %1 i jest ona aktywna.'
                  '\n\nModyfikacja nagłówka umowy cyklicznej niemożliwa.'@[UM.SYM]
               || 'Zaakceptowano umowę cykliczną %1.'
                  '\n\nModyfikacja nagłówka umowy cyklicznej niemożliwa.'@[UM.SYM]
               ?})
   ?}
?};
UM.r_unlock();
UM.cntx_pop();
_res


\ctrlUm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: kontrola możliwości poprawy nagłówka umowy - czy zafakturowana
::   WY: 1-można modyfikować 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_um:=UM.ref;
UM.cntx_psh();
_data_f:=exec('um_sp_dt','umowy_aneks',_um);
UMAN.cntx_psh();
UMAN.index('POZ');
UMAN.prefix(_um);
UM.prefix();
UM.seek(_um);
_res:=~(_data_f>=UM.OD & UMAN.last() & UMAN.DF=date(0,0,0));
UMAN.cntx_pop();
UM.cntx_pop();
_res


\um_lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: lock naglowka umowy cyklicznej
::   WE: [_a] - czy pytac o wyswietlenie osoby blokujacej lub dodanie do komunikatu (0- tak, 1 -nie)
::   WY: _wyn - 0-zablokowany 1-bez blokady
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

_wyn:=UM.r_lock(1,1,1);
{? _a=0 & _wyn=0
||
   _txt:='Umowę cykliczną %1 obsługuje inny użytkownik.'@[UM.SYM];
   {?
      _wyn=0
         &
      {? var_pres('__kom')>100
      || exec('add_kom','#message',_txt,4);0
      || FUN.ask(_txt+'\n'+'Czy chcesz zobaczyć kto?'@)
      ?}
   ||
      UM.r_lock(1,,1)
   ?}
?};
UM.r_unlock();
_wyn


\umowy_actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: formuła przed dla okienka grupowego
::----------------------------------------------------------------------------------------------------------------------
{? UM.sel_size() | {? UM.f_active() || UM.f_get() || UM.get() ?}
|| UM.actions_grayed(cur_win(1,1),'');

   _ane:={? UM.STAT_REJ='T' & UM.STU().A='T' & UM.A='N' & UM.AN>0 || '' || 'N(N)' ?};
   _end:={? UM.STU().RODZ='E' & UM.STAT_REJ='Z' & UM.AN>0 || '' || 'N(I)' ?};
   _endum:={? exec('umTheEnd','umowy_aneks',UM.ref()) || 'A' || '' ?};
   _actions:=_endum+
      {? UM.STAT_REJ='N' || 'AN(C)M(Z)'
      |? UM.STAT_REJ='E' || 'APN(C)'
      |? UM.STAT_REJ='Z' || 'ZPU'
      |? UM.STAT_REJ='T' || 'APUZ'
      |? UM.STAT_REJ='X' || 'APUZN(CEMW)'
      || ''
      ?}+_ane+_end;
      _actions0:='';
   {? (type_of(params_get())=117 & var_press('env_prj',params_get())=117)
   || _actions+='DMNI';_actions0+='D'
   ?};

   UM.actions_grayed(cur_win(1,1),_actions+':'+_actions0)
|| _actions:='';_actions0:='';
   {? (type_of(params_get())=117 & var_press('env_prj',params_get())=117)
   || _actions+='DMNI';_actions0:='D'
   ?};UM.actions_grayed(cur_win(1,1),_actions+':'+_actions0)
?};
~~


\who_rlock_um
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Sprawdzenie kto blokuje rekord UM
::   WE: _a - 0-sprawdzać kto blokuje, 1-nie sprawdzać i zapisać informację do __kom
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')=type_of(0) & _a
|| __kom.add('Umowę cykliczną obsługuje inny użytkownik.'@,7)
|| {? FUN.ask('Umowę cykliczną %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[UM.SYM]) & UM.r_lock(1,,1)
   || UM.r_unlock()
   ?}
?}


\bl_khum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: wartość początkowa pola POS.KH
::----------------------------------------------------------------------------------------------------------------------
UMO.KHPOS


\pr_khum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: przed redakcją pola POS.KH
::----------------------------------------------------------------------------------------------------------------------
UMO.KHPOS=null()


\um_zaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: wyswietlanie zawieszen dla umowy
::  OLD: \um_zaw/um.fml
::----------------------------------------------------------------------------------------------------------------------
UMZ.index('UM');
UMZ.prefix(UM.ref());
UMZ.win_sel('WER');
UMZ.select(,,,'P');
''


\um_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2011]
:: OPIS: wyswietlanie zalacznikow do ofert
::  OLD: \um_zal/um.fml
::----------------------------------------------------------------------------------------------------------------------
exec('sel_dok','dokum','UM',,,UM.UM_SRC,1);
''


\um_cen_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: poprawia ceny na pozycjach umowy (biezacej)
::  OLD: \um_cen_p/um3.fml
::----------------------------------------------------------------------------------------------------------------------
_um:=UM.ref;
UM.cntx_psh();
{? UM.STU().A='N'
||
   VAR_DEL.delete('X_UM','X_UP');
   X_UM:=sql('select KH.KOD KOD,UM.REFERENCE UMREF,UM.SYM sym from UM join KH using (UM.KH, KH.REFERENCE)
      where UM.REFERENCE=:_a',UM.ref);
   {? X_UM.size()=1
   ||
      {? exec('ang_c_r','umowy_aneks',0) & FUN.ask('Modyfikować ceny w umowie?'@)
      || do();
         UP.index('UM');
         UP.prefix(_um);
::       poprawa pozycji
         {? UP.first()
         ||
            _czy_pop:=0;
            {!
            |?
               echo('Poprawiam pozycję %1'@[$UP.POZ]);
               X_UP.prefix();
               {? X_UP.first()
               ||
                  {? UP.C<>0
                  ||
                     UMO.JM:={? UP.RFAK=3 || exec('par_m3','jm') || UP.MJ().J ?};
                     X_UP.prefix('H',UP.TAR().KOD,UP.MJ().KTM,UMO.JM().KOD,UP.C);
                     {? X_UP.first() & X_UP.NCE>0
                     ||
                        UP.C:=X_UP.NCE$2;
                        UP.ZM:='T';
                        _czy_pop:=UP.put()
                     ?}
                  ?};
                  {? UP.DOD='T' & UP.C_D<>0
                  ||
                     X_UP.prefix('HD',UP.TAR().KOD,UP.M_D().KTM,UP.M_D().J().KOD,UP.C_D);
                     {? X_UP.first() & X_UP.NCE>0
                     ||
                        UP.C_D:=X_UP.NCE$2;
                        UP.ZM:='T';
                        _czy_pop:=UP.put()
                     ?}
                  ?};
                  {? UP.R='T' & UP.C_R<>0
                  ||
                     X_UP.prefix('R',UP.TAR().KOD,UP.M().KTM,UP.M().J().KOD,UP.C_R);
                     {? X_UP.first() & X_UP.NCE>0
                     ||
                        {? UP.C_R=UP.C
                        || UP.C:=UP.C_R:=X_UP.NCE$2;
                           UP.ZM:='T'
                        || UP.C_R:=X_UP.NCE$2;
                           UP.ZM:='T'
                        ?};
                        _czy_pop:=UP.put()
                     ?}
                  ?};
                  {? UP.DR='T' & UP.DC_R<>0
                  ||
                     X_UP.prefix('RD',UP.TAR().KOD,UP.DM().KTM,UP.DM().J().KOD,UP.DC_R);
                     {? X_UP.first() & X_UP.NCE>0
                     ||
                        UP.DC_R:=X_UP.NCE$2;
                        UP.ZM:='T';
                        _czy_pop:=UP.put()
                     ?}
                  ?}
               ?};
               UP.next()
            !};
            echo()
         ?};
         end()
      ?}
   ||
      FUN.info('Nie znaleziono bieżącej umowy.'@)
   ?}
||
   FUN.info('Umowa jest aktywna.\nModyfikacja ceny niemożliwa.'@)
?};
UM.cntx_pop();
''


\set_efld_opt_up
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zaznacza wymagalne pola w pozycji umowy
::   WE: _a - akronim okna redakcji
::       [_b] - tabela kontekstu wywołania - domyślnie UP
::----------------------------------------------------------------------------------------------------------------------
_win_red:={? var_pres('_a')=type_of('') || _a || UP.win_edit('?') ?};
_tab:={? var_pres('_b')=type_of(SYSLOG) || _b || UP ?};

{? UP.UM().TYP_HR='H'
|| UP.efld_opt(_win_red,'mark=%1'[{? UP.MJ<>null() || '1' || '0' ?}],UMO,'HNK');
   UP.efld_opt(_win_red,'mark=%1'[{? UP.MJ<>null() & UP.M=null() || '1' || '0' ?}],,'F');
   UP.efld_opt(_win_red,'mark=%1'[{? UP.MJ=null() & UP.M=null() || '1' || '0' ?}],,'MJ');
   UP.efld_opt(_win_red,'mark=%1'[{? (UP.MJ=null() & UP.M=null()) | (UP.M<>null() & UP.MJ=null()) | (UP.MJ<>null() & UP.F<>'T') || '1' || '0' ?}],,'M');
   UP.efld_opt(_win_red,'mark=%1'[{? UP.M<>null() || '1' || '0' ?}],,'ILM');
   UP.efld_opt(_win_red,'mark=%1'[{? UP.MJ<>null() || '1' || '0' ?}],,'IL');
   UP.efld_opt(_win_red,'mark=%1'[{? UP.M_D<>null() || '1' || '0' ?}],,'ILD');
   UP.efld_opt(_win_red,'mark=%1'[{? UP.DM<>null() || '1' || '0' ?}],,'DILM')
|? UP.UM().TYP_HR='C'
|| UP.efld_opt(_win_red,'mark=1',UMO,'HNK');
   UP.efld_opt(_win_red,'mark=1',,'F');
   UP.efld_opt(_win_red,'mark=1',,'MJ');
   UP.efld_opt(_win_red,'mark=1',,'IL');
   UP.efld_opt(_win_red,'mark=%1'[{? UP.M_D<>null() || '1' || '0' ?}],,'ILD')
|| UP.efld_opt(_win_red,'mark=1',,'M');
   UP.efld_opt(_win_red,'mark=1',,'ILM');
   UP.efld_opt(_win_red,'mark=%1'[{? UP.M_D<>null() || '1' || '0' ?}],,'ILD');
   UP.efld_opt(_win_red,'mark=%1'[{? UP.DM<>null() || '1' || '0' ?}],,'DILM')
?};
~~


\selUmowy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Wybór umowy z listy
::   WE: _a - 1-tylko do aneksowania, 2-tylko do zakończenia, 0-wszystkie
::----------------------------------------------------------------------------------------------------------------------
_res:=null();
UM.cntx_psh();
{? _a=1
||
:: do aneksowania
   UM.index('NRU');
   UM.f_clear();
   UM.f_set('KH(KOD),STU(KOD)','join STU'
       ,'UM.A=\'N\' and STU.A=\'T\' and STU.RODZ<>\'E\' and UM.ODDZ=\':_a\'',ST.ODDZ)
|? _a=2
||
:: do zakończenia
   UM.index('NRU');
   UM.f_clear();
   UM.f_set('KH(KOD),STU(KOD)','join STU'
       ,'UM.A=\'N\' and UM.STAT_REJ=\'Z\' and STU.RODZ=\'E\' and UM.ODDZ=\':_a\'',ST.ODDZ)
||
:: wszystkie z oddziału
   UM.index('NRU');
   UM.prefix(ST.ODDZ,'N')
?};
UM.win_sel('WER_SEL');
{? UM.select() || _res:=UM.ref() ?};
UM.cntx_pop();
_res


\kst_fas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: domyslny sposob fakturowania - wartosc poczatkowa pola FAS
::   WY: FAS.ref()
::  OLD: \kst_fas/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
_ctab:=cur_tab();
_fo:=exec('get','#params',{? var_pres('_ctab')>0 & (_ctab=ZLE | _ctab=ZLP) || 100131 || 100130 ?},2);
{? _fo<>'' || _wyn:=exec('FindInSet','#table','FAS','KOD',_fo,_fo) ?};
_wyn


\sp_zaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: sprawdzanie poprawnosci wypelnienia danych podczas rejestracji zawieszenia umowy
::  OLD: \sp_zaw/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';

_od:=UMZ.OD;
UMZ.cntx_psh();
UMZ.index('UM');
UMZ.prefix(UM.ref());
{? UMZ.last()
||
   {? UMZ.DO>=_od
   ||
      FUN.info('Istnieją zawieszenia umowy z terminem zakończenia późniejszym niż %1.'@[form(_od)]);
      _wyn:='OD'
   ?};
   _wyn='' & UMZ.prev()
?};
UMZ.cntx_pop();

{? _wyn='' & UMZ.OD>UMZ.DO
||
   FUN.info('Data zakończenia musi być większa od daty zawieszenia.'@);
   _wyn:='DO'
?};

{? _wyn='' & UM.OD>UMZ.OD
||
   FUN.info('Data zawieszenia musi być większa\nod daty rozpoczęcia umowy - %1.'@[form(UM.OD)]);
   _wyn:='OD'
?};

{? ~(UM.STU().A='T' | (UM.STU().A='N' & UM.STU().RODZ='N'))
||
   FUN.info('Umowa nie jest aktywna.'@);
   _wyn:='OD'
?};

{? _wyn=''
||
   HGEN.cntx_psh();
   HGEN.clear();
   _ndx:=HGEN.ndx_tmp(,,'ODDZ',,,'ST',,);
   HGEN.index(_ndx);
   HGEN.prefix(ST.ODDZ,'T');
   {? HGEN.last()
   || {? UMZ.OD>HGEN.DO
      ||
         _wyn:=''
      ||
         {? exec('um_st_ap','umowy',UM.ref,UMZ.OD,UMZ.DO)<=0
         || _wyn:='OD'
         ?}
      ?}
   ?};
   HGEN.ndx_drop(_ndx);
   HGEN.cntx_pop()
?};
_wyn


\umz_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: usuwanie zawieszenia umowy
::  OLD: \umz_del/um.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;

_umz_od:=UMZ.OD;
_umz_do:=UMZ.DO;
_umz_ref:=UMZ.ref();

UMZ.cntx_psh();
UMZ.index('UM');
UMZ.prefix(UM.ref());
{? UMZ.last()
||
   {? UMZ.ref()<>_umz_ref & UMZ.OD>=_umz_do
   ||
      FUN.info('Istnieją zawieszenia umowy w późniejszym terminie.\nUsunięcie zawieszania niemożliwe.'@);
      _ok:=0
   ?};
   _ok=1 & UMZ.prev()
?};
UMZ.cntx_pop();

{? _ok=1 & FUN.ask('Usunąć zawieszenie umowy?'@)
|| _delete:=-1;
   UMZ.OD:=UMZ.DO:=date(0,0,0);
   UMZ.put();
   UMZ.cntx_psh();
   _ok:=exec('um_odt_b','umowy_zlecenia',_umz_od);
   UMZ.cntx_pop();
   {? _ok=1
   ||
      _delete:=UMZ.del(,1);
      UMZ.last()
   ||
      UMZ.OD:=_umz_od;
      UMZ.DO:=_umz_do;
      UMZ.put()
   ?};
   {? ~_delete
   || FUN.info('Z powodu powiązań nie udało się usunąć zawieszenia umowy.\n'
               'Daty zawieszenia zostały wyzerowane.'@)
   |? _delete=-1
   || FUN.info('Z powodu powiązań nie udało się usunąć zawieszenia umowy.'@)
   ?}
?};
''


\umz_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: poprawianie zawieszenia umowy
::  OLD: \umz_edit/um.fml
::----------------------------------------------------------------------------------------------------------------------
UMZ.win_edit('RED');
{? UMZ.UM().STU().A='N'
||
   {? UMZ.edit("exec('sp_zaw','umowy')")
   || UMZ.put()
   ?}
||
   HGEN.cntx_psh();
   HGEN.clear();
   HGEN.index('ODDZ');
   HGEN.prefix(ST.ODDZ);
   {? HGEN.last()
   ||
      {? UMZ.OD>HGEN.DO
      ||
         {? UMZ.edit("exec('sp_zaw','umowy')")
         || UMZ.put()
         ?}
      ||
         FUN.info('Generowano zgłoszenia. Modyfikacje niemożliwe.'@)
      ?}
   ?};
   HGEN.cntx_pop()
?};
''


\um_an_um
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: porownuje warunki umowy z warunkami z ostatniej zmiany - UMAN w buforze
::       pola ktore sa porownywane: POS, UPSYS, H, IL, MJ
::   WE: _a - UMAN.ref
::   WY: 0/1 - czy zmiana
::  OLD: \um_an_um/um3.fml
::----------------------------------------------------------------------------------------------------------------------
_uman_ref:=UMAN.ref();
_uman_bie:=UMAN.BIE;

UM.cntx_psh();
UP.cntx_psh();

VAR_DEL.delete('X_Xc');
X_Xc:=tab_tmp(1
   ,'POZ','INTEGER','Pozycja'
   ,'BREF','STRING[16]','ref up'
   ,'BPOS','INTEGER','ref pos'
   ,'BUPSYS','STRING[3]','kod sys wyw'
   ,'BH','STRING[10]','kod harm'
   ,'BMJ','STRING[50]','jednostka'
   ,'BIL','REAL','ilosc'
   ,'BOP','STRING[50]','Opis'
   ,'OREF','STRING[16]','ref up'
   ,'OPOS','INTEGER','ref pos'
   ,'OUPSYS','STRING[3]','kod sys wyw'
   ,'OH','STRING[10]','kod harm'
   ,'OMJ','STRING[50]','jednostka'
   ,'OIL','REAL','ilosc'
   ,'OOP','STRING[50]','Opis'
);

:: szuka umowy ktorej dotyczy aneks _a
UM.index('AN');
UM.prefix(_uman_ref);
{? UM.first()
||
   UP.index('POZ');
   UP.prefix(UM.ref());
   {? UP.first()
   ||
      {!
      |?
         _up_ref:=#UP.ref();
         _up_src:=UP.UP_SRC;

         X_Xc.blank();
         X_Xc.POZ:=UP.POZ;

         X_Xc.BREF:=$UP.ref();
         X_Xc.BPOS:=#UP.POS;
         X_Xc.BUPSYS:=UP.UPSYS().KOD;
         X_Xc.BH:=UP.H().KOD;
         X_Xc.BMJ:=UP.MJ().J().KOD;
         X_Xc.BIL:=UP.IL;

::       szuka nastepnej powiazanej i sprawdza czy byla zmiana
         UP.cntx_psh();
         _ndx:=UP.ndx_tmp(,,'R_UP',,,'UP_SRC',,);
         UP.index(_ndx);
         UP.prefix(_up_ref,_up_src);
         {? UP.first()
         ||
            X_Xc.OREF:=$UP.ref();
            X_Xc.OPOS:=#UP.POS;
            X_Xc.OUPSYS:=UP.UPSYS().KOD;
            X_Xc.OH:=UP.H().KOD;
            X_Xc.OMJ:=UP.MJ().J().KOD;
            X_Xc.OIL:=UP.IL;

            {? X_Xc.BPOS<>X_Xc.OPOS | X_Xc.BUPSYS<>X_Xc.OUPSYS | X_Xc.BH<>X_Xc.OH | X_Xc.BIL<>X_Xc.OIL | X_Xc.BMJ<>X_Xc.OMJ
            ||
               X_Xc.add()
            ?}
         ||
::          umowa ma kolejne aneksy i nie ma powiazanej pozycji - czyli zostala usunieta w nastepnym aneksie
            UMAN.cntx_psh();
            {? UP.UM().UMAN<>null
            ||
               X_Xc.OOP:='Posesja usunięta';
               X_Xc.add()
            ?};
            UMAN.cntx_pop()
         ?};
         UP.ndx_drop(_ndx);
         UP.cntx_pop();

         UP.next()
      !}
   ?}
?};

:: dla umowy utworzonej przez aneks szuka nowych pozycji
UMAN.cntx_psh();
UMAN.index('POZ');
UMAN.prefix(_uman_bie);
{? UMAN.seek(_uman_ref)
||
   _um_ref:=null;
   {? UMAN.next()
   ||
      UM.index('AN');
      UM.prefix(_uman_ref);
      {? UM.first() || _um_ref:=UM.ref() ?}
   ||
      UM.prefix();
      {? UM.seek(UMAN.BIE) || _um_ref:=UM.ref() ?}
   ?};

   {? _um_ref<>null
   ||
      UP.index('POZ');
      UP.prefix(_um_ref);
      {? UP.first()
      ||
         {!
         |?
            {? UP.R_UP=0
            ||
::             nowa pozycja
               X_Xc.blank();
               X_Xc.POZ:=UP.POZ;
               X_Xc.BOP:='Posesja dodana';

               X_Xc.OREF:=$UP.ref();
               X_Xc.OPOS:=#UP.POS;
               X_Xc.OUPSYS:=UP.UPSYS().KOD;
               X_Xc.OH:=UP.H().KOD;
               X_Xc.OMJ:=UP.MJ().J().KOD;
               X_Xc.OIL:=UP.IL;

               X_Xc.add()
            ?};
            UP.next()
         !}
      ?}
   ?}
?};
UMAN.cntx_pop();

UP.cntx_pop();
UM.cntx_pop();
''


\umowa_dr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: wydruki dotyczace tresci umow
::  OLD: \umowa_dr/um.fml
::----------------------------------------------------------------------------------------------------------------------
UM.cntx_psh();
exec('rep_exec','#b_report','LUM_UMO_XXXX','lum_umw*','Wydruki dotyczące treści umów',2,,,,,,'W');
UM.cntx_pop();
''


\ump_druk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: wydruki do pozycji umowy
::  OLD: \ump_druk/um2.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rep_exec','#b_report','LUM_UMO_XXXX','lum_ump*','Wydruki do pozycji umowy',2,,,,,,'W');
''


\kh_pos
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: wyswietlenie posesji kontrahenta
::   WE: [_a] - (0)edit lub (1)nie
::       [_b] - czy select oraz ustawianie okienka (0-tak 1-nie)
::  OLD: \kh_pos/um.fml
::----------------------------------------------------------------------------------------------------------------------
::{? CIRR.if_cirr(1) || return() ?};
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};

UL.win_sel('WER');
UL.win_dict('WER');

POS.index('KH');
POS.prefix(KH.ref());
{? _b=0
||
   {? _a=0
   || POS.win_sel('WER')
   || POS.win_sel('WER2')
   ?};

   POS.select()
?};
''


\um_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MarKus [19.42]
:: OPIS: akcja wyswietl dla umów cyklicznych
::----------------------------------------------------------------------------------------------------------------------
UM.display()


\um_zgl_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MarKus [19.42]
:: OPIS: Wyświetlenie wszystkich zgłoszeń jednorazowych danego kontrahenta
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_press('ZGL_ALL_DT1')=type_of(date())
|| _dt1:=ZGL_ALL_DT1
|| _dt1:=date(ST.AR-1,ST.AM,1)
?};
{? var_press('ZGL_ALL_DT2')=type_of(date())
|| _dt2:=ZGL_ALL_DT2
|| _dt2:=date(ST.AR,ST.AM,0)
?};

undefine();
define('h0',~~,'Dla zakresu dat       ');
define('h1',~~,'zgłoszenia lub wykonania');
define('od',_dt1,'Od daty      ');
define('do',_dt2,'Do daty      ');
define('ODB','','Kod odbiorcy',,10,10,0);
def_btn('text=Zapisz','key:F2');
def_btn('text=Anuluj','key:Esc');
{? ~def_edit("{? DEFINE.do>=DEFINE.od || '' || FUN.info('Błędny zakres dat.'@);'do' ?}",FUN.TYT)
|| return(~~)
?};

ZGL_ALL_DT1:=DEFINE.od;
ZGL_ALL_DT2:=DEFINE.do;

_r1:=ZGL_ALL_DT1~1;
_m1:=ZGL_ALL_DT1~2;
{? _r1>0
|| {? _m1=1
   || _r1-=1;
      _m1:=12
   || _m1-=1
   ?}
?};
_r2:=ZGL_ALL_DT2~1;
_m2:=ZGL_ALL_DT2~2;
{? _r2>0
|| {? _m2=12
   || _r2+=1;
      _m2:=1
   || _m2+=1
   ?}
?};

_tab:=tab_tmp(
   ,'UM_SYM','STRING[20]','Symbol umowy'@
   ,'DZ','DATE','Zgłoszenie wykonania'@
   ,'DW','DATE','Data wykonania'@
   ,'UL_KDP','STRING[6]','Kod'@
   ,'MIA_NAZ','STRING[40]','Miasto'@
   ,'UL','STRING[150]','Ulica'@
   ,'POS_NR','STRING[40]','Numer'@
   ,'NRREJ','STRING[10]','Pojazd'@
   ,'ZLBR_KOD','STRING[20]','Brygada'@
   ,'PRAC','STRING[40]','Pracownik'@
   ,'TFAK','STRING[1]','Fakturuj według realizacji'@
   ,'ZLP_REF','STRING[16]','ZLP_ref'
   ,'ODDZ','STRING[1]','Oddział'@
   ,'FAKS','STRING[1]','Fakturowano'@
   ,'F','STRING[1]','Fakturować (T/N)'@
   ,'SR','STRING[1]','Status Realizacji'@
   ,'KHODB','STRING[10]','Odbiorca'@
   ,'RP','STRING[1]','H-Harmonogram/R-Ryczałt'@
   ,'ZUM','STRING[1]','Z umowy'@
   ,'KTM','STRING[30]','Indeks'@
   ,'ODD','DATE','Od dnia'@
   ,'DOD','DATE','Do dnia'@
);

ZLP.cntx_psh();
ZLE.cntx_psh();
_names:=ZLP.names();
{? _names.first()
|| {!
   |? _name:=_names.NAME;
      _rn:=#(2+(_name+4));
      {? _rn>=90
      || _rn+=1900
      || _rn+=2000
      ?};
      _mn:=#((_name+4)+2);
      _name_ok:=0;
      {? _r1=0 & _r2=0
      || _name_ok:=1
      |? _r1=0 & _r2>0
      || {? _rn<_r2 | (_rn=_r2 & _mn<=_m2)
         || _name_ok:=1
         ?}
      |? _r1>0 & _r2=0
      || {?  _rn>_r1 | (_rn=_r1 & _mn>=_m1)
         || _name_ok:=1
         ?}
      || {? (_rn=_r1 & _m1<=_rn) | (_r1<_rn & _rn<_r2) | (_rn=_r2 & _mn<=_m2)
         || _name_ok:=1
         ?}
      ?};
      {? _name_ok
      || ZLP.use(_names.NAME);
         ZLP.cntx_psh();
         ZLP.index('S4');
         ZLP.prefix(KH.ref());
         {? ZLP.first()
         || {!
            |? _dz:=ZLP.DZ;
               _dw:=ZLP.DW;
               _zlp_ok:=0;
               {? ZGL_ALL_DT1=date(0,0,0) & ZGL_ALL_DT2=date(0,0,0)
               || _zlp_ok:=1
               |? ZGL_ALL_DT1=date(0,0,0) & ZGL_ALL_DT2<>date(0,0,0)
               || {? _dz<>date(0,0,0) & _dz<=ZGL_ALL_DT2
                  || _zlp_ok:=1
                  |? _dw<>date(0,0,0) & _dw<=ZGL_ALL_DT2
                  || _zlp_ok:=1
                  ?}
               |? ZGL_ALL_DT1<>date(0,0,0) & ZGL_ALL_DT2=date(0,0,0)
               || {? _dz<>date(0,0,0) & _dz>=ZGL_ALL_DT1
                  || _zlp_ok:=1
                  |? _dw<>date(0,0,0) & _dw>=ZGL_ALL_DT1
                  || _zlp_ok:=1
                  ?}
               || {? ZLP.DZ<>date(0,0,0) & ZGL_ALL_DT1<=ZLP.DZ & ZLP.DZ<=ZGL_ALL_DT2
                  || _zlp_ok:=1
                  |? ZLP.DW<>date(0,0,0) & ZGL_ALL_DT1<=ZLP.DW & ZLP.DW<=ZGL_ALL_DT2
                  || _zlp_ok:=1
                  ?}
               ?};
               {? _zlp_ok
               || ZLE.use(ref_name(ZLP.ZLE));
                  {? ZLE.seek(ZLP.ZLE)
                  || _tab.blank();
                     _tab.ZUM:=ZLE.CZUM;
                     _tab.UM_SYM:=ZLP.UM().SYM;
                     _tab.DZ:=ZLP.DZ;
                     _tab.DW:=ZLP.DW;
                     _tab.UL_KDP:=ZLP.UL().KDP;
                     _tab.MIA_NAZ:=ZLP.MIA().NAZ;
                     _tab.UL:=ZLP.UL().UL;
                     _tab.POS_NR:=ZLP.POS().NR;
                     _tab.NRREJ:=ZLP.POJAZD().NRREJ;
                     _tab.ZLBR_KOD:=ZLP.ZLBR().KOD;
                     _tab.PRAC:=ZLP.PRACW().PRAC;
                     _tab.TFAK:=ZLE.TFAK;
                     _tab.ZLP_REF:=$ZLP.ref();
                     _tab.ODDZ:=ZLE.ODDZ;
                     _tab.KTM:=ZLP.MJ().KTM;
                     _tab.FAKS:=ZLP.FAKS;
                     _tab.F:=ZLP.F;
                     _tab.SR:=ZLP.SR;
                     _tab.RP:=ZLP.RP;
                     _tab.ODD:=ZLP.ODD;
                     _tab.DOD:=ZLP.DOD;
                     _tab.KHODB:=ZLP.KH_ODB().KOD;
                     {? DEFINE.ODB='' | DEFINE.ODB=_tab.KHODB
                     || _tab.add()
                     ?}
                  ?}
               ?};
              ZLP.next()
            !}
         ?};
         ZLP.cntx_pop()
      ?};
      _names.next()
   !}
?};
ZLE.cntx_pop();
ZLP.cntx_pop();

{? DEFINE.ODB=''
|| _tyt:='Zgłoszenia jednorazowe %1 - %2'@[$ZGL_ALL_DT1,$ZGL_ALL_DT2]
|| _tyt:='Zgłoszenia jednorazowe %1 - %2, odbiorca %3'@[$ZGL_ALL_DT1,$ZGL_ALL_DT2, DEFINE.ODB]
?};
_wer:=_tab.mk_sel(_tyt,,0,,,,,,'U','U');
_tab.win_fld(_wer,,'KHODB',,,10,,,'Odbiorca'@);
_tab.win_fld(_wer,,'ZUM',,,-1,,,'Z umowy'@);
_tab.win_fld(_wer,,'UM_SYM',,,20,,,'Symbol umowy'@);
_tab.win_fld(_wer,,'DZ',,,11,,,'Zgłoszenie wykonania'@);
_tab.win_fld(_wer,,'DW',,,11,,,'Data wykonania'@);
_tab.win_fld(_wer,,'KTM',,,-20,,,'Indeks'@);
_tab.win_fld(_wer,,'UL_KDP',,,6,,,'Kod'@);
_tab.win_fld(_wer,,'MIA_NAZ',,,20,,,'Miasto'@);
_tab.win_fld(_wer,,'UL',,,20,,,'Ulica'@);
_tab.win_fld(_wer,,'POS_NR',,,5,,,'Numer'@);
_tab.win_fld(_wer,,'NRREJ',,,10,,,'Pojazd'@);
_tab.win_fld(_wer,,'ZLBR_KOD',,,8,,,'Brygada'@);
_tab.win_fld(_wer,,'PRAC',,,10,,,'Pracownik'@);
_tab.win_fld(_wer,,'TFAK',,,,,,'Fakturuj według realizacji'@,,,2,,"'T'","'N'");
_tab.win_fld(_wer,,'F',,,,,,'Fakturować T/N'@,,,2,,"'T'","'N'");
_tab.win_fld(_wer,,'SR',,,-2,,,'Status Realizacji'@,,);
_tab.win_fld(_wer,,'RP',,,-2,,,'H-Harmon/R-Ryczałt'@,,);
_tab.win_fld(_wer,,'ODD',,,-10,,,'Zm.Rycz od dnia'@,,);
_tab.win_fld(_wer,,'DOD',,,-10,,,'Zm.Rycz do dnia'@,,);
::_tab.win_fld(_wer,,'ODDZ',,,1,,,'Oddział'@);
::_tab.win_act(_wer,0,'Formuła','Kontynuuj'@@,,,,"sel_exit()",1,,,,'K');
_tab.win_sel(_wer);
_tab.win_act(_wer,0,'Wyświetl',,,,
      "_zlp_ref:=cur_tab().ZLP_REF;
       ZLP.cntx_psh();
       ZLP.use(form(8+_zlp_ref));
       ZLP.prefix();
       {? ZLP.seek(_zlp_ref,form(8+_zlp_ref))
       || exec('zle_win_edit_set','!lum_zgl_dzgl');
         ZLP.ZLE();
         ZLP.get();
         ZLE.get();
         ZLP.memo_get(,'OPIS');
         ZLP.memo_get(,'NDRUK');
         ZLEC.MIA:=ZLE.POS().UL().MIA;
         ZLEC.UL:=ZLE.POS().UL;
         ZLE.display()
       ?};
       ZLP.cntx_pop()
      ");
_tab.win_link(_wer,"
   _zlp_ref:=cur_tab().ZLP_REF;
   _a:=obj_new('LINK');
   ZLP.cntx_psh();
   ZLP.use(form(8+_zlp_ref));
   ZLP.prefix();
   {? ZLP.seek(_zlp_ref,form(8+_zlp_ref))
   || _a.LINK:=ZLP.uidref()
   ?};
   ZLP.cntx_pop();
   _a
");
_tab.select();
~~


\umowy_pos
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MarKus [19.42]
:: OPIS: Zakładka umowy cykliczne - posesje
::----------------------------------------------------------------------------------------------------------------------
exec('kh_pos','umowy',1,0)


\um_re_bd_sz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MarKus [19.42]
:: OPIS: akcja przed wyswietleniem dla umow bez wyżarzania akcji
::   WY: kolor
::  OLD: \um_re_bd/um2.fml
::----------------------------------------------------------------------------------------------------------------------
UMO.KH:=UM.KH;
STR.split(UM.KH().NAZ_P);
UMO.KHN:=STR.line(57);
UMO.KHNAZ:=STR.line(100);
exec('rekprzed','color','UM#01')


\zlp_um_show
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [19.42]
:: OPIS: Pokazuje zgłoszenia dla danej umowy akcja na okienku wertowania UM.
::   WE:
::   WY:
::   OLD: \zlp_um_show/mpgk.fml
::   OLD: \mpgk_zlp_all/mpgk.fml
::----------------------------------------------------------------------------------------------------------------------
ZLP.cntx_psh();
ZLE.cntx_psh();
UM.cntx_psh();
_ndx:=ZLP.ndx_tmp(,,'ZLE','KH',,'KH_ODB',,,'ZLE','CZUM',,'UM','SYM',,'F',,,'DW',,);
ZLP.index(_ndx);
ZLP.prefix(UM.KH,UM.KH_ODB,'T',UM.SYM,);
ZLP.actions('HGEN_U','U:U');
ZLP.win_sel('HGEN_U');
exec('zlp_oknr','umowy_zlecenia');
VAR_DEL.delete('__test');
__test:=1;
{!|?  __test |!
   {? __test=1
   ||
      __test:=0;
      ZLP.select()
   |? __test=2
   ||
      __test:=0;
      ZLP.index(_ndx);
      ZLP.prefix(UM.KH,UM.KH_ODB,'T',UM.SYM,);
      ZLP.actions('HGEN_U','U:U');
      ZLP.win_sel('HGEN_U');
      exec('zlp_oknr','umowy_zlecenia');
      ZLP.select()
   |? __test=3
   ||
      __test:=0;
      ZLP.index('KH');
      ZLP.prefix(UM.KH);
      ZLP.actions('HGEN_U','W:W');
      ZLP.win_sel('HGEN_U');
      exec('zlp_oknr','umowy_zlecenia');
      ZLP.select()
   ?}
!};
ZLP.cntx_pop();
ZLE.cntx_pop();
UM.cntx_pop();
ZLP.ndx_drop(_ndx)


\zlp_um_show_e
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [19.42]
:: OPIS: Pokazuje zgłoszenia dla danej umowy akcja na okienku wertowania UM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_exit();
__test:=2;
''


\mpgk_zlp_all_e
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [19.42]
:: OPIS: Pokazuje zgłoszenia dla danego kontrahenta akcja na okienku wertowania UM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_exit();
__test:=3;
''


\par_okr_um
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [19.42]
:: OPIS: Wybór okresu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_index:=ZLP.index('?');
_prefix:=ZLP.cur_prfx();
{? __PARSES.editPar('OkresRok')
|| AreaTitle.setTitle();
   {? _prefix<>'' || ZLP.index(_index); ($('ZLP.prefix(%1)'[_prefix]))(); ZLP.first() ?}
?}


\podst_up
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MaX [12.10]
:: OPIS: Podstawienia pojemników z umów
::  OLD: \podst_up/qtrasy.fml
::----------------------------------------------------------------------------------------------------------------------
__QPODT:='UP';

UMC.WHERE:='UP';
UPMZAD.win_sel('WER');
exec('icon_before','umowy_wspolne');
UPMZAD.index('UP');
UPMZAD.prefix(ST.ODDZ,'N',UP.POS().MIA().NAZ,UP.POS().UL().UL,UP.POS().NR,);
UPMZAD.select()


\umowa_word
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wydruk umowy do WORD
::----------------------------------------------------------------------------------------------------------------------
UM.KH(); UM.KH_ODB();
params_exec('generuj','szablon_zws','LUM_UMOWA_CYKLICZNA',UM.UM_SRC)


\um_stat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: zmiana statusu umowy
::   WE: _a-1-akceptacja umowy 0-wycofanie akceptacji umowy
::       [_b] - status umowy
::   WY: 1-powiodło się 0-nie
::  OLD: \um_stat/um.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_stu:={? var_pres('_b')=type_of(null()) || _b || null() ?};

VAR_DEL.delete('__stu_gz');

UM.cntx_psh();
{? UM.r_lock(1,1,1)
||
   _ok:=1;
   UMO.HNK:='';
   UP.index('UM');
   UP.prefix(UM.ref());
   {? ~UP.first()
   ||
      FUN.info('Umowa nie posiada pozycji.\nZmiana statusu niemożliwa.'@);
      _ok:=0
   ?};

   {? _ok=1 & UM.STU().RODZ='' & UM.STU().A='N'
   ||
      FUN.info('Aby uaktywnić umowę należy usunąć ostatnią zmianę dla umowy.'@);
      _ok:=0
   ?};

   STU.win_sel('SLO');
   STU.index('AKT');
   {? _a=1 || STU.prefix('T') || {? ~UM.AN || STU.prefix('N','N') || STU.prefix('N','E') ?} ?};
   {? _stu<>null() & STU.seek(_stu)
   || _stu_ref:=STU.ref()
   |? STU.size()=1 & STU.first()
   || _stu_ref:=STU.ref()
   || _stu_ref:=null()
   ?};
   STU.win_sel('SEL');
   {? _ok=1 & (_stu_ref<>null() | STU.select())
   || _stu_ref:=STU.ref();
      VAR_DEL.delete('__stu_gz');
      __stu_gz:=STU.GZ;
::    przed nowym statusem
      _stu_f:=STU.F;
      {? UM.STU<>_stu_ref
      ||
         {? ($_stu_f)(0)
         || _fp:=($UM.STU().FP)(0);
            {? type_of(_fp)=type_of(0) & _fp<>0
            ||
               UM.cntx_psh();
               {? _fp>0
               || UM.prefix();
                  UM.STU:=_stu_ref;
                  {? UM.STU().RODZ='' & UM.STU().A='N' & UM.DO=date(0,0,0)
                  ||
::                zmiana statusu na zakonczona
                     UMAN.index('POZ');
                     UMAN.prefix(UM.ref());
                     {? UMAN.last() & UMAN.D<>date(0,0,0)
                     ||
                        UM.DO:=UMAN.D;
                        UM.put();
                        UM.cntx_psh();
                        exec('um_odt_b','umowy_zlecenia',UMAN.BIE().DPO);
                        UM.cntx_pop()
                     ?}
                  ?};
                  UM.STU:=_stu_ref;
                  {? UM.put(1) || _res:=1 ?}
               || UM.prefix();
                  UM.STU:=_stu_ref;
                  {? UM.put(1) || _res:=1 ?}
               ?};
               UM.cntx_pop()
            ?}
         ?}
      || FUN.info('Nie można zmienić na ten sam status.'@)
      ?}
   ?};
   UM.r_unlock()
|| {? FUN.ask('Dokument obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@) & UM.r_lock(1,,1)
   || UM.r_unlock()
   ?}
?};
UM.cntx_pop();
VAR_DEL.delete('__stu_gz');
_res


\umowa_akceptuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Akceptacja umowy cyklicznej
::   WE: [_a] - 0(domyślnie) 1-automatyczna akcja
::  OLD: \um_stat/um.fml
::----------------------------------------------------------------------------------------------------------------------
_end:=exec('umTheEnd','umowy_aneks',UM.ref());
{? UM.STAT_REJ='Z' & _end
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LUM_UMO_EZAK';
   _params.UIDREF:=UM.uidref();
   _params.AKCJA:='Zakończenie';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'UM',UM.ref());
   exec('mp_run','#b__box',_params)
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LUM_UMO_EAUM';
   _params.UIDREF:=UM.uidref();
   _params.AKCJA:={? var_pres('_a')=type_of(0) & _a || 'AkceptujAuto' || 'Akceptuj' ?};
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'UM',UM.ref());
   exec('mp_run','#b__box',_params)
?};
~~

:Sign Version 2.0 jowisz:1045 2024/02/14 09:50:26 010a9dbafc61cb9d34f20d2a0d182b123c827e21ed7aaa9ad1e281869c39c21c96edb328d914cb937c45f183c384e108a95819ed3dc130d0169cd009ed4a87c8ab12a6a7a5187121d67c5e8d6dd156dc7bd630865e6c2f084c3601566a7255c75bc2c01ba424f125df3d41c55f87483f220769009d11d0f0fbebb998f08313e4
