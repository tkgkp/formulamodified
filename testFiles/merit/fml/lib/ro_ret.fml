:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ro_ret.fml
:: Utworzony: 29.01.2018
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły dotyczące okresu retencji danych osobowych.
::======================================================================================================================
:: Do formuł wywoływanych przez silnik (lub z obsługi grupowej) przekazywane są parametry:
::    RODO     - Obiekt klasy RODO.
::    AUTO     - Tryb pracy:
::                0 - Retencja ustalana w związku z obsługą rzeczywistego żądania.
::                1 - Obsługa retencji automatycznej - typowanie danych do usunięcia.
::    SRC      - Tablica nazwana (patrz \ref_arg/ro_cfg.fml) z informacją o rekordzie, dla którego ma być określona
::               data zapomnienia.
::    DATA     - Data badania.
::    AUTO     - Określenie trybu przetwarzania danych:
::                0 - wywołanie na żądanie użytkownika
::                1 - uruchomienie automatyczne
::    RET      - Tablica nazwana (patrz \ret_val/ro_cfg.fml) do umieszczenia statusu przetwarzania.
::======================================================================================================================


\_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła testowa, do podłączenia do dowolnej konfiguracji.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_RODO:=_arg.RODO;
_ret:=_arg.RET;

{? ~_arg.AUTO
|| FUN.info('Badanie okresu retencji dla rekordu %1 na dzień %2'+@[_arg.SRC.SQL_REF,$_arg.DATA])
?};
_ret.STATUS:=500;
_ret.INFO:='Formuła testowa.';

~~


\_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca datę zapomnienia.
::       Poprawność argumentu nie jest badana.
::   WE: _a [REFERENCE] - Wskazanie osoby.
::       _b [DATE]      - Data zawarcia pierwszej umowy.
::       _c [DATE]      - Data rozwiązania umowy.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_od:=_b;
_do:=_c;

:: Formuły wyliczające datę zapomnienia na podstawie przekazanej daty.
:: - wersja standard obowiązująca przed 1 I 2019 r.
_fdata50:="
:: Najpierw wyznaczamy datę upłynięcia 50 lat.
   _rok:=(_a~1)+50;
   _mc:=_a~2;
   _dz:=_a~3;
   _dt:=date(_rok,_mc,0);
   {? _dz<_dt~3
   || _dt:=date(_rok,_mc,_dz)
   ?};
:: Teraz 1 miesiąc na odebranie dokumentów.
   {? _dt~3=1
   || _dt:=date(_dt~1,_dt~2,0)
   |? (_dt+1)~3=1
   || _dt+=1;
      _dt:=date(_dt~1,_dt~2,0)
   || _nm:=date(_dt~1,_dt~2,0)+1;
      _nm:=date(_nm~1,_nm~2,0);
      _dt:={? _dt~3<=_nm~3 || date(_nm~1,_nm~2,(_dt~3)-1) || _nm ?}
   ?};
:: Następnego dnia możemy zapomnieć.
   _dt+1
";
:: - wersja skrócona (po 1 I 2019 r.):
::       10 lat licząc od końca roku kalendarzowego, w którym:
::       - stosunek pracy uległ rozwiązaniu lub wygasł (Kodeks pracy: Art. 94. pkt. 9b)
::       - raport informacyjny został złożony (Ustawa o systemie ubezpieczeń społecznych: Art. 41f.1. )
::       a potem jeszcze miesiąc kalendarzowy (styczeń) na odebranie dokumentów.
_fdata10:="date((_a~1)+11,2,1)";

_d0:=date(0,0,0);
_d1:=date(1999,1,1);
_d2:=date(2018,12,31);

_ret:=obj_new('TUM1','TUM2','DRIA','TRIA','DRET');
_ret.TUM1:='Data zawarcia pierwszej umowy: '+$_od;
_ret.TUM2:='Data ustania stosunku pracy: '+$_do;
:: Data złożenia raportu ZUS RIA.
_ret.DRIA:=_d0;
_ret.TRIA:='Raport imienny ZUS RIA nie zotał złożony.';
:: Data retencji.
_ret.DRET:=_d0;

{? _od<_d1
:: Umowa zawarta przed 1994 r. - 50 lat od rozwiązania umowy.
|| _ret.DRET:=_fdata50(_do)

|? _od<=_d2
:: Umowa zawarta (po 1998 r.) przed 2019 r. ...
|| _def:='ZUS_RIA';
   KART_DEF.cntx_psh();
   KART_DEF.index('SYMBOL');
   KART_DEF.prefix(_def,_def);
   {? KART_DEF.first()
   || KART_DOD.cntx_psh();
      KART_DOD.index('KART_DOD');
      {? var_pres('FIRMA',KART_DOD)=26
      || KART_DOD.prefix(REF.FIRMA,KART_DEF.ref(),_osoba)
      || KART_DOD.prefix(KART_DEF.ref(),_osoba)
      ?};
      {? KART_DOD.first() & KART_DOD.OD<>_d0
      || _ret.DRIA:=KART_DOD.OD;
         _ret.TRIA:='Data złożenia raportu imiennego ZUS RIA: '+$_ret.DRIA
      ?};
      KART_DOD.cntx_pop()
   ?};
   KART_DEF.cntx_pop();

   {? _ret.DRIA=_d0
::    Raport ZUS RIA nie został złożony - 50 lat od rozwiązania umowy.
   || _ret.DRET:=_fdata50(_do)
::    Raport ZUS RIA został złożony - 10 lat od daty złożenia.
   || _ret.DRET:=_fdata10(_ret.DRIA)
   ?}

:: Umowa zawarta po 2018 r. - 10 lat od rozwiązania umowy.
|| _ret.DRET:=_fdata10(_do)
?};

_ret


\umprac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych z umowami o pracę.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;

_ins:="exec('ins_infb','ro_cfg',_a,_b,_c)";

{? _arg.SRC.TABELA=OSOBA
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   {? OSOBA.seek(_arg.SRC.REF)
   || _osobakali:=exec('_osobakali','ro_wzcel');
      {? _osobakali*',P,'
::       Zakładamy, że OSOBA wprowadzona do systemu, nie związana z KALI-m, jest traktowana jako pracownik.
      || _fzatr:=var_pres('F_ZATR',P)=26;
         _TAB:=sql(
            'select H_UM.OD, H_UM.DO, H_UM.NUMER '+
            'from H_UM join P using(H_UM.P,P.REFERENCE) join OSOBA using(P.OSOBA,OSOBA.REFERENCE) '+
            {? _fzatr
            || 'join F_ZATR using(P.F_ZATR,F_ZATR.REFERENCE) '
            || ''
            ?}+
            'where OSOBA.REFERENCE=\''+$OSOBA.ref()+'\' '+
            {? var_pres('FIRMA',P)=26
            || 'and P.FIRMA=\''+$REF.FIRMA+'\' '
            || ''
            ?}+
            {? _fzatr
            || 'and F_ZATR.KOD=\'P\' '
            || ''
            ?}+
            'order by 2, 1 desc'
         );
         {? _TAB.first()
         || {? _TAB.DO=date(0,0,0)
            || _ret.STATUS:=1;
               _ret.INFO:='Istnieje co najmniej jedna aktywna umowa o pracę.'
            |? _TAB.last()
            || _TAB.cntx_psh();
               _TAB.index(_TAB.ndx_tmp(,,'OD',,));
               _TAB.first();
               _od:=_TAB.OD;
               _TAB.cntx_pop();
               _obj:=exec('_osoba','ro_ret',OSOBA.ref(),_od,_TAB.DO);
               _ins(_INFB,'[TABELA]','Informacje dodatkowe');
               _ins(_INFB,'[TEKST]',_obj.TUM1);
               _ins(_INFB,'[TEKST]',_obj.TUM2);
               _ins(_INFB,'[TEKST]',_obj.TRIA);
               _ret.DATA:=_obj.DRET;
               _ret.STATUS:=_arg.DATA<_ret.DATA
            ?};
            _ins(_INFB,'[TABELA]','Ostatnia umowa o pracę');
            _ins(_INFB,'[TEKST]','Umowa nr '+_TAB.NUMER+' od dnia '+$_TAB.OD+' do dnia '+$_TAB.DO);
            exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)

         || _ret.STATUS:=-2;
            _ret.INFO:='Nie znaleziono umów o pracę.'
         ?}
      || _samotnik:=0;
::       Obsługa osób nie związanych z KALIM
         _Info:=exec('info','ro_ret');
         _size:=exec('ret_tl','ro_ret',OSOBA,_arg,_Info);
         exec('ret_fino','ro_ret',_arg,_Info);
         {? var_pres('OS_VIEW')=type_of(OSOBA) & var_pres('ZLGD')=type_of(OSOBA)
         ||
::          Szukam zarejestrowanej robocizny dla danej osoby
            OS_VIEW.cntx_psh();
            OS_VIEW.index('OSOZATR');
            OS_VIEW.prefix(OSOBA.ref());
            {? OS_VIEW.first()
            || _tab:=sql('
                  select ZLGD.DT, ZL.SYM, ZL.DAT_ZAM
                  from @ZLGB join @ZLGD join ZL
                  where ZLGB.OS_VIEW=:_a
                  order by 1'
                  ,OS_VIEW.ref());
               {? _tab.first()
               || _od:=_tab.DT;
                  _tab.last();
                  _dz:=_tab.DT;
                  _obj:=exec('_osoba','ro_ret',OSOBA.ref(),_od,_dz);
                  _ins(_INFB,'[TABELA]','Informacje dodatkowe');
                  _ins(_INFB,'[TEKST]',_obj.TUM1);
                  _ins(_INFB,'[TEKST]',_obj.TUM2);
                  _ins(_INFB,'[TEKST]',_obj.TRIA);
                  _ret.DATA:=_obj.DRET;
                  _status:=_ret.STATUS;
                  _ret.STATUS:=_arg.DATA<_ret.DATA;
                  _opis:='Najpóźniejsza karta rejestracji robocizny dla osoby.';
                  _info:='Symbol zlecenia: '+_tab.SYM
                        +' Data zamknięcia zlecenia: '+form(_tab.DAT_ZAM)
                        +' Data ostatniej karty: '+form(_tab.DT);
                  {? _opis<>'' & _info<>'' || _Info.ret(_dz,_opis,_info,_ret.STATUS,_ret.DATA) ?};
                  _ret.INFO:='Istnieje co najmniej jedna karta rejestracji robocizny do zlecenia produkcyjnego.';
                  _ret.STATUS:={? _ret.STATUS<0 || _ret.STATUS
                               |? _ret.STATUS>_status || _ret.STATUS
                               || _status
                               ?}
               ?}
            || _samotnik:=1
            ?};
            OS_VIEW.cntx_pop()
         || _samotnik:=1
         ?};
         {? _samotnik
         || _count:=OSOBA.count();
            {? _count
            || _TL:=OSOBA.testlink(,_count);
::             Czy rekord ma powiązania z tabelami lokalnymi (wstępnie załóżmy, że nie)?
               _local:=0;
::             Obecna konstrukcja deklaracji ścieżek zakłada wskazywanie katalogu dla tabel globalnych. Tabela, która
::             nie została wyraźnie wskazana w deklaracji ścieżek jest tabelą lokalną i będzie wyszukiwana w katalogu
::             "firmowym". Ponieważ MacroBUILDER nie dopuszcza polskich znaków diakrytycznych w nazwie tabeli, to możemy
::             założyć, że nie zostanie w nim zdefiniowana tabela ąąąąąąąą.mdb. Na pewno więc nie będzie ona globalna.
               {? _TL.first()
               || _locDir:=pth_dir(':ąąąąąąąą.mdb');
                  _lastAcr:='';
                  {!
                  |? {? _lastAcr<>_TL.TABELA
                     || _lastAcr:=_TL.TABELA;
                        _local:=pth_dir(':'+_TL.MASKA+'.mdb')=_locDir
                     ?};
                     ~_local & _TL.next()
                  !}
               ?};
               {? ~_local & _count<>_TL.size()
               || _ret.INFO:='Dane osobowe wykorzystywane w innej firmie.';
                  _ret.STATUS:=1
               ?}
            ?}
         ?};
         _Info.inf_ret(_INFB,_ret);
         ~~
      ?}
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono osoby.'
   ?};
   OSOBA.cntx_pop()

|? _arg.SRC.TABELA=RP7_OS
|| RP7_OS.cntx_psh();
   RP7_OS.prefix();
   {? RP7_OS.seek(_arg.SRC.REF)
   || _dz:=RP7_OS.DZ;
      {? var_pres('P',RP7_OS)=26
      || P.cntx_psh();
         P.prefix();
         OSOBA.cntx_psh();
         OSOBA.prefix();
         _osoba:=RP7_OS.P().OSOBA;
         OSOBA.cntx_pop();
         P.cntx_pop()
      || _osoba:=null()
      ?};
      {? _dz=date(0,0,0)
      || _ret.STATUS:=1;
         _ret.INFO:='Brak informacji o zakończeniu umowy o pracę.'
      || _obj:=exec('_osoba','ro_ret',_osoba,RP7_OS.DZA,_dz);
         _ins(_INFB,'[TABELA]','Informacje dodatkowe');
         _ins(_INFB,'[TEKST]',_obj.TUM1);
         _ins(_INFB,'[TEKST]',_obj.TUM2);
         _ins(_INFB,'[TEKST]',_obj.TRIA);
         _ret.DATA:=_obj.DRET;
         _ret.STATUS:=_arg.DATA<_ret.DATA
      ?};
      _ins(_INFB,'[TABELA]','Ostatnia umowa o pracę');
      _ins(_INFB,'[TEKST]','Umowa od dnia '+$RP7_OS.DZA+' do dnia '+$RP7_OS.DZ);
      exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono odbiorcy zaświadczenia RP7.'
   ?};
   RP7_OS.cntx_pop()

|? _arg.SRC.TABELA=RD
|| RD.cntx_psh();
   RD.prefix();
   {? RD.seek(_arg.SRC.REF)
   || OSOBA.cntx_psh();
      RD.OSOBA();
      _src:=_arg.SRC;
      obj_del(_arg.SRC);
      _arg.SRC:=exec('ref_arg','ro_cfg',OSOBA,OSOBA.ref());
      _osobakali:=exec('_osobakali','ro_wzcel');
::    Kolejność badania warunków jest związana z malejącym okresem retencji.
      {? _osobakali='' | _osobakali*',P,'
      || exec('umprac','ro_ret',_arg)
      |? _osobakali*',Z,'
      || exec('umzlec','ro_ret',_arg,'C',1);
         exec('umzlec','ro_ret',_arg,'M',1)
      |? _osobakali*',K,'
      || exec('kontrakt','ro_ret',_arg)
      || _ret.STATUS:=1;
         _ret.INFO:='Nieobsługiwana forma współpracy ('+_osobakali+').'
      ?};
      obj_del(_arg.SRC);
      _arg.SRC:=_src;
      OSOBA.prefix();
      OSOBA.cntx_pop()
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono członka rodziny.'
   ?};
   RD.cntx_pop()

?};
~~


\ret_fino
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Retencja dla osoby - struktury finansowe
::   WE: _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::       _b - uchwyt do obiektu obsługującego komunikaty retencji
::   WY: ilość powiązanych rekordów do rekordu w buforze tabeli _a
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_Info:=_b;
_ret:=_arg.RET;
_Info.SLO:='N';
_ret.STATUS:=0;
_ilelat:=#exec('get_par','#parametr',502,2);

:: sprawdzanie zaliczek
_ndx1:=EZAL.ndx_tmp(,1,'ZAL_DLA',,0);
EZAL.cntx_psh(); EZAL.index(_ndx1); EZAL.prefix(OSOBA.ref());
{? EZAL.first()
|| {! |?
      _status:=_ret.STATUS;
      _ret.STATUS:=exec('ret_ezal','ro_ret',_arg,#EZAL.ref(),EZAL.name(),_Info);
      _ret.STATUS:={? _ret.STATUS<0 || _ret.STATUS
                   |? _ret.STATUS>_status || _ret.STATUS
                   || _status
                   ?};
      _ret.STATUS>=0 & EZAL.next()
   !}
?};
EZAL.cntx_pop(); EZAL.ndx_drop();

:: sprawdzenie przelewów
{? _ret.STATUS>=0
|| _ndx3:=PB.ndx_tmp(,1,'OSOBA',,0);
   PB.cntx_psh();
   _tab:=PB.names();
   {? _tab.first()
   || {! |?
         PB.use(_tab.NAME); PB.index(_ndx3); PB.prefix(OSOBA.ref());
         {? PB.first()
         || {! |?
               _status:=_ret.STATUS;
               _ret.STATUS:=exec('ret_pb','ro_ret',_arg,#PB.ref(),PB.name(),_Info);
               _ret.STATUS:={? _ret.STATUS<0 || _ret.STATUS
                            |? _ret.STATUS>_status || _ret.STATUS
                            || _status
                            ?};
               _ret.STATUS>=0 & PB.next()
            !}
         ?};
         _ret.STATUS>=0 & _tab.next()
      !}
   ?};
   PB.cntx_pop();
   PB.ndx_drop();
   obj_del(_tab)
?};

:: sprawdzenie środków trwałych
{? _ret.STATUS>=0
|| _TAB:=exec('findst','ro_ret',OSOBA.ref());
   {? _TAB.first()
   || {! |?
         _status:=_ret.STATUS;
         {? _TAB.DZU=date(0,0,0)
         || _data:=date(2100,12,31); _ret.STATUS:=1;
            _datau:=date(2100,12,31)
         || _data:=date((_TAB.DZU~1)+5+_ilelat,12,31);
            _ret.STATUS:=_data>_arg.DATA;
            _datau:=_TAB.DZU
         ?};
         _opis:='Środek trwały z najpóźniejszą datą przechowywania';
         _info:='Jednostka księgowa: '+_TAB.ODD+
                ' Numer inwentarzowy: '+_TAB.NRI+
                ' Nazwa środka: '+_TAB.NST;
         _Info.ret(_datau,_opis,_info,_ret.STATUS,_data);
         _ret.STATUS:={? _ret.STATUS<0 || _ret.STATUS
                      |? _ret.STATUS>_status || _ret.STATUS
                      || _status
                      ?};
         _ret.STATUS>=0 & _TAB.next()
      !}
   ?};
   obj_del(_TAB)
?};

:: Sprawdzenie danych dla słowników użytkownika
{? _ret.STATUS>=0
|| _Info.SLO:='T';
   OS.cntx_psh(); SLO.cntx_psh();
   _ndx2:=SLO.ndx_tmp(,1,'SLU',,0,'KOD',,0,'KOD',,0);
   SLU.cntx_psh(); SLU.index('WZORZEC');
:: Słowniki wzorce Kartoteka osób i osoba
:: Nie ma Kalego więc nie ma rekordów w słownikach o wzorcach Pracownik i Zlecenioborca
   {! _i:=1..2
   |! {? _i=1
      || _wz:='Kartoteka osób'; _dalej:=1
      |? _i=2
      || _wz:='Osoba';
         OS.index('OSOBA'); OS.prefix(OSOBA.ref()); _dalej:=OS.first()
      ?};
      {? _dalej
      || SLU.prefix(_wz);
         {? SLU.first()
         || {! |?
               _kod:={? _i=1
                     || form(OSOBA.IMEX,-SLU.DL,,'1')
                     |? _i=2
                     || SLU.DL+form(OS.KOD)
                     ?};
               SLO.index(_ndx2); SLO.prefix(SLU.ref(),_kod,_kod);
               {? SLO.first()
               || {! |?
                     {? SLO.count()>0
                     || _Tl:=SLO.testlink();
                        {? _Tl.first()
                        || _loop:=_Tl.first();
                           {!
                           |? _loop
                           |! _Info.TABELA:=_Tl.TABELA;
                              _status:=_ret.STATUS;
                              {? _Tl.TABELA='EDOKUM'
                              || _ret.STATUS:=exec('ret_edk','ro_ret',_arg,_Tl.REF,_Tl.MASKA,_Info,'T')
                              |? _Tl.TABELA='DOK'
                              || _ret.STATUS:=exec('ret_dok','ro_ret',_arg,_Tl.REF,_Tl.MASKA,_Info,'T')
                              |? _Tl.TABELA='AN_SLU'
                              || _ret.STATUS:=exec('ret_ans','ro_ret',_arg,_Tl.REF,_Tl.MASKA,_Info,'T')
                              ?};
                              _ret.STATUS:=
                                 {? _ret.STATUS<0 || _ret.STATUS
                                 |? _ret.STATUS>_status || _ret.STATUS
                                 || _status
                                 ?};
                              _loop:=_ret.STATUS>=0 & _Tl.next()
                           !}
                        ?};
                        obj_del(_Tl)
                     ?};
                     _ret.STATUS>=0 & SLO.next()
                  !}
               ?};
               _ret.STATUS>=0 & SLU.next()
            !}
         ?}
      ?}
   !};
   OS.cntx_pop(); SLU.cntx_pop(); SLO.cntx_pop(); SLO.ndx_drop()
?}


\findst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.22]
:: OPIS: Tabela wystepowania osoby w srodkach trwałych
::   WE: _a - OSOBA.ref(), _b - stan na dzien (domyslnie data biezaca)
::----------------------------------------------------------------------------------------------------------------------
_tmp:=tab_tmp(2,'ODD','STRING[8]','ODDZIAL',
                'NRI','STRING[20]','NRI',
                'NST','STRING[100]','NST',
                'DZU','DATE','DZU');
OSOBA.prefix();
:: jezeli nieprawidlowy parametr to zwraca pusta tabele
{? _=0 | type_of(_a)<>type_of(null) | _a=null | ~OSOBA.seek(_a)
|| return(_tmp)
?};
{? _>=2 & type_of(_b)=type_of(date()) || _f_day:=_b || _f_day:=date() ?};

_o_ref:=_a;
_o_naz:=OSOBA.NAZWISKO;

exec('fst_cntx_psh','srodobj');
exec('SRD','object');
SRD.FST:=exec('szuk_b_dom','parses','FST');
exec('maski','srodobj');

VAR.OKRO_F:=exec('find_okro_f','fst',_f_day);

{? SRSR.first()
|| _idx:=SRST.ndx_tmp(,1,'SRSR',,,'OSOBA',,,'ROK',,,'OKRES',,);
   _idx2:=SRDO.ndx_tmp(,1,'SRSR',,,'RODZ',,,'DO',,);
   {! |?
      SRST.index(_idx);
      SRST.prefix(SRSR.ref(),_o_ref);
      {? SRST.find_key(VAR.OKRO_F().RES,VAR.OKRO_F().OES)
      || _tmp.blank();
         _tmp.ODD:=SRST.ODD().OD;
         _tmp.NRI:=SRST.NRI;
         _tmp.NST:=SRST.NST;
         _tmp.DZU:=date(0,0,0);
         _tmp.add()
      || {? SRST.last()
         || _tmp.blank();
            _tmp.ODD:=SRST.ODD().OD;
            _tmp.NRI:=SRST.NRI;
            _tmp.NST:=SRST.NST;
            {? SRST.SRSR().DES<>date(0,0,0) & SRST.SRSR().DES<=SRST.OKRO_F().KON
            || _tmp.DZU:=SRST.SRSR().DES
            || SRDO.index(_idx2);
               SRDO.prefix(SRSR.ref(),'L');
               {? SRDO.first()
               || {! |?
                     {? SRDO.DO>=SRST.OKRO_F().POCZ & SRDO.DO<=SRST.OKRO_F().KON & SRDO.OSOBA<>_o_ref
                     || _tmp.DZU:=SRDO.DO;
                        _next:=0
                     || _next:=SRDO.next()
                     ?};
                     _next
                  !};
                  {? _tmp.DZU=date(0,0,0) || SRST.OKRO_F().KON ?}
               || _tmp.DZU:=SRST.OKRO_F().KON
               ?}
            ?};
            _tmp.add()
         ?}
      ?};
      SRSR.next()
   !};
   SRST.ndx_drop(_idx);
   SRDO.ndx_drop(_idx2)
?};

:: weryfikacja inwentaryzacji, dla środków dla których nie wystawiono jeszcze dokumentów poinwentaryzacyjnych
_idx3:=SRXD.ndx_tmp(,1,'OSOBA',,);
SRXD.index(_idx3);
SRXD.prefix(_o_ref);
{? SRXD.first()
|| {! |?
      {? (SRXD.OSOBA<>SRXD.OSOBA_N & SRXD.DOK_L='N') | (SRXD.STATUS='Z' & SRXD.DOK_W='N')
      || _tmp.blank();
         _tmp.ODD:=SRXD.ODD().OD;
         _tmp.NRI:=SRXD.NRI;
         _tmp.NST:=SRXD.NST;
         _tmp.DZU:=SRXD.SRXI().DS;
         _tmp.add()
      ?};
      SRXD.next()
   !}
?};
SRXD.ndx_drop(_idx3);
exec('fst_cntx_pop','srodobj');
_tmp


\ret_ezal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza retencję dla tabeli EZAL
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::        _b - ref
::        _c - maska
::   WY: 0/1 - jest spełniona retencja / nie jest spełniona retencja
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_zwrot:=0;
_Info:=_d;
_ilelat:=#exec('get_par','#parametr',502,2);
EZAL.cntx_psh(); EZAL.prefix();
{? EZAL.seek(_b,_c)
|| _dalej:={? var_pres('FIRMA',EZAL)>0
           || EZAL.FIRMA=REF.FIRMA
           || 1
           ?};
   {? _dalej
   || _data:={? EZAL.TP_PLAN<>date(0,0,0) || EZAL.TP_PLAN || EZAL.DATA_WY ?};
      _data1:=_data;
      _data:=date((_data~1)+5+_ilelat,12,31);
      _zwrot:=_data>_arg.DATA;
      _opis:='Zaliczka z najpóźniejszą datą wypłaty';
      _info:='Symbol: '+EZAL.SYM+
             ' Data wystawienia: '+$EZAL.DATA_WY+
             ' Planowany termin płatności: '+$EZAL.TP_PLAN;
      _Info.ret(_data1,_opis,_info,_zwrot,_data)
   ?}
?};
EZAL.cntx_pop();
_zwrot


\spadkobierca
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych z prawami
::       majątkowymi po zmarłym pracowniku.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('umzlec','ro_ret',_a,'M')


\umzlec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych z umowami
::       cywilnoprawnymi.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE: _a [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::       _b [STRING] - Kod obsługiwanych umów:
::                      C - umowy cywilnoprawne (bez 'm') [domyślnie];
::                      M - prawa majątkowe - spadek (tylko 'm').
::       [_c] [NUMBER] - Czy pomijać komunikat o braku umów [0*/1].
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_umz:={? var_pres('_b')=type_of('') & _b='M' || 'M' || 'C' ?};
_nomsg:=var_pres('_c')=type_of(0) & _c;

_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;

_ins:="exec('ins_infb','ro_cfg',_a,_b,_c)";

{? _arg.SRC.TABELA=OSOBA
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   {? OSOBA.seek(_arg.SRC.REF)
   || _firma:=var_pres('FIRMA',P)=26;
::    P.FIRMA - Merit.
      _ZC:=sql(
         'select ZC.NU, ZC.DZ, ZC.DU, ZC.DW, ZC.ZUS, ZC.REFERENCE ZCREF '+
         'from ZC join RU using(ZC.RU,RU.REFERENCE) '+
            {? _firma || 'join P using(ZC.P,P.REFERENCE) ' || '' ?}+
         'where ZC.OSOBA=:_a '+{? _firma || 'and P.FIRMA=:_b ' || '' ?}+
            'and RU.K'+{? _umz='M' || '=' || '<>' ?}+'\'m\' '+
         'order by ZC.DW',
         OSOBA.ref(),REF.FIRMA
      );

      {? _ZC.last()
      || {? _umz='C' &
            (_ZC.cntx_psh(); _ZC.index(_ZC.ndx_tmp(,,'ZUS',,)); _zus:=_ZC.find_key('T',); _ZC.cntx_pop(); _zus)
::          Jest składka - zleceniobiorcę traktujemy jak pracownika.
         || _ZC.cntx_psh();
            _ZC.index(_ZC.ndx_tmp(,,'DU',,));
            _ZC.first();
            _du:=_ZC.DU;
            _ZC.cntx_pop();

            _obj:=exec('_osoba','ro_ret',OSOBA.ref(),_du,_ZC.DW);
            _ins(_INFB,'[TABELA]','Informacje dodatkowe');
            _ins(_INFB,'[TEKST]',_obj.TUM1);
            _ins(_INFB,'[TEKST]',_obj.TUM2);
            _ins(_INFB,'[TEKST]',_obj.TRIA);

            _ins(_INFB,'[TABELA]','Ostatnia umowa cywilnoprawna');
            _ins(_INFB,'[TEKST]','Umowa nr '+_ZC.NU+' z dnia '+$_ZC.DZ+' (od '+$_ZC.DU+' do '+$_ZC.DW+')');

            _ret.DATA:=_obj.DRET;
            _ret.STATUS:=_arg.DATA<_ret.DATA;
            exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)

::          Nie ma składki - zleceniobiorca nie jest traktowany jak pracownik.
         || _RH:=sql(
               'select ZC.NU, ZC.DZ, ZC.DU, ZC.DW, RH.DWY '+
               'from RH join ZC using(RH.ZLE,ZC.REFERENCE) '+
               'where RH.ZLE in (select ZCREF from :_a) '+
               'order by RH.DWY',
               _ZC
            );

::          Data retencji na podstawie daty zakończenia umowy.
            _ret.DATA:=date((_ZC.DW~1)+6,1,1);
            _ins(_INFB,'[TABELA]','Ostatnia umowa cywilnoprawna');
            _ins(_INFB,'[TEKST]','Umowa nr '+_ZC.NU+' z dnia '+$_ZC.DZ+' (od '+$_ZC.DU+' do '+$_ZC.DW+')');

            {? _RH.last()
::             Są rachunki - będą dwie informacje o datach + "Weryfikacja końcowa"
            || exec('inf_ret','rodo',_INFB,_ret.DATA);
::             Powyżej - kończymy sekcję "Ostatnia umowa ..."

::             Data retencji na podstawie daty ostatniego rachunku.
               _dt:=date((_RH.DWY~1)+7,1,1);
               _ins(_INFB,'[TABELA]','Ostatni rachunek do umowy cywilnoprawnej');
               _ins(_INFB,'[TEKST]','Rachunek z dnia '+$_RH.DWY);
               _ins(_INFB,'[TEKST]','Umowa nr '+_RH.NU+' z dnia '+$_RH.DZ+' (od '+$_RH.DU+' do '+$_RH.DW+')');
               exec('inf_ret','rodo',_INFB,_dt);
               {? _ret.DATA<_dt
               || _ret.DATA:=_dt
               ?};

               _ins(_INFB,'[TABELA]','Weryfikacja końcowa')
            ?};

            _ret.STATUS:=_arg.DATA<_ret.DATA;
            exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)

         ?}

      |? ~_nomsg
::       Brak umów.
      || _ret.STATUS:=0;
         _ins(_INFB,'[TABELA]','Zleceniobiorca');
         _ins(_INFB,'[TEKST]','Brak umów cywilnoprawnych');
         exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)
      ?}

   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono osoby.'
   ?};
   OSOBA.cntx_pop()
?};

~~


\kontrakt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych z kontraktowcami.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;

_ins:="exec('ins_infb','ro_cfg',_a,_b,_c)";

:: Formuła wylicza datę zapomnienia na podstawie przekazanej daty zwolnienia.
_fdata:="date((_a~1)+3,_a~2,1)+_a~3";

{? _arg.SRC.TABELA=OSOBA
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   {? OSOBA.seek(_arg.SRC.REF)
   || _TAB:=sql(
         'select H_UM.OD, H_UM.DO, H_UM.NUMER '+
         'from H_UM '+
            'join P using(H_UM.P,P.REFERENCE) '+
            'join OSOBA using(P.OSOBA,OSOBA.REFERENCE) '+
            'join F_ZATR using(P.F_ZATR,F_ZATR.REFERENCE) '+
         'where OSOBA.REFERENCE=\''+$OSOBA.ref()+'\' '+
         {? var_pres('FIRMA',P)=26
         || 'and P.FIRMA=\''+$REF.FIRMA+'\' '
         || ''
         ?}+
         'and F_ZATR.KOD=\'K\' '+
         'order by 1, 2'
      );
      {? _TAB.last()
      || _dz:=_TAB.DO;
         {? _dz=date(0,0,0)
         || _ret.STATUS:=1;
            _ret.INFO:='Istnieje co najmniej jeden aktywny kontrakt.'
         || _ret.DATA:=_fdata(_dz);
            _ret.STATUS:=_arg.DATA<_ret.DATA
         ?};
         _ins(_INFB,'[TABELA]','Ostatni kontrakt');
         _ins(_INFB,'[TEKST]','Kontrakt nr '+_TAB.NUMER+' od dnia '+$_TAB.OD+' do dnia '+$_TAB.DO);
         exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)

      || _ret.STATUS:=-2;
         _ret.INFO:='Nie znaleziono kontraktów.'
      ?}
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono osoby.'
   ?};
   OSOBA.cntx_pop()
?};
~~


\rcp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych z osobami do
::       ewidencji czasu pracy.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;

_ins:="exec('ins_infb','ro_cfg',_a,_b,_c)";

:: Formuła wylicza datę zapomnienia na podstawie przekazanej daty zwolnienia.
_fdata:="date((_a~1)+3,_a~2,1)+_a~3";

{? _arg.SRC.TABELA=OSOBA
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   {? OSOBA.seek(_arg.SRC.REF)
   || _TAB:=sql(
         'select H_UM.OD, H_UM.DO, H_UM.NUMER '+
         'from H_UM '+
            'join P using(H_UM.P,P.REFERENCE) '+
            'join OSOBA using(P.OSOBA,OSOBA.REFERENCE) '+
            'join F_ZATR using(P.F_ZATR,F_ZATR.REFERENCE) '+
         'where OSOBA.REFERENCE=\''+$OSOBA.ref()+'\' '+
         {? var_pres('FIRMA',P)=26
         || 'and P.FIRMA=\''+$REF.FIRMA+'\' '
         || ''
         ?}+
         'and F_ZATR.KOD=\'R\' '+
         'order by 1, 2'
      );
      {? _TAB.last()
      || _dz:=_TAB.DO;
         {? _dz=date(0,0,0)
         || _ret.STATUS:=1;
            _ret.INFO:='Istnieje co najmniej jeden aktywny przebieg na potrzeby ewidencji.'
         || _ret.DATA:=_fdata(_dz);
            _ret.STATUS:=_arg.DATA<_ret.DATA
         ?};
         _ins(_INFB,'[TABELA]','Ostatni przebieg dla ewidencji czasu pracy');
         _ins(_INFB,'[TEKST]','Dokument nr '+_TAB.NUMER+' od dnia '+$_TAB.OD+' do dnia '+$_TAB.DO);
         exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)

      || _ret.STATUS:=-2;
         _ret.INFO:='Nie znaleziono umów.'
      ?}
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono osoby.'
   ?};
   OSOBA.cntx_pop()
?};
~~


\tymczas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ARTSLO [19.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych z pracownikami
::       tymczsowymi.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;

_ins:="exec('ins_infb','ro_cfg',_a,_b,_c)";

:: Formuła wylicza datę zapomnienia na podstawie przekazanej daty zwolnienia.
_fdata:="date((_a~1)+3,_a~2,1)+_a~3";

{? _arg.SRC.TABELA=OSOBA
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   {? OSOBA.seek(_arg.SRC.REF)
   || _TAB:=sql(
         'select H_UM.OD, H_UM.DO, H_UM.NUMER '+
         'from H_UM '+
            'join P using(H_UM.P,P.REFERENCE) '+
            'join OSOBA using(P.OSOBA,OSOBA.REFERENCE) '+
            'join F_ZATR using(P.F_ZATR,F_ZATR.REFERENCE) '+
         'where OSOBA.REFERENCE=\''+$OSOBA.ref()+'\' '+
         {? var_pres('FIRMA',P)=26
         || 'and P.FIRMA=\''+$REF.FIRMA+'\' '
         || ''
         ?}+
         'and F_ZATR.KOD=\'T\' '+
         'order by 1, 2'
      );
      {? _TAB.last()
      || _dz:=_TAB.DO;
         {? _dz=date(0,0,0)
         || _ret.STATUS:=1;
            _ret.INFO:='Istnieje co najmniej jedna aktywna umowa na potrzeby ewidencji.'
         || _ret.DATA:=_fdata(_dz);
            _ret.STATUS:=_arg.DATA<_ret.DATA
         ?};
         _ins(_INFB,'[TABELA]','Ostatnia umowa z agencją pracy tymczasowej');
         _ins(_INFB,'[TEKST]','Umowa nr '+_TAB.NUMER+' od dnia '+$_TAB.OD+' do dnia '+$_TAB.DO);
         exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)

      || _ret.STATUS:=-2;
         _ret.INFO:='Nie znaleziono umów.'
      ?}
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono osoby.'
   ?};
   OSOBA.cntx_pop()
?};
~~


\wierzyciel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych z wierzycielami
::       (potrącenia komornicze).
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;

_ins:="exec('ins_infb','ro_cfg',_a,_b,_c)";

{? _arg.SRC.TABELA=ADRES
|| ADRES.cntx_psh();
   ADRES.prefix();
   {? ADRES.seek(_arg.SRC.REF)
   || _TAB:=sql(
         'select KOM_SP.RP as ROK, KOM_SP.MP as MC '+
         'from KOM_SP join KOM_OS using(KOM_SP.KOM_OS,KOM_OS.REFERENCE) '+
         'where KOM_OS.WIE=:_a '+
         'order by 1, 2',
         ADRES.ref()
      );
      {? _TAB.last()
      || _ret.DATA:=date(_TAB.ROK+3,_TAB.MC,0);
         _ret.STATUS:=_arg.DATA<_ret.DATA;
         _ins(_INFB,'[TABELA]','Ostatnie potrącenie komornicze');
         _ins(_INFB,'[TEKST]','Rok: '+$_TAB.ROK+' Miesiąc: '+$_TAB.MC);
         exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)
      || _ret.STATUS:=-1;
         _ret.INFO:='Nie znaleziono potrąceń komorniczych.'
      ?}
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono wierzyciela.'
   ?};
   ADRES.cntx_pop()
?};

~~


\rp_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych z rekrutacją.
::       UWAGA: Poprawność argumentu wywołania NIE jest weryfikowana.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;

_ins:="exec('ins_infb','ro_cfg',_a,_b,_c)";

{? _arg.SRC.TABELA=RP_OSOBA
|| RP_OSOBA.cntx_psh();
   RP_OSOBA.prefix();
   {? RP_OSOBA.seek(_arg.SRC.REF)
   || {? _arg.AUTO
      || {? RP_OSOBA.ZOSTAW='T'
::          Retencja automatyczna i jest zgoda - nie usuwamy.
         || _ret.STATUS:=1;
            _ins(_INFB,'[TABELA]','Kandydat');
            _ins(_INFB,'[TEKST]','Zgoda na pozostawienie danych osobowych');
            exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)

::          Retencja automatyczna i brak zgody.
         || _TAB:=sql(
               'select case when SLO_KOD.KOD=\'Z\' then \'Z\' else \'X\' end as KOD, RP_PROC.DO '+
               'from RP_OSET '+
                  'join RP_PRET using(RP_OSET.RP_PRET,RP_PRET.REFERENCE) '+
                  'join RP_PROC using(RP_PRET.RP_PROC,RP_PROC.REFERENCE) '+
                  'join SLO_KOD using(RP_PROC.WER_STAN,SLO_KOD.REFERENCE) '+
               'where RP_OSET.RP_OSOBA=:_a '+
               'order by 1,1,2',
               RP_OSOBA.ref()
            );
            {? _TAB.last()
            || {? _TAB.prefix('X','X');
                  _TAB.last()
::                Retencja automatyczna i są niezakończone procesy - nie usuwamy.
               || _ret.STATUS:=1;
                  _ins(_INFB,'[TABELA]','Kandydat');
                  _ins(_INFB,'[TEKST]','Istnieją aktywny procesy rekrutacji');
                  exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)
               |? _TAB.prefix('Z','Z');
                  _TAB.last()
::                Retencja automatyczna, wszystkie procesy są zakończone - usuwamy.
               || _ins(_INFB,'[TABELA]','Kandydat');
                  {? _TAB.DO=date(0,0,0)
                  || _ret.DATA:=date()-1
                  || _ins(_INFB,'[TEKST]','Data zakończenia ostatniego procesu rekrutacji: '+$_TAB.DO);
                     _ret.DATA:=_TAB.DO
                  ?};
                  _ret.STATUS:=_arg.DATA<_ret.DATA;
                  exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)
               ?}

::             Nie ma żadnych procesów - usuwamy.
            || _ret.STATUS:=0;
               _ins(_INFB,'[TABELA]','Kandydat');
               _ins(_INFB,'[TEKST]','Brak procesów rekrutacji');
               exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)
            ?}
         ?}

::       Retencja na żądanie - zawsze (bez względu na pozostawione zgody i procesy rekrutacyjne..
      || _ret.DATA:=_arg.DATA;
         _ret.STATUS:=0;
         _ins(_INFB,'[TABELA]','Kandydat');
         exec('inf_ret','rodo',_INFB,_ret.DATA,_ret.STATUS=0)
      ?}

   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono kandydata.'

   ?};
   RP_OSOBA.cntx_pop()
?};
~~


\kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych
::       z odbiorcami kontrahenta.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;

_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;
_ret.STATUS:=0;

_Info:=exec('info','ro_ret');

{? _arg.SRC.TABELA=KH
|| KH.cntx_psh(); KH.prefix();
   {? KH.seek(_arg.SRC.REF)
   || exec('ret_tl','ro_ret',KH,_arg,_Info);
      EDOKUM.cntx_psh();
      {? type_of('KH',EDOKUM)>0 || _tab_ed:=EDOKUM.names(); _ndx2:=EDOKUM.ndx_tmp(,1,'KH',,0) ?};
      DOK.cntx_psh(); _tab_dok:=DOK.names(); _ndx3:=DOK.ndx_tmp(,1,'WYS',,0);
      AN_SLU.cntx_psh(); _tab_ans:=AN_SLU.names(); _ndx4:=AN_SLU.ndx_tmp(,1,'SLO',,0);
      _Info.SLO:='T';
      _ndx1:=SLO.ndx_tmp(,1,'SLU','WZ',0,'KOD',,0,'KOD',,0);
      SLO.cntx_psh(); SLO.index(_ndx1); SLO.prefix('Kontrahent',KH.KOD,KH.KOD);
      {? SLO.first()
      || {! |?
            {? type_of('KH',EDOKUM)>0 & _tab_ed.first()
            || _Info.TABELA:='EDOKUM';
               {! |?
                  EDOKUM.use(_tab_ed.NAME); EDOKUM.index(_ndx2); EDOKUM.prefix(SLO.ref());
                  {? EDOKUM.first()
                  || {! |?
                        _status:=_ret.STATUS;
                        _ret.STATUS:=exec('ret_edk','ro_ret',_arg,#EDOKUM.ref(),EDOKUM.name(),_Info,'T');
                        _ret.STATUS:={? _ret.STATUS<0 || _ret.STATUS
                                     |? _ret.STATUS>_status || _ret.STATUS
                                     || _status
                                     ?};
                        _ret.STATUS>=0 & EDOKUM.next()
                     !}
                  ?};
                  _ret.STATUS>=0 & _tab_ed.next()
               !}
            ?};
            {? _ret.STATUS>=0 & _tab_dok.first()
            || _Info.TABELA:='DOK';
               {! |?
                  DOK.use(_tab_dok.NAME); DOK.index(_ndx3); DOK.prefix(SLO.ref());
                  {? DOK.first()
                  || {! |?
                        _status:=_ret.STATUS;
                        _ret.STATUS:=exec('ret_dok','ro_ret',_arg,#DOK.ref(),DOK.name(),_Info,'T');
                        _ret.STATUS:={? _ret.STATUS<0 || _ret.STATUS
                                     |? _ret.STATUS>_status || _ret.STATUS
                                     || _status
                                     ?};
                        _ret.STATUS>=0 & DOK.next()
                     !}
                  ?};
                  _ret.STATUS>=0 & _tab_dok.next()
               !}
            ?};
            {? _ret.STATUS>=0 & _tab_ans.first()
            || _Info.TABELA:='AN_SLU';
               {! |?
                  AN_SLU.use(_tab_ans.NAME); AN_SLU.index(_ndx4); AN_SLU.prefix(SLO.ref());
                  {? AN_SLU.first()
                  || {! |?
                        _status:=_ret.STATUS;
                        _ret.STATUS:=exec('ret_ans','ro_ret',_arg,#AN_SLU.ref(),AN_SLU.name(),_Info,'T');
                        _ret.STATUS:={? _ret.STATUS<0 || _ret.STATUS
                                     |? _ret.STATUS>_status || _ret.STATUS
                                     || _status
                                     ?};
                        _ret.STATUS>=0 & AN_SLU.next()
                     !}
                  ?};
                  _ret.STATUS>=0 & _tab_ans.next()
               !}
            ?};
            _ret.STATUS>=0 & SLO.next()
         !}
      ?};
      SLO.cntx_pop(); SLO.ndx_drop();
      EDOKUM.cntx_pop(); EDOKUM.ndx_drop(); DOK.cntx_pop(); DOK.ndx_drop();
      AN_SLU.cntx_pop(); AN_SLU.ndx_drop()
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono kontrahenta.'
   ?};
   KH.cntx_pop()
?};

_Info.inf_ret(_INFB,_ret);
~~


\kh_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane kontrahenta są wykorzystywane w innej firmie
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
{? REF.WFIRM<>0
|| {? KH.count()=0
   || _zwrot:=exec('kh_firs','ro_ret')
   || _Tl:=KH.testlink();
      {? KH.count()<>_Tl.size()
      || _zwrot:=1
      || {? _Tl.first()
         || {? _Tl.first()
            || {! |?
                  {? _Tl.TABELA='OP' | _Tl.TABELA='PB' | _Tl.TABELA='PW' |
                     _Tl.TABELA='SER_NAG' | _Tl.TABELA='SER_NAGS' | _Tl.TABELA='UDT' | _Tl.TABELA='EDOKUM'
                  || _zwrot:=exec('fir_odd','ro_ret',_Tl,($_Tl.TABELA)())
                  |? _Tl.TABELA='DOKUM' | _Tl.TABELA='PAR_UM'
                  || _zwrot:=exec('fir_tab','ro_ret',_Tl,($_Tl.TABELA)())
                  |? _Tl.TABELA='WIND_KH' | _Tl.TABELA='WIND_OP'
                  || _zwrot:=exec('fir_wind','ro_ret',_Tl,($_Tl.TABELA)())
                  ?};
                  ~_zwrot & _Tl.next()
               !}
            ?}
         ?};
         obj_del(_Tl);
         {? ~_zwrot || _zwrot:=exec('kh_firs','ro_ret') ?}
      ?}
   ?}
?};
_zwrot


\kh_firs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane kontrahenta są wykorzystywane w innej firmie (dla tabeli SLO)
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
_ndx1:=SLO.ndx_tmp(,1,'SLU','WZ',0,'KOD',,0,'KOD',,0);
SLO.cntx_psh(); SLO.index(_ndx1); SLO.prefix('Kontrahent',KH.KOD,KH.KOD);
{? SLO.first()
|| {! |?
      {? SLO.count()>0
      || _Tl:=SLO.testlink();
         {? SLO.count()<>_Tl.size()
         || _zwrot:=1
         || {? _Tl.first()
            || {! |?
                  {? _Tl.TABELA='DOK' | _Tl.TABELA='EDOKUM'
                  || _zwrot:=exec('fir_odd','ro_ret',_Tl,($_Tl.TABELA)())
                  |? _Tl.TABELA='AN_SLU'
                  || _zwrot:=exec('fir_ansl','ro_ret',_Tl)
                ?};
                ~_zwrot & _Tl.next()
             !}
           ?}
        ?};
        obj_del(_Tl)
      ?};
      ~_zwrot & SLO.next()
   !}
?};
SLO.cntx_pop(); SLO.ndx_drop();
_zwrot


\oso_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane osoby są wykorzystywane w innej firmie
::   WE: [_a] [TABLE] Tablica z informacjami o wszystkich rekordach związanych z bieżącym rekordem tabeli OSOBA
::                    (tabela - wynik metody OSOBA.testlink()).
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
{? REF.WFIRM
|| {? OSOBA.count()=0
   || _zwrot:=exec('oso_firs','ro_ret')
   || _Tl:={? var_pres('_a')=type_of(OSOBA) || _a || OSOBA.testlink() ?};
      {? OSOBA.count()<>_Tl.size()
      || _zwrot:=1
      || {? _Tl.first()
         || {? _Tl.first()
            || {! |?
                  {? _Tl.TABELA='EDOKUM'
                  || _zwrot:=exec('fir_odd','ro_ret',_Tl,($_Tl.TABELA)())
                  |? _Tl.TABELA='DOKUM' | (_Tl.TABELA='EZAL' & var_pres('FIRMA',EZAL)>0)
                  || _zwrot:=exec('fir_tab','ro_ret',_Tl,($_Tl.TABELA)())
                  ?};
                  ~_zwrot & _Tl.next()
               !}
            ?}
         ?};
         obj_del(_Tl);
         {? ~_zwrot
         || _zwrot:=exec('oso_firs','ro_ret')
         ?}
      ?}
   ?}
?};
_zwrot


\oso_firs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane osoby są wykorzystywane w innej firmie (dla tabeli SLO)
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
OS.cntx_psh(); SLO.cntx_psh(); SLU.cntx_psh();
_ndx1:=SLO.ndx_tmp(,1,'SLU',,0,'KOD',,0,'KOD',,0);
:: Słowniki o wzorcach Kartoteka osób i Osoba
{! _i:=1..2
|! {? _i=1
   || _wz:='Kartoteka osób'; _dalej:=1
   |? _i=2
   || _wz:='Osoba';
      OS.index('OSOBA'); OS.prefix(OSOBA.ref()); _dalej:=OS.first()
   ?};
   {? _dalej & ~_zwrot
   || SLU.index('WZORZEC'); SLU.prefix(_wz);
      {? SLU.first()
      || {! |?
            _kod:={? _i=1
                  || form(OSOBA.IMEX,-SLU.DL,,'1')
                  |? _i=2
                  || SLU.DL+form(OS.KOD)
                  ?};
            SLO.index(_ndx1); SLO.prefix(SLU.ref(),_kod,_kod);
            _zwrot:=exec('oso_firs1','ro_ret');
            ~_zwrot & SLU.next()
         !}
      ?}
   ?}
!};
_ndx2:=SLO_OSOB.ndx_tmp(,1,'OSOBA',,0);
:: Słowniki o wzorcu Pracownik
{? ~_zwrot
|| SLO_OSOB.cntx_psh();
   SLO_OSOB.index(_ndx2); SLO_OSOB.prefix(OSOBA.ref());
   {? SLO_OSOB.first()
   || SLU.index('WZORZEC'); SLU.prefix('Pracownik');
      {! |?
         {? SLU.first()
         || {! |?
               _kod:=form(SLO_OSOB.ID,-SLU.DL,,'1');
               {? REF.WFIRM
               || {? +_kod>5 || _kod:=_kod+5 ?};
                  _kod:=REF.S_FIRMA().SYMBOL+_kod
               ?};
               SLO.index(_ndx1); SLO.prefix(SLU.ref(),_kod,_kod);
               _zwrot:=exec('oso_firs1','ro_ret');
               ~_zwrot & SLU.next()
            !}
         ?};
         ~_zwrot & SLO_OSOB.next()
      !}
   ?};
   SLO_OSOB.cntx_pop()
?};
:: Słowniki o wzorcu Zleceniobiorca
{? ~_zwrot
|| SLO_OSOB.cntx_psh();
   SLO_OSOB.index(_ndx2); SLO_OSOB.prefix(OSOBA.ref());
   {? SLO_OSOB.first()
   || SLU.index('WZORZEC'); SLU.prefix('Zleceniobiorca');
      {! |?
         {? SLU.first()
         || {! |?
               _kod:=form(SLO_OSOB.ID,-SLU.DL,,'1');
               {? REF.WFIRM
               || {? +_kod>5 || _kod:=_kod+5 ?};
                  _kod:=REF.S_FIRMA().SYMBOL+_kod
               ?};
               SLO.index(_ndx1); SLO.prefix(SLU.ref(),_kod,_kod);
               _zwrot:=exec('oso_firs1','ro_ret');
               ~_zwrot & SLU.next()
            !}
         ?};
         ~_zwrot & SLO_OSOB.next()
      !}
   ?};
   SLO_OSOB.cntx_pop()
?};
SLO_OSOB.ndx_drop();
SLO.cntx_pop(); SLO.ndx_drop(); OS.cntx_pop(); SLU.cntx_pop();
_zwrot


\oso_firs1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane osoby są wykorzystywane w innej firmie (dla tabeli SLO) - wewnętrzna
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
{? SLO.first()
|| {! |?
      {? SLO.count()>0
      || _Tl:=SLO.testlink();
         {? SLO.count()<>_Tl.size()
         || _zwrot:=1
         || {? _Tl.first()
            || {! |?
                  {? _Tl.TABELA='DOK' | _Tl.TABELA='EDOKUM'
                  || _zwrot:=exec('fir_odd','ro_ret',_Tl,($_Tl.TABELA)())
                  |? _Tl.TABELA='AN_SLU'
                  || _zwrot:=exec('fir_ansl','ro_ret',_Tl)
                  ?};
                  ~_zwrot & _Tl.next()
               !}
            ?}
         ?};
         obj_del(_Tl)
      ?};
      ~_zwrot & SLO.next()
   !}
?};
_zwrot


\oso_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane osoby są wykorzystywane w słowniku użytkownika
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
OS.cntx_psh(); SLO.cntx_psh(); SLU.cntx_psh();
_ndx1:=SLO.ndx_tmp(,1,'SLU',,0,'KOD',,0,'KOD',,0);
:: Słowniki o wzorcach Kartoteka osób i Osoba
{! _i:=1..2
|! {? _i=1
   || _wz:='Kartoteka osób'; _dalej:=1
   |? _i=2
   || _wz:='Osoba';
      OS.index('OSOBA'); OS.prefix(OSOBA.ref()); _dalej:=OS.first()
   ?};
   {? _dalej & ~_zwrot
   || SLU.index('WZORZEC'); SLU.prefix(_wz);
      {? SLU.first()
      || {! |?
            _kod:={? _i=1
                  || form(OSOBA.IMEX,-SLU.DL,,'1')
                  |? _i=2
                  || SLU.DL+form(OS.KOD)
                  ?};
            SLO.index(_ndx1); SLO.prefix(SLU.ref(),_kod,_kod);
            _zwrot:=SLO.first();
            ~_zwrot & SLU.next()
         !}
      ?}
   ?}
!};
_ndx2:=SLO_OSOB.ndx_tmp(,1,'OSOBA',,0);
:: Słowniki o wzorcu Pracownik
{? ~_zwrot
|| SLO_OSOB.cntx_psh();
   SLO_OSOB.index(_ndx2); SLO_OSOB.prefix(OSOBA.ref());
   {? SLO_OSOB.first()
   || SLU.index('WZORZEC'); SLU.prefix('Pracownik');
      {! |?
         {? SLU.first()
         || {! |?
               _kod:=form(SLO_OSOB.ID,-SLU.DL,,'1');
               {? REF.WFIRM
               || {? +_kod>5 || _kod:=_kod+5 ?};
                  _kod:=REF.S_FIRMA().SYMBOL+_kod
               ?};
               SLO.index(_ndx1); SLO.prefix(SLU.ref(),_kod,_kod);
               _zwrot:=SLO.first();
               ~_zwrot & SLU.next()
            !}
         ?};
         ~_zwrot & SLO_OSOB.next()
      !}
   ?};
   SLO_OSOB.cntx_pop()
?};
:: Słowniki o wzorcu Zleceniobiorca
{? ~_zwrot
|| SLO_OSOB.cntx_psh();
   SLO_OSOB.index(_ndx2); SLO_OSOB.prefix(OSOBA.ref());
   {? SLO_OSOB.first()
   || SLU.index('WZORZEC'); SLU.prefix('Zleceniobiorca');
      {! |?
         {? SLU.first()
         || {! |?
               _kod:=form(SLO_OSOB.ID,-SLU.DL,,'1');
               {? REF.WFIRM
               || {? +_kod>5 || _kod:=_kod+5 ?};
                  _kod:=REF.S_FIRMA().SYMBOL+_kod
               ?};
               SLO.index(_ndx1); SLO.prefix(SLU.ref(),_kod,_kod);
               _zwrot:=SLO.first();
               ~_zwrot & SLU.next()
            !}
         ?};
         ~_zwrot & SLO_OSOB.next()
      !}
   ?};
   SLO_OSOB.cntx_pop()
?};
SLO_OSOB.ndx_drop();
SLO.cntx_pop(); SLO.ndx_drop(); OS.cntx_pop(); SLU.cntx_pop();
_zwrot


\fir_odd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane kontrahenta są wykorzystywane w kartotece innej firmy po ODD
::   WE: _a - alias do wyniku testlinka
::       _b - alias do tabeli badanej
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
_b.cntx_psh(); _b.use(_a.MASKA); _b.prefix();
{? _b.seek(_a.REF,_a.MASKA)
|| ODD.cntx_psh(); ODD.prefix();
   _zwrot:=(_b.ODD & _b.ODD().FIRMA<>REF.FIRMA);
   ODD.cntx_pop()
?};
_b.cntx_pop();
_zwrot


\fir_wind
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane kontrahenta są wykorzystywane w kartotece innej firmy po ODD dla windykacji
::   WE: _a - alias do wyniku testlinka
::       _b - alias do tabeli badanej
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
_b.cntx_psh(); _b.use(_a.MASKA); _b.prefix();
{? _b.seek(_a.REF,_a.MASKA)
|| WIND_N.cntx_psh(); WIND_N.prefix();
   {? WIND_N.seek(#(_b.name()+4),WIND_N.name())
   || _zwrot:=(WIND_N.ODD & WIND_N.ODD().FIRMA<>REF.FIRMA)
   ?};
   WIND_N.cntx_pop()
?};
_b.cntx_pop();
_zwrot


\fir_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane kontrahenta są wykorzystywane w kartotece innej firmy
::   WE: _a - alias do wyniku testlinka
::       _b - alias do tabeli badanej
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
_b.cntx_psh(); _b.use(_a.MASKA); _b.prefix();
{? _b.seek(_a.REF,_a.MASKA)
|| _zwrot:=_b.FIRMA<>REF.FIRMA
?};
_b.cntx_pop();
_zwrot


\fir_ansl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane kontrahenta są wykorzystywane w AN_SLU innej firmy
::   WE: alias do wyniku testlinka dla SLO
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
AN_SLU.cntx_psh(); AN_SLU.use(_a.MASKA); AN_SLU.prefix();
{? AN_SLU.seek(_a.REF,_a.MASKA)
|| AN.cntx_psh(); AN.use('koan__'+(AN_SLU.name()+2)); AN.prefix();
   KH.cntx_psh(); KS.prefix();
   ROK_F.cntx_psh(); ROK_F.prefix();
   ODD.cntx_psh(); ODD.prefix();
   _zwrot:=(AN_SLU.AN().KS().ROK().FIRMA<>REF.FIRMA);
   ODD.cntx_pop(); KH.cntx_pop(); ROK_F.cntx_pop(); AN.cntx_pop()
?};
AN_SLU.cntx_pop();
_zwrot


\fir_edw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza, czy dane kontrahenta są wykorzystywane w EDOKUMW innej firmy
::   WE: alias do wyniku testlinka dla SLO
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
EDOKUMW.cntx_psh(); EDOKUMW.use(_a.MASKA); EDOKUMW.prefix();
{? EDOKUMW.seek(_a.REF,_a.MASKA)
|| EDOKUM.cntx_psh(); EDOKUM.use('skidv1'+(EDOKUM.name()+2));
   ODD.cntx_psh(); ODD.prefix();
   _zwrot:=(EDOKUMW.EDOKUM().ODD().FIRMA<>REF.FIRMA);
   ODD.cntx_pop(); EDOKUM.cntx_pop()
?};
EDOKUMW.cntx_pop();
_zwrot


\kh_odb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych
::       z odbiorcami kontrahenta.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;

_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;
_ret.STATUS:=0;

_Info:=exec('info','ro_ret');

{? _arg.SRC.TABELA=KH_ODB
|| KH_ODB.cntx_psh(); KH_ODB.prefix();
   {? KH_ODB.seek(_arg.SRC.REF)
   ||
      _size:=exec('ret_tl','ro_ret',KH_ODB,_arg,_Info);
      {? _ret.STATUS=0
      || {? _size<KH_ODB.count()
         || _ret.INFO:='Nie można usunąć odbiorcy bo jego dane przetwarzane w innej firmie.'
         ?}
      ?}
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono odbiorcy kontrahenta.'
   ?};
   KH_ODB.cntx_pop()
?};

_Info.inf_ret(_INFB,_ret);
~~


\kh_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych
::       z miescami dostaw kontrahenta.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;

_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;
_ret.STATUS:=0;

_Info:=exec('info','ro_ret');

{? _arg.SRC.TABELA=KH_MSC
|| KH_MSC.cntx_psh(); KH_MSC.prefix();
   {? KH_MSC.seek(_arg.SRC.REF)
   ||
      _size:=exec('ret_tl','ro_ret',KH_MSC,_arg,_Info);
      {? _ret.STATUS=0
      || {? _size<KH_MSC.count()
         || _ret.INFO:='Nie można usunąć odbiorcy bo jego dane przetwarzane w innej firmie.'
         ?}
      ?}
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono odbiorcy kontrahenta.'
   ?};
   KH_MSC.cntx_pop()
?};

_Info.inf_ret(_INFB,_ret);
~~


\han
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych
::       z handlowcami.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;

_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;
_ret.STATUS:=0;

_Info:=exec('info','ro_ret');

{? _arg.SRC.TABELA=HAN
|| HAN.cntx_psh(); HAN.prefix();
   {? HAN.seek(_arg.SRC.REF)
   ||
      exec('ret_tl','ro_ret',HAN,_arg,_Info);
      {? _ret.STATUS=0
      || {? exec('han_fir','ro_ret')
         || _ret.INFO:='Nie można usunąć handlowca bo jego dane przetwarzane w innej firmie.'
         ?}
      ?}
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono odbiorcy kontrahenta.'
   ?};
   HAN.cntx_pop()
?};

_Info.inf_ret(_INFB,_ret);
~~


\han_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Formuła sprawdza, czy dane handlowca są wykorzystywane w innej firmie
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
{? REF.WFIRM<>0 & KH.count()>0
|| _Tl:=HAN.testlink();
   {? HAN.count()<>_Tl.size()
   || _zwrot:=1
   || {? _Tl.first()
      || {! |?
            {? _Tl.TABELA='DOK' | _Tl.TABELA='EDOKUM'
            || _zwrot:=exec('fir_odd','ro_ret',_Tl,($_Tl.TABELA)())
            ?};
            ~_zwrot & _Tl.next()
         !}
      ?}
   ?}
?};
_zwrot


\ret_faks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Sprawdza czy upłynęło 5 pełnych lat od końca roku, w którym zarejestrowano dokument _b.
::       Jeśli faktura nie jest zaksięgowania lub nie ma systemu FK - to można domyślać się okresu VAT na podstawie
::       dat z faktury:
::       - dla sprzedaży krajowej, importu usług: od daty dostawy towaru, daty operacji;
::       - dla WDT i faktur zaliczkowych w dacie wystawienia;
::       - dla WNT - okres następny po dacie dostawy;
::       - dla faktur zakupu - okres VAT wyznaczany jest datą otrzymania faktury - w miesiącu tej daty lub
::         w następnym (można przyjąc że następnym - bo wtedy okres przechowywania dłuższy).
::   WE: _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::       _b - uchwyt do tabeli o strukturze zwracanej przez testlink - tabela ustawiona na pozycji do przetworzenia
::       _c - uchwyt do obiektu obsługującego komunikaty retencji
::       _d - uchwyt do tabeli
::   WY: 1 - nie upłynął wymagazny czas, 0 - upłynął wymagany czas
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_Tl:=_b;
_Info:=_c;
_Tab2tl:=_d;

_result:=0;

FAKS.cntx_psh();
FAKS.use(_Tl.MASKA);
FAKS.cntx_psh();
FAKS.prefix();
{? FAKS.seek(_Tl.REF,) & FAKS.ZAK='N'
||
   {? FAKS.ZAK='T' & (_Tab2tl=KH_ODB | _Tab2tl=KH_MSC)
   ||
::    dokument zaksięgowany
      _maska:=exec('maska','dok_fks_aut_dok','F');
      _Dok:=sql($"
         select DOK.REFERENCE as REF
         from @DOK join DOK_REJ
         where DOK.DOKZRODL=':_a'",_maska);

      {? _Dok.first()
      ||
         _ref:=BB.sqlint(_Dok.REF);
         _maska:=8+_Dok.REF;
         _result:=exec('ret_dok','ro_ret',_arg,_ref,_maska,_Info,'T')
      ?}
   |? FAKS.ZAK='N'
   ||
::    dokument niezaksięgowany
      _ilm:=0;
      _dz:=exec('faks_dz','ro_ret');
      _ily:=5+#exec('get_par','#parametr',502,2);
      {? _dz<>date(0,0,0)
      ||
         _opis:=
            {? FAKS.SZ='S'
            || 'Faktura VAT z najpóźniejszym zobowiązaniem podatkowym'
            || 'Faktura VAT zakupów (nie magazynowych) z najpóźniejszym zobowiązaniem podatkowym'
            ?};
         _info:='Symbol: '+FAKS.SYM
            +' Data wystawienia: '+form(FAKS.DW)
            +' Data operacji: '+form({? FAKS.DO<>date(0,0,0) || FAKS.DO || FAKS.D ?})
            +' Data zobowiązania: '+form(exec('faks_dz','ro_ret'));
         _dz1:=date((_dz~1)+_ily,12,31)+1;
         _result:=_dz1>_arg.DATA;
         _Info.ret(_dz,_opis,_info,_result,_dz1)
      ?}
   ?}
?};
FAKS.cntx_pop();
FAKS.cntx_pop();
_result


\faks_dz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Data zobowiązania faktury znajdującej się w buforze tabel FAKS
::   WE:
::   WY: data zobowiązania
::----------------------------------------------------------------------------------------------------------------------
_dz:=date(0,0,0);
_ilm:=1;
FAKS.T();
{? FAKS.SZ='S'
||
:: dokument sprzedaży
   {? TYPYSP.UE='N' & TYPYSP.ZAL='N'
   ||
::    nie UE i niezaliczkowy
      _dz:=FAKS.D
   ||
::    UE lub zaliczkowy
      _dz:=FAKS.DW
   ?}
|? FAKS.SZ='Z'
||
:: dokument zakupu
   {? TYPYSP.ZAL='N' & TYPYSP.UE='N'
   ||
::    niezaliczkowy i nie UE
      _dz:=FAKS.DO;
      _ilm:=2
   ||
::    zaliczkowe i UE
      _dz:=FAKS.DW
   ?}
?};
{? _dz<>date(0,0,0)
||
   _mc:=_dz~2+_ilm;
   _dz:=
      {? _mc>12
      || date(_dz~1+1,_mc-12,0)
      || date(_dz~1,_mc,0)
      ?}
?};
_dz


\ret_pw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza retencję dla tabeli PW
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::        _b - alias do wyniku testlinka
::   WY: 0/1 - jest spełniona retencja / nie jest spełniona retencja
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_zwrot:=0;
_Info:=_c;
_ilelat:=#exec('get_par','#parametr',502,2);
PW.cntx_psh(); PW.use(_b.MASKA); PW.prefix();
{? PW.seek(_b.REF,_b.MASKA)
|| _Info.TABELA:='PW';
   _Info.SLO:='N';
   ODD.cntx_psh(); ODD.prefix();
   _data:=date((PW.DK~1)+5+_ilelat,12,31);
   {? PW.ODD & PW.ODD().FIRMA=REF.FIRMA & PW.DK<>date(0,0,0)
   || {? _data>_arg.DATA || _zwrot:=1 ?};
      _opis:='Pozycja wyciągu bankowego z najpóźniejszą datą realizacji';
      _info:='Data wyciągu: '+$PW.DK+
             ' Rachunek kontrahenta: '+PW.RBK+
             ' Tytuł: '+PW.TYTOP;
      _Info.ret(PW.DK,_opis,_info,_zwrot,_data)
   ?};
   ODD.cntx_pop()
?};
PW.cntx_pop();
_zwrot


\ret_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza retencję dla tabeli PB
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::        _b - ref
::        _c - maska
::   WY: 0/1 - jest spełniona retencja / nie jest spełniona retencja
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_zwrot:=0;
_Info:=_d;
_ilelat:=#exec('get_par','#parametr',502,2);
PB.cntx_psh(); PB.use(_c); PB.prefix();
{? PB.seek(_b,_c)
|| _Info.TABELA:='PB';
   _Info.SLO:='N';
   ODD.cntx_psh(); ODD.prefix();
   _data:=date((PB.DZ~1)+5+_ilelat,12,31);
   {? PB.ODD & PB.ODD().FIRMA=REF.FIRMA & PB.DZ<>date(0,0,0)
   || {? _data>_arg.DATA || _zwrot:=1 ?};
      _opis:='Zlecenie przelewu z najpóźniejszą datą realizacji';
      _info:='Data przelewu: '+$PB.DP+
             ' Rachunek kontrahenta: '+PB.RW+
             ' Tytuł: '+PB.TYT;
      _Info.ret(PB.DZ,_opis,_info,_zwrot,_data)
   ?};
   ODD.cntx_pop()
?};
PB.cntx_pop();
_zwrot


\ret_udt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza retencję dla tabeli UDT
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::        _b - alias do wyniku testlinka
::   WY: 0/1 - jest spełniona retencja / nie jest spełniona retencja
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_zwrot:=0;
_Info:=_c;
_ilelat:=#exec('get_par','#parametr',502,2);
UDT.cntx_psh(); UDT.use(_b.MASKA); UDT.prefix();
{? UDT.seek(_b.REF,_b.MASKA)
|| _Info.TABELA:='UDT';
   _Info.SLO:='N';
   ODD.cntx_psh(); ODD.prefix();
   {? UDT.FIRMA=REF.FIRMA
   || {? UDT.DATAZ=date(0,0,0)
      || _data:=date(2100,12,31); _zwrot:=1;
         _dataz:=date(2100,12,31)
      || _data:=date((UDT.DATAZ~1)+5+_ilelat,12,31);
         _zwrot:=_data>_arg.DATA;
         _dataz:=UDT.DATAZ
      ?};
      _opis:='Umowa długoterminowa z najpóźniejszą datą zamknięcia';
      _info:='Kod umowy: '+UDT.KOD+
             ' Data rozpoczęcia: '+$UDT.DATAO+
             ' Data zakończenia: '+$UDT.DATAZ;
      _Info.ret(_dataz,_opis,_info,_zwrot,_data)
   ?};
   ODD.cntx_pop()
?};
UDT.cntx_pop();
_zwrot


\ret_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza retencję dla tabeli OP
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::        _b - alias do wyniku testlinka
::   WY: 0/1 - jest spełniona retencja / nie jest spełniona retencja
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_zwrot:=0;
_Info:=_c;
_ilelat:=#exec('get_par','#parametr',502,2);
OP.cntx_psh(); OP.use(_b.MASKA); OP.prefix();
{? OP.seek(_b.REF,_b.MASKA)
|| _Info.TABELA:='OP';
   _Info.SLO:='N';
   ODD.cntx_psh(); ODD.prefix();
   {? OP.ODD & OP.ODD().FIRMA=REF.FIRMA
   || {? OP.WN<>OP.MA
      || _zwrot:=1
      || ZAP_OP.cntx_psh(); ZAP_OP.use('rozzap'+(OP.name()+2));
         ZAP_OP.index('OP'); ZAP_OP.prefix(OP.ref());
         {? ZAP_OP.last()
         || _data:=date((ZAP_OP.DATA~1)+5+_ilelat,12,31);
            _zwrot:=_data>_arg.DATA;
            _opis:='Rozrachunek z najpóźniejszą datą rozliczenia';
            _info:='Symbol: '+OP.SYM+
                   ' Data otwarcia: '+$OP.DO+
                   ' Termin płatności: '+$OP.TZ+
                   ' Data rozliczenia: '+$ZAP_OP.DATA;
            _Info.ret(ZAP_OP.DATA,_opis,_info,_zwrot,_data)
         ?};
         ZAP_OP.cntx_pop()
      ?}
   ?};
   ODD.cntx_pop()
?};
OP.cntx_pop();
_zwrot


\ret_edk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza retencję dla tabeli EDOKUM
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::        _b - ref rekordu (INTEGER)
::        _c - maska EDOKUM
::        _d - _Info
::        _e - dotyczy SLO
::   WY: 0/1 - jest spełniona retencja / nie jest spełniona retencja
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_zwrot:=0;
_Info:=_d;
_Info.TABELA:='EDOKUM';
_Info.SLO:=_e;
_ilelat:=#exec('get_par','#parametr',502,2);
{? ~exec('a_lic','zam_okr_rok','FKS')
|| EDOKUM.cntx_psh(); EDOKUM.use(_c); EDOKUM.prefix();
   {? EDOKUM.seek(_b,_c)
   || ODD.cntx_psh(); ODD.prefix();
      {? EDOKUM.ODD & EDOKUM.ODD().FIRMA=REF.FIRMA & EDOKUM.TYPOBIEG().NAZWA='Obieg faktur'
      || _datad:={? EDOKUM.DO<>date(0,0,0) || EDOKUM.DO || EDOKUM.DOP ?};
         {? _datad<>date(0,0,0)
         || _data:=date(((_datad+60)~1)+5+_ilelat,12,31);
            {? _data>_arg.DATA || _zwrot:=1 ?};
            _opis:='Faktura VAT w obiegu z najpóźniejszym zobowiązaniem podatkowym';
            _info:='Symbol: '+EDOKUM.SYM+
                   ' Data wystawienia: '+$EDOKUM.DW+
                   ' Data otrzymania: '+$EDOKUM.DO+
                   ' Data zobowiązania: '+$_data;
            _Info.ret(_datad,_opis,_info,_zwrot,_data)
         ?}
      ?};
      ODD.cntx_pop()
   ?};
   EDOKUM.cntx_pop()
?};
_zwrot


\ret_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza retencję dla tabeli DOK
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::        _b - ref
::        _c - maska
::        _d - _Info
::        _e - SLO (T/N)
::   WY: 0/1 - jest spełniona retencja / nie jest spełniona retencja
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_zwrot:=0;
_Info:=_d;
_Info.TABELA:='DOK';
_Info.SLO:=_e;
_ilelat:=#exec('get_par','#parametr',502,2);
DOK.cntx_psh(); DOK.use(_c); DOK.prefix();
{? DOK.seek(_b,_c)
|| ODD.cntx_psh(); ODD.prefix();
   {? DOK.ODD & DOK.ODD().FIRMA=REF.FIRMA & DOK.DTW<>date(0,0,0)
   || _datad:=date(0,0,0); _okrvat:='brak';
      {? DOK.OKRVAT
      || OKRO_F.cntx_psh(); OKRO_F.prefix();
         DOK.OKRVAT();
         {? DOK.OKRVAT().KON<>date(0,0,0) || _datad:=DOK.OKRVAT().KON; _okrvat:=OKRO_F.NAZ ?};
         OKRO_F.cntx_pop()
      ?};
      {? _datad=date(0,0,0) || _datad:=DOK.DTW ?};
      _data:=_datad+60;
      {? _datad<>date(0,0,0)
      || _ily:={? _data~2<12 || 5 || 6 ?}+_ilelat;
         _data:=date((_data~1)+_ily,12,31);
         _zwrot:=(_data>_arg.DATA);
         _opis:='Faktura VAT z najpóźniejszym zobowiązaniem podatkowym';
         _info:='Symbol: '+DOK.NK+
                ' Data operacji: '+$DOK.DTW+
                ' Okres VAT: '+_okrvat+
                ' Data zobowiązania: '+$_data;
         _Info.ret(_datad,_opis,_info,_zwrot,_data)
      ?}
   ?};
   ODD.cntx_pop()
?};
DOK.cntx_pop();
_zwrot


\ret_dokm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła sprawdza retencję dla tabeli DOKUM
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::        _b - ref
::        _c - maska
::        _d - _Info
::   WY: 0/1 - jest spełniona retencja / nie jest spełniona retencja
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_zwrot:=0;
_Info:=_d;
_Info.TABELA:='DOKUM';
_Info.SLO:='N';
_ilelat:=#exec('get_par','#parametr',502,2);
_ilemc:=#exec('get_par','#parametr',505,2);
DOKUM.cntx_psh();
DOKUM.use(_c);
DOKUM.cntx_psh();
DOKUM.prefix();
{? DOKUM.seek(_b,_c)
|| ODD.cntx_psh(); ODD.prefix();
   KH.cntx_psh();
   _potencjalny:=0;
   _popis:='';
   {? DOKUM.KH
   || _potencjalny:=DOKUM.KH().P=1;
      _popis:=KH.POPIS
   ?};
   KH.cntx_pop();
   {? DOKUM.FIRMA & DOKUM.FIRMA=REF.FIRMA & DOKUM.DATA<>date(0,0,0)
   ||
      {? _potencjalny
      ||
         _data:=date(DOKUM.DATA~1,DOKUM.DATA~2,0);
         {! _ii:=1.._ilemc
         |!
            _data:=date(_data~1,_data~2,0)+1
         !};
         _data:=date(_data~1,_data~2,0)
      ||
         _data:=date((DOKUM.DATA~1)+5+_ilelat,12,31)
      ?};
      {? _data>_arg.DATA || _zwrot:=1 ?};
      _opis:='Zdarzenie kontaktu z najpóźniejszą datą';
      _info:='Data zdarzenia: '+$DOKUM.DATA+
             ' Rodzaj zdarzenia: '+$DOKUM.DOT().ZDARZ+
             ' Osoba kontaktowa: '+DOKUM.OSOBA+
             {? _popis='' || '' || ' Status kontrahenta: '+_popis ?};
      _Info.ret(DOKUM.DATA,_opis,_info,_zwrot,_data)
   ?};
   ODD.cntx_pop()
?};
DOKUM.cntx_pop();
DOKUM.cntx_pop();
_zwrot


\ret_ans
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.42]
:: OPIS: Formuła sprawdza retencję dla tabeli AN_SLU
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::        _b - ref rekordu
::        _c - maska rekordu
::        _d - Info
::        _e - SLO (T/N)
::   WY: 0/1 - jest spełniona retencja / nie jest spełniona retencja
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_zwrot:=0;
_Info:=_d;
_Info.TABELA:='AN_SLU';
_Info.SLO:=_e;
_ilelat:=#exec('get_par','#parametr',502,2);
AN_SLU.cntx_psh(); AN_SLU.use(_c); AN_SLU.prefix();
{? AN_SLU.seek(_b,_c)
|| AN.cntx_psh(); AN.use('koan__'+(AN_SLU.name()+2)); AN.prefix();
   KH.cntx_psh(); KS.prefix();
   ROK_F.cntx_psh(); ROK_F.prefix();
   ODD.cntx_psh(); ODD.prefix();
   {? AN_SLU.AN().KS().ROK().FIRMA=REF.FIRMA
   || _ndx1:=ROK_F.ndx_tmp(,1,'KOD',,0);
      ROK_F.cntx_psh(); ROK_F.index(_ndx1); ROK_F.prefix(AN_SLU.name()+2);
      OKRO_F.cntx_psh(); OKRO_F.index('ROK'); OKRO_F.prefix(ROK_F.ref());
      {? OKRO_F.first()
      || DOK.cntx_psh(); POZ.cntx_psh();
         _ndx2:=POZ.ndx_tmp(,1,'KON',,0);
         {! |?
            _maska:=ROK_F.KOD+form(OKRO_F.NR,-2);
            DOK.use('doku'+_maska); DOK.prefix();
            POZ.use('pozy'+_maska); POZ.index(_ndx2); POZ.prefix(AN.SYM);
            {? POZ.first()
            || {! |?
                  POZ.DOK();
                  {? DOK.ODD & DOK.ODD().FIRMA=REF.FIRMA & DOK.DTW<>date(0,0,0)
                  || _data:=date((DOK.DTW~1)+5+_ilelat,12,31);
                     {? _zwrot=0
                     || _zwrot:=_data>_arg.DATA
                     ?};
                     _opis:='Zapis księgowy z najpóźniejszą datą';
                     _info:='Data zapisu: '+$DOK.DTW;
                     _Info.ret(DOK.DTW,_opis,_info,_zwrot,_data)
                  ?};
                  POZ.next()
               !}
            ?};
            OKRO_F.next()
         !};
         DOK.cntx_pop(); POZ.cntx_pop(); POZ.ndx_drop()
      ?};
      OKRO_F.cntx_pop(); ROK_F.cntx_pop();
      ROK_F.ndx_drop()
   ?};
   ODD.cntx_pop(); KH.cntx_pop(); ROK_F.cntx_pop(); AN.cntx_pop()
?};
AN_SLU.cntx_pop();
_zwrot


\ret
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Sprawdza czy upłynęło wymagany okres przechowywania dokumentu _b.
::   WE: _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::       _b - uchwyt do tabeli w buforze której znajduje się dokument do sprawdzenia (struktura bufora wg testlink)
::       _c - uchwyt do tabeli źródłowej
::       _d - formuła z dodatkowym warunkiem, który musi spełniać rekord w tabeli źródłowej
::       _e - formuła zwracająca datę do sprawdzenia
::       _f - ilość lat, które powinny upłynąć
::       _g - 0-_f lat od daty _e, 1-_f lat od końca roku wynikającym z _e
::       _h - uchwyt do obiektu obsługującego komunikaty retencji
::   WY: 1 - nie upłynął wymagazny czas, 0 - upłynął wymagany czas
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_Tl:=_b;
_Tab:=_c;
_cond:=_d;
_val:=_e;
_y_il:=_f+#exec('get_par','#parametr',502,2);
_y_end:=_g;
_Info:=_h;

_result:=0;

_dz:=date(0,0,0);

_Tab.cntx_psh();
_Tab.use(_Tl.MASKA);
_Tab.cntx_psh();
_Tab.prefix();
{? _Tab.seek(_Tl.REF,) & _cond()
||
   _dz:=_val();
   _dz1:=
      {? _dz=date(0,0,0)
      || date(0,0,0)
      |? _y_end
      || date((_dz~1)+_y_il,12,31)+1
      || date((_dz~1)+_y_il,_dz~2,_dz~3)+1
      ?};
   {? _dz<>date(0,0,0)
   ||
      _opis:=_info:='';
      {? _Tab=ND
      || _opis:='Dokument magazynowy z najpóźniejszą datą wystawienia';
         _info:='Typ: '+ND.TYP().T+' - '+TYPYDOK.NAZ
            +' Symbol: '+form(ND.SYM)
            +' Data wystawienia: '+form(ND.D)
      |? _Tab=OFE
      || _opis:='Oferta dla kontrahenta z najpóźniejszą datą zamknięcia';
         _info:='Symbol: '+OFE.SYM
            +' Data oferty: '+form(OFE.DU)
            +' Data ważności: '+form(OFE.TW)
      |? _Tab=ZK_N
      || _opis:='Zamówienie od kontrahenta z najpóźniejszą datą zamknięcia';
         _info:='Symbol: '+ZK_N.SYM
            +' Data zamówienia: '+form(ZK_N.DP)
            +' Data zamknięcia: '+form(ZK_N.DT)
      |? _Tab=ZD_NAG
      || _opis:='Zamówienie do kontrahenta z najpóźniejszą datą zamknięcia';
         _info:='Symbol: '+ZD_NAG.SYM
            +' Data zamówienia: '+form(ZD_NAG.DATA)
            +' Data zamknięcia: '+form(ZD_NAG.DTPREAL)
      |? _Tab=PROJEKTY
      || _opis:='Projekt z najpóźniejszą datą zamknięcia';
         _info:='Symbol: '+PROJEKTY.SYM
            +' Data umowy: '+form(PROJEKTY.RDATA_OD)
            +' Data zakończenia: '+form(
               {? PROJEKTY.DAT_ZAM<>date(0,0,0) || PROJEKTY.DAT_ZAM
               |? PROJEKTY.RDATA_DO<>date(0,0,0) || PROJEKTY.RDATA_DO
               || PROJEKTY.D_ADD
               ?})
      |? _Tab=ZL
      || _opis:='Zlecenie produkcyjne z najpóźniejszą datą';
         _info:='Symbol: '+ZL.SYM
            +' Data zlecenia: '+form(ZL.OD)
            +' Opis: '+ZL.OPIS
      |? _Tab=UM
      || _opis:='Umowa na usługi cykliczne z najpóźniejszą datą zamknięcia';
         _info:='Symbol: '+UM.SYM
            +' Data umowy: '+form(UM.OD)
            +' Data zakończenia: '+form(UM.DO)
      |? var_pres('KPO')>0 & _Tab=KPO
      || _opis:='Najpóźniejsza karta przekazania odpadów';
         _info:='Symbol: '+KPO.SYM
            +' Rok: '+form(KPO.AR,,,'99')
            +' Miesiąc: '+form(KPO.AM)
      ?};
      _result:=_dz1>_arg.DATA;
      {? _opis<>'' & _info<>'' || _Info.ret(_dz,_opis,_info,_result,_dz1) ?}
   ?}
?};
_Tab.cntx_pop();
_Tab.cntx_pop();
_result


\ret_tl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Sprawdzenie retencji dla rekordu znajdującego się w buforze tabeli _a
::   WE: _a - uchwyt do tabeli
::       _b  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::       _c - uchwyt do obiektu obsługującego komunikaty retencji
::   WY: ilość powiązanych rekordów do rekordu w buforze tabeli _a
::----------------------------------------------------------------------------------------------------------------------
_Tab2tl:=_a;
_arg:=_b;
_Info:=_c;

_ret:=_arg.RET;
{? _Tab2tl.count()>0
|| _Tl:=_Tab2tl.testlink();
   {? _Tl.first()
   || _Info.SLO:='N';
      _loop:=_Tl.first();
      {!
      |? _loop
      |! _Info.TABELA:=_Tl.TABELA;
         _status:=_ret.STATUS;
         {? _Tl.TABELA='OP'
         || _ret.STATUS:=exec('ret_op','ro_ret',_arg,_Tl,_Info)
         |? _Tl.TABELA='EDOKUM'
         || _ret.STATUS:=exec('ret_edk','ro_ret',_arg,_Tl.REF,_Tl.MASKA,_Info,'N')
         |? _Tl.TABELA='UDT'
         || _ret.STATUS:=exec('ret_udt','ro_ret',_arg,_Tl,_Info)
         |? _Tl.TABELA='PB'
         || _ret.STATUS:=exec('ret_pb','ro_ret',_arg,_Tl.REF,_Tl.MASKA,_Info)
         |? _Tl.TABELA='PW'
         || _ret.STATUS:=exec('ret_pw','ro_ret',_arg,_Tl,_Info)
         |? _Tl.TABELA='DOKUM'
         || _ret.STATUS:=exec('ret_dokm','ro_ret',_arg,_Tl.REF,_Tl.MASKA,_Info)
         |? _Tl.TABELA='FAKS'
         || _ret.STATUS:=exec('ret_faks','ro_ret',_arg,_Tl,_Info,_Tab2tl);
            _ret.INFO:='W systemie są dokumenty sprzedaży/zakupu.'
         |? _Tl.TABELA='KPO'
         || _ret.STATUS:=exec('ret','ro_ret',_arg,_Tl,KPO,"1","date(KPO.AR,KPO.AM,1)",5,1,_Info);
            _ret.INFO:='W systemie są karty przekazania odpadów.'
         |? _Tl.TABELA='ND'
         || _zak:=exec('FindAndGet','#table',ND,_Tl.REF,_Tl.MASKA,"ND.ZAK",'');
            {? _zak='T' & (_Tab2tl=KH_ODB | _Tab2tl=KH_MSC)
            ||
::             dokument zaksięgowany
               _maska:=exec('FindAndGet','#table',ND,_Tl.REF,_Tl.MASKA,"exec('maska','dok_fks_aut_dok','M')",'');
               {? _maska<>''
               ||
                  _Dok:=sql($"
                     select DOK.REFERENCE as REF
                     from @DOK join DOK_REJ
                     where DOK.DOKZRODL=':_a'",_maska);
                  {? _Dok.first()
                  || _ref:=BB.sqlint(_Dok.REF);
                     _maska:=8+_Dok.REF;
                     _ret.STATUS:=exec('ret_dok','ro_ret',_arg,_ref,_maska,_Info,'T')
                  ?};
                  obj_del(_Dok)
               ?}

            |? _zak='N'
            ||
::             dokument niezaksięgowany
               _ret.STATUS:=exec('ret','ro_ret',_arg,_Tl,ND,"ND.ZAK='N'","ND.D",5,1,_Info);
               _ret.INFO:='W systemie są dokumenty magazynowe.'
            ?}
         |? _Tl.TABELA='OFE'
         || _ret.STATUS:=exec('ret','ro_ret',_arg,_Tl,OFE,"1","OFE.TW",5,1,_Info);
            _ret.INFO:='W systemie są oferty dla kontrahenta.'
         |? _Tl.TABELA='ZK_N'
         || _ret.STATUS:=exec('ret','ro_ret',_arg,_Tl,ZK_N,"1","ZK_N.DT",5,1,_Info);
            _ret.INFO:='W systemie są zamówienia od kontrahenta.'
         |? _Tl.TABELA='ZD_NAG'
         || _ff:="{? ZD_NAG.DTPREAL=date(0,0,0) || ZD_NAG.DATA || ZD_NAG.DTPREAL ?}";
            _ret.STATUS:=exec('ret','ro_ret',_arg,_Tl,ZD_NAG,"1",_ff,5,1,_Info);
            _ret.INFO:='W systemie są zamówienia do kontrahenta.'
         |? _Tl.TABELA='PROJEKTY'
         || _ff:="
               {? PROJEKTY.DAT_ZAM<>date(0,0,0) || PROJEKTY.DAT_ZAM
               |? PROJEKTY.RDATA_DO<>date(0,0,0) || PROJEKTY.RDATA_DO
               || PROJEKTY.D_ADD
               ?}";
            _ret.STATUS:=exec('ret','ro_ret',_arg,_Tl,PROJEKTY,"1",_ff,5,1,_Info);
            _txt:={? _Tab2tl=KH || 'kontrahenta' || 'osoby' ?};
            _ret.INFO:='W systemie są projekty dotyczące '+_txt+'.'
         |? _Tl.TABELA='ZL'
         || _ret.STATUS:=exec('ret','ro_ret',_arg,_Tl,ZL,"1","ZL.OD",5,1,_Info);
            _ret.INFO:='W systemie są zlecenia dotyczące kontrahenta.'
         |? _Tl.TABELA='UM'
         || _ret.STATUS:=exec('ret','ro_ret',_arg,_Tl,UM,"1","UM.DO",5,1,_Info);
            _ret.INFO:='W systemie są umowy dotyczące kontrahenta.'
         ?};
         _ret.STATUS:=
            {? _ret.STATUS<0 || _ret.STATUS
            |? _ret.STATUS>_status || _ret.STATUS
            || _status
            ?};
         _loop:=_ret.STATUS>=0 & _Tl.next()
      !}
   ?};
   _Tl.size()
|| 0
?}


\vat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych VAT-em
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;
_ret.STATUS:=0;
_Info:=exec('info','ro_ret');
{? _arg.SRC.TABELA=DOK
|| DOK.cntx_psh(); DOK.use(_arg.SRC.MASKA); DOK.prefix();
   {? DOK.seek(_arg.SRC.REF)
   || DOK.cntx_psh();
      ROK_F.cntx_psh(); ROK_F.index('KOD'); ROK_F.prefix(REF.FIRMA);
      OKRO_F.cntx_psh(); OKRO_F.index('ROK');
      {? ROK_F.first()
      || _ndx:=DOK.ndx_tmp(,1,'NIP',,0); _nip:=DOK.NIP;
         {! |?
            OKRO_F.prefix(ROK_F.ref());
            {? OKRO_F.first()
            || {! |?
                  DOK.use('doku'+ROK_F.KOD+form(OKRO_F.NR,-2)); DOK.index(_ndx); DOK.prefix(_nip,);
                  {? DOK.first()
                  || {! |?
                        _status:=_ret.STATUS;
                        _ret.STATUS:=exec('ret_dok','ro_ret',_arg,#DOK.ref(),DOK.name(),_Info,'N');
                        _ret.STATUS:={? _ret.STATUS<0 || _ret.STATUS
                                     |? _ret.STATUS>_status || _ret.STATUS
                                     || _status
                                     ?};
                        _ret.STATUS>=0 & DOK.next()
                     !}
                  ?};
                  _ret.STATUS>=0 & OKRO_F.next()
               !}
            ?};
            _ret.STATUS>=0 & ROK_F.next()
         !}
      ?};
      ROK_F.cntx_pop(); DOK.cntx_pop(); OKRO_F.cntx_pop();
      DOK.ndx_drop()
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono dokumentu księgowego.'
   ?};
   DOK.cntx_pop()
?};
_Info.inf_ret(_INFB,_ret);
~~


\kh_osob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Formuła określa datę, po której możliwe jest/będzie zapomnienie danych osobowych związanych
::       z osobami kontaktowymi.
::   WE:  _a  [ARRAY]  - Tablica elementów nazwanych określająca parametry działania (patrz metryka pliku).
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;
_RODO:=_arg.RODO;
_INFB:=_arg.INFB;
_ret:=_arg.RET;
_ret.STATUS:=0;
_Info:=exec('info','ro_ret');
_ilelat:=#exec('get_par','#parametr',502,2);
{? _arg.SRC.TABELA=KH_OSOB
|| KH_OSOB.cntx_psh(); KH_OSOB.prefix();
   {? KH_OSOB.seek(_arg.SRC.REF)
   ||
      _Names:=DOKUM.names();
::    kontakty wg DOKUM.KH_OSOB
      DOKUM.cntx_psh();
      _loop:=_Names.first();
      {!
      |? _loop
      |!
         DOKUM.use(_Names.NAME);
         DOKUM.cntx_psh();
         DOKUM.index('KHOK');
         DOKUM.prefix(REF.FIRMA,KH_OSOB.KH,KH_OSOB.ref());
         _loop:=DOKUM.first();
         {!
         |? _loop
         |!
            _Info.TABELA:='DOKUM';
            _status:=_ret.STATUS;
            _ret.STATUS:=exec('ret_dokm','ro_ret',_arg,#DOKUM.ref(),DOKUM.name(),_Info);
            _ret.STATUS:=
               {? _ret.STATUS<0 || _ret.STATUS
               |? _ret.STATUS>_status || _ret.STATUS
               || _status
               ?};
            _loop:=_ret.STATUS>=0 & DOKUM.next()
         !};
         DOKUM.cntx_pop();
         _loop:=_Names.next()
      !};
      DOKUM.cntx_pop();
::    kontakty wg DOKUM.OSOB
      {? KH_OSOB.KH & KH_OSOB.NAZWISKO<>'' & KH_OSOB.IMIE<>''
      ||
         _ndx:=DOKUM.ndx_tmp(,1,'FIRMA',,0,'KH',,0,'OSOBA',,0);
         DOKUM.cntx_psh();
         _loop:=_Names.first();
         {!
         |? _loop
         |!
            DOKUM.use(_Names.NAME);
            DOKUM.cntx_psh();
            DOKUM.index(_ndx); DOKUM.prefix(REF.FIRMA,KH_OSOB.KH,KH_OSOB.NAZWISKO+' '+KH_OSOB.IMIE);
            {? DOKUM.first()
            || {! |?
                  _status:=_ret.STATUS;
                  _ret.STATUS:=exec('ret_dokm','ro_ret',_arg,#DOKUM.ref(),DOKUM.name(),_Info);
                  _data:=date((DOKUM.DATA~1)+5+_ilelat,12,31);
                  {? _data>_arg.DATA || _ret.STATUS:=1 ?};
                  _opis:='Zdarzenie kontaktu z najpóźniejszą datą';
                  _info:='Data zdarzenia: '+$DOKUM.DATA+
                         ' Rodzaj zdarzenia: '+$DOKUM.DOT().ZDARZ+
                         ' Osoba kontaktowa: '+DOKUM.OSOBA;
                  _Info.ret(DOKUM.DATA,_opis,_info,_ret.STATUS,_data);
                  _ret.STATUS:={? _ret.STATUS<0 || _ret.STATUS
                               |? _ret.STATUS>_status || _ret.STATUS
                               || _status
                               ?};
                  _ret.STATUS>=0 & DOKUM.next()
               !}
            ?};
            DOKUM.cntx_pop();
            _loop:=_Names.next()
         !};
         DOKUM.cntx_pop();
         DOKUM.ndx_drop()
      ?}
   || _ret.STATUS:=-1;
      _ret.INFO:='Nie znaleziono osoby kontaktowej.'
   ?};
   KH_OSOB.cntx_pop()
?};
_Info.inf_ret(_INFB,_ret);
~~


\info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.22]
:: OPIS: Obsługa komunikatów retencji
::   WE:
::   WY: uchwyt do tabeli obsługującej komunikaty
::----------------------------------------------------------------------------------------------------------------------
_Info:=obj_new('SLO','TABELA','TAB','ret','inf_ret');
_Info.TAB:=tab_tmp(2
   ,'SLO'   ,'STRING[1]'   ,'SLO'
   ,'TABELA','STRING[8]'   ,'Tabela'
   ,'DATA'  ,'DATE'        ,'Data'
   ,'DZ'    ,'DATE'        ,'Data zapomnienia'
   ,'OPIS'  ,'STRING[255]' ,'Opis'
   ,'INFO'  ,'STRING[255]' ,'Info'
   ,'STATUS','INTEGER'     ,'Status');
_Info.ret:="
   _d:={? var_pres('_d')=type_of(0) || _d || 1 ?};
   _e:={? var_pres('_e')=type_of(date()) || _e || _a ?};
   {? .TAB.find_key(.SLO,.TABELA)
   || {? .TAB.DATA<_a
      || .TAB.DATA:=_a;
         .TAB.DZ:=_e;
         .TAB.OPIS:=_b;
         .TAB.INFO:=_c;
         .TAB.STATUS:=.TAB.STATUS | _d;
         .TAB.put()
      ?}
   || .TAB.SLO:=.SLO;
      .TAB.TABELA:=.TABELA;
      .TAB.DATA:=_a;
      .TAB.DZ:=_e;
      .TAB.OPIS:=_b;
      .TAB.INFO:=_c;
      .TAB.STATUS:=_d;
      .TAB.add()
   ?}
";
_Info.inf_ret:="
   _INFB:=_a;
   _ret:=_b;
   _loop:=.TAB.first();
   {!
   |? _loop
   |!
      exec('ins_infb','ro_cfg',_INFB,'[TABELA]',.TAB.OPIS);
      exec('ins_infb','ro_cfg',_INFB,'[TEKST]',.TAB.INFO);
      exec('inf_ret','rodo',_INFB,.TAB.DZ,~.TAB.STATUS);
      _loop:=.TAB.next()
   !}
";
_Info


\kh_osob_fir
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [21.14]
:: OPIS: Formuła sprawdza, czy dane osoby kontaktowej kontrahenta są wykorzystywane w innej firmie
::   WY: 1/0 - są wykorzystywane / nie są
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0;
{? REF.WFIRM<>0
|| {? KH_OSOB.count()
   || _Tl:=KH_OSOB.testlink();
      {? KH_OSOB.count()<>_Tl.size()
      || _zwrot:=1
      || {? _Tl.first()
         || {? _Tl.first()
            || {! |?
                  {? _Tl.TABELA='DOKUM'
                  || _zwrot:=exec('fir_tab','ro_ret',_Tl,($_Tl.TABELA)())
                  ?};
                  ~_zwrot & _Tl.next()
               !}
            ?}
         ?};
         obj_del(_Tl)
      ?}
   ?}
?};
_zwrot

:Sign Version 2.0 jowisz:1048 2021/04/09 15:26:31 9d8c5506e2bd83b270915e22709d5e2b38112032a8fbbdcad846accd87ad0efd528ce1d1fef1f69c7076555ec0da1effcbf8fe29216fe8bc99d8e34a67cdf4ae70d7fa56fd125f6a67221bd339195b11333e9f39c4813c043c6b0b7992a7e6a6d3c9e111781d1fcaeb06dd239650141eeb6985beb080f178dc35f010ab788790
