:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: transport_zlec.fml
:: Utworzony: 08.08.2019
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Formuły obsługi dyspozycji transportu
::======================================================================================================================


\tr_nzl_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: dołączenie nowej dyspozycji transportu
::   WE: [_a] - uidref dokumentu na podstawie, którego jest tworzona
::       [_b]
::       [_c]
::----------------------------------------------------------------------------------------------------------------------
     _dok:={? var_pres('_a')=type_of(FIRMA.ref()) || _a || null() ?};
 _message:={? var_pres('_b')=type_of(0) || _b || 0 ?};
    _rodz:={? var_pres('_c')=type_of('') || _c || 'A' ?};
_bie_trzl:=#TR_NZL.ref();
_new_trzl:=null;
  _wg_dok:=0;
  _escape:=0;

ADDR_CHO.f_clear();
ADDR_CHO.prefix();
POM.TAB:='TR_NZL';
POM.TYPDOK:='TRZ';
_czy_num:=exec('nr_pola','numery');
TR_NZL.cntx_psh();
TR_NZL.prefix();
TR_NZL.blank();
{? _czy_num & TR_NZL.add()
||
   {? exec('add_blk','transport_zlec',TR_NZL.ref())
   ||
      {? TR_NZL.ODDZ<>''
      || TR_NZL.ORDER:=exec('code_order','transport_paczki',TR_NZL.IDADD,TR_NZL.ref(),TR_NZL.ODDZ);
         TR_NZL.put(1)
      ?};
      _new_trzl:=TR_NZL.ref();
      _new_trzl_uid:=TR_NZL.uidref();
      TR_NZL.memo_set('','OPIS');

      _var_tr_nzl:=exec('var_tr_nzl','transport_zlec');
      _var_tr_nzl.KH:=null();
      _var_tr_nzl.KH_ODB:=null();
      _var_tr_nzl.KH_MSC:=null();
      _var_tr_nzl.POS:=null();
      _var_tr_nzl.MG:=null();
      _var_tr_nzl.WYS:=null();
      _var_tr_nzl.KRAJ:='';
      _var_tr_nzl.MIASTO:='';
      _var_tr_nzl.UL:='';
      _var_tr_nzl.KPOCZ:='';
      _var_tr_nzl.POCZ:='';
      _var_tr_nzl.NUMER:='';
      _var_tr_nzl.LOKAL:='';
      _var_tr_nzl.RODZ:='Z';
      _var_tr_nzl.DP:=date(0,0,0);
      _var_tr_nzl.DT:=date(0,0,0);
      _var_tr_nzl.DR:=date(0,0,0);
      _var_tr_nzl.UWAGI:='';
      _var_tr_nzl.PO_FIRST:=1;
      _var_tr_nzl.WHERE:='MANUAL';

      params_set('context',params_get(),'var_tr_nzl',_var_tr_nzl);
      {? ($_dok)<>''
      || {? exec('dok2TR_NZL','transport_zlec',_dok,_message,_rodz)
         || _wg_dok:=1; exec('autoWGtrn','transport_zlec')
         || _escape:=1
         ?}
      ?};
      exec('pobTR_NZLpack','transport_paczki');
      TR_Z.TR_ADR:=0;

      {? ~_escape
      || params_set('context',params_get(),'var_tr_nzl',_var_tr_nzl);
         exec('tr_nzl_win_edit_set','transport_zlec');
         _nag_edit:=TR_NZL.edit("params_exec('chk_tr_nzl','transport_zlec')");
         {? TR_NZL.STAT_REJ='N' || exec('tr_nzl_pop_po','transport_zlec',_nag_edit) ?}
      || _nag_edit:=0
      ?};
      {? _nag_edit
      || exec('addTR_HKH','transport_wspolne',TR_NZL);
         exec('setMMYY','transport_zlec');
         _wyn:=TR_NZL.put(1);
         {? _wyn
         ||
            TR_NZL.memo_put(,'OPIS');
            exec('log_nag','transport_wspolne',_new_trzl_uid,'add');
            exec('sum_poz','transport_zlec',_new_trzl);
            exec('ktm2tr_nzl','transport_zlec',TR_NZL.ref());

            {? _wyn & _var_tr_nzl.PO_FIRST=1
            || {? exec('FindInSet','#table','TR_ZL','POZ',TR_NZL.ref())=null()
               || BPMN.END:=1;
                  exec('zlec_poz','transport_zlec',,0,1);
                  TR_NZL.get();
                  {? BPMN.END=2 & TR_NZL.STAT_REJ='N' & exec('FindInSet','#table','TR_ZL','POZ',TR_NZL.ref())<>null()
                  || exec('tr_nzl_zakoncz_red','transport_zlec')
                  ?}
               ?}
            ?};
:: dodanie istaniejących na BaseLinkerze paczek
            {? (TR_NZL.ORDER<>'' & TR_NZL.ORDER<>'0' & TR_NZL.ODDZ='')
            |  (TR_NZL.ORDER<>'' & TR_NZL.ORDER<>'0' & TR_NZL.ODDZ<>''
               & TR_NZL.ORDER<>exec('code_order','transport_paczki',TR_NZL.IDADD,TR_NZL.ref(),TR_NZL.ODDZ))
            || {? ~exec('addOrderPackages','firm_kur')
               || FUN.info('Nie udało się pobrać istniejących paczek.'@)
               ?}
            ?}
         ?};
         exec('done_blk','transport_zlec',_new_trzl)
      ||
::    usuwanie numeru
         exec('done_blk','transport_zlec',_new_trzl);
         _del:={? exec('FindInSet','#table','TR_ZL','POZ',TR_NZL.ref())<>null()
               || FUN.ask('Dyspozycja transportowa ma pozycje.\nCzy na pewno usunąć dyspozycje?'@)
               || 1
               ?};
         {? _del
         || exec('tr_nzl_usu','transport_zlec',1); _new_trzl:=null
         || exec('setMMYY','transport_zlec');
            TR_NZL.put()
         ?}
      ?}
   || FUN.info('Nieudana próba zablokowania tabeli nagłówków dyspozycji transportowych.\nSpróbuj ponownie.'@)
   ?}
?};
TR_NZL.cntx_pop();
{? _new_trzl=null()
||
   {? _bie_trzl>0 || TR_NZL.seek(_bie_trzl,) ?}
||
   {? TR_NZL.seek(_new_trzl)=0
   || {? ~_wg_dok
      || FUN.info('Aktualnie zredagowana dyspozycja transportu '
          'nie jest dostępna w ustawionym zakresie widoku dyspozycji.'@)
      ?};
      {? _bie_trzl>0 || TR_NZL.seek(_bie_trzl,) ?}
   ?}
?};
1


\add_blk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: dodanie zapis do tabeli blokad
::   WE: _a - TR_NZL.ref()
::   WY: 1 - zablokowano
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
TR_NZL.cntx_psh();
{?( #_a)>0 & (TR_NZL.clear(); TR_NZL.r_lock(1,1,1,#_a,ref_name(_a)) & TR_NZL.seek(_a)) & TR_NZL.r_lock(1,1,1)
|| _wyn:=1
?};
TR_NZL.cntx_pop();
_wyn


\done_blk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: usuniecie blokad
::   WE: _a - TR_NZL.ref()
::----------------------------------------------------------------------------------------------------------------------
{? _a<>null()
|| TR_NZL.cntx_psh();
   TR_NZL.prefix();
   {? TR_NZL.seek(_a) || TR_NZL.r_unlock() ?};
   TR_NZL.cntx_pop()
?};
~~


\tr_nzl_win_edit_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Ustawia okno redakcji tabeli TR_NZL, wymagane pola, okna słowników
::   WE: [_a] - czy klawisz pozycje 1(domyślnie)-tak 0-nie
::       [_b] - tryb:
::              - 0-domyślnie
::              - 1-Display
::              - 2-przeplanuj
::              - 3-potwierdź
::              - 4-wpisz dane o przesyłce
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=1 ?};
_tryb:={? var_pres('_b')=type_of(0) || _b || 0 ?};

BPMN.END:=0;
TR_Z.BTN_P:='';

_win_red:=exec('tr_nzl_win_edit','transport_zlec',{? TR_NZL.WHERE='TR_NZL' || 'MAG' || 'RED' ?});
{? _tryb=0
|| {? TR_NZL.STAT_REJ='N'
   || {? _a
      || _ff:="params_exec('tr_nzl_pozycje_red','transport_zlec')";
         TR_NZL.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin'['Poz&ycje'@],_ff)
      ?};
      {? _a & exec('isCourier','transport_paczki')
      || _ff:="params_exec('tr_nzl_paczki_red','transport_zlec')";
         TR_Z.BTN_P:=TR_NZL.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin'['&Przesyłka'@],_ff)
      ?};
      _ff:="params_exec('priority_action_red','#b__box')";
      TR_NZL.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin'['Pr&iorytet'@],_ff);

      _ff:="params_exec('tr_nzl_zakoncz_red','transport_zlec')";
      exec('zakoncz','#window',TR_NZL,_win_red,1,_ff,0, exec('help_red_zakoncz','#window','Y'),
      exec('text_red_zakoncz','#window','Y'))
   ?};
   exec('ok_esc','#window',TR_NZL,_win_red,1,,,,,exec('help_red_ok','#window','Z'),exec('text_red_ok','#window'),
   exec('help_red_esc','#window','A'))

|? _tryb=2 | _tryb=4
||
   exec('ok_esc','#window',TR_NZL,_win_red,1)

|? _tryb=3
|| _ff:="params_exec('tr_nzl_pozycje_red','transport_zlec')";
   TR_NZL.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin'['Poz&ycje'@],_ff);
   _ff:="params_exec('tr_nzl_zakoncz_rea_red','transport_zlec')";
   exec('zakoncz','#window',TR_NZL,_win_red,1,_ff,0, exec('help_red_zakoncz','#window','I'),
   exec('text_red_zakoncz','#window','I'));
   exec('ok_esc','#window',TR_NZL,_win_red,1,,,0,exec('help_red_ok','#window','Z'),exec('text_red_ok','#window'),
   exec('help_red_esc','#window','A'))
?};
TR_NZL.win_edit(_win_red);
exec('set_efld_opt','transport_zlec',_win_red,_tryb);
exec('sel_win_kh','ustawienia');
~~


\tr_nzl_win_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Zwraca okno redakcji tabeli TR_NZL
::   WE: [_a] - akronim okna
::   WY: akronim okna redakcji
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || _a:='RED' ?};

_win_akr:=_a;
{? _win_akr='RED'
:: Tymczasowe okno redakcji
|| _win_red:=TR_NZL.mk_edit('Dyspozycja transportu'@,,,,,'html_maximized');
   TR_NZL.win_etab(_win_red,'Dane podstawowe'@);
   TR_NZL.win_ewin(_win_red,,_win_akr);
   TR_NZL.win_etab(_win_red,'Dane CMR'@);
   TR_NZL.win_ewin(_win_red,,'CMR');
   _win_red
|? _win_akr='MAG'
:: Tymczasowe okno redakcji
|| _win_red:=TR_NZL.mk_edit('Dyspozycja w magazynie'@,,,,,'html_maximized');
   TR_NZL.win_ewin(_win_red,,_win_akr);
   _win_red
|? _win_akr='REA'
:: Tymczasowe okno redakcji
|| _win_red:=TR_NZL.mk_edit('Realizacja dyspozycji transportu'@,,,,,'html_maximized');
   TR_NZL.win_ewin(_win_red,,_win_akr);
   _win_red
|| _win_akr
?}


\var_tr_nzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Zmienna - Poprawa nagłowka
::   WY: uchwyt do zmiennej
::----------------------------------------------------------------------------------------------------------------------
_wyn:=obj_new('PO_FIRST'
       ,'TR_NZL'
       ,'KH'
       ,'KH_ODB'
       ,'KH_MSC'
       ,'POS'
       ,'MG'
       ,'WYS'
       ,'KRAJ'
       ,'MIASTO'
       ,'UL'
       ,'KPOCZ'
       ,'POCZ'
       ,'NUMER'
       ,'LOKAL'
       ,'RODZ'
       ,'DP'
       ,'DT'
       ,'DR'
       ,'UWAGI'
       ,'OPIS'
       ,'WHERE');
_wyn


\tr_nzl_pozycje_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Dyspozycje transportu - Pozycje - okno redagowania
::   WE: params_get()   - ustawiane w exec('zdnag_pop','zamdst_nag')
::                      - ustawiane w exec('zddol','zamdst_nag')
::   WY: 'key:F2' - jeśli pola nagłówka dokumentu sprzedażyprawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka dokumentu sprzedaży
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_btnRuleResult:='';

_fld:=params_exec('tr_nzl_edit_finisher','transport_zlec',TR_NZL.ref(),1);
{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| _var_tr_nzl:=params_get().var_tr_nzl;
   _var_tr_nzl.KH:=TR_NZL.KH;
   _var_tr_nzl.KH_ODB:=TR_NZL.KH_ODB;
   _var_tr_nzl.KH_MSC:=TR_NZL.KH_MSC;
   _var_tr_nzl.POS:=TR_NZL.POS;
   _var_tr_nzl.MG:=TR_NZL.MG;
   _var_tr_nzl.WYS:=TR_NZL.WYS;
   _var_tr_nzl.KRAJ:=TR_NZL.KRAJ;
   _var_tr_nzl.MIASTO:=TR_NZL.MIASTO;
   _var_tr_nzl.UL:=TR_NZL.UL;
   _var_tr_nzl.KPOCZ:=TR_NZL.KPOCZ;
   _var_tr_nzl.POCZ:=TR_NZL.POCZ;
   _var_tr_nzl.NUMER:=TR_NZL.NUMER;
   _var_tr_nzl.LOKAL:=TR_NZL.LOKAL;
   _var_tr_nzl.RODZ:=TR_NZL.RODZ;
   _var_tr_nzl.DT:=TR_NZL.DT;
   _var_tr_nzl.DP:=TR_NZL.DP;
   _var_tr_nzl.DR:=TR_NZL.DT;
   _var_tr_nzl.UWAGI:=TR_NZL.UWAGI;
   params_set('var_tr_nzl',_var_tr_nzl);
   BPMN.END:=1;
   exec('zlec_poz','transport_zlec',,0,1);
   exec('pobTR_NZLpack','transport_paczki');
   {? BPMN.END=2 || _btnRuleResult:=params_exec('tr_nzl_zakoncz_red','transport_zlec',1) ?}
?};

_btnRuleResult


\tr_nzl_zakoncz_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zamówienia sprzedaży - Zakończ - okno redagowania
::   WE: params_get()
::   WY: 'key:F2' - jeśli pola nagłówka zamówienia sprzedaży prawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka zamówienia sprzedaży
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_akcja:=params_get().context.akcja;
{? _akcja<>'DyspMGReal' || _mp:=params_get().context.mp ?};

_btnRuleResult:='';

_fld:=params_exec('tr_nzl_edit_finisher','transport_zlec',TR_NZL.ref(),1);
{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| TR_NZL.get();
   {? exec('tr_nzl_akc','transport_zlec',BPMN.END=2)
   || _btnRuleResult:='key:F2';
      {? _akcja<>'DyspMGReal' || _mp.done() || 1 ?}
   ?}
?};

_btnRuleResult


\chk_tr_nzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: sprawdza wypelnienie pol w nagłówku dyspozycji transportu
::   WE: _a - pomijanie sprawdzania w TERYT 0 - nie (domyślnie), 1 - tak
::----------------------------------------------------------------------------------------------------------------------
_teryt_pomin:=0;
{? var_pres('_a')=type_of(0)
|| _teryt_pomin:=_a
?};
_wyn:='';
{? TR_NZL.WHERE='ZK_N' & TR_NZL.KH=null() & TR_NZL.MG=null()
|| FUN.info('Dyspozycja na podstawie zamówienia wewnętrznego wymaga podania magazynu.'@);
   _wyn:='MG'
|? TR_NZL.WHERE<>'TR_NZL' & TR_NZL.MIASTO=''
|| FUN.info('Niepoprawny adres - należy podać miasto.'@);
   _wyn:='MIASTO'
|? TR_NZL.WHERE<>'TR_NZL' & TR_NZL.UL=''
|| FUN.info('Niepoprawny adres - należy podać ulicę.'@);
   _wyn:='UL'
::|? TR_NZL.WHERE<>'TR_NZL' & TR_NZL.NUMER=''
::|| FUN.info('Niepoprawny adres - należy podać numer domu.'@);
::   _wyn:='NUMER'
|? TR_NZL.DT=date(0,0,0)
|| FUN.info('Należy podać datę dyspozycji transportu.'@);
   _wyn:='DT'
|? TR_NZL.TR_NAG=null() & (';ZK_N;ZD_NAG;ZDP_NAG;ND;REK_N;'*TR_NZL.WHERE)>1 & TR_NZL.DT<date()
|| FUN.info('Data dyspozycji transportu nie może być wcześniejsza niż aktualna data.'@);
   _wyn:='DT'
?};
:: kontrola wypełnienia miejsca dostawy dla transportu zewnętrznego
{? _wyn='' & TR_NZL.TR_ZEWN<>null() & TR_NZL.TR_ZEWN().WYB_MSC=1 & TR_NZL.KH_MSC=null()
|| _msg:='Dla Rodzaju dostawy %1 należy podać Miejsce dostawy.'@[TR_NZL.TR_ZEWN().KOD];
   FUN.info(_msg);
   _wyn:='KH_MSC'
?};
:: kontrola uprawnień do kategorii
{? _wyn='' & ~exec('po_tr_rodz','transport_zlec')
|| TR_NZL.efld_opt(TR_NZL.win_edit('?'),'editable=1',,'TR_RODZ');
   _wyn:='TR_RODZ'
?};
{? _wyn='' & ~_teryt_pomin
|| exec('tr_nzl_teryt_sprawdz','transport_zlec')
?};
_wyn


\tr_nzl_pop_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Obsługa popraw po zakończeniu edycji (ZK_N.edit)
::   WE: _a - wynik działania edycji
::       [_b] - 1-wg oferty 0-nie(domyslnie)
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};
{? var_pres('_b')<>type_of(1) || _b:=0 ?};

_var_tr_nzl:=params_get().var_tr_nzl;
_TR_NZL:=_var_tr_nzl.TR_NZL;
_kh:=_var_tr_nzl.KH;
_kh_odb:=_var_tr_nzl.KH_ODB;
_kh_msc:=_var_tr_nzl.KH_MSC;
_pos:=_var_tr_nzl.POS;
_mg:=_var_tr_nzl.MG;
_wys:=_var_tr_nzl.WYS;
_kraj:=_var_tr_nzl.KRAJ;
_miasto:=_var_tr_nzl.MIASTO;
_ul:=_var_tr_nzl.UL;
_kpocz:=_var_tr_nzl.KPOCZ;
_pocz:=_var_tr_nzl.POCZ;
_numer:=_var_tr_nzl.NUMER;
_lokal:=_var_tr_nzl.LOKAL;
_rodz:=_var_tr_nzl.RODZ;
_dp:=_var_tr_nzl.DP;
_dt:=_var_tr_nzl.DT;
_dr:=_var_tr_nzl.DR;
_uwagi:=_var_tr_nzl.UWAGI;

_po_first:=_var_tr_nzl.PO_FIRST;

{? _po_first=1
:: Dotyczy wywołania dla Dołącz - wtedy jako wartości przed ustawia zmienne z nagłówka
|| _kh:=_var_tr_nzl.KH;
   _kh_odb:=TR_NZL.KH_ODB;
   _kh_msc:=TR_NZL.KH_MSC;
   _pos:=TR_NZL.POS;
   _mg:=TR_NZL.MG;
   _wys:=TR_NZL.WYS;
   _kraj:=TR_NZL.KRAJ;
   _miasto:=TR_NZL.MIASTO;
   _ul:=TR_NZL.UL;
   _kpocz:=TR_NZL.KPOCZ;
   _pocz:=TR_NZL.POCZ;
   _numer:=TR_NZL.NUMER;
   _lokal:=TR_NZL.LOKAL;
   _rodz:=TR_NZL.RODZ;
   _dp:=TR_NZL.DP;
   _dt:=TR_NZL.DT;
   _gr:=TR_NZL.DR;
   _uwagi:=TR_NZL.UWAGI
?};

{? TR_NZL.STAT_REJ='N'
|| TR_NZL.cntx_psh();
   TR_NZL.prefix();
   {? _po_first || {? TR_NZL.NR=0 || exec('fak_numer','numery','',0); exec('znak','numery','TR_NZL') ?} ?};
   exec('setMMYY','transport_zlec');
   TR_NZL.put();
   exec('sum_poz','transport_zlec',TR_NZL.ref());
   exec('ktm2tr_nzl','transport_zlec',TR_NZL.ref());
   TR_NZL.cntx_pop();
   TR_NZL.get()
?}


\tr_nzl_edit_finisher
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Kod wykańczający po TR_NZL.edit() w różnych kontekstach
::   WE: _a - TR_NZL.ref()
::       _b - pomijanie sprawdzania w TERYT 0 - nie (domyślnie), 1 - tak
::   WE: params_get()   - ustawiane w exec('zdnag_pop','zamdst_nag')
::                      - ustawiane w exec('zddol','zamdst_nag')
::----------------------------------------------------------------------------------------------------------------------
:: Sprawdzenie poprawności wypełnienia pól nagłówka dyspozycji transportu
_teryt_pomin:=0;
{? var_pres('_b')=type_of(0)
|| _teryt_pomin:=_b
?};
_fld:=params_exec('chk_tr_nzl','transport_zlec',_teryt_pomin);
{? _fld<>''
|| _fld
|| _faks:=_a;
   _akcja:=params_get().context.akcja;
   _var_tr_nzl:=params_get().var_tr_nzl;
   {? _akcja<>'DyspMGReal'
   || _out:=params_get().context.out;
      _mp:=params_get().context.mp
   ?};

   {? _akcja<>'DyspMGReal' & (_akcja='Dołącz' | _akcja='START_TODO' | _mp.pathProc())
   || params_set('var_tr_nzl',_var_tr_nzl);
      exec('tr_nzl_pop_po','transport_zlec',1);
      _var_tr_nzl.PO_FIRST:=2
   |? _akcja='Popraw' | _akcja='DyspMGReal' | _mp.pathTodo()
   || params_set('var_tr_nzl',_var_tr_nzl);
      exec('tr_nzl_pop_po','transport_zlec',1)
   ?};
   ''
?}


\zlec_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: wyświetlanie pozycji zlecń transportowych dla bieżącego zamówienia
::   WE: [_a] - czy tylko wyświetlenie pozycji bez wszelakich akcji
::       [_b] - blokady dyspozycji i usunięcie blokad 1-tak(domyślnie) 0-nie
::       [_c] - 1-uruchomione z okienka redakcji nagłówka, 0-domyślnie pomijalne
::----------------------------------------------------------------------------------------------------------------------
_display:=BPMN.DISPLAY;
_wgzam:=0;
{? var_pres('_a')=type_of(0)
|| _display:=_a
?};
_lock:=1;
{? var_pres('_b')=type_of(0)
|| _lock:=_b
?};
_runwin:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_params:=params_get();
{? type_of(_params)>0 & var_pres('LINK',_params)>0
|| _link:=_params.LINK
|| _link:=''
?};

:: Obsługa linku
{? exec('FindAndGet','#table',TR_ZL,_link,,"name()")=TR_ZL.name()
||
   {? _link<>'' & ref_tab(_link)=TR_ZL & TR_ZL.seek(_link)
   || _lspr:=1
   ?}
|| _lspr:=0
?};

TR_NZL.cntx_psh();

_dictm:=M.win_dict('?');
M.win_dict('NL_WER');
{? TR_NZL.STAT_REJ<>'Z' & ~_display
||
   {? ~_lock | (exec('tr_nzl_lock','transport_zlec') & exec('add_blk','transport_zlec',TR_NZL.ref()))
   ||
      TR_ZL.win_edit('RED');
      _winsel:={? _runwin || 'WER' || 'POZ' ?};
      TR_ZL.win_sel(_winsel);
      _act:=TR_ZL.actions(_winsel,'');
      TR_ZL.actions_grayed(_winsel,'');
      TR_ZL.index('POZ');
      TR_ZL.prefix(TR_NZL.ref());
      TR_ZL.select();
      TR_ZL.actions(_winsel,_act)
   ?}
|? (TR_NZL.WHERE='TR_NZL' & ';AB'*(1+TR_NZL.STMG))
 | (TR_NZL.TR_NAG().STAT_REJ='Z' & (_wgzam:=(';ZK_N;ZD_NAG;ZDP_NAG;'*TR_NZL.WHERE)>1; _wgzam))
|| {? ~_lock | (exec('tr_nzl_lock','transport_zlec') & exec('add_blk','transport_zlec',TR_NZL.ref()))
   ||
      {? ~_wgzam || TR_ZL.win_edit('PTW') || TR_ZL.win_edit('REA') ?};
      _winsel:='REA';
      TR_ZL.win_sel(_winsel);
      _act:={? ~_runwin
            || {? TR_NZL.REAL='T' || 'ZR' || 'Z' ?}
            || ''
            ?};
      {? exec('FindInSet','#table','EANN','AKT',$TR_NZL.ref(),'T')<>null() || _act+='R' ?};
      _act:=TR_ZL.actions(_winsel,_act);
      TR_ZL.actions_grayed(_winsel,'');
      TR_ZL.index('POZ');
      TR_ZL.prefix(TR_NZL.ref());
      TR_ZL.select();
      TR_ZL.actions(_winsel,_act)
   ?}
||
   TR_ZL.win_edit('RED');
   TR_ZL.win_sel('POZ');
   _act:=TR_ZL.actions('POZ','DPUG:D');
   TR_ZL.index('POZ');
   TR_ZL.prefix(TR_NZL.ref());
   TR_ZL.select();
   TR_ZL.actions('POZ',_act)
?};

{? BPMN.END<>0 || exec('set_efld_opt','transport_zlec',,0) ?};

M.win_dict(_dictm);
{? _lock || exec('done_blk','transport_zlec',TR_NZL.ref()) ?};
TR_NZL.cntx_pop();
''


\tr_nzl_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Wartość początkowa pola TR_ZL.TR_NZL
::----------------------------------------------------------------------------------------------------------------------
TR_NZL.ref()


\set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Zaznacza wymagalne pola w nagłówku dyspozycji transportu
::   WE: _a - akronim okna redakcji
::       [_b] - tryb:
::              - 0-domyślnie
::              - 1-Display
::              - 2-przeplanuj
::----------------------------------------------------------------------------------------------------------------------
_win_red:={? var_pres('_a')=type_of('') || _a || TR_NZL.win_edit('?') ?};
_tryb:={? var_pres('_b')=type_of(0) || _b || 0 ?};

{? TR_NZL.WHERE='TR_NZL' || exec('disp_2adr','transport_zlec',1) ?};

TR_NZL.efld_opt(_win_red,'enable=1',,'WLASNY');
TR_NZL.efld_opt(_win_red,'enable=1',,'TR_RODZ');
TR_NZL.efld_opt(_win_red,'enable=1',,'POJAZD');

TR_NZL.efld_opt(_win_red,'editable=0',,'DP');

{? _tryb=3 | TR_NZL.WHERE='TR_NZL'
|| TR_NZL.efld_opt(_win_red,'editable=1',,'DR');
   TR_NZL.efld_opt(_win_red,'mark=1',,'DR');
   TR_NZL.efld_opt(_win_red,'editable=1',,'GR')
|| TR_NZL.efld_opt(_win_red,'editable=0',,'DR');
   TR_NZL.efld_opt(_win_red,'mark=0',,'DR');
   TR_NZL.efld_opt(_win_red,'editable=0',,'GR')
?};
{? _tryb=3
|| TR_NZL.efld_opt(_win_red,'editable=0',,'DT');
   TR_NZL.efld_opt(_win_red,'editable=0',,'GR_DO')
|| TR_NZL.efld_opt(_win_red,'editable=1',,'DT');
   TR_NZL.efld_opt(_win_red,'editable=1',,'GR_DO')
?};
{? _tryb>=2 & TR_NZL.STAT_REJ='Z'
||
   TR_NZL.efld_opt(_win_red,'mark=0',,'MIASTO');
   TR_NZL.efld_opt(_win_red,'mark=0',,'UL');
   TR_NZL.efld_opt(_win_red,'mark=0',,'NUMER');
   TR_NZL.efld_opt(_win_red,'mark=1',,'DT');
   TR_NZL.efld_opt(_win_red,'mark=0',,'NR');
   _editable:='editable=0';
   TR_NZL.efld_opt(_win_red,_editable,,'DOK');
   TR_NZL.efld_opt(_win_red,_editable,,'TR_RODZ');
   TR_NZL.efld_opt(_win_red,_editable,,'KH_ODB');
   TR_NZL.efld_opt(_win_red,_editable,,'KH_MSC');
   TR_NZL.efld_opt(_win_red,_editable,ZLEC,'POS_NR')
||
   TR_NZL.efld_opt(_win_red,'mark=1',,'MIASTO');
   TR_NZL.efld_opt(_win_red,'mark=1',,'UL');
   TR_NZL.efld_opt(_win_red,'mark=0',,'NUMER');
   TR_NZL.efld_opt(_win_red,'mark=1',,'DT');
   TR_NZL.efld_opt(_win_red,'mark=1',,'NR');
   _zlec_gen:={? TR_NZL.WHERE<>'' || '0' || '1' ?};
   TR_NZL.efld_opt(_win_red,'editable=' + _zlec_gen,TR_NZL,'DOK');
   TR_ZL.cntx_psh();
   TR_ZL.index('POZ');
   TR_ZL.prefix(TR_NZL.ref());
   _zlec_tr_rodz:={? TR_ZL.first() || '0' || '1' ?};
   TR_ZL.cntx_pop();
   TR_NZL.efld_opt(_win_red,'editable=' + _zlec_tr_rodz,TR_NZL,'TR_RODZ');
   exec('trnzl_kh_fileds','transport_zlec',_win_red)
?};
_editable:='editable=1';
_gen:=(';ZK_N;ZD_NAG;ND;ZDP_NAG;REK_N;ZGP;'*TR_NZL.WHERE)>1;
{? _tryb>=2 | _tryb=4
|| _editable:='editable=0';
   _editMI:={? _gen & TR_NZL.MIASTO='' || 'editable=1' || _editable ?};
   _editUL:={? _gen & TR_NZL.UL=''     || 'editable=1' || _editable ?};
   _editNR:={? _gen || _editable || 'editable=1' ?}
|| _editMI:=_editUL:=_editMG:=_editNR:=_editable;
   _markMG:='mark=0'
?};
_editMG:={? _gen & TR_NZL.WHERE='ZK_N' & TR_NZL.DOK_REF<>'' & TR_NZL.KH=null() & TR_NZL.MG=null()
         || 'editable=1'
         || _editable
         ?};
_markMG:={? TR_NZL.WHERE='ZK_N' & exec('FindAndGet','#table',ZK_N,TR_NZL.DOK_REF,,"T().R='W'",0) & (_editMG+1)='1'
         || 'mark=1'
         || 'mark=0'
         ?};
TR_NZL.efld_opt(_win_red,_editable,,'ODDZ');
TR_NZL.efld_opt(_win_red,_editable,,'NR');
{? _gen
|| TR_NZL.efld_opt(_win_red,'editable=0',,'KH');
   TR_NZL.efld_opt(_win_red,'editable=0',,'RODZ')
|| TR_NZL.efld_opt(_win_red,_editable,,'KH');
   TR_NZL.efld_opt(_win_red,_editable,,'RODZ')
?};
TR_NZL.efld_opt(_win_red,_editMG,,'MG');
TR_NZL.efld_opt(_win_red,_markMG,,'MG');
TR_NZL.efld_opt(_win_red,_editable,,'WYS');
TR_NZL.efld_opt(_win_red,_editable,,'ADDR_CHO');
TR_NZL.efld_opt(_win_red,_editable,,'KRAJ');
TR_NZL.efld_opt(_win_red,_editMI,,'MIASTO');
TR_NZL.efld_opt(_win_red,_editUL,,'UL');
TR_NZL.efld_opt(_win_red,_editNR,,'NUMER');
TR_NZL.efld_opt(_win_red,_editNR,,'LOKAL');
TR_NZL.efld_opt(_win_red,_editable,,'KPOCZ');
TR_NZL.efld_opt(_win_red,_editable,,'POCZ');
TR_NZL.efld_opt(_win_red,_editable,,'DZIELN');
TR_NZL.efld_opt(_win_red,_editable,,'TEL');
TR_NZL.efld_opt(_win_red,_editable,,'EM');
TR_NZL.efld_opt(_win_red,_editable,,'POJAZD');
TR_NZL.efld_opt(_win_red,_editable,,'UWAGI');
TR_NZL.efld_opt(_win_red,_editable,,'OPIS');
{? TR_NZL.WHERE<>'TR_NZL'
|| {? _tryb<>0 | XINFO.TER_AKT<>'T'
   || TR_NZL.btn_eopt(_win_red,'MIASTO','state=grayed');
      TR_NZL.btn_eopt(_win_red,'UL','state=grayed')
   || TR_NZL.btn_eopt(_win_red,'MIASTO','state=normal');
      TR_NZL.btn_eopt(_win_red,'UL','state=normal')
   ?}
?};
{? _tryb=4
|| TR_NZL.efld_opt(_win_red,'editable=0',,'DT');
   TR_NZL.efld_opt(_win_red,'editable=0',,'GR_DO');
   TR_NZL.efld_opt(_win_red,'editable=0',,'DP');
   TR_NZL.efld_opt(_win_red,'editable=0',,'DR');
   TR_NZL.efld_opt(_win_red,'editable=1',,'UWAGI');
   TR_NZL.efld_opt(_win_red,'editable=1',,'OPIS');
   TR_NZL.efld_opt(_win_red,'enable=0',,'WLASNY');
   TR_NZL.efld_opt(_win_red,'enable=0',,'TR_RODZ');
   TR_NZL.efld_opt(_win_red,'enable=0',,'POJAZD')
|? ~_tryb & exec('uprTR_RODZ','transport_wspolne',OPERATOR.USER)=-1
|| TR_NZL.efld_opt(_win_red,'mark=1',,'TR_RODZ')
|| TR_NZL.efld_opt(_win_red,'mark=0',,'TR_RODZ')
?};
{? TR_NZL.TR_ZEWN<>null() & TR_NZL.TR_ZEWN().WYB_MSC=1
|| TR_NZL.efld_opt(_win_red,'mark=1',,'KH_MSC')
|| TR_NZL.efld_opt(_win_red,'mark=0',,'KH_MSC')
?};
:: klawisz paczki
exec('keyPACK','transport_zlec',_gen);
''


\tr_nzl_usu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: usuniecie dyspozycji transportowej
::   WE: [_a] - =1-usuwac dyspozycje bez pytania, 2-usuwac bez pytania i sprawdzania statusu (archiwizacja), 0-wpp
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=0 ?};

_do_state:=do_state();

_res:={? _a>0 || 1 || exec('tr_rodz_del','transport_wspolne',TR_NZL.TR_RODZ,'Dyspozycja transportu'@) ?};
{? ~_res
|| ''
:: Brak uprawnień do kategorii
|? (_a=2 | 'N'*TR_NZL.STAT_REJ) & exec('tr_nzl_lock','transport_zlec') & TR_NZL.r_lock(1,1,1)
||
   {? _a>=1
    | {? TR_NZL.WHERE<>'TR_NZL'
      || FUN.ask('Usunąć dyspozycję transportu?'@)
      || FUN.ask('Usunąć dyspozycję w magazynie?'@)
      ?}
   ||
      {? TR_NZL.r_lock(1)
      ||
         _grp:=TR_NZL.GRP;
         {? _do_state=0 || do() ?};
         _uid:=TR_NZL.uidref();
         _ref:=TR_NZL.ref();
         _Tab:=exec('where2TAB','transport_wspolne',TR_NZL.WHERE,1);
         _dok_ref:={? TR_NZL.WHERE='TR_NZL' || TR_NZL.DOK_REF || '' ?};
::       usunięcie zapisów o paczkach
         TR_PACK.index('TR_NZL');
         TR_PACK.prefix(_ref);
         {? TR_PACK.first()
         || {!
            |? TR_ZPACK.index('TR_PACK');
               TR_ZPACK.prefix(TR_PACK.ref());
               {? TR_ZPACK.first() || {! |? TR_ZPACK.del() !} ?};
               TR_SPACK.index('TR_PACK');
               TR_SPACK.prefix(TR_PACK.ref());
               {? TR_SPACK.first() || {! |? TR_SPACK.del() !} ?};
               TR_HPACK.index('TR_PACK');
               TR_HPACK.prefix(TR_PACK.ref());
               {? TR_HPACK.first() || {! |? TR_HPACK.del() !} ?};
               TR_PACK.del()
            !}
         ?};
         _deldok:=1;
         {? exec('deladok','dokum','TR_NZL')<>1
         || _deldok:=0;
            undo();
            FUN.info('Dyspozycji %1 nie udało się usunąć,\n'
                     'ponieważ usunięcie załączników nie powiodło się.'@[TR_NZL.SYM])
         ?};

::       usunięcie zapisów o kosztach
         TR_KOS.index('TR_NZL_P');
         TR_KOS.prefix(_ref);
         {? TR_KOS.first() || {! |? TR_KOS.del() !} ?};

         TR_ZL.index('POZ');
         TR_ZL.prefix(_ref);
         {? TR_ZL.first()
         || {!
            |? _sql:=TR_ZL.POZ_REF;
               _zal:={? TR_ZL.TR_NZL().WHERE='ZGP' || TR_NZL.RODZ || '' ?};
               exec('tr_log_del','transport_wspolne',TR_ZL.uidref());
::             usunięcie zapisów o atrybutach
               TR_ZLM.index('TR_ZL');
               TR_ZLM.prefix(TR_ZL.ref());
               {? TR_ZLM.first() || {! |? TR_ZLM.del() !} ?};
               TR_ZPACK.index('TR_ZL');
               TR_ZPACK.prefix(TR_ZL.ref());
               {? TR_ZPACK.first() || {! |? TR_ZPACK.del() !} ?};
               _uip:=TR_ZL.uidref();
               _del:=TR_ZL.del();
               {? _Tab<>TR_ZL & _sql<>'' || exec('aktIL_TRAN','transport_wspolne',_Tab,_sql,_zal) ?};
               {? _Tab=REK_N || exec('delaRekD','reklamacje',_uip) ?};
               _del
            !}
         ?};
         {? _deldok & TR_NZL.count()=0
         ||  _tr_moc:=TR_NZL.TR_MOC;
            {? _a<=1
            || exec('log_nag','transport_wspolne',TR_NZL.uidref(),'del')
            ?};
            {? do_state()<2 & ~Plugin.run('BEFORE_DELTAB_001',TR_NZL.ref()) & do_state() || undo() ?};
            {? _a<>2
            || POM.TAB:='TR_NZL';
               POM.TYPDOK:='TRZ';
               numer:=TR_NZL.NR;
               oldnumer:=1;
               exec('nr_old','numery')
            ?};

            _dok_ref:={? TR_NZL.WHERE='TR_NZL' || TR_NZL.DOK_REF || '' ?};
            TR_NZL.del(1);
            {? _dok_ref<>'' || exec('aktDYSPzam','transport_zlec',_dok_ref) ?};
            {? do_state()=1
                  &
               _tr_moc
            ||
:: aktualizacja mocy transportowych
               exec('FindAndGet','#table',TR_MOC,_tr_moc,,"
                  exec('use','transport_moc')
               ")
            ?};
            {? _dok_ref<>'' & ~exec('FindAndGet','#table',TR_NZL,_dok_ref,,"MGDSP:='N';put(1)",0) || undo() ?};
            echo()
         ||
            undo()
         ?};
         {? _do_state=0 || end() ?}
      ?}
   ?};
   TR_NZL.r_unlock()
?};
1


\tr_nzl_lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: lock naglowka dyspozycji transportu
::   WE: _a - czy pytac o osobe blokujaca
::   WY: _wyn - 0-zablokowany 1-bez blokady
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};

_wyn:=TR_NZL.r_lock(1,1,1);
{? _wyn=0 & _a & FUN.ask('Dyspozycję transportu %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[TR_NZL.SYM])
|| TR_NZL.r_lock(1,,1)
?};
_wyn


\po_miejsce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: po redakcji pól KH, KH_ODB, KH_MSC, POS, MG, WYS
::   WE: [_a] - wskazanie na miejsce, domyślnie akronim aktywnego pola
::----------------------------------------------------------------------------------------------------------------------
_mjs:={? var_pres('_a')=type_of('') & +(_a) || _a || cur_afld() ?};

_cntx:=';'+_mjs+';';
_empty:={? {? _mjs<>'POS_NR'
           || ($('TR_NZL.'+_mjs))()=null()
           || TR_NZL.POS=null()
           ?}
        || 1
        || 0
        ?};

{? _empty
|| {? _mjs='KH_MSC' & (TR_NZL.TR_ZEWN=null() | TR_NZL.TR_ZEWN<>null() & TR_NZL.TR_ZEWN().WYB_MSC=1)
   || _mjs:={? TR_NZL.TR_ZEWN<>null() & TR_NZL.TR_ZEWN().WYB_MSC=1 || 'KH_MSC' || 'KH' ?};
      ADDR_CHO.cntx_psh();
      ADDR_CHO.index('KOD');
      ADDR_CHO.prefix(_mjs,);
      {? ADDR_CHO.first()
      ||
         TR_NZL.ADDR_CHO:=ADDR_CHO.ref()
      ?};
      ADDR_CHO.cntx_pop();
      exec('adres_set_select','transport_wspolne','TR_NZL',_mjs);
      {? _mjs<>'KH_MSC' || exec('po_miejsce','transport_zlec',_mjs) ?}
   || ''
   ?}

|? ';KH;'*_cntx
||
   exec('trnzl_kh_fileds','transport_zlec')
?};
{? ';MG;'*_cntx
||
   MG.f_clear()
?};
{? ';KH;KH_ODB;KH_MSC;POS_NR;MG;WYS;'*_cntx
||
   _code:={? TR_Z.TR_ADR
          || ''
          || {? _mjs='KH'
             || {? TR_NZL.KH_MSC<>null() || 'KH_MSC'
                |? TR_NZL.KH_ODB<>null() || 'KH_ODB'
                |? TR_NZL.KH<>null()     || 'KH'
                || ''
                ?}
             || {? {? _mjs<>'POS_NR' || ($('TR_NZL.'+_mjs))()<>null() || TR_NZL.POS<>null() ?}
                || _mjs
                || ''
                ?}
             ?}
          ?};
   {? _code<>''
   || ADDR_CHO.cntx_psh();
      ADDR_CHO.index('KOD');
      ADDR_CHO.prefix(_code,);
      {? ADDR_CHO.first()
      ||
         TR_NZL.ADDR_CHO:=ADDR_CHO.ref()
      ?};
      ADDR_CHO.cntx_pop()
   ?};
   exec('adres_change','transport_wspolne','TR_NZL',_code);
   1
?};
{? ';KH;KH_ODB;'*_cntx & TR_NZL.RODZ='R' || exec('podtrn_hkh','transport_wspolne') ?};
1


\przed_miejsce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: przed redakcją pól KH_ODB, KH_MSC, POS, MG
::----------------------------------------------------------------------------------------------------------------------
_cntx:=';'+cur_afld()+';';
{? ';MG;'*_cntx
||
   _sql:='';

   {? TR_NZL.WHERE='ZK_N'
   || _rodz:=exec('FindAndGet','#table',ZK_N,TR_NZL.DOK_REF,,"T().R",'');
      {? _rodz='W'
      || _mdsym:=exec('FindAndGet','#table',ZK_N,TR_NZL.DOK_REF,,"MD().SYM",'');
         exec('filtr_mg','zamsiw_nag',1,_mdsym)
      || MG.f_clear();
         MG.prefix();
         MG.f_set('SYM',,_sql)
      ?}
   || MG.f_clear();
      MG.prefix();
      MG.f_set('SYM',,_sql)
   ?}
?};
1


\tr_nzl_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: zakończenie redakcji dyspozycji transportu
::   WE: [_a] - 0-z pytaniami(domyślnie) 1-bez
::   WY: 1-zakończono rejestrację 0-nie
::----------------------------------------------------------------------------------------------------------------------
_auto:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_wyn:=0;
_fld:='';
TR_NZL.get();
TR_NZL.cntx_psh();
TR_NZL.prefix();
exec('ini_kom','#message','Informacje o zakończeniu rejestracji dyspozycji transportu.'@);
__kom_gr:='Dyspozycja transportu nr: %1'@[TR_NZL.SYM];
{? exec('tr_nzl_lock','transport_zlec') & TR_NZL.r_lock(1,1,1)
||
   {? ~exec('tr_rodz_ope','transport_wspolne',TR_NZL.TR_RODZ,'Dyspozycja transportu'@,'Operacja niemożliwa.'@,1)
   || _ok:=0
   |? TR_NZL.STAT_REJ='N'
   ||
      TR_ZL.index('POZ');
      TR_ZL.prefix(TR_NZL.ref());
      {? ~TR_ZL.first()
      || exec('add_kom','#message','Dyspozycja transportu nie posiada pozycji.'@,2);
         _ok:=0
      || _ok:=1
      ?};

      {? _ok &
        (_auto | FUN.ask('Zakończyć rejestrację dyspozycji transportu?'@))
      || TR_NZL.STAT_REJ:='Z';
         TR_NZL.STATUS:=exec('tr_nzl_status','transport_zlec');
         {? TR_NZL.WHERE='TR_NZL' || exec('status_MG','transport_wspolne') ?};
         TR_NZL.PLAN:=
            {? TR_NZL.STATUS=exec('tr_nzl_status_do_planowania','transport_zlec')
            || 'T'
            || 'N'
            ?};
         {? TR_NZL.put()
         || exec('ktm2tr_nzl','transport_zlec',TR_NZL.ref());
            _wyn:=1
::            exec('add_kom','#message','Zakończono rejestrację dyspozycji transportu'@,1)
         ?}
      ?}
   || exec('add_kom','#message'
        ,{? TR_NZL.STAT_REJ<>'Z'
::         || 'Zakończono rejestrację dyspozycji transportu'@
         || 'Nieprawidłowy status rejestracji dyspozycji'@
         ?},2);
      _wyn:=1
   ?};
   TR_NZL.r_unlock()
?};
{? _wyn=1 || exec('log_nag','transport_wspolne',TR_NZL.uidref(),'zak') ?};
{? _wyn & _auto & var_pres('__kom_on')=type_of(1)
||
   __kom_on:=0
?};
exec('end_kom','#message');
_trnzl_ref:=TR_NZL.ref();
TR_NZL.cntx_pop();
{? _wyn & ~_auto & TR_NZL.seek(_trnzl_ref)=0
|| FUN.info('Aktualnie zredagowana dyspozycja transportu '
          'nie jest dostępna w ustawionym zakresie widoku dyspozycji.'@)
?};
TR_NZL.get();
_wyn


\tr_nzl_zakoncz_tr_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Dyspozycja transportu - Zakończ - okno redagowania
::   WE: params_get()
::   WY: 'key:F2' - jeśli pola nagłówka dyspozycji transportu prawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka dyspozycji transportu
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_act_uid:='LTR_ZLE_DZLE';
exec('btn_EndPosition','okienka',_act_uid,TR_NZL.uidref(),TR_NZL
 ,'Zakończ_wer','Zakończyć rejestrację dyspozycji transportu %1?'@[TR_NZL.SYM])


\tr_nzl_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: popraw na dyspozycji transportu
::   WE: [_a] - 1-potwierdzenie dyspozycji w magazynie 0(domyślnie)-normalne popraw 2-realizacja dyspozycji transportu
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_res:=exec('tr_rodz_mod','transport_wspolne',TR_NZL.TR_RODZ,'Dyspozycja transportu'@,1);
{? ~_res
|| ''
:: Brak uprawnień do kategorii
|? ~_tryb & TR_NZL.STAT_REJ<>'N'
|| {? ~TR_NZL.NOTR & TR_NZL.TR_NAG=null() & (';ZT'*TR_NZL.STAT_REJ)>1
   || _old:=TR_NZL.win_edit('?');
      _red:=TR_NZL.mk_edit('Kategoria dla dyspozycji'@,,'trnzl_redkat');
      TR_NZL.win_esep(_red,'Dyspozycja'@);
      TR_NZL.win_efld(_red,,'SYM',,,20,,1);
      TR_NZL.win_esep(_red,'Kategoria'@);
      TR_NZL.win_efld(_red,,'TR_RODZ','KOD','*',20);
      TR_NZL.win_efld(_red,,'TR_RODZ','NAZ',,20,,1);
      TR_NZL.win_edit(_red);
      {? TR_NZL.edit() || TR_NZL.put(1) ?};
      TR_NZL.win_edit(_old)
   || FUN.info('Dyspozycja transportu nie podlega modyfikacji.'@)
   ?}
|? exec('tr_nzl_lock','transport_zlec')
||
   POM.TAB:='TR_NZL';
   POM.TYPDOK:='TRZ';

   _bie_trzl:=#TR_NZL.ref();
   _new_trzl:=null;

   TR_NZL.cntx_psh();
   TR_NZL.prefix();
   {? TR_NZL.r_lock(1,1,1)
   ||

      _var_tr_nzl:=exec('var_tr_nzl','transport_zlec');
      TR_NZL.get();
      TR_NZL.memo_get(,'CMR013');
      TR_NZL.memo_get(,'CMR019');
      TR_NZL.memo_get(,'OPIS');
      _var_tr_nzl.KH:=TR_NZL.KH;
      _var_tr_nzl.KH_ODB:=TR_NZL.KH_ODB;
      _var_tr_nzl.KH_MSC:=TR_NZL.KH_MSC;
      _var_tr_nzl.POS:=TR_NZL.POS;
      _var_tr_nzl.MG:=TR_NZL.MG;
      _var_tr_nzl.WYS:=TR_NZL.WYS;
      _var_tr_nzl.KRAJ:=TR_NZL.KRAJ;
      _var_tr_nzl.MIASTO:=TR_NZL.MIASTO;
      _var_tr_nzl.UL:=TR_NZL.UL;
      _var_tr_nzl.KPOCZ:=TR_NZL.KPOCZ;
      _var_tr_nzl.POCZ:=TR_NZL.POCZ;
      _var_tr_nzl.NUMER:=TR_NZL.NUMER;
      _var_tr_nzl.LOKAL:=TR_NZL.LOKAL;
      _var_tr_nzl.RODZ:=TR_NZL.RODZ;
      _var_tr_nzl.DP:=TR_NZL.DP;
      _var_tr_nzl.DT:=TR_NZL.DT;
      _var_tr_nzl.DR:=TR_NZL.DR;
      _var_tr_nzl.UWAGI:=TR_NZL.UWAGI;
      _var_tr_nzl.PO_FIRST:=0;

      params_set('context',params_get(),'var_tr_nzl',_var_tr_nzl);

      _uidref:=TR_NZL.uidref();
      exec('pobTR_NZLpack','transport_paczki');
      TR_Z.TR_ADR:=1;
      EANL.cntx_psh();
      _mg:=EANX.MG;
      EANX.MG:=TR_NZL.MG;

      {? ~_tryb || exec('tr_nzl_win_edit_set','transport_zlec') || exec('tr_nzl_win_edit_set','transport_zlec',,3) ?};
      _nag_edit:=TR_NZL.edit("params_exec('chk_tr_nzl','transport_zlec')");
      EANL.cntx_pop();
      EANX.MG=_mg;
      {? _nag_edit
      || exec('addTR_HKH','transport_wspolne',TR_NZL);
         {? ~_tryb
         || TR_NZL.memo_put(,'CMR013');
            TR_NZL.memo_put(,'CMR019');
            TR_NZL.memo_put(,'OPIS');
            params_set('context',params_get(),'var_tr_nzl',_var_tr_nzl);
            exec('log_nag','transport_wspolne',_uidref,'edit');
            exec('sum_poz','transport_zlec',_bie_trzl);
            {? TR_NZL.STAT_REJ='N' || exec('tr_nzl_pop_po','transport_zlec',_nag_edit) ?}
         || {? exec('stReady','transport_wspolne',TR_NZL.ref(),,,1) & TR_NZL.WHERE='TR_NZL'
            || TR_NZL.get();
               _put:=0;
               {? TR_NZL.RODZ='Z'
               || TR_NZL.REAL:='N';
                  _put:=1
               ?};
               {? ';CD'*TR_NZL.STMG
               || TR_NZL.MGDSP:='Z';
                  _put:=1
               |? TR_NZL.STMG*'B'
               || TR_NZL.MGDSP:='S';
                  _put:=1
               ?};
               {? _put || TR_NZL.put(1) ?};
               exec('aktDYSPzam','transport_zlec',TR_NZL.DOK_REF)
            ?}
         ?}
      ?};
      TR_NZL.r_unlock()
   ?};
   TR_NZL.cntx_pop();
   {? _new_trzl=null
   ||
      {? _bie_trzl>0 || TR_NZL.seek(_bie_trzl,) ?}
   ||
      {? TR_NZL.seek(_new_trzl)=0
      ||
         FUN.info('Aktualnie zredagowana dyspozycja transportu nie jest dostępne w ustawionym zakresie widoku dyspozycji.'@);
         {? _bie_trzl>0 || TR_NZL.seek(_bie_trzl,) ?}
      ?}
   ?}
?};
''


\bl_tr_nzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: blank TR_NZL.ref()
::----------------------------------------------------------------------------------------------------------------------
TR_NZL.ref()


\tr_nzl_sym_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Formuła ikony dla STAT_REJ
::----------------------------------------------------------------------------------------------------------------------
"  {? TR_NZL.STAT_REJ<>'A' & TR_NZL.WHERE='TR_NZL'
   || _desc:=exec('stMG_desc','transport_wspolne',TR_NZL.STMG);
      {? _desc<>TR_NZL.STMGDESC || TR_NZL.STMGDESC:=_desc; TR_NZL.put(1) ?}
   ?};
   {? TR_NZL.STAT_REJ='A'    || 'xwin16.png:81'
   |? ';TX'*TR_NZL.REAL      || {? exec('ctrl_poz','transport',TR_NZL.ref())=1
                                || exec('zrealizowany','icon')
                                || 'xwin16.png:228'
                                ?}
   |? ';AP'*TR_NZL.REAL      || exec('niereal_zaplanuj','icon')
   |? TR_NZL.WHERE='TR_NZL'
   || {? (1+TR_NZL.STMG)='A' & exec('FindInSet','#table','EANN','AKT',$TR_NZL.ref(),'T')<>null()
      || {? exec('FindInSet','#table','EANN','AKT',$TR_NZL.ref(),'T',\"@.EANN.STAN\",,,'')='Z'
         || 'xwin16.png:164'
         || 'xwin16.png:166'
         ?}
      |? TR_NZL.RODZ='Z'
      || {? TR_NZL.MGDSP='R' || 'xwin16.png:178'
         |? TR_NZL.MGDSP='Z' || 'xwin16.png:179'
         |? TR_NZL.MGDSP='S' || 'xwin16.png:187'
         |? TR_NZL.MGDSP='X' || 'xwin16.png:181'
         || exec('transpDO','icon')
         ?}
      |? TR_NZL.RODZ='R'     || exec('transpZ','icon')
      || ''
      ?}
   |? TR_NZL.STAT_REJ='Z'
   || {? TR_NZL.WHERE='ZK_N'
      || {? TR_NZL.MGDSP='T' || 'xwin16.png:180'
         |? TR_NZL.MGDSP='R' || 'xwin16.png:178'
         |? TR_NZL.MGDSP='Z' || 'xwin16.png:179'
         |? TR_NZL.MGDSP='S' || 'xwin16.png:187'
         |? TR_NZL.MGDSP='X' || 'xwin16.png:181'
         || exec('zarejestrowany','icon')
         ?}
      || exec('zarejestrowany','icon')
      ?}
   |? TR_NZL.STAT_REJ='N'    || exec('pusta','#icon')
   || exec('pusta','#icon')
   ?}
"


\setMMYY
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Uzupełnia pola na TR_NZL na podstawie daty
::   WE: [_a] - data, domyślnie na podstawie daty planowanej lub oczekiwanej
::----------------------------------------------------------------------------------------------------------------------
_data:={? var_pres('_a')=type_of(date(0,0,0))
       || _a
       || TR_NZL.DT
       ?};
TR_NZL.RR:=_data~1;
TR_NZL.RM:=_data~2;
TR_NZL.RT:=exec('NumberOfWeek','#datetime',_data,2);
TR_NZL.RD:=_data~3;
~~


\tr_nzl_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Generowanie dyspozycji transportu
::   WE: _a - uidref dokumentu
::       [_b] - komunikaty: 1 - on(domyślnie) / 0 - off
::       [_c] - rodzaj dyspozycji [(Z)aładunek / (R)ozładunek]
::       [_d] - wymagana moc transportowa T/N
::----------------------------------------------------------------------------------------------------------------------
_new_trzl:=null;
_del_trzl:=1;

_dok:={? var_press('_a')=type_of(null()) || _a || null ?};
_kom:={? var_press('_b')=1 || _b || 1 ?};
_rodz:={? var_press('_c')=2 & _c='Z' || 'Z' || 'R' ?};
_wym_moc:='N';
{? var_pres('_d')=type_of('')
      &
   (_d='N' | _d='T')
||
   _wym_moc:=_d
?};

{? _dok=null()
||
   {? _kom || FUN.info('Nie przekazano dokumentu.'@) ?};
   return(0)
?};

_Tab:=ref_tab(_dok);

{? var_press('_Tab')<0
||
   {? _kom || FUN.info('Przekazano błędny parametr dokumentu.'@) ?};
   return(0)
?};

_Tab.cntx_psh();
_Tab.use(ref_name(_dok));
_Tab.cntx_psh();
_Tab.prefix();
{? ~_Tab.seek(_dok)
||
   {? _kom || FUN.info('Nie znaleziono przekazanego dokumentu.'@) ?};
   _Tab.cntx_pop();
   _Tab.cntx_pop();
   return(0)
?};

POM.TAB:='TR_NZL';
POM.TYPDOK:='TRZ';
exec('add_grnr','numery',POM.TYPDOK);
_czy_num:=exec('nr_pola','numery');
TR_NZL.cntx_psh();
TR_NZL.prefix();
TR_NZL.blank();
TR_NZL.WYM_MOC:=_wym_moc;
{? _czy_num & TR_NZL.add() & exec('add_blk','transport_zlec',TR_NZL.ref())
||
   {? TR_NZL.ODDZ<>''
   || TR_NZL.ORDER:=exec('code_order','transport_paczki',TR_NZL.IDADD,TR_NZL.ref(),TR_NZL.ODDZ);
      TR_NZL.put(1)
   ?};
   _new_trzl:=TR_NZL.ref();
   _new_trzl_uid:=TR_NZL.uidref();
   TR_NZL.memo_set('','OPIS');

   _var_tr_nzl:=exec('var_tr_nzl','transport_zlec');
   _var_tr_nzl.KH:=null();
   _var_tr_nzl.KH_ODB:=null();
   _var_tr_nzl.KH_MSC:=null();
   _var_tr_nzl.POS:=null();
   _var_tr_nzl.MG:=null();
   _var_tr_nzl.WYS:=null();
   _var_tr_nzl.KRAJ:='';
   _var_tr_nzl.MIASTO:='';
   _var_tr_nzl.UL:='';
   _var_tr_nzl.KPOCZ:='';
   _var_tr_nzl.POCZ:='';
   _var_tr_nzl.NUMER:='';
   _var_tr_nzl.LOKAL:='';
   _var_tr_nzl.RODZ:='Z';
   _var_tr_nzl.DP:=date(0,0,0);
   _var_tr_nzl.DT:=date(0,0,0);
   _var_tr_nzl.DR:=date(0,0,0);
   _var_tr_nzl.UWAGI:='';
   _var_tr_nzl.PO_FIRST:=1;

   params_set('context',params_get(),'var_tr_nzl',_var_tr_nzl);

   exec('fak_numer','numery','',0);
   exec('znak','numery','TR_NZL');

   _nag_edit:=0;
   {? _Tab=ZLP ||
      TR_NZL.WHERE_OP:='Zgłoszenie jednorazowe';
      _nag_edit:=exec('tr_nzl_gen_ZLP','transport_zlec',_dok, _kom, _rodz)
   ?};
   {? _Tab=UPMZAD ||
      TR_NZL.WHERE_OP:='Przewóz z umowy';
      _nag_edit:=exec('tr_nzl_gen_UPMZAD','transport_zlec',_dok, _kom, _rodz)
   ?};

   {? _nag_edit
   ||
      exec('addTR_HKH','transport_wspolne',TR_NZL);
      exec('setMMYY','transport_zlec');
      TR_NZL.STATUS:=exec('tr_nzl_status','transport_zlec');
      {? TR_NZL.WHERE='TR_NZL' || exec('status_MG','transport_wspolne') ?};
      _wyn:=TR_NZL.put(1);
      {? _wyn
      ||
         TR_NZL.memo_put(,'OPIS');
         exec('log_nag','transport_wspolne',TR_NZL.uidref(),'gen');

         _rodz:=TR_NZL.RODZ;

::         Pozycje ...
         _poz:=0;
         {? _Tab=ZLP & exec('tr_nzl_gen_ZLP_poz','transport_zlec',_dok, _kom, _rodz) || _poz:=1 ?};
         {? _Tab=UPMZAD & exec('tr_nzl_gen_UPMZAD_poz','transport_zlec',_dok, _kom, _rodz) || _poz:=1 ?};

         {? _poz>0
         ||
            _del_trzl:=0
         ?};

         exec('sum_poz','transport_zlec', _new_trzl);
         exec('ktm2tr_nzl','transport_zlec',_new_trzl)
      ?};
      exec('done_blk','transport_zlec',_new_trzl)
   ?};

   {? _del_trzl
   ||
::    usuwanie numeru
      exec('done_blk','transport_zlec',_new_trzl);
      exec('tr_nzl_usu','transport_zlec', {? _kom || 0 || 1 ?});
      _new_zam:=null
   ?}
||
   {? _kom || FUN.info('Nieudana próba zablokowania tabeli nagłówków dyspozycji transportu.\nSpróbuj ponownie.'@) ?}
?};
TR_NZL.cntx_pop();
_Tab.cntx_pop();
_Tab.cntx_pop();
1


\tr_nzl_gen_UPMZAD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Generowanie dyspozycji transportu z UPMZAD
::   WE: _a - uidref dokumentu
::       _b - komunikaty: 1 - on(domyślnie) / 0 - off
::       _c - rodzaj dyspozycji [(Z)aładunek / (R)ozładunek]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dok:=_a;
_use_name:=ref_name(_dok);
_kom:=_b;
_rodz:=_c;
_result:=0;

_wymiana:='';
_grp:=0;

UPMZAD.cntx_psh();
UPMZAD.use(_use_name);
{? UPMZAD.seek(_dok)
||
   _uid:=UPMZAD.uidref();
   _oddz:=UPMZAD.ODDZ;
::   Wymiana
   {? UPMZAD.RODZ='W'
   ||
      TR_NZL.GRP:=_uid
   ?};
::   Dokument
   TR_NZL.WHERE:='UPMZAD';
   TR_NZL.ODDZ:=_oddz;
   TR_NZL.DOK:=exec('record','#to_string',_uid);
   TR_NZL.DOK_REF:=_uid;
   TR_NZL.UWAGI:='';
   _opis:=UPMZAD.memo_txt(,1,'UW');
   TR_NZL.memo_set(_opis,'OPIS');

::   Adres
   TR_NZL.KH:=UPMZAD.KH;
   TR_NZL.KH_ODB:=null;
   TR_NZL.POS:=UPMZAD.POS;
   TR_NZL.WYS:=null;

   TR_NZL.KRAJ:='';
   TR_NZL.MIASTO:=UPMZAD.MIA().NAZ;
   TR_NZL.UL:=UPMZAD.UL().UL;
   TR_NZL.NUMER:=UPMZAD.POS().NR;
   TR_NZL.LOKAL:='';
   TR_NZL.KPOCZ:=UPMZAD.UL().KDP;
   TR_NZL.POCZ:=UPMZAD.UL().MIA().NAZ;
   TR_NZL.DZIELN:=UPMZAD.DZI().NAZ;
   TR_NZL.TEL:={? UPMZAD.KH<>null || UPMZAD.KH().TEL || '' ?};
   TR_NZL.EM:={? UPMZAD.KH<>null || UPMZAD.KH().EM || '' ?};

::   Pojazd
   TR_NZL.POJAZD:=null;

::   Data realizacji
   TR_NZL.DT:=UPMZAD.DP;
::   {? UPMZAD.PLTRA<>null
::   ||
::      TR_NZL.DT:=UPMZAD.PLTRA().D
::   ?};

::   Daty i rodzaj
   {? _rodz='R'
   ||
      TR_NZL.RODZ:='R';
::   Indeks
      TR_NZL.KTM:=UPMZAD.NEW_M().KTM;
::   Kategoria transportu
      TR_NZL.TR_RODZ:=UPMZAD.NEW_M().TR_RODZ

   |? _rodz='Z'
   ||
      TR_NZL.RODZ:='Z';
::   Indeks
      TR_NZL.KTM:=UPMZAD.OLD_M().KTM;
::   Kategoria transportu
      TR_NZL.TR_RODZ:=UPMZAD.OLD_M().TR_RODZ

   ?};
   {? TR_NZL.TR_RODZ().CTRL<>'T' || TR_NZL.WYM_MOC:='N' ?};

   _result:=1
?};
UPMZAD.cntx_pop();
_result


\tr_nzl_gen_UPMZAD_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Generowanie dyspozycji transportu z UPMZAD
::   WE: _a - uidref dokumentu
::       _b - komunikaty: 1 - on(domyślnie) / 0 - off
::       _c - rodzaj dyspozycji [(Z)aładunek / (R)ozładunek]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dok:=_a;
_use_name:=ref_name(_dok);
_kom:=_b;
_rodz:=_c;
_result:=0;

UPMZAD.cntx_psh();
UPMZAD.use(_use_name);
TR_ZL.cntx_psh();
TR_ZL.prefix();
TR_ZL.blank();
{? UPMZAD.seek(_dok)
||
   _uid:=UPMZAD.uidref();
   TR_ZL.TR_NZL:=TR_NZL.ref();
   {? _rodz='R'
   ||
      TR_ZL.M:=UPMZAD.NEW_M;
      TR_ZL.IL:=UPMZAD.NEW_IL;
      TR_ZL.JM:=UPMZAD.NEW_M().J
   |? _rodz='Z'
   ||
      TR_ZL.M:=UPMZAD.OLD_M;
      TR_ZL.IL:=UPMZAD.OLD_IL;
      TR_ZL.JM:=UPMZAD.OLD_M().J
   ?};
   TR_ZL.memo_set('','POZ_OPIS');
   {? TR_ZL.M<>null
   ||
      TR_ZL.POZ_REF:=_uid;
      TR_ZL.SZER:=TR_ZL.M().SZER*VAR.JMPRZ$3;
      TR_ZL.DLUG:=TR_ZL.M().DLUG*VAR.JMPRZ$3;
      TR_ZL.WYSO:=TR_ZL.M().WYS*VAR.JMPRZ$3
   ?};
   Plugin.run('UPMZAD_FORM_001','GEN_DTRAN');
   exec('poz_przelicz','transport_zlec');
   {? TR_ZL.add()
   ||
      exec('sum_poz','transport_zlec',TR_NZL.ref());
      exec('ktm2tr_nzl','transport_zlec',TR_ZL.TR_NZL);
      _result:=1
   ?}
?};
TR_ZL.cntx_pop();
UPMZAD.cntx_pop();
_result


\tr_nzl_gen_ZLP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Generowanie dyspozycji transportu z ZLP
::   WE: _a - uidref dokumentu
::       _b - komunikaty: 1 - on(domyślnie) / 0 - off
::       _c - rodzaj dyspozycji [(Z)aładunek / (R)ozładunek]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dok:=_a;
_use_name:=ref_name(_dok);
_kom:=_b;
_rodz:=_c;
_result:=0;

_wymiana:='';
_grp:=0;

ZLP.cntx_psh();
ZLE.cntx_psh();
ZLP.use(_use_name);
{? ZLP.seek(_dok) & ZLP.ZLE
||
   ZLE.use(ref_name(ZLP.ZLE));
   _zlp_uid:=ZLP.uidref();
   _oddz:=ZLP.ZLE().ODDZ;
:: pole ZLP.WYMIANA przechowuje ZLP.uidref() zgłoszenia, którego ZLP.RODZ='W'
   _wymiana:={? _rodz='R' || ZLP.WYMIANA2 || ZLP.WYMIANA ?};
   {? +_wymiana=48
   || ZLP.cntx_psh();
      _mskwym:=form(8+(_wymiana+16));
      {? _mskwym<>'' || ZLP.use(_mskwym) ?};
      _dw:=exec('FindAndGet','#table',ZLP,_wymiana,,"ZLP.DW",~~);
      ZLP.cntx_pop();
      {? _dw<>~~ & _dw<>date(0,0,0) || _wymiana:='' ?}
   ?};
::   Dokument
   TR_NZL.WHERE:='ZLP';
   TR_NZL.ODDZ:=_oddz;
   TR_NZL.DOK:=exec('record','#to_string',_zlp_uid);
   TR_NZL.DOK_REF:=_zlp_uid;
   TR_NZL.UWAGI:=ZLP.U;
   _opis:=ZLP.memo_txt(,1,'OPIS');
   TR_NZL.memo_set(_opis,'OPIS');

::   Adres
   TR_NZL.KH:=ZLP.KH;
   TR_NZL.KH_ODB:=ZLP.KH_ODB;
   TR_NZL.POS:=ZLP.POS;
   TR_NZL.WYS:=ZLP.WYS;
   _addr:='KH';
   {? TR_NZL.KH_ODB<>null || _addr:='KH_ODB' ?};
   {? TR_NZL.POS<>null || _addr:='POS' ?};
   ADDR_CHO.cntx_psh();
   ADDR_CHO.index('KOD');
   ADDR_CHO.prefix(_addr,);
   {? ADDR_CHO.first()
   ||
      TR_NZL.ADDR_CHO:=ADDR_CHO.ref()
   ?};
   ADDR_CHO.cntx_pop();
   exec('adres_set_select','transport_wspolne','TR_NZL',_addr);

::   Pojazd
   TR_NZL.POJAZD:=ZLP.POJAZD;
::   Indeks
   TR_NZL.KTM:=ZLP.MJ().KTM;
::   Kategoria transportu
   TR_NZL.TR_RODZ:=ZLP.MJ().TR_RODZ;

::   Daty i rodzaj
   {? _rodz='R'
   ||
      TR_NZL.RODZ:='R';
      TR_NZL.DT:=ZLP.DZP

   |? _rodz='Z'
   ||
      TR_NZL.RODZ:='Z';
      TR_NZL.DT:=ZLP.DZ
   ?};
   {? TR_NZL.TR_RODZ().CTRL<>'T' || TR_NZL.WYM_MOC:='N' ?};

   _result:=1
?};
ZLE.cntx_pop();
ZLP.cntx_pop();
:: grupujemy z transportem załadunku dotyczącym zgłoszenia wymiany
{? _result & _rodz='R' & _wymiana<>''
||
   _Tr_nzl:=exec('get_tr_nzl','transport_zlec',_wymiana);
   _Tr_nzl.prefix('Z');
   _loop:=_Tr_nzl.first();
   {!
   |? _loop
   |!
      _loop:=
         exec('FindAndGet','#table',TR_NZL,_Tr_nzl.REF,,"
            _wymiana:=_b;
::          grupujemy z wcześniej utworzoną dyspozycją załadunku
            TR_NZL.GRP:=_wymiana;
            TR_NZL.put()
         ",0,_wymiana)
            &
         _Tr_nzl.next()
   !}
?};
TR_NZL.GRP:=_wymiana;
_result


\tr_nzl_gen_ZLP_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Generowanie dyspozycji transportu z ZLP
::   WE: _a - uidref dokumentu
::       _b - komunikaty: 1 - on(domyślnie) / 0 - off
::       _c - rodzaj dyspozycji [(Z)aładunek / (R)ozładunek]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dok:=_a;
_use_name:=ref_name(_dok);
_kom:=_b;
_rodz:=_c;
_result:=0;

ZLP.cntx_psh();
ZLP.use(_use_name);
TR_ZL.cntx_psh();
TR_ZL.prefix();
TR_ZL.blank();
{? ZLP.seek(_dok)
||
   _zlp_uid:=ZLP.uidref();
   TR_ZL.TR_NZL:=TR_NZL.ref();
   TR_ZL.M:=ZLP.MJ;
   TR_ZL.IL:=ZLP.IL;
   TR_ZL.JM:=ZLP.MJ().J;
   TR_ZL.memo_set('','POZ_OPIS');
   {? TR_ZL.M<>null
   ||
      TR_ZL.POZ_REF:=_zlp_uid;
      TR_ZL.SZER:=TR_ZL.M().SZER*VAR.JMPRZ$3;
      TR_ZL.DLUG:=TR_ZL.M().DLUG*VAR.JMPRZ$3;
      TR_ZL.WYSO:=TR_ZL.M().WYS*VAR.JMPRZ$3
   ?};
   exec('poz_przelicz','transport_zlec');
   {? TR_ZL.add()
   ||
      exec('sum_poz','transport_zlec',TR_NZL.ref());
      exec('ktm2tr_nzl','transport_zlec',TR_ZL.TR_NZL);
      _result:=1
   ?}
?};
TR_ZL.cntx_pop();
ZLP.cntx_pop();
_result


\legztrnzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: legenda TR_NZL
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','TR_NZL#01')


\tr_nzl_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: ustawienie kolorowania dla dyspozycji transportu
::----------------------------------------------------------------------------------------------------------------------
_wyn:={? TR_NZL.STAT_REJ='A' || 'TR_NZL#01#08'
      |? TR_NZL.WHERE='TR_NZL'
      || {? TR_NZL.STAT_REJ='Z'
         || {? (1+TR_NZL.STMG)='B' & TR_NZL.MGDSP='S' || 'TR_NZL#01#06'
            |? (1+TR_NZL.STMG)='B' & TR_NZL.MGDSP='X' || 'TR_NZL#01#07'
            |? (1+TR_NZL.STMG)='C'                    || 'TR_NZL#01#05'
            || 'TR_NZL#01#04'
            ?}
         || ''
         ?}
      |? TR_NZL.REAL='T'     || {? exec('ctrl_poz','transport',TR_NZL.ref())=1
                                || 'TR_NZL#01#02'
                                || 'TR_NZL#01#03'
                                ?}
      |? TR_NZL.REAL='W'     || 'TR_NZL#01#03'
      |? TR_NZL.STAT_REJ='Z' || {? TR_NZL.STATUS='zrealizowane' || 'TR_NZL#01#02' || 'TR_NZL#01#01' ?}
      || ''
      ?};
_wyn


\BL_TR_ZLPOZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: numer pozycji
::----------------------------------------------------------------------------------------------------------------------
exec('NewOrder','#table', 'TR_ZL', 'POZ', 'POZ', TR_NZL.ref())


\sum_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: sumowanie ilość z pozycji do nagłówka dyspozycji
::   WE: [_a] - ref nagłówka TR_NZL - jeżeli nie podany, będzie pobrany ref aktualnej dyspozycji w buforze
::----------------------------------------------------------------------------------------------------------------------
::_il:=0;
_sz:=_m3:=_tn:=_op:=0;
_zsz:=_zm3:=_ztn:=_zop:=0;
_ilreal:=_ilpoz:=0;
_zlec:=null;
_zlec_ref:={? var_press('_a')=7 || 1 || 0 ?};

{? _zlec_ref
||
   TR_NZL.cntx_psh();
   {? TR_NZL.seek(_a)
   ||
      _zlec:=TR_NZL.ref()
   ?}
||
   _zlec:=TR_NZL.ref()
?};

{? _zlec<>null
||

   TR_ZL.cntx_psh();
   TR_ZL.index('POZ');
   TR_ZL.prefix(_zlec,);
   {? TR_ZL.first()
   ||
      {! |?
         _ilpoz+=1;
         _ilreal+={? ';TA'*TR_ZL.REAL || 1 || 0 ?};
         _sz+=TR_ZL.IL_SZT;
         _m3+=TR_ZL.IL_M3;
         _tn+=TR_ZL.IL_T;
         _op+=TR_ZL.IL_OP;
         _zsz+=TR_ZL.ZIL_SZT;
         _zm3+=TR_ZL.ZIL_M3;
         _ztn+=TR_ZL.ZIL_T;
         _zop+=TR_ZL.ZIL_OP;
         TR_ZL.next()
      !}
   ?};
   TR_ZL.cntx_pop();

   TR_NZL.IL_SZT:=_sz;
   TR_NZL.IL_M3:=_m3;
   TR_NZL.IL_T:=_tn;
   TR_NZL.IL_OP:=_op;
   TR_NZL.ZIL_SZT:=_zsz;
   TR_NZL.ZIL_M3:=_zm3;
   TR_NZL.ZIL_T:=_ztn;
   TR_NZL.ZIL_OP:=_zop;
   TR_NZL.REAL:={? _ilpoz>0 & _ilpoz=_ilreal
                || 'T'
                |? _ilreal=0
                || 'N'
                || 'W'
                ?}
?};

{? _zlec_ref & _zlec<>null()
||
   TR_NZL.put();
   TR_NZL.cntx_pop()
?};
1


\poz_przelicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: przeliczenie ilości dla pozycji dyspozycji aktualnie w buforze
::----------------------------------------------------------------------------------------------------------------------
:: informacje o materiale, jednostce oraz ilości
_jm:=TR_ZL.JM().KOD;
_il:=TR_ZL.IL;
_tow:=TR_ZL.M().RODZ='T';
{? ~_tow || TR_ZL.IL_OP:=0 ?};
:: sprawdza czy dana pozycja jest ze zgłoszeń jednorazowych/podstawień
_is_zgl:=(';ZLP;UPMZAD;'*TR_ZL.TR_NZL().WHERE)>1;

_resplug:=Plugin.run('TRANSPORT_PRZELICZ_001');

_noO:=_noT:=_noM:=_noS:=0;

{? type_of(_resplug)=type_of('') & _resplug<>''
|| _resplug:=-~_resplug;
   _noO:=(_resplug*'o')>0;
   _noT:=(_resplug*'t')>0;
   _noM:=(_resplug*'m')>0;
   _noS:=(_resplug*'s')>0
?};
  _pil_t:={? _noT || TR_ZL.IL_T || 0 ?};
 _pil_m3:={? _noM || TR_ZL.IL_M3 || 0 ?};
_pil_szt:={? _noS || TR_ZL.IL_SZT || 0 ?};
 _pil_op:={? _noO || TR_ZL.IL_OP || 0 ?};

:: Pobranie podstawowych jednostek
_jm_szt:=exec('FindInSet','#table','JM','KOD','szt',,,1);
_jm_t:=exec('FindInSet','#table','JM','KOD','t',,,1);
_jm_m3:=exec('FindInSet','#table','JM','KOD','m3',,,1);
_jm_op:=exec('FindInSet','#table','JM','KOD','op',,,1);

_il_t:=0;
_il_m3:=0;
_il_szt:=0;
_il_op:=0;

:: informacje z materiału na podstawie jednostki: waga, objętość i sztuki
:: wartości są obliczane według przeliczników:
:: - materiału,
:: - standardowych jeżeli nie podano dla materiału

:: obliczanie wagi
_czy_waga_brutto:=1;
_waga_kartotekowa_kg:={? _czy_waga_brutto || TR_ZL.M().WB || TR_ZL.M().WN ?};
_prz:=exec('prz','jm', TR_ZL.M, _jm_t, TR_ZL.JM);
_dokl:=exec('przeldok','jm', TR_ZL.M, _jm_t, TR_ZL.JM);
_dokl:={? _dokl<0 || 3 || _dokl ?};

{? _jm='t'
||
   _il_t:=_il

|? _prz & (_jm='kg' | _jm='g' | _jm='Mg')
||
   _il_t:=(_il / _prz)$_dokl

|? _waga_kartotekowa_kg
||
   _il_t:=_il * _waga_kartotekowa_kg / 1000

|? _prz
||
   _il_t:=(_il / _prz)$_dokl
?};

:: obliczanie objętości
_objetosc_kartotekowa:=TR_ZL.M().OBJ;
_objetosc_il:=TR_ZL.M().ILOBJ;
{? _objetosc_il=0 || _objetosc_il:=1 ?};
_prz:=exec('prz','jm', TR_ZL.M, _jm_m3, TR_ZL.JM);
_dokl:=exec('przeldok','jm', TR_ZL.M, _jm_m3, TR_ZL.JM);
_dokl:={? _dokl<0 || 3 || _dokl ?};

{? _jm='m3'
||
   _il_m3:=_il

|? _prz & _jm='l'
||
   _il_m3:=(_il / _prz)$_dokl

|? _objetosc_kartotekowa
||
   _il_m3:=_il * (1 / _objetosc_il) * _objetosc_kartotekowa

|? _prz
||
   _il_m3:=(_il / _prz)$_dokl
?};

:: obliczanie ilości sztuk
_prz:=exec('prz','jm', TR_ZL.M, _jm_szt, TR_ZL.JM);
_dokl:=exec('przeldok','jm', TR_ZL.M, _jm_szt, TR_ZL.JM);
_dokl:={? _dokl<0 || 3 || _dokl ?};

{? _jm='szt' | (~_prz & _is_zgl)
||
   _il_szt:=_il

|? _prz
||
   _il_szt:=(_il / _prz)$_dokl
?};

:: obliczanie ilości opakowań
{? ~_tow
|| _il_op:=0
|| _prz:=exec('prz','jm',TR_ZL.M,_jm_op,TR_ZL.JM);
   _dokl:=exec('przeldok','jm',TR_ZL.M,_jm_op,TR_ZL.JM);
   _dokl:={? _dokl<0 || 3 || _dokl ?};

   {? _jm='op'
   || _il_op:=_il
   |? _prz
   || _il_op:=(_il/_prz)$_dokl
   || _il_op:={? TR_ZL.M().RODZ='T' || 1 || 0 ?}
   ?}
?};
:: pobiera wymiary z kartoteki materiałowej
_buf:=exec('pobWymPack','transport_paczki',TR_ZL.M,TR_ZL.IL,TR_ZL.JO);
{? _buf[1]>0 || TR_ZL.DLUG:=_buf[1]*0.01 $3 ?};
{? _buf[2]>0 || TR_ZL.SZER:=_buf[2]*0.01 $3 ?};
{? _buf[3]>0 || TR_ZL.WYSO:=_buf[3]*0.01 $3 ?};

TR_ZL.IL_T:={? _buf[4] || _buf[4]*0.001 $3 |? ~_noT || _il_t || _pil_t ?};
TR_ZL.IL_M3:={? ~_noM || _il_m3 || _pil_m3 ?};
TR_ZL.IL_SZT:={? ~_noS || _il_szt || _pil_szt ?};
TR_ZL.IL_OP:={? _buf[6]>0 || _buf[6] |? ~_noO || _il_op || _pil_op ?};
obj_del(_buf);
1


\get_tr_nzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: zwraca tabele sqlref'ów ($TR_NZL.ref()) nagłówków dyspozycji transportu powiązanych z dokumentem _a
::   WE: _a - uidref dokumentu np. ZLP.uidref()
::       [_b] - 'DOK_REF', 'GRP'
::       [_c] - DOK_REF - powiązane
::   WY: patrz opis
::----------------------------------------------------------------------------------------------------------------------
_dok:=_a;
_ind:={? var_pres('_b')=type_of('') || _b || 'DOK_REF' ?};
_drf:={? var_pres('_c')=type_of('') & (+_c)=48 || _c || '' ?};

_result:=tab_tmp(
   ,'RODZ', 'STRING[1]',   'Rodzaj dyspozycji'
   ,'REF',  'STRING[16]',  'REFERENCE');

{? _dok='' || return(_result) ?};


_maska_b:='';
_maska_e:='';

_maska:='';
_Tab:={? _drf<>'' || ref_tab(_drf) || ref_tab(_dok) ?};
_posmsk:=_Tab=ZK_N | _Tab=ZD_NAG | _Tab=ND | _Tab=ZDP_NAG;
{? type_of(_Tab)<>type_of(~~)
||
:: powiązane transporty do zgłoszeń jednorazowych lub przewozów
   _data:=
      {? _Tab=ZLP | _Tab=UPMZAD | _Tab=ZK_N | _Tab=ZD_NAG | _Tab=ZDP_NAG | _Tab=ND
      ||
         _maska_b:=exec('FindAndGet','#table',_Tab,{? _drf<>'' || _drf || _dok ?},,"TRARCH_B",'');
         _maska_e:=exec('FindAndGet','#table',_Tab,{? _drf<>'' || _drf || _dok ?},,"TRARCH_E",'')
      ?}
||
:: dyspozycje dodane ręcznie
   _maska_b:='0000';
   _maska_e:=''
?};
_Tr_nzl_names:=exec('tr_nzl_names','transport_zlec',_maska_b,_maska_e,,_posmsk);
:: iterujemy po maskach tabeli nagłówków transportów
_loop:=_Tr_nzl_names.first();
{!
|? _loop
|!
   {? ~_posmsk
   || TR_NZL.cntx_psh();
      TR_NZL.use(_Tr_nzl_names.NAME);
      TR_NZL.cntx_psh();
      TR_NZL.index(_ind);
      TR_NZL.prefix(_dok);
::    iterujemy po nagłówkach transportów powiązanych z dokumentem
      _loop:=TR_NZL.first();
      {!
      |? _loop
      |! _result.RODZ:=TR_NZL.RODZ;
         _result.REF:=$TR_NZL.ref();
         _loop:=_result.add() & TR_NZL.next()
      !};
      TR_NZL.cntx_pop();
      TR_NZL.cntx_pop()
   || TR_NZL.cntx_psh();
      TR_ZL.cntx_psh();
      TR_NZL.use('trnl'+(_Tr_nzl_names.NAME+4));
      TR_ZL.use(_Tr_nzl_names.NAME);

      TR_ZL.cntx_psh();
      TR_ZL.index(_ind);
      TR_ZL.prefix(_dok);
::    iterujemy po pozycjach transportów powiązanych z dokumentem
      _buf:=tab_tmp(1,'SQL','STRING[16]','');
      _loop:=TR_ZL.first();
      {!
      |? _loop
      |!
         {? (_buf.clear(); _buf.prefix($TR_ZL.TR_NZL,); ~_buf.first())
         || _result.RODZ:=TR_ZL.TR_NZL().RODZ;
            _result.REF:=$TR_ZL.TR_NZL;
            {? _result.add(1)
            || _buf.SQL:=$TR_ZL.TR_NZL;
               _buf.add(1);
               _loop:=TR_ZL.next()
            || _loop:=0
            ?}
         || _loop:=TR_ZL.next()
         ?};
         _loop
      !};
      obj_del(_buf);
      TR_ZL.cntx_pop();
      TR_NZL.cntx_pop();
      TR_ZL.cntx_pop()
   ?};
   _loop:=_Tr_nzl_names.next()
!};

_result


\pozycja_edit_field
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Blokada pól w oknie edycji pozycji
::----------------------------------------------------------------------------------------------------------------------
_win_red:=TR_ZL.win_edit('?');
TR_ZL.efld_opt(_win_red,'enable=1',,'IL_OP');
TR_ZL.efld_opt(_win_red,'editable=grayed',,'IL_OP');

TR_ZL.efld_opt(_win_red,'editable=0',TR_ZL,'JM');
TR_ZL.efld_opt(_win_red,'editable=grayed',TR_ZL,'IL_T');
TR_ZL.efld_opt(_win_red,'editable=grayed',TR_ZL,'IL_M3');
TR_ZL.efld_opt(_win_red,'editable=grayed',TR_ZL,'IL_SZT');

_dokLog:=(';ZK_N;ZD_NAG;ZDP_NAG;ND;REK_N;ZGP;'*TR_ZL.TR_NZL().WHERE)>1;
_editM :={? TR_ZL.TR_NZL().WHERE<>'' || 'grayed' || '1' ?};
_editIL:={? _dokLog | TR_ZL.TR_NZL().WHERE='' || '1' || 'grayed' ?};
_editMG:={? _dokLog  || '1' || 'grayed' ?};

TR_ZL.efld_opt(_win_red,'editable='+_editM,TR_ZL,'M');
TR_ZL.efld_opt(_win_red,'editable='+_editIL,TR_ZL,'IL');
TR_ZL.efld_opt(_win_red,'editable='+_editMG,TR_ZL,'MG');
TR_ZL.efld_opt(_win_red,'editable='+{? _dokLog || '0' || '1' ?},POMOC,'RODZT');
~~


\pozycja_menu_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Blokowanie akcji na pozycji jeżeli nie ma nagłówków
::----------------------------------------------------------------------------------------------------------------------
{? TR_NZL.size()=0
|| TR_ZL.actions_grayed('POZ','DPUG:D')
|| {? TR_ZL.size()=0 || TR_ZL.actions_grayed('POZ','') ?}
?}


\trnzl_kh_fileds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Blokowanie / Odblokowanie pól powiązanych z kontrahentem
::   WE: _a - _win_red
::----------------------------------------------------------------------------------------------------------------------
editable:={? TR_NZL.KH<>null || '1' || '0' ?};
_change_kh:=0;
_tr_msc:=TR_NZL.TR_ZEWN<>null() & TR_NZL.TR_ZEWN().WYB_MSC;
{? TR_NZL.KH<>null
||
   {? TR_NZL.KH_ODB<>null & TR_NZL.KH_ODB().KH().ref()<>TR_NZL.KH().ref() || _change_kh:=1 ?};
   {? ~_tr_msc & TR_NZL.KH_MSC<>null & TR_NZL.KH_MSC().KH().ref()<>TR_NZL.KH().ref() || _change_kh:=1 ?};
   {? TR_NZL.POS<>null & TR_NZL.POS().KH().ref()<>TR_NZL.KH().ref() || _change_kh:=1 ?};
   BEER.KH:=TR_NZL.KH;
   KH_MSC_Z.KH:=TR_NZL.KH;
   ZLEC.KH:=TR_NZL.KH;
   UMO.KHPOS:=TR_NZL.KH
||
   _change_kh:=1
?};
{? _change_kh
||
   TR_NZL.KH_ODB:=null();
   {? ~_tr_msc || TR_NZL.KH_MSC:=null() ?};
   TR_NZL.POS:=null();
   ZLEC.POS_NR:='';
   ZLEC.UL:=null();
   ZLEC.MIA:=null();
   ZLEC.POS:=null()
?};
_win_red:={? var_press('_a')>-1 || _a || cur_win(1,1) ?};
TR_NZL.efld_opt(_win_red,'editable=' + editable,TR_NZL,'KH_ODB');
{? _tr_msc
|| TR_NZL.efld_opt(_win_red,'editable=1',TR_NZL,'KH_MSC')
|| TR_NZL.efld_opt(_win_red,'editable=' + editable,TR_NZL,'KH_MSC')
?};
TR_NZL.efld_opt(_win_red,'editable=' + editable,ZLEC,'POS_NR');
~~


\tr_nzl_status_oczekujace
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: TR_NZL.STATUS - oczekujące
::   WE:
::   WY: 'oczekujące'
::----------------------------------------------------------------------------------------------------------------------
'oczekujące'


\tr_nzl_status_nowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: TR_NZL.STATUS - nowe
::   WE:
::   WY: 'nowe'
::----------------------------------------------------------------------------------------------------------------------
'nowe'


\tr_nzl_status_do_planowania
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: TR_NZL.STATUS - do planowania
::   WE:
::   WY: 'do planowania'
::----------------------------------------------------------------------------------------------------------------------
'do planowania'


\tr_nzl_status_zaplanowane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: TR_NZL.STATUS - zaplanowane
::   WE:
::   WY: 'zaplanowane'
::----------------------------------------------------------------------------------------------------------------------
'zaplanowane'


\tr_nzl_status_w_realizacji
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: TR_NZL.STATUS - w realizacji
::   WE:
::   WY: 'w realizacji'
::----------------------------------------------------------------------------------------------------------------------
'w realizacji'


\tr_nzl_status_zrealizowane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: TR_NZL.STATUS - zrealizowane
::   WE:
::   WY: 'zrealizowane'
::----------------------------------------------------------------------------------------------------------------------
'zrealizowane'


\tr_nzl_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: ustala status dypozycji transportu
::   WE:
::   WY: status dyspozycji transportu
::----------------------------------------------------------------------------------------------------------------------
_uid:='';
_dok_ref:=TR_NZL.DOK_REF;
:: sprawdzenie czy przydzielono wymagane moce przerobowe
_oczekujace:=TR_NZL.WYM_MOC='T' & TR_NZL.TR_MOC=null();
{? _oczekujace=0
||
   _Tab:=ref_tab(_dok_ref);
   {? type_of(_Tab)<>type_of(~~)
   ||
      {? TR_NZL.RODZ='R'
      ||
         {? _Tab=ZLP
         ||
::          brak daty podstawienia
            _oczekujace:=exec('FindAndGet','#table',ZLP,_dok_ref,,"ZLP.DZP=date(0,0,0)",0)
         ?}
      ||
         {? _Tab=ZLP
         ||
::          podstawienie niezrealizowane
::          lub brak daty wykonania
            _oczekujace:=
               exec('FindAndGet','#table',ZLP,_dok_ref,,"
                  {? ZLP.DZP<>date(0,0,0) & ZLP.DZP=ZLP.DZ & exec('get','#params',100162,2)='T'
                  || 0
                  || ZLP.SP='T' & ZLP.DP=date(0,0,0) | ZLP.DZ=date(0,0,0)
                  ?}
               ",0)
         ?}
      ?};
      {? _oczekujace=0 & TR_NZL.GRP<>''
      ||
         _Tr_nzl:=exec('get_tr_nzl','transport_zlec',TR_NZL.GRP,'GRP');
         {? TR_NZL.RODZ='R'
         ||
            _Tr_nzl.prefix('Z')
         ||
            _Tr_nzl.prefix('R')
         ?};
::       brak drugiej dyspozycji transportowej w ramach wymiany
         {? ~_Tr_nzl.first()
         ||
            _oczekujace:=1
         ?}
      ?}
   ?}
?};
{? _oczekujace
||
:: oczekujące
   exec('tr_nzl_status_oczekujace','transport_zlec')

|? TR_NZL.STAT_REJ='N'
||
:: nowe
   exec('tr_nzl_status_nowe','transport_zlec')

|? TR_NZL.STAT_REJ='Z'
||
   {? TR_NZL.TR_NAG=null() & ~TR_NZL.NOTR
   ||
:: do planowania
      exec('tr_nzl_status_do_planowania','transport_zlec')

   |? TR_NZL.TR_NAG().STAT_REJ='N'
   ||
:: zaplanowane
      exec('tr_nzl_status_zaplanowane','transport_zlec')

   |? ';TZ'*TR_NAG.STAT_REJ
   ||
:: w realizacji, częściowo zrealizowane, zrealizowane
      {? ';TX'*TR_NZL.REAL || exec('tr_nzl_status_zrealizowane','transport_zlec')
      |? TR_NZL.REAL='W' || exec('tr_nzl_status_cz_real','transport_zlec')
      || exec('tr_nzl_status_w_realizacji','transport_zlec')
      ?}
   ||
      'nieokreślone'
   ?}

|? TR_NZL.STAT_REJ='T'
||
   exec('tr_nzl_status_zrealizowane','transport_zlec')
|? TR_NZL.STAT_REJ='A'
|| 'anulowane'
|| 'nieokreślone'
?}


\ktm2tr_nzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: wypelnia pole TR_NZL.KTM oraz dodatkowo pole TR_NZL.DOK w przypadku WHERE równego ZK_N,ZD_NAG,ND
::   WE: _a - ref TR_NZL
::----------------------------------------------------------------------------------------------------------------------
_ktm:='';
_dok:='';
TR_NZL.cntx_psh();
TR_ZL.cntx_psh();
TR_NZL.prefix();
{? TR_NZL.seek(_a)
|| _aktdok:=(';ZK_N;ZD_NAG;ND;ZDP_NAG;REK_N;ZGP;'*TR_NZL.WHERE)>1;
   TR_ZL.index('POZ');
   TR_ZL.prefix(_a);
   {? TR_ZL.first()
   || _break:={? _aktdok || 0 || 2 ?};
      {!
      |? {? _ktm=''
         || _ktm:=TR_ZL.M().KTM
         |? _ktm<>'<kilka różnych pozycji>' & _ktm<>TR_ZL.M().KTM
         || _ktm:='<kilka różnych pozycji>';
            _break+=1
         ?};
         {? _aktdok
         || _buf:=exec('record','#to_string',TR_ZL.DOK_REF);
            {? _dok=''
            || _dok:=_buf
            |? _dok<>'<kilka>' & _dok<>_buf
            || _dok:='<kilka>';
               _break+=2
            ?}
         ?};
         _break<>3 & TR_ZL.next()
      !}
   ?};
   TR_NZL.KTM:=_ktm;
   {? _aktdok || TR_NZL.DOK:=_dok ?};
   TR_NZL.put(1)
?};
TR_NZL.cntx_pop();
TR_ZL.cntx_pop();
1


\tr_nzl_count
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: ilość dyspozycji transportu
::   WE: [_a] - kategoria transportu
::       [_b] - data
::       [_c] - typ okresu ('rd','rt','rm','rr','')
::       [_d] - status dyspozycji transportu
::       [_e] - maska zbioru
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tr_rodz:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_date:={? var_pres('_b')=type_of(date()) || _b || date(0,0,0) ?};
_okr_typ:={? var_pres('_c')=type_of('') || _c || '' ?};
_status:={? var_pres('_d')=type_of('') || _d || '' ?};
_maska:={? var_pres('_e')=type_of('') || _e || '____' ?};

{? _tr_rodz=null() || _okr_typ:='ALL' ?};
{? _date=date(0,0,0) || _okr_typ:='ALL' ?};
{? _okr_typ<>'rd' & _okr_typ<>'rt' & _okr_typ<>'rm' & _okr_typ<>'rr' & _okr_typ<>'' || 'ALL' ?};

_rr:=_date~1;
_rm:=_date~2;
_rt:=exec('NumberOfWeek','#datetime',_date,2);

TR_NZL.cntx_psh();
TR_NZL.use(4+TR_NZL.name()+_maska);
{? _status=''
||
   TR_NZL.index('TR_RODZ');
   {? _okr_typ='rd' || TR_NZL.prefix(_tr_rodz,_rr,_rm,_rt,_date)
   |? _okr_typ='rt' || TR_NZL.prefix(_tr_rodz,_rr,_rm,_rt)
   |? _okr_typ='rm' || TR_NZL.prefix(_tr_rodz,_rr,_rm)
   |? _okr_typ='rr' || TR_NZL.prefix(_tr_rodz,_rr)
   |? _okr_typ=''   || TR_NZL.prefix(_tr_rodz)
                    || TR_NZL.prefix()
   ?}
||
   TR_NZL.index('STATUS');
   {? _okr_typ='rd' || TR_NZL.prefix(_status,_tr_rodz,_rr,_rm,_rt,_date)
   |? _okr_typ='rt' || TR_NZL.prefix(_status,_tr_rodz,_rr,_rm,_rt)
   |? _okr_typ='rm' || TR_NZL.prefix(_status,_tr_rodz,_rr,_rm)
   |? _okr_typ='rr' || TR_NZL.prefix(_status,_tr_rodz,_rr)
   |? _okr_typ=''   || TR_NZL.prefix(_status,_tr_rodz)
                    || TR_NZL.prefix(_status,)
   ?}
?};

_result:=TR_NZL.size();
TR_NZL.cntx_pop();
_result


\tr_nzl_count_moc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: oblicza ilość wykorzystanej mocy na podstawie dyspozycji transportu
::   WE: _a - TR_MOC.ref()
::       _c - status
::       _d - uchwyt do tabeli wykorzystania mocy transportowych
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tr_moc:=_a;
_stuts:=_b;
_Tab:={? var_pres('_c')=type_of(FIRMA) || _c || ~~ ?};

_result:=0;

_tab_add:=type_of(_Tab)<>type_of(~~);

_trarch:=obj_new('B','E');
_trarch.B:='';
_trarch.E:='';
exec('FindAndGet','#table',TR_MOC,_tr_moc,,"
   _trarch:=_b;
   _trarch.B:=TR_MOC.TRARCH_B;
   _trarch.E:=TR_MOC.TRARCH_E
",,_trarch);
TR_NZL.cntx_psh();
_Tr_nzl_names:=exec('tr_nzl_names','transport_zlec',_trarch.B,_trarch.E,1);
_loop:=_Tr_nzl_names.first();
{!
|? _loop
|!
   TR_NZL.use(_Tr_nzl_names.NAME);
   TR_NZL.cntx_psh();
   TR_NZL.index('TR_MOC');
   {? _stuts=''
   ||
      TR_NZL.prefix(_tr_moc)
   ||
      TR_NZL.prefix(_tr_moc,_stuts,)
   ?};
   _loop:=TR_NZL.first();
   {!
   |? _loop
   |!
      _result+=TR_NZL.IL_SZT;
      {? _tab_add
      ||
         exec('use_tab_add','transport_moc',_Tab,TR_NZL.ref(),_stuts)
      ?};
      _loop:=TR_NZL.next()
   !};
   TR_NZL.cntx_pop();
   _loop:=_Tr_nzl_names.next()
!};
TR_NZL.cntx_pop();
_result


\tr_log_count_moc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: oblicza ilość wykorzystanej mocy na podstawie loga dyspozycji transportu
::   WE: _a - TR_MOC.ref()
::       _c - uchwyt do tabeli wykorzystania mocy transportowych
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tr_moc:=_a;
_Tab:={? var_pres('_b')=type_of(FIRMA) || _b || ~~ ?};

_result:=0;

_tab_add:=type_of(_Tab)<>type_of(~~);

_trarch:=obj_new('B','E');
_trarch.B:='';
_trarch.E:='';
exec('FindAndGet','#table',TR_MOC,_tr_moc,,"
   _trarch:=_b;
   _trarch.B:=TR_MOC.TRARCH_B;
   _trarch.E:=TR_MOC.TRARCH_E
",,_trarch);
TR_LOG.cntx_psh();
_Tr_nzl_names:=exec('tr_nzl_names','transport_zlec',_trarch.B,_trarch.E,1);
_loop:=_Tr_nzl_names.first();
{!
|? _loop
|!
   _maska:=_Tr_nzl_names.NAME+4;
   TR_LOG.use(4+TR_LOG.name()+_maska);
   TR_LOG.cntx_psh();
   TR_LOG.index('TR_MOC');
   TR_LOG.prefix(_tr_moc);
   _loop:=TR_LOG.first();
   {!
   |? _loop
   |!
      _result+=TR_LOG.IL_SZT;
      {? _tab_add
      ||
         exec('FindAndGet','#table',TR_NZL,TR_LOG.TR_NZL,,"
            _Tab:=_b;
            exec('use_tab_add','transport_moc',_Tab,TR_LOG.ref(),'')
         ",,_Tab)
      ?};
      _loop:=TR_LOG.next()
   !};
   TR_LOG.cntx_pop()
!};
TR_LOG.cntx_pop();
_result


\tr_nzl_status_cz_real
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: TR_NZL.STATUS - zrealizowane
::   WE:
::   WY: 'zrealizowane'
::----------------------------------------------------------------------------------------------------------------------
'częściowo zrealizowane'


\tr_nzl_kop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Kopiowanie dyspozycji transportu z możliwością zmiany rodzaju dyspozycji (tworzy nowe powiązaną dyspozycję)
::   WE: [_a] - odwrócony rodzaj dyspozycji [0 (domyśłnie) - wyłączone, 1 - odwróci rodzaj dyspozycji oraz je zgrupuje]
::       [_b] - kopia nagłówka do podziału - pozycje mają ilość 0 (domyślnie 0 - off, 1 - on)
::       [_c] - 1 nowe
::       [_d] - 1-wynika z podziału braku realizacji 0(domyślnie)-nie
::----------------------------------------------------------------------------------------------------------------------
_tr_rodz:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_tr_nzl_split:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_new_zlec:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_norea:={? var_pres('_d')=type_of(0) || _d || 0 ?};

{?  exec('tr_nzl_lock','transport_zlec')
||
   POM.TAB:='TR_NZL';
   POM.TYPDOK:='TRZ';

   _bie_trzl:=TR_NZL.ref();
   _new_trzl:=null;
   _bie_trzl_uid:=TR_NZL.uidref();
   _bie_sym:=TR_NZL.SYM;

   TR_NZL.cntx_psh();
   TR_NZL.prefix();
   {? TR_NZL.r_lock(1,1,1)
   ||
::      _var_tr_nzl:=exec('var_tr_nzl','transport_zlec');
      TR_NZL.get();

      {? _tr_rodz
      ||
         TR_NZL.GRP:=_bie_trzl_uid;
         {? TR_NZL.DOK_REF='' || TR_NZL.DOK_REF:=_bie_trzl_uid ?};
         TR_NZL.put()
      ?};

      {? _tr_nzl_split
      ||
         {? TR_NZL.SPLIT='' || TR_NZL.SPLIT:=_bie_trzl_uid ?};
         {? TR_NZL.DOK_REF='' || TR_NZL.DOK_REF:=_bie_trzl_uid ?};
         TR_NZL.put()
      ?};
      TR_NZL.memo_get(,'CMR013');
      TR_NZL.memo_get(,'CMR019');
      TR_NZL.memo_get(,'OPIS');

         TR_NZL.SYM:='';
         TR_NZL.NR:=0;

::      TR_NZL.blank();
      {? TR_NZL.add()
      ||
         {? TR_NZL.ODDZ<>''
         || TR_NZL.ORDER:=exec('code_order','transport_paczki',TR_NZL.IDADD,TR_NZL.ref(),TR_NZL.ODDZ);
            TR_NZL.put(1)
         ?};
         _new_trzl:=TR_NZL.ref();
         _uidref:=TR_NZL.uidref();

         exec('fak_numer','numery','',0);
         exec('znak','numery','TR_NZL');
         exec('setMMYY','transport_zlec');

         {? _tr_rodz
         ||
            TR_NZL.GRP:=_bie_trzl_uid;
            TR_NZL.SPLIT:='';
            TR_NZL.RODZ:={? TR_NZL.RODZ='R' || 'Z' || 'R' ?};
            TR_NZL.STAT_REJ:='N';
            TR_NZL.PLAN:='N';
            TR_NZL.REAL:='N';
            TR_NZL.TR_NAG:=null;
            TR_NZL.TR_MOC:=null;
            TR_NZL.LP_TR:=0;
            TR_NZL.ZIL:=0;
            TR_NZL.ZIL_T:=0;
            TR_NZL.ZIL_M3:=0;
            TR_NZL.ZIL_SZT:=0;
            TR_NZL.STATUS:=exec('tr_nzl_status','transport_zlec');
            {? TR_NZL.WHERE='TR_NZL' || exec('status_MG','transport_wspolne') ?}
         ?};

         {? _tr_nzl_split & ~_norea
         ||
            TR_NZL.STAT_REJ:='N';
            TR_NZL.PLAN:='N';
            TR_NZL.REAL:='N';
            TR_NZL.TR_NAG:=null();
            TR_NZL.MGDSP:='N';
            TR_NZL.STMG:='no';
            TR_NZL.STMGDESC:=exec('stMG_desc','transport_wspolne',TR_NZL.STMG);
            TR_NZL.DR:=date(0,0,0);
            TR_NZL.GR:=time(0,0,0);
            TR_NZL.DP:=date(0,0,0);
            TR_NZL.LP_TR:=0;
            TR_NZL.STATUS:=exec('tr_nzl_status','transport_zlec');
            {? TR_NZL.WHERE='TR_NZL' || exec('status_MG','transport_wspolne') ?}
         ?};

         {? _tr_rodz=0 & _tr_nzl_split=0 & _new_zlec
         ||
            TR_NZL.DP:=date(0,0,0);
            TR_NZL.DR:=date(0,0,0);
            TR_NZL.GR:=time(0,0,0);
            TR_NZL.GRP:='';
            TR_NZL.TR_NAG:=null;
            TR_NZL.LP_TR:=0;
            TR_NZL.MGDSP:='N';
            TR_NZL.STMG:='no';
            TR_NZL.STMGDESC:=exec('stMG_desc','transport_wspolne',TR_NZL.STMG);
            TR_NZL.ZIL:=0;
            TR_NZL.ZIL_T:=0;
            TR_NZL.ZIL_M3:=0;
            TR_NZL.ZIL_SZT:=0;
            TR_NZL.POW:='';
            TR_NZL.WYM_MOC:='N';
            TR_NZL.TR_MOC:=null;
            TR_NZL.SPLIT:='';
            TR_NZL.DOK:='';
            TR_NZL.DOK_REF:='';
            TR_NZL.WHERE:='';
            TR_NZL.STAT_REJ:='N';
            TR_NZL.PLAN:='N';
            TR_NZL.REAL:='N';
            TR_NZL.WHERE_OP:='';
            TR_NZL.STATUS:=exec('tr_nzl_status','transport_zlec');
            {? TR_NZL.WHERE='TR_NZL' || exec('status_MG','transport_wspolne') ?}
         ?};
         {? _norea
         || TR_NZL.REAL:='A';
            TR_NZL.SPLIT:=''
         ?};
         {? TR_NZL.put()
         ||
::            TR_NZL.memo_set(_var_tr_nzl.OPIS,'OPIS');
            TR_NZL.memo_put(,'CMR013');
            TR_NZL.memo_put(,'CMR019');
            TR_NZL.memo_put(,'OPIS');
::            exec('log_nag','transport_wspolne',_uidref,'add');

            {? _tr_rodz=0 & _tr_nzl_split=0 || exec('log_nag','transport_wspolne',_uidref,'kop',' z dyspozycji ' + _bie_sym)
            |? _tr_rodz>0 & _tr_nzl_split=0 || exec('log_nag','transport_wspolne',_uidref,'pow',' z dyspozycji ' + _bie_sym)
            |? _tr_rodz=0 & _tr_nzl_split>0 || exec('log_nag','transport_wspolne',_uidref,'dzi') ?};

::            kopiowanie pozycji

            TR_ZL.cntx_psh();
            TR_ZL.index('POZ');
            TR_ZL.prefix(_bie_trzl);
            {? TR_ZL.first()
            ||
               {! |?
                  {? _tr_nzl_split & TR_ZL.POZ_REF=''
                  ||
                     TR_ZL.POZ_REF:=TR_ZL.uidref();
                     TR_ZL.put()
                  ?};
                  TR_ZL.cntx_psh();
                  TR_ZL.prefix(_new_trzl);
                  TR_ZL.TR_NZL:=_new_trzl;
                  {? _tr_nzl_split
                  ||
                     TR_ZL.IL:=0;
                     TR_ZL.IL_M3:=0;
                     TR_ZL.IL_SZT:=0;
                     TR_ZL.IL_T:=0
                  ?};
                  {? _new_zlec
                  ||
                     TR_ZL.POZ_REF:=''
                  ?};
                  TR_ZL.REAL:='N';
                  TR_ZL.ZIL:=0;
                  TR_ZL.ZIL_T:=0;
                  TR_ZL.ZIL_M3:=0;
                  TR_ZL.ZIL_SZT:=0;
                  TR_ZL.ZIL_OP:=0;
                  TR_ZL.STATUS:='N';
                  TR_ZL.add();
                  TR_ZL.cntx_pop();
                  TR_ZL.next()
               !}
            ?};
            TR_ZL.cntx_pop();

            exec('sum_poz','transport_zlec')

         ?};
         TR_NZL.get()
      ?};

      TR_NZL.r_unlock()
   ?};
   TR_NZL.cntx_pop();
::   {? _new_trzl=null | _tr_nzl_split
   {? _new_trzl=null
   ||
      {? _bie_trzl>0 || TR_NZL.seek(_bie_trzl,) ?}
   ||
      {? TR_NZL.seek(_new_trzl)=0
      ||
         FUN.info('Aktualnie zredagowana dyspozycja transportu nie jest dostępna w ustawionym zakresie widoku dyspozycji.'@);
         {? _bie_trzl>0 || TR_NZL.seek(_bie_trzl,) ?}
      ?}
   ?}
?};
''


\update_dok_uidref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Kopiowanie dyspozycji transportu z możliwością zmiany rodzaju dyspozycji (tworzy nową powiązaną dyspozycję)
::   WE: _a - olduidref
::       _b - newuidref
::       _c - dyspozycje transportowe powiązane z _a
::       [_d] - zmiana w historii transportów 1-tak 0(domyślnie)-nie
::----------------------------------------------------------------------------------------------------------------------
_old:=_a;
_new:=_b;
_Tr_nzl:=_c;
_chHist:={? var_pres('_d')=type_of(0) || _d || 0 ?};

_msk:=tab_tmp(1,'MSK','STRING[4]','');
_msk.blank(); _msk.MSK:='____'; _msk.add(1);
TR_NZL.cntx_psh();
_loop:=_Tr_nzl.first();
{!
|? _loop
|!
   TR_NZL.use(ref_name(_Tr_nzl.REF));
   TR_NZL.cntx_psh();
   TR_NZL.index('DOK_REF');
   TR_NZL.prefix(_old);
   {? TR_NZL.first()
   ||
      {!
      |? _uio:=TR_NZL.uidref();
         TR_NZL.cntx_psh();
         TR_NZL.prefix();
         TR_NZL.DOK_REF:=_new;
         {? TR_NZL.put() & _chHist
         || _uid:=TR_NZL.uidref();
            _msk.clear();
            _msk.prefix(TR_NZL.name()+4);
            {? ~_msk.first()
            || _msk.blank();
               _msk.MSK:=TR_NZL.name()+4;
               _msk.add(1)
            ?};
            exec('changeTR_LOG','transport_wspolne',_old,_new,_msk.MSK,_uio,_uid)
         ?};
         TR_NZL.cntx_pop();
         TR_NZL.first()
      !}
   ?};
   TR_NZL.cntx_pop();
   _loop:=_Tr_nzl.next()
!};
TR_NZL.cntx_pop();
_msk.clear();
{? _chHist & _msk.first()
|| {!
   |? exec('changeTR_LOG','transport_wspolne',_old,_new,_msk.MSK);
      _msk.next()
   !}
?};
obj_del(_msk);
1


\tr_nzl_split
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Podział dyspozycji
::   WE: [_a] - [number] ilość kopii dyspozycji przy podziale (domyślnie: 1)
::       [_b] - uid dyspozycji w magazynie, domyślnie brak
::       [_c] - 1-podział niezrealizownego 0(domyślnie)-nie
::   WY: ref SQL nowego TR_NZL
::----------------------------------------------------------------------------------------------------------------------
_uidmag:={? var_pres('_b')=type_of('') || _b || '' ?};
_asplit:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_res:='';

_dmag:=0;
_tr_nzl:={? _uidmag<>'' || _dmag:=1; exec('FindAndGet','#table',TR_NZL,_uidmag,,,null()) || TR_NZL.ref() ?};
:: brak uprawnień do kategorii transportu
{? _tr_nzl<>null()
 & ~exec('tr_rodz_ope','transport_wspolne'
     ,exec('FindAndGet','#table',TR_NZL,_tr_nzl,,"TR_RODZ",null())
     ,'Dyspozycja transportu'@,'Nie można podzielić dyspozycji.'@)
|| return('')
?};

VAR_DEL.delete('__TAB_SPLIT','__change_split','__uidmag','__new_tr','__asplit');
__new_tr:='';
__uidmag:=_uidmag;
__asplit:=_asplit;

__TAB_SPLIT:=tab_tmp(2
   ,'REF_POZ','STRING[48]','Ref pozycji'
   ,'NR','INTEGER','Pozycja'
   ,'MN','STRING[100]','Materiał / usługa'
   ,'MJ','STRING[10]','Jednostka'
   ,'IL','REAL','Ilość max'
   ,'IL1','REAL','Ilość pozostała'
   ,'IL2','REAL','Ilość przenoszona'
   ,'OLD_REF','STRING[48]','old ref'
);
_ndx:=__TAB_SPLIT.ndx_tmp(,,'NR',,);
__TAB_SPLIT.index(_ndx);
TR_NZL.cntx_psh();
TR_ZL.cntx_psh();
{? _dmag & _tr_nzl=null()
|| _dmag:=0;
   _tr_nzl:=TR_NZL.ref()
?};

TR_ZL.index('POZ');
TR_ZL.prefix(_tr_nzl);
{? TR_ZL.first()
|| {!
   |? {? ~_dmag & ~_asplit
      || __TAB_SPLIT.blank();
         __TAB_SPLIT.REF_POZ:=$TR_ZL.ref();
         __TAB_SPLIT.NR:=TR_ZL.POZ;
         __TAB_SPLIT.MN:=TR_ZL.M().N;
         __TAB_SPLIT.MJ:=TR_ZL.JM().KOD;
         __TAB_SPLIT.IL:=TR_ZL.IL;
         __TAB_SPLIT.IL1:=TR_ZL.IL;
         __TAB_SPLIT.IL2:=0;
         __TAB_SPLIT.OLD_REF:='';
         __TAB_SPLIT.add()
      |? TR_ZL.IL>TR_ZL.ZIL
      || __TAB_SPLIT.blank();
         __TAB_SPLIT.REF_POZ:=exec('FindAndGet','#table',TR_ZL,TR_ZL.OLD_REF,,"$ref()",TR_ZL.OLD_REF);
         __TAB_SPLIT.NR:=exec('FindAndGet','#table',TR_ZL,TR_ZL.OLD_REF,,"POZ",TR_ZL.POZ);
         __TAB_SPLIT.MN:=TR_ZL.M().N;
         __TAB_SPLIT.MJ:=TR_ZL.JM().KOD;
         __TAB_SPLIT.IL:=TR_ZL.IL;
         __TAB_SPLIT.IL1:=TR_ZL.ZIL;
         __TAB_SPLIT.IL2:=TR_ZL.IL-TR_ZL.ZIL;
         __TAB_SPLIT.OLD_REF:={? ~_asplit || $TR_ZL.ref() || '' ?};
         __TAB_SPLIT.add()
      ?};
      TR_ZL.next()
   !}
?};
TR_NZL.cntx_pop();
TR_ZL.cntx_pop();


_win:=__TAB_SPLIT.mk_sel('Podziel dyspozycję transportu'@,'P',0,'trzlilsplit',,,10,0,'U');

__TAB_SPLIT.win_fld(_win,,'NR',,,2,,1);
__TAB_SPLIT.win_fld(_win,,'MN',,,15,,1);
__TAB_SPLIT.win_fld(_win,,'MJ',,,5,,1);
__TAB_SPLIT.win_fld(_win,,'IL1',,,10,3,1);
__TAB_SPLIT.win_fld(_win,,'IL2',,,10,3,0);

_popraw:="
   _il:=__TAB_SPLIT.IL;
   _il_1:=__TAB_SPLIT.IL1;
   _il_2:=__TAB_SPLIT.IL2;
   {? __TAB_SPLIT.IL2<0 || FUN.info('Ilość nie może być ujemna.'@); __TAB_SPLIT.IL2:=0 ?};
   {? __TAB_SPLIT.IL2>__TAB_SPLIT.IL || __TAB_SPLIT.IL2:=_il ?};
   __TAB_SPLIT.IL1:=_il - __TAB_SPLIT.IL2;
   __TAB_SPLIT.put();
1";

:: Rozdzielenie ilości na dwie dyspozycje
:: Kopia dyspozycji
:: Zmiana ilości

__change_split:="
   _zlec:=_a;
   _tr_nzl:=_b;
   {? __TAB_SPLIT.first()
   ||
      {! |?
         TR_ZL.cntx_psh();
         TR_ZL.index('POZ');
         TR_ZL.prefix(_tr_nzl,__TAB_SPLIT.NR);
         {? TR_ZL.first()
         || TR_ZL.IL:={? _zlec=1 || __TAB_SPLIT.IL1 || __TAB_SPLIT.IL2 ?};
            exec('poz_przelicz','transport_zlec');
            {? 1 & __uidmag=''
            || _oki:=TR_ZL.put();
               {? TR_NZL.WHERE='REK_N'
               || exec('delaRekD','reklamacje',TR_ZL.uidref());
                  exec('autoRekD','reklamacje',exec('FindAndGet','#table',REK_N,TR_ZL.DOK_REF,,,null())
                                              ,TR_ZL.TR_NZL().uidref()
                                              ,TR_ZL.uidref()
                                              ,TR_ZL.IL,'Wystawienie dyspozycji transportu')
               ?}
            || {? TR_ZL.IL>0
               || _oki:=TR_ZL.put(1);
                  {? TR_NZL.WHERE='REK_N'
                  || exec('delaRekD','reklamacje',TR_ZL.uidref());
                     exec('autoRekD','reklamacje',exec('FindAndGet','#table',REK_N,TR_ZL.DOK_REF,,,null())
                                                 ,TR_ZL.TR_NZL().uidref()
                                                 ,TR_ZL.uidref()
                                                 ,TR_ZL.IL,'Wystawienie dyspozycji transportu')
                  ?}
               || _oki:=1;
                  {? TR_NZL.WHERE='REK_N' || exec('delaRekD','reklamacje',TR_ZL.uidref()) ?};
                  TR_ZL.del()
               ?}
            ?};
            {? _oki & __TAB_SPLIT.OLD_REF<>'' & _zlec=2
            || exec('FindAndGet','#table',TR_ZL,__TAB_SPLIT.OLD_REF,,
                \"IL-=__TAB_SPLIT.IL2;{? put(1) || exec('poz_przelicz','transport_zlec') ?}\",1)
            ?}
         ?};
         TR_ZL.cntx_pop();
         __TAB_SPLIT.next()
      !}
   ?};
1";

_zapisz:="
   _resp:=0;
   {? __TAB_SPLIT.size()=1 & __TAB_SPLIT.first()
    & {? __uidmag='' || (__TAB_SPLIT.IL1=0 | __TAB_SPLIT.IL2=0) || 0 ?}
   ||
      FUN.info('Ilość nie może być zerowa.'@);
      return(0)
   |? __TAB_SPLIT.size()>1 & __TAB_SPLIT.first()
   ||
      _il1:=0;
      _il2:=0;
      {! |?
         _il1+=__TAB_SPLIT.IL1;
         _il2+=__TAB_SPLIT.IL2;
         __TAB_SPLIT.next()
      !};
      {? __uidmag='' & (_il1=0 | _il2=0)
      ||
         FUN.info('Ilość nie może być zerowa.'@);
         return(0)
      ?}
   ?};
   _prev_zlec:=$TR_NZL.ref();
   TR_NZL.cntx_psh();
   exec('tr_nzl_kop','transport_zlec',,1,,__asplit);
   {? __uidmag<>''
   || TR_NZL.SPLIT:='';
      TR_NZL.GRP:='';
      TR_NZL.put(1)
   ?};
   _new_zlec:=_res:=$TR_NZL.ref();
   {? _prev_zlec<>_new_zlec
   || _resp:=exec('FindAndGet','#table',TR_NZL,_prev_zlec,,\"
         __change_split(1,ref());
         exec('sum_poz','transport_zlec');
      1\",0);
      _resp:=exec('FindAndGet','#table',TR_NZL,_new_zlec,,\"
         __change_split(2,ref());
         exec('sum_poz','transport_zlec');
      1\",0);
      {? __uidmag<>'' || exec('aktDYSPsplit','transport_zlec',__uidmag) ?}
   ?};
   TR_NZL.cntx_pop();
   TR_NZL.seek(_new_zlec);
   {? _resp
   || __new_tr:=_new_zlec;
      {? ~__asplit || sel_exit() ?}
   || FUN.info('Wystąpił błąd podczas tworzenia nowej dyspozycji transportu.'@)
   ?};
1";

{? ~_dmag || __TAB_SPLIT.win_act(_win,0,'Popraw',,,,,_popraw,1) ?};
__TAB_SPLIT.win_act(_win,,'Formuła','&Akceptuj'@@,,,_zapisz,,,,,,'A');
__TAB_SPLIT.win_btn(_win,'text='+'&Akceptuj'@+',btn_label_align=center,panel=bottom,align=end','menu:A');
__TAB_SPLIT.win_btn(_win,'text='+'&Anuluj'@+',btn_label_align=center,panel=bottom,align=end','key:Esc');

__TAB_SPLIT.win_sel(_win);

{? __TAB_SPLIT.size()
|| {? ~__asplit
   || __TAB_SPLIT.select()
   || _zapisz()
   ?}
|| FUN.info('Brak możliwości podziału dyspozycji.'@)
?};
_res:=__new_tr;
VAR_DEL.delete('__TAB_SPLIT','__change_split','__uidmag','__new_tr','__asplit');

_res


\tr_nzl_split_zbyt_rozbudowane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Podział dyspozycji
::   WE: [_a] - [number] ilość kopii dyspozycji przy podziale (domyślnie: 1)
::----------------------------------------------------------------------------------------------------------------------
_count:={? var_pres('_a')=type_of(0) || _a || 2 ?};

_copy:=0;
_edit:=0;
{? TR_NZL.SPLIT=''
||
   _copy:=1;
   _edit:=1
||
   _copy:=FUN.ask('Dyspozycja transportu jest już podzielona, czy chesz dodać kolejną powiązaną dyspozycję?'@);
   {? _copy
   ||
      _count:=1;
      _edit:=1
   ||
      _edit:=FUN.ask('Dyspozycja transportu jest już podzielone, czy chesz zmienić ilości na powiązanych dyspozycjach?'@)
   ?}
?};

{? _copy
||
   {! _i:=1.._count
   |!
      exec('tr_nzl_kop','transport_zlec',,1)
   !}
?};

{? _edit
||
   exec('tr_nzl_split_il','transport_zlec')
?};

''


\zle_win_edit_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Ustawia okno redakcji tabeli ZLE, wymagane pola, okna słowników dla przeplanowania
::   WE: _a-'X'-podstawienie, 'Y'-zabranie
::----------------------------------------------------------------------------------------------------------------------
_win_red:=exec('zle_win_edit','umowy_zlecenia','REDP');
_ff:="'key:F2'";
ZLE.win_ebtn(_win_red,
   'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['&Potwierdź'@],_ff);
_ff:='key:Esc';
ZLE.win_ebtn(_win_red,
   'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['&Anuluj'@],_ff);
ZLE.win_edit(_win_red);
exec('zle_set_efld_opt','umowy_zlecenia',_win_red,_a,1);
~~


\przeplan_zle_win_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Okienko redakcji dla przeplanowania
::----------------------------------------------------------------------------------------------------------------------
exec('zle_win_edit_set','transport_zlec','Y');
exec('jm_kpo','jm');
ZLE.edit()


\tr_nzl_split_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Podział dyspozycji - ustawienie ilości
::----------------------------------------------------------------------------------------------------------------------
~~


\tr_nzl_split_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Podział dyspozycji - ustawienie ilości
:: ~OST: INWINBTN
::----------------------------------------------------------------------------------------------------------------------

_dok_ref:=TR_NZL.DOK_REF;

:: tablica z ilościami

VAR_DEL.delete('__TRZLSPLIT_TAB','__TRZLSPLIT_TAB_2','__TRZLSPLIT_TAB_CHECK');

__TRZLSPLIT_TAB:=tab_tmp(2
   ,'TREE','TREE_REF','galazka'
   ,'REF_POZ','STRING[48]','Ref pozycji'
   ,'REF_NAG','STRING[48]','Ref nagłówka'
   ,'SYM','STRING[20]','Symbol nagłówka'
   ,'MN','STRING[100]','Materiał / usługa'
   ,'MNREF','STRING[48]','Ref materiału / usługi'
   ,'MJ','STRING[10]','Jednostka miary'
   ,'IL','REAL','Ilość'
);
::_ndx:=__TRZLSPLIT_TAB.ndx_tmp(,,'SYM',,,'REF_POZ',,);
::__TRZLSPLIT_TAB.index(_ndx);

__TRZLSPLIT_TAB_2:=tab_tmp(2
   ,'REF_M','STRING[48]','Ref materiału / usługi'
   ,'MN','STRING[100]','Materiał / usługa'
   ,'IL','REAL','Ilość'
::   ,'IL2','REAL','Zostało'
);
_ndx2:=__TRZLSPLIT_TAB_2.ndx_tmp(,,'REF_M',,);
__TRZLSPLIT_TAB_2.index(_ndx2);

_win_grp:=__TRZLSPLIT_TAB.grp_make('Rozpisanie ilości w pozycjach powiązanych dyspozycji transportu'@,,'trzlilsplit_grp',,,,,'normal');

_win_red:=__TRZLSPLIT_TAB.mk_sel('Pozycje'@,'P',,'trzlilsplit',,,10,1);

__TRZLSPLIT_TAB.win_fld(_win_red,,'SYM',,,20,,1,'Symbol dyspozycji'@);
__TRZLSPLIT_TAB.win_fld(_win_red,,'MN',,,20,,1,'Materiał / usługa'@);
__TRZLSPLIT_TAB.win_fld(_win_red,,'MJ',,,10,,1,'Jednostka miary'@);
__TRZLSPLIT_TAB.win_fld(_win_red,,'IL',,,10,3,0,'Ilość'@);

__TRZLSPLIT_TAB_CHECK:="
   _m_ref:=_a;
   _count:={? __TRZLSPLIT_TAB_2.find_key(_m_ref) || __TRZLSPLIT_TAB_2.IL || 0 ?};
   _ile:=0;
   {? __TRZLSPLIT_TAB.first()
   ||
      {! |?
         {? __TRZLSPLIT_TAB.MNREF=_m_ref
         ||
            _ile+=__TRZLSPLIT_TAB.IL
         ?};
         __TRZLSPLIT_TAB.next()
      !}
   ?};
   _result:={? _ile=_count || 1 || 0 ?};
_result";

_popraw:="
   _count:={? __TRZLSPLIT_TAB_2.find_key(__TRZLSPLIT_TAB.MNREF) || __TRZLSPLIT_TAB_2.IL || 0 ?};
   __TRZLSPLIT_TAB.put();
1";

_zapisz:="
   _check:=1;
   {? __TRZLSPLIT_TAB_2.first()
   ||
      {! |?
         {? _check
         ||
            _check:=__TRZLSPLIT_TAB_CHECK(__TRZLSPLIT_TAB_2.REF_M);
            __TRZLSPLIT_TAB_2.next()
         ?}
      !}
   ?};
   {? _check
   ||
      {? __TRZLSPLIT_TAB.first()
      ||
         {! |?
            {? __TRZLSPLIT_TAB.REF_POZ<>''
            ||
               _check:=exec('FindAndGet','#table',TR_ZL,__TRZLSPLIT_TAB.REF_POZ,,\"
                 TR_ZL.IL:=__TRZLSPLIT_TAB.IL;
                 exec('poz_przelicz','transport_zlec');
                 TR_ZL.put()
               \",0)
            ?};
            __TRZLSPLIT_TAB.next()
         !}
      ?};
      {? __TRZLSPLIT_TAB.first()
      ||
         {! |?
            {? __TRZLSPLIT_TAB.REF_POZ='' & __TRZLSPLIT_TAB.REF_NAG=''
            ||
               exec('sum_poz','transport_zlec',__TRZLSPLIT_TAB.REF_NAG)
            ?};
            __TRZLSPLIT_TAB.next()
         !}
      ?};
      sel_exit()
   ||
      FUN.info('Niepoprawne rozpisanie ilości materiału / usługi: ''%1'', wymagana ilość: %2'@[ __TRZLSPLIT_TAB_2.MN, $__TRZLSPLIT_TAB_2.IL ])
   ?};
1";

__TRZLSPLIT_TAB.win_act(_win_red,0,'Popraw',,,,,_popraw,1);

__TRZLSPLIT_TAB.win_act(_win,,'Formuła','A&kceptuj'@@,,,_zapisz,,,,,,'A');
__TRZLSPLIT_TAB.win_btn(_win_red,'text='+'A&kceptuj'@+',btn_label_align=center,panel=bottom,align=end'
      ,'menu:A');
__TRZLSPLIT_TAB.win_btn(_win_red,'text='+'&Anuluj'@+',btn_label_align=center,panel=bottom,align=end','key:Esc');

::_win_red_2:=__TRZLSPLIT_TAB_2.mk_sel('Ilości'@,'P',,'trzlilsplit2',,,10,0);
::
::__TRZLSPLIT_TAB_2.win_fld(_win_red_2,,'MN',,,20,,1,'Materiał / usługa'@);
::__TRZLSPLIT_TAB_2.win_fld(_win_red_2,,'IL',,,10,3,1,'Ilość do podziału'@);
::__TRZLSPLIT_TAB_2.win_fld(_win_red_2,,'IL2',,,10,3,1,'Pozostało do podziału'@);

::_refresh:="
::
::1";

::__TRZLSPLIT_TAB.grp_sel(_win_grp,,_win_red,'a'@,_refresh,,,,,,,,'maximized_with_title');
::__TRZLSPLIT_TAB.tab_splt(_win_grp,,'horizontal','pozioma_1',0);
::__TRZLSPLIT_TAB.grp_sel(_win_grp,__TRZLSPLIT_TAB_2,_win_red_2,,,,,,,,,,'maximized_with_title');
::__TRZLSPLIT_TAB.win_sel(_win_grp);

__TRZLSPLIT_TAB.win_sel(_win_red);

:: Pobranie pozycji
TR_NZL.cntx_psh();
TR_NZL.index('DOK_REF');
TR_NZL.prefix(_dok_ref,);
{? TR_NZL.first()
||
   {! |?
::exec('tr_nzl_status_zaplanowane','transport_zlec')
::exec('tr_nzl_status_w_realizacji','transport_zlec')
::exec('tr_nzl_status_zrealizowane','transport_zlec')
   {? TR_NZL.STATUS=exec('tr_nzl_status_oczekujace','transport_zlec')
    | TR_NZL.STATUS=exec('tr_nzl_status_nowe','transport_zlec')
    | TR_NZL.STATUS=exec('tr_nzl_status_do_planowania','transport_zlec')
   ||
      __TRZLSPLIT_TAB.blank();
      __TRZLSPLIT_TAB.TREE:=0;
      __TRZLSPLIT_TAB.REF_NAG:=$TR_NZL.ref();
      __TRZLSPLIT_TAB.SYM:=TR_NZL.SYM;
      __TRZLSPLIT_TAB.add();
      _galaz:=__TRZLSPLIT_TAB.ref;
      TR_ZL.cntx_psh();
      TR_ZL.index('POZ');
      TR_ZL.prefix(TR_NZL.ref());
      {? TR_ZL.first()
      ||
         {! |?
            __TRZLSPLIT_TAB.blank();
            __TRZLSPLIT_TAB.TREE:=_galaz;
            __TRZLSPLIT_TAB.REF_POZ:=$TR_ZL.ref();
            __TRZLSPLIT_TAB.REF_NAG:=$TR_NZL.ref();
::            __TRZLSPLIT_TAB.SYM:=TR_NZL.SYM;
            __TRZLSPLIT_TAB.IL:=TR_ZL.IL;
            __TRZLSPLIT_TAB.MN:=TR_ZL.M().N;
            __TRZLSPLIT_TAB.MJ:=TR_ZL.JM().KOD;
            __TRZLSPLIT_TAB.MNREF:=$TR_ZL.M().ref();

            {? __TRZLSPLIT_TAB_2.find_key(__TRZLSPLIT_TAB.MNREF)
            ||
               __TRZLSPLIT_TAB_2.IL:=__TRZLSPLIT_TAB_2.IL + __TRZLSPLIT_TAB.IL;
               __TRZLSPLIT_TAB_2.put()
            ||
               __TRZLSPLIT_TAB_2.blank();
               __TRZLSPLIT_TAB_2.REF_M:=__TRZLSPLIT_TAB.MNREF;
               __TRZLSPLIT_TAB_2.MN:=__TRZLSPLIT_TAB.MN;
               __TRZLSPLIT_TAB_2.IL:=__TRZLSPLIT_TAB.IL;
               __TRZLSPLIT_TAB_2.add()
            ?};
            __TRZLSPLIT_TAB.add();
            TR_ZL.next()
         !}
      ?};
      TR_ZL.cntx_pop();
      TR_NZL.next()
   ?}
   !}
?};
TR_NZL.cntx_pop();

__TRZLSPLIT_TAB.select();

VAR_DEL.delete('__TRZLSPLIT_TAB','__TRZLSPLIT_TAB_2','__TRZLSPLIT_TAB_CHECK');
''


\usun_split
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Sprawdzanie czy można usunąć dyspozycję transportu, które zostało wcześniej podzielone
::   WY: 1/0 - czy usunąć
::----------------------------------------------------------------------------------------------------------------------
:: Pytanie czy przepisać ilości z usuwanej dyspozycji do powiązanej z nią dyspozycji
_usun_split:=1;
{? TR_NZL.SPLIT<>''
||
   _usun_split:=0;
   {? FUN.ask('Usunąć dyspozycję transportu %1?'@[TR_NZL.SYM])
   ||
      TR_NZL.f_clear();
      _ref_del:=TR_NZL.ref();
      _uid_split:=TR_NZL.SPLIT;
      TR_NZL.cntx_psh();
      TR_NZL.index('SPLIT');
::      TR_NZL.prefix(_uid_split,);
      _where:='TR_NZL.SPLIT=''%1'' and (TR_NZL.STATUS<>''%2'' or TR_NZL.STATUS<>''%3'' or TR_NZL.STATUS<>''%4'') and TR_NZL.REFERENCE<>''%5'''[
         _uid_split,
         exec('tr_nzl_status_oczekujace','transport_zlec'),
         exec('tr_nzl_status_nowe','transport_zlec'),
         exec('tr_nzl_status_do_planowania','transport_zlec'),
         $_ref_del
      ];
      TR_NZL.f_set('NR',,_where);
      {? TR_NZL.f_size()=1
      ||
::         Jedyna dyspozycja, do której będą przepisane ilości
         {? TR_NZL.f_first()
         ||
            _podziel:={? ((
            TR_NZL.STATUS=exec('tr_nzl_status_oczekujace','transport_zlec')
               |
            TR_NZL.STATUS=exec('tr_nzl_status_nowe','transport_zlec')
               |
            TR_NZL.STATUS=exec('tr_nzl_status_do_planowania','transport_zlec')
               )
            ) || 1 || 0 ?};
            {? _podziel
            ||
               FUN.info('Ilości z usuniętej dyspozycji zostaną przeniesione do powiązanej dyspozycji o symbolu: %1'@[TR_NZL.SYM]);
               _ref_set:=TR_NZL.ref();
               _usun_split:=exec('usun_split_change','transport_zlec',_ref_set,_ref_del);
               {? _usun_split
               ||
                  TR_NZL.SPLIT:='';
                  TR_NZL.put()
               ?}
            ||
               FUN.info('Nie można usunąć dyspozycji transportu, ponieważ nie można przenieść ilości do powiązanej dyspozycji.'@)
            ?}
         ?}
      |? TR_NZL.f_size()>1
      ||
         TR_NZL.win_sel('SLO');
         {? TR_NZL.select()
         ||
::            Wybrano dyspozycję, do której ma być przepisana ilość z usuwanej powiązanej dyspozycji
            _ref_set:=TR_NZL.ref();
::            Poprawnie przeniesiono ilości, można usunąć
            _usun_split:=exec('usun_split_change','transport_zlec',_ref_set,_ref_del)
         ?}
      ?};
      TR_NZL.f_clear();
      TR_NZL.cntx_pop()
   ?}
?};
_usun_split


\usun_split_change
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Sprawdzanie czy można usunąć dyspozycję transportu, która została wcześniej podzielona
::   WE: _a - ref set TR_NZL
::       _b - ref del TR_NZL
::   WY: 1/0 - czy udane przeniesienie ilości
::----------------------------------------------------------------------------------------------------------------------
_ref_set:=_a;
_ref_del:=_b;
::_a1:=TR_NZL.SYM;
TR_ZL.cntx_psh();
TR_ZL.index('POZREF');
::Prefiksuje wszystkie pozycje dyspozycji i literuje po nich
TR_ZL.prefix(_ref_set,);
{? TR_ZL.first()
||
::   _a2:=TR_ZL.TR_NZL().SYM;
   {! |?
      _poz:=TR_ZL.POZ_REF;
      _il:=TR_ZL.IL;
      TR_ZL.cntx_psh();
::      Pobiera ilość z powiązanej pozycji usuwanej dyspozycji
      TR_ZL.prefix(_ref_del,_poz,);
      {? TR_ZL.first()
      ||
::         _a3:=TR_ZL.TR_NZL().SYM;
         _il+=TR_ZL.IL
      ?};
      TR_ZL.cntx_pop();
::      Jeżeli ilość się zmieniła następuje przypisanie ilości oraz dokonuje przeliczenia nowej ilości
      {? TR_ZL.IL<>_il
      ||
         TR_ZL.IL:=_il;
         exec('poz_przelicz','transport_zlec');
         TR_ZL.put()
      ?};
      TR_ZL.next()
   !}
?};
TR_ZL.cntx_pop();
::Przeliczenie ilości w nagłówku
::exec('sum_poz','transport_zlec',_ref_set);
exec('sum_poz','transport_zlec');
1


\canGen_trnzl4zlp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: czy można generować dyspozycję do zgłoszenia jednorazowego
::   WE: _a - transporty dla zgłoszenia
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_Tr_nzl:=_a;
_il:=0;
{? ZLP.STAT_REJ='Z'
||
   _il:=1;
   _il+=ZLP.SP='T'
?};
_Tr_nzl.size()<_il


\pr_oddz_tr_nzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: przed redakcją oddziału dla dyspozycji transportu
::----------------------------------------------------------------------------------------------------------------------
TR_NZL.WHERE='' & TR_NZL.NR=0


\f3_oddz_tr_nzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: przed redakcją oddziału dla dyspozycji transportu
::----------------------------------------------------------------------------------------------------------------------
{? exec('sel_upr','users','ODDZ','KOD') || TR_NZL.ODDZ:=ODDZ.KOD ?};
~~


\po_oddz_tr_nzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: po redakcji oddziału dla dyspozycji transportu
::----------------------------------------------------------------------------------------------------------------------
{? form(TR_NZL.ODDZ)='' & TR_NZL.WHERE=''
|| FUN.info('Należy wskazać odział, którego dotyczy dana dyspozycja transportu.'@);
   0
|? form(TR_NZL.ODDZ)<>'' & TR_NZL.WHERE='' & exec('FindInSet','#table','ODDZ','KOD2',TR_NZL.ODDZ,TR_NZL.ODDZ)=null()
|| FUN.info('Nie ma odziału o kodzie %1.'@[TR_NZL.ODDZ]);
   0
|| TR_NZL.ORDER:=exec('code_order','transport_paczki',TR_NZL.IDADD,TR_NZL.ref(),TR_NZL.ODDZ);
   TR_NZL.put(1);
   1
?}


\tr_nzl_names
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: zwraca tabelę z maskami tabeli TR_NZL:
::       - tylko bieżącą jeśli _a='' i _b=''
::       - maskę _a i następujące po niej plus bieżącą jeśli a<>'' i _b=''
::       - maski w przedziale od _a do _b plus bieżąca jeśli _a<>'' i _b<>''
::   WE: _a - maska początkowa
::       _b - maska końcowa
::       _c - 0/1 dodawać maskę roboczą
::       [_d] - 1-maska pozycji - 0(domyślnie) nagłówki
::   WY: uchwyt do tabeli
::----------------------------------------------------------------------------------------------------------------------
_posmsk:={? var_pres('_d')=type_of(0) || _d || 0 ?};

_maska_b:=_a+4;
_maska_e:=_b+4;
_maska__:={? var_pres('_c')=type_of(0) || _c || 0 ?};

{? _maska_b='0000'
||
   _Tab:={? ~_posmsk || TR_NZL.names() || TR_ZL.names() ?}

|? _maska_b<>'' & _maska_e=''
||
   _Tab:=TR_NZL.names();
   _loop:=_Tab.first();
   {!
   |? _loop
   |!
      _name:=_Tab.NAME+4;
      _loop:=
         {? _name<_maska_b
         ||
            _Tab.del()
         ||
            0
         ?}
   !}

|? _maska_b<>'' & _maska_e<>''
||
   {? _maska_b=_maska_e
   ||
      _Tab:=tab_tmp(,'NAME','STRING[8]','Nazwa maski');
      _name:={? ~_posmsk || 'trnl' || 'trzl' ?};
      _Tab.NAME:=_name+_maska_b;
      _Tab.add()
   ||
      _Tab:={? ~_posmsk || TR_NZL.names() || TR_ZL.names() ?};
      _loop:=_Tab.first();
      {!
      |? _loop
      |!
         _name:=_Tab.NAME+4;
         _loop:=
            {? _maska_e<_name | _name<_maska_b
            ||
               _Tab.del()
            ||
               _Tab.next()
            ?}
      !}
   ?};
   _maska__:=1
||
   _Tab:=tab_tmp(,'NAME','STRING[8]','Nazwa maski');
   _maska__:=1
?};
{? _maska__
||
   _name:={? ~_posmsk || 'trnl' || 'trzl' ?};
   _Tab.NAME:=_name+'____';
   _Tab.add()
?};

_Tab


\tr_nzl_dt_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: przycisk pola TR_NZL.DT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? (';ZLP;UPMZAD;'*TR_NZL.WHERE)>1 & TR_NZL.RODZ().CTRL='T'
|| exec('data_transportu','transport_moc','TR_NZL.DT',TR_NZL.TR_RODZ,TR_NZL.ODDZ)
|| exec('plan_tran','transport_moc',TR_NZL.ODDZ)
?};
TR_NZL.DT


\tr_nzl_miasto_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola TR_NZL.MIASTO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| {? cur_tab()=TR_NAG
   || exec('ter_msc_wybierz','teryt','TR_NAG','MIASTO')
   || exec('ter_msc_wybierz','teryt','TR_NZL','MIASTO')
   ?}
?}


\tr_nzl_ul_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola TR_NZL.UL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| {? cur_tab()=TR_NAG
   || exec('ter_uli_wybierz','teryt','TR_NAG','UL','MIASTO')
   || exec('ter_uli_wybierz','teryt','TR_NZL','UL','MIASTO')
   ?}
?}


\dysp_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: generuje drzewko pozycji do dyspozycji dla KH - odbiorca z nagłówka zamówienia sprzedaży
::   WE: _a - KH.ref() - odbiorca
::       [_b] - wskazanie na ref SQL dokumentu
::       [_c] - rodzaj generacji:
::              'Z'-zamówienie sprzedaży (domyślnie)
::              'W'-zamówienie wewnętrzne
::              'D'-zamówienie dostaw
::              'P'-potwierdzenie zamówienia dostaw
::              'O'-kooperacja - pozycja przewodnika
::              'MZW'-dokument magazynowy, zewnętrzny, wydanie
::              'MZP'-dokument magazynowy, zewnętrzny, przyjęcie
::              'MWW'-dokument magazynowy, wewnętrzny, wydanie
::              'MWP'-dokument magazynowy, wewnętrzny, przyjęcie
::              'RS'-reklamacja klienta
::              'RZ'-reklamacja do dostawcy
::       [_d] - automatyczne przepisanie pozycji
::       [_e] - rodzaj dyspozycji Z,R lub ''-domyślnie
::   WY: select()
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_doksql:={? var_pres('_b')=type_of('') || _b || '' ?};
_typgen:={? var_pres('_c')=type_of('') || _c || 'Z' ?};
_autgen:={? var_pres('_d')=type_of(0)  || _d || 0 ?};
_zalgen:={? var_pres('_e')=type_of('') & (';ZR'*_e)>1 || _e || '' ?};
_okigen:=0;

VAR_DEL.delete('__dsp_tab','__dsp_sel','__zam_list','__zam_sel','__dsp_ndx','__dspadd');
{? _typgen='Z'
|| _qq:=$"
   select
      'X' as WYB,
      ZK_N.SYM as ZAMN_SYM,
      ZK_N.reference as ZAMN_REF,
      ZK_P.POZ as ZAMP_POZ,
      TYPYZAM.T as TYP_ZAM,
      MG.SYM as Magazyn,
      M.KTM as Indeks,
      M.N as Nazwa,
      ZK_P.ILZ as ILZ,
      ZK_P.ILP as ILP,
      ZK_P.IL_ZT as IL_ZT,
      ZK_P.IL_ZT as IL_DO,
      ZK_N.SYM as Opis,
      ZK_P.reference as ZAMP_REF,
      MG.reference as MG_REF,
      M.reference as M_REF,
      ZK_N.DT as DATA,
      M.J as JM,
      case
        when M.RODZ='U' then ZK_N.TRN
        else ZK_P.TRN
      end as TRN,
      0 as JMZ
   from
      ZK_P
      join M using(ZK_P.M,M.REFERENCE)
      left join MG using(ZK_P.RMAG,MG.REFERENCE)
      join ZK_N using(ZK_P.N,ZK_N.reference)
      join TYPYZAM using(ZK_N.T,TYPYZAM.reference)
   where
      ZK_N.STAT_REJ='T'
      and ZK_N.STAN<>'ZRE'
      and TYPYZAM.R='Z'
      and ZK_N.KH=:_a
      and ZK_P.ILZ>ZK_P.IL_ZT
      and ZK_P.END=0
   order by
      1,2,3,4
   "
|? _typgen='W'
|| _qq:=$"
   select
      'X' as WYB,
      ZK_N.SYM as ZAMN_SYM,
      ZK_P.POZ as ZAMP_POZ,
      TYPYZAM.T as TYP_ZAM,
      MG.SYM as Magazyn,
      M.KTM as Indeks,
      M.N as Nazwa,
      ZK_P.ILZ as ILZ,
      ZK_P.ILP as ILP,
      ZK_P.IL_ZT as IL_ZT,
      ZK_P.IL_ZT as IL_DO,
      ZK_N.SYM as Opis,
      ZK_P.reference as ZAMP_REF,
      ZK_N.reference as ZAMN_REF,
      MG.reference as MG_REF,
      M.reference as M_REF,
      ZK_N.DT as DATA,
      M.J as JM,
      ZK_P.TRN as TRN,
      0 as JMZ
   from
      ZK_P
      join M using(ZK_P.M,M.REFERENCE)
      left join MG using(ZK_P.RMAG,MG.REFERENCE)
      join ZK_N using(ZK_P.N,ZK_N.reference)
      join TYPYZAM using(ZK_N.T,TYPYZAM.reference)
   where
      ZK_N.STAT_REJ='T'
      and ZK_N.LIM<>'T'
      and ZK_N.STAN<>'ZRE'
      and TYPYZAM.R='W'
      and ZK_P.N=':_a'
      and ZK_P.ILZ>ZK_P.IL_ZT
      and ZK_P.END=0
   order by
      1,2,3,4
   "
|? _typgen='D'
|| _qq:=$"
   select
      'X' as WYB,
      ZD_NAG.SYM as ZAMN_SYM,
      ZD_NAG.reference as ZAMN_REF,
      ZD_POZ.POZ as ZAMP_POZ,
      TYPYZAM.T as TYP_ZAM,
      MG.SYM as Magazyn,
      M.KTM as Indeks,
      M.N as Nazwa,
      ZD_POZ.IL_KOR as ILZ,
      ZD_POZ.IL_POZ as ILP,
      ZD_POZ.IL_ZT as IL_ZT,
      ZD_POZ.IL_ZT as IL_DO,
      ZD_NAG.SYM as Opis,
      ZD_POZ.reference as ZAMP_REF,
      MG.reference as MG_REF,
      M.reference as M_REF,
      ZD_NAG.DATA as DATA,
      M.J as JM,
      ZD_NAG.TRN as TRN,
      ZD_NAG.JMZ as JMZ
   from
      ZD_POZ
      join M using(ZD_POZ.M,M.REFERENCE)
      left join MG using(ZD_POZ.MG,MG.REFERENCE)
      join ZD_NAG using(ZD_POZ.ZD_NAG,ZD_NAG.reference)
      join TYPYZAM using(ZD_NAG.T,TYPYZAM.reference)
   where
      ZD_NAG.STAT_REJ='T'
      and position(ZD_NAG.STAN in 'AC')>0
      and ZD_NAG.KH=:_a
      and ZD_POZ.IL_KOR>ZD_POZ.IL_ZT
      and ZD_POZ.END=0
   order by
      1,2,3,4
   "
|? _typgen='P'
|| _qq:=$"
   select
      'X' as WYB,
      ZDP_NAG.SYM as ZAMN_SYM,
      ZDP_NAG.reference as ZAMN_REF,
      ZD_POZ.POZ as ZAMP_POZ,
      'Potwierdzenie' as TYP_ZAM,
      MG.SYM as Magazyn,
      M.KTM as Indeks,
      M.N as Nazwa,
      ZDP_POZ.IL as ILZ,
      ZDP_POZ.IL as ILP,
      ZD_POZ.IL_ZT as IL_ZT,
      ZD_POZ.IL_ZT as IL_DO,
      ZDP_NAG.SYM as Opis,
      ZDP_POZ.reference as ZAMP_REF,
      MG.reference as MG_REF,
      M.reference as M_REF,
      ZDP_NAG.D_WYS as DATA,
      M.J as JM,
      'T' as TRN,
      ZD_NAG.JMZ as JMZ
   from
      ZDP_POZ
      join ZDP_NAG using(ZDP_POZ.ZDP_NAG,ZDP_NAG.reference)
      join M using(ZDP_POZ.M,M.REFERENCE)
      join ZD_POZ using(ZDP_POZ.ZD_POZ,ZD_POZ.REFERENCE)
      left join MG using(ZD_POZ.MG,MG.REFERENCE)
      left join ZD_NAG using(ZD_POZ.ZD_NAG,ZD_NAG.REFERENCE)
   where
      ZDP_NAG.STAT_REJ='T'
      and ZDP_NAG.KH=:_a
      and ZDP_POZ.IL>ZDP_POZ.IL_ZT
      and ZDP_POZ.END=0
   order by
      1,2,3,4
   "
|? (2+_typgen)='MZ'
|| _qq:=$"
   select
      'X' as WYB,
      ND.SYM as ZAMN_SYM,
      ND.reference as ZAMN_REF,
      DK.P as ZAMP_POZ,
      TYPYDOK.T as TYP_ZAM,
      MG.SYM as Magazyn,
      M.KTM as Indeks,
      M.N as Nazwa,
      DK.IL as ILZ,
      DK.IL as ILP,
      DK.IL_ZT as IL_ZT,
      DK.IL_ZT as IL_DO,
      ND.SYM as Opis,
      DK.reference as ZAMP_REF,
      MG.reference as MG_REF,
      M.reference as M_REF,
      ND.D as DATA,
      M.J as JM,
      ND.TRN as TRN,
      0 as JMZ
   from
      DK
      join M using(DK.M,M.REFERENCE)
      join ND using(DK.N,ND.reference)
      left join MG using(ND.MAG,MG.REFERENCE)
      join TYPYDOK using(ND.TYP,TYPYDOK.reference)
   where
      ND.STAT_REJ='T'
      and TYPYDOK.P=':_b'
      and TYPYDOK.DN='N'
      and ND.KH=:_a
      and DK.IL>DK.IL_ZT
   order by
      1,2,3,4
   "
|? (2+_typgen)='MW'
|| _qq:=$"
   select
      'X' as WYB,
      ND.SYM as ZAMN_SYM,
      ND.reference as ZAMN_REF,
      DK.P as ZAMP_POZ,
      TYPYDOK.T as TYP_ZAM,
      MG.SYM as Magazyn,
      M.KTM as Indeks,
      M.N as Nazwa,
      DK.IL as ILZ,
      DK.IL as ILP,
      DK.IL_ZT as IL_ZT,
      DK.IL_ZT as IL_DO,
      ND.SYM as Opis,
      DK.reference as ZAMP_REF,
      MG.reference as MG_REF,
      M.reference as M_REF,
      ND.D as DATA,
      M.J as JM,
      ND.TRN as TRN,
      0 as JMZ
   from
      DK
      join M using(DK.M,M.REFERENCE)
      join ND using(DK.N,ND.reference)
      left join MG using(ND.MAG,MG.REFERENCE)
      join TYPYDOK using(ND.TYP,TYPYDOK.reference)
   where
      ND.STAT_REJ='T'
      and TYPYDOK.P=':_b'
      and TYPYDOK.DN='N'
      and DK.N=':_a'
      and DK.IL>DK.IL_ZT
   order by
      1,2,3,4
   "
|? (1+_typgen)='R'
|| _qq:=$"
   select
      'X' as WYB,
      REK_N.SYM as ZAMN_SYM,
      REK_N.reference as ZAMN_REF,
      0 as ZAMP_POZ,
      case
        when REK_N.SZ='S' then 'klienta'
        else 'dostawcy'
      end as TYP_ZAM,
      '' as Magazyn,
      M.KTM as Indeks,
      M.N as Nazwa,
      REK_N.IL as ILZ,
      REK_N.IL as ILP,
      REK_N.IL_ZT as IL_ZT,
      REK_N.IL_ZT as IL_DO,
      REK_N.SYM as Opis,
      REK_N.reference as ZAMP_REF,
      '' as MG_REF,
      M.reference as M_REF,
      REK_N.DP as DATA,
      M.J as JM,
      REK_N.TRN as TRN,
      0 as JMZ
   from
      REK_N
      join M using(REK_N.M,M.REFERENCE)
   where
      (REK_N.STAT_REJ='Z' or REK_N.STAT_REJ='T')
      and REK_N.SZ=':_b'
      and REK_N.KH=:_a
      and REK_N.IL>REK_N.IL_ZT
   order by
      1,2,3,4
   "
|? (1+_typgen)='O' & _zalgen='Z'
|| _qq:=$"
   select
      'X' as WYB,
      ZGH.NRPRZ as ZAMN_SYM,
      ZGP.reference as ZAMN_REF,
      ZGP.NRP as ZAMP_POZ,
      'kooperacja' as TYP_ZAM,
      '' as Magazyn,
      M.KTM as Indeks,
      M.N as Nazwa,
      ZGP.ILOSC as ILZ,
      ZGP.ILOSC as ILP,
      ZGP.IL_ZTZ as IL_ZT,
      ZGP.IL_ZTZ as IL_DO,
      ZGP.OPIS as Opis,
      ZGP.reference as ZAMP_REF,
      '' as MG_REF,
      M.reference as M_REF,
      ZGP.STARTD as DATA,
      M.J as JM,
      'T' as TRN,
      0 as JMZ
   from
      ZGP
      join M using(ZGP.M,M.REFERENCE)
      join ZGH using(ZGP.NRPRZ,ZGH.REFERENCE)
      join ZL using(ZGP.ZL,ZL.REFERENCE)
   where
      ZGP.KONTRAH=:_a
      and ZGP.WEW='N'
      and ZGP.TPZ='N'
      and ZGH.STAN='N'
      and ZL.STAN<>'Z'
      and ZGP.ILOSC>ZGP.IL_ZTZ
   order by
      1,2,3,4
   "
|? (1+_typgen)='O' & _zalgen='R'
|| _qq:=$"
   select
      'X' as WYB,
      ZGH.NRPRZ as ZAMN_SYM,
      ZGP.reference as ZAMN_REF,
      ZGP.NRP as ZAMP_POZ,
      'kooperacja' as TYP_ZAM,
      '' as Magazyn,
      M.KTM as Indeks,
      M.N as Nazwa,
      ZGP.ILOSC as ILZ,
      ZGP.ILOSC as ILP,
      ZGP.IL_ZTR as IL_ZT,
      ZGP.IL_ZTR as IL_DO,
      ZGP.OPIS as Opis,
      ZGP.reference as ZAMP_REF,
      '' as MG_REF,
      M.reference as M_REF,
      ZGP.STARTD as DATA,
      M.J as JM,
      'T' as TRN,
      0 as JMZ
   from
      ZGP
      join M using(ZGP.M,M.REFERENCE)
      join ZGH using(ZGP.NRPRZ,ZGH.REFERENCE)
      join ZL using(ZGP.ZL,ZL.REFERENCE)
   where
      ZGP.KONTRAH=:_a
      and ZGP.WEW='N'
      and ZGP.TPZ='N'
      and ZGH.STAN='N'
      and ZL.STAN<>'Z'
      and ZGP.ILOSC>ZGP.IL_ZTR
   order by
      1,2,3,4
   "
?};
_uprtyp:={? _typgen='Z' || exec('get','#params',3004,2,OPERATOR.USER)
         |? _typgen='W' || exec('get','#params',3014,2,OPERATOR.USER)
         |? _typgen='D'
          | _typgen='P' || exec('get','#params',3024,2,OPERATOR.USER)
         || ''
         ?};
__dsp_tab:=sql(_qq,{? _typgen='W' | (2+_typgen)='MW' || _b || _a ?}
                  ,{? (1+_typgen)='M' | (1+_typgen)='R' || _typgen+1 || '' ?});
:: oblicza ilosc pozostala do dyspozycji
{? __dsp_tab.first()
|| {!
   |? _jmz:=0;
      _zd_poz:='';
      {? _typgen='D'
      || _zd_poz:=__dsp_tab.ZAMP_REF
      |? _typgen='P'
      || _zd_poz:=exec('FindAndGet','#table',ZDP_POZ,__dsp_tab.ZAMP_REF,,"ZD_POZ",'')
      ?};
      {? _zd_poz<>'' || _jmz:=__dsp_tab.JMZ & exec('FindAndGet','#table',ZD_POZ,_zd_poz,,"JM<>J2 & WS2<>1",0) ?};

      {? _jmz
      || _ws2:=exec('FindAndGet','#table',ZD_POZ,_zd_poz,,"WS2",1);
         _dokl_m:=exec('FindAndGet','#table',ZD_POZ,_zd_poz,,"M().DOKL",3);
         _dokl_c:=exec('FindAndGet','#table',ZD_POZ,_zd_poz,,"M().DOKL_C",3);
         __dsp_tab.ILP:=__dsp_tab.ILP/_ws2 $_dokl_m
      ?};

      {? __dsp_tab.WYB='X'
      || __dsp_tab.JM:=exec('FindAndGet','#table',M,__dsp_tab.M_REF,,"J().KOD",'');
         {? _uprtyp='' | _uprtyp*(__dsp_tab.TYP_ZAM+' ')
         || {? (';ZWPD'*_typgen)>1
            || _uip:=exec('FindAndGet','#table',ref_tab(__dsp_tab.ZAMP_REF),__dsp_tab.ZAMP_REF,,"uidref()",'');
               _ile_zt:=exec('ileTR_ZL','transport_wspolne',_uip,,1);
               __dsp_tab.ILP:=__dsp_tab.ILP-_ile_zt[1];
               obj_del(_ile_zt)
            || __dsp_tab.ILP:=__dsp_tab.ILP-__dsp_tab.IL_ZT
            ?};
            {? __dsp_tab.ILP>0
            ||
               __dsp_tab.IL_DO:=0;
               {? _doksql=__dsp_tab.ZAMN_REF & (~_autgen | __dsp_tab.TRN='T')
               || _okigen:=1;
                  __dsp_tab.WYB:='T';
                  __dsp_tab.IL_DO:=__dsp_tab.ILP
               ?};
               __dsp_tab.put();
               __dsp_tab.next()
            ||
               __dsp_tab.cntx_psh;
               _next:=__dsp_tab.next;
               __dsp_tab.cntx_pop;
               __dsp_tab.del();
               _next
            ?}
         || __dsp_tab.del()
         ?}
      || __dsp_tab.next()
      ?}
   !}
?};
{? __dsp_tab.first()
||
:: grupowanie tabeli wg Zamowien
   _qq:=$"
      select distinct
         :_a.ZAMN_SYM as ZAMN_SYM,
         :_a.ZAMN_REF as ZAMN_REF,
         :_a.ZAMP_REF as ZAMP_REF,
         :_a.DATA as DATA,
         :_a.ZAMP_POZ as ZAMP_POZ,
         :_a.MAGAZYN as MAGAZYN,
         :_a.INDEKS as INDEKS,
         :_a.NAZWA as NAZWA,
         :_a.ILP as ILP,
         :_a.JM as JM,
         0 as WYB
      from
         :_a
      order by 1,2
   ";
   __zam_list:=sql(_qq,__dsp_tab);

   {? __zam_list.first() & _doksql<>''
   ||
      {!
      |? {? _doksql=__zam_list.ZAMN_REF & exec('zam_lock','transport_zlec',__zam_list.ZAMN_REF)
         || __zam_list.WYB:=3;
            __zam_list.put(1)
         ?};
         __zam_list.next()
      !}
   ?};
:: okienko
   __dsp_sel:=__dsp_tab.mk_sel('Pozycje do dyspozycji transportu'@,'P',,'#winidsdsp',,,,,'U');
   __dsp_tab.win_fld(__dsp_sel,,'ZAMN_SYM',,,20,,1,{? (1+_typgen)='M' || 'Dokument'@
                                                   |? (1+_typgen)='R' || 'Reklamacja'@
                                                   |? (1+_typgen)='O' || 'Przewodnik'@
                                                                      || 'Zamówienie'@
                                                   ?});
   __dsp_tab.win_fld(__dsp_sel,,'ZAMP_POZ',,,5,,1,'Pozycja'@);
   __dsp_tab.win_fld(__dsp_sel,,'TYP_ZAM',,,7,,1,'Typ'@);
   __dsp_tab.win_fld(__dsp_sel,,'MAGAZYN',,,8,,1,'Magazyn'@);
   __dsp_tab.win_fld(__dsp_sel,,'INDEKS',,,25,,1,'Indeks'@);
   __dsp_tab.win_fld(__dsp_sel,,'NAZWA',,,30,,1,'Nazwa'@);
   __dsp_tab.win_fld(__dsp_sel,,'ILZ',,,-12,ST.DOKL,1,{? (1+_typgen)='M' || 'Ilość'@
                                                      |? (1+_typgen)='R' || 'Ilość do reklamacji'@
                                                      |? (1+_typgen)='O' || 'Ilość planowana'@
                                                                         || 'Ilość zamawiana'@
                                                      ?});
   __dsp_tab.win_fld(__dsp_sel,,'ILP',,,-12,ST.DOKL,1,'Pozostało do dyspozycji'@);
   __dsp_tab.win_fld(__dsp_sel,,'IL_DO',,,-12,ST.DOKL,,'Do dyspozycji'@);
   __dsp_tab.fld_fml('IL_DO','EDIT_FORMAT',
      "'in_prec='+$exec('FindInSet','#table','M','MATKTM',__dsp_tab.INDEKS,__dsp_tab.INDEKS,\"M.DOKL\")");
   __dsp_tab.win_fld(__dsp_sel,,'JM',,,4,,1,'jm'@);
   __dsp_tab.win_act(__dsp_sel,,'Formuła','Wypełnij'@@,,,,"exec('dsp_mark','transport_zlec',1)",,1,"sel_nchk()");
   __dsp_tab.win_act(__dsp_sel,,'Formuła','Zeruj'@@,,,,"exec('dsp_mark','transport_zlec',0)",,1,"sel_nchk()");
   __dsp_tab.win_act(__dsp_sel,,'Formuła','Dołącz'@@,,,"exec('add_dsp','transport_zlec')");
   __dsp_tab.win_act(__dsp_sel,,'Popraw',,,,,,1);
   __dsp_tab.win_act(__dsp_sel,,'Formuła','Usuń'@@,,,,"exec('del_dsp','transport_zlec',0)",,1,"exec('del_dsp','transport_zlec',0)");
   __dsp_tab.win_act(__dsp_sel,,'Formuła','Akceptuj'@@,,,"exec('dsp_akc','transport_zlec')");
   __dsp_tab.win_act(__dsp_sel,,'Kolejność');
   __dsp_tab.win_act(__dsp_sel,,'Szukaj');
   __dsp_tab.win_act(__dsp_sel,,'Rekord',,,,"exec('dsp_rek','transport_zlec')","exec('dsp_aepp','transport_zlec')");
   __dsp_tab.win_act(__dsp_sel,,'Wyświetl',,,,"exec('dispPOZ','transport_zlec',__dsp_tab.ZAMP_REF)");
   __dsp_tab.win_act(__dsp_sel,1,'Formuła','Dołącz'@@,,,"exec('add_dsp','transport_zlec')",,1);
   __dsp_tab.win_sel(__dsp_sel);
   __dsp_tab.win_fml(__dsp_sel,,'ZAMN_SYM',,'ICON_BEFORE',"exec('ptwn_sym_ib','transport_zlec')");

   __zam_sel:=__zam_list.mk_sel({? (1+_typgen)='M'
                                || 'Dokumenty do dyspozycji'@
                                |? (1+_typgen)='R'
                                || 'Reklamacje do dyspozycji'@
                                |? (1+_typgen)='O'
                                || 'Pozycje przewodników do dyspozycji'@
                                || 'Zamówienia do dyspozycji'@
                                ?},'P',,'#winid_zan',,,,,'U');
   __zam_list.win_fld(__zam_sel,,'MAGAZYN',,,10,,1,'Magazyn'@);
   __zam_list.win_fld(__zam_sel,,'ZAMN_SYM',,,20,,1,{? (1+_typgen)='M' || 'Dokument'@
                                                    |? (1+_typgen)='R' || 'Reklamacja'@
                                                    |? (1+_typgen)='O' || 'Przewodnik'@
                                                                       || 'Zamówienie'@
                                                    ?});
   __zam_list.win_fld(__zam_sel,,'DATA',,,10,,1,'Data'@);
   __zam_list.win_fld(__zam_sel,,'ZAMP_POZ',,,5,,1,'Pozycja'@);
   __zam_list.win_fld(__zam_sel,,'INDEKS',,,30,,1,'Indeks'@);
   __zam_list.win_fld(__zam_sel,,'NAZWA',,,40,,1,'Nazwa'@);
   __zam_list.win_fld(__zam_sel,,'ILP',,,-16,ST.DOKL,1,'Pozostało do dyspozycji'@);
   __zam_list.win_fld(__zam_sel,,'JM',,,4,,1,'jm'@);
   __zam_list.win_act(__zam_sel,,'Formuła','Dodaj do listy'@@,,,,"exec('add_zamp','transport_zlec',2)",,1
     ,"exec('add_zamp','transport_zlec',2)");
   __zam_list.win_act(__zam_sel,,'Formuła','Usuń z listy'@@,,,,"exec('del_zamp','transport_zlec',2)",,1
     ,"exec('del_zamp','transport_zlec',2)");
   __zam_list.win_act(__zam_sel,,'Formuła',{? (1+_typgen)='M' || 'Pokaż dokument'@@
                                           |? (1+_typgen)='R' || 'Pokaż reklamację'@@
                                                              || 'Pokaż zamówienie'@@
                                           ?}
     ,,,,"exec('dispZAM','transport_zlec')");
   __zam_list.win_act(__zam_sel,,'Rekord',,,,"
         {? __zam_list.sel_size()
         || __zam_list.actions_grayed(__zam_sel,'');
            __zam_list.actions(__zam_sel,'','D',1)
         |? ~__zam_list.WYB
         || __zam_list.actions_grayed(__zam_sel,'U');
            __zam_list.actions(__zam_sel,,'D',1)
         || __zam_list.actions_grayed(__zam_sel,'D');
            __zam_list.actions(__zam_sel,,'U',1)
         ?}");
   __zam_list.win_act(__zam_sel,,'Wyświetl',,,,"exec('dispPOZ','transport_zlec',__zam_list.ZAMP_REF)");
   __zam_list.win_sel(__zam_sel);
   __zam_list.win_fml(__zam_sel,,'ZAMN_SYM',,'ICON_BEFORE',"exec('zamn_sym_ib','transport_zlec')");

   _winsel:=__dsp_tab.grp_make('Pozycje do dyspozycji transportu'@,,'#realgrpzdp');
   __dsp_tab.grp_sel(_winsel,__dsp_tab,__dsp_sel,,"exec('odsw_inf','transport_zlec')",,,15,,,,,'maximized_with_title');
   __dsp_tab.grp_splt(_winsel,,'horizontal','filtr');
   __dsp_tab.grp_sel(_winsel,__zam_list,__zam_sel,,"exec('posZAM','transport_zlec')",,,20,,,,,'maximized_with_title');

   __dsp_tab.win_sel(_winsel);
   __dsp_tab.dnd_sel(__dsp_sel,,'records.#winid_zan',"exec('add_zamp','transport_zlec')");
   __zam_list.dnd_sel(__zam_sel,,'records.#winidsdsp',"exec('del_zamp','transport_zlec')");

   __dspadd:=0;
   __dsp_tab.clear();
   __dsp_tab.prefix('T');
   __dsp_tab.first();

   __dsp_ndx:=__dsp_tab.ndx_tmp('',0,'ZAMN_REF',,,'ZAMP_POZ',,);
   _wyn:={? _autgen || 1 ||  __dsp_tab.select() ?};
   exec('zam_unlock','transport_zlec',{? (1+_typgen)='M' || 2
                                      |? (1+_typgen)='R' || 4
                                      |? _typgen='P'     || 3
                                      |? _typgen='O'     || 5
                                      || _typgen='D'
                                      ?});
   __dsp_tab.dnd_sel(__dsp_sel,,'records.#winid_zan',"");
   __zam_list.dnd_sel(__zam_sel,,'records.#winidsdsp',"")
||
   FUN.info('Aktualnie brak pozycji dla dyspozycji transportu.'@)
?};
_wyn


\dok2TR_NZL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Wypełnienie nagłówka dyspozycji transportu na podstawie dokumentu (zamówienie, dokument)
::   WE: _a - uidref dokumentu
::       _b - komunikaty: 1 - on(domyślnie) / 0 - off
::       _c - rodzaj dyspozycji [(Z)aładunek / (R)ozładunek]
::   UWAGA. Kontekst wywowałnia aktualny TR_NZL
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dok:=_a;
_use_name:=ref_name(_dok);
_Tab:=ref_tab(_dok);
_kom:=_b;
_rodz:=_c;
_result:=0;

_context:=params_get().context;
_var_tr_nzl:=params_get().var_tr_nzl;

{? _Tab=ZK_N
|| exec('openz_psh','open_tab');
   {? (_use_name+3)<>(ZK_N.name()+3) || exec('openz','open_tab',_use_name+3) ?};
   _oki:=ZK_N.seek(_dok) | (ZK_N.prefix();ZK_N.seek(_dok));
   {? _oki
   || _zk_n_uid:=ZK_N.uidref();
      _oddz:=ZK_N.ODDZ;
::   Dokument
      TR_NZL.WHERE:='ZK_N';
      TR_NZL.WHERE_OP:={? ZK_N.T().R='Z' || 'Zamówienie sprzedaży' || 'Zamówienie wewnętrzne' ?};
      TR_NZL.ODDZ:=_oddz;
      TR_NZL.DOK:=exec('record','#to_string',_zk_n_uid);
      TR_NZL.DOK_REF:=_zk_n_uid;
      TR_NZL.TR_ZEWN:=ZK_N.TR_ZEWN;
      TR_NZL.WLASNY:={? TR_NZL.TR_ZEWN<>null() || 'N' || 'T' ?};
      TR_NZL.UWAGI:=ZK_N.OP;
      _opis:=ZK_N.memo_txt(,1,'UW');
      TR_NZL.memo_set(_opis,'OPIS');

::   Adres
      TR_NZL.KH:=ZK_N.KH;
      TR_NZL.KH_ODB:=ZK_N.ODB;
      TR_NZL.MG:=ZK_N.MG;
      TR_NZL.KH_MSC:=ZK_N.KH_MSC;
      TR_NZL.POS:=null();
      TR_NZL.WYS:=null();
      {? TR_NZL.TR_ZEWN<>null() & TR_NZL.TR_ZEWN().COURIER<>'' || TR_NZL.NOTR:=1 ?};
      {? ZK_N.T().R='Z'
      || _addr:='KH';
         {? TR_NZL.KH_ODB<>null || _addr:='KH_ODB' ?};
         {? TR_NZL.KH_MSC<>null || _addr:='KH_MSC' ?}
      || _addr:='MG'
      ?};
      ADDR_CHO.cntx_psh();
      ADDR_CHO.index('KOD');
      ADDR_CHO.prefix(_addr,);
      {? ADDR_CHO.first() || TR_NZL.ADDR_CHO:=ADDR_CHO.ref() ?};
      ADDR_CHO.cntx_pop();
      exec('adres_set_select','transport_wspolne','TR_NZL',_addr,1);

::   Pojazd
      TR_NZL.POJAZD:=ZK_N.POJAZD;
::   Indeks
      TR_NZL.KTM:='zamówienie';
::   Kategoria transportu
      TR_NZL.TR_RODZ:=null();
::   Identyfikator zamówienia z BaseLinker
      TR_NZL.ORDER:=$ZK_N.BASLIN_O;
::   Daty i rodzaj
      TR_NZL.RODZ:='R';
      TR_NZL.DT:={? ZK_N.DT>=date() || ZK_N.DT || date(0,0,0) ?};
      params_exec('wol_nr','numery','TR_NZL');
      {? TR_NZL.put(1)
      || _var_tr_nzl.KH:=TR_NZL.KH;
         _var_tr_nzl.KH_ODB:=TR_NZL.KH_ODB;
         _var_tr_nzl.KH_MSC:=TR_NZL.KH_MSC;
         _var_tr_nzl.POS:=TR_NZL.POS;
         _var_tr_nzl.MG:=TR_NZL.MG;
         _var_tr_nzl.WYS:=TR_NZL.WYS;
         _var_tr_nzl.KRAJ:=TR_NZL.KRAJ;
         _var_tr_nzl.MIASTO:=TR_NZL.MIASTO;
         _var_tr_nzl.UL:=TR_NZL.UL;
         _var_tr_nzl.KPOCZ:=TR_NZL.KPOCZ;
         _var_tr_nzl.POCZ:=TR_NZL.POCZ;
         _var_tr_nzl.NUMER:=TR_NZL.NUMER;
         _var_tr_nzl.LOKAL:=TR_NZL.LOKAL;
         _var_tr_nzl.RODZ:=TR_NZL.RODZ;
         _var_tr_nzl.DP:=TR_NZL.DP;
         _var_tr_nzl.DT:=TR_NZL.DT;
         _var_tr_nzl.DR:=TR_NZL.DR;
         _var_tr_nzl.UWAGI:=TR_NZL.UWAGI;
         _var_tr_nzl.PO_FIRST:=1;
         _var_tr_nzl.WHERE:='ZK_N';
         _result:=1
      ?}
   ?};
   exec('openz_pop','open_tab')
|? _Tab=ZD_NAG
|| exec('openzd_psh','open_tab');
   {? (_use_name+3)<>(ZD_NAG.name()+3) || exec('openzd','open_tab',_use_name+3) ?};
   _oki:=ZD_NAG.seek(_dok) | (ZD_NAG.prefix();ZD_NAG.seek(_dok));
   {? _oki
   || _zd_n_uid:=ZD_NAG.uidref();
      _oddz:=ZD_NAG.ODDZ;
::   Dokument
      TR_NZL.WHERE:='ZD_NAG';
      TR_NZL.WHERE_OP:='Zamówienie dostaw';
      TR_NZL.ODDZ:=_oddz;
      TR_NZL.DOK:=exec('record','#to_string',_zd_n_uid);
      TR_NZL.DOK_REF:=_zd_n_uid;
      TR_NZL.TR_ZEWN:=ZD_NAG.TR_ZEWN;
      TR_NZL.WLASNY:={? TR_NZL.TR_ZEWN<>null() || 'N' || 'T' ?};
      TR_NZL.UWAGI:=ZD_NAG.UWAGI;
      _opis:=ZD_NAG.memo_txt(,1,'UW');
      TR_NZL.memo_set(_opis,'OPIS');

::   Adres
      TR_NZL.KH:=ZD_NAG.KH;
      TR_NZL.KH_ODB:=null();
      TR_NZL.KH_MSC:=ZD_NAG.KH_MSC;
      TR_NZL.POS:=null();
      TR_NZL.WYS:=null();
      _addr:='KH';
      {? TR_NZL.KH_MSC<>null || _addr:='KH_MSC' ?};
      ADDR_CHO.cntx_psh();
      ADDR_CHO.index('KOD');
      ADDR_CHO.prefix(_addr,);
      {? ADDR_CHO.first() || TR_NZL.ADDR_CHO:=ADDR_CHO.ref() ?};
      ADDR_CHO.cntx_pop();
      exec('adres_set_select','transport_wspolne','TR_NZL',_addr);

::   Pojazd
      TR_NZL.POJAZD:=ZD_NAG.POJAZD;
::   Indeks
      TR_NZL.KTM:='zamówienie';
::   Kategoria transportu
      TR_NZL.TR_RODZ:=null();

::   Daty i rodzaj
      TR_NZL.RODZ:='Z';
      TR_NZL.DT:={? ZD_NAG.DTPREAL>=date() || ZD_NAG.DTPREAL |? ZD_NAG.DATA>=date() || ZD_NAG.DATA || date(0,0,0) ?};
      params_exec('wol_nr','numery','TR_NZL');
      {? TR_NZL.put(1)
      || _var_tr_nzl.KH:=TR_NZL.KH;
         _var_tr_nzl.KH_ODB:=TR_NZL.KH_ODB;
         _var_tr_nzl.KH_MSC:=TR_NZL.KH_MSC;
         _var_tr_nzl.POS:=TR_NZL.POS;
         _var_tr_nzl.MG:=TR_NZL.MG;
         _var_tr_nzl.WYS:=TR_NZL.WYS;
         _var_tr_nzl.KRAJ:=TR_NZL.KRAJ;
         _var_tr_nzl.MIASTO:=TR_NZL.MIASTO;
         _var_tr_nzl.UL:=TR_NZL.UL;
         _var_tr_nzl.KPOCZ:=TR_NZL.KPOCZ;
         _var_tr_nzl.POCZ:=TR_NZL.POCZ;
         _var_tr_nzl.NUMER:=TR_NZL.NUMER;
         _var_tr_nzl.LOKAL:=TR_NZL.LOKAL;
         _var_tr_nzl.RODZ:=TR_NZL.RODZ;
         _var_tr_nzl.DP:=TR_NZL.DP;
         _var_tr_nzl.DT:=TR_NZL.DT;
         _var_tr_nzl.DR:=TR_NZL.DR;
         _var_tr_nzl.UWAGI:=TR_NZL.UWAGI;
         _var_tr_nzl.PO_FIRST:=1;
         _var_tr_nzl.WHERE:='ZD_NAG';
         _result:=1
      ?}
   ?};
   exec('openzd_pop','open_tab')
|? _Tab=ZDP_NAG
|| exec('openzd_psh','open_tab');
   {? (_use_name+3)<>(ZDP_NAG.name()+3) || exec('openzd','open_tab',_use_name+3) ?};
   _oki:=ZDP_NAG.seek(_dok) | (ZDP_NAG.prefix();ZDP_NAG.seek(_dok));
   {? _oki
   || _zd_n_uid:=ZDP_NAG.uidref();
      _oddz:=ZDP_NAG.ODDZ;
::   Dokument
      TR_NZL.WHERE:='ZDP_NAG';
      TR_NZL.WHERE_OP:='Potwierdzenie dostawy';
      TR_NZL.ODDZ:=_oddz;
      TR_NZL.DOK:=exec('record','#to_string',_zd_n_uid);
      TR_NZL.DOK_REF:=_zd_n_uid;
      TR_NZL.TR_ZEWN:=ZDP_NAG.TR_ZEWN;
      TR_NZL.WLASNY:={? TR_NZL.TR_ZEWN<>null() || 'N' || 'T' ?};
      TR_NZL.UWAGI:=ZDP_NAG.SYM_DST;
      _opis:='';
      TR_NZL.memo_set(_opis,'OPIS');

::   Adres
      TR_NZL.KH:=ZDP_NAG.KH;
      TR_NZL.KH_ODB:=null();
      TR_NZL.KH_MSC:=null();
      TR_NZL.POS:=null();
      TR_NZL.WYS:=null();
      _addr:='KH';
      ADDR_CHO.cntx_psh();
      ADDR_CHO.index('KOD');
      ADDR_CHO.prefix(_addr,);
      {? ADDR_CHO.first() || TR_NZL.ADDR_CHO:=ADDR_CHO.ref() ?};
      ADDR_CHO.cntx_pop();
      exec('adres_set_select','transport_wspolne','TR_NZL',_addr);

::   Pojazd
      TR_NZL.POJAZD:=null();
::   Indeks
      TR_NZL.KTM:='zamówienie';
::   Kategoria transportu
      TR_NZL.TR_RODZ:=null();

::   Daty i rodzaj
      TR_NZL.RODZ:='Z';
      TR_NZL.DT:={? ZDP_NAG.D_REA>=date() || ZDP_NAG.D_REA
                 |? ZDP_NAG.D_WYS>=date() || ZDP_NAG.D_WYS
                 || date(0,0,0)
                 ?};
      params_exec('wol_nr','numery','TR_NZL');
      {? TR_NZL.put(1)
      || _var_tr_nzl.KH:=TR_NZL.KH;
         _var_tr_nzl.KH_ODB:=TR_NZL.KH_ODB;
         _var_tr_nzl.KH_MSC:=TR_NZL.KH_MSC;
         _var_tr_nzl.POS:=TR_NZL.POS;
         _var_tr_nzl.MG:=TR_NZL.MG;
         _var_tr_nzl.WYS:=TR_NZL.WYS;
         _var_tr_nzl.KRAJ:=TR_NZL.KRAJ;
         _var_tr_nzl.MIASTO:=TR_NZL.MIASTO;
         _var_tr_nzl.UL:=TR_NZL.UL;
         _var_tr_nzl.KPOCZ:=TR_NZL.KPOCZ;
         _var_tr_nzl.POCZ:=TR_NZL.POCZ;
         _var_tr_nzl.NUMER:=TR_NZL.NUMER;
         _var_tr_nzl.LOKAL:=TR_NZL.LOKAL;
         _var_tr_nzl.RODZ:=TR_NZL.RODZ;
         _var_tr_nzl.DP:=TR_NZL.DP;
         _var_tr_nzl.DT:=TR_NZL.DT;
         _var_tr_nzl.DR:=TR_NZL.DR;
         _var_tr_nzl.UWAGI:=TR_NZL.UWAGI;
         _var_tr_nzl.PO_FIRST:=1;
         _var_tr_nzl.WHERE:='ZDP_NAG';
         _result:=1
      ?}
   ?};
   exec('openzd_pop','open_tab')
|? _Tab=ND
|| exec('mag_psh','open_tab');
   exec('mag_open','open_tab',1+(_use_name+3),1-(_use_name+3));
   _oki:=ND.seek(_dok) | (ND.prefix();ND.seek(_dok));
   {? _oki
   || _nd_uid:=ND.uidref();
      _oddz:=ND.ODDZ;
::   Dokument
      TR_NZL.WHERE:='ND';
      TR_NZL.WHERE_OP:='Dokument magazynowy';
      TR_NZL.ODDZ:=_oddz;
      TR_NZL.DOK:=exec('record','#to_string',_nd_uid);
      TR_NZL.DOK_REF:=_nd_uid;
      TR_NZL.UWAGI:=ND.O;

::   Adres
      TR_NZL.KH:=ND.KH;
      TR_NZL.KH_ODB:=ND.KH_ODB;
      TR_NZL.MG:=ND.MAG;
      TR_NZL.KH_MSC:=ND.KH_MSC;
      TR_NZL.POS:=null();
      TR_NZL.WYS:=null();
      {? ND.TYP().Z='T'
      || _addr:='KH';
         {? TR_NZL.KH_ODB<>null || _addr:='KH_ODB' ?};
         {? TR_NZL.KH_MSC<>null || _addr:='KH_MSC' ?}
      || _addr:='MG'
      ?};
      ADDR_CHO.cntx_psh();
      ADDR_CHO.index('KOD');
      ADDR_CHO.prefix(_addr,);
      {? ADDR_CHO.first() || TR_NZL.ADDR_CHO:=ADDR_CHO.ref() ?};
      ADDR_CHO.cntx_pop();
      exec('adres_set_select','transport_wspolne','TR_NZL',_addr);

::   Indeks
      TR_NZL.KTM:='dokument';
::   Kategoria transportu
      TR_NZL.TR_RODZ:=null();

::   Daty i rodzaj
      TR_NZL.RODZ:={? ND.TYP().P='T' || 'R' || 'Z' ?};
      TR_NZL.DT:={? ND.D>=date() || ND.D || date(0,0,0) ?};
      params_exec('wol_nr','numery','TR_NZL');
      {? TR_NZL.put(1)
      || _var_tr_nzl.KH:=TR_NZL.KH;
         _var_tr_nzl.KH_ODB:=TR_NZL.KH_ODB;
         _var_tr_nzl.KH_MSC:=TR_NZL.KH_MSC;
         _var_tr_nzl.POS:=TR_NZL.POS;
         _var_tr_nzl.MG:=TR_NZL.MG;
         _var_tr_nzl.WYS:=TR_NZL.WYS;
         _var_tr_nzl.KRAJ:=TR_NZL.KRAJ;
         _var_tr_nzl.MIASTO:=TR_NZL.MIASTO;
         _var_tr_nzl.UL:=TR_NZL.UL;
         _var_tr_nzl.KPOCZ:=TR_NZL.KPOCZ;
         _var_tr_nzl.POCZ:=TR_NZL.POCZ;
         _var_tr_nzl.NUMER:=TR_NZL.NUMER;
         _var_tr_nzl.LOKAL:=TR_NZL.LOKAL;
         _var_tr_nzl.RODZ:=TR_NZL.RODZ;
         _var_tr_nzl.DP:=TR_NZL.DP;
         _var_tr_nzl.DT:=TR_NZL.DT;
         _var_tr_nzl.DR:=TR_NZL.DR;
         _var_tr_nzl.UWAGI:=TR_NZL.UWAGI;
         _var_tr_nzl.PO_FIRST:=1;
         _var_tr_nzl.WHERE:='ZK_N';
         _result:=1
      ?}
   ?};
   exec('mag_pop','open_tab')
|? _Tab=REK_N
|| exec('rek_psh','open_tab');
   {? (_use_name+3)<>(REK_N.name()+3) || exec('rek_open','open_tab',1+(_use_name+3),_use_name+2) ?};
   _oki:=REK_N.seek(_dok) | (REK_N.prefix();REK_N.seek(_dok));
   {? _oki
   || _rek_n_uid:=REK_N.uidref();
      _oddz:=REK_N.ODDZ;

::   Dokument
      TR_NZL.WHERE:='REK_N';
      TR_NZL.WHERE_OP:={? REK_N.SZ='S' || 'Reklamacja klienta' || 'Reklamacja do dostawcy' ?};
      TR_NZL.ODDZ:=_oddz;
      TR_NZL.DOK:=exec('record','#to_string',_rek_n_uid);
      TR_NZL.DOK_REF:=_rek_n_uid;

::   Adres
      TR_NZL.KH:=REK_N.KH;
      TR_NZL.KH_ODB:=REK_N.KH_ODB;
      TR_NZL.KH_MSC:=null();
      TR_NZL.POS:=REK_N.POS;
      TR_NZL.WYS:=null();
      _addr:=REK_N.ADDR_CHO().K;
      ADDR_CHO.cntx_psh();
      ADDR_CHO.index('KOD');
      ADDR_CHO.prefix(_addr,);
      {? ADDR_CHO.first() || TR_NZL.ADDR_CHO:=ADDR_CHO.ref() ?};
      ADDR_CHO.cntx_pop();
      exec('adres_set_select','transport_wspolne','TR_NZL',_addr);
      {? _addr='MANUAL'
      || TR_NZL.KRAJ:=REK_N.KRAJ;
         TR_NZL.MIASTO:=REK_N.MIASTO;
         TR_NZL.UL:=REK_N.UL;
         TR_NZL.NUMER:=REK_N.NUMER;
         TR_NZL.LOKAL:=REK_N.LOKAL;
         TR_NZL.KPOCZ:=REK_N.KPOCZ;
         TR_NZL.POCZ:=REK_N.POCZ
      ?};

::   Indeks
      TR_NZL.KTM:='reklamacja';
::   Kategoria transportu
      TR_NZL.TR_RODZ:=null();

::   Daty i rodzaj
      TR_NZL.RODZ:={? REK_N.SZ='S' || 'R' || 'Z' ?};
      TR_NZL.DT:={? REK_N.DP>=date() || REK_N.DP || date() ?};
      params_exec('wol_nr','numery','TR_NZL');
      {? TR_NZL.put(1)
      || _var_tr_nzl.KH:=TR_NZL.KH;
         _var_tr_nzl.KH_ODB:=TR_NZL.KH_ODB;
         _var_tr_nzl.KH_MSC:=TR_NZL.KH_MSC;
         _var_tr_nzl.POS:=TR_NZL.POS;
         _var_tr_nzl.MG:=TR_NZL.MG;
         _var_tr_nzl.WYS:=TR_NZL.WYS;
         _var_tr_nzl.KRAJ:=TR_NZL.KRAJ;
         _var_tr_nzl.MIASTO:=TR_NZL.MIASTO;
         _var_tr_nzl.UL:=TR_NZL.UL;
         _var_tr_nzl.KPOCZ:=TR_NZL.KPOCZ;
         _var_tr_nzl.POCZ:=TR_NZL.POCZ;
         _var_tr_nzl.NUMER:=TR_NZL.NUMER;
         _var_tr_nzl.LOKAL:=TR_NZL.LOKAL;
         _var_tr_nzl.RODZ:=TR_NZL.RODZ;
         _var_tr_nzl.DP:=TR_NZL.DP;
         _var_tr_nzl.DT:=TR_NZL.DT;
         _var_tr_nzl.DR:=TR_NZL.DR;
         _var_tr_nzl.UWAGI:=TR_NZL.UWAGI;
         _var_tr_nzl.PO_FIRST:=1;
         _var_tr_nzl.WHERE:='REK_N';
         _result:=1
      ?}
   ?};
   exec('rek_pop','open_tab')
|? _Tab=ZGP
 & (_opc:=FUN.choice('Wybierz rodzaj dyspozycji transportowej:'@,
           ,'&Załadunek (dostawa od klienta)'@
           ,'&Rozładunek (dostawa do klienta)'@); _opc)
||
   ZGP.cntx_psh();
   _oki:=ZGP.seek(_dok) | (ZGP.prefix();ZGP.seek(_dok));
   {? _oki
   || _zgp_uid:=ZGP.uidref();
      _oddz:=REK_N.ODDZ;

::   Dokument
      TR_NZL.WHERE:='ZGP';
      TR_NZL.WHERE_OP:='Kooperacja';
      TR_NZL.ODDZ:=ZGP.ZL().ODDZ;
      TR_NZL.DOK:=exec('record','#to_string',_zgp_uid);
      TR_NZL.DOK_REF:=_zgp_uid;

::   Adres
      TR_NZL.KH:=ZGP.KONTRAH;
      TR_NZL.KH_ODB:=null();
      TR_NZL.KH_MSC:=null();
      TR_NZL.POS:=null();
      TR_NZL.WYS:=null();
      _addr:='KH';
      ADDR_CHO.cntx_psh();
      ADDR_CHO.index('KOD');
      ADDR_CHO.prefix(_addr,);
      {? ADDR_CHO.first() || TR_NZL.ADDR_CHO:=ADDR_CHO.ref() ?};
      ADDR_CHO.cntx_pop();
      exec('adres_set_select','transport_wspolne','TR_NZL',_addr);

::   Indeks
      TR_NZL.KTM:='kooperacja';
::   Kategoria transportu
      TR_NZL.TR_RODZ:=null();

::   Daty i rodzaj
      TR_NZL.RODZ:={? _opc=1 || 'Z' || 'R' ?};
      TR_NZL.DT:={? ZGP.STARTDK>=date() || ZGP.STARTDK || date() ?};
      params_exec('wol_nr','numery','TR_NZL');
      {? TR_NZL.put(1)
      || _var_tr_nzl.KH:=TR_NZL.KH;
         _var_tr_nzl.KH_ODB:=TR_NZL.KH_ODB;
         _var_tr_nzl.KH_MSC:=TR_NZL.KH_MSC;
         _var_tr_nzl.POS:=TR_NZL.POS;
         _var_tr_nzl.MG:=TR_NZL.MG;
         _var_tr_nzl.WYS:=TR_NZL.WYS;
         _var_tr_nzl.KRAJ:=TR_NZL.KRAJ;
         _var_tr_nzl.MIASTO:=TR_NZL.MIASTO;
         _var_tr_nzl.UL:=TR_NZL.UL;
         _var_tr_nzl.KPOCZ:=TR_NZL.KPOCZ;
         _var_tr_nzl.POCZ:=TR_NZL.POCZ;
         _var_tr_nzl.NUMER:=TR_NZL.NUMER;
         _var_tr_nzl.LOKAL:=TR_NZL.LOKAL;
         _var_tr_nzl.RODZ:=TR_NZL.RODZ;
         _var_tr_nzl.DP:=TR_NZL.DP;
         _var_tr_nzl.DT:=TR_NZL.DT;
         _var_tr_nzl.DR:=TR_NZL.DR;
         _var_tr_nzl.UWAGI:=TR_NZL.UWAGI;
         _var_tr_nzl.PO_FIRST:=1;
         _var_tr_nzl.WHERE:='REK_N';
         _result:=1
      ?}
   ?};
   ZGP.cntx_pop()
?};
params_set('context',_context,'var_tr_nzl',_var_tr_nzl);
_result


\pr_trzl_mg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Przed redakcją pola MG dla TR_ZL
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
{? TR_ZL.TR_NZL().WHERE='ZK_N' & TR_ZL.DOK_REF<>''
|| _rodz:=exec('FindAndGet','#table',ZK_N,TR_ZL.DOK_REF,,"T().R='W'",0);
   _msym:=exec('FindAndGet','#table',ZK_N,TR_ZL.DOK_REF,,"MD().SYM",'');
   exec('filtr_mg','zamsiw_nag',_rodz,_msym,1)
|| _res:=0
?};
_res


\po_trzl_mg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Przed redakcji pola MG dla TR_ZL
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
1


\zam_lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: r_lock dla zaznaczonej pozycji ZD_NAG
::   WE: _a - $ZD_NAG.ref()
::  OLD: \zdn_lock/zd.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? (5+_a)='zknag'
|| ZK_N.cntx_psh();
   ZK_N.use(8+_a);
   ZK_N.prefix();
   {? ZK_N.seek(_a,8+_a)
   || {? ZK_N.r_lock(1,1,1)
      || _wyn:=1
      || {? FUN.ask('Zamówienie %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[ZK_N.SYM])
          & ZK_N.r_lock(1,,1)
         || ZK_N.r_unlock()
         ?}
      ?}
   ?};
   ZK_N.cntx_pop()
|? (5+_a)='zdnag'
|| ZD_NAG.cntx_psh();
   ZD_NAG.use(8+_a);
   ZD_NAG.prefix();
   {? ZD_NAG.seek(_a,8+_a)
   || {? ZD_NAG.r_lock(1,1,1)
      || _wyn:=1
      || {? FUN.ask('Zamówienie %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[ZD_NAG.SYM])
          & ZD_NAG.r_lock(1,,1)
         || ZD_NAG.r_unlock()
         ?}
      ?}
   ?};
   ZD_NAG.cntx_pop()
|? (5+_a)='zdptn'
|| ZDP_NAG.cntx_psh();
   ZDP_NAG.use(8+_a);
   ZDP_NAG.prefix();
   {? ZDP_NAG.seek(_a,8+_a)
   || {? ZDP_NAG.r_lock(1,1,1)
      || _wyn:=1
      || {? FUN.ask('Potwierdzenie dostawy %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[ZDP_NAG.SYM])
          & ZDP_NAG.r_lock(1,,1)
         || ZDP_NAG.r_unlock()
         ?}
      ?}
   ?};
   ZDP_NAG.cntx_pop()
|? (5+_a)='nagdo'
|| ND.cntx_psh();
   ND.use(8+_a);
   ND.prefix();
   {? ND.seek(_a,8+_a)
   || {? ND.r_lock(1,1,1)
      || _wyn:=1
      || {? FUN.ask('Dokument %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[ND.SYM])
          & ND.r_lock(1,,1)
         || ND.r_unlock()
         ?}
      ?}
   ?};
   ND.cntx_pop()
|? (4+_a)='rekn'
|| REK_N.cntx_psh();
   REK_N.use(form(8+_a));
   REK_N.prefix();
   {? REK_N.seek(_a,form(8+_a))
   || {? REK_N.r_lock(1,1,1)
      || _wyn:=1
      || {? FUN.ask('Reklamację %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[REK_N.SYM])
          & REK_N.r_lock(1,,1)
         || REK_N.r_unlock()
         ?}
      ?}
   ?};
   REK_N.cntx_pop()
|? (4+_a)='zgui'
|| ZGP.cntx_psh();
   ZGP.prefix();
   {? ZGP.seek(_a,)
   || {? ZGP.r_lock(1,1,1)
      || _wyn:=1
      || {? FUN.ask('Pozycję przewodnika %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[ZGP.NRPRZ().NRPRZ])
          & ZGP.r_lock(1,,1)
         || ZGP.r_unlock()
         ?}
      ?}
   ?};
   ZGP.cntx_pop()
?};
_wyn


\zam_unlock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: r_unlock tab. zamówień
::   WE: _a- 0-zamówienia sprzedaży/wewnętrzne 1-zamówienia dostaw 2-dokumenty magazynowe 3-potwierdzenia zam.dostaw
::           4-reklamacje, 5-pozycja przewodnika
::----------------------------------------------------------------------------------------------------------------------
_typzam:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? _typzam=0
|| ZK_N.cntx_psh();
   __zam_list.clear();
   {? __zam_list.first()
   || {!
      |? {? __zam_list.ZAMN_REF<>''
         || ZK_N.use(8+__zam_list.ZAMN_REF);
            ZK_N.prefix();
            {? ZK_N.seek(__zam_list.ZAMN_REF,8+__zam_list.ZAMN_REF) || ZK_N.r_unlock() ?}
         ?};
         __zam_list.next()
      !}
   ?};
   ZK_N.cntx_pop()
|? _typzam=1
|| ZD_NAG.cntx_psh();
   __zam_list.clear();
   {? __zam_list.first()
   || {!
      |? {? __zam_list.ZAMN_REF<>''
         || ZD_NAG.use(8+__zam_list.ZAMN_REF);
            ZD_NAG.prefix();
            {? ZD_NAG.seek(__zam_list.ZAMN_REF,8+__zam_list.ZAMN_REF) || ZD_NAG.r_unlock() ?}
         ?};
         __zam_list.next()
      !}
   ?};
   ZD_NAG.cntx_pop()
|? _typzam=2
|| ND.cntx_psh();
   __zam_list.clear();
   {? __zam_list.first()
   || {!
      |? {? __zam_list.ZAMN_REF<>''
         || ND.use(8+__zam_list.ZAMN_REF);
            ND.prefix();
            {? ND.seek(__zam_list.ZAMN_REF,8+__zam_list.ZAMN_REF) || ND.r_unlock() ?}
         ?};
         __zam_list.next()
      !}
   ?};
   ND.cntx_pop()
|? _typzam=3
|| ZDP_NAG.cntx_psh();
   __zam_list.clear();
   {? __zam_list.first()
   || {!
      |? {? __zam_list.ZAMN_REF<>''
         || ZDP_NAG.use(8+__zam_list.ZAMN_REF);
            ZDP_NAG.prefix();
            {? ZDP_NAG.seek(__zam_list.ZAMN_REF,8+__zam_list.ZAMN_REF) || ZDP_NAG.r_unlock() ?}
         ?};
         __zam_list.next()
      !}
   ?};
   ZDP_NAG.cntx_pop()
|? _typzam=4
|| REK_N.cntx_psh();
   __zam_list.clear();
   {? __zam_list.first()
   || {!
      |? {? __zam_list.ZAMN_REF<>''
         || REK_N.use(form(8+__zam_list.ZAMN_REF));
            REK_N.prefix();
            {? REK_N.seek(__zam_list.ZAMN_REF,form(8+__zam_list.ZAMN_REF)) || REK_N.r_unlock() ?}
         ?};
         __zam_list.next()
      !}
   ?};
   REK_N.cntx_pop()
|? _typzam=5
|| ZGP.cntx_psh();
   __zam_list.clear();
   {? __zam_list.first()
   || {!
      |? {? __zam_list.ZAMN_REF<>''
         || ZGP.prefix();
            {? ZGP.seek(__zam_list.ZAMN_REF,form(8+__zam_list.ZAMN_REF)) || ZGP.r_unlock() ?}
         ?};
         __zam_list.next()
      !}
   ?};
   ZGP.cntx_pop()
?};
''


\dsp_mark
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: zaznaczanie rekordu __dsp_tab - dyspozycja transportu
::   WE: _a - 1-wypelnij 0-zeruj
::----------------------------------------------------------------------------------------------------------------------
_mark:="
   _ok:=1;
   {? _a=0
   || __dsp_tab.IL_DO:=0
   ||
      _ok:=exec('zam_lock','transport_zlec',__dsp_tab.ZAMN_REF);
      {? _ok=1
      || __dsp_tab.IL_DO:=__dsp_tab.ILP
      || __dsp_tab.IL_DO:=0
      ?}
   ?};
   {? __dsp_tab.put(1)
   || exec('aktWybPoz','transport_zlec',__dsp_tab.ZAMP_REF
       ,{? __dsp_tab.IL_DO=__dsp_tab.ILP || 3
        |? __dsp_tab.IL_DO=0             || 1
        || 2
        ?})
   ?};
   _ok
";
_mark(_a);
''


\dsp_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: przed rekord pozycji przeterminowanej
::  OLD: \ptw_rek/zd.fml
::----------------------------------------------------------------------------------------------------------------------
__dsp_tab.actions(__dsp_sel,'',,1);
~~


\del_dsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: pozycje z zamówień do dyspozycji
::   WE: [_a] - 1-domyślnie DRAG&DROP, 0-nie, 2-Usuń z listy wg zamówienia
::----------------------------------------------------------------------------------------------------------------------
_dandd:={? var_pres('_a')=type_of(0) || _a || 1 ?};
{? _dandd=2
||
:: usunięcie z poziomu listy
   _tab:=tab_tmp(1,'REF','INTEGER','');
   __zam_list.cntx_psh();
   __dsp_tab.cntx_psh();
   _ndx:=__dsp_tab.ndx_tmp('',0,'ZAMN_REF',,);
   _zam:=__zam_list.sel_aget();
   __zam_list.sel_adel();
   {? _zam.first()
   || {!
      |? {? (__zam_list.clear(); __zam_list.seek(_zam.REF,)) & __zam_list.WYB
         || __dsp_tab.index(_ndx);
            __dsp_tab.prefix(__zam_list.ZAMN_REF,);
            {? __dsp_tab.first()
            || {!
               |? _tab.blank();
                  _tab.REF:=#__dsp_tab.ref();
                  _tab.add(1);
                  __dsp_tab.next()
               !}
            ?}
         ?};
         _zam.next()
      !}
   |? __zam_list.WYB
   || __dsp_tab.index(_ndx);
      __dsp_tab.prefix(__zam_list.ZAMN_REF,);
      {? __dsp_tab.first()
      || {!
         |? _tab.blank();
            _tab.REF:=#__dsp_tab.ref();
            _tab.add(1);
            __dsp_tab.next()
         !}
      ?}
   ?};
   __dsp_tab.ndx_drop(_ndx);
   __zam_list.cntx_pop();
   __dsp_tab.cntx_pop();
   obj_del(_zam)
|| _ssize:=__dsp_tab.sel_size();

   _tab:={? _dandd || dnd_info('dropped_records')
         |? _ssize || __dsp_tab.sel_aget()
         || tab_tmp(1,'REF','INTEGER','')
         ?};
   {? ~_dandd
   || {? _ssize
      || __dsp_tab.sel_adel()
      || _tab.blank();
         _tab.REF:=#__dsp_tab.ref();
         _tab.add(1)
      ?}
   ?}
?};
{? _dandd=2 & ~_tab.first()
|| FUN.info('Nie usunięto pozycji do dyspozycji wg wskazanych zamówień.'@)
|? _tab.size() & _tab.first()
 & {? _dandd=2
   || FUN.ask('Czy usunąć wybrane pozycje do dyspozycji wg wskazanych zamówień?'@)
   || FUN.ask('Czy usunąć wybrane pozycje do dyspozycji?'@)
   ?}
|| __zam_list.cntx_psh();
   __dsp_tab.cntx_psh();
   {!
   |? _ok:=-1;
      {? (__dsp_tab.clear; __dsp_tab.seek(_tab.REF,))
      || __dsp_tab.WYB:='N';
         __dsp_tab.IL_DO:=0;
         {? __dsp_tab.put(1) || exec('aktWybPoz','transport_zlec',__dsp_tab.ZAMP_REF,0) ?}
      ?};
      _tab.next()
   !};
   __zam_list.cntx_pop();
   __dsp_tab.cntx_pop()
?};
obj_del(_tab);
{? ~__dspadd || grp_disp(__dsp_tab,__dsp_sel) ?};
1


\ileWybPoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: zwraca typ przepisania pozycji
::   WE: _a - ZAMP_REF
::   WY: 0-żadna 1-niektóre 2-wszystkie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
__dsp_tab.cntx_psh();
_ndx:=__dsp_tab.ndx_tmp('',0,'WYB',,,'ZAMP_REF',,,'ZAMP_REF',,);
__dsp_tab.index(_ndx);
__dsp_tab.prefix('T',_a,);
_res:={? __dsp_tab.first()
      || {? __dsp_tab.ILP=__dsp_tab.IL_DO || 3
         |? __dsp_tab.IL_DO=0             || 1
         || 2
         ?}
      || 0
      ?};
__dsp_tab.ndx_drop(_ndx);
__dsp_tab.cntx_pop();
_res


\dsp_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: akceptacja wyboru pozycji do dyspozycji
::----------------------------------------------------------------------------------------------------------------------
_seldsp:=0;
__dsp_tab.cntx_psh();
__dsp_tab.clear();
__dsp_tab.prefix('T');
{? __dsp_tab.first()
|| {!
   |? _seldsp:=__dsp_tab.IL_DO>0;
      ~_seldsp & __dsp_tab.next()
   !}
?};
__dsp_tab.cntx_pop();

{? _seldsp
 | (~_seldsp
    & FUN.ask('Ponieważ nie wskazano żadnej pozycji do dyspozycji (ilość do dyspozycji)\n'
              'żadna pozycja nie zostanie przeniesiona na dyspozycję transportową %1.\n\n'
              'Czy rezygnacja z dołączenia pozycji do dyspozycji?'@[TR_NZL.SYM])
    )
|| sel_exit()
|| ''
?}


\dsp_aepp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: po popraw pozycje do dyspozycji
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
M.index('MATKTM');
M.prefix(__dsp_tab.INDEKS,__dsp_tab.INDEKS);
{? M.first()
|| _dokl:=exec('jaka_dok_m','jm',M.ref())
|| _dokl:=0
?};
__dsp_tab.IL_DO:=__dsp_tab.IL_DO$_dokl;
{? __dsp_tab.IL_DO<0
|| FUN.info('Należy podać ilość większą od zera.'@)
|? __dsp_tab.IL_DO>__dsp_tab.ILP
|| FUN.info('Należy podać ilość mniejszą lub równą %1.'@[form(__dsp_tab.ILP,,_dokl)])
|| _res:=1
?};
{? _res=0 || __dsp_tab.IL_DO:=__dsp_tab.ILP ?};
{? __dsp_tab.IL_DO>0
|| {? exec('zam_lock','transport_zlec',__dsp_tab.ZAMN_REF)
   || ''
   || __dsp_tab.IL_DO:=0
   ?}
|| ''
?};
{? _res & __dsp_tab.put(1)
|| exec('aktWybPoz','transport_zlec',__dsp_tab.ZAMP_REF
    ,{? __dsp_tab.IL_DO=__dsp_tab.ILP || 3
     |? __dsp_tab.IL_DO=0             || 1
     || 2
     ?})
?};
_res


\dispPOZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: wyświetlenie pozycje zamówienia
::   WE: _a - ref SQL pozycji
::----------------------------------------------------------------------------------------------------------------------
_refsql:={? var_pres('_a')=type_of('') || _a || __dsp_tab.ZAMP_REF ?};
{? (5+_refsql)='zkpoz'
|| ZK_N.cntx_psh();
   ZK_P.cntx_psh();
   ZK_P.prefix();
   {? ZK_P.seek(_refsql)
   || ZK_P.win_edit('RED'+ZK_P.RODZ);
      _edit:=ZK_P.win_edit('?');
      _sel:=ZK_P.win_sel('?');
      _atrmjs:=ATR.MJS;
      ATR.MJS:='ZK_P';
      ATR.M_ATR:=ZK_P.M().M_ATR;
      {? exec('czytadkc','mat_atr',ZK_P.DK_C,ZK_P.RDKC)
      || _ndit:='DISP';
         ZK_P.win_edit(_ndit)
      ?};
      exec('set_efld_opt','zamsiw_poz');
      exec('set_efld_opt','mat_atr',ATR.MJS);

      exec('dispWithFakso','fakso','ZK_P');
      ZK_P.win_edit(_edit);
      ZK_P.win_sel(_sel)
   ?};
   ATR.MJS:=_atrmjs;
   ZK_N.cntx_pop();
   ZK_P.cntx_pop()
|? (5+_refsql)='zdpoz'
|| ZDP_NAG.cntx_psh();
   ZDP_POZ.cntx_psh();
   ZD_NAG.cntx_psh();
   ZD_POZ.cntx_psh();
   ZD_POZ.prefix();
   {? ZD_POZ.seek(_refsql)
   || ZD_POZ.win_edit('RED');
      _edit:=ZD_POZ.win_edit('?');
      _sel:=ZD_POZ.win_sel('?');
      _atrmjs:=ATR.MJS;
      {? (1+ZD_POZ.MG().TYP)='D'
      || ATR.MJS:='ZD_POZ';
         ATR.M_ATR:=ZD_POZ.M().M_ATR
      || ATR.MJS:='M_ATR';
         M_ATR.blank(0);
         ATR.M_ATR:=null()
      ?};
      {? exec('czytadkc','mat_atr',ZD_POZ.DK_C,ZD_POZ.RDKC)
      || _ndit:='DISP';
         ZD_POZ.win_edit(_ndit)
      ?};
      exec('set_efld_opt','zamdst_poz');
      exec('set_efld_opt','mat_atr',ATR.MJS);

      exec('dispWithFakso','fakso','ZD_POZ');
      ZD_POZ.win_edit(_edit);
      ZD_POZ.win_sel(_sel)
   ?};
   ATR.MJS:=_atrmjs;
   ZDP_NAG.cntx_pop();
   ZDP_POZ.cntx_pop();
   ZD_NAG.cntx_pop();
   ZD_POZ.cntx_pop()
|? (5+_refsql)='zdptp'
|| ZDP_NAG.cntx_psh();
   ZDP_POZ.cntx_psh();
   ZD_NAG.cntx_psh();
   ZD_POZ.cntx_psh();
   ZD_POZ.prefix();
   ZDP_POZ.prefix();
   {? ZDP_POZ.seek(_refsql) & ZD_POZ.seek(ZDP_POZ.DZ_POZ)
   || ZD_POZ.win_edit('RED');
      _edit:=ZD_POZ.win_edit('?');
      _sel:=ZD_POZ.win_sel('?');
      _atrmjs:=ATR.MJS;
      {? (1+ZD_POZ.MG().TYP)='D'
      || ATR.MJS:='ZD_POZ';
         ATR.M_ATR:=ZD_POZ.M().M_ATR
      || ATR.MJS:='M_ATR';
         M_ATR.blank(0);
         ATR.M_ATR:=null()
      ?};
      {? exec('czytadkc','mat_atr',ZD_POZ.DK_C,ZD_POZ.RDKC)
      || _ndit:='DISP';
         ZD_POZ.win_edit(_ndit)
      ?};
      exec('set_efld_opt','zamdst_poz');
      exec('set_efld_opt','mat_atr',ATR.MJS);

      exec('dispWithFakso','fakso','ZD_POZ');
      ZD_POZ.win_edit(_edit);
      ZD_POZ.win_sel(_sel)
   ?};
   ATR.MJS:=_atrmjs;
   ZDP_NAG.cntx_pop();
   ZDP_POZ.cntx_pop();
   ZD_NAG.cntx_pop();
   ZD_POZ.cntx_pop()
|? (5+_refsql)='dokma'
|| ND.cntx_psh();
   DK.cntx_psh();
   DK.prefix();
   {? DK.seek(_refsql)
   || DK.N().SYM;
      DK.win_edit(exec('dk_win_edit','magdok_poz'));
      _edit:=DK.win_edit('?');
      _sel:=DK.win_sel('?');
      _atrmjs:=ATR.MJS;
      {? (1+DK.N().MAG().TYP)='D'
      || ATR.MJS:='DK';
         ATR.M_ATR:=DK.M().M_ATR
      || ATR.MJS:='M_ATR';
         M_ATR.blank(0);
         ATR.M_ATR:=null()
      ?};
      {? exec('czytadkc','mat_atr',DK.DK_C,DK.RDKC)
      || _ndit:='PDISPN';
         DK.win_edit(_ndit)
      ?};
      exec('set_efld_opt','magdok_poz');
      exec('set_efld_opt','mat_atr',ATR.MJS);

      exec('dispWithFakso','fakso','DK');
      DK.win_edit(_edit);
      DK.win_sel(_sel)
   ?};
   ATR.MJS:=_atrmjs;
   ND.cntx_pop();
   DK.cntx_pop()
?};
~~


\ptwn_sym_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Formuła określiająca ikony
::----------------------------------------------------------------------------------------------------------------------
{? __dsp_tab.IL_DO>0 || exec('zaakceptowany','icon')
|| exec('pusta','#icon')
?}


\add_zamp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: dodaje pozycje z zamówień do dyspozycji
::   WE: [_a] - 1-domyślnie DRAG&DROP, 2-Dołącz z listy wg zamówienia
::----------------------------------------------------------------------------------------------------------------------
_dandd:={? var_pres('_a')=type_of(0) || _a || 1 ?};

_txt:={? (5+__zam_list.ZAMN_REF)='nagdo'
      || '&Wszystkie pozycje z dokumentu'@
      |? (4+__zam_list.ZAMN_REF)='rekn'
      || 'reklamacja'@
      |? (4+__zam_list.ZAMN_REF)='zgui'
      || 'przewodnik'@
      || '&Wszystkie pozycje z zamówienia'@
      ?};
_opc:={? _txt='reklamacja' | _txt='przewodnik'
      || FUN.ask('Czy dodać do dyspozycji?'@)
      || FUN.choice('Czy dodać do dyspozycji?'@,,'&Pozycje'@,_txt)
      ?};

{? _opc
|| {? _dandd=2
   ||
:: dodanie z poziomu listy
      _tab:=tab_tmp(1,'REF','INTEGER','');
      __zam_list.cntx_psh();
      _zam:=__zam_list.sel_aget();
      __zam_list.sel_adel();
      {? _zam.first()
      || {!
         |? {? (__zam_list.clear(); __zam_list.seek(_zam.REF,)) & {? _opc=1 || __zam_list.WYB<3 || 1 ?}
            || _tab.blank();
               _tab.REF:=#__zam_list.ref();
               _tab.add(1)
            ?};
            _zam.next()
         !}
      |? {? _opc=1 || __zam_list.WYB<3 || 1 ?}
      || _tab.blank();
         _tab.REF:=#__zam_list.ref();
         _tab.add(1)
      ?};
      __zam_list.cntx_pop();
      obj_del(_zam)
   || _tab:=dnd_info('dropped_records')
   ?};

   {? _dandd=2 & ~_tab.first()
   || FUN.info('Nie dodano wybranych pozycji do dyspozycji.'@)
   |? _tab.size() & _tab.first()
   || __zam_list.cntx_psh();
      __dsp_tab.cntx_psh();
      _ndx:=__dsp_tab.ndx_tmp('',0,'ZAMN_REF',,,'ZAMP_REF',,);
      {!
      |? _ok:=-1;
         {? (__zam_list.clear; __zam_list.seek(_tab.REF,))
          & {? _opc=1 || __zam_list.WYB<3 || 1 ?}
          & exec('zam_lock','transport_zlec',__zam_list.ZAMN_REF)
         || _wyb:=0;
            __dsp_tab.index(_ndx);
            {? _opc=2
            || __dsp_tab.prefix(__zam_list.ZAMN_REF)
            || __dsp_tab.prefix(__zam_list.ZAMN_REF,__zam_list.ZAMP_REF)
            ?};
            {? __dsp_tab.first()
            || {!
               |? __dsp_tab.WYB:='T';
                  {? __dsp_tab.put(1)
                  || exec('aktWybPoz','transport_zlec',__dsp_tab.ZAMP_REF
                      ,{? __dsp_tab.IL_DO=__dsp_tab.ILP || 3
                       |? __dsp_tab.IL_DO=0             || 1
                       || 2
                       ?})
                  ?};
                  __dsp_tab.next()
               !}
            ?}
         ?};
         _tab.next()
      !};
      __dsp_tab.ndx_drop(_ndx);
      __zam_list.cntx_pop();
      __dsp_tab.cntx_pop()
   ?};
   obj_del(_tab)
?};
{? ~__dspadd || grp_disp(__dsp_tab,__dsp_sel) ?};
1


\del_zamp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: usuwa pozycje z zamówień do dyspozycji
::   WE: [_a] - 1-domyślnie DRAG&DROP, 0-nie, 2-Usuń z listy wg zamówienia
::----------------------------------------------------------------------------------------------------------------------
_dandd:={? var_pres('_a')=type_of(0) || _a || 1 ?};
{? _dandd=2
||
:: usunięcie z poziomu listy
   _tab:=tab_tmp(1,'REF','INTEGER','');
   __zam_list.cntx_psh();
   __dsp_tab.cntx_psh();
   _ndx:=__dsp_tab.ndx_tmp('',0,'ZAMN_REF',,);
   _zam:=__zam_list.sel_aget();
   __zam_list.sel_adel();
   {? _zam.first()
   || {!
      |? {? (__zam_list.clear(); __zam_list.seek(_zam.REF,)) & __zam_list.WYB
         || __dsp_tab.index(_ndx);
            __dsp_tab.prefix(__zam_list.ZAMN_REF,);
            {? __dsp_tab.first()
            || {!
               |? _tab.blank();
                  _tab.REF:=#__dsp_tab.ref();
                  _tab.add(1);
                  __dsp_tab.next()
               !}
            ?}
         ?};
         _zam.next()
      !}
   |? __zam_list.WYB
   || __dsp_tab.index(_ndx);
      __dsp_tab.prefix(__zam_list.ZAMN_REF,);
      {? __dsp_tab.first()
      || {!
         |? _tab.blank();
            _tab.REF:=#__dsp_tab.ref();
            _tab.add(1);
            __dsp_tab.next()
         !}
      ?}
   ?};
   __dsp_tab.ndx_drop(_ndx);
   __zam_list.cntx_pop();
   __dsp_tab.cntx_pop();
   obj_del(_zam)
|| _ssize:=__dsp_tab.sel_size();

   _tab:={? _dandd || dnd_info('dropped_records')
         |? _ssize || __dsp_tab.sel_aget()
         || tab_tmp(1,'REF','INTEGER','')
         ?};
   {? ~_dandd
   || {? _ssize
      || __dsp_tab.sel_adel()
      || _tab.blank();
         _tab.REF:=#__dsp_tab.ref();
         _tab.add(1)
      ?}
   ?}
?};
_buf:=tab_tmp(1,'ZAMN_REF','STRING[16]','');
{? _dandd=2 & ~_tab.first()
|| FUN.info('Nie usunięto pozycji do dyspozycji wg wskazanych pozycji.'@)
|? _tab.size() & _tab.first()
 & {? _dandd=2
   || FUN.ask('Czy usunąć wybrane pozycje do dyspozycji wg wskazanych pozycji?'@)
   || FUN.ask('Czy usunąć wybrane pozycje do dyspozycji?'@)
   ?}
|| __zam_list.cntx_psh();
   __dsp_tab.cntx_psh();
   {!
   |? _ok:=-1;
      {? (__dsp_tab.clear; __dsp_tab.seek(_tab.REF,))
      || __dsp_tab.WYB:='N';
         __dsp_tab.IL_DO:=0;
         __dsp_tab.put(1);
         {? (_buf.clear(); _buf.prefix(__dsp_tab.ZAMN_REF,); ~_buf.first())
         || _buf.blank();
            _buf.ZAMN_REF:=__dsp_tab.ZAMN_REF;
            _buf.add(1)
         ?}
      ?};
      _tab.next()
   !};
   _buf.clear();
   {? _buf.first()
   || __zam_list.clear();
      {? __zam_list.first()
      || {!
         |? {? (_buf.clear(); _buf.prefix(__zam_list.ZAMN_REF,); _buf.first())
            || __zam_list.WYB:=exec('ileWybPoz','transport_zlec',__zam_list.ZAMN_REF);
               __zam_list.put(1)
            ?};
            __zam_list.next()
         !}
      ?}
   ?};
   __zam_list.cntx_pop();
   __dsp_tab.cntx_pop()
?};
obj_del(_tab);
obj_del(_buf);
{? ~__dspadd || grp_disp(__dsp_tab,__dsp_sel) ?};
1


\odsw_inf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: wyswietla informacje o dyspozycjach transportu zamówień
::  OLD: \odsw_inf/rezerw.fml
::----------------------------------------------------------------------------------------------------------------------
__zam_list.first();
grp_disp(__zam_list,__zam_sel);
exec('posZAM','transport_zlec');
1


\posZAM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: wyświetlenie pozycji do dyspozycji danego zamówienia
::----------------------------------------------------------------------------------------------------------------------
~~


\posPRF
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: wyświetlenie pozycji do dyspozycji danego zamówienia
::----------------------------------------------------------------------------------------------------------------------
__dsp_tab.index(__dsp_ndx);
__dsp_tab.prefix(__zam_list.ZAMN_REF);
__dsp_tab.first();
~~


\zamn_sym_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Formuła określiająca ikony
::----------------------------------------------------------------------------------------------------------------------
{? __zam_list.WYB=3 || exec('selYES','icon')
|? __zam_list.WYB=2 || exec('selPART','icon')
|? __zam_list.WYB=1 || exec('selNO','icon')
|| exec('pusta','#icon')
?}


\dispZAM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: wyświetlenie nagłówek zamówienia
::----------------------------------------------------------------------------------------------------------------------
{? (5+__zam_list.ZAMN_REF)='zknag'
|| ZK_N.cntx_psh();
   ZK_P.cntx_psh();
   ZK_N.prefix();
   {? ZK_N.seek(__zam_list.ZAMN_REF)
   || _refn:=ZK_N.ref();
      _winpoz:={? ZK_N.T().R='Z' || 'ZAMZ_DOK' || 'ZAMW_DOK' ?};
      ZK_P.N().SYM;
      _edit:=ZK_N.win_edit('?');
      _sele:=ZK_P.win_sel('?');
      _red:=ZK_N.mk_edit('',,'zamdst_xxx');
      ZK_N.win_ewin(_red,,{? ZK_N.T().R='Z' || 'RED' || 'REDW' ?});
      ZK_N.win_edit(_red);
      ZK_P.win_sel(_winpoz);
      ZK_P.index('NAG');
      ZK_P.prefix(_refn);
      ZK_P.first();
      exec('dselWithNag','okienka','ZK_P',_winpoz,'ZK_N',_red);
      ZK_N.win_edit(_edit);
      ZK_P.win_sel(_sele)
   ?};
   ZK_N.cntx_pop();
   ZK_P.cntx_pop()
|? (5+__zam_list.ZAMN_REF)='zdnag'
|| ZDP_NAG.cntx_psh();
   ZDP_POZ.cntx_psh();
   ZD_NAG.cntx_psh();
   ZD_POZ.cntx_psh();
   ZD_NAG.prefix();
   {? ZD_NAG.seek(__zam_list.ZAMN_REF)
   || _refn:=ZD_NAG.ref();
      ZD_POZ.ZD_NAG().SYM;
      _edit:=ZD_NAG.win_edit('?');
      _sele:=ZD_POZ.win_sel('?');
      _red:=ZD_NAG.mk_edit('',,'zamdst_xxx');
      ZD_NAG.win_ewin(_red,,'RED');
      ZD_NAG.win_edit(_red);
      ZD_POZ.win_sel('WER_DOK');
      ZD_POZ.index('POZ');
      ZD_POZ.prefix(_refn);
      ZD_POZ.first();
      exec('dselWithNag','okienka','ZD_POZ','WER_DOK','ZD_NAG',_red);
      ZD_NAG.win_edit(_edit);
      ZD_POZ.win_sel(_sele)
   ?};
   ZDP_NAG.cntx_pop();
   ZDP_POZ.cntx_pop();
   ZD_NAG.cntx_pop();
   ZD_POZ.cntx_pop()
|? (5+__zam_list.ZAMN_REF)='zdptn'
|| ZDP_NAG.cntx_psh();
   ZDP_POZ.cntx_psh();
   ZD_NAG.cntx_psh();
   ZD_POZ.cntx_psh();
   ZDP_NAG.prefix();
   {? ZDP_NAG.seek(__zam_list.ZAMN_REF)
   || _refn:=ZDP_NAG.ref();
      ZDP_POZ.ZDP_NAG().SYM;
      _edit:=ZDP_NAG.win_edit('?');
      _sele:=ZDP_POZ.win_sel('?');
      _red:=ZDP_NAG.mk_edit('',,'zamdst_xxx');
      ZDP_NAG.win_ewin(_red,,'RED');
      ZDP_NAG.win_edit(_red);
      ZDP_POZ.win_sel('WER_DOK');
      ZDP_POZ.index('ZDP_POZ');
      ZDP_POZ.prefix(_refn);
      ZDP_POZ.first();
      exec('dselWithNag','okienka','ZDP_POZ','WER_DOK','ZDP_NAG',_red);
      ZDP_NAG.win_edit(_edit);
      ZDP_POZ.win_sel(_sele)
   ?};
   ZDP_NAG.cntx_pop();
   ZDP_POZ.cntx_pop();
   ZD_NAG.cntx_pop();
   ZD_POZ.cntx_pop()
|? (5+__zam_list.ZAMN_REF)='nagdo'
|| ND.cntx_psh();
   DK.cntx_psh();
   ND.prefix();
   {? ND.seek(__zam_list.ZAMN_REF)
   || _refn:=ND.ref();
      _red:=exec('nd_win_edit_set','magdok_nag',1);

      DK.index('DOKMAG');
      DK.prefix(_refn);
      DK.first();
      DISP.FAKS:=exec('zwr_symbol_fak','magdok_wspolne');
      exec('dselWithNag','okienka','DK','WER_DOK','ND',_red)
   ?};
   ND.cntx_pop();
   DK.cntx_pop()
|? (4+__zam_list.ZAMN_REF)='rekn'
|| REK_N.cntx_psh();
   REK_N.prefix();
   {? REK_N.seek(__zam_list.ZAMN_REF) || REK_N.display() ?};
   REK_N.cntx_pop()
|? (4+__zam_list.ZAMN_REF)='zgui'
|| ZGP.cntx_psh();
   ZGP.prefix();
   {? ZGP.seek(__zam_list.ZAMN_REF) || ZGP.display() ?};
   ZGP.cntx_pop()
?};
~~


\aktWybPoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: aktualizuje wybór pozycji
::   WE: _a - ZAMP_REF
::       _b - status wybrania
::----------------------------------------------------------------------------------------------------------------------
__zam_list.cntx_psh();
_ndx:=__zam_list.ndx_tmp('',0,'ZAMP_REF',,,'ZAMP_REF',,);
_res:=0;
__zam_list.cntx_pop();
__zam_list.index(_ndx);
__zam_list.prefix(_a,);
{? __zam_list.first()
|| __zam_list.WYB:=_b;
   __zam_list.put(1)
?};
__zam_list.ndx_drop(_ndx);
~~


\aktILRtr_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: aktualizuje ilości rezerwowane dla danego TR_ZL
::   WE: _a - TR_ZL.uidref()
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__ilrD');
__ilrD:=obj_new(3); {! _i..3 |! __ilrD[_i]:=0 !};
REZ.cntx_psh();
REZ.index('TR_ZL');
REZ.prefix(_a);
{? REZ.first()
|| {!
   |? {? REZ.RODZ='B'
      || __ilrD[1]+=REZ.ILR;
         {? REZ.SC<>'' || __ilrD[3]+=REZ.ILR ?}
      |? REZ.RODZ='W'
      || __ilrD[2]+=REZ.ILR
      ?};
      REZ.next()
   !}
?};
REZ.cntx_pop();
exec('FindAndGet','#table',TR_ZL,_a,,"ILRB:=__ilrD[1]; ILRW:=__ilrD[2]; ILRD:=__ilrD[3]; put(1)",0);
VAR_DEL.delete('__ilrD');
~~


\disp_2adr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: wyświetlenie nagłowka transportu z dwoma adresami
::   WE: [_a] 0(domyślnie)-display 1-podczytanie danych
::       [_b] 0(domyślnie)-display 1-edycja lokalizacji
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_eanl_edit:={? var_pres('_b')=type_of(0) || _b || 0 ?};

_edit:=TR_NZL.win_edit('?');
_dok_ref:=TR_NZL.DOK_REF;
_rodz:=TR_NZL.RODZ;
{? _rodz='Z'
|| TR_Z.MJS_Z:=TR_NZL.WHERE_OP;
   TR_Z.KOD_Z:=TR_NZL.DOK;
   TR_Z.SYM_Z:=TR_NZL.SYM;
   TR_Z.KRAJ:=TR_NZL.KRAJ;
   TR_Z.MIASTO:=TR_NZL.MIASTO;
   TR_Z.UL:=TR_NZL.UL;
   TR_Z.NUMER:=TR_NZL.NUMER;
   TR_Z.LOKAL:=TR_NZL.LOKAL;
   TR_Z.KPOCZ:=TR_NZL.KPOCZ;
   TR_Z.POCZ:=TR_NZL.POCZ;
   TR_Z.DZIELN:=TR_NZL.DZIELN
|| TR_Z.MJS_R:=TR_NZL.WHERE_OP;
   TR_Z.KOD_R:=TR_NZL.DOK;
   TR_Z.SYM_R:=TR_NZL.SYM;
   TR_Z.KRAJ_:=TR_NZL.KRAJ;
   TR_Z.MIASTO_:=TR_NZL.MIASTO;
   TR_Z.UL_:=TR_NZL.UL;
   TR_Z.NUMER_:=TR_NZL.NUMER;
   TR_Z.LOKAL_:=TR_NZL.LOKAL;
   TR_Z.KPOCZ_:=TR_NZL.KPOCZ;
   TR_Z.POCZ_:=TR_NZL.POCZ;
   TR_Z.DZIELN_:=TR_NZL.DZIELN
?};
TR_NZL.cntx_psh();
TR_NZL.prefix();
{? TR_NZL.seek(_dok_ref)
|| {? _rodz='Z'
   || TR_Z.MJS_R:=TR_NZL.WHERE_OP;
      TR_Z.KOD_R:=TR_NZL.DOK;
      TR_Z.SYM_R:=TR_NZL.SYM;
      TR_Z.KRAJ_:=TR_NZL.KRAJ;
      TR_Z.MIASTO_:=TR_NZL.MIASTO;
      TR_Z.UL_:=TR_NZL.UL;
      TR_Z.NUMER_:=TR_NZL.NUMER;
      TR_Z.LOKAL_:=TR_NZL.LOKAL;
      TR_Z.KPOCZ_:=TR_NZL.KPOCZ;
      TR_Z.POCZ_:=TR_NZL.POCZ;
      TR_Z.DZIELN_:=TR_NZL.DZIELN
   || TR_Z.MJS_Z:=TR_NZL.WHERE_OP;
      TR_Z.KOD_Z:=TR_NZL.DOK;
      TR_Z.SYM_Z:=TR_NZL.SYM;
      TR_Z.KRAJ:=TR_NZL.KRAJ;
      TR_Z.MIASTO:=TR_NZL.MIASTO;
      TR_Z.UL:=TR_NZL.UL;
      TR_Z.NUMER:=TR_NZL.NUMER;
      TR_Z.LOKAL:=TR_NZL.LOKAL;
      TR_Z.KPOCZ:=TR_NZL.KPOCZ;
      TR_Z.POCZ:=TR_NZL.POCZ;
      TR_Z.DZIELN:=TR_NZL.DZIELN
   ?}
?};
TR_NZL.cntx_pop();

{? _eanl_edit
|| TR_NZL.win_edit('MAG');
   TR_NZL.efld_opt('MAG','editable=0',,'DR');
   TR_NZL.efld_opt('MAG','editable=0',,'GR');
   TR_NZL.efld_opt('MAG','editable=0',,'UWAGI');
   TR_NZL.efld_opt('MAG','editable=0',,'OPIS');
   TR_NZL.efld_opt('MAG','editable=0',,'TEL');
   TR_NZL.efld_opt('MAG','editable=0',,'EM');
   EANL.cntx_psh();
   _mg:=EANX.MG;
   EANX.MG:=TR_NZL.MG;
   {? TR_NZL.edit() || TR_NZL.put() ?};
   TR_NZL.win_edit(_edit);
   EANL.cntx_pop();
   EANX.MG=_mg
|? ~_tryb
|| TR_NZL.win_edit('MAG');
   TR_NZL.display();
   TR_NZL.win_edit(_edit)
?};
~~


\tr_nzl_zagr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Sprawdzenie, czy dyspozycja transportowa jest zagraniczna
::   WE:
::   WY: 1 - tak, 0 - nie
::----------------------------------------------------------------------------------------------------------------------
_zagr:=0;
{? TR_NZL.KRAJ<>'' & -TR_NZL.KRAJ<>'polska' & -TR_NZL.KRAJ<>'pl'
|| _zagr:=1
?};
_zagr


\tr_nzl_teryt_sprawdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: sprawdzanie zgodności z TERYT adresu do korespondencji kontrahenta
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T' & XINFO.TER_KNT='T' & ~exec('tr_nzl_zagr','transport_zlec')
|| _par:=exec('ter_sprawdz_a','teryt');
   _par.TAB:='TR_NZL';
   _par.ULI_P:='UL';
   _par.MSC_P:='MIASTO';
   _wyn:=exec('ter_sprawdz','teryt',_par);
   _wyn.WYNIK
?}


\aktDYSPzam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: aktualizuje dane dla powiązanej dyspozycji transportowej
::   WE: _a - TR_NZL.DOK_REF
::----------------------------------------------------------------------------------------------------------------------
TR_NZL.cntx_psh();
TR_NZL.prefix();
{? TR_NZL.seek(_a)
|| _ilmg:=0;
   _strea:=0;
   _stzre:=0;
   _stren:=0;
   _stbrk:=0;
   _stanu:=0;
   _rodz:={? TR_NZL.RODZ='Z' || 'R' || 'Z' ?};
   TR_NZL.cntx_psh();
   TR_NZL.index('GRP');
   TR_NZL.prefix(_a);
   {? TR_NZL.first() & TR_NZL.find_tab('first','WHERE',,'=','TR_NZL','RODZ',,'=',_rodz)
   || {!
      |? _ilmg+=1;
         {? TR_NZL.STAT_REJ='A'                        || _stanu+=1
         |? TR_NZL.MGDSP='R'                           || _strea+=1
         |? ((TR_NZL.MGDSP='Z' & (';CD'*TR_NZL.STMG)>1))
           | TR_NZL.STMG='X'                           || _stzre+=1
         |? TR_NZL.MGDSP='S' & (1+TR_NZL.STMG)='B'     || _stren+=1
         |? TR_NZL.MGDSP='X' & (1+TR_NZL.STMG)='B'     || _stbrk+=1
         ?};
         TR_NZL.find_tab('next','WHERE',,'=','TR_NZL','RODZ',,'=',_rodz)
      !}
   ?};
   TR_NZL.cntx_pop();
   _ilmg:=_ilmg-_stanu;
   {? ~_ilmg
   || TR_NZL.GRP:='';
      TR_NZL.MGDSP:='N';
      TR_NZL.put(1)
   |? _ilmg=_stzre
   || TR_NZL.MGDSP:='Z';
      TR_NZL.put(1)
   |? _ilmg=_stbrk
   || TR_NZL.MGDSP:='X';
      TR_NZL.put(1)
   |? _ilmg=(_stzre+_stren+_stbrk)
   || TR_NZL.MGDSP:='S';
      TR_NZL.put(1)
   |? _strea>0
   || TR_NZL.MGDSP:='R';
      TR_NZL.put(1)
   |? _ilmg>0
   || TR_NZL.MGDSP:='T';
      TR_NZL.put(1)
   ?}
?};
TR_NZL.cntx_pop();
~~


\aktDYSPsplit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: aktualizuje dane po podziale dla dyspozycji magazynowej
::   WE: _a - TR_NZL.uidref() - dyspozycja w magazynie
::----------------------------------------------------------------------------------------------------------------------
TR_NZL.cntx_psh();
TR_NZL.prefix();
{? TR_NZL.seek(_a)
|| {? exec('ctrl_poz','transport',TR_NZL.ref())=1
   || {? TR_NZL.DOK_REA<>''
      || exec('stMG','transport_wspolne','D')
      || exec('stMG','transport_wspolne','C')
      ?};
      TR_NZL.MGDSP:='Z';
      TR_NZL.REAL:='M';
      TR_NZL.DR:=date();
      TR_NZL.GR:=time();
      {? TR_NZL.put(1) || exec('aktDYSPzam','transport_zlec',TR_NZL.DOK_REF) ?}
   ?}
?};
TR_NZL.cntx_pop();
~~

\autoWGtrn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: automatycznie tworzy pozycje dyspozycji transportowej
::----------------------------------------------------------------------------------------------------------------------
{? (';ZK_N;ZD_NAG;ND;ZDP_NAG;REK_N;ZGP;'*TR_NZL.WHERE)>1
|| _refnzl:=TR_NZL.ref();
   _Tab:=exec('where2TAB','transport_wspolne',TR_NZL.WHERE,1);
   _Tad:=exec('where2TAB','transport_wspolne',TR_NZL.WHERE);
   _typgen:={? TR_NZL.WHERE='ZD_NAG'  || 'D'
            |? TR_NZL.WHERE='ZDP_NAG' || 'P'
            |? TR_NZL.WHERE='ZK_N'    || exec('FindAndGet','#table',ZK_N,TR_NZL.DOK_REF,,"T().R",'')
            |? TR_NZL.WHERE='ND'      || exec('FindAndGet','#table',ND,TR_NZL.DOK_REF,,
                                          "'M'+{? TYP().Z='T' || 'Z' || 'W' ?}+TYP().P",'')
            |? TR_NZL.WHERE='REK_N'   || 'R'+exec('FindAndGet','#table',REK_N,TR_NZL.DOK_REF,,"SZ",'')
            |? TR_NZL.WHERE='ZGP'     || 'O'
            || ''
            ?};
   _doksql:={? _Tad<>TR_NZL
            || $exec('FindAndGet','#table',_Tad,TR_NZL.DOK_REF,,,null())
            || ''
            ?};
   _zalgen:={? TR_NZL.WHERE='ZGP' || TR_NZL.RODZ || '' ?};
   TR_NZL.get();
   TR_NZL.cntx_psh();
   TR_ZL.cntx_psh();
   {? exec('dysp_gen','transport_zlec',TR_NZL.KH,_doksql,_typgen,1,_zalgen)
   || {? __dsp_tab.first()
      ||
         {!
         |? _uidref:=exec('FindAndGet','#table',_Tab,__dsp_tab.ZAMP_REF,,"uidref()",'');
            _uiddok:=exec('FindAndGet','#table',_Tad,__dsp_tab.ZAMN_REF,,"uidref()",'');
            _symdok:={? TR_NZL.WHERE<>'ZGP'
                     || exec('FindAndGet','#table',_Tad,__dsp_tab.ZAMN_REF,,"SYM",'')
                     || exec('FindAndGet','#table',_Tad,__dsp_tab.ZAMN_REF,,"NRZLP().NRPRZ",'')
                     ?};
            _mod:=0;

            {? __dsp_tab.IL_DO>0 & _uidref<>''
            ||
::                szuka tozsamej pozycji zamowienia i dopisuje ilosc
               TR_ZL.index('POZREF');
               TR_ZL.prefix(_refnzl,_uidref,);
               {? TR_ZL.first()
               || TR_ZL.IL+=__dsp_tab.IL_DO;
                  exec('poz_przelicz','transport_zlec');
                  _oki:=TR_ZL.put(1)
               || TR_ZL.prefix();
                  TR_ZL.blank();
                  TR_ZL.TR_NZL:=_refnzl; TR_ZL.TR_NZL().SYM;
                  TR_ZL.POZ:=exec('BL_TR_ZLPOZ','transport_zlec');
                  TR_ZL.M:=exec('FindAndGet','#table',M,__dsp_tab.M_REF,,"ref()",null());
                  TR_ZL.MG:=exec('FindAndGet','#table',MG,__dsp_tab.MG_REF,,"ref()",null());
                  TR_ZL.IL:=__dsp_tab.IL_DO;
                  TR_ZL.JM:=TR_ZL.M().J;
                  TR_ZL.POZ_REF:=_uidref;
                  TR_ZL.DOK_REF:=_uiddok;
                  TR_ZL.DOK_SYM:=_symdok;
                  TR_ZL.SZER:=TR_ZL.M().SZER*VAR.JMPRZ$3;
                  TR_ZL.DLUG:=TR_ZL.M().DLUG*VAR.JMPRZ$3;
                  TR_ZL.WYSO:=TR_ZL.M().WYS*VAR.JMPRZ$3;
                  exec('poz_przelicz','transport_zlec');
                  _oki:=TR_ZL.add(1)
               ?};
               {? _oki
               || {? TR_NZL.WHERE='REK_N'
                  || {? _mod || exec('delaRekD','reklamacje',TR_ZL.uidref()) ?};
                     exec('autoRekD','reklamacje',exec('FindAndGet','#table',REK_N,TR_ZL.DOK_REF,,,null())
                                                 ,TR_ZL.TR_NZL().uidref()
                                                 ,TR_ZL.uidref()
                                                 ,TR_ZL.IL,'Wystawienie dyspozycji transportu')
                  ?};
                  exec('sum_poz','transport_zlec',_refnzl);
                  exec('ktm2tr_nzl','transport_zlec',_refnzl);
                  _Buf:=exec('where2TAB','transport_wspolne',TR_ZL.TR_NZL().WHERE,1);
                  _zal:={? TR_ZL.TR_NZL().WHERE='ZGP' || TR_NZL.RODZ || '' ?};
                  {? _Buf<>TR_ZL & TR_ZL.POZ_REF<>''
                  || exec('aktIL_TRAN','transport_wspolne',_Buf,TR_ZL.POZ_REF,_zal)
                  ?};
                  obj_del(_Buf)
               ?}
            ?};
            __dsp_tab.next()
         !}
      ?}
   ?};
   TR_NZL.cntx_pop();
   TR_ZL.cntx_pop();
   exec('zakr_set','zamdst_nag')
?};
~~


\tr_nzl_zakoncz_rea_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Zamówienia sprzedaży - Zakończ - okno redagowania
::   WE: params_get()
::   WY: 'key:F2' - jeśli pola nagłówka zamówienia sprzedaży prawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka zamówienia sprzedaży
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_akcja:=params_get().context.akcja;

_btnRuleResult:='';
_fld:='';

{? TR_NZL.DR=date(0,0,0)
|| FUN.info('Należy podać datę realizacji.'@);
   _fld:='DR'
|? TR_NZL.DR<TR_NZL.TR_NAG().WYJ_D
|| FUN.info('Data realizacji nie może być mniejsza od daty transportu: %1.'@[$TR_NZL.TR_NAG().WYJ_D]);
   TR_NZL.DR:=TR_NZL.TR_NAG().WYJ_D;
   _fld:='DR'
?};

{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| _btnRuleResult:='key:F2'
?};

_btnRuleResult


\tr_nzl_ktm_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Formuła ikony dla TR_NZL.KTM
::----------------------------------------------------------------------------------------------------------------------
"  {? exec('FindInSet','#table','TR_KOS','TR_NZL_P',TR_NZL.ref())<>null()
   || 'xwin16.png:123'
   || exec('pusta','#icon')
   ?}
"


\tr_zl_waga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [20.14]
:: OPIS: Transport - obliczanie wagi
::   WE: [_a] - czy waga brutto? (1/0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1)
|| _a:=1
?};

:: informacje o materiale, jednostce oraz ilości
_jm:=TR_ZL.JM().KOD;
_il:=TR_ZL.IL;

:: Pobranie podstawowych jednostek
_jm_t:=null();
JM.cntx_psh();
JM.index('KOD');
JM.prefix('t',);
{? JM.first() || _jm_t:=JM.ref() ?};
JM.cntx_pop();

_il_t:=0;

:: informacje z materiału na podstawie jednostki: waga, objętość i sztuki
:: wartości są obliczane według przeliczników:
:: - materiału,
:: - standardowych jeżeli nie podano dla materiału

:: obliczanie wagi
_czy_waga_brutto:=_a;
_waga_kartotekowa_kg:={? _czy_waga_brutto || TR_ZL.M().WB || TR_ZL.M().WN ?};
_prz:=exec('prz','jm', TR_ZL.M, _jm_t, TR_ZL.JM);
_dokl:=exec('przeldok','jm', TR_ZL.M, _jm_t, TR_ZL.JM);
_dokl:={? _dokl<0 || 3 || _dokl ?};

{? _jm='t'
||
   _il_t:=_il

|? _prz & (_jm='kg' | _jm='g' | _jm='Mg')
||
   _il_t:=(_il / _prz)$_dokl

|? _waga_kartotekowa_kg
||
   _il_t:=_il * _waga_kartotekowa_kg / 1000

|? _prz
||
   _il_t:=(_il / _prz)$_dokl
?};

_il_t


\tr_nzl_upd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Aktualizacja zlecenia transportowego
::   WE: _a - ZLP.uidref()
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_zlp:=_a;
_tr_nzl:=null();
_Tr_nzl:=exec('get_tr_nzl','transport_zlec',_zlp);
_Tr_nzl.prefix();
_loop:=_Tr_nzl.first();
{!
|? _loop
|!
   exec('FindAndGet','#table',TR_NZL,_Tr_nzl.REF,,"
      TR_NZL.DOK:=exec('record','#to_string',TR_NZL.DOK_REF);
      TR_NZL.put()
   ");
   _loop:=_Tr_nzl.next()
!}


\tr_nzl_paczki_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Dyspozycje transportu - Paczki - okno redagowania
::   WE: params_get()   - ustawiane w exec('zdnag_pop','zamdst_nag')
::                      - ustawiane w exec('zddol','zamdst_nag')
::   WY: 'key:F2' - jeśli pola nagłówka dokumentu sprzedażyprawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka dokumentu sprzedaży
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_btnRuleResult:='';

_fld:=params_exec('tr_nzl_edit_finisher','transport_zlec',TR_NZL.ref());
{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| _var_tr_nzl:=params_get().var_tr_nzl;
   _var_tr_nzl.KH:=TR_NZL.KH;
   _var_tr_nzl.KH_ODB:=TR_NZL.KH_ODB;
   _var_tr_nzl.KH_MSC:=TR_NZL.KH_MSC;
   _var_tr_nzl.POS:=TR_NZL.POS;
   _var_tr_nzl.MG:=TR_NZL.MG;
   _var_tr_nzl.WYS:=TR_NZL.WYS;
   _var_tr_nzl.KRAJ:=TR_NZL.KRAJ;
   _var_tr_nzl.MIASTO:=TR_NZL.MIASTO;
   _var_tr_nzl.UL:=TR_NZL.UL;
   _var_tr_nzl.KPOCZ:=TR_NZL.KPOCZ;
   _var_tr_nzl.POCZ:=TR_NZL.POCZ;
   _var_tr_nzl.NUMER:=TR_NZL.NUMER;
   _var_tr_nzl.LOKAL:=TR_NZL.LOKAL;
   _var_tr_nzl.RODZ:=TR_NZL.RODZ;
   _var_tr_nzl.DT:=TR_NZL.DT;
   _var_tr_nzl.DP:=TR_NZL.DP;
   _var_tr_nzl.DR:=TR_NZL.DT;
   _var_tr_nzl.UWAGI:=TR_NZL.UWAGI;
   params_set('var_tr_nzl',_var_tr_nzl);
   BPMN.END:=1;
   TR_NZL.cntx_psh();
   {? exec('FindInSet','#table','TR_PACK','TR_NZL',TR_NZL.ref())=null()
    & FUN.ask('Czy wygenerować strukturę paczek na podstawie pozycji dyspozycji?')
   || exec('genPACK','transport_paczki',TR_NZL.ref())
   ?};
   exec('selTR_PACK','transport_paczki',,0,1);
   TR_NZL.cntx_pop();
   exec('pobTR_NZLpack','transport_paczki');
   {? BPMN.END=2 || _btnRuleResult:=params_exec('tr_nzl_zakoncz_red','transport_zlec') ?}
?};

_btnRuleResult


\keyPACK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Ustawia dostępność klawisza Paczki
::   WE: [_a] - czy generowane domyślnie 0
::----------------------------------------------------------------------------------------------------------------------
_gen:={? var_pres('_a')=type_of(0) || _a || 0 ?};

{? TR_Z.BTN_P<>''
|| {? (_gen | TR_NZL.WHERE='')
    & TR_NZL.TR_ZEWN<>null()
    & TR_NZL.TR_ZEWN().COURIER<>''
    & exec('FindInSet','#table','TR_ZL','POZ',TR_NZL.ref())<>null()
   || TR_NZL.btn_opt(TR_Z.BTN_P,'state=normal')
   || TR_NZL.btn_opt(TR_Z.BTN_P,'state=grayed')
   ?}
?};
~~


\pr_jo_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Przed redakcją jednostki opakowania
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
{? TR_ZL.M<>null() & exec('FindInSet','#table','MJM','JM',TR_ZL.M)<>null()
|| _dom:=null();
   MJM.cntx_psh();
   JM.win_dict('SLO');
   JM.f_clear();
   JM.index('KOD');
   JM.prefix();
   JM.f_set('KOD,NAZ',,,);
   {? JM.f_first()
   || {!
      |? MJM.index('JM');
         MJM.prefix(TR_ZL.M,JM.ref());
         {? MJM.first() & MJM.TR_L>0
         || {? MJM.TR_D | _dom=null() || _dom:=JM.ref() ?};
            JM.f_next()
         || JM.f_del()
         ?}
      !}
   ?};
   MJM.cntx_pop();
   {? JM.f_first()
   || {? TR_ZL.JO=null() || TR_ZL.JO:=_dom ?};
      {? JM.f_size()>1 || _res:=1 ?}
   || TR_ZL.JO:=null()
   ?}
|| TR_ZL.JO:=null()
?};
_res


\po_jo_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Po redakcji jednostki opakowania
::----------------------------------------------------------------------------------------------------------------------
exec('poz_przelicz','transport_zlec');
1


\pr_il_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Przed redakcją ilości opakowań
::----------------------------------------------------------------------------------------------------------------------
1


\po_il_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Po redakcji ilości opakowań
::----------------------------------------------------------------------------------------------------------------------
1


\initCMR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Ustawia sekcje do wydruku CMR-a
::----------------------------------------------------------------------------------------------------------------------
exec('doneCMR','transport_zlec');
country:='';
hchar:=8;
space:=3;
nline:=0;
nrsect:=0;
npage:=tab_tmp(1,'NR','INTEGER','');
{! _ii..4 |! npage.blank(); npage.NR:=_ii; npage.add(1) !};

sect:=obj_new(21); {! _ii:=1..21 |! sect[_ii]:=obj_new(3) !};

sect[1][1]:=14;    sect[1][2]:=23;    sect[1][3]:=80;
sect[2][1]:=14;    sect[2][2]:=48;    sect[2][3]:=80;
sect[3][1]:=14;    sect[3][2]:=74;    sect[3][3]:=80;
sect[4][1]:=14;    sect[4][2]:=89;    sect[4][3]:=80;
sect[5][1]:=14;    sect[5][2]:=104;   sect[5][3]:=80;
sect[6][1]:=14;    sect[6][2]:=120;   sect[6][3]:=45;
sect[7][1]:=68;    sect[7][2]:=120;   sect[7][3]:=10;
sect[8][1]:=74;    sect[8][2]:=120;   sect[8][3]:=20;
sect[9][1]:=102;   sect[9][2]:=120;   sect[9][3]:=20;
sect[10][1]:=129;  sect[10][2]:=120;  sect[10][3]:=20;
sect[11][1]:=173;  sect[11][2]:=120;  sect[11][3]:=30;
sect[12][1]:=197;  sect[12][2]:=120;  sect[12][3]:=30;
sect[13][1]:=14;   sect[13][2]:=190;  sect[13][3]:=80;
sect[14][1]:=12.3; sect[14][2]:=238.4;  sect[14][3]:=50;
sect[15][1]:=108;  sect[15][2]:=239;  sect[15][3]:=105;
sect[16][1]:=108;  sect[16][2]:=50;   sect[16][3]:=85;
sect[17][1]:=108;  sect[17][2]:=74;   sect[17][3]:=85;
sect[18][1]:=108;  sect[18][2]:=90;   sect[18][3]:=85;
sect[19][1]:=108;  sect[19][2]:=190;  sect[19][3]:=85;
sect[21][1]:=14;   sect[21][2]:=253;  sect[21][3]:=30;
~~

\doneCMR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Usuwa zmienne związane z wydrukiem CMR-a
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('space','hchar','nline','sect','npage','nrsect','country');
~~


\po_tr_nzl_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po zmianie rodzaju
::----------------------------------------------------------------------------------------------------------------------
{? TR_NZL.RODZ='Z'
|| TR_NZL.NOTR:=0
?};
1


\pr_tr_nzl_notr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: przed redakcją pola Planowania
::----------------------------------------------------------------------------------------------------------------------
{? TR_NZL.RODZ='R' & TR_NZL.TR_ZEWN().COURIER<>''
|| _res:=1
|| TR_NZL.NOTR:=0;
   _res:=0
?};
_res


\trnzl_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Wyświetlanie załączników dla dyspozycji transportowych
::----------------------------------------------------------------------------------------------------------------------
exec('sel_dok','dokum','TR_NZL',,{? (TR_NZL.name()+4)<>'____' || 2 || 0 ?},,1)


\zakr_dysp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Zmiana zakresu wyświetlania dyspozycji transportowych
::----------------------------------------------------------------------------------------------------------------------
_win_red:=exec('zakr_dysp_win','transport_zlec');
ZAKR.win_edit(_win_red);
{? ZAKR.edit()
|| exec('zakr_dysp_set','transport_zlec');
   exec('zakr_dysp_ustaw','transport_zlec')
?};
~~


\arch_tr_nzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: archiwizacja dyspozycji transportowych
::----------------------------------------------------------------------------------------------------------------------
_przywr:=(TR_NAG.name()+4<>'____');

_tab:=TR_NZL.sel_aget();
TR_NZL.sel_adel();

{? _tab.size()
|| {? _przywr
   || _tx:='Ilość dyspozycji do przywrócenia z archiwum'@
   || _tx:='Ilość dyspozycji do archiwizacji'@
   ?};
   _ok:=FUN.ask('%1: %2.\n'
                'Operacja może być czasochłonna.\n\nCzy kontynuować?'@[_tx,$_tab.size()])
|| _ok:=2
?};
{? _ok=2
|| {? TR_NZL.TR_NAG<>null()
   || FUN.info('Dyspozycja przypisana do transportu archiwizacja niemożliwa.'@)
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='LTR_TRA_AZLE';
      _params.UIDREF:=TR_NZL.uidref();
      _params.AKCJA:='Archiwizuj';
      _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'TR_NZL',TR_NZL.ref());
      exec('mp_run','#b__box',_params)
   ?}
|? _ok=1
|| {? ~_przywr
   || exec('ini_kom','#message','Archiwizacja dyspozycji'@)
   || exec('ini_kom','#message','Przywrócenie dyspozycji z archiwum'@)
   ?};
   _buf:=tab_tmp(1,'TR_NZL','STRING[16]','');
   TR_NZL.cntx_psh();
   _tab.clear();
   {? _tab.first()
   || {!
      |? {? (TR_NZL.clear(); TR_NZL.seek(_tab.REF,)) & TR_NZL.TR_NAG=null()
          & (_buf.clear(); _buf.prefix($TR_NZL.ref()); ~_buf.first())
         || _buf.blank();
            _buf.TR_NZL:=$TR_NZL.ref();
            _buf.add(1);
            _params:=exec('mp_run_a','#b__box');
            _params.ACT_UID:='LTR_TRA_AZLE';
            _params.UIDREF:=TR_NZL.uidref();
            _params.GRUPA:='T';
            _params.AKCJA:='Archiwizuj';
            _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
            exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'TR_NZL',TR_NZL.ref());
            exec('mp_run','#b__box',_params);
            obj_del(_params)
         ?};
         _tab.next()
      !}
   ?};
   obj_del(_buf);
   TR_NZL.cntx_pop();
   exec('end_kom','#message')
?};
obj_del(_tab);
~~


\arch_tr_log
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: archiwizacja dyspozycji transportowej - niezrealizowanej
::----------------------------------------------------------------------------------------------------------------------
{? (TR_LOG.name()+4)='____' & TR_LOG.DOK<>''
|| TR_NZL.cntx_psh();
   TR_NZL.index('DOK_REF');
   TR_NZL.prefix(TR_LOG.DOK);
   {? TR_NZL.first() & TR_NZL.TR_NAG=null()
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='LTR_TRA_AZLE';
      _params.UIDREF:=TR_NZL.uidref();
      _params.AKCJA:='Archiwizuj';
      _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'TR_NZL',TR_NZL.ref());
      exec('mp_run','#b__box',_params)
   ?};
   TR_NZL.cntx_pop()
?};
~~


\pr_tr_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Przed redakcją kategorii transportu dla dyspozycji
::----------------------------------------------------------------------------------------------------------------------
exec('pr_tr_rodz','transport_wspolne',TR_NZL.TR_RODZ);
1


\po_tr_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Po redakcji kategorii transportu dla dyspozycji
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('po_tr_rodz','transport_wspolne',TR_NZL.TR_RODZ);
{? _res & TR_NZL.TR_RODZ().CTRL='N' || TR_NZL.WYM_MOC:='N'; TR_NZL.TR_MOC:=null() ?};
_res


\zakr_dysp_win
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [RR.zz]
:: OPIS: Zwraca okno parametrów zakresu dyspozycji transportowych
::----------------------------------------------------------------------------------------------------------------------
_win_red:=ZAKR.mk_edit('Zakres dyspozycji transportowych'@,,'zakr_trnzl');
ZAKR.win_ewin(_win_red,,'TR_NZL');
exec('ok_esc','#window',ZAKR,_win_red);
_win_red


\zakr_dysp_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Pobranie wartości zmiennej ZAKR dla dyspozycji transportowych
::----------------------------------------------------------------------------------------------------------------------
_user:=exec('name','users');
OZ.index('OZ');
OZ.prefix(_user,_user);
{? OZ.first()
|| ZAKR.T:=OZ.TRNZL_ST
|| ZAKR.T:='W'
?};
{? ZAKR.T='' | 'NOQPRECZXYW'*ZAKR.T=0
|| ZAKR.T:='W'
?};
~~


\zakr_dysp_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Ustawienie wartości zmiennej ZAKR dla dyspozycji transportowych
::----------------------------------------------------------------------------------------------------------------------
_user:=exec('name','users');
OZ.index('OZ');
OZ.prefix(_user,_user);
{? ~OZ.first()
|| OZ.blank();
   OZ.USER:=_user;
   OZ.US:=OPERATOR.USER;
   OZ.add()
?};
OZ.TRNZL_ST:=ZAKR.T;
OZ.put(1);
~~


\zakr_dysp_ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [RR.zz]
:: OPIS: Ustawienie zakresu dyspozycji transportowych
::----------------------------------------------------------------------------------------------------------------------
_st:=ZAKR.T;
_ref:=TR_NZL.ref();
{? _st='W'
|| TR_NZL.index('DTR');
   TR_NZL.prefix('no')
|? _st='E'
|| TR_NZL.index('DTRWAIT');
   TR_NZL.prefix('no','A',exec('tr_nzl_status_oczekujace','transport_zlec'))
|| _stan:='';
   {? _st='N'
   || _stan:=exec('tr_nzl_status_nowe','transport_zlec')
   |? _st='O'
   || _stan:=exec('tr_nzl_status_oczekujace','transport_zlec')
   |? _st='Q'
   || _stan:=exec('tr_nzl_status_do_planowania','transport_zlec')
   |? _st='P'
   || _stan:=exec('tr_nzl_status_zaplanowane','transport_zlec')
   |? _st='R'
   || _stan:=exec('tr_nzl_status_w_realizacji','transport_zlec')
   |? _st='C'
   || _stan:=exec('tr_nzl_status_cz_real','transport_zlec')
   |? _st='Z'
   || _stan:=exec('tr_nzl_status_zrealizowane','transport_zlec')
   |? _st='X'
   || _stan:='anulowane'
   |? _st='Y'
   || _stan:='nieokreślone'
   ?};
   TR_NZL.index('DTR1');
   TR_NZL.prefix('no',_stan,)
?};
TR_NZL.seek(_ref);
~~


\add_dsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: dodaje pozycje do dyspozycji
::----------------------------------------------------------------------------------------------------------------------
_winsel:=__zam_sel;

__dspadd:=1;
__zam_list.cntx_psh();
__dsp_tab.cntx_psh();
__zam_list.win_sel(_winsel);
__zam_list.prefix();
{? __zam_list.first() || __zam_list.select() ?};
__zam_list.cntx_pop();
__dsp_tab.cntx_pop();
__dspadd:=0;
~~


\del_tr_zl_mag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: usuwa pozycje z dyspozycji magazynowej
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć pozycję z dyspozycji magazynowej?\n\n'
           'Uwaga. Zaktualizowane zostaną również dane na powiązanej dyspozycji transportowej i zamówieniu.'@)
|| _reftr_mg:=TR_ZL.ref();
   _reftr_zl:=TR_ZL.OLD_REF;
   _oki:=0;
   do();
   TR_NZL.cntx_psh();
   TR_ZL.cntx_psh();
   TR_NZL.prefix();
   TR_ZL.prefix();
   {? _reftr_zl<>'' & TR_ZL.seek(_reftr_zl) & TR_NZL.seek(TR_ZL.TR_NZL)
   || TR_ZL.index('POZ');
      TR_ZL.prefix(TR_NZL.ref());
      {? TR_ZL.first() & TR_ZL.seek(_reftr_zl) & exec('tr_zl_del','transport_wspolne',1)
      || _oki:=1
      || undo()
      ?}
   ?};
   TR_NZL.cntx_pop();
   TR_ZL.cntx_pop();
   {? _oki
   || {? exec('tr_zl_del','transport_wspolne',2)
      || _oki:=1
      || undo()
      ?}
   ?};
   end()
?};
~~


\mod_tr_zl_mag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: modyfikuje pozycje z dyspozycji magazynowej
::----------------------------------------------------------------------------------------------------------------------
_reftr_mg:=TR_ZL.ref();
_reftr_zl:=TR_ZL.OLD_REF;
_reftrnzl:=TR_ZL.TR_NZL;
_oki:=0;
:: magazyn, zamówienie
_mg:=TR_ZL.TR_NZL().MG;
_dok_ref:=TR_ZL.DOK_REF;
_poz_ref:=TR_ZL.POZ_REF;
_ile_zre:=TR_ZL.ZIL;
_where:=exec('FindAndGet','#table',TR_NZL,TR_ZL.TR_NZL().DOK_REF,,"WHERE",'');
VAR_DEL.delete('__tref_z');
__tref_z:=tab_tmp(2,'KTM','STRING[16]','indeks'
           ,'POZ','INTEGER','numer pozycji'
           ,'ILE','REAL','ilość dostępna'
           ,'UID','STRING[48]','uidref'
           ,'UIZ','STRING[48]','uidref zamówienia'
           ,'SYM','STRING[30]','symbol zamówienia');

:: ustawienie filtru dla kartoteki materiałowej
_lst_ktm:='';
{? _where='ZD_NAG'
|| _msk:=8+(_dok_ref+16);
   exec('openzd_psh','open_tab');
   {? _msk<>ZD_NAG.name() || exec('openzd','open_tab',_msk+3) ?};
   ZD_NAG.prefix();
   {? ZD_NAG.seek(_dok_ref)
   || ZD_POZ.index('POZ');
      ZD_POZ.prefix(ZD_NAG.ref());
      {? ZD_POZ.first()
      || {!
         |? _ktm:='\'%1\''[ZD_POZ.M().KTM];
            _uid_poz:=exec('FindInSet','#table','TR_ZL','POZREF',ZD_POZ.uidref(),_reftrnzl,"@.TR_ZL.uidref()",1,,'');
            {? {? ZD_POZ.uidref()=_poz_ref || ZD_POZ.IL_POZ-_ile_zre
               |? _uid_poz=''              || ZD_POZ.IL_POZ-ZD_POZ.IL_ZT
               || 0
               ?}>0
             & ZD_POZ.M().RODZ='T' & ZD_POZ.MG=_mg
            || __tref_z.blank();
               __tref_z.KTM:=ZD_POZ.M().KTM;
               __tref_z.POZ:=ZD_POZ.POZ;
               __tref_z.ILE:={? ZD_POZ.uidref()=_poz_ref || ZD_POZ.IL_POZ-_ile_zre || ZD_POZ.IL_POZ-ZD_POZ.IL_ZT ?};
               __tref_z.UID:=ZD_POZ.uidref();
               __tref_z.UIZ:=ZD_POZ.ZD_NAG().uidref();
               __tref_z.SYM:=ZD_POZ.ZD_NAG().SYM;
               __tref_z.add(1);
               {? ~(_lst_ktm*_ktm)
               || _lst_ktm+={? _lst_ktm='' || 'M.KTM in (%1'[_ktm] || ',%1'[_ktm] ?}
               ?}
            ?};
            ZD_POZ.next()
         !}
      ?};
      {? _lst_ktm<>'' || _lst_ktm+=')' ?}
   ?};
   exec('openzd_pop','open_tab')
|? _where='ZK_N'
|| _msk:=8+(_dok_ref+16);
   exec('openz_psh','open_tab');
   {? _msk<>ZK_N.name() || exec('openz','open_tab',_msk+3) ?};
   ZK_N.prefix();
   {? ZK_N.seek(_dok_ref)
   || ZK_P.index('NAG');
      ZK_P.prefix(ZK_N.ref());
      {? ZK_P.first()
      || {!
         |? _ktm:='\'%1\''[ZK_P.M().KTM];
            _uid_poz:=exec('FindInSet','#table','TR_ZL','POZREF',ZK_P.uidref(),_reftrnzl,"@.TR_ZL.uidref()",1,,'');
            {? {? ZK_P.uidref()=_poz_ref || ZK_P.ILP-_ile_zre
               |? _uid_poz=''            || ZK_P.ILP-ZK_P.IL_ZT
               || 0
               ?}>0
             & ZK_P.M().RODZ='T' & ZK_P.MG=_mg
            || __tref_z.blank();
               __tref_z.KTM:=ZK_P.M().KTM;
               __tref_z.POZ:=ZK_P.POZ;
               __tref_z.ILE:={? ZK_P.uidref()=_poz_ref || ZK_P.ILP-_ile_zre || ZK_P.ILP-ZK_P.IL_ZT ?};
               __tref_z.UID:=ZK_P.uidref();
               __tref_z.UIZ:=ZK_P.N().uidref();
               __tref_z.SYM:=ZK_P.N().SYM;
               __tref_z.add(1);
               {? ~(_lst_ktm*_ktm)
               || _lst_ktm+={? _lst_ktm='' || 'M.KTM in (%1'[_ktm] || ',%1'[_ktm] ?}
               ?}
            ?};
            ZK_P.next()
         !}
      ?};
      {? _lst_ktm<>'' || _lst_ktm+=')' ?}
   ?};
   exec('openz_pop','open_tab')
?};

{? _lst_ktm<>''
||
   M.f_clear();
   M.f_set('KTM,N',,_lst_ktm);
   _mat:={? M.f_first() & M.f_size()=1 || M.ref() || null() ?};
   {? _mat<>null()
   || TR_ZL.efld_opt('REM','editable=0',,'M')
   || TR_ZL.efld_opt('REM','editable=1',,'M')
   ?};
:: zapamiętanie poprzednich wartości
   _old_m:=TR_ZL.M;
   _old_il:=TR_ZL.IL;
   _old_op:=TR_ZL.IL_OP;
   _old_t:=TR_ZL.IL_T;
   _old_m3:=TR_ZL.IL_M3;
   _old_szt:=TR_ZL.IL_SZT;
   _old_dlug:=TR_ZL.DLUG;
   _old_szer:=TR_ZL.SZER;
   _old_wyso:=TR_ZL.WYSO;

   _win_edit:=TR_ZL.win_edit('?');
   TR_ZL.win_edit('REM');
   {? TR_ZL.edit("exec('chk_tr_mg','transport_zlec')")
   || _kor:=0;
      _oki:=0;
::    sprawdzamy czy dla danej pozycji poz_ref się zgadza i spełnia kryterium ilości,
::    jak nie to traktowane to jest jak podmiana
      __tref_z.clear();
      __tref_z.prefix(TR_ZL.M().KTM);
      {? __tref_z.last()
      || {!
         |? {? TR_ZL.IL<=__tref_z.ILE
            || TR_ZL.POZ_REF:=__tref_z.UID;
               TR_ZL.DOK_REF:=__tref_z.UIZ;
               TR_ZL.DOK_SYM:=__tref_z.SYM;
               {? TR_ZL.POZ_REF=_poz_ref
               || _oki:=1
               || _oki:=2
               ?}
            ?};
            {? _oki=1 || 0 || __tref_z.prev() ?}
         !}
      ?};
      _zm_wym:=_old_op<>TR_ZL.IL_OP
             | _old_t<>TR_ZL.IL_T
             | _old_m3<>TR_ZL.IL_M3
             | _old_szt<>TR_ZL.IL_SZT
             | _old_dlug<>TR_ZL.DLUG
             | _old_szer<>TR_ZL.SZER
             | _old_wyso<>TR_ZL.WYSO;
      {? TR_ZL.M=_old_m & (TR_ZL.IL<>_old_il | _zm_wym) & TR_ZL.POZ_REF=_poz_ref
      ||
::    korekta ilości
         _oki:=1;
         _kor:=1
      |? TR_ZL.M<>_old_m | TR_ZL.POZ_REF<>_poz_ref
      ||
::    korekta indeksu
         _oki:=2;
         _kor:=2
      ?};
      do();
      {? _oki
      || {? _kor=1
         || _waga:=TR_Z.WAGA;
::       korekta pozostałych wartości
            {? _oki=1 & TR_ZL.IL_OP<>_old_op
            || TR_Z.WAGA:=TR_ZL.IL_OP;
               _oki:=exec('FindAndGet','#table',TR_ZL,TR_ZL.OLD_REF,,"IL_OP:=TR_Z.WAGA; put(1)",0)
            ?};
            {? _oki=1 & TR_ZL.IL_T<>_old_t
            || TR_Z.WAGA:=TR_ZL.IL_T;
               _oki:=exec('FindAndGet','#table',TR_ZL,TR_ZL.OLD_REF,,"IL_T:=TR_Z.WAGA; put(1)",0)
            ?};
            {? _oki=1 & TR_ZL.IL_M3<>_old_m3
            || TR_Z.WAGA:=TR_ZL.IL_M3;
               _oki:=exec('FindAndGet','#table',TR_ZL,TR_ZL.OLD_REF,,"IL_M3:=TR_Z.WAGA; put(1)",0)
            ?};
            {? _oki=1 & TR_ZL.IL_SZT<>_old_szt
            || TR_Z.WAGA:=TR_ZL.IL_SZT;
               _oki:=exec('FindAndGet','#table',TR_ZL,TR_ZL.OLD_REF,,"IL_SZT:=TR_Z.WAGA; put(1)",0)
            ?};
            {? _oki=1 & TR_ZL.DLUG<>_old_dlug
            || TR_Z.WAGA:=TR_ZL.DLUG;
               _oki:=exec('FindAndGet','#table',TR_ZL,TR_ZL.OLD_REF,,"DLUG:=TR_Z.WAGA; put(1)",0)
            ?};
            {? _oki=1 & TR_ZL.SZER<>_old_szer
            || TR_Z.WAGA:=TR_ZL.SZER;
               _oki:=exec('FindAndGet','#table',TR_ZL,TR_ZL.OLD_REF,,"SZER:=TR_Z.WAGA; put(1)",0)
            ?};
            {? _oki=1 & TR_ZL.WYSO<>_old_wyso
            || TR_Z.WAGA:=TR_ZL.WYSO;
               _oki:=exec('FindAndGet','#table',TR_ZL,TR_ZL.OLD_REF,,"WYSO:=TR_Z.WAGA; put(1)",0)
            ?};
            TR_Z.WAGA:=_waga;
            {? ~_oki
            || undo()
            || _il:=TR_ZL.IL;
               _reftr_mg:=TR_ZL.ref();
               _reftr_zl:=TR_ZL.OLD_REF;
               _oki:=0;
               TR_NZL.cntx_psh();
               TR_ZL.cntx_psh();
               TR_NZL.prefix();
               TR_ZL.prefix();
               {? _reftr_zl<>'' & TR_ZL.seek(_reftr_zl) & TR_NZL.seek(TR_ZL.TR_NZL)
               || TR_ZL.index('POZ');
                  TR_ZL.prefix(TR_NZL.ref());
                  {? TR_ZL.first() & TR_ZL.seek(_reftr_zl) & exec('tr_zl_mod','transport_wspolne',1,_il)
                  || _oki:=1
                  || undo()
                  ?}
               ?};
               TR_NZL.cntx_pop();
               TR_ZL.cntx_pop();
               {? _oki
               || {? exec('tr_zl_mod','transport_wspolne',2,_il)
                  || _oki:=1
                  || undo()
                  ?}
               ?}
            ?}
         |? _kor=2
         || TR_ZL.JM:=TR_ZL.M().J;
            {? ~_oki
            || undo()
            || _il:=TR_ZL.IL;
               _reftr_mg:=TR_ZL.ref();
               _reftr_zl:=TR_ZL.OLD_REF;
               _oki:=0;

               _rec:=obj_new(TR_ZL.fld_num());
               exec('bufRec','#table','TR_ZL',_rec);

               TR_NZL.cntx_psh();
               TR_ZL.cntx_psh();
               TR_NZL.prefix();
               TR_ZL.prefix();
               {? _reftr_zl<>'' & TR_ZL.seek(_reftr_zl) & TR_NZL.seek(TR_ZL.TR_NZL)
               || TR_ZL.index('POZ');
                  TR_ZL.prefix(TR_NZL.ref());
                  {? TR_ZL.first() & TR_ZL.seek(_reftr_zl)
                   & exec('tr_zl_mod','transport_wspolne',1,_il,_rec)
                  || _oki:=1
                  || undo()
                  ?}
               ?};
               obj_del(_rec);
               TR_NZL.cntx_pop();
               TR_ZL.cntx_pop();
               {? _oki
               || {? exec('tr_zl_mod','transport_wspolne',2,_il)
                  || _oki:=1
                  || undo()
                  ?}
               ?}
            ?}
         ?}
      ?};
      end()
   ?};
   M.f_clear();
   TR_ZL.win_edit(_win_edit)
|| FUN.info('Nie można modyfikować pozycji.\nZostała ona w pełni zrealizowana.'@)
?};
VAR_DEL.delete('__tref_z');
~~


\add_tr_zl_mag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: dodaje pozycje z dyspozycji magazynowej
::----------------------------------------------------------------------------------------------------------------------
:: magazyn, zamówienie
_reftrnzl:=TR_NZL.ref();
_mg:=TR_NZL.MG;
_dok_ref:=TR_ZL.DOK_REF;
_poz_ref:=TR_ZL.POZ_REF;
_where:=exec('FindAndGet','#table',TR_NZL,TR_ZL.TR_NZL().DOK_REF,,"WHERE",'');
VAR_DEL.delete('__tref_z');
__tref_z:=tab_tmp(2,'KTM','STRING[16]','indeks'
           ,'POZ','INTEGER','numer pozycji'
           ,'ILE','REAL','ilość dostępna'
           ,'UID','STRING[48]','uidref'
           ,'UIZ','STRING[48]','uidref zamówienia'
           ,'SYM','STRING[30]','symbol zamówienia');

:: ustawienie filtru dla kartoteki materiałowej
_lst_ktm:='';
{? _where='ZD_NAG'
|| _msk:=8+(_dok_ref+16);
   exec('openzd_psh','open_tab');
   {? _msk<>ZD_NAG.name() || exec('openzd','open_tab',_msk+3) ?};
   ZD_NAG.prefix();
   {? ZD_NAG.seek(_dok_ref)
   || ZD_POZ.index('POZ');
      ZD_POZ.prefix(ZD_NAG.ref());
      {? ZD_POZ.first()
      || {!
         |? _ktm:='\'%1\''[ZD_POZ.M().KTM];
            _uid_poz:=exec('FindInSet','#table','TR_ZL','POZREF',ZD_POZ.uidref(),_reftrnzl,"@.TR_ZL.uidref()",1,,'');
            {? {? _uid_poz='' || ZD_POZ.IL_POZ-ZD_POZ.IL_ZT || 0 ?}>0 & ZD_POZ.M().RODZ='T' & ZD_POZ.MG=_mg
            || __tref_z.blank();
               __tref_z.KTM:=ZD_POZ.M().KTM;
               __tref_z.POZ:=ZD_POZ.POZ;
               __tref_z.ILE:=ZD_POZ.IL_POZ-ZD_POZ.IL_ZT;
               __tref_z.UID:=ZD_POZ.uidref();
               __tref_z.UIZ:=ZD_POZ.ZD_NAG().uidref();
               __tref_z.SYM:=ZD_POZ.ZD_NAG().SYM;
               __tref_z.add(1);
               {? ~(_lst_ktm*_ktm)
               || _lst_ktm+={? _lst_ktm='' || 'M.KTM in (%1'[_ktm] || ',%1'[_ktm] ?}
               ?}
            ?};
            ZD_POZ.next()
         !}
      ?};
      {? _lst_ktm<>'' || _lst_ktm+=')' ?}
   ?};
   exec('openzd_pop','open_tab')
|? _where='ZK_N'
|| _msk:=8+(_dok_ref+16);
   exec('openz_psh','open_tab');
   {? _msk<>ZK_N.name() || exec('openz','open_tab',_msk+3) ?};
   ZK_N.prefix();
   {? ZK_N.seek(_dok_ref)
   || ZK_P.index('NAG');
      ZK_P.prefix(ZK_N.ref());
      {? ZK_P.first()
      || {!
         |? _ktm:='\'%1\''[ZK_P.M().KTM];
            _uid_poz:=exec('FindInSet','#table','TR_ZL','POZREF',ZK_P.uidref(),_reftrnzl,"@.TR_ZL.uidref()",1,,'');
            {? {? _uid_poz='' || ZK_P.ILP-ZK_P.IL_ZT || 0 ?}>0 & ZK_P.M().RODZ='T' & ZK_P.MG=_mg
            || __tref_z.blank();
               __tref_z.KTM:=ZK_P.M().KTM;
               __tref_z.POZ:=ZK_P.POZ;
               __tref_z.ILE:=ZK_P.ILP-ZK_P.IL_ZT;
               __tref_z.UID:=ZK_P.uidref();
               __tref_z.UIZ:=ZK_P.N().uidref();
               __tref_z.SYM:=ZK_P.N().SYM;
               __tref_z.add(1);
               {? ~(_lst_ktm*_ktm)
               || _lst_ktm+={? _lst_ktm='' || 'M.KTM in (%1'[_ktm] || ',%1'[_ktm] ?}
               ?}
            ?};
            ZK_P.next()
         !}
      ?};
      {? _lst_ktm<>'' || _lst_ktm+=')' ?}
   ?};
   exec('openz_pop','open_tab')
?};

{? _lst_ktm<>''
|| M.f_clear();
   M.f_set('KTM,N',,_lst_ktm);
   _mat:={? M.f_first() & M.f_size()=1 || M.ref() || null() ?};
   {? _mat<>null()
   || TR_ZL.efld_opt('REM','editable=0',,'M')
   || TR_ZL.efld_opt('REM','editable=1',,'M')
   ?};
   _win_edit:=TR_ZL.win_edit('?');
   TR_ZL.win_edit('REM');
   TR_ZL.blank();
   TR_ZL.memo_set('','POZ_OPIS');
   TR_ZL.TR_NZL:=_reftrnzl;
   TR_ZL.MG:=_mg;
   TR_ZL.M:=_mat;
   {? TR_ZL.edit("exec('chk_tr_mg','transport_zlec')")
   || do();
      TR_ZL.JM:=TR_ZL.M().J;
      _oki:=0;
      __tref_z.clear();
      __tref_z.prefix(TR_ZL.M().KTM);
      {? __tref_z.first()
      || {!
         |? {? TR_ZL.IL<=__tref_z.ILE
            || TR_ZL.POZ_REF:=__tref_z.UID;
               TR_ZL.DOK_REF:=__tref_z.UIZ;
               TR_ZL.DOK_SYM:=__tref_z.SYM;
               _oki:=1;
               0
            || __tref_z.next()
            ?}
         !}
      ?};
      {? _oki & TR_ZL.add(1)
      || TR_ZL.memo_put(,'POZ_OPIS');
         exec('sum_poz','transport_zlec',TR_ZL.TR_NZL);
         exec('ktm2tr_nzl','transport_zlec',TR_ZL.TR_NZL)
      || _oki:=0;
         undo()
      ?};
      {? _oki
      || {? (_old:=exec('mg2TR_NZL','transport_zlec',TR_ZL.TR_NZL().DOK_REF);_old<>'')
         || TR_ZL.OLD_REF:=_old;
            TR_ZL.put(1)
         || _oki:=0;
            undo()
         ?}
      ?};
      end()
   ?};
   M.f_clear();
   TR_ZL.win_edit(_win_edit)
|| FUN.info('Nie można dodać pozycji.\nWszystkie pozycje z zamówienia zostały już dodane.'@)
?};
VAR_DEL.delete('__tref_z');
~~


\chk_tr_mg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: kontrola poprawności danych dla TR_ZL dyspozycji magazynowej
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_wyn:=__CHK.record(TR_ZL,,'M','IL');
{? _wyn=''
||
   {? TR_ZL.IL<=0    || FUN.info('Ilość przewożona musi być większa od zera.'@); _wyn:='IL' ?};
   {? TR_ZL.IL_OP<0  || FUN.info('Ilość opakowań nie może być ujemna.'@); _wyn:='IL_OP' ?};
   {? TR_ZL.IL_T<0   || FUN.info('Ilość wagi nie może być ujemna.'@); _wyn:='IL_T' ?};
   {? TR_ZL.IL_M3<0  || FUN.info('Ilość objętości nie może być ujemna.'@); _wyn:='IL_M3' ?};
   {? TR_ZL.IL_SZT<0 || FUN.info('Ilość sztuk nie może być ujemna.'@); _wyn:='IL_SZT' ?};
   {? TR_ZL.SZER<0   || FUN.info('Szerokość nie może być ujemna.'@); _wyn:='SZER' ?};
   {? TR_ZL.DLUG<0   || FUN.info('Długość nie może być ujemna.'@); _wyn:='DLUG' ?};
   {? TR_ZL.WYSO<0   || FUN.info('Wysokość nie może być ujemna.'@); _wyn:='WYSO' ?}
?};
{? _wyn=''
|| _wyn:='IL';
   _max:=0;
   __tref_z.clear();
   __tref_z.prefix(TR_ZL.M().KTM);
   {? __tref_z.first()
   || {!
      |? {? TR_ZL.IL<=__tref_z.ILE || _wyn:='' || {? _max<__tref_z.ILE || _max:=__tref_z.ILE ?} ?};
         _wyn<>'' & __tref_z.next()
      !}
   ?};
   {? _wyn<>''
   || FUN.info('Zbyt duża ilość do dyspozycji transportu (magazynowej).'
               '\nAktualnie maksymalna ilość do zadysponowania: %1 %2.'@[$_max,TR_ZL.M().J().KOD])
   ?}
?};
_wyn


\mg2TR_NZL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: dodaje pozycje do dyspozycji transportowej na podstawie dyspozycji magazynowej
::       kontekst dodanego rekordu do TR_ZL
::   WE: _a - uidref TR_NZL
::   WY: ''-nie dodano, uidref dodadnej pozycji
::----------------------------------------------------------------------------------------------------------------------
_uidnzl:={? var_pres('_a')=type_of('') || _a || '' ?};
_res:='';

TR_ZL.get();

TR_NZL.cntx_psh();
TR_ZL.cntx_psh();
_refnzl:={? _uidnzl<>'' || exec('FindAndGet','#table',TR_NZL,_uidnzl,,,null()) || null() ?};

{? _refnzl<>null()
|| TR_NZL.cntx_psh();
   TR_ZL.cntx_psh();
   TR_NZL.prefix();
   {? TR_NZL.seek(_refnzl)
   || TR_ZL.index('POZ');
      TR_ZL.prefix(_refnzl);
      TR_ZL.first();
      _poz:=exec('BL_TR_ZLPOZ','transport_zlec');
      TR_ZL.prefix();
      TR_ZL.TR_NZL:=_refnzl;
      TR_ZL.POZ:=_poz;
      TR_ZL.OLD_REF:='';
      _res:={? TR_ZL.add(1) || TR_ZL.uidref() || '' ?};
      {? _res<>''
      || TR_ZL.memo_put(,'POZ_OPIS');
         exec('sum_poz','transport_zlec',_refnzl);
         exec('ktm2tr_nzl','transport_zlec',_refnzl);
         _Buf:=exec('where2TAB','transport_wspolne',TR_ZL.TR_NZL().WHERE,1);
         _zal:={? TR_ZL.TR_NZL().WHERE='ZGP' || TR_NZL.RODZ || '' ?};
         {? _Buf<>TR_ZL & TR_ZL.POZ_REF<>'' || exec('aktIL_TRAN','transport_wspolne',_Buf,TR_ZL.POZ_REF,_zal) ?};
         obj_del(_Buf)
      ?}
   ?};
   TR_NZL.cntx_pop();
   TR_ZL.cntx_pop()
?};
TR_NZL.cntx_pop();
TR_ZL.cntx_pop();
_res

:Sign Version 2.0 jowisz:1045 2024/01/25 10:22:22 1ffc530855c0c1fa8245d869b3a101bdc9a55e2e0556c88605d278c63a505d6f0385554c692cf524928880fd0f38032e8073749817a257c9a5980ed2b39d4115f109ef5573347e560059959b61619f5795a00ae2e0fe3a1de5632c8af62a1f1ca0ba37238dfe5d02e42c6ac36fd61bade20117f3e71d0a22c8c20ccc2d4faf2e
