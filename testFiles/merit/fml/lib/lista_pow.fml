:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: lista_pow.fml
:: Utworzony: 23.02.2021
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły bibioteczne dla obsługi powiązań pomiędzy listami płac.
::======================================================================================================================
:: W złączeniu SLO_KOD mogą być wykorzystane wyłącznie zapisy typu LISTAT.
:: STORNO
:: - wymuszane jest złączenie 1-1,
:: - lista nie może być stornem sama dla siebie,
:: - niedozwolone jest tworzenie storna dla storna.


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed dołączeniem lub poprawieniem wiersza tabeli O_O.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
O.cntx_psh();

O_O.FIRMA:=O_O.NAD().FIRMA;
O_O.NAD_T:=O_O.NAD().T;
O_O.POD_T:=O_O.POD().T;

O.cntx_pop();
1


\_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

_chk:=__CHK.validate(O_O,
:: sprawdź wymagane dane i unikalność indeksów
   $("_a.table(_b,"+$_mode+",'FIRMA','SLO_KOD','NAD','POD')"),
:: zezwalaj na wykorzystanie wyłącznie zapisów typu LISTAT
   "  _chk:=1;
      SLO_KOD.cntx_psh();
      SLO_TYP.cntx_psh();
      {? _b.SLO_KOD().SLO_TYP().SYMBOL<>'LISTAT'
      || _a.err_fld(_b,'SLO_KOD',1,'Błędny typ słownika.'@);
         _chk:=0
      ?};
      SLO_TYP.cntx_pop();
      SLO_KOD.cntx_pop();
      _chk
   "
);

{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & _chk=0)
:: podstawowy test wykrył błędy
|| return(_chk)
?};

SLO_KOD.cntx_psh();
_code:=O_O.SLO_KOD().KOD;
SLO_KOD.cntx_pop();

_storno:=exec('kod_storno','ext_slo');
{? _code=_storno
:: warunki STORNO
|| O_O.cntx_psh();
   O_O.index('NAD');
   O_O.prefix(O_O.NAD,_storno);
   _tnad:={? _mode=0 || O_O.size()=0 || 1 ?};
   O_O.index('POD');
   O_O.prefix(O_O.POD,_storno);
   _tpod:={? _mode=0 || O_O.size()=0 || 1 ?};
   O_O.cntx_pop();

   {? _tnad=0 | _tpod=0
::    zwielokrotnione storno
   || __CHK.err_msg('Lista płac może mieć tylko jedną listę storno.'@);
      _chk:=0

   |? O_O.NAD=O_O.POD
::    storno dla tej samej listy
   || __CHK.err_msg('Lista płac nie może być stornem sama dla siebie.'@);
      _chk:=0

   |? exec('czy_storno_o','lista_pow',O_O.NAD)
::    próba utworzenia storna dla listy, która jest stornem
   || __CHK.err_msg('Lista płac nie może być stornem sama dla siebie.'@);
      _chk:=0
   ?}
?};

_chk


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed dołączeniem lub poprawieniem wiersza tabeli O_O.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','lista_pow') & exec('_chk','lista_pow',0)


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli O_O.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','lista_pow') & exec('_chk','lista_pow',1)


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli O_O.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
SLO_KOD.cntx_psh();
{? O_O.SLO_KOD().KOD=exec('kod_storno','ext_slo')
|| _ret:=
      exec('del_ndx','#table',O_P,'UNIQUE',O_O.POD) &
      exec('del_ndx','#table',LS,'LISTPRAC',O_O.POD)
?};
SLO_KOD.cntx_pop();
_ret


\jest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Sprawdza, czy powiązanie listy zgodnie z podanym rodzajem.
::   WE: _a [_O] - wskazanie wiersza tabeli O
::       _b [STRING] - symbol rodzaju powiązania
::       _c [STRING] - akronim klucza porządkującego
::   WY: 0/1 - brak powiązania/jest powiązanie
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;
_kod:=_b;
_key:=_c;

O_O.cntx_psh();
O_O.index(_key);
O_O.prefix(_ref,_kod,);
_val:=O_O.first();
O_O.cntx_pop();
_val


\jest_nad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Sprawdza, czy dla podana lista jest powiązana z inną przez określony rodzaj.
::   WE: _a [_O] - wskazanie wiersza tabeli O
::       _b [STRING] - symbol rodzaju powiązania
::   WY: 0/1 - brak powiązania/jest powiązanie
::----------------------------------------------------------------------------------------------------------------------
exec('jest','lista_pow',_a,_b,'POD')


\jest_pod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Sprawdza, czy dla podanej listy istnieje powiązanie określonego rodzaju.
::   WE: _a [_O] - wskazanie wiersza tabeli O
::       _b [STRING] - symbol rodzaju powiązania
::   WY: 0/1 - brak powiązania/jest powiązanie
::----------------------------------------------------------------------------------------------------------------------
exec('jest','lista_pow',_a,_b,'NAD')


\czy_storno_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Sprawdza, czy dla dana lista jest listą storno.
::   WE: _a [_O] - wskazanie wiersza tabeli O
::   WY: 0/1 - brak/jest storno
::----------------------------------------------------------------------------------------------------------------------
exec('jest_nad','lista_pow',_a,exec('kod_storno','ext_slo'))


\czy_storno_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Sprawdza, czy dla dana lista jest stornem listy płac pracownika.
::   WE: _a [_O] - wskazanie wiersza w tabeli O
::       _b [_P] - wskazanie wiersza w tabeli P
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_hdr:=_a;
_emp:=_b;

{? ~exec('czy_storno_o','lista_pow',_hdr)
:: lista nie jest stornem
|| return(0)
?};

_ret:=0;
O_P.cntx_psh();
{? exec('o_p_jest','ppl',_hdr,_emp)
|| _ret:=(O_P.LS='T')
?};
O_P.cntx_pop();

_ret


\jest_storno_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Sprawdza, czy dla danej listy istnieje jej storno.
::   WE: _a [_O] - wskazanie wiersza tabeli O
::   WY: 0/1 - brak/jest storno
::----------------------------------------------------------------------------------------------------------------------
exec('jest_pod','lista_pow',_a,exec('kod_storno','ext_slo'))


\jest_storno_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Sprawdza, czy istnieje storno listy płac pracownika.
::   WE: _a [_O] - wskazanie wiersza w tabeli O
::       _b [_P] - wskazanie wiersza w tabeli P
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_hdr:=_a;
_emp:=_b;

{? (_ret:=exec('storno_ustal_o','lista_pow',_hdr)).VALUE<>null
|| exec('czy_storno_p','lista_pow',_ret.VALUE,_emp)
?}


\storno_dodaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wyszukuje/dodaje storno listy.
::   WE: _a [_O] - wskazanie wiersza w tabeli O (lista źródłowa)
::       _b [_O] - wskazanie wiersza w tabeli O (lista docelowa)
::       _b [INTEGER] - zachowanie kontekstu: różny od zera - pomiń zachowanie i odtworzenie konteksu, wpp zachowuj
::   WY: wynik operacji zgodny z ext_val/#object.fml
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_src:=_a;
_dst:=_b;
_ctx:=(var_pres('_b')<>type_of(0) | _b=0);

_prolog:=$('%1~~'[
   {? _ctx<>0 || 'O.cntx_psh(); O_O.cntx_psh(); ' || '' ?}
]);
_epilog:=$('%1exec(\'ext_val\',\'#object\',_a,_b)'[
   {? _ctx<>0 || 'O_O.cntx_pop(); O.cntx_pop(); ' || '' ?}
]);

_prolog();

{? (_ret:=exec('storno_szukaj','lista_pow',_src,'NAD',1)).VALUE<>null
|| return(_epilog(_ret.VALUE,_ret.INFO))
?};

O_O.blank();
O_O.SLO_KOD:=exec('ref_storno','ext_slo');
O_O.NAD:=_src;
O_O.POD:=_dst;

O_O.prefix();
{? O_O.add()
|| _epilog(O_O.ref(),'Dodano storno listy płac %1.'@[~-O_O.NAD().LT])
|| _epilog(null,'Wystąpił błąd podczas dodawania storno listy płac.'@)
?}


\storno_szukaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wyszukuje storno listy.
::   WE: _a [_O] - wskazanie wiersza w tabeli O (lista źródłowa)
::       _b [STRING] - akronim klucza porządkującego
::       _c [INTEGER] - zachowanie kontekstu: różny od zera - pomiń zachowanie i odtworzenie konteksu, wpp zachowuj
::   WY: wynik operacji zgodny z ext_val/#object.fml
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;
_key:=_b;
_ctx:=(var_pres('_c')<>type_of(0) | _c=0);

_prolog:=$('O.cntx_psh(); %1~~'[
   {? _ctx<>0 || 'O_O.cntx_psh(); ' || '' ?}
]);
_epilog:=$('O.cntx_pop(); %1exec(\'ext_val\',\'#object\',_a,_b)'[
   {? _ctx<>0 || 'O_O.cntx_pop(); ' || '' ?}
]);

_prolog();

SEEK.O:=_ref;
O_O.index(_key);
O_O.prefix(_ref,exec('kod_storno','ext_slo'));
{? O_O.first()
|| _epilog(O_O.ref(),'Znaleziono storno listy płac %1.'@[~-SEEK.O().LT])
|| _epilog(null,'Nie znaleziono storno listy płac %1.'@[~-SEEK.O().LT])
?}


\storno_ustal_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wyszukuje storno listy.
::   WE: _a [_O] - wskazanie wiersza w tabeli O (lista źródłowa)
::       _b [INTEGER] - zachowanie kontekstu: różny od zera - pomiń zachowanie i odtworzenie konteksu, wpp zachowuj
::   WY: wynik operacji zgodny z ext_val/#object.fml
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_ref:=_a;
_ctx:=(var_pres('_b')<>type_of(0) | _b=0);

_prolog:=$('%1~~'[
   {? _ctx<>0 || 'O_O.cntx_psh(); ' || '' ?}
]);
_epilog:=$('%1exec(\'ext_val\',\'#object\',_a,_b)'[
   {? _ctx<>0 || 'O_O.cntx_pop(); ' || '' ?}
]);

_prolog();

{? (_nad:=exec('storno_szukaj','lista_pow',_ref,'NAD',1)).VALUE<>null
:: znaleziono storno dla wskazanej listy
|| return(_epilog(O_O.POD,_nad.INFO))

|? (_pod:=exec('storno_szukaj','lista_pow',_ref,'POD',1)).VALUE<>null
:: wskazana lista jest stornem dla innej
|| return(_epilog(O_O.POD,_pod.INFO))
?};

{? _nad.VALUE=null || _epilog(null,_nad.INFO)
|? _pod.VALUE=null || _epilog(null,_pod.INFO)
|| _epilog(null,exec('err_rec_acc','#message',_ref))
?}


\storno_usun_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Usuwa storno listy płac.
::   WE: _a [_O] - wskazanie wiersza w tabeli O
::   WY: wynik operacji zgodny z ext_val/#object.fml
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_src:=_a;

_prolog:=$(
   'O.cntx_psh(); '
   'LS.cntx_psh(); '
   'O_O.cntx_psh(); '
   '%1'
   '~~'[
      {? do_state()=0
      || 'do(); '
      || ''
      ?}
]);
_epilog:=$(
   'O_O.cntx_pop(); '
   'LS.cntx_pop(); '
   'O.cntx_pop(); '
   '%1'
   'exec(\'ext_val\',\'#object\',_a,_b)'[
      {? do_state()=0
      || '{? _a<=0 '
         '|| undo() '
         '?}; '
         'end(); '
      || ''
      ?}
]);

_prolog();

:: ustal właściwą listę zawierającą storna składników
_ret:=exec('storno_ustal_o','lista_pow',_src,1);
{? _ret.VALUE<>null & O.seek(_ret.VALUE,,1)
:: jest storno
|| LS.use(-O.LT);
   LS.trig_off('del po','*');
   _err:=0;
   O_P.cntx_psh();
   O_P.index('UNIQUE');
   O_P.prefix(O.ref());
   _loop:=O_P.first();
   {!
   |? _loop & ~_err
   |! {? exec('del_ndx','#table',LS,'LISTPRAC',O_P.O,O_P.P)
      || _loop:=O_P.next()
      || _err:=1
      ?}
   !};
   O_P.cntx_pop();
   {? _err |
      ~exec('del_ndx','#table',O_P,'UNIQUE',O.ref()) |
      ~O.del(1,1)
   || _ret.VALUE:=null;
      _ret.INFO:='Nie udało się usunąć storna listy płac.'
   || _ret.INFO:='Usunięto storno listy płac.'
   ?};
   LS.trig_on('*','*')
?};

_epilog(_ret.VALUE<>null,_ret.INFO)


\storno_usun_ls
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Usuwa storno listy.
::   WE: _a [_O] - wskazanie wiersza w tabeli O
::       _b [_P] - wskazanie wiersza w tabeli P
::   WY: wynik operacji zgodny z ext_val/#object.fml
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_hdr:=_a;
_emp:=_b;
_slt:='';

_prolog:=$(
   'P.cntx_psh(); '
   'O.cntx_psh(); '
   'LS.cntx_psh(); '
   'O_P.cntx_psh(); '
   'O_O.cntx_psh(); '
   'OSOBA.cntx_psh(); '
   '%1'
   '~~'[
      {? do_state()=0
      || 'do(); '
      || ''
      ?}
]);
_epilog:=$(
   'OSOBA.cntx_pop(); '
   'O_O.cntx_pop(); '
   'O_P.cntx_pop(); '
   'LS.cntx_pop(); '
   'O.cntx_pop(); '
   'P.cntx_pop(); '
   '%1'
   'exec(\'ext_val\',\'#object\',_a,_b)'[
      {? do_state()=0
      || '{? _a<=0 '
         '|| undo() '
         '?}; '
         'end(); '
      || ''
      ?}
]);

_prolog();

{? ~O.seek(_hdr,,1)
:: brak dostępu do listy płac
|| return(_epilog(0,exec('err_rec_acc','#message',_hdr)))
|? ~exec('czy_storno_o','lista_pow',_hdr)
|| _slt:=~-O.LT
|| {? (_ret:=exec('storno_szukaj','lista_pow',_hdr,'POD',1)).VALUE=null
::    brak powiązania storna z listą źródłową
   || return(_epilog(0,_ret.INFO))
   ?};
   _slt:=~-O_O.NAD().LT;
   obj_del(_ret)
?};

{? (_ret:=exec('storno_ustal_o','lista_pow',_hdr)).VALUE=null
:: brak powiązania listy płac z jej listą storno
|| return(_epilog(0,_ret.INFO))
|| _hdr:=_ret.VALUE;
   obj_del(_ret)
?};

{? ~O.seek(_hdr)
:: brak dostępu do listy storno
|| return(_epilog(0,exec('err_rec_acc','#message',_hdr)))
?};

LS.use(-O.LT);
{? ~exec('del_ndx','#table',LS,'LISTPRAC',_hdr,_emp)
|| return(_epilog(0,'Nie udało się usunąć storna %1 listy płac %2.'@[~-O.LT,_slt]))
?};

_epilog(1,
   {? exec('o_p_jest','ppl',_hdr,_emp)
   || O_P.del();
      'Dla pracownika %1 %2 usunięto storno %3 listy płac %4.'@[
         O_P.P().OSOBA().NAZWISKO,OSOBA.PIERWSZE,~-O.LT,_slt
      ]
   || 'Usunięto storno %1 listy płac %2.'@[~-O.LT,_slt]
   ?}
)


\storno_utworz_ls
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Dodaje storno listy.
::   WE: _a [_O] - wskazanie wiersza w tabeli O
::       _b [_P] - wskazanie wiersza w tabeli P
::   WY: wynik operacji zgodny z ext_val/#object.fml
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_hdr:=_a;
_emp:=_b;
_slt:='';

{? do_state()=2
|| return(exec('ext_val','#object',0,'Transakcja została zerwana.'@))
?};

_prolog:=$(
   'P.cntx_psh(); '
   'P.clear(); '
   'O.cntx_psh(); '
   'O.clear(); '
   'R.cntx_psh(); '
   'R.clear(); '
   'KK.cntx_psh(); '
   'KK.clear(); '
   'LS.cntx_psh(); '
   'O_O.cntx_psh(); '
   'OSOBA.cntx_psh(); '
   '%1'
   '~~'[
      {? do_state()=0
      || 'do(); '
      || ''
      ?}
]);
_epilog:=$(
   'OSOBA.cntx_pop(); '
   'O_O.cntx_pop(); '
   'LS.cntx_pop(); '
   'KK.cntx_pop(); '
   'R.cntx_pop(); '
   'O.cntx_pop(); '
   'P.cntx_pop(); '
   '%1'
   'exec(\'ext_val\',\'#object\',_a,_b)'[
      {? do_state()=0
      || '{? _a<=0 '
         '|| undo() '
         '?}; '
         'end(); '
      || ''
      ?}
]);

_prolog();

{? (_ret:=exec('storno_ustal_o','lista_pow',_hdr,1)).VALUE=null
:: brak powiązania listy płac z jej listą storno
|| return(_epilog(0,_ret.INFO))
|| _src:=O_O.NAD;
   _dst:=O_O.POD;
   obj_del(_ret)
?};

{? ~O.seek(_src)
:: brak dostępu do listy źródłowej
|| return(_epilog(0,exec('err_rec_acc','#message',_src)))
|| _slt:=~-O.LT
?};

LS.use(-O.LT);
:: pobierz dane źródłowe
_SRC:=sql('select * from LS where LS.O=:_a and LS.P=:_b',_src,_emp);
{? type_of(_SRC)<>type_of(SYSLOG)
:: nie udało się pobrać składników listy źródłowej
|| return(_epilog(0,'Uzyskanie danych źródłowych nie powiodło się.'@))
?};

{? ~P.seek(_emp)
:: brak dostępu do współpracownika
|| return(_epilog(0,exec('err_rec_acc','#message',_emp)))

|? ~O.seek(_dst)
:: brak dostępu do listy docelowej
|| return(_epilog(0,exec('err_rec_acc','#message',_dst)))
?};

LS.use(-O.LT);
:: usuń istniejące storno
{? ~exec('del_ndx','#table',LS,'LISTPRAC',_dst,_emp)
|| return(_epilog(0,'Usunięcie istniejącego storno nie powiodło się.'@))
?};

_dlt:=~-O.LT;
_est:=exec('P','#to_string');

LS.index('LISTPRAC');
LS.prefix(_dst,_emp);
:: kopiuj składniki
_loop:=_SRC.first();
{!
|? _loop
|! {? ~R.seek(_SRC.RB)
::    brak dostępu do opisu składnika
   || return(_epilog(0,exec('err_rec_acc','#message',_SRC.RB)))

   |? _SRC.KK<>'' & ~KK.seek(_SRC.KK)
::    brak dostępu do konta kosztów
   || return(_epilog(0,exec('err_rec_acc','#message',_SRC.KK)))
   ?};

   LS.blank();
   LS.O:=_dst;
   LS.P:=_emp;
   LS.RB:=R.ref();
   LS.KK:=
      {? _SRC.KK<>''
      || KK.ref()
      || null
      ?};
   LS.KW:=-_SRC.KW;
   {? ~LS.add()
::    błąd dołączenia składnika do storno listy
   || return(_epilog(0,'Dołączenie składnika listy %1 nie powiodło się.'@[~-O.LT]))
   ?};

   _loop:=_SRC.next()
!};

_epilog(1,'Dla pracownika %1 %2 utworzono/zaktualizowano storno %3 listy płac %4.'@[
      P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,~-O.LT,_slt
])


\storno_zamknij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Zamykanie storna listy płac.
::   WE: _a [_O] - wskazanie wiersza w tabeli O
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_hdr:=_a;

{? exec('czy_storno_o','lista_pow',_hdr)
:: zamykanie storna listy płac
|| O_O.cntx_psh();
   O_O.index('POD');
   O_O.prefix(_hdr);
   {? O_O.find_key(exec('kod_storno','ext_slo'),)
::    znaleziono informacje o liście źródłowej
   || O_P.cntx_psh();
      O_P.index('UNIQUE');
      O_P.prefix(O_O.POD);
      {? O_P.first()
::       są rozliczenia
      || P.cntx_psh();
         P.prefix();
         O.cntx_psh();
         O.prefix();
         O_O.NAD();
         FUNKCJE.OTWOLIST();
::       usuwaj dane powstałe w wyniku naliczenia listy źródłowej
::       dla wszystkich pracowników, których wynagrodzenie ma storno
         _loop:=1;
         {!
         |? _loop
         |! {? O_P.LS='T'
            || O_P.P();
::             pozostaw tylko składniki
               exec('usun_dane','lista_plac',1)
            ?};
            _loop:=O_P.next()
         !};
         O.cntx_pop();
         P.cntx_pop();
         FUNKCJE.OTWOLIST()
      ?};
      O_P.cntx_pop()
   ?};
   O_O.cntx_pop()
?};
~~

:Sign Version 2.0 jowisz:1048 2021/04/09 15:26:28 4bc2c2ba61e4a0e0fe5c00f5fb4d1dab9b5b70835072478e0b47cbe99633c571bad8e41c7a0567d5a7ebdcf8b1aee614d51c952d15d674f9cc662357fccea69faebf277dd51722c5e67f1d124c5214f083caedd21a33c25524545443751db3cee58373413350e74f2acf64449d1b581ac6b4ceee331e4f7a3696005e8accd958
