:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: homebank.fml [1998]
:: Utworzony: 1998
:: Autor: DPU
::======================================================================================================================
:: Zawartość: Formuły pomocniczne obsługujące tabele banków i bankowosc elektroniczną
::======================================================================================================================


\pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MAKO [2010]
:: OPIS: Menu HOMEBANK -> Definicje -> Standardy PL
::----------------------------------------------------------------------------------------------------------------------
PL.select()


\pled
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: Wyswietlanie okienka z kodami znakow
::----------------------------------------------------------------------------------------------------------------------
{? PL.edit() || PL.put() ?}


\m_formpl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??
:: OPIS: Wyswietla naglowki specyfikacji
::----------------------------------------------------------------------------------------------------------------------
HBPKI.index('HBPKILP');
HBPKI.prefix();
HBPKI.win_sel('HBPKIWER');
HBPKI.select()


\nr_hbpki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula na wartosc poczatkowa pola HBPKI.NR
::  OLD: \nr_hbpki/war_tech
::----------------------------------------------------------------------------------------------------------------------
{? HBPKI.size() <>0 || Nr || 1 ?}


\przeltxt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula na wartosc poczatkowa pola HBPKI.PD
::  OLD: \przeltxt/war_tech
::----------------------------------------------------------------------------------------------------------------------
'przelewy.txt'


\hbpki_pli_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Przed redakcja pol tabeli HBPKI zwiazanych z wymiana danych przez plik
::----------------------------------------------------------------------------------------------------------------------
1


\hbfml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula na wartosc poczatkowa pola HBPKI.FML
::  OLD: \hbfml/war_tech
::----------------------------------------------------------------------------------------------------------------------
'hb.fml'


\ae_rodzs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Po redagowaniu pola RODZ tabeli HBPKI. Sprawdza poprawnosc.
::----------------------------------------------------------------------------------------------------------------------
{? fld()<>'E' & fld()<>'I' & fld()<>'K' & fld()<>'S'
|| FUN.info('Błędna wartość pola.\nWartości dopuszczalne: E, I, K, S.'@); 0
|| {? fld()='E' || HBPKI.ERFILE:='N' ?}; 1
?}


\beerfile
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Przed redakcja pola HBPKI.ERFILE
::----------------------------------------------------------------------------------------------------------------------
{? HBPKI.RODZ='E' || 0 || 1 ?}


\hbpki_typ_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Przed redakcja pola HBPKI.TYP
::----------------------------------------------------------------------------------------------------------------------
{? HBPKI.RODZ='E' || 1 || 0 ?}


\hbpki_wbs_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Przed redakcja pola HBPKI.WBS_QUER
::----------------------------------------------------------------------------------------------------------------------
{? HBPKI.KOM='W' || 1 || 0 ?}


\specyf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [??]
:: OPIS: Obsługa Wybierz z okna typów plików, wyświetlenie treści specyfikacji.
::----------------------------------------------------------------------------------------------------------------------
_tyt:=' '+@.HBPKI.KDB().NB;
HBP.hdr_sel(_tyt);
HBP.prefix();
HBP.index('HBNAZWA');
HBP.prefix(_a);
HBP.select();
:: formuła sprawdza zawartość pól Formuła w tabeli HBP
{? HBP.first()
|| {!
   |? _z:=0;
      HBP.memo_get(,'FML');
      {? HBP.KP=null
      || _txt:=HBP.memo_txt(0,1,'FML');
         {? +_txt=0
         || FUN.info('Pole Formuła z pozycji nr %1 specyfikacji,\nnie zostało wypełnione.'@[$HBP.NR]); 1
         || _zmienna:=_txt;
            {!
            |? {? (1+_zmienna)<>'\n' || _z:=1 ?};
               _zmienna:=1-_zmienna;
               +_zmienna
            !};
            {? ~_z
            || FUN.info('Pole Formuła z pozycji nr %1 specyfikacji,\nnie zostało wypełnione.'@[$HBP.NR])
            ?};
            1
         ?}
      ?};
      HBP.next()
   !}
?}


\nrpki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula przed akcja dolacz w okienku wertowania HBPKIWER tabeli HBPKI
::  OLD: \nrpki/war_tech
::----------------------------------------------------------------------------------------------------------------------
Nr:=HBPKI.NR;1


\chkrchbp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ?? [??]
:: OPIS: Funkcja sprawdza poprawność wypełnienia rekordu bazy HBP
::----------------------------------------------------------------------------------------------------------------------
{? HBP.KP=null & ROZNE.RODZ_HBP='Z'
|| {? HBP.DL=''
   || __CHK.record(HBP,,'DL','POL')
   |? HBP.DL='x'
   || {? HBP.POL<>'' || HBP.POL:='' ?};
      1
   || {? HBP.POL=''
      || FUN.info('Pole Położenie powinno być wypełnione.'@);
         'POL'
      || exec('chkpopol','homebank')
      ?}
   ?}
|? HBP.KP=null & ROZNE.RODZ_HBP='S'
|| __CHK.record(HBP,,'KP')
|| {? HBP.DL<>'' | HBP.POL<>''
   || FUN.info('Dla pozycji specyfikacji z wypełnionym polem Kod\n'
               'pola Długość i Położenie powinny być puste.\n System skoryguje '
               'ten problem automatycznie.'@)
   ?};
   HBP.DL:='';
   HBP.POL:='';
   1
?}


\f3_hbp_pol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: F3 w polu Położenie w trakcie edycji pozycji specyfikacji bankowej
::----------------------------------------------------------------------------------------------------------------------
_pol:=tab_tmp(,'POL','STRING[2]','Typ położenia',
               'WYJ','STRING[100]','Wyjaśnienie');
_pol.POL:='<0';
_pol.WYJ:=' wyrównanie wartości pola do lewej i uzupełnienie niewykorzystanego miejsca zerami';
_pol.add();
_pol.POL:='<_';
_pol.WYJ:='Wyrównanie wartości pola do lewej i uzupełnienie niewykorzystanego miejsca znakami odstępu';
_pol.add();
_pol.POL:='>0';
_pol.WYJ:='wyrównanie wartości pola do prawej i uzupełnienie niewykorzystanego miejsca zerami';
_pol.add();
_pol.POL:='>_';
_pol.WYJ:='wyrównanie wartości pola do prawej i uzupełnienie niewykorzystanego miejsca znakami odstępu';
_pol.add();
_win:=_pol.mk_sel('Położenie'@,,1);
_pol.win_act(_win,,'Formuła','Wybierz'@@,,,,"sel_exit()",1);
_pol.win_sel(_win);
{? _pol.select() || HBP.POL:=_pol.POL ?}


\chkpopol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula po redakcja pola HBP.POL
::  OLD: \chkpopol/war_tech
::----------------------------------------------------------------------------------------------------------------------
_z:='<0<_>0>_';
{? HBP.POL<>'' & HBP.KP().KD<>'x' & ~(_z*HBP.POL)
|| FUN.info('\nDozwolone postacie położenia: <0, <_, >0, >_.'@);
   0
|| 1
?}


\inc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [??]
:: OPIS: Dołączenie nowego rekordu i inkrementacja pól NR tabeli HBPKI lub HBP po dodaniu rekordu
::   WE: _a - akronim bazy
::----------------------------------------------------------------------------------------------------------------------
nazwa_bazy:=_a;
_y_hbp:='_zm:='''+_a+''';
   '+_a+'.blank(); {? _zm=''HBPKI'' || RACHBANK.KB_1R:=\'\' ?};
   {! |?
   '+_a+'.hdr_edit({?_zm=''HBP'' || ''Pozycja specyfikacji'' || ''Specyfikacja'' ?});
   {? _zm=''HBP'' || HBP.memo_set(,\'FML\') ?};
   B.win_dict(\'SLO1\');
   {? '+_a+'.edit("{?nazwa_bazy=''HBP''|| exec(''chkrchbp'',\'homebank\')|| exec(\'chk_spec\',\'homebank\') ?}")
   || '+_a+'.cntx_psh();
      {? '+_a+'.last() || {!|? {? '+_a+'.NR>=Nr || '+_a+'.NR+=1; '+_a+'.put(); '+_a+'.prev() ?} !} ?};
      '+_a+'.cntx_pop();
      {? cur_tab()=HBPKI & '+_a+'.RODZ=''E'' & '+_a+'.AKT=1
      || _akt:='+_a+'.AKT;
         _wal:='+_a+'.WAL;
         '+_a+'.cntx_psh();
         '+_a+'.index(''HBPKITP'');
         '+_a+'.prefix(1,'+_a+'.RODZ,'+_a+'.KDB().NUMER,'+_a+'.TYP);
         {? '+_a+'.first()
         || {! |?
               {? '+_a+'.WAL=_wal
               || FUN.emsg(''W systemie istnieje już aktywna specyfikacja\n''
                       +''dla tego banku, rodzaju specyfikacji, typu przelewu\n i znacznika wielowalutowości.\n''
                       +''Nowa specyfikacja zostanie zapisana jako nieaktywna.'');
                  _akt:=0
               || _akt:=1
               ?};
               _akt=1 & '+_a+'.next()
            !}
         ?};
         '+_a+'.cntx_pop();
         '+_a+'.AKT:=_akt
      ?};
      {? '+_a+'.add(1)
      || ''--------inkrementacja---------'';
         {? _zm=''HBP'' || HBP.memo_put(,\'FML\') ?};
         Nr:='+_a+'.NR;
         '+_a+'.blank(); 1
      || FUN.emsg(\'Zapis definicji formatu pliku nie powiódł się.\'
                 +\'\\nPrawdopodobnie typ pliku o podanej nazwie już istnieje\'
                 +\'\\ndla wskazanego banku.\');
         exec(\'dec\',\'homebank\',Nr,_zm); '+_a+'.blank(); 1
      ?}
   || 0
   ?}
   !};1';
($_y_hbp)()


\pop_hbpki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula po oknie redakcyjnym na Popraw w tabeli specyfikacji
::       z kontrola unikalnosci aktywnych specyfikacji.
::----------------------------------------------------------------------------------------------------------------------
HBPKI.hdr_edit('Specyfikacja: %1'@[HBPKI.TPK]);
{? HBPKI.edit()
|| {? HBPKI.RODZ='E' & HBPKI.AKT
   || _akt:=HBPKI.AKT;
      _ref:=HBPKI.ref();
      _wal:=HBPKI.WAL;
      _sepa:={? HBPKI.TPK*'SEPA' || 1 || 0 ?};
      HBPKI.cntx_psh();
      HBPKI.index('HBPKITP');
      HBPKI.prefix(1,HBPKI.RODZ,HBPKI.KDB().NUMER,HBPKI.TYP);
      {? HBPKI.first()
      || {! |?
               _tmp_sepa:={? HBPKI.TPK*'SEPA' || 1 || 0 ?};
               {? HBPKI.ref()<>_ref & (HBPKI.WAL=_wal & _sepa=_tmp_sepa)
               || FUN.emsg('W systemie istnieje już aktywna specyfikacja\n'
                           'dla tego banku, rodzaju specyfikacji, typu przelewu,\n'
                           'znacznika wielowalutowości i typu przelewu walutowego.\n'
                           'Specyfikacja zostanie zapisana jako nieaktywna.'@);
                  _akt:=0
               || _akt:=1
               ?};
               _akt & HBPKI.next()
         !}
      ?};
      HBPKI.cntx_pop();
      HBPKI.AKT:=_akt
   ?};
   HBPKI.put()
?}


\ad_hbpki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Usuwanie specyfikacji
::----------------------------------------------------------------------------------------------------------------------
_wyb:={? HBPKI.KDB().BANORG<>null
      || FUN.choice('Usunąć specyfikację?'@,,'Wszystkie oddziały banku'@,'wskazany Oddział'@)
      || {? FUN.ask('Usunąć specyfikację?'@)
         || 2
         || 0
         ?}
      ?};

{? _wyb=1
|| {? FUN.ask('Potwierdzenie operacji spowoduje usunięcie wszystkich specyfikacji typu\n %1 \n'
              'dla wszystkich oddziałów banku\n %2 \n'
              'przypisanych do organizacji.\n'
              'Kontynuować?'@[HBPKI.TPK,HBPKI.KDB().BANORG().NAZ])
   || _borg:=HBPKI.KDB().BANORG;
      _tpk:=HBPKI.TPK;
      B.cntx_psh();
      B.index('ORGBANK');
      B.prefix(_borg,'B');
      {? B.first
      || {!
         |?
            HBPKI.cntx_psh();
            HBPKI.index('HBPKIBT');
            HBPKI.prefix(B.ref,_tpk);
            {? HBPKI.first
            || _vnr:=HBPKI.NR;
               HBP.index('HBNAZWA'); HBP.prefix(#HBPKI.ref());
               {? HBP.first()
               || {! |? HBP.del() !}
               ?};
               HBPKI.del();
               exec('f_renum','homebank')
            ?};
            HBPKI.cntx_pop();
            B.next
         !}
      ?};
      B.cntx_pop()
   ?}

|? _wyb=2
|| _vnr:=HBPKI.NR;
   HBP.index('HBNAZWA'); HBP.prefix(#HBPKI.ref());
   {? HBP.first()
   || {! |? HBP.del() !}
   ?};
   HBPKI.del();
   exec('dec','homebank',_vnr,'HBPKI')
?}


\dec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ?? [??]
:: OPIS: Dekrementacja pól NR tabeli HBPKI i HBP po usunięciu rekordu
::   WE: _a -
::       _b -
::----------------------------------------------------------------------------------------------------------------------
_y_hbp:=_b+'.cntx_psh();
   {? '+_b+'.first()
   || {!
      |? {? '+_b+'.NR >'+$_a+' || '+_b+'.NR-=1; '+_b+'.put() ?};
         '+_b+'.next()
      !}
   ?}; '+_b+'.cntx_pop(); 1';
($_y_hbp)()


\kopia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ?? [??]
:: OPIS: Kopiowanie specyfikacji bankowej
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Specyfikacja banku %1 zostanie zamazana! Kontynuować?'@[HBPKI.KDB().NB])
|| _b1:=HBPKI.ref();'ref specyfikacji do której kopiujemy';
   undefine();
   define('spec',1,
          'Kopiować specyfikację nr: '@,
          'Wybór numeru specyfikacji do skopiowania'@,,3);
   {? def_edit("{? DEFINE.spec=HBPKI.NR | DEFINE.spec<1 | DEFINE.spec>HBPKI.size()
                || FUN.info('Błędny parametr.'@); 0
                || 1
                ?}",'Kopiowanie specyfikacji'@)
   || HBPKI.index('HBPKILP');
      HBPKI.prefix(DEFINE.spec);
      HBPKI.first();
      _b2:=HBPKI.ref();'ref specyfikacji z której kopiujemy';
      HBPKI.prefix();
      'kasowanie specyfikacji na którą kopiujemy';
      HBP.index('HBNAZWA');
      HBP.prefix(_b1);
      {? HBP.first() || {! |? HBP.del() !} ?};
      echo('Trwa kopiowanie specyfikacji...'@);
      'kopiowanie specyfikacji';
      HBP.prefix();
      HBP.index('HBNAZWA');
      HBP.prefix(_b2);
      _b3:=HBP.size();'liczba rekordów do skopiowania';
      {! _b4:=1.._b3
      |! HBP.prefix(_b2,_b4);
         HBP.first();
         HBP.RIDPL:=_b1;
         HBP.memo_get(,'FML');
         HBP.prefix(_b1);
         HBP.add();
         HBP.memo_put(,'FML')
      !}
   ?};
   echo()
?}


\cr_tt_rs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Tworzy i wypelnia tabele rodzajow slownikow bankow do obslugi platnosci elektronicznych
::  OLD: \cr_tt_rs/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
TT_SELRS:=tab_tmp(1,'RODZSL','STRING[20]','Kod słownika','ORODZSL','STRING[50]','Rodzaj słownika');
{? _a='FI' | _a='HB'
|| TT_SELRS.RODZSL:='IMP_WYC_BAN';
   TT_SELRS.ORODZSL:='Typy transakcji na wyciągach bankowych';
   TT_SELRS.add()
?};
{? _a='FE' | _a='HB'
|| TT_SELRS.RODZSL:='KODY_STATS';
   TT_SELRS.ORODZSL:='Kody statystyczne dla przelewów walutowych';
   TT_SELRS.add();
   TT_SELRS.RODZSL:='TRYBY_PRZ';
   TT_SELRS.ORODZSL:='Tryb przetwarzania';
   TT_SELRS.add()
?}


\selslb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Wyswietla okienko slownikow bankow do obslugi platnosci elektronicznych
::   WE: _a - miejsce wywołania
::  OLD: \selslb/skid_pel
::----------------------------------------------------------------------------------------------------------------------
_tx:='';
_patt:=TYPYTRAN.win_patt('?');
{? _=0 | _a<>'HB'
|| _v:=ROZRACH.BANK
|? _a='HB'
|| _v:=ROZNE.BBANK:=HBPKI.KDB
?};
TYPYTRAN.index('TYP');
TYPYTRAN.prefix(ROZNE.RODZSL,_v);
{? ROZNE.RODZSL='IMP_WYC_BAN'
|| TYPYTRAN.win_edit('RED_RODZ');
   TYPYTRAN.win_sel('WER');
   _tx:='Typy transakcji'
|| TYPYTRAN.win_edit();
   TYPYTRAN.win_patt();
   TYPYTRAN.win_sel('WER2');
   {? TT_SELRS.find_key(ROZNE.RODZSL) || _tx:=TT_SELRS.ORODZSL ?}
?};
B.clear();
{? B.seek(_v)
|| TYPYTRAN.hdr_sel();
   TYPYTRAN.hdr_sel(B.NB+' - '+_tx)
?};
TYPYTRAN.select();
TYPYTRAN.win_patt(_patt);
TYPYTRAN.win_edit()


\f3rodzsl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Wyswietla okienko slownikow bankow do obslugi platnosci elektronicznych
::   WY: 1 - wskazano rekord
::       0 - anulowano
::  OLD: \f3rodzsl/skid_pel
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_wsel:=TT_SELRS.mk_sel('Słowniki banków'@,,0,'sel_bansl');
TT_SELRS.win_fld(_wsel,,'RODZSL',,,20,,,,,'Kod słownika'@);
TT_SELRS.win_fld(_wsel,,'ORODZSL',,,50,,,,,'Rodzaj słownika'@);
TT_SELRS.win_act(_wsel,,'Formuła','Wybierz'@@,,,,"sel_exit()",1);
TT_SELRS.win_sel(_wsel);
TT_SELRS.find_key(ROZNE.RODZSL);
{? TT_SELRS.select(,1)
|| ROZNE.RODZSL:=TT_SELRS.RODZSL;
   _wyn:=1
?};
_wyn


\dvrodzsl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Wartosc domyslna dla pola TYPYTRAN.RODZSL (FK, HB)
::  OLD: \dvrodzsl/skid_pel
::----------------------------------------------------------------------------------------------------------------------
ROZNE.RODZSL


\typytran
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Wyswietlenie slownika banku
::   WE: _a: miejsce wywolania: 'FE' - FK eksport, 'FI' - FK import', 'HB' - homebank
::  OLD: \typytran/skid_pel
::----------------------------------------------------------------------------------------------------------------------
B.win_dict('SLO1');
ROZNE.RODZSL:='';
{? _a='FI' || ROZNE.RODZSL:='IMP_WYC_BAN' ?};
exec('cr_tt_rs','homebank',_a);
{? _a<>'HB'
|| {? +ROZNE.RODZSL
:: wejscie z poziomu wyciagow bankowych
   || ROZRACH.win_edit('TTRB');
      ROZRACH.BANK:=ROZNE.BBANK:=PW.BL;
      ROZRACH.hdr_edit('Słownik typów transakcji'@);
      exec('selslb','homebank')
   ?}
|? _a='HB'
|| {!
   |? _dalej:=exec('f3rodzsl','homebank') & +ROZNE.RODZSL;
      {? _dalej
      || exec('selslb','homebank',_a)
      ?};
      _dalej
   !}
?};
VAR_DEL.delete('TT_SELRS');
1


\hdrpkied
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula przed akcja wyswietl w okienku wertowania HBPKIWER tabeli HBPKI
::  OLD: \hdrpkied/war_tech
::----------------------------------------------------------------------------------------------------------------------
HBPKI.hdr_edit('Zawartość bieżącego rekordu'@);
HBPKI.display()


\chk_spec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Rekord po w okienku naglowkow specyfikacji
::----------------------------------------------------------------------------------------------------------------------
{? HBPKI.RODZ='K'
|| __CHK.record(HBPKI,,'KDB','TPK','RODZ','PL')
|| __CHK.record(HBPKI,,'KDB','TPK','PD','RODZ','PL')
?}


\adddown1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: 'obsługa przed dodaj (strzałka w dół) w bazie HBPKI i HBPLIK';
::   WE:
::----------------------------------------------------------------------------------------------------------------------
{? _zmienna:=_b+'.size<>0';($_zmienna)()
 || {? FUN.ask('Dodać nowy wiersz?'@)=1
     || {? _b='HBP' || HBP.memo_set(,'FML') ?}; 1
     || 0
    ?}
 || 1
?}


\adddown2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Obsługa po dodaj (strzałka w dół) w bazie HBPKI i HBP
::   WE: _a - nazwa bazy
::----------------------------------------------------------------------------------------------------------------------
nazwa_bazy:=_a;
{? _a='HBP'
|| {! |? Nr:=HBP.NR+1;
      HBP.blank();
      HBP.memo_set(,'FML');
      HBP.hdr_edit('Format pliku'@);
      B.win_dict('SLO1');
      {? HBP.edit("exec('chkrchbp','homebank')")
      || {? HBP.add(1)
         || HBP.memo_put(,'FML')
         || FUN.emsg('Zapis definicji formatu pliku nie powiódł się.'
                     '\nPrawdopodobnie typ pliku o podanej nazwie już istnieje'
                     '\ndla wskazanego banku.'@)
         ?}
      || 0
      ?}
   !}
|? _a='HBPKI'
|| {! |? Nr:=HBPKI.NR+1;
      HBPKI.blank();
      HBPKI.hdr_edit('Format pliku'@);
      B.win_dict('SLO1');
      {? HBPKI.edit("exec('chk_spec','homebank')")
      || {? ~HBPKI.add(1)
         || FUN.emsg('Zapis definicji formatu pliku nie powiódł się.'
                     '\nPrawdopodobnie typ pliku o podanej nazwie już istnieje'
                     '\ndla wskazanego banku.'@)
         ?}
      || 0
      ?}
   !}
?}


\spc_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009+]
:: OPIS: Eksport pojedynczej specyfikacji
::   WE: _a - pth
::       _b - czy uruchamiane na serwerze
::  OLD: \spc_exp/impexp.fml
::----------------------------------------------------------------------------------------------------------------------
_separ:='@';
_pth:={? var_pres('_a')=type_of('') || _a || '' ?};
_slash:=exec('sep','#file',1);
{? _pth <> ''
|| {? +_slash
   || _file:={? var_pres('_b') & _b
             || _pth+_slash+HBPKI.KDB().NUMER+'_'+STR.maz2nop(HBPKI.TPK)+'.fsp'
             || '@'+_pth+_slash+HBPKI.KDB().NUMER+'_'+STR.maz2nop(HBPKI.TPK)+'.fsp'
             ?}
   || _file:=''
   ?}
||
   _file:={? var_pres('__bgexp')=type_of('')
          || {? +_slash
             || __bgexp+_slash+HBPKI.KDB().NUMER+'_'+STR.maz2nop(HBPKI.TPK)+'.fsp'
             || ''
             ?}
          || __dir_controling:=fmk_tmp_dir(0);
             _path:=__dir_controling.get_path()+_slash+STR.gsub(STR.maz2nop(HBPKI.TPK),' ','_')+'.fsp';
             _path
          ?}
?};
{? _file<>'' & _file<>'@'
|| _content:='';
   _hfile:=fopen(_file,'uw!');
   {? _hfile<>0
   || _line:='[HEADER]';
      _content+=_line+'\n';

      _line:=$HBPKI.NR+_separ+HBPKI.KDB().NB+_separ+HBPKI.KDB().NUMER+_separ;
      _line+=HBPKI.TPK+_separ+HBPKI.PD+_separ+$HBPKI.LR+_separ;
      _line+=HBPKI.PL().KDPL+_separ+HBPKI.PL().NPL+_separ+HBPKI.RODZ+_separ;
      _line+=HBPKI.FILELOC+_separ+HBPKI.WAL+_separ+HBPKI.ERFILE+_separ+HBPKI.ALLFILES+_separ;
      _line+=$HBPKI.TYP+_separ+$HBPKI.AKT+_separ;
      _line+=HBPKI.KOM+_separ+HBPKI.SZABLON+_separ+HBPKI.FORMULA+_separ;
      _line+=HBPKI.ADRES+_separ+HBPKI.PORT;
      _content+=_line+'\n';

      _line:='[ENCODING]';
      _content+=_line+'\n';

      _line:=HBPKI.PL().KDPL+_separ+HBPKI.PL().NPL+_separ;
      _line+=$HBPKI.PL().AD+_separ+$HBPKI.PL().CD+_separ+$HBPKI.PL().ED+_separ+$HBPKI.PL().LD+_separ;
      _line+=$HBPKI.PL().ND+_separ+$HBPKI.PL().OD+_separ+$HBPKI.PL().SD+_separ+$HBPKI.PL().ZID+_separ;
      _line+=$HBPKI.PL().ZD+_separ+$HBPKI.PL().AM+_separ+$HBPKI.PL().CM+_separ+$HBPKI.PL().EM+_separ;
      _line+=$HBPKI.PL().LM+_separ+$HBPKI.PL().NM+_separ+$HBPKI.PL().OM+_separ+$HBPKI.PL().SM+_separ;
      _line+=$HBPKI.PL().ZIM+_separ+$HBPKI.PL().ZM;
      _content+=_line+'\n';

      _line:='[BODY]';
      _content+=_line+'\n';

      HBP.index('HBNAZWA'); HBP.prefix(HBPKI.ref());
      {? HBP.first()
      || {! |?
            _line:='<record>\n'+$HBP.NR+_separ+HBP.NP+_separ+HBP.KP().KD+_separ+HBP.DL+_separ+HBP.POL;
            _content+=_line+'\n';
            _line:='<code>';
            _content+=_line+'\n';
            _ml:=HBP.memo_txt(0,1,'FML');
            {? _ml<>'' || _content+=_ml+'\n' ?};
            _line:='<endcode>\n'+'<endrecord>';
            _content+=_line+'\n';
            HBP.next()
         !}
      ?};
:: ujednolicenie znaków końca wiersza - unix
      _content:=gsub(_content,%13+%10,'\n');

      fwrite(_hfile,_content);
      fclose(_hfile);
      {? var_pres('__bgexp')=type_of('')
      || __msgok+=1
      || {? _pth='' || FUN.info('Specyfikacja: %1 \nzostała wyeksportowana do pliku:\n%2'@[HBPKI.TPK,STR.w952maz(_file)]) ?}
      ?}
   || {? var_pres('__bgexp')=type_of('')
      || __msgerr+=1
      || {? _pth='' || FUN.emsg('Błąd przy próbie zapisywania pliku:\n%1'@[STR.w952maz(_file)]) ?}
      ?}
   ?}
?};
{? _pth='' & var_pres('__bgexp')<>type_of('')
|| dlg_save(_file,0)
?};
VAR_DEL.delete('__dir_controling')


\bg_spc_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2011]
:: OPIS: Grupa przed eksportem specyfikacji
::   WE: [_a] - interaktywnosc: 1 - sciezka zgodnie z pth, 0 lub brak - wskazana przez operatora
::  OLD: \bg_spc_exp/impexp
:: ~OST: INPTHDIR
::----------------------------------------------------------------------------------------------------------------------
{? _=0
|| _a:=exec('zapytaj','homebank');
   {? _a=-1 || return(0) ?}
?};
VAR_DEL.delete('__bgexp','__msgok','__msgerr');
__msgok:=__msgerr:=0;
__bgexp:={? _a
         || pth_dir('.fsp')
         || exec('MBJAR','#object');
            MBJAR.GetDir('Określ lokalizację eksportu'@, pth_dir('@'))
         ?};
{? +__bgexp & FUN.ask('Czy na pewno eksportować wskazane specyfikacje na serwer?\n'
                      'Istniejące pliki zostaną zastąpione nowymi.'@)
|| {? ~_a
   || __bgexp:='@'+__bgexp
   ?};
   1
|| 0
?}


\ag_spc_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2011]
:: OPIS: Grupa po eksporcie specyfikacji
::  OLD: \ag_spc_exp/impexp
::----------------------------------------------------------------------------------------------------------------------
{? __msgok | __msgerr
|| FUN.info({? __msgok ||'Wyeksportowano poprawnie %1 specyfikacji.'@[$__msgok] || '' ?}+
            {? __msgok & __msgerr || '\n' || '' ?}+
            {? __msgerr || '\nWystąpiły błędy przy eksporcie %1 specyfikacji.'@[$__msgerr] || '' ?}
            )
?};
VAR_DEL.delete('__bgexp','__msgok','__msgerr')


\spc_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009+]
:: OPIS: Import pojedynczej specyfikacji
::   WE:
::       [_a] - wskazanie na plik (nie podanie parametru - dzialanie interaktywne)
::       [_b] - interpretacja banku
::              0 lub brak - interaktywnie,
::              1 - zdefiniowany oddzial,
::              2 - wszystkie oddzialy tego samego banku wykorzystywane w systemie
::       [_c] - aktualizacja istniejacych wpisow
::              0 lub brak - interaktywnie
::              1 - aktualizacja
::              2 - bez aktualizacji istniejacych
::       [_d] - 1 - obsługa bez transakcji, 0 lub brak - z transakcjami
::       [_e] - 1 - wymusza zaakceptowanie nowej specyfikacji, 0 lub brak - brak wymuszania
::  OLD: \spc_imp/impexp.fml
::----------------------------------------------------------------------------------------------------------------------
{? _<4 || _d:=0 ?};
set_virt(STR,'trim',"
  {? 1 + .spl_str=.separ
  || .spl_str:=1-.spl_str
  ?}");
set_virt(STR,'split',"
  .spl_str:=_a;
  .separ:=1+_b;
  ~~",type_of(''), type_of(''));
VAR_DEL.delete('__msg','__aktu','__act');
__msg:='';
__aktu:=0; 'Aktualizacja istniejących informacji - domyslnie NIE';
__act:={? var_press('_e')>0 & _e=1 || 1 || 0 ?};
_separ:='@';
_dalej:=1;
_sep:=exec('sep','#file',1);
_file:={? _<1
       ||
          __dir_controling:=fmk_tmp_dir(0);
          _pth_file:=dlg_upload(__dir_controling.get_path(),0,'.fsp');
          __dir_controling.get_path()+_sep+_pth_file
       || _a
       ?};
{? _file<>'' & _file<>'@'
|| _pyt:=exec('akt_pyt','homebank',_<2 | ~_b,_<3 | ~_c);
   {? _pyt.OK
   || _odd:={? _<2 | ~_b
            || _pyt.ODD
            |? _b=2
            || 1
            || 0
            ?};
      __aktu:={? _<3 | ~_c
              || _pyt.REWRITE
              |? _c=1
              || 1
              || 0
              ?};
      {? _d=0 || do() ?};
      _dalej:=1; _ref:=null;
      _plik:=STR.w952maz(_file);
      _hfile:=fopen(_file,'ur',{? _file*'/' | _file*'\\' || 0 || 1 ?});
      {? _hfile=0 || __msg+='Błąd przy próbie odczytania pliku: %1\n'@[_plik]; _dalej:=0 ?};
      {? _dalej
      || VAR_DEL.delete('t_par'); t_par:=obj_new(50);
         _lineh:=fread(_hfile);
         _line:=fread(_hfile);
         _linee:=fread(_hfile);
         _enc:=fread(_hfile);
         _lineb:=fread(_hfile);
         {? form(_lineh)<>'[HEADER]' | form(_linee)<>'[ENCODING]' | form(_lineb)<>'[BODY]'
         || __msg+='Wskazany plik: %1 nie jest prawidłowym plikiem specyfikacji.\n'@[_plik];
            _dalej:=0
         ?}
      ?};
      {? _dalej
      || STR.split(_line,_separ);
         t_par[1]:=#(STR.get_word());'NR';
         t_par[2]:=form(STR.get_word());'KDB().NB';
         t_par[3]:=form(STR.get_word());'KDB().NUMER';
         t_par[4]:=form(STR.get_word());'TPK';
         t_par[5]:=form(STR.get_word());'PD';
         t_par[6]:=#form(STR.get_word());'LR';
         t_par[7]:=form(STR.get_word());'PL().KDPL';
         t_par[8]:=form(STR.get_word());'PL().NPL';
         t_par[9]:=form(STR.get_word());'RODZ';
         t_par[10]:=form(STR.get_word());'FILELOC';
         t_par[11]:=form(STR.get_word());'WAL';
         t_par[12]:=form(STR.get_word());'ERFILE';
         t_par[13]:=form(STR.get_word());'ALLFILES';
         t_par[14]:=form(STR.get_word());'TYP';
         t_par[15]:=#form(STR.get_word());'AKT'; {? __act=1 || t_par[15]:=1 ?};
         {? STR.next()
         || t_par[16]:=form(STR.get_word());'KOM';
            t_par[17]:=form(STR.get_word());'SZABLON';
            t_par[18]:=form(STR.get_word());'FORMULA';
            t_par[19]:=form(STR.get_word());'ADRES';
            t_par[20]:=form(STR.get_word());'PORT'
         || t_par[16]:='';'KOM';
            t_par[17]:='';'SZABLON';
            t_par[18]:='';'FORMULA';
            t_par[19]:='';'ADRES';
            t_par[20]:='';'PORT'
         ?}
      ?};
      {? _dalej
      || PL.cntx_psh();
         PL.index('KOD'); PL.prefix(t_par[7],t_par[8]);
         {? +t_par[7] & +t_par[8] & PL.first()
         || _pl:=PL.ref()
         || {? exec('add_pl','homebank',t_par[7],t_par[8],_enc,_separ)<>null
            || _pl:=PL.ref()
            || __msg+='W pliku specyfikacji podano standard PL, którego\nnie ma w bazie i nie można go dodać.\n'@;
               _dalej:=_pl:=0
            ?}
         ?};
         PL.cntx_pop()
      ?};
      {? _dalej
      || B.cntx_psh();
         B.index('BANKID');
         B.prefix(t_par[3]);
         _borg:={? B.first || B.BANORG || null ?};
         B.cntx_pop();
         SKID_RBK.cntx_psh();
         SKID_RBK.prefix();
         {? _odd & _borg
         || B.cntx_psh();
            B.index('ORGBANK');
            B.prefix(_borg,'B');
            {? B.first
            || _licz:=1;
               {!
               |?
                  SKID_RBK.index('BANK');
                  SKID_RBK.prefix(REF.INFO,B.ref());
                  {? SKID_RBK.first()
                  || {! |?
                        t_par[3]:=B.NUMER;
                        {? _licz=1 || _nrff:=B.NUMER ?};
                        B.cntx_psh();
                        B.index('BANKID'); B.prefix(t_par[3]);
                        _first:=0;
                        {? B.first()
                        || {! |?
                              {? B.NUMER=t_par[3] || _first:=1 ?};
                              _first=0 & B.next()
                           !}
                        ?};
                        {? _first
                        || _kdb:=B.ref()
                        || {? exec('add_b','homebank',t_par[2],t_par[3])<>null
                           || _kdb:=B.ref()
                           || __msg+='W pliku specyfikacji podano bank, którego\nnie ma w bazie banków i nie można go dodać.\n'@;
                              _dalej:=_kdb:=0
                           ?}
                        ?};
                        _dalej:=exec('spc_imp1','homebank',_dalej,B.ref,_pl,1);
                        {? _dalej &  var_pres('_dalej')<>type_of(0)
                        || {? _licz=1
                           || _hbpref:=exec('spc_imp2','homebank',_dalej,_hfile,_separ)
                           || {? _hbpref
                              || HBP.prefix();
                                 HBP.seek(_hbpref);
                                 HBP.cntx_psh();
                                 HBP.prefix(HBP.RIDPL);
                                 {? HBP.first
                                 || {!
                                    |? HBP.memo_get(,'FML');
                                       HBP.cntx_psh();
                                       HBP.prefix();
                                       HBP.RIDPL:=_dalej;
                                       _add:=HBP.add(1);
                                       {? _add || HBP.memo_put(,'FML') ?};
                                       HBP.cntx_pop();
                                       _add & HBP.next
                                    !}
                                 ?};
                                 HBP.cntx_pop()
                              ?}
                           ?};
                           _licz+=1
                        ?};
                        B.cntx_pop();
                        SKID_RBK.next()
                     !}
                  ?};
                  B.next
               !}
            ?};
            B.cntx_pop()
         ||
            B.index('BANKID'); B.prefix(t_par[3]);
            _first:=0;
            {? B.first()
            || {! |?
                  {? B.NUMER=t_par[3] || _first:=1 ?};
                  _first=0 & B.next()
               !}
            ?};
            {? _first
            || _kdb:=B.ref()
            || {? exec('add_b','homebank',t_par[2],t_par[3])<>null
               || _kdb:=B.ref()
               || __msg+='W pliku specyfikacji podano bank, którego\nnie ma w bazie banków i nie można go dodać.\n'@;
                  _dalej:=_kdb:=0
               ?}
            ?};
            _dalej:=exec('spc_imp1','homebank',_dalej,_kdb,_pl,0);
            {? _dalej
            || exec('spc_imp2','homebank',_dalej,_hfile,_separ)
            ?}
         ?};
         SKID_RBK.cntx_pop()
      ?};

      {? ~_dalej & _d=0 || undo() ?};
      {? _d=0 || end() ?};
      VAR_DEL.delete('t_par');
      {? _hfile || fclose(_hfile) ?};
      {? _=0
      || {? _dalej
         || exec('f_renum','homebank');
            FUN.info('Zakończono procedurę importu specyfikacji z pliku:\n %1.'@[_plik])
         || FUN.emsg(__msg)
         ?}
      || {? _dalej || exec('f_renum','homebank') ?}
      ?}
   ?}
?};

set_virt(STR,'trim',"
  {! |? 1 + .spl_str = .separ |!
  .spl_str:=1-.spl_str
  !}");
set_virt(STR,'split',"
  .spl_str:=_a;
  .separ:=' ';
  .trim();
~~",type_of(''), type_of(''));
VAR_DEL.delete('__msg','__aktu','__act');
VAR_DEL.delete('__dir_controling');
1


\add_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009+]
:: OPIS: Formula dodaje standard kodowania polskich znakow ze specyfikacji jesli brak takiego w bazie PL
::   WE: _a = kod standardu, _b = opis standardu, _c = wiersz z definicja standardu, _d = separator
::  OLD: \add_pl/impexp
::----------------------------------------------------------------------------------------------------------------------
PL.prefix();
PL.blank();
PL.KDPL:=_a;
PL.NPL:=_b;
STR.split(_c,_d);
STR.get_word(); STR.get_word();
PL.AD:=#STR.get_word();
PL.CD:=#STR.get_word();
PL.ED:=#STR.get_word();
PL.LD:=#STR.get_word();
PL.ND:=#STR.get_word();
PL.OD:=#STR.get_word();
PL.SD:=#STR.get_word();
PL.ZID:=#STR.get_word();
PL.ZD:=#STR.get_word();
PL.AM:=#STR.get_word();
PL.CM:=#STR.get_word();
PL.EM:=#STR.get_word();
PL.LM:=#STR.get_word();
PL.NM:=#STR.get_word();
PL.OM:=#STR.get_word();
PL.SM:=#STR.get_word();
PL.ZIM:=#STR.get_word();
PL.ZM:=#STR.get_word();
{? PL.add(1) || PL.ref() || null ?}


\add_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009+]
:: OPIS: Formula dodaje bank ze specyfikacji jesli brak takiego w bazie B
::   WE: _a = nazwa banku, _b = numer kierunkowy oddziału
::  OLD: \add_b/impexp
::----------------------------------------------------------------------------------------------------------------------
B.prefix();
B.blank();
B.NUMER:=_b;
B.NB:=_a;
B.KODISO:=XINFO.KRAJ;
{? B.add(1) || B.ref() || null ?}


\spc_imp1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2011]
:: OPIS: Wydzielona czesc kodu importu specyfikacji - naglowek specyfikacji
::  OLD: \spc_imp1/impexp
::----------------------------------------------------------------------------------------------------------------------
_dalej:=_a;
_kdb:=_b;
_pl:=_c;
_silent:=_d;
_akt:=t_par[15];
{? _dalej
|| _numer:=exec('spec_test','homebank',_kdb);
   {? _numer<>'' & _silent=0
   || __msg:='W systemie istnieje już specyfikacja o takiej samej nazwie:\n'
             '(%1)\ndla tego samego oddziału bankowego:\n(%2).\nImport niemożliwy.'@[t_par[4],_numer];
      _dalej:=0
   |? +_numer
   || _dalej:=0
   ?}
?};
::Sprawdzenie czy w systemie istnieje już aktywna specyfikacja dla tego banku, rodzaju specyfikacji,
::typu przelewu i znacznika wielowalutowości.Nowa specyfikacja zostanie zapisana jako nieaktywna.'
{? _dalej & _akt & __act=0
|| HBPKI.cntx_psh();
   HBPKI.index('HBPKITP');
   HBPKI.prefix(1,t_par[9],t_par[3],t_par[14]);
   {? HBPKI.first()
   || {!
      |? {? HBPKI.WAL=t_par[11]
         || _akt:=0
         ?};
         _akt=1 & HBPKI.next()
      !}
   ?};
   HBPKI.cntx_pop()
?};

{? _dalej
|| HBPKI.index('HBPKILP'); HBPKI.prefix();
   _lp:={? HBPKI.last() || HBPKI.NR+1 || 1 ?};
   HBPKI.NR:=_lp;
   HBPKI.KDB:=_kdb;
   HBPKI.TPK:=t_par[4];
   HBPKI.PD:=t_par[5];
   HBPKI.LR:=t_par[6];
   HBPKI.PL:=_pl;
   HBPKI.RODZ:=t_par[9];
   HBPKI.FILELOC:=t_par[10];
   HBPKI.WAL:=t_par[11];
   HBPKI.ERFILE:=t_par[12];
   HBPKI.ALLFILES:=t_par[13];
   HBPKI.TYP:=t_par[14];
   HBPKI.AKT:=_akt;
   {? t_par[16]<>'P' & t_par[16]<>'W' & cur_win()='HBPKIWER'
   || HBPKI.KOM:='P'
   || HBPKI.KOM:=t_par[16]
   ?};
   HBPKI.SZABLON:=t_par[17];
   HBPKI.FORMULA:=t_par[18];
   HBPKI.ADRES:=t_par[19];
   HBPKI.PORT:=t_par[20];
   _dalej:=HBPKI.add(1);
   {? ~_dalej
   || __msg+='Nieudane uzupełnienie bazy specyfikacji.\n'
   || _dalej:=HBPKI.ref()
   ?}
?};
{? _dalej || _dalej || _silent ?}


\spec_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009+]
:: OPIS: Formula testuje czy w systemie istnieje juz specyfikacja o takiej nazwie jak w pliku
::   WE: _a = ref banku
::   WY: <>'' (numer banku) = jest, '' - nie ma
::  OLD: \spc_test/impexp
::----------------------------------------------------------------------------------------------------------------------
_wy:='';
HBPKI.cntx_psh();
HBPKI.prefix();
{? HBPKI.find_tab(,'TPK',,'=',t_par[4],'KDB',,'=',_a)
|| {? var_pres('__aktu')=type_of(0) & __aktu
   || 'Usuwamy istniejaca specyfikacje celem aktualizacji';
      {? HBPKI.count
      || HBP.cntx_psh();
         HBP.index('HBNAZWA');
         HBP.prefix(HBPKI.ref);
         {? HBP.first
         || {!|? HBP.del !}
         ?};
         HBP.cntx_pop()
      ?};
      {? ~HBPKI.count
      || HBPKI.del
      ?}
   || _wy:=HBPKI.KDB().NUMER
   ?}
?};
HBPKI.cntx_pop();
_wy


\spc_imp2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2011]
:: OPIS: Wydzielona czesc kodu importu specyfikacji - pozycje specyfikacji
::   WE: _a - uchwyt do HBP.RIDPL
::        _b - uchwyt do pliku
::        _c - separator
::   WY:  _hbpref
::  OLD: \spc_imp2/impexp
::----------------------------------------------------------------------------------------------------------------------
_hbpref:=0;
_dalej:=_a;
_hfile:=_b;
_ml:='';
HBKN.index('HBKOD'); HBP.prefix();
_rec:=0;_code:=0;
{!
|? (_line:=fread(_hfile))<>'\n'
|! {? form(_line)='<record>'
   || _rec:=1; HBP.blank(1)
   |? form(_line)='<code>'
   || _code:=1; _ml:=''
   |? form(_line)='<endcode>'
   || _code:=0; _ml-=1; HBP.memo_set(_ml,'FML'); HBP.memo_put(,'FML')
   |? form(_line)='<endrecord>'
   || _rec:=0
   || {? _rec=1 & _code=0
      || HBP.RIDPL:=_dalej;
         STR.split(form(_line),_c);
         HBP.NR:=#STR.get_word();
         HBP.NP:=STR.get_word();
         t_par[1]:=STR.get_word();
         HBKN.prefix(t_par[1]);
         {? +t_par[1] & HBKN.first() || HBP.KP:=HBKN.ref() || HBP.KP:=null ?};
         HBP.DL:=STR.get_word();
         HBP.POL:=STR.get_word();
         {? HBP.add(1)
         || _hbpref:=HBP.ref()
         ?}
      |? _rec=1 & _code=1
      || _ml+=_line+'\n'
      ?}
   ?}
!};
_hbpref


\f_renum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2011]
:: OPIS: Renumeracja formatow plikow specyfikacji
::----------------------------------------------------------------------------------------------------------------------
HBPKI.cntx_psh();
HBPKI.index('HBPKIBA');
_renum:="_num:=_a;
         {? HBPKI.first
         ||
            {!
            |? HBPKI.NR:=_num;
               HBPKI.put(1);
               _num+=1;
               HBPKI.next
            !}
         ?}
        ";
_renum(1000);
_renum(1);
HBPKI.cntx_pop()


\zapytaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [KGS] [2011]
:: OPIS: Funkcja pytajaca o lokalizacje - zalezna od uprawnien
::   WE:
::       [_a] - tylko user nalezacy do grupy wdrozenia ( 1 - tak, 0 lub brak - nie)
::       [_b] - wybor lokalizacji (0 lub brak - tak, 1 - tylko serwer, 2 - tylko komputer lokalny)
::              wybor lokalizacji dostepny tylko dla użytkownika grupy wdrozenia
::       [_c] - ilosc specyfikacji w systemie
::   WY: wynik pytania
::  OLD: \zapytaj/homebank
::----------------------------------------------------------------------------------------------------------------------
{? _<1 || _a:=0 ?};
{? _<2 || _b:=0 ?};
{? _<3
|| HBPKI.cntx_psh();
   HBPKI.prefix();
   _size:=HBPKI.size;
   HBPKI.cntx_pop()
|| _size:=0
?};

_pyt:={? sec_superuser()>0
      || _pyt:={? ~_size
               || FUN.info('Brak specyfikacji do wyeksportowania.'@);
                  return(-1)
               |? ~_b
               || FUN.choice('Wybierz lokalizację eksportowanych plików'@,,'Serwer'@,'Komputer lokalny'@)
               || _b
               ?};
         {? ~_pyt
         || return(-1)
         |? _pyt=1
         || 1
         || 0
         ?}
      || {? _a
         || FUN.error('Brak uprawnień do wywołania funkcji.'@);
            return(-1)
         || {? ~_size
            || FUN.info('Brak specyfikacji do wyeksportowania.'@);
               return(-1)
            |? FUN.ask('Eksport specyfikacji na dysk.\nKontynuować?'@)
            || 0
            || return(-1)
            ?}
         ?}
      ?};
_pyt


\hdrpksl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula przed akcja popraw w okienku wertowania HBPWER tabeli HBP
::  OLD: \hdrpksl/war_tech
::----------------------------------------------------------------------------------------------------------------------
{? HBP.KP=null || ROZNE.RODZ_HBP:='Z' || ROZNE.RODZ_HBP:='S' ?};
:: odwieżenie pól dostępnych/niedostepnych
exec('ae_rodz_hbp','homebank');
HBP.hdr_edit('Pozycja specyfikacji'@)


\pokhbp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula przed akcja wyswietl w okienku wertowania HBPWER tabeli HBP
::  OLD: \pokhbp/war_tech
::----------------------------------------------------------------------------------------------------------------------
{? HBP.KP=null || ROZNE.RODZ_HBP:='Z' || ROZNE.RODZ_HBP:='S' ?};
:: odwieżenie pól dostępnych/niedostepnych
exec('ae_rodz_hbp','homebank');
HBP.hdr_edit('Pozycja specyfikacji'@);
HBP.display()


\nr_hbp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula przed dolacz w okienku wertowania HBPWER tabeli HBP
::  OLD: \nr_hbp/war_tech
::----------------------------------------------------------------------------------------------------------------------
Nr:=HBP.NR;
ROZNE.RODZ_HBP:='S';
:: odwieżenie pól dostępnych/niedostepnych
exec('ae_rodz_hbp','homebank');
1


\chkfm3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula przed redakcja pola HBP.FML
::  OLD: \chkfm3/war_tech
::----------------------------------------------------------------------------------------------------------------------
{? HBP.KP().KD='l' | HBP.KP().KD='n' | HBP.KP().KD='r' | HBP.KP().KD='e' | HBP.KP().KD='x'
|| HBP.memo_get(,'FML'); HBP.memo_set('','FML')
|| 1
?}


\blidpl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula na wartosc poczatkowa pola HBP.RIDPL
::  OLD: \blidpl/war_tech
::----------------------------------------------------------------------------------------------------------------------
HBPKI.ref()


\nr1_hbp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula na wartosc poczatkowa pola HBP.NR
::  OLD: \nr1_hbp/war_tech
::----------------------------------------------------------------------------------------------------------------------
{? HBP.size<>0 || Nr || 1 ?}


\chkfm2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula przed redakcja pola HBP.DL
::  OLD: \chkfm2/war_tech
::----------------------------------------------------------------------------------------------------------------------
{? HBP.KP().KD='l' | HBP.KP().KD='n' | HBP.KP().KD='r' | HBP.KP().KD='e' | HBP.KP().KD='x'
|| fld(''); 0
|| 1
?}


\chkfm1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula przed redakcja pola HBP.POL
::  OLD: \chkfm1/war_tech
::----------------------------------------------------------------------------------------------------------------------
{? HBP.KP().KD='l'| HBP.KP().KD='n'| HBP.KP().KD='r'| HBP.KP().KD='x' | HBP.KP().KD='e'| HBP.DL='x'
|| fld(''); 0
|| 1
?}


\chrhbkn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMK] [2010]
:: OPIS: Tabela HBKN, rekord po
::  OLD: \chrhbkn/war_tech
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(HBKN,,'KD','NP')


\hbp_formula
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Edycja formuly dla pozycji specyfikacji
::  OLD: \hbp_formula/tech_hb
::----------------------------------------------------------------------------------------------------------------------
HBP.memo_get(,'FML');
{? HBP.memo_edi(,'FML')
|| HBP.memo_put(,'FML')
?}


\chkrok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Piotr Jaskulski [2010]
:: OPIS:
::   WE:
::   WY:
::  OLD: \chkrok/tech_hb
::----------------------------------------------------------------------------------------------------------------------
{? fld<1900 | fld>3000
|| FUN.info('Niepoprawna wartość.'@);
   fld(#((date$5)+4));
   0
|| 1
?}


\blhbr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Piotr Jaskulski [2010]
:: OPIS:
::   WE:
::   WY:
::  OLD: \blhbr/tech_hb
::----------------------------------------------------------------------------------------------------------------------
#((date$5)+4)


\ae_hbpdl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Po redakcji pola DL tabeli HBP. Sprawdza poprawnosc.
::----------------------------------------------------------------------------------------------------------------------
fld(-(fld));
{? (#HBP.DL>0 & #HBP.DL<=999) | HBP.DL='x' | (HBP.KP=null & HBP.DL='')
|| {? HBP.DL='x' ||  HBP.efld_opt('HBPEDI','enable=0',,'POL') || HBP.efld_opt('HBPEDI','enable=1',,'POL') ?};
   1
|| FUN.info('Długość pola musi być równa x\n lub większa od 0.'@);
   0
?}


\wydspec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula przed akcja wydruk w okienku wertowania HBPWER tabeli HBP
::  OLD: \wydspec/war_tech
::----------------------------------------------------------------------------------------------------------------------
exec('rep_exec','#b_report','','hbn_spec',,,,,,,,'W')


\typ_przel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula decyduje o podswietleniu formatu przelewu jesli jest to
::        format dla ZUS lub UD
::  OLD: \typ_przel/homebank
::----------------------------------------------------------------------------------------------------------------------
{? HBPKI.RODZ<>'I' || HBPKI.actions('HBPKIWER','M',,1) || HBPKI.actions('HBPKIWER','',,1) ?};
{? HBPKI.RODZ='K' || ROZNE.RODZAJF:='Import kursów'
|? HBPKI.RODZ='E' || ROZNE.RODZAJF:='Eksport przelewów'
|? HBPKI.RODZ='I' || ROZNE.RODZAJF:='Import wyciągów'
|? HBPKI.RODZ='S' || ROZNE.RODZAJF:='Zapytanie o saldo'
|| ROZNE.RODZAJF:=''
?};
{? HBPKI.TYP = 'Z' || 'HBPKI#01#01'
|? HBPKI.TYP = 'U' || 'HBPKI#01#02'
|| ''
?}


\ae_kom_hbpki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Po redakcji pola HBPKI.KOM
::----------------------------------------------------------------------------------------------------------------------
HBPKI.efld_opt('HBPKIEDI','enable='+$(HBPKI.KOM='W'),,'SZABLON');
HBPKI.efld_opt('HBPKIEDI','enable='+$(HBPKI.KOM='W'),,'ADRES');
HBPKI.efld_opt('HBPKIEDI','enable='+$(HBPKI.KOM='W'),,'PORT');
HBPKI.efld_opt('HBPKIEDI','enable='+$(HBPKI.KOM='W'),,'FORMULA');
1


\chk_rec_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Poprawność uzupełnienia danych w tabeli PL
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(PL,,'KDPL','NPL')


\import_typytran
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Wywolanie formuly importujacej
::   WE: _a - kontekst wywołania np. 'HB'
::  OLD: \import/typytran.fml
::----------------------------------------------------------------------------------------------------------------------
_file:='';
_dalej:=FUN.choice('Uruchomiono procedurę importu słownika typów transakcji.\nPobrać plik z:'@,,
                   'Serwera'@,'Lokalnego dysku'@);
{? _dalej=1
|| _ff:=files('*.stt');
   _werff:=_ff.mk_sel(,'P',1,,,,,,'U');
   _ff.win_sel(_werff);
   _ff.win_act(_werff,,'Formuła','Wybierz'@@,,,,"sel_exit()",1);
   {? _ff.select()
   || _file:=_ff.FILENAME
   ?}
|? _dalej=2
||
   __dir_controling:=fmk_tmp_dir(0);
   _pth_file:=dlg_upload(__dir_controling.get_path(),0,'.stt');
   _file:=__dir_controling.get_path()+'\\'+_pth_file
?};
{? _file<>''
|| {? _>0 & _a='HB'
   || _ref:=ROZNE.BBANK
   || _ref:=ROZRACH.BANK
   ?};
   exec('typytran_h','homebank',_ref,_file,{? _dalej=1 || 1 || 0 ?})
?};
VAR_DEL.delete('__dir_controling')

\typytran_h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Uzupelnienie kodow operacji dla odzialow bankowych
::   WE: _a = ref oddzialu banku, dla ktorego chcemy importowac kody
::       (slownik kodow jest przypisany do oddzialu banku).
::       _b = nazwa pliku z kodami operacji
::       _c = 1 - plik na serwerze, _c = 0 - plik lokalny
::  OLD: \typytran/typytran
::----------------------------------------------------------------------------------------------------------------------
{? _<3 | type_of(_a)<>7 | type_of(_b)<>2 | type_of(_c)<>1 | _c>1 | +_b=0
|| FUN.emsg('Nieprawidłowe parametry wejściowe funkcji: typytran w pliku typytran.fml.'@);
   return(0)
?};
_dalej:=0;
_line:=0;
_file:=0;
_error:=0;
B.index('BANKID');
B.prefix();
{? B.seek(_a)
|| TYPYTRAN.index('TYP');
   TYPYTRAN.prefix('IMP_WYC_BAN',B.ref());
   {? TYPYTRAN.first()
   || _wyb:=FUN.choice('W systemie istnieją już pozycje słownika banków dla wskazanego banku:\n %1 (%2).\n\n'@[B.NUMER,B.NB],,
                       'Usunąć i zaimportować powtórnie'@,'Dodać brakujące pozycje'@);
      {? _wyb=1
      || {! |? TYPYTRAN.del() !};
         _dalej:=1
      |? _wyb=2
      || _dalej:=1
      || _dalej:=0
      ?}
   || _dalej:=1
   ?};
   {? _dalej
   || _file:=fopen(_b,'ur',_c);
      {? _file
      || SLU.index('NAZ'); SLU.prefix();
         VAR_DEL.delete('REC_STR');
         REC_STR:=obj_new(@.CLASS.STRING);
         _loop:=1;
         do();
         {!|? ((_line:=fread(_file))<>'\n') & _loop |!
              REC_STR.spl_rec();
              REC_STR.split(_line,'@');
              TYPYTRAN.blank();
              TYPYTRAN.RODZSL:='IMP_WYC_BAN';
              TYPYTRAN.BANK:=B.ref();
              {? REC_STR.next()
              || TYPYTRAN.KOD:=REC_STR.get_word()
              || _loop:=0
              ?};
              {? _loop
              || {? REC_STR.next()
                 || TYPYTRAN.TYPTRAN:=REC_STR.get_word()
                 || _loop:=0
                 ?}
              ?};
              {? _loop
              || {? REC_STR.next()
                 || TYPYTRAN.RODZ:=REC_STR.get_word()
                 || _loop:=0
                 ?}
              ?};
              {? _loop
              || {? REC_STR.next()
                 || TYPYTRAN.KONTO:=REC_STR.get_word()
                 || _loop:=0
                 ?}
              ?};
              {? _loop
              || {? REC_STR.next()
                 || TYPYTRAN.ROZR:=REC_STR.get_word()
                 || _loop:=0
                 ?}
              ?};
              {? _loop
              || {? REC_STR.next()
                 || TYPYTRAN.R_KRS:=REC_STR.get_word()
                 || _loop:=0
                 ?}
              ?};
              {? _loop
              || {? REC_STR.next()
                 || _typpl:=REC_STR.get_word();
                    {? TYPYTRAN.RODZ='Z' & SLU.find_key('~Płatności ZUS')
                    |  TYPYTRAN.RODZ='U' & SLU.find_key('TYPY PŁATNOŚCI DO US')
                    || SLO.index('SL'); SLO.prefix(SLU.ref(),_typpl);
                       {? SLO.first
                       || TYPYTRAN.TYP:=SLO.ref()
                       ?}
                    || TYPYTRAN.TYP:=null
                    ?}
                 || _loop:=0
                 ?}
              ?};
              {? _loop || TYPYTRAN.add(1) ?}
         !};
         VAR_DEL.delete('REC_STR');
         _dalej:=_loop;
         fclose(_file);
         {? _loop=0
         || undo();
            _error:=1;
            FUN.emsg('Błąd w strukturze pliku:\n %1 \nImport słownika typów transakcji nieudany.'@[_b])
         ?};
         end()
      || _error:=1; FUN.info('Nie udało się otworzyć wskazanego pliku: %1.'@[_b])
      ?}
   ?}
|| _error:=1; FUN.info('Nie odnaleziono wskazanego oddziału bankowego.'@)
?};
{? _dalej & ~_error
   || TYPYTRAN.first; FUN.info('Import słownika typów transakcji zakończony pomyślnie.'@)
   || TYPYTRAN.first; FUN.info('Import słownika typów transakcji zakończony niepowodzeniem.'@)
?};
_dalej


\typytran_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Wywolanie formuly eksportujacej
::   WE: _a - kontekst wywołania np. 'HB'
::  OLD: \typytran_exp/typytran.fml
::----------------------------------------------------------------------------------------------------------------------
_file:='';
_dalej:=FUN.choice('Uruchomiono procedurę eksportu słownika typów transakcji.\nEksportować plik na:'@,,'Serwer'@,'Lokalny dysk'@);
{? _dalej=1
|| _file:=TYPYTRAN.BANK().NUMER+'.stt'
|? _dalej=2
||
   __dir_controling:=fmk_tmp_dir(0);
   _file:=__dir_controling.get_path()+'\\'+TYPYTRAN.BANK().NUMER+'.stt';
   _dalej:=0
?};
{? _file<>''
|| {? _>0 & _a='HB'
   || _ref:=ROZNE.BBANK
   || _ref:=ROZRACH.BANK
   ?};
   _hfile:=fopen(_file,'uw',_dalej);
   {? _hfile
   || _rodzsl:=TYPYTRAN.RODZSL;
      _bank:=TYPYTRAN.BANK;
      TYPYTRAN.cntx_psh();
      TYPYTRAN.index('KOD');
      TYPYTRAN.prefix(_rodzsl,_bank);
      TYPYTRAN.first();
      {! |?
          _sep:='@';
          _wiersz:=TYPYTRAN.KOD+_sep+TYPYTRAN.TYPTRAN+_sep+TYPYTRAN.RODZ+
                   _sep+TYPYTRAN.KONTO+_sep+TYPYTRAN.ROZR+_sep+TYPYTRAN.R_KRS+_sep+{? TYPYTRAN.TYP<>null || TYPYTRAN.TYP().KOD || '\'\'' ?};
          fwrite(_hfile,_wiersz);
          TYPYTRAN.next()
      !};
      fclose(_hfile);
      TYPYTRAN.cntx_pop();
      FUN.info('Eksport do pliku:\n %1 \nzakończony powodzeniem.'@[_file])
   ?};
   {? _dalej=0
   ||
      __dir_controling.get_path();
      dlg_save(_file,0)

   ?}
?};
VAR_DEL.delete('__dir_controling')

\dvtyptrb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Wartosc domyslna dla pola TYPYTRAN.BANK (FK, IF, HB)
::  OLD: \dvtyptrb/skid_pel
::----------------------------------------------------------------------------------------------------------------------
ROZNE.BBANK


\be_rodzp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Rodzaj platnosci w tabeli TYPYTRAN przed redakcja
::  OLD: \be_rodzp/skid_pel
::----------------------------------------------------------------------------------------------------------------------
be_rodzp:=TYPYTRAN.RODZ;
1


\ra_ttran
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Rekord po w tabeli TYPYTRAN. Sprawdza wypelnienie pol.
::  OLD: \ra_ttran/skid_pel
::----------------------------------------------------------------------------------------------------------------------
{? ROZNE.RODZSL='IMP_WYC_BAN'
|| __CHK.record(TYPYTRAN,,'TYPTRAN','KONTO','ROZR')
|| __CHK.record(TYPYTRAN,,'KOD','TYPTRAN')
?}


\f3_rodzp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Rodzaj platnosci na F3 w tabeli TYPYTRAN
::  OLD: \f3_rodzp/skid_pel
::----------------------------------------------------------------------------------------------------------------------
popup(0,'Wybierz rodzaj płatności',
       'ZUS', '', "TYPYTRAN.RODZ:='Z'",
       'US','',"TYPYTRAN.RODZ:='U'",
       'Pozostałe','',"TYPYTRAN.RODZ:='K'")


\ae_rodzp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Rodzaj platnosci w tabeli TYPYTRAN po redakcji
::  OLD: \ae_rodzp/skid_pel
::----------------------------------------------------------------------------------------------------------------------
{? ~(TYPYTRAN.RODZ='Z' | TYPYTRAN.RODZ='U' | TYPYTRAN.RODZ='K')
|| FUN.emsg('Wprowadzono nieznany rodzaj płatności.\n Prawidłową listę obsługiwanych rodzajów płatności\n'
            'można wyświetlić klawiszem F3.'@);
   _wy:=0
|| _wy:=1
?};
{? _wy
|| {? TYPYTRAN.RODZ='K' | (TYPYTRAN.RODZ<>'K' & TYPYTRAN.RODZ<>be_rodzp) || TYPYTRAN.TYP:=null ?}
?};
_wy


\betypttr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2008]
:: OPIS: Przed redakcja pola TYPYTRAN.TYP
::  OLD: \betypttr/skid_pel
::----------------------------------------------------------------------------------------------------------------------
SLO.index('SL');
{? TYPYTRAN.RODZ='K'
|| 0
|? TYPYTRAN.RODZ='Z'
|| SLU.index('NAZ'); SLU.prefix('~Płatności ZUS');
   {? ~SLU.first()
   || FUN.emsg('Nie znaleziono słownika płatności ZUS.'@);
      0
   || SLO.prefix(SLU.ref());
      exec('slu_okn','slo_slu');
      1
   ?}
|? TYPYTRAN.RODZ='U'
|| {? XINFO.SLTYPPL<>null
   || XINFO.SLTYPPL();
      SLO.prefix(XINFO.SLTYPPL);
      exec('slu_okn','slo_slu');
      1
   || FUN.emsg('Nie zdefiniowano słownika płatności US\n w parametrach programu.'@);
      0
   ?}
|| 0
?}


\fzmbslb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.40]
:: OPIS: Przenoszenie (kopiowanie) zawartosci slownikow bankow do innego banku
::  OLD: \fzmbslb/skid_pel
::----------------------------------------------------------------------------------------------------------------------
_vx:={? _>0 & _a='HB' || ROZNE || ROZRACH ?};
_vb:={? _>0 & _a='HB' || _vx.BBANK || _vx.BANK ?};
TYPYTRAN.cntx_psh();
TYPYTRAN.index('TYP');
_vx.win_edit('TTRB');
PAR_WYDR.PAR1:=1;
{? _>0 & _a='HB' || _vx.BBANK:=null || _vx.BANK:=null ?};
{? _vx.edit("__CHK.record(TYPYTRAN,,'BANK')")
|| _vbank:={? _>0 & _a='HB' || _vx.BBANK || _vx.BANK ?};
   {? _vbank<>TYPYTRAN.BANK
   || {? TYPYTRAN.prefix(ROZNE.RODZSL,TYPYTRAN.BANK); TYPYTRAN.first()
      || {!
         |? TYPYTRAN.cntx_psh();
            TYPYTRAN.prefix(ROZNE.RODZSL,_vbank);
            TYPYTRAN.BANK:=_vbank;
            TYPYTRAN.add(1);
            TYPYTRAN.cntx_pop();
            TYPYTRAN.next()
         !};
         {? PAR_WYDR.PAR1 & TYPYTRAN.first()
         || {!
            |? {? ~TYPYTRAN.count() || TYPYTRAN.del() || TYPYTRAN.next() ?}
            !}
         ?}
      ?}
   ?}
?};
TYPYTRAN.cntx_pop();
{? _>0 & _a='HB' || _vx.BBANK:=_vb || _vx.BANK:=_vb ?}; 1


\ae_rodz_hbp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Po redagowaniu pola zmiennej ROZNE.RODZ_HBP
::----------------------------------------------------------------------------------------------------------------------
{? ROZNE.RODZ_HBP='S'
|| HBP.DL:='';
   HBP.POL:='';
   HBP.efld_opt('HBPEDI','enable=0',,'DL');
   HBP.efld_opt('HBPEDI','mark=0',,'DL');
   HBP.efld_opt('HBPEDI','enable=0',,'POL');
   HBP.efld_opt('HBPEDI','mark=0',,'POL');
   HBP.efld_opt('HBPEDI','enable=1',,'KP');
   HBP.efld_opt('HBPEDI','mark=1',,'KP')
|? ROZNE.RODZ_HBP='Z'
|| HBP.KP:=null;
   HBP.efld_opt('HBPEDI','enable=1',,'DL');
   HBP.efld_opt('HBPEDI','mark=1',,'DL');
   HBP.efld_opt('HBPEDI','enable=1',,'POL');
   HBP.efld_opt('HBPEDI','mark=1',,'POL');
   HBP.efld_opt('HBPEDI','enable=0',,'KP');
   HBP.efld_opt('HBPEDI','mark=0',,'KP')
?};
win_disp();
1


\first_free
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2011]
:: OPIS: ustalenie pierwszego wolnego numeru kodu ksiegowego
::   WY: kod ksiegowy [STRING(5)]
::  OLD: \first_free/impexp
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;

_zlicz:="__Used.first;
         __Used.KOD";

_zlicz_x:="_last:=_wyn:=0;
         {? __Used.last & __Used.KOD<9999 & __Used.size=__Used.KOD
         || _wyn:=__Used.KOD+1
         || {? __Used.first
            || _last:=__Used.KOD;
               {!
               |? {? __Used.next
                   & _last+1=__Used.KOD
                  || _last:=__Used.KOD;
                     1
                  || 0
                  ?}
               !};
               _wyn:=_last+1
            || _wyn:=1
            ?}
         ?};
         _wyn
        ";
{? var_pres('__Used')=type_of(SYSLOG) & __Used.size
|| _wyn:=_zlicz()
|| B.cntx_psh();
   B.index('BANKOD');
   B.prefix();
   {? B.last & #B.KOD<9999 & B.size=#B.KOD
   || _wyn:=(#B.KOD)+1
   || {? B.first
      || __Used:=sql('select 0 as KOD from SYSLOG where 2=1 order by 1');
         {!
         |? __Used.size<99999
         |! __Used.KOD:=__Used.size+1;
            __Used.add
         !};
         {!
         |? {? #B.KOD & +B.KOD=5 & __Used.find_tab(,'KOD',,'=',#B.KOD)
            || __Used.del()
            ?};
            B.next
         !};
         _wyn:=_zlicz()
      || _wyn:=1
      ?}
   ?};
   B.cntx_pop()
?};
VAR_DEL.delete('_tbtmp');
('00000'+($_wyn))+5


\set_odd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Zwraca zlaczenie do ODD
::   WY: ref do jednostki ksiegowej lub null
::  ODD: \set_odd/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
{? OPERATOR.DEPT
|| OPERATOR.DEPT
|| _v:=PAR_SKID.get(1);
   ODD.index('ODDZIALY');
   ODD.prefix(REF.FIRMA,_v,_v);
   {? ODD.first() || ODD.ref() || null ?}
?}


\f_pbgnt2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Pomocnicza do \f_pbgent. Zwraca saldo rozrachunku dla przelewu.
::       Uwaga: formula operuje na biezacym rekordzie tabeli OP
::   WE: _a: data, na ktora ma byc liczone saldo
::  OLD: \f_pbgnt2/przelew2.fml
::----------------------------------------------------------------------------------------------------------------------
PB.cntx_psh(); _ret:=0;
F.RObr2(OP.ref(),_a,'Z');
:: Warunek generowania przelewow - saldo rozrachunkow
_vkma:={? DRB.EXIST || DRB.get_dobr(_a,1) || F.rma ?};
_vkwn:={? DRB.EXIST || DRB.get_dobr(_a,2) || F.rwn ?};
{? (_vkma>0 & _vkma>_vkwn) | (_vkma<0 & _vkma<_vkwn)
:: Sprawdzenie czy przelew byl generowany (i nie eksportowany w HOMEBANK-u)
:: _vkg - kwota przelewow wczesniej wygenerowanych
|| PB_OP.index('SYM'); PB_OP.prefix(OP.AN,OP.SYM,OP.ODD,OP.SYM_ROK);
   _vkg:=_vke:=0;
   {? PB_OP.first()
   || {! |?
         {? PB_OP.PB().WAL=OP.WAL || _vkg+=PB_OP.K ?};
         PB_OP.next()
      !}
   ?};
:: Jesli nie bylo oczekujacych na kwote rozrachunku wg obrotow ma,
:: sprawdzenie czy przelew byl eksportowany
:: _vke - kwota przelewow wyeksportowanych
   _vr:=4+$date();
   _data_ot:=#(4+$OP.DO);
   _ile:=#_vr-_data_ot;
   {? _vkg<_vkma | ~_vkg | _vkma<0
   || PB_OP.use('pop'+_vr); PB_OP.index('SYM'); PB.use('pb'+_vr); PB.prefix();
      PB_OP.prefix(OP.AN,OP.SYM,OP.ODD,OP.SYM_ROK);
      {? PB_OP.first()
      || {! |? {? PB_OP.PB().PR<>'A' & PB_OP.PB().WAL=OP.WAL || _vke+=PB_OP.K ?}; PB_OP.next() !}
      ?}
   ?};
:: cd ... na przełomie roku dodatkowe sprawdzenie czy przelew byl eksportowany w następnym roku
   _vr:=$(date()~1+1);
   {? (_vke=0 & WYDRUKIN.DATA~1>date()~1) & _vkg<_vkma | ~_vkg | _vkma<0
   || PB_OP.cntx_psh();
      PB_OP.use('pop'+_vr); PB_OP.index('SYM'); PB.use('pb'+_vr); PB.prefix();
      PB_OP.prefix(OP.AN,OP.SYM,OP.ODD,OP.SYM_ROK);
      {? PB_OP.first()
      || {! |? {? PB_OP.PB().PR<>'A' & PB_OP.PB().WAL=OP.WAL || _vke+=PB_OP.K ?}; PB_OP.next() !}
      ?};
      PB_OP.cntx_pop()
   ?};
:: Jesli nie bylo oczekujacych i z archiwum biezacego roku
:: na kwote rozrachunku wg obrotow ma
   _vr:=$(date()~1);
   {? _ile>0
   || {! _i:=1.._ile |?
         {? (_vkg+_vke)<_vkma | ~(_vkg+_vke) | _vkma<0
         || _vr:=$(#_vr-1);
            PB_OP.use('pop'+_vr); PB_OP.index('SYM'); PB_OP.prefix(OP.AN,OP.SYM,OP.ODD,OP.SYM_ROK); PB.use('pb'+_vr); PB.prefix();
            {? PB_OP.first()
            || {! |?
                  {? PB_OP.PB().PR<>'A' & PB_OP.PB().WAL=OP.WAL || _vke+=PB_OP.K ?};
                  PB_OP.next()
               !}
            ?}
         ?}
      !}
   ?};
:: Jesli nie bylo oczekujacych i z archiwum biezacego i poprzedniego roku
:: na kwote rozrachunku wg obrotow ma
   PB_OP.use('popxxxx'); PB.use('pbxxxx');
   {? (_vkma>0 & (_vke-F.rtwn)<=0) | (_vkma<0 & (_vke-F.rtwn)>=0) || _vke:=0 || _vke-=F.rtwn ?};
   {? var_press('PbKw')>0 || PbKw:=_vkg+_vke ?};
   _ret:=(_vkma-_vkwn-_vkg-_vke)$2
?};
PB.cntx_pop();
_ret


\pb_saldovat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.22]
:: OPIS: Zwraca saldo VAT
::   WE: [_a] - jeżeli _a i = 1 to dla bieżącego rekordu OP
::   WY: Saldo VAT
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_obj:=~~;
{? _=0 || _a:=0 ?};
PB.cntx_psh();
OP.cntx_psh();
{? _a=0
|| SLO.cntx_psh(); SLU.cntx_psh(); SLUAPPL.cntx_psh();
   SLO.index('SL'); SLO.prefix(FINFO.SLWAL().SLU,OPTMP.WAL().SYM);
   _wal:={? SLO.first() || SLO.ref() || FINFO.NAROD ?};
   SLO.cntx_pop(); SLU.cntx_pop(); SLUAPPL.cntx_pop();
   OP.index('KON_O');
   OP.prefix(_wal,OPTMP.ODD,OPTMP.KONTO,OPTMP.SYM,OPTMP.SYM,OPTMP.SYM_ROK);
   _a:=OP.first()
?};
{? _a || _obj:=exec('f_vat','fks_sp',OP.ref(),1,1); _ret:=_obj.VAT ?};
{? _ret>0
:: Sprawdzenie czy przelew byl generowany (i nie eksportowany w HOMEBANK-u)
:: _vkg - kwota przelewow wczesniej wygenerowanych
|| PB_OP.index('SYM'); PB_OP.prefix(OP.AN,OP.SYM,OP.ODD,OP.SYM_ROK);
   _vkg:=_vke:=0;
   {? PB_OP.first()
   || {! |?
         {? PB_OP.PB().WAL=OP.WAL || _vkg+=PB_OP.SP_V ?};
         PB_OP.next()
      !}
   ?};
:: sprawdzenie czy przelew byl eksportowany
:: _vke - kwota przelewow wyeksportowanych
   _vr:=4+$date();
   _data_ot:=#(4+$OP.DO);
   _ile:=#_vr-_data_ot;
   {? _vkg<_ret | ~_vkg
   || PB_OP.use('pop'+_vr); PB_OP.index('SYM'); PB.use('pb'+_vr); PB.prefix();
      PB_OP.prefix(OP.AN,OP.SYM,OP.ODD,OP.SYM_ROK);
      {? PB_OP.first()
      || {! |? {? PB_OP.PB().PR<>'A' & PB_OP.PB().WAL=OP.WAL || _vke+=PB_OP.SP_V ?}; PB_OP.next() !}
      ?}
   ?};
:: Jesli nie bylo oczekujacych i z archiwum biezacego roku to sprawdza w poprzednim roku
   {? _ile>0
   || {! _i:=1.._ile |?
         {? (_vkg+_vke)<_ret | ~(_vkg+_vke)
         || _vr:=$(#_vr-1);
            PB_OP.use('pop'+_vr); PB_OP.index('SYM'); PB_OP.prefix(OP.AN,OP.SYM,OP.ODD,OP.SYM_ROK); PB.use('pb'+_vr); PB.prefix();
            {? PB_OP.first()
            || {! |?
                  {? PB_OP.PB().PR<>'A' & PB_OP.PB().WAL=OP.WAL || _vke+=PB_OP.SP_V ?};
                  PB_OP.next()
               !}
            ?}
         ?}
      !}
   ?};
:: Pomijanie zadekretowanych wyciągów bakowych
   {? var_pres('_obj')>0 & _vke>=_obj.ZVAT
   || _vke-=_obj.ZVAT
   ?};
:: Podsumowanie: VAT z rozrachunku - zapłacona część VAT
   PB_OP.use('popxxxx'); PB.use('pbxxxx');
   _ret:=(_ret-_vke-_vkg)$2
?};
OP.cntx_pop();
PB.cntx_pop();
_ret


\err_st_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula dodaje wiersz do tabeli z błędami podczas importu wyciagow
::   WE: _a = opis przyczyny, _b = nr wyciagu
::  OLD: \err_st_add/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
ERR_ST.blank();
{? _=2 & ERR_ST.find_key(_b) & ERR_ST.WYCIAG=_b
|| return(0)
|| {? _=2 || ERR_ST.WYCIAG:=_b ?};
   ERR_ST.FILENAME:=PWB.PLIK().NAME;
   ERR_ST.KOD_BANK:=PWB.KOD_BANK;
   ERR_ST.NAZ_BANK:=PWB.NAZ_BANK;
   ERR_ST.SPEC:=PWB.SPEC;
   ERR_ST.LOC:=PWB.LOC;
   ERR_ST.PRZYCZ:=_a;
   ERR_ST.add(1)
?}


\okno_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Tworzy okno PB dla czynności uruchamianej z ToDo
::   WE: _a - akronim stałego okna przelewu
::       _b - czy dodawać przycisk Zakończ (0/1)
::----------------------------------------------------------------------------------------------------------------------
_okn:=PB.mk_edit('Przelew'@,,15+('pbedit_'+(-_a)));
PB.win_etab(_okn,'Dane przelewu'@);
exec('set_split_field','homebank','PB_EDI1');
{? _a<>'PRZEL' || PB.win_ewin(_okn,,_a) || PB.win_ewin(_okn,PB,'PRZEL') ?};

{? _a='PB_EDI1' || _status:='STATUS'
|? _a='PB_EDIW' || _status:='STATUS_W'
|? _a='PB_ZUS' || _status:='STATUS'
|? _a='PB_ZUSN' || _status:='STATUS'
|? _a='PB_ZUSCR' || _status:='STATUS'
|? _a='PB_EDUS1' || _status:='STATUS'
|? _a='EDIT' || _status:='STATUS'
|? _a='EDIT_US' || _status:='STATUS'
|? _a='PRZEL' || _status:='STATUS'
|| _status:=''
?};
{? _status<>''
|| PB.win_etab(_okn,'Status przelewu'@);
   PB.win_ewin(_okn,,_status)
?};
{? _>=2 & _b=1
|| PB.win_ebtn(_okn,'text=%1, btn_label_align=center, panel=bottom, align=end, display=1'['&Zatwierdź przelew'@],"__PBCONF:=1;'key:Esc'")
|| _zapisz:=PB.win_ebtn(_okn,'text=%1, btn_label_align=center, panel=bottom, align=end, display=1'['&Zapisz'@],"__PBCONF:=1;'key:F2'");
   PB.btn_eopt(_okn,_zapisz,'tooltip='+exec('help_red_ok','#window','Z'))
?};
_anuluj:=PB.win_ebtn(_okn,'text=%1, btn_label_align=center, panel=bottom, align=end, display=1'['&Anuluj'@],"__PBCONF:=0;'key:Esc'");
PB.btn_eopt(_okn,_anuluj,'tooltip='+exec('help_red_esc','#window','A'));
PB.win_edit(_okn);
::{? _>=2 & _b=1
::|| _win:=PB.grp_make('Przelew',,'grp_pb_disp',5,5,,);
::   PB.grp_edit(_win,,_okn,,,,,,'maximized','pb_dip_okn',1);
::   PB.win_sel(_win)
::?};
__PBWINE:=_a


\okno_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła ustala rodzaj okna na podstawie rodzaju przelewu
::----------------------------------------------------------------------------------------------------------------------
{? PB.RODZ='KU'
|| 'PB_EDUS1'
|? PB.RODZ='KZ'
|| 'PB_ZUS'
|| 'PB_EDI'+{? 1+PB.RODZ='W' || 'W' || '1' ?}
?}


\bedprzek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: Przed redakcja pola WYDRUKIN.DATPRZEK
::  OLD: \bedprzek/skid_prj.fml
::----------------------------------------------------------------------------------------------------------------------
WYDRUKIN.REJPRZEK


\polzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA,PJ,KGS] [1998]
:: OPIS: Funkcja konwerji polskich znakow z mazovii
::       na standard okreslony w specyfikacji
::       parametrem wywolania funkcji jest string w ktorym dokonujemy
::       translacji i znaczki ze standardu sklejone w string analogiczny
::       do ponizszego
::   WE: _a - ciag do kownwersji
::       _b - funkcja konwertujaca do wykonania (np. fun:"maz_utf8") [STRING]
::            lub
::            zestaw znakow ze standardu sklejone w string [STRING]
::   WY: Ciag po konwersji
::----------------------------------------------------------------------------------------------------------------------
{? HBPKI.PL().KDPL<>'UT8' || _a:=exec('uni2latin','homebank',_a) ?};
_maz:='ĄĆĘŁŃÓŚŹŻąćęłńóśźż';
_wyn:='';
{? +_b>0
|| {? 5+_b='fun:"'
   || _funkcja:=(5-_b)-1;
      _wyn:=STR.gsub(_a,',','&2xxC');
      _wyn:={? 4+_funkcja<>'maz2' & _funkcja<>'maz852'
            || ($(_funkcja+'(\''+_wyn+'\')'))()
            || ($('STR.'+_funkcja+'(\''+_wyn+'\')'))()
            ?};
      _wyn:=STR.gsub(_wyn,'&2xxC',',')
   || {!
      |? +_a
      |! _lit:=1+_a;
         _a:=1-_a;
         {? _pos:=_maz * _lit
         || _wyn+=_pos+_b+1
         || _wyn+=_lit
         ?}
      !}
   ?};
   _wyn
|| _wyn:=_a
?};
_wyn


\uni2latin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.30]
:: OPIS: Funkcja zamienia znaki diaktryczne niemieckie, francuskie itp na lacinskie
::   WE: _a = ciag do konwersji
::       [_b] = jesli podano to znak na ktory beda zamieniane nieznane, niedozwolone znaki utf-8,
::              jesli nie podano, przyjmuje ?
::----------------------------------------------------------------------------------------------------------------------
_from:='âãäåāăȁȃȧèéêëěȇȅòôõöøōŏőǒȏȯùúûüűũūŭůǔìíîïĩĭīȉȋýÿŷȳžŝšÂÃÄÅĀĂȀȂȦÈÉÊËĚȆȄÒÔÕÖØŌŎŐǑȎȮÙÚÛÜŰŨŪŬŮǓÌÍÎÏĨĬĪȈȊÝŸŶȲŽŜŠ';
_to  :='aaaaaaaaaeeeeeeeooooooooooouuuuuuuuuuiiiiiiiiiyyyyzssAAAAAAAAAEEEEEEEOOOOOOOOOOOUUUUUUUUUUIIIIIIIIIYYYYZSS';
_maz:='ĄĆĘŁŃÓŚŹŻąćęłńóśźż';
_wyn:='';
{? _>=2 & type_of(_b)=type_of('') & +_b>0 || _empty:=1+_b || _empty:='?' ?};
{!
|? +_a
|! _lit:=1+_a;
   _a:=1-_a;
   {? _pos:=_from*_lit
   || _wyn+=_pos+_to+1
   || {? %_lit=255 & (_maz*_lit)=0
      || _wyn+=_empty
      || _wyn+=_lit
      ?}
   ?}
!};
_wyn


\be_narod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMA [8.60]
:: OPIS: Przed redakcja waluty narodowej (FINFO.NAROD)
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.SLWAL
|| XINFO.SLWAL();
   SLO.win_dict('ONE'); SLO.win_sel('ONE');
   SLO.hdr_sel(SLU.NAZ);
   1
|| FUN.info('Nie ustalono słownika walut w parametrach pracy programu.'@);
   0
?}


\hbn_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Definiowanie ustawień płatności elektronicznych
::----------------------------------------------------------------------------------------------------------------------
exec('edytuj','#stalesys',XINFO,'RED_HBN')<>date(0,0,0)


\akt_pyt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Aktualizacja specyfikacji - pytanie przed importem
::   WE: _a - pytać o wszystkie oddziały
::       _b - pytać o aktualizację istniejących
::----------------------------------------------------------------------------------------------------------------------
_wyn:=obj_new('OK','ODD','REWRITE');
_wyn.ODD:=-1;
_wyn.REWRITE:=-1;
_wyn.OK:=1;
{? _a | _b
|| _wyn.OK:=0;
   VAR_DEL.delete('AktPyt');
   AktPyt:=tab_tmp(1,
      'ODD','INTEGER','Nazwa w oknie',
      'ALL','INTEGER','Nazwa pola 1'
   );
   AktPyt.blank(1);
   AktPyt.add();
   _o:=AktPyt.mk_edit('Import specyfikacji'@,,'aktpyt1');
   AktPyt.win_efld(_o,,'ODD',,,,,,'Użyć dla wszystkich wykorzystywanych oddziałów banku '@,,
                   'Wskazaną specyfikację użyć dla wszystkich oddziałów tego banku, wykorzystywanych w rachunkach licencjobiorcy.'@,
                   'check-box',,"1","0");
   AktPyt.win_efld(_o,,'ALL',,,,,,'Aktualizować istniejące specyfikacje'@,,'Aktualizować istniejące specyfikacje'@,'check-box',,"1","0");
   {? _a
   || _ok:=AktPyt.win_ebtn(_o,'text=%1,panel=bottom,align=end,display=1'['&OK'@],"'key:F2'");
      AktPyt.btn_eopt(_o,_ok,'tooltip='+exec('help_red_ok','#window','P'))
   ?};
   {? _b
   || _anuluj:=AktPyt.win_ebtn(_o,'text=%1,panel=bottom,align=end,display=1'['&Anuluj'@],"'key:Esc'");
      AktPyt.btn_eopt(_o,_anuluj,'tooltip='+exec('help_red_esc','#window','A'))
   ?};
   AktPyt.win_edit(_o);
   {? AktPyt.edit()
   || _wyn.ODD:=AktPyt.ODD;
      _wyn.REWRITE:=AktPyt.ALL;
      _wyn.OK:=1
   ?};
   VAR_DEL.delete('AktPyt')
?};
_wyn


\bv_optmp_vsal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.22]
:: OPIS: Przed wyświetleniem pola OPTMP.SP_VSAL
::----------------------------------------------------------------------------------------------------------------------
{? OPTMP.SP='N'
|| exec('findfnrd','color')
|? OPTMP.KW2<>0 & OPTMP.SP_VSAL<>OPTMP.KW2
|| Color.fnd_kol('OPTMP#03#02')
||
''
?}


\czy_kh_sp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.22]
:: OPIS: Formuła wprawdza czy dla kontrahenta jest preferowana płatność typu SP
::   WE: _a - KH.ref()
::   WY: 1/0 (tak/nie)
::----------------------------------------------------------------------------------------------------------------------
KH_DOD.index('KH_DOD');
KH_DOD.prefix(REF.FIRMA,_a);
{? KH_DOD.first() & KH_DOD.SP='T' || 1 || 0 ?}


\pb_nr_fakt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.22]
:: OPIS: Dołączanie nr faktury do przelewu split payment
::----------------------------------------------------------------------------------------------------------------------
_wy:=~~;
_kh:=null;

:: okres i maski
{? ROZNE.ROKKON=null
|| exec('szuk_okr','okresy',date());
   {? ROZNE.UT_OKROD<>null
   || ROZNE.ROKKON:=anal_rok:=SSTALE.AR:=ROZNE.UT_OKROD().ROK;
      SSTALE.AO:=ROZNE.UT_OKROD;
      exec('open_tabele','open_tab','F')
   ?}
?};
:: obiekt DRB
exec('DRB','object');

{? PB.KHNIP<>''
|| KH.cntx_psh();
   KH.index('SNIP');
   KH.prefix(2,exec('niptostr','#string',PB.KHNIP),);
   {? KH.first()
   || _kh:=KH.ref()
   ?};
   KH.cntx_pop()
?};
_tab:=sql(
   'select SYM, AN, TZ, SP, REFERENCE as REF, '+
   'CAST(0 as REAL_TYPE) as S, '+
   'CAST(0 as REAL_TYPE) as SV, '+
   'CAST(0 as REAL_TYPE) as VAT_WYM, '+
   'CAST(0 as REAL_TYPE) as VAT_ZAL, '+
   '0 as ZB '+
   {? var_press('DSP',OP)>0 || ', DSP as DW ' || '' ?}+
   'from OP '
   'where ODD=:_a and TYP=\'ZOB\' and SP<>\'N\' and stan=\'N\''+
   {? _kh || 'and OP.KH=:_b ' || '' ?}+
   'order by 1'
   ,PB.ODD,_kh
);
{? _tab.first()
|| OP.cntx_psh();
   OP.prefix();
   {!
   |? _del:=0;
      {? OP.seek(BIT.sqlint(_tab.REF),)
      || _tab.S:=exec('f_pbgnt2','homebank',PB.DP);
         {? _tab.S
         || _tab.SV:=exec('pb_saldovat','homebank',1);
            _vat:=exec('f_vat','fks_sp');
            _zapv:=_vat-_tab.SV;
            _swym:=exec('wym_vat','fks_sp','W');
            _szal:=exec('wym_vat','fks_sp','Z');
            _tab.VAT_WYM:=_swym-_zapv;
            {? _tab.VAT_WYM<0 || _tab.VAT_WYM:=0 ?};
            _zapv-=_swym; {? _zapv<0 || _zapv:=0 ?};
            _tab.VAT_ZAL:=_szal-_zapv;
            {? _tab.VAT_ZAL<0 || _tab.VAT_ZAL:=0 ?};
            _nspp:='T';
            {? _tab.VAT_WYM || _nspp:='W'
            |? _tab.VAT_ZAL || _nspp:='Z'
            ?};
            _p1:='NTZW'*OPTMP.SPP;
            _p2:='NTZW'*_nspp;
            {? _p2<_p1
            || _tab.SP:=_nspp
            ?};
            _tab.ZB:=exec('is_zb','rozrach_przel');
            _tab.put()
         || _del:=1
         ?}
      || _del:=1
      ?};
      {? _del || _tab.del() || _tab.next() ?}
   !};
   OP.cntx_pop()
?};
_o:=_tab.mk_sel('Rozrachunki'@,'P',,'#pbopsel',,,,,'U');
_tab.win_fld(_o,,'SYM',,,,,,'Symbol');
_tab.win_fld(_o,,'AN',,,20,,,'Konto');
{? var_press('DW',_tab)>0
|| _tab.win_fld(_o,,'DW',,,,,,'Data wyst.')
?};
_tab.win_fld(_o,,'TZ',,,,,,'Term. pł.');
_tab.win_fld(_o,,'S',,,,,,'Saldo');
_tab.win_fld(_o,,'SP',,,5,,,'SP');
_tab.win_fld(_o,,'SV',,,,,,'Saldo VAT');
_tab.win_fld(_o,,'VAT_WYM',,,,,,'VAT wym.');
_tab.win_fld(_o,,'VAT_ZAL',,,,,,'VAT zal.');
_tab.win_act(_o,,'Formuła','wyBierz',,,"
   {? cur_tab().ZB=0 | exec('is_zb_pyt','rozrach_przel')
   || sel_exit()
   ?}
   ",,1
);
_tab.win_act(_o,,'Formuła','zapłać Wymagany'@,,,"
   _tab:=cur_tab();
   {? _tab.VAT_WYM=0
   || FUN.info('Brak wymaganego split payment do zapłaty.'@)
   |? cur_tab().ZB=0 | exec('is_zb_pyt','rozrach_przel')
   || tryb:=1; sel_exit()
   ?}
");
_tab.win_act(_o,,'Formuła','zapłać Zalecany'@,,,"
   _tab:=cur_tab();
   {? _tab.VAT_ZAL=0
   || FUN.info('Brak zalecanego split payment do zapłaty.'@)
   |? cur_tab().ZB=0 | exec('is_zb_pyt','rozrach_przel')
   || tryb:=2; sel_exit()
   ?}
");
_tab.win_act(_o,,'Formuła','zapłać Całość'@,,,"tryb:=3; sel_exit()");
_tab.win_act(_o,,'Kolejność');
_tab.win_act(_o,,'Formuła','Legenda'@,,,"exec('legenda','color','OPNRFAK#01')");
_tab.win_fml(_o,,'SP',,'ICON_BEFORE',"exec('ikony','fks_sp',cur_tab().SP)");
_tab.win_fml(_o,,'S',,'ICON_BEFORE',"{? cur_tab().ZB || 'xwin16.png:3' || '' ?}");
_tab.win_sel(_o);
tryb:=0;
{? fld<>'' || _tab.find_key(fld()) || _tab.first() ?};
{? _tab.select(,1,10)
|| _wy:=_tab.SYM;
   {? tryb=1
   || PB.SP_V:=_tab.VAT_WYM
   |? tryb=2
   || PB.SP_V:=_tab.VAT_WYM+_tab.VAT_ZAL
   |? tryb=3 | tryb=4 & PB.SP_V=0 & PB.KW=0
   || PB.SP_V:=_tab.SV
   ?};
   {? tryb=1 | tryb=2
   || PB.KW:=(_tab.S*PB.SP_V/_tab.SV)$2
   |? tryb=3 | tryb=4 & PB.SP_V=0 & PB.KW=0
   || PB.KW:=_tab.S
   ?};
   {? tryb & _tab.VAT_WYM
   || PB.SP_WYM:='T'
   ?}
?};
VAR_DEL.delete('tryb');
_wy


\zm_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.22]
:: OPIS: Zmiana okresu na liście dokumentów do wyboru dla przelewu split payment
::----------------------------------------------------------------------------------------------------------------------
ROK_F.cntx_psh(); OKRO_F.cntx_psh();
OKRO_F.win_sel('WER');
OKRO_F.index('FIRMA_NR'); OKRO_F.prefix(REF.FIRMA);
SSTALE.AO();
{? OKRO_F.select(,1)
|| _maska:=OKRO_F.ROK().KOD+form(OKRO_F.NR,-2);
   {? DOK.name()+4<>_maska || DOK.use('doku'+_maska); DOK.prefix() ?};
   {? VPOZ.name()+4<>_maska || VPOZ.use('pozv'+_maska); VPOZ.prefix() ?};
   {? POZ.name()+4<>_maska || POZ.use('pozy'+_maska); POZ.prefix() ?};
   _sort:='NK';
   _from:='left join DOK_REJ using (DOK.DOK_REJ,DOK_REJ.REFERENCE)';
   _where:='((DOK.ODD=:_a) or (:_a=\'\')) and DOK.RVAT IS NOT NULL';
   {? PB.KHNIP<>'' || _where+=' and DOK.NIP=\':_b\'' ?};
   DOK.f_set(_sort,_from,_where,PB.ODD,PB.KHNIP);
   DOK.f_first();
   _okres:=OKRO_F.NAZ+' '+OKRO_F.ROK().NAZ;
   DOK.hdr_sel();
   DOK.hdr_sel('Faktury [%1] '@[_okres])
?};
ROK_F.cntx_pop(); OKRO_F.cntx_pop()


\set_split_field
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PJ] [18.22]
:: OPIS: Ustawienie pól związanych z split-payment (podzieloną płatnością)
::   WE: [_a] = opcjonalny akronim okna
::----------------------------------------------------------------------------------------------------------------------
{? _=0 || _a:=PB.win_edit('?') ?};
{? PB.SP='T'
|| PB.efld_opt(_a,'enable=1',,'SP_V');
   PB.efld_opt(_a,'enable=1',,'KHNIP');
   PB.efld_opt(_a,'enable=1',,'NRFAK')
|| PB.efld_opt(_a,'enable=0',,'SP_V');
   PB.efld_opt(_a,'enable=0',,'KHNIP');
   PB.efld_opt(_a,'enable=0',,'NRFAK')
?}


\sum_pb_vat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.22]
:: OPIS: Podsumowania przelewów SP z VAT
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__SP_SUM');
__SP_SUM:=tab_tmp(2,'RACHUNEK','STRING[50]','Rachunek',
                    'ZT','STRING[1]','Zatwierdzone',
                    'KWOTA','REAL','Kwota',
                    'VAT','REAL','Kwota VAT');

_ref:=PB.ref();
{? PB.f_first()
|| {! |?
      {? ~__SP_SUM.find_key(PB.RD,PB.ZT)
      || __SP_SUM.blank();
         __SP_SUM.RACHUNEK:=PB.RD;
         __SP_SUM.ZT:=PB.ZT;
         __SP_SUM.add()
      ?};
      __SP_SUM.KWOTA+=PB.KW;
      __SP_SUM.VAT+=PB.SP_V;
      __SP_SUM.put();
      PB.f_next()
   !}
?};
PB.f_seek(_ref);

{? __SP_SUM.first()
|| __SP_SUM.for_each("__SP_SUM.RACHUNEK:=RB.get_rbtx(3,__SP_SUM.RACHUNEK,'PL'); __SP_SUM.put()");
   _win:=__SP_SUM.mk_sel('Podsumowanie przelewów Split payment'@,'P',0,'__sp_sum',10,5,15,,'U',,,,,'normal');
   __SP_SUM.win_fld(_win,,'RACHUNEK',,,50,,,'Rachunek'@,,'Rachunek bankowy licencjobiorcy'@);
   __SP_SUM.win_fld(_win,,'ZT',,,10,,,'Zatwierdzone'@,,'Z przelewów zatwierdzonych?'@,2,,"'T'","'N'");
   __SP_SUM.win_fld(_win,,'KWOTA',,,10,2,,'Kwota'@,,'Kwota'@);
   __SP_SUM.win_fld(_win,,'VAT',,,10,2,,'Kwota VAT'@,,'Kwota VAT'@);
   __SP_SUM.win_sel(_win);
   __SP_SUM.select()
|| FUN.emsg('Brak danych do wyświetlenia podsumowania.'@)
?};
VAR_DEL.delete('__SP_SUM')


\set_okpb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [7.51]
:: OPIS: Ustawia odpowiednie okienko redakcyjne przelewow.
::  OLD: \set_okpb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_EDIT.KW:=0;
{? PB.WSK_S='T' & (PB.SP<>'T' | -menu_txt()='popraw')
|| exec('okno_pb','homebank','EDIT_ZB')
|? PB.RODZ='KU'
|| exec('okno_pb','homebank','PB_EDUS1')
|? PB.RODZ='KZ'
|| exec('okno_pb','homebank','PB_ZUS')
|| exec('okno_pb','homebank','PB_EDI'+{? 1+PB.RODZ='W' || 'W' || '1' ?})
?};
{? ~RB.getrrban(PB.RD,REF.INFO,0) || SKID_RBK.blank(1) ?};
{? PAR_SKID.get(68)='T'
|| PB.win_patt('SZUKW')
|| PB.win_patt('SZUK')
?};
1


\bv_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [7.51]
:: OPIS: Przed wyswietleniem, ustawia odpowiednie okienko redakcyjne przelewow elektronicznych
::  OLD: \bd_przel/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
exec('set_split_field','homebank','PB_EDI1');
exec('set_okpb','homebank');
KONTO.K1:=PB.AN;
RACHBANK.KB_1R:=PB.RD;
RACHBANK.KB_1R_BD:='RACHBANK.KB_1R:=RB.get_rbtx(2,RACHBANK.KB_1R,\'\')';
RACHBANK.RB_LB_PB:=PB.RD;
RACHBANK.RB_KH_PB:=PB.RW;
VAR_EDIT.KW:=0;
PB.display()

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:39 092cb2ba5fa0f1ae7290517ccfbc7c0590eae680dcee075fc1bedfeb7e2fc1db99ba8e1059b77dc0c9f5cb3d917ef689b21446c126d31072be8d46753c5ca274e5903d520c1271e65c8c41a0a516a9aad762554752cebe1fefe0978de3515624d5104bdc87513586f803605d41d3c87afcea22af290c00af8181fb0f557682fc
