:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: phr_poczta.fml
:: Utworzony: 11.09.2017
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Obsługa powiadomień.
::======================================================================================================================


\sendtab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła zwraca tabelę tymczasową wraz z interfejsem do obsługi powiadomień z obszaru roboczego.
::   WE: [_a] [STRING] - Tytuł / opis / nazwa powiadomienia [domyślnie: 'Powiadomienie'].
::       [_b] [NUMBER] - Prezentacja pojedynczego powiadomienia:
::                         0 - Nie [domyślnie];
::                         1 - Tak.
::   WY: Tabela tymczasowa.
::----------------------------------------------------------------------------------------------------------------------
_name:={? var_pres('_a')=type_of('') || _a || 'Powiadomienie'@ ?};
_single:=var_pres('_b')=type_of(0) & _b;

_multi:=~_single;

_SENDTAB:=tab_tmp(2,
   'NAZWISKO','STRING[%1]' [$MS.fld_len(OSOBA,'NAZWISKO')],MS.name(OSOBA,'NAZWISKO'),
   'PIERWSZE','STRING[%1]' [$MS.fld_len(OSOBA,'PIERWSZE')],MS.name(OSOBA,'PIERWSZE'),
   'RESULT','STRING[32]','Wiadomość'@,
   'SUB','STRING[%1]' [$MS.fld_len(POCZTA,'SUB')],'Temat'@,
   'TO','STRING[%1]' [$MS.fld_len(POCZTAR,'SRCV')],'Odbiorca'@,
   'BODYH','SYS_MEMO','Treść'@,
   'BOX','STRING[1]','W skrzynce'@,
:: Pole / formuła techniczna wykonywana po wysłaniu (umieszczeniu w skrzynce odbiorczej).
:: Formuła MUSI zwracać wynik operacji: 0/1.
   'AS','STRING[255]','Po wysłaniu'@
);
_SENDTAB.fld_fml('BOX','BLANK',"'N'");
_SENDTAB.fld_fml('AS','BLANK',"'1'");

{? _multi
|| _mob:='mobile_visible=1';
   _ws:=_SENDTAB.mk_sel('Powiadomienia'@,,,,,,,,'U',,,,,'html_maximized');
   _SENDTAB.win_fld(_ws,,'NAZWISKO',,,25,,,,,MS.comment(ZZ_OSOBA,'NAZWISKO'),,,,,,_mob);
   _SENDTAB.win_fld(_ws,,'PIERWSZE',,,15,,,,,MS.comment(ZZ_OSOBA,'PIERWSZE'),,,,,,_mob);
   _SENDTAB.win_fld(_ws,,'RESULT',,,16,,,,,'Rezultat przygotowania powiadomienia'@);
   _SENDTAB.win_fld(_ws,,'BOX',,,,,,,,'Wiadomość umieszczono w skrzynce nadawczej [T/N]'@,2,,"'T'","'N'",,_mob);
   _SENDTAB.win_fld(_ws,,'SUB',,,35,,,,,'Temat'@,,,,,,_mob);
   _SENDTAB.win_fld(_ws,,'TO',,,35,,,,,'Adres odbiorcy wiadomości'@);
   _SENDTAB.win_act(_ws,,'Usuń',,,'Usunięcie bieżącego zapisu'@,,,,1);
   _SENDTAB.win_act(_ws,,'Formuła','&Wyślij'@@,,'Umieszczenie wszystkich wiadomości w skrzynce nadawczej'@,
      $("_SENDTAB:=cur_tab(1,1);
         _SENDTAB.cntx_psh();
         {? _SENDTAB.first()
         || FUN.prg_start(_SENDTAB.size());
            _args:=exec('add_email_a','#mailbox');
            {!
            |? _next:=FUN.prg_next(,'%1 - %2\n%3'@ ['"+_name+"','wysyłanie'@,_SENDTAB.NAZWISKO+' '+_SENDTAB.PIERWSZE]);
               {? _SENDTAB.RESULT='OK' & _SENDTAB.BOX<>'T'
               || _args.SUB:=_SENDTAB.SUB;
                  _args.RCV:=_SENDTAB.TO;
                  _args.BODYH:=_SENDTAB.memo_txt(,1,'BODYH');
                  {? exec('add_email','#mailbox',_args) & ($_SENDTAB.AS)()
                  || _SENDTAB.BOX:='T'
                  ?};
                  _SENDTAB.put()
               ?};
               _next & _SENDTAB.next()
            !};
            FUN.prg_stop()
         ?};
         _SENDTAB.cntx_pop();
         ~~
      "),,1,,,,
      'W'
   );
   _SENDTAB.win_btn(_ws,'text=%1' ['Usuń'@],'menu:U',,,,,,'noempty');
   _btn:=_SENDTAB.win_btn(_ws,'text=%1,panel=bottom,align=end' ['Wyślij'@],'menu:W',,,,,,'noempty');
   _SENDTAB.btn_sopt(_ws,_btn,'default=1');
   _SENDTAB.win_act(_ws,,'Szukaj');
   _SENDTAB.win_act(_ws,,'Kolejność');
   _SENDTAB.win_sel(_ws)
?};

_dl:=80;
{! _lp:=0 .. _multi
:: Jeżeli struktury budowane są dla prezentacji wielu powiadomień, to potrzebne są dwa okna:
::    0 - do podglądu;
::    1 - do szukania.
|! _we:=_SENDTAB.mk_edit('Powiadomienie'@,,,,,'html_maximized');
   _SENDTAB.win_esep(_we,'Oceniający'@);
   _SENDTAB.win_efld(_we,,'NAZWISKO',,,_dl,,,,,MS.comment(OSOBA,'NAZWISKO'));
   _SENDTAB.win_efld(_we,,'PIERWSZE',,,_dl,,,,,MS.comment(OSOBA,'PIERWSZE'));
   _SENDTAB.win_esep(_we,'Rezultat'@);
   _SENDTAB.win_efld(_we,,'RESULT',,,_dl,,,,,'Rezultat przygotowania powiadomienia'@);
   {? _multi
   || {? _lp=0
      || _SENDTAB.win_efld(_we,,'BOX',,,,,,,,,'check-box',
            'check_label="%1"' ['Tak, wiadomość została umieszczona w skrzynce nadawczej'@],
            "'T'","'N'"
         )
      || _SENDTAB.win_efld(_we,,'BOX',,,,,,,,,'check-box',
            'check_label="%1"' ['Tak, wiadomość została umieszczona w skrzynce nadawczej'@],
            "'T'","'N'","''"
         )
      ?}
   ?};
   _SENDTAB.win_esep(_we,'Dane szczegółowe'@);
   _SENDTAB.win_efld(_we,,'SUB',,,_dl,,,,,'Tytuł wiadomości'@);
   _SENDTAB.win_efld(_we,,'TO',,,_dl,,,,,'Adres odbiorcy wiadomości'@);
   {? _lp=0
::    Szukanie po polu typu SYS_MEMO i tak nie jest mozliwe - nie pokazujmy tego pola w oknie wzorca.
   || _SENDTAB.win_efld(_we,,'BODYH',,,_dl,-7,,,,'Treść wiadomości'@)
   ?};

   {? _lp=0
   || _SENDTAB.win_edit(_we)
   || exec('ok_esc','#window',_SENDTAB,_we);
      _SENDTAB.win_patt(_we)
   ?}

!};
_SENDTAB


\zo_osoba_main_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła zwraca tablicę elementów nazwanych będącą obowiązkowym argumentem wywołania formuły \zo_osoba_main
::       (patrz poniżej). Elementami tablicy są formuły, które będą wykonywane z poziomu (przekazanego parametrem
::       wejściowym czynności) uczestnika sesji ocen (ZO_OSOBA). Przed wykonaniem formuł zapamiętywane są konteksty
::       tabel: ZO_OSOBA, ZO_PROG, ZO_PROC, ZZ_OSOBA, P.
::       O konteksty pozostałych tabel, które są używane przez formuły musi zadbać programista.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('obj_ntab_set','#array',,
:: Warunek kontroli merytorycznej  - czy dla danego uczestnika sesji ocen ma być generowane powiadomienie?
   'warunek',"0",
:: Tytuł tworzonego powiadomienia.
   'tytul',"''",
:: Treść tworzonego powiadomienia (w formacie HTML).
   'tresc',"''"
)


\zo_osoba_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Główna formuła czynności obsługującących powiadomienia wysyłane na podstawie formularza oceny (ZO_OSOBA).
::       Uwaga: czynności tego typu muszą spełniać odpowiednie warunki dotyczące parametrów oraz nazewnictwa zawartych
::              w nich formuł.
::   WE: _a [ARRAY] - Tablica paramerów (patrz powyżej: \zo_osoba_main_a).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Poniższe linie mają charakter informacyjny - mówią o parametrach, które muszą być zdefiniowane w każdej z czynności
:: typu "powiadomienie na podstawie formularza oceny (ZO_OSOBA)".
::
::# properties=SERVICE
::
::# kind=WE, symbol=ZO_OSOBA, type=_ZO_OSOBA, name=Wskazanie uczestnika sesji ocen, required=T, keyref=T
::
:: Wynik działania czynności. Parametr szczególnie istotny w przypadku uruchomienia czynności usługowej.
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik czynności ((OK,BŁĄD,POMIŃ|xxx))", required=N
::
::# kind=WY, symbol=SUB, type=STRING, name=Temat, required=N
::# kind=WY, symbol=TO, type=MEMO, name=Odbiorca, required=N
::# kind=WY, symbol=BODYH, type=MEMO, name=Treść w formacie HTML, required=N
::
_par:=params_get();
_mp:=_par.mp;

_keyRefs:=_mp.getRefs();
{? var_pres('[1]',_keyRefs)<=0
|| _mp.error('Nieprawidłowy parametr wejściowy.');
   return()
?};

_in:=_par.in;
_out:=_par.out;
_out.SUB:='Powiadomienie dla uczestnika sesji ocen';
_out.TO:='';
_out.BODYH:='';

_args:=_a;

_nazwisko:=_pierwsze:='';

ZO_OSOBA.cntx_psh();
ZO_OSOBA.prefix();
{? ZO_OSOBA.seek(_in.ZO_OSOBA)
|| ZO_PROC.cntx_psh();
   ZO_PROC.prefix();
   ZO_PROG.cntx_psh();
   ZO_PROG.prefix();
   ZO_OSOBA.ZO_PROC().ZO_PROG();
   ZZ_OSOBA.cntx_psh();
   ZZ_OSOBA.prefix();
   _dok:=ZO_OSOBA.ZZ_OSOBA().ZZ_LINK;
   _nazwisko:=ZZ_OSOBA.NAZWISKO;
   _pierwsze:=ZZ_OSOBA.PIERWSZE;
   P.cntx_psh();
   P.index('ZZ_DOK');
   P.prefix(ref_name(_dok),_dok);
   {? P.first()
   || _user:=exec('osoba2user','users',P.OSOBA);
      {? _user<>null()
      || USERS.cntx_psh();
         USERS.prefix();
         {? USERS.seek(_user) & USERS.EMAIL<>''
         || {? _args.warunek()
            || _out.RESULT:='OK';
               _out.SUB:=_args.tytul();
               _out.TO:=USERS.EMAIL;
               _out.BODYH:=_args.tresc()
            || _out.RESULT:='POMIŃ|WARUNEK';
               _out.BODYH:='Zgodnie z nałożonymi warunkami powiadomienie na adres %1 nie zostanie wysłane.'
                  [USERS.EMAIL]
            ?}
         || _out.RESULT:='POMIŃ|ADRES';
            _out.BODYH:='%1 - brak adresu email. Powiadomienie nie zostanie wysłane.'
               [exec('record','#to_string',P.ref())]
         ?};
         USERS.cntx_pop()
      || _out.RESULT:='POMIŃ|UŻYTKOWNIK';
         _out.BODYH:='%1 - brak możliwości logowania się do systemu (brak użytkownika). '
            'Powiadomienie nie zostanie wysłane.' [exec('record','#to_string',P.ref())]
      ?}
   || _out.RESULT:='BŁĄD';
      _out.BODYH:='Ustalenie pracownika - uczestnika oceny na podstawie formularza (%1) nie było możliwe. '
         'Powiadomienie nie zostanie wysłane.' [$ZO_OSOBA.ref()]
   ?};
   P.cntx_pop();
   ZZ_OSOBA.cntx_pop();
   ZO_PROG.cntx_pop();
   ZO_PROC.cntx_pop()
|| _out.RESULT:='BŁĄD';
   _out.BODYH:='Odnalezienie uczestnika sesji ocen (%1) nie powiodło się.'
      'Powiadomienie nie zostanie wysłane.' [$_in.ZO_OSOBA]
?};
ZO_OSOBA.cntx_pop();

_dialog:=~(_mp.isService() | _mp.isAutoRun());

{? _mp.pathArea()
|| _cntx:=_par.context;
   _cntx.RESULT:=_out.RESULT;
   _cntx.SUB:=_out.SUB;
   _cntx.TO:=_out.TO;
   _cntx.BODYH:=_out.BODYH
|? _dialog
|| _SENDTAB:=exec('sendtab','phr_poczta',_out.SUB,1);
   _we:=_SENDTAB.win_edit('?');
   _cfg:=obj_new('akcja');
   _cfg.akcja:='';
   params_set('cfg',_cfg);
   exec('zakoncz','#window',_SENDTAB,_we,1,"params_get().cfg.akcja:='Zakończ'; 'key:F2'",1);
   exec('ok_esc','#window',_SENDTAB,_we,1,,,0,1);
   _SENDTAB.blank();
   _SENDTAB.NAZWISKO:=_nazwisko;
   _SENDTAB.PIERWSZE:=_pierwsze;
   _SENDTAB.RESULT:=_out.RESULT;
   _SENDTAB.SUB:=_out.SUB;
   _SENDTAB.TO:=_out.TO;
   _SENDTAB.memo_set(_out.BODYH,'BODYH');
   _SENDTAB.add();
   _SENDTAB.memo_put(,'BODYH');
   _SENDTAB.display()
?};

_mp.save(,_out);
{? _dialog
|| {? _cfg.akcja='Zakończ'
   || _mp.done()
   || _mp.keep()
   ?}
|| _mp.done()
?};
~~


\zo_osoba_desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła opisu zadania obsługującącego powiadomienia wysyłane na podstawie formularza oceny (ZO_OSOBA).
::   WE: _a [STRING] - Przedrostek opisu.
::       [_b] [INTEGER] - Argument określa czy zwracany będzie opis [0 - domyślnie] lub zwracana będzie tablica nazwana
::       z elementami do opisu [1]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_desc:={? var_pres('_a')=type_of('') || _a || 'Wyślij powiadomienie'@ ?};
_mode:={? var_pres('_b')=type_of(0) & _b || _b || 0 ?};
{? _mode || _tab:=exec('desc_tab','phr_dane') ?};

_mp:=params_get().mp;
_keyRefs:=_mp.getRefs();
_ref:={? var_pres('[1]',_keyRefs) || _keyRefs[1] || _mp.load(exec('kind_in','#b_port')).ZO_OSOBA ?};

ZO_OSOBA.cntx_psh();
ZO_OSOBA.prefix();
{? ZO_OSOBA.seek(_ref)
|| ZO_PROC.cntx_psh();
   ZO_PROC.prefix();
   ZO_PROG.cntx_psh();
   ZO_PROG.prefix();
   ZO_OSOBA.ZO_PROC().ZO_PROG();
   ZZ_OSOBA.cntx_psh();
   ZZ_OSOBA.prefix();
   ZO_OSOBA.ZZ_OSOBA();
   {? ~_mode
   || _desc+=
      ' [Program: %1 (%2) | Oceniany okres: %3 - %4 | Termin: %5 | %6 %7 (%8)]'@
         [
            ZO_PROG.NAZWA,ZO_PROG.RODZAJ,
            $ZO_PROC.OKRES_OD,$ZO_PROC.OKRES_DO,
            $ZO_PROC.PLAN_DO,
            ZZ_OSOBA.NAZWISKO,ZZ_OSOBA.PIERWSZE,ZZ_OSOBA.PESEL
         ]
   || _tab.ZAW_DANE:='T';
      _tab.NAZWA:=ZO_PROG.NAZWA;
      _tab.RODZAJ:=ZO_PROG.RODZAJ;
      _tab.OKRES_OD:=$ZO_PROC.OKRES_OD;
      _tab.OKRES_DO:=$ZO_PROC.OKRES_DO;
      _tab.PLAN_DO:=$ZO_PROC.PLAN_DO;
      _tab.ZZ_NAZWISKO:=ZZ_OSOBA.NAZWISKO;
      _tab.ZZ_PIERWSZE:=ZZ_OSOBA.PIERWSZE;
      _tab.ZZ_PESEL:=ZZ_OSOBA.PESEL
   ?};
   ZZ_OSOBA.cntx_pop();
   ZO_PROG.cntx_pop();
   ZO_PROC.cntx_pop()
?};
ZO_OSOBA.cntx_pop();

{? _mode || _tab || _desc ?}


\szk_prac_main_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła zwraca tablicę elementów nazwanych będącą obowiązkowym argumentem wywołania formuły \szk_prac_main
::       (patrz poniżej). Elementami tablicy są formuły, które będą wykonywane z poziomu (przekazanego parametrem
::       wejściowym czynności) uczestnika szkolenia (SZK_PRAC). Przed wykonaniem formuł zapamiętywane są konteksty
::       tabel:
::       O konteksty pozostałych tabel, które są używane przez formuły musi zadbać programista.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('obj_ntab_set','#array',,
:: Warunek kontroli merytorycznej  - czy dla danego uczestnika szkolenia ma być generowane powiadomienie?
   'warunek',"0",
:: Tytuł tworzonego powiadomienia.
   'tytul',"''",
:: Treść tworzonego powiadomienia (w formacie HTML).
   'tresc',"''"
)


\szk_prac_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Główna formuła czynności obsługującących powiadomienia wysyłane do uczestników szkoleń (SZK_PRAC).
::       Uwaga: czynności tego typu muszą spełniać odpowiednie warunki dotyczące parametrów oraz nazewnictwa zawartych
::              w nich formuł.
::   WE: _a [ARRAY] - Tablica paramerów (patrz powyżej: \szk_prac_main_a).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Poniższe linie mają charakter informacyjny - mówią o parametrach, które muszą być zdefiniowane w każdej z czynności
:: typu "powiadomienie dla uczestnika szkolenia (SZK_PRAC)".
::
::# properties=SERVICE
::
::# kind=WE, symbol=SZK_PRAC, type=_SZK_PRAC, name=Wskazanie uczestnika szkolenia, required=T, keyref=T
::
:: Wynik działania czynności. Parametr szczególnie istotny w przypadku uruchomienia czynności usługowej.
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik czynności ((OK,BŁĄD,POMIŃ|xxx))", required=N
::
::# kind=WY, symbol=SUB, type=STRING, name=Temat, required=N
::# kind=WY, symbol=TO, type=MEMO, name=Odbiorca, required=N
::# kind=WY, symbol=BODYH, type=MEMO, name=Treść w formacie HTML, required=N
::
_par:=params_get();
_mp:=_par.mp;

_keyRefs:=_mp.getRefs();
{? var_pres('[1]',_keyRefs)<=0
|| _mp.error('Nieprawidłowy parametr wejściowy.');
   return()
?};

_in:=_par.in;
_out:=_par.out;
_out.SUB:='Powiadomienie dla uczestnika szkolenia';
_out.TO:='';
_out.BODYH:='';

_args:=_a;

_nazwisko:=_pierwsze:='';

SZK_PRAC.cntx_psh();
SZK_PRAC.prefix();
{? SZK_PRAC.seek(_in.SZK_PRAC)
|| P.cntx_psh();
   P.prefix();
   OSOBA.cntx_psh();
   OSOBA.prefix();
   {? SZK_PRAC.P().OSOBA().get()
   || _nazwisko:=OSOBA.NAZWISKO;
      _pierwsze:=OSOBA.PIERWSZE;
      _user:=exec('osoba2user','users',P.OSOBA);
      {? _user<>null()
      || USERS.cntx_psh();
         USERS.prefix();
         {? USERS.seek(_user) & USERS.EMAIL<>''
         || _withMsg:=1;
            _warunek:=_args.warunek(_withMsg);
            {? _warunek.RESULT
            || _out.RESULT:='OK';
               _out.SUB:=_args.tytul();
               _out.TO:=USERS.EMAIL;
               _out.BODYH:=_args.tresc()
            || _out.RESULT:='POMIŃ|WARUNEK';
               _out.BODYH:=_warunek.MSG
            ?}
         || _out.RESULT:='POMIŃ|ADRES';
            _out.BODYH:='%1 - brak adresu email. Powiadomienie nie zostanie wysłane.'
               [exec('record','#to_string',P.ref())]
         ?};
         USERS.cntx_pop()
      || _out.RESULT:='POMIŃ|UŻYTKOWNIK';
         _out.BODYH:='%1 - brak możliwości logowania się do systemu (brak użytkownika). '
            'Powiadomienie nie zostanie wysłane.' [exec('record','#to_string',P.ref())]
      ?}
   || _out.RESULT:='BŁĄD';
      _out.BODYH:='Ustalenie pracownika/osoby - uczestnika szkolenia (%1) nie było możliwe. '
         'Powiadomienie nie zostanie wysłane.' [$SZK_PRAC.ref()]
   ?};
   OSOBA.cntx_pop();
   P.cntx_pop()
|| _out.RESULT:='BŁĄD';
   _out.BODYH:='Odnalezienie uczestnika szkolenia (%1) nie powiodło się.'
      'Powiadomienie nie zostanie wysłane.' [$_in.SZK_PRAC]
?};
SZK_PRAC.cntx_pop();

_dialog:=~(_mp.isService() | _mp.isAutoRun());

{? _mp.pathArea()
|| _cntx:=_par.context;
   _cntx.RESULT:=_out.RESULT;
   _cntx.SUB:=_out.SUB;
   _cntx.TO:=_out.TO;
   _cntx.BODYH:=_out.BODYH
|? _dialog
|| _SENDTAB:=exec('sendtab','phr_poczta',_out.SUB,1);
   _we:=_SENDTAB.win_edit('?');
   _cfg:=obj_new('akcja');
   _cfg.akcja:='';
   params_set('cfg',_cfg);
   exec('zakoncz','#window',_SENDTAB,_we,1,"params_get().cfg.akcja:='Zakończ'; 'key:F2'",1);
   exec('ok_esc','#window',_SENDTAB,_we,1,,,0,1);
   _SENDTAB.blank();
   _SENDTAB.NAZWISKO:=_nazwisko;
   _SENDTAB.PIERWSZE:=_pierwsze;
   _SENDTAB.RESULT:=_out.RESULT;
   _SENDTAB.SUB:=_out.SUB;
   _SENDTAB.TO:=_out.TO;
   _SENDTAB.memo_set(_out.BODYH,'BODYH');
   _SENDTAB.add();
   _SENDTAB.memo_put(,'BODYH');
   _SENDTAB.display()
?};

_mp.save(,_out);
{? _dialog
|| {? _cfg.akcja='Zakończ'
   || exec('szk_prac_as','phr_poczta',$_in.SZK_PRAC);
      _mp.done()
   || _mp.keep()
   ?}
|| {? ~_mp.pathArea()
::    Jeżeli uruchamiany z obszaru, to zawsze przechodzimy przez obsługę opartą na tabeli _SENDTAB. I tam można się
::    jeszcze wycofać z wysyłania.
   || exec('szk_prac_as','phr_poczta',$_in.SZK_PRAC)
   ?};
   _mp.done()
?};

~~


\szk_prac_desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła opisu zadania obsługującącego powiadomienia wysyłane do uczestników szkoleń (SZK_PRAC).
::   WE: _a [STRING] - Przedrostek opisu.
::       [_b] [INTEGER] - Argument określa czy zwracany będzie opis [0 - domyślnie] lub zwracana będzie tablica nazwana
::       z elementami do opisu [1]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_desc:={? var_pres('_a')=type_of('') || _a || 'Wyślij powiadomienie do uczestnika szkolenia'@ ?};
_mode:={? var_pres('_b')=type_of(0) & _b || _b || 0 ?};
{? _mode || _tab:=exec('init_desc_tab','pracownik') ?};

_mp:=params_get().mp;
_keyRefs:=_mp.getRefs();
_ref:={? var_pres('[1]',_keyRefs) || _keyRefs[1] || _mp.load(exec('kind_in','#b_port')).SZK_PRAC ?};

P.cntx_psh();
P.prefix();
SZK_PRAC.cntx_psh();
SZK_PRAC.prefix();
{? SZK_PRAC.seek(_ref)
|| {? ~_mode
   || _desc+=': %1'@[exec('record','#to_string',SZK_PRAC.P,1)]
   || {? P.seek(SZK_PRAC.P,,1)
      || _tab.ZAW_DANE:='T';
         _tab.NAZWISKO:=P.OSOBA().NAZWISKO;
         _tab.PIERWSZE:=OSOBA.PIERWSZE;
         _tab.OBCY:=OSOBA.OBCY;
         _tab.PASZPORT:=OSOBA.PASZPORT;
         _tab.PESEL:=OSOBA.PESEL;
         _tab.UR_DATA:=$OSOBA.UR_DATA;
         _tab.T:=P.T;
         _tab.IP:=$P.IP
      ?}
   ?}
?};
SZK_PRAC.cntx_pop();
P.cntx_pop();

{? _mode || _tab || _desc ?}


\szk_prac_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła wykonywana po umieszczeniu wiadomości w skrzynce.
::   WE: _a [STRING] - Wskazanie (SQL-ref) uczestnika szkolenia.
::   WY: Wynik operacji: 1/0.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=SZK_PRAC
|| _ref:=_a
|| return(0)
?};

_ret:=0;
SZK_PRAC.cntx_psh();
SZK_PRAC.prefix();
{? SZK_PRAC.seek(_ref)
|| {? SZK_PRAC.EMAIL='T'
   || _ret:=1
   || SZK_PRAC.EMAIL:='T';
      _ret:=SZK_PRAC.put()
   ?}
?};
SZK_PRAC.cntx_pop();
_ret


\szk_opis_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła, dla wskazanego rekordu tabeli SZK_OPIS zwraca (w postaci HTML-a) informacje o szkoleniu.
::   WE: _a [REFERENCE] - Wskazanie opisu szkolenia.
::   WY:
::  OLD: \szkPracInfo/zz_mail.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=SZK_OPIS
|| _ref:=_a
|| return('')
?};

_ret:='';
SZK_OPIS.cntx_psh();
SZK_OPIS.prefix();
{? SZK_OPIS.seek(_ref)
|| SZK_ORG.cntx_psh();
   SZK_ORG.prefix();
   SZK_TEM.cntx_psh();
   SZK_TEM.prefix();

   _append:="
      _str:='';
      {! _arg:=1 .. _
      |! {? +_[_arg]
         || _str+={? +_str || _str+=', ' || '' ?}+_[_arg]
         ?}
      !};
      _str
   ";
   _adres:=_append(SZK_OPIS.MIEJSCE,SZK_OPIS.MIASTO,SZK_OPIS.ULICA);

   _ret:=
      'Temat: <b>%1</b><br>'
      'Data rozpoczęcia: <b>%2</b><br>'
      'Data zakończenia: <b>%3</b><br>'
      'Organizowane przez: <b>%4</b><br>'
      [SZK_OPIS.TEMAT().TEMAT,SZK_OPIS.OD$4,SZK_OPIS.DO$4,SZK_OPIS.ORG().NAZWA];
   {? +_adres
   || _ret+='Adres: <b>%1</b><br>' [_adres]
   ?};
   {? +SZK_OPIS.TEL
   || _ret+='Telefon: <b>%1</b><br>' [SZK_OPIS.TEL]
   ?};
   _ret+='Egzamin po szkoleniu: <b>%1</b><br>' [{? SZK_OPIS.EGZAMIN='T' || 'Tak' || 'Nie' ?}];

   SZK_TEM.cntx_pop();
   SZK_ORG.cntx_pop()
?};
SZK_OPIS.cntx_pop();
_ret


\za_form_main_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła zwraca tablicę elementów nazwanych będącą obowiązkowym argumentem wywołania formuły \za_form_main
::       (patrz poniżej). Elementami tablicy są formuły, które będą wykonywane z poziomu (przekazanego parametrem
::       wejściowym czynności) formularza ankiety (ZA_FORM). Przed wykonaniem formuł zapamiętywane są konteksty
::       tabel: ZA_FORM, ZZ_OSOBA, P.
::       O konteksty pozostałych tabel, które są używane przez formuły musi zadbać programista.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('obj_ntab_set','#array',,
:: Warunek kontroli merytorycznej  - czy dla danego uczestnika ankiety ma być generowane powiadomienie?
   'warunek',"0",
:: Tytuł tworzonego powiadomienia.
   'tytul',"''",
:: Treść tworzonego powiadomienia (w formacie HTML).
   'tresc',"''"
)


\za_form_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Główna formuła czynności obsługującących powiadomienia wysyłane na podstawie formularza ankiety (ZA_FORM).
::       Uwaga: czynności tego typu muszą spełniać odpowiednie warunki dotyczące parametrów oraz nazewnictwa zawartych
::              w nich formuł.
::   WE: _a [ARRAY] - Tablica paramerów (patrz powyżej: \za_form_main_a).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Poniższe linie mają charakter informacyjny - mówią o parametrach, które muszą być zdefiniowane w każdej z czynności
:: typu "powiadomienie na podstawie formularza ankiety (ZA_FORM)".
::
::# properties=SERVICE
::
::# kind=WE, symbol=ZA_FORM, type=_ZA_FORM, name=Wskazanie na formularzz ankiety, required=T, keyref=T
::
:: Wynik działania czynności. Parametr szczególnie istotny w przypadku uruchomienia czynności usługowej.
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik czynności ((OK,BŁĄD,POMIŃ|xxx))", required=N
::
::# kind=WY, symbol=SUB, type=STRING, name=Temat, required=N
::# kind=WY, symbol=TO, type=MEMO, name=Odbiorca, required=N
::# kind=WY, symbol=BODYH, type=MEMO, name=Treść w formacie HTML, required=N
::
_par:=params_get();
_mp:=_par.mp;

_keyRefs:=_mp.getRefs();
{? var_pres('[1]',_keyRefs)<=0
|| _mp.error('Nieprawidłowy parametr wejściowy.');
   return()
?};

_in:=_par.in;
_out:=_par.out;
_out.SUB:='Powiadomienie dla uczestnika przeprowadzanej ankiety';
_out.TO:='';
_out.BODYH:='';

_args:=_a;

_nazwisko:=_pierwsze:='';

ZA_FORM.cntx_psh();
ZA_FORM.prefix();
{? ZA_FORM.seek(_in.ZA_FORM)
|| ZZ_OSOBA.cntx_psh();
   P.cntx_psh();
   P.index('ZZ_DOK');
   _dok:=ZA_FORM.ZZ_LINK;
   _nazwisko:=ZZ_OSOBA.NAZWISKO;
   _pierwsze:=ZZ_OSOBA.PIERWSZE;
   P.prefix(ref_name(_dok),_dok);
   {? P.first()
   || _user:=exec('osoba2user','users',P.OSOBA);
      {? _user<>null()
      || USERS.cntx_psh();
         USERS.prefix();
         {? USERS.seek(_user) & USERS.EMAIL<>''
         || {? _args.warunek()
            || _out.RESULT:='OK';
               _out.SUB:=_args.tytul();
               _out.TO:=USERS.EMAIL;
               _out.BODYH:=_args.tresc()
            || _out.RESULT:='POMIŃ|WARUNEK';
               _out.BODYH:='Zgodnie z nałożonymi warunkami powiadomienie na adres %1 nie zostanie wysłane.'
               [USERS.EMAIL]
            ?}
         || _out.RESULT:='POMIŃ|ADRES';
            _out.BODYH:='%1 - brak adresu email. Powiadomienie nie zostanie wysłane.'
               [exec('record','#to_string',P.ref())]
         ?};
         USERS.cntx_pop()
      || _out.RESULT:='POMIŃ|UŻYTKOWNIK';
         _out.BODYH:='%1 - brak możliwości logowania się do systemu (brak użytkownika). '
            'Powiadomienie nie zostanie wysłane.' [exec('record','#to_string',P.ref())]
      ?}
    || _out.RESULT:='BŁĄD';
       _out.BODYH:='Ustalenie pracownika - uczestnika oceny na podstawie formularza (%1) nie było możliwe. '
          'Powiadomienie nie zostanie wysłane.' [$ZA_FORM.ref()]
    ?};
    P.cntx_pop();
    ZZ_OSOBA.cntx_pop()
|| _out.RESULT:='BŁĄD';
   _out.BODYH:='Odnalezienie ankiety (%1) nie powiodło się.'
            'Powiadomienie nie zostanie wysłane.' [$_in.ZA_FORM]
?};
ZA_FORM.cntx_pop();

_dialog:=~(_mp.isService() | _mp.isAutoRun());

{? _mp.pathArea()
|| _cntx:=_par.context;
   _cntx.RESULT:=_out.RESULT;
   _cntx.SUB:=_out.SUB;
   _cntx.TO:=_out.TO;
   _cntx.BODYH:=_out.BODYH
|? _dialog
|| _SENDTAB:=exec('sendtab','phr_poczta',_out.SUB,1);
   _we:=_SENDTAB.win_edit('?');
   _cfg:=obj_new('akcja');
   _cfg.akcja:='';
   params_set('cfg',_cfg);
   exec('zakoncz','#window',_SENDTAB,_we,1,"params_get().cfg.akcja:='Zakończ'; 'key:F2'",1);
   exec('ok_esc','#window',_SENDTAB,_we,1,,,0,1);
   _SENDTAB.blank();
   _SENDTAB.NAZWISKO:=_nazwisko;
   _SENDTAB.PIERWSZE:=_pierwsze;
   _SENDTAB.RESULT:=_out.RESULT;
   _SENDTAB.SUB:=_out.SUB;
   _SENDTAB.TO:=_out.TO;
   _SENDTAB.memo_set(_out.BODYH,'BODYH');
   _SENDTAB.add();
   _SENDTAB.memo_put(,'BODYH');
   _SENDTAB.display()
?};

_mp.save(,_out);
{? _dialog
|| {? _cfg.akcja='Zakończ'
   || _mp.done()
   || _mp.keep()
   ?}
|| _mp.done()
?};
~~


\za_form_desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła opisu zadania obsługującącego powiadomienia wysyłane do uczestników ankiety (ZA_FORM).
::   WE: _a [STRING] - Przedrostek opisu.
::       [_b] [INTEGER] - Argument określa czy zwracany będzie opis [0 - domyślnie] lub zwracana będzie tablica nazwana
::       z elementami do opisu [1]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_desc:={? var_pres('_a')=type_of('') || _a || 'Wyślij powiadomienie do uczestnika ankiety'@ ?};
_mode:={? var_pres('_b')=type_of(0) & _b || _b || 0 ?};
{? _mode || _tab:=exec('init_desc_tab','pracownik') ?};

_mp:=params_get().mp;
_keyRefs:=_mp.getRefs();
_ref:={? var_pres('[1]',_keyRefs) || _keyRefs[1] || _mp.load(exec('kind_in','#b_port')).ZA_FORM ?};

ZA_FORM.cntx_psh();
ZA_FORM.prefix();
{? ZA_FORM.seek(_ref)
|| P.cntx_psh();
   P.index('ZZ_DOK');
   P.prefix(ZA_FORM.NP_DOK,ZA_FORM.ZZ_LINK);
   {? P.first()
   || {? _mode
      || OSOBA.cntx_psh();
         _tab.ZAW_DANE:='T';
         _tab.NAZWISKO:=P.OSOBA().NAZWISKO;
         _tab.PIERWSZE:=OSOBA.PIERWSZE;
         _tab.OBCY:=OSOBA.OBCY;
         _tab.PASZPORT:=OSOBA.PASZPORT;
         _tab.PESEL:=OSOBA.PESEL;
         _tab.UR_DATA:=$OSOBA.UR_DATA;
         _tab.T:=P.T;
         _tab.IP:=$P.IP;
         OSOBA.cntx_pop()
      || _desc+=': %1'@[exec('record','#to_string',P.ref(),1)]
      ?}
   || {? _mode || _tab.ZAW_DANE:='N' ?}
   ?};
   P.cntx_pop()
?};
ZA_FORM.cntx_pop();

{? _mode || _tab || _desc ?}

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:39 c01b61491d19f7160726fe886a8db0283040da9cdbef80f07dca6b9b9146661a31e34312b3ef947be1aca8e0dec43a7ef2d5c371d9b873b03d77f65dd0fa6f3ea1ea82c0de14d247f702bf7f4d94d2ff2ef63926ab53ee352f2443dfc137fb3b68ad56f1166012f42ab4519600c487355e5a5077cf2ec4f80f5f7f79dbebb1d9
