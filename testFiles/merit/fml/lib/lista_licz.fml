:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: lista_licz.fml
:: Utworzony: 2016/02/29
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły bibioteczne dla naliczeń listy płac.
::======================================================================================================================


\retry_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Treść komunikatu o konieczności powtórzenia wyliczeń.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Należy uzupełnić brakującą informację i powtórzyć obliczenia.'@


\nie_lista_isplac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Zwraca symbol wstawiany w pole LT (lista) tabeli IS_WYPL i IS_ROZL dla świadczeń, które nie są rozliczane na
::       listach płac.
::   WE:
::   WY:
::  OLD: \zab_lt/isplac.fml
::----------------------------------------------------------------------------------------------------------------------
'< ---- >'


\hsx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Procedura dla biezacego rekordu tabeli H ustala wartosci kwotowe elementow umowy o prace.
::   WE: _a - data badania stanu (obowiazkowa)
::       _b - data badania kursu (opcjonalna)
::       _c - ustalenia kursu waluty dla sprawozdania GUS (opcjonalna)
::   WY: tablica z wynikami
::  OLD: \hsx/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
_dts:=_a;
_dtk:={? var_pres('_b')=4 || _b || ~~ ?};
_wal_gus:={? var_pres('_c')<>type_of(0) || _c:=~~ || _c ?};

FORMULA.cntx_psh();
FORMULA.prefix();

_odp:=obj_new('S1','S2','S3','S4');

_odp.S1:={? H.CZYWAL='T' || exec('waluta','lista_licz',1,_dtk,_wal_gus,H.S1) || H.S1 ?};

_odp.S2:=
   {? H.S2<>0
   || _val:={? H.S2T='P' || H.S2*($H.S2P().FORMULA)(_dts)/100$2 || H.S2 ?};
      {? H.CZYWAL2='T' || exec('waluta','lista_licz',1,_dtk,_wal_gus,_val) || _val ?}
   ?};

_odp.S3:=
   {? H.S3<>0
   || _val:={? H.S3T='P' || H.S3*($H.S3P().FORMULA)(_dts)/100$2 || H.S3 ?};
      {? H.CZYWAL3='T' || exec('waluta','lista_licz',1,_dtk,_wal_gus,_val) || _val ?}
   ?};

_odp.S4:=
   {? H.S4<>0
   || _val:=H.S4;
      {? H.CZYWAL4='T' || exec('waluta','lista_licz',1,_dtk,_wal_gus,_val) || _val ?}
   ?};


FORMULA.cntx_pop();

_odp


\waluta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PKOSO [8.70]
:: OPIS: Funkcja do przeliczania wynagrodzeń w walucie
::   WE: _a - wywołanie 1 dla list płac, 2 - dla umów-zleceń
::       _b - data listy płac (wywoływana dla zasiłków)
::       _c - wywołanie dla daty innej niż bieżąca lista
::       _d - kwota w walucie
::   WY: wyliczona kwota
::  OLD: \waluta/waluty.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<=0
|| RAPLS.msg(
      '','','',
      'Brak argumentu wywołania formuły.'@,
      'Obliczenia nie mogą być kontynuowane.'@
   );
   return(0)
?};
{? var_pres('_c')<>type_of(0) || _c:=0 ?};
{? var_pres('_d')<>type_of(0) || return(0) || {? _d=0 || return(0) ?} ?};

: ustalenie daty kursu
_dat_k:=date(0,0,0);
{? ~_c
|| {? _a=1
   || _dat_k:=O.DKURS;
      {? _dat_k=date(0,0,0)
      || RAPLS.msg('','','',
            'Dla listy %1 nie podano daty ustalenia kursu walut.'@[~O.LT],
            exec('retry_msg','lista_licz')
         );
         return(0)
      ?}
   || _ref:=__KAL.kal_nazw;
      {? __KAL.set_cal('standard',RH.DWY~1)
      || _dzien:=RH.DWY-1;
         {!
         |? {? ~__KAL.w_days(_dzien,_dzien)
            || _dzien-=1;
               1
            ?}
         !};
         _dat_k:=_dzien
      || _dat_k:=RH.DWY
      ?};
      {? _ref<>null
      || __KAL.set_cal(_ref)
      ?}
   ?}
?};
{? var_pres('_b')=4 & ~_c
|| O.cntx_psh();
   O.index('LISTYMIE');
   O.prefix(exec('ref_firma','ustawienia'),_b~1,_b~2,O.T().T);
   {? O.first()
   || _dat_k:=O.DKURS
   ?};
   O.cntx_pop()
?};
{? _c
|| O.cntx_psh();
   O.index('LISTYPLA');
   O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,_b~1,_b~2);
   {? O.first
   || LS.cntx_psh();
      _czy_wal:=1;
      {!
      |? {? O.DKURS<>date(0,0,0)
         || LS.use(-O.LT);
            LS.index('PRACNRRU');
            LS.prefix(P.ref());
            {? LS.first()
            || _dat_k:=O.DKURS;
               _czy_wal:=0
            ?}
         ?};
         O.next() & _czy_wal
      !};
      LS.cntx_pop()
   ?};
   O.cntx_pop();
:: jeżeli nie udało się ustalić daty kursu to zwracamy kwota w waluta
   {? _dat_k=date(0,0,0) || return(_d) ?}
?};

: ustalenie waluty
_waluta:={? _a=1 || H.WAL(); H.WAL  || ZC.WAL(); ZC.WAL ?};
_zn_w:=SLO.KOD;
: ustalenie źródła
_zrodlo:={? _a=1 ||  H.ZWAL || ZC.ZWAL ?};
: wartość w walucie
_kwotaw:=_d;
_kwotasr:=exec('waluta_kurs','lista_licz',_zrodlo,_dat_k,_waluta);
_kwotazl:=0;
{? _kwotasr
:  jednostka waluty np. 1 dolar, 100 forintów itd.
|| _ilosc:=exec('waluta_miara','lista_licz',_zn_w);
   _kwotazl:=(_kwotasr*_kwotaw/_ilosc)$2
?};

_kwotazl


\waluta_kurs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PKOSO [8.70]
:: OPIS: Wyszukuje tabelę kursów dla podanej waluty na dany dzień
::   WE: _a - źrodło
::       _b - data
::       _c - waluta
::       _d - 1 kupno, 2 sprzedaż, 0 lub brak średni
::   WY: kurs w PLN
::  OLD: \kurs_wal/waluty.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null) || return(0) ?};
{? var_pres('_b')<>type_of(date) || return(0) ?};
{? var_pres('_c')<>type_of(null) || return(0) ?};
{? var_pres('_d')<>type_of(0) || _d:=0 || {? _d<>1 & _d<>2 || _d:=0 ?} ?};

_kwota:=0;

TKRS.cntx_psh();
KRS.cntx_psh();
TKRS.index('TKRS_DT');
TKRS.prefix(_a,KST_PAR.NAROD,_b);
KRS.index('KRS_WAL');
SLO.prefix();
SLO.seek(_c);
_zn_w:=SLO.KOD;
{? TKRS.first()
|| KRS.prefix(TKRS.ref(),_c);
   {? KRS.first()
   || _kwota:=
         {? _d=1 || KRS.KP
         |? _d=2 || KRS.SP
         || KRS.SR
         ?};
      {? ~_kwota
      || RAPLS.msg(
            '','','',
            {? _d=1 || 'Brak kursu kupna waluty %1 w tabeli kursów z dnia %2.'@[_zn_w,$TKRS.DT]
            |? _d=2 || 'Brak kursu sprzedaży waluty %1 w tabeli kursów z dnia %2.'@[_zn_w,$TKRS.DT]
            || 'Brak kursu średniego waluty %1 w tabeli kursów z dnia %2.'@[_zn_w,$TKRS.DT]
            ?}
         )
      ?}
   || RAPLS.msg(
         '','','',
         'Brak kursu dla waluty %1 w tabeli kursów z dnia %2.'@[_zn_w,$TKRS.DT]
      )
   ?}
|| RAPLS.msg(
      '','','',
      'Brak tabeli kursów walut na dzień %1.'@[$_b]
   )
?};
TKRS.cntx_pop();
KRS.cntx_pop();
_kwota


\waluta_miara
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PKOSO [8.70]
:: OPIS: Zwraca jednostkę dla kodu waluty
::   WE: _a - kod waluty np 'EUR'
::   WY: jednostka
::  OLD: \w_find/waluty.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('')
|| return(1)
?};
WAL.cntx_psh();
WAL.index('WAL_SYM');
WAL.prefix();
_ilosc:={? WAL.find_key(_a) || WAL.J || 1 ?};
WAL.cntx_pop();
_ilosc


\ust_nk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Ustawienie pola w KST
::   WE: a - data na ktora ma zostac ustalona wartosc
::       b - akronim pola
::  OLD: \ust_nk/plf_nadg.fml
::----------------------------------------------------------------------------------------------------------------------
_old:=($('KST.'+_b))();
exec('czytaj','#stalesys',_a,KST,_b);
_val:=($('KST.'+_b))();
($('KST.'+_b+':=_a'))(_old);
_val


\dekl_sta_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS:
::   WE:
::   WY:
::  OLD: \dekl_sta/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('sta_bnie')<100 || sta_bnie:=obj_new(3) ?};
{? var_pres('sta_pnie')<100 || sta_pnie:=obj_new(3) ?};
{? var_pres('sta_mc')<100 || sta_mc:=obj_new(3) ?};
{! _i:=1..3 |! sta_bnie[_i]:=sta_pnie[_i]:=sta_mc[_i]:=0 !};
~~


\dekl_tab_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS:
::   WE:
::   WY:
::  OLD: \dekl_tab/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('sta_pom')<100
|| sta_pom:=obj_new(4)
?};
{! _i:=1.. obj_len(sta_pom)
|! sta_pom[_i]:=0
!};

{? var_pres('potr')<100
|| potr:=obj_new(4)
?};
{! _i:=1.. obj_len(potr)
|! potr[_i]:=0
!};
1


\dekl_sko_skl_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [12.41]
:: OPIS: Definicja tablic premii okresowych
::  OLD: \dekl_sko/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
PAR_POKR.cntx_psh();
PAR_POKR.index('PAR_POKR');
PAR_POKR.prefix(exec('ref_firma','ustawienia'));
_roz:=PAR_POKR.size();
{? ~_roz
|| PAR_POKR.cntx_pop();
   return(0)
?};
{? var_pres('sta_sko')<100
|| sta_sko:=obj_new(_roz)
?};
{! _ix:=1.._roz
|! sta_sko[_ix]:=0
!};
{? var_pres('sta_skn')<100
|| sta_skn:=obj_new(_roz)
?};
{! _ix:=1.._roz
|! sta_skn[_ix]:=0
!};
PAR_POKR.cntx_pop();
1


\end_prem_skl_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [2011]
:: OPIS: usuwanie zmiennej tablicowej wykorzystanej do rozliczenia skadnikow w podstawie zasilkow chorobowych
::  OLD: \end_prem/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SK_CHO')>100
|| __SK_CHO.ndx_drop(&__SK_ND1);
   __SK_CHO.ndx_drop(&__SK_ND2);
   __SK_CHO.ndx_drop(&__SK_ND3);
   obj_del(__SK_CHO);
   &__SK_CHO
?}


\define_skl_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [2011]
:: OPIS: definiowanie zmiennej tablicowej do rozliczenia skadnikow w podstawie zasilkow chorobowych
::  OLD: \define/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SK_CHO')>100
|| obj_del(__SK_CHO)
?};
__SK_CHO:=tab_tmp(3,
   'REF','INTEGER','REF',
   'R','STRING[1]','R',
   'O','STRING[1]','O',
   'MC','DATE','MC',
   'OD','DATE','OD',
   'DO','DATE','DO',
   'TYP','STRING[1]','PGU',
   'SKL','STRING[20]','SKL',
   'SKL_NR','INTEGER','SKL_NR',
   'K_B','REAL','K_B',
   'K_N','REAL','K_N',
   'LT','STRING[20]','LT',
   'PRC','REAL','PRC',
   'REF_N','INTEGER','REF_N',
   'UWAGI','STRING[1]','UWAGI',
   'OPIS','STRING[150]','OPIS'
);
__SK_ND1:=__SK_CHO.ndx_tmp(,,'O',,,'OD',,,'DO',,,'SKL_NR',,);
__SK_ND2:=__SK_CHO.ndx_tmp(,,'REF_N',,,'MC',,,'TYP',,);
__SK_ND3:=__SK_CHO.ndx_tmp(,,'O',,,'SKL_NR',,,'OD',,);
__SK_ND4:=__SK_CHO.ndx_tmp(,,'REF_N',,,'R',,)


\licz_rhs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Wyliczenie kwoty z LS dla parametru lub zakresu numerow rubryk dla danego rachunku
::   WE: _a - nr rubryki (od)
::       [_b] - nr rubryki (do)
::   WY: kwota skladnika rachunku
::  OLD: \licz_rhs/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0)
|| return(0)
?};
{? var_pres('_b')<>type_of(0)
|| _b:=_a
?};

O.cntx_psh();
LS.cntx_psh();
_mask:=RH.O().LT;
{? _mask<>LS.name()
|| LS.use(_mask)
?};
LS.index('ZLEC');
_kw:=0;
{! _ind:=_a.._b
|! LS.prefix(RH.ref(),_ind);
   {? LS.first
   || {!
      |? _kw+=LS.KW;
         LS.next
      !}
   ?}
!};
O.cntx_pop();
LS.cntx_pop();
_kw


\licza_rhs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Wyliczenie kwoty z LS dla listy atrybutow.
::   WE: _a - symbol atrybutu
::       _b - symbol atrybutu
::       ...
::   WY: suma kwot
::  OLD: \licza_rhs/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0)
|| return(0)
?};

_odp:=0;
_tn:=type_of(0);
{! _nra:=1.._
|! {? type_of(_[_nra])=_tn
   || _tab:=__RUB.sys_zakres(_[_nra]);
      {? _tab.first()
      || {!
         |? _odp+=exec('licz_rhs','lista_licz',_tab.RN_P,_tab.RN_K);
            _tab.next()
         !}
      ?};
      obj_del(_tab);
      &_tab
   ?}
!};
_odp


\kora_ikor_kor_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Wyliczenie podstawy / skladki z korekt dla listy innej niz biezaca.
::   WE: _a - Rodzaj ubezpieczenia (numer atrybutu).
::       _b - Typ wyniku: 1 - podstawa; 2 - skladka.
::       _c - Miesiac.
::       _d - Znak biezacej listy
::       _e - Rok.
::       _f - Korekta nieobecnosci: 1-tak / 0-nie, [domyslnie: 0]
::   WY: Wyliczona kwota (podstawa lub skladka).
::  OLD: \kora_ikor/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_f')<>type_of(0) || _f:=0 ?};
_odp:=0;
_tab:=__RUB.sys_rub(_a,date(_e,_c,1));
{? _tab.first()
|| {!
   |? _odp+=exec('kor_ikor_kor_zus','lista_licz',_tab.RN,_b,_c,_d,_e,_f);
      _tab.next()
   !}
?};
_odp


\kor_ikor_kor_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.60]
:: OPIS: wyliczenie podstawy składki z korekt dla listy innej niż bieżąca
::   WE: _a - rodzaj ubezpieczenia
::       _b - 1 -podstawa 2 - składka
::       _c - miesiąc
::       _d - znak bieżącej listy
::       _e - rok
::       _f - 1 - dla korekty nieobecnosci
::   WY: wyliczona podstawa / składka
::  OLD: \kor_ikor/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_f')<>type_of(0) || _f:=0 ?};
_wart:=0;
KORN.cntx_psh();
_pref:=P.ref();

_p2020:="
   _wyn:=1;
   O.cntx_psh();
   O.index('LISTYPZN');
   O.prefix(exec('ref_firma','ustawienia'),~_a);
   {? O.first
   || _wyn:=FUNKCJE.CZY_POD()
   ?};
   O.cntx_pop();
   _wyn";

P.cntx_psh();
P.index('PRACOSOB');
P.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,P.OSOBA);
KOR.index('KOR_PRN');
KORN.index('KOR_NAGU');
{? P.first()
|| {!
   |? KORN.prefix(_e,_c,P.ref,'N');
      {? KORN.first()
      || {!
         |? {? ~_f & _p2020(KORN.LT) & (KORN.LT<>_d | P.ref<>_pref)
            || 'lista inna niż bieżąca lub inny pracownik będący tą samą osobą ';
               KOR.prefix(KORN.ref,_a);
               {? KOR.first()
               || {!
                  |? _wart+={? _b=1 || KOR.POD || KOR.SKL ?};
                     KOR.next()
                  !}
               ?}
            |? _f & KORN.KN='T'
            ||
::             Korekta dla nieobecnosci
               KOR.prefix(KORN.ref,_a);
               {? KOR.first()
               || {!
                  |? _wart+={? _b=1 || KOR.POD || KOR.SKL ?};
                     KOR.next()
                  !}
               ?}
            ?};
            KORN.next()
         !}
      ?};
      P.next()
   !}
?};
KORN.cntx_pop();
P.cntx_pop();
_wart


\kor_rca_kor_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.60]
:: OPIS: suma korekt dla pracownika parametry
::   WE: _a - rodzaj ubezpieczenia
::       _b  - flaga:
::                   1 - podstawa
::                   2 - składka
::                   3 - podstawa z pominieciem biezacej listy
::                   4 - skladka z pominieciem biezacej listy
::   WY: wyliczona suma dla składnika
::  OLD: \kor_rca/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------
_v:=0;
KORN.cntx_psh();
_pref:=P.ref();
_p2020:="
   _wyn:=1;
   O.cntx_psh();
   O.index('LISTYPZN');
   O.prefix(exec('ref_firma','ustawienia'),~_a);
   {? O.first
   || _wyn:=FUNKCJE.CZY_POD()
   ?};
   O.cntx_pop();
   _wyn";

P.cntx_psh();
P.index('PRACOSOB');
P.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,P.OSOBA);
_lista:='L'+FUNKCJE.ZNLISTY();
KOR.index('KOR_PRN');
KORN.index('KOR_NAGU');
{? P.first()
|| {!
   |? KORN.prefix(O.RU,O.MU,P.ref(),'N');
      {? KORN.first()
      || {!
         |? {? _p2020(KORN.LT)
            || {? {? _b>2 || KORN.LT<>_lista | P.ref()<>_pref | KORN.KN='T' || 1 ?}
               || KOR.prefix(KORN.ref(),_a);
                  {? KOR.first() & _a
                  || {!
                     |? _v+={? _b=1 | _b=3 || KOR.POD || KOR.SKL ?};
                        KOR.next()
                     !}
                  ?}
               ?}
            ?};
            KORN.next()
         !}
      ?};
      P.next()
   !}
?};
KORN.cntx_pop();
P.cntx_pop();
_v


\kor_skl_kor_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.60]
:: OPIS: wyliczenie składki dla korygowanych miesięcy
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WE: _a - podstawa z listy dla emer. i rent. ( argument obowiązkowy)
::       _b - podstawa z listy dla chor. i wyp.  ( argument obowiązkowy)
::       _c - podstawa z listy dla Kasy chorych
::       _d - 0 lub brak (składki społeczne); 1 - składki zdrowotne
::  OLD: \kor_skl/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------

{?_<3 || _d:=0; _c:=0 ?};
_ok:=0;
{? _d & _c<0 || _ok:=exec('kor_nieob_kor_zus','lista_licz',_c) ?};

{? ((FUNKCJE.L(100,102)+FUNKCJE.L(105,107)+FUNKCJE.L(110))<0 & (_a<0 | _b<0 | _c<0)) | _ok
   || _blankd:=date(0,0,0); _rok:=O.R; _mies:=O.M;_ref:=O.ref; &_ok;
      _rokub:=O.RU; _miesub:=O.MU;_lista:='L'+FUNKCJE.ZNLISTY(); _jestkor:=0;
:     dokonujemy wyliczenia korekty składek
      {? var_pres('k')>=100 || obj_del(k) ?}; k:=obj_new(8);
      {? var_pres('x')>=100 || obj_del(x) ?}; x:=obj_new(7);
      {? var_pres('s')>=100 || obj_del(s) ?}; s:=obj_new(9);
      {? var_pres('p')>=100 || obj_del(p) ?}; p:=obj_new(8);
      {? var_pres('j')>=100 || obj_del(j) ?}; j:=obj_new(7);
      {? var_pres('z')>=100 || obj_del(z) ?}; z:=obj_new(7);
      {? var_pres('p_prz')>=100 || obj_del(p_prz) ?}; p_prz:=obj_new(9);
:     korekta podstawy ub. ren. i emer.
      k[1]:=0;
:     korekta podstawy ub. chor. i wyp.
      k[2]:=0;
:     informacja czy była zablokowana kasa chorych
      k[5]:=0;
:     korekta podstawy kasy chorych
      k[7]:=0;
:     korekta składki EP
      x[1]:=0;
:     korekta składki EF
      x[2]:=0;
:     korekta składki RP
      x[3]:=0;
:     korekta składki RF
      x[4]:=0;
:     korekta składki CH
      x[5]:=0;
:     korekta składki WY
      x[6]:=0;
:     korekta składki na ubezpieczenie zdrowotne
      x[7]:=0;
      {! _i:=1..9 |! p_prz[_i]:=0 !};
      k[8]:={? ~_d || FUNKCJE.L_SYS(41) || 0 ?};
      _K_add:="{? _a>=P.DZA || KORN.add() ?}"; _no_esc:=1;
      KORN.index('KOR_NAPZ');
      KORN.prefix('N',P.ref,_lista);
      {? KORN.last
         || O.cntx_psh;
            O.index('LISTYPLA');
            O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O);
            {! |?
               {? _no_esc & KORN.KN<>'T' & (KORN.ROK<>O.R | KORN.MC<>O.M) &  date(KORN.ROK,KORN.MC,0)>=P.DZA
                  ||
:                     miesiące różne od aktualnego
                     O.cntx_psh;
                     _znlisty:='L'+FUNKCJE.ZNLISTY();
                     {? O.find_key(KORN.ROK,KORN.MC,O.T().T)
                        ||
:                           wyliczenie skladek w miesiacu
                            _zakres:=(_rokub*12+_miesub)-(O.RU*12+O.MU);
:                            ustalenie zakresu dla funkcji LU
                           {? _zakres>=0 & _zakres<126
                              || _lista:='L'+(($O.R)+2)+form(O.M,-2)+O.T().T;
                                 KORN.RU:=O.RU; KORN.MU:=O.MU;
                                 KORN.put;
                                 _datak:=date(KORN.ROK,KORN.MC,0);
                                 _blankd:=exec('zablokuj_podst_sk','lista_licz',P.OSOBA,_datak,,1);
                                 {! _i:=1..8 |! s[_i]:=p[_i]:=0 !};
                                 s[9]:=0;
                                 _p7:=_s7:=0;

                                 p[5]:=date(O.R,O.M,1);
                                 O.cntx_psh;O.seek(_ref);
                                 k[5]:=0;

                                 {? _a<0 & ~_d
                                    ||
:                                      Emerytalny Rentowy - podstawa
                                       p[1]+=FUNKCJE.LU_SYS(56111,_zakres);
                                       p[1]+=exec('kora_ikor_kor_zus','lista_licz',571110,1,KORN.MU,_znlisty,KORN.RU);
:                                      Emerytalny - pracownik
                                       s[1]+=FUNKCJE.LU_SYS(57111,_zakres);
                                       s[1]+=exec('kora_ikor_kor_zus','lista_licz',571110,2,KORN.MU,_znlisty,KORN.RU);
:                                      Rentowy - pracownik
                                       s[2]+=FUNKCJE.LU_SYS(57112,_zakres);
                                       s[2]+=exec('kora_ikor_kor_zus','lista_licz',571120,2,KORN.MU,_znlisty,KORN.RU);
:                                      Rentowy - firma
                                       s[8]+=FUNKCJE.LU_SYS(57122,_zakres);
                                       s[8]+=exec('kora_ikor_kor_zus','lista_licz',571220,2,KORN.MU,_znlisty,KORN.RU)
                                 ?};
                                 {? _c<0 & _d & ~k[5]
                                    ||
:                                      Zdrowotne - podstawa
                                       p[7]+=_p7:=FUNKCJE.LU_SYS(56411,_zakres);
                                       s[7]+=_s7:=FUNKCJE.LU_SYS(57411,_zakres);
                                       p[7]+=exec('kora_ikor_kor_zus','lista_licz',574110,1,KORN.MU,_znlisty,KORN.RU);
                                       p[8]:=exec('kora_ikor_kor_zus','lista_licz',574110,1,KORN.MU,_znlisty,KORN.RU,1);
:                                      Zdrowotne - skladka
                                       s[7]+=exec('kora_ikor_kor_zus','lista_licz',574110,2,KORN.MU,_znlisty,KORN.RU);
                                       s[9]:=exec('kora_ikor_kor_zus','lista_licz',574110,2,KORN.MU,_znlisty,KORN.RU,1)
                                 ?};
                                 {?  ~_d & _blankd<=_datak & _blankd~1=KORN.RU
                                    || _nfo:='Korekta dla ubezpieczenia Emerytalnego i Rentowego'
                                          ' nie zostanie uwzględniona na raportach!'@;
                                       STR.split(_nfo);
                                       RAPLS.msg(
                                          P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                                         'Blokada naliczania składek od %1.'@[_blankd$4],
                                         STR.line(+_nfo/2),STR.line(+_nfo)
                                       );
                                       DoList.m[15]:=0
                                 ?};
                                 {? _b<0 & ~_d
                                    ||
:                                      Chorobowy Wypadkowy - podstawa
                                       p[2]+=FUNKCJE.LU_SYS(5621,_zakres);
                                       p[2]+=exec('kora_ikor_kor_zus','lista_licz',57210,1,KORN.MU,_znlisty,KORN.RU);
:                                      Chorobowy - pracownik
                                       s[3]+=FUNKCJE.LU_SYS(5721,_zakres);
                                       s[3]+=exec('kora_ikor_kor_zus','lista_licz',57210,2,KORN.MU,_znlisty,KORN.RU);
:                                      Wypadkowy -  pracodawca
                                       s[4]+=FUNKCJE.LU_SYS(5731,_zakres);
                                       s[4]+=exec('kora_ikor_kor_zus','lista_licz',57310,2,KORN.MU,_znlisty,KORN.RU)
                                 ?};
                                 O.cntx_pop;
:                               Pobranie danych z rachunków dla osoby w celu wyliczenia poprawnych zaokrągleń
                                 _rachper:=0; _rachse:=0; _rachsr:=0; _rachsrf:=0; _rachpc:=0;
                                 _rachsc:=0; _rachpw:=0; _rachsw:=0; _rachpkc:=0; _rachskc:=0;
                                 RH.cntx_psh;
                                 RH.index('RACHDATA');
                                 RH.prefix(exec('ref_firma','ustawienia'),P.OSOBA,O.RU,O.MU);
                                 {? RH.first
                                 || zlicz:="
                                       _kw:=0;
                                       _tab:=__RUB.sys_rub(_a);
                                       {? _tab.first()
                                       || {!
                                          |? LS.prefix(RH.ref(),_tab.RN);
                                             {? LS.first() || {!|? _kw+=LS.KW$2; LS.next() !} ?};
                                             _tab.next()
                                          !}
                                       ?};
                                       _kw
                                    ";
                                    LS.cntx_psh();
                                    O.cntx_psh();
                                    {!
                                    |? {? 2+RH.ZLE().TTUB().KOD='01'
                                       || LS.use(RH.O().LT);
                                          LS.index('ZLEC');
                                          RH.ZC_INFO();
                                          {?~_d
                                          || _rachper+=zlicz(56111);
                                             _rachse+=zlicz(57111);
                                             _rachsr+=zlicz(57112);
                                             _rachsrf+=zlicz(57122);
                                             {? ZC_INFO.FC='T'
                                             || _rachpc+=zlicz(5631);
                                                _rachsc+=zlicz(5721)
                                             ?};
                                             {? ZC_INFO.FW='T'
                                             || _rachpw+=zlicz(5621);
                                                _rachsw+=zlicz(5731)
                                             ?}
                                          || {? ZC_INFO.KC='T'
                                             || _rachpkc+=zlicz(56411);
                                                _rachskc+=zlicz(57411)
                                             ?}
                                          ?}
                                       ?};
                                       RH.next
                                    !};
                                    LS.cntx_pop();
                                    O.cntx_pop();
                                    &zlicz
                                 ?};
                                 RH.cntx_pop;
                                 _zdrpod:=0;
                                 KOR.index('KOR_PNR'); KOR.prefix(KORN.ref);
                                 {? KOR.first
                                    || exec('czytaj','#stalesys',date(KORN.RU,KORN.MU,0),KST);
                                       {! |?
                                          {? ~_d & KOR.RU().RN=__RUB.sys_kod(571110)
                                             || _podst_new:=(p[1]+KOR.POD+_rachper+p_prz[1]);
                                                {? _podst_new<0
                                                || p_prz[1]:=_podst_new$2;
                                                   _podst_new:=KOR.POD:=(p[1]+_rachper)*(-1);
                                                   KOR.SKL:=-s[1]-_rachse
                                                || KOR.SKL:=(_podst_new*KST.PRFE/100/2$2-s[1]-_rachse)$2;
                                                   p_prz[1]:=0; KOR.POD:=(_podst_new-p[1]-_rachper)
                                                ?};
                                                k[1]+=KOR.POD; x[1]+=KOR.SKL ; _zdrpod-=KOR.SKL; KOR.put
                                          |? ~_d & KOR.RU().RN=__RUB.sys_kod(571210)
                                             || _podst_new:=(p[1]+KOR.POD+_rachper+p_prz[2]);
                                                {? _podst_new<0
                                                || p_prz[2]:=_podst_new$2;
                                                   _podst_new:=KOR.POD:=(p[1]+_rachper)*(-1);
                                                   KOR.SKL:=-s[1]-_rachse
                                                || KOR.SKL:=(_podst_new*KST.PRFE/100/2$2-s[1]-_rachse)$2;
                                                   p_prz[2]:=0; KOR.POD:=(_podst_new-p[1]-_rachper)
                                                ?};
                                                x[2]+=KOR.SKL; KOR.put
                                          |? ~_d & KOR.RU().RN=__RUB.sys_kod(571120)
                                             || _podst_new:=(p[1]+KOR.POD+_rachper+p_prz[3]);
                                                {? _podst_new<0
                                                || p_prz[3]:=_podst_new$2;
                                                   _podst_new:=KOR.POD:=(p[1]+_rachper)*(-1);
                                                   KOR.SKL:=-s[2]-_rachsr
                                                || KOR.SKL:=(_podst_new*KST.PRFRP/100$2-s[2]-_rachsr)$2;
                                                   p_prz[3]:=0; KOR.POD:=(_podst_new-p[1]-_rachper)
                                                ?};
                                                x[3]+=KOR.SKL; _zdrpod-=KOR.SKL; KOR.put
                                          |? ~_d & KOR.RU().RN=__RUB.sys_kod(571220)
                                             || _podst_new:=(p[1]+KOR.POD+_rachper+p_prz[4]);
                                                {? _podst_new<0
                                                || p_prz[4]:=_podst_new$2;
                                                   _podst_new:=KOR.POD:=(p[1]+_rachper)*(-1);
                                                   KOR.SKL:=-s[8]-_rachsrf
                                                || KOR.SKL:=(_podst_new*KST.PRFRF/100$2-s[8]-_rachsrf)$2;
                                                   p_prz[4]:=0; KOR.POD:=(_podst_new-p[1]-_rachper)
                                                ?};
                                                x[4]+=KOR.SKL; KOR.put
                                          |? ~_d & KOR.RU().RN=__RUB.sys_kod(57210)
                                             || _podst_new:=(p[2]+KOR.POD+_rachpc+p_prz[5]);
                                                {? _podst_new<0
                                                || p_prz[5]:=_podst_new$2;
                                                   _podst_new:=KOR.POD:=(p[2]+_rachpc)*(-1);
                                                   KOR.SKL:=-s[3]-_rachsc
                                                || KOR.SKL:=(_podst_new*KST.PRFC/100$2-s[3]-_rachsc)$2;
                                                   p_prz[5]:=0; KOR.POD:=(_podst_new-p[2]-_rachpc)
                                                ?};
                                                k[2]+=KOR.POD; x[5]+=KOR.SKL; _zdrpod-=KOR.SKL;
                                                KOR.put
                                          |? ~_d & KOR.RU().RN=__RUB.sys_kod(57310)
                                             || _podst_new:=(p[2]+KOR.POD+_rachpw+p_prz[6]);
                                                {? _podst_new<0
                                                || p_prz[6]:=_podst_new$2;
                                                   _podst_new:=KOR.POD:=(p[2]+_rachpw)*(-1);
                                                   KOR.SKL:=-s[4]-_rachsw
                                                || KOR.SKL:=(_podst_new*KST.PRFW/100$2-s[4]-_rachsw)$2;
                                                   p_prz[6]:=0; KOR.POD:=(_podst_new-p[2]-_rachpw)
                                                ?};
                                                x[6]+=KOR.SKL; KOR.put
                                          |? _d & KOR.RU().RN=__RUB.sys_kod(574110) & ~k[5]
                                             ||
                                                _podst_new:=(p[7]+KOR.POD+p[8]+_rachpkc+p_prz[7]);
                                                {? _podst_new<0
                                                || p_prz[7]:=_podst_new$2;
                                                   _podst_new:=KOR.POD:=(p[7]+_rachpkc)*(-1);
                                                   KOR.SKL:=-s[7]-_rachpkc
                                                || _pr:={? _p7 & (100*_s7/_p7)$2<>KST.PRKC || _s7/_p7 || KST.PRKC/100 ?};
                                                   KOR.SKL:=((p[7]+KOR.POD+p[8]+_rachpkc)*_pr$2-s[7]-s[9]-_rachskc)$2;
                                                   p_prz[7]:=0; KOR.POD:=(_podst_new-p[7]-p[8]-_rachpkc)
                                                ?};
                                                k[7]+=KOR.POD; x[7]+=KOR.SKL; KOR.put
                                          ?};
                                          {? KOR.POD
                                          || KOR.next
                                          || KOR.del
                                          ?}
                                       !};
                                       {? ~_d & _zdrpod
                                       || {? KOR.find_key(__RUB.ref(__RUB.sys_kod(574110)))
                                          || {? KOR.POTR<0
                                             || KOR.POD:=KOR.POTR;
                                                KOR.POD+=_zdrpod;
                                                KOR.put
                                             ?}
                                          || KOR.blank;
                                             KOR.NAG:=KORN.ref;
                                             KOR.RU:=__RUB.ref(__RUB.sys_kod(574110));
                                             KOR.POTR:=(exec('wyn_chor_kor_zus','lista_licz',p[5],k[8],_znlisty))$2;
                                             KOR.POTR+=_zdrpod;
                                             KOR.POD:=KOR.POTR;
                                             KOR.add
                                          ?}
                                       ?}
                                 ?};
                                 1
                              || _nfo:='Korekta nie może uwzględniać miesięcy poźniejszych'
                                    ' od miesiąca listy płac!'@;
                                 STR.split(_nfo);
                                 RAPLS.msg(
                                    P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                                    STR.line(+_nfo/2),STR.line(+_nfo)
                                 )
                           ?}
                        || RAPLS.msg(
                              P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                              'Brak listy podlegającej korekcie za miesiąc %1.'@[date(KORN.ROK,KORN.MC,1)$8]
                           )
                     ?};
                     O.cntx_pop
               ?};
               {? _wyn:=KORN.prev
               || {! |? {? KORN.KN<>'T' || _wyn:=1; 0 || _wyn:=KORN.prev ?} !}
               ?};
               {? _wyn
               || KOR.prefix(KORN.ref);
                  {? _d & KOR.find_key(__RUB.ref(__RUB.sys_kod(574110))) & p_prz[7]
                  || KOR.POD:=p_prz[7]+KOR.POTR; KOR.put;
                     p_prz[7]:=0
                  ?}; 1
               || p_prz[9]:="KOR.blank;
                        KOR.RU:=__RUB.ref(_a);
                        KOR.POD:=_b$2;
                        KOR.add";
                  {? ~_d & (p_prz[1] | p_prz[2] | p_prz[3] | p_prz[4] | p_prz[5] | p_prz[6])
                  || KORN.ROK:=(date(KORN.ROK,KORN.MC,1)-1)~1;
                     KORN.MC:=(date(KORN.ROK,KORN.MC,1)-1)~2;
                    _no_esc:=_K_add(date(KORN.ROK,KORN.MC,0)); KOR.clear;
                     {? _no_esc
                     || {? p_prz[1] || p_prz[9](__RUB.sys_kod(571110),p_prz[1]); p_prz[1]:=0 ?};
                        {? p_prz[2] || p_prz[9](__RUB.sys_kod(571210),p_prz[2]); p_prz[2]:=0 ?};
                        {? p_prz[3] || p_prz[9](__RUB.sys_kod(571120),p_prz[3]); p_prz[3]:=0 ?};
                        {? p_prz[4] || p_prz[9](__RUB.sys_kod(571220),p_prz[4]); p_prz[4]:=0 ?};
                        {? p_prz[5] || p_prz[9](__RUB.sys_kod(57210),p_prz[5]); p_prz[5]:=0 ?};
                        {? p_prz[6] || p_prz[9](__RUB.sys_kod(57310),p_prz[6]); p_prz[6]:=0 ?};
                        1
                     ?}
                  |? _d & p_prz[7]
                  || KORN.ROK:=(date(KORN.ROK,KORN.MC,1)-1)~1;
                     KORN.MC:=(date(KORN.ROK,KORN.MC,1)-1)~2;
                     _no_esc:=_K_add(date(KORN.ROK,KORN.MC,0)); KOR.clear;
                     {? _no_esc || p_prz[9](__RUB.sys_kod(574110),p_prz[7]); p_prz[7]:=0; 1 ?}
                  ?}
               ?}
            !};
            {? KORN.first || {!|? KOR.prefix(KORN.ref); {? ~KOR.size || KORN.del || KORN.next ?} !} ?};

            O.cntx_pop; _znlisty:='L'+FUNKCJE.ZNLISTY();
            KORN.prefix('N',P.ref,_znlisty,O.R,O.M);
            {? _wyn:=KORN.last
            || {! |? {? KORN.KN<>'T' || _wyn:=1; 0 || _wyn:=KORN.prev ?} !}
            ?};
            {? ~_wyn
               || KORN.blank;
                  KORN.LT:=_znlisty;
                  KORN.ROK:=O.R;
                  KORN.MC:=O.M;
                  KORN.RU:=O.RU;
                  KORN.MU:=O.MU;
                  KORN.add()
            ?};
            KOR.index('KOR_PNR'); KOR.prefix(KORN.ref); _jestkor:=KOR.first;
            {?_d || _i:=6 || _i:=0 ?};
            {? ~_jestkor
               || j[1]:=__RUB.sys_kod(571110);
                  j[2]:=__RUB.sys_kod(571210);
                  j[3]:=__RUB.sys_kod(571120);
                  j[4]:=__RUB.sys_kod(571220);
                  j[5]:=__RUB.sys_kod(57210);
                  j[6]:=__RUB.sys_kod(57310);
                  j[7]:=__RUB.sys_kod(574110)
            ?};
:           podczytanie stalych systemu dla biezacej listy
            exec('dla_listy','stalesys');
:           podstawa emerytalno-rentowa z pozostalych list w miesiacu
            k[3]:=FUNKCJE.LU_SYS(56111);
:           podstawa chorobowo-wypadkowa z pozostalych list w miesiacu
            k[4]:=FUNKCJE.LU_SYS(5621);
            {! |?
               _i+=1;
               {? ~_jestkor || KOR.blank; KOR.RU:=__RUB.ref(j[_i]) ?};
:               wyliczenie poprawnych skladek
               {? _rn:=__RUB.sys_kod(571110); _a<0 & k[1]<>0 & KOR.RU().RN=_rn
                  || KOR.POD:=_a-k[1];
                     KOR.cntx_psh;
                     z[1]:=k[3]+KOR.POD+DoList.k[1];
:                    podstawa w ramach miesiaca
                     z[1]+=exec('kor_rca_kor_zus','lista_licz',_rn,3);
                     z[2]:=FUNKCJE.LU(_rn);
:                    skladki policzone na pozostalych listach plac
                     z[2]+=exec('kor_rca_kor_zus','lista_licz',_rn,4);
                     KOR.cntx_pop;
                     KOR.SKL:=(z[1]*KST.PRFE/100/2$2-z[2]-DoList.k[5])$2
               |? _rn:=__RUB.sys_kod(571210); _a<0 & k[1]<>0 & KOR.RU().RN=_rn
                  || KOR.POD:=_a-k[1];
                     z[1]:=k[3]+KOR.POD+DoList.k[1];
                     KOR.cntx_psh;
:                    podstawa w ramach miesiaca
                     z[1]+=exec('kor_rca_kor_zus','lista_licz',_rn,3);
                     z[2]:=FUNKCJE.LU(_rn);
:                    skladki policzone na pozostalych listach plac
                     z[2]+=exec('kor_rca_kor_zus','lista_licz',_rn,4);
                     KOR.cntx_pop;
                     KOR.SKL:=(z[1]*KST.PRFE/100/2$2-z[2]-DoList.k[5])$2
               |? _rn:=__RUB.sys_kod(571120); _a<0 & k[1]<>0 & KOR.RU().RN=_rn
                  || KOR.POD:=_a-k[1];
                     KOR.cntx_psh;
                     z[1]:=k[3]+KOR.POD+DoList.k[1];
:                    podstawa w ramach miesiaca
                     z[1]+=exec('kor_rca_kor_zus','lista_licz',_rn,3);
                     z[2]:=FUNKCJE.LU(_rn);
:                    skladki policzone na pozostalych listach plac
                     z[2]+=exec('kor_rca_kor_zus','lista_licz',_rn,4);
                     KOR.cntx_pop;
                     KOR.SKL:=(z[1]*KST.PRFRP/100$2-z[2]-DoList.k[6])$2
               |? _rn:=__RUB.sys_kod(571220); _a<0 & k[1]<>0 & KOR.RU().RN=_rn
                  || KOR.POD:=_a-k[1];
                     KOR.cntx_psh;
                     z[1]:=k[3]+KOR.POD+DoList.k[1];
:                    podstawa w ramach miesiaca
                     z[1]+=exec('kor_rca_kor_zus','lista_licz',_rn,3);
                     z[2]:=FUNKCJE.LU(_rn);
:                    skladki policzone na pozostalych listach plac
                     z[2]+=exec('kor_rca_kor_zus','lista_licz',_rn,4);
                     KOR.cntx_pop;
                     KOR.SKL:=(z[1]*KST.PRFRF/100$2-z[2]-DoList.k[15])$2
               |? _rn:=__RUB.sys_kod(57210); _b<0 & KOR.RU().RN=_rn
                  || KOR.POD:=_b-k[2];
                     KOR.cntx_psh;
                     z[1]:=k[4]+KOR.POD+DoList.k[2];
:                    podstawa w ramach miesiaca
                     z[1]+=exec('kor_rca_kor_zus','lista_licz',_rn,3);
                     z[2]:=FUNKCJE.LU(_rn);
:                    skladki policzone na pozostalych listach plac
                     z[2]+=exec('kor_rca_kor_zus','lista_licz',_rn,4);
                     KOR.cntx_pop;
                     KOR.SKL:=(z[1]*KST.PRFC/100$2-z[2]-DoList.k[7])$2
               |? _rn:=__RUB.sys_kod(57310); _b<0 & KOR.RU().RN=_rn
                  || KOR.POD:=_b-k[2];
                     KOR.cntx_psh;
                     z[1]:=k[4]+KOR.POD+DoList.k[3];
:                    podstawa w ramach miesiaca
                     z[1]+=exec('kor_rca_kor_zus','lista_licz',_rn,3);
                     z[2]:=FUNKCJE.LU(_rn);
:                    skladki policzone na pozostalych listach plac
                     z[2]+=exec('kor_rca_kor_zus','lista_licz',_rn,4);
                     KOR.cntx_pop;
                     KOR.SKL:=(z[1]*KST.PRFW/100$2-z[2]-DoList.k[8])$2
              |? _rn:=__RUB.sys_kod(574110); _c<0 & KOR.RU().RN=_rn & ~k[5]
                  || KOR.POD:=_c-k[7];
                     KOR.cntx_psh;
                     z[1]:=FUNKCJE.LU_SYS(56411)+KOR.POD+DoList.k[4];
:                    podstawa w ramach miesiaca
                     z[1]+=exec('kor_rca_kor_zus','lista_licz',_rn,3);
                     z[2]:=FUNKCJE.LU(_rn);
:                    skladki policzone na pozostalych listach plac
                     z[2]+=exec('kor_rca_kor_zus','lista_licz',_rn,4);
                     KOR.cntx_pop;
                     KOR.SKL:=(z[1]*KST.PRKC/100$2-z[2]-DoList.k[9])$2
               ?};
               {? _jestkor
                  || _rn:=__RUB.sys_kod(574110);
                     {?_d & KOR.RU().RN=_rn || KOR.put |? ~_d & KOR.RU().RN<>_rn || KOR.put ?};
                     KOR.next
                  || {? {? __RUB.sys_attr(KOR.RU().RN,5711) | __RUB.sys_attr(R.RN,5712)
                           || k[1] <> 0
                        |? __RUB.sys_attr(R.RN,5721) | __RUB.sys_attr(R.RN,5731)
                           || k[2] <> 0
                        |? __RUB.sys_attr(R.RN,57411)
                           || {? _d || k[7] <> 0 || 1 ?}
                        ?}
                        || KOR.add
                     ?};
                     _i<7
               ?}
            !}
         || RAPLS.msg(
               P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
               'Brak zapisów w tabeli korekt.'@,'Należy wykonać funkcję "Oblicz".'@
            )
      ?};
      obj_del(k); obj_del(x);obj_del(s); obj_del(p); obj_del(j); obj_del(z); obj_del(p_prz);
      &z; &k; &x; &s; &p; &j; &p_prz;
      {? _d
      || KORN.index('KOR_NAGL');
         KORN.prefix(P.ref,'L'+FUNKCJE.ZNLISTY());
         {? KORN.first || {!|? KOR.prefix(KORN.ref); {? ~KOR.size || KORN.del || KORN.next ?} !} ?};
         _jestkor
      || 1
      ?}
   ||
      {? ~_d & (FUNKCJE.L_SYS(5611)<0 | FUNKCJE.L_SYS(562)<0)
      || RAPLS.msg(
            P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
            'Ujemne wartości składek ZUS.'@,
            'Proszę sprawdzić i skorygować dane przed eksportami do Programu Płatnik.'@,
            'W tym przypadku korekty deklaracji nie są wykonywane przez program automatycznie.'@
         )
      ?};
::    Weryfikacja, czy któraś z podstaw emerytalno-rentowych nie jest ujemna (składniki 753,970).
      {? ~_d & (FUNKCJE.L_SYS(56111) & FUNKCJE.L_SYS(56121)) & (FUNKCJE.L_SYS(56111)<0 | FUNKCJE.L_SYS(56121)<0)
      || RAPLS.msg(
            P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
            'Co najmniej jedna z wartości podstaw emerytalno-rentowych jest ujemna.'@,
            'Proszę sprawdzić i skorygować dane dotyczące podstaw emerytalno-rentowych.'@
         )
      ?};
:      usuniecie zapisow z tabeli korekt
      {? _d & FUNKCJE.L_SYS(5621)<0
         || exec('korz_usu_kor_zus','lista_licz')
         || exec('usun_kor','korekty_zus')
      ?};
      0
?}


\kor_nieob_kor_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Korekta podstawy wynikajaca z korygowania nieobecnosci
::   WE: _a - kwota podstawy do skorygowania
::  OLD: \kor_nieob/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------
KORN.index('KOR_NAPZ'); KORN.prefix('N',P.ref,'L'+FUNKCJE.ZNLISTY());
{? ~KORN.first & FUNKCJE.L_SYS(413)<0
   || _data:=date(O.R,O.M-1,1);
      exec('kor_zap_kor_zus','lista_licz',_data,-_a,1);
      1
   || 0
?}


\wyn_chor_kor_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009+]
:: OPIS: Wyliczenie wartosci wynagrodzenia chorobowego wzgledem miesiaca nieobecnosci
::   WE:  _a - pierwszy dzien miesiaca okresu
::         _b - kwota do podzialu
::         _c - lista
::  OLD: \wyn_chor/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------
N.cntx_psh();
N.index('NIEOBECL');
N.prefix('N',P.ref(),_c);
_ile:=_calosc:=0;
{? N.first()
|| {!
   |? {? __RUB.sys_attr(N.NB,121,_a)
      || {? date(N.OD~1,N.OD~2,1)=_a || _ile+=N.NK ?};
         _calosc+=N.NK
      || {? N.N_KOR
         || N.cntx_psh();
            N.prefix();
            {? N.seek(N.N_KOR,) & __RUB.sys_attr(N.NB,121,_a)
            || {? date(N.OD~1,N.OD~2,1)=_a || _ile+=N.NK ?};
               _calosc+=N.NK
            ?};
            N.cntx_pop()
         ?}
      ?};
      N.next()
   !}
?};
N.cntx_pop();
{? _ile
|| _b/_calosc*_ile$2
?}


\korz_usu_kor_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.60]
:: OPIS: Usunięcie zapisów z tabeli korekt dla zdrowotnych.
::  OLD: \korz_usu/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------
_fdel:="
   _tab:=__RUB.sys_rub(_a);
   {? _tab.first()
   || {!
      |? KOR.prefix(KORN.ref(),_tab.R);
         {? KOR.first()
         || {!
            |? KOR.del()
            !}
         ?};
         _tab.next()
      !}
   ?}
";
KOR.index('KOR_PNR');
KORN.index('KOR_NAPZ');
KORN.prefix('N',P.ref(),'L'+FUNKCJE.ZNLISTY());
{? KORN.first()
|| {!
   |? {? ~KORN.N || _fdel(574110) ?};
      KORN.next()
   !}
?};
1


\kor_zap_kor_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.60]
:: OPIS: Zapisanie potrąceń do tablicy korekt
::   WE: _a - data z funkcji newzasad
::       _b - kwota
::       _c - dla kasy chorych
::   WY:
::  OLD: \kor_zap/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<>type_of(0)
|| _c:=0
?};

_year:=_a~1;
_month:=_a~2;

{? _year=O.R & _month=O.M
|| return()
?};

: zapis jesli potracenie dotyczy poprzednich miesiecy
{? var_pres('j')>=100
|| obj_del(j)
?};
j:=obj_new(7);
j[1]:=__RUB.sys_kod(571110);
j[2]:=__RUB.sys_kod(571210);
j[3]:=__RUB.sys_kod(571120);
j[4]:=__RUB.sys_kod(571220);
j[5]:=__RUB.sys_kod(57210);
j[6]:=__RUB.sys_kod(57310);
j[7]:=__RUB.sys_kod(574110);

: _blokada - flaga
_blokada:=0;
{? _year<O.RU
|| _blokdata:=exec('zablokuj_podst_sk','lista_licz',P.OSOBA,date(_year,_month,0),,1);
   {? _blokdata<=date(O.R,O.M,0) & _blokdata~1 = _year
   || _blokada:=1
   || _blokada:=0
   ?}
|| _blokdata:=exec('zablokuj_podst_sk','lista_licz',P.OSOBA,date(O.RU,O.MU,0),,1);
   {? _blokdata<=date(O.RU,O.MU,0) & _blokdata~1 = O.RU
   || _blokada:=1
   || _blokada:=0
   ?}
?};

 _lista:='L'+FUNKCJE.ZNLISTY();
{? _blokada
|| _typskl:=','+__RUB.sys_sql(57210)+','+__RUB.sys_sql(57310)+','+__RUB.sys_sql(574110)+','
|| _typskl:=''
?};

KOR.index('KOR_PNR');
KORN.index('KOR_NAPZ');
KORN.prefix('N',P.ref,_lista,_year,_month);
: czy jest składka zdrowotna
KP.cntx_psh;
KP.index('_KARTAPO');
KP.prefix();
_sprkas:=KP.find_key(P.ref(),_year,_month) & KP.S8;
KP.cntx_pop();

do;
{? ~KORN.first()
|| KORN.blank();
   KORN.LT:=_lista;
   KORN.ROK:=_year;
   KORN.MC:=_month;
   KORN.add()
?};

{? _c & _sprkas
|| _pocz:=7
|| _pocz:=1
?};

{! _i:=_pocz..7
|! {? _typskl*$j[_i]>0 | _typskl='' & __RUB.ref(j[_i])
   || KOR.prefix(KORN.ref(),__RUB.ref(j[_i]));
      {? KOR.first()
      || KOR.POD+=-_b$2;
         KOR.POTR+=-_b$2;
         KOR.put()
      || KOR.blank();
         KOR.RU:=__RUB.ref(j[_i]);
         KOR.POD:=-_b$2;
         KOR.POTR:=-_b$2;
         KOR.add()
      ?}
   ?}
!};
end;
obj_del(j);
&j


\umlojn_stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Procedura sprawdza stan bieżącej umowy.
::   WE:
::   WY: ''    - Umowa wprowadzona, jeszcze nie rozliczana.
::       'R'   - Umowa rozliczana.
::       'Z'   - Umowa zakończona (całkowicie rozliczona)
::  OLD: \Stan/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
{? UMLOJN.KW=UMLOJN.POZOST
|| ''
|? UMLOJN.POZOST=0
|| 'Z'
|| 'R'
?}


\umlojn_rata
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Procedura wyliczająca wysokość raty bieżącej umowy w bieżącym miesiącu. Wykorzystywana:
::       - jako wartość początkowa pola UMLOJP.KW;
::       - przy automatycznej spłacie (zamknięcie miesiąca).
::       Zakłada się, że:
::       - bufory tabel UMLOJN i UMLOJP są wypełnione prawidłowo;
::       - raty są zaokrąglane w dół do pełnych złotówek;
::       - ostatnia rata może być większa niż wcześniejsze raty (wcześniejsze zaokrąglenia).
::   WE: _a [REAL] - wcześniej wyliczona rata [domyślnie: 0].
::   WY: Kwota raty.
::  OLD: \Rata/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
_rb:={? var_pres('_a')=type_of(0) || _a ?};
:Rata w pełnych złotówkach.
_rstd:=UMLOJN.KW%UMLOJN.OKRES;
:Jeżeli do spłaty pozostało mniej pół raty - spłacamy całość (ostatnia rata).
:ER/WRT/XP/12.51/2208/0004 - zmiana wynikała z faktu, jeżeli ostatnia rata była mniejsza (nieważne o ile), to
:                            dwie ostatnie raty były spłacane razem
{? _rb+UMLOJN.POZOST<1.5*_rstd
|| _rb+UMLOJN.POZOST
|| _rstd
?}


\fp_fgsp_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [2010]
:: OPIS: Formula sprawdzajaca blokade naliczania skladki na FP i FGSP, w zwiazku z wiekiem osoby i ewentualna blokada
::       zapisana w kartotece dodatkowej.
::   WE:  Flaga:
::        1 - umowy o prace [domyslnie]
::        0 - umowy zlecenia
::   WY:  1 - blokada
::        0 - brak blokady
::  OLD: \fp_fgsp/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a=0
|| _dp:=date(RH.R,RH.M,1);
   _dk:=date(RH.R,RH.M,0);
   _OSOBA:=ZC.OSOBA()
|| _dp:=date(O.RU,O.MU,1);
   _dk:=date(O.RU,O.MU,0);
   _OSOBA:=P.OSOBA()
?};

_blokada:=0;
_wiek:={? _OSOBA.PLEC='K' || 55 || 60 ?};
_data_50:=_OSOBA.UR_DATA;
{? _data_50<>date(0,0,0) & _dp>=date(2009,7,1)
|| _lata:=(_dp~1*12+_dp~2-_data_50~1*12-_data_50~2)%12;
   _mc:=(_dp~1*12+_dp~2-_data_50~1*12-_data_50~2)%*12;
   _blokada:=_lata>_wiek | (_lata=_wiek & _mc>=1) |(_lata=_wiek & _mc=0 & _data_50~3=1)
?};
{? ~_blokada
|| KART_DEF.cntx_psh();
   KART_DEF.index('SYMBOL');
   KART_DEF.prefix('FP_FGSP',);
   {? KART_DEF.first()
   || KART_DOD.cntx_psh();
      KART_DOD.index('KART_DOD');
      KART_DOD.prefix(exec('ref_firma','ustawienia'),KART_DEF.ref(),_OSOBA.ref());
      {? KART_DOD.find_le(_dk) & KART_DOD.DO>=_dp & KART_DOD.OD<=_dk
      || _blokada:=1
      ?};
      KART_DOD.cntx_pop()
   ?};
   KART_DEF.cntx_pop()
?};
_blokada


\blok_fp_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [2011]
:: OPIS:   Funkcja ustala blokada skladek w sytuacji, gdy podstawa wymiaru skladek jest nizsza
::         od najnizszego wynagrodzenia
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WE:  flaga:
::        1 - umowy o prace
::        0 - umowy zlecenia
::   WY:  1 - blokada
::        0 - brak blokady
::  OLD: \blok_fp/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return(0) ?};
{? _a<0 | _a>1 || return(0) ?};

_blokada:=_nieob:=0;
{? _a
|| _data1:=date(O.R,O.M,1); _data2:=date(O.R,O.M,0);
   _podstawa:=FUNKCJE.L_SYS(5651);
   _dodlist:=FUNKCJE.LU_SYS(5651)+DoList.k[16]+FUNKCJE.S(7069);
   {? _podstawa+_dodlist=0 || return(0) ?};
   H.cntx_psh;
   H.index('_HISTKOD');
   H.prefix(P.ref,'Z');
   {? H.find_le(_data2)
   || _nk:=exec('ust_nk','lista_licz',_data2,'NK');
      {? exec('czy_rok','staz',_data2)
      || _proc:=1
      || _buf:=exec('oblicz','staz',1,,_data2~1,,_data2);
         _dzien:=_buf.daty[1]~3;
         _mc:=_buf.daty[1]~2;
         _rok:=_buf.daty[1]~1+1;
         _data:=date(_rok,_mc,{? _dzien>(_t:=date(_rok,_mc,0)~3) || _t || _dzien ?});
          _proc:={? _data2>=_data || 1 || 0.8 ?}
      ?};
       _nk:=_nk*_proc$2;
      {? _podstawa+_dodlist<_nk
      ||  __KAL.set_cal(P.KAL,_data2~1);
         _cp:=-(1+H.CP().S);
         _minus:=exec('dnpzazw','nieobecnosc',_data1,_data2,'gr');
         _godznom:=__KAL.w_hours(_data1,_data2,1);
         {? ~_godznom
         || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                      'Brak danych odnośnie kalendarza pracownika.'@,
                      'Po uzupełnieniu danych wykonaj naliczanie listy płac!'@);
                      H.cntx_pop; return(0)
         ?};
         _godz:=exec('nominal','godziny',_data1,_data2,1)$2;
         {? _cp='u'
         || _praca:=_godz-_minus
         || _praca:=FUNKCJE.L(54)+FUNKCJE.L(63)+FUNKCJE.L(48)
         ?};
         {? _praca>0
         ||
:           pobranie wartosci potracen z kartoteki nieobecnosci
            _potr_n:=exec('potracenia_nieobecn','lista_licz',1,O.R,O.M,113);
            {? _praca<_godz
            || {? (_nk/_godz*_praca)$2=_podstawa+_dodlist+_potr_n
:                    ^ Obsluga bledow zaokraglen
               || _pelny_mc:=_nk
               || _pelny_mc:=((_podstawa+_dodlist+_potr_n)/_praca*_godz)$2
               ?}
            || _pelny_mc:=(_podstawa+_dodlist+_potr_n)$2
            ?};
            _blokada:=(_nk-_pelny_mc)$2>0
         || {? _podstawa || _blokada:=0 || _blokada:=1 ?}
         ?}
      ?}
   || H.cntx_pop; return(0)
   ?};
   H.cntx_pop

|| _nk:=exec('ust_nk','lista_licz',RH.DRA,'NK');
   {? ~_nk
   || RAPLS.msg('','','','Brak danych odnośnie najniższej krajowej.'@,
                'Po uzupełnieniu danych wykonaj ponowne przeliczenie rachunku!'@);
      return(0)
   ?};

   __KAL.set_cal('standard');
   _godznom:=__KAL.w_hours(date(RH.DRA~1,RH.DRA~2,1),date(RH.DRA~1,RH.DRA~2,0));
   {? ~_godznom
   || RAPLS.msg('',P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                'Brak danych odnośnie kalendarza zleceniobiorcy.'@,
                'Po uzupełnieniu danych wykonaj ponowne przeliczenie rachunku!'@);
      return(0)
   ?};

   _ref:=RH.ref();
   _data1:=date(RH.R,RH.M,1);
   _data2:=date(RH.R,RH.M,0);
   _pelny_mc:=DoList.z[17];

   ZC.cntx_psh();
   RH.cntx_psh();
   RH.index('RACHDATA');
   RH.prefix(exec('ref_firma','ustawienia'),RH.ZLE().OSOBA,RH.R,RH.M);
   _dRH:=RH.first();
   {!
   |? _dRH & _pelny_mc<_nk
   |! _podst:={? RH.ref()=_ref || FUNKCJE.Z_SYS(5651) || exec('licza_rhs','lista_licz',5651) ?};
      {? RH.ZLE().TYP='G' | (ZC.DU<=_data1 & _data2<=ZC.DW) | ZC.TYP='D'
:        Jezeli umowa jest godzinowa, dzienna lub trwa caly miesiac - podstawa brana jest w kwocie wyplaconej.
      || _pelny_mc+=_podst

:        Dla pozostalych umow - podstawa jest uzupelniana do pelnego miesiaca.
      || _minus:=0;
         {? _data1<ZC.DU & ZC.DU<=_data2 || _minus+=__KAL.w_hours(_data1,ZC.DU-1) ?};
         {? _data1<=ZC.DW & ZC.DW<_data2 || _minus+=__KAL.w_hours(ZC.DW+1,_data2) ?};
         _praca:=_godznom-_minus;
         _pelny_mc+={? _praca>0 || _podst/_praca*_godznom$2 || _podst ?}
      ?};
      _dRH:=RH.next()
   !};
   RH.cntx_pop();
   ZC.cntx_pop();
   _pelny_mc+=FUNKCJE.SZ(7069);
   _blokada:=(_nk-_pelny_mc)$2>0
?};
_blokada


\podstawa_fep_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2010B]
:: OPIS: Formula wylicza podstawe skladki FEP z uwzględnieniem składników okresowych
::   WY: wartosc podstawy
::  OLD: \podstawa_fep/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
{? O.RU<2010 || return(0) ?};

_pod_emr:=FUNKCJE.L_SYS(56111);
{? ~_pod_emr || return(0) ?};

:: obsługa specjalna dla ekwiwalentu za urlop - ER/WRT/XP/21.37/2208/0024
_ekw_wartosc:=FUNKCJE.L_SYS(431);
{? _ekw_wartosc
|| {? _pod_emr>_ekw_wartosc
   || _pod_emr-=_ekw_wartosc
   || _ekw_wartosc:=_pod_emr;
      _pod_emr:=0
   ?}
?};

{? var_pres('_OKRFEP')>100 || obj_del(_OKRFEP) ?};
_OKRFEP:=exec('okr_fep','lista_licz');
:: skorygowac _pod_emr o _OKRFEP
_pod_emr+=exec('kor_fep','lista_licz',_OKRFEP,-1,-1,0);

_koniec:=date(O.R,O.M,0);
_pocz:=date(O.R,O.M,1);
_dni_all:=_dni_fep:=_wyn:=_nieob:=0;
H.index('_HISTKOD'); H.prefix(P.ref,'Z');
{? H.last
|| {!
   |? {? H.OD<=_koniec & (H.DO>=_pocz | H.DO=date(0,0,0))
      || {? H.OD>_pocz
         || _od:=H.OD
         || _od:=_pocz
         ?};
         {? H.DO>_koniec | H.DO=date(0,0,0)
         || _do:=_koniec
         || _do:=H.DO
         ?};
         {? _do>=_od
         || _dni_all+=_do-_od+1;
            {? H.SP='T'
            || _dni_fep+=_do-_od+1;
               _lista:='L'+FUNKCJE.ZNLISTY();
               _nieob+=exec('suma_dni_N','nieobecnosc',12,_od,_do,_lista)
            ?}
         ?}
      ?};
      H.prev & H.DO>=_pocz
   !}
?};

:: obsługa specjalna dla ekwiwalentu za urlop - ER/WRT/XP/21.37/2208/0024
{? _ekw_wartosc
|| _ekw_dni_all:=_dni_all;
   _ekw_dni_fep:=_dni_fep
?};

_dni_all-=_nieob;
_dni_fep-=_nieob;

: Odjecie wartosci z godzin nadliczbowych ktore powstaly w czasie bez FEP
{? _dni_fep>0 & _pod_emr>0
|| _N_godz:=_T_godz:=0;
   G.cntx_psh();
   {! _ind:=0..1
   |! _Rok:=O.R-_ind;
      {? _Mask:='godz'+(('0000'+$_Rok)+4); G.name<>_Mask || G.use(_Mask) ?};
      G.index('PRRD');
      {! _Rub:=55..56
      |! G.prefix(P.ref,'G',_Rub,~O.LT);
         {? G.first
         || {!
            |? {? H.find_le(G.D) & H.SP<>'T'
               || _N_godz+=G.WAR
               || _T_godz+=G.WAR
               ?};
               G.next
            !}
         ?}
      !}
   !};
   G.cntx_pop();

   {? _dni_fep=_dni_all
   || _pod_emr-=_N_godz;
      {? _pod_emr<0 || _pod_emr:=0 ?};
      _wyn:=_pod_emr
   || _pod_emr-=(_N_godz+_T_godz);
      _wyn:=_pod_emr/_dni_all*_dni_fep$2+_T_godz
   ?}
?};

:: dodanie składników okresowych do _wyn
_wyn+=exec('kor_fep','lista_licz',_OKRFEP,1,0,0);

:: obsługa specjalna dla ekwiwalentu za urlop - ER/WRT/XP/21.37/2208/0024
{? _ekw_wartosc & _ekw_dni_all*_ekw_dni_fep$2>0
|| _wyn+=_ekw_wartosc/_ekw_dni_all*_ekw_dni_fep$2
?};

{? var_pres('_OKRFEP')>100 || obj_del(_OKRFEP) ?};
_wyn


\podst_bp_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS:
::   WE:
::   WY:
::  OLD: \podst_bp/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
::       UWAGA: Procedura korzysta z numerow rubryk!
{? var_pres('_a')=type_of('')
   || {? ~('wm'*_a) || _a:='' ?}
   || _a:=''
?};
_pod_url:={? _a='m' || FUNKCJE.L(523,524)+FUNKCJE.L(7017,7018)+FUNKCJE.L(7071) ?};
{? _pod_url<0
|| _pod_mac:=FUNKCJE.LU_SYS(56121,1);
   {? _pod_mac>0
   || {? _pod_mac<(_pod_url*-1)
      || _pod_url:=_pod_mac
      ?}
   || _pod_url:=0
   ?}
?};
{? _pod_url | (_a='w' & -O.T().T='zxx') ||
   _ons:=obj_new(3);
   exec('okr_nskl_kartprac','lista_licz',_a,_ons);
   {? _a='w' ||
      _pod_url:=({? date(O.RU,O.MU,1)>=date(2002,1,1) & date(O.RU,O.MU,1)<=date(2008,12,1)
                 || KST.Z5
                 |? date(O.RU,O.MU,1)>=date(2012,1,1) & date(O.RU,O.MU,1)<=date(2013,8,1)
                 || _srednia:=exec('wyl_podst_wych_podst_sk','lista_licz');
                    {? _srednia>=KST.PRZWYN*0.6$2 | _srednia=0
                    || KST.PRZWYN*0.6$2
                    || _srednia
                    ?}
                 |? date(O.RU,O.MU,1)>=date(2013,9,1)
                 || _srednia:=exec('wyl_podst_wych_podst_sk','lista_licz');
                    {? _srednia>=KST.SK/30*0.6$2 | _srednia=0
                    || KST.SK/30*0.6$2
                    || _srednia
                    ?}
                 || KST.NK
                 ?}*_ons[1]/(date(O.RU,O.MU,0)-date(O.RU,O.MU,1)+1))$2
   ?};
   {? _pod_url ||
      _pod_url*={? _on:=_ons[2]+_ons[3]
                   || (_ons[1]-_on)/_ons[1]
                   || 1
                ?};
      _pod_url:=_pod_url$2;
      {? -KST_PAR.AUT_BLOK='t' ||
         {? (_limit:=KST.SK)>0
            || _pod_zus:=exec('spr_blok_podst_sk','lista_licz',P.OSOBA);
               {? type_of(_pod_zus)=type_of(0)
                  || _pod_zus+=FUNKCJE.LU_SYS(56111,0)+
                               exec('kart_zus_podst_sk','lista_licz',O.RU,O.MU)+
                               exec('rachunki_podst_sk','lista_licz',P.OSOBA,O.RU,O.MU)+
                               {? _a='w' || FUNKCJE.L_SYS(56121) ?}+
                               FUNKCJE.LU_SYS(56121,0)+FUNKCJE.LU_SYS(56131,0);
                     {? _limit<=_pod_zus+_pod_url ||
                        exec('zablokuj_podst_sk','lista_licz',P.OSOBA);
                        {? (_pod_url:=_limit-_pod_zus)<0 ||
                           _pod_url:=0
                     ?} ?}
                  || _pod_url:=0
               ?}
            || RAPLS.msg('','','','Uzupełnij pole: Max. wym. składek w stałych systemu'@)
   ?} ?} ?};
   obj_del(_ons)
?};
_pod_url


\wyl_podst_wych_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Funkcja wylicza srednie wynagrodzenie z 12 miesiecy poprzedzajacych urlop wychowawczy.
::       Pobierane sa miesiace, w ktorych pracownik przepracowal przynajmniej polowe obowiazujacego czasu pracy.
::       Jezeli nie bedzie zadnego miesiaca spelniajacego ww warunki funkcja zwroci 0
::   WY: srednia wartosc wynagrodzenia lub zero
::  OLD: \wyl_podst_wych/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
H.cntx_psh();
N.cntx_psh();
RH.cntx_psh();
P.index('PRACOSOB');
P.prefix(exec('ref_firma','ustawienia'),O.F_ZATR().KOD,P.OSOBA);
_wynik:=0;
{? P.first
|| {!
   |? N.index('NIPRACNB');
      N.prefix('N',P.ref,3);
      {? N.find_le(date(O.RU,O.MU,0)) & date(O.RU,O.MU,1)<=N.DO & N.OD<=date(O.RU,O.MU,0)
      || _OD:=N.OD;
         {!
         |? {? N.prev & date(_OD~1,_OD~2-3,1)<=date(N.DO~1,N.DO~2,1)
            || _OD:=N.OD;
               1
            ?}
         !};
         _N_ref:=#N.ref;
         _Start:=(O.R*12+O.M)-((_OD~1)*12+_OD~2)+1;
         _Stop:=(O.R*12+O.M)-(P.DZA~1*12+P.DZA~2);
         _Stop:=
            {? _Stop<_Start+11
            || _Stop
            || _Start+11
            ?};
         {? P.DZA>date(O.R,O.M-_Stop,1)
         || {? P.DZA>exec('ust_pie_wynchor','lista_licz',P.DZA)
            || _Stop:=_Stop-1;
               {? _Stop<0
               || _Stop:=0
               ?}
            ?}
         ?};
         _wynik+=exec('wynchor_bis_podst_sk','lista_licz',_OD,_Start,_Stop,_N_ref)
      ?};
      P.next
   !}
?};

H.cntx_pop();
N.cntx_pop();
RH.cntx_pop();
P.cntx_pop();
_wynik


\ust_pie_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [2009+]
:: OPIS: Ustala pierwszy dzien roboczy dla miesiaca z podanej daty
::   WE: _a - data
::   WY: data pierwszego dnia roboczego
::  OLD: \ust_pie/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
_dzien:=_pocz:=date(_a~1,_a~2,1);
_kon:=date(_a~1,_a~2,0);
{! |?
   _dalej:=__KAL.w_days(_pocz,_dzien);
   {? ~_dalej & _dzien<_kon
   || _dzien+=1;
      1
   ?}
!};
_dzien


\kwprzel_kali
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.41]
:: OPIS: Kwota przelewu na liscie dla wskazanego skladnika placowego.
::       Formula korzysta ze zmiennych:
::          DoList.x    - Wartosc netto;
::          DoList.m[1] - Kwota pozostala do wyplaty (wartosc modyfikowana).
::       Zaklada sie, ze dziedzina tabeli PKO jest ustalona.
::   WE: _a - Nr rubryki placowej (parametr obowiazkowy).
::       _b - Formula wykonywana przy przelewie okreslonej kwoty (czyli dla PKO.K>1). Jej wynik (1/0) okresla,
::            czy uwzgledniane beda kwoty juz wyplacone na pozostalych listach. Dokladniej: czy kwota PKO.K bedzie
::            pomniejszana o juz przelane pieniadze. [Domyslnie: "1" - tak]
::   WY: Kwota przelewu na dany rachunek bankowy, okreslony numerem rubryki.
::  OLD: \kwprzel/kali.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _kod:=_a || return(0) ?};
_war:={? var_pres('_b')=type_of("") || _b || "1" ?};

_kw:=0;
{? DoList.x>0
|| PKO.index('_PKO');
   PKO.prefix(P.OSOBA);
   {? PKO.find_key(_kod)
   || {? PKO.K<=1
      || _kw:=DoList.x*PKO.K$2
      || _kw:=PKO.K;
         {? PAR_SKID.get(247)='T' & _war()
         || _kw-=FUNKCJE.L(_kod,,0);
            {? _kw<0 || _kw:=0 ?}
         ?}
      ?};
      {? DoList.m[1]<=_kw
      || _kw:=DoList.m[1]; DoList.m[1]:=0
      || DoList.m[1]-=_kw
      ?}
   ?}
?};
_kw


\minkraj_komornik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Funkcja wylicza najnizsza krajowa dla pracownika w danym miesiacu
::   WE: _a - data badania
::       _b - dla zleceniobiorcy
::       [_c] - 1 - ma zwrocic stawke minimalna dla jednej godziny
::       [_d] - [date] - Data pobrania ze stałych NK - jeśli nie podany - to ustawienie na detę listy
::   WY: Wyliczona kwota najnizszej krajowej
::       Jesli podano _c - stawka min dla jednej godziny
::       Jesli nie podano _c - wartosc wyrownania
::  OLD: \minkraj/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
_data1:=date(_a~1,_a~2,1);
_data2:=date(_a~1,_a~2,0);

{? var_pres('_b')<>type_of(0)
|| _b:=0
?};
{? var_pres('_c')<>type_of(0)
|| _c:=0
?};
_data_NK:={? var_pres('_d')=type_of(date()) || _d || O.D ?};

_wyrown:=_stawkamin:=0;

H.cntx_psh();
H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {? H.find_le(_data2)
   || {? H.DO=date(0,0,0) | H.DO>=_data1
      || {? O.T().KA().NAZWA<>''
         || __KAL.set_cal(O.T().KA().NAZWA)
         || __KAL.set_cal('standard')
         ?};
         _kal_naz:=__KAL.nazwa;
         _kal_rok:=__KAL.rok;
:: Wyliczenie godzin nominalnych dla pełnego wymiaru zatrudnienia z uwzględnieniem obniżonej normy dobowej
         _norma:=exec('norma_zmiana','godziny',_data1,_data2);
         _godznom:=exec('nominal','godziny',_data1,_data2,1,_norma,,,1)$2;
         {? ~_godznom
         || {? ~_b
            || RAPLS.msg(
                  P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                  'Brak danych odnośnie kalendarza pracownika.'@,
                  exec('retry_msg','lista_licz')
               )
            ?};
            H.cntx_pop();
            return(0)
         ?};
::       ustalenie % minimalnego wynagrodzenia w zaleznosci od stazu pracy
         {? exec('czy_rok','staz',_data2)
         || _proc:=1
         || _buf:=exec('oblicz','staz',1,,_data2~1,,_data2);
            _dzien:=_buf.daty[1]~3;
            _mc:=_buf.daty[1]~2;
            _rok:=_buf.daty[1]~1+1;
            _td:=0;
            _datast:=date(_rok,_mc,{? _dzien>(_td:=date(_rok,_mc,0)~3) || _td || _dzien ?});
            _proc:={? _data2>=_datast || 1 || 0.8 ?}
         ?};
         exec('czytaj','#stalesys',_data_NK,KST,'NK');
         _stawkamin:=(KST.NK*_proc)/_godznom;
         exec('czytaj','#stalesys',date(O.R,O.M,0),KST,'NK');
         {? _kal_naz<>__KAL.nazwa || __KAL.set_cal(_kal_naz,_kal_rok) ?};
         _godz:=exec('nominal','godziny',_data1,_data2,1,_norma,,1)$2;
         {? _godz>0 || _wyrown:=_stawkamin*_godz$2 ?}
      ?}
|| H.cntx_pop();
   return(0)
?};
H.cntx_pop();

{? _c
|| _stawkamin
|| _wyrown
?}


\find_potr_komornik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Sprawdzenie czy jest aktywne potracenie dla pracownika
::   WE: _a - 0 umowa zlecenie; 1 lista plac
::       _b - data
::  OLD: \find_potr/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return(0) ?};
{? var_pres('_b')<>type_of(date()) || return(0) ?};
KOM_OS.index('KOM_OS');
KOM_OS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref(),'T');
_wyn:=0;
{? KOM_OS.first()
|| {!
   |? {? date(KOM_OS.OD~1,KOM_OS.OD~2,1)<=_b & (date(KOM_OS.DO~1,KOM_OS.DO~2,0)>=_b | KOM_OS.DO=date(0,0,0))
      || _wyn:=1;
         0
      || KOM_OS.next()
      ?}
   !}
?};
_wyn


\potracenie_komornik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Wyliczenie potracen - funkcja wolana z formul obliczeniowych pozycja 950 "Potracenia razem"
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WE: _a - 1 - funkcja wolana dla plac 0 - funkcja wolana dla zlecen
::  OLD: \potracenie/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
: sprawdzenie argumentow
{? _<1 || return ?};
{? type_of(_a)<>type_of(0) || return ?};

KOM_OS.index('KOM_OS');
KOM_OS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
{? ~KOM_OS.first || return ?};
{? PAR_SKID.get(230)<>'T' || exec('usun_rozl','komornik',_a,1); return ?};

:wypelnienie tablicy rubryk o atrybucie 21 "Rubryki w slowniku potracen"
_rub:=__RUB.sys_rub(2111,{? _a || date(O.R,O.M,0) || date(RH.R,RH.M,0) ?});
{? ~_rub.size || return ?};
_RUB:=obj_new(_rub.size);
{? _rub.first
|| _ind:=0;
   {! |? _ind+=1; _RUB[_ind]:=_rub.RN; _rub.next !}
?};

{? _a || _rok:=O.R; _miesiac:=O.M; _rokp:=O.RP; _miesp:=O.MP || _rokp:=_rok:=RH.R; _miesp:=_miesiac:=RH.M ?};
:: procedura uruchamiana tylko w przypadku, gdy lista nie jest pusta
{? {? _a || ~(FUNKCJE.L_SYS(2114)-FUNKCJE.L_SYS(2113)) || ~(FUNKCJE.Z_SYS(2114)-FUNKCJE.Z_SYS(2113)) ?}
||
:: czy sa jakiekolwiek aktywne potracenia
:: usun potracenia dotyczace tej listy
   {? ~exec('find_potr_komornik','lista_licz',_a,date(_rok,_miesiac,1))
   || exec('usun_rozl','komornik',_a,1);
      {! _ind:=1.._rub.size |! {? _a || FUNKCJE.LK(_RUB[_ind],,0) || FUNKCJE.ZK(_RUB[_ind],,0) ?} !}
   || exec('usun_rozl','komornik',_a);
      {! _ind:=1.._rub.size |! {? _a || FUNKCJE.LK(_RUB[_ind],,0) || FUNKCJE.ZK(_RUB[_ind],,0) ?} !}
   ?};
   obj_del(_RUB);
   obj_del(_rub);
   return()
?};

:: Zwolnienie przychodu od podatku z art. 21 ust. 1 pkt 148.
_U26:={? _a || FUNKCJE.L(7094)>0 || FUNKCJE.Z(7094)>0 ?};
_ZDR:=_rokp>2021;
:: Funkcja odpowiedzialna za zbudowanie odpowiedniej metody dla obiektu FUNKCJE
:: Obiekt imitujący FUNKCJE.L i FUNKCJE.L_SYS odpowiednio zbudowany dla wyliczeń zgodnych kosztowo i podatkowo
_FUNKCJE:=obj_new('L','L_SYS','FUN','WYP');
:: Uwzględnienie parametru: 259 "Czy wyliczać potrącenia komornicze zgodnie z miesiącem podatkowym listy"
_FUNKCJE.WYP:=exec('test_par','parametr',259,'T');
:: Polski ład zmiana od 1.07.2022
{? _a
|| _PL_NEW:=FUNKCJE.PL_NEW
|| {? RH.DWY~1>2022
   || _PL_NEW:=1
   || _par334:=exec('get_par_date','parametr',334);
      _PL_NEW:=_par334>date(0,0,0) & _par334<=RH.DWY
   ?}
?};
{? _PL_NEW
|| _PODATEK:=0
|| _PODATEK:=exec('test_par','parametr',291,'P')
?};
{? _FUNKCJE.WYP
:: wywołanie dla wyliczeń zgodnych z miesiącem podatkowym
|| _rok:=_rokp; _miesiac:=_miesp;
   _FUNKCJE.L:="
      {? var_pres('_b')=type_of(0)
      || {? var_pres('_c')=type_of(0)
      || ($('FUNKCJE.LP('+$_a+','+$_b+','+$_c+',,1)'))()
      || ($('FUNKCJE.LP('+$_a+','+$_b+',,,1)'))()
      ?}
      |? var_pres('_c')=type_of(0)
      || ($('FUNKCJE.LP('+$_a+',,'+$_c+',,1)'))()
      || ($('FUNKCJE.LP('+$_a+',,,,1)'))()
      ?}
   ";
   _FUNKCJE.L_SYS:="
      {? var_pres('_b')=type_of(0)
      || {? var_pres('_c')=type_of(0)
         || ($('FUNKCJE.LP_SYS('+$_a+','+$_b+','+$_c+',1)'))()
         || ($('FUNKCJE.LP_SYS('+$_a+','+$_b+',,1)'))()
         ?}
      |? var_pres('_c')=type_of(0)
      || ($('FUNKCJE.LP_SYS('+$_a+',,'+$_c+',1)'))()
      || ($('FUNKCJE.LP_SYS('+$_a+',,,1)'))()
      ?}
   "
||
:: wywołanie dla wyliczeń zgodnych z miesiącem kosztowym
   _FUNKCJE.L:="
      {? var_pres('_b')=type_of(0)
      || {? var_pres('_c')=type_of(0)
         || ($('FUNKCJE.L('+$_a+','+$_b+','+$_c+')'))()
         || ($('FUNKCJE.L('+$_a+','+$_b+')'))()
         ?}
      |? var_pres('_c')=type_of(0)
      || ($('FUNKCJE.L('+$_a+',,'+$_c+')'))()
      || ($('FUNKCJE.L('+$_a+')'))()
      ?}
   ";
   _FUNKCJE.L_SYS:="
      {? var_pres('_b')=type_of(0)
      || {? var_pres('_c')=type_of(0)
         || ($('FUNKCJE.L_SYS('+$_a+','+$_b+','+$_c+')'))()
         || ($('FUNKCJE.L_SYS('+$_a+','+$_b+')'))()
         ?}
      |? var_pres('_c')=type_of(0)
      || ($('FUNKCJE.L_SYS('+$_a+',,'+$_c+')'))()
      || ($('FUNKCJE.L_SYS('+$_a+')'))()
      ?}
   "
?};

:czy sa jakiekolwiek aktywne potracenia
:usun potracenia dotyczace tej listy
{? ~exec('find_potr_komornik','lista_licz',_a,date(_rok,_miesiac,1))
|| exec('usun_rozl','komornik',_a,1);
   {! _ind:=1.._rub.size |! {? _a || FUNKCJE.LK(_RUB[_ind],,0) || FUNKCJE.ZK(_RUB[_ind],,0) ?} !};
   return
|| exec('usun_rozl','komornik',_a)
?};
_jest_zas:=_P_ref:=null;
P.cntx_psh();
R.cntx_psh();
:wprowadz dane do wyliczen
__pod_sum:=_all_pot:=_pot_all:=_bez_ZFSS:=0;
{? _a
|| _dop_mac:=FUNKCJE.L(7018)+_FUNKCJE.L(7018,,0)+FUNKCJE.L(7071)+_FUNKCJE.L(7071,,0);
   _zasilki_bl:=FUNKCJE.L_SYS(55);
   _zasilki:=(_zasilki_bl+_FUNKCJE.L_SYS(55,0));
   _ZP_mac_bl:=FUNKCJE.L_SYS(90203);
   _ZP_mac:=_ZP_mac_bl+_FUNKCJE.L_SYS(90203,0);
   _zus_er:=FUNKCJE.L_SYS(5711)+_FUNKCJE.L_SYS(5711,0);
   _ppk:=FUNKCJE.L_SYS(725)+_FUNKCJE.L_SYS(725,0);
   _zus_chw:=FUNKCJE.L_SYS(572)+_FUNKCJE.L_SYS(572,0);
   _n_potr:=(FUNKCJE.L_SYS(2113)+_FUNKCJE.L_SYS(2113,0));
   _wyn_zas:=(FUNKCJE.L_SYS(2114)+_FUNKCJE.L_SYS(2114,0))-(_zasilki+_zus_er+_zus_chw+_dop_mac+_ppk)-_n_potr;
:: Uwzględnienie parametru w zmianach dla polskiego ładu
   _podatek_bl:=FUNKCJE.L_SYS(961);
   _podatek:=_podatek_bl+_FUNKCJE.L_SYS(961,0);
   {? _PODATEK
   || _podatek_bl+=FUNKCJE.L_SYS(9077);
      _podatek_bl-=FUNKCJE.L_SYS(9078);
      _podatek+=FUNKCJE.L_SYS(9077)+_FUNKCJE.L_SYS(9077,0);
      _podatek-=(FUNKCJE.L_SYS(9078)+_FUNKCJE.L_SYS(9078,0))
   ?};
   _pod_cons:=_podatek;
   _pod_cons_bl:=_podatek_bl;
   _przychod_bl:=FUNKCJE.L_SYS(92);
   _przychod:=(_przychod_bl+_FUNKCJE.L_SYS(92,0));
   _all_pot:=(FUNKCJE.L_SYS(2115)+_FUNKCJE.L_SYS(2115,0));
   _pot_all:=(FUNKCJE.L_SYS(2116)+_FUNKCJE.L_SYS(2116,0));
   _kch:=(FUNKCJE.L_SYS(57411)+_FUNKCJE.L_SYS(57411,0));
   _kcho:=FUNKCJE.L_SYS(57412)+_FUNKCJE.L_SYS(57412,0);
   _ppk_f:=FUNKCJE.L_SYS(724)+_FUNKCJE.L_SYS(724,0);
   _bez_ZFSS:=FUNKCJE.L_SYS(21181)+_FUNKCJE.L_SYS(21181,0);
   _p_er:=FUNKCJE.L_SYS(56111)+_FUNKCJE.L_SYS(56111,0);
   _p_chw:=FUNKCJE.L_SYS(5621)+_FUNKCJE.L_SYS(5621,0);
   _p_ppk:=FUNKCJE.L_SYS(70)+_FUNKCJE.L_SYS(70,0);
   _pkch:=FUNKCJE.L_SYS(56411)+_FUNKCJE.L_SYS(56411,0);

:  odjęcie ewentualnego podatku oraz zusu pobranego od składników pobieranych/pomijanych całościowo
   {? _all_pot>0 | _pot_all>0 | _bez_ZFSS>0 | _n_potr
   || {? var_pres('_tab_rub')>100 || obj_del(_tab_rub); &_tab_rub ?};
      _tab_rub:=obj_new(4);
      {! _ind:=1..obj_len(_tab_rub)
      |! _tab_rub[_ind]:=obj_new(3)
      !};
: dla alimentow
      _tab_rub[1][1]:=__RUB.sys_rub(2115,date(O.R,O.M,0));
      _tab_rub[1][2]:=_all_pot;
      _tab_rub[1][3]:=0;
:: W całości potrącany na roszczenia niealimentacyjne - dla wszystkich typów
      _tab_rub[2][1]:=__RUB.sys_rub(2116,date(O.R,O.M,0));
      _tab_rub[2][2]:=_pot_all;
      _tab_rub[2][3]:=0;
:: bez ZFSS
      _tab_rub[3][1]:=__RUB.sys_rub(21181,date(O.R,O.M,0));
      _tab_rub[3][2]:=_bez_ZFSS;
      _tab_rub[3][3]:=0;
:: Rubryki nie stanowiące podstawy do potrąceń
      _tab_rub[4][1]:=__RUB.sys_rub(2113,date(O.R,O.M,0));
      _tab_rub[4][2]:=_n_potr;
      _tab_rub[4][3]:=1;

      params_set('tab_rub',_tab_rub,'zus_er',_zus_er,'zus_chw',_zus_chw,'kch',_kch,'kcho',_kcho,'FUNKCJE',_FUNKCJE,
         'ppk',_ppk,'ppk_f',_ppk_f,'podatek',_podatek,'przychod',_przychod,'pod_cons',_pod_cons,
         'p_er',_p_er,'pkch',_pkch,'p_ppk',_p_ppk,'p_chw',_p_chw);

      _podatek-=exec('potr_P_ZUS_LS','lista_licz');
      {? _podatek<0 || _podatek:=0 ?};
      _all_pot:=_tab_rub[1][2];
      _pot_all:=_tab_rub[2][2];
      _bez_ZFSS:=_tab_rub[3][2];
      _wyn_zas+=_tab_rub[4][2];
      {? var_pres('_tab_rub')>100 || obj_del(_tab_rub); &_tab_rub ?}
   ?};
   _pod_zas:=0;
   {? _zasilki>0
   || {? _zasilki-_ZP_mac>0
      || {? _wyn_zas>0
         || {? _zasilki_bl
            || _pod_zas:=(((_zasilki_bl-_ZP_mac_bl)/_przychod_bl)*_pod_cons_bl)$0
            ?};
            O.cntx_psh();
            LS.cntx_psh();
            _bl:=O.ref();
            {? _FUNKCJE.WYP
            || O.index('LISTYPLP');
               O.prefix(exec('ref_firma','ustawienia'),P.F_ZATR().KOD,O.RP,O.MP)
            || O.index('LISTYPLA');
               O.prefix(exec('ref_firma','ustawienia'),P.F_ZATR().KOD,O.R,O.M)
            ?};
            {? O.first()
            || {!
               |? {? O.ref()<>_bl
                  || LS.use(O.LT);
                     LS.index('PRACNRRU');
                     _pod_zas+=exec('podatek_zasilek','lista_licz')
                  ?};
                  O.next()
               !}
            ?};
            LS.cntx_pop();
            O.cntx_pop()
         || _pod_zas:=_podatek
         ?};
         {? _pod_zas>_podatek || _pod_zas:=_podatek ?};
         _wyn_zas-={? (_podatek-_pod_zas)<0 || 0 || (_podatek-_pod_zas) ?};
         __pod_sum+=&_pod_zas
      ?}
   || _wyn_zas-=_podatek
   ?};
:  dodanie podwyzszenia zasilku macierzynskiego
   _zasilki+=_dop_mac;

   &_podatek; &_zasilki_bl; &_ZP_mac_bl; &_przychod_bl; &_pod_cons_bl;

   _wyn_zas-=(FUNKCJE.L(789)+FUNKCJE.L_SYS(962)+&_kch+_FUNKCJE.L(789,,0)+_FUNKCJE.L_SYS(962,0));
   RH.index('RACHDATA');
   RH.prefix(exec('ref_firma','ustawienia'),P.OSOBA,_rok,_miesiac);
   {? RH.first & KOM_OS.KOL='T'
   || _tab_rub1:=__RUB.sys_rub(2114,date(O.R,O.M,0));
      _tab_ru2:=__RUB.sys_rub(2113,date(O.R,O.M,0));
      _potr:=obj_new(3);
      {! _ind:=1..3 |! _potr[_ind]:=0 !};
      {? var_pres('_tab_rub')>100 || &_tab_rub ?};
      _tab_rub:=obj_new(3);
      _tab_rub[1]:=__RUB.sys_rub(2115,RH.DWY);
      _tab_rub[2]:=__RUB.sys_rub(2116,RH.DWY);
      _tab_rub[3]:=__RUB.sys_rub(21181,RH.DWY);
      {!
      |? {? _tab_rub1.first
         || {!
            |? _wyn_zas+=exec('licz_rhs','lista_licz',_tab_rub1.RN);
               _tab_rub1.next
            !}
         ?};
         {? _tab_ru2.first
         || {!
            |? _wyn_zas-=exec('licz_rhs','lista_licz',_tab_ru2.RN);
               _tab_ru2.next
            !}
         ?};
         _wyn_zas-=exec('licza_rhs','lista_licz',5711,5721,57411,96,725);

:: dodanie wartosci dodatkowo naliczanych dla konkretnego potrącenia

         _kch:=exec('licza_rhs','lista_licz',57411);
         _kcho:=exec('licza_rhs','lista_licz',57412);
         _pkch:=exec('licza_rhs','lista_licz',56411);
         _p_er:=exec('licza_rhs','lista_licz',56111);
         _p_ppk:=exec('licza_rhs','lista_licz',70);
         _zus_e:=exec('licza_rhs','lista_licz',57111);
         _ppk:=exec('licza_rhs','lista_licz',725);
         _ppk_f:=exec('licza_rhs','lista_licz',724);
         _zus_r:=exec('licza_rhs','lista_licz',57112);
         _zus_ch:=exec('licza_rhs','lista_licz',5721);
         _p_chw:=exec('licza_rhs','lista_licz',5621);
         _pod:=exec('licza_rhs','lista_licz',91);

         {! _ind:=1..3
         |! {? _tab_rub[_ind].first
            || _wyn_pom:=0;
               R.prefix();
               {!
               |? {? R.seek(__RUB.ref(_tab_rub[_ind].RN))
                  || _r_ZUS:=R.ZUS;
                     _r_UBZ:=R.UBZ;
                     _potr[_ind]+=_wyn_pom:=exec('licz_rhs','lista_licz',_tab_rub[_ind].RN);
                     {? _wyn_pom
                     || _wyn_ppk:=_wyn_zup:=_wyn_kco:=_wyn_xx:=0;
                        {? _r_ZUS='T'
                        || {? _p_er
                           || _potr[_ind]-=_wyn_zup:=(_wyn_pom/_p_er)*(_zus_e+_zus_r)$2
                           ?};
                           {? _p_ppk
                           || _potr[_ind]-=(_wyn_pom/_p_ppk)*(_ppk)$2;
                              _wyn_ppk:=(_wyn_pom/_p_ppk)*(_ppk_f)$2
                           ?};
                           {? _p_chw
                           || _wyn_xx:=(_wyn_pom/_p_chw)*_zus_ch$2;
                              _wyn_zup+=_wyn_xx;
                              _potr[_ind]-=_wyn_xx
                           ?}
                        ?};
                        {? _r_UBZ='T'
                        || {? _pkch
                           || _potr[_ind]-=((_wyn_pom-_wyn_zup)/_pkch)*_kch$2;
                              {? ~_ZDR
                              || _wyn_kco:=((_wyn_pom-_wyn_zup)/_pkch)*_kcho$2
                              ?}
                           ?}
                        ?};
                        _potr[_ind]-=((_wyn_pom-_wyn_zup+_wyn_ppk)$0*_pod*0.01)$2-_wyn_kco;
                        &_wyn_zup;
                        &_wyn_kco;
                        &_wyn_ppk
                     ?}
                  ?};
                  _tab_rub[_ind].next
               !};
               &_wyn_pom
            ?}
         !};
         _all_pot+=_potr[1];
         _pot_all+=_potr[2];
         _bez_ZFSS+=_potr[3];
:: koniec
         RH.next
      !};
      &_tab_rub1;
      &_tab_ru2;
      &_tab_rub;
      &_potr;
      &_kch; &_kcho; &_pkch; &_p_er; &_zus_e; &_zus_r; &_zus_ch; &_p_chw; &_pod;
      &_p_ppk; &_ppk; &_ppk_f;
      &_r_ZUS; &_r_UBZ
   ?}
||
:: Dla zleceń
   _zasilki:=_zas:=_dop_mac:=0;
   _wyn_zas:=0;
   _potr:=obj_new(5);
   {! _ind:=1..5 |! _potr[_ind]:=0 !};
   _tab_rub:=obj_new(5);
   _tab_rub[1]:=__RUB.sys_rub(2114,RH.DWY);
   _tab_rub[2]:=__RUB.sys_rub(2113,RH.DWY);
   _tab_rub[3]:=__RUB.sys_rub(2115,RH.DWY);
   _tab_rub[4]:=__RUB.sys_rub(2116,RH.DWY);
   _tab_rub[5]:=__RUB.sys_rub(21181,RH.DWY);
   _koszty:=0;
   _ulga:=0;
   __RH_ref:=RH.ref;
   RH.cntx_psh();
   ZC.cntx_psh();
   _P_ref:=_jest_zas:=null();
   _P_ref:=exec('czy_prac','osoba',ZC.OSOBA,RH.DWY);
   O.cntx_psh; LS.cntx_psh;
   O.index('LISTYMIE');
   O.prefix(exec('ref_firma','ustawienia'),RH.DWY~1,RH.DWY~2);
   {? O.first
   || _sumr:="_wyn:=0;
         {? O.F_ZATR().KOD='Z'
         || LS.prefix(RH.ref,_a);
            {? LS.first
            || {! |? _wyn+={? LS.RH=__RH_ref || FUNKCJE.Z(_a) || LS.KW$2 ?}; LS.next !}
            || {? LS.RH=__RH_ref || _wyn+=FUNKCJE.Z(_a) ?}
            ?}
         || LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref,_a);
            {? LS.first
            || {! |? _wyn+=LS.KW$2; LS.next !}
            ?}
         ?}; _wyn";
      _suma:="
         _b:={? var_pres('_b')=type_of(0) || _b ?};
         _wyn:=0;
         {? _a.first()
         || {? O.F_ZATR().KOD='Z'
            || {!
               |?
                  LS.prefix(RH.ref(),_a.RN);
                  {? LS.first()
                  || {!
                     |? _wyn+={? LS.RH=__RH_ref || FUNKCJE.Z(_a.RN) || LS.KW$2 ?};
                        ~_b & LS.next()
                     !}
                  || {? LS.RH=__RH_ref || _wyn+=FUNKCJE.Z(_a.RN) ?}
                  ?};
                  _a.next()
               !}
            || {!
               |? LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref(),_a.RN);
                  {? LS.first()
                  || {!
                     |? _wyn+=LS.KW$2;
                        ~_b & LS.next()
                     !}
                  ?};
                  _a.next()
               !}
            ?}
         ?};
         _wyn";
      _r_ZUS:=_r_UBZ:=_r_POD:='';
      {!
      |?
         {? O.F_ZATR().KOD='Z' | (O.F_ZATR().KOD='P' & KOM_OS.KOL='T')
         || LS.use(-('L'+($O.R+2)+('00'+$O.M+2)+O.T().T));
            {? O.F_ZATR().KOD='Z'
            || RH.index('LISTA');
               RH.prefix(O.ref);
               _RH:=0;
               {? RH.first
               ||
                  {!|?
                     {? RH.ZLE().OSOBA=P.OSOBA || _RH:=1 ?};
                     ~_RH & RH.next
                  !}
               ?};
               LS.index('ZLEC')
            || LS.index('OSOBAKOD');
               LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref); _RH:=0
            ?};
            {!
            |? {? _RH || LS.prefix(RH.ref) ?};
               {? RH.ZLE().OSOBA=P.OSOBA & (LS.first | (_RH & RH.ref()=__RH_ref))
               || _wynagr:=_suma(_tab_rub[1])-_suma(_tab_rub[2]);
                  {? P.F_ZATR().KOD='P' || _P_ref:=LS.P ?};
                  _zas:=_sumr(650);
                  _dop_mac:=_sumr(7018)+_sumr(7071);
                  _ZP_mac:=_suma(__RUB.sys_rub(90203));

                  _wyn_zus:=_wyn_kcp:=0;
                  _kch:=_suma(__RUB.sys_rub(57411));
                  _kcho:=_suma(__RUB.sys_rub(57412));
                  _pkch:=_suma(__RUB.sys_rub(56411));
                  _p_er:=_suma(__RUB.sys_rub(56111));
                  _p_ppk:=_suma(__RUB.sys_rub(70));
                  _zus_e:=_suma(__RUB.sys_rub(57111));
                  _ppk:=_suma(__RUB.sys_rub(725));
                  _ppk_f:=_suma(__RUB.sys_rub(724));
                  _zus_r:=_suma(__RUB.sys_rub(57112));
                  _zus_ch:=_suma(__RUB.sys_rub(5721));
                  _p_chw:=_suma(__RUB.sys_rub(5621));
                  _pod:=_suma(__RUB.sys_rub(91),1);

                  _wynagr-=(_zus_e+_zus_r+_zus_ch+_zas+_dop_mac+_ppk);
                  _podatek:=(_suma(__RUB.sys_rub(9611))+_suma(__RUB.sys_rub(9612))+_suma(__RUB.sys_rub(962)));
                  {? _PODATEK
                  || _podatek+=(_suma(__RUB.sys_rub(9077))-_suma(__RUB.sys_rub(9078)))
                  ?};
                  _podatek_const:=_podatek;
                  _przychod:=_suma(__RUB.sys_rub(92));
:                 odjecie ewentualnego podatku oraz zusu pobranego od skladnikow pomijanych
                  _n_potr:=_suma(__RUB.sys_rub(2113));
                  {? _tab_rub[2].first & _n_potr
                  || _wyn_pom:=_wyn_p:=0;
                     R.prefix();
                     {!
                     |? {? R.seek(__RUB.ref(_tab_rub[2].RN))
                        || _r_ZUS:=R.ZUS; _r_UBZ:=R.UBZ;
                           _r_POD:={? __RUB.sys_attr(R.RN,48,date(O.R,O.M,0)) | (R.RN>100 & R.RN<500)
                                   || 'T'
                                   || R.POD
                                   ?};
                           _wyn_pom:=_sumr(_tab_rub[2].RN);
                           {? _wyn_pom
                           || _wyn_ppk:=_wyn_zup:=_wyn_kco:=_wyn_xx:=0;
                              {? _r_ZUS='T'
                              || {? _p_er
                                 || _wyn_zus+=_wyn_zup:=((_wyn_pom/_p_er)*(_zus_e+_zus_r))$2
                                 ?};
                                 {? _p_ppk
                                 || _wyn_zus+=((_wyn_pom/_p_ppk)*(_ppk))$2;
                                    _wyn_ppk:=((_wyn_pom/_p_ppk)*(_ppk_f))$2
                                 ?};
                                 {? _p_chw
                                 || _wyn_zus+=_wyn_xx:=(_wyn_pom/_p_chw)*_zus_ch$2;
                                    _wyn_zup+=_wyn_xx
                                 ?}
                              ?};
                              {? _r_UBZ='T' & _pkch
                              || _wyn_kcp+=((_wyn_pom-_wyn_zup)/_pkch)*_kch$2;
                                 {? ~_ZDR
                                 || _wyn_kco:=((_wyn_pom-_wyn_zup)/_pkch)*_kcho$2
                                 ?}
                              ?};
                              {? (_r_POD='T' | (_tab_rub[2].RN>100 & _tab_rub[2].RN<500) |
                                 __RUB.sys_attr(_tab_rub[2].RN,48)) & _pod
                              || {? _podatek_const & _przychod
                                 || _podatek_tmp:=((_wyn_pom-_wyn_zup+_wyn_ppk)$0*_pod*0.01)$2-_wyn_kco;
                                    {? _podatek_tmp
                                    || _wyn_p+=(_wyn_pom/_przychod)*_podatek_const
                                    ?}
                                 ?}
                              ?};
                              &_wyn_zup;
                              &_wyn_kco;
                              &_wyn_ppk
                           ?}
                        ?};
                        _tab_rub[2].next
                     !};
                     _podatek-=_wyn_p$0;
                     {? _podatek<0 || _podatek:=0 ?};
                     &_wyn_pom;
                     &_wyn_p
                  ?};
                  _wynagr+=&_wyn_zus;

::  odjecie ewentualnego podatku oraz zusu pobranego od skladnikow pobieranych calosciowo od alimentow
                  {! _ind:=3..5
                  |! {? _tab_rub[_ind].first
                     || _wyn_pom:=0;
                        R.prefix();
                        {!
                        |? {? R.seek(__RUB.ref(_tab_rub[_ind].RN))
                           || _r_ZUS:=R.ZUS;
                              _r_UBZ:=R.UBZ;
                              _potr[_ind]+=_wyn_pom:=_sumr(_tab_rub[_ind].RN);
                              {? _wyn_pom
                              || _wyn_ppk:=_wyn_zup:=_wyn_kco:=_wyn_xx:=0;
                                 {? _r_ZUS='T'
                                 || {? _p_er
                                    || _potr[_ind]-=_wyn_zup:=(_wyn_pom/_p_er)*(_zus_e+_zus_r)$2
                                    ?};
                                    {? _p_ppk
                                    || _potr[_ind]-=(_wyn_pom/_p_ppk)*(_ppk)$2;
                                       _wyn_ppk:=(_wyn_pom/_p_ppk)*(_ppk_f)$2
                                    ?};
                                    {? _p_chw
                                    || _wyn_xx:=(_wyn_pom/_p_chw)*_zus_ch$2;
                                       _wyn_zup+=_wyn_xx;
                                       _potr[_ind]-=_wyn_xx
                                    ?}
                                 ?};
                                 {? _r_UBZ='T'
                                 || {? _pkch
                                    || _potr[_ind]-=((_wyn_pom-_wyn_zup)/_pkch)*_kch$2;
                                       {? ~_ZDR
                                       || _wyn_kco:=((_wyn_pom-_wyn_zup)/_pkch)*_kcho$2
                                       ?}
                                    ?}
                                 ?};
                                 {? _podatek_const & _przychod
                                 || _podatek_tmp:=((_wyn_pom-_wyn_zup+_wyn_ppk)$0*_pod*0.01)$2-_wyn_kco;
                                    {? _podatek_tmp
                                    || _potr[_ind]-=(_wyn_pom/_przychod)*_podatek_const$2
                                    ?}
                                 ?};
                                 &_wyn_zup;
                                 &_wyn_kco;
                                 &_wyn_ppk
                              ?}
                           ?};
                           _tab_rub[_ind].next
                        !};
                        &_wyn_pom
                     ?}
                  !};
                  _all_pot:=_potr[3];
                  _pot_all:=_potr[4];
                  _bez_ZFSS:=_potr[5];

:                 uwzglednienie podatku zasilkow
                  {? _zas>0
                  || _pod_zas:={? _zas-_ZP_mac>0
                               || {? _wynagr>0 & _przychod
                                  || ((_zas-_ZP_mac)/_przychod)*_podatek_const$0
                                  || _podatek
                                  ?}
                               ?};
                     {? _pod_zas>_podatek || _pod_zas:=_podatek ?};
                     _wynagr-={? (_podatek-_pod_zas)<0 || 0 || (_podatek-_pod_zas) ?};
                     _zasilki+=_zas;
                     _zasilki+=_dop_mac;
                     {? P.F_ZATR().KOD='P' || _jest_zas:=LS.P ?};
                     __pod_sum+=&_pod_zas
                  || _wynagr-=_podatek
                  ?};
                  &_podatek;
                  _wynagr-=(_kch-&_wyn_kcp);
                  _wyn_zas+=_wynagr
               ?};
               {? _RH || RH.next ?}
            !}
         ?};
         O.next
      !};
      &_kch; &_kcho; &_pkch; &_p_er; &_zus_e; &_zus_r; &_zus_ch; &_p_chw; &_pod; &_n_potr;
      &_p_ppk; &_ppk; &_ppk_f;
      &_suma; &_r_ZUS; &_r_UBZ; &_r_POD; &_sumr
   ?};
   O.cntx_pop;
   LS.cntx_pop;
   RH.cntx_pop();
   ZC.cntx_pop();
   {? _jest_zas || _P_ref:=_jest_zas ?};
   {? _P_ref || P.prefix; P.seek(_P_ref) ?};
   &__RH_ref; &_tab_rub; &_potr
?};
R.cntx_pop();

{? ~(_wyn_zas+_zasilki)
|| exec('usun_rozl','komornik',_a,1);
   {! _ind:=1.._rub.size |! {? _a || FUNKCJE.LK(_RUB[_ind],,0) || FUNKCJE.ZK(_RUB[_ind],,0) ?} !};
   P.cntx_pop();
   return
?};
_indproc:=_ZDR_KU:=_ZDR_UP:=_ulga:=0;
{? ~_a
|| _data_wyp:=RH.DWY;
   {? _jest_zas
   || _nk:=exec('minkraj_komornik','lista_licz',RH.DWY,1)
   || _nk:=KST.NK
   ?}
|| _nk:=exec('minkraj_komornik','lista_licz',date(O.R,O.M,1),,,date(O.RP,O.MP,0));
   _data_wyp:=date(_rokp,_miesp,0)
?};

{? _a | _P_ref
|| P_IPOD.index('OD');
   P_IPOD.prefix(P.ref);
   {? P_IPOD.find_le(_data_wyp)
   || _koszty:=
         {? P_IPOD.KU<>'B'
         || {? P_IPOD.KU='Z'
            || {? _ZDR || _ZDR_KU:=300 ?};
               KST.KUZ
            || {? _ZDR || _ZDR_KU:=250 ?};
               KST.KU
            ?}
         || 0
         ?};
      {? O.RP>2022
      || {? exec('czy_prac','osoba',P.OSOBA,O.D)<>null()
         || {? P_IPOD.UP<>'B'
            || {? ~DoList.p[19]
               || {? 'Z,N'*P_IPOD.UP
                  || _ulga:=exec('ulga_podatkowa_KST','lista_licz',P_IPOD.PU,O.D)
                  ?}
               ?};
               {? 'Z,D'*P_IPOD.UP & exec('oblicz_wsprozl','lista_licz')>1
               || _ulga+=KST.UL
               ?}
            ?}
         || _koszty:=
               {? P_IPOD.KU<>'B'
               || {? P_IPOD.KU='Z'
                  || {? _ZDR || _ZDR_KU:=250 ?}
                  ?};
                  KST.KU
               || 0
               ?}
         ?}
      || _ulga:=
            {? P_IPOD.UP<>'B'
            || {? P_IPOD.UP='Z'
               || exec('oblicz_wsprozl','lista_licz')
               || 1
               ?}*KST.UL
            ?}
      ?};
      {? _ZDR
      || _ZDR_UP:=
            {? P_IPOD.UP<>'B'
            || {? P_IPOD.UP='Z'
               || exec('oblicz_wsprozl','lista_licz')
               || 1
               ?}*43.76
            ?}
      ?};
::    Ustalenie indywidualnego procentu do zaliczki pdof 17.75% podatku od 01.X.2019 do konca roku 2019
      {? P_IPOD.PROC>0 & _rokp=2019 & date(_rokp,_miesp,1)>=date(2019,10,1)
      || _indproc:=P_IPOD.PROC;
         {? _indproc=17.75
         || _indproc:=_indproc
         || _indproc:=0
         ?}
      ?}
   ?}
?};
{? ~_a
|| {? ~_P_ref
   || _koszty:=KST.KU
   ?};
   {? RH.DWY~1>2022
   || P_IPOD.index('OD');
      P_IPOD.prefix(RH.ZLE().P);
      {? P_IPOD.find_le(_data_wyp)
      || {? P_IPOD.UP<>'B' & exec('czy_aktywna_umowa','osoba',P.OSOBA,RH.DWY,,'UM_ZLEC')
         || {? ~DoList.p[19]
            || {? 'N'*P_IPOD.UP
               || _ulga+=exec('ulga_podatkowa_KST','lista_licz',P_IPOD.PU,RH.DWY)
               ?}
            ?}
         ?}
      ?}
   || _ulga:=KST.UL;
      {? _ZDR
      || _ZDR_KU:=250;
         _ZDR_UP:=43.76
      || _ZDR_KU:=_koszty;
         _ZDR_UP:=_ulga
      ?}
   ?}
?};

TP.index('TABPODAT');
TP.prefix(_rokp);
{? TP.first
|| {? ~_indproc
   || _pr_pod:={? _PL_NEW & _rokp=2022 || 12 || TP.PR ?}
   || _pr_pod:=_indproc
   ?};
:: 17 procent podatku od października do grudnia 2019.
   {? _rokp=2019 & (_pr_pod=18 | _pr_pod=17)
   || {? date(_rokp,_miesp,1)>=date(2019,10,1)
      || _pr_pod:=17
      || _pr_pod:=18
      ?}
   ?}
|| _pr_pod:={? date(_rokp,_miesp,1)<date(2019,10,1)
            || 18
            || {? _PL_NEW || 12 || 17 ?}
            ?}
?};

{? _ZDR || _ZDR_PR:=17 || _ZDR_PR:=_pr_pod ?};

:wyliczenie najnizszej krajowej netto dla danego pracownika
_nk_ppk:=_nk_fir:=0;
{? _nk>0
|| _stawka:={? _a || FUNKCJE.L_SYS(712)+FUNKCJE.L_SYS(713) || FUNKCJE.Z_SYS(712)+FUNKCJE.Z_SYS(713) ?};
:: ER/WRT/XP/23.25/2307/0010
   _ref_pwp:={? _a || P.ref() || RH.ref() ?};
   _dat_pwp:=date(_rok,_miesiac,0);
   {? _stawka=0
   || exec('czytaj','#stalesys',_dat_pwp,KST_PPK,'SK_MAXPU','PWP_NUD');
      _stawka:=
         exec('licz_pwp','ppk',_ref_pwp,__RUB.sys_kod(712),_dat_pwp)+
         exec('licz_pwp','ppk',_ref_pwp,__RUB.sys_kod(713),_dat_pwp)
   ?};
   _nk_ppk:=_nk*_stawka*0.01$2;
:: wylicz podatek od płaconego przez firmę ppk wychodząc od minimalnego wynagrodzenia
   {? _pr_pod & ~_U26
   || _pr_fir:={? _a || FUNKCJE.L_SYS(710)+FUNKCJE.L_SYS(711) || FUNKCJE.Z_SYS(710)+FUNKCJE.Z_SYS(711) ?};
::    ER/WRT/XP/23.25/2307/0010
      {? _pr_fir=0
      || exec('czytaj','#stalesys',_dat_pwp,KST_PPK,'SK_PF','SK_DOMDF','PWP_NUD');
         _pr_fir:=
            exec('licz_pwp','ppk',_ref_pwp,__RUB.sys_kod(710),_dat_pwp)+
            exec('licz_pwp','ppk',_ref_pwp,__RUB.sys_kod(711),_dat_pwp)
      ?};
      _nk_fir:=_nk*_pr_fir*0.01$2;
      _nk_fir:=_nk_fir$0*_pr_pod/100$2
   ?}
?};

_nk-=((_nk*KST.PRFE/2*0.01)$2+(_nk*KST.PRFRP*0.01)$2+(_nk*KST.PRFC*0.01)$2);

:skladka zdrowotna
__sk_zp:=(_nk*KST.PRKC*0.01)$2;
__zal_pod:=((_nk-_koszty)$0*_pr_pod*0.01-_ulga)$2;

:: dodanie zaliczki od ppk płaconego przez firmę
__zal_pod+=_nk_fir;

_ZDR_ZAL:=((_nk-_ZDR_KU)$0*_ZDR_PR*0.01-_ZDR_UP)$2;
{? _ZDR_ZAL<__sk_zp || __sk_zp:=_ZDR_ZAL ?};
{? _ZDR
|| __sk_zo:=0;
   {? __zal_pod<0
   || __zal_pod:=0
   ?}
|| __sk_zo:=(_nk*KST.PRKO*0.01)$2;
   {? __zal_pod<0
   || __sk_zp:=__sk_zo:=__zal_pod:=0
   || {? __zal_pod<__sk_zo || __sk_zo:=__zal_pod ?}
   ?}
?};
{? _U26 || __zal_pod:=__sk_zo:=0 ?};
__zal_pod:=(__zal_pod-__sk_zo)$0;

_nk-=(__sk_zp+__zal_pod+_nk_ppk);

VAR_DEL.delete('__zal_pod','__sk_zp','__sk_zo');
&_pr_pod; &_ulga; &_koszty; &_data_wyp; &_rokp; &_miesp;
:koniec wyliczen NK netto

_zostalo:=_wyn_zas+_zasilki;

_czy_jednorazowy:="
   {? KOM_OS.RAZ='T'
   || KOM_SP.index('KOM_SP'); KOM_SP.prefix(KOM_OS.ref(),_a,_b);
      _ok:=1;
      {? KOM_SP.first()
      || {!
         |? {? KOM_SP.TYP='R'
            || KOM_SP.next()
            || _ok:={? _c || KOM_OS.KT=O.T | KOM_OS.KT=null || KOM_OS.KT=null ?}; 0
            ?}
         !}
      || _ok:={? _c || KOM_OS.KT=O.T | KOM_OS.KT=null || KOM_OS.KT=null ?}
      ?};
      _ok
   || 1
   ?}";

:: wyliczenie kwoty jaka ma pozostac dla zasilkow z wartosci najnizszej emerytury
_min_emer:=_min_emA:=0;
:: od 1.07.2018 wartość kwoty wolnej od potrąceń zasiłków jest ustalana kwotowo w stałych systemu
{? _zasilki>0
|| _zas1:=_zas2:=0;
   {? date(_rok,_miesiac,0)>date(2018,7,1)
   || _kwwlpoz:=KST.KWWOLPOZ;
      _kwwlali:=KST.KWWOLALI;
      {? _a
      || _zas1:=exec('zasilki_komornik','lista_licz','K',O.R,O.M)$2;
         {? _zas1>0
         || _zas2:=exec('zasilki_komornik','lista_licz','K',O.R,O.M,1);
            _min_emer:=_kwwlpoz/30*_zas1$2;
            {? _min_emer>_kwwlpoz & ~_zas2 || _min_emer:=_kwwlpoz ?};
            _min_emA:=_kwwlali/30*_zas1$2;
            {? _min_emA>_kwwlali & ~_zas2 || _min_emA:=_kwwlali ?}
         ?}
      || {? _jest_zas
         || _zas1:=exec('zasilki_komornik','lista_licz','K',RH.DWY~1,RH.DWY~2)$2;
            _zas2:=exec('zasilki_komornik','lista_licz','K',RH.DWY~1,RH.DWY~2,1);
            _min_emer:=_kwwlpoz/30*_zas1$2;
            {? _min_emer>_kwwlpoz & ~_zas2 || _min_emer:=_kwwlpoz ?};
            _min_emA:=_kwwlali/30*_zas1$2;
            {? _min_emA>_kwwlali & ~_zas2 || _min_emA:=_kwwlali ?}
         || _zas1:=exec('ZC_zasilki_komornik','lista_licz',RH.ZLE().OSOBA,RH.DWY~1,RH.DWY~2)$2;
            _min_emer:=_kwwlpoz/30*_zas1$2;
            _min_emA:=_kwwlali/30*_zas1$2
         ?}
      ?};
      &_kwwlpoz; &_kwwlali
   || {? _a
      || _zas1:=exec('zasilki_komornik','lista_licz','K',O.R,O.M);
         {? _zas1>0
         || _min_emer:=KST.EMER/30*_zas1$2;
            {? _min_emer>KST.EMER & ~exec('zasilki_komornik','lista_licz','K',O.R,O.M,1) || _min_emer:=KST.EMER ?}
         ?}
      || {? _jest_zas
         || _min_emer:=KST.EMER/30*exec('zasilki_komornik','lista_licz','K',RH.DWY~1,RH.DWY~2)$2;
            {? _min_emer>KST.EMER & ~exec('zasilki_komornik','lista_licz','K',RH.DWY~1,RH.DWY~2,1) || _min_emer:=KST.EMER ?}
         || _min_emer:=KST.EMER/30*exec('ZC_zasilki_komornik','lista_licz',RH.ZLE().OSOBA,RH.DWY~1,RH.DWY~2)$2
         ?}
      ?};
      _min_emA:=_min_emer
   ?};
   &_zas1; &_zas2
?};

:powolanie tablicy dwuargumentowej [i][j] gdzie:
:[i]-numer kolejny rekordu wg indeksu
:[j]-> 1 - ref KOM_OS
:      2 - priorytet
:      3 - kwota wyliczona dla biezacej raty
:      4 - kwota ktora mozna pobrac z wynagrodzenia
:      5 - procent kwoty wyliczonej
:      6 - rekord ze spłaty: 0 - automatyczny; 1 - poprawiany
:      7 - % minimalnego  + ewentualne podwyższenie związanie z tarczą 3.0
:      8 - % zasadniczej
:      9 - ref rubryki do potracenia na liscie
:      10 - % zasilku
:      11 - % emerytury
:      12 - 1 oznacza alimenty (na podstawie atrybutu 21111)
:      13 - 1 oznacza potracenia inne niż zdefiniowane w kodeksie pracy - indywidualne
:      14 - kwota ktora mozna pobrac z zasilku
:      15 - rekord ze spłaty zasilek: 0 - automatyczny; 1 - poprawiany
::     16 - 'T' - Bez dodatkowych potrąceń

_tabl:=obj_new(KOM_OS.size);
{! _ind:=1..KOM_OS.size |! _tabl[_ind]:=obj_new(16) !};

:wypelnienie tablicy
KOM_OS.first; _ind:=_potrac:=_potrac13:=_potrZAS:=_potrZAS13:=0; _czy_inf:=#0;

{? _a
|| _p2020:="
      _wyn:=1;
      O.cntx_psh();
      {? KOM_SP.O
      || KOM_SP.O();
         _wyn:=FUNKCJE.CZY_POD()
      ?};
      O.cntx_pop();
      _wyn"
|| _p2020:="1"
?};

{!
|? {? KOM_OS.OD<=date(_rok,_miesiac,0)
      & (date(KOM_OS.DO~1,KOM_OS.DO~2,0)>=date(_rok,_miesiac,1) | KOM_OS.DO=date(0,0,0))
      & _czy_jednorazowy(_rok,_miesiac,_a)
      & ( _wynik:=0; {! _ndx:=1.._rub.size |! {? KOM_OS.KOM_RP().R().RN=_RUB[_ndx] || _wynik:=1 ?} !}; &_ndx; &_wynik)
   || {? KOM_OS.OD>date(_rok,_miesiac,1) || {? _czy_inf<KOM_OS.OD || _czy_inf:=KOM_OS.OD ?} ?};
      _ind+=1;
      _tabl[_ind][1]:=KOM_OS.ref;
      _tabl[_ind][2]:=KOM_OS.P;
      _tabl[_ind][16]:={? #KOM_OS.RA_DEF || 'T' || 'N' ?};
      _tabl[_ind][12]:=__RUB.sys_attr(KOM_OS.KOM_RP().R,21111);
      _tabl[_ind][13]:=__RUB.sys_attr(KOM_OS.KOM_RP().R,21114);
      _tabl[_ind][3]:=_tabl[_ind][4]:=_tabl[_ind][5]:=_tabl[_ind][6]:=_tabl[_ind][14]:=_tabl[_ind][15]:=0;
      {? _a
      || KOM_SP.index('KOM_SD'); KOM_SP.prefix(KOM_OS.ref,P.ref,_rok,_miesiac,O.ref)
      || KOM_SP.index('KOM_RS'); KOM_SP.prefix(KOM_OS.ref,RH.ref)
      ?};
      {? KOM_SP.first
      || {!
         |? {? _p2020()
            || {? 3+KOM_SP.OPIS='ZAS'
               || _tabl[_ind][15]:=1;
                  _tabl[_ind][14]+=KOM_SP.KW$2
               || _tabl[_ind][6]:=1;
                  _tabl[_ind][4]+=KOM_SP.KW$2
               ?}
            ?};
            KOM_SP.next()
         !}
      ?};
      KOM_SP.cntx_psh;
      _tabl[_ind][3]:=exec('wyl_rat_pot_komornik','lista_licz',_rok,_miesiac,_a);
      KOM_SP.cntx_pop;
      KOM_SP.index('KOM_SP');
      KOM_SP.prefix(KOM_OS.ref,_rok,_miesiac);
      {? KOM_SP.first
      || {!
         |? {? _p2020()
            || {? KOM_SP.TYP<>'R'
               || {? 3+KOM_SP.OPIS='ZAS'
                  || {? _tabl[_ind][13]
                     || _potrZAS13+=KOM_SP.KW$2
                     || _potrZAS+=KOM_SP.KW$2
                     ?}
                  || {? _tabl[_ind][13]
                     || _potrac13+=KOM_SP.KW$2
                     || _potrac+=KOM_SP.KW$2
                     ?}
                  ?}
               ?}
            ?};
            KOM_SP.next()
         !}
      ?};
      _potrac-=_tabl[_ind][4];
      _potrZAS-=_tabl[_ind][14];

      {? ~_a & KOM_OS.KOL='N'
      || _tabl[_ind][7]:=0;
         _tabl[_ind][8]:=0;
         _tabl[_ind][9]:=KOM_RP.R;
         _tabl[_ind][10]:=0;
         _tabl[_ind][11]:=0
      || _tabl[_ind][7]:=KOM_OS.KOM_RP().MIN;
::  Podwyższenie minimalnego wynagrodzenia dla każdego członka rodziny - informacja wprowadzona w kartotece dodatkowej
         {? __RUB.sys_attr(KOM_OS.KOM_RP().R,2117)
         || KART_DOD.index('KART_DOD');
            KART_DEF.index('SYMBOL');
            KART_DEF.prefix('PODW_OCH');
            {? KART_DEF.first
            || KART_DOD.prefix(exec('ref_firma','ustawienia'),KART_DEF.ref,P.OSOBA);
               {? KART_DOD.first()
               || {!
                  |? {? (KART_DOD.DO>=date(_rok,_miesiac,1) | KART_DOD.DO=#0) & KART_DOD.OD<=date(_rok,_miesiac,0)
                     || _tabl[_ind][7]+=KART_DOD.WARTOSC
                     ?};
                     KART_DOD.next()
                  !}
               ?}
            ?}
         ?};
         _tabl[_ind][8]:=KOM_RP.PROC;
         _tabl[_ind][9]:=KOM_RP.R;
         _tabl[_ind][10]:=KOM_RP.ZUS;
:: od 1.07.2018 wartość kwoty wolnej od potrąceń zasiłków jest ustalana kwotowo w stałych systemu - tu 100 proc
         {? date(_rok,_miesiac,0)>date(2018,7,1)
         || _tabl[_ind][11]:={? _tabl[_ind][12] || _min_emA || _min_emer ?}
         || _tabl[_ind][11]:=KOM_RP.EMER*_min_emer/100$2
         ?}
      ?}
   |? KOM_OS.OD<=date(_rok,_miesiac,0)
      & (date(KOM_OS.DO~1,KOM_OS.DO~2,0)>=date(_rok,_miesiac,1) | KOM_OS.DO=date(0,0,0))
      & ~_czy_jednorazowy(_rok,_miesiac,_a)
      & ( _wynik:=0; {! _ndx:=1.._rub.size |! {? KOM_OS.KOM_RP().R().RN=_RUB[_ndx] || _wynik:=1 ?} !}; &_ndx; &_wynik)
   || KOM_SP.index('KOM_SP');
      KOM_SP.prefix(KOM_OS.ref,_rok,_miesiac);
      {? KOM_SP.first
      || {!
         |? {? _a
            || {? _p2020()
               || {? KOM_SP.TYP<>'R' & {? KOM_SP.P<>null || KOM_SP.P=P.ref || 1 ?}
                  || {? 3+KOM_SP.OPIS='ZAS'
                     || {? __RUB.sys_attr(KOM_OS.KOM_RP().R,21114)
                        || _potrZAS13+=KOM_SP.KW$2
                        || _potrZAS+=KOM_SP.KW$2
                        ?}
                     || {? __RUB.sys_attr(KOM_OS.KOM_RP().R,21114)
                        || _potrac13+=KOM_SP.KW$2
                        || _potrac+=KOM_SP.KW$2
                        ?}
                     ?}
                  ?}
               ?}
            || {? KOM_SP.TYP<>'R'
               || {? 3+KOM_SP.OPIS='ZAS'
                  || {? __RUB.sys_attr(KOM_OS.KOM_RP().R,21114)
                     || _potrZAS13+=KOM_SP.KW$2
                     || _potrZAS+=KOM_SP.KW$2
                     ?}
                  || {? __RUB.sys_attr(KOM_OS.KOM_RP().R,21114)
                     || _potrac13+=KOM_SP.KW$2
                     || _potrac+=KOM_SP.KW$2
                     ?}
                  ?}
               ?}
            ?};
            KOM_SP.next()
         !}
      ?}
   ?};
   KOM_OS.next
!};
&_czy_jednorazowy; &_p2020;
:: sprawdzenie sytuacji w ktorej rozpoczecie splaty jest nie od pierwszego dnia miesiaca a istnieja rachunki z data
:: wyplaty z danego miesiac sprzed daty splaty takiego potracenia
{? _czy_inf>#0
|| RH.cntx_psh();
   RH.index('RACHDATA');
   RH.prefix(exec('ref_firma','ustawienia'),OSOBA.ref,_rok,_miesiac);
   {? RH.first
   || _info:=0;
      {! |? {? RH.DWY<_czy_inf || _info:=1; 0 || RH.next ?} !};
      {? _info
      || {? _a
         || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
               'Istnieją wypłaty umów zleceń sprzed rozpoczęcia spłaty komorniczej.'@,
               'Należy zweryfikować poprawność wyliczonych potrąceń.'@)
         || RAPLS.msg(RH.ZLE().NU,ZC.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
               'Istnieją wypłaty umów zleceń sprzed rozpoczęcia spłaty komorniczej.'@,
               'Należy zweryfikować poprawność wyliczonych potrąceń.'@)
         ?}
      ?}
   ?};
   RH.cntx_pop()
?};
&_rok; &_miesiac; &_czy_inf;
&_jest_zas;
&_P_ref;

: wyliczenie wartosci do potracenia na liscie plac
: iteracja po tablicy
_wyn_zaa:=_wyn_zas-_all_pot;
_wyn_zaa_zfss:=_wyn_zaa-_bez_ZFSS;
_wyn_zas-=_pot_all;
_wyn_zas_zfss:=_wyn_zas-_bez_ZFSS;
: wyliczenia dla potrąceń komorniczych, alimentacyjnych i innych opisanych w kodeksie
_to:=_ind;
{? ~_to
|| obj_del(_tabl); P.cntx_pop(); &__pod_sum;
   exec('usun_rozl','komornik',_a,1);
   {! _ind:=1.._rub.size |! {? _a || FUNKCJE.LK(_RUB[_ind],,0) || FUNKCJE.ZK(_RUB[_ind],,0) ?} !};
   return(0)
?};
:: znalezienie wartosci najmniejszego procentu wolnego od potracen w analizowanych potraceniach
_min_emp:=0;
_max_pr1:=200;
{! _ind:=1.._to
|! {? ~_tabl[_ind][13]
   || {? _max_pr1>_tabl[_ind][8] || _max_pr1:=_tabl[_ind][8] ?}
   ?}
!};
_max_prc:={? _max_pr1<200 || _max_pr1 ?};
&_max_pr1;
_zost_all:=_zostalo-_zasilki;
{? {? _a || FUNKCJE.L_SYS(55) || FUNKCJE.Z_SYS(55) ?}
|| _max_pz1:=200;
   {! _ind:=1.._to
   |! {? ~_tabl[_ind][13]
      || {? _max_pz1>_tabl[_ind][10]
         || _max_pz1:=_tabl[_ind][10]; _min_emp:=_tabl[_ind][11]
         ?}
      ?}
   !};
   _max_pza:={? _max_pz1<200 || _max_pz1 ?};
   &_max_pz1;
   _musi_zas:=(_zasilki*_max_pza/100)$2;
   {? _musi_zas-__pod_sum<_min_emp || _musi_zas:=_min_emp+__pod_sum ?};
   {? _musi_zas>_zasilki || _musi_zas:=_zasilki ?}
|| _zasilki:=0
?};

:: wyliczenie dla kwoty najmniejszego procentu wolnego od potracen - baza do wyliczen wartosci ktora musi zostac
:: okresla sie najmniejszy procent pozostawienia kwoty wolnej od potracen
_musi_wyn:=(_wyn_zas*_max_prc/100)$2;
_musi_ali:=(_wyn_zaa*_max_prc/100)$2;
_musi_wyn_zfss:=(_wyn_zas_zfss*_max_prc/100)$2;
_musi_ali_zfss:=(_wyn_zaa_zfss*_max_prc/100)$2;

_zostalo:=_zostalz:=0;
:: koniec
{? _zost_all+_zasilki>0
||
   {! _ind:=1.._to
   |! {? _tabl[_ind][3]
      || {? ~_tabl[_ind][6]
         || _nko:=_tabl[_ind][7]*_nk/100$2;
            _nko:={? _nko>0 || _nko ?};

            {? _tabl[_ind][12]
            || {? _tabl[_ind][16]='T'
               || _wyn_tmp:=_wyn_zaa_zfss;
                  _musi_tmp:=_musi_ali_zfss
               || _wyn_tmp:=_wyn_zaa;
                  _musi_tmp:=_musi_ali
               ?}
            || {? _tabl[_ind][16]='T'
               || _wyn_tmp:=_wyn_zas_zfss;
                  _musi_tmp:=_musi_wyn_zfss
               || _wyn_tmp:=_wyn_zas;
                  _musi_tmp:=_musi_wyn
               ?}
            ?};
            _ma_zostac:=(_wyn_tmp*_tabl[_ind][8]/100)$2;
            {? _nko>_wyn_tmp || _nko:=_wyn_tmp ?};
            {? _ma_zostac<_nko || _ma_zostac:=_nko ?};
            {? _ma_zostac>_wyn_tmp || _ma_zostac:=_wyn_tmp ?};

::           Musi zostac tylko tyle ile wynika z wartosci bazowej - o ile wartosc ta jest wieksza od biezacego wyliczenia

            _max:=_zost_all-_ma_zostac;

            {? ~_tabl[_ind][13]
            || _do_wyn:=_musi_tmp;
               {? ~_tabl[_ind][12]
               || _do_wyn:={? _do_wyn>_nko || _do_wyn || _nko ?}
               ?};
               {? _max>_zost_all-_do_wyn-_zostalo-_potrac || _max:=_zost_all-_do_wyn-_zostalo-_potrac ?}
            || {? _max>_zost_all-_potrac13-_potrac-_zostalo || _max:=_zost_all-_potrac13-_potrac-_zostalo ?}
            ?};

            _prior:=0;
            _suma:=0;
            {? _max>0
            || _spr:=_ind;
               {!
               |? _suma+=_tabl[_spr][3];
                  {? _spr+1<=_to
                  || {? _tabl[_spr][2]=_tabl[_spr+1][2]
                     || _prior:=_tabl[_spr][2];
                        _spr+=1;
                        _end:=0
                     || _end:=1
                     ?}
                  || _end:=1
                  ?};
                  ~_end
               !};
               {? _prior & _suma>_max
               || do_maxa:=0;
                  {! _ind2:=_ind.._spr
                  |! {? ~_tabl[_ind2][6]
                     || _tabl[_ind2][5]:=_tabl[_ind2][3]/_suma*100;
                        _tab_4:=_tabl[_ind2][5]*_max/100$2;
                        {? do_maxa+_tab_4>_max | (_ind2=_spr & do_maxa+_tab_4<_max)
                        || _tab_4:=_max-do_maxa
                        ?};
                        do_maxa+=_tab_4;
                        {? ~_tabl[_ind2][4] || _tabl[_ind2][4]:=_tab_4 ?}
                     ?};
                      _tabl[_ind2][3]-=_tabl[_ind2][4]

                  !};
                  &do_maxa;
                  _zostalo+=_max
               || {? _tabl[_ind][3]<=_max
                  || _tab_4:=_tabl[_ind][3]
                  || _tab_4:=_max
                  ?};
                  {? ~_tabl[_ind][4] || _tabl[_ind][4]:=_tab_4 ?};
                  _zostalo+=_tabl[_ind][4]; _tabl[_ind][5]:=100;
                  _tabl[_ind][3]-=_tabl[_ind][4]
               ?}
            ?};

            {? _tabl[_ind][3] & _zasilki>0 & ~_tabl[_ind][15]
::          wyliczenie minimalnej wartosci dla zasilku
            || _min_emp:=_tabl[_ind][11];
               {? _min_emp<0 || _min_emp:=0 ?};
               _ma_zas:=(_zasilki*_tabl[_ind][10]/100)$2;

               _min_emp+=__pod_sum;
               {? _ma_zas<_min_emp || _ma_zas:=_min_emp ?};
               {? _ma_zas>_zasilki || _ma_zas:=_zasilki ?};

               _max_zas:=_zasilki-_ma_zas;

               {? ~_tabl[_ind][13]
               || _do_zas:={? _musi_zas>_min_emp || _musi_zas || _min_emp ?};
                  {? _max_zas>_zasilki-_do_zas-_potrZAS-_zostalz || _max_zas:=_zasilki-_do_zas-_potrZAS-_zostalz ?}
               || {? _max_zas>_zasilki-_potrZAS-_potrZAS13-_zostalz || _max_zas:=_zasilki-_potrZAS-_potrZAS13-_zostalz ?}
               ?};

               _prior:=0;
               _suma:=0;
               {? _max_zas>0
               || _spr:=_ind;
                  {!
                  |? _suma+=_tabl[_spr][3];
                     {? _spr+1<=_to
                     || {? _tabl[_spr][2]=_tabl[_spr+1][2]
                        || _prior:=_tabl[_spr][2];
                           _spr+=1;
                           _end:=0
                        || _end:=1
                        ?}
                     || _end:=1
                     ?};
                     ~_end
                  !};
                  {? _prior & _suma>_max_zas
                  || do_maxa:=0;
                     {! _ind2:=_ind.._spr
                     |! {? ~_tabl[_ind2][15]
                        || _tabl[_ind2][5]:=_tabl[_ind2][3]/_suma*100;
                           _tab_4:=_tabl[_ind2][5]*_max_zas/100$2;
                           {? do_maxa+_tab_4>_max_zas | (_ind2=_spr & do_maxa+_tab_4<_max_zas)
                           || _tab_4:=_max_zas-do_maxa
                           ?};
                           {? ~_tabl[_ind2][14] || _tabl[_ind2][14]:=_tab_4 ?}
                        ?};
                        do_maxa+=_tabl[_ind2][14]
                     !};
                     _zostalz+=do_maxa;
                     &do_maxa
                  || {? _tabl[_ind][3]<=_max_zas
                     || _zostalz+=_tab_4:=_tabl[_ind][3]
                     || _zostalz+=_tab_4:=_max_zas
                     ?};
                     {? ~_tabl[_ind][14] || _tabl[_ind][14]:=_tab_4 ?};
                     _tabl[_ind][5]:=100
                  ?}
               ?}
            ?}
         ?}
      ?}
   !}
?};

: wprowadzenie danych do kartoteki rozliczenia potracenia
: wprowadzenie wartosci potracen na liste plac
_tabl2:=obj_new(_rub.size);
{! _ind:=1.._rub.size |! _tabl2[_ind]:=0 !};

KOM_OS.prefix();
{! _ind:=1.._to
|! {? _tabl[_ind][4]
   || {? ~_tabl[_ind][6]
      || {? KOM_OS.seek(_tabl[_ind][1])
         || exec('wyplata_przed_splata','lista_licz',1)
         ?};
         exec('dod_splate_komornik','lista_licz',_tabl[_ind][1],_tabl[_ind][4],_a,,_FUNKCJE.WYP)
      ?};
      {! _ind2:=1.._rub.size
      |! {? _tabl[_ind][9]=__RUB.ref(_RUB[_ind2]) || _tabl2[_ind2]+=_tabl[_ind][4] ?}
      !}
   ?};
   {? _tabl[_ind][14]
   || {? ~_tabl[_ind][15]
      || {? KOM_OS.seek(_tabl[_ind][1])
         || exec('wyplata_przed_splata','lista_licz',1)
         ?};
         exec('dod_splate_komornik','lista_licz',_tabl[_ind][1],_tabl[_ind][14],_a,1,_FUNKCJE.WYP)
      ?};
      {! _ind2:=1.._rub.size
      |! {? _tabl[_ind][9]=__RUB.ref(_RUB[_ind2]) || _tabl2[_ind2]+=_tabl[_ind][14] ?}
      !}
   ?}
!};
{! _ind:=1.._rub.size |! {? _a || FUNKCJE.LK(_RUB[_ind],,_tabl2[_ind]) || FUNKCJE.ZK(_RUB[_ind],,_tabl2[_ind]) ?} !};
obj_del(_tabl);
obj_del(_tabl2);
P.cntx_pop();
&__pod_sum


\oblicz_wsprozl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: OPIS ZMIENNYCH:
::       _d - dochod
::       _p - procent podatku wg tabeli
::       _l - liczba ulg - wartosc zwracana przez funkcje
::       _procpod - procent pierwszego progu podatkowego
::  OLD: \oblicz/wsprozl2.fml
::----------------------------------------------------------------------------------------------------------------------
_d:=_p:=_procpod:=0;
_r:=O.RP;
_m:=O.MP;

KP.index('_KARTAPO');
KP.prefix(P.ref(),_r);
{? KP.first()
|| {!
   |? {? KP.M<_m
      || _d+=KP.S1-KP.S2
      ?};
      KP.next() & KP.M<_m
   !}
?};
_new:=FUNKCJE.PL_NEW & _r=2022;

TP.index('TABPODAT');
TP.prefix(_r);
{? TP.first()
|| _p:=_procpod:={? _new & TP.PR=17 || 12 || TP.PR ?};
:: 17 procent podatku od października do grudnia 2019.
   {? _r=2019 & (_p=18 | _p=17)
   || {? date(_r,_m,1)>=date(2019,10,1)
      || _p:=_procpod:=17
      || _p:=_procpod:=18
      ?}
   ?};
   {!
   |? {? _d>=TP.K1
      || _p:={? _new & TP.PR=17 || 12 || TP.PR ?}
      ?};
      TP.next()
   !}
|| FUN.info('Brak tabeli podatkowej w wybranym roku.'@)
?};

:: 17 procent podatku od października do grudnia 2019.
{? _r=2019 & (_p=18 | _p=17)
|| {? date(_r,_m,1)>=date(2019,10,1)
   || _p:=17
   || _p:=18
   ?}
?};

{? _p & _p=_procpod
|| 2
|| 1
?}


\podst_isplac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS:
::   WE:
::   WY:
::  OLD: \podst/isplac.fml
::----------------------------------------------------------------------------------------------------------------------
: sprawdz poprawnosc wywolania funkcji: rodzaj
{? var_pres('_a')<>type_of('') || return(0)
|? ~('UP'*_a) || return(0)
?};

: czy sa jakiekolwiek swiadczenia dla osoby
: nie wykonuj wtedy calej dosc kosztownej reszty
IS_WYPL.cntx_psh;
IS_WYPL.index('LISTA');
IS_WYPL.prefix(P.OSOBA);
: sa swiadcznia?
{? ~IS_WYPL.first
|| IS_WYPL.cntx_pop;
   return(0)
?};

: data rozliczenia podatkowego/ubezpieczeniowego swiadczen
_dr:=date({? _a='P' || O.RP || O.RU ?},{? _a='P' || O.MP || O.MU ?},0);

IS_LIM.cntx_psh;
IS_LIM.index('RODZAJ');
IS_LIM.prefix(_a);
: sa ograniczenia?
{? ~IS_LIM.find_le(_dr)
|| IS_WYPL.cntx_pop;
   IS_LIM.cntx_pop;
   return(0)
?};

_BUF:=tab_tmp(3,
   'LIM','INTEGER',,
   'ROK','INTEGER',,
   'MSC','INTEGER',,
   'KWL','REAL',,
   'KWS','REAL',,
   'POD','REAL',,
   'RMS','STRING[1]',,
   'DOD','DATE',,
   'DDO','DATE',,
   'LT','STRING[8]',
);

_BUF_P:=tab_tmp(4,
   'IS_LIM','INTEGER',,
   'ROK','INTEGER',,
   'MSC','INTEGER',,
   'IS_WYPL','INTEGER',,
   'IS_ROZL','INTEGER',,
   'KW','REAL',,
   'KWL','REAL',,
   'P','INTEGER',,
   'MIES','STRING[1]',,
   'LT','STRING[8]',
);


_SPR:=tab_tmp(2,
   'LT','STRING[8]',,
   'RN','INTEGER',,
   'KW','REAL',,
   'ROK','INTEGER',
);
_REF:=tab_tmp(1,
   'O','INTEGER',
);

_cntx_pop:="
   O.cntx_pop;
   LS.cntx_pop;
   IS_LIM.cntx_pop;
   IS_OGR.cntx_pop;
   IS_WYPL.cntx_pop;
   IS_ROZL.cntx_pop";

_zn_ogr:="
   O.index('LISTYPZN');
   O.prefix(exec('ref_firma','ustawienia'));
   {? O.find_key(-_b)
   || _od:=date({? _a='P' || O.RP || O.RU ?},{? _a='P' || O.MP || O.MU ?},1);
      _do:=date({? _a='P' || O.RP || O.RU ?},{? _a='P' || O.MP || O.MU ?},0);

      _loop:=IS_LIM.find_le(_do);
      {!
      |? _loop
      |! {? IS_LIM.OD<=_do & _od<=IS_LIM.DO
            || IS_OGR.prefix(IS_LIM.ref,_c);
               {? IS_OGR.first
               || return(IS_OGR.ref)
               ?}
         ?};
         _loop:=IS_LIM.prev
      !}
   ?};
   null";

_zap_sw:="
   _f.blank();
   {? 1+_b='L'
   || _f.ROK:=#(2+(1-_b)); _f.MSC:=#(2+(3-_b)); _f.LT:=_b
   || _f.ROK:=#(2+(1-O.LT)); _f.MSC:=#(2+(3-O.LT)); _f.LT:=~O.LT
   ?};
   _f.IS_LIM:=#IS_LIM.ref();
   _f.KWL:=IS_LIM.KW;
   _f.MIES:=IS_LIM.MIES;
   _f.KW:=_c;
   _f.P:=_a='P';
   _f.IS_WYPL:=_d;
   _f.IS_ROZL:=_e;
   _f.add()";

_zap_ogr:="
   {? {? IS_LIM.MIES='T'
      || _a.find_key(IS_LIM.ref,_c,_d)
      || _a.find_key(IS_LIM.ref)
      ?}
   || _a.cntx_psh();
      _a.cntx_pop();
      _a.KWS+=_b.KW;
      _a.POD:=_a.KWL-_a.KWS;
      {? _a.POD>0
      || _a.POD:=0
      ?};
      _a.put
   || _a.blank;
      _a.LIM:=IS_LIM.ref;
      _a.ROK:=_c;
      _a.MSC:=_d;
      _a.KWL:=IS_LIM.KW;
      _a.KWS:=_b.KW;
      _a.POD:=_a.KWL-_a.KWS;
      {? _a.POD>0 || _a.POD:=0 ?};
      _a.RMS:=IS_LIM.MIES;
      _a.DOD:=IS_LIM.OD;
      _a.DDO:=IS_LIM.DO;
      _a.add
   ?}";

_zap_pod:="
   O.cntx_psh;
   O.index('LISTYPL'+_e);
   O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,_c,_d);
   _loop:=O.first;
   {!
   |? _loop
   |! {? ~_f.find_key(#O.ref)
      || LS.use(O.LT);
         LS.index('OSOBAKOD');
         LS.prefix(exec('ref_firma','ustawienia'),P.OSOBA,_b);
         _loop:=LS.first;
         _val:=0;
         {!
         |? _loop
         |! {? {? #O.ref=VAR.LISTA
               || LS.P<>P.ref
               || 1
               ?}
            || _val+=LS.KW
            ?};
            _loop:=LS.next
         !};
         {? _val
         || {? _a.find_key(0,_c,_d)
            || _a.POD+=_val;
               _a.put
            || _a.blank;
               _a.LT:=O.LT;
               _a.ROK:=_c;
               _a.MSC:=_d;
               _a.POD:=_val;
               _a.add
            ?};
            _f.O:=#O.ref;
            _f.add
         ?}
      ?};
      _loop:=O.next
   !};
   O.cntx_pop";

_zap_roz:="
   {? _a.find_key(_b,_c)
   || _a.KW+=_d;
      _a.put
   || _a.blank;
      _a.LT:=_b;
      _a.RN:=_c;
      _a.KW:=_d;
      _a.ROK:=_e;
      _a.add
   ?}";

_rok:={? _a='P' || O.RP || O.RU ?};
_msc:={? _a='P' || O.MP || O.MU ?};

_czy_rozl:=
   {? _a='U'
   || $('date(O.RU,O.MU,0)<=date('+$_rok+','+$_msc+',0)')
   || $('date(O.RP,O.MP,0)<=date('+$_rok+','+$_msc+',0)')
   ?};

_rn:={? _a='U' || 750 || 779 ?};

IS_ROZL.cntx_psh;
IS_ROZL.index('DATA');

IS_OGR.cntx_psh;
IS_OGR.index('UNIQUE');

LS.cntx_psh;

O.cntx_psh;
O.index('LISTYPZN');
O.prefix(exec('ref_firma','ustawienia'));
{!
:  przegladaj wyplaty
|? _rb:=IS_WYPL.IS_DEF().R().RN;
   {? 1+IS_WYPL.LT='L'
   ||
:     jednorazowa wyplata
      {? _zn_ogr(_a,IS_WYPL.LT,IS_WYPL.IS_DEF,_dr) & _czy_rozl()
      || _rok:={? _a='P' || O.RP || O.RU ?};
         _msc:={? _a='P' || O.MP || O.MU ?};
         _zap_roz(_SPR,IS_WYPL.LT,_rb,IS_WYPL.KW,_rok);
         _zap_ogr(_BUF,IS_WYPL,_rok,_msc,_a,_BUF_P);
         _zap_sw(_a,IS_WYPL.LT,IS_WYPL.KW,#IS_WYPL.ref,null,_BUF_P)
      ?}
   ||
:     wyplaty comiesieczne
      IS_ROZL.prefix(IS_WYPL.ref);
      _loop:=IS_ROZL.first;
      {!
      |? _loop
      |! {? 1+IS_ROZL.LT='L'
         || {? _zn_ogr(_a,IS_ROZL.LT,IS_WYPL.IS_DEF,_dr) & _czy_rozl()
            || _rok:={? _a='P' || O.RP || O.RU ?};
               _msc:={? _a='P' || O.MP || O.MU ?};
               _zap_roz(_SPR,IS_ROZL.LT,_rb,IS_ROZL.KW,_rok);
               _zap_ogr(_BUF,IS_ROZL,_rok,_msc,_a,_BUF_P);
               _zap_sw(_a,IS_WYPL.LT,IS_ROZL.KW,#IS_WYPL.ref,#IS_ROZL.ref(),_BUF_P)
            ?}
         ?};
         _loop:=IS_ROZL.next
      !}
   ?};
   IS_WYPL.next
!};

{? ~_BUF.first
|| _cntx_pop();
   return(0)
?};

: uzupelnij informacje o zwiekszeniach podstawy lub przychodu na listach pozniejszych
: niz rozliczajace swiadczenia (poprawka bledu ER/WRT/XP/12.10/1212/0028 wskazujacego
: na nonszalancje osob odpowiedzialnych za naliczanie wynagrodzenia pracownikow)
: przegladaj listy plac przypadajace na zapisane wczesniej okresy ograniczen

_O:=sql(
   'select distinct O.LT '
   'from O join F_ZATR using (O.F_ZATR,F_ZATR.reference),:_b '
   'where '
   '  O.FIRMA=:_a and '
   '  :_b.DOD<=to_date(\'%1\') and '
   '  to_date(\'%1\')<=:_b.DDO and '
   '  to_date(\'%1\')<=to_date(:_c) and '
   '  F_ZATR.KOD=\':_d\' and '
   '  O.R%2=:_e'
   [($('date(O.R%1,O.M%1,1)$1'[_a]))(),_a],
   exec('ref_firma','ustawienia'),
   _BUF,
   _dr,
   __F_ZATR.O,
   _dr~1
);

O.index('LISTYPZN');
O.prefix(exec('ref_firma','ustawienia'));
_loop:=_O.first;
{!
|? _loop
|! {? O.find_key(_O.LT)
   || _rok:={? _a='P' || O.RP || O.RU ?};
      _msc:={? _a='P' || O.MP || O.MU ?};
      _zap_pod(_BUF,_rn,_rok,_msc,_a,_REF)
   ?};
   _loop:=_O.next
!};
: koniec poprawki ER/WRT/XP/12.10/1212/0028

_loop:=_SPR.first;
{!
|? _loop
|! _kw:=0;
   LS.use(-_SPR.LT);
   LS.index('OSOBAKOD');
   LS.prefix(exec('ref_firma','ustawienia'),P.OSOBA,_SPR.RN);
   {? _SPR.LT<>VAR.NAZWALIS
   || _loop:=LS.first;
      {!
      |? _loop
      |! _kw+=LS.KW;
         _loop:=LS.next
      !}
   || _kw+=FUNKCJE.L(_SPR.RN);
      _loop:=LS.first;
      {!
      |? _loop
      |! {? LS.P<>P.ref
         || _kw+=LS.KW
         ?};
         _loop:=LS.next
      !}
   ?};
   _SPR.KW-=_kw;
   _SPR.put;
   _loop:=_SPR.next
!};
_rok_dr:=_dr~1;
_loop:=_SPR.first;
{!
|? _loop
|! {? (_SPR.ROK=_rok_dr | _SPR.ROK=(_rok_dr-1)) & _SPR.KW<>0
   || RAPLS.msg(
         P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
         'Wykryto niezgodność zawartości listy %1 z zapisami kartoteki świadczeń pracowniczych.'@[~-_SPR.LT],
         'Należy uzgodnić zawartość kartoteki świadczeń i wartość składnika %1 listy płac %2.'@[$_SPR.RN,~-_SPR.LT],
         'Zweryfikuj przypisanie świadczeń dla składnika płacowego %1'@[$_SPR.RN],
         'do zdefiniowanych limitów dla "%1".'@[{? _a='P' || 'Podatku'@ || 'Ubezpieczenia ZUS'@ ?}]
      )
   ?};
   _loop:=_SPR.next
!};
_kor:=0;
_loop:=_SPR.first;
{!
|? _loop
|! {? _SPR.ROK=_rok_dr
   || _kor+=_SPR.KW
   ?};
   _loop:=_SPR.next
!};

_cntx_pop();

_val:=0;
_loop:=_BUF.first;
{!
|? _loop
|! {? _BUF.ROK=_dr~1
   || _val+=_BUF.POD
   ?};
   _loop:=_BUF.next
!};

obj_del(_SPR);
obj_del(_BUF);

: wprowadzenie zapisow o podatku/ubezpieczeniu
{? _BUF_P.first
|| _limit:=sql('select distinct IS_LIM, MIES from :_a',_BUF_P);
   {? _limit.first
   || IS_WYPL.cntx_psh();
      IS_ROZL.cntx_psh();
      IS_WYPL.prefix();
      IS_ROZL.prefix();
      _wprow:="
         {? IS_ROZL.seek(_b,)
         || {? _d || IS_ROZL.POD_P:=_c || IS_ROZL.POD_U:=_c ?};
            IS_ROZL.put(1)
         || {? IS_WYPL.seek(_a,)
            || {? _d || IS_WYPL.POD_P:=_c || IS_WYPL.POD_U:=_c ?};
               IS_WYPL.put(1)
            ?}
         ?}";
      {!
      |? {? _limit.MIES='T'
         || _BUF_P.prefix(_limit.IS_LIM);
            {? _BUF_P.first
            || _lim:=_BUF_P.KWL;
               _mc:=_BUF_P.MSC;
               {!
               |? {? _mc<>_BUF_P.MSC
                  || _lim:=_BUF_P.KWL;
                     _mc:=_BUF_P.MSC
                  ?};
                  {? _BUF_P.KW>_lim
                  || _wart:=_BUF_P.KW-_lim; _lim:=0
                  || _lim-=_BUF_P.KW; _wart:=0
                  ?};
                  {? _BUF_P.LT=VAR.NAZWALIS
                  || _wprow(_BUF_P.IS_WYPL,_BUF_P.IS_ROZL,_wart,_BUF_P.P)
                  ?};
                  _BUF_P.next()
               !}
            ?}
         || _BUF_P.prefix(_limit.IS_LIM);
            {? _BUF_P.first
            || _lim:=_BUF_P.KWL;
               {!
               |? {? _BUF_P.KW>_lim
                  || _wart:=_BUF_P.KW-_lim; _lim:=0
                  || _lim-=_BUF_P.KW; _wart:=0
                  ?};
                  {? _BUF_P.LT=VAR.NAZWALIS
                  || _wprow(_BUF_P.IS_WYPL,_BUF_P.IS_ROZL,_wart,_BUF_P.P)
                  ?};
                  _BUF_P.next()
               !}
            ?}
         ?};
         _limit.next
      !};
      IS_WYPL.cntx_pop();
      IS_ROZL.cntx_pop()
   ?}
?};

_val+=_kor;
{? _val<0
|| -_val
?}


\potracenia_nieobecn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wyliczenie potracen w nieobecnosciach rozliczonych listami z miesiaca wedlug parametrow _b i _c
::   WE: _a - atrybut uwzgledniany
::       _b - rok
::       _c - mc
::       [_d] - opcjonalny atrybut wyklucza rubryki zawarte w atrybucie _a
::   WY:   Wartosc wszystkich potracen
::  OLD: \potracenia/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_rub:=__RUB.sys_rub(_a,date(_b,_c,0));
: wykluczenie rubryk z atrybutu _d
{? var_pres('_d')=type_of(0)
|| _bez_rub:=__RUB.sys_rub(_d,date(_b,_c,0));
   {? _bez_rub.first
   || {!
      |? {? _rub.find_key(_bez_rub.RN) || _rub.del() ?};
         _bez_rub.next
      !}
   ?}
?};
N.cntx_psh; N.index('NIEOBECL');
_lista:=('L'+($_b+2)+('00'+$_c+2));
N.prefix('N',P.ref,_lista);
{? N.first
|| {!
   |? {? _rub.find_key(N.NB().RN)
      || _wyn+=N.POTR1+N.POTR2+N.POTR3+N.POTR4
      ?};
      N.next
   !}
?};
N.cntx_pop;
_wyn


\wynchor_bis_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Formula do wyliczenia srednich zarobkow wg sposobu wyliczenia podstawy zasilku chorobowego.
::        Uwaga, formula nie odklada kontekstu H oraz N
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WE: _a - Data OD (nieobecnosci)
::       _b - Start miesiecy wstecz
::       _c - Stop miesiecy wstecz
::       _d - numer ref H nieobecnosci
::   WY: Srednie wynagrodzenie
::  OLD: \wynchor_bis/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
_OD:=_a;
_Start:=_b;
_Stop:=_c;
_H_ref:=_d;

exec('define_skl_okr','lista_licz');

: ustawienie indeksow, ograniczenie dziedziny tabel
N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref);
H.index('_HISTKOD');
H.prefix(P.ref,'Z');

_dekltab:=0;
_ret_val:=0;
Data_nie:=_OD;

:: Ustawienie kalendarza
{? P.KAL().NAZWA<>''
|| __KAL.set_cal(P.KAL().NAZWA,_OD~1)
?};

exec('dekl_sta_wynchor','lista_licz');

{? H.find_le(date(_OD~1,_OD~2,0))
|| sta_bnie[1]:=H.S1>0;
   sta_bnie[2]:=H.S2>0;
   sta_bnie[3]:=H.S3>0
?};

_Suma:=0;

_od:=date(O.R,O.M-_Stop,1); _do:=date(O.R,O.M-_Start,0);

{? _Stop>=_Start
||
:: powolanie tablic odzwierciedlajacych rozliczane miesiace
   _dekltab:=exec('dekl_tab_wynchor','lista_licz',_Stop);

   _licznik:=_Stop-_Start+1;

:: Powolanie tablicy przechowujacej informacje o rozliczeniu
   _tab:=obj_new(2);
   {! _ind:=1..2 |! _tab[_ind]:=obj_new(_licznik) !};
   {! _ind:=1.._licznik |! _tab[1][_ind]:=0; _tab[2][_ind]:='N' !};
:  wyliczenie skladnikow okresowych oraz wyplacanych z przesunieciem;
   exec('wyl_prok_skl_okr','lista_licz',_OD,_Start,_H_ref);
:  wyliczenie wartosci za nadgodziny z uwzglednieniem daty zaistnienia;
   exec('wyl_zas','roz_godz',_OD,_Start,_Stop,_H_ref);

:: glowna petla
   {! _i:=_Start.._Stop
   |! _Nieob:=_Praca:=_Kwota:=0;
      {? _i=_Start
      || H.last()
      ?};

::    Ustawienie bufora dla tabeli H
      {! |? {? H.OD>date(O.R,O.M-_i,0) || H.prev() ?} !};
      typ_ch:=-(1+H.CP().S); zm_ch:=0;
      {! |? {? H.DO>=date(O.R,O.M-_i,1) | H.DO=date(0,0,0) || zm_ch+=-(1+H.CP().S)<>typ_ch; H.prev() ?} !};
      H.last;
      {! |? {? H.OD>date(O.R,O.M-_i,0) || H.prev() ?} !};
:     ustalenie charakteru pracy w badanym okresie
:     jesli jest zmiana charakteru w trakcie miesiaca inny wpis do _typ
      _typ:={? zm_ch || 'zm. char. prac.' || -(1+H.CP().S) ?};
      &typ_ch; &zm_ch;

     _od:=date(O.R,O.M-_i,1); _do:=date(O.R,O.M-_i,0);

     _Norma:=__KAL.w_days(_od,_do);
     _Godz:=__KAL.w_hours(_od,_do);

:    wyliczenie placy zasadniczej i dodatkow z przebiegu zatrudnienia
     {! _j:=1..obj_len(sta_pom) |! sta_pom[_j]:=potr[_j]:=0 !};
     {? _Norma>0
     || exec('mc_placa_newzasad','lista_licz',_od,_do,_Godz)
     ?};

:    wyliczenie nieobecnosci z tabeli N
     H.cntx_psh();
     url_dni:=url_godz:=nn_dni:=nn_godz:=0;
:    ustalane w licz_nie_wynchor
     _licznik-=1;
     _Nieob+={? _Norma>0 || exec('licz_nie_wynchor','lista_licz',_od,_do,_Norma,,1) ?};
     H.cntx_pop();

     _Praca:=_Norma-_Nieob; {? _Praca<0 || _Praca:=0 ?};

     _year:=_od~1; _month:=_od~2;

     {! _j:=2..3 |! {? ~sta_bnie[_j] || sta_pom[_j]:=potr[_j]:=0 ?} !};
     {? _typ='u'
     ||
:       Pracownicy umyslowi
        {! _j:=1..3 |! _Kwota+=(sta_pom[_j]-potr[_j])$2 !}
     ||
:       Pracownicy fizyczni
        {! _j:=2..3 |! _Kwota+=(sta_pom[_j]-potr[_j])$2 !}
     ?};
     _kw_wyp:=exec('n_wartosc','nieobecnosc',_year,_month,111)$2;
     {? _typ='u'
     || _Kwota+=LICZ.Wylicz(_i,'.CHO');
        _Kwota+=_kw_wyp
     |? _typ='zm. char. prac.'
     || _urlopwy:=__RUB.sys_rub(42,date(_year,_month,0));
        wlicz_url:=kw_url:=0;
        {? LICZ.RUB_CHO.first & _urlopwy.first
        || {!
           |? {? LICZ.RUB_CHO.find_key(_urlopwy.RN) &
                    ~__RUB.sys_attr(LICZ.RUB_CHO.RN,4211) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,422)
              || wlicz_url:=1;
                 kw_url+=FUNKCJE.L(LICZ.RUB_CHO.RN,,_i)
              ?};
              _urlopwy.next
           !}
        ?}; &_urlopwy;
        {? _Praca>0
        || _Kwota+=(FUNKCJE.L_SYS(451,_i)+FUNKCJE.L_SYS(452,_i)+
           {? wlicz_url || kw_url ?}+_kw_wyp)/_Praca*(_Norma-nn_dni)$2
        ?};
        _Kwota+=LICZ.Wylicz(_i,'.CHO')-{? wlicz_url || kw_url ?};
        &wlicz_url; &kw_url
     || _urlopwy:=__RUB.sys_rub(42,date(_year,_month,0));
        wlicz_url:=kw_url:=0;
        {? LICZ.RUB_CHO.first & _urlopwy.first
        || {!
           |? {? LICZ.RUB_CHO.find_key(_urlopwy.RN) &
                    ~__RUB.sys_attr(LICZ.RUB_CHO.RN,4211) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,422)
              || wlicz_url:=1;
                 kw_url+=FUNKCJE.L(LICZ.RUB_CHO.RN,,_i)
              ?};
              _urlopwy.next
           !}
        ?}; &_urlopwy;
        {? (_Praca-url_dni)>0
        || _Kwota+=(FUNKCJE.L_SYS(451,_i)+FUNKCJE.L_SYS(452,_i)+
           {? wlicz_url || kw_url ?}+_kw_wyp)/_Praca*(_Norma-nn_dni)$2;
           _Kwota+=LICZ.Wylicz(_i,'.CHO')-{? wlicz_url || kw_url ?}
        || _Kwota+=sta_pom[1]*(_Godz-url_godz-nn_godz)$2;
           _Kwota+=LICZ.Wylicz(_i,'.CHO');
           _Kwota+=_kw_wyp
        ?}; &wlicz_url; &kw_url
     ?};
     &_typ;
:    dodanie skladnikow miesiecznych z przesunieciem daty wyplaty;
:    skladniki sa zapisywane w SK_CHO, rejestracja z wykorzystaniem oTrace jest zbedna
     _Kwota+=exec('dod_do_pd_skl_okr','lista_licz',1,date(_year,_month,1),_H_ref);

:    kwalifikacja miesiaca
     {? _Norma>0
     || {? _Praca/_Norma>=0.5
        ||
:          zakwalifikowany
           _Status:='T'
        ||
:          pominiety
           _Status:='N';
           {? ~_Praca || _Kwota:=0 ?}
        ?}
     ||
:       pominiety
        _Status:='N';
        _Kwota:=0
     ?};
     _Suma+=_Kwota;
     _tab[1][_i-_Start+1]:=_Kwota;
     _tab[2][_i-_Start+1]:=_Status
   !}
?};
{? _Suma=0
||
:  podstawa z miesiaca nieobecnosci';
   _dekltab:=exec('dekl_tab_wynchor','lista_licz',1);
   _offset:=O.R*12+O.M-(Data_nie~1*12+Data_nie~2);
   _od:=date(O.R,O.M-_offset,1); _do:=date(O.R,O.M-_offset,0);

:: Powolanie tablicy (jesli nie byla wczesniej powolana) przechowujacej informacje o rozliczeniu
  {? var_pres('_tab')<100
  || _tab:=obj_new(2);
     _licznik:=1;
     {! _ind:=1..2 |! _tab[_ind]:=obj_new(_licznik) !};
     {! _ind:=1.._licznik |! _tab[1][_ind]:=0; _tab[2][_ind]:='N' !}
  ?};

:  ustawienia bufora tabeli H
   H.find_le(_do);
   _typ:=-(1+H.CP().S);
   _Godz:=__KAL.w_hours(_od,_do);
   _Norma:=__KAL.w_days(_od,_do);
   url_dni:=url_godz:=nn_dni:=nn_godz:=0;

   {! _j:=1..3 |! potr[_j]:=0 !};
   _Nieob:=exec('licz_nie_wynchor','lista_licz',_od,_do,_Norma,,1);

   {? P.DZA~1*12+P.DZA~2=_od~1*12+_od~2 | P.DZ~1*12+P.DZ~2=_od~1*12+_od~2
   || minus:=
         {? P.DZ>=_od & P.DZ<_do
         || __KAL.w_days(P.DZ,_do)-1
         |? P.DZ>=_do | P.DZ~1-1900<=0
         || 0
         || __KAL.w_days(_od,_do)
         ?}
         +
         {? P.DZA>_od & P.DZA<=_do
         || __KAL.w_days(_od,P.DZA)-1
         |? P.DZA<=_od
         || 0
         || __KAL.w_days(_od,_do)
         ?}
   || minus:=0
   ?};
   _Nieob+=minus;
   &minus;
   _Praca:=_Norma-_Nieob;
   {? _Praca<0 || _Praca:=0 ?};
   {? _offset<=0
   || _offset:=0
   ?};
   {? _offset>0
   || {! _j:=1..obj_len(sta_pom) |! sta_pom[_j]:=0 !};
      _Kwota:=0;
      H.find_le(_do);
      wym_zatr:=H.WY;
      {? H.prev & H.DO>=_od & H.WY<>wym_zatr
      || H.next;
         _hsx:=exec('hsx','lista_licz',_do,_od);
         sta_pom[1]:=_hsx.S1;
         sta_pom[2]:=_hsx.S2;
         sta_pom[3]:=_hsx.S3;
         sta_pom[4]:=_hsx.S4;
         obj_del(_hsx);
         &_hsx
      || H.find_le(_do);
         exec('mc_placa_newzasad','lista_licz',_od,_do,__KAL.w_hours(_od,_do),1)
      ?};
      &wym_zatr;
      {! _j:=2..3 |! {? ~sta_bnie[_j] || sta_pom[_j]:=potr[_j]:=0 ?} !};
      _year:=_od~1; _month:=_od~2;
      _kw_wyp:=exec('n_wartosc','nieobecnosc',_year,_month,111)$2;
      {? _typ='u'
      ||
:        Pracownicy umyslowi
         {! _j:=1..3 |! _Kwota+=(sta_pom[_j]-potr[_j])$2 !}
      ||
:        Pracownicy fizyczni
         {! _j:=2..3 |! _Kwota+=(sta_pom[_j]-potr[_j])$2 !}
      ?};
      {? _typ='u'
      || _Kwota+=exec('licz_chol_podst_sk','lista_licz',_offset);
         _Kwota+=_kw_wyp
      || _urlopwy:=__RUB.sys_rub(42,date(_year,_month,0));
         wlicz_url:=kw_url:=0;
         {? LICZ.RUB_CHO.first & _urlopwy.first
         || {!
            |? {? LICZ.RUB_CHO.find_key(_urlopwy.RN) &
                     ~__RUB.sys_attr(LICZ.RUB_CHO.RN,4211) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,422)
               || wlicz_url:=1;
                  kw_url+=FUNKCJE.L(LICZ.RUB_CHO.RN,,_offset)
               ?};
               _urlopwy.next
            !}
         ?}; &_urlopwy;
         {? _Praca>0
         || _Kwota+=(FUNKCJE.L_SYS(451,_offset)+FUNKCJE.L_SYS(452,_offset)+
               {? wlicz_url || kw_url ?}+_kw_wyp)/_Praca*(_Norma-nn_dni)$2;
            _Kwota+=exec('licz_chol_podst_sk','lista_licz',_offset)-{? wlicz_url || kw_url ?}
         || _Kwota:=0
         ?}; &wlicz_url; &kw_url
      ?};
:     wyliczenie wartosci za nadgodziny z uwzglednieniem daty zaistnienia dla biezacego miesiaca
      exec('wyl_zas','roz_godz',_OD,_offset,_offset,_H_ref);
:     dodanie skladnikow miesiecznych z przesunieciem daty wyplaty;
      _Kwota+=exec('dod_do_pd_skl_okr','lista_licz',1,date(_year,_month,1),_H_ref)
   || H.cntx_psh;
      {! _j:=1..obj_len(sta_pom) |! sta_pom[_j]:=0 !};
      H.find_le(_do);
      wym_zatr:=H.WY;
      {? H.prev & H.DO>=_od & H.WY<>wym_zatr
      || H.next;
         _hsx:=exec('hsx','lista_licz',_do,_od);
         sta_pom[1]:=_hsx.S1;
         sta_pom[2]:=_hsx.S2;
         sta_pom[3]:=_hsx.S3;
         sta_pom[4]:=_hsx.S4;
         obj_del(_hsx);
         &_hsx
      || H.find_le(_do);
         exec('mc_placa_newzasad','lista_licz',_od,_do,__KAL.w_hours(_od,_do),1)
      ?};
      &wym_zatr;
      H.cntx_pop;
      {? _typ='u'
      || _Kwota:=exec('licz_chol_podst_sk','lista_licz',_offset);
         {! _j:=1..3 |!  _Kwota+=(sta_pom[_j]-potr[_j])$2 !}
      || {? _Praca>0
         || urlop_b:=FUNKCJE.L_SYS(421,0)+FUNKCJE.L_SYS(424,0)+FUNKCJE.L_SYS(425,0);
            _Kwota:=(FUNKCJE.L(100,,0)+urlop_b)/_Praca*(_Norma-nn_dni)+
            exec('licz_chol_podst_sk','lista_licz',_offset)-urlop_b; &urlop_b;
            {! _j:=2..3 |! _Kwota+=(sta_pom[_j]-potr[_j])$2 !}
         || _Kwota:=0
         ?}
      ?};
:     wyliczenie wartosci za nadgodziny z uwzglednieniem daty zaistnienia dla biezacego miesiaca
      exec('wyl_zas','roz_godz',_OD,_offset,_offset,_H_ref);
:     dodanie skladnikow miesiecznych z przesunieciem daty wyplaty;
      _Kwota+=exec('dod_do_pd_skl_okr','lista_licz',1,date(O.R,O.M,1),_H_ref)
   ?};
   &_offset; &_typ;
  _ret_val:=_Kwota
?};
{? ~_ret_val
||
: podstawa z umow zlecen
   exec('licz_zc_podst_sk','lista_licz',date(_OD~1,(_OD~2)-(_c-_b+1),1),date(_OD~1,_OD~2-1,0),_tab);
: ustalenie wartosci podstawy
   _ile:=0;
   {! _ind:=1..(_Stop-_Start+1)
   |! _ile+=(_tab[2][_ind]='T')
   !};
   {? _ile=0
   || {! _ind:=1..(_Stop-_Start+1)
      |! {? _tab[1][_ind]
         || _tab[2][_ind]:='T'
         ?}
      !}
   ?};

   _ile:=0;
   {! _ind:=1..(_Stop-_Start+1)
   |! {? _tab[2][_ind]='T'
      || _ile+=1; _ret_val+=_tab[1][_ind]
      ?}
   !};
   {? _ile>0
   || _ret_val:=_ret_val/_ile$2
   ?}
?};
::dodanie skladnikow okresowych innych niz miesieczne
_ret_val+=exec('dod_do_pd_skl_okr','lista_licz',0,,_H_ref);
: ewentualne wyrownanie do minimalnego wynagrodzenia
_ret_val+=exec('wyr_minwyn_podst_sk','lista_licz',date(O.RU,O.MU,1),_ret_val);

{? _dekltab
||
  obj_del(sta_pom);
  obj_del(potr)
?};
:: usuniecie tablic
VAR_DEL.delete('sta_bnie','sta_pnie','sta_mc');
:: usuniecie zmiennych globalnych
VAR_DEL.delete('Data_nie','Data_zm','url_dni','url_godz','nn_dni','nn_godz');
exec('end_prem_skl_okr','lista_licz');
N.cntx_pop();
_ret_val


\dod_do_pd_skl_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [2011]
:: OPIS: Funkcja zwraca odbruttowiona kwotę składników okresowych przypadających albo na wskazany okres (_a=1) albo
::       związanych ze wskazaną nieobecnością (_a=0).
::   WE:  _a  [INTEGER] - Rodzaj wykonywanej akcji:
::                      1 - Miesięczne do miesiąca;
::                      0 - Bezpośrednio do podstawy.
::       [_b] [DATE]      - Miesiąc (parametr wymagany dla _a=1).
::        _c  [INTEGER] - Nr rekordu nieobecności.
::       [_d] [INTEGER] - Wywołanie z 1 wywolanie z ch_wal (nieowal.fml)
::  OLD: \dod_do_pd/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<>type_of(0)
|| FUN.error('"%1" - nieprawidłowy argument wywołania.\n%2'@ ['_a','\\dod_do_pd_skl_okr/lista_licz.fml']);
   return(0)
?};
_d:=var_pres('_d')=type_of(0) & _d;

_kwota:=0;
{? var_pres('__SK_CHO')>100
|| __SK_CHO.index(__SK_ND2);
   {? _a
   || {? var_pres('_b')<> type_of(date())
      || FUN.error('"%1" - nieprawidłowy argument wywołania.\n%2'@ ['_b','\\dod_do_pd_skl_okr/lista_licz.fml']);
         return(0)
      || __SK_CHO.prefix(_c,date(_b~1,_b~2,1));
         {? __SK_CHO.first()
         || {!
            |? {? __SK_CHO.O='I' | __SK_CHO.O='M' | __SK_CHO.O='G' | __SK_CHO.O='L' | __SK_CHO.O='U'
               || _kwota+=__SK_CHO.K_N
               ?};
               __SK_CHO.next()
            !}
         ?}
      ?}
   || __SK_CHO.prefix(_c);
      {? __SK_CHO.first()
      || {!
         |? {?__SK_CHO.R='X'
            || _kwota+=__SK_CHO.K_N
            ?};
            __SK_CHO.next()
         !}
      ?};
      {? ~_kwota & _d
      || SK_CHO.cntx_psh();
         _mask1:='s_ch'+$(N.OD~1);
         {? _mask1<> SK_CHO.name()
         || SK_CHO.use(_mask1)
         ?};
         SK_CHO.index('SK_CHO');
         SK_CHO.prefix(N.ref());
         {? SK_CHO.first()
         || {!
            |? {? SK_CHO.R='X'
               || _kwota+=SK_CHO.KW_N
               ?};
               SK_CHO.next()
            !}
         ?};
         SK_CHO.cntx_pop()
      ?}
   ?}
|| SK_CHO.cntx_psh();
   _mask1:='s_ch'+$(N.OD~1);
   {? _mask1<> SK_CHO.name()
   || SK_CHO.use(_mask1)
   ?};
   SK_CHO.index('SK_CHO');
   SK_CHO.prefix(N.ref());
   {? SK_CHO.first()
   || {!
      |? {? SK_CHO.R='X'
         || _kwota+=SK_CHO.KW_N
         ?};
         SK_CHO.next()
      !}
   ?};
   SK_CHO.cntx_pop()
?};
_kwota


\wyl_prok_skl_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [2011]
:: OPIS: wyliczanie kwot z premii okresowych wynik zapisywany do
::        zmiennej tablicowej wykorzystanej do rozliczenia skladnikow w podstawie zasilkow chorobowych
::   WE: _a data OD nieobecnosci
::       _b ilosc miesiecy wstecz (rozpoczecie pobierania miesiecy do podstawy)
::       [_c] - numer ref H
::       [_d] ilosc miesiecy wstecz (zakonczenie pobierania miesiecy do podstawy)
::  OLD: \wylprok/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__SK_CHO')<=0
|| FUN.info('Brak zadeklarowanej zmiennej do rozliczenia premii okresowych.'@);
   return(0)
?};
{? var_pres('_a')<>type_of(date())
|| FUN.info('Błędny typ argumentu w zmiennej do rozliczenia premii okresowych.'@);
   return(0)
?};
{? var_pres('_c')<>type_of(0)
|| _c:=0
?};
{? var_pres('_d')<>type_of(0)
|| _d:=0
?};
{? {? ~(__RUB.sys_attr(N.NB,12) & ~__RUB.sys_attr(N.NB,1227) & exec('ustal_h_wym','lista_licz','MAC',_a))
   || ~_c
   ?}
||
:: data do inna dla podstaw z miesiaca nieobecnosci - teraz nieobecnosc wyliczana
   _do1:=date(_a~1,_a~2,0);
:: uwzglednienie schematu rozliczenia
   N.cntx_psh();
   NW.cntx_psh();
   NW.index('CHW');
   NW.prefix(N.ref());
   {? NW.first()
   || _a:=NW.CHP().OD
   ?};
   N.cntx_pop();
   NW.cntx_pop()
?};
_do:=date(_a~1,_a~2-1,0);
{? _d
||
:: weryfikacja czy pomiedzy data nieobecnosci a nieobecnoscia pierwotna nie bylo zmiany etatu
   _dx1:=date(O.R,O.M-_d,1); 'poczatek okresu pobieranego';
   {? _dx1>_a
   || 'byla zmiana etatu - nie koryguj _do1'
   || 'koryguj _do1 - zmienna _a ustawiona jako nieobecnosc pierwotna';
      _do1:=date(_a~1,_a~2,0)
   ?};
   &_dx1
||
:: data do inna dla  podstaw z miesiaca nieobecnosci przed poprawka
   _do1:=date(_a~1,_a~2,0)
?};
_od:=date(_a~1,_a~2-12,1);

A_OKRP.cntx_psh();
A_OKRP.index('A_OKRDP');
A_OKRP.prefix(P.ref());
_okr_od:=_od;
_okr_do:=_do;
{? A_OKRP.find_le(_a)
|| {!
   |? {? A_OKRP.DO>_do
      || A_OKRP.prev()
      ?}
   !};
   {? A_OKRP.DO>_od
   || _okr_do:=date(A_OKRP.DO~1,A_OKRP.DO~2,0);
      _okr_od:=date(_okr_do~1,_okr_do~2-11,1)
   ?}
?};
A_OKRP.cntx_pop();

_mc_ws:=_a~2-_b;
{? _mc_ws<0
|| _mc_ws*=-1;
   _lata:=_mc_ws%12;
   _mc_poz:=_mc_ws-(_lata*12);
   _miesiace:=_a~2-_mc_poz;
   {? _miesiace<1
   || _lata+=1;
      _miesiace+=12
   ?};
   &_mc_poz
|? _mc_ws<1
|| _lata:=1;
   _miesiace:=12
|| _lata:=0;
   _miesiace:=_mc_ws
?};

_n_od:=date(_a~1-_lata,_a~2-_miesiace,1);
:uwzgledniamy jeden rok wstecz do badania rozpoczecia premii okresowych';
{? _n_od~2>9 || _rozp_pom:=date(_n_od~1-1,7,1); ' czwarty kwartal  -> pobieramy od trzeciego  '
|? _n_od~2>6 || _rozp_pom:=date(_n_od~1-1,4,1); ' trzeci kwartal   -> pobieramy od drugiego   '
|? _n_od~2>3 || _rozp_pom:=date(_n_od~1-1,1,1); ' drugi kwartal    -> pobieramy od pierwszego '
             || _rozp_pom:=date(_n_od~1-2,10,1);' pierwszy kwartl  -> pobieramy od czwartego poprzedniego roku '
?};

&_mc_ws; &_lata; &_miesiace;&_n_od;

__SK_CHO.erase();
PAR_POKR.cntx_psh();
PAR_POKR.index('PAR_POKR');
PAR_POKR.prefix(exec('ref_firma','ustawienia'));

:: MK poprawka[EXC]
{? var_pres('PREM_EXC')=type_of(SYSLOG)
|| PREM_EXC.cntx_psh();
   PREM_EXC.index('PREM_EXC');
   _war_2:="
      PREM_EXC.prefix(_a,_b);
      {? PREM_EXC.first()
      || _ok:=0;
         {!
         |? {? ( PREM_EXC.OD=date(0,0,0) | PREM_EXC.OD<=_c) & (PREM_EXC.DO=date(0,0,0) | PREM_EXC.DO>=_c)
            || _ok:=1
            ?};
            _ok=0 & PREM_EXC.next()
         !};
         _ok
      || 1
      ?}
   "
|| _war_2:="1"
?};

::obiekt do przechowywania ilosci premii okresowych
_prem:=tab_tmp(1,'NR_SKL','INTEGER','NR_SKL','IL','INTEGER','IL','D_LAST','DATE','D_LAST');
{? PAR_POKR.first()
|| {!
   |? _prem.NR_SKL:=PAR_POKR.R().RN;
      _prem.IL:={? PAR_POKR.RP='K' || 4 |? PAR_POKR.RP='P' || 2 |? PAR_POKR.RP='S' || 12 || 1 ?};
      _prem.D_LAST:=date(0,0,0);
      _prem.add();
::    dodatkowe sprawdzenie czy premia ma "wlicz do choroby"
      {? PAR_POKR.RZ='T' & R.CHO<>'N'
      || RAPLS.msg(
            P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
            'Premia okresowa (składnik %1) jest zaznaczona "Do choroby".'@[R.RT],
            'Należy zmienić wartość parametru "Do choroby" i przeliczyć ponownie podstawę zasiłku.'@
         )
      ?};
      PAR_POKR.next()
   !}
?};

:: określenie daty zmiany etatu wzgledem nieobecnosci
_zm_E:=date(0,0,0);
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref,'Z');
{? H.find_le(N.OD)
|| _et:=H.WY;
   _zm_E:=H.OD;
   {!
   |? {? H.WY= _et
      || _zm_E:=H.OD;
         H.prev
      || 0
      ?}
   !}
?};
H.cntx_pop();

::ustalenie warunku pobrania premii okresowej
_war:="
   {? _f=date(0,0,0) | _f=P.DZA
   || 'nie bylo zmiany etatu'
   |? (PREM_OKR.RP='K' | PREM_OKR.RP='P' | PREM_OKR.RP='S' | PREM_OKR.RP='R')
   || _e.prefix(PREM_OKR.SKP().R().RN);
      {? _e.first()
      || {? _e.D_LAST=date(0,0,0)
         || _e.D_LAST:=PREM_OKR.O_OD;
            _e.put
         ?};
         {? _e.D_LAST<>date(0,0,0) & PREM_OKR.O_OD<_f
::       ostatnia premia za okres przed zmiana etatu powinnismy pobrac wszystkie przed nieobecnoscia i przeliczyc wg nowego etatu
         || _b:=_d
         ?}
      ?}
   ?};
   {? PAR_POKR.RZ='T'
      & ({? PAR_POKR.WZ_OD<> date(0,0,0) || date(PAR_POKR.WZ_OD~1,PAR_POKR.WZ_OD~2,1) <= _d || 1 ?})
      & ({? PAR_POKR.WZ_DO<> date(0,0,0) || date(PAR_POKR.WZ_DO~1,PAR_POKR.WZ_DO~2,0) >= _d || 1 ?})
   || {? PREM_OKR.RP='M' | PREM_OKR.RP='I'
      || PREM_OKR.O_OD<=_b | PREM_OKR.O_DO>=_c
      |? PREM_OKR.RP='K' | PREM_OKR.RP='S'
      || _a>0 & PREM_OKR.O_DO<=_b & {? PAR_POKR.PTZO='T' || PREM_OKR.O_DO>=_c || 1 ?}
      |? PREM_OKR.RP='P'
      || _a>0 & PREM_OKR.O_DO<=_b & {? PAR_POKR.PTZO='T' || PREM_OKR.O_DO>=_c || 1 ?}
      |? PREM_OKR.RP='R'
      || _a>0 & PREM_OKR.O_DO<=_b & {? PAR_POKR.PTZO='T' || PREM_OKR.O_DO>=_c || 1 ?}
      ?}
   ?}
";

::ustalenie dodatkowego warunku pobrania premii okresowej
:: premia kwartalna lub półroczna tylko z okresów po zmianie wymiaru zatrudnienia
_war_3:="
{? PREM_OKR.RP='K' | PREM_OKR.RP='P' | PREM_OKR.RP='S' | PREM_OKR.RP='R'
|| {? _d=date(0,0,0) || _d:=P.DZA ?};
   _c.prefix(PREM_OKR.SKP().R().RN);
   {? _c.first()
   || {? _c.D_LAST=date(0,0,0)
      || _c.D_LAST:=PREM_OKR.O_OD;
         _c.put
      ?};
      {? _c.D_LAST<>date(0,0,0) & PREM_OKR.O_OD<_d
::    ostatnia premia za okres przed zmiana etatu powinnismy pobrac wszystkie przed nieobecnoscia i przeliczyc wg nowego etatu
      || PREM_OKR.O_DO<=_e
      ||
::       Wybieramy premie tylko z pełnych przepracowanych miesięcy
         _data:=_d;
::       poprawka: ER/WRT/XP/23.25/2309/0060
         {? _data~3>1
         || _next_wd:=1;
            {? _data=P.DZA
            || _next_wd:=__KAL.w_days(date(P.DZA~1,P.DZA~2,1),P.DZA-1)>0
            ?};
            {? _next_wd
            || {? _data~2=12
               || _data:=date(_data~1+1,1,1)
               || _data:=date(_data~1,_data~2+1,1)
               ?}
            ?}
         ?};
         PREM_OKR.O_DO<=_a & PREM_OKR.O_DO>=_data
      ?}
   ?}
|| 1
?}
";

::pobranie kwoty
_kwxx:="{? PAR_POKR.KZ='N' || PREM_OKR.KW_N || PREM_OKR.KW_W ?}$2";

::ustalenie procent odbruttowienia
_ust_prc:="
{? _a || return(0) ?};
{? PREM_OKR.LT=VAR.NAZWALIS
|| _pomx:=FUNKCJE.L_SYS(5621)+FUNKCJE.LU_SYS(5621);
   _pomy:=FUNKCJE.L_SYS(56111)+FUNKCJE.LU_SYS(56111);
   {? _pomy=0 & _pomx=0 & O.R>1
   || _pomx:=FUNKCJE.LU_SYS(5621,1);
      _pomy:=FUNKCJE.LU_SYS(56111,1);
      {? _pomx>_pomy & _pomx>0 || _pomy:=0 ?};
      {? (_pomy=0 & _pomx>0) | (_pomy=_pomx & _pomy>0)
      || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                'Sprawdź odbruttowienie składnika rozliczanego w bieżącym miesiącu,\n'
                'który został pobrany do podstawy zasiłku/wynagrodzenia za chorobę.\n'
                'Przyjęto do odbruttowienia podstawy ZUS z poprzedniego miesiąca.'@)
      || _pomy:=_pomx:=0
      ?}
   ?};
   {? _pomy=0 & _pomx=0
   || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
            'Sprawdź odbruttowienie składnika rozliczanego w bieżącym miesiącu,\n'
            'który został pobrany do podstawy zasiłku/wynagrodzenia za chorobę\n'
            'Przyjęto 13,71%%'@)
   ?};
   _rok:=O.R;
   _mc:=O.M
|| _rok:=#('20'+((3+PREM_OKR.LT)+2));
   _mc:=#((5+PREM_OKR.LT)+2);
: dodanie informacji dotyczacej podstawy ze zwrotow ZUS
   _pomy:=exec('kor_prac_zus','korekty_zus',P.ref,_rok,_mc);
   {? KZ.find_key(_rok,_mc)
   || {? _pomy<0 || _pomy:=KZ.S41 ?};
      _pomx:=KZ.S43
   || _pomx:=_pomy:=0
   ?}
?};

exec('czytaj','#stalesys',date(_rok,_mc,0),KST,'PRFRP','WSODBR');
{? _pomy=_pomx
|| _proc_s:=KST.WSODBR/100
|| 'obsługa procentu składek w przypadku przekroczenia podstawy';
   _pd_s:={? _pomx || _pomy/_pomx || 1 ?};
   _proc_s:=((KST.PRFE*0.005+KST.PRFRP*0.01)*_pd_s)+KST.PRFC*0.01
?};
_proc_s$4";

__add:="__SK_CHO.prefix;
        __SK_CHO.REF:=_a;
        __SK_CHO.R:=_b;
        __SK_CHO.O:=_c;
        __SK_CHO.MC:=_d;
        __SK_CHO.OD:=_e;
        __SK_CHO.DO:=_f;
        __SK_CHO.SKL:=_h;
        __SK_CHO.SKL_NR:=_g;
        __SK_CHO.K_B:=_i;
        __SK_CHO.K_N:=_j;
        __SK_CHO.LT:=_k;
        __SK_CHO.TYP:='P';
        __SK_CHO.REF_N:=_o;
        __SK_CHO.PRC:=_l*100;
        __SK_CHO.UWAGI:=_m;
        __SK_CHO.OPIS:={? var_pres('_n')=type_of('') || _n || '' ?};
        __SK_CHO.add";

_czy_ok:="
   _ok:=0;
    PAR_POKR.cntx_psh();
    PAR_POKR.index('PAR_POKR');
    PAR_POKR.prefix(exec('ref_firma','ustawienia'),_a);
    {? PAR_POKR.first()
    || {!
       |? {? (PAR_POKR.WZ_OD=date(0,0,0) | PAR_POKR.WZ_OD<=_b) &
             (PAR_POKR.WZ_DO=date(0,0,0) | PAR_POKR.WZ_DO>=_b) & PAR_POKR.RZ='T'
          || _ok:=1
          ?};
          _ok=0 & PAR_POKR.next()
       !}
    ?};
    PAR_POKR.cntx_pop();
    _ok";

H.cntx_psh();
PREM_OKR.cntx_psh;
PREM_OKR.index('PREM_OKR');
PREM_OKR.prefix(P.ref);
__SK_CHO.index(__SK_ND1);
_dx1:=date(O.R,O.M-_d,0); 'poczatek okresu pobieranego';
{? PREM_OKR.last
|| {!
   |? __SK_CHO.prefix(PREM_OKR.RP,PREM_OKR.O_OD,PREM_OKR.O_DO,PREM_OKR.SKP().R().RN);
      {? __SK_CHO.first
      || {? __SK_CHO.REF=#PREM_OKR.ref
         || 'Wyliczylismy juz ta premie'
         |? PREM_OKR.TT<>'R' & PREM_OKR.TT<>'A'
         || 'premia nie jest rozliczona na liscie plac'
         || 'Prawdopodobnie jest to wyrownanie lub czesc premii juz przyjetej, wiec dodajemy ja do podstawy';
            _proc_s:=_ust_prc(_c);
            _kwota:=_kwxx();
            _kwotan:=_kwota-(_kwota*_proc_s);
            _dz12:=PREM_OKR.SKP().DZ_12;
            __add(#PREM_OKR.ref,'P',PREM_OKR.RP,PREM_OKR.O_OD,PREM_OKR.O_OD,PREM_OKR.O_DO,PREM_OKR.SKP().R().RN,
            PREM_OKR.SKP().R().RT,_kwota$2,_kwotan$2,PREM_OKR.LT,_proc_s,_dz12,,{? _c || _c || #N.ref ?})
        ?}
      || {? PREM_OKR.SKP().DZ_12='N' & PREM_OKR.SKP().WZ_OD>_rozp_pom
         || _rozp_pre:=PREM_OKR.SKP().WZ_OD
         || _rozp_pre:=_rozp_pom
         ?};
         _il_prx:={? _prem.prefix(PREM_OKR.SKP().R().RN); _prem.first() || _prem.IL?};
::       sprawdzamy ilosc pobranych premii i prametr globalny - pobierz zadeklarowane okresy
::       dodanie warunku _war_2 - MK poprawka[EXC]
::       dodanie warunku _war_3 - MKG poprawka
         {? (PREM_OKR.TT='R' | PREM_OKR.TT='A') & _war(_il_prx,_do,_od,N.OD,_prem,_zm_E) & _czy_ok(PREM_OKR.SKP().R().RN,PREM_OKR.O_OD)
            & (_war_2(P.ref,PREM_OKR.SKP,N.OD) | _war_2(P.ref,PREM_OKR.SKP,N.DO)) & _war_3(_do,_dx1,_prem,_zm_E,N.OD)
         || 'ustalamy procent odbruttowienia';
            _proc_s:=_ust_prc(_c);
            _dz12:=PREM_OKR.SKP().DZ_12;
            {? PREM_OKR.RP='I' | PREM_OKR.RP='M'
            || 'sprawdzamy czy okres premii nie jest wiekszy niz okres zatrudnienia';
               {? P.DZ<>date(0,0,0) & PREM_OKR.O_DO>P.DZ || PREM_OKR.O_DO:=P.DZ ?};
::             sprawdzamy czy premia inna nie jest wieksza niz okres 12 miesiecy poprzedzajacych  nieobecnosc
               _dz_mc:=(PREM_OKR.O_DO~1*12+PREM_OKR.O_DO~2)-(PREM_OKR.O_OD~1*12+PREM_OKR.O_OD~2);
               _dz_mc+=1;
               {? PREM_OKR.O_OD<_od || PREM_OKR.O_OD:=_od ?};
::            dla premii miesiecznych do podstawy z  biezacego miesiaca  zmieniamy zakres dat
               {? PREM_OKR.RP='M'
               || {? PREM_OKR.O_DO>_do1 || PREM_OKR.O_DO:=_do1 ?}
               || {? PREM_OKR.O_DO>_do || PREM_OKR.O_DO:=_do ?}
               ?};
               _ile_mc:=(PREM_OKR.O_DO~1*12+PREM_OKR.O_DO~2)-(PREM_OKR.O_OD~1*12+PREM_OKR.O_OD~2);
               _ile_mc+=1;
               {! _ixy:=1.._ile_mc
               |! _dt1:=date(PREM_OKR.O_DO~1,PREM_OKR.O_DO~2-(_ixy-1),1);
                  _dt2:=date(_dt1~1,_dt1~2,0);
                  _kwota:=_kwxx()/_dz_mc$2;
                  _kwotan:=_kwota-(_kwota*_proc_s);
                  __add(#PREM_OKR.ref,'M',PREM_OKR.RP,_dt1,_dt1,_dt2,PREM_OKR.SKP().R().RN,PREM_OKR.SKP().R().RT,
                     _kwota$2,_kwotan$2,PREM_OKR.LT,_proc_s,_dz12,,{? _c || _c || #(@.N.ref) ?})
               !}
            |? PREM_OKR.RP='S'
            ||
:              sprawdzamy czy premia inna nie jest wieksza niz okres 12 miesiecy poprzedzajacych okres badania
               _dz_mc:=(PREM_OKR.O_DO~1*12+PREM_OKR.O_DO~2)-(PREM_OKR.O_OD~1*12+PREM_OKR.O_OD~2);
               _dz_mc+=1;
               _okr_ok:=1;
               {? PREM_OKR.O_OD<_okr_od
               || {? PREM_OKR.O_DO>=_okr_od
                  || PREM_OKR.O_OD:=_okr_od
                  || _okr_ok:=0
                  ?}
               ?};
               {? PREM_OKR.O_DO>_okr_do
               || {? PREM_OKR.O_OD<=_okr_do
                  || PREM_OKR.O_DO:=_okr_do
                  || _okr_ok:=0
                  ?}
               ?};
               {? PREM_OKR.O_DO>_okr_do || PREM_OKR.O_DO:=_okr_do ?};
               _ile_mc:=(PREM_OKR.O_DO~1*12+PREM_OKR.O_DO~2)-(PREM_OKR.O_OD~1*12+PREM_OKR.O_OD~2);
               _ile_mc+=1;
::             poprawka: ER/WRT/XP/23.25/2309/0060
               {? _okr_ok
               || _kwota:=_kwxx()/_dz_mc*_ile_mc$2;
                  _kwotan:=_kwota-(_kwota*_proc_s);
                  __add(#PREM_OKR.ref,'P',PREM_OKR.RP,PREM_OKR.O_OD,PREM_OKR.O_OD,PREM_OKR.O_DO,PREM_OKR.SKP().R().RN,
                     PREM_OKR.SKP().R().RT,_kwota$2,_kwotan$2,PREM_OKR.LT,_proc_s,_dz12,,{? _c || _c || #(@.N.ref) ?})
               ?}
            || _kwota:=_kwxx()$2;
               _kwotan:=_kwota-(_kwota*_proc_s);
               __add(#PREM_OKR.ref,'P',PREM_OKR.RP,PREM_OKR.O_OD,PREM_OKR.O_OD,PREM_OKR.O_DO,PREM_OKR.SKP().R().RN,
                  PREM_OKR.SKP().R().RT,_kwota$2,_kwotan$2,PREM_OKR.LT,_proc_s,_dz12,,{? _c || _c || #N.ref ?});
               _prem.prefix(PREM_OKR.SKP().R().RN);
               {? _prem.first() || _prem.IL-=1; _prem.put ?}
            ?}
         ?}
      ?};
      PREM_OKR.prev
   !}
?};
&_czy_ok; &_war;

:: dla premii z opcja "pobierz zadeklarowane okresy" uzupelniamy jezeli brak ostatniej premii
:: wyrownanie tylko dla premii kwartalnych i polrocznych
PAR_POKR.prefix(exec('ref_firma','ustawienia'));
__SK_CHO.cntx_psh();
__SK_CHO.index(__SK_ND3);
_f_sk:="__SK_CHO.prefix(_a,_b);__SK_CHO.last()";
{? PAR_POKR.first()
|| {!
   |? {? (PAR_POKR.RP='K' | PAR_POKR.RP='P') & PAR_POKR.RZ='T' & PAR_POKR.PTZO='T'
      || _pr_def:={? PAR_POKR.RP='K' || 4 |? PAR_POKR.RP='P' || 2 ?};
         _nr_rub:=PAR_POKR.R().RN;
         _prem.prefix(_nr_rub);
         _uzu:={? _prem.first() & _prem.IL<>_pr_def & _f_sk(PAR_POKR.RP,_nr_rub)
               || _prem.IL
               ?};
         &_pr_def; &_nr_rub;

::    jezeli nie bylo zadnych wyplat nie uzupelniamy
         {? _uzu>0
         ||
::    bufor __SK_CHO ustawiony na ostatnim rekordzie w funkcji _f_sk()
            _ls:=__SK_CHO.LT;
            _uw1:=__SK_CHO.UWAGI;
::    sprawdzenie czy nie bylo wyplaty tej premii w kilku czesciach
            _zod:=__SK_CHO.OD; _zdo:=__SK_CHO.DO;
            _kw_n:=_kw_b:=0;
            __SK_CHO.cntx_psh();
            {? __SK_CHO.last()
            || {!
               |? {? (_zod=__SK_CHO.OD) & (_zdo=__SK_CHO.DO)
                  || _kw_n+=__SK_CHO.K_N; _kw_b+=__SK_CHO.K_B
                  ?};
                   __SK_CHO.prev & (_zod=__SK_CHO.OD)
               !}
            ?};
            __SK_CHO.cntx_pop();
::    ustalamy ilosc brakujacych miesiecy na podstawie kwartalow ktore powinnismy pobrac i ostatniego zapisu w __SK_CHO
::    sprawdzamy liczbe miesiecy pobranych do podstawy _d
::    dla rownej liczbie miesiecy do podstawy = liczbie kwartalow
           _dd:=date(0,0,0); _pm:=0;
           {? PAR_POKR.RP='K'
           || {? _a~2<4
              || _dd:=date(_a~1-1,12,0)
              |? _a~2<7
              || _dd:=date(_a~1,3,0)
              |? _a~2<10
              || _dd:=date(_a~1,6,0)
              || _dd:=date(_a~1,9,0)
              ?};
              {? date(__SK_CHO.DO~1,__SK_CHO.DO~2,0)<_dd
              || __KAL.rdat(date(__SK_CHO.DO~1,__SK_CHO.DO~2,0),_dd);
                 _pm:=(__KAL.month+__KAL.day%30);
                 _pm:=_pm%3+((_pm%*3)>0);
                 {? _pm=0 | (_pm & _pm<_uzu)
                 || _uzu:=_pm
                 ?}
              || _uzu:=0
              ?}
           |? PAR_POKR.RP='P'
           || {? _a~2<7
              || _dd:=date(_a~1-1,12,0)
              || _dd:=date(_a~1,6,0)
              ?};
              {? date(__SK_CHO.DO~1,__SK_CHO.DO~2,0)<_dd
              || __KAL.rdat(date(__SK_CHO.DO~1,__SK_CHO.DO~2,0),_dd);
                 _pm:=(__KAL.month+__KAL.day%30);
                 _pm:=_pm%6+((_pm%*6)>0);
                 {? _pm=0 | (_pm & _pm<_uzu)
                 || _uzu:=_pm
                 ?}
              || _uzu:=0
              ?}
           ?};
           {! _i:=1.._uzu
           |! __SK_CHO.LT:='Uzupel.'+$_i;
              __SK_CHO.OPIS:=_ls;
              __SK_CHO.K_N:=_kw_n;
              __SK_CHO.K_B:=_kw_b;
              __SK_CHO.UWAGI:=_uw1;
              __SK_CHO.add
           !};
           &_ls; &_dd; &_pm; &_zod; &_zdo; &_kw_n; &_kw_b; &_uw1
         ?}
      ?};
      PAR_POKR.next()
   !}
?};
&_f_sk;
__SK_CHO.cntx_pop();
PREM_OKR.cntx_pop;
H.cntx_pop();
:: Poprawka ER/WRT/XP/12.51/2302/0047
VAR_DEL.delete('__par341');
__par341:=exec('get_par','#parametr',341);

::Mamy rozpisane premie, liczymy wartosci dla premii kwartalnych, rocznych i polrocznych;
_przelicz:="__SK_CHO.prefix(_a,_d);
            {? __SK_CHO.first
            || _pom_mc:=0;
               _ref:=__SK_CHO.REF;
               _r:=__SK_CHO.R;
               _o:=__SK_CHO.O;
               _mc:=__SK_CHO.MC;
               _odx:=__SK_CHO.OD;
               _dox:=__SK_CHO.DO;
               _skl:=__SK_CHO.SKL;
               _skl_nr:=__SK_CHO.SKL_NR;
               _k_b:=0;
               _k_n:=0;
               _lt:=__SK_CHO.LT;
               _ref_n:=__SK_CHO.REF_N;
               _dz12:=__SK_CHO.UWAGI;
               _mcdp:=_g;
               _kw:=obj_new(2);
               _dx:=obj_new(2);
               {!
               |? _kw[1]:=__SK_CHO.K_B;
                  _kw[2]:=__SK_CHO.K_N;
                  _dx[1]:=__SK_CHO.OD;
                  _dx[2]:=__SK_CHO.DO;
:: sprawdzamy czy premia jest należna za cały okres Poprawka ER/WRT/XP/12.51/2302/0047
                  {? (__par341='R' | __par341='K') & P.DZA>_dx[1] & P.DZA~3>1 &
                     __KAL.w_days(date(P.DZA~1,P.DZA~2,1),P.DZA-1)>0
                  || {? exec('Prm_p_za','lista_licz',_kw,_dx,__par341)
                     || __SK_CHO.OPIS:='Przel.prop.do pełnych mc.';
                        __SK_CHO.K_B:=_kw[1];
                        __SK_CHO.K_N:=_kw[2];
                        __SK_CHO.OD:=_dx[1];
                        __SK_CHO.DO:=_dx[2];
                        __SK_CHO.put
                     ?}
                  ?};
                  _k_b+=_kw[1];
                  _k_n+=_kw[2];
                  {? __SK_CHO.LT*'Uzupel.'
                  || _pom_mc+=((_dx[2]~1*12+_dx[2]~2)-(_dx[1]~1*12+_dx[1]~2))+1
                  || {? _dx[1]<_odx || _odx:=_dx[1] ?};
                     {? _dx[2]>_dox || _dox:=_dx[2] ?}
                  ?};
                  __SK_CHO.next
               !};
               {? _dz12='T'
               || _mcx:=12
               || 'Powrot z bezplatnego lub wychowawczego rozpoczetego przed badanym okresem nalezy wylaczyc z ';
                  'miesiecy przepracowanych';
                  N.cntx_psh();
                  N.index('NIPRACNB');
                  {! _lp:=1..3
                  |! _kod:=
                        {? _lp=1 || 2
                        |? _lp=2 || 3
                        |? _lp=3 || 25
                        ?};
                     N.prefix('N',P.ref(),_kod);
                     {? N.find_le(_odx) & _odx<N.DO
                     || {!
                        |? _dp:=N.DO+1;
                           N.next() & _dp=N.OD
                        !};
                        {? _dp~3>1 & __KAL.w_days(date(_dp~1,_dp~2,1),_dp)>0
                        || _dp:=date(_dp~1,_dp~2,0)+1
                        ?};
                        {? _odx<_dp || _odx:=_dp ?}
                     ?}
                  !};
                  N.cntx_pop();
                  'sprawdzamy okres zatrudnienia';
                  _dp:=P.DZA;
                  {? P.DZA~3>1 & __KAL.w_days(date(P.DZA~1,P.DZA~2,1),P.DZA-1)>0
                  || _dp:=date(P.DZA~1,P.DZA~2,0)+1
                  ?};
                  {? _odx<_dp || _odx:=_dp ?};
                  'przyjmujemy okres 12 miesiecy liczac od miesiaca poprzedzajacego zwolnienie';
                  _mcx:=((_dox~1*12+_dox~2)-(_odx~1*12+_odx~2))+1;
                  _mcx+=_pom_mc;
                  {? _a='K'
                  ||  {? _mcdp<12
                      || {? _mcx<{? _mcdp<3 || _mcdp || 3 ?}
                         || _mcx:={? _mcdp<3 || _mcdp || _mcx ?}
                         ?}
                      || {? _mcx<_mcdp ||_mcx:=_mcdp ?}
                      ?}
                  ?};
                  {? _mcx>12 || _mcx:=12 ?}
               ?};
               {? _mcx>0
               || _wys:=_wy:=_lp:=0;
                  _dt1:=date(_odx~1,_odx~2,0);
                  _dt2:=date(_dox~1,_dox~2,0);
                  {!
                  |? _dt1<=_dt2
                  |! _wy:=__hwy(_dt1);
                     {? _wy || _wys+=_wy; _lp+=1 ?};
                     _dt1+=1;
                     _dt1:=date(_dt1~1,_dt1~2,0)
                  !};
                  _wy:={? _lp<>0 || _wys/_lp$3 ?};
                  {? _wy<>0 & _e<>_wy
                  || _wsp:=_e/_wy$2;
                     _op1:=' (p)';
                     _op2:='Przel.do wym.etatu wg.wsp='+$(_wsp)+' ('+$(_e$3)+'/('+$(_wys$3)+'/'+$_lp+'m))'
                  || _wsp:=1;
                     _op1:=_op2:=''
                  ?};
                  _k_b:=_wsp*_k_b/_mcx$2;
                  _k_n:=_wsp*_k_n/_mcx$2;
                  __add(_ref,_b,_o,_mc,_odx,_dox,_skl_nr,_skl,_k_b,_k_n,'1/'+form(_mcx)+_op1,0,'N',_op2,
                     {? _f || _f || #N.ref ?})
               ?}
            ?}";


::przeliczenie wartosci dla skladnikow wynikajcych z rozliczenia godzin sredniookresowych
:: _c okr_od
:: _d okr_do
_p_g_okr:="__SK_CHO.prefix(_a,_e);
            {? __SK_CHO.first
            || _ref:=__SK_CHO.REF;
               _r:=__SK_CHO.R;
               _o:=__SK_CHO.O;
               _mc:=__SK_CHO.MC;
               _odx:=_c;
               _dox:=_d;
               _skl:=__SK_CHO.SKL;
               _skl_nr:=__SK_CHO.SKL_NR;
               _k_b:=0;
               _k_n:=0;
               _lt:=__SK_CHO.LT;
               _ref_n:=__SK_CHO.REF_N;
               _dz12:=__SK_CHO.UWAGI;
               {!
               |? _k_b+=__SK_CHO.K_B;
                  _k_n+=__SK_CHO.K_N;
                  __SK_CHO.next
               !};
               'Powrot z bezplatnego lub wychowawczego rozpoczetego przed badanym okresem nalezy wylaczyc z ';
               'miesiecy przepracowanych';
               H.cntx_psh(); H.index('_HISTKOD');
               {! _lp:=1..2
               |! _kod:={? _lp=1 || 'B' || 'W' ?};
                  H.prefix(P.ref(),_kod,);
                  {? H.find_le(_odx) & _odx<H.DO
                  || {!
                     |? _dp:=H.DO+1;
                        H.next() & _dp=H.OD
                     !};
                     {? _dp~3>1 & __KAL.w_days(date(_dp~1,_dp~2,1),_dp)>0
                     || _dp:=date(_dp~1,_dp~2,0)+1
                     ?};
                     {? _odx<_dp || _odx:=_dp ?}
                  ?}
               !};
               H.cntx_pop();
               'sprawdzamy okres zatrudnienia';
               _dp:=P.DZA;
               {? P.DZA~3>1 & __KAL.w_days(date(P.DZA~1,P.DZA~2,1),P.DZA-1)>0
               || _dp:=date(P.DZA~1,P.DZA~2,0)+1
               ?};
               {? _odx<_dp || _odx:=_dp ?};
               'przyjmujemy okres 12 miesiecy liczac od miesiaca poprzedzajacego zwolnienie';
               _mcx:=((_dox~1*12+_dox~2)-(_odx~1*12+_odx~2))+1;
               {? _mcx>12 || _mcx:=12 ?};
               {? _mcx>0
               || _wys:=_wy:=_lp:=0;
                  _dt1:=date(_odx~1,_odx~2,0);
                  _dt2:=date(_dox~1,_dox~2,0);
                  {!
                  |? _dt1<=_dt2
                  |! _wy:=__hwy(_dt1);
                     {? _wy || _wys+=_wy; _lp+=1 ?};
                     _dt1+=1;
                     _dt1:=date(_dt1~1,_dt1~2,0)
                  !};
                  _wy:={? _lp<>0 || _wys/_lp ?};
                  {? _wy<>0 & _f<>_wy
                  || _wsp:=_f/_wy;
                     _op1:=' (p)';
                     _op2:='Przel.do wym.etatu wg.wsp='+$(_wsp$6)+' ('+$(_f$6)+'/('+$(_wys$6)+'/'+$_lp+'m))'
                  || _wsp:=1;
                     _op1:=_op2:=''
                  ?};
                  _k_b:=_wsp*_k_b/_mcx$2;
                  _k_n:=_wsp*_k_n/_mcx$2;
                  __add(_ref,_b,_o,_mc,_odx,_dox,_skl_nr,_skl,_k_b,_k_n,'1/'+form(_mcx)+_op1,0,'N',_op2,
                     {? _g || _g || #N.ref ?})
               ?}
            ?}";

__SK_CHO.index(__SK_ND3);
PAR_POKR.prefix(exec('ref_firma','ustawienia'));
{? PAR_POKR.first()
||
:  Wymiar zatrudnienia na wskazana date.
   __hwy:="
      _wy:=0;
      H.cntx_psh(); H.index('_HISTKOD'); H.prefix(P.ref(),'Z');
      _wy:={? H.find_le(_a) & (H.DO=date(0,0,0) | _a<=H.DO) || {? var_pres('MAC',H)>0 || H.RWY || H.WY ?} ?};
      H.cntx_pop();
      _wy";
   {? _c
   || _wy:=__hwy(date(O.R,O.M,0))
   || _wy:=__hwy(N.DO)
   ?};
   {!
   |? _nr_rub:=PAR_POKR.R().RN;
:: dla pobierz zadeklarowane okresy dzielimy przez liczbe miesiecy przyjetych do podstawy
:: w przypadku gdy liczba tych miesiecy jest mniejsza niz 12.
      _mcdp:={? PAR_POKR.PTZO='T' & PAR_POKR.DZ_12='N' || _d-_b+1 || 0 ?};
      {? PAR_POKR.RP='S'
      || _p_g_okr('S','X',_okr_od,_okr_do,_nr_rub,_wy,_c); 'sredniotygodniowa'
      || _przelicz('R','X',_od,_nr_rub,_wy,_c,_mcdp); 'roczna';
         _przelicz('P','X',_od,_nr_rub,_wy,_c,_mcdp); 'polroczna';
         _przelicz('K','X',_od,_nr_rub,_wy,_c,_mcdp); 'kwartalna'
      ?};
      PAR_POKR.next()
   !};
   &__hwy
?};
&__add;
VAR_DEL.delete('__par341');
:: MK poprawka[EXC]
{? var_pres('PREM_EXC')=type_of(SYSLOG)
|| PREM_EXC.cntx_pop()
?};
PAR_POKR.cntx_pop();
1


\licz_nie_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: wyliczenie nieobecnosci z kartoteki N
::   WE:
::   WY:
::  OLD: \licz_nie/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_d')=1 || _d:=0 || _d:=1 ?};
: _e - pominiecie urlopu macierzynskiego praca
{? var_pres('_e')=1 & _e=1 || _e:=1 || _e:=0 ?};
_is_mac:=var_pres('_f')=type_of(0) & _f;
_nie:=0;
_c:=__KAL.w_hours(_a,_b);
_plg_n:=Plugin.run('PPL_PLL_NALS_NB');
N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref);
{? N.last()
|| {!
   |? _q:=N.NB().RN;
      {? N.OD <= _b & N.DO >= _a & ~(_plg_n*(','+$_q+','))
      || _kalend:=0;
         {? ~(__RUB.sys_attr(_q,113,N.OD) | __RUB.sys_attr(_q,1311,N.OD) | __RUB.sys_attr(_q,1312,N.OD) |
            __RUB.sys_attr(_q,1313,N.OD) | __RUB.sys_attr(_q,1314,N.OD) | __RUB.sys_attr(_q,1318,N.OD) |
            __RUB.sys_attr(_q,1114,N.OD) | __RUB.sys_attr(_q,1171,N.OD))
         || {? _e & ~(__RUB.sys_attr(_q,122722) | __RUB.sys_attr(_q,122742))
            || _od:={? N.OD<_a || _kalend:=1; _a || N.OD ?};
               _do:={? N.DO>_b || _kalend:=1; _b || N.DO ?};
               _nie+=
                  {? _d
                  || {? _kalend || __KAL.w_days(_od,_do) || N.NR ?}
                  || {? _kalend || __KAL.w_hours(_od,_do) || N.NG ?}
                  ?};
               {? var_pres('nn_godz')=type_of(1) & var_pres('nn_dni')=type_of(1) &
                  var_pres('_c')=type_of(0) & __RUB.sys_attr(_q,1321,N.OD)
               || nn_dni+={? _kalend || __KAL.w_days(_od,_do) || N.NR ?};
                  nn_godz+={? _kalend || __KAL.w_hours(_od,_do) || N.NG ?};
::                dla godzin nieobecności, które nie są wyliczane z kalendarza przekazujemy do formuły nn_potr_wynchor
                  _godz_nie:={? N.NRG_AUTO='N' || N.NG || 0 ?};
                  exec('nn_potr_wynchor','lista_licz',_od,_do,_c,_godz_nie,_is_mac)
               ?}
            ?}
         || {? ~__RUB.sys_attr(_q,1314)
            || _od:={? N.OD<_a || _kalend:=1; _a || N.OD ?};
               _do:={? N.DO>_b || _kalend:=1; _b || N.DO ?};
               {? var_pres('url_dni')=type_of(1)
               || url_dni+={? _kalend || __KAL.w_days(_od,_do) || N.NR ?}
               ?};
               {? var_pres('url_godz')=type_of(1)
               || url_godz+={? _kalend || __KAL.w_hours(_od,_do) || N.NG ?}
               ?}
            ?}
         ?}
      ?};
      N.prev() & N.DO>=_a
   !}
?};
N.cntx_pop();
_nie


\skl_mies_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Pobranie składników z listy wypłaconej nieobecności.
::       Składniki wynagrodzenia, do których pracownik zachowuje prawo w okresie pobierania zasiłku (atrybut 47).
::   WE: _a [DATE] - Data nieobecności.
::   WY:
::  OLD: \skl_mies/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_r_tab:=__RUB.sys_rub(47);
{? _r_tab.first()
||
:: Dla choroby z bieżącego miesiąca pobieramy kwotę z listy poprzez FUNKCJE.L_SYS(), nie ma LS i O_P.LS='N'
:: przy pierwszym obliczaniu listy płac
   {? VAR.JESTLIST & N.LT=VAR.NAZWALIS || obj_del(_r_tab); return(FUNKCJE.L_SYS(47)) ?};
   O_P.cntx_psh();
   O_P.index('P_RMK');
   O_P.prefix('T',P.ref(),_a~1,_a~2);
   {? O_P.first()
   || O.cntx_psh();
      LS.cntx_psh();
      {!
      |? O_P.O();
         {? FUNKCJE.CZY_POD()
         || LS.use(O.LT);
            LS.index('PRACNRRU');
            {? _r_tab.first()
            || {!
               |? LS.prefix(P.ref(),_r_tab.RN);
                  {? LS.first()
                  || {!
                     |? _wyn+=LS.KW$2;
                        LS.next()
                     !}
                  ?};
                  _r_tab.next()
               !}
            ?}
         ?};
         O_P.next()
      !};
      LS.cntx_pop();
      O.cntx_pop()
   ?};
   O_P.cntx_pop()
?};
obj_del(_r_tab);
_wyn


\wyr_minwyn_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [2008]
:: OPIS: Funkcja wylicza wyrównanie podstawy nieobecności do kwoty minimalnego wynagrodzenia.
::   WE: _a [DATE]    - Data końca nieobecności.
::       _b [INTEGER] - Wyliczona kwota podstawy (odbruttowiona).
::       _c [DATE]    - Data konca biezacej nieobecnosci do ustalenia kwoty minmalnego wynagrodzenia
::   WY: Wyliczona kwota wyrównania do minimalnego wynagrodzenia.
::  OLD: \wyr_minwyn/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(date()) || return(0) ?};
{? var_pres('_b')<>type_of(0) || return(0) ?};
{? var_pres('_c')<>type_of(date) || _c:=_a ?};
_wynik:=0;

{? PAR_SKID.get(281)='N'
|| _do:=_a
|| _do:=_c
?};
_min_dat:=_c;
{? (_nk:=exec('ust_nk','lista_licz',_min_dat,'NK'))=0
|| RAPLS.msg(
      P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
      'Nie znaleziono kwoty minimalnego wynagrodzenia za miesiąc %1.'@[_min_dat$8],
      exec('retry_msg','lista_licz')
   );
   return(_wynik)
?};
_mac:=(N.KDCH().KOD*'B' | __RUB.sys_attr(N.NB,1227));
_T_mac:="
   {? _a
   || {!
      |? {? (exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM') | exec('h_stat_get','pracownik',H.ref(),'T_ZM_WAR'))
         || H.prev()
         ?}
      !}
   || 1
   ?}";
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
{? H.find_le(_do)
|| _T_mac(_mac);
   _nk:=(_nk*H.WY)$2
|| H.cntx_pop();
   return(0)
?};
H.cntx_pop();

_wsodbr:=exec('ust_nk','lista_licz',_min_dat,'WSODBR');
{? _do~1>=1999
|| _nk:=(_nk-(_nk*_wsodbr/100))$2
?};
{? _b>=_nk
|| return(0)
?};
{? exec('czy_rok','staz',_do)
|| _proc:=1
|| _buf:=exec('oblicz','staz',1,,_do~1,,_do);
   _dzien:=_buf.daty[1]~3;
   _mc:=_buf.daty[1]~2;
   _rok:=_buf.daty[1]~1+1;
   _data:=date(_rok,_mc,{? _dzien>(_t:=date(_rok,_mc,0)~3) || _t || _dzien ?});
   _proc:={? _do>=_data || 1 || 0.8 ?}
?};
_nk:=_nk*_proc$2;
: Atrybut 47.
: dodanie składników wynagrodzenia, do których pracownik zachowuje prawo w okresie pobierania zasiłku.
_skl_mie:=exec('skl_mies_wynchor','lista_licz',_do);
_skl_mie:=(_skl_mie-(_skl_mie*_wsodbr/100))$2;
_b+=_skl_mie;
{? _nk>_b
|| _wynik:=(_nk-_b)$2
?};
{? _wynik<0
|| _wynik:=0
?};
_wynik


\wyr_kor_nie_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PKOSO [2011]
:: OPIS: Wprowadzenie wyrównania do korekty nieobecności,
::       Zakłada się, że bufor N jest prawidłowo ustalony.
::      [_a] - opcjonalny 1 wyliczenia z \wynchor podczas naliczania listy, 0 lub brak to edycja nieobecności
::             bez kasowania i przeliczania danych w LSW
::  OLD: \wyr_kor_nie/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of(1) || _a || 0 ?};
{? _a
|| N.cntx_psh();
   N.clear();
   LSW.cntx_psh();
   LSW.index('PN');
   LSW.prefix(P.ref(),N.ref());
   {? LSW.first()
   || {! |? LSW.del() !}
   ?};
   LSW.clear();

   _n_dzien:=0;
   {? N.seek(N.N_KOR,) & (__RUB.sys_attr(N.NB,121,N.OD) | __RUB.sys_attr(N.NB,122,N.OD))
   || _n_dzien:=N.STD;
      N.cntx_pop();
      {? N.STD>_n_dzien
      || _n_dzrozn:=N.STD-_n_dzien;
         _n_wart:=N.WART;
         N.STD:=_n_dzien;
         N.WART:=_n_dzien*(N.NK-N.DN-N.DK-N.OP*0.25);
         _n_wart-=N.WART;
         {? N.put() & _n_wart>0
         || _lsw:=exec('lsw_params','lista_wyr');
            _lsw.tryb:='N';
            _lsw.zn:='N';
            params_set('lsw',_lsw);
            LSW.index('PN');
            LSW.prefix(P.ref(),N.ref());
            LSW.blank(1);
            LSW.P:=P.ref();
            LSW.R:=__RUB.ref(exec('nieo2wyr','lista_wyr',N.NB().RN));
            LSW.Z:='N';
            LSW.OD:=N.OD;
            LSW.DO:=N.DO;
            LSW.LT:=VAR.NAZWALIS;
            LSW.N:=N.ref();
            LSW.KDSW:=exec('lsw_kdsw_bl','lista_wyr');
            LSW.KW:=_n_wart;
            LSW.add()
         ?}
      ?}
   || N.cntx_pop()
   ?};
   LSW.cntx_pop()
?};
N.WART


\mc_placa_newzasad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA
:: OPIS:   Funkcja wylicza place zasadnicza i dodatki dla danego miesiaca
::   WE:  _a - poczatek miesiaca
::        _b - koniec miesiaca
::        _c - liczba godzin w miesiacu
::        _d - decyduje czy wynagrodzenie za caly miesiac bez wzgledu na date zatrudnienia: 1 - caly
::       [_e]- decyduje jak okreslic date kursu dla waluty wywolanie dla sprawozdań GUS
::       [_f]- wywołanie na potrzeby wynagrodzenia chrobowego (wywołanie z \wynchor/!ppl_pll_nals) [domyślnie 0-nie]
::   WY:  wynik (wyliczone wynagrodzenie) zapisywany jest do tablicy sta_pom[_i], gdzie _i oznacza
::        indeks w tablicy odpowiadajacy poszczegolnemu rodzajowi wynagrodzenia
::  OLD: \mc_placa/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
_pel_mc_nie:=0;
_mc_poc:=_a;
_mc_kon:=_b;
_wynchor:={? var_pres('_f')=type_of(0) || _f || 0 ?};

:: Dla parametru 274 = 'T' - ustawienie kalendarza standard
_param:=exec('get_par','#parametr',274);
{? _param='T' & exec('czy_zmiana_wym','pracownik',_mc_poc)
|| _kal_naz:=__KAL.nazwa;
   _kal_rok:=__KAL.rok;
   __KAL.set_cal('standard',_mc_kon~1);
   _w_hours:="exec('nominal','godziny',_a,_b,1,1)"
|| _param:='N';
   _w_hours:="__KAL.w_hours(_a,_b)*{? P.KIN='T' || 1 || H.WY ?}$2"
?};
_mc_rob:=__KAL.w_hours(_mc_poc,_mc_kon,1);

_e_zm1:=_f_zm1:={? var_pres('_d')=type_of(0) || 1 ?};
::sprawdzenie czy podano inne ustalanie daty kursu waluty dla sprawozdań do GUS Z-06
::jako argument _c do funkcji waluty\waluta ponieważ nie mamy kontekstu listy płac
_wal_gus:={? var_pres('_e')=type_of(0) || 1 || ~~ ?};
{? var_pres('pop_h')>100   || obj_del(pop_h) ?};   pop_h:=obj_new(4);
{? var_pres('bie_h')>100   || obj_del(bie_h) ?};   bie_h:=obj_new(4);
{? var_pres('wyn_mc')>100  || obj_del(wyn_mc) ?};  wyn_mc:=obj_new(4);
{? var_pres('potr_zz')>100 || obj_del(potr_zz) ?}; potr_zz:=obj_new(4);
{? var_pres('zmiana')>100  || obj_del(zmiana) ?};  zmiana:=obj_new(4);

{? var_pres('OZ_ODDEL')>0
|| _OZ_ODDEL:=OZ_ODDEL
|| _OZ_ODDEL:=0
?};
{? var_pres('OZ_KODDEL')>0
|| _OZ_KODDEL:=OZ_KODDEL
|| _OZ_KODDEL:=0
?};
_OZ_KRAJ:="
   _wyn:=0;
   {? _a
   || {? _b
      || _wyn:=_c
      || {? O.KRAJE
         || H_ODDE.prefix(H.ref);
            {? H_ODDE.first & H.KODDEL='N' & O.KRAJE=H_ODDE.KRAJ
            || _wyn:=_c
            ?}
         |? O.B_ODD='N'
         || _wyn:=_c
         ?}
      ?}
   ?};
   _wyn
";

{! _i:=1..4
|! pop_h[_i]:=bie_h[_i]:=wyn_mc[_i]:=potr_zz[_i]:=zmiana[_i]:=0
!};

_ust_h:="
   _hsx:=exec('hsx','lista_licz',_b,_b,_c);
   _a[1]:=_hsx.S1;
   _a[2]:=_hsx.S2;
   _a[3]:=_hsx.S3;
   _a[4]:=_hsx.S4
";
_spr_h:="
   {! _i:=1..4
   |! zmiana[_i]+=pop_h[_i]<>bie_h[_i]
   !}
";

{? _mc_rob>0
|| {!
   |? {? H.OD>_mc_poc
      || H.prev()
      ?}
   !};
   {? H.OD<=_mc_kon & {? H.DO<>date(0,0,0) || H.DO>=_mc_poc || 1 ?}
   || _exit:=0;
      _first:=1;
      {!
      |? {? _e_zm1
         || _dataod:=_mc_poc;
            _e_zm1:=0
         || _dataod:={? H.OD<_mc_poc | H.OD=P.DZA || _mc_poc || H.OD ?}
         ?};
         _datado:={? H.DO>_mc_kon | H.DO=P.DZ || _mc_kon || {? H.DO=date(0,0,0) || _mc_kon || H.DO ?} ?};
         _godz:=_w_hours(_dataod,_datado);
         _mc_rob:=_godz+exec('nomgodzr_newzasad','lista_licz',_mc_poc,_mc_kon,_dataod,_datado,H.WY);
         _hsx:=exec('hsx','lista_licz',_mc_poc,_mc_poc,_wal_gus);
         _kw1:=_hsx.S1;
         _kw2:=_hsx.S2;
         _kw3:=_hsx.S3;
         _kw4:={? _wynchor || _hsx.S4 || _OZ_KRAJ(_OZ_ODDEL,_OZ_KODDEL,_hsx.S4) ?};
         obj_del(_hsx);
         &_hsx;
         {? _first
         || _ust_h(pop_h,_mc_poc,_wal_gus);
            H.cntx_psh();
            {? H.next & H.OD<=_mc_kon
            || _ust_h(bie_h,_mc_poc,_wal_gus);
               _spr_h()
            ?};
            H.cntx_pop();
            wyn_mc[1]:=_kw1;
            wyn_mc[2]:=_kw2;
            wyn_mc[3]:=_kw3;
            wyn_mc[4]:=_kw4
         || _ust_h(bie_h,_mc_poc,_wal_gus);
            _spr_h();
            _ust_h(pop_h,_mc_poc,_wal_gus)
         ?};
         {? _godz
         || {? PAR_SKID.get(240)='T'
            || sta_pom[1]+=(_kw1-((_kw1/_mc_rob$2)*(_mc_rob-_godz)))$2;
               sta_pom[2]+=(_kw2-((_kw2/_mc_rob$2)*(_mc_rob-_godz)))$2;
               sta_pom[3]+=(_kw3-((_kw3/_mc_rob$2)*(_mc_rob-_godz)))$2;
               sta_pom[4]+=(_kw4-((_kw4/_mc_rob$2)*(_mc_rob-_godz)))$2
            || sta_pom[1]+=(_kw1-((_kw1/_mc_rob)*(_mc_rob-_godz)))$2;
               sta_pom[2]+=(_kw2-((_kw2/_mc_rob)*(_mc_rob-_godz)))$2;
               sta_pom[3]+=(_kw3-((_kw3/_mc_rob)*(_mc_rob-_godz)))$2;
               sta_pom[4]+=(_kw4-((_kw4/_mc_rob)*(_mc_rob-_godz)))$2
            ?}
         ?};
         {? _first & ~_e_zm1
         || _first:=0;
            {? (H.OD>_mc_poc | H.OD>exec('ust_pie_wynchor','lista_licz',_mc_poc)) & ~_f_zm1
            || {? _param='T' & P.DZA=H.OD
               || _godz:=__KAL.w_hours(_mc_poc,H.OD-1)*H.WY$2
               || _godz:=_w_hours(_mc_poc,H.OD-1)
               ?};
               _pel_mc_nie+=_mc_rob=_godz;
               {? _godz
               || {? PAR_SKID.get(240)='T'
                  || sta_pom[1]-=(_kw1/_mc_rob$2)*_godz$2;
                     sta_pom[2]-=(_kw2/_mc_rob$2)*_godz$2;
                     sta_pom[3]-=(_kw3/_mc_rob$2)*_godz$2;
                     sta_pom[4]-=(_kw4/_mc_rob$2)*_godz$2;

                     potr_zz[1]+=((_kw1/_mc_rob$2)*_godz$2);
                     potr_zz[2]+=((_kw2/_mc_rob$2)*_godz$2);
                     potr_zz[3]+=((_kw3/_mc_rob$2)*_godz$2);
                     potr_zz[4]+=((_kw4/_mc_rob$2)*_godz$2)

                  || sta_pom[1]-=(_kw1/_mc_rob)*_godz$2;
                     sta_pom[2]-=(_kw2/_mc_rob)*_godz$2;
                     sta_pom[3]-=(_kw3/_mc_rob)*_godz$2;
                     sta_pom[4]-=(_kw4/_mc_rob)*_godz$2;

                     potr_zz[1]+=((_kw1/_mc_rob)*_godz$2);
                     potr_zz[2]+=((_kw2/_mc_rob)*_godz$2);
                     potr_zz[3]+=((_kw3/_mc_rob)*_godz$2);
                     potr_zz[4]+=((_kw4/_mc_rob)*_godz$2)
                  ?}
               ?}
            ?}
         ?};
         {? H.DO<_mc_kon
         || {? H.next()
            || {? H.DO>_mc_kon | H.DO=date(0,0,0)
               || _exit:=1;
                  _dataod:={? H.OD< _mc_poc | H.OD=P.DZA || _mc_poc || H.OD ?};
                  _datado:={? H.DO> _mc_kon | H.DO=P.DZ || _mc_kon || {? H.DO=date(0,0,0) || _mc_kon || H.DO ?} ?};
                  _godz:=_w_hours(_dataod,_datado);
                  _mc_rob:=_godz+exec('nomgodzr_newzasad','lista_licz',_mc_poc,_mc_kon,_dataod,_datado,H.WY);
                  _hsx:=exec('hsx','lista_licz',_mc_poc,_mc_poc,_wal_gus);
                  _kw1:=_hsx.S1;
                  _kw2:=_hsx.S2;
                  _kw3:=_hsx.S3;
                  _kw4:={? _wynchor || _hsx.S4 || _OZ_KRAJ(_OZ_ODDEL,_OZ_KODDEL,_hsx.S4) ?};
                  obj_del(_hsx); &_hsx;
                  _ust_h(bie_h,_mc_poc,_wal_gus);
                  _spr_h();
                  _ust_h(pop_h,_mc_poc,_wal_gus);

                  wyn_mc[1]:=_kw1;
                  wyn_mc[2]:=_kw2;
                  wyn_mc[3]:=_kw3;
                  wyn_mc[4]:=_kw4;

                  {? _godz
                  || {? PAR_SKID.get(240)='T'
                     || sta_pom[1]+=(_kw1-((_kw1/_mc_rob$2)*(_mc_rob-_godz)))$2;
                        sta_pom[2]+=(_kw2-((_kw2/_mc_rob$2)*(_mc_rob-_godz)))$2;
                        sta_pom[3]+=(_kw3-((_kw3/_mc_rob$2)*(_mc_rob-_godz)))$2;
                        sta_pom[4]+=(_kw4-((_kw4/_mc_rob$2)*(_mc_rob-_godz)))$2

                     || sta_pom[1]+=(_kw1-((_kw1/_mc_rob)*(_mc_rob-_godz)))$2;
                        sta_pom[2]+=(_kw2-((_kw2/_mc_rob)*(_mc_rob-_godz)))$2;
                        sta_pom[3]+=(_kw3-((_kw3/_mc_rob)*(_mc_rob-_godz)))$2;
                        sta_pom[4]+=(_kw4-((_kw4/_mc_rob)*(_mc_rob-_godz)))$2
                     ?}
                  ?}
               ?}
            || _exit:=1
            ?}
         || _exit:=1
         ?};
         ~_exit
      !};
      {? ~_f_zm1 & H.DO<_mc_kon & H.DO<>date(0,0,0)
      || {? _param='T' & P.DZ=H.DO
         || _godz:=__KAL.w_hours(H.DO+1,_mc_kon)*H.WY$2
         || _godz:=_w_hours(H.DO+1,_mc_kon)
         ?};
         _hsx:=exec('hsx','lista_licz',_mc_poc,_mc_poc,_wal_gus);
         _kw1:=_hsx.S1;
         _kw2:=_hsx.S2;
         _kw3:=_hsx.S3;
         _kw4:={? _wynchor || _hsx.S4 || _OZ_KRAJ(_OZ_ODDEL,_OZ_KODDEL,_hsx.S4) ?};
         obj_del(_hsx); &_hsx;

         _pel_mc_nie+=_mc_rob=_godz;

         {? _godz
         || {? PAR_SKID.get(240)='T'
            || sta_pom[1]-=(_kw1/_mc_rob$2)*_godz$2;
               sta_pom[2]-=(_kw2/_mc_rob$2)*_godz$2;
               sta_pom[3]-=(_kw3/_mc_rob$2)*_godz$2;
               sta_pom[4]-=(_kw4/_mc_rob$2)*_godz$2;

               potr_zz[1]+=((_kw1/_mc_rob$2)*_godz$2);
               potr_zz[2]+=((_kw2/_mc_rob$2)*_godz$2);
               potr_zz[3]+=((_kw3/_mc_rob$2)*_godz$2);
               potr_zz[4]+=((_kw4/_mc_rob$2)*_godz$2)

            || sta_pom[1]-=(_kw1/_mc_rob)*_godz$2;
               sta_pom[2]-=(_kw2/_mc_rob)*_godz$2;
               sta_pom[3]-=(_kw3/_mc_rob)*_godz$2;
               sta_pom[4]-=(_kw4/_mc_rob)*_godz$2;

               potr_zz[1]+=((_kw1/_mc_rob)*_godz$2);
               potr_zz[2]+=((_kw2/_mc_rob)*_godz$2);
               potr_zz[3]+=((_kw3/_mc_rob)*_godz$2);
               potr_zz[4]+=((_kw4/_mc_rob)*_godz$2)
            ?}
         ?}
      ?}
   ?}
|| RAPLS.msg(
      P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
      'Brak informacji o kalendarzu pracownika.'@,
      exec('retry_msg','lista_licz')
   )
?};

{! _i:=1..4
|! {? _pel_mc_nie
   || sta_pom[_i]:=0
   || {? zmiana[_i]
      || sta_pom[_i]:=sta_pom[_i]$2
      || sta_pom[_i]:=(wyn_mc[_i]-potr_zz[_i])$2
      ?}
   ?}
!};
obj_del(pop_h);
obj_del(bie_h);
obj_del(wyn_mc);
obj_del(potr_zz);
obj_del(zmiana);
&pop_h;
&bie_h;
&wyn_mc;
&potr_zz;
&zmiana;
:: Dla parametru 274 = 'T' - przywrócenie kalendarza
{? _param='T'
|| __KAL.set_cal(_kal_naz,_kal_rok)
?};
1


\zablokuj_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Zakładanie blokady dotyczacej przekroczenia podstawy emerytarno rentowej
::   WE: _a - wskazanie na osobe
::      [_b] - data
::      [_c] - wartosc odjeta od sprawdzenia
::      [_d] - tylko weryfikacja bez nakładania blokady
::  OLD: \zablokuj/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:=
   {? var_pres('_b')=type_of(date)
   || _msc:=_b~2;
      _lista:=0;
      _b~1
   || _msc:=O.MU;
      _lista:=1;
      O.RU
   ?};
_spr:={? var_pres('_d')=type_of(0) || _d ?};
_zwieksz:=0;
{? _spr
|| P_INFO.cntx_psh;
   P_INFO.index('OD');
   P_INFO.prefix(exec('ref_firma','ustawienia'),_a);
   {? P_INFO.find_ge(date(_rok,1,1))
   || {!
      |? {? P_INFO.OD<=date(_rok,_msc,0)
         || {? ~_zwieksz || _zwieksz:=P_INFO.KW_WSK ?};
            {? P_INFO.BLOKADA<=date(_rok,_msc,0) & P_INFO.BLWN().KOD<>'' & P_INFO.BLWN().KOD<>'2'
            || _ret:=P_INFO.BLOKADA;
               P_INFO.cntx_pop();
               return(_ret)
            ?}
         ?};
         P_INFO.next
      !}
   ?};
   P_INFO.cntx_pop()
?};

LS.cntx_psh();
KU.cntx_psh();
RH.cntx_psh();
KU.index('KARTAUB');
RH.index('RACHDATA');
_max:=0;
_test:=exec('ust_nk','lista_licz',date(_rok,_msc,0),'SK');
_test-=_zwieksz;
{? var_pres('_c')=type_of(0) || _test-=_c ?};
{! _m:=1..12
|? ~_max
|! KU.prefix(exec('ref_firma','ustawienia'),_a,_rok,_m);
   {? KU.first()
   || {!
      |? _test-=KU.S1+KU.S7+KU.S25;
         KU.next()
      !}
   ?};
: W przypadku przesuniecia miesiecy rozliczeniowego i ubezpieczeniowego listy nalezy sprawdzic czy w miesiacy kosztowym
: listy nie ma niezamknietych list z tym samym miesiacem kosztowym i ubezpieczeniowym
: jesli takie listy wystepuja nalezy podstawy dodac do obliczen
   {? _lista & _m=O.M & O.MU<>O.M
   || _ref:=O.ref();
      O.cntx_psh();
      LS.cntx_psh();
      O.index('LISTYPLA');
      O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,O.R,O.M);
      {? O.first()
      || _licz_ls:="
            LS.prefix(exec('ref_firma','ustawienia'),P.OSOBA,_a);
            _wyn:=0;
            {? LS.first()
            || {!
               |? _wyn+=LS.KW;
                  LS.next()
               !}
            ?};
            _wyn
         ";
         {!
         |? {? FUNKCJE.CZY_POD()
            || {? O.ref()<>_ref & O.Z<>'T' & O.MU=O.M
               || LS.use(O.LT);
                  LS.index('OSOBAKOD');
                  LS.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
                  {? LS.first()
                  || _test-=_licz_ls(753);
                     _test-=_licz_ls(970);
                     _test-=_licz_ls(973)
                  ?}
               ?}
            ?};
            O.next()
         !}
      ?};
      O.cntx_pop();
      LS.cntx_pop()
   ?};
   RH.prefix(exec('ref_firma','ustawienia'),_a,_rok,_m);
   {? RH.first()
   || {!
      |? _test-=exec('licza_rhs','lista_licz',56111);
         RH.next()
      !}
   ?};
   {? _test<=0
   || _max:=_m
   ?}
!};

KU.cntx_pop();
RH.cntx_pop();
LS.cntx_pop();
{? ~_spr
|| {? ~_max || _max:=_msc ?};

   P_INFO.cntx_psh();
   P_INFO.index('OD');
   P_INFO.prefix(exec('ref_firma','ustawienia'),_a);
   {? P_INFO.find_ge(date(_rok,1,1))
   || {!
      |? {? P_INFO.OD<=date(_rok,12,0)
         || P_INFO.BLWN:=exec('kod_zus','nieobecnosc','W','2');
            P_INFO.BLOKADA:=date(_rok,_max,0);
            P_INFO.put()
         ?};
         P_INFO.next()
      !}
   |? P_INFO.find_le(date(_rok,1,1))
   || P_INFO.BLWN:=exec('kod_zus','nieobecnosc','W','2');
      P_INFO.BLOKADA:=date(_rok,_max,0);
      P_INFO.OD:=date(_rok,1,1);
      P_INFO.add()
   || {? OSOBA.ref()<>_a
      || OSOBA.seek(_a)
      ?};
      RAPLS.msg(
         '',OSOBA.NAZWISKO,OSOBA.PIERWSZE,
         'Brak danych ubezpieczeniowych.'@
      )
   ?};
   P_INFO.cntx_pop()
?};
{? _max || date(_rok,_max,0) || #0 ?}


\godz_bow_newzasad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [2006]
:: OPIS:   Funkcja wylicza liczbe godzin(dni) nieobecnosci z przebiegu zatrudnienia B,O,W
::   WE:  _a - data poczatek analizowanego okresu
::        _b - data koniec analizowanego okresu
::        _c - liczba parametr okreslajacy czy wyliczac godziny = 1, 0 lub brak wyliczane sa dni robocze
::           - 2 - liczba dni kalendarzowych
::   WY:  wyliczona liczba godzin (dni) w podanym okresie
::  OLD: \godz_bow/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
exec('__RUB','object');
{? var_pres('_c')<>type_of(0)
|| _c:=0
?};

_licz:=0;

_R:=sql(
   'select * from :_a union '
   'select * from :_b union '
   'select * from :_c ',
   __RUB.sys_rub(112),
   __RUB.sys_rub(114),
   __RUB.sys_rub(137)
);
{? _R.size()=0
|| return(_licz)
?};

_N:=sql(
   'select N.OD, N.DO, N.%1 as KRG, '
   'case when to_date(:_b)<=N.OD and N.DO<=to_date(:_c) then 1 else -1 end as OK '
   'from N join R using (N.NB,R.REFERENCE) join :_d using (R.RN,:_d.RN) '
   'where N.P=:_a and N.KOR=\'N\' and N.OD<=to_date(:_c) and to_date(:_b)<=N.DO '
   'order by OK'
   [{? _c=1 || 'NG' |? _c=2 || 'NK' || 'NR' ?}],
   P.ref(),_a,_b,_R
);
{? _N.size()=0
|| return(_licz)
?};

_N.prefix(-1);
{? _N.first()
|| exec('__KAL','object');
   __KAL.set_cal(P.KAL);
   {!
   |? _od:={? _N.OD<_a || _a || _N.OD ?};
      _do:={? _b<_N.DO || _b || _N.DO ?};
      _licz+=
         {? _c=1 || __KAL.w_hours(_od,_do)
         |? _c=2 || (_do-_od)+1
         || __KAL.w_days(_od,_do)
         ?};
      _N.next()
   !}
?};

_licz+sql('select sum(:_a.KRG) as LICZ from :_a where OK=1',_N).LICZ


\kart_zus_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS:
::   WE:
::   WY:
::  OLD: \kart_zus/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
_kwota:=0;
KU.cntx_psh;
KU.index('KARTAUB');
KU.prefix(P.FIRMA,P.OSOBA,_a);
{? KU.first ||
   {! |? {? KU.M<_b || _kwota+=KU.S1+KU.S7+KU.S25 ?};
         KU.next
   !}
?};
KU.cntx_pop;
&_kwota


\rachunki_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS:
::   WE:
::   WY:
::  OLD: \rachunki/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
_c:={? var_pres('_c')=type_of(0) & _c || _c || 12 ?};
DoList.p[11]:=DoList.p[12]:=0;
_kwota:=0;
RH.cntx_psh;
RH.index('RACHDATA');
RH.prefix(exec('ref_firma','ustawienia'),_a,_b);
{? RH.first
|| LS.cntx_psh;
   {!
   |? {? RH.M<=_c & -RH.ZC_INFO().ZUS='t'
      || _kwota+=exec('licza_rhs','lista_licz',56111,56121)
      ?};

:  Zwolniony dochód, zaniechany podatek

      {? var_pres('_d')=7
      || {? RH.ref<>_d
         || DoList.p[11]+=exec('licza_rhs','lista_licz',98);
            DoList.p[12]+=exec('licza_rhs','lista_licz',97)
         ?}
      || DoList.p[11]+=exec('licza_rhs','lista_licz',98);
         DoList.p[12]+=exec('licza_rhs','lista_licz',97)
      ?};
      RH.next
   !};
   LS.cntx_pop
?};
RH.cntx_pop;
_kwota


\spr_blok_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Formuła sprawdza czy, blokada naliczania składek na ubezpieczenia emerytalne i rentowe jest ustawiona.
::       Jeżeli dla danej osoby obliczanie składek powinno być zaniechane, funkcja zwraca znak 'T', w przeciwnym
::       wypadku, wartością zwróconą jest kwota dodatkowego przychodu osiągniętego z innych źródeł.
::       Jeżeli funkcję wywołano bez drugiego argumentu, do przeprowadzenia testu wykorzystywany jest rok i miesiąc
::       ubezpieczeniowy aktualnej listy płac. Podanie argumentu typu DATE umożliwia wyszukanie według zadanego wprost
::       roku i miesiąca.
::   WE: _a - osoba [REF]
::      [_b]- rok i miesiąc ubezpieczeniowy [DATE]
::      [_c]- 0/1 - zaniechanie czyszczenia blokady, domyślnie 0 (czyść) [NUMBER]
::   WY:
::  OLD: \spr_blok/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:={? var_pres('_b')=type_of(date)
         || _msc:=_b~2; _b~1
         || _msc:=O.MU; O.RU
      ?};
_RetVal:=0;
::Czy na koniec nie czyścić blokady z kodem '2' z danego roku (do wykorzystania w wydrukach):
_nCzysc:={? var_pres('_c')=type_of(0) || _c || 0 ?};

P_INFO.cntx_psh;
P_INFO.index('OD');
P_INFO.prefix(exec('ref_firma','ustawienia'),_a);
{? {? ~P_INFO.find_le(date(_rok,_msc,0))
      || P_INFO.find_ge(date(_rok,1,1))
      || 1
   ?} ||
   {? (P_INFO.BLOKADA<>date(0,0,0) & P_INFO.BLOKADA~1<>_rok) |
      (P_INFO.ROK_WSK & P_INFO.ROK_WSK<>_rok) ||
      {? P_INFO.find_le(date(_rok-1,12,0)) ||
         P_INFO.OD:=date(_rok,1,1);
         P_INFO.BLOKADA:=date(0,0,0);
         P_INFO.BLWN:=null;
         P_INFO.ROK_WSK:=0;
         P_INFO.KW_WSK:=0;
         P_INFO.ST:='L';
         P_INFO.add
   ?} ?};
   {? P_INFO.BLOKADA~1=_rok &
      P_INFO.BLOKADA<date(_rok,_msc,0) &
      P_INFO.BLWN & P_INFO.BLWN().KOD<>'2' ||
      _RetVal:='T'
   ?};
   {? type_of(_RetVal)=type_of(0) &
      P_INFO.ROK_WSK=_rok ||
      _RetVal+=P_INFO.KW_WSK
?} ?};
{? ~_nCzysc
|| _jest:=P_INFO.find_ge(date(_rok,1,1));
   {! |? _jest & P_INFO.OD<=date(_rok,12,0)
      |! {? P_INFO.BLWN().KOD='2' & P_INFO.BLOKADA<>date(0,0,0) ||
            P_INFO.BLOKADA:=date(0,0,0);
            P_INFO.BLWN:=null;
            P_INFO.put
         ?};
         _jest:=P_INFO.next
   !}
?};
P_INFO.cntx_pop;
_RetVal


\nn_potr_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: wyliczenie potracen za nieobecnosc nieusprawiedliwiona
::   WE: _a - Data początku nieobecności z danego miesiąca
::       _b - Data końca nieobecności z danego miesiąca
::       _c - Liczba godzin roboczych z danego miesiąca
::       _d - Liczba godzin roboczych nieobecnośći podanych gdy "Czas wyliczony z kalendarza"='N'
::   WY:
::  OLD: \nn_potr/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
_nie_poc:=_a;
_nie_kon:=_b;
_dni_rob:=0;
_godzn_bez_kal:={? var_pres('_d')=type_of(0) & _d || _d || 0 ?};
_is_mac:=var_pres('_e')=type_of(0) & _e;
_T_mac:="
   {? _a
   || {!
      |? {? (exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM') | exec('h_stat_get','pracownik',H.ref(),'T_ZM_WAR'))
         || {? _b || H.prev() || H.next() ?}
         ?}
      !}
   || 1
   ?}";
H.last();
{!
|? {? H.OD>_nie_poc
   || _T_mac(_is_mac,1);
      H.prev()
   ?}
!};
{? _nie_kon>H.DO & H.DO<>date(0,0,0)
|| _exit:=1;
   {!
   |? (_nie_kon>=H.OD | H.DO=date(0,0,0)) & _exit
   |! _pom:={? H.DO<>date(0,0,0) || {? _nie_kon>H.DO || H.DO || _nie_kon ?} || _nie_kon ?};
      _dni_rob:=__KAL.w_hours(_pom,_nie_poc);
      _hsx:=exec('hsx','lista_licz',_a,_a);
      _kw1:=_hsx.S1;
      _kw2:=_hsx.S2;
      _kw3:=_hsx.S3;
      _kw4:=_hsx.S4;
      obj_del(_hsx);
      &_hsx;
      potr[1]+=_kw1/_c*_dni_rob;
      potr[2]+=_kw2/_c*_dni_rob;
      potr[3]+=_kw3/_c*_dni_rob;
      potr[4]+=_kw4/_c*_dni_rob;
      _nie_poc:=_pom+1;
      {? _nie_poc>H.DO & H.DO<>date(0,0,0)
      || _T_mac(_is_mac,0);
         _exit:=H.next()
      || _exit:=0
      ?}
   !}
|| _pom:={? H.DO<>date(0,0,0) || {? _nie_kon>H.DO || H.DO || _nie_kon ?} || _nie_kon ?};
   {? _godzn_bez_kal & _pom=_nie_kon
   || _dni_rob:=_godzn_bez_kal
   || _dni_rob:=__KAL.w_hours(_pom,_nie_poc)
   ?};
   _hsx:=exec('hsx','lista_licz',_a,_a);
   _kw1:=_hsx.S1;
   _kw2:=_hsx.S2;
   _kw3:=_hsx.S3;
   _kw4:=_hsx.S4;
   obj_del(_hsx);
   &_hsx;
   potr[1]+=_kw1/_c*_dni_rob;
   potr[2]+=_kw2/_c*_dni_rob;
   potr[3]+=_kw3/_c*_dni_rob;
   potr[4]+=_kw4/_c*_dni_rob
?}


\nomgodzr_newzasad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Wyliczenie hipotetycznej liczby godzin roboczych w ramach miesiaca kalendarzowego dla pracownika.
::       Dotyczy to przedzialu czasowego wychodzacego poza badanym okresem zatrudnienia.
::   WE:  _a - poczatek miesiaca
::        _b - koniec miesiaca
::        _c - poczatek badanego okresu zatrudnienia w ramach miesiaca trwajacego od _a  do  _b
::        _d - koniec   badanego okresu zatrudnienia w ramach miesiaca trwajacego od _a  do  _b
::        _e - wymiar etatu
::   WY: wartosc godzin roboczych w okresach  od  _a  do  _c oraz od _d  do _b
::  OLD: \nomgodzr/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
_mc_poc:=_a;
_mc_kon:=_b;
_dataod:=_c;
_datado:=_d;
_wy:=_e;
_val_wyn:=0;

:: Dla parametru 274 = 'T' - ustawienie kalendarza standard
_param:=exec('get_par','#parametr',274);
{? _param='T' & exec('czy_zmiana_wym','pracownik',_mc_poc)
|| _kal_naz:=__KAL.nazwa;
   _kal_rok:=__KAL.rok;
   __KAL.set_cal('standard',_mc_kon~1);
   _w_hours:="exec('nominal','godziny',_a,_b,,,,1)"
|| _param:='N';
   _w_hours:="__KAL.w_hours(_a,_b)"
?};

{? _mc_poc<_dataod | _datado<_mc_kon
|| H.cntx_psh();
   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {? _mc_poc<_dataod
   || {? H.find_le(_dataod-1)
      || {!
         |? {? H.OD<=_mc_poc
            || _godz:=_w_hours(_mc_poc,_dataod-1);
               _val_wyn+={? H.WY<>1 || _godz/H.WY$2 || _godz ?};
               _dataod:=H.OD;
               0
            || _godz:=_w_hours(H.OD,_dataod-1);
               _val_wyn+={? H.WY<>1 || _godz/H.WY$2 || _godz ?};
               _dataod:=H.OD;
               H.prev()
            ?}
         !};
         {? _mc_poc<_dataod
         || _godz:=_w_hours(_mc_poc,_dataod-1);
            _val_wyn+={? H.WY<>1 || _godz/_wy$2 || _godz ?}
         ?}
      || _godz:=_w_hours(_mc_poc,_dataod-1);
         _val_wyn+={? _wy<>1 || _godz/_wy$2 || _godz ?}
      ?}
   ?};
   {? _datado<_mc_kon
   || {? H.find_le(_datado+1)
      || {!
         |? _do:={? H.DO=#0 || _mc_kon || H.DO ?};
            {? _do>=_mc_kon
            || _godz:=_w_hours(_datado+1,_mc_kon);
               _val_wyn+={? H.WY<>1 || _godz/H.WY$2 || _godz ?};
               _datado:=_do;
               0
            |? _do>_datado
            || _godz:=_w_hours(_datado+1,_do);
               _val_wyn+={? H.WY<>1 || _godz/H.WY$2 || _godz ?};
               _datado:=_do;
               H.next()
            ?}
         !};
         {? _datado<_mc_kon
         || _godz:=_w_hours(_datado+1,_mc_kon);
            _val_wyn+={? H.WY<>1 || _godz/H.WY$2 || _godz ?}
         ?}
      || _godz:=_w_hours(_datado+1,_mc_kon);
         _val_wyn+={? _wy<>1 || _godz/_wy$2 || _godz ?}
      ?}
   ?};
   {? _wy<>1
   || _val_wyn:={? _wy<>1 || _val_wyn*_wy$2 || _val_wy ?}
   ?};
   H.cntx_pop()
?};
:: Dla parametru 274 = 'T' - przywrócenie kalendarza
{? _param='T'
|| __KAL.set_cal(_kal_naz,_kal_rok)
?};
_val_wyn


\blok_koszt50_zlec_rh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.10]
:: OPIS: Sprawdzenie informacji o blokowaniu wyliczania 50% kosztow uzyskania na podana date
::   WE: _a - ref osoby lub ref pracownika
::       _b - data badania
::       _c - Ref obliczanego rachunku lub listy plac
::       _d - wyliczone koszty uzyskania z rachunku
::       _e - tablica 2 elementowa do wyliczen informacji o blokadzie
::       [_f] - [INT]=1 - wywołanie wg zasad na 31.12.2022r.
::   WY: tablica 2 elementowa z informacjami o blokadzie _e[1] oraz kwota ograniczenia _e[2]
::  OLD: \blok_koszt50/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_OLD:=var_pres('_f')=type_of(0) & _f=1;
_rn:=ref_name(_a);
{? _rn=OSOBA.name()
|| _refOSOBA:=_a;
   _refP:=null()
|? _rn=P.name()
|| _refP:=_a;
   {? _refP=P.ref()
   || _refOSOBA:=P.OSOBA
   || P.cntx_psh();
      P.prefix();
      _refOSOBA:={? P.seek(#_refP,_rn) || P.OSOBA || null() ?};
      P.cntx_pop()
   ?}
|| _refOSOBA:=_refP:=null()
?};
_rok:=_b~1;
_mc:=_b~2;
_rn:=ref_name(_c);
{? _rn=RH.name()
|| _refRH:=_c;
   _refO:=null()
|? _rn=O.name()
|| _refRH:=null();
   _refO:=_c
|| _refRH:=_refO:=null()
?};
_ku:=_d;
_blokada:=_e;
_kwKU:=0;
OS_PAB.cntx_psh();
OS_PAB.index('OSOBAOD');
OS_PAB.prefix(_refOSOBA);
{? OS_PAB.find_ge(date(_rok,1,1))
|| {!
   |? {? OS_PAB.OD<=_b
      || {? OS_PAB.TYP='B'
         || _blokada[1]:=1; 0
         |? OS_PAB.TYP='P'
         || _kwKU+=OS_PAB.KW; OS_PAB.next()
         ?}
      ?}
   !}
?};
OS_PAB.cntx_pop();
{? ~_blokada[1]
|| {? _OLD
   || _kw_prog:=85528.00
   || _kw_prog:=exec('kwota_koszty50_zlec_rh','lista_licz',_rok,1)
   ?};
   {? _kw_prog>0
   || _kwKU+=exec('licz_koszty50_zlec_rh','lista_licz',_rok,_refRH,_refOSOBA,_OLD);
      _kwKU+=exec('licz_koszty50_podatek','lista_licz',_b,_refOSOBA,_refP,_refO,_OLD);

:: zwolnienie przychodu dla U26
      _kwKU+=exec('wyk_ul_U26','lista_licz',_rok,_mc,_refOSOBA,,_OLD);
      {? _refP
      || _kwKU+=FUNKCJE.L_SYS(9022)
      || _kwKU+=FUNKCJE.Z_SYS(9022)
      ?};
      {? _kwKU>=_kw_prog
      || _blokada[1]:=1
      |? _kwKU+_ku>=_kw_prog
      || _kulicz:=_kw_prog-_kwKU;
         {? _kulicz<0 || _kulicz:=0 ?};
         {? _kulicz>_ku
         || _blokada[2]:=_ku
         || _blokada[2]:=_kulicz
         ?};
         _blokada[1]:=0
      || _blokada[1]:=0
      ?}
   || _blokada[2]:=_ku
   ?}
?};
_blokada


\kwota_koszty50_zlec_rh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.10]
:: OPIS: Formula wylicza kwote ograniczenia kosztow 50% w podanym roku
::   WE: _a - rok sprawdzenia kosztow
::       _b - liczba 1 to wyswietla komunikat 0 brak komunikatu
::   WY: Wyliczona kwote ograniczenia kosztow 50% w podanym roku lub 0 jak brak tabeli
::  OLD: \kwota_koszty50/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:={? var_pres('_a')=type_of(0) || _a || return(0) ?};
{? var_pres('_b')<>type_of(0) || _b:=0 ?};
_rok:=_a;
:: na podstawie danego roku ustawiana jest data konca roku do ustawienia w historii stałych
_kw_prog:=exec('ust_nk','lista_licz',date(_rok,12,0),'KU_L50');
{? _b & (_kw_prog=0)
|| FUN.emsg('Nie można określić kwoty ograniczenia 50\% kosztów uzyskania w roku %1.'@[$_rok]);
   return(_kw_prog)
?};
_kw_prog


\licz_koszty50_zlec_rh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.10]
:: OPIS: Formula wylicza koszty 50% dla rodzaju umowy '2' i '3' w podanym roku
::   WE: _a - rok sprawdzenia kosztow
::       _b - Ref rachunku do pominiecia w sumowaniu
::       _c - Ref osoby [domyslnie ZC.OSOBA]
::       _d - [INT]=1 - wywołanie wg zasadn na 31.12.2022r.
::   WY: Suma wyliczonych kosztow 50% w danym roku
::  OLD: \licz_koszty50/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:={? var_pres('_a')=type_of(0) || _a || return(0) ?};
_rok:=_a;
_ref:={? var_pres('_b')=type_of(null) || _b || null ?};
_osoba:={? var_pres('_c')=type_of(null) || _c || ZC.OSOBA ?};
_OLD:=var_pres('_d')=type_of(0) & _d=1;
_kwKU:=0;
RU.cntx_psh;
ZC.cntx_psh;
RH.cntx_psh;
RH.index('RACHDATA');
RH.prefix(exec('ref_firma','ustawienia'),_osoba,_rok);
{? RH.first
|| {!
   |? {? {? _ref=null || 1 || _ref<>RH.ref ?} & (_um:=RH.ZLE().RU().K; _um='2' | _um='3')
      || _kwKU+=exec('licz_rhs','lista_licz',784)
      ?};
      RH.next
   !}
?};
RH.cntx_pop;
ZC.cntx_pop;
RU.cntx_pop;
_kwKU


\licz_koszty50_podatek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.41]
:: OPIS: Formula wylicza sume 50% kosztow uzyskania. Sumowane sa zapisy z karty podatkowej dla miesiecy poprzedzajacych
::       date badania, oraz z list plac z biezacego miesiaca (z wylaczeniem wskazanej listy dla wskazanego pracownika).
::
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WE: _a - Data badania.
::       _b - Wskazanie na osobe.
::       _c - Wskazanie na pracownika.
::       _d - Ref listy do pominiecia obliczen.
::       _e - [INT]=1 - wywołanie wg zasadn na 31.12.2022r.
::   WY:
::  OLD: \licz_koszty50/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_dt:=_a;
_refOSOBA:=_b;
_refP:=_c;
_refO:=_d;
_OLD:=var_pres('_e')=type_of(0) & _e=1;
_ku:=_old:=0;

_rp:=_dt~1;
_mp:=_dt~2;
P.cntx_psh();
P.index('PRACOSOB');
P.prefix(exec('ref_firma','ustawienia'),'P',_refOSOBA);
{? P.first()
|| KP.cntx_psh();
   KP.index('_KARTAPO');
   F_ZATR.cntx_psh();
   O.cntx_psh();
   O.index('LISTYPLP');

   {!
   |? KP.prefix(P.ref(),_rp);
      {? KP.first()
      || {!
         |? {? KP.M<_mp
            || {? _OLD
               || _old+=_wart:=KP.S24;
                  {? _old=0
                  || _wart:=KP.S14
                  ?};
                  _ku+=_wart
               || _ku+=KP.S14
               ?};
               KP.next()
            ?}
         !}
      ?};

      O.prefix(exec('ref_firma','ustawienia'),P.F_ZATR().KOD,_rp,_mp);
      {? O.first()
      || LS.cntx_psh();
         {!
         |? {? FUNKCJE.CZY_POD()
            || {? O.ref()<>_refO | (O.ref()=_refO & P.ref()<>_refP)
               || LS.use(-O.LT);
                  LS.index('PRACNRRU');
                  {? _old=0
                  || LS.prefix(P.ref(),7004)
                  || LS.prefix(P.ref(),7173)
                  ?};
                  {? LS.first()
                  || {! |? _ku+=LS.KW; LS.next() !}
                  ?}
               ?}
            ?};
            O.next()
         !};
         LS.cntx_pop()
      ?};

      P.next()
   !};

   O.cntx_pop();
   F_ZATR.cntx_pop();
   KP.cntx_pop()
?};
P.cntx_pop();

_ku


\wyr_minwyn_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Funkcja wylicza wyrownanie przekazanej wartosci do kwoty minimalnego wynagrodzenia
::   WE: _a - data
::       _b - kwota
::   WY: Wyliczona kwota wyrownania do minimalnego wynagrodzenia
::  OLD: \wyr_minwyn/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(date) || return(0) ?};
{? var_pres('_b')<>type_of(0) || return(0) ?};
_wynik:=0;
::_a jest poczatkiem miesiaca zamiana na koniec miesiaca
_do:=date(_a~1,_a~2,0);
_nk:=KST.NK;
H.cntx_psh;
H.index('_HISTKOD');
H.prefix(P.ref,'Z');
{? H.find_le(_do)
|| {? _do>=date(2013,9,1)
   || {? H.WY=1
      || _nk
      || _nk:=_nk*0.75$2
      ?}
   || _nk:=(_nk*H.WY)$2
   ?}
|| H.cntx_pop; return(0)
?};
H.cntx_pop;

{? _b>=_nk || return(0) ?};
{? exec('czy_rok','staz',_do)
|| _proc:=1
|| _buf:=exec('oblicz','staz',1,,_do~1,,_do);
   _dzien:=_buf.daty[1]~3;
   _mc:=_buf.daty[1]~2;
   _rok:=_buf.daty[1]~1+1;
   _data:=date(_rok,_mc,{? _dzien>(_t:=date(_rok,_mc,0)~3) || _t || _dzien ?});
   _proc:={? _do>=_data || 1 || 0.8 ?}
?};
_nk:=_nk*_proc$2;
{? _nk>_b || _wynik:=(_nk-_b)$2 ?};
{? _wynik<0 || _wynik:=0 ?};
_wynik


\licz_zc_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Funkcja odpowiedzialna za ustalenie rachunkow, ktorych rozliczenie nastapilo
::       w okresie przyjetym do rozliczenia.
::   WE: _a - data poczatkowa
::       _b - data koncowa
::       _c - tablica
::  OLD: \licz_zc/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
RH.index('RACHWYPL');
RH.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
{? RH.find_ge(_a)
|| {!
   |? {? RH.ZC_INFO().FC='T' & RH.DWY>=_a & RH.DWY<=_b
      || _ind:=(_b~1*12+_b~2)-(RH.DWY~1*12+RH.DWY~2)+1;
         {? _ind<=obj_len(_c[1])
         || {? _c[2][_ind]='T'
            || _pod:=LICZRHS.Wylicz(,'.CHOL');
               _c[1][_ind]+=_pod
            ?}
         ?}
      ?};
      RH.next
   !}
?}


\licz_chol_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Wyliczenie wartosci zaznaczonych rubryk do chorobowego z biezacego miesiaca z innych list niz wybrana.
::   WE: _a - _offset
::   WY: Wyliczona wartosc
::  OLD: \licz_chol/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=0;
{? LICZ.RUB_CHO.first
|| _start:=LICZ.RUB_CHO.RN;
   _stop:=-1;
   {!
   |? {? LICZ.RUB_CHO.RN-1=_stop | _stop=-1
      || _stop:=LICZ.RUB_CHO.RN
      || _wynik+=FUNKCJE.L(_start,_stop,_a);
         _start:=_stop:=LICZ.RUB_CHO.RN
      ?};
      LICZ.RUB_CHO.next
   !};
   {? _stop>0
   || _wynik+=FUNKCJE.L(_start,_stop,_a)
   ?}
?};
_wynik


\wyl_wych_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS:
::   WE:
::   WY:
::  OLD: \wyl_wych/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
_od:=date(O.RU,O.MU,1);
_do:=date(O.RU,O.MU,0);

{? _od>=date(2001,6,1) & P.DZA<=_do & (P.DZ=date(0,0,0) | _od<=P.DZ)
|| R.cntx_psh();
   R.clear();
   R.index('RUBKOD');

   _p:=__RUB.sys_kod(56131);
   _e:=__RUB.sys_kod(571321);
   _r:=__RUB.sys_kod(571322);

   {? _pod:=exec('podst_bp_podst_sk','lista_licz','w')
   || _dodlist:=FUNKCJE.LU(_p);
      _podstmc:=_pod+_dodlist;
      {? _podstmc>=KST.SK/30*0.6$2 || _podstmc:=KST.SK/30*0.6$2 || _podstmc ?};
      {? _podstmc>_pod || _dodlist:=_podstmc-_pod$2 || _dodlist:=0 ?};
      exec('zap_wych_podst_sk','lista_licz',
         _p,
         _dodlist,
         _pod
      );
      _skl:=FUNKCJE.LU(_e);
      _kw_skl:=(_podstmc*KST.PRFE*0.01)$2-_skl;
      {? _kw_skl>_skl
      || _kw_skl:=_kw_skl-_skl$2
      || _kw_skl:=_skl;
         _skl:=0
      ?};
      exec('zap_wych_podst_sk','lista_licz',
         _e,
         _skl,
         _kw_skl
      );
      _skl:=FUNKCJE.LU(_r);
      _kw_skl:=(_podstmc*KST.PRFR*0.01)$2-_skl;
      {? _kw_skl>_skl
      || _kw_skl:=_kw_skl-_skl$2
      || _kw_skl:=_skl;
         _skl:=0
      ?};
      exec('zap_wych_podst_sk','lista_licz',
         _r,
         _skl,
         _kw_skl
      )
   || exec('del_wych_podst_sk','lista_licz',_p,_e,_r)
   ?};

   _p:=__RUB.sys_kod(56421);
   _e:=__RUB.sys_kod(57421);
   {? _pod:=exec('pkc_urlw_podatek','lista_licz')
   || _kc:=(_pod*KST.PRKC*0.01)$2;
      exec('zap_wych_podst_sk','lista_licz',
         _p,
         0,
         _pod
      );
      exec('zap_wych_podst_sk','lista_licz',
         _e,
         0,
         _kc
      )
   || exec('del_wych_podst_sk','lista_licz',_p,_e)
   ?};
   R.cntx_pop()
?};
~~


\zap_wych_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS:
::   WE:
::   WY:
::  OLD: \zap_wych/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
{? R.find_key(_a)
|| _ref_R:=R.ref();
   _numku:=R.RSKU;
::UWAGA! zmieniany jest bufor tabeli R przez trigger tabeli LS
::Trigger put() przed: "params_exec('ls_putb','!ppl_pll_rskp')"
   LS.cntx_psh();
   LS.index('OSOBAKOD');
   LS.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
   {? {? LS.find_key(_a)
      || LS.KW:=_c;
         LS.put()
      || LS.blank();
         LS.RB:=_ref_R;
         LS.KK:=exec('kk_hist','pracownik',LS.P,date(O.RU,O.MU,0));
         LS.KW:=_c;
         LS.add()
      ?}
   || KU.index('KARTAUB');
      KU.prefix(P.FIRMA,P.OSOBA,O.RU,O.MU);
      {? {? ~KU.first()
         || KU.blank();
            KU.R:=O.RU;
            KU.M:=O.MU;
            KU.add()
         || 1
         ?}
      || ($('KU.S'+$_numku+':='+form(_b+_c,,2,'9.')))();
         KU.put()
      ?}
   ?};
   LS.cntx_pop()
?}


\del_wych_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS:
::   WE:
::   WY:
::  OLD: \del_wych/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
{? _
|| LS.cntx_psh();
   LS.index('OSOBAKOD');
   KU.cntx_psh();
   KU.index('KARTAUB');
   KU.prefix(P.FIRMA,P.OSOBA,O.RU,O.MU);
   _jest_ku:=KU.first();
   _akt_ku:=0;
   {! _nr:=1.._
   |! {? R.find_key(_[_nr])
      || LS.prefix(exec('ref_firma','ustawienia'),P.OSOBA,_[_nr]);
         {? LS.first()
         || {!
            |? LS.del()
            !}
         ?};
         {? _jest_ku
         || {? ($('KU.S'+$R.RSKU+'<>0'))()
            || ($('KU.S'+$R.RSKU+':=0'))();
               _akt_ku+=1
            ?}
         ?}
      ?}
   !};
   {? _akt_ku
   || KU.put()
   ?};
   KU.cntx_pop();
   LS.cntx_pop()
?}


\nieozas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS:
::   WE:
::   WY: /nieozas.fml
::----------------------------------------------------------------------------------------------------------------------
{? H.first()
|| _zakres:=_b-_a+1;
   _pocz:=date(O.R,O.M-_b,1);
   _p:=_pocz~1*12+_pocz~2;
   _koniec:=date(O.R,O.M-_a,0);
   _i:=_y:=0;
   {? H.find_key(_pocz)
   || _licz:=1
   || {? ~H.find_le(_pocz)
      || {? ~H.find_ge(_pocz)
         || _licz:=0
         || {? H.OD<=_koniec
            || _licz:=1
            || _licz:=0
            ?}
         ?}
      || {? H.DO>=_pocz
         || _licz:=1
         || {? ~H.find_ge(_pocz)
            || _licz:=0
            || {? H.OD<=_koniec
               || _licz:=1
               || _licz:=0
               ?}
            ?}
         ?}
      ?}
   ?}
|| _licz:=0
?};
{? _licz
|| {? H.OD<_pocz
   || H.OD:=_pocz
   ?};
   {!
   |? _dataod:=H.OD; 'data od z rekordu';
      _datado:=H.DO; 'data do z rekordu';
      _g:=_dataod~1*12+_dataod~2; 'liczba miesięcy';
      _i:=_y:=_g-_p+1; 'ustalenie miesiąca względem pierwszego';
      {? _i>_zakres
      || _i:=_zakres
      ?};
      _y+=1;
      _r:=_pocz~1;
      _m:=_pocz~2;
      {? _m+_i>12
      || _r+=1; _m:=(_i+_m)-12
      || _m+=_i
      ?};
      {? _datado>date(_r,_m-1,0)
      || nieohist[_i]+=__KAL.w_days(_dataod,date(_r,_m-1,0));
         _j:=_datado~1*12+_datado~2;
         _i:=_j-_p+1;
         {? _i>_zakres
         ||_i:=_zakres
         ?};
         {! _z:=_y.._i
         |! _r:=_pocz~1;
            _m:=_pocz~2;
            {? _m+_z>12
            || _r+=1; _m:=(_z+_m)-12
            || _m+=_z
            ?};
            {? _datado>date(_r,_m-1,0)
            || nieohist[_z]+=__KAL.w_days(date(_r,_m-1,1),date(_r,_m-1,0))
            || nieohist[_z]+=__KAL.w_days(date(_r,_m-1,1),_datado)
            ?}
         !}
      || nieohist[_i]+=__KAL.w_days(_dataod,_datado)
      ?};
      H.next() & H.OD<=_koniec
   !}
?}


\dod_splate_komornik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Wprowadzenie wpisu do kartoteki splaty dlugu
::   WE: _a - ref tabeli KOM_OS
::       _b - kwota potracenia
::       _c - jesli 0 to rachunek ze zlecenia
::       [_d] - opcjonalnie jesli 1 oznacza zasilek
::       [_e] [int]- 1 - oznacza miesiąc podatkowy
::  OLD: \dod_splate/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
_zas:={? var_pres('_d')=type_of(0) & _d || 'ZAS' || '' ?};
_miesiac:={? var_pres('_e')=type_of(0) & _e || _rok:=O.RP; O.MP || _rok:=O.R; O.M ?};
KOM_SP.clear;
KOM_SP.blank;
{? _c
|| KOM_SP.P:=P.ref; KOM_SP.O:=O.ref; KOM_SP.R:=KOM_SP.RP:=_rok; KOM_SP.M:=KOM_SP.MP:=_miesiac;
   KOM_SP.OPIS:=_zas+' Lista płac '+~O.LT; KOM_SP.PRZ:='A'
|| KOM_SP.RH:=RH.ref; KOM_SP.R:=KOM_SP.RP:=RH.DWY~1; KOM_SP.M:=KOM_SP.MP:=RH.DWY~2;
   KOM_SP.OPIS:=_zas+' Rachunek wypłacono '+$RH.DWY; KOM_SP.PRZ:='A'
?};
KOM_SP.KOM_OS:=_a;
KOM_SP.KW:=_b$2;
KOM_SP.TYP:='A';
KOM_SP.add


\zasilki_komornik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK []
:: OPIS: Wyliczenie liczby dni/godzin zasilku wyliczonego na danej liscie
::   WE: _a - 'K' - dni kalendarzowe
::          - 'R' - dni robocze
::          - 'G' - godziny robocze
::       _b - rok
::       _c - mc
::       _d - jesli 1 to zmiana wyniku na 0 - nieobecnosci z jednogo miesiaca, 1 - nieobecnosci z kilku miesiecy
::   WY:   liczba dni/godzin zasilku lub przy zmianie wyniku 0 - nieobecnosci z jednogo miesiaca, 1 - z kilku miesiecy
::  OLD: \zasilki/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_d')<>type_of(0) || _d:=0 ?};
_wyn:=0;
_rub:=__RUB.sys_rub(122, date(_b,_c,0));
_miesiac:=-1;
_n_od:=#0;
_tree_ref:=',';
N.cntx_psh; N.index('NIEOBECL');
_lista:=('L'+($_b+2)+('00'+$_c+2));
N.prefix('N',P.ref,_lista);
{? N.first
|| {!
   |? {? _rub.find_key(N.NB().RN)
      || {? _n_od~2<>N.OD~2 || _miesiac+=1 ?};
         _n_od:=N.OD;
         _wyn+=($('N.N'+_a))();
         {? N.N_KOR
         || _tree_tmp:=$N.N_KOR+',';
            {? ~(_tree_ref*(','+_tree_tmp))
            || N.cntx_psh();
               N.prefix();
               {? N.seek(N.N_KOR)
               || {? _rub.find_key(N.NB().RN)
                  || _tree_ref+=_tree_tmp;
                     _wyn-=($('N.N'+_a))()
                  ?}
               ?};
               N.cntx_pop()
            ?}
         ?}
      ?};
      N.next
   !}
?};
N.cntx_pop;
{? _d || _miesiac || _wyn ?}


\zn_ogr_isplac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Sprawdzenie czy dany skladnik wchodzi do limitu podatku/ubezpieczen
::   WE: _a - 'P' - podatek, 'U'  - ubezpieczenia
::       _b - numer rubryki
::   WY:
::  OLD: \zn_ogr/isplac.fml
::----------------------------------------------------------------------------------------------------------------------
_od:=date(O.R,O.M,1);
_do:=date(O.R,O.M,0);
IS_LIM.index('RODZAJ');
IS_OGR.index('UNIQUE');
IS_LIM.prefix(_a);
_zn_ogr:="
   _loop:=IS_LIM.find_le(_b);
   _wyn:=0;
   {!
   |? _loop
   |! {? IS_LIM.OD<=_b & _b<=IS_LIM.DO
      || {? IS_LIM.OD<=_b & _a<=IS_LIM.DO
         || IS_OGR.prefix(IS_LIM.ref,_c);
            {? IS_OGR.first
            || _wyn+=1
            ?}
         ?}
      ?};
      _loop:=IS_LIM.prev & ~_wyn
   !};
   _wyn";

_wyn:=0;
IS_WYPL.index('RUBRYKA');
IS_WYPL.prefix(P.OSOBA,__RUB.ref(_b));
{? IS_WYPL.last()
|| {!
   |? {? IS_WYPL.OD<=_do & _od<=IS_WYPL.DO
      || _wyn+=_zn_ogr(_od,_do,IS_WYPL.IS_DEF)
      ?};
      IS_WYPL.prev & ~_wyn
   !}
?};
_wyn


\okr_nskl_kartprac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Określenie przerwy w opłacaniu składek przez budżet państwa za osoby przebywające na urlopie wychowawczym lub
::       macierzyńskim.
::   WE: _a - wartość 'w' - urlop wychowawczy lub 'm' - urlop macierzyński
::       _b - "wskazanie" na tablicę, w której polach zwrócone zostaną wartości
::   WY:
::  OLD: \okr_nskl/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
::       UWAGA: Procedura korzysta z numerow rubryk!
{! _n:=1..obj_len(_b) |! _b[_n]:=0 !};
_lod:={? (_a+1)='w' || date(O.RU,O.MU,1) || date(O.R,O.M,1) ?};
_ldo:={? (_a+1)='w' || date(O.RU,O.MU,0) || date(O.R,O.M,0) ?};
_zdate:=date(0,0,0);

P_NSKL.index('OD');
P_NSKL.prefix(exec('ref_firma','ustawienia'),P.OSOBA);

{? (1+_a)='m'
|| N.cntx_psh();
   N.index('NIEOBECL');
   N.prefix('N',P.ref(),VAR.NAZWALIS);
   {? N.first()
   || {!
      |? {? N.NB().RN=5
         || _mod:=N.OD;
            _mdo:=N.DO;
            {? P_NSKL.first()
            || {!
               |? {? (P_NSKL.LS=VAR.NAZWALIS | P_NSKL.LS='') & P_NSKL.OD<=_mdo & (P_NSKL.DO>=_mod | P_NSKL.DO=_zdate)
                  || _nod:={? P_NSKL.OD<_mod || _mod || P_NSKL.OD ?};
                     _ndo:={? _mdo<P_NSKL.DO | P_NSKL.DO=_zdate || _mdo || P_NSKL.DO ?};
                     _b[1]+=(_mdo-_mod)+1;
                     _b[2]+=(_ndo-_nod)+1;
                     {? P_NSKL.DO=_zdate
                     || P_NSKL.DO:=date(O.R,O.M,0);
                        P_NSKL.LS:=VAR.NAZWALIS;
                        P_NSKL.put();
                        P_NSKL.cntx_psh();
                        P_NSKL.OD:=P_NSKL.DO+1;
                        P_NSKL.DO:=_zdate;
                        P_NSKL.LS:='';
                        P_NSKL.add();
                        P_NSKL.cntx_pop()
                     || {? P_NSKL.LS=''
                        || P_NSKL.LS:=VAR.NAZWALIS;
                           P_NSKL.put()
                        ?}
                     ?}
                  ?};
                  P_NSKL.next()
               !}
            ?}
         ?};
         N.next()
      !}
   ?};
   N.cntx_pop()

|? (1+_a)='w'
|| N.cntx_psh();
   N.index('NIPRACNB');
   N.prefix('N',P.ref(),3);
   {? N.last()
   || {!
      |? {? N.DO<_lod
         || 0
         |? _ldo<N.OD
         || N.prev()
         || _wod:={? N.OD<_lod || _lod || N.OD ?};
            _wdo:={? _ldo<N.DO || _ldo || N.DO ?};
            _b[1]+=(_wdo-_wod)+1;
            {? P_NSKL.last()
            || {!
               |? {? _wdo<P_NSKL.OD
                  || P_NSKL.prev()
                  |? P_NSKL.DO<>_zdate & P_NSKL.DO<_wod
                  || 0
                  || {? P_NSKL.DO=_zdate & (_a+1)='w'
                     || P_NSKL.DO:=_ldo;
                        P_NSKL.put();
                        P_NSKL.cntx_psh();
                        P_NSKL.OD:=P_NSKL.DO+1;
                        P_NSKL.DO:=_zdate;
                        P_NSKL.LS:='';
                        P_NSKL.add();
                        P_NSKL.cntx_pop()
                     ?};
                     _nod:={? P_NSKL.OD<_wod || _wod || P_NSKL.OD ?};
                     _ndo:={? _wdo<P_NSKL.DO | P_NSKL.DO=_zdate || _wdo || P_NSKL.DO ?};
                     _i:=2+(P_NSKL.TTUB().KOD='2500');
                     _b[_i]+=(_ndo-_nod)+1;
                     P_NSKL.prev()
                  ?}
               !}
            ?};

::          wykluczenie dla zasilku macierzynskiego podczas urlopu wychowawczego
            LSW.cntx_psh();
            LSW.index('ZR');
            LSW.prefix('H',P.ref(),524);
            {? LSW.last()
            || {!
               |? {? _wdo>=LSW.OD & _wod<=LSW.DO
                  || _nod:={? LSW.OD<_wod || _wod || LSW.OD ?};
                     _ndo:={? _wdo<LSW.DO || _wdo || LSW.DO ?};
                     _b[2]+=(_ndo-_nod)+1
                  ?};
                  LSW.prev()
               !}
            ?};
            LSW.cntx_pop();
            N.prev()
         ?}
      !}
   ?};
   N.cntx_pop()
?};
_b[1]-_b[2]-_b[3]


\wyl_rat_pot_komornik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Wyliczenie nominalnej raty dla potracenia
::   WE: _a - zawezenie do roku
::       _b - oraz miesiaca (Uwaga, jesli bez argumentow rok i miesiac listy plac)
::      [_c] - 1 - lista płac dla pracownika gdzie ważna jest kolejność naliczania listy
::   WY: rata
::  OLD: \wyl_rat_pot/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
: podstawienie dla argumentow zawezenia dziedziny splaty
{? var_pres('_a')<>type_of(0) | var_pres('_b')<>type_of(0) || _a:=O.R; _b:=O.M ?};
:: jeśli _c jest 1 to należy zweryfikowqać kolejność naliczania listy płac
{? var_pres('_c')<>type_of(0) || _c:=0 ?};

_wyn:=0;

:sprawdzenie splaty w danym miesiacu - i ewentualny koniec jesli splata tylko jednorazowa
__kp_kw:=0;
_spl_w_biezacym:=exec('licz_splate_komornik','lista_licz',_a,_b,1,_c);
{? KOM_OS.RAZ='T' & __kp_kw || &__kp_kw; return(0) ?};
&__kp_kw;
{? KOM_OS.WART>0
|| _do_spl:=exec('licz_splate_komornik','lista_licz',,,,_c);
:  jesli wartosc dlugu jest wprowadzona oznacza to dlug okreslonej wartosci minus splata
   _poz:=KOM_OS.WART-_do_spl;
:  jesli cos zostalo z dlugu do splacenia to gdy wprowadzono rate wartosc nie moze byc wieksza od
:  roznicy raty i tego co zostalo splacone w danym miesiacu
:  jesli rata jest zerowa oznaczo to calosc tego co zostalo do splacenia
   {? _poz>0
   || {? KOM_OS.RATA>0
      || {? _poz>=(KOM_OS.RATA-_spl_w_biezacym)
         || _wyn:=KOM_OS.RATA-_spl_w_biezacym
         || _wyn:=_poz
         ?}
:        sprawdzenie czy jest zdefiniowana formula wyliczajaca rate dla danego pracownika
      || {? +KOM_OS.F          || _wyn:=exec('form_err_komornik','lista_licz',KOM_OS.F)
         |? +KOM_OS.KOM_RP().F || _wyn:=exec('form_err_komornik','lista_licz',KOM_RP.F)
:        jesli nie ma zadnych formul bierz caly pozostaly dlug
         || _wyn:=_poz
         ?};
         {? _wyn>_poz || _wyn:=_poz ?}
      ?}
   ?}
: wartosc zerowa dlugu oznacza ze rata jest obciazeniem jednolitym i czasowym np. zajecie komornicze
|? KOM_OS.WART=0
|| {? KOM_OS.RATA>0
   || _wyn:=KOM_OS.RATA-_spl_w_biezacym
:  sprawdzenie czy jest zdefiniowana formula wyliczajaca rate dla danego pracownika
   || {? +KOM_OS.F          || _wyn:=exec('form_err_komornik','lista_licz',KOM_OS.F)
      |? +KOM_OS.KOM_RP().F || _wyn:=exec('form_err_komornik','lista_licz',KOM_RP.F)
      ?}
   ?}
?};
{? _wyn<0 || 0 || _wyn$2 ?}


\licz_splate_komornik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Suma splaty dla biezacego potracenia
::   WE: [_a] - ewentualne zawezenie do roku i [_b] miesiaca
::       [_c] - ewentualne sprawdzenie czy wartosc jest z list czy tylko kp/kw wynik zapisywany w zmiennej __kp_kw
::       [_d] - 1 - gdy ważna jest kolejność naliczania list płac dla pracownika
::   WY: suma
::  OLD: \licz_splate/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<>type_of(0) || _c:=0 ?};
{? var_pres('_d')<>type_of(0) || _d:=0 ?};
KOM_SP.index('KOM_SP');
{? var_pres('_a')=type_of(0) & var_pres('_b')=type_of(0)
|| KOM_SP.prefix(KOM_OS.ref,_a,_b)
|| KOM_SP.prefix(KOM_OS.ref)
?};
_wyn:=0;
{? _d
|| _p2020:="
      _wyn:=1;
      O.cntx_psh();
      {? KOM_SP.O
      || KOM_SP.O();
         _wyn:=FUNKCJE.CZY_POD()
      ?};
      O.cntx_pop();
      _wyn"
|| _p2020:="1"
?};

{? KOM_SP.first
|| {!
   |? {? _p2020()
      || {? _c & KOM_SP.TYP<>'R'
         || __kp_kw:=1
         ?};
         _wyn+=KOM_SP.KW$2
      ?};
      KOM_SP.next
   !}
?};
_wyn


\form_err_komornik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Sprawdzenie poprawności wprowadzonej formuly dla raty kredytu
::   WE: _a - string przedstawiajacy formule
::  OLD: \form_err/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || return(0) ?};

on_error(2); _wyn:=($_a)();
{? in_error()
|| on_error;
   0
|| on_error; {? type_of(_wyn)<>type_of(0) || 0 || _wyn ?}
?}


\wyk_ul_podatek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Formuła wyliczająca wykorzystane ulgi i licząca dochód od początku roku dla ustalenia progu podatkowego
::   WE: _a - INT - rok podatkowy
::       _b - INT - miesiąc podatkowy
::       [_c] - REF - OSOBA
::       [_d] - INT = 1 to uwzględniana będzie również bieżąca lista płac (wywołanie z zlecenia\rachunki)
::       [_e] - INT = 1 - dla naliczenia składki zdrowotnej
::                  = 2 - dla naliczenia zaliczki wg zasad na 31.12.2022r.
::       [_f] - DATE - opcjonalna data wypłaty listy lub rachunku
::   WY:
::  OLD: \wyk_ul/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_osoba:={? var_pres('_c')=type_of(null) || _c || OSOBA.ref ?};
: uwaga na czwarty argument wywołania - jeśli jest 1 to uwzględniana będzie
: również bieżąca lista płac (wywołanie z zlecenia\rachunki)
_akt_list:=(var_pres('_d')=type_of(0) & _d);
_zdr_ul:=(var_pres('_e')=type_of(0) & _e=1);
_old:=(var_pres('_e')=type_of(0) & _e=2);
_data_wyp:={? var_pres('_f')=type_of(date()) || _f || O.D ?};
_old_25:=0;
_zp:=_pa_old:=0;
KP.cntx_psh;
P.cntx_psh;
P.index('OSOBA');
P.prefix(_osoba,exec('ref_firma','ustawienia'));
{? P.first
|| KP.index('_KARTAPO');
   {!
   |? KP.prefix(P.ref,_a);
      {? KP.first
      || {!
         |? {? KP.M<_b
            || {? _a=2022 & (_zdr_ul | _old )
               || _zp+=KP.S18;
                  {? ~_zp
                  || _pa_old:=(KP.S14-KP.S24);
                     _zp:=KP.S24
                  || _pa_old:=0
                  ?}
               ?};
               {? _a>2021 & _zdr_ul
::                przychód - koszty uzyskania do wyliczeń
               ||
                  {? FUNKCJE.PODATEK
                  ||
::                   dochód 1 próg
                     DoList.p[17]+=exec('wartosci_listy','lista_licz',9065,_a,KP.M,'P');
::                   dochód 2 próg
                     DoList.p[17]+=exec('wartosci_listy','lista_licz',9066,_a,KP.M,'P')
                  || DoList.p[17]+=(KP.S22-KP.S23);
                     DoList.p[17]-=(KP.S24+_pa_old)
                  ?}
               ?};
               {? _old
               || {? _a=2022
                  || _old_25+=KP.S25;
                     DoList.p[8]+=(KP.S1-{? _old_25 || KP.S25 || KP.S2 ?}-KP.S24-_pa_old)
                  || DoList.p[8]+=(KP.S1-KP.S25-KP.S24)
                  ?}
               ||
::                przychód - koszty uzyskania do wyliczeń
                  {? FUNKCJE.PODATEK
                  ||
::                   dochód 1 próg
                     DoList.p[8]+=exec('wartosci_listy','lista_licz',9032,_a,KP.M,'P');
::                   dochód 2 próg
                     DoList.p[8]+=exec('wartosci_listy','lista_licz',9033,_a,KP.M,'P')
                  || DoList.p[8]+=(KP.S1-KP.S2-KP.S14)
                  ?}
               ?};
::             zwolniony dochód
               DoList.p[6]+=KP.S5;
::             ulga od dochodu klasa średnia
               DoList.p[16]+=KP.S21;
::             zaniechany podatek
               DoList.p[7]+=KP.S6
            ?};
            KP.next & KP.M<_b
         !}
      ?};
      P.next
   !}
?};
P.cntx_pop;
KP.cntx_pop;

ULGI_POD.index('ULGIUS');
ULGI_POD.prefix(_osoba,_a);
{? ULGI_POD.first
|| {!
   |? {? ULGI_POD.D<=date(_a,_b,0)
      ||
::       zwolniony dochód
         DoList.p[4]+=ULGI_POD.KWD;
::       zwolniony "podatek"
         DoList.p[5]+=ULGI_POD.KWP
      ?};
      ULGI_POD.next
   !}
?};
:: wykorzystanie ulgi podatkowej pierwszy próg podatkowy
:: jeżeli ulga została wykorzystana to DoList.p[19]=-1
{? _data_wyp~1>2022
|| _wniosek:=exec('ulga_podatkowa_exist','lista_licz',_osoba,_data_wyp,
      {? _akt_list || exec('RU_platnik','rodzaje_platnikow',RH.ZLE().RU) || 'UM_PRAC' ?});
   _wyk_ulga:=exec('rozlicz_suma','lista_licz',0,_osoba,_data_wyp~1,,,,'UZ_POD',_data_wyp~2,1);
   _wyk_ulga.prefix(__RUB.sys_rub(90811).RN);
   _kw_wyk_ulga:=0;
   {? _wyk_ulga.first() | _wniosek
   || _kw_wyk_ulga:=_wyk_ulga.WART;
      _kw_wyk_ulga+=exec('ulga_podatkowa_verify','lista_licz',_osoba,_data_wyp,{? ~_akt_list || O.ref() ?},
         {? _akt_list || RH.ref() ?},_wniosek)
   ?};
   {? _wniosek
   || DoList.p[19]:=KST.KW_W-_kw_wyk_ulga;
      {? DoList.p[19]<=0
      || DoList.p[19]:=-1
      ?}
   |? _kw_wyk_ulga>0 & KST.KW_W<=_kw_wyk_ulga
   || DoList.p[19]:=-1
   ?}
?};

{? DoList.p[4]>0 | DoList.p[5]>0
|| _suma:="
      _wyn:=0;
      _tab:=__RUB.sys_rub(_a);
      {? _tab.first()
      || {!
         |? LS.prefix(exec('ref_firma','ustawienia'),_b,_tab.RN);
            {? LS.first() || {! |? _wyn+=LS.KW; LS.next() !} ?};
            _tab.next()
         !}
      ?};
      _wyn
   ";
   O.cntx_psh;
   KT.cntx_psh;
   LS.cntx_psh;
   {? _akt_list
   || O.index('LISTYZAM');
      O.prefix(exec('ref_firma','ustawienia'),'N');
      {? O.first
      || {!
         |? {? O.RP=_a & O.F_ZATR().KOD<>'Z'
            || _l:='l'+($O.R+2)+('0'+$O.M+2)+(-O.T().T);
               {? LS.use(_l)
               || LS.index('OSOBAKOD');
                  DoList.p[6]+=_suma(98,_osoba);
                  DoList.p[16]+=_suma(9052,_osoba);
                  DoList.p[7]+=_suma(97,_osoba)
               ?}
            ?};
            O.next
         !}
      ?}
   || O.index('LISTYPLP');
      O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,_a,_b);
      DoList.z[4]:={? _akt_list || '' || -VAR.NAZWALIS ?};
      _listy1:=_listy2:='';
      {? O.first
      || {!
         |? {? FUNKCJE.CZY_POD()
            || _l:='l'+($O.R+2)+('0'+$O.M+2)+(-O.T().T);
               {? DoList.z[4]<>_l
               || {? +_listy1+7>=1024
                  || _listy2+=1-_l
                  || _listy1+=1-_l
                  ?};
                  {? LS.use(_l)
                  || LS.index('OSOBAKOD');
                     DoList.p[6]+=_suma(98,_osoba);
                     DoList.p[16]+=_suma(9052,_osoba);
                     DoList.p[7]+=_suma(97,_osoba)
                  ?}
               ?}
            ?};
            O.next
         !}
      ?};
      O.index('LISTYPLA');
      O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,_a,_b);
      {? O.first
      || {!
         |? {? FUNKCJE.CZY_POD()
            || _l:='l'+($O.R+2)+('0'+$O.M+2)+(-O.T().T);
               {? DoList.z[4]<>_l & (_listy1*(1-_l)=0) & (_listy2*(1-_l)=0) &
                  {? O.RP=_a || {? O.MP>=_b || 1 || ~(-O.Z)='N' ?} || 0 ?}
                  || {? LS.use(_l)
                     || LS.index('OSOBAKOD');
                        DoList.p[6]+=_suma(98,_osoba);
                        DoList.p[16]+=_suma(9052,_osoba);
                        DoList.p[7]+=_suma(97,_osoba)
                  ?}
               ?}
            ?};
            O.next
         !}
      ?}
   ?};
   O.cntx_pop;
   LS.cntx_pop;
   KT.cntx_pop
?};
1


\pkc_urlw_podatek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wyliczenie podstawy składki na ubezpieczenie zdrowotne dla osoby przebywającej na urlopie wychowawczym.
::   WE:
::   WY:
::  OLD: \pkc_urlw/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_dp:=date(O.RU,O.MU,1);
_dk:=date(O.RU,O.MU,0);

{? exec('dni_url_wych','nieobecnosc',_dp,_dk)<=0 | _dp<date(2001,6,1)
|| return(0)
?};

_pod:=0;
{? exec('zn_ttub','pracownik',,_dk,'w') & P_INFO.BL_KC<>'T'
|| _ons:=obj_new(3);
   exec('okr_nskl_kartprac','lista_licz','wk',_ons);
   _uzas:=FUNKCJE.LU(520,521,0);
   {? _uzas>0
   || _pod:=_uzas
   || {? _ons[1]>(_ons[2]+_ons[3])
      || _pod:=KST.Z5
      ?}
   ?};
   obj_del(_ons)
?};
_pod$2


\p_ipod_podatek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS:
::   WE:
::   WY:
::  OLD: \p_ipod/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
_proc:=_przy:=0;
_up:=_op:='';
{? {? exec('szukaj_p_ipod','pracownik',date(O.RP,O.MP,0))
   || _up:=P_IPOD.UP; _op:=P_IPOD.OP;
      _proc:=P_IPOD.PROC; _przy:=P_IPOD.PRZYCH;
      P_IPOD.OD~1<>O.RP
   || 1
   ?}
|| exec('ustaw_p_ipod','pracownik',date(O.RP,O.MP,1),'A');
   {? O.RP<2023
   || {? _przy<>P_IPOD.PRZYCH | _proc<>P_IPOD.PROC
      || P_IPOD.OD:=date(O.RP,O.MP,1);
         _ok:=P_IPOD.add(1)
      ?}
   || {? _up<>P_IPOD.UP | _op<>P_IPOD.OP | _proc<>P_IPOD.PROC | _przy<>P_IPOD.PRZYCH
      || P_IPOD.OD:=date(O.RP,O.MP,1);
         _ok:=P_IPOD.add(1)
      ?}
   ?}
?};
_ok


\wartosc_p_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Pobranie wartosci powiekszenia przychlodu/ubezpieczen dla miesiaca lub miesiaca i skladnika placowego.
::   WE: _a - ref OSOBA
::       _b - Rok
::       _c - Miesiac
::       _d - rodzaj 'P', 'U'
::       [_e] - opcjonalnie rubryka integer
::       [_f] - ref P (wskazanie na pracownika)
::       [_g] - symbol listy płac (O.LT) jeśli ma być liczone dla konkretnej listy
::   WY: wartosc powiekszenia dla osoby/pracownika (w zależności czy podano parametr _f)
::  OLD: \wartosc_p_u/isplac.fml
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_rok:=_b;
_msc:=_c;
_podatek:=_d='P';
_rubryka:={? var_pres('_e')=type_of(0) || _e ?};
_prac:={? var_pres('_f')=7 || _f || null() ?};
_lt:={? var_pres('_g')=type_of('') || -_g || '' ?};

O.cntx_psh();
IS_WYPL.cntx_psh();
IS_ROZL.cntx_psh();
OSOBA.cntx_psh();

IS_ROZL.index('ROZL');
{? _rubryka
|| IS_WYPL.index('RUBRYKA');
   IS_WYPL.prefix(_osoba,__RUB.ref(_rubryka))
|| IS_WYPL.index('LISTA');
   IS_WYPL.prefix(_osoba)
?};

: dla podatku wyliczamy miesiace podatkowo
{? _podatek
|| O.index('LISTYPLP')
|| O.index('LISTYPLU')
?};
_wyn:=0;
O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,_rok,_msc);
{? O.first
: jezeli jest przyznane swiadczenie to dla wszystkich list miesiaca
|| {!
   |? {? (~+_lt | _lt=-O.LT) & FUNKCJE.CZY_POD()
      || {? IS_WYPL.first()
: Jezeli jednorazowo to pobiera z naglowka swiadczenia
         || {!
            |? {? _prac<>null()
               || IS_ROZL.prefix(_osoba,IS_WYPL.IS_DEF,~O.LT)
               ?};
               {? IS_WYPL.LT=~O.LT
               || {? _prac=null() | (IS_ROZL.first() & IS_ROZL.P=_prac)
               || _wyn+={? _podatek || IS_WYPL.POD_P || IS_WYPL.POD_U ?}
                  ?}
: jesli miesiecznie to pobiera dla osoby w petli z realizacji swiadczen
               || {? _prac=null()
                  || IS_ROZL.prefix(_osoba,IS_WYPL.IS_DEF,~O.LT)
                  ?};
                  {? IS_ROZL.first()
                  || {!
                     |? {? IS_ROZL.IS_WYPL=IS_WYPL.ref & (_prac=null() | IS_ROZL.P=_prac)
                        || _wyn+={? _podatek || IS_ROZL.POD_P || IS_ROZL.POD_U ?}
                        ?};
                        IS_ROZL.next()
                     !}
                  ?}
               ?};
               IS_WYPL.next()
            !}
         ?}
      ?};
      O.next
   !}
?};
O.cntx_pop();
IS_WYPL.cntx_pop();
IS_ROZL.cntx_pop();
OSOBA.cntx_pop();
_wyn


\zlicz_G_z_MC
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Zliczenie liczby godzin o przekazanym kodzie. Dla okresu wystapienia w miesiacu od-do.
::   WE: _a - Ref pracownika
::       _b - kod skladnika
::       _c - data OD
::       _d - data DO
::   WY: liczba godzin
::  OLD: \zlicz_G_z_MC/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
G.cntx_psh();
_wyn:=0;
_roznica:=_d~1-_c~1+1;
{! _ind:=0.._roznica
|! _Rok:=(_d~1)-_ind;
   {? _Mask:='godz'+(('0000'+$_Rok)+4); G.name<>_Mask || G.use(_Mask) ?};
   G.index('PRRD');
   G.prefix(_a,'G',_b);
   {? G.first
   || {!
      |? {? G.D>=_c & G.D<=_d
         || _wyn+=G.G
         ?};
         G.next
      !}
   ?}
!};
G.cntx_pop();
_wyn


\czy_ulga_podatkowa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [17.00]
:: OPIS: Weryfikacja czy należy się ulga podatkowa w danym miesiącu dla OSOBA w buforze
::   WE: _a - rok
::       _b - miesiac
::       _c - OSOBA.ref
::       [_d] - int - liczenie wg zasad na 2021r.; 1 = zdrowotne, 2 - old podatek
::   WY: 0 - nie ma ulgi
::       1 - jest ulga
::  OLD: \czy_ulga_pod/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:=_a;
{? _rok<2017 || return(1) ?};
_mc:=_b;
_osoba:=_c;
_wynik:=1;
{? exec('szukaj_p_ipod','pracownik',date(_rok,_mc,0)) & P_IPOD.OP='T' || return(1) ?};
_zdr_ul:=(var_pres('_d')=type_of(0) & _d=1);
_old:=(var_pres('_d')=type_of(0) & _d=2);
_dochod:=_pa_old:=_zp:=_old_25:=0;
KP.cntx_psh;
P.cntx_psh;
P.index('OSOBA');
P.prefix(_osoba,exec('ref_firma','ustawienia'));
{? P.first
|| KP.index('_KARTAPO');
   {!
   |? KP.prefix(P.ref,_rok);
      {? KP.first
      || {!
         |? {? KP.M<_mc
            || {? _old | _zdr_ul
               || {? _rok=2022
                  || _zp+=KP.S18;
                     {? ~_zp
                     || _pa_old:=(KP.S14-KP.S24);
                        _zp:=KP.S24
                     || _pa_old:=0
                     ?}
                  ?};
                  {? _old
                  || {? _rok=2022
                     || _old_25+=KP.S25;
                        _dochod+=(KP.S1-{? _old_25 || KP.S25 || KP.S2 ?}-KP.S24-_pa_old)
                     || _dochod+=(KP.S1-KP.S25-KP.S24)
                     ?}
                  || {? _rok>2021
                     || _dochod+=(KP.S22-KP.S23); '*** przychód - koszty uzyskania do wyliczeń***';
                        _dochod-=(KP.S24+_pa_old)
                     ?}
                  ?}
               || _dochod+=(KP.S1-KP.S2-KP.S14); '*** przychód - koszty uzyskania ***'
               ?}
            ?};
            KP.next & (KP.M<_mc)
         !}
      ?};
      P.next
   !}
?};
P.cntx_pop;
KP.cntx_pop;

:: Dochody z innych zrodel
{? exec('szukaj_p_ipod','pracownik',date(_rok,_mc,0))
|| _proc:=P_IPOD.PROC;
   _dochod+=P_IPOD.PRZYCH
|| _proc:=0
?};
:: W 2019 Dane podatkowe podany indywidualny procent podatku 17.75% to od października do grudnia 2019 bierzemy 17
:  do analiz tabeli podatkowej czy przysługuje ulga podatkowa.
{? _proc>0 & _rok=2019 & _proc=17.75
|| {? date(_rok,_mc,1)>=date(2019,10,1)
   || _proc:=17
   ?}
?};

:: Weryfikacja naliczania ulgi podatkowej zmiana ustawy z dnia 29.11.2016
TP.index('TABPODAT');
{? _old | _zdr_ul
|| TP.prefix(2021)
|| TP.prefix(_rok)
?};
{? TP.first()
|| {!
   |? {? TP.K1>0
      || {? _dochod>=TP.K1 || _wynik:=0 ?}
      || {? _proc>TP.PR || _wynik:=0 || TP.next ?}
      ?}
   !}
?};
_wynik


\ZC_zasilki_komornik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wyliczenie liczby dni zasilku wyliczonego w danym miesiącu dla osoby.
::   WE: _a - Osoba ref
::       _b - rok
::       _c - mc
::   WY: 30 - jesli caly miesiac lub wiecej, <30 w pozostalych przypadkach
::  OLD: \ZC_zasilki/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<>type_of(0) || return(0) ?};
{? var_pres('_c')<>type_of(0) || return(0) ?};

_tab:=sql(
   'select ZC_N.MC MC, ZC_N.ROK ROK, sum(ZC_N.NK) NK '
   'from ZC_N join RH join OS_N join R using(R.REFERENCE,ZC_N.R) '
   'where  OS_N.FIRMA=:_e and OS_N.OSOBA=\':_a\' and RH.R=:_b and RH.M=:_c and ZC_N.WYR<>\'T\' and R.RN in (:_d) '
   'group by ZC_N.MC, ZC_N.ROK',
   $_a,_b,_c,__RUB.sys_sql(123),exec('ref_firma','ustawienia'));

_wyn:=0;
{? _tab.first
|| {!
   |? _mc_dni:=date(_tab.ROK,_tab.MC,0)~3;
      {? _mc_dni>30 || _mc_dni:=30 ?};
      _wyn+={? _tab.NK>=_mc_dni || 30 || _tab.NK ?};
      _tab.next
   !}
?};
_wyn


\okr_fep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKG [12.41]
:: OPIS: Ustalanie podlegania FEP składników okresowych wypłaconych na bieżącej liście
::   WE:
::   WY: Tabela z rozpisanymi składnikami wchodzącymi do podstawy FEP
::  OLD: \okr_fep/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_OKRFEP')<100
|| _OKRFEP:=tab_tmp(1,
     'SKL','INTEGER','Numer składnika'@,
     'ZFEP','REAL','Do podstawy FEP'@,
     'BFEP','REAL','Nie do podstawy FEP'@,
     'KFEP','REAL','Bez kontroli do podstawy FEP'@
   )
|| _OKRFEP.prefix();
   _OKRFEP.erase()
?};
:: dopisanie do tablicy podstaw kwoty składnika za okres FEP='T' oraz FEP='N'
:: okres PREM_OKR.O_OD - PREM_OKR.O_DO, tabela _OKRFEP (ZFEP, BFEP)
_kw_fep:=0;
PREM_OKR.cntx_psh();
PREM_OKR.index('PREM_LST');
PREM_OKR.prefix(P.ref(),VAR.NAZWALIS);
{? PREM_OKR.first()
|| H.cntx_psh();
   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {!
   |? {? PREM_OKR.SKP().R().ZUS='T'
      || _OKRFEP.ZFEP:=exec('pod_fep','lista_licz',PREM_OKR.O_OD,PREM_OKR.O_DO,PREM_OKR.KW_W);
         _OKRFEP.BFEP:=PREM_OKR.KW_W-_OKRFEP.ZFEP;
         _OKRFEP.SKL:=PREM_OKR.SKP().R().RN;
         _OKRFEP.add();
         _kw_fep+=_OKRFEP.ZFEP
      ?};
      PREM_OKR.next()
   !};
   H.cntx_pop()
?};
PREM_OKR.cntx_pop();
:: kontrola kwot ze składników okresowych z wypłaconymi na liście płac tylko gdy płacimy FEP
{? _OKRFEP.first() & _kw_fep
|| _kod:=0; _msg:=0;
   {!
   |? {? _kod<>_OKRFEP.SKL
      || _kod:=_OKRFEP.SKL;
         _kw:=FUNKCJE.L(_OKRFEP.SKL)
      ?};
      _kw-=(_OKRFEP.ZFEP+_OKRFEP.BFEP);
      {? _OKRFEP.next()
      || {? _kod<>_OKRFEP.SKL & _kw<>0
         || _OKRFEP.prev();
            _OKRFEP.KFEP:=_kw;
            _msg:=1;
            _kw:=0;
            _OKRFEP.put();
            _OKRFEP.next()
         || 1
         ?}
      || {? _kw<>0
         || _OKRFEP.prev();
            _OKRFEP.KFEP:=_kw;
            _msg:=1;
            _kw:=0;
            _OKRFEP.put();
            0
         || 0
         ?}
      ?}
   !};
   {? _msg
   || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                'Niezgodności kwot pomiędzy tabelą składników okresowych a składnikami rozliczonymi na liście.'@)
   ?}
?};
_OKRFEP


\pod_fep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKG [12.41]
:: OPIS: Sprawdzanie podlegania FEP w okresie i rozpisanie proporcjonalne podanej kwoty
::   WE: _a - okres od dnia
::       _b - okres do dnia
::       _c - kwota do rozpisania
::   WY: Kwota wchodząca do podstawy FEP
::  OLD: \pod_fep/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_koniec:=_b;
_pocz:=_a;
_dni_all:=_dni_fep:=0;
{? H.last()
|| {!
   |? {? H.OD<=_koniec & (H.DO>=_pocz | H.DO=date(0,0,0))
      || {? H.OD>_pocz
         || _od:=H.OD
         || _od:=_pocz
         ?};
         {? H.DO>_koniec | H.DO=date(0,0,0)
         || _do:=_koniec
         || _do:=H.DO
         ?};
         {? _do>=_od
         || _dni_all+=_do-_od+1;
            {? H.SP='T' || _dni_fep+=_do-_od+1 ?}
         ?}
      ?};
      H.prev() & H.DO>=_pocz
   !}
?};
{? _dni_fep
|| {? _dni_fep=_dni_all
   || _ret:=_c
   || _ret:=_c/_dni_all*_dni_fep$2
   ?}
?};
_ret


\kor_fep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKG [12.41]
:: OPIS: Korekta podstawy FEP o kwoty przechowywane w polach _a.ZFEP, _a.BFEP, , _a.KFEP
::   WE: _a - _OKRFEP
::       [_b] - wsp. do _a.ZFEP, domyślnie 1
::       [_c] - wsp. do _a.BFEP, domyślnie 1
::       [_d] - wsp. do _a.KFEP, domyślnie 1
::   WY: kwota korekty
::  OLD: \kor_fep/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
_b:={? var_pres('_b')=type_of(0) || _b || 1 ?};
_c:={? var_pres('_c')=type_of(0) || _c || 1 ?};
_d:={? var_pres('_d')=type_of(0) || _d || 1 ?};
_ret:=0;
{? _a.first()
|| {!
   |? _ret+=_a.ZFEP*_b+_a.BFEP*_c+_a.KFEP*_d;
      _a.next()
   !}
?};
_ret


\potr_P_ZUS_LS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Odjęcie ewentualnego podatku oraz zusu pobranego od składników pobieranych całościowo
::   WE:
::   WY: Wartość pozostałej zaliczki na podatek
::  OLD: \potr_P_ZUS_LS/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_n_potr:=_wyn_pod:=0;
{! _ind:=1..obj_len(_par.tab_rub)
|! {? _par.tab_rub[_ind][2]
   || {? _par.tab_rub[_ind][1].first
      || _wyn_pom:=_wyn_p1:=0;
         {? date(O.RP,O.MP,1)>=date(2019,10,1)
         || _proc:={? FUNKCJE.PL_NEW || 12 || 17 ?}
         || _proc:=18
         ?};
         O.cntx_psh();
         LS.cntx_psh();
         {? _par.FUNKCJE.WYP
         || O.index('LISTYPLP');
            O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,O.RP,O.MP)
         || O.index('LISTYPLA');
            O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,O.R,O.M)
         ?};
         {? O.first()
         || _suma:="
               _wyn:=0;
               {? _a.first()
               || {!
                  |? LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref(),_a.RN);
                     {? LS.first()
                     || {!
                        |? _wyn+=LS.KW$2;
                           ~_b & LS.next()
                        !};
                        _wyn
                     ?};
                     _a.next()
                  !}
               ?};
               _wyn";
            {!
            |? {? FUNKCJE.CZY_POD()
               || LS.use(-('L'+($O.R+2)+('00'+$O.M+2)+O.T().T));
                  LS.index('OSOBAKOD');
                  LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref);
                  {? LS.first
                  || _proc:=_suma(__RUB.sys_rub(91),1)
                  ?}
               ?};
               O.next() & ~_proc
            !};
            &_suma
         ?};
         O.cntx_pop();
         LS.cntx_pop();
         _r_ZUS:=_r_UBZ:=_r_POD:='';
         R.prefix();
         _all_pod:=0;
         {!
         |? {? R.seek(__RUB.ref(_par.tab_rub[_ind][1].RN))
            || _r_ZUS:=R.ZUS;
               _r_UBZ:=R.UBZ;
               _r_POD:={? __RUB.sys_attr(R.RN,48,date(O.R,O.M,0))  |  (R.RN>100 & R.RN<500) || 'T' || R.POD ?};
               _wyn_p1:=_wyn_pom:=FUNKCJE.L(R.RN)+_par.FUNKCJE.L(R.RN,,0);
               {? _wyn_pom
               || _wyn_ppk:=_wyn_zup:=_wyn_kco:=_wyn_zfs:=0;
                  {? _r_ZUS<>'T' | _r_UBZ<>'T'
                  || {? exec('zn_ogr_isplac','lista_licz','U',R.RN)
                     || _wyn_zfs:=exec('wartosc_p_u','lista_licz',P.OSOBA,O.RU,O.MU,'U',R.RN)
                     ?}
                  ?};
                  {? _r_ZUS<>'T' || _wyn_pom:=_wyn_zfs ?};
                  {? _wyn_pom
                  || _par.tab_rub[_ind][2]-=_wyn_zup:=
                        {? _par.p_er || (_wyn_pom/_par.p_er) ?}*_par.zus_er$2+
                        {? _par.p_chw || (_wyn_pom/_par.p_chw) ?}*_par.zus_chw$2;
                     _wyn_ppk:={? _par.p_ppk || (_wyn_pom/_par.p_ppk) ?}*_par.ppk_f$2;
                     _par.tab_rub[_ind][2]-=_ppk:={? _par.p_ppk || (_wyn_pom/_par.p_ppk) ?}*_par.ppk$2;
                     {? _par.tab_rub[_ind][3]
                     || _n_potr+=(_ppk+_wyn_zup)
                     ?}
                  ?};
                  {? _r_UBZ<>'T'
                  || _wyn_pom:=_wyn_zfs
                  || _wyn_pom:=_wyn_p1
                  ?};
                  {? _wyn_pom
                  || {? _par.pkch
                     || _par.tab_rub[_ind][2]-=_kch:=((_wyn_pom-_wyn_zup)/_par.pkch)*_par.kch$2;
                        {? O.RP<2022
                        || _wyn_kco:=((_wyn_pom-_wyn_zup)/_par.pkch)*_par.kcho$2
                        ?};
                        {? _par.tab_rub[_ind][3]
                        || _n_potr+=_kch
                        ?}
                     ?}
                  ?};
                  _wyn_zfs:=0;
                  {? _r_POD<>'T' & exec('zn_ogr_isplac','lista_licz','P',R.RN)
                  || _wyn_zfs:=exec('wartosc_p_u','lista_licz',P.OSOBA,O.RP,O.MP,'P',R.RN)
                  ?};
                  {? _r_POD<>'T'
                  || _wyn_pom:=_wyn_zfs
                  || _wyn_pom:=_wyn_p1
                  ?};
                  {? _wyn_pom & _par.pod_cons & _par.przychod & (_r_POD='T' | _wyn_zfs)
                  || _all_pod+=_podatek:=(((_wyn_pom-_wyn_zup)/_par.przychod)*_par.pod_cons)$2;
                     {? _par.tab_rub[_ind][3]
                     || _wyn_pod+=_podatek
                     ?}
                  ?};
                  &_wyn_zup;
                  &_wyn_kco;
                  &_wyn_zfs
               ?}
            ?};
            _par.tab_rub[_ind][1].next
         !};
         _w_gore:="roundmet(2); _a$0";
         {? _par.podatek<_all_pod || _all_pod:=_par.podatek ?};
         {? _par.tab_rub[_ind][3]
         || _par.tab_rub[_ind][2]:=_n_potr
         || _par.tab_rub[_ind][2]-=_w_gore(_all_pod)
         ?};
         _par.podatek-=_all_pod
      ?}
   ?}
!};
_w_gore(_wyn_pod)


\liczba_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wyliczenie liczby godzin roboczych w nieobecnosciach rozliczonych listami z miesiaca wedlug parametrow _b i _c
::   WE: _a - atrybut uwzgledniany
::       _b - rok
::       _c - mc
::       [_d] - opcjonalny atrybut wyklucza rubryki zawarte w atrybucie _a
::   WY:   suma godzin
::  OLD: \liczba_godz/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_rub:=__RUB.sys_rub(_a,date(_b,_c,0));
: wykluczenie rubryk z atrybutu _d
{? var_pres('_d')=type_of(0)
|| _bez_rub:=__RUB.sys_rub(_d,date(_b,_c,0));
   {? _bez_rub.first()
   || {!
      |? {? _rub.find_key(_bez_rub.RN) || _rub.del() ?};
         _bez_rub.next()
      !}
   ?}
?};
N.cntx_psh();
N.index('NIEOBECL');
_lista:=('L'+($_b+2)+('00'+$_c+2));
N.prefix('N',P.ref(),_lista);
{? N.first()
|| {!
   |? {? _rub.find_key(N.NB().RN)
      || _wyn+=N.NG
      ?};
      N.next()
   !}
?};
N.cntx_pop();
_wyn


\przychod_U26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Naliczenie przychodu zwolnionego od podatku na podstawie art.21 ust.1 pkt 148 ustawy.
::       Dla współpracowników poniżej 26 roku życia.
::   WE:
::   WY:
::  OLD: \przychod_U26/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=0;
{? O.RP>2021 & var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL
|| __ZW_PRZ.create();
   {? __ZW_PRZ.KOD='' || return(0) ?};
   _limit_p:=__ZW_PRZ.NOM_LIM-__ZW_PRZ.WYK_LIM;
   {? _limit_p>0
   || _wynik:=LICZ.Wylicz(,'.POD')+FUNKCJE.L(779)-FUNKCJE.L_SYS(9021);

::    PR/WRT/XP/23.25/2311/0041 - Naliczanie list pracowników oddelegowanych, ze zwolnionym przychodem
::    i płacących podatki w kraju oddelegowania
::    1021: Przychód opodatkowany zagraniczny
      _oddel_bez_pod:=FUNKCJE.L_SYS(1021);
::    1026: Wynagrodzenia opodatkowane w Polsce, 451: Płaca zasadnicza, 7109: Przychód - wpł. PPK
::    Przychód PPK wędruje do przychodu zagranicznego jeśli przychodu opodat. w polsce i nie ma zasadniczej
      {? _oddel_bez_pod & FUNKCJE.L_SYS(1026)=0 & FUNKCJE.L_SYS(451)=0
      || _oddel_bez_pod+=FUNKCJE.L(7109)
      ?};
      _wynik-=_oddel_bez_pod;

      {? _wynik>_limit_p || _wynik:=_limit_p ?}
   ?}
|| {? exec('czy_ulga_U26','lista_licz',O.D)
   || _wynik:=0;
      _limit_p:=exec('limit_U26','lista_licz',O.RP,O.MP);
      {? _limit_p
      || _wynik:=LICZ.Wylicz(,'.POD')+FUNKCJE.L(779)-FUNKCJE.L_SYS(9021);
         {? _wynik>_limit_p || _wynik:=_limit_p ?}
      ?};
      _wynik
   ?}
?};
_wynik


\oblicz_U26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Obliczenie podatku od pełnego przychodu - bez ulgi. Potrzebny do naliczenia składki na kasę chorych.
::   WE: _a [int] - 1 - wyliczenie dla zdrowotnego: polski ład
::   WY:
::  OLD: \oblicz_U26/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_ZDR:=var_pres('_a')=type_of(0) & _a=1;
{? _ZDR & O.RP<2022 || return(0) ?};
{? ~_ZDR & (FUNKCJE.L(7094)<=0 | FUNKCJE.PL_NEW) || FUNKCJE.LK_SYS(9025,,0); return(0) ?};

{? var_pres('Do_List')>100 || obj_del(Do_List) ?};
Do_List:=obj_new('d1','d2','d3','d5','p1','p2','p3','p4','p5','p6','p7','p8','p14','p15','p16','p17','p18');
{! _ind:=1..obj_len(Do_List)
|! Do_List[_ind]:=0
!};

: wyliczenie wykorzystanych ulg i dochodu narastająco od początku roku
: DoList.p[4],DoList.p[5],DoList.p[6],DoList.p[7],Dolist.p[8] - wyliczone w procedurze "wyk_ul"
Do_List.p14:=DoList.p[4];Do_List.p15:=DoList.p[5];Do_List.p16:=DoList.p[6];Do_List.p17:=DoList.p[7];
Do_List.p18:=DoList.p[8];
DoList.p[4]:=DoList.p[5]:=DoList.p[6]:=0;DoList.p[7]:=DoList.p[8]:=DoList.p[16]:=DoList.p[17]:=0;
exec('wyk_ul_podatek','lista_licz',O.RP,O.MP,P.OSOBA,,1);
Do_List.p4:=DoList.p[4];Do_List.p5:=DoList.p[5];Do_List.p6:=DoList.p[6];Do_List.p7:=DoList.p[7];
Do_List.p8:={? _ZDR || DoList.p[17] || DoList.p[8] ?};
: DoList.p[11] i DoList.p[12] wyliczone w podst_sk jako suma zwolnionego
: dochodu i zaniechanego podatku z umów zleceń
Do_List.p6+=DoList.p[11];  Do_List.p7+=DoList.p[12];

_ZK_doch:=_LT_doch:=0;
{? FUNKCJE.PODATEK
|| {? _ZDR
   || _ZK_doch:=FUNKCJE.LP_SYS(9061)-FUNKCJE.LP_SYS(9063)-FUNKCJE.LP_SYS(90712);
      {? (FUNKCJE.L_SYS(9065)+FUNKCJE.LP_SYS(9065))>0 & (FUNKCJE.L_SYS(9066)+FUNKCJE.LP_SYS(9066))>0
            & exec('last_ls4p','!ppl_pll_nals',P.ref(),O.ref())=0
      || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
            'Nieprawidłowa kolejność obliczeń.\n'
            'Na bieżącej liście płac istnieją naliczenia (związane z innym etatem pracownika),\n'
            'w których uwzględniane były składniki bieżącego etatu.\n'
            'Należy zweryfikować naliczenia dla wszystkich etatów pracownika.'
         )
      ?}
   || {? FUNKCJE.L_SYS(9031)
      || _ZK_doch:=FUNKCJE.LP_SYS(9022)-FUNKCJE.LP_SYS(9024)-FUNKCJE.LP_SYS(9026);
         _LT_doch:=FUNKCJE.LP_SYS(92)-FUNKCJE.LP_SYS(932)
      ?}
   ?};
   Do_List.p8+=FUNKCJE.LP_SYS(9065)+FUNKCJE.LP_SYS(9066)
?};

: *** dochód do obliczenia procentu zaliczki ***
{? Do_List.p8>0
|| Do_List.d1:={? Do_List.p8-Do_List.p4>=0 || Do_List.p8-Do_List.p4 || 0 ?}
|| Do_List.d1:=Do_List.p8
?};

: *** dochód do obliczenia zaliczki ***
{? _ZDR
|| Do_List.d3:=(FUNKCJE.L_SYS(9061)-FUNKCJE.L_SYS(9063)-FUNKCJE.L_SYS(90712)-FUNKCJE.L_SYS(9011)-FUNKCJE.L_SYS(9012)-
      FUNKCJE.L_SYS(9013))$2
|| Do_List.d3:=(FUNKCJE.L_SYS(9022)+FUNKCJE.L_SYS(92)-FUNKCJE.L_SYS(9024)-FUNKCJE.L_SYS(9026)-FUNKCJE.L_SYS(9011)-
      FUNKCJE.L_SYS(9012)-FUNKCJE.L_SYS(9013))$2
?};

: *** dochód zwolniony ***
Do_List.d2:=
   {? Do_List.p4=0 || 0
   |? (Do_List.p4-Do_List.p6)>=Do_List.d3 || Do_List.d3
   |? (Do_List.p4-Do_List.p6)>0 || Do_List.p4-Do_List.p6
   || 0
   ?}$2;
_odl_2:=FUNKCJE.LP_SYS(98);

_p:=_p0:=0;
_ROK:=O.RP;
TP.index('TABPODAT');
{? O.RP>2021
|| _ROK:=2021;
   TP.index('TABPODAT');
   TP.prefix(_ROK);
{? TP.first()
|| _p0:=TP.PR
   || TP.prefix();
      TP.blank();
      TP.R:=2021;
      TP.K1:=0;
      TP.PR:=17;
      TP.add();
      TP.K1:=85528;
      TP.PR:=32;
      TP.add();
      _p0:=17
   ?}
|| TP.prefix(_ROK);
   {? TP.first()
   || _p0:=TP.PR
   ?}
?};

{? _ZDR
|| _dochod_2:=(FUNKCJE.LP_SYS(9061)-FUNKCJE.LP_SYS(9063)-FUNKCJE.LP_SYS(932)-FUNKCJE.LP_SYS(9011)-
      FUNKCJE.LP_SYS(9012)-FUNKCJE.LP_SYS(9013))$2;
   {? P_IPOD.PROC>0
   || _p:=P_IPOD.PROC
   || Do_List.d1+=P_IPOD.PRZYCH
   ?}
|| _dochod_2:=(FUNKCJE.LP_SYS(9022)+FUNKCJE.LP_SYS(92)-FUNKCJE.LP_SYS(9024)-FUNKCJE.LP_SYS(9026)-
      FUNKCJE.LP_SYS(9011)-FUNKCJE.LP_SYS(9012)-FUNKCJE.LP_SYS(9013))$2;
   {? P_IPOD.PROC>0 & (Do_List.d3+FUNKCJE.L_SYS(9022))>0
   || _p:=P_IPOD.PROC
   || Do_List.d1+=P_IPOD.PRZYCH
   ?}
?};

_zw_prog:=_zw_proc:=_zw_pr2:=0;
{? _ZDR
|| _UP:=FUNKCJE.LP_SYS(9062);
   _PD:=FUNKCJE.LP_SYS(9064)
|| _UP:=FUNKCJE.LP_SYS(9025);
   _PD:=FUNKCJE.LP_SYS(9023)
?};
{? FUNKCJE.PODATEK & (FUNKCJE.L_SYS(9031) | (_ZDR & ~_p))
|| {? Do_List.d3>0
   || TP.index('TABPODAT');
      TP.prefix(_ROK);
      {? TP.first()
      || _p0:=TP.PR;
:: DoList.d[1] jest dochód łącznie z listami z bieżącego miesiąca które są pobrane do wyliczeń
         _p:={? TP.find_le(Do_List.d1-(_LT_doch+_ZK_doch)) || TP.PR || _p0 ?};
:: Weryfikacja obniżenia progu
         TP.cntx_psh();
:: Następuje sprawdzenie czy jest kolejny próg podatkowy
         {? TP.next()
         ||
:: Sprawdzenie czy wartości z bieżącego miesiąca przekraczają kolejny próg
            {? Do_List.d1-(_LT_doch+_ZK_doch)>=TP.K1
:: Jeżeli suma narastająca od początku roku z listami bieżącymi oraz zwolniony przychód przekracza próg
:: wtedy cały bieżący dochód jest w kolejnym progu
            || _zw_prog:=Do_List.d3
            |? Do_List.d1+Do_List.d3>TP.K1
:: Jeżeli suma narastająca ze zwolnionym dochodem oraz bieżzącym przzekraczają próg
:: wtedy wartość dochoduu z wyższym progiem jest różnicą tej sumy i wartości progu
            || _zw_prog:=Do_List.d1+Do_List.d3-TP.K1
            ?};
            {? _zw_prog
:: Jeżeli jest wartość w drugim progu to zapamiętaj procent
            || _zw_proc:=TP.PR
            ?}
         || _zw_pr2:=Do_List.d1=TP.K1
         ?};
         TP.cntx_pop()
      || RAPLS.msg('','','','Brak tabeli podatkowej za rok: %1.'@[$_ROK],
            'Należy uzupełnić dane w tabeli podatkowej i ponownie przeliczyć listę płac.'@)
      ?}
   ?}
|| {? (_p:=FUNKCJE.L_SYS(91))=0 | _ZDR
   || TP.index('TABPODAT');
      TP.prefix(_ROK);
      {? TP.first
      || _p0:=TP.PR;
         _p:={? TP.find_le(Do_List.d1) || TP.PR || _p0 ?};
         {? P_IPOD.OP='T' & _p>_p0 || TP.prev; _p:=TP.PR ?};
:: 17 procent podatku od października do grudnia 2019.
         {? O.RP=2019 & (_p=18 | _p=17)
         || {? date(O.RP,O.MP,1)>=date(2019,10,1)
            || _p:=17
            || _p:=18
            ?}
         ?}
      || _p:=
            {? date(O.RP,O.MP,1)>=date(2019,10,1)
            || 17
            |? O.RP>2008
            || 18
            || 19
            ?}
      ?}
   ?}
?};
_ulga_p2:=_UP;
{? _zw_proc
|| _prog_1:=_prog_2:=0;
   {? ~Do_List.d2
   || {? Do_List.d3>_zw_prog
:: Jeśli Na bieżącej liście jest też pierwszy próg
      || _prog_1:=(Do_List.d3+_ZK_doch+_LT_doch-_zw_prog)$2;
         Do_List.p1:=(_prog_1)$0*_p*0.01;
         _prog_2:=_zw_prog;
         Do_List.p1:=Do_List.p1+(_prog_2$0*_zw_proc*0.01)-_UP;
         Do_List.p1-=_PD;
         Do_List.p1:=Do_List.p1$2;
         {? _LT_doch<0
         || _prog_1:=(Do_List.d3+_LT_doch-_zw_prog)$2
         || _prog_1:=(Do_List.d3-_zw_prog)$2
         ?}
:: Jeśli Na bieżącej liście jest tylko drugi próg
      || _prog_1:=(Do_List.d3+_ZK_doch+_LT_doch-_zw_prog)$2;
         Do_List.p1:=_prog_1$0*_p*0.01;
         _prog_2:=_zw_prog;
         Do_List.p1:=Do_List.p1+(_prog_2$0*_zw_proc*0.01)-_UP;
         Do_List.p1-=_PD;
         Do_List.p1:=Do_List.p1$2;
:: Zerowanie wartości dla pierwszego progu dla bieżącej listy
         _prog_1:=0;
:: Wartością drugiego progu jest dochód z bieżącej listy
         _prog_2:=Do_List.d3
      ?}
   || {? (Do_List.d3+_ZK_doch+_LT_doch-Do_List.d2-_zw_prog>=0)
:: Jeśli pierwszy próg jest na tyle duży że może obsłużyć cały dochód zwolniony
      || _prog_1:=(Do_List.d3+_ZK_doch+_LT_doch-Do_List.d2-_zw_prog);
         Do_List.p1:=_prog_1$0*_p*0.01;
         _prog_2:=_zw_prog;
         Do_List.p1:=Do_List.p1+(_prog_2$0*_zw_proc*0.01)-_UP;
         Do_List.p1-=_PD;
         Do_List.p1:=Do_List.p1$2;
         {? _zw_prog>=Do_List.d3
         || _prog_1:=0;
            {? Do_List.d2<=_LT_doch
            || _prog_2:=Do_List.d3
            || _prog_2:=Do_List.d3-(Do_List.d2-_LT_doch)
            ?}
         || {? Do_List.d2<=_LT_doch
            || _prog_1:=Do_List.d3-_zw_prog;
               _prog_2:=_zw_prog
            || _ku_tmp:=(Do_List.d2-_LT_doch);
               _prog_1:=Do_List.d3-_ku_tmp;
               _prog_2:=_zw_prog-Do_List.d2-_ku_tmp
            ?}
         ?}
:: Jeżeli jest jakakolwiek wartość w pierwszym progu należy pobrać  dochód zwolniony do tej wysokości
      || _prog_1:=0;
         _ku_tmp:=Do_List.d2-(Do_List.d3+(_ZK_doch+_LT_doch)-_zw_prog);
         _prog_2:=(_zw_prog-_ku_tmp);
         Do_List.p1:=Do_List.p1+(_prog_2$0*_zw_proc*0.01)-_UP;
         Do_List.p1-=_PD;
         Do_List.p1:=Do_List.p1$2;
         {? _zw_prog>=Do_List.d3
         || {? Do_List.d2<=_LT_doch
            || _prog_2:=Do_List.d3
            || _prog_2:=Do_List.d3-(Do_List.d2-_LT_doch)
            ?}
         || {? Do_List.d2<=_LT_doch
            || _prog_2:=_zw_prog
            || _ku_tmp:=(Do_List.d2-_LT_doch);
               {? Do_List.d3-_ku_tmp>=_zw_prog
               || _prog_2:=_zw_prog
               || _prog_2:=Do_List.d3-_ku_tmp
               ?}
            ?}
         ?}
      ?}
   ?};
:: Zapisywanie do tablicy wartości wykazywanych dla progów podatkowych
   {? _ZDR
   || {? _prog_1>0 || FUNKCJE.LK_SYS(9065,,_prog_1$2) || FUNKCJE.LK_SYS(9065,,,1) ?};
      {? _prog_2>0 || FUNKCJE.LK_SYS(9066,,_prog_2$2) || FUNKCJE.LK_SYS(9066,,,1) ?}
   ?}
|| Do_List.p1:=((((Do_List.d3+_dochod_2-Do_List.d2-_odl_2)$0)*_p*0.01)-_UP)$2;
   Do_List.p1-=_PD;
:: Zapisywanie do tablicy wartości wykazywanych dla progów podatkowych
   {? _ZDR
   || {? _p>_p0
      || FUNKCJE.LK_SYS(9065,,,1);
         {? Do_List.d3>0 || FUNKCJE.LK_SYS(9066,,Do_List.d3) || FUNKCJE.LK_SYS(9066,,,1) ?}
      || FUNKCJE.LK_SYS(9066,,,1);
         {? Do_List.d3>0 || FUNKCJE.LK_SYS(9065,,Do_List.d3) || FUNKCJE.LK_SYS(9065,,,1) ?}
      ?}
   ?}
?};
{? Do_List.p1<0 || Do_List.p1:=0 ?};

{? Do_List.p1 & exec('czy_ulga_podatkowa','lista_licz',O.RP,O.MP,P.OSOBA,1) &
   exec('czy_prac','osoba',P.OSOBA,O.D)<>null()
|| _param:=exec('wartosc','lista_par','BEZ_ULGI');
   _ulga_pod:=
      {? Do_List.p1>0 & P_IPOD.UP<>'B' & (_param=~~ | {? var_pres('_param')=type_of('') || _param='N' ?})
      || {? P_IPOD.UP='Z'
         || exec('oblicz_wsprozl','lista_licz')
         || 1
         ?}*
         {? O.RP>2021
         || 43.76
         || KST.UL
         ?}
      ?};
   _ulga_pod-=_ulga_p2;
   {? _ulga_pod<0 | O.T().T='OTK' || _ulga_pod:=0 ?};
   {? Do_List.p1
   || {? _ulga_pod<Do_List.p1
      || Do_List.p1-=_ulga_pod
      || _ulga_pod:=Do_List.p1; Do_List.p1:=0
      ?}
   ?}
|| _ulga_pod:=0
?};
{? _ZDR || FUNKCJE.LK_SYS(9062,,_ulga_pod) || FUNKCJE.LK_SYS(9025,,_ulga_pod) ?};
:: Przywrócenie wartości tablicy dla prawidłowo wyliczonych ulg
DoList.p[4]:=Do_List.p14;
DoList.p[5]:=Do_List.p15;
DoList.p[6]:=Do_List.p16;
DoList.p[7]:=Do_List.p17;
DoList.p[8]:=Do_List.p18;

_wynik:=Do_List.p1$2;
obj_del(Do_List);
{? _wynik>0 || _wynik ?}


\wyk_ul_U26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Formuła wyliczająca wykorzystane ulgi art. 148
::       uwaga na czwarty argument wywołania - jeśli jest 1 to uwzględniana będzie
::       również bieżąca lista płac (wywołanie z zlecenia\rachunki)
::   WE: _a [int] - rok
::       _b [int] - miesiąc
::       [_c] [null] - OSOBA.ref
::       [_d] [int] - numer ref RH - uruchomione przez procedury obliczajace rachunki ze zleceń
::       [_e] [REFERENCE] - P.ref
::   WY: real - kwota wykorzystanej ulgi
::  OLD: \wyk_ul_U26/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_osoba:={? var_pres('_c')=type_of(null) || _c || OSOBA.ref ?};
_akt_list:={? var_pres('_d')=type_of(0) & _d || _d ?};
_prac:={? var_pres('_e')=type_of(null) || _e || null ?};
_rok:=_a;
_mc:=_b;
_wynik:=0;
_firma:=exec('ref_firma','ustawienia');
_listy:='l'+(-FUNKCJE.ZNLISTY());
RH.cntx_psh;
RH.index('RACHDATA');
RH.prefix(_firma,_osoba,_rok);
O.cntx_psh();
LS.cntx_psh();
KT.cntx_psh;
ZC.cntx_psh;
_rub:=__RUB.sys_rub(9022);
{? RH.first
|| _zlicz:="
      _wyn:=0;
      _tab:=_a;
      {? _tab.first()
      || {!
         |? LS.prefix(RH.ref(),_tab.RN);
            {? LS.first() || {! |? _wyn+=LS.KW; LS.next() !} ?};
            _tab.next()
         !}
      ?};
      _wyn
   ";
   {? var_pres('ZWPOD',RU)>0
   || {!
      |? {? #RH.ref()<>_akt_list
         || {? RH.M<=_mc & RH.ZLE().RU().ZWPOD='T'
            || {? LS.use(RH.O().LT)
               || LS.index('ZLEC');
                  _wynik+=_zlicz(_rub)
               ?}
            ?}
         ?};
         RH.next()
      !}
   ?}
?};
RH.cntx_pop();
ZC.cntx_pop();

_suma:="
   _wyn:=0;
   _tab:=_a;
   _prac:={? var_pres('_d')=type_of(null) || _d || null ?};
   {? _tab.first()
   || {!
      |? LS.prefix(_b,_c,_tab.RN);
         {? LS.first()
         || {!
            |? {? LS.P<>_prac
               || _wyn+=LS.KW
               ?};
               LS.next()
            !}
         ?};
         _tab.next()
      !}
   ?};
   _wyn
";
O.index('LISTYPLP');
{! _ind:=1.._mc-1
|! O.prefix(_firma,'P',_rok,_ind);
   {? O.first
   || {!
      |? _lista:='l'+($O.R+2)+('0'+$O.M+2)+(-O.T().T);
         {? LS.use(_lista)
         || LS.index('OSOBAKOD');
            _wynik+=_suma(_rub,_firma,_osoba)
         ?};
         O.next
      !}
   ?}
!};
{? _akt_list
|| O.prefix(_firma,'P',_rok,_mc);
   {? O.first
   || {!
      |? _lista:='l'+($O.R+2)+('0'+$O.M+2)+(-O.T().T);
         {? LS.use(_lista)
         || LS.index('OSOBAKOD');
            _wynik+=_suma(_rub,_firma,_osoba)
         ?};
         O.next
      !}
   ?}
|| O.prefix(_firma,'P',_rok,_mc);
   _listy1:=_listy2:='';
   {? O.first
   || {!
      |? {? FUNKCJE.CZY_POD()
         || _lista:='l'+($O.R+2)+('0'+$O.M+2)+(-O.T().T);
            {? +_listy1+7>=1024
            || _listy2+=1-_lista
            || _listy1+=1-_lista
            ?};
            {? LS.use(_lista)
            || LS.index('OSOBAKOD');
               {? _listy<>_lista
               || _wynik+=_suma(_rub,_firma,_osoba)
               || _wynik+=_suma(_rub,_firma,_osoba,_prac)
               ?}
            ?}
         ?};
         O.next()
      !}
   ?};
   O.index('LISTYPLA');
   O.prefix(_firma,'P',_rok,_mc);
   {? O.first
   || {!
      |? {? FUNKCJE.CZY_POD()
         || _lista:='l'+($O.R+2)+('0'+$O.M+2)+(-O.T().T);
            {? _listy<>_lista & (_listy1*(1-_lista)=0) & (_listy2*(1-_lista)=0) &
               {? O.RP=_rok || {? O.MP>=_mc || 1 || ~(-O.Z)='N' ?} || 0 ?}
            || {? LS.use(_lista)
               || LS.index('OSOBAKOD');
                  _wynik+=_suma(_rub,_firma,_osoba)
               ?}
            ?}
         ?};
         O.next
      !}
   ?}
?};
O.cntx_pop;
LS.cntx_pop;
KT.cntx_pop;
_wynik


\czy_ulga_U26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Weryfikacja czy należy uznać ulgę z art. 21 ust. 1 pkt 148 dla pracownika. Bufor pracownika musi być ustalony.
::   WE: _a - data badania
::      [_b] - kod płatnika
::   WY:
::  OLD: \czy_ulga_U26/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_data:=_a;
_platnik:={? var_pres('_b')=type_of('') || _b || '' ?};
_rok:=_data~1;
_mc:=_data~2;
_wynik:=0;

{? _rok>2021 & var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL
|| {? P.OSOBA().UR_DATA>=(date(_rok-__ZW_PRZ.WIEK,_mc,{? _mc=2 & _data~3=29 || 0 || _data~3 ?}))
   || _wynik:=~(+exec('os_zwpod_find','overlap',_data,,_platnik,1))
   ?}
|| {? var_pres('ZWPODW',KST)>0 & var_pres('ZWPOD',KST)>0
   || exec('czytaj','#stalesys',_data,KST,'ZWPODW','ZWPOD');
      OS_ZWPOD.cntx_psh();
      OS_ZWPOD.index('OS_ZWPOD');
      OS_ZWPOD.prefix(exec('ref_firma','ustawienia'),P.OSOBA,_rok);
      {? P.OSOBA().UR_DATA>=(date(_rok-KST.ZWPODW,_mc,{? _mc=2 & _data~3=29 || 0 || _data~3 ?}))
      || {? (_rok=2019 & _mc>=8)
         || {? OS_ZWPOD.first() & OS_ZWPOD.D_OB<=_data
            || {? OS_ZWPOD.REZYGN<>'T'
               || _wynik:=1
               ?}
            ?}
         |? _rok>2019
         || {? OS_ZWPOD.first() & OS_ZWPOD.D_OB<=_data
            || {? OS_ZWPOD.REZYGN<>'T'
               || _wynik:=1
               ?}
            || _wynik:=1
            ?}
         ?}
      ?};
      OS_ZWPOD.cntx_pop()
   ?}
?};
_wynik


\limit_U26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wyliczenie wartości ulgi jaka pozostała dla podatnika w roku podatkowym.
::   WE: _a - rok podatkowy
::       _b - miesiąc końcowy
::       _c - #RH.ref numer RH przy uruchomieniu ze zleceń
::   WY: real - wartość pozostałej ulgi
::  OLD: \limit_U26/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:=_a;
_mc:=_b;
_zlec:={? var_pres('_c')=type_of(0) & _c || _c ?};
_wyk:=0;

{? _rok>2021 & var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL & __ZW_PRZ.KOD<>''
|| _wyk:=__ZW_PRZ.WYK_LIM;
   _limit:=__ZW_PRZ.NOM_LIM
|| _limit:=KST.ZWPOD;
   OS_ZWPOD.cntx_psh();
   OS_ZWPOD.index('OS_ZWPOD');
   OS_ZWPOD.prefix(exec('ref_firma','ustawienia'),P.OSOBA,_rok);
   {? OS_ZWPOD.first
   || _wyk+=OS_ZWPOD.PRZYCHOD
   ?};
   OS_ZWPOD.cntx_pop()
?};

{? _limit=0 || return(0) ?};

: wyliczenie wykorzystanych ulg i dochodu narastająco od początku roku
_wyk+=exec('wyk_ul_U26','lista_licz',_rok,_mc,P.OSOBA,_zlec);

{? ~_zlec
|| _rub:=__RUB.sys_rub(9022).RN;
   {? _rub
   || LS.cntx_psh();
      LS.index('PRACNRRU');
      LS.prefix(P.ref,_rub);
      {? LS.first()
      || _wyk-=LS.KW
      ?};
      LS.cntx_pop()
   ?}
?};

_wynik:=_limit-_wyk;
{? _wynik<0 || _wynik:=0 ?};
_wynik


\KU_U26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wyliczenie prawdopodobnych KU dla pracowników poniżej 26 roku życia.
::   WE:
::   WY:
::  OLD: \KU_U26/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUNKCJE.PL_NEW || return(0) ?};
{? FUNKCJE.L_SYS(9022)
|| _skl_prac:=FUNKCJE.L(765,767);
   _l:=FUNKCJE.L(780)-FUNKCJE.L_SYS(551)-FUNKCJE.L_SYS(32)+_skl_prac+FUNKCJE.L_SYS(9022)-FUNKCJE.L_SYS(9026);
   _param:=exec('wartosc','lista_par','BEZ_KU');
   {? _l>0 & P_IPOD.KU<>'B' & (_param=~~ | {? var_pres('_param')=type_of('') || _param='N' ?})
   || _ku:={? P_IPOD.KU='Z' & ({? O.RP>2022 || exec('jest_prac','obiegi',P.ref(),O.D,1) || 1 ?})
           || KST.KUZ
           || KST.KU
           ?};

      _n_zysk:=FUNKCJE.L_SYS(73);
      {? _n_zysk>0
      || _brutto:=FUNKCJE.L(500);
         {? FUNKCJE.L_SYS(710) & _brutto>0
         || _l-=_n_zysk/_brutto*FUNKCJE.L_SYS(724)$2
         ?}
      ?};
      {? _l>0
      || _ku-=FUNKCJE.LP(__RUB.sys_kod(9024),,,,1);
         {? _ku<0 || _ku:=0 ?};
         {? _l<_ku
         || _l
         || _ku
         ?}
      ?}
   ?}
?}


\zp_skl_U26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.51]
:: OPIS: Wyliczenie składek społecznych od zwolnionego przychodu
::   WE:
::   WY:
::  OLD: \zp_skl_U26/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_zp_prz:=FUNKCJE.L_SYS(9022);
{? _zp_prz
|| _kw_zw:=0;
   {? __RUB.sys_attr(650,9021)
   || _kw_zw:=FUNKCJE.L(650)-FUNKCJE.L(7018)-FUNKCJE.L(7071)
   ?};
   _zw_prz:=exec('skl_bez_odlicz','lista_licz');
   R.cntx_psh();
   R.prefix();

   _rub_zw:=__RUB.sys_rub(9021,O.D);
   {? _rub_zw.first
   || {!
      |? {? R.seek(_rub_zw.R,)
         || {? R.POD='T' & R.ZUS='N'
            || _kw_zw+=FUNKCJE.L(_rub_zw.RN)
            ?}
         ?};
         _rub_zw.next
      !}
   ?};
   R.cntx_pop();
   _skl:=FUNKCJE.L_SYS(512)+FUNKCJE.L_SYS(522)+FUNKCJE.L_SYS(532);
   _prz_pod:=LICZ.Wylicz(,'.POD')+FUNKCJE.L(779)-_kw_zw;
   _zp_skl:=0;
   {? _zp_prz=_prz_pod
   || _zp_skl:=_skl-_zw_prz
   || _pod_e_r:=FUNKCJE.L_SYS(511);

      _pod_chw:=FUNKCJE.L_SYS(531);
      _blokada:=_pod_chw>_pod_e_r;

      R.cntx_psh();
      R.prefix();
      _rub_br:=__RUB.sys_rub(48);
      _ZUS_np:=0;
      {? R.first
      || {!
         |? {? R.RN>500 & R.ZUS='T' & R.POD='N' & ~_rub_br.find_key(R.RN)
            || _ZUS_np+=FUNKCJE.L(R.RN)
            ?};
            R.next
         !}
      ?};
      R.cntx_pop();

      _P_CHW:=FUNKCJE.L_SYS(531)-_ZUS_np+FUNKCJE.L_SYS(9017);
      _P_POD:=_prz_pod;
      _wsp_ZP:={? _P_POD || _P_CHW/_P_POD || 1 ?};
      {? _wsp_ZP>1 || _wsp_ZP:=1 ?};
      _Pzus_ZP:=_zp_prz*_wsp_ZP$2;
      _zp_skl:=(_Pzus_ZP*KST.PRFC/100)$2;
      {? _blokada
      || {? _pod_e_r
         || {? _Pzus_ZP>_pod_e_r || _Pzus_ZP:=_pod_e_r ?};
            _zp_skl+=(_Pzus_ZP*KST.PRFRP/100)$2;
            _zp_skl+=(_Pzus_ZP*KST.PRFE/2/100)$2
         ?}
      || _zp_skl+=(_Pzus_ZP*KST.PRFRP/100)$2;
         _zp_skl+=(_Pzus_ZP*KST.PRFE/2/100)$2
      ?}
   ?};
   {? _zp_skl>_skl
   || _skl
   || _zp_skl
   ?}
?}


\skladka_zdrowotna
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [19.22]
:: OPIS: Wyliczenie składek ub. zdrowotnego
::   WE:
::   WY:
::  OLD: \skl_zdr/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_dt:=date(O.RP,O.MP,1);_kc1:=_kc2_zp:=0;kc2:=kc3:=kc4:=0;
{? FUNKCJE.PL_NEW
|| _kckor:=_kcp:=_kcpo:=FUNKCJE.L(791);
   _kcpop:=DoList.k[17]+FUNKCJE.LP(7020)-DoList.k[18]-FUNKCJE.LP(7021);
   _kcbiez:=_kcpo-DoList.k[17]+DoList.k[18];
   _kcpp:=FUNKCJE.LP(791);
   {? _kcp<>0 | _kcpp<>0
   || _kcp+=_kcpp+DoList.k[4];
      DoList.m[4]:=exec('kor_skl_kor_zus','lista_licz',0,0,_kckor,1);
      _kch_p:=FUNKCJE.LP(792)-FUNKCJE.LP(7025);
      {? DoList.m[4]
      || _kc1:=exec('kor_licz','!ppl_pll_nals',792)
      || _kc_k_p:=exec('kor_ikor_kor_zus','lista_licz',792,1,O.MU,'L'+FUNKCJE.ZNLISTY(),O.RU,1);
         _kc_k_s:=exec('kor_ikor_kor_zus','lista_licz',792,2,O.MU,'L'+FUNKCJE.ZNLISTY(),O.RU,1);
         _kc1:=(((_kcp+_kc_k_p)*KST.PRKC*0.01)$2-_kch_p-_kc_k_s-DoList.k[9])$2
      ?};
::    398: Personel: Naliczanie składki zdrowotnej dla pracownika oddelegowanego płacącego ZUS w Polsce
::         a podatki za granicą - zgodnie z interpretacją ZUS.
      {? _kc1
      || {? ~exec('h_odde_prop','oddelegowanie',1,,date(O.R,O.M,1),date(O.R,O.M,0),1) |
            ~exec('czy_par_t','parametr',398)
         || _kcpo+=_kcpp+DoList.k[11]-_kcpop;
::    ustalenie kwoty przychodu do 50% dla składników, które nie podlegają ubezp. zdrowotnego
            _zm_PPA:=exec('zmn_PA_do_KC','lista_licz');
            _podobn:=exec('progi_zaliczki','lista_licz',
               _kcpo-DoList.k[11],
               FUNKCJE.L_SYS(9063)+FUNKCJE.LP_SYS(9063)+FUNKCJE.L_SYS(932)+FUNKCJE.LP_SYS(932)-_zm_PPA,
               FUNKCJE.L_SYS(9062)+FUNKCJE.LP_SYS(9062),,1);
            _podobn-=(FUNKCJE.LP_SYS(57411));
            _podobn:={? _podobn<0 || 0 || _podobn ?};
            _kc1:={? _podobn<_kc1 || _podobn || _kc1 ?};
            _pod_poz:=FUNKCJE.LP_SYS(9064);
            _podnom:=FUNKCJE.L_SYS(9064);
            {? _podnom+_pod_poz-_kch_p<_kc1
            || _kc1:=_podnom+_pod_poz-_kch_p
            ?}
         ?}
      ?}
   ?}
|? O.RP<2022
|| _POZ_ALL:=FUNKCJE.LP_SYS(9023);
   _POZ_ONE:=FUNKCJE.L_SYS(9023);
   _POZ_ASK:=DoList.k[22] | FUNKCJE.L_SYS(9022) | FUNKCJE.LP_SYS(9022);
   _kckor:=_kcp:=_kcpo:=FUNKCJE.L(791);
   _kcpop:=DoList.k[17]+FUNKCJE.LP(7020)-DoList.k[18]-FUNKCJE.LP(7021);
   _kcbiez:=_kcpo-DoList.k[17]+DoList.k[18];
   _kcpp:=FUNKCJE.LP(791);
   {? _kcp<>0 | _kcpp<>0
   || _kcp+=_kcpp+DoList.k[4];
      DoList.m[4]:=exec('kor_skl_kor_zus','lista_licz',0,0,_kckor,1);
      _kch_p:=FUNKCJE.LP(792)-FUNKCJE.LP(7025);
      {? DoList.m[4]
      || _kc1:=exec('kor_licz','!ppl_pll_nals',792)
      || _kc_k_p:=exec('kor_ikor_kor_zus','lista_licz',792,1,O.MU,'L'+FUNKCJE.ZNLISTY(),O.RU,1);
         _kc_k_s:=exec('kor_ikor_kor_zus','lista_licz',792,2,O.MU,'L'+FUNKCJE.ZNLISTY(),O.RU,1);
         _kc1:=(((_kcp+_kc_k_p)*KST.PRKC*0.01)$2-_kch_p-_kc_k_s-DoList.k[9])$2
      ?};
      {? _kc1
      || _kcpo+=_kcpp+DoList.k[11]-_kcpop;
::    ustalenie kwoty przychodu do 50% dla składników, które nie podlegają ubezp. zdrowotnego
         _zm_PPA:=exec('zmn_PA_do_KC','lista_licz');
         {? _POZ_ASK
         || _KU:=FUNKCJE.L_SYS(9024)+FUNKCJE.LP_SYS(9024);
            {? ~_KU || _KU:=FUNKCJE.L_SYS(93)+FUNKCJE.LP_SYS(93)-_zm_PPA ?};
            _UP:=FUNKCJE.L_SYS(9025)+FUNKCJE.LP_SYS(9025);
            {? ~_UP || _UP:=FUNKCJE.L_SYS(94)+FUNKCJE.LP_SYS(94) ?};
            _podobn:=exec('progi_zaliczki','lista_licz',_kcpo-DoList.k[11],_KU,_UP);
            _podobn-=FUNKCJE.LP_SYS(57411);
            _podobn:={? _podobn<0 || 0 || _podobn ?};
            _kc1:={? _podobn<_kc1 || _podobn || _kc1 ?};
            _pod_poz:=FUNKCJE.LP(797);
            {? _POZ_ONE=0
            || _POZ_ONE:=FUNKCJE.L(790)+FUNKCJE.LP(790)
            ?};
            {? _POZ_ALL+_POZ_ONE-_kch_p<_kc1
            || _kc1:=_POZ_ALL+_POZ_ONE-_kch_p
            ?};
:: wyliczenie składek na ubzp. zdrowotne od zwolnionego przychodu

            _ubz_inn:=FUNKCJE.LP_SYS(56411)+FUNKCJE.LP_SYS(5711)+FUNKCJE.LP_SYS(57210);
            {? DoList.k[22]>0
            || _ubz_inn+=DoList.k[20]; 'zlecenia'
            ?};

            _pod_inn:=FUNKCJE.LP_SYS(9022)-FUNKCJE.LP_SYS(9026)+FUNKCJE.LP_SYS(92)+FUNKCJE.LP_SYS(5711);
            _pod_inn+=FUNKCJE.LP_SYS(57210);
            {? DoList.k[22]>0
            || _pod_inn+=DoList.k[21]; 'zlecenia'
            ?};
            {? _pod_inn>FUNKCJE.LP_SYS(9022)+DoList.k[23]
            || _ogranicz:=1
            || _ogranicz:=0
            ?};
            _pod_inn-=FUNKCJE.LP_SYS(9021);
            {? _ogranicz
            || _wsp:={? _pod_inn || _ubz_inn/_pod_inn ?};
               _wsp:={? _wsp>1 || 1 |? _wsp<0 || 0 || _wsp ?};

               _kc_zpin:=FUNKCJE.LP_SYS(9022)-FUNKCJE.LP_SYS(9026);
               _kc_zpin+=DoList.k[22]; 'zlecenia';
               _kc_zpin:=(_kc_zpin*_wsp)$2
            || {? _pod_inn || _kc_zpin:=DoList.k[11]+_kcpp || _kc_zpin:=0 ?}
            ?};

            _zw_prz:=exec('skl_bez_odlicz','lista_licz');
            _do_ulg:=FUNKCJE.L_SYS(9022)-FUNKCJE.L_SYS(9026)+FUNKCJE.L_SYS(92)+FUNKCJE.L_SYS(5711)+FUNKCJE.L_SYS(57210);

:: ustalenie udziału podstawy kasy chorych w ZP: Przychod
:: składki od zwolnionych przychodow nie podlegają odliczeniom

            {? _do_ulg>FUNKCJE.L_SYS(9022)
            || _ogranicz:=1
            || _ogranicz:=0
            ?};
            _do_ulg-=(FUNKCJE.L_SYS(9021)+_zw_prz);
            {? _ogranicz
            || _kc_zp:=FUNKCJE.L_SYS(9022);
               _pom:=FUNKCJE.L_SYS(56411);
               _ubz:={? _pom<>0 || _pom+FUNKCJE.L_SYS(5711)+FUNKCJE.L_SYS(57210)-DoList.k[17] ?};
               _wsp:={? _do_ulg || _ubz/_do_ulg ?};
               _wsp:={? _wsp>1 || 1 |? _wsp<0 || 0 || _wsp ?};
               _kc_zp-=FUNKCJE.L_SYS(9026);
               _kc_zp:=(_kc_zp*_wsp)$2;
               {? _kc_zp>_kcbiez || _kc_zp:=_kcbiez ?}
            || _kc_zp:=_kcbiez
            ?};

            kc3:=(((_kc_zp+_kc_zpin)*KST.PRKO*0.01)$2)-FUNKCJE.LP_SYS(9027)-DoList.k[19];
            {? _kc1<0 & kc3<0
            || kc3:={? |_kc1<|kc3 || _kc1 || kc3 ?}
            || kc3:={? _kc1<kc3 || _kc1 || kc3 ?}
            ?};

:: podatek naliczony w ujeciu miesiecznym po odjeciu obliczonych skladek, ktore nie podlegajacych odliczeniu
            _po_zp:=exec('progi_zaliczki','lista_licz',_kcpo-DoList.k[11],_KU,_UP);
            _po_zp-=(FUNKCJE.LP_SYS(57412)+FUNKCJE.LP_SYS(9027)+kc3);
            _po_zp:={? _po_zp<0 || 0 || _po_zp ?};
:: składki po odjeciu skladek niepodlgejacych odliczeniu pochodzących z podstawy z ZP: Przychod
:: DoList.k[19] - zawiera składki od ZP: Przychod dla zlecen
            _pom1:=((_kcpo)*KST.PRKO*0.01)$2-FUNKCJE.LP(793)-DoList.k[10]-FUNKCJE.LP_SYS(9027)-DoList.k[19];
            _pom1-=kc3;
            {? _pom1>_po_zp || _pom1:=_po_zp ?};

:: odliczenie nie może przekroczyć 7,75 % procenta podstawy
            _pom2:=((_kcpo)*KST.PRKO*0.01)$2-FUNKCJE.LP(793)-DoList.k[10];

:: odliczenie nie może przekroczyć 7,75 % procenta podstawy
            kc2:={? _pom1>_pom2 || _pom2 || _pom1 ?};
:: odliczenie nie może byc wyższe nie podatek naliczony od podstawy
            kc2:={? _po_zp<kc2 || _po_zp || kc2 ?};
            {? kc2<0 || kc2:=0 ?}

         || _podobn:=exec('progi_zaliczki','lista_licz',_kcpo-DoList.k[11],FUNKCJE.L_SYS(93)+FUNKCJE.LP_SYS(93)-_zm_PPA,
               FUNKCJE.L_SYS(94)+FUNKCJE.LP_SYS(94));
            _podobn-=FUNKCJE.LP_SYS(57411);
            _podobn:={? _podobn<0 || 0 || _podobn ?};
            {? ~FUNKCJE.L(7081)
            || _kc1:={? _podobn<_kc1 || _podobn || _kc1 ?}
            ?};
            _pod_poz:=FUNKCJE.LP(797);
            kc2:={? date(2003,1,1)<=_dt
                 || (_kcpo*KST.PRKO*0.01)$2-FUNKCJE.LP(793)-DoList.k[10]
                 || _kc1
                 ?};
            _podnom:=FUNKCJE.LP(790)+FUNKCJE.L(7081);
            {? _podnom+DoList.p[1]-_kch_p<_kc1
            || _kc1:=_podnom+DoList.p[1]-_kch_p
            ?};
            kc2:={? _podobn<kc2 || _podobn || kc2 ?};
            {? _kc1<0 & kc2<0
            || kc2:={? |_kc1<|kc2 || _kc1 || kc2 ?}
            || kc2:={? _kc1<kc2 || _kc1 || kc2 ?}
            ?}
         ?};
         {? _pod_poz+DoList.p[1]>=kc2
         || DoList.p[1]-=kc2
         || kc2:=_pod_poz+DoList.p[1];
            DoList.p[1]:=_pod_poz*(-1)
         ?}
      ?}
   ?}
|| _kckor:=_kcp:=_kcpo:=FUNKCJE.L(791);
   _kcpop:=DoList.k[17]+FUNKCJE.LP(7020)-DoList.k[18]-FUNKCJE.LP(7021);
   _kcbiez:=_kcpo-DoList.k[17]+DoList.k[18];
   _kcpp:=FUNKCJE.LP(791);
   _POZ_ALL:=FUNKCJE.LP_SYS(9023);
   _POZ_ONE:=FUNKCJE.L_SYS(9023);
   _POZ_ASK:=DoList.k[22] | FUNKCJE.L_SYS(9022) | FUNKCJE.LP_SYS(9022);
   {? _kcp<>0 | _kcpp<>0
   || _kcp+=_kcpp+DoList.k[4];
      DoList.m[4]:=exec('kor_skl_kor_zus','lista_licz',0,0,_kckor,1);
      _kch_p:=FUNKCJE.LP(792)-FUNKCJE.LP(7025);
      {? DoList.m[4]
      || _kc1:=exec('kor_licz','!ppl_pll_nals',792)
      || _kc_k_p:=exec('kor_ikor_kor_zus','lista_licz',792,1,O.MU,'L'+FUNKCJE.ZNLISTY(),O.RU,1);
         _kc_k_s:=exec('kor_ikor_kor_zus','lista_licz',792,2,O.MU,'L'+FUNKCJE.ZNLISTY(),O.RU,1);
         _kc1:=(((_kcp+_kc_k_p)*KST.PRKC*0.01)$2-_kch_p-_kc_k_s-DoList.k[9])$2
      ?};
::    398: Personel: Naliczanie składki zdrowotnej dla pracownika oddelegowanego płacącego ZUS w Polsce
::         a podatki za granicą - zgodnie z interpretacją ZUS.
      {? _kc1
      || {? ~exec('h_odde_prop','oddelegowanie',1,,date(O.R,O.M,1),date(O.R,O.M,0),1) |
            ~exec('czy_par_t','parametr',398)
         || _kcpo+=_kcpp+DoList.k[11]-_kcpop;
::    ustalenie kwoty przychodu do 50% dla składników, które nie podlegają ubezp. zdrowotnego
            _zm_PPA:=exec('zmn_PA_do_KC','lista_licz');
            _podobn:=exec('progi_zaliczki','lista_licz',
               _kcpo-DoList.k[11],
               FUNKCJE.L_SYS(9063)+FUNKCJE.LP_SYS(9063)+FUNKCJE.L_SYS(932)+FUNKCJE.LP_SYS(932)-_zm_PPA,
               FUNKCJE.L_SYS(9062)+FUNKCJE.LP_SYS(9062),,1);
            _podobn-=(FUNKCJE.LP_SYS(57411));
            _podobn:={? _podobn<0 || 0 || _podobn ?};

            _kc1:={? _podobn<_kc1 || _podobn || _kc1 ?};
            _pod_poz:=FUNKCJE.LP_SYS(9064);
            _podnom:=FUNKCJE.L_SYS(9064);
            {? _podnom+_pod_poz-_kch_p<_kc1
            || _kc1:=_podnom+_pod_poz-_kch_p
            ?};
            _kc1_tmp:=_kc1;
            {? _POZ_ASK
            || _KU:=FUNKCJE.L_SYS(9024)+FUNKCJE.LP_SYS(9024);
               {? ~_KU || _KU:=FUNKCJE.L_SYS(9071)+FUNKCJE.LP_SYS(9071)-_zm_PPA ?};
               _UP:=FUNKCJE.L_SYS(9025)+FUNKCJE.LP_SYS(9025);
               {? ~_UP || _UP:=FUNKCJE.L_SYS(9072)+FUNKCJE.LP_SYS(9072) ?};
               _podobn2:=exec('progi_zaliczki','lista_licz',_kcpo-DoList.k[11],_KU,_UP);
               _podobn2-=(FUNKCJE.LP_SYS(57411));
               _podobn2:={? _podobn2<0 || 0 || _podobn2 ?};
               _kc1_tmp:={? _podobn2<_kc1_tmp || _podobn2 || _kc1_tmp ?};
               _pod_poz2:=FUNKCJE.LP(7171);
               {? _POZ_ONE=0
               || _POZ_ONE:=FUNKCJE.L(7177)+FUNKCJE.LP(7177)
               ?};
               {? _POZ_ALL+_POZ_ONE-_kch_p<_kc1_tmp
               || _kc1_tmp:=_POZ_ALL+_POZ_ONE-_kch_p
               ?};
:: wyliczenie składek na ubzp. zdrowotne od zwolnionego przychodu

               _ubz_inn:=FUNKCJE.LP_SYS(56411)+FUNKCJE.LP_SYS(5711)+FUNKCJE.LP_SYS(57210);
               {? DoList.k[22]>0
               || _ubz_inn+=DoList.k[20]; 'zlecenia'
               ?};

               _pod_inn:=FUNKCJE.LP_SYS(9022)-FUNKCJE.LP_SYS(9026)+FUNKCJE.LP_SYS(92)+FUNKCJE.LP_SYS(5711)+FUNKCJE.LP_SYS(57210);
               {? DoList.k[22]>0
               || _pod_inn+=DoList.k[21]; 'zlecenia'
               ?};
               {? _pod_inn>FUNKCJE.LP_SYS(9022)+DoList.k[23]
               || _ogranicz:=1
               || _ogranicz:=0
               ?};
               _pod_inn-=FUNKCJE.LP_SYS(9021);
               {? _ogranicz
               || _wsp:={? _pod_inn || _ubz_inn/_pod_inn ?};
                  _wsp:={? _wsp>1 || 1 |? _wsp<0 || 0 || _wsp ?};

                  _kc_zpin:=FUNKCJE.LP_SYS(9022)-FUNKCJE.LP_SYS(9026);
                  _kc_zpin+=DoList.k[22]; 'zlecenia';
                  _kc_zpin:=(_kc_zpin*_wsp)$2
               || {? _pod_inn || _kc_zpin:=DoList.k[11]+_kcpp || _kc_zpin:=0 ?}
               ?};

               _zw_prz:=exec('skl_bez_odlicz','lista_licz');
            _do_ulg:=FUNKCJE.L_SYS(9022)-FUNKCJE.L_SYS(9026)+FUNKCJE.L_SYS(92)+FUNKCJE.L_SYS(5711)+FUNKCJE.L_SYS(57210);

:: ustalenie udziału podstawy kasy chorych w ZP: Przychod
:: składki od zwolnionych przychodow nie podlegają odliczeniom

               {? _do_ulg>FUNKCJE.L_SYS(9022)
               || _ogranicz:=1
               || _ogranicz:=0
               ?};
               _do_ulg-=(FUNKCJE.L_SYS(9021)+_zw_prz);
               {? _ogranicz
               || _kc_zp:=FUNKCJE.L_SYS(9022);
                  _pom:=FUNKCJE.L_SYS(56411);
                  _ubz:={? _pom<>0 || _pom+FUNKCJE.L_SYS(5711)+FUNKCJE.L_SYS(57210)-DoList.k[17] ?};
                  _wsp:={? _do_ulg || _ubz/_do_ulg ?};
                  _wsp:={? _wsp>1 || 1 |? _wsp<0 || 0 || _wsp ?};
                  _kc_zp-=FUNKCJE.L_SYS(9026);
                  _kc_zp:=(_kc_zp*_wsp)$2;
                  {? _kc_zp>_kcbiez || _kc_zp:=_kcbiez ?}
               || _kc_zp:=_kcbiez
               ?};

               kc3:=(((_kc_zp+_kc_zpin)*7.75*0.01)$2)-FUNKCJE.LP_SYS(9027)-DoList.k[19];
               {? _kc1_tmp<0 & kc3<0
               || kc3:={? |_kc1_tmp<|kc3 || _kc1_tmp || kc3 ?}
               || kc3:={? _kc1_tmp<kc3 || _kc1_tmp || kc3 ?}
               ?};

:: podatek naliczony w ujeciu miesiecznym po odjeciu obliczonych skladek, ktore nie podlegajacych odliczeniu
               _po_zp:=exec('progi_zaliczki','lista_licz',_kcpo-DoList.k[11],_KU,_UP);
               _po_zp-=(FUNKCJE.LP_SYS(57412)+FUNKCJE.LP_SYS(9027)+kc3);
               _po_zp:={? _po_zp<0 || 0 || _po_zp ?};
:: składki po odjeciu skladek niepodlgejacych odliczeniu pochodzących z podstawy z ZP: Przychod
:: DoList.k[19] - zawiera składki od ZP: Przychod dla zlecen
               _pom1:=((_kcpo)*7.75*0.01)$2-FUNKCJE.LP_SYS(9067)-DoList.k[10]-FUNKCJE.LP_SYS(9027)-DoList.k[19];
               _pom1-=kc3;
               {? _pom1>_po_zp || _pom1:=_po_zp ?};

:: odliczenie nie może przekroczyć 7,75 % procenta podstawy
               _pom2:=((_kcpo)*7.75*0.01)$2-FUNKCJE.LP_SYS(9067)-DoList.k[10];

:: odliczenie nie może przekroczyć 7,75 % procenta podstawy
               _kc2_zp:={? _pom1>_pom2 || _pom2 || _pom1 ?};
:: odliczenie nie może byc wyższe nie podatek naliczony od podstawy
               _kc2_zp:={? _po_zp<_kc2_zp || _po_zp || _kc2_zp ?};
               {? _kc2_zp<0 || _kc2_zp:=0 ?};

               {? _pod_poz2+FUNKCJE.L(7177)<_kc2_zp
               || _kc2_zp:=_pod_poz2+FUNKCJE.L(7177)
               ?};
               kc4:=_kc2_zp
         || _kc2:=(_kcpo*7.75*0.01)$2-FUNKCJE.LP_SYS(9067)-DoList.k[10];
               _podobn:=exec('progi_zaliczki','lista_licz',
               _kcpo-DoList.k[11],
               FUNKCJE.L_SYS(90711)+FUNKCJE.LP_SYS(90711)+FUNKCJE.L_SYS(90712)+FUNKCJE.LP_SYS(90712)-_zm_PPA,
               FUNKCJE.L_SYS(9072)+FUNKCJE.LP_SYS(9072),,1);
               _podobn-=(FUNKCJE.LP_SYS(9067));
               _podobn:={? _podobn<0 || 0 || _podobn ?};
               _kc2:={? _podobn<_kc2 || _podobn || _kc2 ?};
               {? exec('spr_kor_pod','lista_licz',O.RP,O.MP)
               || kc4:=_kc2
               || {? _kc1<0 & _kc2<0
                  || _kc2:={? |_kc1<|_kc2 || _kc1 || _kc2 ?}
                  || _kc2:={? _kc1<_kc2 || _kc1 || _kc2 ?}
                  ?};
                  kc4:=_kc2
               ?}
            ?}
         ?}
      ?}
   ?}
?};
{? FUNKCJE.L_SYS(92)=0 || kc4:=0 ?};
_kc1+FUNKCJE.L(7025)


\ekwiwalent
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Na podstawie danych w H_UM_EKW i H_UM_ESK wylicza kwotę ekwiwalentu za urlop.
::   WE: _a _H_UM - wskazanie wiersza w tabeli H_UM
::       _b INTEGER - tryb wyliczenia: 1 uwzględniaj korekty, wpp przelicz ponownie
::   WY: kwota wyliczonego ekwiwalentu lub ~~ w przypadku braku niezbędnych informacji
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_h_um:=_a;
_tryb:=(var_pres('_b')=type_of(0) & _b<>0);

_lmc:=_olm:=_odp:=_odn:=0;
_wym:=_wsp:=0;
_ed4:=_ed5:=_ed6:=0;
_l72:=_ngk:=_opr:=0;

_kwZ:=_kwN:=_kwS:=_kwO:=0;

:: kwoty do wyliczeń
H_UM_EKW.cntx_psh();
H_UM_EKW.index('UNIQUE');
H_UM_EKW.prefix(_h_um);
{? _tryb<>0 & ~H_UM_EKW.find_tab(,'ZMIANA',,'=','T')
:: czy jest jakakolwiek korekta?
|| H_UM_EKW.cntx_pop();
   return()
?};
_loop:=H_UM_EKW.first();
{!
|? _loop
|! _k:=H_UM_EKW.K;
   {? _k='Z' || _kwZ+=H_UM_EKW.KW
   |? _k='N' || _kwN+=H_UM_EKW.KW
   |? _k='S' || _kwS+=H_UM_EKW.KW
   |? _k='O' || _kwO+=H_UM_EKW.KW
   ?};
   _loop:=H_UM_EKW.next()
!};
H_UM_EKW.cntx_pop();

:: wartości do wyliczeń
H_UM_ESK.cntx_psh();
H_UM_ESK.index('UNIQUE');
H_UM_ESK.prefix(_h_um,'I');
_loop:=H_UM_ESK.first();
{!
|? _loop
|! _s:=H_UM_ESK.S;
   {? _s='LMC' || _lmc:=H_UM_ESK.KW
   |? _s='WYM' || _wym:=H_UM_ESK.KW
   |? _s='WSP' || _wsp:=H_UM_ESK.KW
   |? _s='ED4' || _ed4:=H_UM_ESK.KW
   |? _s='ED5' || _ed5:=H_UM_ESK.KW
   |? _s='ED6' || _ed6:=H_UM_ESK.KW
   |? _s='L72' || _l72:=H_UM_ESK.KW
   |? _s='NGK' || _ngk:=H_UM_ESK.KW
   |? _s='OLM' || _olm:=H_UM_ESK.KW
   |? _s='ODP' || _odp:=H_UM_ESK.KW
   |? _s='ODN' || _odn:=H_UM_ESK.KW
   ?};
   _loop:=H_UM_ESK.next()
!};
H_UM_ESK.cntx_pop();

:: czy dalsze wyliczenia mają sens?
{? _wym=0 | _wsp=0 | _ngk=0
|| return()
?};

:: dla zapisu informacji o cząstkowych wyliczeniach
_buf:=exec('ekwiwalent_bpom','lista_licz');
:: ustaw wspólne wartości
_buf.H_UM:=_h_um;
_buf.K:='I';
_buf.R:=0;
_buf.M:=0;
_buf.LT:='';

_ret:=_kwZ;

{? _lmc>0
|| {? _ed4>0
   || {? _ed5<>0
      || _ret:=_ret/_ed4*(_ed4+_ed5-_ed6)$2;
         _buf.zapisz('PRZ',,_ret)
      ?};
      _ret:=(_ret/_lmc)$2;
      _buf.zapisz('MCZ',,_ret)
   || _ret:=0
   ?};
   _kwN:=(_kwN/_lmc)$2;
   _buf.zapisz('MCN',,_ret)
?};

{? _olm>0
|| {? _odp>0 & exec('test_par','parametr',280,'T')
   || _opr:=_kwO*_odn/_odp$2;
      _buf.zapisz('OAU',,_opr)
   || _opr:=_kwO;
      _buf.zapisz('OAU',,0)
   ?};
   _opr:=_opr/_olm$2;
   _buf.zapisz('OPR',,_opr)
?};
_ret+=_opr;
_ret+=_kwN;
_buf.zapisz('DSN',,_ret);

_ret+=_kwS;
_buf.zapisz('DSS',,_ret);

_ret:=(_ret/(_wsp*_wym))$2;
_buf.zapisz('EWS',,_ret);

_kng:=(_ret/_ngk)$2;
_buf.zapisz('KNG',,_kng);

_ret:=_kng*_l72$2;
_buf.zapisz('RET',,_ret);

_ret$2


\ekwiwalent_zapo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Zapisuje kwoty uwzględniane w wyliczeniu podstawy ekwiwalentu za niewykorzystany urlop do tabeli H_UM_EKW.
::   WE: _a [_H_UM]  - wskazanie wiersza w tabeli H_UM
::       _b [STRING] - typ zapisów: Z mienne, N nominalne, S stałe, O okresowe
::       _c [OBJECT] - wskazanie obiektu klasy PNIEO
::       _d [NUMBER] - rzeczywista liczba zakwalifikowanych miesięcy
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=null
|| return()
?};

:: mapa argumentów
_um:=_a;
_kl:=_b;
_pn:=_c;
_lmc:=_d;

H_UM_EKW.cntx_psh();
exec('otworz_h_um','pracownik',_um);
H_UM_EKW.index('UNIQUE');
H_UM_EKW.prefix(_um,_kl);
{? H_UM_EKW.first()
|| {!
   |? H_UM_EKW.del()
   !}
?};

:: Wartości do utrwalenia przechowywane są w tablicy Mc o wskazaniu przechowywanym w pierwszej komórce tablicy Array
:: w obiekcie klasy PNIEO. Dla wyliczeń podstawy ekwiwalentu za urlop rozmiar Array jest zawsze 1, rozmiar Mc może być
:: 3 lub 12. Wyliczenia mogą jednak pochodzić z mniejszej liczby miesięcy (_d).
_zd:=date(0,0,0);
_mc:=_pn.Array[1].Mc;
{! _ii:=1.._lmc
|! {? _mc[_ii].Data<>_zd
   || H_UM_EKW.blank(1);
      H_UM_EKW.H_UM:=_um;
      H_UM_EKW.K:=_kl;
      H_UM_EKW.R:=_mc[_ii].Data~1;
      H_UM_EKW.M:=_mc[_ii].Data~2;
      H_UM_EKW.NORMA:=_mc[_ii].Norma;
      H_UM_EKW.CZAS:=_mc[_ii].Praca;
      H_UM_EKW.KWW:=_mc[_ii].Kwota;
      H_UM_EKW.KW:=H_UM_EKW.KWW;
      H_UM_EKW.ZMIANA:='N';
      H_UM_EKW.add()
   ?}
!};

H_UM_EKW.cntx_pop();
~~


\ekwiwalent_zask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Zapisuje składniki uwzględniane w wyliczeniu podstawy ekwiwalentu za niewykorzystany urlop do tabeli H_UM_ESK.
::   WE: _a _H_UM - wskazanie wiersza w tabeli H_UM
::       _b STRING - klasa składników: Z zmienne, N nominalne, S stałe, I informacyjne
::       _c INTEGER - rok
::       _d INTEGER - miesiąc
::       _e OBJECT - wskazanie obiektu klasy Trace
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=null
|| return()
?};

:: mapa argumentów
_h_um:=_a;
_klasa:=_b;
_rok:=_c;
_msc:=_d;
_TAB:=_e.TAB;

H_UM_ESK.cntx_psh();
H_UM_ESK.index('SK_KOD');
H_UM_ESK.prefix(_h_um,_klasa,_rok,_msc);

_TAB.prefix();
_loop:=_TAB.first();
{!
|? _loop
|! {? H_UM_ESK.find_key(_TAB.LT,_TAB.SK_NR)
   || H_UM_ESK.KW+=_TAB.KW;
      H_UM_ESK.put()
   || H_UM_ESK.blank();
      H_UM_ESK.H_UM:=_h_um;
      H_UM_ESK.K:=_klasa;
      H_UM_ESK.R:=_rok;
      H_UM_ESK.M:=_msc;
      H_UM_ESK.S:='%1%2'[_klasa,form(H_UM_ESK.size(),-2,0,'99')];
      H_UM_ESK.TYP:='M';
      H_UM_ESK.RODZAJ:=_TAB.O;
      H_UM_ESK.SK_KOD:=_TAB.SK_NR;
      H_UM_ESK.SK_NAZWA:=_TAB.SKLADNIK;
      H_UM_ESK.LT:=_TAB.LT;
      H_UM_ESK.KW:=_TAB.KW;
      H_UM_ESK.OPIS:=_TAB.OPIS;
      H_UM_ESK.add()
   ?};
   _loop:=_TAB.next()
!};

H_UM_ESK.cntx_pop();
~~


\ekwiwalent_bpom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Tworzy strukturę wykorzystywaną do zapisywania danych potrzebnych do wyliczenia kwoty ekwiwalentu w przypadku,
::       gdy należy ją ustalić na podstawie skorygowanych kwot.
::   WE:
::   WY: wskazanie utworzonej tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_len:=H_UM_ESK.fld_num();

_fml:='obj_new(';
{! _ii:=1.._len
|! _fml+='\''+H_UM_ESK.fld_acr(_ii)+'\','
!};

_buf:=($(_fml+'\'zapisz\')'))();

_buf.zapisz:="
   .S:=_a;
   {? var_pres('_b')=type_of('')
   || .SK_NAZWA:=_b
   ?};
   .KW:=_c;
   _ret:=1;
   _act:='';
   H_UM_ESK.cntx_psh();
   H_UM_ESK.index('UNIQUE');
   H_UM_ESK.prefix(.H_UM,.K,.R,.M);
   {? H_UM_ESK.find_key(.S,0)
   || {? .KW=0
      || _ret:=H_UM_ESK.del(1,1)
      |? H_UM_ESK.KW<>.KW
      || _act:='put'
      ?}
   |? .KW<>0
   || _len:=H_UM_ESK.fld_num();
      {! _ii:=1.._len
      |! H_UM_ESK[_ii]:=.[_ii]
      !};
      _act:='add'
   ?};
   {? _act<>''
   || H_UM_ESK.KW:=.KW;
      H_UM_ESK.OPIS:=form(.KW,,,'9.');
      {? _act='put' || _ret:=H_UM_ESK.put()
      |? _act='add' || _ret:=H_UM_ESK.add()
      ?}
   ?};
   H_UM_ESK.cntx_pop();
   _ret
";

H_UM_ESK.cntx_psh();
H_UM_ESK.blank(1);
{! _ii:=1.._len
|! _buf[_ii]:=H_UM_ESK[_ii]
!};
H_UM_ESK.cntx_pop();

_buf


\czy_blokada_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PKOSO [2009+]
:: OPIS: Sprawdzenie blokady podstawy emerytalno rentowej
::   WE: _a - rok
::       _b - mc
::   WY: 1 - jest blokada; 0 - nie ma blokady
::  OLD: \czy_blokada/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
P_INFO.cntx_psh;
P_INFO.index('OD');
P_INFO.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
_blokada:=0;
{? P_INFO.find_le(date(_a,_b,0))
|| {? (P_INFO.BLOKADA~1)=_a & P_INFO.BLOKADA<=date(_a,_b,0)
   || _blokada:=1
   ?}
?};
P_INFO.cntx_pop;
_blokada


\skl_bez_odlicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wyliczenie skladek zus, ktore nie podlegaja odliczeniom od podstawy podatku.
::   WE:
::   WY:
::  OLD: \skl_bez_odlicz/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
DoList.k[17]:=DoList.k[18]:=0;
{? ~FUNKCJE.L(750) || return(0) ?};
_Kwota:=0;
IS_WYPL.index('LISTA');
IS_WYPL.prefix(P.OSOBA,'L'+FUNKCJE.ZNLISTY());
{? IS_WYPL.first
|| {!
   |? {? IS_WYPL.POD_U>IS_WYPL.POD_P
      || _Kwota+=IS_WYPL.POD_U-IS_WYPL.POD_P
      ?};
      IS_WYPL.next()
   !}
?};
_index:=IS_ROZL.ndx_tmp(,1,'P',,,'LT',,);
IS_ROZL.index(_index);
IS_ROZL.prefix(P.ref(),'L'+FUNKCJE.ZNLISTY());
{? IS_ROZL.first
|| {!
   |? {? IS_ROZL.POD_U>IS_ROZL.POD_P
      || _Kwota+=IS_ROZL.POD_U-IS_ROZL.POD_P
      ?};
      IS_ROZL.next()
   !}
?};
IS_ROZL.ndx_drop(_index);

{? _Kwota<=0 || return(0) ?};
DoList.k[17]:=_Kwota;
_wynik:=0;
_year:=O.RU;
_month:=O.MU;
_blokada:=exec('czy_blokada_wynchor','lista_licz',_year,_month);
 _pod_e_r:=exec('kor_prac_zus','korekty_zus',P.ref,_year,_month);
{? _pod_e_r<0 || _pod_e_r:=FUNKCJE.L_SYS(511)$2 ?};
_pod_ch_w:=FUNKCJE.L_SYS(531)$2;
_proc:=
   {? _pod_e_r=_pod_ch_w & _year>=1999 & ~_blokada
   || KST.WSODBR
   |? _year>=1999
   || {? _pod_ch_w || (KST.PRFE/2+KST.PRFRP)*_pod_e_r/_pod_ch_w?}+KST.PRFC
   ?}$2;
{? _proc>0
|| DoList.k[18]:=(_Kwota*_proc/100)$2
?};
DoList.k[18]


\progi_zaliczki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [19.42]
:: OPIS: Zadaniem procedury jest wyliczenie udziału w odebranej kwocie dla naliczenia zaliczki wg procentu podatku,
::       w szczególności w sytuacji gdy na danej liście płac występuje zmiana progu podatkowego.
::       Procedura zwróci poprawne wyniki jeżeli będzie już znana wartość dochodu dla drugiego progu.
::   WE: _a [real] - Kwota przychodu do wyliczenia
::       [_b] [real] - wartość kosztów uzyskania przychodu
::       [_c] [real] - Ulga podatkowa
::       [_d] [int] - procent zaliczki
::       [_e] [int] - 1 - dla zdrowotnego wg zasad po 2021
::   WY: real - wartość zaliczki na podatek z podziałem na procent podatku wyliczonym na podstawie proporcji
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return(0) ?};
_PRZ:=_a;
{? ~_PRZ || return(0) ?};
_KU:={? var_pres('_b')=type_of(0) || _b ?};
_UP:={? var_pres('_c')=type_of(0) || _c ?};
_PROCENT:={? var_pres('_d')=type_of(0) || _d || FUNKCJE.L_SYS(91) ?};
_ZDR:={? var_pres('_e')=type_of(0) || _e ?};
_zalicz:=0;

{? _ZDR
|| _doch_2p:=FUNKCJE.L_SYS(9066)+FUNKCJE.LP_SYS(9066);
   _przych:=FUNKCJE.L_SYS(9061)+FUNKCJE.LP_SYS(9061)-FUNKCJE.LP_SYS(9063)-FUNKCJE.L_SYS(9063);
   _przych-=(FUNKCJE.L_SYS(932)+FUNKCJE.LP_SYS(932));

   _p_2:=_p_1:=0;
   TP.index('TABPODAT');
   TP.prefix(2021);
   {? TP.first()
   || _p_1:=TP.PR;
      {? TP.next()
      || _p_2:=TP.PR
      ?}
   ?};
   {? FUNKCJE.PODATEK & _doch_2p
   || _wymiar:=_przych/_doch_2p;
      _PRZ-=_KU;
      _PRZ_P_2:=_PRZ/_wymiar;
      _PRZ_P_1:=_PRZ-_PRZ_P_2;

   {? _PRZ_P_1 & _p_1
   || _zalicz:=_PRZ_P_1$0*_p_1/100
   ?};
   {? _PRZ_P_2 & _p_2
   || _zalicz+=_PRZ_P_2$0*_p_2/100
   ?}
   || {? _doch_2p
      || _zalicz:=(_PRZ-_KU)$0*_p_2/100
      || _zalicz:=(_PRZ-_KU)$0*_p_1/100
      ?}
   ?}
|? FUNKCJE.PL_NEW
|| _doch_2p:=FUNKCJE.L_SYS(9033)+FUNKCJE.LP_SYS(9033);
   {? FUNKCJE.PODATEK & _doch_2p
   || _przych:=FUNKCJE.L_SYS(92)+FUNKCJE.LP_SYS(92)+FUNKCJE.LP_SYS(9022)+FUNKCJE.L_SYS(9022)-
      FUNKCJE.LP_SYS(9026)-FUNKCJE.L_SYS(9026)-FUNKCJE.LP_SYS(93)-FUNKCJE.L_SYS(93);
      _wymiar:=_przych/_doch_2p;
      _PRZ-=_KU;
      _PRZ_P_2:=_PRZ/_wymiar;
      _PRZ_P_1:=_PRZ-_PRZ_P_2;
      _p_2:=_p_1:=0;
      TP.index('TABPODAT');
      TP.prefix(O.RP);
      {? TP.first()
      || _p_1:={? O.R=2022 || 12 || TP.PR ?};
         {? TP.next()
         || _p_2:=TP.PR
         ?}
      ?};

      {? _PRZ_P_1 & _p_1
      || _zalicz:=_PRZ_P_1$0*_p_1/100
      ?};
      {? _PRZ_P_2 & _p_2
      || _zalicz+=_PRZ_P_2$0*_p_2/100
      ?}
   || _zalicz:=(_PRZ-_KU)$0*_PROCENT/100
   ?}
|| _UKS_UL:=FUNKCJE.L_SYS(9052)+FUNKCJE.LP_SYS(9052);
   _doch_2p:=FUNKCJE.L_SYS(9033)+FUNKCJE.LP_SYS(9033);
   _przych:=FUNKCJE.L_SYS(92)+FUNKCJE.LP_SYS(92)+FUNKCJE.LP_SYS(9022)+FUNKCJE.L_SYS(9022)-
      FUNKCJE.LP_SYS(9026)-FUNKCJE.L_SYS(9026)-FUNKCJE.LP_SYS(93)-FUNKCJE.L_SYS(93);
   {? _UKS_UL>0
   || _wymiar:=_przych/_PRZ;
      _UKS_UL:=_UKS_UL/_wymiar
   || _UKS_UL:=0
   ?};
   {? FUNKCJE.PODATEK & _doch_2p
   || _wymiar:=_przych/_doch_2p;
      _PRZ-=_UKS_UL;
      _PRZ-=_KU;
      _PRZ_P_2:=_PRZ/_wymiar;
      _PRZ_P_1:=_PRZ-_PRZ_P_2;

      _p_2:=_p_1:=0;
      TP.index('TABPODAT');
      TP.prefix(O.RP);
      {? TP.first()
      || _p_1:=TP.PR;
         {? TP.next()
         || _p_2:=TP.PR
         ?}
      ?};

      {? _PRZ_P_1 & _p_1
      || _zalicz:=_PRZ_P_1$0*_p_1/100
      ?};
      {? _PRZ_P_2 & _p_2
      || _zalicz+=_PRZ_P_2$0*_p_2/100
      ?}
   || _zalicz:=(_PRZ-_UKS_UL-_KU)$0*_PROCENT/100
   ?}
?};

(_zalicz-_UP)$2


\ustal_h_wym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Ustalenie biezacego wymiaru zatrudnienia dla ustalonego pracownika.
::   WE: _a - string określający akronim zwiazany z wymiarem zatrudnienia oraz czy macierzynski
::       [_b] - date - data badania, gdy bez argumentu uslala na date biezaca
::       [_c] - INTEGER - z pominięciem zmniejszenia tarcza covid
::   WY: Wymiar zatrudnienia lub 1/0 dla MAC
::  OLD: \ustal_h_wym/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
_b:={? var_pres('_b')=type_of(date) || _b || date ?};
_acr:={? _a='RWY' || "H.RWY" |? _a='MAC' || "H.MAC='T'" || $('H.'+_a) ?};
_cov:={? var_pres('_c')=type_of(0) || _c || 0 ?};
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
_wyn:=0;
{? _cov
|| {? H.find_le(_b)
   || {!
      |? {? (exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM') | exec('h_stat_get','pracownik',H.ref(),'T_ZM_WAR'))
         || H.prev()
         || _wyn:=_acr();
            0
         ?}
      !}
   ?}
|| _wyn:=
      {? H.find_le(_b)
      || _acr()
      || 0
      ?}
?};
H.cntx_pop();
_wyn


\wyr_minwyn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [20.14]
:: OPIS: Funkcja wylicza wyrownanie do kwoty minimalnego wynagrodzenia dla przestoju.
::   WE:  _a - kwota brutto
::        _b - liczba godzin nieobecności
::        _c - data od nieobecności
::        _d - wartość minimalnego wynagrodzenia
::   WY:  wyliczona kwota wyrownania do najnizszej krajowej
::  OLD: \wyr_minwyn/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return(0) ?};
{? var_pres('_b')<>type_of(0) || return(0) ?};
{? var_pres('_d')<>type_of(0) || return(0) ?};
{? _a<=0 | _b<=0 | _d<=0 || return(0) ?};

_nk:=_d;
_brutto:=_a;
_mc_od:=date(_c~1,_c~2,1);
_mc_do:=date(_c~1,_c~2,0);
_godz:=_b;
_wyrown:=0;
__KAL.set_cal(P.KAL,_mc_do~1);
_kal_naz:=__KAL.nazwa;
_kal_rok:=__KAL.rok;
:: Ustawienie kalendarza listy / standard
{? O.T().KA().NAZWA<>''
|| __KAL.set_cal(O.T().KA().NAZWA,_mc_do~1)
|| __KAL.set_cal('standard')
?};
:: Wyliczenie godzin nominalnych dla pełnego wymiaru zatrudnienia z uwzględnieniem obniżonej normy dobowej

_norma:=exec('norma_zmiana','godziny',_mc_od,_mc_do);
_godznom:=exec('nominal','godziny',_mc_od,_mc_do,1,_norma,,,1)$2;

{? _godznom
|| _stawkamin:=_nk/_godznom;
   {? _godz>0
   || _stawka:=_brutto/_godz;
      _wyrown+={? (_stawkamin-_stawka)$2>0 || ((_stawkamin-_stawka)*_godz)$2 ?}
   ?}
?};
:: Powrót do kalendarza pracownika
__KAL.set_cal(_kal_naz,_kal_rok);
_wyrown


\benefit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła dla bieżącego pracownika, na bieżącej liście płac umieszcza kwotę nominalną składników "informacyjnych"
::       związanych z benefitami. Jeżeli wartość jakiegoś benefitu powinna zostać przetworzona (np. zmienia się jego
::       wartość w przypadku nieobecności), to należy napisać dedykowaną funkcję.
::       Wartość nominalna jest naliczana w pełnej wysokosci dla benefitów, które były aktywne co najmniej jeden dzień
::       w miesiącu obliczanej listy.
::   WE: _a [NUMBER] - Numer rubryki
::   WY: Wartość benefitu (może być 0).
::----------------------------------------------------------------------------------------------------------------------
_rn:={? var_pres('_a')=type_of(0) || _a ?};

_ret:=0;
BNFTP.cntx_psh();
BNFTP.index('PRRN');
BNFTP.prefix(P.ref(),_rn);
{? BNFTP.first()
|| BNFTT.cntx_psh();
   BNFTT.prefix();
   _d0:=date(0,0,0);
   _pocz:=date(O.R,O.M,1);
   _kon:=date(O.R,O.M,0);
   {!
   |? BNFTP.BNFTT();
      {? BNFTT.OD<=_kon & (BNFTT.DO=_d0 | BNFTT.DO>=_pocz) &
         BNFTP.OD<=_kon & (BNFTP.DO=_d0 | BNFTP.DO>=_pocz)
      || _fml:=BNFTT.memo_txt(,1,'WARTOSC');
         _kw:=
            {? _fml<>''
            || ($_fml)()
            |? BNFTP.NOMINAL
            || BNFTP.NOMINAL
            || BNFTT.NOMINAL
            ?};
         {? _kw>0
         || _ret+=_kw$2
         ?}
      ?};
      BNFTP.next()
   !};
   BNFTT.cntx_pop()
?};
BNFTP.cntx_pop();
_ret


\podst_KU50
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AB [12.51]
:: OPIS: Wyliczenie Podstawy KU prawa autorskiego
::   WE:
::   WY:
::  OLD: \podst_KU50/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=0;
_przych:=FUNKCJE.L_SYS(9041);
{? _przych
|| _podstER:=FUNKCJE.L_SYS(511);
   _podstCH:=FUNKCJE.L_SYS(531);
   H.cntx_psh();
   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {? H.find_le(date(O.R,O.M,0)) & (H.DO=date(0,0,0) | date(O.R,O.M,1)<=H.DO)
   || _pat:=H.PAT;
      _paw:=H.PAW
   || _pat:='N'
   ?};
   H.cntx_pop();
   {? _pat='P'
   || _prz_UBZ:=0;
      R.cntx_psh();
      R.prefix();
      _rub_prz:=__RUB.sys_rub(9044);
      {? _rub_prz.first()
      || {!
         |? {? R.seek(_rub_prz.R,)
            || {? R.ZUS='T'
               || _prz_UBZ+=FUNKCJE.L(_rub_prz.RN)
               ?}
            ?};
            _rub_prz.next()
         !}
      ?};
      R.cntx_pop();
      _prz_UBZ:=_prz_UBZ*_paw/100$2;
:: ER/WRT/XP/23.25/2402/0048 - ER/WRT/XP/22.26/2402/0011 - ER/WRT/XP/12.51/2402/0021:
:: Błędna kwota przychodu gdy PA kwotowe, gdy w tym samym miesiącu pracownikowi kończy ZP
      _POZ_ALL:=FUNKCJE.LP_SYS(9022);
      _POZ_ONE:=FUNKCJE.L_SYS(9022);
      _POZ_ASK:=_POZ_ALL+_POZ_ONE>0;
      {? _POZ_ASK
      || _prz_UBZ:=exec('przych_KU50_U26','lista_licz',_prz_UBZ)
      ?}
   || _prz_UBZ:=_przych
   ?};

:: Zmiana sposobu odbruttowienia - każda skladka liczona i zaokrąglona osobno:
:: KOD BŁĘDU: ER/WRT/XP/23.25/2311/0016, kopia błędu spisowego: ER/WRT/XP/12.51/2311/0001
   _wsp:=1;
   {? _podstER<_podstCH
   || {? _podstCH
      || _wsp:=_podstER/_podstCH;
         {? _wsp>1 || _wsp:=1 ?}
      ?}
   ?};
   _PA_skl:=(_prz_UBZ*KST.PRFC/100)$2;
   _PA_skl+=(_prz_UBZ*KST.PRFRP*_wsp/100)$2;
   _PA_skl+=(_prz_UBZ*KST.PRFE*_wsp/2/100)$2;

   _skl:=FUNKCJE.L_SYS(512)+FUNKCJE.L_SYS(522)+FUNKCJE.L_SYS(532);
   {? _PA_skl>_skl
   || _PA_skl:=_skl
   ?};
   _wynik:=_przych-_PA_skl
?};
_wynik


\przych_KU50_U26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AB [12.51]
:: OPIS: Wyliczenie przychodu PA dla pracowników poniżej 26 rż
::   WE: _a [real] - Kwota przychodu
::   WY: [real] - Kwota przychodu ograniczonego
::  OLD: \przych_KU50_U26/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=_a;
_ogranicz:=0;
_zw_prz:=exec('skl_bez_odlicz','lista_licz');
_do_ulg:=FUNKCJE.L_SYS(9022)-FUNKCJE.L_SYS(9026)+FUNKCJE.L_SYS(92)+FUNKCJE.L_SYS(5711)+FUNKCJE.L_SYS(57210)-_zw_prz;
_do_ulg-=FUNKCJE.L_SYS(9021);
{? _do_ulg>FUNKCJE.L_SYS(9022)
|| _ogranicz:=1
?};
{? _ogranicz & _do_ulg>0
|| _pa_zp:=FUNKCJE.L_SYS(9022);
   _wsp:=_wynik/_do_ulg;
   _wsp:={? _wsp>1 || 1 |? _wsp<0 || 0 || _wsp ?};
   _pa_zp:=(_pa_zp*_wsp)$2
|| _pa_zp:=_wynik
?};
_wynik-=_pa_zp;
_wynik:={? _wynik<0 || 0 || _wynik ?};
_wynik


\KU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wyliczenie KU.
::   WE:
::   WY:
::  OLD: \KU/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
:: 90104: Składki niestanowiące obniżenia podstawy opodat.
_skl_prac:=FUNKCJE.L(765,767)-FUNKCJE.L_SYS(9026)-FUNKCJE.L_SYS(90104);
_l:=FUNKCJE.L(780)-FUNKCJE.L_SYS(9041);
:: 1021: Przychód opodatkowany zagraniczny, 1026: Wynagrodzenia opodatkowane w Polsce, 451: Płaca zasadnicza
:: Jeśli to jest tylko przychód opodatkowany zagranicą - nie licz kosztów uzyskania przychodu:
{? _l<=0 & FUNKCJE.L_SYS(1021) & FUNKCJE.L_SYS(1026)=0 & FUNKCJE.L_SYS(451)=0
|| _l:=0
|| _l+=_skl_prac
?};
{? _l>0
|| _l-=(FUNKCJE.L_SYS(551)+FUNKCJE.L_SYS(32))
|| _l:=0
?};
_param:=exec('wartosc','lista_par','BEZ_KU');
{? _l>0 & P_IPOD.KU<>'B' & (_param=~~ | {? var_pres('_param')=type_of('') || _param='N' ?})
|| _ku:={? P_IPOD.KU='Z' & ({? O.RP>2022 || exec('jest_prac','obiegi',P.ref(),O.D,1) || 1 ?})
        || KST.KUZ
        || KST.KU
        ?};
   _n_zysk:=FUNKCJE.L_SYS(73);
   {? _n_zysk>0
   || _brutto:=FUNKCJE.L(500);
      {? FUNKCJE.L_SYS(710) & _brutto>0
      || _l-=_n_zysk/_brutto*FUNKCJE.L_SYS(724)$2
      ?}
   ?};
   {? _l>0
   || _ku-=FUNKCJE.LP(784,,,,1);
      {? _ku<0
      || _ku:=0
      ?};
      {? _l<_ku
      || _l
      || _ku
      ?}
   ?}
?}


\zmn_PA_do_KC
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.51]
:: OPIS: Wyliczenie kwoty, które stanowią 50% koszty uzyskania ale nie podleagają ubezpieczeniu zdrowotnemu
::   WE:
::   WY: 0 lub kwota, gdy mamy 50% koszty uzyskania i są takie składniki w atrybucie 9044 bez ZUS i Zdrowotnego
::  OLD: \zmn_PA_do_KC/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_kw:=0;
_paw:=0;
_dp:=date(O.R,O.M,1);
_dk:=date(O.R,O.M,0);
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
{? H.find_le(_dk) & (H.DO=date(0,0,0) | _dp<=H.DO)
|| _pat:=H.PAT;
   _paw:=H.PAW
|| _pat:='N'
?};
H.cntx_pop();
{? _pat='N' || return(0) ?};
R.cntx_psh();
R.prefix();
_rub:=__RUB.sys_rub(9044);
{? _rub.first()
|| {!
   |? {? R.seek(_rub.R,)
      || {? R.ZUS<>'T' & R.UBZ<>'T'
         || _kw+=FUNKCJE.L(_rub.RN)+FUNKCJE.LP(_rub.RN)
         ?}
      ?};
      _rub.next()
   !}
?};
R.cntx_pop();
0.5*(0.01*_paw*_kw)$2


\ver_covid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Weryfikacja czy dla pracownika w okresie ciągłości nieobecności były zmiany związane z tarczą COVID.
::   WE:
::   WY: obiekt _covid
::  OLD: \ver_covid/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
_covid:=obj_new('H','N','T','N_REF','H_REF','MAC','PRZELICZ');
_covid.H:=_covid.N:=#0;
_covid.T:=0;
_covid.N_REF:=_covid.H_REF:=null();
_covid.MAC:=0;
_covid.PRZELICZ:='N';
{? var_pres('H_STAT',@)<0 || return(_covid) ?};

:: sprawdzenie czy jest tarcza jeśli nie ma to return
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref,'Z');
_tarcza:=0;
{? H.find_le(N.DO)
|| {!
   |? _tarcza:=(exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM') | exec('h_stat_get','pracownik',H.ref(),'T_ZM_WAR'));
      ~_tarcza & H.prev()
   !};
   {? ~_tarcza
   || H.cntx_pop();
      return(_covid)
   ?}
?};
H.cntx_pop();

_mac:=(N.KDCH().KOD*'B' | __RUB.sys_attr(N.NB,1227));
{? _mac
|| _covid.MAC:=1
?};

:: sprawdzenie czy nieobecność jest powiązana z innym typem i należy dla tarczy przeliczać zawsze
N.cntx_psh();
_pop_OD:=N.OD;
exec('pop_n','!ppl_pll_nals',N.ref,1);
{? N.OD<_pop_OD
|| {? _mac & ~(N.KDCH().KOD*'B' | __RUB.sys_attr(N.NB,1227))
   || _covid.PRZELICZ:='T'
   |? ~_mac & (N.KDCH().KOD*'B' | __RUB.sys_attr(N.NB,1227))
   || _covid.PRZELICZ:='T'
   ?}
?};
N.cntx_pop();
H.cntx_psh();
N.cntx_psh();

H_STAT.cntx_psh();
_chp:=exec('nw_find_chp','nieobecnosc',N.ref);
{? __RUB.sys_attr(N.NB,12) & ~__RUB.sys_attr(N.NB,1227) & exec('ustal_h_wym','lista_licz','MAC',N.OD)
|| _chp:=exec('zn_chp_bez_mac','!ppl_pll_nals',N.ref)
?};

_wynik:=0;
_wsk:={? _chp || _chp || N.ref ?};
_h_ref:=_n_ref:=null;
_od:=#0;
N.clear;
{? N.seek(_wsk)
|| _od:=N.OD
?};
N.cntx_pop();
N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref());
H_STAT.index('KOD');
H.index('_HISTKOD');
H.prefix(P.ref,'Z');
_h_covid:=#0;
{? H.find_le(N.DO)
|| {! _ind:=1..2
   |? _cov:=(exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM') | exec('h_stat_get','pracownik',H.ref(),'T_ZM_WAR'));
      _wym:=H.WY;
      _ref:=H.ref();
      {? _cov
      || {!
         |? {? H.prev() & exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM')
            || _ref:=H.ref();
               1
            ?}
         !};
         {? H.seek(_ref)
         || _h_covid:=H.OD; _h_ref:=H.ref()
         ?};
         0
      || {!
         |? {? H.prev() & _wym=H.WY
            || _ref:=H.ref();
               1
            ?}
         !};
         {? H.seek(_ref)
         || H.prev();
            H.OD>_od
         ?}
      ?}
   !}
?};
_n_covid:=#0;
{? _h_covid>#0
|| _od_b:=N.OD;
   {!
   |? {? _od_b<=_h_covid-1
      || _do_b:=N.DO;
         {? _do_b>=_h_covid
         || _wynik:=1;
            _n_covid:=N.OD;
            _n_ref:=N.ref();
            0
         || {? N.next & N.OD=_do_b+1 & exec('data_ciaglosci','nieobecnosc',N.NB().RN)<=_od_b
            || N.prev();
               _wynik:=1;
               _n_covid:=N.OD;
               _n_ref:=N.ref();
               0
            ?}
         ?}
      |? exec('pop_n','!ppl_pll_nals',N.ref,1) & _od_b>N.OD
      || _od_b:=N.OD;
         1
      ?}
   !}
?};

N.cntx_pop();
{? _covid.MAC & _h_covid>#0
:: Tu następuje weryfikacja ciągłości jeśli jest sprzed tarczy dla macierzyńskich
|| N.cntx_psh();
   _od_b:=N.OD;
   {!
   |? {? _od_b<_h_covid
      || _wynik:=1;
         _n_covid:=N.OD;
         _n_ref:=N.ref();
         0
      |? exec('pop_n','!ppl_pll_nals',N.ref,1) & _od_b>N.OD
      || _od_b:=N.OD;
         1
      ?}
   !};
   N.cntx_pop();
   _covid.H:=_h_covid;
   {!
   |? {? ~(exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM') | exec('h_stat_get','pracownik',H.ref(),'T_ZM_WAR'))
      || _covid.H_REF:=H.ref;
         0
      || H.prev()
      ?}
   !}
?};
H.cntx_pop();
H_STAT.cntx_pop();
{? _wynik
|| _covid.H:=_h_covid;
   _covid.N:=_n_covid;
   _covid.T:=1;
   _covid.N_REF:=_n_ref
?};
_covid


\dodatek_stazowy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wyliczenie wartości dodatku stażowego oraz części, która stanowi podstawę ZUS oraz kasy chorych.
::       Od wartości stażu pracy brutto należy odjąć część przypadającą na nieobecność wyłączoną z podstaw.
::   WE:
::   WY: wartość dodatku stażowego
::----------------------------------------------------------------------------------------------------------------------
FUNKCJE.LK(7130,,,1);
FUNKCJE.LK(7131,,,1);
{? ~FUNKCJE.S(7129) || return(0) ?};

_wynik:=_potracenie:=0;

_proc_nominalny:=FUNKCJE.S(7137);
{? ~_proc_nominalny
|| _TAB_okres:=exec('oblicz','staz',1,1,O.R,,O.D);
   _proc_nominalny:=
      {? _TAB_okres.lat[3]>=20
      || 20
      |? _TAB_okres.lat[3]>=5
      || _TAB_okres.lat[3]
      ?}
?};
{? ~_proc_nominalny || return(0) ?};
FUNKCJE.LK(7137,,_proc_nominalny);
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref,'Z');
_zasadnicza:=0;
_ch_prac:='';
{? H.find_le(O.D)
|| _zasadnicza:={? H.CZYWAL='T' || exec('waluta','lista_licz',1,,,H.S1) || H.S1 ?};
   _ch_prac:=H.CP().S
?};
H.cntx_pop();

{? ~_zasadnicza || return(0) ?};
{? 1+(-_ch_prac)='f'
||  exec('kal_list','personel');
    _norma:=exec('norma_zmiana','godziny',date(O.D~1,O.D~2,1),date(O.D~1,O.D~2,0));
    {? _norma
    || _godz:=exec('nominal','godziny',date(O.D~1,O.D~2,1),date(O.D~1,O.D~2,0),1,1,,1)
    || _godz:=exec('nominal','godziny',date(O.D~1,O.D~2,1),date(O.D~1,O.D~2,0),1,,,1)
    ?};
   _zasadnicza*=_godz$2
?};
_staz_biezacy:=_proc_nominalny*_zasadnicza/100$2;

{? ~_staz_biezacy || return(0) ?};

_lista:='L'+FUNKCJE.ZNLISTY();

N.cntx_psh();
N.index('NIEOBECL');
{? _staz_biezacy
|| N.prefix('N',P.ref(),_lista);
   {? N.first()
   || _tab_mc:=sql(
         'select N.ROK, N.MC, sum(N.NK) as NK '
         'from N join R using(N.NB,R.REFERENCE) '
         'where N.KOR=\'N\' and N.P=:_a and N.LT=\':_b\' and R.RN in (:_c) '
         'group by N.ROK, N.MC',
         P.ref(),_lista,__RUB.sys_sql(12,O.D)
      );
      {? type_of(_tab_mc)<>type_of(SYSLOG)
      || RAPLS.msg(
            P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
            'Kwoty składników 7130 i 7131 nie mogą być poprawnie wyliczone.'@,
            'Należy powtórzyć obliczenia.'@
         )

      |? _tab_mc.first()
      || {!
         |? _dni_kal:=date(_tab_mc.ROK,_tab_mc.MC,0)~3;
            _licz_mc_wstecz:=(O.R*12+O.M)-(_tab_mc.ROK*12+_tab_mc.MC);
            {? _licz_mc_wstecz>0
            || _staz_mc:=FUNKCJE.L_SYS(40211,_licz_mc_wstecz,_licz_mc_wstecz)
            |? _licz_mc_wstecz=0
            || _staz_mc:=_staz_biezacy
            || _staz_mc:=0
            ?};
            {? _staz_mc
            || _potracenie+=(_staz_mc/_dni_kal)*_tab_mc.NK$2
            ?};
            _tab_mc.next()
         !}
      ?}
   ?};
:: zapisanie wartości
   _wynik:=_staz_biezacy-_potracenie;
   FUNKCJE.LK(7130,,_wynik);
   FUNKCJE.LK(7131,,_wynik)
?};
N.cntx_pop();
_staz_biezacy


\test_przelicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Weryfikacja dla zaznaczonej opcji N.PRZELICZ='T' gdy nieobecność pierwotna naliczona z bieżącego dla niej
::       miesiąca.
::   WE: _a Data mca
::  OLD: \test_przelicz/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
_data:=_a;
_wynik:=0;
_od:=date(N.OD~1,N.OD~2,1);
N.cntx_psh();
_chp:=exec('nw_find_chp','nieobecnosc',N.ref);
N.prefix();
{? N.seek(_chp)
|| _wynik:=date(N.OD~1,N.OD~2,1)<_od & date(N.OD~1,N.OD~2,1)=_data
?};
N.cntx_pop();
_wynik


\ekwiwalent_ppl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Ekwiwalent za urlop, podstawa prawna Rozp. Min. Pracy z 8 stycznia 1997
::   WE: [_a] - typ wywołania ( puste lub 'E' - ekwiwalent; 'N' - nieobecność np. urlop rehabilitacyjny;
::                'P' - sama podstawa np. do nagrody jubileuszowej)
::       [_b] - ref nieobecności dla _a='N'
::       [_c] - data badania dla _a<>'E'
::   WY:
::  OLD: /ekwiwal.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('LICZ')<0
|| exec('dekl','lista_plac')
?};
:: warunek podstawowy jakichkolwiek wyliczeń - określono współczynnik do ekwiwalentu
{? var_pres('_a')=type_of('') || _typ:=_a || _typ:='E' ?};
{? _typ='N'
|| {? var_pres('_c')<>type_of(date()) | var_pres('_b')<>type_of(null)
   || return(0)
   ?};
   {? exec('blokada_oblicz','nieobecnosc')
   || return(N.WART)
   ?};
   _N_ref:=_b;
   _data_badania:=_c
|? _typ='P'
|| {? var_pres('_c')<>type_of(date())
   || return(0)
   ?};
   _data_badania:=_c
|| _data_badania:=P.DZ;
   {? _data_badania>date(O.R,O.M,0) | _data_badania=#0
   || _data_badania:=date(O.R,O.M,0)
   ?}
?};
Finish:=1;
__KORZ:=0;

:: umowa "z ekwiwalentem"
_h_um:=null;
_ex_r:=O.R;
_ex_m:=O.M;
{? _typ='E'
|| H_UM.cntx_psh();
   H_UM.index('LISTA');
   H_UM.prefix(P.ref(),VAR.NAZWALIS);
   {? H_UM.first()
   || _h_um:=H_UM.ref();
:: czy kwoty do wyliczeń zostały zmienione?
      _w0:=exec('ekwiwalent','lista_licz',_h_um,1);
      {? type_of(_w0)=type_of(0)
:: nie wyliczaj ponownie
      || H_UM.cntx_pop();
         return(_w0)
      ?};
      {? H_UM.DO<>date(0,0,0)
      || _ex_r:=H_UM.DO~1;
         _ex_m:=H_UM.DO~2
      ?};
      exec('del_ndx','#table',H_UM_EKW,'UNIQUE',_h_um);
      exec('del_ndx','#table',H_UM_ESK,'UNIQUE',_h_um);
      _data_badania:=H_UM.DO;
:: ustalenie stawki zaszeregowania dla ostatniego przeszeregowania danej umowy
      H.cntx_psh();
      H.index('HISTUM');
      H.prefix(H_UM.ref);
      {? H.last()
      || _stawka_h_um:=exec('hsx','lista_licz',_data_badania,_data_badania,1)
      || _stawka_h_um:=obj_new('S1','S2','S3');
         _stawka_h_um.S1:=_stawka_h_um.S2:=_stawka_h_um.S3:=0
      ?};
      H.cntx_pop()
   ?};
   H_UM.cntx_pop()
|? _typ='N'
|| _blokada:=exec('blokada_oblicz','nieobecnosc')
?};

_EKW:=KST.EKW;
{? _data_badania<>date(0,0,0)
|| exec('czytaj','#stalesys',_data_badania,KST,'EKW')
?};
{? ~KST.EKW
|| RAPLS.msg(
      P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
      'Współczynnik do wyliczenia ekwiwalentu za urlop nie został określony.'@,
      exec('retry_msg','lista_licz')
   );
   return(0)
|| _EKW:=KST.EKW
?};
KST.EKW==_EKW;

_ile_mc:={? exec('Nalezy','grupprac','UR_EK_12',P.ref(),_data_badania) || 12 || 3 ?};
_i:=_l:=_w:=_z:=_k:=_w0:=0;
_wsklnom:=0;

VAR_DEL.delete('d');
d:=obj_new(7);
{! _i:=1..7
|! d[_i]:=0
!};

{? _typ='E' | _typ='N'
:: dla zapisu podstaw
|| {? var_pres('PNIEO',@.CLASS)<=0
   || exec('define_wynchor','lista_licz')
   ?}
?};

:: Zmiana na rubryki z odpowiendim atrybutem
_tab_r_godz:=__RUB.sys_rub(1011212,_data_badania).first;
_tab_wyn_godz:=__RUB.sys_rub(1011221,_data_badania).first();

:: bufory składników zmiennych
_oTrace:=obj_new(@.CLASS.Trace);

{? _typ='E' | _typ='N'
|| {? var_pres('__PN')<=0
   || __PN:=obj_new(@.CLASS.PNIEO,1)
   || __PN.Delete();
      __PN.Create(1)
   ?};
   __PN.NewMc(1,_ile_mc+(_typ='N'))
?};
{? _typ='E'
||
:: bufory kwot nominalnych
   _nTrace:=obj_new(@.CLASS.Trace);
   _PO:=obj_new(@.CLASS.PNIEO,1);
   _PO.NewMc(1,_ile_mc)
|? _typ='N' & N.seek(_N_ref)
|| _maska:='s_ch'+form(N.OD~1,-4,0,'9.');
   {? SK_CHO.name()<>_maska
   || SK_CHO.use(_maska)
   ?};
   SK_CHO.index('SK_CHO');
   SK_CHO.prefix(N.ref());
   {? SK_CHO.first()
   || {!
      |? SK_CHO.del()
      !}
   ?};
   &_maska;
   exec('zap_nw_wynchor','lista_licz',_N_ref,_N_ref)
?};

H.cntx_psh();
H.index('_HISTKOD');
N.cntx_psh();
N.index('NIEOBECL');
N.prefix('N',P.ref(),VAR.NAZWALIS);
_z:=(P.DZA~1)*12+P.DZA~2;
_k:=(O.R*12+O.M)-_z;

: ustalenie miesiąca początkowego
_l:=1;
_list_d:=date(O.R,O.M,1);
_l_pom:=0;
{? _data_badania<>date(0,0,0) & _data_badania<_list_d
|| _l_pom:=_l:=(_list_d~1*12+_list_d~2)-(_data_badania~1*12+_data_badania~2)+1;
   _l_pom-=1
?};
{? _l_pom>126
|| _l_pom:=_l:=126
?};
{? _k>126
|| _k:=126
?};
H.prefix(P.ref(),'Z');
_stawka:=0;
{? _typ='P'
|| _przeszer:=date(O.R,O.M,0)
|| _przeszer:=_data_badania
?};
_WY:=P.WY;
_typ_val:={? _typ='P' || 1 || ~~ ?};
{? H.last()
|| {!
   |? {? H.OD>_przeszer
      || H.prev()
      ?}
   !};
   _umowa:=exec('hsx','lista_licz',_przeszer,_przeszer,_typ_val);
   _od:=H.OD;
   _wy:=H.WY;
   {!
   |? _hsx:=exec('hsx','lista_licz',_przeszer,_przeszer,_typ_val);
      _again:=
         {? _umowa.S1=_hsx.S1 & _umowa.S2=_hsx.S2 & _umowa.S3=_hsx.S3
         || _od:=H.OD;
            _wy:=H.WY;
            H.prev()
         ?};
      obj_del(_hsx);
      &_hsx;
      _again
   !};
   _przeszer:=_od;
   _WY:=_wy
|| _umowa:=obj_new('S1','S2','S3');
   _umowa.S1:=_umowa.S2:=_umowa.S3:=0
?};

{? H.find_le(date(O.R,O.M-_l_pom,0))
|| _wymiar:=H.WY;
   _c_p:=H.CP().S
|| _wymiar:=P.WY;
   _c_p:=P.CP().S
?};

_licznik:=0;

_nk:=exec('ust_nk','lista_licz',_data_badania,'NK');
_godz:=obj_new(8);

:: Sytuacja zatrudnienia i zwolnienia pracownika w tym samym miesiacu, lista z przesunieciem podatkowym
_bez_wyp:=0;
{? _l-_k=0
|| {? ~FUNKCJE.LP(100,,_l,_l,1,,1)
   || {? FUNKCJE.L(100,,_l,_l)
      || _bez_wyp:=1
      || _l:=_k:=0
      ?}
   ?}
?};
_Data:=date(O.R,O.M,1);
{! _i:=_l.._k
|? d[7]:=0;
   _Data:=date(O.R,O.M-_i,1);
:  start i stop
   d[1]:=date(O.R,O.M-_i,1);
   d[2]:=date(O.R,O.M-_i,0);
   _oTrace.erase();
   {? _typ='E'
   || _nTrace.erase()
   ?};
:  Sprawdzenie czy byla wyplata za miesiac obliczany
   _wyplata:=0;
   O.cntx_psh();
   LS.cntx_psh();
   O.index('LISTYPLP');
   O.prefix(exec('ref_firma','ustawienia'),P.F_ZATR().KOD,_Data~1,_Data~2);
   _first:=1;
   _lpod:=0;
   {? _i & O.first()
   || {!
      |? LS.use(O.LT);
         LS.index('PRACNRRU');
         LS.prefix(P.ref());
         {? LS.find_key(500)
         || {? LS.find_key(90) | LS.find_key(91)
            || _lpod:=1;
               {? _first
               || d[1]:=date(O.R, O.M, 1);
                  d[2]:=date(O.R,O.M, 0)
               ?};
               _first:=0;
               {? d[1]>(_pom:=date(O.R,O.M,1))
               || d[1]:=_pom
               ?};
               {? d[2]<(_pom:=date(O.R, O.M, 0))
               || d[2]:=_pom
               ?}
            ?};
            _wyplata:=1
         ?};
         O.next()
      !}
   |? _i=0
   || _wyplata:=1;
      _lpod:=1
   ?};
   LS.cntx_pop();
   O.cntx_pop();

   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {? H.find_le(d[2])
   || _c_p_i:=H.CP().S
   || _c_p_i:=_c_p
   ?};

   {? _wyplata | _bez_wyp
   || exec('kal_prac','personel',d[1]~1);
      VAR_DEL.delete('dni');
      dni:=obj_new(3);
:     dni[1][_i] - nominał w godzinach
:     dni[2][_i] - nieobecność w godzinach
:     dni[3][_i] - zarejestrowany czas
      {! _lp1:=1 .. obj_len(dni)
      |! dni[_lp1]:=obj_new((d[2]-d[1]+1));
         {! _lp2:=1 .. d[2]-d[1]+1
         |! dni[_lp1][_lp2]:=0
         !}
      !};
      {! _lp2:=1 .. d[2]-d[1]+1
      |! dni[1][_lp2]:=exec('nominal','godziny',d[1]-1+_lp2,d[1]-1+_lp2,,,1)
      !};
      exec('licz_nt_urlop','lista_licz',d[1],d[2],1,dni[2]);
      exec('licz_gt_urlop','lista_licz',d[1],d[2],1,dni[3]);
:     ┌─────────────────────────────────────────────────┐
:     │             dni przepracowane                   │
:     └─────────────────────────────────────────────────┘
      d[3]:=0;
      {! _lp2:=1 .. d[2]-d[1]+1
      |! d[3]+=(dni[1][_lp2]-dni[2][_lp2]>0 | dni[3][_lp2]>0);
         d[6]+=dni[3][_lp2]>0 & ~__KAL.w_days(date(d[1]~1,d[1]~2,1)+(_lp2-1),date(d[1]~1,d[1]~2,1)+(_lp2-1))
      !};
:     ┌─────────────────────────────────────────────────┐
:     │            sumowanie nieobecnosci               │
:     └─────────────────────────────────────────────────┘
      d[7]:=0;
      {! _lp2:=1 .. (d[2]-d[1]+1)
      |! d[7]+=(dni[1][_lp2]<=dni[2][_lp2] & dni[2][_lp2]>0 & dni[3][_lp2]=0)
      !};
      d[7]+=exec('dnpzazw','nieobecnosc',d[1],d[2],'dr')
   || d[3]:=0
   ?};

   _podst:=0;
   _sklnom:=0;

   _godz[3]:=
      {? _i=0
      || {? _typ='P'
         || FUNKCJE.L(57,,0)+FUNKCJE.L(57)
         || FUNKCJE.L(57)
         ?}
      |? _bez_wyp
      || FUNKCJE.L(57,,_i)
      || FUNKCJE.LP(57,,_i,,1,,1)
      ?};
   {? _godz[3]
   || exec('kal_list','personel');
      _tab:=exec('tab_godz','lista_licz',_Data,1,_i=0 | _bez_wyp);
      _tab.prefix();
      _przelicz:=0;
      {? _tab.first()
      || {!
         |? {? _nk<>exec('ust_nk','lista_licz',date(_tab.ROK,_tab.MC,0),'NK')
            || _przelicz:=1;
               0
            || _tab.next()
            ?}
         !}
      ?};
      exec('kal_prac','personel',O.R);
      {? _przelicz
      || {? _tab.first()
         || _pdgn:=20;
            _pr_noc:=exec('ust_nk','lista_licz',d[2],'PDGN');
            {? _pr_noc & _pr_noc>_pdgn
            || _pdgn:=_pr_noc
            ?};
            _pdgn:=_pdgn/100;
            {!
            |? _st:=(_nk/_tab.NOM)$2*_pdgn$2;
               _val:=_tab.GODZ*_st$2;
               _podst+=_val;
               _opis:='%1*%2'[form(_tab.GODZ,,,'9.'),form(_st,,,'9.')];
               _oTrace.add(122,,_val,'PRZELICZ','E',,,_opis);
               _tab.next()
            !}
         ?}
      || _podst+=
            {? _i=0
            || {? _typ='P'
               || FUNKCJE.L(122,,0,,_oTrace)+FUNKCJE.L(122,,,,_oTrace)
               || FUNKCJE.L(122,,,,_oTrace)
               ?}
            |? _bez_wyp
            || FUNKCJE.L(122,,_i,,_oTrace)
            || FUNKCJE.LP(122,,_i,,1,_oTrace,1)
            ?}
      ?};
      &_przelicz;
      &_tab
   ?};

   {? var_pres('_ekw_nom')>100 || obj_del(_ekw_nom) ?};
   _ekw_nom:=__RUB.sys_rub(432,d[2]);

:: Sprawdzenie czy były nadgodziny z poprzednich miesięcy wystąpienia naliczone w miesiącu badanym.
:: Jeżeli były takie godziny to weryfikacja przeszeregowania będzie odnosiła się do miesiąca wystąpienia nadgodzin.
   _od_nadg:=d[1];
   _tab_G:=exec('rozliczone_godziny','godziny',d[1]~1,d[1]~2,82,8211);

   {? _tab_G.first
   || _od_nadg:=_tab_G.D
   ?};
   &_tab_G;

   {? _przeszer>P.DZA & _przeszer>=_od_nadg & date(_przeszer~1,_przeszer~2,1)<=date(_data_badania~1,_data_badania~2,1)
   || _tab:=exec('tab_godz','lista_licz',_Data,,_i=0 | _bez_wyp,_WY);
      _tab.prefix();
      {? _tab.first()
      || _st1:=_umowa.S1;
         _st2:=_umowa.S2+_umowa.S3;
         {!
         |? {? -(1+_c_p_i)='f' & (-(1+_c_p_i)=-(1+_c_p)) | (-(1+_c_p)='f')
            || _val:=0;

               {? _tab.RODZ=1 | _tab.RODZ=2 | _tab.RODZ=10 | _tab.RODZ=11
               || _val+=_tab.GODZ*(_st1+(_st2/_tab.NOM$2))$2;
                  _opis:='%1*(%2+%3/%4)'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_st2,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ];
                  _minimum:=exec('minkraj_komornik','lista_licz',date(_tab.ROK,_tab.MC,1),,1)$2;
                  _min_nom:=_minimum;
                  _minimum:=_minimum*_tab.GODZ$2;
                  {? _tab.RODZ=10 | _tab.RODZ=11
                  || _val:=_val*0.6$2;
                     _opis+='*0.6';
                     {? _val<_minimum*0.6$2
                     || _val:=_minimum*0.6$2;
                        _opis:='%1*%2*0.6'[form(_tab.GODZ,,,'9.'),form(_min_nom,,,'9.')]
                     ?}
                  || {? _val<_minimum
                     || _val:=_minimum;
                        _opis:='%1*%2'[form(_tab.GODZ,,,'9.'),form(_min_nom,,,'9.')]
                     ?}
                  ?};
                  _oTrace.add(120,,_val,'PRZELICZ','E',,,_opis)
               ?};
               {? _tab.RODZ=5 | _tab.RODZ=7 | _tab.RODZ=8
               || _v0:=_tab.GODZ*(_st1+(_st2/_tab.NOM$2))$2;
                  _oTrace.add(125,,_v0,'PRZELICZ','E',,,'%1*(%2+%3/%4)'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_st2,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=5 & _tab.TYP='S'
               || _v0:=_tab.GODZ*_st1$2;
                  _oTrace.add(126,,_v0,'PRZELICZ','E',,,'%1*%2'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=1 | _tab.RODZ=7 | _tab.RODZ=17
               || _v0:=_tab.GODZ*0.5*_st1$2;
                  _oTrace.add(121,,_v0,'PRZELICZ','E',,,'%1*0.5*%2'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=10
               || _v0:=_tab.GODZ*0.5*_st1*0.6$2;
                  _oTrace.add(121,,_v0,'PRZELICZ','E',,,'%1*0.5*%2*0.6'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=2 | _tab.RODZ=6 | _tab.RODZ=8 | _tab.RODZ=18
               || _v0:=_tab.GODZ*_st1$2;
                  _sk:={? _tab.RODZ=2 | _tab.RODZ=18 || 121 |? _tab.RODZ=6 || 123 |? _tab.RODZ=8 || 125 ?};
                  _oTrace.add(_sk,,_v0,'PRZELICZ','E',,,'%1*%2'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=11
               || _v0:=_tab.GODZ*_st1*0.6$2;
                  _oTrace.add(121,,_v0,'PRZELICZ','E',,,'%1*%2*0.6'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=4
               || _v0:=_tab.GODZ*(_st1+(_st2/_tab.NOM$2))$2+_tab.GODZ*_st1$2;
                  _oTrace.add(123,,_v0,'PRZELICZ','E',,,'%1*(%2+%3/%4)+%1*%2'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_st2,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               _podst+=_val

            || _val:=0;

               {? _tab.RODZ=1 | _tab.RODZ=2 | _tab.RODZ=10 | _tab.RODZ=11 | _tab.RODZ=18 | _tab.RODZ=17
               || _val+=(_tab.GODZ*((_st2+_st1)/_tab.NOM$2))$2;
                  _opis:='%1*(%2+%3)/%4'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_st2,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ];
                  _minimum:=exec('minkraj_komornik','lista_licz',date(_tab.ROK,_tab.MC,1),,1)$2;
                  _min_nom:=_minimum;
                  _minimum:=_minimum*_tab.GODZ$2;
                  {? _tab.RODZ=10 | _tab.RODZ=11
                  || _val:=_val*0.6$2;
                     _opis+='*0.6';
                     {? _val<_minimum*0.6$2
                     || _val:=_minimum*0.6$2;
                        _opis:='%1*%2*0.6'[form(_tab.GODZ,,,'9.'),form(_min_nom,,,'9.')]
                     ?}
                  || {? _val<_minimum
                     || _val:=_minimum;
                        _opis:='%1*%2'[form(_tab.GODZ,,,'9.'),form(_min_nom,,,'9.')]
                     ?}
                  ?};
                  _oTrace.add(120,,_val,'PRZELICZ','E',,,_opis)
               ?};
               {? _tab.RODZ=5 | _tab.RODZ=6 | _tab.RODZ=7 | _tab.RODZ=8
               || _v0:=(_tab.GODZ*((_st2+_st1)/_tab.NOM$2))$2;
                  _oTrace.add(125,,_v0,'PRZELICZ','E',,,'%1*(%2+%3)/%4'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_st2,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=1 | _tab.RODZ=7 | _tab.RODZ=17
               || _v0:=((_tab.GODZ*0.5)*(_st1/_tab.NOM$2))$2;
                  _oTrace.add(121,,_v0,'PRZELICZ','E',,,'%1*0.5*%2/%3'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=10
               || _v0:=((_tab.GODZ*0.5)*(_st1/_tab.NOM$2)*0.6)$2;
                  _oTrace.add(121,,_v0,'PRZELICZ','E',,,'%1*0.5*%2/%3*0.6'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=2 | _tab.RODZ=6 | _tab.RODZ=8 | _tab.RODZ=18
               || _v0:=(_tab.GODZ*(_st1/_tab.NOM$2))$2;
                  _sk:={? _tab.RODZ=2 | _tab.RODZ=18 || 121 |? _tab.RODZ=6 || 123 |? _tab.RODZ=8 || 125 ?};
                  _oTrace.add(_sk,,_v0,'PRZELICZ','E',,,'%1*%2/%3'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=11
               || _v0:=(_tab.GODZ*(_st1/_tab.NOM$2)*0.6)$2;
                  _oTrace.add(121,,_v0,'PRZELICZ','E',,,'%1*%2/%3*0.6'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=4
               || _v0:=_tab.GODZ*((_st2+_st1)/_tab.NOM$2)$2+(_tab.GODZ*(_st1/_tab.NOM$2))$2;
                  _oTrace.add(123,,_v0,'PRZELICZ','E',,,'%1*(%2+%3)/%4+%1*%2/%4'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_st2,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=5 & _tab.TYP='S'
               || _v0:=_tab.GODZ*_st1$2;
                  _oTrace.add(126,,_v0,'PRZELICZ','E',,,'%1*%2'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=13
               || _minimum:=exec('minkraj_komornik','lista_licz',date(_tab.ROK,_tab.MC,1),,1)$2;
                  _st_min:=_minimum;
                  _minimum:=_minimum*_tab.GODZ$2;
                  _v0:=_tab.GODZ*((_st2+_st1)/_tab.NOM$2)$2;
                  {? _v0<_minimum
                  || _v0:=_minimum;
                     _oTrace.add(7052,,_v0,'PRZELICZ','E',,,'%1*%2'[
                     form(_tab.GODZ,,,'9.'),form(&_st_min,,,'9.')])
                  || _oTrace.add(7052,,_v0,'PRZELICZ','E',,,'%1*(%2+%3)/%4'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_st2,,,'9.'),form(_tab.NOM$2,,,'9.')
                     ])
                  ?};
                  _val+=_v0
               ?};
               {? _tab.RODZ=16
               || _v0:=_tab.GODZ*((_st2+_st1)/_tab.NOM$2)$2;
                  _oTrace.add(7058,,_v0,'PRZELICZ','E',,,'%1*(%2+%3)/%4'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_st2,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=12
               || _v0:=(_tab.GODZ*(_st1/_tab.NOM$2))$2;
                  _oTrace.add(7054,,_v0,'PRZELICZ','E',,,'%1*%2/%3'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=14
               || _v0:=(_tab.GODZ*(_st1/_tab.NOM$2))$2;
                  _oTrace.add(7040,,_v0,'PRZELICZ','E',,,'%1*%2/%3'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               {? _tab.RODZ=15
               || _v0:=(_tab.GODZ*(_st1/_tab.NOM$2))$2;
                  _oTrace.add(7050,,_v0,'PRZELICZ','E',,,'%1*%2/%3'[
                     form(_tab.GODZ,,,'9.'),form(_st1,,,'9.'),form(_tab.NOM$2,,,'9.')
                  ]);
                  _val+=_v0
               ?};
               _podst+=_val
            ?};
::          Wtyczka umożliwiajaca przeliczenie wynagrodzenia za godziny niestandardowe
            params_set('tab',_tab,'c_p',_c_p,'c_p_i',_c_p_i,'oTrace',_oTrace,'umowa',_umowa);
            _val:=Plugin.run('PPL_PLL_NALS_EKWIWAL');
            _podst+=_val;
            _tab.next
         !}
      ?};
      &_tab;

      {? -(1+_c_p_i)='f' & (-(1+_c_p_i)=-(1+_c_p)) | (-(1+_c_p)='f')
      || {? -(1+_c_p_i)='f' & (-(1+_c_p_i)=-(1+_c_p))
         || _lg:=
               {? _i=0
               || {? _tab_r_godz
                  || {? _typ='P'
                     || FUNKCJE.L_SYS(1011213,0)+FUNKCJE.L_SYS(1011213)
                     || FUNKCJE.L_SYS(1011213)
                     ?}
                  || {? _typ='P'
                     || FUNKCJE.L(48,,0)+FUNKCJE.L(54,,0)+FUNKCJE.L(63,,0)+FUNKCJE.L(67,,0)+FUNKCJE.L(65,,0)+
                        FUNKCJE.L(48)+FUNKCJE.L(54)+FUNKCJE.L(63)+FUNKCJE.L(67)+FUNKCJE.L(65)+
                        FUNKCJE.LP(48,,0,,1)+FUNKCJE.LP(54,,0,,1)+FUNKCJE.LP(63,,0,,1)+FUNKCJE.LP(67,,0,,1)+
                        FUNKCJE.LP(65,,0,,1)
                     || FUNKCJE.L(48)+FUNKCJE.L(54)+FUNKCJE.L(63)+FUNKCJE.L(67)+FUNKCJE.L(65)+
                        FUNKCJE.LP(48,,0,,1)+FUNKCJE.LP(54,,0,,1)+FUNKCJE.LP(63,,0,,1)+FUNKCJE.LP(67,,0,,1)+
                        FUNKCJE.LP(65,,0,,1)
                     ?}
                  ?}
               |? _bez_wyp
               || {? _tab_r_godz
                  || FUNKCJE.L_SYS(1011213,_i)
                  || FUNKCJE.L(48,,_i)+FUNKCJE.L(54,,_i)+FUNKCJE.L(63,,_i)+FUNKCJE.L(67,,_i)+
                     FUNKCJE.L(65,,_i)
                  ?}
               || {? _tab_r_godz
                  || FUNKCJE.LP_SYS(1011213,_i,,1,,,1)
                  || FUNKCJE.LP(48,,_i,,1,,1)+FUNKCJE.LP(54,,_i,,1,,1)+FUNKCJE.LP(63,,_i,,1,,1)+
                     FUNKCJE.LP(67,,_i,,1,,1)+FUNKCJE.LP(65,,_i,,1,,1)
                  ?}
               ?}
         || _Norma:=exec('nominal','godziny',d[1],d[2],,,1); _Nieob:=0;
            {? _Norma=0
            || RAPLS.msg(
                  P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                  'Brak informacji o kalendarzu pracownika.'@,
                  exec('retry_msg','lista_licz')
               )
            ?};
            {? _Norma>0
            || _Nieob+=exec('licz_nie_urlop','!ppl_pll_nals',d[1],d[2],1)
            ?};
            _lg:=_Norma-_Nieob; {? _lg<0 || _lg:=0 ?}
         ?};
         _v0:=(_lg*_umowa.S1)$2;
         {? _v0>0
         || _podst+=_v0;
            _oTrace.add(100,,_v0,'PRZELICZ','E',,,'%1*%2'[
               form(_lg,,,'9.'),form(_umowa.S1,,,'9.')
            ])
         ?}
      ?};
      H.cntx_psh();
      H.index('_HISTKOD');
      H.prefix(P.ref(),'Z');
      {? H.find_le(d[2])
      || _hsx:=exec('hsx','lista_licz',d[2],d[2],_typ_val);
         _s1:=_hsx.S1;
         _s2:=_hsx.S2;
         _s3:=_hsx.S3;
         obj_del(_hsx);
         &_hsx
      || _s1:=_s2:=_s3:=0
      ?};
      H.cntx_pop();
      {? _ekw_nom.first()
      || R.cntx_psh();
         R.prefix();
         {!
         |? {? R.seek(_ekw_nom.R) & R.EKW='T'
            || {? _i=0
               || {? _typ='P'
                  || _sklnom+=FUNKCJE.L(_ekw_nom.RN,,0,,_oTrace)+FUNKCJE.L(_ekw_nom.RN,,,,_oTrace)
                  || _sklnom+=FUNKCJE.L(_ekw_nom.RN,,,,{? _typ='E' || _nTrace || _oTrace ?})
                  ?}
               ?};
               {? _bez_wyp
               || _sklnom+=FUNKCJE.L(_ekw_nom.RN,,_i,,{? _typ='E' || _nTrace || _oTrace ?})
               || _sklnom+=FUNKCJE.LP(_ekw_nom.RN,,_i,,1,{? _typ='E' || _nTrace || _oTrace ?},1)
               ?}
            ?};
            _ekw_nom.next()
         !};
         R.cntx_pop()
      ?};
      _podst+=LICZ.Wylicz(_i,'.EKW',,_oTrace,_s1,_umowa.S1,_s2,_umowa.S2,_s3,_umowa.S3,1,_bez_wyp);
      {? _i=0
      || _podst+=LICZ.Wylicz(,'.EKW',,_oTrace,_s1,_umowa.S1,_s2,_umowa.S2,_s3,_umowa.S3,1)
      ?};
      _podst-=_sklnom
   || _podst+=
         {? _i=0
         || {? _tab_wyn_godz
            || {? _typ='P'
               || FUNKCJE.L_SYS(1011221,0,,_oTrace)+FUNKCJE.L_SYS(1011221,,,_oTrace)
               || FUNKCJE.L_SYS(1011221,,,_oTrace)
               ?}
            || {? _typ='P'
               || FUNKCJE.L(120,121,0,,_oTrace)+FUNKCJE.L(123,,0,,_oTrace)+FUNKCJE.L(125,126,0,,_oTrace)+
                  FUNKCJE.L(7040,7040,0,,_oTrace)+FUNKCJE.L(7050,7050,0,,_oTrace)+FUNKCJE.L(7052,7052,0,,_oTrace)+
                  FUNKCJE.L(7054,7054,0,,_oTrace)+FUNKCJE.L(7058,7058,0,,_oTrace)+
                  FUNKCJE.L(120,121,,,_oTrace)+FUNKCJE.L(123,,,,_oTrace)+FUNKCJE.L(125,126,,,_oTrace)+
                  FUNKCJE.L(7040,7040,,,_oTrace)+FUNKCJE.L(7050,7050,,,_oTrace)+FUNKCJE.L(7052,7052,,,_oTrace)+
                  FUNKCJE.L(7054,7054,,,_oTrace)+FUNKCJE.L(7058,7058,,,_oTrace)
               || FUNKCJE.L(120,121,,,_oTrace)+FUNKCJE.L(123,,,,_oTrace)+FUNKCJE.L(125,126,,,_oTrace)+
                  FUNKCJE.L(7040,7040,,,_oTrace)+FUNKCJE.L(7050,7050,,,_oTrace)+FUNKCJE.L(7052,7052,,,_oTrace)+
                  FUNKCJE.L(7054,7054,,,_oTrace)+FUNKCJE.L(7058,7058,,,_oTrace)
               ?}
            ?}
         |? _bez_wyp
         || {? _tab_wyn_godz
            || FUNKCJE.L_SYS(1011221,_i,,_oTrace)
            || FUNKCJE.L(120,121,_i,,_oTrace)+FUNKCJE.L(123,,_i,,_oTrace)+FUNKCJE.L(125,126,_i,,_oTrace)+
               FUNKCJE.L(7040,7040,_i,,_oTrace)+FUNKCJE.L(7050,7050,_i,,_oTrace)+FUNKCJE.L(7052,7052,_i,,_oTrace)+
               FUNKCJE.L(7054,7054,_i,,_oTrace)+FUNKCJE.L(7058,7058,_i,,_oTrace)
            ?}
         || {? _tab_wyn_godz
            || FUNKCJE.LP_SYS(1011221,_i,,1,_oTrace,,1)
            || FUNKCJE.LP(120,121,_i,,1,_oTrace,1)+FUNKCJE.LP(123,,_i,,1,_oTrace,1)+FUNKCJE.LP(125,126,_i,,1,_oTrace,1)+
               FUNKCJE.LP(7040,7040,_i,,1,_oTrace,1)+FUNKCJE.LP(7050,7050,_i,,1,_oTrace,1)+
               FUNKCJE.LP(7052,7052,_i,,1,_oTrace,1)+FUNKCJE.LP(7054,7054,_i,,1,_oTrace,1)+
               FUNKCJE.LP(7058,7058,_i,,1,_oTrace,1)
            ?}
         ?};
      {? -(1+_c_p_i)='f'
      || _podst+=
            {? _i=0
            || {? _typ='P'
               || FUNKCJE.L(100,,0,,_oTrace)+FUNKCJE.L(100,,,,_oTrace)
               || FUNKCJE.L(100,,,,_oTrace)
               ?}
            |? _bez_wyp
            || FUNKCJE.L(100,,_i,,_oTrace)
            || FUNKCJE.LP(100,,_i,,1,_oTrace,1)
            ?}
      ?};
      _podst+=LICZ.Wylicz(_i,'.EKW',,_oTrace,,,,,,,1,_bez_wyp);
      {? _ekw_nom.first()
      || R.cntx_psh();
         R.prefix();
         {!
         |? {? R.seek(_ekw_nom.R) & R.EKW='T'
            || {? _i=0
               || {? _typ='P'
                  || _sklnom+=FUNKCJE.L(_ekw_nom.RN,,0,,_oTrace)+FUNKCJE.L(_ekw_nom.RN,,,,_oTrace)
                  || _sklnom+=FUNKCJE.L(_ekw_nom.RN,,,,{? _typ='E' || _nTrace || _oTrace ?})
                  ?}
               ?};
               {? _bez_wyp
               || _sklnom+=FUNKCJE.L(_ekw_nom.RN,,_i,,{? _typ='E' || _nTrace || _oTrace ?})
               || _sklnom+=FUNKCJE.LP(_ekw_nom.RN,,_i,,1,{? _typ='E' || _nTrace || _oTrace ?},1)
               ?}
            ?};
            _ekw_nom.next()
         !};
         R.cntx_pop()
      ?};
      {? _i=0
      || _podst+=LICZ.Wylicz(,'.EKW',,_oTrace,,,,,,,1)
      ?};
      _podst-=_sklnom
   ?};

   {? d[3]>0
   || {? ~_licznik & ~_lpod & (_podst+_sklnom) || _lpod:=1 ?};
      {? _lpod
      || d[4]+=d[3];
         d[5]+=d[7]
      ?};

      _wsklnom+=_sklnom;
      {? _lpod | _podst+_sklnom
      || _nd:=__KAL.w_days(d[1],d[2]);
         _licznik+=1;
         {? _typ='E'
         || _PO.PutMc(1,_licznik,_podst,_nd,d[3],0,'T',_Data,'A');
            __PN.PutMc(1,_licznik,_sklnom,_nd,d[3],0,'T',_Data,'A')
         |? _typ='N' & N.seek(_N_ref)
         || __PN.PutMc(1,_licznik,_podst,_nd,d[3],0,'T',_Data,'A',_oTrace)
         ?}
      ?};
      _w+=_podst;
::    zapisz składniki zmienne i nominalne uwzględnione w wyliczeniu podstawy
      {? _typ='E'
      || exec('ekwiwalent_zask','lista_licz',_h_um,'Z',_Data~1,_Data~2,_oTrace);
         exec('ekwiwalent_zask','lista_licz',_h_um,'N',_Data~1,_Data~2,_nTrace)
      ?}
   ?};

:: UWAGA: .Wylicz uwzględnia składniki nominalne, należy je usunąć z H_UM_ESK
   {? _typ='E' & _sklnom<>0 & _ekw_nom.first()
   || H_UM_ESK.cntx_psh();
      H_UM_ESK.index('UNIQUE');
      H_UM_ESK.prefix(_h_um,'Z',_Data~1,_Data~2);
      {!
      |? {!
         |? H_UM_ESK.find_tab(,'SK_KOD',,'=',_ekw_nom.RN)
         |! H_UM_ESK.del()
         !};
         _ekw_nom.next()
      !};
      H_UM_ESK.cntx_pop()
   ?};

   _licznik<_ile_mc
!};
{? _typ='N' & N.seek(_N_ref)
|| _w0:=0;
   _oTrace.erase();
   {? 1+_c_p='U'
   || _w0:=FUNKCJE.L(90,94,,,_oTrace)
   || {? _w=0
      || _w0+=(
         {? _data_badania<>date(0,0,0) & _data_badania<_list_d
         || __KAL.w_hours(date(_data_badania~1,_data_badania~2,1),date(_data_badania~1,_data_badania~2,0))
         || __KAL.w_hours(date(_list_d~1,_list_d~2,0),_list_d)
         ?}*
         FUNKCJE.L(91,,,,_oTrace))
      ?}+(_w0+=FUNKCJE.L(92,94,,,_oTrace))
   ?};
   _oTrace.add(0,'Wsp. do ekwiwalentu',_EKW*_wymiar$2,'WSP_EKW','W',,,'Wartość współczynnika do ekwiwalentu');
   __PN.PutMc(1,_licznik+1,_w0,0,0,0,'T',_data_badania,'A',_oTrace);
   __PN.Put(1,N.NB().RN,N.OD,_Data,date(0,0,0),_w,_N_ref);
   __PN.Pod(Finish);
   __PN.Zapisz(1);
   exec('zap_tab','lista_licz',_N_ref);
   __PN.Delete()
?};
{? _typ='P'
|| _w0:=0;
   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {? H.find_le(_data_badania)
   || _cp:=H.CP().S;
      _hsx:=exec('hsx','lista_licz',_data_badania,_data_badania,_typ_val);
      _wyn_zas:=_hsx.S1;
      _dodatki:=_hsx.S2+_hsx.S3;
      obj_del(_hsx);
      &_hsx;
      {? 1+_c_p='U'
      || _w0:=_wyn_zas+_dodatki
      || {? _w=0
         || _w0+=(
            {? _data_badania<>date(0,0,0) & _data_badania<_list_d
            || __KAL.w_hours(date(_data_badania~1,_data_badania~2,1),date(_data_badania~1,_data_badania~2,0))
            || __KAL.w_hours(date(_list_d~1,_list_d~2,0),_list_d)
            ?}*
            _wyn_zas)
         ?};
         _w0+=_dodatki
      ?}
   ?}
?};

H.cntx_pop();
N.cntx_pop();

:: zapisz kwoty uwzględnione w wyliczeniu podstawy
{? _typ='E'
|| exec('ekwiwalent_zapo','lista_licz',_h_um,'Z',_PO,_licznik);
   exec('ekwiwalent_zapo','lista_licz',_h_um,'N',__PN,_licznik);
:: zapisz składniki z bieżącego miesiąca uwzględnione w wyliczeniu podstawy
   _oTrace.erase();
   _w0:=0;
   {? _h_um
   ||
::  sumowanie danych o zaszeregowaniu z odpowiedniego przebiegu zatrudnienia
      _s_zasad:=_stawka_h_um.S1;
      _s_dod1:=_stawka_h_um.S2;
      _s_dod2:=_stawka_h_um.S3;
      _s_dod:=_s_dod1+_s_dod2;
      &_stawka_h_um;

      {? 1+_c_p='F'
      || _nr_zasad:=91;
         _nr_dod1:=93;
         _nr_dod2:=94
      || _nr_zasad:=90;
         _nr_dod1:=92;
         _nr_dod2:=94;
         _oTrace.add(_nr_zasad,,_s_zasad,'','E',,,'%1%2'['Nominalna płaca zasadnicza - na dzień: ',$_data_badania])
      ?};
::  wprowadzenie danych do tabeli śledzenia
      _oTrace.add(_nr_dod1,,_s_dod1,'','E',,,'%1%2'['Dodatki angaż - na dzień: ',$_data_badania]);
      _oTrace.add(_nr_dod2,,_s_dod2,'','E',,,'%1%2'['Dodatki angaż - na dzień: ',$_data_badania]);
      &_s_dod1;
      &_s_dod2;
      &_nr_dod1;
      &_nr_dod2
   || _nr_zasad:=90;
      _s_zasad:=FUNKCJE.L(90,91,,,_oTrace);
      _s_dod:=FUNKCJE.L(92,94,,,_oTrace)
   ?};
   {? 1+_c_p='F'
   || {? _w=0
      || _w0+=_wyl_zasad:=(
         {? _data_badania<>date(0,0,0) & _data_badania<_list_d
         || __KAL.w_hours(date(_data_badania~1,_data_badania~2,1),date(_data_badania~1,_data_badania~2,0))
         || __KAL.w_hours(date(_list_d~1,_list_d~2,0),_list_d)
         ?}*_s_zasad);
         _oTrace.add(_nr_zasad,,_wyl_zasad,'','E',,,'%1%2'['Wyliczona płaca zasadnicza - na dzień: ',$_data_badania])
      ?}+(_w0+=_s_dod)
   || _w0+=(_s_zasad+_s_dod)
   ?};
   &_s_zasad;
   &_s_dod;
   &_nr_zasad;
   exec('ekwiwalent_zask','lista_licz',_h_um,'S',_data_badania~1,_data_badania~2,_oTrace);

   _PO.Delete();
   _PO.Create(1);
   _PO.NewMc(1,1);
   _PO.PutMc(1,1,_w0,0,0,0,'T',_data_badania,'A');
:: zapisz kwoty uwzględnione w wyliczeniu podstawy
   exec('ekwiwalent_zapo','lista_licz',_h_um,'S',_PO,1);

:: dla zapisu informacji niezbędnych do wyliczenia ekwiwalentu
   _buf:=exec('ekwiwalent_bpom','lista_licz');
:: ustaw wspólne wartości
   _buf.H_UM:=_h_um;
   _buf.K:='I';
   _buf.R:=_ex_r;
   _buf.M:=_ex_m;
   _buf.LT:=O.LT;

:: odpisz wartości pośrednie
   _buf.zapisz('LMC','Liczba miesięcy',_licznik);
   _buf.zapisz('ED4','Dni przepracowane',d[4]);
   _buf.zapisz('ED5','Dni nieobecności',d[5]);
   _buf.zapisz('ED6','Dni przepracowane',d[6]);
   _buf.zapisz('WSP','Współczynnik do ekw.',_EKW);
   _buf.zapisz('WYM','Wymiar zatrudnienia',_wymiar);
   _buf.zapisz('L72','Dni/godz.niewyk.url.',FUNKCJE.L(72));
   _buf.zapisz('NGK','Dobowa norma godzin',
      {? 2004<=O.R
      || exec('norma','godziny',{? _data_badania<>date(0,0,0) || _data_badania || date(O.R,O.M,0) ?})
      || 1
      ?}
   );
   _PO.Delete();
   __PN.Delete()
?};

_kw_okr:=0;
_lm:=_licznik;
:: Dodanie premii okresowych
{? exec('test_par','parametr',279,'T')
|| PREM_OKR.cntx_psh();
   PREM_OKR.index('PREM_LST');
   PREM_OKR.prefix(P.ref());
   {? PREM_OKR.first()
   || _licznik:=0;
      {? _typ='E'
      || _tab_okr:=tab_tmp(3,
            'ROK','INTEGER','Rok',
            'MC','INTEGER','Miesiąc',
            'D','DATE','Data',
            'RP','STRING[1]','Rodzaj premii',
            'KW','REAL','Kwota',
            'LT','STRING[8]','Lista płac',
            'RN','INTEGER','Numer rubryki',
            'RT','STRING[20]','Opis rubryki',
            'OD','DATE','Data od',
            'DO','DATE','Data do'
         );
         _tab_add:="
            _a.LT:=PREM_OKR.LT;
            _a.ROK:=O.RP;
            _a.MC:=O.MP;
            _a.RP:=PREM_OKR.RP;
            _a.KW:=LS.KW;
            _a.D:=date(O.RP,O.MP,1);
            _a.RN:=LS.RB().RN;
            _a.RT:=LS.RB().RT;
            _a.OD:=PREM_OKR.O_OD;
            _a.DO:=PREM_OKR.O_DO;
            _a.add()"
      |? _typ='N' & N.seek(_N_ref)
      || exec('define_skl_okr','lista_licz')
      ?};
      _dni_okr:=_dni_prac:=0;
      {! _i:=_l.._k
      |? _Data:=date(O.R,O.M-_i,1);
         _od:=_Data;
         _do:=date(O.R,O.M-_i,0);
         _Norma:=__KAL.w_days(_od,_do);
::       W przypadku zatrudnienia w trakcie miesiąca pomniejszamy normę
::       do przepracowania o okres, w którym nie był zatrudniony i nie jest
::       ten czas uzupełniany do pełnego miesiąca
         _Norma-=exec('dnpzazw','nieobecnosc',_od,_do,'dr');
         {? _Norma<0 || _Norma:=0 ?};
         _Nieob:=0;
         {? _Norma>0
         || _Nieob+=exec('licz_nie_urlop','!ppl_pll_nals',_od,_do)
         ?};
         _praca:=_Norma-_Nieob;
         {? _praca<0 || _praca:=0 ?};
         _dni_okr+=_Norma;
         _dni_prac+=_praca;
         O.cntx_psh();
         O_P.cntx_psh();
         O_P.index('P_RMP');
         O_P.prefix('T',P.ref(),_Data~1,_Data~2);
         LS.cntx_psh();
         _licznik+=1;
         _d_okr:=0;
         {? _i & O_P.first()
         || {!
            |? PREM_OKR.prefix(P.ref(),~O_P.O().LT);
               {? PREM_OKR.first()
               || {!
                  |? {? PREM_OKR.RP<>'M' &
                        (PREM_OKR.O_OD~1*12+PREM_OKR.O_OD~2)<(PREM_OKR.O_DO~1*12+PREM_OKR.O_DO~2)
                     || LS.use(O_P.O().LT);
                        LS.index('PRACORUB');
                        LS.prefix(P.ref());
                        {? LS.find_key(PREM_OKR.SKP().R)
                        || _kw_okr+=LS.KW;
                           {? _typ='E'
                           || _tab_add(_tab_okr)
                           |? _typ='N' & N.seek(_N_ref)
                           || __SK_CHO.prefix;
                              __SK_CHO.blank(1);
                              __SK_CHO.REF:=#PREM_OKR.ref();
                              __SK_CHO.R:='P';
                              __SK_CHO.O:=PREM_OKR.RP;
                              __SK_CHO.MC:=PREM_OKR.O_OD;
                              __SK_CHO.OD:=PREM_OKR.O_OD;
                              __SK_CHO.DO:=PREM_OKR.O_DO;
                              __SK_CHO.SKL:=PREM_OKR.SKP().R().RT;
                              __SK_CHO.SKL_NR:=PREM_OKR.SKP().R().RN;
                              __SK_CHO.K_B:=LS.KW$2;
                              __SK_CHO.K_N:=__SK_CHO.K_B;
                              __SK_CHO.LT:=PREM_OKR.LT;
                              __SK_CHO.TYP:='P';
                              __SK_CHO.REF_N:=#_N_ref;
                              __SK_CHO.PRC:=0;
                              __SK_CHO.UWAGI:='';
                              __SK_CHO.OPIS:=$#_N_ref;
                              __SK_CHO.add();
                              __SK_CHO.R:='X';
                              __SK_CHO.add()
                           ?}
                        ?}
                     ?};
                     PREM_OKR.next()
                  !}
               ?};
               O_P.next()
            !}
         ?};
         LS.cntx_pop();
         O.cntx_pop();
         O_P.cntx_pop();
         _licznik<12
      !};
      {? _kw_okr
      || {? _typ='E' & _tab_okr.first()
         || _buf.zapisz('OLM','Liczba miesięcy okr.',_licznik);
            _buf.zapisz('ODP','Dni przeprac. okr.',_dni_prac);
            _buf.zapisz('ODN','Dni nominalne. okr.',_dni_okr);
            _oTrace.erase();
            _d_okr:=_tab_okr.D;
            _kw_okr:=_MC:=_ROK:=0;
            _PO.Delete();
            _PO.Create(1);
            _PO.NewMc(1,_licznik);
            _licznik:=0;
            _ok:=0;
            {!
            |? {!
               |? _oTrace.add(_tab_okr.RN,,_tab_okr.KW,_tab_okr.LT,'E',,,'%1-%2'[
                  form(_tab_okr.OD,,,'9.'),form(_tab_okr.DO,,,'9.')]);
                  _kw_okr+=_tab_okr.KW;
                  _MC:=_tab_okr.MC;
                  _ROK:=_tab_okr.ROK;
                  _ok:=_tab_okr.next();
                  _ok & _d_okr=_tab_okr.D
               !};
               exec('ekwiwalent_zask','lista_licz',_h_um,'O',_ROK,_MC,_oTrace);
               _oTrace.erase();
               _licznik+=1;
               _PO.PutMc(1,_licznik,_kw_okr,0,0,0,'T',_d_okr,'A');
               _kw_okr:=0;
               _d_okr:=_tab_okr.D;
               _ok
            !};
            exec('ekwiwalent_zapo','lista_licz',_h_um,'O',_PO,_licznik);
            _PO.Delete()
         |? _typ='N' & N.seek(_N_ref)
         ||  __SK_CHO.index(__SK_ND4);
             __SK_CHO.prefix(#_N_ref,'X');
             {? __SK_CHO.first
             || {!
                |? {? ~_dni_prac
                   || __SK_CHO.K_B:=__SK_CHO.K_B/_licznik$2
                   || __SK_CHO.K_B:=__SK_CHO.K_B*_dni_okr/_dni_prac/_licznik$2
                   ?};
                   __SK_CHO.K_N:=__SK_CHO.K_B;
                   __SK_CHO.put();
                   __SK_CHO.next()
                !}
             ?};
            exec('sk_cho_zapisz','skladniki_okresowe',1);
            exec('end_prem_skl_okr','lista_licz')
         |? _typ='P'
         || {? ~_dni_prac
            || _kw_okr:=_kw_okr/_licznik$2
            || _kw_okr:=_kw_okr*_dni_okr/_dni_prac/_licznik$2
            ?}
         ?}
      ?}
   ?};
   PREM_OKR.cntx_pop()
?};

_wynik:=
   {? _typ='E'
   || _w:=exec('ekwiwalent','lista_licz',_h_um,0);
      {? type_of(_w)=type_of(0)
      || _w
      ?}
   |? _typ='N'
   || exec('n_aktualizuj_podstawy','nieobecnosc',,,1);
      N.WART
   |? _typ='P'
   || _pod:=0;
      {? _w+_w0 & _lm
      || {? d[4]>0
         || _pod:=_w/d[4]*(d[4]+d[5]-d[6])$2
         ?};
         _pod/=_lm$2
      ?};
      {? _wsklnom>0 & _lm
      || _pod+=(_wsklnom/_lm)$2
      ?};
      _pod+=_kw_okr+_w0;
      _pod$2
   ?};
VAR_DEL.delete('d','dni','Finish');
_wynik


\narzuty_firmy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JAKOLTUN [21.37]
:: OPIS: Obliczanie narzutów pracodawcy
::   WE: _a - osoba [REF]
::       [_b] - data obliczania [DATE]
::   WY: suma procent narzutów pracodawcy [INTEGER]
::----------------------------------------------------------------------------------------------------------------------
_narzuty:=0;
_data:={? var_pres('_b')=type_of(date) || _b || date(O.R,O.M,0) ?};

_bl:=exec('spr_blok_podst_sk','lista_licz',_a,_data);

_par:=obj_new('PRFE','PRFRF','PRFW','FP','FGSP');
exec('czytaj','#stalesys',_data,KST,'PRFE','PRFRF','PRFW','FP','FGSP');
_par.PRFE:=KST.PRFE/2;
_par.PRFRF:=KST.PRFRF;
_par.PRFW:=KST.PRFW;
_par.FP:=KST.FP;
_par.FGSP:=KST.FGSP;
exec('czytaj','#stalesys',date(O.RU,O.MU,0),KST,'PRFE','PRFRF','PRFW','FP','FGSP');

_narzuty:=_par.PRFW+_par.FP+_par.FGSP;
{? type_of(_bl)=type_of(0)
|| _narzuty+=_par.PRFE+_par.PRFRF
?};
_narzuty


\define_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Deklaracja klas wykorzystywanych podczas obliczeń listy płac.
::   WE:
::   WY:
::  OLD: \define/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('Mc',@.CLASS)<=0
|| obj_decl('Mc',
      obj_fld('Kwota',0),
      obj_fld('Norma',0),
      obj_fld('Praca',0),
      obj_fld('NN',0),
      obj_fld('Status',''),
      obj_fld('Data',date(0,0,0)),
      obj_fld('ModStat','A'),
      obj_fld('Trace',~~),

      obj_meth('__init',"
         {? var_pres('_b')=type_of(0) || _a.Kwota:=_b || _a.Kwota:=0 ?};
         {? var_pres('_c')=type_of(0) || _a.Norma:=_c || _a.Norma:=0 ?};
         {? var_pres('_d')=type_of(0) || _a.Praca:=_d || _a.Praca:=0 ?};
         {? var_pres('_e')=type_of(0) || _a.NN:=_e || _a.NN:=0 ?};
         {? var_pres('_f')=type_of(' ') || _a.Status:=_f || _a.Status:='' ?};
         {? var_pres('_g')=type_of(date(0,0,0)) || _a.Data:=_g || _a.Data:=date(0,0,0) ?};
         {? var_pres('_h')=type_of('') || _a.ModStat:=_i || _a.ModStat:='A' ?};
         _a.Trace:=obj_new(@.CLASS.Trace)
      ")
   )
?};

{? var_pres('NIEOBECN',@.CLASS)<=0
|| obj_decl('NIEOBECN',
      obj_fld('Kod',0),
      obj_fld('Data',date(0,0,0)),
      obj_fld('Od',date(0,0,0)),
      obj_fld('Do',date(0,0,0)),
      obj_fld('Podstawa',0),
      obj_fld('Wskaznik',null),
      obj_fld('Stale',' '),
      obj_fld('Mc','')
   )
?};

{? var_pres('PNIEO',@.CLASS)<=0
|| obj_decl('PNIEO',
      obj_fld('Array',~~),
      obj_fld('TraceType',-1),

      obj_meth('__init',"
         _a.TraceType:=var_pres('Trace',@.CLASS);
         _a.Create(_b)
      "),

      obj_meth('Delete',"
         {? var_pres('Array',.)
         || obj_del(.Array);
            Array:=~~
         ?}
      "),

      obj_meth('Create',"
         .Array:=obj_new(_a);
         {! _n:=1..obj_len(.Array)
         |! .Array[_n]:=obj_new(@.CLASS.NIEOBECN)
         !}
      "),

      obj_meth('Put',"
         {? var_pres('_a')=type_of(0)
         || {| .Array[_a]
            |! {? var_pres('_b')=type_of(0) || Kod:=_b ?};
               {? var_pres('_c')=type_of(date(0,0,0)) || Data:=_c ?};
               {? var_pres('_d')=type_of(date(0,0,0)) || Od:=_d ?};
               {? var_pres('_e')=type_of(date(0,0,0)) || Do:=_e ?};
               {? var_pres('_f')=type_of(0) || Podstawa:=_f ?};
               {? var_pres('_g')=type_of(null) || Wskaznik:=_g ?};
               {? var_pres('_h')=type_of(' ') || Stale:=_h ?}
            |}
         ?}
      "),

      obj_meth('Dat',".Array[_a].Data"),

      obj_meth('Kod',".Array[_a].Kod"),

      obj_meth('Od',".Array[_a].Od"),

      obj_meth('Do',".Array[_a].Do"),

      obj_meth('Wsk',".Array[_a].Wskaznik"),

      obj_meth('Pod',".Array[_a].Podstawa"),

      obj_meth('Stale',".Array[_a].Stale"),

      obj_meth('Size',"obj_len(.Array)"),

      obj_meth('PutMc',"
         {? var_pres('_a')=type_of(0) & var_pres('_b')=type_of(0)
         || {| .Array[_a].Mc[_b]
            |! {? var_pres('_c')=type_of(0) || Kwota+=_c ?};
               {? var_pres('_d')=type_of(0) || Norma:=_d ?};
               {? var_pres('_e')=type_of(0) || Praca:=_e ?};
               {? var_pres('_f')=type_of(0) || NN:=_f ?};
               {? var_pres('_g')=type_of('') || Status:=_g ?};
               {? var_pres('_h')=type_of(date(0,0,0)) || Data:=_h ?};
               {? var_pres('_i')=type_of('') || ModStat:=_i ?};
               {? var_pres('_j')=.TraceType || Trace.add(_j) ?}
            |}
         ?}
      "),

      obj_meth('Find',"
         {? N.OD>=date(2004,7,1)
         || _nie:=129
         || _nie:=126
         ?};
         _val:=_exit:=0;
         {! _i:=1..Finish
         |? ~_exit
         |! _kod:=.Kod(_i);
            {? {? __RUB.sys_attr(_a,_nie,N.OD)
               || __RUB.sys_attr(_kod,_nie,N.OD)
               || _a=_kod
               ?}
               & {? var_pres('_b')=type_of(date) || .Od(_i)=_b || 1 ?}
               & {? var_pres('_c')=type_of(date) || .Do(_i)=_c || 1 ?}
               & {? var_pres('_d')=type_of(' ') || .Stale(_i)=_d || 1 ?}
            || _ustal:=1;
               {? __RUB.sys_attr(N.NB,129,N.OD)
               || N.cntx_psh();
                  N.clear();
                  {? N.seek(.Wsk(_i))
                  || {? N.OD<__STALE.D_TRYB & __STALE.ZM_POD
                     || _ustal:=0
                     ?}
                  ?};
                  N.cntx_pop()
               ?};
               {? N.PRZELICZ='T'
               || _ustal:=0
               ?};
               {? _ustal
               || _exit:=_val:=1;
                  Wskaznik:=.Wsk(_i);
                  Podstawa:=.Pod(_i)
               ?}
            ?}
         !};
         {? N.PRZELICZ<>'T' &
            _a<>KST_PAR.URLOP().RN & _a<>KST_PAR.URL_CHOR().RN &
            ~__RUB.sys_attr(_a,116,N.OD) & ~__RUB.sys_attr(_a,131,N.OD)
         || _chp:=exec('nw_find_chp','nieobecnosc',N.ref());
            {? _chp=N.ref()
            || Wskaznik:=_chp;
               Podstawa:=_val:=0
            ?}
         ?};
         _val
      "),

      obj_meth('Zapisz',"
         {? var_pres('_b')=-1
         || _b:=N.ref()
         ?};
         _Podstawa:=_Mc:=0;
         _size:=obj_len(.Array[Finish].Mc);
         .SprStat(Finish);
         _Do:=.Array[Finish].Mc[1].Data;
         _Do:=date(_Do~1,_Do~2,0);
         _Od:=.Array[Finish].Mc[_size].Data;
         EDIT_VAR.RODZ_TZ:='E';
         TZ.use('tabz'+$(N.OD~1));
         TZ.index('ZASTAB');
         TZ.prefix('E',_b);
         {? TZ.first() & ~__KORZ
         || {!
            |? TZ.del()
            !}
         ?};
         {! _i:=1.._size
         |! {| .Array[Finish].Mc[_i]
            |! @.TZ.blank();
               @.TZ.OS_N:=null;
               @.TZ.N:=_b;
               @.TZ.KW:=Kwota;
               @.TZ.M:=Data;
               @.TZ.NO:=Norma;
               @.TZ.PR:=Praca;
               @.TZ.NN:=NN;
               @.TZ.W:=Status;
               @.TZ.STATUS:=ModStat
            |};
            {? TZ.M<>date(0,0,0)
            || {? TZ.W='N'
               || TZ.KW:=0
               || _Mc+=1
               ?};
               _Podstawa+=TZ.KW;
               {? ~__KORZ
               || TZ.add()
               ?};
               .Array[Finish].Mc[_i].Trace.save(_b,TZ.M)
            ?}
         !};
         _Podstawa:={? _Mc>0 || _Podstawa:=_Podstawa/_Mc$2 ?};
         _stale:='';
         {? var_pres('_c')=1
         || {! _i:=1..3
            |! _stale+=$sta_bnie[_i]+','
            !};
            'MK poprawka[EXC]';
            {? var_pres('sta_sko')=117
            || {! _i:=1..obj_len(sta_sko)
               |! _stale+=$sta_sko[_i]+','
               !}
            ?}
         ?};
         .Put(Finish,N.NB().RN,N.OD,_Od,_Do,_Podstawa,N.ref(),_stale)
      "),

      obj_meth('SprStat',"
         {? ~(__RUB.sys_attr(N.NB,113,N.OD) | __RUB.sys_attr(N.NB,131,N.OD))
         || _s:=0;
            _len:=obj_len(.Array[Finish].Mc);
            {! _i:=1.._len
            |! {? .Array[Finish].Mc[_i].Status='T'
               || _s+=.Array[Finish].Mc[_i].Kwota
               ?}
            !};
            {? _s=0
            || {! _i:=1.._len
               |! {? .Array[Finish].Mc[_i].Praca
                  || .Array[Finish].Mc[_i].Status:='P'
                  ?}
               !}
            ?}
         ?}
      "),

      obj_meth('DelMc',"
         {? var_pres('Mc',.Array[_a])>100
         || obj_del(.Array[_a].Mc);
            .Array[_a].Mc:=''
         ?}
      "),

      obj_meth('NewMc',"
         {? var_pres('Mc',.Array[_a])>100
         || obj_del(.Array[_a].Mc);
            .Array[_a].Mc:=''
         ?};
         .Array[_a].Mc:=obj_new(_b);
         {! _i:=1.._b
         |! .Array[_a].Mc[_i]:=obj_new(@.CLASS.Mc)
         !}
      ")
   )
?}


\zap_nw_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Funkcja aktualizuje zapisy w tabeli NW
::   WE: _a - ref nieobecności wtórnej
::       _b - ref nieobecności pierwotnej
::   WY:
::UWAGA: funkcja używana także w urlop.fml
::  OLD: \zap_nw/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
NW.index('CHW');
NW.prefix(_a);
{? ~NW.first()
|| NW.blank();
   NW.CHW:=_a;
   NW.CHP:=_b;
   NW.add()
?}


\licz_gt_urlop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKG [12.41]
:: OPIS: Wypełnienie wiersza w tabeli informacjami o przepracowanych godzinach, tylko wybrane kody - atrybut 1003.
::   WE:  _a  [DATE]   - Od daty.
::        _b  [DATE]   - Do daty.
::       [_c] [NUMBER] - Rodzaj danych:
::                         0 - Dni robocze [domyślnie];
::                         1 - Godziny robocze.
::        _d  [TABLE]  - Tabela do wypełnienia.
::   WY: 1
::  OLD: \licz_gt/urlop.fml
::----------------------------------------------------------------------------------------------------------------------
_mc_pocz:=_a;
_mc_konie:=_b;
{? var_pres('_c')<>type_of(0)
|| _c:=0
?};
{? var_pres('_d')<100
|| return(0)
?};
_tab_rub:=__RUB.sys_rub(1003,date(O.R,O.M,0));
{? ~_tab_rub.first || return(0) ?};
G.cntx_psh();
:: pętla po trzech latach i po wszystkich miesiącach
{! _lp:=-1 .. 1
|! G.use('godz'+$(_mc_pocz~1+_lp));
   G.index('PRRD');
   _jest:=0;
   _tab_rub.first();
   {!
   |? G.prefix(P.ref,'G',_tab_rub.RN);
      _jest:=G.first();
      ~_jest & _tab_rub.next()
   !};
   {? _jest
   || G.index('PRRODATA'); G.prefix(P.ref,'G');
      {? G.find_ge(_mc_pocz)
      || {!
         |?
            {? G.D>=_mc_pocz & G.D<=_mc_konie
            || {? __RUB.sys_attr(G.K,1003,date(O.R,O.M,0))
               || _d[G.D~3-_mc_pocz~3+1]+={? _c || G.G || 1 ?}
               ?};
               G.next()
            ?}
        !}
      ?}
   ?}
!};
G.cntx_pop();
1


\licz_nt_urlop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKG [12.41]
:: OPIS: Wypełnienie wiersza w tabeli informacjami o nieobecności.
::   WE:  _a  [DATE]   - Od daty.
::        _b  [DATE]   - Do daty.
::       [_c] [NUMBER] - Rodzaj danych:
::                         0 - Dni robocze [domyślnie];
::                         1 - Godziny robocze;
::                         2 - Dni kalendarzowe.
::        _d  [TABLE]  - Tabela do wypełnienia.
::   WY: 1
::  OLD: \licz_nt/urlop.fml
::----------------------------------------------------------------------------------------------------------------------
_mc_pocz:=_a;
_mc_konie:=_b;
{? var_pres('_c')<>type_of(0)
|| _c:=0
?};
{? var_pres('_d')<>117
|| return(0)
?};

N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref());
{? N.last()
|| {!
   |? {? (N.OD<=_mc_konie & N.DO>=_mc_pocz) &
         (~__RUB.sys_attr(N.NB,122722,date(O.R,O.M,0)) & ~__RUB.sys_attr(N.NB,122742,date(O.R,O.M,0)))
      || _od:={? N.OD>_mc_pocz || N.OD || _mc_pocz ?};
         _do:={? N.DO>_mc_konie || _mc_konie || N.DO ?};
         {? _do>=_od
         || {? _od=N.OD & _do=N.DO & _od=_do
            || _lp:=_od-_mc_pocz+1;
               _d[_lp]:=
                  {? _c=0
                  || N.NR
                  |? _c=1
                  || N.NG
                  |? _c=2
                  || N.NK
                  ?}
            || {! _lp:=_od-_mc_pocz+1 .. _do-_mc_pocz+1
               |! _d[_lp]:=
                     {? _c=0
                     || __KAL.w_days(_mc_pocz+_lp-1,_mc_pocz+_lp-1)
                     |? _c=1
                     || __KAL.w_hours(_mc_pocz+_lp-1,_mc_pocz+_lp-1)
                     |? _c=2
                     || 1
                     ?}
               !}
            ?}
         ?}
      ?};
      N.prev() & N.DO>=_mc_pocz
  !}
?};
N.cntx_pop();
1


\tab_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Tworzy bufor tabeli dla godzin. Ustala odpowiednie dane dla kazdej godziny.
::   WE: _a - data miesiaca
::       [_b] - 0 - nadliczbowe
::              1 - nocne
::       [_c] - 1 - kosztowo
::            - 0 - podatkowo
::       [_d] - wymiar zatrudnienia biezacego
::   WY:
::  OLD: \tab_godz/urlop.fml
::----------------------------------------------------------------------------------------------------------------------
_b:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_c:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_d:={? var_pres('_d')=type_of(0) || _d || P.WY ?};

_tab:=tab_tmp(2,
   'ROK','INTEGER','Rok',
   'MC','INTEGER','Miesiąc',
   'GODZ','REAL','Liczba godzin',
   'RODZ','INTEGER','Rodzaj',
   'NOM','REAL','Nominał',
   'KAL','STRING[20]','Kalendarz',
   'OPIS','STRING[20]','Opis składnika',
   'TYP','STRING[1]','Typ dnia');

G.cntx_psh();
O.cntx_psh();
KT.cntx_psh();
O_P.cntx_psh();
{? _c
|| O.index('LISTYPLA')
|| O.index('LISTYPLP')
?};
O_P.index('UNIQUE');
O.prefix(exec('ref_firma','ustawienia'),P.F_ZATR().KOD,_a~1,_a~2);
{? O.first()
|| {!
   |? O_P.prefix(O.ref,P.ref());
      {? O_P.first()
      || _lista:=~O.LT;
         O.T();
         _kalend:=
            {? KT.KA().NAZWA<>''
            || KT.KA().NAZWA
            || 'standard'
            ?};
         exec('kal_prac','personel',_a~1);
         {? _b
         || exec('tab_add','lista_licz',57,_a,_tab,9,_lista,_kalend)
         || _ok:=1;
::       Jeżeli są dołączone atrybuty w gałęzi 1011214 z wypełniony wartościami atrybutu
::       tworzymy wypełnienie tablicy na podstawie atrybutów
            {? __RUB.find_def('S',1011214)
            || RA_DEF.cntx_psh();
               RA_DEF.index('RA_DEF');
               RA_DEF.prefix(RA_DEF.ref);
               {? RA_DEF.first()
               || {!
                  |? {? var_pres('_tab_rub')>100 || obj_del(_tab_rub) ?};
                     _tab_rub:=__RUB.sys_rub(RA_DEF.SYMBOL,date(O.R,O.M,0));
                     {? _tab_rub.first()
                     || _ok:=0;
                        {!
                        |? exec('tab_add','lista_licz',
                              _tab_rub.RN,_a,_tab,__RUB.sys_val(RA_DEF.SYMBOL,O.D),_lista,_kalend);
                           _tab_rub.next()
                        !}
                     ?};
                     {? var_pres('_tab_rub')>100 || obj_del(_tab_rub) ?};
                     _tab_rub:=__RUB.usr_rub(RA_DEF.SYMBOL,date(O.R,O.M,0));
                     {? _tab_rub.first()
                     || _ok:=0;
                        {!
                        |? exec('tab_add','lista_licz',
                              _tab_rub.RN,_a,_tab,__RUB.usr_val(RA_DEF.SYMBOL,O.D),_lista,_kalend);
                           _tab_rub.next()
                        !}
                     ?};
                     RA_DEF.next()
                  !}
               ?};
               RA_DEF.cntx_pop()
            ?};
            {? _ok
            || exec('tab_add','lista_licz',55,_a,_tab,1,_lista,_kalend);
               exec('tab_add','lista_licz',68,_a,_tab,7,_lista,_kalend);
               exec('tab_add','lista_licz',56,_a,_tab,2,_lista,_kalend);
               exec('tab_add','lista_licz',69,_a,_tab,8,_lista,_kalend);
               exec('tab_add','lista_licz',58,_a,_tab,4,_lista,_kalend);
               exec('tab_add','lista_licz',64,_a,_tab,5,_lista,_kalend,1);
               exec('tab_add','lista_licz',66,_a,_tab,6,_lista,_kalend);
               exec('tab_add','lista_licz',7008,_a,_tab,10,_lista,_kalend);
               exec('tab_add','lista_licz',7009,_a,_tab,11,_lista,_kalend);
               exec('tab_add','lista_licz',7027,_a,_tab,12,_lista,_kalend);
               exec('tab_add','lista_licz',7037,_a,_tab,13,_lista,_kalend);
               exec('tab_add','lista_licz',7036,_a,_tab,14,_lista,_kalend);
               exec('tab_add','lista_licz',7028,_a,_tab,15,_lista,_kalend);
               exec('tab_add','lista_licz',7056,_a,_tab,16,_lista,_kalend);
               exec('tab_add','lista_licz',7015,_a,_tab,17,_lista,_kalend);
               exec('tab_add','lista_licz',7016,_a,_tab,18,_lista,_kalend)
            ?}
         ?}
      ?};
      O.next()
   !}
?};
KT.cntx_pop();
O.cntx_pop();
G.cntx_pop();
O_P.cntx_pop();
{? _tab.first()
|| _group:=sql('select ROK, MC from :_a group by ROK, MC order by 1,2',_tab);
   {? _group.first()
   || __KAL.set_cal(_tab.KAL,_a~1);
      {!
      |? _norma:=exec('norma_zmiana','godziny',date(_group.ROK,_group.MC,1),date(_group.ROK,_group.MC,0));
         {? _b
         || {? _norma
            || _dni:=date(_group.ROK,_group.MC,0)-date(_group.ROK,_group.MC,1);
               _nominal:=0;
               {! _ind:=0.._dni
               |! {? __KAL.w_days(date(_group.ROK,_group.MC,0)-_ind,date(_group.ROK,_group.MC,0)-_ind)
                  || _nominal+=exec('norma','godziny',date(_group.ROK,_group.MC,0)-_ind)
                  ?}
               !}
         || _nominal:=__KAL.w_hours(date(_group.ROK,_group.MC,1),date(_group.ROK,_group.MC,0))
            ?}
         || {? _norma
            || _nominal:=exec('nominal','godziny',date(_group.ROK,_group.MC,1),date(_group.ROK,_group.MC,0),1,1,,1,_d)
            || _nominal:=exec('nominal','godziny',date(_group.ROK,_group.MC,1),date(_group.ROK,_group.MC,0),1,,,1,_d)
            ?}
         ?};

         _tab.prefix(_group.ROK,_group.MC);
         {? _tab.first()
         || {!
            |? _tab.NOM:=_nominal;
               _tab.put(1);
               _tab.next()
            !}
         ?};
         _group.next()
      !}
   ?}
?};
exec('kal_prac','personel',_a~1);
_tab_g:=sql('
   select ROK, MC, RODZ, NOM, OPIS, TYP, sum(GODZ) GODZ
   from :_a
   group by  ROK, MC, RODZ, NOM, OPIS, TYP
   order by 1,2'
   ,_tab);
_tab_g


\tab_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Wypelnienie tabeli pomocniczej z godzinami obliczonymi na listach podanego miesiaca
::   WE: _a - kod skladnika listy plac
::       _b - data miesiąca
::       _c - wskazanie na tabele
::       _d - rodzaj zapisu
::       _e - znak listy
::       [_f] - kalendarz listy
::       [_g] - typ dnia wystąpienia godzin
::  OLD: \tab_add/urlop.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return(0) ?};
{? var_pres('_b')<>type_of(date) || return(0) ?};
{? var_pres('_c')<>type_of(SYSLOG) || return(0) ?};
{? var_pres('_d')<>type_of(0) || return(0) ?};
{? var_pres('_f')<>type_of('') || _f:='standard' ?};
{? var_pres('_g')<>type_of(0) || _g:=0 ?};
_Rub:=_a;
_Rodzaj:=_d;
_tab:=_c;
_lista:=_e;
_typ:=_g;

_add:="
   _a.RODZ:=_b;
   _a.GODZ:=G.G;
   _a.ROK:=G.D~1;
   _a.MC:=G.D~2;
   _a.KAL:=_c;
   _a.OPIS:=$_d;
   _a.TYP:=_e;
   _a.add()
";

_add_66:="
   A_OKRP.index('A_OKRDP');
   A_OKRP.prefix(P.ref());
   _okrr:=G.D~1;
   _okrm:=G.D~2;
   {? A_OKRP.find_le(G.D) & G.D<=A_OKRP.DO
   || _okrr:=A_OKRP.DO~1;
      _okrm:=A_OKRP.DO~2
   ?};
   _a.RODZ:=_b;
   _a.GODZ:=G.G;
   _a.ROK:=_okrr;
   _a.MC:=_okrm;
   _a.KAL:=_c;
   _a.OPIS:=$_d;
   _a.TYP:='';
   _a.add()
";

{! _ind:=0..1
|! _Rok:=(_b~1)-_ind;
   {? _Mask:='godz'+(('0000'+$_Rok)+4); G.name<>_Mask
   || G.use(_Mask)
   ?};
   G.index('PRRD');
   G.prefix(P.ref(),'G',_Rub,_lista);
   {? G.first()
   || {!
      |? {? _Rodzaj=6
         || _add_66(_tab,_Rodzaj,_f,_Rub)
         || {? _typ & __KAL.h_days(G.D,G.D)
            || _add(_tab,_Rodzaj,_f,_Rub,'S')
            || _add(_tab,_Rodzaj,_f,_Rub,'')
            ?}
         ?};
         G.next()
      !}
   ?}
!}


\zap_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: zapisania informacji o rozliczeniu nieob.
::   WE: _a - wskaznik
::       _b - opcjonalny, flaga (wartosc typu liczbowego) decydujaca czy dokonac przepisania tabeli tz
::   WY:
::  OLD: \zap_tab/urlop.fml
::----------------------------------------------------------------------------------------------------------------------
_wsk:={? var_pres('_a')=7 || _a || N.ref() ?};
exec('zap_nw_wynchor','lista_licz',N.ref(),_wsk);
{? var_pres('_b')=type_of(1)
:  przepisanie TZ
|| {? _b=1
   || NW.prefix(_a);
      {? NW.first()
      || N.cntx_psh();
         _data:=NW.CHW().OD;
         N.cntx_pop();
         TZ.use('tabz'+$(_data~1));
         TZ.index('ZASTAB');
         TZ.prefix('E',NW.CHW);
         _size:=TZ.size();
         {? TZ.first()
         || Finish+=1;
            __PN.NewMc(Finish,_size);
            _i:=0;
            {!
            |? _i+=1;
               __PN.PutMc(Finish,_i,TZ.KW,TZ.NO,TZ.PR,TZ.NN,TZ.W,TZ.M,TZ.STATUS);
               TZ.next()
            !};
            __PN.Zapisz(Finish,N.ref());
            __PN.DelMc(Finish);
            Finish-=1
         ?}
      ?}
   ?}
?}


\kw_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.14]
:: OPIS: Formuła zliczająca kwoty wypłat dla danej listy płac na podstawie atrybutu
::   WE: _a DATE - rok do podstawy
::       _b DATE - miesiąc do podstawy
::       _c INTEGER - nr atrybutu
::       [_d] STRING - rodzaj wypłaty
::   WY: wyliczona kwota bądź 0 w przypadku wystąpienia błędu
::----------------------------------------------------------------------------------------------------------------------
_rok:={? var_pres('_a')<>type_of(0) || return(0) || _a ?};
_mc:={? var_pres('_b')<>type_of(0) || return(0) || _b ?};
_atr:={? var_pres('_c')<>type_of(0) || return(0) || _c ?};
_wyp:={? var_pres('_d')<>type_of('') || '' || _d ?};
_kw:=0;

O.cntx_psh();
O_P.cntx_psh();
R_GODZ.cntx_psh();
G.cntx_psh();
G.use('godz'+$_rok);
G.prefix();
R_GODZ.use('rzg_'+$_rok);
_ls:='';
:: tabela rubryk wchodzących w skład atrybutu
_tab_rub:=__RUB.sys_rub(_atr,date(_rok,_mc,0));
{! _ii:=1..2
|! _ls:={? _ii=1 || 'T' || 'N' ?};
   O_P.index('P_RMK');
   O_P.prefix(_ls,P.ref(),_rok,_mc,P.F_ZATR);
   {? O_P.first()
   || {!
      |? O_P.O();
         {? _tab_rub.first()
         || R_GODZ.index('RZL_GODZ');
            R_GODZ.prefix(P.ref(),~O.LT,_wyp);
            {!
            |? {? R_GODZ.first()
               || {!
                  |? {? R_GODZ.G().K().RN=_tab_rub.RN
                     || _kw+=R_GODZ.KW$2
                     ?};
                     R_GODZ.next()
                  !}
               ?};
               _tab_rub.next()
            !}
         ?};
         O_P.next()
      !}
   ?}
!};
obj_del(_tab_rub);
&_tab_rub;
G.cntx_pop();
R_GODZ.cntx_pop();
O_P.cntx_pop();
O.cntx_pop();
_kw$2


\wn_podat_exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Zwraca informację, czy jest wniosek.
::   WE: _a [_OSOBA lub _P] - Wskazanie na osobę lub pracownika
::       _b [STRING] - Kod wniosku z OS_ZWSLO (OLD -> ze SLO_KOD)
::       _c [DATE] - Data, na kiedy ma być wyszukiwany wniosek
::       [_d] [STRING] - typ 'W' wniosek (domyślnie), 'O' oświadczenie
::       [_e] [STRING] - kod płatnika
::   WY: 1 - jest wniosek;  0 - brak wniosku
::  OLD: \wn_podat_exist/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_prac:=null();
{? var_pres('_a')=type_of(null())
|| {? ref_name(_a)=OSOBA.name()
   || _osoba:=_a
   |? ref_name(_a)=P.name()
   || _prac:=_a
   ?}
?};
{? _osoba=null() & _prac=null() || return(0) ?};
_kod:={? var_pres('_b')=type_of('') || _b || return(0) ?};
_data:={? var_pres('_c')=type_of(date()) || _c || return(0) ?};
_typ:={? var_pres('_d')=type_of('') || _d || 'W' ?};
_platnik:={? var_pres('_e')=type_of('') || _e || '' ?};
_firma:=exec('ref_firma','ustawienia');
{? _data~1<2023
|| _zatrudniony:=1
|| _zatrudniony:=0
?};

_result:=0;
_slownik:=null();
OS_ZWZAL.cntx_psh();
OS_ZWSLO.cntx_psh();
OS_ZWSLO.index('TYPKOD');
OS_ZWSLO.prefix(_firma,_typ,_kod,);
{? OS_ZWSLO.first()
|| _slownik:=OS_ZWSLO.ref()
?};
{? _slownik
|| {? _osoba
   || OS_ZWZAL.index('OS_ZWZAL');
      OS_ZWZAL.prefix(_firma,_osoba,_slownik,'T')
   || OS_ZWZAL.index('P_ZWZAL');
      OS_ZWZAL.prefix(_firma,_prac,_slownik,'T')
   ?};
   {? OS_ZWZAL.find_le(_data)
   || {!
      |? {? OS_ZWZAL.WYCOF<>'T'
         || {? OS_ZWZAL.WYCOFANY='T'
            || OS_ZWZAL.cntx_psh();
               OS_ZWZAL.index('DOK_WYC');
               OS_ZWZAL.prefix(_firma,OS_ZWZAL.ref());
               _ok:=OS_ZWZAL.first() & OS_ZWZAL.D_OB>_data;
               OS_ZWZAL.cntx_pop()
            || _ok:=1
            ?};
            {? _ok
            || {? OS_ZWZAL.OS_ZWSLO().ROCZNE='T'
               || {? OS_ZWZAL.ROK=_data~1
                  || _result:=1
                  ?}
               || _result:=1
               ?};

               {? _result & _data~1>2022
               || {? OS_ZWZAL.OS_ZWSLO().PO='T'
                  || {? _platnik<>''
                     || OS_GRPRZ.index('OS_ZWZAL');
                        OS_GRPRZ.prefix(OS_ZWZAL.ref());
                        {? OS_GRPRZ.first()
                        || {!
                           |? {? OS_GRPRZ.SLO_KOD().KOD=_platnik
                              || _zatrudniony:=1
                              ?};
                              ~_zatrudniony & OS_GRPRZ.next()
                           !}
                        || _zatrudniony:=1
                        ?}
                     || _zatrudniony:=1
                     ?}
                  ?};
                  {? ~_zatrudniony
                  || _zatrudniony:=exec('czy_aktywna_umowa','osoba',_osoba,_data,OS_ZWZAL.ref(),_platnik)
                  ?}
               ?}
            ?}
         ?};
         OS_ZWZAL.prev() & ~_result
      !}
   ?}
?};
OS_ZWSLO.cntx_pop();
OS_ZWZAL.cntx_pop();

{? _result & _kod='UZ_POD' & __F_ZATR.P='Z'
|| _result:=RH.ZLE().RU().BEZPOD='T'
?};
_result:=(_result & _zatrudniony);

_result


\UKS_ulga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wyliczenie ulgi od dochodu dla klasy średniej.
::   WE:
::   WY: Kwota podstawy dla wyliczenia ulgi
::  OLD: \UKS_ulga/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
{? O.RP<2022 | FUNKCJE.PL_NEW
|| FUNKCJE.LK_SYS(90521,,,1);
   return(0)
?};

{? exec('wn_podat_exist','lista_licz',P.OSOBA,'KL_SRED',O.D)
|| FUNKCJE.LK_SYS(90521,,,1);
   return(0)
?};
TP.index('TABPODAT');
TP.prefix(O.RP);
{? TP.first()
|| _proc:=TP.PR
|| _proc:=0
?};
{? ~_proc
|| FUNKCJE.LK_SYS(90521,,,1);
   return(0)
?};
{? var_pres('ULGA_KS1',KST)<0
|| _prg_1:=5701;
   _prg_2:=8549;
   _prg_3:=11141
|| _prg_1:=KST.ULGA_KS1;
   _prg_2:=KST.ULGA_KS2;
   _prg_3:=KST.ULGA_KS3
?};
{? ~_prg_1 | ~_prg_2 | ~_prg_3
|| FUNKCJE.LK_SYS(90521,,,1);
   return(0)
?};
:: 397 - Personel: Data zmiany sposobu naliczania diet.
_dataParam:=exec('get_par_date','parametr',397);
_diety:={? _dataParam=date(0,0,0) | O.D<_dataParam || exec('dieta2podatek','oddelegowanie') || 0 ?};
_podst:=LICZ.Wylicz(,'.POD')+FUNKCJE.L(779)-FUNKCJE.L_SYS(9053)-FUNKCJE.L_SYS(9022)-FUNKCJE.L_SYS(9011)-
   _diety-FUNKCJE.L_SYS(9013);
_oddel_bez_pod:=(FUNKCJE.L(7160)+FUNKCJE.L(7162)-FUNKCJE.L(7165));
:: 1021: Przychód opodatkowany zagraniczny, 1026: Wynagrodzenia opodatkowane w Polsce,
:: 7109: Przychód - wpł. PPK, 451: Płaca zasadnicza
:: Przychód PPK wędruje do przychodu zagranicznego jeśli przychodu opodat. w polsce i nie ma zasadniczej
{? FUNKCJE.L_SYS(1021) & FUNKCJE.L_SYS(1026)=0 & FUNKCJE.L_SYS(451)=0
|| _oddel_bez_pod+=FUNKCJE.L(7109)
?};
_podst-=_oddel_bez_pod;
{? _podst<0 || _podst:=0 ?};
_prz_poz:=FUNKCJE.LP_SYS(9051);
_przych:=_podst+_prz_poz;

_wynik:=0;
_ulga:=FUNKCJE.LP_SYS(9052);

{? _przych>=_prg_1 & _przych<=_prg_2
|| _wynik:=((_przych * 0.0668 - 380.50)/(_proc/100))$2;
   _wynik-=_ulga;
   FUNKCJE.LK_SYS(90521,,_wynik)
|? _przych>_prg_2 & _przych<=_prg_3
|| _wynik:=((_przych * -0.0735 + 819.08)/(_proc/100))$2;
   _wynik-=_ulga;
   FUNKCJE.LK_SYS(90521,,_wynik)
|? _przych>_prg_3 & _ulga
|| {? _ulga>0
   || _wynik:=-FUNKCJE.LP_SYS(9052)
   ?};
   FUNKCJE.LK_SYS(90521,,_wynik)
|| FUNKCJE.LK_SYS(90521,,,1)
?};
_podst$2


\ZDR_KU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Kosztu uzyskania do wyliczenia składki zdrowotnej po 2021 roku.
::   WE:
::   WY:
::  OLD: \ZDR_KU/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
{? O.RP<2022 | ~FUNKCJE.L(7145) || return(0) ?};

:: 9069: Składki niestanowiące obniżenia podstawy opodat.
_skl_prac:=FUNKCJE.L(765,767)-FUNKCJE.L_SYS(9069);
_l:=FUNKCJE.L_SYS(9061)-FUNKCJE.L_SYS(9041);
_l+=_skl_prac;
{? _l>0
|| _l-=(FUNKCJE.L_SYS(551)+FUNKCJE.L_SYS(32))
|| _l:=0
?};
_param:=exec('wartosc','lista_par','BEZ_KU');
{? _l>0 & P_IPOD.KU<>'B' & (_param=~~ | {? var_pres('_param')=type_of('') || _param='N' ?})
|| _ku:={? P_IPOD.KU='Z'
             || 300
             || 250
             ?};
   _n_zysk:=FUNKCJE.L_SYS(73);
   {? _n_zysk>0
   || _brutto:=FUNKCJE.L(500);
      {? FUNKCJE.L_SYS(710) & _brutto>0
      || _l-=_n_zysk/_brutto*FUNKCJE.L_SYS(724)$2
      ?}
   ?};
   {? _l>0
   || _ku-=FUNKCJE.LP_SYS(9063,,,1);
      {? _ku<0
      || _ku:=0
      ?};
      {? _l<_ku
      || _l
      || _ku
      ?}
   ?}
?}


\ZDR_przychod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Przychód do wyliczenia składki zdrowotnej po 2021 roku.
::   WE:
::   WY:
::  OLD: \ZDR_przychod/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
{? O.RP<2022 || return(0) ?};

_pod:=LICZ.Wylicz(,'.POD');
_zw_prz:=exec('skl_bez_odlicz','lista_licz');
_skl:=FUNKCJE.L(765,767)-FUNKCJE.L(7124);
_oddel_bez_pod:=(FUNKCJE.L(7160)+FUNKCJE.L(7162)-FUNKCJE.L(7165));
:: 1021: Przychód opodatkowany zagraniczny, 1026: Wynagrodzenia opodatkowane w Polsce,
:: 7109: Przychód - wpł. PPK, 451: Płaca zasadnicza
:: Przychód PPK wędruje do przychodu zagranicznego jeśli przychodu opodat. w polsce i nie ma zasadniczej
{? FUNKCJE.L_SYS(1021) & FUNKCJE.L_SYS(1026)=0 & FUNKCJE.L_SYS(451)=0
|| _oddel_bez_pod+=FUNKCJE.L(7109)
?};
:: 7198: ZDR: Diety pom. prz.
_prz:=_pod+FUNKCJE.L(779)+_zw_prz-_skl-_oddel_bez_pod-FUNKCJE.L_SYS(9068);
:: 7199 ZDR: Sk. nst. ob. p. (Składki niestanowiące obniżenia podstawy opodatkowania)
_skl_nop:=FUNKCJE.L_SYS(9069);
:: 23.25_PMO01 - rezygnacja z ograniczania wysokości _skl_nop do wysokości składek na liście
_prz+=_skl_nop;

_prz


\przychod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Formuła płacowa dla składnika 780 - Podst. opodatkowania
::   WE:
::   WY: [REAL] - kwota do składnika
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('KST_PPK')=type_of(SYSLOG)  & ~FUNKCJE.L(7093) || exec('del_O_RH','ppk_kwn',P.ref,O.ref,,'W') ?};
_zw_prz:=exec('skl_bez_odlicz','lista_licz');
exec('p_ipod_podatek','lista_licz');
_zp_prz:=FUNKCJE.L_SYS(9022);
{? _zp_prz
|| _zp_skl:=FUNKCJE.L(765,767)-FUNKCJE.L_SYS(9026)-FUNKCJE.L(7124);
   {? _zw_prz>_zp_skl || _zw_prz:=_zp_skl ?}
|| _zp_skl:=FUNKCJE.L(765,767)-FUNKCJE.L(7124)
?};
:: 1021: Przychód opodatkowany zagraniczny
_oddel_bez_pod:=FUNKCJE.L_SYS(1021);
:: 1026: Wynagrodzenia opodatkowane w Polsce, 451: Płaca zasadnicza, 7109: Przychód - wpł. PPK
:: Przychód PPK wędruje do przychodu zagranicznego jeśli przychodu opodat. w polsce i nie ma zasadniczej
{? _oddel_bez_pod & FUNKCJE.L_SYS(1026)=0 & FUNKCJE.L_SYS(451)=0
|| _oddel_bez_pod+=FUNKCJE.L(7109)
?};
:: 7197: OZ: Diety pomn. prz.
_prz:=LICZ.Wylicz(,'.POD')+FUNKCJE.L(779)+_zw_prz-_zp_prz-_zp_skl-_oddel_bez_pod-FUNKCJE.L(7197);
:: 7195 (Sk. nst. obn. p. op.)Składki niestanowiące obniżenia podstawy opodatkowania:
_skl_nop:=FUNKCJE.L(7195);
:: 23.25_PMO01 - rezygnacja z ograniczania wysokości _skl_nop do wysokości składek na liście
_prz+=_skl_nop;

_prz


\podst_ub_zdrow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Formuła płacowa dla składnika 791 - Podst. ub. zdrow.
::   WE:
::   WY: [REAL] - kwota do składnika
::----------------------------------------------------------------------------------------------------------------------
_par:=exec('podstawa_par','oddelegowanie',,100753);
exec('podstawa_sk','oddelegowanie','.UBZ',791,,_par)-FUNKCJE.L(765,767)


\korekta_zal_pod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wyliczona nadpłata zaliczki na podatek.
::   WE:
::   WY:
::  OLD: \korekta_zal_pod/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
FUNKCJE.LK_SYS(9611,,,1);
FUNKCJE.LK(7171,,,1);
FUNKCJE.LK(7172,,,1);
FUNKCJE.LK(7149,,,1);
_wniosek:=exec('wn_podat_exist','lista_licz',P.OSOBA,'TP_ZAL_P',O.D);
_zp_przych:=FUNKCJE.LP_SYS(9022,,,1)-FUNKCJE.LP_SYS(9026,,,1);
_limit:=FUNKCJE.LP_SYS(92,,,1)+FUNKCJE.LP_SYS(5711,,,1)+FUNKCJE.LP_SYS(5721,,,1)-FUNKCJE.LP_SYS(9026,,,1)<=12800;

_wyn:=0;
{? ~_wniosek & _limit
|| _old_ulga:=FUNKCJE.LP_SYS(9062,,,1);
   _p_nom_old:=FUNKCJE.LP_SYS(9064,,,1);

   {? _old_ulga=0 & _p_nom_old & exec('czy_ulga_podatkowa','lista_licz',O.RP,O.MP,P.OSOBA)
   ||
:: zabezpieczenie sytuacji gdy są dwa etaty i na jednej liście nie ma ZDR: ulga podatkowa
:: bo ten składnik jest raz na osobę w miesiącu
      _ulga_pod:=
         {? _p_nom_old>0 & P_IPOD.UP<>'B'
         || {? P_IPOD.UP='Z'
            || exec('oblicz_wsprozl','lista_licz')
            || 1
            ?}*43.76
         ?};
      _ulga_pod-=_old_ulga;
      {? _ulga_pod<0 || _ulga_pod:=0 ?};
      {? _p_nom_old
      || {? _ulga_pod<_p_nom_old
         || _p_nom_old-=_ulga_pod
         || _ulga_pod:=_p_nom_old; _p_nom_old:=0
         ?}
      ?}
   || _ulga_pod:=_old_ulga
   ?};

   {? _zp_przych
   || _roznica_ku:=FUNKCJE.LP_SYS(9063,,,1)-FUNKCJE.LP_SYS(931,,,1);
      _old_I_prog:=FUNKCJE.LP_SYS(9065,,,1);
      _old_II_prog:=FUNKCJE.LP_SYS(9066,,,1);
      {? _old_II_prog<>0
      || _old_II_prog+=_roznica_ku
      || _old_I_prog+=_roznica_ku
      ?};
      {? _old_II_prog<_zp_przych
      || _old_I_prog-=(_zp_przych-_old_II_prog);
         {? _old_I_prog<0
         || _old_I_prog:=0
         ?};
         _old_II_prog:=0
      || _old_II_prog-=_zp_przych
      ?};
      _p_nom_old:=_old_I_prog$0*0.17+_old_II_prog$0*0.32-_ulga_pod;
      {? _p_nom_old<0
      || _p_nom_old:=0
      ?}
   ?};

   _kco:=exec('korekta_kch_odl','lista_licz',_zp_przych);
   _p_old:={? _p_nom_old>=_kco
           || (_p_nom_old-_kco)$0
           ?};

   _p_new:=FUNKCJE.LP_SYS(9611,,,1);
   {? _p_new>_p_old
   || _wyn:=_p_new-_p_old-FUNKCJE.LP(7170,,,,1);
      FUNKCJE.LK_SYS(9611,,_wyn*-1);
      FUNKCJE.LK(7171,,_p_old-FUNKCJE.LP(7171,,,,1));
      FUNKCJE.LK(7172,,_p_new-FUNKCJE.LP(7172,,,,1));

      {? _kco
      || FUNKCJE.LK(7149,,_kco-FUNKCJE.LP(7149,,,,1))
      ?}
   ?}
?};
_wyn


\korekta_kch_odl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wyliczona składka zdrowotna odliczona.
::   WE: _a - kwota ZP:przychód - ZP: składki
::   WY:
::  OLD: \korekta_kch_odl/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_kc2:=0;
{? var_pres('_a')<0 || _a:=0 ?};
_skl_bez_odl:=exec('bez_odl_PL','lista_licz');
_kcpo:=FUNKCJE.LP_SYS(5641,,,1);
_kcpop:=_skl_bez_odl.k17+FUNKCJE.LP_SYS(581,,,1)-_skl_bez_odl.k18-FUNKCJE.LP_SYS(582,,,1);
_kcpp:=FUNKCJE.L_SYS(5641,,,1);
{? _kcpo<>0
|| _kc2:=(_kcpo*7.75*0.01)$2;
   {? _kc2
   || _kcpo+=_kcpp-_kcpop;
      _kc2_bez_odl:=(_kcpo*7.75*0.01)$2;
      {? _kc2>_kc2_bez_odl
      || _kc2:=_kc2_bez_odl
      ?};
::    ustalenie kwoty przychodu do 50% dla składników, które nie podlegają ubezp. zdrowotnego
      _zm_PPA:=exec('zmn_PA_do_KC','lista_licz');
      _podobn:=exec('prog_zalP','lista_licz',
         _kcpo,
         FUNKCJE.LP_SYS(9063,,,1)-_zm_PPA,
         FUNKCJE.LP_SYS(9062,,,1),17,1);
      _podobn:={? _podobn<0 || 0 || _podobn ?};
      _pod_poz:=FUNKCJE.LP_SYS(9064);
      _kc2:={? _podobn<_kc2 || _podobn || _kc2 ?};
      {? _a<>0
      || _pom:=FUNKCJE.LP_SYS(56411,,,1);
         _do_ulg:=FUNKCJE.LP_SYS(9022,,,1)-FUNKCJE.LP_SYS(9026,,,1)+FUNKCJE.LP_SYS(92,,,1);
         _do_ulg:=_do_ulg+FUNKCJE.LP_SYS(5711,,,1)+FUNKCJE.LP_SYS(57210,,,1)-_skl_bez_odl.k18;
         _do_ulg-=FUNKCJE.LP_SYS(9021,,,1);
         _ubz:={? _pom<>0 || _pom+FUNKCJE.LP_SYS(5711,,,1)+FUNKCJE.LP_SYS(57210,,,1)-_skl_bez_odl.k17 ?};
         _wsp:={? _do_ulg || _ubz/_do_ulg ?};
         _wsp:={? _wsp>1 || 1 |? _wsp<0 || 0 || _wsp ?};
         _kc_zp:=(_a*_wsp)$2;
         _kc3:=((_kcpo)*7.75*0.01)$2-((_kc_zp)*7.75*0.01)$2;
         _kc2:={? _kc3<_kc2 || _kc3 || _kc2 ?}
      ?}
   ?}
?};
_kc2


\bez_odl_PL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wyliczenie skladek zus, ktore nie podlegaja odliczeniom od podstawy podatku.
::
::       Wersja formuły dla korekty polskiego ładu po rozporządzeniu z 7 stycznia 2022r.
::       Oryginalna formuła: \skl_bez_odlicz/lista_licz.fml
::
::   WE:
::   WY:
::  OLD: \bez_odl_PL/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_kwoty:=obj_new('k17','k18');
_kwoty.k17:=_kwoty.k18:=0;
{? ~FUNKCJE.LP(750) || return(_kwoty) ?};
_Kwota:=0;
IS_WYPL.index('LISTA');
IS_WYPL.prefix(P.OSOBA,'L'+FUNKCJE.ZNLISTY());
{? IS_WYPL.first()
|| {!
   |? {? IS_WYPL.POD_U>IS_WYPL.POD_P
      || _Kwota+=IS_WYPL.POD_U-IS_WYPL.POD_P
      ?};
      IS_WYPL.next()
   !}
?};
_index:=IS_ROZL.ndx_tmp(,1,'P',,,'LT',,);
IS_ROZL.index(_index);
IS_ROZL.prefix(P.ref(),'L'+FUNKCJE.ZNLISTY());
{? IS_ROZL.first()
|| {!
   |? {? IS_ROZL.POD_U>IS_ROZL.POD_P
      || _Kwota+=IS_ROZL.POD_U-IS_ROZL.POD_P
      ?};
      IS_ROZL.next()
   !}
?};
IS_ROZL.ndx_drop(_index);

{? _Kwota<=0 || return(_kwoty) ?};
_kwoty.k17:=_Kwota;
_wynik:=0;
_year:=O.RU;
_month:=O.MU;
_blokada:=exec('czy_blokada_wynchor','lista_licz',_year,_month);
_pod_e_r:=exec('kor_prac_zus','korekty_zus',P.ref,_year,_month);
{? _pod_e_r<0 || _pod_e_r:=FUNKCJE.LP_SYS(511,,,1)$2 ?};
_pod_ch_w:=FUNKCJE.LP_SYS(531,,,1)$2;
_proc:=
   {? _pod_e_r=_pod_ch_w & _year>=1999 & ~_blokada
   || KST.WSODBR
   |? _year>=1999
   || {? _pod_ch_w || (KST.PRFE/2+KST.PRFRP)*_pod_e_r/_pod_ch_w ?}+KST.PRFC
   ?}$2;
{? _proc>0
|| _kwoty.k18:=(_Kwota*_proc/100)$2
?};
_kwoty


\prog_zalP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Zadaniem procedury jest wyliczenie udziału w odebranej kwocie dla naliczenia zaliczki wg procentu podatku,
::       w szczególności w sytuacji gdy na danej liście płac występuje zmiana progu podatkowego.
::       Procedura zwróci poprawne wyniki jeżeli będzie już znana wartość dochodu dla drugiego progu.
::
::       Wersja formuły dla korekty polskiego ładu po rozporządzeniu z 7 stycznia 2022r.
::       Oryginalna formuła: \progi_zaliczki/lista_licz.fml
::
::   WE: _a [real] - Kwota przychodu do wyliczenia
::       [_b] [real] - wartość kosztów uzyskania przychodu
::       [_c] [real] - Ulga podatkowa
::       [_d] [int] - procent zaliczki
::   WY: real - wartość zaliczki na podatek z podziałem na procent podatku wyliczonym na podstawie proporcji
::  OLD: \prog_zalP/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return(0) ?};
_PRZ:=_a;
{? ~_PRZ || return(0) ?};
_KU:={? var_pres('_b')=type_of(0) || _b ?};
_UP:={? var_pres('_c')=type_of(0) || _c ?};
_PROCENT:={? var_pres('_d')=type_of(0) || _d || FUNKCJE.L_SYS(91,,,1) ?};
_zalicz:=0;

_doch_2p:=FUNKCJE.LP_SYS(9033,,,1);
_przych:=FUNKCJE.LP_SYS(92,,,1)+FUNKCJE.LP_SYS(9022,,,1)-
   FUNKCJE.LP_SYS(9026,,,1)-FUNKCJE.LP_SYS(93,,,1);

{? FUNKCJE.PODATEK & _doch_2p
|| _wymiar:=_przych/_doch_2p;
   _PRZ-=_KU;
   _PRZ_P_2:=_PRZ/_wymiar;
   _PRZ_P_1:=_PRZ-_PRZ_P_2;

   _p_2:=_p_1:=0;
   TP.index('TABPODAT');
   TP.prefix(O.RP);
   {? TP.first()
   || _p_1:=TP.PR;
      {? TP.next()
      || _p_2:=TP.PR
      ?}
   ?};

   {? _PRZ_P_1 & _p_1
   || _zalicz:=_PRZ_P_1$0*_p_1/100
   ?};
   {? _PRZ_P_2 & _p_2
   || _zalicz+=_PRZ_P_2$0*_p_2/100
   ?}
|| _zalicz:=(_PRZ-_KU)$0*_PROCENT/100
?};

(_zalicz-_UP)$2


\p_npod_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Dodaje informacje do tabeli P_NPOD
::   WE: _a [REFERENCE] - Wskazanie na pracownika
::       _b [REFERENCE] - Wskazanie na osobę
::       _c [REFERENCE] - Wskazanie na listę płac
::       _d [REFERENCE] - Wskazanie na rachunek
::       _e [STRING]    - Kod formy współpracy
::       _f [INTEGER]   - Rok podatkowy
::       _g [INTEGER]   - Miesiąc podatkowy
::       _h [STRING]    - Typ (N - Nadwyżka / R - Różnica ujemna)
::       _i [REAL]      - Wartość nadwyżki/różnicy ujemnej
::       [_j] [STRING]  - Czy zapis z korekty? (T/N)
::   WY: 1/0 - powodzenie operacji
::  OLD: \p_npop_add/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null) & _a<>null() || _a || return(0) ?};
_os_ref:={? var_pres('_b')=type_of(null) & _b<>null() || _b || null ?};
_o_ref:={? var_pres('_c')=type_of(null) & _c<>null() || _c || return(0) ?};
_rh_ref:={? var_pres('_d')=type_of(null) & _d<>null() || _d || null ?};
_f_zatr:={? var_pres('_e')=type_of('') & _e<>'' || _e || return(0) ?};
_rok:={? var_pres('_f')=type_of(0) & _f>0 || _f || return(0) ?};
_mc:={? var_pres('_g')=type_of(0) & _g>0 || _g || return(0) ?};
_typ:={? var_pres('_h')=type_of('') & (_h='N' | _h='R') || _h || return(0) ?};
_wart:={? var_pres('_i')=type_of(0) & _i<>0 || _i || return(0) ?};
_kor:={? var_pres('_j')=type_of('') & _j='T' || _j || 'N' ?};
_res:=0;

F_ZATR.cntx_psh();
_fz_ref:=__F_ZATR.find(_f_zatr);
F_ZATR.cntx_pop();

{? _fz_ref
|| P_NPOD.cntx_psh();
   P_NPOD.clear();
   P_NPOD.blank();
   P_NPOD.P:=_p_ref;
   P_NPOD.OSOBA:=_os_ref;
   P_NPOD.O:=_o_ref;
   P_NPOD.F_ZATR:=_fz_ref;
   P_NPOD.RH:=_rh_ref;
   P_NPOD.ROK:=_rok;
   P_NPOD.MC:=_mc;
   P_NPOD.NADWYZKA:={? _typ='N' || _wart || 0 ?};
   P_NPOD.ROZNICA:={? _typ='R' || _wart || 0 ?};
   P_NPOD.TYP:=_typ;
   P_NPOD.CZY_KOR:=_kor;
   _res:=P_NPOD.add();
   P_NPOD.cntx_pop()
?};
_res


\p_npod_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Usuwa informacje z tabeli P_NPOD
::   WE: _a [STRING]    - Kod formy współpracy
::       _b [REFERENCE] - Wskazanie na pracownika
::       _c [REFERENCE] - Wskazanie na listę płac
::       [_d] [REFERENCE] - Wskazanie na rachunek
::   WY: wynik operacji: 1 - usunięto, dziedzina jest pusta / 0 - błąd parametrów, błąd usuwania
::  OLD: \p_npod_del/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_f_zatr:={? var_pres('_a')=type_of('') & _a<>'' || _a || return(0) ?};
_p_ref:={? var_pres('_b')=type_of(null) & _b<>null() || _b || return(0) ?};
_o_ref:={? var_pres('_c')=type_of(null) & _c<>null() || _c || return(0) ?};
_rh_ref:={? _f_zatr<>'Z'
         || null
         || {? var_pres('_d')=type_of(null) & _d<>null()
            || _d
            || return(0)
            ?}
         ?};
_ret:=0;

F_ZATR.cntx_psh();
_fz_ref:=__F_ZATR.find(_f_zatr);
F_ZATR.cntx_pop();

{? _fz_ref
|| P_NPOD.cntx_psh();
   P_NPOD.index('FPLR');
   {? _f_zatr<>'Z'
   || P_NPOD.prefix(_fz_ref,_p_ref,_o_ref)
   || P_NPOD.prefix(_fz_ref,_p_ref,_o_ref,_rh_ref)
   ?};
   {? P_NPOD.first()
   || {! |? (_ret:=P_NPOD.del()) !};
      _ret:={? _ret || 0 || 1 ?}
   || _ret:=1
   ?};
   P_NPOD.cntx_pop()
?};

_ret


\KU_OLD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wyliczenie KU wg zasad na 31.12.2021r.
::   WE:
::   WY:
::  OLD: \KU_OLD/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUNKCJE.PL_NEW || return(0) ?};
:: 90204: Składki niestanowiące obniżenia podstawy opodat.
_skl_prac:=FUNKCJE.L(765,767)-FUNKCJE.L_SYS(9016)-FUNKCJE.L_SYS(90104);
_l:=FUNKCJE.L(780)-FUNKCJE.L_SYS(9041);
_l+=_skl_prac;
_wyn:=0;
{? _l>0
|| _l-=(FUNKCJE.L_SYS(551)+FUNKCJE.L_SYS(32))
|| _l:=0
?};
_ok:=_ku_norm:=0;
{? exec('spr_kor_pod','lista_licz',O.RP,O.MP)
|| _ku_old:=FUNKCJE.LP_SYS(90711,,,1);
   _ku_norm:=FUNKCJE.LP_SYS(931,,,1);
   {? _ku_norm>0 & ~_ku_old
   || _ok:=1
   ?}
?};
_param:=exec('wartosc','lista_par','BEZ_KU');
{? _l>0 & P_IPOD.KU<>'B' & (_param=~~ | {? var_pres('_param')=type_of('') || _param='N' ?} | _ok)
|| _ku:={? P_IPOD.KU='Z'
             || 300
             || 250
             ?};
   _n_zysk:=FUNKCJE.L_SYS(73);
   {? _n_zysk>0
   || _brutto:=FUNKCJE.L(500);
      {? FUNKCJE.L_SYS(710) & _brutto>0
      || _l-=_n_zysk/_brutto*FUNKCJE.L_SYS(724)$2
      ?}
   ?};
   {? _l>0
   || _ku-=FUNKCJE.LP(7178,,,,1);
      {? _ku<0
      || _ku:=0
      ?};
      {? _l<_ku
      || _wyn:=_l
      || _wyn:=_ku
      ?};
      {? _ok
      || _wyn+=_ku_norm;
         {? _wyn>_ku
         || _wyn:=_ku
         ?}
      ?}
   ?}
?};
_wyn


\wylicz_bilans
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wylicza możliwą do oddania do US różnicę ujemną dla zaliczki do podatku.
::   WE: _a [INT] - rok
::       _b [INT] - miesiąc
::       _c [DATE] - data wypłaty listy
::       _d [INTEGER] - numer listy
::       _e [STRING] - Forma zatrudnienia
::       _f [REAL] - kwota maksymalna
::       [_g] [DATE] - data wypłaty rachunku
::       [_h] [INT] - tylko dla jednego miesiąca
::  OLD: \wylicz_bilans/podatek4.fml
::   WY: Wartość możliwa do podniesienia zaliczki na podatek
::----------------------------------------------------------------------------------------------------------------------
_rok:=_a;
_mc:=_b;
_lista_d:=_c;
_lista_n:=_d;
_f_zatr:=_e;
_max:=_f;
_rh_dwy:={? var_pres('_g')=type_of(date()) || _g || date() ?};
_for_mc:={? var_pres('_h')=type_of(0) || _h ?};
_wynik:=0;
: wywołanie odpowiednio dla nadwyżki i różnicy w celu wyliczenia ile jeszcze pozostało różnicy do wykorzystania
_nadwyzka:=exec('wylicz_npod','lista_licz',_rok,_mc,_lista_d,_lista_n,_f_zatr,'N',_rh_dwy,_for_mc);
_roznica:=exec('wylicz_npod','lista_licz',_rok,_mc,_lista_d,_lista_n,_f_zatr,'R',_rh_dwy,_for_mc);
_bilans:=_nadwyzka-_roznica;
_wynik:=
   {? _max<_bilans
   || _max
   || _bilans
   ?};
{? _wynik<0
|| 0
|| _wynik
?}


\wylicz_npod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wylicza wartość nadwyżki lub różnicy ujemnej od początku roku do miesiąca listy bądz tylko dla miesiąca listy.
::   WE: _a [INT] - rok
::       _b [INT] - miesiąc
::       _c [DATE] - Data wypłaty listy
::       _d [INTEGER] - Numer listy
::       _e [STRING] - Forma zatrudnienia
::       _f [STRING] - Nadwyżka / Różnica
::       [_g] [DATE] - data wypłaty rachunku
::       [_h] [INT] - tylko z miesiąca listy
::  OLD: \wylicz_npod/podatek4.fml
::   WY: Wartość różnicy/nadwyżki
::----------------------------------------------------------------------------------------------------------------------
_rok:=_a;
_mc:=_b;
_lista_d:=_c;
_lista_n:=_d;
_f_zatr:=_e;
_typ:=_f;
_rh_dwy:={? var_pres('_g')=type_of(date()) || _g || date() ?};
_for_mc:={? var_pres('_h')=type_of(0) || _h || 0 ?};
_nadwyzka:=roznica:=_wynik:=0;
_P_ref:=P.ref();
O.cntx_psh();
RH.cntx_psh();
P.cntx_psh();
P_NPOD.index('FTORMDN');
{? _for_mc
|| P_NPOD.prefix(exec('ref_firma','ustawienia'),_f_zatr,_typ,P.OSOBA,_rok,_mc)
|| P_NPOD.prefix(exec('ref_firma','ustawienia'),_f_zatr,_typ,P.OSOBA,_rok)
?};
{? P_NPOD.first()
|| {? _f_zatr='P'
   || {!
      |? {? _mc>P_NPOD.MC |
            (_mc=P_NPOD.MC & _for_mc & (_lista_d>P_NPOD.O().D | (_lista_d=P_NPOD.O().D & _lista_n>P_NPOD.O().N ))) |
            (_mc=P_NPOD.MC & _for_mc & (_lista_d=P_NPOD.O().D & _lista_n=P_NPOD.O().N & _P_ref<>P_NPOD.P))
         || {? _typ='N'
            || _wynik+=P_NPOD.NADWYZKA
            || _wynik+=P_NPOD.ROZNICA
            ?};
            P_NPOD.next()
         ?}
      !}
   || {!
      |? {? _mc>=P_NPOD.MC
         || {? _typ='N'
            || _wynik+=P_NPOD.NADWYZKA
            || _wynik+=P_NPOD.ROZNICA
            ?};
            P_NPOD.next()
         ?}
      !}
   ?}
?};
P.cntx_pop();
RH.cntx_pop();
O.cntx_pop();
_wynik


\PA_OLD_KU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wylicza kosztu uzyskania dla praw autorkich wg zasad na 31.12.2022r.
::   WE:
::   WY:
::  OLD: \PA_OLD_KU/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_podst:=FUNKCJE.L_SYS(9042);
{? _podst
|| _ku:=_podst*0.5$2;
   _blokada:=obj_new(2);
   _blokada[1]:=_blokada[2]:=0;
   exec('blok_koszt50_zlec_rh','lista_licz',P.ref(),date(O.RP,O.MP,0),O.ref(),_ku,_blokada,1);
   {? _blokada[1]>0
   || _ku:=0
   |? ~_blokada[1] & _blokada[2]
   || _ku:=_blokada[2]
   ?};
   obj_del(_blokada);
   _ku
?}


\test_OLD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Test na przesuniecie wypłat zaliczek na podatek.
::   WE: _a - [DATE] data badania - domyślnie data bieżąca
::       [_b] - [INT] =1 - dla zleceń
::   WY: 1 - można przesunąć zaliczkę na podatek
::  OLD: \test_OLD/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_data:={? var_pres('_a')=type_of(date()) || _a || date() ?};
_zlecenia:={? var_pres('_b')=type_of(0) || _b ?};
_ok:=1;
_param:=exec('get_par','#parametr',290);
_ok:=type_of(_param)=type_of('') & _param='T';

{? _ok & ~_zlecenia
|| _wniosek:=exec('wn_podat_exist','lista_licz',P.OSOBA,'TP_ZAL_P',_data);
   _ok:=~_wniosek
?};
{? _ok & _zlecenia
|| _wniosek:=exec('wn_podat_exist','lista_licz',P.OSOBA,'TP_ZAL_Z',_data);
   {? var_pres('PTPZP',RU)<=0
   || _ok:='1,'*RH.ZLE().RU().K & ~_wniosek
   || _ok:=RH.ZLE().RU().PTPZP='T' & ~_wniosek
   ?}
?};
_ok


\spr_kor_pod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: sprawdzenie miesiąca z formułami typu P - korekty dla miesiąca podatkowego list.
::   WE: _a - rok podatkowy
::       _b - miesiąc podatkowy
::   WY: 1/0 - 1 - jest lista korygująca
::  OLD: \spr_kor_pod/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:={? var_pres('_a')=type_of(0) & _a>0 || _a ?};
_mc:={? var_pres('_b')=type_of(0) & _b>0 || _b ?};
{? ~_rok | ~_mc || return(0) ?};

O.cntx_psh();
O.index('LISTYPLP');
O.prefix(exec('ref_firma','ustawienia'),'P',_rok,_mc);
_ok:=0;
{? O.first()
|| {!
   |? _ok+=O.F='P';
      ~_ok & O.next()
   !}
?};
O.cntx_pop();
_ok


\add_kor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Wprowadzenie zapisów z listy korekcyjnej do tabeli nadwyżek - Polski ład
::   WE:
::   WY:
::  OLD: \add_kor/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~FUN.ask('%1\n%2'['Wprowadzenie zapisów z listy korekcyjnej do tabeli nadwyżek - Polski ład.'@,'Kontynuować?'@])
|| return(0)
?};
{? var_pres('P_NPOD')<>type_of(SYSLOG)
|| FUN.emsg('Brak w systemie tabeli nadwyżek dla polskiego ładu.'@);
   return(0)
?};
{? O.T().F<>'P' || FUN.emsg('Nieodpowiednia lista płac.'@); return(0) ?};

_ndx:=LS.ndx_tmp('',1,'P','FIRMA',,'RB','RN',);
LS.cntx_psh();
P.cntx_psh();
LS.index(_ndx);
LS.prefix(exec('ref_firma','ustawienia'),7170);
{? LS.first()
|| {!
   |? {? LS.KW>0
      || {? exec('p_npod_del','lista_licz','P',LS.P,O.ref)
         || exec('p_npod_add','lista_licz',LS.P,LS.P().OSOBA,O.ref,null,'P',O.RP,O.MP,'N',LS.KW,'T')
         ?}
      ?};
      LS.next()
    !}
?};
LS.ndx_drop(_ndx);
LS.cntx_pop();
P.cntx_pop();
1


\skl_n_p_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła płacowa (Składki niestanowiące obniżenia podstawy opodatkowania)
::   WE: _a [INTEGER] - numer atrybutu do zliczania już potrąconych diet
::       _b [INTEGER] - numer atrybutu "Składki niestanowiące obniżenia podstawy opodatkowania"
::      [_c][INTEGER] - odliczaj ZP 0/1. Domyślnie 0 - nie odliczaj
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) | var_pres('_b')<>type_of(0)
|| FUN.error('Błąd parametru wejściowego!'@);
   return(0)
?};
_wyn:=0;
_atrDiet:=_a;
_atrSkNstPdOp:=_b;
_odliczZp:={? var_pres('_c')=type_of(0) || _c || 0 ?};

:: 90103: Kwota diet obniżająca przychód (7197. OZ: Diety pomn. prz.)
:: lub 9068: 'Kwota diet pomniejszająca przychód (ZDR)
_kwotaDiet:=FUNKCJE.L_SYS(_atrDiet)+FUNKCJE.LP_SYS(_atrDiet);
{? _atrDiet=90103
|| _kwotaDiet+=DoList.k[42]
|? _atrDiet=9068
|| _kwotaDiet+=DoList.k[43]
?};
{? ~_kwotaDiet || return(0) ?};

_fakPrzych:=
:: 7200: Przychód do wyliczeń
   FUNKCJE.L(7200)+FUNKCJE.LP(7200)+DoList.k[39]
:: 90102: Rubryki nie stanowiące przychodu (Oddelegowania do pracy za granicą)
   -FUNKCJE.L_SYS(90102)-FUNKCJE.LP_SYS(90102)-DoList.k[40]
:: 90106: Składniki niestanowiące przychodu do proporcji (opodatkowane, ale niesatnowiące podstawy ubez.)
   -FUNKCJE.L_SYS(90106)-FUNKCJE.LP_SYS(90106)-DoList.k[44]
   -_kwotaDiet;

:: 5621: Podstawa Chorobowo-Wypadkowa
_podChWyp:=FUNKCJE.L_SYS(5621)+FUNKCJE.LP_SYS(5621)+DoList.k[3];

{? _odliczZp
:: 9022 ZP: przychód podlegający zwolnieniu
|| _zp:=FUNKCJE.L_SYS(9022)+FUNKCJE.LP_SYS(9022)+DoList.k[23];
   _fakPrzych-=_zp;
   _podChWyp-=_zp
?};

:: W przypadku, gdy przychód jest mniejszy od Podst. emer. i rent.
:: od podstawy opodatkowania odejmujemy składki na ubezpieczenie społeczne od przychodu faktycznego.
:: Aby to zrealizować powstał 7195: Sk. niest. pods. op., który zostanie następnie dodany do 780 Przychód
:: tak aby 780 Przychód był pomniejszony tylko o te składki, o które powinien.
{? _fakPrzych>=0 & _podChWyp>0
|| {? _fakPrzych<_podChWyp
   || _skladki:=FUNKCJE.L(765,767)+FUNKCJE.LP(765,767)+DoList.k[5]+DoList.k[6]+DoList.k[7];
::    Składki zliczamy w przekroju miesiąca, obliczamy proporcjonalnie ile z nich przypada na nieopodatkowany przychód
      _wyn:=_skladki-(_skladki*_fakPrzych/_podChWyp);
::    Pomniejszamy wyliczone "Sk. niest. pods. op." o te, które już "niestanowiły" na poprzednich listach
      _wyn-=(FUNKCJE.LP_SYS(_atrSkNstPdOp)+
             {? _atrSkNstPdOp=90104 || DoList.k[45]
             |? _atrSkNstPdOp=9069 || DoList.k[46]
             || 0
             ?}
            )

   || _wyn:=-(FUNKCJE.LP_SYS(_atrSkNstPdOp)+
              {? _atrSkNstPdOp=90104 || DoList.k[45]
              |? _atrSkNstPdOp=9069 || DoList.k[46]
              || 0
              ?}
             )
   ?}
?};
_wyn$2


\przych_do_wyl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła płacowa składnika 7200: Przychód do wyliczeń
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_prz:=LICZ.Wylicz(,'.POD')+FUNKCJE.L(779);

_prz


\ZP_mac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Zwolniony przychód z zasiłku macierzyńskiego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? FUNKCJE.PL_NEW & var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL
|| __ZW_PRZ.MAC
?}


\ZP_stosunek_pracy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Zwolniony przychód ze stosunku pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_zp_przychod:=FUNKCJE.L_SYS(9022);
_wynik:=0;
{? _zp_przychod>0 & FUNKCJE.PL_NEW & var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL
|| _mac:=FUNKCJE.L_SYS(552);
   _przychod:=LICZ.Wylicz(,'.POD')+FUNKCJE.L(779)-FUNKCJE.L_SYS(9021)-_mac;
   {? _mac>0
   || {? _przychod>=_zp_przychod
      || _wynik:=__ZW_PRZ.PRACA:=_zp_przychod;
         __ZW_PRZ.MAC:=0
      || _wynik:=__ZW_PRZ.PRACA:=_przychod;
         __ZW_PRZ.MAC:=_zp_przychod-_przychod
      ?}
   || _wynik:=__ZW_PRZ.PRACA:=_zp_przychod;
      __ZW_PRZ.MAC:=0
   ?}
?};
_wynik


\wartosci_listy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [22.26]
:: OPIS: Wyliczenie wartości dla podanego atrybutu listami z miesiąca zarobkowo, ubezpieczeniowo, podatkowo.
::   WE: _a [INTEGER] - atrybut uwzgledniany
::       _b [INTEGER] - rok
::       _c [INTEGER]- miesiąc
::       [_d] - STRING - 'Z' - zarobkowo (domyślnie). 'P' - podatkowo, 'U' - ubezpieczeniowo
::       [_e] - opcjonalny atrybut wyklucza rubryki zawarte w atrybucie _a
::       [_f] - ref OSOBA
::       [_g][_KRAJE] - wskazanie na kraj. Zliczanie będzie tylko po listach oznaczonych tym krajem. Domyślnie brak
::   WY:   suma składników w atrybucie
::  OLD: \wartosci_listy/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) | var_pres('_b')<>type_of(0) | var_pres('_c')<>type_of(0)
|| return(0)
?};
{? var_pres('_d')=type_of('') || _rodzaj:=_d || _rodzaj:='Z' ?};
_rok:=_b;
_mc:=_c;

_rub:=__RUB.sys_rub(_a,date(_rok,_mc,0));
: wykluczenie rubryk z atrybutu
{? var_pres('_e')=type_of(0)
|| _bez_rub:=__RUB.sys_rub(_e,date(_rok,_mc,0));
   {? _bez_rub.first()
   || {!
      |? {? _rub.find_key(_bez_rub.RN) || _rub.del() ?};
         _bez_rub.next()
      !}
   ?}
?};
_osoba:={? var_pres('_f')=type_of(null()) || _f || null() ?};
_kraj:={? var_pres('_g')=type_of(null()) & _g<>null() & ref_tab(_g)=KRAJE || _g || null() ?};

O.cntx_psh();
LS.cntx_psh();
{? _rodzaj='Z'
|| O.index('LISTYPLA')
|? _rodzaj='P'
|| O.index('LISTYPLP')
|? _rodzaj='U'
|| O.index('LISTYPLU')
?};
_firma:=exec('ref_firma','ustawienia');
O.prefix(_firma,'P',_rok,_mc);
_wynik:=0;
{? O.first()
|| _suma:="
      _wyn:=0;
      {? _a.first()
      || {!
         |? LS.prefix(_b,_a.RN);
            {? LS.first()
            || {!
               |? _wyn+=LS.KW$2;
                  LS.next()
               !}
            ?};
            _a.next()
         !}
      ?};
      _wyn";
   {!
   |? {? _kraj=null() | O.KRAJE=_kraj
      || LS.use(O.LT);
         {? _osoba
         || LS.index('OSOBAKOD');
            LS.prefix(_osoba);
            _ref:=_osoba
         || LS.index('PRACNRRU');
            LS.prefix(P.ref());
            _ref:=P.ref()
         ?};
         {? LS.first()
         || _wynik+=_suma(_rub,_ref)
         ?}
      ?};
      O.next()
   !}
?};
O.cntx_pop();
LS.cntx_pop();
_wynik


\wyplata_przed_splata
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Weryfikacja czy istnieją listy pobierane do wyliczeń z datą wypłaty wcześniejszą od rozpoczęcia spłaty.
::       Weryfikacja dotyczy rownież rachunków.
::   WE: [_a] - domyślnie 0 - brak komunikatu
::   WY: 0 - brak list sprzed rozpoczęcia spłaty w tym samym mieisącu,
::       1 - istnieją listy pobrane sprzed rozpoczęcia spłaty
::  OLD: \wyplata_przed_splata/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
_komunikat:={? var_pres('_a')=type_of(0) || _a ?};
_data_splaty:=KOM_OS.OD;
_wynik:=0;
O.cntx_psh();
LS.cntx_psh();
P.cntx_psh();

_podatkowo:=exec('test_par','parametr',259,'T');
{? _podatkowo
|| _data_od:=date(O.RP,O.MP,1);
   _data_do:=date(O.RP,O.MP,0);
   O.index('LISTYPLP')
|| _data_od:=date(O.R,O.M,1);
   _data_do:=date(O.R,O.M,0);
   O.index('LISTYPLA')
?};
{? _data_splaty>_data_od & _data_splaty<=_data_do
|| O.prefix(exec('ref_firma','ustawienia'),'P',_data_od~1,_data_od~2);
   _lista:=_pracownik:='';
   {? O.first()
   || {!
      |? {? O.D<_data_splaty
         || LS.use(O.LT);
            LS.index('OSOBAKOD');
            LS.prefix(exec('ref_firma','ustawienia'),KOM_OS.OSOBA);
            {? LS.first()
            || _pracownik:=LS.P().T;
               _wynik:=1;
               _lista:='listy płac'
            ?}
         ?};
         ~_wynik & O.next()
      !}
   ?};
   RH.cntx_psh();
   ZC.cntx_psh();
   RH.index('RACHWYPL');
   RH.prefix(exec('ref_firma','ustawienia'),KOM_OS.OSOBA);
   {? RH.find_le(_data_splaty-1) & RH.DWY>=_data_od
   || {? +_lista
      || _lista+=' oraz '
      ?};
      _lista+='umowy zlecenia';
      _wynik:=2
   ?};
   RH.cntx_pop();
   ZC.cntx_pop();
   {? _wynik & _komunikat
   || _sygnatura:={? +KOM_OS.SYG || ', sygnatura: '+KOM_OS.SYG+', ' || ', ' ?};
      RAPLS.msg(_pracownik,KOM_OS.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
         'Dla potrącenia: '+KOM_OS.KOM_RP().N+_sygnatura+'data rozpoczęcia spłaty potrącania: '+$KOM_OS.OD+'.',
         'Wykryto '+_lista+' w bieżącym miesiącu sprzed daty spłaty potrącenia.',

         'Należy ręcznie wyliczyć spłatę dla tego potrącenia oraz zweryfikować naliczenia dla innych zobowiązań.')
   ?}
?};
P.cntx_pop();
O.cntx_pop();
LS.cntx_pop();
_wynik


\ulga_podatkowa_KST
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Ustala ulgę podatkową ze stałych systemu na podstawie ilości miejsc pracy.
::   WE: _a - ilość miejsc zatrudnienia
::       _b - data badania
::   WY:
::  OLD: \ulga_podatkowa_KST/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_kst:='KST.UL'+{? (#_a-1)>0 || _a || '' ?};
exec('czytaj','#stalesys',_b,KST,_kst);
($_kst)()


\ulga_podatkowa_exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Ustala czy należy się ulga podatkowa według zasad na styczeń 2023.
::   WE: _a [reference] - OSOBA.ref lub P.ref
::       _b [date] - data badania
::       [_c] [int] - kod platnika
::   WY:
::  OLD: \ulga_podatkowa_exist/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
{? _b~1>2022
|| _platnik:={? var_pres('_c')=type_of('') || _c  || '' ?};
   exec('os_zwzal_find','overlap',_b,,_platnik,'UZ_POD')<>''
?}


\rozlicz_suma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Procedura sumuje ulgi zapisane w rozliczeniu.
::   WE: _a [int] - atrybut - lub 0 jeśli ma jest podany typ wniosku, atrybut zostanie pobrany ze słownika
::       _b [reference] - OSOBA.ref
::       _c [int] - rok
::       [_d] [int] - miesiąc
::       [_e] [reference] - P.ref
::       [_f] [int] - (domyślnie 0 - atrybut systemowy); jeśli 1 - oznacza atrybut użytkownika
::       [_g] [string] - jeśli podany kod wniosku - pobierze dane tylko dla tego typu.
::       [_h] [int] - miesiąc do którego będzie sumowanie.
::       [_i] [int] - doliczyć wartość wprowadzoną ręcznie do WART
::   WY: tabela w postaci -
::        pola:
::          RN [int] - numer rubryki;
::          WART [real]-  wartość dla rubryki,
::          WART_R [real] - wartość wprowadzana ręcznie
::        indeks -  RN
::          Jeżeli RN=0 - oznacza to pobraną wartość wprowadzaną ręcznie
::  OLD: \rozlicz_suma/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_attr:=_a;
_osoba:=_b;
_rok:=_c;
_miesiac:={? var_pres('_d')=type_of(0) || _d ?};
_pracownik:={? var_pres('_e')=type_of(null) || _e || null() ?};
_rodzaj:={? var_pres('_f')=type_of(0) || _f ?};
_wniosek:={? var_pres('_g')=type_of('') || _g || '' ?};
_koniec:={? var_pres('_h')=type_of(0) || _h || 12 ?};
_reczny:={? var_pres('_i')=type_of(0) || _i<>0 ?};
_firma:=exec('ref_firma','ustawienia');

_tab:=tab_tmp(1,
   'RN','INTEGER','Rubryka',
   'WART','REAL','Wartość sumy',
   'WART_R','REAL','Wartość wprowadzana ręcznie'
   );

{? ~_attr
|| {? _wniosek=''
   || return(_tab)
   || OS_ZWSLO.index('KOD');
      OS_ZWSLO.prefix(_firma,_wniosek,);
      _attr:={? OS_ZWSLO.first() || OS_ZWSLO.RA_DEF().SYMBOL || 0 ?}
   ?}
?};
{? ~_attr
|| return(_tab)
?};

OS_ZWPOZ.cntx_psh();
OS_ZWPKW.cntx_psh();
OS_ZWPKW.index('RN');
OS_ZWSLO.prefix();
{? _pracownik
|| _index:='PRACROK';
   _osoba:=_pracownik
|| _index:='OS_RMOR'
?};
OS_ZWPOZ.index(_index);
{? _miesiac
|| {? _index='PRACROK'
   || OS_ZWPOZ.prefix(_osoba,_rok,_miesiac)
   || OS_ZWPOZ.prefix(_firma,_osoba,_rok,_miesiac)
   ?}
|| {? _index='PRACROK'
   || OS_ZWPOZ.prefix(_osoba,_rok)
   || OS_ZWPOZ.prefix(_firma,_osoba,_rok)
   ?}
?};

{? _rodzaj
|| _rub:=__RUB.usr_rub(_attr,date(_rok,_miesiac,0))
|| _rub:=__RUB.sys_rub(_attr,date(_rok,_miesiac,0))
?};

{? OS_ZWPOZ.first() & _rub.first()
|| {!
   |? {? _wniosek='' | _wniosek=OS_ZWPOZ.OS_ZWSLO().KOD
      || {? OS_ZWPOZ.MC<=_koniec
         || {? _rub.first()
            || {!
               |? OS_ZWPKW.prefix(_firma,OS_ZWPOZ.ref(),_rub.RN);
                  {? OS_ZWPKW.first()
                  || {!
                     |? _tab.blank(1);
                        {? OS_ZWPOZ.WYK_PRZ='T'
                        || {? _reczny
                           || _tab.WART:=OS_ZWPKW.WART
                           ?};
                           _tab.WART_R:=OS_ZWPKW.WART
                        || _tab.WART:=OS_ZWPKW.WART
                        ?};
                        _tab.RN:=_rub.RN;
                        _tab.add();
                        OS_ZWPKW.next()
                     !}
                  ?};
                  _rub.next()
               !}
            ?}
         ?}
      ?};
      OS_ZWPOZ.next()
   !}
?};
OS_ZWPKW.cntx_pop();
OS_ZWPOZ.cntx_pop();
{? _tab.first()
|| sql('select RN, sum(WART) as WART, sum(WART_R) as WART_R from :_a group by RN order by 1',_tab)
|| _tab
?}


\rozlicz_add_pozycja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wprowadzenie pozycji rozliczenia wniosku.
::   WE: _a [string/reference]- rodzaj wniosku
::       _b [int] - rok
::       _c [int] - mc
::       [_d] [reference] - O.ref
::       [_e] [reference] - RH.ref
::   WY:
::  OLD: \rozlicz_add_pozycja/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
OS_ZWPOZ.prefix();
OS_ZWPOZ.blank(1);
OS_ZWPOZ.OSOBA:=OSOBA.ref;
OS_ZWPOZ.P:=P.ref;
OS_ZWPOZ.WYK_PRZ:='N';

{? type_of(_a)=type_of('')
|| _wniosek:=exec('rozlicz_ref_typ','lista_licz',_a)
|| _wniosek:=_a
?};
{? ~_wniosek || return(0) ?};

OS_ZWPOZ.FIRMA:=exec('ref_firma','ustawienia');
OS_ZWPOZ.OS_ZWSLO:=_wniosek;
OS_ZWPOZ.ROK:=_b;
OS_ZWPOZ.MC:=_c;
{? var_pres('_d')=type_of(null)
|| OS_ZWPOZ.O:=_d
?};
{? var_pres('_e')=type_of(null)
|| OS_ZWPOZ.RH:=_e
?};
{? OS_ZWPOZ.add()
|| _ret:=OS_ZWPOZ.ref
|| _ret:=null()
?};
_ret


\rozlicz_del_pozycja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Usunięcie pozycji dla rozliczenia wniosku lub oświadczenia.
::       Uwaga, bez podania rodzaju wniosku kasuje wszystkie rozliczenia pracownika w danym miesiącu.
::   WE: _a [int] - rok
::       _b [int] - mc
::       [_c] [reference] - O.ref
::       [_d] [reference] - RH.ref
::       [_e] [string/reference] - rodzaj wniosku
::   WY:
::  OLD: \rozlicz_del_pozycja/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_rok:=_a;
_mc:=_b;
_lista:={? var_pres('_c')=type_of(null()) || _c || null() ?};
_rh:={? var_pres('_d')=type_of(null()) || _d || null() ?};
_firma:=exec('ref_firma','ustawienia');
OS_ZWPOZ.cntx_psh();

_wniosek:=null();
{? var_pres('_e')=type_of('')
|| _wniosek:=exec('rozlicz_ref_typ','lista_licz',_e)
|? var_pres('_e')=type_of(null())
|| _wniosek:=_e
?};

{? _wniosek
|| OS_ZWPOZ.index('PRACTYP');
   OS_ZWPOZ.prefix(P.ref,_wniosek,_rok,_mc,_lista,_rh)
|| OS_ZWPOZ.index('PRACROK');
   OS_ZWPOZ.prefix(P.ref,_rok,_mc,_lista,_rh)
?};
OS_ZWPKW.index('OS_ZWPKW');
{? OS_ZWPOZ.first
|| {!
   |? OS_ZWPKW.prefix(_firma,OS_ZWPOZ.ref());
      {? OS_ZWPKW.first()
      || {!
         |? OS_ZWPKW.del()
         !}
      ?};
      _ret:=OS_ZWPOZ.del()
   !}
?};
OS_ZWPOZ.cntx_pop();
_ret


\rozlicz_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Dodanie wartości z listy płac do rozliczenia wniosku lub oświadczenia.
::   WE: _a [string/reference] - rodzaj wniosku
::       [_b] [reference] - RH.ref - dla zleceń
::   WY:
::  OLD: \rozlicz_add/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_wniosek:=null();
{? var_pres('_a')=type_of('')
|| _slo_ref:=exec('rozlicz_ref_typ','lista_licz',_a)
|| _slo_ref:=_a
?};
OS_ZWSLO.prefix();
{? OS_ZWSLO.seek(_slo_ref)
|| _wniosek:=OS_ZWSLO.ref();
   _atrybut:=OS_ZWSLO.RA_DEF().SYMBOL
?};
{? ~_wniosek || return(0) ?};

{? var_pres('_b')=type_of(null()) & _b<>null()
|| _rok:=RH.DWY~1;
   _mc:=RH.DWY~2;
   _lista:=null();
   _rh:=RH.ref()
|| _rok:=O.RP;
   _mc:=O.MP;
   _lista:=O.ref();
   _rh:=null()
?};

{? ~exec('rozlicz_del_pozycja','lista_licz',_rok,_mc,_lista,_rh,_wniosek)
|| _poz:=exec('rozlicz_add_pozycja','lista_licz',_wniosek,_rok,_mc,_lista,_rh);
   {? _poz
   || {? _rh<>null
      || _tab_rub:=__RUB.sys_rub(_atrybut,RH.DWY);
         {? _tab_rub.first()
         || {!
            |? exec('rozlicz_add_wartosc','lista_licz',_poz,_tab_rub.RN,FUNKCJE.Z(_tab_rub.RN));
               _tab_rub.next()
            !}
         ?}
      || _tab_rub:=__RUB.sys_rub(_atrybut,date(O.RP,O.MP,0));
         {? _tab_rub.first()
         || {!
            |? exec('rozlicz_add_wartosc','lista_licz',_poz,_tab_rub.RN,FUNKCJE.L(_tab_rub.RN));
               _tab_rub.next()
            !}
         ?}
      ?};
      OS_ZWPKW.index('OS_ZWPKW');
      OS_ZWPKW.prefix(exec('ref_firma','ustawienia'),_poz);
     {? ~OS_ZWPKW.first() || exec('rozlicz_del_pozycja','lista_licz',_rok,_mc,_lista,_rh,_wniosek) ?}
   ?}
?}


\rozlicz_add_wartosc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Dodanie rekordu rozliczenia
::   WE: _a – [REFERENCE] wskazanie na pozycję zwolnienia
::       _b – [INTEGER] numer sładnika płacowego
::       _c – [REAL]  wartość
::   WY:
::  OLD: \rozlicz_add_wartosc/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_poz:={? var_pres('_a')=type_of(null) || _a || null ?};
_rub:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_war:={? var_pres('_c')=type_of(0) || _c || 0 ?};
{? _poz=null | ~_rub | ~_war || return(0) ?};
OS_ZWPKW.prefix();
OS_ZWPKW.blank(1);
OS_ZWPKW.FIRMA:=exec('ref_firma','ustawienia');
OS_ZWPKW.OS_ZWPOZ:=_poz;
OS_ZWPKW.R:=__RUB.ref(_rub);
OS_ZWPKW.WART:=_war;
OS_ZWPKW.add()


\rozlicz_ref_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: wyszukanie wskazania typu zwolnienia (wg kodu)
::   WE: _a [string] - kod typu wniosku
::   WY: ref tupu wniosku lub null jeśli nie znaleziono
::  OLD: \rozlicz_ref_typ/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();
_kod:=_a;
OS_ZWSLO.index('KOD');
OS_ZWSLO.prefix(exec('ref_firma','ustawienia'));
{? OS_ZWSLO.find_key(_kod)
|| _ret:=OS_ZWSLO.ref()
?};
_ret


\ulga_podatkowa_verify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Weryfikacja dla wartości dochodu do wyliczeń zwolnienia podatku.
::   WE: _a [reference] - OSOBA.ref
::       _b [date] - data badania
::       [_c] [reference] - O.ref
::       [_d] [reference] - RH.ref
::       _e [integer] - czy jest wniosek w bieżącym
::   WY: Wartość dochodu od początku roku do podwyższenia wykorzystania.
::  OLD: \ulga_podatkowa_verify/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? _b~1>2022
|| _osoba:=_a;
   _data:={? var_pres('_b')=type_of(date()) || _b || date() ?};
   _O_ref:={? var_pres('_c')=type_of(null()) || _c || null() ?};
   _RH_ref:={? var_pres('_d')=type_of(null()) || _d || null() ?};
   _firma:=exec('ref_firma','ustawienia');
   _wniosek:=exec('rozlicz_ref_typ','lista_licz','UZ_POD');
   {? ~_wniosek || return(0) ?};
   _aktywny:={? var_pres('_e')=type_of(0) || _e ?};
   _rok:=_data~1;
   _mc:=_data~2;
   O.cntx_psh();
   O.index('LISTYPLP');
   LS.cntx_psh();
   ZC.cntx_psh();
   RH.cntx_psh();
   RH.index('RACHDATA');
   P.cntx_psh();
   OS_ZWPOZ.cntx_psh();
   OS_ZWPOZ.index('OS_ZWPOZ');
   _find_roz:="
      OS_ZWPOZ.prefix(_g,_a,_c,_d,_e,_f);
      _wyn:=0;
      {? OS_ZWPOZ.first()
      || {!
         |? _wyn+=OS_ZWPOZ.OS_ZWSLO=_b;
            ~_wyn & OS_ZWPOD.next()
         !}
      ?};
      _wyn
   ";
   _suma_attr:="
      _wyn:=0;
      _tab:=__RUB.sys_rub(_a);
      {? _tab.first()
      || {!
         |? LS.prefix(_c,_b,_tab.RN);
            {? LS.first() || {! |? _wyn+=LS.KW; LS.next() !} ?};
            _tab.next()
         !}
      ?};
      _wyn
   ";
   _licz_ls:="
      _wyn:=0;
      {? LS.use(O.LT)
      || LS.index('OSOBAKOD');
         _prz:=_a(92,_b,_c);
         {? _prz
         || _wyn+=_prz;
            _wyn+=_a(5711,_b,_c);
            _wyn+=_a(5721,_b,_c);
            _wyn-=_a(93,_b,_c);
            _wyn-=_a(9026,_b,_c)
         ?}
      ?};
      _wyn
   ";
   _licz_rh:="
      _prz:=exec('licza_rhs','lista_licz',92);
      _wyn:=0;
      {? _prz
      || _wyn+=_prz;
         _wyn+=exec('licza_rhs','lista_licz',5711,5721);
         _wyn-=exec('licza_rhs','lista_licz',93,9026)
      ?};
      _wyn
   ";

:: umowa o prace
   _end:=0;
   {! _ind:=_mc // -1..1
   |! O.prefix(_firma,'P',_rok,_ind);
      {? O.last()
      || {!
         |? {? O.D<=_data & O.ref()<>_O_ref
            || {? _aktywny
               || {? ~_find_roz(_osoba,_wniosek,_rok,_ind,O.ref(),null,_firma)
                  || _wyn+=_licz_ls(_suma_attr,_osoba,_firma)
                  ?}
               || {? exec('wn_podat_exist','lista_licz',_osoba,'UZ_POD',O.D,'W') | _end
                  || _end:=1;
                     {? ~_find_roz(_osoba,_wniosek,_rok,_ind,O.ref(),null,_firma)
                     || _wyn+=_licz_ls(_suma_attr,_osoba,_firma)
                     ?}
                  ?}
               ?}
            ?};
            O.prev()
         !}
      ?}
   !};
:: umowa zlecenie
   _end:=0;
   {! _ind:=_mc // -1..1
   |! RH.prefix(_firma,_osoba,_rok,_ind);
      {? RH.last()
      || {!
         |? {? RH.DWY<=_data & RH.ref()<>_RH_ref & RH.ZLE().RU().BEZPOD='T'
            || {? _aktywny
               || {? ~_find_roz(_osoba,_wniosek,_rok,_ind,null,RH.ref(),_firma)
                  || _wyn+=_licz_rh()
                  ?}
               || {? exec('wn_podat_exist','lista_licz',_osoba,'UZ_POD',RH.DWY,'W') | _end
                  || _end:=1;
                     {? ~_find_roz(_osoba,_wniosek,_rok,_ind,null,RH.ref(),_firma)
                     || _wyn+=_licz_rh()
                     ?}
                  ?}
               ?}
            ?};
            RH.prev()
         !}
      ?}
   !};
   OS_ZWPOZ.cntx_pop();
   P.cntx_pop();
   RH.cntx_pop();
   ZC.cntx_pop();
   LS.cntx_pop();
   O.cntx_pop()
?};
_wyn


\del__SK_CHO
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Usunięcie zapisów __SK_CHO dla danego miesiąca.
::   WE: _a [INT]    - ref nieobecności jako int
::       _b [DATE]   - usuwany miesiąc z zapisów
::      [_c][STRING] - typ usuwanego zapisu (G - dla godzin, P - dla premii okresowych)
::   WY: 0/1 [INT] - powodzenie operacji
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _N_ref:=_a || return(0) ?};
{? var_pres('_b')=type_of(date()) || _mc:=_b || return(0) ?};
_typ:={? var_pres('_c')=type_of('') || _c || '' ?};
_ret:=1;

__SK_CHO.cntx_psh();
__SK_CHO.index(__SK_ND2);
__SK_CHO.prefix(_N_ref,_mc,_typ);
{? __SK_CHO.first()
|| {!
   |? __SK_CHO.del()
   !}
?};
__SK_CHO.cntx_pop();

_ret


\podatek_zasilek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wylicznie zaliczki na podatek z zasiłku na danej liście płac
::   WE:
::   WY: [REAL] - wartość wyliczonej części zaliczki podatkowej wg proporcji
::----------------------------------------------------------------------------------------------------------------------
_wynik:=0;
_suma:="
   _wyn:=0;
   {? _a.first()
   || {!
      |? LS.prefix(P.ref(),_a.RN);
         {? LS.first()
         || {!
            |? _wyn+=LS.KW$2;
               LS.next()
            !}
         ?};
         _a.next()
      !}
   ?};
_wyn";
_zasilki:=_suma(__RUB.sys_rub(55));
_przychod:=_suma(__RUB.sys_rub(92));

{? _zasilki & _przychod
|| _przychod:=_suma(__RUB.sys_rub(92));
   _podatek:=_suma(__RUB.sys_rub(961));
   _ZP_mac:=_suma(__RUB.sys_rub(90203));
   _wynik+=(((_zasilki-_ZP_mac)/_przychod)*_podatek)$0
?};
_wynik


\pom_nie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Pominiejszenie kwot składników uwzględnianych w podstawie ubezpieczeń o kwoty przypadające na czas nieobecności
::       dla standardowej definicji atrybutów i rubryk.
::   WE: _a [INTEGER] - kod atrybutu określającego składniki pomniejszane o nieobecności
::       _b [INTEGER] - kod atrybutu określającego nieobecności pomniejszające składniki
::       _c [INTEGER] - kod atrybutu określającego składnik zmieniający podstawę dla poprzednich miesięcy
::   WY: kwota pomniejszenia
::----------------------------------------------------------------------------------------------------------------------
_beg:=date(O.R,O.M,1);
_end:=date(O.R,O.M,0);

:: wstępne warunki wykonania i mapa argumentów
{? var_pres('_a')<>type_of(0) | (_atr_skl:=_a)<=0 |
   var_pres('_b')<>type_of(0) | (_atr_nie:=_b)<=0 |
   var_pres('_c')<>type_of(0) | (_atr_pop:=_c)<=0 |
   (_dom_skl:=__RUB.sys_sql(_atr_skl,_end))='' |
   (_dom_nie:=__RUB.sys_sql(_atr_nie,_end))='' |
   (_rub_pop:=__RUB.sys_kod(_atr_pop,_end))<=0
|| return(0)
?};

:: kwoty i nieobecności w miesiącach
_TAB:=tab_tmp(2,
   'R','INTEGER',,
   'M','INTEGER',,
   'KW','REAL',,
   'NK','INTEGER',
);
_buf:=obj_new('TAB','add');
_buf.TAB:=_TAB;
_buf.add:="
   {? .TAB.find_key(_a,_b)
   || .TAB.KW+=_c;
      .TAB.NK+=_d;
      .TAB.put()
   || .TAB.R:=_a;
      .TAB.M:=_b;
      .TAB.KW:=_c;
      .TAB.NK:=_d;
      .TAB.add()
   ?}
";

:: suma składników zwiększających podstawę ubezpieczeń
_buf.add(O.R,O.M,FUNKCJE.L_SYS(_atr_skl),0);

:: pobierz liczbę dni nieobecności rozliczonych na listach płac
:: zgodnych co do miesiąca ubezpieczeniowego z listą bieżącą lub
:: nierozliczonych, ale przypadających na miesiąc kosztowy listy
N.cntx_psh();
N.index('NIEOBECL');
O.cntx_psh();
O.index('LISTYPLU');
O.prefix(exec('ref_firma','ustawienia'),'P',O.RU,O.MU);
_loop:=O.first();
{!
|? _loop
|! N.prefix('N',P.ref(),~-O.LT,);
   _loop:=N.first();
   {!
   |? _loop
   |! _rub:=
         {? N.DO~1<>_end~1 | N.DO~2=_end~2
         || __RUB.sys_sql(_atr_nie,date(N.DO~1,N.DO~2,0))
         || _dom_nie
         ?};
      {? (','+_rub+',')*(','+$N.NB().RN+',')
      || _buf.add(N.DO~1,N.DO~2,0,N.NK)
      ?};
      _loop:=N.next()
   !};
   _loop:=O.next()
!};
O.cntx_pop();
N.cntx_pop();

:: pobierz kwoty składników z poprzednich miesięcy
_TAB.f_set('R,M',,'R<>:_a or M<>:_b',O.R,O.M);
_loop:=_TAB.f_first();
{!
|? _loop
|! O.cntx_psh();
   O_P.cntx_psh();
   O_P.index('P_RMK');
   O_P.prefix('T',P.ref(),_TAB.R,_TAB.M,P.F_ZATR);
   _loop:=O_P.first();
   {!
   |? _loop
   |! O_P.O();
      FUNKCJE.OTWOLIST();
      _buf.add(O.R,O.M,FUNKCJE.L_SYS(_atr_skl),0);
      _loop:=O_P.next()
   !};
   O_P.cntx_pop();
   O.cntx_pop();
   FUNKCJE.OTWOLIST();
   _loop:=_TAB.f_next()
!};

:: wylicz zmniejszenie za poprzednie miesiące
_loop:=_TAB.f_first();
_pom:=0;
{!
|? _loop
|! _dni:=date(_TAB.R,_TAB.M,0)-date(_TAB.R,_TAB.M,1)+1;
   _pom+=(_TAB.KW*_TAB.NK/_dni)$2;
   _loop:=_TAB.f_next()
!};

:: zapisz zmianę podstawy z poprzednich miesięcy
FUNKCJE.LK(_rub_pop,,_pom);

{? _pom<>0
:: nie robimy korekt na listach płac
|| RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
      'Kwotę '+form(_pom,,2)+' rubryki '+form(_rub_pop,,,'99')+' - '+RUB.RT[_rub_pop],
      'wynikającą z rozliczenia nieobecności z poprzednich miesięcy',
      'należy uwzględnić samodzielnie w odpowiednich raportach ZUS i/lub PPK.'
   )
?};

_TAB.f_clear();
{? _TAB.find_key(O.R,O.M)
:: zmiana podstawy dla bieżącej listy płac
|| _dni:=date(_TAB.R,_TAB.M,0)-date(_TAB.R,_TAB.M,1)+1;
   (_TAB.KW*_TAB.NK/_dni)$2
?}


\Prm_p_za
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [12.51]
:: OPIS: Przeliczenie premii proporcjonalnie do pełnych miesięcy w przypadku zatrudnienia w trakcie okresu
::       otrzymanej premii [w kwartale, półroczu, roku]
::   WE: _a [tab] - kwoty premii _a[1] brutto; _a[2] netto
::       _b [tab] - daty okresu _b[1] początek; _b[2] koniec
::       _c [STRING] - typ przeliczenia
::                     'R' - proporcjonalnie do dni roboczych;
::                     'K' - proporcjonalnie do dni kalendarzowych
::   WY: 1 - wykonano przeliczenie;
::       0 - nie wykonano przeliczenia
::       w wyniku zostają także przeliczone tabele _a i _b
::  OLD: \Prm_p_za/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
{? P.DZA>_b[1]
|| _od:=P.DZA;
   _do:=_b[2];
   {? _od>_do
   || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                'Błąd funkcji rozliczającej premie w zasiłkach chorobowych.'@);
     return(0)
   ?};
   _przel:=0;
   _dni:=0;
   {? _c='K'
   || _dni:=(_do-_od)+1
   |? _c='R'
   || _dni:=__KAL.w_days(_od,_do)
   ?};
   {? _dni
   || _LiczOd:=(date(_od~1,_od~2,0))+1;
      {? _LiczOd<_do
      || _PelneMC:={? _c='K' || (_do-_LiczOd)+1 || __KAL.w_days(_LiczOd,_do) ?};
         _a[1]:=(_a[1]/_dni)$2*_PelneMC$2;
         _a[2]:=(_a[2]/_dni)$2*_PelneMC$2;
         _b[1]:=_LiczOd;
         _przel:=1
      ?}
   ?};
   _przel
|| return(0)
?}

:Sign Version 2.0 jowisz:1045 2024/02/15 12:11:55 8fced7bc125a02ccf5711b40f24302558b4ed009eea0d31082783b7db11bb870d4f127fe31133231815bd83b414317cecb7700ee46c90020a9462582e4aa77d184e1674f05db385a8209a2bf585abd4f89a31c5e272c69dd8ae1b317109563a4369517c48d5bc1b733ff48f28e3bbfadecbcae5935a4e4a2b46e555f145ccbdd
