:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: pm_wspolne.fml
:: Utworzony: 12.05.2017
:: Autor: TMR
::======================================================================================================================
:: Zawartość: Wspólne formuły dla obsługi premii uznaniowych.
::======================================================================================================================


::======================================================================================================================
:: Formuły wykorzystywane podczas naliczania listy płac.
::======================================================================================================================


\pm_kwota
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Formuła dla bieżącego pracownika i bieżącej listy płac zwraca kwotę premii uznaniowej
::       przyznanej przez dysponenta.
::   WE: _a [NUMBER] - Numer rubryki płacowej.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) | (_rref:=__RUB.ref(_a))=null()
|| return(0)
?};

_kw:=0;
PM_PREM.cntx_psh();
PM_PREM.index('PBRO');
PM_PREM.prefix(P.ref(),'T',_rref,O.R,O.M);
_loop:=PM_PREM.first();
{!
|? _loop
|! {? PM_PREM.LT=''
   || {? PM_PREM.KW
      || _kw+=PM_PREM.KW;
         PM_PREM.LT:=VAR.NAZWALIS;
         PM_PREM.put()
      ?}
   |? PM_PREM.LT=VAR.NAZWALIS
   || {? PM_PREM.KW
      || _kw+=PM_PREM.KW
      || PM_PREM.LT:='';
         PM_PREM.put()
      ?}
   ?};
   _loop:=PM_PREM.next()
!};
PM_PREM.cntx_pop();
_kw


\pm_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Formuła wykorzystywana podczas usuwania składników z listy płac. Dla bieżącego pracownika i bieżącej listy płac
::       usuwa znak listy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PM_PREM.cntx_psh();
PM_PREM.index('PLT');
{!
|? PM_PREM.prefix(P.ref(),VAR.NAZWALIS,);
   PM_PREM.first()
|! PM_PREM.prefix();
   PM_PREM.LT:='';
   PM_PREM.put()
!};
PM_PREM.cntx_pop();
~~


::======================================================================================================================
:: Wyzwalacze tabeli PM_DYSP.
::======================================================================================================================


\pm_dysp_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli PM_DYSP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pm_dysp_chk','pm_wspolne',0) & exec('pm_dysp_modb','pm_wspolne')


\pm_dysp_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli PM_DYSP.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_DYSP);
   {? exec('lic','#b_domain','POR')
   || exec('pm_dysp_etypyp','pm_wspolne',PM_DYSP,'add')
   ?}
?};
~~


\pm_dysp_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli PM_DYSP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pm_dysp_chk','pm_wspolne',1) & exec('pm_dysp_modb','pm_wspolne')


\pm_dysp_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli PM_DYSP.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_DYSP);
   _w1:=
      PM_DYSP.AKT<>bfld('AKT') | PM_DYSP.ZA<>bfld('ZA') | PM_DYSP.OSOBA<>bfld('OSOBA') |
      PM_DYSP.WYDZIAL<>bfld('WYDZIAL') | PM_DYSP.KK<>bfld('KK') | PM_DYSP.ST<>bfld('ST') | PM_DYSP.CP<>bfld('CP') |
      PM_DYSP.F_ZATR<>bfld('F_ZATR');
   _w2:=PM_DYSP.AKT<>bfld('AKT');
   {?  _w1 | _w2
::    Jeżeli choć jedno pole nadmiarowe zmieniło się, to uaktualnijmy tę informację w tabelach powiązanych.
   || PM_RODZ.cntx_psh();
      PM_RODZ.index('UNIQUE');
      PM_RODZ.prefix(PM_DYSP.ref());
      {? PM_RODZ.first()
      || {!
         |? PM_RODZ.put();
            PM_RODZ.next()
         !}
      ?};
      PM_RODZ.cntx_pop()
   ?};
::
   {? _w1
   || PM_NAG.cntx_psh();
      PM_NAG.index('UNIQUE');
      PM_NAG.prefix(PM_DYSP.ref());
      {? PM_NAG.first()
      || {!
         |? PM_NAG.put();
            PM_NAG.next()
         !}
      ?};
      PM_NAG.cntx_pop()
   ?};
::
   {? _w2 & exec('lic','#b_domain','POR')
   || exec('pm_dysp_etypyp','pm_wspolne',PM_DYSP,'put')
   ?}
?};
~~


\pm_dysp_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli PM_DYSP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',PM_RODZ,'UNIQUE',PM_DYSP.ref()) &
exec('del_ndx','#table',PM_DOMP,'UNIQUE',PM_DYSP.ref()) &
{? exec('lic','#b_domain','POR') || exec('pm_dysp_etypyp','pm_wspolne',PM_DYSP,'del') || 1 ?}


\pm_dysp_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli PM_DYSP.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_DYSP)
?};
~~


\pm_dysp_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli PM_DYSP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PM_DYSP.P<>null()
:: Pielęgnacja anomalii - pól nadmiarowych, przechowywanych ze względu na indeksy.
|| P.cntx_psh();
   P.prefix();
   PM_DYSP.P();
   exec('pm_anomalie','pm_wspolne',PM_DYSP,P);
   P.cntx_pop();
   1
?}


\pm_dysp_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PM_DYSP.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(PM_DYSP,
   $("_a.table(_b,"+$_put+",,'P')"),
   "_a.in_set(_b,'AKT',,'T','N')"
)


::======================================================================================================================
:: Wyzwalacze tabeli PM_DOMP.
::======================================================================================================================


\pm_domp_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli PM_DOMP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pm_domp_chk','pm_wspolne',0) & exec('pm_domp_modb','pm_wspolne')


\pm_domp_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli PM_DOMP.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_DOMP)
?};
~~


\pm_domp_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli PM_DOMP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pm_domp_chk','pm_wspolne',1) & exec('pm_domp_modb','pm_wspolne')


\pm_domp_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli PM_DOMP.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_DOMP)
?};
~~


\pm_domp_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli PM_DOMP.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_DOMP)
?};
~~


\pm_domp_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli PM_DOMP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PM_DOMP.P<>null()
:: Pielęgnacja anomalii - pól nadmiarowych, przechowywanych ze względu na indeksy.
|| P.cntx_psh();
   P.prefix();
   PM_DOMP.P();
   exec('pm_anomalie','pm_wspolne',PM_DOMP,P);
   P.cntx_pop();
   1
?}


\pm_domp_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PM_DOMP.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(PM_DOMP,
   $("_a.table(_b,"+$_put+",,'PM_DYSP','P')")
)


::======================================================================================================================
:: Wyzwalacze tabeli PM_RODZ.
::======================================================================================================================


\pm_rodz_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli PM_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pm_rodz_chk','pm_wspolne',0) & exec('pm_rodz_modb','pm_wspolne')


\pm_rodz_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli PM_RODZ.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_RODZ)
?};
~~


\pm_rodz_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli PM_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pm_rodz_chk','pm_wspolne',1) & exec('pm_rodz_modb','pm_wspolne')


\pm_rodz_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli PM_RODZ.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_RODZ)
?};
~~


\pm_rodz_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli PM_RODZ.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_RODZ)
?};
~~


\pm_rodz_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli pm_rodz.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PM_RODZ.PM_DYSP<>null()
:: Pielęgnacja anomalii - pól nadmiarowych, przechowywanych ze względu na indeksy.
|| PM_DYSP.cntx_psh();
   PM_DYSP.prefix();
   PM_RODZ.PM_DYSP();
   PM_RODZ.P:=PM_DYSP.P;
   PM_RODZ.AKT:=PM_DYSP.AKT;
   exec('pm_anomalie','pm_wspolne',PM_RODZ,PM_DYSP);
   PM_DYSP.cntx_pop();
   1
?}


\pm_rodz_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PM_RODZ.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(PM_RODZ,
   $("_a.table(_b,"+$_put+",,'PM_DYSP','R')")
)


::======================================================================================================================
:: Wyzwalacze tabeli PM_BUDZ.
::======================================================================================================================


\pm_budz_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli PM_BUDZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: W pm_budz_modb wykonywane są obliczenia, które są weryfikowane w pm_budz_chk. Dodatkowo: uzupełniane jest pole
:: PM_BUDZ.P, które (ze względu na wymogi Portalu) wchodzi w skład indeksu unikalnego. Dlatego najpierw "modb",
:: a dopiero potem "chk".
exec('pm_budz_modb','pm_wspolne') & exec('pm_budz_chk','pm_wspolne',0)


\pm_budz_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli PM_BUDZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wykon:=0;
PM_PREM.cntx_psh();
PM_PREM.index('PM_BUDZ');
PM_PREM.prefix(PM_BUDZ.ref());
{? PM_PREM.first()
|| {!
   |? _wykon+=PM_PREM.KW;
      PM_PREM.next()
   !}
?};
PM_PREM.cntx_pop();
PM_BUDZ.WYKON:=_wykon;
:: W pm_budz_modb wykonywane są obliczenia, które są weryfikowane w pm_budz_chk. Dodatkowo: uzupełniane jest pole
:: PM_BUDZ.P, które (ze względu na wymogi Portalu) wchodzi w skład indeksu unikalnego. Dlatego najpierw "modb",
:: a dopiero potem "chk".
exec('pm_budz_modb','pm_wspolne') & exec('pm_budz_chk','pm_wspolne',1)


\pm_budz_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PM_BUDZ.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(PM_BUDZ,
   $("_a.table(_b,"+$_put+",,'PM_DYSP','R','SYMBOL','OPIS','OD','LIMIT')"),
   $("{? _b.DO<>date(0,0,0) & _b.DO<_b.OD
      || __CHK.err_fld(_b,'DO',1,'"+'Data nie może być wcześniejsza niż %1.'@[$PM_BUDZ.OD]+"')
      || ''
      ?}
   "),
   "_a.in_set(_b,'LIMIT',,'T','N')",
   $("{? _b.LIMIT='T' & _b.PLAN<=0
      || _a.err_fld(_b,'PLAN',1,'"+'Dozwolone wartości nieujemne.'@+"')
      |? _b.LIMIT='T' & _b.PLAN<_b.WYKON
      || FUN.emsg('"+'Budżet premii uznaniowych nie może być przekroczony.'@+"');
         0
      || 1
      ?}
   ")
)


\pm_budz_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli PM_BUDZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PM_BUDZ.LIMIT<>'T'
|| PM_BUDZ.PLAN:=PM_BUDZ.POZOST:=0
|| PM_BUDZ.PLAN:=PM_BUDZ.PLAN$2;
   PM_BUDZ.POZOST:=PM_BUDZ.PLAN-PM_BUDZ.WYKON
?};
{? PM_BUDZ.PM_DYSP<>null()
:: Pielęgnacja anomalii - pól nadmiarowych, przechowywanych ze względu na indeksy.
|| PM_DYSP.cntx_psh();
   PM_DYSP.prefix();
   PM_BUDZ.PM_DYSP();
   PM_BUDZ.P:=PM_DYSP.P;
   exec('pm_anomalie','pm_wspolne',PM_BUDZ,PM_DYSP);
   PM_DYSP.cntx_pop();
   1
?}


::======================================================================================================================
:: Wyzwalacze tabeli PM_NAG.
::======================================================================================================================


\pm_nag_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli PM_NAG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pm_nag_chk','pm_wspolne',0) & exec('pm_nag_modb','pm_wspolne')


\pm_nag_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli PM_NAG.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_NAG)
?};
~~


\pm_nag_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli PM_NAG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pm_nag_chk','pm_wspolne',1) & exec('pm_nag_modb','pm_wspolne')


\pm_nag_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli PM_NAG.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_NAG)
?};
~~


\pm_nag_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli PM_NAG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PM_NAG.AKC='N' &
exec('del_ndx','#table',PM_PREM,'UNIQUE',PM_NAG.ref())


\pm_nag_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli PM_NAG.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',PM_NAG)
?};
~~


\pm_nag_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli PM_NAG.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PM_NAG.PM_BUDZ<>null()
:: Pielęgnacja anomalii - pól nadmiarowych, przechowywanych ze względu na indeksy.
|| _ret:=0;
   PM_BUDZ.cntx_psh();
   PM_BUDZ.prefix();
   PM_NAG.PM_BUDZ();
   {? PM_BUDZ.PM_DYSP<>null()
   || PM_DYSP.cntx_psh();
      PM_DYSP.prefix();
      PM_BUDZ.PM_DYSP();
      PM_NAG.PM_DYSP:=PM_DYSP.ref();
      PM_NAG.R:=PM_BUDZ.R;
      PM_NAG.AKT:=PM_DYSP.AKT;
      PM_NAG.P:=PM_DYSP.P;
      exec('pm_anomalie','pm_wspolne',PM_NAG,PM_DYSP);
      PM_DYSP.cntx_pop();
      _ret:=1
   ?};
   PM_BUDZ.cntx_pop();
   _ret
?}


\pm_nag_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PM_NAG.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(PM_NAG,
   $("_a.table(_b,"+$_put+",,'PM_BUDZ','AKC','BLOK','ROK','MSC')"),
   "_a.in_set(_b,'AKC',,'T','N')",
   "_a.in_set(_b,'BLOK',,'T','N')",
   $("{? _b.ROK<1900 | _b.ROK>2100
      || _a.err_fld(_b,'ROK',1,'"+'Dozwolone wartości z przedziału %1-%2.'@ ['1900','2100']+"')
      |? _b.MSC<1 | _b.MSC>12
      || _a.err_fld(_b,'MSC',1,'"+'Dozwolone wartości z przedziału %1-%2.'@ ['1','12']+"')
      || ''
      ?}
   ")
)

::======================================================================================================================
:: Wyzwalacze tabeli PM_PREM.
::======================================================================================================================


\pm_prem_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli PM_PREM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pm_prem_chk','pm_wspolne',0) & exec('pm_prem_modb','pm_wspolne')


\pm_prem_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli PM_PREM.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('pm_prem_moda','pm_wspolne',PM_PREM.PM_NAG)
?};
~~


\pm_prem_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli PM_PREM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('pm_prem_chk','pm_wspolne',1) & exec('pm_prem_modb','pm_wspolne')


\pm_prem_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli PM_PREM.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('pm_prem_moda','pm_wspolne',PM_PREM.PM_NAG)
?};
~~


\pm_prem_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli PM_PREM.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('pm_prem_moda','pm_wspolne',bfld('PM_NAG'))
?};
~~


\pm_prem_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli PM_PREM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PM_PREM.KW:=PM_PREM.KW$2;

{? PM_PREM.P<>null()
:: Pielęgnacja anomalii - pól nadmiarowych, przechowywanych ze względu na indeksy.
|| P.cntx_psh();
   PM_PREM.P();
   exec('pm_anomalie','pm_wspolne',PM_PREM,P);
   P.cntx_pop();
   1
?}


\pm_prem_moda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Po zmianach w rekordzie.
::       Formuła wywoływana z wyzwalaczy "Dołącz - po", "Popraw - po" i "Usuń - po" dla tabeli PM_PREM.
::   WE: _a [REFERENCE] - Wskazanie nagłówka zapisu.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nag:=_a;

exec('last_mod_set','#table',PM_PREM);
PM_NAG.cntx_psh();
PM_NAG.prefix();
{? PM_NAG.seek(_nag)
|| PM_BUDZ.cntx_psh();
   PM_BUDZ.prefix();
   PM_NAG.PM_BUDZ();
:: Wymuszenie aktualizacji sum.
   PM_BUDZ.put();
   PM_BUDZ.cntx_pop()
?};
PM_NAG.cntx_pop();
~~


\pm_prem_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PM_PREM.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(PM_PREM,
   $("_a.table(_b,"+$_put+",,'PM_NAG','P')"),
   $("{? _b.KW<0
      || _a.err_fld(_b,'KW',1,'"+'Wartość nie może być ujemna.'@+"')
      || ''
      ?}
   ")
)


::======================================================================================================================
:: Pozostałe formuły biblioteczne
::======================================================================================================================


\pm_anomalie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Formuła odpowiedzialna za pielęgnacje anomalii w tabelach: PM_DYSP, PM_RODZ, PM_DOMP, PM_NAG, PM_PREM.
::       Zadaniem formuły jest zebranie w jednym miejscu informacji o polach, które powinny być pielęgnowane.
::       Oznacza to, że wszystkie wymienione wyżej tabele mają w swoich schematach pola wymienione w formule. Dodatkowo,
::       jeżeli na potrzeby prezentacji trzeba będzie dodać jeszcze jakieś pole, to najprawdopodobniej należy to uczynić
::       we wszystkich 5 tabelach.
::       Formuła wywoływana z wyzwalaczy.
::       Poprawność parametrów NIE jest sprawdzana.
::   WE: _a [TABLE] - Uchwyt tabeli docelowej.
::       _b [TABLE] - Uchwyt tabeli źródłowej.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a.ZA:=_b.ZA;
_a.OSOBA:=_b.OSOBA;
_a.WYDZIAL:=_b.WYDZIAL;
_a.KK:=_b.KK;
_a.ST:=_b.ST;
_a.CP:=_b.CP;
_a.F_ZATR:=_b.F_ZATR;
~~


\pm_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Formuła zwraca tablicę nazwaną z informacjami o atrybucie wykorzystywanym przez mechanizm premii uznaniowych
::       (uznaniowych).
::   WE: [_a] [STRING] - Tekst komunikatu [domyślnie: ''].
::   WY: Tablica nazwana. Opis elementów:
::          SYMBOL - Ustalony symbol atrybutu.
::          NAZWA  - Nazwa atrybutu. Pole jest uzupełnione, jeżeli atrybut został zdefiniowany.
::          OK     - Znacznik poprawności parametryzacji:
::                   1 - Parametryzacja poprawna (atrybut zdefiniowany, rubryki przypisane).
::                   0 - Parametryzacja niepoprawna - praca z modułem nie jest możliwa.
::----------------------------------------------------------------------------------------------------------------------
_txt:={? var_pres('_a')=type_of('') || _a || '' ?};

_atr:=obj_new('SYMBOL','NAZWA','OK');
_atr.SYMBOL:=1004;
_atr.NAZWA:=__RUB.get_name('S',_atr.SYMBOL);
_atr.OK:=0;

{? _atr.NAZWA=''
|| FUN.emsg('Atrybut %1 nie został jeszcze zdefiniowany.'@ [$_atr.SYMBOL]+{? +_txt || '\n'+_txt || '' ?})

|? __RUB.sys_sql(_atr.SYMBOL)=''
|| FUN.emsg('Atrybut %1 - "%2" nie ma przypisanych rubryk.'@ [$_atr.SYMBOL,_atr.NAZWA]+{? +_txt || '\n'+_txt || '' ?})

|| _atr.OK:=1
?};

_atr


\pm_rodz_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Obsługa akcji "Wyświetl - przed" w oknach tabeli PM_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ws:=cur_win(1,1);
{? _ws='D' | _ws='W'
|| P.cntx_psh();
   PM_RODZ.P();
   exec('p_bw','pracownik');
   P.cntx_pop()
?}


\pm_nag_modify_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Formuła sprawdza czy w podanym okresie (rok/miesiąc) możliwe jest utworzenie / wycofanie nagłówka premii
::       uznaniowej.
::   WE: _a [NUMBER] - Rok.
::       _b [NUMBER] - Miesiąc.
::   WY: Formuła zwraca napis pusty, jeżeli wiersz może być zmodyfikowany lub komunikat o przyczynie braku możliwości
::       modyfikacji wiersza.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0)
|| return('Błąd wewnętrzny - brak parametru %1.'@ ['_a'])
|? _a<1900 | exec('max_rok','#datetime')<_a
|| return('Nieprawidłowa wartość parametru %1.'@ ['_a'])
|| _rok:=_a
?};
{? var_pres('_b')<>type_of(0)
|| return('Błąd wewnętrzny - brak parametru %1.'@ ['_b'])
|? _b<0 | 12<_b
|| return('Nieprawidłowa wartość parametru %1.'@ ['_b'])
|| _msc:=_b
?};

_firma:=exec('ref_firma','ustawienia');
O.cntx_psh();
O.index('LISTYZAM');
O.prefix(_firma,'T',_rok,_msc);
_lz:=O.first();
O.prefix(_firma,'N',_rok,_msc);
_lo:=O.first();
O.cntx_pop();
{? _lz>0 & _lo=0
|| 'W okresie %1 wszystkie listy płac zostały zamknięte.'@ [date(_rok,_msc,1)$8]
|| ''
?}


\pm_nag_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Dodaje rekord tabeli PM_NAG oraz rekordy tabeli premii PM_PREM dla domyślnych pracowników dysponenta.
::       Formuła bazuje na aktualnym kontekście tabeli PM_NAG.
::   WE: _a [INTEGER] - Czy dodawać rekordy premii dla domyślnych pracowników dysponenta?
::                      0 - Nie [domyślnie];
::                      1 - Tak
::   WY: 1 - Rekord(-y) zostały dodane.
::       0 - Operacja nie powiodła się.
::----------------------------------------------------------------------------------------------------------------------
_add_prem:=var_pres('_a')=type_of(0) & _a;

_ds:=do_state();
{? _ds=0
|| do()
|? _ds=2
|| return(0)
?};

{? exec('add','#table',PM_NAG) & _add_prem
|| P.cntx_psh();
   P.prefix();
   PM_DOMP.cntx_psh();
   PM_DOMP.index('UNIQUE');
   PM_DOMP.prefix(PM_NAG.PM_DYSP);
   {? PM_DOMP.first()
   || PM_PREM.cntx_psh();
      PM_PREM.prefix();
      {!
      |? PM_DOMP.P();
         PM_PREM.blank();
         exec('add','#table',PM_PREM);
         PM_DOMP.next()
      !};
      PM_PREM.cntx_pop()
   ?};
   PM_DOMP.cntx_pop();
   P.cntx_pop()
?};

{? _ds=0
|| end()
|| do_state()=1
?}


\pm_nag_exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Sprawdza czy rekord nagłówka już istnieje
::   WE: _a [REFERENCE] - wskazanie na dysponenta
::       _b [INTEGER]   - rok
::       _c [INTEGER]   - miesiąc
::       _d [REFERENCE] - wskazanie na rodzaj premii (rubrykę)
::       _e [REFERENCE] - wskazanie na nagłówek premii (dla dodawania - null)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_dysp_ref:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
     _rok:={? var_pres('_b')=type_of(0)    || _b || return(_result) ?};
     _msc:={? var_pres('_c')=type_of(0)    || _c || return(_result) ?};
     _rub:={? var_pres('_d')=type_of(null) || _d || return(_result) ?};
     _ref:={? var_pres('_e')=type_of(null) || _e || return(_result) ?};

PM_NAG.cntx_psh();
PM_NAG.index('UNIQUE');
PM_NAG.prefix(_dysp_ref,_rok,_msc,_rub);
_result:=PM_NAG.first() & {? _ref || PM_NAG.ref()<>_ref || 1 ?};
PM_NAG.cntx_pop();
_result


\pm_nag_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Obsługa akcji "Akceptuj/Wycofaj" tabeli PM_NAG.
::   WE:  _a  [INTEGER] - Tryb pracy:
::                         1 - Akceptuj.
::                         0 - Wycofaj.
::       [_b] [INTEGER] - Obsługa grupy rekordów (komunikaty poprzez KOMM):
::                         0 - Nie [domyślnie].
::                         1 - Tak.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_akc:={? var_pres('_a')=type_of(0) || _a || return(0) ?};
_komm:={? var_pres('_b')=type_of(0) || _b ?};

_txt:=exec('pm_nag_modify_b','pm_wspolne',PM_NAG.ROK,PM_NAG.MSC);
{? _txt<>''
|| {? _komm
   || KOMM.set_root(exec('record','#to_string',PM_NAG.P));
      KOMM.sect_beg(exec('record','#to_string',PM_NAG.R));
      KOMM.add(_txt);
      KOMM.sect_end();
      KOMM.sect_end()
   || FUN.info(_txt+'\n'+{? _akc || 'Akceptacja niemożliwa.'@ || 'Wycofanie niemożliwe.'@ ?})
   ?};
   return(0)
?};

_update:=$('{? PM_NAG.AKC<>\'%1\' || PM_NAG.AKC:=\'%1\'; PM_NAG.put() || 1 ?}' [{? _akc || 'T' || 'N' ?}]);
_webterm:=+app_info('web_sesid');

{? _akc
:: Akceptacja.
|| _suma:=0;
   _jest_zero:=0;

   PM_PREM.cntx_psh();
   PM_PREM.index('UNIQUE');
   PM_PREM.prefix(PM_NAG.ref());
   {? PM_PREM.first()
   || {!
      |? {? PM_PREM.KW=0
         || _jest_zero+=1;
            {? _komm
            || ~~
            ?}
         || _suma+=PM_PREM.KW
         ?};
         PM_PREM.next()
      !}
   ?};
   PM_PREM.cntx_pop();
   _txt:=
      {? _suma=0
      || 'Żadna kwota premii nie została wprowadzona.'@
      |? _jest_zero
      || 'Istnieją pracownicy, którym nie przypisano kwoty premii.'@
      || ''
      ?};

   {? _txt=''
   || _update()

   |? _webterm
   || PM_NAG.web_cntx_save(1);
      web_ask(
         $("{? _a=1 || PM_NAG.web_cntx_load(1); exec('set_env','pkw_por'); "+_update+"; web_top_refresh() ?}"),
         _txt+'\n'+'Kontynuować?'@,
         'Premie uznaniowe'@
      );
      0

   |? _komm
   || KOMM.set_root(exec('record','#to_string',PM_NAG.P));
      KOMM.sect_beg(exec('record','#to_string',PM_NAG.R));
      KOMM.add(_txt);
      KOMM.sect_end();
      KOMM.sect_end();
      0

   |? FUN.ask(_txt+'\n'+'Kontynuować?'@)
   || _update()
   ?}

|? ~_akc
:: Wycofanie.
|| {? PM_NAG.BLOK='N'
   || _update()
   || _txt:='Nagłówek jest zablokowany. Wycofanie akceptacji niemożliwe.'@;
      {? _komm
      || KOMM.set_root(exec('record','#to_string',PM_NAG.P));
         KOMM.sect_beg(exec('record','#to_string',PM_NAG.R));
         KOMM.add(_txt);
         KOMM.sect_end();
         KOMM.sect_end()
      || FUN.info(_txt)
      ?};
      0
   ?}
?}


\pm_prem_modify_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Formuła do wykorzystania przed akcjami modyfikującymi wiersz tabeli PM_PREM.
::   WE:
::   WY: Formuła zwraca napis pusty, jeżeli wiersz może być zmodyfikowany lub komunikat o przyczynie braku możliwości
::       modyfikacji wiersza.
::----------------------------------------------------------------------------------------------------------------------
_webterm:=+app_info('web_sesid');
{? PM_PREM.LT=''
|| ''

:: Znak listy nie jest pusty.
|? ~_webterm & ~VAR.JESTLIST
|| 'Premia uznaniowa została rozliczona. Wybierz odpowiednią (%1) listę płac.'@ [PM_PREM.LT]

:: Znak listy nie jest pusty i lista jest wybrana.
|? ~_webterm & (VAR.NAZWALIS<>PM_PREM.LT)
|| 'Lista płac %1 nie rozlicza premii uznaniowej. Wybierz odpowiednią (%2) listę płac.'@ [VAR.NAZWALIS,PM_PREM.LT]

:: Znak listy na premii jest zgodny z wybraną.
|? ~exec('o_writable','lista_plac',PM_PREM.LT,0)
|| 'Lista płac "%1" jest zamknięta.'@ [PM_PREM.LT]

|| ''
?}


\pm_nag_chk_blok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.28]
:: OPIS: Formuła sprawdza czy wszystkie nagłówki premii zostały zablokowane w wybranym miesiącu
::   WE: _a  [NUMBER] - Rok.
::       _b  [NUMBER] - Miesiąc.
::   WY: Formuła zwraca napis pusty, jeżeli nie wszystkie nagłówki zostały zablokowane
::       lub komunikat odpowiedni komunikat
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0)
|| return('Błąd wewnętrzny - brak parametru %1.'@ ['_a'])
|? _a<1900 | exec('max_rok','#datetime')<_a
|| return('Nieprawidłowa wartość parametru %1.'@ ['_a'])
|| _rok:=_a
?};
{? var_pres('_b')<>type_of(0)
|| return('Błąd wewnętrzny - brak parametru %1.'@ ['_b'])
|? _b<0 | 12<_b
|| return('Nieprawidłowa wartość parametru %1.'@ ['_b'])
|| _msc:=_b
?};

_result:='';

PM_NAG.cntx_psh();
PM_NAG.index('RMBLOK');
PM_NAG.prefix(_rok,_msc);
_size:=PM_NAG.size();
PM_NAG.prefix(_rok,_msc,'T',);
{? _size>0 & _size=PM_NAG.size()
|| _result:='W okresie %1 wszystkie nagłówki premii\n'
            'zostały zablokowane w celu naliczenia listy płac.'@
            [date(_rok,_msc,1)$8]
?};
PM_NAG.cntx_pop();

_result


\is_pm_dysp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Sprawdza czy przekazany w parametrze pracownik jest dysponentem premii.
::   WE: _a [REF] - ref do pracownika (rekordu tabeli P)
::   WY: ref do dysponenta premii (rekordu PM_DYSP) lub null
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
P.cntx_psh(); P.prefix();
_ref:={? var_pres('_a')=type_of(null) & ref_tab(_a)=P & P.seek(_a,,1) || _a || null() ?};
P.cntx_pop();
{? _ref<>null()
|| PM_DYSP.cntx_psh();
   PM_DYSP.index('DYSP');
   PM_DYSP.prefix(_ref);
   {? PM_DYSP.first()
   || _result:=PM_DYSP.ref()
   ?};
   PM_DYSP.cntx_pop()
?};
_result


\pm_dysp_etypyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła pomocnicza wykonywana po triggerze add po lub del przed dla PM_DYSP, przed dodaniem zapisu do tabeli
::       ETYPY_P - zaktualizowanie praw do wniosku premiowego osoby, która stała się dysponentem premii uznaniowych.
::   WE: _a [SYSLOG] - uchwyt do tabeli PM_DYSP
::       _b [STRING] - rodzaj operacji
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(SYSLOG) & ~(-_a.name(1))='PM_DYSP' & var_pres('_b')=type_of('') & +_b
|| _oper:=_b;
   _firma:=exec('ref_firma','ustawienia');
   TYPOBIEG.cntx_psh();
   TYPOBIEG.index('UNIK');
   TYPOBIEG.prefix('Obieg wniosków',);
   _typOb:={? TYPOBIEG.first() || TYPOBIEG.ref() || null() ?};
   TYPOBIEG.cntx_pop();
   ETYPY.cntx_psh();
   ETYPY.index('UNIK_WP');
   ETYPY.prefix(_typOb,'T','Premia','Premia',);
   _etypy:={? ETYPY.first() || ETYPY.ref() || null() ?};
   ETYPY.cntx_pop();
   {? _oper='add' | (_oper='put' & _a.AKT='T')
   || exec('add_etypy_p','obiegi2',_a.P().ref(),_etypy,_firma)
   |? _oper='del' | (_oper='put' & _a.AKT='N')
   || exec('etypyp_del_pm','pm_wspolne',_a.P().ref(),_etypy,_firma); 1
   || return()
   ?}
|| return()
?}


\etypyp_del_pm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Usuwa z tabeli ETYPY_P rekord powiązany z prawami do wniosku premiowego po usunięciu danego pracownika z listy
::       dysponentów premiowych.
::   WE: _a [REFERENCE] - P.ref()
::       _b [REFERENCE] - ETYPY.ref()
::       _c [REFERENCE] - ref firmy
::   WY: 1/0 - usunięto / nie usunięto znalezionego rekordu ETYPY_P
::----------------------------------------------------------------------------------------------------------------------
_prac:={? var_pres('_a')=type_of(null) & ref_name(_a)=P.name() || _a || null() ?};
_etypy:={? var_pres('_b')=type_of(null) & ref_name(_b)=ETYPY.name() || _b || null() ?};
_firma:={? var_pres('_c')=type_of(null) & ref_name(_c)=FIRMA.name() || _c || null() ?};
_ret:=0;
ETYPY_P.cntx_psh();
ETYPY_P.index('UNIK');
ETYPY_P.prefix(_firma,_etypy,_prac);
_ret:={? ETYPY_P.first() || ETYPY_P.del(,1) || 0 ?};
ETYPY_P.cntx_pop();
_ret

:Sign Version 2.0 jowisz:1048 2020/10/16 15:22:56 0bd1f8417fe38dd8031c495bd15ab0457dc43ea4ae5cd83e31770866d17bad4d62b021c1b13acdff19b4d85322829b6877a5055e8be842a31f8604df52bbd98b8e54562f71ec0f87c57085bbe5e578f8638a4960b4e5599826dfc4920fb29007e434eae2a83d9cb0fc01e5f1d19379cf4171b0ef2d4360828dbc4857b90a09fa
