:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: prc_planowanie.fml
:: Utworzony: 04.05.2017
:: Autor: TMR
::======================================================================================================================
:: Zawartość: Formuły do obsługi planowania - dziedzina PRC
::======================================================================================================================

\kod_zaleznosci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zwraca kod zależności służbowych wykorzystywanych w planowaniu i grafikach
::   WE:
::   WY: [STRING]
::----------------------------------------------------------------------------------------------------------------------
'PLANCZP'


\ctrl_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zwraca id kontrolki wykorzystywane w planowaniu czasu pracy
::   WE:
::   WY: [STRING]
::----------------------------------------------------------------------------------------------------------------------
_sSource:=exec('source4ses_get','prc_ws');
_id:='';
{? _sSource='P'
|| _id:='PRC_PLAN_CTRL'
|? _sSource='G'
|| _id:='PRC_GRAF_CTRL'
?};
_id


\isRef_A_OKR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.22]
:: OPIS: Funkcja sprawdza czy przekazany string jest poprawnym refem sqlowym dla tabeli A_OKR
::   WE: _a [STRING] - badany napis
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of('') || _a || return(0) ?};
5+_ref='x_okr'


\run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Uruchamia ładowanie kontrolki planowania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ctrl_id:=exec('ctrl_id','prc_dane');
_tab:=exec('tab','prc_actions');
web_ctrl_set_table(_ctrl_id,,'tabActions',&_tab);
_rok:=exec('rok_od_do','prc_dane');
web_ctrl_set_obj(_ctrl_id,,'oRok','od',$_rok.od,'do',$_rok.do);
web_ctrl_call(_ctrl_id,,'runScheduler');
~~


\wszystkie_dane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zasila danymi kontrolkę planowania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ctrl_id:=exec('ctrl_id','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('set_env','pkw_por');
exec('czytaj','#stalesys',,KST_PAR);

_rOsoba:=OPERATOR.USER().OSOBA;
_p_ref:=exec('get_p_web_cl','p_web','JA');

:: przesłanie danych do kontrolki
_tab:=exec('harmonogramy','mi18n');
web_ctrl_set_table(_ctrl_id,,'tab_mi18n',&_tab);
web_ctrl_call(_ctrl_id,,'init_mi18n');

_tab:=exec('role','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tab_role',&_tab);
web_ctrl_call(_ctrl_id,,'init_role');

web_ctrl_call(_ctrl_id,,'initScheduler');

_tab:=exec('user_params','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabUserParams',&_tab);

:: ponowne ustalenie pracowników podwładnych - wywołanie musi być po wywołaniu user_params
exec('prac_pod4ses','prc_dane');

_tab:=exec('tab','prc_actions');
web_ctrl_set_table(_ctrl_id,,'tabActions',&_tab);

_tab:=exec('aktualizacje','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabAktualizacje',&_tab);

_tab:=exec('kst','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabKST',&_tab);

_tab:=exec('systemy_czp','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabSystemyCzp',&_tab);

_tab:=exec('wykluczenia','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabWykluczenia',&_tab);

_tab:=exec('grupy','prc_dane',_p_ref);
web_ctrl_set_table(_ctrl_id,,'tabGrupy',&_tab);

_tab:=exec('grupy_podwladnych','prc_dane',_p_ref);
web_ctrl_set_table(_ctrl_id,,'tabPodwladniGrupy',&_tab);

_tab:=exec('prac','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabOperator',&_tab);

_tab:=exec('prac_pod','prc_dane',_p_ref);
web_ctrl_set_table(_ctrl_id,,'tabPodwladni',&_tab);

_tab:=exec('statusy_okresow','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabStatusyOkresow',&_tab);

_tab:=exec('zmiany','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabZmiany',&_tab);

_tab:=exec('przerwy','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabPrzerwy',&_tab);

_tab:=exec('dostosowanieKwalifikacji','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabDostosowanieKwalifikacji',&_tab);

_tab:=exec('okresy','prc_dane');
_okresy:=_tab.size();
web_ctrl_set_table(_ctrl_id,,'tabOkresy',&_tab);

{? _okresy
|| _tab:=exec('dni_wolne','prc_dane');
   web_ctrl_set_table(_ctrl_id,,'tabDniWolne',&_tab);

   {? _sSource='P' | _sSource='G'
   || _tab:=exec('graf_dni','prc_dane',,'P');
      web_ctrl_set_table(_ctrl_id,,'tabDanePlan',&_tab);

      {? exec('spr_par','plob',353,0)
      || _tab:=exec('lokalizacje','prc_dane');
         web_ctrl_set_table(_ctrl_id,,'tabLokalizacje',&_tab);

         _tab:=exec('plob','prc_dane');
         web_ctrl_set_table(_ctrl_id,,'tabPlob',&_tab);

         _splash:=exec('splash','prc_html');
         web_ctrl_set_obj(_ctrl_id,,'splash','html',_splash)
      ?}
   ?};

   {? _sSource='G'
   || _tab:=exec('graf_dni','prc_dane',,'G');
      web_ctrl_set_table(_ctrl_id,,'tabDaneGraf',&_tab);

      _tab:=exec('graf_dni','prc_dane',,'W');
      web_ctrl_set_table(_ctrl_id,,'tabDaneWyk',&_tab);

      _tab:=exec('czytniki','prc_dane');
      web_ctrl_set_table(_ctrl_id,,'tabCzytniki',&_tab);

      _tab:=exec('get_typy_nieob','prc_dane');
      web_ctrl_set_table(_ctrl_id,,'tabKodyNieobecnosci',&_tab)
   ?}
?};

web_ctrl_call(_ctrl_id,,'stopLongTask','Pobieranie danych...'@);
web_ctrl_call(_ctrl_id,,'startScheduler');
~~


\prac_pod4ses_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Wypełnia tabelę pracowników podwładnych wykorzystywaną w bieżącej sesji
::       Tabela ta w planowaniu i grafikch będzie odświeżana zawsze raz podczas pobierania danych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_rOsoba:=OPERATOR.USER().OSOBA;
_sLogin:=exec('get_user_login','pkw');
_rPracownik:=exec('get_p_web_cl','p_web','JA');
_rOkres:=exec('okres_get','prc_ws');
_sSource:=exec('source4ses_get','prc_ws');
_plob_h:=null();
_plob_l:=null();
{? exec('spr_par','plob',353,0)
|| _lokal:=exec('lokalizacja_get','prc_ws');
   {? +_lokal || _plob_l:=exec('FindAndGet','#table',PLOB_L,BIT.sqlint(_lokal),'plob_l',,null()) ?};
   _plob:=exec('plob_get','prc_ws');
   {? +_plob || _plob_h:=exec('FindAndGet','#table',PLOB_H,BIT.sqlint(_plob),'plob_h',,null()) ?}
?};

_dBeg:=date(0,0,0);
_dEnd:=date(0,0,0);

A_OKR.cntx_psh();
A_OKR.use('x_okr');
A_OKR.index('A_OKR');
A_OKR.prefix();
{? A_OKR.seek(_rOkres)
|| _rOkres:=A_OKR.ref();
   _dOd:=A_OKR.OD-31;
   _dDo:=A_OKR.DO+21;
   _dBeg:=A_OKR.OD;
   _dEnd:=A_OKR.DO
?};
A_OKR.cntx_pop();

:: sql pozostawiający tylko tych pracowników z tabeli :_a, którzy znajdują się również w tabeli :_b
_sSQL_join:=''+"
   select * from :_a join :_b using(:_a.P_SQL, :_b.P )
";

:: pobieramy pracowników podwładnych oraz pracowników oddelegowanych
_lPracAll:=exec('prac_all','prc_plan',_rOsoba,_rPracownik,_sLogin,_sSource,1,_dBeg,_dEnd);

:: pobieramy pracowników wg lokalizacji i obiektu kosztowego
{? _plob_h | _plob_l
|| _wydzial:=form(exec('FindAndGet','#table',PLOB_L,_plob_l,,"PLOB_L.SYMBOL",''));
   _lPrac4Ob:=exec('prac4ob','plob',_plob_h,_sSource,_dBeg,_dEnd,_plob_l);

   {? exec('spr_par','plob',360,0)
:: przy włączonym parametrze 360 obcinamy tylko do tych, do których mamy uprawnienia do danych
   || exec('__F_ZATR','object');
      F_ZATR.cntx_psh();
      F_ZATR.index('UNIQUE');
      _PRAC:=exec('dostepne_p','schemat','PRC','*');
      F_ZATR.cntx_pop();
      {? _lPrac4Ob.first()
      || {!
         |? {? _PRAC.find_tab(,'REF',,'=',_lPrac4Ob.P_SQL)
            || _lPrac4Ob.next()
            || _lPrac4Ob.del(,1)=2
            ?}
         !}
      ?}
   ?};

:: zostawiamy tylko niepowtarzające się rekordy pracownika
   _lPracAll.cntx_psh();
   {? _lPrac4Ob.first()
   || {!
      |? {? _lPracAll.find_tab(,'P_SQL',,'=',_lPrac4Ob.P_SQL)
         || _lPrac4Ob.del(,1)=2
         || _lPrac4Ob.next()
         ?}
      !}
   ?};
   _lPracAll.cntx_pop();

::  kolejność tabel w selekcie jest ważna - w pierwszej kolejności idą podwładni a później są dodawani pozostali
::  pracownicy z wybranego wydziału lub obiektu kosztowego
   _lPodwladni:=sql(''+
      "select * from :_a
         where (:_a.WYDZIAL=':_c' "+{? _plob_l || ")" || "or ':_c'='')" ?}+"
         union
       select * from :_b"
     ,_lPracAll,_lPrac4Ob,_wydzial)

|| _lPodwladni:=_lPracAll
?};

{? exec('prac_z_okresu_get','prc_ws')='T'
:: zostawiamy tylko tych pracowników, którzy są w wybranym okresie rozliczeniowym
|| A_OKRP.cntx_psh();
   A_OKRP.use('x_okrpi');
   A_OKRP.index('A_OKPP');
   _sSQL_okrp:=''+"
      select A_OKRP.P from A_OKRP where A_OKRP.OKR=:_a
   ";
   _lPracInOkr:=sql(_sSQL_okrp,_rOkres);
   A_OKRP.cntx_pop();
   _lPodOkr:=sql(_sSQL_join,_lPodwladni,_lPracInOkr)
||
   _lPodOkr:=_lPodwladni
?};

:: zostawiamy tylko pracowników zaznaczonych jako widocznych w planowaniu (grafikach)
P.cntx_psh();
P.index('OSOBA');
P.prefix();
{? _lPodOkr.first()
|| {!
   |? {? P.seek(_lPodOkr.P_SQL) & (exec('is_pw','prc_gpdwl',_rPracownik,P.ref())='T')
      || _lPodOkr.next()
      || _lPodOkr.del(,1)=2
      ?}
   !}
?};
P.cntx_pop();

:: dodajemy wyznaczonych pracowników do tabeli sesyjnej i ustawiamy wartość pola SETID na wartość źródła danych
_sKod:=exec('kod_zaleznosci','prc_dane');
exec('p_web_cx_set','p_web',_sKod,_lPodOkr,1,_sSource,0);
~~


\prac_pod4ses_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Czyści tabelę pracowników podwładnych wykorzystywaną w bieżącej sesji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P_WEB_CX.cntx_psh();
:: ustawiamy wartość pola SETID na wartość źródła danych i kasujemy całą zawartość dla bieżącej sesji
_sKod:=exec('kod_zaleznosci','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('p_web_cx_set_prefix','p_web',_sKod,'SETID',_sSource);

{? P_WEB_CX.first()
|| {! |? P_WEB_CX.del() !}
?};
P_WEB_CX.cntx_pop()


\prac_pod4ses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Ustalenie pracowników podwładnych w bieżącej sesji (wywoływane przy każdym odświeżeniu dancyh)
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('prac_pod4ses_del','prc_dane');
exec('prac_pod4ses_set','prc_dane')


\dni_wolne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Pobiera informacje o dniach wolnych (świętach) w danym roku
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"
   select
      DATA,
      ROK,
      'KAL_OPIS     ' as CO
   from
      KAL_OPIS
   where
      2=1
";
_empty_RS:=sql(_sql);

{? ~(_wzorzec:=exec('zn_wzor','kalendarz','standard'))
|| return(_empty_RS)
?};


_rOkres:=exec('okres_get','prc_ws');
_rok_od:=0;
_rok_do:=0;

A_OKR.cntx_psh();
A_OKR.prefix();
{? A_OKR.seek(_rOkres)
|| _rok_od:=A_OKR.OD~1;
   _rok_do:=A_OKR.DO~1
|| A_OKR.cntx_pop();
   return(_empty_RS)
?};
A_OKR.cntx_pop();

_sql:=''+"
   select
      DATA,
      ROK,
      'KAL_OPIS     ' as CO
   from
      KAL_OPIS
   where
      KAL_OPIS.WZORZEC=:_a
      and
      KAL_OPIS.NUMER>=8
      and
      KAL_OPIS.ROK>=:_b and KAL_OPIS.ROK<=:_c
";
_RS:=sql(_sql,_wzorzec,_rok_od,_rok_do);

:: dodajemy osobno informacje o wielkanocy dla każdego pobieranego roku
{? _rok_od<>0 & _rok_do<>0
|| R_NDHAN.cntx_psh();
   R_NDHAN.index('ROK');
{! _rok:=_rok_od.._rok_do
|! _RS.blank(1);
   _RS.ROK:=_rok;
   _RS.DATA:=$exec('wielkan','kalendarz',_rok);
   _RS.CO:='WIELKANOC';
   _RS.add();

:: oddawane dni za święta wypadające w soboty (do opracowania mechanizm wskazywania w Mericie)
:: obecnie wystarczy to tu dodać
::   _RS.blank(1);
::   _RS.ROK:=_rok;
::   _RS.DATA:='2018/03/30';
::   _RS.CO:='W5_2018/01/06';
::   _RS.add();

:: dodajemy niedziele handlowe dla pobieranych lat
   R_NDHAN.prefix(_rok);
   {? R_NDHAN.first()
   || {!
      |? _RS.blank(1);
         _RS.DATA:=$R_NDHAN.DATA;
         _RS.ROK:=_rok;
         _RS.CO:='NIEDZ_HAN';
         _RS.add();
         R_NDHAN.next()
      !}
   ?}
   !};
   R_NDHAN.cntx_pop()
|| return(_empty_RS)
?};

_RS


\rok_od_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.02]
:: OPIS: Zwraca obiekt z zakresem lat dla jakich będą pobierane dane
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_rok:=obj_new('od','do');
_rok.od:=0;
_rok.do:=0;
A_OKR.cntx_psh();
_par363:=exec('spr_par','plob',363,0);
{? _par363
|| A_OKR.index('A_OKR');
   A_OKR.prefix()
|| A_OKR.index('A_OKRZ');
   A_OKR.prefix('O')
?};
{? A_OKR.first()
|| _rok.od:=A_OKR.OD~1;
   _rok.do:=A_OKR.DO~1;
   {? A_OKR.last()
   || _rok.do:=A_OKR.DO~1
   ?}
?};
A_OKR.cntx_pop();
_rok


\okresy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zwraca tabelę z okresami
::   WE:
::   WY: tabela z danymi o okresach
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"
   select
   space(20) as NAZWA,
   space(16) as REF,
   space(5)  as WYMIAR,
   space(1)  as S,
   space(1)  as ER,
   space(1)  as S_PLAN,
   space(10) as OD,
   space(10) as DO,
   space(10) as CO,
   0 as ROK,
   0 as MSC,
   space(10) as DZ
   from
      syslog
   where
      2=1
";
_RS:=sql(_sql);

A_OKR.cntx_psh();
A_OKR.index('A_OKRZ');
A_OKR.clear();
_par363:=exec('spr_par','plob',363,0);
{? _par363 || A_OKR.prefix() || A_OKR.prefix('O') ?};
{? A_OKR.first()
|| _data_od:=A_OKR.OD;
   _data_do:=A_OKR.DO;
   {!
   |? {? A_OKR.OD<_data_od || _data_od:=A_OKR.OD ?};
      {? A_OKR.DO>_data_do || _data_do:=A_OKR.DO ?};
      _RS.blank(1);
      _RS.CO:='period';
      _RS.NAZWA:=A_OKR.NAZ().NAZ;
      _RS.REF:=$A_OKR.ref();
      _RS.OD:=$A_OKR.OD;
      _RS.DO:=$A_OKR.DO;
      _RS.WYMIAR:=$A_OKR.WYMIAR;
      _RS.S:=A_OKR.S;
      _RS.S_PLAN:=A_OKR.S_PLAN;
      _RS.ER:=A_OKR.ER;
      _RS.add();
      A_OKR.next()
   !};
::  dodanie statusow planowania dla poszczegolnych miesiecy w zakresie pobranych okresow rozliczeniowych
   _rok_od:=_data_od~1;_rok_do:=_data_do~1;
   _msc_od:=_data_od~2;_msc_do:=_data_do~2;
   _rok:=_rok_od; _msc:=_msc_od;
   A_OKRM.cntx_psh();
   A_OKRM.index('A_OKRMR');
   {!
   |? A_OKRM.prefix(_rok,_msc);
      {? A_OKRM.first()
      || _RS.blank(1);
         _RS.CO:='month';
         _RS.ROK:=_rok;
         _RS.MSC:=_msc;
         _RS.S:=A_OKRM.S;
         {? var_pres('S_PLAN',A_OKRM)>0
         || _RS.S_PLAN:=A_OKRM.S_PLAN
         ?};
::        sprawdzenie zamknięcia następnego miesiąca
         _dz:=A_OKRM.DZ;
         _r_nast:=_rok;
         _m_nast:={? _msc=12 || _r_nast+=1; 1 || _msc+1 ?};
         A_OKRM.prefix(_r_nast,_m_nast);
         {? A_OKRM.first() & A_OKRM.S='Z'
         || _dz:=date(_rok,_msc,0)
         ?};
         _RS.DZ:=$_dz;
         _RS.add()
      ?};
      _msc+=1;
      {? _msc>12 || _rok+=1; _msc:=1 ?};
      (_rok<_rok_do) | (_rok=_rok_do & _msc<=_msc_do)
   !};
   A_OKRM.cntx_pop()
?};
A_OKR.cntx_pop();
_RS


\zmiany
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Funkcja pobierająca zdefiniowane zmiany pracy
::   WE:
::   WY: tabela z danymi o zmianach
::----------------------------------------------------------------------------------------------------------------------
sql(''+"
   select
      REFERENCE REF,
      OPIS,
      GODZ_OD,
      GODZ_DO,
      MIN_OD,
      MAX_OD,
      WYJ_ND,
      CZAS,
      P_DOMYSL,
      P_STARTD,
      P_CZAS,
      SYMBOL,
      HEX
   from
      R_ZMIANY
")


\kst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS:
::   WE: _a [DATE] - data, na którą mają zostać pobrane dane z KST
::   WY: tabela z danymi o KST
::----------------------------------------------------------------------------------------------------------------------
_data:={? var_pres('_a')=type_of(date()) || _a || date() ?};
_sql:=''+"select space(10) as DATE, space(10) as KEY, space(10) as VAL from syslog where 2=1 order by KEY, DATE";
_RS:=sql(_sql);

_kst4key:="
   _key:=_a; _RS:=_b; _conv2str:=_c;
   KST_DEF.prefix('KST.%1'[_key],'KST.%1'[_key]);
   {? KST_DEF.first()
   || KST_WAR.prefix(REF.S_FIRMA,KST_DEF.ref());
      {? KST_WAR.first()
      || {!
         |? _RS.blank(1);
            _RS.KEY:=_key;
            _RS.DATE:=$KST_WAR.DATA;
            _val:=($KST_WAR.WARTOSC)();
            _RS.VAL:={? _conv2str
                     || {? var_pres('_val')=5
                        || _val$3
                        || $_val
                        ?}
                     || _val
                     ?};
            _RS.add();
            KST_WAR.next()
         !}
      ?}
   ?}
";

KST_DEF.cntx_psh();
KST_DEF.index('SYMBOL');
KST_WAR.cntx_psh();
KST_WAR.index('KST_DEF');
_kst4key('GRDN',_RS,1);
_kst4key('R_NLIM',_RS,0);
KST_WAR.cntx_pop();
KST_DEF.cntx_pop();
_RS


\aktualizacje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Pobiera informacje o aktualizacjach i ustawionych parametrach
::   WE:
::   WY: tabela z danymi o aktualizacjach i parametrach
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"select space(20) as NAME,space(1) as JEST from syslog where 2=1";
_RS:=sql(_sql);

:: informacja o aktualizacji dot. nieobecnosci ad-hoc
_RS.NAME:='N_AH';
{? var_pres('N_AH')>100
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o aktualizacji planowania na miesiace
_RS.NAME:='A_OKRP_M';
{? var_pres('A_OKRP_M')>100
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o aktualizacji dot. ruchomego czasu pracy
_RS.NAME:='A_RWN';
{? var_pres('A_RWN')>100
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o aktualizacji dot. wnioskow o udzielenie czasu wolnego
_RS.NAME:='R_ODN';
{? var_pres('R_ODN')>100
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o aktualizacji dot. oddelegowań na wydział
_RS.NAME:='ODDEL_WYDZ';
{? var_pres('WYDZ',P_ODDEL)>0
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o aktualizacji dot. raprtu błędów weryfikacji
_RS.NAME:='R_ERRCMS';
{? var_pres('R_ERRCMS')>0
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();


:: formuła na dodawanie parametrów

_add_par:="
   _RS:=_a; _par_nr:=_b; _fml:=_c; _default:=_d;
   _RS.NAME:='PAR_%1'[$_par_nr];
   _par:=exec('get_par','#parametr',_par_nr,2);
   _RS.JEST:={? type_of(_par)=0 | _fml(_par) || _default || _par ?};
   _RS.add()
";

::_add_par(_RS,361,"_a<>'T'",'N');
::_add_par(_RS,363,"_a<>'T'",'N');
:: informacja o pierwotnych zapisach z czytnikówe we/wy
::_add_par(_RS,364,"_a<>'T'",'N');

::  informacja o parametrze dot. możliwości/blokady automatycznej kwalifikacji danych o godz przepracowanych
::  na podst WE/WY - w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był włączony
_RS.NAME:='PAR_254';
_par:=exec('get_par','#parametr',254,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

::  informacja o parametrze dot. możliwości/blokady automatycznej kwalifikacji WE/WY do poprzedniej/nastepnej
::  doby roboczej - w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był włączony
_RS.NAME:='PAR_255';
_par:=exec('get_par','#parametr',255,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o parametrze dot. dopuszczalnego planowania pracy w niedziele
:: w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był włączony
_RS.NAME:='PAR_318';
_par:=exec('get_par','#parametr',318,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o parametrze dot. dopuszczalnego planowania pracy w święto
:: w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był włączony
_RS.NAME:='PAR_319';
_par:=exec('get_par','#parametr',319,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o parametrze dot. uwzględniania ustawy o pracy w handlu
:: w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był wyłączony
_RS.NAME:='PAR_320';
_par:=exec('get_par','#parametr',320,2);
{? type_of(_par)=0 | _par<>'T'
|| _RS.JEST:='N'
|| _RS.JEST:='T'
?};
_RS.add();

::  informacja o parametrze dot. uwzględnienia przerw niepłatnych
::  w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był wyłączony
_RS.NAME:='PAR_321';
_par:=exec('get_par','#parametr',321,2);
{? type_of(_par)=0 | _par='N'
|| _RS.JEST:='N'
|| _RS.JEST:='T'
?};
_RS.add();

:: informacja o parametrze dot. daty liczenia normy tygodniowej - domyślnie data początku okresu, alterantywnie
:: data zatrudnienia
:: w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był włączony
_RS.NAME:='PAR_323';
_par:=exec('get_par','#parametr',323,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o parametrze dot. 35-godzinny nieprzerwany odpoczynek tygodniowy w systemie czasu pracy pracownika
:: w okresie rozliczeniowym, jeśli rozpoczynają się on od niedzieli
:: w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był włączony
_RS.NAME:='PAR_324';
_par:=exec('get_par','#parametr',324,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o parametrze dot. 35-godzinny nieprzerwany odpoczynek tygodniowy w okresie rozliczeniowym, jeśli
:: rozpoczynają się on od niedzieli weryfikując sobotę z poprzedniego miesiąca
:: w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był wyłączony
_RS.NAME:='PAR_325';
_par:=exec('get_par','#parametr',325,2);
{? type_of(_par)=0 | _par<>'T'
|| _RS.JEST:='N'
|| _RS.JEST:='T'
?};
_RS.add();

:: informacja o parametrze dot. uwzględniania nieobecności przy weryfikacji odpoczynku dobowego
:: w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był włączony
_RS.NAME:='PAR_326';
_par:=exec('get_par','#parametr',326,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o parametrze dot. wstępnej weryfikacji czasu pracy po załadowaniu danych
:: w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był włączony
_RS.NAME:='PAR_327';
_par:=exec('get_par','#parametr',327,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o parametrze dot. dopuszczalnego planowania pracy z nachodzeniem na dobę niedzielną
:: w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był włączony
_RS.NAME:='PAR_328';
_par:=exec('get_par','#parametr',328,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o parametrze dot. dopuszczalnego planowania pracy z nachodzeniem na dobę świąteczną
:: w przypadku braku zdefiniowanego parametru działanie jak dotychczas - tak jakby był włączony
_RS.NAME:='PAR_329';
_par:=exec('get_par','#parametr',329,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o parametrze dot. możliwego niedoplanowania czasu pracy w okresie rozliczeniowym
_RS.NAME:='PAR_349';
_par:=exec('get_par','#parametr',349,2);
{? type_of(_par)=0 | _par<>'T'
|| _RS.JEST:='N'
|| _RS.JEST:='T'
?};
_RS.add();

:: informacja o parametrze dot. włączonej pracy w podziale na obiekty kosztowe
_RS.NAME:='PAR_353';
_par:=exec('get_par','#parametr',353,2);
{? type_of(_par)=0 | _par='T'
|| _RS.JEST:='T'
|| _RS.JEST:='N'
?};
_RS.add();

:: informacja o parametrze dot. wniosków w obiegu - warstwa grafików modyfikowana na podstawie wniosków w obiegu
_RS.NAME:='PAR_361';
_par:=exec('get_par','#parametr',361,2);
{? type_of(_par)=0 | _par<>'T'
|| _RS.JEST:='N'
|| _RS.JEST:='T'
?};
_RS.add();

:: informacja o parametrze dot. widoku zamkniętych okresów rozliczeniowych
_RS.NAME:='PAR_363';
_par:=exec('get_par','#parametr',363,2);
{? type_of(_par)=0 | _par<>'T'
|| _RS.JEST:='N'
|| _RS.JEST:='T'
?};
_RS.add();

:: informacja o pierwotnych zapisach z czytnikówe we/wy
_RS.NAME:='PAR_364';
_par:=exec('get_par','#parametr',364,2);
{? type_of(_par)=0 | _par<>'T'
|| _RS.JEST:='N'
|| _RS.JEST:='T'
?};
_RS.add();

_RS


\systemy_czp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Pobiera informacje o systemach czasu pracy
::   WE:
::   WY: tabela z danymi o systemach czasu parcy
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"
   select
   REFERENCE as REF,
   NAZ as NAZWA,
   ND as NORMA_D,
   NST as NORMA_T,
   OD as ODP_D,
   OT as ODP_T,
   DOM
   from
      A_SCP
";
sql(_sql)


\wykluczenia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Pobiera informacje o wykluczeniach dla form zatrudnienia
::   WE:
::   WY: tabela z danymi o wykluczeniach
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"
   select
   F_ZATR.KOD ,
   A_SCP
   from
      A_SCP_WY
      join F_ZATR
   order by 2
";
sql(_sql)


\grupy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Pobiera informacje o grupach pracownika
::   WE: _a [REFERENCE] - wskzaznie na pracownika
::   WY: tabela z grupami pracownika
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null) || _a || null() ?};

_sql:=''+"select space(16) as REF,space(40) as NAZWA from syslog where 2=1";
_RS:=sql(_sql);

P.cntx_psh();
P_GR.cntx_psh();
P.clear();
{? P.seek(_p_ref)
|| P_GR.index('PRACNAZ');
   P_GR.prefix(_p_ref);
   {? P_GR.first()
   || {!
      |? _RS.REF:=$P_GR.ref();
         _RS.NAZWA:=P_GR.NAZWA;
         _RS.add();
         P_GR.next()
      !}
   ?}
?};
P_GR.cntx_pop();
P.cntx_pop();
_RS


\grupy_podwladnych
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Pobiera informacje o przypisaniu pracowników podwładnych do grup
::   WE: _a [REFERENCE] - wskzaznie na pracownika
::       _b [STRING]    - ''/T/N, filtrowanie pracowników wszyscy/zatrudnieni/niezatrud.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null) || _a || null() ?};
 _zatr:={? var_pres('_b')=type_of('')   || _b || ''     ?};

_sql:=''+"select space(16) as P_SQL,space(16) as REF_GRUP from syslog where 2=1";
_RS:=sql(_sql);

P.cntx_psh();
P.clear();
{? P.seek(_p_ref)
|| _os_ref:=P.OSOBA
|| _p_ref:=null();
   _os_ref:=null()
?};

:: pobranie wszystkich otwartych okresów
_tab_okr:=exec('getOkrFromDate','grafik',,,,,,'O');
{? _tab_okr.first()
|| _data_o:=_tab_okr.OD
|| _data_o:=date()
?};

P_WEB_CX.cntx_psh();
_kod:=exec('kod_zaleznosci','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('p_web_cx_set_prefix','p_web',_kod,'SETID',_sSource);
{? P_WEB_CX.first()
||  {!
    |? {? P_WEB_CX.P().OSOBA<>_os_ref
       || _RS.P_SQL:=$P.ref();
          _RS.REF_GRUP:=exec('find_p_gr_p','prc_gpdwl',_p_ref,P.ref(),'REF');
::       ograniczenie pobierania zwolnionych pracownikow tylko do aktualnie otwartych okresow
         {? P.DZ=date(0,0,0) | P.DZ>=_data_o
         || {? _zatr<>''
            || {? _zatr=_RS.ZA || _RS.add() ?}
            || _RS.add()
            ?}
         ?}
      ?};
      P_WEB_CX.next()
   !}
?};
P_WEB_CX.cntx_pop();
P.cntx_pop();
_RS


\prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_rOsoba:=OPERATOR.USER().OSOBA;
_rOkres:=exec('okres_get','prc_ws');

_sql:=''+"
   select
      space(81) as STN,
      space(50) as SCP_NAME,
      space(31) as NAZWISKO,
      space(21) as IMIE,
      space(17) as WYDZIAL,
      space(11) as T,
      space(29) as IP,
      space(10) as DZA,
      space(10) as DZ,
      space(1)  as ZA,
      space(1)  as WID,
      space(1)  as GRAFIK,
      space(1)  as F_ZATR,
      space(16) as P_SQL,
      space(1)  as MOJ,
      space(31) as GRUPA,
      space(1)  as EDYCJA
   from
      syslog
   where
      2=1
";
_RS:=sql(_sql);

A_OKRP.cntx_psh();
A_OKRP.use('x_okrpi');
A_OKRP.index('A_OKPP');
F_ZATR.cntx_psh();
STN.cntx_psh();
UD_SKL.cntx_psh();
OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
P.index('OSOBA');
P.prefix(_rOsoba,REF.FIRMA);
{? P.first()
||  _p_ref:=exec('get_p_web_cl','p_web','JA');
    {!
    |? P.OSOBA();
       A_OKRP.prefix(_rOkres,P.ref());
      _data_od:={? A_OKRP.first() || A_OKRP.OD || date() ?};
      _scp_ref:=exec('find_scp','prc_plan',P.ref(),_data_od);
      _scp_name:='';
      {? _scp_ref
      || A_SCP.clear();
         {? A_SCP.seek(_scp_ref)
         || _scp_name:=A_SCP.NAZ
         ?}
      ?};
      _RS.SCP_NAME:=_scp_name;
      _RS.GRAFIK:=P.GRAFIK;
      _RS.WID:='T';
      _RS.DZA:=$P.DZA;
      _RS.DZ:=$P.DZ;
      _RS.NAZWISKO:=OSOBA.NAZWISKO;
      _RS.IMIE:=OSOBA.PIERWSZE;
      _RS.T:=P.T;
      _RS.IP:=$P.IP;
      _RS.WYDZIAL:=P.WYDZIAL().SYMBOL;
      _RS.STN:=P.ST().ST;
      _RS.ZA:=P.ZA;
      _RS.P_SQL:=$P.ref();
      _RS.F_ZATR:=P.F_ZATR().KOD;
      _RS.MOJ:='T';
      _RS.GRUPA:=exec('find_p_gr_p','prc_gpdwl',_p_ref,P.ref());
      _RS.EDYCJA:='T';
      _RS.add();
      P.next()
    !}
?};
OSOBA.cntx_pop();
P.cntx_pop();
UD_SKL.cntx_pop();
STN.cntx_pop();
F_ZATR.cntx_pop();
A_OKRP.cntx_pop();
_RS


\prac_pod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
  _p_ref:={? var_pres('_a')=type_of(null) || _a || null() ?};
_warstwa:={? var_pres('_b')=type_of(null) || _b || null() ?};

_sql:=''+"
   select
      space(81) as STN,
      space(50) as SCP_NAME,
      space(31) as NAZWISKO,
      space(21) as IMIE,
      space(17) as WYDZIAL,
      space(11) as T,
      space(29) as IP,
      space(10) as DZA,
      space(10) as DZ,
      space(1)  as ZA,
      space(1)  as WID,
      space(1)  as GRAFIK,
      space(1)  as F_ZATR,
      space(16) as P_SQL,
      space(1)  as MOJ,
      space(31) as GRUPA,
      space(1)  as EDYCJA
   from
      syslog
   where
      2=1
";
_RS:=sql(_sql);

P.cntx_psh();
OSOBA.cntx_psh();
P_WEB_CX.cntx_psh();
A_OKRP.cntx_psh();
A_OKRP.use('x_okrpi');
A_OKRP.index('A_OKPP');

_rOsoba:=OPERATOR.USER().OSOBA;
_rOkres:=exec('okres_get','prc_ws');

_kod:=exec('kod_zaleznosci','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('p_web_cx_set_prefix','p_web',_kod,'SETID',_sSource);
{? P_WEB_CX.first()
||  {!
    |? {? P_WEB_CX.P().OSOBA<>_rOsoba
       || P.OSOBA();
         _wid:=exec('is_pw','prc_gpdwl',_p_ref,P_WEB_CX.P);
::       dla pracowników oddelegowanych włącz widoczność
         {? P_WEB_CX.CZY_POD='O' || _wid:='T' ?};

         {? _wid='T'
         || _RS.DZA:=$P.DZA;
            _RS.DZ:=$P.DZ;
::       sprawdz czy pracownik jest w okresie rozliczeniowym
            A_OKRP.prefix(_rOkres,P.ref());
            _data_od:={? A_OKRP.first() || A_OKRP.OD || date(0,0,0) ?};
            _scp_ref:=exec('find_scp','prc_plan',P.ref(),_data_od);
            _scp_name:='';
            {? _scp_ref
            || A_SCP.clear();
               {? A_SCP.seek(_scp_ref)
               || _scp_name:=A_SCP.NAZ
               ?}
            ?};
            _RS.SCP_NAME:=_scp_name;
            _RS.GRAFIK:=P.GRAFIK;
            _RS.IP:=$P.IP;
            _RS.NAZWISKO:=OSOBA.NAZWISKO;
            _RS.IMIE:=OSOBA.PIERWSZE;
            _RS.T:=P.T;
            _RS.WYDZIAL:=P.WYDZIAL().SYMBOL;
            _RS.STN:=P.ST().ST;
            _RS.ZA:=P.ZA;
            _RS.P_SQL:=$P.ref();
            _RS.WID:=_wid;
            _RS.F_ZATR:=P.F_ZATR().KOD;
            _RS.MOJ:={? P_WEB_CX.CZY_POD='O' ||'N' || 'T' ?};
            _RS.GRUPA:=exec('find_p_gr_p','prc_gpdwl',_p_ref,P_WEB_CX.P);
            _RS.EDYCJA:=P_WEB_CX.EDYCJA;
            _RS.add()
         ?}
       ?};
       P_WEB_CX.next()
   !}
?};
A_OKRP.cntx_pop();
P_WEB_CX.cntx_pop();
OSOBA.cntx_pop();
P.cntx_pop();
_RS


\statusy_okresow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Dodanie informacji o statusach okresów rozliczeniowych do RS-a
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"
   select
      space(16) as P_REF,
      space(16) as OR_REF,
      space(10) as CO,
      0 as ROK,
      0 as MSC,
      space(1) as S_PLAN
   from
      syslog
   where
      2=1
";
_RS:=sql(_sql);

P.cntx_psh();
OSOBA.cntx_psh();
P_WEB_CX.cntx_psh();
A_OKRP_M.cntx_psh();
A_OKRP_M.index('A_OKRPM');
A_OKRP.cntx_psh();
A_OKRP.use('x_okrpi');
A_OKRP.index('A_OKPP');
A_OKRP.clear();

_rOkres:=exec('okres_get','prc_ws');
_kod:=exec('kod_zaleznosci','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('p_web_cx_set_prefix','p_web',_kod,'SETID',_sSource);

{? P_WEB_CX.first()
|| {!
   |? A_OKRP.prefix(_rOkres,P_WEB_CX.P);
      {? A_OKRP.first()
      || {!
         |? _RS.blank(1);
            _RS.CO:='period';
            _RS.P_REF:=$A_OKRP.P;
            _RS.OR_REF:=$A_OKRP.OKR;
            _RS.S_PLAN:={? A_OKRP.S_PLAN='Z' | A_OKRP.S_PLAN='X' || 'Z' || A_OKRP.S_PLAN ?};
            _RS.add();

::          dodanie statusow dla poszczegolnych miesiecy okresu rozliczeniowego pracownika
            A_OKRP_M.prefix(A_OKRP.ref());
            {? A_OKRP_M.first()
            || {!
               |? _RS.blank(1);
                  _RS.CO:='month';
                  _RS.P_REF:=$A_OKRP.P;
                  _RS.OR_REF:=$A_OKRP.OKR;
                  _RS.S_PLAN:={? A_OKRP_M.STATUS='Z' | A_OKRP_M.STATUS='X' || 'Z' || A_OKRP_M.STATUS ?};
                  _RS.ROK:=A_OKRP_M.ROK;
                  _RS.MSC:=A_OKRP_M.MSC;
                  _RS.add();
                  A_OKRP_M.next()
               !}
            ?};
            A_OKRP.next()
         !}
      ?};
      P_WEB_CX.next()
   !}
?};
A_OKRP.cntx_pop();
A_OKRP_M.cntx_pop();
P_WEB_CX.cntx_pop();
OSOBA.cntx_pop();
P.cntx_pop();
_RS


\statusy_nadmiarow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Procedura zwracajaca informacje o liczbie godzin możliwych do odbioru dla pracowników
::       podwladnych w wybranym okresie rozliczeniowym
::   WE: _a [OBJECT] - obiekt z danymi
::   WY:
::  OLD: \nadm_status/graf_kal.prc
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"
   select
      space(16) as P_REF,
      space(16) as OR_REF,
      space(10) as G
   from
      syslog
   where
      2=1
";
_RS:=sql(_sql);

_paczka:={? var_pres('_a')=type_of('') || _a || return(_RS) ?};
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_sOkres:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='OR_REF'
      || _sOkres:=_param[2]
      ?}
   ?}
!};

_okr_ref:=null();
A_OKR.cntx_psh();
A_OKR.prefix();
{? exec('isRef_A_OKR','prc_dane',_sOkres) &  A_OKR.seek(_sOkres)
|| _okr_ref:=A_OKR.ref();
   __HARM.ustaw_okres()
?};

P_WEB_CX.cntx_psh();
_kod:=exec('kod_zaleznosci','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('p_web_cx_set_prefix','p_web',_kod,'SETID',_sSource);
{? _okr_ref & P_WEB_CX.first()
|| {!
   |? _p_ref:=P_WEB_CX.P;
      {? var_pres('_nadm')>100 || obj_del(_nadm) ?};
      _nadm:=exec('nadmiar','grafik',_p_ref,_okr_ref);
      _godz:=time(0,0,0);
      {? _nadm.first()
      || {!
         |? _godz+=_nadm.G;
            _nadm.next()
         !};
         _RS.P_REF:=$_p_ref;
         _RS.OR_REF:=$_okr_ref;
         _RS.G:=_godz$3;
         _RS.add()
      ?};
      P_WEB_CX.next()
   !}
?};
P_WEB_CX.cntx_pop();
A_OKR.cntx_pop();
_RS


\nadmiary_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Procedura zwracajaca informacje o nadmiarach pracownika (mozliwych godzinach do odbioru)
::   WE: _a [OBJECT] - obiekt z danymi
::   WY:
::  OLD: \nadm_status/graf_kal.prc
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"
   select
      space(10) as DT,
      space(4)  as RN,
      space(25) as RT,
      space(1)  as WORK,
      space(1)  as TYP,
      space(10) as G,
      space(35) as KK
   from
      syslog
   where
      2=1
";
_RS:=sql(_sql);

_paczka:={? var_pres('_a')=type_of('') || _a || return(_RS) ?};
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_sPrac:='';
_sOkres:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='OR_REF'
      || _sOkres:=_param[2]
      ?}
   ?}
!};

_p_ref:=null();
_okr_ref:=null();

P.cntx_psh();
P.prefix();
{? P.seek(_sPrac)
|| _p_ref:=P.ref()
?};
A_OKR.cntx_psh();
A_OKR.prefix();
{? exec('isRef_A_OKR','prc_dane',_sOkres) & A_OKR.seek(_sOkres)
|| _okr_ref:=A_OKR.ref();
   __HARM.ustaw_okres()
?};

_tab:=exec('nadmiar','grafik',_p_ref,_okr_ref);
{? _tab.first()
|| {!
   |? _RS.DT:=$_tab.DT;
      _RS.RN:=$_tab.RN;
      _RS.RT:=_tab.RT;
      _RS.WORK:=$_tab.WORK;
      _RS.TYP:=_tab.TYP;
      _RS.G:=$_tab.G;
      _RS.KK:=_tab.KK;
      _RS.add();
      _tab.next()
   !}
?};
A_OKR.cntx_pop();
P.cntx_pop();
_RS


\oddel_wydz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Wyszukuje wydziały do oddelegowania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ud_sch:=null();
UD_TYP.cntx_psh();
UD_TYP.index('SYMBOL');
UD_TYP.prefix('PODZORG',);
{? UD_TYP.first()
|| UD_SCH.cntx_psh();
   UD_SCH.index('SYMBOL');
:: Sprawdzamy parametr 232 czy ma to być STRORG czy STR_STAN
   _par232:=PAR_SKID.get(232)='T';
   {? _par232
   || UD_SCH.prefix(UD_TYP.ref(),'STR_STAN',)
   || UD_SCH.prefix(UD_TYP.ref(),'STRORG',)
   ?};
   {? UD_SCH.first()
   || _ud_sch:=UD_SCH.ref()
   ?};
   UD_SCH.cntx_pop()
?};
UD_TYP.cntx_pop();

_sql:=''+"
   select distinct
      UD_SKL.REFERENCE as REF,
      UD_SKL.SYMBOL,
      UD_SKL.OPIS
   from
      UD_DEF
      join UD_SKL using(UD_DEF.UD_SKL, UD_SKL.REFERENCE)
   where
      UD_DEF.UD_SCH=:_a and
      UD_SKL.AKTYWNY='T'
   order by UD_SKL.SYMBOL
";
_RS:=sql(_sql,_ud_sch);

_obj:=obj_new('jest');
_obj.jest:="
   _ud_sch:=_a;
   _root:=_b;
   _ud_skl:=_c;

   _result:=0;
   UD_DEF.cntx_psh();
   UD_DEF.prefix(_ud_sch,_root);
   {? UD_DEF.first()
   || {!
      |? {? $UD_DEF.UD_SKL=_ud_skl
         || _result:=1
         || _result:=.jest(_ud_sch,UD_DEF.ref(),_ud_skl)
         ?};
         ~_result & UD_DEF.next()
      !}
   ?};
   UD_DEF.cntx_pop();
   _result
";

{? _RS.first()
|| UD_FIR.cntx_psh();
   UD_FIR.index('UD_SKL');
   UD_FIR.prefix(exec('ref_firma','ustawienia'));
   {? UD_FIR.first()
   || UD_DEF.cntx_psh();
      UD_DEF.index('PODTEC');
      UD_DEF.prefix(_ud_sch,UD_FIR.UD_SKL);
      {? UD_DEF.first()
      || _root:=UD_DEF.ref();
         _root_skl:=UD_DEF.UD_SKL;
         UD_DEF.cntx_psh();
         UD_DEF.index('SYMBOL');
         {!
         |? {? _RS.REF=$_root_skl | _obj.jest(_ud_sch,_root,_RS.REF)
            || _RS.next()
            || _RS.del(,1)=2
            ?}
         !};
         UD_DEF.cntx_pop()
      ?};
      UD_DEF.cntx_pop()
   ?};
   UD_FIR.cntx_pop()
?};
_RS


\oddel_kier
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Wyszukuje pracowników, którzy mają uprawnienia do planowania lub grafików
::   WE: [_a] - [STRING] - wskazanie na kierownika (osoba) który wywołuje procedurę
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_k_ref:={? var_pres('_a')=type_of('') || _a || '' ?};

_sql:=''+"
   select distinct
      P.REFERENCE as P_REF,
      OSOBA.REFERENCE as O_REF,
      OSOBA.NAZWISKO,
      OSOBA.PIERWSZE as IMIE,
      P.T,
      P.IP,
      UD_SKL.SYMBOL as WYDZIAL
   from
      OSOBA
      join P using (P.OSOBA, OSOBA.REFERENCE)
      join UD_SKL using (P.WYDZIAL, UD_SKL.REFERENCE)
   where
      2=1
   order by OSOBA.NAZWISKO
";
_RS:=sql(_sql,exec('ref_firma','ustawienia'),_k_ref);

_fml:="(USERS.AKT='T')&(USERS.OSOBA<>null())";

:: pobieramy userów z bieżącej firmy, którzy mają przypisaną czynność do planowania
_uid_act:='PRC_POR_RCZP';
_tab:=exec('getUsers4Action','#b__box',,_uid_act,_fml);

:: pobieramy userów z bieżącej firmy, którzy mają przypisaną czynność do grafików
_uid_act:='PRC_POR_RCGW';
exec('getUsers4Action','#b__box',_tab,_uid_act,_fml);

OSOBA.cntx_psh();
OSOBA.index('OSOBA');
OSOBA.prefix();
P.cntx_psh();
P.use('pracowni');
P.index('OSOBA');
UD_SKL.cntx_psh();
{? _tab.first()
|| {!
   |? {? OSOBA.seek(_tab.OSOBA)
      || P.prefix(OSOBA.ref());
         {? P.first()
         || {!
            |? {? P.ZA='T'
               || _RS.P_REF:=$P.ref();
                  _RS.O_REF:=$OSOBA.ref();
                  _RS.NAZWISKO:=OSOBA.NAZWISKO;
                  _RS.IMIE:=OSOBA.PIERWSZE;
                  _RS.T:=P.T;
                  _RS.IP:=P.IP;
                  _RS.WYDZIAL:=P.WYDZIAL().SYMBOL;
                  _RS.add()
               ?};
               P.next()
            !}
         ?}
      ?};
      _tab.next()
   !}
?};
UD_SKL.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();
_RS


\graf_dni
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Funkcja zwracająca dane o "kafelkach" dla wybranych warstw 'P'-plan, 'G'-grafik, 'W'-wykonanie
::   WE: [_a] [STRING] - paczka z parametrami
::       [_b] [STRING] - symbol pobieranej warstwy
::   WY:
::----------------------------------------------------------------------------------------------------------------------
 _paczka:={? var_pres('_a')=type_of('') || _a || '' ?};
_warstwa:={? var_pres('_b')=type_of('') || _b || '' ?};

:: parametry przekazywane w paczce
_4prac:='';
_korekty:='T';
_sDataOd:='';
_sDataDo:='';
_excel:='N';
_plob_l:='';


_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _4prac:=_param[2]
      |? _param[1]='KOREKTY'
      || _korekty:=_param[2]
      |? _param[1]='EXCEL'
      || _excel:=_param[2]
      |? _param[1]='DATA_OD'
      || _sDataOd:=_param[2]
      |? _param[1]='DATA_DO'
      || _sDataDo:=_param[2]
      |? _param[1]='WARSTWA'
      || _warstwa:=~-_param[2]
      ?}
   ?};
   {? var_pres('_param')>100 || obj_del(_param) ?}
!};

_login:=exec('get_user_login','pkw');
_p_ref:=exec('get_p_web_cl','p_web','JA');
_or_ref:=exec('okres_get','prc_ws');
_plob_h:=null();

{? exec('spr_par','plob',353,0)
|| _plob:=exec('plob_get','prc_ws');
   {? +_plob || _plob_h:=exec('FindAndGet','#table',PLOB_H,BIT.sqlint(_plob),'plob_h',,null()) ?}
?};

_data_od:=exec('str2date','#convert',_sDataOd);
_data_do:=exec('str2date','#convert',_sDataDo);

exec('__RUB','object');
exec('__KAL','object');

A_OKR.cntx_psh();
A_OKR.use('x_okr');
A_OKR.prefix();
{? A_OKR.seek(_or_ref)
|| _or_ref:=A_OKR.ref();
   _data_od:={? _warstwa='W' || A_OKR.OD || A_OKR.OD-31 ?};
   _data_do:={? _warstwa='W' || A_OKR.DO || A_OKR.DO+21 ?}
?};
A_OKR.cntx_pop();

A_OKRP.cntx_psh();
A_OKRP.use('x_okrpi');
A_OKRP.index('A_OKPP');
_sSQL_okrp:=''+"
   select A_OKRP.P from A_OKRP where A_OKRP.OKR=:_a
";
_lPracInOkr:=sql(_sSQL_okrp,_or_ref);
A_OKRP.cntx_pop();

_os_ref:=null();
_szef_ref:=null();
P.prefix();
{? P.seek(_p_ref)
|| _szef_ref:=P.ref();
   _os_ref:=P.OSOBA
?};

_kod:=exec('kod_zaleznosci','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('p_web_cx_set_prefix','p_web',_kod,'SETID',_sSource);
_sql:='select * from prefixed_table(P_WEB_CX)';
{? +_4prac
|| _sql+=" where P=':_a'"
?};
_P:=sql(_sql,_4prac);

_sql:=exec('sql_kal_buff','prc_dane',1);
_RS_in:=sql(_sql,_P,'',_or_ref,_warstwa,_data_od,_data_do);

{? exec('prac_z_okresu_get','prc_ws')='T'
|| _RS:=_RS_in
|| _sql:=exec('sql_kal_buff','prc_dane',0);
   _RS_out:=sql(_sql,_P,'',_or_ref,_warstwa,_data_od,_data_do,_RS_in);
   _RS:=sql('select * from :_a union all select * from :_b order by P, DATA',_RS_in,_RS_out)
?};

OSOBA.cntx_psh();
OSOBA.clear();
{? OSOBA.seek(_os_ref)
|| {? _or_ref<>null()
   || _param:=obj_new('data_od','data_do','warstwa','okr_ref','source','szef_ref','RS','P','korekty','excel','plob_h');
      _param.data_od:=_data_od;
      _param.data_do:=_data_do;
      _param.warstwa:=_warstwa;
      _param.okr_ref:=_or_ref;
      _param.source:=_sSource;
      _param.szef_ref:=_szef_ref;
      _param.RS:=_RS;
      _param.P:=_P;
      _param.korekty:=_korekty;
      _param.excel:=_excel;
      _param.plob_h:=_plob_h;
      exec('put_RS','prc_graf',_param)
   ?}
?};
OSOBA.cntx_pop();
_RS


\sql_kal_buff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.02]
::  MOD: MicKoc [22.26]
:: OPIS: Formuła zwraca stringa użytego w zapytaniu sqlowym pobierającym dane z KAL_BUFFa dla pracowników z okresu
::   WE: _a [NUMBER] - czy dla pracowników z okresu (1) czy dla pracowników nie należących do okresu (0)
::   WY: [STRING]
::----------------------------------------------------------------------------------------------------------------------
_inOkres:={? var_pres('_a')=type_of(0) || _a || 1 ?};

''+"
select
   KAL_BUFF.P,
   KAL_BUFF.DATA,
   KAL_BUFF.DATAW,
   CASE
      WHEN KAL_BUFF.GPW='P' THEN 'plan'
      WHEN KAL_BUFF.GPW='G' THEN 'grafik'
      WHEN KAL_BUFF.GPW='W' THEN 'wykonanie'
   END as PGW,
   KAL_BUFF.TYP as TYP_DNIA,
   KAL_BUFF.TYPWS,
   KAL_BUFF.RODZAJ as ROZL,
   KAL_BUFF.STATUS,
   KAL_BUFF.CZY_OKR,
   KAL_BUFF.P as P_REF,
   to_string(WY) as WY,
   WYL,
   WYM,
   KAL_BUFF.NH,
   KAL_BUFF.A_OKR as OR_REF,
   KAL_BUFF.A_SCP as SCP_REF,
   OPIS,
   space(40) as ID,
   space(20) as CZYTNIK,
   '          0' as ODB_CZAS,
   space(100) as ODB_DATA,
   space(10) as ODB_NADG,
   ' ' as ODB_ST,
   ' ' as ODB_PK,
   to_string(KAL_BUFF.GR) as KAL_NORM,
   KAL_BUFF.POCZATEK as CZAS_OD,
   KAL_BUFF.KONIEC as CZAS_DO,
   KAL_BUFF.CZAS,
   CASE
      WHEN NB='' THEN '0'
      ELSE NB
   END as N_KOD,
   'N' as N_CZ,
   0 as N_G,
   ' ' as N_PRACA,
   space(20) as N_MR,
   '  ' as N_TYP,
   ' ' as N_188,
   'N' as N_188_CZ,
   0 as N_188_G,
   '  ' as N_188TYP,
   space(20) as N_188_N,
   ' ' as N_AH,
   ' ' as N_WP,
   space(20) as N_NAZWA,
   space(8) as N_LT,
   KAL_BUFF.DOP_NADG,
   ' ' as MSC_STAT,
   ' ' as PLANNED,
   space(250) as R_ODN_G,
   ' ' as RCZP,
   ' ' as RCZP_DET,
   ' ' as RCZP_P,
   ' ' as RCZP_W,
   space(8) as RCZP_GOD,
   space(8) as RCZP_GDO,
   ' ' as DELEG,
   ' ' as SZKOL,
   'N' as ODDEL,
   space(16) as ODDELWYD,
   space(16) as ODDELTO,
   ' ' as ODDELOWN,
   ' ' as WEWY,
   0 as DPWN_G,
   KAL_BUFF.P_DOM,
   space(225) as POB,
   '          0' as NAD_CZAS,
   ' ' as NAD_RODZ,
   space(50) as NAD_POCZ,
   space(225) as WYK_PRZ,
   'N' as ZDALNA,
   ' ' as ZDALNAWD,
   space(10) as P_DATA,
   space(8) as P_START,
   space(8) as P_CZAS,
   space(16) as P_GRUPA,
   space(16) as ZMIANA
from
   KAL_BUFF join :_a using(KAL_BUFF.P, :_a.P)
 where "
 +
 {? _inOkres
 || "KAL_BUFF.A_OKR=:_c"
 || "KAL_BUFF.A_OKR<>:_c and KAL_BUFF.CZY_OKR='T'
    and KAL_BUFF.P not in (select P from :_g)
    "
 ?}+
   "and
      KAL_BUFF.GPW=':_d'
   and
      (KAL_BUFF.DATA>=to_date(:_e) and KAL_BUFF.DATA<=to_date(:_f))
order by
   KAL_BUFF.P, KAL_BUFF.DATA
"


\user_params
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Formuła zwraca tabelę z zapamiętanymi parametrami użytkownika
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(,
   'NAME','STRING[50]',,
   'VAL' ,'STRING[100]',
);

_sSource:=exec('source4ses_get','prc_ws');

:: zapamiętany okres rozliczeniowy - jeśli brak to ustaw na pierwszy otwarty okres rozliczeniowy
_rOkres:=exec('okres_get','prc_ws');
:: sprawdzamy czy zapamiętany okres jest otwarty
A_OKR.cntx_psh();
A_OKR.index('A_OKRZ');
A_OKR.prefix();
_par363:=exec('spr_par','plob',363,0);
{? (_par363 & ~A_OKR.seek(_rOkres)) | (~_par363 & A_OKR.seek(_rOkres) & A_OKR.S='Z')
|| _rOkres:=null()
?};
{? _rOkres=null()
|| A_OKR.prefix('O');
   {? A_OKR.first()
   || _rOkres:=A_OKR.ref();
      exec('okres_set','prc_ws',$_rOkres)
   ?}
?};
A_OKR.cntx_pop();
_tab.NAME:='okres_rozliczeniowy';
_tab.VAL:=$_rOkres;
_tab.add();

:: zapamiętany stan checkboxa "Pracownicy z okresu" - jeśli brak to ustaw domyślnie na 'T'
_val:=exec('prac_z_okresu_get','prc_ws');
{? _val<>'T' & _val<>'N'
|| _val:='T';
   exec('prac_z_okresu_set','prc_ws',_val)
?};
_tab.NAME:='prac_z_okresu';
_tab.VAL:=_val;
_tab.add();

:: zapamiętany stan checkboxa "Pracownicy z błędami"- jeśli brak to ustaw domyślnie na 'N'
_val:=exec('prac_z_bledami_get','prc_ws');
{? _val<>'T' & _val<>'N'
|| _val:='N';
   exec('prac_z_bledami_set','prc_ws',_val)
?};
_tab.NAME:='prac_z_bledami';
_tab.VAL:=_val;
_tab.add();

:: zapamiętany stan prezentacji godzin w kafelku - jeśli brak to ustaw domyślnie na 'oddo'
_val:=exec('prezentacja_godzin_get','prc_ws');
{? _val<>'oddo' & _val<>'godz'
|| _val:='oddo';
   exec('prezentacja_godzin_set','prc_ws',_val)
?};
_tab.NAME:='prezentacja_godzin';
_tab.VAL:=_val;
_tab.add();

:: zapamiętany stan checkboxa dot. prezentacji ruchomego czasu pracy - jeśli brak to ustaw domyślnie na 'T'
_val:=exec('prezentacja_rczp_get','prc_ws');
{? _val<>'T' & _val<>'N'
|| _val:='T';
   exec('prezentacja_rczp_set','prc_ws',_val)
?};
_tab.NAME:='prezentacja_rczp';
_tab.VAL:=_val;
_tab.add();

:: zapamiętany stan checkboxa dot. prezentacji symbolu dla zmian w pracy - jeśli brak to ustaw domyślnie na 'N'
_val:=exec('prezentacja_sz_get','prc_ws');
{? _val<>'T' & _val<>'N'
|| _val:='N';
   exec('prezentacja_sz_set','prc_ws',_val)
?};
_tab.NAME:='prezentacja_sz';
_tab.VAL:=_val;
_tab.add();

:: zapamiętany stan checkboxa dot. prezentacji koloru dla zmian w pracy - jeśli brak to ustaw domyślnie na 'N'
_val:=exec('prezentacja_kz_get','prc_ws');
{? _val<>'T' & _val<>'N'
|| _val:='N';
   exec('prezentacja_kz_set','prc_ws',_val)
?};
_tab.NAME:='prezentacja_kz';
_tab.VAL:=_val;
_tab.add();

:: zapamiętany stan checkboxa dot. prezentacji podziałów - jeśli brak to ustaw domyślnie na 'N'
_val:=exec('prezentacja_podzialy_get','prc_ws');
{? _val<>'T' & _val<>'N'
|| _val:='N';
   exec('prezentacja_podzialy_set','prc_ws',_val)
?};
_tab.NAME:='prezentacja_podzialy';
_tab.VAL:=_val;
_tab.add();

:: zapamiętany stan prezentacji godzin w kafelku - jeśli brak to ustaw domyślnie na 'oddo'
_val:=exec('prezentacja_normy_get','prc_ws');
{? _val<>'o' & _val<>'m'
|| _val:='o';
   exec('prezentacja_normy_set','prc_ws',_val)
?};
_tab.NAME:='prezentacja_normy';
_tab.VAL:=_val;
_tab.add();

:: zapamiętany stan prezentacji widoku zakładek (tydzień/miesiąc)
_val:=exec('prezentacja_widoku_get','prc_ws');
{? _val<>'tWeek' & _val<>'tMonth'
|| _val:='tWeek';
   exec('prezentacja_widoku_set','prc_ws',_val)
?};
_tab.NAME:='prezentacja_widoku';
_tab.VAL:=_val;
_tab.add();

:: zapamiętana lokalizacja
_val:=exec('lokalizacja_get','prc_ws');
{? _val=''
|| _val:='plob_l  00000000';
   exec('lokalizacja_set','prc_ws',_val)
?};
_tab.NAME:='lokalizacja';
_tab.VAL:=_val;
_tab.add();

:: zapamiętany kontekst pracy (plob - planowany obiekt)
_val:=exec('plob_get','prc_ws');
{? _val=''
|| _val:='plob_h  00000000';
   exec('plob_set','prc_ws',_val)
?};
_tab.NAME:='plob';
_tab.VAL:=_val;
_tab.add();

{? _sSource='G'
||
:: zapamiętany sposób rejestrowania nieobecności ad-hoc
   _val:=exec('grafiki_ah_get','prc_ws');
   {? _val<>'detailed' & _val<>'simple'
   || _val:='simple';
      exec('grafiki_ah_set','prc_ws',_val)
   ?};
   _tab.NAME:='grafiki_ah';
   _tab.VAL:=_val;
   _tab.add();

:: zapamiętany stan checkboxa "Plan" - jeśli brak to ustaw domyślnie na 'T'
   _val:=exec('warstwa_get','prc_ws','plan');
   {? _val<>'T' & _val<>'N'
   || _val:='T';
      exec('warstwa_set','prc_ws','plan',_val)
   ?};
   _tab.NAME:='warstwa_plan';
   _tab.VAL:=_val;
   _tab.add();

:: zapamiętany stan checkboxa "Grafik" - jeśli brak to ustaw domyślnie na 'T'
   _val:=exec('warstwa_get','prc_ws','grafik');
   {? _val<>'T' & _val<>'N'
   || _val:='T';
      exec('warstwa_set','prc_ws','grafik',_val)
   ?};
   _tab.NAME:='warstwa_grafik';
   _tab.VAL:=_val;
   _tab.add();

:: zapamiętany stan checkboxa "Wykonanie" - jeśli brak to ustaw domyślnie na 'T'
   _val:=exec('warstwa_get','prc_ws','wykonanie');
   {? _val<>'T' & _val<>'N'
   || _val:='T';
      exec('warstwa_set','prc_ws','wykonanie',_val)
   ?};
   _tab.NAME:='warstwa_wykonanie';
   _tab.VAL:=_val;
   _tab.add();

:: zapamiętany sposobu weryfikacji
   _val:=exec('grafiki_weryfikacja_get','prc_ws');
   _tab.NAME:='grafiki_weryfikacja';
   _tab.VAL:=_val;
   _tab.add()
?};

:: zapamiętany stan checkboxa dot. wyświetlania komunikatów typu MESSAGE - jeśli brak to ustaw domyślnie na 'T'
_val:=exec('komm_msg_get','prc_ws');
{? _val<>'T' & _val<>'N'
|| _val:='T';
   exec('komm_msg_set','prc_ws',_val)
?};
_tab.NAME:='komm_msg';
_tab.VAL:=_val;
_tab.add();

:: zapamiętana wartość parametru określającego sposób prezentacji zakresu dat w operacjach grupowych - jeśli brak to
:: domyślnie ustaw na 'okr' - okres
_val:=exec('zakres_dat_get','prc_ws');
{? _val<>'okr' & _val<>'msc'
|| _val:='okr';
   exec('komm_msg_set','prc_ws',_val)
?};
_tab.NAME:='zakres_dat';
_tab.VAL:=_val;
_tab.add();

:: zwracamy tabelę z parametrami użytkownika
_tab


\zapisz_paczke
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zapisuje paczkę ze zmodyfikowanymi dniami pracownika
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(0) ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';
_par353:=exec('spr_par','plob',353,0);
:: parametry przekazywane w paczce
_params:=exec('getParamsFromPaczka','prc_dane',_paczka);
_sPrac:=exec('getParamForName','prc_dane',_params,'P_REF');
_sWarstwa:=exec('getParamForName','prc_dane',_params,'WARSTWA');
_sOkres:=exec('getParamForName','prc_dane',_params,'OR_REF');

{! _ind:=1 .. obj_len(_params)
|! _val:=exec('getParamForName','prc_dane',_params,'PAR'+$_ind);
   {? +_val
   || _result:=exec('zapisz_parametr','prc_dane',_sPrac,_sWarstwa,_sOkres,_val,_par353);
      {? +_result
      || {? _webTerm
         || web_ctrl_call(_ctrl_id,,'addError','ERROR'+$_ind,_result)
         || FUN.info(_result)
         ?}
      ?}
   ?}
!};
_sPrac


\zapisz_parametr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zapisuje parametr paczki zawierający informacje o zmodyfikowanych dniach
::   WE: _a [STRING] - ref pracownika w postaci napisowej
::       _b [STRING] - warstwa ('p','g','w')
::       _c [STRING] - ref okresu rozliczeniowego w postaci napisowej
::       _d [STRING] - parametr z danymi
::       _e [NUMBER] - czy parametr 353 jest włączony (planowanie na obiekty)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:='Błędny typ parametru wejściowego funkcji.';
   _sPrac:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
_sWarstwa:={? var_pres('_b')=type_of('') || _b || return(_result) ?};
  _sOkres:={? var_pres('_c')=type_of('') || _c || return(_result) ?};
    _sPar:={? var_pres('_d')=type_of('') || _d || return(_result) ?};
  _par353:={? var_pres('_e')=type_of(0)  || _e || 0               ?};
_result:='';
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

_STR1:=obj_new(@.CLASS.STRING);
_STR2:=obj_new(@.CLASS.STRING);

OSOBA.cntx_psh();
P.cntx_psh();
P.clear();
R_ZMIANY.cntx_psh();
R_ZMIANY.index('R_ZMIANY');
R_ZMIANY.prefix();
_wyn:=1;
_last_rok:=0;
_firstDate:=date(9999,1,1);
_kal_rok:=null();
_przerwy:=exec('isEnabled','prc_przerwy');
{? P.seek(_sPrac)
|| _p_ref:=P.ref();
   _nazw_imie:=P.OSOBA().NAZWISKO + ' ' + P.OSOBA().PIERWSZE;
   {? _sWarstwa='p' | _sWarstwa='g' | _sWarstwa='w'
   || _STR1.split(_sPar,'@');
      {? _STR1.next()
      || {!
         |? _ev:=_STR1.get_word();
            _STR2.split(_ev,';');
            {? _STR2.next()
            ||
               _data:=exec('str2date','#convert',_STR2.get_word());
               _ile_dni:=#_STR2.get_word();
               _dataW:=_data + _ile_dni;
               _pocz:=exec('str2time','#convert',_STR2.get_word());
               _kon:=exec('str2time','#convert',_STR2.get_word());
               _typ:=_STR2.get_word();
               _typWS:=_STR2.get_word();
               _rozl:=_STR2.get_word();
               _opis:=_STR2.get_word();
               _pdom:=_STR2.get_word();
               _txt:=_STR2.get_word();
               _zmiana:={? +|_txt>=16 & R_ZMIANY.seek(_txt,) || R_ZMIANY.ref() || null() ?};
               {? _przerwy
               || _p_data:=_data+#_STR2.get_word();
                  _p_start:=exec('str2time','#convert',_STR2.get_word());
                  _p_czas:=exec('str2time','#convert',_STR2.get_word())
               || _p_data:=#0;
                  _p_start:=_p_czas:=*0
               ?};

               _one_day:=1440;
               {? _pocz>=_kon
               || _czas:=((*(_one_day*_ile_dni) - _pocz + _kon))
               || _czas:=_kon - _pocz
               ?};
               _czas-=_p_czas;

               {? _last_rok<>_data~1
               || _last_rok:=_data~1;
                  {? P.GRAFIK='T'
                  || _kal_rok:=exec('jest_grafik_rok','grafik',_p_ref,_data)
                  || _kal_rok:=exec('jest_rok','kaledit',P.KAL,_data)
                  ?}
               ?};
               {? _data<_firstDate || _firstDate:=_data ?};
               _rodz:=_text:=_komm:='';

               _mydo:=do_state()=0;
               {? _mydo || do() ?};

::             jeżeli wykonanie jest readonly to nie tworzymy KAL_BUFFa z GPW='W'
               {? _sWarstwa='w' & _opis*'readonly'
               || _wyn:=1
               || _wyn:=exec('mod_kal_day','prc_plan',
                     _p_ref,_data,_dataW,_typ,_rozl,_pocz,_kon,_czas,_sWarstwa,_kal_rok,_opis,_typWS,
                     _p_data,_p_start,_p_czas,_zmiana
                  )
               ?};

               {? _wyn=1
               || {? _par353
                  || {? _pdom='T'
                     || exec('delDraftAndPodz','plob',_p_ref,_sWarstwa,_data)
                     || exec('rewr_draft','plob_pb',_p_ref,_sWarstwa,_data)
                     ?}
                  ?};
                  _komm:='OK;'+$_p_ref+';'+exec('date4id','prc_graf',_data)+';'+_sWarstwa;
                  {? _webTerm
                  || web_ctrl_call(_ctrl_id,,'zapiszEventSuccess',_komm)
                  ?};
                  {? _sWarstwa='w'
                  || {? exec('isBlokada','prc_rozlicz',_p_ref,_data)=0
                     || {?  _opis*'readonly'
::                         jeżeli wykonanie jest readonly dokonujemy tylko przekwalifikowania
::                         (mogły się zmienić podziały kosztowe)
                        || exec('kwal','grafik',_p_ref,_data-1,_data+1)
                        || exec('save2wewy','prc_wewy',_p_ref,_data,time(0,0,0),_data,time(0,0,0),time(0,0,0),'',null);
                           exec('ponow_kwal_wewy','grafik',_p_ref,_data-1, _data+1, OPERATOR.USER().OSOBA)
                        ?}
                     || undo();
                        _rodz:='INFO_'+$(_data)+'_'+_nazw_imie;
                        _text:='W dniu: %1 %2 ma założoną blokadę kwalifikacji.'@[$_data,_nazw_imie]
                     ?}
                  ?}
               |? _wyn=0
               || _rodz:='INFO_'+$(_data)+'_'+_nazw_imie;
                  _text:='Nie udało się zapisać zmian w dniu %1 dla pracownika %2'@[$_data,_nazw_imie]

               |? _wyn=-1
               || _rodz:='INFO';
                  _text:='Okres rozliczeniowy jest zamknięty. '@+
                         'Nie dokonano zapisu dla zmodyfikowanych dni.'@
               |? _wyn=-2
               || _rodz:='INFO_'+$(_data)+'_'+_nazw_imie;
                  _text:='W dniu: %1 %2 ma rozliczoną nieobecność. '@[$_data,_nazw_imie]+
                         'Nie dokonano zapisu dla zmodyfikowanego dnia.'@
               |? _wyn=-3
               || _rodz:='INFO_'+gsub(_data$8,' ','');
                  _text:='Miesiąc %1 jest zamknięty. '@[_data$8]+
                         'Nie dokonano zapisu dla zmodyfikowanych dni.'@
               |? _wyn=-4
               || _rodz:='INFO_'+$(_data);
                  _text:='Wykonanie w dniu %1 zostało rozliczone. '@[$_data]+
                         'Nie dokonano zapisu dla zmodyfikowanych dni.'@
               ?};
               {? _mydo || end() ?};
               {? _text<>''
               || {? _webTerm
                  || web_ctrl_call(_ctrl_id,,'addError',_rodz,_text)
                  ?}
               ?}
            ?};
            _STR1.next()
         !};
         {? _firstDate<>date(9999,1,1) & (_sWarstwa='w')
         || _okr_ref:={? +_sOkres
                      || exec('FindAndGet','#table',A_OKR,_sOkres,,,null())
                      || exec('find_okr','grafik',_p_ref,_firstDate,'okr')
                      ?};
            A_OKRP.cntx_psh();
            A_OKRP.index('A_OKPP');
            A_OKRP.prefix(_okr_ref,_p_ref);
            {? A_OKRP.first()
            || exec('oblicz','okres',1)
            ?};
            A_OKRP.cntx_pop()
         ?}
      ?}
   || _result:='Brak prawidłowej maski'
   ?}
?};
R_ZMIANY.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();
_result


\zapisz_paczke_ver
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zapisuje paczkę z informacjami o błędach planowania po weryfikacji
::   WE:
::   WY: [STRING] - status przetwarzania
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(0) ?};
exec('__KAL','object');

_nStatus:=1;

:: parametry przekazywane w paczce
_sDel:='';
_sOkres:='';

:: tabela zapamiętująca pracowników do kasowania
_lTab:=tab_tmp(2,
   'SRC','STRING[1]','Źródło',
   'P_REF','STRING[16]','Wskazanie na pracownika'
);

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='DEL'
      || _sDel:=_param[2]
      |? _param[1]='OKR_REF'
      || _sOkres:=_param[2]
      |? 3+_param[1]='PAR'
      || _nStatus*=(exec('zapisz_parametr_ver','prc_dane',_sDel,_sOkres,_param[2],_lTab)='OK')
      ?}
   ?}
!};
_sStatus:={? _nStatus || 'OK' || 'ERROR' ?};
_sStatus


\zapisz_parametr_ver
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zapisuje parametr paczki weryfikacji zawierający informacje o błędach w dniach
::   WE: _a [STRING] - czy kasować dane
::       _b [STRING] - okres rozliczeniowy
::       _c [STRING] - parametr z danymi
::       _d [TABLE]  - tabela pomocnicza
::   WY:    [STRING] - wynik przetwarzania
::----------------------------------------------------------------------------------------------------------------------
_result:='Błędny typ parametru wejściowego funkcji.'@;
  _sDel:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
_sOkres:={? var_pres('_b')=type_of('') || _b || return(_result) ?};
  _sPar:={? var_pres('_c')=type_of('') || _c || return(_result) ?};
  _lTab:={? var_pres('_d')=type_of(P)  || _d || return(_result) ?};
_result:='';

_STR1:=obj_new(@.CLASS.STRING);
_STR2:=obj_new(@.CLASS.STRING);

A_OKR.cntx_psh();
A_OKR.use('x_okr');
A_OKR.prefix();
A_OKRP.cntx_psh();
A_OKRP.use('x_okrpi');
A_OKRP.index('A_OKRPR');
P.cntx_psh();
P.use('pracowni');
P.prefix();
_okr_ref:=null();
_ok:=0;
{? exec('isRef_A_OKR','prc_dane',_sOkres) & A_OKR.seek(_sOkres)
|| _okr_ref:=A_OKR.ref();
   _ok:=1;
   _STR1.split(_sPar,'@');
   {? _STR1.next()
   || {!
      |? _paczka:=_STR1.get_word();
         _STR2.split(_paczka,';');
         {? _STR2.next()
         || _source:=~-(_STR2.get_word());
            _typ:=~-(_STR2.get_word());
            _ref_nr:=_STR2.get_word();
            _p_ref:={? P.seek('pracowni'+_ref_nr) || P.ref() || null() ?};
            _data:=exec('str2date','#convert',_STR2.get_word());
            _komunikat:=_STR2.get_word();

::          kasujemy tylko jeśli jest to pierwsze wywołanie
            {? _sDel='T'
            || _lTab.SRC:=_source;
               _lTab.P_REF:=$_p_ref;
::             i jeżeli nie były jeszcze kasowane dane wybranego źródła dla pracownika
               {? ~_lTab.find_rec()
               || _lTab.add();
                  _ok*=exec('del_err','prc_errcms',_source,,$_p_ref,_sOkres)
               ?}
            ?};
::          typ X służy tylko do kasowania starych błędów
            {? _typ<>'X'
            || {? _typ='M' & _komunikat='error'
               || _komunikat:='W miesiącu '@+_data$8+' występują błędy nie pozwalające zakończyć planowania.'@
               ?};
::             dla błędu dotyczącego okresu ustalamy datę końca okresu dla pracownika
               {? _typ='O'
               || A_OKRP.prefix(_okr_ref,_p_ref);
                  {? A_OKRP.first()
                  || _data:=A_OKRP.DO
                  ?}
               ?};
               _ok*=exec('add_err','prc_errcms',_source,_typ,$_p_ref,_data,_komunikat,_sOkres)
            ?}
         ?};
         _ok & _STR1.next()
      !}
   ?}
?};
_result:={? _ok || 'OK' || 'ERROR' ?};
P.cntx_pop();
A_OKRP.cntx_pop();
A_OKR.cntx_pop();
_result


\zapisz_paczke_oddel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zapisuje paczkę ze zmodyfikowanymi dniami oddelegowania pracownika
::   WE:
::   WY: [STRING]  - ref sql-owy pracownika
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(0) ?};
exec('__KAL','object');

:: parametry przekazywane w paczce
_sPrac:='';
_sK1:='';
_sK2:='';
_sTryb:='';
_webTerm:=app_info('web_sesid')<>'';
_ctrl_id:=exec('ctrl_id','prc_dane');

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='K1_REF'
      || _sK1:=_param[2]
      |? _param[1]='K2_REF'
      || _sK2:=_param[2]
      |? _param[1]='TRYB'
      || _sTryb:=_param[2]
      |? 3+_param[1]='PAR'
      || _result:=exec('zapisz_parametr_oddel','prc_dane',_sPrac,_sK1,_sK2,_sTryb,_param[2]);
         {? +_result
         || {? _webTerm
            || web_ctrl_call(_ctrl_id,,'addError','ERROR'+$_ind,_result)
            || FUN.info(_result)
            ?}
         ?}
      ?}
   ?}
!};
_sPrac


\zapisz_parametr_oddel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zapisuje parametr paczki zawierający informacje o zmodyfikowanych dniach oddelegowania
::   WE: _a [STRING] - ref pracownika, którego oddelegowanie dotyczy
::       _b [STRING] - ref kierownika dokonującego oddelegowania
::       _c [STRING] - ref kierownika lub ref wydziału do którego pracownik zostaje oddelegowany
::       _d [STRING] - tryb: Z -zapis; U - usunięcie
::       _e [STRING] - parametr z danymi
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:='Błędny typ parametru wejściowego funkcji.';
_sPrac:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
  _sK1:={? var_pres('_b')=type_of('') || _b || return(_result) ?};
  _sK2:={? var_pres('_c')=type_of('') || _c || return(_result) ?};
_sTryb:={? var_pres('_d')=type_of('') || _d || return(_result) ?};
 _sPar:={? var_pres('_e')=type_of('') || _e || return(_result) ?};
_result:='';

_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

_STR1:=obj_new(@.CLASS.STRING);
_STR2:=obj_new(@.CLASS.STRING);

OSOBA.cntx_psh();
OSOBA.index('OSOBA');
OSOBA.prefix();
P.cntx_psh();
P.index('OSOBA');
P.prefix();
UD_SKL.cntx_psh();
UD_SKL.index('SYMBOL');
UD_SKL.prefix();

_p_ref:=_k1_ref:=_k2_ref:=null();
{? P.seek(_sK1)
|| _k1_ref:=P.ref()
?};
_na_wydz:=(8+_sK2)*'ud_skl';

{? _na_wydz
||
:: oddelegowanie na wydział
   {? UD_SKL.seek(_sK2)
   || _k2_ref:=UD_SKL.ref()
   ?}
||
:: oddelegowanie do kierownika
   {? P.seek(_sK2)
   || _k2_ref:=P.ref()
   ?}
?};


{? P.seek(_sPrac) & _k1_ref<>null() & ({? _sTryb='Z' || _k2_ref<>null() || 1 ?})
|| _kodOdde:=exec('getKod4Plan','prc_oddel');
   _p_ref:=P.ref();
   _nazw_imie:=P.OSOBA().NAZWISKO + ' ' + P.OSOBA().PIERWSZE;

   {? _sTryb='Z' | _sTryb='U'
   || _STR1.split(_sPar,'@');
      {? _STR1.next()
      || {!
         |? _ev:=_STR1.get_word();
            _STR2.split(_ev,';');
            {? _STR2.next()
            || _data:=exec('str2date','#convert',_STR2.get_word());
               _komm:=_text:='';
               _wyn:=0;
               {? _sTryb='Z'
               || _wyn:=exec('add','prc_oddel',_kodOdde,_k1_ref,_k2_ref,_p_ref,_data)
               |? _sTryb='U'
               || _wyn:=exec('del','prc_oddel',_kodOdde,_k1_ref,_p_ref,_data)
               ?};
               _func:='addMessage';
               {? _wyn=1
               || _komm:='OK;'+ $_p_ref + ';' + exec('date4id','prc_graf',_data) + ';' + _sTryb;
                  {? _na_wydz
                  || _komm+=';'+_sK2
                  ?};
                  {? _webTerm
                  || web_ctrl_call(_ctrl_id,,'zapiszEventOddelSuccess',_komm)
::                  || FUN.info(_komm)
                  ?}
               |? _wyn<=0
               || _func:='addError';
                  _rodz:='INFO_'+$(_data)+'_'+_nazw_imie;
                  _text:='Nie udało się %1 oddelegowania w dniu: %2 dla pracownika: %3'@
                         [{? _sTryb='Z' || 'dodać' |? _sTryb='U' || 'usunąć' || '' ?},$(_data),_nazw_imie];

                  {? _wyn=-1
                  || {? _sTryb='Z'
                     || _rodz:='INFO';
                        _text:='Nie można oddelegować do samego siebie.'@
                     |? _sTryb='U'
                     || _text:='Nie można usunąć oddelegowania utworzonego przez innego użytkownika.'@
                     ?}
                  ?}
               |? _wyn=2
               || _rodz:='INFO_'+$(_data)+'_'+_nazw_imie;
                  _text:='W dniu: %1 %2 ma już wprowadzone oddelegowanie.'@[$(_data),_nazw_imie]
               ?};
               {? _text<>''
               || {? _webTerm
                  || web_ctrl_call(_ctrl_id,,_func,_rodz,_text)
::                  || FUN.info(_text)
                  ?}
               ?}
            ?};
            _STR1.next()
         !}
      ?}
   || _result:='Błędny tryb wywołania procedury'@
   ?}
?};
UD_SKL.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();
_result


\zapisz_paczke_ah
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zapisuje paczkę z nieobecnościami ad-hoc
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(0) ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';
_kto_ref:=exec('get_p_web_cl','p_web','JA');

:: parametry przekazywane w paczce
_sPrac:='';
_sTryb:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='TRYB'
      || _sTryb:=_param[2]
      |? 3+_param[1]='PAR'
      || _result:=exec('zapisz_parametr_ah','prc_dane',_kto_ref,_sPrac,_sTryb,_param[2]);
         {? +_result
         || {? _webTerm
            || web_ctrl_call(_ctrl_id,,'addError','ERROR'+$_ind,_result)
            || FUN.info(_result)
            ?}
         ?}
      ?}
   ?}
!};
_sPrac


\zapisz_parametr_ah
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zapisuje parametr paczki zawierający informacje o nieobecności ad-hoc
::   WE: _a [STRING] - ref pracownika w postaci napisowej
::       _b [STRING] - tryb pracy
::       _c [STRING] - parametr z danymi
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:='Błędny typ parametru wejściowego funkcji.';
 _kto_ref:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
   _sPrac:={? var_pres('_b')=type_of('')     || _b || return(_result) ?};
   _sTryb:={? var_pres('_c')=type_of('')     || _c || return(_result) ?};
    _sPar:={? var_pres('_d')=type_of('')     || _d || return(_result) ?};
_result:='';

_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

_STR1:=obj_new(@.CLASS.STRING);
_STR2:=obj_new(@.CLASS.STRING);

OSOBA.cntx_psh();
P.cntx_psh();
P.clear();
_wyn:=1;
_msc:=0;

{? P.seek(_sPrac)
|| _p_ref:=P.ref();
   _nazw_imie:=P.OSOBA().NAZWISKO + ' ' + P.OSOBA().PIERWSZE;
   {? _sTryb='add' | _sTryb='edit' | _sTryb='del'
   || _STR1.split(_sPar,'@');
      {? _STR1.next()
      || {!
         |? _ev:=_STR1.get_word();
            _STR2.split(_ev,';');
            {? _STR2.next()
            || _err:=0;
               _err_txt:='';
               _err_nid:=0;
               _err_ah:=0;
               _data:=exec('str2date','#convert',_STR2.get_word());
               _typ:=#_STR2.get_word();
::              sprawdzenie czy miesiac jest otwarty do rozliczenia
               {? _msc<>_data~2
               || _msc_satus:=exec('get_msc_status','grafik',_data);
                  _msc:=_data~2
               ?};
               {? _msc_satus='O'
               || {? _sTryb='add' & exec('nieobecnosc','grafik',_p_ref,_data)
                  || _err:=1;
                     _err_nid:=1
                  || _wyn:=0;
                     {? _sTryb='add'
                     || {? exec('nieo_ah_find','grafik',_p_ref,_data)
                        || _err:=1;
                           _err_nid:=1;
                           _err_ah:=1
                        || _wyn:=exec('nieo_ah_add','grafik',_kto_ref,_p_ref,_data,_typ)
                        ?}
                     |? _sTryb='edit'
                     || {? ~exec('nieo_ah_find','grafik',_p_ref,_data)
                        || _err:=1;
                           _err_nid:=0;
                           _err_ah:=1
                        || _wyn:=exec('nieo_ah_add','grafik',_kto_ref,_p_ref,_data,_typ)
                        ?}
                     |? _sTryb='del'
                     || {? ~exec('nieo_ah_find','grafik',_p_ref,_data)
                        || _err:=1;
                           _err_nid:=0;
                           _err_ah:=1
                        || _wyn:=exec('nieo_ah_del','grafik',_p_ref,_data)
                        ?}
                     ?};
                     {? ~_err
                     || {? _wyn
                        || _komm:='OK;' + $_p_ref + ';' + exec('date4id','prc_graf',_data);
                           {? _sTryb='del'
                           || _n_kod:='0'; _n_typ:=''; _n_nazwa:=''; _n_wp:='';
                              KAL_BUFF.cntx_psh();
                              KAL_BUFF.index('PRACDATA');
                              KAL_BUFF.prefix(_p_ref,_data);
                              {? KAL_BUFF.first()
                              || _dalej:=1;
                                 {!
                                 |? {? +form(KAL_BUFF.NH)
                                    || _n_kod:=KAL_BUFF.NB;
                                       _n_typ:=exec('nieo_typ','grafik',#KAL_BUFF.NB);
                                       _n_nazwa:=exec('nieo_nazwa','grafik',#KAL_BUFF.NB);
                                       _dalej:=0
                                    ?};
                                    _dalej & KAL_BUFF.next()
                                 !}
                              ?};
                              KAL_BUFF.cntx_pop();
::                             wyszukanie pozycji planow urlopowych lub wnioskow urlpowych
                              {? _n_kod<>'0'
                              || {? var_pres('_tabWnPl')>100 || obj_del(_tabWnPl) ?};
                                 _tabWnPl:=exec('urlWnPl_find','grafik',_p_ref,_data,_data);
                                 {? _tabWnPl.find_key(_data)
                                 || _n_kod:=$_tabWnPl.KOD;
                                    _n_typ:=exec('nieo_typ','grafik',_tabWnPl.KOD);
                                    _n_nazwa:=exec('nieo_nazwa','grafik',_tabWnPl.KOD);
                                    _n_wp:=_tabWnPl.N_WP
                                 ?}
                              ?};
                              _komm+=';'+_n_kod+';'+_n_typ+';'+_n_nazwa+';'+_n_wp
                           ?};
                           {? _webTerm
                           || web_ctrl_call(_ctrl_id,,'zapiszEventAHSuccess',_komm,_sTryb,$_typ)
                           ?}
                        ?}
                     ?}
                  ?}
               || _err:=2
               ?};
               _text:='';
               _rodz:='INFO_'+$(_data)+'_'+_nazw_imie;
               _func:='addMessage';
               {? _err=1
               || _plec:={? P.OSOBA().PLEC='K' || ' pani ' || ' pan ' ?};
                  _end_str:={? _err_ah || ' ad-hoc.' || '.' ?};
                  {? _err_nid
                  || _text:='W dniu %1 %2 %3 ma już zarejestrowaną nieobecność%4'@[$_data,_plec,_nazw_imie,_end_str]
                  || _text:='W dniu %1 %2 %3 nie ma zarejestrowanej nieobecności%4'@[$_data,_plec,_nazw_imie,_end_str]
                  ?}
               |? _err=2
               || _msc_rok:=(_data$8);
                  _rodz:='INFO_'+_msc_rok;
                  _func:='addError';
                  _tryb:={? _sTryb='add'
                         || 'dodać'
                         |? _sTryb='edit'
                         || 'modyfikować'
                         |? _sTryb='del'
                         || 'usunąć'
                         || ''
                         ?};
                  _text:='Nie można %1 nieobecności ad-hoc w miesiącu: %2 - miesiąc jest zamknięty'@[_tryb,_msc_rok]
               ?};
               {? _webTerm & +_text
               || web_ctrl_call(_ctrl_id,,_func,_rodz,_text)
               ?}
            ?};
            _STR1.next()
         !}
      ?}
   ?}
?};
P.cntx_pop();
OSOBA.cntx_pop();
_result


\zapisz_paczke_podzialy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Zapisuje paczkę z podziałami
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(0) ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_params:=exec('getParamsFromPaczka','prc_dane',_paczka);
_sPrac:=exec('getParamForName','prc_dane',_params,'P_REF');
_sWarstwa:=exec('getParamForName','prc_dane',_params,'WARSTWA');

{! _ind:=1 .. obj_len(_params)
|! _val:=exec('getParamForName','prc_dane',_params,'PAR'+$_ind);
   {? +_val
   || _result:=exec('zapisz_parametr_podzialy','prc_dane',_sPrac,_sWarstwa,_val);
      {? +_result
      || {? _webTerm
         || web_ctrl_call(_ctrl_id,,'addError','ERROR'+$_ind,_result)
         || FUN.info(_result)
         ?}
      ?}
   ?}
!};
_sPrac


\zapisz_parametr_podzialy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Zapisuje parametr paczki zawierający informacje o podziałach
::   WE: _a [STRING] - ref pracownika w postaci napisowej
::       _b [STRING] - warstwa ('p','g','w')
::       _c [STRING] - parametr z danymi
::   WY: ''/komunikat błędu
::----------------------------------------------------------------------------------------------------------------------
_result:='Błędny typ parametru wejściowego funkcji.';
   _sPrac:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
_sWarstwa:={? var_pres('_b')=type_of('') || _b || return(_result) ?};
    _sPar:={? var_pres('_c')=type_of('') || _c || return(_result) ?};
_result:='';

_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

_STR1:=obj_new(@.CLASS.STRING);
_STR2:=obj_new(@.CLASS.STRING);

OSOBA.cntx_psh();
P.cntx_psh();
P.index('OSOBA');
P.prefix();
{? P.seek(_sPrac)
|| _p_ref:=P.ref();
   _nazw_imie:=P.OSOBA().NAZWISKO + ' ' + P.OSOBA().PIERWSZE;
   {? _sWarstwa='p' | _sWarstwa='g' | _sWarstwa='w'
   || _STR1.split(_sPar,'@');
      {? _STR1.next()
      || {!
         |? _ev:=_STR1.get_word();
            _STR2.split(_ev,';');
            {? _STR2.next()
            || _data_dp:=exec('str2date','#convert',_STR2.get_word());
               _data_od:=exec('str2date','#convert',_STR2.get_word());
               _ile_dni:=#_STR2.get_word();
               _data_do:=_data_od + _ile_dni;
               _pocz:=exec('str2time','#convert',_STR2.get_word());
               _kon:=exec('str2time','#convert',_STR2.get_word());
               _plob_h:=_STR2.get_word();

               _one_day:=1440;
               {? _pocz>=_kon
               || _czas:=((*(_one_day*_ile_dni) - _pocz + _kon))
               || _czas:=_kon - _pocz
               ?};
               _text:='';
               _rodz:='INFO_'+$(_data_dp)+'_'+_nazw_imie;
               _wyn:=exec('mod_bpodz','plob_pb',_p_ref,_sWarstwa,_data_dp,_data_od,_data_do,_pocz,_kon,_czas,_plob_h);
               {? _wyn<=0
               || _text:='[%1] Nie udało się zapisać podziałów dla dnia: %2'@[_nazw_imie,$_data_dp]
               ?};
               {? _webTerm & +_text
               || web_ctrl_call(_ctrl_id,,'addError',_rodz,_text)
               ?}
            ?};
            _STR1.next()
         !}
      ?}
   ?}
?};
P.cntx_pop();
OSOBA.cntx_pop();
_result


\oddel_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.42]
:: OPIS: Zwraca tabelę z infmoracjami o oddelegowaniu pracownika w wybranym dniu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+
"  select space(60) as EV_ID,space(100) as WYNIK,space(100) as FROMOPIS,space(100) as TOOPIS,space(100) as WYDZOPIS
   from syslog where 2=1
";
_lTab:=sql(_sql);

_paczka:={? var_pres('_a')=type_of('') || _a || return(_lTab) ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_sPrac:='';
_sData:='';
_sMoj:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='DATA'
      || _sData:=_param[2]
      |? _param[1]='MOJ'
      || _sMoj:=_param[2]
      ?}
   ?}
!};

_data:=exec('str2date','#convert',_sData);
_ev_id:=_sPrac+'_'+exec('date4id','prc_graf',_data);

UD_SKL.cntx_psh();
UD_SKL.index('SYMBOL');
UD_SKL.prefix();
OSOBA.cntx_psh();
OSOBA.index('OSOBA');
P.cntx_psh();
P.index('OSOBA');
P.prefix();

_kier:=null();
_is_wydz:=(var_pres('WYDZ',P_ODDEL)>0);

{? exec('load_cur_prac','p_web','JA',1)
|| _kier:=P.ref()
|| {? _webTerm
   || web_ctrl_call(_ctrl_id,,'addError','ERROR_P1','Błąd wyszukania pracownika (kod błędu: %1)'@['1'])
   ?}
?};
_p_ref:=null();
{? P.seek(_sPrac)
|| _p_ref:=P.ref()
|| {? _webTerm
   || web_ctrl_call(_ctrl_id,,'addError','ERROR_P1','Błąd wyszukania pracownika (kod błędu: %1)'@['2'])
   ?}
?};
{? _kier<>null() & _p_ref<>null()
|| _kod:=exec('getKod4Plan','prc_oddel');
   {? _sMoj='T'
   || _tab:=exec('find','prc_oddel',_kod,_kier,_p_ref,'FROM',_data,_data,,1)
   |? _sMoj='N'
   || _tab:=exec('find','prc_oddel',_kod,_kier,_p_ref,'TO',_data,_data,,1)
   ?};
:: pobieram tylko pierwsza informacje - indeks unikalny na datę dla tabeli P_ODDEL
   {? _tab.first()
   || _put:=0;
      {? P.seek(_tab.P_FROM)
      || _lTab.blank(1);
         _lTab.EV_ID:=_ev_id;
         _lTab.WYNIK:='OK';
         _lTab.FROMOPIS:=P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' ('+form(P.T)+')'+' - '+P.WYDZIAL().SYMBOL;
         _put:=_lTab.add()
      ?};

      {? P.seek(_tab.P_TO)
      || {? ~_put
         || _lTab.blank(1);
            _lTab.EV_ID:=_ev_id;
            _lTab.WYNIK:='OK'
         ?};
         _lTab.TOOPIS:=P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' ('+form(P.T)+')'+' - '+P.WYDZIAL().SYMBOL;
         {? _put || _lTab.put() || _lTab.add() ?}
      ?};

      {? _is_wydz & UD_SKL.seek(_tab.WYDZ)
      || {? ~_put
         || _lTab.blank(1);
            _lTab.EV_ID:=_ev_id;
            _lTab.WYNIK:='OK'
         ?};
         _lTab.WYDZOPIS:=UD_SKL.SYMBOL + ' - ' + UD_SKL.OPIS;
         {? _put || _lTab.put() || _lTab.add() ?}
      ?}
   || _lTab.WYNIK:='Informacje o oddelegowaniu niedostępne.'@;
      _lTab.add()
   ?}
?};
P.cntx_pop();
OSOBA.cntx_pop();
UD_SKL.cntx_pop();
_lTab


\zdalna_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.37]
:: OPIS: Zwraca tabelę z infmoracjami o pracy zdalnej pracownika w wybranym dniu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"select space(10) as RODZ, space(100) as WYNIK,space(255) as TEXT from syslog where 2=1";
_lTab:=sql(_sql);

_paczka:={? var_pres('_a')=type_of('') || _a || return(_lTab) ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_sPrac:='';
_sData:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='DATA'
      || _sData:=_param[2]
      ?}
   ?}
!};
_data:=exec('str2date','#convert',_sData);

P.cntx_psh();
P.index('OSOBA');
P.prefix();
_p_ref:=null();
{? P.seek(_sPrac)
|| _p_ref:=P.ref()
|| {? _webTerm
   || web_ctrl_call(_ctrl_id,,'addError','ERROR_P1','Błąd wyszukania pracownika (kod błędu: %1)'@['1'])
   ?}
?};
{? _p_ref<>null()
||
:: praca zdalna okazjonalna
   _tab:=exec('get','prc_zdalna',_p_ref,_data);
   {? _tab.first()
   || {!
      |? _lTab.blank(1);
         _lTab.RODZ:='PPSFN';
         _lTab.WYNIK:='OK';
         _lTab.TEXT:=form(_tab.OPIS)+{? _tab.PARTDAY='T' || ' (%1 - na część dnia)'@[_tab.G$3] || '' ?};
         _lTab.add();
         _tab.next()
      !}
   ?};
:: praca zdalna stała
   {? exec('is_pzd02','ppsf')
   || &_tab;
      _tab:=exec('get_ppsf_h','prc_zdalna',_p_ref,_data);
      {? _tab.first()
      || {!
         |? {? _tab.WYBDNI='N' | (_tab.WYBDNI='T' & ($('_a.D%1=_b'[$(_data~4)]))(_tab,'T'))
            || _lTab.blank(1);
               _lTab.RODZ:='PPSF_H';
               _lTab.WYNIK:='OK';
               _lTab.TEXT:='%1 (%2)'[form(_tab.OPIS),form(_tab.NAZWA)];
               _lTab.add()
            ?};
            _tab.next()
         !}
      ?}
   ?};

:: wprowadzone rejestracje czasu pracy - nie pobieramy niezakończonych z poprzedniego dnia
   _TAB_WEWY:=exec('start_stop_get','prc_zdalna',_p_ref,_data,0);
   {? _TAB_WEWY.first()
   || {!
      |? _lTab.blank(1);
         _lTab.RODZ:='R_POR_WW';
         _lTab.WYNIK:='OK';
         _lTab.TEXT:='%1 | %2 | %3 | %4'
                  [$_TAB_WEWY.DZ,_TAB_WEWY.GD$3,form(_TAB_WEWY.TP_OPIS),form(_TAB_WEWY.TYP_O)];
         _lTab.add();
         _TAB_WEWY.next()
      !}
   ?};

   _lTab.prefix();
   {? _lTab.size()=0
   || _lTab.WYNIK:='Brak informacji o pracy poza siedzibą firmy.'@;
      _lTab.add()
   ?}

?};
P.cntx_pop();
_lTab


\wewy_zp_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.37]
:: OPIS: Zwraca tabelę z infmoracjami o zapisach pierwotnych z czytników dla pracownika w wybranym dniu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"select space(100) as WYNIK,space(255) as TEXT from syslog where 2=1";
_lTab:=sql(_sql);

_paczka:={? var_pres('_a')=type_of('') || _a || return(_lTab) ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_sPrac:='';
_sData:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='DATA'
      || _sData:=_param[2]
      ?}
   ?}
!};
_data:=exec('str2date','#convert',_sData);

P.cntx_psh();
P.index('OSOBA');
P.prefix();
_p_ref:=null();
{? P.seek(_sPrac)
|| _p_ref:=P.ref()
|| {? _webTerm
   || web_ctrl_call(_ctrl_id,,'addError','ERROR_P1','Błąd wyszukania pracownika (kod błędu: %1)'@['1'])
   ?}
?};
{? _p_ref<>null()
|| _tab:=exec('get_wewy_zp','prc_wewy',_p_ref,_data);
   {? _tab.first()
   || {!
      |? _lTab.blank(1);
         _lTab.WYNIK:='OK';
         _lTab.TEXT:='%1 | %2 | %3 %4 | Czytnik %5'[gsub($_tab.DZ,'/','-'),_tab.GD$3,_tab.TP,_tab.RD,_tab.CZ];
         _lTab.add();
         _tab.next()
      !}
   || _lTab.WYNIK:='Brak danych.'@;
      _lTab.add()
   ?}
?};
P.cntx_pop();
_lTab


\rap_wewyzp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Generowanie pliku raportu dot. odstępstw między wejściami/wyjściami zakwalifikowanymi a rzeczywistymi
::   WE: _a [DICT] - obiekt
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_res:={? var_pres('_a')=117 || _a || return() ?};
_ext:={?_res.id*'xls' || 'xlsx' || 'pdf' ?};
_file:='prc_wewyakwalifikacja_%1.%2'[$P.tm_stamp(),_ext];

_par:=obj_new('P','KOL','OD','DO','BEZ_SZEF','BEZ_OR');
:: lista pracowników, dla których będziemy robić sprawozdanie
_kod:=exec('kod_zaleznosci','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('p_web_cx_set_prefix','p_web',_kod,'SETID',_sSource);
_par.P:=P_WEB_CX;
:: kolumna ze wskazaniem na pracownika
_par.KOL:='P';
:: zakres wydruku - domyślnie wybrany okres rozliczeniowy
_rOkres:=exec('okres_get','prc_ws');
_par.OD:=exec('FindAndGet','#table',A_OKR,_rOkres,,"OD",#0);
_par.DO:=exec('FindAndGet','#table',A_OKR,_rOkres,,"DO",#0);
:: nie pokazuj szefa pracownika
_par.BEZ_SZEF:=1;
:: nie pokazuj informacji o obszarze roboczym na wydruku
_par.BEZ_OR:=1;
params_set(_par);
errno();
{? rep_exec('prc_wewyakwalifikacja',,0,_file,1)
|| _res.fileName:=_file;
   _res.pth:=1
|| _res.errMsg:={? errno()
                || 'Podczas generowania raportu wystąpiły błędy.'@
                || 'Brak danych do wygenerowania raportu.'@
                ?}
?};
~~


\del_kal_buff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Funkcja usuwająca dane z buforów planowania
::   WE: _a  [STRING] - parametr z danymi
::      [_b] [NUMBER] - czy wymusić usuwanie (bez względu na status miesiąca/okresu).
::                      Podczas usuwania wykonania nie jest robiona ponowna kwalifikacja.
::   WY:    [STRING] - wynik przetwarzania
::----------------------------------------------------------------------------------------------------------------------
_result:='ERROR';
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
 _force:={? var_pres('_b')=type_of(0)  || _b || 0               ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_sPrac:='';
_sDataOd:='';
_sDataDo:='';
_sOkres:='';
_sWarstwa:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='DATA_OD'
      || _sDataOd:=_param[2]
      |? _param[1]='DATA_DO'
      || _sDataDo:=_param[2]
      |? _param[1]='OR_REF'
      || _sOkres:=_param[2]
      |? _param[1]='WARSTWA'
      || _sWarstwa:=~-_param[2]
      ?}
   ?}
!};

OSOBA.cntx_psh();
P.cntx_psh();
P.use('pracowni');
P.prefix();
A_OKR.cntx_psh();
A_OKR.prefix();
A_OKRP.use('x_okrpi');
A_OKRP.cntx_psh();
A_OKRP.index('A_OKPP');
A_OKRP_M.cntx_psh();
A_OKRP_M.index('A_OKRPM');
{? P.seek(_sPrac) & exec('isRef_A_OKR','prc_dane',_sOkres) & A_OKR.seek(_sOkres)
|| _nazw_imie:=P.OSOBA().NAZWISKO + ' ' + P.OSOBA().PIERWSZE;
   _okr_ref:=A_OKR.ref();
   _p_ref:=P.ref();
   _data_od:=exec('str2date','#convert',_sDataOd);
   _data_do:=exec('str2date','#convert',_sDataDo);
   _rok_od:=_data_od~1; _rok_do:=_data_do~1;
   _msc_od:=_data_od~2; _msc_do:=_data_do~2;
   _rok:=_rok_od; _msc:=_msc_od;
   A_OKRM.cntx_psh();
   A_OKRM.index('A_OKRMR');
   _result:='';
   {!
   |? A_OKRM.prefix();
      {? A_OKRM.find_key(_rok,_msc)
      || _data_s:={? date(_rok,_msc,1)<_data_od || _data_od || date(_rok,_msc,1) ?};
         _data_e:={? date(_rok,_msc,0)>_data_do || _data_do || date(_rok,_msc,0) ?};
         _canDel:=0;
         A_OKRP.prefix(_okr_ref,_p_ref);
         {? A_OKRP.first()
         || _s_plan:=exec('getPlanStat4Pr','grafik',_p_ref,_data_s,A_OKRP.ref());
            {? _force | (_s_plan<>'Z' &  _s_plan<>'X')
            || _canDel:=1
            || {? _webTerm
               || _text:='Miesiąc %1 dla pracownika %2 został zamknięty do planowania. '
                          'Nie można usunąć planowania.'@[_data_s$8,_nazw_imie];
                          web_ctrl_call(_ctrl_id,,'addError','INFO_'+_sPrac,_text)
               ?}
            ?}
         || {? _webTerm
            || _text:='Brak przypisania pracownika %1 do okresu rozliczeniowego'@[_nazw_imie];
               web_ctrl_call(_ctrl_id,,'addError','INFO_'+_sPrac,_text)
            ?}
         ?};
::        usuwa planowanie i grafiki
         {? _canDel & ((_sWarstwa='P') | (_sWarstwa='G'))
         || _wyn:=exec('del_plan','grafik',P.ref(),_data_s, _data_e,_sWarstwa,A_OKR.ref());
            {? _wyn>0
            || _result:='OK';
               {? exec('spr_par','plob',353,0)
               || exec('delDraftAndPodz','plob',_p_ref,_sWarstwa,_data_s,_data_e)
               ?};
               exec('dodaj_do_buff','grafik',_sWarstwa,P.ref(),A_OKRP.OKR,A_OKRP.OD,A_OKRP.DO,1,1,_data_s,_data_e)
            |? _wyn=0
            || {? _webTerm
               || _text:='Nie udało się usnunąć wszystkich danych z bufora planowania dla %1.'@[_nazw_imie];
                  web_ctrl_call(_ctrl_id,,'addError','INFO_'+_sPrac,_text)
               ?}
            |? _wyn<0
            || {? _webTerm
               || _text:='Nie zmodyfikowano planowania dla %1, ponieważ od %2 do %3 istnieją '
                         'nieobecności rozliczone na liście płac.'@[_nazw_imie, $_data_s,$_data_e];
                  web_ctrl_call(_ctrl_id,,'addError','INFO_'+_sPrac,_text)
               ?}
            ?}
         ?}
      || {? _webTerm
         || _rodz:='INFO_%1_%2'[$_rok,$_msc];
            _text:='Brak miesiąca rozliczeniowego %1/%2.'@[$_rok,$_msc];
            web_ctrl_call(_ctrl_id,,'addError',_rodz,_text)
         ?}
      ?};
      _msc+=1;
      {? _msc>12 || _rok+=1; _msc:=1 ?};
      (_rok<_rok_do) | (_rok=_rok_do & _msc<=_msc_do)
   !};
   A_OKRM.cntx_pop()
?};
A_OKRP_M.cntx_pop();
A_OKRP.cntx_pop();
A_OKR.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();
_result


\usun_paczke_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.02]
:: OPIS: Usuwa wykonania z przekazanej paczki z dniami pracownika
::   WE: _a  [STRING] - paczka z danymi
::      [_b] [NUMBER] - czy wymusić usuwanie (bez względu na status miesiąca/okresu).
::                      Podczas usuwania wykonania nie jest robiona ponowna kwalifikacja.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(0) ?};
 _force:={? var_pres('_b')=type_of(0)  || _b || 0         ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';
_par353:=exec('spr_par','plob',353,0);

:: parametry przekazywane w paczce
_params:=exec('getParamsFromPaczka','prc_dane',_paczka);
_sPrac:=exec('getParamForName','prc_dane',_params,'P_REF');
_sWarstwa:=exec('getParamForName','prc_dane',_params,'WARSTWA');
_sOkres:=exec('getParamForName','prc_dane',_params,'OR_REF');

{! _ind:=1 .. obj_len(_params)
|! _val:=exec('getParamForName','prc_dane',_params,'PAR'+$_ind);
   {? +_val
   || _result:=exec('usun_parametr_wewy','prc_dane',_sPrac,_sWarstwa,_sOkres,_val,_par353,_force);
      {? +_result
      || {? _webTerm
         || web_ctrl_call(_ctrl_id,,'addError','ERROR'+$_ind,_result)
         ?}
      ?}
   ?}
!};

_okr_ref:=exec('FindAndGet','#table',A_OKR,_sOkres,,,null());
_p_ref:=exec('FindAndGet','#table',P,_sPrac,,,null());
A_OKRP.cntx_psh();
A_OKRP.index('A_OKPP');
A_OKRP.prefix(_okr_ref,_p_ref);
{? A_OKRP.first()
|| exec('oblicz','okres',1)
?};
A_OKRP.cntx_pop();
{? _webTerm || _sPrac || _result ?}


\usun_parametr_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.02]
:: OPIS: Usuwa wykonania z dla przekazanego parametru paczki z dniami pracownika
::   WE: _a [STRING] - ref pracownika w postaci napisowej
::       _b [STRING] - warstwa ('p','g','w')
::       _c [STRING] - ref okresu rozliczeniowego w postaci napisowej
::       _d [STRING] - parametr z danymi
::       _e [NUMBER] - czy parametr 353 jest włączony (planowanie na obiekty)
::      [_f][NUMBER] - czy wymusić usuwanie (bez względu na status miesiąca/okresu).
::                      Podczas usuwania wykonania nie jest robiona ponowna kwalifikacja.
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:='Błędny typ parametru wejściowego funkcji.';
   _sPrac:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
_sWarstwa:={? var_pres('_b')=type_of('') || _b || return(_result) ?};
  _sOkres:={? var_pres('_c')=type_of('') || _c || return(_result) ?};
    _sPar:={? var_pres('_d')=type_of('') || _d || return(_result) ?};
  _par353:={? var_pres('_e')=type_of(0)  || _e || 0               ?};
   _force:={? var_pres('_b')=type_of(0)  || _b || 0               ?};
_result:='';

_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

_STR1:=obj_new(@.CLASS.STRING);
_STR2:=obj_new(@.CLASS.STRING);

OSOBA.cntx_psh();
P.cntx_psh();
P.use('pracowni');
P.prefix();
A_OKR.cntx_psh();
A_OKR.prefix();
A_OKRP.use('x_okrpi');
A_OKRP.cntx_psh();
A_OKRP.index('A_OKPP');
A_OKRP_M.cntx_psh();
A_OKRP_M.index('A_OKRPM');
{? P.seek(_sPrac) & exec('isRef_A_OKR','prc_dane',_sOkres) & A_OKR.seek(_sOkres)
|| _nazw_imie:=P.OSOBA().NAZWISKO + ' ' + P.OSOBA().PIERWSZE;
   _okr_ref:=A_OKR.ref();
   _p_ref:=P.ref();

   {? _sWarstwa='w'
   || _STR1.split(_sPar,'@');
      {? _STR1.next()
      || {!
         |? _ev:=_STR1.get_word();
            _STR2.split(_ev,';');
            {? _STR2.next()
            || _data:=exec('str2date','#convert',_STR2.get_word());
               _rodz:=_text:='';

               {? _force=0 & (exec('get_msc_status','grafik',_data)='Z' |
                             exec('getPlanStat4Pr','grafik',_p_ref,_data)='X')
               || {? _webTerm
                  || _rodz:='INFO_%1_%2'[$(_data~1),$(_data~2)];
                     _text:='Miesiąc rozliczeniowy %1 został zamknięty do daty %2.'@
                            [_data$8,$exec('getMscCloseDate','grafik',_data,1)]+' '+
                            'Nie można usunąć wykonania.'@
                  ?}
               |? _force=0 & exec('wyk_D_rozl','prc_graf',_p_ref,_data)
                  & (~exec('usun_wewy','prc_wewy',_p_ref,(_data-1)~1,(_data-1)~2,5,(_data-1)))
               || {? _webTerm
                  || _rodz:='INFO_%1'[$_data];
                     _text:='Wykonanie w dniu %1 zostało rozliczone.'@[$_data]+' '+
                            'Nie można usunąć wykonania.'@
                  ?}
               || _mydo:=do_state()=0;
                  {? _mydo || do() ?};
::                usuń z bufora wykonania
                  _wyn:=exec('del_plan','grafik',_p_ref,_data, _data,_sWarstwa,_okr_ref);
                  {? _wyn
                  || {? exec('spr_par','plob',_par353,0)
                     || exec('delDraftAndPodz','plob',_p_ref,_sWarstwa,_data)
                     ?}
                  || _rodz:='KAL_BUFF_%1'[$_data];
                     _text:='Nie udało się usunąć danych z bufora wykonania w dniu: %1 .'@[$_data]
                  ?};
::                usun z wewy jezeli miesiac nie jest zamkniety i nie ma blokady
                  _blokada:=exec('isBlokada','prc_rozlicz',_p_ref,_data)>0;
                  {? _blokada
                  || undo();
                     {? _webTerm
                     || _rodz:='BLOKADA_%1'[$_data];
                        _text:='W dniu: %1 %2 ma założoną blokadę kwalifikacji.'@[$_data,_nazw_imie]+' '+
                               'Nie można usunąć wykonania.'@
                     ?}
                  || {? _force=0
                     || exec('save2wewy','prc_wewy',_p_ref,_data,time(0,0,0),_data,time(0,0,0),time(0,0,0),'',null);
                        exec('ponow_kwal_wewy','grafik',_p_ref,_data-1, _data+1,OPERATOR.USER().OSOBA,1)
                     ?}
                  ?};
                  {? _mydo || end() ?}
               ?};

               {? _text=''
               || _komm:='OK;'+$_p_ref+';'+exec('date4id','prc_graf',_data)+';'+_sWarstwa;
                  {? _webTerm
                  || web_ctrl_call(_ctrl_id,,'usunEventWykSuccess',_komm)
                  || _result:=_komm
                  ?}
               || {? _webTerm
                  || web_ctrl_call(_ctrl_id,,'addError',_rodz,_text)
                  || _result:=_komm
                  ?}
               ?}
            ?};
            _STR1.next()
         !}
      ?}
   || _result:='Brak prawidłowej maski'
   ?}
?};
A_OKRP_M.cntx_pop();
A_OKRP.cntx_pop();
A_OKR.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();
_result


\zakoncz_planowanie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Funkcja do kończenia planowania pracownika w okresie
::   WE: _a [STRING] - parametr z danymi
::   WY:    [STRING] - wynik przetwarzania
::----------------------------------------------------------------------------------------------------------------------
_result:='ERROR';
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_sPrac:='';
_sOkres:='';
_sRok:='';
_sMsc:='';
_sNadpGraf:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='OR_REF'
      || _sOkres:=_param[2]
      |? _param[1]='YEAR'
      || _sRok:=_param[2]
      |? _param[1]='MONTH'
      || _sMsc:=_param[2]
      |? _param[1]='NADP_GR'
      || _sNadpGraf:=_param[2]
      ?}
   ?}
!};

_rok:=#_sRok;
_msc:=#_sMsc;
_korekta:=0;
_okr_ref:=null();
_p_ref:=null();
_data_od:=date(0,0,0);
_data_do:=date(0,0,0);

:: przepisanie zmian z bufora planowania do kalendarza
A_OKR.cntx_psh();
A_OKR.prefix();
P.cntx_psh();
P.use('pracowni');
P.clear();
{? P.seek(_sPrac) & exec('isRef_A_OKR','prc_dane',_sOkres) & A_OKR.seek(_sOkres)
|| _data_od:=A_OKR.OD;
   _data_do:=A_OKR.DO;
   _p_ref:=P.ref();
   _okr_ref:=A_OKR.ref();
   A_OKRP.use('x_okrpi');
   {? (_okr_ref<>null()) & (_res:=exec('lock_A_OKR','grafik',_okr_ref);_res<>'')
   || {? _webTerm || web_ctrl_call(_ctrl_id,,'addMessage','INFO'+_sPrac,_res) ?}
   || exec('unlock_A_OKR','grafik',_okr_ref);
      A_OKRP.cntx_psh();
      A_OKRP.use('x_okrpi');
      A_OKRP.index('A_OKRPR');
      A_OKRP.prefix(_okr_ref,_p_ref);
      {? A_OKRP.first()
      || _okrp_ref:=A_OKRP.ref();
         {? (A_OKRP.S_PLAN='K')
         || _korekta:=1
         ?}
      || _okrp_ref:=null()
      ?};
      A_OKRP.cntx_pop();
      {? _rok<>0 & _msc<>0
      || _data_od:={? _data_od<date(_rok,_msc,1) || _data_od || date(_rok,_msc,1) ?};
         _data_do:={? _data_do>date(_rok,_msc,0) || _data_do || date(_rok,_msc,0) ?};
         _korekta:=(exec('getMscPlanStat','okres',_rok,_msc)='Z') |
                   (exec('getStatusM_Plan','okres',_okrp_ref,_rok,_msc)='K')
      ?};
      _wyn:=exec('save2kal','grafik',_p_ref,_data_od,_data_do,_korekta,_okr_ref,,_rok,_msc);
      {? _wyn
      || _result:='OK'
      || {? _webTerm
         || _text:='Błąd podczas zapisu do bazy danych.'@;
            web_ctrl_call(_ctrl_id,,'addError','INFO'+_sPrac,_text)
         ?}
      ?}
   ?}
?};
P.cntx_pop();

:: zamknięcie planowania w wybranym miesiącu lub w całym okresie
_nadp_gr:={? _sNadpGraf='true' || 1 || 0 ?};

{? _p_ref & _okr_ref & _result='OK'
|| _result:='';
   _res:=exec('lock_A_OKR','grafik',_okr_ref);
   {? +_res
   || {? _webTerm || web_ctrl_call(_ctrl_id,,'addError','INFO'+$_okr_ref,_res) ?}
   || exec('unlock_A_OKR','grafik',_okr_ref);
      _a_okr:=A_OKR.ref();
      A_OKRP.cntx_psh();
      A_OKRP.use('x_okrpi');
      A_OKRP.index('A_OKRPR');
      A_OKRP.prefix(_okr_ref,_p_ref);
      {? A_OKRP.first()
      || _a_okrp:=A_OKRP.ref();
::       jezeli zamykamy wskazany miesiac
         _ok:=1;
         {? _rok<>0 & _msc<>0
         || A_OKRM.cntx_psh();
            A_OKRM.index('A_OKRMR');
            A_OKRM.prefix(_rok,_msc);
            {? A_OKRM.first()
            || _res:=exec('lock_A_OKRM','prc_mscrozlicz',A_OKRM.ref());
               {? +_res
               || {? _webTerm || web_ctrl_call(_ctrl_id,,'addError','INFO'+$A_OKRM.ref(),_res) ?}
               || exec('unlock_A_OKRM','prc_mscrozlicz',A_OKRM.ref());
                  _data_od:=date(_rok,_msc,1);
                  _data_do:=date(_rok,_msc,0);
                  {? exec('getStatusM_Plan','okres',A_OKRP.ref(),_rok,_msc)='X'
                  || _result:='OK'
                  || {? exec('setStatusM_Plan','okres',_a_okrp,_rok,_msc,'Z')
                     || _result:='OK';
                        {? _nadp_gr
                        || _mydo:=do_state()=0;
                           {? _mydo || do() ?};
::                         usun miesiac z grafikow
                           exec('del_plan','grafik',_p_ref,_data_od,_data_do,'G',_okr_ref);
::                         aktualizuj bufor grafikow dla zamykanego miesiaca
                           exec('dodaj_do_buff','grafik','G',_p_ref,_okr_ref,A_OKRP.OD,A_OKRP.DO,0,1,_data_od,_data_do);
::                         przepisz podziały
                           exec('copyPodz','plob_p',_p_ref,'P','G',_data_od,_data_do);
                           {? _mydo || end() ?}
                        ?}
                     ?}
                  ?};
                  {? exec('canCloseOkrPrac','okres',_a_okrp)
                  || {? A_OKRP.S_PLAN<>'X' || A_OKRP.S_PLAN:='Z' ?};
                     A_OKRP.put(1)
                  ?}
               ?}
            ?};
            A_OKRM.cntx_pop()
         ||
::          jezeli nie jest przekazany rok i miesiac to tak jak do tej pory zamykamy caly okres
            _res:=exec('is_A_OKRM_lock','prc_mscrozlicz',A_OKRP.OD,A_OKRP.DO);
            {? +_res
            || {? _webTerm || web_ctrl_call(_ctrl_id,,'addMessage','INFO'+_sPrac,_res) ?}
            || {? A_OKRP.S_PLAN<>'X' || A_OKRP.S_PLAN:='Z'?};
               {? A_OKRP.put(1)
               || {? exec('setStatusM_Plan','okres',_a_okrp,,,'Z')
                  || _result:='OK';
                     {? _nadp_gr
                     || _mydo:=do_state()=0;
                        {? _mydo || do() ?};
::                      usun miesiac z grafikow
                        exec('del_plan','grafik',_p_ref,A_OKRP.OD, A_OKRP.DO,'G',_okr_ref);
::                      aktualizuj bufor grafikow dla zamykanego okresu
                        exec('dodaj_do_buff','grafik','G',_p_ref,_okr_ref,A_OKRP.OD,A_OKRP.DO,0,1,A_OKRP.OD,A_OKRP.DO);
::                      przepisz podziały
                        exec('copyPodz','plob_p',_p_ref,'P','G',A_OKRP.OD,A_OKRP.DO);
                        {? _mydo || end() ?}
                     ?}
                  ?}
               ?}
            ?}
         ?}
      ?};
      A_OKRP.cntx_pop()
   ?}
?};
A_OKR.cntx_pop();
_result


\ponow_planowanie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Funkcja do otwierania planowania pracownika w okresie
::   WE: _a [STRING] - parametr z danymi
::   WY:    [STRING] - wynik przetwarzania
::----------------------------------------------------------------------------------------------------------------------
_result:='ERROR';
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_sPrac:='';
_sOkres:='';
_sRok:='';
_sMsc:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='OR_REF'
      || _sOkres:=_param[2]
      |? _param[1]='YEAR'
      || _sRok:=_param[2]
      |? _param[1]='MONTH'
      || _sMsc:=_param[2]
      ?}
   ?}
!};

_rok:=#_sRok;
_msc:=#_sMsc;
_korekta:=0;
_okr_ref:=null();
_p_ref:=null();
_data_od:=date(0,0,0);
_data_do:=date(0,0,0);

A_OKR.cntx_psh();
A_OKR.clear();
{? exec('isRef_A_OKR','prc_dane',_sOkres) & A_OKR.seek(_sOkres)
|| _okr_ref:=A_OKR.ref();
   _res:=exec('lock_A_OKR','grafik',A_OKR.ref());
   {? +_res
   || {? _webTerm || web_ctrl_call(_ctrl_id,,'addError','INFO'+_sOkres,_res) ?}
   || exec('unlock_A_OKR','grafik',A_OKR.ref());
      A_OKRP.cntx_psh();
      A_OKRP.use('x_okrpi');
      A_OKRP.index('A_OKRPR');
      P.cntx_psh();
      P.clear();
      {? P.seek(_sPrac)
      || A_OKRP.prefix(A_OKR.ref(),P.ref());
         {? A_OKRP.first()
         || _dalej:=1;
            {? A_OKRP.S_PLAN='X'
            || _dalej:=0;
               {? _webTerm
               || _text:='Okres rozliczeniowy pracownika %1 jest przeniesiony do rozliczenia. '@
                         [P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE]+
                         'Otwarcie korekty planowania nie jest możliwe.'@;
                  web_ctrl_call(_ctrl_id,,'addError','INFO'+_sPrac,_text)
               ?}
            |? _rok=0 & _msc=0 & exec('isStatMscInOkrp','okres',A_OKRP.ref(),'X')
            || _dalej:=0;
               {? _webTerm
               || _text:='Co najmniej jeden z miesięcy w okresie rozliczeniowym pracownika %1'
                          ' jest przeniesiony do rozliczenia. '@[P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE]+
                          'Otwarcie korekty planowania nie jest możliwe.'@;
                  web_ctrl_call(_ctrl_id,,'addError','INFO'+_sPrac,_text)
               ?}
            ?};
            _nazw_msc:=date(_rok,_msc,0)$8;
            _a_okrp:=A_OKRP.ref();
            {? _dalej & A_OKRP.OKR().S_PLAN='O'
            || {? _rok<>0 & _msc<>0
               || A_OKRM.cntx_psh();
                  A_OKRM.index('A_OKRMR');
                  A_OKRM.prefix(_rok,_msc);
                  {? A_OKRM.first()
                  || _res:=exec('lock_A_OKRM','prc_mscrozlicz',A_OKRM.ref());
                     {? +_res
                     || {? _webTerm || web_ctrl_call(_ctrl_id,,'addError','INFO'+$A_OKRM.ref(),_res) ?}
                     || exec('unlock_A_OKRM','prc_mscrozlicz',A_OKRM.ref());
                        {? exec('getStatusM_Plan','okres',A_OKRP.ref(),_rok,_msc)='X'
                        || {? _webTerm
                           || _text:='Dane w miesiącu %1 dla pracownika %2 '
                                     'zostały już przeniesione do rozliczenia. Nie można otworzyć planowania.'@
                                     [_nazw_msc,P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE];
                              web_ctrl_call(_ctrl_id,,'addError','INFO'+_sPrac,_text)
                           ?}
                        || _status:=exec('status4OpenPlan','okres',_rok,_msc);
                           {? exec('setStatusM_Plan','okres',_a_okrp,_rok,_msc,_status)
                           || A_OKRP.S_PLAN:='O';
                              {? A_OKRP.put()
                              || _result:='OK'
                              ?}
                           ?}
                        ?}
                     ?}
                  ?};
                  A_OKRM.cntx_pop()
               || _ok:=0;
                  _res:=exec('is_A_OKRM_lock','prc_mscrozlicz',A_OKRP.OD,A_OKRP.DO);
                  {? +_res
                  || {? _webTerm || web_ctrl_call(_ctrl_id,,'addMessage','INFO'+_sPrac,_res) ?}
                  || {? A_OKRP.S_PLAN='Z'
                     || A_OKRP.S_PLAN:='O';
                        {? A_OKRP.put(1)
                        || _ok:=1
                        ?}
                     || _ok:=1
                     ?};
                     {? _ok & exec('openAllM_Plan','okres',_a_okrp)
                     || _result:='OK'
                     ?}
                  ?}
               ?}
            || {? _dalej
               || {? _webTerm
                  || _text:='Okres rozliczeniowy został zamknięty do planowania. Należy odświeżyć dane.'@;
                     web_ctrl_call(_ctrl_id,,'addError','INFO'+$A_OKR.ref(),_text)
                  ?}
               ?}
            ?}
         ?}
      ?};
      P.cntx_pop();
      A_OKRP.cntx_pop()
   ?}
?};
A_OKR.cntx_pop();
_result


\otworz_korekte
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Funkcja do otwierania korekty planowania pracownika w okresie
::   WE: _a [STRING] - parametr z danymi
::   WY:    [STRING] - wynik przetwarzania
::----------------------------------------------------------------------------------------------------------------------
_result:='ERROR';
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';
_os_ref:=OPERATOR.USER().OSOBA;

:: parametry przekazywane w paczce
_sPrac:='';
_sOkres:='';
_sRok:='';
_sMsc:='';
_sPowod:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='OR_REF'
      || _sOkres:=_param[2]
      |? _param[1]='YEAR'
      || _sRok:=_param[2]
      |? _param[1]='MONTH'
      || _sMsc:=_param[2]
      |? _param[1]='POWOD'
      || _sPowod:=_param[2]
      ?}
   ?}
!};

_rok:=#_sRok;
_msc:=#_sMsc;
_korekta:=0;
_okr_ref:=null();
_p_ref:=null();
_data_od:=date(0,0,0);
_data_do:=date(0,0,0);
_text:='';
_rodz:='INFO';

OSOBA.cntx_psh();
OSOBA.prefix();
A_OKR.cntx_psh();
A_OKR.prefix();
{? exec('isRef_A_OKR','prc_dane',_sOkres) & A_OKR.seek(_sOkres)
|| _okr_ref:=A_OKR.ref();
   {? (_rok=0 & _msc=0 & A_OKR.S_PLAN='Z') | (_rok<>0 & _msc<>0 & exec('getMscPlanStat','okres',_rok, _msc)='Z')
   || P.cntx_psh();
      P.clear();
      {? P.seek(_sPrac)
      || _p_ref:=P.ref();
         _rodz+=_sPrac;
         A_OKRP.cntx_psh();
         A_OKRP.use('x_okrpi');
         A_OKRP.index('A_OKRPR');
         A_OKRP.prefix(_okr_ref,_p_ref);
         {? A_OKRP.first()
         || _dalej:=1;
            {? A_OKRP.S_PLAN='X'
            || _dalej:=0;
               _text:='Okres rozliczeniowy pracownika %1 jest przeniesiony do rozliczenia. '@
                      [P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE]+
                      'Otwarcie korekty planowania nie jest możliwe.'@
            |? _rok=0 & _msc=0 & exec('isStatMscInOkrp','okres',A_OKRP.ref(),'X')
            || _dalej:=0;
               _text:='Co najmniej jeden z miesięcy w okresie rozliczeniowym pracownika %1'
                      ' jest przeniesiony do rozliczenia. '@[P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE]+
                      'Otwarcie korekty planowania nie jest możliwe.'@
            ?};
            {? _dalej & (_rok=0 & _msc=0)
            || {? A_OKRP.OKR().S='Z'
               || _rodz:='INFO_%1'[$A_OKR.ref()];
                  _text:='Okres rozliczeniowy jest zamknięty do rozliczenia. '@+
                         'Otwarcie korekty planowania nie jest możliwe.'@
               || {? A_OKRP.S_PLAN='Z'
                  || A_OKRP.S_PLAN:='K';
                     _k_start:=exec('korekta_start','kal_korn',_os_ref,_p_ref,_okr_ref,_sPowod,,_rok,_msc);
                     {? _k_start & A_OKRP.put(1)
                     || exec('korAllM_Plan','okres',A_OKRP.ref());
                        _result:='OK'
                     || _text:='Nie udało się otworzyć planowania do korekty.'@
                     ?}
                  |? A_OKRP.S_PLAN='K'
                  || _result:='OK'
                  |? A_OKRP.S_PLAN='O'
                  || _text:='Pracownik nie ma zakończonego planowania w okresie rozliczeniowym. '@+
                            'Otwarcie korekty planowania nie jest możliwe.'@
                  ?}
               ?}
            || _nazw_msc:=date(_rok,_msc,0)$8;
               A_OKRM.cntx_psh();
               A_OKRM.index('A_OKRMR');
               A_OKRM.prefix(_rok,_msc);
               {? _dalej & A_OKRM.first()
               || _text:=exec('lock_A_OKRM','prc_mscrozlicz',A_OKRM.ref());
                  {? _text=''
                  || exec('unlock_A_OKRM','prc_mscrozlicz',A_OKRM.ref());
                     _rozl:=exec('get_msc_status','grafik',date(_rok,_msc,0));
                     {? _rozl='Z'
                     || _rodz:='INFO_%1'[_nazw_msc];
                        _text:='Miesiąc %1 jest zamknięty do rozliczenia. '@[_nazw_msc]+
                               'Otwarcie korekty planowania nie jest możliwe.'@
                     || _status:=exec('getStatusM_Plan','okres',A_OKRP.ref,_rok,_msc);
                        {? _status='Z'
                        || _k_start:=exec('korekta_start','kal_korn',_os_ref,_p_ref,_okr_ref,_sPowod);
                           {? _k_start & exec('setStatusM_Plan','okres',A_OKRP.ref,_rok,_msc,'K')
                           || A_OKRP.S_PLAN:='O';
                              A_OKRP.put();
                              _result:='OK'
                           || _text:='Nie udało się otworzyć planowania do korekty.'@
                           ?}
                        |? _status='K'
                        || _result:='OK'
                        |? _status='O'
                        || _text:='Pracownik nie ma zakończonego planowania w wybranym miesiącu. '@+
                                  'Otwarcie korekty planowania nie jest możliwe.'@
                        |? _status='X'
                        || _text:='Dane w miesiącu %1 dla pracownika %2 zostały już przeniesione do rozliczenia. '@
                                   [_nazw_msc,P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE]+
                                   'Otwarcie korekty planowania nie jest możliwe.'@
                        |? _status=''
                        || _text:='Brak danych pracownika w wybranym miesiącu. '@+
                                   'Otwarcie korekty planowania nie jest możliwe.'@
                        ?}
                     ?}
                  ?}
               ?};
               A_OKRM.cntx_pop()
            ?}
         || _text:='Pracownik %1 nie jest przypisany do wybranego okresu rozliczeniowego: %2'@
                   [P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE,$A_OKR.OD+' - '+A_OKR.DO+' '+A_OKR.NAZ().NAZ]
         ?};
         A_OKRP.cntx_pop()
      || _text:='Nie znaleziono pracownika.'@
      ?};
      P.cntx_pop()
   ||
      {? _rok=0 & _msc=0
      || _rodz:='ERROR_%1'[_sOkres];
         _text:='Okres rozliczeniowy nie jest zamknięty do planowania. '@+
                'Otwarcie korekty planowania nie jest możliwe.'@+' '+'Należy odświeżyć dane.'@
      || _rodz:='ERROR_%1_%2'[$_rok,$_msc];
         _text:='Miesiąc jest otwarty do planowania. '@+
                'Otwarcie korekty planowania nie jest możliwe.'@+' '+'Należy odświeżyć dane.'@
      ?}
   ?}
|| _rodz:='ERROR_%1'[_sOkres];
   _text:='Nie znaleziono okresu rozliczeniowego: %1'@[_sOkres]
?};
{? +_text & _webTerm
|| web_ctrl_call(_ctrl_id,,'addError',_rodz,_text)
?};
A_OKR.cntx_pop();
OSOBA.cntx_pop();
_result


\after_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Po odświeżeniu okna z kontrolką planowania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ctrl_id:=exec('ctrl_id','prc_dane');
_sHTML:=exec('scheduler','prc_html')+
        exec('myKomm','prc_html')+
        exec('oddelegowania','prc_html');
web_ctrl_call(_ctrl_id,,'setBody',_sHTML);
exec('wszystkie_dane','prc_dane')


\get_kor_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Zwraca korekty dni pracownika w okresie rozliczeniowym
::   WE: _a [STRING] - parametr z danymi
::   WY:    [TAB]    - tabela z korektami
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

:: parametry przekazywane w paczce
_sPrac:='';
_sOkres:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='OR_REF'
      || _sOkres:=_param[2]
      ?}
   ?}
!};

_p_ref:=exec('FindAndGet','#table',P,_sPrac,,,null());
_or_ref:=exec('FindAndGet','#table',A_OKR,_sOkres,,,null());
exec('getKor4Prac','kal_korn',_p_ref,_or_ref,'T',1)


\korekty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Zwraca korekty pracowników w bieżącej sesji
::   WE: _a -
::   WY: [TAB] - tabela z korektami
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

:: parametry przekazywane w paczce
_sOkres:='';
_sDataOd:='';
_sDataDo:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='OR_REF'
      || _sOkres:=_param[2]
      |? _param[1]='DATA_OD'
      || _sDataOd:=_param[2]
      |? _param[1]='DATA_DO'
      || _sDataDo:=_param[2]
      ?}
   ?}
!};

_or_ref:=exec('FindAndGet','#table',A_OKR,_sOkres,,,null());
_data_od:=exec('str2date','#convert',_sDataOd);
_data_do:=exec('str2date','#convert',_sDataDo);

_sql:=''+"
   select
      DATA, DATAW, POCZATEK, KONIEC, CZAS, TYP, TYPWS, RODZAJ, OPIS, WERSJA, START_D,START_T, END_D,END_T,
      KAL_KORN.POWOD, OSOBA.NAZWISKO, OSOBA.PIERWSZE, '1234567890123456' as P_SQL,
      KAL_KORH.P_DATA, KAL_KORH.P_START, KAL_KORH.P_CZAS
   from
      KAL_KORH
      join KAL_KORN
      left join OSOBA using(KAL_KORN.KTO, OSOBA.REFERENCE)
   where
      1=2
   order by P_SQL, DATA, WERSJA
";

_RS:=sql(_sql);

P_WEB_CX.cntx_psh();
_p_ref:=exec('get_p_web_cl','p_web','JA');
_kod:=exec('kod_zaleznosci','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('p_web_cx_set_prefix','p_web',_kod,'SETID',_sSource);
{? P_WEB_CX.first()
|| {!
   |? {? (exec('is_pw','prc_gpdwl',_p_ref,P_WEB_CX.P) = 'T') & _or_ref
      || {? var_pres('_tab')>100 || obj_del(_tab) ?};
         _tab:=exec('getKor4Prac','kal_korn',P_WEB_CX.P,_or_ref,'T',1);
         {? _tab.first()
         || {!
            |? {? _tab.DATA>=_data_od & _tab.DATA<=_data_do
               || _RS.blank(1);
                  _RS.P_SQL:=$P_WEB_CX.P;
                  {! _ind:=1.._tab.fld_num()
                  |! _fld:=_tab.fld_acr(_ind);
                     ($("_a."+_fld+":=_b."+_fld))(_RS,_tab)
                  !};
                  _RS.add()
               ?};
               _tab.next()
            !}
         ?}
      ?};
      P_WEB_CX.next()
   !}
?};
P_WEB_CX.cntx_pop();
_RS


\get_typy_nieob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Procedura zwraca dostepne typy nieobecnosci z klasa N
::   WE: znacznik czy pobierać wszystkie nieobecnosci, czy tylko domyslny typ (dla rejestracji prostej)
::----------------------------------------------------------------------------------------------------------------------
exec('__RUB','object');
_sql:=''+"
   select
      R.RN,
      R.RT,
      '1234567890' as N_TYP,
      0 as DEF_KOD
   from
      R
   where
      R.RK='N'
   order by
      R.RN
";
_RS:=sql(_sql);

::  okreslenie domyslej rubryki dla rejestrowania prostego nieobecnosci ad-hoc
_nr_rub:=24;
_rubs:=__RUB.sys_rub(1311);
{? _rubs.first()
|| _nr_rub:=_rubs.RN
?};
{? _RS.first()
|| {!
   |? {? _RS.RN=_nr_rub
      || _RS.DEF_KOD:=1
      ?};
      _RS.N_TYP:=exec('nieo_typ','grafik',_RS.RN);
      _RS.put();
      _RS.next()
   !}
?};
_RS


\role
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Pobiera role zalogowanego pracownika
::   WE:
::   WY: [DICT] - tabela z rolami
::----------------------------------------------------------------------------------------------------------------------
_user:=OPERATOR.USER;
_sSource:=exec('source4ses_get','prc_ws');

_role:=obj_new('tab','add');

_role.tab:=tab_tmp(,
:: nazwa roli
   'ROLA','STRING[12]',,
:: nazwa roli w webTermie
   'WEB','STRING[20]',,
:: czy rola aktywna
   'AKT','INTEGER',
);

_role.add:="
   _user:=_a;
   _act_uid:=_b;
   _web_uid:=_c;
   .tab.blank(1);
   .tab.ROLA:=_act_uid;
   .tab.WEB:=_web_uid;
   .tab.AKT:=exec('chk_role','#b__box',_user,_act_uid);
   .tab.add()
";

{? _sSource='P'
||
:: Redagowanie kalendarzy pracowników podwładnych
   _role.add(_user,'PRC_POR_PEKP','plan_rola_pcp_ekp');
:: Redagowanie własnego kalendarza
   _role.add(_user,'PRC_POR_PEKW','plan_rola_pcp_ekw');
:: Podgląd kalendarza pracowników podwładnych
   _role.add(_user,'PRC_POR_PPKP','plan_rola_pcp_pkp');
:: Podgląd własnego kalendarza
   _role.add(_user,'PRC_POR_PPKW','plan_rola_pcp_pkw');
:: Zatwierdzanie kalendarzy pracowników podwładnych
   _role.add(_user,'PRC_POR_PZKP','plan_rola_pcp_zkp');
:: Zatwierdzanie własnego kalendarza
   _role.add(_user,'PRC_POR_PZKW','plan_rola_pcp_zkw');
::   poniższe role potrzebne są do ustawienia dostępu do części akcji w planowaniu
::Redagowanie grafików pracowników podwładnych
   _role.add(_user,'PRC_POR_GEKP','graf_rola_g_ekp');
::Redagowanie własnego grafiku
   _role.add(_user,'PRC_POR_GEKW','graf_rola_g_ekw')
|? _sSource='G'
||
::Redagowanie grafików pracowników podwładnych
   _role.add(_user,'PRC_POR_GEKP','graf_rola_g_ekp');
::Redagowanie własnego grafiku
   _role.add(_user,'PRC_POR_GEKW','graf_rola_g_ekw');
::Podgląd grafików pracowników podwładnych
   _role.add(_user,'PRC_POR_GPKP','graf_rola_g_pkp');
::Podgląd własnego grafiku
   _role.add(_user,'PRC_POR_GPKW','graf_rola_g_pkw');
::Zatwierdzanie wykonanie pracowników podwładnych
   _role.add(_user,'PRC_POR_GZKP','graf_rola_g_zkp');
::Zatwierdzanie własnego wykonania
   _role.add(_user,'PRC_POR_GZKW','graf_rola_g_zkw')
?};

:: zwracamy tabelę
_role.tab


\get_nadgodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Procedura zwracajaca informacje o nadgodzinach pracownika w podanym roku
::   WE: _a [OBJECT] - paczka z danymi
::   WY: tabela z nadgodzinami
::  OLD: \get_nadgodz/graf_kal.prc
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

:: parametry przekazywane w paczce
_sPrac:='';
_sRok:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|!
   {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? _param[1]='ROK'
      || _sRok:=_param[2]
      ?}
   ?}
!};

_sql:=''+"
   select
   '1234567890123456' as P_SQL,
   '1234567890123456' as GODZ
   from
        syslog
   where
        2=1
";
_RS:=sql(_sql);

_rok:=#_sRok;
_data_od:=date(_rok,1,1);
_data_do:=date(_rok,12,0);
_kod:=exec('kod_zaleznosci','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('p_web_cx_set_prefix','p_web',_kod,'SETID',_sSource);
{? P_WEB_CX.first()
|| _dalej:=1;
   {!
   |? {? _sPrac='all' | _sPrac=$P_WEB_CX.P
      || {? _sPrac<>'all' || _dalej:=0 ?};
         _RS.P_SQL:=$P_WEB_CX.P;
         _RS.GODZ:='Brak informacji';
         _godz:=exec('godzWOkresie','prc_plan',P_WEB_CX.P,_data_od,_data_do,0,',55,56,63,66,7011,-ODP,');
         {? _godz<>-1
         || _godz:=_godz$2;
            _RS.GODZ:=form(_godz,,,' .')
         ?};
         _RS.add()
      ?};
      _dalej & P_WEB_CX.next()
   !}
?};
_RS


\zapisz_paczke_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Zapisuje paczkę danych do rejestru we/wy
::   WE: _a [OBJECT] - paczka z danymi
::      [_b] [INTEGER] - co zwracać 'wynik' - wynik 0/1 czy udało się przetworzyć wszystkie przekazane w paczce eventy
::                                  'prac' - (domyślnie) ref pracownika z przetworzonej paczki
::   WY: 0/1 lub ref pracownika
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(0) ?};
    _co:={? var_pres('_b')=type_of('') || _b || 'prac'    ?};

exec('__KAL','object');
_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';
_osoba_ref:=OPERATOR.USER().OSOBA;
_ok:=0;
_events:=0;
_data_od:=date(9999,0,0);
_data_do:=date(0,0,0);

:: parametry przekazywane w paczce
_sPrac:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'
      || _sPrac:=_param[2]
      |? 3+_param[1]='PAR'
      || {? var_pres('_oResult')>100 || obj_del(_oResult) ?};
         _oResult:=exec('zapisz_parametr_wewy','prc_dane',_sPrac,_osoba_ref,_param[2]);
         _ok+=_oResult.ok;
         _events+=_oResult.events;
         {? (_oResult.data_od<>#0) & (_oResult.data_od<_data_od)
         || _data_od:=_oResult.data_od
         ?};
         {? _oResult.data_do>_data_do
         || _data_do:=_oResult.data_do
         ?};
         {? +_oResult.text
         || {? _webTerm
            || web_ctrl_call(_ctrl_id,,'addError','ERROR'+$_ind,_oResult.text)
            ?}
         ?}
      ?}
   ?}
!};

:: jezeli poprawnie zapisano wszystkie dni w otwartych miesiacach to wykonaj wstepna kwalifikacje
{? _ok>0 & (_ok=_events)
|| _p_ref:=exec('FindAndGet','#table',P,_sPrac,,,null());
   {? _okr_ref:=exec('find_okr','grafik',_p_ref,_data_od,'okr')
   || A_OKR.cntx_psh();
      A_OKR.prefix();
      {? A_OKR.seek(_okr_ref)
      || __HARM.ustaw_okres();
         {? exec('ponow_kwal_wewy','grafik',_p_ref,_data_od,_data_do,_osoba_ref)
         || A_OKRP.cntx_psh();
            A_OKRP.index('A_OKPP');
            A_OKRP.prefix(_okr_ref,_p_ref);
            {? A_OKRP.first()
            || exec('oblicz','okres',1)
            ?};
            A_OKRP.cntx_pop();
            _nadm:=exec('nadmiar','grafik',_p_ref,_okr_ref);
            _godz:=time(0,0,0);
            {? _nadm.first()
            || {!
               |? _godz+=_nadm.G;
                  _nadm.next()
               !}
            ?};
            _komm:='NADM;' + $_p_ref + ';' + $_okr_ref + ';'+ _godz$3;
            {? +_komm & _webTerm
            || web_ctrl_call(_ctrl_id,,'zapiszEventWeWySuccess',_komm)
            ?}
         ?}
      ?};
      A_OKR.cntx_pop()
   ?}
?};
{? _co='prac'
|| _sPrac
|| _ok>0 & (_ok=_events)

?}


\zapisz_parametr_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Zapisuje parametr paczki zawierający informacje o zmodyfikowanych dniach
::   WE: _a [STRING] - ref pracownika w postaci napisowej
::       _b [STRING] - ref osoby
::       _c [STRING] - parametr z danymi
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_oResult:=obj_new('ok','events','text','data_od','data_do');
_oResult.text:='Błędny typ parametru wejściowego funkcji.';
    _sPrac:={? var_pres('_a')=type_of('')     || _a || return(_oResult) ?};
_osoba_ref:={? var_pres('_b')=type_of(null()) || _b || return(_oResult) ?};
     _sPar:={? var_pres('_c')=type_of('')     || _c || return(_oResult) ?};
_oResult.text:='';

_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

_STR1:=obj_new(@.CLASS.STRING);
_STR2:=obj_new(@.CLASS.STRING);

_nrPar:=0;
_ok:=0;
_events:=0;
_first:=1;
_okr_ref:=null();
_data_od:=date(0,0,0);
_data_do:=date(0,0,0);
_msc_satus:='';
_msc_plan:='';
_msc:=0;
_jestKOMM:=var_pres('KOMM')>100;
_przerwy:=exec('isEnabled','prc_przerwy');

OSOBA.cntx_psh();
P.cntx_psh();
P.prefix();
{? P.seek(_sPrac)
|| _p_ref:=P.ref();
   _nazw_imie:=P.OSOBA().NAZWISKO + ' ' + P.OSOBA().PIERWSZE;
   _STR1.split(_sPar,'@');
   {? _STR1.next()
   || {!
      |? _ev:=_STR1.get_word();
         _STR2.split(_ev,';');
         {? _STR2.next()
         || _data_we:=exec('str2date','#convert',_STR2.get_word());
            _data_id:=_data_we;
            _przes:=#_STR2.get_word();
            _godz_we:=exec('str2time','#convert',_STR2.get_word());
            _godz_wy:=exec('str2time','#convert',_STR2.get_word());
            _godz_odb:=exec('str2time','#convert',_STR2.get_word());
            _typ_odb:=_STR2.get_word();
            _p_data:=#0;
            _p_start:=_p_czas:=*0;
            {? _przerwy
            || _ile_dni:=#_STR2.get_word();
               _p_data:=_data_id + _ile_dni;
               _p_start:=exec('str2time','#convert',_STR2.get_word());
               _p_czas:=exec('str2time','#convert',_STR2.get_word())
            ?};
::             sprawdzenie czy nie nastapilo rozpoczecie pracy w nastepnej dobie
            {? _typ_odb='X'
            || _data_we:=_data_we+1
            ?};
            _data_wy:=_data_we + _przes;
            {? _first
            || _data_od:=_data_we;
               {? _typ_odb='X' || _data_od-=1 ?};
               _data_do:=_data_wy;
               _first:=0
            ?};
            {? _data_we<_data_od
            || _data_od:=_data_we
            ?};
            {? _data_wy>_data_do
            || _data_do:=_data_wy
            ?};

::          zamiana godziny wyjscia z dnia nastepnego z 00:00 na dzien poprzedni na 24:00
            {? (_data_wy>_data_we) & (_godz_wy=time(0,0,0))
            || _data_wy-=1;
               _godz_wy:=time(24,0,0)
            ?};

::          sprawdzenie czy miesiac jest otwarty do rozliczenia i planowania
            {? _msc<>_data_we~2
            || _msc_satus:=exec('get_msc_status','grafik',_data_id);
               _msc_plan:=exec('getMscPlanStat','okres',_data_id~1,_data_id~2);
               _msc:=_data_id~2
            ?};
            _rodz:=_text:=_komm:='';
            _id:=$_p_ref + ';' + exec('date4id','prc_graf',_data_id) + ';';
            _id_g:=_id + 'g';
            _id_w:=_id + 'w';

            {? _msc_plan='O'
            || _rodz:='MSC_PLAN_%1_%2'[$(_data_id~1),$(_data_id~2)];
               _text:='Nie można zatwierdzić wykonania dla miesiąca: %1. '
                      'Planowanie w wybranym miesiącu nie jest jeszcze zakończone.'@[_data_id$8]
            || {? _msc_satus='O' & exec('getPlanStat4Pr','grafik',_p_ref,_data_id)<>'X'
               ||
::                sprawdzenie czy nie ma blokady przed ponowną kwalifikacją na dniu
                  {? exec('isBlokada','prc_rozlicz',_p_ref,_data_id)>0
                  || _rodz:='BLOKADA_%1'[$_data_id];
                     _text:='W dniu: %1 %2 ma założoną blokadę kwalifikacji.'@[$_data_id,_nazw_imie]
                  |? exec('wyk_D_rozl','prc_graf',_p_ref,_data_id)
                     & (~exec('usun_wewy','prc_wewy',_p_ref,(_data_id-1)~1,(_data_id-1)~2,5,(_data_id-1)))
                  || _rodz:='MSC_ZAMK_%1_%2'[$(_data_id~1),$(_data_id~2)];
                     _text:='Nie można zatwierdzić wykonania dla miesiąca: %1. '
                            'Rozliczenie w wybranym miesiącu zostało zamknięte.'@[_data_id$8]
                  || exec('mod_kal_rodz','grafik',_p_ref,_data_we-1,'G');
                     exec('mod_kal_rodz','grafik',_p_ref,_data_we,'G');
                     {? _data_wy<>_data_we
                     || exec('mod_kal_rodz','grafik',_p_ref,_data_wy,'G')
                     ?};
                     _wyn:=exec('save2wewy','prc_wewy',
                        _p_ref,_data_we,_godz_we,_data_wy,_godz_wy,_godz_odb,_typ_odb,_osoba_ref,,
                        _p_data,_p_start,_p_czas
                     );
                     _ok+=_wyn;
                     _events+=1;
                     {? _wyn
                     || _okr_ref:=exec('find_okr','grafik',_p_ref,_data_id,'okr');
                        {? _okr_ref
                        || {? exec('ustaw_status','prc_graf',_p_ref,_data_id,'Z',_okr_ref)
                           || _komm:='OK;' + _id_g;
                              {? _webTerm
                              || web_ctrl_call(_ctrl_id,,'zapiszEventWeWySuccess',_komm); _komm:=''
                              ?}
                           ?};
                           {? var_pres('_wewy')>100 || obj_del(_wewy) ?};
                           _wewy:=exec('get_wewy','prc_wewy',_data_id,_p_ref);
                           {? _wewy.first()
                           || _komm:='CZAS_OD_DO;' + _id_w +';'+
                                     exec('date4id','prc_graf',_wewy.DWE)+';'+$_wewy.GWE+';'+
                                     exec('date4id','prc_graf',_wewy.DWY)+';'+$_wewy.GWY;
                              {? _webTerm
                              || web_ctrl_call(_ctrl_id,,'zapiszEventWeWySuccess',_komm); _komm:=''
                              ?}
                           ?};
::                         pobranie informacji o czasie wolnym
                           _wnioski:=exec('get_r_odn_czas','prc_graf',_p_ref,_data_id,,'G',,'W');
                           {? +(_wnioski)>0
                           || _komm:='CZAS_WOLNY;' + _id_w +';'+ _wnioski;
                              {? _webTerm
                              || web_ctrl_call(_ctrl_id,,'zapiszEventWeWySuccess',_komm); _komm:=''
                              ?}
                           ?};
                           exec('del_plan','grafik',_p_ref,_data_id, _data_id,'w',_okr_ref);
                           _komm:='OK;' + _id_w;
                           {? _webTerm
                           || web_ctrl_call(_ctrl_id,,'zapiszEventWeWySuccess',_komm); _komm:=''
                           ?}
                        ?}
                     || _rodz:='ERROR_'+$(_data_id)+'_'+_nazw_imie;
                        _text:='Błąd podczas zapisu do bazy danych: %1 - %2'@[_nazw_imie,$_data_id]
                     ?}
                  ?}
               || _rodz:='MSC_ZAMK_%1_%2'[$(_data_id~1),$(_data_id~2)];
                  _text:='Nie można zatwierdzić wykonania dla miesiąca: %1. '
                         'Rozliczenie w wybranym miesiącu zostało zamknięte.'@[_data_id$8]
               ?}
            ?};
            {? +_komm & _webTerm
            || web_ctrl_call(_ctrl_id,,'zapiszEventWeWySuccess',_komm)
            ?};
            {? _text<>''
            || {? _webTerm
            || web_ctrl_call(_ctrl_id,,'addError',_rodz,_text)
               || {? _jestKOMM & KOMM.find_msg(_text)=0 || KOMM.add(_text) ?}
               ?}
            ?}
         ?};
         _STR1.next()
      !}
   ?}
?};
P.cntx_pop();
OSOBA.cntx_pop();
_oResult.ok:=_ok;
_oResult.events:=_events;
_oResult.data_od:=_data_od;
_oResult.data_do:=_data_do;
_oResult


\wodb_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Dodaje wniosek o odbior godzin
::   WE: _a  [OBJECT] - paczka z danymi
::      [_b] [NUMBER] - czy wycofywać transakcję jeżeli została założona przed wywołaniem funkcji
::   WY: tabela z informacjami o wniosku
::  OLD: \add_wodb/graf_kal.prc
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"select space(240) as WYNIK,space(120) as WEWYST,space(120) as WEWYCL from syslog where 2=1";
_RS:=sql(_sql);
_paczka:={? var_pres('_a')=type_of('') || _a || return(_RS) ?};
  _undo:={? var_pres('_b')=type_of(0)  || _b || 1           ?};

_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_sPrac:=_sOkres:=_sTyp:=_sRok:=_sMsc:=_sData:=_sGodz:=_sAuto:=_sTryb:=_sWodb:=_sPK:=_sPar1:=_sPar2:=_sPar3:=_sPar4:='';
_sEdokum:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'    || _sPrac:=_param[2]
      |? _param[1]='OR_REF'   || _sOkres:=_param[2]
      |? _param[1]='TYP'      || _sTyp:=_param[2]
      |? _param[1]='ROK'      || _sRok:=_param[2]
      |? _param[1]='MSC'      || _sMsc:=_param[2]
      |? _param[1]='DATA'     || _sData:=_param[2]
      |? _param[1]='GODZ'     || _sGodz:=_param[2]
      |? _param[1]='AUTO'     || _sAuto:=_param[2]
      |? _param[1]='TRYB'     || _sTryb:=_param[2]
      |? _param[1]='WODB_REF' || _sWodb:=_param[2]
      |? _param[1]='PK'       || _sPK:=_param[2]
      |? _param[1]='EDOKUM'   || _sEdokum:=_param[2]
      |? _param[1]='PAR1'     || _sPar1:=_param[2]
      |? _param[1]='PAR2'     || _sPar2:=_param[2]
      |? _param[1]='PAR3'     || _sPar3:=_param[2]
      |? _param[1]='PAR4'     || _sPar4:=_param[2]
      ?}
   ?}
!};

_STR1:=obj_new(@.CLASS.STRING);
_STR2:=obj_new(@.CLASS.STRING);
VAR_DEL.delete('par');
par:=obj_new(4);
par[1]:=_sPar1;
par[2]:=_sPar2;
par[3]:=_sPar3;
par[4]:=_sPar4;
_nrPar:=0;
_por:=exec('lic','#b_domain','POR');

_data:=exec('str2date','#convert',_sData);
_godz:=exec('str2time','#convert',_sGodz);
_rok:=#_sRok;
_msc:=#_sMsc;
_p_ref:=null();
_okr_ref:=null();
_okrp_ref:=null();
_text:='';

{? _rok>0 & _msc>0
|| MASK.Use('R_KWGODZ',_rok,_msc);
   MASK.Use('R_PRACDN',_rok,_msc)
?};

_ok:=0;
_g_plan:=time(0,0,0);
P.cntx_psh();
P.prefix();
{? P.seek(_sPrac)
|| _p_ref:=P.ref();
   __KAL.set_cal(P.KAL);
   {? __KAL.get_day(_data)
   || _g_plan:=KAL_DEF.CZAS
   ?}
?};

:: sprawdzenie czy wnioskowana liczba godzin odbioru nie przekracza zaplanowanego czasu pracy
{? _godz>_g_plan || _godz:=_g_plan ?};
_g_prac:=_g_plan;
:: odjęcie godzin wniosku o czas wolny
_g_rodn:=exec('get_r_odn_czas','prc_graf',_p_ref,_data);
{? _g_rodn>0
|| _g_prac:=_g_plan-(*(_g_rodn/(60*1000)));
   {? _godz>_g_prac || _godz:=_g_prac-_godz ?}
?};

A_OKR.cntx_psh();
A_OKR.prefix();
{? exec('isRef_A_OKR','prc_dane',_sOkres) & A_OKR.seek(_sOkres)
|| _okr_ref:=A_OKR.ref();
   __HARM.ustaw_okres()
?};

A_OKRP.cntx_psh();
{? _okr_ref<>null()
|| A_OKRP.index('A_OKPP');
   A_OKRP.prefix(_okr_ref,_p_ref);
   {? A_OKRP.first() || _okrp_ref:=A_OKRP.ref() ?}
?};

:: sprawdzenie czy miesiac jest otwarty do rozliczenia
_mscStat:=exec('get_msc_status','grafik',_data);
{? _mscStat='Z'
|| _rodz:='MSC_%1_%2'[$(_data~2),$(_data~1)];
   _text:='Miesiąc %1 jest zamknięty.'@[(_data$8)]+' '+
         'Nie %1 odbioru nadgodzin.'@[{? _sTryb='add' || 'dodano' |? _sTryb='mod' || 'zmodyfikowano' || '' ?}]
|? (*_g_plan=0)
|| _rodz:='DAY_%1'[$_data];
   _text:='Brak zaplanowanego czasu pracy w wybranym dniu.'@;
   {? _sTryb='add'
   || _text+=' Nie dodano wniosku o odbiór.'@
   |? _sTryb='mod'
   || _text+=' Nie zmodyfikowano wniosku o odbiór.'@
   ?}
|? (*_godz<=0) & (*_g_prac>0) & (_g_rodn>0)
|| _rodz:='DAY_%1'[$_data];
   _text:='Liczba wnioskowanych godzin odbioru przekracza liczbę planowanych godzin pracy w tym dniu.'@
|| {? _p_ref & _okr_ref & _okrp_ref
   || _mod_pk:=0;
      _old_do:=#0;
      _edokum:=exec('FindAndGet','#table',EDOKUM,_sEdokum,,,null);
      R_WO.cntx_psh();
      R_WO.index('PORM');
      R_WO.prefix();
      _mydo:=do_state()=0;
::    jeżeli teraz będę zakładał transakcję to zawsze undo jest dostępne
      _undo:=(_mydo | ~_mydo & _undo);
      {? _mydo || do() ?};
      {? _sTryb='add'
      || R_WO.blank(1);
         R_WO.P:=_p_ref;
         R_WO.A_OKR:=_okr_ref;
         R_WO.W:=_sTyp;
         R_WO.A:='W';
         R_WO.AUTO:=_sAuto;
         R_WO.PO:=_sPK;
         R_WO.DO:=_data;
         R_WO.G:=_godz;
         R_WO.M:=_msc;
         R_WO.R:=_rok;
         R_WO.EDOKUM:=_edokum;
         _ok:=R_WO.add(1);
         {? _ok
         || _mod_pk:=exec('r_wo_set_po','prc_rozlicz',R_WO.P,R_WO.A_OKR,R_WO.DO,R_WO.PO) &
                     exec('r_wo_exist','prc_rozlicz',R_WO.ref(),R_WO.P,R_WO.A_OKR,_data)
         ?}
      |? _sTryb='mod'
      || R_WO.prefix();
         {? R_WO.seek(_sWodb)
         || _old_do:=R_WO.DO;
            R_WO.W:=_sTyp;
            R_WO.AUTO:=_sAuto;
            R_WO.PO:=_sPK;
            R_WO.DO:=_data;
            R_WO.G:=_godz;
            {? _ok:=R_WO.put(1)
            || _mod_pk:=exec('r_wo_set_po','prc_rozlicz',R_WO.P,R_WO.A_OKR,R_WO.DO,R_WO.PO) &
                        exec('r_wo_exist','prc_rozlicz',R_WO.ref(),R_WO.P,R_WO.A_OKR,_data);
               R_WYK.cntx_psh();
               R_WYK.index('R_WYKWO');
               R_WYK.prefix(R_WO.ref());
               {? R_WYK.first()
               || {!
                  |? exec('add_wymiar_67','prc_rozlicz',R_WO.DO);
                     R_WYK.DO:=_data;
                     R_WYK.put();
                     R_WYK.next()
                  !}
               ?};
               R_WYK.cntx_pop()
            ?}
         ?}
      ?};
      {? _ok
      || R_WYK.cntx_psh();
         R_WYK.index('R_WYKWO');
         R_WYK.prefix(R_WO.ref());
::       sprawdzenie czy można usunąć wniosek - ustawiony kontekst na R_WO
         _can_del:=exec('spr_del','prc_rozlicz',0);
         {? (_sTryb='mod') & _can_del
         || {? R_WYK.first()
            || _wewy_cl:='';
               {!
               |? _wewy_cl+=$R_WYK.DN + ';';
                  _odb:=exec('spr_odb','grafik',_p_ref,R_WYK.DN+1);
                  {? _odb.jestOdb
                  || _wewy_cl+=$(R_WYK.DN+1) + ';'
                  ?};
                  obj_del(_odb);
                  R_WYK.next()
               !};
               _RS.WEWYCL:=_wewy_cl
            ?};
            exec('del_odbior','prc_rozlicz')
         ?};
         {? (_sAuto='T') & _can_del
         || exec('r_wo_wer_afo','prc_rozlicz');
            R_WO.get();
            R_WYK.index('R_WYKWO');
            R_WYK.prefix(R_WO.ref());
            _g_added:={? R_WYK.first() || _g:=time(0,0,0); {! |? _g+=R_WYK.GO; R_WYK.next() !}; _g || time(0,0,0) ?};
            {? _g_added<>R_WO.G
            || {? _undo || undo() ?};
               {? _g_added = time(0,0,0)
               || _RS.WYNIK:='Nie znaleziono nadgodzin do odbioru.'@
               || _RS.WYNIK:='Brak wystarczającej liczby nadgodzin. Zmniejsz wnioskowaną liczbę godzin odbioru do '@ +
                  $_g_added + ' godzin.'@
               ?}
            ||
               {? R_WYK.first()
               || _g_inDay:=exec('get_wodb_czas','prc_graf',_p_ref,_okr_ref,_data);
                  _odb_data:=exec('get_wodb_data','prc_graf',_p_ref,_okr_ref,_data);
                  {? _odb_data<>date(0,0,0)
                  || _odb_data:=exec('date4id','prc_graf',_odb_data)
                  || _odb_data:=''
                  ?};
                  _wewy_st:='';
                  {! |?
                     _wewy_st+=$R_WYK.DN + ';';
                     _odb:=exec('spr_odb','grafik',_p_ref,R_WYK.DN+1);
                     {? _odb.jestOdb
                     || _wewy_st+=$(R_WYK.DN+1) + ';'
                     ?};
                     obj_del(_odb);
                     R_WYK.next()
                  !};
                  _RS.WYNIK:='OK;' + $_p_ref + ';'
                           + exec('date4id','prc_graf',_data) + ';'
                           + $R_WO.ref() + ';'
                           + $_g_inDay + ';'
                           + _odb_data + ';'
                           + {? _mod_pk
                             || 'Zmieniono sposób prezentacji odbioru dla wszystkich wniosków w wybranym dniu.'@
                             || ''
                             ?};
                  _RS.WEWYST:=_wewy_st
               || {? _undo || undo() ?};
                  _RS.WYNIK:='Nie znaleziono nadgodzin do odbioru.'@
               ?}
            ?}
         |? _can_del
         ||
            R.cntx_psh();
            R.index('RUBKOD');
            R.prefix();
            KK.cntx_psh();
            KK.index('KONTASYM');
            KK.prefix();
            _tab:=exec('nadmiar','grafik',_p_ref,_okr_ref);

            _r_wo_g:=R_WO.G;
            _wyn:=1;
            {!
            |? _nrPar+=1;
               _STR1.split(($('par['+$_nrPar+']'))(),'@');
               {? _STR1.next()
               || {!
                  |? _nadmiar:=_STR1.get_word();
                     _STR2.split(_nadmiar,';');
                     {? _STR2.next()
                     || _data_n:=exec('str2date','#convert',_STR2.get_word());
                        _godz:=exec('str2time','#convert',_STR2.get_word());
                        _godz_o:=exec('str2time','#convert',_STR2.get_word());
                        _nr_rub_s:=_STR2.get_word();
                        _portalHR:=_nr_rub_s=exec('overtime_code','portal_lib');
                        _nr_rub:={? _por & _portalHR || 0 || #_nr_rub_s ?};
                        {? _tab.first()
                        || {!
                           |? {? (_tab.DT=_data_n) & {? _por & ~_nr_rub || 1 || (_tab.RN=_nr_rub) ?}
                              || R_WYK.blank(1);
                                 R_WYK.P:=_p_ref;
                                 R_WYK.R_WO:=R_WO.ref();
                                 R_WYK.W:=R_WO.W;
                                 R_WYK.DO:=R_WO.DO;
                                 R_WYK.DN:=_tab.DT;
                                 {? R.find_key(_tab.RN)
                                 || R_WYK.R:=R.ref()
                                 ?};
                                 {? KK.seek(BIT.sqlint(_tab.REF_K),)
                                 || R_WYK.KK:=KK.ref()
                                 ?};
                                 {? R_WO.W='S' | R_WO.W='W'
                                 || R_WYK.G:=_tab.G
                                 ?};
::                               dla wniosków z Portalu HR przeliczamy godziny odbioru,
::                               algorytm jest inny niż w pozostałych miejscach wykorzystania tej formuły
                                 {? _portalHR
                                 || _godz_o:=*0;
                                    {? ( R_WO.W='S' | R_WO.W='W')
                                    || {? _r_wo_g>*0 & R_WO.W=_tab.TYP
                                       || _godz_o:=R_WO.G;
                                          _r_wo_g-=_godz_o
                                       ?}
                                    |? _tab.DT<=R_WO.DO
                                    || _godz_o:=*(*_tab.G*{? R_WO.W='F' || 1.5 || 1 ?});
::                                     odbieramy tylko do wysokości wnioskowanych godzin
                                       _godz_o:={? _godz_o>_r_wo_g || _r_wo_g || _godz_o ?};
::                                     zdejmujemy odebrane godziny z puli wnioskowanych godzin
                                       _r_wo_g-=_godz_o;
::                                     wpisujemy liczbę nadgodzin jaka przypada na odebrane godziny
                                       R_WYK.G:=*(*_godz_o/{? R_WO.W='F' || 1.5 || 1 ?})
                                    ?}
                                 || R_WYK.G:={? _godz>_godz_o || _godz_o || _godz ?}
                                 ?};
                                 R_WYK.GO:=_godz_o;
                                 {? _godz_o>*0 || R_WYK.add(1) ?}
                              ?};
                              _tab.next()
                           !}
                        ?}
                     ?};
                     _STR1.next()
                  !}
               ?};
               _nrPar < 4
            !};
            R_WO.get();
            R_WYK.index('R_WYKWO');
            R_WYK.prefix(R_WO.ref());
            _g_added:={? R_WYK.first() || _g:=time(0,0,0); {! |? _g+=R_WYK.GO; R_WYK.next() !}; _g || time(0,0,0) ?};
            _ok:=1;
            {? _g_added<>R_WO.G
            || _ok:=0;
               {? _undo || undo() ?};
               {? _g_added=time(0,0,0)
               || _RS.WYNIK:='Nie znaleziono nadgodzin do odbioru.'@
               || _RS.WYNIK:='Brak wystarczającej liczby nadgodzin. Zmniejsz wnioskowaną liczbę godzin odbioru do '@ +
                  $_g_added + ' godzin.'@
               ?}
            ?};
            {? _ok & R_WYK.first()
            || exec('add_wymiar_67','prc_rozlicz',R_WO.DO);
               _g_inDay:=exec('get_wodb_czas','prc_graf',_p_ref,_okr_ref,R_WO.DO);
               _odb_data:=exec('get_wodb_data','prc_graf',_p_ref,_okr_ref,_data);
               {? _odb_data<>date(0,0,0)
               || _odb_data:=exec('date4id','prc_graf',_odb_data)
               || _odb_data:=''
               ?};
               _wewy_st:='';
               {!
               |? _wewy_st+=$R_WYK.DN + ';';
                  _odb:=exec('spr_odb','grafik',_p_ref,R_WYK.DN+1);
                  {? _odb.jestOdb
                  || _wewy_st+=$(R_WYK.DN+1) + ';'
                  ?};
                  obj_del(_odb);
                  R_WYK.next()
               !};
               _RS.WYNIK:='OK;' + $_p_ref + ';'
                           + exec('date4id','prc_graf',R_WO.DO) + ';'
                           + $R_WO.ref() + ';'
                           + $_g_inDay + ';'
                           + _odb_data + ';'
                           + {?_mod_pk
                             || 'Zmieniono sposób prezentacji odbioru dla wszystkich wniosków w wybranym dniu.'@
                             || ''
                             ?};
               _RS.WEWYST:=_wewy_st
            |? _ok
            || {? _undo || undo() ?};
               _RS.WYNIK:='Nie znaleziono nadgodzin do odbioru.'@
            ?};
            KK.cntx_pop();
            R.cntx_pop()
         |? _ok
         || _RS.WYNIK:='OK;' + $_p_ref + ';'+ exec('date4id','prc_graf',R_WO.DO) + ';' + $R_WO.ref() + ';;;'
                       + {? _mod_pk
                         || 'Zmieniono sposób prezentacji odbioru dla wszystkich wniosków w wybranym dniu.'@
                         || ''
                         ?}
         ?};
         R_WYK.cntx_pop()
      || {? _undo || undo() ?};
         _RS.WYNIK:='Błąd podczas zapisu do bazy danych.'@
      ?};
::    dla odbiorów na cały dzień ustawiamy grafik zgodnie z planem
      {? (_sTyp='S' | _sTyp='W') & (2+_RS.WYNIK='OK') & exec('copy_buff_day','prc_plan',_p_ref,_data,'P','G')
      || exec('ustaw_status','prc_graf',_p_ref,_data,'Z',_okr_ref)
      || exec('ustaw_status','prc_graf',_p_ref,_data,'',_okr_ref)
      ?};
      {? {? _mydo || end() || 1 ?}
      ||
::        dla odbiorów korzystamy z samego 'kwal' a nie 'ponow_kwal_wewy'
         {? _old_do<>#0
         || exec('kwal','grafik',_p_ref, _old_do, _old_do)
         ?};
         exec('kwal','grafik',_p_ref, R_WO.DO, R_WO.DO)
      || {? _RS.WYNIK=''
         || _RS.WYNIK:='Błąd w transakcji. Nie dodano wniosku o odbiór nadgodzin.'@
         ?}
      ?};
      _RS.add();
      R_WO.cntx_pop()
   ?}
?};
{? _text<>''
|| {? _webTerm & _ctrl_id<>''
   || web_ctrl_call(_ctrl_id,,'addError',_rodz,_text)
   || {? _RS.first()
      || _RS.WYNIK+='\n%1'[_text];
         _RS.put()
      || _RS.WYNIK:=_text;
         _RS.add()
      ?}
   ?}
?};
:: usuwam zmienną globalna
VAR_DEL.delete('par');
A_OKRP.cntx_pop();
A_OKR.cntx_pop();
P.cntx_pop();
_RS


\wodb_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Pobiera wniosek o odbior godzin
::   WE: _a [OBJECT] - paczka z danymi
::   WY: tabela z informacjami o wniosku
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

:: parametry przekazywane w paczce
_sWniosek:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='WODB_REF' || _sWniosek:=_param[2] ?}
   ?}
!};

_sql:=''+"
   select
   R_WO.REFERENCE as REF, R_WO.M, R_WO.R, R_WO.A, R_WO.AUTO, R_WO.A_OKR, R_WO.DO, R_WO.G, R_WO.P, R_WO.PO, R_WO.W,
   'N' as S
   from
      R_WO
   where
      R_WO.REFERENCE=':_a'
";
_RS:=sql(_sql,_sWniosek);

{? _RS.first()
|| _status:='';
   R_WO.cntx_psh();
   R_WO.prefix();
   {? R_WO.seek(_RS.REF)
   || _mscStat:=exec('get_msc_status','grafik',R_WO.DO);
      {? _mscStat='Z'
      || _status=_mscStat
      || R_WYK.cntx_psh();
         R_WYK.index('R_WYKWO');
         R_WYK.prefix(R_WO.ref());
::       sprawdzenie czy można usunąć wniosek - ustawiony kontekst na R_WO
         _can_del:=exec('spr_del','prc_rozlicz',0);
         _status:={? _can_del || 'O' || 'Z' ?};
         R_WYK.cntx_pop()
      ?}
   ?};
   R_WO.cntx_pop();
   _RS.S:=_status;
   _RS.put()
?};
_RS


\rwyk_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Pobiera szczegóły dla wniosku o odbiór godzin
::   WE: _a [OBJECT] - paczka z danymi
::   WY: tabela z informacjami o odbiorach nadgodzin
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

:: parametry przekazywane w paczce
_sWniosek:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='WODB_REF' || _sWniosek:=_param[2] ?}
   ?}
!};

_sql:=''+"
   select
   R_WYK.P, R_WYK.DO, R_WYK.DN, R_WYK.G, R_WYK.GO, R_WYK.R_WO, R_WYK.W, R.RN, R.RT, R_WYK.REFERENCE as REF
   from
        R_WYK join R using (R_WYK.R, R.REFERENCE)
   where
        R_WYK.R_WO=':_a'
";
sql(_sql,_sWniosek)


\wodb_in_day
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Pobiera info o wnioskach o odbior godzin w danym dniu
::   WE: _a [OBJECT] - paczka z danymi
::   WY: tabela z informacjami o wniosksch we wskazanym dniu
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

:: parametry przekazywane w paczce
_sPrac:=_sData:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'    || _sPrac:=_param[2]
      |? _param[1]='DATA'     || _sData:=_param[2]
      ?}
   ?}
!};

_sql:=''+"
  select
      R_WO.P, R_WO.A_OKR, R_WO.R, R_WO.M, R_WO.DO, R_WO.A, R_WO.W, R_WO.AUTO, CAST(R_WO.G AS STRING_TYPE) as G,
      R_WO.REFERENCE as REF, A_OKRM.S
  from
      R_WO, A_OKRM
  where
      R_WO.P=':_a' and R_WO.DO=to_date(':_b') and
      A_OKRM.R=CAST( SUBSTR(':_b',0,4) AS INTEGER_TYPE) and A_OKRM.M=CAST( SUBSTR(':_b',6,2) AS INTEGER_TYPE)
";
sql(_sql,_sPrac,_sData)


\wodb_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Usuwa wniosek o odbior godzin
::   WE: _a - ref wniosku
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"select space(240) as WYNIK, space(120) as WEWYST from syslog where 2=1";
_RS:=sql(_sql);

_paczka:={? var_pres('_a')=type_of('') || _a || return(_RS) ?};
_os_ref:=OPERATOR.USER().OSOBA;

:: parametry przekazywane w paczce
_sWniosek:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='WODB_REF' || _sWniosek:=_param[2] ?}
   ?}
!};

_godz:=time(0,0,0);
_data:=date(0,0,0);
_odb_data:=date(0,0,0);
_p_ref:=null();
_okr_ref:=null();
_wodb_ref:=null();
_can_del:=0;
_ok:=0;

P.cntx_psh();
P.prefix();
R_WO.cntx_psh();
R_WO.prefix();
{? R_WO.seek(_sWniosek)
|| _wodb_ref:=R_WO.ref();
   _okr_ref:=R_WO.A_OKR;
   _data:=R_WO.DO;
   MASK.Use('R_KWGODZ',_data~1,_data~2);
   MASK.Use('R_PRACDN',_data~1,_data~2);
   {? P.seek(R_WO.P) || _p_ref:=P.ref() ?}
?};

{? _p_ref & _wodb_ref
|| _mydo:=do_state()=0;
   {? _mydo || do() ?};
::  sprawdzenie czy miesiac jest otwarty do rozliczenia
   _mscStat:=exec('get_msc_status','grafik',_data);
   {? _mscStat<>'Z'
   || R_WYK.cntx_psh();
      R_WYK.index('R_WYKWO');
      R_WYK.prefix(R_WO.ref());
::    sprawdzenie czy można usunąć wniosek - ustawiony kontekst na R_WO
      _can_del:=exec('spr_del','prc_rozlicz',0);
      {? _can_del
      || {? var_pres('_tab_dni')>100 || obj_del(_tab_dni) ?};
         _tab_dni:=tab_tmp(1,'DATA','DATE','Data');
         {? R_WYK.first()
         || {!
            |? _tab_dni.DATA:=R_WYK.DN;
               _tab_dni.add(1);
               _odb:=exec('spr_odb','grafik',_p_ref,R_WYK.DN+1);
               {? _odb.jestOdb
               || _tab_dni.DATA:=R_WYK.DN+1;
                  _tab_dni.add(1)
               ?};
               obj_del(_odb);
               exec('add_wymiar_67','prc_rozlicz',R_WO.DO);
               R_WYK.del(1)
            !}
         ?};
         _ok:=R_WO.del(1,1)
      ?};
      R_WYK.cntx_pop();
      {? _ok
      || _godz:=exec('get_wodb_czas','prc_graf',_p_ref,_okr_ref,_data);
         _odb_data:=exec('get_wodb_data','prc_graf',_p_ref,_okr_ref,_data);
         _odb_s_data:='';
         {? _odb_data <> date(0,0,0)
         || _odb_s_data:=$(_odb_data~1) + '_' +$(_odb_data~2)+'_'+$(_odb_data~3)
         ?};
         _wewy_st:='';
         {? _tab_dni.first()
         || {!
            |? _wewy_st+=($_tab_dni.DATA) + ';';
               _tab_dni.next()
            !}
         ?};
         _RS.WYNIK:='OK;' + $_p_ref + ';'
                   + exec('date4id','prc_graf',_data) + ';'
                   + $_godz + ';'
                   + _odb_s_data;
         _RS.WEWYST:=_wewy_st;
         exec('ustaw_status','prc_graf',_p_ref,_data,'',_okr_ref)
      || {? _can_del
         || _RS.WYNIK:='Nie udało się usunąć wniosku o odbiór nadgodzin.'@
         || _RS.WYNIK:='Nie można usunąć wniosku o odbiór nadgodzin.'@+' '+
                       'Nadgodziny powiązane z wnioskiem znajdują się w zamkniętym miesiącu rozliczeniowym.'@
         ?};
         undo()
      ?}
   || _RS.WYNIK:='Miesiąc %1 jest rozliczony - nie można usunąć wniosku.'@[date(R_WO.R,R_WO.M,1)$8]
   ?};
   {? {? _mydo || end()  || 1 ?}
   || exec('ponow_kwal_wewy','grafik',_p_ref, _data, _data, _os_ref);
      {? _odb_data <> date(0,0,0)
      || exec('ponow_kwal_wewy','grafik',_p_ref, _odb_s_data, _odb_s_data, _os_ref)
      ?}
   || {? _RS.WYNIK=''
      || _RS.WYNIK:='Błąd w transakcji.'@+' '+'Nie usunięto wniosku o odbiór nadgodzin.'@
      ?}
   ?};
   _RS.add()
?};
R_WO.cntx_pop();
P.cntx_pop();
_RS


\r_odn_in_day
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Pobiera info o wnioskach o czas wolny w danym dniu
::   WE: _a [OBJECT] - paczka z danymi
::   WY: tabela z informacjami o wniosksch we wskazanym dniu
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

:: parametry przekazywane w paczce
_sPrac:=_sData:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'    || _sPrac:=_param[2]
      |? _param[1]='DATA'     || _sData:=_param[2]
      ?}
   ?}
!};

_sql:=''+"
  select
      R_ODN.P, R_ODN.A, R_ODN.DW, R_ODN.TYP, CAST(R_ODN.G AS STRING_TYPE) as G, CAST(R_ODN.GOD AS STRING_TYPE) as GOD,
      CAST(R_ODN.GDO AS STRING_TYPE) as GDO, R_ODN.REFERENCE as REF
  from
      R_ODN
  where
      R_ODN.P=':_a' and R_ODN.DW=to_date(':_b')
";
sql(_sql,_sPrac,_sData)


\r_odn_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Dodaje wniosek o udzielenie czasu wolnego
::   WE: _a [OBJECT] - paczka z danymi
::      [_b] [NUMBER] - czy wycofywać transakcję jeżeli została założona przed wywołaniem funkcji
::   WY: tabela z informacjami o wniosku
::  OLD: \add_r_odn/graf_kal.prc
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
  _undo:={? var_pres('_b')=type_of(0)  || _b || 1           ?};

_ctrl_id:=exec('ctrl_id','prc_dane');
_webTerm:=app_info('web_sesid')<>'';

:: parametry przekazywane w paczce
_sPrac:=_sData:=_sTryb:=_sWodn:=_sGodzOd:=_sGodzDo:=_sPrzCzas:=_sPar1:=_sPar2:=_sPar3:=_sPar4:='';
_sEdokum:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='P_REF'     || _sPrac:=_param[2]
      |? _param[1]='DATA'      || _sData:=_param[2]
      |? _param[1]='TRYB'      || _sTryb:=_param[2]
      |? _param[1]='R_ODN_REF' || _sWodn:=_param[2]
      |? _param[1]='GODZ_OD'   || _sGodzOd:=_param[2]
      |? _param[1]='GODZ_DO'   || _sGodzDo:=_param[2]
      |? _param[1]='PRZ_CZAS'  || _sPrzCzas:=_param[2]
      |? _param[1]='EDOKUM'    || _sEdokum:=_param[2]
      |? _param[1]='PAR1'      || _sPar1:=_param[2]
      |? _param[1]='PAR2'      || _sPar2:=_param[2]
      |? _param[1]='PAR3'      || _sPar3:=_param[2]
      |? _param[1]='PAR4'      || _sPar4:=_param[2]
      ?}
   ?}
!};

_sql:=''+"select space(200) as WYNIK from syslog where 2=1";
_RS:=sql(_sql);

VAR_DEL.delete('par');
_STR1:=obj_new(@.CLASS.STRING);
_STR2:=obj_new(@.CLASS.STRING);
par:=obj_new(4);
par[1]:=_sPar1;
par[2]:=_sPar2;
par[3]:=_sPar3;
par[4]:=_sPar4;
_nrPar:=0;

_data:=exec('str2date','#convert',_sData);
_godz_od:=exec('str2time','#convert',_sGodzOd);
_godz_do:=exec('str2time','#convert',_sGodzDo);
_prz_czas:=exec('str2time','#convert',_sPrzCzas);

:: zamiana godziny wyjscia z dnia nastepnego z 00:00 na dzien poprzedni na 24:00
{? _godz_do=time(0,0,0) || _godz_do:=time(24,0,0) ?};

_godz:=_godz_do-_godz_od-_prz_czas;
_ok:=0;
_g_plan:=time(0,0,0);
_p_ref:=null();
_text:=_rodz:='';

P.cntx_psh();
P.prefix();
{? P.seek(_sPrac)
|| _p_ref:=P.ref();
   __KAL.set_cal(P.KAL);
   {? __KAL.get_day(_data) || _g_plan:=KAL_DEF.CZAS ?}
?};

:: sprawdzenie czy wnioskowana liczba godzin odbioru nie przekracza zaplanowanego czasu pracy
{? _godz>_g_plan || _godz:=_g_plan ?};
R_ODP.cntx_psh();
R_ODP.index('NAG');
R_ODN.cntx_psh();
R_ODN.index('PRAC');
R_ODN.prefix();

_msc_prac:='';
_orp_ref:=exec('find_okr','grafik',_p_ref,_data,'okrp');
{? _orp_ref<>null()
|| _msc_prac:=exec('getStatusM_Plan','okres',_orp_ref,_data~1,_data~2)
?};

:: sprawdzenie czy miesiac jest otwarty do rozliczenia
{? (_sTryb='add') & (exec('get_msc_status','grafik',_data)='Z' & _msc_prac<>'X')
|| _rodz:='MSC_%1_%2'[$(_data~2),$(_data~1)];
   _text:='Miesiąc %1 jest zamknięty.'@[_data$8]+' '+
          'Nie %1 wniosku o udzielenie czasu wolnego.'@
          [{? _sTryb='add' || 'dodano' |? _sTryb='mod' || 'zmodyfikowano' || '' ?}]
|| {? _p_ref
   || {? _godz_do>_godz_od
      || R_ODN.prefix();
         _edokum:=exec('FindAndGet','#table',EDOKUM,_sEdokum,,,null);
         _mydo:=do_state()=0;
::       jeżeli teraz będę zakładał transakcję to zawsze undo jest dostępne
         _undo:=(_mydo | ~_mydo & _undo);
         {? _mydo || do() ?};
         {? _sTryb='add'
         || R_ODN.blank(1);
            R_ODN.P:=_p_ref;
            R_ODN.A:='T';
            R_ODN.DW:=_data;
            R_ODN.GOD:=_godz_od;
            R_ODN.GDO:=_godz_do;
            R_ODN.G:=_godz;
            R_ODN.EDOKUM:=_edokum;
            _ok:=R_ODN.add()

         |? _sTryb='mod'
         || R_ODN.prefix();
            {? R_ODN.seek(_sWodn)
            || _godz_o:=exec('get_r_odn_czas','prc_graf',_p_ref,_data,R_ODN.ref(),'GO');
::             zamieniamy milisec na czas
               _godz_o:=*(_godz_o/(60*1000));
::             sprawdzenie czy przypadkiem nie ma już odpracowanych godzin
               {? _godz_o>_godz
               || _RS.WYNIK:='Istnieją wprowadzone w tabeli godzin przepracowanych, odpracowane godziny.'@+'\n'+
                             'Nie można zmniejszyć liczby wnioskowanych godzin poniżej liczby odpracowanych godzin.'@
               || R_ODN.DW:=_data;
                  R_ODN.GOD:=_godz_od;
                  R_ODN.GDO:=_godz_do;
                  R_ODN.G:=_godz;
                  _ok:=R_ODN.put(1)
               ?}
            || _RS.WYNIK:='Nie znaleziono wniosku.'@
            ?}
         ?};

         {? _ok
         || R_ODP.prefix(R_ODN.ref());
            {? _sTryb='mod'
            || _ok:=1;
::             próba usunięcia odpracowań
               {? R_ODP.first()
               || {!
                  |? _msc_prac:='';
                     _data:=R_ODP.DW;
                     _orp_ref:=exec('find_okr','grafik',_p_ref,_data,'okrp');
                     {? _orp_ref<>null()
                     || _msc_prac:=exec('getStatusM_Plan','okres',_orp_ref,_data~1,_data~2)
                     ?};
                     _msc_status:=exec('get_msc_status','grafik',_data);
                     {? R_ODP.GO>*0 | _msc_status='Z' | _msc_prac='X'
                     || R_ODP.next()
                     || R_ODP.del()
                     ?}
                  !}
               ?}
            ?};
            {? _ok
            || _wyn:=-1;
               _msc_zamk:=0;
               _jestZX:=0;
               {!
               |? _nrPar+=1;
                  _STR1.split(($('par['+$_nrPar+']'))(),'@');
                  {? _STR1.next()
                  || {!
                     |? _nadmiar:=_STR1.get_word();
                        _STR2.split(_nadmiar,';');
                        {? _STR2.next()
                        || _data:=exec('str2date','#convert',_STR2.get_word());
                           _godz:=exec('str2time','#convert',_STR2.get_word());
                           _godz_o:=exec('str2time','#convert',_STR2.get_word());
                           _msc_prac:='';
                           _orp_ref:=exec('find_okr','grafik',_p_ref,_data,'okrp');
                           {? _orp_ref<>null()
                           || _msc_prac:=exec('getStatusM_Plan','okres',_orp_ref,_data~1,_data~2)
                           ?};
                           _msc_status:=exec('get_msc_status','grafik',_data);
                           _msc_zamk:=_msc_status='Z' | _msc_prac='X';
                           _jestZX+=_msc_zamk;
                           {? ~R_ODP.find_key(_data) & ~_msc_zamk
                           || R_ODP.blank(1);
                              R_ODP.P:=_p_ref;
                              R_ODP.R_ODN:=R_ODN.ref();
                              R_ODP.A:='T';
                              R_ODP.DW:=_data;
                              R_ODP.R:=_data~1;
                              R_ODP.M:=_data~2;
                              R_ODP.G:=_godz;
                              R_ODP.GO:=_godz_o;
                              _wyn+=R_ODP.add(1)
                           ?}
                        ?};
                        _STR1.next()
                     !}
                  ?};
                  _nrPar < 4
               !};
::             sprawdzamy poprawność wniosku
               {? _wyn>=0 || _wyn:=exec('oblicz_odprac','prc_rozlicz',R_ODN.ref(),0) ?};
               {? _wyn>0
               || _wnioski:=exec('get_r_odn_czas','prc_graf',_p_ref,R_ODN.DW,,,,'W');
                  _RS.WYNIK:='OK;'+$_p_ref+';'+exec('date4id','prc_graf',R_ODN.DW)+';'+_wnioski+';'
               |? _jestZX
               || {? _undo || undo() ?};
                  _RS.WYNIK:='Nie %1 wniosku o udzielenie czasu wolnego.\n'@
                             [{? _sTryb='add' || 'dodano' || 'zmodyfikowano' ?}]+
                             'Deklarowane odpracowania dotyczą zmkniętych miesięcy.'@
               |? _wyn=-1
               || {? _undo || undo() ?};
                  _RS.WYNIK:='Nie %1 wniosku o udzielenie czasu wolnego.\n'@
                              [{? _sTryb='add' || 'dodano' || 'zmodyfikowano' ?}]+
                             'Należy odświeżyć dane i spróbować ponownie.'@
               || {? _undo || undo() ?};
                  _RS.WYNIK:='Nie wprowadzono poprawnej liczby godzin odpracowania '
                             'do zadeklarowanego we wniosku czasu wolnego.\n'@+
                             'Należy wprowadzić poprawne informacje o odpracowaniu.'@
               ?}
            ?}
         || {? _undo || undo() ?};
            {? _RS.WYNIK=''
            || _RS.WYNIK:='Błąd podczas zapisu do bazy danych.'
            ?}
         ?};
         _do_state:=do_state();
         {? {? _mydo || end() || 1 ?}
         || {? _do_state=1
            || exec('ponow_kwal_wewy','grafik',_p_ref, R_ODN.DW, R_ODN.DW, OPERATOR.USER().OSOBA)
            ?}
         || {? _RS.WYNIK=''
            || _RS.WYNIK:='Błąd w transakcji.'@+' '+'Nie dodano wniosku o czas wolny.'@
            ?}
         ?}
      || _RS.WYNIK:='Godzina zakończenia musi być późniejsza od godziny rozpoczęcia. Nie dodano wniosku o czas wolny.'@
      ?};
      _RS.add()
   ?}
?};
{? _text<>''
|| {? _webTerm & _ctrl_id<>''
   || web_ctrl_call(_ctrl_id,,'addError',_rodz,_text)
   || {? _RS.first()
      || _RS.WYNIK+='\n%1'[_text];
         _RS.put()
      || _RS.WYNIK:=_text;
         _RS.add()
      ?}
   ?}
?};
VAR_DEL.delete('par');
R_ODN.cntx_pop();
R_ODP.cntx_pop();
P.cntx_pop();
_RS


\r_odn_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Pobiera wniosek o udzielenie czasu wolnego
::   WE: _a [OBJECT] - paczka z danymi
::   WY: tabela z informacjami o wniosku
::  OLD: \get_r_odn/graf_kal.prc
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

:: parametry przekazywane w paczce
_sWniosek:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='R_ODN_REF'    || _sWniosek:=_param[2] ?}
   ?}
!};

_sql:=''+
   "select
      ' ' as MS,
      R_ODN.A,
      R_ODN.DW,
      R_ODN.G,
      R_ODN.GOD,
      R_ODN.GDO,
      R_ODN.P,
      R_ODN.TYP,
      R_ODN.ROK,
      R_ODN.MC
   from
      R_ODN
   where
      R_ODN.REFERENCE=':_a'";
_RS:=sql(_sql,_sWniosek);


P.cntx_psh();
P.prefix();
{? _RS.first()
|| {!
   |? {? _RS.GDO=time(24,0,0)
      || _RS.GDO:=time(0,0,0)
      ?};
      _data:=_RS.DW;
      _p_ref:=null();
      _msc_prac:='';
      {? P.seek(_RS.P)
      || _p_ref:=P.ref();
         _orp_ref:=exec('find_okr','grafik',_p_ref,_data,'okrp');
         {? _orp_ref<>null()
         || _msc_prac:=exec('getStatusM_Plan','okres',_orp_ref,_data~1,_data~2)
         ?}
      ?};
      _msc_status:={? _msc_prac='X' || 'Z' || exec('get_msc_status','grafik',_data) ?};
      _RS.MS:=_msc_status;
      _RS.put();
      _RS.next()
   !}
?};
P.cntx_pop();
_RS


\r_odn_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Usuwa wniosek o czas wolny
::   WE: _a [OBJECT] - paczka z danymi
::   WY: tabela z informacjami o wniosku
::  OLD: \del_r_odp/graf_kal.prc
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+" select space(120) as WYNIK from syslog where 2=1";
_RS:=sql(_sql);

_paczka:={? var_pres('_a')=type_of('') || _a || return(_RS) ?};

:: parametry przekazywane w paczce
_sWniosek:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='R_ODN_REF' || _sWniosek:=_param[2] ?}
   ?}
!};

_godz:=time(0,0,0);
_data:=date(0,0,0);
_p_ref:=null();
_w_ref:=null();
_ok:=0;
P.cntx_psh();
P.prefix();

R_ODN.cntx_psh();
R_ODN.prefix();
{? R_ODN.seek(_sWniosek)
|| _w_ref:=R_ODN.ref();
   _data:=R_ODN.DW;
   _p_ref:=R_ODN.P
?};

A_OKRM.cntx_psh();
{? _p_ref & _w_ref
|| A_OKRM.index('A_OKRMR');
   A_OKRM.prefix();

   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   {? A_OKRM.find_key(R_ODN.DW~1,R_ODN.DW~2) & A_OKRM.S<>'Z'
   || _godz_o:=exec('get_r_odn_czas','prc_graf',_p_ref,_data,_w_ref,'GO');
      _ok:={? _godz_o>0
           || _RS.WYNIK:='Istnieją wprowadzone w tabeli godzin przepracowanych, odpracowane godziny.'@+'\n'+
                         'Usunięcie zapisów nie jest możliwe.'@;
              0
           || R_ODP.cntx_psh();
              R_ODP.index('NAG');
              R_ODP.prefix(R_ODN.ref());
              {? R_ODP.first()
              || {! |? R_ODP.del(1) !}
              ?};
              R_ODP.cntx_pop();
              R_ODN.del(1,1)
           ?};

      {? _ok
      || _wnioski:=exec('get_r_odn_czas','prc_graf',_p_ref,_data,,,,'W');
         _RS.WYNIK:='OK;' + $_p_ref + ';' + exec('date4id','prc_graf',_data) + ';' + _wnioski
      || {? _RS.WYNIK=''
         || _RS.WYNIK:='Nie usunięto wniosku o czas wolny.'@
         ?};
         undo()
      ?}

   || _RS.WYNIK:='Miesiąc rozliczony - nie można usunąć wniosku.'@
   ?};
   {? {? _mydo || end() || 1 ?}
   || exec('ponow_kwal_wewy','grafik',_p_ref, _data, _data, OPERATOR.USER().OSOBA)
   || {? _RS.WYNIK=''
      || _RS.WYNIK:='Błąd w transakcji.'@+' Nie usunięto wniosku o czas wolny.'@
      ?}
   ?};
   _RS.add()
?};
A_OKRM.cntx_pop();
R_ODN.cntx_pop();
P.cntx_pop();
_RS


\r_odp_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Pobiera szczegoly odpracowań dla wniosku o udzielenie czasu wolnego
::   WE: _a [OBJECT] - paczka z danymi
::   WY: tabela z informacjami o wniosku
::  OLD: \get_r_odp/graf_kal.prc
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

:: parametry przekazywane w paczce
_sWniosek:='';

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || {? _param[1]='R_ODN_REF'    || _sWniosek:=_param[2] ?}
   ?}
!};

_sql:=''+"
   select
      ' ' as MS, R_ODP.P, R_ODP.R_ODN, R_ODP.DW, R_ODP.G, R_ODP.GO, R_ODP.A,
      R_ODP.R, R_ODP.M, R_ODP.TYP, R_ODP.REFERENCE
   from
     R_ODP
   where
     R_ODP.R_ODN=':_a'
";
_RS:=sql(_sql,_sWniosek);

P.cntx_psh();
P.prefix();
{? _RS.first()
|| {!
   |? _data:=_RS.DW;
      _p_ref:=null();
      _msc_prac:='';
      {? P.seek(_RS.P)
      || _p_ref:=P.ref();
         _orp_ref:=exec('find_okr','grafik',_p_ref,_data,'okrp');
         {? _orp_ref<>null()
         || _msc_prac:=exec('getStatusM_Plan','okres',_orp_ref,_data~1,_data~2)
         ?}
      ?};
      _msc_status:={? _msc_prac='X' || 'Z' || exec('get_msc_status','grafik',_data) ?};
      _RS.MS:=_msc_status;
      _RS.put();
      _RS.next()
   !}
?};
P.cntx_pop();
_RS


\czytniki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Pobiera listę czytników we/wy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"select K, O, PORTAL from R_OPCZYT where R_OPCZYT.SL='T'";
sql(_sql)


\getParamsFromPaczka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Pobiera listę parametrów z paczki
::   WE: _a [STRING] - paczka z damymi w formacie #key=value#key=value
::   WY:  tablica z elementami nazwanymi _result.key:=value
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('void');
_paczka:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

_params:=spli_str(_paczka,'#');
{! _ind:=1 .. obj_len(_params)
|! {? var_pres('_param')>100 || obj_del(_param) ?};
   _param:=spli_str(_params[_ind],'=');
   {? obj_len(_param)=2
   || _copy:=exec('obj_ntab_set','#array',_result,_param[1],_param[2]);
      obj_del(_result);
      _result:=_copy;
      obj_del(_copy)
   ?}
!};
_result


\getParamForName
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Zwraca wartość parametru z przekazanego obiektu parametrów
::   WE: _a [OBJECT] - obiekt z parametrami
::       _b [STRING] - nazwa parametru
::   WY: wartość parametru z przekazanego obiektu
::----------------------------------------------------------------------------------------------------------------------
_params:={? var_pres('_a')=117 || _a || return('') ?};
  _name:={? var_pres('_b')=2   || _b || return('') ?};
($("{? var_pres('"+_name+"',_a)>0 || _a."+_name+" || '' ?}"))(_params)


\plob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Pobiera dane o aktywnych obiektach do planowania i przypisanych im wg daty kontach kosztowych
::   WE: _a [STRING] - paczka z parametrami
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || '' ?};
_params:=exec('getParamsFromPaczka','prc_dane',_paczka);
_firma:=exec('ref_firma','#firma');
_rOkres:=exec('okres_get','prc_ws');
  _p_ref:={? var_pres('P_REF',_params)>0
          || _params.P_REF
          || ''
          ?};
_data_od:={? var_pres('DATA_OD',_params)>0
          || exec('str2date','#convert',_params.DATA_OD)
          || exec('FindAndGet','#table',A_OKR,_rOkres,,"A_OKR.OD",date())
          ?};
_data_do:={? var_pres('DATA_DO',_params)>0
          || exec('str2date','#convert',_params.DATA_OD)
          || exec('FindAndGet','#table',A_OKR,_rOkres,,"A_OKR.DO",date())
          ?};

_sql:=''+"
   select
      space(16) as REF,
      space(16) as L_REF,
      space(16) as OB_REF,
      space(16) as OB_SYM,
      space(90) as OB_OPIS,
      space(16) as KK_REF,
      space(35) KK_SYM,
      space(60) KK_NAZWA,
      'N' as OB_DOM,
      0 as POZIOM,
      space(10) OD,
      space(10) DO,
      space(16) KK_DOM,
      space(10) PR_DOM
   from
      syslog
   where 2=1
   order by 3,4
";
_RS:=sql(_sql);

P.cntx_psh();
P.index('OSOBA');
P.prefix();
_ob_dom:={? +_p_ref & P.seek(_p_ref) || exec('ob_dom','plob',P.ref(),_data_od) || '' ?};
P.cntx_pop();

PLOB_L.cntx_psh();
PLOB_L.index('UNIQUE');
PLOB_H.cntx_psh();
PLOB_H.index('OD');
PLOB_OL.cntx_psh();
PLOB_OL.index('AKT');
PLOB_OL.prefix(_firma,'T');
Cntx.psh(UD_SKL,UD_DEF,UD_SCH);
{? PLOB_OL.first()
|| PLOB_L.prefix(_firma,PLOB_OL.ref());
   {? PLOB_L.first()
   || _ok:=1;
      {!
      |? PLOB_H.prefix(_firma,PLOB_L.REF,'T');
         {? PLOB_H.first()
         || {!
            |? {? PLOB_H.DATA_OD<=_data_do & (#PLOB_H.DATA_DO=0 | PLOB_H.DATA_DO>=_data_od)
               || _RS.blank(1);
                  _RS.REF:=$PLOB_H.ref();
                  _RS.L_REF:=$PLOB_L.ref();
                  _RS.OB_REF:=PLOB_L.REF;
                  _RS.OB_SYM:=PLOB_L.SYMBOL;
                  _RS.OB_OPIS:=PLOB_L.OPIS;
                  _RS.KK_REF:=$PLOB_H.KK;
                  _RS.KK_SYM:=PLOB_H.KK().SYM;
                  _RS.KK_NAZWA:=KK.NAZWA;
                  _RS.OB_DOM:={? _ok
                              || {? _ob_dom<>'' & _ob_dom*($PLOB_H.KK+'@')
                                 || _ok:=0; 'T'
                                 || 'N'
                                 ?}
                              || 'N'
                              ?};
                  _RS.OD:=$PLOB_H.DATA_OD;
                  _RS.DO:=$PLOB_H.DATA_DO;
                  _RS.KK_DOM:={? _ob_dom<>'' & _ob_dom*($PLOB_H.KK+'@') || $PLOB_H.KK || '' ?};
                  _RS.PR_DOM:={? _ob_dom<>'' & _ob_dom*($PLOB_H.KK+'@')
                              || {? var_press('_spl')>0 || &_spl ?};
                                 _spl:=spli_str(_ob_dom,($PLOB_H.KK+'@'));
                                 (_spl[2]*'@')-1+_spl[2]
                              || ''
                              ?};
                  _RS.add()
               ?};
               PLOB_H.next()
            !}
         ?};
         PLOB_L.next()
      !}
   ?}
?};
PLOB_OL.cntx_pop;
PLOB_H.cntx_pop;
PLOB_L.cntx_pop;
Cntx.pop(UD_SKL,UD_DEF,UD_SCH);
_RS


\lokalizacje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Lista lokalizacji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::   data:='' String[10], Data badania, moze sie przyda
::   ref_prac:='' String[16], Ref pracownika, moze sie przyda
::   firma:='' String[16], Firma

_firma:=exec('ref_firma','#firma');

_sql:=''+"
   select
      PLOB_L.REFERENCE as REF,
      PLOB_L.SYMBOL as LOK_SYM,
      PLOB_L.OPIS as LOK_OPIS,
      PLOB_L.REF as UD_SKL,
      0 POZIOM
   from
      PLOB_L
   where
      PLOB_L.AKT like 'T'
      and
      PLOB_L.FIRMA=:_a
   order by 5,2,3
";
sql(_sql,_firma)


\podzialy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Lista podziałów dla dnia
::   WE: _a [STRING] - paczka z parametrami
::----------------------------------------------------------------------------------------------------------------------
_paczka:={? var_pres('_a')=type_of('') || _a || '' ?};
_params:=exec('getParamsFromPaczka','prc_dane',_paczka);
_p_ref:=exec('FindAndGet','#table',P,exec('getParamForName','prc_dane',_params,'P_REF'),,,null());
_warstwa:=~-exec('getParamForName','prc_dane',_params,'WARSTWA');
_data_od:=exec('str2date','#convert',exec('getParamForName','prc_dane',_params,'DATA_OD'));
_data_do:=exec('str2date','#convert',exec('getParamForName','prc_dane',_params,'DATA_DO'));

_firma:=exec('ref_firma','#firma');
_sKod:=exec('kod_zaleznosci','prc_dane');
_sSource:=exec('source4ses_get','prc_ws');
exec('p_web_cx_set_prefix','p_web',_sKod,'SETID',_sSource);
_tab:=sql('select * from prefixed_table(P_WEB_CX)');

_sql:=''+"
   select
      KK.SYM,
      PLOB_H.REFERENCE as REF,
      PLOB_H.PLOB_L,
      PLOB_P.P as P_REF,
      PLOB_P.DATA_DP as DATA_DP,
      PLOB_P.DATA_OD as OD,
      PLOB_P.GODZ_OD as G_OD,
      PLOB_P.DATA_DO as DO,
      PLOB_P.GODZ_DO as G_DO,
      PLOB_P.GR,
      lower(PLOB_P.GPW) as GPW
   from
      PLOB_P join
      :_d using(:_d.P, PLOB_P.P) join
      PLOB_H using(PLOB_P.PLOB_H,PLOB_H.REFERENCE) join
      KK using(PLOB_H.KK,KK.REFERENCE)
  where
      (PLOB_P.GPW=':_a' or ':_a'='') and PLOB_P.DATA_DP>=to_date(:_b) and PLOB_P.DATA_DP<=to_date(:_c)
      and (:_d.P=:_e or :_e IS NULL)
  order by
    4,5,6,7
";
sql(_sql,_warstwa,_data_od,_data_do,_tab,_p_ref)


\spr_wewy_kwal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Pobiera dane dla raportu różnic między rzeczywistymi we/wy a kwalifikacją. W tabeli przekazanej argumentam _a
::       powinni znajdować się tylko ci współpracownicy, do których użytkownika ma dostęp - formuła nie weryfikuje praw
::       do przeglądania danych współpracowników wykazywanych na raporcie.
::   WE: _a TABLE - alias tabeli zawierającej listę współpracowników, dla których ma być wykonanna kontrola
::       _b STRING - akronim kolumny zawierającej wskazanie współpracownika (kolumna może być typu INTEGER lub STRING)
::       _c [DATE] - data początku okresu kontroli (domyślnie pierwszy dzień bieżącego miesiąca)
::       _d [DATE] - data końca okresu kontroli (domyślnie ostatni dzień bieżącego miesiąca)
::   WY: alias tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów i zmienne
_TAB:=_a;
_col:=_b;
_cd:=date();
_zd:=date(0,0,0);
_beg:={? var_pres('_c')=type_of(date) & _c<>_zd || _c || date(_cd~1,_cd~2,1) ?};
_end:={? var_pres('_d')=type_of(date) & _d<>_zd || _d || date(_cd~1,_cd~2,0) ?};
{? _end<_beg
|| _end==_beg
?};

:: wymagane obiekty
exec('MASK','object');
exec('__KAL','object');

:: parametry działania spr_wewy_kwal_dod
_par:=exec('spr_wewy_kwal_par','prc_dane');

:: skrócone odwołania
_BUF:=_par.BUF;
_KST:=_par.KST;

:: buforuj stałe
{! _ii:=#_beg..#_end
|! _KST.DATA:=#_ii;
   exec('czytaj','#stalesys',_KST.DATA,KST,'R_WE','R_WY','R_WEWY_R','R_PWE','R_PWY');
   _KST.R_WE:=time(KST.R_WE~1,KST.R_WE~2,0);
   _KST.R_WY:=time(KST.R_WY~1,KST.R_WY~2,0);
   _KST.R_WEWY_R:=KST.R_WEWY_R;
   _KST.R_PWE:=time(KST.R_PWE~1,KST.R_PWE~2,0);
   _KST.R_PWY:=time(KST.R_PWY~1,KST.R_PWY~2,0);
   _KST.add()
!};

P.cntx_psh();
P.prefix();
OSOBA.cntx_psh();
OSOBA.prefix();
UD_SKL.cntx_psh();
UD_SKL.prefix();
A_OKRP.cntx_psh();
A_OKRP.index('A_OKRDP');
R_MARG.cntx_psh();
R_MARG.index('R_MARG');
R_MARG.prefix();
R_NADGK.cntx_psh();
R_NADGK.prefix();
:: ogranicz dziedzinę zakwalifikowanych wniosków o nadgodziny do tych z analizowanego okresu
R_NADGK.f_set('R_NADG(P),DATA',,'to_date(:_a)<=R_NADGK.DATA and R_NADGK.DATA<=to_date(:_b)',_beg,_end);

_seek:=$('P.seek(_a.%1,,1)'[_col]);
:: przeglądaj współpracowników
_loop:=_TAB.first();
{!
|? _loop
|! {? _seek(_TAB)
   || __KAL.set_cal(P.KAL);
      A_OKRP.prefix(P.ref());
      {? ~R_MARG.find_key(P.ref())
      || _par.R_MARG.blank()
      || _par.R_MARG.get()
      ?};
      {! _ii:=#_beg..#_end
      |! _par.emp:=P.ref();
         _par.day:=#_ii;
         {? A_OKRP.find_le(_par.day) & _par.day<=A_OKRP.DO &
            exec('spr_wewy_kwal_dod','prc_dane',_par)
::          uwzględnij dane współpracownika
         || P.OSOBA();
            P.WYDZIAL();
            _BUF.REF_INT:=#P.ref();
            _BUF.REF_SQL:=$P.ref();
            _BUF.T:=P.T;
            _BUF.NAZWISKO:=OSOBA.NAZWISKO;
            _BUF.PIERWSZE:=OSOBA.PIERWSZE;
            _BUF.SYMBOL:=UD_SKL.SYMBOL;
            _BUF.OPIS:=UD_SKL.OPIS;
            _BUF.add()
         ?}
      !}
   ?};
   _loop:=_TAB.next()
!};

:: dla wykazywanych współpracowników uzupełnij
:: informacje o bezpośrednich przełożonych
_P:=sql('select distinct REF_INT from :_a',_BUF);
{? type_of(_P)=type_of(SYSLOG)
|| _S:=exec('tab_zal','stanprac');
   _loop:=_P.first();
   {!
   |? _loop
   |! {? P.seek(_P.REF_INT,,1)
      || exec('prac_nad','stanprac',P.ref(),,,,_S);
         {? _S.first() & P.seek(_S.P_SQL)
         || _BUF.prefix(_P.REF_INT);
            _loop:=_BUF.first();
            {!
            |? _loop
            |! P.OSOBA();
               _BUF.SZEF_REF:=$P.ref();
               _BUF.SZEF_NAZ:=OSOBA.NAZWISKO;
               _BUF.SZEF_IM:=OSOBA.PIERWSZE;
               _BUF.put();
               _loop:=_BUF.next()
            !}
         ?};
         _S.erase()
      ?};
      _loop:=_P.next()
   !}
?};

R_NADGK.f_clear();
R_NADGK.cntx_pop();
R_MARG.cntx_pop();
A_OKRP.cntx_pop();
UD_SKL.cntx_pop();
OSOBA.cntx_pop();
P.cntx_pop();

_BUF.index(_BUF.ndx_tmp(,,'NAZWISKO',,,'PIERWSZE',,,'T',,));
_BUF


\spr_wewy_kwal_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Czy uwzględnić dzień pracy współpracownika w danych raportu kontrolnego.
::   WE: _a OBJECT - wskazanie tablicy zawierającej parametry
::   WY: 0/1 - czy uwzględnić dzień na raporcie
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;

_Kal_Buf:=exec('Kal_Buff','prc_wewy',_a.day);

_a.RIO.erase();
:: pobierz rzeczywiste wejście i wyjście
exec('get_wewy','prc_wewy',_a.day,_a.emp,_a.RIO,'r_hw');
{? ~_a.RIO.first()
:: brak danych
|| return(0)
?};

:: skrócone odwołania
_zt:=time(0,0,0);
_BUF:=_a.BUF;

_BUF.blank();
_BUF.DATA:=_a.day;
:: planowany początek i koniec
_BUF.PLAN_OD:=_Kal_Buf.POCZATEK;
_BUF.PLAN_DO:=_Kal_Buf.KONIEC;

:: ustalone wejście/wyjście
_BUF.WE:=_a.RIO.GWE;
_BUF.WY:=_a.RIO.GWY;

:: określ marginesy
{? _a.R_MARG.P<>null
:: marginesy indywidualne
|| _BUF.MARG_RD:=_a.R_MARG.RODZAJ;
   _BUF.MARG_WE:=_a.R_MARG.WE;
   _BUF.MARG_WY:=_a.R_MARG.WY;
   _BUF.MARG_PWE:=_a.R_MARG.PWE;
   _BUF.MARG_PWY:=_a.R_MARG.PWY

|? _a.KST.find_key(_a.day)
:: marginesy "systemowe"
|| _BUF.MARG_RD:=_a.KST.R_WEWY_R;
   _BUF.MARG_WE:=_a.KST.R_WE;
   _BUF.MARG_WY:=_a.KST.R_WY;
   _BUF.MARG_PWE:=_a.KST.R_PWE;
   _BUF.MARG_PWY:=_a.KST.R_PWY;
   {? _BUF.MARG_WE=_zt & _BUF.MARG_WY=_zt & __KAL.get_day(_a.day)
   || KAL_DEF.ROK().NAZWA();
      _BUF.MARG_WE:=time(KAL_NAZW.WE~1,KAL_NAZW.WE~2,0);
      _BUF.MARG_WY:=time(KAL_NAZW.WY~1,KAL_NAZW.WY~2,0);
      _BUF.MARG_RD:='S'
   ?}
?};

{? _BUF.MARG_RD='P'
:: marginesy "widełkowe"
|| {? _BUF.WE<_BUF.PLAN_OD-_BUF.MARG_WE |
      _BUF.WE>_BUF.PLAN_OD+_BUF.MARG_PWE
::    wejście poza wyznaczonym marginesem
   || _BUF.NADMIAR+=_BUF.PLAN_OD-_BUF.WE
   ?};
   {? _BUF.WY>_BUF.PLAN_DO+_BUF.MARG_WY |
      _BUF.WY<_BUF.PLAN_DO-_BUF.MARG_PWY
::    wyjście poza wyznaczonym marginesem
   || _BUF.NADMIAR+=_BUF.WY-_BUF.PLAN_DO
   ?}

|? _BUF.MARG_RD='S'
:: marginesy "ilościowe"
|| {? _BUF.WE<_BUF.PLAN_OD-_BUF.MARG_WE |
      _BUF.WE>_BUF.PLAN_OD+_BUF.MARG_PWE
::    wejście poza wyznaczonym marginesem
   || _BUF.NADMIAR+=_BUF.PLAN_OD-_BUF.WE-_BUF.MARG_WE
   ?};
   {? _BUF.WY-_BUF.MARG_WY>_BUF.PLAN_DO |
      _BUF.WY<_BUF.PLAN_DO-_BUF.MARG_PWY
::    wyjście poza wyznaczonym marginesem
   || _BUF.NADMIAR+=_BUF.WY-_BUF.PLAN_DO-_BUF.MARG_WY
   ?}

|| return(0)
?};

{? _BUF.NADMIAR<=_zt
:: brak nadmiaru
|| return(0)
?};

{? R_NADGK.f_find(_a.emp,_a.day)
:: praca w nadgodzinach na wniosek
|| _BUF.WNIO_NAD:=R_NADGK.GODZ
?};

:: czy pozostał jakiś nadmiar?
_BUF.WNIO_NAD<>_BUF.NADMIAR


\spr_wewy_kwal_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Tworzy tablicę zawierającą parametry działania spr_wewy_kwal_dod.
::   WE:
::   WY: wskazanie tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new('emp','day','BUF','KST','RIO','R_MARG');

_par.emp:=null;
_par.day:=date(0,0,0);
_par.BUF:=exec('spr_wewy_kwal_buf','prc_dane');
_par.KST:=exec('spr_wewy_kwal_kst','prc_dane');
_par.RIO:=exec('get_wewy_buf','prc_wewy');

:: pseudoobiekt do obsługi marginesów wejść/wyjść
_par.R_MARG:=obj_new(
:: reprezentacja pól w wierszu tabeli
   'P','WE','WY','RODZAJ','PWE','PWY',
:: obsługa danych
   'blank','get'
);
_par.R_MARG.blank:="
   _zt:=time(0,0,0);
   .P:=null;
   .WE:=_zt;
   .WY:=_zt;
   .RODZAJ:='';
   .PWE:=_zt;
   .PWY:=_zt;
   ~~
";
_par.R_MARG.get:="
   .P:=R_MARG.P;
   .WE:=time(R_MARG.WE~1,R_MARG.WE~2,0);
   .WY:=time(R_MARG.WY~1,R_MARG.WY~2,0);
   .RODZAJ:=R_MARG.RODZAJ;
   .PWE:=time(R_MARG.PWE~1,R_MARG.PWE~2,0);
   .PWY:=time(R_MARG.PWY~1,R_MARG.PWY~2,0);
   ~~
";
_par.R_MARG.blank();

_par


\spr_wewy_kwal_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Tworzy tabelę dla raportu różnic między rzeczywistymi we/wy a kwalifikacją.
::   WE:
::   WY: alias tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(1,
   'REF_INT','INTEGER','Wskazanie (numer)'@,
   'REF_SQL','STRING[16]','Wskazanie (napis)'@,
   'T','STRING[%1]'[$MS.fld_len(P,'T')],MS.name(P,'T'),
   'NAZWISKO','STRING[%1]'[$MS.fld_len(OSOBA,'NAZWISKO')],MS.name(OSOBA,'NAZWISKO'),
   'PIERWSZE','STRING[%1]'[$MS.fld_len(OSOBA,'PIERWSZE')],MS.name(OSOBA,'PIERWSZE'),
   'SYMBOL','STRING[%1]'[$MS.fld_len(UD_SKL,'SYMBOL')],MS.name(UD_SKL,'SYMBOL'),
   'OPIS','STRING[%1]'[$MS.fld_len(UD_SKL,'OPIS')],MS.name(UD_SKL,'OPIS'),
   'DATA','DATE','Data'@,
   'PLAN_OD','TIME','Plan od'@,
   'PLAN_DO','TIME','Plan do'@,
   'MARG_RD','STRING[1]','Rodzaj marginesów'@,
   'MARG_WE','TIME','Margines przed wejściem'@,
   'MARG_WY','TIME','Margines po wyjściu'@,
   'MARG_PWE','TIME','Margines po wejściu'@,
   'MARG_PWY','TIME','Margines przed wyjściem'@,
   'WE','TIME','Wejście'@,
   'WY','TIME','Wyjście'@,
   'NADMIAR','TIME','Ilość nadmiaru'@,
   'WNIO_NAD','TIME','Ilość nadgodzin z wniosku'@,
   'SZEF_REF','STRING[16]','Wskazanie przełożonego'@,
   'SZEF_NAZ','STRING[%1]'[$MS.fld_len(OSOBA,'NAZWISKO')],'%1 (przełożony)'[MS.name(OSOBA,'NAZWISKO')],
   'SZEF_IM','STRING[%1]'[$MS.fld_len(OSOBA,'PIERWSZE')],'%1 (przełożony)'[MS.name(OSOBA,'PIERWSZE')],
   'RAPORT','STRING[3]','W raporcie'@
)


\spr_wewy_kwal_kst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Tworzy tabelę do optymalizującji odczytu stałych systemu.
::   WE:
::   WY: alias tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(1,
   'DATA','DATE','Dzień'@,
   'R_WE','TIME','Margines wejścia'@,
   'R_WY','TIME','Margines wyjścia'@,
   'R_WEWY_R','STRING[1]','Rodzaj marginesu'@,
   'R_PWE','TIME','Margines po wejściu'@,
   'R_PWY','TIME','Margines przed wyjściem'@
)


\bundle
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Tworzy obiekt pomocniczy do utworzenia paczek z danymi dla wniosków.
::   WE: _a [STRING] - akronim tabeli, dla której należy przygotować paczkę
::   WY: Obiekt pomocniczy do utworzenia paczki
::----------------------------------------------------------------------------------------------------------------------
exec('list_decl','#list');

_bundle:=
   obj_new(
::    sprawdza poprawność wypełnionych danych
::    wynik: '' - poprawny zestaw danych, wpp. komunikat informujący o błędzie
      'check',
::    tworzy i zwraca paczkę
::    input: [tryb bez sprawdzania: 0, domyślnie tryb ze sprawdzaniem: 1]
::    wynik: łańcuch znaków z danymi paczki lub pusty łańcuch znaków w przypadku niepowodzenia
      'create',
::    argumenty paczki
      'args',
::    dodaje argument paczki, dla którego należy zdefiniować:
::    -> _a - nazwa argumentu
::    -> _b - wartość argumentu
::    -> [_c formuła na sprawdzenie poprawności argumentu, domyślnie: "1"]
      'append'
   );

_bundle.check:=
   "_result:='';
    _errArgType:=\"'%1 %2 %3'@['Nieprawidłowy typ argumentu'@,_a,'w zestawie danych do zapisu.'@]\";
    _errArgVal:=\"'%1 %2 %3'@['Nieprawidłowa wartość argumentu'@,_a,'dla zestawu danych do zapisu.'@]\";
    _continueWith:=\"type_of(_a)=type_of('')\";

    _arg:=obj_new('item','clear');
    _arg.clear:=\"{? var_pres('item',.)>100 || obj_del(.item) ?}\";

    {? _loop:=.args.first()
    || {!
       |? _loop
       |!
          _arg.clear();
          _arg.item:=.args.get();
          {? type_of(_arg.item.value)=type_of('')
          || {? ~_arg.item.check(_arg.item.value)
             || _result:=_errArgVal(_arg.item.name)
             ?}
          || _result:=_errArgType(_arg.item.name)
          ?};
          _loop:=.args.next()
       !}
    ?};

    _result
   ";

_bundle.create:=
   "_check:={? var_pres('_a')=type_of(0) || _a || 1 ?};
    _result:='';
    _ok:={? _check || .check()='' || 1 ?};
    {? _ok
    || {? _loop:=.args.first()
       || _arg:=obj_new('item','clear');
          _arg.clear:=\"{? var_pres('item',.)>100 || obj_del(.item) ?}\";
          {!
          |? _loop
          |!
             _arg.clear();
             _arg.item:=.args.get();
             _result:='%1%2=%3#'[_result,_arg.item.name,_arg.item.value];
             _loop:=.args.next()
          !}
       ?}
    ?};
    _result
   ";

_bundle.args:=obj_new(@.CLASS.List);

_bundle.append:=
   "_name:={? var_pres('_a')=type_of('') & _a<>'' || _a || return(.) ?};
    _value:={? var_pres('_b')=type_of('') & _b<>'' || _b || '' ?};
    _check:={? var_pres('_c')=type_of(\"\") || _c || \"1\" ?};
    _arg:=obj_new('name','value','check');
    _arg.name:=_name;
    _arg.value:=_value;
    _arg.check:=_check;
    .args.add(_arg);
    return(.)
   ";

_bundle


\przerwy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51_24]
::  UTW: MicKoc [22.26]
:: OPIS: Zwraca tabele ze zdefiniowanymi przerwami niepłatnymi
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_RS:=sql(''+"
   select
      '1234567890123456' ZMIANA,
      '1234567890123456' GRUPA,
      '00:00:00' as GODZ_OD,
      '00:00:00' as GODZ_DO,
      '00:00:00' as CZAS,
      'N' as OD_ND,
      'N' as DO_ND
   from
      syslog
   where
      2=1
");
_tab:=sql('select R_ZMIANY, GRUPA, GODZ_OD, GODZ_DO, OD_ND, DO_ND, CZAS from R_PRZER order by GODZ_OD');
{? _tab.first()
|| {!
   |? _RS.blank(1);
      _RS.ZMIANA:=_tab.R_ZMIANY;
      _RS.GRUPA:=_tab.GRUPA;
      _RS.GODZ_OD:=_tab.GODZ_OD$3;
      _RS.GODZ_DO:=_tab.GODZ_DO$3;
      _RS.CZAS:=_tab.CZAS$3;
      _RS.OD_ND:=_tab.OD_ND;
      _RS.DO_ND:=_tab.DO_ND;
      _RS.add();
      _tab.next()
   !}
?};
&_RS


\dostosowanieKwalifikacji
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Wartość parametru 362, uzupełnienie aktualizacji PAR_362
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_val:=exec('get_par','#parametr',362,2);
_RS:=sql(''+"
   select
      'X' DOST_KW
   from
      SYSLOG
   where
      2=1
");
_RS.DOST_KW:=_val;
_RS.add();
&_RS

:Sign Version 2.0 jowisz:1045 2023/10/18 14:16:21 bb0ab266eda84397d499947365f31713426395bb2a708991a441a4ab5dc170e9190aab26298406ed0162adff9538f253e83be6755667f01e84cdef7c13a7049c73b4101d4e668e94cfab00a78d0b4a4d1f4edbb1decbde47ed47fba348f18a2e4d2cb6a9cfeef95c53bde9a90cd5b902cc369a20aa5421197a6379bb2af17a29
