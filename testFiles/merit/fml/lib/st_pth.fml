:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: st_pth.fml
:: Utworzony: 03.06.2020
:: Autor: AKUL
::======================================================================================================================
:: Zawartość: Obsługa ścieżek dla systemu Statystyki
::======================================================================================================================


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Czyści powiązania do rekordu tabeli ST_PTH
::   WE: _a - ST_PTH.ref()
::   WY: >0  -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PRYWATNA><CLEAN>
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---
ST_PTH.cntx_psh(); ST_PTH.clear();
{? ST_PTH.seek(_ref)
||
   {? _can_continue>0 & ST_PTH.count()>0
   ||
::    1. Usuwam ST_PTH_W które wskazują na ten element
      ST_PTH_W.cntx_psh();
      ST_PTH_W.index('UNIQ');
      ST_PTH_W.prefix(ST_PTH.ref());
      {? ST_PTH_W.first()
      || {!
         |? _can_continue:=exec('delete','st_pth_w',ST_PTH_W.ref());
            ST_PTH_W.first() & _can_continue>0
         !}
      ?};
      ST_PTH_W.cntx_pop()
   ?};
   ~~
?};

ST_PTH.cntx_pop();
:: --- wszystkie powiazania usuniete? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Kasuje podany rekord tabeli ST_PTH (wykonywane w transakcji!!!)
::   WE: _a - ST_PTH.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PUBLICZNA><DEL>
::UWAGA: Parametry bez [] są wymagane, formula może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
ST_PTH.cntx_psh(); ST_PTH.clear();
{? ST_PTH.seek(_ref)
|| {? exec('clean','st_pth',_ref)>0
   || {? ST_PTH.del(,1)>0
      || _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

ST_PTH.cntx_pop();
{? _mydo || end() ?};
_result


\st_pth_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Dołącz dla ST_PTH
::----------------------------------------------------------------------------------------------------------------------
ST_PTH.win_edit('RED');
ST_PTH.blank();
ST_PTH.memo_set('','PTH');
{? ST_PTH.edit()
|| {? ST_PTH.add()
   || ST_PTH.memo_put(,'PTH')
   ?}
?};
~~


\st_pth_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Usuń dla ST_PTH
::----------------------------------------------------------------------------------------------------------------------
{? VAR.GRUPA='T' | FUN.ask('Czy usunąć bieżący wiersz?'@)
|| exec('delete','st_pth',ST_PTH.ref())
?};
~~


\st_pth_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Popraw dla ST_PTH
::----------------------------------------------------------------------------------------------------------------------
ST_PTH.win_edit('RED');
ST_PTH.memo_get(,'PTH',0);
{? ST_PTH.edit()
|| {? ST_PTH.put()
   || ST_PTH.memo_put(,'PTH')
   ?}
?};
~~


\st_pth_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Generuj ścieżki
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~FUN.ask('Czy utworzyć ścieżki?'@) || return() ?};

ST_PTH.cntx_psh();
ST_PTH.index('ID');
ST_PTH.prefix();
_loop:=ST_PTH.first();
{!
|? _loop
|!
   __deep_recursion:=0;
   ST_PTH.memo_set(exec('pth','st_pth'),'PTH');
   _loop:=ST_PTH.memo_put(,'PTH') & ST_PTH.next()
!};
ST_PTH.cntx_pop();
VAR_DEL.delete('__deep_recursion')


\pth
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.42]
:: OPIS: Tworzenie ścieżki dla bieżącego ST_PTH
::   WE:
::   WY: scieżka
::----------------------------------------------------------------------------------------------------------------------
_result:='';
__deep_recursion+=1; {? __deep_recursion>50 || '...' ?};
{? ST_PTH.IDP<>''
||
   ST_PTH.cntx_psh();
   ST_PTH.index('ID');
   ST_PTH.prefix(ST_PTH.IDP,);
   _result:=
      {? ST_PTH.first()
      ||
         exec('pth','st_pth')
      ||
         'Błąd generowania ścieżki.'
      ?};
   ST_PTH.cntx_pop()
?};
ST_OBJ.cntx_psh();
_result:=_result+'/'+{? ST_PTH.OPIS='' || ST_PTH.ST_OBJ().OPIS || ST_PTH.OPIS ?};
ST_OBJ.cntx_pop();
_result


\st_pth_del_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Usuń przed dla grupy rekordów (tabela ST_PTH)
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć zaznaczone wiersze?'@)
|| VAR.GRUPA:='T';
   1
|| 0
?}


\st_pth_del_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Usuń po dla grupy rekordów (tabela ST_PTH)
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
~~


\trigger_memo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Trigger memo
::   WE: _a - INTEGER - wynik akcji
::       _b - STRING - akronim pola typy SYS_MEMO
::   WY: ~~
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=_a;
_fld:=_b;

{? _result>0
||
:: Synchronizacja pola PTH_STR z memem
   {? _fld='PTH'
   || _txt:=ST_PTH.memo_txt(,1,'PTH');
      ST_PTH.PTH_STR:=_txt;
      ST_PTH.put()
   ?}
?};
~~


\napraw_pth_str
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Nawija wszystkim rekordom pole ST_PTH.PTH_STR
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
ST_PTH.cntx_psh();
ST_PTH.index('ID');
ST_PTH.prefix();
{? ST_PTH.first()
|| {!
   |? ST_PTH.memo_get(,'PTH',0);
::    Memo put wywoła triggera który synchronizuje pola
      ST_PTH.memo_put(,'PTH');
      ST_PTH.next()
   !}
?};
ST_PTH.cntx_pop();
~~


\select_logi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Pokazuje Logi dla bieżącej ścieżki ze wszystkich masek
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('TAB','ST_PTH');
_args.TAB:=tab_tmp(3,
   'LP','REAL','LP',
   'DATA','DATE','Data',
   'CZAS','TIME','Czas',
   'ST_OBJ','STRING[50]','Obiekt',
   'KH','STRING[50]','Kontrahent',
   'ADDRESS','STRING[50]','Adres serwera',
   'FILEPATH','STRING[255]','Nazwa pola 1',
   'FILENAME','STRING[255]','Nazwa pola 1'
);
_args.ST_PTH:=ST_PTH.ref();

_rule:="
   _args:=_b;
   _tab:=_args.TAB;
   _result:=1;
   _can_continue:=1;

   ST_SRC.cntx_psh();
   _name:=ST_SRC.name();
   _msk:=(8+ST_LOG.name())+4;
   _new_mask:=4+_name;
   _new_mask+=_msk;
   ST_SRC.use(_new_mask);
   ST_SRC.index('LP');
   ST_LOG.cntx_psh();
   ST_LOG.index('ST_PTH_W');
   ST_PTH_W.cntx_psh();
   ST_PTH_W.index('UNIQ');
   ST_PTH_W.prefix(_args.ST_PTH);
   {? ST_PTH_W.first()
   || {!
      |?
         ST_LOG.prefix(ST_PTH_W.ref());
         {? ST_LOG.first()
         || {!
            |?
               _filename:='';
               _filepath:='';
               ST_SRC.prefix(ST_LOG.LP);
               {? ST_SRC.first()
               || _filename:=ST_SRC.FILENAME;
                  _filepath:=ST_SRC.FILEPATH
               ?};

               _tab.cntx_psh();
               _address:=ST_LOG.ST_KHI().AS_ADDRE+':'+ST_LOG.ST_KHI().AS_PORT;
               _kh:=ST_LOG.ST_KHI().ST_KH().DANE;
               _tab.blank();
               _tab.LP:=ST_LOG.LP;
               _tab.DATA:=ST_LOG.DATA;
               _tab.CZAS:=ST_LOG.CZAS;
               _tab.ST_OBJ:=ST_LOG.ST_OBJ_W().ST_OBJ().OPIS;
               _tab.FILEPATH:=_filepath;
               _tab.FILENAME:=_filename;
               _tab.ADDRESS:=_address;
               _tab.KH:=_kh;
               _can_continue:=_tab.add();
               _tab.cntx_pop();
               ST_LOG.next() & _can_continue>0
            !}
         ?};
         ST_PTH_W.next() & _can_continue>0
      !}
   ?};
   ST_LOG.cntx_pop();
   ST_SRC.cntx_pop();
   ST_PTH_W.cntx_pop();
   {? _can_continue<=0
   || _result:=0
   ?};
   _result

";
_can_continue:=exec('for_each_mask','#table',ST_LOG,_rule,,,_args,1,1);

{? _can_continue>0
||
   _tab:=_args.TAB;

   _tab.prefix();
   _wer:=_tab.mk_sel('Logi dla ścieżki'@,,,'#st_pth_log',,,,,'U');
   _tab.win_fld(_wer,,'LP',,,10,,,'Lp.'@);
   _tab.win_fld(_wer,,'DATA',,,5,,,'Data'@);
   _tab.win_fld(_wer,,'CZAS',,,5,,,'Czas'@);
   _tab.win_fld(_wer,,'ST_OBJ',,,40,,,'Obiekt'@);
   _tab.win_fld(_wer,,'FILENAME',,,20,,,'Nazwa pliku'@);
   _tab.win_fld(_wer,,'FILEPATH',,,20,,,'Ścieżka pliku'@);
   _tab.win_fld(_wer,,'KH',,,30,,,'Kontrahent'@);
   _tab.win_fld(_wer,,'ADDRESS',,,30,,,'Adres serwera'@);

   _fml:="

      _env:=exec('env_parse','st_common');
      _dir:=exec('dialog_path_download','st_src',_env);
      _result:=0;
      {? cur_tab(1,1).FILENAME<>'' & cur_tab(1,1).FILEPATH<>''
      ||
         {? _dir<>''
         || _sep:=exec('sep','#file');
            _filelocal:=_dir+_sep+cur_tab(1,1).FILENAME;
            _result:=fcopy(cur_tab(1,1).FILEPATH,'@'+_filelocal,0,0,1)
         ?}
      || FUN.emsg('Brak pliku.'@)
      ?};
      _result
   ";
   _tab.win_act(_wer,,'Formuła','Pobierz plik'@@,,,_fml,,1,,,,'P');
   _tab.win_act(_wer,,'Kolejność');
   _tab.win_sel(_wer);
   _tab.select()
?};
~~

\delete_not_used
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Usuwa wszystkie nieużywane rekordy
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};

ST_PTH.cntx_psh();
ST_PTH.index('ID');
ST_PTH.prefix();
{? ST_PTH.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      ST_PTH.cntx_psh();
      {? ST_PTH.next()
      || _ref_nxt:=ST_PTH.ref()
      ?};
      ST_PTH.cntx_pop();

      {? ST_PTH.count()=0
      || _can_continue:=exec('delete','st_pth',ST_PTH.ref())
      ?};

      {? _ref_nxt<>null()
      || _next:=ST_PTH.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};
ST_PTH.cntx_pop();
{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || end() ?};
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 955e20642d7b6b37814bd76221f10b9492bd98ccf3d8a699de0b3ef05a5e7fa513607047a73e471e09257328d2f36d8273765b25a70825b384b6e28826214513b7af6281dfe9220851f378f1fedf3f47e4b2135db35358fe89d0459887827f266c9f2103c40953a8803992d3ff1deb029b4c7ad8d6984ee851c6233baa49d2f0
