:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: kaledit.fml
:: Utworzony: 14.09.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Definicje funkcji obsługujących kalendarz.
::======================================================================================================================


\akt_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Aktualizuje pola z wartościami narastającymi kalendarza.
::   WE: _a - nazwa kalendarza
::       _b - rok
::       _c - data, od której mają być wprowadzone zmiany, jeśli pominięta to przyjęty zostanie pierwszy dzień roku,
::            jeśli nie będzie datą z przedziału od pierwszego do ostatniego dnia roku, to będzie zignorowana
::----------------------------------------------------------------------------------------------------------------------
{? (var_pres('_a')<>type_of(null()) | ~_a) | (var_pres('_b')<>type_of(0) | ~_b)
|| return()
?};

_data:=
   {? var_pres('_c')=type_of(date())
   || {? _c<date(_b,1,1) | date(_b,12,0)<_c
      || date(_b,1,1)
      || _c
      ?}
   || date(_b,1,1)
   ?};

KAL_DEF.cntx_psh();
KAL_DEF.clear();
KAL_DEF.index('KAL_DATA');
KAL_DEF.prefix(_a,_b);

_dr:=_dw:=_ds:=0;
_gr:=time(0,0,0);
_loop:=
   {? KAL_DEF.find_le(_data-1)
   || _dr:=KAL_DEF.DR;
      _dw:=KAL_DEF.DW;
      _ds:=KAL_DEF.DS;
      _gr:=KAL_DEF.GR;
      KAL_DEF.next()
   || KAL_DEF.first()
   ?};
{!
|? _loop
|! _dr+=(KAL_DEF.TYP='R');
   _dw+=(KAL_DEF.TYP='W');
   _ds+=(KAL_DEF.TYP='S');
   _gr+=KAL_DEF.CZAS;
   {? KAL_DEF.DR<>_dr |
      KAL_DEF.DW<>_dw |
      KAL_DEF.DS<>_ds |
      KAL_DEF.GR<>_gr
   || KAL_DEF.DR:=_dr;
      KAL_DEF.DW:=_dw;
      KAL_DEF.DS:=_ds;
      KAL_DEF.GR:=_gr;
      KAL_DEF.put()
   ?};
   _loop:=KAL_DEF.next()
!};

KAL_DEF.cntx_pop()


\akt_kal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DD [18.05.2010]
:: OPIS: Aktualizacja wskazanego kalendarza - wyliczenie wartości dni i godzin narastająco
::   WE: _a - KAL_NAZW.ref lub KAL_ROK.ref (jeśli KAL_ROK - to _b:=1)
::       _b - rok (jeśli brak lub 0 to wszystkie lata)
::  OLD: \akt_kal/kal_sch.fml
::  OLD: \akt_kal/plan_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:=ref_name(_a)='kal_rok';
{? var_pres('_b')<>type_of(1) || _b:=0 ?};
{? _rok || _b:=1 ?};
KAL_ROK.cntx_psh();
KAL_ROK.index('KAL_ROK');
KAL_ROK.prefix();
{? ~_rok
|| {? _b
   || KAL_ROK.prefix(_a,_b)
   || KAL_ROK.prefix(_a)
   ?}
?};
{? (_rok & KAL_ROK.seek(_a)) | KAL_ROK.first()
|| KAL_NAZW.cntx_psh();
   {!
   |? {? ~_b || echo('Aktualizacja: %1'@[$KAL_ROK.ROK]) ?};
      exec('akt_rok','kaledit',KAL_ROK.NAZWA,KAL_ROK.ROK);
      ~_rok & KAL_ROK.next()
   !};
   KAL_NAZW.cntx_pop()
?};
KAL_ROK.cntx_pop();
{? ~_b || echo ?}


\aktualPracKal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30]
:: OPIS: Funkcja przebudowuje kalendarz pracownika w zakresie podanych dat na podstawie przypisanych wzorcow czasu pracy
::   WE: _a   - [REFERENCE] - wskazanie na pracownika
::       _b   - [DATE]      - data od
::       _c   - [DATE]      - data do
::       [_d] - [INTEGER]   - tylko dla przekazanego roku
::   WY: 0/1
::  OLD: \aktualPracKal/kal_sch.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
  _p_ref:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
_data_od:={? var_pres('_b')=type_of(date) || _b || return(_result) ?};
_data_do:={? var_pres('_c')=type_of(date) || _c || return(_result) ?};
    _rok:={? var_pres('_d')=type_of(0)    || _d || 0               ?};

:: jezeli mamy wskazanie roku, to ustaw daty tylko dla wskazanego roku
{? _rok
|| _data_od:={? _data_od<=date(_rok,1,1) || date(_rok,1,1) || _data_od ?};
   _data_do:={? _data_do=date(0,0,0)
             || date(_rok,12,0)
             || {? _data_do>date(_rok,12,0) || date(_rok,12,0) || _data_do ?}
             ?}
?};

_z_date:=date(0,0,0);

{? _data_od=_z_date | _data_do=_z_date
|| return(_result)
?};

{? _data_do<_data_od
|| return(_result)
?};

:: sprawdzenie czy daty sa w tym samym roku
{? _data_od~1<>_data_do~1
|| return(_result)
?};

P.cntx_psh();
P.prefix();
{? P.seek(_p_ref)
||
:: kopiujemy kalendarz na podstawie wzorca
   _wzorzec:=1;
:: i tylko dla wzorcy typu grafik
   _4grafik:=1;

   KAL_ROK.cntx_psh();
   KAL_ROK.index('KAL_ROK');
   KAL_ROK.prefix(P.KAL,_data_od~1);
   {? KAL_ROK.first()
   || _result:=exec('kop_kal','kaledit',,KAL_ROK.ref(),_data_od,_data_do,1,_wzorzec,_4grafik)
   ?};
   KAL_ROK.cntx_pop()
?};
P.cntx_pop();
_result


\add_kal_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Tworzy kalendarz na wybrany rok.
::   WE: _a - KAL_NAZW.ref()
::       _b - rok
::       _c - nazwa wzorca, jeżeli brak to domyślnie 'standard'
::   WY: KAL_ROK.ref() lub null
::  OLD: \add_kal_rok/plan_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_ret_val:=null();
{? var_pres('_a')<>type_of(null()) || return(_ret_val) ?};
{? var_pres('_b')<>type_of(1) || return(_ret_val) ?};
{? var_pres('_c')<>type_of('') || _c:='standard' ?};

KAL_ROK.cntx_psh();
KAL_ROK.index('KAL_ROK');
KAL_ROK.prefix(_a,_b);
{? KAL_ROK.first()
|| _ret_val:=KAL_ROK.ref()
|| KAL_ROK.prefix();
   KAL_ROK.blank(1);
   KAL_ROK.NAZWA:=_a;
   KAL_ROK.ROK:=_b;
   KAL_ROK.WZORZEC:=_c;
   {? KAL_ROK.add(1)
   || _ret_val:=KAL_ROK.ref()
   ?}
?};
KAL_ROK.cntx_pop();
_ret_val


\kop_kal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DD [18.05.2010]
::  MOD: TMR[12.10]
::  MOD: MicKoc [22.26]
:: OPIS: Kopiuje dni z kalendarza wskazanego do kalendarza indywidualnego pracownika.
::       Wymagany ustawiony P.ref - dla uwzględnienia wymiaru zatrudnienia.
::   WE: _a - KAL_ROK.ref (źródło)
::       _b - KAL_ROK.ref (cel)
::       _c - od dnia
::       _d - do dnia (daty muszą mieć ten sam rok)
::       _e - 0 - bez aktualizacji nieobecności,
::            1 - aktualizacja (domyślnie)
::       _f - kopiowanie kalendarza na podstawie przypisanych wzorców (ignorowany jest parametr _a - źródło)
::       _g - kopiowanie tylko jeżeli kalendarz typu grafik
::       _h - czy wyświetlać progress (1 / *0)
::   WY: liczba zmodyfikowanych dni
::  OLD: \kop_kal/kal_sch.fml
::----------------------------------------------------------------------------------------------------------------------
_kal_std:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_kal_prac:=_b;
_data_od:={? var_pres('_c')=type_of(date) || _c || date(0,0,0) ?};
_data_do:={? var_pres('_d')=type_of(date) || _d || date(0,0,0) ?};
_akt_nie:={? var_pres('_e')=type_of(0)    || _e || 1 ?};
_wzorzec:={? var_pres('_f')=type_of(0) || _f || 0 ?};
_4grafik:={? var_pres('_g')=type_of(0) || _g || 0 ?};
    _prg:={? var_pres('_h')=type_of(0) || _h || 0 ?};

_dni:=0;
KAL_DEF.cntx_psh();
KAL_DEF.index('KAL_DEF');
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref,'Z');
__KAL.set_cal(P.KAL,_c~1);
_jest_kal_def:=0;
{? __KAL.get_day(_c)
|| _jest_kal_def:=1
|| KAL_DEF.index('KAL_DEF');
   KAL_DEF.prefix(_kal_std,_c);
   _jest_kal_def:=KAL_DEF.first()
?};

{? _jest_kal_def
|| _buf:=obj_new(13);
   _len:=obj_len(_buf);
   _last_kal_nazw:='';
   _dzien:=_c;
   {? _prg
   || _size:=#_data_do-#_data_od+1;
      FUN.prg_start(_size,'Dodawanie indywidualnego kalendarza pracownika w zakresie dat od %1 do %2.'@
                          [$_data_od,$_data_do])
   ?};
   {!
   |? _dzien<=_d
   |! _kalSrc:=0;
::    Sprawdzenie czy jest już dzień w kalendarzu docelowym - zapamiętanie odstępstw.
      _except:=0;
      __KAL.set_cal(P.KAL,_dzien~1);
      {? __KAL.get_day(_dzien) & __KAL.except(_dzien)
      || _except:=1
      ?};

      _kopiuj:=1;
      {? _4grafik & __KAL.grafik(_dzien)='N'
      || _kopiuj:=0
      ?};

::    Pobranie dnia z kalendarza źródłowego
      KAL_DEF.cntx_psh();
      {? _wzorzec
      || _nazwa:=exec('get_graf_wzor','grafik',P.ref,_dzien);
         {? _nazwa<>''
         || {? _nazwa<>_last_kal_nazw
            || _last_kal_nazw:=_nazwa;
               __KAL.set_cal(_nazwa,_dzien~1);
               _kal_std:=__KAL.kal_rok
            ?}
         || _kal_std:=null()
         ?}
      ?};

      {? _kal_std
      || KAL_DEF.index('KAL_DEF');
         KAL_DEF.prefix(_kal_std,_dzien);
         _kalSrc:=KAL_DEF.first()
      ?};
::    Zapamiętanie kalendarza źródłowego do bufora
      {? _kalSrc
      || {! _i:=2 .. _len |!
            _pole:={? _i>10 || _i+8 || _i ?};
            _buf[_i]:=KAL_DEF[_pole]
         !}
      ?};
      KAL_DEF.cntx_pop();

::    Przekopiowanie dnia do kalendarza docelowego
      {? _kopiuj & _kalSrc
      || KAL_DEF.cntx_psh();
         KAL_DEF.index('KAL_DEF');
         KAL_DEF.prefix(_kal_prac,_dzien);
:        Czy jest już dzień w kalendarzu (cel)?
         {? KAL_DEF.first()
:           Czy można aktualizować dany dzień?
         || {? (~_except)
            || _status:=exec('getPlanStat4Pr','grafik',P.ref(),_dzien);
               {? (_status<>'Z' & _status<>'X')
               || _mod:=0;
                  {? H.find_le(KAL_DEF.DATA) & H.WY<>1 & __KAL.p_kin(KAL_DEF.DATA)<>'T'
:                 Uwzględnienie wymiaru zatrudnienia
:                 CZAS - 8, KONIEC - 7, POCZĄTEK - 6
                  || {? H.WYM<>0
                     || _buf[8]:=(*((*_buf[8])*H.WYL/H.WYM));
                        _buf[7]:=_buf[6]+_buf[8]
                     ?}
                  ?};
                  {! _i:=2 .. _len
                  |! _pole:={? _i>10 || _i+8 || _i ?};
                     {? KAL_DEF[_pole]<>_buf[_i]
                     || _mod:=1
                     ?};
                     KAL_DEF[_pole]:=_buf[_i]
                  !};

                  {? KAL_DEF.put()
                  || _dni+=_mod
                  ?}
               ?}
            ?}
         || KAL_DEF.blank();
            {! _i:=2 .. _len |!
               _pole:={? _i>10 || _i+8 || _i ?};
               KAL_DEF[_pole]:=_buf[_i]
            !};
            KAL_DEF.ROK:=_kal_prac;
            KAL_DEF.STATUS:='A';
            {? H.find_le(KAL_DEF.DATA) & H.WY<>1 & __KAL.p_kin(KAL_DEF.DATA)<>'T'
:              Uwzględnienie wymiaru zatrudnienia
            || {? H.WYM<>0
               || KAL_DEF.CZAS:=(*((*KAL_DEF.CZAS)*H.WYL/H.WYM));
                  KAL_DEF.KONIEC:=KAL_DEF.POCZATEK+KAL_DEF.CZAS;
                  {? KAL_DEF.KONIEC>time(24,0,0)
                  || KAL_DEF.DATAW:=KAL_DEF.DATA+1;
                     KAL_DEF.KONIEC-=time(24,0,0)
                  ?}
               ?}
            ?};
            _dni+=KAL_DEF.add()
         ?};
         KAL_DEF.cntx_pop()
      ?};
      _dzien+=1;
      {? _prg || FUN.prg_next() ?}
   !};
   {? _prg || FUN.prg_stop() ?}
?};
: Aktualizacja zapisów w kalendarzu - wartości narastająco
{? _prg
|| _size:={? _akt_nie || 5 || 2 ?};
   FUN.prg_start(_size,'Aktualizacja indywidualnego kalendarza pracownika w zakresie dat od %1 do %2.'@
                   [$_data_od,$_data_do]);
   FUN.prg_next()
?};
exec('akt_kal','kaledit',_kal_prac);

::: Aktualizacja nieobecności, wniosków i planów urlopowych
{? _akt_nie
|| {? _prg || FUN.prg_next() ?};
   exec('plan_aktual','nieobecnosc',P.ref(),_data_od,_data_do);
   {? _prg || FUN.prg_next() ?};
   exec('urlPlan_aktual','grafik',P.ref(),_data_od,_data_do);
:: Aktualizacja pracy poza siedzibą firmy
   {? _prg || FUN.prg_next() ?};
   exec('ppsf_update','ppsf',P.ref(),_data_od,_data_do)
?};
{? _prg || FUN.prg_next();FUN.prg_stop() ?};
H.cntx_pop();
KAL_DEF.cntx_pop();
_dni


\czy_caly_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Sprawdza czy KAL_DEF jest wypełniony dla całego roku.
::   WE: _a - KAL_ROK.ref()
::       _b - czy rok przestępny
::   WY: 0 lub 1
::  OLD: \czy_caly_rok/plan_kal.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null()) || return(0) ?};
{? var_pres('_b')<>type_of(1) || return(0) ?};
_b:=_b<>0;
KAL_DEF.cntx_psh();
KAL_DEF.index('KAL_DEF');
KAL_DEF.prefix(_a);
_ok:=KAL_DEF.size()=365+_b;
KAL_DEF.cntx_pop();
_ok


\jest_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Sprawdza czy istnieje rok dla kalendarza pracownika na badany dzień. Jeśli nie ma to go zakłada.
::   WE: _a - ref do kal_nazw
::       _b - data sprawdzania
::       _c - nazwa kal_nazw wzorca
::       _d - czy wyświetlać progress (1/*0)
::   WY: ref kal_rok lub null
::  OLD: \jest_rok/plan_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_ret_val:=null();
{? var_pres('_a')<>type_of(null()) || return(_ret_val) ?};
{? var_pres('_b')<>type_of(date()) || return(_ret_val) ?};
_kal_wzor:={? var_pres('_c')<>type_of('') || 'standard' || _c ?};
     _prg:={? var_pres('_d')=type_of(0)   || _d         || 0  ?};

_ok:=0;
KAL_ROK.cntx_psh();
:: Jeżeli nie podano wzorca to znajdź kal_rok dla kalendarza standard
{? ~__KAL.set_cal(_kal_wzor,_b~1)
|| KAL_ROK.cntx_pop();
   return(_ret_val)
?};
_kal_std:=KAL_ROK.ref();
_leap:=__KAL.leap(_b~1);

KAL_ROK.index('KAL_ROK');
KAL_ROK.prefix(_a);
{? KAL_ROK.find_key(_b~1)
|| _kal_rok:=KAL_ROK.ref()
|| _kal_rok:=exec('add_kal_rok','kaledit',_a,_b~1,_kal_wzor)
?};
{? _kal_rok<>null()
|| {? exec('czy_caly_rok','kaledit',_kal_rok, _leap)
   || _ok:=1
   || _ok:=exec('kop_kal','kaledit',_kal_std,_kal_rok,date(_b~1,1,1),date(_b~1,12,0),0,,,_prg)
   ?}
?};
KAL_ROK.cntx_pop();
{? _ok & (_kal_rok<>null())
|| _ret_val:=_kal_rok
?};
_ret_val


\r_wzcz_fld_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła definiuje formuły na wartość początkową wybranych pól tabeli R_WZCZ.
::   WE: _a - Alias tabeli.
::   WY: 1 - Formuły zdefiniowane.
::       0 - Formuł nie udało się zdefiniować (błąd argumentu) - przywrócone formuły "puste".
::  OLD: \blwc_br/kaledit.fml
::  OLD: \blwc_har/kaledit.fml
::  OLD: \blwc_kcz/kaledit.fml
::  OLD: \blwc_msk/kaledit.fml
::  OLD: \blwc_osview/kaledit.fml
::  OLD: \blwc_p/kaledit.fml
::  OLD: \blwc_pro/kaledit.fml
::  OLD: \blwc_prz/kaledit.fml
::  OLD: \blwc_rek/kaledit.fml
::  OLD: \blwc_twr/kaledit.fml
::  OLD: \blwc_zas/kaledit.fml
::  OLD: \blwc_zbr/kaledit.fml
::  OLD: \wzc_init/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
R_WZCZ.fld_fml('P','BLANK',"null()");
R_WZCZ.fld_fml('PRZ','BLANK',"null()");
R_WZCZ.fld_fml('ZLBR','BLANK',"null()");
R_WZCZ.fld_fml('TWRKPLC','BLANK',"null()");
R_WZCZ.fld_fml('PROJZAS','BLANK',"null()");
R_WZCZ.fld_fml('PROJEKTY','BLANK',"null()");
R_WZCZ.fld_fml('PROJHARM','BLANK',"null()");
R_WZCZ.fld_fml('TWRKZBR','BLANK',"null()");
R_WZCZ.fld_fml('OS_VIEW','BLANK',"null()");

R_WZCZ.fld_fml('MASKA','BLANK',"''");
R_WZCZ.fld_fml('REKORD','BLANK',"0");

R_WZCZ.fld_fml('CZESC','BLANK',"null()");

{? var_pres('_a')<>type_of(R_WZCZ)
|| return(0)
?};

{? _a=P | _a=PRZ | _a=ZLBR | _a=TWRKPLC | _a=PROJZAS | _a=PROJEKTY | _a=PROJHARM | _a=TWRKZBR | _a=OS_VIEW
|| R_WZCZ.fld_fml(2-!_a,'BLANK',$(!_a+'.ref()'));

   R_WZCZ.fld_fml('MASKA','BLANK',$(!_a+'.name()'));
   R_WZCZ.fld_fml('REKORD','BLANK',$(!_a+'.ref()'));

   {? var_pres('KAL',_a)=26
   || R_WZCZ.fld_fml('CZESC','BLANK',$(!_a+'.KAL'))
   ?};

   1
?}


\r_wzcz_fld_blank_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustawia wartość początkową wybranych pól tabeli R_WZCZ dla webTerma
::   WE: _a - Alias tabeli.
::----------------------------------------------------------------------------------------------------------------------
R_WZCZ.P:=null();
R_WZCZ.PRZ:=null();
R_WZCZ.ZLBR:=null();
R_WZCZ.TWRKPLC:=null();
R_WZCZ.PROJZAS:=null();
R_WZCZ.PROJEKTY:=null();
R_WZCZ.PROJHARM:=null();
R_WZCZ.TWRKZBR:=null();
R_WZCZ.OS_VIEW:=null();

R_WZCZ.MASKA:='';
R_WZCZ.REKORD:=0;

R_WZCZ.CZESC:=null();

{? var_pres('_a')<>type_of(R_WZCZ)
|| return(0)
?};

{? _a=P | _a=PRZ | _a=ZLBR | _a=TWRKPLC | _a=PROJZAS | _a=PROJEKTY | _a=PROJHARM | _a=TWRKZBR | _a=OS_VIEW
||
   _fml:="R_WZCZ."+(2-!_a)+":="+!_a+".ref()";
   ($_fml)();
   _fml:="R_WZCZ.MASKA:="+!_a+".name()";
   ($_fml)();
   _fml:="R_WZCZ.REKORD:="+!_a+".ref()";
   ($_fml)();

   {? var_pres('KAL',_a)=26
   || _fml:="R_WZCZ.CZESC:="+!_a+".KAL";
      ($_fml)()
   ?};
   1
?}


\r_wzcz_owner
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła sprawdza na rzecz jakiej tabeli odbywać się będzie redakcja wzorców czasu pracy. Wymaga wcześniejszego
::       ustawienia kontekstu pracy poprzez prawidłowe wywołanie \std_ref.
::   WE: _a - Czy wymagana jest pełna obsługa?
::          1 - Tak [domyślnie];
::          0 - Nie.
::   WY: Alias tabeli-właściciela lub ~~.
::----------------------------------------------------------------------------------------------------------------------
_cntx:={? var_pres('_a')=type_of(0) || _a || 1 ?};
{? _cntx
|| R_WZCZ.cntx_psh();
   R_WZCZ.blank()
?};
_ret:=
   {? R_WZCZ.P
   || P
   |? R_WZCZ.PRZ
   || PRZ
   |? R_WZCZ.ZLBR
   || ZLBR
   |? R_WZCZ.TWRKPLC
   || TWRKPLC
   |? R_WZCZ.PROJZAS
   || PROJZAS
   |? R_WZCZ.PROJEKTY
   || PROJEKTY
   |? R_WZCZ.PROJHARM
   || PROJHARM
   |? R_WZCZ.TWRKZBR
   || TWRKZBR
   |? R_WZCZ.OS_VIEW
   || OS_VIEW
   || ~~
   ?};
{? _cntx
|| R_WZCZ.cntx_pop()
?};
_ret


\dod_kal_czesc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Tworzy kalendarz częściowy i uzupełnia wpisy w R_WZCZ dla bieżącego rekordu we wskazanej tabeli.
::   WE: _a - Alias do tabeli, dla której edytowane będą rekordy w tabeli R_WZCZ, dopuszczalne
::            wartości to: P, PRZ, ZLBR, TWRKPLC, PROJZAS, PROJEKTY, PROJHARM, TWRKZBR, OS_VIEW.
::   WY: Wskazanie na utworzony lub znaleziony rekord w tabeli KAL_NAZW właściwy dla rekordu w tabeli _a.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(R_WZCZ) |
   (_a<>P & _a<>PRZ & _a<>ZLBR & _a<>TWRKPLC & _a<>PROJZAS & _a<>PROJEKTY & _a<>PROJHARM & _a<>TWRKZBR & _a<>OS_VIEW) |
   var_pres('KAL',_a)<>26
|| return(null())
?};
_webTerm:=app_info('web_sesid')<>'';
{? ~_webTerm
:: Zapamiętanie formuł obsługi pól tabeli R_WZCZ (na wszelki wypadek wszystkich, a nie tylko na wartość początkową).
|| _fop:=exec('save_fml_all','#field',R_WZCZ);
:: Ustawienie odpowiednich formuł na wartość początkową.
   exec('r_wzcz_fld_fml','kaledit',_a)
?};

_val:=null();
_err:='';

_ds:=do_state();
{? _ds=0 || do()
|? _ds=2 || return(null())
?};

_a.get();

KAL_NAZW.cntx_psh();
KAL_NAZW.index('KAL_NAZW');
KAL_NAZW.prefix(exec('ref_firma','ustawienia'));

R_WZCZ.cntx_psh();
R_WZCZ.index('R_WZWND');
R_WZCZ.prefix(_a.name(),_a.ref(),'N','N');
{? R_WZCZ.first()
|| _val:=_a.KAL

|| _nazwa:=%255+$_a.ref();
:: Sprawdź, czy istnieje kalendarz cząstkowy.
   {? KAL_NAZW.find_key(_nazwa,_nazwa)
   || _val:=KAL_NAZW.ref()
   || KAL_NAZW.blank();
      KAL_NAZW.NAZWA:=_nazwa;
      KAL_NAZW.CZESC:='T';
::    Utwórz kalendarz
      {? KAL_NAZW.add(1)
      || _val:=KAL_NAZW.ref()
      || _err:='Utworzenie kalendarza nie powiodło się.'@;
         undo(_err)
      ?}
   ?};

   {? _err=''
::    Tworzenie zapisu początkowego
   || R_WZCZ.blank();
      {? _webTerm || exec('r_wzcz_fld_blank_web','kaledit',_a) ?};
      R_WZCZ.OD:=
::       Data zatrudnienia pracownika
         {? _a=P
         || date(P.DZA~1,P.DZA~2,1)
::       Dla pozostałych zasobów - pierwszy dzień poprzedniego roku (rozbudować, jeżeli powstaną inne kryteria)
         || date((date()~1)-1,1,1)
         ?};
      R_WZCZ.KAL:={? _a.KAL & _a.KAL().CZESC='N' || _a.KAL || exec('standard_ref','kalendarz') ?};
      R_WZCZ.CZESC:=_val;
      R_WZCZ.UKRYTY:='N';
      R_WZCZ.GRAFIK:='N';
      R_WZCZ.clear();
      {? ~R_WZCZ.add(1)
      || _err:='Utworzenie wzorca nie powiodło się.'@;
         undo(_err)

::       Ustaw kalendarz
      || _a.KAL:=_val;
         _a.cntx_psh();
         _a.clear();
         {? ~_a.put(1)
         || _err:='Aktualizacja kartoteki nie powiodła się.'@;
            undo(_err)
         ?};
         _a.cntx_pop()
      ?}
   ?}
?};

R_WZCZ.cntx_pop();
KAL_NAZW.cntx_pop();

{? _ds=0
|| end();
   _client:=exec('cli_ver','#system');
   {? _err<>'' & (_client='jterm' | _client='interm')
   || FUN.emsg(_err)
   ?}
?};

{? ~_webTerm
:: Przywrócenie formuł obsługi pól tabeli R_WZCZ.
|| exec('restore_fml_all','#field',R_WZCZ,_fop)
?};

_val


\usun_ukr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Usuwa zapisy ukryte przed użytkownikiem.
::   WE: _a - Alias tabeli, dla której usuwane będą zapisy ukryte.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(R_WZCZ)
|| FUN.error('\\usun_ukr/kaledit.fml\nBrak obowiązkowego parametru wywołania [OWNER].');
   return()
?};

R_WZCZ.cntx_psh();
R_WZCZ.index('R_WZWND');
R_WZCZ.prefix(_a.name(),_a.ref(),'N','T');
{? R_WZCZ.first() || {! |? R_WZCZ.del() !} ?};
R_WZCZ.cntx_pop()


\norm_kal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Dokonuje normalizacji w tabeli R_WZCZ
::   WE: _a - Alias tabeli, dla której normalizowane będą zapisy. Wymagane jest wcześniejsze prawidłowe wypełnienie
::            bufora tabeli _a.
::----------------------------------------------------------------------------------------------------------------------
R_WZCZ.cntx_psh();
R_WZCZ.index('R_WZCZ');
R_WZCZ.prefix(_a.name(),_a.ref());
{? R_WZCZ.first()
|| {!
   |? _kin:=R_WZCZ.KIN;
      {? R_WZCZ.KAL().CZESC='T'
      || R_WZCZ.cntx_psh();
         _OD:=R_WZCZ.OD+1;
         _kal:=null();
         {!
         |? R_WZCZ.prev() & _kal=null()
         |! {? R_WZCZ.KAL().CZESC='N'
            || _kal:=R_WZCZ.KAL;
               _kin:=R_WZCZ.KIN
            ?}
         !};
         R_WZCZ.cntx_pop();
         R_WZCZ.cntx_psh();
         {? R_WZCZ.next() & R_WZCZ.OD=_OD
         || _kal:=null()
         ?};
         R_WZCZ.cntx_pop();
         {? R_WZCZ.KIN<>_kin
         || R_WZCZ.KIN:=_kin;
            R_WZCZ.put()
         ?};
         {? _kal
         || R_WZCZ.OD:=R_WZCZ.OD+1;
            R_WZCZ.KAL:=_kal;
            R_WZCZ.KIN:=_kin;
            R_WZCZ.UKRYTY:='T';
            R_WZCZ.add()
         || R_WZCZ.next()
         ?}
      || _kal:=R_WZCZ.KAL;
         _grafik:=R_WZCZ.GRAFIK;
         {? R_WZCZ.next()
         || {? R_WZCZ.KAL=_kal & R_WZCZ.KIN=_kin & R_WZCZ.GRAFIK=_grafik
            || R_WZCZ.del() & R_WZCZ.first()
            || 1
            ?}
         ?}
      ?}
   !}
?};
R_WZCZ.cntx_pop()


\graf_in_okres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Funkcja sprawdza czy w okresie rozliczeniowym zawierającym przekazaną datę pracownik ma przypisany grafik.
::   WE: _a - P.ref().
::       _b - Data kontroli.
::   WY: 0 lub 1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null()) || return(0) || _p_ref:=_a ?};
{? var_pres('_b')<>type_of(date()) || return(0) || _data:=_b ?};
_ret_val:=0;
P.cntx_psh();
P.clear();
{? P.seek(_p_ref)
|| _okrp_ref:=exec('find_okr','grafik',_p_ref,_data,'okrp');
   A_OKRP.cntx_psh();
   A_OKRP.clear();
   {? _okrp_ref & A_OKRP.seek(_okrp_ref)
   || R_WZCZ.cntx_psh();
      R_WZCZ.index('R_WZWND');
      R_WZCZ.prefix(P.name,#P.ref,'N','N');
      {? R_WZCZ.find_le(A_OKRP.DO)
      || _dalej:=1;
         {!
         |? {? (R_WZCZ.OD<=A_OKRP.DO) & (R_WZCZ.GRAFIK='T')
            || _dalej:=0;
               _ret_val:=1
            ?};
            _dalej & R_WZCZ.next()
         !}
      ?};
      R_WZCZ.cntx_pop();
::    Jeżeli nie znaleziono zapisów we wzorcach to sprawdź czy pracownik ma zaznaczone grafikowanie.
      {? _ret_val=0 & A_OKRP.P().GRAFIK='T' || _ret_val:=1 ?}
   ?};
   A_OKRP.cntx_pop()
?};
P.cntx_pop();
_ret_val


\grafik_rwzcz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Funkcja sprawdzająca czy wpis w R_WZCZ jest grafikiem.
::   WE: _a - data badania
::       _b - alias do tabeli
::   WY: 0 lub 1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(date()) || return(0) || _data:=_a ?};
{? var_pres('_b')<>type_of(R_WZCZ) || return(0) || _tab:=_b ?};

R_WZCZ.cntx_psh();
R_WZCZ.index('R_WZWND');
R_WZCZ.prefix(_tab.name(),_tab.ref(),'N','N');
_ret_val:=R_WZCZ.find_le(_data) & R_WZCZ.GRAFIK='T';
R_WZCZ.cntx_pop();
_ret_val


\kal_wzor_szukaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyszukuje wzorzec kalendarza o podanej nazwie.
::   WE: _a - nazwa wzorca
::   WY: wskazanie na rekord tabeli KAL_WZOR lub null jeśli nie znaleziono zapisu
::----------------------------------------------------------------------------------------------------------------------
KAL_WZOR.index('KAL_WZOR');
KAL_WZOR.prefix(exec('ref_firma','ustawienia'));
{? KAL_WZOR.find_key(_a,_a)
|| KAL_WZOR.ref()
|| null()
?}


\kal_def_akt_czas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po redakcji pól TYP, DATAW, POCZATEK, KONIEC tabeli KAL_DEF
::----------------------------------------------------------------------------------------------------------------------
_acr:=cur_afld();
{? (_acr='POCZATEK' & KAL_DEF.POCZATEK~1>23) | (_acr='KONIEC' & KAL_DEF.KONIEC~1>23)
|| FUN.info('Nieprawidłowa godzina.'@);
   return(0)
?};

exec('kal_def_akt_czas_licz','kaledit');

{? _acr='TYP' | _acr='DATA'
|| _wzorzec:=__KAL.wzo_name(KAL_DEF.DATA);
   _typWS:=exec('askTypValue','kaledit',KAL_DEF.TYP,KAL_DEF.DATA,0,_wzorzec);
   {? type_of(_typWS)<>0
   || KAL_DEF.TYP:=(1+_typWS);
      KAL_DEF.TYPWS:=(_typWS+1)
   ?};
   {? ~exec('czyTypWS_OK','kaledit',KAL_DEF.DATA,KAL_DEF.TYP,KAL_DEF.TYPWS,_wzorzec)
   || VAR1.TYPWS:=''
   ?}
?};
exec('kal_def_efld_opt','kaledit');

1


\kal_def_akt_czas_licz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
::  MOD: MicKoc [22.26]
:: OPIS: Formuła przelicza wartości pól rekordu KAL_DEF.
::       Uwaga!!! - kontekst tabeli musi być ustalony.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? KAL_DEF.DATAW<KAL_DEF.DATA
|| KAL_DEF.DATAW:=KAL_DEF.DATA
?};
_przerwy:=exec('isEnabled','prc_przerwy');
_t0:=time(0,0,0);

{? KAL_DEF.TYP='W' | KAL_DEF.TYP='S'
|| KAL_DEF.DATAW:=KAL_DEF.DATA;
   KAL_DEF.POCZATEK:=KAL_DEF.KONIEC:=KAL_DEF.CZAS:=_t0;
   {? _przerwy
   || KAL_DEF.P_DATA:=#0;
      KAL_DEF.P_START:=KAL_DEF.P_CZAS:=*0
   ?}

|? KAL_DEF.TYP='R' & (KAL_DEF.POCZATEK=_t0 & KAL_DEF.KONIEC=_t0 & KAL_DEF.DATAW=KAL_DEF.DATA)
|| _wzorzec:=exec('kal_wzor_szukaj','kaledit',__KAL.wzo_name(KAL_DEF.DATA));
   _poczatek:=exec('poczatekRCP','kaledit',KAL_DEF.ref());
   {? var_pres('_poczatek')=type_of(time)
   || _a.POCZATEK:=_poczatek
   |? _wzorzec<>null()
   || KAL_OPIS.cntx_psh();
      KAL_OPIS.index('KAL_OPIS');
      KAL_OPIS.prefix(_wzorzec);
      {? KAL_OPIS.find_key(KAL_DEF.DATA~1,KAL_DEF.DATA~4)
      || KAL_DEF.DATAW:=KAL_DEF.DATA+KAL_OPIS.DNI;
         KAL_DEF.POCZATEK:=KAL_OPIS.POCZATEK;
         KAL_DEF.KONIEC:=KAL_OPIS.KONIEC;
         KAL_DEF.CZAS:=KAL_OPIS.CZAS
      ?};
      KAL_OPIS.cntx_pop();
      {? _przerwy & (KAL_DEF.P_DATA>#0 | KAL_DEF.P_START>*0 | KAL_DEF.P_CZAS>*0)
      || {? KAL_DEF.P_CZAS>*0 || KAL_DEF.CZAS-=KAL_DEF.P_CZAS ?}
      ?}
   ?}
?};

_start:=exec('create','#tm_stamp',KAL_DEF.DATA,KAL_DEF.POCZATEK);
_end:=exec('create','#tm_stamp',KAL_DEF.DATAW,KAL_DEF.KONIEC);
_czas:=_end-_start;
{? _czas>0
|| KAL_DEF.CZAS:=KAL_DEF.KONIEC-KAL_DEF.POCZATEK;
   KAL_DEF.CZAS+=*((KAL_DEF.DATAW-KAL_DEF.DATA)*60*24);
   {? exec('isEnabled','prc_przerwy') & (KAL_DEF.P_DATA>#0 | KAL_DEF.P_START>*0 | KAL_DEF.P_CZAS>*0)
   || {? KAL_DEF.P_CZAS>*0 || KAL_DEF.CZAS-=KAL_DEF.P_CZAS ?}
   ?}
|| KAL_DEF.CZAS:=_t0
?};

~~


\kal_def_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli KAL_DEF. Formuła wywoływana jest w dwóch
::       kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(OSOBA)
|| _tab:=_b
|? _tryb='1'
|| _tab:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='TYP' | _fld='OD'
|| exec('var1_typws_bd','kaledit')
?};

1


\mod_pkal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Dokonuje modyfikacji kalendarza pracownika.
::   WE: _a - Alias tabeli, której dotyczą zapisy.
::       _b - Data przed zmianą (w poprzedniej wersji __WZCZ[2]).
::       _c - Data po zmianie (w poprzedniej wersji __WZCZ[3]).
::   WY: 1 - dokonano modyfikacji kalendarza, 0 - w przeciwnym wypadku
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(R_WZCZ)
|| _owner:=_a
|| FUN.error('\\mod_pkal/kaledit.fml\nBrak obowiązkowego parametru wywołania [OWNER].');
   return(0)
?};
{? var_pres('_b')=type_of(date())
|| _dtb:=_b
|| FUN.error('\\mod_pkal/kaledit.fml\nBrak obowiązkowego parametru wywołania [DTB].');
   return(0)
?};
{? var_pres('_c')=type_of(date())
|| _dta:=_c
|| FUN.error('\\mod_pkal/kaledit.fml\nBrak obowiązkowego parametru wywołania [DTA].');
   return(0)
?};

_d0:=date(0,0,0);

: Zachowaj zawartość bufora
_size:=KAL_DEF.fld_num();
_def:=obj_new(_size);
{! _lp:=1 .. _size
|! _def[_lp]:=KAL_DEF[_lp]
!};

KAL_ROK.cntx_psh();
KAL_ROK.index('KAL_ROK');
KAL_ROK.prefix(_owner.KAL);

KAL_DEF.cntx_psh();
KAL_DEF.index('KAL_DEF');

:: Dla zapisów nie dotyczących pracownika - usuń poprzedni dzień (jeśli data zerowa to nie robi nic).
:: Jeśli usunięty dzień był ostatnim w roku, to usuń rok.
:: Ponieważ grafiki 'chodzą' na kalendarzu cząstkowym pracownika to nie usuwamy dni tego kalendarza.
{? _dtb<>_d0 & _owner<>P & KAL_ROK.find_key(_dtb~1)
|| KAL_DEF.prefix(KAL_ROK.ref());
   {? KAL_DEF.find_key(_dtb)
   || KAL_DEF.del();
      {? ~KAL_DEF.first()
      || KAL_ROK.del()
      ?}
   ?}
?};

: Wywołanie przez akcję "Usuń"
{? _dta=_d0
|| KAL_DEF.cntx_pop();
   KAL_ROK.cntx_pop();
   return(1)
?};

_kal_rok:=null();
:: Dla pracownika sprawdza czy jest utworzony cały rok kalendarza i jeśli nie to go tworzy
{? _owner=P
|| __KAL.no_err(1);
   _kal_rok:=exec('jest_rok','kaledit',_owner.KAL,_dta,,1);
   __KAL.set_cal(P.KAL);
   __KAL.no_err(0)


:  Dla pozostałych zasobów dodawany jest tylko pojedynczy zapis odstępstwa
|| {? KAL_ROK.find_key(_dta~1)
:     Czy dla nowego dnia istnieje rok?
   || _kal_rok:=KAL_ROK.ref()
:     Jeśli nie, to utwórz właściwy zapis
   || KAL_ROK.blank(1);
      KAL_ROK.NAZWA:=_owner.KAL;
      KAL_ROK.ROK:=_dta~1;
      {? KAL_ROK.add()
      || _kal_rok:=KAL_ROK.ref()
      ?}
   ?}
?};
_ret:=0;
{? _kal_rok<>null()
|| KAL_DEF.prefix(_kal_rok);
:  czy istnieje juz informacja dla dnia?
:  jeśli tak, to zapis ma byc aktualizowany
   _update:=KAL_DEF.find_key(_dta);
   _status:={? _update || KAL_DEF.STATUS || '' ?};

:  Przywróć zawartość bufora
   {! _lp:=1 .. _size
   |! KAL_DEF[_lp]:=_def[_lp]
   !};

   {? _update || KAL_DEF.STATUS:=_status ?};
   KAL_DEF.ROK:=_kal_rok;
   KAL_DEF.DR:=(KAL_DEF.TYP='R');
   KAL_DEF.DW:=(KAL_DEF.TYP='W');
   KAL_DEF.DS:=(KAL_DEF.TYP='S');
   KAL_DEF.GR:=KAL_DEF.CZAS;
   _ret:=
      {? _update
      || KAL_DEF.put()
      || KAL_DEF.add()
      ?}
?};
KAL_DEF.cntx_pop();
KAL_ROK.cntx_pop();
_ret


\wzczopis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Ustala opis właściwy dla dnia przekazanego przez argument. Do ustalenia opisu wykorzystywany jest wzorzec
::       kalendarza standard właściwy na rok dnia.
::   WE: _a - data, dla której ma byc ustalony opis
::   WY: Opis określony przez wzorzec kalendarza standard, lub nazwa dnia tygodnia, jeśli odnalezienie wzorca
::       nie powiodło się.
::----------------------------------------------------------------------------------------------------------------------
_opis:=_a$7*','-1+_a$7;
KAL_NAZW.cntx_psh();
KAL_NAZW.index('KAL_NAZW');
KAL_NAZW.prefix(exec('ref_firma','ustawienia'));
{? KAL_NAZW.find_key('standard')
|| KAL_OPIS.cntx_psh();
   KAL_OPIS.index('KAL_OPIS');
   KAL_OPIS.prefix(KAL_NAZW.ref(),_a~1);
   KAL_OPIS.blank(1);
   KAL_OPIS.DATA:={? _a<>date(0,0,0) || $_a || '' ?};
   {? KAL_OPIS.find_rec()
   || _opis:=KAL_OPIS.OPIS
   ?};
   KAL_OPIS.cntx_pop()
?};
KAL_NAZW.cntx_pop;
_opis


\r_wzcz_od_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowaniem pola R_WZCZ.OD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
{? var_pres('_par')>100 & var_pres('val',_par)>100 & var_pres('OD',_par.val)=type_of(date())
:  Jeżeli istnieje odpowiedni parametr - zapamiętujemy wartość pola przed jego zmianą (przed redagowaniem).
|| _par.val.OD:=fld()
?};
1


\r_wzcz_od_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola R_WZCZ.OD.
::   WE:
::   WY:
::  OLD: \wzczodae/kaledit.fml
::  OLD: \wc_kalbs/kaledit.fml
::  OLD: \wc_dnibs/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_red:=R_WZCZ.win_edit('?');
{? _red*'DNI'
|| _fld:=fld();
   {? _fld<>date(0,0,0)
   || __KAL.get_day(_fld);
      _opis:=exec('wzczopis','kaledit',_fld);
      {? KAL_DEF.OPIS<>_opis
      || KAL_DEF.OPIS:=_opis
      ?};
      {? params_get().val.OD<>_fld
      || KAL_DEF.DATA:=KAL_DEF.DATAW:=_fld;
         exec('kal_def_akt_czas','kaledit')
      ?}
   ?};
   1

|| 1
?}


\r_wzcz_kal_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Obsługa akcji "Rekord - przed" w okienku KAL lub ZAS tabeli R_WZCZ.
::       Funkcja ustala właściwy zestaw akcji zależny od bieżącego rekordu.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::  OLD: \wckalrpr/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _ga:='';
   {? R_WZCZ.P
:     Jeżeli to nie jest grafik - wyszarzamy akcję Grafik.
   || {? cur_win(1,1)<>'KAL'
      || _ga+={? R_WZCZ.GRAFIK='T' || '' || 'G' ?}
      ?}

:     Dla kalendarzy nie związanych z pracownikiem akcję grafiki ukrywamy.
   || R_WZCZ.actions(cur_win(1,1),'G',,1)
   ?};

   _ga+=
:     Jeżeli kalendarz dotyczy pracownika - wyszarzamy akcję Usuń dla pierwszego rekordu (wg daty zatrudnienia).
      {? R_WZCZ.P & R_WZCZ.OD<=P.DZA || 'U' || '' ?}+
:     Jeżeli kalendarz dotyczy zasobu (ZLBR, TWRKPLC, TWRKZBR) - wyszarzamy akcję Usuń
:     dla pierwszego rekordu bezwzględnie.
      {? (R_WZCZ.ZLBR | R_WZCZ.TWRKPLC | R_WZCZ.TWRKZBR) &
         (R_WZCZ.cntx_psh(); _prev:=R_WZCZ.prev(); R_WZCZ.cntx_pop(); ~_prev)
      || 'U'
      || ''
      ?};

:  Ewentualne ukrywanie akcji/przycisku "Zakończ", jeżeli okno jest wyświetlane w ramach mechanizmu zakładek
:  obszarów roboczych dziedziny PKD.
   _par:=params_get();
   {? var_pres('_par')>100 & var_pres('cfg',_par)>100 & var_pres('done',_par.cfg)>100 &
      var_pres('empty',_par.cfg.done)=type_of('') & var_pres('noempty',_par.cfg.done)=type_of('')
   || _ga:=_par.cfg.done.noempty+_ga+':'+_par.cfg.done.empty
   ?};

   R_WZCZ.actions_grayed(cur_win(1,1),_ga)
?};
~~


\r_wzcz_kal_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wyświetl - przed" w okienku KAL tabeli R_WZCZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R_WZCZ.efld_opt('KAL','enable='+$(R_WZCZ.P<>null()),,'GRAFIK');
R_WZCZ.display()


\r_wzcz_kal_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Obsługa akcji "Dołącz - przed" w okienku KAL tabeli R_WZCZ.
::   WE:
::   WY:
::  OLD: \mod_kal/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
__czy_kwalifikacja:='N';
exec('KOMM','#object');
KOMM.init(,,'Wnioski o nadgodziny niezgodne z grafikiem'@);

R_WZCZ.blank();
R_WZCZ.win_edit('KAL');
R_WZCZ.efld_opt('KAL','enable='+$(R_WZCZ.P<>null()),,'GRAFIK');
{? R_WZCZ.edit("exec('r_wzcz_kal_ae','kaledit',null())")
|| _owner:=exec('r_wzcz_owner','kaledit',0);
   exec('usun_ukr','kaledit',_owner);
   _odp:=1;
   _gio:=R_WZCZ.P & exec('graf_in_okres','kaledit',R_WZCZ.P,R_WZCZ.OD);
   {? _gio & (R_WZCZ.GRAFIK<>'T')
   || _data_ok:=exec('kon_okr','grafik',R_WZCZ.P,R_WZCZ.OD);
      _odp:=FUN.ask(
         'Isnieje utworzony grafik dla pracownika w okresie rozliczeniowym '+
         'pokrywającym się z datą zmiany wzorca kalendarza.\n'+
         'Zaleca się aby zmiana wzorca nastąpiła po zakończeniu okresu rozliczeniowego,\n'+
         'czyli od '+$(_data_ok+1)+'.\n'+
         'Czy dodać nowy wzorzec kalendarza od ' + $R_WZCZ.OD +'?'
      )
   ?};
   {? _odp
   || {? _gio
      || R_WZCZ.GRAFIK:='T'
      ?};
      {!
      |? ~R_WZCZ.add(1)
      |! R_WZCZ.OD+=1
      !};
      {? _gio
      || exec('jest_grafik_rok','grafik',R_WZCZ.P,date(R_WZCZ.OD~1,1,1))
      ?}
   ?};
   exec('norm_kal','kaledit',_owner)
?};
R_WZCZ.efld_opt('KAL','enable=1',,'GRAFIK');

:: Uwagi dotyczące wniosków o nadgodziny
{? ~KOMM.empty()
|| KOMM.select()
?};

:: Sprawdzamy, czy zmiany wpłynęły kwalifikacji
{? __czy_kwalifikacja='T'
|| FUN.info('Zmiany we wzorcach wpływają na wprowadzoną kwalifikację czasu pracy.\n'
            'Należy wykonać ponowną kwalifikację.'@)
?};
VAR_DEL.delete('__czy_kwalifikacja');
~~


\r_wzcz_kal_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Obsługa akcji "Popraw - przed" w okienku KAL tabeli R_WZCZ.
::   WE:
::   WY:
::  OLD: \mod_kal/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
__czy_kwalifikacja:='N';
exec('KOMM','#object');
KOMM.init(,,'Wnioski o nadgodziny niezgodne z grafikiem'@);

R_WZCZ.win_edit('KAL');
R_WZCZ.efld_opt('KAL','enable='+$(R_WZCZ.P<>null()),,'GRAFIK');
{? R_WZCZ.edit("exec('r_wzcz_kal_ae','kaledit',R_WZCZ.ref())")
|| _owner:=exec('r_wzcz_owner','kaledit',0);
   exec('usun_ukr','kaledit',_owner);
   _odp:=1;
   _gio:=R_WZCZ.P & exec('graf_in_okres','kaledit',R_WZCZ.P,R_WZCZ.OD);
   {? _gio & (R_WZCZ.GRAFIK<>'T')
   || _data_ok:=exec('kon_okr','grafik',R_WZCZ.P,R_WZCZ.OD);
      _odp:=FUN.ask(
         'Isnieje utworzony grafik dla pracownika w okresie rozliczeniowym '+
         'pokrywającym się z datą zmiany wzorca kalendarza.\n'+
         'Zaleca się aby zmiana wzorca nastąpiła po zakończeniu okresu rozliczeniowego,\n'+
         'czyli od '+$(_data_ok+1)+'.\n'+
         'Czy poprawić datę wzorca kalendarza na ' + $R_WZCZ.OD +'?'
      )
   ?};
   {? _odp
   || {? _gio
      || R_WZCZ.GRAFIK:='T'
      ?};
      {!
      |? ~R_WZCZ.put(1)
      |! R_WZCZ.OD+=1
      !};
      {? _gio
      || exec('jest_grafik_rok','grafik',R_WZCZ.P,date(R_WZCZ.OD~1,1,1))
      ?}
   ?};
   exec('norm_kal','kaledit',_owner)
?};
R_WZCZ.efld_opt('KAL','enable=1',,'GRAFIK');

:: Uwagi dotyczące wniosków o nadgodziny
{? ~KOMM.empty()
|| KOMM.select()
?};

:: Sprawdzamy, czy zmiany wpłynęły na kwalifikację
{? __czy_kwalifikacja='T'
|| FUN.info('Zmiany we wzorcach wpływają na wprowadzoną kwalifikację czasu pracy.\n'
            'Należy wykonać ponowną kwalifikację.'@)
?};
VAR_DEL.delete('__czy_kwalifikacja');
~~


\r_wzcz_kal_ubg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Usuń - przed" w okienku KAL tabeli R_WZCZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('del_ask','#table')


\r_wzcz_kal_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Obsługa akcji "Usuń - przed" w okienku KAL tabeli R_WZCZ.
::   WE:
::   WY:
::  OLD: \mod_kal/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
__czy_kwalifikacja:='N';
exec('KOMM','#object');
KOMM.init(,,'Wnioski o nadgodziny niezgodne z grafikiem'@);

{? (R_WZCZ.sel_size() | exec('del_ask','#table'))
|| {? R_WZCZ.P<>null()
   || {? P.DZA<R_WZCZ.OD
      || R_WZCZ.del()
      ?}
:: Jeżeli kalendarz dotyczy zasobu (ZLBR, TWRKPLC, TWRKZBR) - nie usuwamy pierwszego rekordu
   |? (R_WZCZ.ZLBR | R_WZCZ.TWRKPLC | R_WZCZ.TWRKZBR)
   || {? (R_WZCZ.cntx_psh(); _prev:=R_WZCZ.prev(); R_WZCZ.cntx_pop(); _prev)
      || R_WZCZ.del()
      ?}
   || R_WZCZ.del()
   ?}
?}


\r_wzcz_kal_ua
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń - po" w okienku KAL tabeli R_WZCZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~R_WZCZ.sel_size()
|| _owner:=exec('r_wzcz_owner','kaledit',0);
   exec('usun_ukr','kaledit',_owner);
   exec('norm_kal','kaledit',_owner);

:: Uwagi dotyczące wniosków o nadgodziny
   {? ~KOMM.empty()
   || KOMM.select()
   ?};

:: Sprawdzamy, czy zmiany wpłynęły na kwalifikację
   {? __czy_kwalifikacja='T'
   || FUN.info('Zmiany we wzorcach wpływają na wprowadzoną kwalifikację czasu pracy.\n'
               'Należy wykonać ponowną kwalifikację.'@)
   ?};
   VAR_DEL.delete('__czy_kwalifikacja')
?}


\r_wzcz_kal_uag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Usuń - po" w okienku KAL tabeli R_WZCZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_owner:=exec('r_wzcz_owner','kaledit',0);
exec('usun_ukr','kaledit',_owner);
exec('norm_kal','kaledit',_owner);

:: Uwagi dotyczące wniosków o nadgodziny
{? ~KOMM.empty()
|| KOMM.select()
?};

:: Sprawdzamy, czy zmiany wpłynęły na kwalifikację
{? __czy_kwalifikacja='T'
|| FUN.info('Zmiany we wzorcach wpływają na wprowadzoną kwalifikację czasu pracy.\n'
            'Należy wykonać ponowną kwalifikację.'@)
?};
VAR_DEL.delete('__czy_kwalifikacja')


\r_wzcz_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dni poza wzorcem" w okienku KAL tabeli R_WZCZ.
::   WE:
::   WY:
::  OLD: \wc_dnibs/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_czas_be:=KAL_DEF.fld_fml('CZAS','BEFORE_EDIT',"0");

_owner:=exec('r_wzcz_owner','kaledit',0);
R_WZCZ.cntx_psh();
R_WZCZ.index('R_WZWND');
R_WZCZ.prefix(_owner.name(),_owner.ref(),'T','N');
exec('set_win','kaledit');
exec('trigKalOn','grafik');
params_set('owner',_owner);
R_WZCZ.select();
exec('trigKalOff','grafik');
R_WZCZ.cntx_pop();

KAL_DEF.fld_fml('CZAS','BEFORE_EDIT',_czas_be);
~~


\rd_zb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli R_WZCZ z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli R_WZCZ jako składowa okna grupowego tabeli P).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=R_WZCZ
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\r_wzcz_kal_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Obsługa akcji "Rekord - po" w okienku KAL (ZAS) tabeli R_WZCZ.
::   WE: _a - Ref weryfikowanego rekordu (dla akcji Popraw będzie to null()).
::   WY:
::  OLD: \spr_wzcz/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;

{? R_WZCZ.OD=date(0,0,0)
|| __CHK.err_empty('Od dnia');
   return('OD')
?};

{? R_WZCZ.P
|| _pdza1:=date(P.DZA~1,P.DZA~2,1);
   {? _ref
   || _valid:=R_WZCZ.OD;
      _od:=R_WZCZ.OD;
      R_WZCZ.cntx_psh();
      R_WZCZ.index('R_WZWND');
      R_WZCZ.prefix(P.name(),P.ref(),'N','N');
      {? R_WZCZ.first() & R_WZCZ.ref()=_ref & _od<>_pdza1
      || _valid:=_pdza1;
         FUN.emsg('Przywrócono poprawną datę (%1) obowiązywania wzorca czasu pracy.'@[$_valid])
      ?};
      R_WZCZ.cntx_pop();
      {? _od<_pdza1
      || FUN.emsg('Próba zmiany okresu obowiązywania kalendarza przed datą zatrudnienia.'@);
         return('OD')
      ?};
      R_WZCZ.OD:=_valid
   |? R_WZCZ.OD<_pdza1
   || FUN.emsg('Próba założenia kalendarza przed datą zatrudnienia.'@);
      R_WZCZ.OD:=_pdza1;
      return('OD')
   ?};
   _owner:=P

|| _owner:=exec('r_wzcz_owner','kaledit',0);
   {? ~exec('valid_date','#field',R_WZCZ.OD) || return('OD') ?}
?};

{? (_chk:=__CHK.record(R_WZCZ,,'KAL'))<>''
|| return(_chk)
?};

R_WZCZ.cntx_psh();
R_WZCZ.index('R_WZWND');
R_WZCZ.prefix(_owner.name(),_owner.ref(),'N','N');
{? R_WZCZ.find_key(R_WZCZ.OD) & R_WZCZ.ref<>_ref
|| FUN.emsg('Zapis od dnia %1 już występuje w kartotece.'@[R_WZCZ.OD$1]);
   _chk:='OD'
?};
R_WZCZ.cntx_pop();

_chk


\kal_rok_grafik_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW:
:: OPIS: Obsługa akcji "Dołącz - przed" w oknie GRAFIK tabeli KAL_ROK.
::   WE:
::   WY:
::  OLD: \grafik_03/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
KAL_ROK.cntx_psh();
KAL_ROK.win_edit('ROK');
KAL_ROK.ROK+=1;
_rok:={? KAL_ROK.edit("{? __CHK.record(KAL_ROK,,'ROK')='' & KAL_ROK.ROK>=P.DZA~1 || 1 || 0 ?}") || KAL_ROK.ROK ?};
KAL_ROK.cntx_pop();
{? _rok
|| exec('jest_rok','kaledit',P.KAL,date(_rok,1,1),R_WZCZ.KAL().NAZWA)
?}


\kal_rok_grafik_rxb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
::  MOD: MicKoc [22.26]
:: OPIS: Obsługa menu "Redaguj" w oknie GRAFIK tabeli KAL_ROK.
::   WE: _a - Rodzaj widoku:
::             'K' - Kalendarz [domyślnie];
::             'P' - Bufor planowania;
::             'G' - Bufor grafika;
::             'W' - Bufor wykonania.
::   WY:
::  OLD: \grafik_02/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_cfg:=obj_new('f_ae','widok');
_cfg.widok:={? var_pres('_a')=type_of('') & +_a=1 & 'KPGW'*_a || _a || 'K' ?};
_prac:=' [ %1 ]'[exec('P','#to_string')];
_czyPrzerwy:=exec('isEnabled','prc_przerwy');
{? _cfg.widok='K'
|| exec('trigKalOn','grafik');
   _wer:=KAL_DEF.win_sel('?');
   exec('set_win','kaledit');
   {? _czyPrzerwy
   || KAL_DEF.win_sel('GRAFIK_P')
   || KAL_DEF.win_sel('GRAFIK')
   ?};
   KAL_DEF.index('KAL_DEF');
   KAL_DEF.prefix(KAL_ROK.ref());
   KAL_DEF.hdr_sel(_prac);
   KAL_DEF.select(,KAL_DEF.find_key(date()));
   KAL_DEF.hdr_sel();
   KAL_DEF.win_sel(_wer);
   exec('trigKalOff','grafik')
|| _title:=
      {? _cfg.widok='P'
      || 'Bufor planowania'@
      |? _cfg.widok='G'
      || 'Bufor grafiku'@
      |? _cfg.widok='W'
      || 'Bufor wykonania'@
      ?};
  _title+=_prac;
   _query:=
      'select DATA, DATAW, TYP, TYPWS, RODZAJ, GPW, POCZATEK, KONIEC, CZAS, OPIS, STATUS, CZY_OKR '+
      {? _czyPrzerwy || ', P_DATA, P_START, P_CZAS ' || '' ?}+
      'from KAL_BUFF '+
      'where KAL_BUFF.P=:_a and ((KAL_BUFF.GPW=\':_b\' and KAL_BUFF.CZY_OKR=\'T\') '+
      {? _cfg.widok='W'
      || "or KAL_BUFF.GPW='Z') "
      || ') '
      ?}+
      'and SUBSTR(TO_STRING(KAL_BUFF.DATA),1,4)=:_c';
   _TAB:=sql(_query,P.ref(),_cfg.widok,$(KAL_ROK.ROK));
   _f_be:=
      "  _par:=params_get().cfg;
         _wewy:=exec('get_wewy','prc_wewy',cur_tab().DATA,P.ref());
         _brak_we:=(~_wewy.first());
         _status:=
            {? _par.widok='P'
            || exec('getPlanStat4Pr','grafik',P.ref(),cur_tab().DATA)
            |? _par.widok='G'
            || exec('get_msc_status','grafik',cur_tab().DATA)
            || ''
            ?};
         {? (_par.widok='P' & ((_status<>'Z' & _status<>'K') | (_status='K' & _brak_we)))
            |
            (_par.widok='G' & (_status<>'Z' & cur_tab().STATUS<>'Z' & _brak_we))
            |
            (_par.widok='W')
         || {? params_get().cfg.widok='P' & cur_tab().TYP='R' & __HARM.RCP(cur_tab().DATA) & __HARM.RCP_DET &
               cur_tab().POCZATEK<>__HARM.RCP_GOD
            || cur_tab().POCZATEK:=__HARM.RCP_GOD;
               FUN.emsg('Godzina rozpoczęcia została ustalona na godzinę zgodną z godziną określoną\n'+
                        'w ruchomym czasie pracy ('+__HARM.RCP_GOD$3+'), do którego został przypisany pracownik.')
            ?};
            1
         || FUN.info('%1\n%2'
               [  {? _par.widok='P'
                  || {? _status='K' & ~_brak_we
                     || 'Dla wybranego dnia zostało wprowadzone wykonanie.'@
                     || 'Dla wybranego dnia planowanie zostało zakończone.'@
                     ?}
                  |? _par.widok='G'
                  || {? _status='Z'
                     || 'Dla wybranego dnia rozliczenie miesiąca zostało zakończone.'@
                     || 'Dla wybranego dnia zostało wprowadzone wykonanie.'@
                     ?}
                  ?},
                  'Brak możliwości poprawiania.'@
               ]
            );
            0
         ?}
      ";

   _cfg.f_ae:=
      "  _tab:=cur_tab();
         _fld:={? _a=-1 || cur_afld() || '' ?};
         {? _tab.POCZATEK<=_tab.KONIEC
         || _tab.CZAS:=_tab.KONIEC-_tab.POCZATEK;
            _tab.CZAS+=(_tab.DATAW-_tab.DATA)*60*24
         || {? _tab.DATA<_tab.DATAW
            || _tab.CZAS:=*(((_tab.DATAW-_tab.DATA)*24*60)-(*_tab.POCZATEK))+_tab.KONIEC
            ?}
         ?};
         _przerwy:=exec('isEnabled','prc_przerwy');
         {? _przerwy
         || {? (_fld='P_DATA' | _fld='') & (_tab.P_DATA>#0) & ~(_tab.P_DATA=_tab.DATA | _tab.P_DATA=_tab.DATAW)
            || FUN.emsg('Data rozpoczęcia przerwy musi być zgodna z datą wejścia lub datą wyjścia.'@);
               {? _a=-1 || return(0) || return('P_DATA') ?}
            ?};
            {? (_fld='P_START' | _fld='') & _tab.P_START>time(24,0,0)
            || FUN.emsg('Godzina rozpoczęcia przerwy nie może być większa od %1.'@['24:00:00']);
               {? _a=-1 || return(0) || return('P_START') ?}
            ?};
            {? (_fld='P_CZAS' | _fld='') & _tab.P_CZAS>time(1,0,0)
            || FUN.emsg('Czas przerwy nie może być większa od %1.'@['01:00:00']);
               {? _a=-1 || return(0) || return('P_CZAS') ?}
            ?};
            {? _fld='' & ((_tab.P_DATA>#0) | (_tab.P_START>*0) | (_tab.P_CZAS>*0))
            || _prz_od:=_tab.P_START+*((_tab.P_DATA-_tab.DATA)*(*time(24,0,0)));
               _zawiera:=exec('zawiera','prc_przerwy',_tab.POCZATEK,_tab.CZAS+_tab.P_CZAS,_prz_od,_tab.P_CZAS);
               {? _zawiera=0
               || FUN.emsg('Przerwa musi przypadać na okres czasu pracy (od %1 do %2).'@
                     [$_tab.POCZATEK,$_tab.KONIEC]);
                  {? _a=-1 || return(0) || return('P_START') ?}
               ?}
            ?};
            {? _tab.P_CZAS>*0
            || _tab.CZAS-=_tab.P_CZAS
            ?}
         ?};
         {? _a<0 || return(1) ?};
         {? _tab.CZAS>time(24,0,0)
         || FUN.emsg('Czas pracy nie może być dłuższy niż 24 godziny'@);
            'KONIEC'
         || {? _a>0
            || KAL_DEF.cntx_psh();
               KAL_ROK.cntx_psh();
               _result:=exec('mod_kal_day','prc_plan',
                     P.ref(),
                     _tab.DATA,
                     _tab.DATAW,
                     _tab.TYP,
                     _tab.RODZAJ,
                     _tab.POCZATEK,
                     _tab.KONIEC,
                     _tab.CZAS,
                     params_get().cfg.widok,,,
                     _tab.TYPWS,
                     {? _przerwy || _tab.P_DATA || #0 ?},
                     {? _przerwy || _tab.P_START || *0 ?},
                     {? _przerwy || _tab.P_CZAS || *0 ?}
                  );
               {? _result
               || _tab.put()
               || FUN.emsg('%1\n%2'
                     [  'Nie udało się zmodyfikowac dnia w buforze planowania.'@,
                        'Sprawdź czy możliwa jest edycja planowania w okresie rozliczeniowym.'@
                     ]
                  )
               ?};
               KAL_ROK.cntx_pop();
               KAL_DEF.cntx_pop();
               _result
            || 1
            ?}
         ?}
      ";

   _f_rbe:=
      "  _gray:=0;
         _status:=exec('getPlanStat4Pr','grafik',P.ref(),cur_tab().DATA);
         _par:=params_get().cfg;
         A_OKRM.cntx_psh();
         A_OKRM.index('A_OKRMR');
         A_OKRM.prefix(cur_tab().DATA~1,cur_tab().DATA~2);
         {? A_OKRM.first()
         || {? A_OKRM.S='Z' | _status='X'
            || _gray:=3
            |? _status='Z'
            || _gray:=2
            ?}
         ?};
         A_OKRM.cntx_pop();
         cur_tab().actions_grayed(cur_win(),
            {? (_par.widok='P' & _gray)
               |
               (_par.widok='G' & _gray=3)
               |
               (_par.widok='W' & cur_tab.GPW='Z')
            || 'p'
            || ''
            ?}
         );
         {? (cur_tab().DATA~1=date()~1)&(cur_tab().DATA~2=date()~2)
         || Color.fnd_kol('PRC_GRAF#01#01')
         |? _gray
         || Color.fnd_kol('PRC_GRAF#01#0'+$_gray)
         ?}
      ";

   _f_rpo:=
      "  params_set(_par:=params_get());
         _tab:=cur_tab();
         {? _tab.DATAW<_tab.DATA
         || FUN.emsg('\"Data wyjścia\" nie może być wcześniejsza od \"Daty wejścia\".'@);
            0
         |? _tab.DATAW=_tab.DATA | _tab.DATAW-1=_tab.DATA
         || _start:=exec('create','#tm_stamp',_tab.DATA,_tab.POCZATEK);
            _koniec:=exec('create','#tm_stamp',_tab.DATAW,_tab.KONIEC);
            {? _koniec<_start
            || FUN.emsg('\"Godzina zakończenia\" nie może być wcześniejsza od \"Godziny rozpoczęcia\".'@);
               0
            |? -_tab.TYP='r' & _tab.CZAS=*0
            || FUN.emsg('%1\n%2'
                  [  'Dla dnia roboczego czas pracy musi być określony.'@,
                     '(należy uzupełnić godziny rozpoczęcia i zakończenia)'@
                  ]
               );
               0
            |? (-_tab.TYP='w' |  -_tab.TYP='s')
               &
               (_tab.CZAS<>*0 | _tab.POCZATEK<>*0 | _tab.KONIEC<>*0)
            || FUN.emsg('%1\n%2'
                  [  'Dla dnia wolnego lub świątecznego czas pracy nie może być określony.'@,
                     '(należy wyzerować godziny rozpoczęcia i zakończenia)'@
                  ]
               );
               0
            || _pole:=__CHK.record(_tab,,'DATAW','TYP','RODZAJ');
               {? +_pole
               || _pole
               || _par.cfg.f_ae(1)
               ?}
            ?}
         |? _tab.DATAW>_tab.DATA+1
         || FUN.emsg('Data zakończenia nie może być późniejsza od daty %1.'@[$(_tab.DATA+1)]);
            'DATAW'
         ?}
      ";

   params_set('cfg',_cfg);

:: Właściwości kolumn
   _TAB.fld_attr('POCZATEK',,2);
   _TAB.fld_attr('KONIEC',,2);
:: Formuły dla pól w tabeli
   _TAB.fld_fml('DATAW','AFTER_EDIT',"params_get().cfg.f_ae(-1)");
   _TAB.fld_fml('POCZATEK','AFTER_EDIT',"params_get().cfg.f_ae(-1)");
   _TAB.fld_fml('KONIEC','AFTER_EDIT',"params_get().cfg.f_ae(-1)");
   _TAB.fld_fml('POCZATEK','BEFORE_EDIT',"cur_tab().TYP='R'");
   _TAB.fld_fml('KONIEC','BEFORE_EDIT',"cur_tab().TYP='R'");
   {? _cfg.widok<>'W'
   || _TAB.fld_fml('POCZATEK','BEFORE_EDIT',"
         {? params_get().cfg.widok='P' & cur_tab().TYP='R' & __HARM.RCP(cur_tab().DATA) & __HARM.RCP_DET
         || FUN.info('Dla wybranego dnia godzina rozpoczęcia (%1) została określona\n'@[__HARM.RCP_GOD$3]+
                     'przez przypisanie pracownika do ruchomego czasu pracy.\n'+
                     'Brak możliwości poprawiania rozpoczęcia dnia pracy.');
            0
         || 1
         ?}");
      _TAB.fld_fml('TYP','BEFORE_EDIT',"{? params_get().cfg.widok='W' || 0 || 1 ?}");
      _TAB.fld_fml('TYPWS','BEFORE_EDIT',"0");
      _TAB.fld_fml('TYP','AFTER_EDIT',
         "  {? cur_tab().TYP<>'R' & cur_tab().TYP<>'W' & cur_tab().TYP<>'S'
            || FUN.emsg('%1 %2'['Błędny typ dnia.'@,'Dozwolone typy to: R - roboczy, W - wolny, S - świąteczny.'@])
            || {? params_get().cfg.widok='P' & cur_tab().TYP='R' & __HARM.RCP(cur_tab().DATA) & __HARM.RCP_DET
               || cur_tab().POCZATEK:=__HARM.RCP_GOD
               |? cur_tab().TYP<>'R'
               || cur_tab().POCZATEK:=cur_tab().KONIEC:=cur_tab().CZAS:=time(0,0,0)
               ?};
               1
            ?}
         "
      );
      _TAB.fld_fml('RODZAJ','AFTER_EDIT',
         "  {? cur_tab().RODZAJ<>'W' & cur_tab().RODZAJ<>'G'
            || FUN.emsg('%1 %2'['Błędny typ w polu \"Rozliczenie\".'@,'Dozwolone typy to: W - widełkowy, G - godzinowy.'@])
            || 1
            ?}
         "
      )
   ?};

:: Definicja okna wertowania
   _mob:='mobile_visible=1';
   _wer:=_TAB.mk_sel(_title,,0,'widokgrafik',,,,,'U',,,,,'maximized',,'on');
   _TAB.win_fld(_wer,,'DATA',,,10,,1,'Data'@,,'Data rozpoczęcia'@,,,,,,_mob);
   _TAB.win_fld(_wer,,'DATAW',,,10,,1,'Data wyjścia'@,,'Data zakończenia'@);
   {? _cfg.widok<>'W'
   || _TAB.win_fld(_wer,,'TYP',,,3,,1,'Rodzaj dnia'@,,'Rodzaj dnia: R-roboczy,W-wolny,S-świąteczny'@,,,,,,_mob);
      _TAB.win_fld(_wer,,'TYPWS',,,3,,1,'Rodzaj - uszczegółowienie'@,,'Dodatkowe określenie rodzaju dnia'@)
   ?};
   _TAB.win_fld(_wer,,'POCZATEK',,,8,,1,'Początek'@,,'Godzina rozpoczęcia'@,,,,,,_mob);
   _TAB.win_fld(_wer,,'KONIEC',,,8,,1,'Koniec'@,,'Godzina zakończenia'@,,,,,,_mob);
   _TAB.win_fld(_wer,,'CZAS',,,8,,1,'Czas'@,,'Czas pracy'@);
   {? _cfg.widok<>'W'
   || _TAB.win_fld(_wer,,'OPIS',,,25,,1,'Opis'@,,'Dodatkowy opis dnia pracy'@)
   ?};
   {? _cfg.widok='W'
   || _TAB.win_fld(_wer,,'GPW',,,3,,1,'Zatwierdzone?'@,,'Czy wykonanie jest zatwierdzone? (Z/W)'@,2,,"'Z'","'W'")
   || _TAB.win_fld(_wer,,'STATUS',,,3,,1,'Status'@,,'Status dnia pracy'@)
   ?};
   {? _czyPrzerwy
   || _TAB.win_fld(_wer,,'P_DATA',,,10,,1,'Data przerwy'@,,'Data rozpoczęcia przerwy'@);
      _TAB.win_fld(_wer,,'P_START',,,10,,1,'Godzina rozpoczęcia'@,,'Godzina rozpoczęcia przerwy'@);
      _TAB.win_fld(_wer,,'P_CZAS',,,10,,1,'Czas trwania'@,,'Czas trwania przerwy'@);
      _TAB.fld_fml('P_DATA','AFTER_EDIT',"params_get().cfg.f_ae(-1)");
      _TAB.fld_fml('P_CZAS','AFTER_EDIT',"params_get().cfg.f_ae(-1)");
      _TAB.fld_fml('P_START','AFTER_EDIT',"params_get().cfg.f_ae(-1)")
   ?};

:: Akcje w oknie wertowania
   {? exec('chk_role','#b__box',OPERATOR.USER,'PRC_CZP_DRGR')
   || _TAB.win_act(_wer,,'Popraw','Popraw'@@,,'Poprawienie bieżącego zapisu'@,_f_be,,1,,,,'P')
   ?};
   _TAB.win_act(_wer,,'Formuła','Legenda'@@,,'Wyświetlenie legendy'@,,"exec('legenda_grafik','kaledit')",,1,,,
      'L',,'target=window'
   );
   _TAB.win_act(_wer,,'Rekord',,,,_f_rbe,_f_rpo);

:: Przyciski w oknie
   {? exec('chk_role','#b__box',OPERATOR.USER,'PRC_CZP_DRGR')
   || _TAB.win_btn(_wer,'text=%1,align=begin'['Popraw'@],'menu:P')
   ?};

:: Definicja okna redagowania
   _red:=_TAB.mk_edit(_title,,'edycjagrafiku');
   _TAB.win_esep(_red,'Dane podstawowe'@);
   _TAB.win_efld(_red,,'DATA',,,9,,1,'Data'@,,'Data rozpoczęcia'@);
   _TAB.win_efld(_red,,'DATAW',,,9,,,'Data wyjścia'@,,'Data zakończenia'@);
   {? _cfg.widok<>'W'
   || _TAB.win_efld(_red,,'TYP',,,9,,,'Rodzaj dnia'@,,'Rodzaj dnia: R-roboczy,W-wolny,S-świąteczny'@,,'F3_button=1');
      _TAB.fld_fml('TYP','F3',"
               _typWS:=exec('askTypValue','kaledit',,cur_tab().DATA,,__KAL.wzo_name(cur_tab().DATA));
               {? type_of(_typWS)=0
               || _res:=0
               || cur_tab().TYP:=(1+_typWS);
                  cur_tab().TYPWS:=(_typWS+1);
                  win_disp();
                  _wzor:='standard';
                  KAL_DEF.cntx_psh();
                  KAL_ROK.cntx_psh();
                  {? __KAL.get_day(cur_tab().DATA)
                  || _wzor:=__KAL.wzo_name(cur_tab().DATA)
                  ?};
                  KAL_ROK.cntx_pop();
                  KAL_DEF.cntx_pop();
                  exec('typ_dnia_ae','kaledit',cur_tab(),_wzor);
                  _res:=1
               ?}
      ");
      _TAB.win_efld(_red,,'TYPWS',,,12,,1,'Rodzaj - uszczegółowienie'@,,'Dodatkowe określenie rodzaju dnia'@)
   ?};
   _TAB.win_efld(_red,,'POCZATEK',,,12,,,'Początek'@,,'Godzina rozpoczęcia'@);
   _TAB.win_efld(_red,,'KONIEC',,,12,,,'Koniec'@,,'Godzina zakończenia'@);
   _TAB.win_efld(_red,,'CZAS',,,12,,1,'Czas'@,,'Czas pracy'@);
   {? _cfg.widok<>'W'
   || _TAB.win_efld(_red,,'OPIS',,,25,,,'Opis'@,,'Dodatkowy opis dnia pracy'@)
   ?};
   {? _czyPrzerwy
   || _TAB.win_esep(_red,'Przerwa'@);
      _TAB.win_efld(_red,,'P_DATA',,,'9,12,',,,'Data'@,,'Data rozpoczęcia przerwy'@);
      _TAB.win_efld(_red,,'P_START',,,'12,10,',,,'Godzina rozpoczęcia'@,,'Godzina rozpoczęcia przerwy'@);
      _TAB.win_efld(_red,,'P_CZAS',,,'12,10,',,,'Czas'@,,'Czas trwania przerwy'@)
   ?};

   _TAB.efld_opt(_red,'mark=1',,'DATAW');
   {? _cfg.widok<>'W'
   || _TAB.efld_opt(_red,'mark=1',,'TYP')
   ?};
   exec('ok_esc','#window',_TAB,_red,,,,,,,exec('text_red_ok','#window'));

   _TAB.index(_TAB.ndx_tmp(,1,'DATA',,));
   _TAB.win_edit(_red);
   _TAB.win_sel(_wer);
   _TAB.select(,_TAB.find_key(date()));
   _TAB.ndx_drop()
?};
obj_del(_cfg);
~~


\r_wzcz_dni_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknie DNI tabeli R_WZCZ.
::   WE:
::   WY:
::  OLD: \mod_dni/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
KAL_DEF.cntx_psh();
__KAL.get_day(date());
R_WZCZ.blank();
R_WZCZ.OD:=KAL_DEF.DATA;
_val:=obj_new('OD');
_val.OD:=R_WZCZ.OD;
params_set('val',_val);
exec('kal_def_efld_opt','kaledit','1',,'DNI','TYP');
{? R_WZCZ.edit("exec('r_wzcz_dni_ae','kaledit',null())")
|| _owner:=exec('r_wzcz_owner','kaledit',0);
   exec('usun_ukr','kaledit',_owner);
   {? exec('mod_pkal','kaledit',_owner,date(0,0,0),R_WZCZ.OD)
   || R_WZCZ.KAL:=_owner.KAL;
      R_WZCZ.add()
   ?};
   exec('norm_kal','kaledit',_owner)
?};
KAL_DEF.cntx_pop()


\r_wzcz_dni_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - przed" w oknie DNI tabeli R_WZCZ.
::   WE:
::   WY:
::  OLD: \mod_dni/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_dtb:=R_WZCZ.OD;
_val:=obj_new('OD');
_val.OD:=R_WZCZ.OD;
params_set('val',_val);
exec('kal_def_efld_opt','kaledit','1',,'DNI','TYP');
{? R_WZCZ.edit("exec('r_wzcz_dni_ae','kaledit',R_WZCZ.ref())")
|| _owner:=exec('r_wzcz_owner','kaledit',0);
   exec('usun_ukr','kaledit',_owner);
   {? exec('mod_pkal','kaledit',_owner,_dtb,R_WZCZ.OD)
   || R_WZCZ.put()
   ?};
   exec('norm_kal','kaledit',_owner)
?}


\r_wzcz_dni_ubg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Usuń - przed" w oknie DNI tabeli R_WZCZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('del_ask','#table')


\r_wzcz_dni_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń - przed" w oknie DNI tabeli R_WZCZ.
::   WE:
::   WY:
::  OLD: \mod_dni/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
R_WZCZ.sel_size() | exec('del_ask','#table')


\r_wzcz_dni_ua
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń - po" w oknie DNI tabeli R_WZCZ.
::   WE:
::   WY:
::  OLD: \mod_dni/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_gr:=R_WZCZ.sel_size();
_dzien:=R_WZCZ.OD;
_owner:=exec('r_wzcz_owner','kaledit',0);

exec('mod_pkal','kaledit',_owner,_dzien,date(0,0,0));
{? R_WZCZ.del(,1)
|| _nazwa:=exec('get_graf_wzor','grafik',P.ref(),_dzien);
   KAL_DEF.cntx_psh();
   __KAL.set_cal(_nazwa,_dzien~1);
   {? __KAL.get_day(_dzien)
   || exec('trigKalUpd','grafik',P.ref(),KAL_DEF.ref())
   ?};
   KAL_DEF.cntx_pop();
   {? ~_gr
   || exec('usun_ukr','kaledit',_owner);
      exec('norm_kal','kaledit',_owner)
   ?}
?}


\r_wzcz_dni_uag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Usuń - po" w oknie DNI tabeli R_WZCZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_owner:=exec('r_wzcz_owner','kaledit',0);
exec('usun_ukr','kaledit',_owner);
exec('norm_kal','kaledit',_owner)


\r_wzcz_dni_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - przed" w oknie DNI tabeli R_WZCZ.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::  OLD: \zn_dzien/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
__KAL.get_day(R_WZCZ.OD)


\r_wzcz_dni_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - po" w oknie DNI tabeli R_WZCZ.
::   WE: _a - Ref weryfikowanego rekordu (dla akcji Popraw będzie to null()).
::   WY:
::  OLD: \spr_wzczd/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;

{? R_WZCZ.OD=date(0,0,0)
|| __CHK.err_empty('Data');
   return('OD')
?};

_owner:=exec('r_wzcz_owner','kaledit',0);

{? _owner=P
||
   _typWS_OK:=exec('czyTypWS_OK','kaledit',KAL_DEF.DATA,KAL_DEF.TYP,KAL_DEF.TYPWS,__KAL.wzo_name(KAL_DEF.DATA));
   _typWS:={? ~_typWS_OK
           || exec('askTypValue','kaledit',KAL_DEF.TYP,KAL_DEF.DATA,,__KAL.wzo_name(KAL_DEF.DATA))
           || 1
           ?};
   {? R_WZCZ.OD<R_WZCZ.P().DZA
   || FUN.info('Dzień poza wzorcem nie powinien dotyczyć okresu sprzed nawiązania współpracy.'@);
      return('OD')
   |? exec('grafik_rwzcz','kaledit',R_WZCZ.OD,P)
   || FUN.info('W okresie obowiązywania grafiku, nie można dodawać dni poza wzorcem.'@);
      return('OD')
   |? type_of(_typWS)=0
   || return('TYP')
   || {? ~_typWS_OK
      || KAL_DEF.TYP:=(1+_typWS);
         KAL_DEF.TYPWS:=(_typWS+1);
         return('TYP')
      ?}
   ?}
?};

{? -KAL_DEF.TYP='r' & KAL_DEF.CZAS=time(0,0,0)
|| FUN.emsg(
      'Dla dnia roboczego czas pracy musi być określony.\n'
      '(należy uzupełnić godziny rozpoczęcia i zakończenia)'@
   );
   return(0)
?};

{? KAL_DEF.CZAS>time(24,0,0)
|| FUN.info('Planowany czas pracy w dniu poza wzorcem nie powinien przekraczać 24 godzin.'@)
?};

_chk:='';
R_WZCZ.cntx_psh();
R_WZCZ.index('R_WZWND');
R_WZCZ.prefix(_owner.name(),_owner.ref(),'T','N');
{? R_WZCZ.find_key(R_WZCZ.OD) & R_WZCZ.ref<>_ref
|| FUN.info('Zapis na dzień %1 już występuje w kartotece.'@[R_WZCZ.OD$4]);
      _chk:='OD'
?};
R_WZCZ.cntx_pop();
_chk


\r_wzcz_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.22]
:: OPIS: Wyzwalacz na "dołącz po" tabeli R_WZCZ
::   WE: _a [INTEGER] - wartość przekazywana do formuły przez narzędzia
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
:: Aktualizacja indywidualnego kalendarza, planowania i grafików
{? R_WZCZ.P<>null & R_WZCZ.CZESC<>R_WZCZ.KAL & R_WZCZ.UKRYTY='N'
|| exec('R_WZCZ_update','kal_dane_akt','add')
?};
exec('trig_r_wzcz_aktdane','kal_dane_akt','add');
exec('trig_aktKalNorm','grafik','add')


\r_wzcz_ap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.22]
:: OPIS: Wyzwalacz na "popraw po" tabeli R_WZCZ
::   WE: _a [INTEGER] - wartość przekazywana do formuły przez narzędzia
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
:: Aktualizacja indywidualnego kalendarza, planowania i grafików
{? R_WZCZ.P<>null & R_WZCZ.CZESC<>R_WZCZ.KAL & R_WZCZ.UKRYTY='N'
|| exec('R_WZCZ_update','kal_dane_akt','put')
?};
exec('trig_r_wzcz_aktdane','kal_dane_akt','put');
exec('trig_aktKalNorm','grafik','put')


\r_wzcz_ad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.22]
:: OPIS: Wyzwalacz na "usuń po" tabeli R_WZCZ
::   WE: _a [INTEGER] - wartość przekazywana do formuły przez narzędzia
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
:: Aktualizacja indywidualnego kalendarza, planowania i grafików
{? R_WZCZ.P<>null & R_WZCZ.CZESC<>R_WZCZ.KAL & R_WZCZ.UKRYTY='N'
|| exec('R_WZCZ_update','kal_dane_akt','del')
?};
exec('trig_r_wzcz_aktdane','kal_dane_akt','del');
exec('trig_aktKalNorm','grafik','del')


\getTypWS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Określenie typu dnia wolnego lub świątecznego
::   WE: _a  - [STRING] - typ dnia
::       _b  - [DATE]   - data
::      [_c] - [STRING] - nazwa wzorca kalendarza
::   WY:       [STRING]  - typws
::----------------------------------------------------------------------------------------------------------------------
_result:='';
    _typ:={? var_pres('_a')=type_of('')   || _a || return(_result) ?};
   _data:={? var_pres('_b')=type_of(date) || _b || return(_result) ?};
_wzorzec:={? var_pres('_c')=type_of('')   || _c || 'standard'      ?};

{? (_typ='W')
|| {? ((_data~4)=6)
   || _result:='5'
   || _result:='H'
   ?}
?};
{? (_typ='S')
|| {? ((_data~4)=7)
   || _result:='N'
   || _result:='W'
   ?}
?};
{? (_typ='R')
|| {? (_data~4)=7
   || _result:='N'
   |? __KAL.holiday(_data,_wzorzec)
   || _result:='S'
   ?}
?};
_result


\trig_kal_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Trigger przed put i add dla tabeli KAL_DEF
::   WY: 1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
KAL_DEF.TM_START:=exec('create','#tm_stamp',KAL_DEF.DATA,KAL_DEF.POCZATEK);
KAL_DEF.TM_END:=exec('create','#tm_stamp',KAL_DEF.DATAW,KAL_DEF.KONIEC);
_tws:=',R,R ,RN,RS,SN,SW,W5,WH,WN,WS,';
_tws*(','+KAL_DEF.TYP+KAL_DEF.TYPWS+',')


\trig_kal_def_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Trigger 'add - po' dla tabeli KAL_DEF
::   WE: _a [INTEGER] - wynik akcji 'add'
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a || exec('update4kal_def','pkalsync','add') ?};
{? _a || exec('trig_kal_def_aktd_aa','kal_dane_akt') ?};
~~


\trig_kal_def_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Trigger 'put - po' dla tabeli KAL_DEF
::   WE: _a [INTEGER] - wynik akcji 'put'
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a || exec('update4kal_def','pkalsync','put') ?};
{? _a || exec('trig_kal_def_aktd_ap','kal_dane_akt') ?};
~~


\trig_kal_def_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.14]
:: OPIS: Trigger 'del - po' dla tabeli KAL_DEF
::   WE: _a [INTEGER] - wynik akcji 'del'
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a || exec('trig_kal_def_aktd_ad','kal_dane_akt') ?};
~~


\askTypValue
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Wyświetla pytanie (tabelę) w celu określenia typu dnia wolnego lub świątecznego
::   WE: [_a] - [STRING]  - typ dnia
::         _b - [DATE]    - data badania
::         _c - [INTEGER] - czy wyswietlać tabelę
::       [_d] - [STRING]  - nazwa wzorca kalendarza
::   WY: typ+typws
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
    _typ:={? var_pres('_a')=type_of('')   || _a || ''              ?};
   _data:={? var_pres('_b')=type_of(date) || _b || return(_result) ?};
_showTab:={? var_pres('_c')=type_of(0)    || _c || 1               ?};
_wzorzec:={? var_pres('_d')=type_of('')   || _d || 'standard'      ?};

_tab:=exec('poprawnyTypWS','kaledit',_data,_wzorzec);

:: sprawdzenie czy ustawiony rodzaj dnia znajduje się w dopuszczalnych wartościach
_typ_ok:=1;

_win:=_tab.mk_sel('Określenie rodzaju dnia'@,,,'dodtypws1234567',,,8,,'U');
_tab.win_fld(_win,,'VALUE',,,,,,'Symbol'@,,'Kod rodzaju dnia'@);
_tab.win_fld(_win,,'OPIS',,,60,,,'Nazwa'@,,'Opis rodzaju dnia'@);
_tab.win_act(_win,,'Formuła','Wybierz'@@,,,,"sel_exit()",1);
_tab.win_sel(_win);

_tab.cntx_psh();
_ndx:=_tab.ndx_tmp('',1,'TYP',,0);
_tab.index(_ndx);
_tab.prefix(_typ);
{? _showTab
|| {? _typ<>'W'
   || _tab.prefix()
   ?};
   {!
   |? {? _tab.select()
      || _result:=_tab.VALUE;
         VAR1.TYPWS:=_tab.VALUE+' - '+_tab.OPIS
      || _result:=~~
      ?};
      0
   !}
?};
_tab.cntx_pop();
_tab.ndx_drop(_ndx);
_result


\czyTypWS_OK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Funkcja sprawdza czy w przekazanej dacie są poprawnie przyjęte wartości pól TYP i TYPWS (KAL_BUF i KAL_DEF)
::   WE: _a [DATE]   - data badania
::       _b [STRING] - wartość pola TYP z tabel KAL_BUFF lub KAL_DEF
::       _c [STRING] - wartość pola TYPWS z tabel KAL_BUFF lub KAL_DEF
::     [_d] [STRING] - nazwa wzorca kalendarza
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
   _data:={? var_pres('_a')=4 || _a || return(_result) ?};
    _typ:={? var_pres('_b')=2 || _b || return(_result) ?};
  _typWS:={? var_pres('_c')=2 || _c || ''              ?};
_wzorzec:={? var_pres('_d')=2 || _d || 'standard'      ?};

{? _typWS='' || _typWS:=' ' ?};
_value:=_typ+_typWS;

_tab:=exec('poprawnyTypWS','kaledit',_data,_wzorzec);
_tab.prefix(_value,);
_result:=_tab.first();
_result


\poprawnyTypWS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Zwraca tabelę z dozwolonymi wartościami pól TYP i TYPWS dla KAL_BUFFa lub KAL_DEFa na wskazany dzień
::   WE: _a  [DATE]   - data badania
::      [_b] [STRING] - nazwa wzorca kalendarza
::   WY: tabela z poprawnymi wartościami na daną datę
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1,
   'VALUE','STRING[2]','Wartość pól TYP+TYPWS',
   'TYP','STRING[1]','Wartość pola TYP',
   'TYPWS','STRING[1]','Wartość pola TYPWS',
   'OPIS','STRING[150]','Opis'
);

   _data:={? var_pres('_a')=4 || _a || return(_tab) ?};
_wzorzec:={? var_pres('_b')=2 || _b || 'standard'   ?};

:: dla niedzieli
{? (_data~4)=7
|| {? PAR_SKID.get(318)='T'
   || _tab.TYP:='R';
      _tab.TYPWS:='N';
      _tab.VALUE:='RN';
      _tab.OPIS:='Roboczy w niedzielę'@;
      _tab.add()
   ?};

   _tab.TYP:='S';
   _tab.TYPWS:='N';
   _tab.VALUE:='SN';
   _tab.OPIS:='Niedziela'@;
   _tab.add()

:: dla święta
|? __KAL.holiday(_data,_wzorzec)
|| {? PAR_SKID.get(319)='T'
   || _tab.TYP:='R';
      _tab.TYPWS:='S';
      _tab.VALUE:='RS';
      _tab.OPIS:='Roboczy w święto'@;
      _tab.add()
   ?};

   _tab.TYP:='S';
   _tab.TYPWS:='W';
   _tab.VALUE:='SW';
   _tab.OPIS:='Święto';
   _tab.add()

:: dla pozostałych dni
|| _tab.TYP:='R';
   _tab.TYPWS:=' ';
   _tab.VALUE:='R ';
   _tab.OPIS:='Roboczy'@;
   _tab.add();

   _tab.TYP:='W';
   _tab.TYPWS:='5';
   _tab.VALUE:='W5';
   _tab.OPIS:='Wolny - 5 dniowy tydzień pracy'@;
   _tab.add();

   _tab.TYP:='W';
   _tab.TYPWS:='H';
   _tab.VALUE:='WH';
   _tab.OPIS:='Wolny harmonogramowo'@;
   _tab.add();

   _tab.TYP:='W';
   _tab.TYPWS:='N';
   _tab.VALUE:='WN';
   _tab.OPIS:='Wolny za niedzielę'@;
   _tab.add();

   _tab.TYP:='W';
   _tab.TYPWS:='S';
   _tab.VALUE:='WS';
   _tab.OPIS:='Wolny za święto'@;
   _tab.add()
?};
_tab


\var1_typws_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: F3 dla pola TYPWS zmiennej VAR1
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wzorzec:=__KAL.wzo_name(KAL_DEF.DATA);
_typWS:=exec('askTypValue','kaledit',,KAL_DEF.DATA,,_wzorzec);
{? type_of(_typWS)<>0
|| KAL_DEF.TYP:=(1+_typWS);
   KAL_DEF.TYPWS:=(_typWS+1)
?};

:: należy odpowiednio ustawić wartości pól po zmianie typu dnia
exec('typ_dnia_ae','kaledit',KAL_DEF,_wzorzec);
VAR1.TYPWS


\typ_dnia_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.02]
:: OPIS: Formuła po zmianie typu dnia
::   WE: _a  [DICT]   - tabela do aktualizacji pól
::      [_b] [STRING] - nazwa wzorca, na podstawie którego ustawiamy wartości pól
::   WY:~~
::----------------------------------------------------------------------------------------------------------------------
 _tab:={? var_pres('_a')=type_of(P)  || _a || return(0) ?};
_wzor:={? var_pres('_b')=type_of('') || _b || ''        ?};

_t0:=time(0,0,0);
{? _tab.TYP='W' | _tab.TYP='S'
|| _tab.DATAW:=_tab.DATA;
   _tab.POCZATEK:=_tab.KONIEC:=_tab.CZAS:=_t0;
   {? _tab=KAL_DEF
   || KAL_DEF.P_DATA:=#0;
      KAL_DEF.P_START:=KAL_DEF.P_CZAS:=*0
   ?}

|? _tab.TYP='R' & (_tab.POCZATEK=_t0 & _tab.KONIEC=_t0 & _tab.DATAW=_tab.DATA)
|| {? _wzor='' || _wzor:=__KAL.wzo_name(_tab.DATA) ?};
   _wzorzec:=exec('kal_wzor_szukaj','kaledit',_wzor);
   _poczatek:=~~;
   {? _tab=KAL_DEF
   || _poczatek:=exec('poczatekRCP','kaledit',KAL_DEF.ref())
   ?};
   {? var_pres('_poczatek')=type_of(time)
   || _a.POCZATEK:=_poczatek
   |? _wzorzec<>null()
   || KAL_OPIS.cntx_psh();
      KAL_OPIS.index('KAL_OPIS');
      KAL_OPIS.prefix(_wzorzec);
      {? KAL_OPIS.find_key(_tab.DATA~1,_tab.DATA~4)
      || _tab.DATAW:=_tab.DATA+KAL_OPIS.DNI;
         _tab.POCZATEK:=KAL_OPIS.POCZATEK;
         _tab.KONIEC:=KAL_OPIS.KONIEC;
         _tab.CZAS:=KAL_OPIS.CZAS;
         {? exec('isEnabled','prc_przerwy') & KAL_OPIS.P_CZAS>*0
         || _tab.P_DATA:=_tab.DATA+(KAL_OPIS.P_OD_ND*'T');
            _tab.P_START:=KAL_OPIS.P_OD;
            _tab.P_CZAS:=KAL_OPIS.P_CZAS
         ?}
      ?};
      KAL_OPIS.cntx_pop()
   ?};
   exec('kal_def_akt_czas_licz','kaledit')
?};
~~


\var1_typws_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed wyświetleniem pola TYPWS zmiennej VAR1
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_value:=KAL_DEF.TYP+(1+(KAL_DEF.TYPWS+' '));
{? var_pres('_tab')>100 || obj_del(_tab) ?};
_wzorzec:=__KAL.wzo_name(KAL_DEF.DATA);
_tab:=exec('poprawnyTypWS','kaledit',KAL_DEF.DATA,_wzorzec);
_tab.prefix(_value,);
VAR1.TYPWS:={? _tab.first()
            || '[%1] %2'[_tab.VALUE,_tab.OPIS]
            || ''
            ?}


\kal_rok_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Usuń - przed" w oknie kalendarzy (dla konkretnego roku).
::   WE: _a [_KAL_ROK] - wskazanie roku kalendarza
::   WY: 1 - zapis może być usunięty
::       0 - zapisu nie można usunąć
::----------------------------------------------------------------------------------------------------------------------
_test:=exec('czy_rok_uzyty','kaledit',_a);

{? type_of(_test)=type_of(SYSLOG) & _test=KAL_AKTN
|| &_test;
   KAL_AKTN.cntx_psh();
   KAL_NAZW.cntx_psh();
   KAL_AKTN.index('ROK');
   KAL_AKTN.prefix(exec('firma','ustawienia'),KAL_ROK.ROK,KAL_ROK.NAZWA().NAZWA,);
   {? KAL_AKTN.first()
   || {! |? KAL_AKTN.del(1) !}
   ?};
   KAL_NAZW.cntx_pop();
   KAL_AKTN.cntx_pop();
   _test:=exec('czy_rok_uzyty','kaledit',_a)
?};
{? type_of(_test)=type_of(SYSLOG)
|| FUN.emsg(
      'Definicja kalendarza jest wykorzystywana w kartotece "%1".\n'
      'Zapisu nie można usunąć.'@
      [_test.comment()]
   )
|? type_of(_test)=type_of(null)
|| FUN.error(
      'Weryfikacja wykorzystania kalendarza nie powiodła się.\n'
      'Zapisu nie można usunąć.'@
   )
|| return(1)
?};
0


\czy_rok_uzyty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy rok kalendarzowy jest wykorzystywany.
::       Kontrolowane jest użycie w tabelach:
::       - O - w miesiącu listy płac
::       - P - w okresie zatrudnienia pracownika
::       - R_WZCZ - w okresie obowiązywania wzorca
::       (jeśli inne miejsca mają być uwzględniane, to należy to oprogramować)
::   WE: _a [_KAL_ROK] - wskazanie roku kalendarza
::   WY: - alias do tabeli, w której zapis jest wykorzystywany
::       - null - w przypadku wystąpienia błędu
::       - ~~ - zapis nie jest wykorzystywany
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null) | _a=null | ref_tab(_a)<>KAL_ROK
|| return(null)
?};

_rok:=0;
_kal:=null;
_firma:=null;
_kaln:=null();
KAL_NAZW.cntx_psh();
KAL_ROK.cntx_psh();
KAL_ROK.prefix();
{? KAL_ROK.seek(_a)
|| _rok:=KAL_ROK.ROK;
   _kal:=KAL_ROK.NAZWA;
   _kaln:=KAL_ROK.NAZWA().NAZWA;
   _firma:=KAL_ROK.NAZWA().FIRMA
?};
KAL_ROK.cntx_pop();
KAL_NAZW.cntx_pop();

{? _kal=null | _firma=null
|| return(null)
?};

: tabela KAL_AKTN
{? exec('isKalAkt','kal_dane_akt')
|| KAL_AKTN.index('ROK');
   KAL_AKTN.prefix(exec('firma','ustawienia'),_a);
   {? KAL_AKTN.find_key(_kaln,) || return(KAL_AKTN) ?}
?};

: tabela O
_T:=sql(
   'select O.REFERENCE as REF '
   'from O join KT using(O.T,KT.REFERENCE) '
   'where O.FIRMA=:_a and O.R=:_c and KT.KA=:_b ',
   _firma,_kal,_rok
);
{? type_of(_T)<>type_of(SYSLOG)
|| return(null)
|? _T.first()
|| return(O)
?};
obj_del(_T);

_od:=date(_rok,1,1);
_do:=date(_rok,12,0);

: tabela P
_T:=sql(
   'select P.REFERENCE as REF '
   'from P '
   'where P.FIRMA=:_a and P.KAL=:_b and '
   '      P.DZA<=to_date(:_c) and (P.DZ is null or to_date(:_d)<=P.DZ)',
   _firma,_kal,_od,_do
);
{? type_of(_T)<>type_of(SYSLOG)
|| return(null)
|? _T.first()
|| return(P)
?};
obj_del(_T);

: tabeli R_WZCZ
_T:=sql(
   'select distinct R_WZCZ.P '
   'from R_WZCZ join P using(R_WZCZ.P,P.REFERENCE) '
   'where P.FIRMA=:_a and R_WZCZ.KAL=:_b and R_WZCZ.OD<=to_date(:_c) ',
   _firma,_kal,_do
);

{? type_of(_T)<>type_of(SYSLOG)
|| return(null)
|| _test:=1;
   R_WZCZ.cntx_psh();
   R_WZCZ.index('R_WZWND');
   _aT:=_T.first();
   {!
   |? _aT
   |! R_WZCZ.prefix(ref_name(_T.P),ref_num(_T.P),'N','N',);
      _aR:=R_WZCZ.last();
      _kp:=_do;
      {!
      |? _aR
      |! {? R_WZCZ.KAL=_kal & R_WZCZ.OD<=_do & _od<=_kp
         || _aR:=_test:=0
         || _kp:=R_WZCZ.OD-1;
            _aR:=_od<=_kp & R_WZCZ.prev()
         ?}
      !};
      _aT:=_test & _T.next()
   !};
   R_WZCZ.cntx_pop();
   {? ~_test
   || return(R_WZCZ)
   ?}
?};
obj_del(_T);

~~


\usun_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Usuwa wszystkie wzorce dla danego zasobu
::   WE: _a - Alias tabeli, dla której usuwane będą zapisy
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(R_WZCZ)
|| FUN.error('\\usun_all/kaledit.fml\nBrak obowiązkowego parametru wywołania [OWNER].');
   return()
?};

R_WZCZ.cntx_psh();
R_WZCZ.index('R_WZWND');
R_WZCZ.prefix(_a.name(),_a.ref());
{? R_WZCZ.first() || {! |? R_WZCZ.del() !} ?};
R_WZCZ.cntx_pop()


\r_wzcz_kal_bfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Wyświetlenie grafików współpracownika.
::   WE:
::   WY:
::  OLD: \grafik_01/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
KAL_ROK.cntx_psh();
KAL_ROK.win_sel('GRAFIK');
KAL_ROK.index('KAL_ROK');
KAL_ROK.prefix(P.KAL);
KAL_ROK.find_key(date()~1);
KAL_ROK.select(,1,5);
_loop:=KAL_ROK.first();
{!
|? _loop
|! echo('Aktualizacja: '@+$KAL_ROK.ROK);
   exec('akt_rok','kaledit',KAL_ROK.NAZWA,KAL_ROK.ROK);
   _loop:=KAL_ROK.next()
!};
KAL_ROK.cntx_pop();
echo;
~~


\sum_time
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sumuje liczbe godzin w dziedzinie tabeli KAL_DEF. Uwzględniane są ograniczenia zakresu nałożone prefiksem lub
::       filtrem.
::----------------------------------------------------------------------------------------------------------------------
_tab:={? var_pres('_a')=type_of(KAL_DEF) || _a || cur_tab(1,1) ?};
KALEND.CZAS:=time(0,0,0);
{? var_pres('CZAS',_tab)<0 || return(~~) ?};

{? _tab.sel_size()
|| _tab.sel_adel();
   params_set(params_get());
   win_disp();
   KALEND.CZAS:=time(0,0,0)
?};
{? _tab.f_active()
|| _tab.f_get();
   _ref:=_tab.ref();
   _fml:="KALEND.CZAS+=cur_tab(1,1).CZAS";
   _tab.f_each(_fml,0);
   _tab.f_seek(_ref)
|| _ref:=_tab.ref();
   _loop:=_tab.first();
   {!
   |? _loop
   |! KALEND.CZAS+=_tab.CZAS;
      _loop:=_tab.next()
   !};
   _tab.seek(_ref)
?}


\kal_def_zab_czas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed redakcją pól DATAW, POCZATEK, KONIEC tabeli KAL_DEF.
::----------------------------------------------------------------------------------------------------------------------
exec('kal_zab_czas','kaledit',KAL_DEF)


\kal_zab_czas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formula przed redakcja pol POCZATEK, KONIEC, CZAS tabel KAL_OPIS i KAL_DEF.
::  OLD: \zabgodz/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_czy_mod:=(_a.TYP='R');
{? _czy_mod & cur_afld()='POCZATEK' & _a=KAL_DEF
|| _poczatek:=exec('poczatekRCP','kaledit',KAL_DEF.ref());
   {? var_pres('_poczatek')=type_of(time)
   || FUN.info('Dla wybranego dnia godzina rozpoczęcia ('+_poczatek$3+') została określona\n'+
               'przez przypisanie pracownika do ruchomego czasu pracy.\n'+
               'Brak możliwości poprawiania rozpoczęcia dnia pracy.');
      _czy_mod:=0
   ?}
?};
_czy_mod


\kal_def_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
::  MOD: MicKoc [22.26]
:: OPIS: Kontrola poprawności danych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wzorzec:=__KAL.wzo_name(KAL_DEF.DATA);
_typWS_OK:=exec('czyTypWS_OK','kaledit',KAL_DEF.DATA,KAL_DEF.TYP,KAL_DEF.TYPWS,_wzorzec);
_typWS:={? ~_typWS_OK
        || exec('askTypValue','kaledit',KAL_DEF.TYP,KAL_DEF.DATA,,_wzorzec)
        || 1
        ?};
_ret:='';
{? KAL_DEF.TYP='R' & KAL_DEF.CZAS=time(0,0,0)
|| FUN.emsg('Dla dnia roboczego czas pracy musi być określony.'@);
   _poczatek:=exec('poczatekRCP','kaledit',KAL_DEF.ref());
   {? var_pres('_poczatek')=0
   || _ret:='POCZATEK'
   || _ret:='KONIEC'
   ?}
|? type_of(_typWS)=0
|| 'TYPWS'
|| {? ~_typWS_OK
   || KAL_DEF.TYP:=(1+_typWS);
      KAL_DEF.TYPWS:=(_typWS+1);
      return('TYPWS')
   ?};
   exec('kal_def_akt_czas_licz','kaledit');
   {? KAL_DEF.CZAS>time(24,0,0)
   || FUN.emsg('Czas pracy nie może być dłuższy niż 24 godziny'@);
      _ret:='KONIEC'
   || 1
   ?}
?};
{? ~+|_ret & exec('isEnabled','prc_przerwy') & (KAL_DEF.P_DATA>#0 | KAL_DEF.P_START>*0 | KAL_DEF.P_CZAS>*0)
||
:: przerwy niepłatne
   {? KAL_DEF.P_START>time(24,0,0)
   || FUN.emsg('Godzina rozpoczęcia przerwy nie może być większa od %1.'@['24:00:00']);
      _ret:='P_START'
   ?};
   {? KAL_DEF.P_START=time(24,0,0)
   || KAL_DEF.P_DATA+=1;
      KAL_DEF.P_START:=*0
   ?};
   {? _ret='' & KAL_DEF.P_CZAS<=*0
   || FUN.info('Należy określić czas trwania przerwy.'@);
      _ret:='P_CZAS'
   ?};
   {? _ret='' & KAL_DEF.P_CZAS>*60
   || FUN.info('Czas trwania przerwy nie może przekraczać jednej godziny.'@);
      _ret:='P_CZAS'
   ?};
   {? _ret='' & KAL_DEF.TYP<>'R'
   || FUN.emsg('Przerwa musi przypadać na dzień roboczy.'@);
      _ret:='TYP'
   ?};
   {? _ret='' & ~(KAL_DEF.P_DATA=KAL_DEF.DATA | KAL_DEF.P_DATA=KAL_DEF.DATAW)
   || FUN.emsg('Data rozpoczęcia przerwy musi być zgodna z datą wejścia lub datą wyjścia.'@);
      KAL_DEF.P_DATA:=KAL_DEF.DATA;
      _ret:='P_DATA'
   ?};
   {? _ret=''
   || _prz_od:=KAL_DEF.P_START+*((KAL_DEF.P_DATA-KAL_DEF.DATA)*(*time(24,0,0)));
      _zawiera:=exec('zawiera','prc_przerwy',KAL_DEF.POCZATEK,KAL_DEF.CZAS+KAL_DEF.P_CZAS,_prz_od,KAL_DEF.P_CZAS);
      {? _zawiera=0
      || FUN.emsg('Przerwa musi przypadać na okres czasu pracy (od %1 do %2).'@[$KAL_DEF.POCZATEK,$KAL_DEF.KONIEC]);
         _ret:='P_START'
      ?}
   ?};
:: przerwa zaplanowana na początek czasu pracy lub na koniec (czas pracy bez przerwy - ostrzeżenie)
   {? _ret='' & (KAL_DEF.P_START=KAL_DEF.POCZATEK | KAL_DEF.P_START=KAL_DEF.KONIEC-KAL_DEF.P_CZAS)
   || FUN.emsg('Przerwa przypada na początek czasu pracy, co w rzeczywistości skutkuje czasem pracy bez przerwy.'@)
   ?}
:: informacja o przerwie zdefiniowanej na początku dnia lub na końcu?
?};

_ret


\kal_def_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed redakcją rekordu tabeli KAL_DEF.
::----------------------------------------------------------------------------------------------------------------------
exec('kal_def_efld_opt','kaledit','1',,'RED','TYP');
exec('kal_def_efld_opt','kaledit','1',,'WZO','TYP');
1


\kal_def_ap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po redakcji rekordu tabeli KAL_DEF.
::----------------------------------------------------------------------------------------------------------------------
exec('akt_rok','kaledit',KAL_DEF.ROK().NAZWA,KAL_ROK.ROK,KAL_DEF.DATA);
exec('sum_time','kaledit')


\kal_def_grafik_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Formuła dla każdego wiersza w okni GRAFIK tabeli KAL_DEF.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::exec('sum_time','kaledit');
_gray:=0;
A_OKRM.cntx_psh();
A_OKRM.index('A_OKRMR');
A_OKRM.prefix(KAL_DEF.DATA~1,KAL_DEF.DATA~2);
{? A_OKRM.first()
|| {? A_OKRM.S='Z'
   || _gray:=3
   |? A_OKRM.S_PLAN='Z'
   || _gray:=2
   ?}
?};
A_OKRM.cntx_pop();
{? _a
|| KAL_DEF.actions_grayed('GRAFIK',{? _gray || 'p' || '' ?})
?};

{? (KAL_DEF.DATA~1=date()~1)&(KAL_DEF.DATA~2=date()~2)
|| Color.fnd_kol('PRC_GRAF#01#01')
|? _gray
|| Color.fnd_kol('PRC_GRAF#01#0'+$_gray)
?}


\legenda_grafik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Formuła do obsługi legendy dla kalendarza i planu w akcji grafik współpracownika.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PRC_GRAF#01#01','PRC_GRAF#01#02','PRC_GRAF#01#03')


\kal_def_grafik_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Funkcja przed edycją KAL_DEF-a sprawdzająca czy można modyfikowac dzień kalendarza.
::   WE:
::   WY: 0 lub 1
::  OLD: \be_wer_kal_def/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
KAL_ROK.cntx_psh();
KAL_NAZW.cntx_psh();
_czy_prac:=(5+KAL_DEF.ROK().NAZWA().NAZWA)=%255+'prac';
_czy_mod:=1;
{? _czy_prac
|| _data:=KAL_DEF.DATA;
   _status:=exec('getPlanStat4Pr','grafik',P.ref(),_data);
   {?  _status='Z'
   || FUN.emsg('%1 %2'['Dla wybranego dnia planowanie zostało zakończone.'@,'Brak możliwości poprawiania.'@]);
      _czy_mod:=0
   |? _status='K'
   || _wewy:=exec('get_wewy','prc_wewy',_data,P.ref());
      _jest_we:=_wewy.first();
      {? _jest_we
      || FUN.emsg('W wybranym dniu istnieje otwarta korekta planowania oraz zostało wprowadzone wykonanie.'@+'\n'+
                  'Brak możliwości poprawiania.'@);
         _czy_mod:=0
      ?}
   ?};
   {? _czy_mod & KAL_DEF.TYP='R'
   || _poczatek:=exec('poczatekRCP','kaledit',KAL_DEF.ref());
      {? var_pres('_poczatek')=type_of(time) & _poczatek<>KAL_DEF.POCZATEK
      || KAL_DEF.POCZATEK:=_poczatek;
         exec('kal_def_akt_czas_licz','kaledit');
         FUN.emsg('Godzina rozpoczęcia została ustalona na godzinę zgodną z godziną określoną\n'+
            'w ruchomym czasie pracy (%1), do którego został przypisany pracownik.'@[_poczatek$3])
      ?}
   ?}
?};
KAL_NAZW.cntx_pop();
KAL_ROK.cntx_pop();
_czy_mod


\poczatekRCP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Na podstawie rekordu z tabeli KAL_DEF określa czy dla pracownika została ustalona w tym dniu
::       godzina rozpoczęcia pracy w ruchomm czasie pracy
::   WE: _a [REFERENCE] - wskazanie na rekord KAL_DEFa
::   WY: ~~/time
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_ref:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};

KAL_DEF.cntx_psh();
KAL_DEF.index('KAL_DATA');
KAL_DEF.prefix();
{? KAL_DEF.seek(_ref)
|| KAL_ROK.cntx_psh();
   KAL_NAZW.cntx_psh();
:: sprawdzamy czy mamy do czynienia z kalendarzem pracownika
   _nazwa:=KAL_DEF.ROK().NAZWA().NAZWA;
   _czy_prac:=(5+_nazwa=%255+'prac');
   {? _czy_prac
   || _p_sql:=1-_nazwa;
      P.cntx_psh();
      P.index('OSOBA');
      P.prefix();
      {? P.seek(BIT.sqlint(_p_sql),8+_p_sql)
      || {? __HARM.RCP(KAL_DEF.DATA) & __HARM.RCP_DET
         || _result:=__HARM.RCP_GOD
         ?}
      ?};
      P.cntx_pop()
   ?};
   KAL_NAZW.cntx_pop();
   KAL_ROK.cntx_pop()
?};
KAL_DEF.cntx_pop();
_result


\del_kalp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
::  MOD: TMR [18.42]
:: OPIS: usuwa indywidualny kalendarz pracownika
::   WE: _a  [REFERENCE] - wskazanie na rekord w tabeli KAL_NAZW
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_rKalNazw:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(_result) ?};

:: zalozenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

KAL_NAZW.cntx_psh();
KAL_NAZW.index('KAL_NAZW');
KAL_NAZW.prefix();
{? KAL_NAZW.seek(_rKalNazw)
|| _kal_nazw:=KAL_NAZW.NAZWA;
:: sprawdzamy czy usuwanie dotyczy kalendarza indywidualnego pracownika
   _czy_prac:=(5+_kal_nazw=%255+'prac');
   {? _czy_prac
   || KAL_ROK.cntx_psh();
      KAL_ROK.index('KAL_ROK');
      KAL_ROK.prefix(_rKalNazw);
      {? KAL_ROK.first()
      || KAL_DEF.cntx_psh();
         KAL_DEF.index('KAL_DEF');
         {!
         |? KAL_DEF.prefix(KAL_ROK.ref());
            {? KAL_DEF.first() || {! |? KAL_DEF.del() !} ?};
            {? KAL_ROK.count()=0 || KAL_ROK.del() ?}
         !};
         KAL_DEF.cntx_pop()
      ?};
      {? KAL_NAZW.count()=0 || _result:=KAL_NAZW.del(,1) ?};
      {? _result=0 || undo() ?};
      KAL_ROK.cntx_pop()
   ?}
?};
KAL_NAZW.cntx_pop();

:: zakończenie transakcji
{? _mydo || end() ?};
_result


\zm_kal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: funkcja zmiany wzorca czasu pracy dla grupowych modyfikacji
::   WE: _a - wskazanie na pracownika
::  OLD: \zm_kal/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
R_WZCZ.index('R_WZWND');
R_WZCZ.prefix(form(8+$_a),#_a,'N','N');
{? ~R_WZCZ.first
|| parWCP[2].NAZWA:=P.KAL().NAZWA;
   parWCP[2].REF:=#P.KAL;
   parWCP[2].OD:=date(P.DZA~1,P.DZA~2,1);
   parWCP[2].add()
|| {!
   |? parWCP[2].NAZWA:=R_WZCZ.KAL().NAZWA;
      parWCP[2].REF:=R_WZCZ.KAL;
      parWCP[2].OD:=R_WZCZ.OD;
      parWCP[2].KIN:=R_WZCZ.KIN;
      parWCP[2].GRAFIK:=R_WZCZ.GRAFIK;
      parWCP[2].add();
      R_WZCZ.next()
   !}
?};
KAL_NAZW.seek(parWCP[4]);
{? data_do=date(0,0,0)
||
:  zerowanie wszystkich zapisów wiekszych od wprowadzanego
   {! |? parWCP[2].find_ge(data_od) |! parWCP[2].del() !};
   parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
   parWCP[2].REF:=KAL_NAZW.ref;
   parWCP[2].OD:=data_od;
   parWCP[2].KIN:='N';
   parWCP[2].GRAFIK:='N';
   parWCP[2].add()
|? parWCP[2].find_le(data_od)
||
:  wprowadzanie zapisu jeśli isnieją zapisy mniejsze
   parWCP[3]:=parWCP[2].REF;
   _grafik:=parWCP[2].GRAFIK;
   _kin:=parWCP[2].KIN;
   {? {? parWCP[2].OD=data_od || parWCP[2].del(,1)=2 || parWCP[2].next() ?}
   || {? parWCP[2].OD>data_do
      || parWCP[2].REF:=KAL_NAZW.ref;
         parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
         parWCP[2].OD:=data_od;
         parWCP[2].KIN:='N';
         parWCP[2].GRAFIK:='N';
         parWCP[2].add();
         {? ~R_WZCZ.find_key(data_do+1)
         || parWCP[2].REF:=parWCP[3];
            parWCP[2].GRAFIK:=_grafik;
            parWCP[2].KIN:=_kin;
            KAL_NAZW.seek(parWCP[2].REF,KAL_NAZW.name);
            parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
            parWCP[2].OD:=data_do+1;
            parWCP[2].add()
         ?}
      || {? parWCP[2].next()
         || {!
            |? {? parWCP[2].OD<=data_do
               || parWCP[2].prev(); parWCP[2].del(); parWCP[2].next()
               || parWCP[2].prev(); 0
               ?}
            !};
            {? ~R_WZCZ.find_key(data_do+1)
            || parWCP[2].OD:=data_do+1;
               parWCP[2].put()
            || parWCP[2].del()
            ?}
         |? parWCP[2].OD<=data_do
         || parWCP[2].OD:=data_do+1;
            parWCP[2].put()
         || parWCP[2].REF:=parWCP[3];
            parWCP[2].GRAFIK:=_grafik;
            parWCP[2].KIN:=_kin;
            KAL_NAZW.seek(parWCP[2].REF,KAL_NAZW.name);
            parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
            parWCP[2].OD:=data_do+1;
            parWCP[2].add()
         ?};
         KAL_NAZW.seek(parWCP[4]);
         parWCP[2].REF:=KAL_NAZW.ref;
         parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
         parWCP[2].OD:=data_od;
         parWCP[2].KIN:='N';
         parWCP[2].GRAFIK:='N';
         parWCP[2].add()
      ?}
   || parWCP[2].REF:=KAL_NAZW.ref;
      parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
      parWCP[2].OD:=data_od;
      parWCP[2].KIN:='N';
      parWCP[2].GRAFIK:='N';
      parWCP[2].add();
      parWCP[2].REF:=parWCP[3];
      parWCP[2].GRAFIK:=_grafik;
      parWCP[2].KIN:=_kin;
      KAL_NAZW.seek(parWCP[2].REF,KAL_NAZW.name);
      parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
      parWCP[2].OD:=data_do+1;
      parWCP[2].add()
   ?}
|? parWCP[2].find_ge(data_od)
||
:  wprowadzanie zapisu jeśli nie isnieją zapisy mniejsze
   {? parWCP[2].OD<=data_do
   || {!
      |? {? parWCP[2].OD<=data_do
         || parWCP[3]:=parWCP[2].REF;  _grafik:=parWCP[2].GRAFIK;  _kin:=parWCP[2].KIN;parWCP[2].del
         || parWCP[2].prev(); 0
         ?}
      !};
      {? parWCP[2].size=0
      || parWCP[2].REF:=parWCP[3];
         parWCP[2].GRAFIK:=_grafik;
         parWCP[2].KIN:=_kin;
         KAL_NAZW.seek(parWCP[2].REF,KAL_NAZW.name);
         parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
         parWCP[2].OD:=data_do+1;
         parWCP[2].add()
      |? ~R_WZCZ.find_key(data_do+1)
      || parWCP[2].REF:=parWCP[3];
         parWCP[2].GRAFIK:=_grafik;
         parWCP[2].KIN:=_kin;
         KAL_NAZW.seek(parWCP[2].REF,KAL_NAZW.name);
         parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
         parWCP[2].OD:=data_do+1;
         parWCP[2].add()
      ?};
      KAL_NAZW.seek(parWCP[4]);
      parWCP[2].REF:=KAL_NAZW.ref;
      parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
      parWCP[2].OD:=data_od;
      parWCP[2].KIN:='N';
      parWCP[2].GRAFIK:='N';
      parWCP[2].add()
   |? parWCP[2].OD = data_do
   || parWCP[2].OD+=1;
      parWCP[2].put();
      parWCP[2].REF:=KAL_NAZW.ref;
      parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
      parWCP[2].OD:=data_od;
      parWCP[2].KIN:='N';
      parWCP[2].GRAFIK:='N';
      parWCP[2].add()
   || parWCP[2].REF:=KAL_NAZW.ref;
      parWCP[2].NAZWA:=KAL_NAZW.NAZWA;
      parWCP[2].OD:=data_od;
      parWCP[2].KIN:='N';
      parWCP[2].GRAFIK:='N';
      parWCP[2].add()
   ?}
?};
{? parWCP[2].first()
|| _tmp:=parWCP[2].REF;
   _KIN:=parWCP[2].KIN;
   _GRAFIK:=parWCP[2].GRAFIK;
   {? parWCP[2].next()
   || {!
      |? {? parWCP[2].REF=_tmp & _KIN=parWCP[2].KIN & _GRAFIK=parWCP[2].GRAFIK
         || parWCP[2].del(,1)<>3
         || _tmp:=parWCP[2].REF;
            _KIN:=parWCP[2].KIN;
            _GRAFIK:=parWCP[2].GRAFIK;
            parWCP[2].next()
         ?}
      !}
   ?}
?}


\update_kal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Aktualizacja wzorca czasu pracy dla grupowych modyfikacji
::   WE: _a - wskazanie na pracownika
::----------------------------------------------------------------------------------------------------------------------
R_WZCZ.index('R_WZWND');
R_WZCZ.prefix(form(8+$_a),#_a,'N','N');

KAL_NAZW.seek(parWCP[4]);

_wcpToUpdate:=null;

{? data_do=date(0,0,0)
|| _kal:=KAL_NAZW.ref;
:  zerowanie wszystkich zapisów wiekszych od wprowadzanego
   {! |? R_WZCZ.find_ge(data_od) |! R_WZCZ.del() !};
   R_WZCZ.blank();
   R_WZCZ.OD:=data_od;
   R_WZCZ.KIN:='N';
   _gio:=(R_WZCZ.P & exec('graf_in_okres','kaledit',R_WZCZ.P,R_WZCZ.OD));
   R_WZCZ.GRAFIK:={? _gio || 'T' || 'N' ?};
   R_WZCZ.KAL:=_kal;
   {! |? ~R_WZCZ.add(1)
      |! R_WZCZ.OD+=1
   !};
   {? _gio
   || exec('jest_grafik_rok','grafik',R_WZCZ.P,date(R_WZCZ.OD~1,1,1))
   ?}
|? R_WZCZ.find_le(data_od)
||
:  wprowadzanie zapisu jeśli isnieją zapisy mniejsze
   parWCP[3]:=R_WZCZ.KAL;
   _grafik:=R_WZCZ.GRAFIK;
   _kin:=R_WZCZ.KIN;
   {? {? R_WZCZ.OD=data_od || _wcpToUpdate:=#R_WZCZ.ref(); R_WZCZ.next() || R_WZCZ.next() ?}
   || {? R_WZCZ.OD>data_do
      || R_WZCZ.blank();
         R_WZCZ.OD:=data_od;
         R_WZCZ.KIN:='N';
         _gio:=(R_WZCZ.P & exec('graf_in_okres','kaledit',R_WZCZ.P,R_WZCZ.OD));
         R_WZCZ.GRAFIK:={? _gio || 'T' || 'N' ?};
         R_WZCZ.KAL:=KAL_NAZW.ref;
         {! |? ~R_WZCZ.add(1)
            |! R_WZCZ.OD+=1
         !};
         {? _gio
         || exec('jest_grafik_rok','grafik',R_WZCZ.P,date(R_WZCZ.OD~1,1,1))
         ?};
         {? ~R_WZCZ.find_key(data_do+1)
         || {? _wcpToUpdate
            || {? R_WZCZ.seek(_wcpToUpdate)
               || R_WZCZ.OD:=data_do+1;
                  R_WZCZ.put()
               ?}
            || R_WZCZ.blank();
               R_WZCZ.GRAFIK:=_grafik;
               R_WZCZ.KIN:=_kin;
               KAL_NAZW.seek(parWCP[3],KAL_NAZW.name);
               R_WZCZ.KAL:=KAL_NAZW.ref();
               R_WZCZ.OD:=data_do+1;
               {! |? ~R_WZCZ.add(1)
                  |! R_WZCZ.OD+=1
               !}
            ?}
         |? _wcpToUpdate
         || {? R_WZCZ.seek(_wcpToUpdate)
            || R_WZCZ.del()
            ?}
         ?}
      || {? R_WZCZ.next()
         || {!
            |? {? R_WZCZ.OD<=data_do
               || R_WZCZ.prev(); R_WZCZ.del(); R_WZCZ.next()
               || R_WZCZ.prev(); 0
               ?}
            !};
            {? ~R_WZCZ.find_key(data_do+1)
            || R_WZCZ.OD:=data_do+1;
               R_WZCZ.put()
            || R_WZCZ.del()
            ?};
            {? _wcpToUpdate
            || {? R_WZCZ.seek(_wcpToUpdate)
               || R_WZCZ.del()
               ?}
            ?}
         |? R_WZCZ.OD<=data_do
         || R_WZCZ.OD:=data_do+1;
            R_WZCZ.put();
            {? _wcpToUpdate
            || {? R_WZCZ.seek(_wcpToUpdate)
               || R_WZCZ.del()
               ?}
            ?}
         || {? R_WZCZ.seek(_wcpToUpdate)
            || R_WZCZ.OD:=data_do+1;
               R_WZCZ.put()
            ?}
         ?};
         KAL_NAZW.seek(parWCP[4]);
         R_WZCZ.blank();
         R_WZCZ.OD:=data_od;
         R_WZCZ.KIN:='N';
         _gio:=(R_WZCZ.P & exec('graf_in_okres','kaledit',R_WZCZ.P,R_WZCZ.OD));
         R_WZCZ.GRAFIK:={? _gio || 'T' || 'N' ?};
         R_WZCZ.KAL:=KAL_NAZW.ref;
         {! |? ~R_WZCZ.add(1)
            |! R_WZCZ.OD+=1
         !};
         {? _gio
         || exec('jest_grafik_rok','grafik',R_WZCZ.P,date(R_WZCZ.OD~1,1,1))
         ?}
      ?}
   || R_WZCZ.blank();
      R_WZCZ.OD:=data_od;
      R_WZCZ.KIN:='N';
      _gio:=(R_WZCZ.P & exec('graf_in_okres','kaledit',R_WZCZ.P,R_WZCZ.OD));
      R_WZCZ.GRAFIK:={? _gio || 'T' || 'N' ?};
      R_WZCZ.KAL:=KAL_NAZW.ref;
      {! |? ~R_WZCZ.add(1)
         |! R_WZCZ.OD+=1
      !};
      {? _gio
      || exec('jest_grafik_rok','grafik',R_WZCZ.P,date(R_WZCZ.OD~1,1,1))
      ?};
      {? _wcpToUpdate
      || {? R_WZCZ.seek(_wcpToUpdate)
         || R_WZCZ.OD:=data_do+1;
            R_WZCZ.put()
         ?}
      || R_WZCZ.blank();
         R_WZCZ.GRAFIK:=_grafik;
         R_WZCZ.KIN:=_kin;
         KAL_NAZW.seek(parWCP[3],KAL_NAZW.name);
         R_WZCZ.KAL:=KAL_NAZW.ref();
         R_WZCZ.OD:=data_do+1;
         {! |? ~R_WZCZ.add(1)
            |! R_WZCZ.OD+=1
         !}
      ?}
   ?}
|? R_WZCZ.find_ge(data_od)
||
:  wprowadzanie zapisu jeśli nie isnieją zapisy mniejsze
   {? R_WZCZ.OD<=data_do
   || {!
      |? {? R_WZCZ.OD<=data_do
         || {? _wcpToUpdate
            || _wcpToUpdate:=#R_WZCZ.ref();
               R_WZCZ.prev();
               R_WZCZ.del()
            || _wcpToUpdate:=#R_WZCZ.ref()
            ?};
            R_WZCZ.next()
         || R_WZCZ.prev(); 0
         ?}
      !};
::      {? R_WZCZ.size()=0
::      || R_WZCZ.GRAFIK:=_grafik;
::         R_WZCZ.KIN:=_kin;
::         KAL_NAZW.seek(parWCP[3],KAL_NAZW.name);
::         R_WZCZ.KAL:=KAL_NAZW.ref();
::         R_WZCZ.OD:=data_do+1;
::         R_WZCZ.add()
      {? ~R_WZCZ.find_key(data_do+1)
      || {? R_WZCZ.seek(_wcpToUpdate)
         || R_WZCZ.OD:=data_do+1;
            R_WZCZ.put()
         ?}
      |? _wcpToUpdate
      || {? R_WZCZ.seek(_wcpToUpdate)
         || R_WZCZ.del()
         ?}
      ?};
      KAL_NAZW.seek(parWCP[4]);
      R_WZCZ.blank();
      R_WZCZ.KAL:=KAL_NAZW.ref;
      R_WZCZ.OD:=data_od;
      R_WZCZ.KIN:='N';
      _gio:=(R_WZCZ.P & exec('graf_in_okres','kaledit',R_WZCZ.P,R_WZCZ.OD));
      R_WZCZ.GRAFIK:={? _gio || 'T' || 'N' ?};
      {! |? ~R_WZCZ.add(1)
         |! R_WZCZ.OD+=1
      !}
   |? R_WZCZ.OD=data_do
   || R_WZCZ.OD+=1;
      R_WZCZ.put();
      R_WZCZ.blank();
      R_WZCZ.OD:=data_od;
      R_WZCZ.KIN:='N';
      _gio:=(R_WZCZ.P & exec('graf_in_okres','kaledit',R_WZCZ.P,R_WZCZ.OD));
      R_WZCZ.GRAFIK:={? _gio || 'T' || 'N' ?};
      R_WZCZ.KAL:=KAL_NAZW.ref;
      {! |? ~R_WZCZ.add(1)
         |! R_WZCZ.OD+=1
      !}
   || R_WZCZ.blank();
      R_WZCZ.OD:=data_od;
      R_WZCZ.KIN:='N';
      _gio:=(R_WZCZ.P & exec('graf_in_okres','kaledit',R_WZCZ.P,R_WZCZ.OD));
      R_WZCZ.GRAFIK:={? _gio || 'T' || 'N' ?};
      R_WZCZ.KAL:=KAL_NAZW.ref;
      {! |? ~R_WZCZ.add(1)
         |! R_WZCZ.OD+=1
      !}
   ?};
   {? _gio
   || exec('jest_grafik_rok','grafik',R_WZCZ.P,date(R_WZCZ.OD~1,1,1))
   ?}
?};
{? R_WZCZ.first()
|| _tmp:=R_WZCZ.KAL;
   _KIN:=R_WZCZ.KIN;
   _GRAFIK:=R_WZCZ.GRAFIK;
   {? R_WZCZ.next()
   || {!
      |? {? R_WZCZ.KAL=_tmp & _KIN=R_WZCZ.KIN & _GRAFIK=R_WZCZ.GRAFIK
         || R_WZCZ.del(,1)<>3
         || _tmp:=R_WZCZ.KAL;
            _KIN:=R_WZCZ.KIN;
            _GRAFIK:=R_WZCZ.GRAFIK;
            R_WZCZ.next()
         ?}
      !}
   ?}
?}


\poczspr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
::  MOD: MicKoc [22.26]
:: OPIS: Po redakcji pola POCZATEK tabel KAL_OPIS i KAL_DEF
::   WE: _a - alias tabeli
::  OLD: \poczspr/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
{? _a.POCZATEK>time(24,0,0)
|| FUN.emsg('Godzina rozpoczęcia nie może być większa od 24:00:00.'@);
   _res:=0
|? _a.KONIEC>time(24,0,0)
|| FUN.emsg('Godzina zakończenia nie może być większa od 24:00:00.'@);
   _res:=0
|? _a.POCZATEK<=_a.KONIEC
|| _a.CZAS:=_a.KONIEC-_a.POCZATEK;
   _a.CZAS+={? _a=KAL_DEF || _a.DATAW-_a.DATA
            |? _a=KAL_OPIS || _a.DNI
            || 0
            ?}*60*24
|| {? _a=KAL_OPIS & _a.DNI
   || _a.CZAS:=*((_a.DNI*24*60)-(*_a.POCZATEK))+(_a.KONIEC-time(0,0,0))
   |? _a=KAL_OPIS & ~_a.DNI & _a.POCZATEK<_a.KONIEC
   || FUN.emsg('Godzina wyjścia musi być późniejsza od godziny wejścia.'@);
      _res:=0
   |? _a=KAL_DEF & _a.DATA<_a.DATAW
   || _a.CZAS:=*(((_a.DATAW-_a.DATA)*24*60)-(*_a.POCZATEK))+(_a.KONIEC-time(0,0,0))
   ?}
?};
{? _res
   & exec('isEnabled','prc_przerwy')
   & (   (_a=KAL_DEF & (_a.P_DATA>#0 | _a.P_START>*0 | _a.P_CZAS>*0)) |
         (_a=KAL_OPIS & (_a.P_OD>*0 | _a.P_CZAS>*0))
     )
|| {? _a.P_CZAS>*0 || _a.CZAS-=_a.P_CZAS ?}
?};
_res


\aktualizacja_czasu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [12.51]
:: OPIS: Wybór roku przy zmianie parametru 321 - aktualizacja czasu pracy (pobiera lata ze zdefiniowaną przerwą w
::       kalendarzach - wzorcach i opisach)
::  OLD: \rokaktCP/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
{? PAR_SKID.get(321)=PARAMETR.TRESC || return(1) ?};

exec('set_win','kaledit',PARAMETR.TRESC);
VAR_DEL.delete('__KALDEF','__KALOP','__KALROK');

PROGRESS.set(2,'Trwa analiza kalendarzy...');
__KALDEF:=sql(
   'select distinct
      KAL_DEF.REFERENCE as REF,
      KAL_ROK.ROK as ROK
   from
      KAL_DEF join KAL_ROK
   where
      KAL_DEF.P_DATA is not null
   order by 2'
);
PROGRESS.next();
__KALOP:=sql(
   'select
      KAL_OPIS.REFERENCE as REF, KAL_OPIS.ROK as ROK from KAL_OPIS
   where
      TO_STRING(KAL_OPIS.P_CZAS)<>\'00:00:00\'
   order by 2'
);
PROGRESS.close();
{? __KALDEF.size() | __KALOP.size()
|| FUN.info('W istniejących danych wykryto dni ze zdefiniowaną niepłatną przerwą.\n'+
            'Zaleca się zaktualizować przyszłe zapisy w kalendarzach i wzorcach czasu pracy.');

   undefine();
   define('OD',date(),'Modyfikacja od daty:');
   _wynik:=def_edit(,'|--|Proszę podać datę, od której mają być zaktualizowane kalendarze');
   _data:={? _wynik || DEFINE.OD || #0 ?};
   undefine();
   {? _data<>#0
   || exec('aktCP','kaledit',_data)
   || FUN.info('Zrezygnowano z aktualizacji kalendarzy.')
   ?}
?};
VAR_DEL.delete('__KALDEF','__KALOP','__KALROK');
1


\set_win
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51_24]
::  MOD: MicKoc [22.26]
:: OPIS: Ustawia odpowiednie okna selekcyjne i redakcyjne dla tabeli KAL_DEF
::   WE: _a [STRING] - treść parametru 321 lub ''
::   WY:
::  OLD: \set_win/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_par321:={? var_pres('_a')=type_of('') || _a || '' ?};
_isEnabled:={? _par321='' || exec('isEnabled','prc_przerwy') || _par321='T' ?};

{? _isEnabled
|| KAL_OPIS.win_edit('RED_P');
   KAL_OPIS.win_sel('ADM_P');
   KAL_DEF.win_edit('RED_P');
   KAL_DEF.win_sel('ADM_P');
   KAL_BUFF.win_edit('RED_P');
   R_WZCZ.win_edit('DNI_P');
   R_WZCZ.win_sel('DNI_P');
   KAL_KORH.win_edit('DISP_P');
   KAL_KORH.win_sel('WER_GR_P');
   KAL_KORN.win_edit('DISP');
   KAL_DEF.fld_attr('P_DATA',1);
   KAL_DEF.fld_attr('P_START',1);
   KAL_DEF.fld_attr('P_CZAS',1)

|| KAL_OPIS.win_edit('RED');
   KAL_OPIS.win_sel('ADM');
   KAL_DEF.win_edit('RED');
   KAL_DEF.win_sel('ADM');
   KAL_BUFF.win_edit('RED');
   R_WZCZ.win_edit('DNI');
   R_WZCZ.win_sel('DNI');
   KAL_KORH.win_edit('DISP');
   KAL_KORH.win_sel('WER_GR');
   KAL_KORN.win_edit('DISP');
   KAL_DEF.fld_attr('P_DATA',2);
   KAL_DEF.fld_attr('P_START',2);
   KAL_DEF.fld_attr('P_CZAS',2)
?};
~~


\aktCP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [12.51]
:: OPIS: Funkcja aktualizuje czas pracy po zmianie parametru 321 - z uwzględnieniem niepłatnych przerw lub nie.
::   WE: _a [DATE] - data od której należy dokonać aktualizacji.
::  OLD: \aktCP/kaledit.fml
::----------------------------------------------------------------------------------------------------------------------
_data_od:={? var_pres('_a')=type_of(#0) || _a || return(0) ?};
_par:=PARAMETR.TRESC='T';

_setTime:="
   _TAB:=_a;
   _par:=_b;
   _TAB.CZAS:={? _TAB.POCZATEK<=_TAB.KONIEC
              || _TAB.KONIEC-_TAB.POCZATEK
              || (time(24,0,0)-_TAB.POCZATEK)+_TAB.KONIEC
              ?}-{? _par || _TAB.P_CZAS || *0 ?};
              _TAB.put()
";

_info:='Proszę czekać, operacja może zająć kilka minut. Trwa aktualizowanie istniejących wzorców kalendarzy...';
_size:=__KALDEF.size();
_count:=0;
KAL_DEF.cntx_psh();
KAL_DEF.prefix();
__KALDEF.cntx_psh();
__KALDEF.prefix();
_loop:=__KALDEF.find_ge(_data_od~1);
{!
|? _loop
|! progress(100*(_count+=1)/_size,_info,FUN.TYT);
   {? KAL_DEF.seek(BIT.sqlint(__KALDEF.REF),) & KAL_DEF.DATA>=_data_od
   || _setTime(KAL_DEF,_par)
   ?};
   _loop:=__KALDEF.next()
!};
prgs_clr();
__KALDEF.cntx_pop();
KAL_DEF.cntx_pop();

_info:='Proszę czekać, operacja może zająć kilka minut. Trwa aktualizowanie istniejących opisów kalendarzy...';
_size:=__KALOP.size();
_count:=0;
KAL_OPIS.cntx_psh();
KAL_OPIS.prefix();
__KALOP.cntx_psh();
__KALOP.prefix();
_loop:=__KALOP.find_ge(_data_od~1);
{!
|? _loop
|! progress(100*(_count+=1)/_size,_info,FUN.TYT);
   {? KAL_OPIS.seek(BIT.sqlint(__KALOP.REF),) & KAL_OPIS.ROK>=_data_od~1
   || _setTime(KAL_OPIS,_par)
   ?};
   _loop:=__KALOP.next()
!};
prgs_clr();
__KALOP.cntx_pop();
KAL_OPIS.cntx_pop();
1

:Sign Version 2.0 jowisz:1045 2024/01/10 15:25:51 b210d099d541c6169c1aa280a1483c55febc60e940105006f948efb43d19e1f27c2f74e0d9ff4b3ec143e0c0e1c337a19f430fa180b4d16d5ff37f5d91e368aa73856e24d5993650a2122d0fc0e3d360920ae43a2bd7dc62cabd1b442bf8cb6c67880a908d2dace73e11b4eaa31441269af5fc139fd8f7bafa60a0770f854796
