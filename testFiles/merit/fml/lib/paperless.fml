:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: paperless.fml
:: Utworzony: 08.06.2021
:: Autor: MicKoc [21.37]
::======================================================================================================================
:: Zawartość: Biblioteka funkcji obsługi PEP - Paperless HR
::======================================================================================================================

\bp_zest_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Po odświeżeniu BP_ZEST
::   WE: _a [STRING] - Dane z parametru
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BP_DEF.index('TYP');
BP_DEF.prefix(BP_ZEST.ref());
_co:=_a;
_TAB:=tab_tmp(1,
   'SLO_NAZ','STRING['+$MS.fld_len(SLO_NAZ,'NAZWA')+']',MS.comment(SLO_NAZ,'NAZWA'),
   'PODPIS','INTEGER','Czy kwalifikowany',
   'WYMAG','INTEGER','Czy wymagany'
);
{? +|_co
|| _spl:=spli_str(_co,';');
   {! _licz:=1..obj_len(_spl) |!
      {? var_pres('_slo')>0 || &_slo ?};
      _slo:=spli_str(_spl[_licz],',');
      _jest:=obj_len(_slo)>1;
      _TAB.blank();
      _TAB.SLO_NAZ:=_slo[1];
      _TAB.PODPIS:=_jest & _slo[2]*'K';
      _TAB.WYMAG:=_jest & _slo[2]*'W' ;
      _TAB.add()
   !};
   {? BP_DEF.first()
   || {!
      |? {? _TAB.find_key(BP_DEF.SLO_NAZ().NAZWA,)
         || BP_DEF.PODPIS:={? _TAB.PODPIS || 'T' || 'N' ?};
            BP_DEF.W:={? _TAB.WYMAG || 'T' || 'N' ?};
            {? BP_DEF.put() || _TAB.del() ?};
            BP_DEF.next()
         || BP_DEF.del()
         ?}
      !}
   ?};
   {? _TAB.first()
   || {!
      |? {? ~BP_DEF.find_key(_TAB.SLO_NAZ,) & +|_TAB.SLO_NAZ &
            (_slo_naz:=exec('slo_naz','ext_slo','ZAL',_TAB.SLO_NAZ,1); _slo_naz)
         || BP_DEF.blank();
            BP_DEF.BP_ZEST:=BP_ZEST.ref();
            BP_DEF.SLO_NAZ:=_slo_naz;
            BP_DEF.PODPIS:={? _TAB.PODPIS || 'T' || 'N' ?};
            BP_DEF.W:={? _TAB.WYMAG || 'T' || 'N' ?};
            BP_DEF.add()
         ?};
         _TAB.next()
      !}
   ?}
?};
BP_DEF.first();
grp_disp(BP_DEF,'WER')


\bp_def_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Przed obsługą BP_DEF
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? grp_empty(BP_ZEST,'WER') ||
   return('#disable')
?}


\bp_zest_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Dołącz przed BP_ZEST
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR.STRING:='';
1


\zestaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Udostępnienie zestawu do edycji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set('tab',exec('dane_proces','paperless'),'ret',exec('spr_zestaw','paperless',,0));
EDIT_VAR.SLO_TYP:='ZAL';
BP_ZEST.fld_fml('B_PROC','F3',"
   params_set(params_get());
   _ret:=exec('wyb_proces','paperless');
   {? +|_ret.VER & +|_ret.B_PROC
   || BP_ZEST.VER:=_ret.VER;
      BP_ZEST.B_PROC:=_ret.B_PROC
   ?}
");
BP_ZEST.fld_fml('B_PROC','AFTER_EDIT',"
   _ret:=exec('spr_proces','paperless',BP_ZEST.B_PROC,BP_ZEST.VER,'Proces');
   {? +|_ret || __CHK.err_incorrect(_ret); 0 || 1 ?}
");
BP_ZEST.win_fml('WER',,'B_PROC',,'ICON_BEFORE',"
   _ret:=params_get().ret;
   _find:=_ret.TAB.find_key(BP_ZEST.B_PROC,BP_ZEST.VER,);
   {? ~_find | (_find & ~+|_ret.TAB.VALUE)
   || 'xwin16.png:4'
   || 'xwin16.png:110'
   ?}
");
BP_ZEST.index('TYP');
BP_ZEST.prefix();
_grp:=BP_ZEST.grp_make('Definicja zestawu'@," exec('bp_zest_wp','paperless')",,,,,,'html_maximized');
VAR_DEL.delete('__TABSign');
__TABSign:=exec('obj_ntab_set','#array',,'TAB',exec('tabela_podpisow','portal_paperless'),'WS','','PODPISY','');
__TABSign.WS:=__TABSign.TAB.mk_sel('Typ podpisu'@,'P',,'#bp_zestaw');
__TABSign.TAB.fld_attr('ID',2);
__TABSign.TAB.win_fld(__TABSign.WS,,'SEL',,,10,,,'Wybrany'@,,,2,,"1","0");
__TABSign.TAB.win_fld(__TABSign.WS,,'NAZ',,,67,,,'Nazwa'@);
_forAR:="
   __TABSign.PODPISY:=
      exec('port','paperless',,BP_ZEST.B_PROC,BP_ZEST.VER,'B_VALPRT.memo_txt(,1,\\'SYS_MEMO\\')',,'TYPY_ZAL');
   exec('bp_zest_ar','paperless',__TABSign.PODPISY);
   exec('TAB_ar','paperless',__TABSign)
";
BP_ZEST.grp_sel(_grp,BP_ZEST,'WER',,_forAR,,,,,,,,'maximized_with_title',,1);
BP_ZEST.grp_splt(_grp,,'vertical','prawy');
_forAR:="exec('TAB_ar','paperless',__TABSign)";
_forB:="exec('bp_def_bs','paperless')";
BP_ZEST.grp_sel(_grp,BP_DEF,'WER',,_forAR,,,,_forB,,,,'maximized_with_title');
BP_ZEST.grp_splt(_grp,'prawy','horizontal','dolny',20);
BP_ZEST.grp_sel(_grp,__TABSign.TAB,__TABSign.WS,,,,,,"exec('TAB_bs','paperless')",,,,'maximized_with_title');
BP_ZEST.win_sel(_grp);
BP_ZEST.fld_attr(,2);
BP_ZEST.select();
BP_ZEST.fld_attr(,1);
VAR_DEL.delete('__TABSign')


\bp_zest_wyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Wypełnienie okna grupowego
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\bp_zest_wp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Wartość początkowa BP_ZEST
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BP_ZEST.ref()


\wybor_zestawu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Wybór zestawu
::   WE: _a [STRING] - Informacja o pracowniku
::       _b [REFERENCE] - Wskazanie na typ załącznika, SLO_NAZ.ref
::   WY: [OBJ] - pola BP_ZEST, BP_ZEST.ref() lub null() - wybrano zestaw, nie wybrano zestawu.
::                    RET, <0 numer błędu, 1 brak błędu lub 0
::                    ERR - dodatkowy opis
::----------------------------------------------------------------------------------------------------------------------
_info:={? var_pres('_a')=type_of('') & +|_a || _a || '' ?};
_ret:=exec('obj_ntab_set','#array',,'BP_ZEST',null(),'RET',0,'ERR','');
_ref:=null();
_jestZestaw:=null();
{? var_pres('_b')=type_of(null())
|| BP_ZEST.index('UNIQ');
   BP_ZEST.prefix(_b);
   _jestZestaw:={? BP_ZEST.first() || BP_ZEST.ref() || null() ?}
|? var_pres('_b')=type_of('')
|| BP_ZEST.index('TYP');
   BP_ZEST.prefix(_b,);
   _jestZestaw:={? BP_ZEST.first() || BP_ZEST.ref() || null() ?}
|| BP_ZEST.index('TYP');
   BP_ZEST.prefix()
?};
BP_ZEST.win_sel('WYB');
BP_ZEST.hdr_sel(': %1'[_info]);
BP_ZEST.win_fml('WYB',,'B_PROC',,'ICON_BEFORE',"
   _find:=+|VAR.STRING;
   {? ~_find
   || 'xwin16.png:4'
   || 'xwin16.png:110'
   ?}
");
_size:=BP_ZEST.size();
{? _size
|| _jestZestaw:={? _size>1 || null() || _jestZestaw ?};
   _spr:=exec('spr_zestaw','paperless',_jestZestaw,0);
   params_set('ret',_spr)
?};
{? _size=1 & BP_ZEST.first()
|| {? _spr.RET
   || _ref:=BP_ZEST.ref()
   || _size+=1
   ?}
?};
{? _size>1 & BP_ZEST.first()
|| EDIT_VAR.cntx_psh();
   EDIT_VAR.SLO_TYP:='ZAL';
   BP_ZEST.fld_attr(,2);
   {? BP_ZEST.select()
   || _ref:=BP_ZEST.ref()
   || _ref:=null()
   ?};
   BP_ZEST.fld_attr(,1);
   EDIT_VAR.cntx_pop()
?};
{? _ref
|| _ret.ERR:=BP_ZEST.KOD+' - '+BP_ZEST.NAZ;
   _ret.BP_ZEST:=_ref;
   {? _spr.TAB.find_key(BP_ZEST.B_PROC,BP_ZEST.VER,) & _spr.TAB.RET
   || _ret.RET:=1
   || _ret.RET:=-2
   ?}
?};
BP_ZEST.hdr_sel();
_ret


\bp_zest_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Rekord po BP_ZEST
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=__CHK.record(BP_ZEST,,'NAZ','KOD','SLO_NAZ','B_PROC');
{? +|_ret || return(_ret) ?};
_fld:=exec('spr_proces','paperless',BP_ZEST.B_PROC,BP_ZEST.VER,'Proces');
{? +|_fld || __CHK.err_incorrect(_fld); return('B_PROC') ?};
{? __CHK.index(BP_ZEST,'PROC',-menu_txt(,)='popraw')<>'' || return('B_PROC') ?};
''


\bp_def_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Rekord po BP_DEF
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(BP_DEF,,'SLO_NAZ','OPIS')


\wyb_proces
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Wybór procesu
::   WE:
::   WY: [OBJ] z polami B_PROC (proces) i VER (wersja procesu)
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_get().tab;
_ret:=exec('obj_ntab_set','#array',,'B_PROC','','VER','');
{? _tab.first()
|| _wnd:=_tab.mk_sel('Lista wniosków'@,,0,'#pep_b_proc',,,,,'U');
   _tab.win_fld(_wnd,,'VALUE',,,20,,,'Wniosek'@,,'Wniosek'@);
   _tab.win_fld(_wnd,,'B_PROC',,,20,,,'Symbol'@,,'Symbol'@);
   _tab.win_fld(_wnd,,'VER',,,6,,,'Wersja'@,,'Wersja'@);
   _tab.win_fld(_wnd,,'NAZWA',,,20,,,'Nazwa'@,,'Nazwa'@);
   _txt:='&Wybierz'@;
   _for:="sel_exit()";
   _tab.win_act(_wnd,0,'Formuła',_txt,,'Wybierz'@,_for,,1,,,,'W');
   _tab.win_btn(_wnd,'text=%1,panel=right,align=begin'[_txt],'menu:W');
   _tab.win_sel(_wnd);
   _tab.fld_attr(,2);
   {? _tab.select()
   || _ret.B_PROC:=_tab.B_PROC;
      _ret.VER:=_tab.VER
   ?}
?};
_ret


\dane_proces
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Dane do wyboru procesu
::   WE:
::   WY: [TABELA] B_PROC (proces),NAZWA (jego nazwa),VER (i wersja)
::----------------------------------------------------------------------------------------------------------------------
_sql:='
   select distinct
      B_PROC.SYMBOL B_PROC,
      B_PROC.NAME NAZWA,
      B_PROC.VER VER,
      B_VALPRT.VALUE VALUE,
      0 as RET
   from
      B_PROC join
      B_PREL using(B_PROC.REFERENCE,B_PREL.B_PROC) join
      B_ELE using(B_ELE.REFERENCE, B_PREL.B_ELE) join
      B_ACTION using(B_ACTION.B_ELE, B_ELE.REFERENCE) join
      B_VALPRT using(B_VALPRT.B_PREL,B_PREL.REFERENCE)
   where
      B_PROC.ACCEPTED=\'T\' and
      B_PROC.ACTIVE=\'T\' and
      B_PROC.FIRMA=:_a and
      B_ACTION.PROC=\'T\' and
      B_ACTION.UID=\'OBE_FAW_DARP\' and
      B_VALPRT.VALUE in (select ETYPY.NAZWA || \';\' || ETYPY.W_PORTAL from ETYPY where ETYPY.W_PORTAL=\'P\')
   order by
      B_PROC, VER, NAZWA
   ';

psql(_sql,exec('ref_firma','ustawienia'))


\spr_proces
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Sprawdzenie, czy istnieje proces
::   WE: _a [STRING] - symbol procesu
::       _b [STRING] - wersja procesu
::       _c [STRING] - tekst informacji zwrotnej dla nieopwodzenia
::   WY: _c lub ''
::----------------------------------------------------------------------------------------------------------------------
B_PROC.cntx_psh();
B_PROC.index('SYMVER');
B_PROC.prefix(exec('ref_firma','ustawienia'),_a,_b,);
_ret:={? B_PROC.first() || '' || _c ?};
B_PROC.cntx_pop();
_ret


\form4zest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Formuły pobierania załączników dla typów załączników
::   WE: _a [STRING] - typ załącznika określający zestaw, nazwa ze SLO_NAZ
::       _b [OBJ] - tablica: SLO_NAZ nazw załączników definicji, PODPIS T/N
::       _c [DATE] - data wyszukiwania informacji, domyślnie będą szukane dane najnowsze
::       _d [REFERENCE] - wskaznie na współpracownika
::       _e [UIDREF] - wskazanie na szukany rekord lub ''
::       _f [INTEGER] - jeśli 1 to dodaje puste rekordy, domyślnie nie
::   WY: Tabela z załącznikami REF_BLB
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +|_a || _slo_zest:=_a || return(null()) ?};
{? var_pres('_b')>100 || _slo_def:=_b || return(null()) ?};
_data:={? var_pres('_c')=type_of(date()) || _c || #0 ?};
{? var_pres('_d')=type_of(null()) & _d<>null() || _prac:=_d || return(null()) ?};
_context:={? var_pres('_e')=type_of('') & +|_e=48 || _e || '' ?};
_puste:=var_pres('_f')=type_of(0) & _f=1;

_ret:=tab_tmp(1,
   'REF','STRING[48]','ref lub uidref rekordu',
   'SLO_NAZ','STRING['+$MS.fld_len(SLO_NAZ,'NAZWA')+']','Typ załącznika',
   'REF_BLB','STRING[48]','ref lub uidref załącznika',
   'PODPIS','STRING[1]','Czy podpisywać?',
   'OPIS','STRING[255]','Dodatkowy opis',
   'W','STRING[1]','Wymagany?',
   'IDADD','IDADD','Id',
   'UID_REC','STRING[48]','uidref danych (H, H_UM, ZC itp)'
   );
_zest:=exec('slo_naz','ext_slo','ZAL',_slo_zest,1);
exec('init','office2pdf');
_o2pdf:=obj_new(@.CLASS.OFCE2PDF);
:: Start procesu z pulpitu, system nie, wie że to PERSONEL
_personel:=_o2pdf.personel;
_o2pdf.personel:=1;
Cntx.psh(BP_ZEST,BP_DEF);
Cntx.clr(BP_ZEST,BP_DEF);
BP_DEF.index('SZUKAJ');

:: Zestaw: Umowa o pracę

{? _slo_zest='Umowa o pracę'
|| Cntx.psh(H_UM,H,STN,ZALACZ,P,OSOBA);
   Cntx.clr(H_UM,H,STN,ZALACZ,P,OSOBA);
   exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));
   H_UM.index('OD');
   H_UM.prefix(_prac);
   ZALACZ.index('NAG');
   H.index('HISTUM');
   _jest:=
      {? +|_context=48 & ref_tab(_context)=H_UM
      || H_UM.seek(_context)
      || {? _data=#0 || H_UM.last() || H_UM.find_le(_data) | H_UM.first() ?}
      ?};
   {? _jest
   || _uid:=H_UM.uidref();
      _imNaTecz:=H_UM.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' '+P.T;
      {! _licz:=1..obj_len(_slo_def) |!

:: Załącznik Umowa o pracę
         {? _slo_def[_licz].SLO_NAZ='Umowa o pracę'
         || ZALACZ.prefix(_uid,_slo_def[_licz].SLO_NAZ,);
            _jestZal:=0;
            {? ZALACZ.size()>1
            || _jestZal:=exec('wybor_zalacz','paperless',_imNaTecz,_slo_def[_licz].SLO_NAZ)
            || {? ZALACZ.last() & ZALACZ.ZAL
               || _jestZal:=1
               ?}
            ?};
            _ret.blank();
            _ret.SLO_NAZ:=_slo_def[_licz].SLO_NAZ;
            _ret.PODPIS:=_slo_def[_licz].PODPIS;
            _ret.W:=_slo_def[_licz].W;
            _ret.OPIS:=exec('H_UM','#to_string');
            _ret.UID_REC:=_uid;
            {? _jestZal
            || _typ:=-ZALACZ.bl_info('ZAL','EXTENSION');
               {? _typ<>'pdf'
               || _ret.REF:=$_o2pdf.add(ZALACZ,'ZAL')
               |? _typ='pdf' & ZALACZ.DTSIGN=#0 & _slo_def[_licz].PODPIS='T'
               || _ret.REF:=$_o2pdf.add(ZALACZ,'ZAL','pdf')
               || _ret.REF_BLB:=$ZALACZ.ZAL().ref()
               ?};
               _ret.add()
            |? _puste
            || _ret.add()
            ?}

:: Załącznik: Opis stanowiska
         |? _slo_def[_licz].SLO_NAZ='Opis stanowiska'
         || H.prefix(H_UM.ref());
            {? {? _data=#0 || H.last() || H.find_le(_data) | H.first() ?} & H.ST().ref()
            || _ret.blank();
               _ret.SLO_NAZ:=_slo_def[_licz].SLO_NAZ;
               _ret.PODPIS:=_slo_def[_licz].PODPIS;
               _ret.W:=_slo_def[_licz].W;
               _ret.OPIS:=exec('STN','#to_string');
               _ret.UID_REC:=_uid;
               {? STN.ZAL
               || _typ:=-STN.bl_info('ZAL','EXTENSION');
                  {? _typ<>'pdf'
                  || _ret.REF:=$_o2pdf.add(STN,'ZAL')
                  |? _typ='pdf' & _slo_def[_licz].PODPIS='T'
                  || _ret.REF:=$_o2pdf.add(STN,'ZAL','pdf')
                  || _ret.REF_BLB:=$STN.ZAL().ref()
                  ?};
                  _ret.add()
               |? _puste
               || _ret.add()
               ?}
            ?}
         ?}
      !}
   ?};
   Cntx.pop(H_UM,H,STN,ZALACZ,P,OSOBA);
   1
|? _slo_zest='Umowa cywilnoprawna'
|| Cntx.psh(ZC,ZALACZ,P,OSOBA);
   Cntx.clr(ZC,ZALACZ,P,OSOBA);
   ZC.index('ZLECPRZ');
   ZC.prefix(_prac);
   ZALACZ.index('NAG');
   _jest:=
      {? +|_context=48 & ref_tab(_context)=ZC
      || ZC.seek(_context)
      || {? _data=#0 || ZC.last() || ZC.find_le(_data) | ZC.first() ?}
      ?};
   {? _jest
   || _uid:=ZC.uidref();
      _imNaTecz:=ZC.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' '+P.T;
      {! _licz:=1..obj_len(_slo_def) |!

:: Załącznik Umowa cywilnoprawna
         {? _slo_def[_licz].SLO_NAZ='Umowa cywilnoprawna'
         || ZALACZ.prefix(_uid,_slo_def[_licz].SLO_NAZ,);
            _jestZal:=0;
            {? ZALACZ.size()>1
            || _jestZal:=exec('wybor_zalacz','paperless',_imNaTecz,_slo_def[_licz].SLO_NAZ)
            || {? ZALACZ.last() & ZALACZ.ZAL
               || _jestZal:=1
               ?}
            ?};
            _ret.blank();
            _ret.SLO_NAZ:=_slo_def[_licz].SLO_NAZ;
            _ret.PODPIS:=_slo_def[_licz].PODPIS;
            _ret.W:=_slo_def[_licz].W;
            _ret.OPIS:=exec('ZC','#to_string');
            _ret.UID_REC:=_uid;
            {? _jestZal
            || _typ:=-ZALACZ.bl_info('ZAL','EXTENSION');
               {? _typ<>'pdf'
               || _ret.REF:=$_o2pdf.add(ZALACZ,'ZAL')
               |? _typ='pdf' & ZALACZ.DTSIGN=#0 & _slo_def[_licz].PODPIS='T'
               || _ret.REF:=$_o2pdf.add(ZALACZ,'ZAL','pdf')
               || _ret.REF_BLB:=$ZALACZ.ZAL().ref()
               ?};
               _ret.add()
            |? _puste
            || _ret.add()
            ?}
         ?}
      !}
   ?};
   Cntx.pop(ZC,ZALACZ,P,OSOBA);
   1
|? _slo_zest='Umowa B2B';0
|| 1
|? _slo_zest='Aneks do umowy'
|| Cntx.psh(H,STN,ZALACZ,P,OSOBA);
   Cntx.clr(H,STN,ZALACZ,P,OSOBA);
   exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));
   H.index('_HISTKOD');
   H.prefix(_prac,'Z');
   ZALACZ.index('NAG');
   _jest:=
      {? +|_context=48 & ref_tab(_context)=H
      || H.seek(_context)
      || {? _data=#0 || H.last() || H.find_le(_data) | H.first() ?}
      ?};
   {? _jest
   || _uid:=H.uidref();
      _imNaTecz:=H.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' '+P.T;
      {! _licz:=1..obj_len(_slo_def) |!

:: Załącznik Aneks do umowy
         {? _slo_def[_licz].SLO_NAZ='Aneks do umowy'
         || ZALACZ.prefix(_uid,_slo_def[_licz].SLO_NAZ,);
            _jestZal:=0;
            {? ZALACZ.size()>1
            || _jestZal:=exec('wybor_zalacz','paperless',_imNaTecz,_slo_def[_licz].SLO_NAZ)
            || {? ZALACZ.last() & ZALACZ.ZAL
               || _jestZal:=1
               ?}
            ?};
            _ret.blank();
            _ret.SLO_NAZ:=_slo_def[_licz].SLO_NAZ;
            _ret.PODPIS:=_slo_def[_licz].PODPIS;
            _ret.W:=_slo_def[_licz].W;
            _ret.OPIS:=exec('H','#to_string');
            _ret.UID_REC:=_uid;
            {? _jestZal
            || _typ:=-ZALACZ.bl_info('ZAL','EXTENSION');
               {? _typ<>'pdf'
               || _ret.REF:=$_o2pdf.add(ZALACZ,'ZAL')
               |? _typ='pdf' & ZALACZ.DTSIGN=#0 & _slo_def[_licz].PODPIS='T'
               || _ret.REF:=$_o2pdf.add(ZALACZ,'ZAL','pdf')
               || _ret.REF_BLB:=$ZALACZ.ZAL().ref()
               ?};
               _ret.add()
            |? _puste
            || _ret.add()
            ?}

:: Załącznik: Opis stanowiska
         |? _slo_def[_licz].SLO_NAZ='Opis stanowiska' & H.ST().ref()
         || _ret.blank();
            _ret.SLO_NAZ:=_slo_def[_licz].SLO_NAZ;
            _ret.PODPIS:=_slo_def[_licz].PODPIS;
            _ret.W:=_slo_def[_licz].W;
            _ret.OPIS:=exec('STN','#to_string');
            _ret.UID_REC:=_uid;
            {? STN.ZAL
            || _typ:=-STN.bl_info('ZAL','EXTENSION');
               {? _typ<>'pdf'
               || _ret.REF:=$_o2pdf.add(STN,'ZAL')
               |? _typ='pdf' & _slo_def[_licz].PODPIS='T'
               || _ret.REF:=$_o2pdf.add(STN,'ZAL','pdf')
               || _ret.REF_BLB:=$STN.ZAL().ref()
               ?};
               _ret.add()
            |? _puste
            || _ret.add()
            ?}
         ?}
      !}
   ?};
   Cntx.pop(H,STN,ZALACZ,P,OSOBA);
   1
?};
Cntx.pop(BP_ZEST,BP_DEF);
:: konwersja, zwrot załączników
{? _o2pdf.TAB.size()
|| _o2pdf.convert();
   _o2pdf.zapisz();
   {? _o2pdf.TAB.first()
   || {!
      |? {? _ret.find_key($_o2pdf.TAB.ref(),)
         || _ret.REF_BLB:=
               {? _o2pdf.TAB.ZAL_S
               || $_o2pdf.TAB.ZAL_S().ref()
               || $_o2pdf.TAB.ZAL().ref()
               ?};
            _ret.put()
         ?};
         _o2pdf.TAB.next()
      !}
   ?}
?};
:: przed usunięciem obiektu, przypominamy systemowi o nie-PERSONEL'u
_o2pdf.personel:=_personel;
obj_del(_o2pdf); &_o2pdf;

_ret


\wybor_zalacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Wybieracz załącznika, działa w bieżącym kontekście
::   WE: _a [STRING] - Imię, nazwisko, teczka pracownika
::       _b [STRING] - Typ załącznika
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1,
   'DATA','DATE',MS.comment(ZALACZ,'DATA'),
   'NAME','STRING['+$MS.fld_len(SYSBLOB,'NAME')+']',MS.comment(SYSBLOB,'NAME'),
   'ZAL_NAME','STRING['+$MS.fld_len(ZALACZ,'ZAL_NAME')+']',MS.comment(ZALACZ,'ZAL_NAME'),
   'SIZE','INTEGER',MS.comment(ZALACZ,'SIZE'),
   'REF','STRING[48]','Wskazanie na załącznik'
);
{? ZALACZ.first()
|| {!
   |? _tab.blank();
      _tab.DATA:=ZALACZ.DATA;
      _tab.NAME:=ZALACZ.bl_info('ZAL','NAME');
      _tab.ZAL_NAME:=ZALACZ.ZAL_NAME;
      _tab.SIZE:=ZALACZ.SIZE;
      _tab.REF:=$ZALACZ.ref();
      _tab.add();
      ZALACZ.next()
   !}
?};
_txt:='dla'@;
_win:=_tab.mk_sel('Załączniki'@+': %1 %2 %3'[_a,_txt,_b],,0,'#bp_zalacz',,,,,'U');
_tab.win_fld(_win,,'DATA',,,,,,'Data załączenia'@,,'Data załączenia'@);
_tab.win_fld(_win,,'NAME',,,30,,,'Nazwa pliku'@,,'Nazwa pliku'@);
_tab.win_fld(_win,,'ZAL_NAME',,,30,,,'Nazwa pliku załącznika'@,,'Nazwa pliku załącznika'@);
_tab.win_fld(_win,,'SIZE',,,,,,'Rozmiar pliku załącznika'@,,'Rozmiar pliku załącznika'@);
_tab.win_act(_win,0,'Formuła',_txt:='&Wybierz',,,"ZALACZ.seek(cur_tab(1,1).REF,)","sel_exit()",1,,,,'W');
_tab.win_btn(_win,'text=%1,panel=right,align=begin'[_txt],'menu:W');
_tab.win_sel(_win);
_tab.fld_attr(,2);
_ret:=_tab.select();
_ret


\miejsce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Miejsce wywołania - typ załącznika
::   WE: _a [STRING] - identyfikator jak w /zal.fml lub akronim tabeli, jeśli brak akronim aktualnej tabeli
::   WY: Nazwa typu załącznika SLO_NAZ.NAZWA
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of('') & +|_a & var_pres(_a)>100 || _a || 2-!cur_tab(1,1) ?};
{? _a='um'     || 'Umowa o pracę'@
|? _a='H_UM'   || 'Umowa o pracę'@
|? _a='an'     || 'Aneks do umowy'@
|? _a='H'      || 'Aneks do umowy'@
|? _a='de'     || 'Informacje podatkowe'@
|? _a='rm'     || 'Dokument RMUA'@
|? _a='li'     || 'Lista płac'@
|? _a='gi'     || 'Dokument dla potrzeb GIODO'@
|? _a='im'     || 'Dokument IMiR'@
|? _a='ir'     || 'Dokument IMiR'@
|? _a='sw'     || 'Świadectwo pracy'@
|? _a='ecp'    || 'Karta ewidencji czasu pracy'@
|? _a='nwu'    || 'Wniosek urlopowy'@
|? _a='ZC'     || 'Umowa cywilnoprawna'@
|? _a='P'      || 'Inne'@
|| ''
?}


\miejsce2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Odwrotność \miejsce
::       Miejsce wywołania - typ załącznika
::   WE: _a [STRING] - identyfikator jak w /zal.fml lub akronim tabeli, jeśli brak akronim aktualnej tabeli
::       _b [STRING] - 'U' zwraca miejsce jako H,H_UM,P,OSOBA itd, w przeciwnym wypadku um, an itd
::   WY: Nazwa typu załącznika SLO_NAZ.NAZWA
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of('') & +|_a || _a || return('') ?};
_co:=var_pres('_b')=type_of('') & _b='U';
{? _a='Umowa o pracę'               || {? _co || 'H_UM'  || 'um' ?}
|? _a='Aneks do umowy'              || {? _co || 'H'     || 'an' ?}
|? _a='Informacje podatkowe'        || 'de'
|? _a='Dokument RMUA'               || 'rm'
|? _a='Lista płac'                  || 'li'
|? _a='Dokument dla potrzeb GIODO'  || 'gi'
|? _a='Dokument IMiR'               || 'im'
|? _a='Dokument IMiR'               || 'ir'
|? _a='Świadectwo pracy'            || 'sw'
|? _a='Karta ewidencji czasu pracy' || 'ecp'
|? _a='Wniosek urlopowy'            || 'nwu'
|? _a='Umowa cywilnoprawna'         || {? _co || 'ZC'    || 'zc' ?}
|| {? _co || 'OSOBA' || 'osoba' ?}
?}


\dane_wniosek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Dane o wniosku z procesu
::   WE: _a [STRING] - Symbol procesu
::       _b [STRING] - Wersja procesu
::   WY: Nazwa wniosku lub ''
::----------------------------------------------------------------------------------------------------------------------
{? ~(var_pres('_a')=type_of('') & +|_a & var_pres('_b')=type_of('') & +|_b) || return('') ?};
_sql:='
   select
      B_VALPRT.VALUE
   from
      B_PROC join
      B_PREL using(B_PROC.REFERENCE,B_PREL.B_PROC) join
      B_ELE using(B_ELE.REFERENCE, B_PREL.B_ELE) join
      B_ACTION using(B_ACTION.B_ELE, B_ELE.REFERENCE) join
      B_VALPRT using(B_VALPRT.B_PREL,B_PREL.REFERENCE)
   where
      B_PROC.SYMBOL=\':_a\' and
      B_PROC.VER=\':_b\' and
      B_PROC.ACCEPTED=\'T\' and
      B_PROC.ACTIVE=\'T\' and
      B_PROC.FIRMA=:_c and
      B_ACTION.PROC=\'T\' and
      B_ACTION.UID=\'OBE_FAW_DARP\' and
      B_VALPRT.VALUE in (select ETYPY.NAZWA || \';\' || ETYPY.W_PORTAL from ETYPY where ETYPY.W_PORTAL=\'P\')
   ';
psql(_sql,_a,_b,exec('ref_firma','ustawienia')).VALUE


\spr_zestaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Sprawdzenie aktualności zestawu
::   WE: [_a] [REFERENCE] - wskazanie na zestaw, brak - wszystkie
::       [_b] [INTEGER] - Czy pokazywać komunikaty <>1, nie 0
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_czyKomm:=var_pres('_b')=type_of(0) & _b;
_zest:={? var_pres('_a')=type_of(null()) & _a || _a || null() ?};
_ret:=exec('obj_ntab_set','#array',,'RET',1,'TAB',exec('dane_proces','paperless'));
BP_ZEST.cntx_psh();
BP_ZEST.index('KOD');
BP_ZEST.prefix();
{? {? _zest || BP_ZEST.seek(_zest) || BP_ZEST.first() ?}
|| _len:=MS.fld_len(BP_ZEST,'B_PROC')+1+MS.fld_len(BP_ZEST,'VER')+1+MS.fld_len(BP_ZEST,'KOD')+1;
   _len+=MS.fld_len(BP_ZEST,'NAZ')+51;
   {? _czyKomm || KOMM.init(_len,,'Nieaktualne definicje zestawu'@,'Informacja'@) ?};
   {!
   |? _txt:=exec('dane_wniosek','paperless',BP_ZEST.B_PROC,BP_ZEST.VER);
      {? ~+|_txt
      || _ret.RET*=0;
         {? _czyKomm
         || KOMM.add('Zestaw "%1" - "%2" używa nieaktualnego procesu "%3" wer. %4'@
               [BP_ZEST.KOD,BP_ZEST.NAZ,BP_ZEST.B_PROC,BP_ZEST.VER])
         ?}
      || {? _ret.TAB.find_key(BP_ZEST.B_PROC,BP_ZEST.VER,) || _ret.TAB.RET:=1; _ret.TAB.put() ?}
      ?};
      {? _zest || 0 || BP_ZEST.next() ?}
   !};
   {? _czyKomm || KOMM.select() ?}
|| _ret.RET*=0
?};
BP_ZEST.cntx_pop();
_ret


\bp_zest_lb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Legenda dla zestawu dokumentów
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','BP_ZEST#01');
~~


\bp_zest_sprawdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: akcja w oknie - Weryfikacja aktualności używanych procesów
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_ret:=exec('spr_zestaw','paperless',,1);
_tab:=exec('dane_proces','paperless');
_par.ret.RET:=_ret.RET;
{? _par.ret.TAB.first() || {! |? _par.ret.TAB.del() !} ?};
{? _ret.TAB.first()
|| {!
   |? _par.ret.TAB.blank();
      {! _licz:=1..obj_len(_par.ret.TAB) |!
         _par.ret.TAB[_licz]:=_ret.TAB[_licz]
      !};
      _par.ret.TAB.add();
      _ret.TAB.next()
   !}
?};
{? _par.tab.first() || {! |? _par.tab.del() !} ?};
{? _tab.first()
|| {!
   |? _par.tab.blank();
      {! _licz:=1..obj_len(_par.tab) |!
         _par.tab[_licz]:=_tab[_licz]
      !};
      _par.tab.add();
      _tab.next()
   !}
?}


\bp_zest_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Rekord przed dla BP_ZEST
::       VAR.STRING - może się zmienić nazwa wniosku, dlatego uzupełniane "w locie"
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=params_get().ret;
_find:=_ret.TAB.find_key(BP_ZEST.B_PROC,BP_ZEST.VER,);
_val:=_ret.TAB.VALUE;
{? _find & +|_val
|| VAR.STRING:=_val;
   BP_ZEST.actions_grayed('WYB')
|| VAR.STRING:='';
   BP_ZEST.actions_grayed('WYB','W')
?}


\port
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Odczyt danych z parametru elementu procesu.
::       Proces musi być aktywny, zaakceptowany. Element musi być pierwszy w procesie.
::   WE: _a [STRING] - Identyfikator czynności, domyślnie 'OBE_FAW_DARP'
::       _b [STRING] - Symbol procesu
::       _c [STRING] - Wersja procesu
::       _d [STRING] - Formuła na wartość, domyślnie pole B_VALPRT.VALUE
::       _e [STRING] - Rodzaj parametru, domyślnie 'IN'
::       _f [STRING] - Nazwa parametru
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of('') & +|_a || _a || 'OBE_FAW_DARP' ?};
_b:={? var_pres('_b')=type_of('') & +|_b || _b || return('') ?};
_c:={? var_pres('_c')=type_of('') & +|_c || _c || return('') ?};
_d:={? var_pres('_d')=type_of('') & +|_d || _d || 'B_VALPRT.VALUE' ?};
_e:={? var_pres('_e')=type_of('') & +|_e || _e ||  exec('kind_in','#b_port') ?};
_f:={? var_pres('_f')=type_of('') & +|_f || _f ||  return('') ?};
_ret:='';
Cntx.psh(B_PROC,B_PREL,B_ELE,B_ACTION,B_VALPRT);
Cntx.clr(B_PROC,B_PREL,B_ELE,B_ACTION,B_VALPRT);
B_PROC.index('SYMVER');
B_PREL.index('PROC');
B_ACTION.index('B_ELE');
B_VALPRT.index('PREL');
B_PROC.prefix(exec('ref_firma','ustawienia'),_b,_c,);
{? B_PROC.first()
|| {!
   |? {? B_PROC.ACCEPTED='T' & B_PROC.ACTIVE='T'
      || B_PREL.prefix(B_PROC.ref(),'B_ACTION',);
         {? B_PREL.first()
         || {!
            |? B_ACTION.prefix(B_PREL.B_ELE);
               {? B_ACTION.first() & B_ACTION.UID=_a & B_PREL.STARTACT='T'
               || B_VALPRT.prefix(B_PREL.ref(),'T',_e,_f);
                  {? B_VALPRT.first()
                  || {!
                     |? _ret:=($(_d))();
                        B_VALPRT.next()
                     !}
                  ?}
               ?};
               B_PREL.next()
            !}
         ?}
      ?};
      B_PROC.next()
   !}
?};
Cntx.pop(B_PROC,B_PREL,B_ELE,B_ACTION,B_VALPRT);
_ret


\TAB_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Po odświeżeniu okna z typami podpisów
::   WE: _a [OBJ] - Obiekt z polami TAB (tabela podpisów), WS (okno tabeli podpisów)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_co:=_a.PODPISY;
_pod:="
   {? _a.find_key(_b) || _a.SEL:=1; _a.put() ?}
";
{? _a.TAB.first()
|| {! |? _a.TAB.SEL:=0; _a.TAB.put(); _a.TAB.next() !}
?};
{? +|_co
|| _spl:=spli_str(_co,';');
   _licz:=1;
   _loop:=_licz<=obj_len(_spl);
   {! |? _loop |!
      {? var_pres('_slo')>0 || &_slo ?};
      _slo:=spli_str(_spl[_licz],',');
      _jest:=obj_len(_slo)>1;
      _licz+=1;
      {? _slo[1]=BP_DEF.SLO_NAZ().NAZWA
      || {? _jest & _slo[2]*'K' || _pod(_a.TAB,'Kwalifikowany') ?};
         {? _jest & _slo[2]*'N' || _pod(_a.TAB,'Niekwalifikowany') ?};
         {? _jest & _slo[2]*'R' || _pod(_a.TAB,'Odręczny') ?};
         {? _jest & _slo[2]*'Z' || _pod(_a.TAB,'Zwykły') ?};
         _loop:=0
      || _loop:=_licz<=obj_len(_spl)
      ?}
   !}
?};
_a.TAB.first();
grp_disp(_a.TAB,_a.WS);
1


\TAB_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Przed obsługą okna z typami podpisów
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? grp_empty(BP_DEF,'WER') ||
   return('#disable')
?}


\bp_zest_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Trigger na usuń przed
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BP_DEF.index('UNIQ');
BP_DEF.prefix(BP_ZEST.ref());
{? BP_DEF.first() || {! |? BP_DEF.del() !} ?};
1


\czy_grupowy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Ustawienie, czy typ załącznika traktujemy jako grupowy
::   WE: _a [STRING] - Typ załącznika
::   WY: 0/1 - załącznik nie grupowy/grupowy
::----------------------------------------------------------------------------------------------------------------------
','
'Opis stanowiska,'
'Inne,'
*(','+_a+',')>0


\form_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Formuła testowa
::   WE:
::   WY: [OBJ] - konieczne są 2 pola BLOB, OPIS
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('obj_ntab_set','#array',,'BLOB','','OPIS','Opis');
SYSBLOB.clear();
_ret.BLOB:={? SYSBLOB.last() || $SYSBLOB.ref() ?};
_ret


\tab_kontekst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Tabela powiązań kontekstów
::   WE:
::   WY: TABELA
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(2,'P','STRING[48]','P.uidref()','TAB','STRING[48]','Tabela powiązana uidref()')


\podpisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Podpisuje wymagane załączniki
::   WE: _a  [TABELA] - tabela BLOB [BLOB,DESC]
::       _b  [STRING] - Wskazanie na zestaw BP_ZEST
::      [_c] [NUMBER] - czy podpisywać wszystkie przekazane załączniki, również te niewymagane?
::                      [0 - nie (domyślnie) / 1 - tak]
::   WY: _a
::----------------------------------------------------------------------------------------------------------------------
_BLOB:=_a;
_sign_all:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_jest:=0;
Cntx.psh(BP_ZEST,BP_DEF);
Cntx.clr(BP_ZEST,BP_DEF);
{? var_pres('_b')=type_of(null()) & _b & _BLOB.first() & BP_ZEST.seek(_b)
|| VAR_DEL.delete('__TAB');
   __TAB:=tab_tmp(1,
      'REF','INTEGER','Ref',
      'IDADD','IDADD','ID',
      'BLOB','BLOBRAW','Załącznik',
      'DESC','SYS_MEMO','Opis',
      'O2PDF','INTEGER','Ref'
   );
   _add:="
      _a.blank();
      _a.REF:=_b.ref();
      _a.BLOB:=_b.BLOB;
      _a.add();
      _a.memo_set(_b.memo_txt(,1,'DESC'),'DESC');
      _a.memo_put(,'DESC')
   ";
   BP_DEF.index('TYP');
   BP_DEF.prefix(BP_ZEST.ref());
   exec('init','office2pdf');
   _o2pdf:=obj_new(@.CLASS.OFCE2PDF);
:: Start procesu z pulpitu, system nie, wie że to PERSONEL
   _personel:=_o2pdf.personel;
   _o2pdf.personel:=1;
   {!
   |? {? var_pres('_op')>0 || &_op ?};
      _op:=spli_str(_BLOB.memo_txt(,1,'DESC'),%255);
      {? _sign_all | BP_DEF.find_key(_op[1],) & _op[2]='T'
      || _add(__TAB,_BLOB);
         __TAB.O2PDF:=_o2pdf.add(__TAB,'BLOB','pdf');
         __TAB.put();
         _jest+=1
      ?};
      _BLOB.next()
   !};
   {? _jest
   || {? _o2pdf.TAB.first()
      || {!
         |? _o2pdf.TAB.ZN:='S';
            _o2pdf.TAB.put();
            _o2pdf.TAB.next()
         !}
      ?};
      _o2pdf.v_sign();
      {? _o2pdf.TAB.first()
      || _jestSign:=0;
         {!
         |? {? _o2pdf.TAB.ZAL_D=#0
            || {? _o2pdf.TAB.ZN='S' & _o2pdf.TAB.ZAL_S
               || _o2pdf.TAB.ZN:='O';
                  _jestSign+=_o2pdf.TAB.put()
               ?}
            ?};
            _o2pdf.TAB.next()
         !};
         {? _jestSign || _o2pdf.sign() ?}
      ?};
      {? _BLOB.first()
      || {!
         |? {? __TAB.find_key(_BLOB.ref()) & _o2pdf.TAB.seek(__TAB.O2PDF)
            || _BLOB.BLOB:=
                  {? _o2pdf.TAB.ZAL_S
                  || _o2pdf.TAB.ZAL_S
                  || _o2pdf.TAB.ZAL
                  ?};
               _BLOB.put()
            ?};
            _BLOB.next()
         !}
      ?}
   ?};
   VAR_DEL.delete('__TAB');
   _o2pdf.personel:=_personel;
   obj_del(_o2pdf); &_o2pdf
?};
Cntx.pop(BP_ZEST,BP_DEF);
_BLOB


\dodaj_dokument
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Dołączenie dokumentu z akcji kontrolki
::       Możliwości są 2. Część mechanizmów opiera się na params_get(), część na argumentach. Z tego powodu obsługa
::       argumentu 3 (_c)
::   WE: _a [STRING] - nazwa pliku
::       _b [STRING] - wskazanie na źródło danych
::       [_c] [OBIEKT] - obiekt par
::   WY:
:: ~OST: INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
{? ~(var_pres('_a')=type_of('') & +|_a) || return() ?};
_uid:={? var_pres('_b')=type_of('') & +|_b=48 || _b || '' ?};
_jestPar:=0;
{? var_pres('_c')>100 & var_pres('BUF',_c.par.arg)>100
|| _jestPar:=1;
   _slo_naz:=_c.par.arg.SLO_NAZ;
   _BUF:=_c.par.arg.BUF
|? type_of(params_get()) & var_pres('par',params_get())>100
|| _jestPar:=2;
   _slo_naz:=params_get().par.arg.SLO_NAZ;
   _BUF:=params_get().par.arg.BUF
?};

_a:=gsub(_a,'@!Tmp',tmp_dir());
{? fexists(_a,0) & _jestPar
|| _path:=exec('path','#file',_a);
   _ext:=-(exec('split_file_name','#file',_a).ext);
   _new:=_path+_slo_naz+'.'+_ext;
   {? fcopy(_a,_new,0,0,1) & ferase(_a,0)
   || exec('init','office2pdf');
      _o2pdf:=obj_new(@.CLASS.OFCE2PDF);
:: Start procesu z pulpitu, system nie, wie że to PERSONEL
      _personel:=_o2pdf.personel;
      _o2pdf.personel:=1;
::      _new:=gsub(_new,'@','');
      _o2pdf.add(_new);
      {? _o2pdf.TAB.first() & _o2pdf.isOffice(_new)
      || _o2pdf.convert();
         {? _o2pdf.TAB.first()
         || {? _o2pdf.TAB.ZAL
            || _BUF.BLOB:=_o2pdf.TAB.ZAL;
               {? _BUF.put()
               || {? _jestPar=1
                  || _c.par.arg.UID_REC:=_uid
                  || params_get().par.arg.UID_REC:=_uid
                  ?}
               ?}
            ?}
         ?}
      || {? _ext='pdf' & _BUF.bl_put('BLOB',_new,0,1,_o2pdf.TAB.NAZ)
         || {? _jestPar=1
            || _c.par.arg.UID_REC:=_uid
            || params_get().par.arg.UID_REC:=_uid
            ?}
         ?}
      ?}
   ?};
:: przed usunięciem obiektu, przypominamy systemowi o nie-PERSONEL'u
   _o2pdf.personel:=_personel;
   obj_del(_o2pdf); &_o2pdf
?}


\konwersja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Konwertuje do PDF'a i zwraca
::   WE: _a  [STRING] - wskazanie na plik
::      [_b] [STRING] - napis informujący co zwracamy ['TAB' - tabela tymczasowa, 'BLOB' - blob (domyślnie)]
::   WY: Uchwyt do pliku
::----------------------------------------------------------------------------------------------------------------------
_file:={? var_pres('_a')=type_of('') || _a || return(~~) ?};
  _co:={? var_pres('_b')=type_of('') || _b || 'BLOB'     ?};

::ustawiamy domyślnie zwracaną wartość
{? _co<>'TAB' & _co<>'BLOB' || _co:='BLOB' ?};

exec('init','office2pdf');
_o2pdf:=obj_new(@.CLASS.OFCE2PDF);
:: Start procesu z pulpitu, system nie, wie że to PERSONEL
_personel:=_o2pdf.personel;
_o2pdf.personel:=1;
_new:=gsub(_file,'@','');
_o2pdf.add(_file);
_BUF:=tab_tmp(1,'IDADD','IDADD','ID','BLOB','BLOBRAW','Załącznik');
{? _o2pdf.TAB.size()
|| _o2pdf.convert();
   {? _o2pdf.TAB.first()
   || {? _o2pdf.TAB.ZAL
      || _BUF.blank();
         _BUF.BLOB:=_o2pdf.TAB.ZAL;
         _BUF.add()
      ?}
   ?}
?};
:: przed usunięciem obiektu, przypominamy systemowi o nie-PERSONEL'u
_o2pdf.personel:=_personel;
obj_del(_o2pdf); &_o2pdf;
{? _co='TAB'
|| _BUF
|| _BUF.BLOB
?}


\czy_podpis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Czy w zestawie istnieje chociaż jeden dokument wymagający podpisu?
::   WE: _a [REFERENCE] - wskazanie na zestaw
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
Cntx.psh(BP_DEF);
Cntx.clr(BP_DEF);
BP_DEF.index('UNIQ');
BP_DEF.prefix(_a);
{? BP_DEF.first()
|| {!
   |? {? BP_DEF.PODPIS='T' || _ret:=1 ?};
      _ret=0 & BP_DEF.next()
   !}
?};
Cntx.pop(BP_DEF);
_ret


\pdok_act_paperles
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Obsługa akcji "Paperless - Przed" w oknach wertowania.
::       _a [STRING] - Identyfikator miejsca, patrz \miejsce/paperless.fml. Jeśli brak, pobierany z kontekstu.
::       _b [UIDREF] - Wskazanie na pracownika. Jeśli brak, pobierany z kontekstu.
::       _c [UIDREF] - Wskazanie na zapis (H, H_UM itp). Jeśli brak, pobierany z kontekstu.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_czyRun:=1;
_uidRef:={? var_pres('_c')=type_of('') & +_c=48 || _c || cur_tab(1,1).uidref() ?};
Cntx.psh(SLO_TYP,SLO_NAZ);
Cntx.clr(SLO_TYP,SLO_NAZ);
_edokum:={? ',H,H_UM,ZC,'*(','+(2-!ref_tab(_uidRef))+',') || exec('czyJestProces','paperless',_uidRef).REF || '' ?};
{? +|_edokum
|| EDOKUM.cntx_psh();
   EDOKUM.use(8+_edokum);
   EDOKUM.clear();
   _txtB:='Dla wybranego zapisu jest już uruchomiony wniosek w obiegu.'@;
   {? EDOKUM.seek(_edokum,)
   || {? EDOKUM.STATUS='Y'
      || _txtB:='Dla wybranego zapisu był już uruchomiony wniosek w obiegu.'@;
         _txt:='Czy uruchomić ponownie?'@;
         _czyRun:=FUN.ask(_txtB+'\n\n'+_txt);
         {? _czyRun
         || exec('del_uid','paperless',_uidRef)
         ?}
      || _czyRun:=0;
         _txtA:='Czy wyświetlić szczegóły?'@;
         {? FUN.ask(_txtB+'\n'+_txtA)
         || exec('todo_select','#b__box',EDOKUM.uidref())
         ?}
      ?}
   || _txtA:='Nie powiodło się pobranie dokumentu w celu prezentacji szczegółów.'@;
      _txt:='Czy uruchomić ponownie?'@;
      _czyRun:=FUN.ask(_txtB+'\n'+_txtA+'\n\n'+_txt);
      {? _czyRun
      || exec('del_uid','paperless',_uidRef)
      ?}
   ?};
   EDOKUM.cntx_pop()
?};
{? _czyRun
|| _a:={? var_pres('_a')=type_of('') & +|_a & var_pres(_a)>100 || _a || ~~ ?};
   _arg:=exec('mp_run_a','#b__box');
   _miejsce:=exec('miejsce','paperless',_a);
   _typ:=exec('FindInSet','#table','SLO_TYP','SYMBOL','ZAL',,,1);
   _ref:=exec('FindInSet','#table',
      'SLO_NAZ',
      'NAZWA',
      _miejsce,
      _typ
   );
   _uid:={? SLO_NAZ.seek(_ref) || SLO_NAZ.uidref() || '' ?};
   {? +|_miejsce & _ref & +|_uid=48
   || _uidP:={? var_pres('_b')=type_of('') & +_b=48 || _b || P.uidref() ?};
      _p_id:=exec('getPid','portal_core',_uidP);
      {? _p_id=0
      || FUN.info('Dane pracownika nie zostały jeszcze zsynchronizowane z Portalem HR.'@+'\n'+
                  'Nie można uruchomić procesu obiegu dokumentów Paperless HR.'@)
      || _p_ref:=
         {? var_pres('_b')=type_of('') & +_b=48
         || {? P.seek(_b,) || P.ref() || null() ?}
         || P.ref()
         ?};

         _arg.ACT_UID:='PEP_PRA_PDOK';
         _arg.UIDREF:=obj_new('P','SLO_NAZ_REF');
         _arg.AKCJA:='PAPERLES';
         _arg.CONTEXT:=obj_new('UIDREF');
         _arg.UIDREF.P:=_uidP;
         _arg.UIDREF.SLO_NAZ_REF:=_uid;
         _arg.PROC_START:='T';
         _arg.CONTEXT.UIDREF:=_uidRef;

         _arg.PORTS_IN:=exec('portsIn','#b__box',_arg.ACT_UID);
         exec('portsInSet','#b__box',_arg.PORTS_IN,_arg.ACT_UID,'P',_p_ref);
         exec('portsInSet','#b__box',_arg.PORTS_IN,_arg.ACT_UID,'SLO_NAZ',_miejsce);
         exec('portsInSet','#b__box',_arg.PORTS_IN,_arg.ACT_UID,'TITLE',_miejsce);
         exec('portsInSet','#b__box',_arg.PORTS_IN,_arg.ACT_UID,'SLO_NAZ_REF',_ref);
         exec('mp_run','#b__box',_arg)
      ?}
   ?}
?};
Cntx.pop(SLO_TYP,SLO_NAZ);
~~


\czyJestProces
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Informacja o EDOKUM dla danego kontekstu pracy
::   WE: _a [REFERENCE] - Wskazanie na kontekst
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('obj_ntab_set','#array',,'REF','');
BP_UID.index('UID');
BP_UID.prefix(_a,);
{? BP_UID.first()
|| EDOKUM.cntx_psh();
   EDOKUM.use(ref_name(BP_UID.EDOKUM));
   EDOKUM.prefix();
   {!
   |? {? EDOKUM.seek(BP_UID.EDOKUM) &
         EDOKUM.FIRMA=exec('ref_firma','ustawienia') &
         EDOKUM.PAPERLES=1 &
         EDOKUM.ZAM<>'T' &
         EDOKUM.WYCOFAJ='' &
         EDOKUM.B_PREL<>''
      || _ret.REF:=$EDOKUM.ref()
      ?};
      _ret.REF='' & BP_UID.next()
   !};
   EDOKUM.cntx_pop()
?};
_ret


\isEdokumInBP_UID
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.37]
:: OPIS: Zwraca informację o tym, czy przekazany uidref EDOKUMa jest w tabeli BP_UID
::   WE: _a [STRING] - uidref rekordu EDOKUM
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_edokum:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

BP_UID.cntx_psh();
BP_UID.index('UNIQ');
BP_UID.prefix(_edokum,);
_result:=BP_UID.first();
BP_UID.cntx_pop();
_result


\add_uid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Dołączenie pozycji do BP_UID
::   WE: _a [STRING] - uidref EDOKUM
::       _b [STRING] - uidref kontekstu
::----------------------------------------------------------------------------------------------------------------------
BP_UID.cntx_psh();
BP_UID.index('UNIQ');
BP_UID.prefix(_a,_b);
{? ~BP_UID.first()
|| BP_UID.blank();
   BP_UID.EDOKUM:=_a;
   BP_UID.UIDREF:=_b;
   BP_UID.add()
?};
BP_UID.cntx_pop()


\del_uid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Usunięcie zbędnej pozycji z BP_UID
::   WE: _a [STRING] - uidref EDOKUM lub kontekstu
::----------------------------------------------------------------------------------------------------------------------
{? +|_a=48
|| BP_UID.cntx_psh();
   BP_UID.index('UNIQ');
   BP_UID.prefix(_a,);
   {? BP_UID.first() || {! |? BP_UID.del() !} ?};
   BP_UID.index('UID');
   BP_UID.prefix(_a,);
   {? BP_UID.first() || {! |? BP_UID.del() !} ?};
   BP_UID.cntx_pop()
?}


\sprProcNad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Sprawdzenie procesu nadrzędnego
::   WE: _a [UIDREF] - wskazanie na rekord kluczowy
::   WY: 0/1 - brak błędów/błąd
::----------------------------------------------------------------------------------------------------------------------
_klucz:={? var_pres('_a')=type_of('') & +|_a=48 || _a || '' ?};
{? ~+|_klucz || return(0) ?};
Cntx.psh(BI_PORT,BI_PREL,BI_PROC);
{? BI_PORT.name()='' || BI_PORT.use('bi_o____') ?};
_mask:=BI_PORT.name()+4;
exec('open','#bi_arch',_mask);
BI_PORT.index('VALUE');
_err:=0;
BI_PORT.prefix(_klucz,'T','B_ACTION');
{? BI_PORT.first()
|| {!
   |? {? BI_PORT.BI_PREL().STOP>0
      || {? BI_PORT.B_PREL().CLASS='B_ACTION' & BI_PORT.B_PREL=BI_PORT.BI_PREL().B_PREL
         || _err+=exec('isProblemsProc','#bi_msg',BI_PORT.BI_PROC)=-1
         ?}
      ?};
      ~_err & BI_PORT.next()
   !}
?};

BI_PORT.prefix(_klucz,'N','B_ACTION');
{? ~_err & BI_PORT.first()
|| {!
   |? {? BI_PORT.BI_PREL().STOP>0
      || {? BI_PORT.B_PREL().CLASS='B_ACTION' & BI_PORT.B_PREL=BI_PORT.BI_PREL().B_PREL
         || _err+=exec('isProblemsProc','#bi_msg',BI_PORT.BI_PROC)=-1
         ?}
      ?};
      ~_err & BI_PORT.next()
   !}
?};
Cntx.pop(BI_PORT,BI_PREL,BI_PROC);
_err

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:20 246a67877ec199447b7293c6552bf3941a5a649ad5fbfcf2356e2ef198e9fb24a5d83c96c00ea96e856a58caf8fe2fa5524fc02aecf44ac28d34e8e6bcea44664c284d78a3b7613fb1d0232b1dc833fc438863d1b0817d19da94af56a58397451303ebed4bb0a7c5fbf616399d374c28370d2e7d5335cbae3fe0727786a98b2f
