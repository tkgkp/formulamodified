:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zl_lmit1.fml
:: Utworzony: 31.03.2023
:: Autor: TS
::======================================================================================================================
:: Zawartość: Obsługa zapotrzebowań do zlecenia - limity, odpady i surowce nielimitowane.
::            Funkcje wspólne z wyłączeniem dedykowanych TYLKO dla odpadów i surowców nielimitowanych
::            Plik biblioteczny - wspólna obsługa dla czynności obszaru roboczego TTE_PZL
::======================================================================================================================


\efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Opcje pól w oknie redagowania ZLIM
::       Kontekst wywołania: rekord tabeli ZLIM
::   WE: _a - akronim okna
::----------------------------------------------------------------------------------------------------------------------
_win:=ZLIM.win_edit('?');
{? ZLIM.GROP=null()
|| _zl:='0'; _grop:='grayed'
|| _zl:='grayed'; _grop:='0'
?};
_lil_mark:=exec('zlim_chk4il','zl_nlimit',ZLIM.ref())=0;
ZLIM.efld_opt(_win,'mark=%1'[$_lil_mark],,'LIL');
ZLIM.efld_opt(_win,'editable=%1'[_zl],,'ZLEC','SYM');
ZLIM.efld_opt(_win,'editable=%1'[_zl],ZGP,'NRZLP','NRPRZ');
ZLIM.efld_opt(_win,'editable=%1'[_zl],,'ZGP','NRP');
ZLIM.efld_opt(_win,'editable=%1'[_zl],ZGP,'OPIS');
ZLIM.efld_opt(_win,'editable=%1'[_grop],,'GROP');
ZLIM.efld_opt(_win,'editable=%1'[_grop],GROP,'OPIS');
~~


\grop_limity_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Usuwa limity grupy operacji
::   WE: _a - GROP.ref()
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

ZLIM.index('GROPKM');

ZLIM.prefix(_a,'N');
{? ZLIM.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      ZLIM.cntx_psh();
      {? ZLIM.next()
      || _ref_nxt:=ZLIM.ref()
      ?};
      ZLIM.cntx_pop();

      _can_continue:=exec('ZLIM_del_brut','zl_limit',1);

      {? _ref_nxt<>null()
      || _next:=ZLIM.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};

{? _can_continue>0
|| ZLIM.prefix(_a,'T',0);
   {? ZLIM.first()
   || {!
      |? _next:=0;
         _ref_nxt:=null();
         ZLIM.cntx_psh();
         {? ZLIM.next()
         || _ref_nxt:=ZLIM.ref()
         ?};
         ZLIM.cntx_pop();

         _can_continue:=exec('ZLIM_del_brut','zl_limit',1);

         {? _ref_nxt<>null()
         || _next:=ZLIM.seek(_ref_nxt)
         ?};
         _next>0 & _can_continue>0
      !}
   ?}
?};

{? _can_continue>0
|| _result:=1
?};
_result


\is_zlim_grop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Sprawdza, czy do GROP są przypisane limity
::   WE: _a - GROP.ref()
::       Nie jest sprawdzana obecność ani typ argumentów
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
_grop:=_a;
_res:=0;

GROP.cntx_psh();
GROP.clear();
{? GROP.seek(_grop)
||
   exec('openmask','zl_common',null(),GROP.ref());
   ZLIM.index('GROPM');
   ZLIM.prefix(GROP.ref());
   _res:=ZLIM.first()
?};
GROP.cntx_pop();
_res


\zlim_trig_add_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Truger po dodaniu rekordu tabeli ZLIM
::----------------------------------------------------------------------------------------------------------------------
{? ZLIM.GROP<>null()
|| exec('FindAndGet','#table',GROP,ZLIM.GROP,,"GROP.LIM:='T';GROP.put()",~~)
?};
~~


\zlim_trig_put_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Triger po modyfikacji rekordu tabeli ZLIM
::----------------------------------------------------------------------------------------------------------------------
~~


\zlim_trig_del_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Triger po usunięciu rekordu tabeli ZLIM
::----------------------------------------------------------------------------------------------------------------------
_grop:=bfld('GROP');
{? _grop<>null()
|| _del:=0;
   ZLIM.cntx_psh();
   ZLIM.index('GROPNM');
   ZLIM.prefix(_grop);
   {? ZLIM.first()=0 || _del:=1 ?};
   ZLIM.cntx_pop();
   {? _del || exec('FindAndGet','#table',GROP,_grop,,"GROP.LIM:='N';GROP.put()",~~) ?}
?};
~~


\zlim_zwr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Zwrot dla surowca limitowanego
::       Kontekst wywołania - zanaczone rekordy ZLIM, (VAR.A_ZLEC, gdy _a=1)
::       [_a] - miesjce wywołania: [0] - okno surowców limitowanych
::                                  1  - kontrola zamknięcia zlecenia/grupy (nie dotyczy odpadów)
::       [_b] - rodzaj limitu: ['S'] - surowiec (zwrot surowca)
::                              'O'  - odpad (rejestracja odpadu)
::----------------------------------------------------------------------------------------------------------------------
_where:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_so:={? var_pres('_b')=type_of('') || _b || 'S' ?};
{? _where=1
|| {? VAR.A_GROP<>null()
   || _tab:=GROP;
      _ref:=VAR.A_GROP
   || _tab:=ZL;
      _ref:=VAR.A_ZLEC
   ?}
|| _zl:=params_get().env.ZL;
   _grop:=params_get().env.GROP;
   _ZLIMp:=params_get().env.env_limit.ZLIMp;
   {? _grop<>null()
   || _tab:=GROP;
      _ref:=_grop
   || _tab:=ZL;
      _ref:=_zl
   ?}
?};
_f500705:=exec('get','#params',500705,2);
_f500709:=exec('get','#params',500709,2);
_tab.cntx_psh();
_tab.prefix();
{? _tab.seek(_ref)
|| {? _tab=ZL & ZL.ST_Z='T'
   || FUN.info('Zlecenie jest zamknięte.\nOperacja niemożliwa.'@)
   |? _tab=GROP & GROP.STATUS='Z'
   || FUN.info('Grupa operacji jest zamknięta.\nOperacja niemożliwa.'@)
   |? _so='S' & _f500709=''
   || FUN.emsg('Nie ustawiono parametru %1.\nNależy uzupełnić konfigurację systemu.'@['500709'])
   |? _so='O' & _f500705=''
   || FUN.emsg('Nie ustawiono parametru %1.\nNależy uzupełnić konfigurację systemu.'@['500705'])
   ||
::    kontrola, czy zaznaczono pozycje limitów do jednego zlecenia
      _can_continue:=1;
      {? _where=0
      || {? _tab=ZL
         || _zl_ref:=exec('ctrlSelZLIM','zl_limit',_ZLIMp.ZLIM);
            {? _zl_ref=0
            || FUN.info('Zaznaczono limity z różnych zleceń.\nOperacja niemożliwa.'@);
               _can_continue:=0
            ?}
         ?}
      ?};

      {? _can_continue>0
      ||
         {? _so='S'
         || KOMM.init(,,'Rozliczenie zwrotu surowców'@)
         || KOMM.init(,,'Rozliczenie odpadów/koproduktów'@)
         ?};
         VAR_DEL.delete('__ENV_GEN');
         _type:=
            {? _tab=GROP
            || {? _so='S' || 'ZWR_GROP' || 'ODP_ZGROP' ?}
            || {? _so='S' || 'ZWR' || 'ODP_ZL' ?}
            ?};
         __ENV_GEN:=exec('env_gen','zl_limit',_type);
         _zlim_tab:=__ENV_GEN.ZLIM;
::       Wypełnienie tabeli z listą ZLIMów
         {? _where=1
         || _tab2:=cur_tab(1,1);
            _tab2.cntx_psh();
            _tab_zlim:=__ZLIM4LIM;
            _tab_zlim.cntx_psh();
            _ndx:=_tab_zlim.ndx_tmp(,,'TAB_REF',,,'M_REF',,);
            _tab_zlim.index(_ndx);
            {? _tab2.sel_size()
            || _tab_sel:=_tab2.sel_aget()
            || _tab_sel:=tab_tmp(,'REF','INTEGER','');
               _tab_sel.REF:=_tab2.ref();
               _tab_sel.add()
            ?};
            {? _tab_sel.first()
            || {!
               |?
                  {? _tab2.seek(_tab_sel.REF)
                  || _tab_zlim.prefix($_tab2.ref(),_tab2.T);
                     {? _tab_zlim.first()
                     || {!
                        |?
                           {? ~_zlim_tab.find_key(_tab_zlim.REF,)
                           || _zlim_tab.REF:=_tab_zlim.REF;
                              _zlim_tab.MREF:=_tab_zlim.M_REF;
                              _zlim_tab.add()
                           ?};
                           _tab_zlim.next()
                        !}
                     ?}
                  ?};
                  _tab_sel.next()
               !}
            ?};
            _tab_zlim.ndx_drop(_ndx);
            _tab_zlim.cntx_pop();
            _tab2.cntx_pop()
         || _Tab:=_ZLIMp.ZLIM;
            _nr:=_Tab.NR;
            _Tab.cntx_psh();
            {? ~_Tab.sel_size()
            || _zlim_tab.REF:=_Tab.REF;
               _zlim_tab.MREF:=_Tab.M_REF;
               _zlim_tab.add()
            || _Tab.prefix();
               {? _Tab.first()
               || {!
                  |? {? _Tab.sel_mark()
                     || _zlim_tab.REF:=_Tab.REF;
                        _zlim_tab.MREF:=_Tab.M_REF;
                        _zlim_tab.add()
                     ?};
                     _Tab.next()
                  !}
               ?}
            ?};
            _Tab.cntx_pop()
         ?};
         {? _tab=GROP
         || exec('find_grop','zl_grop')
         || exec('find_zl','zl_nlimit')
         ?};
         exec('select_gen','zl_limit');
         VAR_DEL.delete('__ENV_GEN','__ZLIM4LIM');
::       Odświeżenie danych
         {? _where=1
         || exec('kontr_lim','zl_limit','T',0,,cur_tab(1,1),,,{? _tab=GROP || 1 || 0 ?})
         || exec('__ZLIM_datapump','zl_limit',_ZLIMp);
            _loop:=_Tab.first();
            {!
            |? _loop
            |! _loop:={? _Tab.NR<>_nr || _Tab.next() ?}
            !};
            obj_del(_Tab)
         ?}
      ?}
   ?}
?};
_tab.cntx_pop();
~~


\zlim_zwr_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Zwrot dla surowca limitowanego - grupa przed
::       [_a] - miesjce wywołania: [0] - okno surowców nielimitowanych
::                                  1  - kontrola zamknięcia zlecenia (nie dotyczy odpadów)
::       [_b] - rodzaj limitu: ['S'] - surowiec (zwrot surowca)
::                              'O'  - odpad (rejestracja odpadu)
::----------------------------------------------------------------------------------------------------------------------
_where:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_so:={? var_pres('_b')=type_of('') || _b || 'S' ?};
sel_nchk();
params_exec('zlim_zwr','zl_limit1',_where,_so);
_tab:=cur_tab(1,1);
{? _tab.sel_size() || _tab.sel_adel() ?};
~~


\lim_wyd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Wydanie dla surowca limitowanego
::       Kontekst wywołania - zanaczone rekordy ZLIM (limity), VAR.A_ZLEC/VAR.A_GROP
::       [_a] - miesjce wywołania: [0] - okno surowców limitowanych
::                                  1 - kontrola zamknięcia zlecenia/grupy
::----------------------------------------------------------------------------------------------------------------------
_where:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_can_continue:=1;

{? _where=1
|| {? VAR.A_GROP<>null()
   || _tab:=GROP;
      _ref:=VAR.A_GROP
   || _tab:=ZL;
      _ref:=VAR.A_ZLEC
   ?}
|| _zl:=params_get().env.ZL;
   _grop:=params_get().env.GROP;
   _ZLIMp:=params_get().env.env_limit.ZLIMp;
   {? _grop<>null()
   || _tab:=GROP;
      _ref:=_grop
   || _tab:=ZL;
      _ref:=_zl
   ?}
?};

{? _where=0
||
:: kontrola, czy zaznaczono pozycje limitów do jednego zlecenia
   {? _tab=ZL
   || _ref_zl:=exec('ctrlSelZLIM','zl_limit',_ZLIMp.ZLIM);
      {? _ref_zl=0
      || FUN.info('Zaznaczono limity z różnych zleceń.\nOperacja niemożliwa.'@);
         _can_continue:=0
      || _ref:=exec('FindAndGet','#table',ZL,_ref_zl,,,null())
      ?}
   ?}
|? _where=1
||
:: kontrola, czy pozycje limitów pochodzą tylko z jednego lub wielu zleceń
   _tab2:=cur_tab(1,1);
   _tab2.cntx_psh();
   _tab_zlim:=__ZLIM4LIM;
   _tab_zlim.cntx_psh();
   _ndx:=_tab_zlim.ndx_tmp(,,'TAB_REF',,,'M_REF',,);
   _tab_zlim.index(_ndx);
:: Tabela z listą zleceń/grup
   _tab_zl:=tab_tmp(,'REF','STRING[16]','$ZL.ref()');
   {? _tab2.sel_size()
   || _tab_sel:=_tab2.sel_aget()
   || _tab_sel:=tab_tmp(,'REF','INTEGER','');
      _tab_sel.REF:=_tab2.ref();
      _tab_sel.add()
   ?};
   {? _tab_sel.first()
   || {!
      |?
         {? _tab2.seek(_tab_sel.REF)
         ||
            _tab_zlim.prefix($_tab2.ref(),_tab2.T);
            {? _tab_zlim.first()
            || {!
               |?
::                Wypełnienie tabeli z listą zleceń/grup
                  _zlec:={? _tab=ZL || _tab_zlim.ZL_SQL || _tab_zlim.GROP_SQL ?};
                  {? ~_tab_zl.find_key(_zlec,)
                  || _tab_zl.REF:=_zlec;
                     _tab_zl.add()
                  ?};
                  _tab_zlim.next()
               !}
            ?}
         ?};
         _tab_sel.next()
      !}
   ?};
   _tab_zlim.ndx_drop(_ndx);
   _tab_zlim.cntx_pop();
   _tab2.cntx_pop();
:: Wybór zlecenia, do którego wydawać nielimity
   _ref:=null();
   {? _tab_zl.first()
   || {? _tab_zl.size()=1
      || _ref:=exec('FindAndGet','#table',_tab,_tab_zl.REF,,,null())
      ||
::       Więcej niż jedno zlecenie, wyświetlenie okna z wyborem zlecenia
         {? _tab=ZL
         || VAR.cntx_psh();
            ZL.cntx_psh();
            ZL.index('SYM');
            ZL.prefix();
            ZL.win_sel('SLO_SL');
            ZL.actions('SLO_SL','XY','W');
            ZL.f_set(,,'ZL.REFERENCE in (select REF from :_a)',_tab_zl);
            {? ZL.select()
            || _ref:=ZL.ref()
            ?};
            ZL.actions('SLO_SL','','?');
            ZL.f_clear(1);
            ZL.cntx_pop();
            VAR.cntx_pop()
         ?}
      ?}
   || {? _tab=ZL
      || FUN.emsg('Nie znaleziono powiązanych zleceń produkcyjnych.'@)
      || FUN.emsg('Nie znaleziono powiązanych grup operacji.'@)
      ?}
   ?}
?};
_tab.cntx_psh();
_tab.prefix();
{? _can_continue>0 & _tab.seek(_ref)
|| {? _tab=ZL & ZL.ST_Z='T'
   || FUN.info('Zlecenie jest zamknięte.\nOperacja niemożliwa.'@)
   |? _tab=GROP & GROP.STATUS='Z'
   || FUN.info('Grupa operacji jest zamknięta.\nOperacja niemożliwa.'@)
   ||
      {? _where=0
      || _Tab:=_ZLIMp.ZLIM;
         _nr:=_Tab.NR;
         _zlec:=_Tab.ZL_REF
      ?};
      _rok:=form(ST.AR,,0,'99')+2;
      {? (ND.name()+2)<>_rok || exec('mag_open','open_tab',ST.ODDZ,_rok) ?};
      exec('wyd2lim','zamsiw_rea',{? _tab=ZL || _ref || null ?},{? _tab=GROP || _ref || null ?});

::    Odświeżenie danych
      {? _where=1
      || exec('kontr_lim','zl_limit','T',0,,cur_tab(1,1),,,{? _tab=GROP || 1 || 0 ?})
      || exec('__ZLIM_datapump','zl_limit',_ZLIMp);
         _loop:=_Tab.first();
         {!
         |? _loop
         |! _loop:={? _Tab.NR<>_nr | _Tab.ZL_REF<>_zlec || _Tab.next() ?}
         !};
         obj_del(_Tab)
      ?}
   ?}
?};
_tab.cntx_pop();
~~


\lim_wyd_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Wydanie dla surowca limitowanego - grupa przed
::       [_a] - miesjce wywołania: [0] - okno surowców limitowanych
::                                  1 - kontrola zamknięcia zlecenia/grupy
::----------------------------------------------------------------------------------------------------------------------
_where:={? var_pres('_a')=type_of(0) || _a || 0 ?};
sel_nchk();
params_exec('lim_wyd','zl_limit1',_where);
_tab:=cur_tab(1,1);
{? _tab.sel_size() || _tab.sel_adel() ?};
~~


\zlim_chk_mg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Sprawdza, pobrawność wypełnienia pola ZLIM.MG -
::       czy do surowców zlecenia przypisane są magazyny tego samego typu (paletowy/niepaletowy).
::       Pracuje na aktualnym buforze tabeli ZLIM
::   WE: [_a] - tryb pracy: [1] - dołącz, 0 - popraw
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_add:={? var_pres('_a')=type_of(0) || _a || 1 ?};
_result:=1;
{? ZLIM.LIMIT='T' & ZLIM.SO='S' & ZLIM.MG<>null()
|| _zlgr:={? ZLIM.GROP<>null() || ZLIM.GROP || ZLIM.ZLEC ?};
   _pal:=ZLIM.MG().PAL='T';
   _ref:={? _add>0 || null() || ZLIM.ref() ?};
   ZLIM.cntx_psh();
   {? ZLIM.GROP<>null()
   || ZLIM.index('GRP_PAL')
   || ZLIM.index('ZL_PAL')
   ?};
   ZLIM.prefix(_zlgr,{? _pal || 'N' || 'T' ?},'T','S');
   {? ZLIM.first()
   || _result:={? _ref=ZLIM.ref() || ~ZLIM.next() || 0 ?}
   ?};
   ZLIM.cntx_pop()
?};
_result


\zlim_set_mg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Ustala wartość pola ZLIM.MG. Działa na aktualnym buforze tabeli ZLIM.
::   WE: [_a] - czy sprawdzać magazyn przypisany do źródłowego surowca technologii: [0] - Nie, 1 - tak
::----------------------------------------------------------------------------------------------------------------------
_spr_tmat:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_oddz:=ZLIM.ZLEC().ODDZ;
{? ZLIM.LIMIT='N' & ZLIM.MG=null() || ZLIM.MG:=exec('ustmwyd','zl_common',_oddz,ZLIM.WYD,1,_spr_tmat) ?};
{? ZLIM.MG=null()
|| {? ZLIM.SO='O'
   || ZLIM.MG:=exec('ustmodp','zl_common',_oddz,ZLIM.KTM,_spr_tmat)
   || ZLIM.MG:=exec('ustmag','zl_common',_oddz,ZLIM.KTM,_spr_tmat);
::    W przypadku surowców limitowanych sprawdzenie czy przypisany magazyn paletowy
::    (jeżeli tak to wszystkie surowce muszą być z paletowego)
      {? ZLIM.MG<>null() & ZLIM.LIMIT='T' & ZLIM.SO='S'
      || {? exec('zlim_chk_mg','zl_limit1')=0
         || ZLIM.MG:=null()
         ?}
      ?}
   ?}
?};
~~

:Sign Version 2.0 jowisz:1045 2023/11/06 11:55:01 79ea84ce8606b06198cda60de2c832cb1f24d98efaf025cd9f2a1f64d587b8564cbe1f9436737ba591f1b9b7b6c5f71566f6f60bab564e645a2c613f8b830ea404094a04709e9fe510ce53ac957352d9361a330e093c783619b14cc22573c02c173c9a347d40017170c5ed5aef0fc804e4b7e5e9353860c2d5b1f0ad7ba8bc4e
